
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fdc8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10017dc8  10017dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  10017e74  10017e74  00017e74  2**2
                  ALLOC
  3 .stack        00001804  1001ad14  1001ad14  00017e74  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00017e74  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017e9c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050e64  00000000  00000000  00017f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058ff  00000000  00000000  00068db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b9ff  00000000  00000000  0006e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d68  00000000  00000000  0007a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  0007ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028d0e  00000000  00000000  0007bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018dbe  00000000  00000000  000a4908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00147201  00000000  00000000  000bd6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f5c  00000000  00000000  002048c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10017dc8 	.word	0x10017dc8
10008068:	10017dc8 	.word	0x10017dc8
1000806c:	10017e74 	.word	0x10017e74
10008070:	1001ad14 	.word	0x1001ad14
10008074:	10017e74 	.word	0x10017e74
10008078:	10017dcc 	.word	0x10017dcc
1000807c:	10017e78 	.word	0x10017e78
10008080:	10014975 	.word	0x10014975
10008084:	1000f4e9 	.word	0x1000f4e9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10017e74 	.word	0x10017e74
100080a8:	00000000 	.word	0x00000000
100080ac:	10017dc8 	.word	0x10017dc8

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017e78 	.word	0x10017e78
100080dc:	10017dc8 	.word	0x10017dc8
100080e0:	10017dc8 	.word	0x10017dc8
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c371 	.word	0x1000c371
10008114:	10012c7d 	.word	0x10012c7d
10008118:	10017dcc 	.word	0x10017dcc
1000811c:	000f4240 	.word	0x000f4240
10008120:	10017dc8 	.word	0x10017dc8
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10017dcc 	.word	0x10017dcc
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	10017e90 	.word	0x10017e90

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	10017e90 	.word	0x10017e90

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	10017e90 	.word	0x10017e90

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000cead 	.word	0x1000cead

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000828e:	465f      	mov	r7, fp
10008290:	4656      	mov	r6, sl
10008292:	464d      	mov	r5, r9
10008294:	4644      	mov	r4, r8
10008296:	b4f0      	push	{r4, r5, r6, r7}
10008298:	4683      	mov	fp, r0
1000829a:	4688      	mov	r8, r1
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000829c:	884f      	ldrh	r7, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000829e:	2017      	movs	r0, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082a0:	2f00      	cmp	r7, #0
100082a2:	d035      	beq.n	10008310 <_i2c_master_read_packet+0x84>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082a4:	465b      	mov	r3, fp
100082a6:	681d      	ldr	r5, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a8:	2228      	movs	r2, #40	; 0x28
100082aa:	5cab      	ldrb	r3, [r5, r2]
100082ac:	07db      	lsls	r3, r3, #31
100082ae:	d4fc      	bmi.n	100082aa <_i2c_master_read_packet+0x1e>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b0:	2301      	movs	r3, #1
100082b2:	2234      	movs	r2, #52	; 0x34
100082b4:	54ab      	strb	r3, [r5, r2]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082b6:	3a14      	subs	r2, #20
100082b8:	54ab      	strb	r3, [r5, r2]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082ba:	4643      	mov	r3, r8
100082bc:	881b      	ldrh	r3, [r3, #0]
100082be:	005b      	lsls	r3, r3, #1
100082c0:	2202      	movs	r2, #2
100082c2:	32ff      	adds	r2, #255	; 0xff
100082c4:	4313      	orrs	r3, r2
100082c6:	b29b      	uxth	r3, r3
100082c8:	802b      	strh	r3, [r5, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082ca:	2600      	movs	r6, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082cc:	2301      	movs	r3, #1
100082ce:	469a      	mov	sl, r3
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
            printf("counter %d", (counter-1));
100082d0:	4b12      	ldr	r3, [pc, #72]	; (1000831c <_i2c_master_read_packet+0x90>)
100082d2:	4699      	mov	r9, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082d4:	7b2c      	ldrb	r4, [r5, #12]
100082d6:	b2e4      	uxtb	r4, r4
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082d8:	4653      	mov	r3, sl
100082da:	4223      	tst	r3, r4
100082dc:	d005      	beq.n	100082ea <_i2c_master_read_packet+0x5e>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082de:	1c73      	adds	r3, r6, #1
100082e0:	792a      	ldrb	r2, [r5, #4]
100082e2:	4641      	mov	r1, r8
100082e4:	6849      	ldr	r1, [r1, #4]
100082e6:	558a      	strb	r2, [r1, r6]
100082e8:	b29e      	uxth	r6, r3
            printf("counter %d", (counter-1));
100082ea:	1e71      	subs	r1, r6, #1
100082ec:	480c      	ldr	r0, [pc, #48]	; (10008320 <_i2c_master_read_packet+0x94>)
100082ee:	47c8      	blx	r9
	} while (counter < length); 
100082f0:	42be      	cmp	r6, r7
100082f2:	d3ef      	bcc.n	100082d4 <_i2c_master_read_packet+0x48>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082f4:	06e3      	lsls	r3, r4, #27
100082f6:	d403      	bmi.n	10008300 <_i2c_master_read_packet+0x74>
100082f8:	2210      	movs	r2, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082fa:	7a2b      	ldrb	r3, [r5, #8]
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
            printf("counter %d", (counter-1));
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082fc:	4213      	tst	r3, r2
100082fe:	d0fc      	beq.n	100082fa <_i2c_master_read_packet+0x6e>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008300:	465b      	mov	r3, fp
10008302:	795b      	ldrb	r3, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008304:	2000      	movs	r0, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008306:	2b00      	cmp	r3, #0
10008308:	d102      	bne.n	10008310 <_i2c_master_read_packet+0x84>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000830a:	2200      	movs	r2, #0
1000830c:	3320      	adds	r3, #32
1000830e:	54ea      	strb	r2, [r5, r3]
	}

	return STATUS_OK;
}
10008310:	bc3c      	pop	{r2, r3, r4, r5}
10008312:	4690      	mov	r8, r2
10008314:	4699      	mov	r9, r3
10008316:	46a2      	mov	sl, r4
10008318:	46ab      	mov	fp, r5
1000831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000831c:	10014b4d 	.word	0x10014b4d
10008320:	10015bac 	.word	0x10015bac

10008324 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008324:	b5f0      	push	{r4, r5, r6, r7, lr}
10008326:	464f      	mov	r7, r9
10008328:	4646      	mov	r6, r8
1000832a:	b4c0      	push	{r6, r7}
1000832c:	b083      	sub	sp, #12
1000832e:	4681      	mov	r9, r0
10008330:	000e      	movs	r6, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
10008332:	6807      	ldr	r7, [r0, #0]
	volatile uint16_t counter = 0;
10008334:	2200      	movs	r2, #0
10008336:	466b      	mov	r3, sp
10008338:	80da      	strh	r2, [r3, #6]
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000833a:	884b      	ldrh	r3, [r1, #2]
1000833c:	4698      	mov	r8, r3
1000833e:	3228      	adds	r2, #40	; 0x28
10008340:	5cbb      	ldrb	r3, [r7, r2]
10008342:	07db      	lsls	r3, r3, #31
10008344:	d4fc      	bmi.n	10008340 <_i2c_master_write_packet+0x1c>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008346:	2301      	movs	r3, #1
10008348:	2234      	movs	r2, #52	; 0x34
1000834a:	54bb      	strb	r3, [r7, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000834c:	3a14      	subs	r2, #20
1000834e:	54bb      	strb	r3, [r7, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008350:	8833      	ldrh	r3, [r6, #0]
10008352:	005b      	lsls	r3, r3, #1
10008354:	32e0      	adds	r2, #224	; 0xe0
10008356:	4313      	orrs	r3, r2
10008358:	b29b      	uxth	r3, r3
1000835a:	803b      	strh	r3, [r7, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000835c:	466b      	mov	r3, sp
1000835e:	1d9d      	adds	r5, r3, #6

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008360:	7a3c      	ldrb	r4, [r7, #8]
10008362:	b2e4      	uxtb	r4, r4
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008364:	07e3      	lsls	r3, r4, #31
10008366:	d50c      	bpl.n	10008382 <_i2c_master_write_packet+0x5e>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
10008368:	882b      	ldrh	r3, [r5, #0]
1000836a:	b29b      	uxth	r3, r3
1000836c:	1c5a      	adds	r2, r3, #1
1000836e:	b292      	uxth	r2, r2
10008370:	802a      	strh	r2, [r5, #0]
10008372:	6872      	ldr	r2, [r6, #4]
10008374:	5cd3      	ldrb	r3, [r2, r3]
10008376:	803b      	strh	r3, [r7, #0]
            printf("\r\ncounter %d",(counter-1));
10008378:	8829      	ldrh	r1, [r5, #0]
1000837a:	3901      	subs	r1, #1
1000837c:	480c      	ldr	r0, [pc, #48]	; (100083b0 <_i2c_master_write_packet+0x8c>)
1000837e:	4b0d      	ldr	r3, [pc, #52]	; (100083b4 <_i2c_master_write_packet+0x90>)
10008380:	4798      	blx	r3
            //printf(".");
		}
	} while (counter < length); 
10008382:	882b      	ldrh	r3, [r5, #0]
10008384:	b29b      	uxth	r3, r3
10008386:	4598      	cmp	r8, r3
10008388:	d8ea      	bhi.n	10008360 <_i2c_master_write_packet+0x3c>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000838a:	06e3      	lsls	r3, r4, #27
1000838c:	d403      	bmi.n	10008396 <_i2c_master_write_packet+0x72>
1000838e:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008390:	7a3b      	ldrb	r3, [r7, #8]
            //printf(".");
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008392:	4213      	tst	r3, r2
10008394:	d0fc      	beq.n	10008390 <_i2c_master_write_packet+0x6c>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008396:	464b      	mov	r3, r9
10008398:	795b      	ldrb	r3, [r3, #5]
1000839a:	2b00      	cmp	r3, #0
1000839c:	d102      	bne.n	100083a4 <_i2c_master_write_packet+0x80>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000839e:	2200      	movs	r2, #0
100083a0:	3320      	adds	r3, #32
100083a2:	54fa      	strb	r2, [r7, r3]
	}

	return STATUS_OK;
}
100083a4:	2000      	movs	r0, #0
100083a6:	b003      	add	sp, #12
100083a8:	bc0c      	pop	{r2, r3}
100083aa:	4690      	mov	r8, r2
100083ac:	4699      	mov	r9, r3
100083ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100083b0:	10015bb8 	.word	0x10015bb8
100083b4:	10014b4d 	.word	0x10014b4d

100083b8 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
100083b8:	2303      	movs	r3, #3
100083ba:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100083bc:	330d      	adds	r3, #13
100083be:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100083c0:	3b08      	subs	r3, #8
100083c2:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100083c4:	3301      	adds	r3, #1
100083c6:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100083c8:	3b07      	subs	r3, #7
100083ca:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083cc:	6103      	str	r3, [r0, #16]
}
100083ce:	4770      	bx	lr

100083d0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083d0:	b570      	push	{r4, r5, r6, lr}
100083d2:	0004      	movs	r4, r0
100083d4:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083d6:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083d8:	2800      	cmp	r0, #0
100083da:	d026      	beq.n	1000842a <i2c_master_init+0x5a>
100083dc:	2a00      	cmp	r2, #0
100083de:	d026      	beq.n	1000842e <i2c_master_init+0x5e>
100083e0:	2228      	movs	r2, #40	; 0x28
100083e2:	5c8b      	ldrb	r3, [r1, r2]
100083e4:	07db      	lsls	r3, r3, #31
100083e6:	d4fc      	bmi.n	100083e2 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083e8:	2300      	movs	r3, #0
100083ea:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083ec:	6823      	ldr	r3, [r4, #0]
100083ee:	4a11      	ldr	r2, [pc, #68]	; (10008434 <i2c_master_init+0x64>)
100083f0:	4293      	cmp	r3, r2
100083f2:	d103      	bne.n	100083fc <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083f4:	2003      	movs	r0, #3
100083f6:	4b10      	ldr	r3, [pc, #64]	; (10008438 <i2c_master_init+0x68>)
100083f8:	4798      	blx	r3
100083fa:	e006      	b.n	1000840a <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083fc:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083fe:	4a0f      	ldr	r2, [pc, #60]	; (1000843c <i2c_master_init+0x6c>)
10008400:	4293      	cmp	r3, r2
10008402:	d115      	bne.n	10008430 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008404:	3002      	adds	r0, #2
10008406:	4b0c      	ldr	r3, [pc, #48]	; (10008438 <i2c_master_init+0x68>)
10008408:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000840a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000840c:	8929      	ldrh	r1, [r5, #8]
1000840e:	7928      	ldrb	r0, [r5, #4]
10008410:	4e0b      	ldr	r6, [pc, #44]	; (10008440 <i2c_master_init+0x70>)
10008412:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008414:	8a29      	ldrh	r1, [r5, #16]
10008416:	7b28      	ldrb	r0, [r5, #12]
10008418:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000841a:	782b      	ldrb	r3, [r5, #0]
1000841c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000841e:	886b      	ldrh	r3, [r5, #2]
10008420:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
10008422:	2301      	movs	r3, #1
10008424:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008426:	2000      	movs	r0, #0
10008428:	e002      	b.n	10008430 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000842a:	2017      	movs	r0, #23
1000842c:	e000      	b.n	10008430 <i2c_master_init+0x60>
1000842e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008430:	bd70      	pop	{r4, r5, r6, pc}
10008432:	46c0      	nop			; (mov r8, r8)
10008434:	40003000 	.word	0x40003000
10008438:	1000ca45 	.word	0x1000ca45
1000843c:	40003400 	.word	0x40003400
10008440:	1000bfcd 	.word	0x1000bfcd

10008444 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008444:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008446:	2800      	cmp	r0, #0
10008448:	d008      	beq.n	1000845c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000844a:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000844c:	2900      	cmp	r1, #0
1000844e:	d006      	beq.n	1000845e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008450:	2300      	movs	r3, #0
10008452:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008454:	4b03      	ldr	r3, [pc, #12]	; (10008464 <i2c_master_read_packet_wait+0x20>)
10008456:	4798      	blx	r3
10008458:	0003      	movs	r3, r0
1000845a:	e000      	b.n	1000845e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000845c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000845e:	0018      	movs	r0, r3
10008460:	bd10      	pop	{r4, pc}
10008462:	46c0      	nop			; (mov r8, r8)
10008464:	1000828d 	.word	0x1000828d

10008468 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008468:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000846a:	2800      	cmp	r0, #0
1000846c:	d008      	beq.n	10008480 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000846e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008470:	2900      	cmp	r1, #0
10008472:	d006      	beq.n	10008482 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008474:	2300      	movs	r3, #0
10008476:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008478:	4b03      	ldr	r3, [pc, #12]	; (10008488 <i2c_master_write_packet_wait+0x20>)
1000847a:	4798      	blx	r3
1000847c:	0003      	movs	r3, r0
1000847e:	e000      	b.n	10008482 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008480:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008482:	0018      	movs	r0, r3
10008484:	bd10      	pop	{r4, pc}
10008486:	46c0      	nop			; (mov r8, r8)
10008488:	10008325 	.word	0x10008325

1000848c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000848c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000848e:	2800      	cmp	r0, #0
10008490:	d008      	beq.n	100084a4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008492:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008494:	2900      	cmp	r1, #0
10008496:	d006      	beq.n	100084a6 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008498:	3b16      	subs	r3, #22
1000849a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000849c:	4b03      	ldr	r3, [pc, #12]	; (100084ac <i2c_master_write_packet_wait_no_stop+0x20>)
1000849e:	4798      	blx	r3
100084a0:	0003      	movs	r3, r0
100084a2:	e000      	b.n	100084a6 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100084a4:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100084a6:	0018      	movs	r0, r3
100084a8:	bd10      	pop	{r4, pc}
100084aa:	46c0      	nop			; (mov r8, r8)
100084ac:	10008325 	.word	0x10008325

100084b0 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100084b0:	b510      	push	{r4, lr}
100084b2:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100084b4:	2324      	movs	r3, #36	; 0x24
100084b6:	4a25      	ldr	r2, [pc, #148]	; (1000854c <set_int_enable+0x9c>)
100084b8:	5cd3      	ldrb	r3, [r2, r3]
100084ba:	2b00      	cmp	r3, #0
100084bc:	d019      	beq.n	100084f2 <set_int_enable+0x42>
        if (enable)
100084be:	2800      	cmp	r0, #0
100084c0:	d003      	beq.n	100084ca <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084c2:	2202      	movs	r2, #2
100084c4:	466b      	mov	r3, sp
100084c6:	71da      	strb	r2, [r3, #7]
100084c8:	e002      	b.n	100084d0 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084ca:	2200      	movs	r2, #0
100084cc:	466b      	mov	r3, sp
100084ce:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084d0:	4b1e      	ldr	r3, [pc, #120]	; (1000854c <set_int_enable+0x9c>)
100084d2:	681a      	ldr	r2, [r3, #0]
100084d4:	7c51      	ldrb	r1, [r2, #17]
100084d6:	685b      	ldr	r3, [r3, #4]
100084d8:	7818      	ldrb	r0, [r3, #0]
100084da:	466b      	mov	r3, sp
100084dc:	3307      	adds	r3, #7
100084de:	2201      	movs	r2, #1
100084e0:	4c1b      	ldr	r4, [pc, #108]	; (10008550 <set_int_enable+0xa0>)
100084e2:	47a0      	blx	r4
100084e4:	2800      	cmp	r0, #0
100084e6:	d127      	bne.n	10008538 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084e8:	466b      	mov	r3, sp
100084ea:	79da      	ldrb	r2, [r3, #7]
100084ec:	4b17      	ldr	r3, [pc, #92]	; (1000854c <set_int_enable+0x9c>)
100084ee:	745a      	strb	r2, [r3, #17]
100084f0:	e02a      	b.n	10008548 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084f2:	4b16      	ldr	r3, [pc, #88]	; (1000854c <set_int_enable+0x9c>)
100084f4:	7a9b      	ldrb	r3, [r3, #10]
100084f6:	2b00      	cmp	r3, #0
100084f8:	d021      	beq.n	1000853e <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084fa:	2800      	cmp	r0, #0
100084fc:	d008      	beq.n	10008510 <set_int_enable+0x60>
100084fe:	4b13      	ldr	r3, [pc, #76]	; (1000854c <set_int_enable+0x9c>)
10008500:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
10008502:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008504:	2b00      	cmp	r3, #0
10008506:	d11f      	bne.n	10008548 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008508:	2201      	movs	r2, #1
1000850a:	466b      	mov	r3, sp
1000850c:	71da      	strb	r2, [r3, #7]
1000850e:	e002      	b.n	10008516 <set_int_enable+0x66>
        else
            tmp = 0x00;
10008510:	2200      	movs	r2, #0
10008512:	466b      	mov	r3, sp
10008514:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008516:	4b0d      	ldr	r3, [pc, #52]	; (1000854c <set_int_enable+0x9c>)
10008518:	681a      	ldr	r2, [r3, #0]
1000851a:	7c51      	ldrb	r1, [r2, #17]
1000851c:	685b      	ldr	r3, [r3, #4]
1000851e:	7818      	ldrb	r0, [r3, #0]
10008520:	466b      	mov	r3, sp
10008522:	3307      	adds	r3, #7
10008524:	2201      	movs	r2, #1
10008526:	4c0a      	ldr	r4, [pc, #40]	; (10008550 <set_int_enable+0xa0>)
10008528:	47a0      	blx	r4
1000852a:	2800      	cmp	r0, #0
1000852c:	d10a      	bne.n	10008544 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
1000852e:	466b      	mov	r3, sp
10008530:	79da      	ldrb	r2, [r3, #7]
10008532:	4b06      	ldr	r3, [pc, #24]	; (1000854c <set_int_enable+0x9c>)
10008534:	745a      	strb	r2, [r3, #17]
10008536:	e007      	b.n	10008548 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008538:	2001      	movs	r0, #1
1000853a:	4240      	negs	r0, r0
1000853c:	e004      	b.n	10008548 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
1000853e:	2001      	movs	r0, #1
10008540:	4240      	negs	r0, r0
10008542:	e001      	b.n	10008548 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008544:	2001      	movs	r0, #1
10008546:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
10008548:	b002      	add	sp, #8
1000854a:	bd10      	pop	{r4, pc}
1000854c:	10017dd0 	.word	0x10017dd0
10008550:	1000a779 	.word	0x1000a779

10008554 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008554:	b510      	push	{r4, lr}
10008556:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008558:	4b79      	ldr	r3, [pc, #484]	; (10008740 <mpu_reset_fifo+0x1ec>)
1000855a:	7a9b      	ldrb	r3, [r3, #10]
1000855c:	2b00      	cmp	r3, #0
1000855e:	d100      	bne.n	10008562 <mpu_reset_fifo+0xe>
10008560:	e0ce      	b.n	10008700 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008562:	466b      	mov	r3, sp
10008564:	3307      	adds	r3, #7
10008566:	2200      	movs	r2, #0
10008568:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000856a:	4a75      	ldr	r2, [pc, #468]	; (10008740 <mpu_reset_fifo+0x1ec>)
1000856c:	6811      	ldr	r1, [r2, #0]
1000856e:	7c49      	ldrb	r1, [r1, #17]
10008570:	6852      	ldr	r2, [r2, #4]
10008572:	7810      	ldrb	r0, [r2, #0]
10008574:	2201      	movs	r2, #1
10008576:	4c73      	ldr	r4, [pc, #460]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008578:	47a0      	blx	r4
1000857a:	2800      	cmp	r0, #0
1000857c:	d000      	beq.n	10008580 <mpu_reset_fifo+0x2c>
1000857e:	e0c2      	b.n	10008706 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008580:	4b6f      	ldr	r3, [pc, #444]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008582:	681a      	ldr	r2, [r3, #0]
10008584:	7951      	ldrb	r1, [r2, #5]
10008586:	685b      	ldr	r3, [r3, #4]
10008588:	7818      	ldrb	r0, [r3, #0]
1000858a:	466b      	mov	r3, sp
1000858c:	3307      	adds	r3, #7
1000858e:	2201      	movs	r2, #1
10008590:	4c6c      	ldr	r4, [pc, #432]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008592:	47a0      	blx	r4
10008594:	2800      	cmp	r0, #0
10008596:	d000      	beq.n	1000859a <mpu_reset_fifo+0x46>
10008598:	e0b8      	b.n	1000870c <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000859a:	4b69      	ldr	r3, [pc, #420]	; (10008740 <mpu_reset_fifo+0x1ec>)
1000859c:	681a      	ldr	r2, [r3, #0]
1000859e:	7911      	ldrb	r1, [r2, #4]
100085a0:	685b      	ldr	r3, [r3, #4]
100085a2:	7818      	ldrb	r0, [r3, #0]
100085a4:	466b      	mov	r3, sp
100085a6:	3307      	adds	r3, #7
100085a8:	2201      	movs	r2, #1
100085aa:	4c66      	ldr	r4, [pc, #408]	; (10008744 <mpu_reset_fifo+0x1f0>)
100085ac:	47a0      	blx	r4
100085ae:	2800      	cmp	r0, #0
100085b0:	d000      	beq.n	100085b4 <mpu_reset_fifo+0x60>
100085b2:	e0ae      	b.n	10008712 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
100085b4:	2324      	movs	r3, #36	; 0x24
100085b6:	4a62      	ldr	r2, [pc, #392]	; (10008740 <mpu_reset_fifo+0x1ec>)
100085b8:	5cd3      	ldrb	r3, [r2, r3]
100085ba:	2b00      	cmp	r3, #0
100085bc:	d04f      	beq.n	1000865e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100085be:	466b      	mov	r3, sp
100085c0:	3307      	adds	r3, #7
100085c2:	220c      	movs	r2, #12
100085c4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085c6:	4a5e      	ldr	r2, [pc, #376]	; (10008740 <mpu_reset_fifo+0x1ec>)
100085c8:	6811      	ldr	r1, [r2, #0]
100085ca:	7909      	ldrb	r1, [r1, #4]
100085cc:	6852      	ldr	r2, [r2, #4]
100085ce:	7810      	ldrb	r0, [r2, #0]
100085d0:	2201      	movs	r2, #1
100085d2:	4c5c      	ldr	r4, [pc, #368]	; (10008744 <mpu_reset_fifo+0x1f0>)
100085d4:	47a0      	blx	r4
100085d6:	2800      	cmp	r0, #0
100085d8:	d000      	beq.n	100085dc <mpu_reset_fifo+0x88>
100085da:	e09d      	b.n	10008718 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
100085dc:	3032      	adds	r0, #50	; 0x32
100085de:	4b5a      	ldr	r3, [pc, #360]	; (10008748 <mpu_reset_fifo+0x1f4>)
100085e0:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100085e2:	22c0      	movs	r2, #192	; 0xc0
100085e4:	466b      	mov	r3, sp
100085e6:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100085e8:	4b55      	ldr	r3, [pc, #340]	; (10008740 <mpu_reset_fifo+0x1ec>)
100085ea:	7a9b      	ldrb	r3, [r3, #10]
100085ec:	07db      	lsls	r3, r3, #31
100085ee:	d502      	bpl.n	100085f6 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100085f0:	3220      	adds	r2, #32
100085f2:	466b      	mov	r3, sp
100085f4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085f6:	4b52      	ldr	r3, [pc, #328]	; (10008740 <mpu_reset_fifo+0x1ec>)
100085f8:	681a      	ldr	r2, [r3, #0]
100085fa:	7911      	ldrb	r1, [r2, #4]
100085fc:	685b      	ldr	r3, [r3, #4]
100085fe:	7818      	ldrb	r0, [r3, #0]
10008600:	466b      	mov	r3, sp
10008602:	3307      	adds	r3, #7
10008604:	2201      	movs	r2, #1
10008606:	4c4f      	ldr	r4, [pc, #316]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008608:	47a0      	blx	r4
1000860a:	2800      	cmp	r0, #0
1000860c:	d000      	beq.n	10008610 <mpu_reset_fifo+0xbc>
1000860e:	e086      	b.n	1000871e <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008610:	4b4b      	ldr	r3, [pc, #300]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008612:	7c5b      	ldrb	r3, [r3, #17]
10008614:	2b00      	cmp	r3, #0
10008616:	d003      	beq.n	10008620 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008618:	2202      	movs	r2, #2
1000861a:	466b      	mov	r3, sp
1000861c:	71da      	strb	r2, [r3, #7]
1000861e:	e002      	b.n	10008626 <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008620:	2200      	movs	r2, #0
10008622:	466b      	mov	r3, sp
10008624:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008626:	4b46      	ldr	r3, [pc, #280]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008628:	681a      	ldr	r2, [r3, #0]
1000862a:	7c51      	ldrb	r1, [r2, #17]
1000862c:	685b      	ldr	r3, [r3, #4]
1000862e:	7818      	ldrb	r0, [r3, #0]
10008630:	466b      	mov	r3, sp
10008632:	3307      	adds	r3, #7
10008634:	2201      	movs	r2, #1
10008636:	4c43      	ldr	r4, [pc, #268]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008638:	47a0      	blx	r4
1000863a:	2800      	cmp	r0, #0
1000863c:	d172      	bne.n	10008724 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
1000863e:	466b      	mov	r3, sp
10008640:	3307      	adds	r3, #7
10008642:	2200      	movs	r2, #0
10008644:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008646:	4a3e      	ldr	r2, [pc, #248]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008648:	6811      	ldr	r1, [r2, #0]
1000864a:	7949      	ldrb	r1, [r1, #5]
1000864c:	6852      	ldr	r2, [r2, #4]
1000864e:	7810      	ldrb	r0, [r2, #0]
10008650:	2201      	movs	r2, #1
10008652:	4c3c      	ldr	r4, [pc, #240]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008654:	47a0      	blx	r4
10008656:	1e43      	subs	r3, r0, #1
10008658:	4198      	sbcs	r0, r3
1000865a:	4240      	negs	r0, r0
1000865c:	e06d      	b.n	1000873a <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000865e:	466b      	mov	r3, sp
10008660:	3307      	adds	r3, #7
10008662:	2204      	movs	r2, #4
10008664:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008666:	4a36      	ldr	r2, [pc, #216]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008668:	6811      	ldr	r1, [r2, #0]
1000866a:	7909      	ldrb	r1, [r1, #4]
1000866c:	6852      	ldr	r2, [r2, #4]
1000866e:	7810      	ldrb	r0, [r2, #0]
10008670:	2201      	movs	r2, #1
10008672:	4c34      	ldr	r4, [pc, #208]	; (10008744 <mpu_reset_fifo+0x1f0>)
10008674:	47a0      	blx	r4
10008676:	2800      	cmp	r0, #0
10008678:	d157      	bne.n	1000872a <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000867a:	4b31      	ldr	r3, [pc, #196]	; (10008740 <mpu_reset_fifo+0x1ec>)
1000867c:	7c9b      	ldrb	r3, [r3, #18]
1000867e:	2b00      	cmp	r3, #0
10008680:	d103      	bne.n	1000868a <mpu_reset_fifo+0x136>
10008682:	4b2f      	ldr	r3, [pc, #188]	; (10008740 <mpu_reset_fifo+0x1ec>)
10008684:	7a9b      	ldrb	r3, [r3, #10]
10008686:	07db      	lsls	r3, r3, #31
10008688:	d403      	bmi.n	10008692 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000868a:	2240      	movs	r2, #64	; 0x40
1000868c:	466b      	mov	r3, sp
1000868e:	71da      	strb	r2, [r3, #7]
10008690:	e002      	b.n	10008698 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008692:	2260      	movs	r2, #96	; 0x60
10008694:	466b      	mov	r3, sp
10008696:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008698:	4b29      	ldr	r3, [pc, #164]	; (10008740 <mpu_reset_fifo+0x1ec>)
1000869a:	681a      	ldr	r2, [r3, #0]
1000869c:	7911      	ldrb	r1, [r2, #4]
1000869e:	685b      	ldr	r3, [r3, #4]
100086a0:	7818      	ldrb	r0, [r3, #0]
100086a2:	466b      	mov	r3, sp
100086a4:	3307      	adds	r3, #7
100086a6:	2201      	movs	r2, #1
100086a8:	4c26      	ldr	r4, [pc, #152]	; (10008744 <mpu_reset_fifo+0x1f0>)
100086aa:	47a0      	blx	r4
100086ac:	2800      	cmp	r0, #0
100086ae:	d13f      	bne.n	10008730 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
100086b0:	3032      	adds	r0, #50	; 0x32
100086b2:	4b25      	ldr	r3, [pc, #148]	; (10008748 <mpu_reset_fifo+0x1f4>)
100086b4:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
100086b6:	4b22      	ldr	r3, [pc, #136]	; (10008740 <mpu_reset_fifo+0x1ec>)
100086b8:	7c5b      	ldrb	r3, [r3, #17]
100086ba:	2b00      	cmp	r3, #0
100086bc:	d003      	beq.n	100086c6 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
100086be:	2201      	movs	r2, #1
100086c0:	466b      	mov	r3, sp
100086c2:	71da      	strb	r2, [r3, #7]
100086c4:	e002      	b.n	100086cc <mpu_reset_fifo+0x178>
        else
            data = 0;
100086c6:	2200      	movs	r2, #0
100086c8:	466b      	mov	r3, sp
100086ca:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086cc:	4b1c      	ldr	r3, [pc, #112]	; (10008740 <mpu_reset_fifo+0x1ec>)
100086ce:	681a      	ldr	r2, [r3, #0]
100086d0:	7c51      	ldrb	r1, [r2, #17]
100086d2:	685b      	ldr	r3, [r3, #4]
100086d4:	7818      	ldrb	r0, [r3, #0]
100086d6:	466b      	mov	r3, sp
100086d8:	3307      	adds	r3, #7
100086da:	2201      	movs	r2, #1
100086dc:	4c19      	ldr	r4, [pc, #100]	; (10008744 <mpu_reset_fifo+0x1f0>)
100086de:	47a0      	blx	r4
100086e0:	2800      	cmp	r0, #0
100086e2:	d128      	bne.n	10008736 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100086e4:	4a16      	ldr	r2, [pc, #88]	; (10008740 <mpu_reset_fifo+0x1ec>)
100086e6:	0013      	movs	r3, r2
100086e8:	3310      	adds	r3, #16
100086ea:	6811      	ldr	r1, [r2, #0]
100086ec:	7949      	ldrb	r1, [r1, #5]
100086ee:	6852      	ldr	r2, [r2, #4]
100086f0:	7810      	ldrb	r0, [r2, #0]
100086f2:	2201      	movs	r2, #1
100086f4:	4c13      	ldr	r4, [pc, #76]	; (10008744 <mpu_reset_fifo+0x1f0>)
100086f6:	47a0      	blx	r4
100086f8:	1e43      	subs	r3, r0, #1
100086fa:	4198      	sbcs	r0, r3
100086fc:	4240      	negs	r0, r0
100086fe:	e01c      	b.n	1000873a <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008700:	2001      	movs	r0, #1
10008702:	4240      	negs	r0, r0
10008704:	e019      	b.n	1000873a <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
10008706:	2001      	movs	r0, #1
10008708:	4240      	negs	r0, r0
1000870a:	e016      	b.n	1000873a <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
1000870c:	2001      	movs	r0, #1
1000870e:	4240      	negs	r0, r0
10008710:	e013      	b.n	1000873a <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008712:	2001      	movs	r0, #1
10008714:	4240      	negs	r0, r0
10008716:	e010      	b.n	1000873a <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008718:	2001      	movs	r0, #1
1000871a:	4240      	negs	r0, r0
1000871c:	e00d      	b.n	1000873a <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000871e:	2001      	movs	r0, #1
10008720:	4240      	negs	r0, r0
10008722:	e00a      	b.n	1000873a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008724:	2001      	movs	r0, #1
10008726:	4240      	negs	r0, r0
10008728:	e007      	b.n	1000873a <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000872a:	2001      	movs	r0, #1
1000872c:	4240      	negs	r0, r0
1000872e:	e004      	b.n	1000873a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008730:	2001      	movs	r0, #1
10008732:	4240      	negs	r0, r0
10008734:	e001      	b.n	1000873a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008736:	2001      	movs	r0, #1
10008738:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
1000873a:	b002      	add	sp, #8
1000873c:	bd10      	pop	{r4, pc}
1000873e:	46c0      	nop			; (mov r8, r8)
10008740:	10017dd0 	.word	0x10017dd0
10008744:	1000a779 	.word	0x1000a779
10008748:	10008129 	.word	0x10008129

1000874c <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
1000874c:	b510      	push	{r4, lr}
1000874e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008750:	4b24      	ldr	r3, [pc, #144]	; (100087e4 <mpu_set_gyro_fsr+0x98>)
10008752:	7a9b      	ldrb	r3, [r3, #10]
10008754:	2b00      	cmp	r3, #0
10008756:	d03b      	beq.n	100087d0 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008758:	23fa      	movs	r3, #250	; 0xfa
1000875a:	005b      	lsls	r3, r3, #1
1000875c:	4298      	cmp	r0, r3
1000875e:	d010      	beq.n	10008782 <mpu_set_gyro_fsr+0x36>
10008760:	d802      	bhi.n	10008768 <mpu_set_gyro_fsr+0x1c>
10008762:	28fa      	cmp	r0, #250	; 0xfa
10008764:	d009      	beq.n	1000877a <mpu_set_gyro_fsr+0x2e>
10008766:	e036      	b.n	100087d6 <mpu_set_gyro_fsr+0x8a>
10008768:	23fa      	movs	r3, #250	; 0xfa
1000876a:	009b      	lsls	r3, r3, #2
1000876c:	4298      	cmp	r0, r3
1000876e:	d00c      	beq.n	1000878a <mpu_set_gyro_fsr+0x3e>
10008770:	23fa      	movs	r3, #250	; 0xfa
10008772:	00db      	lsls	r3, r3, #3
10008774:	4298      	cmp	r0, r3
10008776:	d00c      	beq.n	10008792 <mpu_set_gyro_fsr+0x46>
10008778:	e02d      	b.n	100087d6 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000877a:	2200      	movs	r2, #0
1000877c:	466b      	mov	r3, sp
1000877e:	71da      	strb	r2, [r3, #7]
        break;
10008780:	e00a      	b.n	10008798 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008782:	2208      	movs	r2, #8
10008784:	466b      	mov	r3, sp
10008786:	71da      	strb	r2, [r3, #7]
        break;
10008788:	e006      	b.n	10008798 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000878a:	2210      	movs	r2, #16
1000878c:	466b      	mov	r3, sp
1000878e:	71da      	strb	r2, [r3, #7]
        break;
10008790:	e002      	b.n	10008798 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008792:	2218      	movs	r2, #24
10008794:	466b      	mov	r3, sp
10008796:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008798:	466b      	mov	r3, sp
1000879a:	3307      	adds	r3, #7
1000879c:	781b      	ldrb	r3, [r3, #0]
1000879e:	4a11      	ldr	r2, [pc, #68]	; (100087e4 <mpu_set_gyro_fsr+0x98>)
100087a0:	7a12      	ldrb	r2, [r2, #8]
100087a2:	08db      	lsrs	r3, r3, #3
        return 0;
100087a4:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
100087a6:	429a      	cmp	r2, r3
100087a8:	d01a      	beq.n	100087e0 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
100087aa:	4b0e      	ldr	r3, [pc, #56]	; (100087e4 <mpu_set_gyro_fsr+0x98>)
100087ac:	681a      	ldr	r2, [r3, #0]
100087ae:	7991      	ldrb	r1, [r2, #6]
100087b0:	685b      	ldr	r3, [r3, #4]
100087b2:	7818      	ldrb	r0, [r3, #0]
100087b4:	466b      	mov	r3, sp
100087b6:	3307      	adds	r3, #7
100087b8:	2201      	movs	r2, #1
100087ba:	4c0b      	ldr	r4, [pc, #44]	; (100087e8 <mpu_set_gyro_fsr+0x9c>)
100087bc:	47a0      	blx	r4
100087be:	2800      	cmp	r0, #0
100087c0:	d10c      	bne.n	100087dc <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
100087c2:	466b      	mov	r3, sp
100087c4:	3307      	adds	r3, #7
100087c6:	781b      	ldrb	r3, [r3, #0]
100087c8:	08db      	lsrs	r3, r3, #3
100087ca:	4a06      	ldr	r2, [pc, #24]	; (100087e4 <mpu_set_gyro_fsr+0x98>)
100087cc:	7213      	strb	r3, [r2, #8]
    return 0;
100087ce:	e007      	b.n	100087e0 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087d0:	2001      	movs	r0, #1
100087d2:	4240      	negs	r0, r0
100087d4:	e004      	b.n	100087e0 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
100087d6:	2001      	movs	r0, #1
100087d8:	4240      	negs	r0, r0
100087da:	e001      	b.n	100087e0 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
100087dc:	2001      	movs	r0, #1
100087de:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
100087e0:	b002      	add	sp, #8
100087e2:	bd10      	pop	{r4, pc}
100087e4:	10017dd0 	.word	0x10017dd0
100087e8:	1000a779 	.word	0x1000a779

100087ec <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
100087ec:	4b11      	ldr	r3, [pc, #68]	; (10008834 <mpu_get_accel_fsr+0x48>)
100087ee:	7a5b      	ldrb	r3, [r3, #9]
100087f0:	2b01      	cmp	r3, #1
100087f2:	d009      	beq.n	10008808 <mpu_get_accel_fsr+0x1c>
100087f4:	2b00      	cmp	r3, #0
100087f6:	d004      	beq.n	10008802 <mpu_get_accel_fsr+0x16>
100087f8:	2b02      	cmp	r3, #2
100087fa:	d008      	beq.n	1000880e <mpu_get_accel_fsr+0x22>
100087fc:	2b03      	cmp	r3, #3
100087fe:	d009      	beq.n	10008814 <mpu_get_accel_fsr+0x28>
10008800:	e014      	b.n	1000882c <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
10008802:	2302      	movs	r3, #2
10008804:	7003      	strb	r3, [r0, #0]
        break;
10008806:	e007      	b.n	10008818 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008808:	2304      	movs	r3, #4
1000880a:	7003      	strb	r3, [r0, #0]
        break;
1000880c:	e004      	b.n	10008818 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
1000880e:	2308      	movs	r3, #8
10008810:	7003      	strb	r3, [r0, #0]
        break;
10008812:	e001      	b.n	10008818 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
10008814:	2310      	movs	r3, #16
10008816:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008818:	4b06      	ldr	r3, [pc, #24]	; (10008834 <mpu_get_accel_fsr+0x48>)
1000881a:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
1000881c:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000881e:	2a00      	cmp	r2, #0
10008820:	d006      	beq.n	10008830 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
10008822:	7803      	ldrb	r3, [r0, #0]
10008824:	005b      	lsls	r3, r3, #1
10008826:	7003      	strb	r3, [r0, #0]
    return 0;
10008828:	2300      	movs	r3, #0
1000882a:	e001      	b.n	10008830 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
1000882c:	2301      	movs	r3, #1
1000882e:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008830:	0018      	movs	r0, r3
10008832:	4770      	bx	lr
10008834:	10017dd0 	.word	0x10017dd0

10008838 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008838:	b510      	push	{r4, lr}
1000883a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000883c:	4b21      	ldr	r3, [pc, #132]	; (100088c4 <mpu_set_accel_fsr+0x8c>)
1000883e:	7a9b      	ldrb	r3, [r3, #10]
10008840:	2b00      	cmp	r3, #0
10008842:	d035      	beq.n	100088b0 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
10008844:	2804      	cmp	r0, #4
10008846:	d00c      	beq.n	10008862 <mpu_set_accel_fsr+0x2a>
10008848:	d802      	bhi.n	10008850 <mpu_set_accel_fsr+0x18>
1000884a:	2802      	cmp	r0, #2
1000884c:	d005      	beq.n	1000885a <mpu_set_accel_fsr+0x22>
1000884e:	e032      	b.n	100088b6 <mpu_set_accel_fsr+0x7e>
10008850:	2808      	cmp	r0, #8
10008852:	d00a      	beq.n	1000886a <mpu_set_accel_fsr+0x32>
10008854:	2810      	cmp	r0, #16
10008856:	d00c      	beq.n	10008872 <mpu_set_accel_fsr+0x3a>
10008858:	e02d      	b.n	100088b6 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
1000885a:	2200      	movs	r2, #0
1000885c:	466b      	mov	r3, sp
1000885e:	71da      	strb	r2, [r3, #7]
        break;
10008860:	e00a      	b.n	10008878 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
10008862:	2208      	movs	r2, #8
10008864:	466b      	mov	r3, sp
10008866:	71da      	strb	r2, [r3, #7]
        break;
10008868:	e006      	b.n	10008878 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
1000886a:	2210      	movs	r2, #16
1000886c:	466b      	mov	r3, sp
1000886e:	71da      	strb	r2, [r3, #7]
        break;
10008870:	e002      	b.n	10008878 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
10008872:	2218      	movs	r2, #24
10008874:	466b      	mov	r3, sp
10008876:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008878:	466b      	mov	r3, sp
1000887a:	3307      	adds	r3, #7
1000887c:	781b      	ldrb	r3, [r3, #0]
1000887e:	4a11      	ldr	r2, [pc, #68]	; (100088c4 <mpu_set_accel_fsr+0x8c>)
10008880:	7a52      	ldrb	r2, [r2, #9]
10008882:	08db      	lsrs	r3, r3, #3
        return 0;
10008884:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008886:	429a      	cmp	r2, r3
10008888:	d01a      	beq.n	100088c0 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000888a:	4b0e      	ldr	r3, [pc, #56]	; (100088c4 <mpu_set_accel_fsr+0x8c>)
1000888c:	681a      	ldr	r2, [r3, #0]
1000888e:	79d1      	ldrb	r1, [r2, #7]
10008890:	685b      	ldr	r3, [r3, #4]
10008892:	7818      	ldrb	r0, [r3, #0]
10008894:	466b      	mov	r3, sp
10008896:	3307      	adds	r3, #7
10008898:	2201      	movs	r2, #1
1000889a:	4c0b      	ldr	r4, [pc, #44]	; (100088c8 <mpu_set_accel_fsr+0x90>)
1000889c:	47a0      	blx	r4
1000889e:	2800      	cmp	r0, #0
100088a0:	d10c      	bne.n	100088bc <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100088a2:	466b      	mov	r3, sp
100088a4:	3307      	adds	r3, #7
100088a6:	781b      	ldrb	r3, [r3, #0]
100088a8:	08db      	lsrs	r3, r3, #3
100088aa:	4a06      	ldr	r2, [pc, #24]	; (100088c4 <mpu_set_accel_fsr+0x8c>)
100088ac:	7253      	strb	r3, [r2, #9]
    return 0;
100088ae:	e007      	b.n	100088c0 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100088b0:	2001      	movs	r0, #1
100088b2:	4240      	negs	r0, r0
100088b4:	e004      	b.n	100088c0 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100088b6:	2001      	movs	r0, #1
100088b8:	4240      	negs	r0, r0
100088ba:	e001      	b.n	100088c0 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
100088bc:	2001      	movs	r0, #1
100088be:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100088c0:	b002      	add	sp, #8
100088c2:	bd10      	pop	{r4, pc}
100088c4:	10017dd0 	.word	0x10017dd0
100088c8:	1000a779 	.word	0x1000a779

100088cc <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
100088cc:	b510      	push	{r4, lr}
100088ce:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088d0:	4b2b      	ldr	r3, [pc, #172]	; (10008980 <mpu_set_lpf+0xb4>)
100088d2:	7a9b      	ldrb	r3, [r3, #10]
100088d4:	2b00      	cmp	r3, #0
100088d6:	d049      	beq.n	1000896c <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
100088d8:	28bb      	cmp	r0, #187	; 0xbb
100088da:	d903      	bls.n	100088e4 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
100088dc:	2201      	movs	r2, #1
100088de:	466b      	mov	r3, sp
100088e0:	71da      	strb	r2, [r3, #7]
100088e2:	e01a      	b.n	1000891a <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
100088e4:	2861      	cmp	r0, #97	; 0x61
100088e6:	d903      	bls.n	100088f0 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
100088e8:	2202      	movs	r2, #2
100088ea:	466b      	mov	r3, sp
100088ec:	71da      	strb	r2, [r3, #7]
100088ee:	e014      	b.n	1000891a <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100088f0:	2829      	cmp	r0, #41	; 0x29
100088f2:	d903      	bls.n	100088fc <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100088f4:	2203      	movs	r2, #3
100088f6:	466b      	mov	r3, sp
100088f8:	71da      	strb	r2, [r3, #7]
100088fa:	e00e      	b.n	1000891a <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100088fc:	2813      	cmp	r0, #19
100088fe:	d903      	bls.n	10008908 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008900:	2204      	movs	r2, #4
10008902:	466b      	mov	r3, sp
10008904:	71da      	strb	r2, [r3, #7]
10008906:	e008      	b.n	1000891a <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008908:	2809      	cmp	r0, #9
1000890a:	d903      	bls.n	10008914 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
1000890c:	2205      	movs	r2, #5
1000890e:	466b      	mov	r3, sp
10008910:	71da      	strb	r2, [r3, #7]
10008912:	e002      	b.n	1000891a <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
10008914:	2206      	movs	r2, #6
10008916:	466b      	mov	r3, sp
10008918:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
1000891a:	4b19      	ldr	r3, [pc, #100]	; (10008980 <mpu_set_lpf+0xb4>)
1000891c:	7ada      	ldrb	r2, [r3, #11]
1000891e:	466b      	mov	r3, sp
10008920:	3307      	adds	r3, #7
10008922:	781b      	ldrb	r3, [r3, #0]
        return 0;
10008924:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008926:	429a      	cmp	r2, r3
10008928:	d028      	beq.n	1000897c <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000892a:	4b15      	ldr	r3, [pc, #84]	; (10008980 <mpu_set_lpf+0xb4>)
1000892c:	681a      	ldr	r2, [r3, #0]
1000892e:	7891      	ldrb	r1, [r2, #2]
10008930:	685b      	ldr	r3, [r3, #4]
10008932:	7818      	ldrb	r0, [r3, #0]
10008934:	466b      	mov	r3, sp
10008936:	3307      	adds	r3, #7
10008938:	2201      	movs	r2, #1
1000893a:	4c12      	ldr	r4, [pc, #72]	; (10008984 <mpu_set_lpf+0xb8>)
1000893c:	47a0      	blx	r4
1000893e:	2800      	cmp	r0, #0
10008940:	d117      	bne.n	10008972 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008942:	466b      	mov	r3, sp
10008944:	3307      	adds	r3, #7
10008946:	7819      	ldrb	r1, [r3, #0]
10008948:	2240      	movs	r2, #64	; 0x40
1000894a:	430a      	orrs	r2, r1
1000894c:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
1000894e:	4a0c      	ldr	r2, [pc, #48]	; (10008980 <mpu_set_lpf+0xb4>)
10008950:	6811      	ldr	r1, [r2, #0]
10008952:	7a09      	ldrb	r1, [r1, #8]
10008954:	6852      	ldr	r2, [r2, #4]
10008956:	7810      	ldrb	r0, [r2, #0]
10008958:	2201      	movs	r2, #1
1000895a:	4c0a      	ldr	r4, [pc, #40]	; (10008984 <mpu_set_lpf+0xb8>)
1000895c:	47a0      	blx	r4
1000895e:	2800      	cmp	r0, #0
10008960:	d10a      	bne.n	10008978 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008962:	466b      	mov	r3, sp
10008964:	79da      	ldrb	r2, [r3, #7]
10008966:	4b06      	ldr	r3, [pc, #24]	; (10008980 <mpu_set_lpf+0xb4>)
10008968:	72da      	strb	r2, [r3, #11]
    return 0;
1000896a:	e007      	b.n	1000897c <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000896c:	2001      	movs	r0, #1
1000896e:	4240      	negs	r0, r0
10008970:	e004      	b.n	1000897c <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008972:	2001      	movs	r0, #1
10008974:	4240      	negs	r0, r0
10008976:	e001      	b.n	1000897c <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008978:	2001      	movs	r0, #1
1000897a:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
1000897c:	b002      	add	sp, #8
1000897e:	bd10      	pop	{r4, pc}
10008980:	10017dd0 	.word	0x10017dd0
10008984:	1000a779 	.word	0x1000a779

10008988 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008988:	2324      	movs	r3, #36	; 0x24
1000898a:	4a05      	ldr	r2, [pc, #20]	; (100089a0 <mpu_get_sample_rate+0x18>)
1000898c:	5cd3      	ldrb	r3, [r2, r3]
1000898e:	2b00      	cmp	r3, #0
10008990:	d103      	bne.n	1000899a <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008992:	89d3      	ldrh	r3, [r2, #14]
10008994:	8003      	strh	r3, [r0, #0]
    return 0;
10008996:	2000      	movs	r0, #0
10008998:	e001      	b.n	1000899e <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
1000899a:	2001      	movs	r0, #1
1000899c:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
1000899e:	4770      	bx	lr
100089a0:	10017dd0 	.word	0x10017dd0

100089a4 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100089a4:	b530      	push	{r4, r5, lr}
100089a6:	b083      	sub	sp, #12
100089a8:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100089aa:	d020      	beq.n	100089ee <mpu_set_compass_sample_rate+0x4a>
100089ac:	4b17      	ldr	r3, [pc, #92]	; (10008a0c <mpu_set_compass_sample_rate+0x68>)
100089ae:	89d8      	ldrh	r0, [r3, #14]
100089b0:	4281      	cmp	r1, r0
100089b2:	d81f      	bhi.n	100089f4 <mpu_set_compass_sample_rate+0x50>
100089b4:	2964      	cmp	r1, #100	; 0x64
100089b6:	d820      	bhi.n	100089fa <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100089b8:	466b      	mov	r3, sp
100089ba:	1ddc      	adds	r4, r3, #7
100089bc:	4b14      	ldr	r3, [pc, #80]	; (10008a10 <mpu_set_compass_sample_rate+0x6c>)
100089be:	4798      	blx	r3
100089c0:	3801      	subs	r0, #1
100089c2:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100089c4:	4b11      	ldr	r3, [pc, #68]	; (10008a0c <mpu_set_compass_sample_rate+0x68>)
100089c6:	2224      	movs	r2, #36	; 0x24
100089c8:	6819      	ldr	r1, [r3, #0]
100089ca:	5c89      	ldrb	r1, [r1, r2]
100089cc:	685b      	ldr	r3, [r3, #4]
100089ce:	7818      	ldrb	r0, [r3, #0]
100089d0:	0023      	movs	r3, r4
100089d2:	3a23      	subs	r2, #35	; 0x23
100089d4:	4c0f      	ldr	r4, [pc, #60]	; (10008a14 <mpu_set_compass_sample_rate+0x70>)
100089d6:	47a0      	blx	r4
100089d8:	1e04      	subs	r4, r0, #0
100089da:	d111      	bne.n	10008a00 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
100089dc:	4d0b      	ldr	r5, [pc, #44]	; (10008a0c <mpu_set_compass_sample_rate+0x68>)
100089de:	89e8      	ldrh	r0, [r5, #14]
100089e0:	466b      	mov	r3, sp
100089e2:	79d9      	ldrb	r1, [r3, #7]
100089e4:	3101      	adds	r1, #1
100089e6:	4b0c      	ldr	r3, [pc, #48]	; (10008a18 <mpu_set_compass_sample_rate+0x74>)
100089e8:	4798      	blx	r3
100089ea:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
100089ec:	e00a      	b.n	10008a04 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
100089ee:	2401      	movs	r4, #1
100089f0:	4264      	negs	r4, r4
100089f2:	e007      	b.n	10008a04 <mpu_set_compass_sample_rate+0x60>
100089f4:	2401      	movs	r4, #1
100089f6:	4264      	negs	r4, r4
100089f8:	e004      	b.n	10008a04 <mpu_set_compass_sample_rate+0x60>
100089fa:	2401      	movs	r4, #1
100089fc:	4264      	negs	r4, r4
100089fe:	e001      	b.n	10008a04 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a00:	2401      	movs	r4, #1
10008a02:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008a04:	0020      	movs	r0, r4
10008a06:	b003      	add	sp, #12
10008a08:	bd30      	pop	{r4, r5, pc}
10008a0a:	46c0      	nop			; (mov r8, r8)
10008a0c:	10017dd0 	.word	0x10017dd0
10008a10:	10012c7d 	.word	0x10012c7d
10008a14:	1000a779 	.word	0x1000a779
10008a18:	10012d91 	.word	0x10012d91

10008a1c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a1c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a1e:	2324      	movs	r3, #36	; 0x24
10008a20:	4a16      	ldr	r2, [pc, #88]	; (10008a7c <mpu_configure_fifo+0x60>)
10008a22:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a24:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a26:	2b00      	cmp	r3, #0
10008a28:	d126      	bne.n	10008a78 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a2a:	7a94      	ldrb	r4, [r2, #10]
10008a2c:	2c00      	cmp	r4, #0
10008a2e:	d015      	beq.n	10008a5c <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a30:	2301      	movs	r3, #1
10008a32:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a34:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a36:	4004      	ands	r4, r0
10008a38:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008a3a:	1b04      	subs	r4, r0, r4
10008a3c:	1e63      	subs	r3, r4, #1
10008a3e:	419c      	sbcs	r4, r3
10008a40:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008a42:	2800      	cmp	r0, #0
10008a44:	d10d      	bne.n	10008a62 <mpu_configure_fifo+0x46>
10008a46:	7d13      	ldrb	r3, [r2, #20]
10008a48:	2b00      	cmp	r3, #0
10008a4a:	d112      	bne.n	10008a72 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008a4c:	4b0c      	ldr	r3, [pc, #48]	; (10008a80 <mpu_configure_fifo+0x64>)
10008a4e:	4798      	blx	r3
10008a50:	e012      	b.n	10008a78 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008a52:	4b0a      	ldr	r3, [pc, #40]	; (10008a7c <mpu_configure_fifo+0x60>)
10008a54:	741d      	strb	r5, [r3, #16]
                return -1;
10008a56:	2401      	movs	r4, #1
10008a58:	4264      	negs	r4, r4
10008a5a:	e00d      	b.n	10008a78 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008a5c:	2401      	movs	r4, #1
10008a5e:	4264      	negs	r4, r4
10008a60:	e00a      	b.n	10008a78 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a62:	2001      	movs	r0, #1
10008a64:	4b06      	ldr	r3, [pc, #24]	; (10008a80 <mpu_configure_fifo+0x64>)
10008a66:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008a68:	4b06      	ldr	r3, [pc, #24]	; (10008a84 <mpu_configure_fifo+0x68>)
10008a6a:	4798      	blx	r3
10008a6c:	2800      	cmp	r0, #0
10008a6e:	d003      	beq.n	10008a78 <mpu_configure_fifo+0x5c>
10008a70:	e7ef      	b.n	10008a52 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a72:	2001      	movs	r0, #1
10008a74:	4b02      	ldr	r3, [pc, #8]	; (10008a80 <mpu_configure_fifo+0x64>)
10008a76:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008a78:	0020      	movs	r0, r4
10008a7a:	bd70      	pop	{r4, r5, r6, pc}
10008a7c:	10017dd0 	.word	0x10017dd0
10008a80:	100084b1 	.word	0x100084b1
10008a84:	10008555 	.word	0x10008555

10008a88 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008a88:	b530      	push	{r4, r5, lr}
10008a8a:	b083      	sub	sp, #12
10008a8c:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008a8e:	4b59      	ldr	r3, [pc, #356]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008a90:	7c9b      	ldrb	r3, [r3, #18]
10008a92:	4283      	cmp	r3, r0
10008a94:	d100      	bne.n	10008a98 <mpu_set_bypass+0x10>
10008a96:	e097      	b.n	10008bc8 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008a98:	2800      	cmp	r0, #0
10008a9a:	d042      	beq.n	10008b22 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a9c:	4b55      	ldr	r3, [pc, #340]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008a9e:	681a      	ldr	r2, [r3, #0]
10008aa0:	7911      	ldrb	r1, [r2, #4]
10008aa2:	685b      	ldr	r3, [r3, #4]
10008aa4:	7818      	ldrb	r0, [r3, #0]
10008aa6:	466b      	mov	r3, sp
10008aa8:	3307      	adds	r3, #7
10008aaa:	2201      	movs	r2, #1
10008aac:	4d52      	ldr	r5, [pc, #328]	; (10008bf8 <mpu_set_bypass+0x170>)
10008aae:	47a8      	blx	r5
10008ab0:	2800      	cmp	r0, #0
10008ab2:	d000      	beq.n	10008ab6 <mpu_set_bypass+0x2e>
10008ab4:	e08a      	b.n	10008bcc <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008ab6:	466b      	mov	r3, sp
10008ab8:	3307      	adds	r3, #7
10008aba:	781a      	ldrb	r2, [r3, #0]
10008abc:	2120      	movs	r1, #32
10008abe:	438a      	bics	r2, r1
10008ac0:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ac2:	4a4c      	ldr	r2, [pc, #304]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008ac4:	6811      	ldr	r1, [r2, #0]
10008ac6:	7909      	ldrb	r1, [r1, #4]
10008ac8:	6852      	ldr	r2, [r2, #4]
10008aca:	7810      	ldrb	r0, [r2, #0]
10008acc:	2201      	movs	r2, #1
10008ace:	4d4b      	ldr	r5, [pc, #300]	; (10008bfc <mpu_set_bypass+0x174>)
10008ad0:	47a8      	blx	r5
10008ad2:	2800      	cmp	r0, #0
10008ad4:	d17d      	bne.n	10008bd2 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008ad6:	3003      	adds	r0, #3
10008ad8:	4b49      	ldr	r3, [pc, #292]	; (10008c00 <mpu_set_bypass+0x178>)
10008ada:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008adc:	2202      	movs	r2, #2
10008ade:	466b      	mov	r3, sp
10008ae0:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008ae2:	2322      	movs	r3, #34	; 0x22
10008ae4:	4a43      	ldr	r2, [pc, #268]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008ae6:	5cd3      	ldrb	r3, [r2, r3]
10008ae8:	2b00      	cmp	r3, #0
10008aea:	d002      	beq.n	10008af2 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008aec:	2282      	movs	r2, #130	; 0x82
10008aee:	466b      	mov	r3, sp
10008af0:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008af2:	2323      	movs	r3, #35	; 0x23
10008af4:	4a3f      	ldr	r2, [pc, #252]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008af6:	5cd3      	ldrb	r3, [r2, r3]
10008af8:	2b00      	cmp	r3, #0
10008afa:	d005      	beq.n	10008b08 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008afc:	466b      	mov	r3, sp
10008afe:	1dda      	adds	r2, r3, #7
10008b00:	79d9      	ldrb	r1, [r3, #7]
10008b02:	2330      	movs	r3, #48	; 0x30
10008b04:	430b      	orrs	r3, r1
10008b06:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b08:	4b3a      	ldr	r3, [pc, #232]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b0a:	681a      	ldr	r2, [r3, #0]
10008b0c:	7dd1      	ldrb	r1, [r2, #23]
10008b0e:	685b      	ldr	r3, [r3, #4]
10008b10:	7818      	ldrb	r0, [r3, #0]
10008b12:	466b      	mov	r3, sp
10008b14:	3307      	adds	r3, #7
10008b16:	2201      	movs	r2, #1
10008b18:	4d38      	ldr	r5, [pc, #224]	; (10008bfc <mpu_set_bypass+0x174>)
10008b1a:	47a8      	blx	r5
10008b1c:	2800      	cmp	r0, #0
10008b1e:	d04f      	beq.n	10008bc0 <mpu_set_bypass+0x138>
10008b20:	e05a      	b.n	10008bd8 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b22:	4b34      	ldr	r3, [pc, #208]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b24:	681a      	ldr	r2, [r3, #0]
10008b26:	7911      	ldrb	r1, [r2, #4]
10008b28:	685b      	ldr	r3, [r3, #4]
10008b2a:	7818      	ldrb	r0, [r3, #0]
10008b2c:	466b      	mov	r3, sp
10008b2e:	3307      	adds	r3, #7
10008b30:	2201      	movs	r2, #1
10008b32:	4d31      	ldr	r5, [pc, #196]	; (10008bf8 <mpu_set_bypass+0x170>)
10008b34:	47a8      	blx	r5
10008b36:	2800      	cmp	r0, #0
10008b38:	d151      	bne.n	10008bde <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008b3a:	4b2e      	ldr	r3, [pc, #184]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b3c:	7a9b      	ldrb	r3, [r3, #10]
10008b3e:	07db      	lsls	r3, r3, #31
10008b40:	d506      	bpl.n	10008b50 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008b42:	466b      	mov	r3, sp
10008b44:	1dda      	adds	r2, r3, #7
10008b46:	79d9      	ldrb	r1, [r3, #7]
10008b48:	2320      	movs	r3, #32
10008b4a:	430b      	orrs	r3, r1
10008b4c:	7013      	strb	r3, [r2, #0]
10008b4e:	e005      	b.n	10008b5c <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008b50:	466b      	mov	r3, sp
10008b52:	1dda      	adds	r2, r3, #7
10008b54:	79db      	ldrb	r3, [r3, #7]
10008b56:	2120      	movs	r1, #32
10008b58:	438b      	bics	r3, r1
10008b5a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b5c:	4b25      	ldr	r3, [pc, #148]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b5e:	681a      	ldr	r2, [r3, #0]
10008b60:	7911      	ldrb	r1, [r2, #4]
10008b62:	685b      	ldr	r3, [r3, #4]
10008b64:	7818      	ldrb	r0, [r3, #0]
10008b66:	466b      	mov	r3, sp
10008b68:	3307      	adds	r3, #7
10008b6a:	2201      	movs	r2, #1
10008b6c:	4d23      	ldr	r5, [pc, #140]	; (10008bfc <mpu_set_bypass+0x174>)
10008b6e:	47a8      	blx	r5
10008b70:	2800      	cmp	r0, #0
10008b72:	d137      	bne.n	10008be4 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008b74:	3003      	adds	r0, #3
10008b76:	4b22      	ldr	r3, [pc, #136]	; (10008c00 <mpu_set_bypass+0x178>)
10008b78:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008b7a:	2322      	movs	r3, #34	; 0x22
10008b7c:	4a1d      	ldr	r2, [pc, #116]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b7e:	5cd3      	ldrb	r3, [r2, r3]
10008b80:	2b00      	cmp	r3, #0
10008b82:	d003      	beq.n	10008b8c <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008b84:	2280      	movs	r2, #128	; 0x80
10008b86:	466b      	mov	r3, sp
10008b88:	71da      	strb	r2, [r3, #7]
10008b8a:	e002      	b.n	10008b92 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008b8c:	2200      	movs	r2, #0
10008b8e:	466b      	mov	r3, sp
10008b90:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b92:	2323      	movs	r3, #35	; 0x23
10008b94:	4a17      	ldr	r2, [pc, #92]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008b96:	5cd3      	ldrb	r3, [r2, r3]
10008b98:	2b00      	cmp	r3, #0
10008b9a:	d005      	beq.n	10008ba8 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b9c:	466b      	mov	r3, sp
10008b9e:	1dda      	adds	r2, r3, #7
10008ba0:	79d9      	ldrb	r1, [r3, #7]
10008ba2:	2330      	movs	r3, #48	; 0x30
10008ba4:	430b      	orrs	r3, r1
10008ba6:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ba8:	4b12      	ldr	r3, [pc, #72]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008baa:	681a      	ldr	r2, [r3, #0]
10008bac:	7dd1      	ldrb	r1, [r2, #23]
10008bae:	685b      	ldr	r3, [r3, #4]
10008bb0:	7818      	ldrb	r0, [r3, #0]
10008bb2:	466b      	mov	r3, sp
10008bb4:	3307      	adds	r3, #7
10008bb6:	2201      	movs	r2, #1
10008bb8:	4d10      	ldr	r5, [pc, #64]	; (10008bfc <mpu_set_bypass+0x174>)
10008bba:	47a8      	blx	r5
10008bbc:	2800      	cmp	r0, #0
10008bbe:	d114      	bne.n	10008bea <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008bc0:	4b0c      	ldr	r3, [pc, #48]	; (10008bf4 <mpu_set_bypass+0x16c>)
10008bc2:	749c      	strb	r4, [r3, #18]
    return 0;
10008bc4:	2000      	movs	r0, #0
10008bc6:	e012      	b.n	10008bee <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008bc8:	2000      	movs	r0, #0
10008bca:	e010      	b.n	10008bee <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bcc:	2001      	movs	r0, #1
10008bce:	4240      	negs	r0, r0
10008bd0:	e00d      	b.n	10008bee <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bd2:	2001      	movs	r0, #1
10008bd4:	4240      	negs	r0, r0
10008bd6:	e00a      	b.n	10008bee <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bd8:	2001      	movs	r0, #1
10008bda:	4240      	negs	r0, r0
10008bdc:	e007      	b.n	10008bee <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bde:	2001      	movs	r0, #1
10008be0:	4240      	negs	r0, r0
10008be2:	e004      	b.n	10008bee <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008be4:	2001      	movs	r0, #1
10008be6:	4240      	negs	r0, r0
10008be8:	e001      	b.n	10008bee <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bea:	2001      	movs	r0, #1
10008bec:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008bee:	b003      	add	sp, #12
10008bf0:	bd30      	pop	{r4, r5, pc}
10008bf2:	46c0      	nop			; (mov r8, r8)
10008bf4:	10017dd0 	.word	0x10017dd0
10008bf8:	1000a819 	.word	0x1000a819
10008bfc:	1000a779 	.word	0x1000a779
10008c00:	10008129 	.word	0x10008129

10008c04 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c04:	b530      	push	{r4, r5, lr}
10008c06:	b083      	sub	sp, #12
10008c08:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c0a:	2323      	movs	r3, #35	; 0x23
10008c0c:	4a1c      	ldr	r2, [pc, #112]	; (10008c80 <mpu_set_int_latched+0x7c>)
10008c0e:	5cd3      	ldrb	r3, [r2, r3]
10008c10:	4283      	cmp	r3, r0
10008c12:	d02e      	beq.n	10008c72 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008c14:	2800      	cmp	r0, #0
10008c16:	d003      	beq.n	10008c20 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c18:	2230      	movs	r2, #48	; 0x30
10008c1a:	466b      	mov	r3, sp
10008c1c:	71da      	strb	r2, [r3, #7]
10008c1e:	e002      	b.n	10008c26 <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008c20:	2200      	movs	r2, #0
10008c22:	466b      	mov	r3, sp
10008c24:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008c26:	4b16      	ldr	r3, [pc, #88]	; (10008c80 <mpu_set_int_latched+0x7c>)
10008c28:	7c9b      	ldrb	r3, [r3, #18]
10008c2a:	2b00      	cmp	r3, #0
10008c2c:	d005      	beq.n	10008c3a <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008c2e:	466b      	mov	r3, sp
10008c30:	1dda      	adds	r2, r3, #7
10008c32:	79d9      	ldrb	r1, [r3, #7]
10008c34:	2302      	movs	r3, #2
10008c36:	430b      	orrs	r3, r1
10008c38:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008c3a:	2322      	movs	r3, #34	; 0x22
10008c3c:	4a10      	ldr	r2, [pc, #64]	; (10008c80 <mpu_set_int_latched+0x7c>)
10008c3e:	5cd3      	ldrb	r3, [r2, r3]
10008c40:	2b00      	cmp	r3, #0
10008c42:	d006      	beq.n	10008c52 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008c44:	466b      	mov	r3, sp
10008c46:	1dda      	adds	r2, r3, #7
10008c48:	79db      	ldrb	r3, [r3, #7]
10008c4a:	2180      	movs	r1, #128	; 0x80
10008c4c:	4249      	negs	r1, r1
10008c4e:	430b      	orrs	r3, r1
10008c50:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c52:	4b0b      	ldr	r3, [pc, #44]	; (10008c80 <mpu_set_int_latched+0x7c>)
10008c54:	681a      	ldr	r2, [r3, #0]
10008c56:	7dd1      	ldrb	r1, [r2, #23]
10008c58:	685b      	ldr	r3, [r3, #4]
10008c5a:	7818      	ldrb	r0, [r3, #0]
10008c5c:	466b      	mov	r3, sp
10008c5e:	3307      	adds	r3, #7
10008c60:	2201      	movs	r2, #1
10008c62:	4d08      	ldr	r5, [pc, #32]	; (10008c84 <mpu_set_int_latched+0x80>)
10008c64:	47a8      	blx	r5
10008c66:	2800      	cmp	r0, #0
10008c68:	d105      	bne.n	10008c76 <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c6a:	2323      	movs	r3, #35	; 0x23
10008c6c:	4a04      	ldr	r2, [pc, #16]	; (10008c80 <mpu_set_int_latched+0x7c>)
10008c6e:	54d4      	strb	r4, [r2, r3]
    return 0;
10008c70:	e003      	b.n	10008c7a <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c72:	2000      	movs	r0, #0
10008c74:	e001      	b.n	10008c7a <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008c76:	2001      	movs	r0, #1
10008c78:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008c7a:	b003      	add	sp, #12
10008c7c:	bd30      	pop	{r4, r5, pc}
10008c7e:	46c0      	nop			; (mov r8, r8)
10008c80:	10017dd0 	.word	0x10017dd0
10008c84:	1000a779 	.word	0x1000a779

10008c88 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008c88:	b510      	push	{r4, lr}
10008c8a:	b082      	sub	sp, #8
10008c8c:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008c8e:	2c28      	cmp	r4, #40	; 0x28
10008c90:	d878      	bhi.n	10008d84 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008c92:	2800      	cmp	r0, #0
10008c94:	d115      	bne.n	10008cc2 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008c96:	2000      	movs	r0, #0
10008c98:	4b44      	ldr	r3, [pc, #272]	; (10008dac <mpu_lp_accel_mode+0x124>)
10008c9a:	4798      	blx	r3
        tmp[0] = 0;
10008c9c:	ab01      	add	r3, sp, #4
10008c9e:	2200      	movs	r2, #0
10008ca0:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008ca2:	3207      	adds	r2, #7
10008ca4:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008ca6:	4a42      	ldr	r2, [pc, #264]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008ca8:	6811      	ldr	r1, [r2, #0]
10008caa:	7d49      	ldrb	r1, [r1, #21]
10008cac:	6852      	ldr	r2, [r2, #4]
10008cae:	7810      	ldrb	r0, [r2, #0]
10008cb0:	2202      	movs	r2, #2
10008cb2:	4c40      	ldr	r4, [pc, #256]	; (10008db4 <mpu_lp_accel_mode+0x12c>)
10008cb4:	47a0      	blx	r4
10008cb6:	1e04      	subs	r4, r0, #0
10008cb8:	d167      	bne.n	10008d8a <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008cba:	2200      	movs	r2, #0
10008cbc:	4b3c      	ldr	r3, [pc, #240]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008cbe:	751a      	strb	r2, [r3, #20]
        return 0;
10008cc0:	e071      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008cc2:	2001      	movs	r0, #1
10008cc4:	4b39      	ldr	r3, [pc, #228]	; (10008dac <mpu_lp_accel_mode+0x124>)
10008cc6:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cc8:	2c01      	cmp	r4, #1
10008cca:	d103      	bne.n	10008cd4 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008ccc:	2202      	movs	r2, #2
10008cce:	ab01      	add	r3, sp, #4
10008cd0:	701a      	strb	r2, [r3, #0]
10008cd2:	e01a      	b.n	10008d0a <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008cd4:	2c02      	cmp	r4, #2
10008cd6:	d103      	bne.n	10008ce0 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008cd8:	2203      	movs	r2, #3
10008cda:	ab01      	add	r3, sp, #4
10008cdc:	701a      	strb	r2, [r3, #0]
10008cde:	e014      	b.n	10008d0a <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008ce0:	2c05      	cmp	r4, #5
10008ce2:	d803      	bhi.n	10008cec <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008ce4:	2204      	movs	r2, #4
10008ce6:	ab01      	add	r3, sp, #4
10008ce8:	701a      	strb	r2, [r3, #0]
10008cea:	e00e      	b.n	10008d0a <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008cec:	2c0a      	cmp	r4, #10
10008cee:	d803      	bhi.n	10008cf8 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008cf0:	2205      	movs	r2, #5
10008cf2:	ab01      	add	r3, sp, #4
10008cf4:	701a      	strb	r2, [r3, #0]
10008cf6:	e008      	b.n	10008d0a <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008cf8:	2c14      	cmp	r4, #20
10008cfa:	d803      	bhi.n	10008d04 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008cfc:	2206      	movs	r2, #6
10008cfe:	ab01      	add	r3, sp, #4
10008d00:	701a      	strb	r2, [r3, #0]
10008d02:	e002      	b.n	10008d0a <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008d04:	2207      	movs	r2, #7
10008d06:	ab01      	add	r3, sp, #4
10008d08:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008d0a:	4b29      	ldr	r3, [pc, #164]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008d0c:	681a      	ldr	r2, [r3, #0]
10008d0e:	7a51      	ldrb	r1, [r2, #9]
10008d10:	685b      	ldr	r3, [r3, #4]
10008d12:	7818      	ldrb	r0, [r3, #0]
10008d14:	ab01      	add	r3, sp, #4
10008d16:	2201      	movs	r2, #1
10008d18:	4c26      	ldr	r4, [pc, #152]	; (10008db4 <mpu_lp_accel_mode+0x12c>)
10008d1a:	47a0      	blx	r4
10008d1c:	2800      	cmp	r0, #0
10008d1e:	d137      	bne.n	10008d90 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d20:	4b23      	ldr	r3, [pc, #140]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008d22:	681a      	ldr	r2, [r3, #0]
10008d24:	7a11      	ldrb	r1, [r2, #8]
10008d26:	685b      	ldr	r3, [r3, #4]
10008d28:	7818      	ldrb	r0, [r3, #0]
10008d2a:	ab01      	add	r3, sp, #4
10008d2c:	2201      	movs	r2, #1
10008d2e:	4c22      	ldr	r4, [pc, #136]	; (10008db8 <mpu_lp_accel_mode+0x130>)
10008d30:	47a0      	blx	r4
10008d32:	2800      	cmp	r0, #0
10008d34:	d12f      	bne.n	10008d96 <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d36:	ab01      	add	r3, sp, #4
10008d38:	7819      	ldrb	r1, [r3, #0]
10008d3a:	2208      	movs	r2, #8
10008d3c:	430a      	orrs	r2, r1
10008d3e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d40:	4a1b      	ldr	r2, [pc, #108]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008d42:	6811      	ldr	r1, [r2, #0]
10008d44:	7a09      	ldrb	r1, [r1, #8]
10008d46:	6852      	ldr	r2, [r2, #4]
10008d48:	7810      	ldrb	r0, [r2, #0]
10008d4a:	2201      	movs	r2, #1
10008d4c:	4c19      	ldr	r4, [pc, #100]	; (10008db4 <mpu_lp_accel_mode+0x12c>)
10008d4e:	47a0      	blx	r4
10008d50:	2800      	cmp	r0, #0
10008d52:	d123      	bne.n	10008d9c <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d54:	ab01      	add	r3, sp, #4
10008d56:	2220      	movs	r2, #32
10008d58:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d5a:	4a15      	ldr	r2, [pc, #84]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008d5c:	6811      	ldr	r1, [r2, #0]
10008d5e:	7d49      	ldrb	r1, [r1, #21]
10008d60:	6852      	ldr	r2, [r2, #4]
10008d62:	7810      	ldrb	r0, [r2, #0]
10008d64:	2201      	movs	r2, #1
10008d66:	4c13      	ldr	r4, [pc, #76]	; (10008db4 <mpu_lp_accel_mode+0x12c>)
10008d68:	47a0      	blx	r4
10008d6a:	1e04      	subs	r4, r0, #0
10008d6c:	d119      	bne.n	10008da2 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d6e:	4b10      	ldr	r3, [pc, #64]	; (10008db0 <mpu_lp_accel_mode+0x128>)
10008d70:	2208      	movs	r2, #8
10008d72:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008d74:	2200      	movs	r2, #0
10008d76:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d78:	3201      	adds	r2, #1
10008d7a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008d7c:	2000      	movs	r0, #0
10008d7e:	4b0f      	ldr	r3, [pc, #60]	; (10008dbc <mpu_lp_accel_mode+0x134>)
10008d80:	4798      	blx	r3

    return 0;
10008d82:	e010      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008d84:	2401      	movs	r4, #1
10008d86:	4264      	negs	r4, r4
10008d88:	e00d      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008d8a:	2401      	movs	r4, #1
10008d8c:	4264      	negs	r4, r4
10008d8e:	e00a      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d90:	2401      	movs	r4, #1
10008d92:	4264      	negs	r4, r4
10008d94:	e007      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008d96:	2401      	movs	r4, #1
10008d98:	4264      	negs	r4, r4
10008d9a:	e004      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008d9c:	2401      	movs	r4, #1
10008d9e:	4264      	negs	r4, r4
10008da0:	e001      	b.n	10008da6 <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008da2:	2401      	movs	r4, #1
10008da4:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008da6:	0020      	movs	r0, r4
10008da8:	b002      	add	sp, #8
10008daa:	bd10      	pop	{r4, pc}
10008dac:	10008c05 	.word	0x10008c05
10008db0:	10017dd0 	.word	0x10017dd0
10008db4:	1000a779 	.word	0x1000a779
10008db8:	1000a819 	.word	0x1000a819
10008dbc:	10008a1d 	.word	0x10008a1d

10008dc0 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008dc0:	b530      	push	{r4, r5, lr}
10008dc2:	b083      	sub	sp, #12
10008dc4:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008dc6:	4b2c      	ldr	r3, [pc, #176]	; (10008e78 <mpu_set_sample_rate+0xb8>)
10008dc8:	7a9b      	ldrb	r3, [r3, #10]
10008dca:	2b00      	cmp	r3, #0
10008dcc:	d048      	beq.n	10008e60 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008dce:	2324      	movs	r3, #36	; 0x24
10008dd0:	4a29      	ldr	r2, [pc, #164]	; (10008e78 <mpu_set_sample_rate+0xb8>)
10008dd2:	5cd3      	ldrb	r3, [r2, r3]
10008dd4:	2b00      	cmp	r3, #0
10008dd6:	d146      	bne.n	10008e66 <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dd8:	7d13      	ldrb	r3, [r2, #20]
10008dda:	2b00      	cmp	r3, #0
10008ddc:	d00a      	beq.n	10008df4 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008dde:	1e43      	subs	r3, r0, #1
10008de0:	b29b      	uxth	r3, r3
10008de2:	2b27      	cmp	r3, #39	; 0x27
10008de4:	d803      	bhi.n	10008dee <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008de6:	4b25      	ldr	r3, [pc, #148]	; (10008e7c <mpu_set_sample_rate+0xbc>)
10008de8:	4798      	blx	r3
                return 0;
10008dea:	2400      	movs	r4, #0
10008dec:	e040      	b.n	10008e70 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008dee:	2000      	movs	r0, #0
10008df0:	4b22      	ldr	r3, [pc, #136]	; (10008e7c <mpu_set_sample_rate+0xbc>)
10008df2:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008df4:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008df6:	2c03      	cmp	r4, #3
10008df8:	d907      	bls.n	10008e0a <mpu_set_sample_rate+0x4a>
10008dfa:	1c21      	adds	r1, r4, #0
10008dfc:	23fa      	movs	r3, #250	; 0xfa
10008dfe:	009b      	lsls	r3, r3, #2
10008e00:	429c      	cmp	r4, r3
10008e02:	d901      	bls.n	10008e08 <mpu_set_sample_rate+0x48>
10008e04:	4b1e      	ldr	r3, [pc, #120]	; (10008e80 <mpu_set_sample_rate+0xc0>)
10008e06:	8819      	ldrh	r1, [r3, #0]
10008e08:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008e0a:	466b      	mov	r3, sp
10008e0c:	1ddc      	adds	r4, r3, #7
10008e0e:	20fa      	movs	r0, #250	; 0xfa
10008e10:	0080      	lsls	r0, r0, #2
10008e12:	4b1c      	ldr	r3, [pc, #112]	; (10008e84 <mpu_set_sample_rate+0xc4>)
10008e14:	4798      	blx	r3
10008e16:	3801      	subs	r0, #1
10008e18:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008e1a:	4b17      	ldr	r3, [pc, #92]	; (10008e78 <mpu_set_sample_rate+0xb8>)
10008e1c:	681a      	ldr	r2, [r3, #0]
10008e1e:	7851      	ldrb	r1, [r2, #1]
10008e20:	685b      	ldr	r3, [r3, #4]
10008e22:	7818      	ldrb	r0, [r3, #0]
10008e24:	0023      	movs	r3, r4
10008e26:	2201      	movs	r2, #1
10008e28:	4c17      	ldr	r4, [pc, #92]	; (10008e88 <mpu_set_sample_rate+0xc8>)
10008e2a:	47a0      	blx	r4
10008e2c:	1e04      	subs	r4, r0, #0
10008e2e:	d11d      	bne.n	10008e6c <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e30:	4d11      	ldr	r5, [pc, #68]	; (10008e78 <mpu_set_sample_rate+0xb8>)
10008e32:	466b      	mov	r3, sp
10008e34:	79d9      	ldrb	r1, [r3, #7]
10008e36:	3101      	adds	r1, #1
10008e38:	20fa      	movs	r0, #250	; 0xfa
10008e3a:	0080      	lsls	r0, r0, #2
10008e3c:	4b11      	ldr	r3, [pc, #68]	; (10008e84 <mpu_set_sample_rate+0xc4>)
10008e3e:	4798      	blx	r3
10008e40:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e42:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008e44:	1c18      	adds	r0, r3, #0
10008e46:	b29b      	uxth	r3, r3
10008e48:	2b64      	cmp	r3, #100	; 0x64
10008e4a:	d900      	bls.n	10008e4e <mpu_set_sample_rate+0x8e>
10008e4c:	2064      	movs	r0, #100	; 0x64
10008e4e:	b280      	uxth	r0, r0
10008e50:	4b0e      	ldr	r3, [pc, #56]	; (10008e8c <mpu_set_sample_rate+0xcc>)
10008e52:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e54:	4b08      	ldr	r3, [pc, #32]	; (10008e78 <mpu_set_sample_rate+0xb8>)
10008e56:	89d8      	ldrh	r0, [r3, #14]
10008e58:	0840      	lsrs	r0, r0, #1
10008e5a:	4b0d      	ldr	r3, [pc, #52]	; (10008e90 <mpu_set_sample_rate+0xd0>)
10008e5c:	4798      	blx	r3
        return 0;
10008e5e:	e007      	b.n	10008e70 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e60:	2401      	movs	r4, #1
10008e62:	4264      	negs	r4, r4
10008e64:	e004      	b.n	10008e70 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008e66:	2401      	movs	r4, #1
10008e68:	4264      	negs	r4, r4
10008e6a:	e001      	b.n	10008e70 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008e6c:	2401      	movs	r4, #1
10008e6e:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008e70:	0020      	movs	r0, r4
10008e72:	b003      	add	sp, #12
10008e74:	bd30      	pop	{r4, r5, pc}
10008e76:	46c0      	nop			; (mov r8, r8)
10008e78:	10017dd0 	.word	0x10017dd0
10008e7c:	10008c89 	.word	0x10008c89
10008e80:	10015bc6 	.word	0x10015bc6
10008e84:	10012d91 	.word	0x10012d91
10008e88:	1000a779 	.word	0x1000a779
10008e8c:	100089a5 	.word	0x100089a5
10008e90:	100088cd 	.word	0x100088cd

10008e94 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e94:	b530      	push	{r4, r5, lr}
10008e96:	b083      	sub	sp, #12
10008e98:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e9a:	2370      	movs	r3, #112	; 0x70
10008e9c:	4203      	tst	r3, r0
10008e9e:	d003      	beq.n	10008ea8 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008ea0:	2201      	movs	r2, #1
10008ea2:	466b      	mov	r3, sp
10008ea4:	71da      	strb	r2, [r3, #7]
10008ea6:	e015      	b.n	10008ed4 <mpu_set_sensors+0x40>
    else if (sensors)
10008ea8:	2800      	cmp	r0, #0
10008eaa:	d003      	beq.n	10008eb4 <mpu_set_sensors+0x20>
        data = 0;
10008eac:	2200      	movs	r2, #0
10008eae:	466b      	mov	r3, sp
10008eb0:	71da      	strb	r2, [r3, #7]
10008eb2:	e00f      	b.n	10008ed4 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008eb4:	466b      	mov	r3, sp
10008eb6:	3307      	adds	r3, #7
10008eb8:	2240      	movs	r2, #64	; 0x40
10008eba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008ebc:	4a6a      	ldr	r2, [pc, #424]	; (10009068 <mpu_set_sensors+0x1d4>)
10008ebe:	6811      	ldr	r1, [r2, #0]
10008ec0:	7d49      	ldrb	r1, [r1, #21]
10008ec2:	6852      	ldr	r2, [r2, #4]
10008ec4:	7810      	ldrb	r0, [r2, #0]
10008ec6:	2201      	movs	r2, #1
10008ec8:	4d68      	ldr	r5, [pc, #416]	; (1000906c <mpu_set_sensors+0x1d8>)
10008eca:	47a8      	blx	r5
10008ecc:	2800      	cmp	r0, #0
10008ece:	d100      	bne.n	10008ed2 <mpu_set_sensors+0x3e>
10008ed0:	e0b2      	b.n	10009038 <mpu_set_sensors+0x1a4>
10008ed2:	e00b      	b.n	10008eec <mpu_set_sensors+0x58>
10008ed4:	4b64      	ldr	r3, [pc, #400]	; (10009068 <mpu_set_sensors+0x1d4>)
10008ed6:	681a      	ldr	r2, [r3, #0]
10008ed8:	7d51      	ldrb	r1, [r2, #21]
10008eda:	685b      	ldr	r3, [r3, #4]
10008edc:	7818      	ldrb	r0, [r3, #0]
10008ede:	466b      	mov	r3, sp
10008ee0:	3307      	adds	r3, #7
10008ee2:	2201      	movs	r2, #1
10008ee4:	4d61      	ldr	r5, [pc, #388]	; (1000906c <mpu_set_sensors+0x1d8>)
10008ee6:	47a8      	blx	r5
10008ee8:	2800      	cmp	r0, #0
10008eea:	d005      	beq.n	10008ef8 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008eec:	2200      	movs	r2, #0
10008eee:	4b5e      	ldr	r3, [pc, #376]	; (10009068 <mpu_set_sensors+0x1d4>)
10008ef0:	729a      	strb	r2, [r3, #10]
        return -1;
10008ef2:	2501      	movs	r5, #1
10008ef4:	426d      	negs	r5, r5
10008ef6:	e0b4      	b.n	10009062 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008ef8:	466b      	mov	r3, sp
10008efa:	1dda      	adds	r2, r3, #7
10008efc:	79db      	ldrb	r3, [r3, #7]
10008efe:	2140      	movs	r1, #64	; 0x40
10008f00:	438b      	bics	r3, r1
10008f02:	4959      	ldr	r1, [pc, #356]	; (10009068 <mpu_set_sensors+0x1d4>)
10008f04:	730b      	strb	r3, [r1, #12]

    data = 0;
10008f06:	2300      	movs	r3, #0
10008f08:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008f0a:	0663      	lsls	r3, r4, #25
10008f0c:	d402      	bmi.n	10008f14 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008f0e:	2204      	movs	r2, #4
10008f10:	466b      	mov	r3, sp
10008f12:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008f14:	06a3      	lsls	r3, r4, #26
10008f16:	d405      	bmi.n	10008f24 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008f18:	466b      	mov	r3, sp
10008f1a:	1dda      	adds	r2, r3, #7
10008f1c:	79d9      	ldrb	r1, [r3, #7]
10008f1e:	2302      	movs	r3, #2
10008f20:	430b      	orrs	r3, r1
10008f22:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008f24:	06e3      	lsls	r3, r4, #27
10008f26:	d405      	bmi.n	10008f34 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008f28:	466b      	mov	r3, sp
10008f2a:	1dda      	adds	r2, r3, #7
10008f2c:	79d9      	ldrb	r1, [r3, #7]
10008f2e:	2301      	movs	r3, #1
10008f30:	430b      	orrs	r3, r1
10008f32:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008f34:	0723      	lsls	r3, r4, #28
10008f36:	d405      	bmi.n	10008f44 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008f38:	466b      	mov	r3, sp
10008f3a:	1dda      	adds	r2, r3, #7
10008f3c:	79d9      	ldrb	r1, [r3, #7]
10008f3e:	2338      	movs	r3, #56	; 0x38
10008f40:	430b      	orrs	r3, r1
10008f42:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008f44:	4b48      	ldr	r3, [pc, #288]	; (10009068 <mpu_set_sensors+0x1d4>)
10008f46:	681a      	ldr	r2, [r3, #0]
10008f48:	7d91      	ldrb	r1, [r2, #22]
10008f4a:	685b      	ldr	r3, [r3, #4]
10008f4c:	7818      	ldrb	r0, [r3, #0]
10008f4e:	466b      	mov	r3, sp
10008f50:	3307      	adds	r3, #7
10008f52:	2201      	movs	r2, #1
10008f54:	4d45      	ldr	r5, [pc, #276]	; (1000906c <mpu_set_sensors+0x1d8>)
10008f56:	47a8      	blx	r5
10008f58:	2800      	cmp	r0, #0
10008f5a:	d005      	beq.n	10008f68 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008f5c:	2200      	movs	r2, #0
10008f5e:	4b42      	ldr	r3, [pc, #264]	; (10009068 <mpu_set_sensors+0x1d4>)
10008f60:	729a      	strb	r2, [r3, #10]
        return -1;
10008f62:	2501      	movs	r5, #1
10008f64:	426d      	negs	r5, r5
10008f66:	e07c      	b.n	10009062 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008f68:	2308      	movs	r3, #8
10008f6a:	0022      	movs	r2, r4
10008f6c:	439a      	bics	r2, r3
10008f6e:	d06b      	beq.n	10009048 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008f70:	2000      	movs	r0, #0
10008f72:	4b3f      	ldr	r3, [pc, #252]	; (10009070 <mpu_set_sensors+0x1dc>)
10008f74:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f76:	4b3c      	ldr	r3, [pc, #240]	; (10009068 <mpu_set_sensors+0x1d4>)
10008f78:	681a      	ldr	r2, [r3, #0]
10008f7a:	7911      	ldrb	r1, [r2, #4]
10008f7c:	685b      	ldr	r3, [r3, #4]
10008f7e:	7818      	ldrb	r0, [r3, #0]
10008f80:	466b      	mov	r3, sp
10008f82:	3306      	adds	r3, #6
10008f84:	2201      	movs	r2, #1
10008f86:	4d3b      	ldr	r5, [pc, #236]	; (10009074 <mpu_set_sensors+0x1e0>)
10008f88:	47a8      	blx	r5
10008f8a:	2800      	cmp	r0, #0
10008f8c:	d148      	bne.n	10009020 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f8e:	07e3      	lsls	r3, r4, #31
10008f90:	d509      	bpl.n	10008fa6 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008f92:	2211      	movs	r2, #17
10008f94:	466b      	mov	r3, sp
10008f96:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f98:	466b      	mov	r3, sp
10008f9a:	1d9a      	adds	r2, r3, #6
10008f9c:	7999      	ldrb	r1, [r3, #6]
10008f9e:	2320      	movs	r3, #32
10008fa0:	430b      	orrs	r3, r1
10008fa2:	7013      	strb	r3, [r2, #0]
10008fa4:	e008      	b.n	10008fb8 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008fa6:	2210      	movs	r2, #16
10008fa8:	466b      	mov	r3, sp
10008faa:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008fac:	466b      	mov	r3, sp
10008fae:	1d9a      	adds	r2, r3, #6
10008fb0:	799b      	ldrb	r3, [r3, #6]
10008fb2:	2120      	movs	r1, #32
10008fb4:	438b      	bics	r3, r1
10008fb6:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008fb8:	2324      	movs	r3, #36	; 0x24
10008fba:	4a2b      	ldr	r2, [pc, #172]	; (10009068 <mpu_set_sensors+0x1d4>)
10008fbc:	5cd3      	ldrb	r3, [r2, r3]
10008fbe:	2b00      	cmp	r3, #0
10008fc0:	d007      	beq.n	10008fd2 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008fc2:	466b      	mov	r3, sp
10008fc4:	1d9a      	adds	r2, r3, #6
10008fc6:	799b      	ldrb	r3, [r3, #6]
10008fc8:	2180      	movs	r1, #128	; 0x80
10008fca:	4249      	negs	r1, r1
10008fcc:	430b      	orrs	r3, r1
10008fce:	7013      	strb	r3, [r2, #0]
10008fd0:	e005      	b.n	10008fde <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fd2:	466b      	mov	r3, sp
10008fd4:	1d9a      	adds	r2, r3, #6
10008fd6:	799b      	ldrb	r3, [r3, #6]
10008fd8:	217f      	movs	r1, #127	; 0x7f
10008fda:	400b      	ands	r3, r1
10008fdc:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008fde:	4b22      	ldr	r3, [pc, #136]	; (10009068 <mpu_set_sensors+0x1d4>)
10008fe0:	2226      	movs	r2, #38	; 0x26
10008fe2:	6819      	ldr	r1, [r3, #0]
10008fe4:	5c89      	ldrb	r1, [r1, r2]
10008fe6:	685b      	ldr	r3, [r3, #4]
10008fe8:	7818      	ldrb	r0, [r3, #0]
10008fea:	466b      	mov	r3, sp
10008fec:	3307      	adds	r3, #7
10008fee:	3a25      	subs	r2, #37	; 0x25
10008ff0:	4d1e      	ldr	r5, [pc, #120]	; (1000906c <mpu_set_sensors+0x1d8>)
10008ff2:	47a8      	blx	r5
10008ff4:	2800      	cmp	r0, #0
10008ff6:	d116      	bne.n	10009026 <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ff8:	4b1b      	ldr	r3, [pc, #108]	; (10009068 <mpu_set_sensors+0x1d4>)
10008ffa:	681a      	ldr	r2, [r3, #0]
10008ffc:	7911      	ldrb	r1, [r2, #4]
10008ffe:	685b      	ldr	r3, [r3, #4]
10009000:	7818      	ldrb	r0, [r3, #0]
10009002:	466b      	mov	r3, sp
10009004:	3306      	adds	r3, #6
10009006:	2201      	movs	r2, #1
10009008:	4d18      	ldr	r5, [pc, #96]	; (1000906c <mpu_set_sensors+0x1d8>)
1000900a:	47a8      	blx	r5
1000900c:	1e05      	subs	r5, r0, #0
1000900e:	d10d      	bne.n	1000902c <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009010:	4b15      	ldr	r3, [pc, #84]	; (10009068 <mpu_set_sensors+0x1d4>)
10009012:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009014:	2200      	movs	r2, #0
10009016:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10009018:	2032      	movs	r0, #50	; 0x32
1000901a:	4b17      	ldr	r3, [pc, #92]	; (10009078 <mpu_set_sensors+0x1e4>)
1000901c:	4798      	blx	r3
    return 0;
1000901e:	e020      	b.n	10009062 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009020:	2501      	movs	r5, #1
10009022:	426d      	negs	r5, r5
10009024:	e01d      	b.n	10009062 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
10009026:	2501      	movs	r5, #1
10009028:	426d      	negs	r5, r5
1000902a:	e01a      	b.n	10009062 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
1000902c:	2501      	movs	r5, #1
1000902e:	426d      	negs	r5, r5
10009030:	e017      	b.n	10009062 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009032:	2501      	movs	r5, #1
10009034:	426d      	negs	r5, r5
10009036:	e014      	b.n	10009062 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009038:	466b      	mov	r3, sp
1000903a:	3307      	adds	r3, #7
1000903c:	781b      	ldrb	r3, [r3, #0]
1000903e:	2240      	movs	r2, #64	; 0x40
10009040:	4393      	bics	r3, r2
10009042:	4a09      	ldr	r2, [pc, #36]	; (10009068 <mpu_set_sensors+0x1d4>)
10009044:	7313      	strb	r3, [r2, #12]
10009046:	e762      	b.n	10008f0e <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009048:	4b07      	ldr	r3, [pc, #28]	; (10009068 <mpu_set_sensors+0x1d4>)
1000904a:	681a      	ldr	r2, [r3, #0]
1000904c:	7911      	ldrb	r1, [r2, #4]
1000904e:	685b      	ldr	r3, [r3, #4]
10009050:	7818      	ldrb	r0, [r3, #0]
10009052:	466b      	mov	r3, sp
10009054:	3306      	adds	r3, #6
10009056:	2201      	movs	r2, #1
10009058:	4d06      	ldr	r5, [pc, #24]	; (10009074 <mpu_set_sensors+0x1e0>)
1000905a:	47a8      	blx	r5
1000905c:	2800      	cmp	r0, #0
1000905e:	d0a2      	beq.n	10008fa6 <mpu_set_sensors+0x112>
10009060:	e7e7      	b.n	10009032 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009062:	0028      	movs	r0, r5
10009064:	b003      	add	sp, #12
10009066:	bd30      	pop	{r4, r5, pc}
10009068:	10017dd0 	.word	0x10017dd0
1000906c:	1000a779 	.word	0x1000a779
10009070:	10008c05 	.word	0x10008c05
10009074:	1000a819 	.word	0x1000a819
10009078:	10008129 	.word	0x10008129

1000907c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000907c:	b530      	push	{r4, r5, lr}
1000907e:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009080:	ab02      	add	r3, sp, #8
10009082:	2280      	movs	r2, #128	; 0x80
10009084:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009086:	4ab9      	ldr	r2, [pc, #740]	; (1000936c <mpu_init+0x2f0>)
10009088:	6811      	ldr	r1, [r2, #0]
1000908a:	7d49      	ldrb	r1, [r1, #21]
1000908c:	6852      	ldr	r2, [r2, #4]
1000908e:	7810      	ldrb	r0, [r2, #0]
10009090:	2201      	movs	r2, #1
10009092:	4cb7      	ldr	r4, [pc, #732]	; (10009370 <mpu_init+0x2f4>)
10009094:	47a0      	blx	r4
10009096:	2800      	cmp	r0, #0
10009098:	d000      	beq.n	1000909c <mpu_init+0x20>
1000909a:	e149      	b.n	10009330 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
1000909c:	3064      	adds	r0, #100	; 0x64
1000909e:	4bb5      	ldr	r3, [pc, #724]	; (10009374 <mpu_init+0x2f8>)
100090a0:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100090a2:	ab02      	add	r3, sp, #8
100090a4:	2200      	movs	r2, #0
100090a6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100090a8:	4ab0      	ldr	r2, [pc, #704]	; (1000936c <mpu_init+0x2f0>)
100090aa:	6811      	ldr	r1, [r2, #0]
100090ac:	7d49      	ldrb	r1, [r1, #21]
100090ae:	6852      	ldr	r2, [r2, #4]
100090b0:	7810      	ldrb	r0, [r2, #0]
100090b2:	2201      	movs	r2, #1
100090b4:	4cae      	ldr	r4, [pc, #696]	; (10009370 <mpu_init+0x2f4>)
100090b6:	47a0      	blx	r4
100090b8:	2800      	cmp	r0, #0
100090ba:	d000      	beq.n	100090be <mpu_init+0x42>
100090bc:	e13b      	b.n	10009336 <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100090be:	4aab      	ldr	r2, [pc, #684]	; (1000936c <mpu_init+0x2f0>)
100090c0:	2300      	movs	r3, #0
100090c2:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100090c4:	ab02      	add	r3, sp, #8
100090c6:	2140      	movs	r1, #64	; 0x40
100090c8:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100090ca:	6811      	ldr	r1, [r2, #0]
100090cc:	7a09      	ldrb	r1, [r1, #8]
100090ce:	6852      	ldr	r2, [r2, #4]
100090d0:	7810      	ldrb	r0, [r2, #0]
100090d2:	2201      	movs	r2, #1
100090d4:	4ca6      	ldr	r4, [pc, #664]	; (10009370 <mpu_init+0x2f4>)
100090d6:	47a0      	blx	r4
100090d8:	2800      	cmp	r0, #0
100090da:	d000      	beq.n	100090de <mpu_init+0x62>
100090dc:	e12e      	b.n	1000933c <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
100090de:	4ca3      	ldr	r4, [pc, #652]	; (1000936c <mpu_init+0x2f0>)
100090e0:	23ff      	movs	r3, #255	; 0xff
100090e2:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
100090e4:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
100090e6:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
100090e8:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
100090ea:	2201      	movs	r2, #1
100090ec:	4252      	negs	r2, r2
100090ee:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090f0:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
100090f2:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090f4:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
100090f6:	3bfe      	subs	r3, #254	; 0xfe
100090f8:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090fa:	2500      	movs	r5, #0
100090fc:	3321      	adds	r3, #33	; 0x21
100090fe:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009100:	3301      	adds	r3, #1
10009102:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009104:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009106:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009108:	0020      	movs	r0, r4
1000910a:	3016      	adds	r0, #22
1000910c:	320d      	adds	r2, #13
1000910e:	2100      	movs	r1, #0
10009110:	4b99      	ldr	r3, [pc, #612]	; (10009378 <mpu_init+0x2fc>)
10009112:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009114:	2324      	movs	r3, #36	; 0x24
10009116:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009118:	3301      	adds	r3, #1
1000911a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
1000911c:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1000911e:	20fa      	movs	r0, #250	; 0xfa
10009120:	00c0      	lsls	r0, r0, #3
10009122:	4b96      	ldr	r3, [pc, #600]	; (1000937c <mpu_init+0x300>)
10009124:	4798      	blx	r3
10009126:	2800      	cmp	r0, #0
10009128:	d000      	beq.n	1000912c <mpu_init+0xb0>
1000912a:	e10a      	b.n	10009342 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
1000912c:	3002      	adds	r0, #2
1000912e:	4b94      	ldr	r3, [pc, #592]	; (10009380 <mpu_init+0x304>)
10009130:	4798      	blx	r3
10009132:	2800      	cmp	r0, #0
10009134:	d000      	beq.n	10009138 <mpu_init+0xbc>
10009136:	e107      	b.n	10009348 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
10009138:	302a      	adds	r0, #42	; 0x2a
1000913a:	4b92      	ldr	r3, [pc, #584]	; (10009384 <mpu_init+0x308>)
1000913c:	4798      	blx	r3
1000913e:	2800      	cmp	r0, #0
10009140:	d000      	beq.n	10009144 <mpu_init+0xc8>
10009142:	e104      	b.n	1000934e <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009144:	3032      	adds	r0, #50	; 0x32
10009146:	4b90      	ldr	r3, [pc, #576]	; (10009388 <mpu_init+0x30c>)
10009148:	4798      	blx	r3
1000914a:	2800      	cmp	r0, #0
1000914c:	d000      	beq.n	10009150 <mpu_init+0xd4>
1000914e:	e101      	b.n	10009354 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009150:	4b8e      	ldr	r3, [pc, #568]	; (1000938c <mpu_init+0x310>)
10009152:	4798      	blx	r3
10009154:	2800      	cmp	r0, #0
10009156:	d000      	beq.n	1000915a <mpu_init+0xde>
10009158:	e0ff      	b.n	1000935a <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000915a:	3001      	adds	r0, #1
1000915c:	4b8c      	ldr	r3, [pc, #560]	; (10009390 <mpu_init+0x314>)
1000915e:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009160:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009162:	4d8c      	ldr	r5, [pc, #560]	; (10009394 <mpu_init+0x318>)
10009164:	ab01      	add	r3, sp, #4
10009166:	2201      	movs	r2, #1
10009168:	2100      	movs	r1, #0
1000916a:	0020      	movs	r0, r4
1000916c:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
1000916e:	2800      	cmp	r0, #0
10009170:	d103      	bne.n	1000917a <mpu_init+0xfe>
10009172:	466b      	mov	r3, sp
10009174:	791b      	ldrb	r3, [r3, #4]
10009176:	2b48      	cmp	r3, #72	; 0x48
10009178:	d004      	beq.n	10009184 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000917a:	3401      	adds	r4, #1
1000917c:	b2e4      	uxtb	r4, r4
1000917e:	2c10      	cmp	r4, #16
10009180:	d1f0      	bne.n	10009164 <mpu_init+0xe8>
10009182:	e001      	b.n	10009188 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009184:	2c0f      	cmp	r4, #15
10009186:	d905      	bls.n	10009194 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009188:	4883      	ldr	r0, [pc, #524]	; (10009398 <mpu_init+0x31c>)
1000918a:	4c84      	ldr	r4, [pc, #528]	; (1000939c <mpu_init+0x320>)
1000918c:	47a0      	blx	r4
1000918e:	4884      	ldr	r0, [pc, #528]	; (100093a0 <mpu_init+0x324>)
10009190:	47a0      	blx	r4
10009192:	e0c4      	b.n	1000931e <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009194:	232a      	movs	r3, #42	; 0x2a
10009196:	4a75      	ldr	r2, [pc, #468]	; (1000936c <mpu_init+0x2f0>)
10009198:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
1000919a:	ab01      	add	r3, sp, #4
1000919c:	2210      	movs	r2, #16
1000919e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091a0:	3a0f      	subs	r2, #15
100091a2:	210a      	movs	r1, #10
100091a4:	0020      	movs	r0, r4
100091a6:	4c72      	ldr	r4, [pc, #456]	; (10009370 <mpu_init+0x2f4>)
100091a8:	47a0      	blx	r4
100091aa:	2800      	cmp	r0, #0
100091ac:	d000      	beq.n	100091b0 <mpu_init+0x134>
100091ae:	e0b6      	b.n	1000931e <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091b0:	3001      	adds	r0, #1
100091b2:	4b70      	ldr	r3, [pc, #448]	; (10009374 <mpu_init+0x2f8>)
100091b4:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100091b6:	ab01      	add	r3, sp, #4
100091b8:	221f      	movs	r2, #31
100091ba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091bc:	320b      	adds	r2, #11
100091be:	496b      	ldr	r1, [pc, #428]	; (1000936c <mpu_init+0x2f0>)
100091c0:	5c88      	ldrb	r0, [r1, r2]
100091c2:	3a29      	subs	r2, #41	; 0x29
100091c4:	210a      	movs	r1, #10
100091c6:	4c6a      	ldr	r4, [pc, #424]	; (10009370 <mpu_init+0x2f4>)
100091c8:	47a0      	blx	r4
100091ca:	2800      	cmp	r0, #0
100091cc:	d000      	beq.n	100091d0 <mpu_init+0x154>
100091ce:	e0a6      	b.n	1000931e <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091d0:	3001      	adds	r0, #1
100091d2:	4b68      	ldr	r3, [pc, #416]	; (10009374 <mpu_init+0x2f8>)
100091d4:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
100091d6:	232a      	movs	r3, #42	; 0x2a
100091d8:	4a64      	ldr	r2, [pc, #400]	; (1000936c <mpu_init+0x2f0>)
100091da:	5cd0      	ldrb	r0, [r2, r3]
100091dc:	ab01      	add	r3, sp, #4
100091de:	2203      	movs	r2, #3
100091e0:	2110      	movs	r1, #16
100091e2:	4c6c      	ldr	r4, [pc, #432]	; (10009394 <mpu_init+0x318>)
100091e4:	47a0      	blx	r4
100091e6:	2800      	cmp	r0, #0
100091e8:	d000      	beq.n	100091ec <mpu_init+0x170>
100091ea:	e098      	b.n	1000931e <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091ec:	4a5f      	ldr	r2, [pc, #380]	; (1000936c <mpu_init+0x2f0>)
100091ee:	ab01      	add	r3, sp, #4
100091f0:	7819      	ldrb	r1, [r3, #0]
100091f2:	3180      	adds	r1, #128	; 0x80
100091f4:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091f6:	7859      	ldrb	r1, [r3, #1]
100091f8:	3180      	adds	r1, #128	; 0x80
100091fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091fc:	7899      	ldrb	r1, [r3, #2]
100091fe:	3180      	adds	r1, #128	; 0x80
10009200:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009202:	2110      	movs	r1, #16
10009204:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009206:	311a      	adds	r1, #26
10009208:	5c50      	ldrb	r0, [r2, r1]
1000920a:	2201      	movs	r2, #1
1000920c:	3920      	subs	r1, #32
1000920e:	4c58      	ldr	r4, [pc, #352]	; (10009370 <mpu_init+0x2f4>)
10009210:	47a0      	blx	r4
10009212:	2800      	cmp	r0, #0
10009214:	d000      	beq.n	10009218 <mpu_init+0x19c>
10009216:	e082      	b.n	1000931e <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009218:	3001      	adds	r0, #1
1000921a:	4b56      	ldr	r3, [pc, #344]	; (10009374 <mpu_init+0x2f8>)
1000921c:	4798      	blx	r3

    mpu_set_bypass(0);
1000921e:	2000      	movs	r0, #0
10009220:	4b5b      	ldr	r3, [pc, #364]	; (10009390 <mpu_init+0x314>)
10009222:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009224:	ab01      	add	r3, sp, #4
10009226:	2240      	movs	r2, #64	; 0x40
10009228:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000922a:	4a50      	ldr	r2, [pc, #320]	; (1000936c <mpu_init+0x2f0>)
1000922c:	6811      	ldr	r1, [r2, #0]
1000922e:	7e89      	ldrb	r1, [r1, #26]
10009230:	6852      	ldr	r2, [r2, #4]
10009232:	7810      	ldrb	r0, [r2, #0]
10009234:	2201      	movs	r2, #1
10009236:	4c4e      	ldr	r4, [pc, #312]	; (10009370 <mpu_init+0x2f4>)
10009238:	47a0      	blx	r4
1000923a:	2800      	cmp	r0, #0
1000923c:	d16f      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
1000923e:	ab01      	add	r3, sp, #4
10009240:	4a4a      	ldr	r2, [pc, #296]	; (1000936c <mpu_init+0x2f0>)
10009242:	212a      	movs	r1, #42	; 0x2a
10009244:	5c51      	ldrb	r1, [r2, r1]
10009246:	3880      	subs	r0, #128	; 0x80
10009248:	4301      	orrs	r1, r0
1000924a:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
1000924c:	6811      	ldr	r1, [r2, #0]
1000924e:	7f89      	ldrb	r1, [r1, #30]
10009250:	6852      	ldr	r2, [r2, #4]
10009252:	7810      	ldrb	r0, [r2, #0]
10009254:	2201      	movs	r2, #1
10009256:	4c46      	ldr	r4, [pc, #280]	; (10009370 <mpu_init+0x2f4>)
10009258:	47a0      	blx	r4
1000925a:	2800      	cmp	r0, #0
1000925c:	d15f      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1000925e:	ab01      	add	r3, sp, #4
10009260:	2202      	movs	r2, #2
10009262:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009264:	4a41      	ldr	r2, [pc, #260]	; (1000936c <mpu_init+0x2f0>)
10009266:	6811      	ldr	r1, [r2, #0]
10009268:	7fc9      	ldrb	r1, [r1, #31]
1000926a:	6852      	ldr	r2, [r2, #4]
1000926c:	7810      	ldrb	r0, [r2, #0]
1000926e:	2201      	movs	r2, #1
10009270:	4c3f      	ldr	r4, [pc, #252]	; (10009370 <mpu_init+0x2f4>)
10009272:	47a0      	blx	r4
10009274:	2800      	cmp	r0, #0
10009276:	d152      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009278:	ab01      	add	r3, sp, #4
1000927a:	2288      	movs	r2, #136	; 0x88
1000927c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000927e:	4a3b      	ldr	r2, [pc, #236]	; (1000936c <mpu_init+0x2f0>)
10009280:	2120      	movs	r1, #32
10009282:	6810      	ldr	r0, [r2, #0]
10009284:	5c41      	ldrb	r1, [r0, r1]
10009286:	6852      	ldr	r2, [r2, #4]
10009288:	7810      	ldrb	r0, [r2, #0]
1000928a:	2201      	movs	r2, #1
1000928c:	4c38      	ldr	r4, [pc, #224]	; (10009370 <mpu_init+0x2f4>)
1000928e:	47a0      	blx	r4
10009290:	2800      	cmp	r0, #0
10009292:	d144      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009294:	ab01      	add	r3, sp, #4
10009296:	4a35      	ldr	r2, [pc, #212]	; (1000936c <mpu_init+0x2f0>)
10009298:	212a      	movs	r1, #42	; 0x2a
1000929a:	5c51      	ldrb	r1, [r2, r1]
1000929c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000929e:	2121      	movs	r1, #33	; 0x21
100092a0:	6810      	ldr	r0, [r2, #0]
100092a2:	5c41      	ldrb	r1, [r0, r1]
100092a4:	6852      	ldr	r2, [r2, #4]
100092a6:	7810      	ldrb	r0, [r2, #0]
100092a8:	2201      	movs	r2, #1
100092aa:	4c31      	ldr	r4, [pc, #196]	; (10009370 <mpu_init+0x2f4>)
100092ac:	47a0      	blx	r4
100092ae:	2800      	cmp	r0, #0
100092b0:	d135      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100092b2:	ab01      	add	r3, sp, #4
100092b4:	220a      	movs	r2, #10
100092b6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100092b8:	4a2c      	ldr	r2, [pc, #176]	; (1000936c <mpu_init+0x2f0>)
100092ba:	2122      	movs	r1, #34	; 0x22
100092bc:	6810      	ldr	r0, [r2, #0]
100092be:	5c41      	ldrb	r1, [r0, r1]
100092c0:	6852      	ldr	r2, [r2, #4]
100092c2:	7810      	ldrb	r0, [r2, #0]
100092c4:	2201      	movs	r2, #1
100092c6:	4c2a      	ldr	r4, [pc, #168]	; (10009370 <mpu_init+0x2f4>)
100092c8:	47a0      	blx	r4
100092ca:	2800      	cmp	r0, #0
100092cc:	d127      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100092ce:	ab01      	add	r3, sp, #4
100092d0:	2281      	movs	r2, #129	; 0x81
100092d2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
100092d4:	4a25      	ldr	r2, [pc, #148]	; (1000936c <mpu_init+0x2f0>)
100092d6:	2123      	movs	r1, #35	; 0x23
100092d8:	6810      	ldr	r0, [r2, #0]
100092da:	5c41      	ldrb	r1, [r0, r1]
100092dc:	6852      	ldr	r2, [r2, #4]
100092de:	7810      	ldrb	r0, [r2, #0]
100092e0:	2201      	movs	r2, #1
100092e2:	4c23      	ldr	r4, [pc, #140]	; (10009370 <mpu_init+0x2f4>)
100092e4:	47a0      	blx	r4
100092e6:	2800      	cmp	r0, #0
100092e8:	d119      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100092ea:	ab01      	add	r3, sp, #4
100092ec:	2211      	movs	r2, #17
100092ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100092f0:	4a1e      	ldr	r2, [pc, #120]	; (1000936c <mpu_init+0x2f0>)
100092f2:	2126      	movs	r1, #38	; 0x26
100092f4:	6810      	ldr	r0, [r2, #0]
100092f6:	5c41      	ldrb	r1, [r0, r1]
100092f8:	6852      	ldr	r2, [r2, #4]
100092fa:	7810      	ldrb	r0, [r2, #0]
100092fc:	2201      	movs	r2, #1
100092fe:	4c1c      	ldr	r4, [pc, #112]	; (10009370 <mpu_init+0x2f4>)
10009300:	47a0      	blx	r4
10009302:	2800      	cmp	r0, #0
10009304:	d10b      	bne.n	1000931e <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009306:	ab01      	add	r3, sp, #4
10009308:	2203      	movs	r2, #3
1000930a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
1000930c:	4a17      	ldr	r2, [pc, #92]	; (1000936c <mpu_init+0x2f0>)
1000930e:	2127      	movs	r1, #39	; 0x27
10009310:	6810      	ldr	r0, [r2, #0]
10009312:	5c41      	ldrb	r1, [r0, r1]
10009314:	6852      	ldr	r2, [r2, #4]
10009316:	7810      	ldrb	r0, [r2, #0]
10009318:	2201      	movs	r2, #1
1000931a:	4c15      	ldr	r4, [pc, #84]	; (10009370 <mpu_init+0x2f4>)
1000931c:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
1000931e:	200a      	movs	r0, #10
10009320:	4b20      	ldr	r3, [pc, #128]	; (100093a4 <mpu_init+0x328>)
10009322:	4798      	blx	r3
10009324:	1e04      	subs	r4, r0, #0
10009326:	d11b      	bne.n	10009360 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10009328:	2000      	movs	r0, #0
1000932a:	4b1f      	ldr	r3, [pc, #124]	; (100093a8 <mpu_init+0x32c>)
1000932c:	4798      	blx	r3
    return 0;
1000932e:	e019      	b.n	10009364 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009330:	2401      	movs	r4, #1
10009332:	4264      	negs	r4, r4
10009334:	e016      	b.n	10009364 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009336:	2401      	movs	r4, #1
10009338:	4264      	negs	r4, r4
1000933a:	e013      	b.n	10009364 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
1000933c:	2401      	movs	r4, #1
1000933e:	4264      	negs	r4, r4
10009340:	e010      	b.n	10009364 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
10009342:	2401      	movs	r4, #1
10009344:	4264      	negs	r4, r4
10009346:	e00d      	b.n	10009364 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
10009348:	2401      	movs	r4, #1
1000934a:	4264      	negs	r4, r4
1000934c:	e00a      	b.n	10009364 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
1000934e:	2401      	movs	r4, #1
10009350:	4264      	negs	r4, r4
10009352:	e007      	b.n	10009364 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009354:	2401      	movs	r4, #1
10009356:	4264      	negs	r4, r4
10009358:	e004      	b.n	10009364 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000935a:	2401      	movs	r4, #1
1000935c:	4264      	negs	r4, r4
1000935e:	e001      	b.n	10009364 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009360:	2401      	movs	r4, #1
10009362:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009364:	0020      	movs	r0, r4
10009366:	b005      	add	sp, #20
10009368:	bd30      	pop	{r4, r5, pc}
1000936a:	46c0      	nop			; (mov r8, r8)
1000936c:	10017dd0 	.word	0x10017dd0
10009370:	1000a779 	.word	0x1000a779
10009374:	10008129 	.word	0x10008129
10009378:	10014a05 	.word	0x10014a05
1000937c:	1000874d 	.word	0x1000874d
10009380:	10008839 	.word	0x10008839
10009384:	100088cd 	.word	0x100088cd
10009388:	10008dc1 	.word	0x10008dc1
1000938c:	10008a1d 	.word	0x10008a1d
10009390:	10008a89 	.word	0x10008a89
10009394:	1000a819 	.word	0x1000a819
10009398:	10015e2c 	.word	0x10015e2c
1000939c:	10014c6d 	.word	0x10014c6d
100093a0:	10015c9c 	.word	0x10015c9c
100093a4:	100089a5 	.word	0x100089a5
100093a8:	10008e95 	.word	0x10008e95

100093ac <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100093ac:	b570      	push	{r4, r5, r6, lr}
100093ae:	b082      	sub	sp, #8
100093b0:	000c      	movs	r4, r1
100093b2:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100093b4:	d025      	beq.n	10009402 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100093b6:	4b19      	ldr	r3, [pc, #100]	; (1000941c <mpu_write_mem+0x70>)
100093b8:	7a9b      	ldrb	r3, [r3, #10]
100093ba:	2b00      	cmp	r3, #0
100093bc:	d024      	beq.n	10009408 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100093be:	ab01      	add	r3, sp, #4
100093c0:	0a02      	lsrs	r2, r0, #8
100093c2:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100093c4:	b2c0      	uxtb	r0, r0
100093c6:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100093c8:	4b14      	ldr	r3, [pc, #80]	; (1000941c <mpu_write_mem+0x70>)
100093ca:	685b      	ldr	r3, [r3, #4]
100093cc:	1840      	adds	r0, r0, r1
100093ce:	895a      	ldrh	r2, [r3, #10]
100093d0:	4290      	cmp	r0, r2
100093d2:	dc1c      	bgt.n	1000940e <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100093d4:	4a11      	ldr	r2, [pc, #68]	; (1000941c <mpu_write_mem+0x70>)
100093d6:	6812      	ldr	r2, [r2, #0]
100093d8:	7ed1      	ldrb	r1, [r2, #27]
100093da:	7818      	ldrb	r0, [r3, #0]
100093dc:	ab01      	add	r3, sp, #4
100093de:	2202      	movs	r2, #2
100093e0:	4e0f      	ldr	r6, [pc, #60]	; (10009420 <mpu_write_mem+0x74>)
100093e2:	47b0      	blx	r6
100093e4:	2800      	cmp	r0, #0
100093e6:	d115      	bne.n	10009414 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
100093e8:	b2e2      	uxtb	r2, r4
100093ea:	4b0c      	ldr	r3, [pc, #48]	; (1000941c <mpu_write_mem+0x70>)
100093ec:	6819      	ldr	r1, [r3, #0]
100093ee:	7e09      	ldrb	r1, [r1, #24]
100093f0:	685b      	ldr	r3, [r3, #4]
100093f2:	7818      	ldrb	r0, [r3, #0]
100093f4:	002b      	movs	r3, r5
100093f6:	4c0a      	ldr	r4, [pc, #40]	; (10009420 <mpu_write_mem+0x74>)
100093f8:	47a0      	blx	r4
100093fa:	1e43      	subs	r3, r0, #1
100093fc:	4198      	sbcs	r0, r3
100093fe:	4240      	negs	r0, r0
10009400:	e00a      	b.n	10009418 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009402:	2001      	movs	r0, #1
10009404:	4240      	negs	r0, r0
10009406:	e007      	b.n	10009418 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
10009408:	2001      	movs	r0, #1
1000940a:	4240      	negs	r0, r0
1000940c:	e004      	b.n	10009418 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
1000940e:	2001      	movs	r0, #1
10009410:	4240      	negs	r0, r0
10009412:	e001      	b.n	10009418 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009414:	2001      	movs	r0, #1
10009416:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
10009418:	b002      	add	sp, #8
1000941a:	bd70      	pop	{r4, r5, r6, pc}
1000941c:	10017dd0 	.word	0x10017dd0
10009420:	1000a779 	.word	0x1000a779

10009424 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009424:	b570      	push	{r4, r5, r6, lr}
10009426:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009428:	2324      	movs	r3, #36	; 0x24
1000942a:	4a21      	ldr	r2, [pc, #132]	; (100094b0 <mpu_set_dmp_state+0x8c>)
1000942c:	5cd3      	ldrb	r3, [r2, r3]
1000942e:	4283      	cmp	r3, r0
10009430:	d037      	beq.n	100094a2 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009432:	2800      	cmp	r0, #0
10009434:	d020      	beq.n	10009478 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
10009436:	2325      	movs	r3, #37	; 0x25
10009438:	5cd3      	ldrb	r3, [r2, r3]
1000943a:	2b00      	cmp	r3, #0
1000943c:	d033      	beq.n	100094a6 <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
1000943e:	2000      	movs	r0, #0
10009440:	4d1c      	ldr	r5, [pc, #112]	; (100094b4 <mpu_set_dmp_state+0x90>)
10009442:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009444:	2000      	movs	r0, #0
10009446:	4b1c      	ldr	r3, [pc, #112]	; (100094b8 <mpu_set_dmp_state+0x94>)
10009448:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000944a:	4c19      	ldr	r4, [pc, #100]	; (100094b0 <mpu_set_dmp_state+0x8c>)
1000944c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
1000944e:	4b1b      	ldr	r3, [pc, #108]	; (100094bc <mpu_set_dmp_state+0x98>)
10009450:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009452:	466b      	mov	r3, sp
10009454:	3307      	adds	r3, #7
10009456:	2200      	movs	r2, #0
10009458:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000945a:	6862      	ldr	r2, [r4, #4]
1000945c:	7810      	ldrb	r0, [r2, #0]
1000945e:	2201      	movs	r2, #1
10009460:	2123      	movs	r1, #35	; 0x23
10009462:	4e17      	ldr	r6, [pc, #92]	; (100094c0 <mpu_set_dmp_state+0x9c>)
10009464:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
10009466:	2201      	movs	r2, #1
10009468:	2324      	movs	r3, #36	; 0x24
1000946a:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
1000946c:	2001      	movs	r0, #1
1000946e:	47a8      	blx	r5
        mpu_reset_fifo();
10009470:	4b14      	ldr	r3, [pc, #80]	; (100094c4 <mpu_set_dmp_state+0xa0>)
10009472:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
10009474:	2000      	movs	r0, #0
10009476:	e018      	b.n	100094aa <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009478:	2000      	movs	r0, #0
1000947a:	4b0e      	ldr	r3, [pc, #56]	; (100094b4 <mpu_set_dmp_state+0x90>)
1000947c:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1000947e:	466b      	mov	r3, sp
10009480:	3307      	adds	r3, #7
10009482:	4c0b      	ldr	r4, [pc, #44]	; (100094b0 <mpu_set_dmp_state+0x8c>)
10009484:	7c22      	ldrb	r2, [r4, #16]
10009486:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009488:	6862      	ldr	r2, [r4, #4]
1000948a:	7810      	ldrb	r0, [r2, #0]
1000948c:	2201      	movs	r2, #1
1000948e:	2123      	movs	r1, #35	; 0x23
10009490:	4d0b      	ldr	r5, [pc, #44]	; (100094c0 <mpu_set_dmp_state+0x9c>)
10009492:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009494:	2200      	movs	r2, #0
10009496:	2324      	movs	r3, #36	; 0x24
10009498:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
1000949a:	4b0a      	ldr	r3, [pc, #40]	; (100094c4 <mpu_set_dmp_state+0xa0>)
1000949c:	4798      	blx	r3
    }
    return 0;
1000949e:	2000      	movs	r0, #0
100094a0:	e003      	b.n	100094aa <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100094a2:	2000      	movs	r0, #0
100094a4:	e001      	b.n	100094aa <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100094a6:	2001      	movs	r0, #1
100094a8:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
100094aa:	b002      	add	sp, #8
100094ac:	bd70      	pop	{r4, r5, r6, pc}
100094ae:	46c0      	nop			; (mov r8, r8)
100094b0:	10017dd0 	.word	0x10017dd0
100094b4:	100084b1 	.word	0x100084b1
100094b8:	10008a89 	.word	0x10008a89
100094bc:	10008dc1 	.word	0x10008dc1
100094c0:	1000a779 	.word	0x1000a779
100094c4:	10008555 	.word	0x10008555

100094c8 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100094c8:	4b02      	ldr	r3, [pc, #8]	; (100094d4 <mpu_get_compass_fsr+0xc>)
100094ca:	685b      	ldr	r3, [r3, #4]
100094cc:	899b      	ldrh	r3, [r3, #12]
100094ce:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100094d0:	2000      	movs	r0, #0
100094d2:	4770      	bx	lr
100094d4:	10017dd0 	.word	0x10017dd0

100094d8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094d8:	b510      	push	{r4, lr}
100094da:	b086      	sub	sp, #24
100094dc:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094de:	220c      	movs	r2, #12
100094e0:	4915      	ldr	r1, [pc, #84]	; (10009538 <dmp_set_fifo_rate+0x60>)
100094e2:	3110      	adds	r1, #16
100094e4:	a803      	add	r0, sp, #12
100094e6:	4b15      	ldr	r3, [pc, #84]	; (1000953c <dmp_set_fifo_rate+0x64>)
100094e8:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100094ea:	2cc8      	cmp	r4, #200	; 0xc8
100094ec:	d819      	bhi.n	10009522 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100094ee:	0021      	movs	r1, r4
100094f0:	20c8      	movs	r0, #200	; 0xc8
100094f2:	4b13      	ldr	r3, [pc, #76]	; (10009540 <dmp_set_fifo_rate+0x68>)
100094f4:	4798      	blx	r3
100094f6:	3801      	subs	r0, #1
100094f8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094fa:	aa01      	add	r2, sp, #4
100094fc:	0a03      	lsrs	r3, r0, #8
100094fe:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009500:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009502:	2102      	movs	r1, #2
10009504:	480f      	ldr	r0, [pc, #60]	; (10009544 <dmp_set_fifo_rate+0x6c>)
10009506:	4b10      	ldr	r3, [pc, #64]	; (10009548 <dmp_set_fifo_rate+0x70>)
10009508:	4798      	blx	r3
1000950a:	2800      	cmp	r0, #0
1000950c:	d10c      	bne.n	10009528 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1000950e:	aa03      	add	r2, sp, #12
10009510:	210c      	movs	r1, #12
10009512:	480e      	ldr	r0, [pc, #56]	; (1000954c <dmp_set_fifo_rate+0x74>)
10009514:	4b0c      	ldr	r3, [pc, #48]	; (10009548 <dmp_set_fifo_rate+0x70>)
10009516:	4798      	blx	r3
10009518:	2800      	cmp	r0, #0
1000951a:	d108      	bne.n	1000952e <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
1000951c:	4b0c      	ldr	r3, [pc, #48]	; (10009550 <dmp_set_fifo_rate+0x78>)
1000951e:	819c      	strh	r4, [r3, #12]
    return 0;
10009520:	e007      	b.n	10009532 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009522:	2001      	movs	r0, #1
10009524:	4240      	negs	r0, r0
10009526:	e004      	b.n	10009532 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
10009528:	2001      	movs	r0, #1
1000952a:	4240      	negs	r0, r0
1000952c:	e001      	b.n	10009532 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
1000952e:	2001      	movs	r0, #1
10009530:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009532:	b006      	add	sp, #24
10009534:	bd10      	pop	{r4, pc}
10009536:	46c0      	nop			; (mov r8, r8)
10009538:	10016078 	.word	0x10016078
1000953c:	100149f3 	.word	0x100149f3
10009540:	10012d91 	.word	0x10012d91
10009544:	00000216 	.word	0x00000216
10009548:	100093ad 	.word	0x100093ad
1000954c:	00000ac1 	.word	0x00000ac1
10009550:	10017e94 	.word	0x10017e94

10009554 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009554:	b5f0      	push	{r4, r5, r6, r7, lr}
10009556:	4647      	mov	r7, r8
10009558:	b480      	push	{r7}
1000955a:	b082      	sub	sp, #8
1000955c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000955e:	0743      	lsls	r3, r0, #29
10009560:	d100      	bne.n	10009564 <dmp_set_tap_thresh+0x10>
10009562:	e09c      	b.n	1000969e <dmp_set_tap_thresh+0x14a>
10009564:	23c8      	movs	r3, #200	; 0xc8
10009566:	00db      	lsls	r3, r3, #3
10009568:	4299      	cmp	r1, r3
1000956a:	d900      	bls.n	1000956e <dmp_set_tap_thresh+0x1a>
1000956c:	e09a      	b.n	100096a4 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000956e:	0008      	movs	r0, r1
10009570:	4b58      	ldr	r3, [pc, #352]	; (100096d4 <dmp_set_tap_thresh+0x180>)
10009572:	4798      	blx	r3
10009574:	4958      	ldr	r1, [pc, #352]	; (100096d8 <dmp_set_tap_thresh+0x184>)
10009576:	4b59      	ldr	r3, [pc, #356]	; (100096dc <dmp_set_tap_thresh+0x188>)
10009578:	4798      	blx	r3
1000957a:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000957c:	466b      	mov	r3, sp
1000957e:	1cdd      	adds	r5, r3, #3
10009580:	0028      	movs	r0, r5
10009582:	4b57      	ldr	r3, [pc, #348]	; (100096e0 <dmp_set_tap_thresh+0x18c>)
10009584:	4798      	blx	r3
    switch (accel_fsr) {
10009586:	782b      	ldrb	r3, [r5, #0]
10009588:	2b04      	cmp	r3, #4
1000958a:	d019      	beq.n	100095c0 <dmp_set_tap_thresh+0x6c>
1000958c:	b2da      	uxtb	r2, r3
1000958e:	2a04      	cmp	r2, #4
10009590:	d802      	bhi.n	10009598 <dmp_set_tap_thresh+0x44>
10009592:	2b02      	cmp	r3, #2
10009594:	d005      	beq.n	100095a2 <dmp_set_tap_thresh+0x4e>
10009596:	e088      	b.n	100096aa <dmp_set_tap_thresh+0x156>
10009598:	2b08      	cmp	r3, #8
1000959a:	d020      	beq.n	100095de <dmp_set_tap_thresh+0x8a>
1000959c:	2b10      	cmp	r3, #16
1000959e:	d02d      	beq.n	100095fc <dmp_set_tap_thresh+0xa8>
100095a0:	e083      	b.n	100096aa <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095a2:	4b50      	ldr	r3, [pc, #320]	; (100096e4 <dmp_set_tap_thresh+0x190>)
100095a4:	4698      	mov	r8, r3
100095a6:	218d      	movs	r1, #141	; 0x8d
100095a8:	05c9      	lsls	r1, r1, #23
100095aa:	1c30      	adds	r0, r6, #0
100095ac:	4798      	blx	r3
100095ae:	4f4e      	ldr	r7, [pc, #312]	; (100096e8 <dmp_set_tap_thresh+0x194>)
100095b0:	47b8      	blx	r7
100095b2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095b4:	494d      	ldr	r1, [pc, #308]	; (100096ec <dmp_set_tap_thresh+0x198>)
100095b6:	1c30      	adds	r0, r6, #0
100095b8:	47c0      	blx	r8
100095ba:	47b8      	blx	r7
100095bc:	b280      	uxth	r0, r0
        break;
100095be:	e02b      	b.n	10009618 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100095c0:	4b48      	ldr	r3, [pc, #288]	; (100096e4 <dmp_set_tap_thresh+0x190>)
100095c2:	4698      	mov	r8, r3
100095c4:	218c      	movs	r1, #140	; 0x8c
100095c6:	05c9      	lsls	r1, r1, #23
100095c8:	1c30      	adds	r0, r6, #0
100095ca:	4798      	blx	r3
100095cc:	4f46      	ldr	r7, [pc, #280]	; (100096e8 <dmp_set_tap_thresh+0x194>)
100095ce:	47b8      	blx	r7
100095d0:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100095d2:	4947      	ldr	r1, [pc, #284]	; (100096f0 <dmp_set_tap_thresh+0x19c>)
100095d4:	1c30      	adds	r0, r6, #0
100095d6:	47c0      	blx	r8
100095d8:	47b8      	blx	r7
100095da:	b280      	uxth	r0, r0
        break;
100095dc:	e01c      	b.n	10009618 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100095de:	4b41      	ldr	r3, [pc, #260]	; (100096e4 <dmp_set_tap_thresh+0x190>)
100095e0:	4698      	mov	r8, r3
100095e2:	218b      	movs	r1, #139	; 0x8b
100095e4:	05c9      	lsls	r1, r1, #23
100095e6:	1c30      	adds	r0, r6, #0
100095e8:	4798      	blx	r3
100095ea:	4f3f      	ldr	r7, [pc, #252]	; (100096e8 <dmp_set_tap_thresh+0x194>)
100095ec:	47b8      	blx	r7
100095ee:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100095f0:	4940      	ldr	r1, [pc, #256]	; (100096f4 <dmp_set_tap_thresh+0x1a0>)
100095f2:	1c30      	adds	r0, r6, #0
100095f4:	47c0      	blx	r8
100095f6:	47b8      	blx	r7
100095f8:	b280      	uxth	r0, r0
        break;
100095fa:	e00d      	b.n	10009618 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100095fc:	4b39      	ldr	r3, [pc, #228]	; (100096e4 <dmp_set_tap_thresh+0x190>)
100095fe:	4698      	mov	r8, r3
10009600:	218a      	movs	r1, #138	; 0x8a
10009602:	05c9      	lsls	r1, r1, #23
10009604:	1c30      	adds	r0, r6, #0
10009606:	4798      	blx	r3
10009608:	4f37      	ldr	r7, [pc, #220]	; (100096e8 <dmp_set_tap_thresh+0x194>)
1000960a:	47b8      	blx	r7
1000960c:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1000960e:	493a      	ldr	r1, [pc, #232]	; (100096f8 <dmp_set_tap_thresh+0x1a4>)
10009610:	1c30      	adds	r0, r6, #0
10009612:	47c0      	blx	r8
10009614:	47b8      	blx	r7
10009616:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009618:	ab01      	add	r3, sp, #4
1000961a:	0a2a      	lsrs	r2, r5, #8
1000961c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000961e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009620:	0a02      	lsrs	r2, r0, #8
10009622:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009624:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
10009626:	07e3      	lsls	r3, r4, #31
10009628:	d510      	bpl.n	1000964c <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000962a:	aa01      	add	r2, sp, #4
1000962c:	2102      	movs	r1, #2
1000962e:	20ea      	movs	r0, #234	; 0xea
10009630:	0040      	lsls	r0, r0, #1
10009632:	4b32      	ldr	r3, [pc, #200]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
10009634:	4798      	blx	r3
10009636:	2800      	cmp	r0, #0
10009638:	d13a      	bne.n	100096b0 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000963a:	466b      	mov	r3, sp
1000963c:	1d9a      	adds	r2, r3, #6
1000963e:	2102      	movs	r1, #2
10009640:	3025      	adds	r0, #37	; 0x25
10009642:	30ff      	adds	r0, #255	; 0xff
10009644:	4b2d      	ldr	r3, [pc, #180]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
10009646:	4798      	blx	r3
10009648:	2800      	cmp	r0, #0
1000964a:	d134      	bne.n	100096b6 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
1000964c:	07a3      	lsls	r3, r4, #30
1000964e:	d510      	bpl.n	10009672 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009650:	aa01      	add	r2, sp, #4
10009652:	2102      	movs	r1, #2
10009654:	20ec      	movs	r0, #236	; 0xec
10009656:	0040      	lsls	r0, r0, #1
10009658:	4b28      	ldr	r3, [pc, #160]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
1000965a:	4798      	blx	r3
1000965c:	2800      	cmp	r0, #0
1000965e:	d12d      	bne.n	100096bc <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009660:	466b      	mov	r3, sp
10009662:	1d9a      	adds	r2, r3, #6
10009664:	2102      	movs	r1, #2
10009666:	3029      	adds	r0, #41	; 0x29
10009668:	30ff      	adds	r0, #255	; 0xff
1000966a:	4b24      	ldr	r3, [pc, #144]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
1000966c:	4798      	blx	r3
1000966e:	2800      	cmp	r0, #0
10009670:	d127      	bne.n	100096c2 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009672:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009674:	0763      	lsls	r3, r4, #29
10009676:	d529      	bpl.n	100096cc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009678:	aa01      	add	r2, sp, #4
1000967a:	2102      	movs	r1, #2
1000967c:	30dd      	adds	r0, #221	; 0xdd
1000967e:	30ff      	adds	r0, #255	; 0xff
10009680:	4b1e      	ldr	r3, [pc, #120]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
10009682:	4798      	blx	r3
10009684:	2800      	cmp	r0, #0
10009686:	d11f      	bne.n	100096c8 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009688:	466b      	mov	r3, sp
1000968a:	1d9a      	adds	r2, r3, #6
1000968c:	2102      	movs	r1, #2
1000968e:	302d      	adds	r0, #45	; 0x2d
10009690:	30ff      	adds	r0, #255	; 0xff
10009692:	4b1a      	ldr	r3, [pc, #104]	; (100096fc <dmp_set_tap_thresh+0x1a8>)
10009694:	4798      	blx	r3
10009696:	1e43      	subs	r3, r0, #1
10009698:	4198      	sbcs	r0, r3
1000969a:	4240      	negs	r0, r0
1000969c:	e016      	b.n	100096cc <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000969e:	2001      	movs	r0, #1
100096a0:	4240      	negs	r0, r0
100096a2:	e013      	b.n	100096cc <dmp_set_tap_thresh+0x178>
100096a4:	2001      	movs	r0, #1
100096a6:	4240      	negs	r0, r0
100096a8:	e010      	b.n	100096cc <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100096aa:	2001      	movs	r0, #1
100096ac:	4240      	negs	r0, r0
100096ae:	e00d      	b.n	100096cc <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100096b0:	2001      	movs	r0, #1
100096b2:	4240      	negs	r0, r0
100096b4:	e00a      	b.n	100096cc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100096b6:	2001      	movs	r0, #1
100096b8:	4240      	negs	r0, r0
100096ba:	e007      	b.n	100096cc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100096bc:	2001      	movs	r0, #1
100096be:	4240      	negs	r0, r0
100096c0:	e004      	b.n	100096cc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100096c2:	2001      	movs	r0, #1
100096c4:	4240      	negs	r0, r0
100096c6:	e001      	b.n	100096cc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100096c8:	2001      	movs	r0, #1
100096ca:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100096cc:	b002      	add	sp, #8
100096ce:	bc04      	pop	{r2}
100096d0:	4690      	mov	r8, r2
100096d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096d4:	10013a29 	.word	0x10013a29
100096d8:	43480000 	.word	0x43480000
100096dc:	1001311d 	.word	0x1001311d
100096e0:	100087ed 	.word	0x100087ed
100096e4:	100134b1 	.word	0x100134b1
100096e8:	100130b1 	.word	0x100130b1
100096ec:	46400000 	.word	0x46400000
100096f0:	45c00000 	.word	0x45c00000
100096f4:	45400000 	.word	0x45400000
100096f8:	44c00000 	.word	0x44c00000
100096fc:	100093ad 	.word	0x100093ad

10009700 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009700:	b500      	push	{lr}
10009702:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009704:	07c3      	lsls	r3, r0, #31
10009706:	d403      	bmi.n	10009710 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009708:	2200      	movs	r2, #0
1000970a:	466b      	mov	r3, sp
1000970c:	71da      	strb	r2, [r3, #7]
1000970e:	e002      	b.n	10009716 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009710:	2230      	movs	r2, #48	; 0x30
10009712:	466b      	mov	r3, sp
10009714:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009716:	0783      	lsls	r3, r0, #30
10009718:	d505      	bpl.n	10009726 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
1000971a:	466b      	mov	r3, sp
1000971c:	1dda      	adds	r2, r3, #7
1000971e:	79d9      	ldrb	r1, [r3, #7]
10009720:	230c      	movs	r3, #12
10009722:	430b      	orrs	r3, r1
10009724:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009726:	0743      	lsls	r3, r0, #29
10009728:	d505      	bpl.n	10009736 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
1000972a:	466b      	mov	r3, sp
1000972c:	1dda      	adds	r2, r3, #7
1000972e:	79d9      	ldrb	r1, [r3, #7]
10009730:	2303      	movs	r3, #3
10009732:	430b      	orrs	r3, r1
10009734:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009736:	466b      	mov	r3, sp
10009738:	1dda      	adds	r2, r3, #7
1000973a:	2101      	movs	r1, #1
1000973c:	20a4      	movs	r0, #164	; 0xa4
1000973e:	0040      	lsls	r0, r0, #1
10009740:	4b01      	ldr	r3, [pc, #4]	; (10009748 <dmp_set_tap_axes+0x48>)
10009742:	4798      	blx	r3
}
10009744:	b003      	add	sp, #12
10009746:	bd00      	pop	{pc}
10009748:	100093ad 	.word	0x100093ad

1000974c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
1000974c:	b500      	push	{lr}
1000974e:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009750:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009752:	2800      	cmp	r0, #0
10009754:	d004      	beq.n	10009760 <dmp_set_tap_count+0x14>
10009756:	1c03      	adds	r3, r0, #0
10009758:	2804      	cmp	r0, #4
1000975a:	d900      	bls.n	1000975e <dmp_set_tap_count+0x12>
1000975c:	2304      	movs	r3, #4
1000975e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009760:	466a      	mov	r2, sp
10009762:	3207      	adds	r2, #7
10009764:	3b01      	subs	r3, #1
10009766:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009768:	2101      	movs	r1, #1
1000976a:	2050      	movs	r0, #80	; 0x50
1000976c:	30ff      	adds	r0, #255	; 0xff
1000976e:	4b02      	ldr	r3, [pc, #8]	; (10009778 <dmp_set_tap_count+0x2c>)
10009770:	4798      	blx	r3
}
10009772:	b003      	add	sp, #12
10009774:	bd00      	pop	{pc}
10009776:	46c0      	nop			; (mov r8, r8)
10009778:	100093ad 	.word	0x100093ad

1000977c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
1000977c:	b500      	push	{lr}
1000977e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009780:	2105      	movs	r1, #5
10009782:	4b07      	ldr	r3, [pc, #28]	; (100097a0 <dmp_set_tap_time+0x24>)
10009784:	4798      	blx	r3
10009786:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009788:	aa01      	add	r2, sp, #4
1000978a:	0a03      	lsrs	r3, r0, #8
1000978c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000978e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009790:	2102      	movs	r1, #2
10009792:	20ef      	movs	r0, #239	; 0xef
10009794:	0040      	lsls	r0, r0, #1
10009796:	4b03      	ldr	r3, [pc, #12]	; (100097a4 <dmp_set_tap_time+0x28>)
10009798:	4798      	blx	r3
}
1000979a:	b003      	add	sp, #12
1000979c:	bd00      	pop	{pc}
1000979e:	46c0      	nop			; (mov r8, r8)
100097a0:	10012c7d 	.word	0x10012c7d
100097a4:	100093ad 	.word	0x100093ad

100097a8 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
100097a8:	b500      	push	{lr}
100097aa:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100097ac:	2105      	movs	r1, #5
100097ae:	4b07      	ldr	r3, [pc, #28]	; (100097cc <dmp_set_tap_time_multi+0x24>)
100097b0:	4798      	blx	r3
100097b2:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097b4:	aa01      	add	r2, sp, #4
100097b6:	0a03      	lsrs	r3, r0, #8
100097b8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097ba:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100097bc:	2102      	movs	r1, #2
100097be:	20ed      	movs	r0, #237	; 0xed
100097c0:	0040      	lsls	r0, r0, #1
100097c2:	4b03      	ldr	r3, [pc, #12]	; (100097d0 <dmp_set_tap_time_multi+0x28>)
100097c4:	4798      	blx	r3
}
100097c6:	b003      	add	sp, #12
100097c8:	bd00      	pop	{pc}
100097ca:	46c0      	nop			; (mov r8, r8)
100097cc:	10012c7d 	.word	0x10012c7d
100097d0:	100093ad 	.word	0x100093ad

100097d4 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
100097d4:	b510      	push	{r4, lr}
100097d6:	b082      	sub	sp, #8
100097d8:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
100097da:	21fa      	movs	r1, #250	; 0xfa
100097dc:	0089      	lsls	r1, r1, #2
100097de:	4b09      	ldr	r3, [pc, #36]	; (10009804 <dmp_set_shake_reject_thresh+0x30>)
100097e0:	4798      	blx	r3
100097e2:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100097e4:	aa01      	add	r2, sp, #4
100097e6:	1603      	asrs	r3, r0, #24
100097e8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097ea:	1403      	asrs	r3, r0, #16
100097ec:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100097ee:	1203      	asrs	r3, r0, #8
100097f0:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097f2:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100097f4:	2104      	movs	r1, #4
100097f6:	20ae      	movs	r0, #174	; 0xae
100097f8:	0040      	lsls	r0, r0, #1
100097fa:	4b03      	ldr	r3, [pc, #12]	; (10009808 <dmp_set_shake_reject_thresh+0x34>)
100097fc:	4798      	blx	r3
}
100097fe:	b002      	add	sp, #8
10009800:	bd10      	pop	{r4, pc}
10009802:	46c0      	nop			; (mov r8, r8)
10009804:	10012d91 	.word	0x10012d91
10009808:	100093ad 	.word	0x100093ad

1000980c <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
1000980c:	b500      	push	{lr}
1000980e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009810:	2105      	movs	r1, #5
10009812:	4b07      	ldr	r3, [pc, #28]	; (10009830 <dmp_set_shake_reject_time+0x24>)
10009814:	4798      	blx	r3
10009816:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009818:	aa01      	add	r2, sp, #4
1000981a:	0a03      	lsrs	r3, r0, #8
1000981c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000981e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009820:	2102      	movs	r1, #2
10009822:	20ad      	movs	r0, #173	; 0xad
10009824:	0040      	lsls	r0, r0, #1
10009826:	4b03      	ldr	r3, [pc, #12]	; (10009834 <dmp_set_shake_reject_time+0x28>)
10009828:	4798      	blx	r3
}
1000982a:	b003      	add	sp, #12
1000982c:	bd00      	pop	{pc}
1000982e:	46c0      	nop			; (mov r8, r8)
10009830:	10012c7d 	.word	0x10012c7d
10009834:	100093ad 	.word	0x100093ad

10009838 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009838:	b500      	push	{lr}
1000983a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1000983c:	2105      	movs	r1, #5
1000983e:	4b07      	ldr	r3, [pc, #28]	; (1000985c <dmp_set_shake_reject_timeout+0x24>)
10009840:	4798      	blx	r3
10009842:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009844:	aa01      	add	r2, sp, #4
10009846:	0a03      	lsrs	r3, r0, #8
10009848:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000984a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
1000984c:	2102      	movs	r1, #2
1000984e:	20ac      	movs	r0, #172	; 0xac
10009850:	0040      	lsls	r0, r0, #1
10009852:	4b03      	ldr	r3, [pc, #12]	; (10009860 <dmp_set_shake_reject_timeout+0x28>)
10009854:	4798      	blx	r3
}
10009856:	b003      	add	sp, #12
10009858:	bd00      	pop	{pc}
1000985a:	46c0      	nop			; (mov r8, r8)
1000985c:	10012c7d 	.word	0x10012c7d
10009860:	100093ad 	.word	0x100093ad

10009864 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009864:	b500      	push	{lr}
10009866:	b085      	sub	sp, #20
    if (enable) {
10009868:	2800      	cmp	r0, #0
1000986a:	d00c      	beq.n	10009886 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000986c:	2209      	movs	r2, #9
1000986e:	490d      	ldr	r1, [pc, #52]	; (100098a4 <dmp_enable_gyro_cal+0x40>)
10009870:	311c      	adds	r1, #28
10009872:	a801      	add	r0, sp, #4
10009874:	4b0c      	ldr	r3, [pc, #48]	; (100098a8 <dmp_enable_gyro_cal+0x44>)
10009876:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009878:	aa01      	add	r2, sp, #4
1000987a:	2109      	movs	r1, #9
1000987c:	2097      	movs	r0, #151	; 0x97
1000987e:	00c0      	lsls	r0, r0, #3
10009880:	4b0a      	ldr	r3, [pc, #40]	; (100098ac <dmp_enable_gyro_cal+0x48>)
10009882:	4798      	blx	r3
10009884:	e00b      	b.n	1000989e <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009886:	2209      	movs	r2, #9
10009888:	4906      	ldr	r1, [pc, #24]	; (100098a4 <dmp_enable_gyro_cal+0x40>)
1000988a:	3128      	adds	r1, #40	; 0x28
1000988c:	a801      	add	r0, sp, #4
1000988e:	4b06      	ldr	r3, [pc, #24]	; (100098a8 <dmp_enable_gyro_cal+0x44>)
10009890:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009892:	aa01      	add	r2, sp, #4
10009894:	2109      	movs	r1, #9
10009896:	2097      	movs	r0, #151	; 0x97
10009898:	00c0      	lsls	r0, r0, #3
1000989a:	4b04      	ldr	r3, [pc, #16]	; (100098ac <dmp_enable_gyro_cal+0x48>)
1000989c:	4798      	blx	r3
    }
}
1000989e:	b005      	add	sp, #20
100098a0:	bd00      	pop	{pc}
100098a2:	46c0      	nop			; (mov r8, r8)
100098a4:	10016078 	.word	0x10016078
100098a8:	100149f3 	.word	0x100149f3
100098ac:	100093ad 	.word	0x100093ad

100098b0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
100098b0:	b500      	push	{lr}
100098b2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100098b4:	2800      	cmp	r0, #0
100098b6:	d009      	beq.n	100098cc <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
100098b8:	ab01      	add	r3, sp, #4
100098ba:	22c0      	movs	r2, #192	; 0xc0
100098bc:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
100098be:	3202      	adds	r2, #2
100098c0:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
100098c2:	3202      	adds	r2, #2
100098c4:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
100098c6:	3202      	adds	r2, #2
100098c8:	70da      	strb	r2, [r3, #3]
100098ca:	e001      	b.n	100098d0 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
100098cc:	4b05      	ldr	r3, [pc, #20]	; (100098e4 <dmp_enable_lp_quat+0x34>)
100098ce:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
100098d0:	aa01      	add	r2, sp, #4
100098d2:	2104      	movs	r1, #4
100098d4:	4804      	ldr	r0, [pc, #16]	; (100098e8 <dmp_enable_lp_quat+0x38>)
100098d6:	4b05      	ldr	r3, [pc, #20]	; (100098ec <dmp_enable_lp_quat+0x3c>)
100098d8:	4798      	blx	r3

    return mpu_reset_fifo();
100098da:	4b05      	ldr	r3, [pc, #20]	; (100098f0 <dmp_enable_lp_quat+0x40>)
100098dc:	4798      	blx	r3
}
100098de:	b003      	add	sp, #12
100098e0:	bd00      	pop	{pc}
100098e2:	46c0      	nop			; (mov r8, r8)
100098e4:	8b8b8b8b 	.word	0x8b8b8b8b
100098e8:	00000a98 	.word	0x00000a98
100098ec:	100093ad 	.word	0x100093ad
100098f0:	10008555 	.word	0x10008555

100098f4 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
100098f4:	b500      	push	{lr}
100098f6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100098f8:	2800      	cmp	r0, #0
100098fa:	d009      	beq.n	10009910 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
100098fc:	ab01      	add	r3, sp, #4
100098fe:	2220      	movs	r2, #32
10009900:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009902:	3208      	adds	r2, #8
10009904:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009906:	3208      	adds	r2, #8
10009908:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
1000990a:	3208      	adds	r2, #8
1000990c:	70da      	strb	r2, [r3, #3]
1000990e:	e001      	b.n	10009914 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009910:	4b05      	ldr	r3, [pc, #20]	; (10009928 <dmp_enable_6x_lp_quat+0x34>)
10009912:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009914:	aa01      	add	r2, sp, #4
10009916:	2104      	movs	r1, #4
10009918:	4804      	ldr	r0, [pc, #16]	; (1000992c <dmp_enable_6x_lp_quat+0x38>)
1000991a:	4b05      	ldr	r3, [pc, #20]	; (10009930 <dmp_enable_6x_lp_quat+0x3c>)
1000991c:	4798      	blx	r3

    return mpu_reset_fifo();
1000991e:	4b05      	ldr	r3, [pc, #20]	; (10009934 <dmp_enable_6x_lp_quat+0x40>)
10009920:	4798      	blx	r3
}
10009922:	b003      	add	sp, #12
10009924:	bd00      	pop	{pc}
10009926:	46c0      	nop			; (mov r8, r8)
10009928:	a3a3a3a3 	.word	0xa3a3a3a3
1000992c:	00000a9e 	.word	0x00000a9e
10009930:	100093ad 	.word	0x100093ad
10009934:	10008555 	.word	0x10008555

10009938 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009938:	b5f0      	push	{r4, r5, r6, r7, lr}
1000993a:	b085      	sub	sp, #20
1000993c:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1000993e:	ad01      	add	r5, sp, #4
10009940:	2302      	movs	r3, #2
10009942:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009944:	33c8      	adds	r3, #200	; 0xc8
10009946:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009948:	3319      	adds	r3, #25
1000994a:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1000994c:	3bda      	subs	r3, #218	; 0xda
1000994e:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009950:	002a      	movs	r2, r5
10009952:	2104      	movs	r1, #4
10009954:	2068      	movs	r0, #104	; 0x68
10009956:	4b6a      	ldr	r3, [pc, #424]	; (10009b00 <dmp_enable_feature+0x1c8>)
10009958:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000995a:	23a3      	movs	r3, #163	; 0xa3
1000995c:	702b      	strb	r3, [r5, #0]
1000995e:	2740      	movs	r7, #64	; 0x40
10009960:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009962:	d007      	beq.n	10009974 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009964:	ab01      	add	r3, sp, #4
10009966:	22c0      	movs	r2, #192	; 0xc0
10009968:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
1000996a:	3208      	adds	r2, #8
1000996c:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
1000996e:	3a06      	subs	r2, #6
10009970:	70da      	strb	r2, [r3, #3]
10009972:	e004      	b.n	1000997e <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009974:	ab01      	add	r3, sp, #4
10009976:	22a3      	movs	r2, #163	; 0xa3
10009978:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
1000997a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
1000997c:	70da      	strb	r2, [r3, #3]
1000997e:	25c0      	movs	r5, #192	; 0xc0
10009980:	006d      	lsls	r5, r5, #1
10009982:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009984:	d007      	beq.n	10009996 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009986:	ab01      	add	r3, sp, #4
10009988:	22c4      	movs	r2, #196	; 0xc4
1000998a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
1000998c:	3208      	adds	r2, #8
1000998e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009990:	3a06      	subs	r2, #6
10009992:	719a      	strb	r2, [r3, #6]
10009994:	e004      	b.n	100099a0 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009996:	ab01      	add	r3, sp, #4
10009998:	22a3      	movs	r2, #163	; 0xa3
1000999a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
1000999c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
1000999e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
100099a0:	aa01      	add	r2, sp, #4
100099a2:	23a3      	movs	r3, #163	; 0xa3
100099a4:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
100099a6:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
100099a8:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
100099aa:	210a      	movs	r1, #10
100099ac:	4855      	ldr	r0, [pc, #340]	; (10009b04 <dmp_enable_feature+0x1cc>)
100099ae:	4b54      	ldr	r3, [pc, #336]	; (10009b00 <dmp_enable_feature+0x1c8>)
100099b0:	4798      	blx	r3
100099b2:	2603      	movs	r6, #3
100099b4:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
100099b6:	d003      	beq.n	100099c0 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
100099b8:	2220      	movs	r2, #32
100099ba:	ab01      	add	r3, sp, #4
100099bc:	701a      	strb	r2, [r3, #0]
100099be:	e002      	b.n	100099c6 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
100099c0:	22d8      	movs	r2, #216	; 0xd8
100099c2:	ab01      	add	r3, sp, #4
100099c4:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
100099c6:	aa01      	add	r2, sp, #4
100099c8:	2101      	movs	r1, #1
100099ca:	484f      	ldr	r0, [pc, #316]	; (10009b08 <dmp_enable_feature+0x1d0>)
100099cc:	4b4c      	ldr	r3, [pc, #304]	; (10009b00 <dmp_enable_feature+0x1c8>)
100099ce:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
100099d0:	06a3      	lsls	r3, r4, #26
100099d2:	d503      	bpl.n	100099dc <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
100099d4:	2001      	movs	r0, #1
100099d6:	4b4d      	ldr	r3, [pc, #308]	; (10009b0c <dmp_enable_feature+0x1d4>)
100099d8:	4798      	blx	r3
100099da:	e002      	b.n	100099e2 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
100099dc:	2000      	movs	r0, #0
100099de:	4b4b      	ldr	r3, [pc, #300]	; (10009b0c <dmp_enable_feature+0x1d4>)
100099e0:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100099e2:	2d00      	cmp	r5, #0
100099e4:	d019      	beq.n	10009a1a <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
100099e6:	05e3      	lsls	r3, r4, #23
100099e8:	d509      	bpl.n	100099fe <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
100099ea:	ab01      	add	r3, sp, #4
100099ec:	22b2      	movs	r2, #178	; 0xb2
100099ee:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
100099f0:	3a27      	subs	r2, #39	; 0x27
100099f2:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
100099f4:	322b      	adds	r2, #43	; 0x2b
100099f6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
100099f8:	3a1b      	subs	r2, #27
100099fa:	70da      	strb	r2, [r3, #3]
100099fc:	e008      	b.n	10009a10 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
100099fe:	ab01      	add	r3, sp, #4
10009a00:	22b0      	movs	r2, #176	; 0xb0
10009a02:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009a04:	3a30      	subs	r2, #48	; 0x30
10009a06:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009a08:	3234      	adds	r2, #52	; 0x34
10009a0a:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009a0c:	3a24      	subs	r2, #36	; 0x24
10009a0e:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009a10:	aa01      	add	r2, sp, #4
10009a12:	2104      	movs	r1, #4
10009a14:	483e      	ldr	r0, [pc, #248]	; (10009b10 <dmp_enable_feature+0x1d8>)
10009a16:	4b3a      	ldr	r3, [pc, #232]	; (10009b00 <dmp_enable_feature+0x1c8>)
10009a18:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009a1a:	07e3      	lsls	r3, r4, #31
10009a1c:	d523      	bpl.n	10009a66 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009a1e:	aa01      	add	r2, sp, #4
10009a20:	23f8      	movs	r3, #248	; 0xf8
10009a22:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a24:	2101      	movs	r1, #1
10009a26:	208b      	movs	r0, #139	; 0x8b
10009a28:	0100      	lsls	r0, r0, #4
10009a2a:	4b35      	ldr	r3, [pc, #212]	; (10009b00 <dmp_enable_feature+0x1c8>)
10009a2c:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009a2e:	21fa      	movs	r1, #250	; 0xfa
10009a30:	2007      	movs	r0, #7
10009a32:	4b38      	ldr	r3, [pc, #224]	; (10009b14 <dmp_enable_feature+0x1dc>)
10009a34:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009a36:	2007      	movs	r0, #7
10009a38:	4b37      	ldr	r3, [pc, #220]	; (10009b18 <dmp_enable_feature+0x1e0>)
10009a3a:	4798      	blx	r3
        dmp_set_tap_count(1);
10009a3c:	2001      	movs	r0, #1
10009a3e:	4b37      	ldr	r3, [pc, #220]	; (10009b1c <dmp_enable_feature+0x1e4>)
10009a40:	4798      	blx	r3
        dmp_set_tap_time(100);
10009a42:	2064      	movs	r0, #100	; 0x64
10009a44:	4b36      	ldr	r3, [pc, #216]	; (10009b20 <dmp_enable_feature+0x1e8>)
10009a46:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009a48:	20fa      	movs	r0, #250	; 0xfa
10009a4a:	0040      	lsls	r0, r0, #1
10009a4c:	4b35      	ldr	r3, [pc, #212]	; (10009b24 <dmp_enable_feature+0x1ec>)
10009a4e:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009a50:	21c8      	movs	r1, #200	; 0xc8
10009a52:	4835      	ldr	r0, [pc, #212]	; (10009b28 <dmp_enable_feature+0x1f0>)
10009a54:	4b35      	ldr	r3, [pc, #212]	; (10009b2c <dmp_enable_feature+0x1f4>)
10009a56:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009a58:	2028      	movs	r0, #40	; 0x28
10009a5a:	4b35      	ldr	r3, [pc, #212]	; (10009b30 <dmp_enable_feature+0x1f8>)
10009a5c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009a5e:	200a      	movs	r0, #10
10009a60:	4b34      	ldr	r3, [pc, #208]	; (10009b34 <dmp_enable_feature+0x1fc>)
10009a62:	4798      	blx	r3
10009a64:	e007      	b.n	10009a76 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009a66:	aa01      	add	r2, sp, #4
10009a68:	23d8      	movs	r3, #216	; 0xd8
10009a6a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a6c:	2101      	movs	r1, #1
10009a6e:	208b      	movs	r0, #139	; 0x8b
10009a70:	0100      	lsls	r0, r0, #4
10009a72:	4b23      	ldr	r3, [pc, #140]	; (10009b00 <dmp_enable_feature+0x1c8>)
10009a74:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009a76:	07a3      	lsls	r3, r4, #30
10009a78:	d503      	bpl.n	10009a82 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009a7a:	22d9      	movs	r2, #217	; 0xd9
10009a7c:	ab01      	add	r3, sp, #4
10009a7e:	701a      	strb	r2, [r3, #0]
10009a80:	e002      	b.n	10009a88 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009a82:	22d8      	movs	r2, #216	; 0xd8
10009a84:	ab01      	add	r3, sp, #4
10009a86:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009a88:	aa01      	add	r2, sp, #4
10009a8a:	2101      	movs	r1, #1
10009a8c:	482a      	ldr	r0, [pc, #168]	; (10009b38 <dmp_enable_feature+0x200>)
10009a8e:	4b1c      	ldr	r3, [pc, #112]	; (10009b00 <dmp_enable_feature+0x1c8>)
10009a90:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009a92:	0763      	lsls	r3, r4, #29
10009a94:	d503      	bpl.n	10009a9e <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009a96:	2001      	movs	r0, #1
10009a98:	4b28      	ldr	r3, [pc, #160]	; (10009b3c <dmp_enable_feature+0x204>)
10009a9a:	4798      	blx	r3
10009a9c:	e002      	b.n	10009aa4 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009a9e:	2000      	movs	r0, #0
10009aa0:	4b26      	ldr	r3, [pc, #152]	; (10009b3c <dmp_enable_feature+0x204>)
10009aa2:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009aa4:	06e3      	lsls	r3, r4, #27
10009aa6:	d503      	bpl.n	10009ab0 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009aa8:	2001      	movs	r0, #1
10009aaa:	4b25      	ldr	r3, [pc, #148]	; (10009b40 <dmp_enable_feature+0x208>)
10009aac:	4798      	blx	r3
10009aae:	e002      	b.n	10009ab6 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009ab0:	2000      	movs	r0, #0
10009ab2:	4b23      	ldr	r3, [pc, #140]	; (10009b40 <dmp_enable_feature+0x208>)
10009ab4:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009ab6:	2308      	movs	r3, #8
10009ab8:	4323      	orrs	r3, r4
10009aba:	4a22      	ldr	r2, [pc, #136]	; (10009b44 <dmp_enable_feature+0x20c>)
10009abc:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009abe:	4b22      	ldr	r3, [pc, #136]	; (10009b48 <dmp_enable_feature+0x210>)
10009ac0:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009ac2:	2f00      	cmp	r7, #0
10009ac4:	d103      	bne.n	10009ace <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009ac6:	2200      	movs	r2, #0
10009ac8:	4b1e      	ldr	r3, [pc, #120]	; (10009b44 <dmp_enable_feature+0x20c>)
10009aca:	739a      	strb	r2, [r3, #14]
10009acc:	e002      	b.n	10009ad4 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009ace:	2206      	movs	r2, #6
10009ad0:	4b1c      	ldr	r3, [pc, #112]	; (10009b44 <dmp_enable_feature+0x20c>)
10009ad2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009ad4:	2d00      	cmp	r5, #0
10009ad6:	d003      	beq.n	10009ae0 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009ad8:	4a1a      	ldr	r2, [pc, #104]	; (10009b44 <dmp_enable_feature+0x20c>)
10009ada:	7b93      	ldrb	r3, [r2, #14]
10009adc:	3306      	adds	r3, #6
10009ade:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009ae0:	2314      	movs	r3, #20
10009ae2:	4223      	tst	r3, r4
10009ae4:	d003      	beq.n	10009aee <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009ae6:	4a17      	ldr	r2, [pc, #92]	; (10009b44 <dmp_enable_feature+0x20c>)
10009ae8:	7b93      	ldrb	r3, [r2, #14]
10009aea:	3310      	adds	r3, #16
10009aec:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009aee:	2e00      	cmp	r6, #0
10009af0:	d003      	beq.n	10009afa <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009af2:	4a14      	ldr	r2, [pc, #80]	; (10009b44 <dmp_enable_feature+0x20c>)
10009af4:	7b93      	ldrb	r3, [r2, #14]
10009af6:	3304      	adds	r3, #4
10009af8:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009afa:	2000      	movs	r0, #0
10009afc:	b005      	add	sp, #20
10009afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b00:	100093ad 	.word	0x100093ad
10009b04:	00000aa7 	.word	0x00000aa7
10009b08:	00000ab6 	.word	0x00000ab6
10009b0c:	10009865 	.word	0x10009865
10009b10:	00000aa2 	.word	0x00000aa2
10009b14:	10009555 	.word	0x10009555
10009b18:	10009701 	.word	0x10009701
10009b1c:	1000974d 	.word	0x1000974d
10009b20:	1000977d 	.word	0x1000977d
10009b24:	100097a9 	.word	0x100097a9
10009b28:	02cae309 	.word	0x02cae309
10009b2c:	100097d5 	.word	0x100097d5
10009b30:	1000980d 	.word	0x1000980d
10009b34:	10009839 	.word	0x10009839
10009b38:	0000073d 	.word	0x0000073d
10009b3c:	100098b1 	.word	0x100098b1
10009b40:	100098f5 	.word	0x100098f5
10009b44:	10017e94 	.word	0x10017e94
10009b48:	10008555 	.word	0x10008555

10009b4c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009b4c:	b510      	push	{r4, lr}
10009b4e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009b50:	4809      	ldr	r0, [pc, #36]	; (10009b78 <sms_ble_pair_request_fn+0x2c>)
10009b52:	4b0a      	ldr	r3, [pc, #40]	; (10009b7c <sms_ble_pair_request_fn+0x30>)
10009b54:	4798      	blx	r3
10009b56:	4b0a      	ldr	r3, [pc, #40]	; (10009b80 <sms_ble_pair_request_fn+0x34>)
10009b58:	781a      	ldrb	r2, [r3, #0]
10009b5a:	b2d2      	uxtb	r2, r2
10009b5c:	4b09      	ldr	r3, [pc, #36]	; (10009b84 <sms_ble_pair_request_fn+0x38>)
10009b5e:	781b      	ldrb	r3, [r3, #0]
10009b60:	b2db      	uxtb	r3, r3
10009b62:	4909      	ldr	r1, [pc, #36]	; (10009b88 <sms_ble_pair_request_fn+0x3c>)
10009b64:	7808      	ldrb	r0, [r1, #0]
10009b66:	4909      	ldr	r1, [pc, #36]	; (10009b8c <sms_ble_pair_request_fn+0x40>)
10009b68:	7849      	ldrb	r1, [r1, #1]
10009b6a:	9000      	str	r0, [sp, #0]
10009b6c:	4808      	ldr	r0, [pc, #32]	; (10009b90 <sms_ble_pair_request_fn+0x44>)
10009b6e:	4c09      	ldr	r4, [pc, #36]	; (10009b94 <sms_ble_pair_request_fn+0x48>)
10009b70:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009b72:	2000      	movs	r0, #0
10009b74:	b002      	add	sp, #8
10009b76:	bd10      	pop	{r4, pc}
10009b78:	10015e2c 	.word	0x10015e2c
10009b7c:	10014c6d 	.word	0x10014c6d
10009b80:	10019af8 	.word	0x10019af8
10009b84:	1001994c 	.word	0x1001994c
10009b88:	10019af9 	.word	0x10019af9
10009b8c:	100199e8 	.word	0x100199e8
10009b90:	100160c4 	.word	0x100160c4
10009b94:	10014b4d 	.word	0x10014b4d

10009b98 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009b98:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009b9a:	2001      	movs	r0, #1
10009b9c:	4b08      	ldr	r3, [pc, #32]	; (10009bc0 <sms_ble_notification_confirmed_fn+0x28>)
10009b9e:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ba0:	2200      	movs	r2, #0
10009ba2:	4b08      	ldr	r3, [pc, #32]	; (10009bc4 <sms_ble_notification_confirmed_fn+0x2c>)
10009ba4:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ba6:	3222      	adds	r2, #34	; 0x22
10009ba8:	4b07      	ldr	r3, [pc, #28]	; (10009bc8 <sms_ble_notification_confirmed_fn+0x30>)
10009baa:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009bac:	4b07      	ldr	r3, [pc, #28]	; (10009bcc <sms_ble_notification_confirmed_fn+0x34>)
10009bae:	781b      	ldrb	r3, [r3, #0]
10009bb0:	2b00      	cmp	r3, #0
10009bb2:	d102      	bne.n	10009bba <sms_ble_notification_confirmed_fn+0x22>
        ulp_ready = true;
10009bb4:	3a21      	subs	r2, #33	; 0x21
10009bb6:	4b06      	ldr	r3, [pc, #24]	; (10009bd0 <sms_ble_notification_confirmed_fn+0x38>)
10009bb8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009bba:	2000      	movs	r0, #0
10009bbc:	bd10      	pop	{r4, pc}
10009bbe:	46c0      	nop			; (mov r8, r8)
10009bc0:	1000b281 	.word	0x1000b281
10009bc4:	10019af9 	.word	0x10019af9
10009bc8:	10019af8 	.word	0x10019af8
10009bcc:	1001994c 	.word	0x1001994c
10009bd0:	100199e1 	.word	0x100199e1

10009bd4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009bd4:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009bd6:	2001      	movs	r0, #1
10009bd8:	4b08      	ldr	r3, [pc, #32]	; (10009bfc <sms_ble_indication_confirmed_fn+0x28>)
10009bda:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009bdc:	2200      	movs	r2, #0
10009bde:	4b08      	ldr	r3, [pc, #32]	; (10009c00 <sms_ble_indication_confirmed_fn+0x2c>)
10009be0:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009be2:	3222      	adds	r2, #34	; 0x22
10009be4:	4b07      	ldr	r3, [pc, #28]	; (10009c04 <sms_ble_indication_confirmed_fn+0x30>)
10009be6:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009be8:	4b07      	ldr	r3, [pc, #28]	; (10009c08 <sms_ble_indication_confirmed_fn+0x34>)
10009bea:	781b      	ldrb	r3, [r3, #0]
10009bec:	2b00      	cmp	r3, #0
10009bee:	d102      	bne.n	10009bf6 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009bf0:	3a21      	subs	r2, #33	; 0x21
10009bf2:	4b06      	ldr	r3, [pc, #24]	; (10009c0c <sms_ble_indication_confirmed_fn+0x38>)
10009bf4:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009bf6:	2000      	movs	r0, #0
10009bf8:	bd10      	pop	{r4, pc}
10009bfa:	46c0      	nop			; (mov r8, r8)
10009bfc:	1000b281 	.word	0x1000b281
10009c00:	10019af9 	.word	0x10019af9
10009c04:	10019af8 	.word	0x10019af8
10009c08:	1001994c 	.word	0x1001994c
10009c0c:	100199e1 	.word	0x100199e1

10009c10 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009c10:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009c12:	2202      	movs	r2, #2
10009c14:	4b02      	ldr	r3, [pc, #8]	; (10009c20 <sms_ble_startup+0x10>)
10009c16:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009c18:	2016      	movs	r0, #22
10009c1a:	4b02      	ldr	r3, [pc, #8]	; (10009c24 <sms_ble_startup+0x14>)
10009c1c:	4798      	blx	r3
}
10009c1e:	bd10      	pop	{r4, pc}
10009c20:	10019af9 	.word	0x10019af9
10009c24:	1000aadd 	.word	0x1000aadd

10009c28 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009c28:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009c2a:	482c      	ldr	r0, [pc, #176]	; (10009cdc <sms_ble_power_down+0xb4>)
10009c2c:	4b2c      	ldr	r3, [pc, #176]	; (10009ce0 <sms_ble_power_down+0xb8>)
10009c2e:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009c30:	4b2c      	ldr	r3, [pc, #176]	; (10009ce4 <sms_ble_power_down+0xbc>)
10009c32:	781b      	ldrb	r3, [r3, #0]
10009c34:	2b00      	cmp	r3, #0
10009c36:	d105      	bne.n	10009c44 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009c38:	2201      	movs	r2, #1
10009c3a:	4b2b      	ldr	r3, [pc, #172]	; (10009ce8 <sms_ble_power_down+0xc0>)
10009c3c:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009c3e:	4b2b      	ldr	r3, [pc, #172]	; (10009cec <sms_ble_power_down+0xc4>)
10009c40:	4798      	blx	r3
10009c42:	e049      	b.n	10009cd8 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009c44:	4b27      	ldr	r3, [pc, #156]	; (10009ce4 <sms_ble_power_down+0xbc>)
10009c46:	781b      	ldrb	r3, [r3, #0]
10009c48:	b2db      	uxtb	r3, r3
10009c4a:	2b21      	cmp	r3, #33	; 0x21
10009c4c:	d030      	beq.n	10009cb0 <sms_ble_power_down+0x88>
10009c4e:	d802      	bhi.n	10009c56 <sms_ble_power_down+0x2e>
10009c50:	2b20      	cmp	r3, #32
10009c52:	d005      	beq.n	10009c60 <sms_ble_power_down+0x38>
10009c54:	e037      	b.n	10009cc6 <sms_ble_power_down+0x9e>
10009c56:	2b22      	cmp	r3, #34	; 0x22
10009c58:	d017      	beq.n	10009c8a <sms_ble_power_down+0x62>
10009c5a:	2b23      	cmp	r3, #35	; 0x23
10009c5c:	d01b      	beq.n	10009c96 <sms_ble_power_down+0x6e>
10009c5e:	e032      	b.n	10009cc6 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009c60:	4823      	ldr	r0, [pc, #140]	; (10009cf0 <sms_ble_power_down+0xc8>)
10009c62:	4b24      	ldr	r3, [pc, #144]	; (10009cf4 <sms_ble_power_down+0xcc>)
10009c64:	4798      	blx	r3
10009c66:	4824      	ldr	r0, [pc, #144]	; (10009cf8 <sms_ble_power_down+0xd0>)
10009c68:	4b24      	ldr	r3, [pc, #144]	; (10009cfc <sms_ble_power_down+0xd4>)
10009c6a:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009c6c:	4b24      	ldr	r3, [pc, #144]	; (10009d00 <sms_ble_power_down+0xd8>)
10009c6e:	4798      	blx	r3
10009c70:	2800      	cmp	r0, #0
10009c72:	d003      	beq.n	10009c7c <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009c74:	4823      	ldr	r0, [pc, #140]	; (10009d04 <sms_ble_power_down+0xdc>)
10009c76:	4b21      	ldr	r3, [pc, #132]	; (10009cfc <sms_ble_power_down+0xd4>)
10009c78:	4798      	blx	r3
10009c7a:	e024      	b.n	10009cc6 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009c7c:	4822      	ldr	r0, [pc, #136]	; (10009d08 <sms_ble_power_down+0xe0>)
10009c7e:	4b1f      	ldr	r3, [pc, #124]	; (10009cfc <sms_ble_power_down+0xd4>)
10009c80:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009c82:	2211      	movs	r2, #17
10009c84:	4b17      	ldr	r3, [pc, #92]	; (10009ce4 <sms_ble_power_down+0xbc>)
10009c86:	701a      	strb	r2, [r3, #0]
10009c88:	e01d      	b.n	10009cc6 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009c8a:	4819      	ldr	r0, [pc, #100]	; (10009cf0 <sms_ble_power_down+0xc8>)
10009c8c:	4b19      	ldr	r3, [pc, #100]	; (10009cf4 <sms_ble_power_down+0xcc>)
10009c8e:	4798      	blx	r3
10009c90:	481e      	ldr	r0, [pc, #120]	; (10009d0c <sms_ble_power_down+0xe4>)
10009c92:	4b1a      	ldr	r3, [pc, #104]	; (10009cfc <sms_ble_power_down+0xd4>)
10009c94:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009c96:	4816      	ldr	r0, [pc, #88]	; (10009cf0 <sms_ble_power_down+0xc8>)
10009c98:	4b16      	ldr	r3, [pc, #88]	; (10009cf4 <sms_ble_power_down+0xcc>)
10009c9a:	4798      	blx	r3
10009c9c:	481c      	ldr	r0, [pc, #112]	; (10009d10 <sms_ble_power_down+0xe8>)
10009c9e:	4b17      	ldr	r3, [pc, #92]	; (10009cfc <sms_ble_power_down+0xd4>)
10009ca0:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009ca2:	2100      	movs	r1, #0
10009ca4:	2328      	movs	r3, #40	; 0x28
10009ca6:	4a1b      	ldr	r2, [pc, #108]	; (10009d14 <sms_ble_power_down+0xec>)
10009ca8:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009caa:	2000      	movs	r0, #0
10009cac:	4b1a      	ldr	r3, [pc, #104]	; (10009d18 <sms_ble_power_down+0xf0>)
10009cae:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009cb0:	480f      	ldr	r0, [pc, #60]	; (10009cf0 <sms_ble_power_down+0xc8>)
10009cb2:	4b10      	ldr	r3, [pc, #64]	; (10009cf4 <sms_ble_power_down+0xcc>)
10009cb4:	4798      	blx	r3
10009cb6:	4819      	ldr	r0, [pc, #100]	; (10009d1c <sms_ble_power_down+0xf4>)
10009cb8:	4b10      	ldr	r3, [pc, #64]	; (10009cfc <sms_ble_power_down+0xd4>)
10009cba:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009cbc:	4b18      	ldr	r3, [pc, #96]	; (10009d20 <sms_ble_power_down+0xf8>)
10009cbe:	8818      	ldrh	r0, [r3, #0]
10009cc0:	2113      	movs	r1, #19
10009cc2:	4b18      	ldr	r3, [pc, #96]	; (10009d24 <sms_ble_power_down+0xfc>)
10009cc4:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009cc6:	2211      	movs	r2, #17
10009cc8:	4b06      	ldr	r3, [pc, #24]	; (10009ce4 <sms_ble_power_down+0xbc>)
10009cca:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009ccc:	3a0e      	subs	r2, #14
10009cce:	4b16      	ldr	r3, [pc, #88]	; (10009d28 <sms_ble_power_down+0x100>)
10009cd0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009cd2:	2016      	movs	r0, #22
10009cd4:	4b15      	ldr	r3, [pc, #84]	; (10009d2c <sms_ble_power_down+0x104>)
10009cd6:	4798      	blx	r3
    }
}
10009cd8:	bd10      	pop	{r4, pc}
10009cda:	46c0      	nop			; (mov r8, r8)
10009cdc:	10016114 	.word	0x10016114
10009ce0:	1000a6a9 	.word	0x1000a6a9
10009ce4:	10019af8 	.word	0x10019af8
10009ce8:	100199e1 	.word	0x100199e1
10009cec:	1000f269 	.word	0x1000f269
10009cf0:	10015e2c 	.word	0x10015e2c
10009cf4:	10014c6d 	.word	0x10014c6d
10009cf8:	1001612c 	.word	0x1001612c
10009cfc:	10014b4d 	.word	0x10014b4d
10009d00:	10010585 	.word	0x10010585
10009d04:	10016180 	.word	0x10016180
10009d08:	1001618c 	.word	0x1001618c
10009d0c:	10016194 	.word	0x10016194
10009d10:	100161ec 	.word	0x100161ec
10009d14:	10019a5c 	.word	0x10019a5c
10009d18:	1000af75 	.word	0x1000af75
10009d1c:	10016218 	.word	0x10016218
10009d20:	100199e2 	.word	0x100199e2
10009d24:	100105b1 	.word	0x100105b1
10009d28:	10019af9 	.word	0x10019af9
10009d2c:	1000aadd 	.word	0x1000aadd

10009d30 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009d30:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009d32:	2211      	movs	r2, #17
10009d34:	4b05      	ldr	r3, [pc, #20]	; (10009d4c <sms_ble_adv_report_fn+0x1c>)
10009d36:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009d38:	4805      	ldr	r0, [pc, #20]	; (10009d50 <sms_ble_adv_report_fn+0x20>)
10009d3a:	4b06      	ldr	r3, [pc, #24]	; (10009d54 <sms_ble_adv_report_fn+0x24>)
10009d3c:	4798      	blx	r3
10009d3e:	4806      	ldr	r0, [pc, #24]	; (10009d58 <sms_ble_adv_report_fn+0x28>)
10009d40:	4b06      	ldr	r3, [pc, #24]	; (10009d5c <sms_ble_adv_report_fn+0x2c>)
10009d42:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009d44:	4b06      	ldr	r3, [pc, #24]	; (10009d60 <sms_ble_adv_report_fn+0x30>)
10009d46:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009d48:	2000      	movs	r0, #0
10009d4a:	bd10      	pop	{r4, pc}
10009d4c:	10019af8 	.word	0x10019af8
10009d50:	10015e2c 	.word	0x10015e2c
10009d54:	10014c6d 	.word	0x10014c6d
10009d58:	10016250 	.word	0x10016250
10009d5c:	10014b4d 	.word	0x10014b4d
10009d60:	10009c29 	.word	0x10009c29

10009d64 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009d64:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009d66:	4b0a      	ldr	r3, [pc, #40]	; (10009d90 <sms_ble_connected_fn+0x2c>)
10009d68:	781b      	ldrb	r3, [r3, #0]
10009d6a:	2b20      	cmp	r3, #32
10009d6c:	d10c      	bne.n	10009d88 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009d6e:	8902      	ldrh	r2, [r0, #8]
10009d70:	4b08      	ldr	r3, [pc, #32]	; (10009d94 <sms_ble_connected_fn+0x30>)
10009d72:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009d74:	2221      	movs	r2, #33	; 0x21
10009d76:	4b06      	ldr	r3, [pc, #24]	; (10009d90 <sms_ble_connected_fn+0x2c>)
10009d78:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009d7a:	4807      	ldr	r0, [pc, #28]	; (10009d98 <sms_ble_connected_fn+0x34>)
10009d7c:	4b07      	ldr	r3, [pc, #28]	; (10009d9c <sms_ble_connected_fn+0x38>)
10009d7e:	4798      	blx	r3
10009d80:	4807      	ldr	r0, [pc, #28]	; (10009da0 <sms_ble_connected_fn+0x3c>)
10009d82:	4b08      	ldr	r3, [pc, #32]	; (10009da4 <sms_ble_connected_fn+0x40>)
10009d84:	4798      	blx	r3
10009d86:	e001      	b.n	10009d8c <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009d88:	4b07      	ldr	r3, [pc, #28]	; (10009da8 <sms_ble_connected_fn+0x44>)
10009d8a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009d8c:	2000      	movs	r0, #0
10009d8e:	bd10      	pop	{r4, pc}
10009d90:	10019af8 	.word	0x10019af8
10009d94:	10019aee 	.word	0x10019aee
10009d98:	10015e2c 	.word	0x10015e2c
10009d9c:	10014c6d 	.word	0x10014c6d
10009da0:	10016284 	.word	0x10016284
10009da4:	10014b4d 	.word	0x10014b4d
10009da8:	10009c29 	.word	0x10009c29

10009dac <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009dac:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009dae:	4b09      	ldr	r3, [pc, #36]	; (10009dd4 <sms_ble_paired_fn+0x28>)
10009db0:	781b      	ldrb	r3, [r3, #0]
10009db2:	2b21      	cmp	r3, #33	; 0x21
10009db4:	d10a      	bne.n	10009dcc <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
10009db6:	2222      	movs	r2, #34	; 0x22
10009db8:	4b06      	ldr	r3, [pc, #24]	; (10009dd4 <sms_ble_paired_fn+0x28>)
10009dba:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009dbc:	4806      	ldr	r0, [pc, #24]	; (10009dd8 <sms_ble_paired_fn+0x2c>)
10009dbe:	4b07      	ldr	r3, [pc, #28]	; (10009ddc <sms_ble_paired_fn+0x30>)
10009dc0:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009dc2:	2101      	movs	r1, #1
10009dc4:	2001      	movs	r0, #1
10009dc6:	4b06      	ldr	r3, [pc, #24]	; (10009de0 <sms_ble_paired_fn+0x34>)
10009dc8:	4798      	blx	r3
10009dca:	e001      	b.n	10009dd0 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009dcc:	4b05      	ldr	r3, [pc, #20]	; (10009de4 <sms_ble_paired_fn+0x38>)
10009dce:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009dd0:	2000      	movs	r0, #0
10009dd2:	bd10      	pop	{r4, pc}
10009dd4:	10019af8 	.word	0x10019af8
10009dd8:	100162b4 	.word	0x100162b4
10009ddc:	1000a6a9 	.word	0x1000a6a9
10009de0:	1000b001 	.word	0x1000b001
10009de4:	10009c29 	.word	0x10009c29

10009de8 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009de8:	b510      	push	{r4, lr}
10009dea:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009dec:	2220      	movs	r2, #32
10009dee:	4b17      	ldr	r3, [pc, #92]	; (10009e4c <sms_ble_advertise+0x64>)
10009df0:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009df2:	4b17      	ldr	r3, [pc, #92]	; (10009e50 <sms_ble_advertise+0x68>)
10009df4:	4798      	blx	r3
10009df6:	1e04      	subs	r4, r0, #0
10009df8:	d007      	beq.n	10009e0a <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009dfa:	4816      	ldr	r0, [pc, #88]	; (10009e54 <sms_ble_advertise+0x6c>)
10009dfc:	4b16      	ldr	r3, [pc, #88]	; (10009e58 <sms_ble_advertise+0x70>)
10009dfe:	4798      	blx	r3
10009e00:	4816      	ldr	r0, [pc, #88]	; (10009e5c <sms_ble_advertise+0x74>)
10009e02:	4b17      	ldr	r3, [pc, #92]	; (10009e60 <sms_ble_advertise+0x78>)
10009e04:	4798      	blx	r3
        return status;
10009e06:	0020      	movs	r0, r4
10009e08:	e01e      	b.n	10009e48 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009e0a:	2300      	movs	r3, #0
10009e0c:	9302      	str	r3, [sp, #8]
10009e0e:	4b15      	ldr	r3, [pc, #84]	; (10009e64 <sms_ble_advertise+0x7c>)
10009e10:	9301      	str	r3, [sp, #4]
10009e12:	23c8      	movs	r3, #200	; 0xc8
10009e14:	00db      	lsls	r3, r3, #3
10009e16:	9300      	str	r3, [sp, #0]
10009e18:	2300      	movs	r3, #0
10009e1a:	2200      	movs	r2, #0
10009e1c:	2101      	movs	r1, #1
10009e1e:	2000      	movs	r0, #0
10009e20:	4c11      	ldr	r4, [pc, #68]	; (10009e68 <sms_ble_advertise+0x80>)
10009e22:	47a0      	blx	r4
10009e24:	1e04      	subs	r4, r0, #0
10009e26:	d107      	bne.n	10009e38 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009e28:	480a      	ldr	r0, [pc, #40]	; (10009e54 <sms_ble_advertise+0x6c>)
10009e2a:	4b0b      	ldr	r3, [pc, #44]	; (10009e58 <sms_ble_advertise+0x70>)
10009e2c:	4798      	blx	r3
10009e2e:	480f      	ldr	r0, [pc, #60]	; (10009e6c <sms_ble_advertise+0x84>)
10009e30:	4b0b      	ldr	r3, [pc, #44]	; (10009e60 <sms_ble_advertise+0x78>)
10009e32:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10009e34:	2000      	movs	r0, #0
10009e36:	e007      	b.n	10009e48 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009e38:	4806      	ldr	r0, [pc, #24]	; (10009e54 <sms_ble_advertise+0x6c>)
10009e3a:	4b07      	ldr	r3, [pc, #28]	; (10009e58 <sms_ble_advertise+0x70>)
10009e3c:	4798      	blx	r3
10009e3e:	0021      	movs	r1, r4
10009e40:	480b      	ldr	r0, [pc, #44]	; (10009e70 <sms_ble_advertise+0x88>)
10009e42:	4b07      	ldr	r3, [pc, #28]	; (10009e60 <sms_ble_advertise+0x78>)
10009e44:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
10009e46:	20e2      	movs	r0, #226	; 0xe2
}
10009e48:	b004      	add	sp, #16
10009e4a:	bd10      	pop	{r4, pc}
10009e4c:	10019af8 	.word	0x10019af8
10009e50:	1000e8b1 	.word	0x1000e8b1
10009e54:	10015e2c 	.word	0x10015e2c
10009e58:	10014c6d 	.word	0x10014c6d
10009e5c:	100162c8 	.word	0x100162c8
10009e60:	10014b4d 	.word	0x10014b4d
10009e64:	0000028f 	.word	0x0000028f
10009e68:	10010449 	.word	0x10010449
10009e6c:	100162fc 	.word	0x100162fc
10009e70:	1001632c 	.word	0x1001632c

10009e74 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009e74:	b530      	push	{r4, r5, lr}
10009e76:	b083      	sub	sp, #12
10009e78:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
10009e7a:	4b1c      	ldr	r3, [pc, #112]	; (10009eec <sms_ble_disconnected_fn+0x78>)
10009e7c:	781b      	ldrb	r3, [r3, #0]
10009e7e:	2b22      	cmp	r3, #34	; 0x22
10009e80:	d10a      	bne.n	10009e98 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
10009e82:	2100      	movs	r1, #0
10009e84:	3306      	adds	r3, #6
10009e86:	4a1a      	ldr	r2, [pc, #104]	; (10009ef0 <sms_ble_disconnected_fn+0x7c>)
10009e88:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10009e8a:	2000      	movs	r0, #0
10009e8c:	4b19      	ldr	r3, [pc, #100]	; (10009ef4 <sms_ble_disconnected_fn+0x80>)
10009e8e:	4798      	blx	r3
        sms_sensors_switch(false, false);
10009e90:	2100      	movs	r1, #0
10009e92:	2000      	movs	r0, #0
10009e94:	4b18      	ldr	r3, [pc, #96]	; (10009ef8 <sms_ble_disconnected_fn+0x84>)
10009e96:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
10009e98:	4c14      	ldr	r4, [pc, #80]	; (10009eec <sms_ble_disconnected_fn+0x78>)
10009e9a:	2311      	movs	r3, #17
10009e9c:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e9e:	4817      	ldr	r0, [pc, #92]	; (10009efc <sms_ble_disconnected_fn+0x88>)
10009ea0:	4b17      	ldr	r3, [pc, #92]	; (10009f00 <sms_ble_disconnected_fn+0x8c>)
10009ea2:	4798      	blx	r3
10009ea4:	7822      	ldrb	r2, [r4, #0]
10009ea6:	b2d2      	uxtb	r2, r2
10009ea8:	4b16      	ldr	r3, [pc, #88]	; (10009f04 <sms_ble_disconnected_fn+0x90>)
10009eaa:	781b      	ldrb	r3, [r3, #0]
10009eac:	b2db      	uxtb	r3, r3
10009eae:	4916      	ldr	r1, [pc, #88]	; (10009f08 <sms_ble_disconnected_fn+0x94>)
10009eb0:	7808      	ldrb	r0, [r1, #0]
10009eb2:	4916      	ldr	r1, [pc, #88]	; (10009f0c <sms_ble_disconnected_fn+0x98>)
10009eb4:	7849      	ldrb	r1, [r1, #1]
10009eb6:	9000      	str	r0, [sp, #0]
10009eb8:	4815      	ldr	r0, [pc, #84]	; (10009f10 <sms_ble_disconnected_fn+0x9c>)
10009eba:	4c16      	ldr	r4, [pc, #88]	; (10009f14 <sms_ble_disconnected_fn+0xa0>)
10009ebc:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009ebe:	78ab      	ldrb	r3, [r5, #2]
10009ec0:	2b1a      	cmp	r3, #26
10009ec2:	d00b      	beq.n	10009edc <sms_ble_disconnected_fn+0x68>
10009ec4:	b2da      	uxtb	r2, r3
10009ec6:	2a1a      	cmp	r2, #26
10009ec8:	d804      	bhi.n	10009ed4 <sms_ble_disconnected_fn+0x60>
10009eca:	2b05      	cmp	r3, #5
10009ecc:	d006      	beq.n	10009edc <sms_ble_disconnected_fn+0x68>
10009ece:	2b08      	cmp	r3, #8
10009ed0:	d107      	bne.n	10009ee2 <sms_ble_disconnected_fn+0x6e>
10009ed2:	e003      	b.n	10009edc <sms_ble_disconnected_fn+0x68>
10009ed4:	2b29      	cmp	r3, #41	; 0x29
10009ed6:	d001      	beq.n	10009edc <sms_ble_disconnected_fn+0x68>
10009ed8:	2b3b      	cmp	r3, #59	; 0x3b
10009eda:	d102      	bne.n	10009ee2 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009edc:	4b0e      	ldr	r3, [pc, #56]	; (10009f18 <sms_ble_disconnected_fn+0xa4>)
10009ede:	4798      	blx	r3
        break;
10009ee0:	e001      	b.n	10009ee6 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009ee2:	4b0e      	ldr	r3, [pc, #56]	; (10009f1c <sms_ble_disconnected_fn+0xa8>)
10009ee4:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009ee6:	2000      	movs	r0, #0
10009ee8:	b003      	add	sp, #12
10009eea:	bd30      	pop	{r4, r5, pc}
10009eec:	10019af8 	.word	0x10019af8
10009ef0:	10019a5c 	.word	0x10019a5c
10009ef4:	1000af75 	.word	0x1000af75
10009ef8:	1000b001 	.word	0x1000b001
10009efc:	10015e2c 	.word	0x10015e2c
10009f00:	10014c6d 	.word	0x10014c6d
10009f04:	1001994c 	.word	0x1001994c
10009f08:	10019af9 	.word	0x10019af9
10009f0c:	100199e8 	.word	0x100199e8
10009f10:	10016370 	.word	0x10016370
10009f14:	10014b4d 	.word	0x10014b4d
10009f18:	10009de9 	.word	0x10009de9
10009f1c:	10009c29 	.word	0x10009c29

10009f20 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009f20:	b570      	push	{r4, r5, r6, lr}
10009f22:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
10009f24:	2223      	movs	r2, #35	; 0x23
10009f26:	4b5e      	ldr	r3, [pc, #376]	; (1000a0a0 <sms_ble_send_characteristic+0x180>)
10009f28:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
10009f2a:	4a5e      	ldr	r2, [pc, #376]	; (1000a0a4 <sms_ble_send_characteristic+0x184>)
10009f2c:	8813      	ldrh	r3, [r2, #0]
10009f2e:	3301      	adds	r3, #1
10009f30:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
10009f32:	2801      	cmp	r0, #1
10009f34:	d015      	beq.n	10009f62 <sms_ble_send_characteristic+0x42>
10009f36:	2800      	cmp	r0, #0
10009f38:	d004      	beq.n	10009f44 <sms_ble_send_characteristic+0x24>
10009f3a:	2802      	cmp	r0, #2
10009f3c:	d022      	beq.n	10009f84 <sms_ble_send_characteristic+0x64>
10009f3e:	2803      	cmp	r0, #3
10009f40:	d036      	beq.n	10009fb0 <sms_ble_send_characteristic+0x90>
10009f42:	e08e      	b.n	1000a062 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
10009f44:	4b58      	ldr	r3, [pc, #352]	; (1000a0a8 <sms_ble_send_characteristic+0x188>)
10009f46:	78da      	ldrb	r2, [r3, #3]
10009f48:	2300      	movs	r3, #0
10009f4a:	2a7e      	cmp	r2, #126	; 0x7e
10009f4c:	d801      	bhi.n	10009f52 <sms_ble_send_characteristic+0x32>
10009f4e:	3201      	adds	r2, #1
10009f50:	b2d3      	uxtb	r3, r2
10009f52:	4a55      	ldr	r2, [pc, #340]	; (1000a0a8 <sms_ble_send_characteristic+0x188>)
10009f54:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
10009f56:	aa01      	add	r2, sp, #4
10009f58:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009f5a:	4b54      	ldr	r3, [pc, #336]	; (1000a0ac <sms_ble_send_characteristic+0x18c>)
10009f5c:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
10009f5e:	2201      	movs	r2, #1
        break;
10009f60:	e081      	b.n	1000a066 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
10009f62:	4b53      	ldr	r3, [pc, #332]	; (1000a0b0 <sms_ble_send_characteristic+0x190>)
10009f64:	78db      	ldrb	r3, [r3, #3]
10009f66:	2bff      	cmp	r3, #255	; 0xff
10009f68:	d002      	beq.n	10009f70 <sms_ble_send_characteristic+0x50>
10009f6a:	3301      	adds	r3, #1
10009f6c:	b2db      	uxtb	r3, r3
10009f6e:	e000      	b.n	10009f72 <sms_ble_send_characteristic+0x52>
10009f70:	2300      	movs	r3, #0
10009f72:	4a4f      	ldr	r2, [pc, #316]	; (1000a0b0 <sms_ble_send_characteristic+0x190>)
10009f74:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
10009f76:	3b80      	subs	r3, #128	; 0x80
10009f78:	aa01      	add	r2, sp, #4
10009f7a:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009f7c:	4b4b      	ldr	r3, [pc, #300]	; (1000a0ac <sms_ble_send_characteristic+0x18c>)
10009f7e:	8b1d      	ldrh	r5, [r3, #24]
        length = BLE_CHAR_SIZE_BUTTON;
10009f80:	2201      	movs	r2, #1
        break;
10009f82:	e070      	b.n	1000a066 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.hal.temperature & 0xff);
10009f84:	494b      	ldr	r1, [pc, #300]	; (1000a0b4 <sms_ble_send_characteristic+0x194>)
10009f86:	6a0a      	ldr	r2, [r1, #32]
10009f88:	ab01      	add	r3, sp, #4
10009f8a:	701a      	strb	r2, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10009f8c:	1210      	asrs	r0, r2, #8
10009f8e:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10009f90:	1410      	asrs	r0, r2, #16
10009f92:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature >> 24) & 0xff);
10009f94:	1612      	asrs	r2, r2, #24
10009f96:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)(pressure_device.hal.pressure & 0xff);
10009f98:	69ca      	ldr	r2, [r1, #28]
10009f9a:	711a      	strb	r2, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10009f9c:	1210      	asrs	r0, r2, #8
10009f9e:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
10009fa0:	1410      	asrs	r0, r2, #16
10009fa2:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10009fa4:	1612      	asrs	r2, r2, #24
10009fa6:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10009fa8:	2340      	movs	r3, #64	; 0x40
10009faa:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
10009fac:	2208      	movs	r2, #8
        break;
10009fae:	e05a      	b.n	1000a066 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
10009fb0:	4a41      	ldr	r2, [pc, #260]	; (1000a0b8 <sms_ble_send_characteristic+0x198>)
10009fb2:	2312      	movs	r3, #18
10009fb4:	5ed1      	ldrsh	r1, [r2, r3]
10009fb6:	ab01      	add	r3, sp, #4
10009fb8:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
10009fba:	1209      	asrs	r1, r1, #8
10009fbc:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
10009fbe:	2014      	movs	r0, #20
10009fc0:	5e11      	ldrsh	r1, [r2, r0]
10009fc2:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
10009fc4:	1209      	asrs	r1, r1, #8
10009fc6:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
10009fc8:	2016      	movs	r0, #22
10009fca:	5e11      	ldrsh	r1, [r2, r0]
10009fcc:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
10009fce:	1209      	asrs	r1, r1, #8
10009fd0:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
10009fd2:	200c      	movs	r0, #12
10009fd4:	5e11      	ldrsh	r1, [r2, r0]
10009fd6:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
10009fd8:	1209      	asrs	r1, r1, #8
10009fda:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
10009fdc:	200e      	movs	r0, #14
10009fde:	5e11      	ldrsh	r1, [r2, r0]
10009fe0:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
10009fe2:	1209      	asrs	r1, r1, #8
10009fe4:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
10009fe6:	2010      	movs	r0, #16
10009fe8:	5e11      	ldrsh	r1, [r2, r0]
10009fea:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
10009fec:	1209      	asrs	r1, r1, #8
10009fee:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
10009ff0:	2348      	movs	r3, #72	; 0x48
10009ff2:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
10009ff4:	3b1a      	subs	r3, #26
10009ff6:	5cd3      	ldrb	r3, [r2, r3]
10009ff8:	2b00      	cmp	r3, #0
10009ffa:	d014      	beq.n	1000a026 <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
10009ffc:	2318      	movs	r3, #24
10009ffe:	5ed1      	ldrsh	r1, [r2, r3]
1000a000:	ab01      	add	r3, sp, #4
1000a002:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
1000a004:	1209      	asrs	r1, r1, #8
1000a006:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
1000a008:	201a      	movs	r0, #26
1000a00a:	5e11      	ldrsh	r1, [r2, r0]
1000a00c:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
1000a00e:	1209      	asrs	r1, r1, #8
1000a010:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
1000a012:	201c      	movs	r0, #28
1000a014:	5e11      	ldrsh	r1, [r2, r0]
1000a016:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
1000a018:	1209      	asrs	r1, r1, #8
1000a01a:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
1000a01c:	2100      	movs	r1, #0
1000a01e:	232e      	movs	r3, #46	; 0x2e
1000a020:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
1000a022:	2212      	movs	r2, #18
1000a024:	e008      	b.n	1000a038 <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
1000a026:	ab01      	add	r3, sp, #4
1000a028:	2200      	movs	r2, #0
1000a02a:	731a      	strb	r2, [r3, #12]
1000a02c:	735a      	strb	r2, [r3, #13]
1000a02e:	739a      	strb	r2, [r3, #14]
1000a030:	73da      	strb	r2, [r3, #15]
1000a032:	741a      	strb	r2, [r3, #16]
1000a034:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a036:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a038:	232f      	movs	r3, #47	; 0x2f
1000a03a:	491f      	ldr	r1, [pc, #124]	; (1000a0b8 <sms_ble_send_characteristic+0x198>)
1000a03c:	5ccb      	ldrb	r3, [r1, r3]
1000a03e:	2b00      	cmp	r3, #0
1000a040:	d00a      	beq.n	1000a058 <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a042:	000a      	movs	r2, r1
1000a044:	6a0b      	ldr	r3, [r1, #32]
1000a046:	a901      	add	r1, sp, #4
1000a048:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a04a:	121b      	asrs	r3, r3, #8
1000a04c:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a04e:	2100      	movs	r1, #0
1000a050:	232f      	movs	r3, #47	; 0x2f
1000a052:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a054:	2214      	movs	r2, #20
1000a056:	e006      	b.n	1000a066 <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a058:	ab01      	add	r3, sp, #4
1000a05a:	2100      	movs	r1, #0
1000a05c:	7499      	strb	r1, [r3, #18]
1000a05e:	74d9      	strb	r1, [r3, #19]
1000a060:	e001      	b.n	1000a066 <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a062:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a064:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a066:	b292      	uxth	r2, r2
1000a068:	a901      	add	r1, sp, #4
1000a06a:	0028      	movs	r0, r5
1000a06c:	4b13      	ldr	r3, [pc, #76]	; (1000a0bc <sms_ble_send_characteristic+0x19c>)
1000a06e:	4798      	blx	r3
1000a070:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a072:	d111      	bne.n	1000a098 <sms_ble_send_characteristic+0x178>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a074:	4b0b      	ldr	r3, [pc, #44]	; (1000a0a4 <sms_ble_send_characteristic+0x184>)
1000a076:	8819      	ldrh	r1, [r3, #0]
1000a078:	4811      	ldr	r0, [pc, #68]	; (1000a0c0 <sms_ble_send_characteristic+0x1a0>)
1000a07a:	4b12      	ldr	r3, [pc, #72]	; (1000a0c4 <sms_ble_send_characteristic+0x1a4>)
1000a07c:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a07e:	2101      	movs	r1, #1
1000a080:	2002      	movs	r0, #2
1000a082:	4e11      	ldr	r6, [pc, #68]	; (1000a0c8 <sms_ble_send_characteristic+0x1a8>)
1000a084:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a086:	4b11      	ldr	r3, [pc, #68]	; (1000a0cc <sms_ble_send_characteristic+0x1ac>)
1000a088:	8818      	ldrh	r0, [r3, #0]
1000a08a:	0029      	movs	r1, r5
1000a08c:	4b10      	ldr	r3, [pc, #64]	; (1000a0d0 <sms_ble_send_characteristic+0x1b0>)
1000a08e:	4798      	blx	r3
1000a090:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a092:	2100      	movs	r1, #0
1000a094:	2002      	movs	r0, #2
1000a096:	47b0      	blx	r6
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a098:	0020      	movs	r0, r4
1000a09a:	b006      	add	sp, #24
1000a09c:	bd70      	pop	{r4, r5, r6, pc}
1000a09e:	46c0      	nop			; (mov r8, r8)
1000a0a0:	10019af8 	.word	0x10019af8
1000a0a4:	10019b14 	.word	0x10019b14
1000a0a8:	10019948 	.word	0x10019948
1000a0ac:	100199e8 	.word	0x100199e8
1000a0b0:	100199e4 	.word	0x100199e4
1000a0b4:	10019a5c 	.word	0x10019a5c
1000a0b8:	10019950 	.word	0x10019950
1000a0bc:	10010d2d 	.word	0x10010d2d
1000a0c0:	100163c4 	.word	0x100163c4
1000a0c4:	10014b4d 	.word	0x10014b4d
1000a0c8:	1000bf41 	.word	0x1000bf41
1000a0cc:	100199e2 	.word	0x100199e2
1000a0d0:	10010ecd 	.word	0x10010ecd

1000a0d4 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a0d4:	b510      	push	{r4, lr}
1000a0d6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a0d8:	0001      	movs	r1, r0
1000a0da:	3112      	adds	r1, #18
1000a0dc:	2301      	movs	r3, #1
1000a0de:	9301      	str	r3, [sp, #4]
1000a0e0:	0003      	movs	r3, r0
1000a0e2:	3314      	adds	r3, #20
1000a0e4:	9300      	str	r3, [sp, #0]
1000a0e6:	2300      	movs	r3, #0
1000a0e8:	2200      	movs	r2, #0
1000a0ea:	4c02      	ldr	r4, [pc, #8]	; (1000a0f4 <sms_ble_primary_service_define+0x20>)
1000a0ec:	47a0      	blx	r4
}
1000a0ee:	b002      	add	sp, #8
1000a0f0:	bd10      	pop	{r4, pc}
1000a0f2:	46c0      	nop			; (mov r8, r8)
1000a0f4:	10010d0d 	.word	0x10010d0d

1000a0f8 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0fa:	464f      	mov	r7, r9
1000a0fc:	4646      	mov	r6, r8
1000a0fe:	b4c0      	push	{r6, r7}
1000a100:	b083      	sub	sp, #12
1000a102:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a104:	2801      	cmp	r0, #1
1000a106:	d010      	beq.n	1000a12a <sms_ble_service_init+0x32>
1000a108:	2800      	cmp	r0, #0
1000a10a:	d002      	beq.n	1000a112 <sms_ble_service_init+0x1a>
1000a10c:	2802      	cmp	r0, #2
1000a10e:	d019      	beq.n	1000a144 <sms_ble_service_init+0x4c>
1000a110:	e025      	b.n	1000a15e <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a112:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a114:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a116:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a118:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a11a:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a11c:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a11e:	221c      	movs	r2, #28
1000a120:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a122:	3a1b      	subs	r2, #27
1000a124:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a126:	4691      	mov	r9, r2
1000a128:	e023      	b.n	1000a172 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a12a:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a12c:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a12e:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a130:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a132:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a134:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a136:	221c      	movs	r2, #28
1000a138:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a13a:	3a14      	subs	r2, #20
1000a13c:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a13e:	3a06      	subs	r2, #6
1000a140:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a142:	e016      	b.n	1000a172 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a144:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a146:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a148:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a14a:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a14c:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a14e:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a150:	221c      	movs	r2, #28
1000a152:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a154:	3a08      	subs	r2, #8
1000a156:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a158:	3a11      	subs	r2, #17
1000a15a:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a15c:	e009      	b.n	1000a172 <sms_ble_service_init+0x7a>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a15e:	2300      	movs	r3, #0
1000a160:	2400      	movs	r4, #0
1000a162:	2500      	movs	r5, #0
1000a164:	2600      	movs	r6, #0
1000a166:	2700      	movs	r7, #0
1000a168:	2000      	movs	r0, #0
1000a16a:	2200      	movs	r2, #0
1000a16c:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a16e:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a170:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a172:	464a      	mov	r2, r9
1000a174:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a176:	2202      	movs	r2, #2
1000a178:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a17a:	4642      	mov	r2, r8
1000a17c:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a17e:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a180:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a182:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a184:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a186:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a188:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a18a:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a18c:	2300      	movs	r3, #0
1000a18e:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a190:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a192:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a194:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a196:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a198:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a19a:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a19c:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a19e:	2412      	movs	r4, #18
1000a1a0:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a1a2:	4662      	mov	r2, ip
1000a1a4:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a1a6:	466a      	mov	r2, sp
1000a1a8:	8892      	ldrh	r2, [r2, #4]
1000a1aa:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a1ac:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a1ae:	2011      	movs	r0, #17
1000a1b0:	2234      	movs	r2, #52	; 0x34
1000a1b2:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a1b4:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a1b6:	2200      	movs	r2, #0
1000a1b8:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a1ba:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a1bc:	3033      	adds	r0, #51	; 0x33
1000a1be:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a1c0:	3001      	adds	r0, #1
1000a1c2:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a1c4:	3001      	adds	r0, #1
1000a1c6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a1c8:	2248      	movs	r2, #72	; 0x48
1000a1ca:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a1cc:	3202      	adds	r2, #2
1000a1ce:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a1d0:	3202      	adds	r2, #2
1000a1d2:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a1d4:	640b      	str	r3, [r1, #64]	; 0x40
1000a1d6:	b003      	add	sp, #12
1000a1d8:	bc0c      	pop	{r2, r3}
1000a1da:	4690      	mov	r8, r2
1000a1dc:	4699      	mov	r9, r3
1000a1de:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a1e0 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a1e0:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.int_on = true;
1000a1e2:	4b06      	ldr	r3, [pc, #24]	; (1000a1fc <sms_button_bt0_callback+0x1c>)
1000a1e4:	2201      	movs	r2, #1
1000a1e6:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN0;
1000a1e8:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1ea:	4b05      	ldr	r3, [pc, #20]	; (1000a200 <sms_button_bt0_callback+0x20>)
1000a1ec:	7858      	ldrb	r0, [r3, #1]
1000a1ee:	2300      	movs	r3, #0
1000a1f0:	2200      	movs	r2, #0
1000a1f2:	2102      	movs	r1, #2
1000a1f4:	4c03      	ldr	r4, [pc, #12]	; (1000a204 <sms_button_bt0_callback+0x24>)
1000a1f6:	47a0      	blx	r4
}
1000a1f8:	bd10      	pop	{r4, pc}
1000a1fa:	46c0      	nop			; (mov r8, r8)
1000a1fc:	10019ae0 	.word	0x10019ae0
1000a200:	10019948 	.word	0x10019948
1000a204:	1000ef9d 	.word	0x1000ef9d

1000a208 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a208:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.int_on = true;
1000a20a:	4b06      	ldr	r3, [pc, #24]	; (1000a224 <sms_button_bt1_callback+0x1c>)
1000a20c:	2201      	movs	r2, #1
1000a20e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_BTN1;
1000a210:	3201      	adds	r2, #1
1000a212:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a214:	4b04      	ldr	r3, [pc, #16]	; (1000a228 <sms_button_bt1_callback+0x20>)
1000a216:	7858      	ldrb	r0, [r3, #1]
1000a218:	2300      	movs	r3, #0
1000a21a:	2200      	movs	r2, #0
1000a21c:	2102      	movs	r1, #2
1000a21e:	4c03      	ldr	r4, [pc, #12]	; (1000a22c <sms_button_bt1_callback+0x24>)
1000a220:	47a0      	blx	r4
}
1000a222:	bd10      	pop	{r4, pc}
1000a224:	10019ae0 	.word	0x10019ae0
1000a228:	100199e4 	.word	0x100199e4
1000a22c:	1000ef9d 	.word	0x1000ef9d

1000a230 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a230:	b510      	push	{r4, lr}
1000a232:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a234:	ac01      	add	r4, sp, #4
1000a236:	0020      	movs	r0, r4
1000a238:	4b20      	ldr	r3, [pc, #128]	; (1000a2bc <sms_button_configure_gpio+0x8c>)
1000a23a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a23c:	2300      	movs	r3, #0
1000a23e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a240:	3302      	adds	r3, #2
1000a242:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a244:	3b01      	subs	r3, #1
1000a246:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a248:	4b1d      	ldr	r3, [pc, #116]	; (1000a2c0 <sms_button_configure_gpio+0x90>)
1000a24a:	7858      	ldrb	r0, [r3, #1]
1000a24c:	0021      	movs	r1, r4
1000a24e:	4b1d      	ldr	r3, [pc, #116]	; (1000a2c4 <sms_button_configure_gpio+0x94>)
1000a250:	4798      	blx	r3
1000a252:	2800      	cmp	r0, #0
1000a254:	d005      	beq.n	1000a262 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a256:	481c      	ldr	r0, [pc, #112]	; (1000a2c8 <sms_button_configure_gpio+0x98>)
1000a258:	4b1c      	ldr	r3, [pc, #112]	; (1000a2cc <sms_button_configure_gpio+0x9c>)
1000a25a:	4798      	blx	r3
1000a25c:	481c      	ldr	r0, [pc, #112]	; (1000a2d0 <sms_button_configure_gpio+0xa0>)
1000a25e:	4b1d      	ldr	r3, [pc, #116]	; (1000a2d4 <sms_button_configure_gpio+0xa4>)
1000a260:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a262:	ac01      	add	r4, sp, #4
1000a264:	0020      	movs	r0, r4
1000a266:	4b15      	ldr	r3, [pc, #84]	; (1000a2bc <sms_button_configure_gpio+0x8c>)
1000a268:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a26a:	2300      	movs	r3, #0
1000a26c:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a26e:	3302      	adds	r3, #2
1000a270:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a272:	3b01      	subs	r3, #1
1000a274:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a276:	4b18      	ldr	r3, [pc, #96]	; (1000a2d8 <sms_button_configure_gpio+0xa8>)
1000a278:	7858      	ldrb	r0, [r3, #1]
1000a27a:	0021      	movs	r1, r4
1000a27c:	4b11      	ldr	r3, [pc, #68]	; (1000a2c4 <sms_button_configure_gpio+0x94>)
1000a27e:	4798      	blx	r3
1000a280:	2800      	cmp	r0, #0
1000a282:	d005      	beq.n	1000a290 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a284:	4810      	ldr	r0, [pc, #64]	; (1000a2c8 <sms_button_configure_gpio+0x98>)
1000a286:	4b11      	ldr	r3, [pc, #68]	; (1000a2cc <sms_button_configure_gpio+0x9c>)
1000a288:	4798      	blx	r3
1000a28a:	4814      	ldr	r0, [pc, #80]	; (1000a2dc <sms_button_configure_gpio+0xac>)
1000a28c:	4b11      	ldr	r3, [pc, #68]	; (1000a2d4 <sms_button_configure_gpio+0xa4>)
1000a28e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a290:	ac01      	add	r4, sp, #4
1000a292:	0020      	movs	r0, r4
1000a294:	4b09      	ldr	r3, [pc, #36]	; (1000a2bc <sms_button_configure_gpio+0x8c>)
1000a296:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a298:	2300      	movs	r3, #0
1000a29a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a29c:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a29e:	0021      	movs	r1, r4
1000a2a0:	2017      	movs	r0, #23
1000a2a2:	4b08      	ldr	r3, [pc, #32]	; (1000a2c4 <sms_button_configure_gpio+0x94>)
1000a2a4:	4798      	blx	r3
1000a2a6:	2800      	cmp	r0, #0
1000a2a8:	d005      	beq.n	1000a2b6 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a2aa:	4807      	ldr	r0, [pc, #28]	; (1000a2c8 <sms_button_configure_gpio+0x98>)
1000a2ac:	4b07      	ldr	r3, [pc, #28]	; (1000a2cc <sms_button_configure_gpio+0x9c>)
1000a2ae:	4798      	blx	r3
1000a2b0:	480b      	ldr	r0, [pc, #44]	; (1000a2e0 <sms_button_configure_gpio+0xb0>)
1000a2b2:	4b08      	ldr	r3, [pc, #32]	; (1000a2d4 <sms_button_configure_gpio+0xa4>)
1000a2b4:	4798      	blx	r3
    }
}
1000a2b6:	b002      	add	sp, #8
1000a2b8:	bd10      	pop	{r4, pc}
1000a2ba:	46c0      	nop			; (mov r8, r8)
1000a2bc:	1000bcd9 	.word	0x1000bcd9
1000a2c0:	10019948 	.word	0x10019948
1000a2c4:	1000bce9 	.word	0x1000bce9
1000a2c8:	10015e2c 	.word	0x10015e2c
1000a2cc:	10014c6d 	.word	0x10014c6d
1000a2d0:	10016444 	.word	0x10016444
1000a2d4:	10014b4d 	.word	0x10014b4d
1000a2d8:	100199e4 	.word	0x100199e4
1000a2dc:	1001647c 	.word	0x1001647c
1000a2e0:	100164b4 	.word	0x100164b4

1000a2e4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a2e4:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a2e6:	4b06      	ldr	r3, [pc, #24]	; (1000a300 <sms_button_register_callbacks+0x1c>)
1000a2e8:	7858      	ldrb	r0, [r3, #1]
1000a2ea:	2202      	movs	r2, #2
1000a2ec:	4905      	ldr	r1, [pc, #20]	; (1000a304 <sms_button_register_callbacks+0x20>)
1000a2ee:	4c06      	ldr	r4, [pc, #24]	; (1000a308 <sms_button_register_callbacks+0x24>)
1000a2f0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a2f2:	4b06      	ldr	r3, [pc, #24]	; (1000a30c <sms_button_register_callbacks+0x28>)
1000a2f4:	7858      	ldrb	r0, [r3, #1]
1000a2f6:	2202      	movs	r2, #2
1000a2f8:	4905      	ldr	r1, [pc, #20]	; (1000a310 <sms_button_register_callbacks+0x2c>)
1000a2fa:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a2fc:	bd10      	pop	{r4, pc}
1000a2fe:	46c0      	nop			; (mov r8, r8)
1000a300:	10019948 	.word	0x10019948
1000a304:	1000a1e1 	.word	0x1000a1e1
1000a308:	1000c119 	.word	0x1000c119
1000a30c:	100199e4 	.word	0x100199e4
1000a310:	1000a209 	.word	0x1000a209

1000a314 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a314:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a316:	201f      	movs	r0, #31
1000a318:	4d0c      	ldr	r5, [pc, #48]	; (1000a34c <sms_button_get_state+0x38>)
1000a31a:	47a8      	blx	r5
1000a31c:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a31e:	201d      	movs	r0, #29
1000a320:	47a8      	blx	r5
1000a322:	0005      	movs	r5, r0
1000a324:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a326:	480a      	ldr	r0, [pc, #40]	; (1000a350 <sms_button_get_state+0x3c>)
1000a328:	4b0a      	ldr	r3, [pc, #40]	; (1000a354 <sms_button_get_state+0x40>)
1000a32a:	4798      	blx	r3
1000a32c:	0022      	movs	r2, r4
1000a32e:	0029      	movs	r1, r5
1000a330:	4809      	ldr	r0, [pc, #36]	; (1000a358 <sms_button_get_state+0x44>)
1000a332:	4b0a      	ldr	r3, [pc, #40]	; (1000a35c <sms_button_get_state+0x48>)
1000a334:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a336:	2c00      	cmp	r4, #0
1000a338:	d004      	beq.n	1000a344 <sms_button_get_state+0x30>
1000a33a:	2003      	movs	r0, #3
1000a33c:	2d00      	cmp	r5, #0
1000a33e:	d104      	bne.n	1000a34a <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a340:	3802      	subs	r0, #2
1000a342:	e002      	b.n	1000a34a <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a344:	1e70      	subs	r0, r6, #1
1000a346:	4186      	sbcs	r6, r0
1000a348:	0070      	lsls	r0, r6, #1
}
1000a34a:	bd70      	pop	{r4, r5, r6, pc}
1000a34c:	1000bea1 	.word	0x1000bea1
1000a350:	10015e2c 	.word	0x10015e2c
1000a354:	10014c6d 	.word	0x10014c6d
1000a358:	100164fc 	.word	0x100164fc
1000a35c:	10014b4d 	.word	0x10014b4d

1000a360 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a360:	b570      	push	{r4, r5, r6, lr}
1000a362:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a364:	4c78      	ldr	r4, [pc, #480]	; (1000a548 <sms_button_fn+0x1e8>)
1000a366:	7863      	ldrb	r3, [r4, #1]
1000a368:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a36a:	4b78      	ldr	r3, [pc, #480]	; (1000a54c <sms_button_fn+0x1ec>)
1000a36c:	4798      	blx	r3
1000a36e:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a370:	2d00      	cmp	r5, #0
1000a372:	d103      	bne.n	1000a37c <sms_button_fn+0x1c>
1000a374:	4876      	ldr	r0, [pc, #472]	; (1000a550 <sms_button_fn+0x1f0>)
1000a376:	4b77      	ldr	r3, [pc, #476]	; (1000a554 <sms_button_fn+0x1f4>)
1000a378:	4798      	blx	r3
1000a37a:	e005      	b.n	1000a388 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a37c:	2d01      	cmp	r5, #1
1000a37e:	d000      	beq.n	1000a382 <sms_button_fn+0x22>
1000a380:	e0d4      	b.n	1000a52c <sms_button_fn+0x1cc>
1000a382:	4875      	ldr	r0, [pc, #468]	; (1000a558 <sms_button_fn+0x1f8>)
1000a384:	4b73      	ldr	r3, [pc, #460]	; (1000a554 <sms_button_fn+0x1f4>)
1000a386:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a388:	4b6f      	ldr	r3, [pc, #444]	; (1000a548 <sms_button_fn+0x1e8>)
1000a38a:	785b      	ldrb	r3, [r3, #1]
1000a38c:	2b01      	cmp	r3, #1
1000a38e:	d008      	beq.n	1000a3a2 <sms_button_fn+0x42>
1000a390:	2b00      	cmp	r3, #0
1000a392:	d100      	bne.n	1000a396 <sms_button_fn+0x36>
1000a394:	e0c5      	b.n	1000a522 <sms_button_fn+0x1c2>
1000a396:	2b02      	cmp	r3, #2
1000a398:	d04b      	beq.n	1000a432 <sms_button_fn+0xd2>
1000a39a:	2b03      	cmp	r3, #3
1000a39c:	d100      	bne.n	1000a3a0 <sms_button_fn+0x40>
1000a39e:	e08f      	b.n	1000a4c0 <sms_button_fn+0x160>
1000a3a0:	e0c7      	b.n	1000a532 <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a3a2:	4b6e      	ldr	r3, [pc, #440]	; (1000a55c <sms_button_fn+0x1fc>)
1000a3a4:	781b      	ldrb	r3, [r3, #0]
1000a3a6:	b2db      	uxtb	r3, r3
1000a3a8:	2b00      	cmp	r3, #0
1000a3aa:	d003      	beq.n	1000a3b4 <sms_button_fn+0x54>
1000a3ac:	3b22      	subs	r3, #34	; 0x22
1000a3ae:	2b01      	cmp	r3, #1
1000a3b0:	d836      	bhi.n	1000a420 <sms_button_fn+0xc0>
1000a3b2:	e00e      	b.n	1000a3d2 <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a3b4:	2201      	movs	r2, #1
1000a3b6:	4b6a      	ldr	r3, [pc, #424]	; (1000a560 <sms_button_fn+0x200>)
1000a3b8:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3ba:	2300      	movs	r3, #0
1000a3bc:	4a69      	ldr	r2, [pc, #420]	; (1000a564 <sms_button_fn+0x204>)
1000a3be:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a3c0:	4a69      	ldr	r2, [pc, #420]	; (1000a568 <sms_button_fn+0x208>)
1000a3c2:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3c4:	2200      	movs	r2, #0
1000a3c6:	21fa      	movs	r1, #250	; 0xfa
1000a3c8:	2001      	movs	r0, #1
1000a3ca:	4b68      	ldr	r3, [pc, #416]	; (1000a56c <sms_button_fn+0x20c>)
1000a3cc:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3ce:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a3d0:	e0b9      	b.n	1000a546 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a3d2:	2328      	movs	r3, #40	; 0x28
1000a3d4:	4a66      	ldr	r2, [pc, #408]	; (1000a570 <sms_button_fn+0x210>)
1000a3d6:	5cd3      	ldrb	r3, [r2, r3]
1000a3d8:	2b01      	cmp	r3, #1
1000a3da:	d109      	bne.n	1000a3f0 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a3dc:	4865      	ldr	r0, [pc, #404]	; (1000a574 <sms_button_fn+0x214>)
1000a3de:	4b66      	ldr	r3, [pc, #408]	; (1000a578 <sms_button_fn+0x218>)
1000a3e0:	4798      	blx	r3
1000a3e2:	4866      	ldr	r0, [pc, #408]	; (1000a57c <sms_button_fn+0x21c>)
1000a3e4:	4b66      	ldr	r3, [pc, #408]	; (1000a580 <sms_button_fn+0x220>)
1000a3e6:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a3e8:	2101      	movs	r1, #1
1000a3ea:	2000      	movs	r0, #0
1000a3ec:	4b65      	ldr	r3, [pc, #404]	; (1000a584 <sms_button_fn+0x224>)
1000a3ee:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a3f0:	2300      	movs	r3, #0
1000a3f2:	4a5b      	ldr	r2, [pc, #364]	; (1000a560 <sms_button_fn+0x200>)
1000a3f4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3f6:	4a5b      	ldr	r2, [pc, #364]	; (1000a564 <sms_button_fn+0x204>)
1000a3f8:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a3fa:	4b63      	ldr	r3, [pc, #396]	; (1000a588 <sms_button_fn+0x228>)
1000a3fc:	781b      	ldrb	r3, [r3, #0]
1000a3fe:	42ab      	cmp	r3, r5
1000a400:	d104      	bne.n	1000a40c <sms_button_fn+0xac>
1000a402:	2000      	movs	r0, #0
1000a404:	4b61      	ldr	r3, [pc, #388]	; (1000a58c <sms_button_fn+0x22c>)
1000a406:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a408:	2000      	movs	r0, #0
1000a40a:	e09c      	b.n	1000a546 <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a40c:	4b60      	ldr	r3, [pc, #384]	; (1000a590 <sms_button_fn+0x230>)
1000a40e:	781b      	ldrb	r3, [r3, #0]
1000a410:	42ab      	cmp	r3, r5
1000a412:	d000      	beq.n	1000a416 <sms_button_fn+0xb6>
1000a414:	e08f      	b.n	1000a536 <sms_button_fn+0x1d6>
1000a416:	2001      	movs	r0, #1
1000a418:	4b5c      	ldr	r3, [pc, #368]	; (1000a58c <sms_button_fn+0x22c>)
1000a41a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a41c:	2000      	movs	r0, #0
1000a41e:	e092      	b.n	1000a546 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a420:	4854      	ldr	r0, [pc, #336]	; (1000a574 <sms_button_fn+0x214>)
1000a422:	4b55      	ldr	r3, [pc, #340]	; (1000a578 <sms_button_fn+0x218>)
1000a424:	4798      	blx	r3
1000a426:	485b      	ldr	r0, [pc, #364]	; (1000a594 <sms_button_fn+0x234>)
1000a428:	4b55      	ldr	r3, [pc, #340]	; (1000a580 <sms_button_fn+0x220>)
1000a42a:	4798      	blx	r3
            return -1;
1000a42c:	2001      	movs	r0, #1
1000a42e:	4240      	negs	r0, r0
1000a430:	e089      	b.n	1000a546 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a432:	4b4a      	ldr	r3, [pc, #296]	; (1000a55c <sms_button_fn+0x1fc>)
1000a434:	781b      	ldrb	r3, [r3, #0]
1000a436:	b2db      	uxtb	r3, r3
1000a438:	2b22      	cmp	r3, #34	; 0x22
1000a43a:	d012      	beq.n	1000a462 <sms_button_fn+0x102>
1000a43c:	2b23      	cmp	r3, #35	; 0x23
1000a43e:	d036      	beq.n	1000a4ae <sms_button_fn+0x14e>
1000a440:	2b00      	cmp	r3, #0
1000a442:	d17b      	bne.n	1000a53c <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a444:	2201      	movs	r2, #1
1000a446:	4b46      	ldr	r3, [pc, #280]	; (1000a560 <sms_button_fn+0x200>)
1000a448:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a44a:	2300      	movs	r3, #0
1000a44c:	4a45      	ldr	r2, [pc, #276]	; (1000a564 <sms_button_fn+0x204>)
1000a44e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a450:	4a45      	ldr	r2, [pc, #276]	; (1000a568 <sms_button_fn+0x208>)
1000a452:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a454:	2200      	movs	r2, #0
1000a456:	21fa      	movs	r1, #250	; 0xfa
1000a458:	2001      	movs	r0, #1
1000a45a:	4b44      	ldr	r3, [pc, #272]	; (1000a56c <sms_button_fn+0x20c>)
1000a45c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a45e:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a460:	e071      	b.n	1000a546 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a462:	2328      	movs	r3, #40	; 0x28
1000a464:	4a42      	ldr	r2, [pc, #264]	; (1000a570 <sms_button_fn+0x210>)
1000a466:	5cd3      	ldrb	r3, [r2, r3]
1000a468:	2b01      	cmp	r3, #1
1000a46a:	d109      	bne.n	1000a480 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a46c:	4841      	ldr	r0, [pc, #260]	; (1000a574 <sms_button_fn+0x214>)
1000a46e:	4b42      	ldr	r3, [pc, #264]	; (1000a578 <sms_button_fn+0x218>)
1000a470:	4798      	blx	r3
1000a472:	4849      	ldr	r0, [pc, #292]	; (1000a598 <sms_button_fn+0x238>)
1000a474:	4b42      	ldr	r3, [pc, #264]	; (1000a580 <sms_button_fn+0x220>)
1000a476:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a478:	2101      	movs	r1, #1
1000a47a:	2000      	movs	r0, #0
1000a47c:	4b41      	ldr	r3, [pc, #260]	; (1000a584 <sms_button_fn+0x224>)
1000a47e:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a480:	2300      	movs	r3, #0
1000a482:	4a37      	ldr	r2, [pc, #220]	; (1000a560 <sms_button_fn+0x200>)
1000a484:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a486:	4a37      	ldr	r2, [pc, #220]	; (1000a564 <sms_button_fn+0x204>)
1000a488:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a48a:	4b3f      	ldr	r3, [pc, #252]	; (1000a588 <sms_button_fn+0x228>)
1000a48c:	781b      	ldrb	r3, [r3, #0]
1000a48e:	42ab      	cmp	r3, r5
1000a490:	d104      	bne.n	1000a49c <sms_button_fn+0x13c>
1000a492:	2000      	movs	r0, #0
1000a494:	4b3d      	ldr	r3, [pc, #244]	; (1000a58c <sms_button_fn+0x22c>)
1000a496:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a498:	2000      	movs	r0, #0
1000a49a:	e054      	b.n	1000a546 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a49c:	4b3c      	ldr	r3, [pc, #240]	; (1000a590 <sms_button_fn+0x230>)
1000a49e:	781b      	ldrb	r3, [r3, #0]
1000a4a0:	42ab      	cmp	r3, r5
1000a4a2:	d14e      	bne.n	1000a542 <sms_button_fn+0x1e2>
1000a4a4:	2001      	movs	r0, #1
1000a4a6:	4b39      	ldr	r3, [pc, #228]	; (1000a58c <sms_button_fn+0x22c>)
1000a4a8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a4aa:	2000      	movs	r0, #0
1000a4ac:	e04b      	b.n	1000a546 <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a4ae:	4831      	ldr	r0, [pc, #196]	; (1000a574 <sms_button_fn+0x214>)
1000a4b0:	4b31      	ldr	r3, [pc, #196]	; (1000a578 <sms_button_fn+0x218>)
1000a4b2:	4798      	blx	r3
1000a4b4:	4839      	ldr	r0, [pc, #228]	; (1000a59c <sms_button_fn+0x23c>)
1000a4b6:	4b32      	ldr	r3, [pc, #200]	; (1000a580 <sms_button_fn+0x220>)
1000a4b8:	4798      	blx	r3
            return -1;
1000a4ba:	2001      	movs	r0, #1
1000a4bc:	4240      	negs	r0, r0
1000a4be:	e042      	b.n	1000a546 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a4c0:	4b26      	ldr	r3, [pc, #152]	; (1000a55c <sms_button_fn+0x1fc>)
1000a4c2:	781b      	ldrb	r3, [r3, #0]
1000a4c4:	2b00      	cmp	r3, #0
1000a4c6:	d108      	bne.n	1000a4da <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a4c8:	4a25      	ldr	r2, [pc, #148]	; (1000a560 <sms_button_fn+0x200>)
1000a4ca:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a4cc:	4a25      	ldr	r2, [pc, #148]	; (1000a564 <sms_button_fn+0x204>)
1000a4ce:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a4d0:	2201      	movs	r2, #1
1000a4d2:	4b33      	ldr	r3, [pc, #204]	; (1000a5a0 <sms_button_fn+0x240>)
1000a4d4:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a4d6:	2000      	movs	r0, #0
1000a4d8:	e035      	b.n	1000a546 <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a4da:	4b20      	ldr	r3, [pc, #128]	; (1000a55c <sms_button_fn+0x1fc>)
1000a4dc:	781b      	ldrb	r3, [r3, #0]
1000a4de:	2b22      	cmp	r3, #34	; 0x22
1000a4e0:	d003      	beq.n	1000a4ea <sms_button_fn+0x18a>
1000a4e2:	4b1e      	ldr	r3, [pc, #120]	; (1000a55c <sms_button_fn+0x1fc>)
1000a4e4:	781b      	ldrb	r3, [r3, #0]
1000a4e6:	2b23      	cmp	r3, #35	; 0x23
1000a4e8:	d104      	bne.n	1000a4f4 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a4ea:	2101      	movs	r1, #1
1000a4ec:	2328      	movs	r3, #40	; 0x28
1000a4ee:	4a20      	ldr	r2, [pc, #128]	; (1000a570 <sms_button_fn+0x210>)
1000a4f0:	54d1      	strb	r1, [r2, r3]
1000a4f2:	e003      	b.n	1000a4fc <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a4f4:	2100      	movs	r1, #0
1000a4f6:	2328      	movs	r3, #40	; 0x28
1000a4f8:	4a1d      	ldr	r2, [pc, #116]	; (1000a570 <sms_button_fn+0x210>)
1000a4fa:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a4fc:	2100      	movs	r1, #0
1000a4fe:	2000      	movs	r0, #0
1000a500:	4b20      	ldr	r3, [pc, #128]	; (1000a584 <sms_button_fn+0x224>)
1000a502:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a504:	2202      	movs	r2, #2
1000a506:	4b16      	ldr	r3, [pc, #88]	; (1000a560 <sms_button_fn+0x200>)
1000a508:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a50a:	2300      	movs	r3, #0
1000a50c:	4a15      	ldr	r2, [pc, #84]	; (1000a564 <sms_button_fn+0x204>)
1000a50e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a510:	4a15      	ldr	r2, [pc, #84]	; (1000a568 <sms_button_fn+0x208>)
1000a512:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a514:	2200      	movs	r2, #0
1000a516:	21fa      	movs	r1, #250	; 0xfa
1000a518:	2001      	movs	r0, #1
1000a51a:	4b14      	ldr	r3, [pc, #80]	; (1000a56c <sms_button_fn+0x20c>)
1000a51c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a51e:	2000      	movs	r0, #0
1000a520:	e011      	b.n	1000a546 <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a522:	2201      	movs	r2, #1
1000a524:	4b1e      	ldr	r3, [pc, #120]	; (1000a5a0 <sms_button_fn+0x240>)
1000a526:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a528:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a52a:	e00c      	b.n	1000a546 <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a52c:	2001      	movs	r0, #1
1000a52e:	4240      	negs	r0, r0
1000a530:	e009      	b.n	1000a546 <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a532:	2000      	movs	r0, #0
1000a534:	e007      	b.n	1000a546 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a536:	2001      	movs	r0, #1
1000a538:	4240      	negs	r0, r0
1000a53a:	e004      	b.n	1000a546 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a53c:	2001      	movs	r0, #1
1000a53e:	4240      	negs	r0, r0
1000a540:	e001      	b.n	1000a546 <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a542:	2001      	movs	r0, #1
1000a544:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a546:	bd70      	pop	{r4, r5, r6, pc}
1000a548:	100199e8 	.word	0x100199e8
1000a54c:	1000a315 	.word	0x1000a315
1000a550:	10016528 	.word	0x10016528
1000a554:	1000a6a9 	.word	0x1000a6a9
1000a558:	1001653c 	.word	0x1001653c
1000a55c:	10019af8 	.word	0x10019af8
1000a560:	1001994c 	.word	0x1001994c
1000a564:	10019af9 	.word	0x10019af9
1000a568:	10019b16 	.word	0x10019b16
1000a56c:	1000b221 	.word	0x1000b221
1000a570:	10019a5c 	.word	0x10019a5c
1000a574:	10015e2c 	.word	0x10015e2c
1000a578:	10014c6d 	.word	0x10014c6d
1000a57c:	10016550 	.word	0x10016550
1000a580:	10014b4d 	.word	0x10014b4d
1000a584:	1000af75 	.word	0x1000af75
1000a588:	10019948 	.word	0x10019948
1000a58c:	10009f21 	.word	0x10009f21
1000a590:	100199e4 	.word	0x100199e4
1000a594:	10016578 	.word	0x10016578
1000a598:	100165a0 	.word	0x100165a0
1000a59c:	100165c8 	.word	0x100165c8
1000a5a0:	100199e1 	.word	0x100199e1

1000a5a4 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a5a4:	b510      	push	{r4, lr}
1000a5a6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a5a8:	2800      	cmp	r0, #0
1000a5aa:	d104      	bne.n	1000a5b6 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a5ac:	4b0c      	ldr	r3, [pc, #48]	; (1000a5e0 <sms_button_toggle_interrupt+0x3c>)
1000a5ae:	7858      	ldrb	r0, [r3, #1]
1000a5b0:	4b0c      	ldr	r3, [pc, #48]	; (1000a5e4 <sms_button_toggle_interrupt+0x40>)
1000a5b2:	4798      	blx	r3
1000a5b4:	e005      	b.n	1000a5c2 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a5b6:	2801      	cmp	r0, #1
1000a5b8:	d103      	bne.n	1000a5c2 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a5ba:	4b09      	ldr	r3, [pc, #36]	; (1000a5e0 <sms_button_toggle_interrupt+0x3c>)
1000a5bc:	7858      	ldrb	r0, [r3, #1]
1000a5be:	4b0a      	ldr	r3, [pc, #40]	; (1000a5e8 <sms_button_toggle_interrupt+0x44>)
1000a5c0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a5c2:	2c00      	cmp	r4, #0
1000a5c4:	d104      	bne.n	1000a5d0 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a5c6:	4b09      	ldr	r3, [pc, #36]	; (1000a5ec <sms_button_toggle_interrupt+0x48>)
1000a5c8:	7858      	ldrb	r0, [r3, #1]
1000a5ca:	4b06      	ldr	r3, [pc, #24]	; (1000a5e4 <sms_button_toggle_interrupt+0x40>)
1000a5cc:	4798      	blx	r3
1000a5ce:	e005      	b.n	1000a5dc <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a5d0:	2c01      	cmp	r4, #1
1000a5d2:	d103      	bne.n	1000a5dc <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a5d4:	4b05      	ldr	r3, [pc, #20]	; (1000a5ec <sms_button_toggle_interrupt+0x48>)
1000a5d6:	7858      	ldrb	r0, [r3, #1]
1000a5d8:	4b03      	ldr	r3, [pc, #12]	; (1000a5e8 <sms_button_toggle_interrupt+0x44>)
1000a5da:	4798      	blx	r3
    }
}
1000a5dc:	bd10      	pop	{r4, pc}
1000a5de:	46c0      	nop			; (mov r8, r8)
1000a5e0:	10019948 	.word	0x10019948
1000a5e4:	1000c1e9 	.word	0x1000c1e9
1000a5e8:	1000c245 	.word	0x1000c245
1000a5ec:	100199e4 	.word	0x100199e4

1000a5f0 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a5f0:	b510      	push	{r4, lr}
1000a5f2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a5f4:	466b      	mov	r3, sp
1000a5f6:	1dda      	adds	r2, r3, #7
1000a5f8:	2300      	movs	r3, #0
1000a5fa:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a5fc:	4c0d      	ldr	r4, [pc, #52]	; (1000a634 <sms_button_define_services+0x44>)
1000a5fe:	0021      	movs	r1, r4
1000a600:	2000      	movs	r0, #0
1000a602:	4b0d      	ldr	r3, [pc, #52]	; (1000a638 <sms_button_define_services+0x48>)
1000a604:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a606:	0020      	movs	r0, r4
1000a608:	4b0c      	ldr	r3, [pc, #48]	; (1000a63c <sms_button_define_services+0x4c>)
1000a60a:	4798      	blx	r3
1000a60c:	1e04      	subs	r4, r0, #0
1000a60e:	d007      	beq.n	1000a620 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a610:	480b      	ldr	r0, [pc, #44]	; (1000a640 <sms_button_define_services+0x50>)
1000a612:	4b0c      	ldr	r3, [pc, #48]	; (1000a644 <sms_button_define_services+0x54>)
1000a614:	4798      	blx	r3
1000a616:	0021      	movs	r1, r4
1000a618:	480b      	ldr	r0, [pc, #44]	; (1000a648 <sms_button_define_services+0x58>)
1000a61a:	4b0c      	ldr	r3, [pc, #48]	; (1000a64c <sms_button_define_services+0x5c>)
1000a61c:	4798      	blx	r3
1000a61e:	e007      	b.n	1000a630 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a620:	4807      	ldr	r0, [pc, #28]	; (1000a640 <sms_button_define_services+0x50>)
1000a622:	4b08      	ldr	r3, [pc, #32]	; (1000a644 <sms_button_define_services+0x54>)
1000a624:	4798      	blx	r3
1000a626:	4b0a      	ldr	r3, [pc, #40]	; (1000a650 <sms_button_define_services+0x60>)
1000a628:	8ad9      	ldrh	r1, [r3, #22]
1000a62a:	480a      	ldr	r0, [pc, #40]	; (1000a654 <sms_button_define_services+0x64>)
1000a62c:	4b07      	ldr	r3, [pc, #28]	; (1000a64c <sms_button_define_services+0x5c>)
1000a62e:	4798      	blx	r3
    }
1000a630:	b002      	add	sp, #8
1000a632:	bd10      	pop	{r4, pc}
1000a634:	100199ec 	.word	0x100199ec
1000a638:	1000a0f9 	.word	0x1000a0f9
1000a63c:	1000a0d5 	.word	0x1000a0d5
1000a640:	10015e2c 	.word	0x10015e2c
1000a644:	10014c6d 	.word	0x10014c6d
1000a648:	100165ec 	.word	0x100165ec
1000a64c:	10014b4d 	.word	0x10014b4d
1000a650:	100199e8 	.word	0x100199e8
1000a654:	10016630 	.word	0x10016630

1000a658 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a658:	b510      	push	{r4, lr}
1000a65a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a65c:	ac01      	add	r4, sp, #4
1000a65e:	0020      	movs	r0, r4
1000a660:	4b0a      	ldr	r3, [pc, #40]	; (1000a68c <sms_monitor_configure_gpio+0x34>)
1000a662:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a664:	2301      	movs	r3, #1
1000a666:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a668:	0021      	movs	r1, r4
1000a66a:	2002      	movs	r0, #2
1000a66c:	4b08      	ldr	r3, [pc, #32]	; (1000a690 <sms_monitor_configure_gpio+0x38>)
1000a66e:	4798      	blx	r3
1000a670:	2800      	cmp	r0, #0
1000a672:	d005      	beq.n	1000a680 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a674:	4807      	ldr	r0, [pc, #28]	; (1000a694 <sms_monitor_configure_gpio+0x3c>)
1000a676:	4b08      	ldr	r3, [pc, #32]	; (1000a698 <sms_monitor_configure_gpio+0x40>)
1000a678:	4798      	blx	r3
1000a67a:	4808      	ldr	r0, [pc, #32]	; (1000a69c <sms_monitor_configure_gpio+0x44>)
1000a67c:	4b08      	ldr	r3, [pc, #32]	; (1000a6a0 <sms_monitor_configure_gpio+0x48>)
1000a67e:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a680:	2100      	movs	r1, #0
1000a682:	2002      	movs	r0, #2
1000a684:	4b07      	ldr	r3, [pc, #28]	; (1000a6a4 <sms_monitor_configure_gpio+0x4c>)
1000a686:	4798      	blx	r3
}
1000a688:	b002      	add	sp, #8
1000a68a:	bd10      	pop	{r4, pc}
1000a68c:	1000bcd9 	.word	0x1000bcd9
1000a690:	1000bce9 	.word	0x1000bce9
1000a694:	10015e2c 	.word	0x10015e2c
1000a698:	10014c6d 	.word	0x10014c6d
1000a69c:	10016678 	.word	0x10016678
1000a6a0:	10014b4d 	.word	0x10014b4d
1000a6a4:	1000bf41 	.word	0x1000bf41

1000a6a8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a6a8:	b570      	push	{r4, r5, r6, lr}
1000a6aa:	b084      	sub	sp, #16
1000a6ac:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a6ae:	480c      	ldr	r0, [pc, #48]	; (1000a6e0 <sms_monitor_get_states+0x38>)
1000a6b0:	4b0c      	ldr	r3, [pc, #48]	; (1000a6e4 <sms_monitor_get_states+0x3c>)
1000a6b2:	4798      	blx	r3
1000a6b4:	4b0c      	ldr	r3, [pc, #48]	; (1000a6e8 <sms_monitor_get_states+0x40>)
1000a6b6:	7819      	ldrb	r1, [r3, #0]
1000a6b8:	4b0c      	ldr	r3, [pc, #48]	; (1000a6ec <sms_monitor_get_states+0x44>)
1000a6ba:	7818      	ldrb	r0, [r3, #0]
1000a6bc:	4b0c      	ldr	r3, [pc, #48]	; (1000a6f0 <sms_monitor_get_states+0x48>)
1000a6be:	781d      	ldrb	r5, [r3, #0]
1000a6c0:	4b0c      	ldr	r3, [pc, #48]	; (1000a6f4 <sms_monitor_get_states+0x4c>)
1000a6c2:	781e      	ldrb	r6, [r3, #0]
1000a6c4:	4a0c      	ldr	r2, [pc, #48]	; (1000a6f8 <sms_monitor_get_states+0x50>)
1000a6c6:	7853      	ldrb	r3, [r2, #1]
1000a6c8:	7812      	ldrb	r2, [r2, #0]
1000a6ca:	9603      	str	r6, [sp, #12]
1000a6cc:	9502      	str	r5, [sp, #8]
1000a6ce:	9001      	str	r0, [sp, #4]
1000a6d0:	9100      	str	r1, [sp, #0]
1000a6d2:	0021      	movs	r1, r4
1000a6d4:	4809      	ldr	r0, [pc, #36]	; (1000a6fc <sms_monitor_get_states+0x54>)
1000a6d6:	4c0a      	ldr	r4, [pc, #40]	; (1000a700 <sms_monitor_get_states+0x58>)
1000a6d8:	47a0      	blx	r4
}
1000a6da:	b004      	add	sp, #16
1000a6dc:	bd70      	pop	{r4, r5, r6, pc}
1000a6de:	46c0      	nop			; (mov r8, r8)
1000a6e0:	10015e2c 	.word	0x10015e2c
1000a6e4:	10014c6d 	.word	0x10014c6d
1000a6e8:	10019af8 	.word	0x10019af8
1000a6ec:	1001994c 	.word	0x1001994c
1000a6f0:	10019af9 	.word	0x10019af9
1000a6f4:	100199e0 	.word	0x100199e0
1000a6f8:	100199e8 	.word	0x100199e8
1000a6fc:	10016698 	.word	0x10016698
1000a700:	10014b4d 	.word	0x10014b4d

1000a704 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a704:	b530      	push	{r4, r5, lr}
1000a706:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a708:	2010      	movs	r0, #16
1000a70a:	4c14      	ldr	r4, [pc, #80]	; (1000a75c <sms_i2c_master_configure+0x58>)
1000a70c:	47a0      	blx	r4
1000a70e:	4b14      	ldr	r3, [pc, #80]	; (1000a760 <sms_i2c_master_configure+0x5c>)
1000a710:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a712:	2010      	movs	r0, #16
1000a714:	47a0      	blx	r4
1000a716:	4b13      	ldr	r3, [pc, #76]	; (1000a764 <sms_i2c_master_configure+0x60>)
1000a718:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a71a:	ac01      	add	r4, sp, #4
1000a71c:	0020      	movs	r0, r4
1000a71e:	4b12      	ldr	r3, [pc, #72]	; (1000a768 <sms_i2c_master_configure+0x64>)
1000a720:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a722:	2301      	movs	r3, #1
1000a724:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a726:	3381      	adds	r3, #129	; 0x81
1000a728:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a72a:	3b7a      	subs	r3, #122	; 0x7a
1000a72c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a72e:	3301      	adds	r3, #1
1000a730:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a732:	3b07      	subs	r3, #7
1000a734:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a736:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a738:	4d0c      	ldr	r5, [pc, #48]	; (1000a76c <sms_i2c_master_configure+0x68>)
1000a73a:	4c0d      	ldr	r4, [pc, #52]	; (1000a770 <sms_i2c_master_configure+0x6c>)
1000a73c:	aa01      	add	r2, sp, #4
1000a73e:	490d      	ldr	r1, [pc, #52]	; (1000a774 <sms_i2c_master_configure+0x70>)
1000a740:	0028      	movs	r0, r5
1000a742:	47a0      	blx	r4
1000a744:	2800      	cmp	r0, #0
1000a746:	d1f9      	bne.n	1000a73c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a748:	4b08      	ldr	r3, [pc, #32]	; (1000a76c <sms_i2c_master_configure+0x68>)
1000a74a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a74c:	2128      	movs	r1, #40	; 0x28
1000a74e:	5c53      	ldrb	r3, [r2, r1]
1000a750:	07db      	lsls	r3, r3, #31
1000a752:	d4fc      	bmi.n	1000a74e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a754:	2301      	movs	r3, #1
1000a756:	7513      	strb	r3, [r2, #20]
}
1000a758:	b007      	add	sp, #28
1000a75a:	bd30      	pop	{r4, r5, pc}
1000a75c:	100149c1 	.word	0x100149c1
1000a760:	10019b00 	.word	0x10019b00
1000a764:	10019ae4 	.word	0x10019ae4
1000a768:	100083b9 	.word	0x100083b9
1000a76c:	10019af0 	.word	0x10019af0
1000a770:	100083d1 	.word	0x100083d1
1000a774:	40003000 	.word	0x40003000

1000a778 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a77a:	0006      	movs	r6, r0
1000a77c:	000c      	movs	r4, r1
1000a77e:	0017      	movs	r7, r2
1000a780:	001d      	movs	r5, r3
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
1000a782:	481c      	ldr	r0, [pc, #112]	; (1000a7f4 <sms_i2c_master_write+0x7c>)
1000a784:	4b1c      	ldr	r3, [pc, #112]	; (1000a7f8 <sms_i2c_master_write+0x80>)
1000a786:	4798      	blx	r3
1000a788:	0022      	movs	r2, r4
1000a78a:	0031      	movs	r1, r6
1000a78c:	481b      	ldr	r0, [pc, #108]	; (1000a7fc <sms_i2c_master_write+0x84>)
1000a78e:	4b1c      	ldr	r3, [pc, #112]	; (1000a800 <sms_i2c_master_write+0x88>)
1000a790:	4798      	blx	r3
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a792:	4b1c      	ldr	r3, [pc, #112]	; (1000a804 <sms_i2c_master_write+0x8c>)
1000a794:	801e      	strh	r6, [r3, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a796:	1c7a      	adds	r2, r7, #1
1000a798:	b2d2      	uxtb	r2, r2
1000a79a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a79c:	685b      	ldr	r3, [r3, #4]
1000a79e:	701c      	strb	r4, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a7a0:	2f00      	cmp	r7, #0
1000a7a2:	d019      	beq.n	1000a7d8 <sms_i2c_master_write+0x60>
1000a7a4:	3f01      	subs	r7, #1
1000a7a6:	b2ff      	uxtb	r7, r7
1000a7a8:	3701      	adds	r7, #1
1000a7aa:	19ef      	adds	r7, r5, r7
1000a7ac:	002c      	movs	r4, r5
1000a7ae:	2301      	movs	r3, #1
1000a7b0:	1b5e      	subs	r6, r3, r5
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a7b2:	4d14      	ldr	r5, [pc, #80]	; (1000a804 <sms_i2c_master_write+0x8c>)
1000a7b4:	1932      	adds	r2, r6, r4
1000a7b6:	7823      	ldrb	r3, [r4, #0]
1000a7b8:	6869      	ldr	r1, [r5, #4]
1000a7ba:	548b      	strb	r3, [r1, r2]
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
1000a7bc:	686b      	ldr	r3, [r5, #4]
1000a7be:	5c99      	ldrb	r1, [r3, r2]
1000a7c0:	4811      	ldr	r0, [pc, #68]	; (1000a808 <sms_i2c_master_write+0x90>)
1000a7c2:	4a0f      	ldr	r2, [pc, #60]	; (1000a800 <sms_i2c_master_write+0x88>)
1000a7c4:	4790      	blx	r2
1000a7c6:	3401      	adds	r4, #1
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a7c8:	42bc      	cmp	r4, r7
1000a7ca:	d1f3      	bne.n	1000a7b4 <sms_i2c_master_write+0x3c>
1000a7cc:	e004      	b.n	1000a7d8 <sms_i2c_master_write+0x60>
1000a7ce:	3c01      	subs	r4, #1
1000a7d0:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a7d2:	2c00      	cmp	r4, #0
1000a7d4:	d104      	bne.n	1000a7e0 <sms_i2c_master_write+0x68>
1000a7d6:	e009      	b.n	1000a7ec <sms_i2c_master_write+0x74>
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a7d8:	4c0c      	ldr	r4, [pc, #48]	; (1000a80c <sms_i2c_master_write+0x94>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a7da:	4e0a      	ldr	r6, [pc, #40]	; (1000a804 <sms_i2c_master_write+0x8c>)
1000a7dc:	4d0c      	ldr	r5, [pc, #48]	; (1000a810 <sms_i2c_master_write+0x98>)
1000a7de:	4f0d      	ldr	r7, [pc, #52]	; (1000a814 <sms_i2c_master_write+0x9c>)
1000a7e0:	0031      	movs	r1, r6
1000a7e2:	0028      	movs	r0, r5
1000a7e4:	47b8      	blx	r7
1000a7e6:	2800      	cmp	r0, #0
1000a7e8:	d1f1      	bne.n	1000a7ce <sms_i2c_master_write+0x56>
1000a7ea:	e001      	b.n	1000a7f0 <sms_i2c_master_write+0x78>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a7ec:	2001      	movs	r0, #1
1000a7ee:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a7f2:	46c0      	nop			; (mov r8, r8)
1000a7f4:	10015e2c 	.word	0x10015e2c
1000a7f8:	10014c6d 	.word	0x10014c6d
1000a7fc:	100166d8 	.word	0x100166d8
1000a800:	10014b4d 	.word	0x10014b4d
1000a804:	10019b00 	.word	0x10019b00
1000a808:	10016704 	.word	0x10016704
1000a80c:	000003e9 	.word	0x000003e9
1000a810:	10019af0 	.word	0x10019af0
1000a814:	10008469 	.word	0x10008469

1000a818 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a81a:	464f      	mov	r7, r9
1000a81c:	4646      	mov	r6, r8
1000a81e:	b4c0      	push	{r6, r7}
1000a820:	0004      	movs	r4, r0
1000a822:	000d      	movs	r5, r1
1000a824:	4690      	mov	r8, r2
1000a826:	001f      	movs	r7, r3
    DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
1000a828:	4828      	ldr	r0, [pc, #160]	; (1000a8cc <sms_i2c_master_read+0xb4>)
1000a82a:	4b29      	ldr	r3, [pc, #164]	; (1000a8d0 <sms_i2c_master_read+0xb8>)
1000a82c:	4798      	blx	r3
1000a82e:	002a      	movs	r2, r5
1000a830:	0021      	movs	r1, r4
1000a832:	4828      	ldr	r0, [pc, #160]	; (1000a8d4 <sms_i2c_master_read+0xbc>)
1000a834:	4b28      	ldr	r3, [pc, #160]	; (1000a8d8 <sms_i2c_master_read+0xc0>)
1000a836:	4798      	blx	r3
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a838:	b2a4      	uxth	r4, r4
1000a83a:	4b28      	ldr	r3, [pc, #160]	; (1000a8dc <sms_i2c_master_read+0xc4>)
1000a83c:	801c      	strh	r4, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a83e:	2201      	movs	r2, #1
1000a840:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a842:	685b      	ldr	r3, [r3, #4]
1000a844:	701d      	strb	r5, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a846:	4b26      	ldr	r3, [pc, #152]	; (1000a8e0 <sms_i2c_master_read+0xc8>)
1000a848:	801c      	strh	r4, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a84a:	4642      	mov	r2, r8
1000a84c:	805a      	strh	r2, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a84e:	4c25      	ldr	r4, [pc, #148]	; (1000a8e4 <sms_i2c_master_read+0xcc>)
1000a850:	4e22      	ldr	r6, [pc, #136]	; (1000a8dc <sms_i2c_master_read+0xc4>)
1000a852:	4d25      	ldr	r5, [pc, #148]	; (1000a8e8 <sms_i2c_master_read+0xd0>)
1000a854:	e003      	b.n	1000a85e <sms_i2c_master_read+0x46>
1000a856:	3c01      	subs	r4, #1
1000a858:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000a85a:	2c00      	cmp	r4, #0
1000a85c:	d02b      	beq.n	1000a8b6 <sms_i2c_master_read+0x9e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a85e:	0031      	movs	r1, r6
1000a860:	4822      	ldr	r0, [pc, #136]	; (1000a8ec <sms_i2c_master_read+0xd4>)
1000a862:	47a8      	blx	r5
1000a864:	2800      	cmp	r0, #0
1000a866:	d1f6      	bne.n	1000a856 <sms_i2c_master_read+0x3e>
1000a868:	4e1e      	ldr	r6, [pc, #120]	; (1000a8e4 <sms_i2c_master_read+0xcc>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a86a:	4d1d      	ldr	r5, [pc, #116]	; (1000a8e0 <sms_i2c_master_read+0xc8>)
1000a86c:	4c20      	ldr	r4, [pc, #128]	; (1000a8f0 <sms_i2c_master_read+0xd8>)
1000a86e:	e003      	b.n	1000a878 <sms_i2c_master_read+0x60>
1000a870:	3e01      	subs	r6, #1
1000a872:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000a874:	2e00      	cmp	r6, #0
1000a876:	d021      	beq.n	1000a8bc <sms_i2c_master_read+0xa4>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a878:	0029      	movs	r1, r5
1000a87a:	481c      	ldr	r0, [pc, #112]	; (1000a8ec <sms_i2c_master_read+0xd4>)
1000a87c:	47a0      	blx	r4
1000a87e:	2800      	cmp	r0, #0
1000a880:	d1f6      	bne.n	1000a870 <sms_i2c_master_read+0x58>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a882:	4643      	mov	r3, r8
1000a884:	2b00      	cmp	r3, #0
1000a886:	d01c      	beq.n	1000a8c2 <sms_i2c_master_read+0xaa>
1000a888:	4646      	mov	r6, r8
1000a88a:	3e01      	subs	r6, #1
1000a88c:	b2f6      	uxtb	r6, r6
1000a88e:	3601      	adds	r6, #1
1000a890:	2400      	movs	r4, #0
        data[i] = i2c_rpacket.data[i];
1000a892:	4b13      	ldr	r3, [pc, #76]	; (1000a8e0 <sms_i2c_master_read+0xc8>)
1000a894:	4699      	mov	r9, r3
        DBG_LOG("0x%02x ", data[i]);
1000a896:	4d0e      	ldr	r5, [pc, #56]	; (1000a8d0 <sms_i2c_master_read+0xb8>)
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
1000a898:	464b      	mov	r3, r9
1000a89a:	685b      	ldr	r3, [r3, #4]
1000a89c:	5d1b      	ldrb	r3, [r3, r4]
1000a89e:	553b      	strb	r3, [r7, r4]
        DBG_LOG("0x%02x ", data[i]);
1000a8a0:	480a      	ldr	r0, [pc, #40]	; (1000a8cc <sms_i2c_master_read+0xb4>)
1000a8a2:	47a8      	blx	r5
1000a8a4:	5d39      	ldrb	r1, [r7, r4]
1000a8a6:	4813      	ldr	r0, [pc, #76]	; (1000a8f4 <sms_i2c_master_read+0xdc>)
1000a8a8:	4b0b      	ldr	r3, [pc, #44]	; (1000a8d8 <sms_i2c_master_read+0xc0>)
1000a8aa:	4798      	blx	r3
1000a8ac:	3401      	adds	r4, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a8ae:	42b4      	cmp	r4, r6
1000a8b0:	d1f2      	bne.n	1000a898 <sms_i2c_master_read+0x80>
        data[i] = i2c_rpacket.data[i];
        DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a8b2:	2000      	movs	r0, #0
1000a8b4:	e006      	b.n	1000a8c4 <sms_i2c_master_read+0xac>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a8b6:	2001      	movs	r0, #1
1000a8b8:	4240      	negs	r0, r0
1000a8ba:	e003      	b.n	1000a8c4 <sms_i2c_master_read+0xac>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a8bc:	2001      	movs	r0, #1
1000a8be:	4240      	negs	r0, r0
1000a8c0:	e000      	b.n	1000a8c4 <sms_i2c_master_read+0xac>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a8c2:	2000      	movs	r0, #0
1000a8c4:	bc0c      	pop	{r2, r3}
1000a8c6:	4690      	mov	r8, r2
1000a8c8:	4699      	mov	r9, r3
1000a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a8cc:	10015e2c 	.word	0x10015e2c
1000a8d0:	10014c6d 	.word	0x10014c6d
1000a8d4:	1001670c 	.word	0x1001670c
1000a8d8:	10014b4d 	.word	0x10014b4d
1000a8dc:	10019b00 	.word	0x10019b00
1000a8e0:	10019ae4 	.word	0x10019ae4
1000a8e4:	000003e9 	.word	0x000003e9
1000a8e8:	1000848d 	.word	0x1000848d
1000a8ec:	10019af0 	.word	0x10019af0
1000a8f0:	10008445 	.word	0x10008445
1000a8f4:	10016704 	.word	0x10016704

1000a8f8 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000a8f8:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000a8fa:	4825      	ldr	r0, [pc, #148]	; (1000a990 <sms_mpu_initialize+0x98>)
1000a8fc:	4b25      	ldr	r3, [pc, #148]	; (1000a994 <sms_mpu_initialize+0x9c>)
1000a8fe:	4798      	blx	r3
1000a900:	4825      	ldr	r0, [pc, #148]	; (1000a998 <sms_mpu_initialize+0xa0>)
1000a902:	4b26      	ldr	r3, [pc, #152]	; (1000a99c <sms_mpu_initialize+0xa4>)
1000a904:	4798      	blx	r3
    res = mpu_init(NULL);
1000a906:	2000      	movs	r0, #0
1000a908:	4b25      	ldr	r3, [pc, #148]	; (1000a9a0 <sms_mpu_initialize+0xa8>)
1000a90a:	4798      	blx	r3
    if(res) {
1000a90c:	2800      	cmp	r0, #0
1000a90e:	d005      	beq.n	1000a91c <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000a910:	4824      	ldr	r0, [pc, #144]	; (1000a9a4 <sms_mpu_initialize+0xac>)
1000a912:	4b22      	ldr	r3, [pc, #136]	; (1000a99c <sms_mpu_initialize+0xa4>)
1000a914:	4798      	blx	r3
        return -1;
1000a916:	2001      	movs	r0, #1
1000a918:	4240      	negs	r0, r0
1000a91a:	e037      	b.n	1000a98c <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000a91c:	481c      	ldr	r0, [pc, #112]	; (1000a990 <sms_mpu_initialize+0x98>)
1000a91e:	4b1d      	ldr	r3, [pc, #116]	; (1000a994 <sms_mpu_initialize+0x9c>)
1000a920:	4798      	blx	r3
1000a922:	4821      	ldr	r0, [pc, #132]	; (1000a9a8 <sms_mpu_initialize+0xb0>)
1000a924:	4b1d      	ldr	r3, [pc, #116]	; (1000a99c <sms_mpu_initialize+0xa4>)
1000a926:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000a928:	2079      	movs	r0, #121	; 0x79
1000a92a:	4b20      	ldr	r3, [pc, #128]	; (1000a9ac <sms_mpu_initialize+0xb4>)
1000a92c:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000a92e:	2078      	movs	r0, #120	; 0x78
1000a930:	4b1f      	ldr	r3, [pc, #124]	; (1000a9b0 <sms_mpu_initialize+0xb8>)
1000a932:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a934:	2001      	movs	r0, #1
1000a936:	4b1f      	ldr	r3, [pc, #124]	; (1000a9b4 <sms_mpu_initialize+0xbc>)
1000a938:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000a93a:	2001      	movs	r0, #1
1000a93c:	4b1e      	ldr	r3, [pc, #120]	; (1000a9b8 <sms_mpu_initialize+0xc0>)
1000a93e:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000a940:	4d1e      	ldr	r5, [pc, #120]	; (1000a9bc <sms_mpu_initialize+0xc4>)
1000a942:	0028      	movs	r0, r5
1000a944:	4b1e      	ldr	r3, [pc, #120]	; (1000a9c0 <sms_mpu_initialize+0xc8>)
1000a946:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000a948:	1f68      	subs	r0, r5, #5
1000a94a:	4b1e      	ldr	r3, [pc, #120]	; (1000a9c4 <sms_mpu_initialize+0xcc>)
1000a94c:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000a94e:	1ea8      	subs	r0, r5, #2
1000a950:	4b1d      	ldr	r3, [pc, #116]	; (1000a9c8 <sms_mpu_initialize+0xd0>)
1000a952:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a954:	002c      	movs	r4, r5
1000a956:	2307      	movs	r3, #7
1000a958:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000a95a:	20f0      	movs	r0, #240	; 0xf0
1000a95c:	0040      	lsls	r0, r0, #1
1000a95e:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a960:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000a962:	4b1a      	ldr	r3, [pc, #104]	; (1000a9cc <sms_mpu_initialize+0xd4>)
1000a964:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a966:	2001      	movs	r0, #1
1000a968:	4b19      	ldr	r3, [pc, #100]	; (1000a9d0 <sms_mpu_initialize+0xd8>)
1000a96a:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000a96c:	2001      	movs	r0, #1
1000a96e:	4b19      	ldr	r3, [pc, #100]	; (1000a9d4 <sms_mpu_initialize+0xdc>)
1000a970:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000a972:	2201      	movs	r2, #1
1000a974:	2326      	movs	r3, #38	; 0x26
1000a976:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000a978:	2300      	movs	r3, #0
1000a97a:	322c      	adds	r2, #44	; 0x2c
1000a97c:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000a97e:	3a01      	subs	r2, #1
1000a980:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000a982:	3202      	adds	r2, #2
1000a984:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000a986:	3201      	adds	r2, #1
1000a988:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000a98a:	2000      	movs	r0, #0
}
1000a98c:	bd70      	pop	{r4, r5, r6, pc}
1000a98e:	46c0      	nop			; (mov r8, r8)
1000a990:	10015e2c 	.word	0x10015e2c
1000a994:	10014c6d 	.word	0x10014c6d
1000a998:	100167b8 	.word	0x100167b8
1000a99c:	10014b4d 	.word	0x10014b4d
1000a9a0:	1000907d 	.word	0x1000907d
1000a9a4:	100167cc 	.word	0x100167cc
1000a9a8:	100167d8 	.word	0x100167d8
1000a9ac:	10008e95 	.word	0x10008e95
1000a9b0:	10008a1d 	.word	0x10008a1d
1000a9b4:	10008dc1 	.word	0x10008dc1
1000a9b8:	100089a5 	.word	0x100089a5
1000a9bc:	1001995a 	.word	0x1001995a
1000a9c0:	10008989 	.word	0x10008989
1000a9c4:	100087ed 	.word	0x100087ed
1000a9c8:	100094c9 	.word	0x100094c9
1000a9cc:	10009939 	.word	0x10009939
1000a9d0:	100094d9 	.word	0x100094d9
1000a9d4:	10009425 	.word	0x10009425

1000a9d8 <sms_mpu_define_services>:

    return 0;
}

void sms_mpu_define_services(void)
{
1000a9d8:	b510      	push	{r4, lr}
1000a9da:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a9dc:	466b      	mov	r3, sp
1000a9de:	1dda      	adds	r2, r3, #7
1000a9e0:	2300      	movs	r3, #0
1000a9e2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000a9e4:	4c0e      	ldr	r4, [pc, #56]	; (1000aa20 <sms_mpu_define_services+0x48>)
1000a9e6:	0021      	movs	r1, r4
1000a9e8:	2002      	movs	r0, #2
1000a9ea:	4b0e      	ldr	r3, [pc, #56]	; (1000aa24 <sms_mpu_define_services+0x4c>)
1000a9ec:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000a9ee:	0020      	movs	r0, r4
1000a9f0:	4b0d      	ldr	r3, [pc, #52]	; (1000aa28 <sms_mpu_define_services+0x50>)
1000a9f2:	4798      	blx	r3
1000a9f4:	1e04      	subs	r4, r0, #0
1000a9f6:	d007      	beq.n	1000aa08 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000a9f8:	480c      	ldr	r0, [pc, #48]	; (1000aa2c <sms_mpu_define_services+0x54>)
1000a9fa:	4b0d      	ldr	r3, [pc, #52]	; (1000aa30 <sms_mpu_define_services+0x58>)
1000a9fc:	4798      	blx	r3
1000a9fe:	0021      	movs	r1, r4
1000aa00:	480c      	ldr	r0, [pc, #48]	; (1000aa34 <sms_mpu_define_services+0x5c>)
1000aa02:	4b0d      	ldr	r3, [pc, #52]	; (1000aa38 <sms_mpu_define_services+0x60>)
1000aa04:	4798      	blx	r3
1000aa06:	e008      	b.n	1000aa1a <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
1000aa08:	4808      	ldr	r0, [pc, #32]	; (1000aa2c <sms_mpu_define_services+0x54>)
1000aa0a:	4b09      	ldr	r3, [pc, #36]	; (1000aa30 <sms_mpu_define_services+0x58>)
1000aa0c:	4798      	blx	r3
1000aa0e:	2346      	movs	r3, #70	; 0x46
1000aa10:	4a0a      	ldr	r2, [pc, #40]	; (1000aa3c <sms_mpu_define_services+0x64>)
1000aa12:	5ad1      	ldrh	r1, [r2, r3]
1000aa14:	480a      	ldr	r0, [pc, #40]	; (1000aa40 <sms_mpu_define_services+0x68>)
1000aa16:	4b08      	ldr	r3, [pc, #32]	; (1000aa38 <sms_mpu_define_services+0x60>)
1000aa18:	4798      	blx	r3
    }
1000aa1a:	b002      	add	sp, #8
1000aa1c:	bd10      	pop	{r4, pc}
1000aa1e:	46c0      	nop			; (mov r8, r8)
1000aa20:	10019984 	.word	0x10019984
1000aa24:	1000a0f9 	.word	0x1000a0f9
1000aa28:	1000a0d5 	.word	0x1000a0d5
1000aa2c:	10015e2c 	.word	0x10015e2c
1000aa30:	10014c6d 	.word	0x10014c6d
1000aa34:	100167ec 	.word	0x100167ec
1000aa38:	10014b4d 	.word	0x10014b4d
1000aa3c:	10019950 	.word	0x10019950
1000aa40:	1001682c 	.word	0x1001682c

1000aa44 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000aa44:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000aa46:	2100      	movs	r1, #0
1000aa48:	4b01      	ldr	r3, [pc, #4]	; (1000aa50 <sms_led_switch_on+0xc>)
1000aa4a:	4798      	blx	r3
}
1000aa4c:	bd10      	pop	{r4, pc}
1000aa4e:	46c0      	nop			; (mov r8, r8)
1000aa50:	1000bf41 	.word	0x1000bf41

1000aa54 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000aa54:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000aa56:	2101      	movs	r1, #1
1000aa58:	4b01      	ldr	r3, [pc, #4]	; (1000aa60 <sms_led_switch_off+0xc>)
1000aa5a:	4798      	blx	r3
}
1000aa5c:	bd10      	pop	{r4, pc}
1000aa5e:	46c0      	nop			; (mov r8, r8)
1000aa60:	1000bf41 	.word	0x1000bf41

1000aa64 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000aa64:	b510      	push	{r4, lr}
1000aa66:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000aa68:	ac01      	add	r4, sp, #4
1000aa6a:	0020      	movs	r0, r4
1000aa6c:	4b0a      	ldr	r3, [pc, #40]	; (1000aa98 <sms_led_gpio_init+0x34>)
1000aa6e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000aa70:	2301      	movs	r3, #1
1000aa72:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000aa74:	0021      	movs	r1, r4
1000aa76:	2016      	movs	r0, #22
1000aa78:	4b08      	ldr	r3, [pc, #32]	; (1000aa9c <sms_led_gpio_init+0x38>)
1000aa7a:	4798      	blx	r3
1000aa7c:	2800      	cmp	r0, #0
1000aa7e:	d005      	beq.n	1000aa8c <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000aa80:	4807      	ldr	r0, [pc, #28]	; (1000aaa0 <sms_led_gpio_init+0x3c>)
1000aa82:	4b08      	ldr	r3, [pc, #32]	; (1000aaa4 <sms_led_gpio_init+0x40>)
1000aa84:	4798      	blx	r3
1000aa86:	4808      	ldr	r0, [pc, #32]	; (1000aaa8 <sms_led_gpio_init+0x44>)
1000aa88:	4b08      	ldr	r3, [pc, #32]	; (1000aaac <sms_led_gpio_init+0x48>)
1000aa8a:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000aa8c:	2016      	movs	r0, #22
1000aa8e:	4b08      	ldr	r3, [pc, #32]	; (1000aab0 <sms_led_gpio_init+0x4c>)
1000aa90:	4798      	blx	r3
}
1000aa92:	b002      	add	sp, #8
1000aa94:	bd10      	pop	{r4, pc}
1000aa96:	46c0      	nop			; (mov r8, r8)
1000aa98:	1000bcd9 	.word	0x1000bcd9
1000aa9c:	1000bce9 	.word	0x1000bce9
1000aaa0:	10015e2c 	.word	0x10015e2c
1000aaa4:	10014c6d 	.word	0x10014c6d
1000aaa8:	1001686c 	.word	0x1001686c
1000aaac:	10014b4d 	.word	0x10014b4d
1000aab0:	1000aa55 	.word	0x1000aa55

1000aab4 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000aab4:	b510      	push	{r4, lr}
1000aab6:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000aab8:	4b05      	ldr	r3, [pc, #20]	; (1000aad0 <sms_led_toggle+0x1c>)
1000aaba:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000aabc:	2800      	cmp	r0, #0
1000aabe:	d103      	bne.n	1000aac8 <sms_led_toggle+0x14>
1000aac0:	0020      	movs	r0, r4
1000aac2:	4b04      	ldr	r3, [pc, #16]	; (1000aad4 <sms_led_toggle+0x20>)
1000aac4:	4798      	blx	r3
1000aac6:	e002      	b.n	1000aace <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000aac8:	0020      	movs	r0, r4
1000aaca:	4b03      	ldr	r3, [pc, #12]	; (1000aad8 <sms_led_toggle+0x24>)
1000aacc:	4798      	blx	r3
}
1000aace:	bd10      	pop	{r4, pc}
1000aad0:	1000bef1 	.word	0x1000bef1
1000aad4:	1000aa55 	.word	0x1000aa55
1000aad8:	1000aa45 	.word	0x1000aa45

1000aadc <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000aadc:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000aade:	4b0c      	ldr	r3, [pc, #48]	; (1000ab10 <sms_led_blink_start+0x34>)
1000aae0:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000aae2:	2200      	movs	r2, #0
1000aae4:	4b0b      	ldr	r3, [pc, #44]	; (1000ab14 <sms_led_blink_start+0x38>)
1000aae6:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000aae8:	4b0b      	ldr	r3, [pc, #44]	; (1000ab18 <sms_led_blink_start+0x3c>)
1000aaea:	781b      	ldrb	r3, [r3, #0]
1000aaec:	b2db      	uxtb	r3, r3
1000aaee:	2b02      	cmp	r3, #2
1000aaf0:	d002      	beq.n	1000aaf8 <sms_led_blink_start+0x1c>
1000aaf2:	2b03      	cmp	r3, #3
1000aaf4:	d002      	beq.n	1000aafc <sms_led_blink_start+0x20>
1000aaf6:	e004      	b.n	1000ab02 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000aaf8:	2164      	movs	r1, #100	; 0x64
1000aafa:	e003      	b.n	1000ab04 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000aafc:	21c8      	movs	r1, #200	; 0xc8
1000aafe:	0049      	lsls	r1, r1, #1
        break;
1000ab00:	e000      	b.n	1000ab04 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000ab02:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000ab04:	2201      	movs	r2, #1
1000ab06:	2001      	movs	r0, #1
1000ab08:	4b04      	ldr	r3, [pc, #16]	; (1000ab1c <sms_led_blink_start+0x40>)
1000ab0a:	4798      	blx	r3
}
1000ab0c:	bd10      	pop	{r4, pc}
1000ab0e:	46c0      	nop			; (mov r8, r8)
1000ab10:	1000aa45 	.word	0x1000aa45
1000ab14:	10019b1c 	.word	0x10019b1c
1000ab18:	10019af9 	.word	0x10019af9
1000ab1c:	1000b221 	.word	0x1000b221

1000ab20 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000ab20:	b510      	push	{r4, lr}
1000ab22:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000ab24:	4a05      	ldr	r2, [pc, #20]	; (1000ab3c <sms_pressure_ms58_reset+0x1c>)
1000ab26:	231e      	movs	r3, #30
1000ab28:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ab2a:	3b1d      	subs	r3, #29
1000ab2c:	9300      	str	r3, [sp, #0]
1000ab2e:	4b04      	ldr	r3, [pc, #16]	; (1000ab40 <sms_pressure_ms58_reset+0x20>)
1000ab30:	4904      	ldr	r1, [pc, #16]	; (1000ab44 <sms_pressure_ms58_reset+0x24>)
1000ab32:	4805      	ldr	r0, [pc, #20]	; (1000ab48 <sms_pressure_ms58_reset+0x28>)
1000ab34:	4c05      	ldr	r4, [pc, #20]	; (1000ab4c <sms_pressure_ms58_reset+0x2c>)
1000ab36:	47a0      	blx	r4
}
1000ab38:	b002      	add	sp, #8
1000ab3a:	bd10      	pop	{r4, pc}
1000ab3c:	10019a4c 	.word	0x10019a4c
1000ab40:	10019a3c 	.word	0x10019a3c
1000ab44:	10019afc 	.word	0x10019afc
1000ab48:	10019b08 	.word	0x10019b08
1000ab4c:	1000b0fd 	.word	0x1000b0fd

1000ab50 <sms_pressure_ms58_read_prom>:

enum status_code sms_pressure_ms58_read_prom(void)
{
1000ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab52:	4657      	mov	r7, sl
1000ab54:	b480      	push	{r7}
1000ab56:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000ab58:	4d37      	ldr	r5, [pc, #220]	; (1000ac38 <sms_pressure_ms58_read_prom+0xe8>)
1000ab5a:	23a2      	movs	r3, #162	; 0xa2
1000ab5c:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000ab5e:	2300      	movs	r3, #0
1000ab60:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000ab62:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab64:	4c35      	ldr	r4, [pc, #212]	; (1000ac3c <sms_pressure_ms58_read_prom+0xec>)
1000ab66:	3303      	adds	r3, #3
1000ab68:	469a      	mov	sl, r3
1000ab6a:	9300      	str	r3, [sp, #0]
1000ab6c:	0023      	movs	r3, r4
1000ab6e:	002a      	movs	r2, r5
1000ab70:	4933      	ldr	r1, [pc, #204]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000ab72:	4834      	ldr	r0, [pc, #208]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000ab74:	4f34      	ldr	r7, [pc, #208]	; (1000ac48 <sms_pressure_ms58_read_prom+0xf8>)
1000ab76:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ab78:	4e34      	ldr	r6, [pc, #208]	; (1000ac4c <sms_pressure_ms58_read_prom+0xfc>)
1000ab7a:	7863      	ldrb	r3, [r4, #1]
1000ab7c:	021b      	lsls	r3, r3, #8
1000ab7e:	78a2      	ldrb	r2, [r4, #2]
1000ab80:	4313      	orrs	r3, r2
1000ab82:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000ab84:	23a4      	movs	r3, #164	; 0xa4
1000ab86:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ab88:	4653      	mov	r3, sl
1000ab8a:	9300      	str	r3, [sp, #0]
1000ab8c:	0023      	movs	r3, r4
1000ab8e:	002a      	movs	r2, r5
1000ab90:	492b      	ldr	r1, [pc, #172]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000ab92:	482c      	ldr	r0, [pc, #176]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000ab94:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ab96:	7863      	ldrb	r3, [r4, #1]
1000ab98:	021b      	lsls	r3, r3, #8
1000ab9a:	78a2      	ldrb	r2, [r4, #2]
1000ab9c:	4313      	orrs	r3, r2
1000ab9e:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000aba0:	23a6      	movs	r3, #166	; 0xa6
1000aba2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aba4:	4653      	mov	r3, sl
1000aba6:	9300      	str	r3, [sp, #0]
1000aba8:	0023      	movs	r3, r4
1000abaa:	002a      	movs	r2, r5
1000abac:	4924      	ldr	r1, [pc, #144]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000abae:	4825      	ldr	r0, [pc, #148]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000abb0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abb2:	7863      	ldrb	r3, [r4, #1]
1000abb4:	021b      	lsls	r3, r3, #8
1000abb6:	78a2      	ldrb	r2, [r4, #2]
1000abb8:	4313      	orrs	r3, r2
1000abba:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000abbc:	23a8      	movs	r3, #168	; 0xa8
1000abbe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abc0:	4653      	mov	r3, sl
1000abc2:	9300      	str	r3, [sp, #0]
1000abc4:	0023      	movs	r3, r4
1000abc6:	002a      	movs	r2, r5
1000abc8:	491d      	ldr	r1, [pc, #116]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000abca:	481e      	ldr	r0, [pc, #120]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000abcc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abce:	7863      	ldrb	r3, [r4, #1]
1000abd0:	021b      	lsls	r3, r3, #8
1000abd2:	78a2      	ldrb	r2, [r4, #2]
1000abd4:	4313      	orrs	r3, r2
1000abd6:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000abd8:	23aa      	movs	r3, #170	; 0xaa
1000abda:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abdc:	4653      	mov	r3, sl
1000abde:	9300      	str	r3, [sp, #0]
1000abe0:	0023      	movs	r3, r4
1000abe2:	002a      	movs	r2, r5
1000abe4:	4916      	ldr	r1, [pc, #88]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000abe6:	4817      	ldr	r0, [pc, #92]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000abe8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000abea:	7863      	ldrb	r3, [r4, #1]
1000abec:	021b      	lsls	r3, r3, #8
1000abee:	78a2      	ldrb	r2, [r4, #2]
1000abf0:	4313      	orrs	r3, r2
1000abf2:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000abf4:	23ac      	movs	r3, #172	; 0xac
1000abf6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000abf8:	4653      	mov	r3, sl
1000abfa:	9300      	str	r3, [sp, #0]
1000abfc:	0023      	movs	r3, r4
1000abfe:	002a      	movs	r2, r5
1000ac00:	490f      	ldr	r1, [pc, #60]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000ac02:	4810      	ldr	r0, [pc, #64]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000ac04:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ac06:	7863      	ldrb	r3, [r4, #1]
1000ac08:	021b      	lsls	r3, r3, #8
1000ac0a:	78a2      	ldrb	r2, [r4, #2]
1000ac0c:	4313      	orrs	r3, r2
1000ac0e:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000ac10:	23ae      	movs	r3, #174	; 0xae
1000ac12:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ac14:	4653      	mov	r3, sl
1000ac16:	9300      	str	r3, [sp, #0]
1000ac18:	0023      	movs	r3, r4
1000ac1a:	002a      	movs	r2, r5
1000ac1c:	4908      	ldr	r1, [pc, #32]	; (1000ac40 <sms_pressure_ms58_read_prom+0xf0>)
1000ac1e:	4809      	ldr	r0, [pc, #36]	; (1000ac44 <sms_pressure_ms58_read_prom+0xf4>)
1000ac20:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ac22:	7863      	ldrb	r3, [r4, #1]
1000ac24:	021b      	lsls	r3, r3, #8
1000ac26:	78a2      	ldrb	r2, [r4, #2]
1000ac28:	4313      	orrs	r3, r2
1000ac2a:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000ac2c:	2000      	movs	r0, #0
1000ac2e:	b002      	add	sp, #8
1000ac30:	bc04      	pop	{r2}
1000ac32:	4692      	mov	sl, r2
1000ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac36:	46c0      	nop			; (mov r8, r8)
1000ac38:	10019a4c 	.word	0x10019a4c
1000ac3c:	10019a3c 	.word	0x10019a3c
1000ac40:	10019afc 	.word	0x10019afc
1000ac44:	10019b08 	.word	0x10019b08
1000ac48:	1000b0fd 	.word	0x1000b0fd
1000ac4c:	10019a5c 	.word	0x10019a5c

1000ac50 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000ac50:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000ac52:	4b06      	ldr	r3, [pc, #24]	; (1000ac6c <sms_pressure_init+0x1c>)
1000ac54:	4798      	blx	r3
1000ac56:	2800      	cmp	r0, #0
1000ac58:	d106      	bne.n	1000ac68 <sms_pressure_init+0x18>
        pressure_device.hal.init_ok = true;
1000ac5a:	4b05      	ldr	r3, [pc, #20]	; (1000ac70 <sms_pressure_init+0x20>)
1000ac5c:	2201      	movs	r2, #1
1000ac5e:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000ac60:	2102      	movs	r1, #2
1000ac62:	3224      	adds	r2, #36	; 0x24
1000ac64:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000ac66:	e000      	b.n	1000ac6a <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000ac68:	2010      	movs	r0, #16
}
1000ac6a:	bd10      	pop	{r4, pc}
1000ac6c:	1000ab51 	.word	0x1000ab51
1000ac70:	10019a5c 	.word	0x10019a5c

1000ac74 <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000ac74:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000ac76:	4817      	ldr	r0, [pc, #92]	; (1000acd4 <sms_pressure_startup+0x60>)
1000ac78:	4b17      	ldr	r3, [pc, #92]	; (1000acd8 <sms_pressure_startup+0x64>)
1000ac7a:	4798      	blx	r3
1000ac7c:	4817      	ldr	r0, [pc, #92]	; (1000acdc <sms_pressure_startup+0x68>)
1000ac7e:	4b18      	ldr	r3, [pc, #96]	; (1000ace0 <sms_pressure_startup+0x6c>)
1000ac80:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000ac82:	2101      	movs	r1, #1
1000ac84:	2001      	movs	r0, #1
1000ac86:	4b17      	ldr	r3, [pc, #92]	; (1000ace4 <sms_pressure_startup+0x70>)
1000ac88:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000ac8a:	2101      	movs	r1, #1
1000ac8c:	2325      	movs	r3, #37	; 0x25
1000ac8e:	4a16      	ldr	r2, [pc, #88]	; (1000ace8 <sms_pressure_startup+0x74>)
1000ac90:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000ac92:	4b16      	ldr	r3, [pc, #88]	; (1000acec <sms_pressure_startup+0x78>)
1000ac94:	4798      	blx	r3
    delay_ms(3);
1000ac96:	2003      	movs	r0, #3
1000ac98:	4b15      	ldr	r3, [pc, #84]	; (1000acf0 <sms_pressure_startup+0x7c>)
1000ac9a:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000ac9c:	4b15      	ldr	r3, [pc, #84]	; (1000acf4 <sms_pressure_startup+0x80>)
1000ac9e:	4798      	blx	r3
1000aca0:	2800      	cmp	r0, #0
1000aca2:	d006      	beq.n	1000acb2 <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000aca4:	480b      	ldr	r0, [pc, #44]	; (1000acd4 <sms_pressure_startup+0x60>)
1000aca6:	4b0c      	ldr	r3, [pc, #48]	; (1000acd8 <sms_pressure_startup+0x64>)
1000aca8:	4798      	blx	r3
1000acaa:	4813      	ldr	r0, [pc, #76]	; (1000acf8 <sms_pressure_startup+0x84>)
1000acac:	4b0c      	ldr	r3, [pc, #48]	; (1000ace0 <sms_pressure_startup+0x6c>)
1000acae:	4798      	blx	r3
1000acb0:	e7fe      	b.n	1000acb0 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000acb2:	4b0d      	ldr	r3, [pc, #52]	; (1000ace8 <sms_pressure_startup+0x74>)
1000acb4:	2102      	movs	r1, #2
1000acb6:	2225      	movs	r2, #37	; 0x25
1000acb8:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000acba:	2401      	movs	r4, #1
1000acbc:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000acbe:	3a1e      	subs	r2, #30
1000acc0:	4b0e      	ldr	r3, [pc, #56]	; (1000acfc <sms_pressure_startup+0x88>)
1000acc2:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000acc4:	3901      	subs	r1, #1
1000acc6:	2001      	movs	r0, #1
1000acc8:	4b0d      	ldr	r3, [pc, #52]	; (1000ad00 <sms_pressure_startup+0x8c>)
1000acca:	4798      	blx	r3
    
    ulp_ready = true;
1000accc:	4b0d      	ldr	r3, [pc, #52]	; (1000ad04 <sms_pressure_startup+0x90>)
1000acce:	701c      	strb	r4, [r3, #0]
}
1000acd0:	bd10      	pop	{r4, pc}
1000acd2:	46c0      	nop			; (mov r8, r8)
1000acd4:	10015e2c 	.word	0x10015e2c
1000acd8:	10014c6d 	.word	0x10014c6d
1000acdc:	100168e0 	.word	0x100168e0
1000ace0:	10014b4d 	.word	0x10014b4d
1000ace4:	1000a5a5 	.word	0x1000a5a5
1000ace8:	10019a5c 	.word	0x10019a5c
1000acec:	1000ab21 	.word	0x1000ab21
1000acf0:	10008129 	.word	0x10008129
1000acf4:	1000ac51 	.word	0x1000ac51
1000acf8:	10016914 	.word	0x10016914
1000acfc:	100199e0 	.word	0x100199e0
1000ad00:	1000af75 	.word	0x1000af75
1000ad04:	100199e1 	.word	0x100199e1

1000ad08 <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad0a:	4657      	mov	r7, sl
1000ad0c:	464e      	mov	r6, r9
1000ad0e:	b4c0      	push	{r6, r7}
1000ad10:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000ad12:	2325      	movs	r3, #37	; 0x25
1000ad14:	4a2c      	ldr	r2, [pc, #176]	; (1000adc8 <sms_pressure_ms58_read_data+0xc0>)
1000ad16:	5cd3      	ldrb	r3, [r2, r3]
1000ad18:	2b03      	cmp	r3, #3
1000ad1a:	d002      	beq.n	1000ad22 <sms_pressure_ms58_read_data+0x1a>
1000ad1c:	2b04      	cmp	r3, #4
1000ad1e:	d025      	beq.n	1000ad6c <sms_pressure_ms58_read_data+0x64>
1000ad20:	e04b      	b.n	1000adba <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000ad22:	4c2a      	ldr	r4, [pc, #168]	; (1000adcc <sms_pressure_ms58_read_data+0xc4>)
1000ad24:	2300      	movs	r3, #0
1000ad26:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ad28:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ad2a:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000ad2c:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000ad2e:	4d28      	ldr	r5, [pc, #160]	; (1000add0 <sms_pressure_ms58_read_data+0xc8>)
1000ad30:	2704      	movs	r7, #4
1000ad32:	9700      	str	r7, [sp, #0]
1000ad34:	002b      	movs	r3, r5
1000ad36:	0022      	movs	r2, r4
1000ad38:	4926      	ldr	r1, [pc, #152]	; (1000add4 <sms_pressure_ms58_read_data+0xcc>)
1000ad3a:	4827      	ldr	r0, [pc, #156]	; (1000add8 <sms_pressure_ms58_read_data+0xd0>)
1000ad3c:	4e27      	ldr	r6, [pc, #156]	; (1000addc <sms_pressure_ms58_read_data+0xd4>)
1000ad3e:	46b2      	mov	sl, r6
1000ad40:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000ad42:	4e21      	ldr	r6, [pc, #132]	; (1000adc8 <sms_pressure_ms58_read_data+0xc0>)
1000ad44:	786b      	ldrb	r3, [r5, #1]
1000ad46:	041a      	lsls	r2, r3, #16
1000ad48:	78ab      	ldrb	r3, [r5, #2]
1000ad4a:	021b      	lsls	r3, r3, #8
1000ad4c:	4313      	orrs	r3, r2
1000ad4e:	78ea      	ldrb	r2, [r5, #3]
1000ad50:	4313      	orrs	r3, r2
1000ad52:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000ad54:	2352      	movs	r3, #82	; 0x52
1000ad56:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ad58:	3b51      	subs	r3, #81	; 0x51
1000ad5a:	9300      	str	r3, [sp, #0]
1000ad5c:	002b      	movs	r3, r5
1000ad5e:	0022      	movs	r2, r4
1000ad60:	491c      	ldr	r1, [pc, #112]	; (1000add4 <sms_pressure_ms58_read_data+0xcc>)
1000ad62:	481d      	ldr	r0, [pc, #116]	; (1000add8 <sms_pressure_ms58_read_data+0xd0>)
1000ad64:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000ad66:	2325      	movs	r3, #37	; 0x25
1000ad68:	54f7      	strb	r7, [r6, r3]
        break;
1000ad6a:	e026      	b.n	1000adba <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000ad6c:	4c17      	ldr	r4, [pc, #92]	; (1000adcc <sms_pressure_ms58_read_data+0xc4>)
1000ad6e:	2300      	movs	r3, #0
1000ad70:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ad72:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ad74:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000ad76:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000ad78:	4d15      	ldr	r5, [pc, #84]	; (1000add0 <sms_pressure_ms58_read_data+0xc8>)
1000ad7a:	3304      	adds	r3, #4
1000ad7c:	9300      	str	r3, [sp, #0]
1000ad7e:	002b      	movs	r3, r5
1000ad80:	0022      	movs	r2, r4
1000ad82:	4914      	ldr	r1, [pc, #80]	; (1000add4 <sms_pressure_ms58_read_data+0xcc>)
1000ad84:	4814      	ldr	r0, [pc, #80]	; (1000add8 <sms_pressure_ms58_read_data+0xd0>)
1000ad86:	4e15      	ldr	r6, [pc, #84]	; (1000addc <sms_pressure_ms58_read_data+0xd4>)
1000ad88:	46b1      	mov	r9, r6
1000ad8a:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000ad8c:	4e0e      	ldr	r6, [pc, #56]	; (1000adc8 <sms_pressure_ms58_read_data+0xc0>)
1000ad8e:	786b      	ldrb	r3, [r5, #1]
1000ad90:	041a      	lsls	r2, r3, #16
1000ad92:	78ab      	ldrb	r3, [r5, #2]
1000ad94:	021b      	lsls	r3, r3, #8
1000ad96:	4313      	orrs	r3, r2
1000ad98:	78ea      	ldrb	r2, [r5, #3]
1000ad9a:	4313      	orrs	r3, r2
1000ad9c:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000ad9e:	2342      	movs	r3, #66	; 0x42
1000ada0:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ada2:	2701      	movs	r7, #1
1000ada4:	9700      	str	r7, [sp, #0]
1000ada6:	002b      	movs	r3, r5
1000ada8:	0022      	movs	r2, r4
1000adaa:	490a      	ldr	r1, [pc, #40]	; (1000add4 <sms_pressure_ms58_read_data+0xcc>)
1000adac:	480a      	ldr	r0, [pc, #40]	; (1000add8 <sms_pressure_ms58_read_data+0xd0>)
1000adae:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000adb0:	2203      	movs	r2, #3
1000adb2:	2325      	movs	r3, #37	; 0x25
1000adb4:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000adb6:	3b01      	subs	r3, #1
1000adb8:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000adba:	2000      	movs	r0, #0
1000adbc:	b003      	add	sp, #12
1000adbe:	bc0c      	pop	{r2, r3}
1000adc0:	4691      	mov	r9, r2
1000adc2:	469a      	mov	sl, r3
1000adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000adc6:	46c0      	nop			; (mov r8, r8)
1000adc8:	10019a5c 	.word	0x10019a5c
1000adcc:	10019a4c 	.word	0x10019a4c
1000add0:	10019a3c 	.word	0x10019a3c
1000add4:	10019afc 	.word	0x10019afc
1000add8:	10019b08 	.word	0x10019b08
1000addc:	1000b0fd 	.word	0x1000b0fd

1000ade0 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ade2:	464f      	mov	r7, r9
1000ade4:	b480      	push	{r7}
1000ade6:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000ade8:	4d26      	ldr	r5, [pc, #152]	; (1000ae84 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000adea:	89ec      	ldrh	r4, [r5, #14]
1000adec:	0224      	lsls	r4, r4, #8
1000adee:	69ab      	ldr	r3, [r5, #24]
1000adf0:	1b1c      	subs	r4, r3, r4
1000adf2:	17e3      	asrs	r3, r4, #31
1000adf4:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000adf6:	8a28      	ldrh	r0, [r5, #16]
1000adf8:	4a23      	ldr	r2, [pc, #140]	; (1000ae88 <sms_pressure_ms58_calculate+0xa8>)
1000adfa:	4691      	mov	r9, r2
1000adfc:	0022      	movs	r2, r4
1000adfe:	2100      	movs	r1, #0
1000ae00:	47c8      	blx	r9
1000ae02:	0249      	lsls	r1, r1, #9
1000ae04:	0dc0      	lsrs	r0, r0, #23
1000ae06:	4308      	orrs	r0, r1
1000ae08:	23fa      	movs	r3, #250	; 0xfa
1000ae0a:	00db      	lsls	r3, r3, #3
1000ae0c:	469c      	mov	ip, r3
1000ae0e:	4460      	add	r0, ip
1000ae10:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000ae12:	89a8      	ldrh	r0, [r5, #12]
1000ae14:	0022      	movs	r2, r4
1000ae16:	9601      	str	r6, [sp, #4]
1000ae18:	0033      	movs	r3, r6
1000ae1a:	2100      	movs	r1, #0
1000ae1c:	47c8      	blx	r9
1000ae1e:	064e      	lsls	r6, r1, #25
1000ae20:	09c2      	lsrs	r2, r0, #7
1000ae22:	4332      	orrs	r2, r6
1000ae24:	11cb      	asrs	r3, r1, #7
1000ae26:	892e      	ldrh	r6, [r5, #8]
1000ae28:	2100      	movs	r1, #0
1000ae2a:	0430      	lsls	r0, r6, #16
1000ae2c:	1812      	adds	r2, r2, r0
1000ae2e:	414b      	adcs	r3, r1
1000ae30:	0016      	movs	r6, r2
1000ae32:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000ae34:	8968      	ldrh	r0, [r5, #10]
1000ae36:	0022      	movs	r2, r4
1000ae38:	9b01      	ldr	r3, [sp, #4]
1000ae3a:	2100      	movs	r1, #0
1000ae3c:	47c8      	blx	r9
1000ae3e:	060c      	lsls	r4, r1, #24
1000ae40:	0a02      	lsrs	r2, r0, #8
1000ae42:	4322      	orrs	r2, r4
1000ae44:	120b      	asrs	r3, r1, #8
1000ae46:	88ec      	ldrh	r4, [r5, #6]
1000ae48:	2100      	movs	r1, #0
1000ae4a:	03e0      	lsls	r0, r4, #15
1000ae4c:	1880      	adds	r0, r0, r2
1000ae4e:	4159      	adcs	r1, r3
1000ae50:	696a      	ldr	r2, [r5, #20]
1000ae52:	2300      	movs	r3, #0
1000ae54:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000ae56:	02cc      	lsls	r4, r1, #11
1000ae58:	0d42      	lsrs	r2, r0, #21
1000ae5a:	4322      	orrs	r2, r4
1000ae5c:	154b      	asrs	r3, r1, #21
1000ae5e:	1b92      	subs	r2, r2, r6
1000ae60:	41bb      	sbcs	r3, r7
1000ae62:	0011      	movs	r1, r2
1000ae64:	045b      	lsls	r3, r3, #17
1000ae66:	0bca      	lsrs	r2, r1, #15
1000ae68:	431a      	orrs	r2, r3
1000ae6a:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
1000ae6c:	4807      	ldr	r0, [pc, #28]	; (1000ae8c <sms_pressure_ms58_calculate+0xac>)
1000ae6e:	4b08      	ldr	r3, [pc, #32]	; (1000ae90 <sms_pressure_ms58_calculate+0xb0>)
1000ae70:	4798      	blx	r3
1000ae72:	69ea      	ldr	r2, [r5, #28]
1000ae74:	6a29      	ldr	r1, [r5, #32]
1000ae76:	4807      	ldr	r0, [pc, #28]	; (1000ae94 <sms_pressure_ms58_calculate+0xb4>)
1000ae78:	4b07      	ldr	r3, [pc, #28]	; (1000ae98 <sms_pressure_ms58_calculate+0xb8>)
1000ae7a:	4798      	blx	r3
}
1000ae7c:	b002      	add	sp, #8
1000ae7e:	bc04      	pop	{r2}
1000ae80:	4691      	mov	r9, r2
1000ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae84:	10019a5c 	.word	0x10019a5c
1000ae88:	10013059 	.word	0x10013059
1000ae8c:	10015e2c 	.word	0x10015e2c
1000ae90:	10014c6d 	.word	0x10014c6d
1000ae94:	10016954 	.word	0x10016954
1000ae98:	10014b4d 	.word	0x10014b4d

1000ae9c <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000ae9c:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000ae9e:	4b11      	ldr	r3, [pc, #68]	; (1000aee4 <sms_pressure_poll_data+0x48>)
1000aea0:	781b      	ldrb	r3, [r3, #0]
1000aea2:	2b22      	cmp	r3, #34	; 0x22
1000aea4:	d11d      	bne.n	1000aee2 <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000aea6:	4810      	ldr	r0, [pc, #64]	; (1000aee8 <sms_pressure_poll_data+0x4c>)
1000aea8:	4b10      	ldr	r3, [pc, #64]	; (1000aeec <sms_pressure_poll_data+0x50>)
1000aeaa:	4798      	blx	r3
1000aeac:	4810      	ldr	r0, [pc, #64]	; (1000aef0 <sms_pressure_poll_data+0x54>)
1000aeae:	4b11      	ldr	r3, [pc, #68]	; (1000aef4 <sms_pressure_poll_data+0x58>)
1000aeb0:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000aeb2:	4b11      	ldr	r3, [pc, #68]	; (1000aef8 <sms_pressure_poll_data+0x5c>)
1000aeb4:	4798      	blx	r3
1000aeb6:	2800      	cmp	r0, #0
1000aeb8:	d006      	beq.n	1000aec8 <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000aeba:	480b      	ldr	r0, [pc, #44]	; (1000aee8 <sms_pressure_poll_data+0x4c>)
1000aebc:	4b0b      	ldr	r3, [pc, #44]	; (1000aeec <sms_pressure_poll_data+0x50>)
1000aebe:	4798      	blx	r3
1000aec0:	480e      	ldr	r0, [pc, #56]	; (1000aefc <sms_pressure_poll_data+0x60>)
1000aec2:	4b0c      	ldr	r3, [pc, #48]	; (1000aef4 <sms_pressure_poll_data+0x58>)
1000aec4:	4798      	blx	r3
1000aec6:	e00c      	b.n	1000aee2 <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(pressure_device.hal.data_complete) {
1000aec8:	2324      	movs	r3, #36	; 0x24
1000aeca:	4a0d      	ldr	r2, [pc, #52]	; (1000af00 <sms_pressure_poll_data+0x64>)
1000aecc:	5cd3      	ldrb	r3, [r2, r3]
1000aece:	2b00      	cmp	r3, #0
1000aed0:	d007      	beq.n	1000aee2 <sms_pressure_poll_data+0x46>
                pressure_device.hal.data_complete = false;
1000aed2:	2100      	movs	r1, #0
1000aed4:	2324      	movs	r3, #36	; 0x24
1000aed6:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000aed8:	4b0a      	ldr	r3, [pc, #40]	; (1000af04 <sms_pressure_poll_data+0x68>)
1000aeda:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000aedc:	2002      	movs	r0, #2
1000aede:	4b0a      	ldr	r3, [pc, #40]	; (1000af08 <sms_pressure_poll_data+0x6c>)
1000aee0:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000aee2:	bd10      	pop	{r4, pc}
1000aee4:	10019af8 	.word	0x10019af8
1000aee8:	10015e2c 	.word	0x10015e2c
1000aeec:	10014c6d 	.word	0x10014c6d
1000aef0:	10016994 	.word	0x10016994
1000aef4:	10014b4d 	.word	0x10014b4d
1000aef8:	1000ad09 	.word	0x1000ad09
1000aefc:	100169c4 	.word	0x100169c4
1000af00:	10019a5c 	.word	0x10019a5c
1000af04:	1000ade1 	.word	0x1000ade1
1000af08:	10009f21 	.word	0x10009f21

1000af0c <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}


void sms_pressure_define_services(void)
{
1000af0c:	b510      	push	{r4, lr}
1000af0e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000af10:	466b      	mov	r3, sp
1000af12:	1dda      	adds	r2, r3, #7
1000af14:	2300      	movs	r3, #0
1000af16:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000af18:	4c0d      	ldr	r4, [pc, #52]	; (1000af50 <sms_pressure_define_services+0x44>)
1000af1a:	0021      	movs	r1, r4
1000af1c:	2001      	movs	r0, #1
1000af1e:	4b0d      	ldr	r3, [pc, #52]	; (1000af54 <sms_pressure_define_services+0x48>)
1000af20:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000af22:	0020      	movs	r0, r4
1000af24:	4b0c      	ldr	r3, [pc, #48]	; (1000af58 <sms_pressure_define_services+0x4c>)
1000af26:	4798      	blx	r3
1000af28:	1e04      	subs	r4, r0, #0
1000af2a:	d007      	beq.n	1000af3c <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000af2c:	480b      	ldr	r0, [pc, #44]	; (1000af5c <sms_pressure_define_services+0x50>)
1000af2e:	4b0c      	ldr	r3, [pc, #48]	; (1000af60 <sms_pressure_define_services+0x54>)
1000af30:	4798      	blx	r3
1000af32:	0021      	movs	r1, r4
1000af34:	480b      	ldr	r0, [pc, #44]	; (1000af64 <sms_pressure_define_services+0x58>)
1000af36:	4b0c      	ldr	r3, [pc, #48]	; (1000af68 <sms_pressure_define_services+0x5c>)
1000af38:	4798      	blx	r3
1000af3a:	e007      	b.n	1000af4c <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000af3c:	4807      	ldr	r0, [pc, #28]	; (1000af5c <sms_pressure_define_services+0x50>)
1000af3e:	4b08      	ldr	r3, [pc, #32]	; (1000af60 <sms_pressure_define_services+0x54>)
1000af40:	4798      	blx	r3
1000af42:	4b0a      	ldr	r3, [pc, #40]	; (1000af6c <sms_pressure_define_services+0x60>)
1000af44:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000af46:	480a      	ldr	r0, [pc, #40]	; (1000af70 <sms_pressure_define_services+0x64>)
1000af48:	4b07      	ldr	r3, [pc, #28]	; (1000af68 <sms_pressure_define_services+0x5c>)
1000af4a:	4798      	blx	r3
    }
1000af4c:	b002      	add	sp, #8
1000af4e:	bd10      	pop	{r4, pc}
1000af50:	10019a88 	.word	0x10019a88
1000af54:	1000a0f9 	.word	0x1000a0f9
1000af58:	1000a0d5 	.word	0x1000a0d5
1000af5c:	10015e2c 	.word	0x10015e2c
1000af60:	10014c6d 	.word	0x10014c6d
1000af64:	100169fc 	.word	0x100169fc
1000af68:	10014b4d 	.word	0x10014b4d
1000af6c:	10019a5c 	.word	0x10019a5c
1000af70:	10016a44 	.word	0x10016a44

1000af74 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000af74:	b510      	push	{r4, lr}
1000af76:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000af78:	2800      	cmp	r0, #0
1000af7a:	d007      	beq.n	1000af8c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000af7c:	2102      	movs	r1, #2
1000af7e:	2330      	movs	r3, #48	; 0x30
1000af80:	4a15      	ldr	r2, [pc, #84]	; (1000afd8 <sms_sensors_interrupt_toggle+0x64>)
1000af82:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000af84:	201e      	movs	r0, #30
1000af86:	4b15      	ldr	r3, [pc, #84]	; (1000afdc <sms_sensors_interrupt_toggle+0x68>)
1000af88:	4798      	blx	r3
1000af8a:	e006      	b.n	1000af9a <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000af8c:	2100      	movs	r1, #0
1000af8e:	2330      	movs	r3, #48	; 0x30
1000af90:	4a11      	ldr	r2, [pc, #68]	; (1000afd8 <sms_sensors_interrupt_toggle+0x64>)
1000af92:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000af94:	201e      	movs	r0, #30
1000af96:	4b12      	ldr	r3, [pc, #72]	; (1000afe0 <sms_sensors_interrupt_toggle+0x6c>)
1000af98:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000af9a:	2c00      	cmp	r4, #0
1000af9c:	d010      	beq.n	1000afc0 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000af9e:	4b11      	ldr	r3, [pc, #68]	; (1000afe4 <sms_sensors_interrupt_toggle+0x70>)
1000afa0:	2103      	movs	r1, #3
1000afa2:	2225      	movs	r2, #37	; 0x25
1000afa4:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000afa6:	3901      	subs	r1, #1
1000afa8:	3203      	adds	r2, #3
1000afaa:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000afac:	2100      	movs	r1, #0
1000afae:	480e      	ldr	r0, [pc, #56]	; (1000afe8 <sms_sensors_interrupt_toggle+0x74>)
1000afb0:	4b0e      	ldr	r3, [pc, #56]	; (1000afec <sms_sensors_interrupt_toggle+0x78>)
1000afb2:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000afb4:	4b0e      	ldr	r3, [pc, #56]	; (1000aff0 <sms_sensors_interrupt_toggle+0x7c>)
1000afb6:	4798      	blx	r3
        sensors_active = true;
1000afb8:	2201      	movs	r2, #1
1000afba:	4b0e      	ldr	r3, [pc, #56]	; (1000aff4 <sms_sensors_interrupt_toggle+0x80>)
1000afbc:	701a      	strb	r2, [r3, #0]
1000afbe:	e00a      	b.n	1000afd6 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000afc0:	2102      	movs	r1, #2
1000afc2:	2325      	movs	r3, #37	; 0x25
1000afc4:	4a07      	ldr	r2, [pc, #28]	; (1000afe4 <sms_sensors_interrupt_toggle+0x70>)
1000afc6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000afc8:	4b0b      	ldr	r3, [pc, #44]	; (1000aff8 <sms_sensors_interrupt_toggle+0x84>)
1000afca:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000afcc:	4b0b      	ldr	r3, [pc, #44]	; (1000affc <sms_sensors_interrupt_toggle+0x88>)
1000afce:	4798      	blx	r3
        sensors_active = false;
1000afd0:	2200      	movs	r2, #0
1000afd2:	4b08      	ldr	r3, [pc, #32]	; (1000aff4 <sms_sensors_interrupt_toggle+0x80>)
1000afd4:	701a      	strb	r2, [r3, #0]
    }
}
1000afd6:	bd10      	pop	{r4, pc}
1000afd8:	10019950 	.word	0x10019950
1000afdc:	1000c1e9 	.word	0x1000c1e9
1000afe0:	1000c245 	.word	0x1000c245
1000afe4:	10019a5c 	.word	0x10019a5c
1000afe8:	0000051c 	.word	0x0000051c
1000afec:	1000b15d 	.word	0x1000b15d
1000aff0:	1000b191 	.word	0x1000b191
1000aff4:	10019aec 	.word	0x10019aec
1000aff8:	1000b185 	.word	0x1000b185
1000affc:	1000b1b1 	.word	0x1000b1b1

1000b000 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000b000:	b510      	push	{r4, lr}
1000b002:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000b004:	2800      	cmp	r0, #0
1000b006:	d016      	beq.n	1000b036 <sms_sensors_switch+0x36>
        if(sms_mpu_initialize()) {
1000b008:	4b14      	ldr	r3, [pc, #80]	; (1000b05c <sms_sensors_switch+0x5c>)
1000b00a:	4798      	blx	r3
1000b00c:	2800      	cmp	r0, #0
1000b00e:	d00a      	beq.n	1000b026 <sms_sensors_switch+0x26>
            DBG_LOG_DEV("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000b010:	4813      	ldr	r0, [pc, #76]	; (1000b060 <sms_sensors_switch+0x60>)
1000b012:	4b14      	ldr	r3, [pc, #80]	; (1000b064 <sms_sensors_switch+0x64>)
1000b014:	4798      	blx	r3
1000b016:	4814      	ldr	r0, [pc, #80]	; (1000b068 <sms_sensors_switch+0x68>)
1000b018:	4b14      	ldr	r3, [pc, #80]	; (1000b06c <sms_sensors_switch+0x6c>)
1000b01a:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b01c:	2100      	movs	r1, #0
1000b01e:	2006      	movs	r0, #6
1000b020:	4b13      	ldr	r3, [pc, #76]	; (1000b070 <sms_sensors_switch+0x70>)
1000b022:	4798      	blx	r3
1000b024:	e00b      	b.n	1000b03e <sms_sensors_switch+0x3e>
        }
        else {
            mpu_device.hal.init_ok = true;
1000b026:	2201      	movs	r2, #1
1000b028:	4b12      	ldr	r3, [pc, #72]	; (1000b074 <sms_sensors_switch+0x74>)
1000b02a:	711a      	strb	r2, [r3, #4]
            sms_sensors_interrupt_toggle(true, false);
1000b02c:	2100      	movs	r1, #0
1000b02e:	2001      	movs	r0, #1
1000b030:	4b11      	ldr	r3, [pc, #68]	; (1000b078 <sms_sensors_switch+0x78>)
1000b032:	4798      	blx	r3
1000b034:	e003      	b.n	1000b03e <sms_sensors_switch+0x3e>
        }
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000b036:	2100      	movs	r1, #0
1000b038:	2006      	movs	r0, #6
1000b03a:	4b0d      	ldr	r3, [pc, #52]	; (1000b070 <sms_sensors_switch+0x70>)
1000b03c:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000b03e:	2c00      	cmp	r4, #0
1000b040:	d006      	beq.n	1000b050 <sms_sensors_switch+0x50>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000b042:	2101      	movs	r1, #1
1000b044:	2325      	movs	r3, #37	; 0x25
1000b046:	4a0d      	ldr	r2, [pc, #52]	; (1000b07c <sms_sensors_switch+0x7c>)
1000b048:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000b04a:	4b0d      	ldr	r3, [pc, #52]	; (1000b080 <sms_sensors_switch+0x80>)
1000b04c:	4798      	blx	r3
1000b04e:	e003      	b.n	1000b058 <sms_sensors_switch+0x58>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000b050:	2100      	movs	r1, #0
1000b052:	2007      	movs	r0, #7
1000b054:	4b06      	ldr	r3, [pc, #24]	; (1000b070 <sms_sensors_switch+0x70>)
1000b056:	4798      	blx	r3
    }
}
1000b058:	bd10      	pop	{r4, pc}
1000b05a:	46c0      	nop			; (mov r8, r8)
1000b05c:	1000a8f9 	.word	0x1000a8f9
1000b060:	10015e2c 	.word	0x10015e2c
1000b064:	10014c6d 	.word	0x10014c6d
1000b068:	10016a90 	.word	0x10016a90
1000b06c:	10014b4d 	.word	0x10014b4d
1000b070:	1000bf41 	.word	0x1000bf41
1000b074:	10019950 	.word	0x10019950
1000b078:	1000af75 	.word	0x1000af75
1000b07c:	10019a5c 	.word	0x10019a5c
1000b080:	1000ac75 	.word	0x1000ac75

1000b084 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b084:	b530      	push	{r4, r5, lr}
1000b086:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b088:	ac01      	add	r4, sp, #4
1000b08a:	0020      	movs	r0, r4
1000b08c:	4b13      	ldr	r3, [pc, #76]	; (1000b0dc <sms_spi_master_configure+0x58>)
1000b08e:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b090:	2310      	movs	r3, #16
1000b092:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b094:	0021      	movs	r1, r4
1000b096:	4812      	ldr	r0, [pc, #72]	; (1000b0e0 <sms_spi_master_configure+0x5c>)
1000b098:	4b12      	ldr	r3, [pc, #72]	; (1000b0e4 <sms_spi_master_configure+0x60>)
1000b09a:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b09c:	ac02      	add	r4, sp, #8
1000b09e:	0020      	movs	r0, r4
1000b0a0:	4b11      	ldr	r3, [pc, #68]	; (1000b0e8 <sms_spi_master_configure+0x64>)
1000b0a2:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b0a4:	2368      	movs	r3, #104	; 0x68
1000b0a6:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b0a8:	2300      	movs	r3, #0
1000b0aa:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b0ac:	3311      	adds	r3, #17
1000b0ae:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b0b0:	3b0d      	subs	r3, #13
1000b0b2:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b0b4:	2213      	movs	r2, #19
1000b0b6:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b0b8:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b0ba:	3a14      	subs	r2, #20
1000b0bc:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b0be:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b0c0:	3213      	adds	r2, #19
1000b0c2:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b0c4:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b0c6:	4d09      	ldr	r5, [pc, #36]	; (1000b0ec <sms_spi_master_configure+0x68>)
1000b0c8:	0022      	movs	r2, r4
1000b0ca:	4909      	ldr	r1, [pc, #36]	; (1000b0f0 <sms_spi_master_configure+0x6c>)
1000b0cc:	0028      	movs	r0, r5
1000b0ce:	4b09      	ldr	r3, [pc, #36]	; (1000b0f4 <sms_spi_master_configure+0x70>)
1000b0d0:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b0d2:	0028      	movs	r0, r5
1000b0d4:	4b08      	ldr	r3, [pc, #32]	; (1000b0f8 <sms_spi_master_configure+0x74>)
1000b0d6:	4798      	blx	r3
}
1000b0d8:	b00d      	add	sp, #52	; 0x34
1000b0da:	bd30      	pop	{r4, r5, pc}
1000b0dc:	1000b685 	.word	0x1000b685
1000b0e0:	10019afc 	.word	0x10019afc
1000b0e4:	1000b6bd 	.word	0x1000b6bd
1000b0e8:	1000b691 	.word	0x1000b691
1000b0ec:	10019b08 	.word	0x10019b08
1000b0f0:	40007000 	.word	0x40007000
1000b0f4:	1000b78d 	.word	0x1000b78d
1000b0f8:	1000b6fd 	.word	0x1000b6fd

1000b0fc <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0fe:	b083      	sub	sp, #12
1000b100:	0004      	movs	r4, r0
1000b102:	000d      	movs	r5, r1
1000b104:	9200      	str	r2, [sp, #0]
1000b106:	9301      	str	r3, [sp, #4]
1000b108:	ab08      	add	r3, sp, #32
1000b10a:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b10c:	2201      	movs	r2, #1
1000b10e:	4f08      	ldr	r7, [pc, #32]	; (1000b130 <sms_spi_master_transceive+0x34>)
1000b110:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b112:	0033      	movs	r3, r6
1000b114:	9a01      	ldr	r2, [sp, #4]
1000b116:	9900      	ldr	r1, [sp, #0]
1000b118:	0020      	movs	r0, r4
1000b11a:	4e06      	ldr	r6, [pc, #24]	; (1000b134 <sms_spi_master_transceive+0x38>)
1000b11c:	47b0      	blx	r6
1000b11e:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b120:	2200      	movs	r2, #0
1000b122:	0029      	movs	r1, r5
1000b124:	0020      	movs	r0, r4
1000b126:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b128:	0030      	movs	r0, r6
1000b12a:	b003      	add	sp, #12
1000b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b12e:	46c0      	nop			; (mov r8, r8)
1000b130:	1000b975 	.word	0x1000b975
1000b134:	1000b8f1 	.word	0x1000b8f1

1000b138 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b138:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b13a:	4b06      	ldr	r3, [pc, #24]	; (1000b154 <sms_timer_aon_callback+0x1c>)
1000b13c:	2201      	movs	r2, #1
1000b13e:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_AON_TIMER;
1000b140:	3203      	adds	r2, #3
1000b142:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b144:	2300      	movs	r3, #0
1000b146:	2200      	movs	r2, #0
1000b148:	2103      	movs	r1, #3
1000b14a:	2042      	movs	r0, #66	; 0x42
1000b14c:	4c02      	ldr	r4, [pc, #8]	; (1000b158 <sms_timer_aon_callback+0x20>)
1000b14e:	47a0      	blx	r4
}
1000b150:	bd10      	pop	{r4, pc}
1000b152:	46c0      	nop			; (mov r8, r8)
1000b154:	10019ae0 	.word	0x10019ae0
1000b158:	1000ef9d 	.word	0x1000ef9d

1000b15c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b15c:	b530      	push	{r4, r5, lr}
1000b15e:	b083      	sub	sp, #12
1000b160:	0004      	movs	r4, r0
1000b162:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b164:	4668      	mov	r0, sp
1000b166:	4b05      	ldr	r3, [pc, #20]	; (1000b17c <sms_timer_aon_init+0x20>)
1000b168:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b16a:	466b      	mov	r3, sp
1000b16c:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b16e:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b170:	4668      	mov	r0, sp
1000b172:	4b03      	ldr	r3, [pc, #12]	; (1000b180 <sms_timer_aon_init+0x24>)
1000b174:	4798      	blx	r3
}
1000b176:	b003      	add	sp, #12
1000b178:	bd30      	pop	{r4, r5, pc}
1000b17a:	46c0      	nop			; (mov r8, r8)
1000b17c:	10008155 	.word	0x10008155
1000b180:	100081c9 	.word	0x100081c9

1000b184 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b184:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b186:	4b01      	ldr	r3, [pc, #4]	; (1000b18c <sms_timer_aon_disable+0x8>)
1000b188:	4798      	blx	r3
}
1000b18a:	bd10      	pop	{r4, pc}
1000b18c:	10008165 	.word	0x10008165

1000b190 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b190:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b192:	4804      	ldr	r0, [pc, #16]	; (1000b1a4 <sms_timer_aon_register_callback+0x14>)
1000b194:	4b04      	ldr	r3, [pc, #16]	; (1000b1a8 <sms_timer_aon_register_callback+0x18>)
1000b196:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b198:	2280      	movs	r2, #128	; 0x80
1000b19a:	0512      	lsls	r2, r2, #20
1000b19c:	4b03      	ldr	r3, [pc, #12]	; (1000b1ac <sms_timer_aon_register_callback+0x1c>)
1000b19e:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b1a0:	bd10      	pop	{r4, pc}
1000b1a2:	46c0      	nop			; (mov r8, r8)
1000b1a4:	1000b139 	.word	0x1000b139
1000b1a8:	100081b1 	.word	0x100081b1
1000b1ac:	e000e100 	.word	0xe000e100

1000b1b0 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b1b0:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b1b2:	4b04      	ldr	r3, [pc, #16]	; (1000b1c4 <sms_timer_aon_unregister_callback+0x14>)
1000b1b4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b1b6:	2180      	movs	r1, #128	; 0x80
1000b1b8:	0509      	lsls	r1, r1, #20
1000b1ba:	2380      	movs	r3, #128	; 0x80
1000b1bc:	4a02      	ldr	r2, [pc, #8]	; (1000b1c8 <sms_timer_aon_unregister_callback+0x18>)
1000b1be:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b1c0:	bd10      	pop	{r4, pc}
1000b1c2:	46c0      	nop			; (mov r8, r8)
1000b1c4:	100081bd 	.word	0x100081bd
1000b1c8:	e000e100 	.word	0xe000e100

1000b1cc <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b1cc:	b510      	push	{r4, lr}
1000b1ce:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b1d0:	ac01      	add	r4, sp, #4
1000b1d2:	0020      	movs	r0, r4
1000b1d4:	4b08      	ldr	r3, [pc, #32]	; (1000b1f8 <sms_dualtimer_init+0x2c>)
1000b1d6:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b1d8:	4a08      	ldr	r2, [pc, #32]	; (1000b1fc <sms_dualtimer_init+0x30>)
1000b1da:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1dc:	2300      	movs	r3, #0
1000b1de:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b1e0:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b1e2:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b1e4:	0020      	movs	r0, r4
1000b1e6:	4b06      	ldr	r3, [pc, #24]	; (1000b200 <sms_dualtimer_init+0x34>)
1000b1e8:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b1ea:	2000      	movs	r0, #0
1000b1ec:	4c05      	ldr	r4, [pc, #20]	; (1000b204 <sms_dualtimer_init+0x38>)
1000b1ee:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b1f0:	2001      	movs	r0, #1
1000b1f2:	47a0      	blx	r4
}
1000b1f4:	b008      	add	sp, #32
1000b1f6:	bd10      	pop	{r4, pc}
1000b1f8:	1000b9d9 	.word	0x1000b9d9
1000b1fc:	018cba80 	.word	0x018cba80
1000b200:	1000ba6d 	.word	0x1000ba6d
1000b204:	1000ba49 	.word	0x1000ba49

1000b208 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b208:	b510      	push	{r4, lr}
1000b20a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b20c:	4b02      	ldr	r3, [pc, #8]	; (1000b218 <sms_dualtimer_register_callback+0x10>)
1000b20e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b210:	0020      	movs	r0, r4
1000b212:	4b02      	ldr	r3, [pc, #8]	; (1000b21c <sms_dualtimer_register_callback+0x14>)
1000b214:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b216:	bd10      	pop	{r4, pc}
1000b218:	1000bb71 	.word	0x1000bb71
1000b21c:	1000ba49 	.word	0x1000ba49

1000b220 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b220:	b510      	push	{r4, lr}
1000b222:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b224:	2801      	cmp	r0, #1
1000b226:	d006      	beq.n	1000b236 <sms_dualtimer_start+0x16>
1000b228:	2800      	cmp	r0, #0
1000b22a:	d002      	beq.n	1000b232 <sms_dualtimer_start+0x12>
1000b22c:	2802      	cmp	r0, #2
1000b22e:	d004      	beq.n	1000b23a <sms_dualtimer_start+0x1a>
1000b230:	e005      	b.n	1000b23e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b232:	221a      	movs	r2, #26
1000b234:	e004      	b.n	1000b240 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b236:	4a0c      	ldr	r2, [pc, #48]	; (1000b268 <sms_dualtimer_start+0x48>)
        break;
1000b238:	e002      	b.n	1000b240 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b23a:	4a0c      	ldr	r2, [pc, #48]	; (1000b26c <sms_dualtimer_start+0x4c>)
        break;
1000b23c:	e000      	b.n	1000b240 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b23e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b240:	2900      	cmp	r1, #0
1000b242:	d101      	bne.n	1000b248 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b244:	21fa      	movs	r1, #250	; 0xfa
1000b246:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b248:	2000      	movs	r0, #0
1000b24a:	4b09      	ldr	r3, [pc, #36]	; (1000b270 <sms_dualtimer_start+0x50>)
1000b24c:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b24e:	434a      	muls	r2, r1
1000b250:	2100      	movs	r1, #0
1000b252:	0020      	movs	r0, r4
1000b254:	4b07      	ldr	r3, [pc, #28]	; (1000b274 <sms_dualtimer_start+0x54>)
1000b256:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b258:	0020      	movs	r0, r4
1000b25a:	4b07      	ldr	r3, [pc, #28]	; (1000b278 <sms_dualtimer_start+0x58>)
1000b25c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b25e:	2280      	movs	r2, #128	; 0x80
1000b260:	01d2      	lsls	r2, r2, #7
1000b262:	4b06      	ldr	r3, [pc, #24]	; (1000b27c <sms_dualtimer_start+0x5c>)
1000b264:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b266:	bd10      	pop	{r4, pc}
1000b268:	00006590 	.word	0x00006590
1000b26c:	018cba80 	.word	0x018cba80
1000b270:	100199e1 	.word	0x100199e1
1000b274:	1000b9fd 	.word	0x1000b9fd
1000b278:	1000ba25 	.word	0x1000ba25
1000b27c:	e000e100 	.word	0xe000e100

1000b280 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b280:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b282:	4b01      	ldr	r3, [pc, #4]	; (1000b288 <sms_dualtimer_stop+0x8>)
1000b284:	4798      	blx	r3
}
1000b286:	bd10      	pop	{r4, pc}
1000b288:	1000ba49 	.word	0x1000ba49

1000b28c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b28c:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b28e:	4b06      	ldr	r3, [pc, #24]	; (1000b2a8 <sms_dualtimer1_cb+0x1c>)
1000b290:	2201      	movs	r2, #1
1000b292:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b294:	3204      	adds	r2, #4
1000b296:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b298:	2300      	movs	r3, #0
1000b29a:	2200      	movs	r2, #0
1000b29c:	2101      	movs	r1, #1
1000b29e:	2040      	movs	r0, #64	; 0x40
1000b2a0:	4c02      	ldr	r4, [pc, #8]	; (1000b2ac <sms_dualtimer1_cb+0x20>)
1000b2a2:	47a0      	blx	r4
}
1000b2a4:	bd10      	pop	{r4, pc}
1000b2a6:	46c0      	nop			; (mov r8, r8)
1000b2a8:	10019ae0 	.word	0x10019ae0
1000b2ac:	1000ef9d 	.word	0x1000ef9d

1000b2b0 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b2b0:	b510      	push	{r4, lr}
    sms_current_interrupt.int_on = true;
1000b2b2:	4b06      	ldr	r3, [pc, #24]	; (1000b2cc <sms_dualtimer2_cb+0x1c>)
1000b2b4:	2201      	movs	r2, #1
1000b2b6:	705a      	strb	r2, [r3, #1]
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b2b8:	3205      	adds	r2, #5
1000b2ba:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b2bc:	2300      	movs	r3, #0
1000b2be:	2200      	movs	r2, #0
1000b2c0:	2101      	movs	r1, #1
1000b2c2:	2041      	movs	r0, #65	; 0x41
1000b2c4:	4c02      	ldr	r4, [pc, #8]	; (1000b2d0 <sms_dualtimer2_cb+0x20>)
1000b2c6:	47a0      	blx	r4
}
1000b2c8:	bd10      	pop	{r4, pc}
1000b2ca:	46c0      	nop			; (mov r8, r8)
1000b2cc:	10019ae0 	.word	0x10019ae0
1000b2d0:	1000ef9d 	.word	0x1000ef9d

1000b2d4 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b2d4:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b2d6:	4b7c      	ldr	r3, [pc, #496]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b2d8:	781b      	ldrb	r3, [r3, #0]
1000b2da:	b2db      	uxtb	r3, r3
1000b2dc:	2b01      	cmp	r3, #1
1000b2de:	d003      	beq.n	1000b2e8 <sms_dualtimer1_fn+0x14>
1000b2e0:	2b02      	cmp	r3, #2
1000b2e2:	d100      	bne.n	1000b2e6 <sms_dualtimer1_fn+0x12>
1000b2e4:	e0ae      	b.n	1000b444 <sms_dualtimer1_fn+0x170>
1000b2e6:	e0e7      	b.n	1000b4b8 <sms_dualtimer1_fn+0x1e4>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b2e8:	2200      	movs	r2, #0
1000b2ea:	4b77      	ldr	r3, [pc, #476]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b2ec:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b2ee:	4c77      	ldr	r4, [pc, #476]	; (1000b4cc <sms_dualtimer1_fn+0x1f8>)
1000b2f0:	7863      	ldrb	r3, [r4, #1]
1000b2f2:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b2f4:	4b76      	ldr	r3, [pc, #472]	; (1000b4d0 <sms_dualtimer1_fn+0x1fc>)
1000b2f6:	4798      	blx	r3
1000b2f8:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b2fa:	4876      	ldr	r0, [pc, #472]	; (1000b4d4 <sms_dualtimer1_fn+0x200>)
1000b2fc:	4b76      	ldr	r3, [pc, #472]	; (1000b4d8 <sms_dualtimer1_fn+0x204>)
1000b2fe:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b300:	7823      	ldrb	r3, [r4, #0]
1000b302:	2b01      	cmp	r3, #1
1000b304:	d002      	beq.n	1000b30c <sms_dualtimer1_fn+0x38>
1000b306:	2b02      	cmp	r3, #2
1000b308:	d04c      	beq.n	1000b3a4 <sms_dualtimer1_fn+0xd0>
1000b30a:	e093      	b.n	1000b434 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b30c:	4b6f      	ldr	r3, [pc, #444]	; (1000b4cc <sms_dualtimer1_fn+0x1f8>)
1000b30e:	785b      	ldrb	r3, [r3, #1]
1000b310:	2b01      	cmp	r3, #1
1000b312:	d002      	beq.n	1000b31a <sms_dualtimer1_fn+0x46>
1000b314:	2b02      	cmp	r3, #2
1000b316:	d023      	beq.n	1000b360 <sms_dualtimer1_fn+0x8c>
1000b318:	e03b      	b.n	1000b392 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b31a:	4b70      	ldr	r3, [pc, #448]	; (1000b4dc <sms_dualtimer1_fn+0x208>)
1000b31c:	781b      	ldrb	r3, [r3, #0]
1000b31e:	2b00      	cmp	r3, #0
1000b320:	d115      	bne.n	1000b34e <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b322:	4a6f      	ldr	r2, [pc, #444]	; (1000b4e0 <sms_dualtimer1_fn+0x20c>)
1000b324:	7813      	ldrb	r3, [r2, #0]
1000b326:	3301      	adds	r3, #1
1000b328:	b2db      	uxtb	r3, r3
1000b32a:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b32c:	2b0f      	cmp	r3, #15
1000b32e:	d905      	bls.n	1000b33c <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b330:	2200      	movs	r2, #0
1000b332:	4b65      	ldr	r3, [pc, #404]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b334:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b336:	4b6b      	ldr	r3, [pc, #428]	; (1000b4e4 <sms_dualtimer1_fn+0x210>)
1000b338:	4798      	blx	r3
1000b33a:	e0c4      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b33c:	2201      	movs	r2, #1
1000b33e:	4b62      	ldr	r3, [pc, #392]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b340:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b342:	2200      	movs	r2, #0
1000b344:	21fa      	movs	r1, #250	; 0xfa
1000b346:	2001      	movs	r0, #1
1000b348:	4b67      	ldr	r3, [pc, #412]	; (1000b4e8 <sms_dualtimer1_fn+0x214>)
1000b34a:	4798      	blx	r3
1000b34c:	e0bb      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b34e:	4b67      	ldr	r3, [pc, #412]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b350:	781b      	ldrb	r3, [r3, #0]
1000b352:	2b00      	cmp	r3, #0
1000b354:	d000      	beq.n	1000b358 <sms_dualtimer1_fn+0x84>
1000b356:	e0b6      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b358:	2201      	movs	r2, #1
1000b35a:	4b65      	ldr	r3, [pc, #404]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b35c:	701a      	strb	r2, [r3, #0]
1000b35e:	e0b2      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b360:	4b5e      	ldr	r3, [pc, #376]	; (1000b4dc <sms_dualtimer1_fn+0x208>)
1000b362:	781b      	ldrb	r3, [r3, #0]
1000b364:	2b00      	cmp	r3, #0
1000b366:	d10b      	bne.n	1000b380 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b368:	2200      	movs	r2, #0
1000b36a:	4b5d      	ldr	r3, [pc, #372]	; (1000b4e0 <sms_dualtimer1_fn+0x20c>)
1000b36c:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b36e:	3201      	adds	r2, #1
1000b370:	4b55      	ldr	r3, [pc, #340]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b372:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b374:	2200      	movs	r2, #0
1000b376:	2164      	movs	r1, #100	; 0x64
1000b378:	2001      	movs	r0, #1
1000b37a:	4b5b      	ldr	r3, [pc, #364]	; (1000b4e8 <sms_dualtimer1_fn+0x214>)
1000b37c:	4798      	blx	r3
1000b37e:	e0a2      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b380:	4b5a      	ldr	r3, [pc, #360]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b382:	781b      	ldrb	r3, [r3, #0]
1000b384:	2b00      	cmp	r3, #0
1000b386:	d000      	beq.n	1000b38a <sms_dualtimer1_fn+0xb6>
1000b388:	e09d      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b38a:	2201      	movs	r2, #1
1000b38c:	4b58      	ldr	r3, [pc, #352]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b38e:	701a      	strb	r2, [r3, #0]
1000b390:	e099      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b392:	4b56      	ldr	r3, [pc, #344]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b394:	781b      	ldrb	r3, [r3, #0]
1000b396:	2b00      	cmp	r3, #0
1000b398:	d000      	beq.n	1000b39c <sms_dualtimer1_fn+0xc8>
1000b39a:	e094      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b39c:	2201      	movs	r2, #1
1000b39e:	4b54      	ldr	r3, [pc, #336]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b3a0:	701a      	strb	r2, [r3, #0]
1000b3a2:	e090      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b3a4:	4b49      	ldr	r3, [pc, #292]	; (1000b4cc <sms_dualtimer1_fn+0x1f8>)
1000b3a6:	785b      	ldrb	r3, [r3, #1]
1000b3a8:	2b01      	cmp	r3, #1
1000b3aa:	d023      	beq.n	1000b3f4 <sms_dualtimer1_fn+0x120>
1000b3ac:	2b02      	cmp	r3, #2
1000b3ae:	d139      	bne.n	1000b424 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b3b0:	4b4a      	ldr	r3, [pc, #296]	; (1000b4dc <sms_dualtimer1_fn+0x208>)
1000b3b2:	781b      	ldrb	r3, [r3, #0]
1000b3b4:	2b00      	cmp	r3, #0
1000b3b6:	d115      	bne.n	1000b3e4 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b3b8:	4a49      	ldr	r2, [pc, #292]	; (1000b4e0 <sms_dualtimer1_fn+0x20c>)
1000b3ba:	7813      	ldrb	r3, [r2, #0]
1000b3bc:	3301      	adds	r3, #1
1000b3be:	b2db      	uxtb	r3, r3
1000b3c0:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b3c2:	2b0f      	cmp	r3, #15
1000b3c4:	d905      	bls.n	1000b3d2 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b3c6:	2200      	movs	r2, #0
1000b3c8:	4b3f      	ldr	r3, [pc, #252]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b3ca:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b3cc:	4b45      	ldr	r3, [pc, #276]	; (1000b4e4 <sms_dualtimer1_fn+0x210>)
1000b3ce:	4798      	blx	r3
1000b3d0:	e079      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b3d2:	2201      	movs	r2, #1
1000b3d4:	4b3c      	ldr	r3, [pc, #240]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b3d6:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b3d8:	2200      	movs	r2, #0
1000b3da:	21fa      	movs	r1, #250	; 0xfa
1000b3dc:	2001      	movs	r0, #1
1000b3de:	4b42      	ldr	r3, [pc, #264]	; (1000b4e8 <sms_dualtimer1_fn+0x214>)
1000b3e0:	4798      	blx	r3
1000b3e2:	e070      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3e4:	4b41      	ldr	r3, [pc, #260]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b3e6:	781b      	ldrb	r3, [r3, #0]
1000b3e8:	2b00      	cmp	r3, #0
1000b3ea:	d16c      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b3ec:	2201      	movs	r2, #1
1000b3ee:	4b40      	ldr	r3, [pc, #256]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b3f0:	701a      	strb	r2, [r3, #0]
1000b3f2:	e068      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b3f4:	4b39      	ldr	r3, [pc, #228]	; (1000b4dc <sms_dualtimer1_fn+0x208>)
1000b3f6:	781b      	ldrb	r3, [r3, #0]
1000b3f8:	2b00      	cmp	r3, #0
1000b3fa:	d10b      	bne.n	1000b414 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b3fc:	2200      	movs	r2, #0
1000b3fe:	4b38      	ldr	r3, [pc, #224]	; (1000b4e0 <sms_dualtimer1_fn+0x20c>)
1000b400:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b402:	3201      	adds	r2, #1
1000b404:	4b30      	ldr	r3, [pc, #192]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b406:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b408:	2200      	movs	r2, #0
1000b40a:	2164      	movs	r1, #100	; 0x64
1000b40c:	2001      	movs	r0, #1
1000b40e:	4b36      	ldr	r3, [pc, #216]	; (1000b4e8 <sms_dualtimer1_fn+0x214>)
1000b410:	4798      	blx	r3
1000b412:	e058      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b414:	4b35      	ldr	r3, [pc, #212]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b416:	781b      	ldrb	r3, [r3, #0]
1000b418:	2b00      	cmp	r3, #0
1000b41a:	d154      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b41c:	2201      	movs	r2, #1
1000b41e:	4b34      	ldr	r3, [pc, #208]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b420:	701a      	strb	r2, [r3, #0]
1000b422:	e050      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b424:	4b31      	ldr	r3, [pc, #196]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b426:	781b      	ldrb	r3, [r3, #0]
1000b428:	2b00      	cmp	r3, #0
1000b42a:	d14c      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b42c:	2201      	movs	r2, #1
1000b42e:	4b30      	ldr	r3, [pc, #192]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b430:	701a      	strb	r2, [r3, #0]
1000b432:	e048      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b434:	4b2d      	ldr	r3, [pc, #180]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b436:	781b      	ldrb	r3, [r3, #0]
1000b438:	2b00      	cmp	r3, #0
1000b43a:	d144      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b43c:	2201      	movs	r2, #1
1000b43e:	4b2c      	ldr	r3, [pc, #176]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b440:	701a      	strb	r2, [r3, #0]
1000b442:	e040      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b444:	4c21      	ldr	r4, [pc, #132]	; (1000b4cc <sms_dualtimer1_fn+0x1f8>)
1000b446:	7863      	ldrb	r3, [r4, #1]
1000b448:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b44a:	4b21      	ldr	r3, [pc, #132]	; (1000b4d0 <sms_dualtimer1_fn+0x1fc>)
1000b44c:	4798      	blx	r3
1000b44e:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b450:	4820      	ldr	r0, [pc, #128]	; (1000b4d4 <sms_dualtimer1_fn+0x200>)
1000b452:	4b21      	ldr	r3, [pc, #132]	; (1000b4d8 <sms_dualtimer1_fn+0x204>)
1000b454:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b456:	8822      	ldrh	r2, [r4, #0]
1000b458:	4b26      	ldr	r3, [pc, #152]	; (1000b4f4 <sms_dualtimer1_fn+0x220>)
1000b45a:	429a      	cmp	r2, r3
1000b45c:	d112      	bne.n	1000b484 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b45e:	4a20      	ldr	r2, [pc, #128]	; (1000b4e0 <sms_dualtimer1_fn+0x20c>)
1000b460:	7813      	ldrb	r3, [r2, #0]
1000b462:	3301      	adds	r3, #1
1000b464:	b2db      	uxtb	r3, r3
1000b466:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b468:	2b09      	cmp	r3, #9
1000b46a:	d902      	bls.n	1000b472 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b46c:	4b22      	ldr	r3, [pc, #136]	; (1000b4f8 <sms_dualtimer1_fn+0x224>)
1000b46e:	4798      	blx	r3
1000b470:	e029      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b472:	2202      	movs	r2, #2
1000b474:	4b14      	ldr	r3, [pc, #80]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b476:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b478:	2200      	movs	r2, #0
1000b47a:	21fa      	movs	r1, #250	; 0xfa
1000b47c:	2001      	movs	r0, #1
1000b47e:	4b1a      	ldr	r3, [pc, #104]	; (1000b4e8 <sms_dualtimer1_fn+0x214>)
1000b480:	4798      	blx	r3
1000b482:	e020      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b484:	2328      	movs	r3, #40	; 0x28
1000b486:	4a1d      	ldr	r2, [pc, #116]	; (1000b4fc <sms_dualtimer1_fn+0x228>)
1000b488:	5cd3      	ldrb	r3, [r2, r3]
1000b48a:	2b01      	cmp	r3, #1
1000b48c:	d109      	bne.n	1000b4a2 <sms_dualtimer1_fn+0x1ce>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b48e:	481c      	ldr	r0, [pc, #112]	; (1000b500 <sms_dualtimer1_fn+0x22c>)
1000b490:	4b1c      	ldr	r3, [pc, #112]	; (1000b504 <sms_dualtimer1_fn+0x230>)
1000b492:	4798      	blx	r3
1000b494:	481c      	ldr	r0, [pc, #112]	; (1000b508 <sms_dualtimer1_fn+0x234>)
1000b496:	4b1d      	ldr	r3, [pc, #116]	; (1000b50c <sms_dualtimer1_fn+0x238>)
1000b498:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b49a:	2101      	movs	r1, #1
1000b49c:	2000      	movs	r0, #0
1000b49e:	4b1c      	ldr	r3, [pc, #112]	; (1000b510 <sms_dualtimer1_fn+0x23c>)
1000b4a0:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b4a2:	2200      	movs	r2, #0
1000b4a4:	4b08      	ldr	r3, [pc, #32]	; (1000b4c8 <sms_dualtimer1_fn+0x1f4>)
1000b4a6:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4a8:	4b10      	ldr	r3, [pc, #64]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b4aa:	781b      	ldrb	r3, [r3, #0]
1000b4ac:	2b00      	cmp	r3, #0
1000b4ae:	d10a      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
                    ulp_ready = true;
1000b4b0:	3201      	adds	r2, #1
1000b4b2:	4b0f      	ldr	r3, [pc, #60]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b4b4:	701a      	strb	r2, [r3, #0]
1000b4b6:	e006      	b.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4b8:	4b0c      	ldr	r3, [pc, #48]	; (1000b4ec <sms_dualtimer1_fn+0x218>)
1000b4ba:	781b      	ldrb	r3, [r3, #0]
1000b4bc:	2b00      	cmp	r3, #0
1000b4be:	d102      	bne.n	1000b4c6 <sms_dualtimer1_fn+0x1f2>
            //release_sleep_lock();
            ulp_ready = true;
1000b4c0:	2201      	movs	r2, #1
1000b4c2:	4b0b      	ldr	r3, [pc, #44]	; (1000b4f0 <sms_dualtimer1_fn+0x21c>)
1000b4c4:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b4c6:	bd10      	pop	{r4, pc}
1000b4c8:	1001994c 	.word	0x1001994c
1000b4cc:	100199e8 	.word	0x100199e8
1000b4d0:	1000a315 	.word	0x1000a315
1000b4d4:	10016ac0 	.word	0x10016ac0
1000b4d8:	1000a6a9 	.word	0x1000a6a9
1000b4dc:	10019af8 	.word	0x10019af8
1000b4e0:	10019b16 	.word	0x10019b16
1000b4e4:	10009c11 	.word	0x10009c11
1000b4e8:	1000b221 	.word	0x1000b221
1000b4ec:	10019af9 	.word	0x10019af9
1000b4f0:	100199e1 	.word	0x100199e1
1000b4f4:	00000303 	.word	0x00000303
1000b4f8:	10009c29 	.word	0x10009c29
1000b4fc:	10019a5c 	.word	0x10019a5c
1000b500:	10015e2c 	.word	0x10015e2c
1000b504:	10014c6d 	.word	0x10014c6d
1000b508:	10016ad4 	.word	0x10016ad4
1000b50c:	10014b4d 	.word	0x10014b4d
1000b510:	1000af75 	.word	0x1000af75

1000b514 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b514:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b516:	4846      	ldr	r0, [pc, #280]	; (1000b630 <sms_dualtimer2_fn+0x11c>)
1000b518:	4b46      	ldr	r3, [pc, #280]	; (1000b634 <sms_dualtimer2_fn+0x120>)
1000b51a:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b51c:	4b46      	ldr	r3, [pc, #280]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b51e:	781b      	ldrb	r3, [r3, #0]
1000b520:	b2db      	uxtb	r3, r3
1000b522:	2b02      	cmp	r3, #2
1000b524:	d02f      	beq.n	1000b586 <sms_dualtimer2_fn+0x72>
1000b526:	2b03      	cmp	r3, #3
1000b528:	d054      	beq.n	1000b5d4 <sms_dualtimer2_fn+0xc0>
1000b52a:	2b01      	cmp	r3, #1
1000b52c:	d17f      	bne.n	1000b62e <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b52e:	2200      	movs	r2, #0
1000b530:	4b41      	ldr	r3, [pc, #260]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b532:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b534:	4b41      	ldr	r3, [pc, #260]	; (1000b63c <sms_dualtimer2_fn+0x128>)
1000b536:	781b      	ldrb	r3, [r3, #0]
1000b538:	2b22      	cmp	r3, #34	; 0x22
1000b53a:	d107      	bne.n	1000b54c <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b53c:	4b40      	ldr	r3, [pc, #256]	; (1000b640 <sms_dualtimer2_fn+0x12c>)
1000b53e:	781b      	ldrb	r3, [r3, #0]
1000b540:	2b00      	cmp	r3, #0
1000b542:	d174      	bne.n	1000b62e <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b544:	3201      	adds	r2, #1
1000b546:	4b3f      	ldr	r3, [pc, #252]	; (1000b644 <sms_dualtimer2_fn+0x130>)
1000b548:	701a      	strb	r2, [r3, #0]
1000b54a:	e070      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b54c:	4a3e      	ldr	r2, [pc, #248]	; (1000b648 <sms_dualtimer2_fn+0x134>)
1000b54e:	7813      	ldrb	r3, [r2, #0]
1000b550:	3301      	adds	r3, #1
1000b552:	b2db      	uxtb	r3, r3
1000b554:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b556:	2b00      	cmp	r3, #0
1000b558:	d009      	beq.n	1000b56e <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b55a:	483c      	ldr	r0, [pc, #240]	; (1000b64c <sms_dualtimer2_fn+0x138>)
1000b55c:	4b3c      	ldr	r3, [pc, #240]	; (1000b650 <sms_dualtimer2_fn+0x13c>)
1000b55e:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b560:	2200      	movs	r2, #0
1000b562:	4b35      	ldr	r3, [pc, #212]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b564:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b566:	3222      	adds	r2, #34	; 0x22
1000b568:	4b34      	ldr	r3, [pc, #208]	; (1000b63c <sms_dualtimer2_fn+0x128>)
1000b56a:	701a      	strb	r2, [r3, #0]
1000b56c:	e05f      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b56e:	2100      	movs	r1, #0
1000b570:	4838      	ldr	r0, [pc, #224]	; (1000b654 <sms_dualtimer2_fn+0x140>)
1000b572:	4b37      	ldr	r3, [pc, #220]	; (1000b650 <sms_dualtimer2_fn+0x13c>)
1000b574:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b576:	2201      	movs	r2, #1
1000b578:	4b2f      	ldr	r3, [pc, #188]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b57a:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b57c:	2164      	movs	r1, #100	; 0x64
1000b57e:	2001      	movs	r0, #1
1000b580:	4b35      	ldr	r3, [pc, #212]	; (1000b658 <sms_dualtimer2_fn+0x144>)
1000b582:	4798      	blx	r3
1000b584:	e053      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b586:	4835      	ldr	r0, [pc, #212]	; (1000b65c <sms_dualtimer2_fn+0x148>)
1000b588:	4b35      	ldr	r3, [pc, #212]	; (1000b660 <sms_dualtimer2_fn+0x14c>)
1000b58a:	4798      	blx	r3
1000b58c:	4835      	ldr	r0, [pc, #212]	; (1000b664 <sms_dualtimer2_fn+0x150>)
1000b58e:	4b30      	ldr	r3, [pc, #192]	; (1000b650 <sms_dualtimer2_fn+0x13c>)
1000b590:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b592:	2200      	movs	r2, #0
1000b594:	4b28      	ldr	r3, [pc, #160]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b596:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b598:	4a33      	ldr	r2, [pc, #204]	; (1000b668 <sms_dualtimer2_fn+0x154>)
1000b59a:	7813      	ldrb	r3, [r2, #0]
1000b59c:	3301      	adds	r3, #1
1000b59e:	b2db      	uxtb	r3, r3
1000b5a0:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b5a2:	7813      	ldrb	r3, [r2, #0]
1000b5a4:	b2db      	uxtb	r3, r3
1000b5a6:	2b07      	cmp	r3, #7
1000b5a8:	d908      	bls.n	1000b5bc <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b5aa:	2016      	movs	r0, #22
1000b5ac:	4b2f      	ldr	r3, [pc, #188]	; (1000b66c <sms_dualtimer2_fn+0x158>)
1000b5ae:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b5b0:	4b2f      	ldr	r3, [pc, #188]	; (1000b670 <sms_dualtimer2_fn+0x15c>)
1000b5b2:	4798      	blx	r3
            ulp_ready = true;
1000b5b4:	2201      	movs	r2, #1
1000b5b6:	4b23      	ldr	r3, [pc, #140]	; (1000b644 <sms_dualtimer2_fn+0x130>)
1000b5b8:	701a      	strb	r2, [r3, #0]
1000b5ba:	e038      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b5bc:	2016      	movs	r0, #22
1000b5be:	4b2d      	ldr	r3, [pc, #180]	; (1000b674 <sms_dualtimer2_fn+0x160>)
1000b5c0:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b5c2:	2202      	movs	r2, #2
1000b5c4:	4b1c      	ldr	r3, [pc, #112]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b5c6:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b5c8:	3a01      	subs	r2, #1
1000b5ca:	2164      	movs	r1, #100	; 0x64
1000b5cc:	2001      	movs	r0, #1
1000b5ce:	4b22      	ldr	r3, [pc, #136]	; (1000b658 <sms_dualtimer2_fn+0x144>)
1000b5d0:	4798      	blx	r3
1000b5d2:	e02c      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b5d4:	4821      	ldr	r0, [pc, #132]	; (1000b65c <sms_dualtimer2_fn+0x148>)
1000b5d6:	4b22      	ldr	r3, [pc, #136]	; (1000b660 <sms_dualtimer2_fn+0x14c>)
1000b5d8:	4798      	blx	r3
1000b5da:	4827      	ldr	r0, [pc, #156]	; (1000b678 <sms_dualtimer2_fn+0x164>)
1000b5dc:	4b1c      	ldr	r3, [pc, #112]	; (1000b650 <sms_dualtimer2_fn+0x13c>)
1000b5de:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b5e0:	2200      	movs	r2, #0
1000b5e2:	4b15      	ldr	r3, [pc, #84]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b5e4:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b5e6:	4a20      	ldr	r2, [pc, #128]	; (1000b668 <sms_dualtimer2_fn+0x154>)
1000b5e8:	7813      	ldrb	r3, [r2, #0]
1000b5ea:	3301      	adds	r3, #1
1000b5ec:	b2db      	uxtb	r3, r3
1000b5ee:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b5f0:	7813      	ldrb	r3, [r2, #0]
1000b5f2:	b2db      	uxtb	r3, r3
1000b5f4:	2b03      	cmp	r3, #3
1000b5f6:	d90e      	bls.n	1000b616 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b5f8:	2016      	movs	r0, #22
1000b5fa:	4b1c      	ldr	r3, [pc, #112]	; (1000b66c <sms_dualtimer2_fn+0x158>)
1000b5fc:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b5fe:	4817      	ldr	r0, [pc, #92]	; (1000b65c <sms_dualtimer2_fn+0x148>)
1000b600:	4b17      	ldr	r3, [pc, #92]	; (1000b660 <sms_dualtimer2_fn+0x14c>)
1000b602:	4798      	blx	r3
1000b604:	481d      	ldr	r0, [pc, #116]	; (1000b67c <sms_dualtimer2_fn+0x168>)
1000b606:	4b12      	ldr	r3, [pc, #72]	; (1000b650 <sms_dualtimer2_fn+0x13c>)
1000b608:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b60a:	4b1d      	ldr	r3, [pc, #116]	; (1000b680 <sms_dualtimer2_fn+0x16c>)
1000b60c:	4798      	blx	r3
            ulp_ready = true;
1000b60e:	2201      	movs	r2, #1
1000b610:	4b0c      	ldr	r3, [pc, #48]	; (1000b644 <sms_dualtimer2_fn+0x130>)
1000b612:	701a      	strb	r2, [r3, #0]
1000b614:	e00b      	b.n	1000b62e <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b616:	2016      	movs	r0, #22
1000b618:	4b16      	ldr	r3, [pc, #88]	; (1000b674 <sms_dualtimer2_fn+0x160>)
1000b61a:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b61c:	2203      	movs	r2, #3
1000b61e:	4b06      	ldr	r3, [pc, #24]	; (1000b638 <sms_dualtimer2_fn+0x124>)
1000b620:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b622:	3a02      	subs	r2, #2
1000b624:	21c8      	movs	r1, #200	; 0xc8
1000b626:	0049      	lsls	r1, r1, #1
1000b628:	2001      	movs	r0, #1
1000b62a:	4b0b      	ldr	r3, [pc, #44]	; (1000b658 <sms_dualtimer2_fn+0x144>)
1000b62c:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b62e:	bd10      	pop	{r4, pc}
1000b630:	10016b10 	.word	0x10016b10
1000b634:	1000a6a9 	.word	0x1000a6a9
1000b638:	10019af9 	.word	0x10019af9
1000b63c:	10019af8 	.word	0x10019af8
1000b640:	1001994c 	.word	0x1001994c
1000b644:	100199e1 	.word	0x100199e1
1000b648:	10019aed 	.word	0x10019aed
1000b64c:	10016b24 	.word	0x10016b24
1000b650:	10014b4d 	.word	0x10014b4d
1000b654:	10016b34 	.word	0x10016b34
1000b658:	1000b221 	.word	0x1000b221
1000b65c:	10015e2c 	.word	0x10015e2c
1000b660:	10014c6d 	.word	0x10014c6d
1000b664:	10016b50 	.word	0x10016b50
1000b668:	10019b1c 	.word	0x10019b1c
1000b66c:	1000aa55 	.word	0x1000aa55
1000b670:	10009de9 	.word	0x10009de9
1000b674:	1000aab5 	.word	0x1000aab5
1000b678:	10016b7c 	.word	0x10016b7c
1000b67c:	10016ba8 	.word	0x10016ba8
1000b680:	1000f479 	.word	0x1000f479

1000b684 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b684:	230c      	movs	r3, #12
1000b686:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b688:	2300      	movs	r3, #0
1000b68a:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b68c:	7083      	strb	r3, [r0, #2]
}
1000b68e:	4770      	bx	lr

1000b690 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b690:	2301      	movs	r3, #1
1000b692:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b694:	2300      	movs	r3, #0
1000b696:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b698:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b69a:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b69c:	3381      	adds	r3, #129	; 0x81
1000b69e:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b6a0:	3b77      	subs	r3, #119	; 0x77
1000b6a2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b6a4:	3301      	adds	r3, #1
1000b6a6:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b6a8:	3301      	adds	r3, #1
1000b6aa:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b6ac:	3301      	adds	r3, #1
1000b6ae:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b6b0:	3b0b      	subs	r3, #11
1000b6b2:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b6b4:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b6b6:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b6b8:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b6ba:	4770      	bx	lr

1000b6bc <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b6bc:	b530      	push	{r4, r5, lr}
1000b6be:	b083      	sub	sp, #12
1000b6c0:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b6c2:	780b      	ldrb	r3, [r1, #0]
1000b6c4:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b6c6:	784b      	ldrb	r3, [r1, #1]
1000b6c8:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b6ca:	788b      	ldrb	r3, [r1, #2]
1000b6cc:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b6ce:	ad01      	add	r5, sp, #4
1000b6d0:	0028      	movs	r0, r5
1000b6d2:	4b07      	ldr	r3, [pc, #28]	; (1000b6f0 <spi_attach_slave+0x34>)
1000b6d4:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b6d6:	2301      	movs	r3, #1
1000b6d8:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b6da:	7820      	ldrb	r0, [r4, #0]
1000b6dc:	0029      	movs	r1, r5
1000b6de:	4b05      	ldr	r3, [pc, #20]	; (1000b6f4 <spi_attach_slave+0x38>)
1000b6e0:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b6e2:	7820      	ldrb	r0, [r4, #0]
1000b6e4:	2101      	movs	r1, #1
1000b6e6:	4b04      	ldr	r3, [pc, #16]	; (1000b6f8 <spi_attach_slave+0x3c>)
1000b6e8:	4798      	blx	r3
}
1000b6ea:	b003      	add	sp, #12
1000b6ec:	bd30      	pop	{r4, r5, pc}
1000b6ee:	46c0      	nop			; (mov r8, r8)
1000b6f0:	1000bcd9 	.word	0x1000bcd9
1000b6f4:	1000bce9 	.word	0x1000bce9
1000b6f8:	1000bf41 	.word	0x1000bf41

1000b6fc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b6fc:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b6fe:	2201      	movs	r2, #1
1000b700:	761a      	strb	r2, [r3, #24]
}
1000b702:	4770      	bx	lr

1000b704 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b704:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b706:	2300      	movs	r3, #0
1000b708:	6802      	ldr	r2, [r0, #0]
1000b70a:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b70c:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b70e:	4a0d      	ldr	r2, [pc, #52]	; (1000b744 <spi_disable+0x40>)
1000b710:	4293      	cmp	r3, r2
1000b712:	d109      	bne.n	1000b728 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b714:	2041      	movs	r0, #65	; 0x41
1000b716:	4c0c      	ldr	r4, [pc, #48]	; (1000b748 <spi_disable+0x44>)
1000b718:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b71a:	2026      	movs	r0, #38	; 0x26
1000b71c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b71e:	2038      	movs	r0, #56	; 0x38
1000b720:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b722:	2001      	movs	r0, #1
1000b724:	47a0      	blx	r4
1000b726:	e00b      	b.n	1000b740 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b728:	4a08      	ldr	r2, [pc, #32]	; (1000b74c <spi_disable+0x48>)
1000b72a:	4293      	cmp	r3, r2
1000b72c:	d108      	bne.n	1000b740 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b72e:	2042      	movs	r0, #66	; 0x42
1000b730:	4c05      	ldr	r4, [pc, #20]	; (1000b748 <spi_disable+0x44>)
1000b732:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b734:	2027      	movs	r0, #39	; 0x27
1000b736:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b738:	2039      	movs	r0, #57	; 0x39
1000b73a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b73c:	2002      	movs	r0, #2
1000b73e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b740:	bd10      	pop	{r4, pc}
1000b742:	46c0      	nop			; (mov r8, r8)
1000b744:	40006000 	.word	0x40006000
1000b748:	1000c6d9 	.word	0x1000c6d9
1000b74c:	40007000 	.word	0x40007000

1000b750 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b750:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b752:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b754:	4b09      	ldr	r3, [pc, #36]	; (1000b77c <spi_reset+0x2c>)
1000b756:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b758:	4b09      	ldr	r3, [pc, #36]	; (1000b780 <spi_reset+0x30>)
1000b75a:	429c      	cmp	r4, r3
1000b75c:	d105      	bne.n	1000b76a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b75e:	2001      	movs	r0, #1
1000b760:	4c08      	ldr	r4, [pc, #32]	; (1000b784 <spi_reset+0x34>)
1000b762:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b764:	2038      	movs	r0, #56	; 0x38
1000b766:	47a0      	blx	r4
1000b768:	e007      	b.n	1000b77a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b76a:	4b07      	ldr	r3, [pc, #28]	; (1000b788 <spi_reset+0x38>)
1000b76c:	429c      	cmp	r4, r3
1000b76e:	d104      	bne.n	1000b77a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b770:	2002      	movs	r0, #2
1000b772:	4c04      	ldr	r4, [pc, #16]	; (1000b784 <spi_reset+0x34>)
1000b774:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b776:	2039      	movs	r0, #57	; 0x39
1000b778:	47a0      	blx	r4
	}
}
1000b77a:	bd10      	pop	{r4, pc}
1000b77c:	1000b705 	.word	0x1000b705
1000b780:	40006000 	.word	0x40006000
1000b784:	1000ca45 	.word	0x1000ca45
1000b788:	40007000 	.word	0x40007000

1000b78c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b78e:	465f      	mov	r7, fp
1000b790:	4646      	mov	r6, r8
1000b792:	b4c0      	push	{r6, r7}
1000b794:	b083      	sub	sp, #12
1000b796:	0006      	movs	r6, r0
1000b798:	4688      	mov	r8, r1
1000b79a:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b79c:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b79e:	7e0b      	ldrb	r3, [r1, #24]
1000b7a0:	07db      	lsls	r3, r3, #31
1000b7a2:	d501      	bpl.n	1000b7a8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b7a4:	2300      	movs	r3, #0
1000b7a6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b7a8:	0030      	movs	r0, r6
1000b7aa:	4b4a      	ldr	r3, [pc, #296]	; (1000b8d4 <spi_init+0x148>)
1000b7ac:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b7ae:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b7b0:	4a49      	ldr	r2, [pc, #292]	; (1000b8d8 <spi_init+0x14c>)
1000b7b2:	4293      	cmp	r3, r2
1000b7b4:	d109      	bne.n	1000b7ca <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b7b6:	2041      	movs	r0, #65	; 0x41
1000b7b8:	4c48      	ldr	r4, [pc, #288]	; (1000b8dc <spi_init+0x150>)
1000b7ba:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b7bc:	2026      	movs	r0, #38	; 0x26
1000b7be:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b7c0:	2038      	movs	r0, #56	; 0x38
1000b7c2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b7c4:	2001      	movs	r0, #1
1000b7c6:	47a0      	blx	r4
1000b7c8:	e00b      	b.n	1000b7e2 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b7ca:	4a45      	ldr	r2, [pc, #276]	; (1000b8e0 <spi_init+0x154>)
1000b7cc:	4293      	cmp	r3, r2
1000b7ce:	d108      	bne.n	1000b7e2 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b7d0:	2042      	movs	r0, #66	; 0x42
1000b7d2:	4c42      	ldr	r4, [pc, #264]	; (1000b8dc <spi_init+0x150>)
1000b7d4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b7d6:	2027      	movs	r0, #39	; 0x27
1000b7d8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b7da:	2039      	movs	r0, #57	; 0x39
1000b7dc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b7de:	2002      	movs	r0, #2
1000b7e0:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b7e2:	a801      	add	r0, sp, #4
1000b7e4:	4b3f      	ldr	r3, [pc, #252]	; (1000b8e4 <spi_init+0x158>)
1000b7e6:	4798      	blx	r3
1000b7e8:	002c      	movs	r4, r5
1000b7ea:	3408      	adds	r4, #8
1000b7ec:	2318      	movs	r3, #24
1000b7ee:	469b      	mov	fp, r3
1000b7f0:	44ab      	add	fp, r5
1000b7f2:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b7f4:	6820      	ldr	r0, [r4, #0]
1000b7f6:	1c43      	adds	r3, r0, #1
1000b7f8:	d011      	beq.n	1000b81e <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b7fa:	782b      	ldrb	r3, [r5, #0]
1000b7fc:	2b01      	cmp	r3, #1
1000b7fe:	d102      	bne.n	1000b806 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b800:	466a      	mov	r2, sp
1000b802:	7113      	strb	r3, [r2, #4]
1000b804:	e003      	b.n	1000b80e <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b806:	2b00      	cmp	r3, #0
1000b808:	d101      	bne.n	1000b80e <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b80a:	466a      	mov	r2, sp
1000b80c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b80e:	b2c0      	uxtb	r0, r0
1000b810:	a901      	add	r1, sp, #4
1000b812:	4b35      	ldr	r3, [pc, #212]	; (1000b8e8 <spi_init+0x15c>)
1000b814:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b816:	8a39      	ldrh	r1, [r7, #16]
1000b818:	7838      	ldrb	r0, [r7, #0]
1000b81a:	4b34      	ldr	r3, [pc, #208]	; (1000b8ec <spi_init+0x160>)
1000b81c:	4798      	blx	r3
1000b81e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b820:	455c      	cmp	r4, fp
1000b822:	d1e6      	bne.n	1000b7f2 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b824:	78eb      	ldrb	r3, [r5, #3]
1000b826:	4642      	mov	r2, r8
1000b828:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b82a:	782b      	ldrb	r3, [r5, #0]
1000b82c:	2b01      	cmp	r3, #1
1000b82e:	d100      	bne.n	1000b832 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b830:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b832:	782b      	ldrb	r3, [r5, #0]
1000b834:	2b00      	cmp	r3, #0
1000b836:	d101      	bne.n	1000b83c <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b838:	4642      	mov	r2, r8
1000b83a:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b83c:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b83e:	782a      	ldrb	r2, [r5, #0]
1000b840:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b842:	782a      	ldrb	r2, [r5, #0]
1000b844:	2a01      	cmp	r2, #1
1000b846:	d101      	bne.n	1000b84c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b848:	792a      	ldrb	r2, [r5, #4]
1000b84a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b84c:	786a      	ldrb	r2, [r5, #1]
1000b84e:	2a04      	cmp	r2, #4
1000b850:	d104      	bne.n	1000b85c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b852:	2124      	movs	r1, #36	; 0x24
1000b854:	5c58      	ldrb	r0, [r3, r1]
1000b856:	4302      	orrs	r2, r0
1000b858:	545a      	strb	r2, [r3, r1]
1000b85a:	e004      	b.n	1000b866 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b85c:	2124      	movs	r1, #36	; 0x24
1000b85e:	5c5a      	ldrb	r2, [r3, r1]
1000b860:	2004      	movs	r0, #4
1000b862:	4382      	bics	r2, r0
1000b864:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b866:	78aa      	ldrb	r2, [r5, #2]
1000b868:	2a01      	cmp	r2, #1
1000b86a:	d01a      	beq.n	1000b8a2 <spi_init+0x116>
1000b86c:	2a00      	cmp	r2, #0
1000b86e:	d004      	beq.n	1000b87a <spi_init+0xee>
1000b870:	2a02      	cmp	r2, #2
1000b872:	d00c      	beq.n	1000b88e <spi_init+0x102>
1000b874:	2a03      	cmp	r2, #3
1000b876:	d01e      	beq.n	1000b8b6 <spi_init+0x12a>
1000b878:	e026      	b.n	1000b8c8 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b87a:	2224      	movs	r2, #36	; 0x24
1000b87c:	5c99      	ldrb	r1, [r3, r2]
1000b87e:	2002      	movs	r0, #2
1000b880:	4381      	bics	r1, r0
1000b882:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b884:	5c99      	ldrb	r1, [r3, r2]
1000b886:	3801      	subs	r0, #1
1000b888:	4381      	bics	r1, r0
1000b88a:	5499      	strb	r1, [r3, r2]
1000b88c:	e01c      	b.n	1000b8c8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b88e:	2224      	movs	r2, #36	; 0x24
1000b890:	5c98      	ldrb	r0, [r3, r2]
1000b892:	2102      	movs	r1, #2
1000b894:	4301      	orrs	r1, r0
1000b896:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b898:	5c99      	ldrb	r1, [r3, r2]
1000b89a:	2001      	movs	r0, #1
1000b89c:	4381      	bics	r1, r0
1000b89e:	5499      	strb	r1, [r3, r2]
1000b8a0:	e012      	b.n	1000b8c8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b8a2:	2224      	movs	r2, #36	; 0x24
1000b8a4:	5c99      	ldrb	r1, [r3, r2]
1000b8a6:	2002      	movs	r0, #2
1000b8a8:	4381      	bics	r1, r0
1000b8aa:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b8ac:	5c98      	ldrb	r0, [r3, r2]
1000b8ae:	2101      	movs	r1, #1
1000b8b0:	4301      	orrs	r1, r0
1000b8b2:	5499      	strb	r1, [r3, r2]
1000b8b4:	e008      	b.n	1000b8c8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b8b6:	2224      	movs	r2, #36	; 0x24
1000b8b8:	5c98      	ldrb	r0, [r3, r2]
1000b8ba:	2102      	movs	r1, #2
1000b8bc:	4301      	orrs	r1, r0
1000b8be:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b8c0:	5c98      	ldrb	r0, [r3, r2]
1000b8c2:	2101      	movs	r1, #1
1000b8c4:	4301      	orrs	r1, r0
1000b8c6:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b8c8:	2000      	movs	r0, #0
1000b8ca:	b003      	add	sp, #12
1000b8cc:	bc0c      	pop	{r2, r3}
1000b8ce:	4690      	mov	r8, r2
1000b8d0:	469b      	mov	fp, r3
1000b8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b8d4:	1000b751 	.word	0x1000b751
1000b8d8:	40006000 	.word	0x40006000
1000b8dc:	1000c37d 	.word	0x1000c37d
1000b8e0:	40007000 	.word	0x40007000
1000b8e4:	1000bcd9 	.word	0x1000bcd9
1000b8e8:	1000bce9 	.word	0x1000bce9
1000b8ec:	1000bfcd 	.word	0x1000bfcd

1000b8f0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8f2:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b8f4:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b8f6:	2600      	movs	r6, #0
1000b8f8:	466d      	mov	r5, sp
1000b8fa:	71ee      	strb	r6, [r5, #7]
1000b8fc:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b8fe:	2c00      	cmp	r4, #0
1000b900:	d034      	beq.n	1000b96c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b902:	2900      	cmp	r1, #0
1000b904:	d104      	bne.n	1000b910 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b906:	0029      	movs	r1, r5
1000b908:	7980      	ldrb	r0, [r0, #6]
1000b90a:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b90c:	2701      	movs	r7, #1
1000b90e:	e00b      	b.n	1000b928 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b910:	2a00      	cmp	r2, #0
1000b912:	d005      	beq.n	1000b920 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b914:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b916:	2b00      	cmp	r3, #0
1000b918:	d029      	beq.n	1000b96e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b91a:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b91c:	2700      	movs	r7, #0
1000b91e:	e003      	b.n	1000b928 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b920:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b922:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b924:	466a      	mov	r2, sp
1000b926:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b928:	2528      	movs	r5, #40	; 0x28
1000b92a:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b92c:	07c0      	lsls	r0, r0, #31
1000b92e:	d4fc      	bmi.n	1000b92a <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b930:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b932:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b934:	2b00      	cmp	r3, #0
1000b936:	d014      	beq.n	1000b962 <spi_transceive_buffer_wait+0x72>
1000b938:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b93a:	4278      	negs	r0, r7
1000b93c:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b93e:	4270      	negs	r0, r6
1000b940:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b942:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b944:	07c0      	lsls	r0, r0, #31
1000b946:	d5fc      	bpl.n	1000b942 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b948:	7808      	ldrb	r0, [r1, #0]
1000b94a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b94c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b94e:	07c0      	lsls	r0, r0, #31
1000b950:	d5fc      	bpl.n	1000b94c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b952:	7920      	ldrb	r0, [r4, #4]
1000b954:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b956:	3501      	adds	r5, #1
1000b958:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b95a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b95c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b95e:	42ab      	cmp	r3, r5
1000b960:	d1ef      	bne.n	1000b942 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b962:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b964:	06db      	lsls	r3, r3, #27
1000b966:	d5fc      	bpl.n	1000b962 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b968:	2000      	movs	r0, #0
1000b96a:	e000      	b.n	1000b96e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b96c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b96e:	b003      	add	sp, #12
1000b970:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b972:	46c0      	nop			; (mov r8, r8)

1000b974 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b974:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b976:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b978:	2a00      	cmp	r2, #0
1000b97a:	d003      	beq.n	1000b984 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b97c:	2100      	movs	r1, #0
1000b97e:	4b04      	ldr	r3, [pc, #16]	; (1000b990 <spi_select_slave+0x1c>)
1000b980:	4798      	blx	r3
1000b982:	e002      	b.n	1000b98a <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b984:	2101      	movs	r1, #1
1000b986:	4b02      	ldr	r3, [pc, #8]	; (1000b990 <spi_select_slave+0x1c>)
1000b988:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b98a:	2000      	movs	r0, #0
1000b98c:	bd10      	pop	{r4, pc}
1000b98e:	46c0      	nop			; (mov r8, r8)
1000b990:	1000bf41 	.word	0x1000bf41

1000b994 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b994:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b996:	4b0d      	ldr	r3, [pc, #52]	; (1000b9cc <dualtimer_isr_handler+0x38>)
1000b998:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b99a:	2b00      	cmp	r3, #0
1000b99c:	d007      	beq.n	1000b9ae <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b99e:	2201      	movs	r2, #1
1000b9a0:	4b0a      	ldr	r3, [pc, #40]	; (1000b9cc <dualtimer_isr_handler+0x38>)
1000b9a2:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b9a4:	4b0a      	ldr	r3, [pc, #40]	; (1000b9d0 <dualtimer_isr_handler+0x3c>)
1000b9a6:	681b      	ldr	r3, [r3, #0]
1000b9a8:	2b00      	cmp	r3, #0
1000b9aa:	d000      	beq.n	1000b9ae <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b9ac:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b9ae:	2334      	movs	r3, #52	; 0x34
1000b9b0:	4a06      	ldr	r2, [pc, #24]	; (1000b9cc <dualtimer_isr_handler+0x38>)
1000b9b2:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b9b4:	2b00      	cmp	r3, #0
1000b9b6:	d007      	beq.n	1000b9c8 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b9b8:	2101      	movs	r1, #1
1000b9ba:	232c      	movs	r3, #44	; 0x2c
1000b9bc:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b9be:	4b05      	ldr	r3, [pc, #20]	; (1000b9d4 <dualtimer_isr_handler+0x40>)
1000b9c0:	681b      	ldr	r3, [r3, #0]
1000b9c2:	2b00      	cmp	r3, #0
1000b9c4:	d000      	beq.n	1000b9c8 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b9c6:	4798      	blx	r3
	}
}
1000b9c8:	bd10      	pop	{r4, pc}
1000b9ca:	46c0      	nop			; (mov r8, r8)
1000b9cc:	40001000 	.word	0x40001000
1000b9d0:	10017ea4 	.word	0x10017ea4
1000b9d4:	10017ea8 	.word	0x10017ea8

1000b9d8 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b9d8:	2301      	movs	r3, #1
1000b9da:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b9dc:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b9de:	2202      	movs	r2, #2
1000b9e0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b9e2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b9e4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b9e6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b9e8:	2200      	movs	r2, #0
1000b9ea:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b9ec:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b9ee:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b9f0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b9f2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b9f4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b9f6:	7602      	strb	r2, [r0, #24]
}
1000b9f8:	4770      	bx	lr
1000b9fa:	46c0      	nop			; (mov r8, r8)

1000b9fc <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b9fc:	2800      	cmp	r0, #0
1000b9fe:	d107      	bne.n	1000ba10 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ba00:	2900      	cmp	r1, #0
1000ba02:	d102      	bne.n	1000ba0a <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000ba04:	4b06      	ldr	r3, [pc, #24]	; (1000ba20 <dualtimer_set_counter+0x24>)
1000ba06:	601a      	str	r2, [r3, #0]
1000ba08:	e009      	b.n	1000ba1e <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000ba0a:	4b05      	ldr	r3, [pc, #20]	; (1000ba20 <dualtimer_set_counter+0x24>)
1000ba0c:	619a      	str	r2, [r3, #24]
1000ba0e:	e006      	b.n	1000ba1e <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ba10:	2900      	cmp	r1, #0
1000ba12:	d102      	bne.n	1000ba1a <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000ba14:	4b02      	ldr	r3, [pc, #8]	; (1000ba20 <dualtimer_set_counter+0x24>)
1000ba16:	621a      	str	r2, [r3, #32]
1000ba18:	e001      	b.n	1000ba1e <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000ba1a:	4b01      	ldr	r3, [pc, #4]	; (1000ba20 <dualtimer_set_counter+0x24>)
1000ba1c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000ba1e:	4770      	bx	lr
1000ba20:	40001000 	.word	0x40001000

1000ba24 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ba24:	2800      	cmp	r0, #0
1000ba26:	d105      	bne.n	1000ba34 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ba28:	4a06      	ldr	r2, [pc, #24]	; (1000ba44 <dualtimer_enable+0x20>)
1000ba2a:	7a11      	ldrb	r1, [r2, #8]
1000ba2c:	2380      	movs	r3, #128	; 0x80
1000ba2e:	430b      	orrs	r3, r1
1000ba30:	7213      	strb	r3, [r2, #8]
1000ba32:	e005      	b.n	1000ba40 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ba34:	4903      	ldr	r1, [pc, #12]	; (1000ba44 <dualtimer_enable+0x20>)
1000ba36:	2228      	movs	r2, #40	; 0x28
1000ba38:	5c88      	ldrb	r0, [r1, r2]
1000ba3a:	2380      	movs	r3, #128	; 0x80
1000ba3c:	4303      	orrs	r3, r0
1000ba3e:	548b      	strb	r3, [r1, r2]
	}
}
1000ba40:	4770      	bx	lr
1000ba42:	46c0      	nop			; (mov r8, r8)
1000ba44:	40001000 	.word	0x40001000

1000ba48 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ba48:	2800      	cmp	r0, #0
1000ba4a:	d105      	bne.n	1000ba58 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ba4c:	4a06      	ldr	r2, [pc, #24]	; (1000ba68 <dualtimer_disable+0x20>)
1000ba4e:	7a11      	ldrb	r1, [r2, #8]
1000ba50:	237f      	movs	r3, #127	; 0x7f
1000ba52:	400b      	ands	r3, r1
1000ba54:	7213      	strb	r3, [r2, #8]
1000ba56:	e005      	b.n	1000ba64 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ba58:	4903      	ldr	r1, [pc, #12]	; (1000ba68 <dualtimer_disable+0x20>)
1000ba5a:	2228      	movs	r2, #40	; 0x28
1000ba5c:	5c88      	ldrb	r0, [r1, r2]
1000ba5e:	237f      	movs	r3, #127	; 0x7f
1000ba60:	4003      	ands	r3, r0
1000ba62:	548b      	strb	r3, [r1, r2]
	}
}
1000ba64:	4770      	bx	lr
1000ba66:	46c0      	nop			; (mov r8, r8)
1000ba68:	40001000 	.word	0x40001000

1000ba6c <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000ba6c:	b570      	push	{r4, r5, r6, lr}
1000ba6e:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000ba70:	2004      	movs	r0, #4
1000ba72:	4b39      	ldr	r3, [pc, #228]	; (1000bb58 <dualtimer_init+0xec>)
1000ba74:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000ba76:	7823      	ldrb	r3, [r4, #0]
1000ba78:	2b00      	cmp	r3, #0
1000ba7a:	d102      	bne.n	1000ba82 <dualtimer_init+0x16>
1000ba7c:	7b23      	ldrb	r3, [r4, #12]
1000ba7e:	2b00      	cmp	r3, #0
1000ba80:	d065      	beq.n	1000bb4e <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000ba82:	4936      	ldr	r1, [pc, #216]	; (1000bb5c <dualtimer_init+0xf0>)
1000ba84:	68ca      	ldr	r2, [r1, #12]
1000ba86:	2320      	movs	r3, #32
1000ba88:	4313      	orrs	r3, r2
1000ba8a:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000ba8c:	7e22      	ldrb	r2, [r4, #24]
1000ba8e:	698b      	ldr	r3, [r1, #24]
1000ba90:	2003      	movs	r0, #3
1000ba92:	4002      	ands	r2, r0
1000ba94:	0112      	lsls	r2, r2, #4
1000ba96:	302d      	adds	r0, #45	; 0x2d
1000ba98:	4383      	bics	r3, r0
1000ba9a:	4313      	orrs	r3, r2
1000ba9c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000ba9e:	7823      	ldrb	r3, [r4, #0]
1000baa0:	2b00      	cmp	r3, #0
1000baa2:	d026      	beq.n	1000baf2 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000baa4:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000baa6:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000baa8:	2b00      	cmp	r3, #0
1000baaa:	d003      	beq.n	1000bab4 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000baac:	3b02      	subs	r3, #2
1000baae:	425d      	negs	r5, r3
1000bab0:	415d      	adcs	r5, r3
1000bab2:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bab4:	78a2      	ldrb	r2, [r4, #2]
1000bab6:	0052      	lsls	r2, r2, #1
1000bab8:	2502      	movs	r5, #2
1000baba:	402a      	ands	r2, r5
1000babc:	78e3      	ldrb	r3, [r4, #3]
1000babe:	009b      	lsls	r3, r3, #2
1000bac0:	350a      	adds	r5, #10
1000bac2:	402b      	ands	r3, r5
1000bac4:	431a      	orrs	r2, r3
1000bac6:	0015      	movs	r5, r2
1000bac8:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000baca:	7923      	ldrb	r3, [r4, #4]
1000bacc:	2b00      	cmp	r3, #0
1000bace:	d001      	beq.n	1000bad4 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bad0:	2320      	movs	r3, #32
1000bad2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bad4:	4b22      	ldr	r3, [pc, #136]	; (1000bb60 <dualtimer_init+0xf4>)
1000bad6:	68a2      	ldr	r2, [r4, #8]
1000bad8:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bada:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000badc:	491f      	ldr	r1, [pc, #124]	; (1000bb5c <dualtimer_init+0xf0>)
1000bade:	22c4      	movs	r2, #196	; 0xc4
1000bae0:	0052      	lsls	r2, r2, #1
1000bae2:	5c88      	ldrb	r0, [r1, r2]
1000bae4:	2301      	movs	r3, #1
1000bae6:	4303      	orrs	r3, r0
1000bae8:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000baea:	2000      	movs	r0, #0
1000baec:	4b1d      	ldr	r3, [pc, #116]	; (1000bb64 <dualtimer_init+0xf8>)
1000baee:	4798      	blx	r3
1000baf0:	e000      	b.n	1000baf4 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000baf2:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000baf4:	7b23      	ldrb	r3, [r4, #12]
1000baf6:	2b00      	cmp	r3, #0
1000baf8:	d029      	beq.n	1000bb4e <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bafa:	7b63      	ldrb	r3, [r4, #13]
1000bafc:	2b00      	cmp	r3, #0
1000bafe:	d005      	beq.n	1000bb0c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bb00:	2b01      	cmp	r3, #1
1000bb02:	d005      	beq.n	1000bb10 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bb04:	2b02      	cmp	r3, #2
1000bb06:	d104      	bne.n	1000bb12 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bb08:	2540      	movs	r5, #64	; 0x40
1000bb0a:	e002      	b.n	1000bb12 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bb0c:	2501      	movs	r5, #1
1000bb0e:	e000      	b.n	1000bb12 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bb10:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bb12:	7ba3      	ldrb	r3, [r4, #14]
1000bb14:	005b      	lsls	r3, r3, #1
1000bb16:	2102      	movs	r1, #2
1000bb18:	4019      	ands	r1, r3
1000bb1a:	7be2      	ldrb	r2, [r4, #15]
1000bb1c:	0092      	lsls	r2, r2, #2
1000bb1e:	230c      	movs	r3, #12
1000bb20:	4013      	ands	r3, r2
1000bb22:	430b      	orrs	r3, r1
1000bb24:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bb26:	7c23      	ldrb	r3, [r4, #16]
1000bb28:	2b00      	cmp	r3, #0
1000bb2a:	d001      	beq.n	1000bb30 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bb2c:	2320      	movs	r3, #32
1000bb2e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bb30:	6962      	ldr	r2, [r4, #20]
1000bb32:	4b0b      	ldr	r3, [pc, #44]	; (1000bb60 <dualtimer_init+0xf4>)
1000bb34:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bb36:	2228      	movs	r2, #40	; 0x28
1000bb38:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bb3a:	4908      	ldr	r1, [pc, #32]	; (1000bb5c <dualtimer_init+0xf0>)
1000bb3c:	3261      	adds	r2, #97	; 0x61
1000bb3e:	32ff      	adds	r2, #255	; 0xff
1000bb40:	5c88      	ldrb	r0, [r1, r2]
1000bb42:	2302      	movs	r3, #2
1000bb44:	4303      	orrs	r3, r0
1000bb46:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bb48:	2001      	movs	r0, #1
1000bb4a:	4b06      	ldr	r3, [pc, #24]	; (1000bb64 <dualtimer_init+0xf8>)
1000bb4c:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bb4e:	4906      	ldr	r1, [pc, #24]	; (1000bb68 <dualtimer_init+0xfc>)
1000bb50:	201e      	movs	r0, #30
1000bb52:	4b06      	ldr	r3, [pc, #24]	; (1000bb6c <dualtimer_init+0x100>)
1000bb54:	4798      	blx	r3
}
1000bb56:	bd70      	pop	{r4, r5, r6, pc}
1000bb58:	1000ca45 	.word	0x1000ca45
1000bb5c:	4000b000 	.word	0x4000b000
1000bb60:	40001000 	.word	0x40001000
1000bb64:	1000ba25 	.word	0x1000ba25
1000bb68:	1000b995 	.word	0x1000b995
1000bb6c:	1000cead 	.word	0x1000cead

1000bb70 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb70:	2800      	cmp	r0, #0
1000bb72:	d102      	bne.n	1000bb7a <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bb74:	4b02      	ldr	r3, [pc, #8]	; (1000bb80 <dualtimer_register_callback+0x10>)
1000bb76:	6019      	str	r1, [r3, #0]
1000bb78:	e001      	b.n	1000bb7e <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bb7a:	4b02      	ldr	r3, [pc, #8]	; (1000bb84 <dualtimer_register_callback+0x14>)
1000bb7c:	6019      	str	r1, [r3, #0]
	}
}
1000bb7e:	4770      	bx	lr
1000bb80:	10017ea4 	.word	0x10017ea4
1000bb84:	10017ea8 	.word	0x10017ea8

1000bb88 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bb88:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bb8a:	4b16      	ldr	r3, [pc, #88]	; (1000bbe4 <gpio_port0_isr_handler+0x5c>)
1000bb8c:	681d      	ldr	r5, [r3, #0]
1000bb8e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bb90:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bb92:	07cb      	lsls	r3, r1, #31
1000bb94:	d407      	bmi.n	1000bba6 <gpio_port0_isr_handler+0x1e>
1000bb96:	2301      	movs	r3, #1
1000bb98:	2401      	movs	r4, #1
1000bb9a:	0018      	movs	r0, r3
1000bb9c:	0022      	movs	r2, r4
1000bb9e:	409a      	lsls	r2, r3
1000bba0:	4211      	tst	r1, r2
1000bba2:	d014      	beq.n	1000bbce <gpio_port0_isr_handler+0x46>
1000bba4:	e001      	b.n	1000bbaa <gpio_port0_isr_handler+0x22>
1000bba6:	2201      	movs	r2, #1
1000bba8:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bbaa:	b292      	uxth	r2, r2
1000bbac:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bbae:	2346      	movs	r3, #70	; 0x46
1000bbb0:	4a0c      	ldr	r2, [pc, #48]	; (1000bbe4 <gpio_port0_isr_handler+0x5c>)
1000bbb2:	5ad3      	ldrh	r3, [r2, r3]
1000bbb4:	4103      	asrs	r3, r0
1000bbb6:	07db      	lsls	r3, r3, #31
1000bbb8:	d50c      	bpl.n	1000bbd4 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bbba:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bbbc:	5ad3      	ldrh	r3, [r2, r3]
1000bbbe:	4103      	asrs	r3, r0
1000bbc0:	07db      	lsls	r3, r3, #31
1000bbc2:	d507      	bpl.n	1000bbd4 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bbc4:	0080      	lsls	r0, r0, #2
1000bbc6:	1810      	adds	r0, r2, r0
1000bbc8:	6843      	ldr	r3, [r0, #4]
1000bbca:	4798      	blx	r3
1000bbcc:	e002      	b.n	1000bbd4 <gpio_port0_isr_handler+0x4c>
1000bbce:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bbd0:	2b10      	cmp	r3, #16
1000bbd2:	d1e2      	bne.n	1000bb9a <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bbd4:	2180      	movs	r1, #128	; 0x80
1000bbd6:	0409      	lsls	r1, r1, #16
1000bbd8:	23c0      	movs	r3, #192	; 0xc0
1000bbda:	005b      	lsls	r3, r3, #1
1000bbdc:	4a02      	ldr	r2, [pc, #8]	; (1000bbe8 <gpio_port0_isr_handler+0x60>)
1000bbde:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bbe0:	bd70      	pop	{r4, r5, r6, pc}
1000bbe2:	46c0      	nop			; (mov r8, r8)
1000bbe4:	10019b20 	.word	0x10019b20
1000bbe8:	e000e100 	.word	0xe000e100

1000bbec <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bbee:	4b18      	ldr	r3, [pc, #96]	; (1000bc50 <gpio_port1_isr_handler+0x64>)
1000bbf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bbf2:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bbf4:	b2b6      	uxth	r6, r6
1000bbf6:	0037      	movs	r7, r6
1000bbf8:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bbfa:	0b76      	lsrs	r6, r6, #13
1000bbfc:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bbfe:	4d14      	ldr	r5, [pc, #80]	; (1000bc50 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bc00:	2e00      	cmp	r6, #0
1000bc02:	d001      	beq.n	1000bc08 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bc04:	4b13      	ldr	r3, [pc, #76]	; (1000bc54 <gpio_port1_isr_handler+0x68>)
1000bc06:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bc08:	0022      	movs	r2, r4
1000bc0a:	2301      	movs	r3, #1
1000bc0c:	40a3      	lsls	r3, r4
1000bc0e:	421f      	tst	r7, r3
1000bc10:	d013      	beq.n	1000bc3a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bc12:	b29b      	uxth	r3, r3
1000bc14:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bc16:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bc18:	238e      	movs	r3, #142	; 0x8e
1000bc1a:	5aeb      	ldrh	r3, [r5, r3]
1000bc1c:	4123      	asrs	r3, r4
1000bc1e:	07db      	lsls	r3, r3, #31
1000bc20:	d50b      	bpl.n	1000bc3a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bc22:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bc24:	490a      	ldr	r1, [pc, #40]	; (1000bc50 <gpio_port1_isr_handler+0x64>)
1000bc26:	5acb      	ldrh	r3, [r1, r3]
1000bc28:	4123      	asrs	r3, r4
1000bc2a:	07db      	lsls	r3, r3, #31
1000bc2c:	d505      	bpl.n	1000bc3a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bc2e:	3212      	adds	r2, #18
1000bc30:	0092      	lsls	r2, r2, #2
1000bc32:	188a      	adds	r2, r1, r2
1000bc34:	6853      	ldr	r3, [r2, #4]
1000bc36:	4798      	blx	r3
				break;
1000bc38:	e002      	b.n	1000bc40 <gpio_port1_isr_handler+0x54>
1000bc3a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bc3c:	2c10      	cmp	r4, #16
1000bc3e:	d1df      	bne.n	1000bc00 <gpio_port1_isr_handler+0x14>
1000bc40:	2180      	movs	r1, #128	; 0x80
1000bc42:	0449      	lsls	r1, r1, #17
1000bc44:	23c0      	movs	r3, #192	; 0xc0
1000bc46:	005b      	lsls	r3, r3, #1
1000bc48:	4a03      	ldr	r2, [pc, #12]	; (1000bc58 <gpio_port1_isr_handler+0x6c>)
1000bc4a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bc4e:	46c0      	nop			; (mov r8, r8)
1000bc50:	10019b20 	.word	0x10019b20
1000bc54:	0001bc51 	.word	0x0001bc51
1000bc58:	e000e100 	.word	0xe000e100

1000bc5c <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bc5c:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bc5e:	2390      	movs	r3, #144	; 0x90
1000bc60:	4a1b      	ldr	r2, [pc, #108]	; (1000bcd0 <gpio_port2_isr_handler+0x74>)
1000bc62:	58d2      	ldr	r2, [r2, r3]
1000bc64:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bc66:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bc68:	04d9      	lsls	r1, r3, #19
1000bc6a:	d414      	bmi.n	1000bc96 <gpio_port2_isr_handler+0x3a>
1000bc6c:	0499      	lsls	r1, r3, #18
1000bc6e:	d40a      	bmi.n	1000bc86 <gpio_port2_isr_handler+0x2a>
1000bc70:	0459      	lsls	r1, r3, #17
1000bc72:	d40c      	bmi.n	1000bc8e <gpio_port2_isr_handler+0x32>
1000bc74:	0bdb      	lsrs	r3, r3, #15
1000bc76:	03db      	lsls	r3, r3, #15
1000bc78:	b29b      	uxth	r3, r3
1000bc7a:	2b00      	cmp	r3, #0
1000bc7c:	d020      	beq.n	1000bcc0 <gpio_port2_isr_handler+0x64>
1000bc7e:	2380      	movs	r3, #128	; 0x80
1000bc80:	021b      	lsls	r3, r3, #8
1000bc82:	210f      	movs	r1, #15
1000bc84:	e00a      	b.n	1000bc9c <gpio_port2_isr_handler+0x40>
1000bc86:	2380      	movs	r3, #128	; 0x80
1000bc88:	019b      	lsls	r3, r3, #6
1000bc8a:	210d      	movs	r1, #13
1000bc8c:	e006      	b.n	1000bc9c <gpio_port2_isr_handler+0x40>
1000bc8e:	2380      	movs	r3, #128	; 0x80
1000bc90:	01db      	lsls	r3, r3, #7
1000bc92:	210e      	movs	r1, #14
1000bc94:	e002      	b.n	1000bc9c <gpio_port2_isr_handler+0x40>
1000bc96:	2380      	movs	r3, #128	; 0x80
1000bc98:	015b      	lsls	r3, r3, #5
1000bc9a:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bc9c:	b29b      	uxth	r3, r3
1000bc9e:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bca0:	23d6      	movs	r3, #214	; 0xd6
1000bca2:	4a0b      	ldr	r2, [pc, #44]	; (1000bcd0 <gpio_port2_isr_handler+0x74>)
1000bca4:	5ad3      	ldrh	r3, [r2, r3]
1000bca6:	410b      	asrs	r3, r1
1000bca8:	07db      	lsls	r3, r3, #31
1000bcaa:	d509      	bpl.n	1000bcc0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bcac:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bcae:	5ad3      	ldrh	r3, [r2, r3]
1000bcb0:	410b      	asrs	r3, r1
1000bcb2:	07db      	lsls	r3, r3, #31
1000bcb4:	d504      	bpl.n	1000bcc0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bcb6:	3124      	adds	r1, #36	; 0x24
1000bcb8:	0089      	lsls	r1, r1, #2
1000bcba:	1851      	adds	r1, r2, r1
1000bcbc:	684b      	ldr	r3, [r1, #4]
1000bcbe:	4798      	blx	r3
1000bcc0:	2180      	movs	r1, #128	; 0x80
1000bcc2:	0489      	lsls	r1, r1, #18
1000bcc4:	23c0      	movs	r3, #192	; 0xc0
1000bcc6:	005b      	lsls	r3, r3, #1
1000bcc8:	4a02      	ldr	r2, [pc, #8]	; (1000bcd4 <gpio_port2_isr_handler+0x78>)
1000bcca:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bccc:	bd10      	pop	{r4, pc}
1000bcce:	46c0      	nop			; (mov r8, r8)
1000bcd0:	10019b20 	.word	0x10019b20
1000bcd4:	e000e100 	.word	0xe000e100

1000bcd8 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bcd8:	2300      	movs	r3, #0
1000bcda:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bcdc:	2201      	movs	r2, #1
1000bcde:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bce0:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bce2:	70c3      	strb	r3, [r0, #3]
}
1000bce4:	4770      	bx	lr
1000bce6:	46c0      	nop			; (mov r8, r8)

1000bce8 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bce8:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bcea:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bcec:	2801      	cmp	r0, #1
1000bcee:	d800      	bhi.n	1000bcf2 <gpio_pin_set_config+0xa>
1000bcf0:	e0c8      	b.n	1000be84 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bcf2:	2807      	cmp	r0, #7
1000bcf4:	d809      	bhi.n	1000bd0a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bcf6:	4d64      	ldr	r5, [pc, #400]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000bcf8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bcfa:	3b10      	subs	r3, #16
1000bcfc:	4003      	ands	r3, r0
1000bcfe:	009b      	lsls	r3, r3, #2
1000bd00:	2407      	movs	r4, #7
1000bd02:	409c      	lsls	r4, r3
1000bd04:	43a2      	bics	r2, r4
1000bd06:	646a      	str	r2, [r5, #68]	; 0x44
1000bd08:	e029      	b.n	1000bd5e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bd0a:	280f      	cmp	r0, #15
1000bd0c:	d809      	bhi.n	1000bd22 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bd0e:	4d5e      	ldr	r5, [pc, #376]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000bd10:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bd12:	2307      	movs	r3, #7
1000bd14:	4003      	ands	r3, r0
1000bd16:	009b      	lsls	r3, r3, #2
1000bd18:	2407      	movs	r4, #7
1000bd1a:	409c      	lsls	r4, r3
1000bd1c:	43a2      	bics	r2, r4
1000bd1e:	64aa      	str	r2, [r5, #72]	; 0x48
1000bd20:	e01d      	b.n	1000bd5e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000bd22:	2817      	cmp	r0, #23
1000bd24:	d809      	bhi.n	1000bd3a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bd26:	4d58      	ldr	r5, [pc, #352]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000bd28:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000bd2a:	2307      	movs	r3, #7
1000bd2c:	4003      	ands	r3, r0
1000bd2e:	009b      	lsls	r3, r3, #2
1000bd30:	2407      	movs	r4, #7
1000bd32:	409c      	lsls	r4, r3
1000bd34:	43a2      	bics	r2, r4
1000bd36:	64ea      	str	r2, [r5, #76]	; 0x4c
1000bd38:	e011      	b.n	1000bd5e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bd3a:	0003      	movs	r3, r0
1000bd3c:	3b2c      	subs	r3, #44	; 0x2c
1000bd3e:	2b03      	cmp	r3, #3
1000bd40:	d80d      	bhi.n	1000bd5e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bd42:	4d52      	ldr	r5, [pc, #328]	; (1000be8c <gpio_pin_set_config+0x1a4>)
1000bd44:	2482      	movs	r4, #130	; 0x82
1000bd46:	00e4      	lsls	r4, r4, #3
1000bd48:	5d2a      	ldrb	r2, [r5, r4]
1000bd4a:	0712      	lsls	r2, r2, #28
1000bd4c:	2601      	movs	r6, #1
1000bd4e:	409e      	lsls	r6, r3
1000bd50:	0f12      	lsrs	r2, r2, #28
1000bd52:	5d2b      	ldrb	r3, [r5, r4]
1000bd54:	43b2      	bics	r2, r6
1000bd56:	260f      	movs	r6, #15
1000bd58:	43b3      	bics	r3, r6
1000bd5a:	4313      	orrs	r3, r2
1000bd5c:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bd5e:	0003      	movs	r3, r0
1000bd60:	3b1d      	subs	r3, #29
1000bd62:	2b02      	cmp	r3, #2
1000bd64:	d829      	bhi.n	1000bdba <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bd66:	784b      	ldrb	r3, [r1, #1]
1000bd68:	2b01      	cmp	r3, #1
1000bd6a:	d108      	bne.n	1000bd7e <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bd6c:	4d47      	ldr	r5, [pc, #284]	; (1000be8c <gpio_pin_set_config+0x1a4>)
1000bd6e:	7d2b      	ldrb	r3, [r5, #20]
1000bd70:	241f      	movs	r4, #31
1000bd72:	1a24      	subs	r4, r4, r0
1000bd74:	2201      	movs	r2, #1
1000bd76:	40a2      	lsls	r2, r4
1000bd78:	4393      	bics	r3, r2
1000bd7a:	752b      	strb	r3, [r5, #20]
1000bd7c:	e008      	b.n	1000bd90 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bd7e:	4c43      	ldr	r4, [pc, #268]	; (1000be8c <gpio_pin_set_config+0x1a4>)
1000bd80:	7d25      	ldrb	r5, [r4, #20]
1000bd82:	221f      	movs	r2, #31
1000bd84:	1a12      	subs	r2, r2, r0
1000bd86:	2301      	movs	r3, #1
1000bd88:	4093      	lsls	r3, r2
1000bd8a:	432b      	orrs	r3, r5
1000bd8c:	b2db      	uxtb	r3, r3
1000bd8e:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bd90:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd92:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bd94:	2a00      	cmp	r2, #0
1000bd96:	d075      	beq.n	1000be84 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bd98:	493c      	ldr	r1, [pc, #240]	; (1000be8c <gpio_pin_set_config+0x1a4>)
1000bd9a:	880c      	ldrh	r4, [r1, #0]
1000bd9c:	221f      	movs	r2, #31
1000bd9e:	1a10      	subs	r0, r2, r0
1000bda0:	0080      	lsls	r0, r0, #2
1000bda2:	3301      	adds	r3, #1
1000bda4:	4083      	lsls	r3, r0
1000bda6:	4323      	orrs	r3, r4
1000bda8:	b29b      	uxth	r3, r3
1000bdaa:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bdac:	4a38      	ldr	r2, [pc, #224]	; (1000be90 <gpio_pin_set_config+0x1a8>)
1000bdae:	7811      	ldrb	r1, [r2, #0]
1000bdb0:	2302      	movs	r3, #2
1000bdb2:	430b      	orrs	r3, r1
1000bdb4:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdb6:	2300      	movs	r3, #0
1000bdb8:	e064      	b.n	1000be84 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bdba:	780a      	ldrb	r2, [r1, #0]
1000bdbc:	2a00      	cmp	r2, #0
1000bdbe:	d140      	bne.n	1000be42 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bdc0:	280f      	cmp	r0, #15
1000bdc2:	d808      	bhi.n	1000bdd6 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bdc4:	2301      	movs	r3, #1
1000bdc6:	4083      	lsls	r3, r0
1000bdc8:	b29b      	uxth	r3, r3
1000bdca:	4a32      	ldr	r2, [pc, #200]	; (1000be94 <gpio_pin_set_config+0x1ac>)
1000bdcc:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdce:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bdd0:	281f      	cmp	r0, #31
1000bdd2:	d857      	bhi.n	1000be84 <gpio_pin_set_config+0x19c>
1000bdd4:	e012      	b.n	1000bdfc <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bdd6:	281f      	cmp	r0, #31
1000bdd8:	d807      	bhi.n	1000bdea <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bdda:	220f      	movs	r2, #15
1000bddc:	4002      	ands	r2, r0
1000bdde:	2301      	movs	r3, #1
1000bde0:	4093      	lsls	r3, r2
1000bde2:	b29b      	uxth	r3, r3
1000bde4:	4a2c      	ldr	r2, [pc, #176]	; (1000be98 <gpio_pin_set_config+0x1b0>)
1000bde6:	8293      	strh	r3, [r2, #20]
1000bde8:	e008      	b.n	1000bdfc <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bdea:	230f      	movs	r3, #15
1000bdec:	4018      	ands	r0, r3
1000bdee:	3b0e      	subs	r3, #14
1000bdf0:	4083      	lsls	r3, r0
1000bdf2:	b29b      	uxth	r3, r3
1000bdf4:	4a29      	ldr	r2, [pc, #164]	; (1000be9c <gpio_pin_set_config+0x1b4>)
1000bdf6:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdf8:	2300      	movs	r3, #0
1000bdfa:	e043      	b.n	1000be84 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bdfc:	784b      	ldrb	r3, [r1, #1]
1000bdfe:	2b01      	cmp	r3, #1
1000be00:	d00c      	beq.n	1000be1c <gpio_pin_set_config+0x134>
1000be02:	2b00      	cmp	r3, #0
1000be04:	d002      	beq.n	1000be0c <gpio_pin_set_config+0x124>
1000be06:	2b02      	cmp	r3, #2
1000be08:	d010      	beq.n	1000be2c <gpio_pin_set_config+0x144>
1000be0a:	e03a      	b.n	1000be82 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000be0c:	491e      	ldr	r1, [pc, #120]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000be0e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000be10:	2301      	movs	r3, #1
1000be12:	4083      	lsls	r3, r0
1000be14:	4313      	orrs	r3, r2
1000be16:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be18:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000be1a:	e033      	b.n	1000be84 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000be1c:	491a      	ldr	r1, [pc, #104]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000be1e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000be20:	2201      	movs	r2, #1
1000be22:	4082      	lsls	r2, r0
1000be24:	4393      	bics	r3, r2
1000be26:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be28:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000be2a:	e02b      	b.n	1000be84 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000be2c:	4b16      	ldr	r3, [pc, #88]	; (1000be88 <gpio_pin_set_config+0x1a0>)
1000be2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000be30:	2201      	movs	r2, #1
1000be32:	4082      	lsls	r2, r0
1000be34:	4311      	orrs	r1, r2
1000be36:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000be38:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000be3a:	4391      	bics	r1, r2
1000be3c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be3e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000be40:	e020      	b.n	1000be84 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be42:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000be44:	2a01      	cmp	r2, #1
1000be46:	d11d      	bne.n	1000be84 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000be48:	280f      	cmp	r0, #15
1000be4a:	d806      	bhi.n	1000be5a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000be4c:	3301      	adds	r3, #1
1000be4e:	4083      	lsls	r3, r0
1000be50:	b29b      	uxth	r3, r3
1000be52:	4a10      	ldr	r2, [pc, #64]	; (1000be94 <gpio_pin_set_config+0x1ac>)
1000be54:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be56:	2300      	movs	r3, #0
1000be58:	e014      	b.n	1000be84 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000be5a:	281f      	cmp	r0, #31
1000be5c:	d808      	bhi.n	1000be70 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000be5e:	230f      	movs	r3, #15
1000be60:	4018      	ands	r0, r3
1000be62:	3b0e      	subs	r3, #14
1000be64:	4083      	lsls	r3, r0
1000be66:	b29b      	uxth	r3, r3
1000be68:	4a0b      	ldr	r2, [pc, #44]	; (1000be98 <gpio_pin_set_config+0x1b0>)
1000be6a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be6c:	2300      	movs	r3, #0
1000be6e:	e009      	b.n	1000be84 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000be70:	230f      	movs	r3, #15
1000be72:	4018      	ands	r0, r3
1000be74:	3b0e      	subs	r3, #14
1000be76:	4083      	lsls	r3, r0
1000be78:	b29b      	uxth	r3, r3
1000be7a:	4a08      	ldr	r2, [pc, #32]	; (1000be9c <gpio_pin_set_config+0x1b4>)
1000be7c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000be7e:	2300      	movs	r3, #0
1000be80:	e000      	b.n	1000be84 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000be82:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000be84:	0018      	movs	r0, r3
1000be86:	bd70      	pop	{r4, r5, r6, pc}
1000be88:	4000b000 	.word	0x4000b000
1000be8c:	4000f000 	.word	0x4000f000
1000be90:	4000e000 	.word	0x4000e000
1000be94:	40010000 	.word	0x40010000
1000be98:	40011000 	.word	0x40011000
1000be9c:	40013000 	.word	0x40013000

1000bea0 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bea0:	280f      	cmp	r0, #15
1000bea2:	d806      	bhi.n	1000beb2 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000bea4:	4b0f      	ldr	r3, [pc, #60]	; (1000bee4 <gpio_pin_get_input_level+0x44>)
1000bea6:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000bea8:	2301      	movs	r3, #1
1000beaa:	4083      	lsls	r3, r0
1000beac:	0018      	movs	r0, r3
1000beae:	4008      	ands	r0, r1
1000beb0:	e014      	b.n	1000bedc <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000beb2:	281f      	cmp	r0, #31
1000beb4:	d809      	bhi.n	1000beca <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000beb6:	4b0c      	ldr	r3, [pc, #48]	; (1000bee8 <gpio_pin_get_input_level+0x48>)
1000beb8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000beba:	230f      	movs	r3, #15
1000bebc:	4003      	ands	r3, r0
1000bebe:	001a      	movs	r2, r3
1000bec0:	2301      	movs	r3, #1
1000bec2:	4093      	lsls	r3, r2
1000bec4:	0018      	movs	r0, r3
1000bec6:	4008      	ands	r0, r1
1000bec8:	e008      	b.n	1000bedc <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000beca:	4b08      	ldr	r3, [pc, #32]	; (1000beec <gpio_pin_get_input_level+0x4c>)
1000becc:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bece:	230f      	movs	r3, #15
1000bed0:	4003      	ands	r3, r0
1000bed2:	001a      	movs	r2, r3
1000bed4:	2301      	movs	r3, #1
1000bed6:	4093      	lsls	r3, r2
1000bed8:	0018      	movs	r0, r3
1000beda:	4008      	ands	r0, r1
	}

	return regval;
1000bedc:	1e43      	subs	r3, r0, #1
1000bede:	4198      	sbcs	r0, r3
1000bee0:	b2c0      	uxtb	r0, r0
}
1000bee2:	4770      	bx	lr
1000bee4:	40010000 	.word	0x40010000
1000bee8:	40011000 	.word	0x40011000
1000beec:	40013000 	.word	0x40013000

1000bef0 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bef0:	280f      	cmp	r0, #15
1000bef2:	d806      	bhi.n	1000bf02 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000bef4:	4b0f      	ldr	r3, [pc, #60]	; (1000bf34 <gpio_pin_get_output_level+0x44>)
1000bef6:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000bef8:	2301      	movs	r3, #1
1000befa:	4083      	lsls	r3, r0
1000befc:	0018      	movs	r0, r3
1000befe:	4008      	ands	r0, r1
1000bf00:	e014      	b.n	1000bf2c <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000bf02:	281f      	cmp	r0, #31
1000bf04:	d809      	bhi.n	1000bf1a <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000bf06:	4b0c      	ldr	r3, [pc, #48]	; (1000bf38 <gpio_pin_get_output_level+0x48>)
1000bf08:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bf0a:	230f      	movs	r3, #15
1000bf0c:	4003      	ands	r3, r0
1000bf0e:	001a      	movs	r2, r3
1000bf10:	2301      	movs	r3, #1
1000bf12:	4093      	lsls	r3, r2
1000bf14:	0018      	movs	r0, r3
1000bf16:	4008      	ands	r0, r1
1000bf18:	e008      	b.n	1000bf2c <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000bf1a:	4b08      	ldr	r3, [pc, #32]	; (1000bf3c <gpio_pin_get_output_level+0x4c>)
1000bf1c:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bf1e:	230f      	movs	r3, #15
1000bf20:	4003      	ands	r3, r0
1000bf22:	001a      	movs	r2, r3
1000bf24:	2301      	movs	r3, #1
1000bf26:	4093      	lsls	r3, r2
1000bf28:	0018      	movs	r0, r3
1000bf2a:	4008      	ands	r0, r1
	}

	return regval;
1000bf2c:	1e43      	subs	r3, r0, #1
1000bf2e:	4198      	sbcs	r0, r3
1000bf30:	b2c0      	uxtb	r0, r0
}
1000bf32:	4770      	bx	lr
1000bf34:	40010000 	.word	0x40010000
1000bf38:	40011000 	.word	0x40011000
1000bf3c:	40013000 	.word	0x40013000

1000bf40 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000bf40:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000bf42:	280f      	cmp	r0, #15
1000bf44:	d810      	bhi.n	1000bf68 <gpio_pin_set_output_level+0x28>
		if(level) {
1000bf46:	2900      	cmp	r1, #0
1000bf48:	d007      	beq.n	1000bf5a <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000bf4a:	4a1d      	ldr	r2, [pc, #116]	; (1000bfc0 <gpio_pin_set_output_level+0x80>)
1000bf4c:	8891      	ldrh	r1, [r2, #4]
1000bf4e:	2301      	movs	r3, #1
1000bf50:	4083      	lsls	r3, r0
1000bf52:	430b      	orrs	r3, r1
1000bf54:	b29b      	uxth	r3, r3
1000bf56:	8093      	strh	r3, [r2, #4]
1000bf58:	e031      	b.n	1000bfbe <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000bf5a:	4919      	ldr	r1, [pc, #100]	; (1000bfc0 <gpio_pin_set_output_level+0x80>)
1000bf5c:	888b      	ldrh	r3, [r1, #4]
1000bf5e:	2201      	movs	r2, #1
1000bf60:	4082      	lsls	r2, r0
1000bf62:	4393      	bics	r3, r2
1000bf64:	808b      	strh	r3, [r1, #4]
1000bf66:	e02a      	b.n	1000bfbe <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000bf68:	281f      	cmp	r0, #31
1000bf6a:	d814      	bhi.n	1000bf96 <gpio_pin_set_output_level+0x56>
		if(level) {
1000bf6c:	2900      	cmp	r1, #0
1000bf6e:	d009      	beq.n	1000bf84 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bf70:	4914      	ldr	r1, [pc, #80]	; (1000bfc4 <gpio_pin_set_output_level+0x84>)
1000bf72:	888c      	ldrh	r4, [r1, #4]
1000bf74:	220f      	movs	r2, #15
1000bf76:	4010      	ands	r0, r2
1000bf78:	2301      	movs	r3, #1
1000bf7a:	4083      	lsls	r3, r0
1000bf7c:	4323      	orrs	r3, r4
1000bf7e:	b29b      	uxth	r3, r3
1000bf80:	808b      	strh	r3, [r1, #4]
1000bf82:	e01c      	b.n	1000bfbe <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bf84:	490f      	ldr	r1, [pc, #60]	; (1000bfc4 <gpio_pin_set_output_level+0x84>)
1000bf86:	888b      	ldrh	r3, [r1, #4]
1000bf88:	220f      	movs	r2, #15
1000bf8a:	4010      	ands	r0, r2
1000bf8c:	3a0e      	subs	r2, #14
1000bf8e:	4082      	lsls	r2, r0
1000bf90:	4393      	bics	r3, r2
1000bf92:	808b      	strh	r3, [r1, #4]
1000bf94:	e013      	b.n	1000bfbe <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000bf96:	2900      	cmp	r1, #0
1000bf98:	d009      	beq.n	1000bfae <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bf9a:	490b      	ldr	r1, [pc, #44]	; (1000bfc8 <gpio_pin_set_output_level+0x88>)
1000bf9c:	888c      	ldrh	r4, [r1, #4]
1000bf9e:	220f      	movs	r2, #15
1000bfa0:	4010      	ands	r0, r2
1000bfa2:	2301      	movs	r3, #1
1000bfa4:	4083      	lsls	r3, r0
1000bfa6:	4323      	orrs	r3, r4
1000bfa8:	b29b      	uxth	r3, r3
1000bfaa:	808b      	strh	r3, [r1, #4]
1000bfac:	e007      	b.n	1000bfbe <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bfae:	4906      	ldr	r1, [pc, #24]	; (1000bfc8 <gpio_pin_set_output_level+0x88>)
1000bfb0:	888b      	ldrh	r3, [r1, #4]
1000bfb2:	220f      	movs	r2, #15
1000bfb4:	4010      	ands	r0, r2
1000bfb6:	3a0e      	subs	r2, #14
1000bfb8:	4082      	lsls	r2, r0
1000bfba:	4393      	bics	r3, r2
1000bfbc:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000bfbe:	bd10      	pop	{r4, pc}
1000bfc0:	40010000 	.word	0x40010000
1000bfc4:	40011000 	.word	0x40011000
1000bfc8:	40013000 	.word	0x40013000

1000bfcc <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bfcc:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bfce:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bfd0:	23ff      	movs	r3, #255	; 0xff
1000bfd2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bfd4:	2807      	cmp	r0, #7
1000bfd6:	d833      	bhi.n	1000c040 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bfd8:	4a4e      	ldr	r2, [pc, #312]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000bfda:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bfdc:	3bf8      	subs	r3, #248	; 0xf8
1000bfde:	4003      	ands	r3, r0
1000bfe0:	009b      	lsls	r3, r3, #2
1000bfe2:	2607      	movs	r6, #7
1000bfe4:	409e      	lsls	r6, r3
1000bfe6:	43b4      	bics	r4, r6
1000bfe8:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bfea:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bfec:	000e      	movs	r6, r1
1000bfee:	409e      	lsls	r6, r3
1000bff0:	0033      	movs	r3, r6
1000bff2:	4323      	orrs	r3, r4
1000bff4:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bff6:	2901      	cmp	r1, #1
1000bff8:	d000      	beq.n	1000bffc <gpio_pinmux_cofiguration+0x30>
1000bffa:	e08a      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000bffc:	2803      	cmp	r0, #3
1000bffe:	d80f      	bhi.n	1000c020 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c000:	0011      	movs	r1, r2
1000c002:	22d0      	movs	r2, #208	; 0xd0
1000c004:	0052      	lsls	r2, r2, #1
1000c006:	588c      	ldr	r4, [r1, r2]
1000c008:	2303      	movs	r3, #3
1000c00a:	4018      	ands	r0, r3
1000c00c:	00c0      	lsls	r0, r0, #3
1000c00e:	333c      	adds	r3, #60	; 0x3c
1000c010:	4083      	lsls	r3, r0
1000c012:	439c      	bics	r4, r3
1000c014:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c016:	588b      	ldr	r3, [r1, r2]
1000c018:	4085      	lsls	r5, r0
1000c01a:	431d      	orrs	r5, r3
1000c01c:	508d      	str	r5, [r1, r2]
1000c01e:	e078      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c020:	493c      	ldr	r1, [pc, #240]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000c022:	22d2      	movs	r2, #210	; 0xd2
1000c024:	0052      	lsls	r2, r2, #1
1000c026:	588c      	ldr	r4, [r1, r2]
1000c028:	2303      	movs	r3, #3
1000c02a:	4018      	ands	r0, r3
1000c02c:	00c0      	lsls	r0, r0, #3
1000c02e:	333c      	adds	r3, #60	; 0x3c
1000c030:	4083      	lsls	r3, r0
1000c032:	439c      	bics	r4, r3
1000c034:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c036:	588b      	ldr	r3, [r1, r2]
1000c038:	4085      	lsls	r5, r0
1000c03a:	431d      	orrs	r5, r3
1000c03c:	508d      	str	r5, [r1, r2]
1000c03e:	e068      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c040:	280f      	cmp	r0, #15
1000c042:	d832      	bhi.n	1000c0aa <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c044:	4a33      	ldr	r2, [pc, #204]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000c046:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c048:	2307      	movs	r3, #7
1000c04a:	4003      	ands	r3, r0
1000c04c:	009b      	lsls	r3, r3, #2
1000c04e:	2607      	movs	r6, #7
1000c050:	409e      	lsls	r6, r3
1000c052:	43b4      	bics	r4, r6
1000c054:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c056:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c058:	000e      	movs	r6, r1
1000c05a:	409e      	lsls	r6, r3
1000c05c:	0033      	movs	r3, r6
1000c05e:	4323      	orrs	r3, r4
1000c060:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c062:	2901      	cmp	r1, #1
1000c064:	d155      	bne.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c066:	280b      	cmp	r0, #11
1000c068:	d80f      	bhi.n	1000c08a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c06a:	0011      	movs	r1, r2
1000c06c:	22d4      	movs	r2, #212	; 0xd4
1000c06e:	0052      	lsls	r2, r2, #1
1000c070:	588c      	ldr	r4, [r1, r2]
1000c072:	2303      	movs	r3, #3
1000c074:	4018      	ands	r0, r3
1000c076:	00c0      	lsls	r0, r0, #3
1000c078:	333c      	adds	r3, #60	; 0x3c
1000c07a:	4083      	lsls	r3, r0
1000c07c:	439c      	bics	r4, r3
1000c07e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c080:	588b      	ldr	r3, [r1, r2]
1000c082:	4085      	lsls	r5, r0
1000c084:	431d      	orrs	r5, r3
1000c086:	508d      	str	r5, [r1, r2]
1000c088:	e043      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c08a:	4922      	ldr	r1, [pc, #136]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000c08c:	22d6      	movs	r2, #214	; 0xd6
1000c08e:	0052      	lsls	r2, r2, #1
1000c090:	588c      	ldr	r4, [r1, r2]
1000c092:	2303      	movs	r3, #3
1000c094:	4018      	ands	r0, r3
1000c096:	00c0      	lsls	r0, r0, #3
1000c098:	333c      	adds	r3, #60	; 0x3c
1000c09a:	4083      	lsls	r3, r0
1000c09c:	439c      	bics	r4, r3
1000c09e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0a0:	588b      	ldr	r3, [r1, r2]
1000c0a2:	4085      	lsls	r5, r0
1000c0a4:	431d      	orrs	r5, r3
1000c0a6:	508d      	str	r5, [r1, r2]
1000c0a8:	e033      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c0aa:	2817      	cmp	r0, #23
1000c0ac:	d831      	bhi.n	1000c112 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0ae:	4a19      	ldr	r2, [pc, #100]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000c0b0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c0b2:	2307      	movs	r3, #7
1000c0b4:	4003      	ands	r3, r0
1000c0b6:	009b      	lsls	r3, r3, #2
1000c0b8:	2607      	movs	r6, #7
1000c0ba:	409e      	lsls	r6, r3
1000c0bc:	43b4      	bics	r4, r6
1000c0be:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c0c0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c0c2:	000e      	movs	r6, r1
1000c0c4:	409e      	lsls	r6, r3
1000c0c6:	0033      	movs	r3, r6
1000c0c8:	4323      	orrs	r3, r4
1000c0ca:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c0cc:	2901      	cmp	r1, #1
1000c0ce:	d120      	bne.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c0d0:	2813      	cmp	r0, #19
1000c0d2:	d80f      	bhi.n	1000c0f4 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0d4:	0011      	movs	r1, r2
1000c0d6:	22d8      	movs	r2, #216	; 0xd8
1000c0d8:	0052      	lsls	r2, r2, #1
1000c0da:	588c      	ldr	r4, [r1, r2]
1000c0dc:	2303      	movs	r3, #3
1000c0de:	4018      	ands	r0, r3
1000c0e0:	00c0      	lsls	r0, r0, #3
1000c0e2:	333c      	adds	r3, #60	; 0x3c
1000c0e4:	4083      	lsls	r3, r0
1000c0e6:	439c      	bics	r4, r3
1000c0e8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0ea:	588b      	ldr	r3, [r1, r2]
1000c0ec:	4085      	lsls	r5, r0
1000c0ee:	431d      	orrs	r5, r3
1000c0f0:	508d      	str	r5, [r1, r2]
1000c0f2:	e00e      	b.n	1000c112 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0f4:	4a07      	ldr	r2, [pc, #28]	; (1000c114 <gpio_pinmux_cofiguration+0x148>)
1000c0f6:	23da      	movs	r3, #218	; 0xda
1000c0f8:	005b      	lsls	r3, r3, #1
1000c0fa:	58d1      	ldr	r1, [r2, r3]
1000c0fc:	2403      	movs	r4, #3
1000c0fe:	4020      	ands	r0, r4
1000c100:	00c0      	lsls	r0, r0, #3
1000c102:	343c      	adds	r4, #60	; 0x3c
1000c104:	4084      	lsls	r4, r0
1000c106:	43a1      	bics	r1, r4
1000c108:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c10a:	58d1      	ldr	r1, [r2, r3]
1000c10c:	4085      	lsls	r5, r0
1000c10e:	430d      	orrs	r5, r1
1000c110:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c112:	bd70      	pop	{r4, r5, r6, pc}
1000c114:	4000b000 	.word	0x4000b000

1000c118 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c118:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c11a:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c11c:	280f      	cmp	r0, #15
1000c11e:	d904      	bls.n	1000c12a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c120:	241f      	movs	r4, #31
1000c122:	4284      	cmp	r4, r0
1000c124:	415b      	adcs	r3, r3
1000c126:	3c1d      	subs	r4, #29
1000c128:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c12a:	2a01      	cmp	r2, #1
1000c12c:	d016      	beq.n	1000c15c <gpio_register_callback+0x44>
1000c12e:	2a00      	cmp	r2, #0
1000c130:	d004      	beq.n	1000c13c <gpio_register_callback+0x24>
1000c132:	2a02      	cmp	r2, #2
1000c134:	d022      	beq.n	1000c17c <gpio_register_callback+0x64>
1000c136:	2a03      	cmp	r2, #3
1000c138:	d030      	beq.n	1000c19c <gpio_register_callback+0x84>
1000c13a:	e03e      	b.n	1000c1ba <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c13c:	4e29      	ldr	r6, [pc, #164]	; (1000c1e4 <gpio_register_callback+0xcc>)
1000c13e:	00dc      	lsls	r4, r3, #3
1000c140:	18e2      	adds	r2, r4, r3
1000c142:	00d2      	lsls	r2, r2, #3
1000c144:	5997      	ldr	r7, [r2, r6]
1000c146:	250f      	movs	r5, #15
1000c148:	4005      	ands	r5, r0
1000c14a:	2201      	movs	r2, #1
1000c14c:	40aa      	lsls	r2, r5
1000c14e:	b292      	uxth	r2, r2
1000c150:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c152:	18e4      	adds	r4, r4, r3
1000c154:	00e4      	lsls	r4, r4, #3
1000c156:	59a4      	ldr	r4, [r4, r6]
1000c158:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c15a:	e02e      	b.n	1000c1ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c15c:	4e21      	ldr	r6, [pc, #132]	; (1000c1e4 <gpio_register_callback+0xcc>)
1000c15e:	00dc      	lsls	r4, r3, #3
1000c160:	18e2      	adds	r2, r4, r3
1000c162:	00d2      	lsls	r2, r2, #3
1000c164:	5997      	ldr	r7, [r2, r6]
1000c166:	250f      	movs	r5, #15
1000c168:	4005      	ands	r5, r0
1000c16a:	2201      	movs	r2, #1
1000c16c:	40aa      	lsls	r2, r5
1000c16e:	b292      	uxth	r2, r2
1000c170:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c172:	18e4      	adds	r4, r4, r3
1000c174:	00e4      	lsls	r4, r4, #3
1000c176:	59a4      	ldr	r4, [r4, r6]
1000c178:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c17a:	e01e      	b.n	1000c1ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c17c:	4e19      	ldr	r6, [pc, #100]	; (1000c1e4 <gpio_register_callback+0xcc>)
1000c17e:	00dc      	lsls	r4, r3, #3
1000c180:	18e2      	adds	r2, r4, r3
1000c182:	00d2      	lsls	r2, r2, #3
1000c184:	5997      	ldr	r7, [r2, r6]
1000c186:	250f      	movs	r5, #15
1000c188:	4005      	ands	r5, r0
1000c18a:	2201      	movs	r2, #1
1000c18c:	40aa      	lsls	r2, r5
1000c18e:	b292      	uxth	r2, r2
1000c190:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c192:	18e4      	adds	r4, r4, r3
1000c194:	00e4      	lsls	r4, r4, #3
1000c196:	59a4      	ldr	r4, [r4, r6]
1000c198:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c19a:	e00e      	b.n	1000c1ba <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c19c:	4e11      	ldr	r6, [pc, #68]	; (1000c1e4 <gpio_register_callback+0xcc>)
1000c19e:	00dc      	lsls	r4, r3, #3
1000c1a0:	18e2      	adds	r2, r4, r3
1000c1a2:	00d2      	lsls	r2, r2, #3
1000c1a4:	5997      	ldr	r7, [r2, r6]
1000c1a6:	250f      	movs	r5, #15
1000c1a8:	4005      	ands	r5, r0
1000c1aa:	2201      	movs	r2, #1
1000c1ac:	40aa      	lsls	r2, r5
1000c1ae:	b292      	uxth	r2, r2
1000c1b0:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c1b2:	18e4      	adds	r4, r4, r3
1000c1b4:	00e4      	lsls	r4, r4, #3
1000c1b6:	59a4      	ldr	r4, [r4, r6]
1000c1b8:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c1ba:	220f      	movs	r2, #15
1000c1bc:	4010      	ands	r0, r2
1000c1be:	4c09      	ldr	r4, [pc, #36]	; (1000c1e4 <gpio_register_callback+0xcc>)
1000c1c0:	00dd      	lsls	r5, r3, #3
1000c1c2:	18ea      	adds	r2, r5, r3
1000c1c4:	0052      	lsls	r2, r2, #1
1000c1c6:	1812      	adds	r2, r2, r0
1000c1c8:	0092      	lsls	r2, r2, #2
1000c1ca:	18a2      	adds	r2, r4, r2
1000c1cc:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c1ce:	18ea      	adds	r2, r5, r3
1000c1d0:	00d2      	lsls	r2, r2, #3
1000c1d2:	18a2      	adds	r2, r4, r2
1000c1d4:	3244      	adds	r2, #68	; 0x44
1000c1d6:	2101      	movs	r1, #1
1000c1d8:	4081      	lsls	r1, r0
1000c1da:	8813      	ldrh	r3, [r2, #0]
1000c1dc:	430b      	orrs	r3, r1
1000c1de:	8013      	strh	r3, [r2, #0]
}
1000c1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c1e2:	46c0      	nop			; (mov r8, r8)
1000c1e4:	10019b20 	.word	0x10019b20

1000c1e8 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c1e8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c1ea:	280f      	cmp	r0, #15
1000c1ec:	d805      	bhi.n	1000c1fa <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c1ee:	2280      	movs	r2, #128	; 0x80
1000c1f0:	0412      	lsls	r2, r2, #16
1000c1f2:	4b12      	ldr	r3, [pc, #72]	; (1000c23c <gpio_enable_callback+0x54>)
1000c1f4:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c1f6:	2200      	movs	r2, #0
1000c1f8:	e00c      	b.n	1000c214 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c1fa:	281f      	cmp	r0, #31
1000c1fc:	d805      	bhi.n	1000c20a <gpio_enable_callback+0x22>
1000c1fe:	2280      	movs	r2, #128	; 0x80
1000c200:	0452      	lsls	r2, r2, #17
1000c202:	4b0e      	ldr	r3, [pc, #56]	; (1000c23c <gpio_enable_callback+0x54>)
1000c204:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c206:	2201      	movs	r2, #1
1000c208:	e004      	b.n	1000c214 <gpio_enable_callback+0x2c>
1000c20a:	2280      	movs	r2, #128	; 0x80
1000c20c:	0492      	lsls	r2, r2, #18
1000c20e:	4b0b      	ldr	r3, [pc, #44]	; (1000c23c <gpio_enable_callback+0x54>)
1000c210:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c212:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c214:	230f      	movs	r3, #15
1000c216:	4018      	ands	r0, r3
1000c218:	2101      	movs	r1, #1
1000c21a:	4081      	lsls	r1, r0
1000c21c:	4c08      	ldr	r4, [pc, #32]	; (1000c240 <gpio_enable_callback+0x58>)
1000c21e:	00d5      	lsls	r5, r2, #3
1000c220:	18ab      	adds	r3, r5, r2
1000c222:	00db      	lsls	r3, r3, #3
1000c224:	18e3      	adds	r3, r4, r3
1000c226:	3346      	adds	r3, #70	; 0x46
1000c228:	8818      	ldrh	r0, [r3, #0]
1000c22a:	4308      	orrs	r0, r1
1000c22c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c22e:	18aa      	adds	r2, r5, r2
1000c230:	00d2      	lsls	r2, r2, #3
1000c232:	5913      	ldr	r3, [r2, r4]
1000c234:	b289      	uxth	r1, r1
1000c236:	8419      	strh	r1, [r3, #32]
}
1000c238:	bd30      	pop	{r4, r5, pc}
1000c23a:	46c0      	nop			; (mov r8, r8)
1000c23c:	e000e100 	.word	0xe000e100
1000c240:	10019b20 	.word	0x10019b20

1000c244 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c244:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c246:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c248:	280f      	cmp	r0, #15
1000c24a:	d904      	bls.n	1000c256 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c24c:	221f      	movs	r2, #31
1000c24e:	4282      	cmp	r2, r0
1000c250:	415b      	adcs	r3, r3
1000c252:	3a1d      	subs	r2, #29
1000c254:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c256:	220f      	movs	r2, #15
1000c258:	4010      	ands	r0, r2
1000c25a:	2101      	movs	r1, #1
1000c25c:	4081      	lsls	r1, r0
1000c25e:	4c07      	ldr	r4, [pc, #28]	; (1000c27c <gpio_disable_callback+0x38>)
1000c260:	00dd      	lsls	r5, r3, #3
1000c262:	18ea      	adds	r2, r5, r3
1000c264:	00d2      	lsls	r2, r2, #3
1000c266:	18a2      	adds	r2, r4, r2
1000c268:	3246      	adds	r2, #70	; 0x46
1000c26a:	8810      	ldrh	r0, [r2, #0]
1000c26c:	4388      	bics	r0, r1
1000c26e:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c270:	18eb      	adds	r3, r5, r3
1000c272:	00db      	lsls	r3, r3, #3
1000c274:	591b      	ldr	r3, [r3, r4]
1000c276:	b289      	uxth	r1, r1
1000c278:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c27a:	bd30      	pop	{r4, r5, pc}
1000c27c:	10019b20 	.word	0x10019b20

1000c280 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c280:	b510      	push	{r4, lr}
1000c282:	4a11      	ldr	r2, [pc, #68]	; (1000c2c8 <gpio_init+0x48>)
1000c284:	0010      	movs	r0, r2
1000c286:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c288:	2100      	movs	r1, #0
1000c28a:	e007      	b.n	1000c29c <gpio_init+0x1c>
1000c28c:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c28e:	4293      	cmp	r3, r2
1000c290:	d1fc      	bne.n	1000c28c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c292:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c294:	8011      	strh	r1, [r2, #0]
1000c296:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c298:	4282      	cmp	r2, r0
1000c29a:	d002      	beq.n	1000c2a2 <gpio_init+0x22>
1000c29c:	0013      	movs	r3, r2
1000c29e:	3b40      	subs	r3, #64	; 0x40
1000c2a0:	e7f4      	b.n	1000c28c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c2a2:	4b0a      	ldr	r3, [pc, #40]	; (1000c2cc <gpio_init+0x4c>)
1000c2a4:	4a0a      	ldr	r2, [pc, #40]	; (1000c2d0 <gpio_init+0x50>)
1000c2a6:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c2a8:	4a0a      	ldr	r2, [pc, #40]	; (1000c2d4 <gpio_init+0x54>)
1000c2aa:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c2ac:	490a      	ldr	r1, [pc, #40]	; (1000c2d8 <gpio_init+0x58>)
1000c2ae:	2290      	movs	r2, #144	; 0x90
1000c2b0:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c2b2:	490a      	ldr	r1, [pc, #40]	; (1000c2dc <gpio_init+0x5c>)
1000c2b4:	2027      	movs	r0, #39	; 0x27
1000c2b6:	4c0a      	ldr	r4, [pc, #40]	; (1000c2e0 <gpio_init+0x60>)
1000c2b8:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c2ba:	490a      	ldr	r1, [pc, #40]	; (1000c2e4 <gpio_init+0x64>)
1000c2bc:	2028      	movs	r0, #40	; 0x28
1000c2be:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c2c0:	4909      	ldr	r1, [pc, #36]	; (1000c2e8 <gpio_init+0x68>)
1000c2c2:	2029      	movs	r0, #41	; 0x29
1000c2c4:	47a0      	blx	r4
}
1000c2c6:	bd10      	pop	{r4, pc}
1000c2c8:	10019b64 	.word	0x10019b64
1000c2cc:	10019b20 	.word	0x10019b20
1000c2d0:	40010000 	.word	0x40010000
1000c2d4:	40011000 	.word	0x40011000
1000c2d8:	40013000 	.word	0x40013000
1000c2dc:	1000bb89 	.word	0x1000bb89
1000c2e0:	1000cead 	.word	0x1000cead
1000c2e4:	1000bbed 	.word	0x1000bbed
1000c2e8:	1000bc5d 	.word	0x1000bc5d

1000c2ec <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c2ec:	2801      	cmp	r0, #1
1000c2ee:	d00d      	beq.n	1000c30c <system_clock_config+0x20>
1000c2f0:	2800      	cmp	r0, #0
1000c2f2:	d002      	beq.n	1000c2fa <system_clock_config+0xe>
1000c2f4:	2802      	cmp	r0, #2
1000c2f6:	d01c      	beq.n	1000c332 <system_clock_config+0x46>
1000c2f8:	e02e      	b.n	1000c358 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2fa:	4a18      	ldr	r2, [pc, #96]	; (1000c35c <system_clock_config+0x70>)
1000c2fc:	6990      	ldr	r0, [r2, #24]
1000c2fe:	230c      	movs	r3, #12
1000c300:	4303      	orrs	r3, r0
1000c302:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c304:	4a16      	ldr	r2, [pc, #88]	; (1000c360 <system_clock_config+0x74>)
1000c306:	4b17      	ldr	r3, [pc, #92]	; (1000c364 <system_clock_config+0x78>)
1000c308:	601a      	str	r2, [r3, #0]
			break;
1000c30a:	e01a      	b.n	1000c342 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c30c:	4b13      	ldr	r3, [pc, #76]	; (1000c35c <system_clock_config+0x70>)
1000c30e:	6998      	ldr	r0, [r3, #24]
1000c310:	2208      	movs	r2, #8
1000c312:	4302      	orrs	r2, r0
1000c314:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c316:	699a      	ldr	r2, [r3, #24]
1000c318:	2004      	movs	r0, #4
1000c31a:	4382      	bics	r2, r0
1000c31c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c31e:	4a12      	ldr	r2, [pc, #72]	; (1000c368 <system_clock_config+0x7c>)
1000c320:	6853      	ldr	r3, [r2, #4]
1000c322:	2080      	movs	r0, #128	; 0x80
1000c324:	0300      	lsls	r0, r0, #12
1000c326:	4303      	orrs	r3, r0
1000c328:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c32a:	4a10      	ldr	r2, [pc, #64]	; (1000c36c <system_clock_config+0x80>)
1000c32c:	4b0d      	ldr	r3, [pc, #52]	; (1000c364 <system_clock_config+0x78>)
1000c32e:	601a      	str	r2, [r3, #0]
			break;
1000c330:	e007      	b.n	1000c342 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c332:	4a0a      	ldr	r2, [pc, #40]	; (1000c35c <system_clock_config+0x70>)
1000c334:	6993      	ldr	r3, [r2, #24]
1000c336:	200c      	movs	r0, #12
1000c338:	4383      	bics	r3, r0
1000c33a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c33c:	4a08      	ldr	r2, [pc, #32]	; (1000c360 <system_clock_config+0x74>)
1000c33e:	4b09      	ldr	r3, [pc, #36]	; (1000c364 <system_clock_config+0x78>)
1000c340:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c342:	4b06      	ldr	r3, [pc, #24]	; (1000c35c <system_clock_config+0x70>)
1000c344:	699a      	ldr	r2, [r3, #24]
1000c346:	2003      	movs	r0, #3
1000c348:	4382      	bics	r2, r0
1000c34a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c34c:	699a      	ldr	r2, [r3, #24]
1000c34e:	4001      	ands	r1, r0
1000c350:	4311      	orrs	r1, r2
1000c352:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c354:	2000      	movs	r0, #0
1000c356:	e000      	b.n	1000c35a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c358:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c35a:	4770      	bx	lr
1000c35c:	4000b000 	.word	0x4000b000
1000c360:	018cba80 	.word	0x018cba80
1000c364:	10019bf8 	.word	0x10019bf8
1000c368:	4000f000 	.word	0x4000f000
1000c36c:	001e8480 	.word	0x001e8480

1000c370 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c370:	4b01      	ldr	r3, [pc, #4]	; (1000c378 <system_clock_get_value+0x8>)
1000c372:	6818      	ldr	r0, [r3, #0]
}
1000c374:	4770      	bx	lr
1000c376:	46c0      	nop			; (mov r8, r8)
1000c378:	10019bf8 	.word	0x10019bf8

1000c37c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c37c:	b500      	push	{lr}
	switch (peripheral) {
1000c37e:	2835      	cmp	r0, #53	; 0x35
1000c380:	d900      	bls.n	1000c384 <system_clock_peripheral_enable+0x8>
1000c382:	e1a2      	b.n	1000c6ca <system_clock_peripheral_enable+0x34e>
1000c384:	0080      	lsls	r0, r0, #2
1000c386:	4bd2      	ldr	r3, [pc, #840]	; (1000c6d0 <system_clock_peripheral_enable+0x354>)
1000c388:	581b      	ldr	r3, [r3, r0]
1000c38a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c38c:	4ad1      	ldr	r2, [pc, #836]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c38e:	68d1      	ldr	r1, [r2, #12]
1000c390:	2302      	movs	r3, #2
1000c392:	430b      	orrs	r3, r1
1000c394:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c396:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c398:	e198      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c39a:	4ace      	ldr	r2, [pc, #824]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c39c:	68d1      	ldr	r1, [r2, #12]
1000c39e:	2304      	movs	r3, #4
1000c3a0:	430b      	orrs	r3, r1
1000c3a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c3a6:	e191      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3a8:	4aca      	ldr	r2, [pc, #808]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3aa:	68d1      	ldr	r1, [r2, #12]
1000c3ac:	2308      	movs	r3, #8
1000c3ae:	430b      	orrs	r3, r1
1000c3b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c3b4:	e18a      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3b6:	4ac7      	ldr	r2, [pc, #796]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3b8:	68d1      	ldr	r1, [r2, #12]
1000c3ba:	2310      	movs	r3, #16
1000c3bc:	430b      	orrs	r3, r1
1000c3be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c3c2:	e183      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3c4:	4ac3      	ldr	r2, [pc, #780]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3c6:	68d1      	ldr	r1, [r2, #12]
1000c3c8:	2320      	movs	r3, #32
1000c3ca:	430b      	orrs	r3, r1
1000c3cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c3d0:	e17c      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3d2:	4ac0      	ldr	r2, [pc, #768]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3d4:	68d1      	ldr	r1, [r2, #12]
1000c3d6:	2380      	movs	r3, #128	; 0x80
1000c3d8:	430b      	orrs	r3, r1
1000c3da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c3de:	e175      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3e0:	4abc      	ldr	r2, [pc, #752]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3e2:	68d3      	ldr	r3, [r2, #12]
1000c3e4:	2180      	movs	r1, #128	; 0x80
1000c3e6:	0049      	lsls	r1, r1, #1
1000c3e8:	430b      	orrs	r3, r1
1000c3ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c3ee:	e16d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3f0:	4ab8      	ldr	r2, [pc, #736]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c3f2:	68d3      	ldr	r3, [r2, #12]
1000c3f4:	2180      	movs	r1, #128	; 0x80
1000c3f6:	0109      	lsls	r1, r1, #4
1000c3f8:	430b      	orrs	r3, r1
1000c3fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c3fe:	e165      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c400:	4ab4      	ldr	r2, [pc, #720]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c402:	68d3      	ldr	r3, [r2, #12]
1000c404:	2180      	movs	r1, #128	; 0x80
1000c406:	0149      	lsls	r1, r1, #5
1000c408:	430b      	orrs	r3, r1
1000c40a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c40c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c40e:	e15d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c410:	4ab0      	ldr	r2, [pc, #704]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c412:	68d3      	ldr	r3, [r2, #12]
1000c414:	2180      	movs	r1, #128	; 0x80
1000c416:	0189      	lsls	r1, r1, #6
1000c418:	430b      	orrs	r3, r1
1000c41a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c41c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c41e:	e155      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c420:	4aac      	ldr	r2, [pc, #688]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c422:	68d3      	ldr	r3, [r2, #12]
1000c424:	2180      	movs	r1, #128	; 0x80
1000c426:	01c9      	lsls	r1, r1, #7
1000c428:	430b      	orrs	r3, r1
1000c42a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c42c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c42e:	e14d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c430:	4aa8      	ldr	r2, [pc, #672]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c432:	68d3      	ldr	r3, [r2, #12]
1000c434:	2180      	movs	r1, #128	; 0x80
1000c436:	0209      	lsls	r1, r1, #8
1000c438:	430b      	orrs	r3, r1
1000c43a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c43c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c43e:	e145      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c440:	4aa4      	ldr	r2, [pc, #656]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c442:	68d3      	ldr	r3, [r2, #12]
1000c444:	2180      	movs	r1, #128	; 0x80
1000c446:	0249      	lsls	r1, r1, #9
1000c448:	430b      	orrs	r3, r1
1000c44a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c44c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c44e:	e13d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c450:	4aa0      	ldr	r2, [pc, #640]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c452:	68d3      	ldr	r3, [r2, #12]
1000c454:	2180      	movs	r1, #128	; 0x80
1000c456:	0289      	lsls	r1, r1, #10
1000c458:	430b      	orrs	r3, r1
1000c45a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c45c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c45e:	e135      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c460:	4a9c      	ldr	r2, [pc, #624]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c462:	68d3      	ldr	r3, [r2, #12]
1000c464:	2180      	movs	r1, #128	; 0x80
1000c466:	02c9      	lsls	r1, r1, #11
1000c468:	430b      	orrs	r3, r1
1000c46a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c46c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c46e:	e12d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c470:	4a98      	ldr	r2, [pc, #608]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c472:	68d3      	ldr	r3, [r2, #12]
1000c474:	2180      	movs	r1, #128	; 0x80
1000c476:	0309      	lsls	r1, r1, #12
1000c478:	430b      	orrs	r3, r1
1000c47a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c47c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c47e:	e125      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c480:	4a94      	ldr	r2, [pc, #592]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c482:	68d3      	ldr	r3, [r2, #12]
1000c484:	2180      	movs	r1, #128	; 0x80
1000c486:	0349      	lsls	r1, r1, #13
1000c488:	430b      	orrs	r3, r1
1000c48a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c48c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c48e:	e11d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c490:	4a90      	ldr	r2, [pc, #576]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c492:	68d3      	ldr	r3, [r2, #12]
1000c494:	2180      	movs	r1, #128	; 0x80
1000c496:	0389      	lsls	r1, r1, #14
1000c498:	430b      	orrs	r3, r1
1000c49a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c49c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c49e:	e115      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4a0:	4a8c      	ldr	r2, [pc, #560]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4a2:	68d3      	ldr	r3, [r2, #12]
1000c4a4:	2180      	movs	r1, #128	; 0x80
1000c4a6:	03c9      	lsls	r1, r1, #15
1000c4a8:	430b      	orrs	r3, r1
1000c4aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c4ae:	e10d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4b0:	4a88      	ldr	r2, [pc, #544]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4b2:	68d3      	ldr	r3, [r2, #12]
1000c4b4:	2180      	movs	r1, #128	; 0x80
1000c4b6:	0409      	lsls	r1, r1, #16
1000c4b8:	430b      	orrs	r3, r1
1000c4ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c4be:	e105      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4c0:	4a84      	ldr	r2, [pc, #528]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4c2:	68d3      	ldr	r3, [r2, #12]
1000c4c4:	2180      	movs	r1, #128	; 0x80
1000c4c6:	0449      	lsls	r1, r1, #17
1000c4c8:	430b      	orrs	r3, r1
1000c4ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c4ce:	e0fd      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4d0:	4a80      	ldr	r2, [pc, #512]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4d2:	68d3      	ldr	r3, [r2, #12]
1000c4d4:	2180      	movs	r1, #128	; 0x80
1000c4d6:	0489      	lsls	r1, r1, #18
1000c4d8:	430b      	orrs	r3, r1
1000c4da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c4de:	e0f5      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4e0:	4a7c      	ldr	r2, [pc, #496]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4e2:	68d3      	ldr	r3, [r2, #12]
1000c4e4:	2180      	movs	r1, #128	; 0x80
1000c4e6:	04c9      	lsls	r1, r1, #19
1000c4e8:	430b      	orrs	r3, r1
1000c4ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c4ee:	e0ed      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4f0:	4a78      	ldr	r2, [pc, #480]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c4f2:	68d3      	ldr	r3, [r2, #12]
1000c4f4:	2180      	movs	r1, #128	; 0x80
1000c4f6:	0509      	lsls	r1, r1, #20
1000c4f8:	430b      	orrs	r3, r1
1000c4fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c4fe:	e0e5      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c500:	4a74      	ldr	r2, [pc, #464]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c502:	68d3      	ldr	r3, [r2, #12]
1000c504:	2180      	movs	r1, #128	; 0x80
1000c506:	0549      	lsls	r1, r1, #21
1000c508:	430b      	orrs	r3, r1
1000c50a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c50c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c50e:	e0dd      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c510:	4a70      	ldr	r2, [pc, #448]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c512:	68d3      	ldr	r3, [r2, #12]
1000c514:	2180      	movs	r1, #128	; 0x80
1000c516:	0589      	lsls	r1, r1, #22
1000c518:	430b      	orrs	r3, r1
1000c51a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c51c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c51e:	e0d5      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c520:	4a6c      	ldr	r2, [pc, #432]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c522:	68d3      	ldr	r3, [r2, #12]
1000c524:	2180      	movs	r1, #128	; 0x80
1000c526:	05c9      	lsls	r1, r1, #23
1000c528:	430b      	orrs	r3, r1
1000c52a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c52c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c52e:	e0cd      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c530:	4a68      	ldr	r2, [pc, #416]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c532:	6911      	ldr	r1, [r2, #16]
1000c534:	2301      	movs	r3, #1
1000c536:	430b      	orrs	r3, r1
1000c538:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c53a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c53c:	e0c6      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c53e:	4a65      	ldr	r2, [pc, #404]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c540:	6911      	ldr	r1, [r2, #16]
1000c542:	2302      	movs	r3, #2
1000c544:	430b      	orrs	r3, r1
1000c546:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c548:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c54a:	e0bf      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c54c:	4a61      	ldr	r2, [pc, #388]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c54e:	6911      	ldr	r1, [r2, #16]
1000c550:	2304      	movs	r3, #4
1000c552:	430b      	orrs	r3, r1
1000c554:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c556:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c558:	e0b8      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c55a:	4a5e      	ldr	r2, [pc, #376]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c55c:	6911      	ldr	r1, [r2, #16]
1000c55e:	2308      	movs	r3, #8
1000c560:	430b      	orrs	r3, r1
1000c562:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c566:	e0b1      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c568:	4a5a      	ldr	r2, [pc, #360]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c56a:	6911      	ldr	r1, [r2, #16]
1000c56c:	2310      	movs	r3, #16
1000c56e:	430b      	orrs	r3, r1
1000c570:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c572:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c574:	e0aa      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c576:	4a57      	ldr	r2, [pc, #348]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c578:	6911      	ldr	r1, [r2, #16]
1000c57a:	2320      	movs	r3, #32
1000c57c:	430b      	orrs	r3, r1
1000c57e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c582:	e0a3      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c584:	4a53      	ldr	r2, [pc, #332]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c586:	6911      	ldr	r1, [r2, #16]
1000c588:	2340      	movs	r3, #64	; 0x40
1000c58a:	430b      	orrs	r3, r1
1000c58c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c58e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c590:	e09c      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c592:	4a50      	ldr	r2, [pc, #320]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c594:	6911      	ldr	r1, [r2, #16]
1000c596:	2380      	movs	r3, #128	; 0x80
1000c598:	430b      	orrs	r3, r1
1000c59a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c59c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c59e:	e095      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5a0:	4a4c      	ldr	r2, [pc, #304]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5a2:	6913      	ldr	r3, [r2, #16]
1000c5a4:	2180      	movs	r1, #128	; 0x80
1000c5a6:	0049      	lsls	r1, r1, #1
1000c5a8:	430b      	orrs	r3, r1
1000c5aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c5ae:	e08d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5b0:	4a48      	ldr	r2, [pc, #288]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5b2:	6913      	ldr	r3, [r2, #16]
1000c5b4:	2180      	movs	r1, #128	; 0x80
1000c5b6:	0089      	lsls	r1, r1, #2
1000c5b8:	430b      	orrs	r3, r1
1000c5ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c5be:	e085      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5c0:	4a44      	ldr	r2, [pc, #272]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5c2:	6913      	ldr	r3, [r2, #16]
1000c5c4:	2180      	movs	r1, #128	; 0x80
1000c5c6:	00c9      	lsls	r1, r1, #3
1000c5c8:	430b      	orrs	r3, r1
1000c5ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c5ce:	e07d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5d0:	4a40      	ldr	r2, [pc, #256]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5d2:	6913      	ldr	r3, [r2, #16]
1000c5d4:	2180      	movs	r1, #128	; 0x80
1000c5d6:	0109      	lsls	r1, r1, #4
1000c5d8:	430b      	orrs	r3, r1
1000c5da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c5de:	e075      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5e0:	4a3c      	ldr	r2, [pc, #240]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5e2:	6913      	ldr	r3, [r2, #16]
1000c5e4:	2180      	movs	r1, #128	; 0x80
1000c5e6:	0149      	lsls	r1, r1, #5
1000c5e8:	430b      	orrs	r3, r1
1000c5ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c5ee:	e06d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5f0:	4a38      	ldr	r2, [pc, #224]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c5f2:	6913      	ldr	r3, [r2, #16]
1000c5f4:	2180      	movs	r1, #128	; 0x80
1000c5f6:	0189      	lsls	r1, r1, #6
1000c5f8:	430b      	orrs	r3, r1
1000c5fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c5fe:	e065      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c600:	4a34      	ldr	r2, [pc, #208]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c602:	6913      	ldr	r3, [r2, #16]
1000c604:	2180      	movs	r1, #128	; 0x80
1000c606:	01c9      	lsls	r1, r1, #7
1000c608:	430b      	orrs	r3, r1
1000c60a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c60c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c60e:	e05d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c610:	4a30      	ldr	r2, [pc, #192]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c612:	6913      	ldr	r3, [r2, #16]
1000c614:	2180      	movs	r1, #128	; 0x80
1000c616:	0209      	lsls	r1, r1, #8
1000c618:	430b      	orrs	r3, r1
1000c61a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c61c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c61e:	e055      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c620:	4a2c      	ldr	r2, [pc, #176]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c622:	6913      	ldr	r3, [r2, #16]
1000c624:	2180      	movs	r1, #128	; 0x80
1000c626:	0249      	lsls	r1, r1, #9
1000c628:	430b      	orrs	r3, r1
1000c62a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c62c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c62e:	e04d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c630:	4a28      	ldr	r2, [pc, #160]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c632:	6913      	ldr	r3, [r2, #16]
1000c634:	2180      	movs	r1, #128	; 0x80
1000c636:	0289      	lsls	r1, r1, #10
1000c638:	430b      	orrs	r3, r1
1000c63a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c63c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c63e:	e045      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c640:	4a24      	ldr	r2, [pc, #144]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c642:	6913      	ldr	r3, [r2, #16]
1000c644:	2180      	movs	r1, #128	; 0x80
1000c646:	02c9      	lsls	r1, r1, #11
1000c648:	430b      	orrs	r3, r1
1000c64a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c64c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c64e:	e03d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c650:	4a20      	ldr	r2, [pc, #128]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c652:	6913      	ldr	r3, [r2, #16]
1000c654:	2180      	movs	r1, #128	; 0x80
1000c656:	0309      	lsls	r1, r1, #12
1000c658:	430b      	orrs	r3, r1
1000c65a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c65c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c65e:	e035      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c660:	4a1c      	ldr	r2, [pc, #112]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c662:	6913      	ldr	r3, [r2, #16]
1000c664:	2180      	movs	r1, #128	; 0x80
1000c666:	0349      	lsls	r1, r1, #13
1000c668:	430b      	orrs	r3, r1
1000c66a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c66c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c66e:	e02d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c670:	4a18      	ldr	r2, [pc, #96]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c672:	6913      	ldr	r3, [r2, #16]
1000c674:	2180      	movs	r1, #128	; 0x80
1000c676:	0389      	lsls	r1, r1, #14
1000c678:	430b      	orrs	r3, r1
1000c67a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c67c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c67e:	e025      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c680:	4a14      	ldr	r2, [pc, #80]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c682:	6913      	ldr	r3, [r2, #16]
1000c684:	2180      	movs	r1, #128	; 0x80
1000c686:	03c9      	lsls	r1, r1, #15
1000c688:	430b      	orrs	r3, r1
1000c68a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c68c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c68e:	e01d      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c690:	4a10      	ldr	r2, [pc, #64]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c692:	6913      	ldr	r3, [r2, #16]
1000c694:	2180      	movs	r1, #128	; 0x80
1000c696:	0409      	lsls	r1, r1, #16
1000c698:	430b      	orrs	r3, r1
1000c69a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c69c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c69e:	e015      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c6a0:	4a0c      	ldr	r2, [pc, #48]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c6a2:	7d11      	ldrb	r1, [r2, #20]
1000c6a4:	2301      	movs	r3, #1
1000c6a6:	430b      	orrs	r3, r1
1000c6a8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c6ac:	e00e      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c6ae:	4a09      	ldr	r2, [pc, #36]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c6b0:	7d11      	ldrb	r1, [r2, #20]
1000c6b2:	2302      	movs	r3, #2
1000c6b4:	430b      	orrs	r3, r1
1000c6b6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c6ba:	e007      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c6bc:	4a05      	ldr	r2, [pc, #20]	; (1000c6d4 <system_clock_peripheral_enable+0x358>)
1000c6be:	7d11      	ldrb	r1, [r2, #20]
1000c6c0:	2304      	movs	r3, #4
1000c6c2:	430b      	orrs	r3, r1
1000c6c4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c6c8:	e000      	b.n	1000c6cc <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c6ca:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c6cc:	bd00      	pop	{pc}
1000c6ce:	46c0      	nop			; (mov r8, r8)
1000c6d0:	10016bd0 	.word	0x10016bd0
1000c6d4:	4000b000 	.word	0x4000b000

1000c6d8 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c6d8:	b500      	push	{lr}
	switch (peripheral) {
1000c6da:	2835      	cmp	r0, #53	; 0x35
1000c6dc:	d900      	bls.n	1000c6e0 <system_clock_peripheral_disable+0x8>
1000c6de:	e17d      	b.n	1000c9dc <system_clock_peripheral_disable+0x304>
1000c6e0:	0080      	lsls	r0, r0, #2
1000c6e2:	4bbf      	ldr	r3, [pc, #764]	; (1000c9e0 <system_clock_peripheral_disable+0x308>)
1000c6e4:	581b      	ldr	r3, [r3, r0]
1000c6e6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6e8:	4abe      	ldr	r2, [pc, #760]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c6ea:	68d3      	ldr	r3, [r2, #12]
1000c6ec:	2102      	movs	r1, #2
1000c6ee:	438b      	bics	r3, r1
1000c6f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c6f4:	e173      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c6f6:	4abb      	ldr	r2, [pc, #748]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c6f8:	68d3      	ldr	r3, [r2, #12]
1000c6fa:	2104      	movs	r1, #4
1000c6fc:	438b      	bics	r3, r1
1000c6fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c700:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c702:	e16c      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c704:	4ab7      	ldr	r2, [pc, #732]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c706:	68d3      	ldr	r3, [r2, #12]
1000c708:	2108      	movs	r1, #8
1000c70a:	438b      	bics	r3, r1
1000c70c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c70e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c710:	e165      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c712:	4ab4      	ldr	r2, [pc, #720]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c714:	68d3      	ldr	r3, [r2, #12]
1000c716:	2110      	movs	r1, #16
1000c718:	438b      	bics	r3, r1
1000c71a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c71c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c71e:	e15e      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c720:	4ab0      	ldr	r2, [pc, #704]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c722:	68d3      	ldr	r3, [r2, #12]
1000c724:	2120      	movs	r1, #32
1000c726:	438b      	bics	r3, r1
1000c728:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c72a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c72c:	e157      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c72e:	4aad      	ldr	r2, [pc, #692]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c730:	68d3      	ldr	r3, [r2, #12]
1000c732:	2180      	movs	r1, #128	; 0x80
1000c734:	438b      	bics	r3, r1
1000c736:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c738:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c73a:	e150      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c73c:	4aa9      	ldr	r2, [pc, #676]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c73e:	68d1      	ldr	r1, [r2, #12]
1000c740:	4ba9      	ldr	r3, [pc, #676]	; (1000c9e8 <system_clock_peripheral_disable+0x310>)
1000c742:	400b      	ands	r3, r1
1000c744:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c746:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c748:	e149      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c74a:	4aa6      	ldr	r2, [pc, #664]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c74c:	68d1      	ldr	r1, [r2, #12]
1000c74e:	4ba7      	ldr	r3, [pc, #668]	; (1000c9ec <system_clock_peripheral_disable+0x314>)
1000c750:	400b      	ands	r3, r1
1000c752:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c754:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c756:	e142      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c758:	4aa2      	ldr	r2, [pc, #648]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c75a:	68d1      	ldr	r1, [r2, #12]
1000c75c:	4ba4      	ldr	r3, [pc, #656]	; (1000c9f0 <system_clock_peripheral_disable+0x318>)
1000c75e:	400b      	ands	r3, r1
1000c760:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c762:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c764:	e13b      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c766:	4a9f      	ldr	r2, [pc, #636]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c768:	68d1      	ldr	r1, [r2, #12]
1000c76a:	4ba2      	ldr	r3, [pc, #648]	; (1000c9f4 <system_clock_peripheral_disable+0x31c>)
1000c76c:	400b      	ands	r3, r1
1000c76e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c770:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c772:	e134      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c774:	4a9b      	ldr	r2, [pc, #620]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c776:	68d1      	ldr	r1, [r2, #12]
1000c778:	4b9f      	ldr	r3, [pc, #636]	; (1000c9f8 <system_clock_peripheral_disable+0x320>)
1000c77a:	400b      	ands	r3, r1
1000c77c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c77e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c780:	e12d      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c782:	4a98      	ldr	r2, [pc, #608]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c784:	68d1      	ldr	r1, [r2, #12]
1000c786:	4b9d      	ldr	r3, [pc, #628]	; (1000c9fc <system_clock_peripheral_disable+0x324>)
1000c788:	400b      	ands	r3, r1
1000c78a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c78c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c78e:	e126      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c790:	4a94      	ldr	r2, [pc, #592]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c792:	68d1      	ldr	r1, [r2, #12]
1000c794:	4b9a      	ldr	r3, [pc, #616]	; (1000ca00 <system_clock_peripheral_disable+0x328>)
1000c796:	400b      	ands	r3, r1
1000c798:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c79a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c79c:	e11f      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c79e:	4a91      	ldr	r2, [pc, #580]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7a0:	68d1      	ldr	r1, [r2, #12]
1000c7a2:	4b98      	ldr	r3, [pc, #608]	; (1000ca04 <system_clock_peripheral_disable+0x32c>)
1000c7a4:	400b      	ands	r3, r1
1000c7a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c7aa:	e118      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7ac:	4a8d      	ldr	r2, [pc, #564]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7ae:	68d1      	ldr	r1, [r2, #12]
1000c7b0:	4b95      	ldr	r3, [pc, #596]	; (1000ca08 <system_clock_peripheral_disable+0x330>)
1000c7b2:	400b      	ands	r3, r1
1000c7b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c7b8:	e111      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7ba:	4a8a      	ldr	r2, [pc, #552]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7bc:	68d1      	ldr	r1, [r2, #12]
1000c7be:	4b93      	ldr	r3, [pc, #588]	; (1000ca0c <system_clock_peripheral_disable+0x334>)
1000c7c0:	400b      	ands	r3, r1
1000c7c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c7c6:	e10a      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7c8:	4a86      	ldr	r2, [pc, #536]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7ca:	68d1      	ldr	r1, [r2, #12]
1000c7cc:	4b90      	ldr	r3, [pc, #576]	; (1000ca10 <system_clock_peripheral_disable+0x338>)
1000c7ce:	400b      	ands	r3, r1
1000c7d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c7d4:	e103      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7d6:	4a83      	ldr	r2, [pc, #524]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7d8:	68d1      	ldr	r1, [r2, #12]
1000c7da:	4b8e      	ldr	r3, [pc, #568]	; (1000ca14 <system_clock_peripheral_disable+0x33c>)
1000c7dc:	400b      	ands	r3, r1
1000c7de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c7e2:	e0fc      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7e4:	4a7f      	ldr	r2, [pc, #508]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7e6:	68d1      	ldr	r1, [r2, #12]
1000c7e8:	4b8b      	ldr	r3, [pc, #556]	; (1000ca18 <system_clock_peripheral_disable+0x340>)
1000c7ea:	400b      	ands	r3, r1
1000c7ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c7f0:	e0f5      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c7f2:	4a7c      	ldr	r2, [pc, #496]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c7f4:	68d1      	ldr	r1, [r2, #12]
1000c7f6:	4b89      	ldr	r3, [pc, #548]	; (1000ca1c <system_clock_peripheral_disable+0x344>)
1000c7f8:	400b      	ands	r3, r1
1000c7fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c7fe:	e0ee      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c800:	4a78      	ldr	r2, [pc, #480]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c802:	68d1      	ldr	r1, [r2, #12]
1000c804:	4b86      	ldr	r3, [pc, #536]	; (1000ca20 <system_clock_peripheral_disable+0x348>)
1000c806:	400b      	ands	r3, r1
1000c808:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c80a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c80c:	e0e7      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c80e:	4a75      	ldr	r2, [pc, #468]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c810:	68d1      	ldr	r1, [r2, #12]
1000c812:	4b84      	ldr	r3, [pc, #528]	; (1000ca24 <system_clock_peripheral_disable+0x34c>)
1000c814:	400b      	ands	r3, r1
1000c816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c81a:	e0e0      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c81c:	4a71      	ldr	r2, [pc, #452]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c81e:	68d1      	ldr	r1, [r2, #12]
1000c820:	4b81      	ldr	r3, [pc, #516]	; (1000ca28 <system_clock_peripheral_disable+0x350>)
1000c822:	400b      	ands	r3, r1
1000c824:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c826:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c828:	e0d9      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c82a:	4a6e      	ldr	r2, [pc, #440]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c82c:	68d1      	ldr	r1, [r2, #12]
1000c82e:	4b7f      	ldr	r3, [pc, #508]	; (1000ca2c <system_clock_peripheral_disable+0x354>)
1000c830:	400b      	ands	r3, r1
1000c832:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c834:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c836:	e0d2      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c838:	4a6a      	ldr	r2, [pc, #424]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c83a:	68d1      	ldr	r1, [r2, #12]
1000c83c:	4b7c      	ldr	r3, [pc, #496]	; (1000ca30 <system_clock_peripheral_disable+0x358>)
1000c83e:	400b      	ands	r3, r1
1000c840:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c842:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c844:	e0cb      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c846:	4a67      	ldr	r2, [pc, #412]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c848:	68d1      	ldr	r1, [r2, #12]
1000c84a:	4b7a      	ldr	r3, [pc, #488]	; (1000ca34 <system_clock_peripheral_disable+0x35c>)
1000c84c:	400b      	ands	r3, r1
1000c84e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c850:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c852:	e0c4      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c854:	4a63      	ldr	r2, [pc, #396]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c856:	68d1      	ldr	r1, [r2, #12]
1000c858:	4b77      	ldr	r3, [pc, #476]	; (1000ca38 <system_clock_peripheral_disable+0x360>)
1000c85a:	400b      	ands	r3, r1
1000c85c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c85e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c860:	e0bd      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c862:	4a60      	ldr	r2, [pc, #384]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c864:	6913      	ldr	r3, [r2, #16]
1000c866:	2101      	movs	r1, #1
1000c868:	438b      	bics	r3, r1
1000c86a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c86c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c86e:	e0b6      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c870:	4a5c      	ldr	r2, [pc, #368]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c872:	6913      	ldr	r3, [r2, #16]
1000c874:	2102      	movs	r1, #2
1000c876:	438b      	bics	r3, r1
1000c878:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c87a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c87c:	e0af      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c87e:	4a59      	ldr	r2, [pc, #356]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c880:	6913      	ldr	r3, [r2, #16]
1000c882:	2104      	movs	r1, #4
1000c884:	438b      	bics	r3, r1
1000c886:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c88a:	e0a8      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c88c:	4a55      	ldr	r2, [pc, #340]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c88e:	6913      	ldr	r3, [r2, #16]
1000c890:	2108      	movs	r1, #8
1000c892:	438b      	bics	r3, r1
1000c894:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c896:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c898:	e0a1      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c89a:	4a52      	ldr	r2, [pc, #328]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c89c:	6913      	ldr	r3, [r2, #16]
1000c89e:	2110      	movs	r1, #16
1000c8a0:	438b      	bics	r3, r1
1000c8a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c8a6:	e09a      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8a8:	4a4e      	ldr	r2, [pc, #312]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8aa:	6913      	ldr	r3, [r2, #16]
1000c8ac:	2120      	movs	r1, #32
1000c8ae:	438b      	bics	r3, r1
1000c8b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c8b4:	e093      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8b6:	4a4b      	ldr	r2, [pc, #300]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8b8:	6913      	ldr	r3, [r2, #16]
1000c8ba:	2140      	movs	r1, #64	; 0x40
1000c8bc:	438b      	bics	r3, r1
1000c8be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c8c2:	e08c      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8c4:	4a47      	ldr	r2, [pc, #284]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8c6:	6913      	ldr	r3, [r2, #16]
1000c8c8:	2180      	movs	r1, #128	; 0x80
1000c8ca:	438b      	bics	r3, r1
1000c8cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c8d0:	e085      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8d2:	4a44      	ldr	r2, [pc, #272]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8d4:	6911      	ldr	r1, [r2, #16]
1000c8d6:	4b44      	ldr	r3, [pc, #272]	; (1000c9e8 <system_clock_peripheral_disable+0x310>)
1000c8d8:	400b      	ands	r3, r1
1000c8da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c8de:	e07e      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8e0:	4a40      	ldr	r2, [pc, #256]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8e2:	6911      	ldr	r1, [r2, #16]
1000c8e4:	4b55      	ldr	r3, [pc, #340]	; (1000ca3c <system_clock_peripheral_disable+0x364>)
1000c8e6:	400b      	ands	r3, r1
1000c8e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c8ec:	e077      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8ee:	4a3d      	ldr	r2, [pc, #244]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8f0:	6911      	ldr	r1, [r2, #16]
1000c8f2:	4b53      	ldr	r3, [pc, #332]	; (1000ca40 <system_clock_peripheral_disable+0x368>)
1000c8f4:	400b      	ands	r3, r1
1000c8f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c8fa:	e070      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c8fc:	4a39      	ldr	r2, [pc, #228]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c8fe:	6911      	ldr	r1, [r2, #16]
1000c900:	4b3a      	ldr	r3, [pc, #232]	; (1000c9ec <system_clock_peripheral_disable+0x314>)
1000c902:	400b      	ands	r3, r1
1000c904:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c906:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c908:	e069      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c90a:	4a36      	ldr	r2, [pc, #216]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c90c:	6911      	ldr	r1, [r2, #16]
1000c90e:	4b38      	ldr	r3, [pc, #224]	; (1000c9f0 <system_clock_peripheral_disable+0x318>)
1000c910:	400b      	ands	r3, r1
1000c912:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c914:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c916:	e062      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c918:	4a32      	ldr	r2, [pc, #200]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c91a:	6911      	ldr	r1, [r2, #16]
1000c91c:	4b35      	ldr	r3, [pc, #212]	; (1000c9f4 <system_clock_peripheral_disable+0x31c>)
1000c91e:	400b      	ands	r3, r1
1000c920:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c922:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c924:	e05b      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c926:	4a2f      	ldr	r2, [pc, #188]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c928:	6911      	ldr	r1, [r2, #16]
1000c92a:	4b33      	ldr	r3, [pc, #204]	; (1000c9f8 <system_clock_peripheral_disable+0x320>)
1000c92c:	400b      	ands	r3, r1
1000c92e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c930:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c932:	e054      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c934:	4a2b      	ldr	r2, [pc, #172]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c936:	6911      	ldr	r1, [r2, #16]
1000c938:	4b30      	ldr	r3, [pc, #192]	; (1000c9fc <system_clock_peripheral_disable+0x324>)
1000c93a:	400b      	ands	r3, r1
1000c93c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c93e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c940:	e04d      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c942:	4a28      	ldr	r2, [pc, #160]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c944:	6911      	ldr	r1, [r2, #16]
1000c946:	4b2e      	ldr	r3, [pc, #184]	; (1000ca00 <system_clock_peripheral_disable+0x328>)
1000c948:	400b      	ands	r3, r1
1000c94a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c94c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c94e:	e046      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c950:	4a24      	ldr	r2, [pc, #144]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c952:	6911      	ldr	r1, [r2, #16]
1000c954:	4b2b      	ldr	r3, [pc, #172]	; (1000ca04 <system_clock_peripheral_disable+0x32c>)
1000c956:	400b      	ands	r3, r1
1000c958:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c95a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c95c:	e03f      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c95e:	4a21      	ldr	r2, [pc, #132]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c960:	6911      	ldr	r1, [r2, #16]
1000c962:	4b29      	ldr	r3, [pc, #164]	; (1000ca08 <system_clock_peripheral_disable+0x330>)
1000c964:	400b      	ands	r3, r1
1000c966:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c968:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c96a:	e038      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c96c:	4a1d      	ldr	r2, [pc, #116]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c96e:	6911      	ldr	r1, [r2, #16]
1000c970:	4b26      	ldr	r3, [pc, #152]	; (1000ca0c <system_clock_peripheral_disable+0x334>)
1000c972:	400b      	ands	r3, r1
1000c974:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c976:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c978:	e031      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c97a:	4a1a      	ldr	r2, [pc, #104]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c97c:	6911      	ldr	r1, [r2, #16]
1000c97e:	4b24      	ldr	r3, [pc, #144]	; (1000ca10 <system_clock_peripheral_disable+0x338>)
1000c980:	400b      	ands	r3, r1
1000c982:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c984:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c986:	e02a      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c988:	4a16      	ldr	r2, [pc, #88]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c98a:	6911      	ldr	r1, [r2, #16]
1000c98c:	4b21      	ldr	r3, [pc, #132]	; (1000ca14 <system_clock_peripheral_disable+0x33c>)
1000c98e:	400b      	ands	r3, r1
1000c990:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c992:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c994:	e023      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c996:	4a13      	ldr	r2, [pc, #76]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c998:	6911      	ldr	r1, [r2, #16]
1000c99a:	4b1f      	ldr	r3, [pc, #124]	; (1000ca18 <system_clock_peripheral_disable+0x340>)
1000c99c:	400b      	ands	r3, r1
1000c99e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c9a2:	e01c      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9a4:	4a0f      	ldr	r2, [pc, #60]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c9a6:	6911      	ldr	r1, [r2, #16]
1000c9a8:	4b1c      	ldr	r3, [pc, #112]	; (1000ca1c <system_clock_peripheral_disable+0x344>)
1000c9aa:	400b      	ands	r3, r1
1000c9ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c9b0:	e015      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c9b2:	4a0c      	ldr	r2, [pc, #48]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c9b4:	7d13      	ldrb	r3, [r2, #20]
1000c9b6:	2101      	movs	r1, #1
1000c9b8:	438b      	bics	r3, r1
1000c9ba:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c9be:	e00e      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c9c0:	4a08      	ldr	r2, [pc, #32]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c9c2:	7d13      	ldrb	r3, [r2, #20]
1000c9c4:	2102      	movs	r1, #2
1000c9c6:	438b      	bics	r3, r1
1000c9c8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c9cc:	e007      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c9ce:	4a05      	ldr	r2, [pc, #20]	; (1000c9e4 <system_clock_peripheral_disable+0x30c>)
1000c9d0:	7d13      	ldrb	r3, [r2, #20]
1000c9d2:	2104      	movs	r1, #4
1000c9d4:	438b      	bics	r3, r1
1000c9d6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c9da:	e000      	b.n	1000c9de <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c9dc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c9de:	bd00      	pop	{pc}
1000c9e0:	10016ca8 	.word	0x10016ca8
1000c9e4:	4000b000 	.word	0x4000b000
1000c9e8:	fffffeff 	.word	0xfffffeff
1000c9ec:	fffff7ff 	.word	0xfffff7ff
1000c9f0:	ffffefff 	.word	0xffffefff
1000c9f4:	ffffdfff 	.word	0xffffdfff
1000c9f8:	ffffbfff 	.word	0xffffbfff
1000c9fc:	ffff7fff 	.word	0xffff7fff
1000ca00:	fffeffff 	.word	0xfffeffff
1000ca04:	fffdffff 	.word	0xfffdffff
1000ca08:	fffbffff 	.word	0xfffbffff
1000ca0c:	fff7ffff 	.word	0xfff7ffff
1000ca10:	ffefffff 	.word	0xffefffff
1000ca14:	ffdfffff 	.word	0xffdfffff
1000ca18:	ffbfffff 	.word	0xffbfffff
1000ca1c:	ff7fffff 	.word	0xff7fffff
1000ca20:	feffffff 	.word	0xfeffffff
1000ca24:	fdffffff 	.word	0xfdffffff
1000ca28:	fbffffff 	.word	0xfbffffff
1000ca2c:	f7ffffff 	.word	0xf7ffffff
1000ca30:	efffffff 	.word	0xefffffff
1000ca34:	dfffffff 	.word	0xdfffffff
1000ca38:	bfffffff 	.word	0xbfffffff
1000ca3c:	fffffdff 	.word	0xfffffdff
1000ca40:	fffffbff 	.word	0xfffffbff

1000ca44 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ca44:	b500      	push	{lr}
	switch (peripheral) {
1000ca46:	2843      	cmp	r0, #67	; 0x43
1000ca48:	d900      	bls.n	1000ca4c <system_peripheral_reset+0x8>
1000ca4a:	e223      	b.n	1000ce94 <system_peripheral_reset+0x450>
1000ca4c:	0080      	lsls	r0, r0, #2
1000ca4e:	4be0      	ldr	r3, [pc, #896]	; (1000cdd0 <system_peripheral_reset+0x38c>)
1000ca50:	581b      	ldr	r3, [r3, r0]
1000ca52:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca54:	4bdf      	ldr	r3, [pc, #892]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ca56:	6859      	ldr	r1, [r3, #4]
1000ca58:	2202      	movs	r2, #2
1000ca5a:	4391      	bics	r1, r2
1000ca5c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca5e:	6859      	ldr	r1, [r3, #4]
1000ca60:	430a      	orrs	r2, r1
1000ca62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca64:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ca66:	e216      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca68:	4bda      	ldr	r3, [pc, #872]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ca6a:	6859      	ldr	r1, [r3, #4]
1000ca6c:	2204      	movs	r2, #4
1000ca6e:	4391      	bics	r1, r2
1000ca70:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca72:	6859      	ldr	r1, [r3, #4]
1000ca74:	430a      	orrs	r2, r1
1000ca76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca78:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ca7a:	e20c      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca7c:	4bd5      	ldr	r3, [pc, #852]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ca7e:	6859      	ldr	r1, [r3, #4]
1000ca80:	2208      	movs	r2, #8
1000ca82:	4391      	bics	r1, r2
1000ca84:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca86:	6859      	ldr	r1, [r3, #4]
1000ca88:	430a      	orrs	r2, r1
1000ca8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca8c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ca8e:	e202      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca90:	4bd0      	ldr	r3, [pc, #832]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ca92:	6859      	ldr	r1, [r3, #4]
1000ca94:	2210      	movs	r2, #16
1000ca96:	4391      	bics	r1, r2
1000ca98:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca9a:	6859      	ldr	r1, [r3, #4]
1000ca9c:	430a      	orrs	r2, r1
1000ca9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000caa2:	e1f8      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caa4:	4bcb      	ldr	r3, [pc, #812]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000caa6:	6859      	ldr	r1, [r3, #4]
1000caa8:	2220      	movs	r2, #32
1000caaa:	4391      	bics	r1, r2
1000caac:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caae:	6859      	ldr	r1, [r3, #4]
1000cab0:	430a      	orrs	r2, r1
1000cab2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000cab6:	e1ee      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cab8:	4bc6      	ldr	r3, [pc, #792]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000caba:	6859      	ldr	r1, [r3, #4]
1000cabc:	2240      	movs	r2, #64	; 0x40
1000cabe:	4391      	bics	r1, r2
1000cac0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cac2:	6859      	ldr	r1, [r3, #4]
1000cac4:	430a      	orrs	r2, r1
1000cac6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000caca:	e1e4      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cacc:	4bc1      	ldr	r3, [pc, #772]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cace:	6859      	ldr	r1, [r3, #4]
1000cad0:	2280      	movs	r2, #128	; 0x80
1000cad2:	4391      	bics	r1, r2
1000cad4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cad6:	6859      	ldr	r1, [r3, #4]
1000cad8:	430a      	orrs	r2, r1
1000cada:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cadc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cade:	e1da      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cae0:	4bbc      	ldr	r3, [pc, #752]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cae2:	6859      	ldr	r1, [r3, #4]
1000cae4:	4abc      	ldr	r2, [pc, #752]	; (1000cdd8 <system_peripheral_reset+0x394>)
1000cae6:	400a      	ands	r2, r1
1000cae8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caea:	685a      	ldr	r2, [r3, #4]
1000caec:	2180      	movs	r1, #128	; 0x80
1000caee:	0049      	lsls	r1, r1, #1
1000caf0:	430a      	orrs	r2, r1
1000caf2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000caf6:	e1ce      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caf8:	4bb6      	ldr	r3, [pc, #728]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cafa:	6859      	ldr	r1, [r3, #4]
1000cafc:	4ab7      	ldr	r2, [pc, #732]	; (1000cddc <system_peripheral_reset+0x398>)
1000cafe:	400a      	ands	r2, r1
1000cb00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb02:	685a      	ldr	r2, [r3, #4]
1000cb04:	2180      	movs	r1, #128	; 0x80
1000cb06:	0089      	lsls	r1, r1, #2
1000cb08:	430a      	orrs	r2, r1
1000cb0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb0c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cb0e:	e1c2      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb10:	4bb0      	ldr	r3, [pc, #704]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb12:	6859      	ldr	r1, [r3, #4]
1000cb14:	4ab2      	ldr	r2, [pc, #712]	; (1000cde0 <system_peripheral_reset+0x39c>)
1000cb16:	400a      	ands	r2, r1
1000cb18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb1a:	685a      	ldr	r2, [r3, #4]
1000cb1c:	2180      	movs	r1, #128	; 0x80
1000cb1e:	00c9      	lsls	r1, r1, #3
1000cb20:	430a      	orrs	r2, r1
1000cb22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb24:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cb26:	e1b6      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb28:	4baa      	ldr	r3, [pc, #680]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb2a:	6859      	ldr	r1, [r3, #4]
1000cb2c:	4aad      	ldr	r2, [pc, #692]	; (1000cde4 <system_peripheral_reset+0x3a0>)
1000cb2e:	400a      	ands	r2, r1
1000cb30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb32:	685a      	ldr	r2, [r3, #4]
1000cb34:	2180      	movs	r1, #128	; 0x80
1000cb36:	0109      	lsls	r1, r1, #4
1000cb38:	430a      	orrs	r2, r1
1000cb3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb3c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cb3e:	e1aa      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb40:	4ba4      	ldr	r3, [pc, #656]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb42:	6859      	ldr	r1, [r3, #4]
1000cb44:	4aa8      	ldr	r2, [pc, #672]	; (1000cde8 <system_peripheral_reset+0x3a4>)
1000cb46:	400a      	ands	r2, r1
1000cb48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb4a:	685a      	ldr	r2, [r3, #4]
1000cb4c:	2180      	movs	r1, #128	; 0x80
1000cb4e:	0149      	lsls	r1, r1, #5
1000cb50:	430a      	orrs	r2, r1
1000cb52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb54:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cb56:	e19e      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb58:	4b9e      	ldr	r3, [pc, #632]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb5a:	6859      	ldr	r1, [r3, #4]
1000cb5c:	4aa3      	ldr	r2, [pc, #652]	; (1000cdec <system_peripheral_reset+0x3a8>)
1000cb5e:	400a      	ands	r2, r1
1000cb60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb62:	685a      	ldr	r2, [r3, #4]
1000cb64:	2180      	movs	r1, #128	; 0x80
1000cb66:	0189      	lsls	r1, r1, #6
1000cb68:	430a      	orrs	r2, r1
1000cb6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb6c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cb6e:	e192      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb70:	4b98      	ldr	r3, [pc, #608]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb72:	6859      	ldr	r1, [r3, #4]
1000cb74:	4a9e      	ldr	r2, [pc, #632]	; (1000cdf0 <system_peripheral_reset+0x3ac>)
1000cb76:	400a      	ands	r2, r1
1000cb78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb7a:	685a      	ldr	r2, [r3, #4]
1000cb7c:	2180      	movs	r1, #128	; 0x80
1000cb7e:	01c9      	lsls	r1, r1, #7
1000cb80:	430a      	orrs	r2, r1
1000cb82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb84:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cb86:	e186      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb88:	4b92      	ldr	r3, [pc, #584]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cb8a:	6859      	ldr	r1, [r3, #4]
1000cb8c:	4a99      	ldr	r2, [pc, #612]	; (1000cdf4 <system_peripheral_reset+0x3b0>)
1000cb8e:	400a      	ands	r2, r1
1000cb90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb92:	685a      	ldr	r2, [r3, #4]
1000cb94:	2180      	movs	r1, #128	; 0x80
1000cb96:	0209      	lsls	r1, r1, #8
1000cb98:	430a      	orrs	r2, r1
1000cb9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb9c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000cb9e:	e17a      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cba0:	4b8c      	ldr	r3, [pc, #560]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cba2:	6859      	ldr	r1, [r3, #4]
1000cba4:	4a94      	ldr	r2, [pc, #592]	; (1000cdf8 <system_peripheral_reset+0x3b4>)
1000cba6:	400a      	ands	r2, r1
1000cba8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbaa:	685a      	ldr	r2, [r3, #4]
1000cbac:	2180      	movs	r1, #128	; 0x80
1000cbae:	0249      	lsls	r1, r1, #9
1000cbb0:	430a      	orrs	r2, r1
1000cbb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000cbb6:	e16e      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbb8:	4b86      	ldr	r3, [pc, #536]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cbba:	6859      	ldr	r1, [r3, #4]
1000cbbc:	4a8f      	ldr	r2, [pc, #572]	; (1000cdfc <system_peripheral_reset+0x3b8>)
1000cbbe:	400a      	ands	r2, r1
1000cbc0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbc2:	685a      	ldr	r2, [r3, #4]
1000cbc4:	2180      	movs	r1, #128	; 0x80
1000cbc6:	0289      	lsls	r1, r1, #10
1000cbc8:	430a      	orrs	r2, r1
1000cbca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbcc:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000cbce:	e162      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbd0:	4b80      	ldr	r3, [pc, #512]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cbd2:	6859      	ldr	r1, [r3, #4]
1000cbd4:	4a8a      	ldr	r2, [pc, #552]	; (1000ce00 <system_peripheral_reset+0x3bc>)
1000cbd6:	400a      	ands	r2, r1
1000cbd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbda:	685a      	ldr	r2, [r3, #4]
1000cbdc:	2180      	movs	r1, #128	; 0x80
1000cbde:	02c9      	lsls	r1, r1, #11
1000cbe0:	430a      	orrs	r2, r1
1000cbe2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cbe6:	e156      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbe8:	4b7a      	ldr	r3, [pc, #488]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cbea:	6859      	ldr	r1, [r3, #4]
1000cbec:	4a85      	ldr	r2, [pc, #532]	; (1000ce04 <system_peripheral_reset+0x3c0>)
1000cbee:	400a      	ands	r2, r1
1000cbf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbf2:	685a      	ldr	r2, [r3, #4]
1000cbf4:	2180      	movs	r1, #128	; 0x80
1000cbf6:	0309      	lsls	r1, r1, #12
1000cbf8:	430a      	orrs	r2, r1
1000cbfa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbfc:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cbfe:	e14a      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc00:	4b74      	ldr	r3, [pc, #464]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc02:	6859      	ldr	r1, [r3, #4]
1000cc04:	4a80      	ldr	r2, [pc, #512]	; (1000ce08 <system_peripheral_reset+0x3c4>)
1000cc06:	400a      	ands	r2, r1
1000cc08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc0a:	685a      	ldr	r2, [r3, #4]
1000cc0c:	2180      	movs	r1, #128	; 0x80
1000cc0e:	0349      	lsls	r1, r1, #13
1000cc10:	430a      	orrs	r2, r1
1000cc12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc14:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cc16:	e13e      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc18:	4b6e      	ldr	r3, [pc, #440]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc1a:	6859      	ldr	r1, [r3, #4]
1000cc1c:	4a7b      	ldr	r2, [pc, #492]	; (1000ce0c <system_peripheral_reset+0x3c8>)
1000cc1e:	400a      	ands	r2, r1
1000cc20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc22:	685a      	ldr	r2, [r3, #4]
1000cc24:	2180      	movs	r1, #128	; 0x80
1000cc26:	0389      	lsls	r1, r1, #14
1000cc28:	430a      	orrs	r2, r1
1000cc2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc2c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cc2e:	e132      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc30:	4b68      	ldr	r3, [pc, #416]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc32:	6859      	ldr	r1, [r3, #4]
1000cc34:	4a76      	ldr	r2, [pc, #472]	; (1000ce10 <system_peripheral_reset+0x3cc>)
1000cc36:	400a      	ands	r2, r1
1000cc38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc3a:	685a      	ldr	r2, [r3, #4]
1000cc3c:	2180      	movs	r1, #128	; 0x80
1000cc3e:	03c9      	lsls	r1, r1, #15
1000cc40:	430a      	orrs	r2, r1
1000cc42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc44:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cc46:	e126      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc48:	4b62      	ldr	r3, [pc, #392]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc4a:	6859      	ldr	r1, [r3, #4]
1000cc4c:	4a71      	ldr	r2, [pc, #452]	; (1000ce14 <system_peripheral_reset+0x3d0>)
1000cc4e:	400a      	ands	r2, r1
1000cc50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc52:	685a      	ldr	r2, [r3, #4]
1000cc54:	2180      	movs	r1, #128	; 0x80
1000cc56:	0409      	lsls	r1, r1, #16
1000cc58:	430a      	orrs	r2, r1
1000cc5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc5c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cc5e:	e11a      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc60:	4b5c      	ldr	r3, [pc, #368]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc62:	6859      	ldr	r1, [r3, #4]
1000cc64:	4a6c      	ldr	r2, [pc, #432]	; (1000ce18 <system_peripheral_reset+0x3d4>)
1000cc66:	400a      	ands	r2, r1
1000cc68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc6a:	685a      	ldr	r2, [r3, #4]
1000cc6c:	2180      	movs	r1, #128	; 0x80
1000cc6e:	0449      	lsls	r1, r1, #17
1000cc70:	430a      	orrs	r2, r1
1000cc72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc74:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cc76:	e10e      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc78:	4b56      	ldr	r3, [pc, #344]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc7a:	6859      	ldr	r1, [r3, #4]
1000cc7c:	4a67      	ldr	r2, [pc, #412]	; (1000ce1c <system_peripheral_reset+0x3d8>)
1000cc7e:	400a      	ands	r2, r1
1000cc80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc82:	685a      	ldr	r2, [r3, #4]
1000cc84:	2180      	movs	r1, #128	; 0x80
1000cc86:	0489      	lsls	r1, r1, #18
1000cc88:	430a      	orrs	r2, r1
1000cc8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc8c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cc8e:	e102      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc90:	4b50      	ldr	r3, [pc, #320]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cc92:	6859      	ldr	r1, [r3, #4]
1000cc94:	4a62      	ldr	r2, [pc, #392]	; (1000ce20 <system_peripheral_reset+0x3dc>)
1000cc96:	400a      	ands	r2, r1
1000cc98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc9a:	685a      	ldr	r2, [r3, #4]
1000cc9c:	2180      	movs	r1, #128	; 0x80
1000cc9e:	04c9      	lsls	r1, r1, #19
1000cca0:	430a      	orrs	r2, r1
1000cca2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cca4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cca6:	e0f6      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cca8:	4b4a      	ldr	r3, [pc, #296]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ccaa:	6859      	ldr	r1, [r3, #4]
1000ccac:	4a5d      	ldr	r2, [pc, #372]	; (1000ce24 <system_peripheral_reset+0x3e0>)
1000ccae:	400a      	ands	r2, r1
1000ccb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccb2:	685a      	ldr	r2, [r3, #4]
1000ccb4:	2180      	movs	r1, #128	; 0x80
1000ccb6:	0509      	lsls	r1, r1, #20
1000ccb8:	430a      	orrs	r2, r1
1000ccba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccbc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000ccbe:	e0ea      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccc0:	4b44      	ldr	r3, [pc, #272]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ccc2:	6859      	ldr	r1, [r3, #4]
1000ccc4:	4a58      	ldr	r2, [pc, #352]	; (1000ce28 <system_peripheral_reset+0x3e4>)
1000ccc6:	400a      	ands	r2, r1
1000ccc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccca:	685a      	ldr	r2, [r3, #4]
1000cccc:	2180      	movs	r1, #128	; 0x80
1000ccce:	0549      	lsls	r1, r1, #21
1000ccd0:	430a      	orrs	r2, r1
1000ccd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccd4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000ccd6:	e0de      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccd8:	4b3e      	ldr	r3, [pc, #248]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ccda:	6859      	ldr	r1, [r3, #4]
1000ccdc:	4a53      	ldr	r2, [pc, #332]	; (1000ce2c <system_peripheral_reset+0x3e8>)
1000ccde:	400a      	ands	r2, r1
1000cce0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cce2:	685a      	ldr	r2, [r3, #4]
1000cce4:	2180      	movs	r1, #128	; 0x80
1000cce6:	0589      	lsls	r1, r1, #22
1000cce8:	430a      	orrs	r2, r1
1000ccea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccec:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000ccee:	e0d2      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccf0:	4b38      	ldr	r3, [pc, #224]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000ccf2:	6859      	ldr	r1, [r3, #4]
1000ccf4:	4a4e      	ldr	r2, [pc, #312]	; (1000ce30 <system_peripheral_reset+0x3ec>)
1000ccf6:	400a      	ands	r2, r1
1000ccf8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccfa:	685a      	ldr	r2, [r3, #4]
1000ccfc:	2180      	movs	r1, #128	; 0x80
1000ccfe:	05c9      	lsls	r1, r1, #23
1000cd00:	430a      	orrs	r2, r1
1000cd02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd04:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cd06:	e0c6      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd08:	4a32      	ldr	r2, [pc, #200]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd0a:	6853      	ldr	r3, [r2, #4]
1000cd0c:	005b      	lsls	r3, r3, #1
1000cd0e:	085b      	lsrs	r3, r3, #1
1000cd10:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd12:	6853      	ldr	r3, [r2, #4]
1000cd14:	2180      	movs	r1, #128	; 0x80
1000cd16:	0609      	lsls	r1, r1, #24
1000cd18:	430b      	orrs	r3, r1
1000cd1a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd1c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000cd1e:	e0ba      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd20:	4b2c      	ldr	r3, [pc, #176]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd22:	891a      	ldrh	r2, [r3, #8]
1000cd24:	2101      	movs	r1, #1
1000cd26:	438a      	bics	r2, r1
1000cd28:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd2a:	8919      	ldrh	r1, [r3, #8]
1000cd2c:	2201      	movs	r2, #1
1000cd2e:	430a      	orrs	r2, r1
1000cd30:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd32:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000cd34:	e0af      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd36:	4b27      	ldr	r3, [pc, #156]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd38:	891a      	ldrh	r2, [r3, #8]
1000cd3a:	2102      	movs	r1, #2
1000cd3c:	438a      	bics	r2, r1
1000cd3e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd40:	8919      	ldrh	r1, [r3, #8]
1000cd42:	2202      	movs	r2, #2
1000cd44:	430a      	orrs	r2, r1
1000cd46:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd48:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000cd4a:	e0a4      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd4c:	4b21      	ldr	r3, [pc, #132]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd4e:	891a      	ldrh	r2, [r3, #8]
1000cd50:	2104      	movs	r1, #4
1000cd52:	438a      	bics	r2, r1
1000cd54:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd56:	8919      	ldrh	r1, [r3, #8]
1000cd58:	2204      	movs	r2, #4
1000cd5a:	430a      	orrs	r2, r1
1000cd5c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd5e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000cd60:	e099      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd62:	4b1c      	ldr	r3, [pc, #112]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd64:	891a      	ldrh	r2, [r3, #8]
1000cd66:	2108      	movs	r1, #8
1000cd68:	438a      	bics	r2, r1
1000cd6a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd6c:	8919      	ldrh	r1, [r3, #8]
1000cd6e:	2208      	movs	r2, #8
1000cd70:	430a      	orrs	r2, r1
1000cd72:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd74:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000cd76:	e08e      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd78:	4b16      	ldr	r3, [pc, #88]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd7a:	891a      	ldrh	r2, [r3, #8]
1000cd7c:	2110      	movs	r1, #16
1000cd7e:	438a      	bics	r2, r1
1000cd80:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd82:	8919      	ldrh	r1, [r3, #8]
1000cd84:	2210      	movs	r2, #16
1000cd86:	430a      	orrs	r2, r1
1000cd88:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd8a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000cd8c:	e083      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cd8e:	4b11      	ldr	r3, [pc, #68]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cd90:	891a      	ldrh	r2, [r3, #8]
1000cd92:	2120      	movs	r1, #32
1000cd94:	438a      	bics	r2, r1
1000cd96:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cd98:	8919      	ldrh	r1, [r3, #8]
1000cd9a:	2220      	movs	r2, #32
1000cd9c:	430a      	orrs	r2, r1
1000cd9e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda0:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cda2:	e078      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cda4:	4b0b      	ldr	r3, [pc, #44]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cda6:	891a      	ldrh	r2, [r3, #8]
1000cda8:	2140      	movs	r1, #64	; 0x40
1000cdaa:	438a      	bics	r2, r1
1000cdac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cdae:	8919      	ldrh	r1, [r3, #8]
1000cdb0:	2240      	movs	r2, #64	; 0x40
1000cdb2:	430a      	orrs	r2, r1
1000cdb4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdb6:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000cdb8:	e06d      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cdba:	4b06      	ldr	r3, [pc, #24]	; (1000cdd4 <system_peripheral_reset+0x390>)
1000cdbc:	891a      	ldrh	r2, [r3, #8]
1000cdbe:	2180      	movs	r1, #128	; 0x80
1000cdc0:	438a      	bics	r2, r1
1000cdc2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cdc4:	8919      	ldrh	r1, [r3, #8]
1000cdc6:	2280      	movs	r2, #128	; 0x80
1000cdc8:	430a      	orrs	r2, r1
1000cdca:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdcc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cdce:	e062      	b.n	1000ce96 <system_peripheral_reset+0x452>
1000cdd0:	10016d80 	.word	0x10016d80
1000cdd4:	4000b000 	.word	0x4000b000
1000cdd8:	fffffeff 	.word	0xfffffeff
1000cddc:	fffffdff 	.word	0xfffffdff
1000cde0:	fffffbff 	.word	0xfffffbff
1000cde4:	fffff7ff 	.word	0xfffff7ff
1000cde8:	ffffefff 	.word	0xffffefff
1000cdec:	ffffdfff 	.word	0xffffdfff
1000cdf0:	ffffbfff 	.word	0xffffbfff
1000cdf4:	ffff7fff 	.word	0xffff7fff
1000cdf8:	fffeffff 	.word	0xfffeffff
1000cdfc:	fffdffff 	.word	0xfffdffff
1000ce00:	fffbffff 	.word	0xfffbffff
1000ce04:	fff7ffff 	.word	0xfff7ffff
1000ce08:	ffefffff 	.word	0xffefffff
1000ce0c:	ffdfffff 	.word	0xffdfffff
1000ce10:	ffbfffff 	.word	0xffbfffff
1000ce14:	ff7fffff 	.word	0xff7fffff
1000ce18:	feffffff 	.word	0xfeffffff
1000ce1c:	fdffffff 	.word	0xfdffffff
1000ce20:	fbffffff 	.word	0xfbffffff
1000ce24:	f7ffffff 	.word	0xf7ffffff
1000ce28:	efffffff 	.word	0xefffffff
1000ce2c:	dfffffff 	.word	0xdfffffff
1000ce30:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce34:	4b18      	ldr	r3, [pc, #96]	; (1000ce98 <system_peripheral_reset+0x454>)
1000ce36:	8919      	ldrh	r1, [r3, #8]
1000ce38:	4a18      	ldr	r2, [pc, #96]	; (1000ce9c <system_peripheral_reset+0x458>)
1000ce3a:	400a      	ands	r2, r1
1000ce3c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce3e:	8919      	ldrh	r1, [r3, #8]
1000ce40:	2280      	movs	r2, #128	; 0x80
1000ce42:	0052      	lsls	r2, r2, #1
1000ce44:	430a      	orrs	r2, r1
1000ce46:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce48:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000ce4a:	e024      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce4c:	4b12      	ldr	r3, [pc, #72]	; (1000ce98 <system_peripheral_reset+0x454>)
1000ce4e:	8919      	ldrh	r1, [r3, #8]
1000ce50:	4a13      	ldr	r2, [pc, #76]	; (1000cea0 <system_peripheral_reset+0x45c>)
1000ce52:	400a      	ands	r2, r1
1000ce54:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce56:	8919      	ldrh	r1, [r3, #8]
1000ce58:	2280      	movs	r2, #128	; 0x80
1000ce5a:	0092      	lsls	r2, r2, #2
1000ce5c:	430a      	orrs	r2, r1
1000ce5e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ce62:	e018      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce64:	4b0c      	ldr	r3, [pc, #48]	; (1000ce98 <system_peripheral_reset+0x454>)
1000ce66:	8919      	ldrh	r1, [r3, #8]
1000ce68:	4a0e      	ldr	r2, [pc, #56]	; (1000cea4 <system_peripheral_reset+0x460>)
1000ce6a:	400a      	ands	r2, r1
1000ce6c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce6e:	8919      	ldrh	r1, [r3, #8]
1000ce70:	2280      	movs	r2, #128	; 0x80
1000ce72:	00d2      	lsls	r2, r2, #3
1000ce74:	430a      	orrs	r2, r1
1000ce76:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce78:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ce7a:	e00c      	b.n	1000ce96 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce7c:	4b06      	ldr	r3, [pc, #24]	; (1000ce98 <system_peripheral_reset+0x454>)
1000ce7e:	8919      	ldrh	r1, [r3, #8]
1000ce80:	4a09      	ldr	r2, [pc, #36]	; (1000cea8 <system_peripheral_reset+0x464>)
1000ce82:	400a      	ands	r2, r1
1000ce84:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce86:	8919      	ldrh	r1, [r3, #8]
1000ce88:	2280      	movs	r2, #128	; 0x80
1000ce8a:	0112      	lsls	r2, r2, #4
1000ce8c:	430a      	orrs	r2, r1
1000ce8e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce90:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000ce92:	e000      	b.n	1000ce96 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ce94:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ce96:	bd00      	pop	{pc}
1000ce98:	4000b000 	.word	0x4000b000
1000ce9c:	fffffeff 	.word	0xfffffeff
1000cea0:	fffffdff 	.word	0xfffffdff
1000cea4:	fffffbff 	.word	0xfffffbff
1000cea8:	fffff7ff 	.word	0xfffff7ff

1000ceac <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000ceac:	2380      	movs	r3, #128	; 0x80
1000ceae:	04db      	lsls	r3, r3, #19
1000ceb0:	469c      	mov	ip, r3
1000ceb2:	4460      	add	r0, ip
1000ceb4:	0080      	lsls	r0, r0, #2
1000ceb6:	6001      	str	r1, [r0, #0]
}
1000ceb8:	4770      	bx	lr
1000ceba:	46c0      	nop			; (mov r8, r8)

1000cebc <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000cebc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cebe:	4b20      	ldr	r3, [pc, #128]	; (1000cf40 <uart_rx0_isr_handler+0x84>)
1000cec0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cec2:	6823      	ldr	r3, [r4, #0]
1000cec4:	7d1d      	ldrb	r5, [r3, #20]
1000cec6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cec8:	066a      	lsls	r2, r5, #25
1000ceca:	d513      	bpl.n	1000cef4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cecc:	211e      	movs	r1, #30
1000cece:	2222      	movs	r2, #34	; 0x22
1000ced0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ced2:	7e1a      	ldrb	r2, [r3, #24]
1000ced4:	3123      	adds	r1, #35	; 0x23
1000ced6:	438a      	bics	r2, r1
1000ced8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ceda:	2321      	movs	r3, #33	; 0x21
1000cedc:	5ce3      	ldrb	r3, [r4, r3]
1000cede:	071b      	lsls	r3, r3, #28
1000cee0:	d506      	bpl.n	1000cef0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cee2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cee4:	5ce3      	ldrb	r3, [r4, r3]
1000cee6:	071b      	lsls	r3, r3, #28
1000cee8:	d502      	bpl.n	1000cef0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ceea:	0020      	movs	r0, r4
1000ceec:	6923      	ldr	r3, [r4, #16]
1000ceee:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cef0:	6823      	ldr	r3, [r4, #0]
1000cef2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cef4:	07eb      	lsls	r3, r5, #31
1000cef6:	d522      	bpl.n	1000cf3e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cef8:	6823      	ldr	r3, [r4, #0]
1000cefa:	7c1b      	ldrb	r3, [r3, #16]
1000cefc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cefe:	6962      	ldr	r2, [r4, #20]
1000cf00:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cf02:	6963      	ldr	r3, [r4, #20]
1000cf04:	3301      	adds	r3, #1
1000cf06:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cf08:	8ba3      	ldrh	r3, [r4, #28]
1000cf0a:	3b01      	subs	r3, #1
1000cf0c:	b29b      	uxth	r3, r3
1000cf0e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cf10:	8ba3      	ldrh	r3, [r4, #28]
1000cf12:	b29b      	uxth	r3, r3
1000cf14:	2b00      	cmp	r3, #0
1000cf16:	d112      	bne.n	1000cf3e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf18:	3321      	adds	r3, #33	; 0x21
1000cf1a:	5ce3      	ldrb	r3, [r4, r3]
1000cf1c:	075b      	lsls	r3, r3, #29
1000cf1e:	d50e      	bpl.n	1000cf3e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cf20:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf22:	5ce3      	ldrb	r3, [r4, r3]
1000cf24:	075b      	lsls	r3, r3, #29
1000cf26:	d50a      	bpl.n	1000cf3e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cf28:	2200      	movs	r2, #0
1000cf2a:	2322      	movs	r3, #34	; 0x22
1000cf2c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cf2e:	6822      	ldr	r2, [r4, #0]
1000cf30:	7e13      	ldrb	r3, [r2, #24]
1000cf32:	2101      	movs	r1, #1
1000cf34:	438b      	bics	r3, r1
1000cf36:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cf38:	68e3      	ldr	r3, [r4, #12]
1000cf3a:	0020      	movs	r0, r4
1000cf3c:	4798      	blx	r3
			}
		}
	}
}
1000cf3e:	bd70      	pop	{r4, r5, r6, pc}
1000cf40:	10019bfc 	.word	0x10019bfc

1000cf44 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000cf44:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cf46:	4b21      	ldr	r3, [pc, #132]	; (1000cfcc <uart_tx0_isr_handler+0x88>)
1000cf48:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cf4a:	6823      	ldr	r3, [r4, #0]
1000cf4c:	791d      	ldrb	r5, [r3, #4]
1000cf4e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cf50:	07ea      	lsls	r2, r5, #31
1000cf52:	d517      	bpl.n	1000cf84 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cf54:	69a2      	ldr	r2, [r4, #24]
1000cf56:	7811      	ldrb	r1, [r2, #0]
1000cf58:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cf5a:	3201      	adds	r2, #1
1000cf5c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cf5e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cf60:	8be3      	ldrh	r3, [r4, #30]
1000cf62:	3b01      	subs	r3, #1
1000cf64:	b29b      	uxth	r3, r3
1000cf66:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cf68:	8be3      	ldrh	r3, [r4, #30]
1000cf6a:	b29b      	uxth	r3, r3
1000cf6c:	2b00      	cmp	r3, #0
1000cf6e:	d109      	bne.n	1000cf84 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cf70:	6822      	ldr	r2, [r4, #0]
1000cf72:	7a13      	ldrb	r3, [r2, #8]
1000cf74:	2101      	movs	r1, #1
1000cf76:	438b      	bics	r3, r1
1000cf78:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cf7a:	6822      	ldr	r2, [r4, #0]
1000cf7c:	7a11      	ldrb	r1, [r2, #8]
1000cf7e:	2310      	movs	r3, #16
1000cf80:	430b      	orrs	r3, r1
1000cf82:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cf84:	06eb      	lsls	r3, r5, #27
1000cf86:	d512      	bpl.n	1000cfae <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cf88:	2321      	movs	r3, #33	; 0x21
1000cf8a:	5ce3      	ldrb	r3, [r4, r3]
1000cf8c:	07db      	lsls	r3, r3, #31
1000cf8e:	d50e      	bpl.n	1000cfae <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cf90:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cf92:	5ce3      	ldrb	r3, [r4, r3]
1000cf94:	07db      	lsls	r3, r3, #31
1000cf96:	d50a      	bpl.n	1000cfae <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cf98:	2200      	movs	r2, #0
1000cf9a:	2322      	movs	r3, #34	; 0x22
1000cf9c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cf9e:	6822      	ldr	r2, [r4, #0]
1000cfa0:	7a13      	ldrb	r3, [r2, #8]
1000cfa2:	2110      	movs	r1, #16
1000cfa4:	438b      	bics	r3, r1
1000cfa6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cfa8:	0020      	movs	r0, r4
1000cfaa:	6863      	ldr	r3, [r4, #4]
1000cfac:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cfae:	06ab      	lsls	r3, r5, #26
1000cfb0:	d50a      	bpl.n	1000cfc8 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cfb2:	2321      	movs	r3, #33	; 0x21
1000cfb4:	5ce3      	ldrb	r3, [r4, r3]
1000cfb6:	079b      	lsls	r3, r3, #30
1000cfb8:	d506      	bpl.n	1000cfc8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cfba:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cfbc:	5ce3      	ldrb	r3, [r4, r3]
1000cfbe:	079b      	lsls	r3, r3, #30
1000cfc0:	d502      	bpl.n	1000cfc8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cfc2:	68a3      	ldr	r3, [r4, #8]
1000cfc4:	0020      	movs	r0, r4
1000cfc6:	4798      	blx	r3
		}

	}
}
1000cfc8:	bd70      	pop	{r4, r5, r6, pc}
1000cfca:	46c0      	nop			; (mov r8, r8)
1000cfcc:	10019bfc 	.word	0x10019bfc

1000cfd0 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cfd0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cfd2:	4b20      	ldr	r3, [pc, #128]	; (1000d054 <uart_rx1_isr_handler+0x84>)
1000cfd4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cfd6:	6823      	ldr	r3, [r4, #0]
1000cfd8:	7d1d      	ldrb	r5, [r3, #20]
1000cfda:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cfdc:	066a      	lsls	r2, r5, #25
1000cfde:	d513      	bpl.n	1000d008 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cfe0:	211e      	movs	r1, #30
1000cfe2:	2222      	movs	r2, #34	; 0x22
1000cfe4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cfe6:	7e1a      	ldrb	r2, [r3, #24]
1000cfe8:	3123      	adds	r1, #35	; 0x23
1000cfea:	438a      	bics	r2, r1
1000cfec:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cfee:	2321      	movs	r3, #33	; 0x21
1000cff0:	5ce3      	ldrb	r3, [r4, r3]
1000cff2:	071b      	lsls	r3, r3, #28
1000cff4:	d506      	bpl.n	1000d004 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cff6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cff8:	5ce3      	ldrb	r3, [r4, r3]
1000cffa:	071b      	lsls	r3, r3, #28
1000cffc:	d502      	bpl.n	1000d004 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cffe:	0020      	movs	r0, r4
1000d000:	6923      	ldr	r3, [r4, #16]
1000d002:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d004:	6823      	ldr	r3, [r4, #0]
1000d006:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d008:	07eb      	lsls	r3, r5, #31
1000d00a:	d522      	bpl.n	1000d052 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d00c:	6823      	ldr	r3, [r4, #0]
1000d00e:	7c1b      	ldrb	r3, [r3, #16]
1000d010:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d012:	6962      	ldr	r2, [r4, #20]
1000d014:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d016:	6963      	ldr	r3, [r4, #20]
1000d018:	3301      	adds	r3, #1
1000d01a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d01c:	8ba3      	ldrh	r3, [r4, #28]
1000d01e:	3b01      	subs	r3, #1
1000d020:	b29b      	uxth	r3, r3
1000d022:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d024:	8ba3      	ldrh	r3, [r4, #28]
1000d026:	b29b      	uxth	r3, r3
1000d028:	2b00      	cmp	r3, #0
1000d02a:	d112      	bne.n	1000d052 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d02c:	3321      	adds	r3, #33	; 0x21
1000d02e:	5ce3      	ldrb	r3, [r4, r3]
1000d030:	075b      	lsls	r3, r3, #29
1000d032:	d50e      	bpl.n	1000d052 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d034:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d036:	5ce3      	ldrb	r3, [r4, r3]
1000d038:	075b      	lsls	r3, r3, #29
1000d03a:	d50a      	bpl.n	1000d052 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d03c:	2200      	movs	r2, #0
1000d03e:	2322      	movs	r3, #34	; 0x22
1000d040:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d042:	6822      	ldr	r2, [r4, #0]
1000d044:	7e13      	ldrb	r3, [r2, #24]
1000d046:	2101      	movs	r1, #1
1000d048:	438b      	bics	r3, r1
1000d04a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d04c:	68e3      	ldr	r3, [r4, #12]
1000d04e:	0020      	movs	r0, r4
1000d050:	4798      	blx	r3
			}
		}
	}
}
1000d052:	bd70      	pop	{r4, r5, r6, pc}
1000d054:	10019bfc 	.word	0x10019bfc

1000d058 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d058:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d05a:	4b21      	ldr	r3, [pc, #132]	; (1000d0e0 <uart_tx1_isr_handler+0x88>)
1000d05c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d05e:	6823      	ldr	r3, [r4, #0]
1000d060:	791d      	ldrb	r5, [r3, #4]
1000d062:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d064:	07ea      	lsls	r2, r5, #31
1000d066:	d517      	bpl.n	1000d098 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d068:	69a2      	ldr	r2, [r4, #24]
1000d06a:	7811      	ldrb	r1, [r2, #0]
1000d06c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d06e:	3201      	adds	r2, #1
1000d070:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d072:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d074:	8be3      	ldrh	r3, [r4, #30]
1000d076:	3b01      	subs	r3, #1
1000d078:	b29b      	uxth	r3, r3
1000d07a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d07c:	8be3      	ldrh	r3, [r4, #30]
1000d07e:	b29b      	uxth	r3, r3
1000d080:	2b00      	cmp	r3, #0
1000d082:	d109      	bne.n	1000d098 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d084:	6822      	ldr	r2, [r4, #0]
1000d086:	7a13      	ldrb	r3, [r2, #8]
1000d088:	2101      	movs	r1, #1
1000d08a:	438b      	bics	r3, r1
1000d08c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d08e:	6822      	ldr	r2, [r4, #0]
1000d090:	7a11      	ldrb	r1, [r2, #8]
1000d092:	2310      	movs	r3, #16
1000d094:	430b      	orrs	r3, r1
1000d096:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d098:	06eb      	lsls	r3, r5, #27
1000d09a:	d512      	bpl.n	1000d0c2 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d09c:	2321      	movs	r3, #33	; 0x21
1000d09e:	5ce3      	ldrb	r3, [r4, r3]
1000d0a0:	07db      	lsls	r3, r3, #31
1000d0a2:	d50e      	bpl.n	1000d0c2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d0a4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d0a6:	5ce3      	ldrb	r3, [r4, r3]
1000d0a8:	07db      	lsls	r3, r3, #31
1000d0aa:	d50a      	bpl.n	1000d0c2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d0ac:	2200      	movs	r2, #0
1000d0ae:	2322      	movs	r3, #34	; 0x22
1000d0b0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d0b2:	6822      	ldr	r2, [r4, #0]
1000d0b4:	7a13      	ldrb	r3, [r2, #8]
1000d0b6:	2110      	movs	r1, #16
1000d0b8:	438b      	bics	r3, r1
1000d0ba:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d0bc:	0020      	movs	r0, r4
1000d0be:	6863      	ldr	r3, [r4, #4]
1000d0c0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d0c2:	06ab      	lsls	r3, r5, #26
1000d0c4:	d50a      	bpl.n	1000d0dc <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0c6:	2321      	movs	r3, #33	; 0x21
1000d0c8:	5ce3      	ldrb	r3, [r4, r3]
1000d0ca:	079b      	lsls	r3, r3, #30
1000d0cc:	d506      	bpl.n	1000d0dc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d0ce:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0d0:	5ce3      	ldrb	r3, [r4, r3]
1000d0d2:	079b      	lsls	r3, r3, #30
1000d0d4:	d502      	bpl.n	1000d0dc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d0d6:	68a3      	ldr	r3, [r4, #8]
1000d0d8:	0020      	movs	r0, r4
1000d0da:	4798      	blx	r3
		}

	}
}
1000d0dc:	bd70      	pop	{r4, r5, r6, pc}
1000d0de:	46c0      	nop			; (mov r8, r8)
1000d0e0:	10019bfc 	.word	0x10019bfc

1000d0e4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d0e4:	23e1      	movs	r3, #225	; 0xe1
1000d0e6:	025b      	lsls	r3, r3, #9
1000d0e8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d0ea:	2300      	movs	r3, #0
1000d0ec:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d0ee:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d0f0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d0f2:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d0f4:	3302      	adds	r3, #2
1000d0f6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d0f8:	2203      	movs	r2, #3
1000d0fa:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d0fc:	3201      	adds	r2, #1
1000d0fe:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d100:	3201      	adds	r2, #1
1000d102:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d104:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d106:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d108:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d10a:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d10c:	4770      	bx	lr
1000d10e:	46c0      	nop			; (mov r8, r8)

1000d110 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d112:	464f      	mov	r7, r9
1000d114:	4646      	mov	r6, r8
1000d116:	b4c0      	push	{r6, r7}
1000d118:	0005      	movs	r5, r0
1000d11a:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d11c:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d11e:	2300      	movs	r3, #0
1000d120:	6043      	str	r3, [r0, #4]
1000d122:	6083      	str	r3, [r0, #8]
1000d124:	60c3      	str	r3, [r0, #12]
1000d126:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d128:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d12a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d12c:	2200      	movs	r2, #0
1000d12e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d130:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d132:	3320      	adds	r3, #32
1000d134:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d136:	3301      	adds	r3, #1
1000d138:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d13a:	3301      	adds	r3, #1
1000d13c:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d13e:	4b55      	ldr	r3, [pc, #340]	; (1000d294 <uart_init+0x184>)
1000d140:	4299      	cmp	r1, r3
1000d142:	d118      	bne.n	1000d176 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d144:	2009      	movs	r0, #9
1000d146:	4c54      	ldr	r4, [pc, #336]	; (1000d298 <uart_init+0x188>)
1000d148:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d14a:	200a      	movs	r0, #10
1000d14c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d14e:	2009      	movs	r0, #9
1000d150:	4c52      	ldr	r4, [pc, #328]	; (1000d29c <uart_init+0x18c>)
1000d152:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d154:	200a      	movs	r0, #10
1000d156:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d158:	4b51      	ldr	r3, [pc, #324]	; (1000d2a0 <uart_init+0x190>)
1000d15a:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d15c:	4951      	ldr	r1, [pc, #324]	; (1000d2a4 <uart_init+0x194>)
1000d15e:	2010      	movs	r0, #16
1000d160:	4c51      	ldr	r4, [pc, #324]	; (1000d2a8 <uart_init+0x198>)
1000d162:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d164:	4951      	ldr	r1, [pc, #324]	; (1000d2ac <uart_init+0x19c>)
1000d166:	2011      	movs	r0, #17
1000d168:	47a0      	blx	r4
1000d16a:	4b51      	ldr	r3, [pc, #324]	; (1000d2b0 <uart_init+0x1a0>)
1000d16c:	2201      	movs	r2, #1
1000d16e:	601a      	str	r2, [r3, #0]
1000d170:	3201      	adds	r2, #1
1000d172:	601a      	str	r2, [r3, #0]
1000d174:	e01a      	b.n	1000d1ac <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d176:	4b4f      	ldr	r3, [pc, #316]	; (1000d2b4 <uart_init+0x1a4>)
1000d178:	4299      	cmp	r1, r3
1000d17a:	d117      	bne.n	1000d1ac <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d17c:	200b      	movs	r0, #11
1000d17e:	4c46      	ldr	r4, [pc, #280]	; (1000d298 <uart_init+0x188>)
1000d180:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d182:	200c      	movs	r0, #12
1000d184:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d186:	200b      	movs	r0, #11
1000d188:	4c44      	ldr	r4, [pc, #272]	; (1000d29c <uart_init+0x18c>)
1000d18a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d18c:	200c      	movs	r0, #12
1000d18e:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d190:	4b43      	ldr	r3, [pc, #268]	; (1000d2a0 <uart_init+0x190>)
1000d192:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d194:	4948      	ldr	r1, [pc, #288]	; (1000d2b8 <uart_init+0x1a8>)
1000d196:	2012      	movs	r0, #18
1000d198:	4c43      	ldr	r4, [pc, #268]	; (1000d2a8 <uart_init+0x198>)
1000d19a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d19c:	4947      	ldr	r1, [pc, #284]	; (1000d2bc <uart_init+0x1ac>)
1000d19e:	2013      	movs	r0, #19
1000d1a0:	47a0      	blx	r4
1000d1a2:	4b43      	ldr	r3, [pc, #268]	; (1000d2b0 <uart_init+0x1a0>)
1000d1a4:	2204      	movs	r2, #4
1000d1a6:	601a      	str	r2, [r3, #0]
1000d1a8:	3204      	adds	r2, #4
1000d1aa:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d1ac:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d1ae:	2204      	movs	r2, #4
1000d1b0:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d1b2:	2b00      	cmp	r3, #0
1000d1b4:	d152      	bne.n	1000d25c <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d1b6:	3302      	adds	r3, #2
1000d1b8:	4698      	mov	r8, r3
1000d1ba:	e04f      	b.n	1000d25c <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d1bc:	8a31      	ldrh	r1, [r6, #16]
1000d1be:	ce01      	ldmia	r6!, {r0}
1000d1c0:	b2c0      	uxtb	r0, r0
1000d1c2:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d1c4:	3401      	adds	r4, #1
1000d1c6:	b2e4      	uxtb	r4, r4
1000d1c8:	4544      	cmp	r4, r8
1000d1ca:	d3f7      	bcc.n	1000d1bc <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d1cc:	682b      	ldr	r3, [r5, #0]
1000d1ce:	7d1a      	ldrb	r2, [r3, #20]
1000d1d0:	07d2      	lsls	r2, r2, #31
1000d1d2:	d504      	bpl.n	1000d1de <uart_init+0xce>
1000d1d4:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d1d6:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d1d8:	7d1a      	ldrb	r2, [r3, #20]
1000d1da:	420a      	tst	r2, r1
1000d1dc:	d1fb      	bne.n	1000d1d6 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d1de:	2100      	movs	r1, #0
1000d1e0:	2220      	movs	r2, #32
1000d1e2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d1e4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d1e6:	1e59      	subs	r1, r3, #1
1000d1e8:	418b      	sbcs	r3, r1
1000d1ea:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d1ec:	793b      	ldrb	r3, [r7, #4]
1000d1ee:	797a      	ldrb	r2, [r7, #5]
1000d1f0:	4313      	orrs	r3, r2
1000d1f2:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d1f4:	79ba      	ldrb	r2, [r7, #6]
1000d1f6:	2a02      	cmp	r2, #2
1000d1f8:	d00d      	beq.n	1000d216 <uart_init+0x106>
1000d1fa:	b2d1      	uxtb	r1, r2
1000d1fc:	2902      	cmp	r1, #2
1000d1fe:	d802      	bhi.n	1000d206 <uart_init+0xf6>
1000d200:	2a01      	cmp	r2, #1
1000d202:	d005      	beq.n	1000d210 <uart_init+0x100>
1000d204:	e00f      	b.n	1000d226 <uart_init+0x116>
1000d206:	2a03      	cmp	r2, #3
1000d208:	d008      	beq.n	1000d21c <uart_init+0x10c>
1000d20a:	2a04      	cmp	r2, #4
1000d20c:	d009      	beq.n	1000d222 <uart_init+0x112>
1000d20e:	e00a      	b.n	1000d226 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d210:	2202      	movs	r2, #2
1000d212:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d214:	e007      	b.n	1000d226 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d216:	2206      	movs	r2, #6
1000d218:	4313      	orrs	r3, r2
			break;
1000d21a:	e004      	b.n	1000d226 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d21c:	220a      	movs	r2, #10
1000d21e:	4313      	orrs	r3, r2
			break;
1000d220:	e001      	b.n	1000d226 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d222:	220e      	movs	r2, #14
1000d224:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d226:	2220      	movs	r2, #32
1000d228:	6829      	ldr	r1, [r5, #0]
1000d22a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d22c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d22e:	4b24      	ldr	r3, [pc, #144]	; (1000d2c0 <uart_init+0x1b0>)
1000d230:	4798      	blx	r3
1000d232:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d234:	0031      	movs	r1, r6
1000d236:	4b23      	ldr	r3, [pc, #140]	; (1000d2c4 <uart_init+0x1b4>)
1000d238:	4798      	blx	r3
1000d23a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d23c:	0400      	lsls	r0, r0, #16
1000d23e:	0c00      	lsrs	r0, r0, #16
1000d240:	4370      	muls	r0, r6
1000d242:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d244:	0931      	lsrs	r1, r6, #4
1000d246:	4288      	cmp	r0, r1
1000d248:	d906      	bls.n	1000d258 <uart_init+0x148>
1000d24a:	2300      	movs	r3, #0
		i++;
1000d24c:	3301      	adds	r3, #1
1000d24e:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d250:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d252:	4288      	cmp	r0, r1
1000d254:	d8fa      	bhi.n	1000d24c <uart_init+0x13c>
1000d256:	e007      	b.n	1000d268 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d258:	2300      	movs	r3, #0
1000d25a:	e005      	b.n	1000d268 <uart_init+0x158>
1000d25c:	003e      	movs	r6, r7
1000d25e:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d260:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d262:	4b19      	ldr	r3, [pc, #100]	; (1000d2c8 <uart_init+0x1b8>)
1000d264:	4699      	mov	r9, r3
1000d266:	e7a9      	b.n	1000d1bc <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d268:	2100      	movs	r1, #0
1000d26a:	2028      	movs	r0, #40	; 0x28
1000d26c:	682c      	ldr	r4, [r5, #0]
1000d26e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d270:	3301      	adds	r3, #1
1000d272:	071b      	lsls	r3, r3, #28
1000d274:	0f5b      	lsrs	r3, r3, #29
1000d276:	00d2      	lsls	r2, r2, #3
1000d278:	4313      	orrs	r3, r2
1000d27a:	b29b      	uxth	r3, r3
1000d27c:	682a      	ldr	r2, [r5, #0]
1000d27e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d280:	682b      	ldr	r3, [r5, #0]
1000d282:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d284:	682b      	ldr	r3, [r5, #0]
1000d286:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d288:	2000      	movs	r0, #0
1000d28a:	bc0c      	pop	{r2, r3}
1000d28c:	4690      	mov	r8, r2
1000d28e:	4699      	mov	r9, r3
1000d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d292:	46c0      	nop			; (mov r8, r8)
1000d294:	40004000 	.word	0x40004000
1000d298:	1000ca45 	.word	0x1000ca45
1000d29c:	1000c37d 	.word	0x1000c37d
1000d2a0:	10019bfc 	.word	0x10019bfc
1000d2a4:	1000cebd 	.word	0x1000cebd
1000d2a8:	1000cead 	.word	0x1000cead
1000d2ac:	1000cf45 	.word	0x1000cf45
1000d2b0:	e000e100 	.word	0xe000e100
1000d2b4:	40005000 	.word	0x40005000
1000d2b8:	1000cfd1 	.word	0x1000cfd1
1000d2bc:	1000d059 	.word	0x1000d059
1000d2c0:	1000c371 	.word	0x1000c371
1000d2c4:	10012c7d 	.word	0x10012c7d
1000d2c8:	1000bfcd 	.word	0x1000bfcd

1000d2cc <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d2cc:	6802      	ldr	r2, [r0, #0]
1000d2ce:	2001      	movs	r0, #1
1000d2d0:	7913      	ldrb	r3, [r2, #4]
1000d2d2:	4203      	tst	r3, r0
1000d2d4:	d0fc      	beq.n	1000d2d0 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d2d6:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d2d8:	2000      	movs	r0, #0
1000d2da:	4770      	bx	lr

1000d2dc <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d2dc:	6802      	ldr	r2, [r0, #0]
1000d2de:	2001      	movs	r0, #1
1000d2e0:	7d13      	ldrb	r3, [r2, #20]
1000d2e2:	4203      	tst	r3, r0
1000d2e4:	d0fc      	beq.n	1000d2e0 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d2e6:	7c13      	ldrb	r3, [r2, #16]
1000d2e8:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d2ea:	2000      	movs	r0, #0
1000d2ec:	4770      	bx	lr
1000d2ee:	46c0      	nop			; (mov r8, r8)

1000d2f0 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d2f0:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d2f2:	2a00      	cmp	r2, #0
1000d2f4:	d00d      	beq.n	1000d312 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d2f6:	330b      	adds	r3, #11
1000d2f8:	5cc3      	ldrb	r3, [r0, r3]
1000d2fa:	b2db      	uxtb	r3, r3
1000d2fc:	2b05      	cmp	r3, #5
1000d2fe:	d008      	beq.n	1000d312 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d300:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d302:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d304:	2205      	movs	r2, #5
1000d306:	2322      	movs	r3, #34	; 0x22
1000d308:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d30a:	6803      	ldr	r3, [r0, #0]
1000d30c:	3a04      	subs	r2, #4
1000d30e:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d310:	2300      	movs	r3, #0
}
1000d312:	0018      	movs	r0, r3
1000d314:	4770      	bx	lr
1000d316:	46c0      	nop			; (mov r8, r8)

1000d318 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d318:	0093      	lsls	r3, r2, #2
1000d31a:	18c3      	adds	r3, r0, r3
1000d31c:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d31e:	2120      	movs	r1, #32
1000d320:	2301      	movs	r3, #1
1000d322:	4093      	lsls	r3, r2
1000d324:	5c42      	ldrb	r2, [r0, r1]
1000d326:	4313      	orrs	r3, r2
1000d328:	5443      	strb	r3, [r0, r1]
}
1000d32a:	4770      	bx	lr

1000d32c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d32c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d32e:	2221      	movs	r2, #33	; 0x21
1000d330:	2301      	movs	r3, #1
1000d332:	408b      	lsls	r3, r1
1000d334:	5c84      	ldrb	r4, [r0, r2]
1000d336:	4323      	orrs	r3, r4
1000d338:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d33a:	2901      	cmp	r1, #1
1000d33c:	d104      	bne.n	1000d348 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d33e:	6802      	ldr	r2, [r0, #0]
1000d340:	7a11      	ldrb	r1, [r2, #8]
1000d342:	2320      	movs	r3, #32
1000d344:	430b      	orrs	r3, r1
1000d346:	7213      	strb	r3, [r2, #8]
	}
}
1000d348:	bd10      	pop	{r4, pc}
1000d34a:	46c0      	nop			; (mov r8, r8)

1000d34c <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d34c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d34e:	2201      	movs	r2, #1
1000d350:	408a      	lsls	r2, r1
1000d352:	2421      	movs	r4, #33	; 0x21
1000d354:	5d03      	ldrb	r3, [r0, r4]
1000d356:	4393      	bics	r3, r2
1000d358:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d35a:	2901      	cmp	r1, #1
1000d35c:	d104      	bne.n	1000d368 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d35e:	6802      	ldr	r2, [r0, #0]
1000d360:	7a13      	ldrb	r3, [r2, #8]
1000d362:	311f      	adds	r1, #31
1000d364:	438b      	bics	r3, r1
1000d366:	7213      	strb	r3, [r2, #8]
	}

}
1000d368:	bd10      	pop	{r4, pc}
1000d36a:	46c0      	nop			; (mov r8, r8)

1000d36c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d36e:	4647      	mov	r7, r8
1000d370:	b480      	push	{r7}
1000d372:	000c      	movs	r4, r1
1000d374:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d376:	2800      	cmp	r0, #0
1000d378:	d10d      	bne.n	1000d396 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d37a:	2a00      	cmp	r2, #0
1000d37c:	dd0e      	ble.n	1000d39c <_read+0x30>
1000d37e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d380:	4e08      	ldr	r6, [pc, #32]	; (1000d3a4 <_read+0x38>)
1000d382:	4d09      	ldr	r5, [pc, #36]	; (1000d3a8 <_read+0x3c>)
1000d384:	6830      	ldr	r0, [r6, #0]
1000d386:	0021      	movs	r1, r4
1000d388:	682b      	ldr	r3, [r5, #0]
1000d38a:	4798      	blx	r3
		ptr++;
1000d38c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d38e:	42a7      	cmp	r7, r4
1000d390:	d1f8      	bne.n	1000d384 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d392:	4640      	mov	r0, r8
1000d394:	e003      	b.n	1000d39e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d396:	2001      	movs	r0, #1
1000d398:	4240      	negs	r0, r0
1000d39a:	e000      	b.n	1000d39e <_read+0x32>
	}

	for (; len > 0; --len) {
1000d39c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d39e:	bc04      	pop	{r2}
1000d3a0:	4690      	mov	r8, r2
1000d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3a4:	10019c0c 	.word	0x10019c0c
1000d3a8:	10019c04 	.word	0x10019c04

1000d3ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3ae:	4647      	mov	r7, r8
1000d3b0:	b480      	push	{r7}
1000d3b2:	000e      	movs	r6, r1
1000d3b4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d3b6:	3801      	subs	r0, #1
1000d3b8:	2802      	cmp	r0, #2
1000d3ba:	d811      	bhi.n	1000d3e0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d3bc:	2a00      	cmp	r2, #0
1000d3be:	d012      	beq.n	1000d3e6 <_write+0x3a>
1000d3c0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d3c2:	4b0c      	ldr	r3, [pc, #48]	; (1000d3f4 <_write+0x48>)
1000d3c4:	4698      	mov	r8, r3
1000d3c6:	4f0c      	ldr	r7, [pc, #48]	; (1000d3f8 <_write+0x4c>)
1000d3c8:	4643      	mov	r3, r8
1000d3ca:	6818      	ldr	r0, [r3, #0]
1000d3cc:	5d31      	ldrb	r1, [r6, r4]
1000d3ce:	683b      	ldr	r3, [r7, #0]
1000d3d0:	4798      	blx	r3
1000d3d2:	2800      	cmp	r0, #0
1000d3d4:	db09      	blt.n	1000d3ea <_write+0x3e>
			return -1;
		}
		++nChars;
1000d3d6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d3d8:	42a5      	cmp	r5, r4
1000d3da:	d1f5      	bne.n	1000d3c8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d3dc:	0020      	movs	r0, r4
1000d3de:	e006      	b.n	1000d3ee <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d3e0:	2001      	movs	r0, #1
1000d3e2:	4240      	negs	r0, r0
1000d3e4:	e003      	b.n	1000d3ee <_write+0x42>
	}

	for (; len != 0; --len) {
1000d3e6:	2000      	movs	r0, #0
1000d3e8:	e001      	b.n	1000d3ee <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d3ea:	2001      	movs	r0, #1
1000d3ec:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d3ee:	bc04      	pop	{r2}
1000d3f0:	4690      	mov	r8, r2
1000d3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3f4:	10019c0c 	.word	0x10019c0c
1000d3f8:	10019c08 	.word	0x10019c08

1000d3fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d3fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d3fe:	4a06      	ldr	r2, [pc, #24]	; (1000d418 <_sbrk+0x1c>)
1000d400:	6812      	ldr	r2, [r2, #0]
1000d402:	2a00      	cmp	r2, #0
1000d404:	d102      	bne.n	1000d40c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d406:	4905      	ldr	r1, [pc, #20]	; (1000d41c <_sbrk+0x20>)
1000d408:	4a03      	ldr	r2, [pc, #12]	; (1000d418 <_sbrk+0x1c>)
1000d40a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d40c:	4a02      	ldr	r2, [pc, #8]	; (1000d418 <_sbrk+0x1c>)
1000d40e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d410:	18c3      	adds	r3, r0, r3
1000d412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d414:	4770      	bx	lr
1000d416:	46c0      	nop			; (mov r8, r8)
1000d418:	10017eac 	.word	0x10017eac
1000d41c:	1001c518 	.word	0x1001c518

1000d420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d420:	2001      	movs	r0, #1
1000d422:	4240      	negs	r0, r0
1000d424:	4770      	bx	lr
1000d426:	46c0      	nop			; (mov r8, r8)

1000d428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d428:	2380      	movs	r3, #128	; 0x80
1000d42a:	019b      	lsls	r3, r3, #6
1000d42c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d42e:	2000      	movs	r0, #0
1000d430:	4770      	bx	lr
1000d432:	46c0      	nop			; (mov r8, r8)

1000d434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d434:	2001      	movs	r0, #1
1000d436:	4770      	bx	lr

1000d438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d438:	2000      	movs	r0, #0
1000d43a:	4770      	bx	lr

1000d43c <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d43c:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d43e:	4804      	ldr	r0, [pc, #16]	; (1000d450 <ble_undefined_event_handler+0x14>)
1000d440:	4b04      	ldr	r3, [pc, #16]	; (1000d454 <ble_undefined_event_handler+0x18>)
1000d442:	4798      	blx	r3
1000d444:	4804      	ldr	r0, [pc, #16]	; (1000d458 <ble_undefined_event_handler+0x1c>)
1000d446:	4b05      	ldr	r3, [pc, #20]	; (1000d45c <ble_undefined_event_handler+0x20>)
1000d448:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d44a:	2000      	movs	r0, #0
1000d44c:	bd10      	pop	{r4, pc}
1000d44e:	46c0      	nop			; (mov r8, r8)
1000d450:	10015e2c 	.word	0x10015e2c
1000d454:	10014c6d 	.word	0x10014c6d
1000d458:	10016ff4 	.word	0x10016ff4
1000d45c:	10014b4d 	.word	0x10014b4d

1000d460 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d460:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d462:	7800      	ldrb	r0, [r0, #0]
1000d464:	2800      	cmp	r0, #0
1000d466:	d006      	beq.n	1000d476 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d468:	4803      	ldr	r0, [pc, #12]	; (1000d478 <ble_scan_report_handler+0x18>)
1000d46a:	4b04      	ldr	r3, [pc, #16]	; (1000d47c <ble_scan_report_handler+0x1c>)
1000d46c:	4798      	blx	r3
1000d46e:	4804      	ldr	r0, [pc, #16]	; (1000d480 <ble_scan_report_handler+0x20>)
1000d470:	4b04      	ldr	r3, [pc, #16]	; (1000d484 <ble_scan_report_handler+0x24>)
1000d472:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d474:	20e2      	movs	r0, #226	; 0xe2
}
1000d476:	bd10      	pop	{r4, pc}
1000d478:	10015e2c 	.word	0x10015e2c
1000d47c:	10014c6d 	.word	0x10014c6d
1000d480:	10017010 	.word	0x10017010
1000d484:	10014b4d 	.word	0x10014b4d

1000d488 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d488:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d48a:	7800      	ldrb	r0, [r0, #0]
1000d48c:	2800      	cmp	r0, #0
1000d48e:	d006      	beq.n	1000d49e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d490:	4803      	ldr	r0, [pc, #12]	; (1000d4a0 <ble_adv_report_handler+0x18>)
1000d492:	4b04      	ldr	r3, [pc, #16]	; (1000d4a4 <ble_adv_report_handler+0x1c>)
1000d494:	4798      	blx	r3
1000d496:	4804      	ldr	r0, [pc, #16]	; (1000d4a8 <ble_adv_report_handler+0x20>)
1000d498:	4b04      	ldr	r3, [pc, #16]	; (1000d4ac <ble_adv_report_handler+0x24>)
1000d49a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d49c:	20e2      	movs	r0, #226	; 0xe2
}
1000d49e:	bd10      	pop	{r4, pc}
1000d4a0:	10015e2c 	.word	0x10015e2c
1000d4a4:	10014c6d 	.word	0x10014c6d
1000d4a8:	10017024 	.word	0x10017024
1000d4ac:	10014b4d 	.word	0x10014b4d

1000d4b0 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d4b0:	b510      	push	{r4, lr}
1000d4b2:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d4b4:	4804      	ldr	r0, [pc, #16]	; (1000d4c8 <ble_mtu_changed_indication_handler+0x18>)
1000d4b6:	4b05      	ldr	r3, [pc, #20]	; (1000d4cc <ble_mtu_changed_indication_handler+0x1c>)
1000d4b8:	4798      	blx	r3
1000d4ba:	8862      	ldrh	r2, [r4, #2]
1000d4bc:	8821      	ldrh	r1, [r4, #0]
1000d4be:	4804      	ldr	r0, [pc, #16]	; (1000d4d0 <ble_mtu_changed_indication_handler+0x20>)
1000d4c0:	4b04      	ldr	r3, [pc, #16]	; (1000d4d4 <ble_mtu_changed_indication_handler+0x24>)
1000d4c2:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d4c4:	2000      	movs	r0, #0
1000d4c6:	bd10      	pop	{r4, pc}
1000d4c8:	10015e2c 	.word	0x10015e2c
1000d4cc:	10014c6d 	.word	0x10014c6d
1000d4d0:	10017038 	.word	0x10017038
1000d4d4:	10014b4d 	.word	0x10014b4d

1000d4d8 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d4d8:	b570      	push	{r4, r5, r6, lr}
1000d4da:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d4dc:	78c5      	ldrb	r5, [r0, #3]
1000d4de:	2d00      	cmp	r5, #0
1000d4e0:	d108      	bne.n	1000d4f4 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d4e2:	480a      	ldr	r0, [pc, #40]	; (1000d50c <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d4e4:	4b0a      	ldr	r3, [pc, #40]	; (1000d510 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d4e6:	4798      	blx	r3
1000d4e8:	78a2      	ldrb	r2, [r4, #2]
1000d4ea:	8821      	ldrh	r1, [r4, #0]
1000d4ec:	4809      	ldr	r0, [pc, #36]	; (1000d514 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d4ee:	4b0a      	ldr	r3, [pc, #40]	; (1000d518 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d4f0:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d4f2:	e008      	b.n	1000d506 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d4f4:	4805      	ldr	r0, [pc, #20]	; (1000d50c <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d4f6:	4b06      	ldr	r3, [pc, #24]	; (1000d510 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d4f8:	4798      	blx	r3
1000d4fa:	78a2      	ldrb	r2, [r4, #2]
1000d4fc:	8821      	ldrh	r1, [r4, #0]
1000d4fe:	4807      	ldr	r0, [pc, #28]	; (1000d51c <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d500:	4b05      	ldr	r3, [pc, #20]	; (1000d518 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d502:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d504:	25e2      	movs	r5, #226	; 0xe2
}
1000d506:	0028      	movs	r0, r5
1000d508:	bd70      	pop	{r4, r5, r6, pc}
1000d50a:	46c0      	nop			; (mov r8, r8)
1000d50c:	10015e2c 	.word	0x10015e2c
1000d510:	10014c6d 	.word	0x10014c6d
1000d514:	10017070 	.word	0x10017070
1000d518:	10014b4d 	.word	0x10014b4d
1000d51c:	100170a0 	.word	0x100170a0

1000d520 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d520:	b570      	push	{r4, r5, r6, lr}
1000d522:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d524:	78c5      	ldrb	r5, [r0, #3]
1000d526:	2d00      	cmp	r5, #0
1000d528:	d108      	bne.n	1000d53c <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d52a:	480a      	ldr	r0, [pc, #40]	; (1000d554 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d52c:	4b0a      	ldr	r3, [pc, #40]	; (1000d558 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d52e:	4798      	blx	r3
1000d530:	78a2      	ldrb	r2, [r4, #2]
1000d532:	8821      	ldrh	r1, [r4, #0]
1000d534:	4809      	ldr	r0, [pc, #36]	; (1000d55c <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d536:	4b0a      	ldr	r3, [pc, #40]	; (1000d560 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d538:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d53a:	e008      	b.n	1000d54e <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d53c:	4805      	ldr	r0, [pc, #20]	; (1000d554 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d53e:	4b06      	ldr	r3, [pc, #24]	; (1000d558 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d540:	4798      	blx	r3
1000d542:	78a2      	ldrb	r2, [r4, #2]
1000d544:	8821      	ldrh	r1, [r4, #0]
1000d546:	4807      	ldr	r0, [pc, #28]	; (1000d564 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d548:	4b05      	ldr	r3, [pc, #20]	; (1000d560 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d54a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d54c:	25e2      	movs	r5, #226	; 0xe2
}
1000d54e:	0028      	movs	r0, r5
1000d550:	bd70      	pop	{r4, r5, r6, pc}
1000d552:	46c0      	nop			; (mov r8, r8)
1000d554:	10015e2c 	.word	0x10015e2c
1000d558:	10014c6d 	.word	0x10014c6d
1000d55c:	100170d8 	.word	0x100170d8
1000d560:	10014b4d 	.word	0x10014b4d
1000d564:	10017114 	.word	0x10017114

1000d568 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d56a:	0006      	movs	r6, r0
1000d56c:	4c1d      	ldr	r4, [pc, #116]	; (1000d5e4 <ble_disconnected_state_handler+0x7c>)
1000d56e:	239b      	movs	r3, #155	; 0x9b
1000d570:	009b      	lsls	r3, r3, #2
1000d572:	18e7      	adds	r7, r4, r3
1000d574:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d576:	0023      	movs	r3, r4
1000d578:	3b56      	subs	r3, #86	; 0x56
1000d57a:	881a      	ldrh	r2, [r3, #0]
1000d57c:	8833      	ldrh	r3, [r6, #0]
1000d57e:	429a      	cmp	r2, r3
1000d580:	d122      	bne.n	1000d5c8 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d582:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d584:	2b05      	cmp	r3, #5
1000d586:	d001      	beq.n	1000d58c <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d588:	2b08      	cmp	r3, #8
1000d58a:	d102      	bne.n	1000d592 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d58c:	2301      	movs	r3, #1
1000d58e:	702b      	strb	r3, [r5, #0]
1000d590:	e01a      	b.n	1000d5c8 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d592:	2b07      	cmp	r3, #7
1000d594:	d80f      	bhi.n	1000d5b6 <ble_disconnected_state_handler+0x4e>
1000d596:	009b      	lsls	r3, r3, #2
1000d598:	4a13      	ldr	r2, [pc, #76]	; (1000d5e8 <ble_disconnected_state_handler+0x80>)
1000d59a:	58d3      	ldr	r3, [r2, r3]
1000d59c:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d59e:	2300      	movs	r3, #0
1000d5a0:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d5a2:	4b12      	ldr	r3, [pc, #72]	; (1000d5ec <ble_disconnected_state_handler+0x84>)
1000d5a4:	781b      	ldrb	r3, [r3, #0]
1000d5a6:	2b00      	cmp	r3, #0
1000d5a8:	d00e      	beq.n	1000d5c8 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d5aa:	4a10      	ldr	r2, [pc, #64]	; (1000d5ec <ble_disconnected_state_handler+0x84>)
1000d5ac:	7813      	ldrb	r3, [r2, #0]
1000d5ae:	3b01      	subs	r3, #1
1000d5b0:	b2db      	uxtb	r3, r3
1000d5b2:	7013      	strb	r3, [r2, #0]
1000d5b4:	e008      	b.n	1000d5c8 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d5b6:	480e      	ldr	r0, [pc, #56]	; (1000d5f0 <ble_disconnected_state_handler+0x88>)
1000d5b8:	4b0e      	ldr	r3, [pc, #56]	; (1000d5f4 <ble_disconnected_state_handler+0x8c>)
1000d5ba:	4798      	blx	r3
1000d5bc:	7829      	ldrb	r1, [r5, #0]
1000d5be:	480e      	ldr	r0, [pc, #56]	; (1000d5f8 <ble_disconnected_state_handler+0x90>)
1000d5c0:	4b0e      	ldr	r3, [pc, #56]	; (1000d5fc <ble_disconnected_state_handler+0x94>)
1000d5c2:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d5c4:	2300      	movs	r3, #0
1000d5c6:	702b      	strb	r3, [r5, #0]
1000d5c8:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5ca:	42bc      	cmp	r4, r7
1000d5cc:	d1d2      	bne.n	1000d574 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d5ce:	4808      	ldr	r0, [pc, #32]	; (1000d5f0 <ble_disconnected_state_handler+0x88>)
1000d5d0:	4b08      	ldr	r3, [pc, #32]	; (1000d5f4 <ble_disconnected_state_handler+0x8c>)
1000d5d2:	4798      	blx	r3
1000d5d4:	8832      	ldrh	r2, [r6, #0]
1000d5d6:	78b1      	ldrb	r1, [r6, #2]
1000d5d8:	4809      	ldr	r0, [pc, #36]	; (1000d600 <ble_disconnected_state_handler+0x98>)
1000d5da:	4b08      	ldr	r3, [pc, #32]	; (1000d5fc <ble_disconnected_state_handler+0x94>)
1000d5dc:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d5de:	2000      	movs	r0, #0
1000d5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5e2:	46c0      	nop			; (mov r8, r8)
1000d5e4:	10019c86 	.word	0x10019c86
1000d5e8:	10016e90 	.word	0x10016e90
1000d5ec:	10019e94 	.word	0x10019e94
1000d5f0:	10015e2c 	.word	0x10015e2c
1000d5f4:	10014c6d 	.word	0x10014c6d
1000d5f8:	10017150 	.word	0x10017150
1000d5fc:	10014b4d 	.word	0x10014b4d
1000d600:	10017168 	.word	0x10017168

1000d604 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d604:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d606:	4804      	ldr	r0, [pc, #16]	; (1000d618 <ble_conn_param_update+0x14>)
1000d608:	4b04      	ldr	r3, [pc, #16]	; (1000d61c <ble_conn_param_update+0x18>)
1000d60a:	4798      	blx	r3
1000d60c:	4804      	ldr	r0, [pc, #16]	; (1000d620 <ble_conn_param_update+0x1c>)
1000d60e:	4b05      	ldr	r3, [pc, #20]	; (1000d624 <ble_conn_param_update+0x20>)
1000d610:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d612:	2000      	movs	r0, #0
1000d614:	bd10      	pop	{r4, pc}
1000d616:	46c0      	nop			; (mov r8, r8)
1000d618:	10015e2c 	.word	0x10015e2c
1000d61c:	10014c6d 	.word	0x10014c6d
1000d620:	10017198 	.word	0x10017198
1000d624:	10014b4d 	.word	0x10014b4d

1000d628 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d62a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d62c:	8801      	ldrh	r1, [r0, #0]
1000d62e:	4b28      	ldr	r3, [pc, #160]	; (1000d6d0 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d630:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d632:	891a      	ldrh	r2, [r3, #8]
1000d634:	428a      	cmp	r2, r1
1000d636:	d104      	bne.n	1000d642 <ble_encryption_status_change_handler+0x1a>
1000d638:	001a      	movs	r2, r3
1000d63a:	325e      	adds	r2, #94	; 0x5e
1000d63c:	7812      	ldrb	r2, [r2, #0]
1000d63e:	2a06      	cmp	r2, #6
1000d640:	d02e      	beq.n	1000d6a0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d642:	3401      	adds	r4, #1
1000d644:	b2e4      	uxtb	r4, r4
1000d646:	337c      	adds	r3, #124	; 0x7c
1000d648:	2c05      	cmp	r4, #5
1000d64a:	d1f2      	bne.n	1000d632 <ble_encryption_status_change_handler+0xa>
1000d64c:	e039      	b.n	1000d6c2 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d64e:	4920      	ldr	r1, [pc, #128]	; (1000d6d0 <ble_encryption_status_change_handler+0xa8>)
1000d650:	0163      	lsls	r3, r4, #5
1000d652:	1b1a      	subs	r2, r3, r4
1000d654:	0092      	lsls	r2, r2, #2
1000d656:	188a      	adds	r2, r1, r2
1000d658:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d65a:	0014      	movs	r4, r2
1000d65c:	345e      	adds	r4, #94	; 0x5e
1000d65e:	2307      	movs	r3, #7
1000d660:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d662:	481c      	ldr	r0, [pc, #112]	; (1000d6d4 <ble_encryption_status_change_handler+0xac>)
1000d664:	4b1c      	ldr	r3, [pc, #112]	; (1000d6d8 <ble_encryption_status_change_handler+0xb0>)
1000d666:	4798      	blx	r3
1000d668:	481c      	ldr	r0, [pc, #112]	; (1000d6dc <ble_encryption_status_change_handler+0xb4>)
1000d66a:	4b1d      	ldr	r3, [pc, #116]	; (1000d6e0 <ble_encryption_status_change_handler+0xb8>)
1000d66c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d66e:	25e2      	movs	r5, #226	; 0xe2
1000d670:	e02b      	b.n	1000d6ca <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d672:	4818      	ldr	r0, [pc, #96]	; (1000d6d4 <ble_encryption_status_change_handler+0xac>)
1000d674:	4b18      	ldr	r3, [pc, #96]	; (1000d6d8 <ble_encryption_status_change_handler+0xb0>)
1000d676:	4798      	blx	r3
1000d678:	481a      	ldr	r0, [pc, #104]	; (1000d6e4 <ble_encryption_status_change_handler+0xbc>)
1000d67a:	4b19      	ldr	r3, [pc, #100]	; (1000d6e0 <ble_encryption_status_change_handler+0xb8>)
1000d67c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d67e:	4914      	ldr	r1, [pc, #80]	; (1000d6d0 <ble_encryption_status_change_handler+0xa8>)
1000d680:	0163      	lsls	r3, r4, #5
1000d682:	1b1a      	subs	r2, r3, r4
1000d684:	0092      	lsls	r2, r2, #2
1000d686:	188a      	adds	r2, r1, r2
1000d688:	0010      	movs	r0, r2
1000d68a:	305e      	adds	r0, #94	; 0x5e
1000d68c:	2708      	movs	r7, #8
1000d68e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d690:	78f0      	ldrb	r0, [r6, #3]
1000d692:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d694:	78b2      	ldrb	r2, [r6, #2]
1000d696:	1b1c      	subs	r4, r3, r4
1000d698:	00a4      	lsls	r4, r4, #2
1000d69a:	190c      	adds	r4, r1, r4
1000d69c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d69e:	e014      	b.n	1000d6ca <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d6a0:	78b5      	ldrb	r5, [r6, #2]
1000d6a2:	2d00      	cmp	r5, #0
1000d6a4:	d0e5      	beq.n	1000d672 <ble_encryption_status_change_handler+0x4a>
1000d6a6:	e7d2      	b.n	1000d64e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d6a8:	4e0a      	ldr	r6, [pc, #40]	; (1000d6d4 <ble_encryption_status_change_handler+0xac>)
1000d6aa:	0030      	movs	r0, r6
1000d6ac:	4d0a      	ldr	r5, [pc, #40]	; (1000d6d8 <ble_encryption_status_change_handler+0xb0>)
1000d6ae:	47a8      	blx	r5
1000d6b0:	480c      	ldr	r0, [pc, #48]	; (1000d6e4 <ble_encryption_status_change_handler+0xbc>)
1000d6b2:	4c0b      	ldr	r4, [pc, #44]	; (1000d6e0 <ble_encryption_status_change_handler+0xb8>)
1000d6b4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d6b6:	0030      	movs	r0, r6
1000d6b8:	47a8      	blx	r5
1000d6ba:	480b      	ldr	r0, [pc, #44]	; (1000d6e8 <ble_encryption_status_change_handler+0xc0>)
1000d6bc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d6be:	25e2      	movs	r5, #226	; 0xe2
1000d6c0:	e003      	b.n	1000d6ca <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d6c2:	78b5      	ldrb	r5, [r6, #2]
1000d6c4:	2d00      	cmp	r5, #0
1000d6c6:	d1c2      	bne.n	1000d64e <ble_encryption_status_change_handler+0x26>
1000d6c8:	e7ee      	b.n	1000d6a8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d6ca:	0028      	movs	r0, r5
1000d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6ce:	46c0      	nop			; (mov r8, r8)
1000d6d0:	10019c28 	.word	0x10019c28
1000d6d4:	10015e2c 	.word	0x10015e2c
1000d6d8:	10014c6d 	.word	0x10014c6d
1000d6dc:	100171b4 	.word	0x100171b4
1000d6e0:	10014b4d 	.word	0x10014b4d
1000d6e4:	100171c8 	.word	0x100171c8
1000d6e8:	100171ec 	.word	0x100171ec

1000d6ec <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d6ec:	b530      	push	{r4, r5, lr}
1000d6ee:	b085      	sub	sp, #20
1000d6f0:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d6f2:	4b1f      	ldr	r3, [pc, #124]	; (1000d770 <ble_scan_info_handler+0x84>)
1000d6f4:	781b      	ldrb	r3, [r3, #0]
1000d6f6:	b2db      	uxtb	r3, r3
1000d6f8:	2b13      	cmp	r3, #19
1000d6fa:	d824      	bhi.n	1000d746 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d6fc:	4d1c      	ldr	r5, [pc, #112]	; (1000d770 <ble_scan_info_handler+0x84>)
1000d6fe:	782b      	ldrb	r3, [r5, #0]
1000d700:	b2db      	uxtb	r3, r3
1000d702:	0098      	lsls	r0, r3, #2
1000d704:	18c0      	adds	r0, r0, r3
1000d706:	00c0      	lsls	r0, r0, #3
1000d708:	18c3      	adds	r3, r0, r3
1000d70a:	481a      	ldr	r0, [pc, #104]	; (1000d774 <ble_scan_info_handler+0x88>)
1000d70c:	1818      	adds	r0, r3, r0
1000d70e:	2229      	movs	r2, #41	; 0x29
1000d710:	0021      	movs	r1, r4
1000d712:	4b19      	ldr	r3, [pc, #100]	; (1000d778 <ble_scan_info_handler+0x8c>)
1000d714:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d716:	4819      	ldr	r0, [pc, #100]	; (1000d77c <ble_scan_info_handler+0x90>)
1000d718:	4b19      	ldr	r3, [pc, #100]	; (1000d780 <ble_scan_info_handler+0x94>)
1000d71a:	4798      	blx	r3
1000d71c:	7829      	ldrb	r1, [r5, #0]
1000d71e:	b2c9      	uxtb	r1, r1
1000d720:	79a3      	ldrb	r3, [r4, #6]
1000d722:	79e2      	ldrb	r2, [r4, #7]
1000d724:	78a0      	ldrb	r0, [r4, #2]
1000d726:	9003      	str	r0, [sp, #12]
1000d728:	78e0      	ldrb	r0, [r4, #3]
1000d72a:	9002      	str	r0, [sp, #8]
1000d72c:	7920      	ldrb	r0, [r4, #4]
1000d72e:	9001      	str	r0, [sp, #4]
1000d730:	7960      	ldrb	r0, [r4, #5]
1000d732:	9000      	str	r0, [sp, #0]
1000d734:	4813      	ldr	r0, [pc, #76]	; (1000d784 <ble_scan_info_handler+0x98>)
1000d736:	4c14      	ldr	r4, [pc, #80]	; (1000d788 <ble_scan_info_handler+0x9c>)
1000d738:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d73a:	782b      	ldrb	r3, [r5, #0]
1000d73c:	3301      	adds	r3, #1
1000d73e:	b2db      	uxtb	r3, r3
1000d740:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000d742:	2300      	movs	r3, #0
1000d744:	e011      	b.n	1000d76a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d746:	480d      	ldr	r0, [pc, #52]	; (1000d77c <ble_scan_info_handler+0x90>)
1000d748:	4b0d      	ldr	r3, [pc, #52]	; (1000d780 <ble_scan_info_handler+0x94>)
1000d74a:	4798      	blx	r3
1000d74c:	480f      	ldr	r0, [pc, #60]	; (1000d78c <ble_scan_info_handler+0xa0>)
1000d74e:	4b0e      	ldr	r3, [pc, #56]	; (1000d788 <ble_scan_info_handler+0x9c>)
1000d750:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d752:	4b0f      	ldr	r3, [pc, #60]	; (1000d790 <ble_scan_info_handler+0xa4>)
1000d754:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d756:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d758:	2800      	cmp	r0, #0
1000d75a:	d006      	beq.n	1000d76a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000d75c:	4807      	ldr	r0, [pc, #28]	; (1000d77c <ble_scan_info_handler+0x90>)
1000d75e:	4b08      	ldr	r3, [pc, #32]	; (1000d780 <ble_scan_info_handler+0x94>)
1000d760:	4798      	blx	r3
1000d762:	480c      	ldr	r0, [pc, #48]	; (1000d794 <ble_scan_info_handler+0xa8>)
1000d764:	4b08      	ldr	r3, [pc, #32]	; (1000d788 <ble_scan_info_handler+0x9c>)
1000d766:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d768:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d76a:	0018      	movs	r0, r3
1000d76c:	b005      	add	sp, #20
1000d76e:	bd30      	pop	{r4, r5, pc}
1000d770:	10018794 	.word	0x10018794
1000d774:	10019f0c 	.word	0x10019f0c
1000d778:	100149f3 	.word	0x100149f3
1000d77c:	10015e2c 	.word	0x10015e2c
1000d780:	10014c6d 	.word	0x10014c6d
1000d784:	10017214 	.word	0x10017214
1000d788:	10014b4d 	.word	0x10014b4d
1000d78c:	10017250 	.word	0x10017250
1000d790:	10010591 	.word	0x10010591
1000d794:	10017288 	.word	0x10017288

1000d798 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d79a:	465f      	mov	r7, fp
1000d79c:	4656      	mov	r6, sl
1000d79e:	464d      	mov	r5, r9
1000d7a0:	4644      	mov	r4, r8
1000d7a2:	b4f0      	push	{r4, r5, r6, r7}
1000d7a4:	b083      	sub	sp, #12
1000d7a6:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d7a8:	8841      	ldrh	r1, [r0, #2]
1000d7aa:	4b59      	ldr	r3, [pc, #356]	; (1000d910 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7ac:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d7ae:	891a      	ldrh	r2, [r3, #8]
1000d7b0:	428a      	cmp	r2, r1
1000d7b2:	d105      	bne.n	1000d7c0 <ble_pair_done_handler+0x28>
1000d7b4:	001a      	movs	r2, r3
1000d7b6:	325e      	adds	r2, #94	; 0x5e
1000d7b8:	7812      	ldrb	r2, [r2, #0]
1000d7ba:	2a03      	cmp	r2, #3
1000d7bc:	d100      	bne.n	1000d7c0 <ble_pair_done_handler+0x28>
1000d7be:	e09a      	b.n	1000d8f6 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7c0:	3401      	adds	r4, #1
1000d7c2:	b2e4      	uxtb	r4, r4
1000d7c4:	337c      	adds	r3, #124	; 0x7c
1000d7c6:	2c05      	cmp	r4, #5
1000d7c8:	d1f1      	bne.n	1000d7ae <ble_pair_done_handler+0x16>
1000d7ca:	e057      	b.n	1000d87c <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d7cc:	7821      	ldrb	r1, [r4, #0]
1000d7ce:	0030      	movs	r0, r6
1000d7d0:	47b8      	blx	r7
1000d7d2:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000d7d4:	454c      	cmp	r4, r9
1000d7d6:	d1f9      	bne.n	1000d7cc <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000d7d8:	484e      	ldr	r0, [pc, #312]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d7da:	4b4f      	ldr	r3, [pc, #316]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d7dc:	4798      	blx	r3
1000d7de:	484f      	ldr	r0, [pc, #316]	; (1000d91c <ble_pair_done_handler+0x184>)
1000d7e0:	4b4f      	ldr	r3, [pc, #316]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d7e2:	4798      	blx	r3
1000d7e4:	002e      	movs	r6, r5
1000d7e6:	3622      	adds	r6, #34	; 0x22
1000d7e8:	002c      	movs	r4, r5
1000d7ea:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000d7ec:	4f4c      	ldr	r7, [pc, #304]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d7ee:	7831      	ldrb	r1, [r6, #0]
1000d7f0:	484c      	ldr	r0, [pc, #304]	; (1000d924 <ble_pair_done_handler+0x18c>)
1000d7f2:	47b8      	blx	r7
1000d7f4:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000d7f6:	42a6      	cmp	r6, r4
1000d7f8:	d1f9      	bne.n	1000d7ee <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000d7fa:	4846      	ldr	r0, [pc, #280]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d7fc:	4b46      	ldr	r3, [pc, #280]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d7fe:	4798      	blx	r3
1000d800:	4849      	ldr	r0, [pc, #292]	; (1000d928 <ble_pair_done_handler+0x190>)
1000d802:	4b47      	ldr	r3, [pc, #284]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d804:	4798      	blx	r3
1000d806:	3542      	adds	r5, #66	; 0x42
1000d808:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000d80a:	4e46      	ldr	r6, [pc, #280]	; (1000d924 <ble_pair_done_handler+0x18c>)
1000d80c:	4d44      	ldr	r5, [pc, #272]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d80e:	7821      	ldrb	r1, [r4, #0]
1000d810:	0030      	movs	r0, r6
1000d812:	47a8      	blx	r5
1000d814:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000d816:	42bc      	cmp	r4, r7
1000d818:	d1f9      	bne.n	1000d80e <ble_pair_done_handler+0x76>
1000d81a:	e071      	b.n	1000d900 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d81c:	0163      	lsls	r3, r4, #5
1000d81e:	1b1c      	subs	r4, r3, r4
1000d820:	00a4      	lsls	r4, r4, #2
1000d822:	4b3b      	ldr	r3, [pc, #236]	; (1000d910 <ble_pair_done_handler+0x178>)
1000d824:	191c      	adds	r4, r3, r4
1000d826:	345e      	adds	r4, #94	; 0x5e
1000d828:	7823      	ldrb	r3, [r4, #0]
1000d82a:	2b01      	cmp	r3, #1
1000d82c:	d915      	bls.n	1000d85a <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000d82e:	4839      	ldr	r0, [pc, #228]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d830:	4b39      	ldr	r3, [pc, #228]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d832:	4798      	blx	r3
1000d834:	483d      	ldr	r0, [pc, #244]	; (1000d92c <ble_pair_done_handler+0x194>)
1000d836:	4b3a      	ldr	r3, [pc, #232]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d838:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d83a:	8868      	ldrh	r0, [r5, #2]
1000d83c:	2113      	movs	r1, #19
1000d83e:	4b3c      	ldr	r3, [pc, #240]	; (1000d930 <ble_pair_done_handler+0x198>)
1000d840:	4798      	blx	r3
1000d842:	9001      	str	r0, [sp, #4]
1000d844:	2800      	cmp	r0, #0
1000d846:	d05b      	beq.n	1000d900 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000d848:	4832      	ldr	r0, [pc, #200]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d84a:	4b33      	ldr	r3, [pc, #204]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d84c:	4798      	blx	r3
1000d84e:	4839      	ldr	r0, [pc, #228]	; (1000d934 <ble_pair_done_handler+0x19c>)
1000d850:	4b33      	ldr	r3, [pc, #204]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d852:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d854:	23e2      	movs	r3, #226	; 0xe2
1000d856:	9301      	str	r3, [sp, #4]
1000d858:	e052      	b.n	1000d900 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d85a:	2300      	movs	r3, #0
1000d85c:	9301      	str	r3, [sp, #4]
1000d85e:	e04f      	b.n	1000d900 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d860:	4e2c      	ldr	r6, [pc, #176]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d862:	0030      	movs	r0, r6
1000d864:	4d2c      	ldr	r5, [pc, #176]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d866:	47a8      	blx	r5
1000d868:	4833      	ldr	r0, [pc, #204]	; (1000d938 <ble_pair_done_handler+0x1a0>)
1000d86a:	4c2d      	ldr	r4, [pc, #180]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d86c:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d86e:	0030      	movs	r0, r6
1000d870:	47a8      	blx	r5
1000d872:	4832      	ldr	r0, [pc, #200]	; (1000d93c <ble_pair_done_handler+0x1a4>)
1000d874:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d876:	23e2      	movs	r3, #226	; 0xe2
1000d878:	9301      	str	r3, [sp, #4]
1000d87a:	e041      	b.n	1000d900 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d87c:	792b      	ldrb	r3, [r5, #4]
1000d87e:	2b00      	cmp	r3, #0
1000d880:	d1cc      	bne.n	1000d81c <ble_pair_done_handler+0x84>
1000d882:	e7ed      	b.n	1000d860 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d884:	4823      	ldr	r0, [pc, #140]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d886:	4b24      	ldr	r3, [pc, #144]	; (1000d918 <ble_pair_done_handler+0x180>)
1000d888:	469b      	mov	fp, r3
1000d88a:	4798      	blx	r3
1000d88c:	482a      	ldr	r0, [pc, #168]	; (1000d938 <ble_pair_done_handler+0x1a0>)
1000d88e:	4b24      	ldr	r3, [pc, #144]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d890:	469a      	mov	sl, r3
1000d892:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d894:	782a      	ldrb	r2, [r5, #0]
1000d896:	4b1e      	ldr	r3, [pc, #120]	; (1000d910 <ble_pair_done_handler+0x178>)
1000d898:	4698      	mov	r8, r3
1000d89a:	0167      	lsls	r7, r4, #5
1000d89c:	1b3b      	subs	r3, r7, r4
1000d89e:	009b      	lsls	r3, r3, #2
1000d8a0:	4443      	add	r3, r8
1000d8a2:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d8a4:	792a      	ldrb	r2, [r5, #4]
1000d8a6:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d8a8:	335e      	adds	r3, #94	; 0x5e
1000d8aa:	2205      	movs	r2, #5
1000d8ac:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d8ae:	1b38      	subs	r0, r7, r4
1000d8b0:	0080      	lsls	r0, r0, #2
1000d8b2:	4440      	add	r0, r8
1000d8b4:	3036      	adds	r0, #54	; 0x36
1000d8b6:	320b      	adds	r2, #11
1000d8b8:	0029      	movs	r1, r5
1000d8ba:	3122      	adds	r1, #34	; 0x22
1000d8bc:	4b20      	ldr	r3, [pc, #128]	; (1000d940 <ble_pair_done_handler+0x1a8>)
1000d8be:	4699      	mov	r9, r3
1000d8c0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d8c2:	1b38      	subs	r0, r7, r4
1000d8c4:	0080      	lsls	r0, r0, #2
1000d8c6:	4440      	add	r0, r8
1000d8c8:	3046      	adds	r0, #70	; 0x46
1000d8ca:	2217      	movs	r2, #23
1000d8cc:	0029      	movs	r1, r5
1000d8ce:	3132      	adds	r1, #50	; 0x32
1000d8d0:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d8d2:	1b38      	subs	r0, r7, r4
1000d8d4:	0080      	lsls	r0, r0, #2
1000d8d6:	4440      	add	r0, r8
1000d8d8:	301a      	adds	r0, #26
1000d8da:	1dac      	adds	r4, r5, #6
1000d8dc:	221c      	movs	r2, #28
1000d8de:	0021      	movs	r1, r4
1000d8e0:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000d8e2:	480c      	ldr	r0, [pc, #48]	; (1000d914 <ble_pair_done_handler+0x17c>)
1000d8e4:	47d8      	blx	fp
1000d8e6:	4817      	ldr	r0, [pc, #92]	; (1000d944 <ble_pair_done_handler+0x1ac>)
1000d8e8:	47d0      	blx	sl
1000d8ea:	2316      	movs	r3, #22
1000d8ec:	4699      	mov	r9, r3
1000d8ee:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d8f0:	4e0c      	ldr	r6, [pc, #48]	; (1000d924 <ble_pair_done_handler+0x18c>)
1000d8f2:	4f0b      	ldr	r7, [pc, #44]	; (1000d920 <ble_pair_done_handler+0x188>)
1000d8f4:	e76a      	b.n	1000d7cc <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d8f6:	792b      	ldrb	r3, [r5, #4]
1000d8f8:	9301      	str	r3, [sp, #4]
1000d8fa:	2b00      	cmp	r3, #0
1000d8fc:	d0c2      	beq.n	1000d884 <ble_pair_done_handler+0xec>
1000d8fe:	e78d      	b.n	1000d81c <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d900:	9801      	ldr	r0, [sp, #4]
1000d902:	b003      	add	sp, #12
1000d904:	bc3c      	pop	{r2, r3, r4, r5}
1000d906:	4690      	mov	r8, r2
1000d908:	4699      	mov	r9, r3
1000d90a:	46a2      	mov	sl, r4
1000d90c:	46ab      	mov	fp, r5
1000d90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d910:	10019c28 	.word	0x10019c28
1000d914:	10015e2c 	.word	0x10015e2c
1000d918:	10014c6d 	.word	0x10014c6d
1000d91c:	100172ac 	.word	0x100172ac
1000d920:	10014b4d 	.word	0x10014b4d
1000d924:	100172a0 	.word	0x100172a0
1000d928:	100172b4 	.word	0x100172b4
1000d92c:	100172bc 	.word	0x100172bc
1000d930:	100105b1 	.word	0x100105b1
1000d934:	100172dc 	.word	0x100172dc
1000d938:	100172f8 	.word	0x100172f8
1000d93c:	10017324 	.word	0x10017324
1000d940:	100149f3 	.word	0x100149f3
1000d944:	10017354 	.word	0x10017354

1000d948 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d948:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d94a:	8800      	ldrh	r0, [r0, #0]
1000d94c:	2378      	movs	r3, #120	; 0x78
1000d94e:	2201      	movs	r2, #1
1000d950:	2101      	movs	r1, #1
1000d952:	4c02      	ldr	r4, [pc, #8]	; (1000d95c <ble_conn_param_update_req+0x14>)
1000d954:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d956:	2000      	movs	r0, #0
1000d958:	bd10      	pop	{r4, pc}
1000d95a:	46c0      	nop			; (mov r8, r8)
1000d95c:	100105d1 	.word	0x100105d1

1000d960 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d960:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d962:	4657      	mov	r7, sl
1000d964:	464e      	mov	r6, r9
1000d966:	4645      	mov	r5, r8
1000d968:	b4e0      	push	{r5, r6, r7}
1000d96a:	b084      	sub	sp, #16
1000d96c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d96e:	2209      	movs	r2, #9
1000d970:	2100      	movs	r1, #0
1000d972:	a801      	add	r0, sp, #4
1000d974:	4b6a      	ldr	r3, [pc, #424]	; (1000db20 <ble_slave_security_request_handler+0x1c0>)
1000d976:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d978:	8825      	ldrh	r5, [r4, #0]
1000d97a:	496a      	ldr	r1, [pc, #424]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000d97c:	000a      	movs	r2, r1
1000d97e:	2300      	movs	r3, #0
1000d980:	8910      	ldrh	r0, [r2, #8]
1000d982:	42a8      	cmp	r0, r5
1000d984:	d116      	bne.n	1000d9b4 <ble_slave_security_request_handler+0x54>
1000d986:	0010      	movs	r0, r2
1000d988:	305e      	adds	r0, #94	; 0x5e
1000d98a:	7800      	ldrb	r0, [r0, #0]
1000d98c:	2802      	cmp	r0, #2
1000d98e:	d111      	bne.n	1000d9b4 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d990:	4864      	ldr	r0, [pc, #400]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000d992:	015a      	lsls	r2, r3, #5
1000d994:	1ad6      	subs	r6, r2, r3
1000d996:	00b6      	lsls	r6, r6, #2
1000d998:	1986      	adds	r6, r0, r6
1000d99a:	365e      	adds	r6, #94	; 0x5e
1000d99c:	2206      	movs	r2, #6
1000d99e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d9a0:	32f9      	adds	r2, #249	; 0xf9
1000d9a2:	4013      	ands	r3, r2
1000d9a4:	015a      	lsls	r2, r3, #5
1000d9a6:	1ad2      	subs	r2, r2, r3
1000d9a8:	0092      	lsls	r2, r2, #2
1000d9aa:	1882      	adds	r2, r0, r2
1000d9ac:	7d12      	ldrb	r2, [r2, #20]
1000d9ae:	07d0      	lsls	r0, r2, #31
1000d9b0:	d405      	bmi.n	1000d9be <ble_slave_security_request_handler+0x5e>
1000d9b2:	e01b      	b.n	1000d9ec <ble_slave_security_request_handler+0x8c>
1000d9b4:	3301      	adds	r3, #1
1000d9b6:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9b8:	2b05      	cmp	r3, #5
1000d9ba:	d1e1      	bne.n	1000d980 <ble_slave_security_request_handler+0x20>
1000d9bc:	e01e      	b.n	1000d9fc <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d9be:	78e0      	ldrb	r0, [r4, #3]
1000d9c0:	2800      	cmp	r0, #0
1000d9c2:	d013      	beq.n	1000d9ec <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d9c4:	0159      	lsls	r1, r3, #5
1000d9c6:	1ac9      	subs	r1, r1, r3
1000d9c8:	008b      	lsls	r3, r1, #2
1000d9ca:	4956      	ldr	r1, [pc, #344]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000d9cc:	18c9      	adds	r1, r1, r3
1000d9ce:	311a      	adds	r1, #26
1000d9d0:	8820      	ldrh	r0, [r4, #0]
1000d9d2:	4b55      	ldr	r3, [pc, #340]	; (1000db28 <ble_slave_security_request_handler+0x1c8>)
1000d9d4:	4798      	blx	r3
1000d9d6:	2800      	cmp	r0, #0
1000d9d8:	d100      	bne.n	1000d9dc <ble_slave_security_request_handler+0x7c>
1000d9da:	e09b      	b.n	1000db14 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d9dc:	4853      	ldr	r0, [pc, #332]	; (1000db2c <ble_slave_security_request_handler+0x1cc>)
1000d9de:	4b54      	ldr	r3, [pc, #336]	; (1000db30 <ble_slave_security_request_handler+0x1d0>)
1000d9e0:	4798      	blx	r3
1000d9e2:	4854      	ldr	r0, [pc, #336]	; (1000db34 <ble_slave_security_request_handler+0x1d4>)
1000d9e4:	4b54      	ldr	r3, [pc, #336]	; (1000db38 <ble_slave_security_request_handler+0x1d8>)
1000d9e6:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d9e8:	20e2      	movs	r0, #226	; 0xe2
1000d9ea:	e093      	b.n	1000db14 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d9ec:	015a      	lsls	r2, r3, #5
1000d9ee:	1ad3      	subs	r3, r2, r3
1000d9f0:	009b      	lsls	r3, r3, #2
1000d9f2:	4a4c      	ldr	r2, [pc, #304]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000d9f4:	18d3      	adds	r3, r2, r3
1000d9f6:	335e      	adds	r3, #94	; 0x5e
1000d9f8:	2202      	movs	r2, #2
1000d9fa:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d9fc:	8825      	ldrh	r5, [r4, #0]
1000d9fe:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da00:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000da02:	0016      	movs	r6, r2
1000da04:	8908      	ldrh	r0, [r1, #8]
1000da06:	42a8      	cmp	r0, r5
1000da08:	d10d      	bne.n	1000da26 <ble_slave_security_request_handler+0xc6>
1000da0a:	0008      	movs	r0, r1
1000da0c:	305e      	adds	r0, #94	; 0x5e
1000da0e:	7800      	ldrb	r0, [r0, #0]
1000da10:	2802      	cmp	r0, #2
1000da12:	d108      	bne.n	1000da26 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000da14:	0152      	lsls	r2, r2, #5
1000da16:	1b92      	subs	r2, r2, r6
1000da18:	0096      	lsls	r6, r2, #2
1000da1a:	4a42      	ldr	r2, [pc, #264]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000da1c:	1992      	adds	r2, r2, r6
1000da1e:	325e      	adds	r2, #94	; 0x5e
1000da20:	2103      	movs	r1, #3
1000da22:	7011      	strb	r1, [r2, #0]
			break;
1000da24:	e005      	b.n	1000da32 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da26:	3301      	adds	r3, #1
1000da28:	b2db      	uxtb	r3, r3
1000da2a:	3201      	adds	r2, #1
1000da2c:	317c      	adds	r1, #124	; 0x7c
1000da2e:	2b05      	cmp	r3, #5
1000da30:	d1e7      	bne.n	1000da02 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000da32:	aa01      	add	r2, sp, #4
1000da34:	78e1      	ldrb	r1, [r4, #3]
1000da36:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000da38:	2101      	movs	r1, #1
1000da3a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000da3c:	3103      	adds	r1, #3
1000da3e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000da40:	001f      	movs	r7, r3
1000da42:	015a      	lsls	r2, r3, #5
1000da44:	1ad2      	subs	r2, r2, r3
1000da46:	0092      	lsls	r2, r2, #2
1000da48:	4936      	ldr	r1, [pc, #216]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000da4a:	5c52      	ldrb	r2, [r2, r1]
1000da4c:	2a02      	cmp	r2, #2
1000da4e:	d104      	bne.n	1000da5a <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000da50:	aa01      	add	r2, sp, #4
1000da52:	2103      	movs	r1, #3
1000da54:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000da56:	71d1      	strb	r1, [r2, #7]
1000da58:	e003      	b.n	1000da62 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000da5a:	aa01      	add	r2, sp, #4
1000da5c:	2101      	movs	r1, #1
1000da5e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000da60:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000da62:	aa01      	add	r2, sp, #4
1000da64:	2110      	movs	r1, #16
1000da66:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000da68:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000da6a:	017a      	lsls	r2, r7, #5
1000da6c:	1bd2      	subs	r2, r2, r7
1000da6e:	0092      	lsls	r2, r2, #2
1000da70:	492c      	ldr	r1, [pc, #176]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000da72:	188a      	adds	r2, r1, r2
1000da74:	7e12      	ldrb	r2, [r2, #24]
1000da76:	2a40      	cmp	r2, #64	; 0x40
1000da78:	d134      	bne.n	1000dae4 <ble_slave_security_request_handler+0x184>
1000da7a:	015a      	lsls	r2, r3, #5
1000da7c:	1ad3      	subs	r3, r2, r3
1000da7e:	009b      	lsls	r3, r3, #2
1000da80:	469a      	mov	sl, r3
1000da82:	001e      	movs	r6, r3
1000da84:	3660      	adds	r6, #96	; 0x60
1000da86:	1876      	adds	r6, r6, r1
1000da88:	4655      	mov	r5, sl
1000da8a:	3568      	adds	r5, #104	; 0x68
1000da8c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000da8e:	4b2b      	ldr	r3, [pc, #172]	; (1000db3c <ble_slave_security_request_handler+0x1dc>)
1000da90:	4699      	mov	r9, r3
1000da92:	230f      	movs	r3, #15
1000da94:	4698      	mov	r8, r3
1000da96:	47c8      	blx	r9
1000da98:	4643      	mov	r3, r8
1000da9a:	4018      	ands	r0, r3
1000da9c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000da9e:	47c8      	blx	r9
1000daa0:	4643      	mov	r3, r8
1000daa2:	4018      	ands	r0, r3
1000daa4:	74b0      	strb	r0, [r6, #18]
1000daa6:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000daa8:	42ae      	cmp	r6, r5
1000daaa:	d1f4      	bne.n	1000da96 <ble_slave_security_request_handler+0x136>
1000daac:	4656      	mov	r6, sl
1000daae:	3670      	adds	r6, #112	; 0x70
1000dab0:	4a1c      	ldr	r2, [pc, #112]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000dab2:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dab4:	4b21      	ldr	r3, [pc, #132]	; (1000db3c <ble_slave_security_request_handler+0x1dc>)
1000dab6:	4699      	mov	r9, r3
1000dab8:	230f      	movs	r3, #15
1000daba:	4698      	mov	r8, r3
1000dabc:	47c8      	blx	r9
1000dabe:	4643      	mov	r3, r8
1000dac0:	4018      	ands	r0, r3
1000dac2:	7028      	strb	r0, [r5, #0]
1000dac4:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dac6:	42b5      	cmp	r5, r6
1000dac8:	d1f8      	bne.n	1000dabc <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000daca:	4b1c      	ldr	r3, [pc, #112]	; (1000db3c <ble_slave_security_request_handler+0x1dc>)
1000dacc:	4798      	blx	r3
1000dace:	017b      	lsls	r3, r7, #5
1000dad0:	1bdb      	subs	r3, r3, r7
1000dad2:	009b      	lsls	r3, r3, #2
1000dad4:	4a13      	ldr	r2, [pc, #76]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000dad6:	18d3      	adds	r3, r2, r3
1000dad8:	001a      	movs	r2, r3
1000dada:	3270      	adds	r2, #112	; 0x70
1000dadc:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dade:	337a      	adds	r3, #122	; 0x7a
1000dae0:	2210      	movs	r2, #16
1000dae2:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dae4:	017a      	lsls	r2, r7, #5
1000dae6:	1bd7      	subs	r7, r2, r7
1000dae8:	00bf      	lsls	r7, r7, #2
1000daea:	3760      	adds	r7, #96	; 0x60
1000daec:	4a0d      	ldr	r2, [pc, #52]	; (1000db24 <ble_slave_security_request_handler+0x1c4>)
1000daee:	18ba      	adds	r2, r7, r2
1000daf0:	8820      	ldrh	r0, [r4, #0]
1000daf2:	2300      	movs	r3, #0
1000daf4:	a901      	add	r1, sp, #4
1000daf6:	4c12      	ldr	r4, [pc, #72]	; (1000db40 <ble_slave_security_request_handler+0x1e0>)
1000daf8:	47a0      	blx	r4
1000dafa:	2800      	cmp	r0, #0
1000dafc:	d00a      	beq.n	1000db14 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000dafe:	ab01      	add	r3, sp, #4
1000db00:	2200      	movs	r2, #0
1000db02:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000db04:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000db06:	4809      	ldr	r0, [pc, #36]	; (1000db2c <ble_slave_security_request_handler+0x1cc>)
1000db08:	4b09      	ldr	r3, [pc, #36]	; (1000db30 <ble_slave_security_request_handler+0x1d0>)
1000db0a:	4798      	blx	r3
1000db0c:	480d      	ldr	r0, [pc, #52]	; (1000db44 <ble_slave_security_request_handler+0x1e4>)
1000db0e:	4b0a      	ldr	r3, [pc, #40]	; (1000db38 <ble_slave_security_request_handler+0x1d8>)
1000db10:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000db12:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000db14:	b004      	add	sp, #16
1000db16:	bc1c      	pop	{r2, r3, r4}
1000db18:	4690      	mov	r8, r2
1000db1a:	4699      	mov	r9, r3
1000db1c:	46a2      	mov	sl, r4
1000db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000db20:	10014a05 	.word	0x10014a05
1000db24:	10019c28 	.word	0x10019c28
1000db28:	10011195 	.word	0x10011195
1000db2c:	10015e2c 	.word	0x10015e2c
1000db30:	10014c6d 	.word	0x10014c6d
1000db34:	1001735c 	.word	0x1001735c
1000db38:	10014b4d 	.word	0x10014b4d
1000db3c:	10014c81 	.word	0x10014c81
1000db40:	10010fa9 	.word	0x10010fa9
1000db44:	10017374 	.word	0x10017374

1000db48 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000db48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db4a:	465f      	mov	r7, fp
1000db4c:	4656      	mov	r6, sl
1000db4e:	464d      	mov	r5, r9
1000db50:	4644      	mov	r4, r8
1000db52:	b4f0      	push	{r4, r5, r6, r7}
1000db54:	b085      	sub	sp, #20
1000db56:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db58:	8804      	ldrh	r4, [r0, #0]
1000db5a:	4a54      	ldr	r2, [pc, #336]	; (1000dcac <ble_pair_request_handler+0x164>)
1000db5c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db5e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db60:	8910      	ldrh	r0, [r2, #8]
1000db62:	42a0      	cmp	r0, r4
1000db64:	d10d      	bne.n	1000db82 <ble_pair_request_handler+0x3a>
1000db66:	0010      	movs	r0, r2
1000db68:	305e      	adds	r0, #94	; 0x5e
1000db6a:	7800      	ldrb	r0, [r0, #0]
1000db6c:	2802      	cmp	r0, #2
1000db6e:	d108      	bne.n	1000db82 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000db70:	014a      	lsls	r2, r1, #5
1000db72:	1a52      	subs	r2, r2, r1
1000db74:	0095      	lsls	r5, r2, #2
1000db76:	4a4d      	ldr	r2, [pc, #308]	; (1000dcac <ble_pair_request_handler+0x164>)
1000db78:	1952      	adds	r2, r2, r5
1000db7a:	325e      	adds	r2, #94	; 0x5e
1000db7c:	2103      	movs	r1, #3
1000db7e:	7011      	strb	r1, [r2, #0]
			break;
1000db80:	e005      	b.n	1000db8e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db82:	3301      	adds	r3, #1
1000db84:	b2db      	uxtb	r3, r3
1000db86:	3101      	adds	r1, #1
1000db88:	327c      	adds	r2, #124	; 0x7c
1000db8a:	2b05      	cmp	r3, #5
1000db8c:	d1e8      	bne.n	1000db60 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000db8e:	aa01      	add	r2, sp, #4
1000db90:	2100      	movs	r1, #0
1000db92:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000db94:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000db96:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000db98:	2003      	movs	r0, #3
1000db9a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000db9c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000db9e:	001e      	movs	r6, r3
1000dba0:	015a      	lsls	r2, r3, #5
1000dba2:	1ad2      	subs	r2, r2, r3
1000dba4:	0092      	lsls	r2, r2, #2
1000dba6:	4941      	ldr	r1, [pc, #260]	; (1000dcac <ble_pair_request_handler+0x164>)
1000dba8:	5c52      	ldrb	r2, [r2, r1]
1000dbaa:	2a02      	cmp	r2, #2
1000dbac:	d104      	bne.n	1000dbb8 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dbae:	aa01      	add	r2, sp, #4
1000dbb0:	2103      	movs	r1, #3
1000dbb2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dbb4:	71d1      	strb	r1, [r2, #7]
1000dbb6:	e003      	b.n	1000dbc0 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dbb8:	aa01      	add	r2, sp, #4
1000dbba:	2101      	movs	r1, #1
1000dbbc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dbbe:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000dbc0:	aa01      	add	r2, sp, #4
1000dbc2:	2110      	movs	r1, #16
1000dbc4:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dbc6:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dbc8:	0172      	lsls	r2, r6, #5
1000dbca:	1b92      	subs	r2, r2, r6
1000dbcc:	0092      	lsls	r2, r2, #2
1000dbce:	4937      	ldr	r1, [pc, #220]	; (1000dcac <ble_pair_request_handler+0x164>)
1000dbd0:	188a      	adds	r2, r1, r2
1000dbd2:	7e12      	ldrb	r2, [r2, #24]
1000dbd4:	2a40      	cmp	r2, #64	; 0x40
1000dbd6:	d142      	bne.n	1000dc5e <ble_pair_request_handler+0x116>
1000dbd8:	015f      	lsls	r7, r3, #5
1000dbda:	1afb      	subs	r3, r7, r3
1000dbdc:	009b      	lsls	r3, r3, #2
1000dbde:	469b      	mov	fp, r3
1000dbe0:	001c      	movs	r4, r3
1000dbe2:	3460      	adds	r4, #96	; 0x60
1000dbe4:	1864      	adds	r4, r4, r1
1000dbe6:	465d      	mov	r5, fp
1000dbe8:	3568      	adds	r5, #104	; 0x68
1000dbea:	186d      	adds	r5, r5, r1
1000dbec:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dbee:	4b30      	ldr	r3, [pc, #192]	; (1000dcb0 <ble_pair_request_handler+0x168>)
1000dbf0:	469a      	mov	sl, r3
1000dbf2:	230f      	movs	r3, #15
1000dbf4:	4699      	mov	r9, r3
1000dbf6:	47d0      	blx	sl
1000dbf8:	464b      	mov	r3, r9
1000dbfa:	4018      	ands	r0, r3
1000dbfc:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dbfe:	47d0      	blx	sl
1000dc00:	464b      	mov	r3, r9
1000dc02:	4018      	ands	r0, r3
1000dc04:	74b8      	strb	r0, [r7, #18]
1000dc06:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dc08:	42af      	cmp	r7, r5
1000dc0a:	d1f4      	bne.n	1000dbf6 <ble_pair_request_handler+0xae>
1000dc0c:	465b      	mov	r3, fp
1000dc0e:	3370      	adds	r3, #112	; 0x70
1000dc10:	4f26      	ldr	r7, [pc, #152]	; (1000dcac <ble_pair_request_handler+0x164>)
1000dc12:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dc14:	4b26      	ldr	r3, [pc, #152]	; (1000dcb0 <ble_pair_request_handler+0x168>)
1000dc16:	469a      	mov	sl, r3
1000dc18:	230f      	movs	r3, #15
1000dc1a:	4699      	mov	r9, r3
1000dc1c:	47d0      	blx	sl
1000dc1e:	464b      	mov	r3, r9
1000dc20:	4018      	ands	r0, r3
1000dc22:	7028      	strb	r0, [r5, #0]
1000dc24:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dc26:	42bd      	cmp	r5, r7
1000dc28:	d1f8      	bne.n	1000dc1c <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000dc2a:	4822      	ldr	r0, [pc, #136]	; (1000dcb4 <ble_pair_request_handler+0x16c>)
1000dc2c:	4b22      	ldr	r3, [pc, #136]	; (1000dcb8 <ble_pair_request_handler+0x170>)
1000dc2e:	4798      	blx	r3
1000dc30:	4822      	ldr	r0, [pc, #136]	; (1000dcbc <ble_pair_request_handler+0x174>)
1000dc32:	4b23      	ldr	r3, [pc, #140]	; (1000dcc0 <ble_pair_request_handler+0x178>)
1000dc34:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000dc36:	4d22      	ldr	r5, [pc, #136]	; (1000dcc0 <ble_pair_request_handler+0x178>)
1000dc38:	7821      	ldrb	r1, [r4, #0]
1000dc3a:	4822      	ldr	r0, [pc, #136]	; (1000dcc4 <ble_pair_request_handler+0x17c>)
1000dc3c:	47a8      	blx	r5
1000dc3e:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000dc40:	42bc      	cmp	r4, r7
1000dc42:	d1f9      	bne.n	1000dc38 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dc44:	4b1a      	ldr	r3, [pc, #104]	; (1000dcb0 <ble_pair_request_handler+0x168>)
1000dc46:	4798      	blx	r3
1000dc48:	0173      	lsls	r3, r6, #5
1000dc4a:	1b9b      	subs	r3, r3, r6
1000dc4c:	009b      	lsls	r3, r3, #2
1000dc4e:	4a17      	ldr	r2, [pc, #92]	; (1000dcac <ble_pair_request_handler+0x164>)
1000dc50:	18d3      	adds	r3, r2, r3
1000dc52:	001a      	movs	r2, r3
1000dc54:	3270      	adds	r2, #112	; 0x70
1000dc56:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dc58:	337a      	adds	r3, #122	; 0x7a
1000dc5a:	2210      	movs	r2, #16
1000dc5c:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000dc5e:	4815      	ldr	r0, [pc, #84]	; (1000dcb4 <ble_pair_request_handler+0x16c>)
1000dc60:	4b15      	ldr	r3, [pc, #84]	; (1000dcb8 <ble_pair_request_handler+0x170>)
1000dc62:	4798      	blx	r3
1000dc64:	4818      	ldr	r0, [pc, #96]	; (1000dcc8 <ble_pair_request_handler+0x180>)
1000dc66:	4b16      	ldr	r3, [pc, #88]	; (1000dcc0 <ble_pair_request_handler+0x178>)
1000dc68:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dc6a:	0173      	lsls	r3, r6, #5
1000dc6c:	1b9b      	subs	r3, r3, r6
1000dc6e:	009b      	lsls	r3, r3, #2
1000dc70:	3360      	adds	r3, #96	; 0x60
1000dc72:	4a0e      	ldr	r2, [pc, #56]	; (1000dcac <ble_pair_request_handler+0x164>)
1000dc74:	189a      	adds	r2, r3, r2
1000dc76:	4643      	mov	r3, r8
1000dc78:	8818      	ldrh	r0, [r3, #0]
1000dc7a:	2300      	movs	r3, #0
1000dc7c:	a901      	add	r1, sp, #4
1000dc7e:	4c13      	ldr	r4, [pc, #76]	; (1000dccc <ble_pair_request_handler+0x184>)
1000dc80:	47a0      	blx	r4
1000dc82:	2800      	cmp	r0, #0
1000dc84:	d00a      	beq.n	1000dc9c <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000dc86:	ab01      	add	r3, sp, #4
1000dc88:	2200      	movs	r2, #0
1000dc8a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dc8c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000dc8e:	4809      	ldr	r0, [pc, #36]	; (1000dcb4 <ble_pair_request_handler+0x16c>)
1000dc90:	4b09      	ldr	r3, [pc, #36]	; (1000dcb8 <ble_pair_request_handler+0x170>)
1000dc92:	4798      	blx	r3
1000dc94:	480e      	ldr	r0, [pc, #56]	; (1000dcd0 <ble_pair_request_handler+0x188>)
1000dc96:	4b0a      	ldr	r3, [pc, #40]	; (1000dcc0 <ble_pair_request_handler+0x178>)
1000dc98:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dc9a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dc9c:	b005      	add	sp, #20
1000dc9e:	bc3c      	pop	{r2, r3, r4, r5}
1000dca0:	4690      	mov	r8, r2
1000dca2:	4699      	mov	r9, r3
1000dca4:	46a2      	mov	sl, r4
1000dca6:	46ab      	mov	fp, r5
1000dca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcaa:	46c0      	nop			; (mov r8, r8)
1000dcac:	10019c28 	.word	0x10019c28
1000dcb0:	10014c81 	.word	0x10014c81
1000dcb4:	10015e2c 	.word	0x10015e2c
1000dcb8:	10014c6d 	.word	0x10014c6d
1000dcbc:	100173a0 	.word	0x100173a0
1000dcc0:	10014b4d 	.word	0x10014b4d
1000dcc4:	100173b0 	.word	0x100173b0
1000dcc8:	100173b8 	.word	0x100173b8
1000dccc:	10010fa9 	.word	0x10010fa9
1000dcd0:	100173d4 	.word	0x100173d4

1000dcd4 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000dcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcd6:	b085      	sub	sp, #20
1000dcd8:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000dcda:	2206      	movs	r2, #6
1000dcdc:	493d      	ldr	r1, [pc, #244]	; (1000ddd4 <ble_pair_key_request_handler+0x100>)
1000dcde:	a802      	add	r0, sp, #8
1000dce0:	4e3d      	ldr	r6, [pc, #244]	; (1000ddd8 <ble_pair_key_request_handler+0x104>)
1000dce2:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000dce4:	ac01      	add	r4, sp, #4
1000dce6:	2204      	movs	r2, #4
1000dce8:	0029      	movs	r1, r5
1000dcea:	0020      	movs	r0, r4
1000dcec:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000dcee:	78e3      	ldrb	r3, [r4, #3]
1000dcf0:	2b00      	cmp	r3, #0
1000dcf2:	d162      	bne.n	1000ddba <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dcf4:	4839      	ldr	r0, [pc, #228]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dcf6:	4b3a      	ldr	r3, [pc, #232]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dcf8:	4798      	blx	r3
1000dcfa:	483a      	ldr	r0, [pc, #232]	; (1000dde4 <ble_pair_key_request_handler+0x110>)
1000dcfc:	4b3a      	ldr	r3, [pc, #232]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dcfe:	4798      	blx	r3
1000dd00:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dd02:	4c3a      	ldr	r4, [pc, #232]	; (1000ddec <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000dd04:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dd06:	201e      	movs	r0, #30
1000dd08:	47a0      	blx	r4
1000dd0a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000dd0c:	2b00      	cmp	r3, #0
1000dd0e:	d11a      	bne.n	1000dd46 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000dd10:	4f32      	ldr	r7, [pc, #200]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dd12:	0038      	movs	r0, r7
1000dd14:	4e32      	ldr	r6, [pc, #200]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dd16:	47b0      	blx	r6
1000dd18:	4835      	ldr	r0, [pc, #212]	; (1000ddf0 <ble_pair_key_request_handler+0x11c>)
1000dd1a:	4c33      	ldr	r4, [pc, #204]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dd1c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000dd1e:	0038      	movs	r0, r7
1000dd20:	47b0      	blx	r6
1000dd22:	4834      	ldr	r0, [pc, #208]	; (1000ddf4 <ble_pair_key_request_handler+0x120>)
1000dd24:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000dd26:	8828      	ldrh	r0, [r5, #0]
1000dd28:	2113      	movs	r1, #19
1000dd2a:	4b33      	ldr	r3, [pc, #204]	; (1000ddf8 <ble_pair_key_request_handler+0x124>)
1000dd2c:	4798      	blx	r3
1000dd2e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000dd30:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000dd32:	2b00      	cmp	r3, #0
1000dd34:	d04c      	beq.n	1000ddd0 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000dd36:	4829      	ldr	r0, [pc, #164]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dd38:	4b29      	ldr	r3, [pc, #164]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dd3a:	4798      	blx	r3
1000dd3c:	482f      	ldr	r0, [pc, #188]	; (1000ddfc <ble_pair_key_request_handler+0x128>)
1000dd3e:	4b2a      	ldr	r3, [pc, #168]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dd40:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000dd42:	20e2      	movs	r0, #226	; 0xe2
1000dd44:	e044      	b.n	1000ddd0 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000dd46:	001a      	movs	r2, r3
1000dd48:	3a30      	subs	r2, #48	; 0x30
1000dd4a:	2a09      	cmp	r2, #9
1000dd4c:	d8db      	bhi.n	1000dd06 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000dd4e:	aa02      	add	r2, sp, #8
1000dd50:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000dd52:	4038      	ands	r0, r7
1000dd54:	4b2a      	ldr	r3, [pc, #168]	; (1000de00 <ble_pair_key_request_handler+0x12c>)
1000dd56:	4798      	blx	r3
1000dd58:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000dd5a:	2e06      	cmp	r6, #6
1000dd5c:	d026      	beq.n	1000ddac <ble_pair_key_request_handler+0xd8>
1000dd5e:	e7d2      	b.n	1000dd06 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000dd60:	481e      	ldr	r0, [pc, #120]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dd62:	4b1f      	ldr	r3, [pc, #124]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dd64:	4798      	blx	r3
1000dd66:	4827      	ldr	r0, [pc, #156]	; (1000de04 <ble_pair_key_request_handler+0x130>)
1000dd68:	4b1f      	ldr	r3, [pc, #124]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dd6a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dd6c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dd6e:	4e24      	ldr	r6, [pc, #144]	; (1000de00 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000dd70:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000dd72:	5ce0      	ldrb	r0, [r4, r3]
1000dd74:	47b0      	blx	r6
1000dd76:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000dd78:	2c06      	cmp	r4, #6
1000dd7a:	d1f9      	bne.n	1000dd70 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000dd7c:	ab01      	add	r3, sp, #4
1000dd7e:	7899      	ldrb	r1, [r3, #2]
1000dd80:	8828      	ldrh	r0, [r5, #0]
1000dd82:	aa02      	add	r2, sp, #8
1000dd84:	4b20      	ldr	r3, [pc, #128]	; (1000de08 <ble_pair_key_request_handler+0x134>)
1000dd86:	4798      	blx	r3
1000dd88:	2800      	cmp	r0, #0
1000dd8a:	d021      	beq.n	1000ddd0 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000dd8c:	4813      	ldr	r0, [pc, #76]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dd8e:	4b14      	ldr	r3, [pc, #80]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dd90:	4798      	blx	r3
1000dd92:	481e      	ldr	r0, [pc, #120]	; (1000de0c <ble_pair_key_request_handler+0x138>)
1000dd94:	4b14      	ldr	r3, [pc, #80]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dd96:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000dd98:	2000      	movs	r0, #0
1000dd9a:	e019      	b.n	1000ddd0 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000dd9c:	480f      	ldr	r0, [pc, #60]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000dd9e:	4b10      	ldr	r3, [pc, #64]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000dda0:	4798      	blx	r3
1000dda2:	481b      	ldr	r0, [pc, #108]	; (1000de10 <ble_pair_key_request_handler+0x13c>)
1000dda4:	4b10      	ldr	r3, [pc, #64]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000dda6:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000dda8:	2000      	movs	r0, #0
1000ddaa:	e011      	b.n	1000ddd0 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000ddac:	480b      	ldr	r0, [pc, #44]	; (1000dddc <ble_pair_key_request_handler+0x108>)
1000ddae:	4b0c      	ldr	r3, [pc, #48]	; (1000dde0 <ble_pair_key_request_handler+0x10c>)
1000ddb0:	4798      	blx	r3
1000ddb2:	4818      	ldr	r0, [pc, #96]	; (1000de14 <ble_pair_key_request_handler+0x140>)
1000ddb4:	4b0c      	ldr	r3, [pc, #48]	; (1000dde8 <ble_pair_key_request_handler+0x114>)
1000ddb6:	4798      	blx	r3
1000ddb8:	e7d8      	b.n	1000dd6c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000ddba:	ab01      	add	r3, sp, #4
1000ddbc:	885a      	ldrh	r2, [r3, #2]
1000ddbe:	2380      	movs	r3, #128	; 0x80
1000ddc0:	005b      	lsls	r3, r3, #1
1000ddc2:	429a      	cmp	r2, r3
1000ddc4:	d0cc      	beq.n	1000dd60 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000ddc6:	ab01      	add	r3, sp, #4
1000ddc8:	789b      	ldrb	r3, [r3, #2]
1000ddca:	2b01      	cmp	r3, #1
1000ddcc:	d0e6      	beq.n	1000dd9c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ddce:	2000      	movs	r0, #0
}
1000ddd0:	b005      	add	sp, #20
1000ddd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddd4:	10016fbc 	.word	0x10016fbc
1000ddd8:	100149f3 	.word	0x100149f3
1000dddc:	10015e2c 	.word	0x10015e2c
1000dde0:	10014c6d 	.word	0x10014c6d
1000dde4:	100173fc 	.word	0x100173fc
1000dde8:	10014b4d 	.word	0x10014b4d
1000ddec:	1000eaf1 	.word	0x1000eaf1
1000ddf0:	10017424 	.word	0x10017424
1000ddf4:	10017430 	.word	0x10017430
1000ddf8:	100105b1 	.word	0x100105b1
1000ddfc:	100172dc 	.word	0x100172dc
1000de00:	10014b81 	.word	0x10014b81
1000de04:	10017444 	.word	0x10017444
1000de08:	100110d9 	.word	0x100110d9
1000de0c:	1001747c 	.word	0x1001747c
1000de10:	10017494 	.word	0x10017494
1000de14:	100174b0 	.word	0x100174b0

1000de18 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000de18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de1a:	465f      	mov	r7, fp
1000de1c:	4656      	mov	r6, sl
1000de1e:	464d      	mov	r5, r9
1000de20:	b4e0      	push	{r5, r6, r7}
1000de22:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000de24:	8800      	ldrh	r0, [r0, #0]
1000de26:	4b49      	ldr	r3, [pc, #292]	; (1000df4c <ble_encryption_request_handler+0x134>)
1000de28:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de2a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000de2c:	8919      	ldrh	r1, [r3, #8]
1000de2e:	4281      	cmp	r1, r0
1000de30:	d137      	bne.n	1000dea2 <ble_encryption_request_handler+0x8a>
1000de32:	0019      	movs	r1, r3
1000de34:	315e      	adds	r1, #94	; 0x5e
1000de36:	7809      	ldrb	r1, [r1, #0]
1000de38:	2901      	cmp	r1, #1
1000de3a:	d932      	bls.n	1000dea2 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000de3c:	4f43      	ldr	r7, [pc, #268]	; (1000df4c <ble_encryption_request_handler+0x134>)
1000de3e:	0153      	lsls	r3, r2, #5
1000de40:	1a9d      	subs	r5, r3, r2
1000de42:	00ad      	lsls	r5, r5, #2
1000de44:	197d      	adds	r5, r7, r5
1000de46:	355e      	adds	r5, #94	; 0x5e
1000de48:	2306      	movs	r3, #6
1000de4a:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000de4c:	4840      	ldr	r0, [pc, #256]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000de4e:	4b41      	ldr	r3, [pc, #260]	; (1000df54 <ble_encryption_request_handler+0x13c>)
1000de50:	469a      	mov	sl, r3
1000de52:	4798      	blx	r3
1000de54:	8831      	ldrh	r1, [r6, #0]
1000de56:	4840      	ldr	r0, [pc, #256]	; (1000df58 <ble_encryption_request_handler+0x140>)
1000de58:	4b40      	ldr	r3, [pc, #256]	; (1000df5c <ble_encryption_request_handler+0x144>)
1000de5a:	4699      	mov	r9, r3
1000de5c:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000de5e:	483c      	ldr	r0, [pc, #240]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000de60:	47d0      	blx	sl
1000de62:	0163      	lsls	r3, r4, #5
1000de64:	1b1b      	subs	r3, r3, r4
1000de66:	009b      	lsls	r3, r3, #2
1000de68:	18ff      	adds	r7, r7, r3
1000de6a:	2370      	movs	r3, #112	; 0x70
1000de6c:	469b      	mov	fp, r3
1000de6e:	44bb      	add	fp, r7
1000de70:	465b      	mov	r3, fp
1000de72:	8819      	ldrh	r1, [r3, #0]
1000de74:	483a      	ldr	r0, [pc, #232]	; (1000df60 <ble_encryption_request_handler+0x148>)
1000de76:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000de78:	4835      	ldr	r0, [pc, #212]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000de7a:	47d0      	blx	sl
1000de7c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000de7e:	4839      	ldr	r0, [pc, #228]	; (1000df64 <ble_encryption_request_handler+0x14c>)
1000de80:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000de82:	4833      	ldr	r0, [pc, #204]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000de84:	47d0      	blx	sl
1000de86:	8871      	ldrh	r1, [r6, #2]
1000de88:	4837      	ldr	r0, [pc, #220]	; (1000df68 <ble_encryption_request_handler+0x150>)
1000de8a:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000de8c:	4830      	ldr	r0, [pc, #192]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000de8e:	47d0      	blx	sl
1000de90:	0021      	movs	r1, r4
1000de92:	4836      	ldr	r0, [pc, #216]	; (1000df6c <ble_encryption_request_handler+0x154>)
1000de94:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000de96:	465b      	mov	r3, fp
1000de98:	881a      	ldrh	r2, [r3, #0]
1000de9a:	8873      	ldrh	r3, [r6, #2]
1000de9c:	429a      	cmp	r2, r3
1000de9e:	d12a      	bne.n	1000def6 <ble_encryption_request_handler+0xde>
1000dea0:	e006      	b.n	1000deb0 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dea2:	3401      	adds	r4, #1
1000dea4:	b2e4      	uxtb	r4, r4
1000dea6:	3201      	adds	r2, #1
1000dea8:	337c      	adds	r3, #124	; 0x7c
1000deaa:	2c05      	cmp	r4, #5
1000deac:	d1be      	bne.n	1000de2c <ble_encryption_request_handler+0x14>
1000deae:	e022      	b.n	1000def6 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000deb0:	0161      	lsls	r1, r4, #5
1000deb2:	1b09      	subs	r1, r1, r4
1000deb4:	0089      	lsls	r1, r1, #2
1000deb6:	4b25      	ldr	r3, [pc, #148]	; (1000df4c <ble_encryption_request_handler+0x134>)
1000deb8:	1859      	adds	r1, r3, r1
1000deba:	3172      	adds	r1, #114	; 0x72
1000debc:	1d30      	adds	r0, r6, #4
1000debe:	2208      	movs	r2, #8
1000dec0:	4b2b      	ldr	r3, [pc, #172]	; (1000df70 <ble_encryption_request_handler+0x158>)
1000dec2:	4798      	blx	r3
1000dec4:	2800      	cmp	r0, #0
1000dec6:	d116      	bne.n	1000def6 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000dec8:	4821      	ldr	r0, [pc, #132]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000deca:	4b22      	ldr	r3, [pc, #136]	; (1000df54 <ble_encryption_request_handler+0x13c>)
1000decc:	4798      	blx	r3
1000dece:	4829      	ldr	r0, [pc, #164]	; (1000df74 <ble_encryption_request_handler+0x15c>)
1000ded0:	4b22      	ldr	r3, [pc, #136]	; (1000df5c <ble_encryption_request_handler+0x144>)
1000ded2:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000ded4:	0162      	lsls	r2, r4, #5
1000ded6:	1b13      	subs	r3, r2, r4
1000ded8:	009b      	lsls	r3, r3, #2
1000deda:	3360      	adds	r3, #96	; 0x60
1000dedc:	491b      	ldr	r1, [pc, #108]	; (1000df4c <ble_encryption_request_handler+0x134>)
1000dede:	185b      	adds	r3, r3, r1
1000dee0:	1b12      	subs	r2, r2, r4
1000dee2:	0092      	lsls	r2, r2, #2
1000dee4:	188a      	adds	r2, r1, r2
1000dee6:	7d11      	ldrb	r1, [r2, #20]
1000dee8:	8830      	ldrh	r0, [r6, #0]
1000deea:	2201      	movs	r2, #1
1000deec:	4c22      	ldr	r4, [pc, #136]	; (1000df78 <ble_encryption_request_handler+0x160>)
1000deee:	47a0      	blx	r4
1000def0:	1e04      	subs	r4, r0, #0
1000def2:	d01e      	beq.n	1000df32 <ble_encryption_request_handler+0x11a>
1000def4:	e015      	b.n	1000df22 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000def6:	4f16      	ldr	r7, [pc, #88]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000def8:	0038      	movs	r0, r7
1000defa:	4e16      	ldr	r6, [pc, #88]	; (1000df54 <ble_encryption_request_handler+0x13c>)
1000defc:	47b0      	blx	r6
1000defe:	481f      	ldr	r0, [pc, #124]	; (1000df7c <ble_encryption_request_handler+0x164>)
1000df00:	4d16      	ldr	r5, [pc, #88]	; (1000df5c <ble_encryption_request_handler+0x144>)
1000df02:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000df04:	0038      	movs	r0, r7
1000df06:	47b0      	blx	r6
1000df08:	481d      	ldr	r0, [pc, #116]	; (1000df80 <ble_encryption_request_handler+0x168>)
1000df0a:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000df0c:	0163      	lsls	r3, r4, #5
1000df0e:	1b1c      	subs	r4, r3, r4
1000df10:	00a4      	lsls	r4, r4, #2
1000df12:	4b0e      	ldr	r3, [pc, #56]	; (1000df4c <ble_encryption_request_handler+0x134>)
1000df14:	191c      	adds	r4, r3, r4
1000df16:	8920      	ldrh	r0, [r4, #8]
1000df18:	2105      	movs	r1, #5
1000df1a:	4b1a      	ldr	r3, [pc, #104]	; (1000df84 <ble_encryption_request_handler+0x16c>)
1000df1c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000df1e:	24e2      	movs	r4, #226	; 0xe2
1000df20:	e00d      	b.n	1000df3e <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000df22:	480b      	ldr	r0, [pc, #44]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000df24:	4b0b      	ldr	r3, [pc, #44]	; (1000df54 <ble_encryption_request_handler+0x13c>)
1000df26:	4798      	blx	r3
1000df28:	4817      	ldr	r0, [pc, #92]	; (1000df88 <ble_encryption_request_handler+0x170>)
1000df2a:	4b0c      	ldr	r3, [pc, #48]	; (1000df5c <ble_encryption_request_handler+0x144>)
1000df2c:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000df2e:	2400      	movs	r4, #0
1000df30:	e005      	b.n	1000df3e <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000df32:	4807      	ldr	r0, [pc, #28]	; (1000df50 <ble_encryption_request_handler+0x138>)
1000df34:	4b07      	ldr	r3, [pc, #28]	; (1000df54 <ble_encryption_request_handler+0x13c>)
1000df36:	4798      	blx	r3
1000df38:	4814      	ldr	r0, [pc, #80]	; (1000df8c <ble_encryption_request_handler+0x174>)
1000df3a:	4b08      	ldr	r3, [pc, #32]	; (1000df5c <ble_encryption_request_handler+0x144>)
1000df3c:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000df3e:	0020      	movs	r0, r4
1000df40:	bc1c      	pop	{r2, r3, r4}
1000df42:	4691      	mov	r9, r2
1000df44:	469a      	mov	sl, r3
1000df46:	46a3      	mov	fp, r4
1000df48:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df4a:	46c0      	nop			; (mov r8, r8)
1000df4c:	10019c28 	.word	0x10019c28
1000df50:	10015e2c 	.word	0x10015e2c
1000df54:	10014c6d 	.word	0x10014c6d
1000df58:	100174c4 	.word	0x100174c4
1000df5c:	10014b4d 	.word	0x10014b4d
1000df60:	100174f0 	.word	0x100174f0
1000df64:	10017504 	.word	0x10017504
1000df68:	10017518 	.word	0x10017518
1000df6c:	10017528 	.word	0x10017528
1000df70:	100149d5 	.word	0x100149d5
1000df74:	10017538 	.word	0x10017538
1000df78:	1001120d 	.word	0x1001120d
1000df7c:	1001754c 	.word	0x1001754c
1000df80:	10017584 	.word	0x10017584
1000df84:	100105b1 	.word	0x100105b1
1000df88:	100175dc 	.word	0x100175dc
1000df8c:	100175fc 	.word	0x100175fc

1000df90 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000df90:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000df92:	2a00      	cmp	r2, #0
1000df94:	d047      	beq.n	1000e026 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000df96:	2906      	cmp	r1, #6
1000df98:	d847      	bhi.n	1000e02a <ble_mgr_events_callback_handler+0x9a>
1000df9a:	0089      	lsls	r1, r1, #2
1000df9c:	4b28      	ldr	r3, [pc, #160]	; (1000e040 <ble_mgr_events_callback_handler+0xb0>)
1000df9e:	585b      	ldr	r3, [r3, r1]
1000dfa0:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000dfa2:	4b28      	ldr	r3, [pc, #160]	; (1000e044 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000dfa4:	2405      	movs	r4, #5
1000dfa6:	e00a      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000dfa8:	4b27      	ldr	r3, [pc, #156]	; (1000e048 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000dfaa:	2401      	movs	r4, #1
			}
			break;
1000dfac:	e007      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000dfae:	4b27      	ldr	r3, [pc, #156]	; (1000e04c <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000dfb0:	2405      	movs	r4, #5
			}
			break;
1000dfb2:	e004      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000dfb4:	4b26      	ldr	r3, [pc, #152]	; (1000e050 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000dfb6:	2401      	movs	r4, #1
			}
			break;
1000dfb8:	e001      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000dfba:	4b26      	ldr	r3, [pc, #152]	; (1000e054 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000dfbc:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000dfbe:	2800      	cmp	r0, #0
1000dfc0:	d116      	bne.n	1000dff0 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dfc2:	6819      	ldr	r1, [r3, #0]
1000dfc4:	2900      	cmp	r1, #0
1000dfc6:	d10b      	bne.n	1000dfe0 <ble_mgr_events_callback_handler+0x50>
1000dfc8:	e006      	b.n	1000dfd8 <ble_mgr_events_callback_handler+0x48>
1000dfca:	001d      	movs	r5, r3
1000dfcc:	3304      	adds	r3, #4
1000dfce:	1f18      	subs	r0, r3, #4
1000dfd0:	6800      	ldr	r0, [r0, #0]
1000dfd2:	2800      	cmp	r0, #0
1000dfd4:	d106      	bne.n	1000dfe4 <ble_mgr_events_callback_handler+0x54>
1000dfd6:	e000      	b.n	1000dfda <ble_mgr_events_callback_handler+0x4a>
1000dfd8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000dfda:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000dfdc:	2101      	movs	r1, #1
						break;
1000dfde:	e02c      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
1000dfe0:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dfe2:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000dfe4:	3101      	adds	r1, #1
1000dfe6:	b2c9      	uxtb	r1, r1
1000dfe8:	42a1      	cmp	r1, r4
1000dfea:	d3ee      	bcc.n	1000dfca <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000dfec:	2100      	movs	r1, #0
1000dfee:	e024      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
1000dff0:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000dff2:	2801      	cmp	r0, #1
1000dff4:	d121      	bne.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000dff6:	6819      	ldr	r1, [r3, #0]
1000dff8:	428a      	cmp	r2, r1
1000dffa:	d10c      	bne.n	1000e016 <ble_mgr_events_callback_handler+0x86>
1000dffc:	e006      	b.n	1000e00c <ble_mgr_events_callback_handler+0x7c>
1000dffe:	001d      	movs	r5, r3
1000e000:	3304      	adds	r3, #4
1000e002:	1f18      	subs	r0, r3, #4
1000e004:	6800      	ldr	r0, [r0, #0]
1000e006:	4282      	cmp	r2, r0
1000e008:	d107      	bne.n	1000e01a <ble_mgr_events_callback_handler+0x8a>
1000e00a:	e000      	b.n	1000e00e <ble_mgr_events_callback_handler+0x7e>
1000e00c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e00e:	2300      	movs	r3, #0
1000e010:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e012:	2101      	movs	r1, #1
						break;
1000e014:	e011      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
1000e016:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e018:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e01a:	3101      	adds	r1, #1
1000e01c:	b2c9      	uxtb	r1, r1
1000e01e:	42a1      	cmp	r1, r4
1000e020:	d3ed      	bcc.n	1000dffe <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e022:	2100      	movs	r1, #0
1000e024:	e009      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e026:	2100      	movs	r1, #0
1000e028:	e007      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e02a:	2100      	movs	r1, #0
1000e02c:	e005      	b.n	1000e03a <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e02e:	4b0a      	ldr	r3, [pc, #40]	; (1000e058 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e030:	2405      	movs	r4, #5
1000e032:	e7c4      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e034:	4b09      	ldr	r3, [pc, #36]	; (1000e05c <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e036:	2401      	movs	r4, #1
1000e038:	e7c1      	b.n	1000dfbe <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e03a:	0008      	movs	r0, r1
1000e03c:	bd30      	pop	{r4, r5, pc}
1000e03e:	46c0      	nop			; (mov r8, r8)
1000e040:	10016eb0 	.word	0x10016eb0
1000e044:	10019c14 	.word	0x10019c14
1000e048:	10019c10 	.word	0x10019c10
1000e04c:	10019e98 	.word	0x10019e98
1000e050:	1001a44c 	.word	0x1001a44c
1000e054:	10019eac 	.word	0x10019eac
1000e058:	10019ec0 	.word	0x10019ec0
1000e05c:	10019f08 	.word	0x10019f08

1000e060 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e060:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e062:	465f      	mov	r7, fp
1000e064:	4656      	mov	r6, sl
1000e066:	464d      	mov	r5, r9
1000e068:	4644      	mov	r4, r8
1000e06a:	b4f0      	push	{r4, r5, r6, r7}
1000e06c:	b091      	sub	sp, #68	; 0x44
1000e06e:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e070:	2400      	movs	r4, #0
1000e072:	4b7e      	ldr	r3, [pc, #504]	; (1000e26c <ble_device_init+0x20c>)
1000e074:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e076:	2207      	movs	r2, #7
1000e078:	2100      	movs	r1, #0
1000e07a:	487d      	ldr	r0, [pc, #500]	; (1000e270 <ble_device_init+0x210>)
1000e07c:	4e7d      	ldr	r6, [pc, #500]	; (1000e274 <ble_device_init+0x214>)
1000e07e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e080:	2212      	movs	r2, #18
1000e082:	2100      	movs	r1, #0
1000e084:	487c      	ldr	r0, [pc, #496]	; (1000e278 <ble_device_init+0x218>)
1000e086:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e088:	4a7c      	ldr	r2, [pc, #496]	; (1000e27c <ble_device_init+0x21c>)
1000e08a:	2100      	movs	r1, #0
1000e08c:	487c      	ldr	r0, [pc, #496]	; (1000e280 <ble_device_init+0x220>)
1000e08e:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e090:	4b7c      	ldr	r3, [pc, #496]	; (1000e284 <ble_device_init+0x224>)
1000e092:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e094:	22cd      	movs	r2, #205	; 0xcd
1000e096:	0092      	lsls	r2, r2, #2
1000e098:	2100      	movs	r1, #0
1000e09a:	487b      	ldr	r0, [pc, #492]	; (1000e288 <ble_device_init+0x228>)
1000e09c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e09e:	4b7b      	ldr	r3, [pc, #492]	; (1000e28c <ble_device_init+0x22c>)
1000e0a0:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e0a2:	2283      	movs	r2, #131	; 0x83
1000e0a4:	0092      	lsls	r2, r2, #2
1000e0a6:	2100      	movs	r1, #0
1000e0a8:	4879      	ldr	r0, [pc, #484]	; (1000e290 <ble_device_init+0x230>)
1000e0aa:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e0ac:	4b79      	ldr	r3, [pc, #484]	; (1000e294 <ble_device_init+0x234>)
1000e0ae:	469b      	mov	fp, r3
1000e0b0:	2380      	movs	r3, #128	; 0x80
1000e0b2:	00db      	lsls	r3, r3, #3
1000e0b4:	469a      	mov	sl, r3
1000e0b6:	001a      	movs	r2, r3
1000e0b8:	2100      	movs	r1, #0
1000e0ba:	4658      	mov	r0, fp
1000e0bc:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e0be:	4b76      	ldr	r3, [pc, #472]	; (1000e298 <ble_device_init+0x238>)
1000e0c0:	4699      	mov	r9, r3
1000e0c2:	2380      	movs	r3, #128	; 0x80
1000e0c4:	015b      	lsls	r3, r3, #5
1000e0c6:	4698      	mov	r8, r3
1000e0c8:	001a      	movs	r2, r3
1000e0ca:	2100      	movs	r1, #0
1000e0cc:	4648      	mov	r0, r9
1000e0ce:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e0d0:	4f72      	ldr	r7, [pc, #456]	; (1000e29c <ble_device_init+0x23c>)
1000e0d2:	221c      	movs	r2, #28
1000e0d4:	2100      	movs	r1, #0
1000e0d6:	0038      	movs	r0, r7
1000e0d8:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e0da:	465b      	mov	r3, fp
1000e0dc:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e0de:	4653      	mov	r3, sl
1000e0e0:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e0e2:	464b      	mov	r3, r9
1000e0e4:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e0e6:	4643      	mov	r3, r8
1000e0e8:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e0ea:	4b6d      	ldr	r3, [pc, #436]	; (1000e2a0 <ble_device_init+0x240>)
1000e0ec:	601c      	str	r4, [r3, #0]
1000e0ee:	605c      	str	r4, [r3, #4]
1000e0f0:	609c      	str	r4, [r3, #8]
1000e0f2:	60dc      	str	r4, [r3, #12]
1000e0f4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e0f6:	4b6b      	ldr	r3, [pc, #428]	; (1000e2a4 <ble_device_init+0x244>)
1000e0f8:	601c      	str	r4, [r3, #0]
1000e0fa:	605c      	str	r4, [r3, #4]
1000e0fc:	609c      	str	r4, [r3, #8]
1000e0fe:	60dc      	str	r4, [r3, #12]
1000e100:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e102:	4b69      	ldr	r3, [pc, #420]	; (1000e2a8 <ble_device_init+0x248>)
1000e104:	601c      	str	r4, [r3, #0]
1000e106:	605c      	str	r4, [r3, #4]
1000e108:	609c      	str	r4, [r3, #8]
1000e10a:	60dc      	str	r4, [r3, #12]
1000e10c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e10e:	4b67      	ldr	r3, [pc, #412]	; (1000e2ac <ble_device_init+0x24c>)
1000e110:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e112:	4b67      	ldr	r3, [pc, #412]	; (1000e2b0 <ble_device_init+0x250>)
1000e114:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e116:	4b67      	ldr	r3, [pc, #412]	; (1000e2b4 <ble_device_init+0x254>)
1000e118:	601c      	str	r4, [r3, #0]
1000e11a:	605c      	str	r4, [r3, #4]
1000e11c:	609c      	str	r4, [r3, #8]
1000e11e:	60dc      	str	r4, [r3, #12]
1000e120:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e122:	4b65      	ldr	r3, [pc, #404]	; (1000e2b8 <ble_device_init+0x258>)
1000e124:	601c      	str	r4, [r3, #0]
1000e126:	4c65      	ldr	r4, [pc, #404]	; (1000e2bc <ble_device_init+0x25c>)
1000e128:	239b      	movs	r3, #155	; 0x9b
1000e12a:	009b      	lsls	r3, r3, #2
1000e12c:	4698      	mov	r8, r3
1000e12e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e130:	4f50      	ldr	r7, [pc, #320]	; (1000e274 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e132:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e134:	227c      	movs	r2, #124	; 0x7c
1000e136:	2100      	movs	r1, #0
1000e138:	0020      	movs	r0, r4
1000e13a:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e13c:	0023      	movs	r3, r4
1000e13e:	335e      	adds	r3, #94	; 0x5e
1000e140:	2200      	movs	r2, #0
1000e142:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e144:	7626      	strb	r6, [r4, #24]
1000e146:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e148:	45a0      	cmp	r8, r4
1000e14a:	d1f3      	bne.n	1000e134 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e14c:	4b5c      	ldr	r3, [pc, #368]	; (1000e2c0 <ble_device_init+0x260>)
1000e14e:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e150:	4c52      	ldr	r4, [pc, #328]	; (1000e29c <ble_device_init+0x23c>)
1000e152:	4b4a      	ldr	r3, [pc, #296]	; (1000e27c <ble_device_init+0x21c>)
1000e154:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e156:	4b4a      	ldr	r3, [pc, #296]	; (1000e280 <ble_device_init+0x220>)
1000e158:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e15a:	485a      	ldr	r0, [pc, #360]	; (1000e2c4 <ble_device_init+0x264>)
1000e15c:	4b5a      	ldr	r3, [pc, #360]	; (1000e2c8 <ble_device_init+0x268>)
1000e15e:	4798      	blx	r3
1000e160:	485a      	ldr	r0, [pc, #360]	; (1000e2cc <ble_device_init+0x26c>)
1000e162:	4b5b      	ldr	r3, [pc, #364]	; (1000e2d0 <ble_device_init+0x270>)
1000e164:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e166:	0020      	movs	r0, r4
1000e168:	4b5a      	ldr	r3, [pc, #360]	; (1000e2d4 <ble_device_init+0x274>)
1000e16a:	4798      	blx	r3
1000e16c:	2800      	cmp	r0, #0
1000e16e:	d00b      	beq.n	1000e188 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e170:	4e54      	ldr	r6, [pc, #336]	; (1000e2c4 <ble_device_init+0x264>)
1000e172:	0030      	movs	r0, r6
1000e174:	4d54      	ldr	r5, [pc, #336]	; (1000e2c8 <ble_device_init+0x268>)
1000e176:	47a8      	blx	r5
1000e178:	4857      	ldr	r0, [pc, #348]	; (1000e2d8 <ble_device_init+0x278>)
1000e17a:	4c55      	ldr	r4, [pc, #340]	; (1000e2d0 <ble_device_init+0x270>)
1000e17c:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e17e:	0030      	movs	r0, r6
1000e180:	47a8      	blx	r5
1000e182:	4856      	ldr	r0, [pc, #344]	; (1000e2dc <ble_device_init+0x27c>)
1000e184:	47a0      	blx	r4
1000e186:	e7fe      	b.n	1000e186 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e188:	4a55      	ldr	r2, [pc, #340]	; (1000e2e0 <ble_device_init+0x280>)
1000e18a:	2100      	movs	r1, #0
1000e18c:	2000      	movs	r0, #0
1000e18e:	4c55      	ldr	r4, [pc, #340]	; (1000e2e4 <ble_device_init+0x284>)
1000e190:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e192:	4a55      	ldr	r2, [pc, #340]	; (1000e2e8 <ble_device_init+0x288>)
1000e194:	2102      	movs	r1, #2
1000e196:	2000      	movs	r0, #0
1000e198:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e19a:	2109      	movs	r1, #9
1000e19c:	4853      	ldr	r0, [pc, #332]	; (1000e2ec <ble_device_init+0x28c>)
1000e19e:	4b54      	ldr	r3, [pc, #336]	; (1000e2f0 <ble_device_init+0x290>)
1000e1a0:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e1a2:	2800      	cmp	r0, #0
1000e1a4:	d005      	beq.n	1000e1b2 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e1a6:	4847      	ldr	r0, [pc, #284]	; (1000e2c4 <ble_device_init+0x264>)
1000e1a8:	4b47      	ldr	r3, [pc, #284]	; (1000e2c8 <ble_device_init+0x268>)
1000e1aa:	4798      	blx	r3
1000e1ac:	4851      	ldr	r0, [pc, #324]	; (1000e2f4 <ble_device_init+0x294>)
1000e1ae:	4b48      	ldr	r3, [pc, #288]	; (1000e2d0 <ble_device_init+0x270>)
1000e1b0:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e1b2:	2207      	movs	r2, #7
1000e1b4:	4950      	ldr	r1, [pc, #320]	; (1000e2f8 <ble_device_init+0x298>)
1000e1b6:	3108      	adds	r1, #8
1000e1b8:	a804      	add	r0, sp, #16
1000e1ba:	4b50      	ldr	r3, [pc, #320]	; (1000e2fc <ble_device_init+0x29c>)
1000e1bc:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e1be:	2226      	movs	r2, #38	; 0x26
1000e1c0:	2100      	movs	r1, #0
1000e1c2:	a806      	add	r0, sp, #24
1000e1c4:	4b2b      	ldr	r3, [pc, #172]	; (1000e274 <ble_device_init+0x214>)
1000e1c6:	4798      	blx	r3
	
	if (addr == NULL)
1000e1c8:	2d00      	cmp	r5, #0
1000e1ca:	d10c      	bne.n	1000e1e6 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e1cc:	a804      	add	r0, sp, #16
1000e1ce:	4b4c      	ldr	r3, [pc, #304]	; (1000e300 <ble_device_init+0x2a0>)
1000e1d0:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e1d2:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e1d4:	2800      	cmp	r0, #0
1000e1d6:	d006      	beq.n	1000e1e6 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e1d8:	483a      	ldr	r0, [pc, #232]	; (1000e2c4 <ble_device_init+0x264>)
1000e1da:	4b3b      	ldr	r3, [pc, #236]	; (1000e2c8 <ble_device_init+0x268>)
1000e1dc:	4798      	blx	r3
1000e1de:	4849      	ldr	r0, [pc, #292]	; (1000e304 <ble_device_init+0x2a4>)
1000e1e0:	4b3b      	ldr	r3, [pc, #236]	; (1000e2d0 <ble_device_init+0x270>)
1000e1e2:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e1e4:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e1e6:	4837      	ldr	r0, [pc, #220]	; (1000e2c4 <ble_device_init+0x264>)
1000e1e8:	4b37      	ldr	r3, [pc, #220]	; (1000e2c8 <ble_device_init+0x268>)
1000e1ea:	4798      	blx	r3
1000e1ec:	792b      	ldrb	r3, [r5, #4]
1000e1ee:	796a      	ldrb	r2, [r5, #5]
1000e1f0:	79a9      	ldrb	r1, [r5, #6]
1000e1f2:	7828      	ldrb	r0, [r5, #0]
1000e1f4:	9003      	str	r0, [sp, #12]
1000e1f6:	7868      	ldrb	r0, [r5, #1]
1000e1f8:	9002      	str	r0, [sp, #8]
1000e1fa:	78a8      	ldrb	r0, [r5, #2]
1000e1fc:	9001      	str	r0, [sp, #4]
1000e1fe:	78e8      	ldrb	r0, [r5, #3]
1000e200:	9000      	str	r0, [sp, #0]
1000e202:	4841      	ldr	r0, [pc, #260]	; (1000e308 <ble_device_init+0x2a8>)
1000e204:	4c32      	ldr	r4, [pc, #200]	; (1000e2d0 <ble_device_init+0x270>)
1000e206:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e208:	ac06      	add	r4, sp, #24
1000e20a:	230a      	movs	r3, #10
1000e20c:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e20e:	4b3f      	ldr	r3, [pc, #252]	; (1000e30c <ble_device_init+0x2ac>)
1000e210:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e212:	2207      	movs	r2, #7
1000e214:	0029      	movs	r1, r5
1000e216:	a807      	add	r0, sp, #28
1000e218:	4b38      	ldr	r3, [pc, #224]	; (1000e2fc <ble_device_init+0x29c>)
1000e21a:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e21c:	2300      	movs	r3, #0
1000e21e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e220:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e222:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e224:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e226:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e228:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e22a:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e22c:	2380      	movs	r3, #128	; 0x80
1000e22e:	009b      	lsls	r3, r3, #2
1000e230:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e232:	0020      	movs	r0, r4
1000e234:	4b36      	ldr	r3, [pc, #216]	; (1000e310 <ble_device_init+0x2b0>)
1000e236:	4798      	blx	r3
1000e238:	2800      	cmp	r0, #0
1000e23a:	d005      	beq.n	1000e248 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e23c:	4821      	ldr	r0, [pc, #132]	; (1000e2c4 <ble_device_init+0x264>)
1000e23e:	4b22      	ldr	r3, [pc, #136]	; (1000e2c8 <ble_device_init+0x268>)
1000e240:	4798      	blx	r3
1000e242:	4834      	ldr	r0, [pc, #208]	; (1000e314 <ble_device_init+0x2b4>)
1000e244:	4b22      	ldr	r3, [pc, #136]	; (1000e2d0 <ble_device_init+0x270>)
1000e246:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e248:	0028      	movs	r0, r5
1000e24a:	4b33      	ldr	r3, [pc, #204]	; (1000e318 <ble_device_init+0x2b8>)
1000e24c:	4798      	blx	r3
1000e24e:	2800      	cmp	r0, #0
1000e250:	d005      	beq.n	1000e25e <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e252:	481c      	ldr	r0, [pc, #112]	; (1000e2c4 <ble_device_init+0x264>)
1000e254:	4b1c      	ldr	r3, [pc, #112]	; (1000e2c8 <ble_device_init+0x268>)
1000e256:	4798      	blx	r3
1000e258:	4830      	ldr	r0, [pc, #192]	; (1000e31c <ble_device_init+0x2bc>)
1000e25a:	4b1d      	ldr	r3, [pc, #116]	; (1000e2d0 <ble_device_init+0x270>)
1000e25c:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e25e:	b011      	add	sp, #68	; 0x44
1000e260:	bc3c      	pop	{r2, r3, r4, r5}
1000e262:	4690      	mov	r8, r2
1000e264:	4699      	mov	r9, r3
1000e266:	46a2      	mov	sl, r4
1000e268:	46ab      	mov	fp, r5
1000e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e26c:	10018790 	.word	0x10018790
1000e270:	10018798 	.word	0x10018798
1000e274:	10014a05 	.word	0x10014a05
1000e278:	10019ed4 	.word	0x10019ed4
1000e27c:	000004e2 	.word	0x000004e2
1000e280:	100182b0 	.word	0x100182b0
1000e284:	10018794 	.word	0x10018794
1000e288:	10019f0c 	.word	0x10019f0c
1000e28c:	10019f04 	.word	0x10019f04
1000e290:	1001a240 	.word	0x1001a240
1000e294:	10017eb0 	.word	0x10017eb0
1000e298:	100187a0 	.word	0x100187a0
1000e29c:	10019ee8 	.word	0x10019ee8
1000e2a0:	10019eac 	.word	0x10019eac
1000e2a4:	10019ec0 	.word	0x10019ec0
1000e2a8:	10019c14 	.word	0x10019c14
1000e2ac:	10019f08 	.word	0x10019f08
1000e2b0:	10019c10 	.word	0x10019c10
1000e2b4:	10019e98 	.word	0x10019e98
1000e2b8:	1001a44c 	.word	0x1001a44c
1000e2bc:	10019c28 	.word	0x10019c28
1000e2c0:	10019e94 	.word	0x10019e94
1000e2c4:	10015e2c 	.word	0x10015e2c
1000e2c8:	10014c6d 	.word	0x10014c6d
1000e2cc:	10017618 	.word	0x10017618
1000e2d0:	10014b4d 	.word	0x10014b4d
1000e2d4:	100101bd 	.word	0x100101bd
1000e2d8:	1001763c 	.word	0x1001763c
1000e2dc:	10017668 	.word	0x10017668
1000e2e0:	10017a14 	.word	0x10017a14
1000e2e4:	1000df91 	.word	0x1000df91
1000e2e8:	10016fcc 	.word	0x10016fcc
1000e2ec:	100176b0 	.word	0x100176b0
1000e2f0:	100100d5 	.word	0x100100d5
1000e2f4:	100176bc 	.word	0x100176bc
1000e2f8:	10016fbc 	.word	0x10016fbc
1000e2fc:	100149f3 	.word	0x100149f3
1000e300:	10010109 	.word	0x10010109
1000e304:	100176d4 	.word	0x100176d4
1000e308:	10017700 	.word	0x10017700
1000e30c:	00003a98 	.word	0x00003a98
1000e310:	1001012d 	.word	0x1001012d
1000e314:	10017750 	.word	0x10017750
1000e318:	10010371 	.word	0x10010371
1000e31c:	1001778c 	.word	0x1001778c

1000e320 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e320:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e322:	2200      	movs	r2, #0
1000e324:	2100      	movs	r1, #0
1000e326:	4b0a      	ldr	r3, [pc, #40]	; (1000e350 <ble_send_slave_sec_request+0x30>)
1000e328:	4798      	blx	r3
1000e32a:	1e04      	subs	r4, r0, #0
1000e32c:	d106      	bne.n	1000e33c <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e32e:	4809      	ldr	r0, [pc, #36]	; (1000e354 <ble_send_slave_sec_request+0x34>)
1000e330:	4b09      	ldr	r3, [pc, #36]	; (1000e358 <ble_send_slave_sec_request+0x38>)
1000e332:	4798      	blx	r3
1000e334:	4809      	ldr	r0, [pc, #36]	; (1000e35c <ble_send_slave_sec_request+0x3c>)
1000e336:	4b0a      	ldr	r3, [pc, #40]	; (1000e360 <ble_send_slave_sec_request+0x40>)
1000e338:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e33a:	e006      	b.n	1000e34a <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e33c:	4805      	ldr	r0, [pc, #20]	; (1000e354 <ble_send_slave_sec_request+0x34>)
1000e33e:	4b06      	ldr	r3, [pc, #24]	; (1000e358 <ble_send_slave_sec_request+0x38>)
1000e340:	4798      	blx	r3
1000e342:	4808      	ldr	r0, [pc, #32]	; (1000e364 <ble_send_slave_sec_request+0x44>)
1000e344:	4b06      	ldr	r3, [pc, #24]	; (1000e360 <ble_send_slave_sec_request+0x40>)
1000e346:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e348:	24e2      	movs	r4, #226	; 0xe2
}
1000e34a:	0020      	movs	r0, r4
1000e34c:	bd10      	pop	{r4, pc}
1000e34e:	46c0      	nop			; (mov r8, r8)
1000e350:	10011155 	.word	0x10011155
1000e354:	10015e2c 	.word	0x10015e2c
1000e358:	10014c6d 	.word	0x10014c6d
1000e35c:	100177dc 	.word	0x100177dc
1000e360:	10014b4d 	.word	0x10014b4d
1000e364:	10017800 	.word	0x10017800

1000e368 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e368:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e36a:	465f      	mov	r7, fp
1000e36c:	464e      	mov	r6, r9
1000e36e:	4645      	mov	r5, r8
1000e370:	b4e0      	push	{r5, r6, r7}
1000e372:	b09a      	sub	sp, #104	; 0x68
1000e374:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e376:	7a86      	ldrb	r6, [r0, #10]
1000e378:	2e00      	cmp	r6, #0
1000e37a:	d000      	beq.n	1000e37e <ble_connected_state_handler+0x16>
1000e37c:	e0cc      	b.n	1000e518 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e37e:	4878      	ldr	r0, [pc, #480]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e380:	4f78      	ldr	r7, [pc, #480]	; (1000e564 <ble_connected_state_handler+0x1fc>)
1000e382:	47b8      	blx	r7
1000e384:	792b      	ldrb	r3, [r5, #4]
1000e386:	796a      	ldrb	r2, [r5, #5]
1000e388:	79a9      	ldrb	r1, [r5, #6]
1000e38a:	7868      	ldrb	r0, [r5, #1]
1000e38c:	9002      	str	r0, [sp, #8]
1000e38e:	78a8      	ldrb	r0, [r5, #2]
1000e390:	9001      	str	r0, [sp, #4]
1000e392:	78e8      	ldrb	r0, [r5, #3]
1000e394:	9000      	str	r0, [sp, #0]
1000e396:	4874      	ldr	r0, [pc, #464]	; (1000e568 <ble_connected_state_handler+0x200>)
1000e398:	4c74      	ldr	r4, [pc, #464]	; (1000e56c <ble_connected_state_handler+0x204>)
1000e39a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e39c:	4870      	ldr	r0, [pc, #448]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e39e:	47b8      	blx	r7
1000e3a0:	8929      	ldrh	r1, [r5, #8]
1000e3a2:	4873      	ldr	r0, [pc, #460]	; (1000e570 <ble_connected_state_handler+0x208>)
1000e3a4:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e3a6:	2212      	movs	r2, #18
1000e3a8:	0029      	movs	r1, r5
1000e3aa:	4872      	ldr	r0, [pc, #456]	; (1000e574 <ble_connected_state_handler+0x20c>)
1000e3ac:	4b72      	ldr	r3, [pc, #456]	; (1000e578 <ble_connected_state_handler+0x210>)
1000e3ae:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e3b0:	9504      	str	r5, [sp, #16]
1000e3b2:	2207      	movs	r2, #7
1000e3b4:	0029      	movs	r1, r5
1000e3b6:	4871      	ldr	r0, [pc, #452]	; (1000e57c <ble_connected_state_handler+0x214>)
1000e3b8:	4b71      	ldr	r3, [pc, #452]	; (1000e580 <ble_connected_state_handler+0x218>)
1000e3ba:	4798      	blx	r3
1000e3bc:	2800      	cmp	r0, #0
1000e3be:	d100      	bne.n	1000e3c2 <ble_connected_state_handler+0x5a>
1000e3c0:	e0b3      	b.n	1000e52a <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e3c2:	782b      	ldrb	r3, [r5, #0]
1000e3c4:	2b02      	cmp	r3, #2
1000e3c6:	d000      	beq.n	1000e3ca <ble_connected_state_handler+0x62>
1000e3c8:	e0af      	b.n	1000e52a <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e3ca:	2250      	movs	r2, #80	; 0x50
1000e3cc:	2100      	movs	r1, #0
1000e3ce:	a806      	add	r0, sp, #24
1000e3d0:	4b6c      	ldr	r3, [pc, #432]	; (1000e584 <ble_connected_state_handler+0x21c>)
1000e3d2:	4798      	blx	r3
1000e3d4:	4f6c      	ldr	r7, [pc, #432]	; (1000e588 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e3d6:	2300      	movs	r3, #0
1000e3d8:	e00b      	b.n	1000e3f2 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e3da:	1c59      	adds	r1, r3, #1
1000e3dc:	7814      	ldrb	r4, [r2, #0]
1000e3de:	a806      	add	r0, sp, #24
1000e3e0:	54c4      	strb	r4, [r0, r3]
1000e3e2:	3201      	adds	r2, #1
1000e3e4:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e3e6:	42b3      	cmp	r3, r6
1000e3e8:	d1f7      	bne.n	1000e3da <ble_connected_state_handler+0x72>
1000e3ea:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e3ec:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e3ee:	2b50      	cmp	r3, #80	; 0x50
1000e3f0:	d004      	beq.n	1000e3fc <ble_connected_state_handler+0x94>
1000e3f2:	001e      	movs	r6, r3
1000e3f4:	3610      	adds	r6, #16
1000e3f6:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e3f8:	003a      	movs	r2, r7
1000e3fa:	e7ee      	b.n	1000e3da <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e3fc:	aa06      	add	r2, sp, #24
1000e3fe:	0029      	movs	r1, r5
1000e400:	2005      	movs	r0, #5
1000e402:	4b62      	ldr	r3, [pc, #392]	; (1000e58c <ble_connected_state_handler+0x224>)
1000e404:	4798      	blx	r3
1000e406:	1e06      	subs	r6, r0, #0
1000e408:	d106      	bne.n	1000e418 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e40a:	4855      	ldr	r0, [pc, #340]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e40c:	4b55      	ldr	r3, [pc, #340]	; (1000e564 <ble_connected_state_handler+0x1fc>)
1000e40e:	4798      	blx	r3
1000e410:	485f      	ldr	r0, [pc, #380]	; (1000e590 <ble_connected_state_handler+0x228>)
1000e412:	4b56      	ldr	r3, [pc, #344]	; (1000e56c <ble_connected_state_handler+0x204>)
1000e414:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e416:	e09c      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e418:	4851      	ldr	r0, [pc, #324]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e41a:	4b52      	ldr	r3, [pc, #328]	; (1000e564 <ble_connected_state_handler+0x1fc>)
1000e41c:	4798      	blx	r3
1000e41e:	485d      	ldr	r0, [pc, #372]	; (1000e594 <ble_connected_state_handler+0x22c>)
1000e420:	4b52      	ldr	r3, [pc, #328]	; (1000e56c <ble_connected_state_handler+0x204>)
1000e422:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e424:	26e2      	movs	r6, #226	; 0xe2
1000e426:	e094      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
1000e428:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e42a:	9405      	str	r4, [sp, #20]
1000e42c:	2207      	movs	r2, #7
1000e42e:	9904      	ldr	r1, [sp, #16]
1000e430:	4648      	mov	r0, r9
1000e432:	47d8      	blx	fp
1000e434:	2800      	cmp	r0, #0
1000e436:	d109      	bne.n	1000e44c <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e438:	9a05      	ldr	r2, [sp, #20]
1000e43a:	0153      	lsls	r3, r2, #5
1000e43c:	1a9b      	subs	r3, r3, r2
1000e43e:	009a      	lsls	r2, r3, #2
1000e440:	4b55      	ldr	r3, [pc, #340]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e442:	189b      	adds	r3, r3, r2
1000e444:	335e      	adds	r3, #94	; 0x5e
1000e446:	2202      	movs	r2, #2
1000e448:	701a      	strb	r2, [r3, #0]
1000e44a:	e02b      	b.n	1000e4a4 <ble_connected_state_handler+0x13c>
1000e44c:	3401      	adds	r4, #1
1000e44e:	237c      	movs	r3, #124	; 0x7c
1000e450:	469c      	mov	ip, r3
1000e452:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e454:	2c05      	cmp	r4, #5
1000e456:	d1e7      	bne.n	1000e428 <ble_connected_state_handler+0xc0>
1000e458:	e072      	b.n	1000e540 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e45a:	001c      	movs	r4, r3
1000e45c:	7811      	ldrb	r1, [r2, #0]
1000e45e:	2900      	cmp	r1, #0
1000e460:	d11a      	bne.n	1000e498 <ble_connected_state_handler+0x130>
1000e462:	e001      	b.n	1000e468 <ble_connected_state_handler+0x100>
1000e464:	2400      	movs	r4, #0
1000e466:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e468:	0163      	lsls	r3, r4, #5
1000e46a:	4699      	mov	r9, r3
1000e46c:	1b18      	subs	r0, r3, r4
1000e46e:	0080      	lsls	r0, r0, #2
1000e470:	4b49      	ldr	r3, [pc, #292]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e472:	4698      	mov	r8, r3
1000e474:	4440      	add	r0, r8
1000e476:	2212      	movs	r2, #18
1000e478:	0029      	movs	r1, r5
1000e47a:	4b3f      	ldr	r3, [pc, #252]	; (1000e578 <ble_connected_state_handler+0x210>)
1000e47c:	4798      	blx	r3
						ble_device_count++;
1000e47e:	4a47      	ldr	r2, [pc, #284]	; (1000e59c <ble_connected_state_handler+0x234>)
1000e480:	7813      	ldrb	r3, [r2, #0]
1000e482:	3301      	adds	r3, #1
1000e484:	b2db      	uxtb	r3, r3
1000e486:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e488:	464b      	mov	r3, r9
1000e48a:	1b1b      	subs	r3, r3, r4
1000e48c:	009b      	lsls	r3, r3, #2
1000e48e:	4443      	add	r3, r8
1000e490:	335e      	adds	r3, #94	; 0x5e
1000e492:	2202      	movs	r2, #2
1000e494:	701a      	strb	r2, [r3, #0]
						break;
1000e496:	e005      	b.n	1000e4a4 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e498:	1c79      	adds	r1, r7, #1
1000e49a:	b2cf      	uxtb	r7, r1
1000e49c:	3301      	adds	r3, #1
1000e49e:	327c      	adds	r2, #124	; 0x7c
1000e4a0:	2f05      	cmp	r7, #5
1000e4a2:	d1da      	bne.n	1000e45a <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e4a4:	2207      	movs	r2, #7
1000e4a6:	0029      	movs	r1, r5
1000e4a8:	4834      	ldr	r0, [pc, #208]	; (1000e57c <ble_connected_state_handler+0x214>)
1000e4aa:	4b35      	ldr	r3, [pc, #212]	; (1000e580 <ble_connected_state_handler+0x218>)
1000e4ac:	4798      	blx	r3
1000e4ae:	2800      	cmp	r0, #0
1000e4b0:	d10c      	bne.n	1000e4cc <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e4b2:	017b      	lsls	r3, r7, #5
1000e4b4:	1bdb      	subs	r3, r3, r7
1000e4b6:	009b      	lsls	r3, r3, #2
1000e4b8:	4a37      	ldr	r2, [pc, #220]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e4ba:	18d3      	adds	r3, r2, r3
1000e4bc:	2205      	movs	r2, #5
1000e4be:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e4c0:	3202      	adds	r2, #2
1000e4c2:	2100      	movs	r1, #0
1000e4c4:	482d      	ldr	r0, [pc, #180]	; (1000e57c <ble_connected_state_handler+0x214>)
1000e4c6:	4b2f      	ldr	r3, [pc, #188]	; (1000e584 <ble_connected_state_handler+0x21c>)
1000e4c8:	4798      	blx	r3
1000e4ca:	e042      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e4cc:	4b32      	ldr	r3, [pc, #200]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e4ce:	4698      	mov	r8, r3
1000e4d0:	017c      	lsls	r4, r7, #5
1000e4d2:	1be3      	subs	r3, r4, r7
1000e4d4:	009b      	lsls	r3, r3, #2
1000e4d6:	4443      	add	r3, r8
1000e4d8:	220a      	movs	r2, #10
1000e4da:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e4dc:	3a03      	subs	r2, #3
1000e4de:	2100      	movs	r1, #0
1000e4e0:	4826      	ldr	r0, [pc, #152]	; (1000e57c <ble_connected_state_handler+0x214>)
1000e4e2:	4b28      	ldr	r3, [pc, #160]	; (1000e584 <ble_connected_state_handler+0x21c>)
1000e4e4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e4e6:	1be4      	subs	r4, r4, r7
1000e4e8:	00a4      	lsls	r4, r4, #2
1000e4ea:	4444      	add	r4, r8
1000e4ec:	7ca3      	ldrb	r3, [r4, #18]
1000e4ee:	2b0a      	cmp	r3, #10
1000e4f0:	d12f      	bne.n	1000e552 <ble_connected_state_handler+0x1ea>
1000e4f2:	e00d      	b.n	1000e510 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e4f4:	481a      	ldr	r0, [pc, #104]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e4f6:	4b1b      	ldr	r3, [pc, #108]	; (1000e564 <ble_connected_state_handler+0x1fc>)
1000e4f8:	4798      	blx	r3
1000e4fa:	4b28      	ldr	r3, [pc, #160]	; (1000e59c <ble_connected_state_handler+0x234>)
1000e4fc:	7819      	ldrb	r1, [r3, #0]
1000e4fe:	b2c9      	uxtb	r1, r1
1000e500:	4827      	ldr	r0, [pc, #156]	; (1000e5a0 <ble_connected_state_handler+0x238>)
1000e502:	4b1a      	ldr	r3, [pc, #104]	; (1000e56c <ble_connected_state_handler+0x204>)
1000e504:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e506:	8928      	ldrh	r0, [r5, #8]
1000e508:	2113      	movs	r1, #19
1000e50a:	4b26      	ldr	r3, [pc, #152]	; (1000e5a4 <ble_connected_state_handler+0x23c>)
1000e50c:	4798      	blx	r3
1000e50e:	e020      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e510:	8928      	ldrh	r0, [r5, #8]
1000e512:	4b25      	ldr	r3, [pc, #148]	; (1000e5a8 <ble_connected_state_handler+0x240>)
1000e514:	4798      	blx	r3
1000e516:	e01c      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e518:	4811      	ldr	r0, [pc, #68]	; (1000e560 <ble_connected_state_handler+0x1f8>)
1000e51a:	4b12      	ldr	r3, [pc, #72]	; (1000e564 <ble_connected_state_handler+0x1fc>)
1000e51c:	4798      	blx	r3
1000e51e:	7aa9      	ldrb	r1, [r5, #10]
1000e520:	4822      	ldr	r0, [pc, #136]	; (1000e5ac <ble_connected_state_handler+0x244>)
1000e522:	4b12      	ldr	r3, [pc, #72]	; (1000e56c <ble_connected_state_handler+0x204>)
1000e524:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e526:	2600      	movs	r6, #0
1000e528:	e013      	b.n	1000e552 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e52a:	4b1c      	ldr	r3, [pc, #112]	; (1000e59c <ble_connected_state_handler+0x234>)
1000e52c:	781b      	ldrb	r3, [r3, #0]
1000e52e:	b2db      	uxtb	r3, r3
1000e530:	2b04      	cmp	r3, #4
1000e532:	d8df      	bhi.n	1000e4f4 <ble_connected_state_handler+0x18c>
1000e534:	4b18      	ldr	r3, [pc, #96]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e536:	4699      	mov	r9, r3
1000e538:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e53a:	4b11      	ldr	r3, [pc, #68]	; (1000e580 <ble_connected_state_handler+0x218>)
1000e53c:	469b      	mov	fp, r3
1000e53e:	e773      	b.n	1000e428 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e540:	235e      	movs	r3, #94	; 0x5e
1000e542:	4a15      	ldr	r2, [pc, #84]	; (1000e598 <ble_connected_state_handler+0x230>)
1000e544:	5cd3      	ldrb	r3, [r2, r3]
1000e546:	2b00      	cmp	r3, #0
1000e548:	d08c      	beq.n	1000e464 <ble_connected_state_handler+0xfc>
1000e54a:	4a19      	ldr	r2, [pc, #100]	; (1000e5b0 <ble_connected_state_handler+0x248>)
1000e54c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e54e:	2701      	movs	r7, #1
1000e550:	e783      	b.n	1000e45a <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e552:	0030      	movs	r0, r6
1000e554:	b01a      	add	sp, #104	; 0x68
1000e556:	bc1c      	pop	{r2, r3, r4}
1000e558:	4690      	mov	r8, r2
1000e55a:	4699      	mov	r9, r3
1000e55c:	46a3      	mov	fp, r4
1000e55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e560:	10015e2c 	.word	0x10015e2c
1000e564:	10014c6d 	.word	0x10014c6d
1000e568:	10017820 	.word	0x10017820
1000e56c:	10014b4d 	.word	0x10014b4d
1000e570:	10017864 	.word	0x10017864
1000e574:	10019ed4 	.word	0x10019ed4
1000e578:	100149f3 	.word	0x100149f3
1000e57c:	10018798 	.word	0x10018798
1000e580:	100149d5 	.word	0x100149d5
1000e584:	10014a05 	.word	0x10014a05
1000e588:	10019c6e 	.word	0x10019c6e
1000e58c:	100105dd 	.word	0x100105dd
1000e590:	1001787c 	.word	0x1001787c
1000e594:	100178a0 	.word	0x100178a0
1000e598:	10019c28 	.word	0x10019c28
1000e59c:	10019e94 	.word	0x10019e94
1000e5a0:	100178c4 	.word	0x100178c4
1000e5a4:	100105b1 	.word	0x100105b1
1000e5a8:	1000e321 	.word	0x1000e321
1000e5ac:	10017900 	.word	0x10017900
1000e5b0:	10019d02 	.word	0x10019d02

1000e5b4 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5b6:	4647      	mov	r7, r8
1000e5b8:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e5ba:	7803      	ldrb	r3, [r0, #0]
1000e5bc:	2b00      	cmp	r3, #0
1000e5be:	d152      	bne.n	1000e666 <ble_resolv_rand_addr_handler+0xb2>
1000e5c0:	4d3e      	ldr	r5, [pc, #248]	; (1000e6bc <ble_resolv_rand_addr_handler+0x108>)
1000e5c2:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e5c4:	1c46      	adds	r6, r0, #1
1000e5c6:	4f3e      	ldr	r7, [pc, #248]	; (1000e6c0 <ble_resolv_rand_addr_handler+0x10c>)
1000e5c8:	2210      	movs	r2, #16
1000e5ca:	0029      	movs	r1, r5
1000e5cc:	0030      	movs	r0, r6
1000e5ce:	47b8      	blx	r7
1000e5d0:	2800      	cmp	r0, #0
1000e5d2:	d031      	beq.n	1000e638 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5d4:	3401      	adds	r4, #1
1000e5d6:	b2e4      	uxtb	r4, r4
1000e5d8:	357c      	adds	r5, #124	; 0x7c
1000e5da:	2c05      	cmp	r4, #5
1000e5dc:	d1f4      	bne.n	1000e5c8 <ble_resolv_rand_addr_handler+0x14>
1000e5de:	e042      	b.n	1000e666 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e5e0:	001d      	movs	r5, r3
1000e5e2:	7811      	ldrb	r1, [r2, #0]
1000e5e4:	2900      	cmp	r1, #0
1000e5e6:	d11b      	bne.n	1000e620 <ble_resolv_rand_addr_handler+0x6c>
1000e5e8:	e001      	b.n	1000e5ee <ble_resolv_rand_addr_handler+0x3a>
1000e5ea:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5ec:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e5ee:	4b35      	ldr	r3, [pc, #212]	; (1000e6c4 <ble_resolv_rand_addr_handler+0x110>)
1000e5f0:	4698      	mov	r8, r3
1000e5f2:	016e      	lsls	r6, r5, #5
1000e5f4:	1b77      	subs	r7, r6, r5
1000e5f6:	00bf      	lsls	r7, r7, #2
1000e5f8:	4447      	add	r7, r8
1000e5fa:	2212      	movs	r2, #18
1000e5fc:	4932      	ldr	r1, [pc, #200]	; (1000e6c8 <ble_resolv_rand_addr_handler+0x114>)
1000e5fe:	0038      	movs	r0, r7
1000e600:	4b32      	ldr	r3, [pc, #200]	; (1000e6cc <ble_resolv_rand_addr_handler+0x118>)
1000e602:	4798      	blx	r3
				ble_device_count++;
1000e604:	4a32      	ldr	r2, [pc, #200]	; (1000e6d0 <ble_resolv_rand_addr_handler+0x11c>)
1000e606:	7813      	ldrb	r3, [r2, #0]
1000e608:	3301      	adds	r3, #1
1000e60a:	b2db      	uxtb	r3, r3
1000e60c:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e60e:	375e      	adds	r7, #94	; 0x5e
1000e610:	2302      	movs	r3, #2
1000e612:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e614:	1b75      	subs	r5, r6, r5
1000e616:	00ad      	lsls	r5, r5, #2
1000e618:	4445      	add	r5, r8
1000e61a:	3308      	adds	r3, #8
1000e61c:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e61e:	e031      	b.n	1000e684 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e620:	3401      	adds	r4, #1
1000e622:	b2e4      	uxtb	r4, r4
1000e624:	3301      	adds	r3, #1
1000e626:	327c      	adds	r2, #124	; 0x7c
1000e628:	2c05      	cmp	r4, #5
1000e62a:	d1d9      	bne.n	1000e5e0 <ble_resolv_rand_addr_handler+0x2c>
1000e62c:	e03a      	b.n	1000e6a4 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e62e:	4b26      	ldr	r3, [pc, #152]	; (1000e6c8 <ble_resolv_rand_addr_handler+0x114>)
1000e630:	8918      	ldrh	r0, [r3, #8]
1000e632:	4b28      	ldr	r3, [pc, #160]	; (1000e6d4 <ble_resolv_rand_addr_handler+0x120>)
1000e634:	4798      	blx	r3
1000e636:	e03c      	b.n	1000e6b2 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e638:	4827      	ldr	r0, [pc, #156]	; (1000e6d8 <ble_resolv_rand_addr_handler+0x124>)
1000e63a:	4b28      	ldr	r3, [pc, #160]	; (1000e6dc <ble_resolv_rand_addr_handler+0x128>)
1000e63c:	4798      	blx	r3
1000e63e:	4828      	ldr	r0, [pc, #160]	; (1000e6e0 <ble_resolv_rand_addr_handler+0x12c>)
1000e640:	4b28      	ldr	r3, [pc, #160]	; (1000e6e4 <ble_resolv_rand_addr_handler+0x130>)
1000e642:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e644:	481f      	ldr	r0, [pc, #124]	; (1000e6c4 <ble_resolv_rand_addr_handler+0x110>)
1000e646:	0163      	lsls	r3, r4, #5
1000e648:	1b1a      	subs	r2, r3, r4
1000e64a:	0092      	lsls	r2, r2, #2
1000e64c:	1882      	adds	r2, r0, r2
1000e64e:	0011      	movs	r1, r2
1000e650:	315e      	adds	r1, #94	; 0x5e
1000e652:	2502      	movs	r5, #2
1000e654:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e656:	210a      	movs	r1, #10
1000e658:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e65a:	0010      	movs	r0, r2
1000e65c:	2212      	movs	r2, #18
1000e65e:	491a      	ldr	r1, [pc, #104]	; (1000e6c8 <ble_resolv_rand_addr_handler+0x114>)
1000e660:	4b1a      	ldr	r3, [pc, #104]	; (1000e6cc <ble_resolv_rand_addr_handler+0x118>)
1000e662:	4798      	blx	r3
1000e664:	e00e      	b.n	1000e684 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000e666:	481c      	ldr	r0, [pc, #112]	; (1000e6d8 <ble_resolv_rand_addr_handler+0x124>)
1000e668:	4b1c      	ldr	r3, [pc, #112]	; (1000e6dc <ble_resolv_rand_addr_handler+0x128>)
1000e66a:	4798      	blx	r3
1000e66c:	481e      	ldr	r0, [pc, #120]	; (1000e6e8 <ble_resolv_rand_addr_handler+0x134>)
1000e66e:	4b1d      	ldr	r3, [pc, #116]	; (1000e6e4 <ble_resolv_rand_addr_handler+0x130>)
1000e670:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e672:	235e      	movs	r3, #94	; 0x5e
1000e674:	4a13      	ldr	r2, [pc, #76]	; (1000e6c4 <ble_resolv_rand_addr_handler+0x110>)
1000e676:	5cd3      	ldrb	r3, [r2, r3]
1000e678:	2b00      	cmp	r3, #0
1000e67a:	d0b6      	beq.n	1000e5ea <ble_resolv_rand_addr_handler+0x36>
1000e67c:	4a1b      	ldr	r2, [pc, #108]	; (1000e6ec <ble_resolv_rand_addr_handler+0x138>)
1000e67e:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e680:	2401      	movs	r4, #1
1000e682:	e7ad      	b.n	1000e5e0 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e684:	4814      	ldr	r0, [pc, #80]	; (1000e6d8 <ble_resolv_rand_addr_handler+0x124>)
1000e686:	4b15      	ldr	r3, [pc, #84]	; (1000e6dc <ble_resolv_rand_addr_handler+0x128>)
1000e688:	4798      	blx	r3
1000e68a:	0021      	movs	r1, r4
1000e68c:	4818      	ldr	r0, [pc, #96]	; (1000e6f0 <ble_resolv_rand_addr_handler+0x13c>)
1000e68e:	4b15      	ldr	r3, [pc, #84]	; (1000e6e4 <ble_resolv_rand_addr_handler+0x130>)
1000e690:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e692:	0163      	lsls	r3, r4, #5
1000e694:	1b1c      	subs	r4, r3, r4
1000e696:	00a4      	lsls	r4, r4, #2
1000e698:	4b0a      	ldr	r3, [pc, #40]	; (1000e6c4 <ble_resolv_rand_addr_handler+0x110>)
1000e69a:	191c      	adds	r4, r3, r4
1000e69c:	7ca3      	ldrb	r3, [r4, #18]
1000e69e:	2b0a      	cmp	r3, #10
1000e6a0:	d107      	bne.n	1000e6b2 <ble_resolv_rand_addr_handler+0xfe>
1000e6a2:	e7c4      	b.n	1000e62e <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e6a4:	480c      	ldr	r0, [pc, #48]	; (1000e6d8 <ble_resolv_rand_addr_handler+0x124>)
1000e6a6:	4b0d      	ldr	r3, [pc, #52]	; (1000e6dc <ble_resolv_rand_addr_handler+0x128>)
1000e6a8:	4798      	blx	r3
1000e6aa:	2105      	movs	r1, #5
1000e6ac:	4810      	ldr	r0, [pc, #64]	; (1000e6f0 <ble_resolv_rand_addr_handler+0x13c>)
1000e6ae:	4b0d      	ldr	r3, [pc, #52]	; (1000e6e4 <ble_resolv_rand_addr_handler+0x130>)
1000e6b0:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e6b2:	2000      	movs	r0, #0
1000e6b4:	bc04      	pop	{r2}
1000e6b6:	4690      	mov	r8, r2
1000e6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e6ba:	46c0      	nop			; (mov r8, r8)
1000e6bc:	10019c6e 	.word	0x10019c6e
1000e6c0:	100149d5 	.word	0x100149d5
1000e6c4:	10019c28 	.word	0x10019c28
1000e6c8:	10019ed4 	.word	0x10019ed4
1000e6cc:	100149f3 	.word	0x100149f3
1000e6d0:	10019e94 	.word	0x10019e94
1000e6d4:	1000e321 	.word	0x1000e321
1000e6d8:	10015e2c 	.word	0x10015e2c
1000e6dc:	10014c6d 	.word	0x10014c6d
1000e6e0:	10017928 	.word	0x10017928
1000e6e4:	10014b4d 	.word	0x10014b4d
1000e6e8:	10017940 	.word	0x10017940
1000e6ec:	10019d02 	.word	0x10019d02
1000e6f0:	1001795c 	.word	0x1001795c

1000e6f4 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e6f6:	0004      	movs	r4, r0
1000e6f8:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000e6fa:	4848      	ldr	r0, [pc, #288]	; (1000e81c <ble_event_manager+0x128>)
1000e6fc:	4b48      	ldr	r3, [pc, #288]	; (1000e820 <ble_event_manager+0x12c>)
1000e6fe:	4798      	blx	r3
1000e700:	0021      	movs	r1, r4
1000e702:	4848      	ldr	r0, [pc, #288]	; (1000e824 <ble_event_manager+0x130>)
1000e704:	4b48      	ldr	r3, [pc, #288]	; (1000e828 <ble_event_manager+0x134>)
1000e706:	4798      	blx	r3
	switch(events)
1000e708:	2c3b      	cmp	r4, #59	; 0x3b
1000e70a:	d879      	bhi.n	1000e800 <ble_event_manager+0x10c>
1000e70c:	00a3      	lsls	r3, r4, #2
1000e70e:	4a47      	ldr	r2, [pc, #284]	; (1000e82c <ble_event_manager+0x138>)
1000e710:	58d3      	ldr	r3, [r2, r3]
1000e712:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e714:	00a4      	lsls	r4, r4, #2
1000e716:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e718:	4f45      	ldr	r7, [pc, #276]	; (1000e830 <ble_event_manager+0x13c>)
1000e71a:	59bb      	ldr	r3, [r7, r6]
1000e71c:	2b00      	cmp	r3, #0
1000e71e:	d004      	beq.n	1000e72a <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e720:	591b      	ldr	r3, [r3, r4]
1000e722:	2b00      	cmp	r3, #0
1000e724:	d001      	beq.n	1000e72a <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000e726:	0028      	movs	r0, r5
1000e728:	4798      	blx	r3
1000e72a:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e72c:	2e14      	cmp	r6, #20
1000e72e:	d1f4      	bne.n	1000e71a <ble_event_manager+0x26>
1000e730:	e072      	b.n	1000e818 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e732:	3c13      	subs	r4, #19
1000e734:	b2e4      	uxtb	r4, r4
1000e736:	00a4      	lsls	r4, r4, #2
1000e738:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e73a:	4f3e      	ldr	r7, [pc, #248]	; (1000e834 <ble_event_manager+0x140>)
1000e73c:	59bb      	ldr	r3, [r7, r6]
1000e73e:	2b00      	cmp	r3, #0
1000e740:	d004      	beq.n	1000e74c <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e742:	591b      	ldr	r3, [r3, r4]
1000e744:	2b00      	cmp	r3, #0
1000e746:	d001      	beq.n	1000e74c <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000e748:	0028      	movs	r0, r5
1000e74a:	4798      	blx	r3
1000e74c:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e74e:	2e14      	cmp	r6, #20
1000e750:	d1f4      	bne.n	1000e73c <ble_event_manager+0x48>
1000e752:	e061      	b.n	1000e818 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000e754:	3c1d      	subs	r4, #29
1000e756:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000e758:	4830      	ldr	r0, [pc, #192]	; (1000e81c <ble_event_manager+0x128>)
1000e75a:	4b31      	ldr	r3, [pc, #196]	; (1000e820 <ble_event_manager+0x12c>)
1000e75c:	4798      	blx	r3
1000e75e:	0021      	movs	r1, r4
1000e760:	4835      	ldr	r0, [pc, #212]	; (1000e838 <ble_event_manager+0x144>)
1000e762:	4b31      	ldr	r3, [pc, #196]	; (1000e828 <ble_event_manager+0x134>)
1000e764:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e766:	00a4      	lsls	r4, r4, #2
1000e768:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e76a:	4f34      	ldr	r7, [pc, #208]	; (1000e83c <ble_event_manager+0x148>)
1000e76c:	59bb      	ldr	r3, [r7, r6]
1000e76e:	2b00      	cmp	r3, #0
1000e770:	d004      	beq.n	1000e77c <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e772:	591b      	ldr	r3, [r3, r4]
1000e774:	2b00      	cmp	r3, #0
1000e776:	d001      	beq.n	1000e77c <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000e778:	0028      	movs	r0, r5
1000e77a:	4798      	blx	r3
1000e77c:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e77e:	2e14      	cmp	r6, #20
1000e780:	d1f4      	bne.n	1000e76c <ble_event_manager+0x78>
1000e782:	e049      	b.n	1000e818 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e784:	3c27      	subs	r4, #39	; 0x27
1000e786:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e788:	4b2d      	ldr	r3, [pc, #180]	; (1000e840 <ble_event_manager+0x14c>)
1000e78a:	681b      	ldr	r3, [r3, #0]
1000e78c:	2b00      	cmp	r3, #0
1000e78e:	d043      	beq.n	1000e818 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e790:	00a4      	lsls	r4, r4, #2
1000e792:	58e3      	ldr	r3, [r4, r3]
1000e794:	2b00      	cmp	r3, #0
1000e796:	d03f      	beq.n	1000e818 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e798:	0028      	movs	r0, r5
1000e79a:	4798      	blx	r3
1000e79c:	e03c      	b.n	1000e818 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e79e:	3c2d      	subs	r4, #45	; 0x2d
1000e7a0:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e7a2:	4b28      	ldr	r3, [pc, #160]	; (1000e844 <ble_event_manager+0x150>)
1000e7a4:	681b      	ldr	r3, [r3, #0]
1000e7a6:	2b00      	cmp	r3, #0
1000e7a8:	d036      	beq.n	1000e818 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7aa:	00a4      	lsls	r4, r4, #2
1000e7ac:	58e3      	ldr	r3, [r4, r3]
1000e7ae:	2b00      	cmp	r3, #0
1000e7b0:	d032      	beq.n	1000e818 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e7b2:	0028      	movs	r0, r5
1000e7b4:	4798      	blx	r3
1000e7b6:	e02f      	b.n	1000e818 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7b8:	3c36      	subs	r4, #54	; 0x36
1000e7ba:	b2e4      	uxtb	r4, r4
1000e7bc:	00a4      	lsls	r4, r4, #2
1000e7be:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e7c0:	4f21      	ldr	r7, [pc, #132]	; (1000e848 <ble_event_manager+0x154>)
1000e7c2:	59bb      	ldr	r3, [r7, r6]
1000e7c4:	2b00      	cmp	r3, #0
1000e7c6:	d004      	beq.n	1000e7d2 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7c8:	591b      	ldr	r3, [r3, r4]
1000e7ca:	2b00      	cmp	r3, #0
1000e7cc:	d001      	beq.n	1000e7d2 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000e7ce:	0028      	movs	r0, r5
1000e7d0:	4798      	blx	r3
1000e7d2:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e7d4:	2e14      	cmp	r6, #20
1000e7d6:	d1f4      	bne.n	1000e7c2 <ble_event_manager+0xce>
1000e7d8:	e01e      	b.n	1000e818 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e7da:	3c38      	subs	r4, #56	; 0x38
1000e7dc:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e7de:	4b1b      	ldr	r3, [pc, #108]	; (1000e84c <ble_event_manager+0x158>)
1000e7e0:	681b      	ldr	r3, [r3, #0]
1000e7e2:	2b00      	cmp	r3, #0
1000e7e4:	d018      	beq.n	1000e818 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e7e6:	00a4      	lsls	r4, r4, #2
1000e7e8:	58e3      	ldr	r3, [r4, r3]
1000e7ea:	2b00      	cmp	r3, #0
1000e7ec:	d014      	beq.n	1000e818 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e7ee:	0028      	movs	r0, r5
1000e7f0:	4798      	blx	r3
1000e7f2:	e011      	b.n	1000e818 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e7f4:	4b16      	ldr	r3, [pc, #88]	; (1000e850 <ble_event_manager+0x15c>)
1000e7f6:	681b      	ldr	r3, [r3, #0]
1000e7f8:	2b00      	cmp	r3, #0
1000e7fa:	d00d      	beq.n	1000e818 <ble_event_manager+0x124>
			ble_user_event_cb();
1000e7fc:	4798      	blx	r3
1000e7fe:	e00b      	b.n	1000e818 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000e800:	4e06      	ldr	r6, [pc, #24]	; (1000e81c <ble_event_manager+0x128>)
1000e802:	0030      	movs	r0, r6
1000e804:	4d06      	ldr	r5, [pc, #24]	; (1000e820 <ble_event_manager+0x12c>)
1000e806:	47a8      	blx	r5
1000e808:	0021      	movs	r1, r4
1000e80a:	4812      	ldr	r0, [pc, #72]	; (1000e854 <ble_event_manager+0x160>)
1000e80c:	4b06      	ldr	r3, [pc, #24]	; (1000e828 <ble_event_manager+0x134>)
1000e80e:	4798      	blx	r3
		DBG_LOG("\r\n");
1000e810:	0030      	movs	r0, r6
1000e812:	47a8      	blx	r5
1000e814:	0030      	movs	r0, r6
1000e816:	47a8      	blx	r5
	}
	break;		
	}
}
1000e818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e81a:	46c0      	nop			; (mov r8, r8)
1000e81c:	10015e2c 	.word	0x10015e2c
1000e820:	10014c6d 	.word	0x10014c6d
1000e824:	1001796c 	.word	0x1001796c
1000e828:	10014b4d 	.word	0x10014b4d
1000e82c:	10016ecc 	.word	0x10016ecc
1000e830:	10019eac 	.word	0x10019eac
1000e834:	10019ec0 	.word	0x10019ec0
1000e838:	1001797c 	.word	0x1001797c
1000e83c:	10019c14 	.word	0x10019c14
1000e840:	10019f08 	.word	0x10019f08
1000e844:	10019c10 	.word	0x10019c10
1000e848:	10019e98 	.word	0x10019e98
1000e84c:	1001a44c 	.word	0x1001a44c
1000e850:	10018790 	.word	0x10018790
1000e854:	10017994 	.word	0x10017994

1000e858 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e858:	b570      	push	{r4, r5, r6, lr}
1000e85a:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e85c:	4b0d      	ldr	r3, [pc, #52]	; (1000e894 <ble_event_task+0x3c>)
1000e85e:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e860:	2b01      	cmp	r3, #1
1000e862:	d101      	bne.n	1000e868 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e864:	4b0c      	ldr	r3, [pc, #48]	; (1000e898 <ble_event_task+0x40>)
1000e866:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e868:	0022      	movs	r2, r4
1000e86a:	490c      	ldr	r1, [pc, #48]	; (1000e89c <ble_event_task+0x44>)
1000e86c:	480c      	ldr	r0, [pc, #48]	; (1000e8a0 <ble_event_task+0x48>)
1000e86e:	4b0d      	ldr	r3, [pc, #52]	; (1000e8a4 <ble_event_task+0x4c>)
1000e870:	4798      	blx	r3
1000e872:	0004      	movs	r4, r0
1000e874:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e876:	4b07      	ldr	r3, [pc, #28]	; (1000e894 <ble_event_task+0x3c>)
1000e878:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e87a:	2b01      	cmp	r3, #1
1000e87c:	d101      	bne.n	1000e882 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e87e:	4b0a      	ldr	r3, [pc, #40]	; (1000e8a8 <ble_event_task+0x50>)
1000e880:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e882:	2d00      	cmp	r5, #0
1000e884:	d104      	bne.n	1000e890 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e886:	4b06      	ldr	r3, [pc, #24]	; (1000e8a0 <ble_event_task+0x48>)
1000e888:	7818      	ldrb	r0, [r3, #0]
1000e88a:	4904      	ldr	r1, [pc, #16]	; (1000e89c <ble_event_task+0x44>)
1000e88c:	4b07      	ldr	r3, [pc, #28]	; (1000e8ac <ble_event_task+0x54>)
1000e88e:	4798      	blx	r3
    }
    
    return status;
}
1000e890:	0020      	movs	r0, r4
1000e892:	bd70      	pop	{r4, r5, r6, pc}
1000e894:	1001879f 	.word	0x1001879f
1000e898:	1000f269 	.word	0x1000f269
1000e89c:	1001a240 	.word	0x1001a240
1000e8a0:	10019f04 	.word	0x10019f04
1000e8a4:	1000f965 	.word	0x1000f965
1000e8a8:	1000f241 	.word	0x1000f241
1000e8ac:	1000e6f5 	.word	0x1000e6f5

1000e8b0 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e8b0:	b510      	push	{r4, lr}
1000e8b2:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e8b4:	ac08      	add	r4, sp, #32
1000e8b6:	2203      	movs	r2, #3
1000e8b8:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e8ba:	2302      	movs	r3, #2
1000e8bc:	70a3      	strb	r3, [r4, #2]
1000e8be:	3316      	adds	r3, #22
1000e8c0:	70e3      	strb	r3, [r4, #3]
1000e8c2:	7122      	strb	r2, [r4, #4]
1000e8c4:	7163      	strb	r3, [r4, #5]
1000e8c6:	3201      	adds	r2, #1
1000e8c8:	71a2      	strb	r2, [r4, #6]
1000e8ca:	71e3      	strb	r3, [r4, #7]
1000e8cc:	320b      	adds	r2, #11
1000e8ce:	7222      	strb	r2, [r4, #8]
1000e8d0:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e8d2:	3b0f      	subs	r3, #15
1000e8d4:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e8d6:	3a05      	subs	r2, #5
1000e8d8:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e8da:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e8dc:	aa0b      	add	r2, sp, #44	; 0x2c
1000e8de:	4b16      	ldr	r3, [pc, #88]	; (1000e938 <ble_advertisement_data_set+0x88>)
1000e8e0:	cb03      	ldmia	r3!, {r0, r1}
1000e8e2:	c203      	stmia	r2!, {r0, r1}
1000e8e4:	781b      	ldrb	r3, [r3, #0]
1000e8e6:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000e8e8:	2300      	movs	r3, #0
1000e8ea:	466a      	mov	r2, sp
1000e8ec:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000e8ee:	3315      	adds	r3, #21
1000e8f0:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000e8f2:	4812      	ldr	r0, [pc, #72]	; (1000e93c <ble_advertisement_data_set+0x8c>)
1000e8f4:	4b12      	ldr	r3, [pc, #72]	; (1000e940 <ble_advertisement_data_set+0x90>)
1000e8f6:	4798      	blx	r3
1000e8f8:	4812      	ldr	r0, [pc, #72]	; (1000e944 <ble_advertisement_data_set+0x94>)
1000e8fa:	4b13      	ldr	r3, [pc, #76]	; (1000e948 <ble_advertisement_data_set+0x98>)
1000e8fc:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e8fe:	2307      	movs	r3, #7
1000e900:	466a      	mov	r2, sp
1000e902:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e904:	33f8      	adds	r3, #248	; 0xf8
1000e906:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e908:	2206      	movs	r2, #6
1000e90a:	4910      	ldr	r1, [pc, #64]	; (1000e94c <ble_advertisement_data_set+0x9c>)
1000e90c:	466b      	mov	r3, sp
1000e90e:	1c98      	adds	r0, r3, #2
1000e910:	4b0f      	ldr	r3, [pc, #60]	; (1000e950 <ble_advertisement_data_set+0xa0>)
1000e912:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e914:	2308      	movs	r3, #8
1000e916:	466a      	mov	r2, sp
1000e918:	2115      	movs	r1, #21
1000e91a:	0020      	movs	r0, r4
1000e91c:	4c0d      	ldr	r4, [pc, #52]	; (1000e954 <ble_advertisement_data_set+0xa4>)
1000e91e:	47a0      	blx	r4
1000e920:	2800      	cmp	r0, #0
1000e922:	d005      	beq.n	1000e930 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000e924:	4805      	ldr	r0, [pc, #20]	; (1000e93c <ble_advertisement_data_set+0x8c>)
1000e926:	4b06      	ldr	r3, [pc, #24]	; (1000e940 <ble_advertisement_data_set+0x90>)
1000e928:	4798      	blx	r3
1000e92a:	480b      	ldr	r0, [pc, #44]	; (1000e958 <ble_advertisement_data_set+0xa8>)
1000e92c:	4b06      	ldr	r3, [pc, #24]	; (1000e948 <ble_advertisement_data_set+0x98>)
1000e92e:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000e930:	2000      	movs	r0, #0
1000e932:	b010      	add	sp, #64	; 0x40
1000e934:	bd10      	pop	{r4, pc}
1000e936:	46c0      	nop			; (mov r8, r8)
1000e938:	100176b0 	.word	0x100176b0
1000e93c:	10015e2c 	.word	0x10015e2c
1000e940:	10014c6d 	.word	0x10014c6d
1000e944:	100179b4 	.word	0x100179b4
1000e948:	10014b4d 	.word	0x10014b4d
1000e94c:	100179e8 	.word	0x100179e8
1000e950:	100149f3 	.word	0x100149f3
1000e954:	100103c5 	.word	0x100103c5
1000e958:	100179f0 	.word	0x100179f0

1000e95c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000e95c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000e95e:	4b0e      	ldr	r3, [pc, #56]	; (1000e998 <uart_read_complete_callback+0x3c>)
1000e960:	781b      	ldrb	r3, [r3, #0]
1000e962:	2b01      	cmp	r3, #1
1000e964:	d10b      	bne.n	1000e97e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000e966:	2202      	movs	r2, #2
1000e968:	4b0b      	ldr	r3, [pc, #44]	; (1000e998 <uart_read_complete_callback+0x3c>)
1000e96a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000e96c:	4b0b      	ldr	r3, [pc, #44]	; (1000e99c <uart_read_complete_callback+0x40>)
1000e96e:	681b      	ldr	r3, [r3, #0]
1000e970:	2b00      	cmp	r3, #0
1000e972:	d110      	bne.n	1000e996 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000e974:	2102      	movs	r1, #2
1000e976:	480a      	ldr	r0, [pc, #40]	; (1000e9a0 <uart_read_complete_callback+0x44>)
1000e978:	4b0a      	ldr	r3, [pc, #40]	; (1000e9a4 <uart_read_complete_callback+0x48>)
1000e97a:	4798      	blx	r3
1000e97c:	e00b      	b.n	1000e996 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000e97e:	4b07      	ldr	r3, [pc, #28]	; (1000e99c <uart_read_complete_callback+0x40>)
1000e980:	681b      	ldr	r3, [r3, #0]
1000e982:	2b00      	cmp	r3, #0
1000e984:	d007      	beq.n	1000e996 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000e986:	4c08      	ldr	r4, [pc, #32]	; (1000e9a8 <uart_read_complete_callback+0x4c>)
1000e988:	7820      	ldrb	r0, [r4, #0]
1000e98a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e98c:	2201      	movs	r2, #1
1000e98e:	0021      	movs	r1, r4
1000e990:	4803      	ldr	r0, [pc, #12]	; (1000e9a0 <uart_read_complete_callback+0x44>)
1000e992:	4b06      	ldr	r3, [pc, #24]	; (1000e9ac <uart_read_complete_callback+0x50>)
1000e994:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000e996:	bd10      	pop	{r4, pc}
1000e998:	100197a4 	.word	0x100197a4
1000e99c:	100197ac 	.word	0x100197ac
1000e9a0:	1001a450 	.word	0x1001a450
1000e9a4:	1000d34d 	.word	0x1000d34d
1000e9a8:	100197a8 	.word	0x100197a8
1000e9ac:	1000d2f1 	.word	0x1000d2f1

1000e9b0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000e9b0:	b570      	push	{r4, r5, r6, lr}
1000e9b2:	0006      	movs	r6, r0
1000e9b4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e9b6:	4c03      	ldr	r4, [pc, #12]	; (1000e9c4 <usart_serial_getchar+0x14>)
1000e9b8:	0029      	movs	r1, r5
1000e9ba:	0030      	movs	r0, r6
1000e9bc:	47a0      	blx	r4
1000e9be:	2800      	cmp	r0, #0
1000e9c0:	d1fa      	bne.n	1000e9b8 <usart_serial_getchar+0x8>
}
1000e9c2:	bd70      	pop	{r4, r5, r6, pc}
1000e9c4:	1000d2dd 	.word	0x1000d2dd

1000e9c8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e9c8:	b570      	push	{r4, r5, r6, lr}
1000e9ca:	0006      	movs	r6, r0
1000e9cc:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e9ce:	4c03      	ldr	r4, [pc, #12]	; (1000e9dc <usart_serial_putchar+0x14>)
1000e9d0:	0029      	movs	r1, r5
1000e9d2:	0030      	movs	r0, r6
1000e9d4:	47a0      	blx	r4
1000e9d6:	2800      	cmp	r0, #0
1000e9d8:	d1fa      	bne.n	1000e9d0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e9da:	bd70      	pop	{r4, r5, r6, pc}
1000e9dc:	1000d2cd 	.word	0x1000d2cd

1000e9e0 <serial_console_init>:

void serial_console_init(void)
{
1000e9e0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e9e2:	2100      	movs	r1, #0
1000e9e4:	2000      	movs	r0, #0
1000e9e6:	4b19      	ldr	r3, [pc, #100]	; (1000ea4c <serial_console_init+0x6c>)
1000e9e8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e9ea:	4c19      	ldr	r4, [pc, #100]	; (1000ea50 <serial_console_init+0x70>)
1000e9ec:	0020      	movs	r0, r4
1000e9ee:	4b19      	ldr	r3, [pc, #100]	; (1000ea54 <serial_console_init+0x74>)
1000e9f0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e9f2:	23e1      	movs	r3, #225	; 0xe1
1000e9f4:	025b      	lsls	r3, r3, #9
1000e9f6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e9f8:	2302      	movs	r3, #2
1000e9fa:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e9fc:	2203      	movs	r2, #3
1000e9fe:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ea00:	3201      	adds	r2, #1
1000ea02:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ea04:	3201      	adds	r2, #1
1000ea06:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ea08:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ea0a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ea0c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ea0e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ea10:	4d11      	ldr	r5, [pc, #68]	; (1000ea58 <serial_console_init+0x78>)
1000ea12:	4b12      	ldr	r3, [pc, #72]	; (1000ea5c <serial_console_init+0x7c>)
1000ea14:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ea16:	4a12      	ldr	r2, [pc, #72]	; (1000ea60 <serial_console_init+0x80>)
1000ea18:	4b12      	ldr	r3, [pc, #72]	; (1000ea64 <serial_console_init+0x84>)
1000ea1a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ea1c:	4a12      	ldr	r2, [pc, #72]	; (1000ea68 <serial_console_init+0x88>)
1000ea1e:	4b13      	ldr	r3, [pc, #76]	; (1000ea6c <serial_console_init+0x8c>)
1000ea20:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ea22:	0022      	movs	r2, r4
1000ea24:	4912      	ldr	r1, [pc, #72]	; (1000ea70 <serial_console_init+0x90>)
1000ea26:	0028      	movs	r0, r5
1000ea28:	4b12      	ldr	r3, [pc, #72]	; (1000ea74 <serial_console_init+0x94>)
1000ea2a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ea2c:	4e12      	ldr	r6, [pc, #72]	; (1000ea78 <serial_console_init+0x98>)
1000ea2e:	6833      	ldr	r3, [r6, #0]
1000ea30:	6898      	ldr	r0, [r3, #8]
1000ea32:	2100      	movs	r1, #0
1000ea34:	4c11      	ldr	r4, [pc, #68]	; (1000ea7c <serial_console_init+0x9c>)
1000ea36:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ea38:	6833      	ldr	r3, [r6, #0]
1000ea3a:	6858      	ldr	r0, [r3, #4]
1000ea3c:	2100      	movs	r1, #0
1000ea3e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ea40:	2202      	movs	r2, #2
1000ea42:	490f      	ldr	r1, [pc, #60]	; (1000ea80 <serial_console_init+0xa0>)
1000ea44:	0028      	movs	r0, r5
1000ea46:	4b0f      	ldr	r3, [pc, #60]	; (1000ea84 <serial_console_init+0xa4>)
1000ea48:	4798      	blx	r3
}
1000ea4a:	bd70      	pop	{r4, r5, r6, pc}
1000ea4c:	1000c2ed 	.word	0x1000c2ed
1000ea50:	1001a474 	.word	0x1001a474
1000ea54:	1000d0e5 	.word	0x1000d0e5
1000ea58:	1001a450 	.word	0x1001a450
1000ea5c:	10019c0c 	.word	0x10019c0c
1000ea60:	1000e9c9 	.word	0x1000e9c9
1000ea64:	10019c08 	.word	0x10019c08
1000ea68:	1000e9b1 	.word	0x1000e9b1
1000ea6c:	10019c04 	.word	0x10019c04
1000ea70:	40004000 	.word	0x40004000
1000ea74:	1000d111 	.word	0x1000d111
1000ea78:	10017e70 	.word	0x10017e70
1000ea7c:	10014d1d 	.word	0x10014d1d
1000ea80:	1000e95d 	.word	0x1000e95d
1000ea84:	1000d319 	.word	0x1000d319

1000ea88 <_time_start>:

void _time_start(unsigned int sec)
{
1000ea88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea8a:	b083      	sub	sp, #12
1000ea8c:	0005      	movs	r5, r0
	system_clock_get_value();
1000ea8e:	4c0d      	ldr	r4, [pc, #52]	; (1000eac4 <_time_start+0x3c>)
1000ea90:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ea92:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ea94:	4f0c      	ldr	r7, [pc, #48]	; (1000eac8 <_time_start+0x40>)
1000ea96:	47b8      	blx	r7
1000ea98:	4e0c      	ldr	r6, [pc, #48]	; (1000eacc <_time_start+0x44>)
1000ea9a:	4a0d      	ldr	r2, [pc, #52]	; (1000ead0 <_time_start+0x48>)
1000ea9c:	4b0d      	ldr	r3, [pc, #52]	; (1000ead4 <_time_start+0x4c>)
1000ea9e:	47b0      	blx	r6
1000eaa0:	9000      	str	r0, [sp, #0]
1000eaa2:	9101      	str	r1, [sp, #4]
1000eaa4:	20fa      	movs	r0, #250	; 0xfa
1000eaa6:	0080      	lsls	r0, r0, #2
1000eaa8:	4368      	muls	r0, r5
1000eaaa:	47b8      	blx	r7
1000eaac:	0002      	movs	r2, r0
1000eaae:	000b      	movs	r3, r1
1000eab0:	9800      	ldr	r0, [sp, #0]
1000eab2:	9901      	ldr	r1, [sp, #4]
1000eab4:	47b0      	blx	r6
1000eab6:	4b08      	ldr	r3, [pc, #32]	; (1000ead8 <_time_start+0x50>)
1000eab8:	4798      	blx	r3
1000eaba:	4b08      	ldr	r3, [pc, #32]	; (1000eadc <_time_start+0x54>)
1000eabc:	6018      	str	r0, [r3, #0]
}
1000eabe:	b003      	add	sp, #12
1000eac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eac2:	46c0      	nop			; (mov r8, r8)
1000eac4:	1000c371 	.word	0x1000c371
1000eac8:	100148c9 	.word	0x100148c9
1000eacc:	10013cc1 	.word	0x10013cc1
1000ead0:	19feaec7 	.word	0x19feaec7
1000ead4:	3f09d8ef 	.word	0x3f09d8ef
1000ead8:	100130e1 	.word	0x100130e1
1000eadc:	100197a0 	.word	0x100197a0

1000eae0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000eae0:	4b02      	ldr	r3, [pc, #8]	; (1000eaec <_time_done+0xc>)
1000eae2:	681a      	ldr	r2, [r3, #0]
1000eae4:	1e50      	subs	r0, r2, #1
1000eae6:	6018      	str	r0, [r3, #0]
}
1000eae8:	4770      	bx	lr
1000eaea:	46c0      	nop			; (mov r8, r8)
1000eaec:	100197a0 	.word	0x100197a0

1000eaf0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000eaf0:	b570      	push	{r4, r5, r6, lr}
1000eaf2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000eaf4:	2201      	movs	r2, #1
1000eaf6:	4b11      	ldr	r3, [pc, #68]	; (1000eb3c <getchar_b11_timeout+0x4c>)
1000eaf8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000eafa:	4b11      	ldr	r3, [pc, #68]	; (1000eb40 <getchar_b11_timeout+0x50>)
1000eafc:	681b      	ldr	r3, [r3, #0]
1000eafe:	2b00      	cmp	r3, #0
1000eb00:	d103      	bne.n	1000eb0a <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000eb02:	2102      	movs	r1, #2
1000eb04:	480f      	ldr	r0, [pc, #60]	; (1000eb44 <getchar_b11_timeout+0x54>)
1000eb06:	4b10      	ldr	r3, [pc, #64]	; (1000eb48 <getchar_b11_timeout+0x58>)
1000eb08:	4798      	blx	r3

	_time_start(sec);
1000eb0a:	0020      	movs	r0, r4
1000eb0c:	4b0f      	ldr	r3, [pc, #60]	; (1000eb4c <getchar_b11_timeout+0x5c>)
1000eb0e:	4798      	blx	r3
	
	string_input[0] = 0;
1000eb10:	490f      	ldr	r1, [pc, #60]	; (1000eb50 <getchar_b11_timeout+0x60>)
1000eb12:	2300      	movs	r3, #0
1000eb14:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000eb16:	2201      	movs	r2, #1
1000eb18:	480a      	ldr	r0, [pc, #40]	; (1000eb44 <getchar_b11_timeout+0x54>)
1000eb1a:	4b0e      	ldr	r3, [pc, #56]	; (1000eb54 <getchar_b11_timeout+0x64>)
1000eb1c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000eb1e:	4c07      	ldr	r4, [pc, #28]	; (1000eb3c <getchar_b11_timeout+0x4c>)
1000eb20:	4d0d      	ldr	r5, [pc, #52]	; (1000eb58 <getchar_b11_timeout+0x68>)
1000eb22:	7823      	ldrb	r3, [r4, #0]
1000eb24:	2b02      	cmp	r3, #2
1000eb26:	d002      	beq.n	1000eb2e <getchar_b11_timeout+0x3e>
1000eb28:	47a8      	blx	r5
1000eb2a:	2800      	cmp	r0, #0
1000eb2c:	d1f9      	bne.n	1000eb22 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000eb2e:	2200      	movs	r2, #0
1000eb30:	4b02      	ldr	r3, [pc, #8]	; (1000eb3c <getchar_b11_timeout+0x4c>)
1000eb32:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000eb34:	4b06      	ldr	r3, [pc, #24]	; (1000eb50 <getchar_b11_timeout+0x60>)
1000eb36:	7818      	ldrb	r0, [r3, #0]
}
1000eb38:	bd70      	pop	{r4, r5, r6, pc}
1000eb3a:	46c0      	nop			; (mov r8, r8)
1000eb3c:	100197a4 	.word	0x100197a4
1000eb40:	100197ac 	.word	0x100197ac
1000eb44:	1001a450 	.word	0x1001a450
1000eb48:	1000d32d 	.word	0x1000d32d
1000eb4c:	1000ea89 	.word	0x1000ea89
1000eb50:	100197a8 	.word	0x100197a8
1000eb54:	1000d2f1 	.word	0x1000d2f1
1000eb58:	1000eae1 	.word	0x1000eae1

1000eb5c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000eb5c:	4b02      	ldr	r3, [pc, #8]	; (1000eb68 <platform_event_free+0xc>)
1000eb5e:	681a      	ldr	r2, [r3, #0]
1000eb60:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000eb62:	6018      	str	r0, [r3, #0]
}
1000eb64:	4770      	bx	lr
1000eb66:	46c0      	nop			; (mov r8, r8)
1000eb68:	100197b4 	.word	0x100197b4

1000eb6c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000eb6c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000eb6e:	4b0b      	ldr	r3, [pc, #44]	; (1000eb9c <platform_event_post+0x30>)
1000eb70:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000eb72:	2c00      	cmp	r4, #0
1000eb74:	d011      	beq.n	1000eb9a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000eb76:	6825      	ldr	r5, [r4, #0]
1000eb78:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000eb7a:	2300      	movs	r3, #0
1000eb7c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000eb7e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000eb80:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000eb82:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000eb84:	4b06      	ldr	r3, [pc, #24]	; (1000eba0 <platform_event_post+0x34>)
1000eb86:	681a      	ldr	r2, [r3, #0]
1000eb88:	2a00      	cmp	r2, #0
1000eb8a:	d102      	bne.n	1000eb92 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000eb8c:	601c      	str	r4, [r3, #0]
1000eb8e:	e004      	b.n	1000eb9a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000eb90:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000eb92:	6813      	ldr	r3, [r2, #0]
1000eb94:	2b00      	cmp	r3, #0
1000eb96:	d1fb      	bne.n	1000eb90 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000eb98:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000eb9a:	bd30      	pop	{r4, r5, pc}
1000eb9c:	100197b4 	.word	0x100197b4
1000eba0:	100197b0 	.word	0x100197b0

1000eba4 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000eba4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000eba6:	2300      	movs	r3, #0
1000eba8:	4a06      	ldr	r2, [pc, #24]	; (1000ebc4 <platform_event_init+0x20>)
1000ebaa:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ebac:	4a06      	ldr	r2, [pc, #24]	; (1000ebc8 <platform_event_init+0x24>)
1000ebae:	6013      	str	r3, [r2, #0]
1000ebb0:	4c06      	ldr	r4, [pc, #24]	; (1000ebcc <platform_event_init+0x28>)
1000ebb2:	0026      	movs	r6, r4
1000ebb4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ebb6:	4d06      	ldr	r5, [pc, #24]	; (1000ebd0 <platform_event_init+0x2c>)
1000ebb8:	0020      	movs	r0, r4
1000ebba:	47a8      	blx	r5
1000ebbc:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ebbe:	42b4      	cmp	r4, r6
1000ebc0:	d1fa      	bne.n	1000ebb8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ebc2:	bd70      	pop	{r4, r5, r6, pc}
1000ebc4:	100197b4 	.word	0x100197b4
1000ebc8:	100197b0 	.word	0x100197b0
1000ebcc:	100197b8 	.word	0x100197b8
1000ebd0:	1000eb5d 	.word	0x1000eb5d

1000ebd4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ebd4:	b570      	push	{r4, r5, r6, lr}
1000ebd6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ebd8:	4b13      	ldr	r3, [pc, #76]	; (1000ec28 <at_ke_msg_send+0x54>)
1000ebda:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ebdc:	4b13      	ldr	r3, [pc, #76]	; (1000ec2c <at_ke_msg_send+0x58>)
1000ebde:	681b      	ldr	r3, [r3, #0]
1000ebe0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ebe2:	2c0c      	cmp	r4, #12
1000ebe4:	d01f      	beq.n	1000ec26 <at_ke_msg_send+0x52>
1000ebe6:	3c0c      	subs	r4, #12
1000ebe8:	88e3      	ldrh	r3, [r4, #6]
1000ebea:	2b05      	cmp	r3, #5
1000ebec:	d01b      	beq.n	1000ec26 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ebee:	07eb      	lsls	r3, r5, #31
1000ebf0:	d414      	bmi.n	1000ec1c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ebf2:	4b0f      	ldr	r3, [pc, #60]	; (1000ec30 <at_ke_msg_send+0x5c>)
1000ebf4:	681b      	ldr	r3, [r3, #0]
1000ebf6:	2002      	movs	r0, #2
1000ebf8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ebfa:	4b0e      	ldr	r3, [pc, #56]	; (1000ec34 <at_ke_msg_send+0x60>)
1000ebfc:	681b      	ldr	r3, [r3, #0]
1000ebfe:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ec00:	4c0d      	ldr	r4, [pc, #52]	; (1000ec38 <at_ke_msg_send+0x64>)
1000ec02:	2003      	movs	r0, #3
1000ec04:	6823      	ldr	r3, [r4, #0]
1000ec06:	4798      	blx	r3
1000ec08:	2800      	cmp	r0, #0
1000ec0a:	d1fa      	bne.n	1000ec02 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ec0c:	4b0b      	ldr	r3, [pc, #44]	; (1000ec3c <at_ke_msg_send+0x68>)
1000ec0e:	681b      	ldr	r3, [r3, #0]
1000ec10:	3002      	adds	r0, #2
1000ec12:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ec14:	2201      	movs	r2, #1
1000ec16:	4b0a      	ldr	r3, [pc, #40]	; (1000ec40 <at_ke_msg_send+0x6c>)
1000ec18:	601a      	str	r2, [r3, #0]
1000ec1a:	e004      	b.n	1000ec26 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ec1c:	4b09      	ldr	r3, [pc, #36]	; (1000ec44 <at_ke_msg_send+0x70>)
1000ec1e:	6818      	ldr	r0, [r3, #0]
1000ec20:	4b09      	ldr	r3, [pc, #36]	; (1000ec48 <at_ke_msg_send+0x74>)
1000ec22:	681b      	ldr	r3, [r3, #0]
1000ec24:	4798      	blx	r3
		}
	}
}
1000ec26:	bd70      	pop	{r4, r5, r6, pc}
1000ec28:	4000b1ec 	.word	0x4000b1ec
1000ec2c:	10019860 	.word	0x10019860
1000ec30:	10019858 	.word	0x10019858
1000ec34:	1001986c 	.word	0x1001986c
1000ec38:	10019840 	.word	0x10019840
1000ec3c:	10019848 	.word	0x10019848
1000ec40:	4000b020 	.word	0x4000b020
1000ec44:	1001984c 	.word	0x1001984c
1000ec48:	1001983c 	.word	0x1001983c

1000ec4c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ec4c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ec4e:	4b06      	ldr	r3, [pc, #24]	; (1000ec68 <samb11_plf_resume_callback+0x1c>)
1000ec50:	4a06      	ldr	r2, [pc, #24]	; (1000ec6c <samb11_plf_resume_callback+0x20>)
1000ec52:	6819      	ldr	r1, [r3, #0]
1000ec54:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ec56:	685a      	ldr	r2, [r3, #4]
1000ec58:	4b05      	ldr	r3, [pc, #20]	; (1000ec70 <samb11_plf_resume_callback+0x24>)
1000ec5a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ec5c:	4b05      	ldr	r3, [pc, #20]	; (1000ec74 <samb11_plf_resume_callback+0x28>)
1000ec5e:	681b      	ldr	r3, [r3, #0]
1000ec60:	2b00      	cmp	r3, #0
1000ec62:	d000      	beq.n	1000ec66 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ec64:	4798      	blx	r3
	}
}
1000ec66:	bd10      	pop	{r4, pc}
1000ec68:	1001a49c 	.word	0x1001a49c
1000ec6c:	4000b00c 	.word	0x4000b00c
1000ec70:	4000b010 	.word	0x4000b010
1000ec74:	1001a778 	.word	0x1001a778

1000ec78 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ec78:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ec7a:	2232      	movs	r2, #50	; 0x32
1000ec7c:	2100      	movs	r1, #0
1000ec7e:	480d      	ldr	r0, [pc, #52]	; (1000ecb4 <init_port_list+0x3c>)
1000ec80:	4b0d      	ldr	r3, [pc, #52]	; (1000ecb8 <init_port_list+0x40>)
1000ec82:	4798      	blx	r3
1000ec84:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ec86:	480b      	ldr	r0, [pc, #44]	; (1000ecb4 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ec88:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ec8a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ec8c:	004a      	lsls	r2, r1, #1
1000ec8e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ec90:	1882      	adds	r2, r0, r2
1000ec92:	7853      	ldrb	r3, [r2, #1]
1000ec94:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ec96:	b2db      	uxtb	r3, r3
1000ec98:	43a3      	bics	r3, r4
1000ec9a:	7053      	strb	r3, [r2, #1]
1000ec9c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ec9e:	2919      	cmp	r1, #25
1000eca0:	d1f4      	bne.n	1000ec8c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000eca2:	4b04      	ldr	r3, [pc, #16]	; (1000ecb4 <init_port_list+0x3c>)
1000eca4:	785a      	ldrb	r2, [r3, #1]
1000eca6:	3918      	subs	r1, #24
1000eca8:	438a      	bics	r2, r1
1000ecaa:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ecac:	78da      	ldrb	r2, [r3, #3]
1000ecae:	438a      	bics	r2, r1
1000ecb0:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000ecb2:	bd70      	pop	{r4, r5, r6, pc}
1000ecb4:	1001a4b8 	.word	0x1001a4b8
1000ecb8:	10014a05 	.word	0x10014a05

1000ecbc <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ecbc:	4a06      	ldr	r2, [pc, #24]	; (1000ecd8 <init_clock+0x1c>)
1000ecbe:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ecc0:	4b06      	ldr	r3, [pc, #24]	; (1000ecdc <init_clock+0x20>)
1000ecc2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ecc4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ecc6:	4a06      	ldr	r2, [pc, #24]	; (1000ece0 <init_clock+0x24>)
1000ecc8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ecca:	4906      	ldr	r1, [pc, #24]	; (1000ece4 <init_clock+0x28>)
1000eccc:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ecce:	4b06      	ldr	r3, [pc, #24]	; (1000ece8 <init_clock+0x2c>)
1000ecd0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000ecd2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000ecd4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000ecd6:	4770      	bx	lr
1000ecd8:	4000b00c 	.word	0x4000b00c
1000ecdc:	fffe0fd3 	.word	0xfffe0fd3
1000ece0:	1001a49c 	.word	0x1001a49c
1000ece4:	4000b010 	.word	0x4000b010
1000ece8:	ffffe7c0 	.word	0xffffe7c0

1000ecec <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecee:	4657      	mov	r7, sl
1000ecf0:	464e      	mov	r6, r9
1000ecf2:	4645      	mov	r5, r8
1000ecf4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ecf6:	4b4f      	ldr	r3, [pc, #316]	; (1000ee34 <platform_driver_init+0x148>)
1000ecf8:	781b      	ldrb	r3, [r3, #0]
1000ecfa:	2b00      	cmp	r3, #0
1000ecfc:	d004      	beq.n	1000ed08 <platform_driver_init+0x1c>
1000ecfe:	4b4d      	ldr	r3, [pc, #308]	; (1000ee34 <platform_driver_init+0x148>)
1000ed00:	781b      	ldrb	r3, [r3, #0]
1000ed02:	2b01      	cmp	r3, #1
1000ed04:	d100      	bne.n	1000ed08 <platform_driver_init+0x1c>
1000ed06:	e08c      	b.n	1000ee22 <platform_driver_init+0x136>
		init_port_list();
1000ed08:	4b4b      	ldr	r3, [pc, #300]	; (1000ee38 <platform_driver_init+0x14c>)
1000ed0a:	4798      	blx	r3
		init_clock();
1000ed0c:	4b4b      	ldr	r3, [pc, #300]	; (1000ee3c <platform_driver_init+0x150>)
1000ed0e:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ed10:	2300      	movs	r3, #0
1000ed12:	4698      	mov	r8, r3
1000ed14:	4b4a      	ldr	r3, [pc, #296]	; (1000ee40 <platform_driver_init+0x154>)
1000ed16:	4642      	mov	r2, r8
1000ed18:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ed1a:	4c4a      	ldr	r4, [pc, #296]	; (1000ee44 <platform_driver_init+0x158>)
1000ed1c:	2380      	movs	r3, #128	; 0x80
1000ed1e:	2280      	movs	r2, #128	; 0x80
1000ed20:	0412      	lsls	r2, r2, #16
1000ed22:	4692      	mov	sl, r2
1000ed24:	50e2      	str	r2, [r4, r3]
1000ed26:	2280      	movs	r2, #128	; 0x80
1000ed28:	0452      	lsls	r2, r2, #17
1000ed2a:	4691      	mov	r9, r2
1000ed2c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ed2e:	4d46      	ldr	r5, [pc, #280]	; (1000ee48 <platform_driver_init+0x15c>)
1000ed30:	4b46      	ldr	r3, [pc, #280]	; (1000ee4c <platform_driver_init+0x160>)
1000ed32:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ed34:	4b46      	ldr	r3, [pc, #280]	; (1000ee50 <platform_driver_init+0x164>)
1000ed36:	4a47      	ldr	r2, [pc, #284]	; (1000ee54 <platform_driver_init+0x168>)
1000ed38:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ed3a:	4947      	ldr	r1, [pc, #284]	; (1000ee58 <platform_driver_init+0x16c>)
1000ed3c:	4a47      	ldr	r2, [pc, #284]	; (1000ee5c <platform_driver_init+0x170>)
1000ed3e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ed40:	4a47      	ldr	r2, [pc, #284]	; (1000ee60 <platform_driver_init+0x174>)
1000ed42:	6811      	ldr	r1, [r2, #0]
1000ed44:	4a47      	ldr	r2, [pc, #284]	; (1000ee64 <platform_driver_init+0x178>)
1000ed46:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ed48:	4a47      	ldr	r2, [pc, #284]	; (1000ee68 <platform_driver_init+0x17c>)
1000ed4a:	6811      	ldr	r1, [r2, #0]
1000ed4c:	4a47      	ldr	r2, [pc, #284]	; (1000ee6c <platform_driver_init+0x180>)
1000ed4e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ed50:	4947      	ldr	r1, [pc, #284]	; (1000ee70 <platform_driver_init+0x184>)
1000ed52:	4a48      	ldr	r2, [pc, #288]	; (1000ee74 <platform_driver_init+0x188>)
1000ed54:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ed56:	4948      	ldr	r1, [pc, #288]	; (1000ee78 <platform_driver_init+0x18c>)
1000ed58:	4a48      	ldr	r2, [pc, #288]	; (1000ee7c <platform_driver_init+0x190>)
1000ed5a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ed5c:	4f48      	ldr	r7, [pc, #288]	; (1000ee80 <platform_driver_init+0x194>)
1000ed5e:	4a49      	ldr	r2, [pc, #292]	; (1000ee84 <platform_driver_init+0x198>)
1000ed60:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ed62:	4949      	ldr	r1, [pc, #292]	; (1000ee88 <platform_driver_init+0x19c>)
1000ed64:	4a49      	ldr	r2, [pc, #292]	; (1000ee8c <platform_driver_init+0x1a0>)
1000ed66:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ed68:	4949      	ldr	r1, [pc, #292]	; (1000ee90 <platform_driver_init+0x1a4>)
1000ed6a:	4a4a      	ldr	r2, [pc, #296]	; (1000ee94 <platform_driver_init+0x1a8>)
1000ed6c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ed6e:	4e4a      	ldr	r6, [pc, #296]	; (1000ee98 <platform_driver_init+0x1ac>)
1000ed70:	4a4a      	ldr	r2, [pc, #296]	; (1000ee9c <platform_driver_init+0x1b0>)
1000ed72:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ed74:	494a      	ldr	r1, [pc, #296]	; (1000eea0 <platform_driver_init+0x1b4>)
1000ed76:	4a4b      	ldr	r2, [pc, #300]	; (1000eea4 <platform_driver_init+0x1b8>)
1000ed78:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ed7a:	494b      	ldr	r1, [pc, #300]	; (1000eea8 <platform_driver_init+0x1bc>)
1000ed7c:	4a4b      	ldr	r2, [pc, #300]	; (1000eeac <platform_driver_init+0x1c0>)
1000ed7e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ed80:	494b      	ldr	r1, [pc, #300]	; (1000eeb0 <platform_driver_init+0x1c4>)
1000ed82:	4a4c      	ldr	r2, [pc, #304]	; (1000eeb4 <platform_driver_init+0x1c8>)
1000ed84:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ed86:	494c      	ldr	r1, [pc, #304]	; (1000eeb8 <platform_driver_init+0x1cc>)
1000ed88:	4a4c      	ldr	r2, [pc, #304]	; (1000eebc <platform_driver_init+0x1d0>)
1000ed8a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ed8c:	494c      	ldr	r1, [pc, #304]	; (1000eec0 <platform_driver_init+0x1d4>)
1000ed8e:	4a4d      	ldr	r2, [pc, #308]	; (1000eec4 <platform_driver_init+0x1d8>)
1000ed90:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ed92:	2028      	movs	r0, #40	; 0x28
1000ed94:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ed96:	494c      	ldr	r1, [pc, #304]	; (1000eec8 <platform_driver_init+0x1dc>)
1000ed98:	2028      	movs	r0, #40	; 0x28
1000ed9a:	682b      	ldr	r3, [r5, #0]
1000ed9c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ed9e:	682b      	ldr	r3, [r5, #0]
1000eda0:	494a      	ldr	r1, [pc, #296]	; (1000eecc <platform_driver_init+0x1e0>)
1000eda2:	2027      	movs	r0, #39	; 0x27
1000eda4:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000eda6:	4b4a      	ldr	r3, [pc, #296]	; (1000eed0 <platform_driver_init+0x1e4>)
1000eda8:	681a      	ldr	r2, [r3, #0]
1000edaa:	4b4a      	ldr	r3, [pc, #296]	; (1000eed4 <platform_driver_init+0x1e8>)
1000edac:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000edae:	4a4a      	ldr	r2, [pc, #296]	; (1000eed8 <platform_driver_init+0x1ec>)
1000edb0:	4b4a      	ldr	r3, [pc, #296]	; (1000eedc <platform_driver_init+0x1f0>)
1000edb2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000edb4:	4a4a      	ldr	r2, [pc, #296]	; (1000eee0 <platform_driver_init+0x1f4>)
1000edb6:	4b4b      	ldr	r3, [pc, #300]	; (1000eee4 <platform_driver_init+0x1f8>)
1000edb8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000edba:	4a4b      	ldr	r2, [pc, #300]	; (1000eee8 <platform_driver_init+0x1fc>)
1000edbc:	4b4b      	ldr	r3, [pc, #300]	; (1000eeec <platform_driver_init+0x200>)
1000edbe:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000edc0:	4a4b      	ldr	r2, [pc, #300]	; (1000eef0 <platform_driver_init+0x204>)
1000edc2:	4b4c      	ldr	r3, [pc, #304]	; (1000eef4 <platform_driver_init+0x208>)
1000edc4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000edc6:	4a4c      	ldr	r2, [pc, #304]	; (1000eef8 <platform_driver_init+0x20c>)
1000edc8:	4b4c      	ldr	r3, [pc, #304]	; (1000eefc <platform_driver_init+0x210>)
1000edca:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000edcc:	4a4c      	ldr	r2, [pc, #304]	; (1000ef00 <platform_driver_init+0x214>)
1000edce:	4b4d      	ldr	r3, [pc, #308]	; (1000ef04 <platform_driver_init+0x218>)
1000edd0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000edd2:	4a4d      	ldr	r2, [pc, #308]	; (1000ef08 <platform_driver_init+0x21c>)
1000edd4:	4b4d      	ldr	r3, [pc, #308]	; (1000ef0c <platform_driver_init+0x220>)
1000edd6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000edd8:	22a0      	movs	r2, #160	; 0xa0
1000edda:	0092      	lsls	r2, r2, #2
1000eddc:	2100      	movs	r1, #0
1000edde:	484c      	ldr	r0, [pc, #304]	; (1000ef10 <platform_driver_init+0x224>)
1000ede0:	4b4c      	ldr	r3, [pc, #304]	; (1000ef14 <platform_driver_init+0x228>)
1000ede2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ede4:	2280      	movs	r2, #128	; 0x80
1000ede6:	0092      	lsls	r2, r2, #2
1000ede8:	4b4b      	ldr	r3, [pc, #300]	; (1000ef18 <platform_driver_init+0x22c>)
1000edea:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000edec:	4b4b      	ldr	r3, [pc, #300]	; (1000ef1c <platform_driver_init+0x230>)
1000edee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000edf0:	4653      	mov	r3, sl
1000edf2:	6023      	str	r3, [r4, #0]
1000edf4:	464b      	mov	r3, r9
1000edf6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000edf8:	4b49      	ldr	r3, [pc, #292]	; (1000ef20 <platform_driver_init+0x234>)
1000edfa:	4642      	mov	r2, r8
1000edfc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000edfe:	683b      	ldr	r3, [r7, #0]
1000ee00:	4a48      	ldr	r2, [pc, #288]	; (1000ef24 <platform_driver_init+0x238>)
1000ee02:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ee04:	6833      	ldr	r3, [r6, #0]
1000ee06:	4a48      	ldr	r2, [pc, #288]	; (1000ef28 <platform_driver_init+0x23c>)
1000ee08:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ee0a:	2000      	movs	r0, #0
1000ee0c:	4c47      	ldr	r4, [pc, #284]	; (1000ef2c <platform_driver_init+0x240>)
1000ee0e:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000ee10:	2001      	movs	r0, #1
1000ee12:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000ee14:	2002      	movs	r0, #2
1000ee16:	47a0      	blx	r4
		platform_initialized = 1;
1000ee18:	2201      	movs	r2, #1
1000ee1a:	4b06      	ldr	r3, [pc, #24]	; (1000ee34 <platform_driver_init+0x148>)
1000ee1c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ee1e:	2000      	movs	r0, #0
1000ee20:	e003      	b.n	1000ee2a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000ee22:	2201      	movs	r2, #1
1000ee24:	4b03      	ldr	r3, [pc, #12]	; (1000ee34 <platform_driver_init+0x148>)
1000ee26:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ee28:	2001      	movs	r0, #1
	}
	return status;
}
1000ee2a:	bc1c      	pop	{r2, r3, r4}
1000ee2c:	4690      	mov	r8, r2
1000ee2e:	4699      	mov	r9, r3
1000ee30:	46a2      	mov	sl, r4
1000ee32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee34:	10019844 	.word	0x10019844
1000ee38:	1000ec79 	.word	0x1000ec79
1000ee3c:	1000ecbd 	.word	0x1000ecbd
1000ee40:	10019864 	.word	0x10019864
1000ee44:	e000e100 	.word	0xe000e100
1000ee48:	1001a76c 	.word	0x1001a76c
1000ee4c:	000007d7 	.word	0x000007d7
1000ee50:	000007bd 	.word	0x000007bd
1000ee54:	1001a4a8 	.word	0x1001a4a8
1000ee58:	0001bc51 	.word	0x0001bc51
1000ee5c:	1001a770 	.word	0x1001a770
1000ee60:	100400bc 	.word	0x100400bc
1000ee64:	10019838 	.word	0x10019838
1000ee68:	100400b8 	.word	0x100400b8
1000ee6c:	10019834 	.word	0x10019834
1000ee70:	0001b99f 	.word	0x0001b99f
1000ee74:	1001a4a4 	.word	0x1001a4a4
1000ee78:	0001b9db 	.word	0x0001b9db
1000ee7c:	1001a4b0 	.word	0x1001a4b0
1000ee80:	1001a780 	.word	0x1001a780
1000ee84:	1004003c 	.word	0x1004003c
1000ee88:	10041fc0 	.word	0x10041fc0
1000ee8c:	1001a4b4 	.word	0x1001a4b4
1000ee90:	10041fc4 	.word	0x10041fc4
1000ee94:	1001a77c 	.word	0x1001a77c
1000ee98:	1001a774 	.word	0x1001a774
1000ee9c:	10041fd4 	.word	0x10041fd4
1000eea0:	10041fd8 	.word	0x10041fd8
1000eea4:	1001a4ac 	.word	0x1001a4ac
1000eea8:	0001cbe9 	.word	0x0001cbe9
1000eeac:	10019858 	.word	0x10019858
1000eeb0:	0001cd8f 	.word	0x0001cd8f
1000eeb4:	10019848 	.word	0x10019848
1000eeb8:	0001cea3 	.word	0x0001cea3
1000eebc:	1001986c 	.word	0x1001986c
1000eec0:	0001cbcf 	.word	0x0001cbcf
1000eec4:	10019840 	.word	0x10019840
1000eec8:	1000f375 	.word	0x1000f375
1000eecc:	1000f309 	.word	0x1000f309
1000eed0:	100400e4 	.word	0x100400e4
1000eed4:	10019860 	.word	0x10019860
1000eed8:	00019fe9 	.word	0x00019fe9
1000eedc:	10019870 	.word	0x10019870
1000eee0:	0001dbdd 	.word	0x0001dbdd
1000eee4:	1001983c 	.word	0x1001983c
1000eee8:	0001dc5b 	.word	0x0001dc5b
1000eeec:	10019850 	.word	0x10019850
1000eef0:	100405ec 	.word	0x100405ec
1000eef4:	1001984c 	.word	0x1001984c
1000eef8:	0001d5e3 	.word	0x0001d5e3
1000eefc:	1001985c 	.word	0x1001985c
1000ef00:	10040c20 	.word	0x10040c20
1000ef04:	10019874 	.word	0x10019874
1000ef08:	00019f09 	.word	0x00019f09
1000ef0c:	10019830 	.word	0x10019830
1000ef10:	1001a4ec 	.word	0x1001a4ec
1000ef14:	10014a05 	.word	0x10014a05
1000ef18:	1001a784 	.word	0x1001a784
1000ef1c:	1000eba5 	.word	0x1000eba5
1000ef20:	1001a778 	.word	0x1001a778
1000ef24:	1000ec4d 	.word	0x1000ec4d
1000ef28:	1000f3d1 	.word	0x1000f3d1
1000ef2c:	1000f3b9 	.word	0x1000f3b9

1000ef30 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ef30:	4b04      	ldr	r3, [pc, #16]	; (1000ef44 <platform_register_ble_msg_handler+0x14>)
1000ef32:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ef34:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ef36:	2a01      	cmp	r2, #1
1000ef38:	d102      	bne.n	1000ef40 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000ef3a:	4b03      	ldr	r3, [pc, #12]	; (1000ef48 <platform_register_ble_msg_handler+0x18>)
1000ef3c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000ef3e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000ef40:	0018      	movs	r0, r3
1000ef42:	4770      	bx	lr
1000ef44:	10019844 	.word	0x10019844
1000ef48:	10019864 	.word	0x10019864

1000ef4c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000ef4c:	b570      	push	{r4, r5, r6, lr}
1000ef4e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000ef50:	4b0e      	ldr	r3, [pc, #56]	; (1000ef8c <platform_interface_send+0x40>)
1000ef52:	681b      	ldr	r3, [r3, #0]
1000ef54:	2b00      	cmp	r3, #0
1000ef56:	d002      	beq.n	1000ef5e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000ef58:	8840      	ldrh	r0, [r0, #2]
1000ef5a:	4798      	blx	r3
1000ef5c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000ef5e:	88e3      	ldrh	r3, [r4, #6]
1000ef60:	88a2      	ldrh	r2, [r4, #4]
1000ef62:	8861      	ldrh	r1, [r4, #2]
1000ef64:	8820      	ldrh	r0, [r4, #0]
1000ef66:	4d0a      	ldr	r5, [pc, #40]	; (1000ef90 <platform_interface_send+0x44>)
1000ef68:	682d      	ldr	r5, [r5, #0]
1000ef6a:	47a8      	blx	r5
1000ef6c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000ef6e:	88e2      	ldrh	r2, [r4, #6]
1000ef70:	2a00      	cmp	r2, #0
1000ef72:	d102      	bne.n	1000ef7a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000ef74:	4b07      	ldr	r3, [pc, #28]	; (1000ef94 <platform_interface_send+0x48>)
1000ef76:	4798      	blx	r3
1000ef78:	e006      	b.n	1000ef88 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000ef7a:	0021      	movs	r1, r4
1000ef7c:	3108      	adds	r1, #8
1000ef7e:	4b06      	ldr	r3, [pc, #24]	; (1000ef98 <platform_interface_send+0x4c>)
1000ef80:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000ef82:	0028      	movs	r0, r5
1000ef84:	4b03      	ldr	r3, [pc, #12]	; (1000ef94 <platform_interface_send+0x48>)
1000ef86:	4798      	blx	r3
	}
}
1000ef88:	bd70      	pop	{r4, r5, r6, pc}
1000ef8a:	46c0      	nop			; (mov r8, r8)
1000ef8c:	10019838 	.word	0x10019838
1000ef90:	10019870 	.word	0x10019870
1000ef94:	1000ebd5 	.word	0x1000ebd5
1000ef98:	100149f3 	.word	0x100149f3

1000ef9c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ef9c:	b570      	push	{r4, r5, r6, lr}
1000ef9e:	0015      	movs	r5, r2
1000efa0:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000efa2:	020a      	lsls	r2, r1, #8
1000efa4:	4302      	orrs	r2, r0
1000efa6:	4b0a      	ldr	r3, [pc, #40]	; (1000efd0 <send_plf_int_msg_ind+0x34>)
1000efa8:	681e      	ldr	r6, [r3, #0]
1000efaa:	0023      	movs	r3, r4
1000efac:	2105      	movs	r1, #5
1000efae:	20a0      	movs	r0, #160	; 0xa0
1000efb0:	00c0      	lsls	r0, r0, #3
1000efb2:	47b0      	blx	r6
1000efb4:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000efb6:	d00a      	beq.n	1000efce <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000efb8:	2c00      	cmp	r4, #0
1000efba:	d005      	beq.n	1000efc8 <send_plf_int_msg_ind+0x2c>
1000efbc:	2d00      	cmp	r5, #0
1000efbe:	d003      	beq.n	1000efc8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000efc0:	0022      	movs	r2, r4
1000efc2:	0029      	movs	r1, r5
1000efc4:	4b03      	ldr	r3, [pc, #12]	; (1000efd4 <send_plf_int_msg_ind+0x38>)
1000efc6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000efc8:	0030      	movs	r0, r6
1000efca:	4b03      	ldr	r3, [pc, #12]	; (1000efd8 <send_plf_int_msg_ind+0x3c>)
1000efcc:	4798      	blx	r3
	}
}
1000efce:	bd70      	pop	{r4, r5, r6, pc}
1000efd0:	10019870 	.word	0x10019870
1000efd4:	100149f3 	.word	0x100149f3
1000efd8:	1000ebd5 	.word	0x1000ebd5

1000efdc <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efde:	465f      	mov	r7, fp
1000efe0:	4656      	mov	r6, sl
1000efe2:	464d      	mov	r5, r9
1000efe4:	4644      	mov	r4, r8
1000efe6:	b4f0      	push	{r4, r5, r6, r7}
1000efe8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000efea:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000efec:	2300      	movs	r3, #0
1000efee:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000eff0:	1ce3      	adds	r3, r4, #3
1000eff2:	d81c      	bhi.n	1000f02e <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000eff4:	220d      	movs	r2, #13
1000eff6:	2100      	movs	r1, #0
1000eff8:	a802      	add	r0, sp, #8
1000effa:	4b82      	ldr	r3, [pc, #520]	; (1000f204 <platform_event_wait+0x228>)
1000effc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000effe:	2333      	movs	r3, #51	; 0x33
1000f000:	aa02      	add	r2, sp, #8
1000f002:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f004:	3b30      	subs	r3, #48	; 0x30
1000f006:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f008:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f00a:	3302      	adds	r3, #2
1000f00c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f00e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f010:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f012:	0a23      	lsrs	r3, r4, #8
1000f014:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f016:	0c23      	lsrs	r3, r4, #16
1000f018:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f01a:	0e24      	lsrs	r4, r4, #24
1000f01c:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f01e:	2301      	movs	r3, #1
1000f020:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f022:	210d      	movs	r1, #13
1000f024:	0010      	movs	r0, r2
1000f026:	4b78      	ldr	r3, [pc, #480]	; (1000f208 <platform_event_wait+0x22c>)
1000f028:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f02a:	2301      	movs	r3, #1
1000f02c:	4699      	mov	r9, r3
1000f02e:	2400      	movs	r4, #0
1000f030:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f032:	4f76      	ldr	r7, [pc, #472]	; (1000f20c <platform_event_wait+0x230>)
1000f034:	4e76      	ldr	r6, [pc, #472]	; (1000f210 <platform_event_wait+0x234>)
1000f036:	4977      	ldr	r1, [pc, #476]	; (1000f214 <platform_event_wait+0x238>)
1000f038:	6838      	ldr	r0, [r7, #0]
1000f03a:	6833      	ldr	r3, [r6, #0]
1000f03c:	4798      	blx	r3
1000f03e:	2800      	cmp	r0, #0
1000f040:	d000      	beq.n	1000f044 <platform_event_wait+0x68>
1000f042:	e088      	b.n	1000f156 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f044:	4b73      	ldr	r3, [pc, #460]	; (1000f214 <platform_event_wait+0x238>)
1000f046:	681c      	ldr	r4, [r3, #0]
1000f048:	88a3      	ldrh	r3, [r4, #4]
1000f04a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f04c:	23cd      	movs	r3, #205	; 0xcd
1000f04e:	009b      	lsls	r3, r3, #2
1000f050:	459a      	cmp	sl, r3
1000f052:	d100      	bne.n	1000f056 <platform_event_wait+0x7a>
1000f054:	e0c7      	b.n	1000f1e6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f056:	8923      	ldrh	r3, [r4, #8]
1000f058:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f05a:	8963      	ldrh	r3, [r4, #10]
1000f05c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f05e:	464b      	mov	r3, r9
1000f060:	2b00      	cmp	r3, #0
1000f062:	d011      	beq.n	1000f088 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f064:	220d      	movs	r2, #13
1000f066:	2100      	movs	r1, #0
1000f068:	a802      	add	r0, sp, #8
1000f06a:	4b66      	ldr	r3, [pc, #408]	; (1000f204 <platform_event_wait+0x228>)
1000f06c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f06e:	2333      	movs	r3, #51	; 0x33
1000f070:	aa02      	add	r2, sp, #8
1000f072:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f074:	3b30      	subs	r3, #48	; 0x30
1000f076:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f078:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f07a:	3302      	adds	r3, #2
1000f07c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f07e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f080:	210d      	movs	r1, #13
1000f082:	0010      	movs	r0, r2
1000f084:	4b60      	ldr	r3, [pc, #384]	; (1000f208 <platform_event_wait+0x22c>)
1000f086:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f088:	23a0      	movs	r3, #160	; 0xa0
1000f08a:	00db      	lsls	r3, r3, #3
1000f08c:	459a      	cmp	sl, r3
1000f08e:	d121      	bne.n	1000f0d4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f090:	4b61      	ldr	r3, [pc, #388]	; (1000f218 <platform_event_wait+0x23c>)
1000f092:	881b      	ldrh	r3, [r3, #0]
1000f094:	4443      	add	r3, r8
1000f096:	22a0      	movs	r2, #160	; 0xa0
1000f098:	0092      	lsls	r2, r2, #2
1000f09a:	4293      	cmp	r3, r2
1000f09c:	dd02      	ble.n	1000f0a4 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f09e:	3a80      	subs	r2, #128	; 0x80
1000f0a0:	4b5d      	ldr	r3, [pc, #372]	; (1000f218 <platform_event_wait+0x23c>)
1000f0a2:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f0a4:	4b5c      	ldr	r3, [pc, #368]	; (1000f218 <platform_event_wait+0x23c>)
1000f0a6:	469a      	mov	sl, r3
1000f0a8:	881d      	ldrh	r5, [r3, #0]
1000f0aa:	4b5c      	ldr	r3, [pc, #368]	; (1000f21c <platform_event_wait+0x240>)
1000f0ac:	18ed      	adds	r5, r5, r3
1000f0ae:	0021      	movs	r1, r4
1000f0b0:	310c      	adds	r1, #12
1000f0b2:	4642      	mov	r2, r8
1000f0b4:	0028      	movs	r0, r5
1000f0b6:	4b5a      	ldr	r3, [pc, #360]	; (1000f220 <platform_event_wait+0x244>)
1000f0b8:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f0ba:	4642      	mov	r2, r8
1000f0bc:	0029      	movs	r1, r5
1000f0be:	4658      	mov	r0, fp
1000f0c0:	4b58      	ldr	r3, [pc, #352]	; (1000f224 <platform_event_wait+0x248>)
1000f0c2:	4798      	blx	r3
				plf_event_buff_index += len;
1000f0c4:	4653      	mov	r3, sl
1000f0c6:	881b      	ldrh	r3, [r3, #0]
1000f0c8:	4443      	add	r3, r8
1000f0ca:	4652      	mov	r2, sl
1000f0cc:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f0ce:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f0d0:	2502      	movs	r5, #2
1000f0d2:	e03a      	b.n	1000f14a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f0d4:	4b54      	ldr	r3, [pc, #336]	; (1000f228 <platform_event_wait+0x24c>)
1000f0d6:	681b      	ldr	r3, [r3, #0]
1000f0d8:	2b00      	cmp	r3, #0
1000f0da:	d032      	beq.n	1000f142 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f0dc:	4b4d      	ldr	r3, [pc, #308]	; (1000f214 <platform_event_wait+0x238>)
1000f0de:	681a      	ldr	r2, [r3, #0]
1000f0e0:	8893      	ldrh	r3, [r2, #4]
1000f0e2:	21cd      	movs	r1, #205	; 0xcd
1000f0e4:	0089      	lsls	r1, r1, #2
1000f0e6:	428b      	cmp	r3, r1
1000f0e8:	d104      	bne.n	1000f0f4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f0ea:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f0ec:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f0ee:	2b00      	cmp	r3, #0
1000f0f0:	d02b      	beq.n	1000f14a <platform_event_wait+0x16e>
1000f0f2:	e028      	b.n	1000f146 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f0f4:	4c4d      	ldr	r4, [pc, #308]	; (1000f22c <platform_event_wait+0x250>)
1000f0f6:	4d49      	ldr	r5, [pc, #292]	; (1000f21c <platform_event_wait+0x240>)
1000f0f8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f0fa:	702b      	strb	r3, [r5, #0]
1000f0fc:	0a1b      	lsrs	r3, r3, #8
1000f0fe:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f100:	8910      	ldrh	r0, [r2, #8]
1000f102:	4b4b      	ldr	r3, [pc, #300]	; (1000f230 <platform_event_wait+0x254>)
1000f104:	681b      	ldr	r3, [r3, #0]
1000f106:	4798      	blx	r3
1000f108:	7128      	strb	r0, [r5, #4]
1000f10a:	0a00      	lsrs	r0, r0, #8
1000f10c:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f10e:	6820      	ldr	r0, [r4, #0]
1000f110:	4b40      	ldr	r3, [pc, #256]	; (1000f214 <platform_event_wait+0x238>)
1000f112:	681a      	ldr	r2, [r3, #0]
1000f114:	88d2      	ldrh	r2, [r2, #6]
1000f116:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f118:	681d      	ldr	r5, [r3, #0]
1000f11a:	896b      	ldrh	r3, [r5, #10]
1000f11c:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f11e:	3008      	adds	r0, #8
1000f120:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f122:	896a      	ldrh	r2, [r5, #10]
1000f124:	2a00      	cmp	r2, #0
1000f126:	d003      	beq.n	1000f130 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f128:	0029      	movs	r1, r5
1000f12a:	310c      	adds	r1, #12
1000f12c:	4b3c      	ldr	r3, [pc, #240]	; (1000f220 <platform_event_wait+0x244>)
1000f12e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f130:	8969      	ldrh	r1, [r5, #10]
1000f132:	3108      	adds	r1, #8
1000f134:	4b3c      	ldr	r3, [pc, #240]	; (1000f228 <platform_event_wait+0x24c>)
1000f136:	681b      	ldr	r3, [r3, #0]
1000f138:	4838      	ldr	r0, [pc, #224]	; (1000f21c <platform_event_wait+0x240>)
1000f13a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f13c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f13e:	2503      	movs	r5, #3
1000f140:	e003      	b.n	1000f14a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f142:	2400      	movs	r4, #0
1000f144:	e001      	b.n	1000f14a <platform_event_wait+0x16e>
1000f146:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f148:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f14a:	4b32      	ldr	r3, [pc, #200]	; (1000f214 <platform_event_wait+0x238>)
1000f14c:	6818      	ldr	r0, [r3, #0]
1000f14e:	4b39      	ldr	r3, [pc, #228]	; (1000f234 <platform_event_wait+0x258>)
1000f150:	681b      	ldr	r3, [r3, #0]
1000f152:	4798      	blx	r3
1000f154:	e000      	b.n	1000f158 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f156:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f158:	2c00      	cmp	r4, #0
1000f15a:	d000      	beq.n	1000f15e <platform_event_wait+0x182>
1000f15c:	e76b      	b.n	1000f036 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f15e:	464b      	mov	r3, r9
1000f160:	2b00      	cmp	r3, #0
1000f162:	d046      	beq.n	1000f1f2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f164:	4b29      	ldr	r3, [pc, #164]	; (1000f20c <platform_event_wait+0x230>)
1000f166:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f168:	2e00      	cmp	r6, #0
1000f16a:	d104      	bne.n	1000f176 <platform_event_wait+0x19a>
1000f16c:	2300      	movs	r3, #0
1000f16e:	6a1c      	ldr	r4, [r3, #32]
1000f170:	2c00      	cmp	r4, #0
1000f172:	d131      	bne.n	1000f1d8 <platform_event_wait+0x1fc>
1000f174:	e03d      	b.n	1000f1f2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f176:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f178:	2314      	movs	r3, #20
1000f17a:	469c      	mov	ip, r3
1000f17c:	44b4      	add	ip, r6
1000f17e:	4663      	mov	r3, ip
1000f180:	4660      	mov	r0, ip
1000f182:	9300      	str	r3, [sp, #0]
1000f184:	4b2c      	ldr	r3, [pc, #176]	; (1000f238 <platform_event_wait+0x25c>)
1000f186:	681b      	ldr	r3, [r3, #0]
1000f188:	4798      	blx	r3
	while(NULL != current)
1000f18a:	2c00      	cmp	r4, #0
1000f18c:	d01f      	beq.n	1000f1ce <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f18e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f190:	23cd      	movs	r3, #205	; 0xcd
1000f192:	009b      	lsls	r3, r3, #2
1000f194:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f196:	4b27      	ldr	r3, [pc, #156]	; (1000f234 <platform_event_wait+0x258>)
1000f198:	469a      	mov	sl, r3
1000f19a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f19c:	6803      	ldr	r3, [r0, #0]
1000f19e:	889b      	ldrh	r3, [r3, #4]
1000f1a0:	4543      	cmp	r3, r8
1000f1a2:	d110      	bne.n	1000f1c6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f1a4:	2f00      	cmp	r7, #0
1000f1a6:	d006      	beq.n	1000f1b6 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f1a8:	6883      	ldr	r3, [r0, #8]
1000f1aa:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f1ac:	4653      	mov	r3, sl
1000f1ae:	681b      	ldr	r3, [r3, #0]
1000f1b0:	4798      	blx	r3
				current = prev->pstrNext;
1000f1b2:	68b8      	ldr	r0, [r7, #8]
1000f1b4:	e009      	b.n	1000f1ca <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f1b6:	6883      	ldr	r3, [r0, #8]
1000f1b8:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f1ba:	4b1e      	ldr	r3, [pc, #120]	; (1000f234 <platform_event_wait+0x258>)
1000f1bc:	681b      	ldr	r3, [r3, #0]
1000f1be:	9301      	str	r3, [sp, #4]
1000f1c0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f1c2:	6a30      	ldr	r0, [r6, #32]
1000f1c4:	e001      	b.n	1000f1ca <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f1c6:	0007      	movs	r7, r0
1000f1c8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f1ca:	2800      	cmp	r0, #0
1000f1cc:	d1e6      	bne.n	1000f19c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f1ce:	4b1b      	ldr	r3, [pc, #108]	; (1000f23c <platform_event_wait+0x260>)
1000f1d0:	681b      	ldr	r3, [r3, #0]
1000f1d2:	9800      	ldr	r0, [sp, #0]
1000f1d4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f1d6:	e00c      	b.n	1000f1f2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f1d8:	2314      	movs	r3, #20
1000f1da:	9300      	str	r3, [sp, #0]
1000f1dc:	4b16      	ldr	r3, [pc, #88]	; (1000f238 <platform_event_wait+0x25c>)
1000f1de:	681b      	ldr	r3, [r3, #0]
1000f1e0:	2014      	movs	r0, #20
1000f1e2:	4798      	blx	r3
1000f1e4:	e7d3      	b.n	1000f18e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1e6:	4b10      	ldr	r3, [pc, #64]	; (1000f228 <platform_event_wait+0x24c>)
1000f1e8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f1ea:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1ec:	2b00      	cmp	r3, #0
1000f1ee:	d0ac      	beq.n	1000f14a <platform_event_wait+0x16e>
1000f1f0:	e77b      	b.n	1000f0ea <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f1f2:	0028      	movs	r0, r5
1000f1f4:	b007      	add	sp, #28
1000f1f6:	bc3c      	pop	{r2, r3, r4, r5}
1000f1f8:	4690      	mov	r8, r2
1000f1fa:	4699      	mov	r9, r3
1000f1fc:	46a2      	mov	sl, r4
1000f1fe:	46ab      	mov	fp, r5
1000f200:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f202:	46c0      	nop			; (mov r8, r8)
1000f204:	10014a05 	.word	0x10014a05
1000f208:	1000ef4d 	.word	0x1000ef4d
1000f20c:	10019874 	.word	0x10019874
1000f210:	1001985c 	.word	0x1001985c
1000f214:	10019868 	.word	0x10019868
1000f218:	1001a784 	.word	0x1001a784
1000f21c:	1001a4ec 	.word	0x1001a4ec
1000f220:	100149f3 	.word	0x100149f3
1000f224:	1000eb6d 	.word	0x1000eb6d
1000f228:	10019864 	.word	0x10019864
1000f22c:	10019854 	.word	0x10019854
1000f230:	10019834 	.word	0x10019834
1000f234:	10019830 	.word	0x10019830
1000f238:	10019850 	.word	0x10019850
1000f23c:	1001983c 	.word	0x1001983c

1000f240 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f240:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f242:	4b03      	ldr	r3, [pc, #12]	; (1000f250 <acquire_sleep_lock+0x10>)
1000f244:	681b      	ldr	r3, [r3, #0]
1000f246:	2080      	movs	r0, #128	; 0x80
1000f248:	0200      	lsls	r0, r0, #8
1000f24a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f24c:	2008      	movs	r0, #8
1000f24e:	bd10      	pop	{r4, pc}
1000f250:	1001a4a4 	.word	0x1001a4a4

1000f254 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f254:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f256:	4b03      	ldr	r3, [pc, #12]	; (1000f264 <release_message_lock+0x10>)
1000f258:	681b      	ldr	r3, [r3, #0]
1000f25a:	2080      	movs	r0, #128	; 0x80
1000f25c:	01c0      	lsls	r0, r0, #7
1000f25e:	4798      	blx	r3
	return status;
}
1000f260:	2000      	movs	r0, #0
1000f262:	bd10      	pop	{r4, pc}
1000f264:	1001a4b0 	.word	0x1001a4b0

1000f268 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f268:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f26a:	4c05      	ldr	r4, [pc, #20]	; (1000f280 <release_sleep_lock+0x18>)
1000f26c:	2080      	movs	r0, #128	; 0x80
1000f26e:	01c0      	lsls	r0, r0, #7
1000f270:	6823      	ldr	r3, [r4, #0]
1000f272:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f274:	6823      	ldr	r3, [r4, #0]
1000f276:	2080      	movs	r0, #128	; 0x80
1000f278:	0200      	lsls	r0, r0, #8
1000f27a:	4798      	blx	r3
	return status;
}
1000f27c:	2000      	movs	r0, #0
1000f27e:	bd10      	pop	{r4, pc}
1000f280:	1001a4b0 	.word	0x1001a4b0

1000f284 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f284:	2800      	cmp	r0, #0
1000f286:	d003      	beq.n	1000f290 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f288:	4b02      	ldr	r3, [pc, #8]	; (1000f294 <register_resume_callback+0x10>)
1000f28a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f28c:	2000      	movs	r0, #0
1000f28e:	e000      	b.n	1000f292 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f290:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f292:	4770      	bx	lr
1000f294:	1001a778 	.word	0x1001a778

1000f298 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f298:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f29a:	4a18      	ldr	r2, [pc, #96]	; (1000f2fc <gpio1_combined_isr_handler+0x64>)
1000f29c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f29e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f2a0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f2a2:	2180      	movs	r1, #128	; 0x80
1000f2a4:	0209      	lsls	r1, r1, #8
1000f2a6:	4301      	orrs	r1, r0
1000f2a8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f2aa:	0010      	movs	r0, r2
1000f2ac:	4d14      	ldr	r5, [pc, #80]	; (1000f300 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f2ae:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f2b0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f2b2:	05db      	lsls	r3, r3, #23
1000f2b4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f2b6:	d011      	beq.n	1000f2dc <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f2b8:	b2db      	uxtb	r3, r3
1000f2ba:	4259      	negs	r1, r3
1000f2bc:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f2be:	2b01      	cmp	r3, #1
1000f2c0:	d006      	beq.n	1000f2d0 <gpio1_combined_isr_handler+0x38>
1000f2c2:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f2c4:	085b      	lsrs	r3, r3, #1
				index++;
1000f2c6:	3101      	adds	r1, #1
1000f2c8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f2ca:	2b01      	cmp	r3, #1
1000f2cc:	d1fa      	bne.n	1000f2c4 <gpio1_combined_isr_handler+0x2c>
1000f2ce:	e000      	b.n	1000f2d2 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f2d0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f2d2:	0023      	movs	r3, r4
1000f2d4:	408b      	lsls	r3, r1
1000f2d6:	b29b      	uxth	r3, r3
1000f2d8:	8703      	strh	r3, [r0, #56]	; 0x38
1000f2da:	e003      	b.n	1000f2e4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f2dc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f2de:	432b      	orrs	r3, r5
1000f2e0:	b29b      	uxth	r3, r3
1000f2e2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f2e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f2e6:	05db      	lsls	r3, r3, #23
1000f2e8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f2ea:	d1e2      	bne.n	1000f2b2 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f2ec:	2180      	movs	r1, #128	; 0x80
1000f2ee:	0049      	lsls	r1, r1, #1
1000f2f0:	3381      	adds	r3, #129	; 0x81
1000f2f2:	33ff      	adds	r3, #255	; 0xff
1000f2f4:	4a03      	ldr	r2, [pc, #12]	; (1000f304 <gpio1_combined_isr_handler+0x6c>)
1000f2f6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f2f8:	bd30      	pop	{r4, r5, pc}
1000f2fa:	46c0      	nop			; (mov r8, r8)
1000f2fc:	40011000 	.word	0x40011000
1000f300:	ffff8000 	.word	0xffff8000
1000f304:	e000e100 	.word	0xe000e100

1000f308 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f308:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f30a:	4a17      	ldr	r2, [pc, #92]	; (1000f368 <gpio0_combined_isr_handler+0x60>)
1000f30c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f30e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f310:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f312:	2180      	movs	r1, #128	; 0x80
1000f314:	0209      	lsls	r1, r1, #8
1000f316:	4301      	orrs	r1, r0
1000f318:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f31a:	0010      	movs	r0, r2
1000f31c:	4d13      	ldr	r5, [pc, #76]	; (1000f36c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f31e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f320:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f322:	05db      	lsls	r3, r3, #23
1000f324:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f326:	d011      	beq.n	1000f34c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f328:	b2db      	uxtb	r3, r3
1000f32a:	4259      	negs	r1, r3
1000f32c:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f32e:	2b01      	cmp	r3, #1
1000f330:	d006      	beq.n	1000f340 <gpio0_combined_isr_handler+0x38>
1000f332:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f334:	085b      	lsrs	r3, r3, #1
				index++;
1000f336:	3101      	adds	r1, #1
1000f338:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f33a:	2b01      	cmp	r3, #1
1000f33c:	d1fa      	bne.n	1000f334 <gpio0_combined_isr_handler+0x2c>
1000f33e:	e000      	b.n	1000f342 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f340:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f342:	0023      	movs	r3, r4
1000f344:	408b      	lsls	r3, r1
1000f346:	b29b      	uxth	r3, r3
1000f348:	8703      	strh	r3, [r0, #56]	; 0x38
1000f34a:	e003      	b.n	1000f354 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f34c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f34e:	432b      	orrs	r3, r5
1000f350:	b29b      	uxth	r3, r3
1000f352:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f354:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f356:	05db      	lsls	r3, r3, #23
1000f358:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f35a:	d1e2      	bne.n	1000f322 <gpio0_combined_isr_handler+0x1a>
1000f35c:	2180      	movs	r1, #128	; 0x80
1000f35e:	3381      	adds	r3, #129	; 0x81
1000f360:	33ff      	adds	r3, #255	; 0xff
1000f362:	4a03      	ldr	r2, [pc, #12]	; (1000f370 <gpio0_combined_isr_handler+0x68>)
1000f364:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f366:	bd30      	pop	{r4, r5, pc}
1000f368:	40010000 	.word	0x40010000
1000f36c:	ffff8000 	.word	0xffff8000
1000f370:	e000e100 	.word	0xe000e100

1000f374 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f374:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f376:	4b0c      	ldr	r3, [pc, #48]	; (1000f3a8 <PORT1_COMB_Handler+0x34>)
1000f378:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f37a:	0b5b      	lsrs	r3, r3, #13
1000f37c:	d010      	beq.n	1000f3a0 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f37e:	4b0b      	ldr	r3, [pc, #44]	; (1000f3ac <PORT1_COMB_Handler+0x38>)
1000f380:	681b      	ldr	r3, [r3, #0]
1000f382:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f384:	4a08      	ldr	r2, [pc, #32]	; (1000f3a8 <PORT1_COMB_Handler+0x34>)
1000f386:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f388:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f38a:	0b5b      	lsrs	r3, r3, #13
1000f38c:	035b      	lsls	r3, r3, #13
1000f38e:	430b      	orrs	r3, r1
1000f390:	8713      	strh	r3, [r2, #56]	; 0x38
1000f392:	2180      	movs	r1, #128	; 0x80
1000f394:	0049      	lsls	r1, r1, #1
1000f396:	23c0      	movs	r3, #192	; 0xc0
1000f398:	005b      	lsls	r3, r3, #1
1000f39a:	4a05      	ldr	r2, [pc, #20]	; (1000f3b0 <PORT1_COMB_Handler+0x3c>)
1000f39c:	50d1      	str	r1, [r2, r3]
1000f39e:	e001      	b.n	1000f3a4 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f3a0:	4b04      	ldr	r3, [pc, #16]	; (1000f3b4 <PORT1_COMB_Handler+0x40>)
1000f3a2:	4798      	blx	r3
	}
}
1000f3a4:	bd10      	pop	{r4, pc}
1000f3a6:	46c0      	nop			; (mov r8, r8)
1000f3a8:	40011000 	.word	0x40011000
1000f3ac:	1001a770 	.word	0x1001a770
1000f3b0:	e000e100 	.word	0xe000e100
1000f3b4:	1000f299 	.word	0x1000f299

1000f3b8 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f3b8:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f3ba:	2802      	cmp	r0, #2
1000f3bc:	d804      	bhi.n	1000f3c8 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f3be:	0080      	lsls	r0, r0, #2
1000f3c0:	2200      	movs	r2, #0
1000f3c2:	4b02      	ldr	r3, [pc, #8]	; (1000f3cc <wakeup_int_unregister_callback+0x14>)
1000f3c4:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f3c6:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f3c8:	0018      	movs	r0, r3
1000f3ca:	4770      	bx	lr
1000f3cc:	1001a788 	.word	0x1001a788

1000f3d0 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f3d0:	b510      	push	{r4, lr}
1000f3d2:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f3d4:	7803      	ldrb	r3, [r0, #0]
1000f3d6:	2b01      	cmp	r3, #1
1000f3d8:	d108      	bne.n	1000f3ec <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f3da:	4b11      	ldr	r3, [pc, #68]	; (1000f420 <wakeup_active_event_callback+0x50>)
1000f3dc:	681b      	ldr	r3, [r3, #0]
1000f3de:	2b00      	cmp	r3, #0
1000f3e0:	d000      	beq.n	1000f3e4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f3e2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f3e4:	23ff      	movs	r3, #255	; 0xff
1000f3e6:	6822      	ldr	r2, [r4, #0]
1000f3e8:	439a      	bics	r2, r3
1000f3ea:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f3ec:	7863      	ldrb	r3, [r4, #1]
1000f3ee:	2b01      	cmp	r3, #1
1000f3f0:	d108      	bne.n	1000f404 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f3f2:	4b0b      	ldr	r3, [pc, #44]	; (1000f420 <wakeup_active_event_callback+0x50>)
1000f3f4:	685b      	ldr	r3, [r3, #4]
1000f3f6:	2b00      	cmp	r3, #0
1000f3f8:	d000      	beq.n	1000f3fc <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f3fa:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f3fc:	4b09      	ldr	r3, [pc, #36]	; (1000f424 <wakeup_active_event_callback+0x54>)
1000f3fe:	6822      	ldr	r2, [r4, #0]
1000f400:	4013      	ands	r3, r2
1000f402:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f404:	78a3      	ldrb	r3, [r4, #2]
1000f406:	2b01      	cmp	r3, #1
1000f408:	d108      	bne.n	1000f41c <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f40a:	4b05      	ldr	r3, [pc, #20]	; (1000f420 <wakeup_active_event_callback+0x50>)
1000f40c:	689b      	ldr	r3, [r3, #8]
1000f40e:	2b00      	cmp	r3, #0
1000f410:	d000      	beq.n	1000f414 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f412:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f414:	4b04      	ldr	r3, [pc, #16]	; (1000f428 <wakeup_active_event_callback+0x58>)
1000f416:	6822      	ldr	r2, [r4, #0]
1000f418:	4013      	ands	r3, r2
1000f41a:	6023      	str	r3, [r4, #0]
	}
}
1000f41c:	bd10      	pop	{r4, pc}
1000f41e:	46c0      	nop			; (mov r8, r8)
1000f420:	1001a788 	.word	0x1001a788
1000f424:	ffff00ff 	.word	0xffff00ff
1000f428:	ff00ffff 	.word	0xff00ffff

1000f42c <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f42c:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f42e:	4b09      	ldr	r3, [pc, #36]	; (1000f454 <resume_cb+0x28>)
1000f430:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f432:	4b09      	ldr	r3, [pc, #36]	; (1000f458 <resume_cb+0x2c>)
1000f434:	4798      	blx	r3
    sms_dualtimer_init();
1000f436:	4b09      	ldr	r3, [pc, #36]	; (1000f45c <resume_cb+0x30>)
1000f438:	4798      	blx	r3
    delay_init();
1000f43a:	4b09      	ldr	r3, [pc, #36]	; (1000f460 <resume_cb+0x34>)
1000f43c:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f43e:	4b09      	ldr	r3, [pc, #36]	; (1000f464 <resume_cb+0x38>)
1000f440:	4798      	blx	r3
    sms_led_gpio_init();
1000f442:	4b09      	ldr	r3, [pc, #36]	; (1000f468 <resume_cb+0x3c>)
1000f444:	4798      	blx	r3
    sms_spi_master_configure();
1000f446:	4b09      	ldr	r3, [pc, #36]	; (1000f46c <resume_cb+0x40>)
1000f448:	4798      	blx	r3
    sms_i2c_master_configure();
1000f44a:	4b09      	ldr	r3, [pc, #36]	; (1000f470 <resume_cb+0x44>)
1000f44c:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000f44e:	4b09      	ldr	r3, [pc, #36]	; (1000f474 <resume_cb+0x48>)
1000f450:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f452:	bd10      	pop	{r4, pc}
1000f454:	1000ec79 	.word	0x1000ec79
1000f458:	1000e9e1 	.word	0x1000e9e1
1000f45c:	1000b1cd 	.word	0x1000b1cd
1000f460:	100080e9 	.word	0x100080e9
1000f464:	1000a231 	.word	0x1000a231
1000f468:	1000aa65 	.word	0x1000aa65
1000f46c:	1000b085 	.word	0x1000b085
1000f470:	1000a705 	.word	0x1000a705
1000f474:	1000a659 	.word	0x1000a659

1000f478 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f478:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f47a:	2300      	movs	r3, #0
1000f47c:	4a10      	ldr	r2, [pc, #64]	; (1000f4c0 <sms_init_variables+0x48>)
1000f47e:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f480:	4a10      	ldr	r2, [pc, #64]	; (1000f4c4 <sms_init_variables+0x4c>)
1000f482:	7053      	strb	r3, [r2, #1]
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f484:	4810      	ldr	r0, [pc, #64]	; (1000f4c8 <sms_init_variables+0x50>)
1000f486:	2225      	movs	r2, #37	; 0x25
1000f488:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f48a:	4a10      	ldr	r2, [pc, #64]	; (1000f4cc <sms_init_variables+0x54>)
1000f48c:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f48e:	4a10      	ldr	r2, [pc, #64]	; (1000f4d0 <sms_init_variables+0x58>)
1000f490:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f492:	2101      	movs	r1, #1
1000f494:	4a0f      	ldr	r2, [pc, #60]	; (1000f4d4 <sms_init_variables+0x5c>)
1000f496:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f498:	4a0f      	ldr	r2, [pc, #60]	; (1000f4d8 <sms_init_variables+0x60>)
1000f49a:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f49c:	241f      	movs	r4, #31
1000f49e:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f4a0:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f4a2:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f4a4:	2228      	movs	r2, #40	; 0x28
1000f4a6:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f4a8:	4a0c      	ldr	r2, [pc, #48]	; (1000f4dc <sms_init_variables+0x64>)
1000f4aa:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f4ac:	4a0c      	ldr	r2, [pc, #48]	; (1000f4e0 <sms_init_variables+0x68>)
1000f4ae:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f4b0:	201d      	movs	r0, #29
1000f4b2:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f4b4:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f4b6:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f4b8:	4a0a      	ldr	r2, [pc, #40]	; (1000f4e4 <sms_init_variables+0x6c>)
1000f4ba:	8013      	strh	r3, [r2, #0]
}
1000f4bc:	bd10      	pop	{r4, pc}
1000f4be:	46c0      	nop			; (mov r8, r8)
1000f4c0:	10019af8 	.word	0x10019af8
1000f4c4:	100199e8 	.word	0x100199e8
1000f4c8:	10019a5c 	.word	0x10019a5c
1000f4cc:	1001994c 	.word	0x1001994c
1000f4d0:	10019af9 	.word	0x10019af9
1000f4d4:	100199e0 	.word	0x100199e0
1000f4d8:	10019948 	.word	0x10019948
1000f4dc:	100199e1 	.word	0x100199e1
1000f4e0:	100199e4 	.word	0x100199e4
1000f4e4:	10019b14 	.word	0x10019b14

1000f4e8 <main>:
    //sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000f4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f4ea:	2210      	movs	r2, #16
1000f4ec:	4b9b      	ldr	r3, [pc, #620]	; (1000f75c <main+0x274>)
1000f4ee:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f4f0:	4b9b      	ldr	r3, [pc, #620]	; (1000f760 <main+0x278>)
1000f4f2:	4798      	blx	r3
	gpio_init(); // GPIO
1000f4f4:	4b9b      	ldr	r3, [pc, #620]	; (1000f764 <main+0x27c>)
1000f4f6:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f4f8:	4b9b      	ldr	r3, [pc, #620]	; (1000f768 <main+0x280>)
1000f4fa:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f4fc:	4b9b      	ldr	r3, [pc, #620]	; (1000f76c <main+0x284>)
1000f4fe:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f500:	4b9b      	ldr	r3, [pc, #620]	; (1000f770 <main+0x288>)
1000f502:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f504:	4b9b      	ldr	r3, [pc, #620]	; (1000f774 <main+0x28c>)
1000f506:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f508:	4b9b      	ldr	r3, [pc, #620]	; (1000f778 <main+0x290>)
1000f50a:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f50c:	4b9b      	ldr	r3, [pc, #620]	; (1000f77c <main+0x294>)
1000f50e:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f510:	4b9b      	ldr	r3, [pc, #620]	; (1000f780 <main+0x298>)
1000f512:	4798      	blx	r3
    
    // I2C
    //sms_i2c_master_configure();
    
    // SPI
    sms_spi_master_configure();
1000f514:	4b9b      	ldr	r3, [pc, #620]	; (1000f784 <main+0x29c>)
1000f516:	4798      	blx	r3
    
    // MPU
    //sms_mpu_configure_gpio();
    
    // MS58
    pressure_device.hal.current_state = MS58_STATE_NONE;
1000f518:	2100      	movs	r1, #0
1000f51a:	2325      	movs	r3, #37	; 0x25
1000f51c:	4a9a      	ldr	r2, [pc, #616]	; (1000f788 <main+0x2a0>)
1000f51e:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000f520:	4b9a      	ldr	r3, [pc, #616]	; (1000f78c <main+0x2a4>)
1000f522:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f524:	2000      	movs	r0, #0
1000f526:	4b9a      	ldr	r3, [pc, #616]	; (1000f790 <main+0x2a8>)
1000f528:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f52a:	4b9a      	ldr	r3, [pc, #616]	; (1000f794 <main+0x2ac>)
1000f52c:	4798      	blx	r3
    sms_pressure_define_services();
1000f52e:	4b9a      	ldr	r3, [pc, #616]	; (1000f798 <main+0x2b0>)
1000f530:	4798      	blx	r3
    sms_mpu_define_services();
1000f532:	4b9a      	ldr	r3, [pc, #616]	; (1000f79c <main+0x2b4>)
1000f534:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f536:	489a      	ldr	r0, [pc, #616]	; (1000f7a0 <main+0x2b8>)
1000f538:	4b9a      	ldr	r3, [pc, #616]	; (1000f7a4 <main+0x2bc>)
1000f53a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f53c:	499a      	ldr	r1, [pc, #616]	; (1000f7a8 <main+0x2c0>)
1000f53e:	2000      	movs	r0, #0
1000f540:	4c9a      	ldr	r4, [pc, #616]	; (1000f7ac <main+0x2c4>)
1000f542:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f544:	499a      	ldr	r1, [pc, #616]	; (1000f7b0 <main+0x2c8>)
1000f546:	2001      	movs	r0, #1
1000f548:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f54a:	4b9a      	ldr	r3, [pc, #616]	; (1000f7b4 <main+0x2cc>)
1000f54c:	4798      	blx	r3
    
    // MPU
    //sms_mpu_register_callbacks();

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f54e:	4a9a      	ldr	r2, [pc, #616]	; (1000f7b8 <main+0x2d0>)
1000f550:	2100      	movs	r1, #0
1000f552:	2000      	movs	r0, #0
1000f554:	4c99      	ldr	r4, [pc, #612]	; (1000f7bc <main+0x2d4>)
1000f556:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f558:	4a99      	ldr	r2, [pc, #612]	; (1000f7c0 <main+0x2d8>)
1000f55a:	2102      	movs	r1, #2
1000f55c:	2000      	movs	r0, #0
1000f55e:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f560:	2100      	movs	r1, #0
1000f562:	2000      	movs	r0, #0
1000f564:	4b97      	ldr	r3, [pc, #604]	; (1000f7c4 <main+0x2dc>)
1000f566:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000f568:	4b97      	ldr	r3, [pc, #604]	; (1000f7c8 <main+0x2e0>)
1000f56a:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f56c:	4d97      	ldr	r5, [pc, #604]	; (1000f7cc <main+0x2e4>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f56e:	4c98      	ldr	r4, [pc, #608]	; (1000f7d0 <main+0x2e8>)
        {
            if(ulp_active) {
1000f570:	4e98      	ldr	r6, [pc, #608]	; (1000f7d4 <main+0x2ec>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f572:	2001      	movs	r0, #1
1000f574:	4240      	negs	r0, r0
1000f576:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f578:	7863      	ldrb	r3, [r4, #1]
1000f57a:	2b00      	cmp	r3, #0
1000f57c:	d100      	bne.n	1000f580 <main+0x98>
1000f57e:	e0d9      	b.n	1000f734 <main+0x24c>
        {
            if(ulp_active) {
1000f580:	7833      	ldrb	r3, [r6, #0]
1000f582:	2b00      	cmp	r3, #0
1000f584:	d009      	beq.n	1000f59a <main+0xb2>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000f586:	4894      	ldr	r0, [pc, #592]	; (1000f7d8 <main+0x2f0>)
1000f588:	4b94      	ldr	r3, [pc, #592]	; (1000f7dc <main+0x2f4>)
1000f58a:	4798      	blx	r3
1000f58c:	4894      	ldr	r0, [pc, #592]	; (1000f7e0 <main+0x2f8>)
1000f58e:	4f95      	ldr	r7, [pc, #596]	; (1000f7e4 <main+0x2fc>)
1000f590:	47b8      	blx	r7
                acquire_sleep_lock();
1000f592:	4b76      	ldr	r3, [pc, #472]	; (1000f76c <main+0x284>)
1000f594:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000f596:	4894      	ldr	r0, [pc, #592]	; (1000f7e8 <main+0x300>)
1000f598:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000f59a:	488f      	ldr	r0, [pc, #572]	; (1000f7d8 <main+0x2f0>)
1000f59c:	4b8f      	ldr	r3, [pc, #572]	; (1000f7dc <main+0x2f4>)
1000f59e:	4798      	blx	r3
1000f5a0:	4892      	ldr	r0, [pc, #584]	; (1000f7ec <main+0x304>)
1000f5a2:	4f90      	ldr	r7, [pc, #576]	; (1000f7e4 <main+0x2fc>)
1000f5a4:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000f5a6:	2101      	movs	r1, #1
1000f5a8:	2001      	movs	r0, #1
1000f5aa:	4b86      	ldr	r3, [pc, #536]	; (1000f7c4 <main+0x2dc>)
1000f5ac:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f5ae:	488e      	ldr	r0, [pc, #568]	; (1000f7e8 <main+0x300>)
1000f5b0:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000f5b2:	4b87      	ldr	r3, [pc, #540]	; (1000f7d0 <main+0x2e8>)
1000f5b4:	781b      	ldrb	r3, [r3, #0]
1000f5b6:	b2db      	uxtb	r3, r3
1000f5b8:	2b06      	cmp	r3, #6
1000f5ba:	d900      	bls.n	1000f5be <main+0xd6>
1000f5bc:	e0a4      	b.n	1000f708 <main+0x220>
1000f5be:	009b      	lsls	r3, r3, #2
1000f5c0:	4a8b      	ldr	r2, [pc, #556]	; (1000f7f0 <main+0x308>)
1000f5c2:	58d3      	ldr	r3, [r2, r3]
1000f5c4:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000f5c6:	4884      	ldr	r0, [pc, #528]	; (1000f7d8 <main+0x2f0>)
1000f5c8:	4b84      	ldr	r3, [pc, #528]	; (1000f7dc <main+0x2f4>)
1000f5ca:	4798      	blx	r3
1000f5cc:	4889      	ldr	r0, [pc, #548]	; (1000f7f4 <main+0x30c>)
1000f5ce:	4b85      	ldr	r3, [pc, #532]	; (1000f7e4 <main+0x2fc>)
1000f5d0:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f5d2:	e09f      	b.n	1000f714 <main+0x22c>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000f5d4:	4880      	ldr	r0, [pc, #512]	; (1000f7d8 <main+0x2f0>)
1000f5d6:	4b81      	ldr	r3, [pc, #516]	; (1000f7dc <main+0x2f4>)
1000f5d8:	4798      	blx	r3
1000f5da:	4887      	ldr	r0, [pc, #540]	; (1000f7f8 <main+0x310>)
1000f5dc:	4b81      	ldr	r3, [pc, #516]	; (1000f7e4 <main+0x2fc>)
1000f5de:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f5e0:	4b86      	ldr	r3, [pc, #536]	; (1000f7fc <main+0x314>)
1000f5e2:	781b      	ldrb	r3, [r3, #0]
1000f5e4:	2b04      	cmp	r3, #4
1000f5e6:	d00c      	beq.n	1000f602 <main+0x11a>
1000f5e8:	4b84      	ldr	r3, [pc, #528]	; (1000f7fc <main+0x314>)
1000f5ea:	781b      	ldrb	r3, [r3, #0]
1000f5ec:	2b07      	cmp	r3, #7
1000f5ee:	d008      	beq.n	1000f602 <main+0x11a>
1000f5f0:	4b82      	ldr	r3, [pc, #520]	; (1000f7fc <main+0x314>)
1000f5f2:	781b      	ldrb	r3, [r3, #0]
1000f5f4:	2b01      	cmp	r3, #1
1000f5f6:	d004      	beq.n	1000f602 <main+0x11a>
1000f5f8:	4b80      	ldr	r3, [pc, #512]	; (1000f7fc <main+0x314>)
1000f5fa:	781b      	ldrb	r3, [r3, #0]
1000f5fc:	2b05      	cmp	r3, #5
1000f5fe:	d000      	beq.n	1000f602 <main+0x11a>
1000f600:	e088      	b.n	1000f714 <main+0x22c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000f602:	2000      	movs	r0, #0
1000f604:	4b7e      	ldr	r3, [pc, #504]	; (1000f800 <main+0x318>)
1000f606:	4798      	blx	r3
1000f608:	2800      	cmp	r0, #0
1000f60a:	db00      	blt.n	1000f60e <main+0x126>
1000f60c:	e082      	b.n	1000f714 <main+0x22c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f60e:	4872      	ldr	r0, [pc, #456]	; (1000f7d8 <main+0x2f0>)
1000f610:	4b72      	ldr	r3, [pc, #456]	; (1000f7dc <main+0x2f4>)
1000f612:	4798      	blx	r3
1000f614:	487b      	ldr	r0, [pc, #492]	; (1000f804 <main+0x31c>)
1000f616:	4b73      	ldr	r3, [pc, #460]	; (1000f7e4 <main+0x2fc>)
1000f618:	4798      	blx	r3
1000f61a:	e07b      	b.n	1000f714 <main+0x22c>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000f61c:	486e      	ldr	r0, [pc, #440]	; (1000f7d8 <main+0x2f0>)
1000f61e:	4b6f      	ldr	r3, [pc, #444]	; (1000f7dc <main+0x2f4>)
1000f620:	4798      	blx	r3
1000f622:	4879      	ldr	r0, [pc, #484]	; (1000f808 <main+0x320>)
1000f624:	4b6f      	ldr	r3, [pc, #444]	; (1000f7e4 <main+0x2fc>)
1000f626:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f628:	4b74      	ldr	r3, [pc, #464]	; (1000f7fc <main+0x314>)
1000f62a:	781b      	ldrb	r3, [r3, #0]
1000f62c:	2b04      	cmp	r3, #4
1000f62e:	d00b      	beq.n	1000f648 <main+0x160>
1000f630:	4b72      	ldr	r3, [pc, #456]	; (1000f7fc <main+0x314>)
1000f632:	781b      	ldrb	r3, [r3, #0]
1000f634:	2b07      	cmp	r3, #7
1000f636:	d007      	beq.n	1000f648 <main+0x160>
1000f638:	4b70      	ldr	r3, [pc, #448]	; (1000f7fc <main+0x314>)
1000f63a:	781b      	ldrb	r3, [r3, #0]
1000f63c:	2b01      	cmp	r3, #1
1000f63e:	d003      	beq.n	1000f648 <main+0x160>
1000f640:	4b6e      	ldr	r3, [pc, #440]	; (1000f7fc <main+0x314>)
1000f642:	781b      	ldrb	r3, [r3, #0]
1000f644:	2b05      	cmp	r3, #5
1000f646:	d165      	bne.n	1000f714 <main+0x22c>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000f648:	2001      	movs	r0, #1
1000f64a:	4b6d      	ldr	r3, [pc, #436]	; (1000f800 <main+0x318>)
1000f64c:	4798      	blx	r3
1000f64e:	2800      	cmp	r0, #0
1000f650:	da60      	bge.n	1000f714 <main+0x22c>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f652:	4861      	ldr	r0, [pc, #388]	; (1000f7d8 <main+0x2f0>)
1000f654:	4b61      	ldr	r3, [pc, #388]	; (1000f7dc <main+0x2f4>)
1000f656:	4798      	blx	r3
1000f658:	486a      	ldr	r0, [pc, #424]	; (1000f804 <main+0x31c>)
1000f65a:	4b62      	ldr	r3, [pc, #392]	; (1000f7e4 <main+0x2fc>)
1000f65c:	4798      	blx	r3
1000f65e:	e059      	b.n	1000f714 <main+0x22c>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000f660:	485d      	ldr	r0, [pc, #372]	; (1000f7d8 <main+0x2f0>)
1000f662:	4b5e      	ldr	r3, [pc, #376]	; (1000f7dc <main+0x2f4>)
1000f664:	4798      	blx	r3
1000f666:	4869      	ldr	r0, [pc, #420]	; (1000f80c <main+0x324>)
1000f668:	4b5e      	ldr	r3, [pc, #376]	; (1000f7e4 <main+0x2fc>)
1000f66a:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    //sms_mpu_poll_data();
                //}                    
                break;
1000f66c:	e052      	b.n	1000f714 <main+0x22c>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("...AON_TIMER");
1000f66e:	485a      	ldr	r0, [pc, #360]	; (1000f7d8 <main+0x2f0>)
1000f670:	4b5a      	ldr	r3, [pc, #360]	; (1000f7dc <main+0x2f4>)
1000f672:	4798      	blx	r3
1000f674:	4866      	ldr	r0, [pc, #408]	; (1000f810 <main+0x328>)
1000f676:	4b5b      	ldr	r3, [pc, #364]	; (1000f7e4 <main+0x2fc>)
1000f678:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000f67a:	4b60      	ldr	r3, [pc, #384]	; (1000f7fc <main+0x314>)
1000f67c:	781b      	ldrb	r3, [r3, #0]
1000f67e:	2b05      	cmp	r3, #5
1000f680:	d00b      	beq.n	1000f69a <main+0x1b2>
1000f682:	4b5e      	ldr	r3, [pc, #376]	; (1000f7fc <main+0x314>)
1000f684:	781b      	ldrb	r3, [r3, #0]
1000f686:	2b07      	cmp	r3, #7
1000f688:	d007      	beq.n	1000f69a <main+0x1b2>
1000f68a:	4b5c      	ldr	r3, [pc, #368]	; (1000f7fc <main+0x314>)
1000f68c:	781b      	ldrb	r3, [r3, #0]
1000f68e:	2b03      	cmp	r3, #3
1000f690:	d003      	beq.n	1000f69a <main+0x1b2>
1000f692:	4b5a      	ldr	r3, [pc, #360]	; (1000f7fc <main+0x314>)
1000f694:	781b      	ldrb	r3, [r3, #0]
1000f696:	2b06      	cmp	r3, #6
1000f698:	d13c      	bne.n	1000f714 <main+0x22c>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000f69a:	4b30      	ldr	r3, [pc, #192]	; (1000f75c <main+0x274>)
1000f69c:	781b      	ldrb	r3, [r3, #0]
1000f69e:	2b22      	cmp	r3, #34	; 0x22
1000f6a0:	d10a      	bne.n	1000f6b8 <main+0x1d0>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000f6a2:	484d      	ldr	r0, [pc, #308]	; (1000f7d8 <main+0x2f0>)
1000f6a4:	4b4d      	ldr	r3, [pc, #308]	; (1000f7dc <main+0x2f4>)
1000f6a6:	4798      	blx	r3
1000f6a8:	485a      	ldr	r0, [pc, #360]	; (1000f814 <main+0x32c>)
1000f6aa:	4f4e      	ldr	r7, [pc, #312]	; (1000f7e4 <main+0x2fc>)
1000f6ac:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000f6ae:	4b5a      	ldr	r3, [pc, #360]	; (1000f818 <main+0x330>)
1000f6b0:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000f6b2:	484d      	ldr	r0, [pc, #308]	; (1000f7e8 <main+0x300>)
1000f6b4:	47b8      	blx	r7
1000f6b6:	e02d      	b.n	1000f714 <main+0x22c>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000f6b8:	4b28      	ldr	r3, [pc, #160]	; (1000f75c <main+0x274>)
1000f6ba:	781b      	ldrb	r3, [r3, #0]
1000f6bc:	2b23      	cmp	r3, #35	; 0x23
1000f6be:	d106      	bne.n	1000f6ce <main+0x1e6>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000f6c0:	4845      	ldr	r0, [pc, #276]	; (1000f7d8 <main+0x2f0>)
1000f6c2:	4b46      	ldr	r3, [pc, #280]	; (1000f7dc <main+0x2f4>)
1000f6c4:	4798      	blx	r3
1000f6c6:	4855      	ldr	r0, [pc, #340]	; (1000f81c <main+0x334>)
1000f6c8:	4b46      	ldr	r3, [pc, #280]	; (1000f7e4 <main+0x2fc>)
1000f6ca:	4798      	blx	r3
1000f6cc:	e022      	b.n	1000f714 <main+0x22c>
                    }
                    else {
                        sms_timer_aon_disable();
1000f6ce:	4b54      	ldr	r3, [pc, #336]	; (1000f820 <main+0x338>)
1000f6d0:	4798      	blx	r3
                        sms_ble_power_down();
1000f6d2:	4b3d      	ldr	r3, [pc, #244]	; (1000f7c8 <main+0x2e0>)
1000f6d4:	4798      	blx	r3
1000f6d6:	e01d      	b.n	1000f714 <main+0x22c>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000f6d8:	483f      	ldr	r0, [pc, #252]	; (1000f7d8 <main+0x2f0>)
1000f6da:	4b40      	ldr	r3, [pc, #256]	; (1000f7dc <main+0x2f4>)
1000f6dc:	4798      	blx	r3
1000f6de:	4851      	ldr	r0, [pc, #324]	; (1000f824 <main+0x33c>)
1000f6e0:	4b40      	ldr	r3, [pc, #256]	; (1000f7e4 <main+0x2fc>)
1000f6e2:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f6e4:	2000      	movs	r0, #0
1000f6e6:	4b50      	ldr	r3, [pc, #320]	; (1000f828 <main+0x340>)
1000f6e8:	4798      	blx	r3
                sms_dualtimer1_fn();
1000f6ea:	4b50      	ldr	r3, [pc, #320]	; (1000f82c <main+0x344>)
1000f6ec:	4798      	blx	r3
                break;
1000f6ee:	e011      	b.n	1000f714 <main+0x22c>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000f6f0:	4839      	ldr	r0, [pc, #228]	; (1000f7d8 <main+0x2f0>)
1000f6f2:	4b3a      	ldr	r3, [pc, #232]	; (1000f7dc <main+0x2f4>)
1000f6f4:	4798      	blx	r3
1000f6f6:	484e      	ldr	r0, [pc, #312]	; (1000f830 <main+0x348>)
1000f6f8:	4b3a      	ldr	r3, [pc, #232]	; (1000f7e4 <main+0x2fc>)
1000f6fa:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f6fc:	2001      	movs	r0, #1
1000f6fe:	4b4a      	ldr	r3, [pc, #296]	; (1000f828 <main+0x340>)
1000f700:	4798      	blx	r3
                sms_dualtimer2_fn();
1000f702:	4b4c      	ldr	r3, [pc, #304]	; (1000f834 <main+0x34c>)
1000f704:	4798      	blx	r3
                break;
1000f706:	e005      	b.n	1000f714 <main+0x22c>
                
                default:
                DBG_LOG_DEV("...??");
1000f708:	4833      	ldr	r0, [pc, #204]	; (1000f7d8 <main+0x2f0>)
1000f70a:	4b34      	ldr	r3, [pc, #208]	; (1000f7dc <main+0x2f4>)
1000f70c:	4798      	blx	r3
1000f70e:	484a      	ldr	r0, [pc, #296]	; (1000f838 <main+0x350>)
1000f710:	4b34      	ldr	r3, [pc, #208]	; (1000f7e4 <main+0x2fc>)
1000f712:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000f714:	4830      	ldr	r0, [pc, #192]	; (1000f7d8 <main+0x2f0>)
1000f716:	4b31      	ldr	r3, [pc, #196]	; (1000f7dc <main+0x2f4>)
1000f718:	4798      	blx	r3
1000f71a:	4848      	ldr	r0, [pc, #288]	; (1000f83c <main+0x354>)
1000f71c:	4f31      	ldr	r7, [pc, #196]	; (1000f7e4 <main+0x2fc>)
1000f71e:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f720:	2100      	movs	r1, #0
1000f722:	2000      	movs	r0, #0
1000f724:	4b27      	ldr	r3, [pc, #156]	; (1000f7c4 <main+0x2dc>)
1000f726:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f728:	482f      	ldr	r0, [pc, #188]	; (1000f7e8 <main+0x300>)
1000f72a:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000f72c:	4b28      	ldr	r3, [pc, #160]	; (1000f7d0 <main+0x2e8>)
1000f72e:	2200      	movs	r2, #0
1000f730:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000f732:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000f734:	4b42      	ldr	r3, [pc, #264]	; (1000f840 <main+0x358>)
1000f736:	781b      	ldrb	r3, [r3, #0]
1000f738:	2b00      	cmp	r3, #0
1000f73a:	d00b      	beq.n	1000f754 <main+0x26c>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000f73c:	4826      	ldr	r0, [pc, #152]	; (1000f7d8 <main+0x2f0>)
1000f73e:	4b27      	ldr	r3, [pc, #156]	; (1000f7dc <main+0x2f4>)
1000f740:	4798      	blx	r3
1000f742:	4840      	ldr	r0, [pc, #256]	; (1000f844 <main+0x35c>)
1000f744:	4f27      	ldr	r7, [pc, #156]	; (1000f7e4 <main+0x2fc>)
1000f746:	47b8      	blx	r7
            ulp_active = true;
1000f748:	2201      	movs	r2, #1
1000f74a:	4b22      	ldr	r3, [pc, #136]	; (1000f7d4 <main+0x2ec>)
1000f74c:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000f74e:	483e      	ldr	r0, [pc, #248]	; (1000f848 <main+0x360>)
1000f750:	47b8      	blx	r7
1000f752:	e70e      	b.n	1000f572 <main+0x8a>
        }            
        else {
            ulp_active = false;
1000f754:	2200      	movs	r2, #0
1000f756:	4b1f      	ldr	r3, [pc, #124]	; (1000f7d4 <main+0x2ec>)
1000f758:	701a      	strb	r2, [r3, #0]
1000f75a:	e70a      	b.n	1000f572 <main+0x8a>
1000f75c:	10019af8 	.word	0x10019af8
1000f760:	1000eced 	.word	0x1000eced
1000f764:	1000c281 	.word	0x1000c281
1000f768:	1000e9e1 	.word	0x1000e9e1
1000f76c:	1000f241 	.word	0x1000f241
1000f770:	1000f479 	.word	0x1000f479
1000f774:	1000b1cd 	.word	0x1000b1cd
1000f778:	100080e9 	.word	0x100080e9
1000f77c:	1000a231 	.word	0x1000a231
1000f780:	1000aa65 	.word	0x1000aa65
1000f784:	1000b085 	.word	0x1000b085
1000f788:	10019a5c 	.word	0x10019a5c
1000f78c:	1000a659 	.word	0x1000a659
1000f790:	1000e061 	.word	0x1000e061
1000f794:	1000a5f1 	.word	0x1000a5f1
1000f798:	1000af0d 	.word	0x1000af0d
1000f79c:	1000a9d9 	.word	0x1000a9d9
1000f7a0:	1000f42d 	.word	0x1000f42d
1000f7a4:	1000f285 	.word	0x1000f285
1000f7a8:	1000b28d 	.word	0x1000b28d
1000f7ac:	1000b209 	.word	0x1000b209
1000f7b0:	1000b2b1 	.word	0x1000b2b1
1000f7b4:	1000a2e5 	.word	0x1000a2e5
1000f7b8:	100163d0 	.word	0x100163d0
1000f7bc:	1000df91 	.word	0x1000df91
1000f7c0:	1001641c 	.word	0x1001641c
1000f7c4:	1000a5a5 	.word	0x1000a5a5
1000f7c8:	10009c29 	.word	0x10009c29
1000f7cc:	1000e859 	.word	0x1000e859
1000f7d0:	10019ae0 	.word	0x10019ae0
1000f7d4:	10019aff 	.word	0x10019aff
1000f7d8:	10015e2c 	.word	0x10015e2c
1000f7dc:	10014c6d 	.word	0x10014c6d
1000f7e0:	10017a7c 	.word	0x10017a7c
1000f7e4:	10014b4d 	.word	0x10014b4d
1000f7e8:	10017a94 	.word	0x10017a94
1000f7ec:	10017a9c 	.word	0x10017a9c
1000f7f0:	10017a60 	.word	0x10017a60
1000f7f4:	10017ac0 	.word	0x10017ac0
1000f7f8:	10017ad0 	.word	0x10017ad0
1000f7fc:	100199e0 	.word	0x100199e0
1000f800:	1000a361 	.word	0x1000a361
1000f804:	10017ad8 	.word	0x10017ad8
1000f808:	10017afc 	.word	0x10017afc
1000f80c:	10017b04 	.word	0x10017b04
1000f810:	10017b10 	.word	0x10017b10
1000f814:	10017b20 	.word	0x10017b20
1000f818:	1000ae9d 	.word	0x1000ae9d
1000f81c:	10017b44 	.word	0x10017b44
1000f820:	1000b185 	.word	0x1000b185
1000f824:	10017b7c 	.word	0x10017b7c
1000f828:	1000b281 	.word	0x1000b281
1000f82c:	1000b2d5 	.word	0x1000b2d5
1000f830:	10017b8c 	.word	0x10017b8c
1000f834:	1000b515 	.word	0x1000b515
1000f838:	10017b9c 	.word	0x10017b9c
1000f83c:	10017ba4 	.word	0x10017ba4
1000f840:	100199e1 	.word	0x100199e1
1000f844:	10017bc8 	.word	0x10017bc8
1000f848:	10017bdc 	.word	0x10017bdc

1000f84c <internal_event_post>:
1000f84c:	b570      	push	{r4, r5, r6, lr}
1000f84e:	4d12      	ldr	r5, [pc, #72]	; (1000f898 <internal_event_post+0x4c>)
1000f850:	682c      	ldr	r4, [r5, #0]
1000f852:	2c00      	cmp	r4, #0
1000f854:	d014      	beq.n	1000f880 <internal_event_post+0x34>
1000f856:	6826      	ldr	r6, [r4, #0]
1000f858:	60e2      	str	r2, [r4, #12]
1000f85a:	602e      	str	r6, [r5, #0]
1000f85c:	2500      	movs	r5, #0
1000f85e:	4a0f      	ldr	r2, [pc, #60]	; (1000f89c <internal_event_post+0x50>)
1000f860:	8123      	strh	r3, [r4, #8]
1000f862:	6813      	ldr	r3, [r2, #0]
1000f864:	6025      	str	r5, [r4, #0]
1000f866:	80a0      	strh	r0, [r4, #4]
1000f868:	80e1      	strh	r1, [r4, #6]
1000f86a:	42ab      	cmp	r3, r5
1000f86c:	d101      	bne.n	1000f872 <internal_event_post+0x26>
1000f86e:	6014      	str	r4, [r2, #0]
1000f870:	e011      	b.n	1000f896 <internal_event_post+0x4a>
1000f872:	681a      	ldr	r2, [r3, #0]
1000f874:	2a00      	cmp	r2, #0
1000f876:	d001      	beq.n	1000f87c <internal_event_post+0x30>
1000f878:	1c13      	adds	r3, r2, #0
1000f87a:	e7fa      	b.n	1000f872 <internal_event_post+0x26>
1000f87c:	601c      	str	r4, [r3, #0]
1000f87e:	e00a      	b.n	1000f896 <internal_event_post+0x4a>
1000f880:	b2c4      	uxtb	r4, r0
1000f882:	2c00      	cmp	r4, #0
1000f884:	d107      	bne.n	1000f896 <internal_event_post+0x4a>
1000f886:	4c06      	ldr	r4, [pc, #24]	; (1000f8a0 <internal_event_post+0x54>)
1000f888:	60e2      	str	r2, [r4, #12]
1000f88a:	2201      	movs	r2, #1
1000f88c:	8123      	strh	r3, [r4, #8]
1000f88e:	4b05      	ldr	r3, [pc, #20]	; (1000f8a4 <internal_event_post+0x58>)
1000f890:	80a0      	strh	r0, [r4, #4]
1000f892:	80e1      	strh	r1, [r4, #6]
1000f894:	701a      	strb	r2, [r3, #0]
1000f896:	bd70      	pop	{r4, r5, r6, pc}
1000f898:	10019890 	.word	0x10019890
1000f89c:	1001988c 	.word	0x1001988c
1000f8a0:	10019878 	.word	0x10019878
1000f8a4:	10019888 	.word	0x10019888

1000f8a8 <internal_event_init>:
1000f8a8:	b510      	push	{r4, lr}
1000f8aa:	4b08      	ldr	r3, [pc, #32]	; (1000f8cc <internal_event_init+0x24>)
1000f8ac:	0900      	lsrs	r0, r0, #4
1000f8ae:	0100      	lsls	r0, r0, #4
1000f8b0:	681a      	ldr	r2, [r3, #0]
1000f8b2:	1808      	adds	r0, r1, r0
1000f8b4:	4281      	cmp	r1, r0
1000f8b6:	d003      	beq.n	1000f8c0 <internal_event_init+0x18>
1000f8b8:	600a      	str	r2, [r1, #0]
1000f8ba:	1c0a      	adds	r2, r1, #0
1000f8bc:	3110      	adds	r1, #16
1000f8be:	e7f9      	b.n	1000f8b4 <internal_event_init+0xc>
1000f8c0:	601a      	str	r2, [r3, #0]
1000f8c2:	2200      	movs	r2, #0
1000f8c4:	4b02      	ldr	r3, [pc, #8]	; (1000f8d0 <internal_event_init+0x28>)
1000f8c6:	601a      	str	r2, [r3, #0]
1000f8c8:	bd10      	pop	{r4, pc}
1000f8ca:	46c0      	nop			; (mov r8, r8)
1000f8cc:	10019890 	.word	0x10019890
1000f8d0:	1001988c 	.word	0x1001988c

1000f8d4 <special_events_handler>:
1000f8d4:	b538      	push	{r3, r4, r5, lr}
1000f8d6:	4c1b      	ldr	r4, [pc, #108]	; (1000f944 <special_events_handler+0x70>)
1000f8d8:	1c03      	adds	r3, r0, #0
1000f8da:	8825      	ldrh	r5, [r4, #0]
1000f8dc:	1c08      	adds	r0, r1, #0
1000f8de:	1c21      	adds	r1, r4, #0
1000f8e0:	429d      	cmp	r5, r3
1000f8e2:	d107      	bne.n	1000f8f4 <special_events_handler+0x20>
1000f8e4:	88a5      	ldrh	r5, [r4, #4]
1000f8e6:	4285      	cmp	r5, r0
1000f8e8:	d104      	bne.n	1000f8f4 <special_events_handler+0x20>
1000f8ea:	2301      	movs	r3, #1
1000f8ec:	425b      	negs	r3, r3
1000f8ee:	8023      	strh	r3, [r4, #0]
1000f8f0:	60a2      	str	r2, [r4, #8]
1000f8f2:	e009      	b.n	1000f908 <special_events_handler+0x34>
1000f8f4:	884c      	ldrh	r4, [r1, #2]
1000f8f6:	429c      	cmp	r4, r3
1000f8f8:	d10a      	bne.n	1000f910 <special_events_handler+0x3c>
1000f8fa:	888c      	ldrh	r4, [r1, #4]
1000f8fc:	4284      	cmp	r4, r0
1000f8fe:	d107      	bne.n	1000f910 <special_events_handler+0x3c>
1000f900:	2301      	movs	r3, #1
1000f902:	425b      	negs	r3, r3
1000f904:	804b      	strh	r3, [r1, #2]
1000f906:	608a      	str	r2, [r1, #8]
1000f908:	4b0f      	ldr	r3, [pc, #60]	; (1000f948 <special_events_handler+0x74>)
1000f90a:	4798      	blx	r3
1000f90c:	2001      	movs	r0, #1
1000f90e:	e017      	b.n	1000f940 <special_events_handler+0x6c>
1000f910:	490e      	ldr	r1, [pc, #56]	; (1000f94c <special_events_handler+0x78>)
1000f912:	428b      	cmp	r3, r1
1000f914:	d00e      	beq.n	1000f934 <special_events_handler+0x60>
1000f916:	490e      	ldr	r1, [pc, #56]	; (1000f950 <special_events_handler+0x7c>)
1000f918:	428b      	cmp	r3, r1
1000f91a:	d007      	beq.n	1000f92c <special_events_handler+0x58>
1000f91c:	490d      	ldr	r1, [pc, #52]	; (1000f954 <special_events_handler+0x80>)
1000f91e:	2000      	movs	r0, #0
1000f920:	428b      	cmp	r3, r1
1000f922:	d10d      	bne.n	1000f940 <special_events_handler+0x6c>
1000f924:	1c10      	adds	r0, r2, #0
1000f926:	4b0c      	ldr	r3, [pc, #48]	; (1000f958 <special_events_handler+0x84>)
1000f928:	4798      	blx	r3
1000f92a:	e7ef      	b.n	1000f90c <special_events_handler+0x38>
1000f92c:	1c11      	adds	r1, r2, #0
1000f92e:	4b0b      	ldr	r3, [pc, #44]	; (1000f95c <special_events_handler+0x88>)
1000f930:	2200      	movs	r2, #0
1000f932:	e002      	b.n	1000f93a <special_events_handler+0x66>
1000f934:	1c11      	adds	r1, r2, #0
1000f936:	2200      	movs	r2, #0
1000f938:	4b09      	ldr	r3, [pc, #36]	; (1000f960 <special_events_handler+0x8c>)
1000f93a:	4798      	blx	r3
1000f93c:	4243      	negs	r3, r0
1000f93e:	4158      	adcs	r0, r3
1000f940:	bd38      	pop	{r3, r4, r5, pc}
1000f942:	46c0      	nop			; (mov r8, r8)
1000f944:	1001a794 	.word	0x1001a794
1000f948:	10011331 	.word	0x10011331
1000f94c:	00000e13 	.word	0x00000e13
1000f950:	00000e15 	.word	0x00000e15
1000f954:	00000e01 	.word	0x00000e01
1000f958:	100116a1 	.word	0x100116a1
1000f95c:	10011861 	.word	0x10011861
1000f960:	10011939 	.word	0x10011939

1000f964 <at_ble_event_get>:
1000f964:	2300      	movs	r3, #0
1000f966:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f968:	b087      	sub	sp, #28
1000f96a:	9204      	str	r2, [sp, #16]
1000f96c:	7003      	strb	r3, [r0, #0]
1000f96e:	9b04      	ldr	r3, [sp, #16]
1000f970:	9003      	str	r0, [sp, #12]
1000f972:	3b01      	subs	r3, #1
1000f974:	1c0d      	adds	r5, r1, #0
1000f976:	9305      	str	r3, [sp, #20]
1000f978:	3303      	adds	r3, #3
1000f97a:	d802      	bhi.n	1000f982 <at_ble_event_get+0x1e>
1000f97c:	9804      	ldr	r0, [sp, #16]
1000f97e:	4bae      	ldr	r3, [pc, #696]	; (1000fc38 <at_ble_event_get+0x2d4>)
1000f980:	4798      	blx	r3
1000f982:	9b05      	ldr	r3, [sp, #20]
1000f984:	4cad      	ldr	r4, [pc, #692]	; (1000fc3c <at_ble_event_get+0x2d8>)
1000f986:	3303      	adds	r3, #3
1000f988:	d902      	bls.n	1000f990 <at_ble_event_get+0x2c>
1000f98a:	2300      	movs	r3, #0
1000f98c:	9302      	str	r3, [sp, #8]
1000f98e:	e015      	b.n	1000f9bc <at_ble_event_get+0x58>
1000f990:	2300      	movs	r3, #0
1000f992:	9302      	str	r3, [sp, #8]
1000f994:	6823      	ldr	r3, [r4, #0]
1000f996:	2b00      	cmp	r3, #0
1000f998:	d113      	bne.n	1000f9c2 <at_ble_event_get+0x5e>
1000f99a:	9b02      	ldr	r3, [sp, #8]
1000f99c:	2bd0      	cmp	r3, #208	; 0xd0
1000f99e:	d100      	bne.n	1000f9a2 <at_ble_event_get+0x3e>
1000f9a0:	e2da      	b.n	1000ff58 <at_ble_event_get+0x5f4>
1000f9a2:	9804      	ldr	r0, [sp, #16]
1000f9a4:	4ba6      	ldr	r3, [pc, #664]	; (1000fc40 <at_ble_event_get+0x2dc>)
1000f9a6:	4798      	blx	r3
1000f9a8:	9002      	str	r0, [sp, #8]
1000f9aa:	2802      	cmp	r0, #2
1000f9ac:	d1f2      	bne.n	1000f994 <at_ble_event_get+0x30>
1000f9ae:	e03f      	b.n	1000fa30 <at_ble_event_get+0xcc>
1000f9b0:	9804      	ldr	r0, [sp, #16]
1000f9b2:	4ba3      	ldr	r3, [pc, #652]	; (1000fc40 <at_ble_event_get+0x2dc>)
1000f9b4:	4798      	blx	r3
1000f9b6:	9002      	str	r0, [sp, #8]
1000f9b8:	2802      	cmp	r0, #2
1000f9ba:	d039      	beq.n	1000fa30 <at_ble_event_get+0xcc>
1000f9bc:	6823      	ldr	r3, [r4, #0]
1000f9be:	2b00      	cmp	r3, #0
1000f9c0:	d0f6      	beq.n	1000f9b0 <at_ble_event_get+0x4c>
1000f9c2:	9b02      	ldr	r3, [sp, #8]
1000f9c4:	2bd0      	cmp	r3, #208	; 0xd0
1000f9c6:	d100      	bne.n	1000f9ca <at_ble_event_get+0x66>
1000f9c8:	e2c6      	b.n	1000ff58 <at_ble_event_get+0x5f4>
1000f9ca:	9b02      	ldr	r3, [sp, #8]
1000f9cc:	3b03      	subs	r3, #3
1000f9ce:	1e5a      	subs	r2, r3, #1
1000f9d0:	4193      	sbcs	r3, r2
1000f9d2:	9a02      	ldr	r2, [sp, #8]
1000f9d4:	425b      	negs	r3, r3
1000f9d6:	401a      	ands	r2, r3
1000f9d8:	6823      	ldr	r3, [r4, #0]
1000f9da:	9202      	str	r2, [sp, #8]
1000f9dc:	2b00      	cmp	r3, #0
1000f9de:	d100      	bne.n	1000f9e2 <at_ble_event_get+0x7e>
1000f9e0:	e2c2      	b.n	1000ff68 <at_ble_event_get+0x604>
1000f9e2:	681a      	ldr	r2, [r3, #0]
1000f9e4:	68de      	ldr	r6, [r3, #12]
1000f9e6:	6022      	str	r2, [r4, #0]
1000f9e8:	88da      	ldrh	r2, [r3, #6]
1000f9ea:	9201      	str	r2, [sp, #4]
1000f9ec:	4a95      	ldr	r2, [pc, #596]	; (1000fc44 <at_ble_event_get+0x2e0>)
1000f9ee:	889c      	ldrh	r4, [r3, #4]
1000f9f0:	6811      	ldr	r1, [r2, #0]
1000f9f2:	6013      	str	r3, [r2, #0]
1000f9f4:	6019      	str	r1, [r3, #0]
1000f9f6:	4b94      	ldr	r3, [pc, #592]	; (1000fc48 <at_ble_event_get+0x2e4>)
1000f9f8:	781b      	ldrb	r3, [r3, #0]
1000f9fa:	2b01      	cmp	r3, #1
1000f9fc:	d10f      	bne.n	1000fa1e <at_ble_event_get+0xba>
1000f9fe:	4b93      	ldr	r3, [pc, #588]	; (1000fc4c <at_ble_event_get+0x2e8>)
1000fa00:	4a92      	ldr	r2, [pc, #584]	; (1000fc4c <at_ble_event_get+0x2e8>)
1000fa02:	8898      	ldrh	r0, [r3, #4]
1000fa04:	88d9      	ldrh	r1, [r3, #6]
1000fa06:	68d2      	ldr	r2, [r2, #12]
1000fa08:	891b      	ldrh	r3, [r3, #8]
1000fa0a:	4f91      	ldr	r7, [pc, #580]	; (1000fc50 <at_ble_event_get+0x2ec>)
1000fa0c:	47b8      	blx	r7
1000fa0e:	2210      	movs	r2, #16
1000fa10:	4b90      	ldr	r3, [pc, #576]	; (1000fc54 <at_ble_event_get+0x2f0>)
1000fa12:	488e      	ldr	r0, [pc, #568]	; (1000fc4c <at_ble_event_get+0x2e8>)
1000fa14:	2100      	movs	r1, #0
1000fa16:	4798      	blx	r3
1000fa18:	2300      	movs	r3, #0
1000fa1a:	4a8b      	ldr	r2, [pc, #556]	; (1000fc48 <at_ble_event_get+0x2e4>)
1000fa1c:	7013      	strb	r3, [r2, #0]
1000fa1e:	9b02      	ldr	r3, [sp, #8]
1000fa20:	2b00      	cmp	r3, #0
1000fa22:	d114      	bne.n	1000fa4e <at_ble_event_get+0xea>
1000fa24:	4b8c      	ldr	r3, [pc, #560]	; (1000fc58 <at_ble_event_get+0x2f4>)
1000fa26:	429c      	cmp	r4, r3
1000fa28:	d009      	beq.n	1000fa3e <at_ble_event_get+0xda>
1000fa2a:	4b8c      	ldr	r3, [pc, #560]	; (1000fc5c <at_ble_event_get+0x2f8>)
1000fa2c:	429c      	cmp	r4, r3
1000fa2e:	d127      	bne.n	1000fa80 <at_ble_event_get+0x11c>
1000fa30:	233a      	movs	r3, #58	; 0x3a
1000fa32:	9a03      	ldr	r2, [sp, #12]
1000fa34:	7013      	strb	r3, [r2, #0]
1000fa36:	2300      	movs	r3, #0
1000fa38:	9302      	str	r3, [sp, #8]
1000fa3a:	1c1d      	adds	r5, r3, #0
1000fa3c:	e007      	b.n	1000fa4e <at_ble_event_get+0xea>
1000fa3e:	9b01      	ldr	r3, [sp, #4]
1000fa40:	42a3      	cmp	r3, r4
1000fa42:	d000      	beq.n	1000fa46 <at_ble_event_get+0xe2>
1000fa44:	e28a      	b.n	1000ff5c <at_ble_event_get+0x5f8>
1000fa46:	2338      	movs	r3, #56	; 0x38
1000fa48:	9a03      	ldr	r2, [sp, #12]
1000fa4a:	7013      	strb	r3, [r2, #0]
1000fa4c:	602e      	str	r6, [r5, #0]
1000fa4e:	9b03      	ldr	r3, [sp, #12]
1000fa50:	781b      	ldrb	r3, [r3, #0]
1000fa52:	2b3b      	cmp	r3, #59	; 0x3b
1000fa54:	d101      	bne.n	1000fa5a <at_ble_event_get+0xf6>
1000fa56:	4b82      	ldr	r3, [pc, #520]	; (1000fc60 <at_ble_event_get+0x2fc>)
1000fa58:	4798      	blx	r3
1000fa5a:	9b03      	ldr	r3, [sp, #12]
1000fa5c:	781b      	ldrb	r3, [r3, #0]
1000fa5e:	2b3b      	cmp	r3, #59	; 0x3b
1000fa60:	d003      	beq.n	1000fa6a <at_ble_event_get+0x106>
1000fa62:	9b05      	ldr	r3, [sp, #20]
1000fa64:	3303      	adds	r3, #3
1000fa66:	d904      	bls.n	1000fa72 <at_ble_event_get+0x10e>
1000fa68:	e283      	b.n	1000ff72 <at_ble_event_get+0x60e>
1000fa6a:	9b02      	ldr	r3, [sp, #8]
1000fa6c:	2b00      	cmp	r3, #0
1000fa6e:	d088      	beq.n	1000f982 <at_ble_event_get+0x1e>
1000fa70:	e7f7      	b.n	1000fa62 <at_ble_event_get+0xfe>
1000fa72:	9b02      	ldr	r3, [sp, #8]
1000fa74:	2bd0      	cmp	r3, #208	; 0xd0
1000fa76:	d100      	bne.n	1000fa7a <at_ble_event_get+0x116>
1000fa78:	e27b      	b.n	1000ff72 <at_ble_event_get+0x60e>
1000fa7a:	4b7a      	ldr	r3, [pc, #488]	; (1000fc64 <at_ble_event_get+0x300>)
1000fa7c:	4798      	blx	r3
1000fa7e:	e278      	b.n	1000ff72 <at_ble_event_get+0x60e>
1000fa80:	9b01      	ldr	r3, [sp, #4]
1000fa82:	2bbb      	cmp	r3, #187	; 0xbb
1000fa84:	d125      	bne.n	1000fad2 <at_ble_event_get+0x16e>
1000fa86:	2cbb      	cmp	r4, #187	; 0xbb
1000fa88:	d123      	bne.n	1000fad2 <at_ble_event_get+0x16e>
1000fa8a:	466b      	mov	r3, sp
1000fa8c:	891b      	ldrh	r3, [r3, #8]
1000fa8e:	80ab      	strh	r3, [r5, #4]
1000fa90:	78b3      	ldrb	r3, [r6, #2]
1000fa92:	7872      	ldrb	r2, [r6, #1]
1000fa94:	78f0      	ldrb	r0, [r6, #3]
1000fa96:	021b      	lsls	r3, r3, #8
1000fa98:	4313      	orrs	r3, r2
1000fa9a:	7971      	ldrb	r1, [r6, #5]
1000fa9c:	7932      	ldrb	r2, [r6, #4]
1000fa9e:	70a8      	strb	r0, [r5, #2]
1000faa0:	4871      	ldr	r0, [pc, #452]	; (1000fc68 <at_ble_event_get+0x304>)
1000faa2:	802b      	strh	r3, [r5, #0]
1000faa4:	4283      	cmp	r3, r0
1000faa6:	d806      	bhi.n	1000fab6 <at_ble_event_get+0x152>
1000faa8:	4a70      	ldr	r2, [pc, #448]	; (1000fc6c <at_ble_event_get+0x308>)
1000faaa:	4293      	cmp	r3, r2
1000faac:	d20b      	bcs.n	1000fac6 <at_ble_event_get+0x162>
1000faae:	4a70      	ldr	r2, [pc, #448]	; (1000fc70 <at_ble_event_get+0x30c>)
1000fab0:	4293      	cmp	r3, r2
1000fab2:	d008      	beq.n	1000fac6 <at_ble_event_get+0x162>
1000fab4:	e009      	b.n	1000faca <at_ble_event_get+0x166>
1000fab6:	486f      	ldr	r0, [pc, #444]	; (1000fc74 <at_ble_event_get+0x310>)
1000fab8:	4283      	cmp	r3, r0
1000faba:	d106      	bne.n	1000faca <at_ble_event_get+0x166>
1000fabc:	020b      	lsls	r3, r1, #8
1000fabe:	4313      	orrs	r3, r2
1000fac0:	80ab      	strh	r3, [r5, #4]
1000fac2:	2337      	movs	r3, #55	; 0x37
1000fac4:	e002      	b.n	1000facc <at_ble_event_get+0x168>
1000fac6:	2336      	movs	r3, #54	; 0x36
1000fac8:	e000      	b.n	1000facc <at_ble_event_get+0x168>
1000faca:	2300      	movs	r3, #0
1000facc:	9a03      	ldr	r2, [sp, #12]
1000face:	7013      	strb	r3, [r2, #0]
1000fad0:	e7bd      	b.n	1000fa4e <at_ble_event_get+0xea>
1000fad2:	4b69      	ldr	r3, [pc, #420]	; (1000fc78 <at_ble_event_get+0x314>)
1000fad4:	429c      	cmp	r4, r3
1000fad6:	d100      	bne.n	1000fada <at_ble_event_get+0x176>
1000fad8:	e144      	b.n	1000fd64 <at_ble_event_get+0x400>
1000fada:	d865      	bhi.n	1000fba8 <at_ble_event_get+0x244>
1000fadc:	4b67      	ldr	r3, [pc, #412]	; (1000fc7c <at_ble_event_get+0x318>)
1000fade:	429c      	cmp	r4, r3
1000fae0:	d100      	bne.n	1000fae4 <at_ble_event_get+0x180>
1000fae2:	e1d5      	b.n	1000fe90 <at_ble_event_get+0x52c>
1000fae4:	d82f      	bhi.n	1000fb46 <at_ble_event_get+0x1e2>
1000fae6:	4b66      	ldr	r3, [pc, #408]	; (1000fc80 <at_ble_event_get+0x31c>)
1000fae8:	429c      	cmp	r4, r3
1000faea:	d100      	bne.n	1000faee <at_ble_event_get+0x18a>
1000faec:	e1e0      	b.n	1000feb0 <at_ble_event_get+0x54c>
1000faee:	d813      	bhi.n	1000fb18 <at_ble_event_get+0x1b4>
1000faf0:	4b64      	ldr	r3, [pc, #400]	; (1000fc84 <at_ble_event_get+0x320>)
1000faf2:	429c      	cmp	r4, r3
1000faf4:	d100      	bne.n	1000faf8 <at_ble_event_get+0x194>
1000faf6:	e1a3      	b.n	1000fe40 <at_ble_event_get+0x4dc>
1000faf8:	d804      	bhi.n	1000fb04 <at_ble_event_get+0x1a0>
1000fafa:	2638      	movs	r6, #56	; 0x38
1000fafc:	42b4      	cmp	r4, r6
1000fafe:	d100      	bne.n	1000fb02 <at_ble_event_get+0x19e>
1000fb00:	e225      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fb02:	e117      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb04:	4b60      	ldr	r3, [pc, #384]	; (1000fc88 <at_ble_event_get+0x324>)
1000fb06:	429c      	cmp	r4, r3
1000fb08:	d100      	bne.n	1000fb0c <at_ble_event_get+0x1a8>
1000fb0a:	e19f      	b.n	1000fe4c <at_ble_event_get+0x4e8>
1000fb0c:	33fe      	adds	r3, #254	; 0xfe
1000fb0e:	33ff      	adds	r3, #255	; 0xff
1000fb10:	429c      	cmp	r4, r3
1000fb12:	d100      	bne.n	1000fb16 <at_ble_event_get+0x1b2>
1000fb14:	e1d3      	b.n	1000febe <at_ble_event_get+0x55a>
1000fb16:	e10d      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb18:	4b5c      	ldr	r3, [pc, #368]	; (1000fc8c <at_ble_event_get+0x328>)
1000fb1a:	429c      	cmp	r4, r3
1000fb1c:	d100      	bne.n	1000fb20 <at_ble_event_get+0x1bc>
1000fb1e:	e1a9      	b.n	1000fe74 <at_ble_event_get+0x510>
1000fb20:	d808      	bhi.n	1000fb34 <at_ble_event_get+0x1d0>
1000fb22:	4b5b      	ldr	r3, [pc, #364]	; (1000fc90 <at_ble_event_get+0x32c>)
1000fb24:	429c      	cmp	r4, r3
1000fb26:	d100      	bne.n	1000fb2a <at_ble_event_get+0x1c6>
1000fb28:	e196      	b.n	1000fe58 <at_ble_event_get+0x4f4>
1000fb2a:	4b5a      	ldr	r3, [pc, #360]	; (1000fc94 <at_ble_event_get+0x330>)
1000fb2c:	429c      	cmp	r4, r3
1000fb2e:	d100      	bne.n	1000fb32 <at_ble_event_get+0x1ce>
1000fb30:	e199      	b.n	1000fe66 <at_ble_event_get+0x502>
1000fb32:	e0ff      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb34:	4b58      	ldr	r3, [pc, #352]	; (1000fc98 <at_ble_event_get+0x334>)
1000fb36:	429c      	cmp	r4, r3
1000fb38:	d100      	bne.n	1000fb3c <at_ble_event_get+0x1d8>
1000fb3a:	e1a2      	b.n	1000fe82 <at_ble_event_get+0x51e>
1000fb3c:	4b57      	ldr	r3, [pc, #348]	; (1000fc9c <at_ble_event_get+0x338>)
1000fb3e:	429c      	cmp	r4, r3
1000fb40:	d100      	bne.n	1000fb44 <at_ble_event_get+0x1e0>
1000fb42:	e1d4      	b.n	1000feee <at_ble_event_get+0x58a>
1000fb44:	e0f6      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb46:	4b56      	ldr	r3, [pc, #344]	; (1000fca0 <at_ble_event_get+0x33c>)
1000fb48:	429c      	cmp	r4, r3
1000fb4a:	d100      	bne.n	1000fb4e <at_ble_event_get+0x1ea>
1000fb4c:	e1c8      	b.n	1000fee0 <at_ble_event_get+0x57c>
1000fb4e:	d812      	bhi.n	1000fb76 <at_ble_event_get+0x212>
1000fb50:	4b54      	ldr	r3, [pc, #336]	; (1000fca4 <at_ble_event_get+0x340>)
1000fb52:	429c      	cmp	r4, r3
1000fb54:	d100      	bne.n	1000fb58 <at_ble_event_get+0x1f4>
1000fb56:	e1d1      	b.n	1000fefc <at_ble_event_get+0x598>
1000fb58:	d804      	bhi.n	1000fb64 <at_ble_event_get+0x200>
1000fb5a:	4b53      	ldr	r3, [pc, #332]	; (1000fca8 <at_ble_event_get+0x344>)
1000fb5c:	429c      	cmp	r4, r3
1000fb5e:	d100      	bne.n	1000fb62 <at_ble_event_get+0x1fe>
1000fb60:	e19b      	b.n	1000fe9a <at_ble_event_get+0x536>
1000fb62:	e0e7      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb64:	4b51      	ldr	r3, [pc, #324]	; (1000fcac <at_ble_event_get+0x348>)
1000fb66:	429c      	cmp	r4, r3
1000fb68:	d100      	bne.n	1000fb6c <at_ble_event_get+0x208>
1000fb6a:	e1ad      	b.n	1000fec8 <at_ble_event_get+0x564>
1000fb6c:	4b50      	ldr	r3, [pc, #320]	; (1000fcb0 <at_ble_event_get+0x34c>)
1000fb6e:	429c      	cmp	r4, r3
1000fb70:	d100      	bne.n	1000fb74 <at_ble_event_get+0x210>
1000fb72:	e1b0      	b.n	1000fed6 <at_ble_event_get+0x572>
1000fb74:	e0de      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb76:	4b4f      	ldr	r3, [pc, #316]	; (1000fcb4 <at_ble_event_get+0x350>)
1000fb78:	429c      	cmp	r4, r3
1000fb7a:	d100      	bne.n	1000fb7e <at_ble_event_get+0x21a>
1000fb7c:	e0e0      	b.n	1000fd40 <at_ble_event_get+0x3dc>
1000fb7e:	d809      	bhi.n	1000fb94 <at_ble_event_get+0x230>
1000fb80:	3b08      	subs	r3, #8
1000fb82:	429c      	cmp	r4, r3
1000fb84:	d100      	bne.n	1000fb88 <at_ble_event_get+0x224>
1000fb86:	e0d7      	b.n	1000fd38 <at_ble_event_get+0x3d4>
1000fb88:	4b4b      	ldr	r3, [pc, #300]	; (1000fcb8 <at_ble_event_get+0x354>)
1000fb8a:	2639      	movs	r6, #57	; 0x39
1000fb8c:	429c      	cmp	r4, r3
1000fb8e:	d100      	bne.n	1000fb92 <at_ble_event_get+0x22e>
1000fb90:	e1dd      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fb92:	e0cf      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fb94:	23d1      	movs	r3, #209	; 0xd1
1000fb96:	011b      	lsls	r3, r3, #4
1000fb98:	429c      	cmp	r4, r3
1000fb9a:	d100      	bne.n	1000fb9e <at_ble_event_get+0x23a>
1000fb9c:	e0d6      	b.n	1000fd4c <at_ble_event_get+0x3e8>
1000fb9e:	4b47      	ldr	r3, [pc, #284]	; (1000fcbc <at_ble_event_get+0x358>)
1000fba0:	429c      	cmp	r4, r3
1000fba2:	d100      	bne.n	1000fba6 <at_ble_event_get+0x242>
1000fba4:	e0d8      	b.n	1000fd58 <at_ble_event_get+0x3f4>
1000fba6:	e0c5      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fba8:	4b45      	ldr	r3, [pc, #276]	; (1000fcc0 <at_ble_event_get+0x35c>)
1000fbaa:	429c      	cmp	r4, r3
1000fbac:	d100      	bne.n	1000fbb0 <at_ble_event_get+0x24c>
1000fbae:	e117      	b.n	1000fde0 <at_ble_event_get+0x47c>
1000fbb0:	d82e      	bhi.n	1000fc10 <at_ble_event_get+0x2ac>
1000fbb2:	4b44      	ldr	r3, [pc, #272]	; (1000fcc4 <at_ble_event_get+0x360>)
1000fbb4:	429c      	cmp	r4, r3
1000fbb6:	d100      	bne.n	1000fbba <at_ble_event_get+0x256>
1000fbb8:	e13d      	b.n	1000fe36 <at_ble_event_get+0x4d2>
1000fbba:	d812      	bhi.n	1000fbe2 <at_ble_event_get+0x27e>
1000fbbc:	4b42      	ldr	r3, [pc, #264]	; (1000fcc8 <at_ble_event_get+0x364>)
1000fbbe:	429c      	cmp	r4, r3
1000fbc0:	d100      	bne.n	1000fbc4 <at_ble_event_get+0x260>
1000fbc2:	e0e8      	b.n	1000fd96 <at_ble_event_get+0x432>
1000fbc4:	d804      	bhi.n	1000fbd0 <at_ble_event_get+0x26c>
1000fbc6:	3b03      	subs	r3, #3
1000fbc8:	429c      	cmp	r4, r3
1000fbca:	d100      	bne.n	1000fbce <at_ble_event_get+0x26a>
1000fbcc:	e0d0      	b.n	1000fd70 <at_ble_event_get+0x40c>
1000fbce:	e0b1      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fbd0:	4b3e      	ldr	r3, [pc, #248]	; (1000fccc <at_ble_event_get+0x368>)
1000fbd2:	429c      	cmp	r4, r3
1000fbd4:	d100      	bne.n	1000fbd8 <at_ble_event_get+0x274>
1000fbd6:	e0d0      	b.n	1000fd7a <at_ble_event_get+0x416>
1000fbd8:	4b3d      	ldr	r3, [pc, #244]	; (1000fcd0 <at_ble_event_get+0x36c>)
1000fbda:	429c      	cmp	r4, r3
1000fbdc:	d100      	bne.n	1000fbe0 <at_ble_event_get+0x27c>
1000fbde:	e0f9      	b.n	1000fdd4 <at_ble_event_get+0x470>
1000fbe0:	e0a8      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fbe2:	4b3c      	ldr	r3, [pc, #240]	; (1000fcd4 <at_ble_event_get+0x370>)
1000fbe4:	429c      	cmp	r4, r3
1000fbe6:	d100      	bne.n	1000fbea <at_ble_event_get+0x286>
1000fbe8:	e0db      	b.n	1000fda2 <at_ble_event_get+0x43e>
1000fbea:	d808      	bhi.n	1000fbfe <at_ble_event_get+0x29a>
1000fbec:	4b3a      	ldr	r3, [pc, #232]	; (1000fcd8 <at_ble_event_get+0x374>)
1000fbee:	429c      	cmp	r4, r3
1000fbf0:	d100      	bne.n	1000fbf4 <at_ble_event_get+0x290>
1000fbf2:	e11b      	b.n	1000fe2c <at_ble_event_get+0x4c8>
1000fbf4:	4b39      	ldr	r3, [pc, #228]	; (1000fcdc <at_ble_event_get+0x378>)
1000fbf6:	429c      	cmp	r4, r3
1000fbf8:	d100      	bne.n	1000fbfc <at_ble_event_get+0x298>
1000fbfa:	e0d8      	b.n	1000fdae <at_ble_event_get+0x44a>
1000fbfc:	e09a      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fbfe:	4b38      	ldr	r3, [pc, #224]	; (1000fce0 <at_ble_event_get+0x37c>)
1000fc00:	429c      	cmp	r4, r3
1000fc02:	d100      	bne.n	1000fc06 <at_ble_event_get+0x2a2>
1000fc04:	e0d8      	b.n	1000fdb8 <at_ble_event_get+0x454>
1000fc06:	4b37      	ldr	r3, [pc, #220]	; (1000fce4 <at_ble_event_get+0x380>)
1000fc08:	429c      	cmp	r4, r3
1000fc0a:	d100      	bne.n	1000fc0e <at_ble_event_get+0x2aa>
1000fc0c:	e0db      	b.n	1000fdc6 <at_ble_event_get+0x462>
1000fc0e:	e091      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fc10:	4b35      	ldr	r3, [pc, #212]	; (1000fce8 <at_ble_event_get+0x384>)
1000fc12:	429c      	cmp	r4, r3
1000fc14:	d100      	bne.n	1000fc18 <at_ble_event_get+0x2b4>
1000fc16:	e0f7      	b.n	1000fe08 <at_ble_event_get+0x4a4>
1000fc18:	d876      	bhi.n	1000fd08 <at_ble_event_get+0x3a4>
1000fc1a:	4b34      	ldr	r3, [pc, #208]	; (1000fcec <at_ble_event_get+0x388>)
1000fc1c:	429c      	cmp	r4, r3
1000fc1e:	d100      	bne.n	1000fc22 <at_ble_event_get+0x2be>
1000fc20:	e0f8      	b.n	1000fe14 <at_ble_event_get+0x4b0>
1000fc22:	d869      	bhi.n	1000fcf8 <at_ble_event_get+0x394>
1000fc24:	4b32      	ldr	r3, [pc, #200]	; (1000fcf0 <at_ble_event_get+0x38c>)
1000fc26:	429c      	cmp	r4, r3
1000fc28:	d100      	bne.n	1000fc2c <at_ble_event_get+0x2c8>
1000fc2a:	e0e0      	b.n	1000fdee <at_ble_event_get+0x48a>
1000fc2c:	4b31      	ldr	r3, [pc, #196]	; (1000fcf4 <at_ble_event_get+0x390>)
1000fc2e:	429c      	cmp	r4, r3
1000fc30:	d100      	bne.n	1000fc34 <at_ble_event_get+0x2d0>
1000fc32:	e0a9      	b.n	1000fd88 <at_ble_event_get+0x424>
1000fc34:	e07e      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fc36:	46c0      	nop			; (mov r8, r8)
1000fc38:	10011369 	.word	0x10011369
1000fc3c:	1001988c 	.word	0x1001988c
1000fc40:	1000efdd 	.word	0x1000efdd
1000fc44:	10019890 	.word	0x10019890
1000fc48:	10019888 	.word	0x10019888
1000fc4c:	10019878 	.word	0x10019878
1000fc50:	1000f84d 	.word	0x1000f84d
1000fc54:	10014a05 	.word	0x10014a05
1000fc58:	0000ffff 	.word	0x0000ffff
1000fc5c:	0000fffe 	.word	0x0000fffe
1000fc60:	1000f255 	.word	0x1000f255
1000fc64:	1001136b 	.word	0x1001136b
1000fc68:	0000201e 	.word	0x0000201e
1000fc6c:	0000201d 	.word	0x0000201d
1000fc70:	00000c03 	.word	0x00000c03
1000fc74:	0000201f 	.word	0x0000201f
1000fc78:	00000d1c 	.word	0x00000d1c
1000fc7c:	00000c0c 	.word	0x00000c0c
1000fc80:	00000c02 	.word	0x00000c02
1000fc84:	00000a02 	.word	0x00000a02
1000fc88:	00000a03 	.word	0x00000a03
1000fc8c:	00000c06 	.word	0x00000c06
1000fc90:	00000c04 	.word	0x00000c04
1000fc94:	00000c05 	.word	0x00000c05
1000fc98:	00000c07 	.word	0x00000c07
1000fc9c:	00000c09 	.word	0x00000c09
1000fca0:	00000c17 	.word	0x00000c17
1000fca4:	00000c12 	.word	0x00000c12
1000fca8:	00000c0d 	.word	0x00000c0d
1000fcac:	00000c13 	.word	0x00000c13
1000fcb0:	00000c15 	.word	0x00000c15
1000fcb4:	00000d08 	.word	0x00000d08
1000fcb8:	00000d01 	.word	0x00000d01
1000fcbc:	00000d15 	.word	0x00000d15
1000fcc0:	00000e1b 	.word	0x00000e1b
1000fcc4:	00000e0f 	.word	0x00000e0f
1000fcc8:	00000e03 	.word	0x00000e03
1000fccc:	00000e06 	.word	0x00000e06
1000fcd0:	00000e0a 	.word	0x00000e0a
1000fcd4:	00000e15 	.word	0x00000e15
1000fcd8:	00000e11 	.word	0x00000e11
1000fcdc:	00000e13 	.word	0x00000e13
1000fce0:	00000e17 	.word	0x00000e17
1000fce4:	00000e19 	.word	0x00000e19
1000fce8:	00000e27 	.word	0x00000e27
1000fcec:	00000e21 	.word	0x00000e21
1000fcf0:	00000e1c 	.word	0x00000e1c
1000fcf4:	00000e1d 	.word	0x00000e1d
1000fcf8:	4b9f      	ldr	r3, [pc, #636]	; (1000ff78 <at_ble_event_get+0x614>)
1000fcfa:	429c      	cmp	r4, r3
1000fcfc:	d07e      	beq.n	1000fdfc <at_ble_event_get+0x498>
1000fcfe:	4b9f      	ldr	r3, [pc, #636]	; (1000ff7c <at_ble_event_get+0x618>)
1000fd00:	429c      	cmp	r4, r3
1000fd02:	d100      	bne.n	1000fd06 <at_ble_event_get+0x3a2>
1000fd04:	e08c      	b.n	1000fe20 <at_ble_event_get+0x4bc>
1000fd06:	e015      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fd08:	4b9d      	ldr	r3, [pc, #628]	; (1000ff80 <at_ble_event_get+0x61c>)
1000fd0a:	429c      	cmp	r4, r3
1000fd0c:	d100      	bne.n	1000fd10 <at_ble_event_get+0x3ac>
1000fd0e:	e10a      	b.n	1000ff26 <at_ble_event_get+0x5c2>
1000fd10:	d808      	bhi.n	1000fd24 <at_ble_event_get+0x3c0>
1000fd12:	4b9c      	ldr	r3, [pc, #624]	; (1000ff84 <at_ble_event_get+0x620>)
1000fd14:	429c      	cmp	r4, r3
1000fd16:	d100      	bne.n	1000fd1a <at_ble_event_get+0x3b6>
1000fd18:	e0f7      	b.n	1000ff0a <at_ble_event_get+0x5a6>
1000fd1a:	4b9b      	ldr	r3, [pc, #620]	; (1000ff88 <at_ble_event_get+0x624>)
1000fd1c:	429c      	cmp	r4, r3
1000fd1e:	d100      	bne.n	1000fd22 <at_ble_event_get+0x3be>
1000fd20:	e0fa      	b.n	1000ff18 <at_ble_event_get+0x5b4>
1000fd22:	e007      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000fd24:	4b99      	ldr	r3, [pc, #612]	; (1000ff8c <at_ble_event_get+0x628>)
1000fd26:	429c      	cmp	r4, r3
1000fd28:	d100      	bne.n	1000fd2c <at_ble_event_get+0x3c8>
1000fd2a:	e103      	b.n	1000ff34 <at_ble_event_get+0x5d0>
1000fd2c:	4b98      	ldr	r3, [pc, #608]	; (1000ff90 <at_ble_event_get+0x62c>)
1000fd2e:	429c      	cmp	r4, r3
1000fd30:	d100      	bne.n	1000fd34 <at_ble_event_get+0x3d0>
1000fd32:	e106      	b.n	1000ff42 <at_ble_event_get+0x5de>
1000fd34:	2600      	movs	r6, #0
1000fd36:	e10a      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd38:	1c30      	adds	r0, r6, #0
1000fd3a:	1c29      	adds	r1, r5, #0
1000fd3c:	4b95      	ldr	r3, [pc, #596]	; (1000ff94 <at_ble_event_get+0x630>)
1000fd3e:	e014      	b.n	1000fd6a <at_ble_event_get+0x406>
1000fd40:	1c30      	adds	r0, r6, #0
1000fd42:	1c29      	adds	r1, r5, #0
1000fd44:	4b94      	ldr	r3, [pc, #592]	; (1000ff98 <at_ble_event_get+0x634>)
1000fd46:	4798      	blx	r3
1000fd48:	2604      	movs	r6, #4
1000fd4a:	e100      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd4c:	1c30      	adds	r0, r6, #0
1000fd4e:	1c29      	adds	r1, r5, #0
1000fd50:	4b92      	ldr	r3, [pc, #584]	; (1000ff9c <at_ble_event_get+0x638>)
1000fd52:	4798      	blx	r3
1000fd54:	2601      	movs	r6, #1
1000fd56:	e0fa      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd58:	1c30      	adds	r0, r6, #0
1000fd5a:	1c29      	adds	r1, r5, #0
1000fd5c:	4b90      	ldr	r3, [pc, #576]	; (1000ffa0 <at_ble_event_get+0x63c>)
1000fd5e:	4798      	blx	r3
1000fd60:	260f      	movs	r6, #15
1000fd62:	e0f4      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd64:	1c30      	adds	r0, r6, #0
1000fd66:	1c29      	adds	r1, r5, #0
1000fd68:	4b8e      	ldr	r3, [pc, #568]	; (1000ffa4 <at_ble_event_get+0x640>)
1000fd6a:	4798      	blx	r3
1000fd6c:	1c06      	adds	r6, r0, #0
1000fd6e:	e0ee      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd70:	9801      	ldr	r0, [sp, #4]
1000fd72:	1c31      	adds	r1, r6, #0
1000fd74:	1c2a      	adds	r2, r5, #0
1000fd76:	4b8c      	ldr	r3, [pc, #560]	; (1000ffa8 <at_ble_event_get+0x644>)
1000fd78:	e017      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fd7a:	1c31      	adds	r1, r6, #0
1000fd7c:	9801      	ldr	r0, [sp, #4]
1000fd7e:	1c2a      	adds	r2, r5, #0
1000fd80:	4b8a      	ldr	r3, [pc, #552]	; (1000ffac <at_ble_event_get+0x648>)
1000fd82:	4798      	blx	r3
1000fd84:	2611      	movs	r6, #17
1000fd86:	e0e2      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd88:	1c31      	adds	r1, r6, #0
1000fd8a:	9801      	ldr	r0, [sp, #4]
1000fd8c:	1c2a      	adds	r2, r5, #0
1000fd8e:	4b88      	ldr	r3, [pc, #544]	; (1000ffb0 <at_ble_event_get+0x64c>)
1000fd90:	4798      	blx	r3
1000fd92:	2612      	movs	r6, #18
1000fd94:	e0db      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fd96:	1c30      	adds	r0, r6, #0
1000fd98:	1c29      	adds	r1, r5, #0
1000fd9a:	4b86      	ldr	r3, [pc, #536]	; (1000ffb4 <at_ble_event_get+0x650>)
1000fd9c:	4798      	blx	r3
1000fd9e:	2606      	movs	r6, #6
1000fda0:	e0d5      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fda2:	1c31      	adds	r1, r6, #0
1000fda4:	1c2a      	adds	r2, r5, #0
1000fda6:	9801      	ldr	r0, [sp, #4]
1000fda8:	4b83      	ldr	r3, [pc, #524]	; (1000ffb8 <at_ble_event_get+0x654>)
1000fdaa:	4798      	blx	r3
1000fdac:	e7de      	b.n	1000fd6c <at_ble_event_get+0x408>
1000fdae:	9801      	ldr	r0, [sp, #4]
1000fdb0:	1c31      	adds	r1, r6, #0
1000fdb2:	1c2a      	adds	r2, r5, #0
1000fdb4:	4b81      	ldr	r3, [pc, #516]	; (1000ffbc <at_ble_event_get+0x658>)
1000fdb6:	e7f8      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fdb8:	1c31      	adds	r1, r6, #0
1000fdba:	9801      	ldr	r0, [sp, #4]
1000fdbc:	1c2a      	adds	r2, r5, #0
1000fdbe:	4b80      	ldr	r3, [pc, #512]	; (1000ffc0 <at_ble_event_get+0x65c>)
1000fdc0:	4798      	blx	r3
1000fdc2:	260d      	movs	r6, #13
1000fdc4:	e0c3      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fdc6:	1c31      	adds	r1, r6, #0
1000fdc8:	9801      	ldr	r0, [sp, #4]
1000fdca:	1c2a      	adds	r2, r5, #0
1000fdcc:	4b7d      	ldr	r3, [pc, #500]	; (1000ffc4 <at_ble_event_get+0x660>)
1000fdce:	4798      	blx	r3
1000fdd0:	260e      	movs	r6, #14
1000fdd2:	e0bc      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fdd4:	9801      	ldr	r0, [sp, #4]
1000fdd6:	1c31      	adds	r1, r6, #0
1000fdd8:	1c2a      	adds	r2, r5, #0
1000fdda:	4b7b      	ldr	r3, [pc, #492]	; (1000ffc8 <at_ble_event_get+0x664>)
1000fddc:	4798      	blx	r3
1000fdde:	e084      	b.n	1000feea <at_ble_event_get+0x586>
1000fde0:	1c31      	adds	r1, r6, #0
1000fde2:	9801      	ldr	r0, [sp, #4]
1000fde4:	1c2a      	adds	r2, r5, #0
1000fde6:	4b79      	ldr	r3, [pc, #484]	; (1000ffcc <at_ble_event_get+0x668>)
1000fde8:	4798      	blx	r3
1000fdea:	260b      	movs	r6, #11
1000fdec:	e0af      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fdee:	1c31      	adds	r1, r6, #0
1000fdf0:	9801      	ldr	r0, [sp, #4]
1000fdf2:	1c2a      	adds	r2, r5, #0
1000fdf4:	4b76      	ldr	r3, [pc, #472]	; (1000ffd0 <at_ble_event_get+0x66c>)
1000fdf6:	4798      	blx	r3
1000fdf8:	2610      	movs	r6, #16
1000fdfa:	e0a8      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fdfc:	1c30      	adds	r0, r6, #0
1000fdfe:	1c29      	adds	r1, r5, #0
1000fe00:	4b74      	ldr	r3, [pc, #464]	; (1000ffd4 <at_ble_event_get+0x670>)
1000fe02:	4798      	blx	r3
1000fe04:	2628      	movs	r6, #40	; 0x28
1000fe06:	e0a2      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe08:	1c30      	adds	r0, r6, #0
1000fe0a:	1c29      	adds	r1, r5, #0
1000fe0c:	4b72      	ldr	r3, [pc, #456]	; (1000ffd8 <at_ble_event_get+0x674>)
1000fe0e:	4798      	blx	r3
1000fe10:	2629      	movs	r6, #41	; 0x29
1000fe12:	e09c      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe14:	1c30      	adds	r0, r6, #0
1000fe16:	1c29      	adds	r1, r5, #0
1000fe18:	4b70      	ldr	r3, [pc, #448]	; (1000ffdc <at_ble_event_get+0x678>)
1000fe1a:	4798      	blx	r3
1000fe1c:	2627      	movs	r6, #39	; 0x27
1000fe1e:	e096      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe20:	1c30      	adds	r0, r6, #0
1000fe22:	1c29      	adds	r1, r5, #0
1000fe24:	4b6e      	ldr	r3, [pc, #440]	; (1000ffe0 <at_ble_event_get+0x67c>)
1000fe26:	4798      	blx	r3
1000fe28:	262a      	movs	r6, #42	; 0x2a
1000fe2a:	e090      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe2c:	9801      	ldr	r0, [sp, #4]
1000fe2e:	1c31      	adds	r1, r6, #0
1000fe30:	1c2a      	adds	r2, r5, #0
1000fe32:	4b6c      	ldr	r3, [pc, #432]	; (1000ffe4 <at_ble_event_get+0x680>)
1000fe34:	e7b9      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fe36:	9801      	ldr	r0, [sp, #4]
1000fe38:	1c31      	adds	r1, r6, #0
1000fe3a:	1c2a      	adds	r2, r5, #0
1000fe3c:	4b6a      	ldr	r3, [pc, #424]	; (1000ffe8 <at_ble_event_get+0x684>)
1000fe3e:	e7b4      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fe40:	1c30      	adds	r0, r6, #0
1000fe42:	1c29      	adds	r1, r5, #0
1000fe44:	4b69      	ldr	r3, [pc, #420]	; (1000ffec <at_ble_event_get+0x688>)
1000fe46:	4798      	blx	r3
1000fe48:	262b      	movs	r6, #43	; 0x2b
1000fe4a:	e080      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe4c:	1c30      	adds	r0, r6, #0
1000fe4e:	1c29      	adds	r1, r5, #0
1000fe50:	4b67      	ldr	r3, [pc, #412]	; (1000fff0 <at_ble_event_get+0x68c>)
1000fe52:	4798      	blx	r3
1000fe54:	262c      	movs	r6, #44	; 0x2c
1000fe56:	e07a      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe58:	1c31      	adds	r1, r6, #0
1000fe5a:	9801      	ldr	r0, [sp, #4]
1000fe5c:	1c2a      	adds	r2, r5, #0
1000fe5e:	4b65      	ldr	r3, [pc, #404]	; (1000fff4 <at_ble_event_get+0x690>)
1000fe60:	4798      	blx	r3
1000fe62:	2613      	movs	r6, #19
1000fe64:	e073      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe66:	1c31      	adds	r1, r6, #0
1000fe68:	9801      	ldr	r0, [sp, #4]
1000fe6a:	1c2a      	adds	r2, r5, #0
1000fe6c:	4b62      	ldr	r3, [pc, #392]	; (1000fff8 <at_ble_event_get+0x694>)
1000fe6e:	4798      	blx	r3
1000fe70:	2614      	movs	r6, #20
1000fe72:	e06c      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe74:	1c31      	adds	r1, r6, #0
1000fe76:	9801      	ldr	r0, [sp, #4]
1000fe78:	1c2a      	adds	r2, r5, #0
1000fe7a:	4b60      	ldr	r3, [pc, #384]	; (1000fffc <at_ble_event_get+0x698>)
1000fe7c:	4798      	blx	r3
1000fe7e:	2615      	movs	r6, #21
1000fe80:	e065      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe82:	1c31      	adds	r1, r6, #0
1000fe84:	9801      	ldr	r0, [sp, #4]
1000fe86:	1c2a      	adds	r2, r5, #0
1000fe88:	4b5d      	ldr	r3, [pc, #372]	; (10010000 <at_ble_event_get+0x69c>)
1000fe8a:	4798      	blx	r3
1000fe8c:	2616      	movs	r6, #22
1000fe8e:	e05e      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fe90:	9801      	ldr	r0, [sp, #4]
1000fe92:	1c31      	adds	r1, r6, #0
1000fe94:	1c2a      	adds	r2, r5, #0
1000fe96:	4b5b      	ldr	r3, [pc, #364]	; (10010004 <at_ble_event_get+0x6a0>)
1000fe98:	e787      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fe9a:	1c31      	adds	r1, r6, #0
1000fe9c:	9801      	ldr	r0, [sp, #4]
1000fe9e:	1c2a      	adds	r2, r5, #0
1000fea0:	4b58      	ldr	r3, [pc, #352]	; (10010004 <at_ble_event_get+0x6a0>)
1000fea2:	4798      	blx	r3
1000fea4:	88a9      	ldrh	r1, [r5, #4]
1000fea6:	1c06      	adds	r6, r0, #0
1000fea8:	4b57      	ldr	r3, [pc, #348]	; (10010008 <at_ble_event_get+0x6a4>)
1000feaa:	8828      	ldrh	r0, [r5, #0]
1000feac:	4798      	blx	r3
1000feae:	e04e      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000feb0:	1c31      	adds	r1, r6, #0
1000feb2:	9801      	ldr	r0, [sp, #4]
1000feb4:	1c2a      	adds	r2, r5, #0
1000feb6:	4b55      	ldr	r3, [pc, #340]	; (1001000c <at_ble_event_get+0x6a8>)
1000feb8:	4798      	blx	r3
1000feba:	2623      	movs	r6, #35	; 0x23
1000febc:	e047      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000febe:	9801      	ldr	r0, [sp, #4]
1000fec0:	1c31      	adds	r1, r6, #0
1000fec2:	1c2a      	adds	r2, r5, #0
1000fec4:	4b52      	ldr	r3, [pc, #328]	; (10010010 <at_ble_event_get+0x6ac>)
1000fec6:	e770      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fec8:	9b01      	ldr	r3, [sp, #4]
1000feca:	1c30      	adds	r0, r6, #0
1000fecc:	0a1f      	lsrs	r7, r3, #8
1000fece:	802f      	strh	r7, [r5, #0]
1000fed0:	1c29      	adds	r1, r5, #0
1000fed2:	4b50      	ldr	r3, [pc, #320]	; (10010014 <at_ble_event_get+0x6b0>)
1000fed4:	e749      	b.n	1000fd6a <at_ble_event_get+0x406>
1000fed6:	9801      	ldr	r0, [sp, #4]
1000fed8:	1c31      	adds	r1, r6, #0
1000feda:	1c2a      	adds	r2, r5, #0
1000fedc:	4b4e      	ldr	r3, [pc, #312]	; (10010018 <at_ble_event_get+0x6b4>)
1000fede:	e764      	b.n	1000fdaa <at_ble_event_get+0x446>
1000fee0:	1c30      	adds	r0, r6, #0
1000fee2:	1c29      	adds	r1, r5, #0
1000fee4:	9a01      	ldr	r2, [sp, #4]
1000fee6:	4b4d      	ldr	r3, [pc, #308]	; (1001001c <at_ble_event_get+0x6b8>)
1000fee8:	4798      	blx	r3
1000feea:	263b      	movs	r6, #59	; 0x3b
1000feec:	e02f      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000feee:	1c31      	adds	r1, r6, #0
1000fef0:	9801      	ldr	r0, [sp, #4]
1000fef2:	1c2a      	adds	r2, r5, #0
1000fef4:	4b4a      	ldr	r3, [pc, #296]	; (10010020 <at_ble_event_get+0x6bc>)
1000fef6:	4798      	blx	r3
1000fef8:	2618      	movs	r6, #24
1000fefa:	e028      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000fefc:	1c31      	adds	r1, r6, #0
1000fefe:	9801      	ldr	r0, [sp, #4]
1000ff00:	1c2a      	adds	r2, r5, #0
1000ff02:	4b48      	ldr	r3, [pc, #288]	; (10010024 <at_ble_event_get+0x6c0>)
1000ff04:	4798      	blx	r3
1000ff06:	2620      	movs	r6, #32
1000ff08:	e021      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff0a:	1c31      	adds	r1, r6, #0
1000ff0c:	9801      	ldr	r0, [sp, #4]
1000ff0e:	1c2a      	adds	r2, r5, #0
1000ff10:	4b45      	ldr	r3, [pc, #276]	; (10010028 <at_ble_event_get+0x6c4>)
1000ff12:	4798      	blx	r3
1000ff14:	2633      	movs	r6, #51	; 0x33
1000ff16:	e01a      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff18:	1c31      	adds	r1, r6, #0
1000ff1a:	9801      	ldr	r0, [sp, #4]
1000ff1c:	1c2a      	adds	r2, r5, #0
1000ff1e:	4b43      	ldr	r3, [pc, #268]	; (1001002c <at_ble_event_get+0x6c8>)
1000ff20:	4798      	blx	r3
1000ff22:	2630      	movs	r6, #48	; 0x30
1000ff24:	e013      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff26:	1c31      	adds	r1, r6, #0
1000ff28:	9801      	ldr	r0, [sp, #4]
1000ff2a:	1c2a      	adds	r2, r5, #0
1000ff2c:	4b40      	ldr	r3, [pc, #256]	; (10010030 <at_ble_event_get+0x6cc>)
1000ff2e:	4798      	blx	r3
1000ff30:	2634      	movs	r6, #52	; 0x34
1000ff32:	e00c      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff34:	1c31      	adds	r1, r6, #0
1000ff36:	9801      	ldr	r0, [sp, #4]
1000ff38:	1c2a      	adds	r2, r5, #0
1000ff3a:	4b3e      	ldr	r3, [pc, #248]	; (10010034 <at_ble_event_get+0x6d0>)
1000ff3c:	4798      	blx	r3
1000ff3e:	2635      	movs	r6, #53	; 0x35
1000ff40:	e005      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff42:	1c31      	adds	r1, r6, #0
1000ff44:	9801      	ldr	r0, [sp, #4]
1000ff46:	1c2a      	adds	r2, r5, #0
1000ff48:	4b3b      	ldr	r3, [pc, #236]	; (10010038 <at_ble_event_get+0x6d4>)
1000ff4a:	4798      	blx	r3
1000ff4c:	2632      	movs	r6, #50	; 0x32
1000ff4e:	9b03      	ldr	r3, [sp, #12]
1000ff50:	701e      	strb	r6, [r3, #0]
1000ff52:	2300      	movs	r3, #0
1000ff54:	9302      	str	r3, [sp, #8]
1000ff56:	e57a      	b.n	1000fa4e <at_ble_event_get+0xea>
1000ff58:	23d0      	movs	r3, #208	; 0xd0
1000ff5a:	e7fb      	b.n	1000ff54 <at_ble_event_get+0x5f0>
1000ff5c:	9b01      	ldr	r3, [sp, #4]
1000ff5e:	9e02      	ldr	r6, [sp, #8]
1000ff60:	2bbb      	cmp	r3, #187	; 0xbb
1000ff62:	d000      	beq.n	1000ff66 <at_ble_event_get+0x602>
1000ff64:	e6e6      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000ff66:	e7f2      	b.n	1000ff4e <at_ble_event_get+0x5ea>
1000ff68:	9b02      	ldr	r3, [sp, #8]
1000ff6a:	2b00      	cmp	r3, #0
1000ff6c:	d000      	beq.n	1000ff70 <at_ble_event_get+0x60c>
1000ff6e:	e56e      	b.n	1000fa4e <at_ble_event_get+0xea>
1000ff70:	e6e0      	b.n	1000fd34 <at_ble_event_get+0x3d0>
1000ff72:	9802      	ldr	r0, [sp, #8]
1000ff74:	b007      	add	sp, #28
1000ff76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff78:	00000e22 	.word	0x00000e22
1000ff7c:	00000e25 	.word	0x00000e25
1000ff80:	00001b05 	.word	0x00001b05
1000ff84:	00001b01 	.word	0x00001b01
1000ff88:	00001b03 	.word	0x00001b03
1000ff8c:	00001b06 	.word	0x00001b06
1000ff90:	00001b08 	.word	0x00001b08
1000ff94:	10012195 	.word	0x10012195
1000ff98:	10012179 	.word	0x10012179
1000ff9c:	10012415 	.word	0x10012415
1000ffa0:	10012505 	.word	0x10012505
1000ffa4:	10012529 	.word	0x10012529
1000ffa8:	1001150d 	.word	0x1001150d
1000ffac:	10011d8d 	.word	0x10011d8d
1000ffb0:	10011e09 	.word	0x10011e09
1000ffb4:	100117c5 	.word	0x100117c5
1000ffb8:	10011861 	.word	0x10011861
1000ffbc:	10011939 	.word	0x10011939
1000ffc0:	10011bc1 	.word	0x10011bc1
1000ffc4:	10011c61 	.word	0x10011c61
1000ffc8:	10011d19 	.word	0x10011d19
1000ffcc:	10011d41 	.word	0x10011d41
1000ffd0:	10011d57 	.word	0x10011d57
1000ffd4:	10011e21 	.word	0x10011e21
1000ffd8:	10011e4f 	.word	0x10011e4f
1000ffdc:	10011e65 	.word	0x10011e65
1000ffe0:	10011e8f 	.word	0x10011e8f
1000ffe4:	10011cbd 	.word	0x10011cbd
1000ffe8:	10011ce7 	.word	0x10011ce7
1000ffec:	10010f4d 	.word	0x10010f4d
1000fff0:	10010f79 	.word	0x10010f79
1000fff4:	10012749 	.word	0x10012749
1000fff8:	10012785 	.word	0x10012785
1000fffc:	100127cd 	.word	0x100127cd
10010000:	10012811 	.word	0x10012811
10010004:	10012845 	.word	0x10012845
10010008:	10012709 	.word	0x10012709
1001000c:	10012911 	.word	0x10012911
10010010:	10012899 	.word	0x10012899
10010014:	10010e31 	.word	0x10010e31
10010018:	10010e9d 	.word	0x10010e9d
1001001c:	10010e61 	.word	0x10010e61
10010020:	10012921 	.word	0x10012921
10010024:	10012961 	.word	0x10012961
10010028:	10012c29 	.word	0x10012c29
1001002c:	10012c33 	.word	0x10012c33
10010030:	10012c39 	.word	0x10012c39
10010034:	10012c3f 	.word	0x10012c3f
10010038:	10012c4b 	.word	0x10012c4b

1001003c <internal_event_flush>:
1001003c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001003e:	490e      	ldr	r1, [pc, #56]	; (10010078 <internal_event_flush+0x3c>)
10010040:	2400      	movs	r4, #0
10010042:	680b      	ldr	r3, [r1, #0]
10010044:	1c0f      	adds	r7, r1, #0
10010046:	1c1e      	adds	r6, r3, #0
10010048:	4a0c      	ldr	r2, [pc, #48]	; (1001007c <internal_event_flush+0x40>)
1001004a:	6815      	ldr	r5, [r2, #0]
1001004c:	9201      	str	r2, [sp, #4]
1001004e:	2b00      	cmp	r3, #0
10010050:	d00e      	beq.n	10010070 <internal_event_flush+0x34>
10010052:	889a      	ldrh	r2, [r3, #4]
10010054:	6819      	ldr	r1, [r3, #0]
10010056:	4282      	cmp	r2, r0
10010058:	d107      	bne.n	1001006a <internal_event_flush+0x2e>
1001005a:	2c00      	cmp	r4, #0
1001005c:	d001      	beq.n	10010062 <internal_event_flush+0x26>
1001005e:	6021      	str	r1, [r4, #0]
10010060:	e000      	b.n	10010064 <internal_event_flush+0x28>
10010062:	1c0e      	adds	r6, r1, #0
10010064:	601d      	str	r5, [r3, #0]
10010066:	1c1d      	adds	r5, r3, #0
10010068:	1c23      	adds	r3, r4, #0
1001006a:	1c1c      	adds	r4, r3, #0
1001006c:	1c0b      	adds	r3, r1, #0
1001006e:	e7ee      	b.n	1001004e <internal_event_flush+0x12>
10010070:	9b01      	ldr	r3, [sp, #4]
10010072:	603e      	str	r6, [r7, #0]
10010074:	601d      	str	r5, [r3, #0]
10010076:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010078:	1001988c 	.word	0x1001988c
1001007c:	10019890 	.word	0x10019890

10010080 <internal_conn_flush>:
10010080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010082:	4a12      	ldr	r2, [pc, #72]	; (100100cc <internal_conn_flush+0x4c>)
10010084:	9000      	str	r0, [sp, #0]
10010086:	6813      	ldr	r3, [r2, #0]
10010088:	4811      	ldr	r0, [pc, #68]	; (100100d0 <internal_conn_flush+0x50>)
1001008a:	1c1f      	adds	r7, r3, #0
1001008c:	2100      	movs	r1, #0
1001008e:	4684      	mov	ip, r0
10010090:	6804      	ldr	r4, [r0, #0]
10010092:	9201      	str	r2, [sp, #4]
10010094:	2b00      	cmp	r3, #0
10010096:	d014      	beq.n	100100c2 <internal_conn_flush+0x42>
10010098:	88d8      	ldrh	r0, [r3, #6]
1001009a:	9a00      	ldr	r2, [sp, #0]
1001009c:	681d      	ldr	r5, [r3, #0]
1001009e:	0a06      	lsrs	r6, r0, #8
100100a0:	4296      	cmp	r6, r2
100100a2:	d10b      	bne.n	100100bc <internal_conn_flush+0x3c>
100100a4:	26fd      	movs	r6, #253	; 0xfd
100100a6:	4006      	ands	r6, r0
100100a8:	2e0c      	cmp	r6, #12
100100aa:	d107      	bne.n	100100bc <internal_conn_flush+0x3c>
100100ac:	2900      	cmp	r1, #0
100100ae:	d001      	beq.n	100100b4 <internal_conn_flush+0x34>
100100b0:	600d      	str	r5, [r1, #0]
100100b2:	e000      	b.n	100100b6 <internal_conn_flush+0x36>
100100b4:	1c2f      	adds	r7, r5, #0
100100b6:	601c      	str	r4, [r3, #0]
100100b8:	1c1c      	adds	r4, r3, #0
100100ba:	1c0b      	adds	r3, r1, #0
100100bc:	1c19      	adds	r1, r3, #0
100100be:	1c2b      	adds	r3, r5, #0
100100c0:	e7e8      	b.n	10010094 <internal_conn_flush+0x14>
100100c2:	9b01      	ldr	r3, [sp, #4]
100100c4:	601f      	str	r7, [r3, #0]
100100c6:	4663      	mov	r3, ip
100100c8:	601c      	str	r4, [r3, #0]
100100ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100100cc:	1001988c 	.word	0x1001988c
100100d0:	10019890 	.word	0x10019890

100100d4 <at_ble_device_name_set>:
100100d4:	b530      	push	{r4, r5, lr}
100100d6:	23cf      	movs	r3, #207	; 0xcf
100100d8:	2800      	cmp	r0, #0
100100da:	d010      	beq.n	100100fe <at_ble_device_name_set+0x2a>
100100dc:	1e4a      	subs	r2, r1, #1
100100de:	2a1f      	cmp	r2, #31
100100e0:	d80d      	bhi.n	100100fe <at_ble_device_name_set+0x2a>
100100e2:	4a08      	ldr	r2, [pc, #32]	; (10010104 <at_ble_device_name_set+0x30>)
100100e4:	1c13      	adds	r3, r2, #0
100100e6:	33aa      	adds	r3, #170	; 0xaa
100100e8:	8019      	strh	r1, [r3, #0]
100100ea:	2300      	movs	r3, #0
100100ec:	1c1c      	adds	r4, r3, #0
100100ee:	5cc5      	ldrb	r5, [r0, r3]
100100f0:	34ac      	adds	r4, #172	; 0xac
100100f2:	3301      	adds	r3, #1
100100f4:	5515      	strb	r5, [r2, r4]
100100f6:	b2dc      	uxtb	r4, r3
100100f8:	428c      	cmp	r4, r1
100100fa:	d3f7      	bcc.n	100100ec <at_ble_device_name_set+0x18>
100100fc:	2300      	movs	r3, #0
100100fe:	1c18      	adds	r0, r3, #0
10010100:	bd30      	pop	{r4, r5, pc}
10010102:	46c0      	nop			; (mov r8, r8)
10010104:	1001a832 	.word	0x1001a832

10010108 <at_ble_addr_get>:
10010108:	b510      	push	{r4, lr}
1001010a:	1c04      	adds	r4, r0, #0
1001010c:	20cf      	movs	r0, #207	; 0xcf
1001010e:	2c00      	cmp	r4, #0
10010110:	d006      	beq.n	10010120 <at_ble_addr_get+0x18>
10010112:	4b04      	ldr	r3, [pc, #16]	; (10010124 <at_ble_addr_get+0x1c>)
10010114:	38ce      	subs	r0, #206	; 0xce
10010116:	1c21      	adds	r1, r4, #0
10010118:	4798      	blx	r3
1001011a:	4b03      	ldr	r3, [pc, #12]	; (10010128 <at_ble_addr_get+0x20>)
1001011c:	791b      	ldrb	r3, [r3, #4]
1001011e:	7023      	strb	r3, [r4, #0]
10010120:	bd10      	pop	{r4, pc}
10010122:	46c0      	nop			; (mov r8, r8)
10010124:	10012029 	.word	0x10012029
10010128:	1001a832 	.word	0x1001a832

1001012c <at_ble_set_dev_config>:
1001012c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001012e:	7906      	ldrb	r6, [r0, #4]
10010130:	b089      	sub	sp, #36	; 0x24
10010132:	25cf      	movs	r5, #207	; 0xcf
10010134:	2e03      	cmp	r6, #3
10010136:	d838      	bhi.n	100101aa <at_ble_set_dev_config+0x7e>
10010138:	7803      	ldrb	r3, [r0, #0]
1001013a:	3511      	adds	r5, #17
1001013c:	2b0f      	cmp	r3, #15
1001013e:	d834      	bhi.n	100101aa <at_ble_set_dev_config+0x7e>
10010140:	2380      	movs	r3, #128	; 0x80
10010142:	8c87      	ldrh	r7, [r0, #36]	; 0x24
10010144:	3d11      	subs	r5, #17
10010146:	009b      	lsls	r3, r3, #2
10010148:	429f      	cmp	r7, r3
1001014a:	d82e      	bhi.n	100101aa <at_ble_set_dev_config+0x7e>
1001014c:	7fc5      	ldrb	r5, [r0, #31]
1001014e:	7f83      	ldrb	r3, [r0, #30]
10010150:	01ad      	lsls	r5, r5, #6
10010152:	015b      	lsls	r3, r3, #5
10010154:	431d      	orrs	r5, r3
10010156:	7ec3      	ldrb	r3, [r0, #27]
10010158:	431d      	orrs	r5, r3
1001015a:	7f43      	ldrb	r3, [r0, #29]
1001015c:	011b      	lsls	r3, r3, #4
1001015e:	431d      	orrs	r5, r3
10010160:	7f03      	ldrb	r3, [r0, #28]
10010162:	009b      	lsls	r3, r3, #2
10010164:	431d      	orrs	r5, r3
10010166:	4b12      	ldr	r3, [pc, #72]	; (100101b0 <at_ble_set_dev_config+0x84>)
10010168:	b2ed      	uxtb	r5, r5
1001016a:	711e      	strb	r6, [r3, #4]
1001016c:	7903      	ldrb	r3, [r0, #4]
1001016e:	3b02      	subs	r3, #2
10010170:	2b01      	cmp	r3, #1
10010172:	d801      	bhi.n	10010178 <at_ble_set_dev_config+0x4c>
10010174:	2302      	movs	r3, #2
10010176:	7103      	strb	r3, [r0, #4]
10010178:	1c04      	adds	r4, r0, #0
1001017a:	1c23      	adds	r3, r4, #0
1001017c:	330b      	adds	r3, #11
1001017e:	8861      	ldrh	r1, [r4, #2]
10010180:	9307      	str	r3, [sp, #28]
10010182:	7923      	ldrb	r3, [r4, #4]
10010184:	7800      	ldrb	r0, [r0, #0]
10010186:	9300      	str	r3, [sp, #0]
10010188:	9501      	str	r5, [sp, #4]
1001018a:	8c25      	ldrh	r5, [r4, #32]
1001018c:	1d62      	adds	r2, r4, #5
1001018e:	9502      	str	r5, [sp, #8]
10010190:	8c65      	ldrh	r5, [r4, #34]	; 0x22
10010192:	9b07      	ldr	r3, [sp, #28]
10010194:	9503      	str	r5, [sp, #12]
10010196:	9704      	str	r7, [sp, #16]
10010198:	4d06      	ldr	r5, [pc, #24]	; (100101b4 <at_ble_set_dev_config+0x88>)
1001019a:	47a8      	blx	r5
1001019c:	7126      	strb	r6, [r4, #4]
1001019e:	1c05      	adds	r5, r0, #0
100101a0:	1c21      	adds	r1, r4, #0
100101a2:	4803      	ldr	r0, [pc, #12]	; (100101b0 <at_ble_set_dev_config+0x84>)
100101a4:	2226      	movs	r2, #38	; 0x26
100101a6:	4b04      	ldr	r3, [pc, #16]	; (100101b8 <at_ble_set_dev_config+0x8c>)
100101a8:	4798      	blx	r3
100101aa:	1c28      	adds	r0, r5, #0
100101ac:	b009      	add	sp, #36	; 0x24
100101ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101b0:	1001a832 	.word	0x1001a832
100101b4:	10011f21 	.word	0x10011f21
100101b8:	100149f3 	.word	0x100149f3

100101bc <at_ble_init>:
100101bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100101be:	b087      	sub	sp, #28
100101c0:	af03      	add	r7, sp, #12
100101c2:	4954      	ldr	r1, [pc, #336]	; (10010314 <at_ble_init+0x158>)
100101c4:	220b      	movs	r2, #11
100101c6:	4b54      	ldr	r3, [pc, #336]	; (10010318 <at_ble_init+0x15c>)
100101c8:	1c04      	adds	r4, r0, #0
100101ca:	1c38      	adds	r0, r7, #0
100101cc:	4798      	blx	r3
100101ce:	2205      	movs	r2, #5
100101d0:	4b52      	ldr	r3, [pc, #328]	; (1001031c <at_ble_init+0x160>)
100101d2:	2640      	movs	r6, #64	; 0x40
100101d4:	801a      	strh	r2, [r3, #0]
100101d6:	2300      	movs	r3, #0
100101d8:	4a51      	ldr	r2, [pc, #324]	; (10010320 <at_ble_init+0x164>)
100101da:	6013      	str	r3, [r2, #0]
100101dc:	4a51      	ldr	r2, [pc, #324]	; (10010324 <at_ble_init+0x168>)
100101de:	7013      	strb	r3, [r2, #0]
100101e0:	4a51      	ldr	r2, [pc, #324]	; (10010328 <at_ble_init+0x16c>)
100101e2:	7013      	strb	r3, [r2, #0]
100101e4:	4b51      	ldr	r3, [pc, #324]	; (1001032c <at_ble_init+0x170>)
100101e6:	4798      	blx	r3
100101e8:	4b51      	ldr	r3, [pc, #324]	; (10010330 <at_ble_init+0x174>)
100101ea:	4798      	blx	r3
100101ec:	4b51      	ldr	r3, [pc, #324]	; (10010334 <at_ble_init+0x178>)
100101ee:	4798      	blx	r3
100101f0:	4b51      	ldr	r3, [pc, #324]	; (10010338 <at_ble_init+0x17c>)
100101f2:	4798      	blx	r3
100101f4:	2c00      	cmp	r4, #0
100101f6:	d100      	bne.n	100101fa <at_ble_init+0x3e>
100101f8:	e089      	b.n	1001030e <at_ble_init+0x152>
100101fa:	68a3      	ldr	r3, [r4, #8]
100101fc:	2b00      	cmp	r3, #0
100101fe:	d100      	bne.n	10010202 <at_ble_init+0x46>
10010200:	e085      	b.n	1001030e <at_ble_init+0x152>
10010202:	6923      	ldr	r3, [r4, #16]
10010204:	2b00      	cmp	r3, #0
10010206:	d100      	bne.n	1001020a <at_ble_init+0x4e>
10010208:	e081      	b.n	1001030e <at_ble_init+0x152>
1001020a:	6820      	ldr	r0, [r4, #0]
1001020c:	2800      	cmp	r0, #0
1001020e:	d102      	bne.n	10010216 <at_ble_init+0x5a>
10010210:	6863      	ldr	r3, [r4, #4]
10010212:	2b00      	cmp	r3, #0
10010214:	d17b      	bne.n	1001030e <at_ble_init+0x152>
10010216:	4b49      	ldr	r3, [pc, #292]	; (1001033c <at_ble_init+0x180>)
10010218:	6861      	ldr	r1, [r4, #4]
1001021a:	4798      	blx	r3
1001021c:	4b48      	ldr	r3, [pc, #288]	; (10010340 <at_ble_init+0x184>)
1001021e:	4798      	blx	r3
10010220:	2801      	cmp	r0, #1
10010222:	d901      	bls.n	10010228 <at_ble_init+0x6c>
10010224:	26e2      	movs	r6, #226	; 0xe2
10010226:	e072      	b.n	1001030e <at_ble_init+0x152>
10010228:	4846      	ldr	r0, [pc, #280]	; (10010344 <at_ble_init+0x188>)
1001022a:	4b47      	ldr	r3, [pc, #284]	; (10010348 <at_ble_init+0x18c>)
1001022c:	4798      	blx	r3
1001022e:	2800      	cmp	r0, #0
10010230:	d1f8      	bne.n	10010224 <at_ble_init+0x68>
10010232:	1c20      	adds	r0, r4, #0
10010234:	4b45      	ldr	r3, [pc, #276]	; (1001034c <at_ble_init+0x190>)
10010236:	4798      	blx	r3
10010238:	68e0      	ldr	r0, [r4, #12]
1001023a:	68a1      	ldr	r1, [r4, #8]
1001023c:	4b44      	ldr	r3, [pc, #272]	; (10010350 <at_ble_init+0x194>)
1001023e:	4798      	blx	r3
10010240:	466b      	mov	r3, sp
10010242:	2201      	movs	r2, #1
10010244:	1cdc      	adds	r4, r3, #3
10010246:	1c20      	adds	r0, r4, #0
10010248:	a901      	add	r1, sp, #4
1001024a:	4252      	negs	r2, r2
1001024c:	4b41      	ldr	r3, [pc, #260]	; (10010354 <at_ble_init+0x198>)
1001024e:	4798      	blx	r3
10010250:	2800      	cmp	r0, #0
10010252:	d102      	bne.n	1001025a <at_ble_init+0x9e>
10010254:	7823      	ldrb	r3, [r4, #0]
10010256:	2b39      	cmp	r3, #57	; 0x39
10010258:	d1f2      	bne.n	10010240 <at_ble_init+0x84>
1001025a:	4b3f      	ldr	r3, [pc, #252]	; (10010358 <at_ble_init+0x19c>)
1001025c:	4798      	blx	r3
1001025e:	1e06      	subs	r6, r0, #0
10010260:	d155      	bne.n	1001030e <at_ble_init+0x152>
10010262:	1c03      	adds	r3, r0, #0
10010264:	2101      	movs	r1, #1
10010266:	4a3d      	ldr	r2, [pc, #244]	; (1001035c <at_ble_init+0x1a0>)
10010268:	4249      	negs	r1, r1
1001026a:	189a      	adds	r2, r3, r2
1001026c:	3312      	adds	r3, #18
1001026e:	8151      	strh	r1, [r2, #10]
10010270:	2b90      	cmp	r3, #144	; 0x90
10010272:	d1f7      	bne.n	10010264 <at_ble_init+0xa8>
10010274:	4c3a      	ldr	r4, [pc, #232]	; (10010360 <at_ble_init+0x1a4>)
10010276:	3b81      	subs	r3, #129	; 0x81
10010278:	7023      	strb	r3, [r4, #0]
1001027a:	4b3a      	ldr	r3, [pc, #232]	; (10010364 <at_ble_init+0x1a8>)
1001027c:	4a3a      	ldr	r2, [pc, #232]	; (10010368 <at_ble_init+0x1ac>)
1001027e:	8063      	strh	r3, [r4, #2]
10010280:	2300      	movs	r3, #0
10010282:	7123      	strb	r3, [r4, #4]
10010284:	3301      	adds	r3, #1
10010286:	1e58      	subs	r0, r3, #1
10010288:	0119      	lsls	r1, r3, #4
1001028a:	4301      	orrs	r1, r0
1001028c:	3302      	adds	r3, #2
1001028e:	7011      	strb	r1, [r2, #0]
10010290:	3201      	adds	r2, #1
10010292:	2b21      	cmp	r3, #33	; 0x21
10010294:	d1f7      	bne.n	10010286 <at_ble_init+0xca>
10010296:	33e0      	adds	r3, #224	; 0xe0
10010298:	33ff      	adds	r3, #255	; 0xff
1001029a:	84a3      	strh	r3, [r4, #36]	; 0x24
1001029c:	1c23      	adds	r3, r4, #0
1001029e:	2500      	movs	r5, #0
100102a0:	3373      	adds	r3, #115	; 0x73
100102a2:	701d      	strb	r5, [r3, #0]
100102a4:	1c23      	adds	r3, r4, #0
100102a6:	3372      	adds	r3, #114	; 0x72
100102a8:	701d      	strb	r5, [r3, #0]
100102aa:	1c23      	adds	r3, r4, #0
100102ac:	3376      	adds	r3, #118	; 0x76
100102ae:	701d      	strb	r5, [r3, #0]
100102b0:	1c23      	adds	r3, r4, #0
100102b2:	33cc      	adds	r3, #204	; 0xcc
100102b4:	801d      	strh	r5, [r3, #0]
100102b6:	1c22      	adds	r2, r4, #0
100102b8:	23a0      	movs	r3, #160	; 0xa0
100102ba:	32d0      	adds	r2, #208	; 0xd0
100102bc:	005b      	lsls	r3, r3, #1
100102be:	8013      	strh	r3, [r2, #0]
100102c0:	1c22      	adds	r2, r4, #0
100102c2:	32ce      	adds	r2, #206	; 0xce
100102c4:	8013      	strh	r3, [r2, #0]
100102c6:	1c23      	adds	r3, r4, #0
100102c8:	33d2      	adds	r3, #210	; 0xd2
100102ca:	801d      	strh	r5, [r3, #0]
100102cc:	22fa      	movs	r2, #250	; 0xfa
100102ce:	1c23      	adds	r3, r4, #0
100102d0:	0052      	lsls	r2, r2, #1
100102d2:	33d4      	adds	r3, #212	; 0xd4
100102d4:	801a      	strh	r2, [r3, #0]
100102d6:	1c23      	adds	r3, r4, #0
100102d8:	33d6      	adds	r3, #214	; 0xd6
100102da:	701d      	strb	r5, [r3, #0]
100102dc:	1c20      	adds	r0, r4, #0
100102de:	4b23      	ldr	r3, [pc, #140]	; (1001036c <at_ble_init+0x1b0>)
100102e0:	76e5      	strb	r5, [r4, #27]
100102e2:	7725      	strb	r5, [r4, #28]
100102e4:	7765      	strb	r5, [r4, #29]
100102e6:	77a5      	strb	r5, [r4, #30]
100102e8:	77e5      	strb	r5, [r4, #31]
100102ea:	8425      	strh	r5, [r4, #32]
100102ec:	8465      	strh	r5, [r4, #34]	; 0x22
100102ee:	4798      	blx	r3
100102f0:	1c23      	adds	r3, r4, #0
100102f2:	2207      	movs	r2, #7
100102f4:	3374      	adds	r3, #116	; 0x74
100102f6:	701a      	strb	r2, [r3, #0]
100102f8:	1c23      	adds	r3, r4, #0
100102fa:	3204      	adds	r2, #4
100102fc:	33aa      	adds	r3, #170	; 0xaa
100102fe:	801a      	strh	r2, [r3, #0]
10010300:	1c2b      	adds	r3, r5, #0
10010302:	5d7a      	ldrb	r2, [r7, r5]
10010304:	33ac      	adds	r3, #172	; 0xac
10010306:	3501      	adds	r5, #1
10010308:	54e2      	strb	r2, [r4, r3]
1001030a:	2d0b      	cmp	r5, #11
1001030c:	d1f8      	bne.n	10010300 <at_ble_init+0x144>
1001030e:	1c30      	adds	r0, r6, #0
10010310:	b007      	add	sp, #28
10010312:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010314:	10017be0 	.word	0x10017be0
10010318:	100149f3 	.word	0x100149f3
1001031c:	1001a7a0 	.word	0x1001a7a0
10010320:	1001993c 	.word	0x1001993c
10010324:	1001989c 	.word	0x1001989c
10010328:	10017e08 	.word	0x10017e08
1001032c:	10012971 	.word	0x10012971
10010330:	1001062d 	.word	0x1001062d
10010334:	10010c8d 	.word	0x10010c8d
10010338:	10010f41 	.word	0x10010f41
1001033c:	10010cc9 	.word	0x10010cc9
10010340:	1000eced 	.word	0x1000eced
10010344:	10011241 	.word	0x10011241
10010348:	1000ef31 	.word	0x1000ef31
1001034c:	100112e9 	.word	0x100112e9
10010350:	1000f8a9 	.word	0x1000f8a9
10010354:	1000f965 	.word	0x1000f965
10010358:	10011eb1 	.word	0x10011eb1
1001035c:	1001a7a2 	.word	0x1001a7a2
10010360:	1001a832 	.word	0x1001a832
10010364:	00003a98 	.word	0x00003a98
10010368:	1001a83d 	.word	0x1001a83d
1001036c:	1001012d 	.word	0x1001012d

10010370 <at_ble_addr_set>:
10010370:	b538      	push	{r3, r4, r5, lr}
10010372:	1c45      	adds	r5, r0, #1
10010374:	1c03      	adds	r3, r0, #0
10010376:	20cf      	movs	r0, #207	; 0xcf
10010378:	2d00      	cmp	r5, #0
1001037a:	d018      	beq.n	100103ae <at_ble_addr_set+0x3e>
1001037c:	781a      	ldrb	r2, [r3, #0]
1001037e:	2a03      	cmp	r2, #3
10010380:	d815      	bhi.n	100103ae <at_ble_addr_set+0x3e>
10010382:	2a01      	cmp	r2, #1
10010384:	d102      	bne.n	1001038c <at_ble_addr_set+0x1c>
10010386:	785a      	ldrb	r2, [r3, #1]
10010388:	2a00      	cmp	r2, #0
1001038a:	d010      	beq.n	100103ae <at_ble_addr_set+0x3e>
1001038c:	1c1c      	adds	r4, r3, #0
1001038e:	1c29      	adds	r1, r5, #0
10010390:	2206      	movs	r2, #6
10010392:	4b07      	ldr	r3, [pc, #28]	; (100103b0 <at_ble_addr_set+0x40>)
10010394:	4807      	ldr	r0, [pc, #28]	; (100103b4 <at_ble_addr_set+0x44>)
10010396:	4798      	blx	r3
10010398:	7823      	ldrb	r3, [r4, #0]
1001039a:	4807      	ldr	r0, [pc, #28]	; (100103b8 <at_ble_addr_set+0x48>)
1001039c:	7103      	strb	r3, [r0, #4]
1001039e:	4b07      	ldr	r3, [pc, #28]	; (100103bc <at_ble_addr_set+0x4c>)
100103a0:	4798      	blx	r3
100103a2:	7823      	ldrb	r3, [r4, #0]
100103a4:	2b00      	cmp	r3, #0
100103a6:	d102      	bne.n	100103ae <at_ble_addr_set+0x3e>
100103a8:	1c28      	adds	r0, r5, #0
100103aa:	4b05      	ldr	r3, [pc, #20]	; (100103c0 <at_ble_addr_set+0x50>)
100103ac:	4798      	blx	r3
100103ae:	bd38      	pop	{r3, r4, r5, pc}
100103b0:	100149f3 	.word	0x100149f3
100103b4:	1001a837 	.word	0x1001a837
100103b8:	1001a832 	.word	0x1001a832
100103bc:	1001012d 	.word	0x1001012d
100103c0:	1001136d 	.word	0x1001136d

100103c4 <at_ble_adv_data_set>:
100103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100103c6:	4684      	mov	ip, r0
100103c8:	1c0f      	adds	r7, r1, #0
100103ca:	1c16      	adds	r6, r2, #0
100103cc:	1c1c      	adds	r4, r3, #0
100103ce:	2800      	cmp	r0, #0
100103d0:	d102      	bne.n	100103d8 <at_ble_adv_data_set+0x14>
100103d2:	20e2      	movs	r0, #226	; 0xe2
100103d4:	2a00      	cmp	r2, #0
100103d6:	d02b      	beq.n	10010430 <at_ble_adv_data_set+0x6c>
100103d8:	20cf      	movs	r0, #207	; 0xcf
100103da:	2f1f      	cmp	r7, #31
100103dc:	d828      	bhi.n	10010430 <at_ble_adv_data_set+0x6c>
100103de:	2c1f      	cmp	r4, #31
100103e0:	d826      	bhi.n	10010430 <at_ble_adv_data_set+0x6c>
100103e2:	4663      	mov	r3, ip
100103e4:	2b00      	cmp	r3, #0
100103e6:	d00e      	beq.n	10010406 <at_ble_adv_data_set+0x42>
100103e8:	4812      	ldr	r0, [pc, #72]	; (10010434 <at_ble_adv_data_set+0x70>)
100103ea:	4d13      	ldr	r5, [pc, #76]	; (10010438 <at_ble_adv_data_set+0x74>)
100103ec:	2f00      	cmp	r7, #0
100103ee:	d104      	bne.n	100103fa <at_ble_adv_data_set+0x36>
100103f0:	1c39      	adds	r1, r7, #0
100103f2:	221f      	movs	r2, #31
100103f4:	4b11      	ldr	r3, [pc, #68]	; (1001043c <at_ble_adv_data_set+0x78>)
100103f6:	4798      	blx	r3
100103f8:	e003      	b.n	10010402 <at_ble_adv_data_set+0x3e>
100103fa:	4661      	mov	r1, ip
100103fc:	1c3a      	adds	r2, r7, #0
100103fe:	4b10      	ldr	r3, [pc, #64]	; (10010440 <at_ble_adv_data_set+0x7c>)
10010400:	4798      	blx	r3
10010402:	3572      	adds	r5, #114	; 0x72
10010404:	702f      	strb	r7, [r5, #0]
10010406:	1e30      	subs	r0, r6, #0
10010408:	d012      	beq.n	10010430 <at_ble_adv_data_set+0x6c>
1001040a:	4d0b      	ldr	r5, [pc, #44]	; (10010438 <at_ble_adv_data_set+0x74>)
1001040c:	480d      	ldr	r0, [pc, #52]	; (10010444 <at_ble_adv_data_set+0x80>)
1001040e:	2c00      	cmp	r4, #0
10010410:	d107      	bne.n	10010422 <at_ble_adv_data_set+0x5e>
10010412:	1c21      	adds	r1, r4, #0
10010414:	221f      	movs	r2, #31
10010416:	4b09      	ldr	r3, [pc, #36]	; (1001043c <at_ble_adv_data_set+0x78>)
10010418:	3573      	adds	r5, #115	; 0x73
1001041a:	4798      	blx	r3
1001041c:	702c      	strb	r4, [r5, #0]
1001041e:	1c20      	adds	r0, r4, #0
10010420:	e006      	b.n	10010430 <at_ble_adv_data_set+0x6c>
10010422:	1c31      	adds	r1, r6, #0
10010424:	1c22      	adds	r2, r4, #0
10010426:	4b06      	ldr	r3, [pc, #24]	; (10010440 <at_ble_adv_data_set+0x7c>)
10010428:	4798      	blx	r3
1001042a:	2000      	movs	r0, #0
1001042c:	3573      	adds	r5, #115	; 0x73
1001042e:	702c      	strb	r4, [r5, #0]
10010430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010432:	46c0      	nop			; (mov r8, r8)
10010434:	1001a866 	.word	0x1001a866
10010438:	1001a832 	.word	0x1001a832
1001043c:	10014a05 	.word	0x10014a05
10010440:	100149f3 	.word	0x100149f3
10010444:	1001a885 	.word	0x1001a885

10010448 <at_ble_adv_start>:
10010448:	b5f0      	push	{r4, r5, r6, r7, lr}
1001044a:	b091      	sub	sp, #68	; 0x44
1001044c:	1c1f      	adds	r7, r3, #0
1001044e:	ab16      	add	r3, sp, #88	; 0x58
10010450:	881d      	ldrh	r5, [r3, #0]
10010452:	ab17      	add	r3, sp, #92	; 0x5c
10010454:	881b      	ldrh	r3, [r3, #0]
10010456:	910d      	str	r1, [sp, #52]	; 0x34
10010458:	930e      	str	r3, [sp, #56]	; 0x38
1001045a:	ab18      	add	r3, sp, #96	; 0x60
1001045c:	781b      	ldrb	r3, [r3, #0]
1001045e:	1c04      	adds	r4, r0, #0
10010460:	930f      	str	r3, [sp, #60]	; 0x3c
10010462:	4b42      	ldr	r3, [pc, #264]	; (1001056c <at_ble_adv_start+0x124>)
10010464:	1c16      	adds	r6, r2, #0
10010466:	3373      	adds	r3, #115	; 0x73
10010468:	781b      	ldrb	r3, [r3, #0]
1001046a:	20cf      	movs	r0, #207	; 0xcf
1001046c:	930c      	str	r3, [sp, #48]	; 0x30
1001046e:	2c01      	cmp	r4, #1
10010470:	d103      	bne.n	1001047a <at_ble_adv_start+0x32>
10010472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10010474:	2b00      	cmp	r3, #0
10010476:	d176      	bne.n	10010566 <at_ble_adv_start+0x11e>
10010478:	e024      	b.n	100104c4 <at_ble_adv_start+0x7c>
1001047a:	2c04      	cmp	r4, #4
1001047c:	d873      	bhi.n	10010566 <at_ble_adv_start+0x11e>
1001047e:	2380      	movs	r3, #128	; 0x80
10010480:	01db      	lsls	r3, r3, #7
10010482:	429d      	cmp	r5, r3
10010484:	d86f      	bhi.n	10010566 <at_ble_adv_start+0x11e>
10010486:	2c00      	cmp	r4, #0
10010488:	d102      	bne.n	10010490 <at_ble_adv_start+0x48>
1001048a:	2d1f      	cmp	r5, #31
1001048c:	d96b      	bls.n	10010566 <at_ble_adv_start+0x11e>
1001048e:	e003      	b.n	10010498 <at_ble_adv_start+0x50>
10010490:	2d9f      	cmp	r5, #159	; 0x9f
10010492:	d801      	bhi.n	10010498 <at_ble_adv_start+0x50>
10010494:	2c01      	cmp	r4, #1
10010496:	d166      	bne.n	10010566 <at_ble_adv_start+0x11e>
10010498:	2f00      	cmp	r7, #0
1001049a:	d009      	beq.n	100104b0 <at_ble_adv_start+0x68>
1001049c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1001049e:	20cf      	movs	r0, #207	; 0xcf
100104a0:	3b01      	subs	r3, #1
100104a2:	2b01      	cmp	r3, #1
100104a4:	d95f      	bls.n	10010566 <at_ble_adv_start+0x11e>
100104a6:	2c01      	cmp	r4, #1
100104a8:	d102      	bne.n	100104b0 <at_ble_adv_start+0x68>
100104aa:	2d00      	cmp	r5, #0
100104ac:	d100      	bne.n	100104b0 <at_ble_adv_start+0x68>
100104ae:	3520      	adds	r5, #32
100104b0:	4b2f      	ldr	r3, [pc, #188]	; (10010570 <at_ble_adv_start+0x128>)
100104b2:	4798      	blx	r3
100104b4:	1c01      	adds	r1, r0, #0
100104b6:	2e00      	cmp	r6, #0
100104b8:	d043      	beq.n	10010542 <at_ble_adv_start+0xfa>
100104ba:	7833      	ldrb	r3, [r6, #0]
100104bc:	1e60      	subs	r0, r4, #1
100104be:	2b00      	cmp	r3, #0
100104c0:	d109      	bne.n	100104d6 <at_ble_adv_start+0x8e>
100104c2:	e03b      	b.n	1001053c <at_ble_adv_start+0xf4>
100104c4:	2380      	movs	r3, #128	; 0x80
100104c6:	01db      	lsls	r3, r3, #7
100104c8:	429d      	cmp	r5, r3
100104ca:	d84c      	bhi.n	10010566 <at_ble_adv_start+0x11e>
100104cc:	2e00      	cmp	r6, #0
100104ce:	d04a      	beq.n	10010566 <at_ble_adv_start+0x11e>
100104d0:	2f00      	cmp	r7, #0
100104d2:	d1e3      	bne.n	1001049c <at_ble_adv_start+0x54>
100104d4:	e02b      	b.n	1001052e <at_ble_adv_start+0xe6>
100104d6:	2301      	movs	r3, #1
100104d8:	2803      	cmp	r0, #3
100104da:	d93a      	bls.n	10010552 <at_ble_adv_start+0x10a>
100104dc:	200d      	movs	r0, #13
100104de:	1c72      	adds	r2, r6, #1
100104e0:	e002      	b.n	100104e8 <at_ble_adv_start+0xa0>
100104e2:	200e      	movs	r0, #14
100104e4:	1e32      	subs	r2, r6, #0
100104e6:	d1fa      	bne.n	100104de <at_ble_adv_start+0x96>
100104e8:	4c20      	ldr	r4, [pc, #128]	; (1001056c <at_ble_adv_start+0x124>)
100104ea:	3474      	adds	r4, #116	; 0x74
100104ec:	7826      	ldrb	r6, [r4, #0]
100104ee:	2407      	movs	r4, #7
100104f0:	2e00      	cmp	r6, #0
100104f2:	d000      	beq.n	100104f6 <at_ble_adv_start+0xae>
100104f4:	1c34      	adds	r4, r6, #0
100104f6:	9200      	str	r2, [sp, #0]
100104f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100104fa:	9403      	str	r4, [sp, #12]
100104fc:	9204      	str	r2, [sp, #16]
100104fe:	4a1b      	ldr	r2, [pc, #108]	; (1001056c <at_ble_adv_start+0x124>)
10010500:	9501      	str	r5, [sp, #4]
10010502:	9502      	str	r5, [sp, #8]
10010504:	9705      	str	r7, [sp, #20]
10010506:	3272      	adds	r2, #114	; 0x72
10010508:	7812      	ldrb	r2, [r2, #0]
1001050a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1001050c:	9206      	str	r2, [sp, #24]
1001050e:	4a19      	ldr	r2, [pc, #100]	; (10010574 <at_ble_adv_start+0x12c>)
10010510:	9207      	str	r2, [sp, #28]
10010512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10010514:	9208      	str	r2, [sp, #32]
10010516:	4a18      	ldr	r2, [pc, #96]	; (10010578 <at_ble_adv_start+0x130>)
10010518:	9209      	str	r2, [sp, #36]	; 0x24
1001051a:	2264      	movs	r2, #100	; 0x64
1001051c:	4362      	muls	r2, r4
1001051e:	b292      	uxth	r2, r2
10010520:	920a      	str	r2, [sp, #40]	; 0x28
10010522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10010524:	4c15      	ldr	r4, [pc, #84]	; (1001057c <at_ble_adv_start+0x134>)
10010526:	920b      	str	r2, [sp, #44]	; 0x2c
10010528:	4a15      	ldr	r2, [pc, #84]	; (10010580 <at_ble_adv_start+0x138>)
1001052a:	47a0      	blx	r4
1001052c:	e01b      	b.n	10010566 <at_ble_adv_start+0x11e>
1001052e:	2d00      	cmp	r5, #0
10010530:	d1be      	bne.n	100104b0 <at_ble_adv_start+0x68>
10010532:	4b0f      	ldr	r3, [pc, #60]	; (10010570 <at_ble_adv_start+0x128>)
10010534:	4798      	blx	r3
10010536:	2520      	movs	r5, #32
10010538:	1c01      	adds	r1, r0, #0
1001053a:	e7be      	b.n	100104ba <at_ble_adv_start+0x72>
1001053c:	2803      	cmp	r0, #3
1001053e:	d8cd      	bhi.n	100104dc <at_ble_adv_start+0x94>
10010540:	e006      	b.n	10010550 <at_ble_adv_start+0x108>
10010542:	1e60      	subs	r0, r4, #1
10010544:	2803      	cmp	r0, #3
10010546:	d903      	bls.n	10010550 <at_ble_adv_start+0x108>
10010548:	1c33      	adds	r3, r6, #0
1001054a:	200d      	movs	r0, #13
1001054c:	1c32      	adds	r2, r6, #0
1001054e:	e7cb      	b.n	100104e8 <at_ble_adv_start+0xa0>
10010550:	2300      	movs	r3, #0
10010552:	f002 fb7f 	bl	10012c54 <__gnu_thumb1_case_sqi>
10010556:	06c6      	.short	0x06c6
10010558:	0204      	.short	0x0204
1001055a:	200f      	movs	r0, #15
1001055c:	e7c2      	b.n	100104e4 <at_ble_adv_start+0x9c>
1001055e:	2200      	movs	r2, #0
10010560:	920c      	str	r2, [sp, #48]	; 0x30
10010562:	200c      	movs	r0, #12
10010564:	e7be      	b.n	100104e4 <at_ble_adv_start+0x9c>
10010566:	b011      	add	sp, #68	; 0x44
10010568:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001056a:	46c0      	nop			; (mov r8, r8)
1001056c:	1001a832 	.word	0x1001a832
10010570:	100123fd 	.word	0x100123fd
10010574:	1001a866 	.word	0x1001a866
10010578:	1001a885 	.word	0x1001a885
1001057c:	100122dd 	.word	0x100122dd
10010580:	00003a98 	.word	0x00003a98

10010584 <at_ble_adv_stop>:
10010584:	b508      	push	{r3, lr}
10010586:	4b01      	ldr	r3, [pc, #4]	; (1001058c <at_ble_adv_stop+0x8>)
10010588:	4798      	blx	r3
1001058a:	bd08      	pop	{r3, pc}
1001058c:	10012109 	.word	0x10012109

10010590 <at_ble_scan_stop>:
10010590:	b510      	push	{r4, lr}
10010592:	4b05      	ldr	r3, [pc, #20]	; (100105a8 <at_ble_scan_stop+0x18>)
10010594:	4798      	blx	r3
10010596:	1e04      	subs	r4, r0, #0
10010598:	d103      	bne.n	100105a2 <at_ble_scan_stop+0x12>
1001059a:	20d1      	movs	r0, #209	; 0xd1
1001059c:	4b03      	ldr	r3, [pc, #12]	; (100105ac <at_ble_scan_stop+0x1c>)
1001059e:	0100      	lsls	r0, r0, #4
100105a0:	4798      	blx	r3
100105a2:	1c20      	adds	r0, r4, #0
100105a4:	bd10      	pop	{r4, pc}
100105a6:	46c0      	nop			; (mov r8, r8)
100105a8:	10012109 	.word	0x10012109
100105ac:	1001003d 	.word	0x1001003d

100105b0 <at_ble_disconnect>:
100105b0:	b538      	push	{r3, r4, r5, lr}
100105b2:	1c04      	adds	r4, r0, #0
100105b4:	4b04      	ldr	r3, [pc, #16]	; (100105c8 <at_ble_disconnect+0x18>)
100105b6:	1c08      	adds	r0, r1, #0
100105b8:	1c21      	adds	r1, r4, #0
100105ba:	4798      	blx	r3
100105bc:	1c05      	adds	r5, r0, #0
100105be:	4b03      	ldr	r3, [pc, #12]	; (100105cc <at_ble_disconnect+0x1c>)
100105c0:	1c20      	adds	r0, r4, #0
100105c2:	4798      	blx	r3
100105c4:	1c28      	adds	r0, r5, #0
100105c6:	bd38      	pop	{r3, r4, r5, pc}
100105c8:	10011781 	.word	0x10011781
100105cc:	10010081 	.word	0x10010081

100105d0 <at_ble_conn_update_reply>:
100105d0:	b510      	push	{r4, lr}
100105d2:	4c01      	ldr	r4, [pc, #4]	; (100105d8 <at_ble_conn_update_reply+0x8>)
100105d4:	47a0      	blx	r4
100105d6:	bd10      	pop	{r4, pc}
100105d8:	10011c71 	.word	0x10011c71

100105dc <at_ble_random_address_resolve>:
100105dc:	b510      	push	{r4, lr}
100105de:	23cf      	movs	r3, #207	; 0xcf
100105e0:	2800      	cmp	r0, #0
100105e2:	d00a      	beq.n	100105fa <at_ble_random_address_resolve+0x1e>
100105e4:	2900      	cmp	r1, #0
100105e6:	d008      	beq.n	100105fa <at_ble_random_address_resolve+0x1e>
100105e8:	2a00      	cmp	r2, #0
100105ea:	d006      	beq.n	100105fa <at_ble_random_address_resolve+0x1e>
100105ec:	780c      	ldrb	r4, [r1, #0]
100105ee:	2c02      	cmp	r4, #2
100105f0:	d103      	bne.n	100105fa <at_ble_random_address_resolve+0x1e>
100105f2:	4b03      	ldr	r3, [pc, #12]	; (10010600 <at_ble_random_address_resolve+0x24>)
100105f4:	3101      	adds	r1, #1
100105f6:	4798      	blx	r3
100105f8:	2300      	movs	r3, #0
100105fa:	1c18      	adds	r0, r3, #0
100105fc:	bd10      	pop	{r4, pc}
100105fe:	46c0      	nop			; (mov r8, r8)
10010600:	1001249d 	.word	0x1001249d

10010604 <at_ble_uuid_type2len>:
10010604:	23cf      	movs	r3, #207	; 0xcf
10010606:	2802      	cmp	r0, #2
10010608:	d801      	bhi.n	1001060e <at_ble_uuid_type2len+0xa>
1001060a:	4b02      	ldr	r3, [pc, #8]	; (10010614 <at_ble_uuid_type2len+0x10>)
1001060c:	5c1b      	ldrb	r3, [r3, r0]
1001060e:	1c18      	adds	r0, r3, #0
10010610:	4770      	bx	lr
10010612:	46c0      	nop			; (mov r8, r8)
10010614:	10017beb 	.word	0x10017beb

10010618 <at_ble_uuid_len2type>:
10010618:	1e83      	subs	r3, r0, #2
1001061a:	b2db      	uxtb	r3, r3
1001061c:	2003      	movs	r0, #3
1001061e:	2b0e      	cmp	r3, #14
10010620:	d801      	bhi.n	10010626 <at_ble_uuid_len2type+0xe>
10010622:	4a01      	ldr	r2, [pc, #4]	; (10010628 <at_ble_uuid_len2type+0x10>)
10010624:	5cd0      	ldrb	r0, [r2, r3]
10010626:	4770      	bx	lr
10010628:	10017bee 	.word	0x10017bee

1001062c <init_gatt_client_module>:
1001062c:	2200      	movs	r2, #0
1001062e:	4b01      	ldr	r3, [pc, #4]	; (10010634 <init_gatt_client_module+0x8>)
10010630:	801a      	strh	r2, [r3, #0]
10010632:	4770      	bx	lr
10010634:	10019894 	.word	0x10019894

10010638 <db_searchATT>:
10010638:	b570      	push	{r4, r5, r6, lr}
1001063a:	1c05      	adds	r5, r0, #0
1001063c:	2400      	movs	r4, #0
1001063e:	4b0c      	ldr	r3, [pc, #48]	; (10010670 <db_searchATT+0x38>)
10010640:	6819      	ldr	r1, [r3, #0]
10010642:	4b0c      	ldr	r3, [pc, #48]	; (10010674 <db_searchATT+0x3c>)
10010644:	681e      	ldr	r6, [r3, #0]
10010646:	428c      	cmp	r4, r1
10010648:	dc10      	bgt.n	1001066c <db_searchATT+0x34>
1001064a:	200c      	movs	r0, #12
1001064c:	1863      	adds	r3, r4, r1
1001064e:	0fda      	lsrs	r2, r3, #31
10010650:	18d3      	adds	r3, r2, r3
10010652:	1c02      	adds	r2, r0, #0
10010654:	105b      	asrs	r3, r3, #1
10010656:	435a      	muls	r2, r3
10010658:	18b0      	adds	r0, r6, r2
1001065a:	8802      	ldrh	r2, [r0, #0]
1001065c:	42aa      	cmp	r2, r5
1001065e:	d201      	bcs.n	10010664 <db_searchATT+0x2c>
10010660:	1e59      	subs	r1, r3, #1
10010662:	e7f0      	b.n	10010646 <db_searchATT+0xe>
10010664:	42aa      	cmp	r2, r5
10010666:	d902      	bls.n	1001066e <db_searchATT+0x36>
10010668:	1c5c      	adds	r4, r3, #1
1001066a:	e7ec      	b.n	10010646 <db_searchATT+0xe>
1001066c:	2000      	movs	r0, #0
1001066e:	bd70      	pop	{r4, r5, r6, pc}
10010670:	100198a8 	.word	0x100198a8
10010674:	100198a0 	.word	0x100198a0

10010678 <att_permissions>:
10010678:	b530      	push	{r4, r5, lr}
1001067a:	2403      	movs	r4, #3
1001067c:	1c05      	adds	r5, r0, #0
1001067e:	2301      	movs	r3, #1
10010680:	4025      	ands	r5, r4
10010682:	42a5      	cmp	r5, r4
10010684:	d009      	beq.n	1001069a <att_permissions+0x22>
10010686:	1c23      	adds	r3, r4, #0
10010688:	1924      	adds	r4, r4, r4
1001068a:	4220      	tst	r0, r4
1001068c:	d105      	bne.n	1001069a <att_permissions+0x22>
1001068e:	3b02      	subs	r3, #2
10010690:	4218      	tst	r0, r3
10010692:	d102      	bne.n	1001069a <att_permissions+0x22>
10010694:	1e4b      	subs	r3, r1, #1
10010696:	4199      	sbcs	r1, r3
10010698:	b28b      	uxth	r3, r1
1001069a:	2130      	movs	r1, #48	; 0x30
1001069c:	4001      	ands	r1, r0
1001069e:	2930      	cmp	r1, #48	; 0x30
100106a0:	d007      	beq.n	100106b2 <att_permissions+0x3a>
100106a2:	0641      	lsls	r1, r0, #25
100106a4:	d401      	bmi.n	100106aa <att_permissions+0x32>
100106a6:	0681      	lsls	r1, r0, #26
100106a8:	d501      	bpl.n	100106ae <att_permissions+0x36>
100106aa:	4807      	ldr	r0, [pc, #28]	; (100106c8 <att_permissions+0x50>)
100106ac:	e009      	b.n	100106c2 <att_permissions+0x4a>
100106ae:	06c1      	lsls	r1, r0, #27
100106b0:	d501      	bpl.n	100106b6 <att_permissions+0x3e>
100106b2:	4806      	ldr	r0, [pc, #24]	; (100106cc <att_permissions+0x54>)
100106b4:	e005      	b.n	100106c2 <att_permissions+0x4a>
100106b6:	2a00      	cmp	r2, #0
100106b8:	d001      	beq.n	100106be <att_permissions+0x46>
100106ba:	2204      	movs	r2, #4
100106bc:	4313      	orrs	r3, r2
100106be:	2080      	movs	r0, #128	; 0x80
100106c0:	0180      	lsls	r0, r0, #6
100106c2:	4318      	orrs	r0, r3
100106c4:	bd30      	pop	{r4, r5, pc}
100106c6:	46c0      	nop			; (mov r8, r8)
100106c8:	0000200c 	.word	0x0000200c
100106cc:	00002004 	.word	0x00002004

100106d0 <char_permissions>:
100106d0:	b530      	push	{r4, r5, lr}
100106d2:	2300      	movs	r3, #0
100106d4:	0784      	lsls	r4, r0, #30
100106d6:	d503      	bpl.n	100106e0 <char_permissions+0x10>
100106d8:	3301      	adds	r3, #1
100106da:	4219      	tst	r1, r3
100106dc:	d100      	bne.n	100106e0 <char_permissions+0x10>
100106de:	3302      	adds	r3, #2
100106e0:	0704      	lsls	r4, r0, #28
100106e2:	d508      	bpl.n	100106f6 <char_permissions+0x26>
100106e4:	06cc      	lsls	r4, r1, #27
100106e6:	d501      	bpl.n	100106ec <char_permissions+0x1c>
100106e8:	2404      	movs	r4, #4
100106ea:	e000      	b.n	100106ee <char_permissions+0x1e>
100106ec:	240c      	movs	r4, #12
100106ee:	4323      	orrs	r3, r4
100106f0:	2480      	movs	r4, #128	; 0x80
100106f2:	01a4      	lsls	r4, r4, #6
100106f4:	4323      	orrs	r3, r4
100106f6:	0684      	lsls	r4, r0, #26
100106f8:	d506      	bpl.n	10010708 <char_permissions+0x38>
100106fa:	2406      	movs	r4, #6
100106fc:	4221      	tst	r1, r4
100106fe:	d101      	bne.n	10010704 <char_permissions+0x34>
10010700:	340a      	adds	r4, #10
10010702:	e000      	b.n	10010706 <char_permissions+0x36>
10010704:	2430      	movs	r4, #48	; 0x30
10010706:	4323      	orrs	r3, r4
10010708:	06c4      	lsls	r4, r0, #27
1001070a:	d506      	bpl.n	1001071a <char_permissions+0x4a>
1001070c:	2406      	movs	r4, #6
1001070e:	4221      	tst	r1, r4
10010710:	d101      	bne.n	10010716 <char_permissions+0x46>
10010712:	343a      	adds	r4, #58	; 0x3a
10010714:	e000      	b.n	10010718 <char_permissions+0x48>
10010716:	24c0      	movs	r4, #192	; 0xc0
10010718:	4323      	orrs	r3, r4
1001071a:	2480      	movs	r4, #128	; 0x80
1001071c:	0064      	lsls	r4, r4, #1
1001071e:	4220      	tst	r0, r4
10010720:	d000      	beq.n	10010724 <char_permissions+0x54>
10010722:	4323      	orrs	r3, r4
10010724:	07c4      	lsls	r4, r0, #31
10010726:	d502      	bpl.n	1001072e <char_permissions+0x5e>
10010728:	2480      	movs	r4, #128	; 0x80
1001072a:	00a4      	lsls	r4, r4, #2
1001072c:	4323      	orrs	r3, r4
1001072e:	2404      	movs	r4, #4
10010730:	4220      	tst	r0, r4
10010732:	d006      	beq.n	10010742 <char_permissions+0x72>
10010734:	06cd      	lsls	r5, r1, #27
10010736:	d400      	bmi.n	1001073a <char_permissions+0x6a>
10010738:	240c      	movs	r4, #12
1001073a:	4323      	orrs	r3, r4
1001073c:	2480      	movs	r4, #128	; 0x80
1001073e:	0124      	lsls	r4, r4, #4
10010740:	4323      	orrs	r3, r4
10010742:	0644      	lsls	r4, r0, #25
10010744:	d501      	bpl.n	1001074a <char_permissions+0x7a>
10010746:	4c08      	ldr	r4, [pc, #32]	; (10010768 <char_permissions+0x98>)
10010748:	4323      	orrs	r3, r4
1001074a:	0600      	lsls	r0, r0, #24
1001074c:	d507      	bpl.n	1001075e <char_permissions+0x8e>
1001074e:	2004      	movs	r0, #4
10010750:	06c9      	lsls	r1, r1, #27
10010752:	d400      	bmi.n	10010756 <char_permissions+0x86>
10010754:	200c      	movs	r0, #12
10010756:	4303      	orrs	r3, r0
10010758:	2084      	movs	r0, #132	; 0x84
1001075a:	0180      	lsls	r0, r0, #6
1001075c:	4303      	orrs	r3, r0
1001075e:	0390      	lsls	r0, r2, #14
10010760:	4303      	orrs	r3, r0
10010762:	b298      	uxth	r0, r3
10010764:	bd30      	pop	{r4, r5, pc}
10010766:	46c0      	nop			; (mov r8, r8)
10010768:	00001004 	.word	0x00001004

1001076c <presentation_format_define>:
1001076c:	b507      	push	{r0, r1, r2, lr}
1001076e:	466a      	mov	r2, sp
10010770:	780b      	ldrb	r3, [r1, #0]
10010772:	7013      	strb	r3, [r2, #0]
10010774:	784b      	ldrb	r3, [r1, #1]
10010776:	7053      	strb	r3, [r2, #1]
10010778:	884b      	ldrh	r3, [r1, #2]
1001077a:	7093      	strb	r3, [r2, #2]
1001077c:	0a1b      	lsrs	r3, r3, #8
1001077e:	70d3      	strb	r3, [r2, #3]
10010780:	790b      	ldrb	r3, [r1, #4]
10010782:	7113      	strb	r3, [r2, #4]
10010784:	88cb      	ldrh	r3, [r1, #6]
10010786:	2107      	movs	r1, #7
10010788:	7153      	strb	r3, [r2, #5]
1001078a:	0a1b      	lsrs	r3, r3, #8
1001078c:	7193      	strb	r3, [r2, #6]
1001078e:	4b01      	ldr	r3, [pc, #4]	; (10010794 <presentation_format_define+0x28>)
10010790:	4798      	blx	r3
10010792:	bd0e      	pop	{r1, r2, r3, pc}
10010794:	10012b01 	.word	0x10012b01

10010798 <db_addATT>:
10010798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001079a:	4c29      	ldr	r4, [pc, #164]	; (10010840 <db_addATT+0xa8>)
1001079c:	1c1d      	adds	r5, r3, #0
1001079e:	6823      	ldr	r3, [r4, #0]
100107a0:	9001      	str	r0, [sp, #4]
100107a2:	26d3      	movs	r6, #211	; 0xd3
100107a4:	2b00      	cmp	r3, #0
100107a6:	d048      	beq.n	1001083a <db_addATT+0xa2>
100107a8:	1c1e      	adds	r6, r3, #0
100107aa:	3e0c      	subs	r6, #12
100107ac:	6026      	str	r6, [r4, #0]
100107ae:	2900      	cmp	r1, #0
100107b0:	d005      	beq.n	100107be <db_addATT+0x26>
100107b2:	4f24      	ldr	r7, [pc, #144]	; (10010844 <db_addATT+0xac>)
100107b4:	46bc      	mov	ip, r7
100107b6:	4660      	mov	r0, ip
100107b8:	683f      	ldr	r7, [r7, #0]
100107ba:	18bf      	adds	r7, r7, r2
100107bc:	6007      	str	r7, [r0, #0]
100107be:	4821      	ldr	r0, [pc, #132]	; (10010844 <db_addATT+0xac>)
100107c0:	6807      	ldr	r7, [r0, #0]
100107c2:	4684      	mov	ip, r0
100107c4:	42be      	cmp	r6, r7
100107c6:	d932      	bls.n	1001082e <db_addATT+0x96>
100107c8:	4668      	mov	r0, sp
100107ca:	8880      	ldrh	r0, [r0, #4]
100107cc:	3b0c      	subs	r3, #12
100107ce:	8018      	strh	r0, [r3, #0]
100107d0:	6823      	ldr	r3, [r4, #0]
100107d2:	2900      	cmp	r1, #0
100107d4:	d009      	beq.n	100107ea <db_addATT+0x52>
100107d6:	2a00      	cmp	r2, #0
100107d8:	d007      	beq.n	100107ea <db_addATT+0x52>
100107da:	4660      	mov	r0, ip
100107dc:	6800      	ldr	r0, [r0, #0]
100107de:	809a      	strh	r2, [r3, #4]
100107e0:	1a80      	subs	r0, r0, r2
100107e2:	6098      	str	r0, [r3, #8]
100107e4:	4b18      	ldr	r3, [pc, #96]	; (10010848 <db_addATT+0xb0>)
100107e6:	4798      	blx	r3
100107e8:	e002      	b.n	100107f0 <db_addATT+0x58>
100107ea:	2100      	movs	r1, #0
100107ec:	809a      	strh	r2, [r3, #4]
100107ee:	6099      	str	r1, [r3, #8]
100107f0:	2300      	movs	r3, #0
100107f2:	6822      	ldr	r2, [r4, #0]
100107f4:	7093      	strb	r3, [r2, #2]
100107f6:	3303      	adds	r3, #3
100107f8:	402b      	ands	r3, r5
100107fa:	2b03      	cmp	r3, #3
100107fc:	d001      	beq.n	10010802 <db_addATT+0x6a>
100107fe:	076b      	lsls	r3, r5, #29
10010800:	d504      	bpl.n	1001080c <db_addATT+0x74>
10010802:	2101      	movs	r1, #1
10010804:	6822      	ldr	r2, [r4, #0]
10010806:	7893      	ldrb	r3, [r2, #2]
10010808:	430b      	orrs	r3, r1
1001080a:	7093      	strb	r3, [r2, #2]
1001080c:	2330      	movs	r3, #48	; 0x30
1001080e:	402b      	ands	r3, r5
10010810:	2b30      	cmp	r3, #48	; 0x30
10010812:	d001      	beq.n	10010818 <db_addATT+0x80>
10010814:	066b      	lsls	r3, r5, #25
10010816:	d504      	bpl.n	10010822 <db_addATT+0x8a>
10010818:	2102      	movs	r1, #2
1001081a:	6822      	ldr	r2, [r4, #0]
1001081c:	7893      	ldrb	r3, [r2, #2]
1001081e:	430b      	orrs	r3, r1
10010820:	7093      	strb	r3, [r2, #2]
10010822:	4a0a      	ldr	r2, [pc, #40]	; (1001084c <db_addATT+0xb4>)
10010824:	2600      	movs	r6, #0
10010826:	6813      	ldr	r3, [r2, #0]
10010828:	3301      	adds	r3, #1
1001082a:	6013      	str	r3, [r2, #0]
1001082c:	e005      	b.n	1001083a <db_addATT+0xa2>
1001082e:	6023      	str	r3, [r4, #0]
10010830:	2611      	movs	r6, #17
10010832:	2900      	cmp	r1, #0
10010834:	d001      	beq.n	1001083a <db_addATT+0xa2>
10010836:	1aba      	subs	r2, r7, r2
10010838:	6002      	str	r2, [r0, #0]
1001083a:	1c30      	adds	r0, r6, #0
1001083c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001083e:	46c0      	nop			; (mov r8, r8)
10010840:	100198a0 	.word	0x100198a0
10010844:	100198a4 	.word	0x100198a4
10010848:	100149f3 	.word	0x100149f3
1001084c:	100198a8 	.word	0x100198a8

10010850 <user_description_define>:
10010850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010852:	1c05      	adds	r5, r0, #0
10010854:	20cf      	movs	r0, #207	; 0xcf
10010856:	2a00      	cmp	r2, #0
10010858:	d01c      	beq.n	10010894 <user_description_define+0x44>
1001085a:	1c14      	adds	r4, r2, #0
1001085c:	2203      	movs	r2, #3
1001085e:	1c1e      	adds	r6, r3, #0
10010860:	400a      	ands	r2, r1
10010862:	1c0b      	adds	r3, r1, #0
10010864:	3a03      	subs	r2, #3
10010866:	4251      	negs	r1, r2
10010868:	4151      	adcs	r1, r2
1001086a:	075a      	lsls	r2, r3, #29
1001086c:	0fd2      	lsrs	r2, r2, #31
1001086e:	430a      	orrs	r2, r1
10010870:	03d2      	lsls	r2, r2, #15
10010872:	4f09      	ldr	r7, [pc, #36]	; (10010898 <user_description_define+0x48>)
10010874:	1c28      	adds	r0, r5, #0
10010876:	2a00      	cmp	r2, #0
10010878:	d003      	beq.n	10010882 <user_description_define+0x32>
1001087a:	1c21      	adds	r1, r4, #0
1001087c:	1c32      	adds	r2, r6, #0
1001087e:	47b8      	blx	r7
10010880:	e008      	b.n	10010894 <user_description_define+0x44>
10010882:	1c11      	adds	r1, r2, #0
10010884:	47b8      	blx	r7
10010886:	2800      	cmp	r0, #0
10010888:	d104      	bne.n	10010894 <user_description_define+0x44>
1001088a:	1c28      	adds	r0, r5, #0
1001088c:	1c31      	adds	r1, r6, #0
1001088e:	1c22      	adds	r2, r4, #0
10010890:	4b02      	ldr	r3, [pc, #8]	; (1001089c <user_description_define+0x4c>)
10010892:	4798      	blx	r3
10010894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010896:	46c0      	nop			; (mov r8, r8)
10010898:	10010799 	.word	0x10010799
1001089c:	10012b01 	.word	0x10012b01

100108a0 <at_ble_read_authorize_reply.part.1>:
100108a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100108a2:	4b09      	ldr	r3, [pc, #36]	; (100108c8 <at_ble_read_authorize_reply.part.1+0x28>)
100108a4:	1c05      	adds	r5, r0, #0
100108a6:	1c08      	adds	r0, r1, #0
100108a8:	1c0c      	adds	r4, r1, #0
100108aa:	4798      	blx	r3
100108ac:	2800      	cmp	r0, #0
100108ae:	d009      	beq.n	100108c4 <at_ble_read_authorize_reply.part.1+0x24>
100108b0:	6882      	ldr	r2, [r0, #8]
100108b2:	2a00      	cmp	r2, #0
100108b4:	d006      	beq.n	100108c4 <at_ble_read_authorize_reply.part.1+0x24>
100108b6:	8883      	ldrh	r3, [r0, #4]
100108b8:	1c29      	adds	r1, r5, #0
100108ba:	9200      	str	r2, [sp, #0]
100108bc:	1c20      	adds	r0, r4, #0
100108be:	2200      	movs	r2, #0
100108c0:	4c02      	ldr	r4, [pc, #8]	; (100108cc <at_ble_read_authorize_reply.part.1+0x2c>)
100108c2:	47a0      	blx	r4
100108c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100108c6:	46c0      	nop			; (mov r8, r8)
100108c8:	10010639 	.word	0x10010639
100108cc:	10012599 	.word	0x10012599

100108d0 <internal_at_ble_service_define>:
100108d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100108d2:	b08b      	sub	sp, #44	; 0x2c
100108d4:	9306      	str	r3, [sp, #24]
100108d6:	ab10      	add	r3, sp, #64	; 0x40
100108d8:	9202      	str	r2, [sp, #8]
100108da:	cb04      	ldmia	r3!, {r2}
100108dc:	1c05      	adds	r5, r0, #0
100108de:	881b      	ldrh	r3, [r3, #0]
100108e0:	9105      	str	r1, [sp, #20]
100108e2:	9303      	str	r3, [sp, #12]
100108e4:	ab12      	add	r3, sp, #72	; 0x48
100108e6:	781b      	ldrb	r3, [r3, #0]
100108e8:	20cf      	movs	r0, #207	; 0xcf
100108ea:	9304      	str	r3, [sp, #16]
100108ec:	2d00      	cmp	r5, #0
100108ee:	d100      	bne.n	100108f2 <internal_at_ble_service_define+0x22>
100108f0:	e1ca      	b.n	10010c88 <internal_at_ble_service_define+0x3b8>
100108f2:	2900      	cmp	r1, #0
100108f4:	d100      	bne.n	100108f8 <internal_at_ble_service_define+0x28>
100108f6:	e1c7      	b.n	10010c88 <internal_at_ble_service_define+0x3b8>
100108f8:	2a00      	cmp	r2, #0
100108fa:	d100      	bne.n	100108fe <internal_at_ble_service_define+0x2e>
100108fc:	e1c4      	b.n	10010c88 <internal_at_ble_service_define+0x3b8>
100108fe:	9b03      	ldr	r3, [sp, #12]
10010900:	2b00      	cmp	r3, #0
10010902:	d100      	bne.n	10010906 <internal_at_ble_service_define+0x36>
10010904:	e1c0      	b.n	10010c88 <internal_at_ble_service_define+0x3b8>
10010906:	4bc9      	ldr	r3, [pc, #804]	; (10010c2c <internal_at_ble_service_define+0x35c>)
10010908:	3004      	adds	r0, #4
1001090a:	681e      	ldr	r6, [r3, #0]
1001090c:	2e00      	cmp	r6, #0
1001090e:	d100      	bne.n	10010912 <internal_at_ble_service_define+0x42>
10010910:	e1ba      	b.n	10010c88 <internal_at_ble_service_define+0x3b8>
10010912:	2400      	movs	r4, #0
10010914:	4bc6      	ldr	r3, [pc, #792]	; (10010c30 <internal_at_ble_service_define+0x360>)
10010916:	8034      	strh	r4, [r6, #0]
10010918:	881b      	ldrh	r3, [r3, #0]
1001091a:	1db7      	adds	r7, r6, #6
1001091c:	1c21      	adds	r1, r4, #0
1001091e:	2210      	movs	r2, #16
10010920:	8073      	strh	r3, [r6, #2]
10010922:	1c38      	adds	r0, r7, #0
10010924:	4bc3      	ldr	r3, [pc, #780]	; (10010c34 <internal_at_ble_service_define+0x364>)
10010926:	4798      	blx	r3
10010928:	7828      	ldrb	r0, [r5, #0]
1001092a:	4bc3      	ldr	r3, [pc, #780]	; (10010c38 <internal_at_ble_service_define+0x368>)
1001092c:	4798      	blx	r3
1001092e:	1c69      	adds	r1, r5, #1
10010930:	1c02      	adds	r2, r0, #0
10010932:	4bc2      	ldr	r3, [pc, #776]	; (10010c3c <internal_at_ble_service_define+0x36c>)
10010934:	1c38      	adds	r0, r7, #0
10010936:	4798      	blx	r3
10010938:	2204      	movs	r2, #4
1001093a:	782b      	ldrb	r3, [r5, #0]
1001093c:	9d02      	ldr	r5, [sp, #8]
1001093e:	011b      	lsls	r3, r3, #4
10010940:	4313      	orrs	r3, r2
10010942:	9a04      	ldr	r2, [sp, #16]
10010944:	7174      	strb	r4, [r6, #5]
10010946:	0192      	lsls	r2, r2, #6
10010948:	4313      	orrs	r3, r2
1001094a:	7133      	strb	r3, [r6, #4]
1001094c:	2316      	movs	r3, #22
1001094e:	9a06      	ldr	r2, [sp, #24]
10010950:	3512      	adds	r5, #18
10010952:	4353      	muls	r3, r2
10010954:	9a02      	ldr	r2, [sp, #8]
10010956:	3312      	adds	r3, #18
10010958:	18d7      	adds	r7, r2, r3
1001095a:	42bd      	cmp	r5, r7
1001095c:	d00f      	beq.n	1001097e <internal_at_ble_service_define+0xae>
1001095e:	4bb8      	ldr	r3, [pc, #736]	; (10010c40 <internal_at_ble_service_define+0x370>)
10010960:	8829      	ldrh	r1, [r5, #0]
10010962:	9300      	str	r3, [sp, #0]
10010964:	230e      	movs	r3, #14
10010966:	aa06      	add	r2, sp, #24
10010968:	189b      	adds	r3, r3, r2
1001096a:	9301      	str	r3, [sp, #4]
1001096c:	4cb5      	ldr	r4, [pc, #724]	; (10010c44 <internal_at_ble_service_define+0x374>)
1001096e:	1c30      	adds	r0, r6, #0
10010970:	2201      	movs	r2, #1
10010972:	2302      	movs	r3, #2
10010974:	47a0      	blx	r4
10010976:	3516      	adds	r5, #22
10010978:	1e04      	subs	r4, r0, #0
1001097a:	d0ee      	beq.n	1001095a <internal_at_ble_service_define+0x8a>
1001097c:	e183      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
1001097e:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010980:	2300      	movs	r3, #0
10010982:	3714      	adds	r7, #20
10010984:	1c3d      	adds	r5, r7, #0
10010986:	9302      	str	r3, [sp, #8]
10010988:	9b02      	ldr	r3, [sp, #8]
1001098a:	9a03      	ldr	r2, [sp, #12]
1001098c:	4293      	cmp	r3, r2
1001098e:	db00      	blt.n	10010992 <internal_at_ble_service_define+0xc2>
10010990:	e0bf      	b.n	10010b12 <internal_at_ble_service_define+0x242>
10010992:	4bad      	ldr	r3, [pc, #692]	; (10010c48 <internal_at_ble_service_define+0x378>)
10010994:	aa06      	add	r2, sp, #24
10010996:	9300      	str	r3, [sp, #0]
10010998:	230e      	movs	r3, #14
1001099a:	189b      	adds	r3, r3, r2
1001099c:	9301      	str	r3, [sp, #4]
1001099e:	4ca9      	ldr	r4, [pc, #676]	; (10010c44 <internal_at_ble_service_define+0x374>)
100109a0:	1c30      	adds	r0, r6, #0
100109a2:	2104      	movs	r1, #4
100109a4:	2201      	movs	r2, #1
100109a6:	2302      	movs	r3, #2
100109a8:	47a0      	blx	r4
100109aa:	1e04      	subs	r4, r0, #0
100109ac:	d000      	beq.n	100109b0 <internal_at_ble_service_define+0xe0>
100109ae:	e16a      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
100109b0:	1c2b      	adds	r3, r5, #0
100109b2:	3b12      	subs	r3, #18
100109b4:	7b2c      	ldrb	r4, [r5, #12]
100109b6:	781b      	ldrb	r3, [r3, #0]
100109b8:	1c21      	adds	r1, r4, #0
100109ba:	1c1a      	adds	r2, r3, #0
100109bc:	9304      	str	r3, [sp, #16]
100109be:	8828      	ldrh	r0, [r5, #0]
100109c0:	4ba2      	ldr	r3, [pc, #648]	; (10010c4c <internal_at_ble_service_define+0x37c>)
100109c2:	4798      	blx	r3
100109c4:	2303      	movs	r3, #3
100109c6:	4023      	ands	r3, r4
100109c8:	3b03      	subs	r3, #3
100109ca:	4259      	negs	r1, r3
100109cc:	4159      	adcs	r1, r3
100109ce:	2301      	movs	r3, #1
100109d0:	08a4      	lsrs	r4, r4, #2
100109d2:	401c      	ands	r4, r3
100109d4:	430c      	orrs	r4, r1
100109d6:	896b      	ldrh	r3, [r5, #10]
100109d8:	03e4      	lsls	r4, r4, #15
100109da:	431c      	orrs	r4, r3
100109dc:	9007      	str	r0, [sp, #28]
100109de:	4b96      	ldr	r3, [pc, #600]	; (10010c38 <internal_at_ble_service_define+0x368>)
100109e0:	9804      	ldr	r0, [sp, #16]
100109e2:	4798      	blx	r3
100109e4:	1c2a      	adds	r2, r5, #0
100109e6:	3a11      	subs	r2, #17
100109e8:	9200      	str	r2, [sp, #0]
100109ea:	3a03      	subs	r2, #3
100109ec:	1c03      	adds	r3, r0, #0
100109ee:	9201      	str	r2, [sp, #4]
100109f0:	1c21      	adds	r1, r4, #0
100109f2:	1c30      	adds	r0, r6, #0
100109f4:	4c93      	ldr	r4, [pc, #588]	; (10010c44 <internal_at_ble_service_define+0x374>)
100109f6:	9a07      	ldr	r2, [sp, #28]
100109f8:	47a0      	blx	r4
100109fa:	1e04      	subs	r4, r0, #0
100109fc:	d000      	beq.n	10010a00 <internal_at_ble_service_define+0x130>
100109fe:	e142      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010a00:	22c0      	movs	r2, #192	; 0xc0
10010a02:	882b      	ldrh	r3, [r5, #0]
10010a04:	0052      	lsls	r2, r2, #1
10010a06:	4213      	tst	r3, r2
10010a08:	d104      	bne.n	10010a14 <internal_at_ble_service_define+0x144>
10010a0a:	8aab      	ldrh	r3, [r5, #20]
10010a0c:	9304      	str	r3, [sp, #16]
10010a0e:	2b00      	cmp	r3, #0
10010a10:	d116      	bne.n	10010a40 <internal_at_ble_service_define+0x170>
10010a12:	e03a      	b.n	10010a8a <internal_at_ble_service_define+0x1ba>
10010a14:	2201      	movs	r2, #1
10010a16:	09d9      	lsrs	r1, r3, #7
10010a18:	4011      	ands	r1, r2
10010a1a:	05db      	lsls	r3, r3, #23
10010a1c:	d501      	bpl.n	10010a22 <internal_at_ble_service_define+0x152>
10010a1e:	2302      	movs	r3, #2
10010a20:	4319      	orrs	r1, r3
10010a22:	4b8b      	ldr	r3, [pc, #556]	; (10010c50 <internal_at_ble_service_define+0x380>)
10010a24:	aa06      	add	r2, sp, #24
10010a26:	9300      	str	r3, [sp, #0]
10010a28:	230e      	movs	r3, #14
10010a2a:	189b      	adds	r3, r3, r2
10010a2c:	9301      	str	r3, [sp, #4]
10010a2e:	4c85      	ldr	r4, [pc, #532]	; (10010c44 <internal_at_ble_service_define+0x374>)
10010a30:	0209      	lsls	r1, r1, #8
10010a32:	1c30      	adds	r0, r6, #0
10010a34:	2201      	movs	r2, #1
10010a36:	2302      	movs	r3, #2
10010a38:	47a0      	blx	r4
10010a3a:	1e04      	subs	r4, r0, #0
10010a3c:	d0e5      	beq.n	10010a0a <internal_at_ble_service_define+0x13a>
10010a3e:	e122      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010a40:	2380      	movs	r3, #128	; 0x80
10010a42:	882a      	ldrh	r2, [r5, #0]
10010a44:	7f2c      	ldrb	r4, [r5, #28]
10010a46:	005b      	lsls	r3, r3, #1
10010a48:	401a      	ands	r2, r3
10010a4a:	1c20      	adds	r0, r4, #0
10010a4c:	2101      	movs	r1, #1
10010a4e:	2a00      	cmp	r2, #0
10010a50:	d000      	beq.n	10010a54 <internal_at_ble_service_define+0x184>
10010a52:	1c0a      	adds	r2, r1, #0
10010a54:	4b7f      	ldr	r3, [pc, #508]	; (10010c54 <internal_at_ble_service_define+0x384>)
10010a56:	4798      	blx	r3
10010a58:	2203      	movs	r2, #3
10010a5a:	4022      	ands	r2, r4
10010a5c:	3a03      	subs	r2, #3
10010a5e:	4251      	negs	r1, r2
10010a60:	4151      	adcs	r1, r2
10010a62:	4b7d      	ldr	r3, [pc, #500]	; (10010c58 <internal_at_ble_service_define+0x388>)
10010a64:	1c0a      	adds	r2, r1, #0
10010a66:	9300      	str	r3, [sp, #0]
10010a68:	1c2b      	adds	r3, r5, #0
10010a6a:	0764      	lsls	r4, r4, #29
10010a6c:	0fe4      	lsrs	r4, r4, #31
10010a6e:	4322      	orrs	r2, r4
10010a70:	03d2      	lsls	r2, r2, #15
10010a72:	4310      	orrs	r0, r2
10010a74:	3320      	adds	r3, #32
10010a76:	b282      	uxth	r2, r0
10010a78:	9301      	str	r3, [sp, #4]
10010a7a:	4c72      	ldr	r4, [pc, #456]	; (10010c44 <internal_at_ble_service_define+0x374>)
10010a7c:	1c30      	adds	r0, r6, #0
10010a7e:	9904      	ldr	r1, [sp, #16]
10010a80:	2302      	movs	r3, #2
10010a82:	47a0      	blx	r4
10010a84:	1e04      	subs	r4, r0, #0
10010a86:	d000      	beq.n	10010a8a <internal_at_ble_service_define+0x1ba>
10010a88:	e0fd      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010a8a:	2101      	movs	r1, #1
10010a8c:	882b      	ldrh	r3, [r5, #0]
10010a8e:	420b      	tst	r3, r1
10010a90:	d011      	beq.n	10010ab6 <internal_at_ble_service_define+0x1e6>
10010a92:	7fa8      	ldrb	r0, [r5, #30]
10010a94:	4b6f      	ldr	r3, [pc, #444]	; (10010c54 <internal_at_ble_service_define+0x384>)
10010a96:	2200      	movs	r2, #0
10010a98:	4798      	blx	r3
10010a9a:	4b70      	ldr	r3, [pc, #448]	; (10010c5c <internal_at_ble_service_define+0x38c>)
10010a9c:	1c02      	adds	r2, r0, #0
10010a9e:	9300      	str	r3, [sp, #0]
10010aa0:	1c2b      	adds	r3, r5, #0
10010aa2:	3324      	adds	r3, #36	; 0x24
10010aa4:	9301      	str	r3, [sp, #4]
10010aa6:	4c67      	ldr	r4, [pc, #412]	; (10010c44 <internal_at_ble_service_define+0x374>)
10010aa8:	1c30      	adds	r0, r6, #0
10010aaa:	496d      	ldr	r1, [pc, #436]	; (10010c60 <internal_at_ble_service_define+0x390>)
10010aac:	2302      	movs	r3, #2
10010aae:	47a0      	blx	r4
10010ab0:	1e04      	subs	r4, r0, #0
10010ab2:	d000      	beq.n	10010ab6 <internal_at_ble_service_define+0x1e6>
10010ab4:	e0e7      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010ab6:	2330      	movs	r3, #48	; 0x30
10010ab8:	882a      	ldrh	r2, [r5, #0]
10010aba:	421a      	tst	r2, r3
10010abc:	d012      	beq.n	10010ae4 <internal_at_ble_service_define+0x214>
10010abe:	2101      	movs	r1, #1
10010ac0:	7f68      	ldrb	r0, [r5, #29]
10010ac2:	1c0a      	adds	r2, r1, #0
10010ac4:	4b63      	ldr	r3, [pc, #396]	; (10010c54 <internal_at_ble_service_define+0x384>)
10010ac6:	4798      	blx	r3
10010ac8:	4b66      	ldr	r3, [pc, #408]	; (10010c64 <internal_at_ble_service_define+0x394>)
10010aca:	1c02      	adds	r2, r0, #0
10010acc:	9300      	str	r3, [sp, #0]
10010ace:	1c2b      	adds	r3, r5, #0
10010ad0:	3322      	adds	r3, #34	; 0x22
10010ad2:	9301      	str	r3, [sp, #4]
10010ad4:	4c5b      	ldr	r4, [pc, #364]	; (10010c44 <internal_at_ble_service_define+0x374>)
10010ad6:	1c30      	adds	r0, r6, #0
10010ad8:	4961      	ldr	r1, [pc, #388]	; (10010c60 <internal_at_ble_service_define+0x390>)
10010ada:	2302      	movs	r3, #2
10010adc:	47a0      	blx	r4
10010ade:	1e04      	subs	r4, r0, #0
10010ae0:	d000      	beq.n	10010ae4 <internal_at_ble_service_define+0x214>
10010ae2:	e0d0      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010ae4:	69ab      	ldr	r3, [r5, #24]
10010ae6:	2b00      	cmp	r3, #0
10010ae8:	d00e      	beq.n	10010b08 <internal_at_ble_service_define+0x238>
10010aea:	4b5f      	ldr	r3, [pc, #380]	; (10010c68 <internal_at_ble_service_define+0x398>)
10010aec:	aa06      	add	r2, sp, #24
10010aee:	9300      	str	r3, [sp, #0]
10010af0:	230e      	movs	r3, #14
10010af2:	189b      	adds	r3, r3, r2
10010af4:	9301      	str	r3, [sp, #4]
10010af6:	4c53      	ldr	r4, [pc, #332]	; (10010c44 <internal_at_ble_service_define+0x374>)
10010af8:	1c30      	adds	r0, r6, #0
10010afa:	2107      	movs	r1, #7
10010afc:	2201      	movs	r2, #1
10010afe:	2302      	movs	r3, #2
10010b00:	47a0      	blx	r4
10010b02:	1e04      	subs	r4, r0, #0
10010b04:	d000      	beq.n	10010b08 <internal_at_ble_service_define+0x238>
10010b06:	e0be      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010b08:	9b02      	ldr	r3, [sp, #8]
10010b0a:	353c      	adds	r5, #60	; 0x3c
10010b0c:	3301      	adds	r3, #1
10010b0e:	9302      	str	r3, [sp, #8]
10010b10:	e73a      	b.n	10010988 <internal_at_ble_service_define+0xb8>
10010b12:	1c30      	adds	r0, r6, #0
10010b14:	4b55      	ldr	r3, [pc, #340]	; (10010c6c <internal_at_ble_service_define+0x39c>)
10010b16:	4798      	blx	r3
10010b18:	1e04      	subs	r4, r0, #0
10010b1a:	d000      	beq.n	10010b1e <internal_at_ble_service_define+0x24e>
10010b1c:	e0b3      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010b1e:	8833      	ldrh	r3, [r6, #0]
10010b20:	9a05      	ldr	r2, [sp, #20]
10010b22:	8013      	strh	r3, [r2, #0]
10010b24:	8836      	ldrh	r6, [r6, #0]
10010b26:	9b06      	ldr	r3, [sp, #24]
10010b28:	9a03      	ldr	r2, [sp, #12]
10010b2a:	18f6      	adds	r6, r6, r3
10010b2c:	b2b3      	uxth	r3, r6
10010b2e:	9302      	str	r3, [sp, #8]
10010b30:	233c      	movs	r3, #60	; 0x3c
10010b32:	4353      	muls	r3, r2
10010b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010b36:	3314      	adds	r3, #20
10010b38:	18d3      	adds	r3, r2, r3
10010b3a:	9304      	str	r3, [sp, #16]
10010b3c:	9b04      	ldr	r3, [sp, #16]
10010b3e:	429f      	cmp	r7, r3
10010b40:	d100      	bne.n	10010b44 <internal_at_ble_service_define+0x274>
10010b42:	e0a0      	b.n	10010c86 <internal_at_ble_service_define+0x3b6>
10010b44:	9b02      	ldr	r3, [sp, #8]
10010b46:	1c9d      	adds	r5, r3, #2
10010b48:	1c3b      	adds	r3, r7, #0
10010b4a:	b2ad      	uxth	r5, r5
10010b4c:	3b14      	subs	r3, #20
10010b4e:	801d      	strh	r5, [r3, #0]
10010b50:	9303      	str	r3, [sp, #12]
10010b52:	893b      	ldrh	r3, [r7, #8]
10010b54:	2b00      	cmp	r3, #0
10010b56:	d108      	bne.n	10010b6a <internal_at_ble_service_define+0x29a>
10010b58:	23c0      	movs	r3, #192	; 0xc0
10010b5a:	883a      	ldrh	r2, [r7, #0]
10010b5c:	005b      	lsls	r3, r3, #1
10010b5e:	421a      	tst	r2, r3
10010b60:	d026      	beq.n	10010bb0 <internal_at_ble_service_define+0x2e0>
10010b62:	9e02      	ldr	r6, [sp, #8]
10010b64:	3603      	adds	r6, #3
10010b66:	b2b5      	uxth	r5, r6
10010b68:	e022      	b.n	10010bb0 <internal_at_ble_service_define+0x2e0>
10010b6a:	2103      	movs	r1, #3
10010b6c:	7b3b      	ldrb	r3, [r7, #12]
10010b6e:	4019      	ands	r1, r3
10010b70:	3903      	subs	r1, #3
10010b72:	424a      	negs	r2, r1
10010b74:	414a      	adcs	r2, r1
10010b76:	0759      	lsls	r1, r3, #29
10010b78:	0fc9      	lsrs	r1, r1, #31
10010b7a:	4311      	orrs	r1, r2
10010b7c:	03c9      	lsls	r1, r1, #15
10010b7e:	897a      	ldrh	r2, [r7, #10]
10010b80:	2900      	cmp	r1, #0
10010b82:	d007      	beq.n	10010b94 <internal_at_ble_service_define+0x2c4>
10010b84:	6879      	ldr	r1, [r7, #4]
10010b86:	2900      	cmp	r1, #0
10010b88:	d100      	bne.n	10010b8c <internal_at_ble_service_define+0x2bc>
10010b8a:	4939      	ldr	r1, [pc, #228]	; (10010c70 <internal_at_ble_service_define+0x3a0>)
10010b8c:	1c28      	adds	r0, r5, #0
10010b8e:	4e39      	ldr	r6, [pc, #228]	; (10010c74 <internal_at_ble_service_define+0x3a4>)
10010b90:	47b0      	blx	r6
10010b92:	e00a      	b.n	10010baa <internal_at_ble_service_define+0x2da>
10010b94:	1c28      	adds	r0, r5, #0
10010b96:	4e37      	ldr	r6, [pc, #220]	; (10010c74 <internal_at_ble_service_define+0x3a4>)
10010b98:	47b0      	blx	r6
10010b9a:	2800      	cmp	r0, #0
10010b9c:	d172      	bne.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010b9e:	9b03      	ldr	r3, [sp, #12]
10010ba0:	8939      	ldrh	r1, [r7, #8]
10010ba2:	8818      	ldrh	r0, [r3, #0]
10010ba4:	687a      	ldr	r2, [r7, #4]
10010ba6:	4b34      	ldr	r3, [pc, #208]	; (10010c78 <internal_at_ble_service_define+0x3a8>)
10010ba8:	4798      	blx	r3
10010baa:	2800      	cmp	r0, #0
10010bac:	d0d4      	beq.n	10010b58 <internal_at_ble_service_define+0x288>
10010bae:	e069      	b.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010bb0:	8abb      	ldrh	r3, [r7, #20]
10010bb2:	2b00      	cmp	r3, #0
10010bb4:	d00a      	beq.n	10010bcc <internal_at_ble_service_define+0x2fc>
10010bb6:	3501      	adds	r5, #1
10010bb8:	b2ad      	uxth	r5, r5
10010bba:	843d      	strh	r5, [r7, #32]
10010bbc:	7f39      	ldrb	r1, [r7, #28]
10010bbe:	8afb      	ldrh	r3, [r7, #22]
10010bc0:	1c28      	adds	r0, r5, #0
10010bc2:	693a      	ldr	r2, [r7, #16]
10010bc4:	4e2d      	ldr	r6, [pc, #180]	; (10010c7c <internal_at_ble_service_define+0x3ac>)
10010bc6:	47b0      	blx	r6
10010bc8:	2800      	cmp	r0, #0
10010bca:	d15b      	bne.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010bcc:	883b      	ldrh	r3, [r7, #0]
10010bce:	07db      	lsls	r3, r3, #31
10010bd0:	d50d      	bpl.n	10010bee <internal_at_ble_service_define+0x31e>
10010bd2:	2200      	movs	r2, #0
10010bd4:	3501      	adds	r5, #1
10010bd6:	b2ad      	uxth	r5, r5
10010bd8:	a909      	add	r1, sp, #36	; 0x24
10010bda:	84bd      	strh	r5, [r7, #36]	; 0x24
10010bdc:	7fbb      	ldrb	r3, [r7, #30]
10010bde:	1c28      	adds	r0, r5, #0
10010be0:	700a      	strb	r2, [r1, #0]
10010be2:	704a      	strb	r2, [r1, #1]
10010be4:	4e23      	ldr	r6, [pc, #140]	; (10010c74 <internal_at_ble_service_define+0x3a4>)
10010be6:	3202      	adds	r2, #2
10010be8:	47b0      	blx	r6
10010bea:	2800      	cmp	r0, #0
10010bec:	d14a      	bne.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010bee:	2330      	movs	r3, #48	; 0x30
10010bf0:	883a      	ldrh	r2, [r7, #0]
10010bf2:	421a      	tst	r2, r3
10010bf4:	d00d      	beq.n	10010c12 <internal_at_ble_service_define+0x342>
10010bf6:	2200      	movs	r2, #0
10010bf8:	3501      	adds	r5, #1
10010bfa:	b2ad      	uxth	r5, r5
10010bfc:	a909      	add	r1, sp, #36	; 0x24
10010bfe:	847d      	strh	r5, [r7, #34]	; 0x22
10010c00:	7f7b      	ldrb	r3, [r7, #29]
10010c02:	1c28      	adds	r0, r5, #0
10010c04:	700a      	strb	r2, [r1, #0]
10010c06:	704a      	strb	r2, [r1, #1]
10010c08:	4e1a      	ldr	r6, [pc, #104]	; (10010c74 <internal_at_ble_service_define+0x3a4>)
10010c0a:	3202      	adds	r2, #2
10010c0c:	47b0      	blx	r6
10010c0e:	2800      	cmp	r0, #0
10010c10:	d138      	bne.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010c12:	69b9      	ldr	r1, [r7, #24]
10010c14:	2900      	cmp	r1, #0
10010c16:	d006      	beq.n	10010c26 <internal_at_ble_service_define+0x356>
10010c18:	3501      	adds	r5, #1
10010c1a:	b2ad      	uxth	r5, r5
10010c1c:	1c28      	adds	r0, r5, #0
10010c1e:	4b18      	ldr	r3, [pc, #96]	; (10010c80 <internal_at_ble_service_define+0x3b0>)
10010c20:	4798      	blx	r3
10010c22:	2800      	cmp	r0, #0
10010c24:	d12e      	bne.n	10010c84 <internal_at_ble_service_define+0x3b4>
10010c26:	373c      	adds	r7, #60	; 0x3c
10010c28:	9502      	str	r5, [sp, #8]
10010c2a:	e787      	b.n	10010b3c <internal_at_ble_service_define+0x26c>
10010c2c:	100198b0 	.word	0x100198b0
10010c30:	1001a7a0 	.word	0x1001a7a0
10010c34:	10014a05 	.word	0x10014a05
10010c38:	10010605 	.word	0x10010605
10010c3c:	100149f3 	.word	0x100149f3
10010c40:	10017c07 	.word	0x10017c07
10010c44:	10012a91 	.word	0x10012a91
10010c48:	10017c09 	.word	0x10017c09
10010c4c:	100106d1 	.word	0x100106d1
10010c50:	10017c05 	.word	0x10017c05
10010c54:	10010679 	.word	0x10010679
10010c58:	10017c01 	.word	0x10017c01
10010c5c:	10017c03 	.word	0x10017c03
10010c60:	00008002 	.word	0x00008002
10010c64:	10017bfd 	.word	0x10017bfd
10010c68:	10017bff 	.word	0x10017bff
10010c6c:	10012985 	.word	0x10012985
10010c70:	1001989c 	.word	0x1001989c
10010c74:	10010799 	.word	0x10010799
10010c78:	10012b01 	.word	0x10012b01
10010c7c:	10010851 	.word	0x10010851
10010c80:	1001076d 	.word	0x1001076d
10010c84:	1c04      	adds	r4, r0, #0
10010c86:	1c20      	adds	r0, r4, #0
10010c88:	b00b      	add	sp, #44	; 0x2c
10010c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010c8c <initi_gatt_server_module>:
10010c8c:	2300      	movs	r3, #0
10010c8e:	4a07      	ldr	r2, [pc, #28]	; (10010cac <initi_gatt_server_module+0x20>)
10010c90:	7013      	strb	r3, [r2, #0]
10010c92:	4a07      	ldr	r2, [pc, #28]	; (10010cb0 <initi_gatt_server_module+0x24>)
10010c94:	6013      	str	r3, [r2, #0]
10010c96:	4a07      	ldr	r2, [pc, #28]	; (10010cb4 <initi_gatt_server_module+0x28>)
10010c98:	6013      	str	r3, [r2, #0]
10010c9a:	4a07      	ldr	r2, [pc, #28]	; (10010cb8 <initi_gatt_server_module+0x2c>)
10010c9c:	6013      	str	r3, [r2, #0]
10010c9e:	4a07      	ldr	r2, [pc, #28]	; (10010cbc <initi_gatt_server_module+0x30>)
10010ca0:	6013      	str	r3, [r2, #0]
10010ca2:	4a07      	ldr	r2, [pc, #28]	; (10010cc0 <initi_gatt_server_module+0x34>)
10010ca4:	6013      	str	r3, [r2, #0]
10010ca6:	4a07      	ldr	r2, [pc, #28]	; (10010cc4 <initi_gatt_server_module+0x38>)
10010ca8:	6013      	str	r3, [r2, #0]
10010caa:	4770      	bx	lr
10010cac:	1001989c 	.word	0x1001989c
10010cb0:	100198ac 	.word	0x100198ac
10010cb4:	100198a8 	.word	0x100198a8
10010cb8:	10019898 	.word	0x10019898
10010cbc:	100198a4 	.word	0x100198a4
10010cc0:	100198a0 	.word	0x100198a0
10010cc4:	100198b0 	.word	0x100198b0

10010cc8 <db_init>:
10010cc8:	4b0a      	ldr	r3, [pc, #40]	; (10010cf4 <db_init+0x2c>)
10010cca:	4a0b      	ldr	r2, [pc, #44]	; (10010cf8 <db_init+0x30>)
10010ccc:	6018      	str	r0, [r3, #0]
10010cce:	084b      	lsrs	r3, r1, #1
10010cd0:	6013      	str	r3, [r2, #0]
10010cd2:	4a0a      	ldr	r2, [pc, #40]	; (10010cfc <db_init+0x34>)
10010cd4:	18c3      	adds	r3, r0, r3
10010cd6:	6013      	str	r3, [r2, #0]
10010cd8:	4a09      	ldr	r2, [pc, #36]	; (10010d00 <db_init+0x38>)
10010cda:	1841      	adds	r1, r0, r1
10010cdc:	6013      	str	r3, [r2, #0]
10010cde:	2303      	movs	r3, #3
10010ce0:	2200      	movs	r2, #0
10010ce2:	3103      	adds	r1, #3
10010ce4:	4399      	bics	r1, r3
10010ce6:	4b07      	ldr	r3, [pc, #28]	; (10010d04 <db_init+0x3c>)
10010ce8:	3904      	subs	r1, #4
10010cea:	6019      	str	r1, [r3, #0]
10010cec:	4b06      	ldr	r3, [pc, #24]	; (10010d08 <db_init+0x40>)
10010cee:	601a      	str	r2, [r3, #0]
10010cf0:	4770      	bx	lr
10010cf2:	46c0      	nop			; (mov r8, r8)
10010cf4:	100198b0 	.word	0x100198b0
10010cf8:	100198ac 	.word	0x100198ac
10010cfc:	10019898 	.word	0x10019898
10010d00:	100198a4 	.word	0x100198a4
10010d04:	100198a0 	.word	0x100198a0
10010d08:	100198a8 	.word	0x100198a8

10010d0c <at_ble_primary_service_define>:
10010d0c:	b530      	push	{r4, r5, lr}
10010d0e:	b085      	sub	sp, #20
10010d10:	ac08      	add	r4, sp, #32
10010d12:	cc20      	ldmia	r4!, {r5}
10010d14:	8824      	ldrh	r4, [r4, #0]
10010d16:	9500      	str	r5, [sp, #0]
10010d18:	9401      	str	r4, [sp, #4]
10010d1a:	2401      	movs	r4, #1
10010d1c:	9402      	str	r4, [sp, #8]
10010d1e:	4c02      	ldr	r4, [pc, #8]	; (10010d28 <at_ble_primary_service_define+0x1c>)
10010d20:	47a0      	blx	r4
10010d22:	b005      	add	sp, #20
10010d24:	bd30      	pop	{r4, r5, pc}
10010d26:	46c0      	nop			; (mov r8, r8)
10010d28:	100108d1 	.word	0x100108d1

10010d2c <at_ble_characteristic_value_set>:
10010d2c:	b570      	push	{r4, r5, r6, lr}
10010d2e:	4b0b      	ldr	r3, [pc, #44]	; (10010d5c <at_ble_characteristic_value_set+0x30>)
10010d30:	1c06      	adds	r6, r0, #0
10010d32:	1c0c      	adds	r4, r1, #0
10010d34:	1c15      	adds	r5, r2, #0
10010d36:	4798      	blx	r3
10010d38:	2800      	cmp	r0, #0
10010d3a:	d008      	beq.n	10010d4e <at_ble_characteristic_value_set+0x22>
10010d3c:	6880      	ldr	r0, [r0, #8]
10010d3e:	2800      	cmp	r0, #0
10010d40:	d005      	beq.n	10010d4e <at_ble_characteristic_value_set+0x22>
10010d42:	1c21      	adds	r1, r4, #0
10010d44:	1c2a      	adds	r2, r5, #0
10010d46:	4b06      	ldr	r3, [pc, #24]	; (10010d60 <at_ble_characteristic_value_set+0x34>)
10010d48:	4798      	blx	r3
10010d4a:	2000      	movs	r0, #0
10010d4c:	e004      	b.n	10010d58 <at_ble_characteristic_value_set+0x2c>
10010d4e:	1c30      	adds	r0, r6, #0
10010d50:	1c29      	adds	r1, r5, #0
10010d52:	1c22      	adds	r2, r4, #0
10010d54:	4b03      	ldr	r3, [pc, #12]	; (10010d64 <at_ble_characteristic_value_set+0x38>)
10010d56:	4798      	blx	r3
10010d58:	bd70      	pop	{r4, r5, r6, pc}
10010d5a:	46c0      	nop			; (mov r8, r8)
10010d5c:	10010639 	.word	0x10010639
10010d60:	100149f3 	.word	0x100149f3
10010d64:	10012b01 	.word	0x10012b01

10010d68 <at_ble_characteristic_value_get>:
10010d68:	b570      	push	{r4, r5, r6, lr}
10010d6a:	4b0c      	ldr	r3, [pc, #48]	; (10010d9c <at_ble_characteristic_value_get+0x34>)
10010d6c:	1c06      	adds	r6, r0, #0
10010d6e:	1c0c      	adds	r4, r1, #0
10010d70:	1c15      	adds	r5, r2, #0
10010d72:	4798      	blx	r3
10010d74:	2800      	cmp	r0, #0
10010d76:	d00b      	beq.n	10010d90 <at_ble_characteristic_value_get+0x28>
10010d78:	6883      	ldr	r3, [r0, #8]
10010d7a:	2b00      	cmp	r3, #0
10010d7c:	d008      	beq.n	10010d90 <at_ble_characteristic_value_get+0x28>
10010d7e:	8883      	ldrh	r3, [r0, #4]
10010d80:	802b      	strh	r3, [r5, #0]
10010d82:	8882      	ldrh	r2, [r0, #4]
10010d84:	6881      	ldr	r1, [r0, #8]
10010d86:	4b06      	ldr	r3, [pc, #24]	; (10010da0 <at_ble_characteristic_value_get+0x38>)
10010d88:	1c20      	adds	r0, r4, #0
10010d8a:	4798      	blx	r3
10010d8c:	2000      	movs	r0, #0
10010d8e:	e004      	b.n	10010d9a <at_ble_characteristic_value_get+0x32>
10010d90:	1c30      	adds	r0, r6, #0
10010d92:	1c29      	adds	r1, r5, #0
10010d94:	1c22      	adds	r2, r4, #0
10010d96:	4b03      	ldr	r3, [pc, #12]	; (10010da4 <at_ble_characteristic_value_get+0x3c>)
10010d98:	4798      	blx	r3
10010d9a:	bd70      	pop	{r4, r5, r6, pc}
10010d9c:	10010639 	.word	0x10010639
10010da0:	100149f3 	.word	0x100149f3
10010da4:	10012b8d 	.word	0x10012b8d

10010da8 <at_ble_write_authorize_reply>:
10010da8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010daa:	b085      	sub	sp, #20
10010dac:	1c04      	adds	r4, r0, #0
10010dae:	9101      	str	r1, [sp, #4]
10010db0:	2900      	cmp	r1, #0
10010db2:	d128      	bne.n	10010e06 <at_ble_write_authorize_reply+0x5e>
10010db4:	8843      	ldrh	r3, [r0, #2]
10010db6:	1c27      	adds	r7, r4, #0
10010db8:	9300      	str	r3, [sp, #0]
10010dba:	1c18      	adds	r0, r3, #0
10010dbc:	4b16      	ldr	r3, [pc, #88]	; (10010e18 <at_ble_write_authorize_reply+0x70>)
10010dbe:	4798      	blx	r3
10010dc0:	3708      	adds	r7, #8
10010dc2:	2800      	cmp	r0, #0
10010dc4:	d009      	beq.n	10010dda <at_ble_write_authorize_reply+0x32>
10010dc6:	6880      	ldr	r0, [r0, #8]
10010dc8:	2800      	cmp	r0, #0
10010dca:	d006      	beq.n	10010dda <at_ble_write_authorize_reply+0x32>
10010dcc:	88a3      	ldrh	r3, [r4, #4]
10010dce:	88e2      	ldrh	r2, [r4, #6]
10010dd0:	18c0      	adds	r0, r0, r3
10010dd2:	1c39      	adds	r1, r7, #0
10010dd4:	4b11      	ldr	r3, [pc, #68]	; (10010e1c <at_ble_write_authorize_reply+0x74>)
10010dd6:	4798      	blx	r3
10010dd8:	e015      	b.n	10010e06 <at_ble_write_authorize_reply+0x5e>
10010dda:	ab02      	add	r3, sp, #8
10010ddc:	1d9e      	adds	r6, r3, #6
10010dde:	2300      	movs	r3, #0
10010de0:	4d0f      	ldr	r5, [pc, #60]	; (10010e20 <at_ble_write_authorize_reply+0x78>)
10010de2:	8033      	strh	r3, [r6, #0]
10010de4:	6829      	ldr	r1, [r5, #0]
10010de6:	1c32      	adds	r2, r6, #0
10010de8:	4b0e      	ldr	r3, [pc, #56]	; (10010e24 <at_ble_write_authorize_reply+0x7c>)
10010dea:	9800      	ldr	r0, [sp, #0]
10010dec:	4798      	blx	r3
10010dee:	682b      	ldr	r3, [r5, #0]
10010df0:	88a0      	ldrh	r0, [r4, #4]
10010df2:	88e2      	ldrh	r2, [r4, #6]
10010df4:	1818      	adds	r0, r3, r0
10010df6:	1c39      	adds	r1, r7, #0
10010df8:	4b08      	ldr	r3, [pc, #32]	; (10010e1c <at_ble_write_authorize_reply+0x74>)
10010dfa:	4798      	blx	r3
10010dfc:	8860      	ldrh	r0, [r4, #2]
10010dfe:	8832      	ldrh	r2, [r6, #0]
10010e00:	6829      	ldr	r1, [r5, #0]
10010e02:	4b09      	ldr	r3, [pc, #36]	; (10010e28 <at_ble_write_authorize_reply+0x80>)
10010e04:	4798      	blx	r3
10010e06:	8860      	ldrh	r0, [r4, #2]
10010e08:	8821      	ldrh	r1, [r4, #0]
10010e0a:	9a01      	ldr	r2, [sp, #4]
10010e0c:	4b07      	ldr	r3, [pc, #28]	; (10010e2c <at_ble_write_authorize_reply+0x84>)
10010e0e:	4798      	blx	r3
10010e10:	2000      	movs	r0, #0
10010e12:	b005      	add	sp, #20
10010e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e16:	46c0      	nop			; (mov r8, r8)
10010e18:	10010639 	.word	0x10010639
10010e1c:	100149f3 	.word	0x100149f3
10010e20:	10017e0c 	.word	0x10017e0c
10010e24:	10010d69 	.word	0x10010d69
10010e28:	10010d2d 	.word	0x10010d2d
10010e2c:	10012605 	.word	0x10012605

10010e30 <gatts_handle_read_req>:
10010e30:	b538      	push	{r3, r4, r5, lr}
10010e32:	1c0c      	adds	r4, r1, #0
10010e34:	4b07      	ldr	r3, [pc, #28]	; (10010e54 <gatts_handle_read_req+0x24>)
10010e36:	4798      	blx	r3
10010e38:	8865      	ldrh	r5, [r4, #2]
10010e3a:	4b07      	ldr	r3, [pc, #28]	; (10010e58 <gatts_handle_read_req+0x28>)
10010e3c:	1c28      	adds	r0, r5, #0
10010e3e:	4798      	blx	r3
10010e40:	7883      	ldrb	r3, [r0, #2]
10010e42:	2026      	movs	r0, #38	; 0x26
10010e44:	07db      	lsls	r3, r3, #31
10010e46:	d404      	bmi.n	10010e52 <gatts_handle_read_req+0x22>
10010e48:	8820      	ldrh	r0, [r4, #0]
10010e4a:	1c29      	adds	r1, r5, #0
10010e4c:	4b03      	ldr	r3, [pc, #12]	; (10010e5c <gatts_handle_read_req+0x2c>)
10010e4e:	4798      	blx	r3
10010e50:	203b      	movs	r0, #59	; 0x3b
10010e52:	bd38      	pop	{r3, r4, r5, pc}
10010e54:	10012549 	.word	0x10012549
10010e58:	10010639 	.word	0x10010639
10010e5c:	100108a1 	.word	0x100108a1

10010e60 <gatts_handle_att_info_req>:
10010e60:	b538      	push	{r3, r4, r5, lr}
10010e62:	1c0d      	adds	r5, r1, #0
10010e64:	4b0a      	ldr	r3, [pc, #40]	; (10010e90 <gatts_handle_att_info_req+0x30>)
10010e66:	1c14      	adds	r4, r2, #0
10010e68:	4798      	blx	r3
10010e6a:	882d      	ldrh	r5, [r5, #0]
10010e6c:	4b09      	ldr	r3, [pc, #36]	; (10010e94 <gatts_handle_att_info_req+0x34>)
10010e6e:	1c28      	adds	r0, r5, #0
10010e70:	4798      	blx	r3
10010e72:	0a22      	lsrs	r2, r4, #8
10010e74:	1c03      	adds	r3, r0, #0
10010e76:	4c08      	ldr	r4, [pc, #32]	; (10010e98 <gatts_handle_att_info_req+0x38>)
10010e78:	b291      	uxth	r1, r2
10010e7a:	2800      	cmp	r0, #0
10010e7c:	d003      	beq.n	10010e86 <gatts_handle_att_info_req+0x26>
10010e7e:	8882      	ldrh	r2, [r0, #4]
10010e80:	2300      	movs	r3, #0
10010e82:	1c28      	adds	r0, r5, #0
10010e84:	e001      	b.n	10010e8a <gatts_handle_att_info_req+0x2a>
10010e86:	1c28      	adds	r0, r5, #0
10010e88:	2201      	movs	r2, #1
10010e8a:	47a0      	blx	r4
10010e8c:	203b      	movs	r0, #59	; 0x3b
10010e8e:	bd38      	pop	{r3, r4, r5, pc}
10010e90:	1001258d 	.word	0x1001258d
10010e94:	10010639 	.word	0x10010639
10010e98:	10012649 	.word	0x10012649

10010e9c <gatts_handle_write_req>:
10010e9c:	b510      	push	{r4, lr}
10010e9e:	1c14      	adds	r4, r2, #0
10010ea0:	4b07      	ldr	r3, [pc, #28]	; (10010ec0 <gatts_handle_write_req+0x24>)
10010ea2:	4798      	blx	r3
10010ea4:	4b07      	ldr	r3, [pc, #28]	; (10010ec4 <gatts_handle_write_req+0x28>)
10010ea6:	8860      	ldrh	r0, [r4, #2]
10010ea8:	4798      	blx	r3
10010eaa:	2302      	movs	r3, #2
10010eac:	7881      	ldrb	r1, [r0, #2]
10010eae:	2022      	movs	r0, #34	; 0x22
10010eb0:	4019      	ands	r1, r3
10010eb2:	d103      	bne.n	10010ebc <gatts_handle_write_req+0x20>
10010eb4:	1c20      	adds	r0, r4, #0
10010eb6:	4b04      	ldr	r3, [pc, #16]	; (10010ec8 <gatts_handle_write_req+0x2c>)
10010eb8:	4798      	blx	r3
10010eba:	201f      	movs	r0, #31
10010ebc:	bd10      	pop	{r4, pc}
10010ebe:	46c0      	nop			; (mov r8, r8)
10010ec0:	10012555 	.word	0x10012555
10010ec4:	10010639 	.word	0x10010639
10010ec8:	10010da9 	.word	0x10010da9

10010ecc <at_ble_notification_send>:
10010ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ece:	4d17      	ldr	r5, [pc, #92]	; (10010f2c <at_ble_notification_send+0x60>)
10010ed0:	4c17      	ldr	r4, [pc, #92]	; (10010f30 <at_ble_notification_send+0x64>)
10010ed2:	682a      	ldr	r2, [r5, #0]
10010ed4:	44a5      	add	sp, r4
10010ed6:	23d2      	movs	r3, #210	; 0xd2
10010ed8:	2a04      	cmp	r2, #4
10010eda:	d822      	bhi.n	10010f22 <at_ble_notification_send+0x56>
10010edc:	1c06      	adds	r6, r0, #0
10010ede:	4b15      	ldr	r3, [pc, #84]	; (10010f34 <at_ble_notification_send+0x68>)
10010ee0:	1c08      	adds	r0, r1, #0
10010ee2:	1c0c      	adds	r4, r1, #0
10010ee4:	4798      	blx	r3
10010ee6:	2800      	cmp	r0, #0
10010ee8:	d008      	beq.n	10010efc <at_ble_notification_send+0x30>
10010eea:	6883      	ldr	r3, [r0, #8]
10010eec:	2b00      	cmp	r3, #0
10010eee:	d005      	beq.n	10010efc <at_ble_notification_send+0x30>
10010ef0:	8882      	ldrh	r2, [r0, #4]
10010ef2:	1c21      	adds	r1, r4, #0
10010ef4:	9200      	str	r2, [sp, #0]
10010ef6:	2012      	movs	r0, #18
10010ef8:	1c32      	adds	r2, r6, #0
10010efa:	e00c      	b.n	10010f16 <at_ble_notification_send+0x4a>
10010efc:	270e      	movs	r7, #14
10010efe:	446f      	add	r7, sp
10010f00:	1c39      	adds	r1, r7, #0
10010f02:	aa04      	add	r2, sp, #16
10010f04:	4b0c      	ldr	r3, [pc, #48]	; (10010f38 <at_ble_notification_send+0x6c>)
10010f06:	1c20      	adds	r0, r4, #0
10010f08:	4798      	blx	r3
10010f0a:	2012      	movs	r0, #18
10010f0c:	1c21      	adds	r1, r4, #0
10010f0e:	1c32      	adds	r2, r6, #0
10010f10:	883b      	ldrh	r3, [r7, #0]
10010f12:	9300      	str	r3, [sp, #0]
10010f14:	ab04      	add	r3, sp, #16
10010f16:	4c09      	ldr	r4, [pc, #36]	; (10010f3c <at_ble_notification_send+0x70>)
10010f18:	47a0      	blx	r4
10010f1a:	682b      	ldr	r3, [r5, #0]
10010f1c:	3301      	adds	r3, #1
10010f1e:	602b      	str	r3, [r5, #0]
10010f20:	2300      	movs	r3, #0
10010f22:	1c18      	adds	r0, r3, #0
10010f24:	2385      	movs	r3, #133	; 0x85
10010f26:	009b      	lsls	r3, r3, #2
10010f28:	449d      	add	sp, r3
10010f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f2c:	1001993c 	.word	0x1001993c
10010f30:	fffffdec 	.word	0xfffffdec
10010f34:	10010639 	.word	0x10010639
10010f38:	10012b8d 	.word	0x10012b8d
10010f3c:	10012691 	.word	0x10012691

10010f40 <init_l2cc_task_module>:
10010f40:	220a      	movs	r2, #10
10010f42:	4b01      	ldr	r3, [pc, #4]	; (10010f48 <init_l2cc_task_module+0x8>)
10010f44:	701a      	strb	r2, [r3, #0]
10010f46:	4770      	bx	lr
10010f48:	10017e08 	.word	0x10017e08

10010f4c <l2cc_data_send_rsp_handler>:
10010f4c:	b510      	push	{r4, lr}
10010f4e:	7802      	ldrb	r2, [r0, #0]
10010f50:	700a      	strb	r2, [r1, #0]
10010f52:	7883      	ldrb	r3, [r0, #2]
10010f54:	7844      	ldrb	r4, [r0, #1]
10010f56:	021b      	lsls	r3, r3, #8
10010f58:	4323      	orrs	r3, r4
10010f5a:	804b      	strh	r3, [r1, #2]
10010f5c:	7903      	ldrb	r3, [r0, #4]
10010f5e:	78c0      	ldrb	r0, [r0, #3]
10010f60:	021b      	lsls	r3, r3, #8
10010f62:	4303      	orrs	r3, r0
10010f64:	808b      	strh	r3, [r1, #4]
10010f66:	2a00      	cmp	r2, #0
10010f68:	d103      	bne.n	10010f72 <l2cc_data_send_rsp_handler+0x26>
10010f6a:	4a02      	ldr	r2, [pc, #8]	; (10010f74 <l2cc_data_send_rsp_handler+0x28>)
10010f6c:	7813      	ldrb	r3, [r2, #0]
10010f6e:	3301      	adds	r3, #1
10010f70:	7013      	strb	r3, [r2, #0]
10010f72:	bd10      	pop	{r4, pc}
10010f74:	10017e08 	.word	0x10017e08

10010f78 <l2cc_data_received_handler>:
10010f78:	b508      	push	{r3, lr}
10010f7a:	1c03      	adds	r3, r0, #0
10010f7c:	7842      	ldrb	r2, [r0, #1]
10010f7e:	7800      	ldrb	r0, [r0, #0]
10010f80:	0212      	lsls	r2, r2, #8
10010f82:	4302      	orrs	r2, r0
10010f84:	800a      	strh	r2, [r1, #0]
10010f86:	78da      	ldrb	r2, [r3, #3]
10010f88:	7898      	ldrb	r0, [r3, #2]
10010f8a:	0212      	lsls	r2, r2, #8
10010f8c:	4302      	orrs	r2, r0
10010f8e:	804a      	strh	r2, [r1, #2]
10010f90:	795a      	ldrb	r2, [r3, #5]
10010f92:	7918      	ldrb	r0, [r3, #4]
10010f94:	0212      	lsls	r2, r2, #8
10010f96:	4302      	orrs	r2, r0
10010f98:	808a      	strh	r2, [r1, #4]
10010f9a:	1d88      	adds	r0, r1, #6
10010f9c:	1d99      	adds	r1, r3, #6
10010f9e:	4b01      	ldr	r3, [pc, #4]	; (10010fa4 <l2cc_data_received_handler+0x2c>)
10010fa0:	4798      	blx	r3
10010fa2:	bd08      	pop	{r3, pc}
10010fa4:	100149f3 	.word	0x100149f3

10010fa8 <at_ble_authenticate>:
10010fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010faa:	1c0c      	adds	r4, r1, #0
10010fac:	211f      	movs	r1, #31
10010fae:	b08b      	sub	sp, #44	; 0x2c
10010fb0:	9307      	str	r3, [sp, #28]
10010fb2:	ab02      	add	r3, sp, #8
10010fb4:	18c9      	adds	r1, r1, r3
10010fb6:	230f      	movs	r3, #15
10010fb8:	700b      	strb	r3, [r1, #0]
10010fba:	4b40      	ldr	r3, [pc, #256]	; (100110bc <at_ble_authenticate+0x114>)
10010fbc:	1c05      	adds	r5, r0, #0
10010fbe:	1c16      	adds	r6, r2, #0
10010fc0:	4798      	blx	r3
10010fc2:	1c07      	adds	r7, r0, #0
10010fc4:	2001      	movs	r0, #1
10010fc6:	2f07      	cmp	r7, #7
10010fc8:	d875      	bhi.n	100110b6 <at_ble_authenticate+0x10e>
10010fca:	2c00      	cmp	r4, #0
10010fcc:	d113      	bne.n	10010ff6 <at_ble_authenticate+0x4e>
10010fce:	2312      	movs	r3, #18
10010fd0:	435f      	muls	r7, r3
10010fd2:	4b3b      	ldr	r3, [pc, #236]	; (100110c0 <at_ble_authenticate+0x118>)
10010fd4:	5cfb      	ldrb	r3, [r7, r3]
10010fd6:	4283      	cmp	r3, r0
10010fd8:	d001      	beq.n	10010fde <at_ble_authenticate+0x36>
10010fda:	20cf      	movs	r0, #207	; 0xcf
10010fdc:	e06b      	b.n	100110b6 <at_ble_authenticate+0x10e>
10010fde:	9504      	str	r5, [sp, #16]
10010fe0:	9400      	str	r4, [sp, #0]
10010fe2:	9401      	str	r4, [sp, #4]
10010fe4:	9402      	str	r4, [sp, #8]
10010fe6:	9403      	str	r4, [sp, #12]
10010fe8:	1c20      	adds	r0, r4, #0
10010fea:	1c21      	adds	r1, r4, #0
10010fec:	1c22      	adds	r2, r4, #0
10010fee:	1c23      	adds	r3, r4, #0
10010ff0:	4d34      	ldr	r5, [pc, #208]	; (100110c4 <at_ble_authenticate+0x11c>)
10010ff2:	47a8      	blx	r5
10010ff4:	e05e      	b.n	100110b4 <at_ble_authenticate+0x10c>
10010ff6:	7922      	ldrb	r2, [r4, #4]
10010ff8:	2a06      	cmp	r2, #6
10010ffa:	d9ee      	bls.n	10010fda <at_ble_authenticate+0x32>
10010ffc:	7963      	ldrb	r3, [r4, #5]
10010ffe:	2b10      	cmp	r3, #16
10011000:	d8eb      	bhi.n	10010fda <at_ble_authenticate+0x32>
10011002:	429a      	cmp	r2, r3
10011004:	d8e9      	bhi.n	10010fda <at_ble_authenticate+0x32>
10011006:	7a23      	ldrb	r3, [r4, #8]
10011008:	2b04      	cmp	r3, #4
1001100a:	d8e6      	bhi.n	10010fda <at_ble_authenticate+0x32>
1001100c:	79a3      	ldrb	r3, [r4, #6]
1001100e:	2b07      	cmp	r3, #7
10011010:	d8e3      	bhi.n	10010fda <at_ble_authenticate+0x32>
10011012:	79e3      	ldrb	r3, [r4, #7]
10011014:	2b07      	cmp	r3, #7
10011016:	d8e0      	bhi.n	10010fda <at_ble_authenticate+0x32>
10011018:	78a3      	ldrb	r3, [r4, #2]
1001101a:	2b00      	cmp	r3, #0
1001101c:	d006      	beq.n	1001102c <at_ble_authenticate+0x84>
1001101e:	2e00      	cmp	r6, #0
10011020:	d0db      	beq.n	10010fda <at_ble_authenticate+0x32>
10011022:	4829      	ldr	r0, [pc, #164]	; (100110c8 <at_ble_authenticate+0x120>)
10011024:	1c31      	adds	r1, r6, #0
10011026:	221c      	movs	r2, #28
10011028:	4b28      	ldr	r3, [pc, #160]	; (100110cc <at_ble_authenticate+0x124>)
1001102a:	4798      	blx	r3
1001102c:	9b07      	ldr	r3, [sp, #28]
1001102e:	2b00      	cmp	r3, #0
10011030:	d005      	beq.n	1001103e <at_ble_authenticate+0x96>
10011032:	4827      	ldr	r0, [pc, #156]	; (100110d0 <at_ble_authenticate+0x128>)
10011034:	1c19      	adds	r1, r3, #0
10011036:	309a      	adds	r0, #154	; 0x9a
10011038:	2210      	movs	r2, #16
1001103a:	4b24      	ldr	r3, [pc, #144]	; (100110cc <at_ble_authenticate+0x124>)
1001103c:	4798      	blx	r3
1001103e:	7863      	ldrb	r3, [r4, #1]
10011040:	78a2      	ldrb	r2, [r4, #2]
10011042:	009b      	lsls	r3, r3, #2
10011044:	4313      	orrs	r3, r2
10011046:	2212      	movs	r2, #18
10011048:	4357      	muls	r7, r2
1001104a:	4a1d      	ldr	r2, [pc, #116]	; (100110c0 <at_ble_authenticate+0x118>)
1001104c:	b2db      	uxtb	r3, r3
1001104e:	5cba      	ldrb	r2, [r7, r2]
10011050:	2a00      	cmp	r2, #0
10011052:	d116      	bne.n	10011082 <at_ble_authenticate+0xda>
10011054:	79a0      	ldrb	r0, [r4, #6]
10011056:	0742      	lsls	r2, r0, #29
10011058:	d502      	bpl.n	10011060 <at_ble_authenticate+0xb8>
1001105a:	9a07      	ldr	r2, [sp, #28]
1001105c:	2a00      	cmp	r2, #0
1001105e:	d0bc      	beq.n	10010fda <at_ble_authenticate+0x32>
10011060:	07c2      	lsls	r2, r0, #31
10011062:	d501      	bpl.n	10011068 <at_ble_authenticate+0xc0>
10011064:	2e00      	cmp	r6, #0
10011066:	d0b8      	beq.n	10010fda <at_ble_authenticate+0x32>
10011068:	7966      	ldrb	r6, [r4, #5]
1001106a:	7821      	ldrb	r1, [r4, #0]
1001106c:	78e2      	ldrb	r2, [r4, #3]
1001106e:	9600      	str	r6, [sp, #0]
10011070:	9001      	str	r0, [sp, #4]
10011072:	79e0      	ldrb	r0, [r4, #7]
10011074:	9002      	str	r0, [sp, #8]
10011076:	7a20      	ldrb	r0, [r4, #8]
10011078:	4c16      	ldr	r4, [pc, #88]	; (100110d4 <at_ble_authenticate+0x12c>)
1001107a:	9003      	str	r0, [sp, #12]
1001107c:	1c28      	adds	r0, r5, #0
1001107e:	47a0      	blx	r4
10011080:	e018      	b.n	100110b4 <at_ble_authenticate+0x10c>
10011082:	2a01      	cmp	r2, #1
10011084:	d1a9      	bne.n	10010fda <at_ble_authenticate+0x32>
10011086:	79e0      	ldrb	r0, [r4, #7]
10011088:	0742      	lsls	r2, r0, #29
1001108a:	d502      	bpl.n	10011092 <at_ble_authenticate+0xea>
1001108c:	9a07      	ldr	r2, [sp, #28]
1001108e:	2a00      	cmp	r2, #0
10011090:	d0a3      	beq.n	10010fda <at_ble_authenticate+0x32>
10011092:	07c2      	lsls	r2, r0, #31
10011094:	d501      	bpl.n	1001109a <at_ble_authenticate+0xf2>
10011096:	2e00      	cmp	r6, #0
10011098:	d09f      	beq.n	10010fda <at_ble_authenticate+0x32>
1001109a:	7966      	ldrb	r6, [r4, #5]
1001109c:	7821      	ldrb	r1, [r4, #0]
1001109e:	78e2      	ldrb	r2, [r4, #3]
100110a0:	9600      	str	r6, [sp, #0]
100110a2:	79a6      	ldrb	r6, [r4, #6]
100110a4:	9002      	str	r0, [sp, #8]
100110a6:	9601      	str	r6, [sp, #4]
100110a8:	7a20      	ldrb	r0, [r4, #8]
100110aa:	9504      	str	r5, [sp, #16]
100110ac:	9003      	str	r0, [sp, #12]
100110ae:	4c05      	ldr	r4, [pc, #20]	; (100110c4 <at_ble_authenticate+0x11c>)
100110b0:	2001      	movs	r0, #1
100110b2:	47a0      	blx	r4
100110b4:	2000      	movs	r0, #0
100110b6:	b00b      	add	sp, #44	; 0x2c
100110b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110ba:	46c0      	nop			; (mov r8, r8)
100110bc:	100114a9 	.word	0x100114a9
100110c0:	1001a7a2 	.word	0x1001a7a2
100110c4:	10011a19 	.word	0x10011a19
100110c8:	1001a8b0 	.word	0x1001a8b0
100110cc:	100149f3 	.word	0x100149f3
100110d0:	1001a832 	.word	0x1001a832
100110d4:	100117f9 	.word	0x100117f9

100110d8 <at_ble_pair_key_reply>:
100110d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100110da:	b085      	sub	sp, #20
100110dc:	1c05      	adds	r5, r0, #0
100110de:	1c0c      	adds	r4, r1, #0
100110e0:	1c16      	adds	r6, r2, #0
100110e2:	2100      	movs	r1, #0
100110e4:	4668      	mov	r0, sp
100110e6:	2210      	movs	r2, #16
100110e8:	4b18      	ldr	r3, [pc, #96]	; (1001114c <at_ble_pair_key_reply+0x74>)
100110ea:	4798      	blx	r3
100110ec:	2101      	movs	r1, #1
100110ee:	2e00      	cmp	r6, #0
100110f0:	d101      	bne.n	100110f6 <at_ble_pair_key_reply+0x1e>
100110f2:	1c31      	adds	r1, r6, #0
100110f4:	466e      	mov	r6, sp
100110f6:	2c00      	cmp	r4, #0
100110f8:	d116      	bne.n	10011128 <at_ble_pair_key_reply+0x50>
100110fa:	2701      	movs	r7, #1
100110fc:	1c23      	adds	r3, r4, #0
100110fe:	1d70      	adds	r0, r6, #5
10011100:	3e01      	subs	r6, #1
10011102:	7802      	ldrb	r2, [r0, #0]
10011104:	3801      	subs	r0, #1
10011106:	3a30      	subs	r2, #48	; 0x30
10011108:	437a      	muls	r2, r7
1001110a:	189b      	adds	r3, r3, r2
1001110c:	220a      	movs	r2, #10
1001110e:	4357      	muls	r7, r2
10011110:	42b0      	cmp	r0, r6
10011112:	d1f6      	bne.n	10011102 <at_ble_pair_key_reply+0x2a>
10011114:	466a      	mov	r2, sp
10011116:	4668      	mov	r0, sp
10011118:	7013      	strb	r3, [r2, #0]
1001111a:	0a1a      	lsrs	r2, r3, #8
1001111c:	7042      	strb	r2, [r0, #1]
1001111e:	0c1a      	lsrs	r2, r3, #16
10011120:	0e1b      	lsrs	r3, r3, #24
10011122:	7082      	strb	r2, [r0, #2]
10011124:	70c3      	strb	r3, [r0, #3]
10011126:	e009      	b.n	1001113c <at_ble_pair_key_reply+0x64>
10011128:	20cf      	movs	r0, #207	; 0xcf
1001112a:	2c01      	cmp	r4, #1
1001112c:	d10c      	bne.n	10011148 <at_ble_pair_key_reply+0x70>
1001112e:	2300      	movs	r3, #0
10011130:	4668      	mov	r0, sp
10011132:	5cf2      	ldrb	r2, [r6, r3]
10011134:	54c2      	strb	r2, [r0, r3]
10011136:	3301      	adds	r3, #1
10011138:	2b10      	cmp	r3, #16
1001113a:	d1f9      	bne.n	10011130 <at_ble_pair_key_reply+0x58>
1001113c:	2004      	movs	r0, #4
1001113e:	466a      	mov	r2, sp
10011140:	1c2b      	adds	r3, r5, #0
10011142:	4c03      	ldr	r4, [pc, #12]	; (10011150 <at_ble_pair_key_reply+0x78>)
10011144:	47a0      	blx	r4
10011146:	2000      	movs	r0, #0
10011148:	b005      	add	sp, #20
1001114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001114c:	10014a05 	.word	0x10014a05
10011150:	10011a95 	.word	0x10011a95

10011154 <at_ble_send_slave_sec_request>:
10011154:	b570      	push	{r4, r5, r6, lr}
10011156:	4b0c      	ldr	r3, [pc, #48]	; (10011188 <at_ble_send_slave_sec_request+0x34>)
10011158:	1c0e      	adds	r6, r1, #0
1001115a:	2100      	movs	r1, #0
1001115c:	1c05      	adds	r5, r0, #0
1001115e:	1c14      	adds	r4, r2, #0
10011160:	4798      	blx	r3
10011162:	2301      	movs	r3, #1
10011164:	2807      	cmp	r0, #7
10011166:	d80d      	bhi.n	10011184 <at_ble_send_slave_sec_request+0x30>
10011168:	3311      	adds	r3, #17
1001116a:	4358      	muls	r0, r3
1001116c:	4b07      	ldr	r3, [pc, #28]	; (1001118c <at_ble_send_slave_sec_request+0x38>)
1001116e:	5cc2      	ldrb	r2, [r0, r3]
10011170:	23e0      	movs	r3, #224	; 0xe0
10011172:	2a01      	cmp	r2, #1
10011174:	d106      	bne.n	10011184 <at_ble_send_slave_sec_request+0x30>
10011176:	00b1      	lsls	r1, r6, #2
10011178:	430c      	orrs	r4, r1
1001117a:	4b05      	ldr	r3, [pc, #20]	; (10011190 <at_ble_send_slave_sec_request+0x3c>)
1001117c:	b2e1      	uxtb	r1, r4
1001117e:	1c28      	adds	r0, r5, #0
10011180:	4798      	blx	r3
10011182:	2300      	movs	r3, #0
10011184:	1c18      	adds	r0, r3, #0
10011186:	bd70      	pop	{r4, r5, r6, pc}
10011188:	100114a9 	.word	0x100114a9
1001118c:	1001a7a2 	.word	0x1001a7a2
10011190:	10011ae5 	.word	0x10011ae5

10011194 <at_ble_encryption_start>:
10011194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011196:	23cf      	movs	r3, #207	; 0xcf
10011198:	2900      	cmp	r1, #0
1001119a:	d02b      	beq.n	100111f4 <at_ble_encryption_start+0x60>
1001119c:	2a05      	cmp	r2, #5
1001119e:	d829      	bhi.n	100111f4 <at_ble_encryption_start+0x60>
100111a0:	2701      	movs	r7, #1
100111a2:	1c3d      	adds	r5, r7, #0
100111a4:	2433      	movs	r4, #51	; 0x33
100111a6:	4095      	lsls	r5, r2
100111a8:	4225      	tst	r5, r4
100111aa:	d023      	beq.n	100111f4 <at_ble_encryption_start+0x60>
100111ac:	7e8c      	ldrb	r4, [r1, #26]
100111ae:	3c07      	subs	r4, #7
100111b0:	2c09      	cmp	r4, #9
100111b2:	d81f      	bhi.n	100111f4 <at_ble_encryption_start+0x60>
100111b4:	4b10      	ldr	r3, [pc, #64]	; (100111f8 <at_ble_encryption_start+0x64>)
100111b6:	1c0c      	adds	r4, r1, #0
100111b8:	2100      	movs	r1, #0
100111ba:	1c15      	adds	r5, r2, #0
100111bc:	1c06      	adds	r6, r0, #0
100111be:	4798      	blx	r3
100111c0:	1c3b      	adds	r3, r7, #0
100111c2:	2807      	cmp	r0, #7
100111c4:	d816      	bhi.n	100111f4 <at_ble_encryption_start+0x60>
100111c6:	2312      	movs	r3, #18
100111c8:	4358      	muls	r0, r3
100111ca:	4b0c      	ldr	r3, [pc, #48]	; (100111fc <at_ble_encryption_start+0x68>)
100111cc:	5cc7      	ldrb	r7, [r0, r3]
100111ce:	23e0      	movs	r3, #224	; 0xe0
100111d0:	2f00      	cmp	r7, #0
100111d2:	d10f      	bne.n	100111f4 <at_ble_encryption_start+0x60>
100111d4:	1c21      	adds	r1, r4, #0
100111d6:	221c      	movs	r2, #28
100111d8:	4b09      	ldr	r3, [pc, #36]	; (10011200 <at_ble_encryption_start+0x6c>)
100111da:	480a      	ldr	r0, [pc, #40]	; (10011204 <at_ble_encryption_start+0x70>)
100111dc:	4798      	blx	r3
100111de:	1c23      	adds	r3, r4, #0
100111e0:	7ea1      	ldrb	r1, [r4, #26]
100111e2:	8a22      	ldrh	r2, [r4, #16]
100111e4:	3312      	adds	r3, #18
100111e6:	9100      	str	r1, [sp, #0]
100111e8:	9501      	str	r5, [sp, #4]
100111ea:	1c21      	adds	r1, r4, #0
100111ec:	1c30      	adds	r0, r6, #0
100111ee:	4c06      	ldr	r4, [pc, #24]	; (10011208 <at_ble_encryption_start+0x74>)
100111f0:	47a0      	blx	r4
100111f2:	1c3b      	adds	r3, r7, #0
100111f4:	1c18      	adds	r0, r3, #0
100111f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100111f8:	100114a9 	.word	0x100114a9
100111fc:	1001a7a2 	.word	0x1001a7a2
10011200:	100149f3 	.word	0x100149f3
10011204:	1001a8b0 	.word	0x1001a8b0
10011208:	10011b25 	.word	0x10011b25

1001120c <at_ble_encryption_request_reply>:
1001120c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001120e:	24cf      	movs	r4, #207	; 0xcf
10011210:	2b00      	cmp	r3, #0
10011212:	d011      	beq.n	10011238 <at_ble_encryption_request_reply+0x2c>
10011214:	2a00      	cmp	r2, #0
10011216:	d00a      	beq.n	1001122e <at_ble_encryption_request_reply+0x22>
10011218:	2905      	cmp	r1, #5
1001121a:	d80d      	bhi.n	10011238 <at_ble_encryption_request_reply+0x2c>
1001121c:	2501      	movs	r5, #1
1001121e:	2633      	movs	r6, #51	; 0x33
10011220:	408d      	lsls	r5, r1
10011222:	4235      	tst	r5, r6
10011224:	d008      	beq.n	10011238 <at_ble_encryption_request_reply+0x2c>
10011226:	7e9d      	ldrb	r5, [r3, #26]
10011228:	3d07      	subs	r5, #7
1001122a:	2d09      	cmp	r5, #9
1001122c:	d804      	bhi.n	10011238 <at_ble_encryption_request_reply+0x2c>
1001122e:	7e9c      	ldrb	r4, [r3, #26]
10011230:	9400      	str	r4, [sp, #0]
10011232:	4c02      	ldr	r4, [pc, #8]	; (1001123c <at_ble_encryption_request_reply+0x30>)
10011234:	47a0      	blx	r4
10011236:	2400      	movs	r4, #0
10011238:	1c20      	adds	r0, r4, #0
1001123a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001123c:	10011be1 	.word	0x10011be1

10011240 <rx_callback>:
10011240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011242:	8883      	ldrh	r3, [r0, #4]
10011244:	1c01      	adds	r1, r0, #0
10011246:	9301      	str	r3, [sp, #4]
10011248:	88c5      	ldrh	r5, [r0, #6]
1001124a:	8806      	ldrh	r6, [r0, #0]
1001124c:	2d00      	cmp	r5, #0
1001124e:	d10f      	bne.n	10011270 <rx_callback+0x30>
10011250:	1c19      	adds	r1, r3, #0
10011252:	1c30      	adds	r0, r6, #0
10011254:	4b19      	ldr	r3, [pc, #100]	; (100112bc <rx_callback+0x7c>)
10011256:	1c2a      	adds	r2, r5, #0
10011258:	4798      	blx	r3
1001125a:	1e03      	subs	r3, r0, #0
1001125c:	d105      	bne.n	1001126a <rx_callback+0x2a>
1001125e:	1c30      	adds	r0, r6, #0
10011260:	9901      	ldr	r1, [sp, #4]
10011262:	1c1a      	adds	r2, r3, #0
10011264:	4c16      	ldr	r4, [pc, #88]	; (100112c0 <rx_callback+0x80>)
10011266:	47a0      	blx	r4
10011268:	e027      	b.n	100112ba <rx_callback+0x7a>
1001126a:	4b16      	ldr	r3, [pc, #88]	; (100112c4 <rx_callback+0x84>)
1001126c:	4798      	blx	r3
1001126e:	e024      	b.n	100112ba <rx_callback+0x7a>
10011270:	4c15      	ldr	r4, [pc, #84]	; (100112c8 <rx_callback+0x88>)
10011272:	4a16      	ldr	r2, [pc, #88]	; (100112cc <rx_callback+0x8c>)
10011274:	6823      	ldr	r3, [r4, #0]
10011276:	6812      	ldr	r2, [r2, #0]
10011278:	18eb      	adds	r3, r5, r3
1001127a:	4293      	cmp	r3, r2
1001127c:	d901      	bls.n	10011282 <rx_callback+0x42>
1001127e:	2300      	movs	r3, #0
10011280:	6023      	str	r3, [r4, #0]
10011282:	4f13      	ldr	r7, [pc, #76]	; (100112d0 <rx_callback+0x90>)
10011284:	6822      	ldr	r2, [r4, #0]
10011286:	683b      	ldr	r3, [r7, #0]
10011288:	3108      	adds	r1, #8
1001128a:	1898      	adds	r0, r3, r2
1001128c:	1c2a      	adds	r2, r5, #0
1001128e:	4b11      	ldr	r3, [pc, #68]	; (100112d4 <rx_callback+0x94>)
10011290:	4798      	blx	r3
10011292:	683b      	ldr	r3, [r7, #0]
10011294:	6822      	ldr	r2, [r4, #0]
10011296:	1c30      	adds	r0, r6, #0
10011298:	189a      	adds	r2, r3, r2
1001129a:	9901      	ldr	r1, [sp, #4]
1001129c:	4b07      	ldr	r3, [pc, #28]	; (100112bc <rx_callback+0x7c>)
1001129e:	4798      	blx	r3
100112a0:	2800      	cmp	r0, #0
100112a2:	d1e2      	bne.n	1001126a <rx_callback+0x2a>
100112a4:	6823      	ldr	r3, [r4, #0]
100112a6:	683a      	ldr	r2, [r7, #0]
100112a8:	1c30      	adds	r0, r6, #0
100112aa:	18d2      	adds	r2, r2, r3
100112ac:	9901      	ldr	r1, [sp, #4]
100112ae:	1c2b      	adds	r3, r5, #0
100112b0:	4e03      	ldr	r6, [pc, #12]	; (100112c0 <rx_callback+0x80>)
100112b2:	47b0      	blx	r6
100112b4:	6823      	ldr	r3, [r4, #0]
100112b6:	18ed      	adds	r5, r5, r3
100112b8:	6025      	str	r5, [r4, #0]
100112ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100112bc:	1000f8d5 	.word	0x1000f8d5
100112c0:	1000f84d 	.word	0x1000f84d
100112c4:	1000f255 	.word	0x1000f255
100112c8:	1001a90c 	.word	0x1001a90c
100112cc:	100198b8 	.word	0x100198b8
100112d0:	100198b4 	.word	0x100198b4
100112d4:	100149f3 	.word	0x100149f3

100112d8 <interface_send>:
100112d8:	b508      	push	{r3, lr}
100112da:	4b02      	ldr	r3, [pc, #8]	; (100112e4 <interface_send+0xc>)
100112dc:	4798      	blx	r3
100112de:	2000      	movs	r0, #0
100112e0:	bd08      	pop	{r3, pc}
100112e2:	46c0      	nop			; (mov r8, r8)
100112e4:	1000ef4d 	.word	0x1000ef4d

100112e8 <interface_init>:
100112e8:	2280      	movs	r2, #128	; 0x80
100112ea:	b510      	push	{r4, lr}
100112ec:	2100      	movs	r1, #0
100112ee:	1c04      	adds	r4, r0, #0
100112f0:	0092      	lsls	r2, r2, #2
100112f2:	4b08      	ldr	r3, [pc, #32]	; (10011314 <interface_init+0x2c>)
100112f4:	4808      	ldr	r0, [pc, #32]	; (10011318 <interface_init+0x30>)
100112f6:	4798      	blx	r3
100112f8:	2200      	movs	r2, #0
100112fa:	4b08      	ldr	r3, [pc, #32]	; (1001131c <interface_init+0x34>)
100112fc:	601a      	str	r2, [r3, #0]
100112fe:	4a08      	ldr	r2, [pc, #32]	; (10011320 <interface_init+0x38>)
10011300:	4b08      	ldr	r3, [pc, #32]	; (10011324 <interface_init+0x3c>)
10011302:	601a      	str	r2, [r3, #0]
10011304:	4b08      	ldr	r3, [pc, #32]	; (10011328 <interface_init+0x40>)
10011306:	6922      	ldr	r2, [r4, #16]
10011308:	601a      	str	r2, [r3, #0]
1001130a:	6962      	ldr	r2, [r4, #20]
1001130c:	4b07      	ldr	r3, [pc, #28]	; (1001132c <interface_init+0x44>)
1001130e:	601a      	str	r2, [r3, #0]
10011310:	bd10      	pop	{r4, pc}
10011312:	46c0      	nop			; (mov r8, r8)
10011314:	10014a05 	.word	0x10014a05
10011318:	1001ab10 	.word	0x1001ab10
1001131c:	1001a90c 	.word	0x1001a90c
10011320:	1001a910 	.word	0x1001a910
10011324:	10017e0c 	.word	0x10017e0c
10011328:	100198b4 	.word	0x100198b4
1001132c:	100198b8 	.word	0x100198b8

10011330 <platform_cmd_cmpl_signal>:
10011330:	2201      	movs	r2, #1
10011332:	4b01      	ldr	r3, [pc, #4]	; (10011338 <platform_cmd_cmpl_signal+0x8>)
10011334:	601a      	str	r2, [r3, #0]
10011336:	4770      	bx	lr
10011338:	100198bc 	.word	0x100198bc

1001133c <platform_cmd_cmpl_wait>:
1001133c:	b510      	push	{r4, lr}
1001133e:	1c04      	adds	r4, r0, #0
10011340:	4b07      	ldr	r3, [pc, #28]	; (10011360 <platform_cmd_cmpl_wait+0x24>)
10011342:	681a      	ldr	r2, [r3, #0]
10011344:	2a01      	cmp	r2, #1
10011346:	d003      	beq.n	10011350 <platform_cmd_cmpl_wait+0x14>
10011348:	4b06      	ldr	r3, [pc, #24]	; (10011364 <platform_cmd_cmpl_wait+0x28>)
1001134a:	2000      	movs	r0, #0
1001134c:	4798      	blx	r3
1001134e:	e7f7      	b.n	10011340 <platform_cmd_cmpl_wait+0x4>
10011350:	6819      	ldr	r1, [r3, #0]
10011352:	2901      	cmp	r1, #1
10011354:	d102      	bne.n	1001135c <platform_cmd_cmpl_wait+0x20>
10011356:	2200      	movs	r2, #0
10011358:	601a      	str	r2, [r3, #0]
1001135a:	e000      	b.n	1001135e <platform_cmd_cmpl_wait+0x22>
1001135c:	7022      	strb	r2, [r4, #0]
1001135e:	bd10      	pop	{r4, pc}
10011360:	100198bc 	.word	0x100198bc
10011364:	1000efdd 	.word	0x1000efdd

10011368 <start_timer>:
10011368:	4770      	bx	lr

1001136a <stop_timer>:
1001136a:	4770      	bx	lr

1001136c <dbg_le_set_bd_addr_req_handler>:
1001136c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001136e:	466b      	mov	r3, sp
10011370:	1dde      	adds	r6, r3, #7
10011372:	2300      	movs	r3, #0
10011374:	7033      	strb	r3, [r6, #0]
10011376:	230f      	movs	r3, #15
10011378:	4c13      	ldr	r4, [pc, #76]	; (100113c8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1001137a:	2703      	movs	r7, #3
1001137c:	7023      	strb	r3, [r4, #0]
1001137e:	2300      	movs	r3, #0
10011380:	70e3      	strb	r3, [r4, #3]
10011382:	4b12      	ldr	r3, [pc, #72]	; (100113cc <dbg_le_set_bd_addr_req_handler+0x60>)
10011384:	1c01      	adds	r1, r0, #0
10011386:	881a      	ldrh	r2, [r3, #0]
10011388:	881b      	ldrh	r3, [r3, #0]
1001138a:	7122      	strb	r2, [r4, #4]
1001138c:	0a1b      	lsrs	r3, r3, #8
1001138e:	2206      	movs	r2, #6
10011390:	7163      	strb	r3, [r4, #5]
10011392:	480f      	ldr	r0, [pc, #60]	; (100113d0 <dbg_le_set_bd_addr_req_handler+0x64>)
10011394:	4b0f      	ldr	r3, [pc, #60]	; (100113d4 <dbg_le_set_bd_addr_req_handler+0x68>)
10011396:	7067      	strb	r7, [r4, #1]
10011398:	70a7      	strb	r7, [r4, #2]
1001139a:	4798      	blx	r3
1001139c:	4d0e      	ldr	r5, [pc, #56]	; (100113d8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1001139e:	4b0f      	ldr	r3, [pc, #60]	; (100113dc <dbg_le_set_bd_addr_req_handler+0x70>)
100113a0:	210e      	movs	r1, #14
100113a2:	802b      	strh	r3, [r5, #0]
100113a4:	2306      	movs	r3, #6
100113a6:	71a3      	strb	r3, [r4, #6]
100113a8:	2300      	movs	r3, #0
100113aa:	1c20      	adds	r0, r4, #0
100113ac:	71e3      	strb	r3, [r4, #7]
100113ae:	4b0c      	ldr	r3, [pc, #48]	; (100113e0 <dbg_le_set_bd_addr_req_handler+0x74>)
100113b0:	80af      	strh	r7, [r5, #4]
100113b2:	4798      	blx	r3
100113b4:	1c30      	adds	r0, r6, #0
100113b6:	4b0b      	ldr	r3, [pc, #44]	; (100113e4 <dbg_le_set_bd_addr_req_handler+0x78>)
100113b8:	4798      	blx	r3
100113ba:	7833      	ldrb	r3, [r6, #0]
100113bc:	20e2      	movs	r0, #226	; 0xe2
100113be:	2b00      	cmp	r3, #0
100113c0:	d101      	bne.n	100113c6 <dbg_le_set_bd_addr_req_handler+0x5a>
100113c2:	68ab      	ldr	r3, [r5, #8]
100113c4:	7818      	ldrb	r0, [r3, #0]
100113c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100113c8:	1001ab10 	.word	0x1001ab10
100113cc:	1001a7a0 	.word	0x1001a7a0
100113d0:	1001ab18 	.word	0x1001ab18
100113d4:	100149f3 	.word	0x100149f3
100113d8:	1001a794 	.word	0x1001a794
100113dc:	00000329 	.word	0x00000329
100113e0:	100112d9 	.word	0x100112d9
100113e4:	1001133d 	.word	0x1001133d

100113e8 <gapc_get_dev_info_cfm.constprop.1>:
100113e8:	b538      	push	{r3, r4, r5, lr}
100113ea:	230b      	movs	r3, #11
100113ec:	4c27      	ldr	r4, [pc, #156]	; (1001148c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100113ee:	7023      	strb	r3, [r4, #0]
100113f0:	3303      	adds	r3, #3
100113f2:	7063      	strb	r3, [r4, #1]
100113f4:	3329      	adds	r3, #41	; 0x29
100113f6:	70a3      	strb	r3, [r4, #2]
100113f8:	4b25      	ldr	r3, [pc, #148]	; (10011490 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100113fa:	70e1      	strb	r1, [r4, #3]
100113fc:	881a      	ldrh	r2, [r3, #0]
100113fe:	881b      	ldrh	r3, [r3, #0]
10011400:	7122      	strb	r2, [r4, #4]
10011402:	0a1b      	lsrs	r3, r3, #8
10011404:	7163      	strb	r3, [r4, #5]
10011406:	2300      	movs	r3, #0
10011408:	7220      	strb	r0, [r4, #8]
1001140a:	7263      	strb	r3, [r4, #9]
1001140c:	2801      	cmp	r0, #1
1001140e:	d02b      	beq.n	10011468 <gapc_get_dev_info_cfm.constprop.1+0x80>
10011410:	4298      	cmp	r0, r3
10011412:	d01b      	beq.n	1001144c <gapc_get_dev_info_cfm.constprop.1+0x64>
10011414:	2802      	cmp	r0, #2
10011416:	d12f      	bne.n	10011478 <gapc_get_dev_info_cfm.constprop.1+0x90>
10011418:	4b1e      	ldr	r3, [pc, #120]	; (10011494 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001141a:	2112      	movs	r1, #18
1001141c:	1c1a      	adds	r2, r3, #0
1001141e:	32ce      	adds	r2, #206	; 0xce
10011420:	8812      	ldrh	r2, [r2, #0]
10011422:	72a2      	strb	r2, [r4, #10]
10011424:	0a12      	lsrs	r2, r2, #8
10011426:	72e2      	strb	r2, [r4, #11]
10011428:	1c1a      	adds	r2, r3, #0
1001142a:	32d0      	adds	r2, #208	; 0xd0
1001142c:	8812      	ldrh	r2, [r2, #0]
1001142e:	7322      	strb	r2, [r4, #12]
10011430:	0a12      	lsrs	r2, r2, #8
10011432:	7362      	strb	r2, [r4, #13]
10011434:	1c1a      	adds	r2, r3, #0
10011436:	32d2      	adds	r2, #210	; 0xd2
10011438:	8812      	ldrh	r2, [r2, #0]
1001143a:	33d4      	adds	r3, #212	; 0xd4
1001143c:	73a2      	strb	r2, [r4, #14]
1001143e:	0a12      	lsrs	r2, r2, #8
10011440:	73e2      	strb	r2, [r4, #15]
10011442:	881b      	ldrh	r3, [r3, #0]
10011444:	7423      	strb	r3, [r4, #16]
10011446:	0a1b      	lsrs	r3, r3, #8
10011448:	7463      	strb	r3, [r4, #17]
1001144a:	e016      	b.n	1001147a <gapc_get_dev_info_cfm.constprop.1+0x92>
1001144c:	4b11      	ldr	r3, [pc, #68]	; (10011494 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001144e:	4912      	ldr	r1, [pc, #72]	; (10011498 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10011450:	33aa      	adds	r3, #170	; 0xaa
10011452:	881d      	ldrh	r5, [r3, #0]
10011454:	4811      	ldr	r0, [pc, #68]	; (1001149c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10011456:	0a2b      	lsrs	r3, r5, #8
10011458:	72a5      	strb	r5, [r4, #10]
1001145a:	72e3      	strb	r3, [r4, #11]
1001145c:	1c2a      	adds	r2, r5, #0
1001145e:	4b10      	ldr	r3, [pc, #64]	; (100114a0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10011460:	350c      	adds	r5, #12
10011462:	4798      	blx	r3
10011464:	b2a9      	uxth	r1, r5
10011466:	e008      	b.n	1001147a <gapc_get_dev_info_cfm.constprop.1+0x92>
10011468:	4b0a      	ldr	r3, [pc, #40]	; (10011494 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001146a:	210c      	movs	r1, #12
1001146c:	33cc      	adds	r3, #204	; 0xcc
1001146e:	881b      	ldrh	r3, [r3, #0]
10011470:	72a3      	strb	r3, [r4, #10]
10011472:	0a1b      	lsrs	r3, r3, #8
10011474:	72e3      	strb	r3, [r4, #11]
10011476:	e000      	b.n	1001147a <gapc_get_dev_info_cfm.constprop.1+0x92>
10011478:	210a      	movs	r1, #10
1001147a:	1c0b      	adds	r3, r1, #0
1001147c:	3b08      	subs	r3, #8
1001147e:	71a3      	strb	r3, [r4, #6]
10011480:	121b      	asrs	r3, r3, #8
10011482:	71e3      	strb	r3, [r4, #7]
10011484:	1c20      	adds	r0, r4, #0
10011486:	4b07      	ldr	r3, [pc, #28]	; (100114a4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011488:	4798      	blx	r3
1001148a:	bd38      	pop	{r3, r4, r5, pc}
1001148c:	1001ab10 	.word	0x1001ab10
10011490:	1001a7a0 	.word	0x1001a7a0
10011494:	1001a832 	.word	0x1001a832
10011498:	1001a8de 	.word	0x1001a8de
1001149c:	1001ab1c 	.word	0x1001ab1c
100114a0:	100149f3 	.word	0x100149f3
100114a4:	100112d9 	.word	0x100112d9

100114a8 <check_ConnData_idx_role>:
100114a8:	4b0c      	ldr	r3, [pc, #48]	; (100114dc <check_ConnData_idx_role+0x34>)
100114aa:	b570      	push	{r4, r5, r6, lr}
100114ac:	1c04      	adds	r4, r0, #0
100114ae:	2008      	movs	r0, #8
100114b0:	429c      	cmp	r4, r3
100114b2:	d011      	beq.n	100114d8 <check_ConnData_idx_role+0x30>
100114b4:	2300      	movs	r3, #0
100114b6:	2212      	movs	r2, #18
100114b8:	435a      	muls	r2, r3
100114ba:	4d09      	ldr	r5, [pc, #36]	; (100114e0 <check_ConnData_idx_role+0x38>)
100114bc:	b2d8      	uxtb	r0, r3
100114be:	1956      	adds	r6, r2, r5
100114c0:	8976      	ldrh	r6, [r6, #10]
100114c2:	42a6      	cmp	r6, r4
100114c4:	d104      	bne.n	100114d0 <check_ConnData_idx_role+0x28>
100114c6:	2900      	cmp	r1, #0
100114c8:	d006      	beq.n	100114d8 <check_ConnData_idx_role+0x30>
100114ca:	5d53      	ldrb	r3, [r2, r5]
100114cc:	700b      	strb	r3, [r1, #0]
100114ce:	e003      	b.n	100114d8 <check_ConnData_idx_role+0x30>
100114d0:	3301      	adds	r3, #1
100114d2:	2b08      	cmp	r3, #8
100114d4:	d1ef      	bne.n	100114b6 <check_ConnData_idx_role+0xe>
100114d6:	1c18      	adds	r0, r3, #0
100114d8:	bd70      	pop	{r4, r5, r6, pc}
100114da:	46c0      	nop			; (mov r8, r8)
100114dc:	0000ffff 	.word	0x0000ffff
100114e0:	1001a7a2 	.word	0x1001a7a2

100114e4 <check_ConnData_emptyEntry>:
100114e4:	2300      	movs	r3, #0
100114e6:	2212      	movs	r2, #18
100114e8:	435a      	muls	r2, r3
100114ea:	4906      	ldr	r1, [pc, #24]	; (10011504 <check_ConnData_emptyEntry+0x20>)
100114ec:	b2d8      	uxtb	r0, r3
100114ee:	1852      	adds	r2, r2, r1
100114f0:	8951      	ldrh	r1, [r2, #10]
100114f2:	4a05      	ldr	r2, [pc, #20]	; (10011508 <check_ConnData_emptyEntry+0x24>)
100114f4:	4291      	cmp	r1, r2
100114f6:	d003      	beq.n	10011500 <check_ConnData_emptyEntry+0x1c>
100114f8:	3301      	adds	r3, #1
100114fa:	2b08      	cmp	r3, #8
100114fc:	d1f3      	bne.n	100114e6 <check_ConnData_emptyEntry+0x2>
100114fe:	1c18      	adds	r0, r3, #0
10011500:	4770      	bx	lr
10011502:	46c0      	nop			; (mov r8, r8)
10011504:	1001a7a2 	.word	0x1001a7a2
10011508:	0000ffff 	.word	0x0000ffff

1001150c <gapc_cmp_evt>:
1001150c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001150e:	780b      	ldrb	r3, [r1, #0]
10011510:	1c05      	adds	r5, r0, #0
10011512:	1e58      	subs	r0, r3, #1
10011514:	784e      	ldrb	r6, [r1, #1]
10011516:	280f      	cmp	r0, #15
10011518:	d85a      	bhi.n	100115d0 <gapc_cmp_evt+0xc4>
1001151a:	1c14      	adds	r4, r2, #0
1001151c:	f001 fba4 	bl	10012c68 <__gnu_thumb1_case_uqi>
10011520:	5858440a 	.word	0x5858440a
10011524:	4b584444 	.word	0x4b584444
10011528:	0825122d 	.word	0x0825122d
1001152c:	3e395858 	.word	0x3e395858
10011530:	203b      	movs	r0, #59	; 0x3b
10011532:	e04e      	b.n	100115d2 <gapc_cmp_evt+0xc6>
10011534:	203b      	movs	r0, #59	; 0x3b
10011536:	2e00      	cmp	r6, #0
10011538:	d04b      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
1001153a:	0a2d      	lsrs	r5, r5, #8
1001153c:	8015      	strh	r5, [r2, #0]
1001153e:	7096      	strb	r6, [r2, #2]
10011540:	3835      	subs	r0, #53	; 0x35
10011542:	e046      	b.n	100115d2 <gapc_cmp_evt+0xc6>
10011544:	466b      	mov	r3, sp
10011546:	1ddf      	adds	r7, r3, #7
10011548:	2301      	movs	r3, #1
1001154a:	0a2d      	lsrs	r5, r5, #8
1001154c:	703b      	strb	r3, [r7, #0]
1001154e:	1c28      	adds	r0, r5, #0
10011550:	1c39      	adds	r1, r7, #0
10011552:	4b20      	ldr	r3, [pc, #128]	; (100115d4 <gapc_cmp_evt+0xc8>)
10011554:	4798      	blx	r3
10011556:	2807      	cmp	r0, #7
10011558:	d803      	bhi.n	10011562 <gapc_cmp_evt+0x56>
1001155a:	783b      	ldrb	r3, [r7, #0]
1001155c:	203b      	movs	r0, #59	; 0x3b
1001155e:	2b00      	cmp	r3, #0
10011560:	d037      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
10011562:	8065      	strh	r5, [r4, #2]
10011564:	7126      	strb	r6, [r4, #4]
10011566:	2009      	movs	r0, #9
10011568:	e033      	b.n	100115d2 <gapc_cmp_evt+0xc6>
1001156a:	203b      	movs	r0, #59	; 0x3b
1001156c:	2e00      	cmp	r6, #0
1001156e:	d030      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
10011570:	0a2d      	lsrs	r5, r5, #8
10011572:	8015      	strh	r5, [r2, #0]
10011574:	7096      	strb	r6, [r2, #2]
10011576:	382d      	subs	r0, #45	; 0x2d
10011578:	e02b      	b.n	100115d2 <gapc_cmp_evt+0xc6>
1001157a:	203b      	movs	r0, #59	; 0x3b
1001157c:	2e00      	cmp	r6, #0
1001157e:	d028      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
10011580:	2300      	movs	r3, #0
10011582:	0a2d      	lsrs	r5, r5, #8
10011584:	8015      	strh	r5, [r2, #0]
10011586:	7096      	strb	r6, [r2, #2]
10011588:	8093      	strh	r3, [r2, #4]
1001158a:	80d3      	strh	r3, [r2, #6]
1001158c:	8113      	strh	r3, [r2, #8]
1001158e:	3834      	subs	r0, #52	; 0x34
10011590:	e01f      	b.n	100115d2 <gapc_cmp_evt+0xc6>
10011592:	203b      	movs	r0, #59	; 0x3b
10011594:	2e00      	cmp	r6, #0
10011596:	d01c      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
10011598:	7216      	strb	r6, [r2, #8]
1001159a:	e003      	b.n	100115a4 <gapc_cmp_evt+0x98>
1001159c:	203b      	movs	r0, #59	; 0x3b
1001159e:	2e00      	cmp	r6, #0
100115a0:	d017      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
100115a2:	7116      	strb	r6, [r2, #4]
100115a4:	3812      	subs	r0, #18
100115a6:	e014      	b.n	100115d2 <gapc_cmp_evt+0xc6>
100115a8:	203b      	movs	r0, #59	; 0x3b
100115aa:	2e00      	cmp	r6, #0
100115ac:	d011      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
100115ae:	7093      	strb	r3, [r2, #2]
100115b0:	70d6      	strb	r6, [r2, #3]
100115b2:	382a      	subs	r0, #42	; 0x2a
100115b4:	e00d      	b.n	100115d2 <gapc_cmp_evt+0xc6>
100115b6:	203b      	movs	r0, #59	; 0x3b
100115b8:	2e00      	cmp	r6, #0
100115ba:	d00a      	beq.n	100115d2 <gapc_cmp_evt+0xc6>
100115bc:	0a2d      	lsrs	r5, r5, #8
100115be:	7016      	strb	r6, [r2, #0]
100115c0:	8055      	strh	r5, [r2, #2]
100115c2:	1d10      	adds	r0, r2, #4
100115c4:	2100      	movs	r1, #0
100115c6:	2205      	movs	r2, #5
100115c8:	4b03      	ldr	r3, [pc, #12]	; (100115d8 <gapc_cmp_evt+0xcc>)
100115ca:	4798      	blx	r3
100115cc:	2012      	movs	r0, #18
100115ce:	e000      	b.n	100115d2 <gapc_cmp_evt+0xc6>
100115d0:	2000      	movs	r0, #0
100115d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100115d4:	100114a9 	.word	0x100114a9
100115d8:	10014a05 	.word	0x10014a05

100115dc <gapc_connection_cfm_handler>:
100115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100115de:	b085      	sub	sp, #20
100115e0:	1c1d      	adds	r5, r3, #0
100115e2:	ab0a      	add	r3, sp, #40	; 0x28
100115e4:	781b      	ldrb	r3, [r3, #0]
100115e6:	9201      	str	r2, [sp, #4]
100115e8:	9302      	str	r3, [sp, #8]
100115ea:	ab0b      	add	r3, sp, #44	; 0x2c
100115ec:	781b      	ldrb	r3, [r3, #0]
100115ee:	1c07      	adds	r7, r0, #0
100115f0:	9303      	str	r3, [sp, #12]
100115f2:	ab0c      	add	r3, sp, #48	; 0x30
100115f4:	881a      	ldrh	r2, [r3, #0]
100115f6:	2302      	movs	r3, #2
100115f8:	1c0e      	adds	r6, r1, #0
100115fa:	4c23      	ldr	r4, [pc, #140]	; (10011688 <gapc_connection_cfm_handler+0xac>)
100115fc:	1c39      	adds	r1, r7, #0
100115fe:	7023      	strb	r3, [r4, #0]
10011600:	330c      	adds	r3, #12
10011602:	7063      	strb	r3, [r4, #1]
10011604:	70a3      	strb	r3, [r4, #2]
10011606:	4b21      	ldr	r3, [pc, #132]	; (1001168c <gapc_connection_cfm_handler+0xb0>)
10011608:	70e2      	strb	r2, [r4, #3]
1001160a:	881a      	ldrh	r2, [r3, #0]
1001160c:	881b      	ldrh	r3, [r3, #0]
1001160e:	7122      	strb	r2, [r4, #4]
10011610:	0a1b      	lsrs	r3, r3, #8
10011612:	4f1f      	ldr	r7, [pc, #124]	; (10011690 <gapc_connection_cfm_handler+0xb4>)
10011614:	2210      	movs	r2, #16
10011616:	481f      	ldr	r0, [pc, #124]	; (10011694 <gapc_connection_cfm_handler+0xb8>)
10011618:	7163      	strb	r3, [r4, #5]
1001161a:	47b8      	blx	r7
1001161c:	0a33      	lsrs	r3, r6, #8
1001161e:	7626      	strb	r6, [r4, #24]
10011620:	7663      	strb	r3, [r4, #25]
10011622:	9901      	ldr	r1, [sp, #4]
10011624:	0c33      	lsrs	r3, r6, #16
10011626:	2210      	movs	r2, #16
10011628:	0e36      	lsrs	r6, r6, #24
1001162a:	481b      	ldr	r0, [pc, #108]	; (10011698 <gapc_connection_cfm_handler+0xbc>)
1001162c:	76a3      	strb	r3, [r4, #26]
1001162e:	76e6      	strb	r6, [r4, #27]
10011630:	47b8      	blx	r7
10011632:	1c23      	adds	r3, r4, #0
10011634:	332c      	adds	r3, #44	; 0x2c
10011636:	701d      	strb	r5, [r3, #0]
10011638:	1c23      	adds	r3, r4, #0
1001163a:	0a2a      	lsrs	r2, r5, #8
1001163c:	332d      	adds	r3, #45	; 0x2d
1001163e:	701a      	strb	r2, [r3, #0]
10011640:	1c23      	adds	r3, r4, #0
10011642:	0c2a      	lsrs	r2, r5, #16
10011644:	332e      	adds	r3, #46	; 0x2e
10011646:	701a      	strb	r2, [r3, #0]
10011648:	1c23      	adds	r3, r4, #0
1001164a:	0e2d      	lsrs	r5, r5, #24
1001164c:	332f      	adds	r3, #47	; 0x2f
1001164e:	466a      	mov	r2, sp
10011650:	701d      	strb	r5, [r3, #0]
10011652:	1c23      	adds	r3, r4, #0
10011654:	7a12      	ldrb	r2, [r2, #8]
10011656:	3330      	adds	r3, #48	; 0x30
10011658:	701a      	strb	r2, [r3, #0]
1001165a:	1c23      	adds	r3, r4, #0
1001165c:	2500      	movs	r5, #0
1001165e:	3331      	adds	r3, #49	; 0x31
10011660:	466a      	mov	r2, sp
10011662:	701d      	strb	r5, [r3, #0]
10011664:	1c23      	adds	r3, r4, #0
10011666:	7b12      	ldrb	r2, [r2, #12]
10011668:	3332      	adds	r3, #50	; 0x32
1001166a:	701a      	strb	r2, [r3, #0]
1001166c:	1c23      	adds	r3, r4, #0
1001166e:	3333      	adds	r3, #51	; 0x33
10011670:	701d      	strb	r5, [r3, #0]
10011672:	232c      	movs	r3, #44	; 0x2c
10011674:	1c20      	adds	r0, r4, #0
10011676:	71a3      	strb	r3, [r4, #6]
10011678:	2134      	movs	r1, #52	; 0x34
1001167a:	4b08      	ldr	r3, [pc, #32]	; (1001169c <gapc_connection_cfm_handler+0xc0>)
1001167c:	71e5      	strb	r5, [r4, #7]
1001167e:	4798      	blx	r3
10011680:	1c28      	adds	r0, r5, #0
10011682:	b005      	add	sp, #20
10011684:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011686:	46c0      	nop			; (mov r8, r8)
10011688:	1001ab10 	.word	0x1001ab10
1001168c:	1001a7a0 	.word	0x1001a7a0
10011690:	100149f3 	.word	0x100149f3
10011694:	1001ab18 	.word	0x1001ab18
10011698:	1001ab2c 	.word	0x1001ab2c
1001169c:	100112d9 	.word	0x100112d9

100116a0 <gapc_con_req_ind>:
100116a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100116a2:	7845      	ldrb	r5, [r0, #1]
100116a4:	7803      	ldrb	r3, [r0, #0]
100116a6:	4c30      	ldr	r4, [pc, #192]	; (10011768 <gapc_con_req_ind+0xc8>)
100116a8:	022d      	lsls	r5, r5, #8
100116aa:	431d      	orrs	r5, r3
100116ac:	85a5      	strh	r5, [r4, #44]	; 0x2c
100116ae:	78c3      	ldrb	r3, [r0, #3]
100116b0:	7882      	ldrb	r2, [r0, #2]
100116b2:	b08b      	sub	sp, #44	; 0x2c
100116b4:	021b      	lsls	r3, r3, #8
100116b6:	431a      	orrs	r2, r3
100116b8:	466b      	mov	r3, sp
100116ba:	9205      	str	r2, [sp, #20]
100116bc:	8a9b      	ldrh	r3, [r3, #20]
100116be:	2120      	movs	r1, #32
100116c0:	85e3      	strh	r3, [r4, #46]	; 0x2e
100116c2:	7943      	ldrb	r3, [r0, #5]
100116c4:	7902      	ldrb	r2, [r0, #4]
100116c6:	021b      	lsls	r3, r3, #8
100116c8:	431a      	orrs	r2, r3
100116ca:	466b      	mov	r3, sp
100116cc:	9206      	str	r2, [sp, #24]
100116ce:	8b1b      	ldrh	r3, [r3, #24]
100116d0:	1c06      	adds	r6, r0, #0
100116d2:	8623      	strh	r3, [r4, #48]	; 0x30
100116d4:	79c3      	ldrb	r3, [r0, #7]
100116d6:	7982      	ldrb	r2, [r0, #6]
100116d8:	021b      	lsls	r3, r3, #8
100116da:	431a      	orrs	r2, r3
100116dc:	466b      	mov	r3, sp
100116de:	9207      	str	r2, [sp, #28]
100116e0:	466a      	mov	r2, sp
100116e2:	8b9b      	ldrh	r3, [r3, #28]
100116e4:	1852      	adds	r2, r2, r1
100116e6:	8663      	strh	r3, [r4, #50]	; 0x32
100116e8:	7a43      	ldrb	r3, [r0, #9]
100116ea:	1c01      	adds	r1, r0, #0
100116ec:	9308      	str	r3, [sp, #32]
100116ee:	1c23      	adds	r3, r4, #0
100116f0:	7812      	ldrb	r2, [r2, #0]
100116f2:	3377      	adds	r3, #119	; 0x77
100116f4:	3478      	adds	r4, #120	; 0x78
100116f6:	701a      	strb	r2, [r3, #0]
100116f8:	310a      	adds	r1, #10
100116fa:	2206      	movs	r2, #6
100116fc:	4b1b      	ldr	r3, [pc, #108]	; (1001176c <gapc_con_req_ind+0xcc>)
100116fe:	1c20      	adds	r0, r4, #0
10011700:	4798      	blx	r3
10011702:	7c33      	ldrb	r3, [r6, #16]
10011704:	9309      	str	r3, [sp, #36]	; 0x24
10011706:	4b1a      	ldr	r3, [pc, #104]	; (10011770 <gapc_con_req_ind+0xd0>)
10011708:	4798      	blx	r3
1001170a:	4e1a      	ldr	r6, [pc, #104]	; (10011774 <gapc_con_req_ind+0xd4>)
1001170c:	1e07      	subs	r7, r0, #0
1001170e:	2f07      	cmp	r7, #7
10011710:	d81b      	bhi.n	1001174a <gapc_con_req_ind+0xaa>
10011712:	2312      	movs	r3, #18
10011714:	4343      	muls	r3, r0
10011716:	18f0      	adds	r0, r6, r3
10011718:	8145      	strh	r5, [r0, #10]
1001171a:	4669      	mov	r1, sp
1001171c:	2524      	movs	r5, #36	; 0x24
1001171e:	1949      	adds	r1, r1, r5
10011720:	7809      	ldrb	r1, [r1, #0]
10011722:	2206      	movs	r2, #6
10011724:	54f1      	strb	r1, [r6, r3]
10011726:	2120      	movs	r1, #32
10011728:	466b      	mov	r3, sp
1001172a:	185b      	adds	r3, r3, r1
1001172c:	781b      	ldrb	r3, [r3, #0]
1001172e:	1c21      	adds	r1, r4, #0
10011730:	7043      	strb	r3, [r0, #1]
10011732:	466b      	mov	r3, sp
10011734:	8a9b      	ldrh	r3, [r3, #20]
10011736:	3002      	adds	r0, #2
10011738:	8143      	strh	r3, [r0, #10]
1001173a:	466b      	mov	r3, sp
1001173c:	8b1b      	ldrh	r3, [r3, #24]
1001173e:	8183      	strh	r3, [r0, #12]
10011740:	466b      	mov	r3, sp
10011742:	8b9b      	ldrh	r3, [r3, #28]
10011744:	81c3      	strh	r3, [r0, #14]
10011746:	4b09      	ldr	r3, [pc, #36]	; (1001176c <gapc_con_req_ind+0xcc>)
10011748:	4798      	blx	r3
1001174a:	2112      	movs	r1, #18
1001174c:	2300      	movs	r3, #0
1001174e:	434f      	muls	r7, r1
10011750:	9300      	str	r3, [sp, #0]
10011752:	9301      	str	r3, [sp, #4]
10011754:	19f6      	adds	r6, r6, r7
10011756:	8971      	ldrh	r1, [r6, #10]
10011758:	4a07      	ldr	r2, [pc, #28]	; (10011778 <gapc_con_req_ind+0xd8>)
1001175a:	9102      	str	r1, [sp, #8]
1001175c:	1c10      	adds	r0, r2, #0
1001175e:	1c19      	adds	r1, r3, #0
10011760:	4c06      	ldr	r4, [pc, #24]	; (1001177c <gapc_con_req_ind+0xdc>)
10011762:	47a0      	blx	r4
10011764:	b00b      	add	sp, #44	; 0x2c
10011766:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011768:	1001a832 	.word	0x1001a832
1001176c:	100149f3 	.word	0x100149f3
10011770:	100114e5 	.word	0x100114e5
10011774:	1001a7a2 	.word	0x1001a7a2
10011778:	100198c0 	.word	0x100198c0
1001177c:	100115dd 	.word	0x100115dd

10011780 <gapc_disconnect_cmd_handler>:
10011780:	2204      	movs	r2, #4
10011782:	b510      	push	{r4, lr}
10011784:	4b0c      	ldr	r3, [pc, #48]	; (100117b8 <gapc_disconnect_cmd_handler+0x38>)
10011786:	2400      	movs	r4, #0
10011788:	701a      	strb	r2, [r3, #0]
1001178a:	320a      	adds	r2, #10
1001178c:	705a      	strb	r2, [r3, #1]
1001178e:	709a      	strb	r2, [r3, #2]
10011790:	4a0a      	ldr	r2, [pc, #40]	; (100117bc <gapc_disconnect_cmd_handler+0x3c>)
10011792:	70d9      	strb	r1, [r3, #3]
10011794:	8811      	ldrh	r1, [r2, #0]
10011796:	8812      	ldrh	r2, [r2, #0]
10011798:	7119      	strb	r1, [r3, #4]
1001179a:	0a12      	lsrs	r2, r2, #8
1001179c:	715a      	strb	r2, [r3, #5]
1001179e:	2201      	movs	r2, #1
100117a0:	721a      	strb	r2, [r3, #8]
100117a2:	1892      	adds	r2, r2, r2
100117a4:	7258      	strb	r0, [r3, #9]
100117a6:	719a      	strb	r2, [r3, #6]
100117a8:	71dc      	strb	r4, [r3, #7]
100117aa:	1c18      	adds	r0, r3, #0
100117ac:	210a      	movs	r1, #10
100117ae:	4b04      	ldr	r3, [pc, #16]	; (100117c0 <gapc_disconnect_cmd_handler+0x40>)
100117b0:	4798      	blx	r3
100117b2:	1c20      	adds	r0, r4, #0
100117b4:	bd10      	pop	{r4, pc}
100117b6:	46c0      	nop			; (mov r8, r8)
100117b8:	1001ab10 	.word	0x1001ab10
100117bc:	1001a7a0 	.word	0x1001a7a0
100117c0:	100112d9 	.word	0x100112d9

100117c4 <gapc_disconnect_ind>:
100117c4:	1c02      	adds	r2, r0, #0
100117c6:	b508      	push	{r3, lr}
100117c8:	7843      	ldrb	r3, [r0, #1]
100117ca:	7800      	ldrb	r0, [r0, #0]
100117cc:	021b      	lsls	r3, r3, #8
100117ce:	4318      	orrs	r0, r3
100117d0:	8008      	strh	r0, [r1, #0]
100117d2:	7893      	ldrb	r3, [r2, #2]
100117d4:	708b      	strb	r3, [r1, #2]
100117d6:	2100      	movs	r1, #0
100117d8:	4b05      	ldr	r3, [pc, #20]	; (100117f0 <gapc_disconnect_ind+0x2c>)
100117da:	4798      	blx	r3
100117dc:	2807      	cmp	r0, #7
100117de:	d806      	bhi.n	100117ee <gapc_disconnect_ind+0x2a>
100117e0:	2312      	movs	r3, #18
100117e2:	4358      	muls	r0, r3
100117e4:	4b03      	ldr	r3, [pc, #12]	; (100117f4 <gapc_disconnect_ind+0x30>)
100117e6:	1818      	adds	r0, r3, r0
100117e8:	2301      	movs	r3, #1
100117ea:	425b      	negs	r3, r3
100117ec:	8143      	strh	r3, [r0, #10]
100117ee:	bd08      	pop	{r3, pc}
100117f0:	100114a9 	.word	0x100114a9
100117f4:	1001a7a2 	.word	0x1001a7a2

100117f8 <gapc_bond_cmd_handler>:
100117f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100117fa:	9300      	str	r3, [sp, #0]
100117fc:	2312      	movs	r3, #18
100117fe:	1c04      	adds	r4, r0, #0
10011800:	a808      	add	r0, sp, #32
10011802:	7807      	ldrb	r7, [r0, #0]
10011804:	a809      	add	r0, sp, #36	; 0x24
10011806:	7806      	ldrb	r6, [r0, #0]
10011808:	a80a      	add	r0, sp, #40	; 0x28
1001180a:	7805      	ldrb	r5, [r0, #0]
1001180c:	a80b      	add	r0, sp, #44	; 0x2c
1001180e:	7800      	ldrb	r0, [r0, #0]
10011810:	9001      	str	r0, [sp, #4]
10011812:	4810      	ldr	r0, [pc, #64]	; (10011854 <gapc_bond_cmd_handler+0x5c>)
10011814:	7003      	strb	r3, [r0, #0]
10011816:	230e      	movs	r3, #14
10011818:	70c4      	strb	r4, [r0, #3]
1001181a:	4c0f      	ldr	r4, [pc, #60]	; (10011858 <gapc_bond_cmd_handler+0x60>)
1001181c:	7043      	strb	r3, [r0, #1]
1001181e:	7083      	strb	r3, [r0, #2]
10011820:	8823      	ldrh	r3, [r4, #0]
10011822:	8824      	ldrh	r4, [r4, #0]
10011824:	7103      	strb	r3, [r0, #4]
10011826:	466b      	mov	r3, sp
10011828:	781b      	ldrb	r3, [r3, #0]
1001182a:	0a24      	lsrs	r4, r4, #8
1001182c:	72c3      	strb	r3, [r0, #11]
1001182e:	466b      	mov	r3, sp
10011830:	791b      	ldrb	r3, [r3, #4]
10011832:	7144      	strb	r4, [r0, #5]
10011834:	73c3      	strb	r3, [r0, #15]
10011836:	2308      	movs	r3, #8
10011838:	7183      	strb	r3, [r0, #6]
1001183a:	2300      	movs	r3, #0
1001183c:	240a      	movs	r4, #10
1001183e:	7241      	strb	r1, [r0, #9]
10011840:	71c3      	strb	r3, [r0, #7]
10011842:	2110      	movs	r1, #16
10011844:	4b05      	ldr	r3, [pc, #20]	; (1001185c <gapc_bond_cmd_handler+0x64>)
10011846:	7307      	strb	r7, [r0, #12]
10011848:	7346      	strb	r6, [r0, #13]
1001184a:	7385      	strb	r5, [r0, #14]
1001184c:	7204      	strb	r4, [r0, #8]
1001184e:	7282      	strb	r2, [r0, #10]
10011850:	4798      	blx	r3
10011852:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011854:	1001ab10 	.word	0x1001ab10
10011858:	1001a7a0 	.word	0x1001a7a0
1001185c:	100112d9 	.word	0x100112d9

10011860 <gapc_bond_ind>:
10011860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011862:	780e      	ldrb	r6, [r1, #0]
10011864:	1c03      	adds	r3, r0, #0
10011866:	1eb0      	subs	r0, r6, #2
10011868:	2805      	cmp	r0, #5
1001186a:	d85d      	bhi.n	10011928 <gapc_bond_ind+0xc8>
1001186c:	1c15      	adds	r5, r2, #0
1001186e:	1c0c      	adds	r4, r1, #0
10011870:	f001 f9fa 	bl	10012c68 <__gnu_thumb1_case_uqi>
10011874:	2f5a030d 	.word	0x2f5a030d
10011878:	4740      	.short	0x4740
1001187a:	2009      	movs	r0, #9
1001187c:	2a00      	cmp	r2, #0
1001187e:	d054      	beq.n	1001192a <gapc_bond_ind+0xca>
10011880:	0a1b      	lsrs	r3, r3, #8
10011882:	8053      	strh	r3, [r2, #2]
10011884:	788b      	ldrb	r3, [r1, #2]
10011886:	4829      	ldr	r0, [pc, #164]	; (1001192c <gapc_bond_ind+0xcc>)
10011888:	7113      	strb	r3, [r2, #4]
1001188a:	2100      	movs	r1, #0
1001188c:	e01c      	b.n	100118c8 <gapc_bond_ind+0x68>
1001188e:	2009      	movs	r0, #9
10011890:	2a00      	cmp	r2, #0
10011892:	d04a      	beq.n	1001192a <gapc_bond_ind+0xca>
10011894:	4c25      	ldr	r4, [pc, #148]	; (1001192c <gapc_bond_ind+0xcc>)
10011896:	0a1b      	lsrs	r3, r3, #8
10011898:	8053      	strh	r3, [r2, #2]
1001189a:	788b      	ldrb	r3, [r1, #2]
1001189c:	2700      	movs	r7, #0
1001189e:	1c10      	adds	r0, r2, #0
100118a0:	1c21      	adds	r1, r4, #0
100118a2:	7013      	strb	r3, [r2, #0]
100118a4:	4e22      	ldr	r6, [pc, #136]	; (10011930 <gapc_bond_ind+0xd0>)
100118a6:	7117      	strb	r7, [r2, #4]
100118a8:	312e      	adds	r1, #46	; 0x2e
100118aa:	2217      	movs	r2, #23
100118ac:	3032      	adds	r0, #50	; 0x32
100118ae:	47b0      	blx	r6
100118b0:	1c28      	adds	r0, r5, #0
100118b2:	1c21      	adds	r1, r4, #0
100118b4:	2210      	movs	r2, #16
100118b6:	311e      	adds	r1, #30
100118b8:	3022      	adds	r0, #34	; 0x22
100118ba:	47b0      	blx	r6
100118bc:	1ca1      	adds	r1, r4, #2
100118be:	1da8      	adds	r0, r5, #6
100118c0:	221c      	movs	r2, #28
100118c2:	47b0      	blx	r6
100118c4:	1c20      	adds	r0, r4, #0
100118c6:	1c39      	adds	r1, r7, #0
100118c8:	2246      	movs	r2, #70	; 0x46
100118ca:	4b1a      	ldr	r3, [pc, #104]	; (10011934 <gapc_bond_ind+0xd4>)
100118cc:	4798      	blx	r3
100118ce:	2009      	movs	r0, #9
100118d0:	e02b      	b.n	1001192a <gapc_bond_ind+0xca>
100118d2:	4d16      	ldr	r5, [pc, #88]	; (1001192c <gapc_bond_ind+0xcc>)
100118d4:	3102      	adds	r1, #2
100118d6:	1c28      	adds	r0, r5, #0
100118d8:	2210      	movs	r2, #16
100118da:	4e15      	ldr	r6, [pc, #84]	; (10011930 <gapc_bond_ind+0xd0>)
100118dc:	302e      	adds	r0, #46	; 0x2e
100118de:	47b0      	blx	r6
100118e0:	1c28      	adds	r0, r5, #0
100118e2:	1c21      	adds	r1, r4, #0
100118e4:	303f      	adds	r0, #63	; 0x3f
100118e6:	3112      	adds	r1, #18
100118e8:	2206      	movs	r2, #6
100118ea:	47b0      	blx	r6
100118ec:	7e23      	ldrb	r3, [r4, #24]
100118ee:	353e      	adds	r5, #62	; 0x3e
100118f0:	702b      	strb	r3, [r5, #0]
100118f2:	e019      	b.n	10011928 <gapc_bond_ind+0xc8>
100118f4:	480d      	ldr	r0, [pc, #52]	; (1001192c <gapc_bond_ind+0xcc>)
100118f6:	3102      	adds	r1, #2
100118f8:	2210      	movs	r2, #16
100118fa:	4b0d      	ldr	r3, [pc, #52]	; (10011930 <gapc_bond_ind+0xd0>)
100118fc:	301e      	adds	r0, #30
100118fe:	4798      	blx	r3
10011900:	e012      	b.n	10011928 <gapc_bond_ind+0xc8>
10011902:	4d0a      	ldr	r5, [pc, #40]	; (1001192c <gapc_bond_ind+0xcc>)
10011904:	3102      	adds	r1, #2
10011906:	2210      	movs	r2, #16
10011908:	4e09      	ldr	r6, [pc, #36]	; (10011930 <gapc_bond_ind+0xd0>)
1001190a:	1ca8      	adds	r0, r5, #2
1001190c:	47b0      	blx	r6
1001190e:	1c28      	adds	r0, r5, #0
10011910:	1c21      	adds	r1, r4, #0
10011912:	7ce3      	ldrb	r3, [r4, #19]
10011914:	7ca2      	ldrb	r2, [r4, #18]
10011916:	021b      	lsls	r3, r3, #8
10011918:	4313      	orrs	r3, r2
1001191a:	3014      	adds	r0, #20
1001191c:	3114      	adds	r1, #20
1001191e:	2208      	movs	r2, #8
10011920:	826b      	strh	r3, [r5, #18]
10011922:	47b0      	blx	r6
10011924:	7f23      	ldrb	r3, [r4, #28]
10011926:	772b      	strb	r3, [r5, #28]
10011928:	2000      	movs	r0, #0
1001192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001192c:	100198f0 	.word	0x100198f0
10011930:	100149f3 	.word	0x100149f3
10011934:	10014a05 	.word	0x10014a05

10011938 <gapc_bond_req_ind>:
10011938:	b570      	push	{r4, r5, r6, lr}
1001193a:	780c      	ldrb	r4, [r1, #0]
1001193c:	1c03      	adds	r3, r0, #0
1001193e:	7849      	ldrb	r1, [r1, #1]
10011940:	2c07      	cmp	r4, #7
10011942:	d85c      	bhi.n	100119fe <gapc_bond_req_ind+0xc6>
10011944:	1c20      	adds	r0, r4, #0
10011946:	f001 f98f 	bl	10012c68 <__gnu_thumb1_case_uqi>
1001194a:	5a04      	.short	0x5a04
1001194c:	5a0b5a5a 	.word	0x5a0b5a5a
10011950:	1f1f      	.short	0x1f1f
10011952:	200a      	movs	r0, #10
10011954:	2a00      	cmp	r2, #0
10011956:	d053      	beq.n	10011a00 <gapc_bond_req_ind+0xc8>
10011958:	0a1b      	lsrs	r3, r3, #8
1001195a:	8013      	strh	r3, [r2, #0]
1001195c:	7091      	strb	r1, [r2, #2]
1001195e:	e04f      	b.n	10011a00 <gapc_bond_req_ind+0xc8>
10011960:	2a00      	cmp	r2, #0
10011962:	d00b      	beq.n	1001197c <gapc_bond_req_ind+0x44>
10011964:	0a1b      	lsrs	r3, r3, #8
10011966:	8013      	strh	r3, [r2, #0]
10011968:	2900      	cmp	r1, #0
1001196a:	d102      	bne.n	10011972 <gapc_bond_req_ind+0x3a>
1001196c:	2301      	movs	r3, #1
1001196e:	7093      	strb	r3, [r2, #2]
10011970:	e004      	b.n	1001197c <gapc_bond_req_ind+0x44>
10011972:	2300      	movs	r3, #0
10011974:	7093      	strb	r3, [r2, #2]
10011976:	2902      	cmp	r1, #2
10011978:	d102      	bne.n	10011980 <gapc_bond_req_ind+0x48>
1001197a:	70d3      	strb	r3, [r2, #3]
1001197c:	200c      	movs	r0, #12
1001197e:	e03f      	b.n	10011a00 <gapc_bond_req_ind+0xc8>
10011980:	2901      	cmp	r1, #1
10011982:	d1fb      	bne.n	1001197c <gapc_bond_req_ind+0x44>
10011984:	70d1      	strb	r1, [r2, #3]
10011986:	e7f9      	b.n	1001197c <gapc_bond_req_ind+0x44>
10011988:	2214      	movs	r2, #20
1001198a:	481e      	ldr	r0, [pc, #120]	; (10011a04 <gapc_bond_req_ind+0xcc>)
1001198c:	0a1b      	lsrs	r3, r3, #8
1001198e:	70c3      	strb	r3, [r0, #3]
10011990:	4b1d      	ldr	r3, [pc, #116]	; (10011a08 <gapc_bond_req_ind+0xd0>)
10011992:	7002      	strb	r2, [r0, #0]
10011994:	3a06      	subs	r2, #6
10011996:	7042      	strb	r2, [r0, #1]
10011998:	7082      	strb	r2, [r0, #2]
1001199a:	881a      	ldrh	r2, [r3, #0]
1001199c:	881b      	ldrh	r3, [r3, #0]
1001199e:	4e1b      	ldr	r6, [pc, #108]	; (10011a0c <gapc_bond_req_ind+0xd4>)
100119a0:	0a1b      	lsrs	r3, r3, #8
100119a2:	7143      	strb	r3, [r0, #5]
100119a4:	2301      	movs	r3, #1
100119a6:	7102      	strb	r2, [r0, #4]
100119a8:	7204      	strb	r4, [r0, #8]
100119aa:	7243      	strb	r3, [r0, #9]
100119ac:	1c05      	adds	r5, r0, #0
100119ae:	1c31      	adds	r1, r6, #0
100119b0:	300a      	adds	r0, #10
100119b2:	2c07      	cmp	r4, #7
100119b4:	d116      	bne.n	100119e4 <gapc_bond_req_ind+0xac>
100119b6:	317e      	adds	r1, #126	; 0x7e
100119b8:	2210      	movs	r2, #16
100119ba:	4c15      	ldr	r4, [pc, #84]	; (10011a10 <gapc_bond_req_ind+0xd8>)
100119bc:	47a0      	blx	r4
100119be:	1c33      	adds	r3, r6, #0
100119c0:	1c31      	adds	r1, r6, #0
100119c2:	1c28      	adds	r0, r5, #0
100119c4:	338e      	adds	r3, #142	; 0x8e
100119c6:	881b      	ldrh	r3, [r3, #0]
100119c8:	3190      	adds	r1, #144	; 0x90
100119ca:	76ab      	strb	r3, [r5, #26]
100119cc:	2208      	movs	r2, #8
100119ce:	0a1b      	lsrs	r3, r3, #8
100119d0:	301c      	adds	r0, #28
100119d2:	76eb      	strb	r3, [r5, #27]
100119d4:	47a0      	blx	r4
100119d6:	1c31      	adds	r1, r6, #0
100119d8:	3198      	adds	r1, #152	; 0x98
100119da:	780a      	ldrb	r2, [r1, #0]
100119dc:	1d6b      	adds	r3, r5, #5
100119de:	77da      	strb	r2, [r3, #31]
100119e0:	2125      	movs	r1, #37	; 0x25
100119e2:	e004      	b.n	100119ee <gapc_bond_req_ind+0xb6>
100119e4:	319a      	adds	r1, #154	; 0x9a
100119e6:	2210      	movs	r2, #16
100119e8:	4b09      	ldr	r3, [pc, #36]	; (10011a10 <gapc_bond_req_ind+0xd8>)
100119ea:	4798      	blx	r3
100119ec:	211a      	movs	r1, #26
100119ee:	1c0b      	adds	r3, r1, #0
100119f0:	2400      	movs	r4, #0
100119f2:	3b08      	subs	r3, #8
100119f4:	71ab      	strb	r3, [r5, #6]
100119f6:	1c28      	adds	r0, r5, #0
100119f8:	4b06      	ldr	r3, [pc, #24]	; (10011a14 <gapc_bond_req_ind+0xdc>)
100119fa:	71ec      	strb	r4, [r5, #7]
100119fc:	4798      	blx	r3
100119fe:	2000      	movs	r0, #0
10011a00:	bd70      	pop	{r4, r5, r6, pc}
10011a02:	46c0      	nop			; (mov r8, r8)
10011a04:	1001ab10 	.word	0x1001ab10
10011a08:	1001a7a0 	.word	0x1001a7a0
10011a0c:	1001a832 	.word	0x1001a832
10011a10:	100149f3 	.word	0x100149f3
10011a14:	100112d9 	.word	0x100112d9

10011a18 <gapc_bond_cfm_handler_pair_resp>:
10011a18:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a1a:	b085      	sub	sp, #20
10011a1c:	1c07      	adds	r7, r0, #0
10011a1e:	a80a      	add	r0, sp, #40	; 0x28
10011a20:	7806      	ldrb	r6, [r0, #0]
10011a22:	a80b      	add	r0, sp, #44	; 0x2c
10011a24:	7805      	ldrb	r5, [r0, #0]
10011a26:	a80c      	add	r0, sp, #48	; 0x30
10011a28:	7800      	ldrb	r0, [r0, #0]
10011a2a:	2414      	movs	r4, #20
10011a2c:	9002      	str	r0, [sp, #8]
10011a2e:	a80d      	add	r0, sp, #52	; 0x34
10011a30:	7800      	ldrb	r0, [r0, #0]
10011a32:	9301      	str	r3, [sp, #4]
10011a34:	9003      	str	r0, [sp, #12]
10011a36:	a80e      	add	r0, sp, #56	; 0x38
10011a38:	8800      	ldrh	r0, [r0, #0]
10011a3a:	4684      	mov	ip, r0
10011a3c:	4812      	ldr	r0, [pc, #72]	; (10011a88 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011a3e:	7004      	strb	r4, [r0, #0]
10011a40:	3c06      	subs	r4, #6
10011a42:	7044      	strb	r4, [r0, #1]
10011a44:	7084      	strb	r4, [r0, #2]
10011a46:	4664      	mov	r4, ip
10011a48:	70c4      	strb	r4, [r0, #3]
10011a4a:	4c10      	ldr	r4, [pc, #64]	; (10011a8c <gapc_bond_cfm_handler_pair_resp+0x74>)
10011a4c:	7247      	strb	r7, [r0, #9]
10011a4e:	8823      	ldrh	r3, [r4, #0]
10011a50:	8824      	ldrh	r4, [r4, #0]
10011a52:	7103      	strb	r3, [r0, #4]
10011a54:	466b      	mov	r3, sp
10011a56:	791b      	ldrb	r3, [r3, #4]
10011a58:	0a24      	lsrs	r4, r4, #8
10011a5a:	7303      	strb	r3, [r0, #12]
10011a5c:	466b      	mov	r3, sp
10011a5e:	7a1b      	ldrb	r3, [r3, #8]
10011a60:	7144      	strb	r4, [r0, #5]
10011a62:	73c3      	strb	r3, [r0, #15]
10011a64:	466b      	mov	r3, sp
10011a66:	7b1b      	ldrb	r3, [r3, #12]
10011a68:	2401      	movs	r4, #1
10011a6a:	7403      	strb	r3, [r0, #16]
10011a6c:	2309      	movs	r3, #9
10011a6e:	7183      	strb	r3, [r0, #6]
10011a70:	2300      	movs	r3, #0
10011a72:	7204      	strb	r4, [r0, #8]
10011a74:	7281      	strb	r1, [r0, #10]
10011a76:	72c2      	strb	r2, [r0, #11]
10011a78:	7346      	strb	r6, [r0, #13]
10011a7a:	7385      	strb	r5, [r0, #14]
10011a7c:	71c3      	strb	r3, [r0, #7]
10011a7e:	2111      	movs	r1, #17
10011a80:	4b03      	ldr	r3, [pc, #12]	; (10011a90 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011a82:	4798      	blx	r3
10011a84:	b005      	add	sp, #20
10011a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a88:	1001ab10 	.word	0x1001ab10
10011a8c:	1001a7a0 	.word	0x1001a7a0
10011a90:	100112d9 	.word	0x100112d9

10011a94 <gapc_bond_cfm_handler_key_exch>:
10011a94:	b538      	push	{r3, r4, r5, lr}
10011a96:	2514      	movs	r5, #20
10011a98:	4c0d      	ldr	r4, [pc, #52]	; (10011ad0 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011a9a:	70e3      	strb	r3, [r4, #3]
10011a9c:	4b0d      	ldr	r3, [pc, #52]	; (10011ad4 <gapc_bond_cfm_handler_key_exch+0x40>)
10011a9e:	7025      	strb	r5, [r4, #0]
10011aa0:	3d06      	subs	r5, #6
10011aa2:	7065      	strb	r5, [r4, #1]
10011aa4:	70a5      	strb	r5, [r4, #2]
10011aa6:	881d      	ldrh	r5, [r3, #0]
10011aa8:	881b      	ldrh	r3, [r3, #0]
10011aaa:	7220      	strb	r0, [r4, #8]
10011aac:	0a1b      	lsrs	r3, r3, #8
10011aae:	7163      	strb	r3, [r4, #5]
10011ab0:	7261      	strb	r1, [r4, #9]
10011ab2:	4b09      	ldr	r3, [pc, #36]	; (10011ad8 <gapc_bond_cfm_handler_key_exch+0x44>)
10011ab4:	1c11      	adds	r1, r2, #0
10011ab6:	4809      	ldr	r0, [pc, #36]	; (10011adc <gapc_bond_cfm_handler_key_exch+0x48>)
10011ab8:	2210      	movs	r2, #16
10011aba:	7125      	strb	r5, [r4, #4]
10011abc:	4798      	blx	r3
10011abe:	2312      	movs	r3, #18
10011ac0:	71a3      	strb	r3, [r4, #6]
10011ac2:	2300      	movs	r3, #0
10011ac4:	1c20      	adds	r0, r4, #0
10011ac6:	71e3      	strb	r3, [r4, #7]
10011ac8:	211a      	movs	r1, #26
10011aca:	4b05      	ldr	r3, [pc, #20]	; (10011ae0 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011acc:	4798      	blx	r3
10011ace:	bd38      	pop	{r3, r4, r5, pc}
10011ad0:	1001ab10 	.word	0x1001ab10
10011ad4:	1001a7a0 	.word	0x1001a7a0
10011ad8:	100149f3 	.word	0x100149f3
10011adc:	1001ab1a 	.word	0x1001ab1a
10011ae0:	100112d9 	.word	0x100112d9

10011ae4 <gapc_security_cmd_handler>:
10011ae4:	221a      	movs	r2, #26
10011ae6:	b508      	push	{r3, lr}
10011ae8:	4b0b      	ldr	r3, [pc, #44]	; (10011b18 <gapc_security_cmd_handler+0x34>)
10011aea:	701a      	strb	r2, [r3, #0]
10011aec:	3a0c      	subs	r2, #12
10011aee:	705a      	strb	r2, [r3, #1]
10011af0:	709a      	strb	r2, [r3, #2]
10011af2:	4a0a      	ldr	r2, [pc, #40]	; (10011b1c <gapc_security_cmd_handler+0x38>)
10011af4:	70d8      	strb	r0, [r3, #3]
10011af6:	8810      	ldrh	r0, [r2, #0]
10011af8:	8812      	ldrh	r2, [r2, #0]
10011afa:	7118      	strb	r0, [r3, #4]
10011afc:	0a12      	lsrs	r2, r2, #8
10011afe:	715a      	strb	r2, [r3, #5]
10011b00:	220c      	movs	r2, #12
10011b02:	721a      	strb	r2, [r3, #8]
10011b04:	3a0a      	subs	r2, #10
10011b06:	719a      	strb	r2, [r3, #6]
10011b08:	2200      	movs	r2, #0
10011b0a:	7259      	strb	r1, [r3, #9]
10011b0c:	71da      	strb	r2, [r3, #7]
10011b0e:	1c18      	adds	r0, r3, #0
10011b10:	210a      	movs	r1, #10
10011b12:	4b03      	ldr	r3, [pc, #12]	; (10011b20 <gapc_security_cmd_handler+0x3c>)
10011b14:	4798      	blx	r3
10011b16:	bd08      	pop	{r3, pc}
10011b18:	1001ab10 	.word	0x1001ab10
10011b1c:	1001a7a0 	.word	0x1001a7a0
10011b20:	100112d9 	.word	0x100112d9

10011b24 <gapc_encrypt_cmd_handler>:
10011b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b26:	2500      	movs	r5, #0
10011b28:	b089      	sub	sp, #36	; 0x24
10011b2a:	9306      	str	r3, [sp, #24]
10011b2c:	ab0e      	add	r3, sp, #56	; 0x38
10011b2e:	781b      	ldrb	r3, [r3, #0]
10011b30:	1c17      	adds	r7, r2, #0
10011b32:	9307      	str	r3, [sp, #28]
10011b34:	ab0f      	add	r3, sp, #60	; 0x3c
10011b36:	781b      	ldrb	r3, [r3, #0]
10011b38:	4a19      	ldr	r2, [pc, #100]	; (10011ba0 <gapc_encrypt_cmd_handler+0x7c>)
10011b3a:	1c06      	adds	r6, r0, #0
10011b3c:	9105      	str	r1, [sp, #20]
10011b3e:	9300      	str	r3, [sp, #0]
10011b40:	9002      	str	r0, [sp, #8]
10011b42:	1c29      	adds	r1, r5, #0
10011b44:	1c2b      	adds	r3, r5, #0
10011b46:	9501      	str	r5, [sp, #4]
10011b48:	1c10      	adds	r0, r2, #0
10011b4a:	4c16      	ldr	r4, [pc, #88]	; (10011ba4 <gapc_encrypt_cmd_handler+0x80>)
10011b4c:	47a0      	blx	r4
10011b4e:	2316      	movs	r3, #22
10011b50:	4c15      	ldr	r4, [pc, #84]	; (10011ba8 <gapc_encrypt_cmd_handler+0x84>)
10011b52:	9905      	ldr	r1, [sp, #20]
10011b54:	7023      	strb	r3, [r4, #0]
10011b56:	3b08      	subs	r3, #8
10011b58:	7063      	strb	r3, [r4, #1]
10011b5a:	70a3      	strb	r3, [r4, #2]
10011b5c:	4b13      	ldr	r3, [pc, #76]	; (10011bac <gapc_encrypt_cmd_handler+0x88>)
10011b5e:	70e6      	strb	r6, [r4, #3]
10011b60:	881a      	ldrh	r2, [r3, #0]
10011b62:	881b      	ldrh	r3, [r3, #0]
10011b64:	7122      	strb	r2, [r4, #4]
10011b66:	0a1b      	lsrs	r3, r3, #8
10011b68:	7163      	strb	r3, [r4, #5]
10011b6a:	230b      	movs	r3, #11
10011b6c:	4e10      	ldr	r6, [pc, #64]	; (10011bb0 <gapc_encrypt_cmd_handler+0x8c>)
10011b6e:	2210      	movs	r2, #16
10011b70:	4810      	ldr	r0, [pc, #64]	; (10011bb4 <gapc_encrypt_cmd_handler+0x90>)
10011b72:	7223      	strb	r3, [r4, #8]
10011b74:	7265      	strb	r5, [r4, #9]
10011b76:	47b0      	blx	r6
10011b78:	0a3b      	lsrs	r3, r7, #8
10011b7a:	9906      	ldr	r1, [sp, #24]
10011b7c:	2208      	movs	r2, #8
10011b7e:	480e      	ldr	r0, [pc, #56]	; (10011bb8 <gapc_encrypt_cmd_handler+0x94>)
10011b80:	76e3      	strb	r3, [r4, #27]
10011b82:	76a7      	strb	r7, [r4, #26]
10011b84:	47b0      	blx	r6
10011b86:	466a      	mov	r2, sp
10011b88:	7f12      	ldrb	r2, [r2, #28]
10011b8a:	1d63      	adds	r3, r4, #5
10011b8c:	77da      	strb	r2, [r3, #31]
10011b8e:	231d      	movs	r3, #29
10011b90:	1c20      	adds	r0, r4, #0
10011b92:	71a3      	strb	r3, [r4, #6]
10011b94:	2125      	movs	r1, #37	; 0x25
10011b96:	4b09      	ldr	r3, [pc, #36]	; (10011bbc <gapc_encrypt_cmd_handler+0x98>)
10011b98:	71e5      	strb	r5, [r4, #7]
10011b9a:	4798      	blx	r3
10011b9c:	b009      	add	sp, #36	; 0x24
10011b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ba0:	100198d0 	.word	0x100198d0
10011ba4:	100115dd 	.word	0x100115dd
10011ba8:	1001ab10 	.word	0x1001ab10
10011bac:	1001a7a0 	.word	0x1001a7a0
10011bb0:	100149f3 	.word	0x100149f3
10011bb4:	1001ab1a 	.word	0x1001ab1a
10011bb8:	1001ab2c 	.word	0x1001ab2c
10011bbc:	100112d9 	.word	0x100112d9

10011bc0 <gapc_encrypt_req_ind>:
10011bc0:	b508      	push	{r3, lr}
10011bc2:	0a00      	lsrs	r0, r0, #8
10011bc4:	8010      	strh	r0, [r2, #0]
10011bc6:	784b      	ldrb	r3, [r1, #1]
10011bc8:	7808      	ldrb	r0, [r1, #0]
10011bca:	021b      	lsls	r3, r3, #8
10011bcc:	4303      	orrs	r3, r0
10011bce:	8053      	strh	r3, [r2, #2]
10011bd0:	1d10      	adds	r0, r2, #4
10011bd2:	3102      	adds	r1, #2
10011bd4:	2208      	movs	r2, #8
10011bd6:	4b01      	ldr	r3, [pc, #4]	; (10011bdc <gapc_encrypt_req_ind+0x1c>)
10011bd8:	4798      	blx	r3
10011bda:	bd08      	pop	{r3, pc}
10011bdc:	100149f3 	.word	0x100149f3

10011be0 <gapc_encrypt_cfm_handler>:
10011be0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011be2:	2500      	movs	r5, #0
10011be4:	b087      	sub	sp, #28
10011be6:	9304      	str	r3, [sp, #16]
10011be8:	ab0c      	add	r3, sp, #48	; 0x30
10011bea:	781b      	ldrb	r3, [r3, #0]
10011bec:	1c17      	adds	r7, r2, #0
10011bee:	4a15      	ldr	r2, [pc, #84]	; (10011c44 <gapc_encrypt_cfm_handler+0x64>)
10011bf0:	1c06      	adds	r6, r0, #0
10011bf2:	9305      	str	r3, [sp, #20]
10011bf4:	9100      	str	r1, [sp, #0]
10011bf6:	9002      	str	r0, [sp, #8]
10011bf8:	1c29      	adds	r1, r5, #0
10011bfa:	1c2b      	adds	r3, r5, #0
10011bfc:	9501      	str	r5, [sp, #4]
10011bfe:	1c10      	adds	r0, r2, #0
10011c00:	4c11      	ldr	r4, [pc, #68]	; (10011c48 <gapc_encrypt_cfm_handler+0x68>)
10011c02:	47a0      	blx	r4
10011c04:	2318      	movs	r3, #24
10011c06:	4c11      	ldr	r4, [pc, #68]	; (10011c4c <gapc_encrypt_cfm_handler+0x6c>)
10011c08:	9904      	ldr	r1, [sp, #16]
10011c0a:	7023      	strb	r3, [r4, #0]
10011c0c:	3b0a      	subs	r3, #10
10011c0e:	7063      	strb	r3, [r4, #1]
10011c10:	70a3      	strb	r3, [r4, #2]
10011c12:	4b0f      	ldr	r3, [pc, #60]	; (10011c50 <gapc_encrypt_cfm_handler+0x70>)
10011c14:	480f      	ldr	r0, [pc, #60]	; (10011c54 <gapc_encrypt_cfm_handler+0x74>)
10011c16:	881a      	ldrh	r2, [r3, #0]
10011c18:	881b      	ldrh	r3, [r3, #0]
10011c1a:	7122      	strb	r2, [r4, #4]
10011c1c:	0a1b      	lsrs	r3, r3, #8
10011c1e:	7163      	strb	r3, [r4, #5]
10011c20:	2210      	movs	r2, #16
10011c22:	4b0d      	ldr	r3, [pc, #52]	; (10011c58 <gapc_encrypt_cfm_handler+0x78>)
10011c24:	70e6      	strb	r6, [r4, #3]
10011c26:	7227      	strb	r7, [r4, #8]
10011c28:	4798      	blx	r3
10011c2a:	466b      	mov	r3, sp
10011c2c:	7d1b      	ldrb	r3, [r3, #20]
10011c2e:	1c20      	adds	r0, r4, #0
10011c30:	7663      	strb	r3, [r4, #25]
10011c32:	2312      	movs	r3, #18
10011c34:	211a      	movs	r1, #26
10011c36:	71a3      	strb	r3, [r4, #6]
10011c38:	4b08      	ldr	r3, [pc, #32]	; (10011c5c <gapc_encrypt_cfm_handler+0x7c>)
10011c3a:	71e5      	strb	r5, [r4, #7]
10011c3c:	4798      	blx	r3
10011c3e:	b007      	add	sp, #28
10011c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c42:	46c0      	nop			; (mov r8, r8)
10011c44:	100198e0 	.word	0x100198e0
10011c48:	100115dd 	.word	0x100115dd
10011c4c:	1001ab10 	.word	0x1001ab10
10011c50:	1001a7a0 	.word	0x1001a7a0
10011c54:	1001ab19 	.word	0x1001ab19
10011c58:	100149f3 	.word	0x100149f3
10011c5c:	100112d9 	.word	0x100112d9

10011c60 <gapc_encrypt_ind>:
10011c60:	780b      	ldrb	r3, [r1, #0]
10011c62:	0a00      	lsrs	r0, r0, #8
10011c64:	70d3      	strb	r3, [r2, #3]
10011c66:	2300      	movs	r3, #0
10011c68:	8010      	strh	r0, [r2, #0]
10011c6a:	7093      	strb	r3, [r2, #2]
10011c6c:	4770      	bx	lr
	...

10011c70 <gapc_param_update_cfm_handler>:
10011c70:	b538      	push	{r3, r4, r5, lr}
10011c72:	2410      	movs	r4, #16
10011c74:	1c05      	adds	r5, r0, #0
10011c76:	480e      	ldr	r0, [pc, #56]	; (10011cb0 <gapc_param_update_cfm_handler+0x40>)
10011c78:	7004      	strb	r4, [r0, #0]
10011c7a:	3c02      	subs	r4, #2
10011c7c:	7044      	strb	r4, [r0, #1]
10011c7e:	7084      	strb	r4, [r0, #2]
10011c80:	4c0c      	ldr	r4, [pc, #48]	; (10011cb4 <gapc_param_update_cfm_handler+0x44>)
10011c82:	70c5      	strb	r5, [r0, #3]
10011c84:	8825      	ldrh	r5, [r4, #0]
10011c86:	8824      	ldrh	r4, [r4, #0]
10011c88:	72c3      	strb	r3, [r0, #11]
10011c8a:	0a1b      	lsrs	r3, r3, #8
10011c8c:	0a24      	lsrs	r4, r4, #8
10011c8e:	7303      	strb	r3, [r0, #12]
10011c90:	2305      	movs	r3, #5
10011c92:	7144      	strb	r4, [r0, #5]
10011c94:	2400      	movs	r4, #0
10011c96:	7201      	strb	r1, [r0, #8]
10011c98:	7242      	strb	r2, [r0, #9]
10011c9a:	7183      	strb	r3, [r0, #6]
10011c9c:	0a12      	lsrs	r2, r2, #8
10011c9e:	210d      	movs	r1, #13
10011ca0:	4b05      	ldr	r3, [pc, #20]	; (10011cb8 <gapc_param_update_cfm_handler+0x48>)
10011ca2:	7105      	strb	r5, [r0, #4]
10011ca4:	7282      	strb	r2, [r0, #10]
10011ca6:	71c4      	strb	r4, [r0, #7]
10011ca8:	4798      	blx	r3
10011caa:	1c20      	adds	r0, r4, #0
10011cac:	bd38      	pop	{r3, r4, r5, pc}
10011cae:	46c0      	nop			; (mov r8, r8)
10011cb0:	1001ab10 	.word	0x1001ab10
10011cb4:	1001a7a0 	.word	0x1001a7a0
10011cb8:	100112d9 	.word	0x100112d9

10011cbc <gapc_param_updated_ind>:
10011cbc:	2300      	movs	r3, #0
10011cbe:	0a00      	lsrs	r0, r0, #8
10011cc0:	8010      	strh	r0, [r2, #0]
10011cc2:	7093      	strb	r3, [r2, #2]
10011cc4:	784b      	ldrb	r3, [r1, #1]
10011cc6:	7808      	ldrb	r0, [r1, #0]
10011cc8:	021b      	lsls	r3, r3, #8
10011cca:	4303      	orrs	r3, r0
10011ccc:	8093      	strh	r3, [r2, #4]
10011cce:	78cb      	ldrb	r3, [r1, #3]
10011cd0:	7888      	ldrb	r0, [r1, #2]
10011cd2:	021b      	lsls	r3, r3, #8
10011cd4:	4303      	orrs	r3, r0
10011cd6:	80d3      	strh	r3, [r2, #6]
10011cd8:	794b      	ldrb	r3, [r1, #5]
10011cda:	7909      	ldrb	r1, [r1, #4]
10011cdc:	021b      	lsls	r3, r3, #8
10011cde:	430b      	orrs	r3, r1
10011ce0:	2007      	movs	r0, #7
10011ce2:	8113      	strh	r3, [r2, #8]
10011ce4:	4770      	bx	lr

10011ce6 <gapc_param_updated_req_ind>:
10011ce6:	0a00      	lsrs	r0, r0, #8
10011ce8:	8010      	strh	r0, [r2, #0]
10011cea:	784b      	ldrb	r3, [r1, #1]
10011cec:	7808      	ldrb	r0, [r1, #0]
10011cee:	021b      	lsls	r3, r3, #8
10011cf0:	4303      	orrs	r3, r0
10011cf2:	8053      	strh	r3, [r2, #2]
10011cf4:	78cb      	ldrb	r3, [r1, #3]
10011cf6:	7888      	ldrb	r0, [r1, #2]
10011cf8:	021b      	lsls	r3, r3, #8
10011cfa:	4303      	orrs	r3, r0
10011cfc:	8093      	strh	r3, [r2, #4]
10011cfe:	794b      	ldrb	r3, [r1, #5]
10011d00:	7908      	ldrb	r0, [r1, #4]
10011d02:	021b      	lsls	r3, r3, #8
10011d04:	4303      	orrs	r3, r0
10011d06:	80d3      	strh	r3, [r2, #6]
10011d08:	79cb      	ldrb	r3, [r1, #7]
10011d0a:	7989      	ldrb	r1, [r1, #6]
10011d0c:	021b      	lsls	r3, r3, #8
10011d0e:	430b      	orrs	r3, r1
10011d10:	2008      	movs	r0, #8
10011d12:	8113      	strh	r3, [r2, #8]
10011d14:	4770      	bx	lr
	...

10011d18 <gapc_dev_info_req_ind_handler>:
10011d18:	b508      	push	{r3, lr}
10011d1a:	1c0b      	adds	r3, r1, #0
10011d1c:	0a01      	lsrs	r1, r0, #8
10011d1e:	8011      	strh	r1, [r2, #0]
10011d20:	7818      	ldrb	r0, [r3, #0]
10011d22:	7090      	strb	r0, [r2, #2]
10011d24:	2800      	cmp	r0, #0
10011d26:	d104      	bne.n	10011d32 <gapc_dev_info_req_ind_handler+0x1a>
10011d28:	4b03      	ldr	r3, [pc, #12]	; (10011d38 <gapc_dev_info_req_ind_handler+0x20>)
10011d2a:	33aa      	adds	r3, #170	; 0xaa
10011d2c:	881b      	ldrh	r3, [r3, #0]
10011d2e:	2b00      	cmp	r3, #0
10011d30:	d001      	beq.n	10011d36 <gapc_dev_info_req_ind_handler+0x1e>
10011d32:	4b02      	ldr	r3, [pc, #8]	; (10011d3c <gapc_dev_info_req_ind_handler+0x24>)
10011d34:	4798      	blx	r3
10011d36:	bd08      	pop	{r3, pc}
10011d38:	1001a832 	.word	0x1001a832
10011d3c:	100113e9 	.word	0x100113e9

10011d40 <gapc_sec_req_ind>:
10011d40:	0a00      	lsrs	r0, r0, #8
10011d42:	8010      	strh	r0, [r2, #0]
10011d44:	7809      	ldrb	r1, [r1, #0]
10011d46:	2301      	movs	r3, #1
10011d48:	1c08      	adds	r0, r1, #0
10011d4a:	0889      	lsrs	r1, r1, #2
10011d4c:	4018      	ands	r0, r3
10011d4e:	400b      	ands	r3, r1
10011d50:	70d0      	strb	r0, [r2, #3]
10011d52:	7113      	strb	r3, [r2, #4]
10011d54:	4770      	bx	lr

10011d56 <gapc_sign_counter_ind_handler>:
10011d56:	0a00      	lsrs	r0, r0, #8
10011d58:	8010      	strh	r0, [r2, #0]
10011d5a:	784b      	ldrb	r3, [r1, #1]
10011d5c:	0218      	lsls	r0, r3, #8
10011d5e:	788b      	ldrb	r3, [r1, #2]
10011d60:	041b      	lsls	r3, r3, #16
10011d62:	4303      	orrs	r3, r0
10011d64:	7808      	ldrb	r0, [r1, #0]
10011d66:	4303      	orrs	r3, r0
10011d68:	78c8      	ldrb	r0, [r1, #3]
10011d6a:	0600      	lsls	r0, r0, #24
10011d6c:	4303      	orrs	r3, r0
10011d6e:	6053      	str	r3, [r2, #4]
10011d70:	794b      	ldrb	r3, [r1, #5]
10011d72:	0218      	lsls	r0, r3, #8
10011d74:	798b      	ldrb	r3, [r1, #6]
10011d76:	041b      	lsls	r3, r3, #16
10011d78:	4303      	orrs	r3, r0
10011d7a:	7908      	ldrb	r0, [r1, #4]
10011d7c:	79c9      	ldrb	r1, [r1, #7]
10011d7e:	4303      	orrs	r3, r0
10011d80:	0609      	lsls	r1, r1, #24
10011d82:	430b      	orrs	r3, r1
10011d84:	2000      	movs	r0, #0
10011d86:	6093      	str	r3, [r2, #8]
10011d88:	4770      	bx	lr
	...

10011d8c <gapc_peer_att_info_ind_handler>:
10011d8c:	b510      	push	{r4, lr}
10011d8e:	0a00      	lsrs	r0, r0, #8
10011d90:	8010      	strh	r0, [r2, #0]
10011d92:	7808      	ldrb	r0, [r1, #0]
10011d94:	7090      	strb	r0, [r2, #2]
10011d96:	788b      	ldrb	r3, [r1, #2]
10011d98:	784c      	ldrb	r4, [r1, #1]
10011d9a:	021b      	lsls	r3, r3, #8
10011d9c:	4323      	orrs	r3, r4
10011d9e:	8093      	strh	r3, [r2, #4]
10011da0:	2801      	cmp	r0, #1
10011da2:	d027      	beq.n	10011df4 <gapc_peer_att_info_ind_handler+0x68>
10011da4:	2800      	cmp	r0, #0
10011da6:	d017      	beq.n	10011dd8 <gapc_peer_att_info_ind_handler+0x4c>
10011da8:	2802      	cmp	r0, #2
10011daa:	d12a      	bne.n	10011e02 <gapc_peer_att_info_ind_handler+0x76>
10011dac:	790b      	ldrb	r3, [r1, #4]
10011dae:	78c8      	ldrb	r0, [r1, #3]
10011db0:	021b      	lsls	r3, r3, #8
10011db2:	4303      	orrs	r3, r0
10011db4:	8113      	strh	r3, [r2, #8]
10011db6:	798b      	ldrb	r3, [r1, #6]
10011db8:	7948      	ldrb	r0, [r1, #5]
10011dba:	021b      	lsls	r3, r3, #8
10011dbc:	4303      	orrs	r3, r0
10011dbe:	80d3      	strh	r3, [r2, #6]
10011dc0:	7a0b      	ldrb	r3, [r1, #8]
10011dc2:	79c8      	ldrb	r0, [r1, #7]
10011dc4:	021b      	lsls	r3, r3, #8
10011dc6:	4303      	orrs	r3, r0
10011dc8:	8193      	strh	r3, [r2, #12]
10011dca:	7a8b      	ldrb	r3, [r1, #10]
10011dcc:	7a49      	ldrb	r1, [r1, #9]
10011dce:	021b      	lsls	r3, r3, #8
10011dd0:	430b      	orrs	r3, r1
10011dd2:	8153      	strh	r3, [r2, #10]
10011dd4:	2306      	movs	r3, #6
10011dd6:	e013      	b.n	10011e00 <gapc_peer_att_info_ind_handler+0x74>
10011dd8:	1c14      	adds	r4, r2, #0
10011dda:	1c20      	adds	r0, r4, #0
10011ddc:	790a      	ldrb	r2, [r1, #4]
10011dde:	78cb      	ldrb	r3, [r1, #3]
10011de0:	0212      	lsls	r2, r2, #8
10011de2:	431a      	orrs	r2, r3
10011de4:	80e2      	strh	r2, [r4, #6]
10011de6:	4b07      	ldr	r3, [pc, #28]	; (10011e04 <gapc_peer_att_info_ind_handler+0x78>)
10011de8:	3008      	adds	r0, #8
10011dea:	3105      	adds	r1, #5
10011dec:	4798      	blx	r3
10011dee:	2302      	movs	r3, #2
10011df0:	70a3      	strb	r3, [r4, #2]
10011df2:	e006      	b.n	10011e02 <gapc_peer_att_info_ind_handler+0x76>
10011df4:	790b      	ldrb	r3, [r1, #4]
10011df6:	78c9      	ldrb	r1, [r1, #3]
10011df8:	021b      	lsls	r3, r3, #8
10011dfa:	430b      	orrs	r3, r1
10011dfc:	80d3      	strh	r3, [r2, #6]
10011dfe:	2305      	movs	r3, #5
10011e00:	7093      	strb	r3, [r2, #2]
10011e02:	bd10      	pop	{r4, pc}
10011e04:	100149f3 	.word	0x100149f3

10011e08 <gapc_con_channel_map_ind_handler>:
10011e08:	b508      	push	{r3, lr}
10011e0a:	2300      	movs	r3, #0
10011e0c:	0a00      	lsrs	r0, r0, #8
10011e0e:	7013      	strb	r3, [r2, #0]
10011e10:	8050      	strh	r0, [r2, #2]
10011e12:	4b02      	ldr	r3, [pc, #8]	; (10011e1c <gapc_con_channel_map_ind_handler+0x14>)
10011e14:	1d10      	adds	r0, r2, #4
10011e16:	2205      	movs	r2, #5
10011e18:	4798      	blx	r3
10011e1a:	bd08      	pop	{r3, pc}
10011e1c:	100149f3 	.word	0x100149f3

10011e20 <gapc_lecb_connected>:
10011e20:	7843      	ldrb	r3, [r0, #1]
10011e22:	7802      	ldrb	r2, [r0, #0]
10011e24:	021b      	lsls	r3, r3, #8
10011e26:	4313      	orrs	r3, r2
10011e28:	800b      	strh	r3, [r1, #0]
10011e2a:	78c3      	ldrb	r3, [r0, #3]
10011e2c:	7882      	ldrb	r2, [r0, #2]
10011e2e:	021b      	lsls	r3, r3, #8
10011e30:	4313      	orrs	r3, r2
10011e32:	804b      	strh	r3, [r1, #2]
10011e34:	7943      	ldrb	r3, [r0, #5]
10011e36:	7902      	ldrb	r2, [r0, #4]
10011e38:	021b      	lsls	r3, r3, #8
10011e3a:	4313      	orrs	r3, r2
10011e3c:	808b      	strh	r3, [r1, #4]
10011e3e:	79c3      	ldrb	r3, [r0, #7]
10011e40:	7982      	ldrb	r2, [r0, #6]
10011e42:	021b      	lsls	r3, r3, #8
10011e44:	4313      	orrs	r3, r2
10011e46:	80cb      	strh	r3, [r1, #6]
10011e48:	2300      	movs	r3, #0
10011e4a:	720b      	strb	r3, [r1, #8]
10011e4c:	4770      	bx	lr

10011e4e <gapc_lecb_disconnected>:
10011e4e:	7843      	ldrb	r3, [r0, #1]
10011e50:	7802      	ldrb	r2, [r0, #0]
10011e52:	021b      	lsls	r3, r3, #8
10011e54:	4313      	orrs	r3, r2
10011e56:	800b      	strh	r3, [r1, #0]
10011e58:	78c3      	ldrb	r3, [r0, #3]
10011e5a:	7882      	ldrb	r2, [r0, #2]
10011e5c:	021b      	lsls	r3, r3, #8
10011e5e:	4313      	orrs	r3, r2
10011e60:	804b      	strh	r3, [r1, #2]
10011e62:	4770      	bx	lr

10011e64 <gapc_lecb_connect_req_ind>:
10011e64:	7843      	ldrb	r3, [r0, #1]
10011e66:	7802      	ldrb	r2, [r0, #0]
10011e68:	021b      	lsls	r3, r3, #8
10011e6a:	4313      	orrs	r3, r2
10011e6c:	800b      	strh	r3, [r1, #0]
10011e6e:	78c3      	ldrb	r3, [r0, #3]
10011e70:	7882      	ldrb	r2, [r0, #2]
10011e72:	021b      	lsls	r3, r3, #8
10011e74:	4313      	orrs	r3, r2
10011e76:	804b      	strh	r3, [r1, #2]
10011e78:	7943      	ldrb	r3, [r0, #5]
10011e7a:	7902      	ldrb	r2, [r0, #4]
10011e7c:	021b      	lsls	r3, r3, #8
10011e7e:	4313      	orrs	r3, r2
10011e80:	808b      	strh	r3, [r1, #4]
10011e82:	79c3      	ldrb	r3, [r0, #7]
10011e84:	7982      	ldrb	r2, [r0, #6]
10011e86:	021b      	lsls	r3, r3, #8
10011e88:	4313      	orrs	r3, r2
10011e8a:	80cb      	strh	r3, [r1, #6]
10011e8c:	4770      	bx	lr

10011e8e <gapc_lecb_add_credit_resp_handler>:
10011e8e:	7843      	ldrb	r3, [r0, #1]
10011e90:	7802      	ldrb	r2, [r0, #0]
10011e92:	021b      	lsls	r3, r3, #8
10011e94:	4313      	orrs	r3, r2
10011e96:	800b      	strh	r3, [r1, #0]
10011e98:	78c3      	ldrb	r3, [r0, #3]
10011e9a:	7882      	ldrb	r2, [r0, #2]
10011e9c:	021b      	lsls	r3, r3, #8
10011e9e:	4313      	orrs	r3, r2
10011ea0:	804b      	strh	r3, [r1, #2]
10011ea2:	7943      	ldrb	r3, [r0, #5]
10011ea4:	7902      	ldrb	r2, [r0, #4]
10011ea6:	021b      	lsls	r3, r3, #8
10011ea8:	4313      	orrs	r3, r2
10011eaa:	808b      	strh	r3, [r1, #4]
10011eac:	4770      	bx	lr
	...

10011eb0 <gapm_reset_req_handler>:
10011eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011eb2:	466b      	mov	r3, sp
10011eb4:	4915      	ldr	r1, [pc, #84]	; (10011f0c <gapm_reset_req_handler+0x5c>)
10011eb6:	4816      	ldr	r0, [pc, #88]	; (10011f10 <gapm_reset_req_handler+0x60>)
10011eb8:	880c      	ldrh	r4, [r1, #0]
10011eba:	8809      	ldrh	r1, [r1, #0]
10011ebc:	1ddd      	adds	r5, r3, #7
10011ebe:	0a09      	lsrs	r1, r1, #8
10011ec0:	2300      	movs	r3, #0
10011ec2:	2202      	movs	r2, #2
10011ec4:	7141      	strb	r1, [r0, #5]
10011ec6:	26d0      	movs	r6, #208	; 0xd0
10011ec8:	2101      	movs	r1, #1
10011eca:	7104      	strb	r4, [r0, #4]
10011ecc:	4c11      	ldr	r4, [pc, #68]	; (10011f14 <gapm_reset_req_handler+0x64>)
10011ece:	702b      	strb	r3, [r5, #0]
10011ed0:	7002      	strb	r2, [r0, #0]
10011ed2:	70c3      	strb	r3, [r0, #3]
10011ed4:	320b      	adds	r2, #11
10011ed6:	7201      	strb	r1, [r0, #8]
10011ed8:	7181      	strb	r1, [r0, #6]
10011eda:	71c3      	strb	r3, [r0, #7]
10011edc:	3108      	adds	r1, #8
10011ede:	4b0e      	ldr	r3, [pc, #56]	; (10011f18 <gapm_reset_req_handler+0x68>)
10011ee0:	0136      	lsls	r6, r6, #4
10011ee2:	7042      	strb	r2, [r0, #1]
10011ee4:	7082      	strb	r2, [r0, #2]
10011ee6:	80a2      	strh	r2, [r4, #4]
10011ee8:	8026      	strh	r6, [r4, #0]
10011eea:	4798      	blx	r3
10011eec:	1c28      	adds	r0, r5, #0
10011eee:	4b0b      	ldr	r3, [pc, #44]	; (10011f1c <gapm_reset_req_handler+0x6c>)
10011ef0:	4798      	blx	r3
10011ef2:	782b      	ldrb	r3, [r5, #0]
10011ef4:	20e2      	movs	r0, #226	; 0xe2
10011ef6:	2b00      	cmp	r3, #0
10011ef8:	d106      	bne.n	10011f08 <gapm_reset_req_handler+0x58>
10011efa:	68a3      	ldr	r3, [r4, #8]
10011efc:	20e2      	movs	r0, #226	; 0xe2
10011efe:	781a      	ldrb	r2, [r3, #0]
10011f00:	785b      	ldrb	r3, [r3, #1]
10011f02:	2a01      	cmp	r2, #1
10011f04:	d100      	bne.n	10011f08 <gapm_reset_req_handler+0x58>
10011f06:	1c18      	adds	r0, r3, #0
10011f08:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10011f0a:	46c0      	nop			; (mov r8, r8)
10011f0c:	1001a7a0 	.word	0x1001a7a0
10011f10:	1001ab10 	.word	0x1001ab10
10011f14:	1001a794 	.word	0x1001a794
10011f18:	100112d9 	.word	0x100112d9
10011f1c:	1001133d 	.word	0x1001133d

10011f20 <gapm_set_dev_config_cmd_handler>:
10011f20:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f22:	b089      	sub	sp, #36	; 0x24
10011f24:	9303      	str	r3, [sp, #12]
10011f26:	ab0e      	add	r3, sp, #56	; 0x38
10011f28:	781b      	ldrb	r3, [r3, #0]
10011f2a:	4c37      	ldr	r4, [pc, #220]	; (10012008 <gapm_set_dev_config_cmd_handler+0xe8>)
10011f2c:	9304      	str	r3, [sp, #16]
10011f2e:	ab0f      	add	r3, sp, #60	; 0x3c
10011f30:	781b      	ldrb	r3, [r3, #0]
10011f32:	270d      	movs	r7, #13
10011f34:	9305      	str	r3, [sp, #20]
10011f36:	ab10      	add	r3, sp, #64	; 0x40
10011f38:	881b      	ldrh	r3, [r3, #0]
10011f3a:	72a1      	strb	r1, [r4, #10]
10011f3c:	9300      	str	r3, [sp, #0]
10011f3e:	ab11      	add	r3, sp, #68	; 0x44
10011f40:	881b      	ldrh	r3, [r3, #0]
10011f42:	0a09      	lsrs	r1, r1, #8
10011f44:	9301      	str	r3, [sp, #4]
10011f46:	ab12      	add	r3, sp, #72	; 0x48
10011f48:	881b      	ldrh	r3, [r3, #0]
10011f4a:	7260      	strb	r0, [r4, #9]
10011f4c:	9302      	str	r3, [sp, #8]
10011f4e:	ab06      	add	r3, sp, #24
10011f50:	1dde      	adds	r6, r3, #7
10011f52:	2300      	movs	r3, #0
10011f54:	7033      	strb	r3, [r6, #0]
10011f56:	2304      	movs	r3, #4
10011f58:	7023      	strb	r3, [r4, #0]
10011f5a:	2300      	movs	r3, #0
10011f5c:	70e3      	strb	r3, [r4, #3]
10011f5e:	4b2b      	ldr	r3, [pc, #172]	; (1001200c <gapm_set_dev_config_cmd_handler+0xec>)
10011f60:	72e1      	strb	r1, [r4, #11]
10011f62:	881d      	ldrh	r5, [r3, #0]
10011f64:	881b      	ldrh	r3, [r3, #0]
10011f66:	1c11      	adds	r1, r2, #0
10011f68:	0a1b      	lsrs	r3, r3, #8
10011f6a:	7163      	strb	r3, [r4, #5]
10011f6c:	2303      	movs	r3, #3
10011f6e:	7125      	strb	r5, [r4, #4]
10011f70:	2206      	movs	r2, #6
10011f72:	4d27      	ldr	r5, [pc, #156]	; (10012010 <gapm_set_dev_config_cmd_handler+0xf0>)
10011f74:	4827      	ldr	r0, [pc, #156]	; (10012014 <gapm_set_dev_config_cmd_handler+0xf4>)
10011f76:	7223      	strb	r3, [r4, #8]
10011f78:	7067      	strb	r7, [r4, #1]
10011f7a:	70a7      	strb	r7, [r4, #2]
10011f7c:	47a8      	blx	r5
10011f7e:	9903      	ldr	r1, [sp, #12]
10011f80:	2210      	movs	r2, #16
10011f82:	4825      	ldr	r0, [pc, #148]	; (10012018 <gapm_set_dev_config_cmd_handler+0xf8>)
10011f84:	47a8      	blx	r5
10011f86:	466a      	mov	r2, sp
10011f88:	7c12      	ldrb	r2, [r2, #16]
10011f8a:	1ce3      	adds	r3, r4, #3
10011f8c:	77da      	strb	r2, [r3, #31]
10011f8e:	466a      	mov	r2, sp
10011f90:	7d12      	ldrb	r2, [r2, #20]
10011f92:	1d23      	adds	r3, r4, #4
10011f94:	77da      	strb	r2, [r3, #31]
10011f96:	466a      	mov	r2, sp
10011f98:	7812      	ldrb	r2, [r2, #0]
10011f9a:	1d63      	adds	r3, r4, #5
10011f9c:	77da      	strb	r2, [r3, #31]
10011f9e:	9b00      	ldr	r3, [sp, #0]
10011fa0:	1da2      	adds	r2, r4, #6
10011fa2:	0a1b      	lsrs	r3, r3, #8
10011fa4:	77d3      	strb	r3, [r2, #31]
10011fa6:	466a      	mov	r2, sp
10011fa8:	7912      	ldrb	r2, [r2, #4]
10011faa:	1de3      	adds	r3, r4, #7
10011fac:	77da      	strb	r2, [r3, #31]
10011fae:	1c22      	adds	r2, r4, #0
10011fb0:	9b01      	ldr	r3, [sp, #4]
10011fb2:	3208      	adds	r2, #8
10011fb4:	0a1b      	lsrs	r3, r3, #8
10011fb6:	77d3      	strb	r3, [r2, #31]
10011fb8:	466a      	mov	r2, sp
10011fba:	1c23      	adds	r3, r4, #0
10011fbc:	7a12      	ldrb	r2, [r2, #8]
10011fbe:	3328      	adds	r3, #40	; 0x28
10011fc0:	701a      	strb	r2, [r3, #0]
10011fc2:	1c22      	adds	r2, r4, #0
10011fc4:	9b02      	ldr	r3, [sp, #8]
10011fc6:	3229      	adds	r2, #41	; 0x29
10011fc8:	0a1b      	lsrs	r3, r3, #8
10011fca:	7013      	strb	r3, [r2, #0]
10011fcc:	23d0      	movs	r3, #208	; 0xd0
10011fce:	4d13      	ldr	r5, [pc, #76]	; (1001201c <gapm_set_dev_config_cmd_handler+0xfc>)
10011fd0:	011b      	lsls	r3, r3, #4
10011fd2:	802b      	strh	r3, [r5, #0]
10011fd4:	2322      	movs	r3, #34	; 0x22
10011fd6:	71a3      	strb	r3, [r4, #6]
10011fd8:	2300      	movs	r3, #0
10011fda:	212a      	movs	r1, #42	; 0x2a
10011fdc:	71e3      	strb	r3, [r4, #7]
10011fde:	1c20      	adds	r0, r4, #0
10011fe0:	4b0f      	ldr	r3, [pc, #60]	; (10012020 <gapm_set_dev_config_cmd_handler+0x100>)
10011fe2:	80af      	strh	r7, [r5, #4]
10011fe4:	4798      	blx	r3
10011fe6:	1c30      	adds	r0, r6, #0
10011fe8:	4b0e      	ldr	r3, [pc, #56]	; (10012024 <gapm_set_dev_config_cmd_handler+0x104>)
10011fea:	4798      	blx	r3
10011fec:	7833      	ldrb	r3, [r6, #0]
10011fee:	20e2      	movs	r0, #226	; 0xe2
10011ff0:	2b00      	cmp	r3, #0
10011ff2:	d106      	bne.n	10012002 <gapm_set_dev_config_cmd_handler+0xe2>
10011ff4:	68ab      	ldr	r3, [r5, #8]
10011ff6:	20e2      	movs	r0, #226	; 0xe2
10011ff8:	781a      	ldrb	r2, [r3, #0]
10011ffa:	785b      	ldrb	r3, [r3, #1]
10011ffc:	2a03      	cmp	r2, #3
10011ffe:	d100      	bne.n	10012002 <gapm_set_dev_config_cmd_handler+0xe2>
10012000:	1c18      	adds	r0, r3, #0
10012002:	b009      	add	sp, #36	; 0x24
10012004:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012006:	46c0      	nop			; (mov r8, r8)
10012008:	1001ab10 	.word	0x1001ab10
1001200c:	1001a7a0 	.word	0x1001a7a0
10012010:	100149f3 	.word	0x100149f3
10012014:	1001ab1c 	.word	0x1001ab1c
10012018:	1001ab22 	.word	0x1001ab22
1001201c:	1001a794 	.word	0x1001a794
10012020:	100112d9 	.word	0x100112d9
10012024:	1001133d 	.word	0x1001133d

10012028 <gapm_get_dev_config_cmd_handler>:
10012028:	4684      	mov	ip, r0
1001202a:	4663      	mov	r3, ip
1001202c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001202e:	b085      	sub	sp, #20
10012030:	9100      	str	r1, [sp, #0]
10012032:	20cf      	movs	r0, #207	; 0xcf
10012034:	2b01      	cmp	r3, #1
10012036:	d854      	bhi.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
10012038:	2900      	cmp	r1, #0
1001203a:	d052      	beq.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
1001203c:	2200      	movs	r2, #0
1001203e:	492a      	ldr	r1, [pc, #168]	; (100120e8 <gapm_get_dev_config_cmd_handler+0xc0>)
10012040:	ab02      	add	r3, sp, #8
10012042:	880c      	ldrh	r4, [r1, #0]
10012044:	8809      	ldrh	r1, [r1, #0]
10012046:	1d9f      	adds	r7, r3, #6
10012048:	719a      	strb	r2, [r3, #6]
1001204a:	4b28      	ldr	r3, [pc, #160]	; (100120ec <gapm_get_dev_config_cmd_handler+0xc4>)
1001204c:	0a09      	lsrs	r1, r1, #8
1001204e:	250d      	movs	r5, #13
10012050:	2606      	movs	r6, #6
10012052:	7159      	strb	r1, [r3, #5]
10012054:	4661      	mov	r1, ip
10012056:	701e      	strb	r6, [r3, #0]
10012058:	705d      	strb	r5, [r3, #1]
1001205a:	709d      	strb	r5, [r3, #2]
1001205c:	70da      	strb	r2, [r3, #3]
1001205e:	711c      	strb	r4, [r3, #4]
10012060:	2901      	cmp	r1, #1
10012062:	d13e      	bne.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
10012064:	21d0      	movs	r1, #208	; 0xd0
10012066:	4c22      	ldr	r4, [pc, #136]	; (100120f0 <gapm_get_dev_config_cmd_handler+0xc8>)
10012068:	0109      	lsls	r1, r1, #4
1001206a:	8061      	strh	r1, [r4, #2]
1001206c:	4921      	ldr	r1, [pc, #132]	; (100120f4 <gapm_get_dev_config_cmd_handler+0xcc>)
1001206e:	71da      	strb	r2, [r3, #7]
10012070:	8021      	strh	r1, [r4, #0]
10012072:	4661      	mov	r1, ip
10012074:	721e      	strb	r6, [r3, #8]
10012076:	7199      	strb	r1, [r3, #6]
10012078:	1c18      	adds	r0, r3, #0
1001207a:	2109      	movs	r1, #9
1001207c:	4b1e      	ldr	r3, [pc, #120]	; (100120f8 <gapm_get_dev_config_cmd_handler+0xd0>)
1001207e:	80a5      	strh	r5, [r4, #4]
10012080:	4798      	blx	r3
10012082:	1c38      	adds	r0, r7, #0
10012084:	4b1d      	ldr	r3, [pc, #116]	; (100120fc <gapm_get_dev_config_cmd_handler+0xd4>)
10012086:	4798      	blx	r3
10012088:	783b      	ldrb	r3, [r7, #0]
1001208a:	20e2      	movs	r0, #226	; 0xe2
1001208c:	9301      	str	r3, [sp, #4]
1001208e:	2b00      	cmp	r3, #0
10012090:	d127      	bne.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
10012092:	8821      	ldrh	r1, [r4, #0]
10012094:	4a1a      	ldr	r2, [pc, #104]	; (10012100 <gapm_get_dev_config_cmd_handler+0xd8>)
10012096:	68a7      	ldr	r7, [r4, #8]
10012098:	3b01      	subs	r3, #1
1001209a:	4291      	cmp	r1, r2
1001209c:	d001      	beq.n	100120a2 <gapm_get_dev_config_cmd_handler+0x7a>
1001209e:	8023      	strh	r3, [r4, #0]
100120a0:	e01a      	b.n	100120d8 <gapm_get_dev_config_cmd_handler+0xb0>
100120a2:	8063      	strh	r3, [r4, #2]
100120a4:	9b00      	ldr	r3, [sp, #0]
100120a6:	1c39      	adds	r1, r7, #0
100120a8:	1c58      	adds	r0, r3, #1
100120aa:	1c32      	adds	r2, r6, #0
100120ac:	4b15      	ldr	r3, [pc, #84]	; (10012104 <gapm_get_dev_config_cmd_handler+0xdc>)
100120ae:	4798      	blx	r3
100120b0:	79bb      	ldrb	r3, [r7, #6]
100120b2:	9a00      	ldr	r2, [sp, #0]
100120b4:	7013      	strb	r3, [r2, #0]
100120b6:	23d0      	movs	r3, #208	; 0xd0
100120b8:	011b      	lsls	r3, r3, #4
100120ba:	8023      	strh	r3, [r4, #0]
100120bc:	ab02      	add	r3, sp, #8
100120be:	80a5      	strh	r5, [r4, #4]
100120c0:	1ddd      	adds	r5, r3, #7
100120c2:	466b      	mov	r3, sp
100120c4:	791b      	ldrb	r3, [r3, #4]
100120c6:	1c28      	adds	r0, r5, #0
100120c8:	702b      	strb	r3, [r5, #0]
100120ca:	4b0c      	ldr	r3, [pc, #48]	; (100120fc <gapm_get_dev_config_cmd_handler+0xd4>)
100120cc:	4798      	blx	r3
100120ce:	782b      	ldrb	r3, [r5, #0]
100120d0:	20d0      	movs	r0, #208	; 0xd0
100120d2:	2b00      	cmp	r3, #0
100120d4:	d105      	bne.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
100120d6:	68a7      	ldr	r7, [r4, #8]
100120d8:	783b      	ldrb	r3, [r7, #0]
100120da:	7878      	ldrb	r0, [r7, #1]
100120dc:	2b06      	cmp	r3, #6
100120de:	d000      	beq.n	100120e2 <gapm_get_dev_config_cmd_handler+0xba>
100120e0:	20e2      	movs	r0, #226	; 0xe2
100120e2:	b005      	add	sp, #20
100120e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120e6:	46c0      	nop			; (mov r8, r8)
100120e8:	1001a7a0 	.word	0x1001a7a0
100120ec:	1001ab10 	.word	0x1001ab10
100120f0:	1001a794 	.word	0x1001a794
100120f4:	00000d08 	.word	0x00000d08
100120f8:	100112d9 	.word	0x100112d9
100120fc:	1001133d 	.word	0x1001133d
10012100:	0000ffff 	.word	0x0000ffff
10012104:	100149f3 	.word	0x100149f3

10012108 <gapm_cancel_cmd_handler>:
10012108:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001210a:	4916      	ldr	r1, [pc, #88]	; (10012164 <gapm_cancel_cmd_handler+0x5c>)
1001210c:	4816      	ldr	r0, [pc, #88]	; (10012168 <gapm_cancel_cmd_handler+0x60>)
1001210e:	880c      	ldrh	r4, [r1, #0]
10012110:	8809      	ldrh	r1, [r1, #0]
10012112:	466b      	mov	r3, sp
10012114:	0a09      	lsrs	r1, r1, #8
10012116:	7141      	strb	r1, [r0, #5]
10012118:	2102      	movs	r1, #2
1001211a:	2203      	movs	r2, #3
1001211c:	7201      	strb	r1, [r0, #8]
1001211e:	21d0      	movs	r1, #208	; 0xd0
10012120:	1ddd      	adds	r5, r3, #7
10012122:	2300      	movs	r3, #0
10012124:	7104      	strb	r4, [r0, #4]
10012126:	4c11      	ldr	r4, [pc, #68]	; (1001216c <gapm_cancel_cmd_handler+0x64>)
10012128:	7002      	strb	r2, [r0, #0]
1001212a:	0109      	lsls	r1, r1, #4
1001212c:	320a      	adds	r2, #10
1001212e:	702b      	strb	r3, [r5, #0]
10012130:	7042      	strb	r2, [r0, #1]
10012132:	7082      	strb	r2, [r0, #2]
10012134:	70c3      	strb	r3, [r0, #3]
10012136:	8021      	strh	r1, [r4, #0]
10012138:	80a2      	strh	r2, [r4, #4]
1001213a:	71c3      	strb	r3, [r0, #7]
1001213c:	3a0c      	subs	r2, #12
1001213e:	2109      	movs	r1, #9
10012140:	4b0b      	ldr	r3, [pc, #44]	; (10012170 <gapm_cancel_cmd_handler+0x68>)
10012142:	7182      	strb	r2, [r0, #6]
10012144:	4798      	blx	r3
10012146:	1c28      	adds	r0, r5, #0
10012148:	4b0a      	ldr	r3, [pc, #40]	; (10012174 <gapm_cancel_cmd_handler+0x6c>)
1001214a:	4798      	blx	r3
1001214c:	7828      	ldrb	r0, [r5, #0]
1001214e:	2800      	cmp	r0, #0
10012150:	d001      	beq.n	10012156 <gapm_cancel_cmd_handler+0x4e>
10012152:	20e2      	movs	r0, #226	; 0xe2
10012154:	e004      	b.n	10012160 <gapm_cancel_cmd_handler+0x58>
10012156:	68a3      	ldr	r3, [r4, #8]
10012158:	785b      	ldrb	r3, [r3, #1]
1001215a:	2b44      	cmp	r3, #68	; 0x44
1001215c:	d000      	beq.n	10012160 <gapm_cancel_cmd_handler+0x58>
1001215e:	1c18      	adds	r0, r3, #0
10012160:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10012162:	46c0      	nop			; (mov r8, r8)
10012164:	1001a7a0 	.word	0x1001a7a0
10012168:	1001ab10 	.word	0x1001ab10
1001216c:	1001a794 	.word	0x1001a794
10012170:	100112d9 	.word	0x100112d9
10012174:	1001133d 	.word	0x1001133d

10012178 <gapm_dev_bdaddr_ind_handler>:
10012178:	b538      	push	{r3, r4, r5, lr}
1001217a:	1c05      	adds	r5, r0, #0
1001217c:	1c0c      	adds	r4, r1, #0
1001217e:	1c48      	adds	r0, r1, #1
10012180:	2206      	movs	r2, #6
10012182:	1c29      	adds	r1, r5, #0
10012184:	4b02      	ldr	r3, [pc, #8]	; (10012190 <gapm_dev_bdaddr_ind_handler+0x18>)
10012186:	4798      	blx	r3
10012188:	79ab      	ldrb	r3, [r5, #6]
1001218a:	2000      	movs	r0, #0
1001218c:	7023      	strb	r3, [r4, #0]
1001218e:	bd38      	pop	{r3, r4, r5, pc}
10012190:	100149f3 	.word	0x100149f3

10012194 <gapm_cmp_evt>:
10012194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012196:	7803      	ldrb	r3, [r0, #0]
10012198:	7845      	ldrb	r5, [r0, #1]
1001219a:	3b0c      	subs	r3, #12
1001219c:	1e18      	subs	r0, r3, #0
1001219e:	280b      	cmp	r0, #11
100121a0:	d900      	bls.n	100121a4 <gapm_cmp_evt+0x10>
100121a2:	e08d      	b.n	100122c0 <gapm_cmp_evt+0x12c>
100121a4:	1c0c      	adds	r4, r1, #0
100121a6:	f000 fd5f 	bl	10012c68 <__gnu_thumb1_case_uqi>
100121aa:	1952      	.short	0x1952
100121ac:	068b1919 	.word	0x068b1919
100121b0:	8b595906 	.word	0x8b595906
100121b4:	0d8b      	.short	0x0d8b
100121b6:	2300      	movs	r3, #0
100121b8:	2d45      	cmp	r5, #69	; 0x45
100121ba:	d000      	beq.n	100121be <gapm_cmp_evt+0x2a>
100121bc:	1c2b      	adds	r3, r5, #0
100121be:	7023      	strb	r3, [r4, #0]
100121c0:	2002      	movs	r0, #2
100121c2:	e07e      	b.n	100122c2 <gapm_cmp_evt+0x12e>
100121c4:	203b      	movs	r0, #59	; 0x3b
100121c6:	2d00      	cmp	r5, #0
100121c8:	d100      	bne.n	100121cc <gapm_cmp_evt+0x38>
100121ca:	e07a      	b.n	100122c2 <gapm_cmp_evt+0x12e>
100121cc:	700d      	strb	r5, [r1, #0]
100121ce:	1c48      	adds	r0, r1, #1
100121d0:	2210      	movs	r2, #16
100121d2:	2100      	movs	r1, #0
100121d4:	4b3b      	ldr	r3, [pc, #236]	; (100122c4 <gapm_cmp_evt+0x130>)
100121d6:	4798      	blx	r3
100121d8:	200f      	movs	r0, #15
100121da:	e072      	b.n	100122c2 <gapm_cmp_evt+0x12e>
100121dc:	2d00      	cmp	r5, #0
100121de:	d134      	bne.n	1001224a <gapm_cmp_evt+0xb6>
100121e0:	4b39      	ldr	r3, [pc, #228]	; (100122c8 <gapm_cmp_evt+0x134>)
100121e2:	4798      	blx	r3
100121e4:	1e43      	subs	r3, r0, #1
100121e6:	b2db      	uxtb	r3, r3
100121e8:	1c28      	adds	r0, r5, #0
100121ea:	2b06      	cmp	r3, #6
100121ec:	d869      	bhi.n	100122c2 <gapm_cmp_evt+0x12e>
100121ee:	466b      	mov	r3, sp
100121f0:	4e36      	ldr	r6, [pc, #216]	; (100122cc <gapm_cmp_evt+0x138>)
100121f2:	1dd9      	adds	r1, r3, #7
100121f4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100121f6:	4b36      	ldr	r3, [pc, #216]	; (100122d0 <gapm_cmp_evt+0x13c>)
100121f8:	4798      	blx	r3
100121fa:	2312      	movs	r3, #18
100121fc:	4358      	muls	r0, r3
100121fe:	4935      	ldr	r1, [pc, #212]	; (100122d4 <gapm_cmp_evt+0x140>)
10012200:	1809      	adds	r1, r1, r0
10012202:	1c0b      	adds	r3, r1, #0
10012204:	894a      	ldrh	r2, [r1, #10]
10012206:	3308      	adds	r3, #8
10012208:	8122      	strh	r2, [r4, #8]
1001220a:	784f      	ldrb	r7, [r1, #1]
1001220c:	72a5      	strb	r5, [r4, #10]
1001220e:	7027      	strb	r7, [r4, #0]
10012210:	898a      	ldrh	r2, [r1, #12]
10012212:	1c60      	adds	r0, r4, #1
10012214:	81a2      	strh	r2, [r4, #12]
10012216:	88db      	ldrh	r3, [r3, #6]
10012218:	3102      	adds	r1, #2
1001221a:	81e3      	strh	r3, [r4, #14]
1001221c:	89cb      	ldrh	r3, [r1, #14]
1001221e:	2206      	movs	r2, #6
10012220:	8223      	strh	r3, [r4, #16]
10012222:	4b2d      	ldr	r3, [pc, #180]	; (100122d8 <gapm_cmp_evt+0x144>)
10012224:	4798      	blx	r3
10012226:	2f00      	cmp	r7, #0
10012228:	d00a      	beq.n	10012240 <gapm_cmp_evt+0xac>
1001222a:	79a3      	ldrb	r3, [r4, #6]
1001222c:	223f      	movs	r2, #63	; 0x3f
1001222e:	1c19      	adds	r1, r3, #0
10012230:	3501      	adds	r5, #1
10012232:	4391      	bics	r1, r2
10012234:	29c0      	cmp	r1, #192	; 0xc0
10012236:	d003      	beq.n	10012240 <gapm_cmp_evt+0xac>
10012238:	065b      	lsls	r3, r3, #25
1001223a:	0fdb      	lsrs	r3, r3, #31
1001223c:	3502      	adds	r5, #2
1001223e:	1aed      	subs	r5, r5, r3
10012240:	2301      	movs	r3, #1
10012242:	425b      	negs	r3, r3
10012244:	7025      	strb	r5, [r4, #0]
10012246:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012248:	e038      	b.n	100122bc <gapm_cmp_evt+0x128>
1001224a:	700d      	strb	r5, [r1, #0]
1001224c:	e004      	b.n	10012258 <gapm_cmp_evt+0xc4>
1001224e:	2300      	movs	r3, #0
10012250:	2d45      	cmp	r5, #69	; 0x45
10012252:	d000      	beq.n	10012256 <gapm_cmp_evt+0xc2>
10012254:	1c2b      	adds	r3, r5, #0
10012256:	7023      	strb	r3, [r4, #0]
10012258:	2003      	movs	r0, #3
1001225a:	e032      	b.n	100122c2 <gapm_cmp_evt+0x12e>
1001225c:	4e1b      	ldr	r6, [pc, #108]	; (100122cc <gapm_cmp_evt+0x138>)
1001225e:	2100      	movs	r1, #0
10012260:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10012262:	4b1b      	ldr	r3, [pc, #108]	; (100122d0 <gapm_cmp_evt+0x13c>)
10012264:	4798      	blx	r3
10012266:	2807      	cmp	r0, #7
10012268:	d818      	bhi.n	1001229c <gapm_cmp_evt+0x108>
1001226a:	2301      	movs	r3, #1
1001226c:	425b      	negs	r3, r3
1001226e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10012270:	3313      	adds	r3, #19
10012272:	4358      	muls	r0, r3
10012274:	4917      	ldr	r1, [pc, #92]	; (100122d4 <gapm_cmp_evt+0x140>)
10012276:	1809      	adds	r1, r1, r0
10012278:	1c0b      	adds	r3, r1, #0
1001227a:	894a      	ldrh	r2, [r1, #10]
1001227c:	3308      	adds	r3, #8
1001227e:	8122      	strh	r2, [r4, #8]
10012280:	784a      	ldrb	r2, [r1, #1]
10012282:	72a5      	strb	r5, [r4, #10]
10012284:	7022      	strb	r2, [r4, #0]
10012286:	898a      	ldrh	r2, [r1, #12]
10012288:	1c60      	adds	r0, r4, #1
1001228a:	81a2      	strh	r2, [r4, #12]
1001228c:	88db      	ldrh	r3, [r3, #6]
1001228e:	3102      	adds	r1, #2
10012290:	81e3      	strh	r3, [r4, #14]
10012292:	89cb      	ldrh	r3, [r1, #14]
10012294:	2206      	movs	r2, #6
10012296:	8223      	strh	r3, [r4, #16]
10012298:	4b0f      	ldr	r3, [pc, #60]	; (100122d8 <gapm_cmp_evt+0x144>)
1001229a:	4798      	blx	r3
1001229c:	2200      	movs	r2, #0
1001229e:	7823      	ldrb	r3, [r4, #0]
100122a0:	4293      	cmp	r3, r2
100122a2:	d00a      	beq.n	100122ba <gapm_cmp_evt+0x126>
100122a4:	79a3      	ldrb	r3, [r4, #6]
100122a6:	323f      	adds	r2, #63	; 0x3f
100122a8:	1c19      	adds	r1, r3, #0
100122aa:	4391      	bics	r1, r2
100122ac:	3a3e      	subs	r2, #62	; 0x3e
100122ae:	29c0      	cmp	r1, #192	; 0xc0
100122b0:	d003      	beq.n	100122ba <gapm_cmp_evt+0x126>
100122b2:	065b      	lsls	r3, r3, #25
100122b4:	0fdb      	lsrs	r3, r3, #31
100122b6:	3202      	adds	r2, #2
100122b8:	1ad2      	subs	r2, r2, r3
100122ba:	7022      	strb	r2, [r4, #0]
100122bc:	2005      	movs	r0, #5
100122be:	e000      	b.n	100122c2 <gapm_cmp_evt+0x12e>
100122c0:	2000      	movs	r0, #0
100122c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100122c4:	10014a05 	.word	0x10014a05
100122c8:	100114e5 	.word	0x100114e5
100122cc:	1001a832 	.word	0x1001a832
100122d0:	100114a9 	.word	0x100114a9
100122d4:	1001a7a2 	.word	0x1001a7a2
100122d8:	100149f3 	.word	0x100149f3

100122dc <gapm_start_adv_cmd_handler>:
100122dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100122de:	b089      	sub	sp, #36	; 0x24
100122e0:	9303      	str	r3, [sp, #12]
100122e2:	ab0e      	add	r3, sp, #56	; 0x38
100122e4:	9102      	str	r1, [sp, #8]
100122e6:	cb02      	ldmia	r3!, {r1}
100122e8:	aa08      	add	r2, sp, #32
100122ea:	881b      	ldrh	r3, [r3, #0]
100122ec:	4e3c      	ldr	r6, [pc, #240]	; (100123e0 <gapm_start_adv_cmd_handler+0x104>)
100122ee:	9300      	str	r3, [sp, #0]
100122f0:	ab10      	add	r3, sp, #64	; 0x40
100122f2:	881b      	ldrh	r3, [r3, #0]
100122f4:	240d      	movs	r4, #13
100122f6:	469c      	mov	ip, r3
100122f8:	ab11      	add	r3, sp, #68	; 0x44
100122fa:	781b      	ldrb	r3, [r3, #0]
100122fc:	9304      	str	r3, [sp, #16]
100122fe:	ab12      	add	r3, sp, #72	; 0x48
10012300:	781b      	ldrb	r3, [r3, #0]
10012302:	9305      	str	r3, [sp, #20]
10012304:	ab13      	add	r3, sp, #76	; 0x4c
10012306:	781b      	ldrb	r3, [r3, #0]
10012308:	9306      	str	r3, [sp, #24]
1001230a:	ab14      	add	r3, sp, #80	; 0x50
1001230c:	781b      	ldrb	r3, [r3, #0]
1001230e:	9301      	str	r3, [sp, #4]
10012310:	2319      	movs	r3, #25
10012312:	189b      	adds	r3, r3, r2
10012314:	7fdd      	ldrb	r5, [r3, #31]
10012316:	ab18      	add	r3, sp, #96	; 0x60
10012318:	881f      	ldrh	r7, [r3, #0]
1001231a:	ab19      	add	r3, sp, #100	; 0x64
1001231c:	781b      	ldrb	r3, [r3, #0]
1001231e:	8832      	ldrh	r2, [r6, #0]
10012320:	9307      	str	r3, [sp, #28]
10012322:	4b30      	ldr	r3, [pc, #192]	; (100123e4 <gapm_start_adv_cmd_handler+0x108>)
10012324:	8836      	ldrh	r6, [r6, #0]
10012326:	711a      	strb	r2, [r3, #4]
10012328:	466a      	mov	r2, sp
1001232a:	7a12      	ldrb	r2, [r2, #8]
1001232c:	701c      	strb	r4, [r3, #0]
1001232e:	705c      	strb	r4, [r3, #1]
10012330:	709c      	strb	r4, [r3, #2]
10012332:	725a      	strb	r2, [r3, #9]
10012334:	2400      	movs	r4, #0
10012336:	466a      	mov	r2, sp
10012338:	0a36      	lsrs	r6, r6, #8
1001233a:	70dc      	strb	r4, [r3, #3]
1001233c:	7218      	strb	r0, [r3, #8]
1001233e:	729c      	strb	r4, [r3, #10]
10012340:	715e      	strb	r6, [r3, #5]
10012342:	72dc      	strb	r4, [r3, #11]
10012344:	7812      	ldrb	r2, [r2, #0]
10012346:	380e      	subs	r0, #14
10012348:	731a      	strb	r2, [r3, #12]
1001234a:	9a00      	ldr	r2, [sp, #0]
1001234c:	0a14      	lsrs	r4, r2, #8
1001234e:	4662      	mov	r2, ip
10012350:	739a      	strb	r2, [r3, #14]
10012352:	4662      	mov	r2, ip
10012354:	735c      	strb	r4, [r3, #13]
10012356:	0a14      	lsrs	r4, r2, #8
10012358:	466a      	mov	r2, sp
1001235a:	7c12      	ldrb	r2, [r2, #16]
1001235c:	73dc      	strb	r4, [r3, #15]
1001235e:	741a      	strb	r2, [r3, #16]
10012360:	1c1c      	adds	r4, r3, #0
10012362:	2801      	cmp	r0, #1
10012364:	d809      	bhi.n	1001237a <gapm_start_adv_cmd_handler+0x9e>
10012366:	2900      	cmp	r1, #0
10012368:	d003      	beq.n	10012372 <gapm_start_adv_cmd_handler+0x96>
1001236a:	481f      	ldr	r0, [pc, #124]	; (100123e8 <gapm_start_adv_cmd_handler+0x10c>)
1001236c:	2206      	movs	r2, #6
1001236e:	4b1f      	ldr	r3, [pc, #124]	; (100123ec <gapm_start_adv_cmd_handler+0x110>)
10012370:	4798      	blx	r3
10012372:	466b      	mov	r3, sp
10012374:	7b1b      	ldrb	r3, [r3, #12]
10012376:	75e3      	strb	r3, [r4, #23]
10012378:	e014      	b.n	100123a4 <gapm_start_adv_cmd_handler+0xc8>
1001237a:	466b      	mov	r3, sp
1001237c:	7d1b      	ldrb	r3, [r3, #20]
1001237e:	9915      	ldr	r1, [sp, #84]	; 0x54
10012380:	7463      	strb	r3, [r4, #17]
10012382:	466b      	mov	r3, sp
10012384:	7e1b      	ldrb	r3, [r3, #24]
10012386:	9a01      	ldr	r2, [sp, #4]
10012388:	74a3      	strb	r3, [r4, #18]
1001238a:	466b      	mov	r3, sp
1001238c:	791b      	ldrb	r3, [r3, #4]
1001238e:	4818      	ldr	r0, [pc, #96]	; (100123f0 <gapm_start_adv_cmd_handler+0x114>)
10012390:	4e16      	ldr	r6, [pc, #88]	; (100123ec <gapm_start_adv_cmd_handler+0x110>)
10012392:	74e3      	strb	r3, [r4, #19]
10012394:	47b0      	blx	r6
10012396:	1c23      	adds	r3, r4, #0
10012398:	4816      	ldr	r0, [pc, #88]	; (100123f4 <gapm_start_adv_cmd_handler+0x118>)
1001239a:	3330      	adds	r3, #48	; 0x30
1001239c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1001239e:	1c2a      	adds	r2, r5, #0
100123a0:	701d      	strb	r5, [r3, #0]
100123a2:	47b0      	blx	r6
100123a4:	1c22      	adds	r2, r4, #0
100123a6:	23a5      	movs	r3, #165	; 0xa5
100123a8:	3250      	adds	r2, #80	; 0x50
100123aa:	7013      	strb	r3, [r2, #0]
100123ac:	1c22      	adds	r2, r4, #0
100123ae:	3251      	adds	r2, #81	; 0x51
100123b0:	7013      	strb	r3, [r2, #0]
100123b2:	1c23      	adds	r3, r4, #0
100123b4:	1c22      	adds	r2, r4, #0
100123b6:	3352      	adds	r3, #82	; 0x52
100123b8:	701f      	strb	r7, [r3, #0]
100123ba:	3253      	adds	r2, #83	; 0x53
100123bc:	0a3b      	lsrs	r3, r7, #8
100123be:	7013      	strb	r3, [r2, #0]
100123c0:	466a      	mov	r2, sp
100123c2:	1c23      	adds	r3, r4, #0
100123c4:	7f12      	ldrb	r2, [r2, #28]
100123c6:	3354      	adds	r3, #84	; 0x54
100123c8:	701a      	strb	r2, [r3, #0]
100123ca:	234d      	movs	r3, #77	; 0x4d
100123cc:	2500      	movs	r5, #0
100123ce:	71a3      	strb	r3, [r4, #6]
100123d0:	1c20      	adds	r0, r4, #0
100123d2:	2155      	movs	r1, #85	; 0x55
100123d4:	4b08      	ldr	r3, [pc, #32]	; (100123f8 <gapm_start_adv_cmd_handler+0x11c>)
100123d6:	71e5      	strb	r5, [r4, #7]
100123d8:	4798      	blx	r3
100123da:	1c28      	adds	r0, r5, #0
100123dc:	b009      	add	sp, #36	; 0x24
100123de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100123e0:	1001a7a0 	.word	0x1001a7a0
100123e4:	1001ab10 	.word	0x1001ab10
100123e8:	1001ab21 	.word	0x1001ab21
100123ec:	100149f3 	.word	0x100149f3
100123f0:	1001ab24 	.word	0x1001ab24
100123f4:	1001ab41 	.word	0x1001ab41
100123f8:	100112d9 	.word	0x100112d9

100123fc <get_gap_local_addr_type>:
100123fc:	4b04      	ldr	r3, [pc, #16]	; (10012410 <get_gap_local_addr_type+0x14>)
100123fe:	2001      	movs	r0, #1
10012400:	791b      	ldrb	r3, [r3, #4]
10012402:	2b02      	cmp	r3, #2
10012404:	d003      	beq.n	1001240e <get_gap_local_addr_type+0x12>
10012406:	3b03      	subs	r3, #3
10012408:	4258      	negs	r0, r3
1001240a:	4158      	adcs	r0, r3
1001240c:	0040      	lsls	r0, r0, #1
1001240e:	4770      	bx	lr
10012410:	1001a832 	.word	0x1001a832

10012414 <gapm_adv_report_evt_handler>:
10012414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012416:	7843      	ldrb	r3, [r0, #1]
10012418:	1c05      	adds	r5, r0, #0
1001241a:	9301      	str	r3, [sp, #4]
1001241c:	466b      	mov	r3, sp
1001241e:	1c0c      	adds	r4, r1, #0
10012420:	791b      	ldrb	r3, [r3, #4]
10012422:	7806      	ldrb	r6, [r0, #0]
10012424:	2206      	movs	r2, #6
10012426:	704b      	strb	r3, [r1, #1]
10012428:	1c88      	adds	r0, r1, #2
1001242a:	4f1b      	ldr	r7, [pc, #108]	; (10012498 <gapm_adv_report_evt_handler+0x84>)
1001242c:	1ca9      	adds	r1, r5, #2
1001242e:	47b8      	blx	r7
10012430:	1c20      	adds	r0, r4, #0
10012432:	1c29      	adds	r1, r5, #0
10012434:	7a2a      	ldrb	r2, [r5, #8]
10012436:	3008      	adds	r0, #8
10012438:	77c2      	strb	r2, [r0, #31]
1001243a:	3109      	adds	r1, #9
1001243c:	3528      	adds	r5, #40	; 0x28
1001243e:	47b8      	blx	r7
10012440:	782b      	ldrb	r3, [r5, #0]
10012442:	b25a      	sxtb	r2, r3
10012444:	2a00      	cmp	r2, #0
10012446:	da01      	bge.n	1001244c <gapm_adv_report_evt_handler+0x38>
10012448:	3301      	adds	r3, #1
1001244a:	b2db      	uxtb	r3, r3
1001244c:	1c22      	adds	r2, r4, #0
1001244e:	3228      	adds	r2, #40	; 0x28
10012450:	7013      	strb	r3, [r2, #0]
10012452:	2200      	movs	r2, #0
10012454:	9b01      	ldr	r3, [sp, #4]
10012456:	4293      	cmp	r3, r2
10012458:	d00a      	beq.n	10012470 <gapm_adv_report_evt_handler+0x5c>
1001245a:	79e3      	ldrb	r3, [r4, #7]
1001245c:	323f      	adds	r2, #63	; 0x3f
1001245e:	1c19      	adds	r1, r3, #0
10012460:	4391      	bics	r1, r2
10012462:	3a3e      	subs	r2, #62	; 0x3e
10012464:	29c0      	cmp	r1, #192	; 0xc0
10012466:	d003      	beq.n	10012470 <gapm_adv_report_evt_handler+0x5c>
10012468:	065b      	lsls	r3, r3, #25
1001246a:	0fdb      	lsrs	r3, r3, #31
1001246c:	3202      	adds	r2, #2
1001246e:	1ad2      	subs	r2, r2, r3
10012470:	7062      	strb	r2, [r4, #1]
10012472:	2e04      	cmp	r6, #4
10012474:	d80f      	bhi.n	10012496 <gapm_adv_report_evt_handler+0x82>
10012476:	1c30      	adds	r0, r6, #0
10012478:	f000 fbf6 	bl	10012c68 <__gnu_thumb1_case_uqi>
1001247c:	09070503 	.word	0x09070503
10012480:	0b          	.byte	0x0b
10012481:	00          	.byte	0x00
10012482:	2300      	movs	r3, #0
10012484:	e006      	b.n	10012494 <gapm_adv_report_evt_handler+0x80>
10012486:	2301      	movs	r3, #1
10012488:	e004      	b.n	10012494 <gapm_adv_report_evt_handler+0x80>
1001248a:	2302      	movs	r3, #2
1001248c:	e002      	b.n	10012494 <gapm_adv_report_evt_handler+0x80>
1001248e:	2303      	movs	r3, #3
10012490:	e000      	b.n	10012494 <gapm_adv_report_evt_handler+0x80>
10012492:	2305      	movs	r3, #5
10012494:	7023      	strb	r3, [r4, #0]
10012496:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012498:	100149f3 	.word	0x100149f3

1001249c <gapm_resolv_addr_cmd_handler>:
1001249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001249e:	2314      	movs	r3, #20
100124a0:	4c12      	ldr	r4, [pc, #72]	; (100124ec <gapm_resolv_addr_cmd_handler+0x50>)
100124a2:	1c17      	adds	r7, r2, #0
100124a4:	7023      	strb	r3, [r4, #0]
100124a6:	3b07      	subs	r3, #7
100124a8:	7063      	strb	r3, [r4, #1]
100124aa:	70a3      	strb	r3, [r4, #2]
100124ac:	2300      	movs	r3, #0
100124ae:	70e3      	strb	r3, [r4, #3]
100124b0:	4b0f      	ldr	r3, [pc, #60]	; (100124f0 <gapm_resolv_addr_cmd_handler+0x54>)
100124b2:	1c05      	adds	r5, r0, #0
100124b4:	881a      	ldrh	r2, [r3, #0]
100124b6:	881b      	ldrh	r3, [r3, #0]
100124b8:	4e0e      	ldr	r6, [pc, #56]	; (100124f4 <gapm_resolv_addr_cmd_handler+0x58>)
100124ba:	0a1b      	lsrs	r3, r3, #8
100124bc:	7163      	strb	r3, [r4, #5]
100124be:	2317      	movs	r3, #23
100124c0:	012d      	lsls	r5, r5, #4
100124c2:	7122      	strb	r2, [r4, #4]
100124c4:	7260      	strb	r0, [r4, #9]
100124c6:	2206      	movs	r2, #6
100124c8:	480b      	ldr	r0, [pc, #44]	; (100124f8 <gapm_resolv_addr_cmd_handler+0x5c>)
100124ca:	7223      	strb	r3, [r4, #8]
100124cc:	47b0      	blx	r6
100124ce:	1c39      	adds	r1, r7, #0
100124d0:	1c2a      	adds	r2, r5, #0
100124d2:	480a      	ldr	r0, [pc, #40]	; (100124fc <gapm_resolv_addr_cmd_handler+0x60>)
100124d4:	47b0      	blx	r6
100124d6:	1c29      	adds	r1, r5, #0
100124d8:	3110      	adds	r1, #16
100124da:	1c0b      	adds	r3, r1, #0
100124dc:	3b08      	subs	r3, #8
100124de:	71a3      	strb	r3, [r4, #6]
100124e0:	121b      	asrs	r3, r3, #8
100124e2:	71e3      	strb	r3, [r4, #7]
100124e4:	1c20      	adds	r0, r4, #0
100124e6:	4b06      	ldr	r3, [pc, #24]	; (10012500 <gapm_resolv_addr_cmd_handler+0x64>)
100124e8:	4798      	blx	r3
100124ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100124ec:	1001ab10 	.word	0x1001ab10
100124f0:	1001a7a0 	.word	0x1001a7a0
100124f4:	100149f3 	.word	0x100149f3
100124f8:	1001ab1a 	.word	0x1001ab1a
100124fc:	1001ab20 	.word	0x1001ab20
10012500:	100112d9 	.word	0x100112d9

10012504 <gapm_addr_solved_ind_handler>:
10012504:	b570      	push	{r4, r5, r6, lr}
10012506:	1c04      	adds	r4, r0, #0
10012508:	1c08      	adds	r0, r1, #0
1001250a:	1c0d      	adds	r5, r1, #0
1001250c:	4e05      	ldr	r6, [pc, #20]	; (10012524 <gapm_addr_solved_ind_handler+0x20>)
1001250e:	1c21      	adds	r1, r4, #0
10012510:	2206      	movs	r2, #6
10012512:	3011      	adds	r0, #17
10012514:	47b0      	blx	r6
10012516:	1c68      	adds	r0, r5, #1
10012518:	1da1      	adds	r1, r4, #6
1001251a:	2210      	movs	r2, #16
1001251c:	47b0      	blx	r6
1001251e:	2300      	movs	r3, #0
10012520:	702b      	strb	r3, [r5, #0]
10012522:	bd70      	pop	{r4, r5, r6, pc}
10012524:	100149f3 	.word	0x100149f3

10012528 <gapm_profile_added_ind_handler>:
10012528:	b510      	push	{r4, lr}
1001252a:	7843      	ldrb	r3, [r0, #1]
1001252c:	7902      	ldrb	r2, [r0, #4]
1001252e:	7944      	ldrb	r4, [r0, #5]
10012530:	7800      	ldrb	r0, [r0, #0]
10012532:	021b      	lsls	r3, r3, #8
10012534:	4303      	orrs	r3, r0
10012536:	2b1b      	cmp	r3, #27
10012538:	d104      	bne.n	10012544 <gapm_profile_added_ind_handler+0x1c>
1001253a:	2300      	movs	r3, #0
1001253c:	700b      	strb	r3, [r1, #0]
1001253e:	0223      	lsls	r3, r4, #8
10012540:	4313      	orrs	r3, r2
10012542:	804b      	strh	r3, [r1, #2]
10012544:	203b      	movs	r0, #59	; 0x3b
10012546:	bd10      	pop	{r4, pc}

10012548 <gattc_read_req_ind_parser>:
10012548:	7843      	ldrb	r3, [r0, #1]
1001254a:	7802      	ldrb	r2, [r0, #0]
1001254c:	021b      	lsls	r3, r3, #8
1001254e:	4313      	orrs	r3, r2
10012550:	804b      	strh	r3, [r1, #2]
10012552:	4770      	bx	lr

10012554 <gattc_write_req_ind_parser>:
10012554:	b508      	push	{r3, lr}
10012556:	1c13      	adds	r3, r2, #0
10012558:	0a00      	lsrs	r0, r0, #8
1001255a:	8010      	strh	r0, [r2, #0]
1001255c:	784a      	ldrb	r2, [r1, #1]
1001255e:	7808      	ldrb	r0, [r1, #0]
10012560:	0212      	lsls	r2, r2, #8
10012562:	4302      	orrs	r2, r0
10012564:	805a      	strh	r2, [r3, #2]
10012566:	78ca      	ldrb	r2, [r1, #3]
10012568:	7888      	ldrb	r0, [r1, #2]
1001256a:	0212      	lsls	r2, r2, #8
1001256c:	4302      	orrs	r2, r0
1001256e:	809a      	strh	r2, [r3, #4]
10012570:	794a      	ldrb	r2, [r1, #5]
10012572:	7908      	ldrb	r0, [r1, #4]
10012574:	0212      	lsls	r2, r2, #8
10012576:	4302      	orrs	r2, r0
10012578:	80da      	strh	r2, [r3, #6]
1001257a:	3308      	adds	r3, #8
1001257c:	1c18      	adds	r0, r3, #0
1001257e:	3106      	adds	r1, #6
10012580:	4b01      	ldr	r3, [pc, #4]	; (10012588 <gattc_write_req_ind_parser+0x34>)
10012582:	4798      	blx	r3
10012584:	bd08      	pop	{r3, pc}
10012586:	46c0      	nop			; (mov r8, r8)
10012588:	100149f3 	.word	0x100149f3

1001258c <gattc_att_info_req_parser>:
1001258c:	7843      	ldrb	r3, [r0, #1]
1001258e:	7802      	ldrb	r2, [r0, #0]
10012590:	021b      	lsls	r3, r3, #8
10012592:	4313      	orrs	r3, r2
10012594:	800b      	strh	r3, [r1, #0]
10012596:	4770      	bx	lr

10012598 <gattc_read_cfm>:
10012598:	b538      	push	{r3, r4, r5, lr}
1001259a:	2514      	movs	r5, #20
1001259c:	1c1c      	adds	r4, r3, #0
1001259e:	4b14      	ldr	r3, [pc, #80]	; (100125f0 <gattc_read_cfm+0x58>)
100125a0:	70d9      	strb	r1, [r3, #3]
100125a2:	4914      	ldr	r1, [pc, #80]	; (100125f4 <gattc_read_cfm+0x5c>)
100125a4:	701d      	strb	r5, [r3, #0]
100125a6:	3d08      	subs	r5, #8
100125a8:	705d      	strb	r5, [r3, #1]
100125aa:	709d      	strb	r5, [r3, #2]
100125ac:	880d      	ldrh	r5, [r1, #0]
100125ae:	8809      	ldrh	r1, [r1, #0]
100125b0:	7218      	strb	r0, [r3, #8]
100125b2:	0a09      	lsrs	r1, r1, #8
100125b4:	7159      	strb	r1, [r3, #5]
100125b6:	0a00      	lsrs	r0, r0, #8
100125b8:	0a21      	lsrs	r1, r4, #8
100125ba:	711d      	strb	r5, [r3, #4]
100125bc:	7258      	strb	r0, [r3, #9]
100125be:	729c      	strb	r4, [r3, #10]
100125c0:	72d9      	strb	r1, [r3, #11]
100125c2:	731a      	strb	r2, [r3, #12]
100125c4:	1c1d      	adds	r5, r3, #0
100125c6:	2c00      	cmp	r4, #0
100125c8:	d007      	beq.n	100125da <gattc_read_cfm+0x42>
100125ca:	9904      	ldr	r1, [sp, #16]
100125cc:	1c22      	adds	r2, r4, #0
100125ce:	480a      	ldr	r0, [pc, #40]	; (100125f8 <gattc_read_cfm+0x60>)
100125d0:	4b0a      	ldr	r3, [pc, #40]	; (100125fc <gattc_read_cfm+0x64>)
100125d2:	340d      	adds	r4, #13
100125d4:	4798      	blx	r3
100125d6:	b2a1      	uxth	r1, r4
100125d8:	e001      	b.n	100125de <gattc_read_cfm+0x46>
100125da:	210e      	movs	r1, #14
100125dc:	735c      	strb	r4, [r3, #13]
100125de:	1c0b      	adds	r3, r1, #0
100125e0:	3b08      	subs	r3, #8
100125e2:	71ab      	strb	r3, [r5, #6]
100125e4:	121b      	asrs	r3, r3, #8
100125e6:	71eb      	strb	r3, [r5, #7]
100125e8:	1c28      	adds	r0, r5, #0
100125ea:	4b05      	ldr	r3, [pc, #20]	; (10012600 <gattc_read_cfm+0x68>)
100125ec:	4798      	blx	r3
100125ee:	bd38      	pop	{r3, r4, r5, pc}
100125f0:	1001ab10 	.word	0x1001ab10
100125f4:	1001a7a0 	.word	0x1001a7a0
100125f8:	1001ab1d 	.word	0x1001ab1d
100125fc:	100149f3 	.word	0x100149f3
10012600:	100112d9 	.word	0x100112d9

10012604 <gattc_write_cfm>:
10012604:	4b0d      	ldr	r3, [pc, #52]	; (1001263c <gattc_write_cfm+0x38>)
10012606:	b510      	push	{r4, lr}
10012608:	729a      	strb	r2, [r3, #10]
1001260a:	2203      	movs	r2, #3
1001260c:	2416      	movs	r4, #22
1001260e:	719a      	strb	r2, [r3, #6]
10012610:	2200      	movs	r2, #0
10012612:	70d9      	strb	r1, [r3, #3]
10012614:	490a      	ldr	r1, [pc, #40]	; (10012640 <gattc_write_cfm+0x3c>)
10012616:	701c      	strb	r4, [r3, #0]
10012618:	3c0a      	subs	r4, #10
1001261a:	705c      	strb	r4, [r3, #1]
1001261c:	709c      	strb	r4, [r3, #2]
1001261e:	880c      	ldrh	r4, [r1, #0]
10012620:	8809      	ldrh	r1, [r1, #0]
10012622:	7218      	strb	r0, [r3, #8]
10012624:	0a09      	lsrs	r1, r1, #8
10012626:	0a00      	lsrs	r0, r0, #8
10012628:	711c      	strb	r4, [r3, #4]
1001262a:	7159      	strb	r1, [r3, #5]
1001262c:	7258      	strb	r0, [r3, #9]
1001262e:	71da      	strb	r2, [r3, #7]
10012630:	1c18      	adds	r0, r3, #0
10012632:	210b      	movs	r1, #11
10012634:	4b03      	ldr	r3, [pc, #12]	; (10012644 <gattc_write_cfm+0x40>)
10012636:	4798      	blx	r3
10012638:	bd10      	pop	{r4, pc}
1001263a:	46c0      	nop			; (mov r8, r8)
1001263c:	1001ab10 	.word	0x1001ab10
10012640:	1001a7a0 	.word	0x1001a7a0
10012644:	100112d9 	.word	0x100112d9

10012648 <gattc_att_info_cfm>:
10012648:	b538      	push	{r3, r4, r5, lr}
1001264a:	4c0e      	ldr	r4, [pc, #56]	; (10012684 <gattc_att_info_cfm+0x3c>)
1001264c:	2518      	movs	r5, #24
1001264e:	7323      	strb	r3, [r4, #12]
10012650:	2305      	movs	r3, #5
10012652:	71a3      	strb	r3, [r4, #6]
10012654:	2300      	movs	r3, #0
10012656:	70e1      	strb	r1, [r4, #3]
10012658:	490b      	ldr	r1, [pc, #44]	; (10012688 <gattc_att_info_cfm+0x40>)
1001265a:	7025      	strb	r5, [r4, #0]
1001265c:	3d0c      	subs	r5, #12
1001265e:	7065      	strb	r5, [r4, #1]
10012660:	70a5      	strb	r5, [r4, #2]
10012662:	880d      	ldrh	r5, [r1, #0]
10012664:	8809      	ldrh	r1, [r1, #0]
10012666:	7220      	strb	r0, [r4, #8]
10012668:	0a09      	lsrs	r1, r1, #8
1001266a:	0a00      	lsrs	r0, r0, #8
1001266c:	7161      	strb	r1, [r4, #5]
1001266e:	7260      	strb	r0, [r4, #9]
10012670:	72a2      	strb	r2, [r4, #10]
10012672:	71e3      	strb	r3, [r4, #7]
10012674:	0a12      	lsrs	r2, r2, #8
10012676:	1c20      	adds	r0, r4, #0
10012678:	210d      	movs	r1, #13
1001267a:	4b04      	ldr	r3, [pc, #16]	; (1001268c <gattc_att_info_cfm+0x44>)
1001267c:	7125      	strb	r5, [r4, #4]
1001267e:	72e2      	strb	r2, [r4, #11]
10012680:	4798      	blx	r3
10012682:	bd38      	pop	{r3, r4, r5, pc}
10012684:	1001ab10 	.word	0x1001ab10
10012688:	1001a7a0 	.word	0x1001a7a0
1001268c:	100112d9 	.word	0x100112d9

10012690 <gattc_send_evt_cmd_handler>:
10012690:	b570      	push	{r4, r5, r6, lr}
10012692:	2610      	movs	r6, #16
10012694:	ac04      	add	r4, sp, #16
10012696:	8825      	ldrh	r5, [r4, #0]
10012698:	4c15      	ldr	r4, [pc, #84]	; (100126f0 <gattc_send_evt_cmd_handler+0x60>)
1001269a:	70e2      	strb	r2, [r4, #3]
1001269c:	4a15      	ldr	r2, [pc, #84]	; (100126f4 <gattc_send_evt_cmd_handler+0x64>)
1001269e:	7026      	strb	r6, [r4, #0]
100126a0:	3e04      	subs	r6, #4
100126a2:	7066      	strb	r6, [r4, #1]
100126a4:	70a6      	strb	r6, [r4, #2]
100126a6:	8816      	ldrh	r6, [r2, #0]
100126a8:	8812      	ldrh	r2, [r2, #0]
100126aa:	7220      	strb	r0, [r4, #8]
100126ac:	0a12      	lsrs	r2, r2, #8
100126ae:	7162      	strb	r2, [r4, #5]
100126b0:	4a11      	ldr	r2, [pc, #68]	; (100126f8 <gattc_send_evt_cmd_handler+0x68>)
100126b2:	7321      	strb	r1, [r4, #12]
100126b4:	8812      	ldrh	r2, [r2, #0]
100126b6:	73a5      	strb	r5, [r4, #14]
100126b8:	3201      	adds	r2, #1
100126ba:	7262      	strb	r2, [r4, #9]
100126bc:	1212      	asrs	r2, r2, #8
100126be:	72a2      	strb	r2, [r4, #10]
100126c0:	2200      	movs	r2, #0
100126c2:	72e2      	strb	r2, [r4, #11]
100126c4:	0a0a      	lsrs	r2, r1, #8
100126c6:	7362      	strb	r2, [r4, #13]
100126c8:	0a2a      	lsrs	r2, r5, #8
100126ca:	73e2      	strb	r2, [r4, #15]
100126cc:	1c19      	adds	r1, r3, #0
100126ce:	1c2a      	adds	r2, r5, #0
100126d0:	4b0a      	ldr	r3, [pc, #40]	; (100126fc <gattc_send_evt_cmd_handler+0x6c>)
100126d2:	3510      	adds	r5, #16
100126d4:	480a      	ldr	r0, [pc, #40]	; (10012700 <gattc_send_evt_cmd_handler+0x70>)
100126d6:	7126      	strb	r6, [r4, #4]
100126d8:	4798      	blx	r3
100126da:	b2a9      	uxth	r1, r5
100126dc:	1c0b      	adds	r3, r1, #0
100126de:	3b08      	subs	r3, #8
100126e0:	71a3      	strb	r3, [r4, #6]
100126e2:	121b      	asrs	r3, r3, #8
100126e4:	71e3      	strb	r3, [r4, #7]
100126e6:	1c20      	adds	r0, r4, #0
100126e8:	4b06      	ldr	r3, [pc, #24]	; (10012704 <gattc_send_evt_cmd_handler+0x74>)
100126ea:	4798      	blx	r3
100126ec:	bd70      	pop	{r4, r5, r6, pc}
100126ee:	46c0      	nop			; (mov r8, r8)
100126f0:	1001ab10 	.word	0x1001ab10
100126f4:	1001a7a0 	.word	0x1001a7a0
100126f8:	10019938 	.word	0x10019938
100126fc:	100149f3 	.word	0x100149f3
10012700:	1001ab20 	.word	0x1001ab20
10012704:	100112d9 	.word	0x100112d9

10012708 <gattc_event_cfm_handler>:
10012708:	220e      	movs	r2, #14
1001270a:	b508      	push	{r3, lr}
1001270c:	4b0b      	ldr	r3, [pc, #44]	; (1001273c <gattc_event_cfm_handler+0x34>)
1001270e:	701a      	strb	r2, [r3, #0]
10012710:	3a02      	subs	r2, #2
10012712:	705a      	strb	r2, [r3, #1]
10012714:	709a      	strb	r2, [r3, #2]
10012716:	4a0a      	ldr	r2, [pc, #40]	; (10012740 <gattc_event_cfm_handler+0x38>)
10012718:	70d8      	strb	r0, [r3, #3]
1001271a:	8810      	ldrh	r0, [r2, #0]
1001271c:	8812      	ldrh	r2, [r2, #0]
1001271e:	7219      	strb	r1, [r3, #8]
10012720:	0a12      	lsrs	r2, r2, #8
10012722:	715a      	strb	r2, [r3, #5]
10012724:	2202      	movs	r2, #2
10012726:	719a      	strb	r2, [r3, #6]
10012728:	2200      	movs	r2, #0
1001272a:	0a09      	lsrs	r1, r1, #8
1001272c:	7118      	strb	r0, [r3, #4]
1001272e:	7259      	strb	r1, [r3, #9]
10012730:	71da      	strb	r2, [r3, #7]
10012732:	1c18      	adds	r0, r3, #0
10012734:	210a      	movs	r1, #10
10012736:	4b03      	ldr	r3, [pc, #12]	; (10012744 <gattc_event_cfm_handler+0x3c>)
10012738:	4798      	blx	r3
1001273a:	bd08      	pop	{r3, pc}
1001273c:	1001ab10 	.word	0x1001ab10
10012740:	1001a7a0 	.word	0x1001a7a0
10012744:	100112d9 	.word	0x100112d9

10012748 <gattc_disc_svc_ind_parser>:
10012748:	b570      	push	{r4, r5, r6, lr}
1001274a:	1c15      	adds	r5, r2, #0
1001274c:	0a00      	lsrs	r0, r0, #8
1001274e:	8010      	strh	r0, [r2, #0]
10012750:	784b      	ldrb	r3, [r1, #1]
10012752:	780a      	ldrb	r2, [r1, #0]
10012754:	021b      	lsls	r3, r3, #8
10012756:	4313      	orrs	r3, r2
10012758:	806b      	strh	r3, [r5, #2]
1001275a:	78cb      	ldrb	r3, [r1, #3]
1001275c:	788a      	ldrb	r2, [r1, #2]
1001275e:	021b      	lsls	r3, r3, #8
10012760:	4313      	orrs	r3, r2
10012762:	80ab      	strh	r3, [r5, #4]
10012764:	790e      	ldrb	r6, [r1, #4]
10012766:	4b05      	ldr	r3, [pc, #20]	; (1001277c <gattc_disc_svc_ind_parser+0x34>)
10012768:	1c30      	adds	r0, r6, #0
1001276a:	1c0c      	adds	r4, r1, #0
1001276c:	4798      	blx	r3
1001276e:	1c32      	adds	r2, r6, #0
10012770:	71a8      	strb	r0, [r5, #6]
10012772:	1d61      	adds	r1, r4, #5
10012774:	1de8      	adds	r0, r5, #7
10012776:	4b02      	ldr	r3, [pc, #8]	; (10012780 <gattc_disc_svc_ind_parser+0x38>)
10012778:	4798      	blx	r3
1001277a:	bd70      	pop	{r4, r5, r6, pc}
1001277c:	10010619 	.word	0x10010619
10012780:	100149f3 	.word	0x100149f3

10012784 <gattc_disc_svc_incl_ind_parser>:
10012784:	b570      	push	{r4, r5, r6, lr}
10012786:	1c15      	adds	r5, r2, #0
10012788:	0a00      	lsrs	r0, r0, #8
1001278a:	8010      	strh	r0, [r2, #0]
1001278c:	784b      	ldrb	r3, [r1, #1]
1001278e:	780a      	ldrb	r2, [r1, #0]
10012790:	021b      	lsls	r3, r3, #8
10012792:	4313      	orrs	r3, r2
10012794:	806b      	strh	r3, [r5, #2]
10012796:	78cb      	ldrb	r3, [r1, #3]
10012798:	788a      	ldrb	r2, [r1, #2]
1001279a:	021b      	lsls	r3, r3, #8
1001279c:	4313      	orrs	r3, r2
1001279e:	80ab      	strh	r3, [r5, #4]
100127a0:	794b      	ldrb	r3, [r1, #5]
100127a2:	790a      	ldrb	r2, [r1, #4]
100127a4:	021b      	lsls	r3, r3, #8
100127a6:	4313      	orrs	r3, r2
100127a8:	80eb      	strh	r3, [r5, #6]
100127aa:	798e      	ldrb	r6, [r1, #6]
100127ac:	4b05      	ldr	r3, [pc, #20]	; (100127c4 <gattc_disc_svc_incl_ind_parser+0x40>)
100127ae:	1c30      	adds	r0, r6, #0
100127b0:	1c0c      	adds	r4, r1, #0
100127b2:	4798      	blx	r3
100127b4:	7228      	strb	r0, [r5, #8]
100127b6:	1c28      	adds	r0, r5, #0
100127b8:	1c32      	adds	r2, r6, #0
100127ba:	1de1      	adds	r1, r4, #7
100127bc:	4b02      	ldr	r3, [pc, #8]	; (100127c8 <gattc_disc_svc_incl_ind_parser+0x44>)
100127be:	3009      	adds	r0, #9
100127c0:	4798      	blx	r3
100127c2:	bd70      	pop	{r4, r5, r6, pc}
100127c4:	10010619 	.word	0x10010619
100127c8:	100149f3 	.word	0x100149f3

100127cc <gattc_disc_char_ind_parser>:
100127cc:	b570      	push	{r4, r5, r6, lr}
100127ce:	1c15      	adds	r5, r2, #0
100127d0:	0a00      	lsrs	r0, r0, #8
100127d2:	8010      	strh	r0, [r2, #0]
100127d4:	784b      	ldrb	r3, [r1, #1]
100127d6:	780a      	ldrb	r2, [r1, #0]
100127d8:	021b      	lsls	r3, r3, #8
100127da:	4313      	orrs	r3, r2
100127dc:	806b      	strh	r3, [r5, #2]
100127de:	78cb      	ldrb	r3, [r1, #3]
100127e0:	788a      	ldrb	r2, [r1, #2]
100127e2:	021b      	lsls	r3, r3, #8
100127e4:	4313      	orrs	r3, r2
100127e6:	80ab      	strh	r3, [r5, #4]
100127e8:	790b      	ldrb	r3, [r1, #4]
100127ea:	1c0c      	adds	r4, r1, #0
100127ec:	71ab      	strb	r3, [r5, #6]
100127ee:	794e      	ldrb	r6, [r1, #5]
100127f0:	4b05      	ldr	r3, [pc, #20]	; (10012808 <gattc_disc_char_ind_parser+0x3c>)
100127f2:	1c30      	adds	r0, r6, #0
100127f4:	4798      	blx	r3
100127f6:	71e8      	strb	r0, [r5, #7]
100127f8:	1c28      	adds	r0, r5, #0
100127fa:	1c32      	adds	r2, r6, #0
100127fc:	1da1      	adds	r1, r4, #6
100127fe:	4b03      	ldr	r3, [pc, #12]	; (1001280c <gattc_disc_char_ind_parser+0x40>)
10012800:	3008      	adds	r0, #8
10012802:	4798      	blx	r3
10012804:	bd70      	pop	{r4, r5, r6, pc}
10012806:	46c0      	nop			; (mov r8, r8)
10012808:	10010619 	.word	0x10010619
1001280c:	100149f3 	.word	0x100149f3

10012810 <gattc_disc_char_desc_ind_parser>:
10012810:	b570      	push	{r4, r5, r6, lr}
10012812:	1c15      	adds	r5, r2, #0
10012814:	0a00      	lsrs	r0, r0, #8
10012816:	8010      	strh	r0, [r2, #0]
10012818:	784b      	ldrb	r3, [r1, #1]
1001281a:	780a      	ldrb	r2, [r1, #0]
1001281c:	021b      	lsls	r3, r3, #8
1001281e:	4313      	orrs	r3, r2
10012820:	806b      	strh	r3, [r5, #2]
10012822:	788e      	ldrb	r6, [r1, #2]
10012824:	4b05      	ldr	r3, [pc, #20]	; (1001283c <gattc_disc_char_desc_ind_parser+0x2c>)
10012826:	1c30      	adds	r0, r6, #0
10012828:	1c0c      	adds	r4, r1, #0
1001282a:	4798      	blx	r3
1001282c:	1c32      	adds	r2, r6, #0
1001282e:	7128      	strb	r0, [r5, #4]
10012830:	1ce1      	adds	r1, r4, #3
10012832:	1d68      	adds	r0, r5, #5
10012834:	4b02      	ldr	r3, [pc, #8]	; (10012840 <gattc_disc_char_desc_ind_parser+0x30>)
10012836:	4798      	blx	r3
10012838:	bd70      	pop	{r4, r5, r6, pc}
1001283a:	46c0      	nop			; (mov r8, r8)
1001283c:	10010619 	.word	0x10010619
10012840:	100149f3 	.word	0x100149f3

10012844 <gattc_event_ind_and_notification_parser>:
10012844:	b510      	push	{r4, lr}
10012846:	780c      	ldrb	r4, [r1, #0]
10012848:	1c13      	adds	r3, r2, #0
1001284a:	2c12      	cmp	r4, #18
1001284c:	d10e      	bne.n	1001286c <gattc_event_ind_and_notification_parser+0x28>
1001284e:	0a00      	lsrs	r0, r0, #8
10012850:	8010      	strh	r0, [r2, #0]
10012852:	788a      	ldrb	r2, [r1, #2]
10012854:	709a      	strb	r2, [r3, #2]
10012856:	7948      	ldrb	r0, [r1, #5]
10012858:	790c      	ldrb	r4, [r1, #4]
1001285a:	0200      	lsls	r0, r0, #8
1001285c:	4320      	orrs	r0, r4
1001285e:	8098      	strh	r0, [r3, #4]
10012860:	3106      	adds	r1, #6
10012862:	1d98      	adds	r0, r3, #6
10012864:	4b0b      	ldr	r3, [pc, #44]	; (10012894 <gattc_event_ind_and_notification_parser+0x50>)
10012866:	4798      	blx	r3
10012868:	221b      	movs	r2, #27
1001286a:	e010      	b.n	1001288e <gattc_event_ind_and_notification_parser+0x4a>
1001286c:	2200      	movs	r2, #0
1001286e:	2c13      	cmp	r4, #19
10012870:	d10d      	bne.n	1001288e <gattc_event_ind_and_notification_parser+0x4a>
10012872:	0a00      	lsrs	r0, r0, #8
10012874:	8018      	strh	r0, [r3, #0]
10012876:	788a      	ldrb	r2, [r1, #2]
10012878:	709a      	strb	r2, [r3, #2]
1001287a:	7908      	ldrb	r0, [r1, #4]
1001287c:	78cc      	ldrb	r4, [r1, #3]
1001287e:	0200      	lsls	r0, r0, #8
10012880:	4320      	orrs	r0, r4
10012882:	8098      	strh	r0, [r3, #4]
10012884:	3106      	adds	r1, #6
10012886:	1d98      	adds	r0, r3, #6
10012888:	4b02      	ldr	r3, [pc, #8]	; (10012894 <gattc_event_ind_and_notification_parser+0x50>)
1001288a:	4798      	blx	r3
1001288c:	221c      	movs	r2, #28
1001288e:	1c10      	adds	r0, r2, #0
10012890:	bd10      	pop	{r4, pc}
10012892:	46c0      	nop			; (mov r8, r8)
10012894:	100149f3 	.word	0x100149f3

10012898 <gattc_complete_evt_handler>:
10012898:	b500      	push	{lr}
1001289a:	0a00      	lsrs	r0, r0, #8
1001289c:	8010      	strh	r0, [r2, #0]
1001289e:	7808      	ldrb	r0, [r1, #0]
100128a0:	7090      	strb	r0, [r2, #2]
100128a2:	784b      	ldrb	r3, [r1, #1]
100128a4:	3801      	subs	r0, #1
100128a6:	70d3      	strb	r3, [r2, #3]
100128a8:	2813      	cmp	r0, #19
100128aa:	d82c      	bhi.n	10012906 <gattc_complete_evt_handler+0x6e>
100128ac:	f000 f9dc 	bl	10012c68 <__gnu_thumb1_case_uqi>
100128b0:	0a0a0a0c 	.word	0x0a0a0a0c
100128b4:	210a0a0a 	.word	0x210a0a0a
100128b8:	111f2121 	.word	0x111f2121
100128bc:	2b111111 	.word	0x2b111111
100128c0:	2919132b 	.word	0x2919132b
100128c4:	2017      	movs	r0, #23
100128c6:	e01f      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128c8:	2024      	movs	r0, #36	; 0x24
100128ca:	2b00      	cmp	r3, #0
100128cc:	d11c      	bne.n	10012908 <gattc_complete_evt_handler+0x70>
100128ce:	3017      	adds	r0, #23
100128d0:	e01a      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128d2:	2025      	movs	r0, #37	; 0x25
100128d4:	e018      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128d6:	4a0d      	ldr	r2, [pc, #52]	; (1001290c <gattc_complete_evt_handler+0x74>)
100128d8:	201d      	movs	r0, #29
100128da:	6813      	ldr	r3, [r2, #0]
100128dc:	3b01      	subs	r3, #1
100128de:	6013      	str	r3, [r2, #0]
100128e0:	e012      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128e2:	4a0a      	ldr	r2, [pc, #40]	; (1001290c <gattc_complete_evt_handler+0x74>)
100128e4:	201e      	movs	r0, #30
100128e6:	6813      	ldr	r3, [r2, #0]
100128e8:	3b01      	subs	r3, #1
100128ea:	6013      	str	r3, [r2, #0]
100128ec:	e00c      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128ee:	2019      	movs	r0, #25
100128f0:	e00a      	b.n	10012908 <gattc_complete_evt_handler+0x70>
100128f2:	203b      	movs	r0, #59	; 0x3b
100128f4:	2b00      	cmp	r3, #0
100128f6:	d007      	beq.n	10012908 <gattc_complete_evt_handler+0x70>
100128f8:	2182      	movs	r1, #130	; 0x82
100128fa:	0089      	lsls	r1, r1, #2
100128fc:	5453      	strb	r3, [r2, r1]
100128fe:	3823      	subs	r0, #35	; 0x23
10012900:	e002      	b.n	10012908 <gattc_complete_evt_handler+0x70>
10012902:	2021      	movs	r0, #33	; 0x21
10012904:	e000      	b.n	10012908 <gattc_complete_evt_handler+0x70>
10012906:	2000      	movs	r0, #0
10012908:	bd00      	pop	{pc}
1001290a:	46c0      	nop			; (mov r8, r8)
1001290c:	1001993c 	.word	0x1001993c

10012910 <gattc_event_mtu_changed_ind_parser>:
10012910:	0a00      	lsrs	r0, r0, #8
10012912:	8010      	strh	r0, [r2, #0]
10012914:	784b      	ldrb	r3, [r1, #1]
10012916:	7809      	ldrb	r1, [r1, #0]
10012918:	021b      	lsls	r3, r3, #8
1001291a:	430b      	orrs	r3, r1
1001291c:	8053      	strh	r3, [r2, #2]
1001291e:	4770      	bx	lr

10012920 <gattc_read_ind_parser>:
10012920:	0a00      	lsrs	r0, r0, #8
10012922:	b508      	push	{r3, lr}
10012924:	8010      	strh	r0, [r2, #0]
10012926:	1c13      	adds	r3, r2, #0
10012928:	2282      	movs	r2, #130	; 0x82
1001292a:	2000      	movs	r0, #0
1001292c:	0092      	lsls	r2, r2, #2
1001292e:	5498      	strb	r0, [r3, r2]
10012930:	784a      	ldrb	r2, [r1, #1]
10012932:	7808      	ldrb	r0, [r1, #0]
10012934:	0212      	lsls	r2, r2, #8
10012936:	4302      	orrs	r2, r0
10012938:	805a      	strh	r2, [r3, #2]
1001293a:	78ca      	ldrb	r2, [r1, #3]
1001293c:	7888      	ldrb	r0, [r1, #2]
1001293e:	0212      	lsls	r2, r2, #8
10012940:	4302      	orrs	r2, r0
10012942:	80da      	strh	r2, [r3, #6]
10012944:	794a      	ldrb	r2, [r1, #5]
10012946:	7908      	ldrb	r0, [r1, #4]
10012948:	0212      	lsls	r2, r2, #8
1001294a:	4302      	orrs	r2, r0
1001294c:	809a      	strh	r2, [r3, #4]
1001294e:	3308      	adds	r3, #8
10012950:	1c18      	adds	r0, r3, #0
10012952:	3106      	adds	r1, #6
10012954:	4b01      	ldr	r3, [pc, #4]	; (1001295c <gattc_read_ind_parser+0x3c>)
10012956:	4798      	blx	r3
10012958:	bd08      	pop	{r3, pc}
1001295a:	46c0      	nop			; (mov r8, r8)
1001295c:	100149f3 	.word	0x100149f3

10012960 <gattc_svc_changed_cfg_ind_parser>:
10012960:	0a00      	lsrs	r0, r0, #8
10012962:	8010      	strh	r0, [r2, #0]
10012964:	784b      	ldrb	r3, [r1, #1]
10012966:	7809      	ldrb	r1, [r1, #0]
10012968:	021b      	lsls	r3, r3, #8
1001296a:	430b      	orrs	r3, r1
1001296c:	8053      	strh	r3, [r2, #2]
1001296e:	4770      	bx	lr

10012970 <init_gattc_task_module>:
10012970:	2300      	movs	r3, #0
10012972:	4a02      	ldr	r2, [pc, #8]	; (1001297c <init_gattc_task_module+0xc>)
10012974:	8013      	strh	r3, [r2, #0]
10012976:	4a02      	ldr	r2, [pc, #8]	; (10012980 <init_gattc_task_module+0x10>)
10012978:	8013      	strh	r3, [r2, #0]
1001297a:	4770      	bx	lr
1001297c:	10019936 	.word	0x10019936
10012980:	10019938 	.word	0x10019938

10012984 <gattm_add_svc_req_handler>:
10012984:	2200      	movs	r2, #0
10012986:	210b      	movs	r1, #11
10012988:	b5f0      	push	{r4, r5, r6, r7, lr}
1001298a:	1c04      	adds	r4, r0, #0
1001298c:	7943      	ldrb	r3, [r0, #5]
1001298e:	b085      	sub	sp, #20
10012990:	9301      	str	r3, [sp, #4]
10012992:	ab02      	add	r3, sp, #8
10012994:	71da      	strb	r2, [r3, #7]
10012996:	4b37      	ldr	r3, [pc, #220]	; (10012a74 <gattm_add_svc_req_handler+0xf0>)
10012998:	7059      	strb	r1, [r3, #1]
1001299a:	7099      	strb	r1, [r3, #2]
1001299c:	4936      	ldr	r1, [pc, #216]	; (10012a78 <gattm_add_svc_req_handler+0xf4>)
1001299e:	701a      	strb	r2, [r3, #0]
100129a0:	8808      	ldrh	r0, [r1, #0]
100129a2:	8809      	ldrh	r1, [r1, #0]
100129a4:	70da      	strb	r2, [r3, #3]
100129a6:	0a09      	lsrs	r1, r1, #8
100129a8:	7118      	strb	r0, [r3, #4]
100129aa:	7159      	strb	r1, [r3, #5]
100129ac:	8821      	ldrh	r1, [r4, #0]
100129ae:	7219      	strb	r1, [r3, #8]
100129b0:	8821      	ldrh	r1, [r4, #0]
100129b2:	0a09      	lsrs	r1, r1, #8
100129b4:	7259      	strb	r1, [r3, #9]
100129b6:	8861      	ldrh	r1, [r4, #2]
100129b8:	7299      	strb	r1, [r3, #10]
100129ba:	8861      	ldrh	r1, [r4, #2]
100129bc:	0a09      	lsrs	r1, r1, #8
100129be:	72d9      	strb	r1, [r3, #11]
100129c0:	7921      	ldrb	r1, [r4, #4]
100129c2:	7319      	strb	r1, [r3, #12]
100129c4:	4669      	mov	r1, sp
100129c6:	7909      	ldrb	r1, [r1, #4]
100129c8:	7359      	strb	r1, [r3, #13]
100129ca:	18a1      	adds	r1, r4, r2
100129cc:	7988      	ldrb	r0, [r1, #6]
100129ce:	1899      	adds	r1, r3, r2
100129d0:	3201      	adds	r2, #1
100129d2:	7388      	strb	r0, [r1, #14]
100129d4:	2a10      	cmp	r2, #16
100129d6:	d1f8      	bne.n	100129ca <gattm_add_svc_req_handler+0x46>
100129d8:	1c27      	adds	r7, r4, #0
100129da:	2300      	movs	r3, #0
100129dc:	251e      	movs	r5, #30
100129de:	3716      	adds	r7, #22
100129e0:	9300      	str	r3, [sp, #0]
100129e2:	9b00      	ldr	r3, [sp, #0]
100129e4:	9a01      	ldr	r2, [sp, #4]
100129e6:	4e23      	ldr	r6, [pc, #140]	; (10012a74 <gattm_add_svc_req_handler+0xf0>)
100129e8:	4293      	cmp	r3, r2
100129ea:	da21      	bge.n	10012a30 <gattm_add_svc_req_handler+0xac>
100129ec:	1c39      	adds	r1, r7, #0
100129ee:	1970      	adds	r0, r6, r5
100129f0:	2210      	movs	r2, #16
100129f2:	4b22      	ldr	r3, [pc, #136]	; (10012a7c <gattm_add_svc_req_handler+0xf8>)
100129f4:	4798      	blx	r3
100129f6:	1c2b      	adds	r3, r5, #0
100129f8:	8a3a      	ldrh	r2, [r7, #16]
100129fa:	3310      	adds	r3, #16
100129fc:	b29b      	uxth	r3, r3
100129fe:	54f2      	strb	r2, [r6, r3]
10012a00:	1c2b      	adds	r3, r5, #0
10012a02:	8a3a      	ldrh	r2, [r7, #16]
10012a04:	3311      	adds	r3, #17
10012a06:	b29b      	uxth	r3, r3
10012a08:	0a12      	lsrs	r2, r2, #8
10012a0a:	54f2      	strb	r2, [r6, r3]
10012a0c:	1c2a      	adds	r2, r5, #0
10012a0e:	1c2b      	adds	r3, r5, #0
10012a10:	8a79      	ldrh	r1, [r7, #18]
10012a12:	3212      	adds	r2, #18
10012a14:	b292      	uxth	r2, r2
10012a16:	54b1      	strb	r1, [r6, r2]
10012a18:	8a7a      	ldrh	r2, [r7, #18]
10012a1a:	3313      	adds	r3, #19
10012a1c:	b29b      	uxth	r3, r3
10012a1e:	0a12      	lsrs	r2, r2, #8
10012a20:	54f2      	strb	r2, [r6, r3]
10012a22:	9b00      	ldr	r3, [sp, #0]
10012a24:	3514      	adds	r5, #20
10012a26:	3301      	adds	r3, #1
10012a28:	b2ad      	uxth	r5, r5
10012a2a:	9300      	str	r3, [sp, #0]
10012a2c:	3714      	adds	r7, #20
10012a2e:	e7d8      	b.n	100129e2 <gattm_add_svc_req_handler+0x5e>
10012a30:	2114      	movs	r1, #20
10012a32:	4d13      	ldr	r5, [pc, #76]	; (10012a80 <gattm_add_svc_req_handler+0xfc>)
10012a34:	4b13      	ldr	r3, [pc, #76]	; (10012a84 <gattm_add_svc_req_handler+0x100>)
10012a36:	4351      	muls	r1, r2
10012a38:	802b      	strh	r3, [r5, #0]
10012a3a:	230b      	movs	r3, #11
10012a3c:	311e      	adds	r1, #30
10012a3e:	80ab      	strh	r3, [r5, #4]
10012a40:	1c0b      	adds	r3, r1, #0
10012a42:	3b08      	subs	r3, #8
10012a44:	71b3      	strb	r3, [r6, #6]
10012a46:	121b      	asrs	r3, r3, #8
10012a48:	71f3      	strb	r3, [r6, #7]
10012a4a:	1c30      	adds	r0, r6, #0
10012a4c:	4b0e      	ldr	r3, [pc, #56]	; (10012a88 <gattm_add_svc_req_handler+0x104>)
10012a4e:	4798      	blx	r3
10012a50:	ab02      	add	r3, sp, #8
10012a52:	1dde      	adds	r6, r3, #7
10012a54:	1c30      	adds	r0, r6, #0
10012a56:	4b0d      	ldr	r3, [pc, #52]	; (10012a8c <gattm_add_svc_req_handler+0x108>)
10012a58:	4798      	blx	r3
10012a5a:	7833      	ldrb	r3, [r6, #0]
10012a5c:	20e2      	movs	r0, #226	; 0xe2
10012a5e:	2b00      	cmp	r3, #0
10012a60:	d106      	bne.n	10012a70 <gattm_add_svc_req_handler+0xec>
10012a62:	68aa      	ldr	r2, [r5, #8]
10012a64:	7853      	ldrb	r3, [r2, #1]
10012a66:	7811      	ldrb	r1, [r2, #0]
10012a68:	021b      	lsls	r3, r3, #8
10012a6a:	430b      	orrs	r3, r1
10012a6c:	8023      	strh	r3, [r4, #0]
10012a6e:	7890      	ldrb	r0, [r2, #2]
10012a70:	b005      	add	sp, #20
10012a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a74:	1001ab10 	.word	0x1001ab10
10012a78:	1001a7a0 	.word	0x1001a7a0
10012a7c:	100149f3 	.word	0x100149f3
10012a80:	1001a794 	.word	0x1001a794
10012a84:	00000b01 	.word	0x00000b01
10012a88:	100112d9 	.word	0x100112d9
10012a8c:	1001133d 	.word	0x1001133d

10012a90 <gattm_add_attribute_req_handler>:
10012a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012a92:	1c1f      	adds	r7, r3, #0
10012a94:	4b16      	ldr	r3, [pc, #88]	; (10012af0 <gattm_add_attribute_req_handler+0x60>)
10012a96:	9100      	str	r1, [sp, #0]
10012a98:	9201      	str	r2, [sp, #4]
10012a9a:	1c05      	adds	r5, r0, #0
10012a9c:	7946      	ldrb	r6, [r0, #5]
10012a9e:	6818      	ldr	r0, [r3, #0]
10012aa0:	2114      	movs	r1, #20
10012aa2:	4b14      	ldr	r3, [pc, #80]	; (10012af4 <gattm_add_attribute_req_handler+0x64>)
10012aa4:	382a      	subs	r0, #42	; 0x2a
10012aa6:	4798      	blx	r3
10012aa8:	2311      	movs	r3, #17
10012aaa:	4286      	cmp	r6, r0
10012aac:	d21e      	bcs.n	10012aec <gattm_add_attribute_req_handler+0x5c>
10012aae:	2414      	movs	r4, #20
10012ab0:	4366      	muls	r6, r4
10012ab2:	19a8      	adds	r0, r5, r6
10012ab4:	2100      	movs	r1, #0
10012ab6:	2210      	movs	r2, #16
10012ab8:	4b0f      	ldr	r3, [pc, #60]	; (10012af8 <gattm_add_attribute_req_handler+0x68>)
10012aba:	3016      	adds	r0, #22
10012abc:	4798      	blx	r3
10012abe:	7968      	ldrb	r0, [r5, #5]
10012ac0:	1c3a      	adds	r2, r7, #0
10012ac2:	4360      	muls	r0, r4
10012ac4:	1828      	adds	r0, r5, r0
10012ac6:	4b0d      	ldr	r3, [pc, #52]	; (10012afc <gattm_add_attribute_req_handler+0x6c>)
10012ac8:	3016      	adds	r0, #22
10012aca:	9908      	ldr	r1, [sp, #32]
10012acc:	4798      	blx	r3
10012ace:	466a      	mov	r2, sp
10012ad0:	796b      	ldrb	r3, [r5, #5]
10012ad2:	8812      	ldrh	r2, [r2, #0]
10012ad4:	435c      	muls	r4, r3
10012ad6:	192c      	adds	r4, r5, r4
10012ad8:	8522      	strh	r2, [r4, #40]	; 0x28
10012ada:	466a      	mov	r2, sp
10012adc:	8892      	ldrh	r2, [r2, #4]
10012ade:	84e2      	strh	r2, [r4, #38]	; 0x26
10012ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012ae2:	8013      	strh	r3, [r2, #0]
10012ae4:	796b      	ldrb	r3, [r5, #5]
10012ae6:	3301      	adds	r3, #1
10012ae8:	716b      	strb	r3, [r5, #5]
10012aea:	2300      	movs	r3, #0
10012aec:	1c18      	adds	r0, r3, #0
10012aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012af0:	100198ac 	.word	0x100198ac
10012af4:	10012c7d 	.word	0x10012c7d
10012af8:	10014a05 	.word	0x10014a05
10012afc:	100149f3 	.word	0x100149f3

10012b00 <gattm_att_set_value_req_handler>:
10012b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012b02:	466b      	mov	r3, sp
10012b04:	1dde      	adds	r6, r3, #7
10012b06:	2300      	movs	r3, #0
10012b08:	1c0d      	adds	r5, r1, #0
10012b0a:	210c      	movs	r1, #12
10012b0c:	270b      	movs	r7, #11
10012b0e:	4c17      	ldr	r4, [pc, #92]	; (10012b6c <gattm_att_set_value_req_handler+0x6c>)
10012b10:	7033      	strb	r3, [r6, #0]
10012b12:	70e3      	strb	r3, [r4, #3]
10012b14:	4b16      	ldr	r3, [pc, #88]	; (10012b70 <gattm_att_set_value_req_handler+0x70>)
10012b16:	7021      	strb	r1, [r4, #0]
10012b18:	8819      	ldrh	r1, [r3, #0]
10012b1a:	881b      	ldrh	r3, [r3, #0]
10012b1c:	7220      	strb	r0, [r4, #8]
10012b1e:	0a1b      	lsrs	r3, r3, #8
10012b20:	7163      	strb	r3, [r4, #5]
10012b22:	0a00      	lsrs	r0, r0, #8
10012b24:	0a2b      	lsrs	r3, r5, #8
10012b26:	7121      	strb	r1, [r4, #4]
10012b28:	7260      	strb	r0, [r4, #9]
10012b2a:	1c11      	adds	r1, r2, #0
10012b2c:	72a5      	strb	r5, [r4, #10]
10012b2e:	1c2a      	adds	r2, r5, #0
10012b30:	72e3      	strb	r3, [r4, #11]
10012b32:	350c      	adds	r5, #12
10012b34:	4b0f      	ldr	r3, [pc, #60]	; (10012b74 <gattm_att_set_value_req_handler+0x74>)
10012b36:	4810      	ldr	r0, [pc, #64]	; (10012b78 <gattm_att_set_value_req_handler+0x78>)
10012b38:	7067      	strb	r7, [r4, #1]
10012b3a:	70a7      	strb	r7, [r4, #2]
10012b3c:	4798      	blx	r3
10012b3e:	b2a9      	uxth	r1, r5
10012b40:	4b0e      	ldr	r3, [pc, #56]	; (10012b7c <gattm_att_set_value_req_handler+0x7c>)
10012b42:	4d0f      	ldr	r5, [pc, #60]	; (10012b80 <gattm_att_set_value_req_handler+0x80>)
10012b44:	1c20      	adds	r0, r4, #0
10012b46:	802b      	strh	r3, [r5, #0]
10012b48:	1c0b      	adds	r3, r1, #0
10012b4a:	3b08      	subs	r3, #8
10012b4c:	71a3      	strb	r3, [r4, #6]
10012b4e:	121b      	asrs	r3, r3, #8
10012b50:	71e3      	strb	r3, [r4, #7]
10012b52:	4b0c      	ldr	r3, [pc, #48]	; (10012b84 <gattm_att_set_value_req_handler+0x84>)
10012b54:	80af      	strh	r7, [r5, #4]
10012b56:	4798      	blx	r3
10012b58:	1c30      	adds	r0, r6, #0
10012b5a:	4b0b      	ldr	r3, [pc, #44]	; (10012b88 <gattm_att_set_value_req_handler+0x88>)
10012b5c:	4798      	blx	r3
10012b5e:	7833      	ldrb	r3, [r6, #0]
10012b60:	20e2      	movs	r0, #226	; 0xe2
10012b62:	2b00      	cmp	r3, #0
10012b64:	d101      	bne.n	10012b6a <gattm_att_set_value_req_handler+0x6a>
10012b66:	68ab      	ldr	r3, [r5, #8]
10012b68:	7898      	ldrb	r0, [r3, #2]
10012b6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012b6c:	1001ab10 	.word	0x1001ab10
10012b70:	1001a7a0 	.word	0x1001a7a0
10012b74:	100149f3 	.word	0x100149f3
10012b78:	1001ab1c 	.word	0x1001ab1c
10012b7c:	00000b0d 	.word	0x00000b0d
10012b80:	1001a794 	.word	0x1001a794
10012b84:	100112d9 	.word	0x100112d9
10012b88:	1001133d 	.word	0x1001133d

10012b8c <gattm_att_get_value_req_handler>:
10012b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b8e:	b085      	sub	sp, #20
10012b90:	9201      	str	r2, [sp, #4]
10012b92:	220a      	movs	r2, #10
10012b94:	1c04      	adds	r4, r0, #0
10012b96:	481d      	ldr	r0, [pc, #116]	; (10012c0c <gattm_att_get_value_req_handler+0x80>)
10012b98:	ab02      	add	r3, sp, #8
10012b9a:	1dde      	adds	r6, r3, #7
10012b9c:	7002      	strb	r2, [r0, #0]
10012b9e:	2300      	movs	r3, #0
10012ba0:	220b      	movs	r2, #11
10012ba2:	4d1b      	ldr	r5, [pc, #108]	; (10012c10 <gattm_att_get_value_req_handler+0x84>)
10012ba4:	1c0f      	adds	r7, r1, #0
10012ba6:	8829      	ldrh	r1, [r5, #0]
10012ba8:	882d      	ldrh	r5, [r5, #0]
10012baa:	7101      	strb	r1, [r0, #4]
10012bac:	0a2d      	lsrs	r5, r5, #8
10012bae:	7145      	strb	r5, [r0, #5]
10012bb0:	0a25      	lsrs	r5, r4, #8
10012bb2:	7245      	strb	r5, [r0, #9]
10012bb4:	4917      	ldr	r1, [pc, #92]	; (10012c14 <gattm_att_get_value_req_handler+0x88>)
10012bb6:	4d18      	ldr	r5, [pc, #96]	; (10012c18 <gattm_att_get_value_req_handler+0x8c>)
10012bb8:	7033      	strb	r3, [r6, #0]
10012bba:	7042      	strb	r2, [r0, #1]
10012bbc:	7082      	strb	r2, [r0, #2]
10012bbe:	70c3      	strb	r3, [r0, #3]
10012bc0:	8029      	strh	r1, [r5, #0]
10012bc2:	80aa      	strh	r2, [r5, #4]
10012bc4:	71c3      	strb	r3, [r0, #7]
10012bc6:	3a09      	subs	r2, #9
10012bc8:	210a      	movs	r1, #10
10012bca:	4b14      	ldr	r3, [pc, #80]	; (10012c1c <gattm_att_get_value_req_handler+0x90>)
10012bcc:	7182      	strb	r2, [r0, #6]
10012bce:	7204      	strb	r4, [r0, #8]
10012bd0:	4798      	blx	r3
10012bd2:	1c30      	adds	r0, r6, #0
10012bd4:	4b12      	ldr	r3, [pc, #72]	; (10012c20 <gattm_att_get_value_req_handler+0x94>)
10012bd6:	4798      	blx	r3
10012bd8:	7833      	ldrb	r3, [r6, #0]
10012bda:	20e2      	movs	r0, #226	; 0xe2
10012bdc:	2b00      	cmp	r3, #0
10012bde:	d112      	bne.n	10012c06 <gattm_att_get_value_req_handler+0x7a>
10012be0:	68a9      	ldr	r1, [r5, #8]
10012be2:	9801      	ldr	r0, [sp, #4]
10012be4:	784d      	ldrb	r5, [r1, #1]
10012be6:	780b      	ldrb	r3, [r1, #0]
10012be8:	78ca      	ldrb	r2, [r1, #3]
10012bea:	022d      	lsls	r5, r5, #8
10012bec:	431d      	orrs	r5, r3
10012bee:	788b      	ldrb	r3, [r1, #2]
10012bf0:	0212      	lsls	r2, r2, #8
10012bf2:	431a      	orrs	r2, r3
10012bf4:	803a      	strh	r2, [r7, #0]
10012bf6:	790e      	ldrb	r6, [r1, #4]
10012bf8:	4b0a      	ldr	r3, [pc, #40]	; (10012c24 <gattm_att_get_value_req_handler+0x98>)
10012bfa:	3105      	adds	r1, #5
10012bfc:	4798      	blx	r3
10012bfe:	20e2      	movs	r0, #226	; 0xe2
10012c00:	42ac      	cmp	r4, r5
10012c02:	d100      	bne.n	10012c06 <gattm_att_get_value_req_handler+0x7a>
10012c04:	1c30      	adds	r0, r6, #0
10012c06:	b005      	add	sp, #20
10012c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c0a:	46c0      	nop			; (mov r8, r8)
10012c0c:	1001ab10 	.word	0x1001ab10
10012c10:	1001a7a0 	.word	0x1001a7a0
10012c14:	00000b0b 	.word	0x00000b0b
10012c18:	1001a794 	.word	0x1001a794
10012c1c:	100112d9 	.word	0x100112d9
10012c20:	1001133d 	.word	0x1001133d
10012c24:	100149f3 	.word	0x100149f3

10012c28 <htpt_enable_rsp_handler>:
10012c28:	780b      	ldrb	r3, [r1, #0]
10012c2a:	7013      	strb	r3, [r2, #0]
10012c2c:	784b      	ldrb	r3, [r1, #1]
10012c2e:	7053      	strb	r3, [r2, #1]
10012c30:	4770      	bx	lr

10012c32 <htpt_temp_send_rsp_handler>:
10012c32:	780b      	ldrb	r3, [r1, #0]
10012c34:	7013      	strb	r3, [r2, #0]
10012c36:	4770      	bx	lr

10012c38 <htpt_meas_intv_upd_rsp_handler>:
10012c38:	780b      	ldrb	r3, [r1, #0]
10012c3a:	7013      	strb	r3, [r2, #0]
10012c3c:	4770      	bx	lr

10012c3e <htpt_meas_intv_chg_req_ind_handler>:
10012c3e:	78cb      	ldrb	r3, [r1, #3]
10012c40:	7889      	ldrb	r1, [r1, #2]
10012c42:	021b      	lsls	r3, r3, #8
10012c44:	430b      	orrs	r3, r1
10012c46:	8013      	strh	r3, [r2, #0]
10012c48:	4770      	bx	lr

10012c4a <htpt_cfg_indntf_ind_handler>:
10012c4a:	780b      	ldrb	r3, [r1, #0]
10012c4c:	7013      	strb	r3, [r2, #0]
10012c4e:	784b      	ldrb	r3, [r1, #1]
10012c50:	7053      	strb	r3, [r2, #1]
10012c52:	4770      	bx	lr

10012c54 <__gnu_thumb1_case_sqi>:
10012c54:	b402      	push	{r1}
10012c56:	4671      	mov	r1, lr
10012c58:	0849      	lsrs	r1, r1, #1
10012c5a:	0049      	lsls	r1, r1, #1
10012c5c:	5609      	ldrsb	r1, [r1, r0]
10012c5e:	0049      	lsls	r1, r1, #1
10012c60:	448e      	add	lr, r1
10012c62:	bc02      	pop	{r1}
10012c64:	4770      	bx	lr
10012c66:	46c0      	nop			; (mov r8, r8)

10012c68 <__gnu_thumb1_case_uqi>:
10012c68:	b402      	push	{r1}
10012c6a:	4671      	mov	r1, lr
10012c6c:	0849      	lsrs	r1, r1, #1
10012c6e:	0049      	lsls	r1, r1, #1
10012c70:	5c09      	ldrb	r1, [r1, r0]
10012c72:	0049      	lsls	r1, r1, #1
10012c74:	448e      	add	lr, r1
10012c76:	bc02      	pop	{r1}
10012c78:	4770      	bx	lr
10012c7a:	46c0      	nop			; (mov r8, r8)

10012c7c <__aeabi_uidiv>:
10012c7c:	2200      	movs	r2, #0
10012c7e:	0843      	lsrs	r3, r0, #1
10012c80:	428b      	cmp	r3, r1
10012c82:	d374      	bcc.n	10012d6e <__aeabi_uidiv+0xf2>
10012c84:	0903      	lsrs	r3, r0, #4
10012c86:	428b      	cmp	r3, r1
10012c88:	d35f      	bcc.n	10012d4a <__aeabi_uidiv+0xce>
10012c8a:	0a03      	lsrs	r3, r0, #8
10012c8c:	428b      	cmp	r3, r1
10012c8e:	d344      	bcc.n	10012d1a <__aeabi_uidiv+0x9e>
10012c90:	0b03      	lsrs	r3, r0, #12
10012c92:	428b      	cmp	r3, r1
10012c94:	d328      	bcc.n	10012ce8 <__aeabi_uidiv+0x6c>
10012c96:	0c03      	lsrs	r3, r0, #16
10012c98:	428b      	cmp	r3, r1
10012c9a:	d30d      	bcc.n	10012cb8 <__aeabi_uidiv+0x3c>
10012c9c:	22ff      	movs	r2, #255	; 0xff
10012c9e:	0209      	lsls	r1, r1, #8
10012ca0:	ba12      	rev	r2, r2
10012ca2:	0c03      	lsrs	r3, r0, #16
10012ca4:	428b      	cmp	r3, r1
10012ca6:	d302      	bcc.n	10012cae <__aeabi_uidiv+0x32>
10012ca8:	1212      	asrs	r2, r2, #8
10012caa:	0209      	lsls	r1, r1, #8
10012cac:	d065      	beq.n	10012d7a <__aeabi_uidiv+0xfe>
10012cae:	0b03      	lsrs	r3, r0, #12
10012cb0:	428b      	cmp	r3, r1
10012cb2:	d319      	bcc.n	10012ce8 <__aeabi_uidiv+0x6c>
10012cb4:	e000      	b.n	10012cb8 <__aeabi_uidiv+0x3c>
10012cb6:	0a09      	lsrs	r1, r1, #8
10012cb8:	0bc3      	lsrs	r3, r0, #15
10012cba:	428b      	cmp	r3, r1
10012cbc:	d301      	bcc.n	10012cc2 <__aeabi_uidiv+0x46>
10012cbe:	03cb      	lsls	r3, r1, #15
10012cc0:	1ac0      	subs	r0, r0, r3
10012cc2:	4152      	adcs	r2, r2
10012cc4:	0b83      	lsrs	r3, r0, #14
10012cc6:	428b      	cmp	r3, r1
10012cc8:	d301      	bcc.n	10012cce <__aeabi_uidiv+0x52>
10012cca:	038b      	lsls	r3, r1, #14
10012ccc:	1ac0      	subs	r0, r0, r3
10012cce:	4152      	adcs	r2, r2
10012cd0:	0b43      	lsrs	r3, r0, #13
10012cd2:	428b      	cmp	r3, r1
10012cd4:	d301      	bcc.n	10012cda <__aeabi_uidiv+0x5e>
10012cd6:	034b      	lsls	r3, r1, #13
10012cd8:	1ac0      	subs	r0, r0, r3
10012cda:	4152      	adcs	r2, r2
10012cdc:	0b03      	lsrs	r3, r0, #12
10012cde:	428b      	cmp	r3, r1
10012ce0:	d301      	bcc.n	10012ce6 <__aeabi_uidiv+0x6a>
10012ce2:	030b      	lsls	r3, r1, #12
10012ce4:	1ac0      	subs	r0, r0, r3
10012ce6:	4152      	adcs	r2, r2
10012ce8:	0ac3      	lsrs	r3, r0, #11
10012cea:	428b      	cmp	r3, r1
10012cec:	d301      	bcc.n	10012cf2 <__aeabi_uidiv+0x76>
10012cee:	02cb      	lsls	r3, r1, #11
10012cf0:	1ac0      	subs	r0, r0, r3
10012cf2:	4152      	adcs	r2, r2
10012cf4:	0a83      	lsrs	r3, r0, #10
10012cf6:	428b      	cmp	r3, r1
10012cf8:	d301      	bcc.n	10012cfe <__aeabi_uidiv+0x82>
10012cfa:	028b      	lsls	r3, r1, #10
10012cfc:	1ac0      	subs	r0, r0, r3
10012cfe:	4152      	adcs	r2, r2
10012d00:	0a43      	lsrs	r3, r0, #9
10012d02:	428b      	cmp	r3, r1
10012d04:	d301      	bcc.n	10012d0a <__aeabi_uidiv+0x8e>
10012d06:	024b      	lsls	r3, r1, #9
10012d08:	1ac0      	subs	r0, r0, r3
10012d0a:	4152      	adcs	r2, r2
10012d0c:	0a03      	lsrs	r3, r0, #8
10012d0e:	428b      	cmp	r3, r1
10012d10:	d301      	bcc.n	10012d16 <__aeabi_uidiv+0x9a>
10012d12:	020b      	lsls	r3, r1, #8
10012d14:	1ac0      	subs	r0, r0, r3
10012d16:	4152      	adcs	r2, r2
10012d18:	d2cd      	bcs.n	10012cb6 <__aeabi_uidiv+0x3a>
10012d1a:	09c3      	lsrs	r3, r0, #7
10012d1c:	428b      	cmp	r3, r1
10012d1e:	d301      	bcc.n	10012d24 <__aeabi_uidiv+0xa8>
10012d20:	01cb      	lsls	r3, r1, #7
10012d22:	1ac0      	subs	r0, r0, r3
10012d24:	4152      	adcs	r2, r2
10012d26:	0983      	lsrs	r3, r0, #6
10012d28:	428b      	cmp	r3, r1
10012d2a:	d301      	bcc.n	10012d30 <__aeabi_uidiv+0xb4>
10012d2c:	018b      	lsls	r3, r1, #6
10012d2e:	1ac0      	subs	r0, r0, r3
10012d30:	4152      	adcs	r2, r2
10012d32:	0943      	lsrs	r3, r0, #5
10012d34:	428b      	cmp	r3, r1
10012d36:	d301      	bcc.n	10012d3c <__aeabi_uidiv+0xc0>
10012d38:	014b      	lsls	r3, r1, #5
10012d3a:	1ac0      	subs	r0, r0, r3
10012d3c:	4152      	adcs	r2, r2
10012d3e:	0903      	lsrs	r3, r0, #4
10012d40:	428b      	cmp	r3, r1
10012d42:	d301      	bcc.n	10012d48 <__aeabi_uidiv+0xcc>
10012d44:	010b      	lsls	r3, r1, #4
10012d46:	1ac0      	subs	r0, r0, r3
10012d48:	4152      	adcs	r2, r2
10012d4a:	08c3      	lsrs	r3, r0, #3
10012d4c:	428b      	cmp	r3, r1
10012d4e:	d301      	bcc.n	10012d54 <__aeabi_uidiv+0xd8>
10012d50:	00cb      	lsls	r3, r1, #3
10012d52:	1ac0      	subs	r0, r0, r3
10012d54:	4152      	adcs	r2, r2
10012d56:	0883      	lsrs	r3, r0, #2
10012d58:	428b      	cmp	r3, r1
10012d5a:	d301      	bcc.n	10012d60 <__aeabi_uidiv+0xe4>
10012d5c:	008b      	lsls	r3, r1, #2
10012d5e:	1ac0      	subs	r0, r0, r3
10012d60:	4152      	adcs	r2, r2
10012d62:	0843      	lsrs	r3, r0, #1
10012d64:	428b      	cmp	r3, r1
10012d66:	d301      	bcc.n	10012d6c <__aeabi_uidiv+0xf0>
10012d68:	004b      	lsls	r3, r1, #1
10012d6a:	1ac0      	subs	r0, r0, r3
10012d6c:	4152      	adcs	r2, r2
10012d6e:	1a41      	subs	r1, r0, r1
10012d70:	d200      	bcs.n	10012d74 <__aeabi_uidiv+0xf8>
10012d72:	4601      	mov	r1, r0
10012d74:	4152      	adcs	r2, r2
10012d76:	4610      	mov	r0, r2
10012d78:	4770      	bx	lr
10012d7a:	e7ff      	b.n	10012d7c <__aeabi_uidiv+0x100>
10012d7c:	b501      	push	{r0, lr}
10012d7e:	2000      	movs	r0, #0
10012d80:	f000 f8f0 	bl	10012f64 <__aeabi_idiv0>
10012d84:	bd02      	pop	{r1, pc}
10012d86:	46c0      	nop			; (mov r8, r8)

10012d88 <__aeabi_uidivmod>:
10012d88:	2900      	cmp	r1, #0
10012d8a:	d0f7      	beq.n	10012d7c <__aeabi_uidiv+0x100>
10012d8c:	e776      	b.n	10012c7c <__aeabi_uidiv>
10012d8e:	4770      	bx	lr

10012d90 <__aeabi_idiv>:
10012d90:	4603      	mov	r3, r0
10012d92:	430b      	orrs	r3, r1
10012d94:	d47f      	bmi.n	10012e96 <__aeabi_idiv+0x106>
10012d96:	2200      	movs	r2, #0
10012d98:	0843      	lsrs	r3, r0, #1
10012d9a:	428b      	cmp	r3, r1
10012d9c:	d374      	bcc.n	10012e88 <__aeabi_idiv+0xf8>
10012d9e:	0903      	lsrs	r3, r0, #4
10012da0:	428b      	cmp	r3, r1
10012da2:	d35f      	bcc.n	10012e64 <__aeabi_idiv+0xd4>
10012da4:	0a03      	lsrs	r3, r0, #8
10012da6:	428b      	cmp	r3, r1
10012da8:	d344      	bcc.n	10012e34 <__aeabi_idiv+0xa4>
10012daa:	0b03      	lsrs	r3, r0, #12
10012dac:	428b      	cmp	r3, r1
10012dae:	d328      	bcc.n	10012e02 <__aeabi_idiv+0x72>
10012db0:	0c03      	lsrs	r3, r0, #16
10012db2:	428b      	cmp	r3, r1
10012db4:	d30d      	bcc.n	10012dd2 <__aeabi_idiv+0x42>
10012db6:	22ff      	movs	r2, #255	; 0xff
10012db8:	0209      	lsls	r1, r1, #8
10012dba:	ba12      	rev	r2, r2
10012dbc:	0c03      	lsrs	r3, r0, #16
10012dbe:	428b      	cmp	r3, r1
10012dc0:	d302      	bcc.n	10012dc8 <__aeabi_idiv+0x38>
10012dc2:	1212      	asrs	r2, r2, #8
10012dc4:	0209      	lsls	r1, r1, #8
10012dc6:	d065      	beq.n	10012e94 <__aeabi_idiv+0x104>
10012dc8:	0b03      	lsrs	r3, r0, #12
10012dca:	428b      	cmp	r3, r1
10012dcc:	d319      	bcc.n	10012e02 <__aeabi_idiv+0x72>
10012dce:	e000      	b.n	10012dd2 <__aeabi_idiv+0x42>
10012dd0:	0a09      	lsrs	r1, r1, #8
10012dd2:	0bc3      	lsrs	r3, r0, #15
10012dd4:	428b      	cmp	r3, r1
10012dd6:	d301      	bcc.n	10012ddc <__aeabi_idiv+0x4c>
10012dd8:	03cb      	lsls	r3, r1, #15
10012dda:	1ac0      	subs	r0, r0, r3
10012ddc:	4152      	adcs	r2, r2
10012dde:	0b83      	lsrs	r3, r0, #14
10012de0:	428b      	cmp	r3, r1
10012de2:	d301      	bcc.n	10012de8 <__aeabi_idiv+0x58>
10012de4:	038b      	lsls	r3, r1, #14
10012de6:	1ac0      	subs	r0, r0, r3
10012de8:	4152      	adcs	r2, r2
10012dea:	0b43      	lsrs	r3, r0, #13
10012dec:	428b      	cmp	r3, r1
10012dee:	d301      	bcc.n	10012df4 <__aeabi_idiv+0x64>
10012df0:	034b      	lsls	r3, r1, #13
10012df2:	1ac0      	subs	r0, r0, r3
10012df4:	4152      	adcs	r2, r2
10012df6:	0b03      	lsrs	r3, r0, #12
10012df8:	428b      	cmp	r3, r1
10012dfa:	d301      	bcc.n	10012e00 <__aeabi_idiv+0x70>
10012dfc:	030b      	lsls	r3, r1, #12
10012dfe:	1ac0      	subs	r0, r0, r3
10012e00:	4152      	adcs	r2, r2
10012e02:	0ac3      	lsrs	r3, r0, #11
10012e04:	428b      	cmp	r3, r1
10012e06:	d301      	bcc.n	10012e0c <__aeabi_idiv+0x7c>
10012e08:	02cb      	lsls	r3, r1, #11
10012e0a:	1ac0      	subs	r0, r0, r3
10012e0c:	4152      	adcs	r2, r2
10012e0e:	0a83      	lsrs	r3, r0, #10
10012e10:	428b      	cmp	r3, r1
10012e12:	d301      	bcc.n	10012e18 <__aeabi_idiv+0x88>
10012e14:	028b      	lsls	r3, r1, #10
10012e16:	1ac0      	subs	r0, r0, r3
10012e18:	4152      	adcs	r2, r2
10012e1a:	0a43      	lsrs	r3, r0, #9
10012e1c:	428b      	cmp	r3, r1
10012e1e:	d301      	bcc.n	10012e24 <__aeabi_idiv+0x94>
10012e20:	024b      	lsls	r3, r1, #9
10012e22:	1ac0      	subs	r0, r0, r3
10012e24:	4152      	adcs	r2, r2
10012e26:	0a03      	lsrs	r3, r0, #8
10012e28:	428b      	cmp	r3, r1
10012e2a:	d301      	bcc.n	10012e30 <__aeabi_idiv+0xa0>
10012e2c:	020b      	lsls	r3, r1, #8
10012e2e:	1ac0      	subs	r0, r0, r3
10012e30:	4152      	adcs	r2, r2
10012e32:	d2cd      	bcs.n	10012dd0 <__aeabi_idiv+0x40>
10012e34:	09c3      	lsrs	r3, r0, #7
10012e36:	428b      	cmp	r3, r1
10012e38:	d301      	bcc.n	10012e3e <__aeabi_idiv+0xae>
10012e3a:	01cb      	lsls	r3, r1, #7
10012e3c:	1ac0      	subs	r0, r0, r3
10012e3e:	4152      	adcs	r2, r2
10012e40:	0983      	lsrs	r3, r0, #6
10012e42:	428b      	cmp	r3, r1
10012e44:	d301      	bcc.n	10012e4a <__aeabi_idiv+0xba>
10012e46:	018b      	lsls	r3, r1, #6
10012e48:	1ac0      	subs	r0, r0, r3
10012e4a:	4152      	adcs	r2, r2
10012e4c:	0943      	lsrs	r3, r0, #5
10012e4e:	428b      	cmp	r3, r1
10012e50:	d301      	bcc.n	10012e56 <__aeabi_idiv+0xc6>
10012e52:	014b      	lsls	r3, r1, #5
10012e54:	1ac0      	subs	r0, r0, r3
10012e56:	4152      	adcs	r2, r2
10012e58:	0903      	lsrs	r3, r0, #4
10012e5a:	428b      	cmp	r3, r1
10012e5c:	d301      	bcc.n	10012e62 <__aeabi_idiv+0xd2>
10012e5e:	010b      	lsls	r3, r1, #4
10012e60:	1ac0      	subs	r0, r0, r3
10012e62:	4152      	adcs	r2, r2
10012e64:	08c3      	lsrs	r3, r0, #3
10012e66:	428b      	cmp	r3, r1
10012e68:	d301      	bcc.n	10012e6e <__aeabi_idiv+0xde>
10012e6a:	00cb      	lsls	r3, r1, #3
10012e6c:	1ac0      	subs	r0, r0, r3
10012e6e:	4152      	adcs	r2, r2
10012e70:	0883      	lsrs	r3, r0, #2
10012e72:	428b      	cmp	r3, r1
10012e74:	d301      	bcc.n	10012e7a <__aeabi_idiv+0xea>
10012e76:	008b      	lsls	r3, r1, #2
10012e78:	1ac0      	subs	r0, r0, r3
10012e7a:	4152      	adcs	r2, r2
10012e7c:	0843      	lsrs	r3, r0, #1
10012e7e:	428b      	cmp	r3, r1
10012e80:	d301      	bcc.n	10012e86 <__aeabi_idiv+0xf6>
10012e82:	004b      	lsls	r3, r1, #1
10012e84:	1ac0      	subs	r0, r0, r3
10012e86:	4152      	adcs	r2, r2
10012e88:	1a41      	subs	r1, r0, r1
10012e8a:	d200      	bcs.n	10012e8e <__aeabi_idiv+0xfe>
10012e8c:	4601      	mov	r1, r0
10012e8e:	4152      	adcs	r2, r2
10012e90:	4610      	mov	r0, r2
10012e92:	4770      	bx	lr
10012e94:	e05d      	b.n	10012f52 <__aeabi_idiv+0x1c2>
10012e96:	0fca      	lsrs	r2, r1, #31
10012e98:	d000      	beq.n	10012e9c <__aeabi_idiv+0x10c>
10012e9a:	4249      	negs	r1, r1
10012e9c:	1003      	asrs	r3, r0, #32
10012e9e:	d300      	bcc.n	10012ea2 <__aeabi_idiv+0x112>
10012ea0:	4240      	negs	r0, r0
10012ea2:	4053      	eors	r3, r2
10012ea4:	2200      	movs	r2, #0
10012ea6:	469c      	mov	ip, r3
10012ea8:	0903      	lsrs	r3, r0, #4
10012eaa:	428b      	cmp	r3, r1
10012eac:	d32d      	bcc.n	10012f0a <__aeabi_idiv+0x17a>
10012eae:	0a03      	lsrs	r3, r0, #8
10012eb0:	428b      	cmp	r3, r1
10012eb2:	d312      	bcc.n	10012eda <__aeabi_idiv+0x14a>
10012eb4:	22fc      	movs	r2, #252	; 0xfc
10012eb6:	0189      	lsls	r1, r1, #6
10012eb8:	ba12      	rev	r2, r2
10012eba:	0a03      	lsrs	r3, r0, #8
10012ebc:	428b      	cmp	r3, r1
10012ebe:	d30c      	bcc.n	10012eda <__aeabi_idiv+0x14a>
10012ec0:	0189      	lsls	r1, r1, #6
10012ec2:	1192      	asrs	r2, r2, #6
10012ec4:	428b      	cmp	r3, r1
10012ec6:	d308      	bcc.n	10012eda <__aeabi_idiv+0x14a>
10012ec8:	0189      	lsls	r1, r1, #6
10012eca:	1192      	asrs	r2, r2, #6
10012ecc:	428b      	cmp	r3, r1
10012ece:	d304      	bcc.n	10012eda <__aeabi_idiv+0x14a>
10012ed0:	0189      	lsls	r1, r1, #6
10012ed2:	d03a      	beq.n	10012f4a <__aeabi_idiv+0x1ba>
10012ed4:	1192      	asrs	r2, r2, #6
10012ed6:	e000      	b.n	10012eda <__aeabi_idiv+0x14a>
10012ed8:	0989      	lsrs	r1, r1, #6
10012eda:	09c3      	lsrs	r3, r0, #7
10012edc:	428b      	cmp	r3, r1
10012ede:	d301      	bcc.n	10012ee4 <__aeabi_idiv+0x154>
10012ee0:	01cb      	lsls	r3, r1, #7
10012ee2:	1ac0      	subs	r0, r0, r3
10012ee4:	4152      	adcs	r2, r2
10012ee6:	0983      	lsrs	r3, r0, #6
10012ee8:	428b      	cmp	r3, r1
10012eea:	d301      	bcc.n	10012ef0 <__aeabi_idiv+0x160>
10012eec:	018b      	lsls	r3, r1, #6
10012eee:	1ac0      	subs	r0, r0, r3
10012ef0:	4152      	adcs	r2, r2
10012ef2:	0943      	lsrs	r3, r0, #5
10012ef4:	428b      	cmp	r3, r1
10012ef6:	d301      	bcc.n	10012efc <__aeabi_idiv+0x16c>
10012ef8:	014b      	lsls	r3, r1, #5
10012efa:	1ac0      	subs	r0, r0, r3
10012efc:	4152      	adcs	r2, r2
10012efe:	0903      	lsrs	r3, r0, #4
10012f00:	428b      	cmp	r3, r1
10012f02:	d301      	bcc.n	10012f08 <__aeabi_idiv+0x178>
10012f04:	010b      	lsls	r3, r1, #4
10012f06:	1ac0      	subs	r0, r0, r3
10012f08:	4152      	adcs	r2, r2
10012f0a:	08c3      	lsrs	r3, r0, #3
10012f0c:	428b      	cmp	r3, r1
10012f0e:	d301      	bcc.n	10012f14 <__aeabi_idiv+0x184>
10012f10:	00cb      	lsls	r3, r1, #3
10012f12:	1ac0      	subs	r0, r0, r3
10012f14:	4152      	adcs	r2, r2
10012f16:	0883      	lsrs	r3, r0, #2
10012f18:	428b      	cmp	r3, r1
10012f1a:	d301      	bcc.n	10012f20 <__aeabi_idiv+0x190>
10012f1c:	008b      	lsls	r3, r1, #2
10012f1e:	1ac0      	subs	r0, r0, r3
10012f20:	4152      	adcs	r2, r2
10012f22:	d2d9      	bcs.n	10012ed8 <__aeabi_idiv+0x148>
10012f24:	0843      	lsrs	r3, r0, #1
10012f26:	428b      	cmp	r3, r1
10012f28:	d301      	bcc.n	10012f2e <__aeabi_idiv+0x19e>
10012f2a:	004b      	lsls	r3, r1, #1
10012f2c:	1ac0      	subs	r0, r0, r3
10012f2e:	4152      	adcs	r2, r2
10012f30:	1a41      	subs	r1, r0, r1
10012f32:	d200      	bcs.n	10012f36 <__aeabi_idiv+0x1a6>
10012f34:	4601      	mov	r1, r0
10012f36:	4663      	mov	r3, ip
10012f38:	4152      	adcs	r2, r2
10012f3a:	105b      	asrs	r3, r3, #1
10012f3c:	4610      	mov	r0, r2
10012f3e:	d301      	bcc.n	10012f44 <__aeabi_idiv+0x1b4>
10012f40:	4240      	negs	r0, r0
10012f42:	2b00      	cmp	r3, #0
10012f44:	d500      	bpl.n	10012f48 <__aeabi_idiv+0x1b8>
10012f46:	4249      	negs	r1, r1
10012f48:	4770      	bx	lr
10012f4a:	4663      	mov	r3, ip
10012f4c:	105b      	asrs	r3, r3, #1
10012f4e:	d300      	bcc.n	10012f52 <__aeabi_idiv+0x1c2>
10012f50:	4240      	negs	r0, r0
10012f52:	b501      	push	{r0, lr}
10012f54:	2000      	movs	r0, #0
10012f56:	f000 f805 	bl	10012f64 <__aeabi_idiv0>
10012f5a:	bd02      	pop	{r1, pc}

10012f5c <__aeabi_idivmod>:
10012f5c:	2900      	cmp	r1, #0
10012f5e:	d0f8      	beq.n	10012f52 <__aeabi_idiv+0x1c2>
10012f60:	e716      	b.n	10012d90 <__aeabi_idiv>
10012f62:	4770      	bx	lr

10012f64 <__aeabi_idiv0>:
10012f64:	4770      	bx	lr
10012f66:	46c0      	nop			; (mov r8, r8)

10012f68 <__aeabi_cdrcmple>:
10012f68:	4684      	mov	ip, r0
10012f6a:	1c10      	adds	r0, r2, #0
10012f6c:	4662      	mov	r2, ip
10012f6e:	468c      	mov	ip, r1
10012f70:	1c19      	adds	r1, r3, #0
10012f72:	4663      	mov	r3, ip
10012f74:	e000      	b.n	10012f78 <__aeabi_cdcmpeq>
10012f76:	46c0      	nop			; (mov r8, r8)

10012f78 <__aeabi_cdcmpeq>:
10012f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012f7a:	f000 fe37 	bl	10013bec <__ledf2>
10012f7e:	2800      	cmp	r0, #0
10012f80:	d401      	bmi.n	10012f86 <__aeabi_cdcmpeq+0xe>
10012f82:	2100      	movs	r1, #0
10012f84:	42c8      	cmn	r0, r1
10012f86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012f88 <__aeabi_dcmpeq>:
10012f88:	b510      	push	{r4, lr}
10012f8a:	f000 fd8b 	bl	10013aa4 <__eqdf2>
10012f8e:	4240      	negs	r0, r0
10012f90:	3001      	adds	r0, #1
10012f92:	bd10      	pop	{r4, pc}

10012f94 <__aeabi_dcmplt>:
10012f94:	b510      	push	{r4, lr}
10012f96:	f000 fe29 	bl	10013bec <__ledf2>
10012f9a:	2800      	cmp	r0, #0
10012f9c:	db01      	blt.n	10012fa2 <__aeabi_dcmplt+0xe>
10012f9e:	2000      	movs	r0, #0
10012fa0:	bd10      	pop	{r4, pc}
10012fa2:	2001      	movs	r0, #1
10012fa4:	bd10      	pop	{r4, pc}
10012fa6:	46c0      	nop			; (mov r8, r8)

10012fa8 <__aeabi_dcmple>:
10012fa8:	b510      	push	{r4, lr}
10012faa:	f000 fe1f 	bl	10013bec <__ledf2>
10012fae:	2800      	cmp	r0, #0
10012fb0:	dd01      	ble.n	10012fb6 <__aeabi_dcmple+0xe>
10012fb2:	2000      	movs	r0, #0
10012fb4:	bd10      	pop	{r4, pc}
10012fb6:	2001      	movs	r0, #1
10012fb8:	bd10      	pop	{r4, pc}
10012fba:	46c0      	nop			; (mov r8, r8)

10012fbc <__aeabi_dcmpgt>:
10012fbc:	b510      	push	{r4, lr}
10012fbe:	f000 fdb1 	bl	10013b24 <__gedf2>
10012fc2:	2800      	cmp	r0, #0
10012fc4:	dc01      	bgt.n	10012fca <__aeabi_dcmpgt+0xe>
10012fc6:	2000      	movs	r0, #0
10012fc8:	bd10      	pop	{r4, pc}
10012fca:	2001      	movs	r0, #1
10012fcc:	bd10      	pop	{r4, pc}
10012fce:	46c0      	nop			; (mov r8, r8)

10012fd0 <__aeabi_dcmpge>:
10012fd0:	b510      	push	{r4, lr}
10012fd2:	f000 fda7 	bl	10013b24 <__gedf2>
10012fd6:	2800      	cmp	r0, #0
10012fd8:	da01      	bge.n	10012fde <__aeabi_dcmpge+0xe>
10012fda:	2000      	movs	r0, #0
10012fdc:	bd10      	pop	{r4, pc}
10012fde:	2001      	movs	r0, #1
10012fe0:	bd10      	pop	{r4, pc}
10012fe2:	46c0      	nop			; (mov r8, r8)

10012fe4 <__aeabi_cfrcmple>:
10012fe4:	4684      	mov	ip, r0
10012fe6:	1c08      	adds	r0, r1, #0
10012fe8:	4661      	mov	r1, ip
10012fea:	e7ff      	b.n	10012fec <__aeabi_cfcmpeq>

10012fec <__aeabi_cfcmpeq>:
10012fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012fee:	f000 fa1b 	bl	10013428 <__lesf2>
10012ff2:	2800      	cmp	r0, #0
10012ff4:	d401      	bmi.n	10012ffa <__aeabi_cfcmpeq+0xe>
10012ff6:	2100      	movs	r1, #0
10012ff8:	42c8      	cmn	r0, r1
10012ffa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012ffc <__aeabi_fcmpeq>:
10012ffc:	b510      	push	{r4, lr}
10012ffe:	f000 f9a7 	bl	10013350 <__eqsf2>
10013002:	4240      	negs	r0, r0
10013004:	3001      	adds	r0, #1
10013006:	bd10      	pop	{r4, pc}

10013008 <__aeabi_fcmplt>:
10013008:	b510      	push	{r4, lr}
1001300a:	f000 fa0d 	bl	10013428 <__lesf2>
1001300e:	2800      	cmp	r0, #0
10013010:	db01      	blt.n	10013016 <__aeabi_fcmplt+0xe>
10013012:	2000      	movs	r0, #0
10013014:	bd10      	pop	{r4, pc}
10013016:	2001      	movs	r0, #1
10013018:	bd10      	pop	{r4, pc}
1001301a:	46c0      	nop			; (mov r8, r8)

1001301c <__aeabi_fcmple>:
1001301c:	b510      	push	{r4, lr}
1001301e:	f000 fa03 	bl	10013428 <__lesf2>
10013022:	2800      	cmp	r0, #0
10013024:	dd01      	ble.n	1001302a <__aeabi_fcmple+0xe>
10013026:	2000      	movs	r0, #0
10013028:	bd10      	pop	{r4, pc}
1001302a:	2001      	movs	r0, #1
1001302c:	bd10      	pop	{r4, pc}
1001302e:	46c0      	nop			; (mov r8, r8)

10013030 <__aeabi_fcmpgt>:
10013030:	b510      	push	{r4, lr}
10013032:	f000 f9b5 	bl	100133a0 <__gesf2>
10013036:	2800      	cmp	r0, #0
10013038:	dc01      	bgt.n	1001303e <__aeabi_fcmpgt+0xe>
1001303a:	2000      	movs	r0, #0
1001303c:	bd10      	pop	{r4, pc}
1001303e:	2001      	movs	r0, #1
10013040:	bd10      	pop	{r4, pc}
10013042:	46c0      	nop			; (mov r8, r8)

10013044 <__aeabi_fcmpge>:
10013044:	b510      	push	{r4, lr}
10013046:	f000 f9ab 	bl	100133a0 <__gesf2>
1001304a:	2800      	cmp	r0, #0
1001304c:	da01      	bge.n	10013052 <__aeabi_fcmpge+0xe>
1001304e:	2000      	movs	r0, #0
10013050:	bd10      	pop	{r4, pc}
10013052:	2001      	movs	r0, #1
10013054:	bd10      	pop	{r4, pc}
10013056:	46c0      	nop			; (mov r8, r8)

10013058 <__aeabi_lmul>:
10013058:	b5f0      	push	{r4, r5, r6, r7, lr}
1001305a:	464f      	mov	r7, r9
1001305c:	4646      	mov	r6, r8
1001305e:	b4c0      	push	{r6, r7}
10013060:	0416      	lsls	r6, r2, #16
10013062:	0c36      	lsrs	r6, r6, #16
10013064:	4699      	mov	r9, r3
10013066:	0033      	movs	r3, r6
10013068:	0405      	lsls	r5, r0, #16
1001306a:	0c2c      	lsrs	r4, r5, #16
1001306c:	0c07      	lsrs	r7, r0, #16
1001306e:	0c15      	lsrs	r5, r2, #16
10013070:	4363      	muls	r3, r4
10013072:	437e      	muls	r6, r7
10013074:	436f      	muls	r7, r5
10013076:	4365      	muls	r5, r4
10013078:	0c1c      	lsrs	r4, r3, #16
1001307a:	19ad      	adds	r5, r5, r6
1001307c:	1964      	adds	r4, r4, r5
1001307e:	469c      	mov	ip, r3
10013080:	42a6      	cmp	r6, r4
10013082:	d903      	bls.n	1001308c <__aeabi_lmul+0x34>
10013084:	2380      	movs	r3, #128	; 0x80
10013086:	025b      	lsls	r3, r3, #9
10013088:	4698      	mov	r8, r3
1001308a:	4447      	add	r7, r8
1001308c:	4663      	mov	r3, ip
1001308e:	0c25      	lsrs	r5, r4, #16
10013090:	19ef      	adds	r7, r5, r7
10013092:	041d      	lsls	r5, r3, #16
10013094:	464b      	mov	r3, r9
10013096:	434a      	muls	r2, r1
10013098:	4343      	muls	r3, r0
1001309a:	0c2d      	lsrs	r5, r5, #16
1001309c:	0424      	lsls	r4, r4, #16
1001309e:	1964      	adds	r4, r4, r5
100130a0:	1899      	adds	r1, r3, r2
100130a2:	19c9      	adds	r1, r1, r7
100130a4:	0020      	movs	r0, r4
100130a6:	bc0c      	pop	{r2, r3}
100130a8:	4690      	mov	r8, r2
100130aa:	4699      	mov	r9, r3
100130ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100130ae:	46c0      	nop			; (mov r8, r8)

100130b0 <__aeabi_f2uiz>:
100130b0:	219e      	movs	r1, #158	; 0x9e
100130b2:	b510      	push	{r4, lr}
100130b4:	05c9      	lsls	r1, r1, #23
100130b6:	1c04      	adds	r4, r0, #0
100130b8:	f7ff ffc4 	bl	10013044 <__aeabi_fcmpge>
100130bc:	2800      	cmp	r0, #0
100130be:	d103      	bne.n	100130c8 <__aeabi_f2uiz+0x18>
100130c0:	1c20      	adds	r0, r4, #0
100130c2:	f000 fc8f 	bl	100139e4 <__aeabi_f2iz>
100130c6:	bd10      	pop	{r4, pc}
100130c8:	219e      	movs	r1, #158	; 0x9e
100130ca:	1c20      	adds	r0, r4, #0
100130cc:	05c9      	lsls	r1, r1, #23
100130ce:	f000 fb03 	bl	100136d8 <__aeabi_fsub>
100130d2:	f000 fc87 	bl	100139e4 <__aeabi_f2iz>
100130d6:	2380      	movs	r3, #128	; 0x80
100130d8:	061b      	lsls	r3, r3, #24
100130da:	469c      	mov	ip, r3
100130dc:	4460      	add	r0, ip
100130de:	e7f2      	b.n	100130c6 <__aeabi_f2uiz+0x16>

100130e0 <__aeabi_d2uiz>:
100130e0:	b570      	push	{r4, r5, r6, lr}
100130e2:	2200      	movs	r2, #0
100130e4:	4b0c      	ldr	r3, [pc, #48]	; (10013118 <__aeabi_d2uiz+0x38>)
100130e6:	0004      	movs	r4, r0
100130e8:	000d      	movs	r5, r1
100130ea:	f7ff ff71 	bl	10012fd0 <__aeabi_dcmpge>
100130ee:	2800      	cmp	r0, #0
100130f0:	d104      	bne.n	100130fc <__aeabi_d2uiz+0x1c>
100130f2:	0020      	movs	r0, r4
100130f4:	0029      	movs	r1, r5
100130f6:	f001 fbb1 	bl	1001485c <__aeabi_d2iz>
100130fa:	bd70      	pop	{r4, r5, r6, pc}
100130fc:	4b06      	ldr	r3, [pc, #24]	; (10013118 <__aeabi_d2uiz+0x38>)
100130fe:	2200      	movs	r2, #0
10013100:	0020      	movs	r0, r4
10013102:	0029      	movs	r1, r5
10013104:	f001 f856 	bl	100141b4 <__aeabi_dsub>
10013108:	f001 fba8 	bl	1001485c <__aeabi_d2iz>
1001310c:	2380      	movs	r3, #128	; 0x80
1001310e:	061b      	lsls	r3, r3, #24
10013110:	469c      	mov	ip, r3
10013112:	4460      	add	r0, ip
10013114:	e7f1      	b.n	100130fa <__aeabi_d2uiz+0x1a>
10013116:	46c0      	nop			; (mov r8, r8)
10013118:	41e00000 	.word	0x41e00000

1001311c <__aeabi_fdiv>:
1001311c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001311e:	4656      	mov	r6, sl
10013120:	4644      	mov	r4, r8
10013122:	465f      	mov	r7, fp
10013124:	464d      	mov	r5, r9
10013126:	b4f0      	push	{r4, r5, r6, r7}
10013128:	0244      	lsls	r4, r0, #9
1001312a:	0046      	lsls	r6, r0, #1
1001312c:	0fc7      	lsrs	r7, r0, #31
1001312e:	b083      	sub	sp, #12
10013130:	4688      	mov	r8, r1
10013132:	0a65      	lsrs	r5, r4, #9
10013134:	0e36      	lsrs	r6, r6, #24
10013136:	46ba      	mov	sl, r7
10013138:	d03d      	beq.n	100131b6 <__aeabi_fdiv+0x9a>
1001313a:	2eff      	cmp	r6, #255	; 0xff
1001313c:	d022      	beq.n	10013184 <__aeabi_fdiv+0x68>
1001313e:	2300      	movs	r3, #0
10013140:	00ec      	lsls	r4, r5, #3
10013142:	2580      	movs	r5, #128	; 0x80
10013144:	4699      	mov	r9, r3
10013146:	469b      	mov	fp, r3
10013148:	04ed      	lsls	r5, r5, #19
1001314a:	4325      	orrs	r5, r4
1001314c:	3e7f      	subs	r6, #127	; 0x7f
1001314e:	4643      	mov	r3, r8
10013150:	025c      	lsls	r4, r3, #9
10013152:	0058      	lsls	r0, r3, #1
10013154:	0fdb      	lsrs	r3, r3, #31
10013156:	0a64      	lsrs	r4, r4, #9
10013158:	0e00      	lsrs	r0, r0, #24
1001315a:	4698      	mov	r8, r3
1001315c:	d036      	beq.n	100131cc <__aeabi_fdiv+0xb0>
1001315e:	28ff      	cmp	r0, #255	; 0xff
10013160:	d030      	beq.n	100131c4 <__aeabi_fdiv+0xa8>
10013162:	2380      	movs	r3, #128	; 0x80
10013164:	2100      	movs	r1, #0
10013166:	00e4      	lsls	r4, r4, #3
10013168:	04db      	lsls	r3, r3, #19
1001316a:	431c      	orrs	r4, r3
1001316c:	387f      	subs	r0, #127	; 0x7f
1001316e:	1a30      	subs	r0, r6, r0
10013170:	9001      	str	r0, [sp, #4]
10013172:	4648      	mov	r0, r9
10013174:	4642      	mov	r2, r8
10013176:	4308      	orrs	r0, r1
10013178:	4e72      	ldr	r6, [pc, #456]	; (10013344 <__aeabi_fdiv+0x228>)
1001317a:	0080      	lsls	r0, r0, #2
1001317c:	5830      	ldr	r0, [r6, r0]
1001317e:	407a      	eors	r2, r7
10013180:	0013      	movs	r3, r2
10013182:	4687      	mov	pc, r0
10013184:	2d00      	cmp	r5, #0
10013186:	d144      	bne.n	10013212 <__aeabi_fdiv+0xf6>
10013188:	2308      	movs	r3, #8
1001318a:	4699      	mov	r9, r3
1001318c:	3b06      	subs	r3, #6
1001318e:	469b      	mov	fp, r3
10013190:	e7dd      	b.n	1001314e <__aeabi_fdiv+0x32>
10013192:	2201      	movs	r2, #1
10013194:	20ff      	movs	r0, #255	; 0xff
10013196:	2400      	movs	r4, #0
10013198:	401a      	ands	r2, r3
1001319a:	0264      	lsls	r4, r4, #9
1001319c:	05c3      	lsls	r3, r0, #23
1001319e:	0a64      	lsrs	r4, r4, #9
100131a0:	07d2      	lsls	r2, r2, #31
100131a2:	431c      	orrs	r4, r3
100131a4:	4314      	orrs	r4, r2
100131a6:	0020      	movs	r0, r4
100131a8:	b003      	add	sp, #12
100131aa:	bc3c      	pop	{r2, r3, r4, r5}
100131ac:	4690      	mov	r8, r2
100131ae:	4699      	mov	r9, r3
100131b0:	46a2      	mov	sl, r4
100131b2:	46ab      	mov	fp, r5
100131b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131b6:	2d00      	cmp	r5, #0
100131b8:	d120      	bne.n	100131fc <__aeabi_fdiv+0xe0>
100131ba:	2304      	movs	r3, #4
100131bc:	4699      	mov	r9, r3
100131be:	3b03      	subs	r3, #3
100131c0:	469b      	mov	fp, r3
100131c2:	e7c4      	b.n	1001314e <__aeabi_fdiv+0x32>
100131c4:	2c00      	cmp	r4, #0
100131c6:	d117      	bne.n	100131f8 <__aeabi_fdiv+0xdc>
100131c8:	2102      	movs	r1, #2
100131ca:	e002      	b.n	100131d2 <__aeabi_fdiv+0xb6>
100131cc:	2c00      	cmp	r4, #0
100131ce:	d10a      	bne.n	100131e6 <__aeabi_fdiv+0xca>
100131d0:	2101      	movs	r1, #1
100131d2:	1a32      	subs	r2, r6, r0
100131d4:	9201      	str	r2, [sp, #4]
100131d6:	464a      	mov	r2, r9
100131d8:	4643      	mov	r3, r8
100131da:	430a      	orrs	r2, r1
100131dc:	485a      	ldr	r0, [pc, #360]	; (10013348 <__aeabi_fdiv+0x22c>)
100131de:	0092      	lsls	r2, r2, #2
100131e0:	5882      	ldr	r2, [r0, r2]
100131e2:	407b      	eors	r3, r7
100131e4:	4697      	mov	pc, r2
100131e6:	0020      	movs	r0, r4
100131e8:	f001 fba6 	bl	10014938 <__clzsi2>
100131ec:	1f43      	subs	r3, r0, #5
100131ee:	3076      	adds	r0, #118	; 0x76
100131f0:	409c      	lsls	r4, r3
100131f2:	4240      	negs	r0, r0
100131f4:	2100      	movs	r1, #0
100131f6:	e7ba      	b.n	1001316e <__aeabi_fdiv+0x52>
100131f8:	2103      	movs	r1, #3
100131fa:	e7b8      	b.n	1001316e <__aeabi_fdiv+0x52>
100131fc:	0028      	movs	r0, r5
100131fe:	f001 fb9b 	bl	10014938 <__clzsi2>
10013202:	1f43      	subs	r3, r0, #5
10013204:	409d      	lsls	r5, r3
10013206:	2300      	movs	r3, #0
10013208:	3076      	adds	r0, #118	; 0x76
1001320a:	4246      	negs	r6, r0
1001320c:	4699      	mov	r9, r3
1001320e:	469b      	mov	fp, r3
10013210:	e79d      	b.n	1001314e <__aeabi_fdiv+0x32>
10013212:	230c      	movs	r3, #12
10013214:	4699      	mov	r9, r3
10013216:	3b09      	subs	r3, #9
10013218:	469b      	mov	fp, r3
1001321a:	e798      	b.n	1001314e <__aeabi_fdiv+0x32>
1001321c:	2480      	movs	r4, #128	; 0x80
1001321e:	2200      	movs	r2, #0
10013220:	03e4      	lsls	r4, r4, #15
10013222:	20ff      	movs	r0, #255	; 0xff
10013224:	e7b9      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013226:	2400      	movs	r4, #0
10013228:	46c2      	mov	sl, r8
1001322a:	468b      	mov	fp, r1
1001322c:	465a      	mov	r2, fp
1001322e:	4653      	mov	r3, sl
10013230:	2a02      	cmp	r2, #2
10013232:	d0ae      	beq.n	10013192 <__aeabi_fdiv+0x76>
10013234:	2a03      	cmp	r2, #3
10013236:	d07d      	beq.n	10013334 <__aeabi_fdiv+0x218>
10013238:	2a01      	cmp	r2, #1
1001323a:	d131      	bne.n	100132a0 <__aeabi_fdiv+0x184>
1001323c:	2201      	movs	r2, #1
1001323e:	2000      	movs	r0, #0
10013240:	401a      	ands	r2, r3
10013242:	2400      	movs	r4, #0
10013244:	e7a9      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013246:	2201      	movs	r2, #1
10013248:	1a10      	subs	r0, r2, r0
1001324a:	281b      	cmp	r0, #27
1001324c:	dd56      	ble.n	100132fc <__aeabi_fdiv+0x1e0>
1001324e:	401a      	ands	r2, r3
10013250:	2000      	movs	r0, #0
10013252:	2400      	movs	r4, #0
10013254:	e7a1      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013256:	2380      	movs	r3, #128	; 0x80
10013258:	03db      	lsls	r3, r3, #15
1001325a:	421d      	tst	r5, r3
1001325c:	d14b      	bne.n	100132f6 <__aeabi_fdiv+0x1da>
1001325e:	2380      	movs	r3, #128	; 0x80
10013260:	03db      	lsls	r3, r3, #15
10013262:	432b      	orrs	r3, r5
10013264:	025c      	lsls	r4, r3, #9
10013266:	0a64      	lsrs	r4, r4, #9
10013268:	003a      	movs	r2, r7
1001326a:	20ff      	movs	r0, #255	; 0xff
1001326c:	e795      	b.n	1001319a <__aeabi_fdiv+0x7e>
1001326e:	016d      	lsls	r5, r5, #5
10013270:	0160      	lsls	r0, r4, #5
10013272:	4285      	cmp	r5, r0
10013274:	d230      	bcs.n	100132d8 <__aeabi_fdiv+0x1bc>
10013276:	9a01      	ldr	r2, [sp, #4]
10013278:	2400      	movs	r4, #0
1001327a:	3a01      	subs	r2, #1
1001327c:	9201      	str	r2, [sp, #4]
1001327e:	221b      	movs	r2, #27
10013280:	2701      	movs	r7, #1
10013282:	0029      	movs	r1, r5
10013284:	0064      	lsls	r4, r4, #1
10013286:	006d      	lsls	r5, r5, #1
10013288:	2900      	cmp	r1, #0
1001328a:	db01      	blt.n	10013290 <__aeabi_fdiv+0x174>
1001328c:	42a8      	cmp	r0, r5
1001328e:	d801      	bhi.n	10013294 <__aeabi_fdiv+0x178>
10013290:	1a2d      	subs	r5, r5, r0
10013292:	433c      	orrs	r4, r7
10013294:	3a01      	subs	r2, #1
10013296:	2a00      	cmp	r2, #0
10013298:	d1f3      	bne.n	10013282 <__aeabi_fdiv+0x166>
1001329a:	1e6a      	subs	r2, r5, #1
1001329c:	4195      	sbcs	r5, r2
1001329e:	432c      	orrs	r4, r5
100132a0:	9801      	ldr	r0, [sp, #4]
100132a2:	307f      	adds	r0, #127	; 0x7f
100132a4:	2800      	cmp	r0, #0
100132a6:	ddce      	ble.n	10013246 <__aeabi_fdiv+0x12a>
100132a8:	0762      	lsls	r2, r4, #29
100132aa:	d004      	beq.n	100132b6 <__aeabi_fdiv+0x19a>
100132ac:	220f      	movs	r2, #15
100132ae:	4022      	ands	r2, r4
100132b0:	2a04      	cmp	r2, #4
100132b2:	d000      	beq.n	100132b6 <__aeabi_fdiv+0x19a>
100132b4:	3404      	adds	r4, #4
100132b6:	0122      	lsls	r2, r4, #4
100132b8:	d503      	bpl.n	100132c2 <__aeabi_fdiv+0x1a6>
100132ba:	4a24      	ldr	r2, [pc, #144]	; (1001334c <__aeabi_fdiv+0x230>)
100132bc:	9801      	ldr	r0, [sp, #4]
100132be:	4014      	ands	r4, r2
100132c0:	3080      	adds	r0, #128	; 0x80
100132c2:	28fe      	cmp	r0, #254	; 0xfe
100132c4:	dd00      	ble.n	100132c8 <__aeabi_fdiv+0x1ac>
100132c6:	e764      	b.n	10013192 <__aeabi_fdiv+0x76>
100132c8:	2201      	movs	r2, #1
100132ca:	01a4      	lsls	r4, r4, #6
100132cc:	0a64      	lsrs	r4, r4, #9
100132ce:	b2c0      	uxtb	r0, r0
100132d0:	401a      	ands	r2, r3
100132d2:	e762      	b.n	1001319a <__aeabi_fdiv+0x7e>
100132d4:	002c      	movs	r4, r5
100132d6:	e7a9      	b.n	1001322c <__aeabi_fdiv+0x110>
100132d8:	1a2d      	subs	r5, r5, r0
100132da:	221a      	movs	r2, #26
100132dc:	2401      	movs	r4, #1
100132de:	e7cf      	b.n	10013280 <__aeabi_fdiv+0x164>
100132e0:	026b      	lsls	r3, r5, #9
100132e2:	d5bc      	bpl.n	1001325e <__aeabi_fdiv+0x142>
100132e4:	2400      	movs	r4, #0
100132e6:	2380      	movs	r3, #128	; 0x80
100132e8:	03db      	lsls	r3, r3, #15
100132ea:	431c      	orrs	r4, r3
100132ec:	0264      	lsls	r4, r4, #9
100132ee:	0a64      	lsrs	r4, r4, #9
100132f0:	4642      	mov	r2, r8
100132f2:	20ff      	movs	r0, #255	; 0xff
100132f4:	e751      	b.n	1001319a <__aeabi_fdiv+0x7e>
100132f6:	421c      	tst	r4, r3
100132f8:	d1b3      	bne.n	10013262 <__aeabi_fdiv+0x146>
100132fa:	e7f4      	b.n	100132e6 <__aeabi_fdiv+0x1ca>
100132fc:	0021      	movs	r1, r4
100132fe:	2220      	movs	r2, #32
10013300:	40c1      	lsrs	r1, r0
10013302:	1a10      	subs	r0, r2, r0
10013304:	4084      	lsls	r4, r0
10013306:	1e62      	subs	r2, r4, #1
10013308:	4194      	sbcs	r4, r2
1001330a:	430c      	orrs	r4, r1
1001330c:	0762      	lsls	r2, r4, #29
1001330e:	d004      	beq.n	1001331a <__aeabi_fdiv+0x1fe>
10013310:	220f      	movs	r2, #15
10013312:	4022      	ands	r2, r4
10013314:	2a04      	cmp	r2, #4
10013316:	d000      	beq.n	1001331a <__aeabi_fdiv+0x1fe>
10013318:	3404      	adds	r4, #4
1001331a:	0162      	lsls	r2, r4, #5
1001331c:	d504      	bpl.n	10013328 <__aeabi_fdiv+0x20c>
1001331e:	2201      	movs	r2, #1
10013320:	2001      	movs	r0, #1
10013322:	401a      	ands	r2, r3
10013324:	2400      	movs	r4, #0
10013326:	e738      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013328:	2201      	movs	r2, #1
1001332a:	01a4      	lsls	r4, r4, #6
1001332c:	0a64      	lsrs	r4, r4, #9
1001332e:	401a      	ands	r2, r3
10013330:	2000      	movs	r0, #0
10013332:	e732      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013334:	2380      	movs	r3, #128	; 0x80
10013336:	03db      	lsls	r3, r3, #15
10013338:	431c      	orrs	r4, r3
1001333a:	0264      	lsls	r4, r4, #9
1001333c:	0a64      	lsrs	r4, r4, #9
1001333e:	4652      	mov	r2, sl
10013340:	20ff      	movs	r0, #255	; 0xff
10013342:	e72a      	b.n	1001319a <__aeabi_fdiv+0x7e>
10013344:	10017c0c 	.word	0x10017c0c
10013348:	10017c4c 	.word	0x10017c4c
1001334c:	f7ffffff 	.word	0xf7ffffff

10013350 <__eqsf2>:
10013350:	0243      	lsls	r3, r0, #9
10013352:	b570      	push	{r4, r5, r6, lr}
10013354:	0042      	lsls	r2, r0, #1
10013356:	004c      	lsls	r4, r1, #1
10013358:	0a5d      	lsrs	r5, r3, #9
1001335a:	0fc3      	lsrs	r3, r0, #31
1001335c:	0248      	lsls	r0, r1, #9
1001335e:	0e12      	lsrs	r2, r2, #24
10013360:	0a46      	lsrs	r6, r0, #9
10013362:	0e24      	lsrs	r4, r4, #24
10013364:	0fc9      	lsrs	r1, r1, #31
10013366:	2aff      	cmp	r2, #255	; 0xff
10013368:	d00f      	beq.n	1001338a <__eqsf2+0x3a>
1001336a:	2cff      	cmp	r4, #255	; 0xff
1001336c:	d011      	beq.n	10013392 <__eqsf2+0x42>
1001336e:	2001      	movs	r0, #1
10013370:	42a2      	cmp	r2, r4
10013372:	d000      	beq.n	10013376 <__eqsf2+0x26>
10013374:	bd70      	pop	{r4, r5, r6, pc}
10013376:	42b5      	cmp	r5, r6
10013378:	d1fc      	bne.n	10013374 <__eqsf2+0x24>
1001337a:	428b      	cmp	r3, r1
1001337c:	d00d      	beq.n	1001339a <__eqsf2+0x4a>
1001337e:	2a00      	cmp	r2, #0
10013380:	d1f8      	bne.n	10013374 <__eqsf2+0x24>
10013382:	0028      	movs	r0, r5
10013384:	1e43      	subs	r3, r0, #1
10013386:	4198      	sbcs	r0, r3
10013388:	e7f4      	b.n	10013374 <__eqsf2+0x24>
1001338a:	2001      	movs	r0, #1
1001338c:	2d00      	cmp	r5, #0
1001338e:	d1f1      	bne.n	10013374 <__eqsf2+0x24>
10013390:	e7eb      	b.n	1001336a <__eqsf2+0x1a>
10013392:	2001      	movs	r0, #1
10013394:	2e00      	cmp	r6, #0
10013396:	d1ed      	bne.n	10013374 <__eqsf2+0x24>
10013398:	e7e9      	b.n	1001336e <__eqsf2+0x1e>
1001339a:	2000      	movs	r0, #0
1001339c:	e7ea      	b.n	10013374 <__eqsf2+0x24>
1001339e:	46c0      	nop			; (mov r8, r8)

100133a0 <__gesf2>:
100133a0:	0243      	lsls	r3, r0, #9
100133a2:	b5f0      	push	{r4, r5, r6, r7, lr}
100133a4:	0042      	lsls	r2, r0, #1
100133a6:	0a5d      	lsrs	r5, r3, #9
100133a8:	0fc3      	lsrs	r3, r0, #31
100133aa:	0248      	lsls	r0, r1, #9
100133ac:	0a44      	lsrs	r4, r0, #9
100133ae:	0048      	lsls	r0, r1, #1
100133b0:	0e12      	lsrs	r2, r2, #24
100133b2:	0e00      	lsrs	r0, r0, #24
100133b4:	0fc9      	lsrs	r1, r1, #31
100133b6:	2aff      	cmp	r2, #255	; 0xff
100133b8:	d01f      	beq.n	100133fa <__gesf2+0x5a>
100133ba:	28ff      	cmp	r0, #255	; 0xff
100133bc:	d022      	beq.n	10013404 <__gesf2+0x64>
100133be:	2a00      	cmp	r2, #0
100133c0:	d109      	bne.n	100133d6 <__gesf2+0x36>
100133c2:	426e      	negs	r6, r5
100133c4:	416e      	adcs	r6, r5
100133c6:	2800      	cmp	r0, #0
100133c8:	d10f      	bne.n	100133ea <__gesf2+0x4a>
100133ca:	2c00      	cmp	r4, #0
100133cc:	d10d      	bne.n	100133ea <__gesf2+0x4a>
100133ce:	2000      	movs	r0, #0
100133d0:	2d00      	cmp	r5, #0
100133d2:	d009      	beq.n	100133e8 <__gesf2+0x48>
100133d4:	e005      	b.n	100133e2 <__gesf2+0x42>
100133d6:	2800      	cmp	r0, #0
100133d8:	d101      	bne.n	100133de <__gesf2+0x3e>
100133da:	2c00      	cmp	r4, #0
100133dc:	d001      	beq.n	100133e2 <__gesf2+0x42>
100133de:	428b      	cmp	r3, r1
100133e0:	d013      	beq.n	1001340a <__gesf2+0x6a>
100133e2:	4258      	negs	r0, r3
100133e4:	2301      	movs	r3, #1
100133e6:	4318      	orrs	r0, r3
100133e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133ea:	2e00      	cmp	r6, #0
100133ec:	d0f7      	beq.n	100133de <__gesf2+0x3e>
100133ee:	4248      	negs	r0, r1
100133f0:	4141      	adcs	r1, r0
100133f2:	2001      	movs	r0, #1
100133f4:	4249      	negs	r1, r1
100133f6:	4308      	orrs	r0, r1
100133f8:	e7f6      	b.n	100133e8 <__gesf2+0x48>
100133fa:	2d00      	cmp	r5, #0
100133fc:	d0dd      	beq.n	100133ba <__gesf2+0x1a>
100133fe:	2002      	movs	r0, #2
10013400:	4240      	negs	r0, r0
10013402:	e7f1      	b.n	100133e8 <__gesf2+0x48>
10013404:	2c00      	cmp	r4, #0
10013406:	d0da      	beq.n	100133be <__gesf2+0x1e>
10013408:	e7f9      	b.n	100133fe <__gesf2+0x5e>
1001340a:	4282      	cmp	r2, r0
1001340c:	dce9      	bgt.n	100133e2 <__gesf2+0x42>
1001340e:	db04      	blt.n	1001341a <__gesf2+0x7a>
10013410:	42a5      	cmp	r5, r4
10013412:	d8e6      	bhi.n	100133e2 <__gesf2+0x42>
10013414:	2000      	movs	r0, #0
10013416:	42a5      	cmp	r5, r4
10013418:	d2e6      	bcs.n	100133e8 <__gesf2+0x48>
1001341a:	4258      	negs	r0, r3
1001341c:	4143      	adcs	r3, r0
1001341e:	2001      	movs	r0, #1
10013420:	425b      	negs	r3, r3
10013422:	4318      	orrs	r0, r3
10013424:	e7e0      	b.n	100133e8 <__gesf2+0x48>
10013426:	46c0      	nop			; (mov r8, r8)

10013428 <__lesf2>:
10013428:	0243      	lsls	r3, r0, #9
1001342a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001342c:	0042      	lsls	r2, r0, #1
1001342e:	004c      	lsls	r4, r1, #1
10013430:	0a5e      	lsrs	r6, r3, #9
10013432:	0fc3      	lsrs	r3, r0, #31
10013434:	0248      	lsls	r0, r1, #9
10013436:	0e12      	lsrs	r2, r2, #24
10013438:	0a45      	lsrs	r5, r0, #9
1001343a:	0e24      	lsrs	r4, r4, #24
1001343c:	0fc9      	lsrs	r1, r1, #31
1001343e:	2aff      	cmp	r2, #255	; 0xff
10013440:	d017      	beq.n	10013472 <__lesf2+0x4a>
10013442:	2cff      	cmp	r4, #255	; 0xff
10013444:	d019      	beq.n	1001347a <__lesf2+0x52>
10013446:	2a00      	cmp	r2, #0
10013448:	d10b      	bne.n	10013462 <__lesf2+0x3a>
1001344a:	4270      	negs	r0, r6
1001344c:	4170      	adcs	r0, r6
1001344e:	2c00      	cmp	r4, #0
10013450:	d017      	beq.n	10013482 <__lesf2+0x5a>
10013452:	2800      	cmp	r0, #0
10013454:	d007      	beq.n	10013466 <__lesf2+0x3e>
10013456:	4248      	negs	r0, r1
10013458:	4141      	adcs	r1, r0
1001345a:	2001      	movs	r0, #1
1001345c:	4249      	negs	r1, r1
1001345e:	4308      	orrs	r0, r1
10013460:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013462:	2c00      	cmp	r4, #0
10013464:	d013      	beq.n	1001348e <__lesf2+0x66>
10013466:	428b      	cmp	r3, r1
10013468:	d014      	beq.n	10013494 <__lesf2+0x6c>
1001346a:	4258      	negs	r0, r3
1001346c:	2301      	movs	r3, #1
1001346e:	4318      	orrs	r0, r3
10013470:	e7f6      	b.n	10013460 <__lesf2+0x38>
10013472:	2002      	movs	r0, #2
10013474:	2e00      	cmp	r6, #0
10013476:	d1f3      	bne.n	10013460 <__lesf2+0x38>
10013478:	e7e3      	b.n	10013442 <__lesf2+0x1a>
1001347a:	2002      	movs	r0, #2
1001347c:	2d00      	cmp	r5, #0
1001347e:	d1ef      	bne.n	10013460 <__lesf2+0x38>
10013480:	e7e1      	b.n	10013446 <__lesf2+0x1e>
10013482:	2d00      	cmp	r5, #0
10013484:	d1e5      	bne.n	10013452 <__lesf2+0x2a>
10013486:	2000      	movs	r0, #0
10013488:	2e00      	cmp	r6, #0
1001348a:	d0e9      	beq.n	10013460 <__lesf2+0x38>
1001348c:	e7ed      	b.n	1001346a <__lesf2+0x42>
1001348e:	2d00      	cmp	r5, #0
10013490:	d1e9      	bne.n	10013466 <__lesf2+0x3e>
10013492:	e7ea      	b.n	1001346a <__lesf2+0x42>
10013494:	42a2      	cmp	r2, r4
10013496:	dce8      	bgt.n	1001346a <__lesf2+0x42>
10013498:	db04      	blt.n	100134a4 <__lesf2+0x7c>
1001349a:	42ae      	cmp	r6, r5
1001349c:	d8e5      	bhi.n	1001346a <__lesf2+0x42>
1001349e:	2000      	movs	r0, #0
100134a0:	42ae      	cmp	r6, r5
100134a2:	d2dd      	bcs.n	10013460 <__lesf2+0x38>
100134a4:	4258      	negs	r0, r3
100134a6:	4143      	adcs	r3, r0
100134a8:	2001      	movs	r0, #1
100134aa:	425b      	negs	r3, r3
100134ac:	4318      	orrs	r0, r3
100134ae:	e7d7      	b.n	10013460 <__lesf2+0x38>

100134b0 <__aeabi_fmul>:
100134b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100134b2:	4657      	mov	r7, sl
100134b4:	464e      	mov	r6, r9
100134b6:	4645      	mov	r5, r8
100134b8:	0043      	lsls	r3, r0, #1
100134ba:	b4e0      	push	{r5, r6, r7}
100134bc:	0246      	lsls	r6, r0, #9
100134be:	4688      	mov	r8, r1
100134c0:	0a76      	lsrs	r6, r6, #9
100134c2:	0e1f      	lsrs	r7, r3, #24
100134c4:	0fc4      	lsrs	r4, r0, #31
100134c6:	2f00      	cmp	r7, #0
100134c8:	d047      	beq.n	1001355a <__aeabi_fmul+0xaa>
100134ca:	2fff      	cmp	r7, #255	; 0xff
100134cc:	d025      	beq.n	1001351a <__aeabi_fmul+0x6a>
100134ce:	2300      	movs	r3, #0
100134d0:	2580      	movs	r5, #128	; 0x80
100134d2:	469a      	mov	sl, r3
100134d4:	4699      	mov	r9, r3
100134d6:	00f6      	lsls	r6, r6, #3
100134d8:	04ed      	lsls	r5, r5, #19
100134da:	432e      	orrs	r6, r5
100134dc:	3f7f      	subs	r7, #127	; 0x7f
100134de:	4643      	mov	r3, r8
100134e0:	4642      	mov	r2, r8
100134e2:	025d      	lsls	r5, r3, #9
100134e4:	0fd2      	lsrs	r2, r2, #31
100134e6:	005b      	lsls	r3, r3, #1
100134e8:	0a6d      	lsrs	r5, r5, #9
100134ea:	0e1b      	lsrs	r3, r3, #24
100134ec:	4690      	mov	r8, r2
100134ee:	d040      	beq.n	10013572 <__aeabi_fmul+0xc2>
100134f0:	2bff      	cmp	r3, #255	; 0xff
100134f2:	d039      	beq.n	10013568 <__aeabi_fmul+0xb8>
100134f4:	2280      	movs	r2, #128	; 0x80
100134f6:	2000      	movs	r0, #0
100134f8:	00ed      	lsls	r5, r5, #3
100134fa:	04d2      	lsls	r2, r2, #19
100134fc:	4315      	orrs	r5, r2
100134fe:	3b7f      	subs	r3, #127	; 0x7f
10013500:	18fb      	adds	r3, r7, r3
10013502:	4642      	mov	r2, r8
10013504:	4657      	mov	r7, sl
10013506:	1c59      	adds	r1, r3, #1
10013508:	4062      	eors	r2, r4
1001350a:	468c      	mov	ip, r1
1001350c:	4307      	orrs	r7, r0
1001350e:	2f0f      	cmp	r7, #15
10013510:	d85c      	bhi.n	100135cc <__aeabi_fmul+0x11c>
10013512:	496f      	ldr	r1, [pc, #444]	; (100136d0 <__aeabi_fmul+0x220>)
10013514:	00bf      	lsls	r7, r7, #2
10013516:	59c9      	ldr	r1, [r1, r7]
10013518:	468f      	mov	pc, r1
1001351a:	2e00      	cmp	r6, #0
1001351c:	d145      	bne.n	100135aa <__aeabi_fmul+0xfa>
1001351e:	2308      	movs	r3, #8
10013520:	469a      	mov	sl, r3
10013522:	3b06      	subs	r3, #6
10013524:	4699      	mov	r9, r3
10013526:	e7da      	b.n	100134de <__aeabi_fmul+0x2e>
10013528:	4642      	mov	r2, r8
1001352a:	2802      	cmp	r0, #2
1001352c:	d02d      	beq.n	1001358a <__aeabi_fmul+0xda>
1001352e:	2803      	cmp	r0, #3
10013530:	d100      	bne.n	10013534 <__aeabi_fmul+0x84>
10013532:	e0c3      	b.n	100136bc <__aeabi_fmul+0x20c>
10013534:	2801      	cmp	r0, #1
10013536:	d000      	beq.n	1001353a <__aeabi_fmul+0x8a>
10013538:	e0a2      	b.n	10013680 <__aeabi_fmul+0x1d0>
1001353a:	2500      	movs	r5, #0
1001353c:	2600      	movs	r6, #0
1001353e:	4002      	ands	r2, r0
10013540:	b2d4      	uxtb	r4, r2
10013542:	0276      	lsls	r6, r6, #9
10013544:	05ed      	lsls	r5, r5, #23
10013546:	0a76      	lsrs	r6, r6, #9
10013548:	432e      	orrs	r6, r5
1001354a:	07e4      	lsls	r4, r4, #31
1001354c:	4326      	orrs	r6, r4
1001354e:	0030      	movs	r0, r6
10013550:	bc1c      	pop	{r2, r3, r4}
10013552:	4690      	mov	r8, r2
10013554:	4699      	mov	r9, r3
10013556:	46a2      	mov	sl, r4
10013558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001355a:	2e00      	cmp	r6, #0
1001355c:	d11a      	bne.n	10013594 <__aeabi_fmul+0xe4>
1001355e:	2304      	movs	r3, #4
10013560:	469a      	mov	sl, r3
10013562:	3b03      	subs	r3, #3
10013564:	4699      	mov	r9, r3
10013566:	e7ba      	b.n	100134de <__aeabi_fmul+0x2e>
10013568:	002a      	movs	r2, r5
1001356a:	1e51      	subs	r1, r2, #1
1001356c:	418a      	sbcs	r2, r1
1001356e:	1c90      	adds	r0, r2, #2
10013570:	e7c6      	b.n	10013500 <__aeabi_fmul+0x50>
10013572:	2001      	movs	r0, #1
10013574:	2d00      	cmp	r5, #0
10013576:	d0c3      	beq.n	10013500 <__aeabi_fmul+0x50>
10013578:	0028      	movs	r0, r5
1001357a:	f001 f9dd 	bl	10014938 <__clzsi2>
1001357e:	1f43      	subs	r3, r0, #5
10013580:	3076      	adds	r0, #118	; 0x76
10013582:	409d      	lsls	r5, r3
10013584:	4243      	negs	r3, r0
10013586:	2000      	movs	r0, #0
10013588:	e7ba      	b.n	10013500 <__aeabi_fmul+0x50>
1001358a:	2401      	movs	r4, #1
1001358c:	25ff      	movs	r5, #255	; 0xff
1001358e:	4014      	ands	r4, r2
10013590:	2600      	movs	r6, #0
10013592:	e7d6      	b.n	10013542 <__aeabi_fmul+0x92>
10013594:	0030      	movs	r0, r6
10013596:	f001 f9cf 	bl	10014938 <__clzsi2>
1001359a:	1f43      	subs	r3, r0, #5
1001359c:	409e      	lsls	r6, r3
1001359e:	2300      	movs	r3, #0
100135a0:	3076      	adds	r0, #118	; 0x76
100135a2:	4247      	negs	r7, r0
100135a4:	469a      	mov	sl, r3
100135a6:	4699      	mov	r9, r3
100135a8:	e799      	b.n	100134de <__aeabi_fmul+0x2e>
100135aa:	230c      	movs	r3, #12
100135ac:	469a      	mov	sl, r3
100135ae:	3b09      	subs	r3, #9
100135b0:	4699      	mov	r9, r3
100135b2:	e794      	b.n	100134de <__aeabi_fmul+0x2e>
100135b4:	2680      	movs	r6, #128	; 0x80
100135b6:	2400      	movs	r4, #0
100135b8:	03f6      	lsls	r6, r6, #15
100135ba:	25ff      	movs	r5, #255	; 0xff
100135bc:	e7c1      	b.n	10013542 <__aeabi_fmul+0x92>
100135be:	0035      	movs	r5, r6
100135c0:	4648      	mov	r0, r9
100135c2:	e7b2      	b.n	1001352a <__aeabi_fmul+0x7a>
100135c4:	0035      	movs	r5, r6
100135c6:	0022      	movs	r2, r4
100135c8:	4648      	mov	r0, r9
100135ca:	e7ae      	b.n	1001352a <__aeabi_fmul+0x7a>
100135cc:	0429      	lsls	r1, r5, #16
100135ce:	0c09      	lsrs	r1, r1, #16
100135d0:	0008      	movs	r0, r1
100135d2:	0c37      	lsrs	r7, r6, #16
100135d4:	0436      	lsls	r6, r6, #16
100135d6:	0c36      	lsrs	r6, r6, #16
100135d8:	0c2c      	lsrs	r4, r5, #16
100135da:	4379      	muls	r1, r7
100135dc:	4370      	muls	r0, r6
100135de:	4367      	muls	r7, r4
100135e0:	4374      	muls	r4, r6
100135e2:	0c06      	lsrs	r6, r0, #16
100135e4:	1864      	adds	r4, r4, r1
100135e6:	1936      	adds	r6, r6, r4
100135e8:	42b1      	cmp	r1, r6
100135ea:	d903      	bls.n	100135f4 <__aeabi_fmul+0x144>
100135ec:	2180      	movs	r1, #128	; 0x80
100135ee:	0249      	lsls	r1, r1, #9
100135f0:	4688      	mov	r8, r1
100135f2:	4447      	add	r7, r8
100135f4:	0400      	lsls	r0, r0, #16
100135f6:	0c00      	lsrs	r0, r0, #16
100135f8:	0431      	lsls	r1, r6, #16
100135fa:	1809      	adds	r1, r1, r0
100135fc:	018d      	lsls	r5, r1, #6
100135fe:	1e68      	subs	r0, r5, #1
10013600:	4185      	sbcs	r5, r0
10013602:	0e89      	lsrs	r1, r1, #26
10013604:	4329      	orrs	r1, r5
10013606:	0c35      	lsrs	r5, r6, #16
10013608:	19ed      	adds	r5, r5, r7
1001360a:	01ad      	lsls	r5, r5, #6
1001360c:	430d      	orrs	r5, r1
1001360e:	0129      	lsls	r1, r5, #4
10013610:	d504      	bpl.n	1001361c <__aeabi_fmul+0x16c>
10013612:	2301      	movs	r3, #1
10013614:	0869      	lsrs	r1, r5, #1
10013616:	401d      	ands	r5, r3
10013618:	4663      	mov	r3, ip
1001361a:	430d      	orrs	r5, r1
1001361c:	0019      	movs	r1, r3
1001361e:	317f      	adds	r1, #127	; 0x7f
10013620:	2900      	cmp	r1, #0
10013622:	dd25      	ble.n	10013670 <__aeabi_fmul+0x1c0>
10013624:	0768      	lsls	r0, r5, #29
10013626:	d004      	beq.n	10013632 <__aeabi_fmul+0x182>
10013628:	200f      	movs	r0, #15
1001362a:	4028      	ands	r0, r5
1001362c:	2804      	cmp	r0, #4
1001362e:	d000      	beq.n	10013632 <__aeabi_fmul+0x182>
10013630:	3504      	adds	r5, #4
10013632:	0128      	lsls	r0, r5, #4
10013634:	d503      	bpl.n	1001363e <__aeabi_fmul+0x18e>
10013636:	4927      	ldr	r1, [pc, #156]	; (100136d4 <__aeabi_fmul+0x224>)
10013638:	3380      	adds	r3, #128	; 0x80
1001363a:	400d      	ands	r5, r1
1001363c:	0019      	movs	r1, r3
1001363e:	29fe      	cmp	r1, #254	; 0xfe
10013640:	dca3      	bgt.n	1001358a <__aeabi_fmul+0xda>
10013642:	2401      	movs	r4, #1
10013644:	01ad      	lsls	r5, r5, #6
10013646:	0a6e      	lsrs	r6, r5, #9
10013648:	4014      	ands	r4, r2
1001364a:	b2cd      	uxtb	r5, r1
1001364c:	e779      	b.n	10013542 <__aeabi_fmul+0x92>
1001364e:	2080      	movs	r0, #128	; 0x80
10013650:	03c0      	lsls	r0, r0, #15
10013652:	4206      	tst	r6, r0
10013654:	d007      	beq.n	10013666 <__aeabi_fmul+0x1b6>
10013656:	4205      	tst	r5, r0
10013658:	d105      	bne.n	10013666 <__aeabi_fmul+0x1b6>
1001365a:	4328      	orrs	r0, r5
1001365c:	0246      	lsls	r6, r0, #9
1001365e:	0a76      	lsrs	r6, r6, #9
10013660:	4644      	mov	r4, r8
10013662:	25ff      	movs	r5, #255	; 0xff
10013664:	e76d      	b.n	10013542 <__aeabi_fmul+0x92>
10013666:	4306      	orrs	r6, r0
10013668:	0276      	lsls	r6, r6, #9
1001366a:	0a76      	lsrs	r6, r6, #9
1001366c:	25ff      	movs	r5, #255	; 0xff
1001366e:	e768      	b.n	10013542 <__aeabi_fmul+0x92>
10013670:	2401      	movs	r4, #1
10013672:	1a61      	subs	r1, r4, r1
10013674:	291b      	cmp	r1, #27
10013676:	dd05      	ble.n	10013684 <__aeabi_fmul+0x1d4>
10013678:	4014      	ands	r4, r2
1001367a:	2500      	movs	r5, #0
1001367c:	2600      	movs	r6, #0
1001367e:	e760      	b.n	10013542 <__aeabi_fmul+0x92>
10013680:	4663      	mov	r3, ip
10013682:	e7cb      	b.n	1001361c <__aeabi_fmul+0x16c>
10013684:	002e      	movs	r6, r5
10013686:	2320      	movs	r3, #32
10013688:	40ce      	lsrs	r6, r1
1001368a:	1a59      	subs	r1, r3, r1
1001368c:	408d      	lsls	r5, r1
1001368e:	1e6b      	subs	r3, r5, #1
10013690:	419d      	sbcs	r5, r3
10013692:	432e      	orrs	r6, r5
10013694:	0773      	lsls	r3, r6, #29
10013696:	d004      	beq.n	100136a2 <__aeabi_fmul+0x1f2>
10013698:	230f      	movs	r3, #15
1001369a:	4033      	ands	r3, r6
1001369c:	2b04      	cmp	r3, #4
1001369e:	d000      	beq.n	100136a2 <__aeabi_fmul+0x1f2>
100136a0:	3604      	adds	r6, #4
100136a2:	0173      	lsls	r3, r6, #5
100136a4:	d504      	bpl.n	100136b0 <__aeabi_fmul+0x200>
100136a6:	2401      	movs	r4, #1
100136a8:	2501      	movs	r5, #1
100136aa:	4014      	ands	r4, r2
100136ac:	2600      	movs	r6, #0
100136ae:	e748      	b.n	10013542 <__aeabi_fmul+0x92>
100136b0:	2401      	movs	r4, #1
100136b2:	01b6      	lsls	r6, r6, #6
100136b4:	0a76      	lsrs	r6, r6, #9
100136b6:	4014      	ands	r4, r2
100136b8:	2500      	movs	r5, #0
100136ba:	e742      	b.n	10013542 <__aeabi_fmul+0x92>
100136bc:	2680      	movs	r6, #128	; 0x80
100136be:	2401      	movs	r4, #1
100136c0:	03f6      	lsls	r6, r6, #15
100136c2:	432e      	orrs	r6, r5
100136c4:	0276      	lsls	r6, r6, #9
100136c6:	0a76      	lsrs	r6, r6, #9
100136c8:	4014      	ands	r4, r2
100136ca:	25ff      	movs	r5, #255	; 0xff
100136cc:	e739      	b.n	10013542 <__aeabi_fmul+0x92>
100136ce:	46c0      	nop			; (mov r8, r8)
100136d0:	10017c8c 	.word	0x10017c8c
100136d4:	f7ffffff 	.word	0xf7ffffff

100136d8 <__aeabi_fsub>:
100136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100136da:	024a      	lsls	r2, r1, #9
100136dc:	004e      	lsls	r6, r1, #1
100136de:	0243      	lsls	r3, r0, #9
100136e0:	0044      	lsls	r4, r0, #1
100136e2:	0e24      	lsrs	r4, r4, #24
100136e4:	0fc5      	lsrs	r5, r0, #31
100136e6:	099b      	lsrs	r3, r3, #6
100136e8:	0e36      	lsrs	r6, r6, #24
100136ea:	0fc9      	lsrs	r1, r1, #31
100136ec:	0992      	lsrs	r2, r2, #6
100136ee:	2eff      	cmp	r6, #255	; 0xff
100136f0:	d100      	bne.n	100136f4 <__aeabi_fsub+0x1c>
100136f2:	e083      	b.n	100137fc <__aeabi_fsub+0x124>
100136f4:	2001      	movs	r0, #1
100136f6:	4041      	eors	r1, r0
100136f8:	1ba0      	subs	r0, r4, r6
100136fa:	42a9      	cmp	r1, r5
100136fc:	d05c      	beq.n	100137b8 <__aeabi_fsub+0xe0>
100136fe:	2800      	cmp	r0, #0
10013700:	dc00      	bgt.n	10013704 <__aeabi_fsub+0x2c>
10013702:	e095      	b.n	10013830 <__aeabi_fsub+0x158>
10013704:	2e00      	cmp	r6, #0
10013706:	d11c      	bne.n	10013742 <__aeabi_fsub+0x6a>
10013708:	2a00      	cmp	r2, #0
1001370a:	d000      	beq.n	1001370e <__aeabi_fsub+0x36>
1001370c:	e081      	b.n	10013812 <__aeabi_fsub+0x13a>
1001370e:	075a      	lsls	r2, r3, #29
10013710:	d004      	beq.n	1001371c <__aeabi_fsub+0x44>
10013712:	220f      	movs	r2, #15
10013714:	401a      	ands	r2, r3
10013716:	2a04      	cmp	r2, #4
10013718:	d000      	beq.n	1001371c <__aeabi_fsub+0x44>
1001371a:	3304      	adds	r3, #4
1001371c:	015a      	lsls	r2, r3, #5
1001371e:	d53b      	bpl.n	10013798 <__aeabi_fsub+0xc0>
10013720:	3401      	adds	r4, #1
10013722:	2cff      	cmp	r4, #255	; 0xff
10013724:	d100      	bne.n	10013728 <__aeabi_fsub+0x50>
10013726:	e091      	b.n	1001384c <__aeabi_fsub+0x174>
10013728:	2001      	movs	r0, #1
1001372a:	019b      	lsls	r3, r3, #6
1001372c:	0a5b      	lsrs	r3, r3, #9
1001372e:	b2e4      	uxtb	r4, r4
10013730:	4005      	ands	r5, r0
10013732:	025b      	lsls	r3, r3, #9
10013734:	05e4      	lsls	r4, r4, #23
10013736:	0a5b      	lsrs	r3, r3, #9
10013738:	07ed      	lsls	r5, r5, #31
1001373a:	4323      	orrs	r3, r4
1001373c:	432b      	orrs	r3, r5
1001373e:	0018      	movs	r0, r3
10013740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013742:	2cff      	cmp	r4, #255	; 0xff
10013744:	d0e3      	beq.n	1001370e <__aeabi_fsub+0x36>
10013746:	2180      	movs	r1, #128	; 0x80
10013748:	04c9      	lsls	r1, r1, #19
1001374a:	430a      	orrs	r2, r1
1001374c:	281b      	cmp	r0, #27
1001374e:	dd00      	ble.n	10013752 <__aeabi_fsub+0x7a>
10013750:	e090      	b.n	10013874 <__aeabi_fsub+0x19c>
10013752:	0016      	movs	r6, r2
10013754:	2120      	movs	r1, #32
10013756:	40c6      	lsrs	r6, r0
10013758:	1a08      	subs	r0, r1, r0
1001375a:	4082      	lsls	r2, r0
1001375c:	1e51      	subs	r1, r2, #1
1001375e:	418a      	sbcs	r2, r1
10013760:	4332      	orrs	r2, r6
10013762:	1a9b      	subs	r3, r3, r2
10013764:	015a      	lsls	r2, r3, #5
10013766:	d515      	bpl.n	10013794 <__aeabi_fsub+0xbc>
10013768:	019b      	lsls	r3, r3, #6
1001376a:	099e      	lsrs	r6, r3, #6
1001376c:	0030      	movs	r0, r6
1001376e:	f001 f8e3 	bl	10014938 <__clzsi2>
10013772:	3805      	subs	r0, #5
10013774:	4086      	lsls	r6, r0
10013776:	4284      	cmp	r4, r0
10013778:	dc6c      	bgt.n	10013854 <__aeabi_fsub+0x17c>
1001377a:	1b04      	subs	r4, r0, r4
1001377c:	0033      	movs	r3, r6
1001377e:	2020      	movs	r0, #32
10013780:	3401      	adds	r4, #1
10013782:	40e3      	lsrs	r3, r4
10013784:	1b04      	subs	r4, r0, r4
10013786:	40a6      	lsls	r6, r4
10013788:	1e72      	subs	r2, r6, #1
1001378a:	4196      	sbcs	r6, r2
1001378c:	2400      	movs	r4, #0
1001378e:	4333      	orrs	r3, r6
10013790:	e7bd      	b.n	1001370e <__aeabi_fsub+0x36>
10013792:	000d      	movs	r5, r1
10013794:	075a      	lsls	r2, r3, #29
10013796:	d1bc      	bne.n	10013712 <__aeabi_fsub+0x3a>
10013798:	08df      	lsrs	r7, r3, #3
1001379a:	2301      	movs	r3, #1
1001379c:	401d      	ands	r5, r3
1001379e:	2cff      	cmp	r4, #255	; 0xff
100137a0:	d133      	bne.n	1001380a <__aeabi_fsub+0x132>
100137a2:	2f00      	cmp	r7, #0
100137a4:	d100      	bne.n	100137a8 <__aeabi_fsub+0xd0>
100137a6:	e090      	b.n	100138ca <__aeabi_fsub+0x1f2>
100137a8:	2280      	movs	r2, #128	; 0x80
100137aa:	03d2      	lsls	r2, r2, #15
100137ac:	0013      	movs	r3, r2
100137ae:	433b      	orrs	r3, r7
100137b0:	025b      	lsls	r3, r3, #9
100137b2:	0a5b      	lsrs	r3, r3, #9
100137b4:	24ff      	movs	r4, #255	; 0xff
100137b6:	e7bc      	b.n	10013732 <__aeabi_fsub+0x5a>
100137b8:	2800      	cmp	r0, #0
100137ba:	dd4f      	ble.n	1001385c <__aeabi_fsub+0x184>
100137bc:	2e00      	cmp	r6, #0
100137be:	d02e      	beq.n	1001381e <__aeabi_fsub+0x146>
100137c0:	2cff      	cmp	r4, #255	; 0xff
100137c2:	d0a4      	beq.n	1001370e <__aeabi_fsub+0x36>
100137c4:	2580      	movs	r5, #128	; 0x80
100137c6:	04ed      	lsls	r5, r5, #19
100137c8:	432a      	orrs	r2, r5
100137ca:	281b      	cmp	r0, #27
100137cc:	dd00      	ble.n	100137d0 <__aeabi_fsub+0xf8>
100137ce:	e097      	b.n	10013900 <__aeabi_fsub+0x228>
100137d0:	0016      	movs	r6, r2
100137d2:	2520      	movs	r5, #32
100137d4:	40c6      	lsrs	r6, r0
100137d6:	1a28      	subs	r0, r5, r0
100137d8:	4082      	lsls	r2, r0
100137da:	1e50      	subs	r0, r2, #1
100137dc:	4182      	sbcs	r2, r0
100137de:	4332      	orrs	r2, r6
100137e0:	189b      	adds	r3, r3, r2
100137e2:	015a      	lsls	r2, r3, #5
100137e4:	d5d5      	bpl.n	10013792 <__aeabi_fsub+0xba>
100137e6:	3401      	adds	r4, #1
100137e8:	2cff      	cmp	r4, #255	; 0xff
100137ea:	d06d      	beq.n	100138c8 <__aeabi_fsub+0x1f0>
100137ec:	2201      	movs	r2, #1
100137ee:	487b      	ldr	r0, [pc, #492]	; (100139dc <__aeabi_fsub+0x304>)
100137f0:	401a      	ands	r2, r3
100137f2:	085b      	lsrs	r3, r3, #1
100137f4:	4003      	ands	r3, r0
100137f6:	4313      	orrs	r3, r2
100137f8:	000d      	movs	r5, r1
100137fa:	e788      	b.n	1001370e <__aeabi_fsub+0x36>
100137fc:	2a00      	cmp	r2, #0
100137fe:	d000      	beq.n	10013802 <__aeabi_fsub+0x12a>
10013800:	e77a      	b.n	100136f8 <__aeabi_fsub+0x20>
10013802:	e777      	b.n	100136f4 <__aeabi_fsub+0x1c>
10013804:	1e03      	subs	r3, r0, #0
10013806:	d1c5      	bne.n	10013794 <__aeabi_fsub+0xbc>
10013808:	2500      	movs	r5, #0
1001380a:	027b      	lsls	r3, r7, #9
1001380c:	0a5b      	lsrs	r3, r3, #9
1001380e:	b2e4      	uxtb	r4, r4
10013810:	e78f      	b.n	10013732 <__aeabi_fsub+0x5a>
10013812:	3801      	subs	r0, #1
10013814:	2800      	cmp	r0, #0
10013816:	d0a4      	beq.n	10013762 <__aeabi_fsub+0x8a>
10013818:	2cff      	cmp	r4, #255	; 0xff
1001381a:	d197      	bne.n	1001374c <__aeabi_fsub+0x74>
1001381c:	e777      	b.n	1001370e <__aeabi_fsub+0x36>
1001381e:	2a00      	cmp	r2, #0
10013820:	d100      	bne.n	10013824 <__aeabi_fsub+0x14c>
10013822:	e774      	b.n	1001370e <__aeabi_fsub+0x36>
10013824:	3801      	subs	r0, #1
10013826:	2800      	cmp	r0, #0
10013828:	d0da      	beq.n	100137e0 <__aeabi_fsub+0x108>
1001382a:	2cff      	cmp	r4, #255	; 0xff
1001382c:	d1cd      	bne.n	100137ca <__aeabi_fsub+0xf2>
1001382e:	e76e      	b.n	1001370e <__aeabi_fsub+0x36>
10013830:	2800      	cmp	r0, #0
10013832:	d121      	bne.n	10013878 <__aeabi_fsub+0x1a0>
10013834:	1c60      	adds	r0, r4, #1
10013836:	b2c0      	uxtb	r0, r0
10013838:	2801      	cmp	r0, #1
1001383a:	dd58      	ble.n	100138ee <__aeabi_fsub+0x216>
1001383c:	2780      	movs	r7, #128	; 0x80
1001383e:	1a9e      	subs	r6, r3, r2
10013840:	04ff      	lsls	r7, r7, #19
10013842:	4037      	ands	r7, r6
10013844:	d02f      	beq.n	100138a6 <__aeabi_fsub+0x1ce>
10013846:	1ad6      	subs	r6, r2, r3
10013848:	000d      	movs	r5, r1
1001384a:	e78f      	b.n	1001376c <__aeabi_fsub+0x94>
1001384c:	2301      	movs	r3, #1
1001384e:	401d      	ands	r5, r3
10013850:	2300      	movs	r3, #0
10013852:	e76e      	b.n	10013732 <__aeabi_fsub+0x5a>
10013854:	4b62      	ldr	r3, [pc, #392]	; (100139e0 <__aeabi_fsub+0x308>)
10013856:	1a24      	subs	r4, r4, r0
10013858:	4033      	ands	r3, r6
1001385a:	e758      	b.n	1001370e <__aeabi_fsub+0x36>
1001385c:	2800      	cmp	r0, #0
1001385e:	d151      	bne.n	10013904 <__aeabi_fsub+0x22c>
10013860:	1c60      	adds	r0, r4, #1
10013862:	b2c6      	uxtb	r6, r0
10013864:	2e01      	cmp	r6, #1
10013866:	dd33      	ble.n	100138d0 <__aeabi_fsub+0x1f8>
10013868:	28ff      	cmp	r0, #255	; 0xff
1001386a:	d02d      	beq.n	100138c8 <__aeabi_fsub+0x1f0>
1001386c:	189b      	adds	r3, r3, r2
1001386e:	085b      	lsrs	r3, r3, #1
10013870:	0004      	movs	r4, r0
10013872:	e74c      	b.n	1001370e <__aeabi_fsub+0x36>
10013874:	2201      	movs	r2, #1
10013876:	e774      	b.n	10013762 <__aeabi_fsub+0x8a>
10013878:	2c00      	cmp	r4, #0
1001387a:	d01a      	beq.n	100138b2 <__aeabi_fsub+0x1da>
1001387c:	2eff      	cmp	r6, #255	; 0xff
1001387e:	d01f      	beq.n	100138c0 <__aeabi_fsub+0x1e8>
10013880:	2480      	movs	r4, #128	; 0x80
10013882:	04e4      	lsls	r4, r4, #19
10013884:	4240      	negs	r0, r0
10013886:	4323      	orrs	r3, r4
10013888:	281b      	cmp	r0, #27
1001388a:	dd00      	ble.n	1001388e <__aeabi_fsub+0x1b6>
1001388c:	e096      	b.n	100139bc <__aeabi_fsub+0x2e4>
1001388e:	001d      	movs	r5, r3
10013890:	2420      	movs	r4, #32
10013892:	40c5      	lsrs	r5, r0
10013894:	1a20      	subs	r0, r4, r0
10013896:	4083      	lsls	r3, r0
10013898:	1e58      	subs	r0, r3, #1
1001389a:	4183      	sbcs	r3, r0
1001389c:	432b      	orrs	r3, r5
1001389e:	1ad3      	subs	r3, r2, r3
100138a0:	0034      	movs	r4, r6
100138a2:	000d      	movs	r5, r1
100138a4:	e75e      	b.n	10013764 <__aeabi_fsub+0x8c>
100138a6:	2e00      	cmp	r6, #0
100138a8:	d000      	beq.n	100138ac <__aeabi_fsub+0x1d4>
100138aa:	e75f      	b.n	1001376c <__aeabi_fsub+0x94>
100138ac:	2500      	movs	r5, #0
100138ae:	2400      	movs	r4, #0
100138b0:	e7ab      	b.n	1001380a <__aeabi_fsub+0x132>
100138b2:	2b00      	cmp	r3, #0
100138b4:	d044      	beq.n	10013940 <__aeabi_fsub+0x268>
100138b6:	43c0      	mvns	r0, r0
100138b8:	2800      	cmp	r0, #0
100138ba:	d0f0      	beq.n	1001389e <__aeabi_fsub+0x1c6>
100138bc:	2eff      	cmp	r6, #255	; 0xff
100138be:	d1e3      	bne.n	10013888 <__aeabi_fsub+0x1b0>
100138c0:	0013      	movs	r3, r2
100138c2:	24ff      	movs	r4, #255	; 0xff
100138c4:	000d      	movs	r5, r1
100138c6:	e722      	b.n	1001370e <__aeabi_fsub+0x36>
100138c8:	000d      	movs	r5, r1
100138ca:	24ff      	movs	r4, #255	; 0xff
100138cc:	2300      	movs	r3, #0
100138ce:	e730      	b.n	10013732 <__aeabi_fsub+0x5a>
100138d0:	2c00      	cmp	r4, #0
100138d2:	d15d      	bne.n	10013990 <__aeabi_fsub+0x2b8>
100138d4:	2b00      	cmp	r3, #0
100138d6:	d07d      	beq.n	100139d4 <__aeabi_fsub+0x2fc>
100138d8:	2a00      	cmp	r2, #0
100138da:	d100      	bne.n	100138de <__aeabi_fsub+0x206>
100138dc:	e717      	b.n	1001370e <__aeabi_fsub+0x36>
100138de:	189b      	adds	r3, r3, r2
100138e0:	015a      	lsls	r2, r3, #5
100138e2:	d400      	bmi.n	100138e6 <__aeabi_fsub+0x20e>
100138e4:	e756      	b.n	10013794 <__aeabi_fsub+0xbc>
100138e6:	4a3e      	ldr	r2, [pc, #248]	; (100139e0 <__aeabi_fsub+0x308>)
100138e8:	0004      	movs	r4, r0
100138ea:	4013      	ands	r3, r2
100138ec:	e70f      	b.n	1001370e <__aeabi_fsub+0x36>
100138ee:	2c00      	cmp	r4, #0
100138f0:	d11e      	bne.n	10013930 <__aeabi_fsub+0x258>
100138f2:	2b00      	cmp	r3, #0
100138f4:	d12f      	bne.n	10013956 <__aeabi_fsub+0x27e>
100138f6:	2a00      	cmp	r2, #0
100138f8:	d065      	beq.n	100139c6 <__aeabi_fsub+0x2ee>
100138fa:	0013      	movs	r3, r2
100138fc:	000d      	movs	r5, r1
100138fe:	e706      	b.n	1001370e <__aeabi_fsub+0x36>
10013900:	2201      	movs	r2, #1
10013902:	e76d      	b.n	100137e0 <__aeabi_fsub+0x108>
10013904:	2c00      	cmp	r4, #0
10013906:	d11f      	bne.n	10013948 <__aeabi_fsub+0x270>
10013908:	2b00      	cmp	r3, #0
1001390a:	d059      	beq.n	100139c0 <__aeabi_fsub+0x2e8>
1001390c:	43c0      	mvns	r0, r0
1001390e:	2800      	cmp	r0, #0
10013910:	d00b      	beq.n	1001392a <__aeabi_fsub+0x252>
10013912:	2eff      	cmp	r6, #255	; 0xff
10013914:	d04f      	beq.n	100139b6 <__aeabi_fsub+0x2de>
10013916:	281b      	cmp	r0, #27
10013918:	dc5e      	bgt.n	100139d8 <__aeabi_fsub+0x300>
1001391a:	001d      	movs	r5, r3
1001391c:	2420      	movs	r4, #32
1001391e:	40c5      	lsrs	r5, r0
10013920:	1a20      	subs	r0, r4, r0
10013922:	4083      	lsls	r3, r0
10013924:	1e58      	subs	r0, r3, #1
10013926:	4183      	sbcs	r3, r0
10013928:	432b      	orrs	r3, r5
1001392a:	189b      	adds	r3, r3, r2
1001392c:	0034      	movs	r4, r6
1001392e:	e758      	b.n	100137e2 <__aeabi_fsub+0x10a>
10013930:	2b00      	cmp	r3, #0
10013932:	d11c      	bne.n	1001396e <__aeabi_fsub+0x296>
10013934:	2a00      	cmp	r2, #0
10013936:	d049      	beq.n	100139cc <__aeabi_fsub+0x2f4>
10013938:	0013      	movs	r3, r2
1001393a:	000d      	movs	r5, r1
1001393c:	24ff      	movs	r4, #255	; 0xff
1001393e:	e6e6      	b.n	1001370e <__aeabi_fsub+0x36>
10013940:	0013      	movs	r3, r2
10013942:	0034      	movs	r4, r6
10013944:	000d      	movs	r5, r1
10013946:	e6e2      	b.n	1001370e <__aeabi_fsub+0x36>
10013948:	2eff      	cmp	r6, #255	; 0xff
1001394a:	d034      	beq.n	100139b6 <__aeabi_fsub+0x2de>
1001394c:	2480      	movs	r4, #128	; 0x80
1001394e:	04e4      	lsls	r4, r4, #19
10013950:	4240      	negs	r0, r0
10013952:	4323      	orrs	r3, r4
10013954:	e7df      	b.n	10013916 <__aeabi_fsub+0x23e>
10013956:	2a00      	cmp	r2, #0
10013958:	d100      	bne.n	1001395c <__aeabi_fsub+0x284>
1001395a:	e6d8      	b.n	1001370e <__aeabi_fsub+0x36>
1001395c:	2780      	movs	r7, #128	; 0x80
1001395e:	1a98      	subs	r0, r3, r2
10013960:	04ff      	lsls	r7, r7, #19
10013962:	4007      	ands	r7, r0
10013964:	d100      	bne.n	10013968 <__aeabi_fsub+0x290>
10013966:	e74d      	b.n	10013804 <__aeabi_fsub+0x12c>
10013968:	1ad3      	subs	r3, r2, r3
1001396a:	000d      	movs	r5, r1
1001396c:	e6cf      	b.n	1001370e <__aeabi_fsub+0x36>
1001396e:	24ff      	movs	r4, #255	; 0xff
10013970:	2a00      	cmp	r2, #0
10013972:	d100      	bne.n	10013976 <__aeabi_fsub+0x29e>
10013974:	e6cb      	b.n	1001370e <__aeabi_fsub+0x36>
10013976:	2080      	movs	r0, #128	; 0x80
10013978:	08db      	lsrs	r3, r3, #3
1001397a:	03c0      	lsls	r0, r0, #15
1001397c:	4203      	tst	r3, r0
1001397e:	d004      	beq.n	1001398a <__aeabi_fsub+0x2b2>
10013980:	08d2      	lsrs	r2, r2, #3
10013982:	4202      	tst	r2, r0
10013984:	d101      	bne.n	1001398a <__aeabi_fsub+0x2b2>
10013986:	0013      	movs	r3, r2
10013988:	000d      	movs	r5, r1
1001398a:	00db      	lsls	r3, r3, #3
1001398c:	24ff      	movs	r4, #255	; 0xff
1001398e:	e6be      	b.n	1001370e <__aeabi_fsub+0x36>
10013990:	2b00      	cmp	r3, #0
10013992:	d010      	beq.n	100139b6 <__aeabi_fsub+0x2de>
10013994:	24ff      	movs	r4, #255	; 0xff
10013996:	2a00      	cmp	r2, #0
10013998:	d100      	bne.n	1001399c <__aeabi_fsub+0x2c4>
1001399a:	e6b8      	b.n	1001370e <__aeabi_fsub+0x36>
1001399c:	2080      	movs	r0, #128	; 0x80
1001399e:	08db      	lsrs	r3, r3, #3
100139a0:	03c0      	lsls	r0, r0, #15
100139a2:	4203      	tst	r3, r0
100139a4:	d003      	beq.n	100139ae <__aeabi_fsub+0x2d6>
100139a6:	08d2      	lsrs	r2, r2, #3
100139a8:	4202      	tst	r2, r0
100139aa:	d100      	bne.n	100139ae <__aeabi_fsub+0x2d6>
100139ac:	0013      	movs	r3, r2
100139ae:	00db      	lsls	r3, r3, #3
100139b0:	000d      	movs	r5, r1
100139b2:	24ff      	movs	r4, #255	; 0xff
100139b4:	e6ab      	b.n	1001370e <__aeabi_fsub+0x36>
100139b6:	0013      	movs	r3, r2
100139b8:	24ff      	movs	r4, #255	; 0xff
100139ba:	e6a8      	b.n	1001370e <__aeabi_fsub+0x36>
100139bc:	2301      	movs	r3, #1
100139be:	e76e      	b.n	1001389e <__aeabi_fsub+0x1c6>
100139c0:	0013      	movs	r3, r2
100139c2:	0034      	movs	r4, r6
100139c4:	e6a3      	b.n	1001370e <__aeabi_fsub+0x36>
100139c6:	2700      	movs	r7, #0
100139c8:	2500      	movs	r5, #0
100139ca:	e71e      	b.n	1001380a <__aeabi_fsub+0x132>
100139cc:	2780      	movs	r7, #128	; 0x80
100139ce:	2500      	movs	r5, #0
100139d0:	03ff      	lsls	r7, r7, #15
100139d2:	e6e9      	b.n	100137a8 <__aeabi_fsub+0xd0>
100139d4:	0013      	movs	r3, r2
100139d6:	e69a      	b.n	1001370e <__aeabi_fsub+0x36>
100139d8:	2301      	movs	r3, #1
100139da:	e7a6      	b.n	1001392a <__aeabi_fsub+0x252>
100139dc:	7dffffff 	.word	0x7dffffff
100139e0:	fbffffff 	.word	0xfbffffff

100139e4 <__aeabi_f2iz>:
100139e4:	0243      	lsls	r3, r0, #9
100139e6:	0a59      	lsrs	r1, r3, #9
100139e8:	0043      	lsls	r3, r0, #1
100139ea:	0fc2      	lsrs	r2, r0, #31
100139ec:	0e1b      	lsrs	r3, r3, #24
100139ee:	2000      	movs	r0, #0
100139f0:	2b7e      	cmp	r3, #126	; 0x7e
100139f2:	dd0e      	ble.n	10013a12 <__aeabi_f2iz+0x2e>
100139f4:	2b9d      	cmp	r3, #157	; 0x9d
100139f6:	dc0d      	bgt.n	10013a14 <__aeabi_f2iz+0x30>
100139f8:	2080      	movs	r0, #128	; 0x80
100139fa:	0400      	lsls	r0, r0, #16
100139fc:	4301      	orrs	r1, r0
100139fe:	2b95      	cmp	r3, #149	; 0x95
10013a00:	dc0b      	bgt.n	10013a1a <__aeabi_f2iz+0x36>
10013a02:	2096      	movs	r0, #150	; 0x96
10013a04:	1ac3      	subs	r3, r0, r3
10013a06:	40d9      	lsrs	r1, r3
10013a08:	000b      	movs	r3, r1
10013a0a:	4258      	negs	r0, r3
10013a0c:	2a00      	cmp	r2, #0
10013a0e:	d100      	bne.n	10013a12 <__aeabi_f2iz+0x2e>
10013a10:	0018      	movs	r0, r3
10013a12:	4770      	bx	lr
10013a14:	4b03      	ldr	r3, [pc, #12]	; (10013a24 <__aeabi_f2iz+0x40>)
10013a16:	18d0      	adds	r0, r2, r3
10013a18:	e7fb      	b.n	10013a12 <__aeabi_f2iz+0x2e>
10013a1a:	3b96      	subs	r3, #150	; 0x96
10013a1c:	4099      	lsls	r1, r3
10013a1e:	000b      	movs	r3, r1
10013a20:	e7f3      	b.n	10013a0a <__aeabi_f2iz+0x26>
10013a22:	46c0      	nop			; (mov r8, r8)
10013a24:	7fffffff 	.word	0x7fffffff

10013a28 <__aeabi_ui2f>:
10013a28:	b570      	push	{r4, r5, r6, lr}
10013a2a:	1e04      	subs	r4, r0, #0
10013a2c:	d028      	beq.n	10013a80 <__aeabi_ui2f+0x58>
10013a2e:	f000 ff83 	bl	10014938 <__clzsi2>
10013a32:	239e      	movs	r3, #158	; 0x9e
10013a34:	1a1b      	subs	r3, r3, r0
10013a36:	2b96      	cmp	r3, #150	; 0x96
10013a38:	dc0a      	bgt.n	10013a50 <__aeabi_ui2f+0x28>
10013a3a:	2296      	movs	r2, #150	; 0x96
10013a3c:	1ad2      	subs	r2, r2, r3
10013a3e:	4094      	lsls	r4, r2
10013a40:	0262      	lsls	r2, r4, #9
10013a42:	0a52      	lsrs	r2, r2, #9
10013a44:	b2d8      	uxtb	r0, r3
10013a46:	0252      	lsls	r2, r2, #9
10013a48:	0a52      	lsrs	r2, r2, #9
10013a4a:	05c0      	lsls	r0, r0, #23
10013a4c:	4310      	orrs	r0, r2
10013a4e:	bd70      	pop	{r4, r5, r6, pc}
10013a50:	2b99      	cmp	r3, #153	; 0x99
10013a52:	dc18      	bgt.n	10013a86 <__aeabi_ui2f+0x5e>
10013a54:	2299      	movs	r2, #153	; 0x99
10013a56:	1ad2      	subs	r2, r2, r3
10013a58:	4094      	lsls	r4, r2
10013a5a:	4a11      	ldr	r2, [pc, #68]	; (10013aa0 <__aeabi_ui2f+0x78>)
10013a5c:	4022      	ands	r2, r4
10013a5e:	0761      	lsls	r1, r4, #29
10013a60:	d004      	beq.n	10013a6c <__aeabi_ui2f+0x44>
10013a62:	210f      	movs	r1, #15
10013a64:	400c      	ands	r4, r1
10013a66:	2c04      	cmp	r4, #4
10013a68:	d000      	beq.n	10013a6c <__aeabi_ui2f+0x44>
10013a6a:	3204      	adds	r2, #4
10013a6c:	0151      	lsls	r1, r2, #5
10013a6e:	d503      	bpl.n	10013a78 <__aeabi_ui2f+0x50>
10013a70:	4b0b      	ldr	r3, [pc, #44]	; (10013aa0 <__aeabi_ui2f+0x78>)
10013a72:	401a      	ands	r2, r3
10013a74:	239f      	movs	r3, #159	; 0x9f
10013a76:	1a1b      	subs	r3, r3, r0
10013a78:	0192      	lsls	r2, r2, #6
10013a7a:	0a52      	lsrs	r2, r2, #9
10013a7c:	b2d8      	uxtb	r0, r3
10013a7e:	e7e2      	b.n	10013a46 <__aeabi_ui2f+0x1e>
10013a80:	2000      	movs	r0, #0
10013a82:	2200      	movs	r2, #0
10013a84:	e7df      	b.n	10013a46 <__aeabi_ui2f+0x1e>
10013a86:	2205      	movs	r2, #5
10013a88:	0025      	movs	r5, r4
10013a8a:	1a12      	subs	r2, r2, r0
10013a8c:	21b9      	movs	r1, #185	; 0xb9
10013a8e:	40d5      	lsrs	r5, r2
10013a90:	0022      	movs	r2, r4
10013a92:	1ac9      	subs	r1, r1, r3
10013a94:	408a      	lsls	r2, r1
10013a96:	1e54      	subs	r4, r2, #1
10013a98:	41a2      	sbcs	r2, r4
10013a9a:	002c      	movs	r4, r5
10013a9c:	4314      	orrs	r4, r2
10013a9e:	e7dc      	b.n	10013a5a <__aeabi_ui2f+0x32>
10013aa0:	fbffffff 	.word	0xfbffffff

10013aa4 <__eqdf2>:
10013aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10013aa6:	465f      	mov	r7, fp
10013aa8:	4656      	mov	r6, sl
10013aaa:	464d      	mov	r5, r9
10013aac:	4644      	mov	r4, r8
10013aae:	b4f0      	push	{r4, r5, r6, r7}
10013ab0:	031f      	lsls	r7, r3, #12
10013ab2:	005c      	lsls	r4, r3, #1
10013ab4:	0fdb      	lsrs	r3, r3, #31
10013ab6:	469a      	mov	sl, r3
10013ab8:	4b19      	ldr	r3, [pc, #100]	; (10013b20 <__eqdf2+0x7c>)
10013aba:	030e      	lsls	r6, r1, #12
10013abc:	004d      	lsls	r5, r1, #1
10013abe:	0fc9      	lsrs	r1, r1, #31
10013ac0:	4680      	mov	r8, r0
10013ac2:	0b36      	lsrs	r6, r6, #12
10013ac4:	0d6d      	lsrs	r5, r5, #21
10013ac6:	468b      	mov	fp, r1
10013ac8:	4691      	mov	r9, r2
10013aca:	0b3f      	lsrs	r7, r7, #12
10013acc:	0d64      	lsrs	r4, r4, #21
10013ace:	429d      	cmp	r5, r3
10013ad0:	d019      	beq.n	10013b06 <__eqdf2+0x62>
10013ad2:	4b13      	ldr	r3, [pc, #76]	; (10013b20 <__eqdf2+0x7c>)
10013ad4:	429c      	cmp	r4, r3
10013ad6:	d01b      	beq.n	10013b10 <__eqdf2+0x6c>
10013ad8:	2301      	movs	r3, #1
10013ada:	42a5      	cmp	r5, r4
10013adc:	d006      	beq.n	10013aec <__eqdf2+0x48>
10013ade:	0018      	movs	r0, r3
10013ae0:	bc3c      	pop	{r2, r3, r4, r5}
10013ae2:	4690      	mov	r8, r2
10013ae4:	4699      	mov	r9, r3
10013ae6:	46a2      	mov	sl, r4
10013ae8:	46ab      	mov	fp, r5
10013aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013aec:	42be      	cmp	r6, r7
10013aee:	d1f6      	bne.n	10013ade <__eqdf2+0x3a>
10013af0:	45c8      	cmp	r8, r9
10013af2:	d1f4      	bne.n	10013ade <__eqdf2+0x3a>
10013af4:	45d3      	cmp	fp, sl
10013af6:	d010      	beq.n	10013b1a <__eqdf2+0x76>
10013af8:	2d00      	cmp	r5, #0
10013afa:	d1f0      	bne.n	10013ade <__eqdf2+0x3a>
10013afc:	4330      	orrs	r0, r6
10013afe:	0003      	movs	r3, r0
10013b00:	1e5a      	subs	r2, r3, #1
10013b02:	4193      	sbcs	r3, r2
10013b04:	e7eb      	b.n	10013ade <__eqdf2+0x3a>
10013b06:	0031      	movs	r1, r6
10013b08:	2301      	movs	r3, #1
10013b0a:	4301      	orrs	r1, r0
10013b0c:	d1e7      	bne.n	10013ade <__eqdf2+0x3a>
10013b0e:	e7e0      	b.n	10013ad2 <__eqdf2+0x2e>
10013b10:	433a      	orrs	r2, r7
10013b12:	2301      	movs	r3, #1
10013b14:	2a00      	cmp	r2, #0
10013b16:	d1e2      	bne.n	10013ade <__eqdf2+0x3a>
10013b18:	e7de      	b.n	10013ad8 <__eqdf2+0x34>
10013b1a:	2300      	movs	r3, #0
10013b1c:	e7df      	b.n	10013ade <__eqdf2+0x3a>
10013b1e:	46c0      	nop			; (mov r8, r8)
10013b20:	000007ff 	.word	0x000007ff

10013b24 <__gedf2>:
10013b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b26:	465f      	mov	r7, fp
10013b28:	4644      	mov	r4, r8
10013b2a:	4656      	mov	r6, sl
10013b2c:	464d      	mov	r5, r9
10013b2e:	b4f0      	push	{r4, r5, r6, r7}
10013b30:	031f      	lsls	r7, r3, #12
10013b32:	0b3c      	lsrs	r4, r7, #12
10013b34:	4f2c      	ldr	r7, [pc, #176]	; (10013be8 <__gedf2+0xc4>)
10013b36:	030e      	lsls	r6, r1, #12
10013b38:	004d      	lsls	r5, r1, #1
10013b3a:	46a3      	mov	fp, r4
10013b3c:	005c      	lsls	r4, r3, #1
10013b3e:	4684      	mov	ip, r0
10013b40:	0b36      	lsrs	r6, r6, #12
10013b42:	0d6d      	lsrs	r5, r5, #21
10013b44:	0fc9      	lsrs	r1, r1, #31
10013b46:	4690      	mov	r8, r2
10013b48:	0d64      	lsrs	r4, r4, #21
10013b4a:	0fdb      	lsrs	r3, r3, #31
10013b4c:	42bd      	cmp	r5, r7
10013b4e:	d02b      	beq.n	10013ba8 <__gedf2+0x84>
10013b50:	4f25      	ldr	r7, [pc, #148]	; (10013be8 <__gedf2+0xc4>)
10013b52:	42bc      	cmp	r4, r7
10013b54:	d02e      	beq.n	10013bb4 <__gedf2+0x90>
10013b56:	2d00      	cmp	r5, #0
10013b58:	d10e      	bne.n	10013b78 <__gedf2+0x54>
10013b5a:	4330      	orrs	r0, r6
10013b5c:	0007      	movs	r7, r0
10013b5e:	4681      	mov	r9, r0
10013b60:	4278      	negs	r0, r7
10013b62:	4178      	adcs	r0, r7
10013b64:	2c00      	cmp	r4, #0
10013b66:	d117      	bne.n	10013b98 <__gedf2+0x74>
10013b68:	465f      	mov	r7, fp
10013b6a:	433a      	orrs	r2, r7
10013b6c:	d114      	bne.n	10013b98 <__gedf2+0x74>
10013b6e:	464b      	mov	r3, r9
10013b70:	2000      	movs	r0, #0
10013b72:	2b00      	cmp	r3, #0
10013b74:	d00a      	beq.n	10013b8c <__gedf2+0x68>
10013b76:	e006      	b.n	10013b86 <__gedf2+0x62>
10013b78:	2c00      	cmp	r4, #0
10013b7a:	d102      	bne.n	10013b82 <__gedf2+0x5e>
10013b7c:	4658      	mov	r0, fp
10013b7e:	4302      	orrs	r2, r0
10013b80:	d001      	beq.n	10013b86 <__gedf2+0x62>
10013b82:	4299      	cmp	r1, r3
10013b84:	d01a      	beq.n	10013bbc <__gedf2+0x98>
10013b86:	2301      	movs	r3, #1
10013b88:	4248      	negs	r0, r1
10013b8a:	4318      	orrs	r0, r3
10013b8c:	bc3c      	pop	{r2, r3, r4, r5}
10013b8e:	4690      	mov	r8, r2
10013b90:	4699      	mov	r9, r3
10013b92:	46a2      	mov	sl, r4
10013b94:	46ab      	mov	fp, r5
10013b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013b98:	2800      	cmp	r0, #0
10013b9a:	d0f2      	beq.n	10013b82 <__gedf2+0x5e>
10013b9c:	4258      	negs	r0, r3
10013b9e:	4158      	adcs	r0, r3
10013ba0:	2201      	movs	r2, #1
10013ba2:	4240      	negs	r0, r0
10013ba4:	4310      	orrs	r0, r2
10013ba6:	e7f1      	b.n	10013b8c <__gedf2+0x68>
10013ba8:	0037      	movs	r7, r6
10013baa:	4307      	orrs	r7, r0
10013bac:	d0d0      	beq.n	10013b50 <__gedf2+0x2c>
10013bae:	2002      	movs	r0, #2
10013bb0:	4240      	negs	r0, r0
10013bb2:	e7eb      	b.n	10013b8c <__gedf2+0x68>
10013bb4:	465f      	mov	r7, fp
10013bb6:	4317      	orrs	r7, r2
10013bb8:	d0cd      	beq.n	10013b56 <__gedf2+0x32>
10013bba:	e7f8      	b.n	10013bae <__gedf2+0x8a>
10013bbc:	42a5      	cmp	r5, r4
10013bbe:	dce2      	bgt.n	10013b86 <__gedf2+0x62>
10013bc0:	db05      	blt.n	10013bce <__gedf2+0xaa>
10013bc2:	455e      	cmp	r6, fp
10013bc4:	d8df      	bhi.n	10013b86 <__gedf2+0x62>
10013bc6:	d008      	beq.n	10013bda <__gedf2+0xb6>
10013bc8:	2000      	movs	r0, #0
10013bca:	455e      	cmp	r6, fp
10013bcc:	d2de      	bcs.n	10013b8c <__gedf2+0x68>
10013bce:	4248      	negs	r0, r1
10013bd0:	4148      	adcs	r0, r1
10013bd2:	2301      	movs	r3, #1
10013bd4:	4240      	negs	r0, r0
10013bd6:	4318      	orrs	r0, r3
10013bd8:	e7d8      	b.n	10013b8c <__gedf2+0x68>
10013bda:	45c4      	cmp	ip, r8
10013bdc:	d8d3      	bhi.n	10013b86 <__gedf2+0x62>
10013bde:	2000      	movs	r0, #0
10013be0:	45c4      	cmp	ip, r8
10013be2:	d3f4      	bcc.n	10013bce <__gedf2+0xaa>
10013be4:	e7d2      	b.n	10013b8c <__gedf2+0x68>
10013be6:	46c0      	nop			; (mov r8, r8)
10013be8:	000007ff 	.word	0x000007ff

10013bec <__ledf2>:
10013bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10013bee:	465f      	mov	r7, fp
10013bf0:	464d      	mov	r5, r9
10013bf2:	4644      	mov	r4, r8
10013bf4:	4656      	mov	r6, sl
10013bf6:	b4f0      	push	{r4, r5, r6, r7}
10013bf8:	031c      	lsls	r4, r3, #12
10013bfa:	0b24      	lsrs	r4, r4, #12
10013bfc:	46a4      	mov	ip, r4
10013bfe:	4c2f      	ldr	r4, [pc, #188]	; (10013cbc <__ledf2+0xd0>)
10013c00:	030f      	lsls	r7, r1, #12
10013c02:	004d      	lsls	r5, r1, #1
10013c04:	005e      	lsls	r6, r3, #1
10013c06:	0fc9      	lsrs	r1, r1, #31
10013c08:	4680      	mov	r8, r0
10013c0a:	0b3f      	lsrs	r7, r7, #12
10013c0c:	0d6d      	lsrs	r5, r5, #21
10013c0e:	468b      	mov	fp, r1
10013c10:	4691      	mov	r9, r2
10013c12:	0d76      	lsrs	r6, r6, #21
10013c14:	0fdb      	lsrs	r3, r3, #31
10013c16:	42a5      	cmp	r5, r4
10013c18:	d020      	beq.n	10013c5c <__ledf2+0x70>
10013c1a:	4c28      	ldr	r4, [pc, #160]	; (10013cbc <__ledf2+0xd0>)
10013c1c:	42a6      	cmp	r6, r4
10013c1e:	d022      	beq.n	10013c66 <__ledf2+0x7a>
10013c20:	2d00      	cmp	r5, #0
10013c22:	d112      	bne.n	10013c4a <__ledf2+0x5e>
10013c24:	4338      	orrs	r0, r7
10013c26:	4244      	negs	r4, r0
10013c28:	4144      	adcs	r4, r0
10013c2a:	2e00      	cmp	r6, #0
10013c2c:	d020      	beq.n	10013c70 <__ledf2+0x84>
10013c2e:	2c00      	cmp	r4, #0
10013c30:	d00d      	beq.n	10013c4e <__ledf2+0x62>
10013c32:	425c      	negs	r4, r3
10013c34:	4163      	adcs	r3, r4
10013c36:	2401      	movs	r4, #1
10013c38:	425b      	negs	r3, r3
10013c3a:	431c      	orrs	r4, r3
10013c3c:	0020      	movs	r0, r4
10013c3e:	bc3c      	pop	{r2, r3, r4, r5}
10013c40:	4690      	mov	r8, r2
10013c42:	4699      	mov	r9, r3
10013c44:	46a2      	mov	sl, r4
10013c46:	46ab      	mov	fp, r5
10013c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c4a:	2e00      	cmp	r6, #0
10013c4c:	d017      	beq.n	10013c7e <__ledf2+0x92>
10013c4e:	455b      	cmp	r3, fp
10013c50:	d019      	beq.n	10013c86 <__ledf2+0x9a>
10013c52:	465b      	mov	r3, fp
10013c54:	425c      	negs	r4, r3
10013c56:	2301      	movs	r3, #1
10013c58:	431c      	orrs	r4, r3
10013c5a:	e7ef      	b.n	10013c3c <__ledf2+0x50>
10013c5c:	0039      	movs	r1, r7
10013c5e:	2402      	movs	r4, #2
10013c60:	4301      	orrs	r1, r0
10013c62:	d1eb      	bne.n	10013c3c <__ledf2+0x50>
10013c64:	e7d9      	b.n	10013c1a <__ledf2+0x2e>
10013c66:	4661      	mov	r1, ip
10013c68:	2402      	movs	r4, #2
10013c6a:	4311      	orrs	r1, r2
10013c6c:	d1e6      	bne.n	10013c3c <__ledf2+0x50>
10013c6e:	e7d7      	b.n	10013c20 <__ledf2+0x34>
10013c70:	4661      	mov	r1, ip
10013c72:	430a      	orrs	r2, r1
10013c74:	d1db      	bne.n	10013c2e <__ledf2+0x42>
10013c76:	2400      	movs	r4, #0
10013c78:	2800      	cmp	r0, #0
10013c7a:	d0df      	beq.n	10013c3c <__ledf2+0x50>
10013c7c:	e7e9      	b.n	10013c52 <__ledf2+0x66>
10013c7e:	4661      	mov	r1, ip
10013c80:	430a      	orrs	r2, r1
10013c82:	d1e4      	bne.n	10013c4e <__ledf2+0x62>
10013c84:	e7e5      	b.n	10013c52 <__ledf2+0x66>
10013c86:	42b5      	cmp	r5, r6
10013c88:	dd03      	ble.n	10013c92 <__ledf2+0xa6>
10013c8a:	2201      	movs	r2, #1
10013c8c:	425c      	negs	r4, r3
10013c8e:	4314      	orrs	r4, r2
10013c90:	e7d4      	b.n	10013c3c <__ledf2+0x50>
10013c92:	42b5      	cmp	r5, r6
10013c94:	dbcd      	blt.n	10013c32 <__ledf2+0x46>
10013c96:	4567      	cmp	r7, ip
10013c98:	d8db      	bhi.n	10013c52 <__ledf2+0x66>
10013c9a:	d009      	beq.n	10013cb0 <__ledf2+0xc4>
10013c9c:	2400      	movs	r4, #0
10013c9e:	4567      	cmp	r7, ip
10013ca0:	d2cc      	bcs.n	10013c3c <__ledf2+0x50>
10013ca2:	4659      	mov	r1, fp
10013ca4:	424c      	negs	r4, r1
10013ca6:	4161      	adcs	r1, r4
10013ca8:	2401      	movs	r4, #1
10013caa:	4249      	negs	r1, r1
10013cac:	430c      	orrs	r4, r1
10013cae:	e7c5      	b.n	10013c3c <__ledf2+0x50>
10013cb0:	45c8      	cmp	r8, r9
10013cb2:	d8ce      	bhi.n	10013c52 <__ledf2+0x66>
10013cb4:	2400      	movs	r4, #0
10013cb6:	45c8      	cmp	r8, r9
10013cb8:	d3f3      	bcc.n	10013ca2 <__ledf2+0xb6>
10013cba:	e7bf      	b.n	10013c3c <__ledf2+0x50>
10013cbc:	000007ff 	.word	0x000007ff

10013cc0 <__aeabi_dmul>:
10013cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10013cc2:	465f      	mov	r7, fp
10013cc4:	4656      	mov	r6, sl
10013cc6:	464d      	mov	r5, r9
10013cc8:	4644      	mov	r4, r8
10013cca:	b4f0      	push	{r4, r5, r6, r7}
10013ccc:	030d      	lsls	r5, r1, #12
10013cce:	4699      	mov	r9, r3
10013cd0:	004e      	lsls	r6, r1, #1
10013cd2:	0b2b      	lsrs	r3, r5, #12
10013cd4:	b087      	sub	sp, #28
10013cd6:	0007      	movs	r7, r0
10013cd8:	4692      	mov	sl, r2
10013cda:	4680      	mov	r8, r0
10013cdc:	469b      	mov	fp, r3
10013cde:	0d76      	lsrs	r6, r6, #21
10013ce0:	0fcc      	lsrs	r4, r1, #31
10013ce2:	2e00      	cmp	r6, #0
10013ce4:	d069      	beq.n	10013dba <__aeabi_dmul+0xfa>
10013ce6:	4b6d      	ldr	r3, [pc, #436]	; (10013e9c <__aeabi_dmul+0x1dc>)
10013ce8:	429e      	cmp	r6, r3
10013cea:	d035      	beq.n	10013d58 <__aeabi_dmul+0x98>
10013cec:	465b      	mov	r3, fp
10013cee:	2280      	movs	r2, #128	; 0x80
10013cf0:	00dd      	lsls	r5, r3, #3
10013cf2:	0412      	lsls	r2, r2, #16
10013cf4:	0f43      	lsrs	r3, r0, #29
10013cf6:	4313      	orrs	r3, r2
10013cf8:	432b      	orrs	r3, r5
10013cfa:	469b      	mov	fp, r3
10013cfc:	00c3      	lsls	r3, r0, #3
10013cfe:	4698      	mov	r8, r3
10013d00:	4b67      	ldr	r3, [pc, #412]	; (10013ea0 <__aeabi_dmul+0x1e0>)
10013d02:	2700      	movs	r7, #0
10013d04:	469c      	mov	ip, r3
10013d06:	2300      	movs	r3, #0
10013d08:	4466      	add	r6, ip
10013d0a:	9301      	str	r3, [sp, #4]
10013d0c:	464a      	mov	r2, r9
10013d0e:	0315      	lsls	r5, r2, #12
10013d10:	0050      	lsls	r0, r2, #1
10013d12:	0fd2      	lsrs	r2, r2, #31
10013d14:	4653      	mov	r3, sl
10013d16:	0b2d      	lsrs	r5, r5, #12
10013d18:	0d40      	lsrs	r0, r0, #21
10013d1a:	4691      	mov	r9, r2
10013d1c:	d100      	bne.n	10013d20 <__aeabi_dmul+0x60>
10013d1e:	e076      	b.n	10013e0e <__aeabi_dmul+0x14e>
10013d20:	4a5e      	ldr	r2, [pc, #376]	; (10013e9c <__aeabi_dmul+0x1dc>)
10013d22:	4290      	cmp	r0, r2
10013d24:	d06c      	beq.n	10013e00 <__aeabi_dmul+0x140>
10013d26:	2280      	movs	r2, #128	; 0x80
10013d28:	0f5b      	lsrs	r3, r3, #29
10013d2a:	0412      	lsls	r2, r2, #16
10013d2c:	4313      	orrs	r3, r2
10013d2e:	4a5c      	ldr	r2, [pc, #368]	; (10013ea0 <__aeabi_dmul+0x1e0>)
10013d30:	00ed      	lsls	r5, r5, #3
10013d32:	4694      	mov	ip, r2
10013d34:	431d      	orrs	r5, r3
10013d36:	4653      	mov	r3, sl
10013d38:	2200      	movs	r2, #0
10013d3a:	00db      	lsls	r3, r3, #3
10013d3c:	4460      	add	r0, ip
10013d3e:	4649      	mov	r1, r9
10013d40:	1836      	adds	r6, r6, r0
10013d42:	1c70      	adds	r0, r6, #1
10013d44:	4061      	eors	r1, r4
10013d46:	9002      	str	r0, [sp, #8]
10013d48:	4317      	orrs	r7, r2
10013d4a:	2f0f      	cmp	r7, #15
10013d4c:	d900      	bls.n	10013d50 <__aeabi_dmul+0x90>
10013d4e:	e0af      	b.n	10013eb0 <__aeabi_dmul+0x1f0>
10013d50:	4854      	ldr	r0, [pc, #336]	; (10013ea4 <__aeabi_dmul+0x1e4>)
10013d52:	00bf      	lsls	r7, r7, #2
10013d54:	59c7      	ldr	r7, [r0, r7]
10013d56:	46bf      	mov	pc, r7
10013d58:	465b      	mov	r3, fp
10013d5a:	431f      	orrs	r7, r3
10013d5c:	d000      	beq.n	10013d60 <__aeabi_dmul+0xa0>
10013d5e:	e088      	b.n	10013e72 <__aeabi_dmul+0x1b2>
10013d60:	2300      	movs	r3, #0
10013d62:	469b      	mov	fp, r3
10013d64:	4698      	mov	r8, r3
10013d66:	3302      	adds	r3, #2
10013d68:	2708      	movs	r7, #8
10013d6a:	9301      	str	r3, [sp, #4]
10013d6c:	e7ce      	b.n	10013d0c <__aeabi_dmul+0x4c>
10013d6e:	4649      	mov	r1, r9
10013d70:	2a02      	cmp	r2, #2
10013d72:	d06a      	beq.n	10013e4a <__aeabi_dmul+0x18a>
10013d74:	2a03      	cmp	r2, #3
10013d76:	d100      	bne.n	10013d7a <__aeabi_dmul+0xba>
10013d78:	e209      	b.n	1001418e <__aeabi_dmul+0x4ce>
10013d7a:	2a01      	cmp	r2, #1
10013d7c:	d000      	beq.n	10013d80 <__aeabi_dmul+0xc0>
10013d7e:	e1bb      	b.n	100140f8 <__aeabi_dmul+0x438>
10013d80:	4011      	ands	r1, r2
10013d82:	2200      	movs	r2, #0
10013d84:	2300      	movs	r3, #0
10013d86:	2500      	movs	r5, #0
10013d88:	4690      	mov	r8, r2
10013d8a:	b2cc      	uxtb	r4, r1
10013d8c:	2100      	movs	r1, #0
10013d8e:	032d      	lsls	r5, r5, #12
10013d90:	0d0a      	lsrs	r2, r1, #20
10013d92:	0512      	lsls	r2, r2, #20
10013d94:	0b2d      	lsrs	r5, r5, #12
10013d96:	4315      	orrs	r5, r2
10013d98:	4a43      	ldr	r2, [pc, #268]	; (10013ea8 <__aeabi_dmul+0x1e8>)
10013d9a:	051b      	lsls	r3, r3, #20
10013d9c:	4015      	ands	r5, r2
10013d9e:	431d      	orrs	r5, r3
10013da0:	006d      	lsls	r5, r5, #1
10013da2:	07e4      	lsls	r4, r4, #31
10013da4:	086d      	lsrs	r5, r5, #1
10013da6:	4325      	orrs	r5, r4
10013da8:	4640      	mov	r0, r8
10013daa:	0029      	movs	r1, r5
10013dac:	b007      	add	sp, #28
10013dae:	bc3c      	pop	{r2, r3, r4, r5}
10013db0:	4690      	mov	r8, r2
10013db2:	4699      	mov	r9, r3
10013db4:	46a2      	mov	sl, r4
10013db6:	46ab      	mov	fp, r5
10013db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013dba:	4303      	orrs	r3, r0
10013dbc:	d052      	beq.n	10013e64 <__aeabi_dmul+0x1a4>
10013dbe:	465b      	mov	r3, fp
10013dc0:	2b00      	cmp	r3, #0
10013dc2:	d100      	bne.n	10013dc6 <__aeabi_dmul+0x106>
10013dc4:	e18a      	b.n	100140dc <__aeabi_dmul+0x41c>
10013dc6:	4658      	mov	r0, fp
10013dc8:	f000 fdb6 	bl	10014938 <__clzsi2>
10013dcc:	0003      	movs	r3, r0
10013dce:	3b0b      	subs	r3, #11
10013dd0:	2b1c      	cmp	r3, #28
10013dd2:	dd00      	ble.n	10013dd6 <__aeabi_dmul+0x116>
10013dd4:	e17b      	b.n	100140ce <__aeabi_dmul+0x40e>
10013dd6:	221d      	movs	r2, #29
10013dd8:	1ad3      	subs	r3, r2, r3
10013dda:	003a      	movs	r2, r7
10013ddc:	0001      	movs	r1, r0
10013dde:	465d      	mov	r5, fp
10013de0:	40da      	lsrs	r2, r3
10013de2:	3908      	subs	r1, #8
10013de4:	408d      	lsls	r5, r1
10013de6:	0013      	movs	r3, r2
10013de8:	408f      	lsls	r7, r1
10013dea:	432b      	orrs	r3, r5
10013dec:	469b      	mov	fp, r3
10013dee:	46b8      	mov	r8, r7
10013df0:	4b2e      	ldr	r3, [pc, #184]	; (10013eac <__aeabi_dmul+0x1ec>)
10013df2:	2700      	movs	r7, #0
10013df4:	469c      	mov	ip, r3
10013df6:	2300      	movs	r3, #0
10013df8:	4460      	add	r0, ip
10013dfa:	4246      	negs	r6, r0
10013dfc:	9301      	str	r3, [sp, #4]
10013dfe:	e785      	b.n	10013d0c <__aeabi_dmul+0x4c>
10013e00:	4652      	mov	r2, sl
10013e02:	432a      	orrs	r2, r5
10013e04:	d12c      	bne.n	10013e60 <__aeabi_dmul+0x1a0>
10013e06:	2500      	movs	r5, #0
10013e08:	2300      	movs	r3, #0
10013e0a:	2202      	movs	r2, #2
10013e0c:	e797      	b.n	10013d3e <__aeabi_dmul+0x7e>
10013e0e:	4652      	mov	r2, sl
10013e10:	432a      	orrs	r2, r5
10013e12:	d021      	beq.n	10013e58 <__aeabi_dmul+0x198>
10013e14:	2d00      	cmp	r5, #0
10013e16:	d100      	bne.n	10013e1a <__aeabi_dmul+0x15a>
10013e18:	e154      	b.n	100140c4 <__aeabi_dmul+0x404>
10013e1a:	0028      	movs	r0, r5
10013e1c:	f000 fd8c 	bl	10014938 <__clzsi2>
10013e20:	0003      	movs	r3, r0
10013e22:	3b0b      	subs	r3, #11
10013e24:	2b1c      	cmp	r3, #28
10013e26:	dd00      	ble.n	10013e2a <__aeabi_dmul+0x16a>
10013e28:	e146      	b.n	100140b8 <__aeabi_dmul+0x3f8>
10013e2a:	211d      	movs	r1, #29
10013e2c:	1acb      	subs	r3, r1, r3
10013e2e:	4651      	mov	r1, sl
10013e30:	0002      	movs	r2, r0
10013e32:	40d9      	lsrs	r1, r3
10013e34:	4653      	mov	r3, sl
10013e36:	3a08      	subs	r2, #8
10013e38:	4095      	lsls	r5, r2
10013e3a:	4093      	lsls	r3, r2
10013e3c:	430d      	orrs	r5, r1
10013e3e:	4a1b      	ldr	r2, [pc, #108]	; (10013eac <__aeabi_dmul+0x1ec>)
10013e40:	4694      	mov	ip, r2
10013e42:	4460      	add	r0, ip
10013e44:	4240      	negs	r0, r0
10013e46:	2200      	movs	r2, #0
10013e48:	e779      	b.n	10013d3e <__aeabi_dmul+0x7e>
10013e4a:	2401      	movs	r4, #1
10013e4c:	2200      	movs	r2, #0
10013e4e:	400c      	ands	r4, r1
10013e50:	4b12      	ldr	r3, [pc, #72]	; (10013e9c <__aeabi_dmul+0x1dc>)
10013e52:	2500      	movs	r5, #0
10013e54:	4690      	mov	r8, r2
10013e56:	e799      	b.n	10013d8c <__aeabi_dmul+0xcc>
10013e58:	2500      	movs	r5, #0
10013e5a:	2300      	movs	r3, #0
10013e5c:	2201      	movs	r2, #1
10013e5e:	e76e      	b.n	10013d3e <__aeabi_dmul+0x7e>
10013e60:	2203      	movs	r2, #3
10013e62:	e76c      	b.n	10013d3e <__aeabi_dmul+0x7e>
10013e64:	2300      	movs	r3, #0
10013e66:	469b      	mov	fp, r3
10013e68:	4698      	mov	r8, r3
10013e6a:	3301      	adds	r3, #1
10013e6c:	2704      	movs	r7, #4
10013e6e:	9301      	str	r3, [sp, #4]
10013e70:	e74c      	b.n	10013d0c <__aeabi_dmul+0x4c>
10013e72:	2303      	movs	r3, #3
10013e74:	270c      	movs	r7, #12
10013e76:	9301      	str	r3, [sp, #4]
10013e78:	e748      	b.n	10013d0c <__aeabi_dmul+0x4c>
10013e7a:	2300      	movs	r3, #0
10013e7c:	2580      	movs	r5, #128	; 0x80
10013e7e:	4698      	mov	r8, r3
10013e80:	2400      	movs	r4, #0
10013e82:	032d      	lsls	r5, r5, #12
10013e84:	4b05      	ldr	r3, [pc, #20]	; (10013e9c <__aeabi_dmul+0x1dc>)
10013e86:	e781      	b.n	10013d8c <__aeabi_dmul+0xcc>
10013e88:	465d      	mov	r5, fp
10013e8a:	4643      	mov	r3, r8
10013e8c:	9a01      	ldr	r2, [sp, #4]
10013e8e:	e76f      	b.n	10013d70 <__aeabi_dmul+0xb0>
10013e90:	465d      	mov	r5, fp
10013e92:	4643      	mov	r3, r8
10013e94:	0021      	movs	r1, r4
10013e96:	9a01      	ldr	r2, [sp, #4]
10013e98:	e76a      	b.n	10013d70 <__aeabi_dmul+0xb0>
10013e9a:	46c0      	nop			; (mov r8, r8)
10013e9c:	000007ff 	.word	0x000007ff
10013ea0:	fffffc01 	.word	0xfffffc01
10013ea4:	10017ccc 	.word	0x10017ccc
10013ea8:	800fffff 	.word	0x800fffff
10013eac:	000003f3 	.word	0x000003f3
10013eb0:	4642      	mov	r2, r8
10013eb2:	0c12      	lsrs	r2, r2, #16
10013eb4:	4691      	mov	r9, r2
10013eb6:	0c1a      	lsrs	r2, r3, #16
10013eb8:	4694      	mov	ip, r2
10013eba:	4642      	mov	r2, r8
10013ebc:	0417      	lsls	r7, r2, #16
10013ebe:	464a      	mov	r2, r9
10013ec0:	041b      	lsls	r3, r3, #16
10013ec2:	0c1b      	lsrs	r3, r3, #16
10013ec4:	435a      	muls	r2, r3
10013ec6:	4660      	mov	r0, ip
10013ec8:	4690      	mov	r8, r2
10013eca:	464a      	mov	r2, r9
10013ecc:	4342      	muls	r2, r0
10013ece:	0010      	movs	r0, r2
10013ed0:	9203      	str	r2, [sp, #12]
10013ed2:	4662      	mov	r2, ip
10013ed4:	001c      	movs	r4, r3
10013ed6:	0c3f      	lsrs	r7, r7, #16
10013ed8:	437a      	muls	r2, r7
10013eda:	437c      	muls	r4, r7
10013edc:	4442      	add	r2, r8
10013ede:	9201      	str	r2, [sp, #4]
10013ee0:	0c22      	lsrs	r2, r4, #16
10013ee2:	4692      	mov	sl, r2
10013ee4:	9a01      	ldr	r2, [sp, #4]
10013ee6:	4452      	add	r2, sl
10013ee8:	4590      	cmp	r8, r2
10013eea:	d906      	bls.n	10013efa <__aeabi_dmul+0x23a>
10013eec:	4682      	mov	sl, r0
10013eee:	2080      	movs	r0, #128	; 0x80
10013ef0:	0240      	lsls	r0, r0, #9
10013ef2:	4680      	mov	r8, r0
10013ef4:	44c2      	add	sl, r8
10013ef6:	4650      	mov	r0, sl
10013ef8:	9003      	str	r0, [sp, #12]
10013efa:	0c10      	lsrs	r0, r2, #16
10013efc:	9004      	str	r0, [sp, #16]
10013efe:	4648      	mov	r0, r9
10013f00:	0424      	lsls	r4, r4, #16
10013f02:	0c24      	lsrs	r4, r4, #16
10013f04:	0412      	lsls	r2, r2, #16
10013f06:	1912      	adds	r2, r2, r4
10013f08:	9205      	str	r2, [sp, #20]
10013f0a:	0c2a      	lsrs	r2, r5, #16
10013f0c:	042d      	lsls	r5, r5, #16
10013f0e:	0c2d      	lsrs	r5, r5, #16
10013f10:	4368      	muls	r0, r5
10013f12:	002c      	movs	r4, r5
10013f14:	4682      	mov	sl, r0
10013f16:	4648      	mov	r0, r9
10013f18:	437c      	muls	r4, r7
10013f1a:	4350      	muls	r0, r2
10013f1c:	4681      	mov	r9, r0
10013f1e:	0c20      	lsrs	r0, r4, #16
10013f20:	4680      	mov	r8, r0
10013f22:	4357      	muls	r7, r2
10013f24:	4457      	add	r7, sl
10013f26:	4447      	add	r7, r8
10013f28:	45ba      	cmp	sl, r7
10013f2a:	d903      	bls.n	10013f34 <__aeabi_dmul+0x274>
10013f2c:	2080      	movs	r0, #128	; 0x80
10013f2e:	0240      	lsls	r0, r0, #9
10013f30:	4680      	mov	r8, r0
10013f32:	44c1      	add	r9, r8
10013f34:	0c38      	lsrs	r0, r7, #16
10013f36:	043f      	lsls	r7, r7, #16
10013f38:	46b8      	mov	r8, r7
10013f3a:	4448      	add	r0, r9
10013f3c:	0424      	lsls	r4, r4, #16
10013f3e:	0c24      	lsrs	r4, r4, #16
10013f40:	9001      	str	r0, [sp, #4]
10013f42:	9804      	ldr	r0, [sp, #16]
10013f44:	44a0      	add	r8, r4
10013f46:	4440      	add	r0, r8
10013f48:	9004      	str	r0, [sp, #16]
10013f4a:	4658      	mov	r0, fp
10013f4c:	0c00      	lsrs	r0, r0, #16
10013f4e:	4681      	mov	r9, r0
10013f50:	4658      	mov	r0, fp
10013f52:	0404      	lsls	r4, r0, #16
10013f54:	0c20      	lsrs	r0, r4, #16
10013f56:	4682      	mov	sl, r0
10013f58:	0007      	movs	r7, r0
10013f5a:	4648      	mov	r0, r9
10013f5c:	435f      	muls	r7, r3
10013f5e:	464c      	mov	r4, r9
10013f60:	4343      	muls	r3, r0
10013f62:	4660      	mov	r0, ip
10013f64:	4360      	muls	r0, r4
10013f66:	4664      	mov	r4, ip
10013f68:	4683      	mov	fp, r0
10013f6a:	4650      	mov	r0, sl
10013f6c:	4344      	muls	r4, r0
10013f6e:	0c38      	lsrs	r0, r7, #16
10013f70:	4684      	mov	ip, r0
10013f72:	18e4      	adds	r4, r4, r3
10013f74:	4464      	add	r4, ip
10013f76:	42a3      	cmp	r3, r4
10013f78:	d903      	bls.n	10013f82 <__aeabi_dmul+0x2c2>
10013f7a:	2380      	movs	r3, #128	; 0x80
10013f7c:	025b      	lsls	r3, r3, #9
10013f7e:	469c      	mov	ip, r3
10013f80:	44e3      	add	fp, ip
10013f82:	4648      	mov	r0, r9
10013f84:	043f      	lsls	r7, r7, #16
10013f86:	0c23      	lsrs	r3, r4, #16
10013f88:	0c3f      	lsrs	r7, r7, #16
10013f8a:	0424      	lsls	r4, r4, #16
10013f8c:	19e4      	adds	r4, r4, r7
10013f8e:	4657      	mov	r7, sl
10013f90:	4368      	muls	r0, r5
10013f92:	436f      	muls	r7, r5
10013f94:	4684      	mov	ip, r0
10013f96:	464d      	mov	r5, r9
10013f98:	4650      	mov	r0, sl
10013f9a:	4355      	muls	r5, r2
10013f9c:	4342      	muls	r2, r0
10013f9e:	0c38      	lsrs	r0, r7, #16
10013fa0:	4681      	mov	r9, r0
10013fa2:	4462      	add	r2, ip
10013fa4:	444a      	add	r2, r9
10013fa6:	445b      	add	r3, fp
10013fa8:	4594      	cmp	ip, r2
10013faa:	d903      	bls.n	10013fb4 <__aeabi_dmul+0x2f4>
10013fac:	2080      	movs	r0, #128	; 0x80
10013fae:	0240      	lsls	r0, r0, #9
10013fb0:	4684      	mov	ip, r0
10013fb2:	4465      	add	r5, ip
10013fb4:	9803      	ldr	r0, [sp, #12]
10013fb6:	043f      	lsls	r7, r7, #16
10013fb8:	4683      	mov	fp, r0
10013fba:	9804      	ldr	r0, [sp, #16]
10013fbc:	0c3f      	lsrs	r7, r7, #16
10013fbe:	4684      	mov	ip, r0
10013fc0:	44e3      	add	fp, ip
10013fc2:	45c3      	cmp	fp, r8
10013fc4:	4180      	sbcs	r0, r0
10013fc6:	4240      	negs	r0, r0
10013fc8:	4682      	mov	sl, r0
10013fca:	0410      	lsls	r0, r2, #16
10013fcc:	4684      	mov	ip, r0
10013fce:	9801      	ldr	r0, [sp, #4]
10013fd0:	4467      	add	r7, ip
10013fd2:	4684      	mov	ip, r0
10013fd4:	4467      	add	r7, ip
10013fd6:	44a3      	add	fp, r4
10013fd8:	46bc      	mov	ip, r7
10013fda:	45a3      	cmp	fp, r4
10013fdc:	41a4      	sbcs	r4, r4
10013fde:	4699      	mov	r9, r3
10013fe0:	44d4      	add	ip, sl
10013fe2:	4264      	negs	r4, r4
10013fe4:	4287      	cmp	r7, r0
10013fe6:	41bf      	sbcs	r7, r7
10013fe8:	45d4      	cmp	ip, sl
10013fea:	4180      	sbcs	r0, r0
10013fec:	44e1      	add	r9, ip
10013fee:	46a0      	mov	r8, r4
10013ff0:	4599      	cmp	r9, r3
10013ff2:	419b      	sbcs	r3, r3
10013ff4:	427f      	negs	r7, r7
10013ff6:	4240      	negs	r0, r0
10013ff8:	44c8      	add	r8, r9
10013ffa:	4307      	orrs	r7, r0
10013ffc:	0c12      	lsrs	r2, r2, #16
10013ffe:	18ba      	adds	r2, r7, r2
10014000:	45a0      	cmp	r8, r4
10014002:	41a4      	sbcs	r4, r4
10014004:	425f      	negs	r7, r3
10014006:	003b      	movs	r3, r7
10014008:	4264      	negs	r4, r4
1001400a:	4323      	orrs	r3, r4
1001400c:	18d7      	adds	r7, r2, r3
1001400e:	4643      	mov	r3, r8
10014010:	197d      	adds	r5, r7, r5
10014012:	0ddb      	lsrs	r3, r3, #23
10014014:	026d      	lsls	r5, r5, #9
10014016:	431d      	orrs	r5, r3
10014018:	465b      	mov	r3, fp
1001401a:	025a      	lsls	r2, r3, #9
1001401c:	9b05      	ldr	r3, [sp, #20]
1001401e:	431a      	orrs	r2, r3
10014020:	1e53      	subs	r3, r2, #1
10014022:	419a      	sbcs	r2, r3
10014024:	465b      	mov	r3, fp
10014026:	0ddb      	lsrs	r3, r3, #23
10014028:	431a      	orrs	r2, r3
1001402a:	4643      	mov	r3, r8
1001402c:	025b      	lsls	r3, r3, #9
1001402e:	4313      	orrs	r3, r2
10014030:	01ea      	lsls	r2, r5, #7
10014032:	d507      	bpl.n	10014044 <__aeabi_dmul+0x384>
10014034:	2201      	movs	r2, #1
10014036:	085c      	lsrs	r4, r3, #1
10014038:	4013      	ands	r3, r2
1001403a:	4323      	orrs	r3, r4
1001403c:	07ea      	lsls	r2, r5, #31
1001403e:	9e02      	ldr	r6, [sp, #8]
10014040:	4313      	orrs	r3, r2
10014042:	086d      	lsrs	r5, r5, #1
10014044:	4a57      	ldr	r2, [pc, #348]	; (100141a4 <__aeabi_dmul+0x4e4>)
10014046:	18b2      	adds	r2, r6, r2
10014048:	2a00      	cmp	r2, #0
1001404a:	dd4b      	ble.n	100140e4 <__aeabi_dmul+0x424>
1001404c:	0758      	lsls	r0, r3, #29
1001404e:	d009      	beq.n	10014064 <__aeabi_dmul+0x3a4>
10014050:	200f      	movs	r0, #15
10014052:	4018      	ands	r0, r3
10014054:	2804      	cmp	r0, #4
10014056:	d005      	beq.n	10014064 <__aeabi_dmul+0x3a4>
10014058:	1d18      	adds	r0, r3, #4
1001405a:	4298      	cmp	r0, r3
1001405c:	419b      	sbcs	r3, r3
1001405e:	425b      	negs	r3, r3
10014060:	18ed      	adds	r5, r5, r3
10014062:	0003      	movs	r3, r0
10014064:	01e8      	lsls	r0, r5, #7
10014066:	d504      	bpl.n	10014072 <__aeabi_dmul+0x3b2>
10014068:	4a4f      	ldr	r2, [pc, #316]	; (100141a8 <__aeabi_dmul+0x4e8>)
1001406a:	4015      	ands	r5, r2
1001406c:	2280      	movs	r2, #128	; 0x80
1001406e:	00d2      	lsls	r2, r2, #3
10014070:	18b2      	adds	r2, r6, r2
10014072:	484e      	ldr	r0, [pc, #312]	; (100141ac <__aeabi_dmul+0x4ec>)
10014074:	4282      	cmp	r2, r0
10014076:	dd00      	ble.n	1001407a <__aeabi_dmul+0x3ba>
10014078:	e6e7      	b.n	10013e4a <__aeabi_dmul+0x18a>
1001407a:	2401      	movs	r4, #1
1001407c:	08db      	lsrs	r3, r3, #3
1001407e:	0768      	lsls	r0, r5, #29
10014080:	4318      	orrs	r0, r3
10014082:	026d      	lsls	r5, r5, #9
10014084:	0553      	lsls	r3, r2, #21
10014086:	4680      	mov	r8, r0
10014088:	0b2d      	lsrs	r5, r5, #12
1001408a:	0d5b      	lsrs	r3, r3, #21
1001408c:	400c      	ands	r4, r1
1001408e:	e67d      	b.n	10013d8c <__aeabi_dmul+0xcc>
10014090:	2280      	movs	r2, #128	; 0x80
10014092:	4659      	mov	r1, fp
10014094:	0312      	lsls	r2, r2, #12
10014096:	4211      	tst	r1, r2
10014098:	d008      	beq.n	100140ac <__aeabi_dmul+0x3ec>
1001409a:	4215      	tst	r5, r2
1001409c:	d106      	bne.n	100140ac <__aeabi_dmul+0x3ec>
1001409e:	4315      	orrs	r5, r2
100140a0:	032d      	lsls	r5, r5, #12
100140a2:	4698      	mov	r8, r3
100140a4:	0b2d      	lsrs	r5, r5, #12
100140a6:	464c      	mov	r4, r9
100140a8:	4b41      	ldr	r3, [pc, #260]	; (100141b0 <__aeabi_dmul+0x4f0>)
100140aa:	e66f      	b.n	10013d8c <__aeabi_dmul+0xcc>
100140ac:	465d      	mov	r5, fp
100140ae:	4315      	orrs	r5, r2
100140b0:	032d      	lsls	r5, r5, #12
100140b2:	0b2d      	lsrs	r5, r5, #12
100140b4:	4b3e      	ldr	r3, [pc, #248]	; (100141b0 <__aeabi_dmul+0x4f0>)
100140b6:	e669      	b.n	10013d8c <__aeabi_dmul+0xcc>
100140b8:	0003      	movs	r3, r0
100140ba:	4655      	mov	r5, sl
100140bc:	3b28      	subs	r3, #40	; 0x28
100140be:	409d      	lsls	r5, r3
100140c0:	2300      	movs	r3, #0
100140c2:	e6bc      	b.n	10013e3e <__aeabi_dmul+0x17e>
100140c4:	4650      	mov	r0, sl
100140c6:	f000 fc37 	bl	10014938 <__clzsi2>
100140ca:	3020      	adds	r0, #32
100140cc:	e6a8      	b.n	10013e20 <__aeabi_dmul+0x160>
100140ce:	0003      	movs	r3, r0
100140d0:	3b28      	subs	r3, #40	; 0x28
100140d2:	409f      	lsls	r7, r3
100140d4:	2300      	movs	r3, #0
100140d6:	46bb      	mov	fp, r7
100140d8:	4698      	mov	r8, r3
100140da:	e689      	b.n	10013df0 <__aeabi_dmul+0x130>
100140dc:	f000 fc2c 	bl	10014938 <__clzsi2>
100140e0:	3020      	adds	r0, #32
100140e2:	e673      	b.n	10013dcc <__aeabi_dmul+0x10c>
100140e4:	2401      	movs	r4, #1
100140e6:	1aa6      	subs	r6, r4, r2
100140e8:	2e38      	cmp	r6, #56	; 0x38
100140ea:	dd07      	ble.n	100140fc <__aeabi_dmul+0x43c>
100140ec:	2200      	movs	r2, #0
100140ee:	400c      	ands	r4, r1
100140f0:	2300      	movs	r3, #0
100140f2:	2500      	movs	r5, #0
100140f4:	4690      	mov	r8, r2
100140f6:	e649      	b.n	10013d8c <__aeabi_dmul+0xcc>
100140f8:	9e02      	ldr	r6, [sp, #8]
100140fa:	e7a3      	b.n	10014044 <__aeabi_dmul+0x384>
100140fc:	2e1f      	cmp	r6, #31
100140fe:	dc20      	bgt.n	10014142 <__aeabi_dmul+0x482>
10014100:	2220      	movs	r2, #32
10014102:	002c      	movs	r4, r5
10014104:	0018      	movs	r0, r3
10014106:	1b92      	subs	r2, r2, r6
10014108:	40f0      	lsrs	r0, r6
1001410a:	4094      	lsls	r4, r2
1001410c:	4093      	lsls	r3, r2
1001410e:	4304      	orrs	r4, r0
10014110:	1e58      	subs	r0, r3, #1
10014112:	4183      	sbcs	r3, r0
10014114:	431c      	orrs	r4, r3
10014116:	40f5      	lsrs	r5, r6
10014118:	0763      	lsls	r3, r4, #29
1001411a:	d009      	beq.n	10014130 <__aeabi_dmul+0x470>
1001411c:	230f      	movs	r3, #15
1001411e:	4023      	ands	r3, r4
10014120:	2b04      	cmp	r3, #4
10014122:	d005      	beq.n	10014130 <__aeabi_dmul+0x470>
10014124:	0023      	movs	r3, r4
10014126:	1d1c      	adds	r4, r3, #4
10014128:	429c      	cmp	r4, r3
1001412a:	4192      	sbcs	r2, r2
1001412c:	4252      	negs	r2, r2
1001412e:	18ad      	adds	r5, r5, r2
10014130:	022b      	lsls	r3, r5, #8
10014132:	d51f      	bpl.n	10014174 <__aeabi_dmul+0x4b4>
10014134:	2401      	movs	r4, #1
10014136:	2200      	movs	r2, #0
10014138:	400c      	ands	r4, r1
1001413a:	2301      	movs	r3, #1
1001413c:	2500      	movs	r5, #0
1001413e:	4690      	mov	r8, r2
10014140:	e624      	b.n	10013d8c <__aeabi_dmul+0xcc>
10014142:	201f      	movs	r0, #31
10014144:	002c      	movs	r4, r5
10014146:	4240      	negs	r0, r0
10014148:	1a82      	subs	r2, r0, r2
1001414a:	40d4      	lsrs	r4, r2
1001414c:	2e20      	cmp	r6, #32
1001414e:	d01c      	beq.n	1001418a <__aeabi_dmul+0x4ca>
10014150:	2240      	movs	r2, #64	; 0x40
10014152:	1b96      	subs	r6, r2, r6
10014154:	40b5      	lsls	r5, r6
10014156:	432b      	orrs	r3, r5
10014158:	1e58      	subs	r0, r3, #1
1001415a:	4183      	sbcs	r3, r0
1001415c:	2007      	movs	r0, #7
1001415e:	4323      	orrs	r3, r4
10014160:	4018      	ands	r0, r3
10014162:	2500      	movs	r5, #0
10014164:	2800      	cmp	r0, #0
10014166:	d009      	beq.n	1001417c <__aeabi_dmul+0x4bc>
10014168:	220f      	movs	r2, #15
1001416a:	2500      	movs	r5, #0
1001416c:	401a      	ands	r2, r3
1001416e:	001c      	movs	r4, r3
10014170:	2a04      	cmp	r2, #4
10014172:	d1d8      	bne.n	10014126 <__aeabi_dmul+0x466>
10014174:	0023      	movs	r3, r4
10014176:	0768      	lsls	r0, r5, #29
10014178:	026d      	lsls	r5, r5, #9
1001417a:	0b2d      	lsrs	r5, r5, #12
1001417c:	2401      	movs	r4, #1
1001417e:	08db      	lsrs	r3, r3, #3
10014180:	4303      	orrs	r3, r0
10014182:	4698      	mov	r8, r3
10014184:	400c      	ands	r4, r1
10014186:	2300      	movs	r3, #0
10014188:	e600      	b.n	10013d8c <__aeabi_dmul+0xcc>
1001418a:	2500      	movs	r5, #0
1001418c:	e7e3      	b.n	10014156 <__aeabi_dmul+0x496>
1001418e:	2280      	movs	r2, #128	; 0x80
10014190:	2401      	movs	r4, #1
10014192:	0312      	lsls	r2, r2, #12
10014194:	4315      	orrs	r5, r2
10014196:	032d      	lsls	r5, r5, #12
10014198:	4698      	mov	r8, r3
1001419a:	0b2d      	lsrs	r5, r5, #12
1001419c:	400c      	ands	r4, r1
1001419e:	4b04      	ldr	r3, [pc, #16]	; (100141b0 <__aeabi_dmul+0x4f0>)
100141a0:	e5f4      	b.n	10013d8c <__aeabi_dmul+0xcc>
100141a2:	46c0      	nop			; (mov r8, r8)
100141a4:	000003ff 	.word	0x000003ff
100141a8:	feffffff 	.word	0xfeffffff
100141ac:	000007fe 	.word	0x000007fe
100141b0:	000007ff 	.word	0x000007ff

100141b4 <__aeabi_dsub>:
100141b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100141b6:	4657      	mov	r7, sl
100141b8:	464e      	mov	r6, r9
100141ba:	4645      	mov	r5, r8
100141bc:	b4e0      	push	{r5, r6, r7}
100141be:	000e      	movs	r6, r1
100141c0:	0011      	movs	r1, r2
100141c2:	0ff2      	lsrs	r2, r6, #31
100141c4:	4692      	mov	sl, r2
100141c6:	00c5      	lsls	r5, r0, #3
100141c8:	0f42      	lsrs	r2, r0, #29
100141ca:	0318      	lsls	r0, r3, #12
100141cc:	0337      	lsls	r7, r6, #12
100141ce:	0074      	lsls	r4, r6, #1
100141d0:	0a40      	lsrs	r0, r0, #9
100141d2:	0f4e      	lsrs	r6, r1, #29
100141d4:	0a7f      	lsrs	r7, r7, #9
100141d6:	4330      	orrs	r0, r6
100141d8:	4ecf      	ldr	r6, [pc, #828]	; (10014518 <__aeabi_dsub+0x364>)
100141da:	4317      	orrs	r7, r2
100141dc:	005a      	lsls	r2, r3, #1
100141de:	0d64      	lsrs	r4, r4, #21
100141e0:	0d52      	lsrs	r2, r2, #21
100141e2:	0fdb      	lsrs	r3, r3, #31
100141e4:	00c9      	lsls	r1, r1, #3
100141e6:	42b2      	cmp	r2, r6
100141e8:	d100      	bne.n	100141ec <__aeabi_dsub+0x38>
100141ea:	e0e5      	b.n	100143b8 <__aeabi_dsub+0x204>
100141ec:	2601      	movs	r6, #1
100141ee:	4073      	eors	r3, r6
100141f0:	1aa6      	subs	r6, r4, r2
100141f2:	46b4      	mov	ip, r6
100141f4:	4553      	cmp	r3, sl
100141f6:	d100      	bne.n	100141fa <__aeabi_dsub+0x46>
100141f8:	e0af      	b.n	1001435a <__aeabi_dsub+0x1a6>
100141fa:	2e00      	cmp	r6, #0
100141fc:	dc00      	bgt.n	10014200 <__aeabi_dsub+0x4c>
100141fe:	e10d      	b.n	1001441c <__aeabi_dsub+0x268>
10014200:	2a00      	cmp	r2, #0
10014202:	d13a      	bne.n	1001427a <__aeabi_dsub+0xc6>
10014204:	0003      	movs	r3, r0
10014206:	430b      	orrs	r3, r1
10014208:	d000      	beq.n	1001420c <__aeabi_dsub+0x58>
1001420a:	e0e4      	b.n	100143d6 <__aeabi_dsub+0x222>
1001420c:	076b      	lsls	r3, r5, #29
1001420e:	d009      	beq.n	10014224 <__aeabi_dsub+0x70>
10014210:	230f      	movs	r3, #15
10014212:	402b      	ands	r3, r5
10014214:	2b04      	cmp	r3, #4
10014216:	d005      	beq.n	10014224 <__aeabi_dsub+0x70>
10014218:	1d2b      	adds	r3, r5, #4
1001421a:	42ab      	cmp	r3, r5
1001421c:	41ad      	sbcs	r5, r5
1001421e:	426d      	negs	r5, r5
10014220:	197f      	adds	r7, r7, r5
10014222:	001d      	movs	r5, r3
10014224:	023b      	lsls	r3, r7, #8
10014226:	d400      	bmi.n	1001422a <__aeabi_dsub+0x76>
10014228:	e088      	b.n	1001433c <__aeabi_dsub+0x188>
1001422a:	4bbb      	ldr	r3, [pc, #748]	; (10014518 <__aeabi_dsub+0x364>)
1001422c:	3401      	adds	r4, #1
1001422e:	429c      	cmp	r4, r3
10014230:	d100      	bne.n	10014234 <__aeabi_dsub+0x80>
10014232:	e110      	b.n	10014456 <__aeabi_dsub+0x2a2>
10014234:	003a      	movs	r2, r7
10014236:	4bb9      	ldr	r3, [pc, #740]	; (1001451c <__aeabi_dsub+0x368>)
10014238:	4651      	mov	r1, sl
1001423a:	401a      	ands	r2, r3
1001423c:	2301      	movs	r3, #1
1001423e:	0750      	lsls	r0, r2, #29
10014240:	08ed      	lsrs	r5, r5, #3
10014242:	0252      	lsls	r2, r2, #9
10014244:	0564      	lsls	r4, r4, #21
10014246:	4305      	orrs	r5, r0
10014248:	0b12      	lsrs	r2, r2, #12
1001424a:	0d64      	lsrs	r4, r4, #21
1001424c:	400b      	ands	r3, r1
1001424e:	2100      	movs	r1, #0
10014250:	0028      	movs	r0, r5
10014252:	0312      	lsls	r2, r2, #12
10014254:	0d0d      	lsrs	r5, r1, #20
10014256:	0b12      	lsrs	r2, r2, #12
10014258:	0564      	lsls	r4, r4, #21
1001425a:	052d      	lsls	r5, r5, #20
1001425c:	4315      	orrs	r5, r2
1001425e:	0862      	lsrs	r2, r4, #1
10014260:	4caf      	ldr	r4, [pc, #700]	; (10014520 <__aeabi_dsub+0x36c>)
10014262:	07db      	lsls	r3, r3, #31
10014264:	402c      	ands	r4, r5
10014266:	4314      	orrs	r4, r2
10014268:	0064      	lsls	r4, r4, #1
1001426a:	0864      	lsrs	r4, r4, #1
1001426c:	431c      	orrs	r4, r3
1001426e:	0021      	movs	r1, r4
10014270:	bc1c      	pop	{r2, r3, r4}
10014272:	4690      	mov	r8, r2
10014274:	4699      	mov	r9, r3
10014276:	46a2      	mov	sl, r4
10014278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001427a:	4ba7      	ldr	r3, [pc, #668]	; (10014518 <__aeabi_dsub+0x364>)
1001427c:	429c      	cmp	r4, r3
1001427e:	d0c5      	beq.n	1001420c <__aeabi_dsub+0x58>
10014280:	2380      	movs	r3, #128	; 0x80
10014282:	041b      	lsls	r3, r3, #16
10014284:	4318      	orrs	r0, r3
10014286:	4663      	mov	r3, ip
10014288:	2b38      	cmp	r3, #56	; 0x38
1001428a:	dd00      	ble.n	1001428e <__aeabi_dsub+0xda>
1001428c:	e0fd      	b.n	1001448a <__aeabi_dsub+0x2d6>
1001428e:	2b1f      	cmp	r3, #31
10014290:	dd00      	ble.n	10014294 <__aeabi_dsub+0xe0>
10014292:	e130      	b.n	100144f6 <__aeabi_dsub+0x342>
10014294:	4662      	mov	r2, ip
10014296:	2320      	movs	r3, #32
10014298:	1a9b      	subs	r3, r3, r2
1001429a:	0002      	movs	r2, r0
1001429c:	409a      	lsls	r2, r3
1001429e:	4666      	mov	r6, ip
100142a0:	4690      	mov	r8, r2
100142a2:	000a      	movs	r2, r1
100142a4:	4099      	lsls	r1, r3
100142a6:	40f2      	lsrs	r2, r6
100142a8:	4646      	mov	r6, r8
100142aa:	1e4b      	subs	r3, r1, #1
100142ac:	4199      	sbcs	r1, r3
100142ae:	4332      	orrs	r2, r6
100142b0:	4311      	orrs	r1, r2
100142b2:	4663      	mov	r3, ip
100142b4:	0002      	movs	r2, r0
100142b6:	40da      	lsrs	r2, r3
100142b8:	1a69      	subs	r1, r5, r1
100142ba:	428d      	cmp	r5, r1
100142bc:	419b      	sbcs	r3, r3
100142be:	000d      	movs	r5, r1
100142c0:	1aba      	subs	r2, r7, r2
100142c2:	425b      	negs	r3, r3
100142c4:	1ad7      	subs	r7, r2, r3
100142c6:	023b      	lsls	r3, r7, #8
100142c8:	d535      	bpl.n	10014336 <__aeabi_dsub+0x182>
100142ca:	027a      	lsls	r2, r7, #9
100142cc:	0a53      	lsrs	r3, r2, #9
100142ce:	4698      	mov	r8, r3
100142d0:	4643      	mov	r3, r8
100142d2:	2b00      	cmp	r3, #0
100142d4:	d100      	bne.n	100142d8 <__aeabi_dsub+0x124>
100142d6:	e0c4      	b.n	10014462 <__aeabi_dsub+0x2ae>
100142d8:	4640      	mov	r0, r8
100142da:	f000 fb2d 	bl	10014938 <__clzsi2>
100142de:	0003      	movs	r3, r0
100142e0:	3b08      	subs	r3, #8
100142e2:	2b1f      	cmp	r3, #31
100142e4:	dd00      	ble.n	100142e8 <__aeabi_dsub+0x134>
100142e6:	e0c5      	b.n	10014474 <__aeabi_dsub+0x2c0>
100142e8:	2220      	movs	r2, #32
100142ea:	0029      	movs	r1, r5
100142ec:	1ad2      	subs	r2, r2, r3
100142ee:	4647      	mov	r7, r8
100142f0:	40d1      	lsrs	r1, r2
100142f2:	409f      	lsls	r7, r3
100142f4:	000a      	movs	r2, r1
100142f6:	409d      	lsls	r5, r3
100142f8:	433a      	orrs	r2, r7
100142fa:	429c      	cmp	r4, r3
100142fc:	dd00      	ble.n	10014300 <__aeabi_dsub+0x14c>
100142fe:	e0c0      	b.n	10014482 <__aeabi_dsub+0x2ce>
10014300:	1b1c      	subs	r4, r3, r4
10014302:	1c63      	adds	r3, r4, #1
10014304:	2b1f      	cmp	r3, #31
10014306:	dd00      	ble.n	1001430a <__aeabi_dsub+0x156>
10014308:	e0e4      	b.n	100144d4 <__aeabi_dsub+0x320>
1001430a:	2120      	movs	r1, #32
1001430c:	0014      	movs	r4, r2
1001430e:	0028      	movs	r0, r5
10014310:	1ac9      	subs	r1, r1, r3
10014312:	40d8      	lsrs	r0, r3
10014314:	408c      	lsls	r4, r1
10014316:	408d      	lsls	r5, r1
10014318:	4304      	orrs	r4, r0
1001431a:	40da      	lsrs	r2, r3
1001431c:	1e68      	subs	r0, r5, #1
1001431e:	4185      	sbcs	r5, r0
10014320:	0017      	movs	r7, r2
10014322:	4325      	orrs	r5, r4
10014324:	2400      	movs	r4, #0
10014326:	e771      	b.n	1001420c <__aeabi_dsub+0x58>
10014328:	4642      	mov	r2, r8
1001432a:	4663      	mov	r3, ip
1001432c:	431a      	orrs	r2, r3
1001432e:	d100      	bne.n	10014332 <__aeabi_dsub+0x17e>
10014330:	e24c      	b.n	100147cc <__aeabi_dsub+0x618>
10014332:	4667      	mov	r7, ip
10014334:	4645      	mov	r5, r8
10014336:	076b      	lsls	r3, r5, #29
10014338:	d000      	beq.n	1001433c <__aeabi_dsub+0x188>
1001433a:	e769      	b.n	10014210 <__aeabi_dsub+0x5c>
1001433c:	2301      	movs	r3, #1
1001433e:	4651      	mov	r1, sl
10014340:	0778      	lsls	r0, r7, #29
10014342:	08ed      	lsrs	r5, r5, #3
10014344:	08fa      	lsrs	r2, r7, #3
10014346:	400b      	ands	r3, r1
10014348:	4305      	orrs	r5, r0
1001434a:	4973      	ldr	r1, [pc, #460]	; (10014518 <__aeabi_dsub+0x364>)
1001434c:	428c      	cmp	r4, r1
1001434e:	d038      	beq.n	100143c2 <__aeabi_dsub+0x20e>
10014350:	0312      	lsls	r2, r2, #12
10014352:	0564      	lsls	r4, r4, #21
10014354:	0b12      	lsrs	r2, r2, #12
10014356:	0d64      	lsrs	r4, r4, #21
10014358:	e779      	b.n	1001424e <__aeabi_dsub+0x9a>
1001435a:	2e00      	cmp	r6, #0
1001435c:	dc00      	bgt.n	10014360 <__aeabi_dsub+0x1ac>
1001435e:	e09a      	b.n	10014496 <__aeabi_dsub+0x2e2>
10014360:	2a00      	cmp	r2, #0
10014362:	d047      	beq.n	100143f4 <__aeabi_dsub+0x240>
10014364:	4a6c      	ldr	r2, [pc, #432]	; (10014518 <__aeabi_dsub+0x364>)
10014366:	4294      	cmp	r4, r2
10014368:	d100      	bne.n	1001436c <__aeabi_dsub+0x1b8>
1001436a:	e74f      	b.n	1001420c <__aeabi_dsub+0x58>
1001436c:	2280      	movs	r2, #128	; 0x80
1001436e:	0412      	lsls	r2, r2, #16
10014370:	4310      	orrs	r0, r2
10014372:	4662      	mov	r2, ip
10014374:	2a38      	cmp	r2, #56	; 0x38
10014376:	dc00      	bgt.n	1001437a <__aeabi_dsub+0x1c6>
10014378:	e108      	b.n	1001458c <__aeabi_dsub+0x3d8>
1001437a:	4301      	orrs	r1, r0
1001437c:	1e48      	subs	r0, r1, #1
1001437e:	4181      	sbcs	r1, r0
10014380:	2200      	movs	r2, #0
10014382:	b2c9      	uxtb	r1, r1
10014384:	1949      	adds	r1, r1, r5
10014386:	19d2      	adds	r2, r2, r7
10014388:	42a9      	cmp	r1, r5
1001438a:	41bf      	sbcs	r7, r7
1001438c:	000d      	movs	r5, r1
1001438e:	427f      	negs	r7, r7
10014390:	18bf      	adds	r7, r7, r2
10014392:	023a      	lsls	r2, r7, #8
10014394:	d400      	bmi.n	10014398 <__aeabi_dsub+0x1e4>
10014396:	e142      	b.n	1001461e <__aeabi_dsub+0x46a>
10014398:	4a5f      	ldr	r2, [pc, #380]	; (10014518 <__aeabi_dsub+0x364>)
1001439a:	3401      	adds	r4, #1
1001439c:	4294      	cmp	r4, r2
1001439e:	d100      	bne.n	100143a2 <__aeabi_dsub+0x1ee>
100143a0:	e14e      	b.n	10014640 <__aeabi_dsub+0x48c>
100143a2:	2001      	movs	r0, #1
100143a4:	4a5d      	ldr	r2, [pc, #372]	; (1001451c <__aeabi_dsub+0x368>)
100143a6:	0869      	lsrs	r1, r5, #1
100143a8:	403a      	ands	r2, r7
100143aa:	4028      	ands	r0, r5
100143ac:	4308      	orrs	r0, r1
100143ae:	07d5      	lsls	r5, r2, #31
100143b0:	4305      	orrs	r5, r0
100143b2:	0857      	lsrs	r7, r2, #1
100143b4:	469a      	mov	sl, r3
100143b6:	e729      	b.n	1001420c <__aeabi_dsub+0x58>
100143b8:	0006      	movs	r6, r0
100143ba:	430e      	orrs	r6, r1
100143bc:	d000      	beq.n	100143c0 <__aeabi_dsub+0x20c>
100143be:	e717      	b.n	100141f0 <__aeabi_dsub+0x3c>
100143c0:	e714      	b.n	100141ec <__aeabi_dsub+0x38>
100143c2:	0029      	movs	r1, r5
100143c4:	4311      	orrs	r1, r2
100143c6:	d100      	bne.n	100143ca <__aeabi_dsub+0x216>
100143c8:	e1f9      	b.n	100147be <__aeabi_dsub+0x60a>
100143ca:	2180      	movs	r1, #128	; 0x80
100143cc:	0309      	lsls	r1, r1, #12
100143ce:	430a      	orrs	r2, r1
100143d0:	0312      	lsls	r2, r2, #12
100143d2:	0b12      	lsrs	r2, r2, #12
100143d4:	e73b      	b.n	1001424e <__aeabi_dsub+0x9a>
100143d6:	2301      	movs	r3, #1
100143d8:	425b      	negs	r3, r3
100143da:	4698      	mov	r8, r3
100143dc:	44c4      	add	ip, r8
100143de:	4663      	mov	r3, ip
100143e0:	2b00      	cmp	r3, #0
100143e2:	d172      	bne.n	100144ca <__aeabi_dsub+0x316>
100143e4:	1a69      	subs	r1, r5, r1
100143e6:	428d      	cmp	r5, r1
100143e8:	419b      	sbcs	r3, r3
100143ea:	1a3f      	subs	r7, r7, r0
100143ec:	425b      	negs	r3, r3
100143ee:	1aff      	subs	r7, r7, r3
100143f0:	000d      	movs	r5, r1
100143f2:	e768      	b.n	100142c6 <__aeabi_dsub+0x112>
100143f4:	0002      	movs	r2, r0
100143f6:	430a      	orrs	r2, r1
100143f8:	d100      	bne.n	100143fc <__aeabi_dsub+0x248>
100143fa:	e707      	b.n	1001420c <__aeabi_dsub+0x58>
100143fc:	2201      	movs	r2, #1
100143fe:	4252      	negs	r2, r2
10014400:	4690      	mov	r8, r2
10014402:	44c4      	add	ip, r8
10014404:	4662      	mov	r2, ip
10014406:	2a00      	cmp	r2, #0
10014408:	d000      	beq.n	1001440c <__aeabi_dsub+0x258>
1001440a:	e0e6      	b.n	100145da <__aeabi_dsub+0x426>
1001440c:	1869      	adds	r1, r5, r1
1001440e:	42a9      	cmp	r1, r5
10014410:	41b6      	sbcs	r6, r6
10014412:	183f      	adds	r7, r7, r0
10014414:	4276      	negs	r6, r6
10014416:	19f7      	adds	r7, r6, r7
10014418:	000d      	movs	r5, r1
1001441a:	e7ba      	b.n	10014392 <__aeabi_dsub+0x1de>
1001441c:	2e00      	cmp	r6, #0
1001441e:	d000      	beq.n	10014422 <__aeabi_dsub+0x26e>
10014420:	e080      	b.n	10014524 <__aeabi_dsub+0x370>
10014422:	1c62      	adds	r2, r4, #1
10014424:	0552      	lsls	r2, r2, #21
10014426:	0d52      	lsrs	r2, r2, #21
10014428:	2a01      	cmp	r2, #1
1001442a:	dc00      	bgt.n	1001442e <__aeabi_dsub+0x27a>
1001442c:	e0f9      	b.n	10014622 <__aeabi_dsub+0x46e>
1001442e:	1a6a      	subs	r2, r5, r1
10014430:	4691      	mov	r9, r2
10014432:	454d      	cmp	r5, r9
10014434:	41b6      	sbcs	r6, r6
10014436:	1a3a      	subs	r2, r7, r0
10014438:	4276      	negs	r6, r6
1001443a:	1b92      	subs	r2, r2, r6
1001443c:	4690      	mov	r8, r2
1001443e:	0212      	lsls	r2, r2, #8
10014440:	d400      	bmi.n	10014444 <__aeabi_dsub+0x290>
10014442:	e099      	b.n	10014578 <__aeabi_dsub+0x3c4>
10014444:	1b4d      	subs	r5, r1, r5
10014446:	42a9      	cmp	r1, r5
10014448:	4189      	sbcs	r1, r1
1001444a:	1bc7      	subs	r7, r0, r7
1001444c:	4249      	negs	r1, r1
1001444e:	1a7a      	subs	r2, r7, r1
10014450:	4690      	mov	r8, r2
10014452:	469a      	mov	sl, r3
10014454:	e73c      	b.n	100142d0 <__aeabi_dsub+0x11c>
10014456:	4652      	mov	r2, sl
10014458:	2301      	movs	r3, #1
1001445a:	2500      	movs	r5, #0
1001445c:	4013      	ands	r3, r2
1001445e:	2200      	movs	r2, #0
10014460:	e6f5      	b.n	1001424e <__aeabi_dsub+0x9a>
10014462:	0028      	movs	r0, r5
10014464:	f000 fa68 	bl	10014938 <__clzsi2>
10014468:	3020      	adds	r0, #32
1001446a:	0003      	movs	r3, r0
1001446c:	3b08      	subs	r3, #8
1001446e:	2b1f      	cmp	r3, #31
10014470:	dc00      	bgt.n	10014474 <__aeabi_dsub+0x2c0>
10014472:	e739      	b.n	100142e8 <__aeabi_dsub+0x134>
10014474:	002a      	movs	r2, r5
10014476:	3828      	subs	r0, #40	; 0x28
10014478:	4082      	lsls	r2, r0
1001447a:	2500      	movs	r5, #0
1001447c:	429c      	cmp	r4, r3
1001447e:	dc00      	bgt.n	10014482 <__aeabi_dsub+0x2ce>
10014480:	e73e      	b.n	10014300 <__aeabi_dsub+0x14c>
10014482:	4f26      	ldr	r7, [pc, #152]	; (1001451c <__aeabi_dsub+0x368>)
10014484:	1ae4      	subs	r4, r4, r3
10014486:	4017      	ands	r7, r2
10014488:	e6c0      	b.n	1001420c <__aeabi_dsub+0x58>
1001448a:	4301      	orrs	r1, r0
1001448c:	1e48      	subs	r0, r1, #1
1001448e:	4181      	sbcs	r1, r0
10014490:	2200      	movs	r2, #0
10014492:	b2c9      	uxtb	r1, r1
10014494:	e710      	b.n	100142b8 <__aeabi_dsub+0x104>
10014496:	2e00      	cmp	r6, #0
10014498:	d000      	beq.n	1001449c <__aeabi_dsub+0x2e8>
1001449a:	e0f1      	b.n	10014680 <__aeabi_dsub+0x4cc>
1001449c:	1c62      	adds	r2, r4, #1
1001449e:	4694      	mov	ip, r2
100144a0:	0552      	lsls	r2, r2, #21
100144a2:	0d52      	lsrs	r2, r2, #21
100144a4:	2a01      	cmp	r2, #1
100144a6:	dc00      	bgt.n	100144aa <__aeabi_dsub+0x2f6>
100144a8:	e0a0      	b.n	100145ec <__aeabi_dsub+0x438>
100144aa:	4a1b      	ldr	r2, [pc, #108]	; (10014518 <__aeabi_dsub+0x364>)
100144ac:	4594      	cmp	ip, r2
100144ae:	d100      	bne.n	100144b2 <__aeabi_dsub+0x2fe>
100144b0:	e0c5      	b.n	1001463e <__aeabi_dsub+0x48a>
100144b2:	1869      	adds	r1, r5, r1
100144b4:	42a9      	cmp	r1, r5
100144b6:	4192      	sbcs	r2, r2
100144b8:	183f      	adds	r7, r7, r0
100144ba:	4252      	negs	r2, r2
100144bc:	19d2      	adds	r2, r2, r7
100144be:	0849      	lsrs	r1, r1, #1
100144c0:	07d5      	lsls	r5, r2, #31
100144c2:	430d      	orrs	r5, r1
100144c4:	0857      	lsrs	r7, r2, #1
100144c6:	4664      	mov	r4, ip
100144c8:	e6a0      	b.n	1001420c <__aeabi_dsub+0x58>
100144ca:	4b13      	ldr	r3, [pc, #76]	; (10014518 <__aeabi_dsub+0x364>)
100144cc:	429c      	cmp	r4, r3
100144ce:	d000      	beq.n	100144d2 <__aeabi_dsub+0x31e>
100144d0:	e6d9      	b.n	10014286 <__aeabi_dsub+0xd2>
100144d2:	e69b      	b.n	1001420c <__aeabi_dsub+0x58>
100144d4:	0011      	movs	r1, r2
100144d6:	3c1f      	subs	r4, #31
100144d8:	40e1      	lsrs	r1, r4
100144da:	000c      	movs	r4, r1
100144dc:	2b20      	cmp	r3, #32
100144de:	d100      	bne.n	100144e2 <__aeabi_dsub+0x32e>
100144e0:	e080      	b.n	100145e4 <__aeabi_dsub+0x430>
100144e2:	2140      	movs	r1, #64	; 0x40
100144e4:	1acb      	subs	r3, r1, r3
100144e6:	409a      	lsls	r2, r3
100144e8:	4315      	orrs	r5, r2
100144ea:	1e6a      	subs	r2, r5, #1
100144ec:	4195      	sbcs	r5, r2
100144ee:	2700      	movs	r7, #0
100144f0:	4325      	orrs	r5, r4
100144f2:	2400      	movs	r4, #0
100144f4:	e71f      	b.n	10014336 <__aeabi_dsub+0x182>
100144f6:	4663      	mov	r3, ip
100144f8:	0002      	movs	r2, r0
100144fa:	3b20      	subs	r3, #32
100144fc:	40da      	lsrs	r2, r3
100144fe:	4663      	mov	r3, ip
10014500:	2b20      	cmp	r3, #32
10014502:	d071      	beq.n	100145e8 <__aeabi_dsub+0x434>
10014504:	2340      	movs	r3, #64	; 0x40
10014506:	4666      	mov	r6, ip
10014508:	1b9b      	subs	r3, r3, r6
1001450a:	4098      	lsls	r0, r3
1001450c:	4301      	orrs	r1, r0
1001450e:	1e48      	subs	r0, r1, #1
10014510:	4181      	sbcs	r1, r0
10014512:	4311      	orrs	r1, r2
10014514:	2200      	movs	r2, #0
10014516:	e6cf      	b.n	100142b8 <__aeabi_dsub+0x104>
10014518:	000007ff 	.word	0x000007ff
1001451c:	ff7fffff 	.word	0xff7fffff
10014520:	800fffff 	.word	0x800fffff
10014524:	2c00      	cmp	r4, #0
10014526:	d048      	beq.n	100145ba <__aeabi_dsub+0x406>
10014528:	4cca      	ldr	r4, [pc, #808]	; (10014854 <__aeabi_dsub+0x6a0>)
1001452a:	42a2      	cmp	r2, r4
1001452c:	d100      	bne.n	10014530 <__aeabi_dsub+0x37c>
1001452e:	e0a2      	b.n	10014676 <__aeabi_dsub+0x4c2>
10014530:	4274      	negs	r4, r6
10014532:	46a1      	mov	r9, r4
10014534:	2480      	movs	r4, #128	; 0x80
10014536:	0424      	lsls	r4, r4, #16
10014538:	4327      	orrs	r7, r4
1001453a:	464c      	mov	r4, r9
1001453c:	2c38      	cmp	r4, #56	; 0x38
1001453e:	dd00      	ble.n	10014542 <__aeabi_dsub+0x38e>
10014540:	e0db      	b.n	100146fa <__aeabi_dsub+0x546>
10014542:	2c1f      	cmp	r4, #31
10014544:	dd00      	ble.n	10014548 <__aeabi_dsub+0x394>
10014546:	e144      	b.n	100147d2 <__aeabi_dsub+0x61e>
10014548:	464e      	mov	r6, r9
1001454a:	2420      	movs	r4, #32
1001454c:	1ba4      	subs	r4, r4, r6
1001454e:	003e      	movs	r6, r7
10014550:	40a6      	lsls	r6, r4
10014552:	46a2      	mov	sl, r4
10014554:	46b0      	mov	r8, r6
10014556:	464c      	mov	r4, r9
10014558:	002e      	movs	r6, r5
1001455a:	40e6      	lsrs	r6, r4
1001455c:	46b4      	mov	ip, r6
1001455e:	4646      	mov	r6, r8
10014560:	4664      	mov	r4, ip
10014562:	4326      	orrs	r6, r4
10014564:	4654      	mov	r4, sl
10014566:	40a5      	lsls	r5, r4
10014568:	1e6c      	subs	r4, r5, #1
1001456a:	41a5      	sbcs	r5, r4
1001456c:	0034      	movs	r4, r6
1001456e:	432c      	orrs	r4, r5
10014570:	464d      	mov	r5, r9
10014572:	40ef      	lsrs	r7, r5
10014574:	1b0d      	subs	r5, r1, r4
10014576:	e028      	b.n	100145ca <__aeabi_dsub+0x416>
10014578:	464a      	mov	r2, r9
1001457a:	4643      	mov	r3, r8
1001457c:	464d      	mov	r5, r9
1001457e:	431a      	orrs	r2, r3
10014580:	d000      	beq.n	10014584 <__aeabi_dsub+0x3d0>
10014582:	e6a5      	b.n	100142d0 <__aeabi_dsub+0x11c>
10014584:	2300      	movs	r3, #0
10014586:	2400      	movs	r4, #0
10014588:	2500      	movs	r5, #0
1001458a:	e6de      	b.n	1001434a <__aeabi_dsub+0x196>
1001458c:	2a1f      	cmp	r2, #31
1001458e:	dc5a      	bgt.n	10014646 <__aeabi_dsub+0x492>
10014590:	4666      	mov	r6, ip
10014592:	2220      	movs	r2, #32
10014594:	1b92      	subs	r2, r2, r6
10014596:	0006      	movs	r6, r0
10014598:	4096      	lsls	r6, r2
1001459a:	4691      	mov	r9, r2
1001459c:	46b0      	mov	r8, r6
1001459e:	4662      	mov	r2, ip
100145a0:	000e      	movs	r6, r1
100145a2:	40d6      	lsrs	r6, r2
100145a4:	4642      	mov	r2, r8
100145a6:	4316      	orrs	r6, r2
100145a8:	464a      	mov	r2, r9
100145aa:	4091      	lsls	r1, r2
100145ac:	1e4a      	subs	r2, r1, #1
100145ae:	4191      	sbcs	r1, r2
100145b0:	0002      	movs	r2, r0
100145b2:	4660      	mov	r0, ip
100145b4:	4331      	orrs	r1, r6
100145b6:	40c2      	lsrs	r2, r0
100145b8:	e6e4      	b.n	10014384 <__aeabi_dsub+0x1d0>
100145ba:	003c      	movs	r4, r7
100145bc:	432c      	orrs	r4, r5
100145be:	d05a      	beq.n	10014676 <__aeabi_dsub+0x4c2>
100145c0:	43f4      	mvns	r4, r6
100145c2:	46a1      	mov	r9, r4
100145c4:	2c00      	cmp	r4, #0
100145c6:	d152      	bne.n	1001466e <__aeabi_dsub+0x4ba>
100145c8:	1b4d      	subs	r5, r1, r5
100145ca:	42a9      	cmp	r1, r5
100145cc:	4189      	sbcs	r1, r1
100145ce:	1bc7      	subs	r7, r0, r7
100145d0:	4249      	negs	r1, r1
100145d2:	1a7f      	subs	r7, r7, r1
100145d4:	0014      	movs	r4, r2
100145d6:	469a      	mov	sl, r3
100145d8:	e675      	b.n	100142c6 <__aeabi_dsub+0x112>
100145da:	4a9e      	ldr	r2, [pc, #632]	; (10014854 <__aeabi_dsub+0x6a0>)
100145dc:	4294      	cmp	r4, r2
100145de:	d000      	beq.n	100145e2 <__aeabi_dsub+0x42e>
100145e0:	e6c7      	b.n	10014372 <__aeabi_dsub+0x1be>
100145e2:	e613      	b.n	1001420c <__aeabi_dsub+0x58>
100145e4:	2200      	movs	r2, #0
100145e6:	e77f      	b.n	100144e8 <__aeabi_dsub+0x334>
100145e8:	2000      	movs	r0, #0
100145ea:	e78f      	b.n	1001450c <__aeabi_dsub+0x358>
100145ec:	2c00      	cmp	r4, #0
100145ee:	d000      	beq.n	100145f2 <__aeabi_dsub+0x43e>
100145f0:	e0c8      	b.n	10014784 <__aeabi_dsub+0x5d0>
100145f2:	003b      	movs	r3, r7
100145f4:	432b      	orrs	r3, r5
100145f6:	d100      	bne.n	100145fa <__aeabi_dsub+0x446>
100145f8:	e10f      	b.n	1001481a <__aeabi_dsub+0x666>
100145fa:	0003      	movs	r3, r0
100145fc:	430b      	orrs	r3, r1
100145fe:	d100      	bne.n	10014602 <__aeabi_dsub+0x44e>
10014600:	e604      	b.n	1001420c <__aeabi_dsub+0x58>
10014602:	1869      	adds	r1, r5, r1
10014604:	42a9      	cmp	r1, r5
10014606:	419b      	sbcs	r3, r3
10014608:	183f      	adds	r7, r7, r0
1001460a:	425b      	negs	r3, r3
1001460c:	19df      	adds	r7, r3, r7
1001460e:	023b      	lsls	r3, r7, #8
10014610:	d400      	bmi.n	10014614 <__aeabi_dsub+0x460>
10014612:	e11a      	b.n	1001484a <__aeabi_dsub+0x696>
10014614:	4b90      	ldr	r3, [pc, #576]	; (10014858 <__aeabi_dsub+0x6a4>)
10014616:	000d      	movs	r5, r1
10014618:	401f      	ands	r7, r3
1001461a:	4664      	mov	r4, ip
1001461c:	e5f6      	b.n	1001420c <__aeabi_dsub+0x58>
1001461e:	469a      	mov	sl, r3
10014620:	e689      	b.n	10014336 <__aeabi_dsub+0x182>
10014622:	003a      	movs	r2, r7
10014624:	432a      	orrs	r2, r5
10014626:	2c00      	cmp	r4, #0
10014628:	d15c      	bne.n	100146e4 <__aeabi_dsub+0x530>
1001462a:	2a00      	cmp	r2, #0
1001462c:	d175      	bne.n	1001471a <__aeabi_dsub+0x566>
1001462e:	0002      	movs	r2, r0
10014630:	430a      	orrs	r2, r1
10014632:	d100      	bne.n	10014636 <__aeabi_dsub+0x482>
10014634:	e0ca      	b.n	100147cc <__aeabi_dsub+0x618>
10014636:	0007      	movs	r7, r0
10014638:	000d      	movs	r5, r1
1001463a:	469a      	mov	sl, r3
1001463c:	e5e6      	b.n	1001420c <__aeabi_dsub+0x58>
1001463e:	4664      	mov	r4, ip
10014640:	2200      	movs	r2, #0
10014642:	2500      	movs	r5, #0
10014644:	e681      	b.n	1001434a <__aeabi_dsub+0x196>
10014646:	4662      	mov	r2, ip
10014648:	0006      	movs	r6, r0
1001464a:	3a20      	subs	r2, #32
1001464c:	40d6      	lsrs	r6, r2
1001464e:	4662      	mov	r2, ip
10014650:	46b0      	mov	r8, r6
10014652:	2a20      	cmp	r2, #32
10014654:	d100      	bne.n	10014658 <__aeabi_dsub+0x4a4>
10014656:	e0b7      	b.n	100147c8 <__aeabi_dsub+0x614>
10014658:	2240      	movs	r2, #64	; 0x40
1001465a:	4666      	mov	r6, ip
1001465c:	1b92      	subs	r2, r2, r6
1001465e:	4090      	lsls	r0, r2
10014660:	4301      	orrs	r1, r0
10014662:	4642      	mov	r2, r8
10014664:	1e48      	subs	r0, r1, #1
10014666:	4181      	sbcs	r1, r0
10014668:	4311      	orrs	r1, r2
1001466a:	2200      	movs	r2, #0
1001466c:	e68a      	b.n	10014384 <__aeabi_dsub+0x1d0>
1001466e:	4c79      	ldr	r4, [pc, #484]	; (10014854 <__aeabi_dsub+0x6a0>)
10014670:	42a2      	cmp	r2, r4
10014672:	d000      	beq.n	10014676 <__aeabi_dsub+0x4c2>
10014674:	e761      	b.n	1001453a <__aeabi_dsub+0x386>
10014676:	0007      	movs	r7, r0
10014678:	000d      	movs	r5, r1
1001467a:	0014      	movs	r4, r2
1001467c:	469a      	mov	sl, r3
1001467e:	e5c5      	b.n	1001420c <__aeabi_dsub+0x58>
10014680:	2c00      	cmp	r4, #0
10014682:	d141      	bne.n	10014708 <__aeabi_dsub+0x554>
10014684:	003c      	movs	r4, r7
10014686:	432c      	orrs	r4, r5
10014688:	d078      	beq.n	1001477c <__aeabi_dsub+0x5c8>
1001468a:	43f4      	mvns	r4, r6
1001468c:	46a1      	mov	r9, r4
1001468e:	2c00      	cmp	r4, #0
10014690:	d020      	beq.n	100146d4 <__aeabi_dsub+0x520>
10014692:	4c70      	ldr	r4, [pc, #448]	; (10014854 <__aeabi_dsub+0x6a0>)
10014694:	42a2      	cmp	r2, r4
10014696:	d071      	beq.n	1001477c <__aeabi_dsub+0x5c8>
10014698:	464c      	mov	r4, r9
1001469a:	2c38      	cmp	r4, #56	; 0x38
1001469c:	dd00      	ble.n	100146a0 <__aeabi_dsub+0x4ec>
1001469e:	e0b2      	b.n	10014806 <__aeabi_dsub+0x652>
100146a0:	2c1f      	cmp	r4, #31
100146a2:	dd00      	ble.n	100146a6 <__aeabi_dsub+0x4f2>
100146a4:	e0bc      	b.n	10014820 <__aeabi_dsub+0x66c>
100146a6:	2620      	movs	r6, #32
100146a8:	1b34      	subs	r4, r6, r4
100146aa:	46a2      	mov	sl, r4
100146ac:	003c      	movs	r4, r7
100146ae:	4656      	mov	r6, sl
100146b0:	40b4      	lsls	r4, r6
100146b2:	464e      	mov	r6, r9
100146b4:	46a0      	mov	r8, r4
100146b6:	002c      	movs	r4, r5
100146b8:	40f4      	lsrs	r4, r6
100146ba:	46a4      	mov	ip, r4
100146bc:	4644      	mov	r4, r8
100146be:	4666      	mov	r6, ip
100146c0:	4334      	orrs	r4, r6
100146c2:	46a4      	mov	ip, r4
100146c4:	4654      	mov	r4, sl
100146c6:	40a5      	lsls	r5, r4
100146c8:	4664      	mov	r4, ip
100146ca:	1e6e      	subs	r6, r5, #1
100146cc:	41b5      	sbcs	r5, r6
100146ce:	4325      	orrs	r5, r4
100146d0:	464c      	mov	r4, r9
100146d2:	40e7      	lsrs	r7, r4
100146d4:	186d      	adds	r5, r5, r1
100146d6:	428d      	cmp	r5, r1
100146d8:	4189      	sbcs	r1, r1
100146da:	183f      	adds	r7, r7, r0
100146dc:	4249      	negs	r1, r1
100146de:	19cf      	adds	r7, r1, r7
100146e0:	0014      	movs	r4, r2
100146e2:	e656      	b.n	10014392 <__aeabi_dsub+0x1de>
100146e4:	2a00      	cmp	r2, #0
100146e6:	d12f      	bne.n	10014748 <__aeabi_dsub+0x594>
100146e8:	0002      	movs	r2, r0
100146ea:	430a      	orrs	r2, r1
100146ec:	d100      	bne.n	100146f0 <__aeabi_dsub+0x53c>
100146ee:	e084      	b.n	100147fa <__aeabi_dsub+0x646>
100146f0:	0007      	movs	r7, r0
100146f2:	000d      	movs	r5, r1
100146f4:	469a      	mov	sl, r3
100146f6:	4c57      	ldr	r4, [pc, #348]	; (10014854 <__aeabi_dsub+0x6a0>)
100146f8:	e588      	b.n	1001420c <__aeabi_dsub+0x58>
100146fa:	433d      	orrs	r5, r7
100146fc:	1e6f      	subs	r7, r5, #1
100146fe:	41bd      	sbcs	r5, r7
10014700:	b2ec      	uxtb	r4, r5
10014702:	2700      	movs	r7, #0
10014704:	1b0d      	subs	r5, r1, r4
10014706:	e760      	b.n	100145ca <__aeabi_dsub+0x416>
10014708:	4c52      	ldr	r4, [pc, #328]	; (10014854 <__aeabi_dsub+0x6a0>)
1001470a:	42a2      	cmp	r2, r4
1001470c:	d036      	beq.n	1001477c <__aeabi_dsub+0x5c8>
1001470e:	4274      	negs	r4, r6
10014710:	2680      	movs	r6, #128	; 0x80
10014712:	0436      	lsls	r6, r6, #16
10014714:	46a1      	mov	r9, r4
10014716:	4337      	orrs	r7, r6
10014718:	e7be      	b.n	10014698 <__aeabi_dsub+0x4e4>
1001471a:	0002      	movs	r2, r0
1001471c:	430a      	orrs	r2, r1
1001471e:	d100      	bne.n	10014722 <__aeabi_dsub+0x56e>
10014720:	e574      	b.n	1001420c <__aeabi_dsub+0x58>
10014722:	1a6a      	subs	r2, r5, r1
10014724:	4690      	mov	r8, r2
10014726:	4545      	cmp	r5, r8
10014728:	41b6      	sbcs	r6, r6
1001472a:	1a3a      	subs	r2, r7, r0
1001472c:	4276      	negs	r6, r6
1001472e:	1b92      	subs	r2, r2, r6
10014730:	4694      	mov	ip, r2
10014732:	0212      	lsls	r2, r2, #8
10014734:	d400      	bmi.n	10014738 <__aeabi_dsub+0x584>
10014736:	e5f7      	b.n	10014328 <__aeabi_dsub+0x174>
10014738:	1b4d      	subs	r5, r1, r5
1001473a:	42a9      	cmp	r1, r5
1001473c:	4189      	sbcs	r1, r1
1001473e:	1bc7      	subs	r7, r0, r7
10014740:	4249      	negs	r1, r1
10014742:	1a7f      	subs	r7, r7, r1
10014744:	469a      	mov	sl, r3
10014746:	e561      	b.n	1001420c <__aeabi_dsub+0x58>
10014748:	0002      	movs	r2, r0
1001474a:	430a      	orrs	r2, r1
1001474c:	d03a      	beq.n	100147c4 <__aeabi_dsub+0x610>
1001474e:	08ed      	lsrs	r5, r5, #3
10014750:	077c      	lsls	r4, r7, #29
10014752:	432c      	orrs	r4, r5
10014754:	2580      	movs	r5, #128	; 0x80
10014756:	08fa      	lsrs	r2, r7, #3
10014758:	032d      	lsls	r5, r5, #12
1001475a:	422a      	tst	r2, r5
1001475c:	d008      	beq.n	10014770 <__aeabi_dsub+0x5bc>
1001475e:	08c7      	lsrs	r7, r0, #3
10014760:	422f      	tst	r7, r5
10014762:	d105      	bne.n	10014770 <__aeabi_dsub+0x5bc>
10014764:	0745      	lsls	r5, r0, #29
10014766:	002c      	movs	r4, r5
10014768:	003a      	movs	r2, r7
1001476a:	469a      	mov	sl, r3
1001476c:	08c9      	lsrs	r1, r1, #3
1001476e:	430c      	orrs	r4, r1
10014770:	0f67      	lsrs	r7, r4, #29
10014772:	00d2      	lsls	r2, r2, #3
10014774:	00e5      	lsls	r5, r4, #3
10014776:	4317      	orrs	r7, r2
10014778:	4c36      	ldr	r4, [pc, #216]	; (10014854 <__aeabi_dsub+0x6a0>)
1001477a:	e547      	b.n	1001420c <__aeabi_dsub+0x58>
1001477c:	0007      	movs	r7, r0
1001477e:	000d      	movs	r5, r1
10014780:	0014      	movs	r4, r2
10014782:	e543      	b.n	1001420c <__aeabi_dsub+0x58>
10014784:	003a      	movs	r2, r7
10014786:	432a      	orrs	r2, r5
10014788:	d043      	beq.n	10014812 <__aeabi_dsub+0x65e>
1001478a:	0002      	movs	r2, r0
1001478c:	430a      	orrs	r2, r1
1001478e:	d019      	beq.n	100147c4 <__aeabi_dsub+0x610>
10014790:	08ed      	lsrs	r5, r5, #3
10014792:	077c      	lsls	r4, r7, #29
10014794:	432c      	orrs	r4, r5
10014796:	2580      	movs	r5, #128	; 0x80
10014798:	08fa      	lsrs	r2, r7, #3
1001479a:	032d      	lsls	r5, r5, #12
1001479c:	422a      	tst	r2, r5
1001479e:	d007      	beq.n	100147b0 <__aeabi_dsub+0x5fc>
100147a0:	08c6      	lsrs	r6, r0, #3
100147a2:	422e      	tst	r6, r5
100147a4:	d104      	bne.n	100147b0 <__aeabi_dsub+0x5fc>
100147a6:	0747      	lsls	r7, r0, #29
100147a8:	003c      	movs	r4, r7
100147aa:	0032      	movs	r2, r6
100147ac:	08c9      	lsrs	r1, r1, #3
100147ae:	430c      	orrs	r4, r1
100147b0:	00d7      	lsls	r7, r2, #3
100147b2:	0f62      	lsrs	r2, r4, #29
100147b4:	00e5      	lsls	r5, r4, #3
100147b6:	4317      	orrs	r7, r2
100147b8:	469a      	mov	sl, r3
100147ba:	4c26      	ldr	r4, [pc, #152]	; (10014854 <__aeabi_dsub+0x6a0>)
100147bc:	e526      	b.n	1001420c <__aeabi_dsub+0x58>
100147be:	2200      	movs	r2, #0
100147c0:	2500      	movs	r5, #0
100147c2:	e544      	b.n	1001424e <__aeabi_dsub+0x9a>
100147c4:	4c23      	ldr	r4, [pc, #140]	; (10014854 <__aeabi_dsub+0x6a0>)
100147c6:	e521      	b.n	1001420c <__aeabi_dsub+0x58>
100147c8:	2000      	movs	r0, #0
100147ca:	e749      	b.n	10014660 <__aeabi_dsub+0x4ac>
100147cc:	2300      	movs	r3, #0
100147ce:	2500      	movs	r5, #0
100147d0:	e5bb      	b.n	1001434a <__aeabi_dsub+0x196>
100147d2:	464c      	mov	r4, r9
100147d4:	003e      	movs	r6, r7
100147d6:	3c20      	subs	r4, #32
100147d8:	40e6      	lsrs	r6, r4
100147da:	464c      	mov	r4, r9
100147dc:	46b4      	mov	ip, r6
100147de:	2c20      	cmp	r4, #32
100147e0:	d031      	beq.n	10014846 <__aeabi_dsub+0x692>
100147e2:	2440      	movs	r4, #64	; 0x40
100147e4:	464e      	mov	r6, r9
100147e6:	1ba6      	subs	r6, r4, r6
100147e8:	40b7      	lsls	r7, r6
100147ea:	433d      	orrs	r5, r7
100147ec:	1e6c      	subs	r4, r5, #1
100147ee:	41a5      	sbcs	r5, r4
100147f0:	4664      	mov	r4, ip
100147f2:	432c      	orrs	r4, r5
100147f4:	2700      	movs	r7, #0
100147f6:	1b0d      	subs	r5, r1, r4
100147f8:	e6e7      	b.n	100145ca <__aeabi_dsub+0x416>
100147fa:	2280      	movs	r2, #128	; 0x80
100147fc:	2300      	movs	r3, #0
100147fe:	0312      	lsls	r2, r2, #12
10014800:	4c14      	ldr	r4, [pc, #80]	; (10014854 <__aeabi_dsub+0x6a0>)
10014802:	2500      	movs	r5, #0
10014804:	e5a1      	b.n	1001434a <__aeabi_dsub+0x196>
10014806:	433d      	orrs	r5, r7
10014808:	1e6f      	subs	r7, r5, #1
1001480a:	41bd      	sbcs	r5, r7
1001480c:	2700      	movs	r7, #0
1001480e:	b2ed      	uxtb	r5, r5
10014810:	e760      	b.n	100146d4 <__aeabi_dsub+0x520>
10014812:	0007      	movs	r7, r0
10014814:	000d      	movs	r5, r1
10014816:	4c0f      	ldr	r4, [pc, #60]	; (10014854 <__aeabi_dsub+0x6a0>)
10014818:	e4f8      	b.n	1001420c <__aeabi_dsub+0x58>
1001481a:	0007      	movs	r7, r0
1001481c:	000d      	movs	r5, r1
1001481e:	e4f5      	b.n	1001420c <__aeabi_dsub+0x58>
10014820:	464e      	mov	r6, r9
10014822:	003c      	movs	r4, r7
10014824:	3e20      	subs	r6, #32
10014826:	40f4      	lsrs	r4, r6
10014828:	46a0      	mov	r8, r4
1001482a:	464c      	mov	r4, r9
1001482c:	2c20      	cmp	r4, #32
1001482e:	d00e      	beq.n	1001484e <__aeabi_dsub+0x69a>
10014830:	2440      	movs	r4, #64	; 0x40
10014832:	464e      	mov	r6, r9
10014834:	1ba4      	subs	r4, r4, r6
10014836:	40a7      	lsls	r7, r4
10014838:	433d      	orrs	r5, r7
1001483a:	1e6f      	subs	r7, r5, #1
1001483c:	41bd      	sbcs	r5, r7
1001483e:	4644      	mov	r4, r8
10014840:	2700      	movs	r7, #0
10014842:	4325      	orrs	r5, r4
10014844:	e746      	b.n	100146d4 <__aeabi_dsub+0x520>
10014846:	2700      	movs	r7, #0
10014848:	e7cf      	b.n	100147ea <__aeabi_dsub+0x636>
1001484a:	000d      	movs	r5, r1
1001484c:	e573      	b.n	10014336 <__aeabi_dsub+0x182>
1001484e:	2700      	movs	r7, #0
10014850:	e7f2      	b.n	10014838 <__aeabi_dsub+0x684>
10014852:	46c0      	nop			; (mov r8, r8)
10014854:	000007ff 	.word	0x000007ff
10014858:	ff7fffff 	.word	0xff7fffff

1001485c <__aeabi_d2iz>:
1001485c:	030b      	lsls	r3, r1, #12
1001485e:	b530      	push	{r4, r5, lr}
10014860:	4d13      	ldr	r5, [pc, #76]	; (100148b0 <__aeabi_d2iz+0x54>)
10014862:	0b1a      	lsrs	r2, r3, #12
10014864:	004b      	lsls	r3, r1, #1
10014866:	0d5b      	lsrs	r3, r3, #21
10014868:	0fc9      	lsrs	r1, r1, #31
1001486a:	2400      	movs	r4, #0
1001486c:	42ab      	cmp	r3, r5
1001486e:	dd11      	ble.n	10014894 <__aeabi_d2iz+0x38>
10014870:	4c10      	ldr	r4, [pc, #64]	; (100148b4 <__aeabi_d2iz+0x58>)
10014872:	42a3      	cmp	r3, r4
10014874:	dc10      	bgt.n	10014898 <__aeabi_d2iz+0x3c>
10014876:	2480      	movs	r4, #128	; 0x80
10014878:	0364      	lsls	r4, r4, #13
1001487a:	4322      	orrs	r2, r4
1001487c:	4c0e      	ldr	r4, [pc, #56]	; (100148b8 <__aeabi_d2iz+0x5c>)
1001487e:	1ae4      	subs	r4, r4, r3
10014880:	2c1f      	cmp	r4, #31
10014882:	dd0c      	ble.n	1001489e <__aeabi_d2iz+0x42>
10014884:	480d      	ldr	r0, [pc, #52]	; (100148bc <__aeabi_d2iz+0x60>)
10014886:	1ac3      	subs	r3, r0, r3
10014888:	40da      	lsrs	r2, r3
1001488a:	0013      	movs	r3, r2
1001488c:	425c      	negs	r4, r3
1001488e:	2900      	cmp	r1, #0
10014890:	d100      	bne.n	10014894 <__aeabi_d2iz+0x38>
10014892:	001c      	movs	r4, r3
10014894:	0020      	movs	r0, r4
10014896:	bd30      	pop	{r4, r5, pc}
10014898:	4b09      	ldr	r3, [pc, #36]	; (100148c0 <__aeabi_d2iz+0x64>)
1001489a:	18cc      	adds	r4, r1, r3
1001489c:	e7fa      	b.n	10014894 <__aeabi_d2iz+0x38>
1001489e:	40e0      	lsrs	r0, r4
100148a0:	4c08      	ldr	r4, [pc, #32]	; (100148c4 <__aeabi_d2iz+0x68>)
100148a2:	46a4      	mov	ip, r4
100148a4:	4463      	add	r3, ip
100148a6:	409a      	lsls	r2, r3
100148a8:	0013      	movs	r3, r2
100148aa:	4303      	orrs	r3, r0
100148ac:	e7ee      	b.n	1001488c <__aeabi_d2iz+0x30>
100148ae:	46c0      	nop			; (mov r8, r8)
100148b0:	000003fe 	.word	0x000003fe
100148b4:	0000041d 	.word	0x0000041d
100148b8:	00000433 	.word	0x00000433
100148bc:	00000413 	.word	0x00000413
100148c0:	7fffffff 	.word	0x7fffffff
100148c4:	fffffbed 	.word	0xfffffbed

100148c8 <__aeabi_ui2d>:
100148c8:	b570      	push	{r4, r5, r6, lr}
100148ca:	1e05      	subs	r5, r0, #0
100148cc:	d028      	beq.n	10014920 <__aeabi_ui2d+0x58>
100148ce:	f000 f833 	bl	10014938 <__clzsi2>
100148d2:	4b15      	ldr	r3, [pc, #84]	; (10014928 <__aeabi_ui2d+0x60>)
100148d4:	4a15      	ldr	r2, [pc, #84]	; (1001492c <__aeabi_ui2d+0x64>)
100148d6:	1a1b      	subs	r3, r3, r0
100148d8:	1ad2      	subs	r2, r2, r3
100148da:	2a1f      	cmp	r2, #31
100148dc:	dd16      	ble.n	1001490c <__aeabi_ui2d+0x44>
100148de:	002c      	movs	r4, r5
100148e0:	4a13      	ldr	r2, [pc, #76]	; (10014930 <__aeabi_ui2d+0x68>)
100148e2:	2500      	movs	r5, #0
100148e4:	1ad2      	subs	r2, r2, r3
100148e6:	4094      	lsls	r4, r2
100148e8:	055a      	lsls	r2, r3, #21
100148ea:	0324      	lsls	r4, r4, #12
100148ec:	0b24      	lsrs	r4, r4, #12
100148ee:	0d52      	lsrs	r2, r2, #21
100148f0:	2100      	movs	r1, #0
100148f2:	0324      	lsls	r4, r4, #12
100148f4:	0d0b      	lsrs	r3, r1, #20
100148f6:	0b24      	lsrs	r4, r4, #12
100148f8:	051b      	lsls	r3, r3, #20
100148fa:	4323      	orrs	r3, r4
100148fc:	4c0d      	ldr	r4, [pc, #52]	; (10014934 <__aeabi_ui2d+0x6c>)
100148fe:	0512      	lsls	r2, r2, #20
10014900:	4023      	ands	r3, r4
10014902:	4313      	orrs	r3, r2
10014904:	005b      	lsls	r3, r3, #1
10014906:	0028      	movs	r0, r5
10014908:	0859      	lsrs	r1, r3, #1
1001490a:	bd70      	pop	{r4, r5, r6, pc}
1001490c:	210b      	movs	r1, #11
1001490e:	002c      	movs	r4, r5
10014910:	1a08      	subs	r0, r1, r0
10014912:	40c4      	lsrs	r4, r0
10014914:	4095      	lsls	r5, r2
10014916:	0324      	lsls	r4, r4, #12
10014918:	055a      	lsls	r2, r3, #21
1001491a:	0b24      	lsrs	r4, r4, #12
1001491c:	0d52      	lsrs	r2, r2, #21
1001491e:	e7e7      	b.n	100148f0 <__aeabi_ui2d+0x28>
10014920:	2200      	movs	r2, #0
10014922:	2400      	movs	r4, #0
10014924:	e7e4      	b.n	100148f0 <__aeabi_ui2d+0x28>
10014926:	46c0      	nop			; (mov r8, r8)
10014928:	0000041e 	.word	0x0000041e
1001492c:	00000433 	.word	0x00000433
10014930:	00000413 	.word	0x00000413
10014934:	800fffff 	.word	0x800fffff

10014938 <__clzsi2>:
10014938:	211c      	movs	r1, #28
1001493a:	2301      	movs	r3, #1
1001493c:	041b      	lsls	r3, r3, #16
1001493e:	4298      	cmp	r0, r3
10014940:	d301      	bcc.n	10014946 <__clzsi2+0xe>
10014942:	0c00      	lsrs	r0, r0, #16
10014944:	3910      	subs	r1, #16
10014946:	0a1b      	lsrs	r3, r3, #8
10014948:	4298      	cmp	r0, r3
1001494a:	d301      	bcc.n	10014950 <__clzsi2+0x18>
1001494c:	0a00      	lsrs	r0, r0, #8
1001494e:	3908      	subs	r1, #8
10014950:	091b      	lsrs	r3, r3, #4
10014952:	4298      	cmp	r0, r3
10014954:	d301      	bcc.n	1001495a <__clzsi2+0x22>
10014956:	0900      	lsrs	r0, r0, #4
10014958:	3904      	subs	r1, #4
1001495a:	a202      	add	r2, pc, #8	; (adr r2, 10014964 <__clzsi2+0x2c>)
1001495c:	5c10      	ldrb	r0, [r2, r0]
1001495e:	1840      	adds	r0, r0, r1
10014960:	4770      	bx	lr
10014962:	46c0      	nop			; (mov r8, r8)
10014964:	02020304 	.word	0x02020304
10014968:	01010101 	.word	0x01010101
	...

10014974 <__libc_init_array>:
10014974:	4b0e      	ldr	r3, [pc, #56]	; (100149b0 <__libc_init_array+0x3c>)
10014976:	b570      	push	{r4, r5, r6, lr}
10014978:	2500      	movs	r5, #0
1001497a:	001e      	movs	r6, r3
1001497c:	4c0d      	ldr	r4, [pc, #52]	; (100149b4 <__libc_init_array+0x40>)
1001497e:	1ae4      	subs	r4, r4, r3
10014980:	10a4      	asrs	r4, r4, #2
10014982:	42a5      	cmp	r5, r4
10014984:	d004      	beq.n	10014990 <__libc_init_array+0x1c>
10014986:	00ab      	lsls	r3, r5, #2
10014988:	58f3      	ldr	r3, [r6, r3]
1001498a:	4798      	blx	r3
1001498c:	3501      	adds	r5, #1
1001498e:	e7f8      	b.n	10014982 <__libc_init_array+0xe>
10014990:	f003 fa0a 	bl	10017da8 <_init>
10014994:	4b08      	ldr	r3, [pc, #32]	; (100149b8 <__libc_init_array+0x44>)
10014996:	2500      	movs	r5, #0
10014998:	001e      	movs	r6, r3
1001499a:	4c08      	ldr	r4, [pc, #32]	; (100149bc <__libc_init_array+0x48>)
1001499c:	1ae4      	subs	r4, r4, r3
1001499e:	10a4      	asrs	r4, r4, #2
100149a0:	42a5      	cmp	r5, r4
100149a2:	d004      	beq.n	100149ae <__libc_init_array+0x3a>
100149a4:	00ab      	lsls	r3, r5, #2
100149a6:	58f3      	ldr	r3, [r6, r3]
100149a8:	4798      	blx	r3
100149aa:	3501      	adds	r5, #1
100149ac:	e7f8      	b.n	100149a0 <__libc_init_array+0x2c>
100149ae:	bd70      	pop	{r4, r5, r6, pc}
100149b0:	10017db4 	.word	0x10017db4
100149b4:	10017db4 	.word	0x10017db4
100149b8:	10017db4 	.word	0x10017db4
100149bc:	10017db8 	.word	0x10017db8

100149c0 <malloc>:
100149c0:	b510      	push	{r4, lr}
100149c2:	4b03      	ldr	r3, [pc, #12]	; (100149d0 <malloc+0x10>)
100149c4:	0001      	movs	r1, r0
100149c6:	6818      	ldr	r0, [r3, #0]
100149c8:	f000 f86a 	bl	10014aa0 <_malloc_r>
100149cc:	bd10      	pop	{r4, pc}
100149ce:	46c0      	nop			; (mov r8, r8)
100149d0:	10017e70 	.word	0x10017e70

100149d4 <memcmp>:
100149d4:	b530      	push	{r4, r5, lr}
100149d6:	2400      	movs	r4, #0
100149d8:	42a2      	cmp	r2, r4
100149da:	d008      	beq.n	100149ee <memcmp+0x1a>
100149dc:	5d03      	ldrb	r3, [r0, r4]
100149de:	1c65      	adds	r5, r4, #1
100149e0:	5d0c      	ldrb	r4, [r1, r4]
100149e2:	42a3      	cmp	r3, r4
100149e4:	d001      	beq.n	100149ea <memcmp+0x16>
100149e6:	1b18      	subs	r0, r3, r4
100149e8:	e002      	b.n	100149f0 <memcmp+0x1c>
100149ea:	002c      	movs	r4, r5
100149ec:	e7f4      	b.n	100149d8 <memcmp+0x4>
100149ee:	2000      	movs	r0, #0
100149f0:	bd30      	pop	{r4, r5, pc}

100149f2 <memcpy>:
100149f2:	2300      	movs	r3, #0
100149f4:	b510      	push	{r4, lr}
100149f6:	429a      	cmp	r2, r3
100149f8:	d003      	beq.n	10014a02 <memcpy+0x10>
100149fa:	5ccc      	ldrb	r4, [r1, r3]
100149fc:	54c4      	strb	r4, [r0, r3]
100149fe:	3301      	adds	r3, #1
10014a00:	e7f9      	b.n	100149f6 <memcpy+0x4>
10014a02:	bd10      	pop	{r4, pc}

10014a04 <memset>:
10014a04:	0003      	movs	r3, r0
10014a06:	1882      	adds	r2, r0, r2
10014a08:	4293      	cmp	r3, r2
10014a0a:	d002      	beq.n	10014a12 <memset+0xe>
10014a0c:	7019      	strb	r1, [r3, #0]
10014a0e:	3301      	adds	r3, #1
10014a10:	e7fa      	b.n	10014a08 <memset+0x4>
10014a12:	4770      	bx	lr

10014a14 <_free_r>:
10014a14:	b530      	push	{r4, r5, lr}
10014a16:	2900      	cmp	r1, #0
10014a18:	d03e      	beq.n	10014a98 <_free_r+0x84>
10014a1a:	3904      	subs	r1, #4
10014a1c:	680b      	ldr	r3, [r1, #0]
10014a1e:	2b00      	cmp	r3, #0
10014a20:	da00      	bge.n	10014a24 <_free_r+0x10>
10014a22:	18c9      	adds	r1, r1, r3
10014a24:	4a1d      	ldr	r2, [pc, #116]	; (10014a9c <_free_r+0x88>)
10014a26:	6813      	ldr	r3, [r2, #0]
10014a28:	0014      	movs	r4, r2
10014a2a:	2b00      	cmp	r3, #0
10014a2c:	d102      	bne.n	10014a34 <_free_r+0x20>
10014a2e:	604b      	str	r3, [r1, #4]
10014a30:	6011      	str	r1, [r2, #0]
10014a32:	e031      	b.n	10014a98 <_free_r+0x84>
10014a34:	428b      	cmp	r3, r1
10014a36:	d90d      	bls.n	10014a54 <_free_r+0x40>
10014a38:	680a      	ldr	r2, [r1, #0]
10014a3a:	1888      	adds	r0, r1, r2
10014a3c:	4283      	cmp	r3, r0
10014a3e:	d103      	bne.n	10014a48 <_free_r+0x34>
10014a40:	6818      	ldr	r0, [r3, #0]
10014a42:	685b      	ldr	r3, [r3, #4]
10014a44:	1882      	adds	r2, r0, r2
10014a46:	600a      	str	r2, [r1, #0]
10014a48:	604b      	str	r3, [r1, #4]
10014a4a:	6021      	str	r1, [r4, #0]
10014a4c:	e024      	b.n	10014a98 <_free_r+0x84>
10014a4e:	428a      	cmp	r2, r1
10014a50:	d803      	bhi.n	10014a5a <_free_r+0x46>
10014a52:	0013      	movs	r3, r2
10014a54:	685a      	ldr	r2, [r3, #4]
10014a56:	2a00      	cmp	r2, #0
10014a58:	d1f9      	bne.n	10014a4e <_free_r+0x3a>
10014a5a:	681d      	ldr	r5, [r3, #0]
10014a5c:	195c      	adds	r4, r3, r5
10014a5e:	428c      	cmp	r4, r1
10014a60:	d10b      	bne.n	10014a7a <_free_r+0x66>
10014a62:	6809      	ldr	r1, [r1, #0]
10014a64:	1869      	adds	r1, r5, r1
10014a66:	1858      	adds	r0, r3, r1
10014a68:	6019      	str	r1, [r3, #0]
10014a6a:	4282      	cmp	r2, r0
10014a6c:	d114      	bne.n	10014a98 <_free_r+0x84>
10014a6e:	6810      	ldr	r0, [r2, #0]
10014a70:	6852      	ldr	r2, [r2, #4]
10014a72:	1841      	adds	r1, r0, r1
10014a74:	6019      	str	r1, [r3, #0]
10014a76:	605a      	str	r2, [r3, #4]
10014a78:	e00e      	b.n	10014a98 <_free_r+0x84>
10014a7a:	428c      	cmp	r4, r1
10014a7c:	d902      	bls.n	10014a84 <_free_r+0x70>
10014a7e:	230c      	movs	r3, #12
10014a80:	6003      	str	r3, [r0, #0]
10014a82:	e009      	b.n	10014a98 <_free_r+0x84>
10014a84:	6808      	ldr	r0, [r1, #0]
10014a86:	180c      	adds	r4, r1, r0
10014a88:	42a2      	cmp	r2, r4
10014a8a:	d103      	bne.n	10014a94 <_free_r+0x80>
10014a8c:	6814      	ldr	r4, [r2, #0]
10014a8e:	6852      	ldr	r2, [r2, #4]
10014a90:	1820      	adds	r0, r4, r0
10014a92:	6008      	str	r0, [r1, #0]
10014a94:	604a      	str	r2, [r1, #4]
10014a96:	6059      	str	r1, [r3, #4]
10014a98:	bd30      	pop	{r4, r5, pc}
10014a9a:	46c0      	nop			; (mov r8, r8)
10014a9c:	10019944 	.word	0x10019944

10014aa0 <_malloc_r>:
10014aa0:	2303      	movs	r3, #3
10014aa2:	b570      	push	{r4, r5, r6, lr}
10014aa4:	1ccd      	adds	r5, r1, #3
10014aa6:	439d      	bics	r5, r3
10014aa8:	3508      	adds	r5, #8
10014aaa:	0006      	movs	r6, r0
10014aac:	2d0c      	cmp	r5, #12
10014aae:	d201      	bcs.n	10014ab4 <_malloc_r+0x14>
10014ab0:	250c      	movs	r5, #12
10014ab2:	e005      	b.n	10014ac0 <_malloc_r+0x20>
10014ab4:	2d00      	cmp	r5, #0
10014ab6:	da03      	bge.n	10014ac0 <_malloc_r+0x20>
10014ab8:	230c      	movs	r3, #12
10014aba:	2000      	movs	r0, #0
10014abc:	6033      	str	r3, [r6, #0]
10014abe:	e040      	b.n	10014b42 <_malloc_r+0xa2>
10014ac0:	42a9      	cmp	r1, r5
10014ac2:	d8f9      	bhi.n	10014ab8 <_malloc_r+0x18>
10014ac4:	4b1f      	ldr	r3, [pc, #124]	; (10014b44 <_malloc_r+0xa4>)
10014ac6:	681c      	ldr	r4, [r3, #0]
10014ac8:	001a      	movs	r2, r3
10014aca:	0021      	movs	r1, r4
10014acc:	2900      	cmp	r1, #0
10014ace:	d013      	beq.n	10014af8 <_malloc_r+0x58>
10014ad0:	680b      	ldr	r3, [r1, #0]
10014ad2:	1b5b      	subs	r3, r3, r5
10014ad4:	d40d      	bmi.n	10014af2 <_malloc_r+0x52>
10014ad6:	2b0b      	cmp	r3, #11
10014ad8:	d902      	bls.n	10014ae0 <_malloc_r+0x40>
10014ada:	600b      	str	r3, [r1, #0]
10014adc:	18cc      	adds	r4, r1, r3
10014ade:	e01e      	b.n	10014b1e <_malloc_r+0x7e>
10014ae0:	428c      	cmp	r4, r1
10014ae2:	d102      	bne.n	10014aea <_malloc_r+0x4a>
10014ae4:	6863      	ldr	r3, [r4, #4]
10014ae6:	6013      	str	r3, [r2, #0]
10014ae8:	e01a      	b.n	10014b20 <_malloc_r+0x80>
10014aea:	684b      	ldr	r3, [r1, #4]
10014aec:	6063      	str	r3, [r4, #4]
10014aee:	000c      	movs	r4, r1
10014af0:	e016      	b.n	10014b20 <_malloc_r+0x80>
10014af2:	000c      	movs	r4, r1
10014af4:	6849      	ldr	r1, [r1, #4]
10014af6:	e7e9      	b.n	10014acc <_malloc_r+0x2c>
10014af8:	4c13      	ldr	r4, [pc, #76]	; (10014b48 <_malloc_r+0xa8>)
10014afa:	6823      	ldr	r3, [r4, #0]
10014afc:	2b00      	cmp	r3, #0
10014afe:	d103      	bne.n	10014b08 <_malloc_r+0x68>
10014b00:	0030      	movs	r0, r6
10014b02:	f000 f8f9 	bl	10014cf8 <_sbrk_r>
10014b06:	6020      	str	r0, [r4, #0]
10014b08:	0029      	movs	r1, r5
10014b0a:	0030      	movs	r0, r6
10014b0c:	f000 f8f4 	bl	10014cf8 <_sbrk_r>
10014b10:	1c43      	adds	r3, r0, #1
10014b12:	d0d1      	beq.n	10014ab8 <_malloc_r+0x18>
10014b14:	2303      	movs	r3, #3
10014b16:	1cc4      	adds	r4, r0, #3
10014b18:	439c      	bics	r4, r3
10014b1a:	42a0      	cmp	r0, r4
10014b1c:	d10a      	bne.n	10014b34 <_malloc_r+0x94>
10014b1e:	6025      	str	r5, [r4, #0]
10014b20:	0020      	movs	r0, r4
10014b22:	2207      	movs	r2, #7
10014b24:	300b      	adds	r0, #11
10014b26:	1d23      	adds	r3, r4, #4
10014b28:	4390      	bics	r0, r2
10014b2a:	1ac3      	subs	r3, r0, r3
10014b2c:	d009      	beq.n	10014b42 <_malloc_r+0xa2>
10014b2e:	425a      	negs	r2, r3
10014b30:	50e2      	str	r2, [r4, r3]
10014b32:	e006      	b.n	10014b42 <_malloc_r+0xa2>
10014b34:	1a21      	subs	r1, r4, r0
10014b36:	0030      	movs	r0, r6
10014b38:	f000 f8de 	bl	10014cf8 <_sbrk_r>
10014b3c:	1c43      	adds	r3, r0, #1
10014b3e:	d1ee      	bne.n	10014b1e <_malloc_r+0x7e>
10014b40:	e7ba      	b.n	10014ab8 <_malloc_r+0x18>
10014b42:	bd70      	pop	{r4, r5, r6, pc}
10014b44:	10019944 	.word	0x10019944
10014b48:	10019940 	.word	0x10019940

10014b4c <iprintf>:
10014b4c:	b40f      	push	{r0, r1, r2, r3}
10014b4e:	4b0b      	ldr	r3, [pc, #44]	; (10014b7c <iprintf+0x30>)
10014b50:	b513      	push	{r0, r1, r4, lr}
10014b52:	681c      	ldr	r4, [r3, #0]
10014b54:	2c00      	cmp	r4, #0
10014b56:	d005      	beq.n	10014b64 <iprintf+0x18>
10014b58:	69a3      	ldr	r3, [r4, #24]
10014b5a:	2b00      	cmp	r3, #0
10014b5c:	d102      	bne.n	10014b64 <iprintf+0x18>
10014b5e:	0020      	movs	r0, r4
10014b60:	f000 fb58 	bl	10015214 <__sinit>
10014b64:	ab05      	add	r3, sp, #20
10014b66:	9a04      	ldr	r2, [sp, #16]
10014b68:	68a1      	ldr	r1, [r4, #8]
10014b6a:	0020      	movs	r0, r4
10014b6c:	9301      	str	r3, [sp, #4]
10014b6e:	f000 fc71 	bl	10015454 <_vfiprintf_r>
10014b72:	bc16      	pop	{r1, r2, r4}
10014b74:	bc08      	pop	{r3}
10014b76:	b004      	add	sp, #16
10014b78:	4718      	bx	r3
10014b7a:	46c0      	nop			; (mov r8, r8)
10014b7c:	10017e70 	.word	0x10017e70

10014b80 <putchar>:
10014b80:	4b08      	ldr	r3, [pc, #32]	; (10014ba4 <putchar+0x24>)
10014b82:	b570      	push	{r4, r5, r6, lr}
10014b84:	681c      	ldr	r4, [r3, #0]
10014b86:	0005      	movs	r5, r0
10014b88:	2c00      	cmp	r4, #0
10014b8a:	d005      	beq.n	10014b98 <putchar+0x18>
10014b8c:	69a3      	ldr	r3, [r4, #24]
10014b8e:	2b00      	cmp	r3, #0
10014b90:	d102      	bne.n	10014b98 <putchar+0x18>
10014b92:	0020      	movs	r0, r4
10014b94:	f000 fb3e 	bl	10015214 <__sinit>
10014b98:	0029      	movs	r1, r5
10014b9a:	68a2      	ldr	r2, [r4, #8]
10014b9c:	0020      	movs	r0, r4
10014b9e:	f000 ff05 	bl	100159ac <_putc_r>
10014ba2:	bd70      	pop	{r4, r5, r6, pc}
10014ba4:	10017e70 	.word	0x10017e70

10014ba8 <_puts_r>:
10014ba8:	b570      	push	{r4, r5, r6, lr}
10014baa:	0005      	movs	r5, r0
10014bac:	000e      	movs	r6, r1
10014bae:	2800      	cmp	r0, #0
10014bb0:	d004      	beq.n	10014bbc <_puts_r+0x14>
10014bb2:	6983      	ldr	r3, [r0, #24]
10014bb4:	2b00      	cmp	r3, #0
10014bb6:	d101      	bne.n	10014bbc <_puts_r+0x14>
10014bb8:	f000 fb2c 	bl	10015214 <__sinit>
10014bbc:	69ab      	ldr	r3, [r5, #24]
10014bbe:	68ac      	ldr	r4, [r5, #8]
10014bc0:	2b00      	cmp	r3, #0
10014bc2:	d102      	bne.n	10014bca <_puts_r+0x22>
10014bc4:	0028      	movs	r0, r5
10014bc6:	f000 fb25 	bl	10015214 <__sinit>
10014bca:	4b25      	ldr	r3, [pc, #148]	; (10014c60 <_puts_r+0xb8>)
10014bcc:	429c      	cmp	r4, r3
10014bce:	d101      	bne.n	10014bd4 <_puts_r+0x2c>
10014bd0:	686c      	ldr	r4, [r5, #4]
10014bd2:	e008      	b.n	10014be6 <_puts_r+0x3e>
10014bd4:	4b23      	ldr	r3, [pc, #140]	; (10014c64 <_puts_r+0xbc>)
10014bd6:	429c      	cmp	r4, r3
10014bd8:	d101      	bne.n	10014bde <_puts_r+0x36>
10014bda:	68ac      	ldr	r4, [r5, #8]
10014bdc:	e003      	b.n	10014be6 <_puts_r+0x3e>
10014bde:	4b22      	ldr	r3, [pc, #136]	; (10014c68 <_puts_r+0xc0>)
10014be0:	429c      	cmp	r4, r3
10014be2:	d100      	bne.n	10014be6 <_puts_r+0x3e>
10014be4:	68ec      	ldr	r4, [r5, #12]
10014be6:	89a3      	ldrh	r3, [r4, #12]
10014be8:	071b      	lsls	r3, r3, #28
10014bea:	d502      	bpl.n	10014bf2 <_puts_r+0x4a>
10014bec:	6923      	ldr	r3, [r4, #16]
10014bee:	2b00      	cmp	r3, #0
10014bf0:	d111      	bne.n	10014c16 <_puts_r+0x6e>
10014bf2:	0021      	movs	r1, r4
10014bf4:	0028      	movs	r0, r5
10014bf6:	f000 f9a3 	bl	10014f40 <__swsetup_r>
10014bfa:	2800      	cmp	r0, #0
10014bfc:	d00b      	beq.n	10014c16 <_puts_r+0x6e>
10014bfe:	2001      	movs	r0, #1
10014c00:	4240      	negs	r0, r0
10014c02:	e02b      	b.n	10014c5c <_puts_r+0xb4>
10014c04:	3b01      	subs	r3, #1
10014c06:	3601      	adds	r6, #1
10014c08:	60a3      	str	r3, [r4, #8]
10014c0a:	2b00      	cmp	r3, #0
10014c0c:	db08      	blt.n	10014c20 <_puts_r+0x78>
10014c0e:	6823      	ldr	r3, [r4, #0]
10014c10:	1c5a      	adds	r2, r3, #1
10014c12:	6022      	str	r2, [r4, #0]
10014c14:	7019      	strb	r1, [r3, #0]
10014c16:	7831      	ldrb	r1, [r6, #0]
10014c18:	68a3      	ldr	r3, [r4, #8]
10014c1a:	2900      	cmp	r1, #0
10014c1c:	d1f2      	bne.n	10014c04 <_puts_r+0x5c>
10014c1e:	e00b      	b.n	10014c38 <_puts_r+0x90>
10014c20:	69a2      	ldr	r2, [r4, #24]
10014c22:	4293      	cmp	r3, r2
10014c24:	db01      	blt.n	10014c2a <_puts_r+0x82>
10014c26:	290a      	cmp	r1, #10
10014c28:	d1f1      	bne.n	10014c0e <_puts_r+0x66>
10014c2a:	0022      	movs	r2, r4
10014c2c:	0028      	movs	r0, r5
10014c2e:	f000 f92f 	bl	10014e90 <__swbuf_r>
10014c32:	1c43      	adds	r3, r0, #1
10014c34:	d1ef      	bne.n	10014c16 <_puts_r+0x6e>
10014c36:	e7e2      	b.n	10014bfe <_puts_r+0x56>
10014c38:	3b01      	subs	r3, #1
10014c3a:	60a3      	str	r3, [r4, #8]
10014c3c:	2b00      	cmp	r3, #0
10014c3e:	da08      	bge.n	10014c52 <_puts_r+0xaa>
10014c40:	0022      	movs	r2, r4
10014c42:	310a      	adds	r1, #10
10014c44:	0028      	movs	r0, r5
10014c46:	f000 f923 	bl	10014e90 <__swbuf_r>
10014c4a:	1c43      	adds	r3, r0, #1
10014c4c:	d0d7      	beq.n	10014bfe <_puts_r+0x56>
10014c4e:	200a      	movs	r0, #10
10014c50:	e004      	b.n	10014c5c <_puts_r+0xb4>
10014c52:	200a      	movs	r0, #10
10014c54:	6823      	ldr	r3, [r4, #0]
10014c56:	1c5a      	adds	r2, r3, #1
10014c58:	6022      	str	r2, [r4, #0]
10014c5a:	7018      	strb	r0, [r3, #0]
10014c5c:	bd70      	pop	{r4, r5, r6, pc}
10014c5e:	46c0      	nop			; (mov r8, r8)
10014c60:	10017d14 	.word	0x10017d14
10014c64:	10017d34 	.word	0x10017d34
10014c68:	10017d54 	.word	0x10017d54

10014c6c <puts>:
10014c6c:	b510      	push	{r4, lr}
10014c6e:	4b03      	ldr	r3, [pc, #12]	; (10014c7c <puts+0x10>)
10014c70:	0001      	movs	r1, r0
10014c72:	6818      	ldr	r0, [r3, #0]
10014c74:	f7ff ff98 	bl	10014ba8 <_puts_r>
10014c78:	bd10      	pop	{r4, pc}
10014c7a:	46c0      	nop			; (mov r8, r8)
10014c7c:	10017e70 	.word	0x10017e70

10014c80 <rand>:
10014c80:	4b15      	ldr	r3, [pc, #84]	; (10014cd8 <rand+0x58>)
10014c82:	b510      	push	{r4, lr}
10014c84:	681c      	ldr	r4, [r3, #0]
10014c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014c88:	2b00      	cmp	r3, #0
10014c8a:	d115      	bne.n	10014cb8 <rand+0x38>
10014c8c:	2018      	movs	r0, #24
10014c8e:	f7ff fe97 	bl	100149c0 <malloc>
10014c92:	4b12      	ldr	r3, [pc, #72]	; (10014cdc <rand+0x5c>)
10014c94:	63a0      	str	r0, [r4, #56]	; 0x38
10014c96:	8003      	strh	r3, [r0, #0]
10014c98:	4b11      	ldr	r3, [pc, #68]	; (10014ce0 <rand+0x60>)
10014c9a:	2201      	movs	r2, #1
10014c9c:	8043      	strh	r3, [r0, #2]
10014c9e:	4b11      	ldr	r3, [pc, #68]	; (10014ce4 <rand+0x64>)
10014ca0:	8083      	strh	r3, [r0, #4]
10014ca2:	4b11      	ldr	r3, [pc, #68]	; (10014ce8 <rand+0x68>)
10014ca4:	80c3      	strh	r3, [r0, #6]
10014ca6:	4b11      	ldr	r3, [pc, #68]	; (10014cec <rand+0x6c>)
10014ca8:	8103      	strh	r3, [r0, #8]
10014caa:	2305      	movs	r3, #5
10014cac:	8143      	strh	r3, [r0, #10]
10014cae:	3306      	adds	r3, #6
10014cb0:	8183      	strh	r3, [r0, #12]
10014cb2:	2300      	movs	r3, #0
10014cb4:	6102      	str	r2, [r0, #16]
10014cb6:	6143      	str	r3, [r0, #20]
10014cb8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014cba:	4a0d      	ldr	r2, [pc, #52]	; (10014cf0 <rand+0x70>)
10014cbc:	6920      	ldr	r0, [r4, #16]
10014cbe:	6961      	ldr	r1, [r4, #20]
10014cc0:	4b0c      	ldr	r3, [pc, #48]	; (10014cf4 <rand+0x74>)
10014cc2:	f7fe f9c9 	bl	10013058 <__aeabi_lmul>
10014cc6:	2201      	movs	r2, #1
10014cc8:	2300      	movs	r3, #0
10014cca:	1880      	adds	r0, r0, r2
10014ccc:	4159      	adcs	r1, r3
10014cce:	6120      	str	r0, [r4, #16]
10014cd0:	6161      	str	r1, [r4, #20]
10014cd2:	0048      	lsls	r0, r1, #1
10014cd4:	0840      	lsrs	r0, r0, #1
10014cd6:	bd10      	pop	{r4, pc}
10014cd8:	10017e70 	.word	0x10017e70
10014cdc:	0000330e 	.word	0x0000330e
10014ce0:	ffffabcd 	.word	0xffffabcd
10014ce4:	00001234 	.word	0x00001234
10014ce8:	ffffe66d 	.word	0xffffe66d
10014cec:	ffffdeec 	.word	0xffffdeec
10014cf0:	4c957f2d 	.word	0x4c957f2d
10014cf4:	5851f42d 	.word	0x5851f42d

10014cf8 <_sbrk_r>:
10014cf8:	2300      	movs	r3, #0
10014cfa:	b570      	push	{r4, r5, r6, lr}
10014cfc:	4c06      	ldr	r4, [pc, #24]	; (10014d18 <_sbrk_r+0x20>)
10014cfe:	0005      	movs	r5, r0
10014d00:	0008      	movs	r0, r1
10014d02:	6023      	str	r3, [r4, #0]
10014d04:	f7f8 fb7a 	bl	1000d3fc <_sbrk>
10014d08:	1c43      	adds	r3, r0, #1
10014d0a:	d103      	bne.n	10014d14 <_sbrk_r+0x1c>
10014d0c:	6823      	ldr	r3, [r4, #0]
10014d0e:	2b00      	cmp	r3, #0
10014d10:	d000      	beq.n	10014d14 <_sbrk_r+0x1c>
10014d12:	602b      	str	r3, [r5, #0]
10014d14:	bd70      	pop	{r4, r5, r6, pc}
10014d16:	46c0      	nop			; (mov r8, r8)
10014d18:	1001ad10 	.word	0x1001ad10

10014d1c <setbuf>:
10014d1c:	424a      	negs	r2, r1
10014d1e:	414a      	adcs	r2, r1
10014d20:	2380      	movs	r3, #128	; 0x80
10014d22:	b510      	push	{r4, lr}
10014d24:	0052      	lsls	r2, r2, #1
10014d26:	00db      	lsls	r3, r3, #3
10014d28:	f000 f802 	bl	10014d30 <setvbuf>
10014d2c:	bd10      	pop	{r4, pc}
	...

10014d30 <setvbuf>:
10014d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10014d32:	001d      	movs	r5, r3
10014d34:	4b51      	ldr	r3, [pc, #324]	; (10014e7c <setvbuf+0x14c>)
10014d36:	b085      	sub	sp, #20
10014d38:	681e      	ldr	r6, [r3, #0]
10014d3a:	0004      	movs	r4, r0
10014d3c:	000f      	movs	r7, r1
10014d3e:	9200      	str	r2, [sp, #0]
10014d40:	2e00      	cmp	r6, #0
10014d42:	d005      	beq.n	10014d50 <setvbuf+0x20>
10014d44:	69b3      	ldr	r3, [r6, #24]
10014d46:	2b00      	cmp	r3, #0
10014d48:	d102      	bne.n	10014d50 <setvbuf+0x20>
10014d4a:	0030      	movs	r0, r6
10014d4c:	f000 fa62 	bl	10015214 <__sinit>
10014d50:	4b4b      	ldr	r3, [pc, #300]	; (10014e80 <setvbuf+0x150>)
10014d52:	429c      	cmp	r4, r3
10014d54:	d101      	bne.n	10014d5a <setvbuf+0x2a>
10014d56:	6874      	ldr	r4, [r6, #4]
10014d58:	e008      	b.n	10014d6c <setvbuf+0x3c>
10014d5a:	4b4a      	ldr	r3, [pc, #296]	; (10014e84 <setvbuf+0x154>)
10014d5c:	429c      	cmp	r4, r3
10014d5e:	d101      	bne.n	10014d64 <setvbuf+0x34>
10014d60:	68b4      	ldr	r4, [r6, #8]
10014d62:	e003      	b.n	10014d6c <setvbuf+0x3c>
10014d64:	4b48      	ldr	r3, [pc, #288]	; (10014e88 <setvbuf+0x158>)
10014d66:	429c      	cmp	r4, r3
10014d68:	d100      	bne.n	10014d6c <setvbuf+0x3c>
10014d6a:	68f4      	ldr	r4, [r6, #12]
10014d6c:	9b00      	ldr	r3, [sp, #0]
10014d6e:	2b02      	cmp	r3, #2
10014d70:	d005      	beq.n	10014d7e <setvbuf+0x4e>
10014d72:	2b01      	cmp	r3, #1
10014d74:	d900      	bls.n	10014d78 <setvbuf+0x48>
10014d76:	e07c      	b.n	10014e72 <setvbuf+0x142>
10014d78:	2d00      	cmp	r5, #0
10014d7a:	da00      	bge.n	10014d7e <setvbuf+0x4e>
10014d7c:	e079      	b.n	10014e72 <setvbuf+0x142>
10014d7e:	0021      	movs	r1, r4
10014d80:	0030      	movs	r0, r6
10014d82:	f000 f9d9 	bl	10015138 <_fflush_r>
10014d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014d88:	2900      	cmp	r1, #0
10014d8a:	d008      	beq.n	10014d9e <setvbuf+0x6e>
10014d8c:	0023      	movs	r3, r4
10014d8e:	3344      	adds	r3, #68	; 0x44
10014d90:	4299      	cmp	r1, r3
10014d92:	d002      	beq.n	10014d9a <setvbuf+0x6a>
10014d94:	0030      	movs	r0, r6
10014d96:	f7ff fe3d 	bl	10014a14 <_free_r>
10014d9a:	2300      	movs	r3, #0
10014d9c:	6363      	str	r3, [r4, #52]	; 0x34
10014d9e:	2300      	movs	r3, #0
10014da0:	61a3      	str	r3, [r4, #24]
10014da2:	6063      	str	r3, [r4, #4]
10014da4:	89a3      	ldrh	r3, [r4, #12]
10014da6:	061b      	lsls	r3, r3, #24
10014da8:	d503      	bpl.n	10014db2 <setvbuf+0x82>
10014daa:	6921      	ldr	r1, [r4, #16]
10014dac:	0030      	movs	r0, r6
10014dae:	f7ff fe31 	bl	10014a14 <_free_r>
10014db2:	89a2      	ldrh	r2, [r4, #12]
10014db4:	4b35      	ldr	r3, [pc, #212]	; (10014e8c <setvbuf+0x15c>)
10014db6:	4013      	ands	r3, r2
10014db8:	81a3      	strh	r3, [r4, #12]
10014dba:	9b00      	ldr	r3, [sp, #0]
10014dbc:	2b02      	cmp	r3, #2
10014dbe:	d021      	beq.n	10014e04 <setvbuf+0xd4>
10014dc0:	ab03      	add	r3, sp, #12
10014dc2:	aa02      	add	r2, sp, #8
10014dc4:	0021      	movs	r1, r4
10014dc6:	0030      	movs	r0, r6
10014dc8:	f000 fab8 	bl	1001533c <__swhatbuf_r>
10014dcc:	89a3      	ldrh	r3, [r4, #12]
10014dce:	4318      	orrs	r0, r3
10014dd0:	81a0      	strh	r0, [r4, #12]
10014dd2:	2d00      	cmp	r5, #0
10014dd4:	d101      	bne.n	10014dda <setvbuf+0xaa>
10014dd6:	9d02      	ldr	r5, [sp, #8]
10014dd8:	e001      	b.n	10014dde <setvbuf+0xae>
10014dda:	2f00      	cmp	r7, #0
10014ddc:	d125      	bne.n	10014e2a <setvbuf+0xfa>
10014dde:	0028      	movs	r0, r5
10014de0:	f7ff fdee 	bl	100149c0 <malloc>
10014de4:	9501      	str	r5, [sp, #4]
10014de6:	1e07      	subs	r7, r0, #0
10014de8:	d11a      	bne.n	10014e20 <setvbuf+0xf0>
10014dea:	9b02      	ldr	r3, [sp, #8]
10014dec:	9301      	str	r3, [sp, #4]
10014dee:	42ab      	cmp	r3, r5
10014df0:	d102      	bne.n	10014df8 <setvbuf+0xc8>
10014df2:	2001      	movs	r0, #1
10014df4:	4240      	negs	r0, r0
10014df6:	e006      	b.n	10014e06 <setvbuf+0xd6>
10014df8:	9801      	ldr	r0, [sp, #4]
10014dfa:	f7ff fde1 	bl	100149c0 <malloc>
10014dfe:	1e07      	subs	r7, r0, #0
10014e00:	d10e      	bne.n	10014e20 <setvbuf+0xf0>
10014e02:	e7f6      	b.n	10014df2 <setvbuf+0xc2>
10014e04:	2000      	movs	r0, #0
10014e06:	2202      	movs	r2, #2
10014e08:	89a3      	ldrh	r3, [r4, #12]
10014e0a:	4313      	orrs	r3, r2
10014e0c:	81a3      	strh	r3, [r4, #12]
10014e0e:	2300      	movs	r3, #0
10014e10:	60a3      	str	r3, [r4, #8]
10014e12:	0023      	movs	r3, r4
10014e14:	3347      	adds	r3, #71	; 0x47
10014e16:	6023      	str	r3, [r4, #0]
10014e18:	6123      	str	r3, [r4, #16]
10014e1a:	2301      	movs	r3, #1
10014e1c:	6163      	str	r3, [r4, #20]
10014e1e:	e02a      	b.n	10014e76 <setvbuf+0x146>
10014e20:	2280      	movs	r2, #128	; 0x80
10014e22:	89a3      	ldrh	r3, [r4, #12]
10014e24:	9d01      	ldr	r5, [sp, #4]
10014e26:	4313      	orrs	r3, r2
10014e28:	81a3      	strh	r3, [r4, #12]
10014e2a:	69b3      	ldr	r3, [r6, #24]
10014e2c:	2b00      	cmp	r3, #0
10014e2e:	d102      	bne.n	10014e36 <setvbuf+0x106>
10014e30:	0030      	movs	r0, r6
10014e32:	f000 f9ef 	bl	10015214 <__sinit>
10014e36:	9b00      	ldr	r3, [sp, #0]
10014e38:	2b01      	cmp	r3, #1
10014e3a:	d103      	bne.n	10014e44 <setvbuf+0x114>
10014e3c:	89a3      	ldrh	r3, [r4, #12]
10014e3e:	9a00      	ldr	r2, [sp, #0]
10014e40:	431a      	orrs	r2, r3
10014e42:	81a2      	strh	r2, [r4, #12]
10014e44:	2308      	movs	r3, #8
10014e46:	89a2      	ldrh	r2, [r4, #12]
10014e48:	6027      	str	r7, [r4, #0]
10014e4a:	4013      	ands	r3, r2
10014e4c:	6127      	str	r7, [r4, #16]
10014e4e:	6165      	str	r5, [r4, #20]
10014e50:	1e18      	subs	r0, r3, #0
10014e52:	d00c      	beq.n	10014e6e <setvbuf+0x13e>
10014e54:	2301      	movs	r3, #1
10014e56:	401a      	ands	r2, r3
10014e58:	2300      	movs	r3, #0
10014e5a:	1e10      	subs	r0, r2, #0
10014e5c:	4298      	cmp	r0, r3
10014e5e:	d004      	beq.n	10014e6a <setvbuf+0x13a>
10014e60:	426d      	negs	r5, r5
10014e62:	60a3      	str	r3, [r4, #8]
10014e64:	61a5      	str	r5, [r4, #24]
10014e66:	0018      	movs	r0, r3
10014e68:	e005      	b.n	10014e76 <setvbuf+0x146>
10014e6a:	60a5      	str	r5, [r4, #8]
10014e6c:	e003      	b.n	10014e76 <setvbuf+0x146>
10014e6e:	60a3      	str	r3, [r4, #8]
10014e70:	e001      	b.n	10014e76 <setvbuf+0x146>
10014e72:	2001      	movs	r0, #1
10014e74:	4240      	negs	r0, r0
10014e76:	b005      	add	sp, #20
10014e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014e7a:	46c0      	nop			; (mov r8, r8)
10014e7c:	10017e70 	.word	0x10017e70
10014e80:	10017d14 	.word	0x10017d14
10014e84:	10017d34 	.word	0x10017d34
10014e88:	10017d54 	.word	0x10017d54
10014e8c:	fffff35c 	.word	0xfffff35c

10014e90 <__swbuf_r>:
10014e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014e92:	0005      	movs	r5, r0
10014e94:	000f      	movs	r7, r1
10014e96:	0014      	movs	r4, r2
10014e98:	2800      	cmp	r0, #0
10014e9a:	d004      	beq.n	10014ea6 <__swbuf_r+0x16>
10014e9c:	6983      	ldr	r3, [r0, #24]
10014e9e:	2b00      	cmp	r3, #0
10014ea0:	d101      	bne.n	10014ea6 <__swbuf_r+0x16>
10014ea2:	f000 f9b7 	bl	10015214 <__sinit>
10014ea6:	4b23      	ldr	r3, [pc, #140]	; (10014f34 <__swbuf_r+0xa4>)
10014ea8:	429c      	cmp	r4, r3
10014eaa:	d101      	bne.n	10014eb0 <__swbuf_r+0x20>
10014eac:	686c      	ldr	r4, [r5, #4]
10014eae:	e008      	b.n	10014ec2 <__swbuf_r+0x32>
10014eb0:	4b21      	ldr	r3, [pc, #132]	; (10014f38 <__swbuf_r+0xa8>)
10014eb2:	429c      	cmp	r4, r3
10014eb4:	d101      	bne.n	10014eba <__swbuf_r+0x2a>
10014eb6:	68ac      	ldr	r4, [r5, #8]
10014eb8:	e003      	b.n	10014ec2 <__swbuf_r+0x32>
10014eba:	4b20      	ldr	r3, [pc, #128]	; (10014f3c <__swbuf_r+0xac>)
10014ebc:	429c      	cmp	r4, r3
10014ebe:	d100      	bne.n	10014ec2 <__swbuf_r+0x32>
10014ec0:	68ec      	ldr	r4, [r5, #12]
10014ec2:	69a3      	ldr	r3, [r4, #24]
10014ec4:	60a3      	str	r3, [r4, #8]
10014ec6:	89a3      	ldrh	r3, [r4, #12]
10014ec8:	071b      	lsls	r3, r3, #28
10014eca:	d50a      	bpl.n	10014ee2 <__swbuf_r+0x52>
10014ecc:	6923      	ldr	r3, [r4, #16]
10014ece:	2b00      	cmp	r3, #0
10014ed0:	d007      	beq.n	10014ee2 <__swbuf_r+0x52>
10014ed2:	6823      	ldr	r3, [r4, #0]
10014ed4:	6922      	ldr	r2, [r4, #16]
10014ed6:	b2fe      	uxtb	r6, r7
10014ed8:	1a98      	subs	r0, r3, r2
10014eda:	6963      	ldr	r3, [r4, #20]
10014edc:	4298      	cmp	r0, r3
10014ede:	db0f      	blt.n	10014f00 <__swbuf_r+0x70>
10014ee0:	e008      	b.n	10014ef4 <__swbuf_r+0x64>
10014ee2:	0021      	movs	r1, r4
10014ee4:	0028      	movs	r0, r5
10014ee6:	f000 f82b 	bl	10014f40 <__swsetup_r>
10014eea:	2800      	cmp	r0, #0
10014eec:	d0f1      	beq.n	10014ed2 <__swbuf_r+0x42>
10014eee:	2001      	movs	r0, #1
10014ef0:	4240      	negs	r0, r0
10014ef2:	e01d      	b.n	10014f30 <__swbuf_r+0xa0>
10014ef4:	0021      	movs	r1, r4
10014ef6:	0028      	movs	r0, r5
10014ef8:	f000 f91e 	bl	10015138 <_fflush_r>
10014efc:	2800      	cmp	r0, #0
10014efe:	d1f6      	bne.n	10014eee <__swbuf_r+0x5e>
10014f00:	68a3      	ldr	r3, [r4, #8]
10014f02:	3001      	adds	r0, #1
10014f04:	3b01      	subs	r3, #1
10014f06:	60a3      	str	r3, [r4, #8]
10014f08:	6823      	ldr	r3, [r4, #0]
10014f0a:	1c5a      	adds	r2, r3, #1
10014f0c:	6022      	str	r2, [r4, #0]
10014f0e:	701f      	strb	r7, [r3, #0]
10014f10:	6963      	ldr	r3, [r4, #20]
10014f12:	4298      	cmp	r0, r3
10014f14:	d005      	beq.n	10014f22 <__swbuf_r+0x92>
10014f16:	89a3      	ldrh	r3, [r4, #12]
10014f18:	0030      	movs	r0, r6
10014f1a:	07db      	lsls	r3, r3, #31
10014f1c:	d508      	bpl.n	10014f30 <__swbuf_r+0xa0>
10014f1e:	2e0a      	cmp	r6, #10
10014f20:	d106      	bne.n	10014f30 <__swbuf_r+0xa0>
10014f22:	0021      	movs	r1, r4
10014f24:	0028      	movs	r0, r5
10014f26:	f000 f907 	bl	10015138 <_fflush_r>
10014f2a:	2800      	cmp	r0, #0
10014f2c:	d1df      	bne.n	10014eee <__swbuf_r+0x5e>
10014f2e:	0030      	movs	r0, r6
10014f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014f32:	46c0      	nop			; (mov r8, r8)
10014f34:	10017d14 	.word	0x10017d14
10014f38:	10017d34 	.word	0x10017d34
10014f3c:	10017d54 	.word	0x10017d54

10014f40 <__swsetup_r>:
10014f40:	4b36      	ldr	r3, [pc, #216]	; (1001501c <__swsetup_r+0xdc>)
10014f42:	b570      	push	{r4, r5, r6, lr}
10014f44:	681d      	ldr	r5, [r3, #0]
10014f46:	0006      	movs	r6, r0
10014f48:	000c      	movs	r4, r1
10014f4a:	2d00      	cmp	r5, #0
10014f4c:	d005      	beq.n	10014f5a <__swsetup_r+0x1a>
10014f4e:	69ab      	ldr	r3, [r5, #24]
10014f50:	2b00      	cmp	r3, #0
10014f52:	d102      	bne.n	10014f5a <__swsetup_r+0x1a>
10014f54:	0028      	movs	r0, r5
10014f56:	f000 f95d 	bl	10015214 <__sinit>
10014f5a:	4b31      	ldr	r3, [pc, #196]	; (10015020 <__swsetup_r+0xe0>)
10014f5c:	429c      	cmp	r4, r3
10014f5e:	d101      	bne.n	10014f64 <__swsetup_r+0x24>
10014f60:	686c      	ldr	r4, [r5, #4]
10014f62:	e008      	b.n	10014f76 <__swsetup_r+0x36>
10014f64:	4b2f      	ldr	r3, [pc, #188]	; (10015024 <__swsetup_r+0xe4>)
10014f66:	429c      	cmp	r4, r3
10014f68:	d101      	bne.n	10014f6e <__swsetup_r+0x2e>
10014f6a:	68ac      	ldr	r4, [r5, #8]
10014f6c:	e003      	b.n	10014f76 <__swsetup_r+0x36>
10014f6e:	4b2e      	ldr	r3, [pc, #184]	; (10015028 <__swsetup_r+0xe8>)
10014f70:	429c      	cmp	r4, r3
10014f72:	d100      	bne.n	10014f76 <__swsetup_r+0x36>
10014f74:	68ec      	ldr	r4, [r5, #12]
10014f76:	220c      	movs	r2, #12
10014f78:	5ea3      	ldrsh	r3, [r4, r2]
10014f7a:	b29a      	uxth	r2, r3
10014f7c:	0711      	lsls	r1, r2, #28
10014f7e:	d423      	bmi.n	10014fc8 <__swsetup_r+0x88>
10014f80:	06d1      	lsls	r1, r2, #27
10014f82:	d407      	bmi.n	10014f94 <__swsetup_r+0x54>
10014f84:	2209      	movs	r2, #9
10014f86:	2001      	movs	r0, #1
10014f88:	6032      	str	r2, [r6, #0]
10014f8a:	3237      	adds	r2, #55	; 0x37
10014f8c:	4313      	orrs	r3, r2
10014f8e:	81a3      	strh	r3, [r4, #12]
10014f90:	4240      	negs	r0, r0
10014f92:	e042      	b.n	1001501a <__swsetup_r+0xda>
10014f94:	0753      	lsls	r3, r2, #29
10014f96:	d513      	bpl.n	10014fc0 <__swsetup_r+0x80>
10014f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014f9a:	2900      	cmp	r1, #0
10014f9c:	d008      	beq.n	10014fb0 <__swsetup_r+0x70>
10014f9e:	0023      	movs	r3, r4
10014fa0:	3344      	adds	r3, #68	; 0x44
10014fa2:	4299      	cmp	r1, r3
10014fa4:	d002      	beq.n	10014fac <__swsetup_r+0x6c>
10014fa6:	0030      	movs	r0, r6
10014fa8:	f7ff fd34 	bl	10014a14 <_free_r>
10014fac:	2300      	movs	r3, #0
10014fae:	6363      	str	r3, [r4, #52]	; 0x34
10014fb0:	2224      	movs	r2, #36	; 0x24
10014fb2:	89a3      	ldrh	r3, [r4, #12]
10014fb4:	4393      	bics	r3, r2
10014fb6:	81a3      	strh	r3, [r4, #12]
10014fb8:	2300      	movs	r3, #0
10014fba:	6063      	str	r3, [r4, #4]
10014fbc:	6923      	ldr	r3, [r4, #16]
10014fbe:	6023      	str	r3, [r4, #0]
10014fc0:	2208      	movs	r2, #8
10014fc2:	89a3      	ldrh	r3, [r4, #12]
10014fc4:	4313      	orrs	r3, r2
10014fc6:	81a3      	strh	r3, [r4, #12]
10014fc8:	6923      	ldr	r3, [r4, #16]
10014fca:	2b00      	cmp	r3, #0
10014fcc:	d10b      	bne.n	10014fe6 <__swsetup_r+0xa6>
10014fce:	23a0      	movs	r3, #160	; 0xa0
10014fd0:	89a2      	ldrh	r2, [r4, #12]
10014fd2:	009b      	lsls	r3, r3, #2
10014fd4:	4013      	ands	r3, r2
10014fd6:	2280      	movs	r2, #128	; 0x80
10014fd8:	0092      	lsls	r2, r2, #2
10014fda:	4293      	cmp	r3, r2
10014fdc:	d003      	beq.n	10014fe6 <__swsetup_r+0xa6>
10014fde:	0021      	movs	r1, r4
10014fe0:	0030      	movs	r0, r6
10014fe2:	f000 f9d1 	bl	10015388 <__smakebuf_r>
10014fe6:	2301      	movs	r3, #1
10014fe8:	89a2      	ldrh	r2, [r4, #12]
10014fea:	4013      	ands	r3, r2
10014fec:	d005      	beq.n	10014ffa <__swsetup_r+0xba>
10014fee:	2300      	movs	r3, #0
10014ff0:	60a3      	str	r3, [r4, #8]
10014ff2:	6963      	ldr	r3, [r4, #20]
10014ff4:	425b      	negs	r3, r3
10014ff6:	61a3      	str	r3, [r4, #24]
10014ff8:	e003      	b.n	10015002 <__swsetup_r+0xc2>
10014ffa:	0792      	lsls	r2, r2, #30
10014ffc:	d400      	bmi.n	10015000 <__swsetup_r+0xc0>
10014ffe:	6963      	ldr	r3, [r4, #20]
10015000:	60a3      	str	r3, [r4, #8]
10015002:	2000      	movs	r0, #0
10015004:	6923      	ldr	r3, [r4, #16]
10015006:	4283      	cmp	r3, r0
10015008:	d107      	bne.n	1001501a <__swsetup_r+0xda>
1001500a:	220c      	movs	r2, #12
1001500c:	5ea3      	ldrsh	r3, [r4, r2]
1001500e:	061a      	lsls	r2, r3, #24
10015010:	d503      	bpl.n	1001501a <__swsetup_r+0xda>
10015012:	2240      	movs	r2, #64	; 0x40
10015014:	4313      	orrs	r3, r2
10015016:	81a3      	strh	r3, [r4, #12]
10015018:	3801      	subs	r0, #1
1001501a:	bd70      	pop	{r4, r5, r6, pc}
1001501c:	10017e70 	.word	0x10017e70
10015020:	10017d14 	.word	0x10017d14
10015024:	10017d34 	.word	0x10017d34
10015028:	10017d54 	.word	0x10017d54

1001502c <__sflush_r>:
1001502c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001502e:	898a      	ldrh	r2, [r1, #12]
10015030:	0005      	movs	r5, r0
10015032:	000c      	movs	r4, r1
10015034:	0713      	lsls	r3, r2, #28
10015036:	d45a      	bmi.n	100150ee <__sflush_r+0xc2>
10015038:	684b      	ldr	r3, [r1, #4]
1001503a:	2b00      	cmp	r3, #0
1001503c:	dc02      	bgt.n	10015044 <__sflush_r+0x18>
1001503e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015040:	2b00      	cmp	r3, #0
10015042:	dd19      	ble.n	10015078 <__sflush_r+0x4c>
10015044:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015046:	2f00      	cmp	r7, #0
10015048:	d016      	beq.n	10015078 <__sflush_r+0x4c>
1001504a:	2300      	movs	r3, #0
1001504c:	682e      	ldr	r6, [r5, #0]
1001504e:	602b      	str	r3, [r5, #0]
10015050:	2380      	movs	r3, #128	; 0x80
10015052:	015b      	lsls	r3, r3, #5
10015054:	401a      	ands	r2, r3
10015056:	d001      	beq.n	1001505c <__sflush_r+0x30>
10015058:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001505a:	e014      	b.n	10015086 <__sflush_r+0x5a>
1001505c:	2301      	movs	r3, #1
1001505e:	6a21      	ldr	r1, [r4, #32]
10015060:	0028      	movs	r0, r5
10015062:	47b8      	blx	r7
10015064:	1c43      	adds	r3, r0, #1
10015066:	d10e      	bne.n	10015086 <__sflush_r+0x5a>
10015068:	682b      	ldr	r3, [r5, #0]
1001506a:	2b00      	cmp	r3, #0
1001506c:	d00b      	beq.n	10015086 <__sflush_r+0x5a>
1001506e:	2b1d      	cmp	r3, #29
10015070:	d001      	beq.n	10015076 <__sflush_r+0x4a>
10015072:	2b16      	cmp	r3, #22
10015074:	d102      	bne.n	1001507c <__sflush_r+0x50>
10015076:	602e      	str	r6, [r5, #0]
10015078:	2000      	movs	r0, #0
1001507a:	e05a      	b.n	10015132 <__sflush_r+0x106>
1001507c:	2240      	movs	r2, #64	; 0x40
1001507e:	89a3      	ldrh	r3, [r4, #12]
10015080:	4313      	orrs	r3, r2
10015082:	81a3      	strh	r3, [r4, #12]
10015084:	e055      	b.n	10015132 <__sflush_r+0x106>
10015086:	89a3      	ldrh	r3, [r4, #12]
10015088:	075b      	lsls	r3, r3, #29
1001508a:	d506      	bpl.n	1001509a <__sflush_r+0x6e>
1001508c:	6863      	ldr	r3, [r4, #4]
1001508e:	1ac0      	subs	r0, r0, r3
10015090:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015092:	2b00      	cmp	r3, #0
10015094:	d001      	beq.n	1001509a <__sflush_r+0x6e>
10015096:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015098:	1ac0      	subs	r0, r0, r3
1001509a:	2300      	movs	r3, #0
1001509c:	0002      	movs	r2, r0
1001509e:	6a21      	ldr	r1, [r4, #32]
100150a0:	0028      	movs	r0, r5
100150a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100150a4:	47b8      	blx	r7
100150a6:	89a3      	ldrh	r3, [r4, #12]
100150a8:	1c42      	adds	r2, r0, #1
100150aa:	d106      	bne.n	100150ba <__sflush_r+0x8e>
100150ac:	6829      	ldr	r1, [r5, #0]
100150ae:	291d      	cmp	r1, #29
100150b0:	d83a      	bhi.n	10015128 <__sflush_r+0xfc>
100150b2:	4a20      	ldr	r2, [pc, #128]	; (10015134 <__sflush_r+0x108>)
100150b4:	40ca      	lsrs	r2, r1
100150b6:	07d2      	lsls	r2, r2, #31
100150b8:	d536      	bpl.n	10015128 <__sflush_r+0xfc>
100150ba:	2200      	movs	r2, #0
100150bc:	6062      	str	r2, [r4, #4]
100150be:	6922      	ldr	r2, [r4, #16]
100150c0:	6022      	str	r2, [r4, #0]
100150c2:	04db      	lsls	r3, r3, #19
100150c4:	d505      	bpl.n	100150d2 <__sflush_r+0xa6>
100150c6:	1c43      	adds	r3, r0, #1
100150c8:	d102      	bne.n	100150d0 <__sflush_r+0xa4>
100150ca:	682b      	ldr	r3, [r5, #0]
100150cc:	2b00      	cmp	r3, #0
100150ce:	d100      	bne.n	100150d2 <__sflush_r+0xa6>
100150d0:	6560      	str	r0, [r4, #84]	; 0x54
100150d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100150d4:	602e      	str	r6, [r5, #0]
100150d6:	2900      	cmp	r1, #0
100150d8:	d0ce      	beq.n	10015078 <__sflush_r+0x4c>
100150da:	0023      	movs	r3, r4
100150dc:	3344      	adds	r3, #68	; 0x44
100150de:	4299      	cmp	r1, r3
100150e0:	d002      	beq.n	100150e8 <__sflush_r+0xbc>
100150e2:	0028      	movs	r0, r5
100150e4:	f7ff fc96 	bl	10014a14 <_free_r>
100150e8:	2000      	movs	r0, #0
100150ea:	6360      	str	r0, [r4, #52]	; 0x34
100150ec:	e021      	b.n	10015132 <__sflush_r+0x106>
100150ee:	690f      	ldr	r7, [r1, #16]
100150f0:	2f00      	cmp	r7, #0
100150f2:	d0c1      	beq.n	10015078 <__sflush_r+0x4c>
100150f4:	680b      	ldr	r3, [r1, #0]
100150f6:	600f      	str	r7, [r1, #0]
100150f8:	1bdb      	subs	r3, r3, r7
100150fa:	9301      	str	r3, [sp, #4]
100150fc:	2300      	movs	r3, #0
100150fe:	0792      	lsls	r2, r2, #30
10015100:	d100      	bne.n	10015104 <__sflush_r+0xd8>
10015102:	694b      	ldr	r3, [r1, #20]
10015104:	60a3      	str	r3, [r4, #8]
10015106:	e003      	b.n	10015110 <__sflush_r+0xe4>
10015108:	9b01      	ldr	r3, [sp, #4]
1001510a:	183f      	adds	r7, r7, r0
1001510c:	1a1b      	subs	r3, r3, r0
1001510e:	9301      	str	r3, [sp, #4]
10015110:	9b01      	ldr	r3, [sp, #4]
10015112:	2b00      	cmp	r3, #0
10015114:	ddb0      	ble.n	10015078 <__sflush_r+0x4c>
10015116:	9b01      	ldr	r3, [sp, #4]
10015118:	003a      	movs	r2, r7
1001511a:	6a21      	ldr	r1, [r4, #32]
1001511c:	0028      	movs	r0, r5
1001511e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015120:	47b0      	blx	r6
10015122:	2800      	cmp	r0, #0
10015124:	dcf0      	bgt.n	10015108 <__sflush_r+0xdc>
10015126:	89a3      	ldrh	r3, [r4, #12]
10015128:	2240      	movs	r2, #64	; 0x40
1001512a:	2001      	movs	r0, #1
1001512c:	4313      	orrs	r3, r2
1001512e:	81a3      	strh	r3, [r4, #12]
10015130:	4240      	negs	r0, r0
10015132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015134:	20400001 	.word	0x20400001

10015138 <_fflush_r>:
10015138:	690b      	ldr	r3, [r1, #16]
1001513a:	b570      	push	{r4, r5, r6, lr}
1001513c:	0005      	movs	r5, r0
1001513e:	000c      	movs	r4, r1
10015140:	2b00      	cmp	r3, #0
10015142:	d101      	bne.n	10015148 <_fflush_r+0x10>
10015144:	2000      	movs	r0, #0
10015146:	e01c      	b.n	10015182 <_fflush_r+0x4a>
10015148:	2800      	cmp	r0, #0
1001514a:	d004      	beq.n	10015156 <_fflush_r+0x1e>
1001514c:	6983      	ldr	r3, [r0, #24]
1001514e:	2b00      	cmp	r3, #0
10015150:	d101      	bne.n	10015156 <_fflush_r+0x1e>
10015152:	f000 f85f 	bl	10015214 <__sinit>
10015156:	4b0b      	ldr	r3, [pc, #44]	; (10015184 <_fflush_r+0x4c>)
10015158:	429c      	cmp	r4, r3
1001515a:	d101      	bne.n	10015160 <_fflush_r+0x28>
1001515c:	686c      	ldr	r4, [r5, #4]
1001515e:	e008      	b.n	10015172 <_fflush_r+0x3a>
10015160:	4b09      	ldr	r3, [pc, #36]	; (10015188 <_fflush_r+0x50>)
10015162:	429c      	cmp	r4, r3
10015164:	d101      	bne.n	1001516a <_fflush_r+0x32>
10015166:	68ac      	ldr	r4, [r5, #8]
10015168:	e003      	b.n	10015172 <_fflush_r+0x3a>
1001516a:	4b08      	ldr	r3, [pc, #32]	; (1001518c <_fflush_r+0x54>)
1001516c:	429c      	cmp	r4, r3
1001516e:	d100      	bne.n	10015172 <_fflush_r+0x3a>
10015170:	68ec      	ldr	r4, [r5, #12]
10015172:	220c      	movs	r2, #12
10015174:	5ea3      	ldrsh	r3, [r4, r2]
10015176:	2b00      	cmp	r3, #0
10015178:	d0e4      	beq.n	10015144 <_fflush_r+0xc>
1001517a:	0021      	movs	r1, r4
1001517c:	0028      	movs	r0, r5
1001517e:	f7ff ff55 	bl	1001502c <__sflush_r>
10015182:	bd70      	pop	{r4, r5, r6, pc}
10015184:	10017d14 	.word	0x10017d14
10015188:	10017d34 	.word	0x10017d34
1001518c:	10017d54 	.word	0x10017d54

10015190 <_cleanup_r>:
10015190:	b510      	push	{r4, lr}
10015192:	4902      	ldr	r1, [pc, #8]	; (1001519c <_cleanup_r+0xc>)
10015194:	f000 f8b0 	bl	100152f8 <_fwalk_reent>
10015198:	bd10      	pop	{r4, pc}
1001519a:	46c0      	nop			; (mov r8, r8)
1001519c:	10015139 	.word	0x10015139

100151a0 <std.isra.0>:
100151a0:	2300      	movs	r3, #0
100151a2:	b510      	push	{r4, lr}
100151a4:	0004      	movs	r4, r0
100151a6:	6003      	str	r3, [r0, #0]
100151a8:	6043      	str	r3, [r0, #4]
100151aa:	6083      	str	r3, [r0, #8]
100151ac:	8181      	strh	r1, [r0, #12]
100151ae:	6643      	str	r3, [r0, #100]	; 0x64
100151b0:	81c2      	strh	r2, [r0, #14]
100151b2:	6103      	str	r3, [r0, #16]
100151b4:	6143      	str	r3, [r0, #20]
100151b6:	6183      	str	r3, [r0, #24]
100151b8:	0019      	movs	r1, r3
100151ba:	2208      	movs	r2, #8
100151bc:	305c      	adds	r0, #92	; 0x5c
100151be:	f7ff fc21 	bl	10014a04 <memset>
100151c2:	4b05      	ldr	r3, [pc, #20]	; (100151d8 <std.isra.0+0x38>)
100151c4:	6224      	str	r4, [r4, #32]
100151c6:	6263      	str	r3, [r4, #36]	; 0x24
100151c8:	4b04      	ldr	r3, [pc, #16]	; (100151dc <std.isra.0+0x3c>)
100151ca:	62a3      	str	r3, [r4, #40]	; 0x28
100151cc:	4b04      	ldr	r3, [pc, #16]	; (100151e0 <std.isra.0+0x40>)
100151ce:	62e3      	str	r3, [r4, #44]	; 0x2c
100151d0:	4b04      	ldr	r3, [pc, #16]	; (100151e4 <std.isra.0+0x44>)
100151d2:	6323      	str	r3, [r4, #48]	; 0x30
100151d4:	bd10      	pop	{r4, pc}
100151d6:	46c0      	nop			; (mov r8, r8)
100151d8:	10015a19 	.word	0x10015a19
100151dc:	10015a41 	.word	0x10015a41
100151e0:	10015a79 	.word	0x10015a79
100151e4:	10015aa5 	.word	0x10015aa5

100151e8 <__sfmoreglue>:
100151e8:	b570      	push	{r4, r5, r6, lr}
100151ea:	2568      	movs	r5, #104	; 0x68
100151ec:	1e4b      	subs	r3, r1, #1
100151ee:	435d      	muls	r5, r3
100151f0:	000e      	movs	r6, r1
100151f2:	0029      	movs	r1, r5
100151f4:	3174      	adds	r1, #116	; 0x74
100151f6:	f7ff fc53 	bl	10014aa0 <_malloc_r>
100151fa:	1e04      	subs	r4, r0, #0
100151fc:	d008      	beq.n	10015210 <__sfmoreglue+0x28>
100151fe:	2100      	movs	r1, #0
10015200:	002a      	movs	r2, r5
10015202:	6001      	str	r1, [r0, #0]
10015204:	6046      	str	r6, [r0, #4]
10015206:	300c      	adds	r0, #12
10015208:	60a0      	str	r0, [r4, #8]
1001520a:	3268      	adds	r2, #104	; 0x68
1001520c:	f7ff fbfa 	bl	10014a04 <memset>
10015210:	0020      	movs	r0, r4
10015212:	bd70      	pop	{r4, r5, r6, pc}

10015214 <__sinit>:
10015214:	6983      	ldr	r3, [r0, #24]
10015216:	b513      	push	{r0, r1, r4, lr}
10015218:	0004      	movs	r4, r0
1001521a:	2b00      	cmp	r3, #0
1001521c:	d128      	bne.n	10015270 <__sinit+0x5c>
1001521e:	6483      	str	r3, [r0, #72]	; 0x48
10015220:	64c3      	str	r3, [r0, #76]	; 0x4c
10015222:	6503      	str	r3, [r0, #80]	; 0x50
10015224:	4b13      	ldr	r3, [pc, #76]	; (10015274 <__sinit+0x60>)
10015226:	4a14      	ldr	r2, [pc, #80]	; (10015278 <__sinit+0x64>)
10015228:	681b      	ldr	r3, [r3, #0]
1001522a:	6282      	str	r2, [r0, #40]	; 0x28
1001522c:	9301      	str	r3, [sp, #4]
1001522e:	4298      	cmp	r0, r3
10015230:	d101      	bne.n	10015236 <__sinit+0x22>
10015232:	2301      	movs	r3, #1
10015234:	6183      	str	r3, [r0, #24]
10015236:	0020      	movs	r0, r4
10015238:	f000 f820 	bl	1001527c <__sfp>
1001523c:	6060      	str	r0, [r4, #4]
1001523e:	0020      	movs	r0, r4
10015240:	f000 f81c 	bl	1001527c <__sfp>
10015244:	60a0      	str	r0, [r4, #8]
10015246:	0020      	movs	r0, r4
10015248:	f000 f818 	bl	1001527c <__sfp>
1001524c:	2200      	movs	r2, #0
1001524e:	60e0      	str	r0, [r4, #12]
10015250:	2104      	movs	r1, #4
10015252:	6860      	ldr	r0, [r4, #4]
10015254:	f7ff ffa4 	bl	100151a0 <std.isra.0>
10015258:	2201      	movs	r2, #1
1001525a:	2109      	movs	r1, #9
1001525c:	68a0      	ldr	r0, [r4, #8]
1001525e:	f7ff ff9f 	bl	100151a0 <std.isra.0>
10015262:	2202      	movs	r2, #2
10015264:	2112      	movs	r1, #18
10015266:	68e0      	ldr	r0, [r4, #12]
10015268:	f7ff ff9a 	bl	100151a0 <std.isra.0>
1001526c:	2301      	movs	r3, #1
1001526e:	61a3      	str	r3, [r4, #24]
10015270:	bd13      	pop	{r0, r1, r4, pc}
10015272:	46c0      	nop			; (mov r8, r8)
10015274:	10017d10 	.word	0x10017d10
10015278:	10015191 	.word	0x10015191

1001527c <__sfp>:
1001527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001527e:	4b1d      	ldr	r3, [pc, #116]	; (100152f4 <__sfp+0x78>)
10015280:	0006      	movs	r6, r0
10015282:	681d      	ldr	r5, [r3, #0]
10015284:	69ab      	ldr	r3, [r5, #24]
10015286:	2b00      	cmp	r3, #0
10015288:	d102      	bne.n	10015290 <__sfp+0x14>
1001528a:	0028      	movs	r0, r5
1001528c:	f7ff ffc2 	bl	10015214 <__sinit>
10015290:	3548      	adds	r5, #72	; 0x48
10015292:	68ac      	ldr	r4, [r5, #8]
10015294:	686b      	ldr	r3, [r5, #4]
10015296:	3b01      	subs	r3, #1
10015298:	d405      	bmi.n	100152a6 <__sfp+0x2a>
1001529a:	220c      	movs	r2, #12
1001529c:	5ea7      	ldrsh	r7, [r4, r2]
1001529e:	2f00      	cmp	r7, #0
100152a0:	d010      	beq.n	100152c4 <__sfp+0x48>
100152a2:	3468      	adds	r4, #104	; 0x68
100152a4:	e7f7      	b.n	10015296 <__sfp+0x1a>
100152a6:	682b      	ldr	r3, [r5, #0]
100152a8:	2b00      	cmp	r3, #0
100152aa:	d001      	beq.n	100152b0 <__sfp+0x34>
100152ac:	682d      	ldr	r5, [r5, #0]
100152ae:	e7f0      	b.n	10015292 <__sfp+0x16>
100152b0:	2104      	movs	r1, #4
100152b2:	0030      	movs	r0, r6
100152b4:	f7ff ff98 	bl	100151e8 <__sfmoreglue>
100152b8:	6028      	str	r0, [r5, #0]
100152ba:	2800      	cmp	r0, #0
100152bc:	d1f6      	bne.n	100152ac <__sfp+0x30>
100152be:	230c      	movs	r3, #12
100152c0:	6033      	str	r3, [r6, #0]
100152c2:	e016      	b.n	100152f2 <__sfp+0x76>
100152c4:	2301      	movs	r3, #1
100152c6:	0020      	movs	r0, r4
100152c8:	425b      	negs	r3, r3
100152ca:	81e3      	strh	r3, [r4, #14]
100152cc:	3302      	adds	r3, #2
100152ce:	81a3      	strh	r3, [r4, #12]
100152d0:	6667      	str	r7, [r4, #100]	; 0x64
100152d2:	6027      	str	r7, [r4, #0]
100152d4:	60a7      	str	r7, [r4, #8]
100152d6:	6067      	str	r7, [r4, #4]
100152d8:	6127      	str	r7, [r4, #16]
100152da:	6167      	str	r7, [r4, #20]
100152dc:	61a7      	str	r7, [r4, #24]
100152de:	305c      	adds	r0, #92	; 0x5c
100152e0:	2208      	movs	r2, #8
100152e2:	0039      	movs	r1, r7
100152e4:	f7ff fb8e 	bl	10014a04 <memset>
100152e8:	0020      	movs	r0, r4
100152ea:	6367      	str	r7, [r4, #52]	; 0x34
100152ec:	63a7      	str	r7, [r4, #56]	; 0x38
100152ee:	64a7      	str	r7, [r4, #72]	; 0x48
100152f0:	64e7      	str	r7, [r4, #76]	; 0x4c
100152f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100152f4:	10017d10 	.word	0x10017d10

100152f8 <_fwalk_reent>:
100152f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100152fa:	0004      	movs	r4, r0
100152fc:	0007      	movs	r7, r0
100152fe:	2600      	movs	r6, #0
10015300:	9101      	str	r1, [sp, #4]
10015302:	3448      	adds	r4, #72	; 0x48
10015304:	2c00      	cmp	r4, #0
10015306:	d016      	beq.n	10015336 <_fwalk_reent+0x3e>
10015308:	6863      	ldr	r3, [r4, #4]
1001530a:	68a5      	ldr	r5, [r4, #8]
1001530c:	9300      	str	r3, [sp, #0]
1001530e:	9b00      	ldr	r3, [sp, #0]
10015310:	3b01      	subs	r3, #1
10015312:	9300      	str	r3, [sp, #0]
10015314:	d40d      	bmi.n	10015332 <_fwalk_reent+0x3a>
10015316:	89ab      	ldrh	r3, [r5, #12]
10015318:	2b01      	cmp	r3, #1
1001531a:	d908      	bls.n	1001532e <_fwalk_reent+0x36>
1001531c:	220e      	movs	r2, #14
1001531e:	5eab      	ldrsh	r3, [r5, r2]
10015320:	3301      	adds	r3, #1
10015322:	d004      	beq.n	1001532e <_fwalk_reent+0x36>
10015324:	0029      	movs	r1, r5
10015326:	0038      	movs	r0, r7
10015328:	9b01      	ldr	r3, [sp, #4]
1001532a:	4798      	blx	r3
1001532c:	4306      	orrs	r6, r0
1001532e:	3568      	adds	r5, #104	; 0x68
10015330:	e7ed      	b.n	1001530e <_fwalk_reent+0x16>
10015332:	6824      	ldr	r4, [r4, #0]
10015334:	e7e6      	b.n	10015304 <_fwalk_reent+0xc>
10015336:	0030      	movs	r0, r6
10015338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1001533c <__swhatbuf_r>:
1001533c:	b570      	push	{r4, r5, r6, lr}
1001533e:	000e      	movs	r6, r1
10015340:	001d      	movs	r5, r3
10015342:	230e      	movs	r3, #14
10015344:	5ec9      	ldrsh	r1, [r1, r3]
10015346:	b090      	sub	sp, #64	; 0x40
10015348:	0014      	movs	r4, r2
1001534a:	2900      	cmp	r1, #0
1001534c:	da06      	bge.n	1001535c <__swhatbuf_r+0x20>
1001534e:	2300      	movs	r3, #0
10015350:	602b      	str	r3, [r5, #0]
10015352:	89b3      	ldrh	r3, [r6, #12]
10015354:	061b      	lsls	r3, r3, #24
10015356:	d50f      	bpl.n	10015378 <__swhatbuf_r+0x3c>
10015358:	2340      	movs	r3, #64	; 0x40
1001535a:	e00f      	b.n	1001537c <__swhatbuf_r+0x40>
1001535c:	aa01      	add	r2, sp, #4
1001535e:	f000 fbcd 	bl	10015afc <_fstat_r>
10015362:	2800      	cmp	r0, #0
10015364:	dbf3      	blt.n	1001534e <__swhatbuf_r+0x12>
10015366:	23f0      	movs	r3, #240	; 0xf0
10015368:	9a02      	ldr	r2, [sp, #8]
1001536a:	021b      	lsls	r3, r3, #8
1001536c:	4013      	ands	r3, r2
1001536e:	4a05      	ldr	r2, [pc, #20]	; (10015384 <__swhatbuf_r+0x48>)
10015370:	189b      	adds	r3, r3, r2
10015372:	425a      	negs	r2, r3
10015374:	4153      	adcs	r3, r2
10015376:	602b      	str	r3, [r5, #0]
10015378:	2380      	movs	r3, #128	; 0x80
1001537a:	00db      	lsls	r3, r3, #3
1001537c:	2000      	movs	r0, #0
1001537e:	6023      	str	r3, [r4, #0]
10015380:	b010      	add	sp, #64	; 0x40
10015382:	bd70      	pop	{r4, r5, r6, pc}
10015384:	ffffe000 	.word	0xffffe000

10015388 <__smakebuf_r>:
10015388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001538a:	2602      	movs	r6, #2
1001538c:	898b      	ldrh	r3, [r1, #12]
1001538e:	0005      	movs	r5, r0
10015390:	000c      	movs	r4, r1
10015392:	4233      	tst	r3, r6
10015394:	d110      	bne.n	100153b8 <__smakebuf_r+0x30>
10015396:	ab01      	add	r3, sp, #4
10015398:	466a      	mov	r2, sp
1001539a:	f7ff ffcf 	bl	1001533c <__swhatbuf_r>
1001539e:	9900      	ldr	r1, [sp, #0]
100153a0:	0007      	movs	r7, r0
100153a2:	0028      	movs	r0, r5
100153a4:	f7ff fb7c 	bl	10014aa0 <_malloc_r>
100153a8:	2800      	cmp	r0, #0
100153aa:	d10c      	bne.n	100153c6 <__smakebuf_r+0x3e>
100153ac:	220c      	movs	r2, #12
100153ae:	5ea3      	ldrsh	r3, [r4, r2]
100153b0:	059a      	lsls	r2, r3, #22
100153b2:	d423      	bmi.n	100153fc <__smakebuf_r+0x74>
100153b4:	4333      	orrs	r3, r6
100153b6:	81a3      	strh	r3, [r4, #12]
100153b8:	0023      	movs	r3, r4
100153ba:	3347      	adds	r3, #71	; 0x47
100153bc:	6023      	str	r3, [r4, #0]
100153be:	6123      	str	r3, [r4, #16]
100153c0:	2301      	movs	r3, #1
100153c2:	6163      	str	r3, [r4, #20]
100153c4:	e01a      	b.n	100153fc <__smakebuf_r+0x74>
100153c6:	2280      	movs	r2, #128	; 0x80
100153c8:	4b0d      	ldr	r3, [pc, #52]	; (10015400 <__smakebuf_r+0x78>)
100153ca:	62ab      	str	r3, [r5, #40]	; 0x28
100153cc:	89a3      	ldrh	r3, [r4, #12]
100153ce:	6020      	str	r0, [r4, #0]
100153d0:	4313      	orrs	r3, r2
100153d2:	81a3      	strh	r3, [r4, #12]
100153d4:	9b00      	ldr	r3, [sp, #0]
100153d6:	6120      	str	r0, [r4, #16]
100153d8:	6163      	str	r3, [r4, #20]
100153da:	9b01      	ldr	r3, [sp, #4]
100153dc:	2b00      	cmp	r3, #0
100153de:	d00a      	beq.n	100153f6 <__smakebuf_r+0x6e>
100153e0:	230e      	movs	r3, #14
100153e2:	5ee1      	ldrsh	r1, [r4, r3]
100153e4:	0028      	movs	r0, r5
100153e6:	f000 fb9b 	bl	10015b20 <_isatty_r>
100153ea:	2800      	cmp	r0, #0
100153ec:	d003      	beq.n	100153f6 <__smakebuf_r+0x6e>
100153ee:	2201      	movs	r2, #1
100153f0:	89a3      	ldrh	r3, [r4, #12]
100153f2:	4313      	orrs	r3, r2
100153f4:	81a3      	strh	r3, [r4, #12]
100153f6:	89a3      	ldrh	r3, [r4, #12]
100153f8:	431f      	orrs	r7, r3
100153fa:	81a7      	strh	r7, [r4, #12]
100153fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100153fe:	46c0      	nop			; (mov r8, r8)
10015400:	10015191 	.word	0x10015191

10015404 <__sfputc_r>:
10015404:	6893      	ldr	r3, [r2, #8]
10015406:	b510      	push	{r4, lr}
10015408:	3b01      	subs	r3, #1
1001540a:	6093      	str	r3, [r2, #8]
1001540c:	2b00      	cmp	r3, #0
1001540e:	da05      	bge.n	1001541c <__sfputc_r+0x18>
10015410:	6994      	ldr	r4, [r2, #24]
10015412:	42a3      	cmp	r3, r4
10015414:	db08      	blt.n	10015428 <__sfputc_r+0x24>
10015416:	b2cb      	uxtb	r3, r1
10015418:	2b0a      	cmp	r3, #10
1001541a:	d005      	beq.n	10015428 <__sfputc_r+0x24>
1001541c:	6813      	ldr	r3, [r2, #0]
1001541e:	1c58      	adds	r0, r3, #1
10015420:	6010      	str	r0, [r2, #0]
10015422:	7019      	strb	r1, [r3, #0]
10015424:	b2c8      	uxtb	r0, r1
10015426:	e001      	b.n	1001542c <__sfputc_r+0x28>
10015428:	f7ff fd32 	bl	10014e90 <__swbuf_r>
1001542c:	bd10      	pop	{r4, pc}

1001542e <__sfputs_r>:
1001542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015430:	0006      	movs	r6, r0
10015432:	000f      	movs	r7, r1
10015434:	0014      	movs	r4, r2
10015436:	18d5      	adds	r5, r2, r3
10015438:	42ac      	cmp	r4, r5
1001543a:	d008      	beq.n	1001544e <__sfputs_r+0x20>
1001543c:	7821      	ldrb	r1, [r4, #0]
1001543e:	003a      	movs	r2, r7
10015440:	0030      	movs	r0, r6
10015442:	f7ff ffdf 	bl	10015404 <__sfputc_r>
10015446:	3401      	adds	r4, #1
10015448:	1c43      	adds	r3, r0, #1
1001544a:	d1f5      	bne.n	10015438 <__sfputs_r+0xa>
1001544c:	e000      	b.n	10015450 <__sfputs_r+0x22>
1001544e:	2000      	movs	r0, #0
10015450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015454 <_vfiprintf_r>:
10015454:	b5f0      	push	{r4, r5, r6, r7, lr}
10015456:	b09f      	sub	sp, #124	; 0x7c
10015458:	0006      	movs	r6, r0
1001545a:	000f      	movs	r7, r1
1001545c:	9202      	str	r2, [sp, #8]
1001545e:	9305      	str	r3, [sp, #20]
10015460:	2800      	cmp	r0, #0
10015462:	d004      	beq.n	1001546e <_vfiprintf_r+0x1a>
10015464:	6983      	ldr	r3, [r0, #24]
10015466:	2b00      	cmp	r3, #0
10015468:	d101      	bne.n	1001546e <_vfiprintf_r+0x1a>
1001546a:	f7ff fed3 	bl	10015214 <__sinit>
1001546e:	4b7f      	ldr	r3, [pc, #508]	; (1001566c <_vfiprintf_r+0x218>)
10015470:	429f      	cmp	r7, r3
10015472:	d101      	bne.n	10015478 <_vfiprintf_r+0x24>
10015474:	6877      	ldr	r7, [r6, #4]
10015476:	e008      	b.n	1001548a <_vfiprintf_r+0x36>
10015478:	4b7d      	ldr	r3, [pc, #500]	; (10015670 <_vfiprintf_r+0x21c>)
1001547a:	429f      	cmp	r7, r3
1001547c:	d101      	bne.n	10015482 <_vfiprintf_r+0x2e>
1001547e:	68b7      	ldr	r7, [r6, #8]
10015480:	e003      	b.n	1001548a <_vfiprintf_r+0x36>
10015482:	4b7c      	ldr	r3, [pc, #496]	; (10015674 <_vfiprintf_r+0x220>)
10015484:	429f      	cmp	r7, r3
10015486:	d100      	bne.n	1001548a <_vfiprintf_r+0x36>
10015488:	68f7      	ldr	r7, [r6, #12]
1001548a:	89bb      	ldrh	r3, [r7, #12]
1001548c:	071b      	lsls	r3, r3, #28
1001548e:	d50a      	bpl.n	100154a6 <_vfiprintf_r+0x52>
10015490:	693b      	ldr	r3, [r7, #16]
10015492:	2b00      	cmp	r3, #0
10015494:	d007      	beq.n	100154a6 <_vfiprintf_r+0x52>
10015496:	2300      	movs	r3, #0
10015498:	ad06      	add	r5, sp, #24
1001549a:	616b      	str	r3, [r5, #20]
1001549c:	3320      	adds	r3, #32
1001549e:	766b      	strb	r3, [r5, #25]
100154a0:	3310      	adds	r3, #16
100154a2:	76ab      	strb	r3, [r5, #26]
100154a4:	e03d      	b.n	10015522 <_vfiprintf_r+0xce>
100154a6:	0039      	movs	r1, r7
100154a8:	0030      	movs	r0, r6
100154aa:	f7ff fd49 	bl	10014f40 <__swsetup_r>
100154ae:	2800      	cmp	r0, #0
100154b0:	d0f1      	beq.n	10015496 <_vfiprintf_r+0x42>
100154b2:	2001      	movs	r0, #1
100154b4:	4240      	negs	r0, r0
100154b6:	e0d6      	b.n	10015666 <_vfiprintf_r+0x212>
100154b8:	9a05      	ldr	r2, [sp, #20]
100154ba:	1d11      	adds	r1, r2, #4
100154bc:	6812      	ldr	r2, [r2, #0]
100154be:	9105      	str	r1, [sp, #20]
100154c0:	2a00      	cmp	r2, #0
100154c2:	da00      	bge.n	100154c6 <_vfiprintf_r+0x72>
100154c4:	e07f      	b.n	100155c6 <_vfiprintf_r+0x172>
100154c6:	9209      	str	r2, [sp, #36]	; 0x24
100154c8:	3401      	adds	r4, #1
100154ca:	7823      	ldrb	r3, [r4, #0]
100154cc:	2b2e      	cmp	r3, #46	; 0x2e
100154ce:	d100      	bne.n	100154d2 <_vfiprintf_r+0x7e>
100154d0:	e08d      	b.n	100155ee <_vfiprintf_r+0x19a>
100154d2:	7821      	ldrb	r1, [r4, #0]
100154d4:	2203      	movs	r2, #3
100154d6:	4868      	ldr	r0, [pc, #416]	; (10015678 <_vfiprintf_r+0x224>)
100154d8:	f000 fb48 	bl	10015b6c <memchr>
100154dc:	2800      	cmp	r0, #0
100154de:	d007      	beq.n	100154f0 <_vfiprintf_r+0x9c>
100154e0:	4b65      	ldr	r3, [pc, #404]	; (10015678 <_vfiprintf_r+0x224>)
100154e2:	682a      	ldr	r2, [r5, #0]
100154e4:	1ac0      	subs	r0, r0, r3
100154e6:	2340      	movs	r3, #64	; 0x40
100154e8:	4083      	lsls	r3, r0
100154ea:	4313      	orrs	r3, r2
100154ec:	602b      	str	r3, [r5, #0]
100154ee:	3401      	adds	r4, #1
100154f0:	7821      	ldrb	r1, [r4, #0]
100154f2:	1c63      	adds	r3, r4, #1
100154f4:	2206      	movs	r2, #6
100154f6:	4861      	ldr	r0, [pc, #388]	; (1001567c <_vfiprintf_r+0x228>)
100154f8:	9302      	str	r3, [sp, #8]
100154fa:	7629      	strb	r1, [r5, #24]
100154fc:	f000 fb36 	bl	10015b6c <memchr>
10015500:	2800      	cmp	r0, #0
10015502:	d100      	bne.n	10015506 <_vfiprintf_r+0xb2>
10015504:	e09d      	b.n	10015642 <_vfiprintf_r+0x1ee>
10015506:	4b5e      	ldr	r3, [pc, #376]	; (10015680 <_vfiprintf_r+0x22c>)
10015508:	2b00      	cmp	r3, #0
1001550a:	d000      	beq.n	1001550e <_vfiprintf_r+0xba>
1001550c:	e090      	b.n	10015630 <_vfiprintf_r+0x1dc>
1001550e:	2207      	movs	r2, #7
10015510:	9b05      	ldr	r3, [sp, #20]
10015512:	3307      	adds	r3, #7
10015514:	4393      	bics	r3, r2
10015516:	3308      	adds	r3, #8
10015518:	9305      	str	r3, [sp, #20]
1001551a:	696b      	ldr	r3, [r5, #20]
1001551c:	9a03      	ldr	r2, [sp, #12]
1001551e:	189b      	adds	r3, r3, r2
10015520:	616b      	str	r3, [r5, #20]
10015522:	9c02      	ldr	r4, [sp, #8]
10015524:	7823      	ldrb	r3, [r4, #0]
10015526:	2b00      	cmp	r3, #0
10015528:	d104      	bne.n	10015534 <_vfiprintf_r+0xe0>
1001552a:	9b02      	ldr	r3, [sp, #8]
1001552c:	1ae3      	subs	r3, r4, r3
1001552e:	9304      	str	r3, [sp, #16]
10015530:	d012      	beq.n	10015558 <_vfiprintf_r+0x104>
10015532:	e003      	b.n	1001553c <_vfiprintf_r+0xe8>
10015534:	2b25      	cmp	r3, #37	; 0x25
10015536:	d0f8      	beq.n	1001552a <_vfiprintf_r+0xd6>
10015538:	3401      	adds	r4, #1
1001553a:	e7f3      	b.n	10015524 <_vfiprintf_r+0xd0>
1001553c:	9b04      	ldr	r3, [sp, #16]
1001553e:	9a02      	ldr	r2, [sp, #8]
10015540:	0039      	movs	r1, r7
10015542:	0030      	movs	r0, r6
10015544:	f7ff ff73 	bl	1001542e <__sfputs_r>
10015548:	1c43      	adds	r3, r0, #1
1001554a:	d100      	bne.n	1001554e <_vfiprintf_r+0xfa>
1001554c:	e086      	b.n	1001565c <_vfiprintf_r+0x208>
1001554e:	696a      	ldr	r2, [r5, #20]
10015550:	9b04      	ldr	r3, [sp, #16]
10015552:	4694      	mov	ip, r2
10015554:	4463      	add	r3, ip
10015556:	616b      	str	r3, [r5, #20]
10015558:	7823      	ldrb	r3, [r4, #0]
1001555a:	2b00      	cmp	r3, #0
1001555c:	d07e      	beq.n	1001565c <_vfiprintf_r+0x208>
1001555e:	2201      	movs	r2, #1
10015560:	2300      	movs	r3, #0
10015562:	4252      	negs	r2, r2
10015564:	606a      	str	r2, [r5, #4]
10015566:	a902      	add	r1, sp, #8
10015568:	3254      	adds	r2, #84	; 0x54
1001556a:	1852      	adds	r2, r2, r1
1001556c:	3401      	adds	r4, #1
1001556e:	602b      	str	r3, [r5, #0]
10015570:	60eb      	str	r3, [r5, #12]
10015572:	60ab      	str	r3, [r5, #8]
10015574:	7013      	strb	r3, [r2, #0]
10015576:	65ab      	str	r3, [r5, #88]	; 0x58
10015578:	7821      	ldrb	r1, [r4, #0]
1001557a:	2205      	movs	r2, #5
1001557c:	4841      	ldr	r0, [pc, #260]	; (10015684 <_vfiprintf_r+0x230>)
1001557e:	f000 faf5 	bl	10015b6c <memchr>
10015582:	2800      	cmp	r0, #0
10015584:	d008      	beq.n	10015598 <_vfiprintf_r+0x144>
10015586:	4b3f      	ldr	r3, [pc, #252]	; (10015684 <_vfiprintf_r+0x230>)
10015588:	682a      	ldr	r2, [r5, #0]
1001558a:	1ac0      	subs	r0, r0, r3
1001558c:	2301      	movs	r3, #1
1001558e:	4083      	lsls	r3, r0
10015590:	4313      	orrs	r3, r2
10015592:	602b      	str	r3, [r5, #0]
10015594:	3401      	adds	r4, #1
10015596:	e7ef      	b.n	10015578 <_vfiprintf_r+0x124>
10015598:	682b      	ldr	r3, [r5, #0]
1001559a:	06da      	lsls	r2, r3, #27
1001559c:	d504      	bpl.n	100155a8 <_vfiprintf_r+0x154>
1001559e:	2253      	movs	r2, #83	; 0x53
100155a0:	2120      	movs	r1, #32
100155a2:	a802      	add	r0, sp, #8
100155a4:	1812      	adds	r2, r2, r0
100155a6:	7011      	strb	r1, [r2, #0]
100155a8:	071a      	lsls	r2, r3, #28
100155aa:	d504      	bpl.n	100155b6 <_vfiprintf_r+0x162>
100155ac:	2253      	movs	r2, #83	; 0x53
100155ae:	212b      	movs	r1, #43	; 0x2b
100155b0:	a802      	add	r0, sp, #8
100155b2:	1812      	adds	r2, r2, r0
100155b4:	7011      	strb	r1, [r2, #0]
100155b6:	7822      	ldrb	r2, [r4, #0]
100155b8:	2a2a      	cmp	r2, #42	; 0x2a
100155ba:	d100      	bne.n	100155be <_vfiprintf_r+0x16a>
100155bc:	e77c      	b.n	100154b8 <_vfiprintf_r+0x64>
100155be:	9b09      	ldr	r3, [sp, #36]	; 0x24
100155c0:	2000      	movs	r0, #0
100155c2:	210a      	movs	r1, #10
100155c4:	e005      	b.n	100155d2 <_vfiprintf_r+0x17e>
100155c6:	4252      	negs	r2, r2
100155c8:	60ea      	str	r2, [r5, #12]
100155ca:	2202      	movs	r2, #2
100155cc:	4313      	orrs	r3, r2
100155ce:	602b      	str	r3, [r5, #0]
100155d0:	e77a      	b.n	100154c8 <_vfiprintf_r+0x74>
100155d2:	7822      	ldrb	r2, [r4, #0]
100155d4:	3a30      	subs	r2, #48	; 0x30
100155d6:	2a09      	cmp	r2, #9
100155d8:	d804      	bhi.n	100155e4 <_vfiprintf_r+0x190>
100155da:	434b      	muls	r3, r1
100155dc:	3401      	adds	r4, #1
100155de:	189b      	adds	r3, r3, r2
100155e0:	2001      	movs	r0, #1
100155e2:	e7f6      	b.n	100155d2 <_vfiprintf_r+0x17e>
100155e4:	2800      	cmp	r0, #0
100155e6:	d100      	bne.n	100155ea <_vfiprintf_r+0x196>
100155e8:	e76f      	b.n	100154ca <_vfiprintf_r+0x76>
100155ea:	9309      	str	r3, [sp, #36]	; 0x24
100155ec:	e76d      	b.n	100154ca <_vfiprintf_r+0x76>
100155ee:	7863      	ldrb	r3, [r4, #1]
100155f0:	2b2a      	cmp	r3, #42	; 0x2a
100155f2:	d10a      	bne.n	1001560a <_vfiprintf_r+0x1b6>
100155f4:	9b05      	ldr	r3, [sp, #20]
100155f6:	3402      	adds	r4, #2
100155f8:	1d1a      	adds	r2, r3, #4
100155fa:	681b      	ldr	r3, [r3, #0]
100155fc:	9205      	str	r2, [sp, #20]
100155fe:	2b00      	cmp	r3, #0
10015600:	da01      	bge.n	10015606 <_vfiprintf_r+0x1b2>
10015602:	2301      	movs	r3, #1
10015604:	425b      	negs	r3, r3
10015606:	9307      	str	r3, [sp, #28]
10015608:	e763      	b.n	100154d2 <_vfiprintf_r+0x7e>
1001560a:	2300      	movs	r3, #0
1001560c:	200a      	movs	r0, #10
1001560e:	001a      	movs	r2, r3
10015610:	3401      	adds	r4, #1
10015612:	606b      	str	r3, [r5, #4]
10015614:	7821      	ldrb	r1, [r4, #0]
10015616:	3930      	subs	r1, #48	; 0x30
10015618:	2909      	cmp	r1, #9
1001561a:	d804      	bhi.n	10015626 <_vfiprintf_r+0x1d2>
1001561c:	4342      	muls	r2, r0
1001561e:	3401      	adds	r4, #1
10015620:	1852      	adds	r2, r2, r1
10015622:	2301      	movs	r3, #1
10015624:	e7f6      	b.n	10015614 <_vfiprintf_r+0x1c0>
10015626:	2b00      	cmp	r3, #0
10015628:	d100      	bne.n	1001562c <_vfiprintf_r+0x1d8>
1001562a:	e752      	b.n	100154d2 <_vfiprintf_r+0x7e>
1001562c:	9207      	str	r2, [sp, #28]
1001562e:	e750      	b.n	100154d2 <_vfiprintf_r+0x7e>
10015630:	ab05      	add	r3, sp, #20
10015632:	9300      	str	r3, [sp, #0]
10015634:	003a      	movs	r2, r7
10015636:	4b14      	ldr	r3, [pc, #80]	; (10015688 <_vfiprintf_r+0x234>)
10015638:	0029      	movs	r1, r5
1001563a:	0030      	movs	r0, r6
1001563c:	e000      	b.n	10015640 <_vfiprintf_r+0x1ec>
1001563e:	bf00      	nop
10015640:	e007      	b.n	10015652 <_vfiprintf_r+0x1fe>
10015642:	ab05      	add	r3, sp, #20
10015644:	9300      	str	r3, [sp, #0]
10015646:	003a      	movs	r2, r7
10015648:	4b0f      	ldr	r3, [pc, #60]	; (10015688 <_vfiprintf_r+0x234>)
1001564a:	0029      	movs	r1, r5
1001564c:	0030      	movs	r0, r6
1001564e:	f000 f88b 	bl	10015768 <_printf_i>
10015652:	9003      	str	r0, [sp, #12]
10015654:	9b03      	ldr	r3, [sp, #12]
10015656:	3301      	adds	r3, #1
10015658:	d000      	beq.n	1001565c <_vfiprintf_r+0x208>
1001565a:	e75e      	b.n	1001551a <_vfiprintf_r+0xc6>
1001565c:	89bb      	ldrh	r3, [r7, #12]
1001565e:	065b      	lsls	r3, r3, #25
10015660:	d500      	bpl.n	10015664 <_vfiprintf_r+0x210>
10015662:	e726      	b.n	100154b2 <_vfiprintf_r+0x5e>
10015664:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015666:	b01f      	add	sp, #124	; 0x7c
10015668:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001566a:	46c0      	nop			; (mov r8, r8)
1001566c:	10017d14 	.word	0x10017d14
10015670:	10017d34 	.word	0x10017d34
10015674:	10017d54 	.word	0x10017d54
10015678:	10017d7a 	.word	0x10017d7a
1001567c:	10017d7e 	.word	0x10017d7e
10015680:	00000000 	.word	0x00000000
10015684:	10017d74 	.word	0x10017d74
10015688:	1001542f 	.word	0x1001542f

1001568c <_printf_common>:
1001568c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001568e:	0017      	movs	r7, r2
10015690:	9301      	str	r3, [sp, #4]
10015692:	688a      	ldr	r2, [r1, #8]
10015694:	690b      	ldr	r3, [r1, #16]
10015696:	9000      	str	r0, [sp, #0]
10015698:	000c      	movs	r4, r1
1001569a:	4293      	cmp	r3, r2
1001569c:	da00      	bge.n	100156a0 <_printf_common+0x14>
1001569e:	0013      	movs	r3, r2
100156a0:	0022      	movs	r2, r4
100156a2:	603b      	str	r3, [r7, #0]
100156a4:	3243      	adds	r2, #67	; 0x43
100156a6:	7812      	ldrb	r2, [r2, #0]
100156a8:	2a00      	cmp	r2, #0
100156aa:	d001      	beq.n	100156b0 <_printf_common+0x24>
100156ac:	3301      	adds	r3, #1
100156ae:	603b      	str	r3, [r7, #0]
100156b0:	6823      	ldr	r3, [r4, #0]
100156b2:	069b      	lsls	r3, r3, #26
100156b4:	d502      	bpl.n	100156bc <_printf_common+0x30>
100156b6:	683b      	ldr	r3, [r7, #0]
100156b8:	3302      	adds	r3, #2
100156ba:	603b      	str	r3, [r7, #0]
100156bc:	2506      	movs	r5, #6
100156be:	6823      	ldr	r3, [r4, #0]
100156c0:	401d      	ands	r5, r3
100156c2:	d01e      	beq.n	10015702 <_printf_common+0x76>
100156c4:	0023      	movs	r3, r4
100156c6:	3343      	adds	r3, #67	; 0x43
100156c8:	781b      	ldrb	r3, [r3, #0]
100156ca:	1e5a      	subs	r2, r3, #1
100156cc:	4193      	sbcs	r3, r2
100156ce:	6822      	ldr	r2, [r4, #0]
100156d0:	0692      	lsls	r2, r2, #26
100156d2:	d51c      	bpl.n	1001570e <_printf_common+0x82>
100156d4:	2030      	movs	r0, #48	; 0x30
100156d6:	18e1      	adds	r1, r4, r3
100156d8:	3143      	adds	r1, #67	; 0x43
100156da:	7008      	strb	r0, [r1, #0]
100156dc:	0021      	movs	r1, r4
100156de:	1c5a      	adds	r2, r3, #1
100156e0:	3145      	adds	r1, #69	; 0x45
100156e2:	7809      	ldrb	r1, [r1, #0]
100156e4:	18a2      	adds	r2, r4, r2
100156e6:	3243      	adds	r2, #67	; 0x43
100156e8:	3302      	adds	r3, #2
100156ea:	7011      	strb	r1, [r2, #0]
100156ec:	e00f      	b.n	1001570e <_printf_common+0x82>
100156ee:	0022      	movs	r2, r4
100156f0:	2301      	movs	r3, #1
100156f2:	3219      	adds	r2, #25
100156f4:	9901      	ldr	r1, [sp, #4]
100156f6:	9800      	ldr	r0, [sp, #0]
100156f8:	9e08      	ldr	r6, [sp, #32]
100156fa:	47b0      	blx	r6
100156fc:	1c43      	adds	r3, r0, #1
100156fe:	d00e      	beq.n	1001571e <_printf_common+0x92>
10015700:	3501      	adds	r5, #1
10015702:	68e3      	ldr	r3, [r4, #12]
10015704:	683a      	ldr	r2, [r7, #0]
10015706:	1a9b      	subs	r3, r3, r2
10015708:	429d      	cmp	r5, r3
1001570a:	dbf0      	blt.n	100156ee <_printf_common+0x62>
1001570c:	e7da      	b.n	100156c4 <_printf_common+0x38>
1001570e:	0022      	movs	r2, r4
10015710:	9901      	ldr	r1, [sp, #4]
10015712:	3243      	adds	r2, #67	; 0x43
10015714:	9800      	ldr	r0, [sp, #0]
10015716:	9d08      	ldr	r5, [sp, #32]
10015718:	47a8      	blx	r5
1001571a:	1c43      	adds	r3, r0, #1
1001571c:	d102      	bne.n	10015724 <_printf_common+0x98>
1001571e:	2001      	movs	r0, #1
10015720:	4240      	negs	r0, r0
10015722:	e020      	b.n	10015766 <_printf_common+0xda>
10015724:	2306      	movs	r3, #6
10015726:	6820      	ldr	r0, [r4, #0]
10015728:	68e1      	ldr	r1, [r4, #12]
1001572a:	683a      	ldr	r2, [r7, #0]
1001572c:	4003      	ands	r3, r0
1001572e:	2500      	movs	r5, #0
10015730:	2b04      	cmp	r3, #4
10015732:	d103      	bne.n	1001573c <_printf_common+0xb0>
10015734:	1a8d      	subs	r5, r1, r2
10015736:	43eb      	mvns	r3, r5
10015738:	17db      	asrs	r3, r3, #31
1001573a:	401d      	ands	r5, r3
1001573c:	68a3      	ldr	r3, [r4, #8]
1001573e:	6922      	ldr	r2, [r4, #16]
10015740:	4293      	cmp	r3, r2
10015742:	dd01      	ble.n	10015748 <_printf_common+0xbc>
10015744:	1a9b      	subs	r3, r3, r2
10015746:	18ed      	adds	r5, r5, r3
10015748:	2700      	movs	r7, #0
1001574a:	42bd      	cmp	r5, r7
1001574c:	d00a      	beq.n	10015764 <_printf_common+0xd8>
1001574e:	0022      	movs	r2, r4
10015750:	2301      	movs	r3, #1
10015752:	321a      	adds	r2, #26
10015754:	9901      	ldr	r1, [sp, #4]
10015756:	9800      	ldr	r0, [sp, #0]
10015758:	9e08      	ldr	r6, [sp, #32]
1001575a:	47b0      	blx	r6
1001575c:	1c43      	adds	r3, r0, #1
1001575e:	d0de      	beq.n	1001571e <_printf_common+0x92>
10015760:	3701      	adds	r7, #1
10015762:	e7f2      	b.n	1001574a <_printf_common+0xbe>
10015764:	2000      	movs	r0, #0
10015766:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015768 <_printf_i>:
10015768:	b5f0      	push	{r4, r5, r6, r7, lr}
1001576a:	b08b      	sub	sp, #44	; 0x2c
1001576c:	9206      	str	r2, [sp, #24]
1001576e:	000a      	movs	r2, r1
10015770:	3243      	adds	r2, #67	; 0x43
10015772:	9307      	str	r3, [sp, #28]
10015774:	9005      	str	r0, [sp, #20]
10015776:	9204      	str	r2, [sp, #16]
10015778:	7e0a      	ldrb	r2, [r1, #24]
1001577a:	000c      	movs	r4, r1
1001577c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001577e:	2a6e      	cmp	r2, #110	; 0x6e
10015780:	d100      	bne.n	10015784 <_printf_i+0x1c>
10015782:	e0ab      	b.n	100158dc <_printf_i+0x174>
10015784:	d811      	bhi.n	100157aa <_printf_i+0x42>
10015786:	2a63      	cmp	r2, #99	; 0x63
10015788:	d022      	beq.n	100157d0 <_printf_i+0x68>
1001578a:	d809      	bhi.n	100157a0 <_printf_i+0x38>
1001578c:	2a00      	cmp	r2, #0
1001578e:	d100      	bne.n	10015792 <_printf_i+0x2a>
10015790:	e0b5      	b.n	100158fe <_printf_i+0x196>
10015792:	2a58      	cmp	r2, #88	; 0x58
10015794:	d000      	beq.n	10015798 <_printf_i+0x30>
10015796:	e0c5      	b.n	10015924 <_printf_i+0x1bc>
10015798:	3145      	adds	r1, #69	; 0x45
1001579a:	700a      	strb	r2, [r1, #0]
1001579c:	4a81      	ldr	r2, [pc, #516]	; (100159a4 <_printf_i+0x23c>)
1001579e:	e04f      	b.n	10015840 <_printf_i+0xd8>
100157a0:	2a64      	cmp	r2, #100	; 0x64
100157a2:	d01d      	beq.n	100157e0 <_printf_i+0x78>
100157a4:	2a69      	cmp	r2, #105	; 0x69
100157a6:	d01b      	beq.n	100157e0 <_printf_i+0x78>
100157a8:	e0bc      	b.n	10015924 <_printf_i+0x1bc>
100157aa:	2a73      	cmp	r2, #115	; 0x73
100157ac:	d100      	bne.n	100157b0 <_printf_i+0x48>
100157ae:	e0aa      	b.n	10015906 <_printf_i+0x19e>
100157b0:	d809      	bhi.n	100157c6 <_printf_i+0x5e>
100157b2:	2a6f      	cmp	r2, #111	; 0x6f
100157b4:	d029      	beq.n	1001580a <_printf_i+0xa2>
100157b6:	2a70      	cmp	r2, #112	; 0x70
100157b8:	d000      	beq.n	100157bc <_printf_i+0x54>
100157ba:	e0b3      	b.n	10015924 <_printf_i+0x1bc>
100157bc:	2220      	movs	r2, #32
100157be:	6809      	ldr	r1, [r1, #0]
100157c0:	430a      	orrs	r2, r1
100157c2:	6022      	str	r2, [r4, #0]
100157c4:	e037      	b.n	10015836 <_printf_i+0xce>
100157c6:	2a75      	cmp	r2, #117	; 0x75
100157c8:	d01f      	beq.n	1001580a <_printf_i+0xa2>
100157ca:	2a78      	cmp	r2, #120	; 0x78
100157cc:	d033      	beq.n	10015836 <_printf_i+0xce>
100157ce:	e0a9      	b.n	10015924 <_printf_i+0x1bc>
100157d0:	000e      	movs	r6, r1
100157d2:	681a      	ldr	r2, [r3, #0]
100157d4:	3642      	adds	r6, #66	; 0x42
100157d6:	1d11      	adds	r1, r2, #4
100157d8:	6019      	str	r1, [r3, #0]
100157da:	6813      	ldr	r3, [r2, #0]
100157dc:	7033      	strb	r3, [r6, #0]
100157de:	e0a4      	b.n	1001592a <_printf_i+0x1c2>
100157e0:	6821      	ldr	r1, [r4, #0]
100157e2:	681a      	ldr	r2, [r3, #0]
100157e4:	0608      	lsls	r0, r1, #24
100157e6:	d406      	bmi.n	100157f6 <_printf_i+0x8e>
100157e8:	0649      	lsls	r1, r1, #25
100157ea:	d504      	bpl.n	100157f6 <_printf_i+0x8e>
100157ec:	1d11      	adds	r1, r2, #4
100157ee:	6019      	str	r1, [r3, #0]
100157f0:	2300      	movs	r3, #0
100157f2:	5ed5      	ldrsh	r5, [r2, r3]
100157f4:	e002      	b.n	100157fc <_printf_i+0x94>
100157f6:	1d11      	adds	r1, r2, #4
100157f8:	6019      	str	r1, [r3, #0]
100157fa:	6815      	ldr	r5, [r2, #0]
100157fc:	2d00      	cmp	r5, #0
100157fe:	da3b      	bge.n	10015878 <_printf_i+0x110>
10015800:	232d      	movs	r3, #45	; 0x2d
10015802:	9a04      	ldr	r2, [sp, #16]
10015804:	426d      	negs	r5, r5
10015806:	7013      	strb	r3, [r2, #0]
10015808:	e036      	b.n	10015878 <_printf_i+0x110>
1001580a:	6821      	ldr	r1, [r4, #0]
1001580c:	681a      	ldr	r2, [r3, #0]
1001580e:	0608      	lsls	r0, r1, #24
10015810:	d406      	bmi.n	10015820 <_printf_i+0xb8>
10015812:	0649      	lsls	r1, r1, #25
10015814:	d504      	bpl.n	10015820 <_printf_i+0xb8>
10015816:	6815      	ldr	r5, [r2, #0]
10015818:	1d11      	adds	r1, r2, #4
1001581a:	6019      	str	r1, [r3, #0]
1001581c:	b2ad      	uxth	r5, r5
1001581e:	e002      	b.n	10015826 <_printf_i+0xbe>
10015820:	1d11      	adds	r1, r2, #4
10015822:	6019      	str	r1, [r3, #0]
10015824:	6815      	ldr	r5, [r2, #0]
10015826:	4b5f      	ldr	r3, [pc, #380]	; (100159a4 <_printf_i+0x23c>)
10015828:	7e22      	ldrb	r2, [r4, #24]
1001582a:	9303      	str	r3, [sp, #12]
1001582c:	2708      	movs	r7, #8
1001582e:	2a6f      	cmp	r2, #111	; 0x6f
10015830:	d01d      	beq.n	1001586e <_printf_i+0x106>
10015832:	270a      	movs	r7, #10
10015834:	e01b      	b.n	1001586e <_printf_i+0x106>
10015836:	0022      	movs	r2, r4
10015838:	2178      	movs	r1, #120	; 0x78
1001583a:	3245      	adds	r2, #69	; 0x45
1001583c:	7011      	strb	r1, [r2, #0]
1001583e:	4a5a      	ldr	r2, [pc, #360]	; (100159a8 <_printf_i+0x240>)
10015840:	6819      	ldr	r1, [r3, #0]
10015842:	9203      	str	r2, [sp, #12]
10015844:	1d08      	adds	r0, r1, #4
10015846:	6822      	ldr	r2, [r4, #0]
10015848:	6018      	str	r0, [r3, #0]
1001584a:	680d      	ldr	r5, [r1, #0]
1001584c:	0610      	lsls	r0, r2, #24
1001584e:	d402      	bmi.n	10015856 <_printf_i+0xee>
10015850:	0650      	lsls	r0, r2, #25
10015852:	d500      	bpl.n	10015856 <_printf_i+0xee>
10015854:	b2ad      	uxth	r5, r5
10015856:	07d3      	lsls	r3, r2, #31
10015858:	d502      	bpl.n	10015860 <_printf_i+0xf8>
1001585a:	2320      	movs	r3, #32
1001585c:	431a      	orrs	r2, r3
1001585e:	6022      	str	r2, [r4, #0]
10015860:	2710      	movs	r7, #16
10015862:	2d00      	cmp	r5, #0
10015864:	d103      	bne.n	1001586e <_printf_i+0x106>
10015866:	2320      	movs	r3, #32
10015868:	6822      	ldr	r2, [r4, #0]
1001586a:	439a      	bics	r2, r3
1001586c:	6022      	str	r2, [r4, #0]
1001586e:	0023      	movs	r3, r4
10015870:	2200      	movs	r2, #0
10015872:	3343      	adds	r3, #67	; 0x43
10015874:	701a      	strb	r2, [r3, #0]
10015876:	e002      	b.n	1001587e <_printf_i+0x116>
10015878:	270a      	movs	r7, #10
1001587a:	4b4a      	ldr	r3, [pc, #296]	; (100159a4 <_printf_i+0x23c>)
1001587c:	9303      	str	r3, [sp, #12]
1001587e:	6863      	ldr	r3, [r4, #4]
10015880:	60a3      	str	r3, [r4, #8]
10015882:	2b00      	cmp	r3, #0
10015884:	db09      	blt.n	1001589a <_printf_i+0x132>
10015886:	2204      	movs	r2, #4
10015888:	6821      	ldr	r1, [r4, #0]
1001588a:	4391      	bics	r1, r2
1001588c:	6021      	str	r1, [r4, #0]
1001588e:	2d00      	cmp	r5, #0
10015890:	d105      	bne.n	1001589e <_printf_i+0x136>
10015892:	9e04      	ldr	r6, [sp, #16]
10015894:	2b00      	cmp	r3, #0
10015896:	d011      	beq.n	100158bc <_printf_i+0x154>
10015898:	e07b      	b.n	10015992 <_printf_i+0x22a>
1001589a:	2d00      	cmp	r5, #0
1001589c:	d079      	beq.n	10015992 <_printf_i+0x22a>
1001589e:	9e04      	ldr	r6, [sp, #16]
100158a0:	0028      	movs	r0, r5
100158a2:	0039      	movs	r1, r7
100158a4:	f7fd fa70 	bl	10012d88 <__aeabi_uidivmod>
100158a8:	9b03      	ldr	r3, [sp, #12]
100158aa:	3e01      	subs	r6, #1
100158ac:	5c5b      	ldrb	r3, [r3, r1]
100158ae:	0028      	movs	r0, r5
100158b0:	7033      	strb	r3, [r6, #0]
100158b2:	0039      	movs	r1, r7
100158b4:	f7fd f9e2 	bl	10012c7c <__aeabi_uidiv>
100158b8:	1e05      	subs	r5, r0, #0
100158ba:	d1f1      	bne.n	100158a0 <_printf_i+0x138>
100158bc:	2f08      	cmp	r7, #8
100158be:	d109      	bne.n	100158d4 <_printf_i+0x16c>
100158c0:	6823      	ldr	r3, [r4, #0]
100158c2:	07db      	lsls	r3, r3, #31
100158c4:	d506      	bpl.n	100158d4 <_printf_i+0x16c>
100158c6:	6863      	ldr	r3, [r4, #4]
100158c8:	6922      	ldr	r2, [r4, #16]
100158ca:	4293      	cmp	r3, r2
100158cc:	dc02      	bgt.n	100158d4 <_printf_i+0x16c>
100158ce:	2330      	movs	r3, #48	; 0x30
100158d0:	3e01      	subs	r6, #1
100158d2:	7033      	strb	r3, [r6, #0]
100158d4:	9b04      	ldr	r3, [sp, #16]
100158d6:	1b9b      	subs	r3, r3, r6
100158d8:	6123      	str	r3, [r4, #16]
100158da:	e02b      	b.n	10015934 <_printf_i+0x1cc>
100158dc:	6809      	ldr	r1, [r1, #0]
100158de:	681a      	ldr	r2, [r3, #0]
100158e0:	0608      	lsls	r0, r1, #24
100158e2:	d407      	bmi.n	100158f4 <_printf_i+0x18c>
100158e4:	0649      	lsls	r1, r1, #25
100158e6:	d505      	bpl.n	100158f4 <_printf_i+0x18c>
100158e8:	1d11      	adds	r1, r2, #4
100158ea:	6019      	str	r1, [r3, #0]
100158ec:	6813      	ldr	r3, [r2, #0]
100158ee:	8aa2      	ldrh	r2, [r4, #20]
100158f0:	801a      	strh	r2, [r3, #0]
100158f2:	e004      	b.n	100158fe <_printf_i+0x196>
100158f4:	1d11      	adds	r1, r2, #4
100158f6:	6019      	str	r1, [r3, #0]
100158f8:	6813      	ldr	r3, [r2, #0]
100158fa:	6962      	ldr	r2, [r4, #20]
100158fc:	601a      	str	r2, [r3, #0]
100158fe:	2300      	movs	r3, #0
10015900:	9e04      	ldr	r6, [sp, #16]
10015902:	6123      	str	r3, [r4, #16]
10015904:	e016      	b.n	10015934 <_printf_i+0x1cc>
10015906:	681a      	ldr	r2, [r3, #0]
10015908:	1d11      	adds	r1, r2, #4
1001590a:	6019      	str	r1, [r3, #0]
1001590c:	6816      	ldr	r6, [r2, #0]
1001590e:	2100      	movs	r1, #0
10015910:	6862      	ldr	r2, [r4, #4]
10015912:	0030      	movs	r0, r6
10015914:	f000 f92a 	bl	10015b6c <memchr>
10015918:	2800      	cmp	r0, #0
1001591a:	d001      	beq.n	10015920 <_printf_i+0x1b8>
1001591c:	1b80      	subs	r0, r0, r6
1001591e:	6060      	str	r0, [r4, #4]
10015920:	6863      	ldr	r3, [r4, #4]
10015922:	e003      	b.n	1001592c <_printf_i+0x1c4>
10015924:	0026      	movs	r6, r4
10015926:	3642      	adds	r6, #66	; 0x42
10015928:	7032      	strb	r2, [r6, #0]
1001592a:	2301      	movs	r3, #1
1001592c:	6123      	str	r3, [r4, #16]
1001592e:	2300      	movs	r3, #0
10015930:	9a04      	ldr	r2, [sp, #16]
10015932:	7013      	strb	r3, [r2, #0]
10015934:	9b07      	ldr	r3, [sp, #28]
10015936:	aa09      	add	r2, sp, #36	; 0x24
10015938:	9300      	str	r3, [sp, #0]
1001593a:	0021      	movs	r1, r4
1001593c:	9b06      	ldr	r3, [sp, #24]
1001593e:	9805      	ldr	r0, [sp, #20]
10015940:	f7ff fea4 	bl	1001568c <_printf_common>
10015944:	1c43      	adds	r3, r0, #1
10015946:	d102      	bne.n	1001594e <_printf_i+0x1e6>
10015948:	2001      	movs	r0, #1
1001594a:	4240      	negs	r0, r0
1001594c:	e027      	b.n	1001599e <_printf_i+0x236>
1001594e:	6923      	ldr	r3, [r4, #16]
10015950:	0032      	movs	r2, r6
10015952:	9906      	ldr	r1, [sp, #24]
10015954:	9805      	ldr	r0, [sp, #20]
10015956:	9d07      	ldr	r5, [sp, #28]
10015958:	47a8      	blx	r5
1001595a:	1c43      	adds	r3, r0, #1
1001595c:	d0f4      	beq.n	10015948 <_printf_i+0x1e0>
1001595e:	6823      	ldr	r3, [r4, #0]
10015960:	2500      	movs	r5, #0
10015962:	079b      	lsls	r3, r3, #30
10015964:	d40f      	bmi.n	10015986 <_printf_i+0x21e>
10015966:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015968:	68e0      	ldr	r0, [r4, #12]
1001596a:	4298      	cmp	r0, r3
1001596c:	da17      	bge.n	1001599e <_printf_i+0x236>
1001596e:	0018      	movs	r0, r3
10015970:	e015      	b.n	1001599e <_printf_i+0x236>
10015972:	0022      	movs	r2, r4
10015974:	2301      	movs	r3, #1
10015976:	3219      	adds	r2, #25
10015978:	9906      	ldr	r1, [sp, #24]
1001597a:	9805      	ldr	r0, [sp, #20]
1001597c:	9e07      	ldr	r6, [sp, #28]
1001597e:	47b0      	blx	r6
10015980:	1c43      	adds	r3, r0, #1
10015982:	d0e1      	beq.n	10015948 <_printf_i+0x1e0>
10015984:	3501      	adds	r5, #1
10015986:	68e3      	ldr	r3, [r4, #12]
10015988:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001598a:	1a9b      	subs	r3, r3, r2
1001598c:	429d      	cmp	r5, r3
1001598e:	dbf0      	blt.n	10015972 <_printf_i+0x20a>
10015990:	e7e9      	b.n	10015966 <_printf_i+0x1fe>
10015992:	0026      	movs	r6, r4
10015994:	9b03      	ldr	r3, [sp, #12]
10015996:	3642      	adds	r6, #66	; 0x42
10015998:	781b      	ldrb	r3, [r3, #0]
1001599a:	7033      	strb	r3, [r6, #0]
1001599c:	e78e      	b.n	100158bc <_printf_i+0x154>
1001599e:	b00b      	add	sp, #44	; 0x2c
100159a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100159a2:	46c0      	nop			; (mov r8, r8)
100159a4:	10017d85 	.word	0x10017d85
100159a8:	10017d96 	.word	0x10017d96

100159ac <_putc_r>:
100159ac:	b570      	push	{r4, r5, r6, lr}
100159ae:	0006      	movs	r6, r0
100159b0:	000d      	movs	r5, r1
100159b2:	0014      	movs	r4, r2
100159b4:	2800      	cmp	r0, #0
100159b6:	d004      	beq.n	100159c2 <_putc_r+0x16>
100159b8:	6983      	ldr	r3, [r0, #24]
100159ba:	2b00      	cmp	r3, #0
100159bc:	d101      	bne.n	100159c2 <_putc_r+0x16>
100159be:	f7ff fc29 	bl	10015214 <__sinit>
100159c2:	4b12      	ldr	r3, [pc, #72]	; (10015a0c <_putc_r+0x60>)
100159c4:	429c      	cmp	r4, r3
100159c6:	d101      	bne.n	100159cc <_putc_r+0x20>
100159c8:	6874      	ldr	r4, [r6, #4]
100159ca:	e008      	b.n	100159de <_putc_r+0x32>
100159cc:	4b10      	ldr	r3, [pc, #64]	; (10015a10 <_putc_r+0x64>)
100159ce:	429c      	cmp	r4, r3
100159d0:	d101      	bne.n	100159d6 <_putc_r+0x2a>
100159d2:	68b4      	ldr	r4, [r6, #8]
100159d4:	e003      	b.n	100159de <_putc_r+0x32>
100159d6:	4b0f      	ldr	r3, [pc, #60]	; (10015a14 <_putc_r+0x68>)
100159d8:	429c      	cmp	r4, r3
100159da:	d100      	bne.n	100159de <_putc_r+0x32>
100159dc:	68f4      	ldr	r4, [r6, #12]
100159de:	68a3      	ldr	r3, [r4, #8]
100159e0:	3b01      	subs	r3, #1
100159e2:	60a3      	str	r3, [r4, #8]
100159e4:	2b00      	cmp	r3, #0
100159e6:	da05      	bge.n	100159f4 <_putc_r+0x48>
100159e8:	69a2      	ldr	r2, [r4, #24]
100159ea:	4293      	cmp	r3, r2
100159ec:	db08      	blt.n	10015a00 <_putc_r+0x54>
100159ee:	b2eb      	uxtb	r3, r5
100159f0:	2b0a      	cmp	r3, #10
100159f2:	d005      	beq.n	10015a00 <_putc_r+0x54>
100159f4:	6823      	ldr	r3, [r4, #0]
100159f6:	b2e8      	uxtb	r0, r5
100159f8:	1c5a      	adds	r2, r3, #1
100159fa:	6022      	str	r2, [r4, #0]
100159fc:	701d      	strb	r5, [r3, #0]
100159fe:	e004      	b.n	10015a0a <_putc_r+0x5e>
10015a00:	0022      	movs	r2, r4
10015a02:	0029      	movs	r1, r5
10015a04:	0030      	movs	r0, r6
10015a06:	f7ff fa43 	bl	10014e90 <__swbuf_r>
10015a0a:	bd70      	pop	{r4, r5, r6, pc}
10015a0c:	10017d14 	.word	0x10017d14
10015a10:	10017d34 	.word	0x10017d34
10015a14:	10017d54 	.word	0x10017d54

10015a18 <__sread>:
10015a18:	b570      	push	{r4, r5, r6, lr}
10015a1a:	000c      	movs	r4, r1
10015a1c:	250e      	movs	r5, #14
10015a1e:	5f49      	ldrsh	r1, [r1, r5]
10015a20:	f000 f8b0 	bl	10015b84 <_read_r>
10015a24:	2800      	cmp	r0, #0
10015a26:	db03      	blt.n	10015a30 <__sread+0x18>
10015a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015a2a:	181b      	adds	r3, r3, r0
10015a2c:	6563      	str	r3, [r4, #84]	; 0x54
10015a2e:	e003      	b.n	10015a38 <__sread+0x20>
10015a30:	89a2      	ldrh	r2, [r4, #12]
10015a32:	4b02      	ldr	r3, [pc, #8]	; (10015a3c <__sread+0x24>)
10015a34:	4013      	ands	r3, r2
10015a36:	81a3      	strh	r3, [r4, #12]
10015a38:	bd70      	pop	{r4, r5, r6, pc}
10015a3a:	46c0      	nop			; (mov r8, r8)
10015a3c:	ffffefff 	.word	0xffffefff

10015a40 <__swrite>:
10015a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015a42:	001f      	movs	r7, r3
10015a44:	898b      	ldrh	r3, [r1, #12]
10015a46:	0005      	movs	r5, r0
10015a48:	000c      	movs	r4, r1
10015a4a:	0016      	movs	r6, r2
10015a4c:	05db      	lsls	r3, r3, #23
10015a4e:	d505      	bpl.n	10015a5c <__swrite+0x1c>
10015a50:	230e      	movs	r3, #14
10015a52:	5ec9      	ldrsh	r1, [r1, r3]
10015a54:	2200      	movs	r2, #0
10015a56:	2302      	movs	r3, #2
10015a58:	f000 f874 	bl	10015b44 <_lseek_r>
10015a5c:	89a2      	ldrh	r2, [r4, #12]
10015a5e:	4b05      	ldr	r3, [pc, #20]	; (10015a74 <__swrite+0x34>)
10015a60:	0028      	movs	r0, r5
10015a62:	4013      	ands	r3, r2
10015a64:	81a3      	strh	r3, [r4, #12]
10015a66:	0032      	movs	r2, r6
10015a68:	230e      	movs	r3, #14
10015a6a:	5ee1      	ldrsh	r1, [r4, r3]
10015a6c:	003b      	movs	r3, r7
10015a6e:	f000 f81f 	bl	10015ab0 <_write_r>
10015a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015a74:	ffffefff 	.word	0xffffefff

10015a78 <__sseek>:
10015a78:	b570      	push	{r4, r5, r6, lr}
10015a7a:	000c      	movs	r4, r1
10015a7c:	250e      	movs	r5, #14
10015a7e:	5f49      	ldrsh	r1, [r1, r5]
10015a80:	f000 f860 	bl	10015b44 <_lseek_r>
10015a84:	89a3      	ldrh	r3, [r4, #12]
10015a86:	1c42      	adds	r2, r0, #1
10015a88:	d103      	bne.n	10015a92 <__sseek+0x1a>
10015a8a:	4a05      	ldr	r2, [pc, #20]	; (10015aa0 <__sseek+0x28>)
10015a8c:	4013      	ands	r3, r2
10015a8e:	81a3      	strh	r3, [r4, #12]
10015a90:	e004      	b.n	10015a9c <__sseek+0x24>
10015a92:	2280      	movs	r2, #128	; 0x80
10015a94:	0152      	lsls	r2, r2, #5
10015a96:	4313      	orrs	r3, r2
10015a98:	81a3      	strh	r3, [r4, #12]
10015a9a:	6560      	str	r0, [r4, #84]	; 0x54
10015a9c:	bd70      	pop	{r4, r5, r6, pc}
10015a9e:	46c0      	nop			; (mov r8, r8)
10015aa0:	ffffefff 	.word	0xffffefff

10015aa4 <__sclose>:
10015aa4:	b510      	push	{r4, lr}
10015aa6:	230e      	movs	r3, #14
10015aa8:	5ec9      	ldrsh	r1, [r1, r3]
10015aaa:	f000 f815 	bl	10015ad8 <_close_r>
10015aae:	bd10      	pop	{r4, pc}

10015ab0 <_write_r>:
10015ab0:	b570      	push	{r4, r5, r6, lr}
10015ab2:	0005      	movs	r5, r0
10015ab4:	0008      	movs	r0, r1
10015ab6:	0011      	movs	r1, r2
10015ab8:	2200      	movs	r2, #0
10015aba:	4c06      	ldr	r4, [pc, #24]	; (10015ad4 <_write_r+0x24>)
10015abc:	6022      	str	r2, [r4, #0]
10015abe:	001a      	movs	r2, r3
10015ac0:	f7f7 fc74 	bl	1000d3ac <_write>
10015ac4:	1c43      	adds	r3, r0, #1
10015ac6:	d103      	bne.n	10015ad0 <_write_r+0x20>
10015ac8:	6823      	ldr	r3, [r4, #0]
10015aca:	2b00      	cmp	r3, #0
10015acc:	d000      	beq.n	10015ad0 <_write_r+0x20>
10015ace:	602b      	str	r3, [r5, #0]
10015ad0:	bd70      	pop	{r4, r5, r6, pc}
10015ad2:	46c0      	nop			; (mov r8, r8)
10015ad4:	1001ad10 	.word	0x1001ad10

10015ad8 <_close_r>:
10015ad8:	2300      	movs	r3, #0
10015ada:	b570      	push	{r4, r5, r6, lr}
10015adc:	4c06      	ldr	r4, [pc, #24]	; (10015af8 <_close_r+0x20>)
10015ade:	0005      	movs	r5, r0
10015ae0:	0008      	movs	r0, r1
10015ae2:	6023      	str	r3, [r4, #0]
10015ae4:	f7f7 fc9c 	bl	1000d420 <_close>
10015ae8:	1c43      	adds	r3, r0, #1
10015aea:	d103      	bne.n	10015af4 <_close_r+0x1c>
10015aec:	6823      	ldr	r3, [r4, #0]
10015aee:	2b00      	cmp	r3, #0
10015af0:	d000      	beq.n	10015af4 <_close_r+0x1c>
10015af2:	602b      	str	r3, [r5, #0]
10015af4:	bd70      	pop	{r4, r5, r6, pc}
10015af6:	46c0      	nop			; (mov r8, r8)
10015af8:	1001ad10 	.word	0x1001ad10

10015afc <_fstat_r>:
10015afc:	2300      	movs	r3, #0
10015afe:	b570      	push	{r4, r5, r6, lr}
10015b00:	4c06      	ldr	r4, [pc, #24]	; (10015b1c <_fstat_r+0x20>)
10015b02:	0005      	movs	r5, r0
10015b04:	0008      	movs	r0, r1
10015b06:	0011      	movs	r1, r2
10015b08:	6023      	str	r3, [r4, #0]
10015b0a:	f7f7 fc8d 	bl	1000d428 <_fstat>
10015b0e:	1c43      	adds	r3, r0, #1
10015b10:	d103      	bne.n	10015b1a <_fstat_r+0x1e>
10015b12:	6823      	ldr	r3, [r4, #0]
10015b14:	2b00      	cmp	r3, #0
10015b16:	d000      	beq.n	10015b1a <_fstat_r+0x1e>
10015b18:	602b      	str	r3, [r5, #0]
10015b1a:	bd70      	pop	{r4, r5, r6, pc}
10015b1c:	1001ad10 	.word	0x1001ad10

10015b20 <_isatty_r>:
10015b20:	2300      	movs	r3, #0
10015b22:	b570      	push	{r4, r5, r6, lr}
10015b24:	4c06      	ldr	r4, [pc, #24]	; (10015b40 <_isatty_r+0x20>)
10015b26:	0005      	movs	r5, r0
10015b28:	0008      	movs	r0, r1
10015b2a:	6023      	str	r3, [r4, #0]
10015b2c:	f7f7 fc82 	bl	1000d434 <_isatty>
10015b30:	1c43      	adds	r3, r0, #1
10015b32:	d103      	bne.n	10015b3c <_isatty_r+0x1c>
10015b34:	6823      	ldr	r3, [r4, #0]
10015b36:	2b00      	cmp	r3, #0
10015b38:	d000      	beq.n	10015b3c <_isatty_r+0x1c>
10015b3a:	602b      	str	r3, [r5, #0]
10015b3c:	bd70      	pop	{r4, r5, r6, pc}
10015b3e:	46c0      	nop			; (mov r8, r8)
10015b40:	1001ad10 	.word	0x1001ad10

10015b44 <_lseek_r>:
10015b44:	b570      	push	{r4, r5, r6, lr}
10015b46:	0005      	movs	r5, r0
10015b48:	0008      	movs	r0, r1
10015b4a:	0011      	movs	r1, r2
10015b4c:	2200      	movs	r2, #0
10015b4e:	4c06      	ldr	r4, [pc, #24]	; (10015b68 <_lseek_r+0x24>)
10015b50:	6022      	str	r2, [r4, #0]
10015b52:	001a      	movs	r2, r3
10015b54:	f7f7 fc70 	bl	1000d438 <_lseek>
10015b58:	1c43      	adds	r3, r0, #1
10015b5a:	d103      	bne.n	10015b64 <_lseek_r+0x20>
10015b5c:	6823      	ldr	r3, [r4, #0]
10015b5e:	2b00      	cmp	r3, #0
10015b60:	d000      	beq.n	10015b64 <_lseek_r+0x20>
10015b62:	602b      	str	r3, [r5, #0]
10015b64:	bd70      	pop	{r4, r5, r6, pc}
10015b66:	46c0      	nop			; (mov r8, r8)
10015b68:	1001ad10 	.word	0x1001ad10

10015b6c <memchr>:
10015b6c:	b2c9      	uxtb	r1, r1
10015b6e:	1882      	adds	r2, r0, r2
10015b70:	4290      	cmp	r0, r2
10015b72:	d004      	beq.n	10015b7e <memchr+0x12>
10015b74:	7803      	ldrb	r3, [r0, #0]
10015b76:	428b      	cmp	r3, r1
10015b78:	d002      	beq.n	10015b80 <memchr+0x14>
10015b7a:	3001      	adds	r0, #1
10015b7c:	e7f8      	b.n	10015b70 <memchr+0x4>
10015b7e:	2000      	movs	r0, #0
10015b80:	4770      	bx	lr
	...

10015b84 <_read_r>:
10015b84:	b570      	push	{r4, r5, r6, lr}
10015b86:	0005      	movs	r5, r0
10015b88:	0008      	movs	r0, r1
10015b8a:	0011      	movs	r1, r2
10015b8c:	2200      	movs	r2, #0
10015b8e:	4c06      	ldr	r4, [pc, #24]	; (10015ba8 <_read_r+0x24>)
10015b90:	6022      	str	r2, [r4, #0]
10015b92:	001a      	movs	r2, r3
10015b94:	f7f7 fbea 	bl	1000d36c <_read>
10015b98:	1c43      	adds	r3, r0, #1
10015b9a:	d103      	bne.n	10015ba4 <_read_r+0x20>
10015b9c:	6823      	ldr	r3, [r4, #0]
10015b9e:	2b00      	cmp	r3, #0
10015ba0:	d000      	beq.n	10015ba4 <_read_r+0x20>
10015ba2:	602b      	str	r3, [r5, #0]
10015ba4:	bd70      	pop	{r4, r5, r6, pc}
10015ba6:	46c0      	nop			; (mov r8, r8)
10015ba8:	1001ad10 	.word	0x1001ad10
10015bac:	6e756f63 	.word	0x6e756f63
10015bb0:	20726574 	.word	0x20726574
10015bb4:	00006425 	.word	0x00006425
10015bb8:	6f630a0d 	.word	0x6f630a0d
10015bbc:	65746e75 	.word	0x65746e75
10015bc0:	64252072 	.word	0x64252072
10015bc4:	0000      	.short	0x0000
10015bc6:	03e8      	.short	0x03e8

10015bc8 <test>:
10015bc8:	0083 0000 4000 0000 0200 0000 00c8 00c8     .....@..........
10015bd8:	0000 41a0 0000 4270 0000 3f00 6666 3e66     ...A..pB...?fff>
10015be8:	cccd 3f2c 0000 3f00 0000 3f00 000a 0000     ..,?...?...?....
10015bf8:	7453 7261 6974 676e 4220 6169 2073 6f4c     Starting Bias Lo
10015c08:	706f 5220 6165 7364 0000 0000 6153 706d     op Reads....Samp
10015c18:	656c 3a73 2520 0a64 0000 0000 6341 6563     les: %d.....Acce
10015c28:	206c 666f 7366 7465 6420 7461 2061 5748     l offset data HW
10015c38:	5453 6220 7469 253d 3a64 2520 2e37 6634     ST bit=%d: %7.4f
10015c48:	2520 2e37 6634 2520 2e37 6634 0a0d 0000      %7.4f %7.4f....
10015c58:	7947 6f72 6f20 6666 6573 2074 6164 6174     Gyro offset data
10015c68:	4820 5357 2054 6962 3d74 6425 203a 3725      HWST bit=%d: %7
10015c78:	342e 2066 3725 342e 2066 3725 342e 0d66     .4f %7.4f %7.4f.
10015c88:	000a 0000 2325 7835 203a 2325 7835 0a0d     ....%#5x: %#5x..
10015c98:	0000 0000 6f43 706d 7361 2073 6f6e 2074     ....Compass not 
10015ca8:	6f66 6e75 2e64 0000 7453 7261 6974 676e     found...Starting
10015cb8:	4d20 5550 3536 3030 4820 5357 2154 000d      MPU6500 HWST!..
10015cc8:	6552 7274 6569 6976 676e 4220 6169 6573     Retrieving Biase
10015cd8:	0d73 0000 6552 7274 6569 6976 676e 4220     s...Retrieving B
10015ce8:	6169 6573 2073 7245 6f72 2072 202d 6f70     iases Error - po
10015cf8:	7373 6269 656c 4920 4332 6520 7272 726f     ssible I2C error
10015d08:	0000 0000 6552 7274 6569 6976 676e 5320     ....Retrieving S
10015d18:	2054 6942 7361 7365 0000 0000 6552 7274     T Biases....Retr
10015d28:	6569 6976 676e 5320 2054 6942 7361 7365     ieving ST Biases
10015d38:	4520 7272 726f 2d20 7020 736f 6973 6c62      Error - possibl
10015d48:	2065 3249 2043 7265 6f72 0072 6552 6461     e I2C error.Read
10015d58:	6e69 2067 544f 2050 6552 6967 7473 7265     ing OTP Register
10015d68:	4520 7272 726f 002e 6341 6563 206c 544f      Error..Accel OT
10015d78:	3a50 6425 202c 6425 202c 6425 000a 0000     P:%d, %d, %d....
10015d88:	4341 4543 3a4c 5243 5449 5245 4149 4120     ACCEL:CRITERIA A
10015d98:	0000 0000 6942 7361 535f 6968 7466 253d     ....Bias_Shift=%
10015da8:	2e37 6634 202c 6942 7361 525f 6765 253d     7.4f, Bias_Reg=%
10015db8:	2e37 6634 202c 6942 7361 485f 5357 3d54     7.4f, Bias_HWST=
10015dc8:	3725 342e 0d66 000a 544f 2050 6176 756c     %7.4f...OTP valu
10015dd8:	3a65 2520 2e37 6634 0a0d 0000 6172 6974     e: %7.4f....rati
10015de8:	3d6f 3725 342e 2c66 7420 7268 7365 6f68     o=%7.4f, thresho
10015df8:	646c 253d 2e37 6634 0a0d 0000 4341 4543     ld=%7.4f....ACCE
10015e08:	204c 6146 6c69 4120 6978 2073 203d 6425     L Fail Axis = %d
10015e18:	000a 0000 4341 4543 3a4c 5243 5449 5245     ....ACCEL:CRITER
10015e28:	4149 4220 000d 0000 694d 206e 474d 203a     IA B....Min MG: 
10015e38:	3725 342e 0d66 000a 614d 2078 474d 203a     %7.4f...Max MG: 
10015e48:	3725 342e 0d66 000a 6942 7361 735f 6968     %7.4f...Bias_shi
10015e58:	7466 253d 2e37 6634 202c 7473 253d 2e37     ft=%7.4f, st=%7.
10015e68:	6634 202c 6572 3d67 3725 342e 0a66 0000     4f, reg=%7.4f...
10015e78:	6341 6563 206c 4146 4c49 6120 6978 3a73     Accel FAIL axis:
10015e88:	6425 3c20 203d 3232 6d35 2067 726f 3e20     %d <= 225mg or >
10015e98:	203d 3736 6d35 0a67 0000 0000 6341 6563     = 675mg.....Acce
10015ea8:	3a6c 5243 5449 5245 4149 4320 203a 6962     l:CRITERIA C: bi
10015eb8:	7361 6c20 7365 2073 6874 6e61 2520 2e37     as less than %7.
10015ec8:	6634 000a 4146 4c49 4445 203a 6341 6563     4f..FAILED: Acce
10015ed8:	206c 7861 7369 253a 2064 203d 6c25 2064     l axis:%d = %ld 
10015ee8:	203e 3035 6d30 0a67 0000 0000 6341 6563     > 500mg.....Acce
10015ef8:	206c 6553 666c 5420 7365 2074 6552 7573     l Self Test Resu
10015f08:	746c 3a73 2520 0a64 0000 0000 7947 6f72     lts: %d.....Gyro
10015f18:	4f20 5054 253a 2c64 2520 2c64 2520 0d64      OTP:%d, %d, %d.
10015f28:	000a 0000 5947 4f52 433a 4952 4554 4952     ....GYRO:CRITERI
10015f38:	2041 0041 7947 6f72 4620 6961 206c 7841     A A.Gyro Fail Ax
10015f48:	7369 3d20 2520 0a64 0000 0000 5947 4f52     is = %d.....GYRO
10015f58:	433a 4952 4554 4952 2041 0d42 0000 0000     :CRITERIA B.....
10015f68:	614d 2078 5044 3a53 2520 2e37 6634 0a0d     Max DPS: %7.4f..
10015f78:	0000 0000 5947 4f52 4620 4941 204c 7861     ....GYRO FAIL ax
10015f88:	7369 253a 2064 7267 6165 6574 2072 6874     is:%d greater th
10015f98:	6e61 3620 6430 7370 000a 0000 7947 6f72     an 60dps....Gyro
10015fa8:	433a 4952 4554 4952 2041 3a43 6220 6169     :CRITERIA C: bia
10015fb8:	2073 656c 7373 7420 6168 206e 3725 342e     s less than %7.4
10015fc8:	0a66 0000 4146 4c49 4445 203a 7947 6f72     f...FAILED: Gyro
10015fd8:	6120 6978 3a73 6425 3d20 2520 646c 3e20      axis:%d = %ld >
10015fe8:	3220 6430 7370 000a 7947 6f72 5320 6c65      20dps..Gyro Sel
10015ff8:	2066 6554 7473 5220 7365 6c75 7374 203a     f Test Results: 
10016008:	6425 000a 6f43 706d 7361 2073 6553 666c     %d..Compass Self
10016018:	5420 7365 2074 6552 7573 746c 3a73 2520      Test Results: %
10016028:	0a64 0000 7845 7469 6e69 2067 5748 5453     d...Exiting HWST
10016038:	0000 0000                                   ....

1001603c <hw>:
1001603c:	0069 0400 0080 0141 0000 0100 1333 0000     i.....A.....3...

1001604c <reg>:
1001604c:	1975 0c1a 236a 1c1b 1e1d 201f 7472 3b43     u...j#..... rtC;
1001605c:	3841 3a39 6b69 376c 776f 6d24 706e 2625     A89:ikl7ow$mnp%&
1001606c:	2827 2a29 6334 6764 0049 0000 cd4c 006c     '()*4cdgI...L.l.
1001607c:	c90c 002c 5636 0076 4626 0066 f2fe c4ab     ..,.6Vv.&Ff.....
1001608c:	f1aa dfdf afbb dfdf aab8 8db3 98b4 350d     ...............5
1001609c:	005d 0000 aab8 aaaa 88b0 c5c3 00c7 0000     ]...............
100160ac:	b1d8 f3b9 a38b b691 b409 00d9 b1da f3b9     ................
100160bc:	a38b b691 b4da 00da 735b 736d 625f 656c     ........[sms_ble
100160cc:	705f 6961 5f72 6572 7571 7365 5f74 6e66     _pair_request_fn
100160dc:	095d 6150 7269 6e69 2067 6572 7571 7365     ].Pairing reques
100160ec:	2e74 2e2e 4220 656e 2077 6425 202c 4c42     t... Bnew %d, BL
100160fc:	2045 7830 3025 7832 202c 3154 2520 2c64     E 0x%02x, T1 %d,
1001610c:	5420 2032 6425 0000 735b 736d 625f 656c      T2 %d..[sms_ble
1001611c:	705f 776f 7265 645f 776f 5d6e 0000 0000     _power_down]....
1001612c:	735b 736d 625f 656c 705f 776f 7265 645f     [sms_ble_power_d
1001613c:	776f 5d6e 5309 6f74 7070 6e69 2067 6f63     own].Stopping co
1001614c:	6d6d 6e61 2064 6572 6563 7669 6465 6420     mmand received d
1001615c:	7275 6e69 2067 6461 6576 7472 7369 6d65     uring advertisem
1001616c:	6e65 2e74 5320 6f74 7070 6e69 2e67 2e2e     ent. Stopping...
1001617c:	0020 0000 6166 6c69 6465 2121 0021 0000      ...failed!!!...
1001618c:	6f64 656e 0021 0000 735b 736d 625f 656c     done!...[sms_ble
1001619c:	705f 776f 7265 645f 776f 5d6e 0909 6544     _power_down]..De
100161ac:	6976 6563 7020 6961 6572 2e64 2e2e 6420     vice paired... d
100161bc:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
100161cc:	7470 2073 2026 7773 7469 6863 6e69 2067     pts & switching 
100161dc:	6f64 6e77 7320 6e65 6f73 7372 0000 0000     down sensors....
100161ec:	735b 736d 625f 656c 705f 776f 7265 645f     [sms_ble_power_d
100161fc:	776f 5d6e 0909 7543 7272 6e65 6c74 2079     own]..Currently 
1001620c:	6e69 6964 6163 6974 676e 0000 735b 736d     indicating..[sms
1001621c:	625f 656c 705f 776f 7265 645f 776f 5d6e     _ble_power_down]
1001622c:	0909 6544 6976 6563 6320 6e6f 656e 7463     ..Device connect
1001623c:	6465 2e2e 202e 6964 6373 6e6f 656e 7463     ed... disconnect
1001624c:	6e69 0067 735b 736d 625f 656c 615f 7664     ing.[sms_ble_adv
1001625c:	725f 7065 726f 5f74 6e66 095d 6441 6576     _report_fn].Adve
1001626c:	7472 7369 6d65 6e65 2074 6974 656d 756f     rtisement timeou
1001627c:	2e74 2e2e 0000 0000 735b 736d 625f 656c     t.......[sms_ble
1001628c:	635f 6e6f 656e 7463 6465 665f 5d6e 0909     _connected_fn]..
1001629c:	6544 6976 6563 2073 6f63 6e6e 6365 6574     Devices connecte
100162ac:	2e64 2e2e 0000 0000 735b 736d 625f 656c     d.......[sms_ble
100162bc:	705f 6961 6572 5f64 6e66 005d 735b 736d     _paired_fn].[sms
100162cc:	625f 656c 615f 7664 7265 6974 6573 095d     _ble_advertise].
100162dc:	6441 6576 7472 7369 6d65 6e65 2074 6164     Advertisement da
100162ec:	6174 7320 7465 6620 6961 656c 2164 0000     ta set failed!..
100162fc:	735b 736d 625f 656c 615f 7664 7265 6974     [sms_ble_adverti
1001630c:	6573 095d 4209 454c 5320 6174 7472 6465     se]..BLE Started
1001631c:	4120 7664 7265 6974 6573 656d 746e 0000      Advertisement..
1001632c:	735b 736d 735f 7265 6976 6563 615f 7664     [sms_service_adv
1001633c:	7265 6974 6573 095d 4c42 2045 6441 6576     ertise].BLE Adve
1001634c:	7472 7369 6d65 6e65 2074 7473 7261 2074     rtisement start 
1001635c:	6166 6c69 6465 203a 6572 7361 6e6f 3020     failed: reason 0
1001636c:	2578 0078 735b 736d 625f 656c 645f 7369     x%x.[sms_ble_dis
1001637c:	6f63 6e6e 6365 6574 5f64 6e66 095d 6550     connected_fn].Pe
1001638c:	7265 6420 7369 6f63 6e6e 6365 6574 2e64     er disconnected.
1001639c:	2e2e 4220 656e 2077 6425 202c 4c42 2045     .. Bnew %d, BLE 
100163ac:	7830 3025 7832 202c 3154 2520 2c64 5420     0x%02x, T1 %d, T
100163bc:	2032 6425 0000 0000 0a0d 6e63 3a74 2520     2 %d......cnt: %
100163cc:	0064 0000                                   d...

100163d0 <sms_ble_gap_cb>:
	...
100163dc:	9d31 1000 0000 0000 9d65 1000 9e75 1000     1.......e...u...
	...
100163f4:	9dad 1000 9b4d 1000 0000 0000 0000 0000     ....M...........
	...

1001641c <sms_ble_gatt_server_cb>:
1001641c:	9b99 1000 9bd5 1000 0000 0000 0000 0000     ................
	...
10016444:	735b 736d 625f 7475 6f74 5f6e 6f63 666e     [sms_button_conf
10016454:	6769 7275 5d65 7009 6f72 6c62 6d65 7720     igure].problem w
10016464:	6968 656c 7320 7465 6974 676e 7520 2070     hile setting up 
10016474:	7562 7474 6e6f 0030 735b 736d 625f 7475     button0.[sms_but
10016484:	6f74 5f6e 6f63 666e 6769 7275 5d65 5009     ton_configure].P
10016494:	6f72 6c62 6d65 7720 6968 656c 7320 7465     roblem while set
100164a4:	6974 676e 7520 2070 7562 7474 6e6f 0031     ting up button1.
100164b4:	735b 736d 625f 7475 6f74 5f6e 6f63 666e     [sms_button_conf
100164c4:	6769 7275 5d65 5009 6f72 6c62 6d65 7720     igure].Problem w
100164d4:	6968 656c 7320 7465 6974 676e 7520 2070     hile setting up 
100164e4:	5058 414c 4e49 4445 7520 6573 2072 7562     XPLAINED user bu
100164f4:	7474 6e6f 0000 0000 735b 736d 625f 7475     tton....[sms_but
10016504:	6f74 5f6e 6567 5f74 7473 7461 5d65 0909     ton_get_state]..
10016514:	7542 7474 6e6f 7320 6174 6574 203a 6425     Button state: %d
10016524:	2520 0064 735b 736d 625f 7475 6f74 5f6e      %d.[sms_button_
10016534:	6e66 2d5d 0030 0000 735b 736d 625f 7475     fn]-0...[sms_but
10016544:	6f74 5f6e 6e66 2d5d 0031 0000 735b 736d     ton_fn]-1...[sms
10016554:	625f 7475 6f74 5f6e 6e66 095d 5309 6174     _button_fn]..Sta
10016564:	7472 6e69 2067 6573 736e 726f 2073 4228     rting sensors (B
10016574:	2930 0000 735b 736d 625f 7475 6f74 5f6e     0)..[sms_button_
10016584:	6e66 095d 0909 6f4e 2074 7375 6465 7320     fn]...Not used s
10016594:	6174 6574 2e73 2e2e 0000 0000 735b 736d     tates.......[sms
100165a4:	625f 7475 6f74 5f6e 6e66 095d 5309 6174     _button_fn]..Sta
100165b4:	7472 6e69 2067 6573 736e 726f 2073 4228     rting sensors (B
100165c4:	2931 0000 735b 736d 625f 7475 6f74 5f6e     1)..[sms_button_
100165d4:	6e66 095d 7453 6c69 206c 6e69 6964 6163     fn].Still indica
100165e4:	6974 676e 2e2e 002e 735b 736d 625f 7475     ting....[sms_but
100165f4:	6f74 5f6e 6564 6966 656e 735f 7265 6976     ton_define_servi
10016604:	6563 5d73 5309 7265 6976 6563 2073 6564     ces].Services de
10016614:	6966 696e 676e 6620 6961 656c 2c64 7220     fining failed, r
10016624:	6165 6f73 206e 7830 7825 0000 735b 736d     eason 0x%x..[sms
10016634:	625f 7475 6f74 5f6e 6564 6966 656e 735f     _button_define_s
10016644:	7265 6976 6563 5d73 5309 7265 6976 6563     ervices].Service
10016654:	2073 6564 6966 656e 2c64 5320 534d 6220     s defined, SMS b
10016664:	7475 6f74 206e 6168 646e 656c 203a 6425     utton handle: %d
10016674:	0000 0000 7250 626f 656c 206d 6877 6c69     ....Problem whil
10016684:	2065 6573 7474 6e69 2067 7067 6f69 7020     e setting gpio p
10016694:	6e69 0000 7325 2e2e 092e 4209 702d 6572     in..%s.....B-pre
100166a4:	2076 6425 202c 2d42 7563 2072 6425 202c     v %d, B-cur %d, 
100166b4:	4c42 2045 7830 3025 7832 202c 3154 2520     BLE 0x%02x, T1 %
100166c4:	2c64 5420 2032 6425 202c 4d53 2053 6425     d, T2 %d, SMS %d
100166d4:	0000 0000 3269 2063 7277 7469 6e69 2067     ....i2c writing 
100166e4:	6f74 3020 2578 3230 2078 7461 3020 2578     to 0x%02x at 0x%
100166f4:	3230 2e78 2e2e 6420 7461 3a61 0020 0000     02x... data: ...
10016704:	7830 3025 7832 0020 3269 2063 6572 6461     0x%02x .i2c read
10016714:	6e69 2067 7266 6d6f 3020 2578 3230 2078     ing from 0x%02x 
10016724:	7461 3020 2578 3230 2e78 2e2e 6420 7461     at 0x%02x... dat
10016734:	3a61 0020 735b 736d 695f 756d 635f 6e6f     a: .[sms_imu_con
10016744:	6966 7567 6572 675f 6970 5d6f 5009 6f72     figure_gpio].Pro
10016754:	6c62 6d65 7720 6968 656c 7320 7465 6974     blem while setti
10016764:	676e 7520 2070 4d49 2055 5244 5944 7020     ng up IMU DRDY p
10016774:	6e69 0000 735b 736d 695f 756d 635f 6e6f     in..[sms_imu_con
10016784:	6966 7567 6572 675f 6970 5d6f 5009 6f72     figure_gpio].Pro
10016794:	6c62 6d65 7720 6968 656c 7320 7465 6974     blem while setti
100167a4:	676e 7520 2070 504d 2055 4356 2043 6970     ng up MPU VCC pi
100167b4:	006e 0000 6e49 7469 6169 696c 697a 676e     n...Initializing
100167c4:	4d20 5550 2e2e 002e 6620 6961 656c 2164      MPU.... failed!
100167d4:	0000 0000 6553 7474 6e69 2067 7075 4d20     ....Setting up M
100167e4:	5550 2e2e 002e 0000 735b 736d 6d5f 7570     PU......[sms_mpu
100167f4:	645f 6665 6e69 5f65 6573 7672 6369 7365     _define_services
10016804:	095d 6553 7672 6369 7365 6420 6665 6e69     ].Services defin
10016814:	6e69 2067 6166 6c69 6465 202c 6572 7361     ing failed, reas
10016824:	6e6f 3020 2578 0078 735b 736d 6d5f 7570     on 0x%x.[sms_mpu
10016834:	645f 6665 6e69 5f65 6573 7672 6369 7365     _define_services
10016844:	095d 6553 7672 6369 7365 6420 6665 6e69     ].Services defin
10016854:	6465 202c 4d53 2053 504d 2055 6168 646e     ed, SMS MPU hand
10016864:	656c 203a 6425 0000 735b 736d 6c5f 6465     le: %d..[sms_led
10016874:	675f 6970 5f6f 6e69 7469 095d 7270 626f     _gpio_init].prob
10016884:	656c 206d 6877 6c69 2065 6573 7474 6e69     lem while settin
10016894:	2067 7075 6c20 6465 0030 0000 735b 736d     g up led0...[sms
100168a4:	705f 6572 7373 7275 5f65 6f63 666e 6769     _pressure_config
100168b4:	7275 5f65 7067 6f69 095d 7270 626f 656c     ure_gpio].proble
100168c4:	206d 6877 6c69 2065 6573 7474 6e69 2067     m while setting 
100168d4:	7075 5620 6363 7020 6e69 0000 735b 736d     up Vcc pin..[sms
100168e4:	705f 6572 7373 7275 5f65 7473 7261 7574     _pressure_startu
100168f4:	5d70 0909 7453 7261 6974 676e 7020 6572     p]..Starting pre
10016904:	7373 7275 2065 6573 736e 726f 0000 0000     ssure sensor....
10016914:	735b 736d 705f 6572 7373 7275 5f65 7473     [sms_pressure_st
10016924:	7261 7574 5d70 0909 4609 6961 656c 2064     artup]...Failed 
10016934:	6f74 6920 696e 6974 6c61 7a69 2065 7270     to initialize pr
10016944:	7365 7573 6572 6420 7665 6369 0065 0000     essure device...
10016954:	735b 736d 705f 6572 7373 7275 5f65 736d     [sms_pressure_ms
10016964:	3835 635f 6c61 7563 616c 6574 205d 6574     58_calculate] te
10016974:	706d 7265 7461 7275 2065 203d 6c25 2064     mperature = %ld 
10016984:	7020 6572 7373 7275 2065 203d 6c25 0064      pressure = %ld.
10016994:	735b 736d 705f 6572 7373 7275 5f65 6f70     [sms_pressure_po
100169a4:	6c6c 645f 7461 5d61 5309 6174 7472 6e69     ll_data].Startin
100169b4:	2067 6164 6174 7020 6c6f 696c 676e 0000     g data polling..
100169c4:	735b 736d 705f 6572 7373 7275 5f65 736d     [sms_pressure_ms
100169d4:	3835 705f 6c6f 5f6c 6164 6174 205d 7270     58_poll_data] pr
100169e4:	626f 656c 206d 6572 6461 6e69 2067 736d     oblem reading ms
100169f4:	3835 6420 7461 0061 735b 736d 705f 6572     58 data.[sms_pre
10016a04:	7373 7275 5f65 6564 6966 656e 735f 7265     ssure_define_ser
10016a14:	6976 6563 5d73 5309 7265 6976 6563 2073     vices].Services 
10016a24:	6564 6966 696e 676e 6620 6961 656c 2c64     defining failed,
10016a34:	7220 6165 6f73 206e 7830 7825 0000 0000      reason 0x%x....
10016a44:	735b 736d 705f 6572 7373 7275 5f65 6564     [sms_pressure_de
10016a54:	6966 656e 735f 7265 6976 6563 5d73 5309     fine_services].S
10016a64:	7265 6976 6563 2073 6564 6966 656e 2c64     ervices defined,
10016a74:	5320 534d 7020 6572 7373 7275 2065 6168      SMS pressure ha
10016a84:	646e 656c 203a 6425 0000 0000 735b 736d     ndle: %d....[sms
10016a94:	735f 6e65 6f73 7372 735f 6977 6374 5d68     _sensors_switch]
10016aa4:	0909 4309 756f 646c 276e 2074 6e69 7469     ...Couldn't init
10016ab4:	6169 696c 657a 4d20 5550 0000 735b 736d     ialize MPU..[sms
10016ac4:	645f 6175 746c 6d69 7265 5f31 6e66 005d     _dualtimer1_fn].
10016ad4:	735b 736d 645f 6175 746c 6d69 7265 5f31     [sms_dualtimer1_
10016ae4:	6e66 095d 5309 6174 7472 6e69 2067 6573     fn]..Starting se
10016af4:	736e 726f 2073 7328 7568 7474 6e69 2067     nsors (shutting 
10016b04:	6f64 6e77 2e29 2e2e 0000 0000 735b 736d     down).......[sms
10016b14:	645f 6175 746c 6d69 7265 5f32 6e66 005d     _dualtimer2_fn].
10016b24:	2e20 2e2e 6967 6976 676e 7520 2170 0000      ...giving up!..
10016b34:	2e20 2e2e 6177 7469 6e69 2e67 2e2e 6320      ...waiting... c
10016b44:	756f 746e 7265 203a 6425 0000 735b 736d     ounter: %d..[sms
10016b54:	645f 6175 746c 6d69 7265 5f32 6e66 095d     _dualtimer2_fn].
10016b64:	4209 696c 6b6e 6e69 2067 7473 7261 7574     .Blinking startu
10016b74:	2e70 2e2e 0000 0000 735b 736d 645f 6175     p.......[sms_dua
10016b84:	746c 6d69 7265 5f32 6e66 095d 4209 696c     ltimer2_fn]..Bli
10016b94:	6b6e 6e69 2067 6873 7475 6f64 6e77 2e2e     nking shutdown..
10016ba4:	002e 0000 735b 736d 645f 6175 746c 6d69     ....[sms_dualtim
10016bb4:	7265 5f32 6e66 095d 5009 776f 7265 6e69     er2_fn]..Powerin
10016bc4:	2067 666f 2e66 2e2e 0000 0000 c38c 1000     g off...........
10016bd4:	c39a 1000 c3a8 1000 c3b6 1000 c3c4 1000     ................
10016be4:	c3d2 1000 c3e0 1000 c3f0 1000 c400 1000     ................
10016bf4:	c410 1000 c420 1000 c430 1000 c440 1000     .... ...0...@...
10016c04:	c450 1000 c460 1000 c470 1000 c480 1000     P...`...p.......
10016c14:	c490 1000 c4a0 1000 c4b0 1000 c4c0 1000     ................
10016c24:	c4d0 1000 c4e0 1000 c4f0 1000 c500 1000     ................
10016c34:	c510 1000 c520 1000 c530 1000 c53e 1000     .... ...0...>...
10016c44:	c54c 1000 c55a 1000 c568 1000 c576 1000     L...Z...h...v...
10016c54:	c584 1000 c592 1000 c5a0 1000 c5b0 1000     ................
10016c64:	c5c0 1000 c5d0 1000 c5e0 1000 c5f0 1000     ................
10016c74:	c600 1000 c610 1000 c620 1000 c630 1000     ........ ...0...
10016c84:	c640 1000 c650 1000 c660 1000 c670 1000     @...P...`...p...
10016c94:	c680 1000 c690 1000 c6a0 1000 c6ae 1000     ................
10016ca4:	c6bc 1000 c6e8 1000 c6f6 1000 c704 1000     ................
10016cb4:	c712 1000 c720 1000 c72e 1000 c73c 1000     .... .......<...
10016cc4:	c74a 1000 c758 1000 c766 1000 c774 1000     J...X...f...t...
10016cd4:	c782 1000 c790 1000 c79e 1000 c7ac 1000     ................
10016ce4:	c7ba 1000 c7c8 1000 c7d6 1000 c7e4 1000     ................
10016cf4:	c7f2 1000 c800 1000 c80e 1000 c81c 1000     ................
10016d04:	c82a 1000 c838 1000 c846 1000 c854 1000     *...8...F...T...
10016d14:	c862 1000 c870 1000 c87e 1000 c88c 1000     b...p...~.......
10016d24:	c89a 1000 c8a8 1000 c8b6 1000 c8c4 1000     ................
10016d34:	c8d2 1000 c8e0 1000 c8ee 1000 c8fc 1000     ................
10016d44:	c90a 1000 c918 1000 c926 1000 c934 1000     ........&...4...
10016d54:	c942 1000 c950 1000 c95e 1000 c96c 1000     B...P...^...l...
10016d64:	c97a 1000 c988 1000 c996 1000 c9a4 1000     z...............
10016d74:	c9b2 1000 c9c0 1000 c9ce 1000 ca68 1000     ............h...
10016d84:	ca90 1000 cab8 1000 cae0 1000 cd20 1000     ............ ...
10016d94:	cb10 1000 cb28 1000 cba0 1000 cbb8 1000     ....(...........
10016da4:	cb40 1000 cb58 1000 cb70 1000 cb88 1000     @...X...p.......
10016db4:	cbd0 1000 ce94 1000 ce94 1000 ce94 1000     ................
10016dc4:	ce94 1000 ce94 1000 ce94 1000 ce94 1000     ................
10016dd4:	ce94 1000 cc78 1000 cc90 1000 cca8 1000     ....x...........
10016de4:	cd36 1000 cc00 1000 ce94 1000 ce94 1000     6...............
10016df4:	ce94 1000 ce94 1000 ce94 1000 ce94 1000     ................
10016e04:	ccc0 1000 ccd8 1000 ccf0 1000 cd08 1000     ................
10016e14:	ce94 1000 ce4c 1000 ce64 1000 ce94 1000     ....L...d.......
10016e24:	ce94 1000 cd62 1000 cd78 1000 cd8e 1000     ....b...x.......
10016e34:	cda4 1000 ce94 1000 ce94 1000 ce94 1000     ................
10016e44:	ce94 1000 ce94 1000 ce94 1000 ce94 1000     ................
10016e54:	ce94 1000 ca54 1000 ca7c 1000 caa4 1000     ....T...|.......
10016e64:	cacc 1000 caf8 1000 cbe8 1000 cc18 1000     ................
10016e74:	cc30 1000 cc48 1000 cc60 1000 cd4c 1000     0...H...`...L...
10016e84:	cdba 1000 ce34 1000 ce7c 1000 d5b6 1000     ....4...|.......
10016e94:	d5c8 1000 d59e 1000 d59e 1000 d59e 1000     ................
10016ea4:	d5b6 1000 d59e 1000 d59e 1000 dfba 1000     ................
10016eb4:	e02e 1000 dfa2 1000 e034 1000 dfa8 1000     ........4.......
10016ec4:	dfae 1000 dfb4 1000 e714 1000 e714 1000     ................
10016ed4:	e714 1000 e714 1000 e714 1000 e714 1000     ................
10016ee4:	e714 1000 e714 1000 e714 1000 e714 1000     ................
10016ef4:	e714 1000 e714 1000 e714 1000 e714 1000     ................
10016f04:	e714 1000 e714 1000 e714 1000 e714 1000     ................
10016f14:	e714 1000 e732 1000 e732 1000 e732 1000     ....2...2...2...
10016f24:	e732 1000 e732 1000 e732 1000 e732 1000     2...2...2...2...
10016f34:	e732 1000 e732 1000 e732 1000 e754 1000     2...2...2...T...
10016f44:	e754 1000 e754 1000 e754 1000 e754 1000     T...T...T...T...
10016f54:	e754 1000 e754 1000 e754 1000 e754 1000     T...T...T...T...
10016f64:	e754 1000 e784 1000 e784 1000 e784 1000     T...............
10016f74:	e784 1000 e784 1000 e784 1000 e79e 1000     ................
10016f84:	e79e 1000 e79e 1000 e79e 1000 e79e 1000     ................
10016f94:	e79e 1000 e79e 1000 e79e 1000 e79e 1000     ................
10016fa4:	e7b8 1000 e7b8 1000 e7da 1000 e7da 1000     ................
10016fb4:	e7f4 1000 e7da 1000 3231 3433 3635 0000     ........123456..
10016fc4:	ab00 efcd cdab 00ef                         ........

10016fcc <ble_mgr_gatt_server_handle>:
	...
10016fe4:	d4b1 1000 d4d9 1000 d521 1000 0000 0000     ........!.......
10016ff4:	6e55 6564 6966 656e 2064 7645 6e65 2074     Undefined Event 
10017004:	6552 6563 7669 6465 0000 0000 6353 6e61     Received....Scan
10017014:	696e 676e 2020 6166 6c69 6465 0000 0000     ning  failed....
10017024:	6441 6576 7472 7369 6e69 2067 6166 6c69     Advertising fail
10017034:	6465 0000 4c42 2d45 544d 2055 6843 6e61     ed..BLE-MTU Chan
10017044:	6567 2c64 4320 6e6f 656e 7463 6f69 206e     ged, Connection 
10017054:	6148 646e 656c 203a 6425 202c 654e 2077     Handle: %d, New 
10017064:	6156 756c 3a65 2520 0064 0000 544d 2055     Value: %d...MTU 
10017074:	6843 6e61 6567 2c64 4320 6e6f 656e 7463     Changed, Connect
10017084:	6f69 206e 6148 646e 656c 253a 2c64 4f20     ion Handle:%d, O
10017094:	6570 6172 6974 6e6f 253a 0064 544d 2055     peration:%d.MTU 
100170a4:	6843 6e61 6567 4620 6961 656c 2c64 4320     Change Failed, C
100170b4:	6e6f 656e 7463 6f69 206e 6148 646e 656c     onnection Handle
100170c4:	253a 2c64 4f20 6570 6172 6974 6e6f 253a     :%d, Operation:%
100170d4:	0064 0000 6843 7261 5720 6972 6574 4320     d...Char Write C
100170e4:	646d 4320 6d6f 6c70 7465 2c65 4320 6e6f     md Complete, Con
100170f4:	656e 7463 6f69 206e 6148 646e 656c 253a     nection Handle:%
10017104:	2c64 4f20 6570 6172 6974 6e6f 253a 0064     d, Operation:%d.
10017114:	6843 7261 5720 6972 6574 4320 646d 4620     Char Write Cmd F
10017124:	6961 656c 2c64 4320 6e6f 656e 7463 6f69     ailed, Connectio
10017134:	206e 6148 646e 656c 253a 2c64 4f20 6570     n Handle:%d, Ope
10017144:	6172 6974 6e6f 253a 0064 0000 7453 7461     ration:%d...Stat
10017154:	2065 6f4e 2074 6148 646e 656c 2064 6425     e Not Handled %d
10017164:	0000 0000 6544 6976 6563 6420 7369 6f63     ....Device disco
10017174:	6e6e 6365 6574 2064 6552 7361 6e6f 303a     nnected Reason:0
10017184:	2578 3230 2078 6148 646e 656c 303d 2578     x%02x Handle=0x%
10017194:	0078 0000 5441 425f 454c 435f 4e4f 5f4e     x...AT_BLE_CONN_
100171a4:	4150 4152 5f4d 5055 4144 4554 0020 0000     PARAM_UPDATE ...
100171b4:	6e45 7263 7079 6974 6e6f 6620 6961 656c     Encryption faile
100171c4:	0064 0000 6e45 7263 7079 6974 6e6f 6320     d...Encryption c
100171d4:	6d6f 6c70 7465 6465 7320 6375 6563 7373     ompleted success
100171e4:	7566 6c6c 0079 0000 4c42 2045 6544 6976     fully...BLE Devi
100171f4:	6563 6e20 746f 6620 756f 646e 6520 636e     ce not found enc
10017204:	7972 7470 6f69 206e 6e69 6f66 0000 0000     ryption info....
10017214:	6e49 6f66 443a 7665 6369 2065 6f66 6e75     Info:Device foun
10017224:	2064 6461 7264 7365 2073 255b 5d64 2020     d address [%d]  
10017234:	7830 3025 5832 3025 5832 3025 5832 3025     0x%02X%02X%02X%0
10017244:	5832 3025 5832 3025 5832 0020 6e49 6f66     2X%02X%02X .Info
10017254:	6d3a 7861 6d69 6d75 6e20 2e6f 666f 7320     :maximum no.of s
10017264:	6163 206e 6564 6976 6563 7220 6165 6863     can device reach
10017274:	6465 2e2e 532e 6f74 7070 6e69 2067 6353     ed...Stopping Sc
10017284:	6e61 0000 6146 6c69 6465 7420 206f 7473     an..Failed to st
10017294:	706f 7320 6163 6e6e 6e69 0067 7830 3025     op scanning.0x%0
100172a4:	5832 202c 0000 0000 5343 4b52 203a 0000     2X, ....CSRK: ..
100172b4:	5249 3a4b 0000 0000 6150 7269 6e69 2067     IRK:....Pairing 
100172c4:	6166 6c69 6465 2e2e 442e 7369 6f63 6e6e     failed...Disconn
100172d4:	6365 6974 676e 0000 6944 6373 6e6f 656e     ecting..Disconne
100172e4:	7463 5220 7165 6575 7473 4620 6961 656c     ct Request Faile
100172f4:	0064 0000 6150 7269 6e69 2067 7270 636f     d...Pairing proc
10017304:	6465 7275 2065 6f63 706d 656c 6574 2064     edure completed 
10017314:	7573 6363 7365 6673 6c75 796c 0000 0000     successfully....
10017324:	4c42 2045 6544 6976 6563 6e20 746f 6620     BLE Device not f
10017334:	756f 646e 7420 206f 7473 726f 2065 6874     ound to store th
10017344:	2065 6170 7269 6e69 2067 6e69 6f66 0000     e pairing info..
10017354:	544c 3a4b 0020 0000 6e45 7263 7079 6974     LTK: ...Encrypti
10017364:	6e6f 4e20 746f 7320 6174 7472 6465 0000     on Not started..
10017374:	6c53 7661 2065 6553 7563 6972 7974 5220     Slave Security R
10017384:	7165 2d20 4120 7475 6568 746e 6369 7461     eq - Authenticat
10017394:	6f69 206e 6146 6c69 6465 0000 6547 656e     ion Failed..Gene
100173a4:	6172 6574 2064 544c 3a4b 0020 7830 3025     rated LTK: .0x%0
100173b4:	5832 0020 6553 646e 6e69 2067 6170 7269     2X .Sending pair
100173c4:	6e69 2067 6572 7073 6e6f 6573 0000 0000     ing response....
100173d4:	6150 7269 5220 7165 6575 7473 2d20 4120     Pair Request - A
100173e4:	7475 6568 746e 6369 7461 6f69 206e 6146     uthentication Fa
100173f4:	6c69 6465 0000 0000 6e45 6574 2072 6874     iled....Enter th
10017404:	2065 6150 7373 656b 2879 2d36 6944 6967     e Passkey(6-Digi
10017414:	2974 6920 206e 6554 6d72 6e69 6c61 003a     t) in Terminal:.
10017424:	6950 206e 6954 656d 756f 0074 6944 6373     Pin Timeout.Disc
10017434:	6e6f 656e 7463 6e69 2067 2e2e 002e 0000     onnecting ......
10017444:	6c50 6165 6573 4520 746e 7265 7420 6568     Please Enter the
10017454:	6620 6c6f 6f6c 6977 676e 5020 7361 2d73      following Pass-
10017464:	6f63 6564 6f28 206e 746f 6568 2072 6544     code(on other De
10017474:	6976 6563 3a29 0000 6150 7269 6b2d 7965     vice):..Pair-key
10017484:	7220 7065 796c 6620 6961 656c 0064 0000      reply failed...
10017494:	4f4f 2042 6546 7461 7275 2065 6f4e 2074     OOB Feature Not 
100174a4:	7573 7070 726f 6574 0064 0000 6e45 6574     supported...Ente
100174b4:	6572 2064 6150 7373 632d 646f 3a65 0000     red Pass-code:..
100174c4:	4e45 2d43 6552 3a71 4320 6e6f 206e 6148     ENC-Req: Conn Ha
100174d4:	646e 656c 4420 7665 6369 2065 6f46 6e75     ndle Device Foun
100174e4:	3a64 6468 3a6c 6425 0000 0000 6f68 7473     d:hdl:%d....host
100174f4:	6420 7665 6369 2065 6465 7669 2520 0078      device ediv %x.
10017504:	6570 7265 6420 7665 6369 2065 6465 7669     peer device ediv
10017514:	2520 0078 6e65 5f63 6572 2071 6465 7669      %x.enc_req ediv
10017524:	2520 0078 6854 2065 6e69 6564 2078 7369      %x.The index is
10017534:	2520 0064 4e45 2d43 6552 3a71 4b20 7965      %d.ENC-Req: Key
10017544:	4620 756f 646e 0000 6150 7269 6e69 2067      Found..Pairing 
10017554:	6e69 6f66 6d72 7461 6f69 206e 666f 7020     information of p
10017564:	6565 2072 6564 6976 6563 6920 2073 6f6e     eer device is no
10017574:	2074 7661 6961 616c 6c62 2e65 0000 0000     t available.....
10017584:	6c50 6165 6573 7520 706e 6961 2072 6874     Please unpair th
10017594:	2065 6564 6976 6563 6620 6f72 206d 6570     e device from pe
100175a4:	7265 6420 7665 6369 2865 6f6d 6962 656c     er device(mobile
100175b4:	2029 6573 7474 6e69 7367 6d20 6e65 2075     ) settings menu 
100175c4:	6e61 2064 7473 7261 2074 6170 7269 6e69     and start pairin
100175d4:	2067 6761 6961 006e 6e45 7263 7079 6974     g again.Encrypti
100175e4:	6e6f 5220 7165 6575 7473 5220 7065 796c     on Request Reply
100175f4:	4620 6961 656c 0064 6e45 7263 7079 6974      Failed.Encrypti
10017604:	6e6f 5220 7165 6575 7473 5220 7065 796c     on Request Reply
10017614:	0000 0000 625b 656c 695f 696e 5d74 0909     ....[ble_init]..
10017624:	4909 696e 6974 6c61 7a69 6e69 2067 4153     .Initializing SA
10017634:	424d 3131 0000 0000 625b 656c 695f 696e     MB11....[ble_ini
10017644:	5d74 0909 4153 424d 3131 4920 696e 6974     t]..SAMB11 Initi
10017654:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
10017664:	0000 0000 625b 656c 695f 696e 5d74 0909     ....[ble_init]..
10017674:	6c50 6165 6573 6320 6568 6b63 7420 6568     Please check the
10017684:	7020 776f 7265 6120 646e 6320 6e6f 656e      power and conne
10017694:	7463 6f69 206e 202f 6168 6472 6177 6572     ction / hardware
100176a4:	6320 6e6f 656e 7463 726f 0000 4153 5242      connector..SABR
100176b4:	2d65 4d53 0053 0000 6544 6976 6563 6e20     e-SMS...Device n
100176c4:	6d61 2065 6573 2074 6166 6c69 6465 0000     ame set failed..
100176d4:	625b 656c 735f 7465 645f 7665 635f 6e6f     [ble_set_dev_con
100176e4:	6966 5d67 0909 4442 6120 6464 6572 7373     fig]..BD address
100176f4:	6720 7465 6620 6961 656c 0064 625b 656c      get failed.[ble
10017704:	735f 7465 645f 7665 635f 6e6f 6966 5d67     _set_dev_config]
10017714:	0909 4442 4120 6464 6572 7373 303a 2578     ..BD Address:0x%
10017724:	3230 2558 3230 2558 3230 2558 3230 2558     02X%02X%02X%02X%
10017734:	3230 2558 3230 2c58 4120 6464 6572 7373     02X%02X, Address
10017744:	5420 7079 3a65 6425 0000 0000 625b 656c      Type:%d....[ble
10017754:	735f 7465 645f 7665 635f 6e6f 6966 5d67     _set_dev_config]
10017764:	5309 7465 4220 454c 4420 7665 6369 2065     .Set BLE Device 
10017774:	6f63 666e 6769 7275 7461 6f69 206e 6166     configuration fa
10017784:	6c69 6465 0000 0000 625b 656c 735f 7465     iled....[ble_set
10017794:	645f 7665 635f 6e6f 6966 5d67 5309 7465     _dev_config].Set
100177a4:	4220 454c 4420 7665 6369 2065 6441 7264      BLE Device Addr
100177b4:	7365 2073 6166 6c69 6465 0000 6353 6e61     ess failed..Scan
100177c4:	696e 676e 2e2e 502e 656c 7361 2065 6177     ning...Please wa
100177d4:	7469 2e2e 002e 0000 6c53 7661 2065 6573     it......Slave se
100177e4:	7563 6972 7974 7220 7165 6575 7473 7320     curity request s
100177f4:	6375 6563 7373 7566 006c 0000 6c53 7661     uccessful...Slav
10017804:	2065 6573 7563 6972 7974 7220 7165 6575     e security reque
10017814:	7473 6620 6961 656c 0064 0000 6f43 6e6e     st failed...Conn
10017824:	6365 6574 2064 6f74 7020 6565 2072 6564     ected to peer de
10017834:	6976 6563 7720 7469 2068 6461 7264 7365     vice with addres
10017844:	2073 7830 3025 7832 3025 7832 3025 7832     s 0x%02x%02x%02x
10017854:	3025 7832 3025 7832 3025 7832 0000 0000     %02x%02x%02x....
10017864:	6f43 6e6e 6365 6974 6e6f 4820 6e61 6c64     Connection Handl
10017874:	2065 6425 0000 0000 6552 6f73 766c 6e69     e %d....Resolvin
10017884:	2067 6152 646e 6d6f 6120 6464 6572 7373     g Random address
10017894:	7320 6375 6563 7373 2a2a 0000 6552 6f73      success**..Reso
100178a4:	766c 6e69 2067 6152 646e 6d6f 6120 6464     lving Random add
100178b4:	6572 7373 6620 6961 656c 2a64 002a 0000     ress failed**...
100178c4:	614d 2078 756e 626d 7265 6f20 2066 6f63     Max number of co
100178d4:	6e6e 6365 6974 6e6f 7220 6165 6863 6465     nnection reached
100178e4:	203a 6425 3d20 3d3d 443e 7369 6f63 6e6e     : %d ===>Disconn
100178f4:	6365 6974 676e 2e2e 002e 0000 6544 6976     ecting......Devi
10017904:	6563 4320 6e6f 656e 7463 6f69 206e 6146     ce Connection Fa
10017914:	6c69 6465 2d20 5320 6174 7574 3a73 2520     iled - Status: %
10017924:	0064 0000 2323 2323 2323 2323 2323 6544     d...##########De
10017934:	6976 6563 4620 756f 646e 0000 2323 2323     vice Found..####
10017944:	2323 2323 2323 6544 6976 6563 4e20 746f     ######Device Not
10017954:	4620 756f 646e 0000 6544 6976 6563 6920      Found..Device i
10017964:	7864 253a 0064 0000 0a0d 4c42 2d45 7645     dx:%d.....BLE-Ev
10017974:	6e65 3a74 6425 0000 4147 5454 535f 7265     ent:%d..GATT_Ser
10017984:	6576 2072 7645 6e65 3a74 6425 0000 0000     ver Event:%d....
10017994:	4c42 2d45 614d 616e 6567 3a72 6e55 6e6b     BLE-Manager:Unkn
100179a4:	776f 206e 7645 6e65 3d74 7830 5825 0000     own Event=0x%X..
100179b4:	625b 656c 6d5f 6e61 6761 7265 095d 0909     [ble_manager]...
100179c4:	614d 756e 6166 7463 7275 7265 7320 6570     Manufacturer spe
100179d4:	6963 6966 2063 6164 6174 6520 616e 6c62     cific data enabl
100179e4:	6465 0000 571c 5a2d 2dbe 0000 4c42 2045     ed...W-Z.-..BLE 
100179f4:	6441 6576 7472 7369 6d65 6e65 2074 6164     Advertisement da
10017a04:	6174 7320 7465 6620 6961 656c 0064 0000     ta set failed...

10017a14 <ble_mgr_gap_handle>:
10017a14:	d43d 1000 d6ed 1000 d461 1000 d489 1000     =.......a.......
10017a24:	0000 0000 e369 1000 d569 1000 d605 1000     ....i...i.......
10017a34:	d949 1000 d799 1000 db49 1000 d961 1000     I.......I...a...
10017a44:	dcd5 1000 de19 1000 d629 1000 e5b5 1000     ........).......
	...
10017a60:	f5c6 1000 f5d4 1000 f61c 1000 f660 1000     ............`...
10017a70:	f66e 1000 f6d8 1000 f6f0 1000 6d5b 6961     n...........[mai
10017a80:	5d6e 0909 0909 6157 696b 676e 7520 2e70     n]....Waking up.
10017a90:	2e2e 0000 6420 6e6f 2165 0000 6d5b 6961     .... done!..[mai
10017aa0:	5d6e 0909 0909 6944 6173 6c62 6e69 2067     n]....Disabling 
10017ab0:	7562 7474 6e6f 6920 746e 2e2e 002e 0000     button int......
10017ac0:	2e2e 4e2e 204f 4f53 5255 4543 2121 0000     ...NO SOURCE!!..
10017ad0:	2e2e 422e 4e54 0030 6d5b 6961 5d6e 0909     ...BTN0.[main]..
10017ae0:	0909 7245 6f72 2072 6e69 7320 736d 625f     ..Error in sms_b
10017af0:	7475 6f74 5f6e 6e66 2928 0021 2e2e 422e     utton_fn()!....B
10017b00:	4e54 0031 2e2e 4d2e 5550 445f 4452 0059     TN1....MPU_DRDY.
10017b10:	2e2e 412e 4e4f 545f 4d49 5245 0000 0000     ...AON_TIMER....
10017b20:	6d5b 6961 5d6e 0909 0909 6f50 6c6c 6e69     [main]....Pollin
10017b30:	2067 7270 7365 7573 6572 6420 7461 2e61     g pressure data.
10017b40:	2e2e 0000 6d5b 6961 5d6e 0909 0909 4f41     ....[main]....AO
10017b50:	204e 6974 656d 2072 6572 6461 2079 6877     N timer ready wh
10017b60:	6c69 2065 6e69 6964 6163 6974 676e 2e2e     ile indicating..
10017b70:	202e 6b73 7069 6970 676e 0000 2e2e 442e     . skipping.....D
10017b80:	4155 544c 4d49 5245 0031 0000 2e2e 442e     UALTIMER1......D
10017b90:	4155 544c 4d49 5245 0032 0000 2e2e 3f2e     UALTIMER2......?
10017ba0:	003f 0000 6d5b 6961 5d6e 0909 0909 6e45     ?...[main]....En
10017bb0:	6261 696c 676e 6220 7475 6f74 206e 6e69     abling button in
10017bc0:	2e74 2e2e 0000 0000 6d5b 6961 5d6e 0909     t.......[main]..
10017bd0:	0909 4c55 2e50 2e2e 0000 0000 2120 0021     ..ULP....... !!.
10017be0:	7441 656d 206c 6f43 7072 022e                    Atmel Corp.

10017beb <CSWTCH.45>:
10017beb:	0402 0010                                        ...

10017bee <CSWTCH.47>:
10017bee:	0300 0301 0303 0303 0303 0303 0303 0202          ...............

10017bfd <client_conf_uuid>:
10017bfd:	2902                                        .)

10017bff <presentation_format_uuid>:
10017bff:	2904                                        .)

10017c01 <user_desc_uuid>:
10017c01:	2901                                        .)

10017c03 <server_conf_uuid>:
10017c03:	2903                                        .)

10017c05 <extended_props_uuid>:
10017c05:	2900                                        .)

10017c07 <include_uuid>:
10017c07:	2802                                        .(

10017c09 <char_uuid>:
10017c09:	2803 6e00 0132 9210 0131 5010 0132 2810     .(.n2...1..P2..(
10017c19:	0132 5010 0132 1c10 0132 5010 0132 2810     2..P2...2..P2..(
10017c29:	0132 9210 0131 9210 0131 1c10 0132 2810     2...1...1...2..(
10017c39:	0132 d410 0132 d410 0132 d410 0132 5610     2...2...2...2..V
10017c49:	0132 9210 0131 9210 0131 3c10 0132 2610     2...1...1..<2..&
10017c59:	0132 3c10 0132 1c10 0132 3c10 0132 2610     2..<2...2..<2..&
10017c69:	0132 9210 0131 9210 0131 1c10 0132 2610     2...1...1...2..&
10017c79:	0132 d410 0132 d410 0132 d410 0132 e010     2...2...2...2...
10017c89:	0132 cc10 0135 2a10 0135 2a10 0135 2810     2...5..*5..*5..(
10017c99:	0135 be10 0135 be10 0135 b410 0135 2810     5...5...5...5..(
10017ca9:	0135 be10 0135 b410 0135 be10 0135 2810     5...5...5...5..(
10017cb9:	0135 c410 0135 c410 0135 c410 0135 4e10     5...5...5...5..N
10017cc9:	0136 b010 013e 7010 013d 7010 013d 6e10     6...>..p=..p=..n
10017cd9:	013d 8810 013e 8810 013e 7a10 013e 6e10     =...>...>..z>..n
10017ce9:	013d 8810 013e 7a10 013e 8810 013e 6e10     =...>..z>...>..n
10017cf9:	013d 9010 013e 9010 013e 9010 013e 9010     =...>...>...>...
10017d09:	0140 4310 0000 1000                              @..C...

10017d10 <_global_impure_ptr>:
10017d10:	7e10 1001                                   .~..

10017d14 <__sf_fake_stdin>:
	...

10017d34 <__sf_fake_stdout>:
	...

10017d54 <__sf_fake_stderr>:
	...
10017d74:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
10017d84:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
10017d94:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
10017da4:	6665 0000                                   ef..

10017da8 <_init>:
10017da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017daa:	46c0      	nop			; (mov r8, r8)
10017dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017dae:	bc08      	pop	{r3}
10017db0:	469e      	mov	lr, r3
10017db2:	4770      	bx	lr

10017db4 <__init_array_start>:
10017db4:	100080b1 	.word	0x100080b1

10017db8 <_fini>:
10017db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017dba:	46c0      	nop			; (mov r8, r8)
10017dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017dbe:	bc08      	pop	{r3}
10017dc0:	469e      	mov	lr, r3
10017dc2:	4770      	bx	lr

10017dc4 <__fini_array_start>:
10017dc4:	10008089 	.word	0x10008089
