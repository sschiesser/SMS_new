
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000106fc  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  100186fc  100186fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef0  1001876c  1001876c  0001876c  2**2
                  ALLOC
  3 .stack        00000804  1001b65c  1001b65c  0001876c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001876c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018794  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b998  00000000  00000000  00018848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000541c  00000000  00000000  000641e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a3a3  00000000  00000000  000695fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  0007399f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b58  00000000  00000000  00074537  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c386  00000000  00000000  0007508f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000161ba  00000000  00000000  00081415  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00141781  00000000  00000000  000975cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cd8  00000000  00000000  001d8d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100186fc 	.word	0x100186fc
10008068:	100186fc 	.word	0x100186fc
1000806c:	1001876c 	.word	0x1001876c
10008070:	1001b65c 	.word	0x1001b65c
10008074:	1001876c 	.word	0x1001876c
10008078:	10018700 	.word	0x10018700
1000807c:	10018770 	.word	0x10018770
10008080:	10015879 	.word	0x10015879
10008084:	1000e2e1 	.word	0x1000e2e1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001876c 	.word	0x1001876c
100080a8:	00000000 	.word	0x00000000
100080ac:	100186fc 	.word	0x100186fc

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10018770 	.word	0x10018770
100080dc:	100186fc 	.word	0x100186fc
100080e0:	100186fc 	.word	0x100186fc
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10018788 	.word	0x10018788

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10018788 	.word	0x10018788

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10018788 	.word	0x10018788

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000bd11 	.word	0x1000bd11

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b8a9 	.word	0x1000b8a9
10008388:	40003400 	.word	0x40003400
1000838c:	1000ae31 	.word	0x1000ae31

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	1001878c 	.word	0x1001878c
1000841c:	1001be60 	.word	0x1001be60

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_notification_confirmed_fn>:
{
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
1000843c:	4a05      	ldr	r2, [pc, #20]	; (10008454 <sms_ble_notification_confirmed_fn+0x18>)
1000843e:	7a13      	ldrb	r3, [r2, #8]
10008440:	3b01      	subs	r3, #1
10008442:	b2db      	uxtb	r3, r3
10008444:	7213      	strb	r3, [r2, #8]
	//DBG_LOG("T/O: OFF");
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
10008446:	2301      	movs	r3, #1
10008448:	425b      	negs	r3, r3
1000844a:	6053      	str	r3, [r2, #4]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	//sms_dualtimer_stop(DUALTIMER_TIMER2);
	//timer2_current_mode = TIMER2_MODE_NONE;
	ble_instance.current_state = BLE_STATE_PAIRED;
1000844c:	3323      	adds	r3, #35	; 0x23
1000844e:	7013      	strb	r3, [r2, #0]
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	//if(timer1_current_mode == TIMER1_MODE_NONE) {
	////ulp_ready = true;
	//}
	return AT_BLE_SUCCESS;
}
10008450:	2000      	movs	r0, #0
10008452:	4770      	bx	lr
10008454:	1001a234 	.word	0x1001a234

10008458 <sms_ble_indication_confirmed_fn>:
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	//sms_dualtimer_stop(DUALTIMER_TIMER2);
	//timer2_current_mode = TIMER2_MODE_NONE;
	ble_instance.current_state = BLE_STATE_PAIRED;
10008458:	2222      	movs	r2, #34	; 0x22
1000845a:	4b02      	ldr	r3, [pc, #8]	; (10008464 <sms_ble_indication_confirmed_fn+0xc>)
1000845c:	701a      	strb	r2, [r3, #0]
	
	//if(timer1_current_mode == TIMER1_MODE_NONE) {
	////ulp_ready = true;
	//}
	return AT_BLE_SUCCESS;
}
1000845e:	2000      	movs	r0, #0
10008460:	4770      	bx	lr
10008462:	46c0      	nop			; (mov r8, r8)
10008464:	1001a234 	.word	0x1001a234

10008468 <sms_ble_pair_request_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10008468:	b510      	push	{r4, lr}
	at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\t\tPairing request...");
1000846a:	4804      	ldr	r0, [pc, #16]	; (1000847c <sms_ble_pair_request_fn+0x14>)
1000846c:	4b04      	ldr	r3, [pc, #16]	; (10008480 <sms_ble_pair_request_fn+0x18>)
1000846e:	4798      	blx	r3
10008470:	4804      	ldr	r0, [pc, #16]	; (10008484 <sms_ble_pair_request_fn+0x1c>)
10008472:	4b05      	ldr	r3, [pc, #20]	; (10008488 <sms_ble_pair_request_fn+0x20>)
10008474:	4798      	blx	r3
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
10008476:	2000      	movs	r0, #0
10008478:	bd10      	pop	{r4, pc}
1000847a:	46c0      	nop			; (mov r8, r8)
1000847c:	10016b98 	.word	0x10016b98
10008480:	10015b71 	.word	0x10015b71
10008484:	10016b9c 	.word	0x10016b9c
10008488:	10015a51 	.word	0x10015a51

1000848c <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
1000848c:	4b04      	ldr	r3, [pc, #16]	; (100084a0 <sms_ble_init_variables+0x14>)
1000848e:	2200      	movs	r2, #0
10008490:	701a      	strb	r2, [r3, #0]
	ble_instance.conn_handle = 0xffff;
10008492:	2101      	movs	r1, #1
10008494:	4249      	negs	r1, r1
10008496:	8159      	strh	r1, [r3, #10]
	ble_instance.ind_retries = 0;
10008498:	731a      	strb	r2, [r3, #12]
	ble_instance.sending_queue = 0;
1000849a:	721a      	strb	r2, [r3, #8]
	ble_instance.send_cnt = 0;
1000849c:	81da      	strh	r2, [r3, #14]
}
1000849e:	4770      	bx	lr
100084a0:	1001a234 	.word	0x1001a234

100084a4 <sms_ble_power_down>:
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
	return 0;
}

void sms_ble_power_down(void)
{
100084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
100084a6:	482c      	ldr	r0, [pc, #176]	; (10008558 <sms_ble_power_down+0xb4>)
100084a8:	4b2c      	ldr	r3, [pc, #176]	; (1000855c <sms_ble_power_down+0xb8>)
100084aa:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100084ac:	4b2c      	ldr	r3, [pc, #176]	; (10008560 <sms_ble_power_down+0xbc>)
100084ae:	781b      	ldrb	r3, [r3, #0]
100084b0:	2b00      	cmp	r3, #0
100084b2:	d03d      	beq.n	10008530 <sms_ble_power_down+0x8c>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
100084b4:	4b2a      	ldr	r3, [pc, #168]	; (10008560 <sms_ble_power_down+0xbc>)
100084b6:	781b      	ldrb	r3, [r3, #0]
100084b8:	b2db      	uxtb	r3, r3
100084ba:	2b21      	cmp	r3, #33	; 0x21
100084bc:	d02d      	beq.n	1000851a <sms_ble_power_down+0x76>
100084be:	d802      	bhi.n	100084c6 <sms_ble_power_down+0x22>
100084c0:	2b20      	cmp	r3, #32
100084c2:	d005      	beq.n	100084d0 <sms_ble_power_down+0x2c>
100084c4:	e034      	b.n	10008530 <sms_ble_power_down+0x8c>
100084c6:	2b22      	cmp	r3, #34	; 0x22
100084c8:	d017      	beq.n	100084fa <sms_ble_power_down+0x56>
100084ca:	2b23      	cmp	r3, #35	; 0x23
100084cc:	d01b      	beq.n	10008506 <sms_ble_power_down+0x62>
100084ce:	e02f      	b.n	10008530 <sms_ble_power_down+0x8c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
100084d0:	4824      	ldr	r0, [pc, #144]	; (10008564 <sms_ble_power_down+0xc0>)
100084d2:	4b25      	ldr	r3, [pc, #148]	; (10008568 <sms_ble_power_down+0xc4>)
100084d4:	4798      	blx	r3
100084d6:	4825      	ldr	r0, [pc, #148]	; (1000856c <sms_ble_power_down+0xc8>)
100084d8:	4b25      	ldr	r3, [pc, #148]	; (10008570 <sms_ble_power_down+0xcc>)
100084da:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
100084dc:	4b25      	ldr	r3, [pc, #148]	; (10008574 <sms_ble_power_down+0xd0>)
100084de:	4798      	blx	r3
100084e0:	2800      	cmp	r0, #0
100084e2:	d003      	beq.n	100084ec <sms_ble_power_down+0x48>
				DBG_LOG_CONT_DEV("failed!!!");
100084e4:	4824      	ldr	r0, [pc, #144]	; (10008578 <sms_ble_power_down+0xd4>)
100084e6:	4b22      	ldr	r3, [pc, #136]	; (10008570 <sms_ble_power_down+0xcc>)
100084e8:	4798      	blx	r3
100084ea:	e021      	b.n	10008530 <sms_ble_power_down+0x8c>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
100084ec:	4823      	ldr	r0, [pc, #140]	; (1000857c <sms_ble_power_down+0xd8>)
100084ee:	4b20      	ldr	r3, [pc, #128]	; (10008570 <sms_ble_power_down+0xcc>)
100084f0:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
100084f2:	2211      	movs	r2, #17
100084f4:	4b1a      	ldr	r3, [pc, #104]	; (10008560 <sms_ble_power_down+0xbc>)
100084f6:	701a      	strb	r2, [r3, #0]
100084f8:	e01a      	b.n	10008530 <sms_ble_power_down+0x8c>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
100084fa:	481a      	ldr	r0, [pc, #104]	; (10008564 <sms_ble_power_down+0xc0>)
100084fc:	4b1a      	ldr	r3, [pc, #104]	; (10008568 <sms_ble_power_down+0xc4>)
100084fe:	4798      	blx	r3
10008500:	481f      	ldr	r0, [pc, #124]	; (10008580 <sms_ble_power_down+0xdc>)
10008502:	4b1b      	ldr	r3, [pc, #108]	; (10008570 <sms_ble_power_down+0xcc>)
10008504:	4798      	blx	r3
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10008506:	4817      	ldr	r0, [pc, #92]	; (10008564 <sms_ble_power_down+0xc0>)
10008508:	4b17      	ldr	r3, [pc, #92]	; (10008568 <sms_ble_power_down+0xc4>)
1000850a:	4798      	blx	r3
1000850c:	481d      	ldr	r0, [pc, #116]	; (10008584 <sms_ble_power_down+0xe0>)
1000850e:	4b18      	ldr	r3, [pc, #96]	; (10008570 <sms_ble_power_down+0xcc>)
10008510:	4798      	blx	r3
			sms_sensors_switch(false, false);
10008512:	2100      	movs	r1, #0
10008514:	2000      	movs	r0, #0
10008516:	4b1c      	ldr	r3, [pc, #112]	; (10008588 <sms_ble_power_down+0xe4>)
10008518:	4798      	blx	r3
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
1000851a:	4812      	ldr	r0, [pc, #72]	; (10008564 <sms_ble_power_down+0xc0>)
1000851c:	4b12      	ldr	r3, [pc, #72]	; (10008568 <sms_ble_power_down+0xc4>)
1000851e:	4798      	blx	r3
10008520:	481a      	ldr	r0, [pc, #104]	; (1000858c <sms_ble_power_down+0xe8>)
10008522:	4b13      	ldr	r3, [pc, #76]	; (10008570 <sms_ble_power_down+0xcc>)
10008524:	4798      	blx	r3
			at_ble_disconnect(ble_instance.conn_handle, AT_BLE_TERMINATED_BY_USER);
10008526:	4b0e      	ldr	r3, [pc, #56]	; (10008560 <sms_ble_power_down+0xbc>)
10008528:	8958      	ldrh	r0, [r3, #10]
1000852a:	2113      	movs	r1, #19
1000852c:	4b18      	ldr	r3, [pc, #96]	; (10008590 <sms_ble_power_down+0xec>)
1000852e:	4798      	blx	r3
	/* Common part:
	* - set BLE state to power-off
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
10008530:	2200      	movs	r2, #0
10008532:	4b0b      	ldr	r3, [pc, #44]	; (10008560 <sms_ble_power_down+0xbc>)
10008534:	701a      	strb	r2, [r3, #0]
10008536:	2404      	movs	r4, #4
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008538:	4f16      	ldr	r7, [pc, #88]	; (10008594 <sms_ble_power_down+0xf0>)
		delay_ms(SMS_BLINK_SHTDWN_MS);
1000853a:	26c8      	movs	r6, #200	; 0xc8
1000853c:	0076      	lsls	r6, r6, #1
1000853e:	4d16      	ldr	r5, [pc, #88]	; (10008598 <sms_ble_power_down+0xf4>)
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008540:	2016      	movs	r0, #22
10008542:	47b8      	blx	r7
		delay_ms(SMS_BLINK_SHTDWN_MS);
10008544:	0030      	movs	r0, r6
10008546:	47a8      	blx	r5
10008548:	3c01      	subs	r4, #1
1000854a:	b2e4      	uxtb	r4, r4
	* - set BLE state to power-off
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
1000854c:	2c00      	cmp	r4, #0
1000854e:	d1f7      	bne.n	10008540 <sms_ble_power_down+0x9c>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_SHTDWN_MS);
	}
	ulp_ready = true;
10008550:	2201      	movs	r2, #1
10008552:	4b12      	ldr	r3, [pc, #72]	; (1000859c <sms_ble_power_down+0xf8>)
10008554:	701a      	strb	r2, [r3, #0]
}
10008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008558:	10016bcc 	.word	0x10016bcc
1000855c:	10008ee5 	.word	0x10008ee5
10008560:	1001a234 	.word	0x1001a234
10008564:	10016b98 	.word	0x10016b98
10008568:	10015b71 	.word	0x10015b71
1000856c:	10016be4 	.word	0x10016be4
10008570:	10015a51 	.word	0x10015a51
10008574:	1000f2c5 	.word	0x1000f2c5
10008578:	10016c38 	.word	0x10016c38
1000857c:	10016c44 	.word	0x10016c44
10008580:	10016c4c 	.word	0x10016c4c
10008584:	10016ca4 	.word	0x10016ca4
10008588:	1000a051 	.word	0x1000a051
1000858c:	10016cd0 	.word	0x10016cd0
10008590:	1000f2f1 	.word	0x1000f2f1
10008594:	10009d19 	.word	0x10009d19
10008598:	1000a48d 	.word	0x1000a48d
1000859c:	1001a231 	.word	0x1001a231

100085a0 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100085a0:	b510      	push	{r4, lr}
	at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085a2:	2211      	movs	r2, #17
100085a4:	4b07      	ldr	r3, [pc, #28]	; (100085c4 <sms_ble_adv_report_fn+0x24>)
100085a6:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\t\tAdvertisement timeout...");
100085a8:	4807      	ldr	r0, [pc, #28]	; (100085c8 <sms_ble_adv_report_fn+0x28>)
100085aa:	4b08      	ldr	r3, [pc, #32]	; (100085cc <sms_ble_adv_report_fn+0x2c>)
100085ac:	4798      	blx	r3
100085ae:	4808      	ldr	r0, [pc, #32]	; (100085d0 <sms_ble_adv_report_fn+0x30>)
100085b0:	4b08      	ldr	r3, [pc, #32]	; (100085d4 <sms_ble_adv_report_fn+0x34>)
100085b2:	4798      	blx	r3

	sms_led_blink_stop(SMS_LED_0);
100085b4:	2016      	movs	r0, #22
100085b6:	4b08      	ldr	r3, [pc, #32]	; (100085d8 <sms_ble_adv_report_fn+0x38>)
100085b8:	4798      	blx	r3

	sms_ble_power_down();
100085ba:	4b08      	ldr	r3, [pc, #32]	; (100085dc <sms_ble_adv_report_fn+0x3c>)
100085bc:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100085be:	2000      	movs	r0, #0
100085c0:	bd10      	pop	{r4, pc}
100085c2:	46c0      	nop			; (mov r8, r8)
100085c4:	1001a234 	.word	0x1001a234
100085c8:	10016b98 	.word	0x10016b98
100085cc:	10015b71 	.word	0x10015b71
100085d0:	10016d08 	.word	0x10016d08
100085d4:	10015a51 	.word	0x10015a51
100085d8:	10009d85 	.word	0x10009d85
100085dc:	100084a5 	.word	0x100084a5

100085e0 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
100085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
100085e2:	4b11      	ldr	r3, [pc, #68]	; (10008628 <sms_ble_connected_fn+0x48>)
100085e4:	781b      	ldrb	r3, [r3, #0]
100085e6:	2b20      	cmp	r3, #32
100085e8:	d113      	bne.n	10008612 <sms_ble_connected_fn+0x32>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		ble_instance.conn_handle = connected->handle;
100085ea:	8903      	ldrh	r3, [r0, #8]
100085ec:	4c0e      	ldr	r4, [pc, #56]	; (10008628 <sms_ble_connected_fn+0x48>)
100085ee:	8163      	strh	r3, [r4, #10]
		ble_instance.current_state = BLE_STATE_CONNECTED;
100085f0:	2321      	movs	r3, #33	; 0x21
100085f2:	7023      	strb	r3, [r4, #0]
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
100085f4:	4f0d      	ldr	r7, [pc, #52]	; (1000862c <sms_ble_connected_fn+0x4c>)
100085f6:	0038      	movs	r0, r7
100085f8:	4e0d      	ldr	r6, [pc, #52]	; (10008630 <sms_ble_connected_fn+0x50>)
100085fa:	47b0      	blx	r6
100085fc:	480d      	ldr	r0, [pc, #52]	; (10008634 <sms_ble_connected_fn+0x54>)
100085fe:	4d0e      	ldr	r5, [pc, #56]	; (10008638 <sms_ble_connected_fn+0x58>)
10008600:	47a8      	blx	r5
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		DBG_LOG_DEV("BLE T/O: 5000 ms");
10008602:	0038      	movs	r0, r7
10008604:	47b0      	blx	r6
10008606:	480d      	ldr	r0, [pc, #52]	; (1000863c <sms_ble_connected_fn+0x5c>)
10008608:	47a8      	blx	r5
		ble_instance.timeout = BLE_APP_TIMEOUT_PAIR;
1000860a:	23fa      	movs	r3, #250	; 0xfa
1000860c:	005b      	lsls	r3, r3, #1
1000860e:	6063      	str	r3, [r4, #4]
10008610:	e007      	b.n	10008622 <sms_ble_connected_fn+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tWrong BLE state... shutting down");
10008612:	4806      	ldr	r0, [pc, #24]	; (1000862c <sms_ble_connected_fn+0x4c>)
10008614:	4b06      	ldr	r3, [pc, #24]	; (10008630 <sms_ble_connected_fn+0x50>)
10008616:	4798      	blx	r3
10008618:	4809      	ldr	r0, [pc, #36]	; (10008640 <sms_ble_connected_fn+0x60>)
1000861a:	4b07      	ldr	r3, [pc, #28]	; (10008638 <sms_ble_connected_fn+0x58>)
1000861c:	4798      	blx	r3
		sms_ble_power_down();
1000861e:	4b09      	ldr	r3, [pc, #36]	; (10008644 <sms_ble_connected_fn+0x64>)
10008620:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008622:	2000      	movs	r0, #0
10008624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008626:	46c0      	nop			; (mov r8, r8)
10008628:	1001a234 	.word	0x1001a234
1000862c:	10016b98 	.word	0x10016b98
10008630:	10015b71 	.word	0x10015b71
10008634:	10016d3c 	.word	0x10016d3c
10008638:	10015a51 	.word	0x10015a51
1000863c:	10016d6c 	.word	0x10016d6c
10008640:	10016d80 	.word	0x10016d80
10008644:	100084a5 	.word	0x100084a5

10008648 <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008648:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
1000864a:	4b0c      	ldr	r3, [pc, #48]	; (1000867c <sms_ble_paired_fn+0x34>)
1000864c:	781b      	ldrb	r3, [r3, #0]
1000864e:	2b21      	cmp	r3, #33	; 0x21
10008650:	d110      	bne.n	10008674 <sms_ble_paired_fn+0x2c>
		ble_instance.current_state = BLE_STATE_PAIRED;
10008652:	4c0a      	ldr	r4, [pc, #40]	; (1000867c <sms_ble_paired_fn+0x34>)
10008654:	3301      	adds	r3, #1
10008656:	7023      	strb	r3, [r4, #0]
		at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
		sms_monitor_get_states("[sms_ble_paired_fn]");
10008658:	4809      	ldr	r0, [pc, #36]	; (10008680 <sms_ble_paired_fn+0x38>)
1000865a:	4b0a      	ldr	r3, [pc, #40]	; (10008684 <sms_ble_paired_fn+0x3c>)
1000865c:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		sms_led_blink_stop(SMS_LED_0);
1000865e:	2016      	movs	r0, #22
10008660:	4b09      	ldr	r3, [pc, #36]	; (10008688 <sms_ble_paired_fn+0x40>)
10008662:	4798      	blx	r3
		
		/* Try to switch of both sensors */
		sms_sensors_switch(true, true);
10008664:	2101      	movs	r1, #1
10008666:	2001      	movs	r0, #1
10008668:	4b08      	ldr	r3, [pc, #32]	; (1000868c <sms_ble_paired_fn+0x44>)
1000866a:	4798      	blx	r3
		
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000866c:	2301      	movs	r3, #1
1000866e:	425b      	negs	r3, r3
10008670:	6063      	str	r3, [r4, #4]
10008672:	e001      	b.n	10008678 <sms_ble_paired_fn+0x30>
	}
	else {
		sms_ble_power_down();
10008674:	4b06      	ldr	r3, [pc, #24]	; (10008690 <sms_ble_paired_fn+0x48>)
10008676:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008678:	2000      	movs	r0, #0
1000867a:	bd10      	pop	{r4, pc}
1000867c:	1001a234 	.word	0x1001a234
10008680:	10016dbc 	.word	0x10016dbc
10008684:	10008ee5 	.word	0x10008ee5
10008688:	10009d85 	.word	0x10009d85
1000868c:	1000a051 	.word	0x1000a051
10008690:	100084a5 	.word	0x100084a5

10008694 <sms_ble_advertise>:
	}
	ulp_ready = true;
}

at_ble_status_t sms_ble_advertise(void)
{
10008694:	b510      	push	{r4, lr}
10008696:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008698:	2220      	movs	r2, #32
1000869a:	4b19      	ldr	r3, [pc, #100]	; (10008700 <sms_ble_advertise+0x6c>)
1000869c:	701a      	strb	r2, [r3, #0]
	
	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000869e:	4b19      	ldr	r3, [pc, #100]	; (10008704 <sms_ble_advertise+0x70>)
100086a0:	4798      	blx	r3
100086a2:	1e04      	subs	r4, r0, #0
100086a4:	d007      	beq.n	100086b6 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\t\tAdvertisement data set failed!");
100086a6:	4818      	ldr	r0, [pc, #96]	; (10008708 <sms_ble_advertise+0x74>)
100086a8:	4b18      	ldr	r3, [pc, #96]	; (1000870c <sms_ble_advertise+0x78>)
100086aa:	4798      	blx	r3
100086ac:	4818      	ldr	r0, [pc, #96]	; (10008710 <sms_ble_advertise+0x7c>)
100086ae:	4b19      	ldr	r3, [pc, #100]	; (10008714 <sms_ble_advertise+0x80>)
100086b0:	4798      	blx	r3
		return status;
100086b2:	0020      	movs	r0, r4
100086b4:	e022      	b.n	100086fc <sms_ble_advertise+0x68>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, BLE_ADV_INTERVAL, BLE_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086b6:	2300      	movs	r3, #0
100086b8:	9302      	str	r3, [sp, #8]
100086ba:	333c      	adds	r3, #60	; 0x3c
100086bc:	9301      	str	r3, [sp, #4]
100086be:	23c8      	movs	r3, #200	; 0xc8
100086c0:	00db      	lsls	r3, r3, #3
100086c2:	9300      	str	r3, [sp, #0]
100086c4:	2300      	movs	r3, #0
100086c6:	2200      	movs	r2, #0
100086c8:	2101      	movs	r1, #1
100086ca:	2000      	movs	r0, #0
100086cc:	4c12      	ldr	r4, [pc, #72]	; (10008718 <sms_ble_advertise+0x84>)
100086ce:	47a0      	blx	r4
100086d0:	1e04      	subs	r4, r0, #0
100086d2:	d10b      	bne.n	100086ec <sms_ble_advertise+0x58>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE started advertisement");
100086d4:	480c      	ldr	r0, [pc, #48]	; (10008708 <sms_ble_advertise+0x74>)
100086d6:	4b0d      	ldr	r3, [pc, #52]	; (1000870c <sms_ble_advertise+0x78>)
100086d8:	4798      	blx	r3
100086da:	4810      	ldr	r0, [pc, #64]	; (1000871c <sms_ble_advertise+0x88>)
100086dc:	4b0d      	ldr	r3, [pc, #52]	; (10008714 <sms_ble_advertise+0x80>)
100086de:	4798      	blx	r3
		sms_led_blink_start(SMS_LED_0, TIMER_MODE_ADVERTISING);
100086e0:	2101      	movs	r1, #1
100086e2:	2016      	movs	r0, #22
100086e4:	4b0e      	ldr	r3, [pc, #56]	; (10008720 <sms_ble_advertise+0x8c>)
100086e6:	4798      	blx	r3
		/* */
		return AT_BLE_SUCCESS;
100086e8:	2000      	movs	r0, #0
100086ea:	e007      	b.n	100086fc <sms_ble_advertise+0x68>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE advertisement start failed: reason 0x%x", status);
100086ec:	4806      	ldr	r0, [pc, #24]	; (10008708 <sms_ble_advertise+0x74>)
100086ee:	4b07      	ldr	r3, [pc, #28]	; (1000870c <sms_ble_advertise+0x78>)
100086f0:	4798      	blx	r3
100086f2:	0021      	movs	r1, r4
100086f4:	480b      	ldr	r0, [pc, #44]	; (10008724 <sms_ble_advertise+0x90>)
100086f6:	4b07      	ldr	r3, [pc, #28]	; (10008714 <sms_ble_advertise+0x80>)
100086f8:	4798      	blx	r3
		return status;
100086fa:	0020      	movs	r0, r4
	}
	return AT_BLE_FAILURE;
}
100086fc:	b004      	add	sp, #16
100086fe:	bd10      	pop	{r4, pc}
10008700:	1001a234 	.word	0x1001a234
10008704:	1000d6d5 	.word	0x1000d6d5
10008708:	10016b98 	.word	0x10016b98
1000870c:	10015b71 	.word	0x10015b71
10008710:	10016dd0 	.word	0x10016dd0
10008714:	10015a51 	.word	0x10015a51
10008718:	1000f189 	.word	0x1000f189
1000871c:	10016e04 	.word	0x10016e04
10008720:	10009d41 	.word	0x10009d41
10008724:	10016e34 	.word	0x10016e34

10008728 <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008728:	b510      	push	{r4, lr}
1000872a:	0004      	movs	r4, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	
	switch(ble_instance.current_state) {
1000872c:	4b1a      	ldr	r3, [pc, #104]	; (10008798 <sms_ble_disconnected_fn+0x70>)
1000872e:	781b      	ldrb	r3, [r3, #0]
10008730:	b2db      	uxtb	r3, r3
10008732:	2b20      	cmp	r3, #32
10008734:	d312      	bcc.n	1000875c <sms_ble_disconnected_fn+0x34>
10008736:	2b21      	cmp	r3, #33	; 0x21
10008738:	d90d      	bls.n	10008756 <sms_ble_disconnected_fn+0x2e>
1000873a:	2b22      	cmp	r3, #34	; 0x22
1000873c:	d10e      	bne.n	1000875c <sms_ble_disconnected_fn+0x34>
		case BLE_STATE_PAIRED:
		pressure_device.state = PRESSURE_STATE_OFF;
1000873e:	2100      	movs	r1, #0
10008740:	3309      	adds	r3, #9
10008742:	4a16      	ldr	r2, [pc, #88]	; (1000879c <sms_ble_disconnected_fn+0x74>)
10008744:	54d1      	strb	r1, [r2, r3]
		sms_sensors_enable_callback(false, false);
10008746:	2000      	movs	r0, #0
10008748:	4b15      	ldr	r3, [pc, #84]	; (100087a0 <sms_ble_disconnected_fn+0x78>)
1000874a:	4798      	blx	r3
		sms_sensors_switch(false, false);
1000874c:	2100      	movs	r1, #0
1000874e:	2000      	movs	r0, #0
10008750:	4b14      	ldr	r3, [pc, #80]	; (100087a4 <sms_ble_disconnected_fn+0x7c>)
10008752:	4798      	blx	r3
		break;
10008754:	e002      	b.n	1000875c <sms_ble_disconnected_fn+0x34>
		
		case BLE_STATE_ADVERTISING:
		case BLE_STATE_CONNECTED:
		sms_led_blink_stop(SMS_LED_0);
10008756:	2016      	movs	r0, #22
10008758:	4b13      	ldr	r3, [pc, #76]	; (100087a8 <sms_ble_disconnected_fn+0x80>)
1000875a:	4798      	blx	r3
		
		default:
		break;
	}

	ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000875c:	4b0e      	ldr	r3, [pc, #56]	; (10008798 <sms_ble_disconnected_fn+0x70>)
1000875e:	2211      	movs	r2, #17
10008760:	701a      	strb	r2, [r3, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
10008762:	3a12      	subs	r2, #18
10008764:	605a      	str	r2, [r3, #4]
	
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... handle: 0x%04x, reason: 0x%02x", disconnect->handle, disconnect->reason);
10008766:	4811      	ldr	r0, [pc, #68]	; (100087ac <sms_ble_disconnected_fn+0x84>)
10008768:	4b11      	ldr	r3, [pc, #68]	; (100087b0 <sms_ble_disconnected_fn+0x88>)
1000876a:	4798      	blx	r3
1000876c:	78a2      	ldrb	r2, [r4, #2]
1000876e:	8821      	ldrh	r1, [r4, #0]
10008770:	4810      	ldr	r0, [pc, #64]	; (100087b4 <sms_ble_disconnected_fn+0x8c>)
10008772:	4b11      	ldr	r3, [pc, #68]	; (100087b8 <sms_ble_disconnected_fn+0x90>)
10008774:	4798      	blx	r3
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
10008776:	78a3      	ldrb	r3, [r4, #2]
10008778:	3b05      	subs	r3, #5
1000877a:	b2da      	uxtb	r2, r3
1000877c:	2a39      	cmp	r2, #57	; 0x39
1000877e:	d806      	bhi.n	1000878e <sms_ble_disconnected_fn+0x66>
10008780:	0093      	lsls	r3, r2, #2
10008782:	4a0e      	ldr	r2, [pc, #56]	; (100087bc <sms_ble_disconnected_fn+0x94>)
10008784:	58d3      	ldr	r3, [r2, r3]
10008786:	469f      	mov	pc, r3
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNKNOWN_LMP_PDU: // 0x19
		case BLE_ERR_CONN_FAILED: // 0x3E
		sms_ble_advertise();
10008788:	4b0d      	ldr	r3, [pc, #52]	; (100087c0 <sms_ble_disconnected_fn+0x98>)
1000878a:	4798      	blx	r3
		break;
1000878c:	e001      	b.n	10008792 <sms_ble_disconnected_fn+0x6a>
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNSPECIFIED: // 0x1F
		default:
		sms_ble_power_down();
1000878e:	4b0d      	ldr	r3, [pc, #52]	; (100087c4 <sms_ble_disconnected_fn+0x9c>)
10008790:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
10008792:	2000      	movs	r0, #0
10008794:	bd10      	pop	{r4, pc}
10008796:	46c0      	nop			; (mov r8, r8)
10008798:	1001a234 	.word	0x1001a234
1000879c:	1001a2c8 	.word	0x1001a2c8
100087a0:	1000a01d 	.word	0x1000a01d
100087a4:	1000a051 	.word	0x1000a051
100087a8:	10009d85 	.word	0x10009d85
100087ac:	10016b98 	.word	0x10016b98
100087b0:	10015b71 	.word	0x10015b71
100087b4:	10016e78 	.word	0x10016e78
100087b8:	10015a51 	.word	0x10015a51
100087bc:	10016ab0 	.word	0x10016ab0
100087c0:	10008695 	.word	0x10008695
100087c4:	100084a5 	.word	0x100084a5

100087c8 <sms_ble_startup>:
	ble_instance.sending_queue = 0;
	ble_instance.send_cnt = 0;
}

int sms_ble_startup(void)
{
100087c8:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
100087ca:	480d      	ldr	r0, [pc, #52]	; (10008800 <sms_ble_startup+0x38>)
100087cc:	4b0d      	ldr	r3, [pc, #52]	; (10008804 <sms_ble_startup+0x3c>)
100087ce:	4798      	blx	r3
100087d0:	480d      	ldr	r0, [pc, #52]	; (10008808 <sms_ble_startup+0x40>)
100087d2:	4b0e      	ldr	r3, [pc, #56]	; (1000880c <sms_ble_startup+0x44>)
100087d4:	4798      	blx	r3
100087d6:	240a      	movs	r4, #10
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100087d8:	4e0d      	ldr	r6, [pc, #52]	; (10008810 <sms_ble_startup+0x48>)
		delay_ms(SMS_BLINK_STARTUP_MS);
100087da:	4d0e      	ldr	r5, [pc, #56]	; (10008814 <sms_ble_startup+0x4c>)

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100087dc:	2016      	movs	r0, #22
100087de:	47b0      	blx	r6
		delay_ms(SMS_BLINK_STARTUP_MS);
100087e0:	2064      	movs	r0, #100	; 0x64
100087e2:	47a8      	blx	r5
100087e4:	3c01      	subs	r4, #1
100087e6:	b2e4      	uxtb	r4, r4
}

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
100087e8:	2c00      	cmp	r4, #0
100087ea:	d1f7      	bne.n	100087dc <sms_ble_startup+0x14>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_STARTUP_MS);
	}
	ulp_ready = false;
100087ec:	2200      	movs	r2, #0
100087ee:	4b0a      	ldr	r3, [pc, #40]	; (10008818 <sms_ble_startup+0x50>)
100087f0:	701a      	strb	r2, [r3, #0]
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
100087f2:	4b0a      	ldr	r3, [pc, #40]	; (1000881c <sms_ble_startup+0x54>)
100087f4:	4798      	blx	r3
100087f6:	1e43      	subs	r3, r0, #1
100087f8:	4198      	sbcs	r0, r3
100087fa:	4240      	negs	r0, r0
	return 0;
}
100087fc:	bd70      	pop	{r4, r5, r6, pc}
100087fe:	46c0      	nop			; (mov r8, r8)
10008800:	10016b98 	.word	0x10016b98
10008804:	10015b71 	.word	0x10015b71
10008808:	10016ec8 	.word	0x10016ec8
1000880c:	10015a51 	.word	0x10015a51
10008810:	10009d19 	.word	0x10009d19
10008814:	1000a48d 	.word	0x1000a48d
10008818:	1001a231 	.word	0x1001a231
1000881c:	10008695 	.word	0x10008695

10008820 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008820:	b570      	push	{r4, r5, r6, lr}
10008822:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
10008824:	2801      	cmp	r0, #1
10008826:	d02e      	beq.n	10008886 <sms_ble_send_characteristic+0x66>
10008828:	2800      	cmp	r0, #0
1000882a:	d002      	beq.n	10008832 <sms_ble_send_characteristic+0x12>
1000882c:	2802      	cmp	r0, #2
1000882e:	d040      	beq.n	100088b2 <sms_ble_send_characteristic+0x92>
10008830:	e07a      	b.n	10008928 <sms_ble_send_characteristic+0x108>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10008832:	2300      	movs	r3, #0
10008834:	466a      	mov	r2, sp
10008836:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
10008838:	4b4f      	ldr	r3, [pc, #316]	; (10008978 <sms_ble_send_characteristic+0x158>)
1000883a:	791b      	ldrb	r3, [r3, #4]
1000883c:	2b00      	cmp	r3, #0
1000883e:	d00a      	beq.n	10008856 <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008840:	4b4d      	ldr	r3, [pc, #308]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008842:	795a      	ldrb	r2, [r3, #5]
10008844:	2300      	movs	r3, #0
10008846:	2a7e      	cmp	r2, #126	; 0x7e
10008848:	d801      	bhi.n	1000884e <sms_ble_send_characteristic+0x2e>
1000884a:	3201      	adds	r2, #1
1000884c:	b2d3      	uxtb	r3, r2
1000884e:	4a4a      	ldr	r2, [pc, #296]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008850:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10008852:	466a      	mov	r2, sp
10008854:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
10008856:	4b48      	ldr	r3, [pc, #288]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008858:	7a9b      	ldrb	r3, [r3, #10]
1000885a:	2b00      	cmp	r3, #0
1000885c:	d00f      	beq.n	1000887e <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000885e:	4b46      	ldr	r3, [pc, #280]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008860:	7adb      	ldrb	r3, [r3, #11]
10008862:	2bff      	cmp	r3, #255	; 0xff
10008864:	d002      	beq.n	1000886c <sms_ble_send_characteristic+0x4c>
10008866:	3301      	adds	r3, #1
10008868:	b2db      	uxtb	r3, r3
1000886a:	e000      	b.n	1000886e <sms_ble_send_characteristic+0x4e>
1000886c:	2300      	movs	r3, #0
1000886e:	4a42      	ldr	r2, [pc, #264]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008870:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10008872:	3b80      	subs	r3, #128	; 0x80
10008874:	466a      	mov	r2, sp
10008876:	7812      	ldrb	r2, [r2, #0]
10008878:	4313      	orrs	r3, r2
1000887a:	466a      	mov	r2, sp
1000887c:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000887e:	4b3e      	ldr	r3, [pc, #248]	; (10008978 <sms_ble_send_characteristic+0x158>)
10008880:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
10008882:	2201      	movs	r2, #1
		break;
10008884:	e052      	b.n	1000892c <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.output.temperature >>24) & 0xff);
10008886:	4a3d      	ldr	r2, [pc, #244]	; (1000897c <sms_ble_send_characteristic+0x15c>)
10008888:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000888a:	1619      	asrs	r1, r3, #24
1000888c:	4668      	mov	r0, sp
1000888e:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.output.temperature >> 16) & 0xff);
10008890:	1419      	asrs	r1, r3, #16
10008892:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.output.temperature >> 8) & 0xff);
10008894:	1219      	asrs	r1, r3, #8
10008896:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.output.temperature) & 0xff);
10008898:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.output.pressure >> 24) & 0xff);
1000889a:	6a13      	ldr	r3, [r2, #32]
1000889c:	1619      	asrs	r1, r3, #24
1000889e:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.output.pressure >> 16) & 0xff);
100088a0:	1419      	asrs	r1, r3, #16
100088a2:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.output.pressure >> 8) & 0xff);
100088a4:	1219      	asrs	r1, r3, #8
100088a6:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.output.pressure) & 0xff);
100088a8:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100088aa:	2340      	movs	r3, #64	; 0x40
100088ac:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
100088ae:	2208      	movs	r2, #8
		break;
100088b0:	e03c      	b.n	1000892c <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
100088b2:	4c33      	ldr	r4, [pc, #204]	; (10008980 <sms_ble_send_characteristic+0x160>)
100088b4:	4e33      	ldr	r6, [pc, #204]	; (10008984 <sms_ble_send_characteristic+0x164>)
100088b6:	4934      	ldr	r1, [pc, #208]	; (10008988 <sms_ble_send_characteristic+0x168>)
100088b8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
100088ba:	47b0      	blx	r6
100088bc:	4d33      	ldr	r5, [pc, #204]	; (1000898c <sms_ble_send_characteristic+0x16c>)
100088be:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
		send_val[0] = (uint8_t)(int_val & 0xff);
100088c0:	466b      	mov	r3, sp
100088c2:	7018      	strb	r0, [r3, #0]
		send_val[1] = (uint8_t)((int_val >> 8) & 0xff);
100088c4:	0a03      	lsrs	r3, r0, #8
100088c6:	466a      	mov	r2, sp
100088c8:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 16) & 0xff);
100088ca:	0c03      	lsrs	r3, r0, #16
100088cc:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 24) & 0xff);
100088ce:	0e00      	lsrs	r0, r0, #24
100088d0:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
100088d2:	492d      	ldr	r1, [pc, #180]	; (10008988 <sms_ble_send_characteristic+0x168>)
100088d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100088d6:	47b0      	blx	r6
100088d8:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
		send_val[4] = (uint8_t)(int_val & 0xff);
100088da:	466b      	mov	r3, sp
100088dc:	7118      	strb	r0, [r3, #4]
		send_val[5] = (uint8_t)((int_val >> 8) & 0xff);
100088de:	0a03      	lsrs	r3, r0, #8
100088e0:	466a      	mov	r2, sp
100088e2:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 16) & 0xff);
100088e4:	0c03      	lsrs	r3, r0, #16
100088e6:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 24) & 0xff);
100088e8:	0e00      	lsrs	r0, r0, #24
100088ea:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
100088ec:	4926      	ldr	r1, [pc, #152]	; (10008988 <sms_ble_send_characteristic+0x168>)
100088ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
100088f0:	47b0      	blx	r6
100088f2:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(int_val & 0xff);
100088f4:	466b      	mov	r3, sp
100088f6:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((int_val >> 8) & 0xff);
100088f8:	0a03      	lsrs	r3, r0, #8
100088fa:	466a      	mov	r2, sp
100088fc:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 16) & 0xff);
100088fe:	0c03      	lsrs	r3, r0, #16
10008900:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 24) & 0xff);
10008902:	0e00      	lsrs	r0, r0, #24
10008904:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
10008906:	4920      	ldr	r1, [pc, #128]	; (10008988 <sms_ble_send_characteristic+0x168>)
10008908:	6f60      	ldr	r0, [r4, #116]	; 0x74
1000890a:	47b0      	blx	r6
1000890c:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(int_val & 0xff);
1000890e:	466b      	mov	r3, sp
10008910:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((int_val >> 8) & 0xff);
10008912:	0a03      	lsrs	r3, r0, #8
10008914:	466a      	mov	r2, sp
10008916:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 16) & 0xff);
10008918:	0c03      	lsrs	r3, r0, #16
1000891a:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 24) & 0xff);
1000891c:	0e00      	lsrs	r0, r0, #24
1000891e:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10008920:	239c      	movs	r3, #156	; 0x9c
10008922:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
10008924:	2210      	movs	r2, #16
		

		break;
10008926:	e001      	b.n	1000892c <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
10008928:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
1000892a:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000892c:	b292      	uxth	r2, r2
1000892e:	4669      	mov	r1, sp
10008930:	0028      	movs	r0, r5
10008932:	4b17      	ldr	r3, [pc, #92]	; (10008990 <sms_ble_send_characteristic+0x170>)
10008934:	4798      	blx	r3
10008936:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
10008938:	d115      	bne.n	10008966 <sms_ble_send_characteristic+0x146>
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		status = at_ble_notification_send(ble_instance.conn_handle, val_handle);
1000893a:	4b16      	ldr	r3, [pc, #88]	; (10008994 <sms_ble_send_characteristic+0x174>)
1000893c:	8958      	ldrh	r0, [r3, #10]
1000893e:	0029      	movs	r1, r5
10008940:	4b15      	ldr	r3, [pc, #84]	; (10008998 <sms_ble_send_characteristic+0x178>)
10008942:	4798      	blx	r3
10008944:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
10008946:	d10a      	bne.n	1000895e <sms_ble_send_characteristic+0x13e>
			ble_instance.sending_queue++;
10008948:	4b12      	ldr	r3, [pc, #72]	; (10008994 <sms_ble_send_characteristic+0x174>)
1000894a:	7a1a      	ldrb	r2, [r3, #8]
1000894c:	3201      	adds	r2, #1
1000894e:	b2d2      	uxtb	r2, r2
10008950:	721a      	strb	r2, [r3, #8]
			ble_instance.send_cnt++;
10008952:	89da      	ldrh	r2, [r3, #14]
10008954:	3201      	adds	r2, #1
10008956:	81da      	strh	r2, [r3, #14]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			ble_instance.timeout = BLE_APP_TIMEOUT_NOTIFY;
10008958:	2202      	movs	r2, #2
1000895a:	605a      	str	r2, [r3, #4]
1000895c:	e009      	b.n	10008972 <sms_ble_send_characteristic+0x152>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000895e:	480f      	ldr	r0, [pc, #60]	; (1000899c <sms_ble_send_characteristic+0x17c>)
10008960:	4b0f      	ldr	r3, [pc, #60]	; (100089a0 <sms_ble_send_characteristic+0x180>)
10008962:	4798      	blx	r3
10008964:	e005      	b.n	10008972 <sms_ble_send_characteristic+0x152>
		//DBG_LOG_DEV(" NOT gone? ");
		//#pragma TBD: handle sending error...
		//}
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
10008966:	480f      	ldr	r0, [pc, #60]	; (100089a4 <sms_ble_send_characteristic+0x184>)
10008968:	4b0f      	ldr	r3, [pc, #60]	; (100089a8 <sms_ble_send_characteristic+0x188>)
1000896a:	4798      	blx	r3
1000896c:	480f      	ldr	r0, [pc, #60]	; (100089ac <sms_ble_send_characteristic+0x18c>)
1000896e:	4b0c      	ldr	r3, [pc, #48]	; (100089a0 <sms_ble_send_characteristic+0x180>)
10008970:	4798      	blx	r3
	}
	return status;
}
10008972:	0020      	movs	r0, r4
10008974:	b004      	add	sp, #16
10008976:	bd70      	pop	{r4, r5, r6, pc}
10008978:	1001a244 	.word	0x1001a244
1000897c:	1001a2c8 	.word	0x1001a2c8
10008980:	1001a37c 	.word	0x1001a37c
10008984:	10013411 	.word	0x10013411
10008988:	49742400 	.word	0x49742400
1000898c:	10013011 	.word	0x10013011
10008990:	1000fa6d 	.word	0x1000fa6d
10008994:	1001a234 	.word	0x1001a234
10008998:	1000fc0d 	.word	0x1000fc0d
1000899c:	10016eec 	.word	0x10016eec
100089a0:	10015a51 	.word	0x10015a51
100089a4:	10016b98 	.word	0x10016b98
100089a8:	10015b71 	.word	0x10015b71
100089ac:	10016f04 	.word	0x10016f04

100089b0 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100089b0:	b510      	push	{r4, lr}
100089b2:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100089b4:	0001      	movs	r1, r0
100089b6:	3112      	adds	r1, #18
100089b8:	2301      	movs	r3, #1
100089ba:	9301      	str	r3, [sp, #4]
100089bc:	0003      	movs	r3, r0
100089be:	3314      	adds	r3, #20
100089c0:	9300      	str	r3, [sp, #0]
100089c2:	2300      	movs	r3, #0
100089c4:	2200      	movs	r2, #0
100089c6:	4c02      	ldr	r4, [pc, #8]	; (100089d0 <sms_ble_primary_service_define+0x20>)
100089c8:	47a0      	blx	r4
}
100089ca:	b002      	add	sp, #8
100089cc:	bd10      	pop	{r4, pc}
100089ce:	46c0      	nop			; (mov r8, r8)
100089d0:	1000fa4d 	.word	0x1000fa4d

100089d4 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100089d6:	464f      	mov	r7, r9
100089d8:	4646      	mov	r6, r8
100089da:	b4c0      	push	{r6, r7}
100089dc:	b083      	sub	sp, #12
100089de:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
100089e0:	2801      	cmp	r0, #1
100089e2:	d010      	beq.n	10008a06 <sms_ble_service_init+0x32>
100089e4:	2800      	cmp	r0, #0
100089e6:	d002      	beq.n	100089ee <sms_ble_service_init+0x1a>
100089e8:	2802      	cmp	r0, #2
100089ea:	d019      	beq.n	10008a20 <sms_ble_service_init+0x4c>
100089ec:	e025      	b.n	10008a3a <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100089ee:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100089f0:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100089f2:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100089f4:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100089f6:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100089f8:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100089fa:	221c      	movs	r2, #28
100089fc:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
100089fe:	3a1b      	subs	r2, #27
10008a00:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
10008a02:	4691      	mov	r9, r2
10008a04:	e023      	b.n	10008a4e <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008a06:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008a08:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008a0a:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008a0c:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008a0e:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008a10:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008a12:	221c      	movs	r2, #28
10008a14:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
10008a16:	3a14      	subs	r2, #20
10008a18:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10008a1a:	3a06      	subs	r2, #6
10008a1c:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10008a1e:	e016      	b.n	10008a4e <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 8) & 0xFF);
10008a20:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
10008a22:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
10008a24:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
10008a26:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
10008a28:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
10008a2a:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
10008a2c:	221c      	movs	r2, #28
10008a2e:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10008a30:	3a08      	subs	r2, #8
10008a32:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
10008a34:	3a11      	subs	r2, #17
10008a36:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10008a38:	e009      	b.n	10008a4e <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10008a3a:	2300      	movs	r3, #0
10008a3c:	2400      	movs	r4, #0
10008a3e:	2500      	movs	r5, #0
10008a40:	2600      	movs	r6, #0
10008a42:	2700      	movs	r7, #0
10008a44:	2000      	movs	r0, #0
10008a46:	2200      	movs	r2, #0
10008a48:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10008a4a:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10008a4c:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10008a4e:	464a      	mov	r2, r9
10008a50:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
10008a52:	2202      	movs	r2, #2
10008a54:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
10008a56:	4642      	mov	r2, r8
10008a58:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10008a5a:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10008a5c:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10008a5e:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10008a60:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
10008a62:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
10008a64:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
10008a66:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10008a68:	2300      	movs	r3, #0
10008a6a:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10008a6c:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10008a6e:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10008a70:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
10008a72:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
10008a74:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
10008a76:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10008a78:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008a7a:	2412      	movs	r4, #18
10008a7c:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10008a7e:	4662      	mov	r2, ip
10008a80:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008a82:	466a      	mov	r2, sp
10008a84:	8892      	ldrh	r2, [r2, #4]
10008a86:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008a88:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008a8a:	2011      	movs	r0, #17
10008a8c:	2234      	movs	r2, #52	; 0x34
10008a8e:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10008a90:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
10008a92:	2200      	movs	r2, #0
10008a94:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
10008a96:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008a98:	3033      	adds	r0, #51	; 0x33
10008a9a:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008a9c:	3001      	adds	r0, #1
10008a9e:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008aa0:	3001      	adds	r0, #1
10008aa2:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
10008aa4:	2248      	movs	r2, #72	; 0x48
10008aa6:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
10008aa8:	3202      	adds	r2, #2
10008aaa:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
10008aac:	3202      	adds	r2, #2
10008aae:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
10008ab0:	640b      	str	r3, [r1, #64]	; 0x40
10008ab2:	b003      	add	sp, #12
10008ab4:	bc0c      	pop	{r2, r3}
10008ab6:	4690      	mov	r8, r2
10008ab8:	4699      	mov	r9, r3
10008aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008abc <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008abc:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008abe:	4b05      	ldr	r3, [pc, #20]	; (10008ad4 <sms_button_bt0_callback+0x18>)
10008ac0:	2201      	movs	r2, #1
10008ac2:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
10008ac4:	7858      	ldrb	r0, [r3, #1]
10008ac6:	2300      	movs	r3, #0
10008ac8:	2200      	movs	r2, #0
10008aca:	2101      	movs	r1, #1
10008acc:	4c02      	ldr	r4, [pc, #8]	; (10008ad8 <sms_button_bt0_callback+0x1c>)
10008ace:	47a0      	blx	r4
}
10008ad0:	bd10      	pop	{r4, pc}
10008ad2:	46c0      	nop			; (mov r8, r8)
10008ad4:	1001a244 	.word	0x1001a244
10008ad8:	1000ddc1 	.word	0x1000ddc1

10008adc <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008adc:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008ade:	4b05      	ldr	r3, [pc, #20]	; (10008af4 <sms_button_bt1_callback+0x18>)
10008ae0:	2201      	movs	r2, #1
10008ae2:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
10008ae4:	79d8      	ldrb	r0, [r3, #7]
10008ae6:	2300      	movs	r3, #0
10008ae8:	2200      	movs	r2, #0
10008aea:	2101      	movs	r1, #1
10008aec:	4c02      	ldr	r4, [pc, #8]	; (10008af8 <sms_button_bt1_callback+0x1c>)
10008aee:	47a0      	blx	r4
}
10008af0:	bd10      	pop	{r4, pc}
10008af2:	46c0      	nop			; (mov r8, r8)
10008af4:	1001a244 	.word	0x1001a244
10008af8:	1000ddc1 	.word	0x1000ddc1

10008afc <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008afc:	4b08      	ldr	r3, [pc, #32]	; (10008b20 <sms_button_init_variables+0x24>)
10008afe:	2200      	movs	r2, #0
10008b00:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008b02:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008b04:	211f      	movs	r1, #31
10008b06:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008b08:	391e      	subs	r1, #30
10008b0a:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008b0c:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008b0e:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008b10:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008b12:	201d      	movs	r0, #29
10008b14:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008b16:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008b18:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008b1a:	72da      	strb	r2, [r3, #11]
}
10008b1c:	4770      	bx	lr
10008b1e:	46c0      	nop			; (mov r8, r8)
10008b20:	1001a244 	.word	0x1001a244

10008b24 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008b24:	b510      	push	{r4, lr}
10008b26:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b28:	ac01      	add	r4, sp, #4
10008b2a:	0020      	movs	r0, r4
10008b2c:	4b20      	ldr	r3, [pc, #128]	; (10008bb0 <sms_button_gpio_init+0x8c>)
10008b2e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b30:	2300      	movs	r3, #0
10008b32:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b34:	3302      	adds	r3, #2
10008b36:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b38:	3b01      	subs	r3, #1
10008b3a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b3c:	4b1d      	ldr	r3, [pc, #116]	; (10008bb4 <sms_button_gpio_init+0x90>)
10008b3e:	7858      	ldrb	r0, [r3, #1]
10008b40:	0021      	movs	r1, r4
10008b42:	4b1d      	ldr	r3, [pc, #116]	; (10008bb8 <sms_button_gpio_init+0x94>)
10008b44:	4798      	blx	r3
10008b46:	2800      	cmp	r0, #0
10008b48:	d005      	beq.n	10008b56 <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008b4a:	481c      	ldr	r0, [pc, #112]	; (10008bbc <sms_button_gpio_init+0x98>)
10008b4c:	4b1c      	ldr	r3, [pc, #112]	; (10008bc0 <sms_button_gpio_init+0x9c>)
10008b4e:	4798      	blx	r3
10008b50:	481c      	ldr	r0, [pc, #112]	; (10008bc4 <sms_button_gpio_init+0xa0>)
10008b52:	4b1d      	ldr	r3, [pc, #116]	; (10008bc8 <sms_button_gpio_init+0xa4>)
10008b54:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b56:	ac01      	add	r4, sp, #4
10008b58:	0020      	movs	r0, r4
10008b5a:	4b15      	ldr	r3, [pc, #84]	; (10008bb0 <sms_button_gpio_init+0x8c>)
10008b5c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b5e:	2300      	movs	r3, #0
10008b60:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b62:	3302      	adds	r3, #2
10008b64:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b66:	3b01      	subs	r3, #1
10008b68:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b6a:	4b12      	ldr	r3, [pc, #72]	; (10008bb4 <sms_button_gpio_init+0x90>)
10008b6c:	79d8      	ldrb	r0, [r3, #7]
10008b6e:	0021      	movs	r1, r4
10008b70:	4b11      	ldr	r3, [pc, #68]	; (10008bb8 <sms_button_gpio_init+0x94>)
10008b72:	4798      	blx	r3
10008b74:	2800      	cmp	r0, #0
10008b76:	d005      	beq.n	10008b84 <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008b78:	4810      	ldr	r0, [pc, #64]	; (10008bbc <sms_button_gpio_init+0x98>)
10008b7a:	4b11      	ldr	r3, [pc, #68]	; (10008bc0 <sms_button_gpio_init+0x9c>)
10008b7c:	4798      	blx	r3
10008b7e:	4813      	ldr	r0, [pc, #76]	; (10008bcc <sms_button_gpio_init+0xa8>)
10008b80:	4b11      	ldr	r3, [pc, #68]	; (10008bc8 <sms_button_gpio_init+0xa4>)
10008b82:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008b84:	ac01      	add	r4, sp, #4
10008b86:	0020      	movs	r0, r4
10008b88:	4b09      	ldr	r3, [pc, #36]	; (10008bb0 <sms_button_gpio_init+0x8c>)
10008b8a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b8c:	2300      	movs	r3, #0
10008b8e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008b90:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008b92:	0021      	movs	r1, r4
10008b94:	2017      	movs	r0, #23
10008b96:	4b08      	ldr	r3, [pc, #32]	; (10008bb8 <sms_button_gpio_init+0x94>)
10008b98:	4798      	blx	r3
10008b9a:	2800      	cmp	r0, #0
10008b9c:	d005      	beq.n	10008baa <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008b9e:	4807      	ldr	r0, [pc, #28]	; (10008bbc <sms_button_gpio_init+0x98>)
10008ba0:	4b07      	ldr	r3, [pc, #28]	; (10008bc0 <sms_button_gpio_init+0x9c>)
10008ba2:	4798      	blx	r3
10008ba4:	480a      	ldr	r0, [pc, #40]	; (10008bd0 <sms_button_gpio_init+0xac>)
10008ba6:	4b08      	ldr	r3, [pc, #32]	; (10008bc8 <sms_button_gpio_init+0xa4>)
10008ba8:	4798      	blx	r3
    }
}
10008baa:	b002      	add	sp, #8
10008bac:	bd10      	pop	{r4, pc}
10008bae:	46c0      	nop			; (mov r8, r8)
10008bb0:	1000ab3d 	.word	0x1000ab3d
10008bb4:	1001a244 	.word	0x1001a244
10008bb8:	1000ab4d 	.word	0x1000ab4d
10008bbc:	10016b98 	.word	0x10016b98
10008bc0:	10015b71 	.word	0x10015b71
10008bc4:	10016f84 	.word	0x10016f84
10008bc8:	10015a51 	.word	0x10015a51
10008bcc:	10016fbc 	.word	0x10016fbc
10008bd0:	10016ff4 	.word	0x10016ff4

10008bd4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008bd4:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_HIGH);
10008bd6:	4d05      	ldr	r5, [pc, #20]	; (10008bec <sms_button_register_callbacks+0x18>)
10008bd8:	7868      	ldrb	r0, [r5, #1]
10008bda:	2201      	movs	r2, #1
10008bdc:	4904      	ldr	r1, [pc, #16]	; (10008bf0 <sms_button_register_callbacks+0x1c>)
10008bde:	4c05      	ldr	r4, [pc, #20]	; (10008bf4 <sms_button_register_callbacks+0x20>)
10008be0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_HIGH);
10008be2:	79e8      	ldrb	r0, [r5, #7]
10008be4:	2201      	movs	r2, #1
10008be6:	4904      	ldr	r1, [pc, #16]	; (10008bf8 <sms_button_register_callbacks+0x24>)
10008be8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008bea:	bd70      	pop	{r4, r5, r6, pc}
10008bec:	1001a244 	.word	0x1001a244
10008bf0:	10008abd 	.word	0x10008abd
10008bf4:	1000af7d 	.word	0x1000af7d
10008bf8:	10008add 	.word	0x10008add

10008bfc <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008bfc:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008bfe:	201f      	movs	r0, #31
10008c00:	4c08      	ldr	r4, [pc, #32]	; (10008c24 <sms_button_get_state+0x28>)
10008c02:	47a0      	blx	r4
10008c04:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008c06:	201d      	movs	r0, #29
10008c08:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008c0a:	2d00      	cmp	r5, #0
10008c0c:	d004      	beq.n	10008c18 <sms_button_get_state+0x1c>
10008c0e:	2303      	movs	r3, #3
10008c10:	2800      	cmp	r0, #0
10008c12:	d104      	bne.n	10008c1e <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008c14:	3b02      	subs	r3, #2
10008c16:	e002      	b.n	10008c1e <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008c18:	1e43      	subs	r3, r0, #1
10008c1a:	4198      	sbcs	r0, r3
10008c1c:	0043      	lsls	r3, r0, #1
}
10008c1e:	0018      	movs	r0, r3
10008c20:	bd70      	pop	{r4, r5, r6, pc}
10008c22:	46c0      	nop			; (mov r8, r8)
10008c24:	1000ad05 	.word	0x1000ad05

10008c28 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008c2a:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10008c2c:	4c4d      	ldr	r4, [pc, #308]	; (10008d64 <sms_button_fn+0x13c>)
10008c2e:	7b63      	ldrb	r3, [r4, #13]
10008c30:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008c32:	4b4d      	ldr	r3, [pc, #308]	; (10008d68 <sms_button_fn+0x140>)
10008c34:	4798      	blx	r3
10008c36:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008c38:	2d00      	cmp	r5, #0
10008c3a:	d103      	bne.n	10008c44 <sms_button_fn+0x1c>
10008c3c:	484b      	ldr	r0, [pc, #300]	; (10008d6c <sms_button_fn+0x144>)
10008c3e:	4b4c      	ldr	r3, [pc, #304]	; (10008d70 <sms_button_fn+0x148>)
10008c40:	4798      	blx	r3
10008c42:	e004      	b.n	10008c4e <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008c44:	2d01      	cmp	r5, #1
10008c46:	d16e      	bne.n	10008d26 <sms_button_fn+0xfe>
10008c48:	484a      	ldr	r0, [pc, #296]	; (10008d74 <sms_button_fn+0x14c>)
10008c4a:	4b49      	ldr	r3, [pc, #292]	; (10008d70 <sms_button_fn+0x148>)
10008c4c:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10008c4e:	4b45      	ldr	r3, [pc, #276]	; (10008d64 <sms_button_fn+0x13c>)
10008c50:	7b5b      	ldrb	r3, [r3, #13]
10008c52:	b2da      	uxtb	r2, r3
10008c54:	2a02      	cmp	r2, #2
10008c56:	d802      	bhi.n	10008c5e <sms_button_fn+0x36>
10008c58:	2b00      	cmp	r3, #0
10008c5a:	d05c      	beq.n	10008d16 <sms_button_fn+0xee>
10008c5c:	e002      	b.n	10008c64 <sms_button_fn+0x3c>
10008c5e:	2b03      	cmp	r3, #3
10008c60:	d032      	beq.n	10008cc8 <sms_button_fn+0xa0>
10008c62:	e063      	b.n	10008d2c <sms_button_fn+0x104>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008c64:	4b44      	ldr	r3, [pc, #272]	; (10008d78 <sms_button_fn+0x150>)
10008c66:	781b      	ldrb	r3, [r3, #0]
10008c68:	b2db      	uxtb	r3, r3
10008c6a:	2b00      	cmp	r3, #0
10008c6c:	d003      	beq.n	10008c76 <sms_button_fn+0x4e>
10008c6e:	3b22      	subs	r3, #34	; 0x22
10008c70:	2b01      	cmp	r3, #1
10008c72:	d820      	bhi.n	10008cb6 <sms_button_fn+0x8e>
10008c74:	e01a      	b.n	10008cac <sms_button_fn+0x84>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
10008c76:	4841      	ldr	r0, [pc, #260]	; (10008d7c <sms_button_fn+0x154>)
10008c78:	4b41      	ldr	r3, [pc, #260]	; (10008d80 <sms_button_fn+0x158>)
10008c7a:	4798      	blx	r3
10008c7c:	4841      	ldr	r0, [pc, #260]	; (10008d84 <sms_button_fn+0x15c>)
10008c7e:	4b42      	ldr	r3, [pc, #264]	; (10008d88 <sms_button_fn+0x160>)
10008c80:	4798      	blx	r3
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008c82:	201f      	movs	r0, #31
10008c84:	4b41      	ldr	r3, [pc, #260]	; (10008d8c <sms_button_fn+0x164>)
10008c86:	4798      	blx	r3
10008c88:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
				delay_ms(SMS_BTN_STARTUP_MS);
10008c8a:	4f41      	ldr	r7, [pc, #260]	; (10008d90 <sms_button_fn+0x168>)
				if(sms_button_get_state() != button_instance.current_state) {
10008c8c:	4e36      	ldr	r6, [pc, #216]	; (10008d68 <sms_button_fn+0x140>)
10008c8e:	4d35      	ldr	r5, [pc, #212]	; (10008d64 <sms_button_fn+0x13c>)
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
				delay_ms(SMS_BTN_STARTUP_MS);
10008c90:	2032      	movs	r0, #50	; 0x32
10008c92:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008c94:	47b0      	blx	r6
10008c96:	7b6b      	ldrb	r3, [r5, #13]
10008c98:	4283      	cmp	r3, r0
10008c9a:	d149      	bne.n	10008d30 <sms_button_fn+0x108>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
10008c9c:	202e      	movs	r0, #46	; 0x2e
10008c9e:	4b3d      	ldr	r3, [pc, #244]	; (10008d94 <sms_button_fn+0x16c>)
10008ca0:	4798      	blx	r3
10008ca2:	3c01      	subs	r4, #1
10008ca4:	b2e4      	uxtb	r4, r4
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
10008ca6:	2c00      	cmp	r4, #0
10008ca8:	d1f2      	bne.n	10008c90 <sms_button_fn+0x68>
10008caa:	e046      	b.n	10008d3a <sms_button_fn+0x112>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008cac:	2000      	movs	r0, #0
10008cae:	4b3a      	ldr	r3, [pc, #232]	; (10008d98 <sms_button_fn+0x170>)
10008cb0:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cb2:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008cb4:	e055      	b.n	10008d62 <sms_button_fn+0x13a>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
10008cb6:	4831      	ldr	r0, [pc, #196]	; (10008d7c <sms_button_fn+0x154>)
10008cb8:	4b31      	ldr	r3, [pc, #196]	; (10008d80 <sms_button_fn+0x158>)
10008cba:	4798      	blx	r3
10008cbc:	4837      	ldr	r0, [pc, #220]	; (10008d9c <sms_button_fn+0x174>)
10008cbe:	4b32      	ldr	r3, [pc, #200]	; (10008d88 <sms_button_fn+0x160>)
10008cc0:	4798      	blx	r3
            return -1;
10008cc2:	2001      	movs	r0, #1
10008cc4:	4240      	negs	r0, r0
10008cc6:	e04c      	b.n	10008d62 <sms_button_fn+0x13a>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008cc8:	4b2b      	ldr	r3, [pc, #172]	; (10008d78 <sms_button_fn+0x150>)
10008cca:	781b      	ldrb	r3, [r3, #0]
10008ccc:	2b00      	cmp	r3, #0
10008cce:	d107      	bne.n	10008ce0 <sms_button_fn+0xb8>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
10008cd0:	482a      	ldr	r0, [pc, #168]	; (10008d7c <sms_button_fn+0x154>)
10008cd2:	4b2b      	ldr	r3, [pc, #172]	; (10008d80 <sms_button_fn+0x158>)
10008cd4:	4798      	blx	r3
10008cd6:	4832      	ldr	r0, [pc, #200]	; (10008da0 <sms_button_fn+0x178>)
10008cd8:	4b2b      	ldr	r3, [pc, #172]	; (10008d88 <sms_button_fn+0x160>)
10008cda:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cdc:	2000      	movs	r0, #0
10008cde:	e040      	b.n	10008d62 <sms_button_fn+0x13a>
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
10008ce0:	4826      	ldr	r0, [pc, #152]	; (10008d7c <sms_button_fn+0x154>)
10008ce2:	4b27      	ldr	r3, [pc, #156]	; (10008d80 <sms_button_fn+0x158>)
10008ce4:	4798      	blx	r3
10008ce6:	482f      	ldr	r0, [pc, #188]	; (10008da4 <sms_button_fn+0x17c>)
10008ce8:	4b27      	ldr	r3, [pc, #156]	; (10008d88 <sms_button_fn+0x160>)
10008cea:	4798      	blx	r3
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008cec:	201f      	movs	r0, #31
10008cee:	4b27      	ldr	r3, [pc, #156]	; (10008d8c <sms_button_fn+0x164>)
10008cf0:	4798      	blx	r3
10008cf2:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
				delay_ms(SMS_BTN_SHTDWN_MS);
10008cf4:	4f26      	ldr	r7, [pc, #152]	; (10008d90 <sms_button_fn+0x168>)
				if(sms_button_get_state() != button_instance.current_state) {
10008cf6:	4e1c      	ldr	r6, [pc, #112]	; (10008d68 <sms_button_fn+0x140>)
10008cf8:	4d1a      	ldr	r5, [pc, #104]	; (10008d64 <sms_button_fn+0x13c>)
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
				delay_ms(SMS_BTN_SHTDWN_MS);
10008cfa:	2032      	movs	r0, #50	; 0x32
10008cfc:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008cfe:	47b0      	blx	r6
10008d00:	7b6b      	ldrb	r3, [r5, #13]
10008d02:	4283      	cmp	r3, r0
10008d04:	d129      	bne.n	10008d5a <sms_button_fn+0x132>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
10008d06:	202e      	movs	r0, #46	; 0x2e
10008d08:	4b22      	ldr	r3, [pc, #136]	; (10008d94 <sms_button_fn+0x16c>)
10008d0a:	4798      	blx	r3
10008d0c:	3c01      	subs	r4, #1
10008d0e:	b2e4      	uxtb	r4, r4
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
10008d10:	2c00      	cmp	r4, #0
10008d12:	d1f2      	bne.n	10008cfa <sms_button_fn+0xd2>
10008d14:	e01a      	b.n	10008d4c <sms_button_fn+0x124>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
10008d16:	4819      	ldr	r0, [pc, #100]	; (10008d7c <sms_button_fn+0x154>)
10008d18:	4b19      	ldr	r3, [pc, #100]	; (10008d80 <sms_button_fn+0x158>)
10008d1a:	4798      	blx	r3
10008d1c:	4822      	ldr	r0, [pc, #136]	; (10008da8 <sms_button_fn+0x180>)
10008d1e:	4b1a      	ldr	r3, [pc, #104]	; (10008d88 <sms_button_fn+0x160>)
10008d20:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d22:	2000      	movs	r0, #0
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008d24:	e01d      	b.n	10008d62 <sms_button_fn+0x13a>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008d26:	2001      	movs	r0, #1
10008d28:	4240      	negs	r0, r0
10008d2a:	e01a      	b.n	10008d62 <sms_button_fn+0x13a>
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d2c:	2000      	movs	r0, #0
10008d2e:	e018      	b.n	10008d62 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d30:	201f      	movs	r0, #31
10008d32:	4b1e      	ldr	r3, [pc, #120]	; (10008dac <sms_button_fn+0x184>)
10008d34:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d36:	2000      	movs	r0, #0
10008d38:	e013      	b.n	10008d62 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d3a:	201f      	movs	r0, #31
10008d3c:	4b1b      	ldr	r3, [pc, #108]	; (10008dac <sms_button_fn+0x184>)
10008d3e:	4798      	blx	r3
			if(wait_success) {
				if(sms_ble_startup()) return -1;
10008d40:	4b1b      	ldr	r3, [pc, #108]	; (10008db0 <sms_button_fn+0x188>)
10008d42:	4798      	blx	r3
10008d44:	1e43      	subs	r3, r0, #1
10008d46:	4198      	sbcs	r0, r3
10008d48:	4240      	negs	r0, r0
10008d4a:	e00a      	b.n	10008d62 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d4c:	201f      	movs	r0, #31
10008d4e:	4b17      	ldr	r3, [pc, #92]	; (10008dac <sms_button_fn+0x184>)
10008d50:	4798      	blx	r3
			if(wait_success) {
				sms_ble_power_down();
10008d52:	4b18      	ldr	r3, [pc, #96]	; (10008db4 <sms_button_fn+0x18c>)
10008d54:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d56:	2000      	movs	r0, #0
10008d58:	e003      	b.n	10008d62 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d5a:	201f      	movs	r0, #31
10008d5c:	4b13      	ldr	r3, [pc, #76]	; (10008dac <sms_button_fn+0x184>)
10008d5e:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d60:	2000      	movs	r0, #0
}
10008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008d64:	1001a244 	.word	0x1001a244
10008d68:	10008bfd 	.word	0x10008bfd
10008d6c:	1001703c 	.word	0x1001703c
10008d70:	10008ee5 	.word	0x10008ee5
10008d74:	10017050 	.word	0x10017050
10008d78:	1001a234 	.word	0x1001a234
10008d7c:	10016b98 	.word	0x10016b98
10008d80:	10015b71 	.word	0x10015b71
10008d84:	10017064 	.word	0x10017064
10008d88:	10015a51 	.word	0x10015a51
10008d8c:	10008f41 	.word	0x10008f41
10008d90:	1000a48d 	.word	0x1000a48d
10008d94:	10015a85 	.word	0x10015a85
10008d98:	10008821 	.word	0x10008821
10008d9c:	10017084 	.word	0x10017084
10008da0:	100170ac 	.word	0x100170ac
10008da4:	100170d0 	.word	0x100170d0
10008da8:	100170f4 	.word	0x100170f4
10008dac:	10008fa1 	.word	0x10008fa1
10008db0:	100087c9 	.word	0x100087c9
10008db4:	100084a5 	.word	0x100084a5

10008db8 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008db8:	b510      	push	{r4, lr}
10008dba:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008dbc:	2800      	cmp	r0, #0
10008dbe:	d104      	bne.n	10008dca <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008dc0:	4b0c      	ldr	r3, [pc, #48]	; (10008df4 <sms_button_toggle_callback+0x3c>)
10008dc2:	7858      	ldrb	r0, [r3, #1]
10008dc4:	4b0c      	ldr	r3, [pc, #48]	; (10008df8 <sms_button_toggle_callback+0x40>)
10008dc6:	4798      	blx	r3
10008dc8:	e005      	b.n	10008dd6 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008dca:	2801      	cmp	r0, #1
10008dcc:	d103      	bne.n	10008dd6 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008dce:	4b09      	ldr	r3, [pc, #36]	; (10008df4 <sms_button_toggle_callback+0x3c>)
10008dd0:	7858      	ldrb	r0, [r3, #1]
10008dd2:	4b0a      	ldr	r3, [pc, #40]	; (10008dfc <sms_button_toggle_callback+0x44>)
10008dd4:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008dd6:	2c00      	cmp	r4, #0
10008dd8:	d104      	bne.n	10008de4 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008dda:	4b06      	ldr	r3, [pc, #24]	; (10008df4 <sms_button_toggle_callback+0x3c>)
10008ddc:	79d8      	ldrb	r0, [r3, #7]
10008dde:	4b06      	ldr	r3, [pc, #24]	; (10008df8 <sms_button_toggle_callback+0x40>)
10008de0:	4798      	blx	r3
10008de2:	e005      	b.n	10008df0 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008de4:	2c01      	cmp	r4, #1
10008de6:	d103      	bne.n	10008df0 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008de8:	4b02      	ldr	r3, [pc, #8]	; (10008df4 <sms_button_toggle_callback+0x3c>)
10008dea:	79d8      	ldrb	r0, [r3, #7]
10008dec:	4b03      	ldr	r3, [pc, #12]	; (10008dfc <sms_button_toggle_callback+0x44>)
10008dee:	4798      	blx	r3
    }
}
10008df0:	bd10      	pop	{r4, pc}
10008df2:	46c0      	nop			; (mov r8, r8)
10008df4:	1001a244 	.word	0x1001a244
10008df8:	1000b04d 	.word	0x1000b04d
10008dfc:	1000b0a9 	.word	0x1000b0a9

10008e00 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008e00:	b510      	push	{r4, lr}
10008e02:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e04:	466b      	mov	r3, sp
10008e06:	1dda      	adds	r2, r3, #7
10008e08:	2300      	movs	r3, #0
10008e0a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008e0c:	4c0d      	ldr	r4, [pc, #52]	; (10008e44 <sms_button_define_services+0x44>)
10008e0e:	0021      	movs	r1, r4
10008e10:	2000      	movs	r0, #0
10008e12:	4b0d      	ldr	r3, [pc, #52]	; (10008e48 <sms_button_define_services+0x48>)
10008e14:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008e16:	0020      	movs	r0, r4
10008e18:	4b0c      	ldr	r3, [pc, #48]	; (10008e4c <sms_button_define_services+0x4c>)
10008e1a:	4798      	blx	r3
10008e1c:	1e04      	subs	r4, r0, #0
10008e1e:	d007      	beq.n	10008e30 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008e20:	480b      	ldr	r0, [pc, #44]	; (10008e50 <sms_button_define_services+0x50>)
10008e22:	4b0c      	ldr	r3, [pc, #48]	; (10008e54 <sms_button_define_services+0x54>)
10008e24:	4798      	blx	r3
10008e26:	0021      	movs	r1, r4
10008e28:	480b      	ldr	r0, [pc, #44]	; (10008e58 <sms_button_define_services+0x58>)
10008e2a:	4b0c      	ldr	r3, [pc, #48]	; (10008e5c <sms_button_define_services+0x5c>)
10008e2c:	4798      	blx	r3
10008e2e:	e007      	b.n	10008e40 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008e30:	4807      	ldr	r0, [pc, #28]	; (10008e50 <sms_button_define_services+0x50>)
10008e32:	4b08      	ldr	r3, [pc, #32]	; (10008e54 <sms_button_define_services+0x54>)
10008e34:	4798      	blx	r3
10008e36:	4b0a      	ldr	r3, [pc, #40]	; (10008e60 <sms_button_define_services+0x60>)
10008e38:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008e3a:	480a      	ldr	r0, [pc, #40]	; (10008e64 <sms_button_define_services+0x64>)
10008e3c:	4b07      	ldr	r3, [pc, #28]	; (10008e5c <sms_button_define_services+0x5c>)
10008e3e:	4798      	blx	r3
    }
10008e40:	b002      	add	sp, #8
10008e42:	bd10      	pop	{r4, pc}
10008e44:	1001a254 	.word	0x1001a254
10008e48:	100089d5 	.word	0x100089d5
10008e4c:	100089b1 	.word	0x100089b1
10008e50:	10016b98 	.word	0x10016b98
10008e54:	10015b71 	.word	0x10015b71
10008e58:	1001710c 	.word	0x1001710c
10008e5c:	10015a51 	.word	0x10015a51
10008e60:	1001a244 	.word	0x1001a244
10008e64:	10017150 	.word	0x10017150

10008e68 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008e68:	b510      	push	{r4, lr}
10008e6a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008e6c:	ac01      	add	r4, sp, #4
10008e6e:	0020      	movs	r0, r4
10008e70:	4b15      	ldr	r3, [pc, #84]	; (10008ec8 <sms_monitor_configure_gpio+0x60>)
10008e72:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008e74:	2301      	movs	r3, #1
10008e76:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008e78:	0021      	movs	r1, r4
10008e7a:	200e      	movs	r0, #14
10008e7c:	4b13      	ldr	r3, [pc, #76]	; (10008ecc <sms_monitor_configure_gpio+0x64>)
10008e7e:	4798      	blx	r3
10008e80:	2800      	cmp	r0, #0
10008e82:	d005      	beq.n	10008e90 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008e84:	4812      	ldr	r0, [pc, #72]	; (10008ed0 <sms_monitor_configure_gpio+0x68>)
10008e86:	4b13      	ldr	r3, [pc, #76]	; (10008ed4 <sms_monitor_configure_gpio+0x6c>)
10008e88:	4798      	blx	r3
10008e8a:	4813      	ldr	r0, [pc, #76]	; (10008ed8 <sms_monitor_configure_gpio+0x70>)
10008e8c:	4b13      	ldr	r3, [pc, #76]	; (10008edc <sms_monitor_configure_gpio+0x74>)
10008e8e:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008e90:	2100      	movs	r1, #0
10008e92:	200e      	movs	r0, #14
10008e94:	4b12      	ldr	r3, [pc, #72]	; (10008ee0 <sms_monitor_configure_gpio+0x78>)
10008e96:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008e98:	ac01      	add	r4, sp, #4
10008e9a:	0020      	movs	r0, r4
10008e9c:	4b0a      	ldr	r3, [pc, #40]	; (10008ec8 <sms_monitor_configure_gpio+0x60>)
10008e9e:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008ea0:	2301      	movs	r3, #1
10008ea2:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008ea4:	0021      	movs	r1, r4
10008ea6:	200f      	movs	r0, #15
10008ea8:	4b08      	ldr	r3, [pc, #32]	; (10008ecc <sms_monitor_configure_gpio+0x64>)
10008eaa:	4798      	blx	r3
10008eac:	2800      	cmp	r0, #0
10008eae:	d005      	beq.n	10008ebc <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008eb0:	4807      	ldr	r0, [pc, #28]	; (10008ed0 <sms_monitor_configure_gpio+0x68>)
10008eb2:	4b08      	ldr	r3, [pc, #32]	; (10008ed4 <sms_monitor_configure_gpio+0x6c>)
10008eb4:	4798      	blx	r3
10008eb6:	4808      	ldr	r0, [pc, #32]	; (10008ed8 <sms_monitor_configure_gpio+0x70>)
10008eb8:	4b08      	ldr	r3, [pc, #32]	; (10008edc <sms_monitor_configure_gpio+0x74>)
10008eba:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008ebc:	2100      	movs	r1, #0
10008ebe:	200f      	movs	r0, #15
10008ec0:	4b07      	ldr	r3, [pc, #28]	; (10008ee0 <sms_monitor_configure_gpio+0x78>)
10008ec2:	4798      	blx	r3
}
10008ec4:	b002      	add	sp, #8
10008ec6:	bd10      	pop	{r4, pc}
10008ec8:	1000ab3d 	.word	0x1000ab3d
10008ecc:	1000ab4d 	.word	0x1000ab4d
10008ed0:	10016b98 	.word	0x10016b98
10008ed4:	10015b71 	.word	0x10015b71
10008ed8:	10017198 	.word	0x10017198
10008edc:	10015a51 	.word	0x10015a51
10008ee0:	1000ada5 	.word	0x1000ada5

10008ee4 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008ee4:	b510      	push	{r4, lr}
10008ee6:	b084      	sub	sp, #16
10008ee8:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_instance.current_mode, timer2_instance.current_mode, sms_working_mode);
10008eea:	480c      	ldr	r0, [pc, #48]	; (10008f1c <sms_monitor_get_states+0x38>)
10008eec:	4b0c      	ldr	r3, [pc, #48]	; (10008f20 <sms_monitor_get_states+0x3c>)
10008eee:	4798      	blx	r3
10008ef0:	4b0c      	ldr	r3, [pc, #48]	; (10008f24 <sms_monitor_get_states+0x40>)
10008ef2:	7819      	ldrb	r1, [r3, #0]
10008ef4:	4b0c      	ldr	r3, [pc, #48]	; (10008f28 <sms_monitor_get_states+0x44>)
10008ef6:	7818      	ldrb	r0, [r3, #0]
10008ef8:	4a0c      	ldr	r2, [pc, #48]	; (10008f2c <sms_monitor_get_states+0x48>)
10008efa:	7b53      	ldrb	r3, [r2, #13]
10008efc:	7b12      	ldrb	r2, [r2, #12]
10008efe:	9003      	str	r0, [sp, #12]
10008f00:	480b      	ldr	r0, [pc, #44]	; (10008f30 <sms_monitor_get_states+0x4c>)
10008f02:	7840      	ldrb	r0, [r0, #1]
10008f04:	9002      	str	r0, [sp, #8]
10008f06:	480b      	ldr	r0, [pc, #44]	; (10008f34 <sms_monitor_get_states+0x50>)
10008f08:	7840      	ldrb	r0, [r0, #1]
10008f0a:	9001      	str	r0, [sp, #4]
10008f0c:	9100      	str	r1, [sp, #0]
10008f0e:	0021      	movs	r1, r4
10008f10:	4809      	ldr	r0, [pc, #36]	; (10008f38 <sms_monitor_get_states+0x54>)
10008f12:	4c0a      	ldr	r4, [pc, #40]	; (10008f3c <sms_monitor_get_states+0x58>)
10008f14:	47a0      	blx	r4
}
10008f16:	b004      	add	sp, #16
10008f18:	bd10      	pop	{r4, pc}
10008f1a:	46c0      	nop			; (mov r8, r8)
10008f1c:	10016b98 	.word	0x10016b98
10008f20:	10015b71 	.word	0x10015b71
10008f24:	1001a234 	.word	0x1001a234
10008f28:	1001a230 	.word	0x1001a230
10008f2c:	1001a244 	.word	0x1001a244
10008f30:	1001a360 	.word	0x1001a360
10008f34:	1001a2b4 	.word	0x1001a2b4
10008f38:	100171b8 	.word	0x100171b8
10008f3c:	10015a51 	.word	0x10015a51

10008f40 <sms_disable_irq>:

void sms_disable_irq(enum sms_irq irq)
{
10008f40:	b510      	push	{r4, lr}
10008f42:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10008f44:	07c3      	lsls	r3, r0, #31
10008f46:	d507      	bpl.n	10008f58 <sms_disable_irq+0x18>
		DBG_LOG_CONT(".");
10008f48:	202e      	movs	r0, #46	; 0x2e
10008f4a:	4b13      	ldr	r3, [pc, #76]	; (10008f98 <sms_disable_irq+0x58>)
10008f4c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008f4e:	2180      	movs	r1, #128	; 0x80
10008f50:	0409      	lsls	r1, r1, #16
10008f52:	2380      	movs	r3, #128	; 0x80
10008f54:	4a11      	ldr	r2, [pc, #68]	; (10008f9c <sms_disable_irq+0x5c>)
10008f56:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
10008f58:	07a3      	lsls	r3, r4, #30
10008f5a:	d507      	bpl.n	10008f6c <sms_disable_irq+0x2c>
		DBG_LOG_CONT(".");
10008f5c:	202e      	movs	r0, #46	; 0x2e
10008f5e:	4b0e      	ldr	r3, [pc, #56]	; (10008f98 <sms_disable_irq+0x58>)
10008f60:	4798      	blx	r3
10008f62:	2180      	movs	r1, #128	; 0x80
10008f64:	0489      	lsls	r1, r1, #18
10008f66:	2380      	movs	r3, #128	; 0x80
10008f68:	4a0c      	ldr	r2, [pc, #48]	; (10008f9c <sms_disable_irq+0x5c>)
10008f6a:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
10008f6c:	0763      	lsls	r3, r4, #29
10008f6e:	d507      	bpl.n	10008f80 <sms_disable_irq+0x40>
		DBG_LOG_CONT(".");
10008f70:	202e      	movs	r0, #46	; 0x2e
10008f72:	4b09      	ldr	r3, [pc, #36]	; (10008f98 <sms_disable_irq+0x58>)
10008f74:	4798      	blx	r3
10008f76:	2180      	movs	r1, #128	; 0x80
10008f78:	0449      	lsls	r1, r1, #17
10008f7a:	2380      	movs	r3, #128	; 0x80
10008f7c:	4a07      	ldr	r2, [pc, #28]	; (10008f9c <sms_disable_irq+0x5c>)
10008f7e:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
10008f80:	0723      	lsls	r3, r4, #28
10008f82:	d507      	bpl.n	10008f94 <sms_disable_irq+0x54>
		DBG_LOG_CONT(".");
10008f84:	202e      	movs	r0, #46	; 0x2e
10008f86:	4b04      	ldr	r3, [pc, #16]	; (10008f98 <sms_disable_irq+0x58>)
10008f88:	4798      	blx	r3
10008f8a:	2180      	movs	r1, #128	; 0x80
10008f8c:	0509      	lsls	r1, r1, #20
10008f8e:	2380      	movs	r3, #128	; 0x80
10008f90:	4a02      	ldr	r2, [pc, #8]	; (10008f9c <sms_disable_irq+0x5c>)
10008f92:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_TIMER_AON_IRQ);
	}
}
10008f94:	bd10      	pop	{r4, pc}
10008f96:	46c0      	nop			; (mov r8, r8)
10008f98:	10015a85 	.word	0x10015a85
10008f9c:	e000e100 	.word	0xe000e100

10008fa0 <sms_enable_irq>:

void sms_enable_irq(enum sms_irq irq)
{
10008fa0:	b510      	push	{r4, lr}
10008fa2:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10008fa4:	07c3      	lsls	r3, r0, #31
10008fa6:	d509      	bpl.n	10008fbc <sms_enable_irq+0x1c>
		DBG_LOG_CONT(".");
10008fa8:	202e      	movs	r0, #46	; 0x2e
10008faa:	4b17      	ldr	r3, [pc, #92]	; (10009008 <sms_enable_irq+0x68>)
10008fac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fae:	4b17      	ldr	r3, [pc, #92]	; (1000900c <sms_enable_irq+0x6c>)
10008fb0:	2280      	movs	r2, #128	; 0x80
10008fb2:	0412      	lsls	r2, r2, #16
10008fb4:	21c0      	movs	r1, #192	; 0xc0
10008fb6:	0049      	lsls	r1, r1, #1
10008fb8:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fba:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_0_IRQ);
		NVIC_EnableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
10008fbc:	07a3      	lsls	r3, r4, #30
10008fbe:	d509      	bpl.n	10008fd4 <sms_enable_irq+0x34>
		DBG_LOG_CONT(".");
10008fc0:	202e      	movs	r0, #46	; 0x2e
10008fc2:	4b11      	ldr	r3, [pc, #68]	; (10009008 <sms_enable_irq+0x68>)
10008fc4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fc6:	4b11      	ldr	r3, [pc, #68]	; (1000900c <sms_enable_irq+0x6c>)
10008fc8:	2280      	movs	r2, #128	; 0x80
10008fca:	0492      	lsls	r2, r2, #18
10008fcc:	21c0      	movs	r1, #192	; 0xc0
10008fce:	0049      	lsls	r1, r1, #1
10008fd0:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fd2:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_1_IRQ);
		NVIC_EnableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
10008fd4:	0763      	lsls	r3, r4, #29
10008fd6:	d509      	bpl.n	10008fec <sms_enable_irq+0x4c>
		DBG_LOG_CONT(".");
10008fd8:	202e      	movs	r0, #46	; 0x2e
10008fda:	4b0b      	ldr	r3, [pc, #44]	; (10009008 <sms_enable_irq+0x68>)
10008fdc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fde:	4b0b      	ldr	r3, [pc, #44]	; (1000900c <sms_enable_irq+0x6c>)
10008fe0:	2280      	movs	r2, #128	; 0x80
10008fe2:	0452      	lsls	r2, r2, #17
10008fe4:	21c0      	movs	r1, #192	; 0xc0
10008fe6:	0049      	lsls	r1, r1, #1
10008fe8:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fea:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_IMU_DRDY_IRQ);
		NVIC_EnableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
10008fec:	0723      	lsls	r3, r4, #28
10008fee:	d509      	bpl.n	10009004 <sms_enable_irq+0x64>
		DBG_LOG_CONT(".");
10008ff0:	202e      	movs	r0, #46	; 0x2e
10008ff2:	4b05      	ldr	r3, [pc, #20]	; (10009008 <sms_enable_irq+0x68>)
10008ff4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008ff6:	4b05      	ldr	r3, [pc, #20]	; (1000900c <sms_enable_irq+0x6c>)
10008ff8:	2280      	movs	r2, #128	; 0x80
10008ffa:	0512      	lsls	r2, r2, #20
10008ffc:	21c0      	movs	r1, #192	; 0xc0
10008ffe:	0049      	lsls	r1, r1, #1
10009000:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009002:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_TIMER_AON_IRQ);
		NVIC_EnableIRQ(SMS_TIMER_AON_IRQ);
	}
10009004:	bd10      	pop	{r4, pc}
10009006:	46c0      	nop			; (mov r8, r8)
10009008:	10015a85 	.word	0x10015a85
1000900c:	e000e100 	.word	0xe000e100

10009010 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009010:	b530      	push	{r4, r5, lr}
10009012:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009014:	2010      	movs	r0, #16
10009016:	4c14      	ldr	r4, [pc, #80]	; (10009068 <sms_i2c_master_configure+0x58>)
10009018:	47a0      	blx	r4
1000901a:	4b14      	ldr	r3, [pc, #80]	; (1000906c <sms_i2c_master_configure+0x5c>)
1000901c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000901e:	2010      	movs	r0, #16
10009020:	47a0      	blx	r4
10009022:	4b13      	ldr	r3, [pc, #76]	; (10009070 <sms_i2c_master_configure+0x60>)
10009024:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10009026:	ac01      	add	r4, sp, #4
10009028:	0020      	movs	r0, r4
1000902a:	4b12      	ldr	r3, [pc, #72]	; (10009074 <sms_i2c_master_configure+0x64>)
1000902c:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000902e:	2303      	movs	r3, #3
10009030:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10009032:	331b      	adds	r3, #27
10009034:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10009036:	3b16      	subs	r3, #22
10009038:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000903a:	3301      	adds	r3, #1
1000903c:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000903e:	3b07      	subs	r3, #7
10009040:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10009042:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10009044:	4d0c      	ldr	r5, [pc, #48]	; (10009078 <sms_i2c_master_configure+0x68>)
10009046:	4c0d      	ldr	r4, [pc, #52]	; (1000907c <sms_i2c_master_configure+0x6c>)
10009048:	aa01      	add	r2, sp, #4
1000904a:	490d      	ldr	r1, [pc, #52]	; (10009080 <sms_i2c_master_configure+0x70>)
1000904c:	0028      	movs	r0, r5
1000904e:	47a0      	blx	r4
10009050:	2800      	cmp	r0, #0
10009052:	d1f9      	bne.n	10009048 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10009054:	4b08      	ldr	r3, [pc, #32]	; (10009078 <sms_i2c_master_configure+0x68>)
10009056:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10009058:	2128      	movs	r1, #40	; 0x28
1000905a:	5c53      	ldrb	r3, [r2, r1]
1000905c:	07db      	lsls	r3, r3, #31
1000905e:	d4fc      	bmi.n	1000905a <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009060:	2301      	movs	r3, #1
10009062:	7513      	strb	r3, [r2, #20]
}
10009064:	b007      	add	sp, #28
10009066:	bd30      	pop	{r4, r5, pc}
10009068:	100158c5 	.word	0x100158c5
1000906c:	1001a368 	.word	0x1001a368
10009070:	1001a34c 	.word	0x1001a34c
10009074:	10008305 	.word	0x10008305
10009078:	1001a358 	.word	0x1001a358
1000907c:	1000831d 	.word	0x1000831d
10009080:	40003000 	.word	0x40003000

10009084 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009086:	4c12      	ldr	r4, [pc, #72]	; (100090d0 <sms_i2c_master_write+0x4c>)
10009088:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000908a:	1c50      	adds	r0, r2, #1
1000908c:	b2c0      	uxtb	r0, r0
1000908e:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009090:	6860      	ldr	r0, [r4, #4]
10009092:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009094:	2a00      	cmp	r2, #0
10009096:	d00e      	beq.n	100090b6 <sms_i2c_master_write+0x32>
10009098:	2000      	movs	r0, #0
1000909a:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000909c:	5c18      	ldrb	r0, [r3, r0]
1000909e:	6865      	ldr	r5, [r4, #4]
100090a0:	5468      	strb	r0, [r5, r1]
100090a2:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100090a4:	b2c9      	uxtb	r1, r1
100090a6:	428a      	cmp	r2, r1
100090a8:	d8f7      	bhi.n	1000909a <sms_i2c_master_write+0x16>
100090aa:	e004      	b.n	100090b6 <sms_i2c_master_write+0x32>
100090ac:	3c01      	subs	r4, #1
100090ae:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100090b0:	2c00      	cmp	r4, #0
100090b2:	d104      	bne.n	100090be <sms_i2c_master_write+0x3a>
100090b4:	e009      	b.n	100090ca <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100090b6:	4c07      	ldr	r4, [pc, #28]	; (100090d4 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100090b8:	4e05      	ldr	r6, [pc, #20]	; (100090d0 <sms_i2c_master_write+0x4c>)
100090ba:	4d07      	ldr	r5, [pc, #28]	; (100090d8 <sms_i2c_master_write+0x54>)
100090bc:	4f07      	ldr	r7, [pc, #28]	; (100090dc <sms_i2c_master_write+0x58>)
100090be:	0031      	movs	r1, r6
100090c0:	0028      	movs	r0, r5
100090c2:	47b8      	blx	r7
100090c4:	2800      	cmp	r0, #0
100090c6:	d1f1      	bne.n	100090ac <sms_i2c_master_write+0x28>
100090c8:	e001      	b.n	100090ce <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100090ca:	2001      	movs	r0, #1
100090cc:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100090d0:	1001a368 	.word	0x1001a368
100090d4:	000003e9 	.word	0x000003e9
100090d8:	1001a358 	.word	0x1001a358
100090dc:	100083b5 	.word	0x100083b5

100090e0 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100090e2:	4647      	mov	r7, r8
100090e4:	b480      	push	{r7}
100090e6:	0017      	movs	r7, r2
100090e8:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100090ea:	b280      	uxth	r0, r0
100090ec:	4b1d      	ldr	r3, [pc, #116]	; (10009164 <sms_i2c_master_read+0x84>)
100090ee:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100090f0:	2201      	movs	r2, #1
100090f2:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100090f4:	685b      	ldr	r3, [r3, #4]
100090f6:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100090f8:	4b1b      	ldr	r3, [pc, #108]	; (10009168 <sms_i2c_master_read+0x88>)
100090fa:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
100090fc:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100090fe:	4c1b      	ldr	r4, [pc, #108]	; (1000916c <sms_i2c_master_read+0x8c>)
10009100:	4e18      	ldr	r6, [pc, #96]	; (10009164 <sms_i2c_master_read+0x84>)
10009102:	4d1b      	ldr	r5, [pc, #108]	; (10009170 <sms_i2c_master_read+0x90>)
10009104:	e003      	b.n	1000910e <sms_i2c_master_read+0x2e>
10009106:	3c01      	subs	r4, #1
10009108:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000910a:	2c00      	cmp	r4, #0
1000910c:	d01f      	beq.n	1000914e <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000910e:	0031      	movs	r1, r6
10009110:	4818      	ldr	r0, [pc, #96]	; (10009174 <sms_i2c_master_read+0x94>)
10009112:	47a8      	blx	r5
10009114:	2800      	cmp	r0, #0
10009116:	d1f6      	bne.n	10009106 <sms_i2c_master_read+0x26>
10009118:	4e14      	ldr	r6, [pc, #80]	; (1000916c <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000911a:	4d13      	ldr	r5, [pc, #76]	; (10009168 <sms_i2c_master_read+0x88>)
1000911c:	4c16      	ldr	r4, [pc, #88]	; (10009178 <sms_i2c_master_read+0x98>)
1000911e:	e003      	b.n	10009128 <sms_i2c_master_read+0x48>
10009120:	3e01      	subs	r6, #1
10009122:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009124:	2e00      	cmp	r6, #0
10009126:	d015      	beq.n	10009154 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009128:	0029      	movs	r1, r5
1000912a:	4812      	ldr	r0, [pc, #72]	; (10009174 <sms_i2c_master_read+0x94>)
1000912c:	47a0      	blx	r4
1000912e:	2800      	cmp	r0, #0
10009130:	d1f6      	bne.n	10009120 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009132:	2f00      	cmp	r7, #0
10009134:	d011      	beq.n	1000915a <sms_i2c_master_read+0x7a>
10009136:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009138:	490b      	ldr	r1, [pc, #44]	; (10009168 <sms_i2c_master_read+0x88>)
1000913a:	684a      	ldr	r2, [r1, #4]
1000913c:	5cd2      	ldrb	r2, [r2, r3]
1000913e:	4640      	mov	r0, r8
10009140:	54c2      	strb	r2, [r0, r3]
10009142:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009144:	b2da      	uxtb	r2, r3
10009146:	4297      	cmp	r7, r2
10009148:	d8f7      	bhi.n	1000913a <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000914a:	2000      	movs	r0, #0
1000914c:	e006      	b.n	1000915c <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000914e:	2001      	movs	r0, #1
10009150:	4240      	negs	r0, r0
10009152:	e003      	b.n	1000915c <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009154:	2001      	movs	r0, #1
10009156:	4240      	negs	r0, r0
10009158:	e000      	b.n	1000915c <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000915a:	2000      	movs	r0, #0
1000915c:	bc04      	pop	{r2}
1000915e:	4690      	mov	r8, r2
10009160:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009162:	46c0      	nop			; (mov r8, r8)
10009164:	1001a368 	.word	0x1001a368
10009168:	1001a34c 	.word	0x1001a34c
1000916c:	000003e9 	.word	0x000003e9
10009170:	100083d9 	.word	0x100083d9
10009174:	1001a358 	.word	0x1001a358
10009178:	10008391 	.word	0x10008391

1000917c <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
1000917c:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
1000917e:	2384      	movs	r3, #132	; 0x84
10009180:	4a06      	ldr	r2, [pc, #24]	; (1000919c <sms_imu_interrupt_callback+0x20>)
10009182:	5cd3      	ldrb	r3, [r2, r3]
10009184:	2b00      	cmp	r3, #0
10009186:	d008      	beq.n	1000919a <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009188:	2101      	movs	r1, #1
1000918a:	2385      	movs	r3, #133	; 0x85
1000918c:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000918e:	2300      	movs	r3, #0
10009190:	2200      	movs	r2, #0
10009192:	3101      	adds	r1, #1
10009194:	201e      	movs	r0, #30
10009196:	4c02      	ldr	r4, [pc, #8]	; (100091a0 <sms_imu_interrupt_callback+0x24>)
10009198:	47a0      	blx	r4
	}
}
1000919a:	bd10      	pop	{r4, pc}
1000919c:	1001a37c 	.word	0x1001a37c
100091a0:	1000ddc1 	.word	0x1000ddc1

100091a4 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
100091a4:	b510      	push	{r4, lr}
100091a6:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
100091a8:	ac01      	add	r4, sp, #4
100091aa:	0020      	movs	r0, r4
100091ac:	4b0a      	ldr	r3, [pc, #40]	; (100091d8 <sms_imu_configure_gpio+0x34>)
100091ae:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
100091b0:	2300      	movs	r3, #0
100091b2:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
100091b4:	3302      	adds	r3, #2
100091b6:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
100091b8:	3b01      	subs	r3, #1
100091ba:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_IMU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
100091bc:	0021      	movs	r1, r4
100091be:	201e      	movs	r0, #30
100091c0:	4b06      	ldr	r3, [pc, #24]	; (100091dc <sms_imu_configure_gpio+0x38>)
100091c2:	4798      	blx	r3
100091c4:	2800      	cmp	r0, #0
100091c6:	d005      	beq.n	100091d4 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
100091c8:	4805      	ldr	r0, [pc, #20]	; (100091e0 <sms_imu_configure_gpio+0x3c>)
100091ca:	4b06      	ldr	r3, [pc, #24]	; (100091e4 <sms_imu_configure_gpio+0x40>)
100091cc:	4798      	blx	r3
100091ce:	4806      	ldr	r0, [pc, #24]	; (100091e8 <sms_imu_configure_gpio+0x44>)
100091d0:	4b06      	ldr	r3, [pc, #24]	; (100091ec <sms_imu_configure_gpio+0x48>)
100091d2:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
100091d4:	b002      	add	sp, #8
100091d6:	bd10      	pop	{r4, pc}
100091d8:	1000ab3d 	.word	0x1000ab3d
100091dc:	1000ab4d 	.word	0x1000ab4d
100091e0:	10016b98 	.word	0x10016b98
100091e4:	10015b71 	.word	0x10015b71
100091e8:	100171f8 	.word	0x100171f8
100091ec:	10015a51 	.word	0x10015a51

100091f0 <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
100091f0:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_IMU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
100091f2:	2202      	movs	r2, #2
100091f4:	4902      	ldr	r1, [pc, #8]	; (10009200 <sms_imu_register_callbacks+0x10>)
100091f6:	201e      	movs	r0, #30
100091f8:	4b02      	ldr	r3, [pc, #8]	; (10009204 <sms_imu_register_callbacks+0x14>)
100091fa:	4798      	blx	r3
}
100091fc:	bd10      	pop	{r4, pc}
100091fe:	46c0      	nop			; (mov r8, r8)
10009200:	1000917d 	.word	0x1000917d
10009204:	1000af7d 	.word	0x1000af7d

10009208 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
10009208:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_IMU_DRDY_PIN);
1000920a:	201e      	movs	r0, #30
1000920c:	4b03      	ldr	r3, [pc, #12]	; (1000921c <sms_imu_enable_callback+0x14>)
1000920e:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
10009210:	2101      	movs	r1, #1
10009212:	2384      	movs	r3, #132	; 0x84
10009214:	4a02      	ldr	r2, [pc, #8]	; (10009220 <sms_imu_enable_callback+0x18>)
10009216:	54d1      	strb	r1, [r2, r3]
}
10009218:	bd10      	pop	{r4, pc}
1000921a:	46c0      	nop			; (mov r8, r8)
1000921c:	1000b04d 	.word	0x1000b04d
10009220:	1001a37c 	.word	0x1001a37c

10009224 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
10009224:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
10009226:	201e      	movs	r0, #30
10009228:	4b03      	ldr	r3, [pc, #12]	; (10009238 <sms_imu_disable_callback+0x14>)
1000922a:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
1000922c:	2100      	movs	r1, #0
1000922e:	2384      	movs	r3, #132	; 0x84
10009230:	4a02      	ldr	r2, [pc, #8]	; (1000923c <sms_imu_disable_callback+0x18>)
10009232:	54d1      	strb	r1, [r2, r3]
}
10009234:	bd10      	pop	{r4, pc}
10009236:	46c0      	nop			; (mov r8, r8)
10009238:	1000b0a9 	.word	0x1000b0a9
1000923c:	1001a37c 	.word	0x1001a37c

10009240 <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
10009240:	b510      	push	{r4, lr}
10009242:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
10009244:	466b      	mov	r3, sp
10009246:	1dda      	adds	r2, r3, #7
10009248:	2300      	movs	r3, #0
1000924a:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
1000924c:	4c0e      	ldr	r4, [pc, #56]	; (10009288 <sms_imu_define_services+0x48>)
1000924e:	0021      	movs	r1, r4
10009250:	2002      	movs	r0, #2
10009252:	4b0e      	ldr	r3, [pc, #56]	; (1000928c <sms_imu_define_services+0x4c>)
10009254:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
10009256:	0020      	movs	r0, r4
10009258:	4b0d      	ldr	r3, [pc, #52]	; (10009290 <sms_imu_define_services+0x50>)
1000925a:	4798      	blx	r3
1000925c:	1e04      	subs	r4, r0, #0
1000925e:	d007      	beq.n	10009270 <sms_imu_define_services+0x30>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10009260:	480c      	ldr	r0, [pc, #48]	; (10009294 <sms_imu_define_services+0x54>)
10009262:	4b0d      	ldr	r3, [pc, #52]	; (10009298 <sms_imu_define_services+0x58>)
10009264:	4798      	blx	r3
10009266:	0021      	movs	r1, r4
10009268:	480c      	ldr	r0, [pc, #48]	; (1000929c <sms_imu_define_services+0x5c>)
1000926a:	4b0d      	ldr	r3, [pc, #52]	; (100092a0 <sms_imu_define_services+0x60>)
1000926c:	4798      	blx	r3
1000926e:	e008      	b.n	10009282 <sms_imu_define_services+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
10009270:	4808      	ldr	r0, [pc, #32]	; (10009294 <sms_imu_define_services+0x54>)
10009272:	4b09      	ldr	r3, [pc, #36]	; (10009298 <sms_imu_define_services+0x58>)
10009274:	4798      	blx	r3
10009276:	239a      	movs	r3, #154	; 0x9a
10009278:	4a0a      	ldr	r2, [pc, #40]	; (100092a4 <sms_imu_define_services+0x64>)
1000927a:	5ad1      	ldrh	r1, [r2, r3]
1000927c:	480a      	ldr	r0, [pc, #40]	; (100092a8 <sms_imu_define_services+0x68>)
1000927e:	4b08      	ldr	r3, [pc, #32]	; (100092a0 <sms_imu_define_services+0x60>)
10009280:	4798      	blx	r3
	}
}
10009282:	b002      	add	sp, #8
10009284:	bd10      	pop	{r4, pc}
10009286:	46c0      	nop			; (mov r8, r8)
10009288:	1001a404 	.word	0x1001a404
1000928c:	100089d5 	.word	0x100089d5
10009290:	100089b1 	.word	0x100089b1
10009294:	10016b98 	.word	0x10016b98
10009298:	10015b71 	.word	0x10015b71
1000929c:	10017238 	.word	0x10017238
100092a0:	10015a51 	.word	0x10015a51
100092a4:	1001a37c 	.word	0x1001a37c
100092a8:	10017278 	.word	0x10017278

100092ac <sms_imu_init_variables>:

/* Initialization functions... */
/* Variables */
void sms_imu_init_variables(void)
{
	imu_device.config.a_scale = AFS_2G;
100092ac:	4b03      	ldr	r3, [pc, #12]	; (100092bc <sms_imu_init_variables+0x10>)
100092ae:	2200      	movs	r2, #0
100092b0:	701a      	strb	r2, [r3, #0]
	imu_device.config.g_scale = GFS_250DPS;
100092b2:	705a      	strb	r2, [r3, #1]
	imu_device.config.ahrs = false;
100092b4:	2150      	movs	r1, #80	; 0x50
100092b6:	545a      	strb	r2, [r3, r1]
	imu_device.config.init_ok = false;
100092b8:	711a      	strb	r2, [r3, #4]
}
100092ba:	4770      	bx	lr
100092bc:	1001a37c 	.word	0x1001a37c

100092c0 <writeByte>:
}


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
100092c0:	b510      	push	{r4, lr}
100092c2:	b082      	sub	sp, #8
100092c4:	466b      	mov	r3, sp
100092c6:	3307      	adds	r3, #7
100092c8:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
100092ca:	2201      	movs	r2, #1
100092cc:	4c01      	ldr	r4, [pc, #4]	; (100092d4 <writeByte+0x14>)
100092ce:	47a0      	blx	r4
}
100092d0:	b002      	add	sp, #8
100092d2:	bd10      	pop	{r4, pc}
100092d4:	10009085 	.word	0x10009085

100092d8 <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
100092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100092da:	465f      	mov	r7, fp
100092dc:	4656      	mov	r6, sl
100092de:	464d      	mov	r5, r9
100092e0:	4644      	mov	r4, r8
100092e2:	b4f0      	push	{r4, r5, r6, r7}
100092e4:	b08f      	sub	sp, #60	; 0x3c
100092e6:	9003      	str	r0, [sp, #12]
100092e8:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
100092ea:	2280      	movs	r2, #128	; 0x80
100092ec:	216b      	movs	r1, #107	; 0x6b
100092ee:	2069      	movs	r0, #105	; 0x69
100092f0:	4ccd      	ldr	r4, [pc, #820]	; (10009628 <sms_imu_mpu_calibrate+0x350>)
100092f2:	47a0      	blx	r4
	delay_ms(100);
100092f4:	2064      	movs	r0, #100	; 0x64
100092f6:	4dcd      	ldr	r5, [pc, #820]	; (1000962c <sms_imu_mpu_calibrate+0x354>)
100092f8:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
100092fa:	2201      	movs	r2, #1
100092fc:	216b      	movs	r1, #107	; 0x6b
100092fe:	2069      	movs	r0, #105	; 0x69
10009300:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009302:	2200      	movs	r2, #0
10009304:	216c      	movs	r1, #108	; 0x6c
10009306:	2069      	movs	r0, #105	; 0x69
10009308:	47a0      	blx	r4
	delay_ms(200);
1000930a:	20c8      	movs	r0, #200	; 0xc8
1000930c:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
1000930e:	2200      	movs	r2, #0
10009310:	2138      	movs	r1, #56	; 0x38
10009312:	2069      	movs	r0, #105	; 0x69
10009314:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009316:	2200      	movs	r2, #0
10009318:	2123      	movs	r1, #35	; 0x23
1000931a:	2069      	movs	r0, #105	; 0x69
1000931c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
1000931e:	2200      	movs	r2, #0
10009320:	216b      	movs	r1, #107	; 0x6b
10009322:	2069      	movs	r0, #105	; 0x69
10009324:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009326:	2200      	movs	r2, #0
10009328:	2124      	movs	r1, #36	; 0x24
1000932a:	2069      	movs	r0, #105	; 0x69
1000932c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
1000932e:	2200      	movs	r2, #0
10009330:	216a      	movs	r1, #106	; 0x6a
10009332:	2069      	movs	r0, #105	; 0x69
10009334:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009336:	220c      	movs	r2, #12
10009338:	216a      	movs	r1, #106	; 0x6a
1000933a:	2069      	movs	r0, #105	; 0x69
1000933c:	47a0      	blx	r4
	delay_ms(15);
1000933e:	200f      	movs	r0, #15
10009340:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10009342:	2201      	movs	r2, #1
10009344:	211a      	movs	r1, #26
10009346:	2069      	movs	r0, #105	; 0x69
10009348:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
1000934a:	2200      	movs	r2, #0
1000934c:	2119      	movs	r1, #25
1000934e:	2069      	movs	r0, #105	; 0x69
10009350:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10009352:	2200      	movs	r2, #0
10009354:	211b      	movs	r1, #27
10009356:	2069      	movs	r0, #105	; 0x69
10009358:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
1000935a:	2200      	movs	r2, #0
1000935c:	211c      	movs	r1, #28
1000935e:	2069      	movs	r0, #105	; 0x69
10009360:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10009362:	2240      	movs	r2, #64	; 0x40
10009364:	216a      	movs	r1, #106	; 0x6a
10009366:	2069      	movs	r0, #105	; 0x69
10009368:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
1000936a:	2278      	movs	r2, #120	; 0x78
1000936c:	2123      	movs	r1, #35	; 0x23
1000936e:	2069      	movs	r0, #105	; 0x69
10009370:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10009372:	2028      	movs	r0, #40	; 0x28
10009374:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009376:	2200      	movs	r2, #0
10009378:	2123      	movs	r1, #35	; 0x23
1000937a:	2069      	movs	r0, #105	; 0x69
1000937c:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000937e:	ac0b      	add	r4, sp, #44	; 0x2c
10009380:	0023      	movs	r3, r4
10009382:	2202      	movs	r2, #2
10009384:	2172      	movs	r1, #114	; 0x72
10009386:	2069      	movs	r0, #105	; 0x69
10009388:	4da9      	ldr	r5, [pc, #676]	; (10009630 <sms_imu_mpu_calibrate+0x358>)
1000938a:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
1000938c:	7820      	ldrb	r0, [r4, #0]
1000938e:	0200      	lsls	r0, r0, #8
10009390:	7863      	ldrb	r3, [r4, #1]
10009392:	4318      	orrs	r0, r3
10009394:	210c      	movs	r1, #12
10009396:	4ba7      	ldr	r3, [pc, #668]	; (10009634 <sms_imu_mpu_calibrate+0x35c>)
10009398:	4798      	blx	r3
1000939a:	b283      	uxth	r3, r0
1000939c:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
1000939e:	2b00      	cmp	r3, #0
100093a0:	d042      	beq.n	10009428 <sms_imu_mpu_calibrate+0x150>
100093a2:	2300      	movs	r3, #0
100093a4:	4698      	mov	r8, r3
100093a6:	2700      	movs	r7, #0
100093a8:	469b      	mov	fp, r3
100093aa:	469a      	mov	sl, r3
100093ac:	4699      	mov	r9, r3
100093ae:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100093b0:	ac0b      	add	r4, sp, #44	; 0x2c
100093b2:	9301      	str	r3, [sp, #4]
100093b4:	0023      	movs	r3, r4
100093b6:	220c      	movs	r2, #12
100093b8:	2174      	movs	r1, #116	; 0x74
100093ba:	2069      	movs	r0, #105	; 0x69
100093bc:	4e9c      	ldr	r6, [pc, #624]	; (10009630 <sms_imu_mpu_calibrate+0x358>)
100093be:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
100093c0:	7823      	ldrb	r3, [r4, #0]
100093c2:	021b      	lsls	r3, r3, #8
100093c4:	7862      	ldrb	r2, [r4, #1]
100093c6:	4313      	orrs	r3, r2
100093c8:	b21b      	sxth	r3, r3
100093ca:	9a01      	ldr	r2, [sp, #4]
100093cc:	4694      	mov	ip, r2
100093ce:	449c      	add	ip, r3
100093d0:	4663      	mov	r3, ip
100093d2:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
100093d4:	78a3      	ldrb	r3, [r4, #2]
100093d6:	021b      	lsls	r3, r3, #8
100093d8:	78e2      	ldrb	r2, [r4, #3]
100093da:	4313      	orrs	r3, r2
100093dc:	b21b      	sxth	r3, r3
100093de:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
100093e0:	7923      	ldrb	r3, [r4, #4]
100093e2:	021b      	lsls	r3, r3, #8
100093e4:	7962      	ldrb	r2, [r4, #5]
100093e6:	4313      	orrs	r3, r2
100093e8:	b21b      	sxth	r3, r3
100093ea:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
100093ec:	79a3      	ldrb	r3, [r4, #6]
100093ee:	021b      	lsls	r3, r3, #8
100093f0:	79e2      	ldrb	r2, [r4, #7]
100093f2:	4313      	orrs	r3, r2
100093f4:	b21b      	sxth	r3, r3
100093f6:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
100093f8:	7a23      	ldrb	r3, [r4, #8]
100093fa:	021b      	lsls	r3, r3, #8
100093fc:	7a62      	ldrb	r2, [r4, #9]
100093fe:	4313      	orrs	r3, r2
10009400:	b21b      	sxth	r3, r3
10009402:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009404:	7aa3      	ldrb	r3, [r4, #10]
10009406:	021b      	lsls	r3, r3, #8
10009408:	7ae2      	ldrb	r2, [r4, #11]
1000940a:	4313      	orrs	r3, r2
1000940c:	b21b      	sxth	r3, r3
1000940e:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009410:	3501      	adds	r5, #1
10009412:	b2ad      	uxth	r5, r5
10009414:	9b02      	ldr	r3, [sp, #8]
10009416:	42ab      	cmp	r3, r5
10009418:	d1cc      	bne.n	100093b4 <sms_imu_mpu_calibrate+0xdc>
1000941a:	4653      	mov	r3, sl
1000941c:	46ba      	mov	sl, r7
1000941e:	465a      	mov	r2, fp
10009420:	46e3      	mov	fp, ip
10009422:	0016      	movs	r6, r2
10009424:	001f      	movs	r7, r3
10009426:	e006      	b.n	10009436 <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009428:	2300      	movs	r3, #0
1000942a:	4698      	mov	r8, r3
1000942c:	2700      	movs	r7, #0
1000942e:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009430:	469b      	mov	fp, r3
10009432:	469a      	mov	sl, r3
10009434:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009436:	4c80      	ldr	r4, [pc, #512]	; (10009638 <sms_imu_mpu_calibrate+0x360>)
10009438:	9902      	ldr	r1, [sp, #8]
1000943a:	4658      	mov	r0, fp
1000943c:	47a0      	blx	r4
1000943e:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009440:	9b02      	ldr	r3, [sp, #8]
10009442:	469b      	mov	fp, r3
10009444:	0019      	movs	r1, r3
10009446:	4650      	mov	r0, sl
10009448:	47a0      	blx	r4
1000944a:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
1000944c:	4659      	mov	r1, fp
1000944e:	4648      	mov	r0, r9
10009450:	47a0      	blx	r4
10009452:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009454:	4659      	mov	r1, fp
10009456:	4640      	mov	r0, r8
10009458:	47a0      	blx	r4
1000945a:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
1000945c:	4659      	mov	r1, fp
1000945e:	0038      	movs	r0, r7
10009460:	47a0      	blx	r4
10009462:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009464:	4659      	mov	r1, fp
10009466:	0030      	movs	r0, r6
10009468:	47a0      	blx	r4
1000946a:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
1000946c:	464b      	mov	r3, r9
1000946e:	2b00      	cmp	r3, #0
10009470:	dd03      	ble.n	1000947a <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009472:	4b72      	ldr	r3, [pc, #456]	; (1000963c <sms_imu_mpu_calibrate+0x364>)
10009474:	469c      	mov	ip, r3
10009476:	44e1      	add	r9, ip
10009478:	e003      	b.n	10009482 <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
1000947a:	2380      	movs	r3, #128	; 0x80
1000947c:	01db      	lsls	r3, r3, #7
1000947e:	469c      	mov	ip, r3
10009480:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009482:	9b01      	ldr	r3, [sp, #4]
10009484:	4259      	negs	r1, r3
10009486:	17ca      	asrs	r2, r1, #31
10009488:	2303      	movs	r3, #3
1000948a:	401a      	ands	r2, r3
1000948c:	1852      	adds	r2, r2, r1
1000948e:	1091      	asrs	r1, r2, #2
10009490:	1292      	asrs	r2, r2, #10
10009492:	b2d2      	uxtb	r2, r2
10009494:	ac0b      	add	r4, sp, #44	; 0x2c
10009496:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009498:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
1000949a:	9902      	ldr	r1, [sp, #8]
1000949c:	4248      	negs	r0, r1
1000949e:	17c1      	asrs	r1, r0, #31
100094a0:	4019      	ands	r1, r3
100094a2:	1809      	adds	r1, r1, r0
100094a4:	1088      	asrs	r0, r1, #2
100094a6:	1289      	asrs	r1, r1, #10
100094a8:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100094aa:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100094ac:	9e04      	ldr	r6, [sp, #16]
100094ae:	4271      	negs	r1, r6
100094b0:	17c8      	asrs	r0, r1, #31
100094b2:	4003      	ands	r3, r0
100094b4:	185b      	adds	r3, r3, r1
100094b6:	1099      	asrs	r1, r3, #2
100094b8:	129b      	asrs	r3, r3, #10
100094ba:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100094bc:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100094be:	2113      	movs	r1, #19
100094c0:	2069      	movs	r0, #105	; 0x69
100094c2:	4e59      	ldr	r6, [pc, #356]	; (10009628 <sms_imu_mpu_calibrate+0x350>)
100094c4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
100094c6:	7862      	ldrb	r2, [r4, #1]
100094c8:	2114      	movs	r1, #20
100094ca:	2069      	movs	r0, #105	; 0x69
100094cc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
100094ce:	78a2      	ldrb	r2, [r4, #2]
100094d0:	2115      	movs	r1, #21
100094d2:	2069      	movs	r0, #105	; 0x69
100094d4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
100094d6:	78e2      	ldrb	r2, [r4, #3]
100094d8:	2116      	movs	r1, #22
100094da:	2069      	movs	r0, #105	; 0x69
100094dc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
100094de:	7922      	ldrb	r2, [r4, #4]
100094e0:	2117      	movs	r1, #23
100094e2:	2069      	movs	r0, #105	; 0x69
100094e4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
100094e6:	7962      	ldrb	r2, [r4, #5]
100094e8:	2118      	movs	r1, #24
100094ea:	2069      	movs	r0, #105	; 0x69
100094ec:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
100094ee:	4f54      	ldr	r7, [pc, #336]	; (10009640 <sms_imu_mpu_calibrate+0x368>)
100094f0:	9801      	ldr	r0, [sp, #4]
100094f2:	47b8      	blx	r7
100094f4:	4e53      	ldr	r6, [pc, #332]	; (10009644 <sms_imu_mpu_calibrate+0x36c>)
100094f6:	4954      	ldr	r1, [pc, #336]	; (10009648 <sms_imu_mpu_calibrate+0x370>)
100094f8:	47b0      	blx	r6
100094fa:	9b03      	ldr	r3, [sp, #12]
100094fc:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
100094fe:	9802      	ldr	r0, [sp, #8]
10009500:	47b8      	blx	r7
10009502:	4951      	ldr	r1, [pc, #324]	; (10009648 <sms_imu_mpu_calibrate+0x370>)
10009504:	47b0      	blx	r6
10009506:	9b03      	ldr	r3, [sp, #12]
10009508:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
1000950a:	9804      	ldr	r0, [sp, #16]
1000950c:	47b8      	blx	r7
1000950e:	494e      	ldr	r1, [pc, #312]	; (10009648 <sms_imu_mpu_calibrate+0x370>)
10009510:	47b0      	blx	r6
10009512:	9b03      	ldr	r3, [sp, #12]
10009514:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009516:	0023      	movs	r3, r4
10009518:	2202      	movs	r2, #2
1000951a:	2177      	movs	r1, #119	; 0x77
1000951c:	2069      	movs	r0, #105	; 0x69
1000951e:	4e44      	ldr	r6, [pc, #272]	; (10009630 <sms_imu_mpu_calibrate+0x358>)
10009520:	46b0      	mov	r8, r6
10009522:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009524:	7827      	ldrb	r7, [r4, #0]
10009526:	023f      	lsls	r7, r7, #8
10009528:	7863      	ldrb	r3, [r4, #1]
1000952a:	431f      	orrs	r7, r3
1000952c:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000952e:	0023      	movs	r3, r4
10009530:	2202      	movs	r2, #2
10009532:	217a      	movs	r1, #122	; 0x7a
10009534:	2069      	movs	r0, #105	; 0x69
10009536:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009538:	7826      	ldrb	r6, [r4, #0]
1000953a:	0236      	lsls	r6, r6, #8
1000953c:	7863      	ldrb	r3, [r4, #1]
1000953e:	431e      	orrs	r6, r3
10009540:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009542:	0023      	movs	r3, r4
10009544:	2202      	movs	r2, #2
10009546:	217d      	movs	r1, #125	; 0x7d
10009548:	2069      	movs	r0, #105	; 0x69
1000954a:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
1000954c:	7823      	ldrb	r3, [r4, #0]
1000954e:	021b      	lsls	r3, r3, #8
10009550:	7861      	ldrb	r1, [r4, #1]
10009552:	4319      	orrs	r1, r3
10009554:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009556:	ab07      	add	r3, sp, #28
10009558:	2200      	movs	r2, #0
1000955a:	701a      	strb	r2, [r3, #0]
1000955c:	705a      	strb	r2, [r3, #1]
1000955e:	709a      	strb	r2, [r3, #2]
10009560:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10009562:	2401      	movs	r4, #1
10009564:	009a      	lsls	r2, r3, #2
10009566:	a808      	add	r0, sp, #32
10009568:	5812      	ldr	r2, [r2, r0]
1000956a:	4222      	tst	r2, r4
1000956c:	d001      	beq.n	10009572 <sms_imu_mpu_calibrate+0x29a>
1000956e:	aa07      	add	r2, sp, #28
10009570:	549c      	strb	r4, [r3, r2]
10009572:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009574:	2b03      	cmp	r3, #3
10009576:	d1f5      	bne.n	10009564 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009578:	17ea      	asrs	r2, r5, #31
1000957a:	3304      	adds	r3, #4
1000957c:	401a      	ands	r2, r3
1000957e:	1952      	adds	r2, r2, r5
10009580:	10d2      	asrs	r2, r2, #3
10009582:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009584:	4652      	mov	r2, sl
10009586:	17d0      	asrs	r0, r2, #31
10009588:	4018      	ands	r0, r3
1000958a:	4450      	add	r0, sl
1000958c:	10c0      	asrs	r0, r0, #3
1000958e:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009590:	464a      	mov	r2, r9
10009592:	17d2      	asrs	r2, r2, #31
10009594:	4013      	ands	r3, r2
10009596:	444b      	add	r3, r9
10009598:	10da      	asrs	r2, r3, #3
1000959a:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
1000959c:	123a      	asrs	r2, r7, #8
1000959e:	b2d2      	uxtb	r2, r2
100095a0:	ac0b      	add	r4, sp, #44	; 0x2c
100095a2:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095a4:	a907      	add	r1, sp, #28
100095a6:	7808      	ldrb	r0, [r1, #0]
100095a8:	4307      	orrs	r7, r0
100095aa:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100095ac:	1230      	asrs	r0, r6, #8
100095ae:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095b0:	7848      	ldrb	r0, [r1, #1]
100095b2:	4306      	orrs	r6, r0
100095b4:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
100095b6:	1218      	asrs	r0, r3, #8
100095b8:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095ba:	7889      	ldrb	r1, [r1, #2]
100095bc:	430b      	orrs	r3, r1
100095be:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
100095c0:	2177      	movs	r1, #119	; 0x77
100095c2:	2069      	movs	r0, #105	; 0x69
100095c4:	4e18      	ldr	r6, [pc, #96]	; (10009628 <sms_imu_mpu_calibrate+0x350>)
100095c6:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
100095c8:	7862      	ldrb	r2, [r4, #1]
100095ca:	2178      	movs	r1, #120	; 0x78
100095cc:	2069      	movs	r0, #105	; 0x69
100095ce:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
100095d0:	78a2      	ldrb	r2, [r4, #2]
100095d2:	217a      	movs	r1, #122	; 0x7a
100095d4:	2069      	movs	r0, #105	; 0x69
100095d6:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
100095d8:	78e2      	ldrb	r2, [r4, #3]
100095da:	217b      	movs	r1, #123	; 0x7b
100095dc:	2069      	movs	r0, #105	; 0x69
100095de:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
100095e0:	7922      	ldrb	r2, [r4, #4]
100095e2:	217d      	movs	r1, #125	; 0x7d
100095e4:	2069      	movs	r0, #105	; 0x69
100095e6:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
100095e8:	7962      	ldrb	r2, [r4, #5]
100095ea:	217e      	movs	r1, #126	; 0x7e
100095ec:	2069      	movs	r0, #105	; 0x69
100095ee:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
100095f0:	4e13      	ldr	r6, [pc, #76]	; (10009640 <sms_imu_mpu_calibrate+0x368>)
100095f2:	0028      	movs	r0, r5
100095f4:	47b0      	blx	r6
100095f6:	4c15      	ldr	r4, [pc, #84]	; (1000964c <sms_imu_mpu_calibrate+0x374>)
100095f8:	21e2      	movs	r1, #226	; 0xe2
100095fa:	0589      	lsls	r1, r1, #22
100095fc:	47a0      	blx	r4
100095fe:	9d05      	ldr	r5, [sp, #20]
10009600:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009602:	4650      	mov	r0, sl
10009604:	47b0      	blx	r6
10009606:	21e2      	movs	r1, #226	; 0xe2
10009608:	0589      	lsls	r1, r1, #22
1000960a:	47a0      	blx	r4
1000960c:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
1000960e:	4648      	mov	r0, r9
10009610:	47b0      	blx	r6
10009612:	21e2      	movs	r1, #226	; 0xe2
10009614:	0589      	lsls	r1, r1, #22
10009616:	47a0      	blx	r4
10009618:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
1000961a:	b00f      	add	sp, #60	; 0x3c
1000961c:	bc3c      	pop	{r2, r3, r4, r5}
1000961e:	4690      	mov	r8, r2
10009620:	4699      	mov	r9, r3
10009622:	46a2      	mov	sl, r4
10009624:	46ab      	mov	fp, r5
10009626:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009628:	100092c1 	.word	0x100092c1
1000962c:	1000a48d 	.word	0x1000a48d
10009630:	100090e1 	.word	0x100090e1
10009634:	10012bdd 	.word	0x10012bdd
10009638:	10012cf1 	.word	0x10012cf1
1000963c:	ffffc000 	.word	0xffffc000
10009640:	10013989 	.word	0x10013989
10009644:	1001307d 	.word	0x1001307d
10009648:	43030000 	.word	0x43030000
1000964c:	10013411 	.word	0x10013411

10009650 <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009650:	b5f0      	push	{r4, r5, r6, r7, lr}
10009652:	465f      	mov	r7, fp
10009654:	4656      	mov	r6, sl
10009656:	464d      	mov	r5, r9
10009658:	4644      	mov	r4, r8
1000965a:	b4f0      	push	{r4, r5, r6, r7}
1000965c:	b083      	sub	sp, #12
1000965e:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009660:	4c36      	ldr	r4, [pc, #216]	; (1000973c <sms_imu_comp_initialize+0xec>)
10009662:	2301      	movs	r3, #1
10009664:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009666:	3301      	adds	r3, #1
10009668:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
1000966a:	4b35      	ldr	r3, [pc, #212]	; (10009740 <sms_imu_comp_initialize+0xf0>)
1000966c:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[1] = 120.0;
1000966e:	4b35      	ldr	r3, [pc, #212]	; (10009744 <sms_imu_comp_initialize+0xf4>)
10009670:	63e3      	str	r3, [r4, #60]	; 0x3c
	imu_device.config.mag_bias[2] = 125.0;
10009672:	4b35      	ldr	r3, [pc, #212]	; (10009748 <sms_imu_comp_initialize+0xf8>)
10009674:	6423      	str	r3, [r4, #64]	; 0x40
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009676:	2200      	movs	r2, #0
10009678:	210a      	movs	r1, #10
1000967a:	200c      	movs	r0, #12
1000967c:	4e33      	ldr	r6, [pc, #204]	; (1000974c <sms_imu_comp_initialize+0xfc>)
1000967e:	47b0      	blx	r6
	delay_ms(10);
10009680:	200a      	movs	r0, #10
10009682:	4b33      	ldr	r3, [pc, #204]	; (10009750 <sms_imu_comp_initialize+0x100>)
10009684:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009686:	220f      	movs	r2, #15
10009688:	210a      	movs	r1, #10
1000968a:	200c      	movs	r0, #12
1000968c:	47b0      	blx	r6
	delay_ms(10);
1000968e:	200a      	movs	r0, #10
10009690:	4b2f      	ldr	r3, [pc, #188]	; (10009750 <sms_imu_comp_initialize+0x100>)
10009692:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009694:	af01      	add	r7, sp, #4
10009696:	003b      	movs	r3, r7
10009698:	2203      	movs	r2, #3
1000969a:	2110      	movs	r1, #16
1000969c:	200c      	movs	r0, #12
1000969e:	4d2d      	ldr	r5, [pc, #180]	; (10009754 <sms_imu_comp_initialize+0x104>)
100096a0:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
100096a2:	7838      	ldrb	r0, [r7, #0]
100096a4:	3880      	subs	r0, #128	; 0x80
100096a6:	4b2c      	ldr	r3, [pc, #176]	; (10009758 <sms_imu_comp_initialize+0x108>)
100096a8:	469b      	mov	fp, r3
100096aa:	4798      	blx	r3
100096ac:	4b2b      	ldr	r3, [pc, #172]	; (1000975c <sms_imu_comp_initialize+0x10c>)
100096ae:	469a      	mov	sl, r3
100096b0:	4798      	blx	r3
100096b2:	2200      	movs	r2, #0
100096b4:	4b2a      	ldr	r3, [pc, #168]	; (10009760 <sms_imu_comp_initialize+0x110>)
100096b6:	4d2b      	ldr	r5, [pc, #172]	; (10009764 <sms_imu_comp_initialize+0x114>)
100096b8:	47a8      	blx	r5
100096ba:	2200      	movs	r2, #0
100096bc:	4b2a      	ldr	r3, [pc, #168]	; (10009768 <sms_imu_comp_initialize+0x118>)
100096be:	4d2b      	ldr	r5, [pc, #172]	; (1000976c <sms_imu_comp_initialize+0x11c>)
100096c0:	47a8      	blx	r5
100096c2:	4b2b      	ldr	r3, [pc, #172]	; (10009770 <sms_imu_comp_initialize+0x120>)
100096c4:	4699      	mov	r9, r3
100096c6:	4798      	blx	r3
100096c8:	4643      	mov	r3, r8
100096ca:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
100096cc:	7878      	ldrb	r0, [r7, #1]
100096ce:	3880      	subs	r0, #128	; 0x80
100096d0:	47d8      	blx	fp
100096d2:	47d0      	blx	sl
100096d4:	2200      	movs	r2, #0
100096d6:	4b22      	ldr	r3, [pc, #136]	; (10009760 <sms_imu_comp_initialize+0x110>)
100096d8:	4d22      	ldr	r5, [pc, #136]	; (10009764 <sms_imu_comp_initialize+0x114>)
100096da:	47a8      	blx	r5
100096dc:	2200      	movs	r2, #0
100096de:	4b22      	ldr	r3, [pc, #136]	; (10009768 <sms_imu_comp_initialize+0x118>)
100096e0:	4d22      	ldr	r5, [pc, #136]	; (1000976c <sms_imu_comp_initialize+0x11c>)
100096e2:	47a8      	blx	r5
100096e4:	47c8      	blx	r9
100096e6:	4643      	mov	r3, r8
100096e8:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
100096ea:	78b8      	ldrb	r0, [r7, #2]
100096ec:	3880      	subs	r0, #128	; 0x80
100096ee:	47d8      	blx	fp
100096f0:	47d0      	blx	sl
100096f2:	2200      	movs	r2, #0
100096f4:	4b1a      	ldr	r3, [pc, #104]	; (10009760 <sms_imu_comp_initialize+0x110>)
100096f6:	4d1b      	ldr	r5, [pc, #108]	; (10009764 <sms_imu_comp_initialize+0x114>)
100096f8:	47a8      	blx	r5
100096fa:	2200      	movs	r2, #0
100096fc:	4b1a      	ldr	r3, [pc, #104]	; (10009768 <sms_imu_comp_initialize+0x118>)
100096fe:	4d1b      	ldr	r5, [pc, #108]	; (1000976c <sms_imu_comp_initialize+0x11c>)
10009700:	47a8      	blx	r5
10009702:	47c8      	blx	r9
10009704:	4643      	mov	r3, r8
10009706:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009708:	2200      	movs	r2, #0
1000970a:	210a      	movs	r1, #10
1000970c:	200c      	movs	r0, #12
1000970e:	47b0      	blx	r6
	delay_ms(10);
10009710:	200a      	movs	r0, #10
10009712:	4b0f      	ldr	r3, [pc, #60]	; (10009750 <sms_imu_comp_initialize+0x100>)
10009714:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009716:	78a2      	ldrb	r2, [r4, #2]
10009718:	0112      	lsls	r2, r2, #4
1000971a:	78e3      	ldrb	r3, [r4, #3]
1000971c:	431a      	orrs	r2, r3
1000971e:	b2d2      	uxtb	r2, r2
10009720:	210a      	movs	r1, #10
10009722:	200c      	movs	r0, #12
10009724:	47b0      	blx	r6
	delay_ms(10);
10009726:	200a      	movs	r0, #10
10009728:	4b09      	ldr	r3, [pc, #36]	; (10009750 <sms_imu_comp_initialize+0x100>)
1000972a:	4798      	blx	r3
}
1000972c:	b003      	add	sp, #12
1000972e:	bc3c      	pop	{r2, r3, r4, r5}
10009730:	4690      	mov	r8, r2
10009732:	4699      	mov	r9, r3
10009734:	46a2      	mov	sl, r4
10009736:	46ab      	mov	fp, r5
10009738:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000973a:	46c0      	nop			; (mov r8, r8)
1000973c:	1001a37c 	.word	0x1001a37c
10009740:	43eb0000 	.word	0x43eb0000
10009744:	42f00000 	.word	0x42f00000
10009748:	42fa0000 	.word	0x42fa0000
1000974c:	100092c1 	.word	0x100092c1
10009750:	1000a48d 	.word	0x1000a48d
10009754:	100090e1 	.word	0x100090e1
10009758:	10013989 	.word	0x10013989
1000975c:	10015671 	.word	0x10015671
10009760:	3f700000 	.word	0x3f700000
10009764:	10014935 	.word	0x10014935
10009768:	3ff00000 	.word	0x3ff00000
1000976c:	10013a95 	.word	0x10013a95
10009770:	10015719 	.word	0x10015719

10009774 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009774:	b530      	push	{r4, r5, lr}
10009776:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009778:	ac01      	add	r4, sp, #4
1000977a:	0023      	movs	r3, r4
1000977c:	2201      	movs	r2, #1
1000977e:	4d02      	ldr	r5, [pc, #8]	; (10009788 <readByte+0x14>)
10009780:	47a8      	blx	r5
	return data[0];
10009782:	7820      	ldrb	r0, [r4, #0]
}
10009784:	b003      	add	sp, #12
10009786:	bd30      	pop	{r4, r5, pc}
10009788:	100090e1 	.word	0x100090e1

1000978c <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
1000978c:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
1000978e:	2100      	movs	r1, #0
10009790:	200c      	movs	r0, #12
10009792:	4b03      	ldr	r3, [pc, #12]	; (100097a0 <sms_imu_comp_check+0x14>)
10009794:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009796:	3848      	subs	r0, #72	; 0x48
10009798:	1e43      	subs	r3, r0, #1
1000979a:	4198      	sbcs	r0, r3
1000979c:	4240      	negs	r0, r0
}
1000979e:	bd10      	pop	{r4, pc}
100097a0:	10009775 	.word	0x10009775

100097a4 <sms_imu_mpu_initialize>:
	imu_device.config.ahrs = false;
	imu_device.config.init_ok = false;
}
/* MPU */
void sms_imu_mpu_initialize(void)
{
100097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
100097a6:	2200      	movs	r2, #0
100097a8:	216b      	movs	r1, #107	; 0x6b
100097aa:	2069      	movs	r0, #105	; 0x69
100097ac:	4c21      	ldr	r4, [pc, #132]	; (10009834 <sms_imu_mpu_initialize+0x90>)
100097ae:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
100097b0:	2064      	movs	r0, #100	; 0x64
100097b2:	4d21      	ldr	r5, [pc, #132]	; (10009838 <sms_imu_mpu_initialize+0x94>)
100097b4:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
100097b6:	2201      	movs	r2, #1
100097b8:	216b      	movs	r1, #107	; 0x6b
100097ba:	2069      	movs	r0, #105	; 0x69
100097bc:	47a0      	blx	r4
	delay_ms(200);
100097be:	20c8      	movs	r0, #200	; 0xc8
100097c0:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	 //writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
100097c2:	2205      	movs	r2, #5
100097c4:	211a      	movs	r1, #26
100097c6:	2069      	movs	r0, #105	; 0x69
100097c8:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
100097ca:	2263      	movs	r2, #99	; 0x63
100097cc:	2119      	movs	r1, #25
100097ce:	2069      	movs	r0, #105	; 0x69
100097d0:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
100097d2:	211b      	movs	r1, #27
100097d4:	2069      	movs	r0, #105	; 0x69
100097d6:	4e19      	ldr	r6, [pc, #100]	; (1000983c <sms_imu_mpu_initialize+0x98>)
100097d8:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
100097da:	4f19      	ldr	r7, [pc, #100]	; (10009840 <sms_imu_mpu_initialize+0x9c>)
100097dc:	787a      	ldrb	r2, [r7, #1]
100097de:	00d2      	lsls	r2, r2, #3
100097e0:	231a      	movs	r3, #26
100097e2:	4398      	bics	r0, r3
100097e4:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
100097e6:	b2d2      	uxtb	r2, r2
100097e8:	211b      	movs	r1, #27
100097ea:	2069      	movs	r0, #105	; 0x69
100097ec:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
100097ee:	211c      	movs	r1, #28
100097f0:	2069      	movs	r0, #105	; 0x69
100097f2:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
100097f4:	783a      	ldrb	r2, [r7, #0]
100097f6:	00d2      	lsls	r2, r2, #3
100097f8:	2318      	movs	r3, #24
100097fa:	4398      	bics	r0, r3
100097fc:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
100097fe:	b2d2      	uxtb	r2, r2
10009800:	211c      	movs	r1, #28
10009802:	2069      	movs	r0, #105	; 0x69
10009804:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009806:	211d      	movs	r1, #29
10009808:	2069      	movs	r0, #105	; 0x69
1000980a:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
1000980c:	23f0      	movs	r3, #240	; 0xf0
1000980e:	0002      	movs	r2, r0
10009810:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009812:	3bed      	subs	r3, #237	; 0xed
10009814:	431a      	orrs	r2, r3
10009816:	211d      	movs	r1, #29
10009818:	2069      	movs	r0, #105	; 0x69
1000981a:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
1000981c:	2212      	movs	r2, #18
1000981e:	2137      	movs	r1, #55	; 0x37
10009820:	2069      	movs	r0, #105	; 0x69
10009822:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009824:	2201      	movs	r2, #1
10009826:	2138      	movs	r1, #56	; 0x38
10009828:	2069      	movs	r0, #105	; 0x69
1000982a:	47a0      	blx	r4
	delay_ms(100);
1000982c:	2064      	movs	r0, #100	; 0x64
1000982e:	47a8      	blx	r5
}
10009830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009832:	46c0      	nop			; (mov r8, r8)
10009834:	100092c1 	.word	0x100092c1
10009838:	1000a48d 	.word	0x1000a48d
1000983c:	10009775 	.word	0x10009775
10009840:	1001a37c 	.word	0x1001a37c

10009844 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
10009844:	b5f0      	push	{r4, r5, r6, r7, lr}
10009846:	465f      	mov	r7, fp
10009848:	4656      	mov	r6, sl
1000984a:	464d      	mov	r5, r9
1000984c:	4644      	mov	r4, r8
1000984e:	b4f0      	push	{r4, r5, r6, r7}
10009850:	b09d      	sub	sp, #116	; 0x74
10009852:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009854:	2206      	movs	r2, #6
10009856:	2100      	movs	r1, #0
10009858:	a81a      	add	r0, sp, #104	; 0x68
1000985a:	4ce0      	ldr	r4, [pc, #896]	; (10009bdc <sms_imu_selftest+0x398>)
1000985c:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000985e:	220c      	movs	r2, #12
10009860:	2100      	movs	r1, #0
10009862:	a817      	add	r0, sp, #92	; 0x5c
10009864:	47a0      	blx	r4
10009866:	220c      	movs	r2, #12
10009868:	2100      	movs	r1, #0
1000986a:	a814      	add	r0, sp, #80	; 0x50
1000986c:	47a0      	blx	r4
1000986e:	220c      	movs	r2, #12
10009870:	2100      	movs	r1, #0
10009872:	a811      	add	r0, sp, #68	; 0x44
10009874:	47a0      	blx	r4
10009876:	220c      	movs	r2, #12
10009878:	2100      	movs	r1, #0
1000987a:	a80e      	add	r0, sp, #56	; 0x38
1000987c:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000987e:	2200      	movs	r2, #0
10009880:	2119      	movs	r1, #25
10009882:	2069      	movs	r0, #105	; 0x69
10009884:	4cd6      	ldr	r4, [pc, #856]	; (10009be0 <sms_imu_selftest+0x39c>)
10009886:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009888:	2202      	movs	r2, #2
1000988a:	211a      	movs	r1, #26
1000988c:	2069      	movs	r0, #105	; 0x69
1000988e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009890:	2200      	movs	r2, #0
10009892:	211b      	movs	r1, #27
10009894:	2069      	movs	r0, #105	; 0x69
10009896:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009898:	2202      	movs	r2, #2
1000989a:	211d      	movs	r1, #29
1000989c:	2069      	movs	r0, #105	; 0x69
1000989e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
100098a0:	2200      	movs	r2, #0
100098a2:	211c      	movs	r1, #28
100098a4:	2069      	movs	r0, #105	; 0x69
100098a6:	47a0      	blx	r4
100098a8:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098aa:	ac1a      	add	r4, sp, #104	; 0x68
100098ac:	4ecd      	ldr	r6, [pc, #820]	; (10009be4 <sms_imu_selftest+0x3a0>)
100098ae:	0023      	movs	r3, r4
100098b0:	2206      	movs	r2, #6
100098b2:	213b      	movs	r1, #59	; 0x3b
100098b4:	2069      	movs	r0, #105	; 0x69
100098b6:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100098b8:	7823      	ldrb	r3, [r4, #0]
100098ba:	021b      	lsls	r3, r3, #8
100098bc:	7862      	ldrb	r2, [r4, #1]
100098be:	4313      	orrs	r3, r2
100098c0:	b21b      	sxth	r3, r3
100098c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
100098c4:	4694      	mov	ip, r2
100098c6:	4463      	add	r3, ip
100098c8:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100098ca:	78a3      	ldrb	r3, [r4, #2]
100098cc:	021b      	lsls	r3, r3, #8
100098ce:	78e2      	ldrb	r2, [r4, #3]
100098d0:	4313      	orrs	r3, r2
100098d2:	b21b      	sxth	r3, r3
100098d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
100098d6:	9200      	str	r2, [sp, #0]
100098d8:	4694      	mov	ip, r2
100098da:	4463      	add	r3, ip
100098dc:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
100098de:	7923      	ldrb	r3, [r4, #4]
100098e0:	021b      	lsls	r3, r3, #8
100098e2:	7962      	ldrb	r2, [r4, #5]
100098e4:	4313      	orrs	r3, r2
100098e6:	b21b      	sxth	r3, r3
100098e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
100098ea:	9200      	str	r2, [sp, #0]
100098ec:	4694      	mov	ip, r2
100098ee:	4463      	add	r3, ip
100098f0:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098f2:	0023      	movs	r3, r4
100098f4:	2206      	movs	r2, #6
100098f6:	2143      	movs	r1, #67	; 0x43
100098f8:	2069      	movs	r0, #105	; 0x69
100098fa:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100098fc:	7823      	ldrb	r3, [r4, #0]
100098fe:	021b      	lsls	r3, r3, #8
10009900:	7862      	ldrb	r2, [r4, #1]
10009902:	4313      	orrs	r3, r2
10009904:	b21b      	sxth	r3, r3
10009906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009908:	4694      	mov	ip, r2
1000990a:	4463      	add	r3, ip
1000990c:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000990e:	78a3      	ldrb	r3, [r4, #2]
10009910:	021b      	lsls	r3, r3, #8
10009912:	78e2      	ldrb	r2, [r4, #3]
10009914:	4313      	orrs	r3, r2
10009916:	b21b      	sxth	r3, r3
10009918:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000991a:	9200      	str	r2, [sp, #0]
1000991c:	4694      	mov	ip, r2
1000991e:	4463      	add	r3, ip
10009920:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009922:	7923      	ldrb	r3, [r4, #4]
10009924:	021b      	lsls	r3, r3, #8
10009926:	7962      	ldrb	r2, [r4, #5]
10009928:	4313      	orrs	r3, r2
1000992a:	b21b      	sxth	r3, r3
1000992c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000992e:	9200      	str	r2, [sp, #0]
10009930:	4694      	mov	ip, r2
10009932:	4463      	add	r3, ip
10009934:	9319      	str	r3, [sp, #100]	; 0x64
10009936:	3d01      	subs	r5, #1
10009938:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000993a:	2d00      	cmp	r5, #0
1000993c:	d1b7      	bne.n	100098ae <sms_imu_selftest+0x6a>
1000993e:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009940:	4ea9      	ldr	r6, [pc, #676]	; (10009be8 <sms_imu_selftest+0x3a4>)
10009942:	ad14      	add	r5, sp, #80	; 0x50
10009944:	21c8      	movs	r1, #200	; 0xc8
10009946:	5960      	ldr	r0, [r4, r5]
10009948:	47b0      	blx	r6
1000994a:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000994c:	ad17      	add	r5, sp, #92	; 0x5c
1000994e:	21c8      	movs	r1, #200	; 0xc8
10009950:	5960      	ldr	r0, [r4, r5]
10009952:	47b0      	blx	r6
10009954:	5160      	str	r0, [r4, r5]
10009956:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009958:	2c0c      	cmp	r4, #12
1000995a:	d1f2      	bne.n	10009942 <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000995c:	22e0      	movs	r2, #224	; 0xe0
1000995e:	211c      	movs	r1, #28
10009960:	2069      	movs	r0, #105	; 0x69
10009962:	4c9f      	ldr	r4, [pc, #636]	; (10009be0 <sms_imu_selftest+0x39c>)
10009964:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009966:	22e0      	movs	r2, #224	; 0xe0
10009968:	211c      	movs	r1, #28
1000996a:	2069      	movs	r0, #105	; 0x69
1000996c:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000996e:	2019      	movs	r0, #25
10009970:	4b9e      	ldr	r3, [pc, #632]	; (10009bec <sms_imu_selftest+0x3a8>)
10009972:	4798      	blx	r3
10009974:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009976:	ac1a      	add	r4, sp, #104	; 0x68
10009978:	4e9a      	ldr	r6, [pc, #616]	; (10009be4 <sms_imu_selftest+0x3a0>)
1000997a:	0023      	movs	r3, r4
1000997c:	2206      	movs	r2, #6
1000997e:	213b      	movs	r1, #59	; 0x3b
10009980:	2069      	movs	r0, #105	; 0x69
10009982:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009984:	7823      	ldrb	r3, [r4, #0]
10009986:	021b      	lsls	r3, r3, #8
10009988:	7862      	ldrb	r2, [r4, #1]
1000998a:	4313      	orrs	r3, r2
1000998c:	b21b      	sxth	r3, r3
1000998e:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009990:	4694      	mov	ip, r2
10009992:	4463      	add	r3, ip
10009994:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009996:	78a3      	ldrb	r3, [r4, #2]
10009998:	021b      	lsls	r3, r3, #8
1000999a:	78e2      	ldrb	r2, [r4, #3]
1000999c:	4313      	orrs	r3, r2
1000999e:	b21b      	sxth	r3, r3
100099a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100099a2:	9200      	str	r2, [sp, #0]
100099a4:	4694      	mov	ip, r2
100099a6:	4463      	add	r3, ip
100099a8:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100099aa:	7923      	ldrb	r3, [r4, #4]
100099ac:	021b      	lsls	r3, r3, #8
100099ae:	7962      	ldrb	r2, [r4, #5]
100099b0:	4313      	orrs	r3, r2
100099b2:	b21b      	sxth	r3, r3
100099b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100099b6:	9200      	str	r2, [sp, #0]
100099b8:	4694      	mov	ip, r2
100099ba:	4463      	add	r3, ip
100099bc:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100099be:	0023      	movs	r3, r4
100099c0:	2206      	movs	r2, #6
100099c2:	2143      	movs	r1, #67	; 0x43
100099c4:	2069      	movs	r0, #105	; 0x69
100099c6:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100099c8:	7823      	ldrb	r3, [r4, #0]
100099ca:	021b      	lsls	r3, r3, #8
100099cc:	7862      	ldrb	r2, [r4, #1]
100099ce:	4313      	orrs	r3, r2
100099d0:	b21b      	sxth	r3, r3
100099d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100099d4:	4694      	mov	ip, r2
100099d6:	4463      	add	r3, ip
100099d8:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100099da:	78a3      	ldrb	r3, [r4, #2]
100099dc:	021b      	lsls	r3, r3, #8
100099de:	78e2      	ldrb	r2, [r4, #3]
100099e0:	4313      	orrs	r3, r2
100099e2:	b21b      	sxth	r3, r3
100099e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100099e6:	9200      	str	r2, [sp, #0]
100099e8:	4694      	mov	ip, r2
100099ea:	4463      	add	r3, ip
100099ec:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100099ee:	7923      	ldrb	r3, [r4, #4]
100099f0:	021b      	lsls	r3, r3, #8
100099f2:	7962      	ldrb	r2, [r4, #5]
100099f4:	4313      	orrs	r3, r2
100099f6:	b21b      	sxth	r3, r3
100099f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100099fa:	9200      	str	r2, [sp, #0]
100099fc:	4694      	mov	ip, r2
100099fe:	4463      	add	r3, ip
10009a00:	9310      	str	r3, [sp, #64]	; 0x40
10009a02:	3d01      	subs	r5, #1
10009a04:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009a06:	2d00      	cmp	r5, #0
10009a08:	d1b7      	bne.n	1000997a <sms_imu_selftest+0x136>
10009a0a:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009a0c:	4e76      	ldr	r6, [pc, #472]	; (10009be8 <sms_imu_selftest+0x3a4>)
10009a0e:	ad11      	add	r5, sp, #68	; 0x44
10009a10:	21c8      	movs	r1, #200	; 0xc8
10009a12:	5960      	ldr	r0, [r4, r5]
10009a14:	47b0      	blx	r6
10009a16:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009a18:	ad0e      	add	r5, sp, #56	; 0x38
10009a1a:	21c8      	movs	r1, #200	; 0xc8
10009a1c:	5960      	ldr	r0, [r4, r5]
10009a1e:	47b0      	blx	r6
10009a20:	5160      	str	r0, [r4, r5]
10009a22:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009a24:	2c0c      	cmp	r4, #12
10009a26:	d1f2      	bne.n	10009a0e <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009a28:	2200      	movs	r2, #0
10009a2a:	211c      	movs	r1, #28
10009a2c:	2069      	movs	r0, #105	; 0x69
10009a2e:	4c6c      	ldr	r4, [pc, #432]	; (10009be0 <sms_imu_selftest+0x39c>)
10009a30:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009a32:	2200      	movs	r2, #0
10009a34:	211b      	movs	r1, #27
10009a36:	2069      	movs	r0, #105	; 0x69
10009a38:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009a3a:	2019      	movs	r0, #25
10009a3c:	4b6b      	ldr	r3, [pc, #428]	; (10009bec <sms_imu_selftest+0x3a8>)
10009a3e:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009a40:	210d      	movs	r1, #13
10009a42:	2069      	movs	r0, #105	; 0x69
10009a44:	4d6a      	ldr	r5, [pc, #424]	; (10009bf0 <sms_imu_selftest+0x3ac>)
10009a46:	47a8      	blx	r5
10009a48:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
10009a4a:	210e      	movs	r1, #14
10009a4c:	2069      	movs	r0, #105	; 0x69
10009a4e:	47a8      	blx	r5
10009a50:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009a52:	210f      	movs	r1, #15
10009a54:	2069      	movs	r0, #105	; 0x69
10009a56:	47a8      	blx	r5
10009a58:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
10009a5a:	2100      	movs	r1, #0
10009a5c:	2069      	movs	r0, #105	; 0x69
10009a5e:	47a8      	blx	r5
10009a60:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009a62:	2101      	movs	r1, #1
10009a64:	2069      	movs	r0, #105	; 0x69
10009a66:	47a8      	blx	r5
10009a68:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
10009a6a:	2102      	movs	r1, #2
10009a6c:	2069      	movs	r0, #105	; 0x69
10009a6e:	47a8      	blx	r5
10009a70:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009a72:	4b60      	ldr	r3, [pc, #384]	; (10009bf4 <sms_imu_selftest+0x3b0>)
10009a74:	469a      	mov	sl, r3
10009a76:	0020      	movs	r0, r4
10009a78:	4798      	blx	r3
10009a7a:	4b5f      	ldr	r3, [pc, #380]	; (10009bf8 <sms_imu_selftest+0x3b4>)
10009a7c:	4699      	mov	r9, r3
10009a7e:	4798      	blx	r3
10009a80:	4e5e      	ldr	r6, [pc, #376]	; (10009bfc <sms_imu_selftest+0x3b8>)
10009a82:	2200      	movs	r2, #0
10009a84:	4b5e      	ldr	r3, [pc, #376]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009a86:	47b0      	blx	r6
10009a88:	0002      	movs	r2, r0
10009a8a:	000b      	movs	r3, r1
10009a8c:	485d      	ldr	r0, [pc, #372]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009a8e:	495e      	ldr	r1, [pc, #376]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009a90:	4f5e      	ldr	r7, [pc, #376]	; (10009c0c <sms_imu_selftest+0x3c8>)
10009a92:	47b8      	blx	r7
10009a94:	4d5e      	ldr	r5, [pc, #376]	; (10009c10 <sms_imu_selftest+0x3cc>)
10009a96:	2200      	movs	r2, #0
10009a98:	4b5e      	ldr	r3, [pc, #376]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009a9a:	47a8      	blx	r5
10009a9c:	4c5e      	ldr	r4, [pc, #376]	; (10009c18 <sms_imu_selftest+0x3d4>)
10009a9e:	47a0      	blx	r4
10009aa0:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009aa2:	9800      	ldr	r0, [sp, #0]
10009aa4:	47d0      	blx	sl
10009aa6:	47c8      	blx	r9
10009aa8:	2200      	movs	r2, #0
10009aaa:	4b55      	ldr	r3, [pc, #340]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009aac:	47b0      	blx	r6
10009aae:	0002      	movs	r2, r0
10009ab0:	000b      	movs	r3, r1
10009ab2:	4854      	ldr	r0, [pc, #336]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009ab4:	4954      	ldr	r1, [pc, #336]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009ab6:	47b8      	blx	r7
10009ab8:	2200      	movs	r2, #0
10009aba:	4b56      	ldr	r3, [pc, #344]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009abc:	47a8      	blx	r5
10009abe:	47a0      	blx	r4
10009ac0:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009ac2:	9804      	ldr	r0, [sp, #16]
10009ac4:	47d0      	blx	sl
10009ac6:	47c8      	blx	r9
10009ac8:	2200      	movs	r2, #0
10009aca:	4b4d      	ldr	r3, [pc, #308]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009acc:	47b0      	blx	r6
10009ace:	0002      	movs	r2, r0
10009ad0:	000b      	movs	r3, r1
10009ad2:	484c      	ldr	r0, [pc, #304]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009ad4:	494c      	ldr	r1, [pc, #304]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009ad6:	47b8      	blx	r7
10009ad8:	2200      	movs	r2, #0
10009ada:	4b4e      	ldr	r3, [pc, #312]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009adc:	47a8      	blx	r5
10009ade:	47a0      	blx	r4
10009ae0:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009ae2:	9805      	ldr	r0, [sp, #20]
10009ae4:	47d0      	blx	sl
10009ae6:	47c8      	blx	r9
10009ae8:	2200      	movs	r2, #0
10009aea:	4b45      	ldr	r3, [pc, #276]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009aec:	47b0      	blx	r6
10009aee:	0002      	movs	r2, r0
10009af0:	000b      	movs	r3, r1
10009af2:	4844      	ldr	r0, [pc, #272]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009af4:	4944      	ldr	r1, [pc, #272]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009af6:	47b8      	blx	r7
10009af8:	2200      	movs	r2, #0
10009afa:	4b46      	ldr	r3, [pc, #280]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009afc:	47a8      	blx	r5
10009afe:	47a0      	blx	r4
10009b00:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009b02:	9806      	ldr	r0, [sp, #24]
10009b04:	47d0      	blx	sl
10009b06:	47c8      	blx	r9
10009b08:	2200      	movs	r2, #0
10009b0a:	4b3d      	ldr	r3, [pc, #244]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009b0c:	47b0      	blx	r6
10009b0e:	0002      	movs	r2, r0
10009b10:	000b      	movs	r3, r1
10009b12:	483c      	ldr	r0, [pc, #240]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009b14:	493c      	ldr	r1, [pc, #240]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009b16:	47b8      	blx	r7
10009b18:	2200      	movs	r2, #0
10009b1a:	4b3e      	ldr	r3, [pc, #248]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009b1c:	47a8      	blx	r5
10009b1e:	47a0      	blx	r4
10009b20:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009b22:	9807      	ldr	r0, [sp, #28]
10009b24:	47d0      	blx	sl
10009b26:	47c8      	blx	r9
10009b28:	2200      	movs	r2, #0
10009b2a:	4b35      	ldr	r3, [pc, #212]	; (10009c00 <sms_imu_selftest+0x3bc>)
10009b2c:	47b0      	blx	r6
10009b2e:	0002      	movs	r2, r0
10009b30:	000b      	movs	r3, r1
10009b32:	4834      	ldr	r0, [pc, #208]	; (10009c04 <sms_imu_selftest+0x3c0>)
10009b34:	4934      	ldr	r1, [pc, #208]	; (10009c08 <sms_imu_selftest+0x3c4>)
10009b36:	47b8      	blx	r7
10009b38:	2200      	movs	r2, #0
10009b3a:	4b36      	ldr	r3, [pc, #216]	; (10009c14 <sms_imu_selftest+0x3d0>)
10009b3c:	47a8      	blx	r5
10009b3e:	47a0      	blx	r4
10009b40:	900d      	str	r0, [sp, #52]	; 0x34
10009b42:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009b44:	4b35      	ldr	r3, [pc, #212]	; (10009c1c <sms_imu_selftest+0x3d8>)
10009b46:	4699      	mov	r9, r3
10009b48:	4d2b      	ldr	r5, [pc, #172]	; (10009bf8 <sms_imu_selftest+0x3b4>)
10009b4a:	4b31      	ldr	r3, [pc, #196]	; (10009c10 <sms_imu_selftest+0x3cc>)
10009b4c:	4698      	mov	r8, r3
10009b4e:	4b34      	ldr	r3, [pc, #208]	; (10009c20 <sms_imu_selftest+0x3dc>)
10009b50:	469a      	mov	sl, r3
10009b52:	4f2a      	ldr	r7, [pc, #168]	; (10009bfc <sms_imu_selftest+0x3b8>)
10009b54:	4e30      	ldr	r6, [pc, #192]	; (10009c18 <sms_imu_selftest+0x3d4>)
10009b56:	ab11      	add	r3, sp, #68	; 0x44
10009b58:	58e3      	ldr	r3, [r4, r3]
10009b5a:	aa14      	add	r2, sp, #80	; 0x50
10009b5c:	58a0      	ldr	r0, [r4, r2]
10009b5e:	1a18      	subs	r0, r3, r0
10009b60:	47c8      	blx	r9
10009b62:	47a8      	blx	r5
10009b64:	2200      	movs	r2, #0
10009b66:	4b2f      	ldr	r3, [pc, #188]	; (10009c24 <sms_imu_selftest+0x3e0>)
10009b68:	47c0      	blx	r8
10009b6a:	9000      	str	r0, [sp, #0]
10009b6c:	9101      	str	r1, [sp, #4]
10009b6e:	ab08      	add	r3, sp, #32
10009b70:	58e0      	ldr	r0, [r4, r3]
10009b72:	47a8      	blx	r5
10009b74:	0002      	movs	r2, r0
10009b76:	000b      	movs	r3, r1
10009b78:	9800      	ldr	r0, [sp, #0]
10009b7a:	9901      	ldr	r1, [sp, #4]
10009b7c:	47d0      	blx	sl
10009b7e:	2200      	movs	r2, #0
10009b80:	4b28      	ldr	r3, [pc, #160]	; (10009c24 <sms_imu_selftest+0x3e0>)
10009b82:	47b8      	blx	r7
10009b84:	47b0      	blx	r6
10009b86:	9b03      	ldr	r3, [sp, #12]
10009b88:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009b8a:	469b      	mov	fp, r3
10009b8c:	44a3      	add	fp, r4
10009b8e:	ab0e      	add	r3, sp, #56	; 0x38
10009b90:	58e3      	ldr	r3, [r4, r3]
10009b92:	aa17      	add	r2, sp, #92	; 0x5c
10009b94:	58a0      	ldr	r0, [r4, r2]
10009b96:	1a18      	subs	r0, r3, r0
10009b98:	47c8      	blx	r9
10009b9a:	47a8      	blx	r5
10009b9c:	2200      	movs	r2, #0
10009b9e:	4b21      	ldr	r3, [pc, #132]	; (10009c24 <sms_imu_selftest+0x3e0>)
10009ba0:	47c0      	blx	r8
10009ba2:	9000      	str	r0, [sp, #0]
10009ba4:	9101      	str	r1, [sp, #4]
10009ba6:	0023      	movs	r3, r4
10009ba8:	aa08      	add	r2, sp, #32
10009baa:	4694      	mov	ip, r2
10009bac:	4463      	add	r3, ip
10009bae:	68d8      	ldr	r0, [r3, #12]
10009bb0:	47a8      	blx	r5
10009bb2:	0002      	movs	r2, r0
10009bb4:	000b      	movs	r3, r1
10009bb6:	9800      	ldr	r0, [sp, #0]
10009bb8:	9901      	ldr	r1, [sp, #4]
10009bba:	47d0      	blx	sl
10009bbc:	2200      	movs	r2, #0
10009bbe:	4b19      	ldr	r3, [pc, #100]	; (10009c24 <sms_imu_selftest+0x3e0>)
10009bc0:	47b8      	blx	r7
10009bc2:	47b0      	blx	r6
10009bc4:	465b      	mov	r3, fp
10009bc6:	60d8      	str	r0, [r3, #12]
10009bc8:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
10009bca:	2c0c      	cmp	r4, #12
10009bcc:	d1c3      	bne.n	10009b56 <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
10009bce:	b01d      	add	sp, #116	; 0x74
10009bd0:	bc3c      	pop	{r2, r3, r4, r5}
10009bd2:	4690      	mov	r8, r2
10009bd4:	4699      	mov	r9, r3
10009bd6:	46a2      	mov	sl, r4
10009bd8:	46ab      	mov	fp, r5
10009bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009bdc:	10015909 	.word	0x10015909
10009be0:	100092c1 	.word	0x100092c1
10009be4:	100090e1 	.word	0x100090e1
10009be8:	10012cf1 	.word	0x10012cf1
10009bec:	1000a48d 	.word	0x1000a48d
10009bf0:	10009775 	.word	0x10009775
10009bf4:	10013a19 	.word	0x10013a19
10009bf8:	10015671 	.word	0x10015671
10009bfc:	10014e29 	.word	0x10014e29
10009c00:	3ff00000 	.word	0x3ff00000
10009c04:	c28f5c29 	.word	0xc28f5c29
10009c08:	3ff028f5 	.word	0x3ff028f5
10009c0c:	10011995 	.word	0x10011995
10009c10:	10014935 	.word	0x10014935
10009c14:	40a47800 	.word	0x40a47800
10009c18:	10015719 	.word	0x10015719
10009c1c:	10013989 	.word	0x10013989
10009c20:	100140ed 	.word	0x100140ed
10009c24:	40590000 	.word	0x40590000

10009c28 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
10009c28:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
10009c2a:	2175      	movs	r1, #117	; 0x75
10009c2c:	2069      	movs	r0, #105	; 0x69
10009c2e:	4b06      	ldr	r3, [pc, #24]	; (10009c48 <sms_imu_mpu_check+0x20>)
10009c30:	4798      	blx	r3
	if(c == 0x71) {
10009c32:	2871      	cmp	r0, #113	; 0x71
10009c34:	d104      	bne.n	10009c40 <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
10009c36:	4805      	ldr	r0, [pc, #20]	; (10009c4c <sms_imu_mpu_check+0x24>)
10009c38:	4b05      	ldr	r3, [pc, #20]	; (10009c50 <sms_imu_mpu_check+0x28>)
10009c3a:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
10009c3c:	2000      	movs	r0, #0
10009c3e:	e001      	b.n	10009c44 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
10009c40:	2001      	movs	r0, #1
10009c42:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009c44:	bd10      	pop	{r4, pc}
10009c46:	46c0      	nop			; (mov r8, r8)
10009c48:	10009775 	.word	0x10009775
10009c4c:	1001a384 	.word	0x1001a384
10009c50:	10009845 	.word	0x10009845

10009c54 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
10009c54:	b510      	push	{r4, lr}
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009c56:	4b0d      	ldr	r3, [pc, #52]	; (10009c8c <sms_imu_startup+0x38>)
10009c58:	4798      	blx	r3
10009c5a:	2800      	cmp	r0, #0
10009c5c:	d10e      	bne.n	10009c7c <sms_imu_startup+0x28>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
10009c5e:	490c      	ldr	r1, [pc, #48]	; (10009c90 <sms_imu_startup+0x3c>)
10009c60:	0008      	movs	r0, r1
10009c62:	380c      	subs	r0, #12
10009c64:	4b0b      	ldr	r3, [pc, #44]	; (10009c94 <sms_imu_startup+0x40>)
10009c66:	4798      	blx	r3
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
10009c68:	4b0b      	ldr	r3, [pc, #44]	; (10009c98 <sms_imu_startup+0x44>)
10009c6a:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c6c:	4b0b      	ldr	r3, [pc, #44]	; (10009c9c <sms_imu_startup+0x48>)
10009c6e:	4798      	blx	r3
10009c70:	1e04      	subs	r4, r0, #0
10009c72:	d106      	bne.n	10009c82 <sms_imu_startup+0x2e>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
10009c74:	480a      	ldr	r0, [pc, #40]	; (10009ca0 <sms_imu_startup+0x4c>)
10009c76:	4b0b      	ldr	r3, [pc, #44]	; (10009ca4 <sms_imu_startup+0x50>)
10009c78:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
10009c7a:	e004      	b.n	10009c86 <sms_imu_startup+0x32>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009c7c:	2401      	movs	r4, #1
10009c7e:	4264      	negs	r4, r4
10009c80:	e001      	b.n	10009c86 <sms_imu_startup+0x32>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c82:	2401      	movs	r4, #1
10009c84:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
10009c86:	0020      	movs	r0, r4
10009c88:	bd10      	pop	{r4, pc}
10009c8a:	46c0      	nop			; (mov r8, r8)
10009c8c:	10009c29 	.word	0x10009c29
10009c90:	1001a3a8 	.word	0x1001a3a8
10009c94:	100092d9 	.word	0x100092d9
10009c98:	100097a5 	.word	0x100097a5
10009c9c:	1000978d 	.word	0x1000978d
10009ca0:	1001a3c0 	.word	0x1001a3c0
10009ca4:	10009651 	.word	0x10009651

10009ca8 <sms_led_switch_on>:
	sms_led_switch_off(SMS_LED_0);
}


void sms_led_switch_on(enum sms_leds led)
{
10009ca8:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009caa:	2100      	movs	r1, #0
10009cac:	4b01      	ldr	r3, [pc, #4]	; (10009cb4 <sms_led_switch_on+0xc>)
10009cae:	4798      	blx	r3
}
10009cb0:	bd10      	pop	{r4, pc}
10009cb2:	46c0      	nop			; (mov r8, r8)
10009cb4:	1000ada5 	.word	0x1000ada5

10009cb8 <sms_led_switch_off>:
void sms_led_switch_off(enum sms_leds led)
{
10009cb8:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009cba:	2101      	movs	r1, #1
10009cbc:	4b01      	ldr	r3, [pc, #4]	; (10009cc4 <sms_led_switch_off+0xc>)
10009cbe:	4798      	blx	r3
}
10009cc0:	bd10      	pop	{r4, pc}
10009cc2:	46c0      	nop			; (mov r8, r8)
10009cc4:	1000ada5 	.word	0x1000ada5

10009cc8 <sms_led_gpio_init>:
*/

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009cc8:	b510      	push	{r4, lr}
10009cca:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* LED0 @ GPIO_LP_GPIO_22 */
	gpio_get_config_defaults(&config_gpio_pin);
10009ccc:	ac01      	add	r4, sp, #4
10009cce:	0020      	movs	r0, r4
10009cd0:	4b0a      	ldr	r3, [pc, #40]	; (10009cfc <sms_led_gpio_init+0x34>)
10009cd2:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009cd4:	2301      	movs	r3, #1
10009cd6:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(SMS_LED_0, &config_gpio_pin) != STATUS_OK) {
10009cd8:	0021      	movs	r1, r4
10009cda:	2016      	movs	r0, #22
10009cdc:	4b08      	ldr	r3, [pc, #32]	; (10009d00 <sms_led_gpio_init+0x38>)
10009cde:	4798      	blx	r3
10009ce0:	2800      	cmp	r0, #0
10009ce2:	d005      	beq.n	10009cf0 <sms_led_gpio_init+0x28>
		DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009ce4:	4807      	ldr	r0, [pc, #28]	; (10009d04 <sms_led_gpio_init+0x3c>)
10009ce6:	4b08      	ldr	r3, [pc, #32]	; (10009d08 <sms_led_gpio_init+0x40>)
10009ce8:	4798      	blx	r3
10009cea:	4808      	ldr	r0, [pc, #32]	; (10009d0c <sms_led_gpio_init+0x44>)
10009cec:	4b08      	ldr	r3, [pc, #32]	; (10009d10 <sms_led_gpio_init+0x48>)
10009cee:	4798      	blx	r3
	}
	sms_led_switch_off(SMS_LED_0);
10009cf0:	2016      	movs	r0, #22
10009cf2:	4b08      	ldr	r3, [pc, #32]	; (10009d14 <sms_led_gpio_init+0x4c>)
10009cf4:	4798      	blx	r3
}
10009cf6:	b002      	add	sp, #8
10009cf8:	bd10      	pop	{r4, pc}
10009cfa:	46c0      	nop			; (mov r8, r8)
10009cfc:	1000ab3d 	.word	0x1000ab3d
10009d00:	1000ab4d 	.word	0x1000ab4d
10009d04:	10016b98 	.word	0x10016b98
10009d08:	10015b71 	.word	0x10015b71
10009d0c:	100172b8 	.word	0x100172b8
10009d10:	10015a51 	.word	0x10015a51
10009d14:	10009cb9 	.word	0x10009cb9

10009d18 <sms_led_toggle>:
void sms_led_switch_off(enum sms_leds led)
{
	gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}
void sms_led_toggle(enum sms_leds led)
{
10009d18:	b510      	push	{r4, lr}
10009d1a:	0004      	movs	r4, r0
	if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
	else sms_led_switch_on(led);
}
bool sms_led_get_state(enum sms_leds led)
{
	return gpio_pin_get_output_level(led);
10009d1c:	4b05      	ldr	r3, [pc, #20]	; (10009d34 <sms_led_toggle+0x1c>)
10009d1e:	4798      	blx	r3
	gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}
void sms_led_toggle(enum sms_leds led)
{
	bool state = sms_led_get_state(led);
	if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10009d20:	2800      	cmp	r0, #0
10009d22:	d103      	bne.n	10009d2c <sms_led_toggle+0x14>
10009d24:	0020      	movs	r0, r4
10009d26:	4b04      	ldr	r3, [pc, #16]	; (10009d38 <sms_led_toggle+0x20>)
10009d28:	4798      	blx	r3
10009d2a:	e002      	b.n	10009d32 <sms_led_toggle+0x1a>
	else sms_led_switch_on(led);
10009d2c:	0020      	movs	r0, r4
10009d2e:	4b03      	ldr	r3, [pc, #12]	; (10009d3c <sms_led_toggle+0x24>)
10009d30:	4798      	blx	r3
}
10009d32:	bd10      	pop	{r4, pc}
10009d34:	1000ad55 	.word	0x1000ad55
10009d38:	10009cb9 	.word	0x10009cb9
10009d3c:	10009ca9 	.word	0x10009ca9

10009d40 <sms_led_blink_start>:
{
	return gpio_pin_get_output_level(led);
}

void sms_led_blink_start(enum sms_leds led, enum sms_timer_modes mode)
{
10009d40:	b570      	push	{r4, r5, r6, lr}
10009d42:	000c      	movs	r4, r1
	sms_led_switch_on(led);
10009d44:	4b0a      	ldr	r3, [pc, #40]	; (10009d70 <sms_led_blink_start+0x30>)
10009d46:	4798      	blx	r3
	uint32_t delay = 0;
	timer2_instance.current_mode = mode;
10009d48:	4b0a      	ldr	r3, [pc, #40]	; (10009d74 <sms_led_blink_start+0x34>)
10009d4a:	705c      	strb	r4, [r3, #1]
}

void sms_led_blink_start(enum sms_leds led, enum sms_timer_modes mode)
{
	sms_led_switch_on(led);
	uint32_t delay = 0;
10009d4c:	2500      	movs	r5, #0
	timer2_instance.current_mode = mode;
	switch(mode) {
10009d4e:	2c01      	cmp	r4, #1
10009d50:	d102      	bne.n	10009d58 <sms_led_blink_start+0x18>
		case TIMER_MODE_ADVERTISING:
		delay = SMS_BLINK_ADV_MS;
10009d52:	25fa      	movs	r5, #250	; 0xfa
10009d54:	00ad      	lsls	r5, r5, #2
10009d56:	e7ff      	b.n	10009d58 <sms_led_blink_start+0x18>
		
		default:
		break;
	}

	sms_dualtimer_register_callback(timer2_instance.id, sms_dualtimer2_cb);
10009d58:	4c06      	ldr	r4, [pc, #24]	; (10009d74 <sms_led_blink_start+0x34>)
10009d5a:	7820      	ldrb	r0, [r4, #0]
10009d5c:	4906      	ldr	r1, [pc, #24]	; (10009d78 <sms_led_blink_start+0x38>)
10009d5e:	4b07      	ldr	r3, [pc, #28]	; (10009d7c <sms_led_blink_start+0x3c>)
10009d60:	4798      	blx	r3
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
10009d62:	7822      	ldrb	r2, [r4, #0]
10009d64:	0029      	movs	r1, r5
10009d66:	2001      	movs	r0, #1
10009d68:	4b05      	ldr	r3, [pc, #20]	; (10009d80 <sms_led_blink_start+0x40>)
10009d6a:	4798      	blx	r3
}
10009d6c:	bd70      	pop	{r4, r5, r6, pc}
10009d6e:	46c0      	nop			; (mov r8, r8)
10009d70:	10009ca9 	.word	0x10009ca9
10009d74:	1001a360 	.word	0x1001a360
10009d78:	1000a441 	.word	0x1000a441
10009d7c:	1000a395 	.word	0x1000a395
10009d80:	1000a3c5 	.word	0x1000a3c5

10009d84 <sms_led_blink_stop>:

void sms_led_blink_stop(enum sms_leds led)
{
10009d84:	b510      	push	{r4, lr}
	/* Switch LED off and unregister timer2 callback
	* to use it later as a blocking delay */
	sms_led_switch_off(led);
10009d86:	4b04      	ldr	r3, [pc, #16]	; (10009d98 <sms_led_blink_stop+0x14>)
10009d88:	4798      	blx	r3
	timer2_instance.current_mode = TIMER_MODE_NONE;
10009d8a:	4b04      	ldr	r3, [pc, #16]	; (10009d9c <sms_led_blink_stop+0x18>)
10009d8c:	2200      	movs	r2, #0
10009d8e:	705a      	strb	r2, [r3, #1]
	sms_dualtimer_unregister_callback(timer2_instance.id);
10009d90:	7818      	ldrb	r0, [r3, #0]
10009d92:	4b03      	ldr	r3, [pc, #12]	; (10009da0 <sms_led_blink_stop+0x1c>)
10009d94:	4798      	blx	r3
}
10009d96:	bd10      	pop	{r4, pc}
10009d98:	10009cb9 	.word	0x10009cb9
10009d9c:	1001a360 	.word	0x1001a360
10009da0:	1000a3ad 	.word	0x1000a3ad

10009da4 <sms_pressure_init_variables>:
#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	//pressure_device.hal.current_state = MS58_STATE_NONE;
	pressure_device.state = PRESSURE_STATE_OFF;
10009da4:	4b05      	ldr	r3, [pc, #20]	; (10009dbc <sms_pressure_init_variables+0x18>)
10009da6:	2200      	movs	r2, #0
10009da8:	212b      	movs	r1, #43	; 0x2b
10009daa:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.rts = false;
10009dac:	3901      	subs	r1, #1
10009dae:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.enabled = false;
10009db0:	3902      	subs	r1, #2
10009db2:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.new_value = false;
10009db4:	3101      	adds	r1, #1
10009db6:	545a      	strb	r2, [r3, r1]
}
10009db8:	4770      	bx	lr
10009dba:	46c0      	nop			; (mov r8, r8)
10009dbc:	1001a2c8 	.word	0x1001a2c8

10009dc0 <sms_pressure_ms58_reset>:
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
}

enum status_code sms_pressure_ms58_reset(void)
{
10009dc0:	b510      	push	{r4, lr}
10009dc2:	b082      	sub	sp, #8
	enum status_code status;
    spi_wdata[0] = MS58_RESET;
10009dc4:	4a08      	ldr	r2, [pc, #32]	; (10009de8 <sms_pressure_ms58_reset+0x28>)
10009dc6:	231e      	movs	r3, #30
10009dc8:	7013      	strb	r3, [r2, #0]
    if((status = sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1)) != STATUS_OK) return status;
10009dca:	3b1d      	subs	r3, #29
10009dcc:	9300      	str	r3, [sp, #0]
10009dce:	4b07      	ldr	r3, [pc, #28]	; (10009dec <sms_pressure_ms58_reset+0x2c>)
10009dd0:	4907      	ldr	r1, [pc, #28]	; (10009df0 <sms_pressure_ms58_reset+0x30>)
10009dd2:	4808      	ldr	r0, [pc, #32]	; (10009df4 <sms_pressure_ms58_reset+0x34>)
10009dd4:	4c08      	ldr	r4, [pc, #32]	; (10009df8 <sms_pressure_ms58_reset+0x38>)
10009dd6:	47a0      	blx	r4
10009dd8:	1e04      	subs	r4, r0, #0
10009dda:	d102      	bne.n	10009de2 <sms_pressure_ms58_reset+0x22>
	
	delay_ms(SMS_PRESSURE_RESET_MS);
10009ddc:	2003      	movs	r0, #3
10009dde:	4b07      	ldr	r3, [pc, #28]	; (10009dfc <sms_pressure_ms58_reset+0x3c>)
10009de0:	4798      	blx	r3
	return STATUS_OK;
}
10009de2:	0020      	movs	r0, r4
10009de4:	b002      	add	sp, #8
10009de6:	bd10      	pop	{r4, pc}
10009de8:	1001a2b8 	.word	0x1001a2b8
10009dec:	1001a2a4 	.word	0x1001a2a4
10009df0:	1001a364 	.word	0x1001a364
10009df4:	1001a370 	.word	0x1001a370
10009df8:	1000a259 	.word	0x1000a259
10009dfc:	1000a48d 	.word	0x1000a48d

10009e00 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

int sms_pressure_ms58_read_prom(void)
{
10009e00:	b510      	push	{r4, lr}
10009e02:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009e04:	4a4c      	ldr	r2, [pc, #304]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009e06:	23a2      	movs	r3, #162	; 0xa2
10009e08:	7013      	strb	r3, [r2, #0]
    spi_wdata[1] = 0x00;
10009e0a:	2300      	movs	r3, #0
10009e0c:	7053      	strb	r3, [r2, #1]
    spi_wdata[2] = 0x00;
10009e0e:	7093      	strb	r3, [r2, #2]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e10:	3303      	adds	r3, #3
10009e12:	9300      	str	r3, [sp, #0]
10009e14:	4b49      	ldr	r3, [pc, #292]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009e16:	494a      	ldr	r1, [pc, #296]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009e18:	484a      	ldr	r0, [pc, #296]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009e1a:	4c4b      	ldr	r4, [pc, #300]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009e1c:	47a0      	blx	r4
10009e1e:	2800      	cmp	r0, #0
10009e20:	d173      	bne.n	10009f0a <sms_pressure_ms58_read_prom+0x10a>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e22:	4b46      	ldr	r3, [pc, #280]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009e24:	785a      	ldrb	r2, [r3, #1]
10009e26:	0212      	lsls	r2, r2, #8
10009e28:	7899      	ldrb	r1, [r3, #2]
10009e2a:	430a      	orrs	r2, r1
10009e2c:	4947      	ldr	r1, [pc, #284]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009e2e:	80ca      	strh	r2, [r1, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009e30:	4a41      	ldr	r2, [pc, #260]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009e32:	21a4      	movs	r1, #164	; 0xa4
10009e34:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e36:	39a1      	subs	r1, #161	; 0xa1
10009e38:	9100      	str	r1, [sp, #0]
10009e3a:	4941      	ldr	r1, [pc, #260]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009e3c:	4841      	ldr	r0, [pc, #260]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009e3e:	4c42      	ldr	r4, [pc, #264]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009e40:	47a0      	blx	r4
10009e42:	2800      	cmp	r0, #0
10009e44:	d164      	bne.n	10009f10 <sms_pressure_ms58_read_prom+0x110>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e46:	4b3d      	ldr	r3, [pc, #244]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009e48:	785a      	ldrb	r2, [r3, #1]
10009e4a:	0212      	lsls	r2, r2, #8
10009e4c:	7899      	ldrb	r1, [r3, #2]
10009e4e:	430a      	orrs	r2, r1
10009e50:	493e      	ldr	r1, [pc, #248]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009e52:	810a      	strh	r2, [r1, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009e54:	4a38      	ldr	r2, [pc, #224]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009e56:	21a6      	movs	r1, #166	; 0xa6
10009e58:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e5a:	39a3      	subs	r1, #163	; 0xa3
10009e5c:	9100      	str	r1, [sp, #0]
10009e5e:	4938      	ldr	r1, [pc, #224]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009e60:	4838      	ldr	r0, [pc, #224]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009e62:	4c39      	ldr	r4, [pc, #228]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009e64:	47a0      	blx	r4
10009e66:	2800      	cmp	r0, #0
10009e68:	d155      	bne.n	10009f16 <sms_pressure_ms58_read_prom+0x116>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e6a:	4b34      	ldr	r3, [pc, #208]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009e6c:	785a      	ldrb	r2, [r3, #1]
10009e6e:	0212      	lsls	r2, r2, #8
10009e70:	7899      	ldrb	r1, [r3, #2]
10009e72:	430a      	orrs	r2, r1
10009e74:	4935      	ldr	r1, [pc, #212]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009e76:	814a      	strh	r2, [r1, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009e78:	4a2f      	ldr	r2, [pc, #188]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009e7a:	21a8      	movs	r1, #168	; 0xa8
10009e7c:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e7e:	39a5      	subs	r1, #165	; 0xa5
10009e80:	9100      	str	r1, [sp, #0]
10009e82:	492f      	ldr	r1, [pc, #188]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009e84:	482f      	ldr	r0, [pc, #188]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009e86:	4c30      	ldr	r4, [pc, #192]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009e88:	47a0      	blx	r4
10009e8a:	2800      	cmp	r0, #0
10009e8c:	d146      	bne.n	10009f1c <sms_pressure_ms58_read_prom+0x11c>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e8e:	4b2b      	ldr	r3, [pc, #172]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009e90:	785a      	ldrb	r2, [r3, #1]
10009e92:	0212      	lsls	r2, r2, #8
10009e94:	7899      	ldrb	r1, [r3, #2]
10009e96:	430a      	orrs	r2, r1
10009e98:	492c      	ldr	r1, [pc, #176]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009e9a:	818a      	strh	r2, [r1, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009e9c:	4a26      	ldr	r2, [pc, #152]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009e9e:	21aa      	movs	r1, #170	; 0xaa
10009ea0:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ea2:	39a7      	subs	r1, #167	; 0xa7
10009ea4:	9100      	str	r1, [sp, #0]
10009ea6:	4926      	ldr	r1, [pc, #152]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009ea8:	4826      	ldr	r0, [pc, #152]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009eaa:	4c27      	ldr	r4, [pc, #156]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009eac:	47a0      	blx	r4
10009eae:	2800      	cmp	r0, #0
10009eb0:	d137      	bne.n	10009f22 <sms_pressure_ms58_read_prom+0x122>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009eb2:	4b22      	ldr	r3, [pc, #136]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009eb4:	785a      	ldrb	r2, [r3, #1]
10009eb6:	0212      	lsls	r2, r2, #8
10009eb8:	7899      	ldrb	r1, [r3, #2]
10009eba:	430a      	orrs	r2, r1
10009ebc:	4923      	ldr	r1, [pc, #140]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009ebe:	81ca      	strh	r2, [r1, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009ec0:	4a1d      	ldr	r2, [pc, #116]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009ec2:	21ac      	movs	r1, #172	; 0xac
10009ec4:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ec6:	39a9      	subs	r1, #169	; 0xa9
10009ec8:	9100      	str	r1, [sp, #0]
10009eca:	491d      	ldr	r1, [pc, #116]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009ecc:	481d      	ldr	r0, [pc, #116]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009ece:	4c1e      	ldr	r4, [pc, #120]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009ed0:	47a0      	blx	r4
10009ed2:	2800      	cmp	r0, #0
10009ed4:	d128      	bne.n	10009f28 <sms_pressure_ms58_read_prom+0x128>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009ed6:	4b19      	ldr	r3, [pc, #100]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009ed8:	785a      	ldrb	r2, [r3, #1]
10009eda:	0212      	lsls	r2, r2, #8
10009edc:	7899      	ldrb	r1, [r3, #2]
10009ede:	430a      	orrs	r2, r1
10009ee0:	491a      	ldr	r1, [pc, #104]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009ee2:	820a      	strh	r2, [r1, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009ee4:	4a14      	ldr	r2, [pc, #80]	; (10009f38 <sms_pressure_ms58_read_prom+0x138>)
10009ee6:	21ae      	movs	r1, #174	; 0xae
10009ee8:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009eea:	39ab      	subs	r1, #171	; 0xab
10009eec:	9100      	str	r1, [sp, #0]
10009eee:	4914      	ldr	r1, [pc, #80]	; (10009f40 <sms_pressure_ms58_read_prom+0x140>)
10009ef0:	4814      	ldr	r0, [pc, #80]	; (10009f44 <sms_pressure_ms58_read_prom+0x144>)
10009ef2:	4c15      	ldr	r4, [pc, #84]	; (10009f48 <sms_pressure_ms58_read_prom+0x148>)
10009ef4:	47a0      	blx	r4
10009ef6:	2800      	cmp	r0, #0
10009ef8:	d119      	bne.n	10009f2e <sms_pressure_ms58_read_prom+0x12e>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009efa:	4a10      	ldr	r2, [pc, #64]	; (10009f3c <sms_pressure_ms58_read_prom+0x13c>)
10009efc:	7853      	ldrb	r3, [r2, #1]
10009efe:	021b      	lsls	r3, r3, #8
10009f00:	7892      	ldrb	r2, [r2, #2]
10009f02:	4313      	orrs	r3, r2
10009f04:	4a11      	ldr	r2, [pc, #68]	; (10009f4c <sms_pressure_ms58_read_prom+0x14c>)
10009f06:	8253      	strh	r3, [r2, #18]
    //DBG_LOG_CONT_DEV("done! Results:");
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
10009f08:	e013      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
{
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
    spi_wdata[1] = 0x00;
    spi_wdata[2] = 0x00;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f0a:	2001      	movs	r0, #1
10009f0c:	4240      	negs	r0, r0
10009f0e:	e010      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_2;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f10:	2001      	movs	r0, #1
10009f12:	4240      	negs	r0, r0
10009f14:	e00d      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_3;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f16:	2001      	movs	r0, #1
10009f18:	4240      	negs	r0, r0
10009f1a:	e00a      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_4;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f1c:	2001      	movs	r0, #1
10009f1e:	4240      	negs	r0, r0
10009f20:	e007      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_5;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f22:	2001      	movs	r0, #1
10009f24:	4240      	negs	r0, r0
10009f26:	e004      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_6;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f28:	2001      	movs	r0, #1
10009f2a:	4240      	negs	r0, r0
10009f2c:	e001      	b.n	10009f32 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_7;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009f2e:	2001      	movs	r0, #1
10009f30:	4240      	negs	r0, r0
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
}
10009f32:	b002      	add	sp, #8
10009f34:	bd10      	pop	{r4, pc}
10009f36:	46c0      	nop			; (mov r8, r8)
10009f38:	1001a2b8 	.word	0x1001a2b8
10009f3c:	1001a2a4 	.word	0x1001a2a4
10009f40:	1001a364 	.word	0x1001a364
10009f44:	1001a370 	.word	0x1001a370
10009f48:	1000a259 	.word	0x1000a259
10009f4c:	1001a2c8 	.word	0x1001a2c8

10009f50 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

int sms_pressure_startup(void)
{
10009f50:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009f52:	4810      	ldr	r0, [pc, #64]	; (10009f94 <sms_pressure_startup+0x44>)
10009f54:	4b10      	ldr	r3, [pc, #64]	; (10009f98 <sms_pressure_startup+0x48>)
10009f56:	4798      	blx	r3
10009f58:	4810      	ldr	r0, [pc, #64]	; (10009f9c <sms_pressure_startup+0x4c>)
10009f5a:	4b11      	ldr	r3, [pc, #68]	; (10009fa0 <sms_pressure_startup+0x50>)
10009f5c:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    //sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    //pressure_device.hal.current_state = MS58_STATE_RESETTING;
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
10009f5e:	4b11      	ldr	r3, [pc, #68]	; (10009fa4 <sms_pressure_startup+0x54>)
10009f60:	4798      	blx	r3
10009f62:	2800      	cmp	r0, #0
10009f64:	d008      	beq.n	10009f78 <sms_pressure_startup+0x28>
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
10009f66:	480b      	ldr	r0, [pc, #44]	; (10009f94 <sms_pressure_startup+0x44>)
10009f68:	4b0b      	ldr	r3, [pc, #44]	; (10009f98 <sms_pressure_startup+0x48>)
10009f6a:	4798      	blx	r3
10009f6c:	480e      	ldr	r0, [pc, #56]	; (10009fa8 <sms_pressure_startup+0x58>)
10009f6e:	4b0c      	ldr	r3, [pc, #48]	; (10009fa0 <sms_pressure_startup+0x50>)
10009f70:	4798      	blx	r3
		return -1;
10009f72:	2001      	movs	r0, #1
10009f74:	4240      	negs	r0, r0
10009f76:	e00b      	b.n	10009f90 <sms_pressure_startup+0x40>
}

int sms_pressure_init(void)
{
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
10009f78:	4b0c      	ldr	r3, [pc, #48]	; (10009fac <sms_pressure_startup+0x5c>)
10009f7a:	4798      	blx	r3
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
		return -1;
	}	
    if(sms_pressure_init() != STATUS_OK) {
10009f7c:	2800      	cmp	r0, #0
10009f7e:	d007      	beq.n	10009f90 <sms_pressure_startup+0x40>
        DBG_LOG("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
10009f80:	4804      	ldr	r0, [pc, #16]	; (10009f94 <sms_pressure_startup+0x44>)
10009f82:	4b05      	ldr	r3, [pc, #20]	; (10009f98 <sms_pressure_startup+0x48>)
10009f84:	4798      	blx	r3
10009f86:	480a      	ldr	r0, [pc, #40]	; (10009fb0 <sms_pressure_startup+0x60>)
10009f88:	4b05      	ldr	r3, [pc, #20]	; (10009fa0 <sms_pressure_startup+0x50>)
10009f8a:	4798      	blx	r3
        return -1;
10009f8c:	2001      	movs	r0, #1
10009f8e:	4240      	negs	r0, r0
    }
	return 0;
}
10009f90:	bd10      	pop	{r4, pc}
10009f92:	46c0      	nop			; (mov r8, r8)
10009f94:	10016b98 	.word	0x10016b98
10009f98:	10015b71 	.word	0x10015b71
10009f9c:	1001732c 	.word	0x1001732c
10009fa0:	10015a51 	.word	0x10015a51
10009fa4:	10009dc1 	.word	0x10009dc1
10009fa8:	10017360 	.word	0x10017360
10009fac:	10009e01 	.word	0x10009e01
10009fb0:	1001739c 	.word	0x1001739c

10009fb4 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.output.temperature, pressure_device.output.pressure);
}

void sms_pressure_define_services(void)
{
10009fb4:	b510      	push	{r4, lr}
10009fb6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009fb8:	466b      	mov	r3, sp
10009fba:	1dda      	adds	r2, r3, #7
10009fbc:	2300      	movs	r3, #0
10009fbe:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009fc0:	4c0d      	ldr	r4, [pc, #52]	; (10009ff8 <sms_pressure_define_services+0x44>)
10009fc2:	0021      	movs	r1, r4
10009fc4:	2001      	movs	r0, #1
10009fc6:	4b0d      	ldr	r3, [pc, #52]	; (10009ffc <sms_pressure_define_services+0x48>)
10009fc8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009fca:	0020      	movs	r0, r4
10009fcc:	4b0c      	ldr	r3, [pc, #48]	; (1000a000 <sms_pressure_define_services+0x4c>)
10009fce:	4798      	blx	r3
10009fd0:	1e04      	subs	r4, r0, #0
10009fd2:	d007      	beq.n	10009fe4 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009fd4:	480b      	ldr	r0, [pc, #44]	; (1000a004 <sms_pressure_define_services+0x50>)
10009fd6:	4b0c      	ldr	r3, [pc, #48]	; (1000a008 <sms_pressure_define_services+0x54>)
10009fd8:	4798      	blx	r3
10009fda:	0021      	movs	r1, r4
10009fdc:	480b      	ldr	r0, [pc, #44]	; (1000a00c <sms_pressure_define_services+0x58>)
10009fde:	4b0c      	ldr	r3, [pc, #48]	; (1000a010 <sms_pressure_define_services+0x5c>)
10009fe0:	4798      	blx	r3
10009fe2:	e007      	b.n	10009ff4 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009fe4:	4807      	ldr	r0, [pc, #28]	; (1000a004 <sms_pressure_define_services+0x50>)
10009fe6:	4b08      	ldr	r3, [pc, #32]	; (1000a008 <sms_pressure_define_services+0x54>)
10009fe8:	4798      	blx	r3
10009fea:	4b0a      	ldr	r3, [pc, #40]	; (1000a014 <sms_pressure_define_services+0x60>)
10009fec:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009fee:	480a      	ldr	r0, [pc, #40]	; (1000a018 <sms_pressure_define_services+0x64>)
10009ff0:	4b07      	ldr	r3, [pc, #28]	; (1000a010 <sms_pressure_define_services+0x5c>)
10009ff2:	4798      	blx	r3
    }
10009ff4:	b002      	add	sp, #8
10009ff6:	bd10      	pop	{r4, pc}
10009ff8:	1001a2f4 	.word	0x1001a2f4
10009ffc:	100089d5 	.word	0x100089d5
1000a000:	100089b1 	.word	0x100089b1
1000a004:	10016b98 	.word	0x10016b98
1000a008:	10015b71 	.word	0x10015b71
1000a00c:	1001741c 	.word	0x1001741c
1000a010:	10015a51 	.word	0x10015a51
1000a014:	1001a2c8 	.word	0x1001a2c8
1000a018:	10017464 	.word	0x10017464

1000a01c <sms_sensors_enable_callback>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
1000a01c:	b510      	push	{r4, lr}
1000a01e:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
1000a020:	2800      	cmp	r0, #0
1000a022:	d002      	beq.n	1000a02a <sms_sensors_enable_callback+0xe>
        sms_imu_enable_callback();
1000a024:	4b06      	ldr	r3, [pc, #24]	; (1000a040 <sms_sensors_enable_callback+0x24>)
1000a026:	4798      	blx	r3
1000a028:	e001      	b.n	1000a02e <sms_sensors_enable_callback+0x12>
    }
    else {
        sms_imu_disable_callback();
1000a02a:	4b06      	ldr	r3, [pc, #24]	; (1000a044 <sms_sensors_enable_callback+0x28>)
1000a02c:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
1000a02e:	2c00      	cmp	r4, #0
1000a030:	d002      	beq.n	1000a038 <sms_sensors_enable_callback+0x1c>
        sms_timer_aon_register_callback();
1000a032:	4b05      	ldr	r3, [pc, #20]	; (1000a048 <sms_sensors_enable_callback+0x2c>)
1000a034:	4798      	blx	r3
1000a036:	e001      	b.n	1000a03c <sms_sensors_enable_callback+0x20>
    }
    else {
        sms_timer_aon_unregister_callback();
1000a038:	4b04      	ldr	r3, [pc, #16]	; (1000a04c <sms_sensors_enable_callback+0x30>)
1000a03a:	4798      	blx	r3
    }
}
1000a03c:	bd10      	pop	{r4, pc}
1000a03e:	46c0      	nop			; (mov r8, r8)
1000a040:	10009209 	.word	0x10009209
1000a044:	10009225 	.word	0x10009225
1000a048:	1000a2ed 	.word	0x1000a2ed
1000a04c:	1000a30d 	.word	0x1000a30d

1000a050 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a050:	b530      	push	{r4, r5, lr}
1000a052:	b089      	sub	sp, #36	; 0x24
1000a054:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a056:	2800      	cmp	r0, #0
1000a058:	d02b      	beq.n	1000a0b2 <sms_sensors_switch+0x62>
        if(sms_imu_startup()) {
1000a05a:	4b4b      	ldr	r3, [pc, #300]	; (1000a188 <sms_sensors_switch+0x138>)
1000a05c:	4798      	blx	r3
1000a05e:	2800      	cmp	r0, #0
1000a060:	d00f      	beq.n	1000a082 <sms_sensors_switch+0x32>
	        DBG_LOG("[sms_sensors_switch]\t\tCouldn't start IMU");
1000a062:	484a      	ldr	r0, [pc, #296]	; (1000a18c <sms_sensors_switch+0x13c>)
1000a064:	4b4a      	ldr	r3, [pc, #296]	; (1000a190 <sms_sensors_switch+0x140>)
1000a066:	4798      	blx	r3
1000a068:	484a      	ldr	r0, [pc, #296]	; (1000a194 <sms_sensors_switch+0x144>)
1000a06a:	4b4b      	ldr	r3, [pc, #300]	; (1000a198 <sms_sensors_switch+0x148>)
1000a06c:	4798      	blx	r3
			dualtimer_disable(timer1_instance.id);
1000a06e:	4b4b      	ldr	r3, [pc, #300]	; (1000a19c <sms_sensors_switch+0x14c>)
1000a070:	7818      	ldrb	r0, [r3, #0]
1000a072:	4b4b      	ldr	r3, [pc, #300]	; (1000a1a0 <sms_sensors_switch+0x150>)
1000a074:	4798      	blx	r3
			imu_device.state = IMU_STATE_OFF;
1000a076:	4b4b      	ldr	r3, [pc, #300]	; (1000a1a4 <sms_sensors_switch+0x154>)
1000a078:	2200      	movs	r2, #0
1000a07a:	2187      	movs	r1, #135	; 0x87
1000a07c:	545a      	strb	r2, [r3, r1]
			imu_device.config.init_ok = false;
1000a07e:	711a      	strb	r2, [r3, #4]
1000a080:	e020      	b.n	1000a0c4 <sms_sensors_switch+0x74>
        }
        else {
			/* */
			struct dualtimer_config config;
			config.timer1.load_value = 0xffffffff;
1000a082:	a801      	add	r0, sp, #4
1000a084:	2301      	movs	r3, #1
1000a086:	425b      	negs	r3, r3
1000a088:	6083      	str	r3, [r0, #8]
			config.timer1.interrup_enable = false;
1000a08a:	2300      	movs	r3, #0
1000a08c:	7103      	strb	r3, [r0, #4]
			config.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a08e:	2501      	movs	r5, #1
1000a090:	7045      	strb	r5, [r0, #1]
			dualtimer_init(&config);
1000a092:	4b45      	ldr	r3, [pc, #276]	; (1000a1a8 <sms_sensors_switch+0x158>)
1000a094:	4798      	blx	r3
			dualtimer_disable(timer2_instance.id);
1000a096:	4b45      	ldr	r3, [pc, #276]	; (1000a1ac <sms_sensors_switch+0x15c>)
1000a098:	7818      	ldrb	r0, [r3, #0]
1000a09a:	4b41      	ldr	r3, [pc, #260]	; (1000a1a0 <sms_sensors_switch+0x150>)
1000a09c:	4798      	blx	r3
			dualtimer_enable(timer1_instance.id);
1000a09e:	4b3f      	ldr	r3, [pc, #252]	; (1000a19c <sms_sensors_switch+0x14c>)
1000a0a0:	7818      	ldrb	r0, [r3, #0]
1000a0a2:	4b43      	ldr	r3, [pc, #268]	; (1000a1b0 <sms_sensors_switch+0x160>)
1000a0a4:	4798      	blx	r3
			imu_device.state = IMU_STATE_ON;
1000a0a6:	4b3f      	ldr	r3, [pc, #252]	; (1000a1a4 <sms_sensors_switch+0x154>)
1000a0a8:	2102      	movs	r1, #2
1000a0aa:	2287      	movs	r2, #135	; 0x87
1000a0ac:	5499      	strb	r1, [r3, r2]
	        imu_device.config.init_ok = true;
1000a0ae:	711d      	strb	r5, [r3, #4]
1000a0b0:	e008      	b.n	1000a0c4 <sms_sensors_switch+0x74>
        }
    }
    else {
		dualtimer_disable(timer1_instance.id);
1000a0b2:	4b3a      	ldr	r3, [pc, #232]	; (1000a19c <sms_sensors_switch+0x14c>)
1000a0b4:	7818      	ldrb	r0, [r3, #0]
1000a0b6:	4b3a      	ldr	r3, [pc, #232]	; (1000a1a0 <sms_sensors_switch+0x150>)
1000a0b8:	4798      	blx	r3
        imu_device.state = IMU_STATE_OFF;
1000a0ba:	4b3a      	ldr	r3, [pc, #232]	; (1000a1a4 <sms_sensors_switch+0x154>)
1000a0bc:	2200      	movs	r2, #0
1000a0be:	2187      	movs	r1, #135	; 0x87
1000a0c0:	545a      	strb	r2, [r3, r1]
		imu_device.config.init_ok = false;
1000a0c2:	711a      	strb	r2, [r3, #4]
		// switch off VCC pin to save current...
    }
    
    /* Pressure */
    if(press_en) {                
1000a0c4:	2c00      	cmp	r4, #0
1000a0c6:	d021      	beq.n	1000a10c <sms_sensors_switch+0xbc>
        if(sms_pressure_startup()) {
1000a0c8:	4b3a      	ldr	r3, [pc, #232]	; (1000a1b4 <sms_sensors_switch+0x164>)
1000a0ca:	4798      	blx	r3
1000a0cc:	2800      	cmp	r0, #0
1000a0ce:	d00d      	beq.n	1000a0ec <sms_sensors_switch+0x9c>
			DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't start pressure sensor");
1000a0d0:	482e      	ldr	r0, [pc, #184]	; (1000a18c <sms_sensors_switch+0x13c>)
1000a0d2:	4b2f      	ldr	r3, [pc, #188]	; (1000a190 <sms_sensors_switch+0x140>)
1000a0d4:	4798      	blx	r3
1000a0d6:	4838      	ldr	r0, [pc, #224]	; (1000a1b8 <sms_sensors_switch+0x168>)
1000a0d8:	4b2f      	ldr	r3, [pc, #188]	; (1000a198 <sms_sensors_switch+0x148>)
1000a0da:	4798      	blx	r3
			sms_timer_aon_disable();
1000a0dc:	4b37      	ldr	r3, [pc, #220]	; (1000a1bc <sms_sensors_switch+0x16c>)
1000a0de:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
1000a0e0:	4b37      	ldr	r3, [pc, #220]	; (1000a1c0 <sms_sensors_switch+0x170>)
1000a0e2:	2200      	movs	r2, #0
1000a0e4:	212b      	movs	r1, #43	; 0x2b
1000a0e6:	545a      	strb	r2, [r3, r1]
			pressure_device.config.init_ok = false;
1000a0e8:	701a      	strb	r2, [r3, #0]
1000a0ea:	e045      	b.n	1000a178 <sms_sensors_switch+0x128>
		}
		else {
			sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a0ec:	2100      	movs	r1, #0
1000a0ee:	2064      	movs	r0, #100	; 0x64
1000a0f0:	4b34      	ldr	r3, [pc, #208]	; (1000a1c4 <sms_sensors_switch+0x174>)
1000a0f2:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_ON;
1000a0f4:	4b32      	ldr	r3, [pc, #200]	; (1000a1c0 <sms_sensors_switch+0x170>)
1000a0f6:	2102      	movs	r1, #2
1000a0f8:	222b      	movs	r2, #43	; 0x2b
1000a0fa:	5499      	strb	r1, [r3, r2]
			pressure_device.config.init_ok = true;
1000a0fc:	3a2a      	subs	r2, #42	; 0x2a
1000a0fe:	701a      	strb	r2, [r3, #0]
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a100:	2387      	movs	r3, #135	; 0x87
1000a102:	4a28      	ldr	r2, [pc, #160]	; (1000a1a4 <sms_sensors_switch+0x154>)
1000a104:	5cd3      	ldrb	r3, [r2, r3]
1000a106:	2b02      	cmp	r3, #2
1000a108:	d115      	bne.n	1000a136 <sms_sensors_switch+0xe6>
1000a10a:	e007      	b.n	1000a11c <sms_sensors_switch+0xcc>
			pressure_device.state = PRESSURE_STATE_ON;
			pressure_device.config.init_ok = true;
		}
    }
    else {
		sms_timer_aon_disable();
1000a10c:	4b2b      	ldr	r3, [pc, #172]	; (1000a1bc <sms_sensors_switch+0x16c>)
1000a10e:	4798      	blx	r3
		pressure_device.state = PRESSURE_STATE_OFF;
1000a110:	4b2b      	ldr	r3, [pc, #172]	; (1000a1c0 <sms_sensors_switch+0x170>)
1000a112:	2200      	movs	r2, #0
1000a114:	212b      	movs	r1, #43	; 0x2b
1000a116:	545a      	strb	r2, [r3, r1]
		pressure_device.config.init_ok = false;
1000a118:	701a      	strb	r2, [r3, #0]
1000a11a:	e02d      	b.n	1000a178 <sms_sensors_switch+0x128>
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
1000a11c:	2207      	movs	r2, #7
1000a11e:	4b2a      	ldr	r3, [pc, #168]	; (1000a1c8 <sms_sensors_switch+0x178>)
1000a120:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a122:	4b2a      	ldr	r3, [pc, #168]	; (1000a1cc <sms_sensors_switch+0x17c>)
1000a124:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a126:	4b2a      	ldr	r3, [pc, #168]	; (1000a1d0 <sms_sensors_switch+0x180>)
1000a128:	4798      	blx	r3
1000a12a:	e013      	b.n	1000a154 <sms_sensors_switch+0x104>
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
		sms_sensors_enable_callback(true, false);
	}
	else if(pressure_device.state == PRESSURE_STATE_ON) {
1000a12c:	232b      	movs	r3, #43	; 0x2b
1000a12e:	4a24      	ldr	r2, [pc, #144]	; (1000a1c0 <sms_sensors_switch+0x170>)
1000a130:	5cd3      	ldrb	r3, [r2, r3]
1000a132:	2b02      	cmp	r3, #2
1000a134:	d107      	bne.n	1000a146 <sms_sensors_switch+0xf6>
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000a136:	2205      	movs	r2, #5
1000a138:	4b23      	ldr	r3, [pc, #140]	; (1000a1c8 <sms_sensors_switch+0x178>)
1000a13a:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a13c:	4b25      	ldr	r3, [pc, #148]	; (1000a1d4 <sms_sensors_switch+0x184>)
1000a13e:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a140:	4b23      	ldr	r3, [pc, #140]	; (1000a1d0 <sms_sensors_switch+0x180>)
1000a142:	4798      	blx	r3
1000a144:	e006      	b.n	1000a154 <sms_sensors_switch+0x104>
	else if(pressure_device.state == PRESSURE_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
		sms_sensors_enable_callback(false, true);
	}
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000a146:	2201      	movs	r2, #1
1000a148:	4b1f      	ldr	r3, [pc, #124]	; (1000a1c8 <sms_sensors_switch+0x178>)
1000a14a:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a14c:	4b21      	ldr	r3, [pc, #132]	; (1000a1d4 <sms_sensors_switch+0x184>)
1000a14e:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a150:	4b21      	ldr	r3, [pc, #132]	; (1000a1d8 <sms_sensors_switch+0x188>)
1000a152:	4798      	blx	r3
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
1000a154:	480d      	ldr	r0, [pc, #52]	; (1000a18c <sms_sensors_switch+0x13c>)
1000a156:	4b0e      	ldr	r3, [pc, #56]	; (1000a190 <sms_sensors_switch+0x140>)
1000a158:	4798      	blx	r3
1000a15a:	4b1b      	ldr	r3, [pc, #108]	; (1000a1c8 <sms_sensors_switch+0x178>)
1000a15c:	7819      	ldrb	r1, [r3, #0]
1000a15e:	b2c9      	uxtb	r1, r1
1000a160:	481e      	ldr	r0, [pc, #120]	; (1000a1dc <sms_sensors_switch+0x18c>)
1000a162:	4b0d      	ldr	r3, [pc, #52]	; (1000a198 <sms_sensors_switch+0x148>)
1000a164:	4798      	blx	r3
}
1000a166:	e00d      	b.n	1000a184 <sms_sensors_switch+0x134>
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
		sms_sensors_enable_callback(true, true);
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
1000a168:	2204      	movs	r2, #4
1000a16a:	4b17      	ldr	r3, [pc, #92]	; (1000a1c8 <sms_sensors_switch+0x178>)
1000a16c:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a16e:	4b17      	ldr	r3, [pc, #92]	; (1000a1cc <sms_sensors_switch+0x17c>)
1000a170:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a172:	4b19      	ldr	r3, [pc, #100]	; (1000a1d8 <sms_sensors_switch+0x188>)
1000a174:	4798      	blx	r3
1000a176:	e7ed      	b.n	1000a154 <sms_sensors_switch+0x104>
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a178:	2387      	movs	r3, #135	; 0x87
1000a17a:	4a0a      	ldr	r2, [pc, #40]	; (1000a1a4 <sms_sensors_switch+0x154>)
1000a17c:	5cd3      	ldrb	r3, [r2, r3]
1000a17e:	2b02      	cmp	r3, #2
1000a180:	d1d4      	bne.n	1000a12c <sms_sensors_switch+0xdc>
1000a182:	e7f1      	b.n	1000a168 <sms_sensors_switch+0x118>
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
}
1000a184:	b009      	add	sp, #36	; 0x24
1000a186:	bd30      	pop	{r4, r5, pc}
1000a188:	10009c55 	.word	0x10009c55
1000a18c:	10016b98 	.word	0x10016b98
1000a190:	10015b71 	.word	0x10015b71
1000a194:	100174b0 	.word	0x100174b0
1000a198:	10015a51 	.word	0x10015a51
1000a19c:	1001a2b4 	.word	0x1001a2b4
1000a1a0:	1000a891 	.word	0x1000a891
1000a1a4:	1001a37c 	.word	0x1001a37c
1000a1a8:	1000a8b5 	.word	0x1000a8b5
1000a1ac:	1001a360 	.word	0x1001a360
1000a1b0:	1000a86d 	.word	0x1000a86d
1000a1b4:	10009f51 	.word	0x10009f51
1000a1b8:	100174dc 	.word	0x100174dc
1000a1bc:	1000a2e1 	.word	0x1000a2e1
1000a1c0:	1001a2c8 	.word	0x1001a2c8
1000a1c4:	1000a2b5 	.word	0x1000a2b5
1000a1c8:	1001a230 	.word	0x1001a230
1000a1cc:	10009209 	.word	0x10009209
1000a1d0:	1000a2ed 	.word	0x1000a2ed
1000a1d4:	10009225 	.word	0x10009225
1000a1d8:	1000a30d 	.word	0x1000a30d
1000a1dc:	10017514 	.word	0x10017514

1000a1e0 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a1e0:	b530      	push	{r4, r5, lr}
1000a1e2:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a1e4:	ac01      	add	r4, sp, #4
1000a1e6:	0020      	movs	r0, r4
1000a1e8:	4b13      	ldr	r3, [pc, #76]	; (1000a238 <sms_spi_master_configure+0x58>)
1000a1ea:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a1ec:	2310      	movs	r3, #16
1000a1ee:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a1f0:	0021      	movs	r1, r4
1000a1f2:	4812      	ldr	r0, [pc, #72]	; (1000a23c <sms_spi_master_configure+0x5c>)
1000a1f4:	4b12      	ldr	r3, [pc, #72]	; (1000a240 <sms_spi_master_configure+0x60>)
1000a1f6:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a1f8:	ac02      	add	r4, sp, #8
1000a1fa:	0020      	movs	r0, r4
1000a1fc:	4b11      	ldr	r3, [pc, #68]	; (1000a244 <sms_spi_master_configure+0x64>)
1000a1fe:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a200:	2368      	movs	r3, #104	; 0x68
1000a202:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a204:	2300      	movs	r3, #0
1000a206:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a208:	3311      	adds	r3, #17
1000a20a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a20c:	3b0d      	subs	r3, #13
1000a20e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a210:	2213      	movs	r2, #19
1000a212:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a214:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a216:	3a14      	subs	r2, #20
1000a218:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a21a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a21c:	3213      	adds	r2, #19
1000a21e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a220:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a222:	4d09      	ldr	r5, [pc, #36]	; (1000a248 <sms_spi_master_configure+0x68>)
1000a224:	0022      	movs	r2, r4
1000a226:	4909      	ldr	r1, [pc, #36]	; (1000a24c <sms_spi_master_configure+0x6c>)
1000a228:	0028      	movs	r0, r5
1000a22a:	4b09      	ldr	r3, [pc, #36]	; (1000a250 <sms_spi_master_configure+0x70>)
1000a22c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a22e:	0028      	movs	r0, r5
1000a230:	4b08      	ldr	r3, [pc, #32]	; (1000a254 <sms_spi_master_configure+0x74>)
1000a232:	4798      	blx	r3
}
1000a234:	b00d      	add	sp, #52	; 0x34
1000a236:	bd30      	pop	{r4, r5, pc}
1000a238:	1000a4b9 	.word	0x1000a4b9
1000a23c:	1001a364 	.word	0x1001a364
1000a240:	1000a4f1 	.word	0x1000a4f1
1000a244:	1000a4c5 	.word	0x1000a4c5
1000a248:	1001a370 	.word	0x1001a370
1000a24c:	40007000 	.word	0x40007000
1000a250:	1000a5c1 	.word	0x1000a5c1
1000a254:	1000a531 	.word	0x1000a531

1000a258 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a258:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a25a:	b083      	sub	sp, #12
1000a25c:	0004      	movs	r4, r0
1000a25e:	000d      	movs	r5, r1
1000a260:	9200      	str	r2, [sp, #0]
1000a262:	9301      	str	r3, [sp, #4]
1000a264:	ab08      	add	r3, sp, #32
1000a266:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a268:	2201      	movs	r2, #1
1000a26a:	4f08      	ldr	r7, [pc, #32]	; (1000a28c <sms_spi_master_transceive+0x34>)
1000a26c:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a26e:	0033      	movs	r3, r6
1000a270:	9a01      	ldr	r2, [sp, #4]
1000a272:	9900      	ldr	r1, [sp, #0]
1000a274:	0020      	movs	r0, r4
1000a276:	4e06      	ldr	r6, [pc, #24]	; (1000a290 <sms_spi_master_transceive+0x38>)
1000a278:	47b0      	blx	r6
1000a27a:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a27c:	2200      	movs	r2, #0
1000a27e:	0029      	movs	r1, r5
1000a280:	0020      	movs	r0, r4
1000a282:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a284:	0030      	movs	r0, r6
1000a286:	b003      	add	sp, #12
1000a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a28a:	46c0      	nop			; (mov r8, r8)
1000a28c:	1000a7a9 	.word	0x1000a7a9
1000a290:	1000a725 	.word	0x1000a725

1000a294 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a294:	b510      	push	{r4, lr}
    //if(pressure_device.int_enabled) {
		pressure_device.interrupt.new_value = true;
1000a296:	2101      	movs	r1, #1
1000a298:	2329      	movs	r3, #41	; 0x29
1000a29a:	4a04      	ldr	r2, [pc, #16]	; (1000a2ac <sms_timer_aon_callback+0x18>)
1000a29c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a29e:	2300      	movs	r3, #0
1000a2a0:	2200      	movs	r2, #0
1000a2a2:	3102      	adds	r1, #2
1000a2a4:	2042      	movs	r0, #66	; 0x42
1000a2a6:	4c02      	ldr	r4, [pc, #8]	; (1000a2b0 <sms_timer_aon_callback+0x1c>)
1000a2a8:	47a0      	blx	r4
	//}
}
1000a2aa:	bd10      	pop	{r4, pc}
1000a2ac:	1001a2c8 	.word	0x1001a2c8
1000a2b0:	1000ddc1 	.word	0x1000ddc1

1000a2b4 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt_ms, enum aon_sleep_timer_mode cnt_mode)
{
1000a2b4:	b530      	push	{r4, r5, lr}
1000a2b6:	b083      	sub	sp, #12
1000a2b8:	0004      	movs	r4, r0
1000a2ba:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a2bc:	4668      	mov	r0, sp
1000a2be:	4b06      	ldr	r3, [pc, #24]	; (1000a2d8 <sms_timer_aon_init+0x24>)
1000a2c0:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a2c2:	466b      	mov	r3, sp
1000a2c4:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt_ms * SMS_TIMER_AON_LOAD_1MS;
1000a2c6:	0163      	lsls	r3, r4, #5
1000a2c8:	191c      	adds	r4, r3, r4
1000a2ca:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a2cc:	4668      	mov	r0, sp
1000a2ce:	4b03      	ldr	r3, [pc, #12]	; (1000a2dc <sms_timer_aon_init+0x28>)
1000a2d0:	4798      	blx	r3
}
1000a2d2:	b003      	add	sp, #12
1000a2d4:	bd30      	pop	{r4, r5, pc}
1000a2d6:	46c0      	nop			; (mov r8, r8)
1000a2d8:	100080e9 	.word	0x100080e9
1000a2dc:	1000815d 	.word	0x1000815d

1000a2e0 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a2e0:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a2e2:	4b01      	ldr	r3, [pc, #4]	; (1000a2e8 <sms_timer_aon_disable+0x8>)
1000a2e4:	4798      	blx	r3
}
1000a2e6:	bd10      	pop	{r4, pc}
1000a2e8:	100080f9 	.word	0x100080f9

1000a2ec <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a2ec:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a2ee:	4804      	ldr	r0, [pc, #16]	; (1000a300 <sms_timer_aon_register_callback+0x14>)
1000a2f0:	4b04      	ldr	r3, [pc, #16]	; (1000a304 <sms_timer_aon_register_callback+0x18>)
1000a2f2:	4798      	blx	r3
1000a2f4:	2280      	movs	r2, #128	; 0x80
1000a2f6:	0512      	lsls	r2, r2, #20
1000a2f8:	4b03      	ldr	r3, [pc, #12]	; (1000a308 <sms_timer_aon_register_callback+0x1c>)
1000a2fa:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a2fc:	bd10      	pop	{r4, pc}
1000a2fe:	46c0      	nop			; (mov r8, r8)
1000a300:	1000a295 	.word	0x1000a295
1000a304:	10008145 	.word	0x10008145
1000a308:	e000e100 	.word	0xe000e100

1000a30c <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a30c:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a30e:	4b04      	ldr	r3, [pc, #16]	; (1000a320 <sms_timer_aon_unregister_callback+0x14>)
1000a310:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a312:	2180      	movs	r1, #128	; 0x80
1000a314:	0509      	lsls	r1, r1, #20
1000a316:	2380      	movs	r3, #128	; 0x80
1000a318:	4a02      	ldr	r2, [pc, #8]	; (1000a324 <sms_timer_aon_unregister_callback+0x18>)
1000a31a:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a31c:	bd10      	pop	{r4, pc}
1000a31e:	46c0      	nop			; (mov r8, r8)
1000a320:	10008151 	.word	0x10008151
1000a324:	e000e100 	.word	0xe000e100

1000a328 <sms_dualtimer_init>:
//{
//}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a328:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a32a:	4647      	mov	r7, r8
1000a32c:	b480      	push	{r7}
1000a32e:	b088      	sub	sp, #32
	timer1_instance.id = DUALTIMER_TIMER1;
1000a330:	4f12      	ldr	r7, [pc, #72]	; (1000a37c <sms_dualtimer_init+0x54>)
1000a332:	2500      	movs	r5, #0
1000a334:	703d      	strb	r5, [r7, #0]
	timer1_instance.current_mode = TIMER_MODE_NONE;
1000a336:	707d      	strb	r5, [r7, #1]
	timer1_instance.int_enabled = false;
1000a338:	70bd      	strb	r5, [r7, #2]
	timer2_instance.id = DUALTIMER_TIMER2;
1000a33a:	4e11      	ldr	r6, [pc, #68]	; (1000a380 <sms_dualtimer_init+0x58>)
1000a33c:	2301      	movs	r3, #1
1000a33e:	4698      	mov	r8, r3
1000a340:	7033      	strb	r3, [r6, #0]
	timer2_instance.current_mode = TIMER_MODE_NONE;
1000a342:	7075      	strb	r5, [r6, #1]
	timer2_instance.int_enabled = false;
1000a344:	70b5      	strb	r5, [r6, #2]
	
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a346:	ac01      	add	r4, sp, #4
1000a348:	0020      	movs	r0, r4
1000a34a:	4b0e      	ldr	r3, [pc, #56]	; (1000a384 <sms_dualtimer_init+0x5c>)
1000a34c:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000a34e:	2301      	movs	r3, #1
1000a350:	425b      	negs	r3, r3
1000a352:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a354:	4643      	mov	r3, r8
1000a356:	7063      	strb	r3, [r4, #1]
	config_dualtimer.timer1.interrup_enable = false;
1000a358:	7125      	strb	r5, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000a35a:	4b0b      	ldr	r3, [pc, #44]	; (1000a388 <sms_dualtimer_init+0x60>)
1000a35c:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a35e:	7365      	strb	r5, [r4, #13]
	config_dualtimer.timer2.interrup_enable = true;
1000a360:	4643      	mov	r3, r8
1000a362:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000a364:	0020      	movs	r0, r4
1000a366:	4b09      	ldr	r3, [pc, #36]	; (1000a38c <sms_dualtimer_init+0x64>)
1000a368:	4798      	blx	r3
    dualtimer_disable(timer1_instance.id);
1000a36a:	7838      	ldrb	r0, [r7, #0]
1000a36c:	4c08      	ldr	r4, [pc, #32]	; (1000a390 <sms_dualtimer_init+0x68>)
1000a36e:	47a0      	blx	r4
    dualtimer_disable(timer2_instance.id);
1000a370:	7830      	ldrb	r0, [r6, #0]
1000a372:	47a0      	blx	r4
}
1000a374:	b008      	add	sp, #32
1000a376:	bc04      	pop	{r2}
1000a378:	4690      	mov	r8, r2
1000a37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a37c:	1001a2b4 	.word	0x1001a2b4
1000a380:	1001a360 	.word	0x1001a360
1000a384:	1000a80d 	.word	0x1000a80d
1000a388:	00006590 	.word	0x00006590
1000a38c:	1000a8b5 	.word	0x1000a8b5
1000a390:	1000a891 	.word	0x1000a891

1000a394 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a394:	b510      	push	{r4, lr}
1000a396:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000a398:	4b02      	ldr	r3, [pc, #8]	; (1000a3a4 <sms_dualtimer_register_callback+0x10>)
1000a39a:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a39c:	0020      	movs	r0, r4
1000a39e:	4b02      	ldr	r3, [pc, #8]	; (1000a3a8 <sms_dualtimer_register_callback+0x14>)
1000a3a0:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000a3a2:	bd10      	pop	{r4, pc}
1000a3a4:	1000a9b9 	.word	0x1000a9b9
1000a3a8:	1000a891 	.word	0x1000a891

1000a3ac <sms_dualtimer_unregister_callback>:

void sms_dualtimer_unregister_callback(enum dualtimer_timer tmr)
{
1000a3ac:	b510      	push	{r4, lr}
1000a3ae:	0004      	movs	r4, r0
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a3b0:	4b02      	ldr	r3, [pc, #8]	; (1000a3bc <sms_dualtimer_unregister_callback+0x10>)
1000a3b2:	4798      	blx	r3
}

void sms_dualtimer_unregister_callback(enum dualtimer_timer tmr)
{
	sms_dualtimer_stop(tmr);
	dualtimer_unregister_callback(tmr);
1000a3b4:	0020      	movs	r0, r4
1000a3b6:	4b02      	ldr	r3, [pc, #8]	; (1000a3c0 <sms_dualtimer_unregister_callback+0x14>)
1000a3b8:	4798      	blx	r3
}
1000a3ba:	bd10      	pop	{r4, pc}
1000a3bc:	1000a891 	.word	0x1000a891
1000a3c0:	1000a9d1 	.word	0x1000a9d1

1000a3c4 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3c6:	000d      	movs	r5, r1
1000a3c8:	0016      	movs	r6, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a3ca:	2801      	cmp	r0, #1
1000a3cc:	d006      	beq.n	1000a3dc <sms_dualtimer_start+0x18>
1000a3ce:	2800      	cmp	r0, #0
1000a3d0:	d002      	beq.n	1000a3d8 <sms_dualtimer_start+0x14>
1000a3d2:	2802      	cmp	r0, #2
1000a3d4:	d004      	beq.n	1000a3e0 <sms_dualtimer_start+0x1c>
1000a3d6:	e005      	b.n	1000a3e4 <sms_dualtimer_start+0x20>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a3d8:	241a      	movs	r4, #26
1000a3da:	e004      	b.n	1000a3e6 <sms_dualtimer_start+0x22>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a3dc:	4c0f      	ldr	r4, [pc, #60]	; (1000a41c <sms_dualtimer_start+0x58>)
        break;
1000a3de:	e002      	b.n	1000a3e6 <sms_dualtimer_start+0x22>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a3e0:	4c0f      	ldr	r4, [pc, #60]	; (1000a420 <sms_dualtimer_start+0x5c>)
        break;
1000a3e2:	e000      	b.n	1000a3e6 <sms_dualtimer_start+0x22>
	dualtimer_unregister_callback(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a3e4:	2401      	movs	r4, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a3e6:	2d00      	cmp	r5, #0
1000a3e8:	d100      	bne.n	1000a3ec <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000a3ea:	3501      	adds	r5, #1
    }
    
    //ulp_ready = false;
    DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
1000a3ec:	480d      	ldr	r0, [pc, #52]	; (1000a424 <sms_dualtimer_start+0x60>)
1000a3ee:	4b0e      	ldr	r3, [pc, #56]	; (1000a428 <sms_dualtimer_start+0x64>)
1000a3f0:	4798      	blx	r3
1000a3f2:	1c71      	adds	r1, r6, #1
1000a3f4:	002b      	movs	r3, r5
1000a3f6:	0022      	movs	r2, r4
1000a3f8:	480c      	ldr	r0, [pc, #48]	; (1000a42c <sms_dualtimer_start+0x68>)
1000a3fa:	4f0d      	ldr	r7, [pc, #52]	; (1000a430 <sms_dualtimer_start+0x6c>)
1000a3fc:	47b8      	blx	r7
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a3fe:	0022      	movs	r2, r4
1000a400:	436a      	muls	r2, r5
1000a402:	2100      	movs	r1, #0
1000a404:	0030      	movs	r0, r6
1000a406:	4b0b      	ldr	r3, [pc, #44]	; (1000a434 <sms_dualtimer_start+0x70>)
1000a408:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a40a:	0030      	movs	r0, r6
1000a40c:	4b0a      	ldr	r3, [pc, #40]	; (1000a438 <sms_dualtimer_start+0x74>)
1000a40e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a410:	2280      	movs	r2, #128	; 0x80
1000a412:	01d2      	lsls	r2, r2, #7
1000a414:	4b09      	ldr	r3, [pc, #36]	; (1000a43c <sms_dualtimer_start+0x78>)
1000a416:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a41a:	46c0      	nop			; (mov r8, r8)
1000a41c:	00006590 	.word	0x00006590
1000a420:	018cba80 	.word	0x018cba80
1000a424:	10016b98 	.word	0x10016b98
1000a428:	10015b71 	.word	0x10015b71
1000a42c:	10017540 	.word	0x10017540
1000a430:	10015a51 	.word	0x10015a51
1000a434:	1000a845 	.word	0x1000a845
1000a438:	1000a86d 	.word	0x1000a86d
1000a43c:	e000e100 	.word	0xe000e100

1000a440 <sms_dualtimer2_cb>:
    timer1_instance.new_int = true;
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}

void sms_dualtimer2_cb(void)
{
1000a440:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000a442:	2201      	movs	r2, #1
1000a444:	4b04      	ldr	r3, [pc, #16]	; (1000a458 <sms_dualtimer2_cb+0x18>)
1000a446:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a448:	2300      	movs	r3, #0
1000a44a:	2200      	movs	r2, #0
1000a44c:	2101      	movs	r1, #1
1000a44e:	2041      	movs	r0, #65	; 0x41
1000a450:	4c02      	ldr	r4, [pc, #8]	; (1000a45c <sms_dualtimer2_cb+0x1c>)
1000a452:	47a0      	blx	r4
}
1000a454:	bd10      	pop	{r4, pc}
1000a456:	46c0      	nop			; (mov r8, r8)
1000a458:	1001a360 	.word	0x1001a360
1000a45c:	1000ddc1 	.word	0x1000ddc1

1000a460 <sms_dualtimer2_fn>:
        ////break;
    ////} // switch(timer1_current_mode)
//}

void sms_dualtimer2_fn(void)
{
1000a460:	b510      	push	{r4, lr}
	switch(timer2_instance.current_mode) {
1000a462:	4b07      	ldr	r3, [pc, #28]	; (1000a480 <sms_dualtimer2_fn+0x20>)
1000a464:	785b      	ldrb	r3, [r3, #1]
1000a466:	2b01      	cmp	r3, #1
1000a468:	d109      	bne.n	1000a47e <sms_dualtimer2_fn+0x1e>
		case TIMER_MODE_ADVERTISING:
		sms_led_toggle(SMS_LED_0);
1000a46a:	2016      	movs	r0, #22
1000a46c:	4b05      	ldr	r3, [pc, #20]	; (1000a484 <sms_dualtimer2_fn+0x24>)
1000a46e:	4798      	blx	r3
		sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_ADV_MS, timer2_instance.id);
1000a470:	4b03      	ldr	r3, [pc, #12]	; (1000a480 <sms_dualtimer2_fn+0x20>)
1000a472:	781a      	ldrb	r2, [r3, #0]
1000a474:	21fa      	movs	r1, #250	; 0xfa
1000a476:	0089      	lsls	r1, r1, #2
1000a478:	2001      	movs	r0, #1
1000a47a:	4b03      	ldr	r3, [pc, #12]	; (1000a488 <sms_dualtimer2_fn+0x28>)
1000a47c:	4798      	blx	r3
        //case TIMER2_MODE_LED_CONNECTION_LOST:
        //case TIMER2_MODE_NONE:
        ////sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        //break;
    //}
}
1000a47e:	bd10      	pop	{r4, pc}
1000a480:	1001a360 	.word	0x1001a360
1000a484:	10009d19 	.word	0x10009d19
1000a488:	1000a3c5 	.word	0x1000a3c5

1000a48c <delay_ms>:

void delay_ms(uint32_t delay) {
1000a48c:	b510      	push	{r4, lr}
1000a48e:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a490:	2201      	movs	r2, #1
1000a492:	2001      	movs	r0, #1
1000a494:	4b05      	ldr	r3, [pc, #20]	; (1000a4ac <delay_ms+0x20>)
1000a496:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000a498:	4c05      	ldr	r4, [pc, #20]	; (1000a4b0 <delay_ms+0x24>)
1000a49a:	2001      	movs	r0, #1
1000a49c:	47a0      	blx	r4
1000a49e:	2800      	cmp	r0, #0
1000a4a0:	d1fb      	bne.n	1000a49a <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a4a2:	3001      	adds	r0, #1
1000a4a4:	4b03      	ldr	r3, [pc, #12]	; (1000a4b4 <delay_ms+0x28>)
1000a4a6:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000a4a8:	bd10      	pop	{r4, pc}
1000a4aa:	46c0      	nop			; (mov r8, r8)
1000a4ac:	1000a3c5 	.word	0x1000a3c5
1000a4b0:	1000a831 	.word	0x1000a831
1000a4b4:	1000a891 	.word	0x1000a891

1000a4b8 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a4b8:	230c      	movs	r3, #12
1000a4ba:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a4bc:	2300      	movs	r3, #0
1000a4be:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a4c0:	7083      	strb	r3, [r0, #2]
}
1000a4c2:	4770      	bx	lr

1000a4c4 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a4c4:	2301      	movs	r3, #1
1000a4c6:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a4c8:	2300      	movs	r3, #0
1000a4ca:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a4cc:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a4ce:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a4d0:	3381      	adds	r3, #129	; 0x81
1000a4d2:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a4d4:	3b77      	subs	r3, #119	; 0x77
1000a4d6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a4d8:	3301      	adds	r3, #1
1000a4da:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a4dc:	3301      	adds	r3, #1
1000a4de:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a4e0:	3301      	adds	r3, #1
1000a4e2:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a4e4:	3b0b      	subs	r3, #11
1000a4e6:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a4e8:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a4ea:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a4ec:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a4ee:	4770      	bx	lr

1000a4f0 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a4f0:	b530      	push	{r4, r5, lr}
1000a4f2:	b083      	sub	sp, #12
1000a4f4:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a4f6:	780b      	ldrb	r3, [r1, #0]
1000a4f8:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a4fa:	784b      	ldrb	r3, [r1, #1]
1000a4fc:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a4fe:	788b      	ldrb	r3, [r1, #2]
1000a500:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a502:	ad01      	add	r5, sp, #4
1000a504:	0028      	movs	r0, r5
1000a506:	4b07      	ldr	r3, [pc, #28]	; (1000a524 <spi_attach_slave+0x34>)
1000a508:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a50a:	2301      	movs	r3, #1
1000a50c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a50e:	7820      	ldrb	r0, [r4, #0]
1000a510:	0029      	movs	r1, r5
1000a512:	4b05      	ldr	r3, [pc, #20]	; (1000a528 <spi_attach_slave+0x38>)
1000a514:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a516:	7820      	ldrb	r0, [r4, #0]
1000a518:	2101      	movs	r1, #1
1000a51a:	4b04      	ldr	r3, [pc, #16]	; (1000a52c <spi_attach_slave+0x3c>)
1000a51c:	4798      	blx	r3
}
1000a51e:	b003      	add	sp, #12
1000a520:	bd30      	pop	{r4, r5, pc}
1000a522:	46c0      	nop			; (mov r8, r8)
1000a524:	1000ab3d 	.word	0x1000ab3d
1000a528:	1000ab4d 	.word	0x1000ab4d
1000a52c:	1000ada5 	.word	0x1000ada5

1000a530 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a530:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a532:	2201      	movs	r2, #1
1000a534:	761a      	strb	r2, [r3, #24]
}
1000a536:	4770      	bx	lr

1000a538 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a538:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a53a:	2300      	movs	r3, #0
1000a53c:	6802      	ldr	r2, [r0, #0]
1000a53e:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a540:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a542:	4a0d      	ldr	r2, [pc, #52]	; (1000a578 <spi_disable+0x40>)
1000a544:	4293      	cmp	r3, r2
1000a546:	d109      	bne.n	1000a55c <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a548:	2041      	movs	r0, #65	; 0x41
1000a54a:	4c0c      	ldr	r4, [pc, #48]	; (1000a57c <spi_disable+0x44>)
1000a54c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a54e:	2026      	movs	r0, #38	; 0x26
1000a550:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a552:	2038      	movs	r0, #56	; 0x38
1000a554:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a556:	2001      	movs	r0, #1
1000a558:	47a0      	blx	r4
1000a55a:	e00b      	b.n	1000a574 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a55c:	4a08      	ldr	r2, [pc, #32]	; (1000a580 <spi_disable+0x48>)
1000a55e:	4293      	cmp	r3, r2
1000a560:	d108      	bne.n	1000a574 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a562:	2042      	movs	r0, #66	; 0x42
1000a564:	4c05      	ldr	r4, [pc, #20]	; (1000a57c <spi_disable+0x44>)
1000a566:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a568:	2027      	movs	r0, #39	; 0x27
1000a56a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a56c:	2039      	movs	r0, #57	; 0x39
1000a56e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a570:	2002      	movs	r0, #2
1000a572:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a574:	bd10      	pop	{r4, pc}
1000a576:	46c0      	nop			; (mov r8, r8)
1000a578:	40006000 	.word	0x40006000
1000a57c:	1000b53d 	.word	0x1000b53d
1000a580:	40007000 	.word	0x40007000

1000a584 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a584:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a586:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a588:	4b09      	ldr	r3, [pc, #36]	; (1000a5b0 <spi_reset+0x2c>)
1000a58a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a58c:	4b09      	ldr	r3, [pc, #36]	; (1000a5b4 <spi_reset+0x30>)
1000a58e:	429c      	cmp	r4, r3
1000a590:	d105      	bne.n	1000a59e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a592:	2001      	movs	r0, #1
1000a594:	4c08      	ldr	r4, [pc, #32]	; (1000a5b8 <spi_reset+0x34>)
1000a596:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a598:	2038      	movs	r0, #56	; 0x38
1000a59a:	47a0      	blx	r4
1000a59c:	e007      	b.n	1000a5ae <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a59e:	4b07      	ldr	r3, [pc, #28]	; (1000a5bc <spi_reset+0x38>)
1000a5a0:	429c      	cmp	r4, r3
1000a5a2:	d104      	bne.n	1000a5ae <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a5a4:	2002      	movs	r0, #2
1000a5a6:	4c04      	ldr	r4, [pc, #16]	; (1000a5b8 <spi_reset+0x34>)
1000a5a8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a5aa:	2039      	movs	r0, #57	; 0x39
1000a5ac:	47a0      	blx	r4
	}
}
1000a5ae:	bd10      	pop	{r4, pc}
1000a5b0:	1000a539 	.word	0x1000a539
1000a5b4:	40006000 	.word	0x40006000
1000a5b8:	1000b8a9 	.word	0x1000b8a9
1000a5bc:	40007000 	.word	0x40007000

1000a5c0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5c2:	465f      	mov	r7, fp
1000a5c4:	4646      	mov	r6, r8
1000a5c6:	b4c0      	push	{r6, r7}
1000a5c8:	b083      	sub	sp, #12
1000a5ca:	0006      	movs	r6, r0
1000a5cc:	4688      	mov	r8, r1
1000a5ce:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a5d0:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a5d2:	7e0b      	ldrb	r3, [r1, #24]
1000a5d4:	07db      	lsls	r3, r3, #31
1000a5d6:	d501      	bpl.n	1000a5dc <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a5d8:	2300      	movs	r3, #0
1000a5da:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a5dc:	0030      	movs	r0, r6
1000a5de:	4b4a      	ldr	r3, [pc, #296]	; (1000a708 <spi_init+0x148>)
1000a5e0:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a5e2:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a5e4:	4a49      	ldr	r2, [pc, #292]	; (1000a70c <spi_init+0x14c>)
1000a5e6:	4293      	cmp	r3, r2
1000a5e8:	d109      	bne.n	1000a5fe <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a5ea:	2041      	movs	r0, #65	; 0x41
1000a5ec:	4c48      	ldr	r4, [pc, #288]	; (1000a710 <spi_init+0x150>)
1000a5ee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a5f0:	2026      	movs	r0, #38	; 0x26
1000a5f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a5f4:	2038      	movs	r0, #56	; 0x38
1000a5f6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a5f8:	2001      	movs	r0, #1
1000a5fa:	47a0      	blx	r4
1000a5fc:	e00b      	b.n	1000a616 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a5fe:	4a45      	ldr	r2, [pc, #276]	; (1000a714 <spi_init+0x154>)
1000a600:	4293      	cmp	r3, r2
1000a602:	d108      	bne.n	1000a616 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a604:	2042      	movs	r0, #66	; 0x42
1000a606:	4c42      	ldr	r4, [pc, #264]	; (1000a710 <spi_init+0x150>)
1000a608:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a60a:	2027      	movs	r0, #39	; 0x27
1000a60c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a60e:	2039      	movs	r0, #57	; 0x39
1000a610:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a612:	2002      	movs	r0, #2
1000a614:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a616:	a801      	add	r0, sp, #4
1000a618:	4b3f      	ldr	r3, [pc, #252]	; (1000a718 <spi_init+0x158>)
1000a61a:	4798      	blx	r3
1000a61c:	002c      	movs	r4, r5
1000a61e:	3408      	adds	r4, #8
1000a620:	2318      	movs	r3, #24
1000a622:	469b      	mov	fp, r3
1000a624:	44ab      	add	fp, r5
1000a626:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a628:	6820      	ldr	r0, [r4, #0]
1000a62a:	1c43      	adds	r3, r0, #1
1000a62c:	d011      	beq.n	1000a652 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a62e:	782b      	ldrb	r3, [r5, #0]
1000a630:	2b01      	cmp	r3, #1
1000a632:	d102      	bne.n	1000a63a <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a634:	466a      	mov	r2, sp
1000a636:	7113      	strb	r3, [r2, #4]
1000a638:	e003      	b.n	1000a642 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a63a:	2b00      	cmp	r3, #0
1000a63c:	d101      	bne.n	1000a642 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a63e:	466a      	mov	r2, sp
1000a640:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a642:	b2c0      	uxtb	r0, r0
1000a644:	a901      	add	r1, sp, #4
1000a646:	4b35      	ldr	r3, [pc, #212]	; (1000a71c <spi_init+0x15c>)
1000a648:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a64a:	8a39      	ldrh	r1, [r7, #16]
1000a64c:	7838      	ldrb	r0, [r7, #0]
1000a64e:	4b34      	ldr	r3, [pc, #208]	; (1000a720 <spi_init+0x160>)
1000a650:	4798      	blx	r3
1000a652:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a654:	455c      	cmp	r4, fp
1000a656:	d1e6      	bne.n	1000a626 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a658:	78eb      	ldrb	r3, [r5, #3]
1000a65a:	4642      	mov	r2, r8
1000a65c:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a65e:	782b      	ldrb	r3, [r5, #0]
1000a660:	2b01      	cmp	r3, #1
1000a662:	d100      	bne.n	1000a666 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a664:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a666:	782b      	ldrb	r3, [r5, #0]
1000a668:	2b00      	cmp	r3, #0
1000a66a:	d101      	bne.n	1000a670 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a66c:	4642      	mov	r2, r8
1000a66e:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a670:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a672:	782a      	ldrb	r2, [r5, #0]
1000a674:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a676:	782a      	ldrb	r2, [r5, #0]
1000a678:	2a01      	cmp	r2, #1
1000a67a:	d101      	bne.n	1000a680 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a67c:	792a      	ldrb	r2, [r5, #4]
1000a67e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a680:	786a      	ldrb	r2, [r5, #1]
1000a682:	2a04      	cmp	r2, #4
1000a684:	d104      	bne.n	1000a690 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a686:	2124      	movs	r1, #36	; 0x24
1000a688:	5c58      	ldrb	r0, [r3, r1]
1000a68a:	4302      	orrs	r2, r0
1000a68c:	545a      	strb	r2, [r3, r1]
1000a68e:	e004      	b.n	1000a69a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a690:	2124      	movs	r1, #36	; 0x24
1000a692:	5c5a      	ldrb	r2, [r3, r1]
1000a694:	2004      	movs	r0, #4
1000a696:	4382      	bics	r2, r0
1000a698:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a69a:	78aa      	ldrb	r2, [r5, #2]
1000a69c:	2a01      	cmp	r2, #1
1000a69e:	d01a      	beq.n	1000a6d6 <spi_init+0x116>
1000a6a0:	2a00      	cmp	r2, #0
1000a6a2:	d004      	beq.n	1000a6ae <spi_init+0xee>
1000a6a4:	2a02      	cmp	r2, #2
1000a6a6:	d00c      	beq.n	1000a6c2 <spi_init+0x102>
1000a6a8:	2a03      	cmp	r2, #3
1000a6aa:	d01e      	beq.n	1000a6ea <spi_init+0x12a>
1000a6ac:	e026      	b.n	1000a6fc <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a6ae:	2224      	movs	r2, #36	; 0x24
1000a6b0:	5c99      	ldrb	r1, [r3, r2]
1000a6b2:	2002      	movs	r0, #2
1000a6b4:	4381      	bics	r1, r0
1000a6b6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a6b8:	5c99      	ldrb	r1, [r3, r2]
1000a6ba:	3801      	subs	r0, #1
1000a6bc:	4381      	bics	r1, r0
1000a6be:	5499      	strb	r1, [r3, r2]
1000a6c0:	e01c      	b.n	1000a6fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a6c2:	2224      	movs	r2, #36	; 0x24
1000a6c4:	5c98      	ldrb	r0, [r3, r2]
1000a6c6:	2102      	movs	r1, #2
1000a6c8:	4301      	orrs	r1, r0
1000a6ca:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a6cc:	5c99      	ldrb	r1, [r3, r2]
1000a6ce:	2001      	movs	r0, #1
1000a6d0:	4381      	bics	r1, r0
1000a6d2:	5499      	strb	r1, [r3, r2]
1000a6d4:	e012      	b.n	1000a6fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a6d6:	2224      	movs	r2, #36	; 0x24
1000a6d8:	5c99      	ldrb	r1, [r3, r2]
1000a6da:	2002      	movs	r0, #2
1000a6dc:	4381      	bics	r1, r0
1000a6de:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a6e0:	5c98      	ldrb	r0, [r3, r2]
1000a6e2:	2101      	movs	r1, #1
1000a6e4:	4301      	orrs	r1, r0
1000a6e6:	5499      	strb	r1, [r3, r2]
1000a6e8:	e008      	b.n	1000a6fc <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a6ea:	2224      	movs	r2, #36	; 0x24
1000a6ec:	5c98      	ldrb	r0, [r3, r2]
1000a6ee:	2102      	movs	r1, #2
1000a6f0:	4301      	orrs	r1, r0
1000a6f2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a6f4:	5c98      	ldrb	r0, [r3, r2]
1000a6f6:	2101      	movs	r1, #1
1000a6f8:	4301      	orrs	r1, r0
1000a6fa:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a6fc:	2000      	movs	r0, #0
1000a6fe:	b003      	add	sp, #12
1000a700:	bc0c      	pop	{r2, r3}
1000a702:	4690      	mov	r8, r2
1000a704:	469b      	mov	fp, r3
1000a706:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a708:	1000a585 	.word	0x1000a585
1000a70c:	40006000 	.word	0x40006000
1000a710:	1000b1e1 	.word	0x1000b1e1
1000a714:	40007000 	.word	0x40007000
1000a718:	1000ab3d 	.word	0x1000ab3d
1000a71c:	1000ab4d 	.word	0x1000ab4d
1000a720:	1000ae31 	.word	0x1000ae31

1000a724 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a724:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a726:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a728:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a72a:	2600      	movs	r6, #0
1000a72c:	466d      	mov	r5, sp
1000a72e:	71ee      	strb	r6, [r5, #7]
1000a730:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a732:	2c00      	cmp	r4, #0
1000a734:	d034      	beq.n	1000a7a0 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a736:	2900      	cmp	r1, #0
1000a738:	d104      	bne.n	1000a744 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a73a:	0029      	movs	r1, r5
1000a73c:	7980      	ldrb	r0, [r0, #6]
1000a73e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a740:	2701      	movs	r7, #1
1000a742:	e00b      	b.n	1000a75c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a744:	2a00      	cmp	r2, #0
1000a746:	d005      	beq.n	1000a754 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a748:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a74a:	2b00      	cmp	r3, #0
1000a74c:	d029      	beq.n	1000a7a2 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a74e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a750:	2700      	movs	r7, #0
1000a752:	e003      	b.n	1000a75c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a754:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a756:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a758:	466a      	mov	r2, sp
1000a75a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a75c:	2528      	movs	r5, #40	; 0x28
1000a75e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a760:	07c0      	lsls	r0, r0, #31
1000a762:	d4fc      	bmi.n	1000a75e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a764:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a766:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a768:	2b00      	cmp	r3, #0
1000a76a:	d014      	beq.n	1000a796 <spi_transceive_buffer_wait+0x72>
1000a76c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a76e:	4278      	negs	r0, r7
1000a770:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a772:	4270      	negs	r0, r6
1000a774:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a776:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a778:	07c0      	lsls	r0, r0, #31
1000a77a:	d5fc      	bpl.n	1000a776 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a77c:	7808      	ldrb	r0, [r1, #0]
1000a77e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a780:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a782:	07c0      	lsls	r0, r0, #31
1000a784:	d5fc      	bpl.n	1000a780 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a786:	7920      	ldrb	r0, [r4, #4]
1000a788:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a78a:	3501      	adds	r5, #1
1000a78c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a78e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a790:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a792:	42ab      	cmp	r3, r5
1000a794:	d1ef      	bne.n	1000a776 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a796:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a798:	06db      	lsls	r3, r3, #27
1000a79a:	d5fc      	bpl.n	1000a796 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a79c:	2000      	movs	r0, #0
1000a79e:	e000      	b.n	1000a7a2 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a7a0:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a7a2:	b003      	add	sp, #12
1000a7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7a6:	46c0      	nop			; (mov r8, r8)

1000a7a8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a7a8:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a7aa:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a7ac:	2a00      	cmp	r2, #0
1000a7ae:	d003      	beq.n	1000a7b8 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a7b0:	2100      	movs	r1, #0
1000a7b2:	4b04      	ldr	r3, [pc, #16]	; (1000a7c4 <spi_select_slave+0x1c>)
1000a7b4:	4798      	blx	r3
1000a7b6:	e002      	b.n	1000a7be <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a7b8:	2101      	movs	r1, #1
1000a7ba:	4b02      	ldr	r3, [pc, #8]	; (1000a7c4 <spi_select_slave+0x1c>)
1000a7bc:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a7be:	2000      	movs	r0, #0
1000a7c0:	bd10      	pop	{r4, pc}
1000a7c2:	46c0      	nop			; (mov r8, r8)
1000a7c4:	1000ada5 	.word	0x1000ada5

1000a7c8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a7c8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a7ca:	4b0d      	ldr	r3, [pc, #52]	; (1000a800 <dualtimer_isr_handler+0x38>)
1000a7cc:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a7ce:	2b00      	cmp	r3, #0
1000a7d0:	d007      	beq.n	1000a7e2 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a7d2:	2201      	movs	r2, #1
1000a7d4:	4b0a      	ldr	r3, [pc, #40]	; (1000a800 <dualtimer_isr_handler+0x38>)
1000a7d6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a7d8:	4b0a      	ldr	r3, [pc, #40]	; (1000a804 <dualtimer_isr_handler+0x3c>)
1000a7da:	681b      	ldr	r3, [r3, #0]
1000a7dc:	2b00      	cmp	r3, #0
1000a7de:	d000      	beq.n	1000a7e2 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a7e0:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a7e2:	2334      	movs	r3, #52	; 0x34
1000a7e4:	4a06      	ldr	r2, [pc, #24]	; (1000a800 <dualtimer_isr_handler+0x38>)
1000a7e6:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a7e8:	2b00      	cmp	r3, #0
1000a7ea:	d007      	beq.n	1000a7fc <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a7ec:	2101      	movs	r1, #1
1000a7ee:	232c      	movs	r3, #44	; 0x2c
1000a7f0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a7f2:	4b05      	ldr	r3, [pc, #20]	; (1000a808 <dualtimer_isr_handler+0x40>)
1000a7f4:	681b      	ldr	r3, [r3, #0]
1000a7f6:	2b00      	cmp	r3, #0
1000a7f8:	d000      	beq.n	1000a7fc <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a7fa:	4798      	blx	r3
	}
}
1000a7fc:	bd10      	pop	{r4, pc}
1000a7fe:	46c0      	nop			; (mov r8, r8)
1000a800:	40001000 	.word	0x40001000
1000a804:	10018790 	.word	0x10018790
1000a808:	10018794 	.word	0x10018794

1000a80c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a80c:	2301      	movs	r3, #1
1000a80e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a810:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a812:	2202      	movs	r2, #2
1000a814:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a816:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a818:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a81a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a81c:	2200      	movs	r2, #0
1000a81e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a820:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a822:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a824:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a826:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a828:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a82a:	7602      	strb	r2, [r0, #24]
}
1000a82c:	4770      	bx	lr
1000a82e:	46c0      	nop			; (mov r8, r8)

1000a830 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a830:	2800      	cmp	r0, #0
1000a832:	d102      	bne.n	1000a83a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a834:	4b02      	ldr	r3, [pc, #8]	; (1000a840 <dualtimer_get_value+0x10>)
1000a836:	6858      	ldr	r0, [r3, #4]
1000a838:	e001      	b.n	1000a83e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a83a:	4b01      	ldr	r3, [pc, #4]	; (1000a840 <dualtimer_get_value+0x10>)
1000a83c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a83e:	4770      	bx	lr
1000a840:	40001000 	.word	0x40001000

1000a844 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a844:	2800      	cmp	r0, #0
1000a846:	d107      	bne.n	1000a858 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a848:	2900      	cmp	r1, #0
1000a84a:	d102      	bne.n	1000a852 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a84c:	4b06      	ldr	r3, [pc, #24]	; (1000a868 <dualtimer_set_counter+0x24>)
1000a84e:	601a      	str	r2, [r3, #0]
1000a850:	e009      	b.n	1000a866 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a852:	4b05      	ldr	r3, [pc, #20]	; (1000a868 <dualtimer_set_counter+0x24>)
1000a854:	619a      	str	r2, [r3, #24]
1000a856:	e006      	b.n	1000a866 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a858:	2900      	cmp	r1, #0
1000a85a:	d102      	bne.n	1000a862 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a85c:	4b02      	ldr	r3, [pc, #8]	; (1000a868 <dualtimer_set_counter+0x24>)
1000a85e:	621a      	str	r2, [r3, #32]
1000a860:	e001      	b.n	1000a866 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a862:	4b01      	ldr	r3, [pc, #4]	; (1000a868 <dualtimer_set_counter+0x24>)
1000a864:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a866:	4770      	bx	lr
1000a868:	40001000 	.word	0x40001000

1000a86c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a86c:	2800      	cmp	r0, #0
1000a86e:	d105      	bne.n	1000a87c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a870:	4a06      	ldr	r2, [pc, #24]	; (1000a88c <dualtimer_enable+0x20>)
1000a872:	7a11      	ldrb	r1, [r2, #8]
1000a874:	2380      	movs	r3, #128	; 0x80
1000a876:	430b      	orrs	r3, r1
1000a878:	7213      	strb	r3, [r2, #8]
1000a87a:	e005      	b.n	1000a888 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a87c:	4903      	ldr	r1, [pc, #12]	; (1000a88c <dualtimer_enable+0x20>)
1000a87e:	2228      	movs	r2, #40	; 0x28
1000a880:	5c88      	ldrb	r0, [r1, r2]
1000a882:	2380      	movs	r3, #128	; 0x80
1000a884:	4303      	orrs	r3, r0
1000a886:	548b      	strb	r3, [r1, r2]
	}
}
1000a888:	4770      	bx	lr
1000a88a:	46c0      	nop			; (mov r8, r8)
1000a88c:	40001000 	.word	0x40001000

1000a890 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a890:	2800      	cmp	r0, #0
1000a892:	d105      	bne.n	1000a8a0 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a894:	4a06      	ldr	r2, [pc, #24]	; (1000a8b0 <dualtimer_disable+0x20>)
1000a896:	7a11      	ldrb	r1, [r2, #8]
1000a898:	237f      	movs	r3, #127	; 0x7f
1000a89a:	400b      	ands	r3, r1
1000a89c:	7213      	strb	r3, [r2, #8]
1000a89e:	e005      	b.n	1000a8ac <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a8a0:	4903      	ldr	r1, [pc, #12]	; (1000a8b0 <dualtimer_disable+0x20>)
1000a8a2:	2228      	movs	r2, #40	; 0x28
1000a8a4:	5c88      	ldrb	r0, [r1, r2]
1000a8a6:	237f      	movs	r3, #127	; 0x7f
1000a8a8:	4003      	ands	r3, r0
1000a8aa:	548b      	strb	r3, [r1, r2]
	}
}
1000a8ac:	4770      	bx	lr
1000a8ae:	46c0      	nop			; (mov r8, r8)
1000a8b0:	40001000 	.word	0x40001000

1000a8b4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a8b4:	b570      	push	{r4, r5, r6, lr}
1000a8b6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a8b8:	2004      	movs	r0, #4
1000a8ba:	4b39      	ldr	r3, [pc, #228]	; (1000a9a0 <dualtimer_init+0xec>)
1000a8bc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a8be:	7823      	ldrb	r3, [r4, #0]
1000a8c0:	2b00      	cmp	r3, #0
1000a8c2:	d102      	bne.n	1000a8ca <dualtimer_init+0x16>
1000a8c4:	7b23      	ldrb	r3, [r4, #12]
1000a8c6:	2b00      	cmp	r3, #0
1000a8c8:	d065      	beq.n	1000a996 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a8ca:	4936      	ldr	r1, [pc, #216]	; (1000a9a4 <dualtimer_init+0xf0>)
1000a8cc:	68ca      	ldr	r2, [r1, #12]
1000a8ce:	2320      	movs	r3, #32
1000a8d0:	4313      	orrs	r3, r2
1000a8d2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a8d4:	7e22      	ldrb	r2, [r4, #24]
1000a8d6:	698b      	ldr	r3, [r1, #24]
1000a8d8:	2003      	movs	r0, #3
1000a8da:	4002      	ands	r2, r0
1000a8dc:	0112      	lsls	r2, r2, #4
1000a8de:	302d      	adds	r0, #45	; 0x2d
1000a8e0:	4383      	bics	r3, r0
1000a8e2:	4313      	orrs	r3, r2
1000a8e4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a8e6:	7823      	ldrb	r3, [r4, #0]
1000a8e8:	2b00      	cmp	r3, #0
1000a8ea:	d026      	beq.n	1000a93a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a8ec:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a8ee:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a8f0:	2b00      	cmp	r3, #0
1000a8f2:	d003      	beq.n	1000a8fc <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a8f4:	3b02      	subs	r3, #2
1000a8f6:	425d      	negs	r5, r3
1000a8f8:	415d      	adcs	r5, r3
1000a8fa:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a8fc:	78a2      	ldrb	r2, [r4, #2]
1000a8fe:	0052      	lsls	r2, r2, #1
1000a900:	2502      	movs	r5, #2
1000a902:	402a      	ands	r2, r5
1000a904:	78e3      	ldrb	r3, [r4, #3]
1000a906:	009b      	lsls	r3, r3, #2
1000a908:	350a      	adds	r5, #10
1000a90a:	402b      	ands	r3, r5
1000a90c:	431a      	orrs	r2, r3
1000a90e:	0015      	movs	r5, r2
1000a910:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a912:	7923      	ldrb	r3, [r4, #4]
1000a914:	2b00      	cmp	r3, #0
1000a916:	d001      	beq.n	1000a91c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a918:	2320      	movs	r3, #32
1000a91a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a91c:	4b22      	ldr	r3, [pc, #136]	; (1000a9a8 <dualtimer_init+0xf4>)
1000a91e:	68a2      	ldr	r2, [r4, #8]
1000a920:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a922:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a924:	491f      	ldr	r1, [pc, #124]	; (1000a9a4 <dualtimer_init+0xf0>)
1000a926:	22c4      	movs	r2, #196	; 0xc4
1000a928:	0052      	lsls	r2, r2, #1
1000a92a:	5c88      	ldrb	r0, [r1, r2]
1000a92c:	2301      	movs	r3, #1
1000a92e:	4303      	orrs	r3, r0
1000a930:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a932:	2000      	movs	r0, #0
1000a934:	4b1d      	ldr	r3, [pc, #116]	; (1000a9ac <dualtimer_init+0xf8>)
1000a936:	4798      	blx	r3
1000a938:	e000      	b.n	1000a93c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a93a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a93c:	7b23      	ldrb	r3, [r4, #12]
1000a93e:	2b00      	cmp	r3, #0
1000a940:	d029      	beq.n	1000a996 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a942:	7b63      	ldrb	r3, [r4, #13]
1000a944:	2b00      	cmp	r3, #0
1000a946:	d005      	beq.n	1000a954 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a948:	2b01      	cmp	r3, #1
1000a94a:	d005      	beq.n	1000a958 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a94c:	2b02      	cmp	r3, #2
1000a94e:	d104      	bne.n	1000a95a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a950:	2540      	movs	r5, #64	; 0x40
1000a952:	e002      	b.n	1000a95a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a954:	2501      	movs	r5, #1
1000a956:	e000      	b.n	1000a95a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a958:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a95a:	7ba3      	ldrb	r3, [r4, #14]
1000a95c:	005b      	lsls	r3, r3, #1
1000a95e:	2102      	movs	r1, #2
1000a960:	4019      	ands	r1, r3
1000a962:	7be2      	ldrb	r2, [r4, #15]
1000a964:	0092      	lsls	r2, r2, #2
1000a966:	230c      	movs	r3, #12
1000a968:	4013      	ands	r3, r2
1000a96a:	430b      	orrs	r3, r1
1000a96c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a96e:	7c23      	ldrb	r3, [r4, #16]
1000a970:	2b00      	cmp	r3, #0
1000a972:	d001      	beq.n	1000a978 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a974:	2320      	movs	r3, #32
1000a976:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a978:	6962      	ldr	r2, [r4, #20]
1000a97a:	4b0b      	ldr	r3, [pc, #44]	; (1000a9a8 <dualtimer_init+0xf4>)
1000a97c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a97e:	2228      	movs	r2, #40	; 0x28
1000a980:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a982:	4908      	ldr	r1, [pc, #32]	; (1000a9a4 <dualtimer_init+0xf0>)
1000a984:	3261      	adds	r2, #97	; 0x61
1000a986:	32ff      	adds	r2, #255	; 0xff
1000a988:	5c88      	ldrb	r0, [r1, r2]
1000a98a:	2302      	movs	r3, #2
1000a98c:	4303      	orrs	r3, r0
1000a98e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a990:	2001      	movs	r0, #1
1000a992:	4b06      	ldr	r3, [pc, #24]	; (1000a9ac <dualtimer_init+0xf8>)
1000a994:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a996:	4906      	ldr	r1, [pc, #24]	; (1000a9b0 <dualtimer_init+0xfc>)
1000a998:	201e      	movs	r0, #30
1000a99a:	4b06      	ldr	r3, [pc, #24]	; (1000a9b4 <dualtimer_init+0x100>)
1000a99c:	4798      	blx	r3
}
1000a99e:	bd70      	pop	{r4, r5, r6, pc}
1000a9a0:	1000b8a9 	.word	0x1000b8a9
1000a9a4:	4000b000 	.word	0x4000b000
1000a9a8:	40001000 	.word	0x40001000
1000a9ac:	1000a86d 	.word	0x1000a86d
1000a9b0:	1000a7c9 	.word	0x1000a7c9
1000a9b4:	1000bd11 	.word	0x1000bd11

1000a9b8 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a9b8:	2800      	cmp	r0, #0
1000a9ba:	d102      	bne.n	1000a9c2 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a9bc:	4b02      	ldr	r3, [pc, #8]	; (1000a9c8 <dualtimer_register_callback+0x10>)
1000a9be:	6019      	str	r1, [r3, #0]
1000a9c0:	e001      	b.n	1000a9c6 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a9c2:	4b02      	ldr	r3, [pc, #8]	; (1000a9cc <dualtimer_register_callback+0x14>)
1000a9c4:	6019      	str	r1, [r3, #0]
	}
}
1000a9c6:	4770      	bx	lr
1000a9c8:	10018790 	.word	0x10018790
1000a9cc:	10018794 	.word	0x10018794

1000a9d0 <dualtimer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void dualtimer_unregister_callback(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a9d0:	2800      	cmp	r0, #0
1000a9d2:	d103      	bne.n	1000a9dc <dualtimer_unregister_callback+0xc>
		dualtimer_callback_timer1 = NULL;
1000a9d4:	2200      	movs	r2, #0
1000a9d6:	4b03      	ldr	r3, [pc, #12]	; (1000a9e4 <dualtimer_unregister_callback+0x14>)
1000a9d8:	601a      	str	r2, [r3, #0]
1000a9da:	e002      	b.n	1000a9e2 <dualtimer_unregister_callback+0x12>
	} else {
		dualtimer_callback_timer2 = NULL;
1000a9dc:	2200      	movs	r2, #0
1000a9de:	4b02      	ldr	r3, [pc, #8]	; (1000a9e8 <dualtimer_unregister_callback+0x18>)
1000a9e0:	601a      	str	r2, [r3, #0]
	}
1000a9e2:	4770      	bx	lr
1000a9e4:	10018790 	.word	0x10018790
1000a9e8:	10018794 	.word	0x10018794

1000a9ec <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a9ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a9ee:	4b16      	ldr	r3, [pc, #88]	; (1000aa48 <gpio_port0_isr_handler+0x5c>)
1000a9f0:	681d      	ldr	r5, [r3, #0]
1000a9f2:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a9f4:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a9f6:	07cb      	lsls	r3, r1, #31
1000a9f8:	d407      	bmi.n	1000aa0a <gpio_port0_isr_handler+0x1e>
1000a9fa:	2301      	movs	r3, #1
1000a9fc:	2401      	movs	r4, #1
1000a9fe:	0018      	movs	r0, r3
1000aa00:	0022      	movs	r2, r4
1000aa02:	409a      	lsls	r2, r3
1000aa04:	4211      	tst	r1, r2
1000aa06:	d014      	beq.n	1000aa32 <gpio_port0_isr_handler+0x46>
1000aa08:	e001      	b.n	1000aa0e <gpio_port0_isr_handler+0x22>
1000aa0a:	2201      	movs	r2, #1
1000aa0c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000aa0e:	b292      	uxth	r2, r2
1000aa10:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000aa12:	2346      	movs	r3, #70	; 0x46
1000aa14:	4a0c      	ldr	r2, [pc, #48]	; (1000aa48 <gpio_port0_isr_handler+0x5c>)
1000aa16:	5ad3      	ldrh	r3, [r2, r3]
1000aa18:	4103      	asrs	r3, r0
1000aa1a:	07db      	lsls	r3, r3, #31
1000aa1c:	d50c      	bpl.n	1000aa38 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000aa1e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000aa20:	5ad3      	ldrh	r3, [r2, r3]
1000aa22:	4103      	asrs	r3, r0
1000aa24:	07db      	lsls	r3, r3, #31
1000aa26:	d507      	bpl.n	1000aa38 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000aa28:	0080      	lsls	r0, r0, #2
1000aa2a:	1810      	adds	r0, r2, r0
1000aa2c:	6843      	ldr	r3, [r0, #4]
1000aa2e:	4798      	blx	r3
1000aa30:	e002      	b.n	1000aa38 <gpio_port0_isr_handler+0x4c>
1000aa32:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000aa34:	2b10      	cmp	r3, #16
1000aa36:	d1e2      	bne.n	1000a9fe <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000aa38:	2180      	movs	r1, #128	; 0x80
1000aa3a:	0409      	lsls	r1, r1, #16
1000aa3c:	23c0      	movs	r3, #192	; 0xc0
1000aa3e:	005b      	lsls	r3, r3, #1
1000aa40:	4a02      	ldr	r2, [pc, #8]	; (1000aa4c <gpio_port0_isr_handler+0x60>)
1000aa42:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000aa44:	bd70      	pop	{r4, r5, r6, pc}
1000aa46:	46c0      	nop			; (mov r8, r8)
1000aa48:	1001a468 	.word	0x1001a468
1000aa4c:	e000e100 	.word	0xe000e100

1000aa50 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000aa52:	4b18      	ldr	r3, [pc, #96]	; (1000aab4 <gpio_port1_isr_handler+0x64>)
1000aa54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000aa56:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000aa58:	b2b6      	uxth	r6, r6
1000aa5a:	0037      	movs	r7, r6
1000aa5c:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000aa5e:	0b76      	lsrs	r6, r6, #13
1000aa60:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000aa62:	4d14      	ldr	r5, [pc, #80]	; (1000aab4 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000aa64:	2e00      	cmp	r6, #0
1000aa66:	d001      	beq.n	1000aa6c <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000aa68:	4b13      	ldr	r3, [pc, #76]	; (1000aab8 <gpio_port1_isr_handler+0x68>)
1000aa6a:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000aa6c:	0022      	movs	r2, r4
1000aa6e:	2301      	movs	r3, #1
1000aa70:	40a3      	lsls	r3, r4
1000aa72:	421f      	tst	r7, r3
1000aa74:	d013      	beq.n	1000aa9e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000aa76:	b29b      	uxth	r3, r3
1000aa78:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000aa7a:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000aa7c:	238e      	movs	r3, #142	; 0x8e
1000aa7e:	5aeb      	ldrh	r3, [r5, r3]
1000aa80:	4123      	asrs	r3, r4
1000aa82:	07db      	lsls	r3, r3, #31
1000aa84:	d50b      	bpl.n	1000aa9e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000aa86:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000aa88:	490a      	ldr	r1, [pc, #40]	; (1000aab4 <gpio_port1_isr_handler+0x64>)
1000aa8a:	5acb      	ldrh	r3, [r1, r3]
1000aa8c:	4123      	asrs	r3, r4
1000aa8e:	07db      	lsls	r3, r3, #31
1000aa90:	d505      	bpl.n	1000aa9e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000aa92:	3212      	adds	r2, #18
1000aa94:	0092      	lsls	r2, r2, #2
1000aa96:	188a      	adds	r2, r1, r2
1000aa98:	6853      	ldr	r3, [r2, #4]
1000aa9a:	4798      	blx	r3
				break;
1000aa9c:	e002      	b.n	1000aaa4 <gpio_port1_isr_handler+0x54>
1000aa9e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000aaa0:	2c10      	cmp	r4, #16
1000aaa2:	d1df      	bne.n	1000aa64 <gpio_port1_isr_handler+0x14>
1000aaa4:	2180      	movs	r1, #128	; 0x80
1000aaa6:	0449      	lsls	r1, r1, #17
1000aaa8:	23c0      	movs	r3, #192	; 0xc0
1000aaaa:	005b      	lsls	r3, r3, #1
1000aaac:	4a03      	ldr	r2, [pc, #12]	; (1000aabc <gpio_port1_isr_handler+0x6c>)
1000aaae:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aab2:	46c0      	nop			; (mov r8, r8)
1000aab4:	1001a468 	.word	0x1001a468
1000aab8:	0001bc51 	.word	0x0001bc51
1000aabc:	e000e100 	.word	0xe000e100

1000aac0 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000aac0:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000aac2:	2390      	movs	r3, #144	; 0x90
1000aac4:	4a1b      	ldr	r2, [pc, #108]	; (1000ab34 <gpio_port2_isr_handler+0x74>)
1000aac6:	58d2      	ldr	r2, [r2, r3]
1000aac8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000aaca:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000aacc:	04d9      	lsls	r1, r3, #19
1000aace:	d414      	bmi.n	1000aafa <gpio_port2_isr_handler+0x3a>
1000aad0:	0499      	lsls	r1, r3, #18
1000aad2:	d40a      	bmi.n	1000aaea <gpio_port2_isr_handler+0x2a>
1000aad4:	0459      	lsls	r1, r3, #17
1000aad6:	d40c      	bmi.n	1000aaf2 <gpio_port2_isr_handler+0x32>
1000aad8:	0bdb      	lsrs	r3, r3, #15
1000aada:	03db      	lsls	r3, r3, #15
1000aadc:	b29b      	uxth	r3, r3
1000aade:	2b00      	cmp	r3, #0
1000aae0:	d020      	beq.n	1000ab24 <gpio_port2_isr_handler+0x64>
1000aae2:	2380      	movs	r3, #128	; 0x80
1000aae4:	021b      	lsls	r3, r3, #8
1000aae6:	210f      	movs	r1, #15
1000aae8:	e00a      	b.n	1000ab00 <gpio_port2_isr_handler+0x40>
1000aaea:	2380      	movs	r3, #128	; 0x80
1000aaec:	019b      	lsls	r3, r3, #6
1000aaee:	210d      	movs	r1, #13
1000aaf0:	e006      	b.n	1000ab00 <gpio_port2_isr_handler+0x40>
1000aaf2:	2380      	movs	r3, #128	; 0x80
1000aaf4:	01db      	lsls	r3, r3, #7
1000aaf6:	210e      	movs	r1, #14
1000aaf8:	e002      	b.n	1000ab00 <gpio_port2_isr_handler+0x40>
1000aafa:	2380      	movs	r3, #128	; 0x80
1000aafc:	015b      	lsls	r3, r3, #5
1000aafe:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000ab00:	b29b      	uxth	r3, r3
1000ab02:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ab04:	23d6      	movs	r3, #214	; 0xd6
1000ab06:	4a0b      	ldr	r2, [pc, #44]	; (1000ab34 <gpio_port2_isr_handler+0x74>)
1000ab08:	5ad3      	ldrh	r3, [r2, r3]
1000ab0a:	410b      	asrs	r3, r1
1000ab0c:	07db      	lsls	r3, r3, #31
1000ab0e:	d509      	bpl.n	1000ab24 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000ab10:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ab12:	5ad3      	ldrh	r3, [r2, r3]
1000ab14:	410b      	asrs	r3, r1
1000ab16:	07db      	lsls	r3, r3, #31
1000ab18:	d504      	bpl.n	1000ab24 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000ab1a:	3124      	adds	r1, #36	; 0x24
1000ab1c:	0089      	lsls	r1, r1, #2
1000ab1e:	1851      	adds	r1, r2, r1
1000ab20:	684b      	ldr	r3, [r1, #4]
1000ab22:	4798      	blx	r3
1000ab24:	2180      	movs	r1, #128	; 0x80
1000ab26:	0489      	lsls	r1, r1, #18
1000ab28:	23c0      	movs	r3, #192	; 0xc0
1000ab2a:	005b      	lsls	r3, r3, #1
1000ab2c:	4a02      	ldr	r2, [pc, #8]	; (1000ab38 <gpio_port2_isr_handler+0x78>)
1000ab2e:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000ab30:	bd10      	pop	{r4, pc}
1000ab32:	46c0      	nop			; (mov r8, r8)
1000ab34:	1001a468 	.word	0x1001a468
1000ab38:	e000e100 	.word	0xe000e100

1000ab3c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000ab3c:	2300      	movs	r3, #0
1000ab3e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000ab40:	2201      	movs	r2, #1
1000ab42:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000ab44:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000ab46:	70c3      	strb	r3, [r0, #3]
}
1000ab48:	4770      	bx	lr
1000ab4a:	46c0      	nop			; (mov r8, r8)

1000ab4c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000ab4c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000ab4e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000ab50:	2801      	cmp	r0, #1
1000ab52:	d800      	bhi.n	1000ab56 <gpio_pin_set_config+0xa>
1000ab54:	e0c8      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000ab56:	2807      	cmp	r0, #7
1000ab58:	d809      	bhi.n	1000ab6e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ab5a:	4d64      	ldr	r5, [pc, #400]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ab5c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000ab5e:	3b10      	subs	r3, #16
1000ab60:	4003      	ands	r3, r0
1000ab62:	009b      	lsls	r3, r3, #2
1000ab64:	2407      	movs	r4, #7
1000ab66:	409c      	lsls	r4, r3
1000ab68:	43a2      	bics	r2, r4
1000ab6a:	646a      	str	r2, [r5, #68]	; 0x44
1000ab6c:	e029      	b.n	1000abc2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000ab6e:	280f      	cmp	r0, #15
1000ab70:	d809      	bhi.n	1000ab86 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ab72:	4d5e      	ldr	r5, [pc, #376]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ab74:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000ab76:	2307      	movs	r3, #7
1000ab78:	4003      	ands	r3, r0
1000ab7a:	009b      	lsls	r3, r3, #2
1000ab7c:	2407      	movs	r4, #7
1000ab7e:	409c      	lsls	r4, r3
1000ab80:	43a2      	bics	r2, r4
1000ab82:	64aa      	str	r2, [r5, #72]	; 0x48
1000ab84:	e01d      	b.n	1000abc2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000ab86:	2817      	cmp	r0, #23
1000ab88:	d809      	bhi.n	1000ab9e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ab8a:	4d58      	ldr	r5, [pc, #352]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ab8c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000ab8e:	2307      	movs	r3, #7
1000ab90:	4003      	ands	r3, r0
1000ab92:	009b      	lsls	r3, r3, #2
1000ab94:	2407      	movs	r4, #7
1000ab96:	409c      	lsls	r4, r3
1000ab98:	43a2      	bics	r2, r4
1000ab9a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000ab9c:	e011      	b.n	1000abc2 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000ab9e:	0003      	movs	r3, r0
1000aba0:	3b2c      	subs	r3, #44	; 0x2c
1000aba2:	2b03      	cmp	r3, #3
1000aba4:	d80d      	bhi.n	1000abc2 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000aba6:	4d52      	ldr	r5, [pc, #328]	; (1000acf0 <gpio_pin_set_config+0x1a4>)
1000aba8:	2482      	movs	r4, #130	; 0x82
1000abaa:	00e4      	lsls	r4, r4, #3
1000abac:	5d2a      	ldrb	r2, [r5, r4]
1000abae:	0712      	lsls	r2, r2, #28
1000abb0:	2601      	movs	r6, #1
1000abb2:	409e      	lsls	r6, r3
1000abb4:	0f12      	lsrs	r2, r2, #28
1000abb6:	5d2b      	ldrb	r3, [r5, r4]
1000abb8:	43b2      	bics	r2, r6
1000abba:	260f      	movs	r6, #15
1000abbc:	43b3      	bics	r3, r6
1000abbe:	4313      	orrs	r3, r2
1000abc0:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000abc2:	0003      	movs	r3, r0
1000abc4:	3b1d      	subs	r3, #29
1000abc6:	2b02      	cmp	r3, #2
1000abc8:	d829      	bhi.n	1000ac1e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000abca:	784b      	ldrb	r3, [r1, #1]
1000abcc:	2b01      	cmp	r3, #1
1000abce:	d108      	bne.n	1000abe2 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000abd0:	4d47      	ldr	r5, [pc, #284]	; (1000acf0 <gpio_pin_set_config+0x1a4>)
1000abd2:	7d2b      	ldrb	r3, [r5, #20]
1000abd4:	241f      	movs	r4, #31
1000abd6:	1a24      	subs	r4, r4, r0
1000abd8:	2201      	movs	r2, #1
1000abda:	40a2      	lsls	r2, r4
1000abdc:	4393      	bics	r3, r2
1000abde:	752b      	strb	r3, [r5, #20]
1000abe0:	e008      	b.n	1000abf4 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000abe2:	4c43      	ldr	r4, [pc, #268]	; (1000acf0 <gpio_pin_set_config+0x1a4>)
1000abe4:	7d25      	ldrb	r5, [r4, #20]
1000abe6:	221f      	movs	r2, #31
1000abe8:	1a12      	subs	r2, r2, r0
1000abea:	2301      	movs	r3, #1
1000abec:	4093      	lsls	r3, r2
1000abee:	432b      	orrs	r3, r5
1000abf0:	b2db      	uxtb	r3, r3
1000abf2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000abf4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000abf6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000abf8:	2a00      	cmp	r2, #0
1000abfa:	d075      	beq.n	1000ace8 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000abfc:	493c      	ldr	r1, [pc, #240]	; (1000acf0 <gpio_pin_set_config+0x1a4>)
1000abfe:	880c      	ldrh	r4, [r1, #0]
1000ac00:	221f      	movs	r2, #31
1000ac02:	1a10      	subs	r0, r2, r0
1000ac04:	0080      	lsls	r0, r0, #2
1000ac06:	3301      	adds	r3, #1
1000ac08:	4083      	lsls	r3, r0
1000ac0a:	4323      	orrs	r3, r4
1000ac0c:	b29b      	uxth	r3, r3
1000ac0e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000ac10:	4a38      	ldr	r2, [pc, #224]	; (1000acf4 <gpio_pin_set_config+0x1a8>)
1000ac12:	7811      	ldrb	r1, [r2, #0]
1000ac14:	2302      	movs	r3, #2
1000ac16:	430b      	orrs	r3, r1
1000ac18:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ac1a:	2300      	movs	r3, #0
1000ac1c:	e064      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000ac1e:	780a      	ldrb	r2, [r1, #0]
1000ac20:	2a00      	cmp	r2, #0
1000ac22:	d140      	bne.n	1000aca6 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000ac24:	280f      	cmp	r0, #15
1000ac26:	d808      	bhi.n	1000ac3a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000ac28:	2301      	movs	r3, #1
1000ac2a:	4083      	lsls	r3, r0
1000ac2c:	b29b      	uxth	r3, r3
1000ac2e:	4a32      	ldr	r2, [pc, #200]	; (1000acf8 <gpio_pin_set_config+0x1ac>)
1000ac30:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ac32:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000ac34:	281f      	cmp	r0, #31
1000ac36:	d857      	bhi.n	1000ace8 <gpio_pin_set_config+0x19c>
1000ac38:	e012      	b.n	1000ac60 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000ac3a:	281f      	cmp	r0, #31
1000ac3c:	d807      	bhi.n	1000ac4e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ac3e:	220f      	movs	r2, #15
1000ac40:	4002      	ands	r2, r0
1000ac42:	2301      	movs	r3, #1
1000ac44:	4093      	lsls	r3, r2
1000ac46:	b29b      	uxth	r3, r3
1000ac48:	4a2c      	ldr	r2, [pc, #176]	; (1000acfc <gpio_pin_set_config+0x1b0>)
1000ac4a:	8293      	strh	r3, [r2, #20]
1000ac4c:	e008      	b.n	1000ac60 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ac4e:	230f      	movs	r3, #15
1000ac50:	4018      	ands	r0, r3
1000ac52:	3b0e      	subs	r3, #14
1000ac54:	4083      	lsls	r3, r0
1000ac56:	b29b      	uxth	r3, r3
1000ac58:	4a29      	ldr	r2, [pc, #164]	; (1000ad00 <gpio_pin_set_config+0x1b4>)
1000ac5a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ac5c:	2300      	movs	r3, #0
1000ac5e:	e043      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000ac60:	784b      	ldrb	r3, [r1, #1]
1000ac62:	2b01      	cmp	r3, #1
1000ac64:	d00c      	beq.n	1000ac80 <gpio_pin_set_config+0x134>
1000ac66:	2b00      	cmp	r3, #0
1000ac68:	d002      	beq.n	1000ac70 <gpio_pin_set_config+0x124>
1000ac6a:	2b02      	cmp	r3, #2
1000ac6c:	d010      	beq.n	1000ac90 <gpio_pin_set_config+0x144>
1000ac6e:	e03a      	b.n	1000ace6 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000ac70:	491e      	ldr	r1, [pc, #120]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ac72:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000ac74:	2301      	movs	r3, #1
1000ac76:	4083      	lsls	r3, r0
1000ac78:	4313      	orrs	r3, r2
1000ac7a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ac7c:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000ac7e:	e033      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ac80:	491a      	ldr	r1, [pc, #104]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ac82:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000ac84:	2201      	movs	r2, #1
1000ac86:	4082      	lsls	r2, r0
1000ac88:	4393      	bics	r3, r2
1000ac8a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ac8c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ac8e:	e02b      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000ac90:	4b16      	ldr	r3, [pc, #88]	; (1000acec <gpio_pin_set_config+0x1a0>)
1000ac92:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000ac94:	2201      	movs	r2, #1
1000ac96:	4082      	lsls	r2, r0
1000ac98:	4311      	orrs	r1, r2
1000ac9a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ac9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000ac9e:	4391      	bics	r1, r2
1000aca0:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aca2:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000aca4:	e020      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aca6:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000aca8:	2a01      	cmp	r2, #1
1000acaa:	d11d      	bne.n	1000ace8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000acac:	280f      	cmp	r0, #15
1000acae:	d806      	bhi.n	1000acbe <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000acb0:	3301      	adds	r3, #1
1000acb2:	4083      	lsls	r3, r0
1000acb4:	b29b      	uxth	r3, r3
1000acb6:	4a10      	ldr	r2, [pc, #64]	; (1000acf8 <gpio_pin_set_config+0x1ac>)
1000acb8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000acba:	2300      	movs	r3, #0
1000acbc:	e014      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000acbe:	281f      	cmp	r0, #31
1000acc0:	d808      	bhi.n	1000acd4 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000acc2:	230f      	movs	r3, #15
1000acc4:	4018      	ands	r0, r3
1000acc6:	3b0e      	subs	r3, #14
1000acc8:	4083      	lsls	r3, r0
1000acca:	b29b      	uxth	r3, r3
1000accc:	4a0b      	ldr	r2, [pc, #44]	; (1000acfc <gpio_pin_set_config+0x1b0>)
1000acce:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000acd0:	2300      	movs	r3, #0
1000acd2:	e009      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000acd4:	230f      	movs	r3, #15
1000acd6:	4018      	ands	r0, r3
1000acd8:	3b0e      	subs	r3, #14
1000acda:	4083      	lsls	r3, r0
1000acdc:	b29b      	uxth	r3, r3
1000acde:	4a08      	ldr	r2, [pc, #32]	; (1000ad00 <gpio_pin_set_config+0x1b4>)
1000ace0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ace2:	2300      	movs	r3, #0
1000ace4:	e000      	b.n	1000ace8 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000ace6:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000ace8:	0018      	movs	r0, r3
1000acea:	bd70      	pop	{r4, r5, r6, pc}
1000acec:	4000b000 	.word	0x4000b000
1000acf0:	4000f000 	.word	0x4000f000
1000acf4:	4000e000 	.word	0x4000e000
1000acf8:	40010000 	.word	0x40010000
1000acfc:	40011000 	.word	0x40011000
1000ad00:	40013000 	.word	0x40013000

1000ad04 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ad04:	280f      	cmp	r0, #15
1000ad06:	d806      	bhi.n	1000ad16 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000ad08:	4b0f      	ldr	r3, [pc, #60]	; (1000ad48 <gpio_pin_get_input_level+0x44>)
1000ad0a:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000ad0c:	2301      	movs	r3, #1
1000ad0e:	4083      	lsls	r3, r0
1000ad10:	0018      	movs	r0, r3
1000ad12:	4008      	ands	r0, r1
1000ad14:	e014      	b.n	1000ad40 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000ad16:	281f      	cmp	r0, #31
1000ad18:	d809      	bhi.n	1000ad2e <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000ad1a:	4b0c      	ldr	r3, [pc, #48]	; (1000ad4c <gpio_pin_get_input_level+0x48>)
1000ad1c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ad1e:	230f      	movs	r3, #15
1000ad20:	4003      	ands	r3, r0
1000ad22:	001a      	movs	r2, r3
1000ad24:	2301      	movs	r3, #1
1000ad26:	4093      	lsls	r3, r2
1000ad28:	0018      	movs	r0, r3
1000ad2a:	4008      	ands	r0, r1
1000ad2c:	e008      	b.n	1000ad40 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000ad2e:	4b08      	ldr	r3, [pc, #32]	; (1000ad50 <gpio_pin_get_input_level+0x4c>)
1000ad30:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ad32:	230f      	movs	r3, #15
1000ad34:	4003      	ands	r3, r0
1000ad36:	001a      	movs	r2, r3
1000ad38:	2301      	movs	r3, #1
1000ad3a:	4093      	lsls	r3, r2
1000ad3c:	0018      	movs	r0, r3
1000ad3e:	4008      	ands	r0, r1
	}

	return regval;
1000ad40:	1e43      	subs	r3, r0, #1
1000ad42:	4198      	sbcs	r0, r3
1000ad44:	b2c0      	uxtb	r0, r0
}
1000ad46:	4770      	bx	lr
1000ad48:	40010000 	.word	0x40010000
1000ad4c:	40011000 	.word	0x40011000
1000ad50:	40013000 	.word	0x40013000

1000ad54 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ad54:	280f      	cmp	r0, #15
1000ad56:	d806      	bhi.n	1000ad66 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000ad58:	4b0f      	ldr	r3, [pc, #60]	; (1000ad98 <gpio_pin_get_output_level+0x44>)
1000ad5a:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000ad5c:	2301      	movs	r3, #1
1000ad5e:	4083      	lsls	r3, r0
1000ad60:	0018      	movs	r0, r3
1000ad62:	4008      	ands	r0, r1
1000ad64:	e014      	b.n	1000ad90 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000ad66:	281f      	cmp	r0, #31
1000ad68:	d809      	bhi.n	1000ad7e <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000ad6a:	4b0c      	ldr	r3, [pc, #48]	; (1000ad9c <gpio_pin_get_output_level+0x48>)
1000ad6c:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000ad6e:	230f      	movs	r3, #15
1000ad70:	4003      	ands	r3, r0
1000ad72:	001a      	movs	r2, r3
1000ad74:	2301      	movs	r3, #1
1000ad76:	4093      	lsls	r3, r2
1000ad78:	0018      	movs	r0, r3
1000ad7a:	4008      	ands	r0, r1
1000ad7c:	e008      	b.n	1000ad90 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000ad7e:	4b08      	ldr	r3, [pc, #32]	; (1000ada0 <gpio_pin_get_output_level+0x4c>)
1000ad80:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000ad82:	230f      	movs	r3, #15
1000ad84:	4003      	ands	r3, r0
1000ad86:	001a      	movs	r2, r3
1000ad88:	2301      	movs	r3, #1
1000ad8a:	4093      	lsls	r3, r2
1000ad8c:	0018      	movs	r0, r3
1000ad8e:	4008      	ands	r0, r1
	}

	return regval;
1000ad90:	1e43      	subs	r3, r0, #1
1000ad92:	4198      	sbcs	r0, r3
1000ad94:	b2c0      	uxtb	r0, r0
}
1000ad96:	4770      	bx	lr
1000ad98:	40010000 	.word	0x40010000
1000ad9c:	40011000 	.word	0x40011000
1000ada0:	40013000 	.word	0x40013000

1000ada4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000ada4:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000ada6:	280f      	cmp	r0, #15
1000ada8:	d810      	bhi.n	1000adcc <gpio_pin_set_output_level+0x28>
		if(level) {
1000adaa:	2900      	cmp	r1, #0
1000adac:	d007      	beq.n	1000adbe <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000adae:	4a1d      	ldr	r2, [pc, #116]	; (1000ae24 <gpio_pin_set_output_level+0x80>)
1000adb0:	8891      	ldrh	r1, [r2, #4]
1000adb2:	2301      	movs	r3, #1
1000adb4:	4083      	lsls	r3, r0
1000adb6:	430b      	orrs	r3, r1
1000adb8:	b29b      	uxth	r3, r3
1000adba:	8093      	strh	r3, [r2, #4]
1000adbc:	e031      	b.n	1000ae22 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000adbe:	4919      	ldr	r1, [pc, #100]	; (1000ae24 <gpio_pin_set_output_level+0x80>)
1000adc0:	888b      	ldrh	r3, [r1, #4]
1000adc2:	2201      	movs	r2, #1
1000adc4:	4082      	lsls	r2, r0
1000adc6:	4393      	bics	r3, r2
1000adc8:	808b      	strh	r3, [r1, #4]
1000adca:	e02a      	b.n	1000ae22 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000adcc:	281f      	cmp	r0, #31
1000adce:	d814      	bhi.n	1000adfa <gpio_pin_set_output_level+0x56>
		if(level) {
1000add0:	2900      	cmp	r1, #0
1000add2:	d009      	beq.n	1000ade8 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000add4:	4914      	ldr	r1, [pc, #80]	; (1000ae28 <gpio_pin_set_output_level+0x84>)
1000add6:	888c      	ldrh	r4, [r1, #4]
1000add8:	220f      	movs	r2, #15
1000adda:	4010      	ands	r0, r2
1000addc:	2301      	movs	r3, #1
1000adde:	4083      	lsls	r3, r0
1000ade0:	4323      	orrs	r3, r4
1000ade2:	b29b      	uxth	r3, r3
1000ade4:	808b      	strh	r3, [r1, #4]
1000ade6:	e01c      	b.n	1000ae22 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ade8:	490f      	ldr	r1, [pc, #60]	; (1000ae28 <gpio_pin_set_output_level+0x84>)
1000adea:	888b      	ldrh	r3, [r1, #4]
1000adec:	220f      	movs	r2, #15
1000adee:	4010      	ands	r0, r2
1000adf0:	3a0e      	subs	r2, #14
1000adf2:	4082      	lsls	r2, r0
1000adf4:	4393      	bics	r3, r2
1000adf6:	808b      	strh	r3, [r1, #4]
1000adf8:	e013      	b.n	1000ae22 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000adfa:	2900      	cmp	r1, #0
1000adfc:	d009      	beq.n	1000ae12 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000adfe:	490b      	ldr	r1, [pc, #44]	; (1000ae2c <gpio_pin_set_output_level+0x88>)
1000ae00:	888c      	ldrh	r4, [r1, #4]
1000ae02:	220f      	movs	r2, #15
1000ae04:	4010      	ands	r0, r2
1000ae06:	2301      	movs	r3, #1
1000ae08:	4083      	lsls	r3, r0
1000ae0a:	4323      	orrs	r3, r4
1000ae0c:	b29b      	uxth	r3, r3
1000ae0e:	808b      	strh	r3, [r1, #4]
1000ae10:	e007      	b.n	1000ae22 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ae12:	4906      	ldr	r1, [pc, #24]	; (1000ae2c <gpio_pin_set_output_level+0x88>)
1000ae14:	888b      	ldrh	r3, [r1, #4]
1000ae16:	220f      	movs	r2, #15
1000ae18:	4010      	ands	r0, r2
1000ae1a:	3a0e      	subs	r2, #14
1000ae1c:	4082      	lsls	r2, r0
1000ae1e:	4393      	bics	r3, r2
1000ae20:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000ae22:	bd10      	pop	{r4, pc}
1000ae24:	40010000 	.word	0x40010000
1000ae28:	40011000 	.word	0x40011000
1000ae2c:	40013000 	.word	0x40013000

1000ae30 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000ae30:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000ae32:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000ae34:	23ff      	movs	r3, #255	; 0xff
1000ae36:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000ae38:	2807      	cmp	r0, #7
1000ae3a:	d833      	bhi.n	1000aea4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ae3c:	4a4e      	ldr	r2, [pc, #312]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000ae3e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ae40:	3bf8      	subs	r3, #248	; 0xf8
1000ae42:	4003      	ands	r3, r0
1000ae44:	009b      	lsls	r3, r3, #2
1000ae46:	2607      	movs	r6, #7
1000ae48:	409e      	lsls	r6, r3
1000ae4a:	43b4      	bics	r4, r6
1000ae4c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ae4e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ae50:	000e      	movs	r6, r1
1000ae52:	409e      	lsls	r6, r3
1000ae54:	0033      	movs	r3, r6
1000ae56:	4323      	orrs	r3, r4
1000ae58:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000ae5a:	2901      	cmp	r1, #1
1000ae5c:	d000      	beq.n	1000ae60 <gpio_pinmux_cofiguration+0x30>
1000ae5e:	e08a      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000ae60:	2803      	cmp	r0, #3
1000ae62:	d80f      	bhi.n	1000ae84 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ae64:	0011      	movs	r1, r2
1000ae66:	22d0      	movs	r2, #208	; 0xd0
1000ae68:	0052      	lsls	r2, r2, #1
1000ae6a:	588c      	ldr	r4, [r1, r2]
1000ae6c:	2303      	movs	r3, #3
1000ae6e:	4018      	ands	r0, r3
1000ae70:	00c0      	lsls	r0, r0, #3
1000ae72:	333c      	adds	r3, #60	; 0x3c
1000ae74:	4083      	lsls	r3, r0
1000ae76:	439c      	bics	r4, r3
1000ae78:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ae7a:	588b      	ldr	r3, [r1, r2]
1000ae7c:	4085      	lsls	r5, r0
1000ae7e:	431d      	orrs	r5, r3
1000ae80:	508d      	str	r5, [r1, r2]
1000ae82:	e078      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ae84:	493c      	ldr	r1, [pc, #240]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000ae86:	22d2      	movs	r2, #210	; 0xd2
1000ae88:	0052      	lsls	r2, r2, #1
1000ae8a:	588c      	ldr	r4, [r1, r2]
1000ae8c:	2303      	movs	r3, #3
1000ae8e:	4018      	ands	r0, r3
1000ae90:	00c0      	lsls	r0, r0, #3
1000ae92:	333c      	adds	r3, #60	; 0x3c
1000ae94:	4083      	lsls	r3, r0
1000ae96:	439c      	bics	r4, r3
1000ae98:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ae9a:	588b      	ldr	r3, [r1, r2]
1000ae9c:	4085      	lsls	r5, r0
1000ae9e:	431d      	orrs	r5, r3
1000aea0:	508d      	str	r5, [r1, r2]
1000aea2:	e068      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000aea4:	280f      	cmp	r0, #15
1000aea6:	d832      	bhi.n	1000af0e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aea8:	4a33      	ldr	r2, [pc, #204]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000aeaa:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000aeac:	2307      	movs	r3, #7
1000aeae:	4003      	ands	r3, r0
1000aeb0:	009b      	lsls	r3, r3, #2
1000aeb2:	2607      	movs	r6, #7
1000aeb4:	409e      	lsls	r6, r3
1000aeb6:	43b4      	bics	r4, r6
1000aeb8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000aeba:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000aebc:	000e      	movs	r6, r1
1000aebe:	409e      	lsls	r6, r3
1000aec0:	0033      	movs	r3, r6
1000aec2:	4323      	orrs	r3, r4
1000aec4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000aec6:	2901      	cmp	r1, #1
1000aec8:	d155      	bne.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000aeca:	280b      	cmp	r0, #11
1000aecc:	d80f      	bhi.n	1000aeee <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aece:	0011      	movs	r1, r2
1000aed0:	22d4      	movs	r2, #212	; 0xd4
1000aed2:	0052      	lsls	r2, r2, #1
1000aed4:	588c      	ldr	r4, [r1, r2]
1000aed6:	2303      	movs	r3, #3
1000aed8:	4018      	ands	r0, r3
1000aeda:	00c0      	lsls	r0, r0, #3
1000aedc:	333c      	adds	r3, #60	; 0x3c
1000aede:	4083      	lsls	r3, r0
1000aee0:	439c      	bics	r4, r3
1000aee2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000aee4:	588b      	ldr	r3, [r1, r2]
1000aee6:	4085      	lsls	r5, r0
1000aee8:	431d      	orrs	r5, r3
1000aeea:	508d      	str	r5, [r1, r2]
1000aeec:	e043      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aeee:	4922      	ldr	r1, [pc, #136]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000aef0:	22d6      	movs	r2, #214	; 0xd6
1000aef2:	0052      	lsls	r2, r2, #1
1000aef4:	588c      	ldr	r4, [r1, r2]
1000aef6:	2303      	movs	r3, #3
1000aef8:	4018      	ands	r0, r3
1000aefa:	00c0      	lsls	r0, r0, #3
1000aefc:	333c      	adds	r3, #60	; 0x3c
1000aefe:	4083      	lsls	r3, r0
1000af00:	439c      	bics	r4, r3
1000af02:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000af04:	588b      	ldr	r3, [r1, r2]
1000af06:	4085      	lsls	r5, r0
1000af08:	431d      	orrs	r5, r3
1000af0a:	508d      	str	r5, [r1, r2]
1000af0c:	e033      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000af0e:	2817      	cmp	r0, #23
1000af10:	d831      	bhi.n	1000af76 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000af12:	4a19      	ldr	r2, [pc, #100]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000af14:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000af16:	2307      	movs	r3, #7
1000af18:	4003      	ands	r3, r0
1000af1a:	009b      	lsls	r3, r3, #2
1000af1c:	2607      	movs	r6, #7
1000af1e:	409e      	lsls	r6, r3
1000af20:	43b4      	bics	r4, r6
1000af22:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000af24:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000af26:	000e      	movs	r6, r1
1000af28:	409e      	lsls	r6, r3
1000af2a:	0033      	movs	r3, r6
1000af2c:	4323      	orrs	r3, r4
1000af2e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000af30:	2901      	cmp	r1, #1
1000af32:	d120      	bne.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000af34:	2813      	cmp	r0, #19
1000af36:	d80f      	bhi.n	1000af58 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000af38:	0011      	movs	r1, r2
1000af3a:	22d8      	movs	r2, #216	; 0xd8
1000af3c:	0052      	lsls	r2, r2, #1
1000af3e:	588c      	ldr	r4, [r1, r2]
1000af40:	2303      	movs	r3, #3
1000af42:	4018      	ands	r0, r3
1000af44:	00c0      	lsls	r0, r0, #3
1000af46:	333c      	adds	r3, #60	; 0x3c
1000af48:	4083      	lsls	r3, r0
1000af4a:	439c      	bics	r4, r3
1000af4c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000af4e:	588b      	ldr	r3, [r1, r2]
1000af50:	4085      	lsls	r5, r0
1000af52:	431d      	orrs	r5, r3
1000af54:	508d      	str	r5, [r1, r2]
1000af56:	e00e      	b.n	1000af76 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000af58:	4a07      	ldr	r2, [pc, #28]	; (1000af78 <gpio_pinmux_cofiguration+0x148>)
1000af5a:	23da      	movs	r3, #218	; 0xda
1000af5c:	005b      	lsls	r3, r3, #1
1000af5e:	58d1      	ldr	r1, [r2, r3]
1000af60:	2403      	movs	r4, #3
1000af62:	4020      	ands	r0, r4
1000af64:	00c0      	lsls	r0, r0, #3
1000af66:	343c      	adds	r4, #60	; 0x3c
1000af68:	4084      	lsls	r4, r0
1000af6a:	43a1      	bics	r1, r4
1000af6c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000af6e:	58d1      	ldr	r1, [r2, r3]
1000af70:	4085      	lsls	r5, r0
1000af72:	430d      	orrs	r5, r1
1000af74:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000af76:	bd70      	pop	{r4, r5, r6, pc}
1000af78:	4000b000 	.word	0x4000b000

1000af7c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000af7e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000af80:	280f      	cmp	r0, #15
1000af82:	d904      	bls.n	1000af8e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000af84:	241f      	movs	r4, #31
1000af86:	4284      	cmp	r4, r0
1000af88:	415b      	adcs	r3, r3
1000af8a:	3c1d      	subs	r4, #29
1000af8c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000af8e:	2a01      	cmp	r2, #1
1000af90:	d016      	beq.n	1000afc0 <gpio_register_callback+0x44>
1000af92:	2a00      	cmp	r2, #0
1000af94:	d004      	beq.n	1000afa0 <gpio_register_callback+0x24>
1000af96:	2a02      	cmp	r2, #2
1000af98:	d022      	beq.n	1000afe0 <gpio_register_callback+0x64>
1000af9a:	2a03      	cmp	r2, #3
1000af9c:	d030      	beq.n	1000b000 <gpio_register_callback+0x84>
1000af9e:	e03e      	b.n	1000b01e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000afa0:	4e29      	ldr	r6, [pc, #164]	; (1000b048 <gpio_register_callback+0xcc>)
1000afa2:	00dc      	lsls	r4, r3, #3
1000afa4:	18e2      	adds	r2, r4, r3
1000afa6:	00d2      	lsls	r2, r2, #3
1000afa8:	5997      	ldr	r7, [r2, r6]
1000afaa:	250f      	movs	r5, #15
1000afac:	4005      	ands	r5, r0
1000afae:	2201      	movs	r2, #1
1000afb0:	40aa      	lsls	r2, r5
1000afb2:	b292      	uxth	r2, r2
1000afb4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000afb6:	18e4      	adds	r4, r4, r3
1000afb8:	00e4      	lsls	r4, r4, #3
1000afba:	59a4      	ldr	r4, [r4, r6]
1000afbc:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000afbe:	e02e      	b.n	1000b01e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000afc0:	4e21      	ldr	r6, [pc, #132]	; (1000b048 <gpio_register_callback+0xcc>)
1000afc2:	00dc      	lsls	r4, r3, #3
1000afc4:	18e2      	adds	r2, r4, r3
1000afc6:	00d2      	lsls	r2, r2, #3
1000afc8:	5997      	ldr	r7, [r2, r6]
1000afca:	250f      	movs	r5, #15
1000afcc:	4005      	ands	r5, r0
1000afce:	2201      	movs	r2, #1
1000afd0:	40aa      	lsls	r2, r5
1000afd2:	b292      	uxth	r2, r2
1000afd4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000afd6:	18e4      	adds	r4, r4, r3
1000afd8:	00e4      	lsls	r4, r4, #3
1000afda:	59a4      	ldr	r4, [r4, r6]
1000afdc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000afde:	e01e      	b.n	1000b01e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000afe0:	4e19      	ldr	r6, [pc, #100]	; (1000b048 <gpio_register_callback+0xcc>)
1000afe2:	00dc      	lsls	r4, r3, #3
1000afe4:	18e2      	adds	r2, r4, r3
1000afe6:	00d2      	lsls	r2, r2, #3
1000afe8:	5997      	ldr	r7, [r2, r6]
1000afea:	250f      	movs	r5, #15
1000afec:	4005      	ands	r5, r0
1000afee:	2201      	movs	r2, #1
1000aff0:	40aa      	lsls	r2, r5
1000aff2:	b292      	uxth	r2, r2
1000aff4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000aff6:	18e4      	adds	r4, r4, r3
1000aff8:	00e4      	lsls	r4, r4, #3
1000affa:	59a4      	ldr	r4, [r4, r6]
1000affc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000affe:	e00e      	b.n	1000b01e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b000:	4e11      	ldr	r6, [pc, #68]	; (1000b048 <gpio_register_callback+0xcc>)
1000b002:	00dc      	lsls	r4, r3, #3
1000b004:	18e2      	adds	r2, r4, r3
1000b006:	00d2      	lsls	r2, r2, #3
1000b008:	5997      	ldr	r7, [r2, r6]
1000b00a:	250f      	movs	r5, #15
1000b00c:	4005      	ands	r5, r0
1000b00e:	2201      	movs	r2, #1
1000b010:	40aa      	lsls	r2, r5
1000b012:	b292      	uxth	r2, r2
1000b014:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b016:	18e4      	adds	r4, r4, r3
1000b018:	00e4      	lsls	r4, r4, #3
1000b01a:	59a4      	ldr	r4, [r4, r6]
1000b01c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b01e:	220f      	movs	r2, #15
1000b020:	4010      	ands	r0, r2
1000b022:	4c09      	ldr	r4, [pc, #36]	; (1000b048 <gpio_register_callback+0xcc>)
1000b024:	00dd      	lsls	r5, r3, #3
1000b026:	18ea      	adds	r2, r5, r3
1000b028:	0052      	lsls	r2, r2, #1
1000b02a:	1812      	adds	r2, r2, r0
1000b02c:	0092      	lsls	r2, r2, #2
1000b02e:	18a2      	adds	r2, r4, r2
1000b030:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b032:	18ea      	adds	r2, r5, r3
1000b034:	00d2      	lsls	r2, r2, #3
1000b036:	18a2      	adds	r2, r4, r2
1000b038:	3244      	adds	r2, #68	; 0x44
1000b03a:	2101      	movs	r1, #1
1000b03c:	4081      	lsls	r1, r0
1000b03e:	8813      	ldrh	r3, [r2, #0]
1000b040:	430b      	orrs	r3, r1
1000b042:	8013      	strh	r3, [r2, #0]
}
1000b044:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b046:	46c0      	nop			; (mov r8, r8)
1000b048:	1001a468 	.word	0x1001a468

1000b04c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000b04c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b04e:	280f      	cmp	r0, #15
1000b050:	d805      	bhi.n	1000b05e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b052:	2280      	movs	r2, #128	; 0x80
1000b054:	0412      	lsls	r2, r2, #16
1000b056:	4b12      	ldr	r3, [pc, #72]	; (1000b0a0 <gpio_enable_callback+0x54>)
1000b058:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000b05a:	2200      	movs	r2, #0
1000b05c:	e00c      	b.n	1000b078 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000b05e:	281f      	cmp	r0, #31
1000b060:	d805      	bhi.n	1000b06e <gpio_enable_callback+0x22>
1000b062:	2280      	movs	r2, #128	; 0x80
1000b064:	0452      	lsls	r2, r2, #17
1000b066:	4b0e      	ldr	r3, [pc, #56]	; (1000b0a0 <gpio_enable_callback+0x54>)
1000b068:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000b06a:	2201      	movs	r2, #1
1000b06c:	e004      	b.n	1000b078 <gpio_enable_callback+0x2c>
1000b06e:	2280      	movs	r2, #128	; 0x80
1000b070:	0492      	lsls	r2, r2, #18
1000b072:	4b0b      	ldr	r3, [pc, #44]	; (1000b0a0 <gpio_enable_callback+0x54>)
1000b074:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000b076:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000b078:	230f      	movs	r3, #15
1000b07a:	4018      	ands	r0, r3
1000b07c:	2101      	movs	r1, #1
1000b07e:	4081      	lsls	r1, r0
1000b080:	4c08      	ldr	r4, [pc, #32]	; (1000b0a4 <gpio_enable_callback+0x58>)
1000b082:	00d5      	lsls	r5, r2, #3
1000b084:	18ab      	adds	r3, r5, r2
1000b086:	00db      	lsls	r3, r3, #3
1000b088:	18e3      	adds	r3, r4, r3
1000b08a:	3346      	adds	r3, #70	; 0x46
1000b08c:	8818      	ldrh	r0, [r3, #0]
1000b08e:	4308      	orrs	r0, r1
1000b090:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000b092:	18aa      	adds	r2, r5, r2
1000b094:	00d2      	lsls	r2, r2, #3
1000b096:	5913      	ldr	r3, [r2, r4]
1000b098:	b289      	uxth	r1, r1
1000b09a:	8419      	strh	r1, [r3, #32]
}
1000b09c:	bd30      	pop	{r4, r5, pc}
1000b09e:	46c0      	nop			; (mov r8, r8)
1000b0a0:	e000e100 	.word	0xe000e100
1000b0a4:	1001a468 	.word	0x1001a468

1000b0a8 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b0a8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b0aa:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b0ac:	280f      	cmp	r0, #15
1000b0ae:	d904      	bls.n	1000b0ba <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b0b0:	221f      	movs	r2, #31
1000b0b2:	4282      	cmp	r2, r0
1000b0b4:	415b      	adcs	r3, r3
1000b0b6:	3a1d      	subs	r2, #29
1000b0b8:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b0ba:	220f      	movs	r2, #15
1000b0bc:	4010      	ands	r0, r2
1000b0be:	2101      	movs	r1, #1
1000b0c0:	4081      	lsls	r1, r0
1000b0c2:	4c07      	ldr	r4, [pc, #28]	; (1000b0e0 <gpio_disable_callback+0x38>)
1000b0c4:	00dd      	lsls	r5, r3, #3
1000b0c6:	18ea      	adds	r2, r5, r3
1000b0c8:	00d2      	lsls	r2, r2, #3
1000b0ca:	18a2      	adds	r2, r4, r2
1000b0cc:	3246      	adds	r2, #70	; 0x46
1000b0ce:	8810      	ldrh	r0, [r2, #0]
1000b0d0:	4388      	bics	r0, r1
1000b0d2:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b0d4:	18eb      	adds	r3, r5, r3
1000b0d6:	00db      	lsls	r3, r3, #3
1000b0d8:	591b      	ldr	r3, [r3, r4]
1000b0da:	b289      	uxth	r1, r1
1000b0dc:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b0de:	bd30      	pop	{r4, r5, pc}
1000b0e0:	1001a468 	.word	0x1001a468

1000b0e4 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b0e4:	b510      	push	{r4, lr}
1000b0e6:	4a11      	ldr	r2, [pc, #68]	; (1000b12c <gpio_init+0x48>)
1000b0e8:	0010      	movs	r0, r2
1000b0ea:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b0ec:	2100      	movs	r1, #0
1000b0ee:	e007      	b.n	1000b100 <gpio_init+0x1c>
1000b0f0:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b0f2:	4293      	cmp	r3, r2
1000b0f4:	d1fc      	bne.n	1000b0f0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b0f6:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b0f8:	8011      	strh	r1, [r2, #0]
1000b0fa:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b0fc:	4282      	cmp	r2, r0
1000b0fe:	d002      	beq.n	1000b106 <gpio_init+0x22>
1000b100:	0013      	movs	r3, r2
1000b102:	3b40      	subs	r3, #64	; 0x40
1000b104:	e7f4      	b.n	1000b0f0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b106:	4b0a      	ldr	r3, [pc, #40]	; (1000b130 <gpio_init+0x4c>)
1000b108:	4a0a      	ldr	r2, [pc, #40]	; (1000b134 <gpio_init+0x50>)
1000b10a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b10c:	4a0a      	ldr	r2, [pc, #40]	; (1000b138 <gpio_init+0x54>)
1000b10e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b110:	490a      	ldr	r1, [pc, #40]	; (1000b13c <gpio_init+0x58>)
1000b112:	2290      	movs	r2, #144	; 0x90
1000b114:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b116:	490a      	ldr	r1, [pc, #40]	; (1000b140 <gpio_init+0x5c>)
1000b118:	2027      	movs	r0, #39	; 0x27
1000b11a:	4c0a      	ldr	r4, [pc, #40]	; (1000b144 <gpio_init+0x60>)
1000b11c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b11e:	490a      	ldr	r1, [pc, #40]	; (1000b148 <gpio_init+0x64>)
1000b120:	2028      	movs	r0, #40	; 0x28
1000b122:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b124:	4909      	ldr	r1, [pc, #36]	; (1000b14c <gpio_init+0x68>)
1000b126:	2029      	movs	r0, #41	; 0x29
1000b128:	47a0      	blx	r4
}
1000b12a:	bd10      	pop	{r4, pc}
1000b12c:	1001a4ac 	.word	0x1001a4ac
1000b130:	1001a468 	.word	0x1001a468
1000b134:	40010000 	.word	0x40010000
1000b138:	40011000 	.word	0x40011000
1000b13c:	40013000 	.word	0x40013000
1000b140:	1000a9ed 	.word	0x1000a9ed
1000b144:	1000bd11 	.word	0x1000bd11
1000b148:	1000aa51 	.word	0x1000aa51
1000b14c:	1000aac1 	.word	0x1000aac1

1000b150 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000b150:	2801      	cmp	r0, #1
1000b152:	d00d      	beq.n	1000b170 <system_clock_config+0x20>
1000b154:	2800      	cmp	r0, #0
1000b156:	d002      	beq.n	1000b15e <system_clock_config+0xe>
1000b158:	2802      	cmp	r0, #2
1000b15a:	d01c      	beq.n	1000b196 <system_clock_config+0x46>
1000b15c:	e02e      	b.n	1000b1bc <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b15e:	4a18      	ldr	r2, [pc, #96]	; (1000b1c0 <system_clock_config+0x70>)
1000b160:	6990      	ldr	r0, [r2, #24]
1000b162:	230c      	movs	r3, #12
1000b164:	4303      	orrs	r3, r0
1000b166:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000b168:	4a16      	ldr	r2, [pc, #88]	; (1000b1c4 <system_clock_config+0x74>)
1000b16a:	4b17      	ldr	r3, [pc, #92]	; (1000b1c8 <system_clock_config+0x78>)
1000b16c:	601a      	str	r2, [r3, #0]
			break;
1000b16e:	e01a      	b.n	1000b1a6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b170:	4b13      	ldr	r3, [pc, #76]	; (1000b1c0 <system_clock_config+0x70>)
1000b172:	6998      	ldr	r0, [r3, #24]
1000b174:	2208      	movs	r2, #8
1000b176:	4302      	orrs	r2, r0
1000b178:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b17a:	699a      	ldr	r2, [r3, #24]
1000b17c:	2004      	movs	r0, #4
1000b17e:	4382      	bics	r2, r0
1000b180:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b182:	4a12      	ldr	r2, [pc, #72]	; (1000b1cc <system_clock_config+0x7c>)
1000b184:	6853      	ldr	r3, [r2, #4]
1000b186:	2080      	movs	r0, #128	; 0x80
1000b188:	0300      	lsls	r0, r0, #12
1000b18a:	4303      	orrs	r3, r0
1000b18c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b18e:	4a10      	ldr	r2, [pc, #64]	; (1000b1d0 <system_clock_config+0x80>)
1000b190:	4b0d      	ldr	r3, [pc, #52]	; (1000b1c8 <system_clock_config+0x78>)
1000b192:	601a      	str	r2, [r3, #0]
			break;
1000b194:	e007      	b.n	1000b1a6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b196:	4a0a      	ldr	r2, [pc, #40]	; (1000b1c0 <system_clock_config+0x70>)
1000b198:	6993      	ldr	r3, [r2, #24]
1000b19a:	200c      	movs	r0, #12
1000b19c:	4383      	bics	r3, r0
1000b19e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b1a0:	4a08      	ldr	r2, [pc, #32]	; (1000b1c4 <system_clock_config+0x74>)
1000b1a2:	4b09      	ldr	r3, [pc, #36]	; (1000b1c8 <system_clock_config+0x78>)
1000b1a4:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b1a6:	4b06      	ldr	r3, [pc, #24]	; (1000b1c0 <system_clock_config+0x70>)
1000b1a8:	699a      	ldr	r2, [r3, #24]
1000b1aa:	2003      	movs	r0, #3
1000b1ac:	4382      	bics	r2, r0
1000b1ae:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b1b0:	699a      	ldr	r2, [r3, #24]
1000b1b2:	4001      	ands	r1, r0
1000b1b4:	4311      	orrs	r1, r2
1000b1b6:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b1b8:	2000      	movs	r0, #0
1000b1ba:	e000      	b.n	1000b1be <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b1bc:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b1be:	4770      	bx	lr
1000b1c0:	4000b000 	.word	0x4000b000
1000b1c4:	018cba80 	.word	0x018cba80
1000b1c8:	1001a540 	.word	0x1001a540
1000b1cc:	4000f000 	.word	0x4000f000
1000b1d0:	001e8480 	.word	0x001e8480

1000b1d4 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b1d4:	4b01      	ldr	r3, [pc, #4]	; (1000b1dc <system_clock_get_value+0x8>)
1000b1d6:	6818      	ldr	r0, [r3, #0]
}
1000b1d8:	4770      	bx	lr
1000b1da:	46c0      	nop			; (mov r8, r8)
1000b1dc:	1001a540 	.word	0x1001a540

1000b1e0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b1e0:	b500      	push	{lr}
	switch (peripheral) {
1000b1e2:	2835      	cmp	r0, #53	; 0x35
1000b1e4:	d900      	bls.n	1000b1e8 <system_clock_peripheral_enable+0x8>
1000b1e6:	e1a2      	b.n	1000b52e <system_clock_peripheral_enable+0x34e>
1000b1e8:	0080      	lsls	r0, r0, #2
1000b1ea:	4bd2      	ldr	r3, [pc, #840]	; (1000b534 <system_clock_peripheral_enable+0x354>)
1000b1ec:	581b      	ldr	r3, [r3, r0]
1000b1ee:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1f0:	4ad1      	ldr	r2, [pc, #836]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b1f2:	68d1      	ldr	r1, [r2, #12]
1000b1f4:	2302      	movs	r3, #2
1000b1f6:	430b      	orrs	r3, r1
1000b1f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1fa:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b1fc:	e198      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1fe:	4ace      	ldr	r2, [pc, #824]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b200:	68d1      	ldr	r1, [r2, #12]
1000b202:	2304      	movs	r3, #4
1000b204:	430b      	orrs	r3, r1
1000b206:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b20a:	e191      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b20c:	4aca      	ldr	r2, [pc, #808]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b20e:	68d1      	ldr	r1, [r2, #12]
1000b210:	2308      	movs	r3, #8
1000b212:	430b      	orrs	r3, r1
1000b214:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b216:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b218:	e18a      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b21a:	4ac7      	ldr	r2, [pc, #796]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b21c:	68d1      	ldr	r1, [r2, #12]
1000b21e:	2310      	movs	r3, #16
1000b220:	430b      	orrs	r3, r1
1000b222:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b224:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b226:	e183      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b228:	4ac3      	ldr	r2, [pc, #780]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b22a:	68d1      	ldr	r1, [r2, #12]
1000b22c:	2320      	movs	r3, #32
1000b22e:	430b      	orrs	r3, r1
1000b230:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b232:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b234:	e17c      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b236:	4ac0      	ldr	r2, [pc, #768]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b238:	68d1      	ldr	r1, [r2, #12]
1000b23a:	2380      	movs	r3, #128	; 0x80
1000b23c:	430b      	orrs	r3, r1
1000b23e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b240:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b242:	e175      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b244:	4abc      	ldr	r2, [pc, #752]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b246:	68d3      	ldr	r3, [r2, #12]
1000b248:	2180      	movs	r1, #128	; 0x80
1000b24a:	0049      	lsls	r1, r1, #1
1000b24c:	430b      	orrs	r3, r1
1000b24e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b250:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b252:	e16d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b254:	4ab8      	ldr	r2, [pc, #736]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b256:	68d3      	ldr	r3, [r2, #12]
1000b258:	2180      	movs	r1, #128	; 0x80
1000b25a:	0109      	lsls	r1, r1, #4
1000b25c:	430b      	orrs	r3, r1
1000b25e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b260:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b262:	e165      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b264:	4ab4      	ldr	r2, [pc, #720]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b266:	68d3      	ldr	r3, [r2, #12]
1000b268:	2180      	movs	r1, #128	; 0x80
1000b26a:	0149      	lsls	r1, r1, #5
1000b26c:	430b      	orrs	r3, r1
1000b26e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b270:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b272:	e15d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b274:	4ab0      	ldr	r2, [pc, #704]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b276:	68d3      	ldr	r3, [r2, #12]
1000b278:	2180      	movs	r1, #128	; 0x80
1000b27a:	0189      	lsls	r1, r1, #6
1000b27c:	430b      	orrs	r3, r1
1000b27e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b280:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b282:	e155      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b284:	4aac      	ldr	r2, [pc, #688]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b286:	68d3      	ldr	r3, [r2, #12]
1000b288:	2180      	movs	r1, #128	; 0x80
1000b28a:	01c9      	lsls	r1, r1, #7
1000b28c:	430b      	orrs	r3, r1
1000b28e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b290:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b292:	e14d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b294:	4aa8      	ldr	r2, [pc, #672]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b296:	68d3      	ldr	r3, [r2, #12]
1000b298:	2180      	movs	r1, #128	; 0x80
1000b29a:	0209      	lsls	r1, r1, #8
1000b29c:	430b      	orrs	r3, r1
1000b29e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b2a2:	e145      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2a4:	4aa4      	ldr	r2, [pc, #656]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2a6:	68d3      	ldr	r3, [r2, #12]
1000b2a8:	2180      	movs	r1, #128	; 0x80
1000b2aa:	0249      	lsls	r1, r1, #9
1000b2ac:	430b      	orrs	r3, r1
1000b2ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b2b2:	e13d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2b4:	4aa0      	ldr	r2, [pc, #640]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2b6:	68d3      	ldr	r3, [r2, #12]
1000b2b8:	2180      	movs	r1, #128	; 0x80
1000b2ba:	0289      	lsls	r1, r1, #10
1000b2bc:	430b      	orrs	r3, r1
1000b2be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b2c2:	e135      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2c4:	4a9c      	ldr	r2, [pc, #624]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2c6:	68d3      	ldr	r3, [r2, #12]
1000b2c8:	2180      	movs	r1, #128	; 0x80
1000b2ca:	02c9      	lsls	r1, r1, #11
1000b2cc:	430b      	orrs	r3, r1
1000b2ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b2d2:	e12d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2d4:	4a98      	ldr	r2, [pc, #608]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2d6:	68d3      	ldr	r3, [r2, #12]
1000b2d8:	2180      	movs	r1, #128	; 0x80
1000b2da:	0309      	lsls	r1, r1, #12
1000b2dc:	430b      	orrs	r3, r1
1000b2de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b2e2:	e125      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2e4:	4a94      	ldr	r2, [pc, #592]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2e6:	68d3      	ldr	r3, [r2, #12]
1000b2e8:	2180      	movs	r1, #128	; 0x80
1000b2ea:	0349      	lsls	r1, r1, #13
1000b2ec:	430b      	orrs	r3, r1
1000b2ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b2f2:	e11d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b2f4:	4a90      	ldr	r2, [pc, #576]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b2f6:	68d3      	ldr	r3, [r2, #12]
1000b2f8:	2180      	movs	r1, #128	; 0x80
1000b2fa:	0389      	lsls	r1, r1, #14
1000b2fc:	430b      	orrs	r3, r1
1000b2fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b300:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b302:	e115      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b304:	4a8c      	ldr	r2, [pc, #560]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b306:	68d3      	ldr	r3, [r2, #12]
1000b308:	2180      	movs	r1, #128	; 0x80
1000b30a:	03c9      	lsls	r1, r1, #15
1000b30c:	430b      	orrs	r3, r1
1000b30e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b310:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b312:	e10d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b314:	4a88      	ldr	r2, [pc, #544]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b316:	68d3      	ldr	r3, [r2, #12]
1000b318:	2180      	movs	r1, #128	; 0x80
1000b31a:	0409      	lsls	r1, r1, #16
1000b31c:	430b      	orrs	r3, r1
1000b31e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b320:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b322:	e105      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b324:	4a84      	ldr	r2, [pc, #528]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b326:	68d3      	ldr	r3, [r2, #12]
1000b328:	2180      	movs	r1, #128	; 0x80
1000b32a:	0449      	lsls	r1, r1, #17
1000b32c:	430b      	orrs	r3, r1
1000b32e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b332:	e0fd      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b334:	4a80      	ldr	r2, [pc, #512]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b336:	68d3      	ldr	r3, [r2, #12]
1000b338:	2180      	movs	r1, #128	; 0x80
1000b33a:	0489      	lsls	r1, r1, #18
1000b33c:	430b      	orrs	r3, r1
1000b33e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b340:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b342:	e0f5      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b344:	4a7c      	ldr	r2, [pc, #496]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b346:	68d3      	ldr	r3, [r2, #12]
1000b348:	2180      	movs	r1, #128	; 0x80
1000b34a:	04c9      	lsls	r1, r1, #19
1000b34c:	430b      	orrs	r3, r1
1000b34e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b350:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b352:	e0ed      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b354:	4a78      	ldr	r2, [pc, #480]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b356:	68d3      	ldr	r3, [r2, #12]
1000b358:	2180      	movs	r1, #128	; 0x80
1000b35a:	0509      	lsls	r1, r1, #20
1000b35c:	430b      	orrs	r3, r1
1000b35e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b360:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b362:	e0e5      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b364:	4a74      	ldr	r2, [pc, #464]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b366:	68d3      	ldr	r3, [r2, #12]
1000b368:	2180      	movs	r1, #128	; 0x80
1000b36a:	0549      	lsls	r1, r1, #21
1000b36c:	430b      	orrs	r3, r1
1000b36e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b370:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b372:	e0dd      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b374:	4a70      	ldr	r2, [pc, #448]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b376:	68d3      	ldr	r3, [r2, #12]
1000b378:	2180      	movs	r1, #128	; 0x80
1000b37a:	0589      	lsls	r1, r1, #22
1000b37c:	430b      	orrs	r3, r1
1000b37e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b380:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b382:	e0d5      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b384:	4a6c      	ldr	r2, [pc, #432]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b386:	68d3      	ldr	r3, [r2, #12]
1000b388:	2180      	movs	r1, #128	; 0x80
1000b38a:	05c9      	lsls	r1, r1, #23
1000b38c:	430b      	orrs	r3, r1
1000b38e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b390:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b392:	e0cd      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b394:	4a68      	ldr	r2, [pc, #416]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b396:	6911      	ldr	r1, [r2, #16]
1000b398:	2301      	movs	r3, #1
1000b39a:	430b      	orrs	r3, r1
1000b39c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b39e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b3a0:	e0c6      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3a2:	4a65      	ldr	r2, [pc, #404]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3a4:	6911      	ldr	r1, [r2, #16]
1000b3a6:	2302      	movs	r3, #2
1000b3a8:	430b      	orrs	r3, r1
1000b3aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b3ae:	e0bf      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3b0:	4a61      	ldr	r2, [pc, #388]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3b2:	6911      	ldr	r1, [r2, #16]
1000b3b4:	2304      	movs	r3, #4
1000b3b6:	430b      	orrs	r3, r1
1000b3b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b3bc:	e0b8      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3be:	4a5e      	ldr	r2, [pc, #376]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3c0:	6911      	ldr	r1, [r2, #16]
1000b3c2:	2308      	movs	r3, #8
1000b3c4:	430b      	orrs	r3, r1
1000b3c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b3ca:	e0b1      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3cc:	4a5a      	ldr	r2, [pc, #360]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3ce:	6911      	ldr	r1, [r2, #16]
1000b3d0:	2310      	movs	r3, #16
1000b3d2:	430b      	orrs	r3, r1
1000b3d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b3d8:	e0aa      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3da:	4a57      	ldr	r2, [pc, #348]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3dc:	6911      	ldr	r1, [r2, #16]
1000b3de:	2320      	movs	r3, #32
1000b3e0:	430b      	orrs	r3, r1
1000b3e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b3e6:	e0a3      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3e8:	4a53      	ldr	r2, [pc, #332]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3ea:	6911      	ldr	r1, [r2, #16]
1000b3ec:	2340      	movs	r3, #64	; 0x40
1000b3ee:	430b      	orrs	r3, r1
1000b3f0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b3f4:	e09c      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3f6:	4a50      	ldr	r2, [pc, #320]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b3f8:	6911      	ldr	r1, [r2, #16]
1000b3fa:	2380      	movs	r3, #128	; 0x80
1000b3fc:	430b      	orrs	r3, r1
1000b3fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b400:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b402:	e095      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b404:	4a4c      	ldr	r2, [pc, #304]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b406:	6913      	ldr	r3, [r2, #16]
1000b408:	2180      	movs	r1, #128	; 0x80
1000b40a:	0049      	lsls	r1, r1, #1
1000b40c:	430b      	orrs	r3, r1
1000b40e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b410:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b412:	e08d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b414:	4a48      	ldr	r2, [pc, #288]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b416:	6913      	ldr	r3, [r2, #16]
1000b418:	2180      	movs	r1, #128	; 0x80
1000b41a:	0089      	lsls	r1, r1, #2
1000b41c:	430b      	orrs	r3, r1
1000b41e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b420:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b422:	e085      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b424:	4a44      	ldr	r2, [pc, #272]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b426:	6913      	ldr	r3, [r2, #16]
1000b428:	2180      	movs	r1, #128	; 0x80
1000b42a:	00c9      	lsls	r1, r1, #3
1000b42c:	430b      	orrs	r3, r1
1000b42e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b430:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b432:	e07d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b434:	4a40      	ldr	r2, [pc, #256]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b436:	6913      	ldr	r3, [r2, #16]
1000b438:	2180      	movs	r1, #128	; 0x80
1000b43a:	0109      	lsls	r1, r1, #4
1000b43c:	430b      	orrs	r3, r1
1000b43e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b440:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b442:	e075      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b444:	4a3c      	ldr	r2, [pc, #240]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b446:	6913      	ldr	r3, [r2, #16]
1000b448:	2180      	movs	r1, #128	; 0x80
1000b44a:	0149      	lsls	r1, r1, #5
1000b44c:	430b      	orrs	r3, r1
1000b44e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b450:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b452:	e06d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b454:	4a38      	ldr	r2, [pc, #224]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b456:	6913      	ldr	r3, [r2, #16]
1000b458:	2180      	movs	r1, #128	; 0x80
1000b45a:	0189      	lsls	r1, r1, #6
1000b45c:	430b      	orrs	r3, r1
1000b45e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b460:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b462:	e065      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b464:	4a34      	ldr	r2, [pc, #208]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b466:	6913      	ldr	r3, [r2, #16]
1000b468:	2180      	movs	r1, #128	; 0x80
1000b46a:	01c9      	lsls	r1, r1, #7
1000b46c:	430b      	orrs	r3, r1
1000b46e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b470:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b472:	e05d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b474:	4a30      	ldr	r2, [pc, #192]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b476:	6913      	ldr	r3, [r2, #16]
1000b478:	2180      	movs	r1, #128	; 0x80
1000b47a:	0209      	lsls	r1, r1, #8
1000b47c:	430b      	orrs	r3, r1
1000b47e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b480:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b482:	e055      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b484:	4a2c      	ldr	r2, [pc, #176]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b486:	6913      	ldr	r3, [r2, #16]
1000b488:	2180      	movs	r1, #128	; 0x80
1000b48a:	0249      	lsls	r1, r1, #9
1000b48c:	430b      	orrs	r3, r1
1000b48e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b490:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b492:	e04d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b494:	4a28      	ldr	r2, [pc, #160]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b496:	6913      	ldr	r3, [r2, #16]
1000b498:	2180      	movs	r1, #128	; 0x80
1000b49a:	0289      	lsls	r1, r1, #10
1000b49c:	430b      	orrs	r3, r1
1000b49e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b4a2:	e045      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4a4:	4a24      	ldr	r2, [pc, #144]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4a6:	6913      	ldr	r3, [r2, #16]
1000b4a8:	2180      	movs	r1, #128	; 0x80
1000b4aa:	02c9      	lsls	r1, r1, #11
1000b4ac:	430b      	orrs	r3, r1
1000b4ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b4b2:	e03d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4b4:	4a20      	ldr	r2, [pc, #128]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4b6:	6913      	ldr	r3, [r2, #16]
1000b4b8:	2180      	movs	r1, #128	; 0x80
1000b4ba:	0309      	lsls	r1, r1, #12
1000b4bc:	430b      	orrs	r3, r1
1000b4be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b4c2:	e035      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4c4:	4a1c      	ldr	r2, [pc, #112]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4c6:	6913      	ldr	r3, [r2, #16]
1000b4c8:	2180      	movs	r1, #128	; 0x80
1000b4ca:	0349      	lsls	r1, r1, #13
1000b4cc:	430b      	orrs	r3, r1
1000b4ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b4d2:	e02d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4d4:	4a18      	ldr	r2, [pc, #96]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4d6:	6913      	ldr	r3, [r2, #16]
1000b4d8:	2180      	movs	r1, #128	; 0x80
1000b4da:	0389      	lsls	r1, r1, #14
1000b4dc:	430b      	orrs	r3, r1
1000b4de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b4e2:	e025      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4e4:	4a14      	ldr	r2, [pc, #80]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4e6:	6913      	ldr	r3, [r2, #16]
1000b4e8:	2180      	movs	r1, #128	; 0x80
1000b4ea:	03c9      	lsls	r1, r1, #15
1000b4ec:	430b      	orrs	r3, r1
1000b4ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b4f2:	e01d      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b4f4:	4a10      	ldr	r2, [pc, #64]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b4f6:	6913      	ldr	r3, [r2, #16]
1000b4f8:	2180      	movs	r1, #128	; 0x80
1000b4fa:	0409      	lsls	r1, r1, #16
1000b4fc:	430b      	orrs	r3, r1
1000b4fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b502:	e015      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b504:	4a0c      	ldr	r2, [pc, #48]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b506:	7d11      	ldrb	r1, [r2, #20]
1000b508:	2301      	movs	r3, #1
1000b50a:	430b      	orrs	r3, r1
1000b50c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b50e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b510:	e00e      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b512:	4a09      	ldr	r2, [pc, #36]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b514:	7d11      	ldrb	r1, [r2, #20]
1000b516:	2302      	movs	r3, #2
1000b518:	430b      	orrs	r3, r1
1000b51a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b51c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b51e:	e007      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b520:	4a05      	ldr	r2, [pc, #20]	; (1000b538 <system_clock_peripheral_enable+0x358>)
1000b522:	7d11      	ldrb	r1, [r2, #20]
1000b524:	2304      	movs	r3, #4
1000b526:	430b      	orrs	r3, r1
1000b528:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b52a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b52c:	e000      	b.n	1000b530 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b52e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b530:	bd00      	pop	{pc}
1000b532:	46c0      	nop			; (mov r8, r8)
1000b534:	10017584 	.word	0x10017584
1000b538:	4000b000 	.word	0x4000b000

1000b53c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b53c:	b500      	push	{lr}
	switch (peripheral) {
1000b53e:	2835      	cmp	r0, #53	; 0x35
1000b540:	d900      	bls.n	1000b544 <system_clock_peripheral_disable+0x8>
1000b542:	e17d      	b.n	1000b840 <system_clock_peripheral_disable+0x304>
1000b544:	0080      	lsls	r0, r0, #2
1000b546:	4bbf      	ldr	r3, [pc, #764]	; (1000b844 <system_clock_peripheral_disable+0x308>)
1000b548:	581b      	ldr	r3, [r3, r0]
1000b54a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b54c:	4abe      	ldr	r2, [pc, #760]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b54e:	68d3      	ldr	r3, [r2, #12]
1000b550:	2102      	movs	r1, #2
1000b552:	438b      	bics	r3, r1
1000b554:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b556:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b558:	e173      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b55a:	4abb      	ldr	r2, [pc, #748]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b55c:	68d3      	ldr	r3, [r2, #12]
1000b55e:	2104      	movs	r1, #4
1000b560:	438b      	bics	r3, r1
1000b562:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b566:	e16c      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b568:	4ab7      	ldr	r2, [pc, #732]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b56a:	68d3      	ldr	r3, [r2, #12]
1000b56c:	2108      	movs	r1, #8
1000b56e:	438b      	bics	r3, r1
1000b570:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b572:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b574:	e165      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b576:	4ab4      	ldr	r2, [pc, #720]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b578:	68d3      	ldr	r3, [r2, #12]
1000b57a:	2110      	movs	r1, #16
1000b57c:	438b      	bics	r3, r1
1000b57e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b582:	e15e      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b584:	4ab0      	ldr	r2, [pc, #704]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b586:	68d3      	ldr	r3, [r2, #12]
1000b588:	2120      	movs	r1, #32
1000b58a:	438b      	bics	r3, r1
1000b58c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b58e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b590:	e157      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b592:	4aad      	ldr	r2, [pc, #692]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b594:	68d3      	ldr	r3, [r2, #12]
1000b596:	2180      	movs	r1, #128	; 0x80
1000b598:	438b      	bics	r3, r1
1000b59a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b59c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b59e:	e150      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5a0:	4aa9      	ldr	r2, [pc, #676]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5a2:	68d1      	ldr	r1, [r2, #12]
1000b5a4:	4ba9      	ldr	r3, [pc, #676]	; (1000b84c <system_clock_peripheral_disable+0x310>)
1000b5a6:	400b      	ands	r3, r1
1000b5a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b5ac:	e149      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5ae:	4aa6      	ldr	r2, [pc, #664]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5b0:	68d1      	ldr	r1, [r2, #12]
1000b5b2:	4ba7      	ldr	r3, [pc, #668]	; (1000b850 <system_clock_peripheral_disable+0x314>)
1000b5b4:	400b      	ands	r3, r1
1000b5b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b5ba:	e142      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5bc:	4aa2      	ldr	r2, [pc, #648]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5be:	68d1      	ldr	r1, [r2, #12]
1000b5c0:	4ba4      	ldr	r3, [pc, #656]	; (1000b854 <system_clock_peripheral_disable+0x318>)
1000b5c2:	400b      	ands	r3, r1
1000b5c4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b5c8:	e13b      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5ca:	4a9f      	ldr	r2, [pc, #636]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5cc:	68d1      	ldr	r1, [r2, #12]
1000b5ce:	4ba2      	ldr	r3, [pc, #648]	; (1000b858 <system_clock_peripheral_disable+0x31c>)
1000b5d0:	400b      	ands	r3, r1
1000b5d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b5d6:	e134      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5d8:	4a9b      	ldr	r2, [pc, #620]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5da:	68d1      	ldr	r1, [r2, #12]
1000b5dc:	4b9f      	ldr	r3, [pc, #636]	; (1000b85c <system_clock_peripheral_disable+0x320>)
1000b5de:	400b      	ands	r3, r1
1000b5e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b5e4:	e12d      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5e6:	4a98      	ldr	r2, [pc, #608]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5e8:	68d1      	ldr	r1, [r2, #12]
1000b5ea:	4b9d      	ldr	r3, [pc, #628]	; (1000b860 <system_clock_peripheral_disable+0x324>)
1000b5ec:	400b      	ands	r3, r1
1000b5ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b5f2:	e126      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5f4:	4a94      	ldr	r2, [pc, #592]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b5f6:	68d1      	ldr	r1, [r2, #12]
1000b5f8:	4b9a      	ldr	r3, [pc, #616]	; (1000b864 <system_clock_peripheral_disable+0x328>)
1000b5fa:	400b      	ands	r3, r1
1000b5fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b600:	e11f      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b602:	4a91      	ldr	r2, [pc, #580]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b604:	68d1      	ldr	r1, [r2, #12]
1000b606:	4b98      	ldr	r3, [pc, #608]	; (1000b868 <system_clock_peripheral_disable+0x32c>)
1000b608:	400b      	ands	r3, r1
1000b60a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b60c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b60e:	e118      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b610:	4a8d      	ldr	r2, [pc, #564]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b612:	68d1      	ldr	r1, [r2, #12]
1000b614:	4b95      	ldr	r3, [pc, #596]	; (1000b86c <system_clock_peripheral_disable+0x330>)
1000b616:	400b      	ands	r3, r1
1000b618:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b61a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b61c:	e111      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b61e:	4a8a      	ldr	r2, [pc, #552]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b620:	68d1      	ldr	r1, [r2, #12]
1000b622:	4b93      	ldr	r3, [pc, #588]	; (1000b870 <system_clock_peripheral_disable+0x334>)
1000b624:	400b      	ands	r3, r1
1000b626:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b62a:	e10a      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b62c:	4a86      	ldr	r2, [pc, #536]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b62e:	68d1      	ldr	r1, [r2, #12]
1000b630:	4b90      	ldr	r3, [pc, #576]	; (1000b874 <system_clock_peripheral_disable+0x338>)
1000b632:	400b      	ands	r3, r1
1000b634:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b636:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b638:	e103      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b63a:	4a83      	ldr	r2, [pc, #524]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b63c:	68d1      	ldr	r1, [r2, #12]
1000b63e:	4b8e      	ldr	r3, [pc, #568]	; (1000b878 <system_clock_peripheral_disable+0x33c>)
1000b640:	400b      	ands	r3, r1
1000b642:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b644:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b646:	e0fc      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b648:	4a7f      	ldr	r2, [pc, #508]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b64a:	68d1      	ldr	r1, [r2, #12]
1000b64c:	4b8b      	ldr	r3, [pc, #556]	; (1000b87c <system_clock_peripheral_disable+0x340>)
1000b64e:	400b      	ands	r3, r1
1000b650:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b652:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b654:	e0f5      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b656:	4a7c      	ldr	r2, [pc, #496]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b658:	68d1      	ldr	r1, [r2, #12]
1000b65a:	4b89      	ldr	r3, [pc, #548]	; (1000b880 <system_clock_peripheral_disable+0x344>)
1000b65c:	400b      	ands	r3, r1
1000b65e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b660:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b662:	e0ee      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b664:	4a78      	ldr	r2, [pc, #480]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b666:	68d1      	ldr	r1, [r2, #12]
1000b668:	4b86      	ldr	r3, [pc, #536]	; (1000b884 <system_clock_peripheral_disable+0x348>)
1000b66a:	400b      	ands	r3, r1
1000b66c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b66e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b670:	e0e7      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b672:	4a75      	ldr	r2, [pc, #468]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b674:	68d1      	ldr	r1, [r2, #12]
1000b676:	4b84      	ldr	r3, [pc, #528]	; (1000b888 <system_clock_peripheral_disable+0x34c>)
1000b678:	400b      	ands	r3, r1
1000b67a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b67c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b67e:	e0e0      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b680:	4a71      	ldr	r2, [pc, #452]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b682:	68d1      	ldr	r1, [r2, #12]
1000b684:	4b81      	ldr	r3, [pc, #516]	; (1000b88c <system_clock_peripheral_disable+0x350>)
1000b686:	400b      	ands	r3, r1
1000b688:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b68a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b68c:	e0d9      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b68e:	4a6e      	ldr	r2, [pc, #440]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b690:	68d1      	ldr	r1, [r2, #12]
1000b692:	4b7f      	ldr	r3, [pc, #508]	; (1000b890 <system_clock_peripheral_disable+0x354>)
1000b694:	400b      	ands	r3, r1
1000b696:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b698:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b69a:	e0d2      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b69c:	4a6a      	ldr	r2, [pc, #424]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b69e:	68d1      	ldr	r1, [r2, #12]
1000b6a0:	4b7c      	ldr	r3, [pc, #496]	; (1000b894 <system_clock_peripheral_disable+0x358>)
1000b6a2:	400b      	ands	r3, r1
1000b6a4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b6a8:	e0cb      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b6aa:	4a67      	ldr	r2, [pc, #412]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6ac:	68d1      	ldr	r1, [r2, #12]
1000b6ae:	4b7a      	ldr	r3, [pc, #488]	; (1000b898 <system_clock_peripheral_disable+0x35c>)
1000b6b0:	400b      	ands	r3, r1
1000b6b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b6b6:	e0c4      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b6b8:	4a63      	ldr	r2, [pc, #396]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6ba:	68d1      	ldr	r1, [r2, #12]
1000b6bc:	4b77      	ldr	r3, [pc, #476]	; (1000b89c <system_clock_peripheral_disable+0x360>)
1000b6be:	400b      	ands	r3, r1
1000b6c0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b6c4:	e0bd      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6c6:	4a60      	ldr	r2, [pc, #384]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6c8:	6913      	ldr	r3, [r2, #16]
1000b6ca:	2101      	movs	r1, #1
1000b6cc:	438b      	bics	r3, r1
1000b6ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b6d2:	e0b6      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6d4:	4a5c      	ldr	r2, [pc, #368]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6d6:	6913      	ldr	r3, [r2, #16]
1000b6d8:	2102      	movs	r1, #2
1000b6da:	438b      	bics	r3, r1
1000b6dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b6e0:	e0af      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6e2:	4a59      	ldr	r2, [pc, #356]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6e4:	6913      	ldr	r3, [r2, #16]
1000b6e6:	2104      	movs	r1, #4
1000b6e8:	438b      	bics	r3, r1
1000b6ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b6ee:	e0a8      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6f0:	4a55      	ldr	r2, [pc, #340]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b6f2:	6913      	ldr	r3, [r2, #16]
1000b6f4:	2108      	movs	r1, #8
1000b6f6:	438b      	bics	r3, r1
1000b6f8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b6fc:	e0a1      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6fe:	4a52      	ldr	r2, [pc, #328]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b700:	6913      	ldr	r3, [r2, #16]
1000b702:	2110      	movs	r1, #16
1000b704:	438b      	bics	r3, r1
1000b706:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b70a:	e09a      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b70c:	4a4e      	ldr	r2, [pc, #312]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b70e:	6913      	ldr	r3, [r2, #16]
1000b710:	2120      	movs	r1, #32
1000b712:	438b      	bics	r3, r1
1000b714:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b716:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b718:	e093      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b71a:	4a4b      	ldr	r2, [pc, #300]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b71c:	6913      	ldr	r3, [r2, #16]
1000b71e:	2140      	movs	r1, #64	; 0x40
1000b720:	438b      	bics	r3, r1
1000b722:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b726:	e08c      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b728:	4a47      	ldr	r2, [pc, #284]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b72a:	6913      	ldr	r3, [r2, #16]
1000b72c:	2180      	movs	r1, #128	; 0x80
1000b72e:	438b      	bics	r3, r1
1000b730:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b732:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b734:	e085      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b736:	4a44      	ldr	r2, [pc, #272]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b738:	6911      	ldr	r1, [r2, #16]
1000b73a:	4b44      	ldr	r3, [pc, #272]	; (1000b84c <system_clock_peripheral_disable+0x310>)
1000b73c:	400b      	ands	r3, r1
1000b73e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b740:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b742:	e07e      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b744:	4a40      	ldr	r2, [pc, #256]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b746:	6911      	ldr	r1, [r2, #16]
1000b748:	4b55      	ldr	r3, [pc, #340]	; (1000b8a0 <system_clock_peripheral_disable+0x364>)
1000b74a:	400b      	ands	r3, r1
1000b74c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b74e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b750:	e077      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b752:	4a3d      	ldr	r2, [pc, #244]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b754:	6911      	ldr	r1, [r2, #16]
1000b756:	4b53      	ldr	r3, [pc, #332]	; (1000b8a4 <system_clock_peripheral_disable+0x368>)
1000b758:	400b      	ands	r3, r1
1000b75a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b75c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b75e:	e070      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b760:	4a39      	ldr	r2, [pc, #228]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b762:	6911      	ldr	r1, [r2, #16]
1000b764:	4b3a      	ldr	r3, [pc, #232]	; (1000b850 <system_clock_peripheral_disable+0x314>)
1000b766:	400b      	ands	r3, r1
1000b768:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b76a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b76c:	e069      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b76e:	4a36      	ldr	r2, [pc, #216]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b770:	6911      	ldr	r1, [r2, #16]
1000b772:	4b38      	ldr	r3, [pc, #224]	; (1000b854 <system_clock_peripheral_disable+0x318>)
1000b774:	400b      	ands	r3, r1
1000b776:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b77a:	e062      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b77c:	4a32      	ldr	r2, [pc, #200]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b77e:	6911      	ldr	r1, [r2, #16]
1000b780:	4b35      	ldr	r3, [pc, #212]	; (1000b858 <system_clock_peripheral_disable+0x31c>)
1000b782:	400b      	ands	r3, r1
1000b784:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b786:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b788:	e05b      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b78a:	4a2f      	ldr	r2, [pc, #188]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b78c:	6911      	ldr	r1, [r2, #16]
1000b78e:	4b33      	ldr	r3, [pc, #204]	; (1000b85c <system_clock_peripheral_disable+0x320>)
1000b790:	400b      	ands	r3, r1
1000b792:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b794:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b796:	e054      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b798:	4a2b      	ldr	r2, [pc, #172]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b79a:	6911      	ldr	r1, [r2, #16]
1000b79c:	4b30      	ldr	r3, [pc, #192]	; (1000b860 <system_clock_peripheral_disable+0x324>)
1000b79e:	400b      	ands	r3, r1
1000b7a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b7a4:	e04d      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7a6:	4a28      	ldr	r2, [pc, #160]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7a8:	6911      	ldr	r1, [r2, #16]
1000b7aa:	4b2e      	ldr	r3, [pc, #184]	; (1000b864 <system_clock_peripheral_disable+0x328>)
1000b7ac:	400b      	ands	r3, r1
1000b7ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b7b2:	e046      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7b4:	4a24      	ldr	r2, [pc, #144]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7b6:	6911      	ldr	r1, [r2, #16]
1000b7b8:	4b2b      	ldr	r3, [pc, #172]	; (1000b868 <system_clock_peripheral_disable+0x32c>)
1000b7ba:	400b      	ands	r3, r1
1000b7bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b7c0:	e03f      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7c2:	4a21      	ldr	r2, [pc, #132]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7c4:	6911      	ldr	r1, [r2, #16]
1000b7c6:	4b29      	ldr	r3, [pc, #164]	; (1000b86c <system_clock_peripheral_disable+0x330>)
1000b7c8:	400b      	ands	r3, r1
1000b7ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b7ce:	e038      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7d0:	4a1d      	ldr	r2, [pc, #116]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7d2:	6911      	ldr	r1, [r2, #16]
1000b7d4:	4b26      	ldr	r3, [pc, #152]	; (1000b870 <system_clock_peripheral_disable+0x334>)
1000b7d6:	400b      	ands	r3, r1
1000b7d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b7dc:	e031      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7de:	4a1a      	ldr	r2, [pc, #104]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7e0:	6911      	ldr	r1, [r2, #16]
1000b7e2:	4b24      	ldr	r3, [pc, #144]	; (1000b874 <system_clock_peripheral_disable+0x338>)
1000b7e4:	400b      	ands	r3, r1
1000b7e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b7ea:	e02a      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7ec:	4a16      	ldr	r2, [pc, #88]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7ee:	6911      	ldr	r1, [r2, #16]
1000b7f0:	4b21      	ldr	r3, [pc, #132]	; (1000b878 <system_clock_peripheral_disable+0x33c>)
1000b7f2:	400b      	ands	r3, r1
1000b7f4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b7f8:	e023      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b7fa:	4a13      	ldr	r2, [pc, #76]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b7fc:	6911      	ldr	r1, [r2, #16]
1000b7fe:	4b1f      	ldr	r3, [pc, #124]	; (1000b87c <system_clock_peripheral_disable+0x340>)
1000b800:	400b      	ands	r3, r1
1000b802:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b804:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b806:	e01c      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b808:	4a0f      	ldr	r2, [pc, #60]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b80a:	6911      	ldr	r1, [r2, #16]
1000b80c:	4b1c      	ldr	r3, [pc, #112]	; (1000b880 <system_clock_peripheral_disable+0x344>)
1000b80e:	400b      	ands	r3, r1
1000b810:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b812:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b814:	e015      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b816:	4a0c      	ldr	r2, [pc, #48]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b818:	7d13      	ldrb	r3, [r2, #20]
1000b81a:	2101      	movs	r1, #1
1000b81c:	438b      	bics	r3, r1
1000b81e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b820:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b822:	e00e      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b824:	4a08      	ldr	r2, [pc, #32]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b826:	7d13      	ldrb	r3, [r2, #20]
1000b828:	2102      	movs	r1, #2
1000b82a:	438b      	bics	r3, r1
1000b82c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b82e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b830:	e007      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b832:	4a05      	ldr	r2, [pc, #20]	; (1000b848 <system_clock_peripheral_disable+0x30c>)
1000b834:	7d13      	ldrb	r3, [r2, #20]
1000b836:	2104      	movs	r1, #4
1000b838:	438b      	bics	r3, r1
1000b83a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b83c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b83e:	e000      	b.n	1000b842 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b840:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b842:	bd00      	pop	{pc}
1000b844:	1001765c 	.word	0x1001765c
1000b848:	4000b000 	.word	0x4000b000
1000b84c:	fffffeff 	.word	0xfffffeff
1000b850:	fffff7ff 	.word	0xfffff7ff
1000b854:	ffffefff 	.word	0xffffefff
1000b858:	ffffdfff 	.word	0xffffdfff
1000b85c:	ffffbfff 	.word	0xffffbfff
1000b860:	ffff7fff 	.word	0xffff7fff
1000b864:	fffeffff 	.word	0xfffeffff
1000b868:	fffdffff 	.word	0xfffdffff
1000b86c:	fffbffff 	.word	0xfffbffff
1000b870:	fff7ffff 	.word	0xfff7ffff
1000b874:	ffefffff 	.word	0xffefffff
1000b878:	ffdfffff 	.word	0xffdfffff
1000b87c:	ffbfffff 	.word	0xffbfffff
1000b880:	ff7fffff 	.word	0xff7fffff
1000b884:	feffffff 	.word	0xfeffffff
1000b888:	fdffffff 	.word	0xfdffffff
1000b88c:	fbffffff 	.word	0xfbffffff
1000b890:	f7ffffff 	.word	0xf7ffffff
1000b894:	efffffff 	.word	0xefffffff
1000b898:	dfffffff 	.word	0xdfffffff
1000b89c:	bfffffff 	.word	0xbfffffff
1000b8a0:	fffffdff 	.word	0xfffffdff
1000b8a4:	fffffbff 	.word	0xfffffbff

1000b8a8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b8a8:	b500      	push	{lr}
	switch (peripheral) {
1000b8aa:	2843      	cmp	r0, #67	; 0x43
1000b8ac:	d900      	bls.n	1000b8b0 <system_peripheral_reset+0x8>
1000b8ae:	e223      	b.n	1000bcf8 <system_peripheral_reset+0x450>
1000b8b0:	0080      	lsls	r0, r0, #2
1000b8b2:	4be0      	ldr	r3, [pc, #896]	; (1000bc34 <system_peripheral_reset+0x38c>)
1000b8b4:	581b      	ldr	r3, [r3, r0]
1000b8b6:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8b8:	4bdf      	ldr	r3, [pc, #892]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b8ba:	6859      	ldr	r1, [r3, #4]
1000b8bc:	2202      	movs	r2, #2
1000b8be:	4391      	bics	r1, r2
1000b8c0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8c2:	6859      	ldr	r1, [r3, #4]
1000b8c4:	430a      	orrs	r2, r1
1000b8c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8c8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b8ca:	e216      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8cc:	4bda      	ldr	r3, [pc, #872]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b8ce:	6859      	ldr	r1, [r3, #4]
1000b8d0:	2204      	movs	r2, #4
1000b8d2:	4391      	bics	r1, r2
1000b8d4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8d6:	6859      	ldr	r1, [r3, #4]
1000b8d8:	430a      	orrs	r2, r1
1000b8da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8dc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b8de:	e20c      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8e0:	4bd5      	ldr	r3, [pc, #852]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b8e2:	6859      	ldr	r1, [r3, #4]
1000b8e4:	2208      	movs	r2, #8
1000b8e6:	4391      	bics	r1, r2
1000b8e8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8ea:	6859      	ldr	r1, [r3, #4]
1000b8ec:	430a      	orrs	r2, r1
1000b8ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b8f2:	e202      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8f4:	4bd0      	ldr	r3, [pc, #832]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b8f6:	6859      	ldr	r1, [r3, #4]
1000b8f8:	2210      	movs	r2, #16
1000b8fa:	4391      	bics	r1, r2
1000b8fc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8fe:	6859      	ldr	r1, [r3, #4]
1000b900:	430a      	orrs	r2, r1
1000b902:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b904:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b906:	e1f8      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b908:	4bcb      	ldr	r3, [pc, #812]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b90a:	6859      	ldr	r1, [r3, #4]
1000b90c:	2220      	movs	r2, #32
1000b90e:	4391      	bics	r1, r2
1000b910:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b912:	6859      	ldr	r1, [r3, #4]
1000b914:	430a      	orrs	r2, r1
1000b916:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b918:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b91a:	e1ee      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b91c:	4bc6      	ldr	r3, [pc, #792]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b91e:	6859      	ldr	r1, [r3, #4]
1000b920:	2240      	movs	r2, #64	; 0x40
1000b922:	4391      	bics	r1, r2
1000b924:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b926:	6859      	ldr	r1, [r3, #4]
1000b928:	430a      	orrs	r2, r1
1000b92a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b92c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b92e:	e1e4      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b930:	4bc1      	ldr	r3, [pc, #772]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b932:	6859      	ldr	r1, [r3, #4]
1000b934:	2280      	movs	r2, #128	; 0x80
1000b936:	4391      	bics	r1, r2
1000b938:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b93a:	6859      	ldr	r1, [r3, #4]
1000b93c:	430a      	orrs	r2, r1
1000b93e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b940:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b942:	e1da      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b944:	4bbc      	ldr	r3, [pc, #752]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b946:	6859      	ldr	r1, [r3, #4]
1000b948:	4abc      	ldr	r2, [pc, #752]	; (1000bc3c <system_peripheral_reset+0x394>)
1000b94a:	400a      	ands	r2, r1
1000b94c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b94e:	685a      	ldr	r2, [r3, #4]
1000b950:	2180      	movs	r1, #128	; 0x80
1000b952:	0049      	lsls	r1, r1, #1
1000b954:	430a      	orrs	r2, r1
1000b956:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b958:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b95a:	e1ce      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b95c:	4bb6      	ldr	r3, [pc, #728]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b95e:	6859      	ldr	r1, [r3, #4]
1000b960:	4ab7      	ldr	r2, [pc, #732]	; (1000bc40 <system_peripheral_reset+0x398>)
1000b962:	400a      	ands	r2, r1
1000b964:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b966:	685a      	ldr	r2, [r3, #4]
1000b968:	2180      	movs	r1, #128	; 0x80
1000b96a:	0089      	lsls	r1, r1, #2
1000b96c:	430a      	orrs	r2, r1
1000b96e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b970:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b972:	e1c2      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b974:	4bb0      	ldr	r3, [pc, #704]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b976:	6859      	ldr	r1, [r3, #4]
1000b978:	4ab2      	ldr	r2, [pc, #712]	; (1000bc44 <system_peripheral_reset+0x39c>)
1000b97a:	400a      	ands	r2, r1
1000b97c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b97e:	685a      	ldr	r2, [r3, #4]
1000b980:	2180      	movs	r1, #128	; 0x80
1000b982:	00c9      	lsls	r1, r1, #3
1000b984:	430a      	orrs	r2, r1
1000b986:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b988:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b98a:	e1b6      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b98c:	4baa      	ldr	r3, [pc, #680]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b98e:	6859      	ldr	r1, [r3, #4]
1000b990:	4aad      	ldr	r2, [pc, #692]	; (1000bc48 <system_peripheral_reset+0x3a0>)
1000b992:	400a      	ands	r2, r1
1000b994:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b996:	685a      	ldr	r2, [r3, #4]
1000b998:	2180      	movs	r1, #128	; 0x80
1000b99a:	0109      	lsls	r1, r1, #4
1000b99c:	430a      	orrs	r2, r1
1000b99e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b9a2:	e1aa      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9a4:	4ba4      	ldr	r3, [pc, #656]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b9a6:	6859      	ldr	r1, [r3, #4]
1000b9a8:	4aa8      	ldr	r2, [pc, #672]	; (1000bc4c <system_peripheral_reset+0x3a4>)
1000b9aa:	400a      	ands	r2, r1
1000b9ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9ae:	685a      	ldr	r2, [r3, #4]
1000b9b0:	2180      	movs	r1, #128	; 0x80
1000b9b2:	0149      	lsls	r1, r1, #5
1000b9b4:	430a      	orrs	r2, r1
1000b9b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9b8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b9ba:	e19e      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9bc:	4b9e      	ldr	r3, [pc, #632]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b9be:	6859      	ldr	r1, [r3, #4]
1000b9c0:	4aa3      	ldr	r2, [pc, #652]	; (1000bc50 <system_peripheral_reset+0x3a8>)
1000b9c2:	400a      	ands	r2, r1
1000b9c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9c6:	685a      	ldr	r2, [r3, #4]
1000b9c8:	2180      	movs	r1, #128	; 0x80
1000b9ca:	0189      	lsls	r1, r1, #6
1000b9cc:	430a      	orrs	r2, r1
1000b9ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9d0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b9d2:	e192      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9d4:	4b98      	ldr	r3, [pc, #608]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b9d6:	6859      	ldr	r1, [r3, #4]
1000b9d8:	4a9e      	ldr	r2, [pc, #632]	; (1000bc54 <system_peripheral_reset+0x3ac>)
1000b9da:	400a      	ands	r2, r1
1000b9dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9de:	685a      	ldr	r2, [r3, #4]
1000b9e0:	2180      	movs	r1, #128	; 0x80
1000b9e2:	01c9      	lsls	r1, r1, #7
1000b9e4:	430a      	orrs	r2, r1
1000b9e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9e8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b9ea:	e186      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9ec:	4b92      	ldr	r3, [pc, #584]	; (1000bc38 <system_peripheral_reset+0x390>)
1000b9ee:	6859      	ldr	r1, [r3, #4]
1000b9f0:	4a99      	ldr	r2, [pc, #612]	; (1000bc58 <system_peripheral_reset+0x3b0>)
1000b9f2:	400a      	ands	r2, r1
1000b9f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9f6:	685a      	ldr	r2, [r3, #4]
1000b9f8:	2180      	movs	r1, #128	; 0x80
1000b9fa:	0209      	lsls	r1, r1, #8
1000b9fc:	430a      	orrs	r2, r1
1000b9fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba00:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000ba02:	e17a      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba04:	4b8c      	ldr	r3, [pc, #560]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba06:	6859      	ldr	r1, [r3, #4]
1000ba08:	4a94      	ldr	r2, [pc, #592]	; (1000bc5c <system_peripheral_reset+0x3b4>)
1000ba0a:	400a      	ands	r2, r1
1000ba0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba0e:	685a      	ldr	r2, [r3, #4]
1000ba10:	2180      	movs	r1, #128	; 0x80
1000ba12:	0249      	lsls	r1, r1, #9
1000ba14:	430a      	orrs	r2, r1
1000ba16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba18:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000ba1a:	e16e      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba1c:	4b86      	ldr	r3, [pc, #536]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba1e:	6859      	ldr	r1, [r3, #4]
1000ba20:	4a8f      	ldr	r2, [pc, #572]	; (1000bc60 <system_peripheral_reset+0x3b8>)
1000ba22:	400a      	ands	r2, r1
1000ba24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba26:	685a      	ldr	r2, [r3, #4]
1000ba28:	2180      	movs	r1, #128	; 0x80
1000ba2a:	0289      	lsls	r1, r1, #10
1000ba2c:	430a      	orrs	r2, r1
1000ba2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba30:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ba32:	e162      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba34:	4b80      	ldr	r3, [pc, #512]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba36:	6859      	ldr	r1, [r3, #4]
1000ba38:	4a8a      	ldr	r2, [pc, #552]	; (1000bc64 <system_peripheral_reset+0x3bc>)
1000ba3a:	400a      	ands	r2, r1
1000ba3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba3e:	685a      	ldr	r2, [r3, #4]
1000ba40:	2180      	movs	r1, #128	; 0x80
1000ba42:	02c9      	lsls	r1, r1, #11
1000ba44:	430a      	orrs	r2, r1
1000ba46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba48:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000ba4a:	e156      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba4c:	4b7a      	ldr	r3, [pc, #488]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba4e:	6859      	ldr	r1, [r3, #4]
1000ba50:	4a85      	ldr	r2, [pc, #532]	; (1000bc68 <system_peripheral_reset+0x3c0>)
1000ba52:	400a      	ands	r2, r1
1000ba54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba56:	685a      	ldr	r2, [r3, #4]
1000ba58:	2180      	movs	r1, #128	; 0x80
1000ba5a:	0309      	lsls	r1, r1, #12
1000ba5c:	430a      	orrs	r2, r1
1000ba5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba60:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000ba62:	e14a      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba64:	4b74      	ldr	r3, [pc, #464]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba66:	6859      	ldr	r1, [r3, #4]
1000ba68:	4a80      	ldr	r2, [pc, #512]	; (1000bc6c <system_peripheral_reset+0x3c4>)
1000ba6a:	400a      	ands	r2, r1
1000ba6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba6e:	685a      	ldr	r2, [r3, #4]
1000ba70:	2180      	movs	r1, #128	; 0x80
1000ba72:	0349      	lsls	r1, r1, #13
1000ba74:	430a      	orrs	r2, r1
1000ba76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba78:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000ba7a:	e13e      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba7c:	4b6e      	ldr	r3, [pc, #440]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba7e:	6859      	ldr	r1, [r3, #4]
1000ba80:	4a7b      	ldr	r2, [pc, #492]	; (1000bc70 <system_peripheral_reset+0x3c8>)
1000ba82:	400a      	ands	r2, r1
1000ba84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba86:	685a      	ldr	r2, [r3, #4]
1000ba88:	2180      	movs	r1, #128	; 0x80
1000ba8a:	0389      	lsls	r1, r1, #14
1000ba8c:	430a      	orrs	r2, r1
1000ba8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba90:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000ba92:	e132      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba94:	4b68      	ldr	r3, [pc, #416]	; (1000bc38 <system_peripheral_reset+0x390>)
1000ba96:	6859      	ldr	r1, [r3, #4]
1000ba98:	4a76      	ldr	r2, [pc, #472]	; (1000bc74 <system_peripheral_reset+0x3cc>)
1000ba9a:	400a      	ands	r2, r1
1000ba9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba9e:	685a      	ldr	r2, [r3, #4]
1000baa0:	2180      	movs	r1, #128	; 0x80
1000baa2:	03c9      	lsls	r1, r1, #15
1000baa4:	430a      	orrs	r2, r1
1000baa6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baa8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000baaa:	e126      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000baac:	4b62      	ldr	r3, [pc, #392]	; (1000bc38 <system_peripheral_reset+0x390>)
1000baae:	6859      	ldr	r1, [r3, #4]
1000bab0:	4a71      	ldr	r2, [pc, #452]	; (1000bc78 <system_peripheral_reset+0x3d0>)
1000bab2:	400a      	ands	r2, r1
1000bab4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bab6:	685a      	ldr	r2, [r3, #4]
1000bab8:	2180      	movs	r1, #128	; 0x80
1000baba:	0409      	lsls	r1, r1, #16
1000babc:	430a      	orrs	r2, r1
1000babe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000bac2:	e11a      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bac4:	4b5c      	ldr	r3, [pc, #368]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bac6:	6859      	ldr	r1, [r3, #4]
1000bac8:	4a6c      	ldr	r2, [pc, #432]	; (1000bc7c <system_peripheral_reset+0x3d4>)
1000baca:	400a      	ands	r2, r1
1000bacc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bace:	685a      	ldr	r2, [r3, #4]
1000bad0:	2180      	movs	r1, #128	; 0x80
1000bad2:	0449      	lsls	r1, r1, #17
1000bad4:	430a      	orrs	r2, r1
1000bad6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bad8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000bada:	e10e      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000badc:	4b56      	ldr	r3, [pc, #344]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bade:	6859      	ldr	r1, [r3, #4]
1000bae0:	4a67      	ldr	r2, [pc, #412]	; (1000bc80 <system_peripheral_reset+0x3d8>)
1000bae2:	400a      	ands	r2, r1
1000bae4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bae6:	685a      	ldr	r2, [r3, #4]
1000bae8:	2180      	movs	r1, #128	; 0x80
1000baea:	0489      	lsls	r1, r1, #18
1000baec:	430a      	orrs	r2, r1
1000baee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000baf2:	e102      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000baf4:	4b50      	ldr	r3, [pc, #320]	; (1000bc38 <system_peripheral_reset+0x390>)
1000baf6:	6859      	ldr	r1, [r3, #4]
1000baf8:	4a62      	ldr	r2, [pc, #392]	; (1000bc84 <system_peripheral_reset+0x3dc>)
1000bafa:	400a      	ands	r2, r1
1000bafc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bafe:	685a      	ldr	r2, [r3, #4]
1000bb00:	2180      	movs	r1, #128	; 0x80
1000bb02:	04c9      	lsls	r1, r1, #19
1000bb04:	430a      	orrs	r2, r1
1000bb06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb08:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000bb0a:	e0f6      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bb0c:	4b4a      	ldr	r3, [pc, #296]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb0e:	6859      	ldr	r1, [r3, #4]
1000bb10:	4a5d      	ldr	r2, [pc, #372]	; (1000bc88 <system_peripheral_reset+0x3e0>)
1000bb12:	400a      	ands	r2, r1
1000bb14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bb16:	685a      	ldr	r2, [r3, #4]
1000bb18:	2180      	movs	r1, #128	; 0x80
1000bb1a:	0509      	lsls	r1, r1, #20
1000bb1c:	430a      	orrs	r2, r1
1000bb1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb20:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000bb22:	e0ea      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bb24:	4b44      	ldr	r3, [pc, #272]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb26:	6859      	ldr	r1, [r3, #4]
1000bb28:	4a58      	ldr	r2, [pc, #352]	; (1000bc8c <system_peripheral_reset+0x3e4>)
1000bb2a:	400a      	ands	r2, r1
1000bb2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bb2e:	685a      	ldr	r2, [r3, #4]
1000bb30:	2180      	movs	r1, #128	; 0x80
1000bb32:	0549      	lsls	r1, r1, #21
1000bb34:	430a      	orrs	r2, r1
1000bb36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb38:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000bb3a:	e0de      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bb3c:	4b3e      	ldr	r3, [pc, #248]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb3e:	6859      	ldr	r1, [r3, #4]
1000bb40:	4a53      	ldr	r2, [pc, #332]	; (1000bc90 <system_peripheral_reset+0x3e8>)
1000bb42:	400a      	ands	r2, r1
1000bb44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bb46:	685a      	ldr	r2, [r3, #4]
1000bb48:	2180      	movs	r1, #128	; 0x80
1000bb4a:	0589      	lsls	r1, r1, #22
1000bb4c:	430a      	orrs	r2, r1
1000bb4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb50:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000bb52:	e0d2      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bb54:	4b38      	ldr	r3, [pc, #224]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb56:	6859      	ldr	r1, [r3, #4]
1000bb58:	4a4e      	ldr	r2, [pc, #312]	; (1000bc94 <system_peripheral_reset+0x3ec>)
1000bb5a:	400a      	ands	r2, r1
1000bb5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bb5e:	685a      	ldr	r2, [r3, #4]
1000bb60:	2180      	movs	r1, #128	; 0x80
1000bb62:	05c9      	lsls	r1, r1, #23
1000bb64:	430a      	orrs	r2, r1
1000bb66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb68:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000bb6a:	e0c6      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bb6c:	4a32      	ldr	r2, [pc, #200]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb6e:	6853      	ldr	r3, [r2, #4]
1000bb70:	005b      	lsls	r3, r3, #1
1000bb72:	085b      	lsrs	r3, r3, #1
1000bb74:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bb76:	6853      	ldr	r3, [r2, #4]
1000bb78:	2180      	movs	r1, #128	; 0x80
1000bb7a:	0609      	lsls	r1, r1, #24
1000bb7c:	430b      	orrs	r3, r1
1000bb7e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb80:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000bb82:	e0ba      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb84:	4b2c      	ldr	r3, [pc, #176]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb86:	891a      	ldrh	r2, [r3, #8]
1000bb88:	2101      	movs	r1, #1
1000bb8a:	438a      	bics	r2, r1
1000bb8c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb8e:	8919      	ldrh	r1, [r3, #8]
1000bb90:	2201      	movs	r2, #1
1000bb92:	430a      	orrs	r2, r1
1000bb94:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb96:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000bb98:	e0af      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb9a:	4b27      	ldr	r3, [pc, #156]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bb9c:	891a      	ldrh	r2, [r3, #8]
1000bb9e:	2102      	movs	r1, #2
1000bba0:	438a      	bics	r2, r1
1000bba2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bba4:	8919      	ldrh	r1, [r3, #8]
1000bba6:	2202      	movs	r2, #2
1000bba8:	430a      	orrs	r2, r1
1000bbaa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbac:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000bbae:	e0a4      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbb0:	4b21      	ldr	r3, [pc, #132]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bbb2:	891a      	ldrh	r2, [r3, #8]
1000bbb4:	2104      	movs	r1, #4
1000bbb6:	438a      	bics	r2, r1
1000bbb8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbba:	8919      	ldrh	r1, [r3, #8]
1000bbbc:	2204      	movs	r2, #4
1000bbbe:	430a      	orrs	r2, r1
1000bbc0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc2:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000bbc4:	e099      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbc6:	4b1c      	ldr	r3, [pc, #112]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bbc8:	891a      	ldrh	r2, [r3, #8]
1000bbca:	2108      	movs	r1, #8
1000bbcc:	438a      	bics	r2, r1
1000bbce:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbd0:	8919      	ldrh	r1, [r3, #8]
1000bbd2:	2208      	movs	r2, #8
1000bbd4:	430a      	orrs	r2, r1
1000bbd6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbd8:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000bbda:	e08e      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbdc:	4b16      	ldr	r3, [pc, #88]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bbde:	891a      	ldrh	r2, [r3, #8]
1000bbe0:	2110      	movs	r1, #16
1000bbe2:	438a      	bics	r2, r1
1000bbe4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbe6:	8919      	ldrh	r1, [r3, #8]
1000bbe8:	2210      	movs	r2, #16
1000bbea:	430a      	orrs	r2, r1
1000bbec:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbee:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000bbf0:	e083      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbf2:	4b11      	ldr	r3, [pc, #68]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bbf4:	891a      	ldrh	r2, [r3, #8]
1000bbf6:	2120      	movs	r1, #32
1000bbf8:	438a      	bics	r2, r1
1000bbfa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbfc:	8919      	ldrh	r1, [r3, #8]
1000bbfe:	2220      	movs	r2, #32
1000bc00:	430a      	orrs	r2, r1
1000bc02:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc04:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000bc06:	e078      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bc08:	4b0b      	ldr	r3, [pc, #44]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bc0a:	891a      	ldrh	r2, [r3, #8]
1000bc0c:	2140      	movs	r1, #64	; 0x40
1000bc0e:	438a      	bics	r2, r1
1000bc10:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bc12:	8919      	ldrh	r1, [r3, #8]
1000bc14:	2240      	movs	r2, #64	; 0x40
1000bc16:	430a      	orrs	r2, r1
1000bc18:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc1a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000bc1c:	e06d      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bc1e:	4b06      	ldr	r3, [pc, #24]	; (1000bc38 <system_peripheral_reset+0x390>)
1000bc20:	891a      	ldrh	r2, [r3, #8]
1000bc22:	2180      	movs	r1, #128	; 0x80
1000bc24:	438a      	bics	r2, r1
1000bc26:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bc28:	8919      	ldrh	r1, [r3, #8]
1000bc2a:	2280      	movs	r2, #128	; 0x80
1000bc2c:	430a      	orrs	r2, r1
1000bc2e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc30:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000bc32:	e062      	b.n	1000bcfa <system_peripheral_reset+0x452>
1000bc34:	10017734 	.word	0x10017734
1000bc38:	4000b000 	.word	0x4000b000
1000bc3c:	fffffeff 	.word	0xfffffeff
1000bc40:	fffffdff 	.word	0xfffffdff
1000bc44:	fffffbff 	.word	0xfffffbff
1000bc48:	fffff7ff 	.word	0xfffff7ff
1000bc4c:	ffffefff 	.word	0xffffefff
1000bc50:	ffffdfff 	.word	0xffffdfff
1000bc54:	ffffbfff 	.word	0xffffbfff
1000bc58:	ffff7fff 	.word	0xffff7fff
1000bc5c:	fffeffff 	.word	0xfffeffff
1000bc60:	fffdffff 	.word	0xfffdffff
1000bc64:	fffbffff 	.word	0xfffbffff
1000bc68:	fff7ffff 	.word	0xfff7ffff
1000bc6c:	ffefffff 	.word	0xffefffff
1000bc70:	ffdfffff 	.word	0xffdfffff
1000bc74:	ffbfffff 	.word	0xffbfffff
1000bc78:	ff7fffff 	.word	0xff7fffff
1000bc7c:	feffffff 	.word	0xfeffffff
1000bc80:	fdffffff 	.word	0xfdffffff
1000bc84:	fbffffff 	.word	0xfbffffff
1000bc88:	f7ffffff 	.word	0xf7ffffff
1000bc8c:	efffffff 	.word	0xefffffff
1000bc90:	dfffffff 	.word	0xdfffffff
1000bc94:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bc98:	4b18      	ldr	r3, [pc, #96]	; (1000bcfc <system_peripheral_reset+0x454>)
1000bc9a:	8919      	ldrh	r1, [r3, #8]
1000bc9c:	4a18      	ldr	r2, [pc, #96]	; (1000bd00 <system_peripheral_reset+0x458>)
1000bc9e:	400a      	ands	r2, r1
1000bca0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bca2:	8919      	ldrh	r1, [r3, #8]
1000bca4:	2280      	movs	r2, #128	; 0x80
1000bca6:	0052      	lsls	r2, r2, #1
1000bca8:	430a      	orrs	r2, r1
1000bcaa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000bcae:	e024      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bcb0:	4b12      	ldr	r3, [pc, #72]	; (1000bcfc <system_peripheral_reset+0x454>)
1000bcb2:	8919      	ldrh	r1, [r3, #8]
1000bcb4:	4a13      	ldr	r2, [pc, #76]	; (1000bd04 <system_peripheral_reset+0x45c>)
1000bcb6:	400a      	ands	r2, r1
1000bcb8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bcba:	8919      	ldrh	r1, [r3, #8]
1000bcbc:	2280      	movs	r2, #128	; 0x80
1000bcbe:	0092      	lsls	r2, r2, #2
1000bcc0:	430a      	orrs	r2, r1
1000bcc2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcc4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bcc6:	e018      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bcc8:	4b0c      	ldr	r3, [pc, #48]	; (1000bcfc <system_peripheral_reset+0x454>)
1000bcca:	8919      	ldrh	r1, [r3, #8]
1000bccc:	4a0e      	ldr	r2, [pc, #56]	; (1000bd08 <system_peripheral_reset+0x460>)
1000bcce:	400a      	ands	r2, r1
1000bcd0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bcd2:	8919      	ldrh	r1, [r3, #8]
1000bcd4:	2280      	movs	r2, #128	; 0x80
1000bcd6:	00d2      	lsls	r2, r2, #3
1000bcd8:	430a      	orrs	r2, r1
1000bcda:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcdc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bcde:	e00c      	b.n	1000bcfa <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bce0:	4b06      	ldr	r3, [pc, #24]	; (1000bcfc <system_peripheral_reset+0x454>)
1000bce2:	8919      	ldrh	r1, [r3, #8]
1000bce4:	4a09      	ldr	r2, [pc, #36]	; (1000bd0c <system_peripheral_reset+0x464>)
1000bce6:	400a      	ands	r2, r1
1000bce8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bcea:	8919      	ldrh	r1, [r3, #8]
1000bcec:	2280      	movs	r2, #128	; 0x80
1000bcee:	0112      	lsls	r2, r2, #4
1000bcf0:	430a      	orrs	r2, r1
1000bcf2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000bcf6:	e000      	b.n	1000bcfa <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bcf8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bcfa:	bd00      	pop	{pc}
1000bcfc:	4000b000 	.word	0x4000b000
1000bd00:	fffffeff 	.word	0xfffffeff
1000bd04:	fffffdff 	.word	0xfffffdff
1000bd08:	fffffbff 	.word	0xfffffbff
1000bd0c:	fffff7ff 	.word	0xfffff7ff

1000bd10 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000bd10:	2380      	movs	r3, #128	; 0x80
1000bd12:	04db      	lsls	r3, r3, #19
1000bd14:	469c      	mov	ip, r3
1000bd16:	4460      	add	r0, ip
1000bd18:	0080      	lsls	r0, r0, #2
1000bd1a:	6001      	str	r1, [r0, #0]
}
1000bd1c:	4770      	bx	lr
1000bd1e:	46c0      	nop			; (mov r8, r8)

1000bd20 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000bd20:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bd22:	4b20      	ldr	r3, [pc, #128]	; (1000bda4 <uart_rx0_isr_handler+0x84>)
1000bd24:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bd26:	6823      	ldr	r3, [r4, #0]
1000bd28:	7d1d      	ldrb	r5, [r3, #20]
1000bd2a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bd2c:	066a      	lsls	r2, r5, #25
1000bd2e:	d513      	bpl.n	1000bd58 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bd30:	211e      	movs	r1, #30
1000bd32:	2222      	movs	r2, #34	; 0x22
1000bd34:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bd36:	7e1a      	ldrb	r2, [r3, #24]
1000bd38:	3123      	adds	r1, #35	; 0x23
1000bd3a:	438a      	bics	r2, r1
1000bd3c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bd3e:	2321      	movs	r3, #33	; 0x21
1000bd40:	5ce3      	ldrb	r3, [r4, r3]
1000bd42:	071b      	lsls	r3, r3, #28
1000bd44:	d506      	bpl.n	1000bd54 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bd46:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bd48:	5ce3      	ldrb	r3, [r4, r3]
1000bd4a:	071b      	lsls	r3, r3, #28
1000bd4c:	d502      	bpl.n	1000bd54 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bd4e:	0020      	movs	r0, r4
1000bd50:	6923      	ldr	r3, [r4, #16]
1000bd52:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bd54:	6823      	ldr	r3, [r4, #0]
1000bd56:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bd58:	07eb      	lsls	r3, r5, #31
1000bd5a:	d522      	bpl.n	1000bda2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bd5c:	6823      	ldr	r3, [r4, #0]
1000bd5e:	7c1b      	ldrb	r3, [r3, #16]
1000bd60:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bd62:	6962      	ldr	r2, [r4, #20]
1000bd64:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bd66:	6963      	ldr	r3, [r4, #20]
1000bd68:	3301      	adds	r3, #1
1000bd6a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bd6c:	8ba3      	ldrh	r3, [r4, #28]
1000bd6e:	3b01      	subs	r3, #1
1000bd70:	b29b      	uxth	r3, r3
1000bd72:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bd74:	8ba3      	ldrh	r3, [r4, #28]
1000bd76:	b29b      	uxth	r3, r3
1000bd78:	2b00      	cmp	r3, #0
1000bd7a:	d112      	bne.n	1000bda2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd7c:	3321      	adds	r3, #33	; 0x21
1000bd7e:	5ce3      	ldrb	r3, [r4, r3]
1000bd80:	075b      	lsls	r3, r3, #29
1000bd82:	d50e      	bpl.n	1000bda2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bd84:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd86:	5ce3      	ldrb	r3, [r4, r3]
1000bd88:	075b      	lsls	r3, r3, #29
1000bd8a:	d50a      	bpl.n	1000bda2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bd8c:	2200      	movs	r2, #0
1000bd8e:	2322      	movs	r3, #34	; 0x22
1000bd90:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bd92:	6822      	ldr	r2, [r4, #0]
1000bd94:	7e13      	ldrb	r3, [r2, #24]
1000bd96:	2101      	movs	r1, #1
1000bd98:	438b      	bics	r3, r1
1000bd9a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bd9c:	68e3      	ldr	r3, [r4, #12]
1000bd9e:	0020      	movs	r0, r4
1000bda0:	4798      	blx	r3
			}
		}
	}
}
1000bda2:	bd70      	pop	{r4, r5, r6, pc}
1000bda4:	1001a544 	.word	0x1001a544

1000bda8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000bda8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bdaa:	4b21      	ldr	r3, [pc, #132]	; (1000be30 <uart_tx0_isr_handler+0x88>)
1000bdac:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bdae:	6823      	ldr	r3, [r4, #0]
1000bdb0:	791d      	ldrb	r5, [r3, #4]
1000bdb2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bdb4:	07ea      	lsls	r2, r5, #31
1000bdb6:	d517      	bpl.n	1000bde8 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bdb8:	69a2      	ldr	r2, [r4, #24]
1000bdba:	7811      	ldrb	r1, [r2, #0]
1000bdbc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bdbe:	3201      	adds	r2, #1
1000bdc0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bdc2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bdc4:	8be3      	ldrh	r3, [r4, #30]
1000bdc6:	3b01      	subs	r3, #1
1000bdc8:	b29b      	uxth	r3, r3
1000bdca:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bdcc:	8be3      	ldrh	r3, [r4, #30]
1000bdce:	b29b      	uxth	r3, r3
1000bdd0:	2b00      	cmp	r3, #0
1000bdd2:	d109      	bne.n	1000bde8 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bdd4:	6822      	ldr	r2, [r4, #0]
1000bdd6:	7a13      	ldrb	r3, [r2, #8]
1000bdd8:	2101      	movs	r1, #1
1000bdda:	438b      	bics	r3, r1
1000bddc:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bdde:	6822      	ldr	r2, [r4, #0]
1000bde0:	7a11      	ldrb	r1, [r2, #8]
1000bde2:	2310      	movs	r3, #16
1000bde4:	430b      	orrs	r3, r1
1000bde6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bde8:	06eb      	lsls	r3, r5, #27
1000bdea:	d512      	bpl.n	1000be12 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bdec:	2321      	movs	r3, #33	; 0x21
1000bdee:	5ce3      	ldrb	r3, [r4, r3]
1000bdf0:	07db      	lsls	r3, r3, #31
1000bdf2:	d50e      	bpl.n	1000be12 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bdf4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bdf6:	5ce3      	ldrb	r3, [r4, r3]
1000bdf8:	07db      	lsls	r3, r3, #31
1000bdfa:	d50a      	bpl.n	1000be12 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bdfc:	2200      	movs	r2, #0
1000bdfe:	2322      	movs	r3, #34	; 0x22
1000be00:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000be02:	6822      	ldr	r2, [r4, #0]
1000be04:	7a13      	ldrb	r3, [r2, #8]
1000be06:	2110      	movs	r1, #16
1000be08:	438b      	bics	r3, r1
1000be0a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000be0c:	0020      	movs	r0, r4
1000be0e:	6863      	ldr	r3, [r4, #4]
1000be10:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000be12:	06ab      	lsls	r3, r5, #26
1000be14:	d50a      	bpl.n	1000be2c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000be16:	2321      	movs	r3, #33	; 0x21
1000be18:	5ce3      	ldrb	r3, [r4, r3]
1000be1a:	079b      	lsls	r3, r3, #30
1000be1c:	d506      	bpl.n	1000be2c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000be1e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000be20:	5ce3      	ldrb	r3, [r4, r3]
1000be22:	079b      	lsls	r3, r3, #30
1000be24:	d502      	bpl.n	1000be2c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000be26:	68a3      	ldr	r3, [r4, #8]
1000be28:	0020      	movs	r0, r4
1000be2a:	4798      	blx	r3
		}

	}
}
1000be2c:	bd70      	pop	{r4, r5, r6, pc}
1000be2e:	46c0      	nop			; (mov r8, r8)
1000be30:	1001a544 	.word	0x1001a544

1000be34 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000be34:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000be36:	4b20      	ldr	r3, [pc, #128]	; (1000beb8 <uart_rx1_isr_handler+0x84>)
1000be38:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000be3a:	6823      	ldr	r3, [r4, #0]
1000be3c:	7d1d      	ldrb	r5, [r3, #20]
1000be3e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000be40:	066a      	lsls	r2, r5, #25
1000be42:	d513      	bpl.n	1000be6c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000be44:	211e      	movs	r1, #30
1000be46:	2222      	movs	r2, #34	; 0x22
1000be48:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000be4a:	7e1a      	ldrb	r2, [r3, #24]
1000be4c:	3123      	adds	r1, #35	; 0x23
1000be4e:	438a      	bics	r2, r1
1000be50:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000be52:	2321      	movs	r3, #33	; 0x21
1000be54:	5ce3      	ldrb	r3, [r4, r3]
1000be56:	071b      	lsls	r3, r3, #28
1000be58:	d506      	bpl.n	1000be68 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000be5a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000be5c:	5ce3      	ldrb	r3, [r4, r3]
1000be5e:	071b      	lsls	r3, r3, #28
1000be60:	d502      	bpl.n	1000be68 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000be62:	0020      	movs	r0, r4
1000be64:	6923      	ldr	r3, [r4, #16]
1000be66:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000be68:	6823      	ldr	r3, [r4, #0]
1000be6a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000be6c:	07eb      	lsls	r3, r5, #31
1000be6e:	d522      	bpl.n	1000beb6 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000be70:	6823      	ldr	r3, [r4, #0]
1000be72:	7c1b      	ldrb	r3, [r3, #16]
1000be74:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000be76:	6962      	ldr	r2, [r4, #20]
1000be78:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000be7a:	6963      	ldr	r3, [r4, #20]
1000be7c:	3301      	adds	r3, #1
1000be7e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000be80:	8ba3      	ldrh	r3, [r4, #28]
1000be82:	3b01      	subs	r3, #1
1000be84:	b29b      	uxth	r3, r3
1000be86:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000be88:	8ba3      	ldrh	r3, [r4, #28]
1000be8a:	b29b      	uxth	r3, r3
1000be8c:	2b00      	cmp	r3, #0
1000be8e:	d112      	bne.n	1000beb6 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000be90:	3321      	adds	r3, #33	; 0x21
1000be92:	5ce3      	ldrb	r3, [r4, r3]
1000be94:	075b      	lsls	r3, r3, #29
1000be96:	d50e      	bpl.n	1000beb6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000be98:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000be9a:	5ce3      	ldrb	r3, [r4, r3]
1000be9c:	075b      	lsls	r3, r3, #29
1000be9e:	d50a      	bpl.n	1000beb6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bea0:	2200      	movs	r2, #0
1000bea2:	2322      	movs	r3, #34	; 0x22
1000bea4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bea6:	6822      	ldr	r2, [r4, #0]
1000bea8:	7e13      	ldrb	r3, [r2, #24]
1000beaa:	2101      	movs	r1, #1
1000beac:	438b      	bics	r3, r1
1000beae:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000beb0:	68e3      	ldr	r3, [r4, #12]
1000beb2:	0020      	movs	r0, r4
1000beb4:	4798      	blx	r3
			}
		}
	}
}
1000beb6:	bd70      	pop	{r4, r5, r6, pc}
1000beb8:	1001a544 	.word	0x1001a544

1000bebc <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bebc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bebe:	4b21      	ldr	r3, [pc, #132]	; (1000bf44 <uart_tx1_isr_handler+0x88>)
1000bec0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bec2:	6823      	ldr	r3, [r4, #0]
1000bec4:	791d      	ldrb	r5, [r3, #4]
1000bec6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bec8:	07ea      	lsls	r2, r5, #31
1000beca:	d517      	bpl.n	1000befc <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000becc:	69a2      	ldr	r2, [r4, #24]
1000bece:	7811      	ldrb	r1, [r2, #0]
1000bed0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bed2:	3201      	adds	r2, #1
1000bed4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bed6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bed8:	8be3      	ldrh	r3, [r4, #30]
1000beda:	3b01      	subs	r3, #1
1000bedc:	b29b      	uxth	r3, r3
1000bede:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bee0:	8be3      	ldrh	r3, [r4, #30]
1000bee2:	b29b      	uxth	r3, r3
1000bee4:	2b00      	cmp	r3, #0
1000bee6:	d109      	bne.n	1000befc <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bee8:	6822      	ldr	r2, [r4, #0]
1000beea:	7a13      	ldrb	r3, [r2, #8]
1000beec:	2101      	movs	r1, #1
1000beee:	438b      	bics	r3, r1
1000bef0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bef2:	6822      	ldr	r2, [r4, #0]
1000bef4:	7a11      	ldrb	r1, [r2, #8]
1000bef6:	2310      	movs	r3, #16
1000bef8:	430b      	orrs	r3, r1
1000befa:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000befc:	06eb      	lsls	r3, r5, #27
1000befe:	d512      	bpl.n	1000bf26 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bf00:	2321      	movs	r3, #33	; 0x21
1000bf02:	5ce3      	ldrb	r3, [r4, r3]
1000bf04:	07db      	lsls	r3, r3, #31
1000bf06:	d50e      	bpl.n	1000bf26 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bf08:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bf0a:	5ce3      	ldrb	r3, [r4, r3]
1000bf0c:	07db      	lsls	r3, r3, #31
1000bf0e:	d50a      	bpl.n	1000bf26 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bf10:	2200      	movs	r2, #0
1000bf12:	2322      	movs	r3, #34	; 0x22
1000bf14:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bf16:	6822      	ldr	r2, [r4, #0]
1000bf18:	7a13      	ldrb	r3, [r2, #8]
1000bf1a:	2110      	movs	r1, #16
1000bf1c:	438b      	bics	r3, r1
1000bf1e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bf20:	0020      	movs	r0, r4
1000bf22:	6863      	ldr	r3, [r4, #4]
1000bf24:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bf26:	06ab      	lsls	r3, r5, #26
1000bf28:	d50a      	bpl.n	1000bf40 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bf2a:	2321      	movs	r3, #33	; 0x21
1000bf2c:	5ce3      	ldrb	r3, [r4, r3]
1000bf2e:	079b      	lsls	r3, r3, #30
1000bf30:	d506      	bpl.n	1000bf40 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bf32:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bf34:	5ce3      	ldrb	r3, [r4, r3]
1000bf36:	079b      	lsls	r3, r3, #30
1000bf38:	d502      	bpl.n	1000bf40 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bf3a:	68a3      	ldr	r3, [r4, #8]
1000bf3c:	0020      	movs	r0, r4
1000bf3e:	4798      	blx	r3
		}

	}
}
1000bf40:	bd70      	pop	{r4, r5, r6, pc}
1000bf42:	46c0      	nop			; (mov r8, r8)
1000bf44:	1001a544 	.word	0x1001a544

1000bf48 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000bf48:	23e1      	movs	r3, #225	; 0xe1
1000bf4a:	025b      	lsls	r3, r3, #9
1000bf4c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000bf4e:	2300      	movs	r3, #0
1000bf50:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000bf52:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000bf54:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000bf56:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000bf58:	3302      	adds	r3, #2
1000bf5a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000bf5c:	2203      	movs	r2, #3
1000bf5e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000bf60:	3201      	adds	r2, #1
1000bf62:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000bf64:	3201      	adds	r2, #1
1000bf66:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000bf68:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000bf6a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000bf6c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000bf6e:	6243      	str	r3, [r0, #36]	; 0x24
}
1000bf70:	4770      	bx	lr
1000bf72:	46c0      	nop			; (mov r8, r8)

1000bf74 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bf76:	464f      	mov	r7, r9
1000bf78:	4646      	mov	r6, r8
1000bf7a:	b4c0      	push	{r6, r7}
1000bf7c:	0005      	movs	r5, r0
1000bf7e:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000bf80:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000bf82:	2300      	movs	r3, #0
1000bf84:	6043      	str	r3, [r0, #4]
1000bf86:	6083      	str	r3, [r0, #8]
1000bf88:	60c3      	str	r3, [r0, #12]
1000bf8a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000bf8c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000bf8e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000bf90:	2200      	movs	r2, #0
1000bf92:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000bf94:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000bf96:	3320      	adds	r3, #32
1000bf98:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000bf9a:	3301      	adds	r3, #1
1000bf9c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000bf9e:	3301      	adds	r3, #1
1000bfa0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000bfa2:	4b55      	ldr	r3, [pc, #340]	; (1000c0f8 <uart_init+0x184>)
1000bfa4:	4299      	cmp	r1, r3
1000bfa6:	d118      	bne.n	1000bfda <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000bfa8:	2009      	movs	r0, #9
1000bfaa:	4c54      	ldr	r4, [pc, #336]	; (1000c0fc <uart_init+0x188>)
1000bfac:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000bfae:	200a      	movs	r0, #10
1000bfb0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000bfb2:	2009      	movs	r0, #9
1000bfb4:	4c52      	ldr	r4, [pc, #328]	; (1000c100 <uart_init+0x18c>)
1000bfb6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000bfb8:	200a      	movs	r0, #10
1000bfba:	47a0      	blx	r4
		_uart_instances[0] = module;
1000bfbc:	4b51      	ldr	r3, [pc, #324]	; (1000c104 <uart_init+0x190>)
1000bfbe:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000bfc0:	4951      	ldr	r1, [pc, #324]	; (1000c108 <uart_init+0x194>)
1000bfc2:	2010      	movs	r0, #16
1000bfc4:	4c51      	ldr	r4, [pc, #324]	; (1000c10c <uart_init+0x198>)
1000bfc6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000bfc8:	4951      	ldr	r1, [pc, #324]	; (1000c110 <uart_init+0x19c>)
1000bfca:	2011      	movs	r0, #17
1000bfcc:	47a0      	blx	r4
1000bfce:	4b51      	ldr	r3, [pc, #324]	; (1000c114 <uart_init+0x1a0>)
1000bfd0:	2201      	movs	r2, #1
1000bfd2:	601a      	str	r2, [r3, #0]
1000bfd4:	3201      	adds	r2, #1
1000bfd6:	601a      	str	r2, [r3, #0]
1000bfd8:	e01a      	b.n	1000c010 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000bfda:	4b4f      	ldr	r3, [pc, #316]	; (1000c118 <uart_init+0x1a4>)
1000bfdc:	4299      	cmp	r1, r3
1000bfde:	d117      	bne.n	1000c010 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000bfe0:	200b      	movs	r0, #11
1000bfe2:	4c46      	ldr	r4, [pc, #280]	; (1000c0fc <uart_init+0x188>)
1000bfe4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000bfe6:	200c      	movs	r0, #12
1000bfe8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000bfea:	200b      	movs	r0, #11
1000bfec:	4c44      	ldr	r4, [pc, #272]	; (1000c100 <uart_init+0x18c>)
1000bfee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000bff0:	200c      	movs	r0, #12
1000bff2:	47a0      	blx	r4
		_uart_instances[1] = module;
1000bff4:	4b43      	ldr	r3, [pc, #268]	; (1000c104 <uart_init+0x190>)
1000bff6:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000bff8:	4948      	ldr	r1, [pc, #288]	; (1000c11c <uart_init+0x1a8>)
1000bffa:	2012      	movs	r0, #18
1000bffc:	4c43      	ldr	r4, [pc, #268]	; (1000c10c <uart_init+0x198>)
1000bffe:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c000:	4947      	ldr	r1, [pc, #284]	; (1000c120 <uart_init+0x1ac>)
1000c002:	2013      	movs	r0, #19
1000c004:	47a0      	blx	r4
1000c006:	4b43      	ldr	r3, [pc, #268]	; (1000c114 <uart_init+0x1a0>)
1000c008:	2204      	movs	r2, #4
1000c00a:	601a      	str	r2, [r3, #0]
1000c00c:	3204      	adds	r2, #4
1000c00e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c010:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c012:	2204      	movs	r2, #4
1000c014:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c016:	2b00      	cmp	r3, #0
1000c018:	d152      	bne.n	1000c0c0 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c01a:	3302      	adds	r3, #2
1000c01c:	4698      	mov	r8, r3
1000c01e:	e04f      	b.n	1000c0c0 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c020:	8a31      	ldrh	r1, [r6, #16]
1000c022:	ce01      	ldmia	r6!, {r0}
1000c024:	b2c0      	uxtb	r0, r0
1000c026:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c028:	3401      	adds	r4, #1
1000c02a:	b2e4      	uxtb	r4, r4
1000c02c:	4544      	cmp	r4, r8
1000c02e:	d3f7      	bcc.n	1000c020 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c030:	682b      	ldr	r3, [r5, #0]
1000c032:	7d1a      	ldrb	r2, [r3, #20]
1000c034:	07d2      	lsls	r2, r2, #31
1000c036:	d504      	bpl.n	1000c042 <uart_init+0xce>
1000c038:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c03a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c03c:	7d1a      	ldrb	r2, [r3, #20]
1000c03e:	420a      	tst	r2, r1
1000c040:	d1fb      	bne.n	1000c03a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c042:	2100      	movs	r1, #0
1000c044:	2220      	movs	r2, #32
1000c046:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c048:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c04a:	1e59      	subs	r1, r3, #1
1000c04c:	418b      	sbcs	r3, r1
1000c04e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c050:	793b      	ldrb	r3, [r7, #4]
1000c052:	797a      	ldrb	r2, [r7, #5]
1000c054:	4313      	orrs	r3, r2
1000c056:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c058:	79ba      	ldrb	r2, [r7, #6]
1000c05a:	2a02      	cmp	r2, #2
1000c05c:	d00d      	beq.n	1000c07a <uart_init+0x106>
1000c05e:	b2d1      	uxtb	r1, r2
1000c060:	2902      	cmp	r1, #2
1000c062:	d802      	bhi.n	1000c06a <uart_init+0xf6>
1000c064:	2a01      	cmp	r2, #1
1000c066:	d005      	beq.n	1000c074 <uart_init+0x100>
1000c068:	e00f      	b.n	1000c08a <uart_init+0x116>
1000c06a:	2a03      	cmp	r2, #3
1000c06c:	d008      	beq.n	1000c080 <uart_init+0x10c>
1000c06e:	2a04      	cmp	r2, #4
1000c070:	d009      	beq.n	1000c086 <uart_init+0x112>
1000c072:	e00a      	b.n	1000c08a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c074:	2202      	movs	r2, #2
1000c076:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c078:	e007      	b.n	1000c08a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c07a:	2206      	movs	r2, #6
1000c07c:	4313      	orrs	r3, r2
			break;
1000c07e:	e004      	b.n	1000c08a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c080:	220a      	movs	r2, #10
1000c082:	4313      	orrs	r3, r2
			break;
1000c084:	e001      	b.n	1000c08a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c086:	220e      	movs	r2, #14
1000c088:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c08a:	2220      	movs	r2, #32
1000c08c:	6829      	ldr	r1, [r5, #0]
1000c08e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c090:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c092:	4b24      	ldr	r3, [pc, #144]	; (1000c124 <uart_init+0x1b0>)
1000c094:	4798      	blx	r3
1000c096:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c098:	0031      	movs	r1, r6
1000c09a:	4b23      	ldr	r3, [pc, #140]	; (1000c128 <uart_init+0x1b4>)
1000c09c:	4798      	blx	r3
1000c09e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c0a0:	0400      	lsls	r0, r0, #16
1000c0a2:	0c00      	lsrs	r0, r0, #16
1000c0a4:	4370      	muls	r0, r6
1000c0a6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c0a8:	0931      	lsrs	r1, r6, #4
1000c0aa:	4288      	cmp	r0, r1
1000c0ac:	d906      	bls.n	1000c0bc <uart_init+0x148>
1000c0ae:	2300      	movs	r3, #0
		i++;
1000c0b0:	3301      	adds	r3, #1
1000c0b2:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c0b4:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c0b6:	4288      	cmp	r0, r1
1000c0b8:	d8fa      	bhi.n	1000c0b0 <uart_init+0x13c>
1000c0ba:	e007      	b.n	1000c0cc <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c0bc:	2300      	movs	r3, #0
1000c0be:	e005      	b.n	1000c0cc <uart_init+0x158>
1000c0c0:	003e      	movs	r6, r7
1000c0c2:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c0c4:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c0c6:	4b19      	ldr	r3, [pc, #100]	; (1000c12c <uart_init+0x1b8>)
1000c0c8:	4699      	mov	r9, r3
1000c0ca:	e7a9      	b.n	1000c020 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c0cc:	2100      	movs	r1, #0
1000c0ce:	2028      	movs	r0, #40	; 0x28
1000c0d0:	682c      	ldr	r4, [r5, #0]
1000c0d2:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c0d4:	3301      	adds	r3, #1
1000c0d6:	071b      	lsls	r3, r3, #28
1000c0d8:	0f5b      	lsrs	r3, r3, #29
1000c0da:	00d2      	lsls	r2, r2, #3
1000c0dc:	4313      	orrs	r3, r2
1000c0de:	b29b      	uxth	r3, r3
1000c0e0:	682a      	ldr	r2, [r5, #0]
1000c0e2:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c0e4:	682b      	ldr	r3, [r5, #0]
1000c0e6:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c0e8:	682b      	ldr	r3, [r5, #0]
1000c0ea:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c0ec:	2000      	movs	r0, #0
1000c0ee:	bc0c      	pop	{r2, r3}
1000c0f0:	4690      	mov	r8, r2
1000c0f2:	4699      	mov	r9, r3
1000c0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0f6:	46c0      	nop			; (mov r8, r8)
1000c0f8:	40004000 	.word	0x40004000
1000c0fc:	1000b8a9 	.word	0x1000b8a9
1000c100:	1000b1e1 	.word	0x1000b1e1
1000c104:	1001a544 	.word	0x1001a544
1000c108:	1000bd21 	.word	0x1000bd21
1000c10c:	1000bd11 	.word	0x1000bd11
1000c110:	1000bda9 	.word	0x1000bda9
1000c114:	e000e100 	.word	0xe000e100
1000c118:	40005000 	.word	0x40005000
1000c11c:	1000be35 	.word	0x1000be35
1000c120:	1000bebd 	.word	0x1000bebd
1000c124:	1000b1d5 	.word	0x1000b1d5
1000c128:	10012bdd 	.word	0x10012bdd
1000c12c:	1000ae31 	.word	0x1000ae31

1000c130 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c130:	6802      	ldr	r2, [r0, #0]
1000c132:	2001      	movs	r0, #1
1000c134:	7913      	ldrb	r3, [r2, #4]
1000c136:	4203      	tst	r3, r0
1000c138:	d0fc      	beq.n	1000c134 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c13a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c13c:	2000      	movs	r0, #0
1000c13e:	4770      	bx	lr

1000c140 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c140:	6802      	ldr	r2, [r0, #0]
1000c142:	2001      	movs	r0, #1
1000c144:	7d13      	ldrb	r3, [r2, #20]
1000c146:	4203      	tst	r3, r0
1000c148:	d0fc      	beq.n	1000c144 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c14a:	7c13      	ldrb	r3, [r2, #16]
1000c14c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c14e:	2000      	movs	r0, #0
1000c150:	4770      	bx	lr
1000c152:	46c0      	nop			; (mov r8, r8)

1000c154 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c154:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c156:	2a00      	cmp	r2, #0
1000c158:	d00d      	beq.n	1000c176 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c15a:	330b      	adds	r3, #11
1000c15c:	5cc3      	ldrb	r3, [r0, r3]
1000c15e:	b2db      	uxtb	r3, r3
1000c160:	2b05      	cmp	r3, #5
1000c162:	d008      	beq.n	1000c176 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c164:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c166:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c168:	2205      	movs	r2, #5
1000c16a:	2322      	movs	r3, #34	; 0x22
1000c16c:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c16e:	6803      	ldr	r3, [r0, #0]
1000c170:	3a04      	subs	r2, #4
1000c172:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c174:	2300      	movs	r3, #0
}
1000c176:	0018      	movs	r0, r3
1000c178:	4770      	bx	lr
1000c17a:	46c0      	nop			; (mov r8, r8)

1000c17c <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c17c:	0093      	lsls	r3, r2, #2
1000c17e:	18c3      	adds	r3, r0, r3
1000c180:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c182:	2120      	movs	r1, #32
1000c184:	2301      	movs	r3, #1
1000c186:	4093      	lsls	r3, r2
1000c188:	5c42      	ldrb	r2, [r0, r1]
1000c18a:	4313      	orrs	r3, r2
1000c18c:	5443      	strb	r3, [r0, r1]
}
1000c18e:	4770      	bx	lr

1000c190 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c190:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c192:	2221      	movs	r2, #33	; 0x21
1000c194:	2301      	movs	r3, #1
1000c196:	408b      	lsls	r3, r1
1000c198:	5c84      	ldrb	r4, [r0, r2]
1000c19a:	4323      	orrs	r3, r4
1000c19c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c19e:	2901      	cmp	r1, #1
1000c1a0:	d104      	bne.n	1000c1ac <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c1a2:	6802      	ldr	r2, [r0, #0]
1000c1a4:	7a11      	ldrb	r1, [r2, #8]
1000c1a6:	2320      	movs	r3, #32
1000c1a8:	430b      	orrs	r3, r1
1000c1aa:	7213      	strb	r3, [r2, #8]
	}
}
1000c1ac:	bd10      	pop	{r4, pc}
1000c1ae:	46c0      	nop			; (mov r8, r8)

1000c1b0 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c1b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c1b2:	2201      	movs	r2, #1
1000c1b4:	408a      	lsls	r2, r1
1000c1b6:	2421      	movs	r4, #33	; 0x21
1000c1b8:	5d03      	ldrb	r3, [r0, r4]
1000c1ba:	4393      	bics	r3, r2
1000c1bc:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c1be:	2901      	cmp	r1, #1
1000c1c0:	d104      	bne.n	1000c1cc <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c1c2:	6802      	ldr	r2, [r0, #0]
1000c1c4:	7a13      	ldrb	r3, [r2, #8]
1000c1c6:	311f      	adds	r1, #31
1000c1c8:	438b      	bics	r3, r1
1000c1ca:	7213      	strb	r3, [r2, #8]
	}

}
1000c1cc:	bd10      	pop	{r4, pc}
1000c1ce:	46c0      	nop			; (mov r8, r8)

1000c1d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c1d2:	4647      	mov	r7, r8
1000c1d4:	b480      	push	{r7}
1000c1d6:	000c      	movs	r4, r1
1000c1d8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c1da:	2800      	cmp	r0, #0
1000c1dc:	d10d      	bne.n	1000c1fa <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c1de:	2a00      	cmp	r2, #0
1000c1e0:	dd0e      	ble.n	1000c200 <_read+0x30>
1000c1e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c1e4:	4e08      	ldr	r6, [pc, #32]	; (1000c208 <_read+0x38>)
1000c1e6:	4d09      	ldr	r5, [pc, #36]	; (1000c20c <_read+0x3c>)
1000c1e8:	6830      	ldr	r0, [r6, #0]
1000c1ea:	0021      	movs	r1, r4
1000c1ec:	682b      	ldr	r3, [r5, #0]
1000c1ee:	4798      	blx	r3
		ptr++;
1000c1f0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c1f2:	42a7      	cmp	r7, r4
1000c1f4:	d1f8      	bne.n	1000c1e8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c1f6:	4640      	mov	r0, r8
1000c1f8:	e003      	b.n	1000c202 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c1fa:	2001      	movs	r0, #1
1000c1fc:	4240      	negs	r0, r0
1000c1fe:	e000      	b.n	1000c202 <_read+0x32>
	}

	for (; len > 0; --len) {
1000c200:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c202:	bc04      	pop	{r2}
1000c204:	4690      	mov	r8, r2
1000c206:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c208:	1001a554 	.word	0x1001a554
1000c20c:	1001a54c 	.word	0x1001a54c

1000c210 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c210:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c212:	4647      	mov	r7, r8
1000c214:	b480      	push	{r7}
1000c216:	000e      	movs	r6, r1
1000c218:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c21a:	3801      	subs	r0, #1
1000c21c:	2802      	cmp	r0, #2
1000c21e:	d811      	bhi.n	1000c244 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c220:	2a00      	cmp	r2, #0
1000c222:	d012      	beq.n	1000c24a <_write+0x3a>
1000c224:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c226:	4b0c      	ldr	r3, [pc, #48]	; (1000c258 <_write+0x48>)
1000c228:	4698      	mov	r8, r3
1000c22a:	4f0c      	ldr	r7, [pc, #48]	; (1000c25c <_write+0x4c>)
1000c22c:	4643      	mov	r3, r8
1000c22e:	6818      	ldr	r0, [r3, #0]
1000c230:	5d31      	ldrb	r1, [r6, r4]
1000c232:	683b      	ldr	r3, [r7, #0]
1000c234:	4798      	blx	r3
1000c236:	2800      	cmp	r0, #0
1000c238:	db09      	blt.n	1000c24e <_write+0x3e>
			return -1;
		}
		++nChars;
1000c23a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c23c:	42a5      	cmp	r5, r4
1000c23e:	d1f5      	bne.n	1000c22c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c240:	0020      	movs	r0, r4
1000c242:	e006      	b.n	1000c252 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c244:	2001      	movs	r0, #1
1000c246:	4240      	negs	r0, r0
1000c248:	e003      	b.n	1000c252 <_write+0x42>
	}

	for (; len != 0; --len) {
1000c24a:	2000      	movs	r0, #0
1000c24c:	e001      	b.n	1000c252 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c24e:	2001      	movs	r0, #1
1000c250:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c252:	bc04      	pop	{r2}
1000c254:	4690      	mov	r8, r2
1000c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c258:	1001a554 	.word	0x1001a554
1000c25c:	1001a550 	.word	0x1001a550

1000c260 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000c260:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000c262:	4804      	ldr	r0, [pc, #16]	; (1000c274 <ble_undefined_event_handler+0x14>)
1000c264:	4b04      	ldr	r3, [pc, #16]	; (1000c278 <ble_undefined_event_handler+0x18>)
1000c266:	4798      	blx	r3
1000c268:	4804      	ldr	r0, [pc, #16]	; (1000c27c <ble_undefined_event_handler+0x1c>)
1000c26a:	4b05      	ldr	r3, [pc, #20]	; (1000c280 <ble_undefined_event_handler+0x20>)
1000c26c:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c26e:	2000      	movs	r0, #0
1000c270:	bd10      	pop	{r4, pc}
1000c272:	46c0      	nop			; (mov r8, r8)
1000c274:	10016b98 	.word	0x10016b98
1000c278:	10015b71 	.word	0x10015b71
1000c27c:	100179a8 	.word	0x100179a8
1000c280:	10015a51 	.word	0x10015a51

1000c284 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c284:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c286:	7800      	ldrb	r0, [r0, #0]
1000c288:	2800      	cmp	r0, #0
1000c28a:	d006      	beq.n	1000c29a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c28c:	4803      	ldr	r0, [pc, #12]	; (1000c29c <ble_scan_report_handler+0x18>)
1000c28e:	4b04      	ldr	r3, [pc, #16]	; (1000c2a0 <ble_scan_report_handler+0x1c>)
1000c290:	4798      	blx	r3
1000c292:	4804      	ldr	r0, [pc, #16]	; (1000c2a4 <ble_scan_report_handler+0x20>)
1000c294:	4b04      	ldr	r3, [pc, #16]	; (1000c2a8 <ble_scan_report_handler+0x24>)
1000c296:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c298:	20e2      	movs	r0, #226	; 0xe2
}
1000c29a:	bd10      	pop	{r4, pc}
1000c29c:	10016b98 	.word	0x10016b98
1000c2a0:	10015b71 	.word	0x10015b71
1000c2a4:	100179c4 	.word	0x100179c4
1000c2a8:	10015a51 	.word	0x10015a51

1000c2ac <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c2ac:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c2ae:	7800      	ldrb	r0, [r0, #0]
1000c2b0:	2800      	cmp	r0, #0
1000c2b2:	d006      	beq.n	1000c2c2 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c2b4:	4803      	ldr	r0, [pc, #12]	; (1000c2c4 <ble_adv_report_handler+0x18>)
1000c2b6:	4b04      	ldr	r3, [pc, #16]	; (1000c2c8 <ble_adv_report_handler+0x1c>)
1000c2b8:	4798      	blx	r3
1000c2ba:	4804      	ldr	r0, [pc, #16]	; (1000c2cc <ble_adv_report_handler+0x20>)
1000c2bc:	4b04      	ldr	r3, [pc, #16]	; (1000c2d0 <ble_adv_report_handler+0x24>)
1000c2be:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c2c0:	20e2      	movs	r0, #226	; 0xe2
}
1000c2c2:	bd10      	pop	{r4, pc}
1000c2c4:	10016b98 	.word	0x10016b98
1000c2c8:	10015b71 	.word	0x10015b71
1000c2cc:	100179d8 	.word	0x100179d8
1000c2d0:	10015a51 	.word	0x10015a51

1000c2d4 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c2d4:	b510      	push	{r4, lr}
1000c2d6:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c2d8:	4804      	ldr	r0, [pc, #16]	; (1000c2ec <ble_mtu_changed_indication_handler+0x18>)
1000c2da:	4b05      	ldr	r3, [pc, #20]	; (1000c2f0 <ble_mtu_changed_indication_handler+0x1c>)
1000c2dc:	4798      	blx	r3
1000c2de:	8862      	ldrh	r2, [r4, #2]
1000c2e0:	8821      	ldrh	r1, [r4, #0]
1000c2e2:	4804      	ldr	r0, [pc, #16]	; (1000c2f4 <ble_mtu_changed_indication_handler+0x20>)
1000c2e4:	4b04      	ldr	r3, [pc, #16]	; (1000c2f8 <ble_mtu_changed_indication_handler+0x24>)
1000c2e6:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c2e8:	2000      	movs	r0, #0
1000c2ea:	bd10      	pop	{r4, pc}
1000c2ec:	10016b98 	.word	0x10016b98
1000c2f0:	10015b71 	.word	0x10015b71
1000c2f4:	100179ec 	.word	0x100179ec
1000c2f8:	10015a51 	.word	0x10015a51

1000c2fc <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c2fc:	b570      	push	{r4, r5, r6, lr}
1000c2fe:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c300:	78c5      	ldrb	r5, [r0, #3]
1000c302:	2d00      	cmp	r5, #0
1000c304:	d108      	bne.n	1000c318 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c306:	480a      	ldr	r0, [pc, #40]	; (1000c330 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c308:	4b0a      	ldr	r3, [pc, #40]	; (1000c334 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c30a:	4798      	blx	r3
1000c30c:	78a2      	ldrb	r2, [r4, #2]
1000c30e:	8821      	ldrh	r1, [r4, #0]
1000c310:	4809      	ldr	r0, [pc, #36]	; (1000c338 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000c312:	4b0a      	ldr	r3, [pc, #40]	; (1000c33c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c314:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c316:	e008      	b.n	1000c32a <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c318:	4805      	ldr	r0, [pc, #20]	; (1000c330 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c31a:	4b06      	ldr	r3, [pc, #24]	; (1000c334 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c31c:	4798      	blx	r3
1000c31e:	78a2      	ldrb	r2, [r4, #2]
1000c320:	8821      	ldrh	r1, [r4, #0]
1000c322:	4807      	ldr	r0, [pc, #28]	; (1000c340 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000c324:	4b05      	ldr	r3, [pc, #20]	; (1000c33c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c326:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c328:	25e2      	movs	r5, #226	; 0xe2
}
1000c32a:	0028      	movs	r0, r5
1000c32c:	bd70      	pop	{r4, r5, r6, pc}
1000c32e:	46c0      	nop			; (mov r8, r8)
1000c330:	10016b98 	.word	0x10016b98
1000c334:	10015b71 	.word	0x10015b71
1000c338:	10017a24 	.word	0x10017a24
1000c33c:	10015a51 	.word	0x10015a51
1000c340:	10017a54 	.word	0x10017a54

1000c344 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c344:	b570      	push	{r4, r5, r6, lr}
1000c346:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c348:	78c5      	ldrb	r5, [r0, #3]
1000c34a:	2d00      	cmp	r5, #0
1000c34c:	d108      	bne.n	1000c360 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c34e:	480a      	ldr	r0, [pc, #40]	; (1000c378 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c350:	4b0a      	ldr	r3, [pc, #40]	; (1000c37c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c352:	4798      	blx	r3
1000c354:	78a2      	ldrb	r2, [r4, #2]
1000c356:	8821      	ldrh	r1, [r4, #0]
1000c358:	4809      	ldr	r0, [pc, #36]	; (1000c380 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000c35a:	4b0a      	ldr	r3, [pc, #40]	; (1000c384 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c35c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c35e:	e008      	b.n	1000c372 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c360:	4805      	ldr	r0, [pc, #20]	; (1000c378 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c362:	4b06      	ldr	r3, [pc, #24]	; (1000c37c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c364:	4798      	blx	r3
1000c366:	78a2      	ldrb	r2, [r4, #2]
1000c368:	8821      	ldrh	r1, [r4, #0]
1000c36a:	4807      	ldr	r0, [pc, #28]	; (1000c388 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000c36c:	4b05      	ldr	r3, [pc, #20]	; (1000c384 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c36e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c370:	25e2      	movs	r5, #226	; 0xe2
}
1000c372:	0028      	movs	r0, r5
1000c374:	bd70      	pop	{r4, r5, r6, pc}
1000c376:	46c0      	nop			; (mov r8, r8)
1000c378:	10016b98 	.word	0x10016b98
1000c37c:	10015b71 	.word	0x10015b71
1000c380:	10017a8c 	.word	0x10017a8c
1000c384:	10015a51 	.word	0x10015a51
1000c388:	10017ac8 	.word	0x10017ac8

1000c38c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c38e:	0006      	movs	r6, r0
1000c390:	4c1d      	ldr	r4, [pc, #116]	; (1000c408 <ble_disconnected_state_handler+0x7c>)
1000c392:	239b      	movs	r3, #155	; 0x9b
1000c394:	009b      	lsls	r3, r3, #2
1000c396:	18e7      	adds	r7, r4, r3
1000c398:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c39a:	0023      	movs	r3, r4
1000c39c:	3b56      	subs	r3, #86	; 0x56
1000c39e:	881a      	ldrh	r2, [r3, #0]
1000c3a0:	8833      	ldrh	r3, [r6, #0]
1000c3a2:	429a      	cmp	r2, r3
1000c3a4:	d122      	bne.n	1000c3ec <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c3a6:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c3a8:	2b05      	cmp	r3, #5
1000c3aa:	d001      	beq.n	1000c3b0 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c3ac:	2b08      	cmp	r3, #8
1000c3ae:	d102      	bne.n	1000c3b6 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c3b0:	2301      	movs	r3, #1
1000c3b2:	702b      	strb	r3, [r5, #0]
1000c3b4:	e01a      	b.n	1000c3ec <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c3b6:	2b07      	cmp	r3, #7
1000c3b8:	d80f      	bhi.n	1000c3da <ble_disconnected_state_handler+0x4e>
1000c3ba:	009b      	lsls	r3, r3, #2
1000c3bc:	4a13      	ldr	r2, [pc, #76]	; (1000c40c <ble_disconnected_state_handler+0x80>)
1000c3be:	58d3      	ldr	r3, [r2, r3]
1000c3c0:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c3c2:	2300      	movs	r3, #0
1000c3c4:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c3c6:	4b12      	ldr	r3, [pc, #72]	; (1000c410 <ble_disconnected_state_handler+0x84>)
1000c3c8:	781b      	ldrb	r3, [r3, #0]
1000c3ca:	2b00      	cmp	r3, #0
1000c3cc:	d00e      	beq.n	1000c3ec <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c3ce:	4a10      	ldr	r2, [pc, #64]	; (1000c410 <ble_disconnected_state_handler+0x84>)
1000c3d0:	7813      	ldrb	r3, [r2, #0]
1000c3d2:	3b01      	subs	r3, #1
1000c3d4:	b2db      	uxtb	r3, r3
1000c3d6:	7013      	strb	r3, [r2, #0]
1000c3d8:	e008      	b.n	1000c3ec <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c3da:	480e      	ldr	r0, [pc, #56]	; (1000c414 <ble_disconnected_state_handler+0x88>)
1000c3dc:	4b0e      	ldr	r3, [pc, #56]	; (1000c418 <ble_disconnected_state_handler+0x8c>)
1000c3de:	4798      	blx	r3
1000c3e0:	7829      	ldrb	r1, [r5, #0]
1000c3e2:	480e      	ldr	r0, [pc, #56]	; (1000c41c <ble_disconnected_state_handler+0x90>)
1000c3e4:	4b0e      	ldr	r3, [pc, #56]	; (1000c420 <ble_disconnected_state_handler+0x94>)
1000c3e6:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c3e8:	2300      	movs	r3, #0
1000c3ea:	702b      	strb	r3, [r5, #0]
1000c3ec:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c3ee:	42bc      	cmp	r4, r7
1000c3f0:	d1d2      	bne.n	1000c398 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c3f2:	4808      	ldr	r0, [pc, #32]	; (1000c414 <ble_disconnected_state_handler+0x88>)
1000c3f4:	4b08      	ldr	r3, [pc, #32]	; (1000c418 <ble_disconnected_state_handler+0x8c>)
1000c3f6:	4798      	blx	r3
1000c3f8:	8832      	ldrh	r2, [r6, #0]
1000c3fa:	78b1      	ldrb	r1, [r6, #2]
1000c3fc:	4809      	ldr	r0, [pc, #36]	; (1000c424 <ble_disconnected_state_handler+0x98>)
1000c3fe:	4b08      	ldr	r3, [pc, #32]	; (1000c420 <ble_disconnected_state_handler+0x94>)
1000c400:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c402:	2000      	movs	r0, #0
1000c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c406:	46c0      	nop			; (mov r8, r8)
1000c408:	1001a5ce 	.word	0x1001a5ce
1000c40c:	10017844 	.word	0x10017844
1000c410:	1001a7dc 	.word	0x1001a7dc
1000c414:	10016b98 	.word	0x10016b98
1000c418:	10015b71 	.word	0x10015b71
1000c41c:	10017b04 	.word	0x10017b04
1000c420:	10015a51 	.word	0x10015a51
1000c424:	10017b1c 	.word	0x10017b1c

1000c428 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c428:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c42a:	4804      	ldr	r0, [pc, #16]	; (1000c43c <ble_conn_param_update+0x14>)
1000c42c:	4b04      	ldr	r3, [pc, #16]	; (1000c440 <ble_conn_param_update+0x18>)
1000c42e:	4798      	blx	r3
1000c430:	4804      	ldr	r0, [pc, #16]	; (1000c444 <ble_conn_param_update+0x1c>)
1000c432:	4b05      	ldr	r3, [pc, #20]	; (1000c448 <ble_conn_param_update+0x20>)
1000c434:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c436:	2000      	movs	r0, #0
1000c438:	bd10      	pop	{r4, pc}
1000c43a:	46c0      	nop			; (mov r8, r8)
1000c43c:	10016b98 	.word	0x10016b98
1000c440:	10015b71 	.word	0x10015b71
1000c444:	10017b4c 	.word	0x10017b4c
1000c448:	10015a51 	.word	0x10015a51

1000c44c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c44e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c450:	8801      	ldrh	r1, [r0, #0]
1000c452:	4b28      	ldr	r3, [pc, #160]	; (1000c4f4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c454:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c456:	891a      	ldrh	r2, [r3, #8]
1000c458:	428a      	cmp	r2, r1
1000c45a:	d104      	bne.n	1000c466 <ble_encryption_status_change_handler+0x1a>
1000c45c:	001a      	movs	r2, r3
1000c45e:	325e      	adds	r2, #94	; 0x5e
1000c460:	7812      	ldrb	r2, [r2, #0]
1000c462:	2a06      	cmp	r2, #6
1000c464:	d02e      	beq.n	1000c4c4 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c466:	3401      	adds	r4, #1
1000c468:	b2e4      	uxtb	r4, r4
1000c46a:	337c      	adds	r3, #124	; 0x7c
1000c46c:	2c05      	cmp	r4, #5
1000c46e:	d1f2      	bne.n	1000c456 <ble_encryption_status_change_handler+0xa>
1000c470:	e039      	b.n	1000c4e6 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c472:	4920      	ldr	r1, [pc, #128]	; (1000c4f4 <ble_encryption_status_change_handler+0xa8>)
1000c474:	0163      	lsls	r3, r4, #5
1000c476:	1b1a      	subs	r2, r3, r4
1000c478:	0092      	lsls	r2, r2, #2
1000c47a:	188a      	adds	r2, r1, r2
1000c47c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c47e:	0014      	movs	r4, r2
1000c480:	345e      	adds	r4, #94	; 0x5e
1000c482:	2307      	movs	r3, #7
1000c484:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c486:	481c      	ldr	r0, [pc, #112]	; (1000c4f8 <ble_encryption_status_change_handler+0xac>)
1000c488:	4b1c      	ldr	r3, [pc, #112]	; (1000c4fc <ble_encryption_status_change_handler+0xb0>)
1000c48a:	4798      	blx	r3
1000c48c:	481c      	ldr	r0, [pc, #112]	; (1000c500 <ble_encryption_status_change_handler+0xb4>)
1000c48e:	4b1d      	ldr	r3, [pc, #116]	; (1000c504 <ble_encryption_status_change_handler+0xb8>)
1000c490:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c492:	25e2      	movs	r5, #226	; 0xe2
1000c494:	e02b      	b.n	1000c4ee <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c496:	4818      	ldr	r0, [pc, #96]	; (1000c4f8 <ble_encryption_status_change_handler+0xac>)
1000c498:	4b18      	ldr	r3, [pc, #96]	; (1000c4fc <ble_encryption_status_change_handler+0xb0>)
1000c49a:	4798      	blx	r3
1000c49c:	481a      	ldr	r0, [pc, #104]	; (1000c508 <ble_encryption_status_change_handler+0xbc>)
1000c49e:	4b19      	ldr	r3, [pc, #100]	; (1000c504 <ble_encryption_status_change_handler+0xb8>)
1000c4a0:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c4a2:	4914      	ldr	r1, [pc, #80]	; (1000c4f4 <ble_encryption_status_change_handler+0xa8>)
1000c4a4:	0163      	lsls	r3, r4, #5
1000c4a6:	1b1a      	subs	r2, r3, r4
1000c4a8:	0092      	lsls	r2, r2, #2
1000c4aa:	188a      	adds	r2, r1, r2
1000c4ac:	0010      	movs	r0, r2
1000c4ae:	305e      	adds	r0, #94	; 0x5e
1000c4b0:	2708      	movs	r7, #8
1000c4b2:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c4b4:	78f0      	ldrb	r0, [r6, #3]
1000c4b6:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c4b8:	78b2      	ldrb	r2, [r6, #2]
1000c4ba:	1b1c      	subs	r4, r3, r4
1000c4bc:	00a4      	lsls	r4, r4, #2
1000c4be:	190c      	adds	r4, r1, r4
1000c4c0:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c4c2:	e014      	b.n	1000c4ee <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c4c4:	78b5      	ldrb	r5, [r6, #2]
1000c4c6:	2d00      	cmp	r5, #0
1000c4c8:	d0e5      	beq.n	1000c496 <ble_encryption_status_change_handler+0x4a>
1000c4ca:	e7d2      	b.n	1000c472 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c4cc:	4e0a      	ldr	r6, [pc, #40]	; (1000c4f8 <ble_encryption_status_change_handler+0xac>)
1000c4ce:	0030      	movs	r0, r6
1000c4d0:	4d0a      	ldr	r5, [pc, #40]	; (1000c4fc <ble_encryption_status_change_handler+0xb0>)
1000c4d2:	47a8      	blx	r5
1000c4d4:	480c      	ldr	r0, [pc, #48]	; (1000c508 <ble_encryption_status_change_handler+0xbc>)
1000c4d6:	4c0b      	ldr	r4, [pc, #44]	; (1000c504 <ble_encryption_status_change_handler+0xb8>)
1000c4d8:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c4da:	0030      	movs	r0, r6
1000c4dc:	47a8      	blx	r5
1000c4de:	480b      	ldr	r0, [pc, #44]	; (1000c50c <ble_encryption_status_change_handler+0xc0>)
1000c4e0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c4e2:	25e2      	movs	r5, #226	; 0xe2
1000c4e4:	e003      	b.n	1000c4ee <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c4e6:	78b5      	ldrb	r5, [r6, #2]
1000c4e8:	2d00      	cmp	r5, #0
1000c4ea:	d1c2      	bne.n	1000c472 <ble_encryption_status_change_handler+0x26>
1000c4ec:	e7ee      	b.n	1000c4cc <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c4ee:	0028      	movs	r0, r5
1000c4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c4f2:	46c0      	nop			; (mov r8, r8)
1000c4f4:	1001a570 	.word	0x1001a570
1000c4f8:	10016b98 	.word	0x10016b98
1000c4fc:	10015b71 	.word	0x10015b71
1000c500:	10017b68 	.word	0x10017b68
1000c504:	10015a51 	.word	0x10015a51
1000c508:	10017b7c 	.word	0x10017b7c
1000c50c:	10017ba0 	.word	0x10017ba0

1000c510 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c510:	b530      	push	{r4, r5, lr}
1000c512:	b085      	sub	sp, #20
1000c514:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c516:	4b1f      	ldr	r3, [pc, #124]	; (1000c594 <ble_scan_info_handler+0x84>)
1000c518:	781b      	ldrb	r3, [r3, #0]
1000c51a:	b2db      	uxtb	r3, r3
1000c51c:	2b13      	cmp	r3, #19
1000c51e:	d824      	bhi.n	1000c56a <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c520:	4d1c      	ldr	r5, [pc, #112]	; (1000c594 <ble_scan_info_handler+0x84>)
1000c522:	782b      	ldrb	r3, [r5, #0]
1000c524:	b2db      	uxtb	r3, r3
1000c526:	0098      	lsls	r0, r3, #2
1000c528:	18c0      	adds	r0, r0, r3
1000c52a:	00c0      	lsls	r0, r0, #3
1000c52c:	18c3      	adds	r3, r0, r3
1000c52e:	481a      	ldr	r0, [pc, #104]	; (1000c598 <ble_scan_info_handler+0x88>)
1000c530:	1818      	adds	r0, r3, r0
1000c532:	2229      	movs	r2, #41	; 0x29
1000c534:	0021      	movs	r1, r4
1000c536:	4b19      	ldr	r3, [pc, #100]	; (1000c59c <ble_scan_info_handler+0x8c>)
1000c538:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c53a:	4819      	ldr	r0, [pc, #100]	; (1000c5a0 <ble_scan_info_handler+0x90>)
1000c53c:	4b19      	ldr	r3, [pc, #100]	; (1000c5a4 <ble_scan_info_handler+0x94>)
1000c53e:	4798      	blx	r3
1000c540:	7829      	ldrb	r1, [r5, #0]
1000c542:	b2c9      	uxtb	r1, r1
1000c544:	79a3      	ldrb	r3, [r4, #6]
1000c546:	79e2      	ldrb	r2, [r4, #7]
1000c548:	78a0      	ldrb	r0, [r4, #2]
1000c54a:	9003      	str	r0, [sp, #12]
1000c54c:	78e0      	ldrb	r0, [r4, #3]
1000c54e:	9002      	str	r0, [sp, #8]
1000c550:	7920      	ldrb	r0, [r4, #4]
1000c552:	9001      	str	r0, [sp, #4]
1000c554:	7960      	ldrb	r0, [r4, #5]
1000c556:	9000      	str	r0, [sp, #0]
1000c558:	4813      	ldr	r0, [pc, #76]	; (1000c5a8 <ble_scan_info_handler+0x98>)
1000c55a:	4c14      	ldr	r4, [pc, #80]	; (1000c5ac <ble_scan_info_handler+0x9c>)
1000c55c:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c55e:	782b      	ldrb	r3, [r5, #0]
1000c560:	3301      	adds	r3, #1
1000c562:	b2db      	uxtb	r3, r3
1000c564:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000c566:	2300      	movs	r3, #0
1000c568:	e011      	b.n	1000c58e <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c56a:	480d      	ldr	r0, [pc, #52]	; (1000c5a0 <ble_scan_info_handler+0x90>)
1000c56c:	4b0d      	ldr	r3, [pc, #52]	; (1000c5a4 <ble_scan_info_handler+0x94>)
1000c56e:	4798      	blx	r3
1000c570:	480f      	ldr	r0, [pc, #60]	; (1000c5b0 <ble_scan_info_handler+0xa0>)
1000c572:	4b0e      	ldr	r3, [pc, #56]	; (1000c5ac <ble_scan_info_handler+0x9c>)
1000c574:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c576:	4b0f      	ldr	r3, [pc, #60]	; (1000c5b4 <ble_scan_info_handler+0xa4>)
1000c578:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c57a:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c57c:	2800      	cmp	r0, #0
1000c57e:	d006      	beq.n	1000c58e <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000c580:	4807      	ldr	r0, [pc, #28]	; (1000c5a0 <ble_scan_info_handler+0x90>)
1000c582:	4b08      	ldr	r3, [pc, #32]	; (1000c5a4 <ble_scan_info_handler+0x94>)
1000c584:	4798      	blx	r3
1000c586:	480c      	ldr	r0, [pc, #48]	; (1000c5b8 <ble_scan_info_handler+0xa8>)
1000c588:	4b08      	ldr	r3, [pc, #32]	; (1000c5ac <ble_scan_info_handler+0x9c>)
1000c58a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c58c:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c58e:	0018      	movs	r0, r3
1000c590:	b005      	add	sp, #20
1000c592:	bd30      	pop	{r4, r5, pc}
1000c594:	1001907c 	.word	0x1001907c
1000c598:	1001a854 	.word	0x1001a854
1000c59c:	100158f7 	.word	0x100158f7
1000c5a0:	10016b98 	.word	0x10016b98
1000c5a4:	10015b71 	.word	0x10015b71
1000c5a8:	10017bc8 	.word	0x10017bc8
1000c5ac:	10015a51 	.word	0x10015a51
1000c5b0:	10017c04 	.word	0x10017c04
1000c5b4:	1000f2d1 	.word	0x1000f2d1
1000c5b8:	10017c3c 	.word	0x10017c3c

1000c5bc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5be:	465f      	mov	r7, fp
1000c5c0:	4656      	mov	r6, sl
1000c5c2:	464d      	mov	r5, r9
1000c5c4:	4644      	mov	r4, r8
1000c5c6:	b4f0      	push	{r4, r5, r6, r7}
1000c5c8:	b083      	sub	sp, #12
1000c5ca:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c5cc:	8841      	ldrh	r1, [r0, #2]
1000c5ce:	4b59      	ldr	r3, [pc, #356]	; (1000c734 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5d0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c5d2:	891a      	ldrh	r2, [r3, #8]
1000c5d4:	428a      	cmp	r2, r1
1000c5d6:	d105      	bne.n	1000c5e4 <ble_pair_done_handler+0x28>
1000c5d8:	001a      	movs	r2, r3
1000c5da:	325e      	adds	r2, #94	; 0x5e
1000c5dc:	7812      	ldrb	r2, [r2, #0]
1000c5de:	2a03      	cmp	r2, #3
1000c5e0:	d100      	bne.n	1000c5e4 <ble_pair_done_handler+0x28>
1000c5e2:	e09a      	b.n	1000c71a <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5e4:	3401      	adds	r4, #1
1000c5e6:	b2e4      	uxtb	r4, r4
1000c5e8:	337c      	adds	r3, #124	; 0x7c
1000c5ea:	2c05      	cmp	r4, #5
1000c5ec:	d1f1      	bne.n	1000c5d2 <ble_pair_done_handler+0x16>
1000c5ee:	e057      	b.n	1000c6a0 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c5f0:	7821      	ldrb	r1, [r4, #0]
1000c5f2:	0030      	movs	r0, r6
1000c5f4:	47b8      	blx	r7
1000c5f6:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000c5f8:	454c      	cmp	r4, r9
1000c5fa:	d1f9      	bne.n	1000c5f0 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000c5fc:	484e      	ldr	r0, [pc, #312]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c5fe:	4b4f      	ldr	r3, [pc, #316]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c600:	4798      	blx	r3
1000c602:	484f      	ldr	r0, [pc, #316]	; (1000c740 <ble_pair_done_handler+0x184>)
1000c604:	4b4f      	ldr	r3, [pc, #316]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c606:	4798      	blx	r3
1000c608:	002e      	movs	r6, r5
1000c60a:	3622      	adds	r6, #34	; 0x22
1000c60c:	002c      	movs	r4, r5
1000c60e:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000c610:	4f4c      	ldr	r7, [pc, #304]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c612:	7831      	ldrb	r1, [r6, #0]
1000c614:	484c      	ldr	r0, [pc, #304]	; (1000c748 <ble_pair_done_handler+0x18c>)
1000c616:	47b8      	blx	r7
1000c618:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000c61a:	42a6      	cmp	r6, r4
1000c61c:	d1f9      	bne.n	1000c612 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000c61e:	4846      	ldr	r0, [pc, #280]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c620:	4b46      	ldr	r3, [pc, #280]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c622:	4798      	blx	r3
1000c624:	4849      	ldr	r0, [pc, #292]	; (1000c74c <ble_pair_done_handler+0x190>)
1000c626:	4b47      	ldr	r3, [pc, #284]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c628:	4798      	blx	r3
1000c62a:	3542      	adds	r5, #66	; 0x42
1000c62c:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000c62e:	4e46      	ldr	r6, [pc, #280]	; (1000c748 <ble_pair_done_handler+0x18c>)
1000c630:	4d44      	ldr	r5, [pc, #272]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c632:	7821      	ldrb	r1, [r4, #0]
1000c634:	0030      	movs	r0, r6
1000c636:	47a8      	blx	r5
1000c638:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c63a:	42bc      	cmp	r4, r7
1000c63c:	d1f9      	bne.n	1000c632 <ble_pair_done_handler+0x76>
1000c63e:	e071      	b.n	1000c724 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c640:	0163      	lsls	r3, r4, #5
1000c642:	1b1c      	subs	r4, r3, r4
1000c644:	00a4      	lsls	r4, r4, #2
1000c646:	4b3b      	ldr	r3, [pc, #236]	; (1000c734 <ble_pair_done_handler+0x178>)
1000c648:	191c      	adds	r4, r3, r4
1000c64a:	345e      	adds	r4, #94	; 0x5e
1000c64c:	7823      	ldrb	r3, [r4, #0]
1000c64e:	2b01      	cmp	r3, #1
1000c650:	d915      	bls.n	1000c67e <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c652:	4839      	ldr	r0, [pc, #228]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c654:	4b39      	ldr	r3, [pc, #228]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c656:	4798      	blx	r3
1000c658:	483d      	ldr	r0, [pc, #244]	; (1000c750 <ble_pair_done_handler+0x194>)
1000c65a:	4b3a      	ldr	r3, [pc, #232]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c65c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c65e:	8868      	ldrh	r0, [r5, #2]
1000c660:	2113      	movs	r1, #19
1000c662:	4b3c      	ldr	r3, [pc, #240]	; (1000c754 <ble_pair_done_handler+0x198>)
1000c664:	4798      	blx	r3
1000c666:	9001      	str	r0, [sp, #4]
1000c668:	2800      	cmp	r0, #0
1000c66a:	d05b      	beq.n	1000c724 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c66c:	4832      	ldr	r0, [pc, #200]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c66e:	4b33      	ldr	r3, [pc, #204]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c670:	4798      	blx	r3
1000c672:	4839      	ldr	r0, [pc, #228]	; (1000c758 <ble_pair_done_handler+0x19c>)
1000c674:	4b33      	ldr	r3, [pc, #204]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c676:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c678:	23e2      	movs	r3, #226	; 0xe2
1000c67a:	9301      	str	r3, [sp, #4]
1000c67c:	e052      	b.n	1000c724 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c67e:	2300      	movs	r3, #0
1000c680:	9301      	str	r3, [sp, #4]
1000c682:	e04f      	b.n	1000c724 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c684:	4e2c      	ldr	r6, [pc, #176]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c686:	0030      	movs	r0, r6
1000c688:	4d2c      	ldr	r5, [pc, #176]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c68a:	47a8      	blx	r5
1000c68c:	4833      	ldr	r0, [pc, #204]	; (1000c75c <ble_pair_done_handler+0x1a0>)
1000c68e:	4c2d      	ldr	r4, [pc, #180]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c690:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c692:	0030      	movs	r0, r6
1000c694:	47a8      	blx	r5
1000c696:	4832      	ldr	r0, [pc, #200]	; (1000c760 <ble_pair_done_handler+0x1a4>)
1000c698:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c69a:	23e2      	movs	r3, #226	; 0xe2
1000c69c:	9301      	str	r3, [sp, #4]
1000c69e:	e041      	b.n	1000c724 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c6a0:	792b      	ldrb	r3, [r5, #4]
1000c6a2:	2b00      	cmp	r3, #0
1000c6a4:	d1cc      	bne.n	1000c640 <ble_pair_done_handler+0x84>
1000c6a6:	e7ed      	b.n	1000c684 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c6a8:	4823      	ldr	r0, [pc, #140]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c6aa:	4b24      	ldr	r3, [pc, #144]	; (1000c73c <ble_pair_done_handler+0x180>)
1000c6ac:	469b      	mov	fp, r3
1000c6ae:	4798      	blx	r3
1000c6b0:	482a      	ldr	r0, [pc, #168]	; (1000c75c <ble_pair_done_handler+0x1a0>)
1000c6b2:	4b24      	ldr	r3, [pc, #144]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c6b4:	469a      	mov	sl, r3
1000c6b6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c6b8:	782a      	ldrb	r2, [r5, #0]
1000c6ba:	4b1e      	ldr	r3, [pc, #120]	; (1000c734 <ble_pair_done_handler+0x178>)
1000c6bc:	4698      	mov	r8, r3
1000c6be:	0167      	lsls	r7, r4, #5
1000c6c0:	1b3b      	subs	r3, r7, r4
1000c6c2:	009b      	lsls	r3, r3, #2
1000c6c4:	4443      	add	r3, r8
1000c6c6:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c6c8:	792a      	ldrb	r2, [r5, #4]
1000c6ca:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c6cc:	335e      	adds	r3, #94	; 0x5e
1000c6ce:	2205      	movs	r2, #5
1000c6d0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c6d2:	1b38      	subs	r0, r7, r4
1000c6d4:	0080      	lsls	r0, r0, #2
1000c6d6:	4440      	add	r0, r8
1000c6d8:	3036      	adds	r0, #54	; 0x36
1000c6da:	320b      	adds	r2, #11
1000c6dc:	0029      	movs	r1, r5
1000c6de:	3122      	adds	r1, #34	; 0x22
1000c6e0:	4b20      	ldr	r3, [pc, #128]	; (1000c764 <ble_pair_done_handler+0x1a8>)
1000c6e2:	4699      	mov	r9, r3
1000c6e4:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c6e6:	1b38      	subs	r0, r7, r4
1000c6e8:	0080      	lsls	r0, r0, #2
1000c6ea:	4440      	add	r0, r8
1000c6ec:	3046      	adds	r0, #70	; 0x46
1000c6ee:	2217      	movs	r2, #23
1000c6f0:	0029      	movs	r1, r5
1000c6f2:	3132      	adds	r1, #50	; 0x32
1000c6f4:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c6f6:	1b38      	subs	r0, r7, r4
1000c6f8:	0080      	lsls	r0, r0, #2
1000c6fa:	4440      	add	r0, r8
1000c6fc:	301a      	adds	r0, #26
1000c6fe:	1dac      	adds	r4, r5, #6
1000c700:	221c      	movs	r2, #28
1000c702:	0021      	movs	r1, r4
1000c704:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c706:	480c      	ldr	r0, [pc, #48]	; (1000c738 <ble_pair_done_handler+0x17c>)
1000c708:	47d8      	blx	fp
1000c70a:	4817      	ldr	r0, [pc, #92]	; (1000c768 <ble_pair_done_handler+0x1ac>)
1000c70c:	47d0      	blx	sl
1000c70e:	2316      	movs	r3, #22
1000c710:	4699      	mov	r9, r3
1000c712:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c714:	4e0c      	ldr	r6, [pc, #48]	; (1000c748 <ble_pair_done_handler+0x18c>)
1000c716:	4f0b      	ldr	r7, [pc, #44]	; (1000c744 <ble_pair_done_handler+0x188>)
1000c718:	e76a      	b.n	1000c5f0 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c71a:	792b      	ldrb	r3, [r5, #4]
1000c71c:	9301      	str	r3, [sp, #4]
1000c71e:	2b00      	cmp	r3, #0
1000c720:	d0c2      	beq.n	1000c6a8 <ble_pair_done_handler+0xec>
1000c722:	e78d      	b.n	1000c640 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c724:	9801      	ldr	r0, [sp, #4]
1000c726:	b003      	add	sp, #12
1000c728:	bc3c      	pop	{r2, r3, r4, r5}
1000c72a:	4690      	mov	r8, r2
1000c72c:	4699      	mov	r9, r3
1000c72e:	46a2      	mov	sl, r4
1000c730:	46ab      	mov	fp, r5
1000c732:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c734:	1001a570 	.word	0x1001a570
1000c738:	10016b98 	.word	0x10016b98
1000c73c:	10015b71 	.word	0x10015b71
1000c740:	10017c60 	.word	0x10017c60
1000c744:	10015a51 	.word	0x10015a51
1000c748:	10017c54 	.word	0x10017c54
1000c74c:	10017c68 	.word	0x10017c68
1000c750:	10017c70 	.word	0x10017c70
1000c754:	1000f2f1 	.word	0x1000f2f1
1000c758:	10017c90 	.word	0x10017c90
1000c75c:	10017cac 	.word	0x10017cac
1000c760:	10017cd8 	.word	0x10017cd8
1000c764:	100158f7 	.word	0x100158f7
1000c768:	10017d08 	.word	0x10017d08

1000c76c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c76c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c76e:	8800      	ldrh	r0, [r0, #0]
1000c770:	2378      	movs	r3, #120	; 0x78
1000c772:	2201      	movs	r2, #1
1000c774:	2101      	movs	r1, #1
1000c776:	4c02      	ldr	r4, [pc, #8]	; (1000c780 <ble_conn_param_update_req+0x14>)
1000c778:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c77a:	2000      	movs	r0, #0
1000c77c:	bd10      	pop	{r4, pc}
1000c77e:	46c0      	nop			; (mov r8, r8)
1000c780:	1000f311 	.word	0x1000f311

1000c784 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c784:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c786:	4657      	mov	r7, sl
1000c788:	464e      	mov	r6, r9
1000c78a:	4645      	mov	r5, r8
1000c78c:	b4e0      	push	{r5, r6, r7}
1000c78e:	b084      	sub	sp, #16
1000c790:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c792:	2209      	movs	r2, #9
1000c794:	2100      	movs	r1, #0
1000c796:	a801      	add	r0, sp, #4
1000c798:	4b6a      	ldr	r3, [pc, #424]	; (1000c944 <ble_slave_security_request_handler+0x1c0>)
1000c79a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c79c:	8825      	ldrh	r5, [r4, #0]
1000c79e:	496a      	ldr	r1, [pc, #424]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c7a0:	000a      	movs	r2, r1
1000c7a2:	2300      	movs	r3, #0
1000c7a4:	8910      	ldrh	r0, [r2, #8]
1000c7a6:	42a8      	cmp	r0, r5
1000c7a8:	d116      	bne.n	1000c7d8 <ble_slave_security_request_handler+0x54>
1000c7aa:	0010      	movs	r0, r2
1000c7ac:	305e      	adds	r0, #94	; 0x5e
1000c7ae:	7800      	ldrb	r0, [r0, #0]
1000c7b0:	2802      	cmp	r0, #2
1000c7b2:	d111      	bne.n	1000c7d8 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c7b4:	4864      	ldr	r0, [pc, #400]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c7b6:	015a      	lsls	r2, r3, #5
1000c7b8:	1ad6      	subs	r6, r2, r3
1000c7ba:	00b6      	lsls	r6, r6, #2
1000c7bc:	1986      	adds	r6, r0, r6
1000c7be:	365e      	adds	r6, #94	; 0x5e
1000c7c0:	2206      	movs	r2, #6
1000c7c2:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c7c4:	32f9      	adds	r2, #249	; 0xf9
1000c7c6:	4013      	ands	r3, r2
1000c7c8:	015a      	lsls	r2, r3, #5
1000c7ca:	1ad2      	subs	r2, r2, r3
1000c7cc:	0092      	lsls	r2, r2, #2
1000c7ce:	1882      	adds	r2, r0, r2
1000c7d0:	7d12      	ldrb	r2, [r2, #20]
1000c7d2:	07d0      	lsls	r0, r2, #31
1000c7d4:	d405      	bmi.n	1000c7e2 <ble_slave_security_request_handler+0x5e>
1000c7d6:	e01b      	b.n	1000c810 <ble_slave_security_request_handler+0x8c>
1000c7d8:	3301      	adds	r3, #1
1000c7da:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7dc:	2b05      	cmp	r3, #5
1000c7de:	d1e1      	bne.n	1000c7a4 <ble_slave_security_request_handler+0x20>
1000c7e0:	e01e      	b.n	1000c820 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c7e2:	78e0      	ldrb	r0, [r4, #3]
1000c7e4:	2800      	cmp	r0, #0
1000c7e6:	d013      	beq.n	1000c810 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c7e8:	0159      	lsls	r1, r3, #5
1000c7ea:	1ac9      	subs	r1, r1, r3
1000c7ec:	008b      	lsls	r3, r1, #2
1000c7ee:	4956      	ldr	r1, [pc, #344]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c7f0:	18c9      	adds	r1, r1, r3
1000c7f2:	311a      	adds	r1, #26
1000c7f4:	8820      	ldrh	r0, [r4, #0]
1000c7f6:	4b55      	ldr	r3, [pc, #340]	; (1000c94c <ble_slave_security_request_handler+0x1c8>)
1000c7f8:	4798      	blx	r3
1000c7fa:	2800      	cmp	r0, #0
1000c7fc:	d100      	bne.n	1000c800 <ble_slave_security_request_handler+0x7c>
1000c7fe:	e09b      	b.n	1000c938 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c800:	4853      	ldr	r0, [pc, #332]	; (1000c950 <ble_slave_security_request_handler+0x1cc>)
1000c802:	4b54      	ldr	r3, [pc, #336]	; (1000c954 <ble_slave_security_request_handler+0x1d0>)
1000c804:	4798      	blx	r3
1000c806:	4854      	ldr	r0, [pc, #336]	; (1000c958 <ble_slave_security_request_handler+0x1d4>)
1000c808:	4b54      	ldr	r3, [pc, #336]	; (1000c95c <ble_slave_security_request_handler+0x1d8>)
1000c80a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c80c:	20e2      	movs	r0, #226	; 0xe2
1000c80e:	e093      	b.n	1000c938 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c810:	015a      	lsls	r2, r3, #5
1000c812:	1ad3      	subs	r3, r2, r3
1000c814:	009b      	lsls	r3, r3, #2
1000c816:	4a4c      	ldr	r2, [pc, #304]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c818:	18d3      	adds	r3, r2, r3
1000c81a:	335e      	adds	r3, #94	; 0x5e
1000c81c:	2202      	movs	r2, #2
1000c81e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c820:	8825      	ldrh	r5, [r4, #0]
1000c822:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c824:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c826:	0016      	movs	r6, r2
1000c828:	8908      	ldrh	r0, [r1, #8]
1000c82a:	42a8      	cmp	r0, r5
1000c82c:	d10d      	bne.n	1000c84a <ble_slave_security_request_handler+0xc6>
1000c82e:	0008      	movs	r0, r1
1000c830:	305e      	adds	r0, #94	; 0x5e
1000c832:	7800      	ldrb	r0, [r0, #0]
1000c834:	2802      	cmp	r0, #2
1000c836:	d108      	bne.n	1000c84a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c838:	0152      	lsls	r2, r2, #5
1000c83a:	1b92      	subs	r2, r2, r6
1000c83c:	0096      	lsls	r6, r2, #2
1000c83e:	4a42      	ldr	r2, [pc, #264]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c840:	1992      	adds	r2, r2, r6
1000c842:	325e      	adds	r2, #94	; 0x5e
1000c844:	2103      	movs	r1, #3
1000c846:	7011      	strb	r1, [r2, #0]
			break;
1000c848:	e005      	b.n	1000c856 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c84a:	3301      	adds	r3, #1
1000c84c:	b2db      	uxtb	r3, r3
1000c84e:	3201      	adds	r2, #1
1000c850:	317c      	adds	r1, #124	; 0x7c
1000c852:	2b05      	cmp	r3, #5
1000c854:	d1e7      	bne.n	1000c826 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c856:	aa01      	add	r2, sp, #4
1000c858:	78e1      	ldrb	r1, [r4, #3]
1000c85a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c85c:	2101      	movs	r1, #1
1000c85e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c860:	3103      	adds	r1, #3
1000c862:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c864:	001f      	movs	r7, r3
1000c866:	015a      	lsls	r2, r3, #5
1000c868:	1ad2      	subs	r2, r2, r3
1000c86a:	0092      	lsls	r2, r2, #2
1000c86c:	4936      	ldr	r1, [pc, #216]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c86e:	5c52      	ldrb	r2, [r2, r1]
1000c870:	2a02      	cmp	r2, #2
1000c872:	d104      	bne.n	1000c87e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c874:	aa01      	add	r2, sp, #4
1000c876:	2103      	movs	r1, #3
1000c878:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c87a:	71d1      	strb	r1, [r2, #7]
1000c87c:	e003      	b.n	1000c886 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c87e:	aa01      	add	r2, sp, #4
1000c880:	2101      	movs	r1, #1
1000c882:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c884:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c886:	aa01      	add	r2, sp, #4
1000c888:	2110      	movs	r1, #16
1000c88a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c88c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c88e:	017a      	lsls	r2, r7, #5
1000c890:	1bd2      	subs	r2, r2, r7
1000c892:	0092      	lsls	r2, r2, #2
1000c894:	492c      	ldr	r1, [pc, #176]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c896:	188a      	adds	r2, r1, r2
1000c898:	7e12      	ldrb	r2, [r2, #24]
1000c89a:	2a40      	cmp	r2, #64	; 0x40
1000c89c:	d134      	bne.n	1000c908 <ble_slave_security_request_handler+0x184>
1000c89e:	015a      	lsls	r2, r3, #5
1000c8a0:	1ad3      	subs	r3, r2, r3
1000c8a2:	009b      	lsls	r3, r3, #2
1000c8a4:	469a      	mov	sl, r3
1000c8a6:	001e      	movs	r6, r3
1000c8a8:	3660      	adds	r6, #96	; 0x60
1000c8aa:	1876      	adds	r6, r6, r1
1000c8ac:	4655      	mov	r5, sl
1000c8ae:	3568      	adds	r5, #104	; 0x68
1000c8b0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c8b2:	4b2b      	ldr	r3, [pc, #172]	; (1000c960 <ble_slave_security_request_handler+0x1dc>)
1000c8b4:	4699      	mov	r9, r3
1000c8b6:	230f      	movs	r3, #15
1000c8b8:	4698      	mov	r8, r3
1000c8ba:	47c8      	blx	r9
1000c8bc:	4643      	mov	r3, r8
1000c8be:	4018      	ands	r0, r3
1000c8c0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c8c2:	47c8      	blx	r9
1000c8c4:	4643      	mov	r3, r8
1000c8c6:	4018      	ands	r0, r3
1000c8c8:	74b0      	strb	r0, [r6, #18]
1000c8ca:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c8cc:	42ae      	cmp	r6, r5
1000c8ce:	d1f4      	bne.n	1000c8ba <ble_slave_security_request_handler+0x136>
1000c8d0:	4656      	mov	r6, sl
1000c8d2:	3670      	adds	r6, #112	; 0x70
1000c8d4:	4a1c      	ldr	r2, [pc, #112]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c8d6:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c8d8:	4b21      	ldr	r3, [pc, #132]	; (1000c960 <ble_slave_security_request_handler+0x1dc>)
1000c8da:	4699      	mov	r9, r3
1000c8dc:	230f      	movs	r3, #15
1000c8de:	4698      	mov	r8, r3
1000c8e0:	47c8      	blx	r9
1000c8e2:	4643      	mov	r3, r8
1000c8e4:	4018      	ands	r0, r3
1000c8e6:	7028      	strb	r0, [r5, #0]
1000c8e8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c8ea:	42b5      	cmp	r5, r6
1000c8ec:	d1f8      	bne.n	1000c8e0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c8ee:	4b1c      	ldr	r3, [pc, #112]	; (1000c960 <ble_slave_security_request_handler+0x1dc>)
1000c8f0:	4798      	blx	r3
1000c8f2:	017b      	lsls	r3, r7, #5
1000c8f4:	1bdb      	subs	r3, r3, r7
1000c8f6:	009b      	lsls	r3, r3, #2
1000c8f8:	4a13      	ldr	r2, [pc, #76]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c8fa:	18d3      	adds	r3, r2, r3
1000c8fc:	001a      	movs	r2, r3
1000c8fe:	3270      	adds	r2, #112	; 0x70
1000c900:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c902:	337a      	adds	r3, #122	; 0x7a
1000c904:	2210      	movs	r2, #16
1000c906:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c908:	017a      	lsls	r2, r7, #5
1000c90a:	1bd7      	subs	r7, r2, r7
1000c90c:	00bf      	lsls	r7, r7, #2
1000c90e:	3760      	adds	r7, #96	; 0x60
1000c910:	4a0d      	ldr	r2, [pc, #52]	; (1000c948 <ble_slave_security_request_handler+0x1c4>)
1000c912:	18ba      	adds	r2, r7, r2
1000c914:	8820      	ldrh	r0, [r4, #0]
1000c916:	2300      	movs	r3, #0
1000c918:	a901      	add	r1, sp, #4
1000c91a:	4c12      	ldr	r4, [pc, #72]	; (1000c964 <ble_slave_security_request_handler+0x1e0>)
1000c91c:	47a0      	blx	r4
1000c91e:	2800      	cmp	r0, #0
1000c920:	d00a      	beq.n	1000c938 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c922:	ab01      	add	r3, sp, #4
1000c924:	2200      	movs	r2, #0
1000c926:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c928:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c92a:	4809      	ldr	r0, [pc, #36]	; (1000c950 <ble_slave_security_request_handler+0x1cc>)
1000c92c:	4b09      	ldr	r3, [pc, #36]	; (1000c954 <ble_slave_security_request_handler+0x1d0>)
1000c92e:	4798      	blx	r3
1000c930:	480d      	ldr	r0, [pc, #52]	; (1000c968 <ble_slave_security_request_handler+0x1e4>)
1000c932:	4b0a      	ldr	r3, [pc, #40]	; (1000c95c <ble_slave_security_request_handler+0x1d8>)
1000c934:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c936:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c938:	b004      	add	sp, #16
1000c93a:	bc1c      	pop	{r2, r3, r4}
1000c93c:	4690      	mov	r8, r2
1000c93e:	4699      	mov	r9, r3
1000c940:	46a2      	mov	sl, r4
1000c942:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c944:	10015909 	.word	0x10015909
1000c948:	1001a570 	.word	0x1001a570
1000c94c:	1000fed5 	.word	0x1000fed5
1000c950:	10016b98 	.word	0x10016b98
1000c954:	10015b71 	.word	0x10015b71
1000c958:	10017d10 	.word	0x10017d10
1000c95c:	10015a51 	.word	0x10015a51
1000c960:	10015b85 	.word	0x10015b85
1000c964:	1000fce9 	.word	0x1000fce9
1000c968:	10017d28 	.word	0x10017d28

1000c96c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c96e:	465f      	mov	r7, fp
1000c970:	4656      	mov	r6, sl
1000c972:	464d      	mov	r5, r9
1000c974:	4644      	mov	r4, r8
1000c976:	b4f0      	push	{r4, r5, r6, r7}
1000c978:	b085      	sub	sp, #20
1000c97a:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c97c:	8804      	ldrh	r4, [r0, #0]
1000c97e:	4a54      	ldr	r2, [pc, #336]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000c980:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c982:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c984:	8910      	ldrh	r0, [r2, #8]
1000c986:	42a0      	cmp	r0, r4
1000c988:	d10d      	bne.n	1000c9a6 <ble_pair_request_handler+0x3a>
1000c98a:	0010      	movs	r0, r2
1000c98c:	305e      	adds	r0, #94	; 0x5e
1000c98e:	7800      	ldrb	r0, [r0, #0]
1000c990:	2802      	cmp	r0, #2
1000c992:	d108      	bne.n	1000c9a6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c994:	014a      	lsls	r2, r1, #5
1000c996:	1a52      	subs	r2, r2, r1
1000c998:	0095      	lsls	r5, r2, #2
1000c99a:	4a4d      	ldr	r2, [pc, #308]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000c99c:	1952      	adds	r2, r2, r5
1000c99e:	325e      	adds	r2, #94	; 0x5e
1000c9a0:	2103      	movs	r1, #3
1000c9a2:	7011      	strb	r1, [r2, #0]
			break;
1000c9a4:	e005      	b.n	1000c9b2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c9a6:	3301      	adds	r3, #1
1000c9a8:	b2db      	uxtb	r3, r3
1000c9aa:	3101      	adds	r1, #1
1000c9ac:	327c      	adds	r2, #124	; 0x7c
1000c9ae:	2b05      	cmp	r3, #5
1000c9b0:	d1e8      	bne.n	1000c984 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c9b2:	aa01      	add	r2, sp, #4
1000c9b4:	2100      	movs	r1, #0
1000c9b6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c9b8:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c9ba:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c9bc:	2003      	movs	r0, #3
1000c9be:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c9c0:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c9c2:	001e      	movs	r6, r3
1000c9c4:	015a      	lsls	r2, r3, #5
1000c9c6:	1ad2      	subs	r2, r2, r3
1000c9c8:	0092      	lsls	r2, r2, #2
1000c9ca:	4941      	ldr	r1, [pc, #260]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000c9cc:	5c52      	ldrb	r2, [r2, r1]
1000c9ce:	2a02      	cmp	r2, #2
1000c9d0:	d104      	bne.n	1000c9dc <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c9d2:	aa01      	add	r2, sp, #4
1000c9d4:	2103      	movs	r1, #3
1000c9d6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c9d8:	71d1      	strb	r1, [r2, #7]
1000c9da:	e003      	b.n	1000c9e4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c9dc:	aa01      	add	r2, sp, #4
1000c9de:	2101      	movs	r1, #1
1000c9e0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c9e2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c9e4:	aa01      	add	r2, sp, #4
1000c9e6:	2110      	movs	r1, #16
1000c9e8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c9ea:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c9ec:	0172      	lsls	r2, r6, #5
1000c9ee:	1b92      	subs	r2, r2, r6
1000c9f0:	0092      	lsls	r2, r2, #2
1000c9f2:	4937      	ldr	r1, [pc, #220]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000c9f4:	188a      	adds	r2, r1, r2
1000c9f6:	7e12      	ldrb	r2, [r2, #24]
1000c9f8:	2a40      	cmp	r2, #64	; 0x40
1000c9fa:	d142      	bne.n	1000ca82 <ble_pair_request_handler+0x116>
1000c9fc:	015f      	lsls	r7, r3, #5
1000c9fe:	1afb      	subs	r3, r7, r3
1000ca00:	009b      	lsls	r3, r3, #2
1000ca02:	469b      	mov	fp, r3
1000ca04:	001c      	movs	r4, r3
1000ca06:	3460      	adds	r4, #96	; 0x60
1000ca08:	1864      	adds	r4, r4, r1
1000ca0a:	465d      	mov	r5, fp
1000ca0c:	3568      	adds	r5, #104	; 0x68
1000ca0e:	186d      	adds	r5, r5, r1
1000ca10:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ca12:	4b30      	ldr	r3, [pc, #192]	; (1000cad4 <ble_pair_request_handler+0x168>)
1000ca14:	469a      	mov	sl, r3
1000ca16:	230f      	movs	r3, #15
1000ca18:	4699      	mov	r9, r3
1000ca1a:	47d0      	blx	sl
1000ca1c:	464b      	mov	r3, r9
1000ca1e:	4018      	ands	r0, r3
1000ca20:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ca22:	47d0      	blx	sl
1000ca24:	464b      	mov	r3, r9
1000ca26:	4018      	ands	r0, r3
1000ca28:	74b8      	strb	r0, [r7, #18]
1000ca2a:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ca2c:	42af      	cmp	r7, r5
1000ca2e:	d1f4      	bne.n	1000ca1a <ble_pair_request_handler+0xae>
1000ca30:	465b      	mov	r3, fp
1000ca32:	3370      	adds	r3, #112	; 0x70
1000ca34:	4f26      	ldr	r7, [pc, #152]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000ca36:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ca38:	4b26      	ldr	r3, [pc, #152]	; (1000cad4 <ble_pair_request_handler+0x168>)
1000ca3a:	469a      	mov	sl, r3
1000ca3c:	230f      	movs	r3, #15
1000ca3e:	4699      	mov	r9, r3
1000ca40:	47d0      	blx	sl
1000ca42:	464b      	mov	r3, r9
1000ca44:	4018      	ands	r0, r3
1000ca46:	7028      	strb	r0, [r5, #0]
1000ca48:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ca4a:	42bd      	cmp	r5, r7
1000ca4c:	d1f8      	bne.n	1000ca40 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000ca4e:	4822      	ldr	r0, [pc, #136]	; (1000cad8 <ble_pair_request_handler+0x16c>)
1000ca50:	4b22      	ldr	r3, [pc, #136]	; (1000cadc <ble_pair_request_handler+0x170>)
1000ca52:	4798      	blx	r3
1000ca54:	4822      	ldr	r0, [pc, #136]	; (1000cae0 <ble_pair_request_handler+0x174>)
1000ca56:	4b23      	ldr	r3, [pc, #140]	; (1000cae4 <ble_pair_request_handler+0x178>)
1000ca58:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000ca5a:	4d22      	ldr	r5, [pc, #136]	; (1000cae4 <ble_pair_request_handler+0x178>)
1000ca5c:	7821      	ldrb	r1, [r4, #0]
1000ca5e:	4822      	ldr	r0, [pc, #136]	; (1000cae8 <ble_pair_request_handler+0x17c>)
1000ca60:	47a8      	blx	r5
1000ca62:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000ca64:	42bc      	cmp	r4, r7
1000ca66:	d1f9      	bne.n	1000ca5c <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ca68:	4b1a      	ldr	r3, [pc, #104]	; (1000cad4 <ble_pair_request_handler+0x168>)
1000ca6a:	4798      	blx	r3
1000ca6c:	0173      	lsls	r3, r6, #5
1000ca6e:	1b9b      	subs	r3, r3, r6
1000ca70:	009b      	lsls	r3, r3, #2
1000ca72:	4a17      	ldr	r2, [pc, #92]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000ca74:	18d3      	adds	r3, r2, r3
1000ca76:	001a      	movs	r2, r3
1000ca78:	3270      	adds	r2, #112	; 0x70
1000ca7a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ca7c:	337a      	adds	r3, #122	; 0x7a
1000ca7e:	2210      	movs	r2, #16
1000ca80:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000ca82:	4815      	ldr	r0, [pc, #84]	; (1000cad8 <ble_pair_request_handler+0x16c>)
1000ca84:	4b15      	ldr	r3, [pc, #84]	; (1000cadc <ble_pair_request_handler+0x170>)
1000ca86:	4798      	blx	r3
1000ca88:	4818      	ldr	r0, [pc, #96]	; (1000caec <ble_pair_request_handler+0x180>)
1000ca8a:	4b16      	ldr	r3, [pc, #88]	; (1000cae4 <ble_pair_request_handler+0x178>)
1000ca8c:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000ca8e:	0173      	lsls	r3, r6, #5
1000ca90:	1b9b      	subs	r3, r3, r6
1000ca92:	009b      	lsls	r3, r3, #2
1000ca94:	3360      	adds	r3, #96	; 0x60
1000ca96:	4a0e      	ldr	r2, [pc, #56]	; (1000cad0 <ble_pair_request_handler+0x164>)
1000ca98:	189a      	adds	r2, r3, r2
1000ca9a:	4643      	mov	r3, r8
1000ca9c:	8818      	ldrh	r0, [r3, #0]
1000ca9e:	2300      	movs	r3, #0
1000caa0:	a901      	add	r1, sp, #4
1000caa2:	4c13      	ldr	r4, [pc, #76]	; (1000caf0 <ble_pair_request_handler+0x184>)
1000caa4:	47a0      	blx	r4
1000caa6:	2800      	cmp	r0, #0
1000caa8:	d00a      	beq.n	1000cac0 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000caaa:	ab01      	add	r3, sp, #4
1000caac:	2200      	movs	r2, #0
1000caae:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000cab0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000cab2:	4809      	ldr	r0, [pc, #36]	; (1000cad8 <ble_pair_request_handler+0x16c>)
1000cab4:	4b09      	ldr	r3, [pc, #36]	; (1000cadc <ble_pair_request_handler+0x170>)
1000cab6:	4798      	blx	r3
1000cab8:	480e      	ldr	r0, [pc, #56]	; (1000caf4 <ble_pair_request_handler+0x188>)
1000caba:	4b0a      	ldr	r3, [pc, #40]	; (1000cae4 <ble_pair_request_handler+0x178>)
1000cabc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cabe:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000cac0:	b005      	add	sp, #20
1000cac2:	bc3c      	pop	{r2, r3, r4, r5}
1000cac4:	4690      	mov	r8, r2
1000cac6:	4699      	mov	r9, r3
1000cac8:	46a2      	mov	sl, r4
1000caca:	46ab      	mov	fp, r5
1000cacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cace:	46c0      	nop			; (mov r8, r8)
1000cad0:	1001a570 	.word	0x1001a570
1000cad4:	10015b85 	.word	0x10015b85
1000cad8:	10016b98 	.word	0x10016b98
1000cadc:	10015b71 	.word	0x10015b71
1000cae0:	10017d54 	.word	0x10017d54
1000cae4:	10015a51 	.word	0x10015a51
1000cae8:	10017d64 	.word	0x10017d64
1000caec:	10017d6c 	.word	0x10017d6c
1000caf0:	1000fce9 	.word	0x1000fce9
1000caf4:	10017d88 	.word	0x10017d88

1000caf8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000caf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cafa:	b085      	sub	sp, #20
1000cafc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000cafe:	2206      	movs	r2, #6
1000cb00:	493d      	ldr	r1, [pc, #244]	; (1000cbf8 <ble_pair_key_request_handler+0x100>)
1000cb02:	a802      	add	r0, sp, #8
1000cb04:	4e3d      	ldr	r6, [pc, #244]	; (1000cbfc <ble_pair_key_request_handler+0x104>)
1000cb06:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000cb08:	ac01      	add	r4, sp, #4
1000cb0a:	2204      	movs	r2, #4
1000cb0c:	0029      	movs	r1, r5
1000cb0e:	0020      	movs	r0, r4
1000cb10:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000cb12:	78e3      	ldrb	r3, [r4, #3]
1000cb14:	2b00      	cmp	r3, #0
1000cb16:	d162      	bne.n	1000cbde <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000cb18:	4839      	ldr	r0, [pc, #228]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cb1a:	4b3a      	ldr	r3, [pc, #232]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cb1c:	4798      	blx	r3
1000cb1e:	483a      	ldr	r0, [pc, #232]	; (1000cc08 <ble_pair_key_request_handler+0x110>)
1000cb20:	4b3a      	ldr	r3, [pc, #232]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cb22:	4798      	blx	r3
1000cb24:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000cb26:	4c3a      	ldr	r4, [pc, #232]	; (1000cc10 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000cb28:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000cb2a:	201e      	movs	r0, #30
1000cb2c:	47a0      	blx	r4
1000cb2e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000cb30:	2b00      	cmp	r3, #0
1000cb32:	d11a      	bne.n	1000cb6a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000cb34:	4f32      	ldr	r7, [pc, #200]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cb36:	0038      	movs	r0, r7
1000cb38:	4e32      	ldr	r6, [pc, #200]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cb3a:	47b0      	blx	r6
1000cb3c:	4835      	ldr	r0, [pc, #212]	; (1000cc14 <ble_pair_key_request_handler+0x11c>)
1000cb3e:	4c33      	ldr	r4, [pc, #204]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cb40:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000cb42:	0038      	movs	r0, r7
1000cb44:	47b0      	blx	r6
1000cb46:	4834      	ldr	r0, [pc, #208]	; (1000cc18 <ble_pair_key_request_handler+0x120>)
1000cb48:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000cb4a:	8828      	ldrh	r0, [r5, #0]
1000cb4c:	2113      	movs	r1, #19
1000cb4e:	4b33      	ldr	r3, [pc, #204]	; (1000cc1c <ble_pair_key_request_handler+0x124>)
1000cb50:	4798      	blx	r3
1000cb52:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000cb54:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000cb56:	2b00      	cmp	r3, #0
1000cb58:	d04c      	beq.n	1000cbf4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000cb5a:	4829      	ldr	r0, [pc, #164]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cb5c:	4b29      	ldr	r3, [pc, #164]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cb5e:	4798      	blx	r3
1000cb60:	482f      	ldr	r0, [pc, #188]	; (1000cc20 <ble_pair_key_request_handler+0x128>)
1000cb62:	4b2a      	ldr	r3, [pc, #168]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cb64:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000cb66:	20e2      	movs	r0, #226	; 0xe2
1000cb68:	e044      	b.n	1000cbf4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000cb6a:	001a      	movs	r2, r3
1000cb6c:	3a30      	subs	r2, #48	; 0x30
1000cb6e:	2a09      	cmp	r2, #9
1000cb70:	d8db      	bhi.n	1000cb2a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000cb72:	aa02      	add	r2, sp, #8
1000cb74:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000cb76:	4038      	ands	r0, r7
1000cb78:	4b2a      	ldr	r3, [pc, #168]	; (1000cc24 <ble_pair_key_request_handler+0x12c>)
1000cb7a:	4798      	blx	r3
1000cb7c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000cb7e:	2e06      	cmp	r6, #6
1000cb80:	d026      	beq.n	1000cbd0 <ble_pair_key_request_handler+0xd8>
1000cb82:	e7d2      	b.n	1000cb2a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000cb84:	481e      	ldr	r0, [pc, #120]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cb86:	4b1f      	ldr	r3, [pc, #124]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cb88:	4798      	blx	r3
1000cb8a:	4827      	ldr	r0, [pc, #156]	; (1000cc28 <ble_pair_key_request_handler+0x130>)
1000cb8c:	4b1f      	ldr	r3, [pc, #124]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cb8e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000cb90:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000cb92:	4e24      	ldr	r6, [pc, #144]	; (1000cc24 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000cb94:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000cb96:	5ce0      	ldrb	r0, [r4, r3]
1000cb98:	47b0      	blx	r6
1000cb9a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000cb9c:	2c06      	cmp	r4, #6
1000cb9e:	d1f9      	bne.n	1000cb94 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000cba0:	ab01      	add	r3, sp, #4
1000cba2:	7899      	ldrb	r1, [r3, #2]
1000cba4:	8828      	ldrh	r0, [r5, #0]
1000cba6:	aa02      	add	r2, sp, #8
1000cba8:	4b20      	ldr	r3, [pc, #128]	; (1000cc2c <ble_pair_key_request_handler+0x134>)
1000cbaa:	4798      	blx	r3
1000cbac:	2800      	cmp	r0, #0
1000cbae:	d021      	beq.n	1000cbf4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000cbb0:	4813      	ldr	r0, [pc, #76]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cbb2:	4b14      	ldr	r3, [pc, #80]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cbb4:	4798      	blx	r3
1000cbb6:	481e      	ldr	r0, [pc, #120]	; (1000cc30 <ble_pair_key_request_handler+0x138>)
1000cbb8:	4b14      	ldr	r3, [pc, #80]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cbba:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000cbbc:	2000      	movs	r0, #0
1000cbbe:	e019      	b.n	1000cbf4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000cbc0:	480f      	ldr	r0, [pc, #60]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cbc2:	4b10      	ldr	r3, [pc, #64]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cbc4:	4798      	blx	r3
1000cbc6:	481b      	ldr	r0, [pc, #108]	; (1000cc34 <ble_pair_key_request_handler+0x13c>)
1000cbc8:	4b10      	ldr	r3, [pc, #64]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cbca:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000cbcc:	2000      	movs	r0, #0
1000cbce:	e011      	b.n	1000cbf4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000cbd0:	480b      	ldr	r0, [pc, #44]	; (1000cc00 <ble_pair_key_request_handler+0x108>)
1000cbd2:	4b0c      	ldr	r3, [pc, #48]	; (1000cc04 <ble_pair_key_request_handler+0x10c>)
1000cbd4:	4798      	blx	r3
1000cbd6:	4818      	ldr	r0, [pc, #96]	; (1000cc38 <ble_pair_key_request_handler+0x140>)
1000cbd8:	4b0c      	ldr	r3, [pc, #48]	; (1000cc0c <ble_pair_key_request_handler+0x114>)
1000cbda:	4798      	blx	r3
1000cbdc:	e7d8      	b.n	1000cb90 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000cbde:	ab01      	add	r3, sp, #4
1000cbe0:	885a      	ldrh	r2, [r3, #2]
1000cbe2:	2380      	movs	r3, #128	; 0x80
1000cbe4:	005b      	lsls	r3, r3, #1
1000cbe6:	429a      	cmp	r2, r3
1000cbe8:	d0cc      	beq.n	1000cb84 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000cbea:	ab01      	add	r3, sp, #4
1000cbec:	789b      	ldrb	r3, [r3, #2]
1000cbee:	2b01      	cmp	r3, #1
1000cbf0:	d0e6      	beq.n	1000cbc0 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000cbf2:	2000      	movs	r0, #0
}
1000cbf4:	b005      	add	sp, #20
1000cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbf8:	10017970 	.word	0x10017970
1000cbfc:	100158f7 	.word	0x100158f7
1000cc00:	10016b98 	.word	0x10016b98
1000cc04:	10015b71 	.word	0x10015b71
1000cc08:	10017db0 	.word	0x10017db0
1000cc0c:	10015a51 	.word	0x10015a51
1000cc10:	1000d915 	.word	0x1000d915
1000cc14:	10017dd8 	.word	0x10017dd8
1000cc18:	10017de4 	.word	0x10017de4
1000cc1c:	1000f2f1 	.word	0x1000f2f1
1000cc20:	10017c90 	.word	0x10017c90
1000cc24:	10015a85 	.word	0x10015a85
1000cc28:	10017df8 	.word	0x10017df8
1000cc2c:	1000fe19 	.word	0x1000fe19
1000cc30:	10017e30 	.word	0x10017e30
1000cc34:	10017e48 	.word	0x10017e48
1000cc38:	10017e64 	.word	0x10017e64

1000cc3c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc3e:	465f      	mov	r7, fp
1000cc40:	4656      	mov	r6, sl
1000cc42:	464d      	mov	r5, r9
1000cc44:	b4e0      	push	{r5, r6, r7}
1000cc46:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000cc48:	8800      	ldrh	r0, [r0, #0]
1000cc4a:	4b49      	ldr	r3, [pc, #292]	; (1000cd70 <ble_encryption_request_handler+0x134>)
1000cc4c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc4e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000cc50:	8919      	ldrh	r1, [r3, #8]
1000cc52:	4281      	cmp	r1, r0
1000cc54:	d137      	bne.n	1000ccc6 <ble_encryption_request_handler+0x8a>
1000cc56:	0019      	movs	r1, r3
1000cc58:	315e      	adds	r1, #94	; 0x5e
1000cc5a:	7809      	ldrb	r1, [r1, #0]
1000cc5c:	2901      	cmp	r1, #1
1000cc5e:	d932      	bls.n	1000ccc6 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000cc60:	4f43      	ldr	r7, [pc, #268]	; (1000cd70 <ble_encryption_request_handler+0x134>)
1000cc62:	0153      	lsls	r3, r2, #5
1000cc64:	1a9d      	subs	r5, r3, r2
1000cc66:	00ad      	lsls	r5, r5, #2
1000cc68:	197d      	adds	r5, r7, r5
1000cc6a:	355e      	adds	r5, #94	; 0x5e
1000cc6c:	2306      	movs	r3, #6
1000cc6e:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000cc70:	4840      	ldr	r0, [pc, #256]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cc72:	4b41      	ldr	r3, [pc, #260]	; (1000cd78 <ble_encryption_request_handler+0x13c>)
1000cc74:	469a      	mov	sl, r3
1000cc76:	4798      	blx	r3
1000cc78:	8831      	ldrh	r1, [r6, #0]
1000cc7a:	4840      	ldr	r0, [pc, #256]	; (1000cd7c <ble_encryption_request_handler+0x140>)
1000cc7c:	4b40      	ldr	r3, [pc, #256]	; (1000cd80 <ble_encryption_request_handler+0x144>)
1000cc7e:	4699      	mov	r9, r3
1000cc80:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000cc82:	483c      	ldr	r0, [pc, #240]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cc84:	47d0      	blx	sl
1000cc86:	0163      	lsls	r3, r4, #5
1000cc88:	1b1b      	subs	r3, r3, r4
1000cc8a:	009b      	lsls	r3, r3, #2
1000cc8c:	18ff      	adds	r7, r7, r3
1000cc8e:	2370      	movs	r3, #112	; 0x70
1000cc90:	469b      	mov	fp, r3
1000cc92:	44bb      	add	fp, r7
1000cc94:	465b      	mov	r3, fp
1000cc96:	8819      	ldrh	r1, [r3, #0]
1000cc98:	483a      	ldr	r0, [pc, #232]	; (1000cd84 <ble_encryption_request_handler+0x148>)
1000cc9a:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000cc9c:	4835      	ldr	r0, [pc, #212]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cc9e:	47d0      	blx	sl
1000cca0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000cca2:	4839      	ldr	r0, [pc, #228]	; (1000cd88 <ble_encryption_request_handler+0x14c>)
1000cca4:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000cca6:	4833      	ldr	r0, [pc, #204]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cca8:	47d0      	blx	sl
1000ccaa:	8871      	ldrh	r1, [r6, #2]
1000ccac:	4837      	ldr	r0, [pc, #220]	; (1000cd8c <ble_encryption_request_handler+0x150>)
1000ccae:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000ccb0:	4830      	ldr	r0, [pc, #192]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000ccb2:	47d0      	blx	sl
1000ccb4:	0021      	movs	r1, r4
1000ccb6:	4836      	ldr	r0, [pc, #216]	; (1000cd90 <ble_encryption_request_handler+0x154>)
1000ccb8:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000ccba:	465b      	mov	r3, fp
1000ccbc:	881a      	ldrh	r2, [r3, #0]
1000ccbe:	8873      	ldrh	r3, [r6, #2]
1000ccc0:	429a      	cmp	r2, r3
1000ccc2:	d12a      	bne.n	1000cd1a <ble_encryption_request_handler+0xde>
1000ccc4:	e006      	b.n	1000ccd4 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ccc6:	3401      	adds	r4, #1
1000ccc8:	b2e4      	uxtb	r4, r4
1000ccca:	3201      	adds	r2, #1
1000cccc:	337c      	adds	r3, #124	; 0x7c
1000ccce:	2c05      	cmp	r4, #5
1000ccd0:	d1be      	bne.n	1000cc50 <ble_encryption_request_handler+0x14>
1000ccd2:	e022      	b.n	1000cd1a <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000ccd4:	0161      	lsls	r1, r4, #5
1000ccd6:	1b09      	subs	r1, r1, r4
1000ccd8:	0089      	lsls	r1, r1, #2
1000ccda:	4b25      	ldr	r3, [pc, #148]	; (1000cd70 <ble_encryption_request_handler+0x134>)
1000ccdc:	1859      	adds	r1, r3, r1
1000ccde:	3172      	adds	r1, #114	; 0x72
1000cce0:	1d30      	adds	r0, r6, #4
1000cce2:	2208      	movs	r2, #8
1000cce4:	4b2b      	ldr	r3, [pc, #172]	; (1000cd94 <ble_encryption_request_handler+0x158>)
1000cce6:	4798      	blx	r3
1000cce8:	2800      	cmp	r0, #0
1000ccea:	d116      	bne.n	1000cd1a <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000ccec:	4821      	ldr	r0, [pc, #132]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000ccee:	4b22      	ldr	r3, [pc, #136]	; (1000cd78 <ble_encryption_request_handler+0x13c>)
1000ccf0:	4798      	blx	r3
1000ccf2:	4829      	ldr	r0, [pc, #164]	; (1000cd98 <ble_encryption_request_handler+0x15c>)
1000ccf4:	4b22      	ldr	r3, [pc, #136]	; (1000cd80 <ble_encryption_request_handler+0x144>)
1000ccf6:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000ccf8:	0162      	lsls	r2, r4, #5
1000ccfa:	1b13      	subs	r3, r2, r4
1000ccfc:	009b      	lsls	r3, r3, #2
1000ccfe:	3360      	adds	r3, #96	; 0x60
1000cd00:	491b      	ldr	r1, [pc, #108]	; (1000cd70 <ble_encryption_request_handler+0x134>)
1000cd02:	185b      	adds	r3, r3, r1
1000cd04:	1b12      	subs	r2, r2, r4
1000cd06:	0092      	lsls	r2, r2, #2
1000cd08:	188a      	adds	r2, r1, r2
1000cd0a:	7d11      	ldrb	r1, [r2, #20]
1000cd0c:	8830      	ldrh	r0, [r6, #0]
1000cd0e:	2201      	movs	r2, #1
1000cd10:	4c22      	ldr	r4, [pc, #136]	; (1000cd9c <ble_encryption_request_handler+0x160>)
1000cd12:	47a0      	blx	r4
1000cd14:	1e04      	subs	r4, r0, #0
1000cd16:	d01e      	beq.n	1000cd56 <ble_encryption_request_handler+0x11a>
1000cd18:	e015      	b.n	1000cd46 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000cd1a:	4f16      	ldr	r7, [pc, #88]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cd1c:	0038      	movs	r0, r7
1000cd1e:	4e16      	ldr	r6, [pc, #88]	; (1000cd78 <ble_encryption_request_handler+0x13c>)
1000cd20:	47b0      	blx	r6
1000cd22:	481f      	ldr	r0, [pc, #124]	; (1000cda0 <ble_encryption_request_handler+0x164>)
1000cd24:	4d16      	ldr	r5, [pc, #88]	; (1000cd80 <ble_encryption_request_handler+0x144>)
1000cd26:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000cd28:	0038      	movs	r0, r7
1000cd2a:	47b0      	blx	r6
1000cd2c:	481d      	ldr	r0, [pc, #116]	; (1000cda4 <ble_encryption_request_handler+0x168>)
1000cd2e:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000cd30:	0163      	lsls	r3, r4, #5
1000cd32:	1b1c      	subs	r4, r3, r4
1000cd34:	00a4      	lsls	r4, r4, #2
1000cd36:	4b0e      	ldr	r3, [pc, #56]	; (1000cd70 <ble_encryption_request_handler+0x134>)
1000cd38:	191c      	adds	r4, r3, r4
1000cd3a:	8920      	ldrh	r0, [r4, #8]
1000cd3c:	2105      	movs	r1, #5
1000cd3e:	4b1a      	ldr	r3, [pc, #104]	; (1000cda8 <ble_encryption_request_handler+0x16c>)
1000cd40:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cd42:	24e2      	movs	r4, #226	; 0xe2
1000cd44:	e00d      	b.n	1000cd62 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000cd46:	480b      	ldr	r0, [pc, #44]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cd48:	4b0b      	ldr	r3, [pc, #44]	; (1000cd78 <ble_encryption_request_handler+0x13c>)
1000cd4a:	4798      	blx	r3
1000cd4c:	4817      	ldr	r0, [pc, #92]	; (1000cdac <ble_encryption_request_handler+0x170>)
1000cd4e:	4b0c      	ldr	r3, [pc, #48]	; (1000cd80 <ble_encryption_request_handler+0x144>)
1000cd50:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000cd52:	2400      	movs	r4, #0
1000cd54:	e005      	b.n	1000cd62 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000cd56:	4807      	ldr	r0, [pc, #28]	; (1000cd74 <ble_encryption_request_handler+0x138>)
1000cd58:	4b07      	ldr	r3, [pc, #28]	; (1000cd78 <ble_encryption_request_handler+0x13c>)
1000cd5a:	4798      	blx	r3
1000cd5c:	4814      	ldr	r0, [pc, #80]	; (1000cdb0 <ble_encryption_request_handler+0x174>)
1000cd5e:	4b08      	ldr	r3, [pc, #32]	; (1000cd80 <ble_encryption_request_handler+0x144>)
1000cd60:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000cd62:	0020      	movs	r0, r4
1000cd64:	bc1c      	pop	{r2, r3, r4}
1000cd66:	4691      	mov	r9, r2
1000cd68:	469a      	mov	sl, r3
1000cd6a:	46a3      	mov	fp, r4
1000cd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd6e:	46c0      	nop			; (mov r8, r8)
1000cd70:	1001a570 	.word	0x1001a570
1000cd74:	10016b98 	.word	0x10016b98
1000cd78:	10015b71 	.word	0x10015b71
1000cd7c:	10017e78 	.word	0x10017e78
1000cd80:	10015a51 	.word	0x10015a51
1000cd84:	10017ea4 	.word	0x10017ea4
1000cd88:	10017eb8 	.word	0x10017eb8
1000cd8c:	10017ecc 	.word	0x10017ecc
1000cd90:	10017edc 	.word	0x10017edc
1000cd94:	100158d9 	.word	0x100158d9
1000cd98:	10017eec 	.word	0x10017eec
1000cd9c:	1000ff4d 	.word	0x1000ff4d
1000cda0:	10017f00 	.word	0x10017f00
1000cda4:	10017f38 	.word	0x10017f38
1000cda8:	1000f2f1 	.word	0x1000f2f1
1000cdac:	10017f90 	.word	0x10017f90
1000cdb0:	10017fb0 	.word	0x10017fb0

1000cdb4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000cdb4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000cdb6:	2a00      	cmp	r2, #0
1000cdb8:	d047      	beq.n	1000ce4a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000cdba:	2906      	cmp	r1, #6
1000cdbc:	d847      	bhi.n	1000ce4e <ble_mgr_events_callback_handler+0x9a>
1000cdbe:	0089      	lsls	r1, r1, #2
1000cdc0:	4b28      	ldr	r3, [pc, #160]	; (1000ce64 <ble_mgr_events_callback_handler+0xb0>)
1000cdc2:	585b      	ldr	r3, [r3, r1]
1000cdc4:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000cdc6:	4b28      	ldr	r3, [pc, #160]	; (1000ce68 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000cdc8:	2405      	movs	r4, #5
1000cdca:	e00a      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000cdcc:	4b27      	ldr	r3, [pc, #156]	; (1000ce6c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000cdce:	2401      	movs	r4, #1
			}
			break;
1000cdd0:	e007      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000cdd2:	4b27      	ldr	r3, [pc, #156]	; (1000ce70 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000cdd4:	2405      	movs	r4, #5
			}
			break;
1000cdd6:	e004      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000cdd8:	4b26      	ldr	r3, [pc, #152]	; (1000ce74 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000cdda:	2401      	movs	r4, #1
			}
			break;
1000cddc:	e001      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000cdde:	4b26      	ldr	r3, [pc, #152]	; (1000ce78 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000cde0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000cde2:	2800      	cmp	r0, #0
1000cde4:	d116      	bne.n	1000ce14 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cde6:	6819      	ldr	r1, [r3, #0]
1000cde8:	2900      	cmp	r1, #0
1000cdea:	d10b      	bne.n	1000ce04 <ble_mgr_events_callback_handler+0x50>
1000cdec:	e006      	b.n	1000cdfc <ble_mgr_events_callback_handler+0x48>
1000cdee:	001d      	movs	r5, r3
1000cdf0:	3304      	adds	r3, #4
1000cdf2:	1f18      	subs	r0, r3, #4
1000cdf4:	6800      	ldr	r0, [r0, #0]
1000cdf6:	2800      	cmp	r0, #0
1000cdf8:	d106      	bne.n	1000ce08 <ble_mgr_events_callback_handler+0x54>
1000cdfa:	e000      	b.n	1000cdfe <ble_mgr_events_callback_handler+0x4a>
1000cdfc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000cdfe:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000ce00:	2101      	movs	r1, #1
						break;
1000ce02:	e02c      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
1000ce04:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ce06:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ce08:	3101      	adds	r1, #1
1000ce0a:	b2c9      	uxtb	r1, r1
1000ce0c:	42a1      	cmp	r1, r4
1000ce0e:	d3ee      	bcc.n	1000cdee <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ce10:	2100      	movs	r1, #0
1000ce12:	e024      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
1000ce14:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000ce16:	2801      	cmp	r0, #1
1000ce18:	d121      	bne.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ce1a:	6819      	ldr	r1, [r3, #0]
1000ce1c:	428a      	cmp	r2, r1
1000ce1e:	d10c      	bne.n	1000ce3a <ble_mgr_events_callback_handler+0x86>
1000ce20:	e006      	b.n	1000ce30 <ble_mgr_events_callback_handler+0x7c>
1000ce22:	001d      	movs	r5, r3
1000ce24:	3304      	adds	r3, #4
1000ce26:	1f18      	subs	r0, r3, #4
1000ce28:	6800      	ldr	r0, [r0, #0]
1000ce2a:	4282      	cmp	r2, r0
1000ce2c:	d107      	bne.n	1000ce3e <ble_mgr_events_callback_handler+0x8a>
1000ce2e:	e000      	b.n	1000ce32 <ble_mgr_events_callback_handler+0x7e>
1000ce30:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000ce32:	2300      	movs	r3, #0
1000ce34:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000ce36:	2101      	movs	r1, #1
						break;
1000ce38:	e011      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
1000ce3a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ce3c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ce3e:	3101      	adds	r1, #1
1000ce40:	b2c9      	uxtb	r1, r1
1000ce42:	42a1      	cmp	r1, r4
1000ce44:	d3ed      	bcc.n	1000ce22 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ce46:	2100      	movs	r1, #0
1000ce48:	e009      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000ce4a:	2100      	movs	r1, #0
1000ce4c:	e007      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000ce4e:	2100      	movs	r1, #0
1000ce50:	e005      	b.n	1000ce5e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000ce52:	4b0a      	ldr	r3, [pc, #40]	; (1000ce7c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000ce54:	2405      	movs	r4, #5
1000ce56:	e7c4      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000ce58:	4b09      	ldr	r3, [pc, #36]	; (1000ce80 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000ce5a:	2401      	movs	r4, #1
1000ce5c:	e7c1      	b.n	1000cde2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000ce5e:	0008      	movs	r0, r1
1000ce60:	bd30      	pop	{r4, r5, pc}
1000ce62:	46c0      	nop			; (mov r8, r8)
1000ce64:	10017864 	.word	0x10017864
1000ce68:	1001a55c 	.word	0x1001a55c
1000ce6c:	1001a558 	.word	0x1001a558
1000ce70:	1001a7e0 	.word	0x1001a7e0
1000ce74:	1001ad94 	.word	0x1001ad94
1000ce78:	1001a7f4 	.word	0x1001a7f4
1000ce7c:	1001a808 	.word	0x1001a808
1000ce80:	1001a850 	.word	0x1001a850

1000ce84 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000ce84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce86:	465f      	mov	r7, fp
1000ce88:	4656      	mov	r6, sl
1000ce8a:	464d      	mov	r5, r9
1000ce8c:	4644      	mov	r4, r8
1000ce8e:	b4f0      	push	{r4, r5, r6, r7}
1000ce90:	b091      	sub	sp, #68	; 0x44
1000ce92:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ce94:	2400      	movs	r4, #0
1000ce96:	4b7e      	ldr	r3, [pc, #504]	; (1000d090 <ble_device_init+0x20c>)
1000ce98:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ce9a:	2207      	movs	r2, #7
1000ce9c:	2100      	movs	r1, #0
1000ce9e:	487d      	ldr	r0, [pc, #500]	; (1000d094 <ble_device_init+0x210>)
1000cea0:	4e7d      	ldr	r6, [pc, #500]	; (1000d098 <ble_device_init+0x214>)
1000cea2:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000cea4:	2212      	movs	r2, #18
1000cea6:	2100      	movs	r1, #0
1000cea8:	487c      	ldr	r0, [pc, #496]	; (1000d09c <ble_device_init+0x218>)
1000ceaa:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000ceac:	4a7c      	ldr	r2, [pc, #496]	; (1000d0a0 <ble_device_init+0x21c>)
1000ceae:	2100      	movs	r1, #0
1000ceb0:	487c      	ldr	r0, [pc, #496]	; (1000d0a4 <ble_device_init+0x220>)
1000ceb2:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000ceb4:	4b7c      	ldr	r3, [pc, #496]	; (1000d0a8 <ble_device_init+0x224>)
1000ceb6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ceb8:	22cd      	movs	r2, #205	; 0xcd
1000ceba:	0092      	lsls	r2, r2, #2
1000cebc:	2100      	movs	r1, #0
1000cebe:	487b      	ldr	r0, [pc, #492]	; (1000d0ac <ble_device_init+0x228>)
1000cec0:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000cec2:	4b7b      	ldr	r3, [pc, #492]	; (1000d0b0 <ble_device_init+0x22c>)
1000cec4:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cec6:	2283      	movs	r2, #131	; 0x83
1000cec8:	0092      	lsls	r2, r2, #2
1000ceca:	2100      	movs	r1, #0
1000cecc:	4879      	ldr	r0, [pc, #484]	; (1000d0b4 <ble_device_init+0x230>)
1000cece:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ced0:	4b79      	ldr	r3, [pc, #484]	; (1000d0b8 <ble_device_init+0x234>)
1000ced2:	469b      	mov	fp, r3
1000ced4:	2380      	movs	r3, #128	; 0x80
1000ced6:	00db      	lsls	r3, r3, #3
1000ced8:	469a      	mov	sl, r3
1000ceda:	001a      	movs	r2, r3
1000cedc:	2100      	movs	r1, #0
1000cede:	4658      	mov	r0, fp
1000cee0:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cee2:	4b76      	ldr	r3, [pc, #472]	; (1000d0bc <ble_device_init+0x238>)
1000cee4:	4699      	mov	r9, r3
1000cee6:	2380      	movs	r3, #128	; 0x80
1000cee8:	015b      	lsls	r3, r3, #5
1000ceea:	4698      	mov	r8, r3
1000ceec:	001a      	movs	r2, r3
1000ceee:	2100      	movs	r1, #0
1000cef0:	4648      	mov	r0, r9
1000cef2:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cef4:	4f72      	ldr	r7, [pc, #456]	; (1000d0c0 <ble_device_init+0x23c>)
1000cef6:	221c      	movs	r2, #28
1000cef8:	2100      	movs	r1, #0
1000cefa:	0038      	movs	r0, r7
1000cefc:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cefe:	465b      	mov	r3, fp
1000cf00:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cf02:	4653      	mov	r3, sl
1000cf04:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cf06:	464b      	mov	r3, r9
1000cf08:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cf0a:	4643      	mov	r3, r8
1000cf0c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cf0e:	4b6d      	ldr	r3, [pc, #436]	; (1000d0c4 <ble_device_init+0x240>)
1000cf10:	601c      	str	r4, [r3, #0]
1000cf12:	605c      	str	r4, [r3, #4]
1000cf14:	609c      	str	r4, [r3, #8]
1000cf16:	60dc      	str	r4, [r3, #12]
1000cf18:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cf1a:	4b6b      	ldr	r3, [pc, #428]	; (1000d0c8 <ble_device_init+0x244>)
1000cf1c:	601c      	str	r4, [r3, #0]
1000cf1e:	605c      	str	r4, [r3, #4]
1000cf20:	609c      	str	r4, [r3, #8]
1000cf22:	60dc      	str	r4, [r3, #12]
1000cf24:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cf26:	4b69      	ldr	r3, [pc, #420]	; (1000d0cc <ble_device_init+0x248>)
1000cf28:	601c      	str	r4, [r3, #0]
1000cf2a:	605c      	str	r4, [r3, #4]
1000cf2c:	609c      	str	r4, [r3, #8]
1000cf2e:	60dc      	str	r4, [r3, #12]
1000cf30:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000cf32:	4b67      	ldr	r3, [pc, #412]	; (1000d0d0 <ble_device_init+0x24c>)
1000cf34:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000cf36:	4b67      	ldr	r3, [pc, #412]	; (1000d0d4 <ble_device_init+0x250>)
1000cf38:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000cf3a:	4b67      	ldr	r3, [pc, #412]	; (1000d0d8 <ble_device_init+0x254>)
1000cf3c:	601c      	str	r4, [r3, #0]
1000cf3e:	605c      	str	r4, [r3, #4]
1000cf40:	609c      	str	r4, [r3, #8]
1000cf42:	60dc      	str	r4, [r3, #12]
1000cf44:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000cf46:	4b65      	ldr	r3, [pc, #404]	; (1000d0dc <ble_device_init+0x258>)
1000cf48:	601c      	str	r4, [r3, #0]
1000cf4a:	4c65      	ldr	r4, [pc, #404]	; (1000d0e0 <ble_device_init+0x25c>)
1000cf4c:	239b      	movs	r3, #155	; 0x9b
1000cf4e:	009b      	lsls	r3, r3, #2
1000cf50:	4698      	mov	r8, r3
1000cf52:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cf54:	4f50      	ldr	r7, [pc, #320]	; (1000d098 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cf56:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cf58:	227c      	movs	r2, #124	; 0x7c
1000cf5a:	2100      	movs	r1, #0
1000cf5c:	0020      	movs	r0, r4
1000cf5e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cf60:	0023      	movs	r3, r4
1000cf62:	335e      	adds	r3, #94	; 0x5e
1000cf64:	2200      	movs	r2, #0
1000cf66:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cf68:	7626      	strb	r6, [r4, #24]
1000cf6a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf6c:	45a0      	cmp	r8, r4
1000cf6e:	d1f3      	bne.n	1000cf58 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cf70:	4b5c      	ldr	r3, [pc, #368]	; (1000d0e4 <ble_device_init+0x260>)
1000cf72:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000cf74:	4c52      	ldr	r4, [pc, #328]	; (1000d0c0 <ble_device_init+0x23c>)
1000cf76:	4b4a      	ldr	r3, [pc, #296]	; (1000d0a0 <ble_device_init+0x21c>)
1000cf78:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000cf7a:	4b4a      	ldr	r3, [pc, #296]	; (1000d0a4 <ble_device_init+0x220>)
1000cf7c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000cf7e:	485a      	ldr	r0, [pc, #360]	; (1000d0e8 <ble_device_init+0x264>)
1000cf80:	4b5a      	ldr	r3, [pc, #360]	; (1000d0ec <ble_device_init+0x268>)
1000cf82:	4798      	blx	r3
1000cf84:	485a      	ldr	r0, [pc, #360]	; (1000d0f0 <ble_device_init+0x26c>)
1000cf86:	4b5b      	ldr	r3, [pc, #364]	; (1000d0f4 <ble_device_init+0x270>)
1000cf88:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000cf8a:	0020      	movs	r0, r4
1000cf8c:	4b5a      	ldr	r3, [pc, #360]	; (1000d0f8 <ble_device_init+0x274>)
1000cf8e:	4798      	blx	r3
1000cf90:	2800      	cmp	r0, #0
1000cf92:	d00b      	beq.n	1000cfac <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000cf94:	4e54      	ldr	r6, [pc, #336]	; (1000d0e8 <ble_device_init+0x264>)
1000cf96:	0030      	movs	r0, r6
1000cf98:	4d54      	ldr	r5, [pc, #336]	; (1000d0ec <ble_device_init+0x268>)
1000cf9a:	47a8      	blx	r5
1000cf9c:	4857      	ldr	r0, [pc, #348]	; (1000d0fc <ble_device_init+0x278>)
1000cf9e:	4c55      	ldr	r4, [pc, #340]	; (1000d0f4 <ble_device_init+0x270>)
1000cfa0:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000cfa2:	0030      	movs	r0, r6
1000cfa4:	47a8      	blx	r5
1000cfa6:	4856      	ldr	r0, [pc, #344]	; (1000d100 <ble_device_init+0x27c>)
1000cfa8:	47a0      	blx	r4
1000cfaa:	e7fe      	b.n	1000cfaa <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000cfac:	4a55      	ldr	r2, [pc, #340]	; (1000d104 <ble_device_init+0x280>)
1000cfae:	2100      	movs	r1, #0
1000cfb0:	2000      	movs	r0, #0
1000cfb2:	4c55      	ldr	r4, [pc, #340]	; (1000d108 <ble_device_init+0x284>)
1000cfb4:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000cfb6:	4a55      	ldr	r2, [pc, #340]	; (1000d10c <ble_device_init+0x288>)
1000cfb8:	2102      	movs	r1, #2
1000cfba:	2000      	movs	r0, #0
1000cfbc:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000cfbe:	2109      	movs	r1, #9
1000cfc0:	4853      	ldr	r0, [pc, #332]	; (1000d110 <ble_device_init+0x28c>)
1000cfc2:	4b54      	ldr	r3, [pc, #336]	; (1000d114 <ble_device_init+0x290>)
1000cfc4:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000cfc6:	2800      	cmp	r0, #0
1000cfc8:	d005      	beq.n	1000cfd6 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000cfca:	4847      	ldr	r0, [pc, #284]	; (1000d0e8 <ble_device_init+0x264>)
1000cfcc:	4b47      	ldr	r3, [pc, #284]	; (1000d0ec <ble_device_init+0x268>)
1000cfce:	4798      	blx	r3
1000cfd0:	4851      	ldr	r0, [pc, #324]	; (1000d118 <ble_device_init+0x294>)
1000cfd2:	4b48      	ldr	r3, [pc, #288]	; (1000d0f4 <ble_device_init+0x270>)
1000cfd4:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000cfd6:	2207      	movs	r2, #7
1000cfd8:	4950      	ldr	r1, [pc, #320]	; (1000d11c <ble_device_init+0x298>)
1000cfda:	3108      	adds	r1, #8
1000cfdc:	a804      	add	r0, sp, #16
1000cfde:	4b50      	ldr	r3, [pc, #320]	; (1000d120 <ble_device_init+0x29c>)
1000cfe0:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000cfe2:	2226      	movs	r2, #38	; 0x26
1000cfe4:	2100      	movs	r1, #0
1000cfe6:	a806      	add	r0, sp, #24
1000cfe8:	4b2b      	ldr	r3, [pc, #172]	; (1000d098 <ble_device_init+0x214>)
1000cfea:	4798      	blx	r3
	
	if (addr == NULL)
1000cfec:	2d00      	cmp	r5, #0
1000cfee:	d10c      	bne.n	1000d00a <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cff0:	a804      	add	r0, sp, #16
1000cff2:	4b4c      	ldr	r3, [pc, #304]	; (1000d124 <ble_device_init+0x2a0>)
1000cff4:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cff6:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cff8:	2800      	cmp	r0, #0
1000cffa:	d006      	beq.n	1000d00a <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000cffc:	483a      	ldr	r0, [pc, #232]	; (1000d0e8 <ble_device_init+0x264>)
1000cffe:	4b3b      	ldr	r3, [pc, #236]	; (1000d0ec <ble_device_init+0x268>)
1000d000:	4798      	blx	r3
1000d002:	4849      	ldr	r0, [pc, #292]	; (1000d128 <ble_device_init+0x2a4>)
1000d004:	4b3b      	ldr	r3, [pc, #236]	; (1000d0f4 <ble_device_init+0x270>)
1000d006:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d008:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000d00a:	4837      	ldr	r0, [pc, #220]	; (1000d0e8 <ble_device_init+0x264>)
1000d00c:	4b37      	ldr	r3, [pc, #220]	; (1000d0ec <ble_device_init+0x268>)
1000d00e:	4798      	blx	r3
1000d010:	792b      	ldrb	r3, [r5, #4]
1000d012:	796a      	ldrb	r2, [r5, #5]
1000d014:	79a9      	ldrb	r1, [r5, #6]
1000d016:	7828      	ldrb	r0, [r5, #0]
1000d018:	9003      	str	r0, [sp, #12]
1000d01a:	7868      	ldrb	r0, [r5, #1]
1000d01c:	9002      	str	r0, [sp, #8]
1000d01e:	78a8      	ldrb	r0, [r5, #2]
1000d020:	9001      	str	r0, [sp, #4]
1000d022:	78e8      	ldrb	r0, [r5, #3]
1000d024:	9000      	str	r0, [sp, #0]
1000d026:	4841      	ldr	r0, [pc, #260]	; (1000d12c <ble_device_init+0x2a8>)
1000d028:	4c32      	ldr	r4, [pc, #200]	; (1000d0f4 <ble_device_init+0x270>)
1000d02a:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d02c:	ac06      	add	r4, sp, #24
1000d02e:	230a      	movs	r3, #10
1000d030:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d032:	4b3f      	ldr	r3, [pc, #252]	; (1000d130 <ble_device_init+0x2ac>)
1000d034:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d036:	2207      	movs	r2, #7
1000d038:	0029      	movs	r1, r5
1000d03a:	a807      	add	r0, sp, #28
1000d03c:	4b38      	ldr	r3, [pc, #224]	; (1000d120 <ble_device_init+0x29c>)
1000d03e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d040:	2300      	movs	r3, #0
1000d042:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d044:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d046:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d048:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d04a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d04c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d04e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d050:	2380      	movs	r3, #128	; 0x80
1000d052:	009b      	lsls	r3, r3, #2
1000d054:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d056:	0020      	movs	r0, r4
1000d058:	4b36      	ldr	r3, [pc, #216]	; (1000d134 <ble_device_init+0x2b0>)
1000d05a:	4798      	blx	r3
1000d05c:	2800      	cmp	r0, #0
1000d05e:	d005      	beq.n	1000d06c <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d060:	4821      	ldr	r0, [pc, #132]	; (1000d0e8 <ble_device_init+0x264>)
1000d062:	4b22      	ldr	r3, [pc, #136]	; (1000d0ec <ble_device_init+0x268>)
1000d064:	4798      	blx	r3
1000d066:	4834      	ldr	r0, [pc, #208]	; (1000d138 <ble_device_init+0x2b4>)
1000d068:	4b22      	ldr	r3, [pc, #136]	; (1000d0f4 <ble_device_init+0x270>)
1000d06a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d06c:	0028      	movs	r0, r5
1000d06e:	4b33      	ldr	r3, [pc, #204]	; (1000d13c <ble_device_init+0x2b8>)
1000d070:	4798      	blx	r3
1000d072:	2800      	cmp	r0, #0
1000d074:	d005      	beq.n	1000d082 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d076:	481c      	ldr	r0, [pc, #112]	; (1000d0e8 <ble_device_init+0x264>)
1000d078:	4b1c      	ldr	r3, [pc, #112]	; (1000d0ec <ble_device_init+0x268>)
1000d07a:	4798      	blx	r3
1000d07c:	4830      	ldr	r0, [pc, #192]	; (1000d140 <ble_device_init+0x2bc>)
1000d07e:	4b1d      	ldr	r3, [pc, #116]	; (1000d0f4 <ble_device_init+0x270>)
1000d080:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d082:	b011      	add	sp, #68	; 0x44
1000d084:	bc3c      	pop	{r2, r3, r4, r5}
1000d086:	4690      	mov	r8, r2
1000d088:	4699      	mov	r9, r3
1000d08a:	46a2      	mov	sl, r4
1000d08c:	46ab      	mov	fp, r5
1000d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d090:	10019078 	.word	0x10019078
1000d094:	10019080 	.word	0x10019080
1000d098:	10015909 	.word	0x10015909
1000d09c:	1001a81c 	.word	0x1001a81c
1000d0a0:	000004e2 	.word	0x000004e2
1000d0a4:	10018b98 	.word	0x10018b98
1000d0a8:	1001907c 	.word	0x1001907c
1000d0ac:	1001a854 	.word	0x1001a854
1000d0b0:	1001a84c 	.word	0x1001a84c
1000d0b4:	1001ab88 	.word	0x1001ab88
1000d0b8:	10018798 	.word	0x10018798
1000d0bc:	10019088 	.word	0x10019088
1000d0c0:	1001a830 	.word	0x1001a830
1000d0c4:	1001a7f4 	.word	0x1001a7f4
1000d0c8:	1001a808 	.word	0x1001a808
1000d0cc:	1001a55c 	.word	0x1001a55c
1000d0d0:	1001a850 	.word	0x1001a850
1000d0d4:	1001a558 	.word	0x1001a558
1000d0d8:	1001a7e0 	.word	0x1001a7e0
1000d0dc:	1001ad94 	.word	0x1001ad94
1000d0e0:	1001a570 	.word	0x1001a570
1000d0e4:	1001a7dc 	.word	0x1001a7dc
1000d0e8:	10016b98 	.word	0x10016b98
1000d0ec:	10015b71 	.word	0x10015b71
1000d0f0:	10017fcc 	.word	0x10017fcc
1000d0f4:	10015a51 	.word	0x10015a51
1000d0f8:	1000eefd 	.word	0x1000eefd
1000d0fc:	10017ff0 	.word	0x10017ff0
1000d100:	1001801c 	.word	0x1001801c
1000d104:	100183c8 	.word	0x100183c8
1000d108:	1000cdb5 	.word	0x1000cdb5
1000d10c:	10017980 	.word	0x10017980
1000d110:	10018064 	.word	0x10018064
1000d114:	1000ee15 	.word	0x1000ee15
1000d118:	10018070 	.word	0x10018070
1000d11c:	10017970 	.word	0x10017970
1000d120:	100158f7 	.word	0x100158f7
1000d124:	1000ee49 	.word	0x1000ee49
1000d128:	10018088 	.word	0x10018088
1000d12c:	100180b4 	.word	0x100180b4
1000d130:	00003a98 	.word	0x00003a98
1000d134:	1000ee6d 	.word	0x1000ee6d
1000d138:	10018104 	.word	0x10018104
1000d13c:	1000f0b1 	.word	0x1000f0b1
1000d140:	10018140 	.word	0x10018140

1000d144 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000d144:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000d146:	2200      	movs	r2, #0
1000d148:	2100      	movs	r1, #0
1000d14a:	4b0a      	ldr	r3, [pc, #40]	; (1000d174 <ble_send_slave_sec_request+0x30>)
1000d14c:	4798      	blx	r3
1000d14e:	1e04      	subs	r4, r0, #0
1000d150:	d106      	bne.n	1000d160 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000d152:	4809      	ldr	r0, [pc, #36]	; (1000d178 <ble_send_slave_sec_request+0x34>)
1000d154:	4b09      	ldr	r3, [pc, #36]	; (1000d17c <ble_send_slave_sec_request+0x38>)
1000d156:	4798      	blx	r3
1000d158:	4809      	ldr	r0, [pc, #36]	; (1000d180 <ble_send_slave_sec_request+0x3c>)
1000d15a:	4b0a      	ldr	r3, [pc, #40]	; (1000d184 <ble_send_slave_sec_request+0x40>)
1000d15c:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000d15e:	e006      	b.n	1000d16e <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000d160:	4805      	ldr	r0, [pc, #20]	; (1000d178 <ble_send_slave_sec_request+0x34>)
1000d162:	4b06      	ldr	r3, [pc, #24]	; (1000d17c <ble_send_slave_sec_request+0x38>)
1000d164:	4798      	blx	r3
1000d166:	4808      	ldr	r0, [pc, #32]	; (1000d188 <ble_send_slave_sec_request+0x44>)
1000d168:	4b06      	ldr	r3, [pc, #24]	; (1000d184 <ble_send_slave_sec_request+0x40>)
1000d16a:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000d16c:	24e2      	movs	r4, #226	; 0xe2
}
1000d16e:	0020      	movs	r0, r4
1000d170:	bd10      	pop	{r4, pc}
1000d172:	46c0      	nop			; (mov r8, r8)
1000d174:	1000fe95 	.word	0x1000fe95
1000d178:	10016b98 	.word	0x10016b98
1000d17c:	10015b71 	.word	0x10015b71
1000d180:	10018190 	.word	0x10018190
1000d184:	10015a51 	.word	0x10015a51
1000d188:	100181b4 	.word	0x100181b4

1000d18c <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d18e:	465f      	mov	r7, fp
1000d190:	464e      	mov	r6, r9
1000d192:	4645      	mov	r5, r8
1000d194:	b4e0      	push	{r5, r6, r7}
1000d196:	b09a      	sub	sp, #104	; 0x68
1000d198:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000d19a:	7a86      	ldrb	r6, [r0, #10]
1000d19c:	2e00      	cmp	r6, #0
1000d19e:	d000      	beq.n	1000d1a2 <ble_connected_state_handler+0x16>
1000d1a0:	e0cc      	b.n	1000d33c <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000d1a2:	4878      	ldr	r0, [pc, #480]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d1a4:	4f78      	ldr	r7, [pc, #480]	; (1000d388 <ble_connected_state_handler+0x1fc>)
1000d1a6:	47b8      	blx	r7
1000d1a8:	792b      	ldrb	r3, [r5, #4]
1000d1aa:	796a      	ldrb	r2, [r5, #5]
1000d1ac:	79a9      	ldrb	r1, [r5, #6]
1000d1ae:	7868      	ldrb	r0, [r5, #1]
1000d1b0:	9002      	str	r0, [sp, #8]
1000d1b2:	78a8      	ldrb	r0, [r5, #2]
1000d1b4:	9001      	str	r0, [sp, #4]
1000d1b6:	78e8      	ldrb	r0, [r5, #3]
1000d1b8:	9000      	str	r0, [sp, #0]
1000d1ba:	4874      	ldr	r0, [pc, #464]	; (1000d38c <ble_connected_state_handler+0x200>)
1000d1bc:	4c74      	ldr	r4, [pc, #464]	; (1000d390 <ble_connected_state_handler+0x204>)
1000d1be:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d1c0:	4870      	ldr	r0, [pc, #448]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d1c2:	47b8      	blx	r7
1000d1c4:	8929      	ldrh	r1, [r5, #8]
1000d1c6:	4873      	ldr	r0, [pc, #460]	; (1000d394 <ble_connected_state_handler+0x208>)
1000d1c8:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d1ca:	2212      	movs	r2, #18
1000d1cc:	0029      	movs	r1, r5
1000d1ce:	4872      	ldr	r0, [pc, #456]	; (1000d398 <ble_connected_state_handler+0x20c>)
1000d1d0:	4b72      	ldr	r3, [pc, #456]	; (1000d39c <ble_connected_state_handler+0x210>)
1000d1d2:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d1d4:	9504      	str	r5, [sp, #16]
1000d1d6:	2207      	movs	r2, #7
1000d1d8:	0029      	movs	r1, r5
1000d1da:	4871      	ldr	r0, [pc, #452]	; (1000d3a0 <ble_connected_state_handler+0x214>)
1000d1dc:	4b71      	ldr	r3, [pc, #452]	; (1000d3a4 <ble_connected_state_handler+0x218>)
1000d1de:	4798      	blx	r3
1000d1e0:	2800      	cmp	r0, #0
1000d1e2:	d100      	bne.n	1000d1e6 <ble_connected_state_handler+0x5a>
1000d1e4:	e0b3      	b.n	1000d34e <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d1e6:	782b      	ldrb	r3, [r5, #0]
1000d1e8:	2b02      	cmp	r3, #2
1000d1ea:	d000      	beq.n	1000d1ee <ble_connected_state_handler+0x62>
1000d1ec:	e0af      	b.n	1000d34e <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d1ee:	2250      	movs	r2, #80	; 0x50
1000d1f0:	2100      	movs	r1, #0
1000d1f2:	a806      	add	r0, sp, #24
1000d1f4:	4b6c      	ldr	r3, [pc, #432]	; (1000d3a8 <ble_connected_state_handler+0x21c>)
1000d1f6:	4798      	blx	r3
1000d1f8:	4f6c      	ldr	r7, [pc, #432]	; (1000d3ac <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d1fa:	2300      	movs	r3, #0
1000d1fc:	e00b      	b.n	1000d216 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d1fe:	1c59      	adds	r1, r3, #1
1000d200:	7814      	ldrb	r4, [r2, #0]
1000d202:	a806      	add	r0, sp, #24
1000d204:	54c4      	strb	r4, [r0, r3]
1000d206:	3201      	adds	r2, #1
1000d208:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d20a:	42b3      	cmp	r3, r6
1000d20c:	d1f7      	bne.n	1000d1fe <ble_connected_state_handler+0x72>
1000d20e:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d210:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d212:	2b50      	cmp	r3, #80	; 0x50
1000d214:	d004      	beq.n	1000d220 <ble_connected_state_handler+0x94>
1000d216:	001e      	movs	r6, r3
1000d218:	3610      	adds	r6, #16
1000d21a:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d21c:	003a      	movs	r2, r7
1000d21e:	e7ee      	b.n	1000d1fe <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d220:	aa06      	add	r2, sp, #24
1000d222:	0029      	movs	r1, r5
1000d224:	2005      	movs	r0, #5
1000d226:	4b62      	ldr	r3, [pc, #392]	; (1000d3b0 <ble_connected_state_handler+0x224>)
1000d228:	4798      	blx	r3
1000d22a:	1e06      	subs	r6, r0, #0
1000d22c:	d106      	bne.n	1000d23c <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000d22e:	4855      	ldr	r0, [pc, #340]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d230:	4b55      	ldr	r3, [pc, #340]	; (1000d388 <ble_connected_state_handler+0x1fc>)
1000d232:	4798      	blx	r3
1000d234:	485f      	ldr	r0, [pc, #380]	; (1000d3b4 <ble_connected_state_handler+0x228>)
1000d236:	4b56      	ldr	r3, [pc, #344]	; (1000d390 <ble_connected_state_handler+0x204>)
1000d238:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000d23a:	e09c      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d23c:	4851      	ldr	r0, [pc, #324]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d23e:	4b52      	ldr	r3, [pc, #328]	; (1000d388 <ble_connected_state_handler+0x1fc>)
1000d240:	4798      	blx	r3
1000d242:	485d      	ldr	r0, [pc, #372]	; (1000d3b8 <ble_connected_state_handler+0x22c>)
1000d244:	4b52      	ldr	r3, [pc, #328]	; (1000d390 <ble_connected_state_handler+0x204>)
1000d246:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d248:	26e2      	movs	r6, #226	; 0xe2
1000d24a:	e094      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
1000d24c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d24e:	9405      	str	r4, [sp, #20]
1000d250:	2207      	movs	r2, #7
1000d252:	9904      	ldr	r1, [sp, #16]
1000d254:	4648      	mov	r0, r9
1000d256:	47d8      	blx	fp
1000d258:	2800      	cmp	r0, #0
1000d25a:	d109      	bne.n	1000d270 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d25c:	9a05      	ldr	r2, [sp, #20]
1000d25e:	0153      	lsls	r3, r2, #5
1000d260:	1a9b      	subs	r3, r3, r2
1000d262:	009a      	lsls	r2, r3, #2
1000d264:	4b55      	ldr	r3, [pc, #340]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d266:	189b      	adds	r3, r3, r2
1000d268:	335e      	adds	r3, #94	; 0x5e
1000d26a:	2202      	movs	r2, #2
1000d26c:	701a      	strb	r2, [r3, #0]
1000d26e:	e02b      	b.n	1000d2c8 <ble_connected_state_handler+0x13c>
1000d270:	3401      	adds	r4, #1
1000d272:	237c      	movs	r3, #124	; 0x7c
1000d274:	469c      	mov	ip, r3
1000d276:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d278:	2c05      	cmp	r4, #5
1000d27a:	d1e7      	bne.n	1000d24c <ble_connected_state_handler+0xc0>
1000d27c:	e072      	b.n	1000d364 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d27e:	001c      	movs	r4, r3
1000d280:	7811      	ldrb	r1, [r2, #0]
1000d282:	2900      	cmp	r1, #0
1000d284:	d11a      	bne.n	1000d2bc <ble_connected_state_handler+0x130>
1000d286:	e001      	b.n	1000d28c <ble_connected_state_handler+0x100>
1000d288:	2400      	movs	r4, #0
1000d28a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d28c:	0163      	lsls	r3, r4, #5
1000d28e:	4699      	mov	r9, r3
1000d290:	1b18      	subs	r0, r3, r4
1000d292:	0080      	lsls	r0, r0, #2
1000d294:	4b49      	ldr	r3, [pc, #292]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d296:	4698      	mov	r8, r3
1000d298:	4440      	add	r0, r8
1000d29a:	2212      	movs	r2, #18
1000d29c:	0029      	movs	r1, r5
1000d29e:	4b3f      	ldr	r3, [pc, #252]	; (1000d39c <ble_connected_state_handler+0x210>)
1000d2a0:	4798      	blx	r3
						ble_device_count++;
1000d2a2:	4a47      	ldr	r2, [pc, #284]	; (1000d3c0 <ble_connected_state_handler+0x234>)
1000d2a4:	7813      	ldrb	r3, [r2, #0]
1000d2a6:	3301      	adds	r3, #1
1000d2a8:	b2db      	uxtb	r3, r3
1000d2aa:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d2ac:	464b      	mov	r3, r9
1000d2ae:	1b1b      	subs	r3, r3, r4
1000d2b0:	009b      	lsls	r3, r3, #2
1000d2b2:	4443      	add	r3, r8
1000d2b4:	335e      	adds	r3, #94	; 0x5e
1000d2b6:	2202      	movs	r2, #2
1000d2b8:	701a      	strb	r2, [r3, #0]
						break;
1000d2ba:	e005      	b.n	1000d2c8 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2bc:	1c79      	adds	r1, r7, #1
1000d2be:	b2cf      	uxtb	r7, r1
1000d2c0:	3301      	adds	r3, #1
1000d2c2:	327c      	adds	r2, #124	; 0x7c
1000d2c4:	2f05      	cmp	r7, #5
1000d2c6:	d1da      	bne.n	1000d27e <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d2c8:	2207      	movs	r2, #7
1000d2ca:	0029      	movs	r1, r5
1000d2cc:	4834      	ldr	r0, [pc, #208]	; (1000d3a0 <ble_connected_state_handler+0x214>)
1000d2ce:	4b35      	ldr	r3, [pc, #212]	; (1000d3a4 <ble_connected_state_handler+0x218>)
1000d2d0:	4798      	blx	r3
1000d2d2:	2800      	cmp	r0, #0
1000d2d4:	d10c      	bne.n	1000d2f0 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d2d6:	017b      	lsls	r3, r7, #5
1000d2d8:	1bdb      	subs	r3, r3, r7
1000d2da:	009b      	lsls	r3, r3, #2
1000d2dc:	4a37      	ldr	r2, [pc, #220]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d2de:	18d3      	adds	r3, r2, r3
1000d2e0:	2205      	movs	r2, #5
1000d2e2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d2e4:	3202      	adds	r2, #2
1000d2e6:	2100      	movs	r1, #0
1000d2e8:	482d      	ldr	r0, [pc, #180]	; (1000d3a0 <ble_connected_state_handler+0x214>)
1000d2ea:	4b2f      	ldr	r3, [pc, #188]	; (1000d3a8 <ble_connected_state_handler+0x21c>)
1000d2ec:	4798      	blx	r3
1000d2ee:	e042      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d2f0:	4b32      	ldr	r3, [pc, #200]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d2f2:	4698      	mov	r8, r3
1000d2f4:	017c      	lsls	r4, r7, #5
1000d2f6:	1be3      	subs	r3, r4, r7
1000d2f8:	009b      	lsls	r3, r3, #2
1000d2fa:	4443      	add	r3, r8
1000d2fc:	220a      	movs	r2, #10
1000d2fe:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d300:	3a03      	subs	r2, #3
1000d302:	2100      	movs	r1, #0
1000d304:	4826      	ldr	r0, [pc, #152]	; (1000d3a0 <ble_connected_state_handler+0x214>)
1000d306:	4b28      	ldr	r3, [pc, #160]	; (1000d3a8 <ble_connected_state_handler+0x21c>)
1000d308:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d30a:	1be4      	subs	r4, r4, r7
1000d30c:	00a4      	lsls	r4, r4, #2
1000d30e:	4444      	add	r4, r8
1000d310:	7ca3      	ldrb	r3, [r4, #18]
1000d312:	2b0a      	cmp	r3, #10
1000d314:	d12f      	bne.n	1000d376 <ble_connected_state_handler+0x1ea>
1000d316:	e00d      	b.n	1000d334 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d318:	481a      	ldr	r0, [pc, #104]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d31a:	4b1b      	ldr	r3, [pc, #108]	; (1000d388 <ble_connected_state_handler+0x1fc>)
1000d31c:	4798      	blx	r3
1000d31e:	4b28      	ldr	r3, [pc, #160]	; (1000d3c0 <ble_connected_state_handler+0x234>)
1000d320:	7819      	ldrb	r1, [r3, #0]
1000d322:	b2c9      	uxtb	r1, r1
1000d324:	4827      	ldr	r0, [pc, #156]	; (1000d3c4 <ble_connected_state_handler+0x238>)
1000d326:	4b1a      	ldr	r3, [pc, #104]	; (1000d390 <ble_connected_state_handler+0x204>)
1000d328:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d32a:	8928      	ldrh	r0, [r5, #8]
1000d32c:	2113      	movs	r1, #19
1000d32e:	4b26      	ldr	r3, [pc, #152]	; (1000d3c8 <ble_connected_state_handler+0x23c>)
1000d330:	4798      	blx	r3
1000d332:	e020      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d334:	8928      	ldrh	r0, [r5, #8]
1000d336:	4b25      	ldr	r3, [pc, #148]	; (1000d3cc <ble_connected_state_handler+0x240>)
1000d338:	4798      	blx	r3
1000d33a:	e01c      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d33c:	4811      	ldr	r0, [pc, #68]	; (1000d384 <ble_connected_state_handler+0x1f8>)
1000d33e:	4b12      	ldr	r3, [pc, #72]	; (1000d388 <ble_connected_state_handler+0x1fc>)
1000d340:	4798      	blx	r3
1000d342:	7aa9      	ldrb	r1, [r5, #10]
1000d344:	4822      	ldr	r0, [pc, #136]	; (1000d3d0 <ble_connected_state_handler+0x244>)
1000d346:	4b12      	ldr	r3, [pc, #72]	; (1000d390 <ble_connected_state_handler+0x204>)
1000d348:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d34a:	2600      	movs	r6, #0
1000d34c:	e013      	b.n	1000d376 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d34e:	4b1c      	ldr	r3, [pc, #112]	; (1000d3c0 <ble_connected_state_handler+0x234>)
1000d350:	781b      	ldrb	r3, [r3, #0]
1000d352:	b2db      	uxtb	r3, r3
1000d354:	2b04      	cmp	r3, #4
1000d356:	d8df      	bhi.n	1000d318 <ble_connected_state_handler+0x18c>
1000d358:	4b18      	ldr	r3, [pc, #96]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d35a:	4699      	mov	r9, r3
1000d35c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d35e:	4b11      	ldr	r3, [pc, #68]	; (1000d3a4 <ble_connected_state_handler+0x218>)
1000d360:	469b      	mov	fp, r3
1000d362:	e773      	b.n	1000d24c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d364:	235e      	movs	r3, #94	; 0x5e
1000d366:	4a15      	ldr	r2, [pc, #84]	; (1000d3bc <ble_connected_state_handler+0x230>)
1000d368:	5cd3      	ldrb	r3, [r2, r3]
1000d36a:	2b00      	cmp	r3, #0
1000d36c:	d08c      	beq.n	1000d288 <ble_connected_state_handler+0xfc>
1000d36e:	4a19      	ldr	r2, [pc, #100]	; (1000d3d4 <ble_connected_state_handler+0x248>)
1000d370:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d372:	2701      	movs	r7, #1
1000d374:	e783      	b.n	1000d27e <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d376:	0030      	movs	r0, r6
1000d378:	b01a      	add	sp, #104	; 0x68
1000d37a:	bc1c      	pop	{r2, r3, r4}
1000d37c:	4690      	mov	r8, r2
1000d37e:	4699      	mov	r9, r3
1000d380:	46a3      	mov	fp, r4
1000d382:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d384:	10016b98 	.word	0x10016b98
1000d388:	10015b71 	.word	0x10015b71
1000d38c:	100181d4 	.word	0x100181d4
1000d390:	10015a51 	.word	0x10015a51
1000d394:	10018218 	.word	0x10018218
1000d398:	1001a81c 	.word	0x1001a81c
1000d39c:	100158f7 	.word	0x100158f7
1000d3a0:	10019080 	.word	0x10019080
1000d3a4:	100158d9 	.word	0x100158d9
1000d3a8:	10015909 	.word	0x10015909
1000d3ac:	1001a5b6 	.word	0x1001a5b6
1000d3b0:	1000f31d 	.word	0x1000f31d
1000d3b4:	10018230 	.word	0x10018230
1000d3b8:	10018254 	.word	0x10018254
1000d3bc:	1001a570 	.word	0x1001a570
1000d3c0:	1001a7dc 	.word	0x1001a7dc
1000d3c4:	10018278 	.word	0x10018278
1000d3c8:	1000f2f1 	.word	0x1000f2f1
1000d3cc:	1000d145 	.word	0x1000d145
1000d3d0:	100182b4 	.word	0x100182b4
1000d3d4:	1001a64a 	.word	0x1001a64a

1000d3d8 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3da:	4647      	mov	r7, r8
1000d3dc:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d3de:	7803      	ldrb	r3, [r0, #0]
1000d3e0:	2b00      	cmp	r3, #0
1000d3e2:	d152      	bne.n	1000d48a <ble_resolv_rand_addr_handler+0xb2>
1000d3e4:	4d3e      	ldr	r5, [pc, #248]	; (1000d4e0 <ble_resolv_rand_addr_handler+0x108>)
1000d3e6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d3e8:	1c46      	adds	r6, r0, #1
1000d3ea:	4f3e      	ldr	r7, [pc, #248]	; (1000d4e4 <ble_resolv_rand_addr_handler+0x10c>)
1000d3ec:	2210      	movs	r2, #16
1000d3ee:	0029      	movs	r1, r5
1000d3f0:	0030      	movs	r0, r6
1000d3f2:	47b8      	blx	r7
1000d3f4:	2800      	cmp	r0, #0
1000d3f6:	d031      	beq.n	1000d45c <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d3f8:	3401      	adds	r4, #1
1000d3fa:	b2e4      	uxtb	r4, r4
1000d3fc:	357c      	adds	r5, #124	; 0x7c
1000d3fe:	2c05      	cmp	r4, #5
1000d400:	d1f4      	bne.n	1000d3ec <ble_resolv_rand_addr_handler+0x14>
1000d402:	e042      	b.n	1000d48a <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d404:	001d      	movs	r5, r3
1000d406:	7811      	ldrb	r1, [r2, #0]
1000d408:	2900      	cmp	r1, #0
1000d40a:	d11b      	bne.n	1000d444 <ble_resolv_rand_addr_handler+0x6c>
1000d40c:	e001      	b.n	1000d412 <ble_resolv_rand_addr_handler+0x3a>
1000d40e:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d410:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d412:	4b35      	ldr	r3, [pc, #212]	; (1000d4e8 <ble_resolv_rand_addr_handler+0x110>)
1000d414:	4698      	mov	r8, r3
1000d416:	016e      	lsls	r6, r5, #5
1000d418:	1b77      	subs	r7, r6, r5
1000d41a:	00bf      	lsls	r7, r7, #2
1000d41c:	4447      	add	r7, r8
1000d41e:	2212      	movs	r2, #18
1000d420:	4932      	ldr	r1, [pc, #200]	; (1000d4ec <ble_resolv_rand_addr_handler+0x114>)
1000d422:	0038      	movs	r0, r7
1000d424:	4b32      	ldr	r3, [pc, #200]	; (1000d4f0 <ble_resolv_rand_addr_handler+0x118>)
1000d426:	4798      	blx	r3
				ble_device_count++;
1000d428:	4a32      	ldr	r2, [pc, #200]	; (1000d4f4 <ble_resolv_rand_addr_handler+0x11c>)
1000d42a:	7813      	ldrb	r3, [r2, #0]
1000d42c:	3301      	adds	r3, #1
1000d42e:	b2db      	uxtb	r3, r3
1000d430:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d432:	375e      	adds	r7, #94	; 0x5e
1000d434:	2302      	movs	r3, #2
1000d436:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d438:	1b75      	subs	r5, r6, r5
1000d43a:	00ad      	lsls	r5, r5, #2
1000d43c:	4445      	add	r5, r8
1000d43e:	3308      	adds	r3, #8
1000d440:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d442:	e031      	b.n	1000d4a8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d444:	3401      	adds	r4, #1
1000d446:	b2e4      	uxtb	r4, r4
1000d448:	3301      	adds	r3, #1
1000d44a:	327c      	adds	r2, #124	; 0x7c
1000d44c:	2c05      	cmp	r4, #5
1000d44e:	d1d9      	bne.n	1000d404 <ble_resolv_rand_addr_handler+0x2c>
1000d450:	e03a      	b.n	1000d4c8 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d452:	4b26      	ldr	r3, [pc, #152]	; (1000d4ec <ble_resolv_rand_addr_handler+0x114>)
1000d454:	8918      	ldrh	r0, [r3, #8]
1000d456:	4b28      	ldr	r3, [pc, #160]	; (1000d4f8 <ble_resolv_rand_addr_handler+0x120>)
1000d458:	4798      	blx	r3
1000d45a:	e03c      	b.n	1000d4d6 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d45c:	4827      	ldr	r0, [pc, #156]	; (1000d4fc <ble_resolv_rand_addr_handler+0x124>)
1000d45e:	4b28      	ldr	r3, [pc, #160]	; (1000d500 <ble_resolv_rand_addr_handler+0x128>)
1000d460:	4798      	blx	r3
1000d462:	4828      	ldr	r0, [pc, #160]	; (1000d504 <ble_resolv_rand_addr_handler+0x12c>)
1000d464:	4b28      	ldr	r3, [pc, #160]	; (1000d508 <ble_resolv_rand_addr_handler+0x130>)
1000d466:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d468:	481f      	ldr	r0, [pc, #124]	; (1000d4e8 <ble_resolv_rand_addr_handler+0x110>)
1000d46a:	0163      	lsls	r3, r4, #5
1000d46c:	1b1a      	subs	r2, r3, r4
1000d46e:	0092      	lsls	r2, r2, #2
1000d470:	1882      	adds	r2, r0, r2
1000d472:	0011      	movs	r1, r2
1000d474:	315e      	adds	r1, #94	; 0x5e
1000d476:	2502      	movs	r5, #2
1000d478:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d47a:	210a      	movs	r1, #10
1000d47c:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d47e:	0010      	movs	r0, r2
1000d480:	2212      	movs	r2, #18
1000d482:	491a      	ldr	r1, [pc, #104]	; (1000d4ec <ble_resolv_rand_addr_handler+0x114>)
1000d484:	4b1a      	ldr	r3, [pc, #104]	; (1000d4f0 <ble_resolv_rand_addr_handler+0x118>)
1000d486:	4798      	blx	r3
1000d488:	e00e      	b.n	1000d4a8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000d48a:	481c      	ldr	r0, [pc, #112]	; (1000d4fc <ble_resolv_rand_addr_handler+0x124>)
1000d48c:	4b1c      	ldr	r3, [pc, #112]	; (1000d500 <ble_resolv_rand_addr_handler+0x128>)
1000d48e:	4798      	blx	r3
1000d490:	481e      	ldr	r0, [pc, #120]	; (1000d50c <ble_resolv_rand_addr_handler+0x134>)
1000d492:	4b1d      	ldr	r3, [pc, #116]	; (1000d508 <ble_resolv_rand_addr_handler+0x130>)
1000d494:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d496:	235e      	movs	r3, #94	; 0x5e
1000d498:	4a13      	ldr	r2, [pc, #76]	; (1000d4e8 <ble_resolv_rand_addr_handler+0x110>)
1000d49a:	5cd3      	ldrb	r3, [r2, r3]
1000d49c:	2b00      	cmp	r3, #0
1000d49e:	d0b6      	beq.n	1000d40e <ble_resolv_rand_addr_handler+0x36>
1000d4a0:	4a1b      	ldr	r2, [pc, #108]	; (1000d510 <ble_resolv_rand_addr_handler+0x138>)
1000d4a2:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d4a4:	2401      	movs	r4, #1
1000d4a6:	e7ad      	b.n	1000d404 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d4a8:	4814      	ldr	r0, [pc, #80]	; (1000d4fc <ble_resolv_rand_addr_handler+0x124>)
1000d4aa:	4b15      	ldr	r3, [pc, #84]	; (1000d500 <ble_resolv_rand_addr_handler+0x128>)
1000d4ac:	4798      	blx	r3
1000d4ae:	0021      	movs	r1, r4
1000d4b0:	4818      	ldr	r0, [pc, #96]	; (1000d514 <ble_resolv_rand_addr_handler+0x13c>)
1000d4b2:	4b15      	ldr	r3, [pc, #84]	; (1000d508 <ble_resolv_rand_addr_handler+0x130>)
1000d4b4:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d4b6:	0163      	lsls	r3, r4, #5
1000d4b8:	1b1c      	subs	r4, r3, r4
1000d4ba:	00a4      	lsls	r4, r4, #2
1000d4bc:	4b0a      	ldr	r3, [pc, #40]	; (1000d4e8 <ble_resolv_rand_addr_handler+0x110>)
1000d4be:	191c      	adds	r4, r3, r4
1000d4c0:	7ca3      	ldrb	r3, [r4, #18]
1000d4c2:	2b0a      	cmp	r3, #10
1000d4c4:	d107      	bne.n	1000d4d6 <ble_resolv_rand_addr_handler+0xfe>
1000d4c6:	e7c4      	b.n	1000d452 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d4c8:	480c      	ldr	r0, [pc, #48]	; (1000d4fc <ble_resolv_rand_addr_handler+0x124>)
1000d4ca:	4b0d      	ldr	r3, [pc, #52]	; (1000d500 <ble_resolv_rand_addr_handler+0x128>)
1000d4cc:	4798      	blx	r3
1000d4ce:	2105      	movs	r1, #5
1000d4d0:	4810      	ldr	r0, [pc, #64]	; (1000d514 <ble_resolv_rand_addr_handler+0x13c>)
1000d4d2:	4b0d      	ldr	r3, [pc, #52]	; (1000d508 <ble_resolv_rand_addr_handler+0x130>)
1000d4d4:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d4d6:	2000      	movs	r0, #0
1000d4d8:	bc04      	pop	{r2}
1000d4da:	4690      	mov	r8, r2
1000d4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4de:	46c0      	nop			; (mov r8, r8)
1000d4e0:	1001a5b6 	.word	0x1001a5b6
1000d4e4:	100158d9 	.word	0x100158d9
1000d4e8:	1001a570 	.word	0x1001a570
1000d4ec:	1001a81c 	.word	0x1001a81c
1000d4f0:	100158f7 	.word	0x100158f7
1000d4f4:	1001a7dc 	.word	0x1001a7dc
1000d4f8:	1000d145 	.word	0x1000d145
1000d4fc:	10016b98 	.word	0x10016b98
1000d500:	10015b71 	.word	0x10015b71
1000d504:	100182dc 	.word	0x100182dc
1000d508:	10015a51 	.word	0x10015a51
1000d50c:	100182f4 	.word	0x100182f4
1000d510:	1001a64a 	.word	0x1001a64a
1000d514:	10018310 	.word	0x10018310

1000d518 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d51a:	0004      	movs	r4, r0
1000d51c:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000d51e:	4848      	ldr	r0, [pc, #288]	; (1000d640 <ble_event_manager+0x128>)
1000d520:	4b48      	ldr	r3, [pc, #288]	; (1000d644 <ble_event_manager+0x12c>)
1000d522:	4798      	blx	r3
1000d524:	0021      	movs	r1, r4
1000d526:	4848      	ldr	r0, [pc, #288]	; (1000d648 <ble_event_manager+0x130>)
1000d528:	4b48      	ldr	r3, [pc, #288]	; (1000d64c <ble_event_manager+0x134>)
1000d52a:	4798      	blx	r3
	switch(events)
1000d52c:	2c3b      	cmp	r4, #59	; 0x3b
1000d52e:	d879      	bhi.n	1000d624 <ble_event_manager+0x10c>
1000d530:	00a3      	lsls	r3, r4, #2
1000d532:	4a47      	ldr	r2, [pc, #284]	; (1000d650 <ble_event_manager+0x138>)
1000d534:	58d3      	ldr	r3, [r2, r3]
1000d536:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d538:	00a4      	lsls	r4, r4, #2
1000d53a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d53c:	4f45      	ldr	r7, [pc, #276]	; (1000d654 <ble_event_manager+0x13c>)
1000d53e:	59bb      	ldr	r3, [r7, r6]
1000d540:	2b00      	cmp	r3, #0
1000d542:	d004      	beq.n	1000d54e <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d544:	591b      	ldr	r3, [r3, r4]
1000d546:	2b00      	cmp	r3, #0
1000d548:	d001      	beq.n	1000d54e <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000d54a:	0028      	movs	r0, r5
1000d54c:	4798      	blx	r3
1000d54e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d550:	2e14      	cmp	r6, #20
1000d552:	d1f4      	bne.n	1000d53e <ble_event_manager+0x26>
1000d554:	e072      	b.n	1000d63c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d556:	3c13      	subs	r4, #19
1000d558:	b2e4      	uxtb	r4, r4
1000d55a:	00a4      	lsls	r4, r4, #2
1000d55c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d55e:	4f3e      	ldr	r7, [pc, #248]	; (1000d658 <ble_event_manager+0x140>)
1000d560:	59bb      	ldr	r3, [r7, r6]
1000d562:	2b00      	cmp	r3, #0
1000d564:	d004      	beq.n	1000d570 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d566:	591b      	ldr	r3, [r3, r4]
1000d568:	2b00      	cmp	r3, #0
1000d56a:	d001      	beq.n	1000d570 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000d56c:	0028      	movs	r0, r5
1000d56e:	4798      	blx	r3
1000d570:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d572:	2e14      	cmp	r6, #20
1000d574:	d1f4      	bne.n	1000d560 <ble_event_manager+0x48>
1000d576:	e061      	b.n	1000d63c <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000d578:	3c1d      	subs	r4, #29
1000d57a:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000d57c:	4830      	ldr	r0, [pc, #192]	; (1000d640 <ble_event_manager+0x128>)
1000d57e:	4b31      	ldr	r3, [pc, #196]	; (1000d644 <ble_event_manager+0x12c>)
1000d580:	4798      	blx	r3
1000d582:	0021      	movs	r1, r4
1000d584:	4835      	ldr	r0, [pc, #212]	; (1000d65c <ble_event_manager+0x144>)
1000d586:	4b31      	ldr	r3, [pc, #196]	; (1000d64c <ble_event_manager+0x134>)
1000d588:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d58a:	00a4      	lsls	r4, r4, #2
1000d58c:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d58e:	4f34      	ldr	r7, [pc, #208]	; (1000d660 <ble_event_manager+0x148>)
1000d590:	59bb      	ldr	r3, [r7, r6]
1000d592:	2b00      	cmp	r3, #0
1000d594:	d004      	beq.n	1000d5a0 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d596:	591b      	ldr	r3, [r3, r4]
1000d598:	2b00      	cmp	r3, #0
1000d59a:	d001      	beq.n	1000d5a0 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000d59c:	0028      	movs	r0, r5
1000d59e:	4798      	blx	r3
1000d5a0:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d5a2:	2e14      	cmp	r6, #20
1000d5a4:	d1f4      	bne.n	1000d590 <ble_event_manager+0x78>
1000d5a6:	e049      	b.n	1000d63c <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d5a8:	3c27      	subs	r4, #39	; 0x27
1000d5aa:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d5ac:	4b2d      	ldr	r3, [pc, #180]	; (1000d664 <ble_event_manager+0x14c>)
1000d5ae:	681b      	ldr	r3, [r3, #0]
1000d5b0:	2b00      	cmp	r3, #0
1000d5b2:	d043      	beq.n	1000d63c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d5b4:	00a4      	lsls	r4, r4, #2
1000d5b6:	58e3      	ldr	r3, [r4, r3]
1000d5b8:	2b00      	cmp	r3, #0
1000d5ba:	d03f      	beq.n	1000d63c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d5bc:	0028      	movs	r0, r5
1000d5be:	4798      	blx	r3
1000d5c0:	e03c      	b.n	1000d63c <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d5c2:	3c2d      	subs	r4, #45	; 0x2d
1000d5c4:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d5c6:	4b28      	ldr	r3, [pc, #160]	; (1000d668 <ble_event_manager+0x150>)
1000d5c8:	681b      	ldr	r3, [r3, #0]
1000d5ca:	2b00      	cmp	r3, #0
1000d5cc:	d036      	beq.n	1000d63c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d5ce:	00a4      	lsls	r4, r4, #2
1000d5d0:	58e3      	ldr	r3, [r4, r3]
1000d5d2:	2b00      	cmp	r3, #0
1000d5d4:	d032      	beq.n	1000d63c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d5d6:	0028      	movs	r0, r5
1000d5d8:	4798      	blx	r3
1000d5da:	e02f      	b.n	1000d63c <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d5dc:	3c36      	subs	r4, #54	; 0x36
1000d5de:	b2e4      	uxtb	r4, r4
1000d5e0:	00a4      	lsls	r4, r4, #2
1000d5e2:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d5e4:	4f21      	ldr	r7, [pc, #132]	; (1000d66c <ble_event_manager+0x154>)
1000d5e6:	59bb      	ldr	r3, [r7, r6]
1000d5e8:	2b00      	cmp	r3, #0
1000d5ea:	d004      	beq.n	1000d5f6 <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d5ec:	591b      	ldr	r3, [r3, r4]
1000d5ee:	2b00      	cmp	r3, #0
1000d5f0:	d001      	beq.n	1000d5f6 <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000d5f2:	0028      	movs	r0, r5
1000d5f4:	4798      	blx	r3
1000d5f6:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d5f8:	2e14      	cmp	r6, #20
1000d5fa:	d1f4      	bne.n	1000d5e6 <ble_event_manager+0xce>
1000d5fc:	e01e      	b.n	1000d63c <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d5fe:	3c38      	subs	r4, #56	; 0x38
1000d600:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d602:	4b1b      	ldr	r3, [pc, #108]	; (1000d670 <ble_event_manager+0x158>)
1000d604:	681b      	ldr	r3, [r3, #0]
1000d606:	2b00      	cmp	r3, #0
1000d608:	d018      	beq.n	1000d63c <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d60a:	00a4      	lsls	r4, r4, #2
1000d60c:	58e3      	ldr	r3, [r4, r3]
1000d60e:	2b00      	cmp	r3, #0
1000d610:	d014      	beq.n	1000d63c <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d612:	0028      	movs	r0, r5
1000d614:	4798      	blx	r3
1000d616:	e011      	b.n	1000d63c <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d618:	4b16      	ldr	r3, [pc, #88]	; (1000d674 <ble_event_manager+0x15c>)
1000d61a:	681b      	ldr	r3, [r3, #0]
1000d61c:	2b00      	cmp	r3, #0
1000d61e:	d00d      	beq.n	1000d63c <ble_event_manager+0x124>
			ble_user_event_cb();
1000d620:	4798      	blx	r3
1000d622:	e00b      	b.n	1000d63c <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000d624:	4e06      	ldr	r6, [pc, #24]	; (1000d640 <ble_event_manager+0x128>)
1000d626:	0030      	movs	r0, r6
1000d628:	4d06      	ldr	r5, [pc, #24]	; (1000d644 <ble_event_manager+0x12c>)
1000d62a:	47a8      	blx	r5
1000d62c:	0021      	movs	r1, r4
1000d62e:	4812      	ldr	r0, [pc, #72]	; (1000d678 <ble_event_manager+0x160>)
1000d630:	4b06      	ldr	r3, [pc, #24]	; (1000d64c <ble_event_manager+0x134>)
1000d632:	4798      	blx	r3
		DBG_LOG("\r\n");
1000d634:	0030      	movs	r0, r6
1000d636:	47a8      	blx	r5
1000d638:	0030      	movs	r0, r6
1000d63a:	47a8      	blx	r5
	}
	break;		
	}
}
1000d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d63e:	46c0      	nop			; (mov r8, r8)
1000d640:	10016b98 	.word	0x10016b98
1000d644:	10015b71 	.word	0x10015b71
1000d648:	10018320 	.word	0x10018320
1000d64c:	10015a51 	.word	0x10015a51
1000d650:	10017880 	.word	0x10017880
1000d654:	1001a7f4 	.word	0x1001a7f4
1000d658:	1001a808 	.word	0x1001a808
1000d65c:	10018330 	.word	0x10018330
1000d660:	1001a55c 	.word	0x1001a55c
1000d664:	1001a850 	.word	0x1001a850
1000d668:	1001a558 	.word	0x1001a558
1000d66c:	1001a7e0 	.word	0x1001a7e0
1000d670:	1001ad94 	.word	0x1001ad94
1000d674:	10019078 	.word	0x10019078
1000d678:	10018348 	.word	0x10018348

1000d67c <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000d67c:	b570      	push	{r4, r5, r6, lr}
1000d67e:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d680:	4b0d      	ldr	r3, [pc, #52]	; (1000d6b8 <ble_event_task+0x3c>)
1000d682:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d684:	2b01      	cmp	r3, #1
1000d686:	d101      	bne.n	1000d68c <ble_event_task+0x10>
	{
		release_sleep_lock();
1000d688:	4b0c      	ldr	r3, [pc, #48]	; (1000d6bc <ble_event_task+0x40>)
1000d68a:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000d68c:	0022      	movs	r2, r4
1000d68e:	490c      	ldr	r1, [pc, #48]	; (1000d6c0 <ble_event_task+0x44>)
1000d690:	480c      	ldr	r0, [pc, #48]	; (1000d6c4 <ble_event_task+0x48>)
1000d692:	4b0d      	ldr	r3, [pc, #52]	; (1000d6c8 <ble_event_task+0x4c>)
1000d694:	4798      	blx	r3
1000d696:	0004      	movs	r4, r0
1000d698:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d69a:	4b07      	ldr	r3, [pc, #28]	; (1000d6b8 <ble_event_task+0x3c>)
1000d69c:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d69e:	2b01      	cmp	r3, #1
1000d6a0:	d101      	bne.n	1000d6a6 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000d6a2:	4b0a      	ldr	r3, [pc, #40]	; (1000d6cc <ble_event_task+0x50>)
1000d6a4:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000d6a6:	2d00      	cmp	r5, #0
1000d6a8:	d104      	bne.n	1000d6b4 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000d6aa:	4b06      	ldr	r3, [pc, #24]	; (1000d6c4 <ble_event_task+0x48>)
1000d6ac:	7818      	ldrb	r0, [r3, #0]
1000d6ae:	4904      	ldr	r1, [pc, #16]	; (1000d6c0 <ble_event_task+0x44>)
1000d6b0:	4b07      	ldr	r3, [pc, #28]	; (1000d6d0 <ble_event_task+0x54>)
1000d6b2:	4798      	blx	r3
    }
    
    return status;
}
1000d6b4:	0020      	movs	r0, r4
1000d6b6:	bd70      	pop	{r4, r5, r6, pc}
1000d6b8:	10019087 	.word	0x10019087
1000d6bc:	1000e08d 	.word	0x1000e08d
1000d6c0:	1001ab88 	.word	0x1001ab88
1000d6c4:	1001a84c 	.word	0x1001a84c
1000d6c8:	1000e6a5 	.word	0x1000e6a5
1000d6cc:	1000e065 	.word	0x1000e065
1000d6d0:	1000d519 	.word	0x1000d519

1000d6d4 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d6d4:	b510      	push	{r4, lr}
1000d6d6:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d6d8:	ac08      	add	r4, sp, #32
1000d6da:	2203      	movs	r2, #3
1000d6dc:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d6de:	2302      	movs	r3, #2
1000d6e0:	70a3      	strb	r3, [r4, #2]
1000d6e2:	3316      	adds	r3, #22
1000d6e4:	70e3      	strb	r3, [r4, #3]
1000d6e6:	7122      	strb	r2, [r4, #4]
1000d6e8:	7163      	strb	r3, [r4, #5]
1000d6ea:	3201      	adds	r2, #1
1000d6ec:	71a2      	strb	r2, [r4, #6]
1000d6ee:	71e3      	strb	r3, [r4, #7]
1000d6f0:	320b      	adds	r2, #11
1000d6f2:	7222      	strb	r2, [r4, #8]
1000d6f4:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d6f6:	3b0f      	subs	r3, #15
1000d6f8:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d6fa:	3a05      	subs	r2, #5
1000d6fc:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d6fe:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d700:	aa0b      	add	r2, sp, #44	; 0x2c
1000d702:	4b16      	ldr	r3, [pc, #88]	; (1000d75c <ble_advertisement_data_set+0x88>)
1000d704:	cb03      	ldmia	r3!, {r0, r1}
1000d706:	c203      	stmia	r2!, {r0, r1}
1000d708:	781b      	ldrb	r3, [r3, #0]
1000d70a:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000d70c:	2300      	movs	r3, #0
1000d70e:	466a      	mov	r2, sp
1000d710:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000d712:	3315      	adds	r3, #21
1000d714:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000d716:	4812      	ldr	r0, [pc, #72]	; (1000d760 <ble_advertisement_data_set+0x8c>)
1000d718:	4b12      	ldr	r3, [pc, #72]	; (1000d764 <ble_advertisement_data_set+0x90>)
1000d71a:	4798      	blx	r3
1000d71c:	4812      	ldr	r0, [pc, #72]	; (1000d768 <ble_advertisement_data_set+0x94>)
1000d71e:	4b13      	ldr	r3, [pc, #76]	; (1000d76c <ble_advertisement_data_set+0x98>)
1000d720:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d722:	2307      	movs	r3, #7
1000d724:	466a      	mov	r2, sp
1000d726:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d728:	33f8      	adds	r3, #248	; 0xf8
1000d72a:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d72c:	2206      	movs	r2, #6
1000d72e:	4910      	ldr	r1, [pc, #64]	; (1000d770 <ble_advertisement_data_set+0x9c>)
1000d730:	466b      	mov	r3, sp
1000d732:	1c98      	adds	r0, r3, #2
1000d734:	4b0f      	ldr	r3, [pc, #60]	; (1000d774 <ble_advertisement_data_set+0xa0>)
1000d736:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d738:	2308      	movs	r3, #8
1000d73a:	466a      	mov	r2, sp
1000d73c:	2115      	movs	r1, #21
1000d73e:	0020      	movs	r0, r4
1000d740:	4c0d      	ldr	r4, [pc, #52]	; (1000d778 <ble_advertisement_data_set+0xa4>)
1000d742:	47a0      	blx	r4
1000d744:	2800      	cmp	r0, #0
1000d746:	d005      	beq.n	1000d754 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d748:	4805      	ldr	r0, [pc, #20]	; (1000d760 <ble_advertisement_data_set+0x8c>)
1000d74a:	4b06      	ldr	r3, [pc, #24]	; (1000d764 <ble_advertisement_data_set+0x90>)
1000d74c:	4798      	blx	r3
1000d74e:	480b      	ldr	r0, [pc, #44]	; (1000d77c <ble_advertisement_data_set+0xa8>)
1000d750:	4b06      	ldr	r3, [pc, #24]	; (1000d76c <ble_advertisement_data_set+0x98>)
1000d752:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d754:	2000      	movs	r0, #0
1000d756:	b010      	add	sp, #64	; 0x40
1000d758:	bd10      	pop	{r4, pc}
1000d75a:	46c0      	nop			; (mov r8, r8)
1000d75c:	10018064 	.word	0x10018064
1000d760:	10016b98 	.word	0x10016b98
1000d764:	10015b71 	.word	0x10015b71
1000d768:	10018368 	.word	0x10018368
1000d76c:	10015a51 	.word	0x10015a51
1000d770:	1001839c 	.word	0x1001839c
1000d774:	100158f7 	.word	0x100158f7
1000d778:	1000f105 	.word	0x1000f105
1000d77c:	100183a4 	.word	0x100183a4

1000d780 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d780:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d782:	4b0e      	ldr	r3, [pc, #56]	; (1000d7bc <uart_read_complete_callback+0x3c>)
1000d784:	781b      	ldrb	r3, [r3, #0]
1000d786:	2b01      	cmp	r3, #1
1000d788:	d10b      	bne.n	1000d7a2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d78a:	2202      	movs	r2, #2
1000d78c:	4b0b      	ldr	r3, [pc, #44]	; (1000d7bc <uart_read_complete_callback+0x3c>)
1000d78e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d790:	4b0b      	ldr	r3, [pc, #44]	; (1000d7c0 <uart_read_complete_callback+0x40>)
1000d792:	681b      	ldr	r3, [r3, #0]
1000d794:	2b00      	cmp	r3, #0
1000d796:	d110      	bne.n	1000d7ba <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d798:	2102      	movs	r1, #2
1000d79a:	480a      	ldr	r0, [pc, #40]	; (1000d7c4 <uart_read_complete_callback+0x44>)
1000d79c:	4b0a      	ldr	r3, [pc, #40]	; (1000d7c8 <uart_read_complete_callback+0x48>)
1000d79e:	4798      	blx	r3
1000d7a0:	e00b      	b.n	1000d7ba <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d7a2:	4b07      	ldr	r3, [pc, #28]	; (1000d7c0 <uart_read_complete_callback+0x40>)
1000d7a4:	681b      	ldr	r3, [r3, #0]
1000d7a6:	2b00      	cmp	r3, #0
1000d7a8:	d007      	beq.n	1000d7ba <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d7aa:	4c08      	ldr	r4, [pc, #32]	; (1000d7cc <uart_read_complete_callback+0x4c>)
1000d7ac:	7820      	ldrb	r0, [r4, #0]
1000d7ae:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d7b0:	2201      	movs	r2, #1
1000d7b2:	0021      	movs	r1, r4
1000d7b4:	4803      	ldr	r0, [pc, #12]	; (1000d7c4 <uart_read_complete_callback+0x44>)
1000d7b6:	4b06      	ldr	r3, [pc, #24]	; (1000d7d0 <uart_read_complete_callback+0x50>)
1000d7b8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d7ba:	bd10      	pop	{r4, pc}
1000d7bc:	1001a08c 	.word	0x1001a08c
1000d7c0:	1001a094 	.word	0x1001a094
1000d7c4:	1001ad98 	.word	0x1001ad98
1000d7c8:	1000c1b1 	.word	0x1000c1b1
1000d7cc:	1001a090 	.word	0x1001a090
1000d7d0:	1000c155 	.word	0x1000c155

1000d7d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d7d4:	b570      	push	{r4, r5, r6, lr}
1000d7d6:	0006      	movs	r6, r0
1000d7d8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d7da:	4c03      	ldr	r4, [pc, #12]	; (1000d7e8 <usart_serial_getchar+0x14>)
1000d7dc:	0029      	movs	r1, r5
1000d7de:	0030      	movs	r0, r6
1000d7e0:	47a0      	blx	r4
1000d7e2:	2800      	cmp	r0, #0
1000d7e4:	d1fa      	bne.n	1000d7dc <usart_serial_getchar+0x8>
}
1000d7e6:	bd70      	pop	{r4, r5, r6, pc}
1000d7e8:	1000c141 	.word	0x1000c141

1000d7ec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d7ec:	b570      	push	{r4, r5, r6, lr}
1000d7ee:	0006      	movs	r6, r0
1000d7f0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d7f2:	4c03      	ldr	r4, [pc, #12]	; (1000d800 <usart_serial_putchar+0x14>)
1000d7f4:	0029      	movs	r1, r5
1000d7f6:	0030      	movs	r0, r6
1000d7f8:	47a0      	blx	r4
1000d7fa:	2800      	cmp	r0, #0
1000d7fc:	d1fa      	bne.n	1000d7f4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d7fe:	bd70      	pop	{r4, r5, r6, pc}
1000d800:	1000c131 	.word	0x1000c131

1000d804 <serial_console_init>:

void serial_console_init(void)
{
1000d804:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d806:	2100      	movs	r1, #0
1000d808:	2000      	movs	r0, #0
1000d80a:	4b19      	ldr	r3, [pc, #100]	; (1000d870 <serial_console_init+0x6c>)
1000d80c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d80e:	4c19      	ldr	r4, [pc, #100]	; (1000d874 <serial_console_init+0x70>)
1000d810:	0020      	movs	r0, r4
1000d812:	4b19      	ldr	r3, [pc, #100]	; (1000d878 <serial_console_init+0x74>)
1000d814:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d816:	23e1      	movs	r3, #225	; 0xe1
1000d818:	025b      	lsls	r3, r3, #9
1000d81a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d81c:	2302      	movs	r3, #2
1000d81e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d820:	2203      	movs	r2, #3
1000d822:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d824:	3201      	adds	r2, #1
1000d826:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d828:	3201      	adds	r2, #1
1000d82a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d82c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d82e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d830:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d832:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d834:	4d11      	ldr	r5, [pc, #68]	; (1000d87c <serial_console_init+0x78>)
1000d836:	4b12      	ldr	r3, [pc, #72]	; (1000d880 <serial_console_init+0x7c>)
1000d838:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d83a:	4a12      	ldr	r2, [pc, #72]	; (1000d884 <serial_console_init+0x80>)
1000d83c:	4b12      	ldr	r3, [pc, #72]	; (1000d888 <serial_console_init+0x84>)
1000d83e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d840:	4a12      	ldr	r2, [pc, #72]	; (1000d88c <serial_console_init+0x88>)
1000d842:	4b13      	ldr	r3, [pc, #76]	; (1000d890 <serial_console_init+0x8c>)
1000d844:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d846:	0022      	movs	r2, r4
1000d848:	4912      	ldr	r1, [pc, #72]	; (1000d894 <serial_console_init+0x90>)
1000d84a:	0028      	movs	r0, r5
1000d84c:	4b12      	ldr	r3, [pc, #72]	; (1000d898 <serial_console_init+0x94>)
1000d84e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d850:	4e12      	ldr	r6, [pc, #72]	; (1000d89c <serial_console_init+0x98>)
1000d852:	6833      	ldr	r3, [r6, #0]
1000d854:	6898      	ldr	r0, [r3, #8]
1000d856:	2100      	movs	r1, #0
1000d858:	4c11      	ldr	r4, [pc, #68]	; (1000d8a0 <serial_console_init+0x9c>)
1000d85a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d85c:	6833      	ldr	r3, [r6, #0]
1000d85e:	6858      	ldr	r0, [r3, #4]
1000d860:	2100      	movs	r1, #0
1000d862:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d864:	2202      	movs	r2, #2
1000d866:	490f      	ldr	r1, [pc, #60]	; (1000d8a4 <serial_console_init+0xa0>)
1000d868:	0028      	movs	r0, r5
1000d86a:	4b0f      	ldr	r3, [pc, #60]	; (1000d8a8 <serial_console_init+0xa4>)
1000d86c:	4798      	blx	r3
}
1000d86e:	bd70      	pop	{r4, r5, r6, pc}
1000d870:	1000b151 	.word	0x1000b151
1000d874:	1001adbc 	.word	0x1001adbc
1000d878:	1000bf49 	.word	0x1000bf49
1000d87c:	1001ad98 	.word	0x1001ad98
1000d880:	1001a554 	.word	0x1001a554
1000d884:	1000d7ed 	.word	0x1000d7ed
1000d888:	1001a550 	.word	0x1001a550
1000d88c:	1000d7d5 	.word	0x1000d7d5
1000d890:	1001a54c 	.word	0x1001a54c
1000d894:	40004000 	.word	0x40004000
1000d898:	1000bf75 	.word	0x1000bf75
1000d89c:	10018768 	.word	0x10018768
1000d8a0:	10015c21 	.word	0x10015c21
1000d8a4:	1000d781 	.word	0x1000d781
1000d8a8:	1000c17d 	.word	0x1000c17d

1000d8ac <_time_start>:

void _time_start(unsigned int sec)
{
1000d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8ae:	b083      	sub	sp, #12
1000d8b0:	0005      	movs	r5, r0
	system_clock_get_value();
1000d8b2:	4c0d      	ldr	r4, [pc, #52]	; (1000d8e8 <_time_start+0x3c>)
1000d8b4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d8b6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d8b8:	4f0c      	ldr	r7, [pc, #48]	; (1000d8ec <_time_start+0x40>)
1000d8ba:	47b8      	blx	r7
1000d8bc:	4e0c      	ldr	r6, [pc, #48]	; (1000d8f0 <_time_start+0x44>)
1000d8be:	4a0d      	ldr	r2, [pc, #52]	; (1000d8f4 <_time_start+0x48>)
1000d8c0:	4b0d      	ldr	r3, [pc, #52]	; (1000d8f8 <_time_start+0x4c>)
1000d8c2:	47b0      	blx	r6
1000d8c4:	9000      	str	r0, [sp, #0]
1000d8c6:	9101      	str	r1, [sp, #4]
1000d8c8:	20fa      	movs	r0, #250	; 0xfa
1000d8ca:	0080      	lsls	r0, r0, #2
1000d8cc:	4368      	muls	r0, r5
1000d8ce:	47b8      	blx	r7
1000d8d0:	0002      	movs	r2, r0
1000d8d2:	000b      	movs	r3, r1
1000d8d4:	9800      	ldr	r0, [sp, #0]
1000d8d6:	9901      	ldr	r1, [sp, #4]
1000d8d8:	47b0      	blx	r6
1000d8da:	4b08      	ldr	r3, [pc, #32]	; (1000d8fc <_time_start+0x50>)
1000d8dc:	4798      	blx	r3
1000d8de:	4b08      	ldr	r3, [pc, #32]	; (1000d900 <_time_start+0x54>)
1000d8e0:	6018      	str	r0, [r3, #0]
}
1000d8e2:	b003      	add	sp, #12
1000d8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8e6:	46c0      	nop			; (mov r8, r8)
1000d8e8:	1000b1d5 	.word	0x1000b1d5
1000d8ec:	10015601 	.word	0x10015601
1000d8f0:	10014935 	.word	0x10014935
1000d8f4:	19feaec7 	.word	0x19feaec7
1000d8f8:	3f09d8ef 	.word	0x3f09d8ef
1000d8fc:	10013041 	.word	0x10013041
1000d900:	1001a088 	.word	0x1001a088

1000d904 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d904:	4b02      	ldr	r3, [pc, #8]	; (1000d910 <_time_done+0xc>)
1000d906:	681a      	ldr	r2, [r3, #0]
1000d908:	1e50      	subs	r0, r2, #1
1000d90a:	6018      	str	r0, [r3, #0]
}
1000d90c:	4770      	bx	lr
1000d90e:	46c0      	nop			; (mov r8, r8)
1000d910:	1001a088 	.word	0x1001a088

1000d914 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d914:	b570      	push	{r4, r5, r6, lr}
1000d916:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d918:	2201      	movs	r2, #1
1000d91a:	4b11      	ldr	r3, [pc, #68]	; (1000d960 <getchar_b11_timeout+0x4c>)
1000d91c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d91e:	4b11      	ldr	r3, [pc, #68]	; (1000d964 <getchar_b11_timeout+0x50>)
1000d920:	681b      	ldr	r3, [r3, #0]
1000d922:	2b00      	cmp	r3, #0
1000d924:	d103      	bne.n	1000d92e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d926:	2102      	movs	r1, #2
1000d928:	480f      	ldr	r0, [pc, #60]	; (1000d968 <getchar_b11_timeout+0x54>)
1000d92a:	4b10      	ldr	r3, [pc, #64]	; (1000d96c <getchar_b11_timeout+0x58>)
1000d92c:	4798      	blx	r3

	_time_start(sec);
1000d92e:	0020      	movs	r0, r4
1000d930:	4b0f      	ldr	r3, [pc, #60]	; (1000d970 <getchar_b11_timeout+0x5c>)
1000d932:	4798      	blx	r3
	
	string_input[0] = 0;
1000d934:	490f      	ldr	r1, [pc, #60]	; (1000d974 <getchar_b11_timeout+0x60>)
1000d936:	2300      	movs	r3, #0
1000d938:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d93a:	2201      	movs	r2, #1
1000d93c:	480a      	ldr	r0, [pc, #40]	; (1000d968 <getchar_b11_timeout+0x54>)
1000d93e:	4b0e      	ldr	r3, [pc, #56]	; (1000d978 <getchar_b11_timeout+0x64>)
1000d940:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d942:	4c07      	ldr	r4, [pc, #28]	; (1000d960 <getchar_b11_timeout+0x4c>)
1000d944:	4d0d      	ldr	r5, [pc, #52]	; (1000d97c <getchar_b11_timeout+0x68>)
1000d946:	7823      	ldrb	r3, [r4, #0]
1000d948:	2b02      	cmp	r3, #2
1000d94a:	d002      	beq.n	1000d952 <getchar_b11_timeout+0x3e>
1000d94c:	47a8      	blx	r5
1000d94e:	2800      	cmp	r0, #0
1000d950:	d1f9      	bne.n	1000d946 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d952:	2200      	movs	r2, #0
1000d954:	4b02      	ldr	r3, [pc, #8]	; (1000d960 <getchar_b11_timeout+0x4c>)
1000d956:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d958:	4b06      	ldr	r3, [pc, #24]	; (1000d974 <getchar_b11_timeout+0x60>)
1000d95a:	7818      	ldrb	r0, [r3, #0]
}
1000d95c:	bd70      	pop	{r4, r5, r6, pc}
1000d95e:	46c0      	nop			; (mov r8, r8)
1000d960:	1001a08c 	.word	0x1001a08c
1000d964:	1001a094 	.word	0x1001a094
1000d968:	1001ad98 	.word	0x1001ad98
1000d96c:	1000c191 	.word	0x1000c191
1000d970:	1000d8ad 	.word	0x1000d8ad
1000d974:	1001a090 	.word	0x1001a090
1000d978:	1000c155 	.word	0x1000c155
1000d97c:	1000d905 	.word	0x1000d905

1000d980 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d980:	4b02      	ldr	r3, [pc, #8]	; (1000d98c <platform_event_free+0xc>)
1000d982:	681a      	ldr	r2, [r3, #0]
1000d984:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d986:	6018      	str	r0, [r3, #0]
}
1000d988:	4770      	bx	lr
1000d98a:	46c0      	nop			; (mov r8, r8)
1000d98c:	1001a09c 	.word	0x1001a09c

1000d990 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d990:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d992:	4b0b      	ldr	r3, [pc, #44]	; (1000d9c0 <platform_event_post+0x30>)
1000d994:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d996:	2c00      	cmp	r4, #0
1000d998:	d011      	beq.n	1000d9be <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d99a:	6825      	ldr	r5, [r4, #0]
1000d99c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d99e:	2300      	movs	r3, #0
1000d9a0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d9a2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d9a4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d9a6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d9a8:	4b06      	ldr	r3, [pc, #24]	; (1000d9c4 <platform_event_post+0x34>)
1000d9aa:	681a      	ldr	r2, [r3, #0]
1000d9ac:	2a00      	cmp	r2, #0
1000d9ae:	d102      	bne.n	1000d9b6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d9b0:	601c      	str	r4, [r3, #0]
1000d9b2:	e004      	b.n	1000d9be <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d9b4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d9b6:	6813      	ldr	r3, [r2, #0]
1000d9b8:	2b00      	cmp	r3, #0
1000d9ba:	d1fb      	bne.n	1000d9b4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d9bc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d9be:	bd30      	pop	{r4, r5, pc}
1000d9c0:	1001a09c 	.word	0x1001a09c
1000d9c4:	1001a098 	.word	0x1001a098

1000d9c8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d9c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d9ca:	2300      	movs	r3, #0
1000d9cc:	4a06      	ldr	r2, [pc, #24]	; (1000d9e8 <platform_event_init+0x20>)
1000d9ce:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d9d0:	4a06      	ldr	r2, [pc, #24]	; (1000d9ec <platform_event_init+0x24>)
1000d9d2:	6013      	str	r3, [r2, #0]
1000d9d4:	4c06      	ldr	r4, [pc, #24]	; (1000d9f0 <platform_event_init+0x28>)
1000d9d6:	0026      	movs	r6, r4
1000d9d8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d9da:	4d06      	ldr	r5, [pc, #24]	; (1000d9f4 <platform_event_init+0x2c>)
1000d9dc:	0020      	movs	r0, r4
1000d9de:	47a8      	blx	r5
1000d9e0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d9e2:	42b4      	cmp	r4, r6
1000d9e4:	d1fa      	bne.n	1000d9dc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d9e6:	bd70      	pop	{r4, r5, r6, pc}
1000d9e8:	1001a09c 	.word	0x1001a09c
1000d9ec:	1001a098 	.word	0x1001a098
1000d9f0:	1001a0a0 	.word	0x1001a0a0
1000d9f4:	1000d981 	.word	0x1000d981

1000d9f8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d9f8:	b570      	push	{r4, r5, r6, lr}
1000d9fa:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d9fc:	4b13      	ldr	r3, [pc, #76]	; (1000da4c <at_ke_msg_send+0x54>)
1000d9fe:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000da00:	4b13      	ldr	r3, [pc, #76]	; (1000da50 <at_ke_msg_send+0x58>)
1000da02:	681b      	ldr	r3, [r3, #0]
1000da04:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000da06:	2c0c      	cmp	r4, #12
1000da08:	d01f      	beq.n	1000da4a <at_ke_msg_send+0x52>
1000da0a:	3c0c      	subs	r4, #12
1000da0c:	88e3      	ldrh	r3, [r4, #6]
1000da0e:	2b05      	cmp	r3, #5
1000da10:	d01b      	beq.n	1000da4a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000da12:	07eb      	lsls	r3, r5, #31
1000da14:	d414      	bmi.n	1000da40 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000da16:	4b0f      	ldr	r3, [pc, #60]	; (1000da54 <at_ke_msg_send+0x5c>)
1000da18:	681b      	ldr	r3, [r3, #0]
1000da1a:	2002      	movs	r0, #2
1000da1c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000da1e:	4b0e      	ldr	r3, [pc, #56]	; (1000da58 <at_ke_msg_send+0x60>)
1000da20:	681b      	ldr	r3, [r3, #0]
1000da22:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000da24:	4c0d      	ldr	r4, [pc, #52]	; (1000da5c <at_ke_msg_send+0x64>)
1000da26:	2003      	movs	r0, #3
1000da28:	6823      	ldr	r3, [r4, #0]
1000da2a:	4798      	blx	r3
1000da2c:	2800      	cmp	r0, #0
1000da2e:	d1fa      	bne.n	1000da26 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000da30:	4b0b      	ldr	r3, [pc, #44]	; (1000da60 <at_ke_msg_send+0x68>)
1000da32:	681b      	ldr	r3, [r3, #0]
1000da34:	3002      	adds	r0, #2
1000da36:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000da38:	2201      	movs	r2, #1
1000da3a:	4b0a      	ldr	r3, [pc, #40]	; (1000da64 <at_ke_msg_send+0x6c>)
1000da3c:	601a      	str	r2, [r3, #0]
1000da3e:	e004      	b.n	1000da4a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000da40:	4b09      	ldr	r3, [pc, #36]	; (1000da68 <at_ke_msg_send+0x70>)
1000da42:	6818      	ldr	r0, [r3, #0]
1000da44:	4b09      	ldr	r3, [pc, #36]	; (1000da6c <at_ke_msg_send+0x74>)
1000da46:	681b      	ldr	r3, [r3, #0]
1000da48:	4798      	blx	r3
		}
	}
}
1000da4a:	bd70      	pop	{r4, r5, r6, pc}
1000da4c:	4000b1ec 	.word	0x4000b1ec
1000da50:	1001a148 	.word	0x1001a148
1000da54:	1001a140 	.word	0x1001a140
1000da58:	1001a154 	.word	0x1001a154
1000da5c:	1001a128 	.word	0x1001a128
1000da60:	1001a130 	.word	0x1001a130
1000da64:	4000b020 	.word	0x4000b020
1000da68:	1001a134 	.word	0x1001a134
1000da6c:	1001a124 	.word	0x1001a124

1000da70 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000da70:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000da72:	4b06      	ldr	r3, [pc, #24]	; (1000da8c <samb11_plf_resume_callback+0x1c>)
1000da74:	4a06      	ldr	r2, [pc, #24]	; (1000da90 <samb11_plf_resume_callback+0x20>)
1000da76:	6819      	ldr	r1, [r3, #0]
1000da78:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000da7a:	685a      	ldr	r2, [r3, #4]
1000da7c:	4b05      	ldr	r3, [pc, #20]	; (1000da94 <samb11_plf_resume_callback+0x24>)
1000da7e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000da80:	4b05      	ldr	r3, [pc, #20]	; (1000da98 <samb11_plf_resume_callback+0x28>)
1000da82:	681b      	ldr	r3, [r3, #0]
1000da84:	2b00      	cmp	r3, #0
1000da86:	d000      	beq.n	1000da8a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000da88:	4798      	blx	r3
	}
}
1000da8a:	bd10      	pop	{r4, pc}
1000da8c:	1001ade4 	.word	0x1001ade4
1000da90:	4000b00c 	.word	0x4000b00c
1000da94:	4000b010 	.word	0x4000b010
1000da98:	1001b0c0 	.word	0x1001b0c0

1000da9c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000da9c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000da9e:	2232      	movs	r2, #50	; 0x32
1000daa0:	2100      	movs	r1, #0
1000daa2:	480d      	ldr	r0, [pc, #52]	; (1000dad8 <init_port_list+0x3c>)
1000daa4:	4b0d      	ldr	r3, [pc, #52]	; (1000dadc <init_port_list+0x40>)
1000daa6:	4798      	blx	r3
1000daa8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000daaa:	480b      	ldr	r0, [pc, #44]	; (1000dad8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000daac:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000daae:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000dab0:	004a      	lsls	r2, r1, #1
1000dab2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000dab4:	1882      	adds	r2, r0, r2
1000dab6:	7853      	ldrb	r3, [r2, #1]
1000dab8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000daba:	b2db      	uxtb	r3, r3
1000dabc:	43a3      	bics	r3, r4
1000dabe:	7053      	strb	r3, [r2, #1]
1000dac0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000dac2:	2919      	cmp	r1, #25
1000dac4:	d1f4      	bne.n	1000dab0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000dac6:	4b04      	ldr	r3, [pc, #16]	; (1000dad8 <init_port_list+0x3c>)
1000dac8:	785a      	ldrb	r2, [r3, #1]
1000daca:	3918      	subs	r1, #24
1000dacc:	438a      	bics	r2, r1
1000dace:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000dad0:	78da      	ldrb	r2, [r3, #3]
1000dad2:	438a      	bics	r2, r1
1000dad4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000dad6:	bd70      	pop	{r4, r5, r6, pc}
1000dad8:	1001ae00 	.word	0x1001ae00
1000dadc:	10015909 	.word	0x10015909

1000dae0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000dae0:	4a06      	ldr	r2, [pc, #24]	; (1000dafc <init_clock+0x1c>)
1000dae2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000dae4:	4b06      	ldr	r3, [pc, #24]	; (1000db00 <init_clock+0x20>)
1000dae6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000dae8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000daea:	4a06      	ldr	r2, [pc, #24]	; (1000db04 <init_clock+0x24>)
1000daec:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000daee:	4906      	ldr	r1, [pc, #24]	; (1000db08 <init_clock+0x28>)
1000daf0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000daf2:	4b06      	ldr	r3, [pc, #24]	; (1000db0c <init_clock+0x2c>)
1000daf4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000daf6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000daf8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000dafa:	4770      	bx	lr
1000dafc:	4000b00c 	.word	0x4000b00c
1000db00:	fffe0fd3 	.word	0xfffe0fd3
1000db04:	1001ade4 	.word	0x1001ade4
1000db08:	4000b010 	.word	0x4000b010
1000db0c:	ffffe7c0 	.word	0xffffe7c0

1000db10 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000db10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db12:	4657      	mov	r7, sl
1000db14:	464e      	mov	r6, r9
1000db16:	4645      	mov	r5, r8
1000db18:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000db1a:	4b4f      	ldr	r3, [pc, #316]	; (1000dc58 <platform_driver_init+0x148>)
1000db1c:	781b      	ldrb	r3, [r3, #0]
1000db1e:	2b00      	cmp	r3, #0
1000db20:	d004      	beq.n	1000db2c <platform_driver_init+0x1c>
1000db22:	4b4d      	ldr	r3, [pc, #308]	; (1000dc58 <platform_driver_init+0x148>)
1000db24:	781b      	ldrb	r3, [r3, #0]
1000db26:	2b01      	cmp	r3, #1
1000db28:	d100      	bne.n	1000db2c <platform_driver_init+0x1c>
1000db2a:	e08c      	b.n	1000dc46 <platform_driver_init+0x136>
		init_port_list();
1000db2c:	4b4b      	ldr	r3, [pc, #300]	; (1000dc5c <platform_driver_init+0x14c>)
1000db2e:	4798      	blx	r3
		init_clock();
1000db30:	4b4b      	ldr	r3, [pc, #300]	; (1000dc60 <platform_driver_init+0x150>)
1000db32:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000db34:	2300      	movs	r3, #0
1000db36:	4698      	mov	r8, r3
1000db38:	4b4a      	ldr	r3, [pc, #296]	; (1000dc64 <platform_driver_init+0x154>)
1000db3a:	4642      	mov	r2, r8
1000db3c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000db3e:	4c4a      	ldr	r4, [pc, #296]	; (1000dc68 <platform_driver_init+0x158>)
1000db40:	2380      	movs	r3, #128	; 0x80
1000db42:	2280      	movs	r2, #128	; 0x80
1000db44:	0412      	lsls	r2, r2, #16
1000db46:	4692      	mov	sl, r2
1000db48:	50e2      	str	r2, [r4, r3]
1000db4a:	2280      	movs	r2, #128	; 0x80
1000db4c:	0452      	lsls	r2, r2, #17
1000db4e:	4691      	mov	r9, r2
1000db50:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000db52:	4d46      	ldr	r5, [pc, #280]	; (1000dc6c <platform_driver_init+0x15c>)
1000db54:	4b46      	ldr	r3, [pc, #280]	; (1000dc70 <platform_driver_init+0x160>)
1000db56:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000db58:	4b46      	ldr	r3, [pc, #280]	; (1000dc74 <platform_driver_init+0x164>)
1000db5a:	4a47      	ldr	r2, [pc, #284]	; (1000dc78 <platform_driver_init+0x168>)
1000db5c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000db5e:	4947      	ldr	r1, [pc, #284]	; (1000dc7c <platform_driver_init+0x16c>)
1000db60:	4a47      	ldr	r2, [pc, #284]	; (1000dc80 <platform_driver_init+0x170>)
1000db62:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000db64:	4a47      	ldr	r2, [pc, #284]	; (1000dc84 <platform_driver_init+0x174>)
1000db66:	6811      	ldr	r1, [r2, #0]
1000db68:	4a47      	ldr	r2, [pc, #284]	; (1000dc88 <platform_driver_init+0x178>)
1000db6a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000db6c:	4a47      	ldr	r2, [pc, #284]	; (1000dc8c <platform_driver_init+0x17c>)
1000db6e:	6811      	ldr	r1, [r2, #0]
1000db70:	4a47      	ldr	r2, [pc, #284]	; (1000dc90 <platform_driver_init+0x180>)
1000db72:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000db74:	4947      	ldr	r1, [pc, #284]	; (1000dc94 <platform_driver_init+0x184>)
1000db76:	4a48      	ldr	r2, [pc, #288]	; (1000dc98 <platform_driver_init+0x188>)
1000db78:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000db7a:	4948      	ldr	r1, [pc, #288]	; (1000dc9c <platform_driver_init+0x18c>)
1000db7c:	4a48      	ldr	r2, [pc, #288]	; (1000dca0 <platform_driver_init+0x190>)
1000db7e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000db80:	4f48      	ldr	r7, [pc, #288]	; (1000dca4 <platform_driver_init+0x194>)
1000db82:	4a49      	ldr	r2, [pc, #292]	; (1000dca8 <platform_driver_init+0x198>)
1000db84:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000db86:	4949      	ldr	r1, [pc, #292]	; (1000dcac <platform_driver_init+0x19c>)
1000db88:	4a49      	ldr	r2, [pc, #292]	; (1000dcb0 <platform_driver_init+0x1a0>)
1000db8a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000db8c:	4949      	ldr	r1, [pc, #292]	; (1000dcb4 <platform_driver_init+0x1a4>)
1000db8e:	4a4a      	ldr	r2, [pc, #296]	; (1000dcb8 <platform_driver_init+0x1a8>)
1000db90:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000db92:	4e4a      	ldr	r6, [pc, #296]	; (1000dcbc <platform_driver_init+0x1ac>)
1000db94:	4a4a      	ldr	r2, [pc, #296]	; (1000dcc0 <platform_driver_init+0x1b0>)
1000db96:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000db98:	494a      	ldr	r1, [pc, #296]	; (1000dcc4 <platform_driver_init+0x1b4>)
1000db9a:	4a4b      	ldr	r2, [pc, #300]	; (1000dcc8 <platform_driver_init+0x1b8>)
1000db9c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000db9e:	494b      	ldr	r1, [pc, #300]	; (1000dccc <platform_driver_init+0x1bc>)
1000dba0:	4a4b      	ldr	r2, [pc, #300]	; (1000dcd0 <platform_driver_init+0x1c0>)
1000dba2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000dba4:	494b      	ldr	r1, [pc, #300]	; (1000dcd4 <platform_driver_init+0x1c4>)
1000dba6:	4a4c      	ldr	r2, [pc, #304]	; (1000dcd8 <platform_driver_init+0x1c8>)
1000dba8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000dbaa:	494c      	ldr	r1, [pc, #304]	; (1000dcdc <platform_driver_init+0x1cc>)
1000dbac:	4a4c      	ldr	r2, [pc, #304]	; (1000dce0 <platform_driver_init+0x1d0>)
1000dbae:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000dbb0:	494c      	ldr	r1, [pc, #304]	; (1000dce4 <platform_driver_init+0x1d4>)
1000dbb2:	4a4d      	ldr	r2, [pc, #308]	; (1000dce8 <platform_driver_init+0x1d8>)
1000dbb4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000dbb6:	2028      	movs	r0, #40	; 0x28
1000dbb8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000dbba:	494c      	ldr	r1, [pc, #304]	; (1000dcec <platform_driver_init+0x1dc>)
1000dbbc:	2028      	movs	r0, #40	; 0x28
1000dbbe:	682b      	ldr	r3, [r5, #0]
1000dbc0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000dbc2:	682b      	ldr	r3, [r5, #0]
1000dbc4:	494a      	ldr	r1, [pc, #296]	; (1000dcf0 <platform_driver_init+0x1e0>)
1000dbc6:	2027      	movs	r0, #39	; 0x27
1000dbc8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000dbca:	4b4a      	ldr	r3, [pc, #296]	; (1000dcf4 <platform_driver_init+0x1e4>)
1000dbcc:	681a      	ldr	r2, [r3, #0]
1000dbce:	4b4a      	ldr	r3, [pc, #296]	; (1000dcf8 <platform_driver_init+0x1e8>)
1000dbd0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000dbd2:	4a4a      	ldr	r2, [pc, #296]	; (1000dcfc <platform_driver_init+0x1ec>)
1000dbd4:	4b4a      	ldr	r3, [pc, #296]	; (1000dd00 <platform_driver_init+0x1f0>)
1000dbd6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000dbd8:	4a4a      	ldr	r2, [pc, #296]	; (1000dd04 <platform_driver_init+0x1f4>)
1000dbda:	4b4b      	ldr	r3, [pc, #300]	; (1000dd08 <platform_driver_init+0x1f8>)
1000dbdc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000dbde:	4a4b      	ldr	r2, [pc, #300]	; (1000dd0c <platform_driver_init+0x1fc>)
1000dbe0:	4b4b      	ldr	r3, [pc, #300]	; (1000dd10 <platform_driver_init+0x200>)
1000dbe2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000dbe4:	4a4b      	ldr	r2, [pc, #300]	; (1000dd14 <platform_driver_init+0x204>)
1000dbe6:	4b4c      	ldr	r3, [pc, #304]	; (1000dd18 <platform_driver_init+0x208>)
1000dbe8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000dbea:	4a4c      	ldr	r2, [pc, #304]	; (1000dd1c <platform_driver_init+0x20c>)
1000dbec:	4b4c      	ldr	r3, [pc, #304]	; (1000dd20 <platform_driver_init+0x210>)
1000dbee:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000dbf0:	4a4c      	ldr	r2, [pc, #304]	; (1000dd24 <platform_driver_init+0x214>)
1000dbf2:	4b4d      	ldr	r3, [pc, #308]	; (1000dd28 <platform_driver_init+0x218>)
1000dbf4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000dbf6:	4a4d      	ldr	r2, [pc, #308]	; (1000dd2c <platform_driver_init+0x21c>)
1000dbf8:	4b4d      	ldr	r3, [pc, #308]	; (1000dd30 <platform_driver_init+0x220>)
1000dbfa:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000dbfc:	22a0      	movs	r2, #160	; 0xa0
1000dbfe:	0092      	lsls	r2, r2, #2
1000dc00:	2100      	movs	r1, #0
1000dc02:	484c      	ldr	r0, [pc, #304]	; (1000dd34 <platform_driver_init+0x224>)
1000dc04:	4b4c      	ldr	r3, [pc, #304]	; (1000dd38 <platform_driver_init+0x228>)
1000dc06:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dc08:	2280      	movs	r2, #128	; 0x80
1000dc0a:	0092      	lsls	r2, r2, #2
1000dc0c:	4b4b      	ldr	r3, [pc, #300]	; (1000dd3c <platform_driver_init+0x22c>)
1000dc0e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000dc10:	4b4b      	ldr	r3, [pc, #300]	; (1000dd40 <platform_driver_init+0x230>)
1000dc12:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000dc14:	4653      	mov	r3, sl
1000dc16:	6023      	str	r3, [r4, #0]
1000dc18:	464b      	mov	r3, r9
1000dc1a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000dc1c:	4b49      	ldr	r3, [pc, #292]	; (1000dd44 <platform_driver_init+0x234>)
1000dc1e:	4642      	mov	r2, r8
1000dc20:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000dc22:	683b      	ldr	r3, [r7, #0]
1000dc24:	4a48      	ldr	r2, [pc, #288]	; (1000dd48 <platform_driver_init+0x238>)
1000dc26:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000dc28:	6833      	ldr	r3, [r6, #0]
1000dc2a:	4a48      	ldr	r2, [pc, #288]	; (1000dd4c <platform_driver_init+0x23c>)
1000dc2c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000dc2e:	2000      	movs	r0, #0
1000dc30:	4c47      	ldr	r4, [pc, #284]	; (1000dd50 <platform_driver_init+0x240>)
1000dc32:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000dc34:	2001      	movs	r0, #1
1000dc36:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000dc38:	2002      	movs	r0, #2
1000dc3a:	47a0      	blx	r4
		platform_initialized = 1;
1000dc3c:	2201      	movs	r2, #1
1000dc3e:	4b06      	ldr	r3, [pc, #24]	; (1000dc58 <platform_driver_init+0x148>)
1000dc40:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000dc42:	2000      	movs	r0, #0
1000dc44:	e003      	b.n	1000dc4e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000dc46:	2201      	movs	r2, #1
1000dc48:	4b03      	ldr	r3, [pc, #12]	; (1000dc58 <platform_driver_init+0x148>)
1000dc4a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000dc4c:	2001      	movs	r0, #1
	}
	return status;
}
1000dc4e:	bc1c      	pop	{r2, r3, r4}
1000dc50:	4690      	mov	r8, r2
1000dc52:	4699      	mov	r9, r3
1000dc54:	46a2      	mov	sl, r4
1000dc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc58:	1001a12c 	.word	0x1001a12c
1000dc5c:	1000da9d 	.word	0x1000da9d
1000dc60:	1000dae1 	.word	0x1000dae1
1000dc64:	1001a14c 	.word	0x1001a14c
1000dc68:	e000e100 	.word	0xe000e100
1000dc6c:	1001b0b4 	.word	0x1001b0b4
1000dc70:	000007d7 	.word	0x000007d7
1000dc74:	000007bd 	.word	0x000007bd
1000dc78:	1001adf0 	.word	0x1001adf0
1000dc7c:	0001bc51 	.word	0x0001bc51
1000dc80:	1001b0b8 	.word	0x1001b0b8
1000dc84:	100400bc 	.word	0x100400bc
1000dc88:	1001a120 	.word	0x1001a120
1000dc8c:	100400b8 	.word	0x100400b8
1000dc90:	1001a11c 	.word	0x1001a11c
1000dc94:	0001b99f 	.word	0x0001b99f
1000dc98:	1001adec 	.word	0x1001adec
1000dc9c:	0001b9db 	.word	0x0001b9db
1000dca0:	1001adf8 	.word	0x1001adf8
1000dca4:	1001b0c8 	.word	0x1001b0c8
1000dca8:	1004003c 	.word	0x1004003c
1000dcac:	10041fc0 	.word	0x10041fc0
1000dcb0:	1001adfc 	.word	0x1001adfc
1000dcb4:	10041fc4 	.word	0x10041fc4
1000dcb8:	1001b0c4 	.word	0x1001b0c4
1000dcbc:	1001b0bc 	.word	0x1001b0bc
1000dcc0:	10041fd4 	.word	0x10041fd4
1000dcc4:	10041fd8 	.word	0x10041fd8
1000dcc8:	1001adf4 	.word	0x1001adf4
1000dccc:	0001cbe9 	.word	0x0001cbe9
1000dcd0:	1001a140 	.word	0x1001a140
1000dcd4:	0001cd8f 	.word	0x0001cd8f
1000dcd8:	1001a130 	.word	0x1001a130
1000dcdc:	0001cea3 	.word	0x0001cea3
1000dce0:	1001a154 	.word	0x1001a154
1000dce4:	0001cbcf 	.word	0x0001cbcf
1000dce8:	1001a128 	.word	0x1001a128
1000dcec:	1000e199 	.word	0x1000e199
1000dcf0:	1000e12d 	.word	0x1000e12d
1000dcf4:	100400e4 	.word	0x100400e4
1000dcf8:	1001a148 	.word	0x1001a148
1000dcfc:	00019fe9 	.word	0x00019fe9
1000dd00:	1001a158 	.word	0x1001a158
1000dd04:	0001dbdd 	.word	0x0001dbdd
1000dd08:	1001a124 	.word	0x1001a124
1000dd0c:	0001dc5b 	.word	0x0001dc5b
1000dd10:	1001a138 	.word	0x1001a138
1000dd14:	100405ec 	.word	0x100405ec
1000dd18:	1001a134 	.word	0x1001a134
1000dd1c:	0001d5e3 	.word	0x0001d5e3
1000dd20:	1001a144 	.word	0x1001a144
1000dd24:	10040c20 	.word	0x10040c20
1000dd28:	1001a15c 	.word	0x1001a15c
1000dd2c:	00019f09 	.word	0x00019f09
1000dd30:	1001a118 	.word	0x1001a118
1000dd34:	1001ae34 	.word	0x1001ae34
1000dd38:	10015909 	.word	0x10015909
1000dd3c:	1001b0cc 	.word	0x1001b0cc
1000dd40:	1000d9c9 	.word	0x1000d9c9
1000dd44:	1001b0c0 	.word	0x1001b0c0
1000dd48:	1000da71 	.word	0x1000da71
1000dd4c:	1000e1f5 	.word	0x1000e1f5
1000dd50:	1000e1dd 	.word	0x1000e1dd

1000dd54 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dd54:	4b04      	ldr	r3, [pc, #16]	; (1000dd68 <platform_register_ble_msg_handler+0x14>)
1000dd56:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000dd58:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dd5a:	2a01      	cmp	r2, #1
1000dd5c:	d102      	bne.n	1000dd64 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000dd5e:	4b03      	ldr	r3, [pc, #12]	; (1000dd6c <platform_register_ble_msg_handler+0x18>)
1000dd60:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000dd62:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000dd64:	0018      	movs	r0, r3
1000dd66:	4770      	bx	lr
1000dd68:	1001a12c 	.word	0x1001a12c
1000dd6c:	1001a14c 	.word	0x1001a14c

1000dd70 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000dd70:	b570      	push	{r4, r5, r6, lr}
1000dd72:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000dd74:	4b0e      	ldr	r3, [pc, #56]	; (1000ddb0 <platform_interface_send+0x40>)
1000dd76:	681b      	ldr	r3, [r3, #0]
1000dd78:	2b00      	cmp	r3, #0
1000dd7a:	d002      	beq.n	1000dd82 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000dd7c:	8840      	ldrh	r0, [r0, #2]
1000dd7e:	4798      	blx	r3
1000dd80:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000dd82:	88e3      	ldrh	r3, [r4, #6]
1000dd84:	88a2      	ldrh	r2, [r4, #4]
1000dd86:	8861      	ldrh	r1, [r4, #2]
1000dd88:	8820      	ldrh	r0, [r4, #0]
1000dd8a:	4d0a      	ldr	r5, [pc, #40]	; (1000ddb4 <platform_interface_send+0x44>)
1000dd8c:	682d      	ldr	r5, [r5, #0]
1000dd8e:	47a8      	blx	r5
1000dd90:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000dd92:	88e2      	ldrh	r2, [r4, #6]
1000dd94:	2a00      	cmp	r2, #0
1000dd96:	d102      	bne.n	1000dd9e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000dd98:	4b07      	ldr	r3, [pc, #28]	; (1000ddb8 <platform_interface_send+0x48>)
1000dd9a:	4798      	blx	r3
1000dd9c:	e006      	b.n	1000ddac <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000dd9e:	0021      	movs	r1, r4
1000dda0:	3108      	adds	r1, #8
1000dda2:	4b06      	ldr	r3, [pc, #24]	; (1000ddbc <platform_interface_send+0x4c>)
1000dda4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000dda6:	0028      	movs	r0, r5
1000dda8:	4b03      	ldr	r3, [pc, #12]	; (1000ddb8 <platform_interface_send+0x48>)
1000ddaa:	4798      	blx	r3
	}
}
1000ddac:	bd70      	pop	{r4, r5, r6, pc}
1000ddae:	46c0      	nop			; (mov r8, r8)
1000ddb0:	1001a120 	.word	0x1001a120
1000ddb4:	1001a158 	.word	0x1001a158
1000ddb8:	1000d9f9 	.word	0x1000d9f9
1000ddbc:	100158f7 	.word	0x100158f7

1000ddc0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ddc0:	b570      	push	{r4, r5, r6, lr}
1000ddc2:	0015      	movs	r5, r2
1000ddc4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000ddc6:	020a      	lsls	r2, r1, #8
1000ddc8:	4302      	orrs	r2, r0
1000ddca:	4b0a      	ldr	r3, [pc, #40]	; (1000ddf4 <send_plf_int_msg_ind+0x34>)
1000ddcc:	681e      	ldr	r6, [r3, #0]
1000ddce:	0023      	movs	r3, r4
1000ddd0:	2105      	movs	r1, #5
1000ddd2:	20a0      	movs	r0, #160	; 0xa0
1000ddd4:	00c0      	lsls	r0, r0, #3
1000ddd6:	47b0      	blx	r6
1000ddd8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000ddda:	d00a      	beq.n	1000ddf2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000dddc:	2c00      	cmp	r4, #0
1000ddde:	d005      	beq.n	1000ddec <send_plf_int_msg_ind+0x2c>
1000dde0:	2d00      	cmp	r5, #0
1000dde2:	d003      	beq.n	1000ddec <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000dde4:	0022      	movs	r2, r4
1000dde6:	0029      	movs	r1, r5
1000dde8:	4b03      	ldr	r3, [pc, #12]	; (1000ddf8 <send_plf_int_msg_ind+0x38>)
1000ddea:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000ddec:	0030      	movs	r0, r6
1000ddee:	4b03      	ldr	r3, [pc, #12]	; (1000ddfc <send_plf_int_msg_ind+0x3c>)
1000ddf0:	4798      	blx	r3
	}
}
1000ddf2:	bd70      	pop	{r4, r5, r6, pc}
1000ddf4:	1001a158 	.word	0x1001a158
1000ddf8:	100158f7 	.word	0x100158f7
1000ddfc:	1000d9f9 	.word	0x1000d9f9

1000de00 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000de00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de02:	465f      	mov	r7, fp
1000de04:	4656      	mov	r6, sl
1000de06:	464d      	mov	r5, r9
1000de08:	4644      	mov	r4, r8
1000de0a:	b4f0      	push	{r4, r5, r6, r7}
1000de0c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000de0e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000de10:	2300      	movs	r3, #0
1000de12:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000de14:	1ce3      	adds	r3, r4, #3
1000de16:	d81c      	bhi.n	1000de52 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000de18:	220d      	movs	r2, #13
1000de1a:	2100      	movs	r1, #0
1000de1c:	a802      	add	r0, sp, #8
1000de1e:	4b82      	ldr	r3, [pc, #520]	; (1000e028 <platform_event_wait+0x228>)
1000de20:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000de22:	2333      	movs	r3, #51	; 0x33
1000de24:	aa02      	add	r2, sp, #8
1000de26:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000de28:	3b30      	subs	r3, #48	; 0x30
1000de2a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000de2c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000de2e:	3302      	adds	r3, #2
1000de30:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000de32:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000de34:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000de36:	0a23      	lsrs	r3, r4, #8
1000de38:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000de3a:	0c23      	lsrs	r3, r4, #16
1000de3c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000de3e:	0e24      	lsrs	r4, r4, #24
1000de40:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000de42:	2301      	movs	r3, #1
1000de44:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000de46:	210d      	movs	r1, #13
1000de48:	0010      	movs	r0, r2
1000de4a:	4b78      	ldr	r3, [pc, #480]	; (1000e02c <platform_event_wait+0x22c>)
1000de4c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000de4e:	2301      	movs	r3, #1
1000de50:	4699      	mov	r9, r3
1000de52:	2400      	movs	r4, #0
1000de54:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000de56:	4f76      	ldr	r7, [pc, #472]	; (1000e030 <platform_event_wait+0x230>)
1000de58:	4e76      	ldr	r6, [pc, #472]	; (1000e034 <platform_event_wait+0x234>)
1000de5a:	4977      	ldr	r1, [pc, #476]	; (1000e038 <platform_event_wait+0x238>)
1000de5c:	6838      	ldr	r0, [r7, #0]
1000de5e:	6833      	ldr	r3, [r6, #0]
1000de60:	4798      	blx	r3
1000de62:	2800      	cmp	r0, #0
1000de64:	d000      	beq.n	1000de68 <platform_event_wait+0x68>
1000de66:	e088      	b.n	1000df7a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000de68:	4b73      	ldr	r3, [pc, #460]	; (1000e038 <platform_event_wait+0x238>)
1000de6a:	681c      	ldr	r4, [r3, #0]
1000de6c:	88a3      	ldrh	r3, [r4, #4]
1000de6e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000de70:	23cd      	movs	r3, #205	; 0xcd
1000de72:	009b      	lsls	r3, r3, #2
1000de74:	459a      	cmp	sl, r3
1000de76:	d100      	bne.n	1000de7a <platform_event_wait+0x7a>
1000de78:	e0c7      	b.n	1000e00a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000de7a:	8923      	ldrh	r3, [r4, #8]
1000de7c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000de7e:	8963      	ldrh	r3, [r4, #10]
1000de80:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000de82:	464b      	mov	r3, r9
1000de84:	2b00      	cmp	r3, #0
1000de86:	d011      	beq.n	1000deac <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000de88:	220d      	movs	r2, #13
1000de8a:	2100      	movs	r1, #0
1000de8c:	a802      	add	r0, sp, #8
1000de8e:	4b66      	ldr	r3, [pc, #408]	; (1000e028 <platform_event_wait+0x228>)
1000de90:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000de92:	2333      	movs	r3, #51	; 0x33
1000de94:	aa02      	add	r2, sp, #8
1000de96:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000de98:	3b30      	subs	r3, #48	; 0x30
1000de9a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000de9c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000de9e:	3302      	adds	r3, #2
1000dea0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dea2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000dea4:	210d      	movs	r1, #13
1000dea6:	0010      	movs	r0, r2
1000dea8:	4b60      	ldr	r3, [pc, #384]	; (1000e02c <platform_event_wait+0x22c>)
1000deaa:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000deac:	23a0      	movs	r3, #160	; 0xa0
1000deae:	00db      	lsls	r3, r3, #3
1000deb0:	459a      	cmp	sl, r3
1000deb2:	d121      	bne.n	1000def8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000deb4:	4b61      	ldr	r3, [pc, #388]	; (1000e03c <platform_event_wait+0x23c>)
1000deb6:	881b      	ldrh	r3, [r3, #0]
1000deb8:	4443      	add	r3, r8
1000deba:	22a0      	movs	r2, #160	; 0xa0
1000debc:	0092      	lsls	r2, r2, #2
1000debe:	4293      	cmp	r3, r2
1000dec0:	dd02      	ble.n	1000dec8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dec2:	3a80      	subs	r2, #128	; 0x80
1000dec4:	4b5d      	ldr	r3, [pc, #372]	; (1000e03c <platform_event_wait+0x23c>)
1000dec6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000dec8:	4b5c      	ldr	r3, [pc, #368]	; (1000e03c <platform_event_wait+0x23c>)
1000deca:	469a      	mov	sl, r3
1000decc:	881d      	ldrh	r5, [r3, #0]
1000dece:	4b5c      	ldr	r3, [pc, #368]	; (1000e040 <platform_event_wait+0x240>)
1000ded0:	18ed      	adds	r5, r5, r3
1000ded2:	0021      	movs	r1, r4
1000ded4:	310c      	adds	r1, #12
1000ded6:	4642      	mov	r2, r8
1000ded8:	0028      	movs	r0, r5
1000deda:	4b5a      	ldr	r3, [pc, #360]	; (1000e044 <platform_event_wait+0x244>)
1000dedc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000dede:	4642      	mov	r2, r8
1000dee0:	0029      	movs	r1, r5
1000dee2:	4658      	mov	r0, fp
1000dee4:	4b58      	ldr	r3, [pc, #352]	; (1000e048 <platform_event_wait+0x248>)
1000dee6:	4798      	blx	r3
				plf_event_buff_index += len;
1000dee8:	4653      	mov	r3, sl
1000deea:	881b      	ldrh	r3, [r3, #0]
1000deec:	4443      	add	r3, r8
1000deee:	4652      	mov	r2, sl
1000def0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000def2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000def4:	2502      	movs	r5, #2
1000def6:	e03a      	b.n	1000df6e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000def8:	4b54      	ldr	r3, [pc, #336]	; (1000e04c <platform_event_wait+0x24c>)
1000defa:	681b      	ldr	r3, [r3, #0]
1000defc:	2b00      	cmp	r3, #0
1000defe:	d032      	beq.n	1000df66 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000df00:	4b4d      	ldr	r3, [pc, #308]	; (1000e038 <platform_event_wait+0x238>)
1000df02:	681a      	ldr	r2, [r3, #0]
1000df04:	8893      	ldrh	r3, [r2, #4]
1000df06:	21cd      	movs	r1, #205	; 0xcd
1000df08:	0089      	lsls	r1, r1, #2
1000df0a:	428b      	cmp	r3, r1
1000df0c:	d104      	bne.n	1000df18 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000df0e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000df10:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000df12:	2b00      	cmp	r3, #0
1000df14:	d02b      	beq.n	1000df6e <platform_event_wait+0x16e>
1000df16:	e028      	b.n	1000df6a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000df18:	4c4d      	ldr	r4, [pc, #308]	; (1000e050 <platform_event_wait+0x250>)
1000df1a:	4d49      	ldr	r5, [pc, #292]	; (1000e040 <platform_event_wait+0x240>)
1000df1c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000df1e:	702b      	strb	r3, [r5, #0]
1000df20:	0a1b      	lsrs	r3, r3, #8
1000df22:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000df24:	8910      	ldrh	r0, [r2, #8]
1000df26:	4b4b      	ldr	r3, [pc, #300]	; (1000e054 <platform_event_wait+0x254>)
1000df28:	681b      	ldr	r3, [r3, #0]
1000df2a:	4798      	blx	r3
1000df2c:	7128      	strb	r0, [r5, #4]
1000df2e:	0a00      	lsrs	r0, r0, #8
1000df30:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000df32:	6820      	ldr	r0, [r4, #0]
1000df34:	4b40      	ldr	r3, [pc, #256]	; (1000e038 <platform_event_wait+0x238>)
1000df36:	681a      	ldr	r2, [r3, #0]
1000df38:	88d2      	ldrh	r2, [r2, #6]
1000df3a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000df3c:	681d      	ldr	r5, [r3, #0]
1000df3e:	896b      	ldrh	r3, [r5, #10]
1000df40:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000df42:	3008      	adds	r0, #8
1000df44:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000df46:	896a      	ldrh	r2, [r5, #10]
1000df48:	2a00      	cmp	r2, #0
1000df4a:	d003      	beq.n	1000df54 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000df4c:	0029      	movs	r1, r5
1000df4e:	310c      	adds	r1, #12
1000df50:	4b3c      	ldr	r3, [pc, #240]	; (1000e044 <platform_event_wait+0x244>)
1000df52:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000df54:	8969      	ldrh	r1, [r5, #10]
1000df56:	3108      	adds	r1, #8
1000df58:	4b3c      	ldr	r3, [pc, #240]	; (1000e04c <platform_event_wait+0x24c>)
1000df5a:	681b      	ldr	r3, [r3, #0]
1000df5c:	4838      	ldr	r0, [pc, #224]	; (1000e040 <platform_event_wait+0x240>)
1000df5e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000df60:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000df62:	2503      	movs	r5, #3
1000df64:	e003      	b.n	1000df6e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000df66:	2400      	movs	r4, #0
1000df68:	e001      	b.n	1000df6e <platform_event_wait+0x16e>
1000df6a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000df6c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000df6e:	4b32      	ldr	r3, [pc, #200]	; (1000e038 <platform_event_wait+0x238>)
1000df70:	6818      	ldr	r0, [r3, #0]
1000df72:	4b39      	ldr	r3, [pc, #228]	; (1000e058 <platform_event_wait+0x258>)
1000df74:	681b      	ldr	r3, [r3, #0]
1000df76:	4798      	blx	r3
1000df78:	e000      	b.n	1000df7c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000df7a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000df7c:	2c00      	cmp	r4, #0
1000df7e:	d000      	beq.n	1000df82 <platform_event_wait+0x182>
1000df80:	e76b      	b.n	1000de5a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000df82:	464b      	mov	r3, r9
1000df84:	2b00      	cmp	r3, #0
1000df86:	d046      	beq.n	1000e016 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000df88:	4b29      	ldr	r3, [pc, #164]	; (1000e030 <platform_event_wait+0x230>)
1000df8a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000df8c:	2e00      	cmp	r6, #0
1000df8e:	d104      	bne.n	1000df9a <platform_event_wait+0x19a>
1000df90:	2300      	movs	r3, #0
1000df92:	6a1c      	ldr	r4, [r3, #32]
1000df94:	2c00      	cmp	r4, #0
1000df96:	d131      	bne.n	1000dffc <platform_event_wait+0x1fc>
1000df98:	e03d      	b.n	1000e016 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000df9a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000df9c:	2314      	movs	r3, #20
1000df9e:	469c      	mov	ip, r3
1000dfa0:	44b4      	add	ip, r6
1000dfa2:	4663      	mov	r3, ip
1000dfa4:	4660      	mov	r0, ip
1000dfa6:	9300      	str	r3, [sp, #0]
1000dfa8:	4b2c      	ldr	r3, [pc, #176]	; (1000e05c <platform_event_wait+0x25c>)
1000dfaa:	681b      	ldr	r3, [r3, #0]
1000dfac:	4798      	blx	r3
	while(NULL != current)
1000dfae:	2c00      	cmp	r4, #0
1000dfb0:	d01f      	beq.n	1000dff2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000dfb2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000dfb4:	23cd      	movs	r3, #205	; 0xcd
1000dfb6:	009b      	lsls	r3, r3, #2
1000dfb8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000dfba:	4b27      	ldr	r3, [pc, #156]	; (1000e058 <platform_event_wait+0x258>)
1000dfbc:	469a      	mov	sl, r3
1000dfbe:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000dfc0:	6803      	ldr	r3, [r0, #0]
1000dfc2:	889b      	ldrh	r3, [r3, #4]
1000dfc4:	4543      	cmp	r3, r8
1000dfc6:	d110      	bne.n	1000dfea <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000dfc8:	2f00      	cmp	r7, #0
1000dfca:	d006      	beq.n	1000dfda <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000dfcc:	6883      	ldr	r3, [r0, #8]
1000dfce:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000dfd0:	4653      	mov	r3, sl
1000dfd2:	681b      	ldr	r3, [r3, #0]
1000dfd4:	4798      	blx	r3
				current = prev->pstrNext;
1000dfd6:	68b8      	ldr	r0, [r7, #8]
1000dfd8:	e009      	b.n	1000dfee <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000dfda:	6883      	ldr	r3, [r0, #8]
1000dfdc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000dfde:	4b1e      	ldr	r3, [pc, #120]	; (1000e058 <platform_event_wait+0x258>)
1000dfe0:	681b      	ldr	r3, [r3, #0]
1000dfe2:	9301      	str	r3, [sp, #4]
1000dfe4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000dfe6:	6a30      	ldr	r0, [r6, #32]
1000dfe8:	e001      	b.n	1000dfee <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000dfea:	0007      	movs	r7, r0
1000dfec:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000dfee:	2800      	cmp	r0, #0
1000dff0:	d1e6      	bne.n	1000dfc0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000dff2:	4b1b      	ldr	r3, [pc, #108]	; (1000e060 <platform_event_wait+0x260>)
1000dff4:	681b      	ldr	r3, [r3, #0]
1000dff6:	9800      	ldr	r0, [sp, #0]
1000dff8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000dffa:	e00c      	b.n	1000e016 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000dffc:	2314      	movs	r3, #20
1000dffe:	9300      	str	r3, [sp, #0]
1000e000:	4b16      	ldr	r3, [pc, #88]	; (1000e05c <platform_event_wait+0x25c>)
1000e002:	681b      	ldr	r3, [r3, #0]
1000e004:	2014      	movs	r0, #20
1000e006:	4798      	blx	r3
1000e008:	e7d3      	b.n	1000dfb2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e00a:	4b10      	ldr	r3, [pc, #64]	; (1000e04c <platform_event_wait+0x24c>)
1000e00c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e00e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e010:	2b00      	cmp	r3, #0
1000e012:	d0ac      	beq.n	1000df6e <platform_event_wait+0x16e>
1000e014:	e77b      	b.n	1000df0e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e016:	0028      	movs	r0, r5
1000e018:	b007      	add	sp, #28
1000e01a:	bc3c      	pop	{r2, r3, r4, r5}
1000e01c:	4690      	mov	r8, r2
1000e01e:	4699      	mov	r9, r3
1000e020:	46a2      	mov	sl, r4
1000e022:	46ab      	mov	fp, r5
1000e024:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e026:	46c0      	nop			; (mov r8, r8)
1000e028:	10015909 	.word	0x10015909
1000e02c:	1000dd71 	.word	0x1000dd71
1000e030:	1001a15c 	.word	0x1001a15c
1000e034:	1001a144 	.word	0x1001a144
1000e038:	1001a150 	.word	0x1001a150
1000e03c:	1001b0cc 	.word	0x1001b0cc
1000e040:	1001ae34 	.word	0x1001ae34
1000e044:	100158f7 	.word	0x100158f7
1000e048:	1000d991 	.word	0x1000d991
1000e04c:	1001a14c 	.word	0x1001a14c
1000e050:	1001a13c 	.word	0x1001a13c
1000e054:	1001a11c 	.word	0x1001a11c
1000e058:	1001a118 	.word	0x1001a118
1000e05c:	1001a138 	.word	0x1001a138
1000e060:	1001a124 	.word	0x1001a124

1000e064 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e064:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e066:	4b03      	ldr	r3, [pc, #12]	; (1000e074 <acquire_sleep_lock+0x10>)
1000e068:	681b      	ldr	r3, [r3, #0]
1000e06a:	2080      	movs	r0, #128	; 0x80
1000e06c:	0200      	lsls	r0, r0, #8
1000e06e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e070:	2008      	movs	r0, #8
1000e072:	bd10      	pop	{r4, pc}
1000e074:	1001adec 	.word	0x1001adec

1000e078 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e078:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e07a:	4b03      	ldr	r3, [pc, #12]	; (1000e088 <release_message_lock+0x10>)
1000e07c:	681b      	ldr	r3, [r3, #0]
1000e07e:	2080      	movs	r0, #128	; 0x80
1000e080:	01c0      	lsls	r0, r0, #7
1000e082:	4798      	blx	r3
	return status;
}
1000e084:	2000      	movs	r0, #0
1000e086:	bd10      	pop	{r4, pc}
1000e088:	1001adf8 	.word	0x1001adf8

1000e08c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e08c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e08e:	4c05      	ldr	r4, [pc, #20]	; (1000e0a4 <release_sleep_lock+0x18>)
1000e090:	2080      	movs	r0, #128	; 0x80
1000e092:	01c0      	lsls	r0, r0, #7
1000e094:	6823      	ldr	r3, [r4, #0]
1000e096:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e098:	6823      	ldr	r3, [r4, #0]
1000e09a:	2080      	movs	r0, #128	; 0x80
1000e09c:	0200      	lsls	r0, r0, #8
1000e09e:	4798      	blx	r3
	return status;
}
1000e0a0:	2000      	movs	r0, #0
1000e0a2:	bd10      	pop	{r4, pc}
1000e0a4:	1001adf8 	.word	0x1001adf8

1000e0a8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e0a8:	2800      	cmp	r0, #0
1000e0aa:	d003      	beq.n	1000e0b4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e0ac:	4b02      	ldr	r3, [pc, #8]	; (1000e0b8 <register_resume_callback+0x10>)
1000e0ae:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e0b0:	2000      	movs	r0, #0
1000e0b2:	e000      	b.n	1000e0b6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e0b4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e0b6:	4770      	bx	lr
1000e0b8:	1001b0c0 	.word	0x1001b0c0

1000e0bc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e0bc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e0be:	4a18      	ldr	r2, [pc, #96]	; (1000e120 <gpio1_combined_isr_handler+0x64>)
1000e0c0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e0c2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e0c4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e0c6:	2180      	movs	r1, #128	; 0x80
1000e0c8:	0209      	lsls	r1, r1, #8
1000e0ca:	4301      	orrs	r1, r0
1000e0cc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e0ce:	0010      	movs	r0, r2
1000e0d0:	4d14      	ldr	r5, [pc, #80]	; (1000e124 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e0d2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e0d4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e0d6:	05db      	lsls	r3, r3, #23
1000e0d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e0da:	d011      	beq.n	1000e100 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e0dc:	b2db      	uxtb	r3, r3
1000e0de:	4259      	negs	r1, r3
1000e0e0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e0e2:	2b01      	cmp	r3, #1
1000e0e4:	d006      	beq.n	1000e0f4 <gpio1_combined_isr_handler+0x38>
1000e0e6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e0e8:	085b      	lsrs	r3, r3, #1
				index++;
1000e0ea:	3101      	adds	r1, #1
1000e0ec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e0ee:	2b01      	cmp	r3, #1
1000e0f0:	d1fa      	bne.n	1000e0e8 <gpio1_combined_isr_handler+0x2c>
1000e0f2:	e000      	b.n	1000e0f6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e0f4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e0f6:	0023      	movs	r3, r4
1000e0f8:	408b      	lsls	r3, r1
1000e0fa:	b29b      	uxth	r3, r3
1000e0fc:	8703      	strh	r3, [r0, #56]	; 0x38
1000e0fe:	e003      	b.n	1000e108 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e100:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e102:	432b      	orrs	r3, r5
1000e104:	b29b      	uxth	r3, r3
1000e106:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e108:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e10a:	05db      	lsls	r3, r3, #23
1000e10c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e10e:	d1e2      	bne.n	1000e0d6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e110:	2180      	movs	r1, #128	; 0x80
1000e112:	0049      	lsls	r1, r1, #1
1000e114:	3381      	adds	r3, #129	; 0x81
1000e116:	33ff      	adds	r3, #255	; 0xff
1000e118:	4a03      	ldr	r2, [pc, #12]	; (1000e128 <gpio1_combined_isr_handler+0x6c>)
1000e11a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e11c:	bd30      	pop	{r4, r5, pc}
1000e11e:	46c0      	nop			; (mov r8, r8)
1000e120:	40011000 	.word	0x40011000
1000e124:	ffff8000 	.word	0xffff8000
1000e128:	e000e100 	.word	0xe000e100

1000e12c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e12c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e12e:	4a17      	ldr	r2, [pc, #92]	; (1000e18c <gpio0_combined_isr_handler+0x60>)
1000e130:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e132:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e134:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e136:	2180      	movs	r1, #128	; 0x80
1000e138:	0209      	lsls	r1, r1, #8
1000e13a:	4301      	orrs	r1, r0
1000e13c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e13e:	0010      	movs	r0, r2
1000e140:	4d13      	ldr	r5, [pc, #76]	; (1000e190 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e142:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e144:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e146:	05db      	lsls	r3, r3, #23
1000e148:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e14a:	d011      	beq.n	1000e170 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e14c:	b2db      	uxtb	r3, r3
1000e14e:	4259      	negs	r1, r3
1000e150:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e152:	2b01      	cmp	r3, #1
1000e154:	d006      	beq.n	1000e164 <gpio0_combined_isr_handler+0x38>
1000e156:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e158:	085b      	lsrs	r3, r3, #1
				index++;
1000e15a:	3101      	adds	r1, #1
1000e15c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e15e:	2b01      	cmp	r3, #1
1000e160:	d1fa      	bne.n	1000e158 <gpio0_combined_isr_handler+0x2c>
1000e162:	e000      	b.n	1000e166 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e164:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e166:	0023      	movs	r3, r4
1000e168:	408b      	lsls	r3, r1
1000e16a:	b29b      	uxth	r3, r3
1000e16c:	8703      	strh	r3, [r0, #56]	; 0x38
1000e16e:	e003      	b.n	1000e178 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e170:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e172:	432b      	orrs	r3, r5
1000e174:	b29b      	uxth	r3, r3
1000e176:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e178:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e17a:	05db      	lsls	r3, r3, #23
1000e17c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e17e:	d1e2      	bne.n	1000e146 <gpio0_combined_isr_handler+0x1a>
1000e180:	2180      	movs	r1, #128	; 0x80
1000e182:	3381      	adds	r3, #129	; 0x81
1000e184:	33ff      	adds	r3, #255	; 0xff
1000e186:	4a03      	ldr	r2, [pc, #12]	; (1000e194 <gpio0_combined_isr_handler+0x68>)
1000e188:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e18a:	bd30      	pop	{r4, r5, pc}
1000e18c:	40010000 	.word	0x40010000
1000e190:	ffff8000 	.word	0xffff8000
1000e194:	e000e100 	.word	0xe000e100

1000e198 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e198:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e19a:	4b0c      	ldr	r3, [pc, #48]	; (1000e1cc <PORT1_COMB_Handler+0x34>)
1000e19c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e19e:	0b5b      	lsrs	r3, r3, #13
1000e1a0:	d010      	beq.n	1000e1c4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e1a2:	4b0b      	ldr	r3, [pc, #44]	; (1000e1d0 <PORT1_COMB_Handler+0x38>)
1000e1a4:	681b      	ldr	r3, [r3, #0]
1000e1a6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e1a8:	4a08      	ldr	r2, [pc, #32]	; (1000e1cc <PORT1_COMB_Handler+0x34>)
1000e1aa:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e1ac:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e1ae:	0b5b      	lsrs	r3, r3, #13
1000e1b0:	035b      	lsls	r3, r3, #13
1000e1b2:	430b      	orrs	r3, r1
1000e1b4:	8713      	strh	r3, [r2, #56]	; 0x38
1000e1b6:	2180      	movs	r1, #128	; 0x80
1000e1b8:	0049      	lsls	r1, r1, #1
1000e1ba:	23c0      	movs	r3, #192	; 0xc0
1000e1bc:	005b      	lsls	r3, r3, #1
1000e1be:	4a05      	ldr	r2, [pc, #20]	; (1000e1d4 <PORT1_COMB_Handler+0x3c>)
1000e1c0:	50d1      	str	r1, [r2, r3]
1000e1c2:	e001      	b.n	1000e1c8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e1c4:	4b04      	ldr	r3, [pc, #16]	; (1000e1d8 <PORT1_COMB_Handler+0x40>)
1000e1c6:	4798      	blx	r3
	}
}
1000e1c8:	bd10      	pop	{r4, pc}
1000e1ca:	46c0      	nop			; (mov r8, r8)
1000e1cc:	40011000 	.word	0x40011000
1000e1d0:	1001b0b8 	.word	0x1001b0b8
1000e1d4:	e000e100 	.word	0xe000e100
1000e1d8:	1000e0bd 	.word	0x1000e0bd

1000e1dc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e1dc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e1de:	2802      	cmp	r0, #2
1000e1e0:	d804      	bhi.n	1000e1ec <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e1e2:	0080      	lsls	r0, r0, #2
1000e1e4:	2200      	movs	r2, #0
1000e1e6:	4b02      	ldr	r3, [pc, #8]	; (1000e1f0 <wakeup_int_unregister_callback+0x14>)
1000e1e8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e1ea:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e1ec:	0018      	movs	r0, r3
1000e1ee:	4770      	bx	lr
1000e1f0:	1001b0d0 	.word	0x1001b0d0

1000e1f4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e1f4:	b510      	push	{r4, lr}
1000e1f6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e1f8:	7803      	ldrb	r3, [r0, #0]
1000e1fa:	2b01      	cmp	r3, #1
1000e1fc:	d108      	bne.n	1000e210 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e1fe:	4b11      	ldr	r3, [pc, #68]	; (1000e244 <wakeup_active_event_callback+0x50>)
1000e200:	681b      	ldr	r3, [r3, #0]
1000e202:	2b00      	cmp	r3, #0
1000e204:	d000      	beq.n	1000e208 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e206:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e208:	23ff      	movs	r3, #255	; 0xff
1000e20a:	6822      	ldr	r2, [r4, #0]
1000e20c:	439a      	bics	r2, r3
1000e20e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e210:	7863      	ldrb	r3, [r4, #1]
1000e212:	2b01      	cmp	r3, #1
1000e214:	d108      	bne.n	1000e228 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e216:	4b0b      	ldr	r3, [pc, #44]	; (1000e244 <wakeup_active_event_callback+0x50>)
1000e218:	685b      	ldr	r3, [r3, #4]
1000e21a:	2b00      	cmp	r3, #0
1000e21c:	d000      	beq.n	1000e220 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e21e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e220:	4b09      	ldr	r3, [pc, #36]	; (1000e248 <wakeup_active_event_callback+0x54>)
1000e222:	6822      	ldr	r2, [r4, #0]
1000e224:	4013      	ands	r3, r2
1000e226:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e228:	78a3      	ldrb	r3, [r4, #2]
1000e22a:	2b01      	cmp	r3, #1
1000e22c:	d108      	bne.n	1000e240 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e22e:	4b05      	ldr	r3, [pc, #20]	; (1000e244 <wakeup_active_event_callback+0x50>)
1000e230:	689b      	ldr	r3, [r3, #8]
1000e232:	2b00      	cmp	r3, #0
1000e234:	d000      	beq.n	1000e238 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e236:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e238:	4b04      	ldr	r3, [pc, #16]	; (1000e24c <wakeup_active_event_callback+0x58>)
1000e23a:	6822      	ldr	r2, [r4, #0]
1000e23c:	4013      	ands	r3, r2
1000e23e:	6023      	str	r3, [r4, #0]
	}
}
1000e240:	bd10      	pop	{r4, pc}
1000e242:	46c0      	nop			; (mov r8, r8)
1000e244:	1001b0d0 	.word	0x1001b0d0
1000e248:	ffff00ff 	.word	0xffff00ff
1000e24c:	ff00ffff 	.word	0xff00ffff

1000e250 <resume_cb>:
	sms_imu_init_variables();
	sms_pressure_init_variables();
}

static void resume_cb(void)
{
1000e250:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000e252:	4b09      	ldr	r3, [pc, #36]	; (1000e278 <resume_cb+0x28>)
1000e254:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000e256:	4b09      	ldr	r3, [pc, #36]	; (1000e27c <resume_cb+0x2c>)
1000e258:	4798      	blx	r3
	sms_dualtimer_init();
1000e25a:	4b09      	ldr	r3, [pc, #36]	; (1000e280 <resume_cb+0x30>)
1000e25c:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000e25e:	4b09      	ldr	r3, [pc, #36]	; (1000e284 <resume_cb+0x34>)
1000e260:	4798      	blx	r3
	sms_led_gpio_init();
1000e262:	4b09      	ldr	r3, [pc, #36]	; (1000e288 <resume_cb+0x38>)
1000e264:	4798      	blx	r3
	sms_spi_master_configure();
1000e266:	4b09      	ldr	r3, [pc, #36]	; (1000e28c <resume_cb+0x3c>)
1000e268:	4798      	blx	r3
	sms_i2c_master_configure();
1000e26a:	4b09      	ldr	r3, [pc, #36]	; (1000e290 <resume_cb+0x40>)
1000e26c:	4798      	blx	r3
	sms_imu_configure_gpio();
1000e26e:	4b09      	ldr	r3, [pc, #36]	; (1000e294 <resume_cb+0x44>)
1000e270:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000e272:	4b09      	ldr	r3, [pc, #36]	; (1000e298 <resume_cb+0x48>)
1000e274:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e276:	bd10      	pop	{r4, pc}
1000e278:	1000da9d 	.word	0x1000da9d
1000e27c:	1000d805 	.word	0x1000d805
1000e280:	1000a329 	.word	0x1000a329
1000e284:	10008b25 	.word	0x10008b25
1000e288:	10009cc9 	.word	0x10009cc9
1000e28c:	1000a1e1 	.word	0x1000a1e1
1000e290:	10009011 	.word	0x10009011
1000e294:	100091a5 	.word	0x100091a5
1000e298:	10008e69 	.word	0x10008e69

1000e29c <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e29c:	b510      	push	{r4, lr}
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e29e:	2201      	movs	r2, #1
1000e2a0:	4b08      	ldr	r3, [pc, #32]	; (1000e2c4 <sms_init_variables+0x28>)
1000e2a2:	701a      	strb	r2, [r3, #0]
	ulp_ready = false;
1000e2a4:	2200      	movs	r2, #0
1000e2a6:	4b08      	ldr	r3, [pc, #32]	; (1000e2c8 <sms_init_variables+0x2c>)
1000e2a8:	701a      	strb	r2, [r3, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000e2aa:	3a01      	subs	r2, #1
1000e2ac:	4b07      	ldr	r3, [pc, #28]	; (1000e2cc <sms_init_variables+0x30>)
1000e2ae:	605a      	str	r2, [r3, #4]
	
	sms_ble_init_variables();
1000e2b0:	4b07      	ldr	r3, [pc, #28]	; (1000e2d0 <sms_init_variables+0x34>)
1000e2b2:	4798      	blx	r3
	sms_button_init_variables();
1000e2b4:	4b07      	ldr	r3, [pc, #28]	; (1000e2d4 <sms_init_variables+0x38>)
1000e2b6:	4798      	blx	r3
	sms_imu_init_variables();
1000e2b8:	4b07      	ldr	r3, [pc, #28]	; (1000e2d8 <sms_init_variables+0x3c>)
1000e2ba:	4798      	blx	r3
	sms_pressure_init_variables();
1000e2bc:	4b07      	ldr	r3, [pc, #28]	; (1000e2dc <sms_init_variables+0x40>)
1000e2be:	4798      	blx	r3
}
1000e2c0:	bd10      	pop	{r4, pc}
1000e2c2:	46c0      	nop			; (mov r8, r8)
1000e2c4:	1001a230 	.word	0x1001a230
1000e2c8:	1001a231 	.word	0x1001a231
1000e2cc:	1001a234 	.word	0x1001a234
1000e2d0:	1000848d 	.word	0x1000848d
1000e2d4:	10008afd 	.word	0x10008afd
1000e2d8:	100092ad 	.word	0x100092ad
1000e2dc:	10009da5 	.word	0x10009da5

1000e2e0 <main>:
	sms_monitor_configure_gpio();
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

int main(void)
{
1000e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e2e2:	2210      	movs	r2, #16
1000e2e4:	4b7a      	ldr	r3, [pc, #488]	; (1000e4d0 <main+0x1f0>)
1000e2e6:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e2e8:	4b7a      	ldr	r3, [pc, #488]	; (1000e4d4 <main+0x1f4>)
1000e2ea:	4798      	blx	r3
	gpio_init(); // GPIO
1000e2ec:	4b7a      	ldr	r3, [pc, #488]	; (1000e4d8 <main+0x1f8>)
1000e2ee:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e2f0:	4b7a      	ldr	r3, [pc, #488]	; (1000e4dc <main+0x1fc>)
1000e2f2:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e2f4:	4b7a      	ldr	r3, [pc, #488]	; (1000e4e0 <main+0x200>)
1000e2f6:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e2f8:	4b7a      	ldr	r3, [pc, #488]	; (1000e4e4 <main+0x204>)
1000e2fa:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e2fc:	4b7a      	ldr	r3, [pc, #488]	; (1000e4e8 <main+0x208>)
1000e2fe:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000e300:	4b7a      	ldr	r3, [pc, #488]	; (1000e4ec <main+0x20c>)
1000e302:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000e304:	4b7a      	ldr	r3, [pc, #488]	; (1000e4f0 <main+0x210>)
1000e306:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000e308:	4b7a      	ldr	r3, [pc, #488]	; (1000e4f4 <main+0x214>)
1000e30a:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000e30c:	4b7a      	ldr	r3, [pc, #488]	; (1000e4f8 <main+0x218>)
1000e30e:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000e310:	4b7a      	ldr	r3, [pc, #488]	; (1000e4fc <main+0x21c>)
1000e312:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000e314:	4b7a      	ldr	r3, [pc, #488]	; (1000e500 <main+0x220>)
1000e316:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e318:	2000      	movs	r0, #0
1000e31a:	4b7a      	ldr	r3, [pc, #488]	; (1000e504 <main+0x224>)
1000e31c:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e31e:	4b7a      	ldr	r3, [pc, #488]	; (1000e508 <main+0x228>)
1000e320:	4798      	blx	r3
	sms_pressure_define_services();
1000e322:	4b7a      	ldr	r3, [pc, #488]	; (1000e50c <main+0x22c>)
1000e324:	4798      	blx	r3
	sms_imu_define_services();
1000e326:	4b7a      	ldr	r3, [pc, #488]	; (1000e510 <main+0x230>)
1000e328:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e32a:	487a      	ldr	r0, [pc, #488]	; (1000e514 <main+0x234>)
1000e32c:	4b7a      	ldr	r3, [pc, #488]	; (1000e518 <main+0x238>)
1000e32e:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e330:	4b7a      	ldr	r3, [pc, #488]	; (1000e51c <main+0x23c>)
1000e332:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000e334:	4b7a      	ldr	r3, [pc, #488]	; (1000e520 <main+0x240>)
1000e336:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e338:	4a7a      	ldr	r2, [pc, #488]	; (1000e524 <main+0x244>)
1000e33a:	2100      	movs	r1, #0
1000e33c:	2000      	movs	r0, #0
1000e33e:	4c7a      	ldr	r4, [pc, #488]	; (1000e528 <main+0x248>)
1000e340:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e342:	4a7a      	ldr	r2, [pc, #488]	; (1000e52c <main+0x24c>)
1000e344:	2102      	movs	r1, #2
1000e346:	2000      	movs	r0, #0
1000e348:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e34a:	2100      	movs	r1, #0
1000e34c:	2000      	movs	r0, #0
1000e34e:	4b78      	ldr	r3, [pc, #480]	; (1000e530 <main+0x250>)
1000e350:	4798      	blx	r3
	
	/* Goto sleep
	* ---------- */
	sms_ble_power_down();
1000e352:	4b78      	ldr	r3, [pc, #480]	; (1000e534 <main+0x254>)
1000e354:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e356:	4f5e      	ldr	r7, [pc, #376]	; (1000e4d0 <main+0x1f0>)
1000e358:	4e77      	ldr	r6, [pc, #476]	; (1000e538 <main+0x258>)
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e35a:	4d61      	ldr	r5, [pc, #388]	; (1000e4e0 <main+0x200>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e35c:	6878      	ldr	r0, [r7, #4]
1000e35e:	47b0      	blx	r6
1000e360:	0004      	movs	r4, r0
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e362:	47a8      	blx	r5
		if(ble_status == AT_BLE_SUCCESS)
1000e364:	2c00      	cmp	r4, #0
1000e366:	d000      	beq.n	1000e36a <main+0x8a>
1000e368:	e098      	b.n	1000e49c <main+0x1bc>
		{
			/* ******************************************
			 * SENSOR INTERRUPT REGION
			 * ****************************************** */
			if(button_instance.btn0.new_int) {
1000e36a:	4b74      	ldr	r3, [pc, #464]	; (1000e53c <main+0x25c>)
1000e36c:	78db      	ldrb	r3, [r3, #3]
1000e36e:	2b00      	cmp	r3, #0
1000e370:	d013      	beq.n	1000e39a <main+0xba>
				button_instance.btn0.new_int = false;
1000e372:	2200      	movs	r2, #0
1000e374:	4b71      	ldr	r3, [pc, #452]	; (1000e53c <main+0x25c>)
1000e376:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000e378:	4871      	ldr	r0, [pc, #452]	; (1000e540 <main+0x260>)
1000e37a:	4b72      	ldr	r3, [pc, #456]	; (1000e544 <main+0x264>)
1000e37c:	4798      	blx	r3
1000e37e:	4872      	ldr	r0, [pc, #456]	; (1000e548 <main+0x268>)
1000e380:	4b72      	ldr	r3, [pc, #456]	; (1000e54c <main+0x26c>)
1000e382:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e384:	2000      	movs	r0, #0
1000e386:	4b72      	ldr	r3, [pc, #456]	; (1000e550 <main+0x270>)
1000e388:	4798      	blx	r3
1000e38a:	2800      	cmp	r0, #0
1000e38c:	da05      	bge.n	1000e39a <main+0xba>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e38e:	486c      	ldr	r0, [pc, #432]	; (1000e540 <main+0x260>)
1000e390:	4b6c      	ldr	r3, [pc, #432]	; (1000e544 <main+0x264>)
1000e392:	4798      	blx	r3
1000e394:	486f      	ldr	r0, [pc, #444]	; (1000e554 <main+0x274>)
1000e396:	4b6d      	ldr	r3, [pc, #436]	; (1000e54c <main+0x26c>)
1000e398:	4798      	blx	r3
				}
			}
			if(button_instance.btn1.new_int) {
1000e39a:	4b68      	ldr	r3, [pc, #416]	; (1000e53c <main+0x25c>)
1000e39c:	7a5b      	ldrb	r3, [r3, #9]
1000e39e:	2b00      	cmp	r3, #0
1000e3a0:	d013      	beq.n	1000e3ca <main+0xea>
				button_instance.btn1.new_int = false;
1000e3a2:	2200      	movs	r2, #0
1000e3a4:	4b65      	ldr	r3, [pc, #404]	; (1000e53c <main+0x25c>)
1000e3a6:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000e3a8:	4865      	ldr	r0, [pc, #404]	; (1000e540 <main+0x260>)
1000e3aa:	4b66      	ldr	r3, [pc, #408]	; (1000e544 <main+0x264>)
1000e3ac:	4798      	blx	r3
1000e3ae:	486a      	ldr	r0, [pc, #424]	; (1000e558 <main+0x278>)
1000e3b0:	4b66      	ldr	r3, [pc, #408]	; (1000e54c <main+0x26c>)
1000e3b2:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e3b4:	2001      	movs	r0, #1
1000e3b6:	4b66      	ldr	r3, [pc, #408]	; (1000e550 <main+0x270>)
1000e3b8:	4798      	blx	r3
1000e3ba:	2800      	cmp	r0, #0
1000e3bc:	da05      	bge.n	1000e3ca <main+0xea>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e3be:	4860      	ldr	r0, [pc, #384]	; (1000e540 <main+0x260>)
1000e3c0:	4b60      	ldr	r3, [pc, #384]	; (1000e544 <main+0x264>)
1000e3c2:	4798      	blx	r3
1000e3c4:	4863      	ldr	r0, [pc, #396]	; (1000e554 <main+0x274>)
1000e3c6:	4b61      	ldr	r3, [pc, #388]	; (1000e54c <main+0x26c>)
1000e3c8:	4798      	blx	r3
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000e3ca:	2385      	movs	r3, #133	; 0x85
1000e3cc:	4a63      	ldr	r2, [pc, #396]	; (1000e55c <main+0x27c>)
1000e3ce:	5cd3      	ldrb	r3, [r2, r3]
1000e3d0:	2b00      	cmp	r3, #0
1000e3d2:	d002      	beq.n	1000e3da <main+0xfa>
				//const uint32_t cnt_max = 23 * SMS_TIMER_AON_LOAD_1MS / SMS_TIMER_AON_LOAD_100US;
				//uint32_t now = aon_sleep_timer_get_current_value()/SMS_TIMER_AON_LOAD_100US;
				//uint32_t delta = ((now < past) ? (past - now) : (cnt_max - now + past));
				//DBG_LOG("past: %lu, now: %lu, delta: %lu", past, now, delta);
				//past = now;
				imu_device.interrupt.new_gyro = false;
1000e3d4:	2100      	movs	r1, #0
1000e3d6:	2385      	movs	r3, #133	; 0x85
1000e3d8:	54d1      	strb	r1, [r2, r3]
				//imu_device.interrupt.rts = true;
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.interrupt.new_value) {
1000e3da:	2329      	movs	r3, #41	; 0x29
1000e3dc:	4a60      	ldr	r2, [pc, #384]	; (1000e560 <main+0x280>)
1000e3de:	5cd3      	ldrb	r3, [r2, r3]
1000e3e0:	2b00      	cmp	r3, #0
1000e3e2:	d009      	beq.n	1000e3f8 <main+0x118>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e3e4:	2101      	movs	r1, #1
1000e3e6:	200f      	movs	r0, #15
1000e3e8:	4c5e      	ldr	r4, [pc, #376]	; (1000e564 <main+0x284>)
1000e3ea:	47a0      	blx	r4
				//sms_pressure_poll_data();
				pressure_device.interrupt.new_value = false;
1000e3ec:	2100      	movs	r1, #0
1000e3ee:	2329      	movs	r3, #41	; 0x29
1000e3f0:	4a5b      	ldr	r2, [pc, #364]	; (1000e560 <main+0x280>)
1000e3f2:	54d1      	strb	r1, [r2, r3]
				//pressure_device.rts = true;
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e3f4:	200f      	movs	r0, #15
1000e3f6:	47a0      	blx	r4
				////sms_dualtimer_stop(DUALTIMER_TIMER1);
				//sms_dualtimer1_fn();
				//timer1_instance.new_int = false;
				//gpio_pin_set_output_level(DBG_PIN_1, false);
			//}
			if(timer2_instance.new_int) {
1000e3f8:	4b5b      	ldr	r3, [pc, #364]	; (1000e568 <main+0x288>)
1000e3fa:	78db      	ldrb	r3, [r3, #3]
1000e3fc:	2b00      	cmp	r3, #0
1000e3fe:	d00a      	beq.n	1000e416 <main+0x136>
				DBG_LOG("Timer2 int... ");
1000e400:	484f      	ldr	r0, [pc, #316]	; (1000e540 <main+0x260>)
1000e402:	4b50      	ldr	r3, [pc, #320]	; (1000e544 <main+0x264>)
1000e404:	4798      	blx	r3
1000e406:	4859      	ldr	r0, [pc, #356]	; (1000e56c <main+0x28c>)
1000e408:	4b50      	ldr	r3, [pc, #320]	; (1000e54c <main+0x26c>)
1000e40a:	4798      	blx	r3
				//sms_dualtimer_stop(DUALTIMER_TIMER2);
				sms_dualtimer2_fn();
1000e40c:	4b58      	ldr	r3, [pc, #352]	; (1000e570 <main+0x290>)
1000e40e:	4798      	blx	r3
				timer2_instance.new_int = false;
1000e410:	2200      	movs	r2, #0
1000e412:	4b55      	ldr	r3, [pc, #340]	; (1000e568 <main+0x288>)
1000e414:	70da      	strb	r2, [r3, #3]
			}
			
			/* ******************************************
			 * SENDING REGION
			 * ****************************************** */
			if(imu_device.interrupt.rts) {
1000e416:	2386      	movs	r3, #134	; 0x86
1000e418:	4a50      	ldr	r2, [pc, #320]	; (1000e55c <main+0x27c>)
1000e41a:	5cd3      	ldrb	r3, [r2, r3]
1000e41c:	2b00      	cmp	r3, #0
1000e41e:	d015      	beq.n	1000e44c <main+0x16c>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e420:	2101      	movs	r1, #1
1000e422:	200f      	movs	r0, #15
1000e424:	4b4f      	ldr	r3, [pc, #316]	; (1000e564 <main+0x284>)
1000e426:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e428:	4b29      	ldr	r3, [pc, #164]	; (1000e4d0 <main+0x1f0>)
1000e42a:	7a1b      	ldrb	r3, [r3, #8]
1000e42c:	2b00      	cmp	r3, #0
1000e42e:	d103      	bne.n	1000e438 <main+0x158>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e430:	2002      	movs	r0, #2
1000e432:	4b50      	ldr	r3, [pc, #320]	; (1000e574 <main+0x294>)
1000e434:	4798      	blx	r3
1000e436:	e002      	b.n	1000e43e <main+0x15e>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e438:	484f      	ldr	r0, [pc, #316]	; (1000e578 <main+0x298>)
1000e43a:	4b44      	ldr	r3, [pc, #272]	; (1000e54c <main+0x26c>)
1000e43c:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000e43e:	2100      	movs	r1, #0
1000e440:	2386      	movs	r3, #134	; 0x86
1000e442:	4a46      	ldr	r2, [pc, #280]	; (1000e55c <main+0x27c>)
1000e444:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e446:	200f      	movs	r0, #15
1000e448:	4b46      	ldr	r3, [pc, #280]	; (1000e564 <main+0x284>)
1000e44a:	4798      	blx	r3
			}
			if(pressure_device.interrupt.rts) {
1000e44c:	232a      	movs	r3, #42	; 0x2a
1000e44e:	4a44      	ldr	r2, [pc, #272]	; (1000e560 <main+0x280>)
1000e450:	5cd3      	ldrb	r3, [r2, r3]
1000e452:	2b00      	cmp	r3, #0
1000e454:	d082      	beq.n	1000e35c <main+0x7c>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e456:	483a      	ldr	r0, [pc, #232]	; (1000e540 <main+0x260>)
1000e458:	4b3a      	ldr	r3, [pc, #232]	; (1000e544 <main+0x264>)
1000e45a:	4798      	blx	r3
1000e45c:	2385      	movs	r3, #133	; 0x85
1000e45e:	4a3f      	ldr	r2, [pc, #252]	; (1000e55c <main+0x27c>)
1000e460:	5cd1      	ldrb	r1, [r2, r3]
1000e462:	b2c9      	uxtb	r1, r1
1000e464:	4c1a      	ldr	r4, [pc, #104]	; (1000e4d0 <main+0x1f0>)
1000e466:	7a22      	ldrb	r2, [r4, #8]
1000e468:	b2d2      	uxtb	r2, r2
1000e46a:	4844      	ldr	r0, [pc, #272]	; (1000e57c <main+0x29c>)
1000e46c:	4b37      	ldr	r3, [pc, #220]	; (1000e54c <main+0x26c>)
1000e46e:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e470:	2101      	movs	r1, #1
1000e472:	200f      	movs	r0, #15
1000e474:	4b3b      	ldr	r3, [pc, #236]	; (1000e564 <main+0x284>)
1000e476:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e478:	7a23      	ldrb	r3, [r4, #8]
1000e47a:	2b00      	cmp	r3, #0
1000e47c:	d103      	bne.n	1000e486 <main+0x1a6>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e47e:	2001      	movs	r0, #1
1000e480:	4b3c      	ldr	r3, [pc, #240]	; (1000e574 <main+0x294>)
1000e482:	4798      	blx	r3
1000e484:	e002      	b.n	1000e48c <main+0x1ac>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e486:	483c      	ldr	r0, [pc, #240]	; (1000e578 <main+0x298>)
1000e488:	4b30      	ldr	r3, [pc, #192]	; (1000e54c <main+0x26c>)
1000e48a:	4798      	blx	r3
				}
				pressure_device.interrupt.rts = false;
1000e48c:	2100      	movs	r1, #0
1000e48e:	232a      	movs	r3, #42	; 0x2a
1000e490:	4a33      	ldr	r2, [pc, #204]	; (1000e560 <main+0x280>)
1000e492:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e494:	200f      	movs	r0, #15
1000e496:	4b33      	ldr	r3, [pc, #204]	; (1000e564 <main+0x284>)
1000e498:	4798      	blx	r3
1000e49a:	e75f      	b.n	1000e35c <main+0x7c>
			}
			//DBG_LOG("BLE event task end");
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT)
1000e49c:	2c45      	cmp	r4, #69	; 0x45
1000e49e:	d106      	bne.n	1000e4ae <main+0x1ce>
		{
			DBG_LOG("GAP timeout");
1000e4a0:	4827      	ldr	r0, [pc, #156]	; (1000e540 <main+0x260>)
1000e4a2:	4b28      	ldr	r3, [pc, #160]	; (1000e544 <main+0x264>)
1000e4a4:	4798      	blx	r3
1000e4a6:	4836      	ldr	r0, [pc, #216]	; (1000e580 <main+0x2a0>)
1000e4a8:	4b28      	ldr	r3, [pc, #160]	; (1000e54c <main+0x26c>)
1000e4aa:	4798      	blx	r3
1000e4ac:	e756      	b.n	1000e35c <main+0x7c>
		}
		else if(ble_status == AT_BLE_TIMEOUT)
1000e4ae:	2cd0      	cmp	r4, #208	; 0xd0
1000e4b0:	d106      	bne.n	1000e4c0 <main+0x1e0>
		{
			DBG_LOG("Event get timeout");
1000e4b2:	4823      	ldr	r0, [pc, #140]	; (1000e540 <main+0x260>)
1000e4b4:	4b23      	ldr	r3, [pc, #140]	; (1000e544 <main+0x264>)
1000e4b6:	4798      	blx	r3
1000e4b8:	4832      	ldr	r0, [pc, #200]	; (1000e584 <main+0x2a4>)
1000e4ba:	4b24      	ldr	r3, [pc, #144]	; (1000e54c <main+0x26c>)
1000e4bc:	4798      	blx	r3
1000e4be:	e74d      	b.n	1000e35c <main+0x7c>
		}
		else
		{
			DBG_LOG("BLE error occurred");
1000e4c0:	481f      	ldr	r0, [pc, #124]	; (1000e540 <main+0x260>)
1000e4c2:	4b20      	ldr	r3, [pc, #128]	; (1000e544 <main+0x264>)
1000e4c4:	4798      	blx	r3
1000e4c6:	4830      	ldr	r0, [pc, #192]	; (1000e588 <main+0x2a8>)
1000e4c8:	4b20      	ldr	r3, [pc, #128]	; (1000e54c <main+0x26c>)
1000e4ca:	4798      	blx	r3
1000e4cc:	e746      	b.n	1000e35c <main+0x7c>
1000e4ce:	46c0      	nop			; (mov r8, r8)
1000e4d0:	1001a234 	.word	0x1001a234
1000e4d4:	1000db11 	.word	0x1000db11
1000e4d8:	1000b0e5 	.word	0x1000b0e5
1000e4dc:	1000d805 	.word	0x1000d805
1000e4e0:	1000e065 	.word	0x1000e065
1000e4e4:	1000e29d 	.word	0x1000e29d
1000e4e8:	1000a329 	.word	0x1000a329
1000e4ec:	10008b25 	.word	0x10008b25
1000e4f0:	10009cc9 	.word	0x10009cc9
1000e4f4:	10009011 	.word	0x10009011
1000e4f8:	1000a1e1 	.word	0x1000a1e1
1000e4fc:	100091a5 	.word	0x100091a5
1000e500:	10008e69 	.word	0x10008e69
1000e504:	1000ce85 	.word	0x1000ce85
1000e508:	10008e01 	.word	0x10008e01
1000e50c:	10009fb5 	.word	0x10009fb5
1000e510:	10009241 	.word	0x10009241
1000e514:	1000e251 	.word	0x1000e251
1000e518:	1000e0a9 	.word	0x1000e0a9
1000e51c:	10008bd5 	.word	0x10008bd5
1000e520:	100091f1 	.word	0x100091f1
1000e524:	10016f10 	.word	0x10016f10
1000e528:	1000cdb5 	.word	0x1000cdb5
1000e52c:	10016f5c 	.word	0x10016f5c
1000e530:	10008db9 	.word	0x10008db9
1000e534:	100084a5 	.word	0x100084a5
1000e538:	1000d67d 	.word	0x1000d67d
1000e53c:	1001a244 	.word	0x1001a244
1000e540:	10016b98 	.word	0x10016b98
1000e544:	10015b71 	.word	0x10015b71
1000e548:	10018414 	.word	0x10018414
1000e54c:	10015a51 	.word	0x10015a51
1000e550:	10008c29 	.word	0x10008c29
1000e554:	10018424 	.word	0x10018424
1000e558:	10018440 	.word	0x10018440
1000e55c:	1001a37c 	.word	0x1001a37c
1000e560:	1001a2c8 	.word	0x1001a2c8
1000e564:	1000ada5 	.word	0x1000ada5
1000e568:	1001a360 	.word	0x1001a360
1000e56c:	10018450 	.word	0x10018450
1000e570:	1000a461 	.word	0x1000a461
1000e574:	10008821 	.word	0x10008821
1000e578:	10018460 	.word	0x10018460
1000e57c:	1001846c 	.word	0x1001846c
1000e580:	10018488 	.word	0x10018488
1000e584:	10018494 	.word	0x10018494
1000e588:	100184a8 	.word	0x100184a8

1000e58c <internal_event_post>:
1000e58c:	b570      	push	{r4, r5, r6, lr}
1000e58e:	4d12      	ldr	r5, [pc, #72]	; (1000e5d8 <internal_event_post+0x4c>)
1000e590:	682c      	ldr	r4, [r5, #0]
1000e592:	2c00      	cmp	r4, #0
1000e594:	d014      	beq.n	1000e5c0 <internal_event_post+0x34>
1000e596:	6826      	ldr	r6, [r4, #0]
1000e598:	60e2      	str	r2, [r4, #12]
1000e59a:	602e      	str	r6, [r5, #0]
1000e59c:	2500      	movs	r5, #0
1000e59e:	4a0f      	ldr	r2, [pc, #60]	; (1000e5dc <internal_event_post+0x50>)
1000e5a0:	8123      	strh	r3, [r4, #8]
1000e5a2:	6813      	ldr	r3, [r2, #0]
1000e5a4:	6025      	str	r5, [r4, #0]
1000e5a6:	80a0      	strh	r0, [r4, #4]
1000e5a8:	80e1      	strh	r1, [r4, #6]
1000e5aa:	42ab      	cmp	r3, r5
1000e5ac:	d101      	bne.n	1000e5b2 <internal_event_post+0x26>
1000e5ae:	6014      	str	r4, [r2, #0]
1000e5b0:	e011      	b.n	1000e5d6 <internal_event_post+0x4a>
1000e5b2:	681a      	ldr	r2, [r3, #0]
1000e5b4:	2a00      	cmp	r2, #0
1000e5b6:	d001      	beq.n	1000e5bc <internal_event_post+0x30>
1000e5b8:	1c13      	adds	r3, r2, #0
1000e5ba:	e7fa      	b.n	1000e5b2 <internal_event_post+0x26>
1000e5bc:	601c      	str	r4, [r3, #0]
1000e5be:	e00a      	b.n	1000e5d6 <internal_event_post+0x4a>
1000e5c0:	b2c4      	uxtb	r4, r0
1000e5c2:	2c00      	cmp	r4, #0
1000e5c4:	d107      	bne.n	1000e5d6 <internal_event_post+0x4a>
1000e5c6:	4c06      	ldr	r4, [pc, #24]	; (1000e5e0 <internal_event_post+0x54>)
1000e5c8:	60e2      	str	r2, [r4, #12]
1000e5ca:	2201      	movs	r2, #1
1000e5cc:	8123      	strh	r3, [r4, #8]
1000e5ce:	4b05      	ldr	r3, [pc, #20]	; (1000e5e4 <internal_event_post+0x58>)
1000e5d0:	80a0      	strh	r0, [r4, #4]
1000e5d2:	80e1      	strh	r1, [r4, #6]
1000e5d4:	701a      	strb	r2, [r3, #0]
1000e5d6:	bd70      	pop	{r4, r5, r6, pc}
1000e5d8:	1001a178 	.word	0x1001a178
1000e5dc:	1001a174 	.word	0x1001a174
1000e5e0:	1001a160 	.word	0x1001a160
1000e5e4:	1001a170 	.word	0x1001a170

1000e5e8 <internal_event_init>:
1000e5e8:	b510      	push	{r4, lr}
1000e5ea:	4b08      	ldr	r3, [pc, #32]	; (1000e60c <internal_event_init+0x24>)
1000e5ec:	0900      	lsrs	r0, r0, #4
1000e5ee:	0100      	lsls	r0, r0, #4
1000e5f0:	681a      	ldr	r2, [r3, #0]
1000e5f2:	1808      	adds	r0, r1, r0
1000e5f4:	4281      	cmp	r1, r0
1000e5f6:	d003      	beq.n	1000e600 <internal_event_init+0x18>
1000e5f8:	600a      	str	r2, [r1, #0]
1000e5fa:	1c0a      	adds	r2, r1, #0
1000e5fc:	3110      	adds	r1, #16
1000e5fe:	e7f9      	b.n	1000e5f4 <internal_event_init+0xc>
1000e600:	601a      	str	r2, [r3, #0]
1000e602:	2200      	movs	r2, #0
1000e604:	4b02      	ldr	r3, [pc, #8]	; (1000e610 <internal_event_init+0x28>)
1000e606:	601a      	str	r2, [r3, #0]
1000e608:	bd10      	pop	{r4, pc}
1000e60a:	46c0      	nop			; (mov r8, r8)
1000e60c:	1001a178 	.word	0x1001a178
1000e610:	1001a174 	.word	0x1001a174

1000e614 <special_events_handler>:
1000e614:	b538      	push	{r3, r4, r5, lr}
1000e616:	4c1b      	ldr	r4, [pc, #108]	; (1000e684 <special_events_handler+0x70>)
1000e618:	1c03      	adds	r3, r0, #0
1000e61a:	8825      	ldrh	r5, [r4, #0]
1000e61c:	1c08      	adds	r0, r1, #0
1000e61e:	1c21      	adds	r1, r4, #0
1000e620:	429d      	cmp	r5, r3
1000e622:	d107      	bne.n	1000e634 <special_events_handler+0x20>
1000e624:	88a5      	ldrh	r5, [r4, #4]
1000e626:	4285      	cmp	r5, r0
1000e628:	d104      	bne.n	1000e634 <special_events_handler+0x20>
1000e62a:	2301      	movs	r3, #1
1000e62c:	425b      	negs	r3, r3
1000e62e:	8023      	strh	r3, [r4, #0]
1000e630:	60a2      	str	r2, [r4, #8]
1000e632:	e009      	b.n	1000e648 <special_events_handler+0x34>
1000e634:	884c      	ldrh	r4, [r1, #2]
1000e636:	429c      	cmp	r4, r3
1000e638:	d10a      	bne.n	1000e650 <special_events_handler+0x3c>
1000e63a:	888c      	ldrh	r4, [r1, #4]
1000e63c:	4284      	cmp	r4, r0
1000e63e:	d107      	bne.n	1000e650 <special_events_handler+0x3c>
1000e640:	2301      	movs	r3, #1
1000e642:	425b      	negs	r3, r3
1000e644:	804b      	strh	r3, [r1, #2]
1000e646:	608a      	str	r2, [r1, #8]
1000e648:	4b0f      	ldr	r3, [pc, #60]	; (1000e688 <special_events_handler+0x74>)
1000e64a:	4798      	blx	r3
1000e64c:	2001      	movs	r0, #1
1000e64e:	e017      	b.n	1000e680 <special_events_handler+0x6c>
1000e650:	490e      	ldr	r1, [pc, #56]	; (1000e68c <special_events_handler+0x78>)
1000e652:	428b      	cmp	r3, r1
1000e654:	d00e      	beq.n	1000e674 <special_events_handler+0x60>
1000e656:	490e      	ldr	r1, [pc, #56]	; (1000e690 <special_events_handler+0x7c>)
1000e658:	428b      	cmp	r3, r1
1000e65a:	d007      	beq.n	1000e66c <special_events_handler+0x58>
1000e65c:	490d      	ldr	r1, [pc, #52]	; (1000e694 <special_events_handler+0x80>)
1000e65e:	2000      	movs	r0, #0
1000e660:	428b      	cmp	r3, r1
1000e662:	d10d      	bne.n	1000e680 <special_events_handler+0x6c>
1000e664:	1c10      	adds	r0, r2, #0
1000e666:	4b0c      	ldr	r3, [pc, #48]	; (1000e698 <special_events_handler+0x84>)
1000e668:	4798      	blx	r3
1000e66a:	e7ef      	b.n	1000e64c <special_events_handler+0x38>
1000e66c:	1c11      	adds	r1, r2, #0
1000e66e:	4b0b      	ldr	r3, [pc, #44]	; (1000e69c <special_events_handler+0x88>)
1000e670:	2200      	movs	r2, #0
1000e672:	e002      	b.n	1000e67a <special_events_handler+0x66>
1000e674:	1c11      	adds	r1, r2, #0
1000e676:	2200      	movs	r2, #0
1000e678:	4b09      	ldr	r3, [pc, #36]	; (1000e6a0 <special_events_handler+0x8c>)
1000e67a:	4798      	blx	r3
1000e67c:	4243      	negs	r3, r0
1000e67e:	4158      	adcs	r0, r3
1000e680:	bd38      	pop	{r3, r4, r5, pc}
1000e682:	46c0      	nop			; (mov r8, r8)
1000e684:	1001b0dc 	.word	0x1001b0dc
1000e688:	10010071 	.word	0x10010071
1000e68c:	00000e13 	.word	0x00000e13
1000e690:	00000e15 	.word	0x00000e15
1000e694:	00000e01 	.word	0x00000e01
1000e698:	100103e1 	.word	0x100103e1
1000e69c:	100105a1 	.word	0x100105a1
1000e6a0:	10010679 	.word	0x10010679

1000e6a4 <at_ble_event_get>:
1000e6a4:	2300      	movs	r3, #0
1000e6a6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6a8:	b087      	sub	sp, #28
1000e6aa:	9204      	str	r2, [sp, #16]
1000e6ac:	7003      	strb	r3, [r0, #0]
1000e6ae:	9b04      	ldr	r3, [sp, #16]
1000e6b0:	9003      	str	r0, [sp, #12]
1000e6b2:	3b01      	subs	r3, #1
1000e6b4:	1c0d      	adds	r5, r1, #0
1000e6b6:	9305      	str	r3, [sp, #20]
1000e6b8:	3303      	adds	r3, #3
1000e6ba:	d802      	bhi.n	1000e6c2 <at_ble_event_get+0x1e>
1000e6bc:	9804      	ldr	r0, [sp, #16]
1000e6be:	4bae      	ldr	r3, [pc, #696]	; (1000e978 <at_ble_event_get+0x2d4>)
1000e6c0:	4798      	blx	r3
1000e6c2:	9b05      	ldr	r3, [sp, #20]
1000e6c4:	4cad      	ldr	r4, [pc, #692]	; (1000e97c <at_ble_event_get+0x2d8>)
1000e6c6:	3303      	adds	r3, #3
1000e6c8:	d902      	bls.n	1000e6d0 <at_ble_event_get+0x2c>
1000e6ca:	2300      	movs	r3, #0
1000e6cc:	9302      	str	r3, [sp, #8]
1000e6ce:	e015      	b.n	1000e6fc <at_ble_event_get+0x58>
1000e6d0:	2300      	movs	r3, #0
1000e6d2:	9302      	str	r3, [sp, #8]
1000e6d4:	6823      	ldr	r3, [r4, #0]
1000e6d6:	2b00      	cmp	r3, #0
1000e6d8:	d113      	bne.n	1000e702 <at_ble_event_get+0x5e>
1000e6da:	9b02      	ldr	r3, [sp, #8]
1000e6dc:	2bd0      	cmp	r3, #208	; 0xd0
1000e6de:	d100      	bne.n	1000e6e2 <at_ble_event_get+0x3e>
1000e6e0:	e2da      	b.n	1000ec98 <at_ble_event_get+0x5f4>
1000e6e2:	9804      	ldr	r0, [sp, #16]
1000e6e4:	4ba6      	ldr	r3, [pc, #664]	; (1000e980 <at_ble_event_get+0x2dc>)
1000e6e6:	4798      	blx	r3
1000e6e8:	9002      	str	r0, [sp, #8]
1000e6ea:	2802      	cmp	r0, #2
1000e6ec:	d1f2      	bne.n	1000e6d4 <at_ble_event_get+0x30>
1000e6ee:	e03f      	b.n	1000e770 <at_ble_event_get+0xcc>
1000e6f0:	9804      	ldr	r0, [sp, #16]
1000e6f2:	4ba3      	ldr	r3, [pc, #652]	; (1000e980 <at_ble_event_get+0x2dc>)
1000e6f4:	4798      	blx	r3
1000e6f6:	9002      	str	r0, [sp, #8]
1000e6f8:	2802      	cmp	r0, #2
1000e6fa:	d039      	beq.n	1000e770 <at_ble_event_get+0xcc>
1000e6fc:	6823      	ldr	r3, [r4, #0]
1000e6fe:	2b00      	cmp	r3, #0
1000e700:	d0f6      	beq.n	1000e6f0 <at_ble_event_get+0x4c>
1000e702:	9b02      	ldr	r3, [sp, #8]
1000e704:	2bd0      	cmp	r3, #208	; 0xd0
1000e706:	d100      	bne.n	1000e70a <at_ble_event_get+0x66>
1000e708:	e2c6      	b.n	1000ec98 <at_ble_event_get+0x5f4>
1000e70a:	9b02      	ldr	r3, [sp, #8]
1000e70c:	3b03      	subs	r3, #3
1000e70e:	1e5a      	subs	r2, r3, #1
1000e710:	4193      	sbcs	r3, r2
1000e712:	9a02      	ldr	r2, [sp, #8]
1000e714:	425b      	negs	r3, r3
1000e716:	401a      	ands	r2, r3
1000e718:	6823      	ldr	r3, [r4, #0]
1000e71a:	9202      	str	r2, [sp, #8]
1000e71c:	2b00      	cmp	r3, #0
1000e71e:	d100      	bne.n	1000e722 <at_ble_event_get+0x7e>
1000e720:	e2c2      	b.n	1000eca8 <at_ble_event_get+0x604>
1000e722:	681a      	ldr	r2, [r3, #0]
1000e724:	68de      	ldr	r6, [r3, #12]
1000e726:	6022      	str	r2, [r4, #0]
1000e728:	88da      	ldrh	r2, [r3, #6]
1000e72a:	9201      	str	r2, [sp, #4]
1000e72c:	4a95      	ldr	r2, [pc, #596]	; (1000e984 <at_ble_event_get+0x2e0>)
1000e72e:	889c      	ldrh	r4, [r3, #4]
1000e730:	6811      	ldr	r1, [r2, #0]
1000e732:	6013      	str	r3, [r2, #0]
1000e734:	6019      	str	r1, [r3, #0]
1000e736:	4b94      	ldr	r3, [pc, #592]	; (1000e988 <at_ble_event_get+0x2e4>)
1000e738:	781b      	ldrb	r3, [r3, #0]
1000e73a:	2b01      	cmp	r3, #1
1000e73c:	d10f      	bne.n	1000e75e <at_ble_event_get+0xba>
1000e73e:	4b93      	ldr	r3, [pc, #588]	; (1000e98c <at_ble_event_get+0x2e8>)
1000e740:	4a92      	ldr	r2, [pc, #584]	; (1000e98c <at_ble_event_get+0x2e8>)
1000e742:	8898      	ldrh	r0, [r3, #4]
1000e744:	88d9      	ldrh	r1, [r3, #6]
1000e746:	68d2      	ldr	r2, [r2, #12]
1000e748:	891b      	ldrh	r3, [r3, #8]
1000e74a:	4f91      	ldr	r7, [pc, #580]	; (1000e990 <at_ble_event_get+0x2ec>)
1000e74c:	47b8      	blx	r7
1000e74e:	2210      	movs	r2, #16
1000e750:	4b90      	ldr	r3, [pc, #576]	; (1000e994 <at_ble_event_get+0x2f0>)
1000e752:	488e      	ldr	r0, [pc, #568]	; (1000e98c <at_ble_event_get+0x2e8>)
1000e754:	2100      	movs	r1, #0
1000e756:	4798      	blx	r3
1000e758:	2300      	movs	r3, #0
1000e75a:	4a8b      	ldr	r2, [pc, #556]	; (1000e988 <at_ble_event_get+0x2e4>)
1000e75c:	7013      	strb	r3, [r2, #0]
1000e75e:	9b02      	ldr	r3, [sp, #8]
1000e760:	2b00      	cmp	r3, #0
1000e762:	d114      	bne.n	1000e78e <at_ble_event_get+0xea>
1000e764:	4b8c      	ldr	r3, [pc, #560]	; (1000e998 <at_ble_event_get+0x2f4>)
1000e766:	429c      	cmp	r4, r3
1000e768:	d009      	beq.n	1000e77e <at_ble_event_get+0xda>
1000e76a:	4b8c      	ldr	r3, [pc, #560]	; (1000e99c <at_ble_event_get+0x2f8>)
1000e76c:	429c      	cmp	r4, r3
1000e76e:	d127      	bne.n	1000e7c0 <at_ble_event_get+0x11c>
1000e770:	233a      	movs	r3, #58	; 0x3a
1000e772:	9a03      	ldr	r2, [sp, #12]
1000e774:	7013      	strb	r3, [r2, #0]
1000e776:	2300      	movs	r3, #0
1000e778:	9302      	str	r3, [sp, #8]
1000e77a:	1c1d      	adds	r5, r3, #0
1000e77c:	e007      	b.n	1000e78e <at_ble_event_get+0xea>
1000e77e:	9b01      	ldr	r3, [sp, #4]
1000e780:	42a3      	cmp	r3, r4
1000e782:	d000      	beq.n	1000e786 <at_ble_event_get+0xe2>
1000e784:	e28a      	b.n	1000ec9c <at_ble_event_get+0x5f8>
1000e786:	2338      	movs	r3, #56	; 0x38
1000e788:	9a03      	ldr	r2, [sp, #12]
1000e78a:	7013      	strb	r3, [r2, #0]
1000e78c:	602e      	str	r6, [r5, #0]
1000e78e:	9b03      	ldr	r3, [sp, #12]
1000e790:	781b      	ldrb	r3, [r3, #0]
1000e792:	2b3b      	cmp	r3, #59	; 0x3b
1000e794:	d101      	bne.n	1000e79a <at_ble_event_get+0xf6>
1000e796:	4b82      	ldr	r3, [pc, #520]	; (1000e9a0 <at_ble_event_get+0x2fc>)
1000e798:	4798      	blx	r3
1000e79a:	9b03      	ldr	r3, [sp, #12]
1000e79c:	781b      	ldrb	r3, [r3, #0]
1000e79e:	2b3b      	cmp	r3, #59	; 0x3b
1000e7a0:	d003      	beq.n	1000e7aa <at_ble_event_get+0x106>
1000e7a2:	9b05      	ldr	r3, [sp, #20]
1000e7a4:	3303      	adds	r3, #3
1000e7a6:	d904      	bls.n	1000e7b2 <at_ble_event_get+0x10e>
1000e7a8:	e283      	b.n	1000ecb2 <at_ble_event_get+0x60e>
1000e7aa:	9b02      	ldr	r3, [sp, #8]
1000e7ac:	2b00      	cmp	r3, #0
1000e7ae:	d088      	beq.n	1000e6c2 <at_ble_event_get+0x1e>
1000e7b0:	e7f7      	b.n	1000e7a2 <at_ble_event_get+0xfe>
1000e7b2:	9b02      	ldr	r3, [sp, #8]
1000e7b4:	2bd0      	cmp	r3, #208	; 0xd0
1000e7b6:	d100      	bne.n	1000e7ba <at_ble_event_get+0x116>
1000e7b8:	e27b      	b.n	1000ecb2 <at_ble_event_get+0x60e>
1000e7ba:	4b7a      	ldr	r3, [pc, #488]	; (1000e9a4 <at_ble_event_get+0x300>)
1000e7bc:	4798      	blx	r3
1000e7be:	e278      	b.n	1000ecb2 <at_ble_event_get+0x60e>
1000e7c0:	9b01      	ldr	r3, [sp, #4]
1000e7c2:	2bbb      	cmp	r3, #187	; 0xbb
1000e7c4:	d125      	bne.n	1000e812 <at_ble_event_get+0x16e>
1000e7c6:	2cbb      	cmp	r4, #187	; 0xbb
1000e7c8:	d123      	bne.n	1000e812 <at_ble_event_get+0x16e>
1000e7ca:	466b      	mov	r3, sp
1000e7cc:	891b      	ldrh	r3, [r3, #8]
1000e7ce:	80ab      	strh	r3, [r5, #4]
1000e7d0:	78b3      	ldrb	r3, [r6, #2]
1000e7d2:	7872      	ldrb	r2, [r6, #1]
1000e7d4:	78f0      	ldrb	r0, [r6, #3]
1000e7d6:	021b      	lsls	r3, r3, #8
1000e7d8:	4313      	orrs	r3, r2
1000e7da:	7971      	ldrb	r1, [r6, #5]
1000e7dc:	7932      	ldrb	r2, [r6, #4]
1000e7de:	70a8      	strb	r0, [r5, #2]
1000e7e0:	4871      	ldr	r0, [pc, #452]	; (1000e9a8 <at_ble_event_get+0x304>)
1000e7e2:	802b      	strh	r3, [r5, #0]
1000e7e4:	4283      	cmp	r3, r0
1000e7e6:	d806      	bhi.n	1000e7f6 <at_ble_event_get+0x152>
1000e7e8:	4a70      	ldr	r2, [pc, #448]	; (1000e9ac <at_ble_event_get+0x308>)
1000e7ea:	4293      	cmp	r3, r2
1000e7ec:	d20b      	bcs.n	1000e806 <at_ble_event_get+0x162>
1000e7ee:	4a70      	ldr	r2, [pc, #448]	; (1000e9b0 <at_ble_event_get+0x30c>)
1000e7f0:	4293      	cmp	r3, r2
1000e7f2:	d008      	beq.n	1000e806 <at_ble_event_get+0x162>
1000e7f4:	e009      	b.n	1000e80a <at_ble_event_get+0x166>
1000e7f6:	486f      	ldr	r0, [pc, #444]	; (1000e9b4 <at_ble_event_get+0x310>)
1000e7f8:	4283      	cmp	r3, r0
1000e7fa:	d106      	bne.n	1000e80a <at_ble_event_get+0x166>
1000e7fc:	020b      	lsls	r3, r1, #8
1000e7fe:	4313      	orrs	r3, r2
1000e800:	80ab      	strh	r3, [r5, #4]
1000e802:	2337      	movs	r3, #55	; 0x37
1000e804:	e002      	b.n	1000e80c <at_ble_event_get+0x168>
1000e806:	2336      	movs	r3, #54	; 0x36
1000e808:	e000      	b.n	1000e80c <at_ble_event_get+0x168>
1000e80a:	2300      	movs	r3, #0
1000e80c:	9a03      	ldr	r2, [sp, #12]
1000e80e:	7013      	strb	r3, [r2, #0]
1000e810:	e7bd      	b.n	1000e78e <at_ble_event_get+0xea>
1000e812:	4b69      	ldr	r3, [pc, #420]	; (1000e9b8 <at_ble_event_get+0x314>)
1000e814:	429c      	cmp	r4, r3
1000e816:	d100      	bne.n	1000e81a <at_ble_event_get+0x176>
1000e818:	e144      	b.n	1000eaa4 <at_ble_event_get+0x400>
1000e81a:	d865      	bhi.n	1000e8e8 <at_ble_event_get+0x244>
1000e81c:	4b67      	ldr	r3, [pc, #412]	; (1000e9bc <at_ble_event_get+0x318>)
1000e81e:	429c      	cmp	r4, r3
1000e820:	d100      	bne.n	1000e824 <at_ble_event_get+0x180>
1000e822:	e1d5      	b.n	1000ebd0 <at_ble_event_get+0x52c>
1000e824:	d82f      	bhi.n	1000e886 <at_ble_event_get+0x1e2>
1000e826:	4b66      	ldr	r3, [pc, #408]	; (1000e9c0 <at_ble_event_get+0x31c>)
1000e828:	429c      	cmp	r4, r3
1000e82a:	d100      	bne.n	1000e82e <at_ble_event_get+0x18a>
1000e82c:	e1e0      	b.n	1000ebf0 <at_ble_event_get+0x54c>
1000e82e:	d813      	bhi.n	1000e858 <at_ble_event_get+0x1b4>
1000e830:	4b64      	ldr	r3, [pc, #400]	; (1000e9c4 <at_ble_event_get+0x320>)
1000e832:	429c      	cmp	r4, r3
1000e834:	d100      	bne.n	1000e838 <at_ble_event_get+0x194>
1000e836:	e1a3      	b.n	1000eb80 <at_ble_event_get+0x4dc>
1000e838:	d804      	bhi.n	1000e844 <at_ble_event_get+0x1a0>
1000e83a:	2638      	movs	r6, #56	; 0x38
1000e83c:	42b4      	cmp	r4, r6
1000e83e:	d100      	bne.n	1000e842 <at_ble_event_get+0x19e>
1000e840:	e225      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000e842:	e117      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e844:	4b60      	ldr	r3, [pc, #384]	; (1000e9c8 <at_ble_event_get+0x324>)
1000e846:	429c      	cmp	r4, r3
1000e848:	d100      	bne.n	1000e84c <at_ble_event_get+0x1a8>
1000e84a:	e19f      	b.n	1000eb8c <at_ble_event_get+0x4e8>
1000e84c:	33fe      	adds	r3, #254	; 0xfe
1000e84e:	33ff      	adds	r3, #255	; 0xff
1000e850:	429c      	cmp	r4, r3
1000e852:	d100      	bne.n	1000e856 <at_ble_event_get+0x1b2>
1000e854:	e1d3      	b.n	1000ebfe <at_ble_event_get+0x55a>
1000e856:	e10d      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e858:	4b5c      	ldr	r3, [pc, #368]	; (1000e9cc <at_ble_event_get+0x328>)
1000e85a:	429c      	cmp	r4, r3
1000e85c:	d100      	bne.n	1000e860 <at_ble_event_get+0x1bc>
1000e85e:	e1a9      	b.n	1000ebb4 <at_ble_event_get+0x510>
1000e860:	d808      	bhi.n	1000e874 <at_ble_event_get+0x1d0>
1000e862:	4b5b      	ldr	r3, [pc, #364]	; (1000e9d0 <at_ble_event_get+0x32c>)
1000e864:	429c      	cmp	r4, r3
1000e866:	d100      	bne.n	1000e86a <at_ble_event_get+0x1c6>
1000e868:	e196      	b.n	1000eb98 <at_ble_event_get+0x4f4>
1000e86a:	4b5a      	ldr	r3, [pc, #360]	; (1000e9d4 <at_ble_event_get+0x330>)
1000e86c:	429c      	cmp	r4, r3
1000e86e:	d100      	bne.n	1000e872 <at_ble_event_get+0x1ce>
1000e870:	e199      	b.n	1000eba6 <at_ble_event_get+0x502>
1000e872:	e0ff      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e874:	4b58      	ldr	r3, [pc, #352]	; (1000e9d8 <at_ble_event_get+0x334>)
1000e876:	429c      	cmp	r4, r3
1000e878:	d100      	bne.n	1000e87c <at_ble_event_get+0x1d8>
1000e87a:	e1a2      	b.n	1000ebc2 <at_ble_event_get+0x51e>
1000e87c:	4b57      	ldr	r3, [pc, #348]	; (1000e9dc <at_ble_event_get+0x338>)
1000e87e:	429c      	cmp	r4, r3
1000e880:	d100      	bne.n	1000e884 <at_ble_event_get+0x1e0>
1000e882:	e1d4      	b.n	1000ec2e <at_ble_event_get+0x58a>
1000e884:	e0f6      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e886:	4b56      	ldr	r3, [pc, #344]	; (1000e9e0 <at_ble_event_get+0x33c>)
1000e888:	429c      	cmp	r4, r3
1000e88a:	d100      	bne.n	1000e88e <at_ble_event_get+0x1ea>
1000e88c:	e1c8      	b.n	1000ec20 <at_ble_event_get+0x57c>
1000e88e:	d812      	bhi.n	1000e8b6 <at_ble_event_get+0x212>
1000e890:	4b54      	ldr	r3, [pc, #336]	; (1000e9e4 <at_ble_event_get+0x340>)
1000e892:	429c      	cmp	r4, r3
1000e894:	d100      	bne.n	1000e898 <at_ble_event_get+0x1f4>
1000e896:	e1d1      	b.n	1000ec3c <at_ble_event_get+0x598>
1000e898:	d804      	bhi.n	1000e8a4 <at_ble_event_get+0x200>
1000e89a:	4b53      	ldr	r3, [pc, #332]	; (1000e9e8 <at_ble_event_get+0x344>)
1000e89c:	429c      	cmp	r4, r3
1000e89e:	d100      	bne.n	1000e8a2 <at_ble_event_get+0x1fe>
1000e8a0:	e19b      	b.n	1000ebda <at_ble_event_get+0x536>
1000e8a2:	e0e7      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e8a4:	4b51      	ldr	r3, [pc, #324]	; (1000e9ec <at_ble_event_get+0x348>)
1000e8a6:	429c      	cmp	r4, r3
1000e8a8:	d100      	bne.n	1000e8ac <at_ble_event_get+0x208>
1000e8aa:	e1ad      	b.n	1000ec08 <at_ble_event_get+0x564>
1000e8ac:	4b50      	ldr	r3, [pc, #320]	; (1000e9f0 <at_ble_event_get+0x34c>)
1000e8ae:	429c      	cmp	r4, r3
1000e8b0:	d100      	bne.n	1000e8b4 <at_ble_event_get+0x210>
1000e8b2:	e1b0      	b.n	1000ec16 <at_ble_event_get+0x572>
1000e8b4:	e0de      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e8b6:	4b4f      	ldr	r3, [pc, #316]	; (1000e9f4 <at_ble_event_get+0x350>)
1000e8b8:	429c      	cmp	r4, r3
1000e8ba:	d100      	bne.n	1000e8be <at_ble_event_get+0x21a>
1000e8bc:	e0e0      	b.n	1000ea80 <at_ble_event_get+0x3dc>
1000e8be:	d809      	bhi.n	1000e8d4 <at_ble_event_get+0x230>
1000e8c0:	3b08      	subs	r3, #8
1000e8c2:	429c      	cmp	r4, r3
1000e8c4:	d100      	bne.n	1000e8c8 <at_ble_event_get+0x224>
1000e8c6:	e0d7      	b.n	1000ea78 <at_ble_event_get+0x3d4>
1000e8c8:	4b4b      	ldr	r3, [pc, #300]	; (1000e9f8 <at_ble_event_get+0x354>)
1000e8ca:	2639      	movs	r6, #57	; 0x39
1000e8cc:	429c      	cmp	r4, r3
1000e8ce:	d100      	bne.n	1000e8d2 <at_ble_event_get+0x22e>
1000e8d0:	e1dd      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000e8d2:	e0cf      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e8d4:	23d1      	movs	r3, #209	; 0xd1
1000e8d6:	011b      	lsls	r3, r3, #4
1000e8d8:	429c      	cmp	r4, r3
1000e8da:	d100      	bne.n	1000e8de <at_ble_event_get+0x23a>
1000e8dc:	e0d6      	b.n	1000ea8c <at_ble_event_get+0x3e8>
1000e8de:	4b47      	ldr	r3, [pc, #284]	; (1000e9fc <at_ble_event_get+0x358>)
1000e8e0:	429c      	cmp	r4, r3
1000e8e2:	d100      	bne.n	1000e8e6 <at_ble_event_get+0x242>
1000e8e4:	e0d8      	b.n	1000ea98 <at_ble_event_get+0x3f4>
1000e8e6:	e0c5      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e8e8:	4b45      	ldr	r3, [pc, #276]	; (1000ea00 <at_ble_event_get+0x35c>)
1000e8ea:	429c      	cmp	r4, r3
1000e8ec:	d100      	bne.n	1000e8f0 <at_ble_event_get+0x24c>
1000e8ee:	e117      	b.n	1000eb20 <at_ble_event_get+0x47c>
1000e8f0:	d82e      	bhi.n	1000e950 <at_ble_event_get+0x2ac>
1000e8f2:	4b44      	ldr	r3, [pc, #272]	; (1000ea04 <at_ble_event_get+0x360>)
1000e8f4:	429c      	cmp	r4, r3
1000e8f6:	d100      	bne.n	1000e8fa <at_ble_event_get+0x256>
1000e8f8:	e13d      	b.n	1000eb76 <at_ble_event_get+0x4d2>
1000e8fa:	d812      	bhi.n	1000e922 <at_ble_event_get+0x27e>
1000e8fc:	4b42      	ldr	r3, [pc, #264]	; (1000ea08 <at_ble_event_get+0x364>)
1000e8fe:	429c      	cmp	r4, r3
1000e900:	d100      	bne.n	1000e904 <at_ble_event_get+0x260>
1000e902:	e0e8      	b.n	1000ead6 <at_ble_event_get+0x432>
1000e904:	d804      	bhi.n	1000e910 <at_ble_event_get+0x26c>
1000e906:	3b03      	subs	r3, #3
1000e908:	429c      	cmp	r4, r3
1000e90a:	d100      	bne.n	1000e90e <at_ble_event_get+0x26a>
1000e90c:	e0d0      	b.n	1000eab0 <at_ble_event_get+0x40c>
1000e90e:	e0b1      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e910:	4b3e      	ldr	r3, [pc, #248]	; (1000ea0c <at_ble_event_get+0x368>)
1000e912:	429c      	cmp	r4, r3
1000e914:	d100      	bne.n	1000e918 <at_ble_event_get+0x274>
1000e916:	e0d0      	b.n	1000eaba <at_ble_event_get+0x416>
1000e918:	4b3d      	ldr	r3, [pc, #244]	; (1000ea10 <at_ble_event_get+0x36c>)
1000e91a:	429c      	cmp	r4, r3
1000e91c:	d100      	bne.n	1000e920 <at_ble_event_get+0x27c>
1000e91e:	e0f9      	b.n	1000eb14 <at_ble_event_get+0x470>
1000e920:	e0a8      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e922:	4b3c      	ldr	r3, [pc, #240]	; (1000ea14 <at_ble_event_get+0x370>)
1000e924:	429c      	cmp	r4, r3
1000e926:	d100      	bne.n	1000e92a <at_ble_event_get+0x286>
1000e928:	e0db      	b.n	1000eae2 <at_ble_event_get+0x43e>
1000e92a:	d808      	bhi.n	1000e93e <at_ble_event_get+0x29a>
1000e92c:	4b3a      	ldr	r3, [pc, #232]	; (1000ea18 <at_ble_event_get+0x374>)
1000e92e:	429c      	cmp	r4, r3
1000e930:	d100      	bne.n	1000e934 <at_ble_event_get+0x290>
1000e932:	e11b      	b.n	1000eb6c <at_ble_event_get+0x4c8>
1000e934:	4b39      	ldr	r3, [pc, #228]	; (1000ea1c <at_ble_event_get+0x378>)
1000e936:	429c      	cmp	r4, r3
1000e938:	d100      	bne.n	1000e93c <at_ble_event_get+0x298>
1000e93a:	e0d8      	b.n	1000eaee <at_ble_event_get+0x44a>
1000e93c:	e09a      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e93e:	4b38      	ldr	r3, [pc, #224]	; (1000ea20 <at_ble_event_get+0x37c>)
1000e940:	429c      	cmp	r4, r3
1000e942:	d100      	bne.n	1000e946 <at_ble_event_get+0x2a2>
1000e944:	e0d8      	b.n	1000eaf8 <at_ble_event_get+0x454>
1000e946:	4b37      	ldr	r3, [pc, #220]	; (1000ea24 <at_ble_event_get+0x380>)
1000e948:	429c      	cmp	r4, r3
1000e94a:	d100      	bne.n	1000e94e <at_ble_event_get+0x2aa>
1000e94c:	e0db      	b.n	1000eb06 <at_ble_event_get+0x462>
1000e94e:	e091      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e950:	4b35      	ldr	r3, [pc, #212]	; (1000ea28 <at_ble_event_get+0x384>)
1000e952:	429c      	cmp	r4, r3
1000e954:	d100      	bne.n	1000e958 <at_ble_event_get+0x2b4>
1000e956:	e0f7      	b.n	1000eb48 <at_ble_event_get+0x4a4>
1000e958:	d876      	bhi.n	1000ea48 <at_ble_event_get+0x3a4>
1000e95a:	4b34      	ldr	r3, [pc, #208]	; (1000ea2c <at_ble_event_get+0x388>)
1000e95c:	429c      	cmp	r4, r3
1000e95e:	d100      	bne.n	1000e962 <at_ble_event_get+0x2be>
1000e960:	e0f8      	b.n	1000eb54 <at_ble_event_get+0x4b0>
1000e962:	d869      	bhi.n	1000ea38 <at_ble_event_get+0x394>
1000e964:	4b32      	ldr	r3, [pc, #200]	; (1000ea30 <at_ble_event_get+0x38c>)
1000e966:	429c      	cmp	r4, r3
1000e968:	d100      	bne.n	1000e96c <at_ble_event_get+0x2c8>
1000e96a:	e0e0      	b.n	1000eb2e <at_ble_event_get+0x48a>
1000e96c:	4b31      	ldr	r3, [pc, #196]	; (1000ea34 <at_ble_event_get+0x390>)
1000e96e:	429c      	cmp	r4, r3
1000e970:	d100      	bne.n	1000e974 <at_ble_event_get+0x2d0>
1000e972:	e0a9      	b.n	1000eac8 <at_ble_event_get+0x424>
1000e974:	e07e      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000e976:	46c0      	nop			; (mov r8, r8)
1000e978:	100100a9 	.word	0x100100a9
1000e97c:	1001a174 	.word	0x1001a174
1000e980:	1000de01 	.word	0x1000de01
1000e984:	1001a178 	.word	0x1001a178
1000e988:	1001a170 	.word	0x1001a170
1000e98c:	1001a160 	.word	0x1001a160
1000e990:	1000e58d 	.word	0x1000e58d
1000e994:	10015909 	.word	0x10015909
1000e998:	0000ffff 	.word	0x0000ffff
1000e99c:	0000fffe 	.word	0x0000fffe
1000e9a0:	1000e079 	.word	0x1000e079
1000e9a4:	100100ab 	.word	0x100100ab
1000e9a8:	0000201e 	.word	0x0000201e
1000e9ac:	0000201d 	.word	0x0000201d
1000e9b0:	00000c03 	.word	0x00000c03
1000e9b4:	0000201f 	.word	0x0000201f
1000e9b8:	00000d1c 	.word	0x00000d1c
1000e9bc:	00000c0c 	.word	0x00000c0c
1000e9c0:	00000c02 	.word	0x00000c02
1000e9c4:	00000a02 	.word	0x00000a02
1000e9c8:	00000a03 	.word	0x00000a03
1000e9cc:	00000c06 	.word	0x00000c06
1000e9d0:	00000c04 	.word	0x00000c04
1000e9d4:	00000c05 	.word	0x00000c05
1000e9d8:	00000c07 	.word	0x00000c07
1000e9dc:	00000c09 	.word	0x00000c09
1000e9e0:	00000c17 	.word	0x00000c17
1000e9e4:	00000c12 	.word	0x00000c12
1000e9e8:	00000c0d 	.word	0x00000c0d
1000e9ec:	00000c13 	.word	0x00000c13
1000e9f0:	00000c15 	.word	0x00000c15
1000e9f4:	00000d08 	.word	0x00000d08
1000e9f8:	00000d01 	.word	0x00000d01
1000e9fc:	00000d15 	.word	0x00000d15
1000ea00:	00000e1b 	.word	0x00000e1b
1000ea04:	00000e0f 	.word	0x00000e0f
1000ea08:	00000e03 	.word	0x00000e03
1000ea0c:	00000e06 	.word	0x00000e06
1000ea10:	00000e0a 	.word	0x00000e0a
1000ea14:	00000e15 	.word	0x00000e15
1000ea18:	00000e11 	.word	0x00000e11
1000ea1c:	00000e13 	.word	0x00000e13
1000ea20:	00000e17 	.word	0x00000e17
1000ea24:	00000e19 	.word	0x00000e19
1000ea28:	00000e27 	.word	0x00000e27
1000ea2c:	00000e21 	.word	0x00000e21
1000ea30:	00000e1c 	.word	0x00000e1c
1000ea34:	00000e1d 	.word	0x00000e1d
1000ea38:	4b9f      	ldr	r3, [pc, #636]	; (1000ecb8 <at_ble_event_get+0x614>)
1000ea3a:	429c      	cmp	r4, r3
1000ea3c:	d07e      	beq.n	1000eb3c <at_ble_event_get+0x498>
1000ea3e:	4b9f      	ldr	r3, [pc, #636]	; (1000ecbc <at_ble_event_get+0x618>)
1000ea40:	429c      	cmp	r4, r3
1000ea42:	d100      	bne.n	1000ea46 <at_ble_event_get+0x3a2>
1000ea44:	e08c      	b.n	1000eb60 <at_ble_event_get+0x4bc>
1000ea46:	e015      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000ea48:	4b9d      	ldr	r3, [pc, #628]	; (1000ecc0 <at_ble_event_get+0x61c>)
1000ea4a:	429c      	cmp	r4, r3
1000ea4c:	d100      	bne.n	1000ea50 <at_ble_event_get+0x3ac>
1000ea4e:	e10a      	b.n	1000ec66 <at_ble_event_get+0x5c2>
1000ea50:	d808      	bhi.n	1000ea64 <at_ble_event_get+0x3c0>
1000ea52:	4b9c      	ldr	r3, [pc, #624]	; (1000ecc4 <at_ble_event_get+0x620>)
1000ea54:	429c      	cmp	r4, r3
1000ea56:	d100      	bne.n	1000ea5a <at_ble_event_get+0x3b6>
1000ea58:	e0f7      	b.n	1000ec4a <at_ble_event_get+0x5a6>
1000ea5a:	4b9b      	ldr	r3, [pc, #620]	; (1000ecc8 <at_ble_event_get+0x624>)
1000ea5c:	429c      	cmp	r4, r3
1000ea5e:	d100      	bne.n	1000ea62 <at_ble_event_get+0x3be>
1000ea60:	e0fa      	b.n	1000ec58 <at_ble_event_get+0x5b4>
1000ea62:	e007      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000ea64:	4b99      	ldr	r3, [pc, #612]	; (1000eccc <at_ble_event_get+0x628>)
1000ea66:	429c      	cmp	r4, r3
1000ea68:	d100      	bne.n	1000ea6c <at_ble_event_get+0x3c8>
1000ea6a:	e103      	b.n	1000ec74 <at_ble_event_get+0x5d0>
1000ea6c:	4b98      	ldr	r3, [pc, #608]	; (1000ecd0 <at_ble_event_get+0x62c>)
1000ea6e:	429c      	cmp	r4, r3
1000ea70:	d100      	bne.n	1000ea74 <at_ble_event_get+0x3d0>
1000ea72:	e106      	b.n	1000ec82 <at_ble_event_get+0x5de>
1000ea74:	2600      	movs	r6, #0
1000ea76:	e10a      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ea78:	1c30      	adds	r0, r6, #0
1000ea7a:	1c29      	adds	r1, r5, #0
1000ea7c:	4b95      	ldr	r3, [pc, #596]	; (1000ecd4 <at_ble_event_get+0x630>)
1000ea7e:	e014      	b.n	1000eaaa <at_ble_event_get+0x406>
1000ea80:	1c30      	adds	r0, r6, #0
1000ea82:	1c29      	adds	r1, r5, #0
1000ea84:	4b94      	ldr	r3, [pc, #592]	; (1000ecd8 <at_ble_event_get+0x634>)
1000ea86:	4798      	blx	r3
1000ea88:	2604      	movs	r6, #4
1000ea8a:	e100      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ea8c:	1c30      	adds	r0, r6, #0
1000ea8e:	1c29      	adds	r1, r5, #0
1000ea90:	4b92      	ldr	r3, [pc, #584]	; (1000ecdc <at_ble_event_get+0x638>)
1000ea92:	4798      	blx	r3
1000ea94:	2601      	movs	r6, #1
1000ea96:	e0fa      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ea98:	1c30      	adds	r0, r6, #0
1000ea9a:	1c29      	adds	r1, r5, #0
1000ea9c:	4b90      	ldr	r3, [pc, #576]	; (1000ece0 <at_ble_event_get+0x63c>)
1000ea9e:	4798      	blx	r3
1000eaa0:	260f      	movs	r6, #15
1000eaa2:	e0f4      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eaa4:	1c30      	adds	r0, r6, #0
1000eaa6:	1c29      	adds	r1, r5, #0
1000eaa8:	4b8e      	ldr	r3, [pc, #568]	; (1000ece4 <at_ble_event_get+0x640>)
1000eaaa:	4798      	blx	r3
1000eaac:	1c06      	adds	r6, r0, #0
1000eaae:	e0ee      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eab0:	9801      	ldr	r0, [sp, #4]
1000eab2:	1c31      	adds	r1, r6, #0
1000eab4:	1c2a      	adds	r2, r5, #0
1000eab6:	4b8c      	ldr	r3, [pc, #560]	; (1000ece8 <at_ble_event_get+0x644>)
1000eab8:	e017      	b.n	1000eaea <at_ble_event_get+0x446>
1000eaba:	1c31      	adds	r1, r6, #0
1000eabc:	9801      	ldr	r0, [sp, #4]
1000eabe:	1c2a      	adds	r2, r5, #0
1000eac0:	4b8a      	ldr	r3, [pc, #552]	; (1000ecec <at_ble_event_get+0x648>)
1000eac2:	4798      	blx	r3
1000eac4:	2611      	movs	r6, #17
1000eac6:	e0e2      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eac8:	1c31      	adds	r1, r6, #0
1000eaca:	9801      	ldr	r0, [sp, #4]
1000eacc:	1c2a      	adds	r2, r5, #0
1000eace:	4b88      	ldr	r3, [pc, #544]	; (1000ecf0 <at_ble_event_get+0x64c>)
1000ead0:	4798      	blx	r3
1000ead2:	2612      	movs	r6, #18
1000ead4:	e0db      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ead6:	1c30      	adds	r0, r6, #0
1000ead8:	1c29      	adds	r1, r5, #0
1000eada:	4b86      	ldr	r3, [pc, #536]	; (1000ecf4 <at_ble_event_get+0x650>)
1000eadc:	4798      	blx	r3
1000eade:	2606      	movs	r6, #6
1000eae0:	e0d5      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eae2:	1c31      	adds	r1, r6, #0
1000eae4:	1c2a      	adds	r2, r5, #0
1000eae6:	9801      	ldr	r0, [sp, #4]
1000eae8:	4b83      	ldr	r3, [pc, #524]	; (1000ecf8 <at_ble_event_get+0x654>)
1000eaea:	4798      	blx	r3
1000eaec:	e7de      	b.n	1000eaac <at_ble_event_get+0x408>
1000eaee:	9801      	ldr	r0, [sp, #4]
1000eaf0:	1c31      	adds	r1, r6, #0
1000eaf2:	1c2a      	adds	r2, r5, #0
1000eaf4:	4b81      	ldr	r3, [pc, #516]	; (1000ecfc <at_ble_event_get+0x658>)
1000eaf6:	e7f8      	b.n	1000eaea <at_ble_event_get+0x446>
1000eaf8:	1c31      	adds	r1, r6, #0
1000eafa:	9801      	ldr	r0, [sp, #4]
1000eafc:	1c2a      	adds	r2, r5, #0
1000eafe:	4b80      	ldr	r3, [pc, #512]	; (1000ed00 <at_ble_event_get+0x65c>)
1000eb00:	4798      	blx	r3
1000eb02:	260d      	movs	r6, #13
1000eb04:	e0c3      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb06:	1c31      	adds	r1, r6, #0
1000eb08:	9801      	ldr	r0, [sp, #4]
1000eb0a:	1c2a      	adds	r2, r5, #0
1000eb0c:	4b7d      	ldr	r3, [pc, #500]	; (1000ed04 <at_ble_event_get+0x660>)
1000eb0e:	4798      	blx	r3
1000eb10:	260e      	movs	r6, #14
1000eb12:	e0bc      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb14:	9801      	ldr	r0, [sp, #4]
1000eb16:	1c31      	adds	r1, r6, #0
1000eb18:	1c2a      	adds	r2, r5, #0
1000eb1a:	4b7b      	ldr	r3, [pc, #492]	; (1000ed08 <at_ble_event_get+0x664>)
1000eb1c:	4798      	blx	r3
1000eb1e:	e084      	b.n	1000ec2a <at_ble_event_get+0x586>
1000eb20:	1c31      	adds	r1, r6, #0
1000eb22:	9801      	ldr	r0, [sp, #4]
1000eb24:	1c2a      	adds	r2, r5, #0
1000eb26:	4b79      	ldr	r3, [pc, #484]	; (1000ed0c <at_ble_event_get+0x668>)
1000eb28:	4798      	blx	r3
1000eb2a:	260b      	movs	r6, #11
1000eb2c:	e0af      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb2e:	1c31      	adds	r1, r6, #0
1000eb30:	9801      	ldr	r0, [sp, #4]
1000eb32:	1c2a      	adds	r2, r5, #0
1000eb34:	4b76      	ldr	r3, [pc, #472]	; (1000ed10 <at_ble_event_get+0x66c>)
1000eb36:	4798      	blx	r3
1000eb38:	2610      	movs	r6, #16
1000eb3a:	e0a8      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb3c:	1c30      	adds	r0, r6, #0
1000eb3e:	1c29      	adds	r1, r5, #0
1000eb40:	4b74      	ldr	r3, [pc, #464]	; (1000ed14 <at_ble_event_get+0x670>)
1000eb42:	4798      	blx	r3
1000eb44:	2628      	movs	r6, #40	; 0x28
1000eb46:	e0a2      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb48:	1c30      	adds	r0, r6, #0
1000eb4a:	1c29      	adds	r1, r5, #0
1000eb4c:	4b72      	ldr	r3, [pc, #456]	; (1000ed18 <at_ble_event_get+0x674>)
1000eb4e:	4798      	blx	r3
1000eb50:	2629      	movs	r6, #41	; 0x29
1000eb52:	e09c      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb54:	1c30      	adds	r0, r6, #0
1000eb56:	1c29      	adds	r1, r5, #0
1000eb58:	4b70      	ldr	r3, [pc, #448]	; (1000ed1c <at_ble_event_get+0x678>)
1000eb5a:	4798      	blx	r3
1000eb5c:	2627      	movs	r6, #39	; 0x27
1000eb5e:	e096      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb60:	1c30      	adds	r0, r6, #0
1000eb62:	1c29      	adds	r1, r5, #0
1000eb64:	4b6e      	ldr	r3, [pc, #440]	; (1000ed20 <at_ble_event_get+0x67c>)
1000eb66:	4798      	blx	r3
1000eb68:	262a      	movs	r6, #42	; 0x2a
1000eb6a:	e090      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb6c:	9801      	ldr	r0, [sp, #4]
1000eb6e:	1c31      	adds	r1, r6, #0
1000eb70:	1c2a      	adds	r2, r5, #0
1000eb72:	4b6c      	ldr	r3, [pc, #432]	; (1000ed24 <at_ble_event_get+0x680>)
1000eb74:	e7b9      	b.n	1000eaea <at_ble_event_get+0x446>
1000eb76:	9801      	ldr	r0, [sp, #4]
1000eb78:	1c31      	adds	r1, r6, #0
1000eb7a:	1c2a      	adds	r2, r5, #0
1000eb7c:	4b6a      	ldr	r3, [pc, #424]	; (1000ed28 <at_ble_event_get+0x684>)
1000eb7e:	e7b4      	b.n	1000eaea <at_ble_event_get+0x446>
1000eb80:	1c30      	adds	r0, r6, #0
1000eb82:	1c29      	adds	r1, r5, #0
1000eb84:	4b69      	ldr	r3, [pc, #420]	; (1000ed2c <at_ble_event_get+0x688>)
1000eb86:	4798      	blx	r3
1000eb88:	262b      	movs	r6, #43	; 0x2b
1000eb8a:	e080      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb8c:	1c30      	adds	r0, r6, #0
1000eb8e:	1c29      	adds	r1, r5, #0
1000eb90:	4b67      	ldr	r3, [pc, #412]	; (1000ed30 <at_ble_event_get+0x68c>)
1000eb92:	4798      	blx	r3
1000eb94:	262c      	movs	r6, #44	; 0x2c
1000eb96:	e07a      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eb98:	1c31      	adds	r1, r6, #0
1000eb9a:	9801      	ldr	r0, [sp, #4]
1000eb9c:	1c2a      	adds	r2, r5, #0
1000eb9e:	4b65      	ldr	r3, [pc, #404]	; (1000ed34 <at_ble_event_get+0x690>)
1000eba0:	4798      	blx	r3
1000eba2:	2613      	movs	r6, #19
1000eba4:	e073      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eba6:	1c31      	adds	r1, r6, #0
1000eba8:	9801      	ldr	r0, [sp, #4]
1000ebaa:	1c2a      	adds	r2, r5, #0
1000ebac:	4b62      	ldr	r3, [pc, #392]	; (1000ed38 <at_ble_event_get+0x694>)
1000ebae:	4798      	blx	r3
1000ebb0:	2614      	movs	r6, #20
1000ebb2:	e06c      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ebb4:	1c31      	adds	r1, r6, #0
1000ebb6:	9801      	ldr	r0, [sp, #4]
1000ebb8:	1c2a      	adds	r2, r5, #0
1000ebba:	4b60      	ldr	r3, [pc, #384]	; (1000ed3c <at_ble_event_get+0x698>)
1000ebbc:	4798      	blx	r3
1000ebbe:	2615      	movs	r6, #21
1000ebc0:	e065      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ebc2:	1c31      	adds	r1, r6, #0
1000ebc4:	9801      	ldr	r0, [sp, #4]
1000ebc6:	1c2a      	adds	r2, r5, #0
1000ebc8:	4b5d      	ldr	r3, [pc, #372]	; (1000ed40 <at_ble_event_get+0x69c>)
1000ebca:	4798      	blx	r3
1000ebcc:	2616      	movs	r6, #22
1000ebce:	e05e      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ebd0:	9801      	ldr	r0, [sp, #4]
1000ebd2:	1c31      	adds	r1, r6, #0
1000ebd4:	1c2a      	adds	r2, r5, #0
1000ebd6:	4b5b      	ldr	r3, [pc, #364]	; (1000ed44 <at_ble_event_get+0x6a0>)
1000ebd8:	e787      	b.n	1000eaea <at_ble_event_get+0x446>
1000ebda:	1c31      	adds	r1, r6, #0
1000ebdc:	9801      	ldr	r0, [sp, #4]
1000ebde:	1c2a      	adds	r2, r5, #0
1000ebe0:	4b58      	ldr	r3, [pc, #352]	; (1000ed44 <at_ble_event_get+0x6a0>)
1000ebe2:	4798      	blx	r3
1000ebe4:	88a9      	ldrh	r1, [r5, #4]
1000ebe6:	1c06      	adds	r6, r0, #0
1000ebe8:	4b57      	ldr	r3, [pc, #348]	; (1000ed48 <at_ble_event_get+0x6a4>)
1000ebea:	8828      	ldrh	r0, [r5, #0]
1000ebec:	4798      	blx	r3
1000ebee:	e04e      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ebf0:	1c31      	adds	r1, r6, #0
1000ebf2:	9801      	ldr	r0, [sp, #4]
1000ebf4:	1c2a      	adds	r2, r5, #0
1000ebf6:	4b55      	ldr	r3, [pc, #340]	; (1000ed4c <at_ble_event_get+0x6a8>)
1000ebf8:	4798      	blx	r3
1000ebfa:	2623      	movs	r6, #35	; 0x23
1000ebfc:	e047      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ebfe:	9801      	ldr	r0, [sp, #4]
1000ec00:	1c31      	adds	r1, r6, #0
1000ec02:	1c2a      	adds	r2, r5, #0
1000ec04:	4b52      	ldr	r3, [pc, #328]	; (1000ed50 <at_ble_event_get+0x6ac>)
1000ec06:	e770      	b.n	1000eaea <at_ble_event_get+0x446>
1000ec08:	9b01      	ldr	r3, [sp, #4]
1000ec0a:	1c30      	adds	r0, r6, #0
1000ec0c:	0a1f      	lsrs	r7, r3, #8
1000ec0e:	802f      	strh	r7, [r5, #0]
1000ec10:	1c29      	adds	r1, r5, #0
1000ec12:	4b50      	ldr	r3, [pc, #320]	; (1000ed54 <at_ble_event_get+0x6b0>)
1000ec14:	e749      	b.n	1000eaaa <at_ble_event_get+0x406>
1000ec16:	9801      	ldr	r0, [sp, #4]
1000ec18:	1c31      	adds	r1, r6, #0
1000ec1a:	1c2a      	adds	r2, r5, #0
1000ec1c:	4b4e      	ldr	r3, [pc, #312]	; (1000ed58 <at_ble_event_get+0x6b4>)
1000ec1e:	e764      	b.n	1000eaea <at_ble_event_get+0x446>
1000ec20:	1c30      	adds	r0, r6, #0
1000ec22:	1c29      	adds	r1, r5, #0
1000ec24:	9a01      	ldr	r2, [sp, #4]
1000ec26:	4b4d      	ldr	r3, [pc, #308]	; (1000ed5c <at_ble_event_get+0x6b8>)
1000ec28:	4798      	blx	r3
1000ec2a:	263b      	movs	r6, #59	; 0x3b
1000ec2c:	e02f      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec2e:	1c31      	adds	r1, r6, #0
1000ec30:	9801      	ldr	r0, [sp, #4]
1000ec32:	1c2a      	adds	r2, r5, #0
1000ec34:	4b4a      	ldr	r3, [pc, #296]	; (1000ed60 <at_ble_event_get+0x6bc>)
1000ec36:	4798      	blx	r3
1000ec38:	2618      	movs	r6, #24
1000ec3a:	e028      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec3c:	1c31      	adds	r1, r6, #0
1000ec3e:	9801      	ldr	r0, [sp, #4]
1000ec40:	1c2a      	adds	r2, r5, #0
1000ec42:	4b48      	ldr	r3, [pc, #288]	; (1000ed64 <at_ble_event_get+0x6c0>)
1000ec44:	4798      	blx	r3
1000ec46:	2620      	movs	r6, #32
1000ec48:	e021      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec4a:	1c31      	adds	r1, r6, #0
1000ec4c:	9801      	ldr	r0, [sp, #4]
1000ec4e:	1c2a      	adds	r2, r5, #0
1000ec50:	4b45      	ldr	r3, [pc, #276]	; (1000ed68 <at_ble_event_get+0x6c4>)
1000ec52:	4798      	blx	r3
1000ec54:	2633      	movs	r6, #51	; 0x33
1000ec56:	e01a      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec58:	1c31      	adds	r1, r6, #0
1000ec5a:	9801      	ldr	r0, [sp, #4]
1000ec5c:	1c2a      	adds	r2, r5, #0
1000ec5e:	4b43      	ldr	r3, [pc, #268]	; (1000ed6c <at_ble_event_get+0x6c8>)
1000ec60:	4798      	blx	r3
1000ec62:	2630      	movs	r6, #48	; 0x30
1000ec64:	e013      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec66:	1c31      	adds	r1, r6, #0
1000ec68:	9801      	ldr	r0, [sp, #4]
1000ec6a:	1c2a      	adds	r2, r5, #0
1000ec6c:	4b40      	ldr	r3, [pc, #256]	; (1000ed70 <at_ble_event_get+0x6cc>)
1000ec6e:	4798      	blx	r3
1000ec70:	2634      	movs	r6, #52	; 0x34
1000ec72:	e00c      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec74:	1c31      	adds	r1, r6, #0
1000ec76:	9801      	ldr	r0, [sp, #4]
1000ec78:	1c2a      	adds	r2, r5, #0
1000ec7a:	4b3e      	ldr	r3, [pc, #248]	; (1000ed74 <at_ble_event_get+0x6d0>)
1000ec7c:	4798      	blx	r3
1000ec7e:	2635      	movs	r6, #53	; 0x35
1000ec80:	e005      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000ec82:	1c31      	adds	r1, r6, #0
1000ec84:	9801      	ldr	r0, [sp, #4]
1000ec86:	1c2a      	adds	r2, r5, #0
1000ec88:	4b3b      	ldr	r3, [pc, #236]	; (1000ed78 <at_ble_event_get+0x6d4>)
1000ec8a:	4798      	blx	r3
1000ec8c:	2632      	movs	r6, #50	; 0x32
1000ec8e:	9b03      	ldr	r3, [sp, #12]
1000ec90:	701e      	strb	r6, [r3, #0]
1000ec92:	2300      	movs	r3, #0
1000ec94:	9302      	str	r3, [sp, #8]
1000ec96:	e57a      	b.n	1000e78e <at_ble_event_get+0xea>
1000ec98:	23d0      	movs	r3, #208	; 0xd0
1000ec9a:	e7fb      	b.n	1000ec94 <at_ble_event_get+0x5f0>
1000ec9c:	9b01      	ldr	r3, [sp, #4]
1000ec9e:	9e02      	ldr	r6, [sp, #8]
1000eca0:	2bbb      	cmp	r3, #187	; 0xbb
1000eca2:	d000      	beq.n	1000eca6 <at_ble_event_get+0x602>
1000eca4:	e6e6      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000eca6:	e7f2      	b.n	1000ec8e <at_ble_event_get+0x5ea>
1000eca8:	9b02      	ldr	r3, [sp, #8]
1000ecaa:	2b00      	cmp	r3, #0
1000ecac:	d000      	beq.n	1000ecb0 <at_ble_event_get+0x60c>
1000ecae:	e56e      	b.n	1000e78e <at_ble_event_get+0xea>
1000ecb0:	e6e0      	b.n	1000ea74 <at_ble_event_get+0x3d0>
1000ecb2:	9802      	ldr	r0, [sp, #8]
1000ecb4:	b007      	add	sp, #28
1000ecb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecb8:	00000e22 	.word	0x00000e22
1000ecbc:	00000e25 	.word	0x00000e25
1000ecc0:	00001b05 	.word	0x00001b05
1000ecc4:	00001b01 	.word	0x00001b01
1000ecc8:	00001b03 	.word	0x00001b03
1000eccc:	00001b06 	.word	0x00001b06
1000ecd0:	00001b08 	.word	0x00001b08
1000ecd4:	10010ed5 	.word	0x10010ed5
1000ecd8:	10010eb9 	.word	0x10010eb9
1000ecdc:	10011155 	.word	0x10011155
1000ece0:	10011245 	.word	0x10011245
1000ece4:	10011269 	.word	0x10011269
1000ece8:	1001024d 	.word	0x1001024d
1000ecec:	10010acd 	.word	0x10010acd
1000ecf0:	10010b49 	.word	0x10010b49
1000ecf4:	10010505 	.word	0x10010505
1000ecf8:	100105a1 	.word	0x100105a1
1000ecfc:	10010679 	.word	0x10010679
1000ed00:	10010901 	.word	0x10010901
1000ed04:	100109a1 	.word	0x100109a1
1000ed08:	10010a59 	.word	0x10010a59
1000ed0c:	10010a81 	.word	0x10010a81
1000ed10:	10010a97 	.word	0x10010a97
1000ed14:	10010b61 	.word	0x10010b61
1000ed18:	10010b8f 	.word	0x10010b8f
1000ed1c:	10010ba5 	.word	0x10010ba5
1000ed20:	10010bcf 	.word	0x10010bcf
1000ed24:	100109fd 	.word	0x100109fd
1000ed28:	10010a27 	.word	0x10010a27
1000ed2c:	1000fc8d 	.word	0x1000fc8d
1000ed30:	1000fcb9 	.word	0x1000fcb9
1000ed34:	10011489 	.word	0x10011489
1000ed38:	100114c5 	.word	0x100114c5
1000ed3c:	1001150d 	.word	0x1001150d
1000ed40:	10011551 	.word	0x10011551
1000ed44:	10011585 	.word	0x10011585
1000ed48:	10011449 	.word	0x10011449
1000ed4c:	10011651 	.word	0x10011651
1000ed50:	100115d9 	.word	0x100115d9
1000ed54:	1000fb71 	.word	0x1000fb71
1000ed58:	1000fbdd 	.word	0x1000fbdd
1000ed5c:	1000fba1 	.word	0x1000fba1
1000ed60:	10011661 	.word	0x10011661
1000ed64:	100116a1 	.word	0x100116a1
1000ed68:	10011969 	.word	0x10011969
1000ed6c:	10011973 	.word	0x10011973
1000ed70:	10011979 	.word	0x10011979
1000ed74:	1001197f 	.word	0x1001197f
1000ed78:	1001198b 	.word	0x1001198b

1000ed7c <internal_event_flush>:
1000ed7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed7e:	490e      	ldr	r1, [pc, #56]	; (1000edb8 <internal_event_flush+0x3c>)
1000ed80:	2400      	movs	r4, #0
1000ed82:	680b      	ldr	r3, [r1, #0]
1000ed84:	1c0f      	adds	r7, r1, #0
1000ed86:	1c1e      	adds	r6, r3, #0
1000ed88:	4a0c      	ldr	r2, [pc, #48]	; (1000edbc <internal_event_flush+0x40>)
1000ed8a:	6815      	ldr	r5, [r2, #0]
1000ed8c:	9201      	str	r2, [sp, #4]
1000ed8e:	2b00      	cmp	r3, #0
1000ed90:	d00e      	beq.n	1000edb0 <internal_event_flush+0x34>
1000ed92:	889a      	ldrh	r2, [r3, #4]
1000ed94:	6819      	ldr	r1, [r3, #0]
1000ed96:	4282      	cmp	r2, r0
1000ed98:	d107      	bne.n	1000edaa <internal_event_flush+0x2e>
1000ed9a:	2c00      	cmp	r4, #0
1000ed9c:	d001      	beq.n	1000eda2 <internal_event_flush+0x26>
1000ed9e:	6021      	str	r1, [r4, #0]
1000eda0:	e000      	b.n	1000eda4 <internal_event_flush+0x28>
1000eda2:	1c0e      	adds	r6, r1, #0
1000eda4:	601d      	str	r5, [r3, #0]
1000eda6:	1c1d      	adds	r5, r3, #0
1000eda8:	1c23      	adds	r3, r4, #0
1000edaa:	1c1c      	adds	r4, r3, #0
1000edac:	1c0b      	adds	r3, r1, #0
1000edae:	e7ee      	b.n	1000ed8e <internal_event_flush+0x12>
1000edb0:	9b01      	ldr	r3, [sp, #4]
1000edb2:	603e      	str	r6, [r7, #0]
1000edb4:	601d      	str	r5, [r3, #0]
1000edb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000edb8:	1001a174 	.word	0x1001a174
1000edbc:	1001a178 	.word	0x1001a178

1000edc0 <internal_conn_flush>:
1000edc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000edc2:	4a12      	ldr	r2, [pc, #72]	; (1000ee0c <internal_conn_flush+0x4c>)
1000edc4:	9000      	str	r0, [sp, #0]
1000edc6:	6813      	ldr	r3, [r2, #0]
1000edc8:	4811      	ldr	r0, [pc, #68]	; (1000ee10 <internal_conn_flush+0x50>)
1000edca:	1c1f      	adds	r7, r3, #0
1000edcc:	2100      	movs	r1, #0
1000edce:	4684      	mov	ip, r0
1000edd0:	6804      	ldr	r4, [r0, #0]
1000edd2:	9201      	str	r2, [sp, #4]
1000edd4:	2b00      	cmp	r3, #0
1000edd6:	d014      	beq.n	1000ee02 <internal_conn_flush+0x42>
1000edd8:	88d8      	ldrh	r0, [r3, #6]
1000edda:	9a00      	ldr	r2, [sp, #0]
1000eddc:	681d      	ldr	r5, [r3, #0]
1000edde:	0a06      	lsrs	r6, r0, #8
1000ede0:	4296      	cmp	r6, r2
1000ede2:	d10b      	bne.n	1000edfc <internal_conn_flush+0x3c>
1000ede4:	26fd      	movs	r6, #253	; 0xfd
1000ede6:	4006      	ands	r6, r0
1000ede8:	2e0c      	cmp	r6, #12
1000edea:	d107      	bne.n	1000edfc <internal_conn_flush+0x3c>
1000edec:	2900      	cmp	r1, #0
1000edee:	d001      	beq.n	1000edf4 <internal_conn_flush+0x34>
1000edf0:	600d      	str	r5, [r1, #0]
1000edf2:	e000      	b.n	1000edf6 <internal_conn_flush+0x36>
1000edf4:	1c2f      	adds	r7, r5, #0
1000edf6:	601c      	str	r4, [r3, #0]
1000edf8:	1c1c      	adds	r4, r3, #0
1000edfa:	1c0b      	adds	r3, r1, #0
1000edfc:	1c19      	adds	r1, r3, #0
1000edfe:	1c2b      	adds	r3, r5, #0
1000ee00:	e7e8      	b.n	1000edd4 <internal_conn_flush+0x14>
1000ee02:	9b01      	ldr	r3, [sp, #4]
1000ee04:	601f      	str	r7, [r3, #0]
1000ee06:	4663      	mov	r3, ip
1000ee08:	601c      	str	r4, [r3, #0]
1000ee0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ee0c:	1001a174 	.word	0x1001a174
1000ee10:	1001a178 	.word	0x1001a178

1000ee14 <at_ble_device_name_set>:
1000ee14:	b530      	push	{r4, r5, lr}
1000ee16:	23cf      	movs	r3, #207	; 0xcf
1000ee18:	2800      	cmp	r0, #0
1000ee1a:	d010      	beq.n	1000ee3e <at_ble_device_name_set+0x2a>
1000ee1c:	1e4a      	subs	r2, r1, #1
1000ee1e:	2a1f      	cmp	r2, #31
1000ee20:	d80d      	bhi.n	1000ee3e <at_ble_device_name_set+0x2a>
1000ee22:	4a08      	ldr	r2, [pc, #32]	; (1000ee44 <at_ble_device_name_set+0x30>)
1000ee24:	1c13      	adds	r3, r2, #0
1000ee26:	33aa      	adds	r3, #170	; 0xaa
1000ee28:	8019      	strh	r1, [r3, #0]
1000ee2a:	2300      	movs	r3, #0
1000ee2c:	1c1c      	adds	r4, r3, #0
1000ee2e:	5cc5      	ldrb	r5, [r0, r3]
1000ee30:	34ac      	adds	r4, #172	; 0xac
1000ee32:	3301      	adds	r3, #1
1000ee34:	5515      	strb	r5, [r2, r4]
1000ee36:	b2dc      	uxtb	r4, r3
1000ee38:	428c      	cmp	r4, r1
1000ee3a:	d3f7      	bcc.n	1000ee2c <at_ble_device_name_set+0x18>
1000ee3c:	2300      	movs	r3, #0
1000ee3e:	1c18      	adds	r0, r3, #0
1000ee40:	bd30      	pop	{r4, r5, pc}
1000ee42:	46c0      	nop			; (mov r8, r8)
1000ee44:	1001b17a 	.word	0x1001b17a

1000ee48 <at_ble_addr_get>:
1000ee48:	b510      	push	{r4, lr}
1000ee4a:	1c04      	adds	r4, r0, #0
1000ee4c:	20cf      	movs	r0, #207	; 0xcf
1000ee4e:	2c00      	cmp	r4, #0
1000ee50:	d006      	beq.n	1000ee60 <at_ble_addr_get+0x18>
1000ee52:	4b04      	ldr	r3, [pc, #16]	; (1000ee64 <at_ble_addr_get+0x1c>)
1000ee54:	38ce      	subs	r0, #206	; 0xce
1000ee56:	1c21      	adds	r1, r4, #0
1000ee58:	4798      	blx	r3
1000ee5a:	4b03      	ldr	r3, [pc, #12]	; (1000ee68 <at_ble_addr_get+0x20>)
1000ee5c:	791b      	ldrb	r3, [r3, #4]
1000ee5e:	7023      	strb	r3, [r4, #0]
1000ee60:	bd10      	pop	{r4, pc}
1000ee62:	46c0      	nop			; (mov r8, r8)
1000ee64:	10010d69 	.word	0x10010d69
1000ee68:	1001b17a 	.word	0x1001b17a

1000ee6c <at_ble_set_dev_config>:
1000ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee6e:	7906      	ldrb	r6, [r0, #4]
1000ee70:	b089      	sub	sp, #36	; 0x24
1000ee72:	25cf      	movs	r5, #207	; 0xcf
1000ee74:	2e03      	cmp	r6, #3
1000ee76:	d838      	bhi.n	1000eeea <at_ble_set_dev_config+0x7e>
1000ee78:	7803      	ldrb	r3, [r0, #0]
1000ee7a:	3511      	adds	r5, #17
1000ee7c:	2b0f      	cmp	r3, #15
1000ee7e:	d834      	bhi.n	1000eeea <at_ble_set_dev_config+0x7e>
1000ee80:	2380      	movs	r3, #128	; 0x80
1000ee82:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000ee84:	3d11      	subs	r5, #17
1000ee86:	009b      	lsls	r3, r3, #2
1000ee88:	429f      	cmp	r7, r3
1000ee8a:	d82e      	bhi.n	1000eeea <at_ble_set_dev_config+0x7e>
1000ee8c:	7fc5      	ldrb	r5, [r0, #31]
1000ee8e:	7f83      	ldrb	r3, [r0, #30]
1000ee90:	01ad      	lsls	r5, r5, #6
1000ee92:	015b      	lsls	r3, r3, #5
1000ee94:	431d      	orrs	r5, r3
1000ee96:	7ec3      	ldrb	r3, [r0, #27]
1000ee98:	431d      	orrs	r5, r3
1000ee9a:	7f43      	ldrb	r3, [r0, #29]
1000ee9c:	011b      	lsls	r3, r3, #4
1000ee9e:	431d      	orrs	r5, r3
1000eea0:	7f03      	ldrb	r3, [r0, #28]
1000eea2:	009b      	lsls	r3, r3, #2
1000eea4:	431d      	orrs	r5, r3
1000eea6:	4b12      	ldr	r3, [pc, #72]	; (1000eef0 <at_ble_set_dev_config+0x84>)
1000eea8:	b2ed      	uxtb	r5, r5
1000eeaa:	711e      	strb	r6, [r3, #4]
1000eeac:	7903      	ldrb	r3, [r0, #4]
1000eeae:	3b02      	subs	r3, #2
1000eeb0:	2b01      	cmp	r3, #1
1000eeb2:	d801      	bhi.n	1000eeb8 <at_ble_set_dev_config+0x4c>
1000eeb4:	2302      	movs	r3, #2
1000eeb6:	7103      	strb	r3, [r0, #4]
1000eeb8:	1c04      	adds	r4, r0, #0
1000eeba:	1c23      	adds	r3, r4, #0
1000eebc:	330b      	adds	r3, #11
1000eebe:	8861      	ldrh	r1, [r4, #2]
1000eec0:	9307      	str	r3, [sp, #28]
1000eec2:	7923      	ldrb	r3, [r4, #4]
1000eec4:	7800      	ldrb	r0, [r0, #0]
1000eec6:	9300      	str	r3, [sp, #0]
1000eec8:	9501      	str	r5, [sp, #4]
1000eeca:	8c25      	ldrh	r5, [r4, #32]
1000eecc:	1d62      	adds	r2, r4, #5
1000eece:	9502      	str	r5, [sp, #8]
1000eed0:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000eed2:	9b07      	ldr	r3, [sp, #28]
1000eed4:	9503      	str	r5, [sp, #12]
1000eed6:	9704      	str	r7, [sp, #16]
1000eed8:	4d06      	ldr	r5, [pc, #24]	; (1000eef4 <at_ble_set_dev_config+0x88>)
1000eeda:	47a8      	blx	r5
1000eedc:	7126      	strb	r6, [r4, #4]
1000eede:	1c05      	adds	r5, r0, #0
1000eee0:	1c21      	adds	r1, r4, #0
1000eee2:	4803      	ldr	r0, [pc, #12]	; (1000eef0 <at_ble_set_dev_config+0x84>)
1000eee4:	2226      	movs	r2, #38	; 0x26
1000eee6:	4b04      	ldr	r3, [pc, #16]	; (1000eef8 <at_ble_set_dev_config+0x8c>)
1000eee8:	4798      	blx	r3
1000eeea:	1c28      	adds	r0, r5, #0
1000eeec:	b009      	add	sp, #36	; 0x24
1000eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eef0:	1001b17a 	.word	0x1001b17a
1000eef4:	10010c61 	.word	0x10010c61
1000eef8:	100158f7 	.word	0x100158f7

1000eefc <at_ble_init>:
1000eefc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eefe:	b087      	sub	sp, #28
1000ef00:	af03      	add	r7, sp, #12
1000ef02:	4954      	ldr	r1, [pc, #336]	; (1000f054 <at_ble_init+0x158>)
1000ef04:	220b      	movs	r2, #11
1000ef06:	4b54      	ldr	r3, [pc, #336]	; (1000f058 <at_ble_init+0x15c>)
1000ef08:	1c04      	adds	r4, r0, #0
1000ef0a:	1c38      	adds	r0, r7, #0
1000ef0c:	4798      	blx	r3
1000ef0e:	2205      	movs	r2, #5
1000ef10:	4b52      	ldr	r3, [pc, #328]	; (1000f05c <at_ble_init+0x160>)
1000ef12:	2640      	movs	r6, #64	; 0x40
1000ef14:	801a      	strh	r2, [r3, #0]
1000ef16:	2300      	movs	r3, #0
1000ef18:	4a51      	ldr	r2, [pc, #324]	; (1000f060 <at_ble_init+0x164>)
1000ef1a:	6013      	str	r3, [r2, #0]
1000ef1c:	4a51      	ldr	r2, [pc, #324]	; (1000f064 <at_ble_init+0x168>)
1000ef1e:	7013      	strb	r3, [r2, #0]
1000ef20:	4a51      	ldr	r2, [pc, #324]	; (1000f068 <at_ble_init+0x16c>)
1000ef22:	7013      	strb	r3, [r2, #0]
1000ef24:	4b51      	ldr	r3, [pc, #324]	; (1000f06c <at_ble_init+0x170>)
1000ef26:	4798      	blx	r3
1000ef28:	4b51      	ldr	r3, [pc, #324]	; (1000f070 <at_ble_init+0x174>)
1000ef2a:	4798      	blx	r3
1000ef2c:	4b51      	ldr	r3, [pc, #324]	; (1000f074 <at_ble_init+0x178>)
1000ef2e:	4798      	blx	r3
1000ef30:	4b51      	ldr	r3, [pc, #324]	; (1000f078 <at_ble_init+0x17c>)
1000ef32:	4798      	blx	r3
1000ef34:	2c00      	cmp	r4, #0
1000ef36:	d100      	bne.n	1000ef3a <at_ble_init+0x3e>
1000ef38:	e089      	b.n	1000f04e <at_ble_init+0x152>
1000ef3a:	68a3      	ldr	r3, [r4, #8]
1000ef3c:	2b00      	cmp	r3, #0
1000ef3e:	d100      	bne.n	1000ef42 <at_ble_init+0x46>
1000ef40:	e085      	b.n	1000f04e <at_ble_init+0x152>
1000ef42:	6923      	ldr	r3, [r4, #16]
1000ef44:	2b00      	cmp	r3, #0
1000ef46:	d100      	bne.n	1000ef4a <at_ble_init+0x4e>
1000ef48:	e081      	b.n	1000f04e <at_ble_init+0x152>
1000ef4a:	6820      	ldr	r0, [r4, #0]
1000ef4c:	2800      	cmp	r0, #0
1000ef4e:	d102      	bne.n	1000ef56 <at_ble_init+0x5a>
1000ef50:	6863      	ldr	r3, [r4, #4]
1000ef52:	2b00      	cmp	r3, #0
1000ef54:	d17b      	bne.n	1000f04e <at_ble_init+0x152>
1000ef56:	4b49      	ldr	r3, [pc, #292]	; (1000f07c <at_ble_init+0x180>)
1000ef58:	6861      	ldr	r1, [r4, #4]
1000ef5a:	4798      	blx	r3
1000ef5c:	4b48      	ldr	r3, [pc, #288]	; (1000f080 <at_ble_init+0x184>)
1000ef5e:	4798      	blx	r3
1000ef60:	2801      	cmp	r0, #1
1000ef62:	d901      	bls.n	1000ef68 <at_ble_init+0x6c>
1000ef64:	26e2      	movs	r6, #226	; 0xe2
1000ef66:	e072      	b.n	1000f04e <at_ble_init+0x152>
1000ef68:	4846      	ldr	r0, [pc, #280]	; (1000f084 <at_ble_init+0x188>)
1000ef6a:	4b47      	ldr	r3, [pc, #284]	; (1000f088 <at_ble_init+0x18c>)
1000ef6c:	4798      	blx	r3
1000ef6e:	2800      	cmp	r0, #0
1000ef70:	d1f8      	bne.n	1000ef64 <at_ble_init+0x68>
1000ef72:	1c20      	adds	r0, r4, #0
1000ef74:	4b45      	ldr	r3, [pc, #276]	; (1000f08c <at_ble_init+0x190>)
1000ef76:	4798      	blx	r3
1000ef78:	68e0      	ldr	r0, [r4, #12]
1000ef7a:	68a1      	ldr	r1, [r4, #8]
1000ef7c:	4b44      	ldr	r3, [pc, #272]	; (1000f090 <at_ble_init+0x194>)
1000ef7e:	4798      	blx	r3
1000ef80:	466b      	mov	r3, sp
1000ef82:	2201      	movs	r2, #1
1000ef84:	1cdc      	adds	r4, r3, #3
1000ef86:	1c20      	adds	r0, r4, #0
1000ef88:	a901      	add	r1, sp, #4
1000ef8a:	4252      	negs	r2, r2
1000ef8c:	4b41      	ldr	r3, [pc, #260]	; (1000f094 <at_ble_init+0x198>)
1000ef8e:	4798      	blx	r3
1000ef90:	2800      	cmp	r0, #0
1000ef92:	d102      	bne.n	1000ef9a <at_ble_init+0x9e>
1000ef94:	7823      	ldrb	r3, [r4, #0]
1000ef96:	2b39      	cmp	r3, #57	; 0x39
1000ef98:	d1f2      	bne.n	1000ef80 <at_ble_init+0x84>
1000ef9a:	4b3f      	ldr	r3, [pc, #252]	; (1000f098 <at_ble_init+0x19c>)
1000ef9c:	4798      	blx	r3
1000ef9e:	1e06      	subs	r6, r0, #0
1000efa0:	d155      	bne.n	1000f04e <at_ble_init+0x152>
1000efa2:	1c03      	adds	r3, r0, #0
1000efa4:	2101      	movs	r1, #1
1000efa6:	4a3d      	ldr	r2, [pc, #244]	; (1000f09c <at_ble_init+0x1a0>)
1000efa8:	4249      	negs	r1, r1
1000efaa:	189a      	adds	r2, r3, r2
1000efac:	3312      	adds	r3, #18
1000efae:	8151      	strh	r1, [r2, #10]
1000efb0:	2b90      	cmp	r3, #144	; 0x90
1000efb2:	d1f7      	bne.n	1000efa4 <at_ble_init+0xa8>
1000efb4:	4c3a      	ldr	r4, [pc, #232]	; (1000f0a0 <at_ble_init+0x1a4>)
1000efb6:	3b81      	subs	r3, #129	; 0x81
1000efb8:	7023      	strb	r3, [r4, #0]
1000efba:	4b3a      	ldr	r3, [pc, #232]	; (1000f0a4 <at_ble_init+0x1a8>)
1000efbc:	4a3a      	ldr	r2, [pc, #232]	; (1000f0a8 <at_ble_init+0x1ac>)
1000efbe:	8063      	strh	r3, [r4, #2]
1000efc0:	2300      	movs	r3, #0
1000efc2:	7123      	strb	r3, [r4, #4]
1000efc4:	3301      	adds	r3, #1
1000efc6:	1e58      	subs	r0, r3, #1
1000efc8:	0119      	lsls	r1, r3, #4
1000efca:	4301      	orrs	r1, r0
1000efcc:	3302      	adds	r3, #2
1000efce:	7011      	strb	r1, [r2, #0]
1000efd0:	3201      	adds	r2, #1
1000efd2:	2b21      	cmp	r3, #33	; 0x21
1000efd4:	d1f7      	bne.n	1000efc6 <at_ble_init+0xca>
1000efd6:	33e0      	adds	r3, #224	; 0xe0
1000efd8:	33ff      	adds	r3, #255	; 0xff
1000efda:	84a3      	strh	r3, [r4, #36]	; 0x24
1000efdc:	1c23      	adds	r3, r4, #0
1000efde:	2500      	movs	r5, #0
1000efe0:	3373      	adds	r3, #115	; 0x73
1000efe2:	701d      	strb	r5, [r3, #0]
1000efe4:	1c23      	adds	r3, r4, #0
1000efe6:	3372      	adds	r3, #114	; 0x72
1000efe8:	701d      	strb	r5, [r3, #0]
1000efea:	1c23      	adds	r3, r4, #0
1000efec:	3376      	adds	r3, #118	; 0x76
1000efee:	701d      	strb	r5, [r3, #0]
1000eff0:	1c23      	adds	r3, r4, #0
1000eff2:	33cc      	adds	r3, #204	; 0xcc
1000eff4:	801d      	strh	r5, [r3, #0]
1000eff6:	1c22      	adds	r2, r4, #0
1000eff8:	23a0      	movs	r3, #160	; 0xa0
1000effa:	32d0      	adds	r2, #208	; 0xd0
1000effc:	005b      	lsls	r3, r3, #1
1000effe:	8013      	strh	r3, [r2, #0]
1000f000:	1c22      	adds	r2, r4, #0
1000f002:	32ce      	adds	r2, #206	; 0xce
1000f004:	8013      	strh	r3, [r2, #0]
1000f006:	1c23      	adds	r3, r4, #0
1000f008:	33d2      	adds	r3, #210	; 0xd2
1000f00a:	801d      	strh	r5, [r3, #0]
1000f00c:	22fa      	movs	r2, #250	; 0xfa
1000f00e:	1c23      	adds	r3, r4, #0
1000f010:	0052      	lsls	r2, r2, #1
1000f012:	33d4      	adds	r3, #212	; 0xd4
1000f014:	801a      	strh	r2, [r3, #0]
1000f016:	1c23      	adds	r3, r4, #0
1000f018:	33d6      	adds	r3, #214	; 0xd6
1000f01a:	701d      	strb	r5, [r3, #0]
1000f01c:	1c20      	adds	r0, r4, #0
1000f01e:	4b23      	ldr	r3, [pc, #140]	; (1000f0ac <at_ble_init+0x1b0>)
1000f020:	76e5      	strb	r5, [r4, #27]
1000f022:	7725      	strb	r5, [r4, #28]
1000f024:	7765      	strb	r5, [r4, #29]
1000f026:	77a5      	strb	r5, [r4, #30]
1000f028:	77e5      	strb	r5, [r4, #31]
1000f02a:	8425      	strh	r5, [r4, #32]
1000f02c:	8465      	strh	r5, [r4, #34]	; 0x22
1000f02e:	4798      	blx	r3
1000f030:	1c23      	adds	r3, r4, #0
1000f032:	2207      	movs	r2, #7
1000f034:	3374      	adds	r3, #116	; 0x74
1000f036:	701a      	strb	r2, [r3, #0]
1000f038:	1c23      	adds	r3, r4, #0
1000f03a:	3204      	adds	r2, #4
1000f03c:	33aa      	adds	r3, #170	; 0xaa
1000f03e:	801a      	strh	r2, [r3, #0]
1000f040:	1c2b      	adds	r3, r5, #0
1000f042:	5d7a      	ldrb	r2, [r7, r5]
1000f044:	33ac      	adds	r3, #172	; 0xac
1000f046:	3501      	adds	r5, #1
1000f048:	54e2      	strb	r2, [r4, r3]
1000f04a:	2d0b      	cmp	r5, #11
1000f04c:	d1f8      	bne.n	1000f040 <at_ble_init+0x144>
1000f04e:	1c30      	adds	r0, r6, #0
1000f050:	b007      	add	sp, #28
1000f052:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f054:	100184bb 	.word	0x100184bb
1000f058:	100158f7 	.word	0x100158f7
1000f05c:	1001b0e8 	.word	0x1001b0e8
1000f060:	1001a224 	.word	0x1001a224
1000f064:	1001a184 	.word	0x1001a184
1000f068:	100186fc 	.word	0x100186fc
1000f06c:	100116b1 	.word	0x100116b1
1000f070:	1000f36d 	.word	0x1000f36d
1000f074:	1000f9cd 	.word	0x1000f9cd
1000f078:	1000fc81 	.word	0x1000fc81
1000f07c:	1000fa09 	.word	0x1000fa09
1000f080:	1000db11 	.word	0x1000db11
1000f084:	1000ff81 	.word	0x1000ff81
1000f088:	1000dd55 	.word	0x1000dd55
1000f08c:	10010029 	.word	0x10010029
1000f090:	1000e5e9 	.word	0x1000e5e9
1000f094:	1000e6a5 	.word	0x1000e6a5
1000f098:	10010bf1 	.word	0x10010bf1
1000f09c:	1001b0ea 	.word	0x1001b0ea
1000f0a0:	1001b17a 	.word	0x1001b17a
1000f0a4:	00003a98 	.word	0x00003a98
1000f0a8:	1001b185 	.word	0x1001b185
1000f0ac:	1000ee6d 	.word	0x1000ee6d

1000f0b0 <at_ble_addr_set>:
1000f0b0:	b538      	push	{r3, r4, r5, lr}
1000f0b2:	1c45      	adds	r5, r0, #1
1000f0b4:	1c03      	adds	r3, r0, #0
1000f0b6:	20cf      	movs	r0, #207	; 0xcf
1000f0b8:	2d00      	cmp	r5, #0
1000f0ba:	d018      	beq.n	1000f0ee <at_ble_addr_set+0x3e>
1000f0bc:	781a      	ldrb	r2, [r3, #0]
1000f0be:	2a03      	cmp	r2, #3
1000f0c0:	d815      	bhi.n	1000f0ee <at_ble_addr_set+0x3e>
1000f0c2:	2a01      	cmp	r2, #1
1000f0c4:	d102      	bne.n	1000f0cc <at_ble_addr_set+0x1c>
1000f0c6:	785a      	ldrb	r2, [r3, #1]
1000f0c8:	2a00      	cmp	r2, #0
1000f0ca:	d010      	beq.n	1000f0ee <at_ble_addr_set+0x3e>
1000f0cc:	1c1c      	adds	r4, r3, #0
1000f0ce:	1c29      	adds	r1, r5, #0
1000f0d0:	2206      	movs	r2, #6
1000f0d2:	4b07      	ldr	r3, [pc, #28]	; (1000f0f0 <at_ble_addr_set+0x40>)
1000f0d4:	4807      	ldr	r0, [pc, #28]	; (1000f0f4 <at_ble_addr_set+0x44>)
1000f0d6:	4798      	blx	r3
1000f0d8:	7823      	ldrb	r3, [r4, #0]
1000f0da:	4807      	ldr	r0, [pc, #28]	; (1000f0f8 <at_ble_addr_set+0x48>)
1000f0dc:	7103      	strb	r3, [r0, #4]
1000f0de:	4b07      	ldr	r3, [pc, #28]	; (1000f0fc <at_ble_addr_set+0x4c>)
1000f0e0:	4798      	blx	r3
1000f0e2:	7823      	ldrb	r3, [r4, #0]
1000f0e4:	2b00      	cmp	r3, #0
1000f0e6:	d102      	bne.n	1000f0ee <at_ble_addr_set+0x3e>
1000f0e8:	1c28      	adds	r0, r5, #0
1000f0ea:	4b05      	ldr	r3, [pc, #20]	; (1000f100 <at_ble_addr_set+0x50>)
1000f0ec:	4798      	blx	r3
1000f0ee:	bd38      	pop	{r3, r4, r5, pc}
1000f0f0:	100158f7 	.word	0x100158f7
1000f0f4:	1001b17f 	.word	0x1001b17f
1000f0f8:	1001b17a 	.word	0x1001b17a
1000f0fc:	1000ee6d 	.word	0x1000ee6d
1000f100:	100100ad 	.word	0x100100ad

1000f104 <at_ble_adv_data_set>:
1000f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f106:	4684      	mov	ip, r0
1000f108:	1c0f      	adds	r7, r1, #0
1000f10a:	1c16      	adds	r6, r2, #0
1000f10c:	1c1c      	adds	r4, r3, #0
1000f10e:	2800      	cmp	r0, #0
1000f110:	d102      	bne.n	1000f118 <at_ble_adv_data_set+0x14>
1000f112:	20e2      	movs	r0, #226	; 0xe2
1000f114:	2a00      	cmp	r2, #0
1000f116:	d02b      	beq.n	1000f170 <at_ble_adv_data_set+0x6c>
1000f118:	20cf      	movs	r0, #207	; 0xcf
1000f11a:	2f1f      	cmp	r7, #31
1000f11c:	d828      	bhi.n	1000f170 <at_ble_adv_data_set+0x6c>
1000f11e:	2c1f      	cmp	r4, #31
1000f120:	d826      	bhi.n	1000f170 <at_ble_adv_data_set+0x6c>
1000f122:	4663      	mov	r3, ip
1000f124:	2b00      	cmp	r3, #0
1000f126:	d00e      	beq.n	1000f146 <at_ble_adv_data_set+0x42>
1000f128:	4812      	ldr	r0, [pc, #72]	; (1000f174 <at_ble_adv_data_set+0x70>)
1000f12a:	4d13      	ldr	r5, [pc, #76]	; (1000f178 <at_ble_adv_data_set+0x74>)
1000f12c:	2f00      	cmp	r7, #0
1000f12e:	d104      	bne.n	1000f13a <at_ble_adv_data_set+0x36>
1000f130:	1c39      	adds	r1, r7, #0
1000f132:	221f      	movs	r2, #31
1000f134:	4b11      	ldr	r3, [pc, #68]	; (1000f17c <at_ble_adv_data_set+0x78>)
1000f136:	4798      	blx	r3
1000f138:	e003      	b.n	1000f142 <at_ble_adv_data_set+0x3e>
1000f13a:	4661      	mov	r1, ip
1000f13c:	1c3a      	adds	r2, r7, #0
1000f13e:	4b10      	ldr	r3, [pc, #64]	; (1000f180 <at_ble_adv_data_set+0x7c>)
1000f140:	4798      	blx	r3
1000f142:	3572      	adds	r5, #114	; 0x72
1000f144:	702f      	strb	r7, [r5, #0]
1000f146:	1e30      	subs	r0, r6, #0
1000f148:	d012      	beq.n	1000f170 <at_ble_adv_data_set+0x6c>
1000f14a:	4d0b      	ldr	r5, [pc, #44]	; (1000f178 <at_ble_adv_data_set+0x74>)
1000f14c:	480d      	ldr	r0, [pc, #52]	; (1000f184 <at_ble_adv_data_set+0x80>)
1000f14e:	2c00      	cmp	r4, #0
1000f150:	d107      	bne.n	1000f162 <at_ble_adv_data_set+0x5e>
1000f152:	1c21      	adds	r1, r4, #0
1000f154:	221f      	movs	r2, #31
1000f156:	4b09      	ldr	r3, [pc, #36]	; (1000f17c <at_ble_adv_data_set+0x78>)
1000f158:	3573      	adds	r5, #115	; 0x73
1000f15a:	4798      	blx	r3
1000f15c:	702c      	strb	r4, [r5, #0]
1000f15e:	1c20      	adds	r0, r4, #0
1000f160:	e006      	b.n	1000f170 <at_ble_adv_data_set+0x6c>
1000f162:	1c31      	adds	r1, r6, #0
1000f164:	1c22      	adds	r2, r4, #0
1000f166:	4b06      	ldr	r3, [pc, #24]	; (1000f180 <at_ble_adv_data_set+0x7c>)
1000f168:	4798      	blx	r3
1000f16a:	2000      	movs	r0, #0
1000f16c:	3573      	adds	r5, #115	; 0x73
1000f16e:	702c      	strb	r4, [r5, #0]
1000f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f172:	46c0      	nop			; (mov r8, r8)
1000f174:	1001b1ae 	.word	0x1001b1ae
1000f178:	1001b17a 	.word	0x1001b17a
1000f17c:	10015909 	.word	0x10015909
1000f180:	100158f7 	.word	0x100158f7
1000f184:	1001b1cd 	.word	0x1001b1cd

1000f188 <at_ble_adv_start>:
1000f188:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f18a:	b091      	sub	sp, #68	; 0x44
1000f18c:	1c1f      	adds	r7, r3, #0
1000f18e:	ab16      	add	r3, sp, #88	; 0x58
1000f190:	881d      	ldrh	r5, [r3, #0]
1000f192:	ab17      	add	r3, sp, #92	; 0x5c
1000f194:	881b      	ldrh	r3, [r3, #0]
1000f196:	910d      	str	r1, [sp, #52]	; 0x34
1000f198:	930e      	str	r3, [sp, #56]	; 0x38
1000f19a:	ab18      	add	r3, sp, #96	; 0x60
1000f19c:	781b      	ldrb	r3, [r3, #0]
1000f19e:	1c04      	adds	r4, r0, #0
1000f1a0:	930f      	str	r3, [sp, #60]	; 0x3c
1000f1a2:	4b42      	ldr	r3, [pc, #264]	; (1000f2ac <at_ble_adv_start+0x124>)
1000f1a4:	1c16      	adds	r6, r2, #0
1000f1a6:	3373      	adds	r3, #115	; 0x73
1000f1a8:	781b      	ldrb	r3, [r3, #0]
1000f1aa:	20cf      	movs	r0, #207	; 0xcf
1000f1ac:	930c      	str	r3, [sp, #48]	; 0x30
1000f1ae:	2c01      	cmp	r4, #1
1000f1b0:	d103      	bne.n	1000f1ba <at_ble_adv_start+0x32>
1000f1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000f1b4:	2b00      	cmp	r3, #0
1000f1b6:	d176      	bne.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1b8:	e024      	b.n	1000f204 <at_ble_adv_start+0x7c>
1000f1ba:	2c04      	cmp	r4, #4
1000f1bc:	d873      	bhi.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1be:	2380      	movs	r3, #128	; 0x80
1000f1c0:	01db      	lsls	r3, r3, #7
1000f1c2:	429d      	cmp	r5, r3
1000f1c4:	d86f      	bhi.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1c6:	2c00      	cmp	r4, #0
1000f1c8:	d102      	bne.n	1000f1d0 <at_ble_adv_start+0x48>
1000f1ca:	2d1f      	cmp	r5, #31
1000f1cc:	d96b      	bls.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1ce:	e003      	b.n	1000f1d8 <at_ble_adv_start+0x50>
1000f1d0:	2d9f      	cmp	r5, #159	; 0x9f
1000f1d2:	d801      	bhi.n	1000f1d8 <at_ble_adv_start+0x50>
1000f1d4:	2c01      	cmp	r4, #1
1000f1d6:	d166      	bne.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1d8:	2f00      	cmp	r7, #0
1000f1da:	d009      	beq.n	1000f1f0 <at_ble_adv_start+0x68>
1000f1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f1de:	20cf      	movs	r0, #207	; 0xcf
1000f1e0:	3b01      	subs	r3, #1
1000f1e2:	2b01      	cmp	r3, #1
1000f1e4:	d95f      	bls.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f1e6:	2c01      	cmp	r4, #1
1000f1e8:	d102      	bne.n	1000f1f0 <at_ble_adv_start+0x68>
1000f1ea:	2d00      	cmp	r5, #0
1000f1ec:	d100      	bne.n	1000f1f0 <at_ble_adv_start+0x68>
1000f1ee:	3520      	adds	r5, #32
1000f1f0:	4b2f      	ldr	r3, [pc, #188]	; (1000f2b0 <at_ble_adv_start+0x128>)
1000f1f2:	4798      	blx	r3
1000f1f4:	1c01      	adds	r1, r0, #0
1000f1f6:	2e00      	cmp	r6, #0
1000f1f8:	d043      	beq.n	1000f282 <at_ble_adv_start+0xfa>
1000f1fa:	7833      	ldrb	r3, [r6, #0]
1000f1fc:	1e60      	subs	r0, r4, #1
1000f1fe:	2b00      	cmp	r3, #0
1000f200:	d109      	bne.n	1000f216 <at_ble_adv_start+0x8e>
1000f202:	e03b      	b.n	1000f27c <at_ble_adv_start+0xf4>
1000f204:	2380      	movs	r3, #128	; 0x80
1000f206:	01db      	lsls	r3, r3, #7
1000f208:	429d      	cmp	r5, r3
1000f20a:	d84c      	bhi.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f20c:	2e00      	cmp	r6, #0
1000f20e:	d04a      	beq.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f210:	2f00      	cmp	r7, #0
1000f212:	d1e3      	bne.n	1000f1dc <at_ble_adv_start+0x54>
1000f214:	e02b      	b.n	1000f26e <at_ble_adv_start+0xe6>
1000f216:	2301      	movs	r3, #1
1000f218:	2803      	cmp	r0, #3
1000f21a:	d93a      	bls.n	1000f292 <at_ble_adv_start+0x10a>
1000f21c:	200d      	movs	r0, #13
1000f21e:	1c72      	adds	r2, r6, #1
1000f220:	e002      	b.n	1000f228 <at_ble_adv_start+0xa0>
1000f222:	200e      	movs	r0, #14
1000f224:	1e32      	subs	r2, r6, #0
1000f226:	d1fa      	bne.n	1000f21e <at_ble_adv_start+0x96>
1000f228:	4c20      	ldr	r4, [pc, #128]	; (1000f2ac <at_ble_adv_start+0x124>)
1000f22a:	3474      	adds	r4, #116	; 0x74
1000f22c:	7826      	ldrb	r6, [r4, #0]
1000f22e:	2407      	movs	r4, #7
1000f230:	2e00      	cmp	r6, #0
1000f232:	d000      	beq.n	1000f236 <at_ble_adv_start+0xae>
1000f234:	1c34      	adds	r4, r6, #0
1000f236:	9200      	str	r2, [sp, #0]
1000f238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f23a:	9403      	str	r4, [sp, #12]
1000f23c:	9204      	str	r2, [sp, #16]
1000f23e:	4a1b      	ldr	r2, [pc, #108]	; (1000f2ac <at_ble_adv_start+0x124>)
1000f240:	9501      	str	r5, [sp, #4]
1000f242:	9502      	str	r5, [sp, #8]
1000f244:	9705      	str	r7, [sp, #20]
1000f246:	3272      	adds	r2, #114	; 0x72
1000f248:	7812      	ldrb	r2, [r2, #0]
1000f24a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f24c:	9206      	str	r2, [sp, #24]
1000f24e:	4a19      	ldr	r2, [pc, #100]	; (1000f2b4 <at_ble_adv_start+0x12c>)
1000f250:	9207      	str	r2, [sp, #28]
1000f252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f254:	9208      	str	r2, [sp, #32]
1000f256:	4a18      	ldr	r2, [pc, #96]	; (1000f2b8 <at_ble_adv_start+0x130>)
1000f258:	9209      	str	r2, [sp, #36]	; 0x24
1000f25a:	2264      	movs	r2, #100	; 0x64
1000f25c:	4362      	muls	r2, r4
1000f25e:	b292      	uxth	r2, r2
1000f260:	920a      	str	r2, [sp, #40]	; 0x28
1000f262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f264:	4c15      	ldr	r4, [pc, #84]	; (1000f2bc <at_ble_adv_start+0x134>)
1000f266:	920b      	str	r2, [sp, #44]	; 0x2c
1000f268:	4a15      	ldr	r2, [pc, #84]	; (1000f2c0 <at_ble_adv_start+0x138>)
1000f26a:	47a0      	blx	r4
1000f26c:	e01b      	b.n	1000f2a6 <at_ble_adv_start+0x11e>
1000f26e:	2d00      	cmp	r5, #0
1000f270:	d1be      	bne.n	1000f1f0 <at_ble_adv_start+0x68>
1000f272:	4b0f      	ldr	r3, [pc, #60]	; (1000f2b0 <at_ble_adv_start+0x128>)
1000f274:	4798      	blx	r3
1000f276:	2520      	movs	r5, #32
1000f278:	1c01      	adds	r1, r0, #0
1000f27a:	e7be      	b.n	1000f1fa <at_ble_adv_start+0x72>
1000f27c:	2803      	cmp	r0, #3
1000f27e:	d8cd      	bhi.n	1000f21c <at_ble_adv_start+0x94>
1000f280:	e006      	b.n	1000f290 <at_ble_adv_start+0x108>
1000f282:	1e60      	subs	r0, r4, #1
1000f284:	2803      	cmp	r0, #3
1000f286:	d903      	bls.n	1000f290 <at_ble_adv_start+0x108>
1000f288:	1c33      	adds	r3, r6, #0
1000f28a:	200d      	movs	r0, #13
1000f28c:	1c32      	adds	r2, r6, #0
1000f28e:	e7cb      	b.n	1000f228 <at_ble_adv_start+0xa0>
1000f290:	2300      	movs	r3, #0
1000f292:	f003 fc8f 	bl	10012bb4 <__gnu_thumb1_case_sqi>
1000f296:	06c6      	.short	0x06c6
1000f298:	0204      	.short	0x0204
1000f29a:	200f      	movs	r0, #15
1000f29c:	e7c2      	b.n	1000f224 <at_ble_adv_start+0x9c>
1000f29e:	2200      	movs	r2, #0
1000f2a0:	920c      	str	r2, [sp, #48]	; 0x30
1000f2a2:	200c      	movs	r0, #12
1000f2a4:	e7be      	b.n	1000f224 <at_ble_adv_start+0x9c>
1000f2a6:	b011      	add	sp, #68	; 0x44
1000f2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2aa:	46c0      	nop			; (mov r8, r8)
1000f2ac:	1001b17a 	.word	0x1001b17a
1000f2b0:	1001113d 	.word	0x1001113d
1000f2b4:	1001b1ae 	.word	0x1001b1ae
1000f2b8:	1001b1cd 	.word	0x1001b1cd
1000f2bc:	1001101d 	.word	0x1001101d
1000f2c0:	00003a98 	.word	0x00003a98

1000f2c4 <at_ble_adv_stop>:
1000f2c4:	b508      	push	{r3, lr}
1000f2c6:	4b01      	ldr	r3, [pc, #4]	; (1000f2cc <at_ble_adv_stop+0x8>)
1000f2c8:	4798      	blx	r3
1000f2ca:	bd08      	pop	{r3, pc}
1000f2cc:	10010e49 	.word	0x10010e49

1000f2d0 <at_ble_scan_stop>:
1000f2d0:	b510      	push	{r4, lr}
1000f2d2:	4b05      	ldr	r3, [pc, #20]	; (1000f2e8 <at_ble_scan_stop+0x18>)
1000f2d4:	4798      	blx	r3
1000f2d6:	1e04      	subs	r4, r0, #0
1000f2d8:	d103      	bne.n	1000f2e2 <at_ble_scan_stop+0x12>
1000f2da:	20d1      	movs	r0, #209	; 0xd1
1000f2dc:	4b03      	ldr	r3, [pc, #12]	; (1000f2ec <at_ble_scan_stop+0x1c>)
1000f2de:	0100      	lsls	r0, r0, #4
1000f2e0:	4798      	blx	r3
1000f2e2:	1c20      	adds	r0, r4, #0
1000f2e4:	bd10      	pop	{r4, pc}
1000f2e6:	46c0      	nop			; (mov r8, r8)
1000f2e8:	10010e49 	.word	0x10010e49
1000f2ec:	1000ed7d 	.word	0x1000ed7d

1000f2f0 <at_ble_disconnect>:
1000f2f0:	b538      	push	{r3, r4, r5, lr}
1000f2f2:	1c04      	adds	r4, r0, #0
1000f2f4:	4b04      	ldr	r3, [pc, #16]	; (1000f308 <at_ble_disconnect+0x18>)
1000f2f6:	1c08      	adds	r0, r1, #0
1000f2f8:	1c21      	adds	r1, r4, #0
1000f2fa:	4798      	blx	r3
1000f2fc:	1c05      	adds	r5, r0, #0
1000f2fe:	4b03      	ldr	r3, [pc, #12]	; (1000f30c <at_ble_disconnect+0x1c>)
1000f300:	1c20      	adds	r0, r4, #0
1000f302:	4798      	blx	r3
1000f304:	1c28      	adds	r0, r5, #0
1000f306:	bd38      	pop	{r3, r4, r5, pc}
1000f308:	100104c1 	.word	0x100104c1
1000f30c:	1000edc1 	.word	0x1000edc1

1000f310 <at_ble_conn_update_reply>:
1000f310:	b510      	push	{r4, lr}
1000f312:	4c01      	ldr	r4, [pc, #4]	; (1000f318 <at_ble_conn_update_reply+0x8>)
1000f314:	47a0      	blx	r4
1000f316:	bd10      	pop	{r4, pc}
1000f318:	100109b1 	.word	0x100109b1

1000f31c <at_ble_random_address_resolve>:
1000f31c:	b510      	push	{r4, lr}
1000f31e:	23cf      	movs	r3, #207	; 0xcf
1000f320:	2800      	cmp	r0, #0
1000f322:	d00a      	beq.n	1000f33a <at_ble_random_address_resolve+0x1e>
1000f324:	2900      	cmp	r1, #0
1000f326:	d008      	beq.n	1000f33a <at_ble_random_address_resolve+0x1e>
1000f328:	2a00      	cmp	r2, #0
1000f32a:	d006      	beq.n	1000f33a <at_ble_random_address_resolve+0x1e>
1000f32c:	780c      	ldrb	r4, [r1, #0]
1000f32e:	2c02      	cmp	r4, #2
1000f330:	d103      	bne.n	1000f33a <at_ble_random_address_resolve+0x1e>
1000f332:	4b03      	ldr	r3, [pc, #12]	; (1000f340 <at_ble_random_address_resolve+0x24>)
1000f334:	3101      	adds	r1, #1
1000f336:	4798      	blx	r3
1000f338:	2300      	movs	r3, #0
1000f33a:	1c18      	adds	r0, r3, #0
1000f33c:	bd10      	pop	{r4, pc}
1000f33e:	46c0      	nop			; (mov r8, r8)
1000f340:	100111dd 	.word	0x100111dd

1000f344 <at_ble_uuid_type2len>:
1000f344:	23cf      	movs	r3, #207	; 0xcf
1000f346:	2802      	cmp	r0, #2
1000f348:	d801      	bhi.n	1000f34e <at_ble_uuid_type2len+0xa>
1000f34a:	4b02      	ldr	r3, [pc, #8]	; (1000f354 <at_ble_uuid_type2len+0x10>)
1000f34c:	5c1b      	ldrb	r3, [r3, r0]
1000f34e:	1c18      	adds	r0, r3, #0
1000f350:	4770      	bx	lr
1000f352:	46c0      	nop			; (mov r8, r8)
1000f354:	100184c6 	.word	0x100184c6

1000f358 <at_ble_uuid_len2type>:
1000f358:	1e83      	subs	r3, r0, #2
1000f35a:	b2db      	uxtb	r3, r3
1000f35c:	2003      	movs	r0, #3
1000f35e:	2b0e      	cmp	r3, #14
1000f360:	d801      	bhi.n	1000f366 <at_ble_uuid_len2type+0xe>
1000f362:	4a01      	ldr	r2, [pc, #4]	; (1000f368 <at_ble_uuid_len2type+0x10>)
1000f364:	5cd0      	ldrb	r0, [r2, r3]
1000f366:	4770      	bx	lr
1000f368:	100184c9 	.word	0x100184c9

1000f36c <init_gatt_client_module>:
1000f36c:	2200      	movs	r2, #0
1000f36e:	4b01      	ldr	r3, [pc, #4]	; (1000f374 <init_gatt_client_module+0x8>)
1000f370:	801a      	strh	r2, [r3, #0]
1000f372:	4770      	bx	lr
1000f374:	1001a17c 	.word	0x1001a17c

1000f378 <db_searchATT>:
1000f378:	b570      	push	{r4, r5, r6, lr}
1000f37a:	1c05      	adds	r5, r0, #0
1000f37c:	2400      	movs	r4, #0
1000f37e:	4b0c      	ldr	r3, [pc, #48]	; (1000f3b0 <db_searchATT+0x38>)
1000f380:	6819      	ldr	r1, [r3, #0]
1000f382:	4b0c      	ldr	r3, [pc, #48]	; (1000f3b4 <db_searchATT+0x3c>)
1000f384:	681e      	ldr	r6, [r3, #0]
1000f386:	428c      	cmp	r4, r1
1000f388:	dc10      	bgt.n	1000f3ac <db_searchATT+0x34>
1000f38a:	200c      	movs	r0, #12
1000f38c:	1863      	adds	r3, r4, r1
1000f38e:	0fda      	lsrs	r2, r3, #31
1000f390:	18d3      	adds	r3, r2, r3
1000f392:	1c02      	adds	r2, r0, #0
1000f394:	105b      	asrs	r3, r3, #1
1000f396:	435a      	muls	r2, r3
1000f398:	18b0      	adds	r0, r6, r2
1000f39a:	8802      	ldrh	r2, [r0, #0]
1000f39c:	42aa      	cmp	r2, r5
1000f39e:	d201      	bcs.n	1000f3a4 <db_searchATT+0x2c>
1000f3a0:	1e59      	subs	r1, r3, #1
1000f3a2:	e7f0      	b.n	1000f386 <db_searchATT+0xe>
1000f3a4:	42aa      	cmp	r2, r5
1000f3a6:	d902      	bls.n	1000f3ae <db_searchATT+0x36>
1000f3a8:	1c5c      	adds	r4, r3, #1
1000f3aa:	e7ec      	b.n	1000f386 <db_searchATT+0xe>
1000f3ac:	2000      	movs	r0, #0
1000f3ae:	bd70      	pop	{r4, r5, r6, pc}
1000f3b0:	1001a190 	.word	0x1001a190
1000f3b4:	1001a188 	.word	0x1001a188

1000f3b8 <att_permissions>:
1000f3b8:	b530      	push	{r4, r5, lr}
1000f3ba:	2403      	movs	r4, #3
1000f3bc:	1c05      	adds	r5, r0, #0
1000f3be:	2301      	movs	r3, #1
1000f3c0:	4025      	ands	r5, r4
1000f3c2:	42a5      	cmp	r5, r4
1000f3c4:	d009      	beq.n	1000f3da <att_permissions+0x22>
1000f3c6:	1c23      	adds	r3, r4, #0
1000f3c8:	1924      	adds	r4, r4, r4
1000f3ca:	4220      	tst	r0, r4
1000f3cc:	d105      	bne.n	1000f3da <att_permissions+0x22>
1000f3ce:	3b02      	subs	r3, #2
1000f3d0:	4218      	tst	r0, r3
1000f3d2:	d102      	bne.n	1000f3da <att_permissions+0x22>
1000f3d4:	1e4b      	subs	r3, r1, #1
1000f3d6:	4199      	sbcs	r1, r3
1000f3d8:	b28b      	uxth	r3, r1
1000f3da:	2130      	movs	r1, #48	; 0x30
1000f3dc:	4001      	ands	r1, r0
1000f3de:	2930      	cmp	r1, #48	; 0x30
1000f3e0:	d007      	beq.n	1000f3f2 <att_permissions+0x3a>
1000f3e2:	0641      	lsls	r1, r0, #25
1000f3e4:	d401      	bmi.n	1000f3ea <att_permissions+0x32>
1000f3e6:	0681      	lsls	r1, r0, #26
1000f3e8:	d501      	bpl.n	1000f3ee <att_permissions+0x36>
1000f3ea:	4807      	ldr	r0, [pc, #28]	; (1000f408 <att_permissions+0x50>)
1000f3ec:	e009      	b.n	1000f402 <att_permissions+0x4a>
1000f3ee:	06c1      	lsls	r1, r0, #27
1000f3f0:	d501      	bpl.n	1000f3f6 <att_permissions+0x3e>
1000f3f2:	4806      	ldr	r0, [pc, #24]	; (1000f40c <att_permissions+0x54>)
1000f3f4:	e005      	b.n	1000f402 <att_permissions+0x4a>
1000f3f6:	2a00      	cmp	r2, #0
1000f3f8:	d001      	beq.n	1000f3fe <att_permissions+0x46>
1000f3fa:	2204      	movs	r2, #4
1000f3fc:	4313      	orrs	r3, r2
1000f3fe:	2080      	movs	r0, #128	; 0x80
1000f400:	0180      	lsls	r0, r0, #6
1000f402:	4318      	orrs	r0, r3
1000f404:	bd30      	pop	{r4, r5, pc}
1000f406:	46c0      	nop			; (mov r8, r8)
1000f408:	0000200c 	.word	0x0000200c
1000f40c:	00002004 	.word	0x00002004

1000f410 <char_permissions>:
1000f410:	b530      	push	{r4, r5, lr}
1000f412:	2300      	movs	r3, #0
1000f414:	0784      	lsls	r4, r0, #30
1000f416:	d503      	bpl.n	1000f420 <char_permissions+0x10>
1000f418:	3301      	adds	r3, #1
1000f41a:	4219      	tst	r1, r3
1000f41c:	d100      	bne.n	1000f420 <char_permissions+0x10>
1000f41e:	3302      	adds	r3, #2
1000f420:	0704      	lsls	r4, r0, #28
1000f422:	d508      	bpl.n	1000f436 <char_permissions+0x26>
1000f424:	06cc      	lsls	r4, r1, #27
1000f426:	d501      	bpl.n	1000f42c <char_permissions+0x1c>
1000f428:	2404      	movs	r4, #4
1000f42a:	e000      	b.n	1000f42e <char_permissions+0x1e>
1000f42c:	240c      	movs	r4, #12
1000f42e:	4323      	orrs	r3, r4
1000f430:	2480      	movs	r4, #128	; 0x80
1000f432:	01a4      	lsls	r4, r4, #6
1000f434:	4323      	orrs	r3, r4
1000f436:	0684      	lsls	r4, r0, #26
1000f438:	d506      	bpl.n	1000f448 <char_permissions+0x38>
1000f43a:	2406      	movs	r4, #6
1000f43c:	4221      	tst	r1, r4
1000f43e:	d101      	bne.n	1000f444 <char_permissions+0x34>
1000f440:	340a      	adds	r4, #10
1000f442:	e000      	b.n	1000f446 <char_permissions+0x36>
1000f444:	2430      	movs	r4, #48	; 0x30
1000f446:	4323      	orrs	r3, r4
1000f448:	06c4      	lsls	r4, r0, #27
1000f44a:	d506      	bpl.n	1000f45a <char_permissions+0x4a>
1000f44c:	2406      	movs	r4, #6
1000f44e:	4221      	tst	r1, r4
1000f450:	d101      	bne.n	1000f456 <char_permissions+0x46>
1000f452:	343a      	adds	r4, #58	; 0x3a
1000f454:	e000      	b.n	1000f458 <char_permissions+0x48>
1000f456:	24c0      	movs	r4, #192	; 0xc0
1000f458:	4323      	orrs	r3, r4
1000f45a:	2480      	movs	r4, #128	; 0x80
1000f45c:	0064      	lsls	r4, r4, #1
1000f45e:	4220      	tst	r0, r4
1000f460:	d000      	beq.n	1000f464 <char_permissions+0x54>
1000f462:	4323      	orrs	r3, r4
1000f464:	07c4      	lsls	r4, r0, #31
1000f466:	d502      	bpl.n	1000f46e <char_permissions+0x5e>
1000f468:	2480      	movs	r4, #128	; 0x80
1000f46a:	00a4      	lsls	r4, r4, #2
1000f46c:	4323      	orrs	r3, r4
1000f46e:	2404      	movs	r4, #4
1000f470:	4220      	tst	r0, r4
1000f472:	d006      	beq.n	1000f482 <char_permissions+0x72>
1000f474:	06cd      	lsls	r5, r1, #27
1000f476:	d400      	bmi.n	1000f47a <char_permissions+0x6a>
1000f478:	240c      	movs	r4, #12
1000f47a:	4323      	orrs	r3, r4
1000f47c:	2480      	movs	r4, #128	; 0x80
1000f47e:	0124      	lsls	r4, r4, #4
1000f480:	4323      	orrs	r3, r4
1000f482:	0644      	lsls	r4, r0, #25
1000f484:	d501      	bpl.n	1000f48a <char_permissions+0x7a>
1000f486:	4c08      	ldr	r4, [pc, #32]	; (1000f4a8 <char_permissions+0x98>)
1000f488:	4323      	orrs	r3, r4
1000f48a:	0600      	lsls	r0, r0, #24
1000f48c:	d507      	bpl.n	1000f49e <char_permissions+0x8e>
1000f48e:	2004      	movs	r0, #4
1000f490:	06c9      	lsls	r1, r1, #27
1000f492:	d400      	bmi.n	1000f496 <char_permissions+0x86>
1000f494:	200c      	movs	r0, #12
1000f496:	4303      	orrs	r3, r0
1000f498:	2084      	movs	r0, #132	; 0x84
1000f49a:	0180      	lsls	r0, r0, #6
1000f49c:	4303      	orrs	r3, r0
1000f49e:	0390      	lsls	r0, r2, #14
1000f4a0:	4303      	orrs	r3, r0
1000f4a2:	b298      	uxth	r0, r3
1000f4a4:	bd30      	pop	{r4, r5, pc}
1000f4a6:	46c0      	nop			; (mov r8, r8)
1000f4a8:	00001004 	.word	0x00001004

1000f4ac <presentation_format_define>:
1000f4ac:	b507      	push	{r0, r1, r2, lr}
1000f4ae:	466a      	mov	r2, sp
1000f4b0:	780b      	ldrb	r3, [r1, #0]
1000f4b2:	7013      	strb	r3, [r2, #0]
1000f4b4:	784b      	ldrb	r3, [r1, #1]
1000f4b6:	7053      	strb	r3, [r2, #1]
1000f4b8:	884b      	ldrh	r3, [r1, #2]
1000f4ba:	7093      	strb	r3, [r2, #2]
1000f4bc:	0a1b      	lsrs	r3, r3, #8
1000f4be:	70d3      	strb	r3, [r2, #3]
1000f4c0:	790b      	ldrb	r3, [r1, #4]
1000f4c2:	7113      	strb	r3, [r2, #4]
1000f4c4:	88cb      	ldrh	r3, [r1, #6]
1000f4c6:	2107      	movs	r1, #7
1000f4c8:	7153      	strb	r3, [r2, #5]
1000f4ca:	0a1b      	lsrs	r3, r3, #8
1000f4cc:	7193      	strb	r3, [r2, #6]
1000f4ce:	4b01      	ldr	r3, [pc, #4]	; (1000f4d4 <presentation_format_define+0x28>)
1000f4d0:	4798      	blx	r3
1000f4d2:	bd0e      	pop	{r1, r2, r3, pc}
1000f4d4:	10011841 	.word	0x10011841

1000f4d8 <db_addATT>:
1000f4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f4da:	4c29      	ldr	r4, [pc, #164]	; (1000f580 <db_addATT+0xa8>)
1000f4dc:	1c1d      	adds	r5, r3, #0
1000f4de:	6823      	ldr	r3, [r4, #0]
1000f4e0:	9001      	str	r0, [sp, #4]
1000f4e2:	26d3      	movs	r6, #211	; 0xd3
1000f4e4:	2b00      	cmp	r3, #0
1000f4e6:	d048      	beq.n	1000f57a <db_addATT+0xa2>
1000f4e8:	1c1e      	adds	r6, r3, #0
1000f4ea:	3e0c      	subs	r6, #12
1000f4ec:	6026      	str	r6, [r4, #0]
1000f4ee:	2900      	cmp	r1, #0
1000f4f0:	d005      	beq.n	1000f4fe <db_addATT+0x26>
1000f4f2:	4f24      	ldr	r7, [pc, #144]	; (1000f584 <db_addATT+0xac>)
1000f4f4:	46bc      	mov	ip, r7
1000f4f6:	4660      	mov	r0, ip
1000f4f8:	683f      	ldr	r7, [r7, #0]
1000f4fa:	18bf      	adds	r7, r7, r2
1000f4fc:	6007      	str	r7, [r0, #0]
1000f4fe:	4821      	ldr	r0, [pc, #132]	; (1000f584 <db_addATT+0xac>)
1000f500:	6807      	ldr	r7, [r0, #0]
1000f502:	4684      	mov	ip, r0
1000f504:	42be      	cmp	r6, r7
1000f506:	d932      	bls.n	1000f56e <db_addATT+0x96>
1000f508:	4668      	mov	r0, sp
1000f50a:	8880      	ldrh	r0, [r0, #4]
1000f50c:	3b0c      	subs	r3, #12
1000f50e:	8018      	strh	r0, [r3, #0]
1000f510:	6823      	ldr	r3, [r4, #0]
1000f512:	2900      	cmp	r1, #0
1000f514:	d009      	beq.n	1000f52a <db_addATT+0x52>
1000f516:	2a00      	cmp	r2, #0
1000f518:	d007      	beq.n	1000f52a <db_addATT+0x52>
1000f51a:	4660      	mov	r0, ip
1000f51c:	6800      	ldr	r0, [r0, #0]
1000f51e:	809a      	strh	r2, [r3, #4]
1000f520:	1a80      	subs	r0, r0, r2
1000f522:	6098      	str	r0, [r3, #8]
1000f524:	4b18      	ldr	r3, [pc, #96]	; (1000f588 <db_addATT+0xb0>)
1000f526:	4798      	blx	r3
1000f528:	e002      	b.n	1000f530 <db_addATT+0x58>
1000f52a:	2100      	movs	r1, #0
1000f52c:	809a      	strh	r2, [r3, #4]
1000f52e:	6099      	str	r1, [r3, #8]
1000f530:	2300      	movs	r3, #0
1000f532:	6822      	ldr	r2, [r4, #0]
1000f534:	7093      	strb	r3, [r2, #2]
1000f536:	3303      	adds	r3, #3
1000f538:	402b      	ands	r3, r5
1000f53a:	2b03      	cmp	r3, #3
1000f53c:	d001      	beq.n	1000f542 <db_addATT+0x6a>
1000f53e:	076b      	lsls	r3, r5, #29
1000f540:	d504      	bpl.n	1000f54c <db_addATT+0x74>
1000f542:	2101      	movs	r1, #1
1000f544:	6822      	ldr	r2, [r4, #0]
1000f546:	7893      	ldrb	r3, [r2, #2]
1000f548:	430b      	orrs	r3, r1
1000f54a:	7093      	strb	r3, [r2, #2]
1000f54c:	2330      	movs	r3, #48	; 0x30
1000f54e:	402b      	ands	r3, r5
1000f550:	2b30      	cmp	r3, #48	; 0x30
1000f552:	d001      	beq.n	1000f558 <db_addATT+0x80>
1000f554:	066b      	lsls	r3, r5, #25
1000f556:	d504      	bpl.n	1000f562 <db_addATT+0x8a>
1000f558:	2102      	movs	r1, #2
1000f55a:	6822      	ldr	r2, [r4, #0]
1000f55c:	7893      	ldrb	r3, [r2, #2]
1000f55e:	430b      	orrs	r3, r1
1000f560:	7093      	strb	r3, [r2, #2]
1000f562:	4a0a      	ldr	r2, [pc, #40]	; (1000f58c <db_addATT+0xb4>)
1000f564:	2600      	movs	r6, #0
1000f566:	6813      	ldr	r3, [r2, #0]
1000f568:	3301      	adds	r3, #1
1000f56a:	6013      	str	r3, [r2, #0]
1000f56c:	e005      	b.n	1000f57a <db_addATT+0xa2>
1000f56e:	6023      	str	r3, [r4, #0]
1000f570:	2611      	movs	r6, #17
1000f572:	2900      	cmp	r1, #0
1000f574:	d001      	beq.n	1000f57a <db_addATT+0xa2>
1000f576:	1aba      	subs	r2, r7, r2
1000f578:	6002      	str	r2, [r0, #0]
1000f57a:	1c30      	adds	r0, r6, #0
1000f57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f57e:	46c0      	nop			; (mov r8, r8)
1000f580:	1001a188 	.word	0x1001a188
1000f584:	1001a18c 	.word	0x1001a18c
1000f588:	100158f7 	.word	0x100158f7
1000f58c:	1001a190 	.word	0x1001a190

1000f590 <user_description_define>:
1000f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f592:	1c05      	adds	r5, r0, #0
1000f594:	20cf      	movs	r0, #207	; 0xcf
1000f596:	2a00      	cmp	r2, #0
1000f598:	d01c      	beq.n	1000f5d4 <user_description_define+0x44>
1000f59a:	1c14      	adds	r4, r2, #0
1000f59c:	2203      	movs	r2, #3
1000f59e:	1c1e      	adds	r6, r3, #0
1000f5a0:	400a      	ands	r2, r1
1000f5a2:	1c0b      	adds	r3, r1, #0
1000f5a4:	3a03      	subs	r2, #3
1000f5a6:	4251      	negs	r1, r2
1000f5a8:	4151      	adcs	r1, r2
1000f5aa:	075a      	lsls	r2, r3, #29
1000f5ac:	0fd2      	lsrs	r2, r2, #31
1000f5ae:	430a      	orrs	r2, r1
1000f5b0:	03d2      	lsls	r2, r2, #15
1000f5b2:	4f09      	ldr	r7, [pc, #36]	; (1000f5d8 <user_description_define+0x48>)
1000f5b4:	1c28      	adds	r0, r5, #0
1000f5b6:	2a00      	cmp	r2, #0
1000f5b8:	d003      	beq.n	1000f5c2 <user_description_define+0x32>
1000f5ba:	1c21      	adds	r1, r4, #0
1000f5bc:	1c32      	adds	r2, r6, #0
1000f5be:	47b8      	blx	r7
1000f5c0:	e008      	b.n	1000f5d4 <user_description_define+0x44>
1000f5c2:	1c11      	adds	r1, r2, #0
1000f5c4:	47b8      	blx	r7
1000f5c6:	2800      	cmp	r0, #0
1000f5c8:	d104      	bne.n	1000f5d4 <user_description_define+0x44>
1000f5ca:	1c28      	adds	r0, r5, #0
1000f5cc:	1c31      	adds	r1, r6, #0
1000f5ce:	1c22      	adds	r2, r4, #0
1000f5d0:	4b02      	ldr	r3, [pc, #8]	; (1000f5dc <user_description_define+0x4c>)
1000f5d2:	4798      	blx	r3
1000f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f5d6:	46c0      	nop			; (mov r8, r8)
1000f5d8:	1000f4d9 	.word	0x1000f4d9
1000f5dc:	10011841 	.word	0x10011841

1000f5e0 <at_ble_read_authorize_reply.part.1>:
1000f5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f5e2:	4b09      	ldr	r3, [pc, #36]	; (1000f608 <at_ble_read_authorize_reply.part.1+0x28>)
1000f5e4:	1c05      	adds	r5, r0, #0
1000f5e6:	1c08      	adds	r0, r1, #0
1000f5e8:	1c0c      	adds	r4, r1, #0
1000f5ea:	4798      	blx	r3
1000f5ec:	2800      	cmp	r0, #0
1000f5ee:	d009      	beq.n	1000f604 <at_ble_read_authorize_reply.part.1+0x24>
1000f5f0:	6882      	ldr	r2, [r0, #8]
1000f5f2:	2a00      	cmp	r2, #0
1000f5f4:	d006      	beq.n	1000f604 <at_ble_read_authorize_reply.part.1+0x24>
1000f5f6:	8883      	ldrh	r3, [r0, #4]
1000f5f8:	1c29      	adds	r1, r5, #0
1000f5fa:	9200      	str	r2, [sp, #0]
1000f5fc:	1c20      	adds	r0, r4, #0
1000f5fe:	2200      	movs	r2, #0
1000f600:	4c02      	ldr	r4, [pc, #8]	; (1000f60c <at_ble_read_authorize_reply.part.1+0x2c>)
1000f602:	47a0      	blx	r4
1000f604:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f606:	46c0      	nop			; (mov r8, r8)
1000f608:	1000f379 	.word	0x1000f379
1000f60c:	100112d9 	.word	0x100112d9

1000f610 <internal_at_ble_service_define>:
1000f610:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f612:	b08b      	sub	sp, #44	; 0x2c
1000f614:	9306      	str	r3, [sp, #24]
1000f616:	ab10      	add	r3, sp, #64	; 0x40
1000f618:	9202      	str	r2, [sp, #8]
1000f61a:	cb04      	ldmia	r3!, {r2}
1000f61c:	1c05      	adds	r5, r0, #0
1000f61e:	881b      	ldrh	r3, [r3, #0]
1000f620:	9105      	str	r1, [sp, #20]
1000f622:	9303      	str	r3, [sp, #12]
1000f624:	ab12      	add	r3, sp, #72	; 0x48
1000f626:	781b      	ldrb	r3, [r3, #0]
1000f628:	20cf      	movs	r0, #207	; 0xcf
1000f62a:	9304      	str	r3, [sp, #16]
1000f62c:	2d00      	cmp	r5, #0
1000f62e:	d100      	bne.n	1000f632 <internal_at_ble_service_define+0x22>
1000f630:	e1ca      	b.n	1000f9c8 <internal_at_ble_service_define+0x3b8>
1000f632:	2900      	cmp	r1, #0
1000f634:	d100      	bne.n	1000f638 <internal_at_ble_service_define+0x28>
1000f636:	e1c7      	b.n	1000f9c8 <internal_at_ble_service_define+0x3b8>
1000f638:	2a00      	cmp	r2, #0
1000f63a:	d100      	bne.n	1000f63e <internal_at_ble_service_define+0x2e>
1000f63c:	e1c4      	b.n	1000f9c8 <internal_at_ble_service_define+0x3b8>
1000f63e:	9b03      	ldr	r3, [sp, #12]
1000f640:	2b00      	cmp	r3, #0
1000f642:	d100      	bne.n	1000f646 <internal_at_ble_service_define+0x36>
1000f644:	e1c0      	b.n	1000f9c8 <internal_at_ble_service_define+0x3b8>
1000f646:	4bc9      	ldr	r3, [pc, #804]	; (1000f96c <internal_at_ble_service_define+0x35c>)
1000f648:	3004      	adds	r0, #4
1000f64a:	681e      	ldr	r6, [r3, #0]
1000f64c:	2e00      	cmp	r6, #0
1000f64e:	d100      	bne.n	1000f652 <internal_at_ble_service_define+0x42>
1000f650:	e1ba      	b.n	1000f9c8 <internal_at_ble_service_define+0x3b8>
1000f652:	2400      	movs	r4, #0
1000f654:	4bc6      	ldr	r3, [pc, #792]	; (1000f970 <internal_at_ble_service_define+0x360>)
1000f656:	8034      	strh	r4, [r6, #0]
1000f658:	881b      	ldrh	r3, [r3, #0]
1000f65a:	1db7      	adds	r7, r6, #6
1000f65c:	1c21      	adds	r1, r4, #0
1000f65e:	2210      	movs	r2, #16
1000f660:	8073      	strh	r3, [r6, #2]
1000f662:	1c38      	adds	r0, r7, #0
1000f664:	4bc3      	ldr	r3, [pc, #780]	; (1000f974 <internal_at_ble_service_define+0x364>)
1000f666:	4798      	blx	r3
1000f668:	7828      	ldrb	r0, [r5, #0]
1000f66a:	4bc3      	ldr	r3, [pc, #780]	; (1000f978 <internal_at_ble_service_define+0x368>)
1000f66c:	4798      	blx	r3
1000f66e:	1c69      	adds	r1, r5, #1
1000f670:	1c02      	adds	r2, r0, #0
1000f672:	4bc2      	ldr	r3, [pc, #776]	; (1000f97c <internal_at_ble_service_define+0x36c>)
1000f674:	1c38      	adds	r0, r7, #0
1000f676:	4798      	blx	r3
1000f678:	2204      	movs	r2, #4
1000f67a:	782b      	ldrb	r3, [r5, #0]
1000f67c:	9d02      	ldr	r5, [sp, #8]
1000f67e:	011b      	lsls	r3, r3, #4
1000f680:	4313      	orrs	r3, r2
1000f682:	9a04      	ldr	r2, [sp, #16]
1000f684:	7174      	strb	r4, [r6, #5]
1000f686:	0192      	lsls	r2, r2, #6
1000f688:	4313      	orrs	r3, r2
1000f68a:	7133      	strb	r3, [r6, #4]
1000f68c:	2316      	movs	r3, #22
1000f68e:	9a06      	ldr	r2, [sp, #24]
1000f690:	3512      	adds	r5, #18
1000f692:	4353      	muls	r3, r2
1000f694:	9a02      	ldr	r2, [sp, #8]
1000f696:	3312      	adds	r3, #18
1000f698:	18d7      	adds	r7, r2, r3
1000f69a:	42bd      	cmp	r5, r7
1000f69c:	d00f      	beq.n	1000f6be <internal_at_ble_service_define+0xae>
1000f69e:	4bb8      	ldr	r3, [pc, #736]	; (1000f980 <internal_at_ble_service_define+0x370>)
1000f6a0:	8829      	ldrh	r1, [r5, #0]
1000f6a2:	9300      	str	r3, [sp, #0]
1000f6a4:	230e      	movs	r3, #14
1000f6a6:	aa06      	add	r2, sp, #24
1000f6a8:	189b      	adds	r3, r3, r2
1000f6aa:	9301      	str	r3, [sp, #4]
1000f6ac:	4cb5      	ldr	r4, [pc, #724]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f6ae:	1c30      	adds	r0, r6, #0
1000f6b0:	2201      	movs	r2, #1
1000f6b2:	2302      	movs	r3, #2
1000f6b4:	47a0      	blx	r4
1000f6b6:	3516      	adds	r5, #22
1000f6b8:	1e04      	subs	r4, r0, #0
1000f6ba:	d0ee      	beq.n	1000f69a <internal_at_ble_service_define+0x8a>
1000f6bc:	e183      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f6be:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f6c0:	2300      	movs	r3, #0
1000f6c2:	3714      	adds	r7, #20
1000f6c4:	1c3d      	adds	r5, r7, #0
1000f6c6:	9302      	str	r3, [sp, #8]
1000f6c8:	9b02      	ldr	r3, [sp, #8]
1000f6ca:	9a03      	ldr	r2, [sp, #12]
1000f6cc:	4293      	cmp	r3, r2
1000f6ce:	db00      	blt.n	1000f6d2 <internal_at_ble_service_define+0xc2>
1000f6d0:	e0bf      	b.n	1000f852 <internal_at_ble_service_define+0x242>
1000f6d2:	4bad      	ldr	r3, [pc, #692]	; (1000f988 <internal_at_ble_service_define+0x378>)
1000f6d4:	aa06      	add	r2, sp, #24
1000f6d6:	9300      	str	r3, [sp, #0]
1000f6d8:	230e      	movs	r3, #14
1000f6da:	189b      	adds	r3, r3, r2
1000f6dc:	9301      	str	r3, [sp, #4]
1000f6de:	4ca9      	ldr	r4, [pc, #676]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f6e0:	1c30      	adds	r0, r6, #0
1000f6e2:	2104      	movs	r1, #4
1000f6e4:	2201      	movs	r2, #1
1000f6e6:	2302      	movs	r3, #2
1000f6e8:	47a0      	blx	r4
1000f6ea:	1e04      	subs	r4, r0, #0
1000f6ec:	d000      	beq.n	1000f6f0 <internal_at_ble_service_define+0xe0>
1000f6ee:	e16a      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f6f0:	1c2b      	adds	r3, r5, #0
1000f6f2:	3b12      	subs	r3, #18
1000f6f4:	7b2c      	ldrb	r4, [r5, #12]
1000f6f6:	781b      	ldrb	r3, [r3, #0]
1000f6f8:	1c21      	adds	r1, r4, #0
1000f6fa:	1c1a      	adds	r2, r3, #0
1000f6fc:	9304      	str	r3, [sp, #16]
1000f6fe:	8828      	ldrh	r0, [r5, #0]
1000f700:	4ba2      	ldr	r3, [pc, #648]	; (1000f98c <internal_at_ble_service_define+0x37c>)
1000f702:	4798      	blx	r3
1000f704:	2303      	movs	r3, #3
1000f706:	4023      	ands	r3, r4
1000f708:	3b03      	subs	r3, #3
1000f70a:	4259      	negs	r1, r3
1000f70c:	4159      	adcs	r1, r3
1000f70e:	2301      	movs	r3, #1
1000f710:	08a4      	lsrs	r4, r4, #2
1000f712:	401c      	ands	r4, r3
1000f714:	430c      	orrs	r4, r1
1000f716:	896b      	ldrh	r3, [r5, #10]
1000f718:	03e4      	lsls	r4, r4, #15
1000f71a:	431c      	orrs	r4, r3
1000f71c:	9007      	str	r0, [sp, #28]
1000f71e:	4b96      	ldr	r3, [pc, #600]	; (1000f978 <internal_at_ble_service_define+0x368>)
1000f720:	9804      	ldr	r0, [sp, #16]
1000f722:	4798      	blx	r3
1000f724:	1c2a      	adds	r2, r5, #0
1000f726:	3a11      	subs	r2, #17
1000f728:	9200      	str	r2, [sp, #0]
1000f72a:	3a03      	subs	r2, #3
1000f72c:	1c03      	adds	r3, r0, #0
1000f72e:	9201      	str	r2, [sp, #4]
1000f730:	1c21      	adds	r1, r4, #0
1000f732:	1c30      	adds	r0, r6, #0
1000f734:	4c93      	ldr	r4, [pc, #588]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f736:	9a07      	ldr	r2, [sp, #28]
1000f738:	47a0      	blx	r4
1000f73a:	1e04      	subs	r4, r0, #0
1000f73c:	d000      	beq.n	1000f740 <internal_at_ble_service_define+0x130>
1000f73e:	e142      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f740:	22c0      	movs	r2, #192	; 0xc0
1000f742:	882b      	ldrh	r3, [r5, #0]
1000f744:	0052      	lsls	r2, r2, #1
1000f746:	4213      	tst	r3, r2
1000f748:	d104      	bne.n	1000f754 <internal_at_ble_service_define+0x144>
1000f74a:	8aab      	ldrh	r3, [r5, #20]
1000f74c:	9304      	str	r3, [sp, #16]
1000f74e:	2b00      	cmp	r3, #0
1000f750:	d116      	bne.n	1000f780 <internal_at_ble_service_define+0x170>
1000f752:	e03a      	b.n	1000f7ca <internal_at_ble_service_define+0x1ba>
1000f754:	2201      	movs	r2, #1
1000f756:	09d9      	lsrs	r1, r3, #7
1000f758:	4011      	ands	r1, r2
1000f75a:	05db      	lsls	r3, r3, #23
1000f75c:	d501      	bpl.n	1000f762 <internal_at_ble_service_define+0x152>
1000f75e:	2302      	movs	r3, #2
1000f760:	4319      	orrs	r1, r3
1000f762:	4b8b      	ldr	r3, [pc, #556]	; (1000f990 <internal_at_ble_service_define+0x380>)
1000f764:	aa06      	add	r2, sp, #24
1000f766:	9300      	str	r3, [sp, #0]
1000f768:	230e      	movs	r3, #14
1000f76a:	189b      	adds	r3, r3, r2
1000f76c:	9301      	str	r3, [sp, #4]
1000f76e:	4c85      	ldr	r4, [pc, #532]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f770:	0209      	lsls	r1, r1, #8
1000f772:	1c30      	adds	r0, r6, #0
1000f774:	2201      	movs	r2, #1
1000f776:	2302      	movs	r3, #2
1000f778:	47a0      	blx	r4
1000f77a:	1e04      	subs	r4, r0, #0
1000f77c:	d0e5      	beq.n	1000f74a <internal_at_ble_service_define+0x13a>
1000f77e:	e122      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f780:	2380      	movs	r3, #128	; 0x80
1000f782:	882a      	ldrh	r2, [r5, #0]
1000f784:	7f2c      	ldrb	r4, [r5, #28]
1000f786:	005b      	lsls	r3, r3, #1
1000f788:	401a      	ands	r2, r3
1000f78a:	1c20      	adds	r0, r4, #0
1000f78c:	2101      	movs	r1, #1
1000f78e:	2a00      	cmp	r2, #0
1000f790:	d000      	beq.n	1000f794 <internal_at_ble_service_define+0x184>
1000f792:	1c0a      	adds	r2, r1, #0
1000f794:	4b7f      	ldr	r3, [pc, #508]	; (1000f994 <internal_at_ble_service_define+0x384>)
1000f796:	4798      	blx	r3
1000f798:	2203      	movs	r2, #3
1000f79a:	4022      	ands	r2, r4
1000f79c:	3a03      	subs	r2, #3
1000f79e:	4251      	negs	r1, r2
1000f7a0:	4151      	adcs	r1, r2
1000f7a2:	4b7d      	ldr	r3, [pc, #500]	; (1000f998 <internal_at_ble_service_define+0x388>)
1000f7a4:	1c0a      	adds	r2, r1, #0
1000f7a6:	9300      	str	r3, [sp, #0]
1000f7a8:	1c2b      	adds	r3, r5, #0
1000f7aa:	0764      	lsls	r4, r4, #29
1000f7ac:	0fe4      	lsrs	r4, r4, #31
1000f7ae:	4322      	orrs	r2, r4
1000f7b0:	03d2      	lsls	r2, r2, #15
1000f7b2:	4310      	orrs	r0, r2
1000f7b4:	3320      	adds	r3, #32
1000f7b6:	b282      	uxth	r2, r0
1000f7b8:	9301      	str	r3, [sp, #4]
1000f7ba:	4c72      	ldr	r4, [pc, #456]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f7bc:	1c30      	adds	r0, r6, #0
1000f7be:	9904      	ldr	r1, [sp, #16]
1000f7c0:	2302      	movs	r3, #2
1000f7c2:	47a0      	blx	r4
1000f7c4:	1e04      	subs	r4, r0, #0
1000f7c6:	d000      	beq.n	1000f7ca <internal_at_ble_service_define+0x1ba>
1000f7c8:	e0fd      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f7ca:	2101      	movs	r1, #1
1000f7cc:	882b      	ldrh	r3, [r5, #0]
1000f7ce:	420b      	tst	r3, r1
1000f7d0:	d011      	beq.n	1000f7f6 <internal_at_ble_service_define+0x1e6>
1000f7d2:	7fa8      	ldrb	r0, [r5, #30]
1000f7d4:	4b6f      	ldr	r3, [pc, #444]	; (1000f994 <internal_at_ble_service_define+0x384>)
1000f7d6:	2200      	movs	r2, #0
1000f7d8:	4798      	blx	r3
1000f7da:	4b70      	ldr	r3, [pc, #448]	; (1000f99c <internal_at_ble_service_define+0x38c>)
1000f7dc:	1c02      	adds	r2, r0, #0
1000f7de:	9300      	str	r3, [sp, #0]
1000f7e0:	1c2b      	adds	r3, r5, #0
1000f7e2:	3324      	adds	r3, #36	; 0x24
1000f7e4:	9301      	str	r3, [sp, #4]
1000f7e6:	4c67      	ldr	r4, [pc, #412]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f7e8:	1c30      	adds	r0, r6, #0
1000f7ea:	496d      	ldr	r1, [pc, #436]	; (1000f9a0 <internal_at_ble_service_define+0x390>)
1000f7ec:	2302      	movs	r3, #2
1000f7ee:	47a0      	blx	r4
1000f7f0:	1e04      	subs	r4, r0, #0
1000f7f2:	d000      	beq.n	1000f7f6 <internal_at_ble_service_define+0x1e6>
1000f7f4:	e0e7      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f7f6:	2330      	movs	r3, #48	; 0x30
1000f7f8:	882a      	ldrh	r2, [r5, #0]
1000f7fa:	421a      	tst	r2, r3
1000f7fc:	d012      	beq.n	1000f824 <internal_at_ble_service_define+0x214>
1000f7fe:	2101      	movs	r1, #1
1000f800:	7f68      	ldrb	r0, [r5, #29]
1000f802:	1c0a      	adds	r2, r1, #0
1000f804:	4b63      	ldr	r3, [pc, #396]	; (1000f994 <internal_at_ble_service_define+0x384>)
1000f806:	4798      	blx	r3
1000f808:	4b66      	ldr	r3, [pc, #408]	; (1000f9a4 <internal_at_ble_service_define+0x394>)
1000f80a:	1c02      	adds	r2, r0, #0
1000f80c:	9300      	str	r3, [sp, #0]
1000f80e:	1c2b      	adds	r3, r5, #0
1000f810:	3322      	adds	r3, #34	; 0x22
1000f812:	9301      	str	r3, [sp, #4]
1000f814:	4c5b      	ldr	r4, [pc, #364]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f816:	1c30      	adds	r0, r6, #0
1000f818:	4961      	ldr	r1, [pc, #388]	; (1000f9a0 <internal_at_ble_service_define+0x390>)
1000f81a:	2302      	movs	r3, #2
1000f81c:	47a0      	blx	r4
1000f81e:	1e04      	subs	r4, r0, #0
1000f820:	d000      	beq.n	1000f824 <internal_at_ble_service_define+0x214>
1000f822:	e0d0      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f824:	69ab      	ldr	r3, [r5, #24]
1000f826:	2b00      	cmp	r3, #0
1000f828:	d00e      	beq.n	1000f848 <internal_at_ble_service_define+0x238>
1000f82a:	4b5f      	ldr	r3, [pc, #380]	; (1000f9a8 <internal_at_ble_service_define+0x398>)
1000f82c:	aa06      	add	r2, sp, #24
1000f82e:	9300      	str	r3, [sp, #0]
1000f830:	230e      	movs	r3, #14
1000f832:	189b      	adds	r3, r3, r2
1000f834:	9301      	str	r3, [sp, #4]
1000f836:	4c53      	ldr	r4, [pc, #332]	; (1000f984 <internal_at_ble_service_define+0x374>)
1000f838:	1c30      	adds	r0, r6, #0
1000f83a:	2107      	movs	r1, #7
1000f83c:	2201      	movs	r2, #1
1000f83e:	2302      	movs	r3, #2
1000f840:	47a0      	blx	r4
1000f842:	1e04      	subs	r4, r0, #0
1000f844:	d000      	beq.n	1000f848 <internal_at_ble_service_define+0x238>
1000f846:	e0be      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f848:	9b02      	ldr	r3, [sp, #8]
1000f84a:	353c      	adds	r5, #60	; 0x3c
1000f84c:	3301      	adds	r3, #1
1000f84e:	9302      	str	r3, [sp, #8]
1000f850:	e73a      	b.n	1000f6c8 <internal_at_ble_service_define+0xb8>
1000f852:	1c30      	adds	r0, r6, #0
1000f854:	4b55      	ldr	r3, [pc, #340]	; (1000f9ac <internal_at_ble_service_define+0x39c>)
1000f856:	4798      	blx	r3
1000f858:	1e04      	subs	r4, r0, #0
1000f85a:	d000      	beq.n	1000f85e <internal_at_ble_service_define+0x24e>
1000f85c:	e0b3      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f85e:	8833      	ldrh	r3, [r6, #0]
1000f860:	9a05      	ldr	r2, [sp, #20]
1000f862:	8013      	strh	r3, [r2, #0]
1000f864:	8836      	ldrh	r6, [r6, #0]
1000f866:	9b06      	ldr	r3, [sp, #24]
1000f868:	9a03      	ldr	r2, [sp, #12]
1000f86a:	18f6      	adds	r6, r6, r3
1000f86c:	b2b3      	uxth	r3, r6
1000f86e:	9302      	str	r3, [sp, #8]
1000f870:	233c      	movs	r3, #60	; 0x3c
1000f872:	4353      	muls	r3, r2
1000f874:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f876:	3314      	adds	r3, #20
1000f878:	18d3      	adds	r3, r2, r3
1000f87a:	9304      	str	r3, [sp, #16]
1000f87c:	9b04      	ldr	r3, [sp, #16]
1000f87e:	429f      	cmp	r7, r3
1000f880:	d100      	bne.n	1000f884 <internal_at_ble_service_define+0x274>
1000f882:	e0a0      	b.n	1000f9c6 <internal_at_ble_service_define+0x3b6>
1000f884:	9b02      	ldr	r3, [sp, #8]
1000f886:	1c9d      	adds	r5, r3, #2
1000f888:	1c3b      	adds	r3, r7, #0
1000f88a:	b2ad      	uxth	r5, r5
1000f88c:	3b14      	subs	r3, #20
1000f88e:	801d      	strh	r5, [r3, #0]
1000f890:	9303      	str	r3, [sp, #12]
1000f892:	893b      	ldrh	r3, [r7, #8]
1000f894:	2b00      	cmp	r3, #0
1000f896:	d108      	bne.n	1000f8aa <internal_at_ble_service_define+0x29a>
1000f898:	23c0      	movs	r3, #192	; 0xc0
1000f89a:	883a      	ldrh	r2, [r7, #0]
1000f89c:	005b      	lsls	r3, r3, #1
1000f89e:	421a      	tst	r2, r3
1000f8a0:	d026      	beq.n	1000f8f0 <internal_at_ble_service_define+0x2e0>
1000f8a2:	9e02      	ldr	r6, [sp, #8]
1000f8a4:	3603      	adds	r6, #3
1000f8a6:	b2b5      	uxth	r5, r6
1000f8a8:	e022      	b.n	1000f8f0 <internal_at_ble_service_define+0x2e0>
1000f8aa:	2103      	movs	r1, #3
1000f8ac:	7b3b      	ldrb	r3, [r7, #12]
1000f8ae:	4019      	ands	r1, r3
1000f8b0:	3903      	subs	r1, #3
1000f8b2:	424a      	negs	r2, r1
1000f8b4:	414a      	adcs	r2, r1
1000f8b6:	0759      	lsls	r1, r3, #29
1000f8b8:	0fc9      	lsrs	r1, r1, #31
1000f8ba:	4311      	orrs	r1, r2
1000f8bc:	03c9      	lsls	r1, r1, #15
1000f8be:	897a      	ldrh	r2, [r7, #10]
1000f8c0:	2900      	cmp	r1, #0
1000f8c2:	d007      	beq.n	1000f8d4 <internal_at_ble_service_define+0x2c4>
1000f8c4:	6879      	ldr	r1, [r7, #4]
1000f8c6:	2900      	cmp	r1, #0
1000f8c8:	d100      	bne.n	1000f8cc <internal_at_ble_service_define+0x2bc>
1000f8ca:	4939      	ldr	r1, [pc, #228]	; (1000f9b0 <internal_at_ble_service_define+0x3a0>)
1000f8cc:	1c28      	adds	r0, r5, #0
1000f8ce:	4e39      	ldr	r6, [pc, #228]	; (1000f9b4 <internal_at_ble_service_define+0x3a4>)
1000f8d0:	47b0      	blx	r6
1000f8d2:	e00a      	b.n	1000f8ea <internal_at_ble_service_define+0x2da>
1000f8d4:	1c28      	adds	r0, r5, #0
1000f8d6:	4e37      	ldr	r6, [pc, #220]	; (1000f9b4 <internal_at_ble_service_define+0x3a4>)
1000f8d8:	47b0      	blx	r6
1000f8da:	2800      	cmp	r0, #0
1000f8dc:	d172      	bne.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f8de:	9b03      	ldr	r3, [sp, #12]
1000f8e0:	8939      	ldrh	r1, [r7, #8]
1000f8e2:	8818      	ldrh	r0, [r3, #0]
1000f8e4:	687a      	ldr	r2, [r7, #4]
1000f8e6:	4b34      	ldr	r3, [pc, #208]	; (1000f9b8 <internal_at_ble_service_define+0x3a8>)
1000f8e8:	4798      	blx	r3
1000f8ea:	2800      	cmp	r0, #0
1000f8ec:	d0d4      	beq.n	1000f898 <internal_at_ble_service_define+0x288>
1000f8ee:	e069      	b.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f8f0:	8abb      	ldrh	r3, [r7, #20]
1000f8f2:	2b00      	cmp	r3, #0
1000f8f4:	d00a      	beq.n	1000f90c <internal_at_ble_service_define+0x2fc>
1000f8f6:	3501      	adds	r5, #1
1000f8f8:	b2ad      	uxth	r5, r5
1000f8fa:	843d      	strh	r5, [r7, #32]
1000f8fc:	7f39      	ldrb	r1, [r7, #28]
1000f8fe:	8afb      	ldrh	r3, [r7, #22]
1000f900:	1c28      	adds	r0, r5, #0
1000f902:	693a      	ldr	r2, [r7, #16]
1000f904:	4e2d      	ldr	r6, [pc, #180]	; (1000f9bc <internal_at_ble_service_define+0x3ac>)
1000f906:	47b0      	blx	r6
1000f908:	2800      	cmp	r0, #0
1000f90a:	d15b      	bne.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f90c:	883b      	ldrh	r3, [r7, #0]
1000f90e:	07db      	lsls	r3, r3, #31
1000f910:	d50d      	bpl.n	1000f92e <internal_at_ble_service_define+0x31e>
1000f912:	2200      	movs	r2, #0
1000f914:	3501      	adds	r5, #1
1000f916:	b2ad      	uxth	r5, r5
1000f918:	a909      	add	r1, sp, #36	; 0x24
1000f91a:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f91c:	7fbb      	ldrb	r3, [r7, #30]
1000f91e:	1c28      	adds	r0, r5, #0
1000f920:	700a      	strb	r2, [r1, #0]
1000f922:	704a      	strb	r2, [r1, #1]
1000f924:	4e23      	ldr	r6, [pc, #140]	; (1000f9b4 <internal_at_ble_service_define+0x3a4>)
1000f926:	3202      	adds	r2, #2
1000f928:	47b0      	blx	r6
1000f92a:	2800      	cmp	r0, #0
1000f92c:	d14a      	bne.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f92e:	2330      	movs	r3, #48	; 0x30
1000f930:	883a      	ldrh	r2, [r7, #0]
1000f932:	421a      	tst	r2, r3
1000f934:	d00d      	beq.n	1000f952 <internal_at_ble_service_define+0x342>
1000f936:	2200      	movs	r2, #0
1000f938:	3501      	adds	r5, #1
1000f93a:	b2ad      	uxth	r5, r5
1000f93c:	a909      	add	r1, sp, #36	; 0x24
1000f93e:	847d      	strh	r5, [r7, #34]	; 0x22
1000f940:	7f7b      	ldrb	r3, [r7, #29]
1000f942:	1c28      	adds	r0, r5, #0
1000f944:	700a      	strb	r2, [r1, #0]
1000f946:	704a      	strb	r2, [r1, #1]
1000f948:	4e1a      	ldr	r6, [pc, #104]	; (1000f9b4 <internal_at_ble_service_define+0x3a4>)
1000f94a:	3202      	adds	r2, #2
1000f94c:	47b0      	blx	r6
1000f94e:	2800      	cmp	r0, #0
1000f950:	d138      	bne.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f952:	69b9      	ldr	r1, [r7, #24]
1000f954:	2900      	cmp	r1, #0
1000f956:	d006      	beq.n	1000f966 <internal_at_ble_service_define+0x356>
1000f958:	3501      	adds	r5, #1
1000f95a:	b2ad      	uxth	r5, r5
1000f95c:	1c28      	adds	r0, r5, #0
1000f95e:	4b18      	ldr	r3, [pc, #96]	; (1000f9c0 <internal_at_ble_service_define+0x3b0>)
1000f960:	4798      	blx	r3
1000f962:	2800      	cmp	r0, #0
1000f964:	d12e      	bne.n	1000f9c4 <internal_at_ble_service_define+0x3b4>
1000f966:	373c      	adds	r7, #60	; 0x3c
1000f968:	9502      	str	r5, [sp, #8]
1000f96a:	e787      	b.n	1000f87c <internal_at_ble_service_define+0x26c>
1000f96c:	1001a198 	.word	0x1001a198
1000f970:	1001b0e8 	.word	0x1001b0e8
1000f974:	10015909 	.word	0x10015909
1000f978:	1000f345 	.word	0x1000f345
1000f97c:	100158f7 	.word	0x100158f7
1000f980:	100184e2 	.word	0x100184e2
1000f984:	100117d1 	.word	0x100117d1
1000f988:	100184e4 	.word	0x100184e4
1000f98c:	1000f411 	.word	0x1000f411
1000f990:	100184e0 	.word	0x100184e0
1000f994:	1000f3b9 	.word	0x1000f3b9
1000f998:	100184dc 	.word	0x100184dc
1000f99c:	100184de 	.word	0x100184de
1000f9a0:	00008002 	.word	0x00008002
1000f9a4:	100184d8 	.word	0x100184d8
1000f9a8:	100184da 	.word	0x100184da
1000f9ac:	100116c5 	.word	0x100116c5
1000f9b0:	1001a184 	.word	0x1001a184
1000f9b4:	1000f4d9 	.word	0x1000f4d9
1000f9b8:	10011841 	.word	0x10011841
1000f9bc:	1000f591 	.word	0x1000f591
1000f9c0:	1000f4ad 	.word	0x1000f4ad
1000f9c4:	1c04      	adds	r4, r0, #0
1000f9c6:	1c20      	adds	r0, r4, #0
1000f9c8:	b00b      	add	sp, #44	; 0x2c
1000f9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f9cc <initi_gatt_server_module>:
1000f9cc:	2300      	movs	r3, #0
1000f9ce:	4a07      	ldr	r2, [pc, #28]	; (1000f9ec <initi_gatt_server_module+0x20>)
1000f9d0:	7013      	strb	r3, [r2, #0]
1000f9d2:	4a07      	ldr	r2, [pc, #28]	; (1000f9f0 <initi_gatt_server_module+0x24>)
1000f9d4:	6013      	str	r3, [r2, #0]
1000f9d6:	4a07      	ldr	r2, [pc, #28]	; (1000f9f4 <initi_gatt_server_module+0x28>)
1000f9d8:	6013      	str	r3, [r2, #0]
1000f9da:	4a07      	ldr	r2, [pc, #28]	; (1000f9f8 <initi_gatt_server_module+0x2c>)
1000f9dc:	6013      	str	r3, [r2, #0]
1000f9de:	4a07      	ldr	r2, [pc, #28]	; (1000f9fc <initi_gatt_server_module+0x30>)
1000f9e0:	6013      	str	r3, [r2, #0]
1000f9e2:	4a07      	ldr	r2, [pc, #28]	; (1000fa00 <initi_gatt_server_module+0x34>)
1000f9e4:	6013      	str	r3, [r2, #0]
1000f9e6:	4a07      	ldr	r2, [pc, #28]	; (1000fa04 <initi_gatt_server_module+0x38>)
1000f9e8:	6013      	str	r3, [r2, #0]
1000f9ea:	4770      	bx	lr
1000f9ec:	1001a184 	.word	0x1001a184
1000f9f0:	1001a194 	.word	0x1001a194
1000f9f4:	1001a190 	.word	0x1001a190
1000f9f8:	1001a180 	.word	0x1001a180
1000f9fc:	1001a18c 	.word	0x1001a18c
1000fa00:	1001a188 	.word	0x1001a188
1000fa04:	1001a198 	.word	0x1001a198

1000fa08 <db_init>:
1000fa08:	4b0a      	ldr	r3, [pc, #40]	; (1000fa34 <db_init+0x2c>)
1000fa0a:	4a0b      	ldr	r2, [pc, #44]	; (1000fa38 <db_init+0x30>)
1000fa0c:	6018      	str	r0, [r3, #0]
1000fa0e:	084b      	lsrs	r3, r1, #1
1000fa10:	6013      	str	r3, [r2, #0]
1000fa12:	4a0a      	ldr	r2, [pc, #40]	; (1000fa3c <db_init+0x34>)
1000fa14:	18c3      	adds	r3, r0, r3
1000fa16:	6013      	str	r3, [r2, #0]
1000fa18:	4a09      	ldr	r2, [pc, #36]	; (1000fa40 <db_init+0x38>)
1000fa1a:	1841      	adds	r1, r0, r1
1000fa1c:	6013      	str	r3, [r2, #0]
1000fa1e:	2303      	movs	r3, #3
1000fa20:	2200      	movs	r2, #0
1000fa22:	3103      	adds	r1, #3
1000fa24:	4399      	bics	r1, r3
1000fa26:	4b07      	ldr	r3, [pc, #28]	; (1000fa44 <db_init+0x3c>)
1000fa28:	3904      	subs	r1, #4
1000fa2a:	6019      	str	r1, [r3, #0]
1000fa2c:	4b06      	ldr	r3, [pc, #24]	; (1000fa48 <db_init+0x40>)
1000fa2e:	601a      	str	r2, [r3, #0]
1000fa30:	4770      	bx	lr
1000fa32:	46c0      	nop			; (mov r8, r8)
1000fa34:	1001a198 	.word	0x1001a198
1000fa38:	1001a194 	.word	0x1001a194
1000fa3c:	1001a180 	.word	0x1001a180
1000fa40:	1001a18c 	.word	0x1001a18c
1000fa44:	1001a188 	.word	0x1001a188
1000fa48:	1001a190 	.word	0x1001a190

1000fa4c <at_ble_primary_service_define>:
1000fa4c:	b530      	push	{r4, r5, lr}
1000fa4e:	b085      	sub	sp, #20
1000fa50:	ac08      	add	r4, sp, #32
1000fa52:	cc20      	ldmia	r4!, {r5}
1000fa54:	8824      	ldrh	r4, [r4, #0]
1000fa56:	9500      	str	r5, [sp, #0]
1000fa58:	9401      	str	r4, [sp, #4]
1000fa5a:	2401      	movs	r4, #1
1000fa5c:	9402      	str	r4, [sp, #8]
1000fa5e:	4c02      	ldr	r4, [pc, #8]	; (1000fa68 <at_ble_primary_service_define+0x1c>)
1000fa60:	47a0      	blx	r4
1000fa62:	b005      	add	sp, #20
1000fa64:	bd30      	pop	{r4, r5, pc}
1000fa66:	46c0      	nop			; (mov r8, r8)
1000fa68:	1000f611 	.word	0x1000f611

1000fa6c <at_ble_characteristic_value_set>:
1000fa6c:	b570      	push	{r4, r5, r6, lr}
1000fa6e:	4b0b      	ldr	r3, [pc, #44]	; (1000fa9c <at_ble_characteristic_value_set+0x30>)
1000fa70:	1c06      	adds	r6, r0, #0
1000fa72:	1c0c      	adds	r4, r1, #0
1000fa74:	1c15      	adds	r5, r2, #0
1000fa76:	4798      	blx	r3
1000fa78:	2800      	cmp	r0, #0
1000fa7a:	d008      	beq.n	1000fa8e <at_ble_characteristic_value_set+0x22>
1000fa7c:	6880      	ldr	r0, [r0, #8]
1000fa7e:	2800      	cmp	r0, #0
1000fa80:	d005      	beq.n	1000fa8e <at_ble_characteristic_value_set+0x22>
1000fa82:	1c21      	adds	r1, r4, #0
1000fa84:	1c2a      	adds	r2, r5, #0
1000fa86:	4b06      	ldr	r3, [pc, #24]	; (1000faa0 <at_ble_characteristic_value_set+0x34>)
1000fa88:	4798      	blx	r3
1000fa8a:	2000      	movs	r0, #0
1000fa8c:	e004      	b.n	1000fa98 <at_ble_characteristic_value_set+0x2c>
1000fa8e:	1c30      	adds	r0, r6, #0
1000fa90:	1c29      	adds	r1, r5, #0
1000fa92:	1c22      	adds	r2, r4, #0
1000fa94:	4b03      	ldr	r3, [pc, #12]	; (1000faa4 <at_ble_characteristic_value_set+0x38>)
1000fa96:	4798      	blx	r3
1000fa98:	bd70      	pop	{r4, r5, r6, pc}
1000fa9a:	46c0      	nop			; (mov r8, r8)
1000fa9c:	1000f379 	.word	0x1000f379
1000faa0:	100158f7 	.word	0x100158f7
1000faa4:	10011841 	.word	0x10011841

1000faa8 <at_ble_characteristic_value_get>:
1000faa8:	b570      	push	{r4, r5, r6, lr}
1000faaa:	4b0c      	ldr	r3, [pc, #48]	; (1000fadc <at_ble_characteristic_value_get+0x34>)
1000faac:	1c06      	adds	r6, r0, #0
1000faae:	1c0c      	adds	r4, r1, #0
1000fab0:	1c15      	adds	r5, r2, #0
1000fab2:	4798      	blx	r3
1000fab4:	2800      	cmp	r0, #0
1000fab6:	d00b      	beq.n	1000fad0 <at_ble_characteristic_value_get+0x28>
1000fab8:	6883      	ldr	r3, [r0, #8]
1000faba:	2b00      	cmp	r3, #0
1000fabc:	d008      	beq.n	1000fad0 <at_ble_characteristic_value_get+0x28>
1000fabe:	8883      	ldrh	r3, [r0, #4]
1000fac0:	802b      	strh	r3, [r5, #0]
1000fac2:	8882      	ldrh	r2, [r0, #4]
1000fac4:	6881      	ldr	r1, [r0, #8]
1000fac6:	4b06      	ldr	r3, [pc, #24]	; (1000fae0 <at_ble_characteristic_value_get+0x38>)
1000fac8:	1c20      	adds	r0, r4, #0
1000faca:	4798      	blx	r3
1000facc:	2000      	movs	r0, #0
1000face:	e004      	b.n	1000fada <at_ble_characteristic_value_get+0x32>
1000fad0:	1c30      	adds	r0, r6, #0
1000fad2:	1c29      	adds	r1, r5, #0
1000fad4:	1c22      	adds	r2, r4, #0
1000fad6:	4b03      	ldr	r3, [pc, #12]	; (1000fae4 <at_ble_characteristic_value_get+0x3c>)
1000fad8:	4798      	blx	r3
1000fada:	bd70      	pop	{r4, r5, r6, pc}
1000fadc:	1000f379 	.word	0x1000f379
1000fae0:	100158f7 	.word	0x100158f7
1000fae4:	100118cd 	.word	0x100118cd

1000fae8 <at_ble_write_authorize_reply>:
1000fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000faea:	b085      	sub	sp, #20
1000faec:	1c04      	adds	r4, r0, #0
1000faee:	9101      	str	r1, [sp, #4]
1000faf0:	2900      	cmp	r1, #0
1000faf2:	d128      	bne.n	1000fb46 <at_ble_write_authorize_reply+0x5e>
1000faf4:	8843      	ldrh	r3, [r0, #2]
1000faf6:	1c27      	adds	r7, r4, #0
1000faf8:	9300      	str	r3, [sp, #0]
1000fafa:	1c18      	adds	r0, r3, #0
1000fafc:	4b16      	ldr	r3, [pc, #88]	; (1000fb58 <at_ble_write_authorize_reply+0x70>)
1000fafe:	4798      	blx	r3
1000fb00:	3708      	adds	r7, #8
1000fb02:	2800      	cmp	r0, #0
1000fb04:	d009      	beq.n	1000fb1a <at_ble_write_authorize_reply+0x32>
1000fb06:	6880      	ldr	r0, [r0, #8]
1000fb08:	2800      	cmp	r0, #0
1000fb0a:	d006      	beq.n	1000fb1a <at_ble_write_authorize_reply+0x32>
1000fb0c:	88a3      	ldrh	r3, [r4, #4]
1000fb0e:	88e2      	ldrh	r2, [r4, #6]
1000fb10:	18c0      	adds	r0, r0, r3
1000fb12:	1c39      	adds	r1, r7, #0
1000fb14:	4b11      	ldr	r3, [pc, #68]	; (1000fb5c <at_ble_write_authorize_reply+0x74>)
1000fb16:	4798      	blx	r3
1000fb18:	e015      	b.n	1000fb46 <at_ble_write_authorize_reply+0x5e>
1000fb1a:	ab02      	add	r3, sp, #8
1000fb1c:	1d9e      	adds	r6, r3, #6
1000fb1e:	2300      	movs	r3, #0
1000fb20:	4d0f      	ldr	r5, [pc, #60]	; (1000fb60 <at_ble_write_authorize_reply+0x78>)
1000fb22:	8033      	strh	r3, [r6, #0]
1000fb24:	6829      	ldr	r1, [r5, #0]
1000fb26:	1c32      	adds	r2, r6, #0
1000fb28:	4b0e      	ldr	r3, [pc, #56]	; (1000fb64 <at_ble_write_authorize_reply+0x7c>)
1000fb2a:	9800      	ldr	r0, [sp, #0]
1000fb2c:	4798      	blx	r3
1000fb2e:	682b      	ldr	r3, [r5, #0]
1000fb30:	88a0      	ldrh	r0, [r4, #4]
1000fb32:	88e2      	ldrh	r2, [r4, #6]
1000fb34:	1818      	adds	r0, r3, r0
1000fb36:	1c39      	adds	r1, r7, #0
1000fb38:	4b08      	ldr	r3, [pc, #32]	; (1000fb5c <at_ble_write_authorize_reply+0x74>)
1000fb3a:	4798      	blx	r3
1000fb3c:	8860      	ldrh	r0, [r4, #2]
1000fb3e:	8832      	ldrh	r2, [r6, #0]
1000fb40:	6829      	ldr	r1, [r5, #0]
1000fb42:	4b09      	ldr	r3, [pc, #36]	; (1000fb68 <at_ble_write_authorize_reply+0x80>)
1000fb44:	4798      	blx	r3
1000fb46:	8860      	ldrh	r0, [r4, #2]
1000fb48:	8821      	ldrh	r1, [r4, #0]
1000fb4a:	9a01      	ldr	r2, [sp, #4]
1000fb4c:	4b07      	ldr	r3, [pc, #28]	; (1000fb6c <at_ble_write_authorize_reply+0x84>)
1000fb4e:	4798      	blx	r3
1000fb50:	2000      	movs	r0, #0
1000fb52:	b005      	add	sp, #20
1000fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb56:	46c0      	nop			; (mov r8, r8)
1000fb58:	1000f379 	.word	0x1000f379
1000fb5c:	100158f7 	.word	0x100158f7
1000fb60:	10018700 	.word	0x10018700
1000fb64:	1000faa9 	.word	0x1000faa9
1000fb68:	1000fa6d 	.word	0x1000fa6d
1000fb6c:	10011345 	.word	0x10011345

1000fb70 <gatts_handle_read_req>:
1000fb70:	b538      	push	{r3, r4, r5, lr}
1000fb72:	1c0c      	adds	r4, r1, #0
1000fb74:	4b07      	ldr	r3, [pc, #28]	; (1000fb94 <gatts_handle_read_req+0x24>)
1000fb76:	4798      	blx	r3
1000fb78:	8865      	ldrh	r5, [r4, #2]
1000fb7a:	4b07      	ldr	r3, [pc, #28]	; (1000fb98 <gatts_handle_read_req+0x28>)
1000fb7c:	1c28      	adds	r0, r5, #0
1000fb7e:	4798      	blx	r3
1000fb80:	7883      	ldrb	r3, [r0, #2]
1000fb82:	2026      	movs	r0, #38	; 0x26
1000fb84:	07db      	lsls	r3, r3, #31
1000fb86:	d404      	bmi.n	1000fb92 <gatts_handle_read_req+0x22>
1000fb88:	8820      	ldrh	r0, [r4, #0]
1000fb8a:	1c29      	adds	r1, r5, #0
1000fb8c:	4b03      	ldr	r3, [pc, #12]	; (1000fb9c <gatts_handle_read_req+0x2c>)
1000fb8e:	4798      	blx	r3
1000fb90:	203b      	movs	r0, #59	; 0x3b
1000fb92:	bd38      	pop	{r3, r4, r5, pc}
1000fb94:	10011289 	.word	0x10011289
1000fb98:	1000f379 	.word	0x1000f379
1000fb9c:	1000f5e1 	.word	0x1000f5e1

1000fba0 <gatts_handle_att_info_req>:
1000fba0:	b538      	push	{r3, r4, r5, lr}
1000fba2:	1c0d      	adds	r5, r1, #0
1000fba4:	4b0a      	ldr	r3, [pc, #40]	; (1000fbd0 <gatts_handle_att_info_req+0x30>)
1000fba6:	1c14      	adds	r4, r2, #0
1000fba8:	4798      	blx	r3
1000fbaa:	882d      	ldrh	r5, [r5, #0]
1000fbac:	4b09      	ldr	r3, [pc, #36]	; (1000fbd4 <gatts_handle_att_info_req+0x34>)
1000fbae:	1c28      	adds	r0, r5, #0
1000fbb0:	4798      	blx	r3
1000fbb2:	0a22      	lsrs	r2, r4, #8
1000fbb4:	1c03      	adds	r3, r0, #0
1000fbb6:	4c08      	ldr	r4, [pc, #32]	; (1000fbd8 <gatts_handle_att_info_req+0x38>)
1000fbb8:	b291      	uxth	r1, r2
1000fbba:	2800      	cmp	r0, #0
1000fbbc:	d003      	beq.n	1000fbc6 <gatts_handle_att_info_req+0x26>
1000fbbe:	8882      	ldrh	r2, [r0, #4]
1000fbc0:	2300      	movs	r3, #0
1000fbc2:	1c28      	adds	r0, r5, #0
1000fbc4:	e001      	b.n	1000fbca <gatts_handle_att_info_req+0x2a>
1000fbc6:	1c28      	adds	r0, r5, #0
1000fbc8:	2201      	movs	r2, #1
1000fbca:	47a0      	blx	r4
1000fbcc:	203b      	movs	r0, #59	; 0x3b
1000fbce:	bd38      	pop	{r3, r4, r5, pc}
1000fbd0:	100112cd 	.word	0x100112cd
1000fbd4:	1000f379 	.word	0x1000f379
1000fbd8:	10011389 	.word	0x10011389

1000fbdc <gatts_handle_write_req>:
1000fbdc:	b510      	push	{r4, lr}
1000fbde:	1c14      	adds	r4, r2, #0
1000fbe0:	4b07      	ldr	r3, [pc, #28]	; (1000fc00 <gatts_handle_write_req+0x24>)
1000fbe2:	4798      	blx	r3
1000fbe4:	4b07      	ldr	r3, [pc, #28]	; (1000fc04 <gatts_handle_write_req+0x28>)
1000fbe6:	8860      	ldrh	r0, [r4, #2]
1000fbe8:	4798      	blx	r3
1000fbea:	2302      	movs	r3, #2
1000fbec:	7881      	ldrb	r1, [r0, #2]
1000fbee:	2022      	movs	r0, #34	; 0x22
1000fbf0:	4019      	ands	r1, r3
1000fbf2:	d103      	bne.n	1000fbfc <gatts_handle_write_req+0x20>
1000fbf4:	1c20      	adds	r0, r4, #0
1000fbf6:	4b04      	ldr	r3, [pc, #16]	; (1000fc08 <gatts_handle_write_req+0x2c>)
1000fbf8:	4798      	blx	r3
1000fbfa:	201f      	movs	r0, #31
1000fbfc:	bd10      	pop	{r4, pc}
1000fbfe:	46c0      	nop			; (mov r8, r8)
1000fc00:	10011295 	.word	0x10011295
1000fc04:	1000f379 	.word	0x1000f379
1000fc08:	1000fae9 	.word	0x1000fae9

1000fc0c <at_ble_notification_send>:
1000fc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc0e:	4d17      	ldr	r5, [pc, #92]	; (1000fc6c <at_ble_notification_send+0x60>)
1000fc10:	4c17      	ldr	r4, [pc, #92]	; (1000fc70 <at_ble_notification_send+0x64>)
1000fc12:	682a      	ldr	r2, [r5, #0]
1000fc14:	44a5      	add	sp, r4
1000fc16:	23d2      	movs	r3, #210	; 0xd2
1000fc18:	2a04      	cmp	r2, #4
1000fc1a:	d822      	bhi.n	1000fc62 <at_ble_notification_send+0x56>
1000fc1c:	1c06      	adds	r6, r0, #0
1000fc1e:	4b15      	ldr	r3, [pc, #84]	; (1000fc74 <at_ble_notification_send+0x68>)
1000fc20:	1c08      	adds	r0, r1, #0
1000fc22:	1c0c      	adds	r4, r1, #0
1000fc24:	4798      	blx	r3
1000fc26:	2800      	cmp	r0, #0
1000fc28:	d008      	beq.n	1000fc3c <at_ble_notification_send+0x30>
1000fc2a:	6883      	ldr	r3, [r0, #8]
1000fc2c:	2b00      	cmp	r3, #0
1000fc2e:	d005      	beq.n	1000fc3c <at_ble_notification_send+0x30>
1000fc30:	8882      	ldrh	r2, [r0, #4]
1000fc32:	1c21      	adds	r1, r4, #0
1000fc34:	9200      	str	r2, [sp, #0]
1000fc36:	2012      	movs	r0, #18
1000fc38:	1c32      	adds	r2, r6, #0
1000fc3a:	e00c      	b.n	1000fc56 <at_ble_notification_send+0x4a>
1000fc3c:	270e      	movs	r7, #14
1000fc3e:	446f      	add	r7, sp
1000fc40:	1c39      	adds	r1, r7, #0
1000fc42:	aa04      	add	r2, sp, #16
1000fc44:	4b0c      	ldr	r3, [pc, #48]	; (1000fc78 <at_ble_notification_send+0x6c>)
1000fc46:	1c20      	adds	r0, r4, #0
1000fc48:	4798      	blx	r3
1000fc4a:	2012      	movs	r0, #18
1000fc4c:	1c21      	adds	r1, r4, #0
1000fc4e:	1c32      	adds	r2, r6, #0
1000fc50:	883b      	ldrh	r3, [r7, #0]
1000fc52:	9300      	str	r3, [sp, #0]
1000fc54:	ab04      	add	r3, sp, #16
1000fc56:	4c09      	ldr	r4, [pc, #36]	; (1000fc7c <at_ble_notification_send+0x70>)
1000fc58:	47a0      	blx	r4
1000fc5a:	682b      	ldr	r3, [r5, #0]
1000fc5c:	3301      	adds	r3, #1
1000fc5e:	602b      	str	r3, [r5, #0]
1000fc60:	2300      	movs	r3, #0
1000fc62:	1c18      	adds	r0, r3, #0
1000fc64:	2385      	movs	r3, #133	; 0x85
1000fc66:	009b      	lsls	r3, r3, #2
1000fc68:	449d      	add	sp, r3
1000fc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc6c:	1001a224 	.word	0x1001a224
1000fc70:	fffffdec 	.word	0xfffffdec
1000fc74:	1000f379 	.word	0x1000f379
1000fc78:	100118cd 	.word	0x100118cd
1000fc7c:	100113d1 	.word	0x100113d1

1000fc80 <init_l2cc_task_module>:
1000fc80:	220a      	movs	r2, #10
1000fc82:	4b01      	ldr	r3, [pc, #4]	; (1000fc88 <init_l2cc_task_module+0x8>)
1000fc84:	701a      	strb	r2, [r3, #0]
1000fc86:	4770      	bx	lr
1000fc88:	100186fc 	.word	0x100186fc

1000fc8c <l2cc_data_send_rsp_handler>:
1000fc8c:	b510      	push	{r4, lr}
1000fc8e:	7802      	ldrb	r2, [r0, #0]
1000fc90:	700a      	strb	r2, [r1, #0]
1000fc92:	7883      	ldrb	r3, [r0, #2]
1000fc94:	7844      	ldrb	r4, [r0, #1]
1000fc96:	021b      	lsls	r3, r3, #8
1000fc98:	4323      	orrs	r3, r4
1000fc9a:	804b      	strh	r3, [r1, #2]
1000fc9c:	7903      	ldrb	r3, [r0, #4]
1000fc9e:	78c0      	ldrb	r0, [r0, #3]
1000fca0:	021b      	lsls	r3, r3, #8
1000fca2:	4303      	orrs	r3, r0
1000fca4:	808b      	strh	r3, [r1, #4]
1000fca6:	2a00      	cmp	r2, #0
1000fca8:	d103      	bne.n	1000fcb2 <l2cc_data_send_rsp_handler+0x26>
1000fcaa:	4a02      	ldr	r2, [pc, #8]	; (1000fcb4 <l2cc_data_send_rsp_handler+0x28>)
1000fcac:	7813      	ldrb	r3, [r2, #0]
1000fcae:	3301      	adds	r3, #1
1000fcb0:	7013      	strb	r3, [r2, #0]
1000fcb2:	bd10      	pop	{r4, pc}
1000fcb4:	100186fc 	.word	0x100186fc

1000fcb8 <l2cc_data_received_handler>:
1000fcb8:	b508      	push	{r3, lr}
1000fcba:	1c03      	adds	r3, r0, #0
1000fcbc:	7842      	ldrb	r2, [r0, #1]
1000fcbe:	7800      	ldrb	r0, [r0, #0]
1000fcc0:	0212      	lsls	r2, r2, #8
1000fcc2:	4302      	orrs	r2, r0
1000fcc4:	800a      	strh	r2, [r1, #0]
1000fcc6:	78da      	ldrb	r2, [r3, #3]
1000fcc8:	7898      	ldrb	r0, [r3, #2]
1000fcca:	0212      	lsls	r2, r2, #8
1000fccc:	4302      	orrs	r2, r0
1000fcce:	804a      	strh	r2, [r1, #2]
1000fcd0:	795a      	ldrb	r2, [r3, #5]
1000fcd2:	7918      	ldrb	r0, [r3, #4]
1000fcd4:	0212      	lsls	r2, r2, #8
1000fcd6:	4302      	orrs	r2, r0
1000fcd8:	808a      	strh	r2, [r1, #4]
1000fcda:	1d88      	adds	r0, r1, #6
1000fcdc:	1d99      	adds	r1, r3, #6
1000fcde:	4b01      	ldr	r3, [pc, #4]	; (1000fce4 <l2cc_data_received_handler+0x2c>)
1000fce0:	4798      	blx	r3
1000fce2:	bd08      	pop	{r3, pc}
1000fce4:	100158f7 	.word	0x100158f7

1000fce8 <at_ble_authenticate>:
1000fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcea:	1c0c      	adds	r4, r1, #0
1000fcec:	211f      	movs	r1, #31
1000fcee:	b08b      	sub	sp, #44	; 0x2c
1000fcf0:	9307      	str	r3, [sp, #28]
1000fcf2:	ab02      	add	r3, sp, #8
1000fcf4:	18c9      	adds	r1, r1, r3
1000fcf6:	230f      	movs	r3, #15
1000fcf8:	700b      	strb	r3, [r1, #0]
1000fcfa:	4b40      	ldr	r3, [pc, #256]	; (1000fdfc <at_ble_authenticate+0x114>)
1000fcfc:	1c05      	adds	r5, r0, #0
1000fcfe:	1c16      	adds	r6, r2, #0
1000fd00:	4798      	blx	r3
1000fd02:	1c07      	adds	r7, r0, #0
1000fd04:	2001      	movs	r0, #1
1000fd06:	2f07      	cmp	r7, #7
1000fd08:	d875      	bhi.n	1000fdf6 <at_ble_authenticate+0x10e>
1000fd0a:	2c00      	cmp	r4, #0
1000fd0c:	d113      	bne.n	1000fd36 <at_ble_authenticate+0x4e>
1000fd0e:	2312      	movs	r3, #18
1000fd10:	435f      	muls	r7, r3
1000fd12:	4b3b      	ldr	r3, [pc, #236]	; (1000fe00 <at_ble_authenticate+0x118>)
1000fd14:	5cfb      	ldrb	r3, [r7, r3]
1000fd16:	4283      	cmp	r3, r0
1000fd18:	d001      	beq.n	1000fd1e <at_ble_authenticate+0x36>
1000fd1a:	20cf      	movs	r0, #207	; 0xcf
1000fd1c:	e06b      	b.n	1000fdf6 <at_ble_authenticate+0x10e>
1000fd1e:	9504      	str	r5, [sp, #16]
1000fd20:	9400      	str	r4, [sp, #0]
1000fd22:	9401      	str	r4, [sp, #4]
1000fd24:	9402      	str	r4, [sp, #8]
1000fd26:	9403      	str	r4, [sp, #12]
1000fd28:	1c20      	adds	r0, r4, #0
1000fd2a:	1c21      	adds	r1, r4, #0
1000fd2c:	1c22      	adds	r2, r4, #0
1000fd2e:	1c23      	adds	r3, r4, #0
1000fd30:	4d34      	ldr	r5, [pc, #208]	; (1000fe04 <at_ble_authenticate+0x11c>)
1000fd32:	47a8      	blx	r5
1000fd34:	e05e      	b.n	1000fdf4 <at_ble_authenticate+0x10c>
1000fd36:	7922      	ldrb	r2, [r4, #4]
1000fd38:	2a06      	cmp	r2, #6
1000fd3a:	d9ee      	bls.n	1000fd1a <at_ble_authenticate+0x32>
1000fd3c:	7963      	ldrb	r3, [r4, #5]
1000fd3e:	2b10      	cmp	r3, #16
1000fd40:	d8eb      	bhi.n	1000fd1a <at_ble_authenticate+0x32>
1000fd42:	429a      	cmp	r2, r3
1000fd44:	d8e9      	bhi.n	1000fd1a <at_ble_authenticate+0x32>
1000fd46:	7a23      	ldrb	r3, [r4, #8]
1000fd48:	2b04      	cmp	r3, #4
1000fd4a:	d8e6      	bhi.n	1000fd1a <at_ble_authenticate+0x32>
1000fd4c:	79a3      	ldrb	r3, [r4, #6]
1000fd4e:	2b07      	cmp	r3, #7
1000fd50:	d8e3      	bhi.n	1000fd1a <at_ble_authenticate+0x32>
1000fd52:	79e3      	ldrb	r3, [r4, #7]
1000fd54:	2b07      	cmp	r3, #7
1000fd56:	d8e0      	bhi.n	1000fd1a <at_ble_authenticate+0x32>
1000fd58:	78a3      	ldrb	r3, [r4, #2]
1000fd5a:	2b00      	cmp	r3, #0
1000fd5c:	d006      	beq.n	1000fd6c <at_ble_authenticate+0x84>
1000fd5e:	2e00      	cmp	r6, #0
1000fd60:	d0db      	beq.n	1000fd1a <at_ble_authenticate+0x32>
1000fd62:	4829      	ldr	r0, [pc, #164]	; (1000fe08 <at_ble_authenticate+0x120>)
1000fd64:	1c31      	adds	r1, r6, #0
1000fd66:	221c      	movs	r2, #28
1000fd68:	4b28      	ldr	r3, [pc, #160]	; (1000fe0c <at_ble_authenticate+0x124>)
1000fd6a:	4798      	blx	r3
1000fd6c:	9b07      	ldr	r3, [sp, #28]
1000fd6e:	2b00      	cmp	r3, #0
1000fd70:	d005      	beq.n	1000fd7e <at_ble_authenticate+0x96>
1000fd72:	4827      	ldr	r0, [pc, #156]	; (1000fe10 <at_ble_authenticate+0x128>)
1000fd74:	1c19      	adds	r1, r3, #0
1000fd76:	309a      	adds	r0, #154	; 0x9a
1000fd78:	2210      	movs	r2, #16
1000fd7a:	4b24      	ldr	r3, [pc, #144]	; (1000fe0c <at_ble_authenticate+0x124>)
1000fd7c:	4798      	blx	r3
1000fd7e:	7863      	ldrb	r3, [r4, #1]
1000fd80:	78a2      	ldrb	r2, [r4, #2]
1000fd82:	009b      	lsls	r3, r3, #2
1000fd84:	4313      	orrs	r3, r2
1000fd86:	2212      	movs	r2, #18
1000fd88:	4357      	muls	r7, r2
1000fd8a:	4a1d      	ldr	r2, [pc, #116]	; (1000fe00 <at_ble_authenticate+0x118>)
1000fd8c:	b2db      	uxtb	r3, r3
1000fd8e:	5cba      	ldrb	r2, [r7, r2]
1000fd90:	2a00      	cmp	r2, #0
1000fd92:	d116      	bne.n	1000fdc2 <at_ble_authenticate+0xda>
1000fd94:	79a0      	ldrb	r0, [r4, #6]
1000fd96:	0742      	lsls	r2, r0, #29
1000fd98:	d502      	bpl.n	1000fda0 <at_ble_authenticate+0xb8>
1000fd9a:	9a07      	ldr	r2, [sp, #28]
1000fd9c:	2a00      	cmp	r2, #0
1000fd9e:	d0bc      	beq.n	1000fd1a <at_ble_authenticate+0x32>
1000fda0:	07c2      	lsls	r2, r0, #31
1000fda2:	d501      	bpl.n	1000fda8 <at_ble_authenticate+0xc0>
1000fda4:	2e00      	cmp	r6, #0
1000fda6:	d0b8      	beq.n	1000fd1a <at_ble_authenticate+0x32>
1000fda8:	7966      	ldrb	r6, [r4, #5]
1000fdaa:	7821      	ldrb	r1, [r4, #0]
1000fdac:	78e2      	ldrb	r2, [r4, #3]
1000fdae:	9600      	str	r6, [sp, #0]
1000fdb0:	9001      	str	r0, [sp, #4]
1000fdb2:	79e0      	ldrb	r0, [r4, #7]
1000fdb4:	9002      	str	r0, [sp, #8]
1000fdb6:	7a20      	ldrb	r0, [r4, #8]
1000fdb8:	4c16      	ldr	r4, [pc, #88]	; (1000fe14 <at_ble_authenticate+0x12c>)
1000fdba:	9003      	str	r0, [sp, #12]
1000fdbc:	1c28      	adds	r0, r5, #0
1000fdbe:	47a0      	blx	r4
1000fdc0:	e018      	b.n	1000fdf4 <at_ble_authenticate+0x10c>
1000fdc2:	2a01      	cmp	r2, #1
1000fdc4:	d1a9      	bne.n	1000fd1a <at_ble_authenticate+0x32>
1000fdc6:	79e0      	ldrb	r0, [r4, #7]
1000fdc8:	0742      	lsls	r2, r0, #29
1000fdca:	d502      	bpl.n	1000fdd2 <at_ble_authenticate+0xea>
1000fdcc:	9a07      	ldr	r2, [sp, #28]
1000fdce:	2a00      	cmp	r2, #0
1000fdd0:	d0a3      	beq.n	1000fd1a <at_ble_authenticate+0x32>
1000fdd2:	07c2      	lsls	r2, r0, #31
1000fdd4:	d501      	bpl.n	1000fdda <at_ble_authenticate+0xf2>
1000fdd6:	2e00      	cmp	r6, #0
1000fdd8:	d09f      	beq.n	1000fd1a <at_ble_authenticate+0x32>
1000fdda:	7966      	ldrb	r6, [r4, #5]
1000fddc:	7821      	ldrb	r1, [r4, #0]
1000fdde:	78e2      	ldrb	r2, [r4, #3]
1000fde0:	9600      	str	r6, [sp, #0]
1000fde2:	79a6      	ldrb	r6, [r4, #6]
1000fde4:	9002      	str	r0, [sp, #8]
1000fde6:	9601      	str	r6, [sp, #4]
1000fde8:	7a20      	ldrb	r0, [r4, #8]
1000fdea:	9504      	str	r5, [sp, #16]
1000fdec:	9003      	str	r0, [sp, #12]
1000fdee:	4c05      	ldr	r4, [pc, #20]	; (1000fe04 <at_ble_authenticate+0x11c>)
1000fdf0:	2001      	movs	r0, #1
1000fdf2:	47a0      	blx	r4
1000fdf4:	2000      	movs	r0, #0
1000fdf6:	b00b      	add	sp, #44	; 0x2c
1000fdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdfa:	46c0      	nop			; (mov r8, r8)
1000fdfc:	100101e9 	.word	0x100101e9
1000fe00:	1001b0ea 	.word	0x1001b0ea
1000fe04:	10010759 	.word	0x10010759
1000fe08:	1001b1f8 	.word	0x1001b1f8
1000fe0c:	100158f7 	.word	0x100158f7
1000fe10:	1001b17a 	.word	0x1001b17a
1000fe14:	10010539 	.word	0x10010539

1000fe18 <at_ble_pair_key_reply>:
1000fe18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe1a:	b085      	sub	sp, #20
1000fe1c:	1c05      	adds	r5, r0, #0
1000fe1e:	1c0c      	adds	r4, r1, #0
1000fe20:	1c16      	adds	r6, r2, #0
1000fe22:	2100      	movs	r1, #0
1000fe24:	4668      	mov	r0, sp
1000fe26:	2210      	movs	r2, #16
1000fe28:	4b18      	ldr	r3, [pc, #96]	; (1000fe8c <at_ble_pair_key_reply+0x74>)
1000fe2a:	4798      	blx	r3
1000fe2c:	2101      	movs	r1, #1
1000fe2e:	2e00      	cmp	r6, #0
1000fe30:	d101      	bne.n	1000fe36 <at_ble_pair_key_reply+0x1e>
1000fe32:	1c31      	adds	r1, r6, #0
1000fe34:	466e      	mov	r6, sp
1000fe36:	2c00      	cmp	r4, #0
1000fe38:	d116      	bne.n	1000fe68 <at_ble_pair_key_reply+0x50>
1000fe3a:	2701      	movs	r7, #1
1000fe3c:	1c23      	adds	r3, r4, #0
1000fe3e:	1d70      	adds	r0, r6, #5
1000fe40:	3e01      	subs	r6, #1
1000fe42:	7802      	ldrb	r2, [r0, #0]
1000fe44:	3801      	subs	r0, #1
1000fe46:	3a30      	subs	r2, #48	; 0x30
1000fe48:	437a      	muls	r2, r7
1000fe4a:	189b      	adds	r3, r3, r2
1000fe4c:	220a      	movs	r2, #10
1000fe4e:	4357      	muls	r7, r2
1000fe50:	42b0      	cmp	r0, r6
1000fe52:	d1f6      	bne.n	1000fe42 <at_ble_pair_key_reply+0x2a>
1000fe54:	466a      	mov	r2, sp
1000fe56:	4668      	mov	r0, sp
1000fe58:	7013      	strb	r3, [r2, #0]
1000fe5a:	0a1a      	lsrs	r2, r3, #8
1000fe5c:	7042      	strb	r2, [r0, #1]
1000fe5e:	0c1a      	lsrs	r2, r3, #16
1000fe60:	0e1b      	lsrs	r3, r3, #24
1000fe62:	7082      	strb	r2, [r0, #2]
1000fe64:	70c3      	strb	r3, [r0, #3]
1000fe66:	e009      	b.n	1000fe7c <at_ble_pair_key_reply+0x64>
1000fe68:	20cf      	movs	r0, #207	; 0xcf
1000fe6a:	2c01      	cmp	r4, #1
1000fe6c:	d10c      	bne.n	1000fe88 <at_ble_pair_key_reply+0x70>
1000fe6e:	2300      	movs	r3, #0
1000fe70:	4668      	mov	r0, sp
1000fe72:	5cf2      	ldrb	r2, [r6, r3]
1000fe74:	54c2      	strb	r2, [r0, r3]
1000fe76:	3301      	adds	r3, #1
1000fe78:	2b10      	cmp	r3, #16
1000fe7a:	d1f9      	bne.n	1000fe70 <at_ble_pair_key_reply+0x58>
1000fe7c:	2004      	movs	r0, #4
1000fe7e:	466a      	mov	r2, sp
1000fe80:	1c2b      	adds	r3, r5, #0
1000fe82:	4c03      	ldr	r4, [pc, #12]	; (1000fe90 <at_ble_pair_key_reply+0x78>)
1000fe84:	47a0      	blx	r4
1000fe86:	2000      	movs	r0, #0
1000fe88:	b005      	add	sp, #20
1000fe8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe8c:	10015909 	.word	0x10015909
1000fe90:	100107d5 	.word	0x100107d5

1000fe94 <at_ble_send_slave_sec_request>:
1000fe94:	b570      	push	{r4, r5, r6, lr}
1000fe96:	4b0c      	ldr	r3, [pc, #48]	; (1000fec8 <at_ble_send_slave_sec_request+0x34>)
1000fe98:	1c0e      	adds	r6, r1, #0
1000fe9a:	2100      	movs	r1, #0
1000fe9c:	1c05      	adds	r5, r0, #0
1000fe9e:	1c14      	adds	r4, r2, #0
1000fea0:	4798      	blx	r3
1000fea2:	2301      	movs	r3, #1
1000fea4:	2807      	cmp	r0, #7
1000fea6:	d80d      	bhi.n	1000fec4 <at_ble_send_slave_sec_request+0x30>
1000fea8:	3311      	adds	r3, #17
1000feaa:	4358      	muls	r0, r3
1000feac:	4b07      	ldr	r3, [pc, #28]	; (1000fecc <at_ble_send_slave_sec_request+0x38>)
1000feae:	5cc2      	ldrb	r2, [r0, r3]
1000feb0:	23e0      	movs	r3, #224	; 0xe0
1000feb2:	2a01      	cmp	r2, #1
1000feb4:	d106      	bne.n	1000fec4 <at_ble_send_slave_sec_request+0x30>
1000feb6:	00b1      	lsls	r1, r6, #2
1000feb8:	430c      	orrs	r4, r1
1000feba:	4b05      	ldr	r3, [pc, #20]	; (1000fed0 <at_ble_send_slave_sec_request+0x3c>)
1000febc:	b2e1      	uxtb	r1, r4
1000febe:	1c28      	adds	r0, r5, #0
1000fec0:	4798      	blx	r3
1000fec2:	2300      	movs	r3, #0
1000fec4:	1c18      	adds	r0, r3, #0
1000fec6:	bd70      	pop	{r4, r5, r6, pc}
1000fec8:	100101e9 	.word	0x100101e9
1000fecc:	1001b0ea 	.word	0x1001b0ea
1000fed0:	10010825 	.word	0x10010825

1000fed4 <at_ble_encryption_start>:
1000fed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fed6:	23cf      	movs	r3, #207	; 0xcf
1000fed8:	2900      	cmp	r1, #0
1000feda:	d02b      	beq.n	1000ff34 <at_ble_encryption_start+0x60>
1000fedc:	2a05      	cmp	r2, #5
1000fede:	d829      	bhi.n	1000ff34 <at_ble_encryption_start+0x60>
1000fee0:	2701      	movs	r7, #1
1000fee2:	1c3d      	adds	r5, r7, #0
1000fee4:	2433      	movs	r4, #51	; 0x33
1000fee6:	4095      	lsls	r5, r2
1000fee8:	4225      	tst	r5, r4
1000feea:	d023      	beq.n	1000ff34 <at_ble_encryption_start+0x60>
1000feec:	7e8c      	ldrb	r4, [r1, #26]
1000feee:	3c07      	subs	r4, #7
1000fef0:	2c09      	cmp	r4, #9
1000fef2:	d81f      	bhi.n	1000ff34 <at_ble_encryption_start+0x60>
1000fef4:	4b10      	ldr	r3, [pc, #64]	; (1000ff38 <at_ble_encryption_start+0x64>)
1000fef6:	1c0c      	adds	r4, r1, #0
1000fef8:	2100      	movs	r1, #0
1000fefa:	1c15      	adds	r5, r2, #0
1000fefc:	1c06      	adds	r6, r0, #0
1000fefe:	4798      	blx	r3
1000ff00:	1c3b      	adds	r3, r7, #0
1000ff02:	2807      	cmp	r0, #7
1000ff04:	d816      	bhi.n	1000ff34 <at_ble_encryption_start+0x60>
1000ff06:	2312      	movs	r3, #18
1000ff08:	4358      	muls	r0, r3
1000ff0a:	4b0c      	ldr	r3, [pc, #48]	; (1000ff3c <at_ble_encryption_start+0x68>)
1000ff0c:	5cc7      	ldrb	r7, [r0, r3]
1000ff0e:	23e0      	movs	r3, #224	; 0xe0
1000ff10:	2f00      	cmp	r7, #0
1000ff12:	d10f      	bne.n	1000ff34 <at_ble_encryption_start+0x60>
1000ff14:	1c21      	adds	r1, r4, #0
1000ff16:	221c      	movs	r2, #28
1000ff18:	4b09      	ldr	r3, [pc, #36]	; (1000ff40 <at_ble_encryption_start+0x6c>)
1000ff1a:	480a      	ldr	r0, [pc, #40]	; (1000ff44 <at_ble_encryption_start+0x70>)
1000ff1c:	4798      	blx	r3
1000ff1e:	1c23      	adds	r3, r4, #0
1000ff20:	7ea1      	ldrb	r1, [r4, #26]
1000ff22:	8a22      	ldrh	r2, [r4, #16]
1000ff24:	3312      	adds	r3, #18
1000ff26:	9100      	str	r1, [sp, #0]
1000ff28:	9501      	str	r5, [sp, #4]
1000ff2a:	1c21      	adds	r1, r4, #0
1000ff2c:	1c30      	adds	r0, r6, #0
1000ff2e:	4c06      	ldr	r4, [pc, #24]	; (1000ff48 <at_ble_encryption_start+0x74>)
1000ff30:	47a0      	blx	r4
1000ff32:	1c3b      	adds	r3, r7, #0
1000ff34:	1c18      	adds	r0, r3, #0
1000ff36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ff38:	100101e9 	.word	0x100101e9
1000ff3c:	1001b0ea 	.word	0x1001b0ea
1000ff40:	100158f7 	.word	0x100158f7
1000ff44:	1001b1f8 	.word	0x1001b1f8
1000ff48:	10010865 	.word	0x10010865

1000ff4c <at_ble_encryption_request_reply>:
1000ff4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ff4e:	24cf      	movs	r4, #207	; 0xcf
1000ff50:	2b00      	cmp	r3, #0
1000ff52:	d011      	beq.n	1000ff78 <at_ble_encryption_request_reply+0x2c>
1000ff54:	2a00      	cmp	r2, #0
1000ff56:	d00a      	beq.n	1000ff6e <at_ble_encryption_request_reply+0x22>
1000ff58:	2905      	cmp	r1, #5
1000ff5a:	d80d      	bhi.n	1000ff78 <at_ble_encryption_request_reply+0x2c>
1000ff5c:	2501      	movs	r5, #1
1000ff5e:	2633      	movs	r6, #51	; 0x33
1000ff60:	408d      	lsls	r5, r1
1000ff62:	4235      	tst	r5, r6
1000ff64:	d008      	beq.n	1000ff78 <at_ble_encryption_request_reply+0x2c>
1000ff66:	7e9d      	ldrb	r5, [r3, #26]
1000ff68:	3d07      	subs	r5, #7
1000ff6a:	2d09      	cmp	r5, #9
1000ff6c:	d804      	bhi.n	1000ff78 <at_ble_encryption_request_reply+0x2c>
1000ff6e:	7e9c      	ldrb	r4, [r3, #26]
1000ff70:	9400      	str	r4, [sp, #0]
1000ff72:	4c02      	ldr	r4, [pc, #8]	; (1000ff7c <at_ble_encryption_request_reply+0x30>)
1000ff74:	47a0      	blx	r4
1000ff76:	2400      	movs	r4, #0
1000ff78:	1c20      	adds	r0, r4, #0
1000ff7a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ff7c:	10010921 	.word	0x10010921

1000ff80 <rx_callback>:
1000ff80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff82:	8883      	ldrh	r3, [r0, #4]
1000ff84:	1c01      	adds	r1, r0, #0
1000ff86:	9301      	str	r3, [sp, #4]
1000ff88:	88c5      	ldrh	r5, [r0, #6]
1000ff8a:	8806      	ldrh	r6, [r0, #0]
1000ff8c:	2d00      	cmp	r5, #0
1000ff8e:	d10f      	bne.n	1000ffb0 <rx_callback+0x30>
1000ff90:	1c19      	adds	r1, r3, #0
1000ff92:	1c30      	adds	r0, r6, #0
1000ff94:	4b19      	ldr	r3, [pc, #100]	; (1000fffc <rx_callback+0x7c>)
1000ff96:	1c2a      	adds	r2, r5, #0
1000ff98:	4798      	blx	r3
1000ff9a:	1e03      	subs	r3, r0, #0
1000ff9c:	d105      	bne.n	1000ffaa <rx_callback+0x2a>
1000ff9e:	1c30      	adds	r0, r6, #0
1000ffa0:	9901      	ldr	r1, [sp, #4]
1000ffa2:	1c1a      	adds	r2, r3, #0
1000ffa4:	4c16      	ldr	r4, [pc, #88]	; (10010000 <rx_callback+0x80>)
1000ffa6:	47a0      	blx	r4
1000ffa8:	e027      	b.n	1000fffa <rx_callback+0x7a>
1000ffaa:	4b16      	ldr	r3, [pc, #88]	; (10010004 <rx_callback+0x84>)
1000ffac:	4798      	blx	r3
1000ffae:	e024      	b.n	1000fffa <rx_callback+0x7a>
1000ffb0:	4c15      	ldr	r4, [pc, #84]	; (10010008 <rx_callback+0x88>)
1000ffb2:	4a16      	ldr	r2, [pc, #88]	; (1001000c <rx_callback+0x8c>)
1000ffb4:	6823      	ldr	r3, [r4, #0]
1000ffb6:	6812      	ldr	r2, [r2, #0]
1000ffb8:	18eb      	adds	r3, r5, r3
1000ffba:	4293      	cmp	r3, r2
1000ffbc:	d901      	bls.n	1000ffc2 <rx_callback+0x42>
1000ffbe:	2300      	movs	r3, #0
1000ffc0:	6023      	str	r3, [r4, #0]
1000ffc2:	4f13      	ldr	r7, [pc, #76]	; (10010010 <rx_callback+0x90>)
1000ffc4:	6822      	ldr	r2, [r4, #0]
1000ffc6:	683b      	ldr	r3, [r7, #0]
1000ffc8:	3108      	adds	r1, #8
1000ffca:	1898      	adds	r0, r3, r2
1000ffcc:	1c2a      	adds	r2, r5, #0
1000ffce:	4b11      	ldr	r3, [pc, #68]	; (10010014 <rx_callback+0x94>)
1000ffd0:	4798      	blx	r3
1000ffd2:	683b      	ldr	r3, [r7, #0]
1000ffd4:	6822      	ldr	r2, [r4, #0]
1000ffd6:	1c30      	adds	r0, r6, #0
1000ffd8:	189a      	adds	r2, r3, r2
1000ffda:	9901      	ldr	r1, [sp, #4]
1000ffdc:	4b07      	ldr	r3, [pc, #28]	; (1000fffc <rx_callback+0x7c>)
1000ffde:	4798      	blx	r3
1000ffe0:	2800      	cmp	r0, #0
1000ffe2:	d1e2      	bne.n	1000ffaa <rx_callback+0x2a>
1000ffe4:	6823      	ldr	r3, [r4, #0]
1000ffe6:	683a      	ldr	r2, [r7, #0]
1000ffe8:	1c30      	adds	r0, r6, #0
1000ffea:	18d2      	adds	r2, r2, r3
1000ffec:	9901      	ldr	r1, [sp, #4]
1000ffee:	1c2b      	adds	r3, r5, #0
1000fff0:	4e03      	ldr	r6, [pc, #12]	; (10010000 <rx_callback+0x80>)
1000fff2:	47b0      	blx	r6
1000fff4:	6823      	ldr	r3, [r4, #0]
1000fff6:	18ed      	adds	r5, r5, r3
1000fff8:	6025      	str	r5, [r4, #0]
1000fffa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fffc:	1000e615 	.word	0x1000e615
10010000:	1000e58d 	.word	0x1000e58d
10010004:	1000e079 	.word	0x1000e079
10010008:	1001b254 	.word	0x1001b254
1001000c:	1001a1a0 	.word	0x1001a1a0
10010010:	1001a19c 	.word	0x1001a19c
10010014:	100158f7 	.word	0x100158f7

10010018 <interface_send>:
10010018:	b508      	push	{r3, lr}
1001001a:	4b02      	ldr	r3, [pc, #8]	; (10010024 <interface_send+0xc>)
1001001c:	4798      	blx	r3
1001001e:	2000      	movs	r0, #0
10010020:	bd08      	pop	{r3, pc}
10010022:	46c0      	nop			; (mov r8, r8)
10010024:	1000dd71 	.word	0x1000dd71

10010028 <interface_init>:
10010028:	2280      	movs	r2, #128	; 0x80
1001002a:	b510      	push	{r4, lr}
1001002c:	2100      	movs	r1, #0
1001002e:	1c04      	adds	r4, r0, #0
10010030:	0092      	lsls	r2, r2, #2
10010032:	4b08      	ldr	r3, [pc, #32]	; (10010054 <interface_init+0x2c>)
10010034:	4808      	ldr	r0, [pc, #32]	; (10010058 <interface_init+0x30>)
10010036:	4798      	blx	r3
10010038:	2200      	movs	r2, #0
1001003a:	4b08      	ldr	r3, [pc, #32]	; (1001005c <interface_init+0x34>)
1001003c:	601a      	str	r2, [r3, #0]
1001003e:	4a08      	ldr	r2, [pc, #32]	; (10010060 <interface_init+0x38>)
10010040:	4b08      	ldr	r3, [pc, #32]	; (10010064 <interface_init+0x3c>)
10010042:	601a      	str	r2, [r3, #0]
10010044:	4b08      	ldr	r3, [pc, #32]	; (10010068 <interface_init+0x40>)
10010046:	6922      	ldr	r2, [r4, #16]
10010048:	601a      	str	r2, [r3, #0]
1001004a:	6962      	ldr	r2, [r4, #20]
1001004c:	4b07      	ldr	r3, [pc, #28]	; (1001006c <interface_init+0x44>)
1001004e:	601a      	str	r2, [r3, #0]
10010050:	bd10      	pop	{r4, pc}
10010052:	46c0      	nop			; (mov r8, r8)
10010054:	10015909 	.word	0x10015909
10010058:	1001b458 	.word	0x1001b458
1001005c:	1001b254 	.word	0x1001b254
10010060:	1001b258 	.word	0x1001b258
10010064:	10018700 	.word	0x10018700
10010068:	1001a19c 	.word	0x1001a19c
1001006c:	1001a1a0 	.word	0x1001a1a0

10010070 <platform_cmd_cmpl_signal>:
10010070:	2201      	movs	r2, #1
10010072:	4b01      	ldr	r3, [pc, #4]	; (10010078 <platform_cmd_cmpl_signal+0x8>)
10010074:	601a      	str	r2, [r3, #0]
10010076:	4770      	bx	lr
10010078:	1001a1a4 	.word	0x1001a1a4

1001007c <platform_cmd_cmpl_wait>:
1001007c:	b510      	push	{r4, lr}
1001007e:	1c04      	adds	r4, r0, #0
10010080:	4b07      	ldr	r3, [pc, #28]	; (100100a0 <platform_cmd_cmpl_wait+0x24>)
10010082:	681a      	ldr	r2, [r3, #0]
10010084:	2a01      	cmp	r2, #1
10010086:	d003      	beq.n	10010090 <platform_cmd_cmpl_wait+0x14>
10010088:	4b06      	ldr	r3, [pc, #24]	; (100100a4 <platform_cmd_cmpl_wait+0x28>)
1001008a:	2000      	movs	r0, #0
1001008c:	4798      	blx	r3
1001008e:	e7f7      	b.n	10010080 <platform_cmd_cmpl_wait+0x4>
10010090:	6819      	ldr	r1, [r3, #0]
10010092:	2901      	cmp	r1, #1
10010094:	d102      	bne.n	1001009c <platform_cmd_cmpl_wait+0x20>
10010096:	2200      	movs	r2, #0
10010098:	601a      	str	r2, [r3, #0]
1001009a:	e000      	b.n	1001009e <platform_cmd_cmpl_wait+0x22>
1001009c:	7022      	strb	r2, [r4, #0]
1001009e:	bd10      	pop	{r4, pc}
100100a0:	1001a1a4 	.word	0x1001a1a4
100100a4:	1000de01 	.word	0x1000de01

100100a8 <start_timer>:
100100a8:	4770      	bx	lr

100100aa <stop_timer>:
100100aa:	4770      	bx	lr

100100ac <dbg_le_set_bd_addr_req_handler>:
100100ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100100ae:	466b      	mov	r3, sp
100100b0:	1dde      	adds	r6, r3, #7
100100b2:	2300      	movs	r3, #0
100100b4:	7033      	strb	r3, [r6, #0]
100100b6:	230f      	movs	r3, #15
100100b8:	4c13      	ldr	r4, [pc, #76]	; (10010108 <dbg_le_set_bd_addr_req_handler+0x5c>)
100100ba:	2703      	movs	r7, #3
100100bc:	7023      	strb	r3, [r4, #0]
100100be:	2300      	movs	r3, #0
100100c0:	70e3      	strb	r3, [r4, #3]
100100c2:	4b12      	ldr	r3, [pc, #72]	; (1001010c <dbg_le_set_bd_addr_req_handler+0x60>)
100100c4:	1c01      	adds	r1, r0, #0
100100c6:	881a      	ldrh	r2, [r3, #0]
100100c8:	881b      	ldrh	r3, [r3, #0]
100100ca:	7122      	strb	r2, [r4, #4]
100100cc:	0a1b      	lsrs	r3, r3, #8
100100ce:	2206      	movs	r2, #6
100100d0:	7163      	strb	r3, [r4, #5]
100100d2:	480f      	ldr	r0, [pc, #60]	; (10010110 <dbg_le_set_bd_addr_req_handler+0x64>)
100100d4:	4b0f      	ldr	r3, [pc, #60]	; (10010114 <dbg_le_set_bd_addr_req_handler+0x68>)
100100d6:	7067      	strb	r7, [r4, #1]
100100d8:	70a7      	strb	r7, [r4, #2]
100100da:	4798      	blx	r3
100100dc:	4d0e      	ldr	r5, [pc, #56]	; (10010118 <dbg_le_set_bd_addr_req_handler+0x6c>)
100100de:	4b0f      	ldr	r3, [pc, #60]	; (1001011c <dbg_le_set_bd_addr_req_handler+0x70>)
100100e0:	210e      	movs	r1, #14
100100e2:	802b      	strh	r3, [r5, #0]
100100e4:	2306      	movs	r3, #6
100100e6:	71a3      	strb	r3, [r4, #6]
100100e8:	2300      	movs	r3, #0
100100ea:	1c20      	adds	r0, r4, #0
100100ec:	71e3      	strb	r3, [r4, #7]
100100ee:	4b0c      	ldr	r3, [pc, #48]	; (10010120 <dbg_le_set_bd_addr_req_handler+0x74>)
100100f0:	80af      	strh	r7, [r5, #4]
100100f2:	4798      	blx	r3
100100f4:	1c30      	adds	r0, r6, #0
100100f6:	4b0b      	ldr	r3, [pc, #44]	; (10010124 <dbg_le_set_bd_addr_req_handler+0x78>)
100100f8:	4798      	blx	r3
100100fa:	7833      	ldrb	r3, [r6, #0]
100100fc:	20e2      	movs	r0, #226	; 0xe2
100100fe:	2b00      	cmp	r3, #0
10010100:	d101      	bne.n	10010106 <dbg_le_set_bd_addr_req_handler+0x5a>
10010102:	68ab      	ldr	r3, [r5, #8]
10010104:	7818      	ldrb	r0, [r3, #0]
10010106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010108:	1001b458 	.word	0x1001b458
1001010c:	1001b0e8 	.word	0x1001b0e8
10010110:	1001b460 	.word	0x1001b460
10010114:	100158f7 	.word	0x100158f7
10010118:	1001b0dc 	.word	0x1001b0dc
1001011c:	00000329 	.word	0x00000329
10010120:	10010019 	.word	0x10010019
10010124:	1001007d 	.word	0x1001007d

10010128 <gapc_get_dev_info_cfm.constprop.1>:
10010128:	b538      	push	{r3, r4, r5, lr}
1001012a:	230b      	movs	r3, #11
1001012c:	4c27      	ldr	r4, [pc, #156]	; (100101cc <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1001012e:	7023      	strb	r3, [r4, #0]
10010130:	3303      	adds	r3, #3
10010132:	7063      	strb	r3, [r4, #1]
10010134:	3329      	adds	r3, #41	; 0x29
10010136:	70a3      	strb	r3, [r4, #2]
10010138:	4b25      	ldr	r3, [pc, #148]	; (100101d0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1001013a:	70e1      	strb	r1, [r4, #3]
1001013c:	881a      	ldrh	r2, [r3, #0]
1001013e:	881b      	ldrh	r3, [r3, #0]
10010140:	7122      	strb	r2, [r4, #4]
10010142:	0a1b      	lsrs	r3, r3, #8
10010144:	7163      	strb	r3, [r4, #5]
10010146:	2300      	movs	r3, #0
10010148:	7220      	strb	r0, [r4, #8]
1001014a:	7263      	strb	r3, [r4, #9]
1001014c:	2801      	cmp	r0, #1
1001014e:	d02b      	beq.n	100101a8 <gapc_get_dev_info_cfm.constprop.1+0x80>
10010150:	4298      	cmp	r0, r3
10010152:	d01b      	beq.n	1001018c <gapc_get_dev_info_cfm.constprop.1+0x64>
10010154:	2802      	cmp	r0, #2
10010156:	d12f      	bne.n	100101b8 <gapc_get_dev_info_cfm.constprop.1+0x90>
10010158:	4b1e      	ldr	r3, [pc, #120]	; (100101d4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001015a:	2112      	movs	r1, #18
1001015c:	1c1a      	adds	r2, r3, #0
1001015e:	32ce      	adds	r2, #206	; 0xce
10010160:	8812      	ldrh	r2, [r2, #0]
10010162:	72a2      	strb	r2, [r4, #10]
10010164:	0a12      	lsrs	r2, r2, #8
10010166:	72e2      	strb	r2, [r4, #11]
10010168:	1c1a      	adds	r2, r3, #0
1001016a:	32d0      	adds	r2, #208	; 0xd0
1001016c:	8812      	ldrh	r2, [r2, #0]
1001016e:	7322      	strb	r2, [r4, #12]
10010170:	0a12      	lsrs	r2, r2, #8
10010172:	7362      	strb	r2, [r4, #13]
10010174:	1c1a      	adds	r2, r3, #0
10010176:	32d2      	adds	r2, #210	; 0xd2
10010178:	8812      	ldrh	r2, [r2, #0]
1001017a:	33d4      	adds	r3, #212	; 0xd4
1001017c:	73a2      	strb	r2, [r4, #14]
1001017e:	0a12      	lsrs	r2, r2, #8
10010180:	73e2      	strb	r2, [r4, #15]
10010182:	881b      	ldrh	r3, [r3, #0]
10010184:	7423      	strb	r3, [r4, #16]
10010186:	0a1b      	lsrs	r3, r3, #8
10010188:	7463      	strb	r3, [r4, #17]
1001018a:	e016      	b.n	100101ba <gapc_get_dev_info_cfm.constprop.1+0x92>
1001018c:	4b11      	ldr	r3, [pc, #68]	; (100101d4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001018e:	4912      	ldr	r1, [pc, #72]	; (100101d8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010190:	33aa      	adds	r3, #170	; 0xaa
10010192:	881d      	ldrh	r5, [r3, #0]
10010194:	4811      	ldr	r0, [pc, #68]	; (100101dc <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010196:	0a2b      	lsrs	r3, r5, #8
10010198:	72a5      	strb	r5, [r4, #10]
1001019a:	72e3      	strb	r3, [r4, #11]
1001019c:	1c2a      	adds	r2, r5, #0
1001019e:	4b10      	ldr	r3, [pc, #64]	; (100101e0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100101a0:	350c      	adds	r5, #12
100101a2:	4798      	blx	r3
100101a4:	b2a9      	uxth	r1, r5
100101a6:	e008      	b.n	100101ba <gapc_get_dev_info_cfm.constprop.1+0x92>
100101a8:	4b0a      	ldr	r3, [pc, #40]	; (100101d4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
100101aa:	210c      	movs	r1, #12
100101ac:	33cc      	adds	r3, #204	; 0xcc
100101ae:	881b      	ldrh	r3, [r3, #0]
100101b0:	72a3      	strb	r3, [r4, #10]
100101b2:	0a1b      	lsrs	r3, r3, #8
100101b4:	72e3      	strb	r3, [r4, #11]
100101b6:	e000      	b.n	100101ba <gapc_get_dev_info_cfm.constprop.1+0x92>
100101b8:	210a      	movs	r1, #10
100101ba:	1c0b      	adds	r3, r1, #0
100101bc:	3b08      	subs	r3, #8
100101be:	71a3      	strb	r3, [r4, #6]
100101c0:	121b      	asrs	r3, r3, #8
100101c2:	71e3      	strb	r3, [r4, #7]
100101c4:	1c20      	adds	r0, r4, #0
100101c6:	4b07      	ldr	r3, [pc, #28]	; (100101e4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
100101c8:	4798      	blx	r3
100101ca:	bd38      	pop	{r3, r4, r5, pc}
100101cc:	1001b458 	.word	0x1001b458
100101d0:	1001b0e8 	.word	0x1001b0e8
100101d4:	1001b17a 	.word	0x1001b17a
100101d8:	1001b226 	.word	0x1001b226
100101dc:	1001b464 	.word	0x1001b464
100101e0:	100158f7 	.word	0x100158f7
100101e4:	10010019 	.word	0x10010019

100101e8 <check_ConnData_idx_role>:
100101e8:	4b0c      	ldr	r3, [pc, #48]	; (1001021c <check_ConnData_idx_role+0x34>)
100101ea:	b570      	push	{r4, r5, r6, lr}
100101ec:	1c04      	adds	r4, r0, #0
100101ee:	2008      	movs	r0, #8
100101f0:	429c      	cmp	r4, r3
100101f2:	d011      	beq.n	10010218 <check_ConnData_idx_role+0x30>
100101f4:	2300      	movs	r3, #0
100101f6:	2212      	movs	r2, #18
100101f8:	435a      	muls	r2, r3
100101fa:	4d09      	ldr	r5, [pc, #36]	; (10010220 <check_ConnData_idx_role+0x38>)
100101fc:	b2d8      	uxtb	r0, r3
100101fe:	1956      	adds	r6, r2, r5
10010200:	8976      	ldrh	r6, [r6, #10]
10010202:	42a6      	cmp	r6, r4
10010204:	d104      	bne.n	10010210 <check_ConnData_idx_role+0x28>
10010206:	2900      	cmp	r1, #0
10010208:	d006      	beq.n	10010218 <check_ConnData_idx_role+0x30>
1001020a:	5d53      	ldrb	r3, [r2, r5]
1001020c:	700b      	strb	r3, [r1, #0]
1001020e:	e003      	b.n	10010218 <check_ConnData_idx_role+0x30>
10010210:	3301      	adds	r3, #1
10010212:	2b08      	cmp	r3, #8
10010214:	d1ef      	bne.n	100101f6 <check_ConnData_idx_role+0xe>
10010216:	1c18      	adds	r0, r3, #0
10010218:	bd70      	pop	{r4, r5, r6, pc}
1001021a:	46c0      	nop			; (mov r8, r8)
1001021c:	0000ffff 	.word	0x0000ffff
10010220:	1001b0ea 	.word	0x1001b0ea

10010224 <check_ConnData_emptyEntry>:
10010224:	2300      	movs	r3, #0
10010226:	2212      	movs	r2, #18
10010228:	435a      	muls	r2, r3
1001022a:	4906      	ldr	r1, [pc, #24]	; (10010244 <check_ConnData_emptyEntry+0x20>)
1001022c:	b2d8      	uxtb	r0, r3
1001022e:	1852      	adds	r2, r2, r1
10010230:	8951      	ldrh	r1, [r2, #10]
10010232:	4a05      	ldr	r2, [pc, #20]	; (10010248 <check_ConnData_emptyEntry+0x24>)
10010234:	4291      	cmp	r1, r2
10010236:	d003      	beq.n	10010240 <check_ConnData_emptyEntry+0x1c>
10010238:	3301      	adds	r3, #1
1001023a:	2b08      	cmp	r3, #8
1001023c:	d1f3      	bne.n	10010226 <check_ConnData_emptyEntry+0x2>
1001023e:	1c18      	adds	r0, r3, #0
10010240:	4770      	bx	lr
10010242:	46c0      	nop			; (mov r8, r8)
10010244:	1001b0ea 	.word	0x1001b0ea
10010248:	0000ffff 	.word	0x0000ffff

1001024c <gapc_cmp_evt>:
1001024c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001024e:	780b      	ldrb	r3, [r1, #0]
10010250:	1c05      	adds	r5, r0, #0
10010252:	1e58      	subs	r0, r3, #1
10010254:	784e      	ldrb	r6, [r1, #1]
10010256:	280f      	cmp	r0, #15
10010258:	d85a      	bhi.n	10010310 <gapc_cmp_evt+0xc4>
1001025a:	1c14      	adds	r4, r2, #0
1001025c:	f002 fcb4 	bl	10012bc8 <__gnu_thumb1_case_uqi>
10010260:	5858440a 	.word	0x5858440a
10010264:	4b584444 	.word	0x4b584444
10010268:	0825122d 	.word	0x0825122d
1001026c:	3e395858 	.word	0x3e395858
10010270:	203b      	movs	r0, #59	; 0x3b
10010272:	e04e      	b.n	10010312 <gapc_cmp_evt+0xc6>
10010274:	203b      	movs	r0, #59	; 0x3b
10010276:	2e00      	cmp	r6, #0
10010278:	d04b      	beq.n	10010312 <gapc_cmp_evt+0xc6>
1001027a:	0a2d      	lsrs	r5, r5, #8
1001027c:	8015      	strh	r5, [r2, #0]
1001027e:	7096      	strb	r6, [r2, #2]
10010280:	3835      	subs	r0, #53	; 0x35
10010282:	e046      	b.n	10010312 <gapc_cmp_evt+0xc6>
10010284:	466b      	mov	r3, sp
10010286:	1ddf      	adds	r7, r3, #7
10010288:	2301      	movs	r3, #1
1001028a:	0a2d      	lsrs	r5, r5, #8
1001028c:	703b      	strb	r3, [r7, #0]
1001028e:	1c28      	adds	r0, r5, #0
10010290:	1c39      	adds	r1, r7, #0
10010292:	4b20      	ldr	r3, [pc, #128]	; (10010314 <gapc_cmp_evt+0xc8>)
10010294:	4798      	blx	r3
10010296:	2807      	cmp	r0, #7
10010298:	d803      	bhi.n	100102a2 <gapc_cmp_evt+0x56>
1001029a:	783b      	ldrb	r3, [r7, #0]
1001029c:	203b      	movs	r0, #59	; 0x3b
1001029e:	2b00      	cmp	r3, #0
100102a0:	d037      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102a2:	8065      	strh	r5, [r4, #2]
100102a4:	7126      	strb	r6, [r4, #4]
100102a6:	2009      	movs	r0, #9
100102a8:	e033      	b.n	10010312 <gapc_cmp_evt+0xc6>
100102aa:	203b      	movs	r0, #59	; 0x3b
100102ac:	2e00      	cmp	r6, #0
100102ae:	d030      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102b0:	0a2d      	lsrs	r5, r5, #8
100102b2:	8015      	strh	r5, [r2, #0]
100102b4:	7096      	strb	r6, [r2, #2]
100102b6:	382d      	subs	r0, #45	; 0x2d
100102b8:	e02b      	b.n	10010312 <gapc_cmp_evt+0xc6>
100102ba:	203b      	movs	r0, #59	; 0x3b
100102bc:	2e00      	cmp	r6, #0
100102be:	d028      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102c0:	2300      	movs	r3, #0
100102c2:	0a2d      	lsrs	r5, r5, #8
100102c4:	8015      	strh	r5, [r2, #0]
100102c6:	7096      	strb	r6, [r2, #2]
100102c8:	8093      	strh	r3, [r2, #4]
100102ca:	80d3      	strh	r3, [r2, #6]
100102cc:	8113      	strh	r3, [r2, #8]
100102ce:	3834      	subs	r0, #52	; 0x34
100102d0:	e01f      	b.n	10010312 <gapc_cmp_evt+0xc6>
100102d2:	203b      	movs	r0, #59	; 0x3b
100102d4:	2e00      	cmp	r6, #0
100102d6:	d01c      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102d8:	7216      	strb	r6, [r2, #8]
100102da:	e003      	b.n	100102e4 <gapc_cmp_evt+0x98>
100102dc:	203b      	movs	r0, #59	; 0x3b
100102de:	2e00      	cmp	r6, #0
100102e0:	d017      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102e2:	7116      	strb	r6, [r2, #4]
100102e4:	3812      	subs	r0, #18
100102e6:	e014      	b.n	10010312 <gapc_cmp_evt+0xc6>
100102e8:	203b      	movs	r0, #59	; 0x3b
100102ea:	2e00      	cmp	r6, #0
100102ec:	d011      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102ee:	7093      	strb	r3, [r2, #2]
100102f0:	70d6      	strb	r6, [r2, #3]
100102f2:	382a      	subs	r0, #42	; 0x2a
100102f4:	e00d      	b.n	10010312 <gapc_cmp_evt+0xc6>
100102f6:	203b      	movs	r0, #59	; 0x3b
100102f8:	2e00      	cmp	r6, #0
100102fa:	d00a      	beq.n	10010312 <gapc_cmp_evt+0xc6>
100102fc:	0a2d      	lsrs	r5, r5, #8
100102fe:	7016      	strb	r6, [r2, #0]
10010300:	8055      	strh	r5, [r2, #2]
10010302:	1d10      	adds	r0, r2, #4
10010304:	2100      	movs	r1, #0
10010306:	2205      	movs	r2, #5
10010308:	4b03      	ldr	r3, [pc, #12]	; (10010318 <gapc_cmp_evt+0xcc>)
1001030a:	4798      	blx	r3
1001030c:	2012      	movs	r0, #18
1001030e:	e000      	b.n	10010312 <gapc_cmp_evt+0xc6>
10010310:	2000      	movs	r0, #0
10010312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010314:	100101e9 	.word	0x100101e9
10010318:	10015909 	.word	0x10015909

1001031c <gapc_connection_cfm_handler>:
1001031c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001031e:	b085      	sub	sp, #20
10010320:	1c1d      	adds	r5, r3, #0
10010322:	ab0a      	add	r3, sp, #40	; 0x28
10010324:	781b      	ldrb	r3, [r3, #0]
10010326:	9201      	str	r2, [sp, #4]
10010328:	9302      	str	r3, [sp, #8]
1001032a:	ab0b      	add	r3, sp, #44	; 0x2c
1001032c:	781b      	ldrb	r3, [r3, #0]
1001032e:	1c07      	adds	r7, r0, #0
10010330:	9303      	str	r3, [sp, #12]
10010332:	ab0c      	add	r3, sp, #48	; 0x30
10010334:	881a      	ldrh	r2, [r3, #0]
10010336:	2302      	movs	r3, #2
10010338:	1c0e      	adds	r6, r1, #0
1001033a:	4c23      	ldr	r4, [pc, #140]	; (100103c8 <gapc_connection_cfm_handler+0xac>)
1001033c:	1c39      	adds	r1, r7, #0
1001033e:	7023      	strb	r3, [r4, #0]
10010340:	330c      	adds	r3, #12
10010342:	7063      	strb	r3, [r4, #1]
10010344:	70a3      	strb	r3, [r4, #2]
10010346:	4b21      	ldr	r3, [pc, #132]	; (100103cc <gapc_connection_cfm_handler+0xb0>)
10010348:	70e2      	strb	r2, [r4, #3]
1001034a:	881a      	ldrh	r2, [r3, #0]
1001034c:	881b      	ldrh	r3, [r3, #0]
1001034e:	7122      	strb	r2, [r4, #4]
10010350:	0a1b      	lsrs	r3, r3, #8
10010352:	4f1f      	ldr	r7, [pc, #124]	; (100103d0 <gapc_connection_cfm_handler+0xb4>)
10010354:	2210      	movs	r2, #16
10010356:	481f      	ldr	r0, [pc, #124]	; (100103d4 <gapc_connection_cfm_handler+0xb8>)
10010358:	7163      	strb	r3, [r4, #5]
1001035a:	47b8      	blx	r7
1001035c:	0a33      	lsrs	r3, r6, #8
1001035e:	7626      	strb	r6, [r4, #24]
10010360:	7663      	strb	r3, [r4, #25]
10010362:	9901      	ldr	r1, [sp, #4]
10010364:	0c33      	lsrs	r3, r6, #16
10010366:	2210      	movs	r2, #16
10010368:	0e36      	lsrs	r6, r6, #24
1001036a:	481b      	ldr	r0, [pc, #108]	; (100103d8 <gapc_connection_cfm_handler+0xbc>)
1001036c:	76a3      	strb	r3, [r4, #26]
1001036e:	76e6      	strb	r6, [r4, #27]
10010370:	47b8      	blx	r7
10010372:	1c23      	adds	r3, r4, #0
10010374:	332c      	adds	r3, #44	; 0x2c
10010376:	701d      	strb	r5, [r3, #0]
10010378:	1c23      	adds	r3, r4, #0
1001037a:	0a2a      	lsrs	r2, r5, #8
1001037c:	332d      	adds	r3, #45	; 0x2d
1001037e:	701a      	strb	r2, [r3, #0]
10010380:	1c23      	adds	r3, r4, #0
10010382:	0c2a      	lsrs	r2, r5, #16
10010384:	332e      	adds	r3, #46	; 0x2e
10010386:	701a      	strb	r2, [r3, #0]
10010388:	1c23      	adds	r3, r4, #0
1001038a:	0e2d      	lsrs	r5, r5, #24
1001038c:	332f      	adds	r3, #47	; 0x2f
1001038e:	466a      	mov	r2, sp
10010390:	701d      	strb	r5, [r3, #0]
10010392:	1c23      	adds	r3, r4, #0
10010394:	7a12      	ldrb	r2, [r2, #8]
10010396:	3330      	adds	r3, #48	; 0x30
10010398:	701a      	strb	r2, [r3, #0]
1001039a:	1c23      	adds	r3, r4, #0
1001039c:	2500      	movs	r5, #0
1001039e:	3331      	adds	r3, #49	; 0x31
100103a0:	466a      	mov	r2, sp
100103a2:	701d      	strb	r5, [r3, #0]
100103a4:	1c23      	adds	r3, r4, #0
100103a6:	7b12      	ldrb	r2, [r2, #12]
100103a8:	3332      	adds	r3, #50	; 0x32
100103aa:	701a      	strb	r2, [r3, #0]
100103ac:	1c23      	adds	r3, r4, #0
100103ae:	3333      	adds	r3, #51	; 0x33
100103b0:	701d      	strb	r5, [r3, #0]
100103b2:	232c      	movs	r3, #44	; 0x2c
100103b4:	1c20      	adds	r0, r4, #0
100103b6:	71a3      	strb	r3, [r4, #6]
100103b8:	2134      	movs	r1, #52	; 0x34
100103ba:	4b08      	ldr	r3, [pc, #32]	; (100103dc <gapc_connection_cfm_handler+0xc0>)
100103bc:	71e5      	strb	r5, [r4, #7]
100103be:	4798      	blx	r3
100103c0:	1c28      	adds	r0, r5, #0
100103c2:	b005      	add	sp, #20
100103c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103c6:	46c0      	nop			; (mov r8, r8)
100103c8:	1001b458 	.word	0x1001b458
100103cc:	1001b0e8 	.word	0x1001b0e8
100103d0:	100158f7 	.word	0x100158f7
100103d4:	1001b460 	.word	0x1001b460
100103d8:	1001b474 	.word	0x1001b474
100103dc:	10010019 	.word	0x10010019

100103e0 <gapc_con_req_ind>:
100103e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100103e2:	7845      	ldrb	r5, [r0, #1]
100103e4:	7803      	ldrb	r3, [r0, #0]
100103e6:	4c30      	ldr	r4, [pc, #192]	; (100104a8 <gapc_con_req_ind+0xc8>)
100103e8:	022d      	lsls	r5, r5, #8
100103ea:	431d      	orrs	r5, r3
100103ec:	85a5      	strh	r5, [r4, #44]	; 0x2c
100103ee:	78c3      	ldrb	r3, [r0, #3]
100103f0:	7882      	ldrb	r2, [r0, #2]
100103f2:	b08b      	sub	sp, #44	; 0x2c
100103f4:	021b      	lsls	r3, r3, #8
100103f6:	431a      	orrs	r2, r3
100103f8:	466b      	mov	r3, sp
100103fa:	9205      	str	r2, [sp, #20]
100103fc:	8a9b      	ldrh	r3, [r3, #20]
100103fe:	2120      	movs	r1, #32
10010400:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010402:	7943      	ldrb	r3, [r0, #5]
10010404:	7902      	ldrb	r2, [r0, #4]
10010406:	021b      	lsls	r3, r3, #8
10010408:	431a      	orrs	r2, r3
1001040a:	466b      	mov	r3, sp
1001040c:	9206      	str	r2, [sp, #24]
1001040e:	8b1b      	ldrh	r3, [r3, #24]
10010410:	1c06      	adds	r6, r0, #0
10010412:	8623      	strh	r3, [r4, #48]	; 0x30
10010414:	79c3      	ldrb	r3, [r0, #7]
10010416:	7982      	ldrb	r2, [r0, #6]
10010418:	021b      	lsls	r3, r3, #8
1001041a:	431a      	orrs	r2, r3
1001041c:	466b      	mov	r3, sp
1001041e:	9207      	str	r2, [sp, #28]
10010420:	466a      	mov	r2, sp
10010422:	8b9b      	ldrh	r3, [r3, #28]
10010424:	1852      	adds	r2, r2, r1
10010426:	8663      	strh	r3, [r4, #50]	; 0x32
10010428:	7a43      	ldrb	r3, [r0, #9]
1001042a:	1c01      	adds	r1, r0, #0
1001042c:	9308      	str	r3, [sp, #32]
1001042e:	1c23      	adds	r3, r4, #0
10010430:	7812      	ldrb	r2, [r2, #0]
10010432:	3377      	adds	r3, #119	; 0x77
10010434:	3478      	adds	r4, #120	; 0x78
10010436:	701a      	strb	r2, [r3, #0]
10010438:	310a      	adds	r1, #10
1001043a:	2206      	movs	r2, #6
1001043c:	4b1b      	ldr	r3, [pc, #108]	; (100104ac <gapc_con_req_ind+0xcc>)
1001043e:	1c20      	adds	r0, r4, #0
10010440:	4798      	blx	r3
10010442:	7c33      	ldrb	r3, [r6, #16]
10010444:	9309      	str	r3, [sp, #36]	; 0x24
10010446:	4b1a      	ldr	r3, [pc, #104]	; (100104b0 <gapc_con_req_ind+0xd0>)
10010448:	4798      	blx	r3
1001044a:	4e1a      	ldr	r6, [pc, #104]	; (100104b4 <gapc_con_req_ind+0xd4>)
1001044c:	1e07      	subs	r7, r0, #0
1001044e:	2f07      	cmp	r7, #7
10010450:	d81b      	bhi.n	1001048a <gapc_con_req_ind+0xaa>
10010452:	2312      	movs	r3, #18
10010454:	4343      	muls	r3, r0
10010456:	18f0      	adds	r0, r6, r3
10010458:	8145      	strh	r5, [r0, #10]
1001045a:	4669      	mov	r1, sp
1001045c:	2524      	movs	r5, #36	; 0x24
1001045e:	1949      	adds	r1, r1, r5
10010460:	7809      	ldrb	r1, [r1, #0]
10010462:	2206      	movs	r2, #6
10010464:	54f1      	strb	r1, [r6, r3]
10010466:	2120      	movs	r1, #32
10010468:	466b      	mov	r3, sp
1001046a:	185b      	adds	r3, r3, r1
1001046c:	781b      	ldrb	r3, [r3, #0]
1001046e:	1c21      	adds	r1, r4, #0
10010470:	7043      	strb	r3, [r0, #1]
10010472:	466b      	mov	r3, sp
10010474:	8a9b      	ldrh	r3, [r3, #20]
10010476:	3002      	adds	r0, #2
10010478:	8143      	strh	r3, [r0, #10]
1001047a:	466b      	mov	r3, sp
1001047c:	8b1b      	ldrh	r3, [r3, #24]
1001047e:	8183      	strh	r3, [r0, #12]
10010480:	466b      	mov	r3, sp
10010482:	8b9b      	ldrh	r3, [r3, #28]
10010484:	81c3      	strh	r3, [r0, #14]
10010486:	4b09      	ldr	r3, [pc, #36]	; (100104ac <gapc_con_req_ind+0xcc>)
10010488:	4798      	blx	r3
1001048a:	2112      	movs	r1, #18
1001048c:	2300      	movs	r3, #0
1001048e:	434f      	muls	r7, r1
10010490:	9300      	str	r3, [sp, #0]
10010492:	9301      	str	r3, [sp, #4]
10010494:	19f6      	adds	r6, r6, r7
10010496:	8971      	ldrh	r1, [r6, #10]
10010498:	4a07      	ldr	r2, [pc, #28]	; (100104b8 <gapc_con_req_ind+0xd8>)
1001049a:	9102      	str	r1, [sp, #8]
1001049c:	1c10      	adds	r0, r2, #0
1001049e:	1c19      	adds	r1, r3, #0
100104a0:	4c06      	ldr	r4, [pc, #24]	; (100104bc <gapc_con_req_ind+0xdc>)
100104a2:	47a0      	blx	r4
100104a4:	b00b      	add	sp, #44	; 0x2c
100104a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104a8:	1001b17a 	.word	0x1001b17a
100104ac:	100158f7 	.word	0x100158f7
100104b0:	10010225 	.word	0x10010225
100104b4:	1001b0ea 	.word	0x1001b0ea
100104b8:	1001a1a8 	.word	0x1001a1a8
100104bc:	1001031d 	.word	0x1001031d

100104c0 <gapc_disconnect_cmd_handler>:
100104c0:	2204      	movs	r2, #4
100104c2:	b510      	push	{r4, lr}
100104c4:	4b0c      	ldr	r3, [pc, #48]	; (100104f8 <gapc_disconnect_cmd_handler+0x38>)
100104c6:	2400      	movs	r4, #0
100104c8:	701a      	strb	r2, [r3, #0]
100104ca:	320a      	adds	r2, #10
100104cc:	705a      	strb	r2, [r3, #1]
100104ce:	709a      	strb	r2, [r3, #2]
100104d0:	4a0a      	ldr	r2, [pc, #40]	; (100104fc <gapc_disconnect_cmd_handler+0x3c>)
100104d2:	70d9      	strb	r1, [r3, #3]
100104d4:	8811      	ldrh	r1, [r2, #0]
100104d6:	8812      	ldrh	r2, [r2, #0]
100104d8:	7119      	strb	r1, [r3, #4]
100104da:	0a12      	lsrs	r2, r2, #8
100104dc:	715a      	strb	r2, [r3, #5]
100104de:	2201      	movs	r2, #1
100104e0:	721a      	strb	r2, [r3, #8]
100104e2:	1892      	adds	r2, r2, r2
100104e4:	7258      	strb	r0, [r3, #9]
100104e6:	719a      	strb	r2, [r3, #6]
100104e8:	71dc      	strb	r4, [r3, #7]
100104ea:	1c18      	adds	r0, r3, #0
100104ec:	210a      	movs	r1, #10
100104ee:	4b04      	ldr	r3, [pc, #16]	; (10010500 <gapc_disconnect_cmd_handler+0x40>)
100104f0:	4798      	blx	r3
100104f2:	1c20      	adds	r0, r4, #0
100104f4:	bd10      	pop	{r4, pc}
100104f6:	46c0      	nop			; (mov r8, r8)
100104f8:	1001b458 	.word	0x1001b458
100104fc:	1001b0e8 	.word	0x1001b0e8
10010500:	10010019 	.word	0x10010019

10010504 <gapc_disconnect_ind>:
10010504:	1c02      	adds	r2, r0, #0
10010506:	b508      	push	{r3, lr}
10010508:	7843      	ldrb	r3, [r0, #1]
1001050a:	7800      	ldrb	r0, [r0, #0]
1001050c:	021b      	lsls	r3, r3, #8
1001050e:	4318      	orrs	r0, r3
10010510:	8008      	strh	r0, [r1, #0]
10010512:	7893      	ldrb	r3, [r2, #2]
10010514:	708b      	strb	r3, [r1, #2]
10010516:	2100      	movs	r1, #0
10010518:	4b05      	ldr	r3, [pc, #20]	; (10010530 <gapc_disconnect_ind+0x2c>)
1001051a:	4798      	blx	r3
1001051c:	2807      	cmp	r0, #7
1001051e:	d806      	bhi.n	1001052e <gapc_disconnect_ind+0x2a>
10010520:	2312      	movs	r3, #18
10010522:	4358      	muls	r0, r3
10010524:	4b03      	ldr	r3, [pc, #12]	; (10010534 <gapc_disconnect_ind+0x30>)
10010526:	1818      	adds	r0, r3, r0
10010528:	2301      	movs	r3, #1
1001052a:	425b      	negs	r3, r3
1001052c:	8143      	strh	r3, [r0, #10]
1001052e:	bd08      	pop	{r3, pc}
10010530:	100101e9 	.word	0x100101e9
10010534:	1001b0ea 	.word	0x1001b0ea

10010538 <gapc_bond_cmd_handler>:
10010538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001053a:	9300      	str	r3, [sp, #0]
1001053c:	2312      	movs	r3, #18
1001053e:	1c04      	adds	r4, r0, #0
10010540:	a808      	add	r0, sp, #32
10010542:	7807      	ldrb	r7, [r0, #0]
10010544:	a809      	add	r0, sp, #36	; 0x24
10010546:	7806      	ldrb	r6, [r0, #0]
10010548:	a80a      	add	r0, sp, #40	; 0x28
1001054a:	7805      	ldrb	r5, [r0, #0]
1001054c:	a80b      	add	r0, sp, #44	; 0x2c
1001054e:	7800      	ldrb	r0, [r0, #0]
10010550:	9001      	str	r0, [sp, #4]
10010552:	4810      	ldr	r0, [pc, #64]	; (10010594 <gapc_bond_cmd_handler+0x5c>)
10010554:	7003      	strb	r3, [r0, #0]
10010556:	230e      	movs	r3, #14
10010558:	70c4      	strb	r4, [r0, #3]
1001055a:	4c0f      	ldr	r4, [pc, #60]	; (10010598 <gapc_bond_cmd_handler+0x60>)
1001055c:	7043      	strb	r3, [r0, #1]
1001055e:	7083      	strb	r3, [r0, #2]
10010560:	8823      	ldrh	r3, [r4, #0]
10010562:	8824      	ldrh	r4, [r4, #0]
10010564:	7103      	strb	r3, [r0, #4]
10010566:	466b      	mov	r3, sp
10010568:	781b      	ldrb	r3, [r3, #0]
1001056a:	0a24      	lsrs	r4, r4, #8
1001056c:	72c3      	strb	r3, [r0, #11]
1001056e:	466b      	mov	r3, sp
10010570:	791b      	ldrb	r3, [r3, #4]
10010572:	7144      	strb	r4, [r0, #5]
10010574:	73c3      	strb	r3, [r0, #15]
10010576:	2308      	movs	r3, #8
10010578:	7183      	strb	r3, [r0, #6]
1001057a:	2300      	movs	r3, #0
1001057c:	240a      	movs	r4, #10
1001057e:	7241      	strb	r1, [r0, #9]
10010580:	71c3      	strb	r3, [r0, #7]
10010582:	2110      	movs	r1, #16
10010584:	4b05      	ldr	r3, [pc, #20]	; (1001059c <gapc_bond_cmd_handler+0x64>)
10010586:	7307      	strb	r7, [r0, #12]
10010588:	7346      	strb	r6, [r0, #13]
1001058a:	7385      	strb	r5, [r0, #14]
1001058c:	7204      	strb	r4, [r0, #8]
1001058e:	7282      	strb	r2, [r0, #10]
10010590:	4798      	blx	r3
10010592:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010594:	1001b458 	.word	0x1001b458
10010598:	1001b0e8 	.word	0x1001b0e8
1001059c:	10010019 	.word	0x10010019

100105a0 <gapc_bond_ind>:
100105a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100105a2:	780e      	ldrb	r6, [r1, #0]
100105a4:	1c03      	adds	r3, r0, #0
100105a6:	1eb0      	subs	r0, r6, #2
100105a8:	2805      	cmp	r0, #5
100105aa:	d85d      	bhi.n	10010668 <gapc_bond_ind+0xc8>
100105ac:	1c15      	adds	r5, r2, #0
100105ae:	1c0c      	adds	r4, r1, #0
100105b0:	f002 fb0a 	bl	10012bc8 <__gnu_thumb1_case_uqi>
100105b4:	2f5a030d 	.word	0x2f5a030d
100105b8:	4740      	.short	0x4740
100105ba:	2009      	movs	r0, #9
100105bc:	2a00      	cmp	r2, #0
100105be:	d054      	beq.n	1001066a <gapc_bond_ind+0xca>
100105c0:	0a1b      	lsrs	r3, r3, #8
100105c2:	8053      	strh	r3, [r2, #2]
100105c4:	788b      	ldrb	r3, [r1, #2]
100105c6:	4829      	ldr	r0, [pc, #164]	; (1001066c <gapc_bond_ind+0xcc>)
100105c8:	7113      	strb	r3, [r2, #4]
100105ca:	2100      	movs	r1, #0
100105cc:	e01c      	b.n	10010608 <gapc_bond_ind+0x68>
100105ce:	2009      	movs	r0, #9
100105d0:	2a00      	cmp	r2, #0
100105d2:	d04a      	beq.n	1001066a <gapc_bond_ind+0xca>
100105d4:	4c25      	ldr	r4, [pc, #148]	; (1001066c <gapc_bond_ind+0xcc>)
100105d6:	0a1b      	lsrs	r3, r3, #8
100105d8:	8053      	strh	r3, [r2, #2]
100105da:	788b      	ldrb	r3, [r1, #2]
100105dc:	2700      	movs	r7, #0
100105de:	1c10      	adds	r0, r2, #0
100105e0:	1c21      	adds	r1, r4, #0
100105e2:	7013      	strb	r3, [r2, #0]
100105e4:	4e22      	ldr	r6, [pc, #136]	; (10010670 <gapc_bond_ind+0xd0>)
100105e6:	7117      	strb	r7, [r2, #4]
100105e8:	312e      	adds	r1, #46	; 0x2e
100105ea:	2217      	movs	r2, #23
100105ec:	3032      	adds	r0, #50	; 0x32
100105ee:	47b0      	blx	r6
100105f0:	1c28      	adds	r0, r5, #0
100105f2:	1c21      	adds	r1, r4, #0
100105f4:	2210      	movs	r2, #16
100105f6:	311e      	adds	r1, #30
100105f8:	3022      	adds	r0, #34	; 0x22
100105fa:	47b0      	blx	r6
100105fc:	1ca1      	adds	r1, r4, #2
100105fe:	1da8      	adds	r0, r5, #6
10010600:	221c      	movs	r2, #28
10010602:	47b0      	blx	r6
10010604:	1c20      	adds	r0, r4, #0
10010606:	1c39      	adds	r1, r7, #0
10010608:	2246      	movs	r2, #70	; 0x46
1001060a:	4b1a      	ldr	r3, [pc, #104]	; (10010674 <gapc_bond_ind+0xd4>)
1001060c:	4798      	blx	r3
1001060e:	2009      	movs	r0, #9
10010610:	e02b      	b.n	1001066a <gapc_bond_ind+0xca>
10010612:	4d16      	ldr	r5, [pc, #88]	; (1001066c <gapc_bond_ind+0xcc>)
10010614:	3102      	adds	r1, #2
10010616:	1c28      	adds	r0, r5, #0
10010618:	2210      	movs	r2, #16
1001061a:	4e15      	ldr	r6, [pc, #84]	; (10010670 <gapc_bond_ind+0xd0>)
1001061c:	302e      	adds	r0, #46	; 0x2e
1001061e:	47b0      	blx	r6
10010620:	1c28      	adds	r0, r5, #0
10010622:	1c21      	adds	r1, r4, #0
10010624:	303f      	adds	r0, #63	; 0x3f
10010626:	3112      	adds	r1, #18
10010628:	2206      	movs	r2, #6
1001062a:	47b0      	blx	r6
1001062c:	7e23      	ldrb	r3, [r4, #24]
1001062e:	353e      	adds	r5, #62	; 0x3e
10010630:	702b      	strb	r3, [r5, #0]
10010632:	e019      	b.n	10010668 <gapc_bond_ind+0xc8>
10010634:	480d      	ldr	r0, [pc, #52]	; (1001066c <gapc_bond_ind+0xcc>)
10010636:	3102      	adds	r1, #2
10010638:	2210      	movs	r2, #16
1001063a:	4b0d      	ldr	r3, [pc, #52]	; (10010670 <gapc_bond_ind+0xd0>)
1001063c:	301e      	adds	r0, #30
1001063e:	4798      	blx	r3
10010640:	e012      	b.n	10010668 <gapc_bond_ind+0xc8>
10010642:	4d0a      	ldr	r5, [pc, #40]	; (1001066c <gapc_bond_ind+0xcc>)
10010644:	3102      	adds	r1, #2
10010646:	2210      	movs	r2, #16
10010648:	4e09      	ldr	r6, [pc, #36]	; (10010670 <gapc_bond_ind+0xd0>)
1001064a:	1ca8      	adds	r0, r5, #2
1001064c:	47b0      	blx	r6
1001064e:	1c28      	adds	r0, r5, #0
10010650:	1c21      	adds	r1, r4, #0
10010652:	7ce3      	ldrb	r3, [r4, #19]
10010654:	7ca2      	ldrb	r2, [r4, #18]
10010656:	021b      	lsls	r3, r3, #8
10010658:	4313      	orrs	r3, r2
1001065a:	3014      	adds	r0, #20
1001065c:	3114      	adds	r1, #20
1001065e:	2208      	movs	r2, #8
10010660:	826b      	strh	r3, [r5, #18]
10010662:	47b0      	blx	r6
10010664:	7f23      	ldrb	r3, [r4, #28]
10010666:	772b      	strb	r3, [r5, #28]
10010668:	2000      	movs	r0, #0
1001066a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001066c:	1001a1d8 	.word	0x1001a1d8
10010670:	100158f7 	.word	0x100158f7
10010674:	10015909 	.word	0x10015909

10010678 <gapc_bond_req_ind>:
10010678:	b570      	push	{r4, r5, r6, lr}
1001067a:	780c      	ldrb	r4, [r1, #0]
1001067c:	1c03      	adds	r3, r0, #0
1001067e:	7849      	ldrb	r1, [r1, #1]
10010680:	2c07      	cmp	r4, #7
10010682:	d85c      	bhi.n	1001073e <gapc_bond_req_ind+0xc6>
10010684:	1c20      	adds	r0, r4, #0
10010686:	f002 fa9f 	bl	10012bc8 <__gnu_thumb1_case_uqi>
1001068a:	5a04      	.short	0x5a04
1001068c:	5a0b5a5a 	.word	0x5a0b5a5a
10010690:	1f1f      	.short	0x1f1f
10010692:	200a      	movs	r0, #10
10010694:	2a00      	cmp	r2, #0
10010696:	d053      	beq.n	10010740 <gapc_bond_req_ind+0xc8>
10010698:	0a1b      	lsrs	r3, r3, #8
1001069a:	8013      	strh	r3, [r2, #0]
1001069c:	7091      	strb	r1, [r2, #2]
1001069e:	e04f      	b.n	10010740 <gapc_bond_req_ind+0xc8>
100106a0:	2a00      	cmp	r2, #0
100106a2:	d00b      	beq.n	100106bc <gapc_bond_req_ind+0x44>
100106a4:	0a1b      	lsrs	r3, r3, #8
100106a6:	8013      	strh	r3, [r2, #0]
100106a8:	2900      	cmp	r1, #0
100106aa:	d102      	bne.n	100106b2 <gapc_bond_req_ind+0x3a>
100106ac:	2301      	movs	r3, #1
100106ae:	7093      	strb	r3, [r2, #2]
100106b0:	e004      	b.n	100106bc <gapc_bond_req_ind+0x44>
100106b2:	2300      	movs	r3, #0
100106b4:	7093      	strb	r3, [r2, #2]
100106b6:	2902      	cmp	r1, #2
100106b8:	d102      	bne.n	100106c0 <gapc_bond_req_ind+0x48>
100106ba:	70d3      	strb	r3, [r2, #3]
100106bc:	200c      	movs	r0, #12
100106be:	e03f      	b.n	10010740 <gapc_bond_req_ind+0xc8>
100106c0:	2901      	cmp	r1, #1
100106c2:	d1fb      	bne.n	100106bc <gapc_bond_req_ind+0x44>
100106c4:	70d1      	strb	r1, [r2, #3]
100106c6:	e7f9      	b.n	100106bc <gapc_bond_req_ind+0x44>
100106c8:	2214      	movs	r2, #20
100106ca:	481e      	ldr	r0, [pc, #120]	; (10010744 <gapc_bond_req_ind+0xcc>)
100106cc:	0a1b      	lsrs	r3, r3, #8
100106ce:	70c3      	strb	r3, [r0, #3]
100106d0:	4b1d      	ldr	r3, [pc, #116]	; (10010748 <gapc_bond_req_ind+0xd0>)
100106d2:	7002      	strb	r2, [r0, #0]
100106d4:	3a06      	subs	r2, #6
100106d6:	7042      	strb	r2, [r0, #1]
100106d8:	7082      	strb	r2, [r0, #2]
100106da:	881a      	ldrh	r2, [r3, #0]
100106dc:	881b      	ldrh	r3, [r3, #0]
100106de:	4e1b      	ldr	r6, [pc, #108]	; (1001074c <gapc_bond_req_ind+0xd4>)
100106e0:	0a1b      	lsrs	r3, r3, #8
100106e2:	7143      	strb	r3, [r0, #5]
100106e4:	2301      	movs	r3, #1
100106e6:	7102      	strb	r2, [r0, #4]
100106e8:	7204      	strb	r4, [r0, #8]
100106ea:	7243      	strb	r3, [r0, #9]
100106ec:	1c05      	adds	r5, r0, #0
100106ee:	1c31      	adds	r1, r6, #0
100106f0:	300a      	adds	r0, #10
100106f2:	2c07      	cmp	r4, #7
100106f4:	d116      	bne.n	10010724 <gapc_bond_req_ind+0xac>
100106f6:	317e      	adds	r1, #126	; 0x7e
100106f8:	2210      	movs	r2, #16
100106fa:	4c15      	ldr	r4, [pc, #84]	; (10010750 <gapc_bond_req_ind+0xd8>)
100106fc:	47a0      	blx	r4
100106fe:	1c33      	adds	r3, r6, #0
10010700:	1c31      	adds	r1, r6, #0
10010702:	1c28      	adds	r0, r5, #0
10010704:	338e      	adds	r3, #142	; 0x8e
10010706:	881b      	ldrh	r3, [r3, #0]
10010708:	3190      	adds	r1, #144	; 0x90
1001070a:	76ab      	strb	r3, [r5, #26]
1001070c:	2208      	movs	r2, #8
1001070e:	0a1b      	lsrs	r3, r3, #8
10010710:	301c      	adds	r0, #28
10010712:	76eb      	strb	r3, [r5, #27]
10010714:	47a0      	blx	r4
10010716:	1c31      	adds	r1, r6, #0
10010718:	3198      	adds	r1, #152	; 0x98
1001071a:	780a      	ldrb	r2, [r1, #0]
1001071c:	1d6b      	adds	r3, r5, #5
1001071e:	77da      	strb	r2, [r3, #31]
10010720:	2125      	movs	r1, #37	; 0x25
10010722:	e004      	b.n	1001072e <gapc_bond_req_ind+0xb6>
10010724:	319a      	adds	r1, #154	; 0x9a
10010726:	2210      	movs	r2, #16
10010728:	4b09      	ldr	r3, [pc, #36]	; (10010750 <gapc_bond_req_ind+0xd8>)
1001072a:	4798      	blx	r3
1001072c:	211a      	movs	r1, #26
1001072e:	1c0b      	adds	r3, r1, #0
10010730:	2400      	movs	r4, #0
10010732:	3b08      	subs	r3, #8
10010734:	71ab      	strb	r3, [r5, #6]
10010736:	1c28      	adds	r0, r5, #0
10010738:	4b06      	ldr	r3, [pc, #24]	; (10010754 <gapc_bond_req_ind+0xdc>)
1001073a:	71ec      	strb	r4, [r5, #7]
1001073c:	4798      	blx	r3
1001073e:	2000      	movs	r0, #0
10010740:	bd70      	pop	{r4, r5, r6, pc}
10010742:	46c0      	nop			; (mov r8, r8)
10010744:	1001b458 	.word	0x1001b458
10010748:	1001b0e8 	.word	0x1001b0e8
1001074c:	1001b17a 	.word	0x1001b17a
10010750:	100158f7 	.word	0x100158f7
10010754:	10010019 	.word	0x10010019

10010758 <gapc_bond_cfm_handler_pair_resp>:
10010758:	b5f0      	push	{r4, r5, r6, r7, lr}
1001075a:	b085      	sub	sp, #20
1001075c:	1c07      	adds	r7, r0, #0
1001075e:	a80a      	add	r0, sp, #40	; 0x28
10010760:	7806      	ldrb	r6, [r0, #0]
10010762:	a80b      	add	r0, sp, #44	; 0x2c
10010764:	7805      	ldrb	r5, [r0, #0]
10010766:	a80c      	add	r0, sp, #48	; 0x30
10010768:	7800      	ldrb	r0, [r0, #0]
1001076a:	2414      	movs	r4, #20
1001076c:	9002      	str	r0, [sp, #8]
1001076e:	a80d      	add	r0, sp, #52	; 0x34
10010770:	7800      	ldrb	r0, [r0, #0]
10010772:	9301      	str	r3, [sp, #4]
10010774:	9003      	str	r0, [sp, #12]
10010776:	a80e      	add	r0, sp, #56	; 0x38
10010778:	8800      	ldrh	r0, [r0, #0]
1001077a:	4684      	mov	ip, r0
1001077c:	4812      	ldr	r0, [pc, #72]	; (100107c8 <gapc_bond_cfm_handler_pair_resp+0x70>)
1001077e:	7004      	strb	r4, [r0, #0]
10010780:	3c06      	subs	r4, #6
10010782:	7044      	strb	r4, [r0, #1]
10010784:	7084      	strb	r4, [r0, #2]
10010786:	4664      	mov	r4, ip
10010788:	70c4      	strb	r4, [r0, #3]
1001078a:	4c10      	ldr	r4, [pc, #64]	; (100107cc <gapc_bond_cfm_handler_pair_resp+0x74>)
1001078c:	7247      	strb	r7, [r0, #9]
1001078e:	8823      	ldrh	r3, [r4, #0]
10010790:	8824      	ldrh	r4, [r4, #0]
10010792:	7103      	strb	r3, [r0, #4]
10010794:	466b      	mov	r3, sp
10010796:	791b      	ldrb	r3, [r3, #4]
10010798:	0a24      	lsrs	r4, r4, #8
1001079a:	7303      	strb	r3, [r0, #12]
1001079c:	466b      	mov	r3, sp
1001079e:	7a1b      	ldrb	r3, [r3, #8]
100107a0:	7144      	strb	r4, [r0, #5]
100107a2:	73c3      	strb	r3, [r0, #15]
100107a4:	466b      	mov	r3, sp
100107a6:	7b1b      	ldrb	r3, [r3, #12]
100107a8:	2401      	movs	r4, #1
100107aa:	7403      	strb	r3, [r0, #16]
100107ac:	2309      	movs	r3, #9
100107ae:	7183      	strb	r3, [r0, #6]
100107b0:	2300      	movs	r3, #0
100107b2:	7204      	strb	r4, [r0, #8]
100107b4:	7281      	strb	r1, [r0, #10]
100107b6:	72c2      	strb	r2, [r0, #11]
100107b8:	7346      	strb	r6, [r0, #13]
100107ba:	7385      	strb	r5, [r0, #14]
100107bc:	71c3      	strb	r3, [r0, #7]
100107be:	2111      	movs	r1, #17
100107c0:	4b03      	ldr	r3, [pc, #12]	; (100107d0 <gapc_bond_cfm_handler_pair_resp+0x78>)
100107c2:	4798      	blx	r3
100107c4:	b005      	add	sp, #20
100107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107c8:	1001b458 	.word	0x1001b458
100107cc:	1001b0e8 	.word	0x1001b0e8
100107d0:	10010019 	.word	0x10010019

100107d4 <gapc_bond_cfm_handler_key_exch>:
100107d4:	b538      	push	{r3, r4, r5, lr}
100107d6:	2514      	movs	r5, #20
100107d8:	4c0d      	ldr	r4, [pc, #52]	; (10010810 <gapc_bond_cfm_handler_key_exch+0x3c>)
100107da:	70e3      	strb	r3, [r4, #3]
100107dc:	4b0d      	ldr	r3, [pc, #52]	; (10010814 <gapc_bond_cfm_handler_key_exch+0x40>)
100107de:	7025      	strb	r5, [r4, #0]
100107e0:	3d06      	subs	r5, #6
100107e2:	7065      	strb	r5, [r4, #1]
100107e4:	70a5      	strb	r5, [r4, #2]
100107e6:	881d      	ldrh	r5, [r3, #0]
100107e8:	881b      	ldrh	r3, [r3, #0]
100107ea:	7220      	strb	r0, [r4, #8]
100107ec:	0a1b      	lsrs	r3, r3, #8
100107ee:	7163      	strb	r3, [r4, #5]
100107f0:	7261      	strb	r1, [r4, #9]
100107f2:	4b09      	ldr	r3, [pc, #36]	; (10010818 <gapc_bond_cfm_handler_key_exch+0x44>)
100107f4:	1c11      	adds	r1, r2, #0
100107f6:	4809      	ldr	r0, [pc, #36]	; (1001081c <gapc_bond_cfm_handler_key_exch+0x48>)
100107f8:	2210      	movs	r2, #16
100107fa:	7125      	strb	r5, [r4, #4]
100107fc:	4798      	blx	r3
100107fe:	2312      	movs	r3, #18
10010800:	71a3      	strb	r3, [r4, #6]
10010802:	2300      	movs	r3, #0
10010804:	1c20      	adds	r0, r4, #0
10010806:	71e3      	strb	r3, [r4, #7]
10010808:	211a      	movs	r1, #26
1001080a:	4b05      	ldr	r3, [pc, #20]	; (10010820 <gapc_bond_cfm_handler_key_exch+0x4c>)
1001080c:	4798      	blx	r3
1001080e:	bd38      	pop	{r3, r4, r5, pc}
10010810:	1001b458 	.word	0x1001b458
10010814:	1001b0e8 	.word	0x1001b0e8
10010818:	100158f7 	.word	0x100158f7
1001081c:	1001b462 	.word	0x1001b462
10010820:	10010019 	.word	0x10010019

10010824 <gapc_security_cmd_handler>:
10010824:	221a      	movs	r2, #26
10010826:	b508      	push	{r3, lr}
10010828:	4b0b      	ldr	r3, [pc, #44]	; (10010858 <gapc_security_cmd_handler+0x34>)
1001082a:	701a      	strb	r2, [r3, #0]
1001082c:	3a0c      	subs	r2, #12
1001082e:	705a      	strb	r2, [r3, #1]
10010830:	709a      	strb	r2, [r3, #2]
10010832:	4a0a      	ldr	r2, [pc, #40]	; (1001085c <gapc_security_cmd_handler+0x38>)
10010834:	70d8      	strb	r0, [r3, #3]
10010836:	8810      	ldrh	r0, [r2, #0]
10010838:	8812      	ldrh	r2, [r2, #0]
1001083a:	7118      	strb	r0, [r3, #4]
1001083c:	0a12      	lsrs	r2, r2, #8
1001083e:	715a      	strb	r2, [r3, #5]
10010840:	220c      	movs	r2, #12
10010842:	721a      	strb	r2, [r3, #8]
10010844:	3a0a      	subs	r2, #10
10010846:	719a      	strb	r2, [r3, #6]
10010848:	2200      	movs	r2, #0
1001084a:	7259      	strb	r1, [r3, #9]
1001084c:	71da      	strb	r2, [r3, #7]
1001084e:	1c18      	adds	r0, r3, #0
10010850:	210a      	movs	r1, #10
10010852:	4b03      	ldr	r3, [pc, #12]	; (10010860 <gapc_security_cmd_handler+0x3c>)
10010854:	4798      	blx	r3
10010856:	bd08      	pop	{r3, pc}
10010858:	1001b458 	.word	0x1001b458
1001085c:	1001b0e8 	.word	0x1001b0e8
10010860:	10010019 	.word	0x10010019

10010864 <gapc_encrypt_cmd_handler>:
10010864:	b5f0      	push	{r4, r5, r6, r7, lr}
10010866:	2500      	movs	r5, #0
10010868:	b089      	sub	sp, #36	; 0x24
1001086a:	9306      	str	r3, [sp, #24]
1001086c:	ab0e      	add	r3, sp, #56	; 0x38
1001086e:	781b      	ldrb	r3, [r3, #0]
10010870:	1c17      	adds	r7, r2, #0
10010872:	9307      	str	r3, [sp, #28]
10010874:	ab0f      	add	r3, sp, #60	; 0x3c
10010876:	781b      	ldrb	r3, [r3, #0]
10010878:	4a19      	ldr	r2, [pc, #100]	; (100108e0 <gapc_encrypt_cmd_handler+0x7c>)
1001087a:	1c06      	adds	r6, r0, #0
1001087c:	9105      	str	r1, [sp, #20]
1001087e:	9300      	str	r3, [sp, #0]
10010880:	9002      	str	r0, [sp, #8]
10010882:	1c29      	adds	r1, r5, #0
10010884:	1c2b      	adds	r3, r5, #0
10010886:	9501      	str	r5, [sp, #4]
10010888:	1c10      	adds	r0, r2, #0
1001088a:	4c16      	ldr	r4, [pc, #88]	; (100108e4 <gapc_encrypt_cmd_handler+0x80>)
1001088c:	47a0      	blx	r4
1001088e:	2316      	movs	r3, #22
10010890:	4c15      	ldr	r4, [pc, #84]	; (100108e8 <gapc_encrypt_cmd_handler+0x84>)
10010892:	9905      	ldr	r1, [sp, #20]
10010894:	7023      	strb	r3, [r4, #0]
10010896:	3b08      	subs	r3, #8
10010898:	7063      	strb	r3, [r4, #1]
1001089a:	70a3      	strb	r3, [r4, #2]
1001089c:	4b13      	ldr	r3, [pc, #76]	; (100108ec <gapc_encrypt_cmd_handler+0x88>)
1001089e:	70e6      	strb	r6, [r4, #3]
100108a0:	881a      	ldrh	r2, [r3, #0]
100108a2:	881b      	ldrh	r3, [r3, #0]
100108a4:	7122      	strb	r2, [r4, #4]
100108a6:	0a1b      	lsrs	r3, r3, #8
100108a8:	7163      	strb	r3, [r4, #5]
100108aa:	230b      	movs	r3, #11
100108ac:	4e10      	ldr	r6, [pc, #64]	; (100108f0 <gapc_encrypt_cmd_handler+0x8c>)
100108ae:	2210      	movs	r2, #16
100108b0:	4810      	ldr	r0, [pc, #64]	; (100108f4 <gapc_encrypt_cmd_handler+0x90>)
100108b2:	7223      	strb	r3, [r4, #8]
100108b4:	7265      	strb	r5, [r4, #9]
100108b6:	47b0      	blx	r6
100108b8:	0a3b      	lsrs	r3, r7, #8
100108ba:	9906      	ldr	r1, [sp, #24]
100108bc:	2208      	movs	r2, #8
100108be:	480e      	ldr	r0, [pc, #56]	; (100108f8 <gapc_encrypt_cmd_handler+0x94>)
100108c0:	76e3      	strb	r3, [r4, #27]
100108c2:	76a7      	strb	r7, [r4, #26]
100108c4:	47b0      	blx	r6
100108c6:	466a      	mov	r2, sp
100108c8:	7f12      	ldrb	r2, [r2, #28]
100108ca:	1d63      	adds	r3, r4, #5
100108cc:	77da      	strb	r2, [r3, #31]
100108ce:	231d      	movs	r3, #29
100108d0:	1c20      	adds	r0, r4, #0
100108d2:	71a3      	strb	r3, [r4, #6]
100108d4:	2125      	movs	r1, #37	; 0x25
100108d6:	4b09      	ldr	r3, [pc, #36]	; (100108fc <gapc_encrypt_cmd_handler+0x98>)
100108d8:	71e5      	strb	r5, [r4, #7]
100108da:	4798      	blx	r3
100108dc:	b009      	add	sp, #36	; 0x24
100108de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108e0:	1001a1b8 	.word	0x1001a1b8
100108e4:	1001031d 	.word	0x1001031d
100108e8:	1001b458 	.word	0x1001b458
100108ec:	1001b0e8 	.word	0x1001b0e8
100108f0:	100158f7 	.word	0x100158f7
100108f4:	1001b462 	.word	0x1001b462
100108f8:	1001b474 	.word	0x1001b474
100108fc:	10010019 	.word	0x10010019

10010900 <gapc_encrypt_req_ind>:
10010900:	b508      	push	{r3, lr}
10010902:	0a00      	lsrs	r0, r0, #8
10010904:	8010      	strh	r0, [r2, #0]
10010906:	784b      	ldrb	r3, [r1, #1]
10010908:	7808      	ldrb	r0, [r1, #0]
1001090a:	021b      	lsls	r3, r3, #8
1001090c:	4303      	orrs	r3, r0
1001090e:	8053      	strh	r3, [r2, #2]
10010910:	1d10      	adds	r0, r2, #4
10010912:	3102      	adds	r1, #2
10010914:	2208      	movs	r2, #8
10010916:	4b01      	ldr	r3, [pc, #4]	; (1001091c <gapc_encrypt_req_ind+0x1c>)
10010918:	4798      	blx	r3
1001091a:	bd08      	pop	{r3, pc}
1001091c:	100158f7 	.word	0x100158f7

10010920 <gapc_encrypt_cfm_handler>:
10010920:	b5f0      	push	{r4, r5, r6, r7, lr}
10010922:	2500      	movs	r5, #0
10010924:	b087      	sub	sp, #28
10010926:	9304      	str	r3, [sp, #16]
10010928:	ab0c      	add	r3, sp, #48	; 0x30
1001092a:	781b      	ldrb	r3, [r3, #0]
1001092c:	1c17      	adds	r7, r2, #0
1001092e:	4a15      	ldr	r2, [pc, #84]	; (10010984 <gapc_encrypt_cfm_handler+0x64>)
10010930:	1c06      	adds	r6, r0, #0
10010932:	9305      	str	r3, [sp, #20]
10010934:	9100      	str	r1, [sp, #0]
10010936:	9002      	str	r0, [sp, #8]
10010938:	1c29      	adds	r1, r5, #0
1001093a:	1c2b      	adds	r3, r5, #0
1001093c:	9501      	str	r5, [sp, #4]
1001093e:	1c10      	adds	r0, r2, #0
10010940:	4c11      	ldr	r4, [pc, #68]	; (10010988 <gapc_encrypt_cfm_handler+0x68>)
10010942:	47a0      	blx	r4
10010944:	2318      	movs	r3, #24
10010946:	4c11      	ldr	r4, [pc, #68]	; (1001098c <gapc_encrypt_cfm_handler+0x6c>)
10010948:	9904      	ldr	r1, [sp, #16]
1001094a:	7023      	strb	r3, [r4, #0]
1001094c:	3b0a      	subs	r3, #10
1001094e:	7063      	strb	r3, [r4, #1]
10010950:	70a3      	strb	r3, [r4, #2]
10010952:	4b0f      	ldr	r3, [pc, #60]	; (10010990 <gapc_encrypt_cfm_handler+0x70>)
10010954:	480f      	ldr	r0, [pc, #60]	; (10010994 <gapc_encrypt_cfm_handler+0x74>)
10010956:	881a      	ldrh	r2, [r3, #0]
10010958:	881b      	ldrh	r3, [r3, #0]
1001095a:	7122      	strb	r2, [r4, #4]
1001095c:	0a1b      	lsrs	r3, r3, #8
1001095e:	7163      	strb	r3, [r4, #5]
10010960:	2210      	movs	r2, #16
10010962:	4b0d      	ldr	r3, [pc, #52]	; (10010998 <gapc_encrypt_cfm_handler+0x78>)
10010964:	70e6      	strb	r6, [r4, #3]
10010966:	7227      	strb	r7, [r4, #8]
10010968:	4798      	blx	r3
1001096a:	466b      	mov	r3, sp
1001096c:	7d1b      	ldrb	r3, [r3, #20]
1001096e:	1c20      	adds	r0, r4, #0
10010970:	7663      	strb	r3, [r4, #25]
10010972:	2312      	movs	r3, #18
10010974:	211a      	movs	r1, #26
10010976:	71a3      	strb	r3, [r4, #6]
10010978:	4b08      	ldr	r3, [pc, #32]	; (1001099c <gapc_encrypt_cfm_handler+0x7c>)
1001097a:	71e5      	strb	r5, [r4, #7]
1001097c:	4798      	blx	r3
1001097e:	b007      	add	sp, #28
10010980:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010982:	46c0      	nop			; (mov r8, r8)
10010984:	1001a1c8 	.word	0x1001a1c8
10010988:	1001031d 	.word	0x1001031d
1001098c:	1001b458 	.word	0x1001b458
10010990:	1001b0e8 	.word	0x1001b0e8
10010994:	1001b461 	.word	0x1001b461
10010998:	100158f7 	.word	0x100158f7
1001099c:	10010019 	.word	0x10010019

100109a0 <gapc_encrypt_ind>:
100109a0:	780b      	ldrb	r3, [r1, #0]
100109a2:	0a00      	lsrs	r0, r0, #8
100109a4:	70d3      	strb	r3, [r2, #3]
100109a6:	2300      	movs	r3, #0
100109a8:	8010      	strh	r0, [r2, #0]
100109aa:	7093      	strb	r3, [r2, #2]
100109ac:	4770      	bx	lr
	...

100109b0 <gapc_param_update_cfm_handler>:
100109b0:	b538      	push	{r3, r4, r5, lr}
100109b2:	2410      	movs	r4, #16
100109b4:	1c05      	adds	r5, r0, #0
100109b6:	480e      	ldr	r0, [pc, #56]	; (100109f0 <gapc_param_update_cfm_handler+0x40>)
100109b8:	7004      	strb	r4, [r0, #0]
100109ba:	3c02      	subs	r4, #2
100109bc:	7044      	strb	r4, [r0, #1]
100109be:	7084      	strb	r4, [r0, #2]
100109c0:	4c0c      	ldr	r4, [pc, #48]	; (100109f4 <gapc_param_update_cfm_handler+0x44>)
100109c2:	70c5      	strb	r5, [r0, #3]
100109c4:	8825      	ldrh	r5, [r4, #0]
100109c6:	8824      	ldrh	r4, [r4, #0]
100109c8:	72c3      	strb	r3, [r0, #11]
100109ca:	0a1b      	lsrs	r3, r3, #8
100109cc:	0a24      	lsrs	r4, r4, #8
100109ce:	7303      	strb	r3, [r0, #12]
100109d0:	2305      	movs	r3, #5
100109d2:	7144      	strb	r4, [r0, #5]
100109d4:	2400      	movs	r4, #0
100109d6:	7201      	strb	r1, [r0, #8]
100109d8:	7242      	strb	r2, [r0, #9]
100109da:	7183      	strb	r3, [r0, #6]
100109dc:	0a12      	lsrs	r2, r2, #8
100109de:	210d      	movs	r1, #13
100109e0:	4b05      	ldr	r3, [pc, #20]	; (100109f8 <gapc_param_update_cfm_handler+0x48>)
100109e2:	7105      	strb	r5, [r0, #4]
100109e4:	7282      	strb	r2, [r0, #10]
100109e6:	71c4      	strb	r4, [r0, #7]
100109e8:	4798      	blx	r3
100109ea:	1c20      	adds	r0, r4, #0
100109ec:	bd38      	pop	{r3, r4, r5, pc}
100109ee:	46c0      	nop			; (mov r8, r8)
100109f0:	1001b458 	.word	0x1001b458
100109f4:	1001b0e8 	.word	0x1001b0e8
100109f8:	10010019 	.word	0x10010019

100109fc <gapc_param_updated_ind>:
100109fc:	2300      	movs	r3, #0
100109fe:	0a00      	lsrs	r0, r0, #8
10010a00:	8010      	strh	r0, [r2, #0]
10010a02:	7093      	strb	r3, [r2, #2]
10010a04:	784b      	ldrb	r3, [r1, #1]
10010a06:	7808      	ldrb	r0, [r1, #0]
10010a08:	021b      	lsls	r3, r3, #8
10010a0a:	4303      	orrs	r3, r0
10010a0c:	8093      	strh	r3, [r2, #4]
10010a0e:	78cb      	ldrb	r3, [r1, #3]
10010a10:	7888      	ldrb	r0, [r1, #2]
10010a12:	021b      	lsls	r3, r3, #8
10010a14:	4303      	orrs	r3, r0
10010a16:	80d3      	strh	r3, [r2, #6]
10010a18:	794b      	ldrb	r3, [r1, #5]
10010a1a:	7909      	ldrb	r1, [r1, #4]
10010a1c:	021b      	lsls	r3, r3, #8
10010a1e:	430b      	orrs	r3, r1
10010a20:	2007      	movs	r0, #7
10010a22:	8113      	strh	r3, [r2, #8]
10010a24:	4770      	bx	lr

10010a26 <gapc_param_updated_req_ind>:
10010a26:	0a00      	lsrs	r0, r0, #8
10010a28:	8010      	strh	r0, [r2, #0]
10010a2a:	784b      	ldrb	r3, [r1, #1]
10010a2c:	7808      	ldrb	r0, [r1, #0]
10010a2e:	021b      	lsls	r3, r3, #8
10010a30:	4303      	orrs	r3, r0
10010a32:	8053      	strh	r3, [r2, #2]
10010a34:	78cb      	ldrb	r3, [r1, #3]
10010a36:	7888      	ldrb	r0, [r1, #2]
10010a38:	021b      	lsls	r3, r3, #8
10010a3a:	4303      	orrs	r3, r0
10010a3c:	8093      	strh	r3, [r2, #4]
10010a3e:	794b      	ldrb	r3, [r1, #5]
10010a40:	7908      	ldrb	r0, [r1, #4]
10010a42:	021b      	lsls	r3, r3, #8
10010a44:	4303      	orrs	r3, r0
10010a46:	80d3      	strh	r3, [r2, #6]
10010a48:	79cb      	ldrb	r3, [r1, #7]
10010a4a:	7989      	ldrb	r1, [r1, #6]
10010a4c:	021b      	lsls	r3, r3, #8
10010a4e:	430b      	orrs	r3, r1
10010a50:	2008      	movs	r0, #8
10010a52:	8113      	strh	r3, [r2, #8]
10010a54:	4770      	bx	lr
	...

10010a58 <gapc_dev_info_req_ind_handler>:
10010a58:	b508      	push	{r3, lr}
10010a5a:	1c0b      	adds	r3, r1, #0
10010a5c:	0a01      	lsrs	r1, r0, #8
10010a5e:	8011      	strh	r1, [r2, #0]
10010a60:	7818      	ldrb	r0, [r3, #0]
10010a62:	7090      	strb	r0, [r2, #2]
10010a64:	2800      	cmp	r0, #0
10010a66:	d104      	bne.n	10010a72 <gapc_dev_info_req_ind_handler+0x1a>
10010a68:	4b03      	ldr	r3, [pc, #12]	; (10010a78 <gapc_dev_info_req_ind_handler+0x20>)
10010a6a:	33aa      	adds	r3, #170	; 0xaa
10010a6c:	881b      	ldrh	r3, [r3, #0]
10010a6e:	2b00      	cmp	r3, #0
10010a70:	d001      	beq.n	10010a76 <gapc_dev_info_req_ind_handler+0x1e>
10010a72:	4b02      	ldr	r3, [pc, #8]	; (10010a7c <gapc_dev_info_req_ind_handler+0x24>)
10010a74:	4798      	blx	r3
10010a76:	bd08      	pop	{r3, pc}
10010a78:	1001b17a 	.word	0x1001b17a
10010a7c:	10010129 	.word	0x10010129

10010a80 <gapc_sec_req_ind>:
10010a80:	0a00      	lsrs	r0, r0, #8
10010a82:	8010      	strh	r0, [r2, #0]
10010a84:	7809      	ldrb	r1, [r1, #0]
10010a86:	2301      	movs	r3, #1
10010a88:	1c08      	adds	r0, r1, #0
10010a8a:	0889      	lsrs	r1, r1, #2
10010a8c:	4018      	ands	r0, r3
10010a8e:	400b      	ands	r3, r1
10010a90:	70d0      	strb	r0, [r2, #3]
10010a92:	7113      	strb	r3, [r2, #4]
10010a94:	4770      	bx	lr

10010a96 <gapc_sign_counter_ind_handler>:
10010a96:	0a00      	lsrs	r0, r0, #8
10010a98:	8010      	strh	r0, [r2, #0]
10010a9a:	784b      	ldrb	r3, [r1, #1]
10010a9c:	0218      	lsls	r0, r3, #8
10010a9e:	788b      	ldrb	r3, [r1, #2]
10010aa0:	041b      	lsls	r3, r3, #16
10010aa2:	4303      	orrs	r3, r0
10010aa4:	7808      	ldrb	r0, [r1, #0]
10010aa6:	4303      	orrs	r3, r0
10010aa8:	78c8      	ldrb	r0, [r1, #3]
10010aaa:	0600      	lsls	r0, r0, #24
10010aac:	4303      	orrs	r3, r0
10010aae:	6053      	str	r3, [r2, #4]
10010ab0:	794b      	ldrb	r3, [r1, #5]
10010ab2:	0218      	lsls	r0, r3, #8
10010ab4:	798b      	ldrb	r3, [r1, #6]
10010ab6:	041b      	lsls	r3, r3, #16
10010ab8:	4303      	orrs	r3, r0
10010aba:	7908      	ldrb	r0, [r1, #4]
10010abc:	79c9      	ldrb	r1, [r1, #7]
10010abe:	4303      	orrs	r3, r0
10010ac0:	0609      	lsls	r1, r1, #24
10010ac2:	430b      	orrs	r3, r1
10010ac4:	2000      	movs	r0, #0
10010ac6:	6093      	str	r3, [r2, #8]
10010ac8:	4770      	bx	lr
	...

10010acc <gapc_peer_att_info_ind_handler>:
10010acc:	b510      	push	{r4, lr}
10010ace:	0a00      	lsrs	r0, r0, #8
10010ad0:	8010      	strh	r0, [r2, #0]
10010ad2:	7808      	ldrb	r0, [r1, #0]
10010ad4:	7090      	strb	r0, [r2, #2]
10010ad6:	788b      	ldrb	r3, [r1, #2]
10010ad8:	784c      	ldrb	r4, [r1, #1]
10010ada:	021b      	lsls	r3, r3, #8
10010adc:	4323      	orrs	r3, r4
10010ade:	8093      	strh	r3, [r2, #4]
10010ae0:	2801      	cmp	r0, #1
10010ae2:	d027      	beq.n	10010b34 <gapc_peer_att_info_ind_handler+0x68>
10010ae4:	2800      	cmp	r0, #0
10010ae6:	d017      	beq.n	10010b18 <gapc_peer_att_info_ind_handler+0x4c>
10010ae8:	2802      	cmp	r0, #2
10010aea:	d12a      	bne.n	10010b42 <gapc_peer_att_info_ind_handler+0x76>
10010aec:	790b      	ldrb	r3, [r1, #4]
10010aee:	78c8      	ldrb	r0, [r1, #3]
10010af0:	021b      	lsls	r3, r3, #8
10010af2:	4303      	orrs	r3, r0
10010af4:	8113      	strh	r3, [r2, #8]
10010af6:	798b      	ldrb	r3, [r1, #6]
10010af8:	7948      	ldrb	r0, [r1, #5]
10010afa:	021b      	lsls	r3, r3, #8
10010afc:	4303      	orrs	r3, r0
10010afe:	80d3      	strh	r3, [r2, #6]
10010b00:	7a0b      	ldrb	r3, [r1, #8]
10010b02:	79c8      	ldrb	r0, [r1, #7]
10010b04:	021b      	lsls	r3, r3, #8
10010b06:	4303      	orrs	r3, r0
10010b08:	8193      	strh	r3, [r2, #12]
10010b0a:	7a8b      	ldrb	r3, [r1, #10]
10010b0c:	7a49      	ldrb	r1, [r1, #9]
10010b0e:	021b      	lsls	r3, r3, #8
10010b10:	430b      	orrs	r3, r1
10010b12:	8153      	strh	r3, [r2, #10]
10010b14:	2306      	movs	r3, #6
10010b16:	e013      	b.n	10010b40 <gapc_peer_att_info_ind_handler+0x74>
10010b18:	1c14      	adds	r4, r2, #0
10010b1a:	1c20      	adds	r0, r4, #0
10010b1c:	790a      	ldrb	r2, [r1, #4]
10010b1e:	78cb      	ldrb	r3, [r1, #3]
10010b20:	0212      	lsls	r2, r2, #8
10010b22:	431a      	orrs	r2, r3
10010b24:	80e2      	strh	r2, [r4, #6]
10010b26:	4b07      	ldr	r3, [pc, #28]	; (10010b44 <gapc_peer_att_info_ind_handler+0x78>)
10010b28:	3008      	adds	r0, #8
10010b2a:	3105      	adds	r1, #5
10010b2c:	4798      	blx	r3
10010b2e:	2302      	movs	r3, #2
10010b30:	70a3      	strb	r3, [r4, #2]
10010b32:	e006      	b.n	10010b42 <gapc_peer_att_info_ind_handler+0x76>
10010b34:	790b      	ldrb	r3, [r1, #4]
10010b36:	78c9      	ldrb	r1, [r1, #3]
10010b38:	021b      	lsls	r3, r3, #8
10010b3a:	430b      	orrs	r3, r1
10010b3c:	80d3      	strh	r3, [r2, #6]
10010b3e:	2305      	movs	r3, #5
10010b40:	7093      	strb	r3, [r2, #2]
10010b42:	bd10      	pop	{r4, pc}
10010b44:	100158f7 	.word	0x100158f7

10010b48 <gapc_con_channel_map_ind_handler>:
10010b48:	b508      	push	{r3, lr}
10010b4a:	2300      	movs	r3, #0
10010b4c:	0a00      	lsrs	r0, r0, #8
10010b4e:	7013      	strb	r3, [r2, #0]
10010b50:	8050      	strh	r0, [r2, #2]
10010b52:	4b02      	ldr	r3, [pc, #8]	; (10010b5c <gapc_con_channel_map_ind_handler+0x14>)
10010b54:	1d10      	adds	r0, r2, #4
10010b56:	2205      	movs	r2, #5
10010b58:	4798      	blx	r3
10010b5a:	bd08      	pop	{r3, pc}
10010b5c:	100158f7 	.word	0x100158f7

10010b60 <gapc_lecb_connected>:
10010b60:	7843      	ldrb	r3, [r0, #1]
10010b62:	7802      	ldrb	r2, [r0, #0]
10010b64:	021b      	lsls	r3, r3, #8
10010b66:	4313      	orrs	r3, r2
10010b68:	800b      	strh	r3, [r1, #0]
10010b6a:	78c3      	ldrb	r3, [r0, #3]
10010b6c:	7882      	ldrb	r2, [r0, #2]
10010b6e:	021b      	lsls	r3, r3, #8
10010b70:	4313      	orrs	r3, r2
10010b72:	804b      	strh	r3, [r1, #2]
10010b74:	7943      	ldrb	r3, [r0, #5]
10010b76:	7902      	ldrb	r2, [r0, #4]
10010b78:	021b      	lsls	r3, r3, #8
10010b7a:	4313      	orrs	r3, r2
10010b7c:	808b      	strh	r3, [r1, #4]
10010b7e:	79c3      	ldrb	r3, [r0, #7]
10010b80:	7982      	ldrb	r2, [r0, #6]
10010b82:	021b      	lsls	r3, r3, #8
10010b84:	4313      	orrs	r3, r2
10010b86:	80cb      	strh	r3, [r1, #6]
10010b88:	2300      	movs	r3, #0
10010b8a:	720b      	strb	r3, [r1, #8]
10010b8c:	4770      	bx	lr

10010b8e <gapc_lecb_disconnected>:
10010b8e:	7843      	ldrb	r3, [r0, #1]
10010b90:	7802      	ldrb	r2, [r0, #0]
10010b92:	021b      	lsls	r3, r3, #8
10010b94:	4313      	orrs	r3, r2
10010b96:	800b      	strh	r3, [r1, #0]
10010b98:	78c3      	ldrb	r3, [r0, #3]
10010b9a:	7882      	ldrb	r2, [r0, #2]
10010b9c:	021b      	lsls	r3, r3, #8
10010b9e:	4313      	orrs	r3, r2
10010ba0:	804b      	strh	r3, [r1, #2]
10010ba2:	4770      	bx	lr

10010ba4 <gapc_lecb_connect_req_ind>:
10010ba4:	7843      	ldrb	r3, [r0, #1]
10010ba6:	7802      	ldrb	r2, [r0, #0]
10010ba8:	021b      	lsls	r3, r3, #8
10010baa:	4313      	orrs	r3, r2
10010bac:	800b      	strh	r3, [r1, #0]
10010bae:	78c3      	ldrb	r3, [r0, #3]
10010bb0:	7882      	ldrb	r2, [r0, #2]
10010bb2:	021b      	lsls	r3, r3, #8
10010bb4:	4313      	orrs	r3, r2
10010bb6:	804b      	strh	r3, [r1, #2]
10010bb8:	7943      	ldrb	r3, [r0, #5]
10010bba:	7902      	ldrb	r2, [r0, #4]
10010bbc:	021b      	lsls	r3, r3, #8
10010bbe:	4313      	orrs	r3, r2
10010bc0:	808b      	strh	r3, [r1, #4]
10010bc2:	79c3      	ldrb	r3, [r0, #7]
10010bc4:	7982      	ldrb	r2, [r0, #6]
10010bc6:	021b      	lsls	r3, r3, #8
10010bc8:	4313      	orrs	r3, r2
10010bca:	80cb      	strh	r3, [r1, #6]
10010bcc:	4770      	bx	lr

10010bce <gapc_lecb_add_credit_resp_handler>:
10010bce:	7843      	ldrb	r3, [r0, #1]
10010bd0:	7802      	ldrb	r2, [r0, #0]
10010bd2:	021b      	lsls	r3, r3, #8
10010bd4:	4313      	orrs	r3, r2
10010bd6:	800b      	strh	r3, [r1, #0]
10010bd8:	78c3      	ldrb	r3, [r0, #3]
10010bda:	7882      	ldrb	r2, [r0, #2]
10010bdc:	021b      	lsls	r3, r3, #8
10010bde:	4313      	orrs	r3, r2
10010be0:	804b      	strh	r3, [r1, #2]
10010be2:	7943      	ldrb	r3, [r0, #5]
10010be4:	7902      	ldrb	r2, [r0, #4]
10010be6:	021b      	lsls	r3, r3, #8
10010be8:	4313      	orrs	r3, r2
10010bea:	808b      	strh	r3, [r1, #4]
10010bec:	4770      	bx	lr
	...

10010bf0 <gapm_reset_req_handler>:
10010bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010bf2:	466b      	mov	r3, sp
10010bf4:	4915      	ldr	r1, [pc, #84]	; (10010c4c <gapm_reset_req_handler+0x5c>)
10010bf6:	4816      	ldr	r0, [pc, #88]	; (10010c50 <gapm_reset_req_handler+0x60>)
10010bf8:	880c      	ldrh	r4, [r1, #0]
10010bfa:	8809      	ldrh	r1, [r1, #0]
10010bfc:	1ddd      	adds	r5, r3, #7
10010bfe:	0a09      	lsrs	r1, r1, #8
10010c00:	2300      	movs	r3, #0
10010c02:	2202      	movs	r2, #2
10010c04:	7141      	strb	r1, [r0, #5]
10010c06:	26d0      	movs	r6, #208	; 0xd0
10010c08:	2101      	movs	r1, #1
10010c0a:	7104      	strb	r4, [r0, #4]
10010c0c:	4c11      	ldr	r4, [pc, #68]	; (10010c54 <gapm_reset_req_handler+0x64>)
10010c0e:	702b      	strb	r3, [r5, #0]
10010c10:	7002      	strb	r2, [r0, #0]
10010c12:	70c3      	strb	r3, [r0, #3]
10010c14:	320b      	adds	r2, #11
10010c16:	7201      	strb	r1, [r0, #8]
10010c18:	7181      	strb	r1, [r0, #6]
10010c1a:	71c3      	strb	r3, [r0, #7]
10010c1c:	3108      	adds	r1, #8
10010c1e:	4b0e      	ldr	r3, [pc, #56]	; (10010c58 <gapm_reset_req_handler+0x68>)
10010c20:	0136      	lsls	r6, r6, #4
10010c22:	7042      	strb	r2, [r0, #1]
10010c24:	7082      	strb	r2, [r0, #2]
10010c26:	80a2      	strh	r2, [r4, #4]
10010c28:	8026      	strh	r6, [r4, #0]
10010c2a:	4798      	blx	r3
10010c2c:	1c28      	adds	r0, r5, #0
10010c2e:	4b0b      	ldr	r3, [pc, #44]	; (10010c5c <gapm_reset_req_handler+0x6c>)
10010c30:	4798      	blx	r3
10010c32:	782b      	ldrb	r3, [r5, #0]
10010c34:	20e2      	movs	r0, #226	; 0xe2
10010c36:	2b00      	cmp	r3, #0
10010c38:	d106      	bne.n	10010c48 <gapm_reset_req_handler+0x58>
10010c3a:	68a3      	ldr	r3, [r4, #8]
10010c3c:	20e2      	movs	r0, #226	; 0xe2
10010c3e:	781a      	ldrb	r2, [r3, #0]
10010c40:	785b      	ldrb	r3, [r3, #1]
10010c42:	2a01      	cmp	r2, #1
10010c44:	d100      	bne.n	10010c48 <gapm_reset_req_handler+0x58>
10010c46:	1c18      	adds	r0, r3, #0
10010c48:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010c4a:	46c0      	nop			; (mov r8, r8)
10010c4c:	1001b0e8 	.word	0x1001b0e8
10010c50:	1001b458 	.word	0x1001b458
10010c54:	1001b0dc 	.word	0x1001b0dc
10010c58:	10010019 	.word	0x10010019
10010c5c:	1001007d 	.word	0x1001007d

10010c60 <gapm_set_dev_config_cmd_handler>:
10010c60:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c62:	b089      	sub	sp, #36	; 0x24
10010c64:	9303      	str	r3, [sp, #12]
10010c66:	ab0e      	add	r3, sp, #56	; 0x38
10010c68:	781b      	ldrb	r3, [r3, #0]
10010c6a:	4c37      	ldr	r4, [pc, #220]	; (10010d48 <gapm_set_dev_config_cmd_handler+0xe8>)
10010c6c:	9304      	str	r3, [sp, #16]
10010c6e:	ab0f      	add	r3, sp, #60	; 0x3c
10010c70:	781b      	ldrb	r3, [r3, #0]
10010c72:	270d      	movs	r7, #13
10010c74:	9305      	str	r3, [sp, #20]
10010c76:	ab10      	add	r3, sp, #64	; 0x40
10010c78:	881b      	ldrh	r3, [r3, #0]
10010c7a:	72a1      	strb	r1, [r4, #10]
10010c7c:	9300      	str	r3, [sp, #0]
10010c7e:	ab11      	add	r3, sp, #68	; 0x44
10010c80:	881b      	ldrh	r3, [r3, #0]
10010c82:	0a09      	lsrs	r1, r1, #8
10010c84:	9301      	str	r3, [sp, #4]
10010c86:	ab12      	add	r3, sp, #72	; 0x48
10010c88:	881b      	ldrh	r3, [r3, #0]
10010c8a:	7260      	strb	r0, [r4, #9]
10010c8c:	9302      	str	r3, [sp, #8]
10010c8e:	ab06      	add	r3, sp, #24
10010c90:	1dde      	adds	r6, r3, #7
10010c92:	2300      	movs	r3, #0
10010c94:	7033      	strb	r3, [r6, #0]
10010c96:	2304      	movs	r3, #4
10010c98:	7023      	strb	r3, [r4, #0]
10010c9a:	2300      	movs	r3, #0
10010c9c:	70e3      	strb	r3, [r4, #3]
10010c9e:	4b2b      	ldr	r3, [pc, #172]	; (10010d4c <gapm_set_dev_config_cmd_handler+0xec>)
10010ca0:	72e1      	strb	r1, [r4, #11]
10010ca2:	881d      	ldrh	r5, [r3, #0]
10010ca4:	881b      	ldrh	r3, [r3, #0]
10010ca6:	1c11      	adds	r1, r2, #0
10010ca8:	0a1b      	lsrs	r3, r3, #8
10010caa:	7163      	strb	r3, [r4, #5]
10010cac:	2303      	movs	r3, #3
10010cae:	7125      	strb	r5, [r4, #4]
10010cb0:	2206      	movs	r2, #6
10010cb2:	4d27      	ldr	r5, [pc, #156]	; (10010d50 <gapm_set_dev_config_cmd_handler+0xf0>)
10010cb4:	4827      	ldr	r0, [pc, #156]	; (10010d54 <gapm_set_dev_config_cmd_handler+0xf4>)
10010cb6:	7223      	strb	r3, [r4, #8]
10010cb8:	7067      	strb	r7, [r4, #1]
10010cba:	70a7      	strb	r7, [r4, #2]
10010cbc:	47a8      	blx	r5
10010cbe:	9903      	ldr	r1, [sp, #12]
10010cc0:	2210      	movs	r2, #16
10010cc2:	4825      	ldr	r0, [pc, #148]	; (10010d58 <gapm_set_dev_config_cmd_handler+0xf8>)
10010cc4:	47a8      	blx	r5
10010cc6:	466a      	mov	r2, sp
10010cc8:	7c12      	ldrb	r2, [r2, #16]
10010cca:	1ce3      	adds	r3, r4, #3
10010ccc:	77da      	strb	r2, [r3, #31]
10010cce:	466a      	mov	r2, sp
10010cd0:	7d12      	ldrb	r2, [r2, #20]
10010cd2:	1d23      	adds	r3, r4, #4
10010cd4:	77da      	strb	r2, [r3, #31]
10010cd6:	466a      	mov	r2, sp
10010cd8:	7812      	ldrb	r2, [r2, #0]
10010cda:	1d63      	adds	r3, r4, #5
10010cdc:	77da      	strb	r2, [r3, #31]
10010cde:	9b00      	ldr	r3, [sp, #0]
10010ce0:	1da2      	adds	r2, r4, #6
10010ce2:	0a1b      	lsrs	r3, r3, #8
10010ce4:	77d3      	strb	r3, [r2, #31]
10010ce6:	466a      	mov	r2, sp
10010ce8:	7912      	ldrb	r2, [r2, #4]
10010cea:	1de3      	adds	r3, r4, #7
10010cec:	77da      	strb	r2, [r3, #31]
10010cee:	1c22      	adds	r2, r4, #0
10010cf0:	9b01      	ldr	r3, [sp, #4]
10010cf2:	3208      	adds	r2, #8
10010cf4:	0a1b      	lsrs	r3, r3, #8
10010cf6:	77d3      	strb	r3, [r2, #31]
10010cf8:	466a      	mov	r2, sp
10010cfa:	1c23      	adds	r3, r4, #0
10010cfc:	7a12      	ldrb	r2, [r2, #8]
10010cfe:	3328      	adds	r3, #40	; 0x28
10010d00:	701a      	strb	r2, [r3, #0]
10010d02:	1c22      	adds	r2, r4, #0
10010d04:	9b02      	ldr	r3, [sp, #8]
10010d06:	3229      	adds	r2, #41	; 0x29
10010d08:	0a1b      	lsrs	r3, r3, #8
10010d0a:	7013      	strb	r3, [r2, #0]
10010d0c:	23d0      	movs	r3, #208	; 0xd0
10010d0e:	4d13      	ldr	r5, [pc, #76]	; (10010d5c <gapm_set_dev_config_cmd_handler+0xfc>)
10010d10:	011b      	lsls	r3, r3, #4
10010d12:	802b      	strh	r3, [r5, #0]
10010d14:	2322      	movs	r3, #34	; 0x22
10010d16:	71a3      	strb	r3, [r4, #6]
10010d18:	2300      	movs	r3, #0
10010d1a:	212a      	movs	r1, #42	; 0x2a
10010d1c:	71e3      	strb	r3, [r4, #7]
10010d1e:	1c20      	adds	r0, r4, #0
10010d20:	4b0f      	ldr	r3, [pc, #60]	; (10010d60 <gapm_set_dev_config_cmd_handler+0x100>)
10010d22:	80af      	strh	r7, [r5, #4]
10010d24:	4798      	blx	r3
10010d26:	1c30      	adds	r0, r6, #0
10010d28:	4b0e      	ldr	r3, [pc, #56]	; (10010d64 <gapm_set_dev_config_cmd_handler+0x104>)
10010d2a:	4798      	blx	r3
10010d2c:	7833      	ldrb	r3, [r6, #0]
10010d2e:	20e2      	movs	r0, #226	; 0xe2
10010d30:	2b00      	cmp	r3, #0
10010d32:	d106      	bne.n	10010d42 <gapm_set_dev_config_cmd_handler+0xe2>
10010d34:	68ab      	ldr	r3, [r5, #8]
10010d36:	20e2      	movs	r0, #226	; 0xe2
10010d38:	781a      	ldrb	r2, [r3, #0]
10010d3a:	785b      	ldrb	r3, [r3, #1]
10010d3c:	2a03      	cmp	r2, #3
10010d3e:	d100      	bne.n	10010d42 <gapm_set_dev_config_cmd_handler+0xe2>
10010d40:	1c18      	adds	r0, r3, #0
10010d42:	b009      	add	sp, #36	; 0x24
10010d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d46:	46c0      	nop			; (mov r8, r8)
10010d48:	1001b458 	.word	0x1001b458
10010d4c:	1001b0e8 	.word	0x1001b0e8
10010d50:	100158f7 	.word	0x100158f7
10010d54:	1001b464 	.word	0x1001b464
10010d58:	1001b46a 	.word	0x1001b46a
10010d5c:	1001b0dc 	.word	0x1001b0dc
10010d60:	10010019 	.word	0x10010019
10010d64:	1001007d 	.word	0x1001007d

10010d68 <gapm_get_dev_config_cmd_handler>:
10010d68:	4684      	mov	ip, r0
10010d6a:	4663      	mov	r3, ip
10010d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d6e:	b085      	sub	sp, #20
10010d70:	9100      	str	r1, [sp, #0]
10010d72:	20cf      	movs	r0, #207	; 0xcf
10010d74:	2b01      	cmp	r3, #1
10010d76:	d854      	bhi.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010d78:	2900      	cmp	r1, #0
10010d7a:	d052      	beq.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010d7c:	2200      	movs	r2, #0
10010d7e:	492a      	ldr	r1, [pc, #168]	; (10010e28 <gapm_get_dev_config_cmd_handler+0xc0>)
10010d80:	ab02      	add	r3, sp, #8
10010d82:	880c      	ldrh	r4, [r1, #0]
10010d84:	8809      	ldrh	r1, [r1, #0]
10010d86:	1d9f      	adds	r7, r3, #6
10010d88:	719a      	strb	r2, [r3, #6]
10010d8a:	4b28      	ldr	r3, [pc, #160]	; (10010e2c <gapm_get_dev_config_cmd_handler+0xc4>)
10010d8c:	0a09      	lsrs	r1, r1, #8
10010d8e:	250d      	movs	r5, #13
10010d90:	2606      	movs	r6, #6
10010d92:	7159      	strb	r1, [r3, #5]
10010d94:	4661      	mov	r1, ip
10010d96:	701e      	strb	r6, [r3, #0]
10010d98:	705d      	strb	r5, [r3, #1]
10010d9a:	709d      	strb	r5, [r3, #2]
10010d9c:	70da      	strb	r2, [r3, #3]
10010d9e:	711c      	strb	r4, [r3, #4]
10010da0:	2901      	cmp	r1, #1
10010da2:	d13e      	bne.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010da4:	21d0      	movs	r1, #208	; 0xd0
10010da6:	4c22      	ldr	r4, [pc, #136]	; (10010e30 <gapm_get_dev_config_cmd_handler+0xc8>)
10010da8:	0109      	lsls	r1, r1, #4
10010daa:	8061      	strh	r1, [r4, #2]
10010dac:	4921      	ldr	r1, [pc, #132]	; (10010e34 <gapm_get_dev_config_cmd_handler+0xcc>)
10010dae:	71da      	strb	r2, [r3, #7]
10010db0:	8021      	strh	r1, [r4, #0]
10010db2:	4661      	mov	r1, ip
10010db4:	721e      	strb	r6, [r3, #8]
10010db6:	7199      	strb	r1, [r3, #6]
10010db8:	1c18      	adds	r0, r3, #0
10010dba:	2109      	movs	r1, #9
10010dbc:	4b1e      	ldr	r3, [pc, #120]	; (10010e38 <gapm_get_dev_config_cmd_handler+0xd0>)
10010dbe:	80a5      	strh	r5, [r4, #4]
10010dc0:	4798      	blx	r3
10010dc2:	1c38      	adds	r0, r7, #0
10010dc4:	4b1d      	ldr	r3, [pc, #116]	; (10010e3c <gapm_get_dev_config_cmd_handler+0xd4>)
10010dc6:	4798      	blx	r3
10010dc8:	783b      	ldrb	r3, [r7, #0]
10010dca:	20e2      	movs	r0, #226	; 0xe2
10010dcc:	9301      	str	r3, [sp, #4]
10010dce:	2b00      	cmp	r3, #0
10010dd0:	d127      	bne.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010dd2:	8821      	ldrh	r1, [r4, #0]
10010dd4:	4a1a      	ldr	r2, [pc, #104]	; (10010e40 <gapm_get_dev_config_cmd_handler+0xd8>)
10010dd6:	68a7      	ldr	r7, [r4, #8]
10010dd8:	3b01      	subs	r3, #1
10010dda:	4291      	cmp	r1, r2
10010ddc:	d001      	beq.n	10010de2 <gapm_get_dev_config_cmd_handler+0x7a>
10010dde:	8023      	strh	r3, [r4, #0]
10010de0:	e01a      	b.n	10010e18 <gapm_get_dev_config_cmd_handler+0xb0>
10010de2:	8063      	strh	r3, [r4, #2]
10010de4:	9b00      	ldr	r3, [sp, #0]
10010de6:	1c39      	adds	r1, r7, #0
10010de8:	1c58      	adds	r0, r3, #1
10010dea:	1c32      	adds	r2, r6, #0
10010dec:	4b15      	ldr	r3, [pc, #84]	; (10010e44 <gapm_get_dev_config_cmd_handler+0xdc>)
10010dee:	4798      	blx	r3
10010df0:	79bb      	ldrb	r3, [r7, #6]
10010df2:	9a00      	ldr	r2, [sp, #0]
10010df4:	7013      	strb	r3, [r2, #0]
10010df6:	23d0      	movs	r3, #208	; 0xd0
10010df8:	011b      	lsls	r3, r3, #4
10010dfa:	8023      	strh	r3, [r4, #0]
10010dfc:	ab02      	add	r3, sp, #8
10010dfe:	80a5      	strh	r5, [r4, #4]
10010e00:	1ddd      	adds	r5, r3, #7
10010e02:	466b      	mov	r3, sp
10010e04:	791b      	ldrb	r3, [r3, #4]
10010e06:	1c28      	adds	r0, r5, #0
10010e08:	702b      	strb	r3, [r5, #0]
10010e0a:	4b0c      	ldr	r3, [pc, #48]	; (10010e3c <gapm_get_dev_config_cmd_handler+0xd4>)
10010e0c:	4798      	blx	r3
10010e0e:	782b      	ldrb	r3, [r5, #0]
10010e10:	20d0      	movs	r0, #208	; 0xd0
10010e12:	2b00      	cmp	r3, #0
10010e14:	d105      	bne.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010e16:	68a7      	ldr	r7, [r4, #8]
10010e18:	783b      	ldrb	r3, [r7, #0]
10010e1a:	7878      	ldrb	r0, [r7, #1]
10010e1c:	2b06      	cmp	r3, #6
10010e1e:	d000      	beq.n	10010e22 <gapm_get_dev_config_cmd_handler+0xba>
10010e20:	20e2      	movs	r0, #226	; 0xe2
10010e22:	b005      	add	sp, #20
10010e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e26:	46c0      	nop			; (mov r8, r8)
10010e28:	1001b0e8 	.word	0x1001b0e8
10010e2c:	1001b458 	.word	0x1001b458
10010e30:	1001b0dc 	.word	0x1001b0dc
10010e34:	00000d08 	.word	0x00000d08
10010e38:	10010019 	.word	0x10010019
10010e3c:	1001007d 	.word	0x1001007d
10010e40:	0000ffff 	.word	0x0000ffff
10010e44:	100158f7 	.word	0x100158f7

10010e48 <gapm_cancel_cmd_handler>:
10010e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010e4a:	4916      	ldr	r1, [pc, #88]	; (10010ea4 <gapm_cancel_cmd_handler+0x5c>)
10010e4c:	4816      	ldr	r0, [pc, #88]	; (10010ea8 <gapm_cancel_cmd_handler+0x60>)
10010e4e:	880c      	ldrh	r4, [r1, #0]
10010e50:	8809      	ldrh	r1, [r1, #0]
10010e52:	466b      	mov	r3, sp
10010e54:	0a09      	lsrs	r1, r1, #8
10010e56:	7141      	strb	r1, [r0, #5]
10010e58:	2102      	movs	r1, #2
10010e5a:	2203      	movs	r2, #3
10010e5c:	7201      	strb	r1, [r0, #8]
10010e5e:	21d0      	movs	r1, #208	; 0xd0
10010e60:	1ddd      	adds	r5, r3, #7
10010e62:	2300      	movs	r3, #0
10010e64:	7104      	strb	r4, [r0, #4]
10010e66:	4c11      	ldr	r4, [pc, #68]	; (10010eac <gapm_cancel_cmd_handler+0x64>)
10010e68:	7002      	strb	r2, [r0, #0]
10010e6a:	0109      	lsls	r1, r1, #4
10010e6c:	320a      	adds	r2, #10
10010e6e:	702b      	strb	r3, [r5, #0]
10010e70:	7042      	strb	r2, [r0, #1]
10010e72:	7082      	strb	r2, [r0, #2]
10010e74:	70c3      	strb	r3, [r0, #3]
10010e76:	8021      	strh	r1, [r4, #0]
10010e78:	80a2      	strh	r2, [r4, #4]
10010e7a:	71c3      	strb	r3, [r0, #7]
10010e7c:	3a0c      	subs	r2, #12
10010e7e:	2109      	movs	r1, #9
10010e80:	4b0b      	ldr	r3, [pc, #44]	; (10010eb0 <gapm_cancel_cmd_handler+0x68>)
10010e82:	7182      	strb	r2, [r0, #6]
10010e84:	4798      	blx	r3
10010e86:	1c28      	adds	r0, r5, #0
10010e88:	4b0a      	ldr	r3, [pc, #40]	; (10010eb4 <gapm_cancel_cmd_handler+0x6c>)
10010e8a:	4798      	blx	r3
10010e8c:	7828      	ldrb	r0, [r5, #0]
10010e8e:	2800      	cmp	r0, #0
10010e90:	d001      	beq.n	10010e96 <gapm_cancel_cmd_handler+0x4e>
10010e92:	20e2      	movs	r0, #226	; 0xe2
10010e94:	e004      	b.n	10010ea0 <gapm_cancel_cmd_handler+0x58>
10010e96:	68a3      	ldr	r3, [r4, #8]
10010e98:	785b      	ldrb	r3, [r3, #1]
10010e9a:	2b44      	cmp	r3, #68	; 0x44
10010e9c:	d000      	beq.n	10010ea0 <gapm_cancel_cmd_handler+0x58>
10010e9e:	1c18      	adds	r0, r3, #0
10010ea0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010ea2:	46c0      	nop			; (mov r8, r8)
10010ea4:	1001b0e8 	.word	0x1001b0e8
10010ea8:	1001b458 	.word	0x1001b458
10010eac:	1001b0dc 	.word	0x1001b0dc
10010eb0:	10010019 	.word	0x10010019
10010eb4:	1001007d 	.word	0x1001007d

10010eb8 <gapm_dev_bdaddr_ind_handler>:
10010eb8:	b538      	push	{r3, r4, r5, lr}
10010eba:	1c05      	adds	r5, r0, #0
10010ebc:	1c0c      	adds	r4, r1, #0
10010ebe:	1c48      	adds	r0, r1, #1
10010ec0:	2206      	movs	r2, #6
10010ec2:	1c29      	adds	r1, r5, #0
10010ec4:	4b02      	ldr	r3, [pc, #8]	; (10010ed0 <gapm_dev_bdaddr_ind_handler+0x18>)
10010ec6:	4798      	blx	r3
10010ec8:	79ab      	ldrb	r3, [r5, #6]
10010eca:	2000      	movs	r0, #0
10010ecc:	7023      	strb	r3, [r4, #0]
10010ece:	bd38      	pop	{r3, r4, r5, pc}
10010ed0:	100158f7 	.word	0x100158f7

10010ed4 <gapm_cmp_evt>:
10010ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010ed6:	7803      	ldrb	r3, [r0, #0]
10010ed8:	7845      	ldrb	r5, [r0, #1]
10010eda:	3b0c      	subs	r3, #12
10010edc:	1e18      	subs	r0, r3, #0
10010ede:	280b      	cmp	r0, #11
10010ee0:	d900      	bls.n	10010ee4 <gapm_cmp_evt+0x10>
10010ee2:	e08d      	b.n	10011000 <gapm_cmp_evt+0x12c>
10010ee4:	1c0c      	adds	r4, r1, #0
10010ee6:	f001 fe6f 	bl	10012bc8 <__gnu_thumb1_case_uqi>
10010eea:	1952      	.short	0x1952
10010eec:	068b1919 	.word	0x068b1919
10010ef0:	8b595906 	.word	0x8b595906
10010ef4:	0d8b      	.short	0x0d8b
10010ef6:	2300      	movs	r3, #0
10010ef8:	2d45      	cmp	r5, #69	; 0x45
10010efa:	d000      	beq.n	10010efe <gapm_cmp_evt+0x2a>
10010efc:	1c2b      	adds	r3, r5, #0
10010efe:	7023      	strb	r3, [r4, #0]
10010f00:	2002      	movs	r0, #2
10010f02:	e07e      	b.n	10011002 <gapm_cmp_evt+0x12e>
10010f04:	203b      	movs	r0, #59	; 0x3b
10010f06:	2d00      	cmp	r5, #0
10010f08:	d100      	bne.n	10010f0c <gapm_cmp_evt+0x38>
10010f0a:	e07a      	b.n	10011002 <gapm_cmp_evt+0x12e>
10010f0c:	700d      	strb	r5, [r1, #0]
10010f0e:	1c48      	adds	r0, r1, #1
10010f10:	2210      	movs	r2, #16
10010f12:	2100      	movs	r1, #0
10010f14:	4b3b      	ldr	r3, [pc, #236]	; (10011004 <gapm_cmp_evt+0x130>)
10010f16:	4798      	blx	r3
10010f18:	200f      	movs	r0, #15
10010f1a:	e072      	b.n	10011002 <gapm_cmp_evt+0x12e>
10010f1c:	2d00      	cmp	r5, #0
10010f1e:	d134      	bne.n	10010f8a <gapm_cmp_evt+0xb6>
10010f20:	4b39      	ldr	r3, [pc, #228]	; (10011008 <gapm_cmp_evt+0x134>)
10010f22:	4798      	blx	r3
10010f24:	1e43      	subs	r3, r0, #1
10010f26:	b2db      	uxtb	r3, r3
10010f28:	1c28      	adds	r0, r5, #0
10010f2a:	2b06      	cmp	r3, #6
10010f2c:	d869      	bhi.n	10011002 <gapm_cmp_evt+0x12e>
10010f2e:	466b      	mov	r3, sp
10010f30:	4e36      	ldr	r6, [pc, #216]	; (1001100c <gapm_cmp_evt+0x138>)
10010f32:	1dd9      	adds	r1, r3, #7
10010f34:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010f36:	4b36      	ldr	r3, [pc, #216]	; (10011010 <gapm_cmp_evt+0x13c>)
10010f38:	4798      	blx	r3
10010f3a:	2312      	movs	r3, #18
10010f3c:	4358      	muls	r0, r3
10010f3e:	4935      	ldr	r1, [pc, #212]	; (10011014 <gapm_cmp_evt+0x140>)
10010f40:	1809      	adds	r1, r1, r0
10010f42:	1c0b      	adds	r3, r1, #0
10010f44:	894a      	ldrh	r2, [r1, #10]
10010f46:	3308      	adds	r3, #8
10010f48:	8122      	strh	r2, [r4, #8]
10010f4a:	784f      	ldrb	r7, [r1, #1]
10010f4c:	72a5      	strb	r5, [r4, #10]
10010f4e:	7027      	strb	r7, [r4, #0]
10010f50:	898a      	ldrh	r2, [r1, #12]
10010f52:	1c60      	adds	r0, r4, #1
10010f54:	81a2      	strh	r2, [r4, #12]
10010f56:	88db      	ldrh	r3, [r3, #6]
10010f58:	3102      	adds	r1, #2
10010f5a:	81e3      	strh	r3, [r4, #14]
10010f5c:	89cb      	ldrh	r3, [r1, #14]
10010f5e:	2206      	movs	r2, #6
10010f60:	8223      	strh	r3, [r4, #16]
10010f62:	4b2d      	ldr	r3, [pc, #180]	; (10011018 <gapm_cmp_evt+0x144>)
10010f64:	4798      	blx	r3
10010f66:	2f00      	cmp	r7, #0
10010f68:	d00a      	beq.n	10010f80 <gapm_cmp_evt+0xac>
10010f6a:	79a3      	ldrb	r3, [r4, #6]
10010f6c:	223f      	movs	r2, #63	; 0x3f
10010f6e:	1c19      	adds	r1, r3, #0
10010f70:	3501      	adds	r5, #1
10010f72:	4391      	bics	r1, r2
10010f74:	29c0      	cmp	r1, #192	; 0xc0
10010f76:	d003      	beq.n	10010f80 <gapm_cmp_evt+0xac>
10010f78:	065b      	lsls	r3, r3, #25
10010f7a:	0fdb      	lsrs	r3, r3, #31
10010f7c:	3502      	adds	r5, #2
10010f7e:	1aed      	subs	r5, r5, r3
10010f80:	2301      	movs	r3, #1
10010f82:	425b      	negs	r3, r3
10010f84:	7025      	strb	r5, [r4, #0]
10010f86:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010f88:	e038      	b.n	10010ffc <gapm_cmp_evt+0x128>
10010f8a:	700d      	strb	r5, [r1, #0]
10010f8c:	e004      	b.n	10010f98 <gapm_cmp_evt+0xc4>
10010f8e:	2300      	movs	r3, #0
10010f90:	2d45      	cmp	r5, #69	; 0x45
10010f92:	d000      	beq.n	10010f96 <gapm_cmp_evt+0xc2>
10010f94:	1c2b      	adds	r3, r5, #0
10010f96:	7023      	strb	r3, [r4, #0]
10010f98:	2003      	movs	r0, #3
10010f9a:	e032      	b.n	10011002 <gapm_cmp_evt+0x12e>
10010f9c:	4e1b      	ldr	r6, [pc, #108]	; (1001100c <gapm_cmp_evt+0x138>)
10010f9e:	2100      	movs	r1, #0
10010fa0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010fa2:	4b1b      	ldr	r3, [pc, #108]	; (10011010 <gapm_cmp_evt+0x13c>)
10010fa4:	4798      	blx	r3
10010fa6:	2807      	cmp	r0, #7
10010fa8:	d818      	bhi.n	10010fdc <gapm_cmp_evt+0x108>
10010faa:	2301      	movs	r3, #1
10010fac:	425b      	negs	r3, r3
10010fae:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010fb0:	3313      	adds	r3, #19
10010fb2:	4358      	muls	r0, r3
10010fb4:	4917      	ldr	r1, [pc, #92]	; (10011014 <gapm_cmp_evt+0x140>)
10010fb6:	1809      	adds	r1, r1, r0
10010fb8:	1c0b      	adds	r3, r1, #0
10010fba:	894a      	ldrh	r2, [r1, #10]
10010fbc:	3308      	adds	r3, #8
10010fbe:	8122      	strh	r2, [r4, #8]
10010fc0:	784a      	ldrb	r2, [r1, #1]
10010fc2:	72a5      	strb	r5, [r4, #10]
10010fc4:	7022      	strb	r2, [r4, #0]
10010fc6:	898a      	ldrh	r2, [r1, #12]
10010fc8:	1c60      	adds	r0, r4, #1
10010fca:	81a2      	strh	r2, [r4, #12]
10010fcc:	88db      	ldrh	r3, [r3, #6]
10010fce:	3102      	adds	r1, #2
10010fd0:	81e3      	strh	r3, [r4, #14]
10010fd2:	89cb      	ldrh	r3, [r1, #14]
10010fd4:	2206      	movs	r2, #6
10010fd6:	8223      	strh	r3, [r4, #16]
10010fd8:	4b0f      	ldr	r3, [pc, #60]	; (10011018 <gapm_cmp_evt+0x144>)
10010fda:	4798      	blx	r3
10010fdc:	2200      	movs	r2, #0
10010fde:	7823      	ldrb	r3, [r4, #0]
10010fe0:	4293      	cmp	r3, r2
10010fe2:	d00a      	beq.n	10010ffa <gapm_cmp_evt+0x126>
10010fe4:	79a3      	ldrb	r3, [r4, #6]
10010fe6:	323f      	adds	r2, #63	; 0x3f
10010fe8:	1c19      	adds	r1, r3, #0
10010fea:	4391      	bics	r1, r2
10010fec:	3a3e      	subs	r2, #62	; 0x3e
10010fee:	29c0      	cmp	r1, #192	; 0xc0
10010ff0:	d003      	beq.n	10010ffa <gapm_cmp_evt+0x126>
10010ff2:	065b      	lsls	r3, r3, #25
10010ff4:	0fdb      	lsrs	r3, r3, #31
10010ff6:	3202      	adds	r2, #2
10010ff8:	1ad2      	subs	r2, r2, r3
10010ffa:	7022      	strb	r2, [r4, #0]
10010ffc:	2005      	movs	r0, #5
10010ffe:	e000      	b.n	10011002 <gapm_cmp_evt+0x12e>
10011000:	2000      	movs	r0, #0
10011002:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011004:	10015909 	.word	0x10015909
10011008:	10010225 	.word	0x10010225
1001100c:	1001b17a 	.word	0x1001b17a
10011010:	100101e9 	.word	0x100101e9
10011014:	1001b0ea 	.word	0x1001b0ea
10011018:	100158f7 	.word	0x100158f7

1001101c <gapm_start_adv_cmd_handler>:
1001101c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001101e:	b089      	sub	sp, #36	; 0x24
10011020:	9303      	str	r3, [sp, #12]
10011022:	ab0e      	add	r3, sp, #56	; 0x38
10011024:	9102      	str	r1, [sp, #8]
10011026:	cb02      	ldmia	r3!, {r1}
10011028:	aa08      	add	r2, sp, #32
1001102a:	881b      	ldrh	r3, [r3, #0]
1001102c:	4e3c      	ldr	r6, [pc, #240]	; (10011120 <gapm_start_adv_cmd_handler+0x104>)
1001102e:	9300      	str	r3, [sp, #0]
10011030:	ab10      	add	r3, sp, #64	; 0x40
10011032:	881b      	ldrh	r3, [r3, #0]
10011034:	240d      	movs	r4, #13
10011036:	469c      	mov	ip, r3
10011038:	ab11      	add	r3, sp, #68	; 0x44
1001103a:	781b      	ldrb	r3, [r3, #0]
1001103c:	9304      	str	r3, [sp, #16]
1001103e:	ab12      	add	r3, sp, #72	; 0x48
10011040:	781b      	ldrb	r3, [r3, #0]
10011042:	9305      	str	r3, [sp, #20]
10011044:	ab13      	add	r3, sp, #76	; 0x4c
10011046:	781b      	ldrb	r3, [r3, #0]
10011048:	9306      	str	r3, [sp, #24]
1001104a:	ab14      	add	r3, sp, #80	; 0x50
1001104c:	781b      	ldrb	r3, [r3, #0]
1001104e:	9301      	str	r3, [sp, #4]
10011050:	2319      	movs	r3, #25
10011052:	189b      	adds	r3, r3, r2
10011054:	7fdd      	ldrb	r5, [r3, #31]
10011056:	ab18      	add	r3, sp, #96	; 0x60
10011058:	881f      	ldrh	r7, [r3, #0]
1001105a:	ab19      	add	r3, sp, #100	; 0x64
1001105c:	781b      	ldrb	r3, [r3, #0]
1001105e:	8832      	ldrh	r2, [r6, #0]
10011060:	9307      	str	r3, [sp, #28]
10011062:	4b30      	ldr	r3, [pc, #192]	; (10011124 <gapm_start_adv_cmd_handler+0x108>)
10011064:	8836      	ldrh	r6, [r6, #0]
10011066:	711a      	strb	r2, [r3, #4]
10011068:	466a      	mov	r2, sp
1001106a:	7a12      	ldrb	r2, [r2, #8]
1001106c:	701c      	strb	r4, [r3, #0]
1001106e:	705c      	strb	r4, [r3, #1]
10011070:	709c      	strb	r4, [r3, #2]
10011072:	725a      	strb	r2, [r3, #9]
10011074:	2400      	movs	r4, #0
10011076:	466a      	mov	r2, sp
10011078:	0a36      	lsrs	r6, r6, #8
1001107a:	70dc      	strb	r4, [r3, #3]
1001107c:	7218      	strb	r0, [r3, #8]
1001107e:	729c      	strb	r4, [r3, #10]
10011080:	715e      	strb	r6, [r3, #5]
10011082:	72dc      	strb	r4, [r3, #11]
10011084:	7812      	ldrb	r2, [r2, #0]
10011086:	380e      	subs	r0, #14
10011088:	731a      	strb	r2, [r3, #12]
1001108a:	9a00      	ldr	r2, [sp, #0]
1001108c:	0a14      	lsrs	r4, r2, #8
1001108e:	4662      	mov	r2, ip
10011090:	739a      	strb	r2, [r3, #14]
10011092:	4662      	mov	r2, ip
10011094:	735c      	strb	r4, [r3, #13]
10011096:	0a14      	lsrs	r4, r2, #8
10011098:	466a      	mov	r2, sp
1001109a:	7c12      	ldrb	r2, [r2, #16]
1001109c:	73dc      	strb	r4, [r3, #15]
1001109e:	741a      	strb	r2, [r3, #16]
100110a0:	1c1c      	adds	r4, r3, #0
100110a2:	2801      	cmp	r0, #1
100110a4:	d809      	bhi.n	100110ba <gapm_start_adv_cmd_handler+0x9e>
100110a6:	2900      	cmp	r1, #0
100110a8:	d003      	beq.n	100110b2 <gapm_start_adv_cmd_handler+0x96>
100110aa:	481f      	ldr	r0, [pc, #124]	; (10011128 <gapm_start_adv_cmd_handler+0x10c>)
100110ac:	2206      	movs	r2, #6
100110ae:	4b1f      	ldr	r3, [pc, #124]	; (1001112c <gapm_start_adv_cmd_handler+0x110>)
100110b0:	4798      	blx	r3
100110b2:	466b      	mov	r3, sp
100110b4:	7b1b      	ldrb	r3, [r3, #12]
100110b6:	75e3      	strb	r3, [r4, #23]
100110b8:	e014      	b.n	100110e4 <gapm_start_adv_cmd_handler+0xc8>
100110ba:	466b      	mov	r3, sp
100110bc:	7d1b      	ldrb	r3, [r3, #20]
100110be:	9915      	ldr	r1, [sp, #84]	; 0x54
100110c0:	7463      	strb	r3, [r4, #17]
100110c2:	466b      	mov	r3, sp
100110c4:	7e1b      	ldrb	r3, [r3, #24]
100110c6:	9a01      	ldr	r2, [sp, #4]
100110c8:	74a3      	strb	r3, [r4, #18]
100110ca:	466b      	mov	r3, sp
100110cc:	791b      	ldrb	r3, [r3, #4]
100110ce:	4818      	ldr	r0, [pc, #96]	; (10011130 <gapm_start_adv_cmd_handler+0x114>)
100110d0:	4e16      	ldr	r6, [pc, #88]	; (1001112c <gapm_start_adv_cmd_handler+0x110>)
100110d2:	74e3      	strb	r3, [r4, #19]
100110d4:	47b0      	blx	r6
100110d6:	1c23      	adds	r3, r4, #0
100110d8:	4816      	ldr	r0, [pc, #88]	; (10011134 <gapm_start_adv_cmd_handler+0x118>)
100110da:	3330      	adds	r3, #48	; 0x30
100110dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
100110de:	1c2a      	adds	r2, r5, #0
100110e0:	701d      	strb	r5, [r3, #0]
100110e2:	47b0      	blx	r6
100110e4:	1c22      	adds	r2, r4, #0
100110e6:	23a5      	movs	r3, #165	; 0xa5
100110e8:	3250      	adds	r2, #80	; 0x50
100110ea:	7013      	strb	r3, [r2, #0]
100110ec:	1c22      	adds	r2, r4, #0
100110ee:	3251      	adds	r2, #81	; 0x51
100110f0:	7013      	strb	r3, [r2, #0]
100110f2:	1c23      	adds	r3, r4, #0
100110f4:	1c22      	adds	r2, r4, #0
100110f6:	3352      	adds	r3, #82	; 0x52
100110f8:	701f      	strb	r7, [r3, #0]
100110fa:	3253      	adds	r2, #83	; 0x53
100110fc:	0a3b      	lsrs	r3, r7, #8
100110fe:	7013      	strb	r3, [r2, #0]
10011100:	466a      	mov	r2, sp
10011102:	1c23      	adds	r3, r4, #0
10011104:	7f12      	ldrb	r2, [r2, #28]
10011106:	3354      	adds	r3, #84	; 0x54
10011108:	701a      	strb	r2, [r3, #0]
1001110a:	234d      	movs	r3, #77	; 0x4d
1001110c:	2500      	movs	r5, #0
1001110e:	71a3      	strb	r3, [r4, #6]
10011110:	1c20      	adds	r0, r4, #0
10011112:	2155      	movs	r1, #85	; 0x55
10011114:	4b08      	ldr	r3, [pc, #32]	; (10011138 <gapm_start_adv_cmd_handler+0x11c>)
10011116:	71e5      	strb	r5, [r4, #7]
10011118:	4798      	blx	r3
1001111a:	1c28      	adds	r0, r5, #0
1001111c:	b009      	add	sp, #36	; 0x24
1001111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011120:	1001b0e8 	.word	0x1001b0e8
10011124:	1001b458 	.word	0x1001b458
10011128:	1001b469 	.word	0x1001b469
1001112c:	100158f7 	.word	0x100158f7
10011130:	1001b46c 	.word	0x1001b46c
10011134:	1001b489 	.word	0x1001b489
10011138:	10010019 	.word	0x10010019

1001113c <get_gap_local_addr_type>:
1001113c:	4b04      	ldr	r3, [pc, #16]	; (10011150 <get_gap_local_addr_type+0x14>)
1001113e:	2001      	movs	r0, #1
10011140:	791b      	ldrb	r3, [r3, #4]
10011142:	2b02      	cmp	r3, #2
10011144:	d003      	beq.n	1001114e <get_gap_local_addr_type+0x12>
10011146:	3b03      	subs	r3, #3
10011148:	4258      	negs	r0, r3
1001114a:	4158      	adcs	r0, r3
1001114c:	0040      	lsls	r0, r0, #1
1001114e:	4770      	bx	lr
10011150:	1001b17a 	.word	0x1001b17a

10011154 <gapm_adv_report_evt_handler>:
10011154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011156:	7843      	ldrb	r3, [r0, #1]
10011158:	1c05      	adds	r5, r0, #0
1001115a:	9301      	str	r3, [sp, #4]
1001115c:	466b      	mov	r3, sp
1001115e:	1c0c      	adds	r4, r1, #0
10011160:	791b      	ldrb	r3, [r3, #4]
10011162:	7806      	ldrb	r6, [r0, #0]
10011164:	2206      	movs	r2, #6
10011166:	704b      	strb	r3, [r1, #1]
10011168:	1c88      	adds	r0, r1, #2
1001116a:	4f1b      	ldr	r7, [pc, #108]	; (100111d8 <gapm_adv_report_evt_handler+0x84>)
1001116c:	1ca9      	adds	r1, r5, #2
1001116e:	47b8      	blx	r7
10011170:	1c20      	adds	r0, r4, #0
10011172:	1c29      	adds	r1, r5, #0
10011174:	7a2a      	ldrb	r2, [r5, #8]
10011176:	3008      	adds	r0, #8
10011178:	77c2      	strb	r2, [r0, #31]
1001117a:	3109      	adds	r1, #9
1001117c:	3528      	adds	r5, #40	; 0x28
1001117e:	47b8      	blx	r7
10011180:	782b      	ldrb	r3, [r5, #0]
10011182:	b25a      	sxtb	r2, r3
10011184:	2a00      	cmp	r2, #0
10011186:	da01      	bge.n	1001118c <gapm_adv_report_evt_handler+0x38>
10011188:	3301      	adds	r3, #1
1001118a:	b2db      	uxtb	r3, r3
1001118c:	1c22      	adds	r2, r4, #0
1001118e:	3228      	adds	r2, #40	; 0x28
10011190:	7013      	strb	r3, [r2, #0]
10011192:	2200      	movs	r2, #0
10011194:	9b01      	ldr	r3, [sp, #4]
10011196:	4293      	cmp	r3, r2
10011198:	d00a      	beq.n	100111b0 <gapm_adv_report_evt_handler+0x5c>
1001119a:	79e3      	ldrb	r3, [r4, #7]
1001119c:	323f      	adds	r2, #63	; 0x3f
1001119e:	1c19      	adds	r1, r3, #0
100111a0:	4391      	bics	r1, r2
100111a2:	3a3e      	subs	r2, #62	; 0x3e
100111a4:	29c0      	cmp	r1, #192	; 0xc0
100111a6:	d003      	beq.n	100111b0 <gapm_adv_report_evt_handler+0x5c>
100111a8:	065b      	lsls	r3, r3, #25
100111aa:	0fdb      	lsrs	r3, r3, #31
100111ac:	3202      	adds	r2, #2
100111ae:	1ad2      	subs	r2, r2, r3
100111b0:	7062      	strb	r2, [r4, #1]
100111b2:	2e04      	cmp	r6, #4
100111b4:	d80f      	bhi.n	100111d6 <gapm_adv_report_evt_handler+0x82>
100111b6:	1c30      	adds	r0, r6, #0
100111b8:	f001 fd06 	bl	10012bc8 <__gnu_thumb1_case_uqi>
100111bc:	09070503 	.word	0x09070503
100111c0:	0b          	.byte	0x0b
100111c1:	00          	.byte	0x00
100111c2:	2300      	movs	r3, #0
100111c4:	e006      	b.n	100111d4 <gapm_adv_report_evt_handler+0x80>
100111c6:	2301      	movs	r3, #1
100111c8:	e004      	b.n	100111d4 <gapm_adv_report_evt_handler+0x80>
100111ca:	2302      	movs	r3, #2
100111cc:	e002      	b.n	100111d4 <gapm_adv_report_evt_handler+0x80>
100111ce:	2303      	movs	r3, #3
100111d0:	e000      	b.n	100111d4 <gapm_adv_report_evt_handler+0x80>
100111d2:	2305      	movs	r3, #5
100111d4:	7023      	strb	r3, [r4, #0]
100111d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100111d8:	100158f7 	.word	0x100158f7

100111dc <gapm_resolv_addr_cmd_handler>:
100111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100111de:	2314      	movs	r3, #20
100111e0:	4c12      	ldr	r4, [pc, #72]	; (1001122c <gapm_resolv_addr_cmd_handler+0x50>)
100111e2:	1c17      	adds	r7, r2, #0
100111e4:	7023      	strb	r3, [r4, #0]
100111e6:	3b07      	subs	r3, #7
100111e8:	7063      	strb	r3, [r4, #1]
100111ea:	70a3      	strb	r3, [r4, #2]
100111ec:	2300      	movs	r3, #0
100111ee:	70e3      	strb	r3, [r4, #3]
100111f0:	4b0f      	ldr	r3, [pc, #60]	; (10011230 <gapm_resolv_addr_cmd_handler+0x54>)
100111f2:	1c05      	adds	r5, r0, #0
100111f4:	881a      	ldrh	r2, [r3, #0]
100111f6:	881b      	ldrh	r3, [r3, #0]
100111f8:	4e0e      	ldr	r6, [pc, #56]	; (10011234 <gapm_resolv_addr_cmd_handler+0x58>)
100111fa:	0a1b      	lsrs	r3, r3, #8
100111fc:	7163      	strb	r3, [r4, #5]
100111fe:	2317      	movs	r3, #23
10011200:	012d      	lsls	r5, r5, #4
10011202:	7122      	strb	r2, [r4, #4]
10011204:	7260      	strb	r0, [r4, #9]
10011206:	2206      	movs	r2, #6
10011208:	480b      	ldr	r0, [pc, #44]	; (10011238 <gapm_resolv_addr_cmd_handler+0x5c>)
1001120a:	7223      	strb	r3, [r4, #8]
1001120c:	47b0      	blx	r6
1001120e:	1c39      	adds	r1, r7, #0
10011210:	1c2a      	adds	r2, r5, #0
10011212:	480a      	ldr	r0, [pc, #40]	; (1001123c <gapm_resolv_addr_cmd_handler+0x60>)
10011214:	47b0      	blx	r6
10011216:	1c29      	adds	r1, r5, #0
10011218:	3110      	adds	r1, #16
1001121a:	1c0b      	adds	r3, r1, #0
1001121c:	3b08      	subs	r3, #8
1001121e:	71a3      	strb	r3, [r4, #6]
10011220:	121b      	asrs	r3, r3, #8
10011222:	71e3      	strb	r3, [r4, #7]
10011224:	1c20      	adds	r0, r4, #0
10011226:	4b06      	ldr	r3, [pc, #24]	; (10011240 <gapm_resolv_addr_cmd_handler+0x64>)
10011228:	4798      	blx	r3
1001122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001122c:	1001b458 	.word	0x1001b458
10011230:	1001b0e8 	.word	0x1001b0e8
10011234:	100158f7 	.word	0x100158f7
10011238:	1001b462 	.word	0x1001b462
1001123c:	1001b468 	.word	0x1001b468
10011240:	10010019 	.word	0x10010019

10011244 <gapm_addr_solved_ind_handler>:
10011244:	b570      	push	{r4, r5, r6, lr}
10011246:	1c04      	adds	r4, r0, #0
10011248:	1c08      	adds	r0, r1, #0
1001124a:	1c0d      	adds	r5, r1, #0
1001124c:	4e05      	ldr	r6, [pc, #20]	; (10011264 <gapm_addr_solved_ind_handler+0x20>)
1001124e:	1c21      	adds	r1, r4, #0
10011250:	2206      	movs	r2, #6
10011252:	3011      	adds	r0, #17
10011254:	47b0      	blx	r6
10011256:	1c68      	adds	r0, r5, #1
10011258:	1da1      	adds	r1, r4, #6
1001125a:	2210      	movs	r2, #16
1001125c:	47b0      	blx	r6
1001125e:	2300      	movs	r3, #0
10011260:	702b      	strb	r3, [r5, #0]
10011262:	bd70      	pop	{r4, r5, r6, pc}
10011264:	100158f7 	.word	0x100158f7

10011268 <gapm_profile_added_ind_handler>:
10011268:	b510      	push	{r4, lr}
1001126a:	7843      	ldrb	r3, [r0, #1]
1001126c:	7902      	ldrb	r2, [r0, #4]
1001126e:	7944      	ldrb	r4, [r0, #5]
10011270:	7800      	ldrb	r0, [r0, #0]
10011272:	021b      	lsls	r3, r3, #8
10011274:	4303      	orrs	r3, r0
10011276:	2b1b      	cmp	r3, #27
10011278:	d104      	bne.n	10011284 <gapm_profile_added_ind_handler+0x1c>
1001127a:	2300      	movs	r3, #0
1001127c:	700b      	strb	r3, [r1, #0]
1001127e:	0223      	lsls	r3, r4, #8
10011280:	4313      	orrs	r3, r2
10011282:	804b      	strh	r3, [r1, #2]
10011284:	203b      	movs	r0, #59	; 0x3b
10011286:	bd10      	pop	{r4, pc}

10011288 <gattc_read_req_ind_parser>:
10011288:	7843      	ldrb	r3, [r0, #1]
1001128a:	7802      	ldrb	r2, [r0, #0]
1001128c:	021b      	lsls	r3, r3, #8
1001128e:	4313      	orrs	r3, r2
10011290:	804b      	strh	r3, [r1, #2]
10011292:	4770      	bx	lr

10011294 <gattc_write_req_ind_parser>:
10011294:	b508      	push	{r3, lr}
10011296:	1c13      	adds	r3, r2, #0
10011298:	0a00      	lsrs	r0, r0, #8
1001129a:	8010      	strh	r0, [r2, #0]
1001129c:	784a      	ldrb	r2, [r1, #1]
1001129e:	7808      	ldrb	r0, [r1, #0]
100112a0:	0212      	lsls	r2, r2, #8
100112a2:	4302      	orrs	r2, r0
100112a4:	805a      	strh	r2, [r3, #2]
100112a6:	78ca      	ldrb	r2, [r1, #3]
100112a8:	7888      	ldrb	r0, [r1, #2]
100112aa:	0212      	lsls	r2, r2, #8
100112ac:	4302      	orrs	r2, r0
100112ae:	809a      	strh	r2, [r3, #4]
100112b0:	794a      	ldrb	r2, [r1, #5]
100112b2:	7908      	ldrb	r0, [r1, #4]
100112b4:	0212      	lsls	r2, r2, #8
100112b6:	4302      	orrs	r2, r0
100112b8:	80da      	strh	r2, [r3, #6]
100112ba:	3308      	adds	r3, #8
100112bc:	1c18      	adds	r0, r3, #0
100112be:	3106      	adds	r1, #6
100112c0:	4b01      	ldr	r3, [pc, #4]	; (100112c8 <gattc_write_req_ind_parser+0x34>)
100112c2:	4798      	blx	r3
100112c4:	bd08      	pop	{r3, pc}
100112c6:	46c0      	nop			; (mov r8, r8)
100112c8:	100158f7 	.word	0x100158f7

100112cc <gattc_att_info_req_parser>:
100112cc:	7843      	ldrb	r3, [r0, #1]
100112ce:	7802      	ldrb	r2, [r0, #0]
100112d0:	021b      	lsls	r3, r3, #8
100112d2:	4313      	orrs	r3, r2
100112d4:	800b      	strh	r3, [r1, #0]
100112d6:	4770      	bx	lr

100112d8 <gattc_read_cfm>:
100112d8:	b538      	push	{r3, r4, r5, lr}
100112da:	2514      	movs	r5, #20
100112dc:	1c1c      	adds	r4, r3, #0
100112de:	4b14      	ldr	r3, [pc, #80]	; (10011330 <gattc_read_cfm+0x58>)
100112e0:	70d9      	strb	r1, [r3, #3]
100112e2:	4914      	ldr	r1, [pc, #80]	; (10011334 <gattc_read_cfm+0x5c>)
100112e4:	701d      	strb	r5, [r3, #0]
100112e6:	3d08      	subs	r5, #8
100112e8:	705d      	strb	r5, [r3, #1]
100112ea:	709d      	strb	r5, [r3, #2]
100112ec:	880d      	ldrh	r5, [r1, #0]
100112ee:	8809      	ldrh	r1, [r1, #0]
100112f0:	7218      	strb	r0, [r3, #8]
100112f2:	0a09      	lsrs	r1, r1, #8
100112f4:	7159      	strb	r1, [r3, #5]
100112f6:	0a00      	lsrs	r0, r0, #8
100112f8:	0a21      	lsrs	r1, r4, #8
100112fa:	711d      	strb	r5, [r3, #4]
100112fc:	7258      	strb	r0, [r3, #9]
100112fe:	729c      	strb	r4, [r3, #10]
10011300:	72d9      	strb	r1, [r3, #11]
10011302:	731a      	strb	r2, [r3, #12]
10011304:	1c1d      	adds	r5, r3, #0
10011306:	2c00      	cmp	r4, #0
10011308:	d007      	beq.n	1001131a <gattc_read_cfm+0x42>
1001130a:	9904      	ldr	r1, [sp, #16]
1001130c:	1c22      	adds	r2, r4, #0
1001130e:	480a      	ldr	r0, [pc, #40]	; (10011338 <gattc_read_cfm+0x60>)
10011310:	4b0a      	ldr	r3, [pc, #40]	; (1001133c <gattc_read_cfm+0x64>)
10011312:	340d      	adds	r4, #13
10011314:	4798      	blx	r3
10011316:	b2a1      	uxth	r1, r4
10011318:	e001      	b.n	1001131e <gattc_read_cfm+0x46>
1001131a:	210e      	movs	r1, #14
1001131c:	735c      	strb	r4, [r3, #13]
1001131e:	1c0b      	adds	r3, r1, #0
10011320:	3b08      	subs	r3, #8
10011322:	71ab      	strb	r3, [r5, #6]
10011324:	121b      	asrs	r3, r3, #8
10011326:	71eb      	strb	r3, [r5, #7]
10011328:	1c28      	adds	r0, r5, #0
1001132a:	4b05      	ldr	r3, [pc, #20]	; (10011340 <gattc_read_cfm+0x68>)
1001132c:	4798      	blx	r3
1001132e:	bd38      	pop	{r3, r4, r5, pc}
10011330:	1001b458 	.word	0x1001b458
10011334:	1001b0e8 	.word	0x1001b0e8
10011338:	1001b465 	.word	0x1001b465
1001133c:	100158f7 	.word	0x100158f7
10011340:	10010019 	.word	0x10010019

10011344 <gattc_write_cfm>:
10011344:	4b0d      	ldr	r3, [pc, #52]	; (1001137c <gattc_write_cfm+0x38>)
10011346:	b510      	push	{r4, lr}
10011348:	729a      	strb	r2, [r3, #10]
1001134a:	2203      	movs	r2, #3
1001134c:	2416      	movs	r4, #22
1001134e:	719a      	strb	r2, [r3, #6]
10011350:	2200      	movs	r2, #0
10011352:	70d9      	strb	r1, [r3, #3]
10011354:	490a      	ldr	r1, [pc, #40]	; (10011380 <gattc_write_cfm+0x3c>)
10011356:	701c      	strb	r4, [r3, #0]
10011358:	3c0a      	subs	r4, #10
1001135a:	705c      	strb	r4, [r3, #1]
1001135c:	709c      	strb	r4, [r3, #2]
1001135e:	880c      	ldrh	r4, [r1, #0]
10011360:	8809      	ldrh	r1, [r1, #0]
10011362:	7218      	strb	r0, [r3, #8]
10011364:	0a09      	lsrs	r1, r1, #8
10011366:	0a00      	lsrs	r0, r0, #8
10011368:	711c      	strb	r4, [r3, #4]
1001136a:	7159      	strb	r1, [r3, #5]
1001136c:	7258      	strb	r0, [r3, #9]
1001136e:	71da      	strb	r2, [r3, #7]
10011370:	1c18      	adds	r0, r3, #0
10011372:	210b      	movs	r1, #11
10011374:	4b03      	ldr	r3, [pc, #12]	; (10011384 <gattc_write_cfm+0x40>)
10011376:	4798      	blx	r3
10011378:	bd10      	pop	{r4, pc}
1001137a:	46c0      	nop			; (mov r8, r8)
1001137c:	1001b458 	.word	0x1001b458
10011380:	1001b0e8 	.word	0x1001b0e8
10011384:	10010019 	.word	0x10010019

10011388 <gattc_att_info_cfm>:
10011388:	b538      	push	{r3, r4, r5, lr}
1001138a:	4c0e      	ldr	r4, [pc, #56]	; (100113c4 <gattc_att_info_cfm+0x3c>)
1001138c:	2518      	movs	r5, #24
1001138e:	7323      	strb	r3, [r4, #12]
10011390:	2305      	movs	r3, #5
10011392:	71a3      	strb	r3, [r4, #6]
10011394:	2300      	movs	r3, #0
10011396:	70e1      	strb	r1, [r4, #3]
10011398:	490b      	ldr	r1, [pc, #44]	; (100113c8 <gattc_att_info_cfm+0x40>)
1001139a:	7025      	strb	r5, [r4, #0]
1001139c:	3d0c      	subs	r5, #12
1001139e:	7065      	strb	r5, [r4, #1]
100113a0:	70a5      	strb	r5, [r4, #2]
100113a2:	880d      	ldrh	r5, [r1, #0]
100113a4:	8809      	ldrh	r1, [r1, #0]
100113a6:	7220      	strb	r0, [r4, #8]
100113a8:	0a09      	lsrs	r1, r1, #8
100113aa:	0a00      	lsrs	r0, r0, #8
100113ac:	7161      	strb	r1, [r4, #5]
100113ae:	7260      	strb	r0, [r4, #9]
100113b0:	72a2      	strb	r2, [r4, #10]
100113b2:	71e3      	strb	r3, [r4, #7]
100113b4:	0a12      	lsrs	r2, r2, #8
100113b6:	1c20      	adds	r0, r4, #0
100113b8:	210d      	movs	r1, #13
100113ba:	4b04      	ldr	r3, [pc, #16]	; (100113cc <gattc_att_info_cfm+0x44>)
100113bc:	7125      	strb	r5, [r4, #4]
100113be:	72e2      	strb	r2, [r4, #11]
100113c0:	4798      	blx	r3
100113c2:	bd38      	pop	{r3, r4, r5, pc}
100113c4:	1001b458 	.word	0x1001b458
100113c8:	1001b0e8 	.word	0x1001b0e8
100113cc:	10010019 	.word	0x10010019

100113d0 <gattc_send_evt_cmd_handler>:
100113d0:	b570      	push	{r4, r5, r6, lr}
100113d2:	2610      	movs	r6, #16
100113d4:	ac04      	add	r4, sp, #16
100113d6:	8825      	ldrh	r5, [r4, #0]
100113d8:	4c15      	ldr	r4, [pc, #84]	; (10011430 <gattc_send_evt_cmd_handler+0x60>)
100113da:	70e2      	strb	r2, [r4, #3]
100113dc:	4a15      	ldr	r2, [pc, #84]	; (10011434 <gattc_send_evt_cmd_handler+0x64>)
100113de:	7026      	strb	r6, [r4, #0]
100113e0:	3e04      	subs	r6, #4
100113e2:	7066      	strb	r6, [r4, #1]
100113e4:	70a6      	strb	r6, [r4, #2]
100113e6:	8816      	ldrh	r6, [r2, #0]
100113e8:	8812      	ldrh	r2, [r2, #0]
100113ea:	7220      	strb	r0, [r4, #8]
100113ec:	0a12      	lsrs	r2, r2, #8
100113ee:	7162      	strb	r2, [r4, #5]
100113f0:	4a11      	ldr	r2, [pc, #68]	; (10011438 <gattc_send_evt_cmd_handler+0x68>)
100113f2:	7321      	strb	r1, [r4, #12]
100113f4:	8812      	ldrh	r2, [r2, #0]
100113f6:	73a5      	strb	r5, [r4, #14]
100113f8:	3201      	adds	r2, #1
100113fa:	7262      	strb	r2, [r4, #9]
100113fc:	1212      	asrs	r2, r2, #8
100113fe:	72a2      	strb	r2, [r4, #10]
10011400:	2200      	movs	r2, #0
10011402:	72e2      	strb	r2, [r4, #11]
10011404:	0a0a      	lsrs	r2, r1, #8
10011406:	7362      	strb	r2, [r4, #13]
10011408:	0a2a      	lsrs	r2, r5, #8
1001140a:	73e2      	strb	r2, [r4, #15]
1001140c:	1c19      	adds	r1, r3, #0
1001140e:	1c2a      	adds	r2, r5, #0
10011410:	4b0a      	ldr	r3, [pc, #40]	; (1001143c <gattc_send_evt_cmd_handler+0x6c>)
10011412:	3510      	adds	r5, #16
10011414:	480a      	ldr	r0, [pc, #40]	; (10011440 <gattc_send_evt_cmd_handler+0x70>)
10011416:	7126      	strb	r6, [r4, #4]
10011418:	4798      	blx	r3
1001141a:	b2a9      	uxth	r1, r5
1001141c:	1c0b      	adds	r3, r1, #0
1001141e:	3b08      	subs	r3, #8
10011420:	71a3      	strb	r3, [r4, #6]
10011422:	121b      	asrs	r3, r3, #8
10011424:	71e3      	strb	r3, [r4, #7]
10011426:	1c20      	adds	r0, r4, #0
10011428:	4b06      	ldr	r3, [pc, #24]	; (10011444 <gattc_send_evt_cmd_handler+0x74>)
1001142a:	4798      	blx	r3
1001142c:	bd70      	pop	{r4, r5, r6, pc}
1001142e:	46c0      	nop			; (mov r8, r8)
10011430:	1001b458 	.word	0x1001b458
10011434:	1001b0e8 	.word	0x1001b0e8
10011438:	1001a220 	.word	0x1001a220
1001143c:	100158f7 	.word	0x100158f7
10011440:	1001b468 	.word	0x1001b468
10011444:	10010019 	.word	0x10010019

10011448 <gattc_event_cfm_handler>:
10011448:	220e      	movs	r2, #14
1001144a:	b508      	push	{r3, lr}
1001144c:	4b0b      	ldr	r3, [pc, #44]	; (1001147c <gattc_event_cfm_handler+0x34>)
1001144e:	701a      	strb	r2, [r3, #0]
10011450:	3a02      	subs	r2, #2
10011452:	705a      	strb	r2, [r3, #1]
10011454:	709a      	strb	r2, [r3, #2]
10011456:	4a0a      	ldr	r2, [pc, #40]	; (10011480 <gattc_event_cfm_handler+0x38>)
10011458:	70d8      	strb	r0, [r3, #3]
1001145a:	8810      	ldrh	r0, [r2, #0]
1001145c:	8812      	ldrh	r2, [r2, #0]
1001145e:	7219      	strb	r1, [r3, #8]
10011460:	0a12      	lsrs	r2, r2, #8
10011462:	715a      	strb	r2, [r3, #5]
10011464:	2202      	movs	r2, #2
10011466:	719a      	strb	r2, [r3, #6]
10011468:	2200      	movs	r2, #0
1001146a:	0a09      	lsrs	r1, r1, #8
1001146c:	7118      	strb	r0, [r3, #4]
1001146e:	7259      	strb	r1, [r3, #9]
10011470:	71da      	strb	r2, [r3, #7]
10011472:	1c18      	adds	r0, r3, #0
10011474:	210a      	movs	r1, #10
10011476:	4b03      	ldr	r3, [pc, #12]	; (10011484 <gattc_event_cfm_handler+0x3c>)
10011478:	4798      	blx	r3
1001147a:	bd08      	pop	{r3, pc}
1001147c:	1001b458 	.word	0x1001b458
10011480:	1001b0e8 	.word	0x1001b0e8
10011484:	10010019 	.word	0x10010019

10011488 <gattc_disc_svc_ind_parser>:
10011488:	b570      	push	{r4, r5, r6, lr}
1001148a:	1c15      	adds	r5, r2, #0
1001148c:	0a00      	lsrs	r0, r0, #8
1001148e:	8010      	strh	r0, [r2, #0]
10011490:	784b      	ldrb	r3, [r1, #1]
10011492:	780a      	ldrb	r2, [r1, #0]
10011494:	021b      	lsls	r3, r3, #8
10011496:	4313      	orrs	r3, r2
10011498:	806b      	strh	r3, [r5, #2]
1001149a:	78cb      	ldrb	r3, [r1, #3]
1001149c:	788a      	ldrb	r2, [r1, #2]
1001149e:	021b      	lsls	r3, r3, #8
100114a0:	4313      	orrs	r3, r2
100114a2:	80ab      	strh	r3, [r5, #4]
100114a4:	790e      	ldrb	r6, [r1, #4]
100114a6:	4b05      	ldr	r3, [pc, #20]	; (100114bc <gattc_disc_svc_ind_parser+0x34>)
100114a8:	1c30      	adds	r0, r6, #0
100114aa:	1c0c      	adds	r4, r1, #0
100114ac:	4798      	blx	r3
100114ae:	1c32      	adds	r2, r6, #0
100114b0:	71a8      	strb	r0, [r5, #6]
100114b2:	1d61      	adds	r1, r4, #5
100114b4:	1de8      	adds	r0, r5, #7
100114b6:	4b02      	ldr	r3, [pc, #8]	; (100114c0 <gattc_disc_svc_ind_parser+0x38>)
100114b8:	4798      	blx	r3
100114ba:	bd70      	pop	{r4, r5, r6, pc}
100114bc:	1000f359 	.word	0x1000f359
100114c0:	100158f7 	.word	0x100158f7

100114c4 <gattc_disc_svc_incl_ind_parser>:
100114c4:	b570      	push	{r4, r5, r6, lr}
100114c6:	1c15      	adds	r5, r2, #0
100114c8:	0a00      	lsrs	r0, r0, #8
100114ca:	8010      	strh	r0, [r2, #0]
100114cc:	784b      	ldrb	r3, [r1, #1]
100114ce:	780a      	ldrb	r2, [r1, #0]
100114d0:	021b      	lsls	r3, r3, #8
100114d2:	4313      	orrs	r3, r2
100114d4:	806b      	strh	r3, [r5, #2]
100114d6:	78cb      	ldrb	r3, [r1, #3]
100114d8:	788a      	ldrb	r2, [r1, #2]
100114da:	021b      	lsls	r3, r3, #8
100114dc:	4313      	orrs	r3, r2
100114de:	80ab      	strh	r3, [r5, #4]
100114e0:	794b      	ldrb	r3, [r1, #5]
100114e2:	790a      	ldrb	r2, [r1, #4]
100114e4:	021b      	lsls	r3, r3, #8
100114e6:	4313      	orrs	r3, r2
100114e8:	80eb      	strh	r3, [r5, #6]
100114ea:	798e      	ldrb	r6, [r1, #6]
100114ec:	4b05      	ldr	r3, [pc, #20]	; (10011504 <gattc_disc_svc_incl_ind_parser+0x40>)
100114ee:	1c30      	adds	r0, r6, #0
100114f0:	1c0c      	adds	r4, r1, #0
100114f2:	4798      	blx	r3
100114f4:	7228      	strb	r0, [r5, #8]
100114f6:	1c28      	adds	r0, r5, #0
100114f8:	1c32      	adds	r2, r6, #0
100114fa:	1de1      	adds	r1, r4, #7
100114fc:	4b02      	ldr	r3, [pc, #8]	; (10011508 <gattc_disc_svc_incl_ind_parser+0x44>)
100114fe:	3009      	adds	r0, #9
10011500:	4798      	blx	r3
10011502:	bd70      	pop	{r4, r5, r6, pc}
10011504:	1000f359 	.word	0x1000f359
10011508:	100158f7 	.word	0x100158f7

1001150c <gattc_disc_char_ind_parser>:
1001150c:	b570      	push	{r4, r5, r6, lr}
1001150e:	1c15      	adds	r5, r2, #0
10011510:	0a00      	lsrs	r0, r0, #8
10011512:	8010      	strh	r0, [r2, #0]
10011514:	784b      	ldrb	r3, [r1, #1]
10011516:	780a      	ldrb	r2, [r1, #0]
10011518:	021b      	lsls	r3, r3, #8
1001151a:	4313      	orrs	r3, r2
1001151c:	806b      	strh	r3, [r5, #2]
1001151e:	78cb      	ldrb	r3, [r1, #3]
10011520:	788a      	ldrb	r2, [r1, #2]
10011522:	021b      	lsls	r3, r3, #8
10011524:	4313      	orrs	r3, r2
10011526:	80ab      	strh	r3, [r5, #4]
10011528:	790b      	ldrb	r3, [r1, #4]
1001152a:	1c0c      	adds	r4, r1, #0
1001152c:	71ab      	strb	r3, [r5, #6]
1001152e:	794e      	ldrb	r6, [r1, #5]
10011530:	4b05      	ldr	r3, [pc, #20]	; (10011548 <gattc_disc_char_ind_parser+0x3c>)
10011532:	1c30      	adds	r0, r6, #0
10011534:	4798      	blx	r3
10011536:	71e8      	strb	r0, [r5, #7]
10011538:	1c28      	adds	r0, r5, #0
1001153a:	1c32      	adds	r2, r6, #0
1001153c:	1da1      	adds	r1, r4, #6
1001153e:	4b03      	ldr	r3, [pc, #12]	; (1001154c <gattc_disc_char_ind_parser+0x40>)
10011540:	3008      	adds	r0, #8
10011542:	4798      	blx	r3
10011544:	bd70      	pop	{r4, r5, r6, pc}
10011546:	46c0      	nop			; (mov r8, r8)
10011548:	1000f359 	.word	0x1000f359
1001154c:	100158f7 	.word	0x100158f7

10011550 <gattc_disc_char_desc_ind_parser>:
10011550:	b570      	push	{r4, r5, r6, lr}
10011552:	1c15      	adds	r5, r2, #0
10011554:	0a00      	lsrs	r0, r0, #8
10011556:	8010      	strh	r0, [r2, #0]
10011558:	784b      	ldrb	r3, [r1, #1]
1001155a:	780a      	ldrb	r2, [r1, #0]
1001155c:	021b      	lsls	r3, r3, #8
1001155e:	4313      	orrs	r3, r2
10011560:	806b      	strh	r3, [r5, #2]
10011562:	788e      	ldrb	r6, [r1, #2]
10011564:	4b05      	ldr	r3, [pc, #20]	; (1001157c <gattc_disc_char_desc_ind_parser+0x2c>)
10011566:	1c30      	adds	r0, r6, #0
10011568:	1c0c      	adds	r4, r1, #0
1001156a:	4798      	blx	r3
1001156c:	1c32      	adds	r2, r6, #0
1001156e:	7128      	strb	r0, [r5, #4]
10011570:	1ce1      	adds	r1, r4, #3
10011572:	1d68      	adds	r0, r5, #5
10011574:	4b02      	ldr	r3, [pc, #8]	; (10011580 <gattc_disc_char_desc_ind_parser+0x30>)
10011576:	4798      	blx	r3
10011578:	bd70      	pop	{r4, r5, r6, pc}
1001157a:	46c0      	nop			; (mov r8, r8)
1001157c:	1000f359 	.word	0x1000f359
10011580:	100158f7 	.word	0x100158f7

10011584 <gattc_event_ind_and_notification_parser>:
10011584:	b510      	push	{r4, lr}
10011586:	780c      	ldrb	r4, [r1, #0]
10011588:	1c13      	adds	r3, r2, #0
1001158a:	2c12      	cmp	r4, #18
1001158c:	d10e      	bne.n	100115ac <gattc_event_ind_and_notification_parser+0x28>
1001158e:	0a00      	lsrs	r0, r0, #8
10011590:	8010      	strh	r0, [r2, #0]
10011592:	788a      	ldrb	r2, [r1, #2]
10011594:	709a      	strb	r2, [r3, #2]
10011596:	7948      	ldrb	r0, [r1, #5]
10011598:	790c      	ldrb	r4, [r1, #4]
1001159a:	0200      	lsls	r0, r0, #8
1001159c:	4320      	orrs	r0, r4
1001159e:	8098      	strh	r0, [r3, #4]
100115a0:	3106      	adds	r1, #6
100115a2:	1d98      	adds	r0, r3, #6
100115a4:	4b0b      	ldr	r3, [pc, #44]	; (100115d4 <gattc_event_ind_and_notification_parser+0x50>)
100115a6:	4798      	blx	r3
100115a8:	221b      	movs	r2, #27
100115aa:	e010      	b.n	100115ce <gattc_event_ind_and_notification_parser+0x4a>
100115ac:	2200      	movs	r2, #0
100115ae:	2c13      	cmp	r4, #19
100115b0:	d10d      	bne.n	100115ce <gattc_event_ind_and_notification_parser+0x4a>
100115b2:	0a00      	lsrs	r0, r0, #8
100115b4:	8018      	strh	r0, [r3, #0]
100115b6:	788a      	ldrb	r2, [r1, #2]
100115b8:	709a      	strb	r2, [r3, #2]
100115ba:	7908      	ldrb	r0, [r1, #4]
100115bc:	78cc      	ldrb	r4, [r1, #3]
100115be:	0200      	lsls	r0, r0, #8
100115c0:	4320      	orrs	r0, r4
100115c2:	8098      	strh	r0, [r3, #4]
100115c4:	3106      	adds	r1, #6
100115c6:	1d98      	adds	r0, r3, #6
100115c8:	4b02      	ldr	r3, [pc, #8]	; (100115d4 <gattc_event_ind_and_notification_parser+0x50>)
100115ca:	4798      	blx	r3
100115cc:	221c      	movs	r2, #28
100115ce:	1c10      	adds	r0, r2, #0
100115d0:	bd10      	pop	{r4, pc}
100115d2:	46c0      	nop			; (mov r8, r8)
100115d4:	100158f7 	.word	0x100158f7

100115d8 <gattc_complete_evt_handler>:
100115d8:	b500      	push	{lr}
100115da:	0a00      	lsrs	r0, r0, #8
100115dc:	8010      	strh	r0, [r2, #0]
100115de:	7808      	ldrb	r0, [r1, #0]
100115e0:	7090      	strb	r0, [r2, #2]
100115e2:	784b      	ldrb	r3, [r1, #1]
100115e4:	3801      	subs	r0, #1
100115e6:	70d3      	strb	r3, [r2, #3]
100115e8:	2813      	cmp	r0, #19
100115ea:	d82c      	bhi.n	10011646 <gattc_complete_evt_handler+0x6e>
100115ec:	f001 faec 	bl	10012bc8 <__gnu_thumb1_case_uqi>
100115f0:	0a0a0a0c 	.word	0x0a0a0a0c
100115f4:	210a0a0a 	.word	0x210a0a0a
100115f8:	111f2121 	.word	0x111f2121
100115fc:	2b111111 	.word	0x2b111111
10011600:	2919132b 	.word	0x2919132b
10011604:	2017      	movs	r0, #23
10011606:	e01f      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011608:	2024      	movs	r0, #36	; 0x24
1001160a:	2b00      	cmp	r3, #0
1001160c:	d11c      	bne.n	10011648 <gattc_complete_evt_handler+0x70>
1001160e:	3017      	adds	r0, #23
10011610:	e01a      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011612:	2025      	movs	r0, #37	; 0x25
10011614:	e018      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011616:	4a0d      	ldr	r2, [pc, #52]	; (1001164c <gattc_complete_evt_handler+0x74>)
10011618:	201d      	movs	r0, #29
1001161a:	6813      	ldr	r3, [r2, #0]
1001161c:	3b01      	subs	r3, #1
1001161e:	6013      	str	r3, [r2, #0]
10011620:	e012      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011622:	4a0a      	ldr	r2, [pc, #40]	; (1001164c <gattc_complete_evt_handler+0x74>)
10011624:	201e      	movs	r0, #30
10011626:	6813      	ldr	r3, [r2, #0]
10011628:	3b01      	subs	r3, #1
1001162a:	6013      	str	r3, [r2, #0]
1001162c:	e00c      	b.n	10011648 <gattc_complete_evt_handler+0x70>
1001162e:	2019      	movs	r0, #25
10011630:	e00a      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011632:	203b      	movs	r0, #59	; 0x3b
10011634:	2b00      	cmp	r3, #0
10011636:	d007      	beq.n	10011648 <gattc_complete_evt_handler+0x70>
10011638:	2182      	movs	r1, #130	; 0x82
1001163a:	0089      	lsls	r1, r1, #2
1001163c:	5453      	strb	r3, [r2, r1]
1001163e:	3823      	subs	r0, #35	; 0x23
10011640:	e002      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011642:	2021      	movs	r0, #33	; 0x21
10011644:	e000      	b.n	10011648 <gattc_complete_evt_handler+0x70>
10011646:	2000      	movs	r0, #0
10011648:	bd00      	pop	{pc}
1001164a:	46c0      	nop			; (mov r8, r8)
1001164c:	1001a224 	.word	0x1001a224

10011650 <gattc_event_mtu_changed_ind_parser>:
10011650:	0a00      	lsrs	r0, r0, #8
10011652:	8010      	strh	r0, [r2, #0]
10011654:	784b      	ldrb	r3, [r1, #1]
10011656:	7809      	ldrb	r1, [r1, #0]
10011658:	021b      	lsls	r3, r3, #8
1001165a:	430b      	orrs	r3, r1
1001165c:	8053      	strh	r3, [r2, #2]
1001165e:	4770      	bx	lr

10011660 <gattc_read_ind_parser>:
10011660:	0a00      	lsrs	r0, r0, #8
10011662:	b508      	push	{r3, lr}
10011664:	8010      	strh	r0, [r2, #0]
10011666:	1c13      	adds	r3, r2, #0
10011668:	2282      	movs	r2, #130	; 0x82
1001166a:	2000      	movs	r0, #0
1001166c:	0092      	lsls	r2, r2, #2
1001166e:	5498      	strb	r0, [r3, r2]
10011670:	784a      	ldrb	r2, [r1, #1]
10011672:	7808      	ldrb	r0, [r1, #0]
10011674:	0212      	lsls	r2, r2, #8
10011676:	4302      	orrs	r2, r0
10011678:	805a      	strh	r2, [r3, #2]
1001167a:	78ca      	ldrb	r2, [r1, #3]
1001167c:	7888      	ldrb	r0, [r1, #2]
1001167e:	0212      	lsls	r2, r2, #8
10011680:	4302      	orrs	r2, r0
10011682:	80da      	strh	r2, [r3, #6]
10011684:	794a      	ldrb	r2, [r1, #5]
10011686:	7908      	ldrb	r0, [r1, #4]
10011688:	0212      	lsls	r2, r2, #8
1001168a:	4302      	orrs	r2, r0
1001168c:	809a      	strh	r2, [r3, #4]
1001168e:	3308      	adds	r3, #8
10011690:	1c18      	adds	r0, r3, #0
10011692:	3106      	adds	r1, #6
10011694:	4b01      	ldr	r3, [pc, #4]	; (1001169c <gattc_read_ind_parser+0x3c>)
10011696:	4798      	blx	r3
10011698:	bd08      	pop	{r3, pc}
1001169a:	46c0      	nop			; (mov r8, r8)
1001169c:	100158f7 	.word	0x100158f7

100116a0 <gattc_svc_changed_cfg_ind_parser>:
100116a0:	0a00      	lsrs	r0, r0, #8
100116a2:	8010      	strh	r0, [r2, #0]
100116a4:	784b      	ldrb	r3, [r1, #1]
100116a6:	7809      	ldrb	r1, [r1, #0]
100116a8:	021b      	lsls	r3, r3, #8
100116aa:	430b      	orrs	r3, r1
100116ac:	8053      	strh	r3, [r2, #2]
100116ae:	4770      	bx	lr

100116b0 <init_gattc_task_module>:
100116b0:	2300      	movs	r3, #0
100116b2:	4a02      	ldr	r2, [pc, #8]	; (100116bc <init_gattc_task_module+0xc>)
100116b4:	8013      	strh	r3, [r2, #0]
100116b6:	4a02      	ldr	r2, [pc, #8]	; (100116c0 <init_gattc_task_module+0x10>)
100116b8:	8013      	strh	r3, [r2, #0]
100116ba:	4770      	bx	lr
100116bc:	1001a21e 	.word	0x1001a21e
100116c0:	1001a220 	.word	0x1001a220

100116c4 <gattm_add_svc_req_handler>:
100116c4:	2200      	movs	r2, #0
100116c6:	210b      	movs	r1, #11
100116c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100116ca:	1c04      	adds	r4, r0, #0
100116cc:	7943      	ldrb	r3, [r0, #5]
100116ce:	b085      	sub	sp, #20
100116d0:	9301      	str	r3, [sp, #4]
100116d2:	ab02      	add	r3, sp, #8
100116d4:	71da      	strb	r2, [r3, #7]
100116d6:	4b37      	ldr	r3, [pc, #220]	; (100117b4 <gattm_add_svc_req_handler+0xf0>)
100116d8:	7059      	strb	r1, [r3, #1]
100116da:	7099      	strb	r1, [r3, #2]
100116dc:	4936      	ldr	r1, [pc, #216]	; (100117b8 <gattm_add_svc_req_handler+0xf4>)
100116de:	701a      	strb	r2, [r3, #0]
100116e0:	8808      	ldrh	r0, [r1, #0]
100116e2:	8809      	ldrh	r1, [r1, #0]
100116e4:	70da      	strb	r2, [r3, #3]
100116e6:	0a09      	lsrs	r1, r1, #8
100116e8:	7118      	strb	r0, [r3, #4]
100116ea:	7159      	strb	r1, [r3, #5]
100116ec:	8821      	ldrh	r1, [r4, #0]
100116ee:	7219      	strb	r1, [r3, #8]
100116f0:	8821      	ldrh	r1, [r4, #0]
100116f2:	0a09      	lsrs	r1, r1, #8
100116f4:	7259      	strb	r1, [r3, #9]
100116f6:	8861      	ldrh	r1, [r4, #2]
100116f8:	7299      	strb	r1, [r3, #10]
100116fa:	8861      	ldrh	r1, [r4, #2]
100116fc:	0a09      	lsrs	r1, r1, #8
100116fe:	72d9      	strb	r1, [r3, #11]
10011700:	7921      	ldrb	r1, [r4, #4]
10011702:	7319      	strb	r1, [r3, #12]
10011704:	4669      	mov	r1, sp
10011706:	7909      	ldrb	r1, [r1, #4]
10011708:	7359      	strb	r1, [r3, #13]
1001170a:	18a1      	adds	r1, r4, r2
1001170c:	7988      	ldrb	r0, [r1, #6]
1001170e:	1899      	adds	r1, r3, r2
10011710:	3201      	adds	r2, #1
10011712:	7388      	strb	r0, [r1, #14]
10011714:	2a10      	cmp	r2, #16
10011716:	d1f8      	bne.n	1001170a <gattm_add_svc_req_handler+0x46>
10011718:	1c27      	adds	r7, r4, #0
1001171a:	2300      	movs	r3, #0
1001171c:	251e      	movs	r5, #30
1001171e:	3716      	adds	r7, #22
10011720:	9300      	str	r3, [sp, #0]
10011722:	9b00      	ldr	r3, [sp, #0]
10011724:	9a01      	ldr	r2, [sp, #4]
10011726:	4e23      	ldr	r6, [pc, #140]	; (100117b4 <gattm_add_svc_req_handler+0xf0>)
10011728:	4293      	cmp	r3, r2
1001172a:	da21      	bge.n	10011770 <gattm_add_svc_req_handler+0xac>
1001172c:	1c39      	adds	r1, r7, #0
1001172e:	1970      	adds	r0, r6, r5
10011730:	2210      	movs	r2, #16
10011732:	4b22      	ldr	r3, [pc, #136]	; (100117bc <gattm_add_svc_req_handler+0xf8>)
10011734:	4798      	blx	r3
10011736:	1c2b      	adds	r3, r5, #0
10011738:	8a3a      	ldrh	r2, [r7, #16]
1001173a:	3310      	adds	r3, #16
1001173c:	b29b      	uxth	r3, r3
1001173e:	54f2      	strb	r2, [r6, r3]
10011740:	1c2b      	adds	r3, r5, #0
10011742:	8a3a      	ldrh	r2, [r7, #16]
10011744:	3311      	adds	r3, #17
10011746:	b29b      	uxth	r3, r3
10011748:	0a12      	lsrs	r2, r2, #8
1001174a:	54f2      	strb	r2, [r6, r3]
1001174c:	1c2a      	adds	r2, r5, #0
1001174e:	1c2b      	adds	r3, r5, #0
10011750:	8a79      	ldrh	r1, [r7, #18]
10011752:	3212      	adds	r2, #18
10011754:	b292      	uxth	r2, r2
10011756:	54b1      	strb	r1, [r6, r2]
10011758:	8a7a      	ldrh	r2, [r7, #18]
1001175a:	3313      	adds	r3, #19
1001175c:	b29b      	uxth	r3, r3
1001175e:	0a12      	lsrs	r2, r2, #8
10011760:	54f2      	strb	r2, [r6, r3]
10011762:	9b00      	ldr	r3, [sp, #0]
10011764:	3514      	adds	r5, #20
10011766:	3301      	adds	r3, #1
10011768:	b2ad      	uxth	r5, r5
1001176a:	9300      	str	r3, [sp, #0]
1001176c:	3714      	adds	r7, #20
1001176e:	e7d8      	b.n	10011722 <gattm_add_svc_req_handler+0x5e>
10011770:	2114      	movs	r1, #20
10011772:	4d13      	ldr	r5, [pc, #76]	; (100117c0 <gattm_add_svc_req_handler+0xfc>)
10011774:	4b13      	ldr	r3, [pc, #76]	; (100117c4 <gattm_add_svc_req_handler+0x100>)
10011776:	4351      	muls	r1, r2
10011778:	802b      	strh	r3, [r5, #0]
1001177a:	230b      	movs	r3, #11
1001177c:	311e      	adds	r1, #30
1001177e:	80ab      	strh	r3, [r5, #4]
10011780:	1c0b      	adds	r3, r1, #0
10011782:	3b08      	subs	r3, #8
10011784:	71b3      	strb	r3, [r6, #6]
10011786:	121b      	asrs	r3, r3, #8
10011788:	71f3      	strb	r3, [r6, #7]
1001178a:	1c30      	adds	r0, r6, #0
1001178c:	4b0e      	ldr	r3, [pc, #56]	; (100117c8 <gattm_add_svc_req_handler+0x104>)
1001178e:	4798      	blx	r3
10011790:	ab02      	add	r3, sp, #8
10011792:	1dde      	adds	r6, r3, #7
10011794:	1c30      	adds	r0, r6, #0
10011796:	4b0d      	ldr	r3, [pc, #52]	; (100117cc <gattm_add_svc_req_handler+0x108>)
10011798:	4798      	blx	r3
1001179a:	7833      	ldrb	r3, [r6, #0]
1001179c:	20e2      	movs	r0, #226	; 0xe2
1001179e:	2b00      	cmp	r3, #0
100117a0:	d106      	bne.n	100117b0 <gattm_add_svc_req_handler+0xec>
100117a2:	68aa      	ldr	r2, [r5, #8]
100117a4:	7853      	ldrb	r3, [r2, #1]
100117a6:	7811      	ldrb	r1, [r2, #0]
100117a8:	021b      	lsls	r3, r3, #8
100117aa:	430b      	orrs	r3, r1
100117ac:	8023      	strh	r3, [r4, #0]
100117ae:	7890      	ldrb	r0, [r2, #2]
100117b0:	b005      	add	sp, #20
100117b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100117b4:	1001b458 	.word	0x1001b458
100117b8:	1001b0e8 	.word	0x1001b0e8
100117bc:	100158f7 	.word	0x100158f7
100117c0:	1001b0dc 	.word	0x1001b0dc
100117c4:	00000b01 	.word	0x00000b01
100117c8:	10010019 	.word	0x10010019
100117cc:	1001007d 	.word	0x1001007d

100117d0 <gattm_add_attribute_req_handler>:
100117d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100117d2:	1c1f      	adds	r7, r3, #0
100117d4:	4b16      	ldr	r3, [pc, #88]	; (10011830 <gattm_add_attribute_req_handler+0x60>)
100117d6:	9100      	str	r1, [sp, #0]
100117d8:	9201      	str	r2, [sp, #4]
100117da:	1c05      	adds	r5, r0, #0
100117dc:	7946      	ldrb	r6, [r0, #5]
100117de:	6818      	ldr	r0, [r3, #0]
100117e0:	2114      	movs	r1, #20
100117e2:	4b14      	ldr	r3, [pc, #80]	; (10011834 <gattm_add_attribute_req_handler+0x64>)
100117e4:	382a      	subs	r0, #42	; 0x2a
100117e6:	4798      	blx	r3
100117e8:	2311      	movs	r3, #17
100117ea:	4286      	cmp	r6, r0
100117ec:	d21e      	bcs.n	1001182c <gattm_add_attribute_req_handler+0x5c>
100117ee:	2414      	movs	r4, #20
100117f0:	4366      	muls	r6, r4
100117f2:	19a8      	adds	r0, r5, r6
100117f4:	2100      	movs	r1, #0
100117f6:	2210      	movs	r2, #16
100117f8:	4b0f      	ldr	r3, [pc, #60]	; (10011838 <gattm_add_attribute_req_handler+0x68>)
100117fa:	3016      	adds	r0, #22
100117fc:	4798      	blx	r3
100117fe:	7968      	ldrb	r0, [r5, #5]
10011800:	1c3a      	adds	r2, r7, #0
10011802:	4360      	muls	r0, r4
10011804:	1828      	adds	r0, r5, r0
10011806:	4b0d      	ldr	r3, [pc, #52]	; (1001183c <gattm_add_attribute_req_handler+0x6c>)
10011808:	3016      	adds	r0, #22
1001180a:	9908      	ldr	r1, [sp, #32]
1001180c:	4798      	blx	r3
1001180e:	466a      	mov	r2, sp
10011810:	796b      	ldrb	r3, [r5, #5]
10011812:	8812      	ldrh	r2, [r2, #0]
10011814:	435c      	muls	r4, r3
10011816:	192c      	adds	r4, r5, r4
10011818:	8522      	strh	r2, [r4, #40]	; 0x28
1001181a:	466a      	mov	r2, sp
1001181c:	8892      	ldrh	r2, [r2, #4]
1001181e:	84e2      	strh	r2, [r4, #38]	; 0x26
10011820:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011822:	8013      	strh	r3, [r2, #0]
10011824:	796b      	ldrb	r3, [r5, #5]
10011826:	3301      	adds	r3, #1
10011828:	716b      	strb	r3, [r5, #5]
1001182a:	2300      	movs	r3, #0
1001182c:	1c18      	adds	r0, r3, #0
1001182e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011830:	1001a194 	.word	0x1001a194
10011834:	10012bdd 	.word	0x10012bdd
10011838:	10015909 	.word	0x10015909
1001183c:	100158f7 	.word	0x100158f7

10011840 <gattm_att_set_value_req_handler>:
10011840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011842:	466b      	mov	r3, sp
10011844:	1dde      	adds	r6, r3, #7
10011846:	2300      	movs	r3, #0
10011848:	1c0d      	adds	r5, r1, #0
1001184a:	210c      	movs	r1, #12
1001184c:	270b      	movs	r7, #11
1001184e:	4c17      	ldr	r4, [pc, #92]	; (100118ac <gattm_att_set_value_req_handler+0x6c>)
10011850:	7033      	strb	r3, [r6, #0]
10011852:	70e3      	strb	r3, [r4, #3]
10011854:	4b16      	ldr	r3, [pc, #88]	; (100118b0 <gattm_att_set_value_req_handler+0x70>)
10011856:	7021      	strb	r1, [r4, #0]
10011858:	8819      	ldrh	r1, [r3, #0]
1001185a:	881b      	ldrh	r3, [r3, #0]
1001185c:	7220      	strb	r0, [r4, #8]
1001185e:	0a1b      	lsrs	r3, r3, #8
10011860:	7163      	strb	r3, [r4, #5]
10011862:	0a00      	lsrs	r0, r0, #8
10011864:	0a2b      	lsrs	r3, r5, #8
10011866:	7121      	strb	r1, [r4, #4]
10011868:	7260      	strb	r0, [r4, #9]
1001186a:	1c11      	adds	r1, r2, #0
1001186c:	72a5      	strb	r5, [r4, #10]
1001186e:	1c2a      	adds	r2, r5, #0
10011870:	72e3      	strb	r3, [r4, #11]
10011872:	350c      	adds	r5, #12
10011874:	4b0f      	ldr	r3, [pc, #60]	; (100118b4 <gattm_att_set_value_req_handler+0x74>)
10011876:	4810      	ldr	r0, [pc, #64]	; (100118b8 <gattm_att_set_value_req_handler+0x78>)
10011878:	7067      	strb	r7, [r4, #1]
1001187a:	70a7      	strb	r7, [r4, #2]
1001187c:	4798      	blx	r3
1001187e:	b2a9      	uxth	r1, r5
10011880:	4b0e      	ldr	r3, [pc, #56]	; (100118bc <gattm_att_set_value_req_handler+0x7c>)
10011882:	4d0f      	ldr	r5, [pc, #60]	; (100118c0 <gattm_att_set_value_req_handler+0x80>)
10011884:	1c20      	adds	r0, r4, #0
10011886:	802b      	strh	r3, [r5, #0]
10011888:	1c0b      	adds	r3, r1, #0
1001188a:	3b08      	subs	r3, #8
1001188c:	71a3      	strb	r3, [r4, #6]
1001188e:	121b      	asrs	r3, r3, #8
10011890:	71e3      	strb	r3, [r4, #7]
10011892:	4b0c      	ldr	r3, [pc, #48]	; (100118c4 <gattm_att_set_value_req_handler+0x84>)
10011894:	80af      	strh	r7, [r5, #4]
10011896:	4798      	blx	r3
10011898:	1c30      	adds	r0, r6, #0
1001189a:	4b0b      	ldr	r3, [pc, #44]	; (100118c8 <gattm_att_set_value_req_handler+0x88>)
1001189c:	4798      	blx	r3
1001189e:	7833      	ldrb	r3, [r6, #0]
100118a0:	20e2      	movs	r0, #226	; 0xe2
100118a2:	2b00      	cmp	r3, #0
100118a4:	d101      	bne.n	100118aa <gattm_att_set_value_req_handler+0x6a>
100118a6:	68ab      	ldr	r3, [r5, #8]
100118a8:	7898      	ldrb	r0, [r3, #2]
100118aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100118ac:	1001b458 	.word	0x1001b458
100118b0:	1001b0e8 	.word	0x1001b0e8
100118b4:	100158f7 	.word	0x100158f7
100118b8:	1001b464 	.word	0x1001b464
100118bc:	00000b0d 	.word	0x00000b0d
100118c0:	1001b0dc 	.word	0x1001b0dc
100118c4:	10010019 	.word	0x10010019
100118c8:	1001007d 	.word	0x1001007d

100118cc <gattm_att_get_value_req_handler>:
100118cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100118ce:	b085      	sub	sp, #20
100118d0:	9201      	str	r2, [sp, #4]
100118d2:	220a      	movs	r2, #10
100118d4:	1c04      	adds	r4, r0, #0
100118d6:	481d      	ldr	r0, [pc, #116]	; (1001194c <gattm_att_get_value_req_handler+0x80>)
100118d8:	ab02      	add	r3, sp, #8
100118da:	1dde      	adds	r6, r3, #7
100118dc:	7002      	strb	r2, [r0, #0]
100118de:	2300      	movs	r3, #0
100118e0:	220b      	movs	r2, #11
100118e2:	4d1b      	ldr	r5, [pc, #108]	; (10011950 <gattm_att_get_value_req_handler+0x84>)
100118e4:	1c0f      	adds	r7, r1, #0
100118e6:	8829      	ldrh	r1, [r5, #0]
100118e8:	882d      	ldrh	r5, [r5, #0]
100118ea:	7101      	strb	r1, [r0, #4]
100118ec:	0a2d      	lsrs	r5, r5, #8
100118ee:	7145      	strb	r5, [r0, #5]
100118f0:	0a25      	lsrs	r5, r4, #8
100118f2:	7245      	strb	r5, [r0, #9]
100118f4:	4917      	ldr	r1, [pc, #92]	; (10011954 <gattm_att_get_value_req_handler+0x88>)
100118f6:	4d18      	ldr	r5, [pc, #96]	; (10011958 <gattm_att_get_value_req_handler+0x8c>)
100118f8:	7033      	strb	r3, [r6, #0]
100118fa:	7042      	strb	r2, [r0, #1]
100118fc:	7082      	strb	r2, [r0, #2]
100118fe:	70c3      	strb	r3, [r0, #3]
10011900:	8029      	strh	r1, [r5, #0]
10011902:	80aa      	strh	r2, [r5, #4]
10011904:	71c3      	strb	r3, [r0, #7]
10011906:	3a09      	subs	r2, #9
10011908:	210a      	movs	r1, #10
1001190a:	4b14      	ldr	r3, [pc, #80]	; (1001195c <gattm_att_get_value_req_handler+0x90>)
1001190c:	7182      	strb	r2, [r0, #6]
1001190e:	7204      	strb	r4, [r0, #8]
10011910:	4798      	blx	r3
10011912:	1c30      	adds	r0, r6, #0
10011914:	4b12      	ldr	r3, [pc, #72]	; (10011960 <gattm_att_get_value_req_handler+0x94>)
10011916:	4798      	blx	r3
10011918:	7833      	ldrb	r3, [r6, #0]
1001191a:	20e2      	movs	r0, #226	; 0xe2
1001191c:	2b00      	cmp	r3, #0
1001191e:	d112      	bne.n	10011946 <gattm_att_get_value_req_handler+0x7a>
10011920:	68a9      	ldr	r1, [r5, #8]
10011922:	9801      	ldr	r0, [sp, #4]
10011924:	784d      	ldrb	r5, [r1, #1]
10011926:	780b      	ldrb	r3, [r1, #0]
10011928:	78ca      	ldrb	r2, [r1, #3]
1001192a:	022d      	lsls	r5, r5, #8
1001192c:	431d      	orrs	r5, r3
1001192e:	788b      	ldrb	r3, [r1, #2]
10011930:	0212      	lsls	r2, r2, #8
10011932:	431a      	orrs	r2, r3
10011934:	803a      	strh	r2, [r7, #0]
10011936:	790e      	ldrb	r6, [r1, #4]
10011938:	4b0a      	ldr	r3, [pc, #40]	; (10011964 <gattm_att_get_value_req_handler+0x98>)
1001193a:	3105      	adds	r1, #5
1001193c:	4798      	blx	r3
1001193e:	20e2      	movs	r0, #226	; 0xe2
10011940:	42ac      	cmp	r4, r5
10011942:	d100      	bne.n	10011946 <gattm_att_get_value_req_handler+0x7a>
10011944:	1c30      	adds	r0, r6, #0
10011946:	b005      	add	sp, #20
10011948:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001194a:	46c0      	nop			; (mov r8, r8)
1001194c:	1001b458 	.word	0x1001b458
10011950:	1001b0e8 	.word	0x1001b0e8
10011954:	00000b0b 	.word	0x00000b0b
10011958:	1001b0dc 	.word	0x1001b0dc
1001195c:	10010019 	.word	0x10010019
10011960:	1001007d 	.word	0x1001007d
10011964:	100158f7 	.word	0x100158f7

10011968 <htpt_enable_rsp_handler>:
10011968:	780b      	ldrb	r3, [r1, #0]
1001196a:	7013      	strb	r3, [r2, #0]
1001196c:	784b      	ldrb	r3, [r1, #1]
1001196e:	7053      	strb	r3, [r2, #1]
10011970:	4770      	bx	lr

10011972 <htpt_temp_send_rsp_handler>:
10011972:	780b      	ldrb	r3, [r1, #0]
10011974:	7013      	strb	r3, [r2, #0]
10011976:	4770      	bx	lr

10011978 <htpt_meas_intv_upd_rsp_handler>:
10011978:	780b      	ldrb	r3, [r1, #0]
1001197a:	7013      	strb	r3, [r2, #0]
1001197c:	4770      	bx	lr

1001197e <htpt_meas_intv_chg_req_ind_handler>:
1001197e:	78cb      	ldrb	r3, [r1, #3]
10011980:	7889      	ldrb	r1, [r1, #2]
10011982:	021b      	lsls	r3, r3, #8
10011984:	430b      	orrs	r3, r1
10011986:	8013      	strh	r3, [r2, #0]
10011988:	4770      	bx	lr

1001198a <htpt_cfg_indntf_ind_handler>:
1001198a:	780b      	ldrb	r3, [r1, #0]
1001198c:	7013      	strb	r3, [r2, #0]
1001198e:	784b      	ldrb	r3, [r1, #1]
10011990:	7053      	strb	r3, [r2, #1]
10011992:	4770      	bx	lr

10011994 <pow>:
10011994:	b5f0      	push	{r4, r5, r6, r7, lr}
10011996:	465f      	mov	r7, fp
10011998:	464d      	mov	r5, r9
1001199a:	4656      	mov	r6, sl
1001199c:	4644      	mov	r4, r8
1001199e:	b4f0      	push	{r4, r5, r6, r7}
100119a0:	b091      	sub	sp, #68	; 0x44
100119a2:	001f      	movs	r7, r3
100119a4:	0004      	movs	r4, r0
100119a6:	000d      	movs	r5, r1
100119a8:	0016      	movs	r6, r2
100119aa:	f000 f9af 	bl	10011d0c <__ieee754_pow>
100119ae:	4bcf      	ldr	r3, [pc, #828]	; (10011cec <pow+0x358>)
100119b0:	9002      	str	r0, [sp, #8]
100119b2:	9103      	str	r1, [sp, #12]
100119b4:	469b      	mov	fp, r3
100119b6:	781b      	ldrb	r3, [r3, #0]
100119b8:	b25b      	sxtb	r3, r3
100119ba:	4699      	mov	r9, r3
100119bc:	3301      	adds	r3, #1
100119be:	d04f      	beq.n	10011a60 <pow+0xcc>
100119c0:	0032      	movs	r2, r6
100119c2:	003b      	movs	r3, r7
100119c4:	0030      	movs	r0, r6
100119c6:	0039      	movs	r1, r7
100119c8:	f003 fd82 	bl	100154d0 <__aeabi_dcmpun>
100119cc:	9000      	str	r0, [sp, #0]
100119ce:	2800      	cmp	r0, #0
100119d0:	d146      	bne.n	10011a60 <pow+0xcc>
100119d2:	0022      	movs	r2, r4
100119d4:	002b      	movs	r3, r5
100119d6:	0020      	movs	r0, r4
100119d8:	0029      	movs	r1, r5
100119da:	f003 fd79 	bl	100154d0 <__aeabi_dcmpun>
100119de:	2200      	movs	r2, #0
100119e0:	4682      	mov	sl, r0
100119e2:	2800      	cmp	r0, #0
100119e4:	d134      	bne.n	10011a50 <pow+0xbc>
100119e6:	2300      	movs	r3, #0
100119e8:	0020      	movs	r0, r4
100119ea:	0029      	movs	r1, r5
100119ec:	f001 fa7c 	bl	10012ee8 <__aeabi_dcmpeq>
100119f0:	2800      	cmp	r0, #0
100119f2:	d03a      	beq.n	10011a6a <pow+0xd6>
100119f4:	2200      	movs	r2, #0
100119f6:	2300      	movs	r3, #0
100119f8:	0030      	movs	r0, r6
100119fa:	0039      	movs	r1, r7
100119fc:	f001 fa74 	bl	10012ee8 <__aeabi_dcmpeq>
10011a00:	9005      	str	r0, [sp, #20]
10011a02:	2800      	cmp	r0, #0
10011a04:	d100      	bne.n	10011a08 <pow+0x74>
10011a06:	e074      	b.n	10011af2 <pow+0x15e>
10011a08:	ab06      	add	r3, sp, #24
10011a0a:	4698      	mov	r8, r3
10011a0c:	2301      	movs	r3, #1
10011a0e:	4642      	mov	r2, r8
10011a10:	9306      	str	r3, [sp, #24]
10011a12:	4bb7      	ldr	r3, [pc, #732]	; (10011cf0 <pow+0x35c>)
10011a14:	6053      	str	r3, [r2, #4]
10011a16:	4643      	mov	r3, r8
10011a18:	4652      	mov	r2, sl
10011a1a:	609c      	str	r4, [r3, #8]
10011a1c:	60dd      	str	r5, [r3, #12]
10011a1e:	621a      	str	r2, [r3, #32]
10011a20:	611e      	str	r6, [r3, #16]
10011a22:	615f      	str	r7, [r3, #20]
10011a24:	4642      	mov	r2, r8
10011a26:	2300      	movs	r3, #0
10011a28:	2400      	movs	r4, #0
10011a2a:	6193      	str	r3, [r2, #24]
10011a2c:	61d4      	str	r4, [r2, #28]
10011a2e:	464b      	mov	r3, r9
10011a30:	2b00      	cmp	r3, #0
10011a32:	d100      	bne.n	10011a36 <pow+0xa2>
10011a34:	e094      	b.n	10011b60 <pow+0x1cc>
10011a36:	2300      	movs	r3, #0
10011a38:	4cae      	ldr	r4, [pc, #696]	; (10011cf4 <pow+0x360>)
10011a3a:	9300      	str	r3, [sp, #0]
10011a3c:	9401      	str	r4, [sp, #4]
10011a3e:	9800      	ldr	r0, [sp, #0]
10011a40:	9901      	ldr	r1, [sp, #4]
10011a42:	b011      	add	sp, #68	; 0x44
10011a44:	bc3c      	pop	{r2, r3, r4, r5}
10011a46:	4690      	mov	r8, r2
10011a48:	4699      	mov	r9, r3
10011a4a:	46a2      	mov	sl, r4
10011a4c:	46ab      	mov	fp, r5
10011a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a50:	2300      	movs	r3, #0
10011a52:	0030      	movs	r0, r6
10011a54:	0039      	movs	r1, r7
10011a56:	f001 fa47 	bl	10012ee8 <__aeabi_dcmpeq>
10011a5a:	2800      	cmp	r0, #0
10011a5c:	d000      	beq.n	10011a60 <pow+0xcc>
10011a5e:	e0eb      	b.n	10011c38 <pow+0x2a4>
10011a60:	9b02      	ldr	r3, [sp, #8]
10011a62:	9c03      	ldr	r4, [sp, #12]
10011a64:	9300      	str	r3, [sp, #0]
10011a66:	9401      	str	r4, [sp, #4]
10011a68:	e7e9      	b.n	10011a3e <pow+0xaa>
10011a6a:	9802      	ldr	r0, [sp, #8]
10011a6c:	9903      	ldr	r1, [sp, #12]
10011a6e:	f000 ff7d 	bl	1001296c <finite>
10011a72:	4681      	mov	r9, r0
10011a74:	2800      	cmp	r0, #0
10011a76:	d100      	bne.n	10011a7a <pow+0xe6>
10011a78:	e086      	b.n	10011b88 <pow+0x1f4>
10011a7a:	9802      	ldr	r0, [sp, #8]
10011a7c:	9903      	ldr	r1, [sp, #12]
10011a7e:	2200      	movs	r2, #0
10011a80:	2300      	movs	r3, #0
10011a82:	f001 fa31 	bl	10012ee8 <__aeabi_dcmpeq>
10011a86:	2800      	cmp	r0, #0
10011a88:	d0ea      	beq.n	10011a60 <pow+0xcc>
10011a8a:	0020      	movs	r0, r4
10011a8c:	0029      	movs	r1, r5
10011a8e:	f000 ff6d 	bl	1001296c <finite>
10011a92:	9a02      	ldr	r2, [sp, #8]
10011a94:	9b03      	ldr	r3, [sp, #12]
10011a96:	9200      	str	r2, [sp, #0]
10011a98:	9301      	str	r3, [sp, #4]
10011a9a:	2800      	cmp	r0, #0
10011a9c:	d0cf      	beq.n	10011a3e <pow+0xaa>
10011a9e:	0030      	movs	r0, r6
10011aa0:	0039      	movs	r1, r7
10011aa2:	f000 ff63 	bl	1001296c <finite>
10011aa6:	9a02      	ldr	r2, [sp, #8]
10011aa8:	9b03      	ldr	r3, [sp, #12]
10011aaa:	9200      	str	r2, [sp, #0]
10011aac:	9301      	str	r3, [sp, #4]
10011aae:	2800      	cmp	r0, #0
10011ab0:	d0c5      	beq.n	10011a3e <pow+0xaa>
10011ab2:	ab06      	add	r3, sp, #24
10011ab4:	4698      	mov	r8, r3
10011ab6:	2304      	movs	r3, #4
10011ab8:	4642      	mov	r2, r8
10011aba:	9306      	str	r3, [sp, #24]
10011abc:	4b8c      	ldr	r3, [pc, #560]	; (10011cf0 <pow+0x35c>)
10011abe:	6094      	str	r4, [r2, #8]
10011ac0:	60d5      	str	r5, [r2, #12]
10011ac2:	6053      	str	r3, [r2, #4]
10011ac4:	2300      	movs	r3, #0
10011ac6:	2400      	movs	r4, #0
10011ac8:	6213      	str	r3, [r2, #32]
10011aca:	2300      	movs	r3, #0
10011acc:	6193      	str	r3, [r2, #24]
10011ace:	61d4      	str	r4, [r2, #28]
10011ad0:	465b      	mov	r3, fp
10011ad2:	781b      	ldrb	r3, [r3, #0]
10011ad4:	6116      	str	r6, [r2, #16]
10011ad6:	6157      	str	r7, [r2, #20]
10011ad8:	b25b      	sxtb	r3, r3
10011ada:	2b02      	cmp	r3, #2
10011adc:	d004      	beq.n	10011ae8 <pow+0x154>
10011ade:	4640      	mov	r0, r8
10011ae0:	f000 ff4e 	bl	10012980 <matherr>
10011ae4:	2800      	cmp	r0, #0
10011ae6:	d140      	bne.n	10011b6a <pow+0x1d6>
10011ae8:	f003 fec0 	bl	1001586c <__errno>
10011aec:	2322      	movs	r3, #34	; 0x22
10011aee:	6003      	str	r3, [r0, #0]
10011af0:	e03b      	b.n	10011b6a <pow+0x1d6>
10011af2:	0030      	movs	r0, r6
10011af4:	0039      	movs	r1, r7
10011af6:	f000 ff39 	bl	1001296c <finite>
10011afa:	9a02      	ldr	r2, [sp, #8]
10011afc:	9b03      	ldr	r3, [sp, #12]
10011afe:	9200      	str	r2, [sp, #0]
10011b00:	9301      	str	r3, [sp, #4]
10011b02:	2800      	cmp	r0, #0
10011b04:	d09b      	beq.n	10011a3e <pow+0xaa>
10011b06:	2200      	movs	r2, #0
10011b08:	2300      	movs	r3, #0
10011b0a:	0030      	movs	r0, r6
10011b0c:	0039      	movs	r1, r7
10011b0e:	f001 f9f1 	bl	10012ef4 <__aeabi_dcmplt>
10011b12:	2800      	cmp	r0, #0
10011b14:	d100      	bne.n	10011b18 <pow+0x184>
10011b16:	e792      	b.n	10011a3e <pow+0xaa>
10011b18:	ab06      	add	r3, sp, #24
10011b1a:	4698      	mov	r8, r3
10011b1c:	2301      	movs	r3, #1
10011b1e:	4642      	mov	r2, r8
10011b20:	9306      	str	r3, [sp, #24]
10011b22:	4b73      	ldr	r3, [pc, #460]	; (10011cf0 <pow+0x35c>)
10011b24:	6053      	str	r3, [r2, #4]
10011b26:	4643      	mov	r3, r8
10011b28:	9a05      	ldr	r2, [sp, #20]
10011b2a:	609c      	str	r4, [r3, #8]
10011b2c:	60dd      	str	r5, [r3, #12]
10011b2e:	621a      	str	r2, [r3, #32]
10011b30:	611e      	str	r6, [r3, #16]
10011b32:	615f      	str	r7, [r3, #20]
10011b34:	465b      	mov	r3, fp
10011b36:	781b      	ldrb	r3, [r3, #0]
10011b38:	b25b      	sxtb	r3, r3
10011b3a:	2b00      	cmp	r3, #0
10011b3c:	d00b      	beq.n	10011b56 <pow+0x1c2>
10011b3e:	2000      	movs	r0, #0
10011b40:	4642      	mov	r2, r8
10011b42:	496d      	ldr	r1, [pc, #436]	; (10011cf8 <pow+0x364>)
10011b44:	6190      	str	r0, [r2, #24]
10011b46:	61d1      	str	r1, [r2, #28]
10011b48:	2b02      	cmp	r3, #2
10011b4a:	d109      	bne.n	10011b60 <pow+0x1cc>
10011b4c:	f003 fe8e 	bl	1001586c <__errno>
10011b50:	2321      	movs	r3, #33	; 0x21
10011b52:	6003      	str	r3, [r0, #0]
10011b54:	e009      	b.n	10011b6a <pow+0x1d6>
10011b56:	4642      	mov	r2, r8
10011b58:	2300      	movs	r3, #0
10011b5a:	2400      	movs	r4, #0
10011b5c:	6193      	str	r3, [r2, #24]
10011b5e:	61d4      	str	r4, [r2, #28]
10011b60:	4640      	mov	r0, r8
10011b62:	f000 ff0d 	bl	10012980 <matherr>
10011b66:	2800      	cmp	r0, #0
10011b68:	d0f0      	beq.n	10011b4c <pow+0x1b8>
10011b6a:	4643      	mov	r3, r8
10011b6c:	6a1b      	ldr	r3, [r3, #32]
10011b6e:	2b00      	cmp	r3, #0
10011b70:	d004      	beq.n	10011b7c <pow+0x1e8>
10011b72:	f003 fe7b 	bl	1001586c <__errno>
10011b76:	4643      	mov	r3, r8
10011b78:	6a1b      	ldr	r3, [r3, #32]
10011b7a:	6003      	str	r3, [r0, #0]
10011b7c:	4643      	mov	r3, r8
10011b7e:	69dc      	ldr	r4, [r3, #28]
10011b80:	699b      	ldr	r3, [r3, #24]
10011b82:	9300      	str	r3, [sp, #0]
10011b84:	9401      	str	r4, [sp, #4]
10011b86:	e75a      	b.n	10011a3e <pow+0xaa>
10011b88:	0020      	movs	r0, r4
10011b8a:	0029      	movs	r1, r5
10011b8c:	f000 feee 	bl	1001296c <finite>
10011b90:	2800      	cmp	r0, #0
10011b92:	d100      	bne.n	10011b96 <pow+0x202>
10011b94:	e771      	b.n	10011a7a <pow+0xe6>
10011b96:	0030      	movs	r0, r6
10011b98:	0039      	movs	r1, r7
10011b9a:	f000 fee7 	bl	1001296c <finite>
10011b9e:	2800      	cmp	r0, #0
10011ba0:	d100      	bne.n	10011ba4 <pow+0x210>
10011ba2:	e76a      	b.n	10011a7a <pow+0xe6>
10011ba4:	9802      	ldr	r0, [sp, #8]
10011ba6:	9903      	ldr	r1, [sp, #12]
10011ba8:	000b      	movs	r3, r1
10011baa:	0002      	movs	r2, r0
10011bac:	f003 fc90 	bl	100154d0 <__aeabi_dcmpun>
10011bb0:	ab06      	add	r3, sp, #24
10011bb2:	4698      	mov	r8, r3
10011bb4:	2800      	cmp	r0, #0
10011bb6:	d17a      	bne.n	10011cae <pow+0x31a>
10011bb8:	2303      	movs	r3, #3
10011bba:	4642      	mov	r2, r8
10011bbc:	9306      	str	r3, [sp, #24]
10011bbe:	4b4c      	ldr	r3, [pc, #304]	; (10011cf0 <pow+0x35c>)
10011bc0:	6210      	str	r0, [r2, #32]
10011bc2:	6053      	str	r3, [r2, #4]
10011bc4:	465b      	mov	r3, fp
10011bc6:	781b      	ldrb	r3, [r3, #0]
10011bc8:	6094      	str	r4, [r2, #8]
10011bca:	60d5      	str	r5, [r2, #12]
10011bcc:	b25b      	sxtb	r3, r3
10011bce:	6116      	str	r6, [r2, #16]
10011bd0:	6157      	str	r7, [r2, #20]
10011bd2:	4699      	mov	r9, r3
10011bd4:	2b00      	cmp	r3, #0
10011bd6:	d148      	bne.n	10011c6a <pow+0x2d6>
10011bd8:	22e0      	movs	r2, #224	; 0xe0
10011bda:	4641      	mov	r1, r8
10011bdc:	4b47      	ldr	r3, [pc, #284]	; (10011cfc <pow+0x368>)
10011bde:	0612      	lsls	r2, r2, #24
10011be0:	618a      	str	r2, [r1, #24]
10011be2:	61cb      	str	r3, [r1, #28]
10011be4:	0020      	movs	r0, r4
10011be6:	2200      	movs	r2, #0
10011be8:	2300      	movs	r3, #0
10011bea:	0029      	movs	r1, r5
10011bec:	f001 f982 	bl	10012ef4 <__aeabi_dcmplt>
10011bf0:	2800      	cmp	r0, #0
10011bf2:	d100      	bne.n	10011bf6 <pow+0x262>
10011bf4:	e773      	b.n	10011ade <pow+0x14a>
10011bf6:	2200      	movs	r2, #0
10011bf8:	4b41      	ldr	r3, [pc, #260]	; (10011d00 <pow+0x36c>)
10011bfa:	0030      	movs	r0, r6
10011bfc:	0039      	movs	r1, r7
10011bfe:	f002 fe99 	bl	10014934 <__aeabi_dmul>
10011c02:	0004      	movs	r4, r0
10011c04:	000d      	movs	r5, r1
10011c06:	f000 fec3 	bl	10012990 <rint>
10011c0a:	0002      	movs	r2, r0
10011c0c:	000b      	movs	r3, r1
10011c0e:	0020      	movs	r0, r4
10011c10:	0029      	movs	r1, r5
10011c12:	f001 f969 	bl	10012ee8 <__aeabi_dcmpeq>
10011c16:	2800      	cmp	r0, #0
10011c18:	d105      	bne.n	10011c26 <pow+0x292>
10011c1a:	22e0      	movs	r2, #224	; 0xe0
10011c1c:	4b39      	ldr	r3, [pc, #228]	; (10011d04 <pow+0x370>)
10011c1e:	0612      	lsls	r2, r2, #24
10011c20:	4641      	mov	r1, r8
10011c22:	618a      	str	r2, [r1, #24]
10011c24:	61cb      	str	r3, [r1, #28]
10011c26:	465b      	mov	r3, fp
10011c28:	781b      	ldrb	r3, [r3, #0]
10011c2a:	b25b      	sxtb	r3, r3
10011c2c:	4699      	mov	r9, r3
10011c2e:	464b      	mov	r3, r9
10011c30:	2b02      	cmp	r3, #2
10011c32:	d000      	beq.n	10011c36 <pow+0x2a2>
10011c34:	e753      	b.n	10011ade <pow+0x14a>
10011c36:	e757      	b.n	10011ae8 <pow+0x154>
10011c38:	ab06      	add	r3, sp, #24
10011c3a:	4698      	mov	r8, r3
10011c3c:	2301      	movs	r3, #1
10011c3e:	4642      	mov	r2, r8
10011c40:	9306      	str	r3, [sp, #24]
10011c42:	4b2b      	ldr	r3, [pc, #172]	; (10011cf0 <pow+0x35c>)
10011c44:	6053      	str	r3, [r2, #4]
10011c46:	4643      	mov	r3, r8
10011c48:	609c      	str	r4, [r3, #8]
10011c4a:	60dd      	str	r5, [r3, #12]
10011c4c:	2400      	movs	r4, #0
10011c4e:	9a00      	ldr	r2, [sp, #0]
10011c50:	4d28      	ldr	r5, [pc, #160]	; (10011cf4 <pow+0x360>)
10011c52:	621a      	str	r2, [r3, #32]
10011c54:	611e      	str	r6, [r3, #16]
10011c56:	615f      	str	r7, [r3, #20]
10011c58:	619c      	str	r4, [r3, #24]
10011c5a:	61dd      	str	r5, [r3, #28]
10011c5c:	464b      	mov	r3, r9
10011c5e:	9400      	str	r4, [sp, #0]
10011c60:	9501      	str	r5, [sp, #4]
10011c62:	2b02      	cmp	r3, #2
10011c64:	d000      	beq.n	10011c68 <pow+0x2d4>
10011c66:	e77b      	b.n	10011b60 <pow+0x1cc>
10011c68:	e6e9      	b.n	10011a3e <pow+0xaa>
10011c6a:	2200      	movs	r2, #0
10011c6c:	4641      	mov	r1, r8
10011c6e:	4b26      	ldr	r3, [pc, #152]	; (10011d08 <pow+0x374>)
10011c70:	0020      	movs	r0, r4
10011c72:	618a      	str	r2, [r1, #24]
10011c74:	61cb      	str	r3, [r1, #28]
10011c76:	2200      	movs	r2, #0
10011c78:	2300      	movs	r3, #0
10011c7a:	0029      	movs	r1, r5
10011c7c:	f001 f93a 	bl	10012ef4 <__aeabi_dcmplt>
10011c80:	2800      	cmp	r0, #0
10011c82:	d0d4      	beq.n	10011c2e <pow+0x29a>
10011c84:	2200      	movs	r2, #0
10011c86:	4b1e      	ldr	r3, [pc, #120]	; (10011d00 <pow+0x36c>)
10011c88:	0030      	movs	r0, r6
10011c8a:	0039      	movs	r1, r7
10011c8c:	f002 fe52 	bl	10014934 <__aeabi_dmul>
10011c90:	0004      	movs	r4, r0
10011c92:	000d      	movs	r5, r1
10011c94:	f000 fe7c 	bl	10012990 <rint>
10011c98:	0002      	movs	r2, r0
10011c9a:	000b      	movs	r3, r1
10011c9c:	0020      	movs	r0, r4
10011c9e:	0029      	movs	r1, r5
10011ca0:	f001 f922 	bl	10012ee8 <__aeabi_dcmpeq>
10011ca4:	2800      	cmp	r0, #0
10011ca6:	d1be      	bne.n	10011c26 <pow+0x292>
10011ca8:	2200      	movs	r2, #0
10011caa:	4b13      	ldr	r3, [pc, #76]	; (10011cf8 <pow+0x364>)
10011cac:	e7b8      	b.n	10011c20 <pow+0x28c>
10011cae:	2301      	movs	r3, #1
10011cb0:	4642      	mov	r2, r8
10011cb2:	9306      	str	r3, [sp, #24]
10011cb4:	4b0e      	ldr	r3, [pc, #56]	; (10011cf0 <pow+0x35c>)
10011cb6:	6053      	str	r3, [r2, #4]
10011cb8:	4643      	mov	r3, r8
10011cba:	464a      	mov	r2, r9
10011cbc:	609c      	str	r4, [r3, #8]
10011cbe:	60dd      	str	r5, [r3, #12]
10011cc0:	621a      	str	r2, [r3, #32]
10011cc2:	611e      	str	r6, [r3, #16]
10011cc4:	615f      	str	r7, [r3, #20]
10011cc6:	2400      	movs	r4, #0
10011cc8:	465b      	mov	r3, fp
10011cca:	571c      	ldrsb	r4, [r3, r4]
10011ccc:	2c00      	cmp	r4, #0
10011cce:	d100      	bne.n	10011cd2 <pow+0x33e>
10011cd0:	e741      	b.n	10011b56 <pow+0x1c2>
10011cd2:	2300      	movs	r3, #0
10011cd4:	2200      	movs	r2, #0
10011cd6:	0019      	movs	r1, r3
10011cd8:	0010      	movs	r0, r2
10011cda:	f002 fa07 	bl	100140ec <__aeabi_ddiv>
10011cde:	4643      	mov	r3, r8
10011ce0:	6198      	str	r0, [r3, #24]
10011ce2:	61d9      	str	r1, [r3, #28]
10011ce4:	2c02      	cmp	r4, #2
10011ce6:	d100      	bne.n	10011cea <pow+0x356>
10011ce8:	e730      	b.n	10011b4c <pow+0x1b8>
10011cea:	e739      	b.n	10011b60 <pow+0x1cc>
10011cec:	10018704 	.word	0x10018704
10011cf0:	100184e8 	.word	0x100184e8
10011cf4:	3ff00000 	.word	0x3ff00000
10011cf8:	fff00000 	.word	0xfff00000
10011cfc:	47efffff 	.word	0x47efffff
10011d00:	3fe00000 	.word	0x3fe00000
10011d04:	c7efffff 	.word	0xc7efffff
10011d08:	7ff00000 	.word	0x7ff00000

10011d0c <__ieee754_pow>:
10011d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d0e:	4656      	mov	r6, sl
10011d10:	464d      	mov	r5, r9
10011d12:	4644      	mov	r4, r8
10011d14:	465f      	mov	r7, fp
10011d16:	b4f0      	push	{r4, r5, r6, r7}
10011d18:	001c      	movs	r4, r3
10011d1a:	0013      	movs	r3, r2
10011d1c:	0067      	lsls	r7, r4, #1
10011d1e:	b091      	sub	sp, #68	; 0x44
10011d20:	087f      	lsrs	r7, r7, #1
10011d22:	9300      	str	r3, [sp, #0]
10011d24:	9401      	str	r4, [sp, #4]
10011d26:	0006      	movs	r6, r0
10011d28:	000d      	movs	r5, r1
10011d2a:	4680      	mov	r8, r0
10011d2c:	4689      	mov	r9, r1
10011d2e:	46a2      	mov	sl, r4
10011d30:	433b      	orrs	r3, r7
10011d32:	d032      	beq.n	10011d9a <__ieee754_pow+0x8e>
10011d34:	4b6e      	ldr	r3, [pc, #440]	; (10011ef0 <__ieee754_pow+0x1e4>)
10011d36:	006c      	lsls	r4, r5, #1
10011d38:	0864      	lsrs	r4, r4, #1
10011d3a:	429c      	cmp	r4, r3
10011d3c:	dc29      	bgt.n	10011d92 <__ieee754_pow+0x86>
10011d3e:	d026      	beq.n	10011d8e <__ieee754_pow+0x82>
10011d40:	429f      	cmp	r7, r3
10011d42:	dc26      	bgt.n	10011d92 <__ieee754_pow+0x86>
10011d44:	4b6a      	ldr	r3, [pc, #424]	; (10011ef0 <__ieee754_pow+0x1e4>)
10011d46:	429f      	cmp	r7, r3
10011d48:	d100      	bne.n	10011d4c <__ieee754_pow+0x40>
10011d4a:	e089      	b.n	10011e60 <__ieee754_pow+0x154>
10011d4c:	2300      	movs	r3, #0
10011d4e:	469b      	mov	fp, r3
10011d50:	464b      	mov	r3, r9
10011d52:	2b00      	cmp	r3, #0
10011d54:	da00      	bge.n	10011d58 <__ieee754_pow+0x4c>
10011d56:	e087      	b.n	10011e68 <__ieee754_pow+0x15c>
10011d58:	2a00      	cmp	r2, #0
10011d5a:	d12f      	bne.n	10011dbc <__ieee754_pow+0xb0>
10011d5c:	4b64      	ldr	r3, [pc, #400]	; (10011ef0 <__ieee754_pow+0x1e4>)
10011d5e:	429f      	cmp	r7, r3
10011d60:	d100      	bne.n	10011d64 <__ieee754_pow+0x58>
10011d62:	e09f      	b.n	10011ea4 <__ieee754_pow+0x198>
10011d64:	4b63      	ldr	r3, [pc, #396]	; (10011ef4 <__ieee754_pow+0x1e8>)
10011d66:	429f      	cmp	r7, r3
10011d68:	d05d      	beq.n	10011e26 <__ieee754_pow+0x11a>
10011d6a:	2380      	movs	r3, #128	; 0x80
10011d6c:	05db      	lsls	r3, r3, #23
10011d6e:	459a      	cmp	sl, r3
10011d70:	d101      	bne.n	10011d76 <__ieee754_pow+0x6a>
10011d72:	f000 fbc1 	bl	100124f8 <__ieee754_pow+0x7ec>
10011d76:	4b60      	ldr	r3, [pc, #384]	; (10011ef8 <__ieee754_pow+0x1ec>)
10011d78:	459a      	cmp	sl, r3
10011d7a:	d11f      	bne.n	10011dbc <__ieee754_pow+0xb0>
10011d7c:	464b      	mov	r3, r9
10011d7e:	2b00      	cmp	r3, #0
10011d80:	db1c      	blt.n	10011dbc <__ieee754_pow+0xb0>
10011d82:	0030      	movs	r0, r6
10011d84:	0029      	movs	r1, r5
10011d86:	f000 fcf7 	bl	10012778 <__ieee754_sqrt>
10011d8a:	0006      	movs	r6, r0
10011d8c:	e007      	b.n	10011d9e <__ieee754_pow+0x92>
10011d8e:	2800      	cmp	r0, #0
10011d90:	d00d      	beq.n	10011dae <__ieee754_pow+0xa2>
10011d92:	4b5a      	ldr	r3, [pc, #360]	; (10011efc <__ieee754_pow+0x1f0>)
10011d94:	18e0      	adds	r0, r4, r3
10011d96:	4330      	orrs	r0, r6
10011d98:	d10b      	bne.n	10011db2 <__ieee754_pow+0xa6>
10011d9a:	2600      	movs	r6, #0
10011d9c:	4955      	ldr	r1, [pc, #340]	; (10011ef4 <__ieee754_pow+0x1e8>)
10011d9e:	0030      	movs	r0, r6
10011da0:	b011      	add	sp, #68	; 0x44
10011da2:	bc3c      	pop	{r2, r3, r4, r5}
10011da4:	4690      	mov	r8, r2
10011da6:	4699      	mov	r9, r3
10011da8:	46a2      	mov	sl, r4
10011daa:	46ab      	mov	fp, r5
10011dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011dae:	42a7      	cmp	r7, r4
10011db0:	ddc8      	ble.n	10011d44 <__ieee754_pow+0x38>
10011db2:	4853      	ldr	r0, [pc, #332]	; (10011f00 <__ieee754_pow+0x1f4>)
10011db4:	f000 fde6 	bl	10012984 <nan>
10011db8:	0006      	movs	r6, r0
10011dba:	e7f0      	b.n	10011d9e <__ieee754_pow+0x92>
10011dbc:	0030      	movs	r0, r6
10011dbe:	0029      	movs	r1, r5
10011dc0:	f000 fdd0 	bl	10012964 <fabs>
10011dc4:	4643      	mov	r3, r8
10011dc6:	2b00      	cmp	r3, #0
10011dc8:	d01d      	beq.n	10011e06 <__ieee754_pow+0xfa>
10011dca:	0feb      	lsrs	r3, r5, #31
10011dcc:	3b01      	subs	r3, #1
10011dce:	4698      	mov	r8, r3
10011dd0:	465b      	mov	r3, fp
10011dd2:	4642      	mov	r2, r8
10011dd4:	4313      	orrs	r3, r2
10011dd6:	d079      	beq.n	10011ecc <__ieee754_pow+0x1c0>
10011dd8:	4b4a      	ldr	r3, [pc, #296]	; (10011f04 <__ieee754_pow+0x1f8>)
10011dda:	429f      	cmp	r7, r3
10011ddc:	dc00      	bgt.n	10011de0 <__ieee754_pow+0xd4>
10011dde:	e09f      	b.n	10011f20 <__ieee754_pow+0x214>
10011de0:	4b49      	ldr	r3, [pc, #292]	; (10011f08 <__ieee754_pow+0x1fc>)
10011de2:	429f      	cmp	r7, r3
10011de4:	dc01      	bgt.n	10011dea <__ieee754_pow+0xde>
10011de6:	f000 fbce 	bl	10012586 <__ieee754_pow+0x87a>
10011dea:	4b48      	ldr	r3, [pc, #288]	; (10011f0c <__ieee754_pow+0x200>)
10011dec:	429c      	cmp	r4, r3
10011dee:	dd79      	ble.n	10011ee4 <__ieee754_pow+0x1d8>
10011df0:	4653      	mov	r3, sl
10011df2:	2b00      	cmp	r3, #0
10011df4:	dd79      	ble.n	10011eea <__ieee754_pow+0x1de>
10011df6:	4a46      	ldr	r2, [pc, #280]	; (10011f10 <__ieee754_pow+0x204>)
10011df8:	4b46      	ldr	r3, [pc, #280]	; (10011f14 <__ieee754_pow+0x208>)
10011dfa:	0010      	movs	r0, r2
10011dfc:	0019      	movs	r1, r3
10011dfe:	f002 fd99 	bl	10014934 <__aeabi_dmul>
10011e02:	0006      	movs	r6, r0
10011e04:	e7cb      	b.n	10011d9e <__ieee754_pow+0x92>
10011e06:	2c00      	cmp	r4, #0
10011e08:	d004      	beq.n	10011e14 <__ieee754_pow+0x108>
10011e0a:	4a3a      	ldr	r2, [pc, #232]	; (10011ef4 <__ieee754_pow+0x1e8>)
10011e0c:	00ab      	lsls	r3, r5, #2
10011e0e:	089b      	lsrs	r3, r3, #2
10011e10:	4293      	cmp	r3, r2
10011e12:	d1da      	bne.n	10011dca <__ieee754_pow+0xbe>
10011e14:	4653      	mov	r3, sl
10011e16:	2b00      	cmp	r3, #0
10011e18:	da00      	bge.n	10011e1c <__ieee754_pow+0x110>
10011e1a:	e3ad      	b.n	10012578 <__ieee754_pow+0x86c>
10011e1c:	464b      	mov	r3, r9
10011e1e:	2b00      	cmp	r3, #0
10011e20:	db0d      	blt.n	10011e3e <__ieee754_pow+0x132>
10011e22:	0006      	movs	r6, r0
10011e24:	e7bb      	b.n	10011d9e <__ieee754_pow+0x92>
10011e26:	4653      	mov	r3, sl
10011e28:	0029      	movs	r1, r5
10011e2a:	2b00      	cmp	r3, #0
10011e2c:	dab7      	bge.n	10011d9e <__ieee754_pow+0x92>
10011e2e:	0032      	movs	r2, r6
10011e30:	002b      	movs	r3, r5
10011e32:	2000      	movs	r0, #0
10011e34:	492f      	ldr	r1, [pc, #188]	; (10011ef4 <__ieee754_pow+0x1e8>)
10011e36:	f002 f959 	bl	100140ec <__aeabi_ddiv>
10011e3a:	0006      	movs	r6, r0
10011e3c:	e7af      	b.n	10011d9e <__ieee754_pow+0x92>
10011e3e:	4b2f      	ldr	r3, [pc, #188]	; (10011efc <__ieee754_pow+0x1f0>)
10011e40:	469c      	mov	ip, r3
10011e42:	465b      	mov	r3, fp
10011e44:	4464      	add	r4, ip
10011e46:	431c      	orrs	r4, r3
10011e48:	d101      	bne.n	10011e4e <__ieee754_pow+0x142>
10011e4a:	f000 fc2b 	bl	100126a4 <__ieee754_pow+0x998>
10011e4e:	465b      	mov	r3, fp
10011e50:	0006      	movs	r6, r0
10011e52:	2b01      	cmp	r3, #1
10011e54:	d1a3      	bne.n	10011d9e <__ieee754_pow+0x92>
10011e56:	2380      	movs	r3, #128	; 0x80
10011e58:	061b      	lsls	r3, r3, #24
10011e5a:	469c      	mov	ip, r3
10011e5c:	4461      	add	r1, ip
10011e5e:	e79e      	b.n	10011d9e <__ieee754_pow+0x92>
10011e60:	2a00      	cmp	r2, #0
10011e62:	d100      	bne.n	10011e66 <__ieee754_pow+0x15a>
10011e64:	e772      	b.n	10011d4c <__ieee754_pow+0x40>
10011e66:	e794      	b.n	10011d92 <__ieee754_pow+0x86>
10011e68:	4b2b      	ldr	r3, [pc, #172]	; (10011f18 <__ieee754_pow+0x20c>)
10011e6a:	429f      	cmp	r7, r3
10011e6c:	dc2b      	bgt.n	10011ec6 <__ieee754_pow+0x1ba>
10011e6e:	4b27      	ldr	r3, [pc, #156]	; (10011f0c <__ieee754_pow+0x200>)
10011e70:	429f      	cmp	r7, r3
10011e72:	dc00      	bgt.n	10011e76 <__ieee754_pow+0x16a>
10011e74:	e770      	b.n	10011d58 <__ieee754_pow+0x4c>
10011e76:	4929      	ldr	r1, [pc, #164]	; (10011f1c <__ieee754_pow+0x210>)
10011e78:	153b      	asrs	r3, r7, #20
10011e7a:	468c      	mov	ip, r1
10011e7c:	4463      	add	r3, ip
10011e7e:	2b14      	cmp	r3, #20
10011e80:	dc01      	bgt.n	10011e86 <__ieee754_pow+0x17a>
10011e82:	f000 fbf2 	bl	1001266a <__ieee754_pow+0x95e>
10011e86:	2134      	movs	r1, #52	; 0x34
10011e88:	1acb      	subs	r3, r1, r3
10011e8a:	9900      	ldr	r1, [sp, #0]
10011e8c:	40d9      	lsrs	r1, r3
10011e8e:	0008      	movs	r0, r1
10011e90:	4098      	lsls	r0, r3
10011e92:	4282      	cmp	r2, r0
10011e94:	d000      	beq.n	10011e98 <__ieee754_pow+0x18c>
10011e96:	e75f      	b.n	10011d58 <__ieee754_pow+0x4c>
10011e98:	2301      	movs	r3, #1
10011e9a:	4019      	ands	r1, r3
10011e9c:	3301      	adds	r3, #1
10011e9e:	1a5b      	subs	r3, r3, r1
10011ea0:	469b      	mov	fp, r3
10011ea2:	e759      	b.n	10011d58 <__ieee754_pow+0x4c>
10011ea4:	4b15      	ldr	r3, [pc, #84]	; (10011efc <__ieee754_pow+0x1f0>)
10011ea6:	18e0      	adds	r0, r4, r3
10011ea8:	4306      	orrs	r6, r0
10011eaa:	d100      	bne.n	10011eae <__ieee754_pow+0x1a2>
10011eac:	e775      	b.n	10011d9a <__ieee754_pow+0x8e>
10011eae:	4b17      	ldr	r3, [pc, #92]	; (10011f0c <__ieee754_pow+0x200>)
10011eb0:	429c      	cmp	r4, r3
10011eb2:	dc00      	bgt.n	10011eb6 <__ieee754_pow+0x1aa>
10011eb4:	e351      	b.n	1001255a <__ieee754_pow+0x84e>
10011eb6:	4653      	mov	r3, sl
10011eb8:	2b00      	cmp	r3, #0
10011eba:	db16      	blt.n	10011eea <__ieee754_pow+0x1de>
10011ebc:	9b00      	ldr	r3, [sp, #0]
10011ebe:	9c01      	ldr	r4, [sp, #4]
10011ec0:	001e      	movs	r6, r3
10011ec2:	0021      	movs	r1, r4
10011ec4:	e76b      	b.n	10011d9e <__ieee754_pow+0x92>
10011ec6:	2302      	movs	r3, #2
10011ec8:	469b      	mov	fp, r3
10011eca:	e745      	b.n	10011d58 <__ieee754_pow+0x4c>
10011ecc:	0032      	movs	r2, r6
10011ece:	002b      	movs	r3, r5
10011ed0:	0030      	movs	r0, r6
10011ed2:	0029      	movs	r1, r5
10011ed4:	f002 ffa8 	bl	10014e28 <__aeabi_dsub>
10011ed8:	0002      	movs	r2, r0
10011eda:	000b      	movs	r3, r1
10011edc:	f002 f906 	bl	100140ec <__aeabi_ddiv>
10011ee0:	0006      	movs	r6, r0
10011ee2:	e75c      	b.n	10011d9e <__ieee754_pow+0x92>
10011ee4:	4653      	mov	r3, sl
10011ee6:	2b00      	cmp	r3, #0
10011ee8:	db85      	blt.n	10011df6 <__ieee754_pow+0xea>
10011eea:	2600      	movs	r6, #0
10011eec:	2100      	movs	r1, #0
10011eee:	e756      	b.n	10011d9e <__ieee754_pow+0x92>
10011ef0:	7ff00000 	.word	0x7ff00000
10011ef4:	3ff00000 	.word	0x3ff00000
10011ef8:	3fe00000 	.word	0x3fe00000
10011efc:	c0100000 	.word	0xc0100000
10011f00:	10017c5c 	.word	0x10017c5c
10011f04:	41e00000 	.word	0x41e00000
10011f08:	43f00000 	.word	0x43f00000
10011f0c:	3fefffff 	.word	0x3fefffff
10011f10:	8800759c 	.word	0x8800759c
10011f14:	7e37e43c 	.word	0x7e37e43c
10011f18:	433fffff 	.word	0x433fffff
10011f1c:	fffffc01 	.word	0xfffffc01
10011f20:	4be8      	ldr	r3, [pc, #928]	; (100122c4 <__ieee754_pow+0x5b8>)
10011f22:	2200      	movs	r2, #0
10011f24:	429c      	cmp	r4, r3
10011f26:	dc06      	bgt.n	10011f36 <__ieee754_pow+0x22a>
10011f28:	2200      	movs	r2, #0
10011f2a:	4be7      	ldr	r3, [pc, #924]	; (100122c8 <__ieee754_pow+0x5bc>)
10011f2c:	f002 fd02 	bl	10014934 <__aeabi_dmul>
10011f30:	2235      	movs	r2, #53	; 0x35
10011f32:	000c      	movs	r4, r1
10011f34:	4252      	negs	r2, r2
10011f36:	4de5      	ldr	r5, [pc, #916]	; (100122cc <__ieee754_pow+0x5c0>)
10011f38:	1523      	asrs	r3, r4, #20
10011f3a:	46ac      	mov	ip, r5
10011f3c:	4463      	add	r3, ip
10011f3e:	4699      	mov	r9, r3
10011f40:	0324      	lsls	r4, r4, #12
10011f42:	4de3      	ldr	r5, [pc, #908]	; (100122d0 <__ieee754_pow+0x5c4>)
10011f44:	4be3      	ldr	r3, [pc, #908]	; (100122d4 <__ieee754_pow+0x5c8>)
10011f46:	0b24      	lsrs	r4, r4, #12
10011f48:	4491      	add	r9, r2
10011f4a:	4325      	orrs	r5, r4
10011f4c:	429c      	cmp	r4, r3
10011f4e:	dd09      	ble.n	10011f64 <__ieee754_pow+0x258>
10011f50:	4be1      	ldr	r3, [pc, #900]	; (100122d8 <__ieee754_pow+0x5cc>)
10011f52:	429c      	cmp	r4, r3
10011f54:	dc00      	bgt.n	10011f58 <__ieee754_pow+0x24c>
10011f56:	e3a9      	b.n	100126ac <__ieee754_pow+0x9a0>
10011f58:	2301      	movs	r3, #1
10011f5a:	469c      	mov	ip, r3
10011f5c:	4bdf      	ldr	r3, [pc, #892]	; (100122dc <__ieee754_pow+0x5d0>)
10011f5e:	44e1      	add	r9, ip
10011f60:	469c      	mov	ip, r3
10011f62:	4465      	add	r5, ip
10011f64:	2300      	movs	r3, #0
10011f66:	2400      	movs	r4, #0
10011f68:	2200      	movs	r2, #0
10011f6a:	9308      	str	r3, [sp, #32]
10011f6c:	9409      	str	r4, [sp, #36]	; 0x24
10011f6e:	930c      	str	r3, [sp, #48]	; 0x30
10011f70:	940d      	str	r4, [sp, #52]	; 0x34
10011f72:	2400      	movs	r4, #0
10011f74:	4bd6      	ldr	r3, [pc, #856]	; (100122d0 <__ieee754_pow+0x5c4>)
10011f76:	9206      	str	r2, [sp, #24]
10011f78:	9307      	str	r3, [sp, #28]
10011f7a:	9a06      	ldr	r2, [sp, #24]
10011f7c:	9b07      	ldr	r3, [sp, #28]
10011f7e:	0029      	movs	r1, r5
10011f80:	900a      	str	r0, [sp, #40]	; 0x28
10011f82:	910b      	str	r1, [sp, #44]	; 0x2c
10011f84:	f002 ff50 	bl	10014e28 <__aeabi_dsub>
10011f88:	9a06      	ldr	r2, [sp, #24]
10011f8a:	9b07      	ldr	r3, [sp, #28]
10011f8c:	0006      	movs	r6, r0
10011f8e:	000f      	movs	r7, r1
10011f90:	980a      	ldr	r0, [sp, #40]	; 0x28
10011f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011f94:	f001 fd7e 	bl	10013a94 <__aeabi_dadd>
10011f98:	0002      	movs	r2, r0
10011f9a:	000b      	movs	r3, r1
10011f9c:	2000      	movs	r0, #0
10011f9e:	49cc      	ldr	r1, [pc, #816]	; (100122d0 <__ieee754_pow+0x5c4>)
10011fa0:	f002 f8a4 	bl	100140ec <__aeabi_ddiv>
10011fa4:	000a      	movs	r2, r1
10011fa6:	0001      	movs	r1, r0
10011fa8:	0013      	movs	r3, r2
10011faa:	910e      	str	r1, [sp, #56]	; 0x38
10011fac:	920f      	str	r2, [sp, #60]	; 0x3c
10011fae:	0002      	movs	r2, r0
10011fb0:	0039      	movs	r1, r7
10011fb2:	0030      	movs	r0, r6
10011fb4:	f002 fcbe 	bl	10014934 <__aeabi_dmul>
10011fb8:	000a      	movs	r2, r1
10011fba:	0001      	movs	r1, r0
10011fbc:	2080      	movs	r0, #128	; 0x80
10011fbe:	9104      	str	r1, [sp, #16]
10011fc0:	9205      	str	r2, [sp, #20]
10011fc2:	0013      	movs	r3, r2
10011fc4:	2200      	movs	r2, #0
10011fc6:	2180      	movs	r1, #128	; 0x80
10011fc8:	0300      	lsls	r0, r0, #12
10011fca:	4684      	mov	ip, r0
10011fcc:	9202      	str	r2, [sp, #8]
10011fce:	9303      	str	r3, [sp, #12]
10011fd0:	2200      	movs	r2, #0
10011fd2:	0589      	lsls	r1, r1, #22
10011fd4:	106d      	asrs	r5, r5, #1
10011fd6:	430d      	orrs	r5, r1
10011fd8:	4465      	add	r5, ip
10011fda:	192b      	adds	r3, r5, r4
10011fdc:	9802      	ldr	r0, [sp, #8]
10011fde:	9903      	ldr	r1, [sp, #12]
10011fe0:	0014      	movs	r4, r2
10011fe2:	001d      	movs	r5, r3
10011fe4:	f002 fca6 	bl	10014934 <__aeabi_dmul>
10011fe8:	0002      	movs	r2, r0
10011fea:	000b      	movs	r3, r1
10011fec:	0030      	movs	r0, r6
10011fee:	0039      	movs	r1, r7
10011ff0:	f002 ff1a 	bl	10014e28 <__aeabi_dsub>
10011ff4:	9a06      	ldr	r2, [sp, #24]
10011ff6:	9b07      	ldr	r3, [sp, #28]
10011ff8:	0006      	movs	r6, r0
10011ffa:	000f      	movs	r7, r1
10011ffc:	0020      	movs	r0, r4
10011ffe:	0029      	movs	r1, r5
10012000:	f002 ff12 	bl	10014e28 <__aeabi_dsub>
10012004:	0002      	movs	r2, r0
10012006:	000b      	movs	r3, r1
10012008:	980a      	ldr	r0, [sp, #40]	; 0x28
1001200a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1001200c:	f002 ff0c 	bl	10014e28 <__aeabi_dsub>
10012010:	9a02      	ldr	r2, [sp, #8]
10012012:	9b03      	ldr	r3, [sp, #12]
10012014:	f002 fc8e 	bl	10014934 <__aeabi_dmul>
10012018:	0002      	movs	r2, r0
1001201a:	000b      	movs	r3, r1
1001201c:	0030      	movs	r0, r6
1001201e:	0039      	movs	r1, r7
10012020:	f002 ff02 	bl	10014e28 <__aeabi_dsub>
10012024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012028:	f002 fc84 	bl	10014934 <__aeabi_dmul>
1001202c:	9d04      	ldr	r5, [sp, #16]
1001202e:	9e05      	ldr	r6, [sp, #20]
10012030:	9006      	str	r0, [sp, #24]
10012032:	9107      	str	r1, [sp, #28]
10012034:	002a      	movs	r2, r5
10012036:	0033      	movs	r3, r6
10012038:	0028      	movs	r0, r5
1001203a:	0031      	movs	r1, r6
1001203c:	f002 fc7a 	bl	10014934 <__aeabi_dmul>
10012040:	0006      	movs	r6, r0
10012042:	000f      	movs	r7, r1
10012044:	4aa6      	ldr	r2, [pc, #664]	; (100122e0 <__ieee754_pow+0x5d4>)
10012046:	4ba7      	ldr	r3, [pc, #668]	; (100122e4 <__ieee754_pow+0x5d8>)
10012048:	f002 fc74 	bl	10014934 <__aeabi_dmul>
1001204c:	4aa6      	ldr	r2, [pc, #664]	; (100122e8 <__ieee754_pow+0x5dc>)
1001204e:	4ba7      	ldr	r3, [pc, #668]	; (100122ec <__ieee754_pow+0x5e0>)
10012050:	f001 fd20 	bl	10013a94 <__aeabi_dadd>
10012054:	0032      	movs	r2, r6
10012056:	003b      	movs	r3, r7
10012058:	f002 fc6c 	bl	10014934 <__aeabi_dmul>
1001205c:	4aa4      	ldr	r2, [pc, #656]	; (100122f0 <__ieee754_pow+0x5e4>)
1001205e:	4ba5      	ldr	r3, [pc, #660]	; (100122f4 <__ieee754_pow+0x5e8>)
10012060:	f001 fd18 	bl	10013a94 <__aeabi_dadd>
10012064:	0032      	movs	r2, r6
10012066:	003b      	movs	r3, r7
10012068:	f002 fc64 	bl	10014934 <__aeabi_dmul>
1001206c:	4aa2      	ldr	r2, [pc, #648]	; (100122f8 <__ieee754_pow+0x5ec>)
1001206e:	4ba3      	ldr	r3, [pc, #652]	; (100122fc <__ieee754_pow+0x5f0>)
10012070:	f001 fd10 	bl	10013a94 <__aeabi_dadd>
10012074:	0032      	movs	r2, r6
10012076:	003b      	movs	r3, r7
10012078:	f002 fc5c 	bl	10014934 <__aeabi_dmul>
1001207c:	4aa0      	ldr	r2, [pc, #640]	; (10012300 <__ieee754_pow+0x5f4>)
1001207e:	4ba1      	ldr	r3, [pc, #644]	; (10012304 <__ieee754_pow+0x5f8>)
10012080:	f001 fd08 	bl	10013a94 <__aeabi_dadd>
10012084:	0032      	movs	r2, r6
10012086:	003b      	movs	r3, r7
10012088:	f002 fc54 	bl	10014934 <__aeabi_dmul>
1001208c:	4a9e      	ldr	r2, [pc, #632]	; (10012308 <__ieee754_pow+0x5fc>)
1001208e:	4b9f      	ldr	r3, [pc, #636]	; (1001230c <__ieee754_pow+0x600>)
10012090:	f001 fd00 	bl	10013a94 <__aeabi_dadd>
10012094:	0032      	movs	r2, r6
10012096:	0004      	movs	r4, r0
10012098:	000d      	movs	r5, r1
1001209a:	003b      	movs	r3, r7
1001209c:	0030      	movs	r0, r6
1001209e:	0039      	movs	r1, r7
100120a0:	f002 fc48 	bl	10014934 <__aeabi_dmul>
100120a4:	0002      	movs	r2, r0
100120a6:	000b      	movs	r3, r1
100120a8:	0020      	movs	r0, r4
100120aa:	0029      	movs	r1, r5
100120ac:	f002 fc42 	bl	10014934 <__aeabi_dmul>
100120b0:	9e02      	ldr	r6, [sp, #8]
100120b2:	9f03      	ldr	r7, [sp, #12]
100120b4:	0004      	movs	r4, r0
100120b6:	000d      	movs	r5, r1
100120b8:	9804      	ldr	r0, [sp, #16]
100120ba:	9905      	ldr	r1, [sp, #20]
100120bc:	0032      	movs	r2, r6
100120be:	003b      	movs	r3, r7
100120c0:	f001 fce8 	bl	10013a94 <__aeabi_dadd>
100120c4:	9a06      	ldr	r2, [sp, #24]
100120c6:	9b07      	ldr	r3, [sp, #28]
100120c8:	f002 fc34 	bl	10014934 <__aeabi_dmul>
100120cc:	0022      	movs	r2, r4
100120ce:	002b      	movs	r3, r5
100120d0:	f001 fce0 	bl	10013a94 <__aeabi_dadd>
100120d4:	0032      	movs	r2, r6
100120d6:	900a      	str	r0, [sp, #40]	; 0x28
100120d8:	910b      	str	r1, [sp, #44]	; 0x2c
100120da:	003b      	movs	r3, r7
100120dc:	0030      	movs	r0, r6
100120de:	0039      	movs	r1, r7
100120e0:	9602      	str	r6, [sp, #8]
100120e2:	9703      	str	r7, [sp, #12]
100120e4:	f002 fc26 	bl	10014934 <__aeabi_dmul>
100120e8:	2200      	movs	r2, #0
100120ea:	4b89      	ldr	r3, [pc, #548]	; (10012310 <__ieee754_pow+0x604>)
100120ec:	0004      	movs	r4, r0
100120ee:	000d      	movs	r5, r1
100120f0:	f001 fcd0 	bl	10013a94 <__aeabi_dadd>
100120f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100120f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100120f8:	f001 fccc 	bl	10013a94 <__aeabi_dadd>
100120fc:	2600      	movs	r6, #0
100120fe:	000f      	movs	r7, r1
10012100:	0032      	movs	r2, r6
10012102:	000b      	movs	r3, r1
10012104:	9802      	ldr	r0, [sp, #8]
10012106:	9903      	ldr	r1, [sp, #12]
10012108:	f002 fc14 	bl	10014934 <__aeabi_dmul>
1001210c:	2200      	movs	r2, #0
1001210e:	9002      	str	r0, [sp, #8]
10012110:	9103      	str	r1, [sp, #12]
10012112:	4b7f      	ldr	r3, [pc, #508]	; (10012310 <__ieee754_pow+0x604>)
10012114:	0030      	movs	r0, r6
10012116:	0039      	movs	r1, r7
10012118:	f002 fe86 	bl	10014e28 <__aeabi_dsub>
1001211c:	0022      	movs	r2, r4
1001211e:	002b      	movs	r3, r5
10012120:	f002 fe82 	bl	10014e28 <__aeabi_dsub>
10012124:	0002      	movs	r2, r0
10012126:	000b      	movs	r3, r1
10012128:	980a      	ldr	r0, [sp, #40]	; 0x28
1001212a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1001212c:	f002 fe7c 	bl	10014e28 <__aeabi_dsub>
10012130:	9a04      	ldr	r2, [sp, #16]
10012132:	9b05      	ldr	r3, [sp, #20]
10012134:	f002 fbfe 	bl	10014934 <__aeabi_dmul>
10012138:	0032      	movs	r2, r6
1001213a:	0004      	movs	r4, r0
1001213c:	000d      	movs	r5, r1
1001213e:	9806      	ldr	r0, [sp, #24]
10012140:	9907      	ldr	r1, [sp, #28]
10012142:	003b      	movs	r3, r7
10012144:	f002 fbf6 	bl	10014934 <__aeabi_dmul>
10012148:	0002      	movs	r2, r0
1001214a:	000b      	movs	r3, r1
1001214c:	0020      	movs	r0, r4
1001214e:	0029      	movs	r1, r5
10012150:	f001 fca0 	bl	10013a94 <__aeabi_dadd>
10012154:	0004      	movs	r4, r0
10012156:	000d      	movs	r5, r1
10012158:	0002      	movs	r2, r0
1001215a:	000b      	movs	r3, r1
1001215c:	9802      	ldr	r0, [sp, #8]
1001215e:	9903      	ldr	r1, [sp, #12]
10012160:	f001 fc98 	bl	10013a94 <__aeabi_dadd>
10012164:	2600      	movs	r6, #0
10012166:	22e0      	movs	r2, #224	; 0xe0
10012168:	4b6a      	ldr	r3, [pc, #424]	; (10012314 <__ieee754_pow+0x608>)
1001216a:	0612      	lsls	r2, r2, #24
1001216c:	0030      	movs	r0, r6
1001216e:	000f      	movs	r7, r1
10012170:	f002 fbe0 	bl	10014934 <__aeabi_dmul>
10012174:	9a02      	ldr	r2, [sp, #8]
10012176:	9b03      	ldr	r3, [sp, #12]
10012178:	9004      	str	r0, [sp, #16]
1001217a:	9105      	str	r1, [sp, #20]
1001217c:	0030      	movs	r0, r6
1001217e:	0039      	movs	r1, r7
10012180:	f002 fe52 	bl	10014e28 <__aeabi_dsub>
10012184:	0002      	movs	r2, r0
10012186:	000b      	movs	r3, r1
10012188:	0020      	movs	r0, r4
1001218a:	0029      	movs	r1, r5
1001218c:	f002 fe4c 	bl	10014e28 <__aeabi_dsub>
10012190:	4a61      	ldr	r2, [pc, #388]	; (10012318 <__ieee754_pow+0x60c>)
10012192:	4b60      	ldr	r3, [pc, #384]	; (10012314 <__ieee754_pow+0x608>)
10012194:	f002 fbce 	bl	10014934 <__aeabi_dmul>
10012198:	4a60      	ldr	r2, [pc, #384]	; (1001231c <__ieee754_pow+0x610>)
1001219a:	0004      	movs	r4, r0
1001219c:	000d      	movs	r5, r1
1001219e:	4b60      	ldr	r3, [pc, #384]	; (10012320 <__ieee754_pow+0x614>)
100121a0:	0030      	movs	r0, r6
100121a2:	0039      	movs	r1, r7
100121a4:	f002 fbc6 	bl	10014934 <__aeabi_dmul>
100121a8:	0002      	movs	r2, r0
100121aa:	000b      	movs	r3, r1
100121ac:	0020      	movs	r0, r4
100121ae:	0029      	movs	r1, r5
100121b0:	f001 fc70 	bl	10013a94 <__aeabi_dadd>
100121b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100121b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100121b8:	f001 fc6c 	bl	10013a94 <__aeabi_dadd>
100121bc:	0006      	movs	r6, r0
100121be:	4648      	mov	r0, r9
100121c0:	000f      	movs	r7, r1
100121c2:	f003 f9db 	bl	1001557c <__aeabi_i2d>
100121c6:	0004      	movs	r4, r0
100121c8:	000d      	movs	r5, r1
100121ca:	9804      	ldr	r0, [sp, #16]
100121cc:	9905      	ldr	r1, [sp, #20]
100121ce:	0032      	movs	r2, r6
100121d0:	003b      	movs	r3, r7
100121d2:	f001 fc5f 	bl	10013a94 <__aeabi_dadd>
100121d6:	9a08      	ldr	r2, [sp, #32]
100121d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100121da:	f001 fc5b 	bl	10013a94 <__aeabi_dadd>
100121de:	0022      	movs	r2, r4
100121e0:	002b      	movs	r3, r5
100121e2:	f001 fc57 	bl	10013a94 <__aeabi_dadd>
100121e6:	2000      	movs	r0, #0
100121e8:	0022      	movs	r2, r4
100121ea:	002b      	movs	r3, r5
100121ec:	9002      	str	r0, [sp, #8]
100121ee:	9103      	str	r1, [sp, #12]
100121f0:	f002 fe1a 	bl	10014e28 <__aeabi_dsub>
100121f4:	9a08      	ldr	r2, [sp, #32]
100121f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100121f8:	f002 fe16 	bl	10014e28 <__aeabi_dsub>
100121fc:	9a04      	ldr	r2, [sp, #16]
100121fe:	9b05      	ldr	r3, [sp, #20]
10012200:	f002 fe12 	bl	10014e28 <__aeabi_dsub>
10012204:	0002      	movs	r2, r0
10012206:	000b      	movs	r3, r1
10012208:	0030      	movs	r0, r6
1001220a:	0039      	movs	r1, r7
1001220c:	f002 fe0c 	bl	10014e28 <__aeabi_dsub>
10012210:	9004      	str	r0, [sp, #16]
10012212:	9105      	str	r1, [sp, #20]
10012214:	465b      	mov	r3, fp
10012216:	4642      	mov	r2, r8
10012218:	3b01      	subs	r3, #1
1001221a:	4313      	orrs	r3, r2
1001221c:	d100      	bne.n	10012220 <__ieee754_pow+0x514>
1001221e:	e197      	b.n	10012550 <__ieee754_pow+0x844>
10012220:	2300      	movs	r3, #0
10012222:	4c2b      	ldr	r4, [pc, #172]	; (100122d0 <__ieee754_pow+0x5c4>)
10012224:	9306      	str	r3, [sp, #24]
10012226:	9407      	str	r4, [sp, #28]
10012228:	9800      	ldr	r0, [sp, #0]
1001222a:	9901      	ldr	r1, [sp, #4]
1001222c:	2600      	movs	r6, #0
1001222e:	000b      	movs	r3, r1
10012230:	0032      	movs	r2, r6
10012232:	000f      	movs	r7, r1
10012234:	f002 fdf8 	bl	10014e28 <__aeabi_dsub>
10012238:	9a02      	ldr	r2, [sp, #8]
1001223a:	9b03      	ldr	r3, [sp, #12]
1001223c:	f002 fb7a 	bl	10014934 <__aeabi_dmul>
10012240:	9a00      	ldr	r2, [sp, #0]
10012242:	9b01      	ldr	r3, [sp, #4]
10012244:	0004      	movs	r4, r0
10012246:	000d      	movs	r5, r1
10012248:	9804      	ldr	r0, [sp, #16]
1001224a:	9905      	ldr	r1, [sp, #20]
1001224c:	f002 fb72 	bl	10014934 <__aeabi_dmul>
10012250:	0002      	movs	r2, r0
10012252:	000b      	movs	r3, r1
10012254:	0020      	movs	r0, r4
10012256:	0029      	movs	r1, r5
10012258:	f001 fc1c 	bl	10013a94 <__aeabi_dadd>
1001225c:	0004      	movs	r4, r0
1001225e:	000d      	movs	r5, r1
10012260:	9802      	ldr	r0, [sp, #8]
10012262:	9903      	ldr	r1, [sp, #12]
10012264:	003b      	movs	r3, r7
10012266:	0032      	movs	r2, r6
10012268:	9404      	str	r4, [sp, #16]
1001226a:	9505      	str	r5, [sp, #20]
1001226c:	f002 fb62 	bl	10014934 <__aeabi_dmul>
10012270:	9000      	str	r0, [sp, #0]
10012272:	9101      	str	r1, [sp, #4]
10012274:	000b      	movs	r3, r1
10012276:	0002      	movs	r2, r0
10012278:	0029      	movs	r1, r5
1001227a:	0020      	movs	r0, r4
1001227c:	f001 fc0a 	bl	10013a94 <__aeabi_dadd>
10012280:	4b28      	ldr	r3, [pc, #160]	; (10012324 <__ieee754_pow+0x618>)
10012282:	4681      	mov	r9, r0
10012284:	1e0f      	subs	r7, r1, #0
10012286:	468a      	mov	sl, r1
10012288:	429f      	cmp	r7, r3
1001228a:	dc00      	bgt.n	1001228e <__ieee754_pow+0x582>
1001228c:	e13c      	b.n	10012508 <__ieee754_pow+0x7fc>
1001228e:	4b26      	ldr	r3, [pc, #152]	; (10012328 <__ieee754_pow+0x61c>)
10012290:	18cb      	adds	r3, r1, r3
10012292:	4303      	orrs	r3, r0
10012294:	d000      	beq.n	10012298 <__ieee754_pow+0x58c>
10012296:	e1db      	b.n	10012650 <__ieee754_pow+0x944>
10012298:	9804      	ldr	r0, [sp, #16]
1001229a:	9905      	ldr	r1, [sp, #20]
1001229c:	4a23      	ldr	r2, [pc, #140]	; (1001232c <__ieee754_pow+0x620>)
1001229e:	4b24      	ldr	r3, [pc, #144]	; (10012330 <__ieee754_pow+0x624>)
100122a0:	f001 fbf8 	bl	10013a94 <__aeabi_dadd>
100122a4:	9a00      	ldr	r2, [sp, #0]
100122a6:	9b01      	ldr	r3, [sp, #4]
100122a8:	0004      	movs	r4, r0
100122aa:	000d      	movs	r5, r1
100122ac:	4648      	mov	r0, r9
100122ae:	0039      	movs	r1, r7
100122b0:	f002 fdba 	bl	10014e28 <__aeabi_dsub>
100122b4:	0002      	movs	r2, r0
100122b6:	000b      	movs	r3, r1
100122b8:	0020      	movs	r0, r4
100122ba:	0029      	movs	r1, r5
100122bc:	f000 fe2e 	bl	10012f1c <__aeabi_dcmpgt>
100122c0:	003e      	movs	r6, r7
100122c2:	e037      	b.n	10012334 <__ieee754_pow+0x628>
100122c4:	000fffff 	.word	0x000fffff
100122c8:	43400000 	.word	0x43400000
100122cc:	fffffc01 	.word	0xfffffc01
100122d0:	3ff00000 	.word	0x3ff00000
100122d4:	0003988e 	.word	0x0003988e
100122d8:	000bb679 	.word	0x000bb679
100122dc:	fff00000 	.word	0xfff00000
100122e0:	4a454eef 	.word	0x4a454eef
100122e4:	3fca7e28 	.word	0x3fca7e28
100122e8:	93c9db65 	.word	0x93c9db65
100122ec:	3fcd864a 	.word	0x3fcd864a
100122f0:	a91d4101 	.word	0xa91d4101
100122f4:	3fd17460 	.word	0x3fd17460
100122f8:	518f264d 	.word	0x518f264d
100122fc:	3fd55555 	.word	0x3fd55555
10012300:	db6fabff 	.word	0xdb6fabff
10012304:	3fdb6db6 	.word	0x3fdb6db6
10012308:	33333303 	.word	0x33333303
1001230c:	3fe33333 	.word	0x3fe33333
10012310:	40080000 	.word	0x40080000
10012314:	3feec709 	.word	0x3feec709
10012318:	dc3a03fd 	.word	0xdc3a03fd
1001231c:	145b01f5 	.word	0x145b01f5
10012320:	be3e2fe0 	.word	0xbe3e2fe0
10012324:	408fffff 	.word	0x408fffff
10012328:	bf700000 	.word	0xbf700000
1001232c:	652b82fe 	.word	0x652b82fe
10012330:	3c971547 	.word	0x3c971547
10012334:	2800      	cmp	r0, #0
10012336:	d000      	beq.n	1001233a <__ieee754_pow+0x62e>
10012338:	e18a      	b.n	10012650 <__ieee754_pow+0x944>
1001233a:	2280      	movs	r2, #128	; 0x80
1001233c:	4be7      	ldr	r3, [pc, #924]	; (100126dc <__ieee754_pow+0x9d0>)
1001233e:	0352      	lsls	r2, r2, #13
10012340:	469c      	mov	ip, r3
10012342:	0013      	movs	r3, r2
10012344:	1536      	asrs	r6, r6, #20
10012346:	4466      	add	r6, ip
10012348:	4133      	asrs	r3, r6
1001234a:	49e5      	ldr	r1, [pc, #916]	; (100126e0 <__ieee754_pow+0x9d4>)
1001234c:	19db      	adds	r3, r3, r7
1001234e:	005e      	lsls	r6, r3, #1
10012350:	001c      	movs	r4, r3
10012352:	031b      	lsls	r3, r3, #12
10012354:	468c      	mov	ip, r1
10012356:	0b1b      	lsrs	r3, r3, #12
10012358:	4313      	orrs	r3, r2
1001235a:	2214      	movs	r2, #20
1001235c:	0d76      	lsrs	r6, r6, #21
1001235e:	4fe1      	ldr	r7, [pc, #900]	; (100126e4 <__ieee754_pow+0x9d8>)
10012360:	4466      	add	r6, ip
10012362:	4137      	asrs	r7, r6
10012364:	1b96      	subs	r6, r2, r6
10012366:	4133      	asrs	r3, r6
10012368:	4698      	mov	r8, r3
1001236a:	4653      	mov	r3, sl
1001236c:	43bc      	bics	r4, r7
1001236e:	2000      	movs	r0, #0
10012370:	0021      	movs	r1, r4
10012372:	2b00      	cmp	r3, #0
10012374:	da00      	bge.n	10012378 <__ieee754_pow+0x66c>
10012376:	e1a9      	b.n	100126cc <__ieee754_pow+0x9c0>
10012378:	0002      	movs	r2, r0
1001237a:	000b      	movs	r3, r1
1001237c:	9800      	ldr	r0, [sp, #0]
1001237e:	9901      	ldr	r1, [sp, #4]
10012380:	f002 fd52 	bl	10014e28 <__aeabi_dsub>
10012384:	000b      	movs	r3, r1
10012386:	9000      	str	r0, [sp, #0]
10012388:	9101      	str	r1, [sp, #4]
1001238a:	0002      	movs	r2, r0
1001238c:	9804      	ldr	r0, [sp, #16]
1001238e:	9905      	ldr	r1, [sp, #20]
10012390:	f001 fb80 	bl	10013a94 <__aeabi_dadd>
10012394:	4643      	mov	r3, r8
10012396:	051b      	lsls	r3, r3, #20
10012398:	4699      	mov	r9, r3
1001239a:	2000      	movs	r0, #0
1001239c:	2200      	movs	r2, #0
1001239e:	4bd2      	ldr	r3, [pc, #840]	; (100126e8 <__ieee754_pow+0x9dc>)
100123a0:	0006      	movs	r6, r0
100123a2:	000f      	movs	r7, r1
100123a4:	f002 fac6 	bl	10014934 <__aeabi_dmul>
100123a8:	9a00      	ldr	r2, [sp, #0]
100123aa:	9b01      	ldr	r3, [sp, #4]
100123ac:	9002      	str	r0, [sp, #8]
100123ae:	9103      	str	r1, [sp, #12]
100123b0:	0030      	movs	r0, r6
100123b2:	0039      	movs	r1, r7
100123b4:	f002 fd38 	bl	10014e28 <__aeabi_dsub>
100123b8:	0002      	movs	r2, r0
100123ba:	000b      	movs	r3, r1
100123bc:	9804      	ldr	r0, [sp, #16]
100123be:	9905      	ldr	r1, [sp, #20]
100123c0:	f002 fd32 	bl	10014e28 <__aeabi_dsub>
100123c4:	4ac9      	ldr	r2, [pc, #804]	; (100126ec <__ieee754_pow+0x9e0>)
100123c6:	4bca      	ldr	r3, [pc, #808]	; (100126f0 <__ieee754_pow+0x9e4>)
100123c8:	f002 fab4 	bl	10014934 <__aeabi_dmul>
100123cc:	4ac9      	ldr	r2, [pc, #804]	; (100126f4 <__ieee754_pow+0x9e8>)
100123ce:	0004      	movs	r4, r0
100123d0:	000d      	movs	r5, r1
100123d2:	4bc9      	ldr	r3, [pc, #804]	; (100126f8 <__ieee754_pow+0x9ec>)
100123d4:	0030      	movs	r0, r6
100123d6:	0039      	movs	r1, r7
100123d8:	f002 faac 	bl	10014934 <__aeabi_dmul>
100123dc:	0002      	movs	r2, r0
100123de:	000b      	movs	r3, r1
100123e0:	0020      	movs	r0, r4
100123e2:	0029      	movs	r1, r5
100123e4:	f001 fb56 	bl	10013a94 <__aeabi_dadd>
100123e8:	0004      	movs	r4, r0
100123ea:	000d      	movs	r5, r1
100123ec:	0002      	movs	r2, r0
100123ee:	000b      	movs	r3, r1
100123f0:	9802      	ldr	r0, [sp, #8]
100123f2:	9903      	ldr	r1, [sp, #12]
100123f4:	f001 fb4e 	bl	10013a94 <__aeabi_dadd>
100123f8:	9a02      	ldr	r2, [sp, #8]
100123fa:	9b03      	ldr	r3, [sp, #12]
100123fc:	0006      	movs	r6, r0
100123fe:	000f      	movs	r7, r1
10012400:	f002 fd12 	bl	10014e28 <__aeabi_dsub>
10012404:	0002      	movs	r2, r0
10012406:	000b      	movs	r3, r1
10012408:	0020      	movs	r0, r4
1001240a:	0029      	movs	r1, r5
1001240c:	f002 fd0c 	bl	10014e28 <__aeabi_dsub>
10012410:	0032      	movs	r2, r6
10012412:	9000      	str	r0, [sp, #0]
10012414:	9101      	str	r1, [sp, #4]
10012416:	003b      	movs	r3, r7
10012418:	0030      	movs	r0, r6
1001241a:	0039      	movs	r1, r7
1001241c:	f002 fa8a 	bl	10014934 <__aeabi_dmul>
10012420:	0004      	movs	r4, r0
10012422:	000d      	movs	r5, r1
10012424:	4ab5      	ldr	r2, [pc, #724]	; (100126fc <__ieee754_pow+0x9f0>)
10012426:	4bb6      	ldr	r3, [pc, #728]	; (10012700 <__ieee754_pow+0x9f4>)
10012428:	f002 fa84 	bl	10014934 <__aeabi_dmul>
1001242c:	4ab5      	ldr	r2, [pc, #724]	; (10012704 <__ieee754_pow+0x9f8>)
1001242e:	4bb6      	ldr	r3, [pc, #728]	; (10012708 <__ieee754_pow+0x9fc>)
10012430:	f002 fcfa 	bl	10014e28 <__aeabi_dsub>
10012434:	0022      	movs	r2, r4
10012436:	002b      	movs	r3, r5
10012438:	f002 fa7c 	bl	10014934 <__aeabi_dmul>
1001243c:	4ab3      	ldr	r2, [pc, #716]	; (1001270c <__ieee754_pow+0xa00>)
1001243e:	4bb4      	ldr	r3, [pc, #720]	; (10012710 <__ieee754_pow+0xa04>)
10012440:	f001 fb28 	bl	10013a94 <__aeabi_dadd>
10012444:	0022      	movs	r2, r4
10012446:	002b      	movs	r3, r5
10012448:	f002 fa74 	bl	10014934 <__aeabi_dmul>
1001244c:	4ab1      	ldr	r2, [pc, #708]	; (10012714 <__ieee754_pow+0xa08>)
1001244e:	4bb2      	ldr	r3, [pc, #712]	; (10012718 <__ieee754_pow+0xa0c>)
10012450:	f002 fcea 	bl	10014e28 <__aeabi_dsub>
10012454:	0022      	movs	r2, r4
10012456:	002b      	movs	r3, r5
10012458:	f002 fa6c 	bl	10014934 <__aeabi_dmul>
1001245c:	4aaf      	ldr	r2, [pc, #700]	; (1001271c <__ieee754_pow+0xa10>)
1001245e:	4bb0      	ldr	r3, [pc, #704]	; (10012720 <__ieee754_pow+0xa14>)
10012460:	f001 fb18 	bl	10013a94 <__aeabi_dadd>
10012464:	0022      	movs	r2, r4
10012466:	002b      	movs	r3, r5
10012468:	f002 fa64 	bl	10014934 <__aeabi_dmul>
1001246c:	0002      	movs	r2, r0
1001246e:	000b      	movs	r3, r1
10012470:	0030      	movs	r0, r6
10012472:	0039      	movs	r1, r7
10012474:	f002 fcd8 	bl	10014e28 <__aeabi_dsub>
10012478:	0004      	movs	r4, r0
1001247a:	000d      	movs	r5, r1
1001247c:	0002      	movs	r2, r0
1001247e:	000b      	movs	r3, r1
10012480:	0030      	movs	r0, r6
10012482:	0039      	movs	r1, r7
10012484:	f002 fa56 	bl	10014934 <__aeabi_dmul>
10012488:	2380      	movs	r3, #128	; 0x80
1001248a:	9002      	str	r0, [sp, #8]
1001248c:	9103      	str	r1, [sp, #12]
1001248e:	2200      	movs	r2, #0
10012490:	05db      	lsls	r3, r3, #23
10012492:	0020      	movs	r0, r4
10012494:	0029      	movs	r1, r5
10012496:	f002 fcc7 	bl	10014e28 <__aeabi_dsub>
1001249a:	0002      	movs	r2, r0
1001249c:	000b      	movs	r3, r1
1001249e:	9802      	ldr	r0, [sp, #8]
100124a0:	9903      	ldr	r1, [sp, #12]
100124a2:	f001 fe23 	bl	100140ec <__aeabi_ddiv>
100124a6:	9a00      	ldr	r2, [sp, #0]
100124a8:	9b01      	ldr	r3, [sp, #4]
100124aa:	0004      	movs	r4, r0
100124ac:	000d      	movs	r5, r1
100124ae:	0030      	movs	r0, r6
100124b0:	0039      	movs	r1, r7
100124b2:	f002 fa3f 	bl	10014934 <__aeabi_dmul>
100124b6:	9a00      	ldr	r2, [sp, #0]
100124b8:	9b01      	ldr	r3, [sp, #4]
100124ba:	f001 faeb 	bl	10013a94 <__aeabi_dadd>
100124be:	0002      	movs	r2, r0
100124c0:	000b      	movs	r3, r1
100124c2:	0020      	movs	r0, r4
100124c4:	0029      	movs	r1, r5
100124c6:	f002 fcaf 	bl	10014e28 <__aeabi_dsub>
100124ca:	0032      	movs	r2, r6
100124cc:	003b      	movs	r3, r7
100124ce:	f002 fcab 	bl	10014e28 <__aeabi_dsub>
100124d2:	0002      	movs	r2, r0
100124d4:	000b      	movs	r3, r1
100124d6:	2000      	movs	r0, #0
100124d8:	4992      	ldr	r1, [pc, #584]	; (10012724 <__ieee754_pow+0xa18>)
100124da:	f002 fca5 	bl	10014e28 <__aeabi_dsub>
100124de:	464b      	mov	r3, r9
100124e0:	185b      	adds	r3, r3, r1
100124e2:	151a      	asrs	r2, r3, #20
100124e4:	2a00      	cmp	r2, #0
100124e6:	dc00      	bgt.n	100124ea <__ieee754_pow+0x7de>
100124e8:	e0f4      	b.n	100126d4 <__ieee754_pow+0x9c8>
100124ea:	0019      	movs	r1, r3
100124ec:	9a06      	ldr	r2, [sp, #24]
100124ee:	9b07      	ldr	r3, [sp, #28]
100124f0:	f002 fa20 	bl	10014934 <__aeabi_dmul>
100124f4:	0006      	movs	r6, r0
100124f6:	e452      	b.n	10011d9e <__ieee754_pow+0x92>
100124f8:	0032      	movs	r2, r6
100124fa:	0030      	movs	r0, r6
100124fc:	002b      	movs	r3, r5
100124fe:	0029      	movs	r1, r5
10012500:	f002 fa18 	bl	10014934 <__aeabi_dmul>
10012504:	0006      	movs	r6, r0
10012506:	e44a      	b.n	10011d9e <__ieee754_pow+0x92>
10012508:	4b87      	ldr	r3, [pc, #540]	; (10012728 <__ieee754_pow+0xa1c>)
1001250a:	004e      	lsls	r6, r1, #1
1001250c:	0876      	lsrs	r6, r6, #1
1001250e:	429e      	cmp	r6, r3
10012510:	dc00      	bgt.n	10012514 <__ieee754_pow+0x808>
10012512:	e0bf      	b.n	10012694 <__ieee754_pow+0x988>
10012514:	4b85      	ldr	r3, [pc, #532]	; (1001272c <__ieee754_pow+0xa20>)
10012516:	18cb      	adds	r3, r1, r3
10012518:	4303      	orrs	r3, r0
1001251a:	d10c      	bne.n	10012536 <__ieee754_pow+0x82a>
1001251c:	9a00      	ldr	r2, [sp, #0]
1001251e:	9b01      	ldr	r3, [sp, #4]
10012520:	f002 fc82 	bl	10014e28 <__aeabi_dsub>
10012524:	0002      	movs	r2, r0
10012526:	000b      	movs	r3, r1
10012528:	9804      	ldr	r0, [sp, #16]
1001252a:	9905      	ldr	r1, [sp, #20]
1001252c:	f000 fcec 	bl	10012f08 <__aeabi_dcmple>
10012530:	2800      	cmp	r0, #0
10012532:	d100      	bne.n	10012536 <__ieee754_pow+0x82a>
10012534:	e701      	b.n	1001233a <__ieee754_pow+0x62e>
10012536:	9806      	ldr	r0, [sp, #24]
10012538:	9907      	ldr	r1, [sp, #28]
1001253a:	4a7d      	ldr	r2, [pc, #500]	; (10012730 <__ieee754_pow+0xa24>)
1001253c:	4b7d      	ldr	r3, [pc, #500]	; (10012734 <__ieee754_pow+0xa28>)
1001253e:	f002 f9f9 	bl	10014934 <__aeabi_dmul>
10012542:	4a7b      	ldr	r2, [pc, #492]	; (10012730 <__ieee754_pow+0xa24>)
10012544:	4b7b      	ldr	r3, [pc, #492]	; (10012734 <__ieee754_pow+0xa28>)
10012546:	f002 f9f5 	bl	10014934 <__aeabi_dmul>
1001254a:	0006      	movs	r6, r0
1001254c:	f7ff fc27 	bl	10011d9e <__ieee754_pow+0x92>
10012550:	2300      	movs	r3, #0
10012552:	4c79      	ldr	r4, [pc, #484]	; (10012738 <__ieee754_pow+0xa2c>)
10012554:	9306      	str	r3, [sp, #24]
10012556:	9407      	str	r4, [sp, #28]
10012558:	e666      	b.n	10012228 <__ieee754_pow+0x51c>
1001255a:	4653      	mov	r3, sl
1001255c:	2b00      	cmp	r3, #0
1001255e:	db00      	blt.n	10012562 <__ieee754_pow+0x856>
10012560:	e4c3      	b.n	10011eea <__ieee754_pow+0x1de>
10012562:	9b00      	ldr	r3, [sp, #0]
10012564:	9c01      	ldr	r4, [sp, #4]
10012566:	2280      	movs	r2, #128	; 0x80
10012568:	0612      	lsls	r2, r2, #24
1001256a:	001e      	movs	r6, r3
1001256c:	4694      	mov	ip, r2
1001256e:	0023      	movs	r3, r4
10012570:	4463      	add	r3, ip
10012572:	0019      	movs	r1, r3
10012574:	f7ff fc13 	bl	10011d9e <__ieee754_pow+0x92>
10012578:	0002      	movs	r2, r0
1001257a:	000b      	movs	r3, r1
1001257c:	2000      	movs	r0, #0
1001257e:	4969      	ldr	r1, [pc, #420]	; (10012724 <__ieee754_pow+0xa18>)
10012580:	f001 fdb4 	bl	100140ec <__aeabi_ddiv>
10012584:	e44a      	b.n	10011e1c <__ieee754_pow+0x110>
10012586:	4b6d      	ldr	r3, [pc, #436]	; (1001273c <__ieee754_pow+0xa30>)
10012588:	429c      	cmp	r4, r3
1001258a:	dc00      	bgt.n	1001258e <__ieee754_pow+0x882>
1001258c:	e4aa      	b.n	10011ee4 <__ieee754_pow+0x1d8>
1001258e:	4b65      	ldr	r3, [pc, #404]	; (10012724 <__ieee754_pow+0xa18>)
10012590:	429c      	cmp	r4, r3
10012592:	dd01      	ble.n	10012598 <__ieee754_pow+0x88c>
10012594:	f7ff fc2c 	bl	10011df0 <__ieee754_pow+0xe4>
10012598:	2200      	movs	r2, #0
1001259a:	4b62      	ldr	r3, [pc, #392]	; (10012724 <__ieee754_pow+0xa18>)
1001259c:	f002 fc44 	bl	10014e28 <__aeabi_dsub>
100125a0:	22c0      	movs	r2, #192	; 0xc0
100125a2:	4b67      	ldr	r3, [pc, #412]	; (10012740 <__ieee754_pow+0xa34>)
100125a4:	05d2      	lsls	r2, r2, #23
100125a6:	0004      	movs	r4, r0
100125a8:	000d      	movs	r5, r1
100125aa:	f002 f9c3 	bl	10014934 <__aeabi_dmul>
100125ae:	4a65      	ldr	r2, [pc, #404]	; (10012744 <__ieee754_pow+0xa38>)
100125b0:	0006      	movs	r6, r0
100125b2:	000f      	movs	r7, r1
100125b4:	4b64      	ldr	r3, [pc, #400]	; (10012748 <__ieee754_pow+0xa3c>)
100125b6:	0020      	movs	r0, r4
100125b8:	0029      	movs	r1, r5
100125ba:	f002 f9bb 	bl	10014934 <__aeabi_dmul>
100125be:	2200      	movs	r2, #0
100125c0:	9002      	str	r0, [sp, #8]
100125c2:	9103      	str	r1, [sp, #12]
100125c4:	4b61      	ldr	r3, [pc, #388]	; (1001274c <__ieee754_pow+0xa40>)
100125c6:	0020      	movs	r0, r4
100125c8:	0029      	movs	r1, r5
100125ca:	f002 f9b3 	bl	10014934 <__aeabi_dmul>
100125ce:	0002      	movs	r2, r0
100125d0:	000b      	movs	r3, r1
100125d2:	485f      	ldr	r0, [pc, #380]	; (10012750 <__ieee754_pow+0xa44>)
100125d4:	495f      	ldr	r1, [pc, #380]	; (10012754 <__ieee754_pow+0xa48>)
100125d6:	f002 fc27 	bl	10014e28 <__aeabi_dsub>
100125da:	0022      	movs	r2, r4
100125dc:	002b      	movs	r3, r5
100125de:	f002 f9a9 	bl	10014934 <__aeabi_dmul>
100125e2:	0002      	movs	r2, r0
100125e4:	000b      	movs	r3, r1
100125e6:	2000      	movs	r0, #0
100125e8:	495b      	ldr	r1, [pc, #364]	; (10012758 <__ieee754_pow+0xa4c>)
100125ea:	f002 fc1d 	bl	10014e28 <__aeabi_dsub>
100125ee:	0022      	movs	r2, r4
100125f0:	9004      	str	r0, [sp, #16]
100125f2:	9105      	str	r1, [sp, #20]
100125f4:	002b      	movs	r3, r5
100125f6:	0020      	movs	r0, r4
100125f8:	0029      	movs	r1, r5
100125fa:	f002 f99b 	bl	10014934 <__aeabi_dmul>
100125fe:	0002      	movs	r2, r0
10012600:	000b      	movs	r3, r1
10012602:	9804      	ldr	r0, [sp, #16]
10012604:	9905      	ldr	r1, [sp, #20]
10012606:	f002 f995 	bl	10014934 <__aeabi_dmul>
1001260a:	4a54      	ldr	r2, [pc, #336]	; (1001275c <__ieee754_pow+0xa50>)
1001260c:	4b4c      	ldr	r3, [pc, #304]	; (10012740 <__ieee754_pow+0xa34>)
1001260e:	f002 f991 	bl	10014934 <__aeabi_dmul>
10012612:	0002      	movs	r2, r0
10012614:	000b      	movs	r3, r1
10012616:	9802      	ldr	r0, [sp, #8]
10012618:	9903      	ldr	r1, [sp, #12]
1001261a:	f002 fc05 	bl	10014e28 <__aeabi_dsub>
1001261e:	0002      	movs	r2, r0
10012620:	000b      	movs	r3, r1
10012622:	0004      	movs	r4, r0
10012624:	000d      	movs	r5, r1
10012626:	0030      	movs	r0, r6
10012628:	0039      	movs	r1, r7
1001262a:	f001 fa33 	bl	10013a94 <__aeabi_dadd>
1001262e:	2200      	movs	r2, #0
10012630:	0010      	movs	r0, r2
10012632:	003b      	movs	r3, r7
10012634:	0032      	movs	r2, r6
10012636:	9002      	str	r0, [sp, #8]
10012638:	9103      	str	r1, [sp, #12]
1001263a:	f002 fbf5 	bl	10014e28 <__aeabi_dsub>
1001263e:	0002      	movs	r2, r0
10012640:	000b      	movs	r3, r1
10012642:	0020      	movs	r0, r4
10012644:	0029      	movs	r1, r5
10012646:	f002 fbef 	bl	10014e28 <__aeabi_dsub>
1001264a:	9004      	str	r0, [sp, #16]
1001264c:	9105      	str	r1, [sp, #20]
1001264e:	e5e1      	b.n	10012214 <__ieee754_pow+0x508>
10012650:	4a43      	ldr	r2, [pc, #268]	; (10012760 <__ieee754_pow+0xa54>)
10012652:	4b44      	ldr	r3, [pc, #272]	; (10012764 <__ieee754_pow+0xa58>)
10012654:	9806      	ldr	r0, [sp, #24]
10012656:	9907      	ldr	r1, [sp, #28]
10012658:	f002 f96c 	bl	10014934 <__aeabi_dmul>
1001265c:	4a40      	ldr	r2, [pc, #256]	; (10012760 <__ieee754_pow+0xa54>)
1001265e:	4b41      	ldr	r3, [pc, #260]	; (10012764 <__ieee754_pow+0xa58>)
10012660:	f002 f968 	bl	10014934 <__aeabi_dmul>
10012664:	0006      	movs	r6, r0
10012666:	f7ff fb9a 	bl	10011d9e <__ieee754_pow+0x92>
1001266a:	2a00      	cmp	r2, #0
1001266c:	d001      	beq.n	10012672 <__ieee754_pow+0x966>
1001266e:	f7ff fba5 	bl	10011dbc <__ieee754_pow+0xb0>
10012672:	3214      	adds	r2, #20
10012674:	1ad3      	subs	r3, r2, r3
10012676:	003a      	movs	r2, r7
10012678:	411a      	asrs	r2, r3
1001267a:	0011      	movs	r1, r2
1001267c:	4099      	lsls	r1, r3
1001267e:	428f      	cmp	r7, r1
10012680:	d001      	beq.n	10012686 <__ieee754_pow+0x97a>
10012682:	f7ff fb6f 	bl	10011d64 <__ieee754_pow+0x58>
10012686:	2301      	movs	r3, #1
10012688:	4013      	ands	r3, r2
1001268a:	2202      	movs	r2, #2
1001268c:	1ad3      	subs	r3, r2, r3
1001268e:	469b      	mov	fp, r3
10012690:	f7ff fb68 	bl	10011d64 <__ieee754_pow+0x58>
10012694:	4b30      	ldr	r3, [pc, #192]	; (10012758 <__ieee754_pow+0xa4c>)
10012696:	429e      	cmp	r6, r3
10012698:	dd00      	ble.n	1001269c <__ieee754_pow+0x990>
1001269a:	e64e      	b.n	1001233a <__ieee754_pow+0x62e>
1001269c:	2300      	movs	r3, #0
1001269e:	4699      	mov	r9, r3
100126a0:	4698      	mov	r8, r3
100126a2:	e67a      	b.n	1001239a <__ieee754_pow+0x68e>
100126a4:	0002      	movs	r2, r0
100126a6:	000b      	movs	r3, r1
100126a8:	f7ff fc14 	bl	10011ed4 <__ieee754_pow+0x1c8>
100126ac:	2380      	movs	r3, #128	; 0x80
100126ae:	4c2e      	ldr	r4, [pc, #184]	; (10012768 <__ieee754_pow+0xa5c>)
100126b0:	05db      	lsls	r3, r3, #23
100126b2:	9308      	str	r3, [sp, #32]
100126b4:	9409      	str	r4, [sp, #36]	; 0x24
100126b6:	4b2d      	ldr	r3, [pc, #180]	; (1001276c <__ieee754_pow+0xa60>)
100126b8:	4c2d      	ldr	r4, [pc, #180]	; (10012770 <__ieee754_pow+0xa64>)
100126ba:	2200      	movs	r2, #0
100126bc:	930c      	str	r3, [sp, #48]	; 0x30
100126be:	940d      	str	r4, [sp, #52]	; 0x34
100126c0:	2480      	movs	r4, #128	; 0x80
100126c2:	4b2c      	ldr	r3, [pc, #176]	; (10012774 <__ieee754_pow+0xa68>)
100126c4:	02e4      	lsls	r4, r4, #11
100126c6:	9206      	str	r2, [sp, #24]
100126c8:	9307      	str	r3, [sp, #28]
100126ca:	e456      	b.n	10011f7a <__ieee754_pow+0x26e>
100126cc:	4643      	mov	r3, r8
100126ce:	425b      	negs	r3, r3
100126d0:	4698      	mov	r8, r3
100126d2:	e651      	b.n	10012378 <__ieee754_pow+0x66c>
100126d4:	4642      	mov	r2, r8
100126d6:	f000 f9fd 	bl	10012ad4 <scalbn>
100126da:	e707      	b.n	100124ec <__ieee754_pow+0x7e0>
100126dc:	fffffc02 	.word	0xfffffc02
100126e0:	fffffc01 	.word	0xfffffc01
100126e4:	000fffff 	.word	0x000fffff
100126e8:	3fe62e43 	.word	0x3fe62e43
100126ec:	fefa39ef 	.word	0xfefa39ef
100126f0:	3fe62e42 	.word	0x3fe62e42
100126f4:	0ca86c39 	.word	0x0ca86c39
100126f8:	be205c61 	.word	0xbe205c61
100126fc:	72bea4d0 	.word	0x72bea4d0
10012700:	3e663769 	.word	0x3e663769
10012704:	c5d26bf1 	.word	0xc5d26bf1
10012708:	3ebbbd41 	.word	0x3ebbbd41
1001270c:	af25de2c 	.word	0xaf25de2c
10012710:	3f11566a 	.word	0x3f11566a
10012714:	16bebd93 	.word	0x16bebd93
10012718:	3f66c16c 	.word	0x3f66c16c
1001271c:	5555553e 	.word	0x5555553e
10012720:	3fc55555 	.word	0x3fc55555
10012724:	3ff00000 	.word	0x3ff00000
10012728:	4090cbff 	.word	0x4090cbff
1001272c:	3f6f3400 	.word	0x3f6f3400
10012730:	c2f8f359 	.word	0xc2f8f359
10012734:	01a56e1f 	.word	0x01a56e1f
10012738:	bff00000 	.word	0xbff00000
1001273c:	3feffffe 	.word	0x3feffffe
10012740:	3ff71547 	.word	0x3ff71547
10012744:	f85ddf44 	.word	0xf85ddf44
10012748:	3e54ae0b 	.word	0x3e54ae0b
1001274c:	3fd00000 	.word	0x3fd00000
10012750:	55555555 	.word	0x55555555
10012754:	3fd55555 	.word	0x3fd55555
10012758:	3fe00000 	.word	0x3fe00000
1001275c:	652b82fe 	.word	0x652b82fe
10012760:	8800759c 	.word	0x8800759c
10012764:	7e37e43c 	.word	0x7e37e43c
10012768:	3fe2b803 	.word	0x3fe2b803
1001276c:	43cfd006 	.word	0x43cfd006
10012770:	3e4cfdeb 	.word	0x3e4cfdeb
10012774:	3ff80000 	.word	0x3ff80000

10012778 <__ieee754_sqrt>:
10012778:	b5f0      	push	{r4, r5, r6, r7, lr}
1001277a:	4656      	mov	r6, sl
1001277c:	464d      	mov	r5, r9
1001277e:	4644      	mov	r4, r8
10012780:	465f      	mov	r7, fp
10012782:	4b75      	ldr	r3, [pc, #468]	; (10012958 <__ieee754_sqrt+0x1e0>)
10012784:	b4f0      	push	{r4, r5, r6, r7}
10012786:	000a      	movs	r2, r1
10012788:	000d      	movs	r5, r1
1001278a:	0019      	movs	r1, r3
1001278c:	b083      	sub	sp, #12
1001278e:	0006      	movs	r6, r0
10012790:	0004      	movs	r4, r0
10012792:	4029      	ands	r1, r5
10012794:	4299      	cmp	r1, r3
10012796:	d100      	bne.n	1001279a <__ieee754_sqrt+0x22>
10012798:	e0ba      	b.n	10012910 <__ieee754_sqrt+0x198>
1001279a:	2d00      	cmp	r5, #0
1001279c:	dc00      	bgt.n	100127a0 <__ieee754_sqrt+0x28>
1001279e:	e094      	b.n	100128ca <__ieee754_sqrt+0x152>
100127a0:	152d      	asrs	r5, r5, #20
100127a2:	d100      	bne.n	100127a6 <__ieee754_sqrt+0x2e>
100127a4:	e0a3      	b.n	100128ee <__ieee754_sqrt+0x176>
100127a6:	4b6d      	ldr	r3, [pc, #436]	; (1001295c <__ieee754_sqrt+0x1e4>)
100127a8:	0312      	lsls	r2, r2, #12
100127aa:	469c      	mov	ip, r3
100127ac:	2380      	movs	r3, #128	; 0x80
100127ae:	0b12      	lsrs	r2, r2, #12
100127b0:	035b      	lsls	r3, r3, #13
100127b2:	4465      	add	r5, ip
100127b4:	431a      	orrs	r2, r3
100127b6:	07eb      	lsls	r3, r5, #31
100127b8:	d500      	bpl.n	100127bc <__ieee754_sqrt+0x44>
100127ba:	e081      	b.n	100128c0 <__ieee754_sqrt+0x148>
100127bc:	106b      	asrs	r3, r5, #1
100127be:	4698      	mov	r8, r3
100127c0:	0fe3      	lsrs	r3, r4, #31
100127c2:	189b      	adds	r3, r3, r2
100127c4:	189b      	adds	r3, r3, r2
100127c6:	2280      	movs	r2, #128	; 0x80
100127c8:	2116      	movs	r1, #22
100127ca:	2600      	movs	r6, #0
100127cc:	2700      	movs	r7, #0
100127ce:	0064      	lsls	r4, r4, #1
100127d0:	0392      	lsls	r2, r2, #14
100127d2:	18b8      	adds	r0, r7, r2
100127d4:	4298      	cmp	r0, r3
100127d6:	dc02      	bgt.n	100127de <__ieee754_sqrt+0x66>
100127d8:	1887      	adds	r7, r0, r2
100127da:	1a1b      	subs	r3, r3, r0
100127dc:	18b6      	adds	r6, r6, r2
100127de:	0fe0      	lsrs	r0, r4, #31
100127e0:	005b      	lsls	r3, r3, #1
100127e2:	3901      	subs	r1, #1
100127e4:	181b      	adds	r3, r3, r0
100127e6:	0064      	lsls	r4, r4, #1
100127e8:	0852      	lsrs	r2, r2, #1
100127ea:	2900      	cmp	r1, #0
100127ec:	d1f1      	bne.n	100127d2 <__ieee754_sqrt+0x5a>
100127ee:	2200      	movs	r2, #0
100127f0:	9201      	str	r2, [sp, #4]
100127f2:	4694      	mov	ip, r2
100127f4:	2280      	movs	r2, #128	; 0x80
100127f6:	0612      	lsls	r2, r2, #24
100127f8:	2020      	movs	r0, #32
100127fa:	4691      	mov	r9, r2
100127fc:	e009      	b.n	10012812 <__ieee754_sqrt+0x9a>
100127fe:	429f      	cmp	r7, r3
10012800:	d041      	beq.n	10012886 <__ieee754_sqrt+0x10e>
10012802:	0fe1      	lsrs	r1, r4, #31
10012804:	18c9      	adds	r1, r1, r3
10012806:	3801      	subs	r0, #1
10012808:	18cb      	adds	r3, r1, r3
1001280a:	0064      	lsls	r4, r4, #1
1001280c:	0852      	lsrs	r2, r2, #1
1001280e:	2800      	cmp	r0, #0
10012810:	d01e      	beq.n	10012850 <__ieee754_sqrt+0xd8>
10012812:	4661      	mov	r1, ip
10012814:	1851      	adds	r1, r2, r1
10012816:	429f      	cmp	r7, r3
10012818:	daf1      	bge.n	100127fe <__ieee754_sqrt+0x86>
1001281a:	188d      	adds	r5, r1, r2
1001281c:	46ac      	mov	ip, r5
1001281e:	0fcd      	lsrs	r5, r1, #31
10012820:	07ed      	lsls	r5, r5, #31
10012822:	46ba      	mov	sl, r7
10012824:	454d      	cmp	r5, r9
10012826:	d039      	beq.n	1001289c <__ieee754_sqrt+0x124>
10012828:	1bdb      	subs	r3, r3, r7
1001282a:	428c      	cmp	r4, r1
1001282c:	41bf      	sbcs	r7, r7
1001282e:	427f      	negs	r7, r7
10012830:	1bdb      	subs	r3, r3, r7
10012832:	1a64      	subs	r4, r4, r1
10012834:	9901      	ldr	r1, [sp, #4]
10012836:	3801      	subs	r0, #1
10012838:	468b      	mov	fp, r1
1001283a:	4493      	add	fp, r2
1001283c:	4659      	mov	r1, fp
1001283e:	9101      	str	r1, [sp, #4]
10012840:	0fe1      	lsrs	r1, r4, #31
10012842:	18c9      	adds	r1, r1, r3
10012844:	4657      	mov	r7, sl
10012846:	18cb      	adds	r3, r1, r3
10012848:	0064      	lsls	r4, r4, #1
1001284a:	0852      	lsrs	r2, r2, #1
1001284c:	2800      	cmp	r0, #0
1001284e:	d1e0      	bne.n	10012812 <__ieee754_sqrt+0x9a>
10012850:	4323      	orrs	r3, r4
10012852:	d12b      	bne.n	100128ac <__ieee754_sqrt+0x134>
10012854:	9b01      	ldr	r3, [sp, #4]
10012856:	085b      	lsrs	r3, r3, #1
10012858:	4941      	ldr	r1, [pc, #260]	; (10012960 <__ieee754_sqrt+0x1e8>)
1001285a:	1072      	asrs	r2, r6, #1
1001285c:	468c      	mov	ip, r1
1001285e:	4462      	add	r2, ip
10012860:	07f1      	lsls	r1, r6, #31
10012862:	d502      	bpl.n	1001286a <__ieee754_sqrt+0xf2>
10012864:	2180      	movs	r1, #128	; 0x80
10012866:	0609      	lsls	r1, r1, #24
10012868:	430b      	orrs	r3, r1
1001286a:	4641      	mov	r1, r8
1001286c:	0509      	lsls	r1, r1, #20
1001286e:	188d      	adds	r5, r1, r2
10012870:	001e      	movs	r6, r3
10012872:	002f      	movs	r7, r5
10012874:	0030      	movs	r0, r6
10012876:	0039      	movs	r1, r7
10012878:	b003      	add	sp, #12
1001287a:	bc3c      	pop	{r2, r3, r4, r5}
1001287c:	4690      	mov	r8, r2
1001287e:	4699      	mov	r9, r3
10012880:	46a2      	mov	sl, r4
10012882:	46ab      	mov	fp, r5
10012884:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012886:	42a1      	cmp	r1, r4
10012888:	d80e      	bhi.n	100128a8 <__ieee754_sqrt+0x130>
1001288a:	188d      	adds	r5, r1, r2
1001288c:	46ac      	mov	ip, r5
1001288e:	0fcd      	lsrs	r5, r1, #31
10012890:	07ed      	lsls	r5, r5, #31
10012892:	454d      	cmp	r5, r9
10012894:	d048      	beq.n	10012928 <__ieee754_sqrt+0x1b0>
10012896:	469a      	mov	sl, r3
10012898:	2300      	movs	r3, #0
1001289a:	e7ca      	b.n	10012832 <__ieee754_sqrt+0xba>
1001289c:	4665      	mov	r5, ip
1001289e:	2d00      	cmp	r5, #0
100128a0:	dbc2      	blt.n	10012828 <__ieee754_sqrt+0xb0>
100128a2:	1c7d      	adds	r5, r7, #1
100128a4:	46aa      	mov	sl, r5
100128a6:	e7bf      	b.n	10012828 <__ieee754_sqrt+0xb0>
100128a8:	003b      	movs	r3, r7
100128aa:	e7aa      	b.n	10012802 <__ieee754_sqrt+0x8a>
100128ac:	9b01      	ldr	r3, [sp, #4]
100128ae:	3301      	adds	r3, #1
100128b0:	d03e      	beq.n	10012930 <__ieee754_sqrt+0x1b8>
100128b2:	9a01      	ldr	r2, [sp, #4]
100128b4:	2301      	movs	r3, #1
100128b6:	4694      	mov	ip, r2
100128b8:	4013      	ands	r3, r2
100128ba:	4463      	add	r3, ip
100128bc:	085b      	lsrs	r3, r3, #1
100128be:	e7cb      	b.n	10012858 <__ieee754_sqrt+0xe0>
100128c0:	0fe3      	lsrs	r3, r4, #31
100128c2:	0052      	lsls	r2, r2, #1
100128c4:	189a      	adds	r2, r3, r2
100128c6:	0064      	lsls	r4, r4, #1
100128c8:	e778      	b.n	100127bc <__ieee754_sqrt+0x44>
100128ca:	006b      	lsls	r3, r5, #1
100128cc:	085b      	lsrs	r3, r3, #1
100128ce:	4303      	orrs	r3, r0
100128d0:	002f      	movs	r7, r5
100128d2:	2b00      	cmp	r3, #0
100128d4:	d0ce      	beq.n	10012874 <__ieee754_sqrt+0xfc>
100128d6:	2500      	movs	r5, #0
100128d8:	2a00      	cmp	r2, #0
100128da:	d131      	bne.n	10012940 <__ieee754_sqrt+0x1c8>
100128dc:	0ae2      	lsrs	r2, r4, #11
100128de:	3d15      	subs	r5, #21
100128e0:	0564      	lsls	r4, r4, #21
100128e2:	2a00      	cmp	r2, #0
100128e4:	d0fa      	beq.n	100128dc <__ieee754_sqrt+0x164>
100128e6:	2380      	movs	r3, #128	; 0x80
100128e8:	035b      	lsls	r3, r3, #13
100128ea:	421a      	tst	r2, r3
100128ec:	d123      	bne.n	10012936 <__ieee754_sqrt+0x1be>
100128ee:	2080      	movs	r0, #128	; 0x80
100128f0:	2300      	movs	r3, #0
100128f2:	0340      	lsls	r0, r0, #13
100128f4:	e000      	b.n	100128f8 <__ieee754_sqrt+0x180>
100128f6:	000b      	movs	r3, r1
100128f8:	0052      	lsls	r2, r2, #1
100128fa:	1c59      	adds	r1, r3, #1
100128fc:	4202      	tst	r2, r0
100128fe:	d0fa      	beq.n	100128f6 <__ieee754_sqrt+0x17e>
10012900:	2020      	movs	r0, #32
10012902:	1a40      	subs	r0, r0, r1
10012904:	1aed      	subs	r5, r5, r3
10012906:	0023      	movs	r3, r4
10012908:	40c3      	lsrs	r3, r0
1001290a:	408c      	lsls	r4, r1
1001290c:	431a      	orrs	r2, r3
1001290e:	e74a      	b.n	100127a6 <__ieee754_sqrt+0x2e>
10012910:	0002      	movs	r2, r0
10012912:	002b      	movs	r3, r5
10012914:	0029      	movs	r1, r5
10012916:	f002 f80d 	bl	10014934 <__aeabi_dmul>
1001291a:	0032      	movs	r2, r6
1001291c:	002b      	movs	r3, r5
1001291e:	f001 f8b9 	bl	10013a94 <__aeabi_dadd>
10012922:	0006      	movs	r6, r0
10012924:	000f      	movs	r7, r1
10012926:	e7a5      	b.n	10012874 <__ieee754_sqrt+0xfc>
10012928:	4665      	mov	r5, ip
1001292a:	2d00      	cmp	r5, #0
1001292c:	dab9      	bge.n	100128a2 <__ieee754_sqrt+0x12a>
1001292e:	e7b2      	b.n	10012896 <__ieee754_sqrt+0x11e>
10012930:	3601      	adds	r6, #1
10012932:	2300      	movs	r3, #0
10012934:	e790      	b.n	10012858 <__ieee754_sqrt+0xe0>
10012936:	2301      	movs	r3, #1
10012938:	2020      	movs	r0, #32
1001293a:	425b      	negs	r3, r3
1001293c:	2100      	movs	r1, #0
1001293e:	e7e1      	b.n	10012904 <__ieee754_sqrt+0x18c>
10012940:	003b      	movs	r3, r7
10012942:	0002      	movs	r2, r0
10012944:	0039      	movs	r1, r7
10012946:	f002 fa6f 	bl	10014e28 <__aeabi_dsub>
1001294a:	0002      	movs	r2, r0
1001294c:	000b      	movs	r3, r1
1001294e:	f001 fbcd 	bl	100140ec <__aeabi_ddiv>
10012952:	0006      	movs	r6, r0
10012954:	000f      	movs	r7, r1
10012956:	e78d      	b.n	10012874 <__ieee754_sqrt+0xfc>
10012958:	7ff00000 	.word	0x7ff00000
1001295c:	fffffc01 	.word	0xfffffc01
10012960:	3fe00000 	.word	0x3fe00000

10012964 <fabs>:
10012964:	0049      	lsls	r1, r1, #1
10012966:	084b      	lsrs	r3, r1, #1
10012968:	0019      	movs	r1, r3
1001296a:	4770      	bx	lr

1001296c <finite>:
1001296c:	4b03      	ldr	r3, [pc, #12]	; (1001297c <finite+0x10>)
1001296e:	0048      	lsls	r0, r1, #1
10012970:	469c      	mov	ip, r3
10012972:	0840      	lsrs	r0, r0, #1
10012974:	4460      	add	r0, ip
10012976:	0fc0      	lsrs	r0, r0, #31
10012978:	4770      	bx	lr
1001297a:	46c0      	nop			; (mov r8, r8)
1001297c:	80100000 	.word	0x80100000

10012980 <matherr>:
10012980:	2000      	movs	r0, #0
10012982:	4770      	bx	lr

10012984 <nan>:
10012984:	2000      	movs	r0, #0
10012986:	4901      	ldr	r1, [pc, #4]	; (1001298c <nan+0x8>)
10012988:	4770      	bx	lr
1001298a:	46c0      	nop			; (mov r8, r8)
1001298c:	7ff80000 	.word	0x7ff80000

10012990 <rint>:
10012990:	b5f0      	push	{r4, r5, r6, r7, lr}
10012992:	4647      	mov	r7, r8
10012994:	b480      	push	{r7}
10012996:	0fcb      	lsrs	r3, r1, #31
10012998:	4698      	mov	r8, r3
1001299a:	4c4a      	ldr	r4, [pc, #296]	; (10012ac4 <rint+0x134>)
1001299c:	004b      	lsls	r3, r1, #1
1001299e:	0d5b      	lsrs	r3, r3, #21
100129a0:	191e      	adds	r6, r3, r4
100129a2:	b082      	sub	sp, #8
100129a4:	0007      	movs	r7, r0
100129a6:	000a      	movs	r2, r1
100129a8:	2e13      	cmp	r6, #19
100129aa:	dc35      	bgt.n	10012a18 <rint+0x88>
100129ac:	2e00      	cmp	r6, #0
100129ae:	db57      	blt.n	10012a60 <rint+0xd0>
100129b0:	4b45      	ldr	r3, [pc, #276]	; (10012ac8 <rint+0x138>)
100129b2:	0004      	movs	r4, r0
100129b4:	4133      	asrs	r3, r6
100129b6:	001f      	movs	r7, r3
100129b8:	400f      	ands	r7, r1
100129ba:	4307      	orrs	r7, r0
100129bc:	000d      	movs	r5, r1
100129be:	2f00      	cmp	r7, #0
100129c0:	d024      	beq.n	10012a0c <rint+0x7c>
100129c2:	085b      	lsrs	r3, r3, #1
100129c4:	001c      	movs	r4, r3
100129c6:	400c      	ands	r4, r1
100129c8:	4320      	orrs	r0, r4
100129ca:	2700      	movs	r7, #0
100129cc:	2800      	cmp	r0, #0
100129ce:	d007      	beq.n	100129e0 <rint+0x50>
100129d0:	2e13      	cmp	r6, #19
100129d2:	d100      	bne.n	100129d6 <rint+0x46>
100129d4:	e072      	b.n	10012abc <rint+0x12c>
100129d6:	2280      	movs	r2, #128	; 0x80
100129d8:	02d2      	lsls	r2, r2, #11
100129da:	4132      	asrs	r2, r6
100129dc:	4399      	bics	r1, r3
100129de:	430a      	orrs	r2, r1
100129e0:	4643      	mov	r3, r8
100129e2:	00de      	lsls	r6, r3, #3
100129e4:	4b39      	ldr	r3, [pc, #228]	; (10012acc <rint+0x13c>)
100129e6:	0011      	movs	r1, r2
100129e8:	199e      	adds	r6, r3, r6
100129ea:	6834      	ldr	r4, [r6, #0]
100129ec:	6875      	ldr	r5, [r6, #4]
100129ee:	0038      	movs	r0, r7
100129f0:	0022      	movs	r2, r4
100129f2:	002b      	movs	r3, r5
100129f4:	f001 f84e 	bl	10013a94 <__aeabi_dadd>
100129f8:	9000      	str	r0, [sp, #0]
100129fa:	9101      	str	r1, [sp, #4]
100129fc:	9800      	ldr	r0, [sp, #0]
100129fe:	9901      	ldr	r1, [sp, #4]
10012a00:	0022      	movs	r2, r4
10012a02:	002b      	movs	r3, r5
10012a04:	f002 fa10 	bl	10014e28 <__aeabi_dsub>
10012a08:	0004      	movs	r4, r0
10012a0a:	000d      	movs	r5, r1
10012a0c:	0020      	movs	r0, r4
10012a0e:	0029      	movs	r1, r5
10012a10:	b002      	add	sp, #8
10012a12:	bc04      	pop	{r2}
10012a14:	4690      	mov	r8, r2
10012a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a18:	2e33      	cmp	r6, #51	; 0x33
10012a1a:	dd0c      	ble.n	10012a36 <rint+0xa6>
10012a1c:	2380      	movs	r3, #128	; 0x80
10012a1e:	0004      	movs	r4, r0
10012a20:	000d      	movs	r5, r1
10012a22:	00db      	lsls	r3, r3, #3
10012a24:	429e      	cmp	r6, r3
10012a26:	d1f1      	bne.n	10012a0c <rint+0x7c>
10012a28:	0002      	movs	r2, r0
10012a2a:	000b      	movs	r3, r1
10012a2c:	f001 f832 	bl	10013a94 <__aeabi_dadd>
10012a30:	0004      	movs	r4, r0
10012a32:	000d      	movs	r5, r1
10012a34:	e7ea      	b.n	10012a0c <rint+0x7c>
10012a36:	4c26      	ldr	r4, [pc, #152]	; (10012ad0 <rint+0x140>)
10012a38:	000d      	movs	r5, r1
10012a3a:	46a4      	mov	ip, r4
10012a3c:	2401      	movs	r4, #1
10012a3e:	4463      	add	r3, ip
10012a40:	4264      	negs	r4, r4
10012a42:	40dc      	lsrs	r4, r3
10012a44:	46a4      	mov	ip, r4
10012a46:	4661      	mov	r1, ip
10012a48:	0004      	movs	r4, r0
10012a4a:	4201      	tst	r1, r0
10012a4c:	d0de      	beq.n	10012a0c <rint+0x7c>
10012a4e:	0849      	lsrs	r1, r1, #1
10012a50:	4201      	tst	r1, r0
10012a52:	d0c5      	beq.n	100129e0 <rint+0x50>
10012a54:	2780      	movs	r7, #128	; 0x80
10012a56:	05ff      	lsls	r7, r7, #23
10012a58:	411f      	asrs	r7, r3
10012a5a:	4388      	bics	r0, r1
10012a5c:	4307      	orrs	r7, r0
10012a5e:	e7bf      	b.n	100129e0 <rint+0x50>
10012a60:	004b      	lsls	r3, r1, #1
10012a62:	085b      	lsrs	r3, r3, #1
10012a64:	4303      	orrs	r3, r0
10012a66:	0004      	movs	r4, r0
10012a68:	000d      	movs	r5, r1
10012a6a:	2b00      	cmp	r3, #0
10012a6c:	d0ce      	beq.n	10012a0c <rint+0x7c>
10012a6e:	030b      	lsls	r3, r1, #12
10012a70:	0b1b      	lsrs	r3, r3, #12
10012a72:	4303      	orrs	r3, r0
10012a74:	425a      	negs	r2, r3
10012a76:	4313      	orrs	r3, r2
10012a78:	2280      	movs	r2, #128	; 0x80
10012a7a:	0b1b      	lsrs	r3, r3, #12
10012a7c:	0312      	lsls	r2, r2, #12
10012a7e:	4013      	ands	r3, r2
10012a80:	0c4a      	lsrs	r2, r1, #17
10012a82:	0452      	lsls	r2, r2, #17
10012a84:	4313      	orrs	r3, r2
10012a86:	0019      	movs	r1, r3
10012a88:	4643      	mov	r3, r8
10012a8a:	4a10      	ldr	r2, [pc, #64]	; (10012acc <rint+0x13c>)
10012a8c:	00db      	lsls	r3, r3, #3
10012a8e:	18d3      	adds	r3, r2, r3
10012a90:	681c      	ldr	r4, [r3, #0]
10012a92:	685d      	ldr	r5, [r3, #4]
10012a94:	0022      	movs	r2, r4
10012a96:	002b      	movs	r3, r5
10012a98:	f000 fffc 	bl	10013a94 <__aeabi_dadd>
10012a9c:	9000      	str	r0, [sp, #0]
10012a9e:	9101      	str	r1, [sp, #4]
10012aa0:	9800      	ldr	r0, [sp, #0]
10012aa2:	9901      	ldr	r1, [sp, #4]
10012aa4:	0022      	movs	r2, r4
10012aa6:	002b      	movs	r3, r5
10012aa8:	f002 f9be 	bl	10014e28 <__aeabi_dsub>
10012aac:	4642      	mov	r2, r8
10012aae:	004b      	lsls	r3, r1, #1
10012ab0:	085b      	lsrs	r3, r3, #1
10012ab2:	07d6      	lsls	r6, r2, #31
10012ab4:	4333      	orrs	r3, r6
10012ab6:	0004      	movs	r4, r0
10012ab8:	001d      	movs	r5, r3
10012aba:	e7a7      	b.n	10012a0c <rint+0x7c>
10012abc:	2780      	movs	r7, #128	; 0x80
10012abe:	063f      	lsls	r7, r7, #24
10012ac0:	e789      	b.n	100129d6 <rint+0x46>
10012ac2:	46c0      	nop			; (mov r8, r8)
10012ac4:	fffffc01 	.word	0xfffffc01
10012ac8:	000fffff 	.word	0x000fffff
10012acc:	100184f0 	.word	0x100184f0
10012ad0:	fffffbed 	.word	0xfffffbed

10012ad4 <scalbn>:
10012ad4:	004b      	lsls	r3, r1, #1
10012ad6:	b570      	push	{r4, r5, r6, lr}
10012ad8:	0d5b      	lsrs	r3, r3, #21
10012ada:	0014      	movs	r4, r2
10012adc:	000a      	movs	r2, r1
10012ade:	2b00      	cmp	r3, #0
10012ae0:	d11a      	bne.n	10012b18 <scalbn+0x44>
10012ae2:	004b      	lsls	r3, r1, #1
10012ae4:	085b      	lsrs	r3, r3, #1
10012ae6:	4303      	orrs	r3, r0
10012ae8:	d015      	beq.n	10012b16 <scalbn+0x42>
10012aea:	2200      	movs	r2, #0
10012aec:	4b22      	ldr	r3, [pc, #136]	; (10012b78 <scalbn+0xa4>)
10012aee:	f001 ff21 	bl	10014934 <__aeabi_dmul>
10012af2:	4b22      	ldr	r3, [pc, #136]	; (10012b7c <scalbn+0xa8>)
10012af4:	000a      	movs	r2, r1
10012af6:	429c      	cmp	r4, r3
10012af8:	db22      	blt.n	10012b40 <scalbn+0x6c>
10012afa:	004b      	lsls	r3, r1, #1
10012afc:	0d5b      	lsrs	r3, r3, #21
10012afe:	3b36      	subs	r3, #54	; 0x36
10012b00:	4d1f      	ldr	r5, [pc, #124]	; (10012b80 <scalbn+0xac>)
10012b02:	18e3      	adds	r3, r4, r3
10012b04:	42ab      	cmp	r3, r5
10012b06:	dc20      	bgt.n	10012b4a <scalbn+0x76>
10012b08:	2b00      	cmp	r3, #0
10012b0a:	dd0d      	ble.n	10012b28 <scalbn+0x54>
10012b0c:	4c1d      	ldr	r4, [pc, #116]	; (10012b84 <scalbn+0xb0>)
10012b0e:	051b      	lsls	r3, r3, #20
10012b10:	4022      	ands	r2, r4
10012b12:	431a      	orrs	r2, r3
10012b14:	0011      	movs	r1, r2
10012b16:	bd70      	pop	{r4, r5, r6, pc}
10012b18:	4d1b      	ldr	r5, [pc, #108]	; (10012b88 <scalbn+0xb4>)
10012b1a:	42ab      	cmp	r3, r5
10012b1c:	d1f0      	bne.n	10012b00 <scalbn+0x2c>
10012b1e:	0002      	movs	r2, r0
10012b20:	000b      	movs	r3, r1
10012b22:	f000 ffb7 	bl	10013a94 <__aeabi_dadd>
10012b26:	e7f6      	b.n	10012b16 <scalbn+0x42>
10012b28:	001d      	movs	r5, r3
10012b2a:	3535      	adds	r5, #53	; 0x35
10012b2c:	da18      	bge.n	10012b60 <scalbn+0x8c>
10012b2e:	4b17      	ldr	r3, [pc, #92]	; (10012b8c <scalbn+0xb8>)
10012b30:	0002      	movs	r2, r0
10012b32:	429c      	cmp	r4, r3
10012b34:	dc0a      	bgt.n	10012b4c <scalbn+0x78>
10012b36:	000b      	movs	r3, r1
10012b38:	4815      	ldr	r0, [pc, #84]	; (10012b90 <scalbn+0xbc>)
10012b3a:	4916      	ldr	r1, [pc, #88]	; (10012b94 <scalbn+0xc0>)
10012b3c:	f000 f832 	bl	10012ba4 <copysign>
10012b40:	4a13      	ldr	r2, [pc, #76]	; (10012b90 <scalbn+0xbc>)
10012b42:	4b14      	ldr	r3, [pc, #80]	; (10012b94 <scalbn+0xc0>)
10012b44:	f001 fef6 	bl	10014934 <__aeabi_dmul>
10012b48:	e7e5      	b.n	10012b16 <scalbn+0x42>
10012b4a:	0002      	movs	r2, r0
10012b4c:	000b      	movs	r3, r1
10012b4e:	4812      	ldr	r0, [pc, #72]	; (10012b98 <scalbn+0xc4>)
10012b50:	4912      	ldr	r1, [pc, #72]	; (10012b9c <scalbn+0xc8>)
10012b52:	f000 f827 	bl	10012ba4 <copysign>
10012b56:	4a10      	ldr	r2, [pc, #64]	; (10012b98 <scalbn+0xc4>)
10012b58:	4b10      	ldr	r3, [pc, #64]	; (10012b9c <scalbn+0xc8>)
10012b5a:	f001 feeb 	bl	10014934 <__aeabi_dmul>
10012b5e:	e7da      	b.n	10012b16 <scalbn+0x42>
10012b60:	4c08      	ldr	r4, [pc, #32]	; (10012b84 <scalbn+0xb0>)
10012b62:	3336      	adds	r3, #54	; 0x36
10012b64:	4022      	ands	r2, r4
10012b66:	051b      	lsls	r3, r3, #20
10012b68:	4313      	orrs	r3, r2
10012b6a:	0019      	movs	r1, r3
10012b6c:	2200      	movs	r2, #0
10012b6e:	4b0c      	ldr	r3, [pc, #48]	; (10012ba0 <scalbn+0xcc>)
10012b70:	f001 fee0 	bl	10014934 <__aeabi_dmul>
10012b74:	e7cf      	b.n	10012b16 <scalbn+0x42>
10012b76:	46c0      	nop			; (mov r8, r8)
10012b78:	43500000 	.word	0x43500000
10012b7c:	ffff3cb0 	.word	0xffff3cb0
10012b80:	000007fe 	.word	0x000007fe
10012b84:	800fffff 	.word	0x800fffff
10012b88:	000007ff 	.word	0x000007ff
10012b8c:	0000c350 	.word	0x0000c350
10012b90:	c2f8f359 	.word	0xc2f8f359
10012b94:	01a56e1f 	.word	0x01a56e1f
10012b98:	8800759c 	.word	0x8800759c
10012b9c:	7e37e43c 	.word	0x7e37e43c
10012ba0:	3c900000 	.word	0x3c900000

10012ba4 <copysign>:
10012ba4:	b530      	push	{r4, r5, lr}
10012ba6:	004a      	lsls	r2, r1, #1
10012ba8:	0fdb      	lsrs	r3, r3, #31
10012baa:	07db      	lsls	r3, r3, #31
10012bac:	0852      	lsrs	r2, r2, #1
10012bae:	431a      	orrs	r2, r3
10012bb0:	0011      	movs	r1, r2
10012bb2:	bd30      	pop	{r4, r5, pc}

10012bb4 <__gnu_thumb1_case_sqi>:
10012bb4:	b402      	push	{r1}
10012bb6:	4671      	mov	r1, lr
10012bb8:	0849      	lsrs	r1, r1, #1
10012bba:	0049      	lsls	r1, r1, #1
10012bbc:	5609      	ldrsb	r1, [r1, r0]
10012bbe:	0049      	lsls	r1, r1, #1
10012bc0:	448e      	add	lr, r1
10012bc2:	bc02      	pop	{r1}
10012bc4:	4770      	bx	lr
10012bc6:	46c0      	nop			; (mov r8, r8)

10012bc8 <__gnu_thumb1_case_uqi>:
10012bc8:	b402      	push	{r1}
10012bca:	4671      	mov	r1, lr
10012bcc:	0849      	lsrs	r1, r1, #1
10012bce:	0049      	lsls	r1, r1, #1
10012bd0:	5c09      	ldrb	r1, [r1, r0]
10012bd2:	0049      	lsls	r1, r1, #1
10012bd4:	448e      	add	lr, r1
10012bd6:	bc02      	pop	{r1}
10012bd8:	4770      	bx	lr
10012bda:	46c0      	nop			; (mov r8, r8)

10012bdc <__aeabi_uidiv>:
10012bdc:	2200      	movs	r2, #0
10012bde:	0843      	lsrs	r3, r0, #1
10012be0:	428b      	cmp	r3, r1
10012be2:	d374      	bcc.n	10012cce <__aeabi_uidiv+0xf2>
10012be4:	0903      	lsrs	r3, r0, #4
10012be6:	428b      	cmp	r3, r1
10012be8:	d35f      	bcc.n	10012caa <__aeabi_uidiv+0xce>
10012bea:	0a03      	lsrs	r3, r0, #8
10012bec:	428b      	cmp	r3, r1
10012bee:	d344      	bcc.n	10012c7a <__aeabi_uidiv+0x9e>
10012bf0:	0b03      	lsrs	r3, r0, #12
10012bf2:	428b      	cmp	r3, r1
10012bf4:	d328      	bcc.n	10012c48 <__aeabi_uidiv+0x6c>
10012bf6:	0c03      	lsrs	r3, r0, #16
10012bf8:	428b      	cmp	r3, r1
10012bfa:	d30d      	bcc.n	10012c18 <__aeabi_uidiv+0x3c>
10012bfc:	22ff      	movs	r2, #255	; 0xff
10012bfe:	0209      	lsls	r1, r1, #8
10012c00:	ba12      	rev	r2, r2
10012c02:	0c03      	lsrs	r3, r0, #16
10012c04:	428b      	cmp	r3, r1
10012c06:	d302      	bcc.n	10012c0e <__aeabi_uidiv+0x32>
10012c08:	1212      	asrs	r2, r2, #8
10012c0a:	0209      	lsls	r1, r1, #8
10012c0c:	d065      	beq.n	10012cda <__aeabi_uidiv+0xfe>
10012c0e:	0b03      	lsrs	r3, r0, #12
10012c10:	428b      	cmp	r3, r1
10012c12:	d319      	bcc.n	10012c48 <__aeabi_uidiv+0x6c>
10012c14:	e000      	b.n	10012c18 <__aeabi_uidiv+0x3c>
10012c16:	0a09      	lsrs	r1, r1, #8
10012c18:	0bc3      	lsrs	r3, r0, #15
10012c1a:	428b      	cmp	r3, r1
10012c1c:	d301      	bcc.n	10012c22 <__aeabi_uidiv+0x46>
10012c1e:	03cb      	lsls	r3, r1, #15
10012c20:	1ac0      	subs	r0, r0, r3
10012c22:	4152      	adcs	r2, r2
10012c24:	0b83      	lsrs	r3, r0, #14
10012c26:	428b      	cmp	r3, r1
10012c28:	d301      	bcc.n	10012c2e <__aeabi_uidiv+0x52>
10012c2a:	038b      	lsls	r3, r1, #14
10012c2c:	1ac0      	subs	r0, r0, r3
10012c2e:	4152      	adcs	r2, r2
10012c30:	0b43      	lsrs	r3, r0, #13
10012c32:	428b      	cmp	r3, r1
10012c34:	d301      	bcc.n	10012c3a <__aeabi_uidiv+0x5e>
10012c36:	034b      	lsls	r3, r1, #13
10012c38:	1ac0      	subs	r0, r0, r3
10012c3a:	4152      	adcs	r2, r2
10012c3c:	0b03      	lsrs	r3, r0, #12
10012c3e:	428b      	cmp	r3, r1
10012c40:	d301      	bcc.n	10012c46 <__aeabi_uidiv+0x6a>
10012c42:	030b      	lsls	r3, r1, #12
10012c44:	1ac0      	subs	r0, r0, r3
10012c46:	4152      	adcs	r2, r2
10012c48:	0ac3      	lsrs	r3, r0, #11
10012c4a:	428b      	cmp	r3, r1
10012c4c:	d301      	bcc.n	10012c52 <__aeabi_uidiv+0x76>
10012c4e:	02cb      	lsls	r3, r1, #11
10012c50:	1ac0      	subs	r0, r0, r3
10012c52:	4152      	adcs	r2, r2
10012c54:	0a83      	lsrs	r3, r0, #10
10012c56:	428b      	cmp	r3, r1
10012c58:	d301      	bcc.n	10012c5e <__aeabi_uidiv+0x82>
10012c5a:	028b      	lsls	r3, r1, #10
10012c5c:	1ac0      	subs	r0, r0, r3
10012c5e:	4152      	adcs	r2, r2
10012c60:	0a43      	lsrs	r3, r0, #9
10012c62:	428b      	cmp	r3, r1
10012c64:	d301      	bcc.n	10012c6a <__aeabi_uidiv+0x8e>
10012c66:	024b      	lsls	r3, r1, #9
10012c68:	1ac0      	subs	r0, r0, r3
10012c6a:	4152      	adcs	r2, r2
10012c6c:	0a03      	lsrs	r3, r0, #8
10012c6e:	428b      	cmp	r3, r1
10012c70:	d301      	bcc.n	10012c76 <__aeabi_uidiv+0x9a>
10012c72:	020b      	lsls	r3, r1, #8
10012c74:	1ac0      	subs	r0, r0, r3
10012c76:	4152      	adcs	r2, r2
10012c78:	d2cd      	bcs.n	10012c16 <__aeabi_uidiv+0x3a>
10012c7a:	09c3      	lsrs	r3, r0, #7
10012c7c:	428b      	cmp	r3, r1
10012c7e:	d301      	bcc.n	10012c84 <__aeabi_uidiv+0xa8>
10012c80:	01cb      	lsls	r3, r1, #7
10012c82:	1ac0      	subs	r0, r0, r3
10012c84:	4152      	adcs	r2, r2
10012c86:	0983      	lsrs	r3, r0, #6
10012c88:	428b      	cmp	r3, r1
10012c8a:	d301      	bcc.n	10012c90 <__aeabi_uidiv+0xb4>
10012c8c:	018b      	lsls	r3, r1, #6
10012c8e:	1ac0      	subs	r0, r0, r3
10012c90:	4152      	adcs	r2, r2
10012c92:	0943      	lsrs	r3, r0, #5
10012c94:	428b      	cmp	r3, r1
10012c96:	d301      	bcc.n	10012c9c <__aeabi_uidiv+0xc0>
10012c98:	014b      	lsls	r3, r1, #5
10012c9a:	1ac0      	subs	r0, r0, r3
10012c9c:	4152      	adcs	r2, r2
10012c9e:	0903      	lsrs	r3, r0, #4
10012ca0:	428b      	cmp	r3, r1
10012ca2:	d301      	bcc.n	10012ca8 <__aeabi_uidiv+0xcc>
10012ca4:	010b      	lsls	r3, r1, #4
10012ca6:	1ac0      	subs	r0, r0, r3
10012ca8:	4152      	adcs	r2, r2
10012caa:	08c3      	lsrs	r3, r0, #3
10012cac:	428b      	cmp	r3, r1
10012cae:	d301      	bcc.n	10012cb4 <__aeabi_uidiv+0xd8>
10012cb0:	00cb      	lsls	r3, r1, #3
10012cb2:	1ac0      	subs	r0, r0, r3
10012cb4:	4152      	adcs	r2, r2
10012cb6:	0883      	lsrs	r3, r0, #2
10012cb8:	428b      	cmp	r3, r1
10012cba:	d301      	bcc.n	10012cc0 <__aeabi_uidiv+0xe4>
10012cbc:	008b      	lsls	r3, r1, #2
10012cbe:	1ac0      	subs	r0, r0, r3
10012cc0:	4152      	adcs	r2, r2
10012cc2:	0843      	lsrs	r3, r0, #1
10012cc4:	428b      	cmp	r3, r1
10012cc6:	d301      	bcc.n	10012ccc <__aeabi_uidiv+0xf0>
10012cc8:	004b      	lsls	r3, r1, #1
10012cca:	1ac0      	subs	r0, r0, r3
10012ccc:	4152      	adcs	r2, r2
10012cce:	1a41      	subs	r1, r0, r1
10012cd0:	d200      	bcs.n	10012cd4 <__aeabi_uidiv+0xf8>
10012cd2:	4601      	mov	r1, r0
10012cd4:	4152      	adcs	r2, r2
10012cd6:	4610      	mov	r0, r2
10012cd8:	4770      	bx	lr
10012cda:	e7ff      	b.n	10012cdc <__aeabi_uidiv+0x100>
10012cdc:	b501      	push	{r0, lr}
10012cde:	2000      	movs	r0, #0
10012ce0:	f000 f8f0 	bl	10012ec4 <__aeabi_idiv0>
10012ce4:	bd02      	pop	{r1, pc}
10012ce6:	46c0      	nop			; (mov r8, r8)

10012ce8 <__aeabi_uidivmod>:
10012ce8:	2900      	cmp	r1, #0
10012cea:	d0f7      	beq.n	10012cdc <__aeabi_uidiv+0x100>
10012cec:	e776      	b.n	10012bdc <__aeabi_uidiv>
10012cee:	4770      	bx	lr

10012cf0 <__aeabi_idiv>:
10012cf0:	4603      	mov	r3, r0
10012cf2:	430b      	orrs	r3, r1
10012cf4:	d47f      	bmi.n	10012df6 <__aeabi_idiv+0x106>
10012cf6:	2200      	movs	r2, #0
10012cf8:	0843      	lsrs	r3, r0, #1
10012cfa:	428b      	cmp	r3, r1
10012cfc:	d374      	bcc.n	10012de8 <__aeabi_idiv+0xf8>
10012cfe:	0903      	lsrs	r3, r0, #4
10012d00:	428b      	cmp	r3, r1
10012d02:	d35f      	bcc.n	10012dc4 <__aeabi_idiv+0xd4>
10012d04:	0a03      	lsrs	r3, r0, #8
10012d06:	428b      	cmp	r3, r1
10012d08:	d344      	bcc.n	10012d94 <__aeabi_idiv+0xa4>
10012d0a:	0b03      	lsrs	r3, r0, #12
10012d0c:	428b      	cmp	r3, r1
10012d0e:	d328      	bcc.n	10012d62 <__aeabi_idiv+0x72>
10012d10:	0c03      	lsrs	r3, r0, #16
10012d12:	428b      	cmp	r3, r1
10012d14:	d30d      	bcc.n	10012d32 <__aeabi_idiv+0x42>
10012d16:	22ff      	movs	r2, #255	; 0xff
10012d18:	0209      	lsls	r1, r1, #8
10012d1a:	ba12      	rev	r2, r2
10012d1c:	0c03      	lsrs	r3, r0, #16
10012d1e:	428b      	cmp	r3, r1
10012d20:	d302      	bcc.n	10012d28 <__aeabi_idiv+0x38>
10012d22:	1212      	asrs	r2, r2, #8
10012d24:	0209      	lsls	r1, r1, #8
10012d26:	d065      	beq.n	10012df4 <__aeabi_idiv+0x104>
10012d28:	0b03      	lsrs	r3, r0, #12
10012d2a:	428b      	cmp	r3, r1
10012d2c:	d319      	bcc.n	10012d62 <__aeabi_idiv+0x72>
10012d2e:	e000      	b.n	10012d32 <__aeabi_idiv+0x42>
10012d30:	0a09      	lsrs	r1, r1, #8
10012d32:	0bc3      	lsrs	r3, r0, #15
10012d34:	428b      	cmp	r3, r1
10012d36:	d301      	bcc.n	10012d3c <__aeabi_idiv+0x4c>
10012d38:	03cb      	lsls	r3, r1, #15
10012d3a:	1ac0      	subs	r0, r0, r3
10012d3c:	4152      	adcs	r2, r2
10012d3e:	0b83      	lsrs	r3, r0, #14
10012d40:	428b      	cmp	r3, r1
10012d42:	d301      	bcc.n	10012d48 <__aeabi_idiv+0x58>
10012d44:	038b      	lsls	r3, r1, #14
10012d46:	1ac0      	subs	r0, r0, r3
10012d48:	4152      	adcs	r2, r2
10012d4a:	0b43      	lsrs	r3, r0, #13
10012d4c:	428b      	cmp	r3, r1
10012d4e:	d301      	bcc.n	10012d54 <__aeabi_idiv+0x64>
10012d50:	034b      	lsls	r3, r1, #13
10012d52:	1ac0      	subs	r0, r0, r3
10012d54:	4152      	adcs	r2, r2
10012d56:	0b03      	lsrs	r3, r0, #12
10012d58:	428b      	cmp	r3, r1
10012d5a:	d301      	bcc.n	10012d60 <__aeabi_idiv+0x70>
10012d5c:	030b      	lsls	r3, r1, #12
10012d5e:	1ac0      	subs	r0, r0, r3
10012d60:	4152      	adcs	r2, r2
10012d62:	0ac3      	lsrs	r3, r0, #11
10012d64:	428b      	cmp	r3, r1
10012d66:	d301      	bcc.n	10012d6c <__aeabi_idiv+0x7c>
10012d68:	02cb      	lsls	r3, r1, #11
10012d6a:	1ac0      	subs	r0, r0, r3
10012d6c:	4152      	adcs	r2, r2
10012d6e:	0a83      	lsrs	r3, r0, #10
10012d70:	428b      	cmp	r3, r1
10012d72:	d301      	bcc.n	10012d78 <__aeabi_idiv+0x88>
10012d74:	028b      	lsls	r3, r1, #10
10012d76:	1ac0      	subs	r0, r0, r3
10012d78:	4152      	adcs	r2, r2
10012d7a:	0a43      	lsrs	r3, r0, #9
10012d7c:	428b      	cmp	r3, r1
10012d7e:	d301      	bcc.n	10012d84 <__aeabi_idiv+0x94>
10012d80:	024b      	lsls	r3, r1, #9
10012d82:	1ac0      	subs	r0, r0, r3
10012d84:	4152      	adcs	r2, r2
10012d86:	0a03      	lsrs	r3, r0, #8
10012d88:	428b      	cmp	r3, r1
10012d8a:	d301      	bcc.n	10012d90 <__aeabi_idiv+0xa0>
10012d8c:	020b      	lsls	r3, r1, #8
10012d8e:	1ac0      	subs	r0, r0, r3
10012d90:	4152      	adcs	r2, r2
10012d92:	d2cd      	bcs.n	10012d30 <__aeabi_idiv+0x40>
10012d94:	09c3      	lsrs	r3, r0, #7
10012d96:	428b      	cmp	r3, r1
10012d98:	d301      	bcc.n	10012d9e <__aeabi_idiv+0xae>
10012d9a:	01cb      	lsls	r3, r1, #7
10012d9c:	1ac0      	subs	r0, r0, r3
10012d9e:	4152      	adcs	r2, r2
10012da0:	0983      	lsrs	r3, r0, #6
10012da2:	428b      	cmp	r3, r1
10012da4:	d301      	bcc.n	10012daa <__aeabi_idiv+0xba>
10012da6:	018b      	lsls	r3, r1, #6
10012da8:	1ac0      	subs	r0, r0, r3
10012daa:	4152      	adcs	r2, r2
10012dac:	0943      	lsrs	r3, r0, #5
10012dae:	428b      	cmp	r3, r1
10012db0:	d301      	bcc.n	10012db6 <__aeabi_idiv+0xc6>
10012db2:	014b      	lsls	r3, r1, #5
10012db4:	1ac0      	subs	r0, r0, r3
10012db6:	4152      	adcs	r2, r2
10012db8:	0903      	lsrs	r3, r0, #4
10012dba:	428b      	cmp	r3, r1
10012dbc:	d301      	bcc.n	10012dc2 <__aeabi_idiv+0xd2>
10012dbe:	010b      	lsls	r3, r1, #4
10012dc0:	1ac0      	subs	r0, r0, r3
10012dc2:	4152      	adcs	r2, r2
10012dc4:	08c3      	lsrs	r3, r0, #3
10012dc6:	428b      	cmp	r3, r1
10012dc8:	d301      	bcc.n	10012dce <__aeabi_idiv+0xde>
10012dca:	00cb      	lsls	r3, r1, #3
10012dcc:	1ac0      	subs	r0, r0, r3
10012dce:	4152      	adcs	r2, r2
10012dd0:	0883      	lsrs	r3, r0, #2
10012dd2:	428b      	cmp	r3, r1
10012dd4:	d301      	bcc.n	10012dda <__aeabi_idiv+0xea>
10012dd6:	008b      	lsls	r3, r1, #2
10012dd8:	1ac0      	subs	r0, r0, r3
10012dda:	4152      	adcs	r2, r2
10012ddc:	0843      	lsrs	r3, r0, #1
10012dde:	428b      	cmp	r3, r1
10012de0:	d301      	bcc.n	10012de6 <__aeabi_idiv+0xf6>
10012de2:	004b      	lsls	r3, r1, #1
10012de4:	1ac0      	subs	r0, r0, r3
10012de6:	4152      	adcs	r2, r2
10012de8:	1a41      	subs	r1, r0, r1
10012dea:	d200      	bcs.n	10012dee <__aeabi_idiv+0xfe>
10012dec:	4601      	mov	r1, r0
10012dee:	4152      	adcs	r2, r2
10012df0:	4610      	mov	r0, r2
10012df2:	4770      	bx	lr
10012df4:	e05d      	b.n	10012eb2 <__aeabi_idiv+0x1c2>
10012df6:	0fca      	lsrs	r2, r1, #31
10012df8:	d000      	beq.n	10012dfc <__aeabi_idiv+0x10c>
10012dfa:	4249      	negs	r1, r1
10012dfc:	1003      	asrs	r3, r0, #32
10012dfe:	d300      	bcc.n	10012e02 <__aeabi_idiv+0x112>
10012e00:	4240      	negs	r0, r0
10012e02:	4053      	eors	r3, r2
10012e04:	2200      	movs	r2, #0
10012e06:	469c      	mov	ip, r3
10012e08:	0903      	lsrs	r3, r0, #4
10012e0a:	428b      	cmp	r3, r1
10012e0c:	d32d      	bcc.n	10012e6a <__aeabi_idiv+0x17a>
10012e0e:	0a03      	lsrs	r3, r0, #8
10012e10:	428b      	cmp	r3, r1
10012e12:	d312      	bcc.n	10012e3a <__aeabi_idiv+0x14a>
10012e14:	22fc      	movs	r2, #252	; 0xfc
10012e16:	0189      	lsls	r1, r1, #6
10012e18:	ba12      	rev	r2, r2
10012e1a:	0a03      	lsrs	r3, r0, #8
10012e1c:	428b      	cmp	r3, r1
10012e1e:	d30c      	bcc.n	10012e3a <__aeabi_idiv+0x14a>
10012e20:	0189      	lsls	r1, r1, #6
10012e22:	1192      	asrs	r2, r2, #6
10012e24:	428b      	cmp	r3, r1
10012e26:	d308      	bcc.n	10012e3a <__aeabi_idiv+0x14a>
10012e28:	0189      	lsls	r1, r1, #6
10012e2a:	1192      	asrs	r2, r2, #6
10012e2c:	428b      	cmp	r3, r1
10012e2e:	d304      	bcc.n	10012e3a <__aeabi_idiv+0x14a>
10012e30:	0189      	lsls	r1, r1, #6
10012e32:	d03a      	beq.n	10012eaa <__aeabi_idiv+0x1ba>
10012e34:	1192      	asrs	r2, r2, #6
10012e36:	e000      	b.n	10012e3a <__aeabi_idiv+0x14a>
10012e38:	0989      	lsrs	r1, r1, #6
10012e3a:	09c3      	lsrs	r3, r0, #7
10012e3c:	428b      	cmp	r3, r1
10012e3e:	d301      	bcc.n	10012e44 <__aeabi_idiv+0x154>
10012e40:	01cb      	lsls	r3, r1, #7
10012e42:	1ac0      	subs	r0, r0, r3
10012e44:	4152      	adcs	r2, r2
10012e46:	0983      	lsrs	r3, r0, #6
10012e48:	428b      	cmp	r3, r1
10012e4a:	d301      	bcc.n	10012e50 <__aeabi_idiv+0x160>
10012e4c:	018b      	lsls	r3, r1, #6
10012e4e:	1ac0      	subs	r0, r0, r3
10012e50:	4152      	adcs	r2, r2
10012e52:	0943      	lsrs	r3, r0, #5
10012e54:	428b      	cmp	r3, r1
10012e56:	d301      	bcc.n	10012e5c <__aeabi_idiv+0x16c>
10012e58:	014b      	lsls	r3, r1, #5
10012e5a:	1ac0      	subs	r0, r0, r3
10012e5c:	4152      	adcs	r2, r2
10012e5e:	0903      	lsrs	r3, r0, #4
10012e60:	428b      	cmp	r3, r1
10012e62:	d301      	bcc.n	10012e68 <__aeabi_idiv+0x178>
10012e64:	010b      	lsls	r3, r1, #4
10012e66:	1ac0      	subs	r0, r0, r3
10012e68:	4152      	adcs	r2, r2
10012e6a:	08c3      	lsrs	r3, r0, #3
10012e6c:	428b      	cmp	r3, r1
10012e6e:	d301      	bcc.n	10012e74 <__aeabi_idiv+0x184>
10012e70:	00cb      	lsls	r3, r1, #3
10012e72:	1ac0      	subs	r0, r0, r3
10012e74:	4152      	adcs	r2, r2
10012e76:	0883      	lsrs	r3, r0, #2
10012e78:	428b      	cmp	r3, r1
10012e7a:	d301      	bcc.n	10012e80 <__aeabi_idiv+0x190>
10012e7c:	008b      	lsls	r3, r1, #2
10012e7e:	1ac0      	subs	r0, r0, r3
10012e80:	4152      	adcs	r2, r2
10012e82:	d2d9      	bcs.n	10012e38 <__aeabi_idiv+0x148>
10012e84:	0843      	lsrs	r3, r0, #1
10012e86:	428b      	cmp	r3, r1
10012e88:	d301      	bcc.n	10012e8e <__aeabi_idiv+0x19e>
10012e8a:	004b      	lsls	r3, r1, #1
10012e8c:	1ac0      	subs	r0, r0, r3
10012e8e:	4152      	adcs	r2, r2
10012e90:	1a41      	subs	r1, r0, r1
10012e92:	d200      	bcs.n	10012e96 <__aeabi_idiv+0x1a6>
10012e94:	4601      	mov	r1, r0
10012e96:	4663      	mov	r3, ip
10012e98:	4152      	adcs	r2, r2
10012e9a:	105b      	asrs	r3, r3, #1
10012e9c:	4610      	mov	r0, r2
10012e9e:	d301      	bcc.n	10012ea4 <__aeabi_idiv+0x1b4>
10012ea0:	4240      	negs	r0, r0
10012ea2:	2b00      	cmp	r3, #0
10012ea4:	d500      	bpl.n	10012ea8 <__aeabi_idiv+0x1b8>
10012ea6:	4249      	negs	r1, r1
10012ea8:	4770      	bx	lr
10012eaa:	4663      	mov	r3, ip
10012eac:	105b      	asrs	r3, r3, #1
10012eae:	d300      	bcc.n	10012eb2 <__aeabi_idiv+0x1c2>
10012eb0:	4240      	negs	r0, r0
10012eb2:	b501      	push	{r0, lr}
10012eb4:	2000      	movs	r0, #0
10012eb6:	f000 f805 	bl	10012ec4 <__aeabi_idiv0>
10012eba:	bd02      	pop	{r1, pc}

10012ebc <__aeabi_idivmod>:
10012ebc:	2900      	cmp	r1, #0
10012ebe:	d0f8      	beq.n	10012eb2 <__aeabi_idiv+0x1c2>
10012ec0:	e716      	b.n	10012cf0 <__aeabi_idiv>
10012ec2:	4770      	bx	lr

10012ec4 <__aeabi_idiv0>:
10012ec4:	4770      	bx	lr
10012ec6:	46c0      	nop			; (mov r8, r8)

10012ec8 <__aeabi_cdrcmple>:
10012ec8:	4684      	mov	ip, r0
10012eca:	1c10      	adds	r0, r2, #0
10012ecc:	4662      	mov	r2, ip
10012ece:	468c      	mov	ip, r1
10012ed0:	1c19      	adds	r1, r3, #0
10012ed2:	4663      	mov	r3, ip
10012ed4:	e000      	b.n	10012ed8 <__aeabi_cdcmpeq>
10012ed6:	46c0      	nop			; (mov r8, r8)

10012ed8 <__aeabi_cdcmpeq>:
10012ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012eda:	f001 fcc1 	bl	10014860 <__ledf2>
10012ede:	2800      	cmp	r0, #0
10012ee0:	d401      	bmi.n	10012ee6 <__aeabi_cdcmpeq+0xe>
10012ee2:	2100      	movs	r1, #0
10012ee4:	42c8      	cmn	r0, r1
10012ee6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012ee8 <__aeabi_dcmpeq>:
10012ee8:	b510      	push	{r4, lr}
10012eea:	f001 fc15 	bl	10014718 <__eqdf2>
10012eee:	4240      	negs	r0, r0
10012ef0:	3001      	adds	r0, #1
10012ef2:	bd10      	pop	{r4, pc}

10012ef4 <__aeabi_dcmplt>:
10012ef4:	b510      	push	{r4, lr}
10012ef6:	f001 fcb3 	bl	10014860 <__ledf2>
10012efa:	2800      	cmp	r0, #0
10012efc:	db01      	blt.n	10012f02 <__aeabi_dcmplt+0xe>
10012efe:	2000      	movs	r0, #0
10012f00:	bd10      	pop	{r4, pc}
10012f02:	2001      	movs	r0, #1
10012f04:	bd10      	pop	{r4, pc}
10012f06:	46c0      	nop			; (mov r8, r8)

10012f08 <__aeabi_dcmple>:
10012f08:	b510      	push	{r4, lr}
10012f0a:	f001 fca9 	bl	10014860 <__ledf2>
10012f0e:	2800      	cmp	r0, #0
10012f10:	dd01      	ble.n	10012f16 <__aeabi_dcmple+0xe>
10012f12:	2000      	movs	r0, #0
10012f14:	bd10      	pop	{r4, pc}
10012f16:	2001      	movs	r0, #1
10012f18:	bd10      	pop	{r4, pc}
10012f1a:	46c0      	nop			; (mov r8, r8)

10012f1c <__aeabi_dcmpgt>:
10012f1c:	b510      	push	{r4, lr}
10012f1e:	f001 fc3b 	bl	10014798 <__gedf2>
10012f22:	2800      	cmp	r0, #0
10012f24:	dc01      	bgt.n	10012f2a <__aeabi_dcmpgt+0xe>
10012f26:	2000      	movs	r0, #0
10012f28:	bd10      	pop	{r4, pc}
10012f2a:	2001      	movs	r0, #1
10012f2c:	bd10      	pop	{r4, pc}
10012f2e:	46c0      	nop			; (mov r8, r8)

10012f30 <__aeabi_dcmpge>:
10012f30:	b510      	push	{r4, lr}
10012f32:	f001 fc31 	bl	10014798 <__gedf2>
10012f36:	2800      	cmp	r0, #0
10012f38:	da01      	bge.n	10012f3e <__aeabi_dcmpge+0xe>
10012f3a:	2000      	movs	r0, #0
10012f3c:	bd10      	pop	{r4, pc}
10012f3e:	2001      	movs	r0, #1
10012f40:	bd10      	pop	{r4, pc}
10012f42:	46c0      	nop			; (mov r8, r8)

10012f44 <__aeabi_cfrcmple>:
10012f44:	4684      	mov	ip, r0
10012f46:	1c08      	adds	r0, r1, #0
10012f48:	4661      	mov	r1, ip
10012f4a:	e7ff      	b.n	10012f4c <__aeabi_cfcmpeq>

10012f4c <__aeabi_cfcmpeq>:
10012f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012f4e:	f000 fa1b 	bl	10013388 <__lesf2>
10012f52:	2800      	cmp	r0, #0
10012f54:	d401      	bmi.n	10012f5a <__aeabi_cfcmpeq+0xe>
10012f56:	2100      	movs	r1, #0
10012f58:	42c8      	cmn	r0, r1
10012f5a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012f5c <__aeabi_fcmpeq>:
10012f5c:	b510      	push	{r4, lr}
10012f5e:	f000 f9a7 	bl	100132b0 <__eqsf2>
10012f62:	4240      	negs	r0, r0
10012f64:	3001      	adds	r0, #1
10012f66:	bd10      	pop	{r4, pc}

10012f68 <__aeabi_fcmplt>:
10012f68:	b510      	push	{r4, lr}
10012f6a:	f000 fa0d 	bl	10013388 <__lesf2>
10012f6e:	2800      	cmp	r0, #0
10012f70:	db01      	blt.n	10012f76 <__aeabi_fcmplt+0xe>
10012f72:	2000      	movs	r0, #0
10012f74:	bd10      	pop	{r4, pc}
10012f76:	2001      	movs	r0, #1
10012f78:	bd10      	pop	{r4, pc}
10012f7a:	46c0      	nop			; (mov r8, r8)

10012f7c <__aeabi_fcmple>:
10012f7c:	b510      	push	{r4, lr}
10012f7e:	f000 fa03 	bl	10013388 <__lesf2>
10012f82:	2800      	cmp	r0, #0
10012f84:	dd01      	ble.n	10012f8a <__aeabi_fcmple+0xe>
10012f86:	2000      	movs	r0, #0
10012f88:	bd10      	pop	{r4, pc}
10012f8a:	2001      	movs	r0, #1
10012f8c:	bd10      	pop	{r4, pc}
10012f8e:	46c0      	nop			; (mov r8, r8)

10012f90 <__aeabi_fcmpgt>:
10012f90:	b510      	push	{r4, lr}
10012f92:	f000 f9b5 	bl	10013300 <__gesf2>
10012f96:	2800      	cmp	r0, #0
10012f98:	dc01      	bgt.n	10012f9e <__aeabi_fcmpgt+0xe>
10012f9a:	2000      	movs	r0, #0
10012f9c:	bd10      	pop	{r4, pc}
10012f9e:	2001      	movs	r0, #1
10012fa0:	bd10      	pop	{r4, pc}
10012fa2:	46c0      	nop			; (mov r8, r8)

10012fa4 <__aeabi_fcmpge>:
10012fa4:	b510      	push	{r4, lr}
10012fa6:	f000 f9ab 	bl	10013300 <__gesf2>
10012faa:	2800      	cmp	r0, #0
10012fac:	da01      	bge.n	10012fb2 <__aeabi_fcmpge+0xe>
10012fae:	2000      	movs	r0, #0
10012fb0:	bd10      	pop	{r4, pc}
10012fb2:	2001      	movs	r0, #1
10012fb4:	bd10      	pop	{r4, pc}
10012fb6:	46c0      	nop			; (mov r8, r8)

10012fb8 <__aeabi_lmul>:
10012fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fba:	464f      	mov	r7, r9
10012fbc:	4646      	mov	r6, r8
10012fbe:	b4c0      	push	{r6, r7}
10012fc0:	0416      	lsls	r6, r2, #16
10012fc2:	0c36      	lsrs	r6, r6, #16
10012fc4:	4699      	mov	r9, r3
10012fc6:	0033      	movs	r3, r6
10012fc8:	0405      	lsls	r5, r0, #16
10012fca:	0c2c      	lsrs	r4, r5, #16
10012fcc:	0c07      	lsrs	r7, r0, #16
10012fce:	0c15      	lsrs	r5, r2, #16
10012fd0:	4363      	muls	r3, r4
10012fd2:	437e      	muls	r6, r7
10012fd4:	436f      	muls	r7, r5
10012fd6:	4365      	muls	r5, r4
10012fd8:	0c1c      	lsrs	r4, r3, #16
10012fda:	19ad      	adds	r5, r5, r6
10012fdc:	1964      	adds	r4, r4, r5
10012fde:	469c      	mov	ip, r3
10012fe0:	42a6      	cmp	r6, r4
10012fe2:	d903      	bls.n	10012fec <__aeabi_lmul+0x34>
10012fe4:	2380      	movs	r3, #128	; 0x80
10012fe6:	025b      	lsls	r3, r3, #9
10012fe8:	4698      	mov	r8, r3
10012fea:	4447      	add	r7, r8
10012fec:	4663      	mov	r3, ip
10012fee:	0c25      	lsrs	r5, r4, #16
10012ff0:	19ef      	adds	r7, r5, r7
10012ff2:	041d      	lsls	r5, r3, #16
10012ff4:	464b      	mov	r3, r9
10012ff6:	434a      	muls	r2, r1
10012ff8:	4343      	muls	r3, r0
10012ffa:	0c2d      	lsrs	r5, r5, #16
10012ffc:	0424      	lsls	r4, r4, #16
10012ffe:	1964      	adds	r4, r4, r5
10013000:	1899      	adds	r1, r3, r2
10013002:	19c9      	adds	r1, r1, r7
10013004:	0020      	movs	r0, r4
10013006:	bc0c      	pop	{r2, r3}
10013008:	4690      	mov	r8, r2
1001300a:	4699      	mov	r9, r3
1001300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001300e:	46c0      	nop			; (mov r8, r8)

10013010 <__aeabi_f2uiz>:
10013010:	219e      	movs	r1, #158	; 0x9e
10013012:	b510      	push	{r4, lr}
10013014:	05c9      	lsls	r1, r1, #23
10013016:	1c04      	adds	r4, r0, #0
10013018:	f7ff ffc4 	bl	10012fa4 <__aeabi_fcmpge>
1001301c:	2800      	cmp	r0, #0
1001301e:	d103      	bne.n	10013028 <__aeabi_f2uiz+0x18>
10013020:	1c20      	adds	r0, r4, #0
10013022:	f000 fc8f 	bl	10013944 <__aeabi_f2iz>
10013026:	bd10      	pop	{r4, pc}
10013028:	219e      	movs	r1, #158	; 0x9e
1001302a:	1c20      	adds	r0, r4, #0
1001302c:	05c9      	lsls	r1, r1, #23
1001302e:	f000 fb03 	bl	10013638 <__aeabi_fsub>
10013032:	f000 fc87 	bl	10013944 <__aeabi_f2iz>
10013036:	2380      	movs	r3, #128	; 0x80
10013038:	061b      	lsls	r3, r3, #24
1001303a:	469c      	mov	ip, r3
1001303c:	4460      	add	r0, ip
1001303e:	e7f2      	b.n	10013026 <__aeabi_f2uiz+0x16>

10013040 <__aeabi_d2uiz>:
10013040:	b570      	push	{r4, r5, r6, lr}
10013042:	2200      	movs	r2, #0
10013044:	4b0c      	ldr	r3, [pc, #48]	; (10013078 <__aeabi_d2uiz+0x38>)
10013046:	0004      	movs	r4, r0
10013048:	000d      	movs	r5, r1
1001304a:	f7ff ff71 	bl	10012f30 <__aeabi_dcmpge>
1001304e:	2800      	cmp	r0, #0
10013050:	d104      	bne.n	1001305c <__aeabi_d2uiz+0x1c>
10013052:	0020      	movs	r0, r4
10013054:	0029      	movs	r1, r5
10013056:	f002 fa5b 	bl	10015510 <__aeabi_d2iz>
1001305a:	bd70      	pop	{r4, r5, r6, pc}
1001305c:	4b06      	ldr	r3, [pc, #24]	; (10013078 <__aeabi_d2uiz+0x38>)
1001305e:	2200      	movs	r2, #0
10013060:	0020      	movs	r0, r4
10013062:	0029      	movs	r1, r5
10013064:	f001 fee0 	bl	10014e28 <__aeabi_dsub>
10013068:	f002 fa52 	bl	10015510 <__aeabi_d2iz>
1001306c:	2380      	movs	r3, #128	; 0x80
1001306e:	061b      	lsls	r3, r3, #24
10013070:	469c      	mov	ip, r3
10013072:	4460      	add	r0, ip
10013074:	e7f1      	b.n	1001305a <__aeabi_d2uiz+0x1a>
10013076:	46c0      	nop			; (mov r8, r8)
10013078:	41e00000 	.word	0x41e00000

1001307c <__aeabi_fdiv>:
1001307c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001307e:	4656      	mov	r6, sl
10013080:	4644      	mov	r4, r8
10013082:	465f      	mov	r7, fp
10013084:	464d      	mov	r5, r9
10013086:	b4f0      	push	{r4, r5, r6, r7}
10013088:	0244      	lsls	r4, r0, #9
1001308a:	0046      	lsls	r6, r0, #1
1001308c:	0fc7      	lsrs	r7, r0, #31
1001308e:	b083      	sub	sp, #12
10013090:	4688      	mov	r8, r1
10013092:	0a65      	lsrs	r5, r4, #9
10013094:	0e36      	lsrs	r6, r6, #24
10013096:	46ba      	mov	sl, r7
10013098:	d03d      	beq.n	10013116 <__aeabi_fdiv+0x9a>
1001309a:	2eff      	cmp	r6, #255	; 0xff
1001309c:	d022      	beq.n	100130e4 <__aeabi_fdiv+0x68>
1001309e:	2300      	movs	r3, #0
100130a0:	00ec      	lsls	r4, r5, #3
100130a2:	2580      	movs	r5, #128	; 0x80
100130a4:	4699      	mov	r9, r3
100130a6:	469b      	mov	fp, r3
100130a8:	04ed      	lsls	r5, r5, #19
100130aa:	4325      	orrs	r5, r4
100130ac:	3e7f      	subs	r6, #127	; 0x7f
100130ae:	4643      	mov	r3, r8
100130b0:	025c      	lsls	r4, r3, #9
100130b2:	0058      	lsls	r0, r3, #1
100130b4:	0fdb      	lsrs	r3, r3, #31
100130b6:	0a64      	lsrs	r4, r4, #9
100130b8:	0e00      	lsrs	r0, r0, #24
100130ba:	4698      	mov	r8, r3
100130bc:	d036      	beq.n	1001312c <__aeabi_fdiv+0xb0>
100130be:	28ff      	cmp	r0, #255	; 0xff
100130c0:	d030      	beq.n	10013124 <__aeabi_fdiv+0xa8>
100130c2:	2380      	movs	r3, #128	; 0x80
100130c4:	2100      	movs	r1, #0
100130c6:	00e4      	lsls	r4, r4, #3
100130c8:	04db      	lsls	r3, r3, #19
100130ca:	431c      	orrs	r4, r3
100130cc:	387f      	subs	r0, #127	; 0x7f
100130ce:	1a30      	subs	r0, r6, r0
100130d0:	9001      	str	r0, [sp, #4]
100130d2:	4648      	mov	r0, r9
100130d4:	4642      	mov	r2, r8
100130d6:	4308      	orrs	r0, r1
100130d8:	4e72      	ldr	r6, [pc, #456]	; (100132a4 <__aeabi_fdiv+0x228>)
100130da:	0080      	lsls	r0, r0, #2
100130dc:	5830      	ldr	r0, [r6, r0]
100130de:	407a      	eors	r2, r7
100130e0:	0013      	movs	r3, r2
100130e2:	4687      	mov	pc, r0
100130e4:	2d00      	cmp	r5, #0
100130e6:	d144      	bne.n	10013172 <__aeabi_fdiv+0xf6>
100130e8:	2308      	movs	r3, #8
100130ea:	4699      	mov	r9, r3
100130ec:	3b06      	subs	r3, #6
100130ee:	469b      	mov	fp, r3
100130f0:	e7dd      	b.n	100130ae <__aeabi_fdiv+0x32>
100130f2:	2201      	movs	r2, #1
100130f4:	20ff      	movs	r0, #255	; 0xff
100130f6:	2400      	movs	r4, #0
100130f8:	401a      	ands	r2, r3
100130fa:	0264      	lsls	r4, r4, #9
100130fc:	05c3      	lsls	r3, r0, #23
100130fe:	0a64      	lsrs	r4, r4, #9
10013100:	07d2      	lsls	r2, r2, #31
10013102:	431c      	orrs	r4, r3
10013104:	4314      	orrs	r4, r2
10013106:	0020      	movs	r0, r4
10013108:	b003      	add	sp, #12
1001310a:	bc3c      	pop	{r2, r3, r4, r5}
1001310c:	4690      	mov	r8, r2
1001310e:	4699      	mov	r9, r3
10013110:	46a2      	mov	sl, r4
10013112:	46ab      	mov	fp, r5
10013114:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013116:	2d00      	cmp	r5, #0
10013118:	d120      	bne.n	1001315c <__aeabi_fdiv+0xe0>
1001311a:	2304      	movs	r3, #4
1001311c:	4699      	mov	r9, r3
1001311e:	3b03      	subs	r3, #3
10013120:	469b      	mov	fp, r3
10013122:	e7c4      	b.n	100130ae <__aeabi_fdiv+0x32>
10013124:	2c00      	cmp	r4, #0
10013126:	d117      	bne.n	10013158 <__aeabi_fdiv+0xdc>
10013128:	2102      	movs	r1, #2
1001312a:	e002      	b.n	10013132 <__aeabi_fdiv+0xb6>
1001312c:	2c00      	cmp	r4, #0
1001312e:	d10a      	bne.n	10013146 <__aeabi_fdiv+0xca>
10013130:	2101      	movs	r1, #1
10013132:	1a32      	subs	r2, r6, r0
10013134:	9201      	str	r2, [sp, #4]
10013136:	464a      	mov	r2, r9
10013138:	4643      	mov	r3, r8
1001313a:	430a      	orrs	r2, r1
1001313c:	485a      	ldr	r0, [pc, #360]	; (100132a8 <__aeabi_fdiv+0x22c>)
1001313e:	0092      	lsls	r2, r2, #2
10013140:	5882      	ldr	r2, [r0, r2]
10013142:	407b      	eors	r3, r7
10013144:	4697      	mov	pc, r2
10013146:	0020      	movs	r0, r4
10013148:	f002 fb72 	bl	10015830 <__clzsi2>
1001314c:	1f43      	subs	r3, r0, #5
1001314e:	3076      	adds	r0, #118	; 0x76
10013150:	409c      	lsls	r4, r3
10013152:	4240      	negs	r0, r0
10013154:	2100      	movs	r1, #0
10013156:	e7ba      	b.n	100130ce <__aeabi_fdiv+0x52>
10013158:	2103      	movs	r1, #3
1001315a:	e7b8      	b.n	100130ce <__aeabi_fdiv+0x52>
1001315c:	0028      	movs	r0, r5
1001315e:	f002 fb67 	bl	10015830 <__clzsi2>
10013162:	1f43      	subs	r3, r0, #5
10013164:	409d      	lsls	r5, r3
10013166:	2300      	movs	r3, #0
10013168:	3076      	adds	r0, #118	; 0x76
1001316a:	4246      	negs	r6, r0
1001316c:	4699      	mov	r9, r3
1001316e:	469b      	mov	fp, r3
10013170:	e79d      	b.n	100130ae <__aeabi_fdiv+0x32>
10013172:	230c      	movs	r3, #12
10013174:	4699      	mov	r9, r3
10013176:	3b09      	subs	r3, #9
10013178:	469b      	mov	fp, r3
1001317a:	e798      	b.n	100130ae <__aeabi_fdiv+0x32>
1001317c:	2480      	movs	r4, #128	; 0x80
1001317e:	2200      	movs	r2, #0
10013180:	03e4      	lsls	r4, r4, #15
10013182:	20ff      	movs	r0, #255	; 0xff
10013184:	e7b9      	b.n	100130fa <__aeabi_fdiv+0x7e>
10013186:	2400      	movs	r4, #0
10013188:	46c2      	mov	sl, r8
1001318a:	468b      	mov	fp, r1
1001318c:	465a      	mov	r2, fp
1001318e:	4653      	mov	r3, sl
10013190:	2a02      	cmp	r2, #2
10013192:	d0ae      	beq.n	100130f2 <__aeabi_fdiv+0x76>
10013194:	2a03      	cmp	r2, #3
10013196:	d07d      	beq.n	10013294 <__aeabi_fdiv+0x218>
10013198:	2a01      	cmp	r2, #1
1001319a:	d131      	bne.n	10013200 <__aeabi_fdiv+0x184>
1001319c:	2201      	movs	r2, #1
1001319e:	2000      	movs	r0, #0
100131a0:	401a      	ands	r2, r3
100131a2:	2400      	movs	r4, #0
100131a4:	e7a9      	b.n	100130fa <__aeabi_fdiv+0x7e>
100131a6:	2201      	movs	r2, #1
100131a8:	1a10      	subs	r0, r2, r0
100131aa:	281b      	cmp	r0, #27
100131ac:	dd56      	ble.n	1001325c <__aeabi_fdiv+0x1e0>
100131ae:	401a      	ands	r2, r3
100131b0:	2000      	movs	r0, #0
100131b2:	2400      	movs	r4, #0
100131b4:	e7a1      	b.n	100130fa <__aeabi_fdiv+0x7e>
100131b6:	2380      	movs	r3, #128	; 0x80
100131b8:	03db      	lsls	r3, r3, #15
100131ba:	421d      	tst	r5, r3
100131bc:	d14b      	bne.n	10013256 <__aeabi_fdiv+0x1da>
100131be:	2380      	movs	r3, #128	; 0x80
100131c0:	03db      	lsls	r3, r3, #15
100131c2:	432b      	orrs	r3, r5
100131c4:	025c      	lsls	r4, r3, #9
100131c6:	0a64      	lsrs	r4, r4, #9
100131c8:	003a      	movs	r2, r7
100131ca:	20ff      	movs	r0, #255	; 0xff
100131cc:	e795      	b.n	100130fa <__aeabi_fdiv+0x7e>
100131ce:	016d      	lsls	r5, r5, #5
100131d0:	0160      	lsls	r0, r4, #5
100131d2:	4285      	cmp	r5, r0
100131d4:	d230      	bcs.n	10013238 <__aeabi_fdiv+0x1bc>
100131d6:	9a01      	ldr	r2, [sp, #4]
100131d8:	2400      	movs	r4, #0
100131da:	3a01      	subs	r2, #1
100131dc:	9201      	str	r2, [sp, #4]
100131de:	221b      	movs	r2, #27
100131e0:	2701      	movs	r7, #1
100131e2:	0029      	movs	r1, r5
100131e4:	0064      	lsls	r4, r4, #1
100131e6:	006d      	lsls	r5, r5, #1
100131e8:	2900      	cmp	r1, #0
100131ea:	db01      	blt.n	100131f0 <__aeabi_fdiv+0x174>
100131ec:	42a8      	cmp	r0, r5
100131ee:	d801      	bhi.n	100131f4 <__aeabi_fdiv+0x178>
100131f0:	1a2d      	subs	r5, r5, r0
100131f2:	433c      	orrs	r4, r7
100131f4:	3a01      	subs	r2, #1
100131f6:	2a00      	cmp	r2, #0
100131f8:	d1f3      	bne.n	100131e2 <__aeabi_fdiv+0x166>
100131fa:	1e6a      	subs	r2, r5, #1
100131fc:	4195      	sbcs	r5, r2
100131fe:	432c      	orrs	r4, r5
10013200:	9801      	ldr	r0, [sp, #4]
10013202:	307f      	adds	r0, #127	; 0x7f
10013204:	2800      	cmp	r0, #0
10013206:	ddce      	ble.n	100131a6 <__aeabi_fdiv+0x12a>
10013208:	0762      	lsls	r2, r4, #29
1001320a:	d004      	beq.n	10013216 <__aeabi_fdiv+0x19a>
1001320c:	220f      	movs	r2, #15
1001320e:	4022      	ands	r2, r4
10013210:	2a04      	cmp	r2, #4
10013212:	d000      	beq.n	10013216 <__aeabi_fdiv+0x19a>
10013214:	3404      	adds	r4, #4
10013216:	0122      	lsls	r2, r4, #4
10013218:	d503      	bpl.n	10013222 <__aeabi_fdiv+0x1a6>
1001321a:	4a24      	ldr	r2, [pc, #144]	; (100132ac <__aeabi_fdiv+0x230>)
1001321c:	9801      	ldr	r0, [sp, #4]
1001321e:	4014      	ands	r4, r2
10013220:	3080      	adds	r0, #128	; 0x80
10013222:	28fe      	cmp	r0, #254	; 0xfe
10013224:	dd00      	ble.n	10013228 <__aeabi_fdiv+0x1ac>
10013226:	e764      	b.n	100130f2 <__aeabi_fdiv+0x76>
10013228:	2201      	movs	r2, #1
1001322a:	01a4      	lsls	r4, r4, #6
1001322c:	0a64      	lsrs	r4, r4, #9
1001322e:	b2c0      	uxtb	r0, r0
10013230:	401a      	ands	r2, r3
10013232:	e762      	b.n	100130fa <__aeabi_fdiv+0x7e>
10013234:	002c      	movs	r4, r5
10013236:	e7a9      	b.n	1001318c <__aeabi_fdiv+0x110>
10013238:	1a2d      	subs	r5, r5, r0
1001323a:	221a      	movs	r2, #26
1001323c:	2401      	movs	r4, #1
1001323e:	e7cf      	b.n	100131e0 <__aeabi_fdiv+0x164>
10013240:	026b      	lsls	r3, r5, #9
10013242:	d5bc      	bpl.n	100131be <__aeabi_fdiv+0x142>
10013244:	2400      	movs	r4, #0
10013246:	2380      	movs	r3, #128	; 0x80
10013248:	03db      	lsls	r3, r3, #15
1001324a:	431c      	orrs	r4, r3
1001324c:	0264      	lsls	r4, r4, #9
1001324e:	0a64      	lsrs	r4, r4, #9
10013250:	4642      	mov	r2, r8
10013252:	20ff      	movs	r0, #255	; 0xff
10013254:	e751      	b.n	100130fa <__aeabi_fdiv+0x7e>
10013256:	421c      	tst	r4, r3
10013258:	d1b3      	bne.n	100131c2 <__aeabi_fdiv+0x146>
1001325a:	e7f4      	b.n	10013246 <__aeabi_fdiv+0x1ca>
1001325c:	0021      	movs	r1, r4
1001325e:	2220      	movs	r2, #32
10013260:	40c1      	lsrs	r1, r0
10013262:	1a10      	subs	r0, r2, r0
10013264:	4084      	lsls	r4, r0
10013266:	1e62      	subs	r2, r4, #1
10013268:	4194      	sbcs	r4, r2
1001326a:	430c      	orrs	r4, r1
1001326c:	0762      	lsls	r2, r4, #29
1001326e:	d004      	beq.n	1001327a <__aeabi_fdiv+0x1fe>
10013270:	220f      	movs	r2, #15
10013272:	4022      	ands	r2, r4
10013274:	2a04      	cmp	r2, #4
10013276:	d000      	beq.n	1001327a <__aeabi_fdiv+0x1fe>
10013278:	3404      	adds	r4, #4
1001327a:	0162      	lsls	r2, r4, #5
1001327c:	d504      	bpl.n	10013288 <__aeabi_fdiv+0x20c>
1001327e:	2201      	movs	r2, #1
10013280:	2001      	movs	r0, #1
10013282:	401a      	ands	r2, r3
10013284:	2400      	movs	r4, #0
10013286:	e738      	b.n	100130fa <__aeabi_fdiv+0x7e>
10013288:	2201      	movs	r2, #1
1001328a:	01a4      	lsls	r4, r4, #6
1001328c:	0a64      	lsrs	r4, r4, #9
1001328e:	401a      	ands	r2, r3
10013290:	2000      	movs	r0, #0
10013292:	e732      	b.n	100130fa <__aeabi_fdiv+0x7e>
10013294:	2380      	movs	r3, #128	; 0x80
10013296:	03db      	lsls	r3, r3, #15
10013298:	431c      	orrs	r4, r3
1001329a:	0264      	lsls	r4, r4, #9
1001329c:	0a64      	lsrs	r4, r4, #9
1001329e:	4652      	mov	r2, sl
100132a0:	20ff      	movs	r0, #255	; 0xff
100132a2:	e72a      	b.n	100130fa <__aeabi_fdiv+0x7e>
100132a4:	10018500 	.word	0x10018500
100132a8:	10018540 	.word	0x10018540
100132ac:	f7ffffff 	.word	0xf7ffffff

100132b0 <__eqsf2>:
100132b0:	0243      	lsls	r3, r0, #9
100132b2:	b570      	push	{r4, r5, r6, lr}
100132b4:	0042      	lsls	r2, r0, #1
100132b6:	004c      	lsls	r4, r1, #1
100132b8:	0a5d      	lsrs	r5, r3, #9
100132ba:	0fc3      	lsrs	r3, r0, #31
100132bc:	0248      	lsls	r0, r1, #9
100132be:	0e12      	lsrs	r2, r2, #24
100132c0:	0a46      	lsrs	r6, r0, #9
100132c2:	0e24      	lsrs	r4, r4, #24
100132c4:	0fc9      	lsrs	r1, r1, #31
100132c6:	2aff      	cmp	r2, #255	; 0xff
100132c8:	d00f      	beq.n	100132ea <__eqsf2+0x3a>
100132ca:	2cff      	cmp	r4, #255	; 0xff
100132cc:	d011      	beq.n	100132f2 <__eqsf2+0x42>
100132ce:	2001      	movs	r0, #1
100132d0:	42a2      	cmp	r2, r4
100132d2:	d000      	beq.n	100132d6 <__eqsf2+0x26>
100132d4:	bd70      	pop	{r4, r5, r6, pc}
100132d6:	42b5      	cmp	r5, r6
100132d8:	d1fc      	bne.n	100132d4 <__eqsf2+0x24>
100132da:	428b      	cmp	r3, r1
100132dc:	d00d      	beq.n	100132fa <__eqsf2+0x4a>
100132de:	2a00      	cmp	r2, #0
100132e0:	d1f8      	bne.n	100132d4 <__eqsf2+0x24>
100132e2:	0028      	movs	r0, r5
100132e4:	1e43      	subs	r3, r0, #1
100132e6:	4198      	sbcs	r0, r3
100132e8:	e7f4      	b.n	100132d4 <__eqsf2+0x24>
100132ea:	2001      	movs	r0, #1
100132ec:	2d00      	cmp	r5, #0
100132ee:	d1f1      	bne.n	100132d4 <__eqsf2+0x24>
100132f0:	e7eb      	b.n	100132ca <__eqsf2+0x1a>
100132f2:	2001      	movs	r0, #1
100132f4:	2e00      	cmp	r6, #0
100132f6:	d1ed      	bne.n	100132d4 <__eqsf2+0x24>
100132f8:	e7e9      	b.n	100132ce <__eqsf2+0x1e>
100132fa:	2000      	movs	r0, #0
100132fc:	e7ea      	b.n	100132d4 <__eqsf2+0x24>
100132fe:	46c0      	nop			; (mov r8, r8)

10013300 <__gesf2>:
10013300:	0243      	lsls	r3, r0, #9
10013302:	b5f0      	push	{r4, r5, r6, r7, lr}
10013304:	0042      	lsls	r2, r0, #1
10013306:	0a5d      	lsrs	r5, r3, #9
10013308:	0fc3      	lsrs	r3, r0, #31
1001330a:	0248      	lsls	r0, r1, #9
1001330c:	0a44      	lsrs	r4, r0, #9
1001330e:	0048      	lsls	r0, r1, #1
10013310:	0e12      	lsrs	r2, r2, #24
10013312:	0e00      	lsrs	r0, r0, #24
10013314:	0fc9      	lsrs	r1, r1, #31
10013316:	2aff      	cmp	r2, #255	; 0xff
10013318:	d01f      	beq.n	1001335a <__gesf2+0x5a>
1001331a:	28ff      	cmp	r0, #255	; 0xff
1001331c:	d022      	beq.n	10013364 <__gesf2+0x64>
1001331e:	2a00      	cmp	r2, #0
10013320:	d109      	bne.n	10013336 <__gesf2+0x36>
10013322:	426e      	negs	r6, r5
10013324:	416e      	adcs	r6, r5
10013326:	2800      	cmp	r0, #0
10013328:	d10f      	bne.n	1001334a <__gesf2+0x4a>
1001332a:	2c00      	cmp	r4, #0
1001332c:	d10d      	bne.n	1001334a <__gesf2+0x4a>
1001332e:	2000      	movs	r0, #0
10013330:	2d00      	cmp	r5, #0
10013332:	d009      	beq.n	10013348 <__gesf2+0x48>
10013334:	e005      	b.n	10013342 <__gesf2+0x42>
10013336:	2800      	cmp	r0, #0
10013338:	d101      	bne.n	1001333e <__gesf2+0x3e>
1001333a:	2c00      	cmp	r4, #0
1001333c:	d001      	beq.n	10013342 <__gesf2+0x42>
1001333e:	428b      	cmp	r3, r1
10013340:	d013      	beq.n	1001336a <__gesf2+0x6a>
10013342:	4258      	negs	r0, r3
10013344:	2301      	movs	r3, #1
10013346:	4318      	orrs	r0, r3
10013348:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001334a:	2e00      	cmp	r6, #0
1001334c:	d0f7      	beq.n	1001333e <__gesf2+0x3e>
1001334e:	4248      	negs	r0, r1
10013350:	4141      	adcs	r1, r0
10013352:	2001      	movs	r0, #1
10013354:	4249      	negs	r1, r1
10013356:	4308      	orrs	r0, r1
10013358:	e7f6      	b.n	10013348 <__gesf2+0x48>
1001335a:	2d00      	cmp	r5, #0
1001335c:	d0dd      	beq.n	1001331a <__gesf2+0x1a>
1001335e:	2002      	movs	r0, #2
10013360:	4240      	negs	r0, r0
10013362:	e7f1      	b.n	10013348 <__gesf2+0x48>
10013364:	2c00      	cmp	r4, #0
10013366:	d0da      	beq.n	1001331e <__gesf2+0x1e>
10013368:	e7f9      	b.n	1001335e <__gesf2+0x5e>
1001336a:	4282      	cmp	r2, r0
1001336c:	dce9      	bgt.n	10013342 <__gesf2+0x42>
1001336e:	db04      	blt.n	1001337a <__gesf2+0x7a>
10013370:	42a5      	cmp	r5, r4
10013372:	d8e6      	bhi.n	10013342 <__gesf2+0x42>
10013374:	2000      	movs	r0, #0
10013376:	42a5      	cmp	r5, r4
10013378:	d2e6      	bcs.n	10013348 <__gesf2+0x48>
1001337a:	4258      	negs	r0, r3
1001337c:	4143      	adcs	r3, r0
1001337e:	2001      	movs	r0, #1
10013380:	425b      	negs	r3, r3
10013382:	4318      	orrs	r0, r3
10013384:	e7e0      	b.n	10013348 <__gesf2+0x48>
10013386:	46c0      	nop			; (mov r8, r8)

10013388 <__lesf2>:
10013388:	0243      	lsls	r3, r0, #9
1001338a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001338c:	0042      	lsls	r2, r0, #1
1001338e:	004c      	lsls	r4, r1, #1
10013390:	0a5e      	lsrs	r6, r3, #9
10013392:	0fc3      	lsrs	r3, r0, #31
10013394:	0248      	lsls	r0, r1, #9
10013396:	0e12      	lsrs	r2, r2, #24
10013398:	0a45      	lsrs	r5, r0, #9
1001339a:	0e24      	lsrs	r4, r4, #24
1001339c:	0fc9      	lsrs	r1, r1, #31
1001339e:	2aff      	cmp	r2, #255	; 0xff
100133a0:	d017      	beq.n	100133d2 <__lesf2+0x4a>
100133a2:	2cff      	cmp	r4, #255	; 0xff
100133a4:	d019      	beq.n	100133da <__lesf2+0x52>
100133a6:	2a00      	cmp	r2, #0
100133a8:	d10b      	bne.n	100133c2 <__lesf2+0x3a>
100133aa:	4270      	negs	r0, r6
100133ac:	4170      	adcs	r0, r6
100133ae:	2c00      	cmp	r4, #0
100133b0:	d017      	beq.n	100133e2 <__lesf2+0x5a>
100133b2:	2800      	cmp	r0, #0
100133b4:	d007      	beq.n	100133c6 <__lesf2+0x3e>
100133b6:	4248      	negs	r0, r1
100133b8:	4141      	adcs	r1, r0
100133ba:	2001      	movs	r0, #1
100133bc:	4249      	negs	r1, r1
100133be:	4308      	orrs	r0, r1
100133c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133c2:	2c00      	cmp	r4, #0
100133c4:	d013      	beq.n	100133ee <__lesf2+0x66>
100133c6:	428b      	cmp	r3, r1
100133c8:	d014      	beq.n	100133f4 <__lesf2+0x6c>
100133ca:	4258      	negs	r0, r3
100133cc:	2301      	movs	r3, #1
100133ce:	4318      	orrs	r0, r3
100133d0:	e7f6      	b.n	100133c0 <__lesf2+0x38>
100133d2:	2002      	movs	r0, #2
100133d4:	2e00      	cmp	r6, #0
100133d6:	d1f3      	bne.n	100133c0 <__lesf2+0x38>
100133d8:	e7e3      	b.n	100133a2 <__lesf2+0x1a>
100133da:	2002      	movs	r0, #2
100133dc:	2d00      	cmp	r5, #0
100133de:	d1ef      	bne.n	100133c0 <__lesf2+0x38>
100133e0:	e7e1      	b.n	100133a6 <__lesf2+0x1e>
100133e2:	2d00      	cmp	r5, #0
100133e4:	d1e5      	bne.n	100133b2 <__lesf2+0x2a>
100133e6:	2000      	movs	r0, #0
100133e8:	2e00      	cmp	r6, #0
100133ea:	d0e9      	beq.n	100133c0 <__lesf2+0x38>
100133ec:	e7ed      	b.n	100133ca <__lesf2+0x42>
100133ee:	2d00      	cmp	r5, #0
100133f0:	d1e9      	bne.n	100133c6 <__lesf2+0x3e>
100133f2:	e7ea      	b.n	100133ca <__lesf2+0x42>
100133f4:	42a2      	cmp	r2, r4
100133f6:	dce8      	bgt.n	100133ca <__lesf2+0x42>
100133f8:	db04      	blt.n	10013404 <__lesf2+0x7c>
100133fa:	42ae      	cmp	r6, r5
100133fc:	d8e5      	bhi.n	100133ca <__lesf2+0x42>
100133fe:	2000      	movs	r0, #0
10013400:	42ae      	cmp	r6, r5
10013402:	d2dd      	bcs.n	100133c0 <__lesf2+0x38>
10013404:	4258      	negs	r0, r3
10013406:	4143      	adcs	r3, r0
10013408:	2001      	movs	r0, #1
1001340a:	425b      	negs	r3, r3
1001340c:	4318      	orrs	r0, r3
1001340e:	e7d7      	b.n	100133c0 <__lesf2+0x38>

10013410 <__aeabi_fmul>:
10013410:	b5f0      	push	{r4, r5, r6, r7, lr}
10013412:	4657      	mov	r7, sl
10013414:	464e      	mov	r6, r9
10013416:	4645      	mov	r5, r8
10013418:	0043      	lsls	r3, r0, #1
1001341a:	b4e0      	push	{r5, r6, r7}
1001341c:	0246      	lsls	r6, r0, #9
1001341e:	4688      	mov	r8, r1
10013420:	0a76      	lsrs	r6, r6, #9
10013422:	0e1f      	lsrs	r7, r3, #24
10013424:	0fc4      	lsrs	r4, r0, #31
10013426:	2f00      	cmp	r7, #0
10013428:	d047      	beq.n	100134ba <__aeabi_fmul+0xaa>
1001342a:	2fff      	cmp	r7, #255	; 0xff
1001342c:	d025      	beq.n	1001347a <__aeabi_fmul+0x6a>
1001342e:	2300      	movs	r3, #0
10013430:	2580      	movs	r5, #128	; 0x80
10013432:	469a      	mov	sl, r3
10013434:	4699      	mov	r9, r3
10013436:	00f6      	lsls	r6, r6, #3
10013438:	04ed      	lsls	r5, r5, #19
1001343a:	432e      	orrs	r6, r5
1001343c:	3f7f      	subs	r7, #127	; 0x7f
1001343e:	4643      	mov	r3, r8
10013440:	4642      	mov	r2, r8
10013442:	025d      	lsls	r5, r3, #9
10013444:	0fd2      	lsrs	r2, r2, #31
10013446:	005b      	lsls	r3, r3, #1
10013448:	0a6d      	lsrs	r5, r5, #9
1001344a:	0e1b      	lsrs	r3, r3, #24
1001344c:	4690      	mov	r8, r2
1001344e:	d040      	beq.n	100134d2 <__aeabi_fmul+0xc2>
10013450:	2bff      	cmp	r3, #255	; 0xff
10013452:	d039      	beq.n	100134c8 <__aeabi_fmul+0xb8>
10013454:	2280      	movs	r2, #128	; 0x80
10013456:	2000      	movs	r0, #0
10013458:	00ed      	lsls	r5, r5, #3
1001345a:	04d2      	lsls	r2, r2, #19
1001345c:	4315      	orrs	r5, r2
1001345e:	3b7f      	subs	r3, #127	; 0x7f
10013460:	18fb      	adds	r3, r7, r3
10013462:	4642      	mov	r2, r8
10013464:	4657      	mov	r7, sl
10013466:	1c59      	adds	r1, r3, #1
10013468:	4062      	eors	r2, r4
1001346a:	468c      	mov	ip, r1
1001346c:	4307      	orrs	r7, r0
1001346e:	2f0f      	cmp	r7, #15
10013470:	d85c      	bhi.n	1001352c <__aeabi_fmul+0x11c>
10013472:	496f      	ldr	r1, [pc, #444]	; (10013630 <__aeabi_fmul+0x220>)
10013474:	00bf      	lsls	r7, r7, #2
10013476:	59c9      	ldr	r1, [r1, r7]
10013478:	468f      	mov	pc, r1
1001347a:	2e00      	cmp	r6, #0
1001347c:	d145      	bne.n	1001350a <__aeabi_fmul+0xfa>
1001347e:	2308      	movs	r3, #8
10013480:	469a      	mov	sl, r3
10013482:	3b06      	subs	r3, #6
10013484:	4699      	mov	r9, r3
10013486:	e7da      	b.n	1001343e <__aeabi_fmul+0x2e>
10013488:	4642      	mov	r2, r8
1001348a:	2802      	cmp	r0, #2
1001348c:	d02d      	beq.n	100134ea <__aeabi_fmul+0xda>
1001348e:	2803      	cmp	r0, #3
10013490:	d100      	bne.n	10013494 <__aeabi_fmul+0x84>
10013492:	e0c3      	b.n	1001361c <__aeabi_fmul+0x20c>
10013494:	2801      	cmp	r0, #1
10013496:	d000      	beq.n	1001349a <__aeabi_fmul+0x8a>
10013498:	e0a2      	b.n	100135e0 <__aeabi_fmul+0x1d0>
1001349a:	2500      	movs	r5, #0
1001349c:	2600      	movs	r6, #0
1001349e:	4002      	ands	r2, r0
100134a0:	b2d4      	uxtb	r4, r2
100134a2:	0276      	lsls	r6, r6, #9
100134a4:	05ed      	lsls	r5, r5, #23
100134a6:	0a76      	lsrs	r6, r6, #9
100134a8:	432e      	orrs	r6, r5
100134aa:	07e4      	lsls	r4, r4, #31
100134ac:	4326      	orrs	r6, r4
100134ae:	0030      	movs	r0, r6
100134b0:	bc1c      	pop	{r2, r3, r4}
100134b2:	4690      	mov	r8, r2
100134b4:	4699      	mov	r9, r3
100134b6:	46a2      	mov	sl, r4
100134b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100134ba:	2e00      	cmp	r6, #0
100134bc:	d11a      	bne.n	100134f4 <__aeabi_fmul+0xe4>
100134be:	2304      	movs	r3, #4
100134c0:	469a      	mov	sl, r3
100134c2:	3b03      	subs	r3, #3
100134c4:	4699      	mov	r9, r3
100134c6:	e7ba      	b.n	1001343e <__aeabi_fmul+0x2e>
100134c8:	002a      	movs	r2, r5
100134ca:	1e51      	subs	r1, r2, #1
100134cc:	418a      	sbcs	r2, r1
100134ce:	1c90      	adds	r0, r2, #2
100134d0:	e7c6      	b.n	10013460 <__aeabi_fmul+0x50>
100134d2:	2001      	movs	r0, #1
100134d4:	2d00      	cmp	r5, #0
100134d6:	d0c3      	beq.n	10013460 <__aeabi_fmul+0x50>
100134d8:	0028      	movs	r0, r5
100134da:	f002 f9a9 	bl	10015830 <__clzsi2>
100134de:	1f43      	subs	r3, r0, #5
100134e0:	3076      	adds	r0, #118	; 0x76
100134e2:	409d      	lsls	r5, r3
100134e4:	4243      	negs	r3, r0
100134e6:	2000      	movs	r0, #0
100134e8:	e7ba      	b.n	10013460 <__aeabi_fmul+0x50>
100134ea:	2401      	movs	r4, #1
100134ec:	25ff      	movs	r5, #255	; 0xff
100134ee:	4014      	ands	r4, r2
100134f0:	2600      	movs	r6, #0
100134f2:	e7d6      	b.n	100134a2 <__aeabi_fmul+0x92>
100134f4:	0030      	movs	r0, r6
100134f6:	f002 f99b 	bl	10015830 <__clzsi2>
100134fa:	1f43      	subs	r3, r0, #5
100134fc:	409e      	lsls	r6, r3
100134fe:	2300      	movs	r3, #0
10013500:	3076      	adds	r0, #118	; 0x76
10013502:	4247      	negs	r7, r0
10013504:	469a      	mov	sl, r3
10013506:	4699      	mov	r9, r3
10013508:	e799      	b.n	1001343e <__aeabi_fmul+0x2e>
1001350a:	230c      	movs	r3, #12
1001350c:	469a      	mov	sl, r3
1001350e:	3b09      	subs	r3, #9
10013510:	4699      	mov	r9, r3
10013512:	e794      	b.n	1001343e <__aeabi_fmul+0x2e>
10013514:	2680      	movs	r6, #128	; 0x80
10013516:	2400      	movs	r4, #0
10013518:	03f6      	lsls	r6, r6, #15
1001351a:	25ff      	movs	r5, #255	; 0xff
1001351c:	e7c1      	b.n	100134a2 <__aeabi_fmul+0x92>
1001351e:	0035      	movs	r5, r6
10013520:	4648      	mov	r0, r9
10013522:	e7b2      	b.n	1001348a <__aeabi_fmul+0x7a>
10013524:	0035      	movs	r5, r6
10013526:	0022      	movs	r2, r4
10013528:	4648      	mov	r0, r9
1001352a:	e7ae      	b.n	1001348a <__aeabi_fmul+0x7a>
1001352c:	0429      	lsls	r1, r5, #16
1001352e:	0c09      	lsrs	r1, r1, #16
10013530:	0008      	movs	r0, r1
10013532:	0c37      	lsrs	r7, r6, #16
10013534:	0436      	lsls	r6, r6, #16
10013536:	0c36      	lsrs	r6, r6, #16
10013538:	0c2c      	lsrs	r4, r5, #16
1001353a:	4379      	muls	r1, r7
1001353c:	4370      	muls	r0, r6
1001353e:	4367      	muls	r7, r4
10013540:	4374      	muls	r4, r6
10013542:	0c06      	lsrs	r6, r0, #16
10013544:	1864      	adds	r4, r4, r1
10013546:	1936      	adds	r6, r6, r4
10013548:	42b1      	cmp	r1, r6
1001354a:	d903      	bls.n	10013554 <__aeabi_fmul+0x144>
1001354c:	2180      	movs	r1, #128	; 0x80
1001354e:	0249      	lsls	r1, r1, #9
10013550:	4688      	mov	r8, r1
10013552:	4447      	add	r7, r8
10013554:	0400      	lsls	r0, r0, #16
10013556:	0c00      	lsrs	r0, r0, #16
10013558:	0431      	lsls	r1, r6, #16
1001355a:	1809      	adds	r1, r1, r0
1001355c:	018d      	lsls	r5, r1, #6
1001355e:	1e68      	subs	r0, r5, #1
10013560:	4185      	sbcs	r5, r0
10013562:	0e89      	lsrs	r1, r1, #26
10013564:	4329      	orrs	r1, r5
10013566:	0c35      	lsrs	r5, r6, #16
10013568:	19ed      	adds	r5, r5, r7
1001356a:	01ad      	lsls	r5, r5, #6
1001356c:	430d      	orrs	r5, r1
1001356e:	0129      	lsls	r1, r5, #4
10013570:	d504      	bpl.n	1001357c <__aeabi_fmul+0x16c>
10013572:	2301      	movs	r3, #1
10013574:	0869      	lsrs	r1, r5, #1
10013576:	401d      	ands	r5, r3
10013578:	4663      	mov	r3, ip
1001357a:	430d      	orrs	r5, r1
1001357c:	0019      	movs	r1, r3
1001357e:	317f      	adds	r1, #127	; 0x7f
10013580:	2900      	cmp	r1, #0
10013582:	dd25      	ble.n	100135d0 <__aeabi_fmul+0x1c0>
10013584:	0768      	lsls	r0, r5, #29
10013586:	d004      	beq.n	10013592 <__aeabi_fmul+0x182>
10013588:	200f      	movs	r0, #15
1001358a:	4028      	ands	r0, r5
1001358c:	2804      	cmp	r0, #4
1001358e:	d000      	beq.n	10013592 <__aeabi_fmul+0x182>
10013590:	3504      	adds	r5, #4
10013592:	0128      	lsls	r0, r5, #4
10013594:	d503      	bpl.n	1001359e <__aeabi_fmul+0x18e>
10013596:	4927      	ldr	r1, [pc, #156]	; (10013634 <__aeabi_fmul+0x224>)
10013598:	3380      	adds	r3, #128	; 0x80
1001359a:	400d      	ands	r5, r1
1001359c:	0019      	movs	r1, r3
1001359e:	29fe      	cmp	r1, #254	; 0xfe
100135a0:	dca3      	bgt.n	100134ea <__aeabi_fmul+0xda>
100135a2:	2401      	movs	r4, #1
100135a4:	01ad      	lsls	r5, r5, #6
100135a6:	0a6e      	lsrs	r6, r5, #9
100135a8:	4014      	ands	r4, r2
100135aa:	b2cd      	uxtb	r5, r1
100135ac:	e779      	b.n	100134a2 <__aeabi_fmul+0x92>
100135ae:	2080      	movs	r0, #128	; 0x80
100135b0:	03c0      	lsls	r0, r0, #15
100135b2:	4206      	tst	r6, r0
100135b4:	d007      	beq.n	100135c6 <__aeabi_fmul+0x1b6>
100135b6:	4205      	tst	r5, r0
100135b8:	d105      	bne.n	100135c6 <__aeabi_fmul+0x1b6>
100135ba:	4328      	orrs	r0, r5
100135bc:	0246      	lsls	r6, r0, #9
100135be:	0a76      	lsrs	r6, r6, #9
100135c0:	4644      	mov	r4, r8
100135c2:	25ff      	movs	r5, #255	; 0xff
100135c4:	e76d      	b.n	100134a2 <__aeabi_fmul+0x92>
100135c6:	4306      	orrs	r6, r0
100135c8:	0276      	lsls	r6, r6, #9
100135ca:	0a76      	lsrs	r6, r6, #9
100135cc:	25ff      	movs	r5, #255	; 0xff
100135ce:	e768      	b.n	100134a2 <__aeabi_fmul+0x92>
100135d0:	2401      	movs	r4, #1
100135d2:	1a61      	subs	r1, r4, r1
100135d4:	291b      	cmp	r1, #27
100135d6:	dd05      	ble.n	100135e4 <__aeabi_fmul+0x1d4>
100135d8:	4014      	ands	r4, r2
100135da:	2500      	movs	r5, #0
100135dc:	2600      	movs	r6, #0
100135de:	e760      	b.n	100134a2 <__aeabi_fmul+0x92>
100135e0:	4663      	mov	r3, ip
100135e2:	e7cb      	b.n	1001357c <__aeabi_fmul+0x16c>
100135e4:	002e      	movs	r6, r5
100135e6:	2320      	movs	r3, #32
100135e8:	40ce      	lsrs	r6, r1
100135ea:	1a59      	subs	r1, r3, r1
100135ec:	408d      	lsls	r5, r1
100135ee:	1e6b      	subs	r3, r5, #1
100135f0:	419d      	sbcs	r5, r3
100135f2:	432e      	orrs	r6, r5
100135f4:	0773      	lsls	r3, r6, #29
100135f6:	d004      	beq.n	10013602 <__aeabi_fmul+0x1f2>
100135f8:	230f      	movs	r3, #15
100135fa:	4033      	ands	r3, r6
100135fc:	2b04      	cmp	r3, #4
100135fe:	d000      	beq.n	10013602 <__aeabi_fmul+0x1f2>
10013600:	3604      	adds	r6, #4
10013602:	0173      	lsls	r3, r6, #5
10013604:	d504      	bpl.n	10013610 <__aeabi_fmul+0x200>
10013606:	2401      	movs	r4, #1
10013608:	2501      	movs	r5, #1
1001360a:	4014      	ands	r4, r2
1001360c:	2600      	movs	r6, #0
1001360e:	e748      	b.n	100134a2 <__aeabi_fmul+0x92>
10013610:	2401      	movs	r4, #1
10013612:	01b6      	lsls	r6, r6, #6
10013614:	0a76      	lsrs	r6, r6, #9
10013616:	4014      	ands	r4, r2
10013618:	2500      	movs	r5, #0
1001361a:	e742      	b.n	100134a2 <__aeabi_fmul+0x92>
1001361c:	2680      	movs	r6, #128	; 0x80
1001361e:	2401      	movs	r4, #1
10013620:	03f6      	lsls	r6, r6, #15
10013622:	432e      	orrs	r6, r5
10013624:	0276      	lsls	r6, r6, #9
10013626:	0a76      	lsrs	r6, r6, #9
10013628:	4014      	ands	r4, r2
1001362a:	25ff      	movs	r5, #255	; 0xff
1001362c:	e739      	b.n	100134a2 <__aeabi_fmul+0x92>
1001362e:	46c0      	nop			; (mov r8, r8)
10013630:	10018580 	.word	0x10018580
10013634:	f7ffffff 	.word	0xf7ffffff

10013638 <__aeabi_fsub>:
10013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001363a:	024a      	lsls	r2, r1, #9
1001363c:	004e      	lsls	r6, r1, #1
1001363e:	0243      	lsls	r3, r0, #9
10013640:	0044      	lsls	r4, r0, #1
10013642:	0e24      	lsrs	r4, r4, #24
10013644:	0fc5      	lsrs	r5, r0, #31
10013646:	099b      	lsrs	r3, r3, #6
10013648:	0e36      	lsrs	r6, r6, #24
1001364a:	0fc9      	lsrs	r1, r1, #31
1001364c:	0992      	lsrs	r2, r2, #6
1001364e:	2eff      	cmp	r6, #255	; 0xff
10013650:	d100      	bne.n	10013654 <__aeabi_fsub+0x1c>
10013652:	e083      	b.n	1001375c <__aeabi_fsub+0x124>
10013654:	2001      	movs	r0, #1
10013656:	4041      	eors	r1, r0
10013658:	1ba0      	subs	r0, r4, r6
1001365a:	42a9      	cmp	r1, r5
1001365c:	d05c      	beq.n	10013718 <__aeabi_fsub+0xe0>
1001365e:	2800      	cmp	r0, #0
10013660:	dc00      	bgt.n	10013664 <__aeabi_fsub+0x2c>
10013662:	e095      	b.n	10013790 <__aeabi_fsub+0x158>
10013664:	2e00      	cmp	r6, #0
10013666:	d11c      	bne.n	100136a2 <__aeabi_fsub+0x6a>
10013668:	2a00      	cmp	r2, #0
1001366a:	d000      	beq.n	1001366e <__aeabi_fsub+0x36>
1001366c:	e081      	b.n	10013772 <__aeabi_fsub+0x13a>
1001366e:	075a      	lsls	r2, r3, #29
10013670:	d004      	beq.n	1001367c <__aeabi_fsub+0x44>
10013672:	220f      	movs	r2, #15
10013674:	401a      	ands	r2, r3
10013676:	2a04      	cmp	r2, #4
10013678:	d000      	beq.n	1001367c <__aeabi_fsub+0x44>
1001367a:	3304      	adds	r3, #4
1001367c:	015a      	lsls	r2, r3, #5
1001367e:	d53b      	bpl.n	100136f8 <__aeabi_fsub+0xc0>
10013680:	3401      	adds	r4, #1
10013682:	2cff      	cmp	r4, #255	; 0xff
10013684:	d100      	bne.n	10013688 <__aeabi_fsub+0x50>
10013686:	e091      	b.n	100137ac <__aeabi_fsub+0x174>
10013688:	2001      	movs	r0, #1
1001368a:	019b      	lsls	r3, r3, #6
1001368c:	0a5b      	lsrs	r3, r3, #9
1001368e:	b2e4      	uxtb	r4, r4
10013690:	4005      	ands	r5, r0
10013692:	025b      	lsls	r3, r3, #9
10013694:	05e4      	lsls	r4, r4, #23
10013696:	0a5b      	lsrs	r3, r3, #9
10013698:	07ed      	lsls	r5, r5, #31
1001369a:	4323      	orrs	r3, r4
1001369c:	432b      	orrs	r3, r5
1001369e:	0018      	movs	r0, r3
100136a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100136a2:	2cff      	cmp	r4, #255	; 0xff
100136a4:	d0e3      	beq.n	1001366e <__aeabi_fsub+0x36>
100136a6:	2180      	movs	r1, #128	; 0x80
100136a8:	04c9      	lsls	r1, r1, #19
100136aa:	430a      	orrs	r2, r1
100136ac:	281b      	cmp	r0, #27
100136ae:	dd00      	ble.n	100136b2 <__aeabi_fsub+0x7a>
100136b0:	e090      	b.n	100137d4 <__aeabi_fsub+0x19c>
100136b2:	0016      	movs	r6, r2
100136b4:	2120      	movs	r1, #32
100136b6:	40c6      	lsrs	r6, r0
100136b8:	1a08      	subs	r0, r1, r0
100136ba:	4082      	lsls	r2, r0
100136bc:	1e51      	subs	r1, r2, #1
100136be:	418a      	sbcs	r2, r1
100136c0:	4332      	orrs	r2, r6
100136c2:	1a9b      	subs	r3, r3, r2
100136c4:	015a      	lsls	r2, r3, #5
100136c6:	d515      	bpl.n	100136f4 <__aeabi_fsub+0xbc>
100136c8:	019b      	lsls	r3, r3, #6
100136ca:	099e      	lsrs	r6, r3, #6
100136cc:	0030      	movs	r0, r6
100136ce:	f002 f8af 	bl	10015830 <__clzsi2>
100136d2:	3805      	subs	r0, #5
100136d4:	4086      	lsls	r6, r0
100136d6:	4284      	cmp	r4, r0
100136d8:	dc6c      	bgt.n	100137b4 <__aeabi_fsub+0x17c>
100136da:	1b04      	subs	r4, r0, r4
100136dc:	0033      	movs	r3, r6
100136de:	2020      	movs	r0, #32
100136e0:	3401      	adds	r4, #1
100136e2:	40e3      	lsrs	r3, r4
100136e4:	1b04      	subs	r4, r0, r4
100136e6:	40a6      	lsls	r6, r4
100136e8:	1e72      	subs	r2, r6, #1
100136ea:	4196      	sbcs	r6, r2
100136ec:	2400      	movs	r4, #0
100136ee:	4333      	orrs	r3, r6
100136f0:	e7bd      	b.n	1001366e <__aeabi_fsub+0x36>
100136f2:	000d      	movs	r5, r1
100136f4:	075a      	lsls	r2, r3, #29
100136f6:	d1bc      	bne.n	10013672 <__aeabi_fsub+0x3a>
100136f8:	08df      	lsrs	r7, r3, #3
100136fa:	2301      	movs	r3, #1
100136fc:	401d      	ands	r5, r3
100136fe:	2cff      	cmp	r4, #255	; 0xff
10013700:	d133      	bne.n	1001376a <__aeabi_fsub+0x132>
10013702:	2f00      	cmp	r7, #0
10013704:	d100      	bne.n	10013708 <__aeabi_fsub+0xd0>
10013706:	e090      	b.n	1001382a <__aeabi_fsub+0x1f2>
10013708:	2280      	movs	r2, #128	; 0x80
1001370a:	03d2      	lsls	r2, r2, #15
1001370c:	0013      	movs	r3, r2
1001370e:	433b      	orrs	r3, r7
10013710:	025b      	lsls	r3, r3, #9
10013712:	0a5b      	lsrs	r3, r3, #9
10013714:	24ff      	movs	r4, #255	; 0xff
10013716:	e7bc      	b.n	10013692 <__aeabi_fsub+0x5a>
10013718:	2800      	cmp	r0, #0
1001371a:	dd4f      	ble.n	100137bc <__aeabi_fsub+0x184>
1001371c:	2e00      	cmp	r6, #0
1001371e:	d02e      	beq.n	1001377e <__aeabi_fsub+0x146>
10013720:	2cff      	cmp	r4, #255	; 0xff
10013722:	d0a4      	beq.n	1001366e <__aeabi_fsub+0x36>
10013724:	2580      	movs	r5, #128	; 0x80
10013726:	04ed      	lsls	r5, r5, #19
10013728:	432a      	orrs	r2, r5
1001372a:	281b      	cmp	r0, #27
1001372c:	dd00      	ble.n	10013730 <__aeabi_fsub+0xf8>
1001372e:	e097      	b.n	10013860 <__aeabi_fsub+0x228>
10013730:	0016      	movs	r6, r2
10013732:	2520      	movs	r5, #32
10013734:	40c6      	lsrs	r6, r0
10013736:	1a28      	subs	r0, r5, r0
10013738:	4082      	lsls	r2, r0
1001373a:	1e50      	subs	r0, r2, #1
1001373c:	4182      	sbcs	r2, r0
1001373e:	4332      	orrs	r2, r6
10013740:	189b      	adds	r3, r3, r2
10013742:	015a      	lsls	r2, r3, #5
10013744:	d5d5      	bpl.n	100136f2 <__aeabi_fsub+0xba>
10013746:	3401      	adds	r4, #1
10013748:	2cff      	cmp	r4, #255	; 0xff
1001374a:	d06d      	beq.n	10013828 <__aeabi_fsub+0x1f0>
1001374c:	2201      	movs	r2, #1
1001374e:	487b      	ldr	r0, [pc, #492]	; (1001393c <__aeabi_fsub+0x304>)
10013750:	401a      	ands	r2, r3
10013752:	085b      	lsrs	r3, r3, #1
10013754:	4003      	ands	r3, r0
10013756:	4313      	orrs	r3, r2
10013758:	000d      	movs	r5, r1
1001375a:	e788      	b.n	1001366e <__aeabi_fsub+0x36>
1001375c:	2a00      	cmp	r2, #0
1001375e:	d000      	beq.n	10013762 <__aeabi_fsub+0x12a>
10013760:	e77a      	b.n	10013658 <__aeabi_fsub+0x20>
10013762:	e777      	b.n	10013654 <__aeabi_fsub+0x1c>
10013764:	1e03      	subs	r3, r0, #0
10013766:	d1c5      	bne.n	100136f4 <__aeabi_fsub+0xbc>
10013768:	2500      	movs	r5, #0
1001376a:	027b      	lsls	r3, r7, #9
1001376c:	0a5b      	lsrs	r3, r3, #9
1001376e:	b2e4      	uxtb	r4, r4
10013770:	e78f      	b.n	10013692 <__aeabi_fsub+0x5a>
10013772:	3801      	subs	r0, #1
10013774:	2800      	cmp	r0, #0
10013776:	d0a4      	beq.n	100136c2 <__aeabi_fsub+0x8a>
10013778:	2cff      	cmp	r4, #255	; 0xff
1001377a:	d197      	bne.n	100136ac <__aeabi_fsub+0x74>
1001377c:	e777      	b.n	1001366e <__aeabi_fsub+0x36>
1001377e:	2a00      	cmp	r2, #0
10013780:	d100      	bne.n	10013784 <__aeabi_fsub+0x14c>
10013782:	e774      	b.n	1001366e <__aeabi_fsub+0x36>
10013784:	3801      	subs	r0, #1
10013786:	2800      	cmp	r0, #0
10013788:	d0da      	beq.n	10013740 <__aeabi_fsub+0x108>
1001378a:	2cff      	cmp	r4, #255	; 0xff
1001378c:	d1cd      	bne.n	1001372a <__aeabi_fsub+0xf2>
1001378e:	e76e      	b.n	1001366e <__aeabi_fsub+0x36>
10013790:	2800      	cmp	r0, #0
10013792:	d121      	bne.n	100137d8 <__aeabi_fsub+0x1a0>
10013794:	1c60      	adds	r0, r4, #1
10013796:	b2c0      	uxtb	r0, r0
10013798:	2801      	cmp	r0, #1
1001379a:	dd58      	ble.n	1001384e <__aeabi_fsub+0x216>
1001379c:	2780      	movs	r7, #128	; 0x80
1001379e:	1a9e      	subs	r6, r3, r2
100137a0:	04ff      	lsls	r7, r7, #19
100137a2:	4037      	ands	r7, r6
100137a4:	d02f      	beq.n	10013806 <__aeabi_fsub+0x1ce>
100137a6:	1ad6      	subs	r6, r2, r3
100137a8:	000d      	movs	r5, r1
100137aa:	e78f      	b.n	100136cc <__aeabi_fsub+0x94>
100137ac:	2301      	movs	r3, #1
100137ae:	401d      	ands	r5, r3
100137b0:	2300      	movs	r3, #0
100137b2:	e76e      	b.n	10013692 <__aeabi_fsub+0x5a>
100137b4:	4b62      	ldr	r3, [pc, #392]	; (10013940 <__aeabi_fsub+0x308>)
100137b6:	1a24      	subs	r4, r4, r0
100137b8:	4033      	ands	r3, r6
100137ba:	e758      	b.n	1001366e <__aeabi_fsub+0x36>
100137bc:	2800      	cmp	r0, #0
100137be:	d151      	bne.n	10013864 <__aeabi_fsub+0x22c>
100137c0:	1c60      	adds	r0, r4, #1
100137c2:	b2c6      	uxtb	r6, r0
100137c4:	2e01      	cmp	r6, #1
100137c6:	dd33      	ble.n	10013830 <__aeabi_fsub+0x1f8>
100137c8:	28ff      	cmp	r0, #255	; 0xff
100137ca:	d02d      	beq.n	10013828 <__aeabi_fsub+0x1f0>
100137cc:	189b      	adds	r3, r3, r2
100137ce:	085b      	lsrs	r3, r3, #1
100137d0:	0004      	movs	r4, r0
100137d2:	e74c      	b.n	1001366e <__aeabi_fsub+0x36>
100137d4:	2201      	movs	r2, #1
100137d6:	e774      	b.n	100136c2 <__aeabi_fsub+0x8a>
100137d8:	2c00      	cmp	r4, #0
100137da:	d01a      	beq.n	10013812 <__aeabi_fsub+0x1da>
100137dc:	2eff      	cmp	r6, #255	; 0xff
100137de:	d01f      	beq.n	10013820 <__aeabi_fsub+0x1e8>
100137e0:	2480      	movs	r4, #128	; 0x80
100137e2:	04e4      	lsls	r4, r4, #19
100137e4:	4240      	negs	r0, r0
100137e6:	4323      	orrs	r3, r4
100137e8:	281b      	cmp	r0, #27
100137ea:	dd00      	ble.n	100137ee <__aeabi_fsub+0x1b6>
100137ec:	e096      	b.n	1001391c <__aeabi_fsub+0x2e4>
100137ee:	001d      	movs	r5, r3
100137f0:	2420      	movs	r4, #32
100137f2:	40c5      	lsrs	r5, r0
100137f4:	1a20      	subs	r0, r4, r0
100137f6:	4083      	lsls	r3, r0
100137f8:	1e58      	subs	r0, r3, #1
100137fa:	4183      	sbcs	r3, r0
100137fc:	432b      	orrs	r3, r5
100137fe:	1ad3      	subs	r3, r2, r3
10013800:	0034      	movs	r4, r6
10013802:	000d      	movs	r5, r1
10013804:	e75e      	b.n	100136c4 <__aeabi_fsub+0x8c>
10013806:	2e00      	cmp	r6, #0
10013808:	d000      	beq.n	1001380c <__aeabi_fsub+0x1d4>
1001380a:	e75f      	b.n	100136cc <__aeabi_fsub+0x94>
1001380c:	2500      	movs	r5, #0
1001380e:	2400      	movs	r4, #0
10013810:	e7ab      	b.n	1001376a <__aeabi_fsub+0x132>
10013812:	2b00      	cmp	r3, #0
10013814:	d044      	beq.n	100138a0 <__aeabi_fsub+0x268>
10013816:	43c0      	mvns	r0, r0
10013818:	2800      	cmp	r0, #0
1001381a:	d0f0      	beq.n	100137fe <__aeabi_fsub+0x1c6>
1001381c:	2eff      	cmp	r6, #255	; 0xff
1001381e:	d1e3      	bne.n	100137e8 <__aeabi_fsub+0x1b0>
10013820:	0013      	movs	r3, r2
10013822:	24ff      	movs	r4, #255	; 0xff
10013824:	000d      	movs	r5, r1
10013826:	e722      	b.n	1001366e <__aeabi_fsub+0x36>
10013828:	000d      	movs	r5, r1
1001382a:	24ff      	movs	r4, #255	; 0xff
1001382c:	2300      	movs	r3, #0
1001382e:	e730      	b.n	10013692 <__aeabi_fsub+0x5a>
10013830:	2c00      	cmp	r4, #0
10013832:	d15d      	bne.n	100138f0 <__aeabi_fsub+0x2b8>
10013834:	2b00      	cmp	r3, #0
10013836:	d07d      	beq.n	10013934 <__aeabi_fsub+0x2fc>
10013838:	2a00      	cmp	r2, #0
1001383a:	d100      	bne.n	1001383e <__aeabi_fsub+0x206>
1001383c:	e717      	b.n	1001366e <__aeabi_fsub+0x36>
1001383e:	189b      	adds	r3, r3, r2
10013840:	015a      	lsls	r2, r3, #5
10013842:	d400      	bmi.n	10013846 <__aeabi_fsub+0x20e>
10013844:	e756      	b.n	100136f4 <__aeabi_fsub+0xbc>
10013846:	4a3e      	ldr	r2, [pc, #248]	; (10013940 <__aeabi_fsub+0x308>)
10013848:	0004      	movs	r4, r0
1001384a:	4013      	ands	r3, r2
1001384c:	e70f      	b.n	1001366e <__aeabi_fsub+0x36>
1001384e:	2c00      	cmp	r4, #0
10013850:	d11e      	bne.n	10013890 <__aeabi_fsub+0x258>
10013852:	2b00      	cmp	r3, #0
10013854:	d12f      	bne.n	100138b6 <__aeabi_fsub+0x27e>
10013856:	2a00      	cmp	r2, #0
10013858:	d065      	beq.n	10013926 <__aeabi_fsub+0x2ee>
1001385a:	0013      	movs	r3, r2
1001385c:	000d      	movs	r5, r1
1001385e:	e706      	b.n	1001366e <__aeabi_fsub+0x36>
10013860:	2201      	movs	r2, #1
10013862:	e76d      	b.n	10013740 <__aeabi_fsub+0x108>
10013864:	2c00      	cmp	r4, #0
10013866:	d11f      	bne.n	100138a8 <__aeabi_fsub+0x270>
10013868:	2b00      	cmp	r3, #0
1001386a:	d059      	beq.n	10013920 <__aeabi_fsub+0x2e8>
1001386c:	43c0      	mvns	r0, r0
1001386e:	2800      	cmp	r0, #0
10013870:	d00b      	beq.n	1001388a <__aeabi_fsub+0x252>
10013872:	2eff      	cmp	r6, #255	; 0xff
10013874:	d04f      	beq.n	10013916 <__aeabi_fsub+0x2de>
10013876:	281b      	cmp	r0, #27
10013878:	dc5e      	bgt.n	10013938 <__aeabi_fsub+0x300>
1001387a:	001d      	movs	r5, r3
1001387c:	2420      	movs	r4, #32
1001387e:	40c5      	lsrs	r5, r0
10013880:	1a20      	subs	r0, r4, r0
10013882:	4083      	lsls	r3, r0
10013884:	1e58      	subs	r0, r3, #1
10013886:	4183      	sbcs	r3, r0
10013888:	432b      	orrs	r3, r5
1001388a:	189b      	adds	r3, r3, r2
1001388c:	0034      	movs	r4, r6
1001388e:	e758      	b.n	10013742 <__aeabi_fsub+0x10a>
10013890:	2b00      	cmp	r3, #0
10013892:	d11c      	bne.n	100138ce <__aeabi_fsub+0x296>
10013894:	2a00      	cmp	r2, #0
10013896:	d049      	beq.n	1001392c <__aeabi_fsub+0x2f4>
10013898:	0013      	movs	r3, r2
1001389a:	000d      	movs	r5, r1
1001389c:	24ff      	movs	r4, #255	; 0xff
1001389e:	e6e6      	b.n	1001366e <__aeabi_fsub+0x36>
100138a0:	0013      	movs	r3, r2
100138a2:	0034      	movs	r4, r6
100138a4:	000d      	movs	r5, r1
100138a6:	e6e2      	b.n	1001366e <__aeabi_fsub+0x36>
100138a8:	2eff      	cmp	r6, #255	; 0xff
100138aa:	d034      	beq.n	10013916 <__aeabi_fsub+0x2de>
100138ac:	2480      	movs	r4, #128	; 0x80
100138ae:	04e4      	lsls	r4, r4, #19
100138b0:	4240      	negs	r0, r0
100138b2:	4323      	orrs	r3, r4
100138b4:	e7df      	b.n	10013876 <__aeabi_fsub+0x23e>
100138b6:	2a00      	cmp	r2, #0
100138b8:	d100      	bne.n	100138bc <__aeabi_fsub+0x284>
100138ba:	e6d8      	b.n	1001366e <__aeabi_fsub+0x36>
100138bc:	2780      	movs	r7, #128	; 0x80
100138be:	1a98      	subs	r0, r3, r2
100138c0:	04ff      	lsls	r7, r7, #19
100138c2:	4007      	ands	r7, r0
100138c4:	d100      	bne.n	100138c8 <__aeabi_fsub+0x290>
100138c6:	e74d      	b.n	10013764 <__aeabi_fsub+0x12c>
100138c8:	1ad3      	subs	r3, r2, r3
100138ca:	000d      	movs	r5, r1
100138cc:	e6cf      	b.n	1001366e <__aeabi_fsub+0x36>
100138ce:	24ff      	movs	r4, #255	; 0xff
100138d0:	2a00      	cmp	r2, #0
100138d2:	d100      	bne.n	100138d6 <__aeabi_fsub+0x29e>
100138d4:	e6cb      	b.n	1001366e <__aeabi_fsub+0x36>
100138d6:	2080      	movs	r0, #128	; 0x80
100138d8:	08db      	lsrs	r3, r3, #3
100138da:	03c0      	lsls	r0, r0, #15
100138dc:	4203      	tst	r3, r0
100138de:	d004      	beq.n	100138ea <__aeabi_fsub+0x2b2>
100138e0:	08d2      	lsrs	r2, r2, #3
100138e2:	4202      	tst	r2, r0
100138e4:	d101      	bne.n	100138ea <__aeabi_fsub+0x2b2>
100138e6:	0013      	movs	r3, r2
100138e8:	000d      	movs	r5, r1
100138ea:	00db      	lsls	r3, r3, #3
100138ec:	24ff      	movs	r4, #255	; 0xff
100138ee:	e6be      	b.n	1001366e <__aeabi_fsub+0x36>
100138f0:	2b00      	cmp	r3, #0
100138f2:	d010      	beq.n	10013916 <__aeabi_fsub+0x2de>
100138f4:	24ff      	movs	r4, #255	; 0xff
100138f6:	2a00      	cmp	r2, #0
100138f8:	d100      	bne.n	100138fc <__aeabi_fsub+0x2c4>
100138fa:	e6b8      	b.n	1001366e <__aeabi_fsub+0x36>
100138fc:	2080      	movs	r0, #128	; 0x80
100138fe:	08db      	lsrs	r3, r3, #3
10013900:	03c0      	lsls	r0, r0, #15
10013902:	4203      	tst	r3, r0
10013904:	d003      	beq.n	1001390e <__aeabi_fsub+0x2d6>
10013906:	08d2      	lsrs	r2, r2, #3
10013908:	4202      	tst	r2, r0
1001390a:	d100      	bne.n	1001390e <__aeabi_fsub+0x2d6>
1001390c:	0013      	movs	r3, r2
1001390e:	00db      	lsls	r3, r3, #3
10013910:	000d      	movs	r5, r1
10013912:	24ff      	movs	r4, #255	; 0xff
10013914:	e6ab      	b.n	1001366e <__aeabi_fsub+0x36>
10013916:	0013      	movs	r3, r2
10013918:	24ff      	movs	r4, #255	; 0xff
1001391a:	e6a8      	b.n	1001366e <__aeabi_fsub+0x36>
1001391c:	2301      	movs	r3, #1
1001391e:	e76e      	b.n	100137fe <__aeabi_fsub+0x1c6>
10013920:	0013      	movs	r3, r2
10013922:	0034      	movs	r4, r6
10013924:	e6a3      	b.n	1001366e <__aeabi_fsub+0x36>
10013926:	2700      	movs	r7, #0
10013928:	2500      	movs	r5, #0
1001392a:	e71e      	b.n	1001376a <__aeabi_fsub+0x132>
1001392c:	2780      	movs	r7, #128	; 0x80
1001392e:	2500      	movs	r5, #0
10013930:	03ff      	lsls	r7, r7, #15
10013932:	e6e9      	b.n	10013708 <__aeabi_fsub+0xd0>
10013934:	0013      	movs	r3, r2
10013936:	e69a      	b.n	1001366e <__aeabi_fsub+0x36>
10013938:	2301      	movs	r3, #1
1001393a:	e7a6      	b.n	1001388a <__aeabi_fsub+0x252>
1001393c:	7dffffff 	.word	0x7dffffff
10013940:	fbffffff 	.word	0xfbffffff

10013944 <__aeabi_f2iz>:
10013944:	0243      	lsls	r3, r0, #9
10013946:	0a59      	lsrs	r1, r3, #9
10013948:	0043      	lsls	r3, r0, #1
1001394a:	0fc2      	lsrs	r2, r0, #31
1001394c:	0e1b      	lsrs	r3, r3, #24
1001394e:	2000      	movs	r0, #0
10013950:	2b7e      	cmp	r3, #126	; 0x7e
10013952:	dd0e      	ble.n	10013972 <__aeabi_f2iz+0x2e>
10013954:	2b9d      	cmp	r3, #157	; 0x9d
10013956:	dc0d      	bgt.n	10013974 <__aeabi_f2iz+0x30>
10013958:	2080      	movs	r0, #128	; 0x80
1001395a:	0400      	lsls	r0, r0, #16
1001395c:	4301      	orrs	r1, r0
1001395e:	2b95      	cmp	r3, #149	; 0x95
10013960:	dc0b      	bgt.n	1001397a <__aeabi_f2iz+0x36>
10013962:	2096      	movs	r0, #150	; 0x96
10013964:	1ac3      	subs	r3, r0, r3
10013966:	40d9      	lsrs	r1, r3
10013968:	000b      	movs	r3, r1
1001396a:	4258      	negs	r0, r3
1001396c:	2a00      	cmp	r2, #0
1001396e:	d100      	bne.n	10013972 <__aeabi_f2iz+0x2e>
10013970:	0018      	movs	r0, r3
10013972:	4770      	bx	lr
10013974:	4b03      	ldr	r3, [pc, #12]	; (10013984 <__aeabi_f2iz+0x40>)
10013976:	18d0      	adds	r0, r2, r3
10013978:	e7fb      	b.n	10013972 <__aeabi_f2iz+0x2e>
1001397a:	3b96      	subs	r3, #150	; 0x96
1001397c:	4099      	lsls	r1, r3
1001397e:	000b      	movs	r3, r1
10013980:	e7f3      	b.n	1001396a <__aeabi_f2iz+0x26>
10013982:	46c0      	nop			; (mov r8, r8)
10013984:	7fffffff 	.word	0x7fffffff

10013988 <__aeabi_i2f>:
10013988:	b570      	push	{r4, r5, r6, lr}
1001398a:	2800      	cmp	r0, #0
1001398c:	d030      	beq.n	100139f0 <__aeabi_i2f+0x68>
1001398e:	17c3      	asrs	r3, r0, #31
10013990:	18c5      	adds	r5, r0, r3
10013992:	405d      	eors	r5, r3
10013994:	0fc4      	lsrs	r4, r0, #31
10013996:	0028      	movs	r0, r5
10013998:	f001 ff4a 	bl	10015830 <__clzsi2>
1001399c:	239e      	movs	r3, #158	; 0x9e
1001399e:	1a1b      	subs	r3, r3, r0
100139a0:	2b96      	cmp	r3, #150	; 0x96
100139a2:	dc0d      	bgt.n	100139c0 <__aeabi_i2f+0x38>
100139a4:	2296      	movs	r2, #150	; 0x96
100139a6:	1ad2      	subs	r2, r2, r3
100139a8:	4095      	lsls	r5, r2
100139aa:	026a      	lsls	r2, r5, #9
100139ac:	0a52      	lsrs	r2, r2, #9
100139ae:	b2d8      	uxtb	r0, r3
100139b0:	0252      	lsls	r2, r2, #9
100139b2:	05c0      	lsls	r0, r0, #23
100139b4:	0a52      	lsrs	r2, r2, #9
100139b6:	07e4      	lsls	r4, r4, #31
100139b8:	4302      	orrs	r2, r0
100139ba:	4322      	orrs	r2, r4
100139bc:	0010      	movs	r0, r2
100139be:	bd70      	pop	{r4, r5, r6, pc}
100139c0:	2b99      	cmp	r3, #153	; 0x99
100139c2:	dc19      	bgt.n	100139f8 <__aeabi_i2f+0x70>
100139c4:	2299      	movs	r2, #153	; 0x99
100139c6:	1ad2      	subs	r2, r2, r3
100139c8:	4095      	lsls	r5, r2
100139ca:	4a12      	ldr	r2, [pc, #72]	; (10013a14 <__aeabi_i2f+0x8c>)
100139cc:	402a      	ands	r2, r5
100139ce:	0769      	lsls	r1, r5, #29
100139d0:	d004      	beq.n	100139dc <__aeabi_i2f+0x54>
100139d2:	210f      	movs	r1, #15
100139d4:	400d      	ands	r5, r1
100139d6:	2d04      	cmp	r5, #4
100139d8:	d000      	beq.n	100139dc <__aeabi_i2f+0x54>
100139da:	3204      	adds	r2, #4
100139dc:	0151      	lsls	r1, r2, #5
100139de:	d503      	bpl.n	100139e8 <__aeabi_i2f+0x60>
100139e0:	4b0c      	ldr	r3, [pc, #48]	; (10013a14 <__aeabi_i2f+0x8c>)
100139e2:	401a      	ands	r2, r3
100139e4:	239f      	movs	r3, #159	; 0x9f
100139e6:	1a1b      	subs	r3, r3, r0
100139e8:	0192      	lsls	r2, r2, #6
100139ea:	0a52      	lsrs	r2, r2, #9
100139ec:	b2d8      	uxtb	r0, r3
100139ee:	e7df      	b.n	100139b0 <__aeabi_i2f+0x28>
100139f0:	2400      	movs	r4, #0
100139f2:	2000      	movs	r0, #0
100139f4:	2200      	movs	r2, #0
100139f6:	e7db      	b.n	100139b0 <__aeabi_i2f+0x28>
100139f8:	2205      	movs	r2, #5
100139fa:	002e      	movs	r6, r5
100139fc:	1a12      	subs	r2, r2, r0
100139fe:	21b9      	movs	r1, #185	; 0xb9
10013a00:	40d6      	lsrs	r6, r2
10013a02:	002a      	movs	r2, r5
10013a04:	1ac9      	subs	r1, r1, r3
10013a06:	408a      	lsls	r2, r1
10013a08:	1e55      	subs	r5, r2, #1
10013a0a:	41aa      	sbcs	r2, r5
10013a0c:	0035      	movs	r5, r6
10013a0e:	4315      	orrs	r5, r2
10013a10:	e7db      	b.n	100139ca <__aeabi_i2f+0x42>
10013a12:	46c0      	nop			; (mov r8, r8)
10013a14:	fbffffff 	.word	0xfbffffff

10013a18 <__aeabi_ui2f>:
10013a18:	b570      	push	{r4, r5, r6, lr}
10013a1a:	1e04      	subs	r4, r0, #0
10013a1c:	d028      	beq.n	10013a70 <__aeabi_ui2f+0x58>
10013a1e:	f001 ff07 	bl	10015830 <__clzsi2>
10013a22:	239e      	movs	r3, #158	; 0x9e
10013a24:	1a1b      	subs	r3, r3, r0
10013a26:	2b96      	cmp	r3, #150	; 0x96
10013a28:	dc0a      	bgt.n	10013a40 <__aeabi_ui2f+0x28>
10013a2a:	2296      	movs	r2, #150	; 0x96
10013a2c:	1ad2      	subs	r2, r2, r3
10013a2e:	4094      	lsls	r4, r2
10013a30:	0262      	lsls	r2, r4, #9
10013a32:	0a52      	lsrs	r2, r2, #9
10013a34:	b2d8      	uxtb	r0, r3
10013a36:	0252      	lsls	r2, r2, #9
10013a38:	0a52      	lsrs	r2, r2, #9
10013a3a:	05c0      	lsls	r0, r0, #23
10013a3c:	4310      	orrs	r0, r2
10013a3e:	bd70      	pop	{r4, r5, r6, pc}
10013a40:	2b99      	cmp	r3, #153	; 0x99
10013a42:	dc18      	bgt.n	10013a76 <__aeabi_ui2f+0x5e>
10013a44:	2299      	movs	r2, #153	; 0x99
10013a46:	1ad2      	subs	r2, r2, r3
10013a48:	4094      	lsls	r4, r2
10013a4a:	4a11      	ldr	r2, [pc, #68]	; (10013a90 <__aeabi_ui2f+0x78>)
10013a4c:	4022      	ands	r2, r4
10013a4e:	0761      	lsls	r1, r4, #29
10013a50:	d004      	beq.n	10013a5c <__aeabi_ui2f+0x44>
10013a52:	210f      	movs	r1, #15
10013a54:	400c      	ands	r4, r1
10013a56:	2c04      	cmp	r4, #4
10013a58:	d000      	beq.n	10013a5c <__aeabi_ui2f+0x44>
10013a5a:	3204      	adds	r2, #4
10013a5c:	0151      	lsls	r1, r2, #5
10013a5e:	d503      	bpl.n	10013a68 <__aeabi_ui2f+0x50>
10013a60:	4b0b      	ldr	r3, [pc, #44]	; (10013a90 <__aeabi_ui2f+0x78>)
10013a62:	401a      	ands	r2, r3
10013a64:	239f      	movs	r3, #159	; 0x9f
10013a66:	1a1b      	subs	r3, r3, r0
10013a68:	0192      	lsls	r2, r2, #6
10013a6a:	0a52      	lsrs	r2, r2, #9
10013a6c:	b2d8      	uxtb	r0, r3
10013a6e:	e7e2      	b.n	10013a36 <__aeabi_ui2f+0x1e>
10013a70:	2000      	movs	r0, #0
10013a72:	2200      	movs	r2, #0
10013a74:	e7df      	b.n	10013a36 <__aeabi_ui2f+0x1e>
10013a76:	2205      	movs	r2, #5
10013a78:	0025      	movs	r5, r4
10013a7a:	1a12      	subs	r2, r2, r0
10013a7c:	21b9      	movs	r1, #185	; 0xb9
10013a7e:	40d5      	lsrs	r5, r2
10013a80:	0022      	movs	r2, r4
10013a82:	1ac9      	subs	r1, r1, r3
10013a84:	408a      	lsls	r2, r1
10013a86:	1e54      	subs	r4, r2, #1
10013a88:	41a2      	sbcs	r2, r4
10013a8a:	002c      	movs	r4, r5
10013a8c:	4314      	orrs	r4, r2
10013a8e:	e7dc      	b.n	10013a4a <__aeabi_ui2f+0x32>
10013a90:	fbffffff 	.word	0xfbffffff

10013a94 <__aeabi_dadd>:
10013a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013a96:	4656      	mov	r6, sl
10013a98:	465f      	mov	r7, fp
10013a9a:	464d      	mov	r5, r9
10013a9c:	4644      	mov	r4, r8
10013a9e:	b4f0      	push	{r4, r5, r6, r7}
10013aa0:	000f      	movs	r7, r1
10013aa2:	0ffd      	lsrs	r5, r7, #31
10013aa4:	46aa      	mov	sl, r5
10013aa6:	0309      	lsls	r1, r1, #12
10013aa8:	007c      	lsls	r4, r7, #1
10013aaa:	002e      	movs	r6, r5
10013aac:	005f      	lsls	r7, r3, #1
10013aae:	0f45      	lsrs	r5, r0, #29
10013ab0:	0a49      	lsrs	r1, r1, #9
10013ab2:	0d7f      	lsrs	r7, r7, #21
10013ab4:	4329      	orrs	r1, r5
10013ab6:	00c5      	lsls	r5, r0, #3
10013ab8:	0318      	lsls	r0, r3, #12
10013aba:	46bc      	mov	ip, r7
10013abc:	0a40      	lsrs	r0, r0, #9
10013abe:	0f57      	lsrs	r7, r2, #29
10013ac0:	0d64      	lsrs	r4, r4, #21
10013ac2:	0fdb      	lsrs	r3, r3, #31
10013ac4:	4338      	orrs	r0, r7
10013ac6:	00d2      	lsls	r2, r2, #3
10013ac8:	459a      	cmp	sl, r3
10013aca:	d100      	bne.n	10013ace <__aeabi_dadd+0x3a>
10013acc:	e0aa      	b.n	10013c24 <__aeabi_dadd+0x190>
10013ace:	4666      	mov	r6, ip
10013ad0:	1ba6      	subs	r6, r4, r6
10013ad2:	2e00      	cmp	r6, #0
10013ad4:	dc00      	bgt.n	10013ad8 <__aeabi_dadd+0x44>
10013ad6:	e0ff      	b.n	10013cd8 <__aeabi_dadd+0x244>
10013ad8:	4663      	mov	r3, ip
10013ada:	2b00      	cmp	r3, #0
10013adc:	d139      	bne.n	10013b52 <__aeabi_dadd+0xbe>
10013ade:	0003      	movs	r3, r0
10013ae0:	4313      	orrs	r3, r2
10013ae2:	d000      	beq.n	10013ae6 <__aeabi_dadd+0x52>
10013ae4:	e0d9      	b.n	10013c9a <__aeabi_dadd+0x206>
10013ae6:	076b      	lsls	r3, r5, #29
10013ae8:	d009      	beq.n	10013afe <__aeabi_dadd+0x6a>
10013aea:	230f      	movs	r3, #15
10013aec:	402b      	ands	r3, r5
10013aee:	2b04      	cmp	r3, #4
10013af0:	d005      	beq.n	10013afe <__aeabi_dadd+0x6a>
10013af2:	1d2b      	adds	r3, r5, #4
10013af4:	42ab      	cmp	r3, r5
10013af6:	41ad      	sbcs	r5, r5
10013af8:	426d      	negs	r5, r5
10013afa:	1949      	adds	r1, r1, r5
10013afc:	001d      	movs	r5, r3
10013afe:	020b      	lsls	r3, r1, #8
10013b00:	d400      	bmi.n	10013b04 <__aeabi_dadd+0x70>
10013b02:	e082      	b.n	10013c0a <__aeabi_dadd+0x176>
10013b04:	4bca      	ldr	r3, [pc, #808]	; (10013e30 <__aeabi_dadd+0x39c>)
10013b06:	3401      	adds	r4, #1
10013b08:	429c      	cmp	r4, r3
10013b0a:	d100      	bne.n	10013b0e <__aeabi_dadd+0x7a>
10013b0c:	e0fe      	b.n	10013d0c <__aeabi_dadd+0x278>
10013b0e:	000a      	movs	r2, r1
10013b10:	4656      	mov	r6, sl
10013b12:	4bc8      	ldr	r3, [pc, #800]	; (10013e34 <__aeabi_dadd+0x3a0>)
10013b14:	08ed      	lsrs	r5, r5, #3
10013b16:	401a      	ands	r2, r3
10013b18:	0750      	lsls	r0, r2, #29
10013b1a:	0564      	lsls	r4, r4, #21
10013b1c:	0252      	lsls	r2, r2, #9
10013b1e:	4305      	orrs	r5, r0
10013b20:	0b12      	lsrs	r2, r2, #12
10013b22:	0d64      	lsrs	r4, r4, #21
10013b24:	2100      	movs	r1, #0
10013b26:	0312      	lsls	r2, r2, #12
10013b28:	0d0b      	lsrs	r3, r1, #20
10013b2a:	051b      	lsls	r3, r3, #20
10013b2c:	0564      	lsls	r4, r4, #21
10013b2e:	0b12      	lsrs	r2, r2, #12
10013b30:	431a      	orrs	r2, r3
10013b32:	0863      	lsrs	r3, r4, #1
10013b34:	4cc0      	ldr	r4, [pc, #768]	; (10013e38 <__aeabi_dadd+0x3a4>)
10013b36:	07f6      	lsls	r6, r6, #31
10013b38:	4014      	ands	r4, r2
10013b3a:	431c      	orrs	r4, r3
10013b3c:	0064      	lsls	r4, r4, #1
10013b3e:	0864      	lsrs	r4, r4, #1
10013b40:	4334      	orrs	r4, r6
10013b42:	0028      	movs	r0, r5
10013b44:	0021      	movs	r1, r4
10013b46:	bc3c      	pop	{r2, r3, r4, r5}
10013b48:	4690      	mov	r8, r2
10013b4a:	4699      	mov	r9, r3
10013b4c:	46a2      	mov	sl, r4
10013b4e:	46ab      	mov	fp, r5
10013b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013b52:	4bb7      	ldr	r3, [pc, #732]	; (10013e30 <__aeabi_dadd+0x39c>)
10013b54:	429c      	cmp	r4, r3
10013b56:	d0c6      	beq.n	10013ae6 <__aeabi_dadd+0x52>
10013b58:	2380      	movs	r3, #128	; 0x80
10013b5a:	041b      	lsls	r3, r3, #16
10013b5c:	4318      	orrs	r0, r3
10013b5e:	2e38      	cmp	r6, #56	; 0x38
10013b60:	dd00      	ble.n	10013b64 <__aeabi_dadd+0xd0>
10013b62:	e0eb      	b.n	10013d3c <__aeabi_dadd+0x2a8>
10013b64:	2e1f      	cmp	r6, #31
10013b66:	dd00      	ble.n	10013b6a <__aeabi_dadd+0xd6>
10013b68:	e11e      	b.n	10013da8 <__aeabi_dadd+0x314>
10013b6a:	2320      	movs	r3, #32
10013b6c:	1b9b      	subs	r3, r3, r6
10013b6e:	469c      	mov	ip, r3
10013b70:	0003      	movs	r3, r0
10013b72:	4667      	mov	r7, ip
10013b74:	40bb      	lsls	r3, r7
10013b76:	4698      	mov	r8, r3
10013b78:	0013      	movs	r3, r2
10013b7a:	4647      	mov	r7, r8
10013b7c:	40f3      	lsrs	r3, r6
10013b7e:	433b      	orrs	r3, r7
10013b80:	4667      	mov	r7, ip
10013b82:	40ba      	lsls	r2, r7
10013b84:	1e57      	subs	r7, r2, #1
10013b86:	41ba      	sbcs	r2, r7
10013b88:	4313      	orrs	r3, r2
10013b8a:	0002      	movs	r2, r0
10013b8c:	40f2      	lsrs	r2, r6
10013b8e:	1aeb      	subs	r3, r5, r3
10013b90:	429d      	cmp	r5, r3
10013b92:	41b6      	sbcs	r6, r6
10013b94:	001d      	movs	r5, r3
10013b96:	1a8a      	subs	r2, r1, r2
10013b98:	4276      	negs	r6, r6
10013b9a:	1b91      	subs	r1, r2, r6
10013b9c:	020b      	lsls	r3, r1, #8
10013b9e:	d531      	bpl.n	10013c04 <__aeabi_dadd+0x170>
10013ba0:	024a      	lsls	r2, r1, #9
10013ba2:	0a56      	lsrs	r6, r2, #9
10013ba4:	2e00      	cmp	r6, #0
10013ba6:	d100      	bne.n	10013baa <__aeabi_dadd+0x116>
10013ba8:	e0b4      	b.n	10013d14 <__aeabi_dadd+0x280>
10013baa:	0030      	movs	r0, r6
10013bac:	f001 fe40 	bl	10015830 <__clzsi2>
10013bb0:	0003      	movs	r3, r0
10013bb2:	3b08      	subs	r3, #8
10013bb4:	2b1f      	cmp	r3, #31
10013bb6:	dd00      	ble.n	10013bba <__aeabi_dadd+0x126>
10013bb8:	e0b5      	b.n	10013d26 <__aeabi_dadd+0x292>
10013bba:	2220      	movs	r2, #32
10013bbc:	0029      	movs	r1, r5
10013bbe:	1ad2      	subs	r2, r2, r3
10013bc0:	40d1      	lsrs	r1, r2
10013bc2:	409e      	lsls	r6, r3
10013bc4:	000a      	movs	r2, r1
10013bc6:	409d      	lsls	r5, r3
10013bc8:	4332      	orrs	r2, r6
10013bca:	429c      	cmp	r4, r3
10013bcc:	dd00      	ble.n	10013bd0 <__aeabi_dadd+0x13c>
10013bce:	e0b1      	b.n	10013d34 <__aeabi_dadd+0x2a0>
10013bd0:	1b1c      	subs	r4, r3, r4
10013bd2:	1c63      	adds	r3, r4, #1
10013bd4:	2b1f      	cmp	r3, #31
10013bd6:	dd00      	ble.n	10013bda <__aeabi_dadd+0x146>
10013bd8:	e0d5      	b.n	10013d86 <__aeabi_dadd+0x2f2>
10013bda:	2120      	movs	r1, #32
10013bdc:	0014      	movs	r4, r2
10013bde:	0028      	movs	r0, r5
10013be0:	1ac9      	subs	r1, r1, r3
10013be2:	408c      	lsls	r4, r1
10013be4:	40d8      	lsrs	r0, r3
10013be6:	408d      	lsls	r5, r1
10013be8:	4304      	orrs	r4, r0
10013bea:	40da      	lsrs	r2, r3
10013bec:	1e68      	subs	r0, r5, #1
10013bee:	4185      	sbcs	r5, r0
10013bf0:	0011      	movs	r1, r2
10013bf2:	4325      	orrs	r5, r4
10013bf4:	2400      	movs	r4, #0
10013bf6:	e776      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013bf8:	4641      	mov	r1, r8
10013bfa:	4331      	orrs	r1, r6
10013bfc:	d100      	bne.n	10013c00 <__aeabi_dadd+0x16c>
10013bfe:	e234      	b.n	1001406a <__aeabi_dadd+0x5d6>
10013c00:	0031      	movs	r1, r6
10013c02:	4645      	mov	r5, r8
10013c04:	076b      	lsls	r3, r5, #29
10013c06:	d000      	beq.n	10013c0a <__aeabi_dadd+0x176>
10013c08:	e76f      	b.n	10013aea <__aeabi_dadd+0x56>
10013c0a:	4656      	mov	r6, sl
10013c0c:	0748      	lsls	r0, r1, #29
10013c0e:	08ed      	lsrs	r5, r5, #3
10013c10:	08c9      	lsrs	r1, r1, #3
10013c12:	4305      	orrs	r5, r0
10013c14:	4b86      	ldr	r3, [pc, #536]	; (10013e30 <__aeabi_dadd+0x39c>)
10013c16:	429c      	cmp	r4, r3
10013c18:	d035      	beq.n	10013c86 <__aeabi_dadd+0x1f2>
10013c1a:	030a      	lsls	r2, r1, #12
10013c1c:	0564      	lsls	r4, r4, #21
10013c1e:	0b12      	lsrs	r2, r2, #12
10013c20:	0d64      	lsrs	r4, r4, #21
10013c22:	e77f      	b.n	10013b24 <__aeabi_dadd+0x90>
10013c24:	4663      	mov	r3, ip
10013c26:	1ae3      	subs	r3, r4, r3
10013c28:	469b      	mov	fp, r3
10013c2a:	2b00      	cmp	r3, #0
10013c2c:	dc00      	bgt.n	10013c30 <__aeabi_dadd+0x19c>
10013c2e:	e08b      	b.n	10013d48 <__aeabi_dadd+0x2b4>
10013c30:	4667      	mov	r7, ip
10013c32:	2f00      	cmp	r7, #0
10013c34:	d03c      	beq.n	10013cb0 <__aeabi_dadd+0x21c>
10013c36:	4f7e      	ldr	r7, [pc, #504]	; (10013e30 <__aeabi_dadd+0x39c>)
10013c38:	42bc      	cmp	r4, r7
10013c3a:	d100      	bne.n	10013c3e <__aeabi_dadd+0x1aa>
10013c3c:	e753      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013c3e:	2780      	movs	r7, #128	; 0x80
10013c40:	043f      	lsls	r7, r7, #16
10013c42:	4338      	orrs	r0, r7
10013c44:	465b      	mov	r3, fp
10013c46:	2b38      	cmp	r3, #56	; 0x38
10013c48:	dc00      	bgt.n	10013c4c <__aeabi_dadd+0x1b8>
10013c4a:	e0f7      	b.n	10013e3c <__aeabi_dadd+0x3a8>
10013c4c:	4302      	orrs	r2, r0
10013c4e:	1e50      	subs	r0, r2, #1
10013c50:	4182      	sbcs	r2, r0
10013c52:	2000      	movs	r0, #0
10013c54:	b2d2      	uxtb	r2, r2
10013c56:	1953      	adds	r3, r2, r5
10013c58:	1842      	adds	r2, r0, r1
10013c5a:	42ab      	cmp	r3, r5
10013c5c:	4189      	sbcs	r1, r1
10013c5e:	001d      	movs	r5, r3
10013c60:	4249      	negs	r1, r1
10013c62:	1889      	adds	r1, r1, r2
10013c64:	020b      	lsls	r3, r1, #8
10013c66:	d5cd      	bpl.n	10013c04 <__aeabi_dadd+0x170>
10013c68:	4b71      	ldr	r3, [pc, #452]	; (10013e30 <__aeabi_dadd+0x39c>)
10013c6a:	3401      	adds	r4, #1
10013c6c:	429c      	cmp	r4, r3
10013c6e:	d100      	bne.n	10013c72 <__aeabi_dadd+0x1de>
10013c70:	e13d      	b.n	10013eee <__aeabi_dadd+0x45a>
10013c72:	2001      	movs	r0, #1
10013c74:	4a6f      	ldr	r2, [pc, #444]	; (10013e34 <__aeabi_dadd+0x3a0>)
10013c76:	086b      	lsrs	r3, r5, #1
10013c78:	400a      	ands	r2, r1
10013c7a:	4028      	ands	r0, r5
10013c7c:	4318      	orrs	r0, r3
10013c7e:	07d5      	lsls	r5, r2, #31
10013c80:	4305      	orrs	r5, r0
10013c82:	0851      	lsrs	r1, r2, #1
10013c84:	e72f      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013c86:	002b      	movs	r3, r5
10013c88:	430b      	orrs	r3, r1
10013c8a:	d100      	bne.n	10013c8e <__aeabi_dadd+0x1fa>
10013c8c:	e1cb      	b.n	10014026 <__aeabi_dadd+0x592>
10013c8e:	2380      	movs	r3, #128	; 0x80
10013c90:	031b      	lsls	r3, r3, #12
10013c92:	430b      	orrs	r3, r1
10013c94:	031a      	lsls	r2, r3, #12
10013c96:	0b12      	lsrs	r2, r2, #12
10013c98:	e744      	b.n	10013b24 <__aeabi_dadd+0x90>
10013c9a:	3e01      	subs	r6, #1
10013c9c:	2e00      	cmp	r6, #0
10013c9e:	d16d      	bne.n	10013d7c <__aeabi_dadd+0x2e8>
10013ca0:	1aae      	subs	r6, r5, r2
10013ca2:	42b5      	cmp	r5, r6
10013ca4:	419b      	sbcs	r3, r3
10013ca6:	1a09      	subs	r1, r1, r0
10013ca8:	425b      	negs	r3, r3
10013caa:	1ac9      	subs	r1, r1, r3
10013cac:	0035      	movs	r5, r6
10013cae:	e775      	b.n	10013b9c <__aeabi_dadd+0x108>
10013cb0:	0007      	movs	r7, r0
10013cb2:	4317      	orrs	r7, r2
10013cb4:	d100      	bne.n	10013cb8 <__aeabi_dadd+0x224>
10013cb6:	e716      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013cb8:	2301      	movs	r3, #1
10013cba:	425b      	negs	r3, r3
10013cbc:	469c      	mov	ip, r3
10013cbe:	44e3      	add	fp, ip
10013cc0:	465b      	mov	r3, fp
10013cc2:	2b00      	cmp	r3, #0
10013cc4:	d000      	beq.n	10013cc8 <__aeabi_dadd+0x234>
10013cc6:	e0e0      	b.n	10013e8a <__aeabi_dadd+0x3f6>
10013cc8:	18aa      	adds	r2, r5, r2
10013cca:	42aa      	cmp	r2, r5
10013ccc:	419b      	sbcs	r3, r3
10013cce:	1809      	adds	r1, r1, r0
10013cd0:	425b      	negs	r3, r3
10013cd2:	1859      	adds	r1, r3, r1
10013cd4:	0015      	movs	r5, r2
10013cd6:	e7c5      	b.n	10013c64 <__aeabi_dadd+0x1d0>
10013cd8:	2e00      	cmp	r6, #0
10013cda:	d175      	bne.n	10013dc8 <__aeabi_dadd+0x334>
10013cdc:	1c66      	adds	r6, r4, #1
10013cde:	0576      	lsls	r6, r6, #21
10013ce0:	0d76      	lsrs	r6, r6, #21
10013ce2:	2e01      	cmp	r6, #1
10013ce4:	dc00      	bgt.n	10013ce8 <__aeabi_dadd+0x254>
10013ce6:	e0f3      	b.n	10013ed0 <__aeabi_dadd+0x43c>
10013ce8:	1aae      	subs	r6, r5, r2
10013cea:	46b0      	mov	r8, r6
10013cec:	4545      	cmp	r5, r8
10013cee:	41bf      	sbcs	r7, r7
10013cf0:	1a0e      	subs	r6, r1, r0
10013cf2:	427f      	negs	r7, r7
10013cf4:	1bf6      	subs	r6, r6, r7
10013cf6:	0237      	lsls	r7, r6, #8
10013cf8:	d400      	bmi.n	10013cfc <__aeabi_dadd+0x268>
10013cfa:	e08f      	b.n	10013e1c <__aeabi_dadd+0x388>
10013cfc:	1b55      	subs	r5, r2, r5
10013cfe:	42aa      	cmp	r2, r5
10013d00:	41b6      	sbcs	r6, r6
10013d02:	1a41      	subs	r1, r0, r1
10013d04:	4276      	negs	r6, r6
10013d06:	1b8e      	subs	r6, r1, r6
10013d08:	469a      	mov	sl, r3
10013d0a:	e74b      	b.n	10013ba4 <__aeabi_dadd+0x110>
10013d0c:	4656      	mov	r6, sl
10013d0e:	2200      	movs	r2, #0
10013d10:	2500      	movs	r5, #0
10013d12:	e707      	b.n	10013b24 <__aeabi_dadd+0x90>
10013d14:	0028      	movs	r0, r5
10013d16:	f001 fd8b 	bl	10015830 <__clzsi2>
10013d1a:	3020      	adds	r0, #32
10013d1c:	0003      	movs	r3, r0
10013d1e:	3b08      	subs	r3, #8
10013d20:	2b1f      	cmp	r3, #31
10013d22:	dc00      	bgt.n	10013d26 <__aeabi_dadd+0x292>
10013d24:	e749      	b.n	10013bba <__aeabi_dadd+0x126>
10013d26:	002a      	movs	r2, r5
10013d28:	3828      	subs	r0, #40	; 0x28
10013d2a:	4082      	lsls	r2, r0
10013d2c:	2500      	movs	r5, #0
10013d2e:	429c      	cmp	r4, r3
10013d30:	dc00      	bgt.n	10013d34 <__aeabi_dadd+0x2a0>
10013d32:	e74d      	b.n	10013bd0 <__aeabi_dadd+0x13c>
10013d34:	493f      	ldr	r1, [pc, #252]	; (10013e34 <__aeabi_dadd+0x3a0>)
10013d36:	1ae4      	subs	r4, r4, r3
10013d38:	4011      	ands	r1, r2
10013d3a:	e6d4      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013d3c:	4302      	orrs	r2, r0
10013d3e:	1e50      	subs	r0, r2, #1
10013d40:	4182      	sbcs	r2, r0
10013d42:	b2d3      	uxtb	r3, r2
10013d44:	2200      	movs	r2, #0
10013d46:	e722      	b.n	10013b8e <__aeabi_dadd+0xfa>
10013d48:	2b00      	cmp	r3, #0
10013d4a:	d000      	beq.n	10013d4e <__aeabi_dadd+0x2ba>
10013d4c:	e0f3      	b.n	10013f36 <__aeabi_dadd+0x4a2>
10013d4e:	1c63      	adds	r3, r4, #1
10013d50:	469c      	mov	ip, r3
10013d52:	055b      	lsls	r3, r3, #21
10013d54:	0d5b      	lsrs	r3, r3, #21
10013d56:	2b01      	cmp	r3, #1
10013d58:	dc00      	bgt.n	10013d5c <__aeabi_dadd+0x2c8>
10013d5a:	e09f      	b.n	10013e9c <__aeabi_dadd+0x408>
10013d5c:	4b34      	ldr	r3, [pc, #208]	; (10013e30 <__aeabi_dadd+0x39c>)
10013d5e:	459c      	cmp	ip, r3
10013d60:	d100      	bne.n	10013d64 <__aeabi_dadd+0x2d0>
10013d62:	e0c3      	b.n	10013eec <__aeabi_dadd+0x458>
10013d64:	18aa      	adds	r2, r5, r2
10013d66:	1809      	adds	r1, r1, r0
10013d68:	42aa      	cmp	r2, r5
10013d6a:	4180      	sbcs	r0, r0
10013d6c:	4240      	negs	r0, r0
10013d6e:	1841      	adds	r1, r0, r1
10013d70:	07cd      	lsls	r5, r1, #31
10013d72:	0852      	lsrs	r2, r2, #1
10013d74:	4315      	orrs	r5, r2
10013d76:	0849      	lsrs	r1, r1, #1
10013d78:	4664      	mov	r4, ip
10013d7a:	e6b4      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013d7c:	4b2c      	ldr	r3, [pc, #176]	; (10013e30 <__aeabi_dadd+0x39c>)
10013d7e:	429c      	cmp	r4, r3
10013d80:	d000      	beq.n	10013d84 <__aeabi_dadd+0x2f0>
10013d82:	e6ec      	b.n	10013b5e <__aeabi_dadd+0xca>
10013d84:	e6af      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013d86:	0011      	movs	r1, r2
10013d88:	3c1f      	subs	r4, #31
10013d8a:	40e1      	lsrs	r1, r4
10013d8c:	000c      	movs	r4, r1
10013d8e:	2b20      	cmp	r3, #32
10013d90:	d100      	bne.n	10013d94 <__aeabi_dadd+0x300>
10013d92:	e07f      	b.n	10013e94 <__aeabi_dadd+0x400>
10013d94:	2140      	movs	r1, #64	; 0x40
10013d96:	1acb      	subs	r3, r1, r3
10013d98:	409a      	lsls	r2, r3
10013d9a:	4315      	orrs	r5, r2
10013d9c:	1e6a      	subs	r2, r5, #1
10013d9e:	4195      	sbcs	r5, r2
10013da0:	2100      	movs	r1, #0
10013da2:	4325      	orrs	r5, r4
10013da4:	2400      	movs	r4, #0
10013da6:	e72d      	b.n	10013c04 <__aeabi_dadd+0x170>
10013da8:	0033      	movs	r3, r6
10013daa:	0007      	movs	r7, r0
10013dac:	3b20      	subs	r3, #32
10013dae:	40df      	lsrs	r7, r3
10013db0:	003b      	movs	r3, r7
10013db2:	2e20      	cmp	r6, #32
10013db4:	d070      	beq.n	10013e98 <__aeabi_dadd+0x404>
10013db6:	2740      	movs	r7, #64	; 0x40
10013db8:	1bbe      	subs	r6, r7, r6
10013dba:	40b0      	lsls	r0, r6
10013dbc:	4302      	orrs	r2, r0
10013dbe:	1e50      	subs	r0, r2, #1
10013dc0:	4182      	sbcs	r2, r0
10013dc2:	4313      	orrs	r3, r2
10013dc4:	2200      	movs	r2, #0
10013dc6:	e6e2      	b.n	10013b8e <__aeabi_dadd+0xfa>
10013dc8:	2c00      	cmp	r4, #0
10013dca:	d04f      	beq.n	10013e6c <__aeabi_dadd+0x3d8>
10013dcc:	4c18      	ldr	r4, [pc, #96]	; (10013e30 <__aeabi_dadd+0x39c>)
10013dce:	45a4      	cmp	ip, r4
10013dd0:	d100      	bne.n	10013dd4 <__aeabi_dadd+0x340>
10013dd2:	e0ab      	b.n	10013f2c <__aeabi_dadd+0x498>
10013dd4:	2480      	movs	r4, #128	; 0x80
10013dd6:	0424      	lsls	r4, r4, #16
10013dd8:	4276      	negs	r6, r6
10013dda:	4321      	orrs	r1, r4
10013ddc:	2e38      	cmp	r6, #56	; 0x38
10013dde:	dd00      	ble.n	10013de2 <__aeabi_dadd+0x34e>
10013de0:	e0df      	b.n	10013fa2 <__aeabi_dadd+0x50e>
10013de2:	2e1f      	cmp	r6, #31
10013de4:	dd00      	ble.n	10013de8 <__aeabi_dadd+0x354>
10013de6:	e143      	b.n	10014070 <__aeabi_dadd+0x5dc>
10013de8:	2720      	movs	r7, #32
10013dea:	1bbc      	subs	r4, r7, r6
10013dec:	46a1      	mov	r9, r4
10013dee:	000c      	movs	r4, r1
10013df0:	464f      	mov	r7, r9
10013df2:	40bc      	lsls	r4, r7
10013df4:	46a0      	mov	r8, r4
10013df6:	002c      	movs	r4, r5
10013df8:	4647      	mov	r7, r8
10013dfa:	40f4      	lsrs	r4, r6
10013dfc:	433c      	orrs	r4, r7
10013dfe:	464f      	mov	r7, r9
10013e00:	40bd      	lsls	r5, r7
10013e02:	1e6f      	subs	r7, r5, #1
10013e04:	41bd      	sbcs	r5, r7
10013e06:	40f1      	lsrs	r1, r6
10013e08:	432c      	orrs	r4, r5
10013e0a:	1b15      	subs	r5, r2, r4
10013e0c:	42aa      	cmp	r2, r5
10013e0e:	4192      	sbcs	r2, r2
10013e10:	1a41      	subs	r1, r0, r1
10013e12:	4252      	negs	r2, r2
10013e14:	1a89      	subs	r1, r1, r2
10013e16:	4664      	mov	r4, ip
10013e18:	469a      	mov	sl, r3
10013e1a:	e6bf      	b.n	10013b9c <__aeabi_dadd+0x108>
10013e1c:	4641      	mov	r1, r8
10013e1e:	4645      	mov	r5, r8
10013e20:	4331      	orrs	r1, r6
10013e22:	d000      	beq.n	10013e26 <__aeabi_dadd+0x392>
10013e24:	e6be      	b.n	10013ba4 <__aeabi_dadd+0x110>
10013e26:	2600      	movs	r6, #0
10013e28:	2400      	movs	r4, #0
10013e2a:	2500      	movs	r5, #0
10013e2c:	e6f2      	b.n	10013c14 <__aeabi_dadd+0x180>
10013e2e:	46c0      	nop			; (mov r8, r8)
10013e30:	000007ff 	.word	0x000007ff
10013e34:	ff7fffff 	.word	0xff7fffff
10013e38:	800fffff 	.word	0x800fffff
10013e3c:	2b1f      	cmp	r3, #31
10013e3e:	dc59      	bgt.n	10013ef4 <__aeabi_dadd+0x460>
10013e40:	2720      	movs	r7, #32
10013e42:	1aff      	subs	r7, r7, r3
10013e44:	46bc      	mov	ip, r7
10013e46:	0007      	movs	r7, r0
10013e48:	4663      	mov	r3, ip
10013e4a:	409f      	lsls	r7, r3
10013e4c:	465b      	mov	r3, fp
10013e4e:	46b9      	mov	r9, r7
10013e50:	0017      	movs	r7, r2
10013e52:	40df      	lsrs	r7, r3
10013e54:	46b8      	mov	r8, r7
10013e56:	464f      	mov	r7, r9
10013e58:	4643      	mov	r3, r8
10013e5a:	431f      	orrs	r7, r3
10013e5c:	4663      	mov	r3, ip
10013e5e:	409a      	lsls	r2, r3
10013e60:	1e53      	subs	r3, r2, #1
10013e62:	419a      	sbcs	r2, r3
10013e64:	465b      	mov	r3, fp
10013e66:	433a      	orrs	r2, r7
10013e68:	40d8      	lsrs	r0, r3
10013e6a:	e6f4      	b.n	10013c56 <__aeabi_dadd+0x1c2>
10013e6c:	000c      	movs	r4, r1
10013e6e:	432c      	orrs	r4, r5
10013e70:	d05c      	beq.n	10013f2c <__aeabi_dadd+0x498>
10013e72:	43f6      	mvns	r6, r6
10013e74:	2e00      	cmp	r6, #0
10013e76:	d155      	bne.n	10013f24 <__aeabi_dadd+0x490>
10013e78:	1b55      	subs	r5, r2, r5
10013e7a:	42aa      	cmp	r2, r5
10013e7c:	41a4      	sbcs	r4, r4
10013e7e:	1a41      	subs	r1, r0, r1
10013e80:	4264      	negs	r4, r4
10013e82:	1b09      	subs	r1, r1, r4
10013e84:	469a      	mov	sl, r3
10013e86:	4664      	mov	r4, ip
10013e88:	e688      	b.n	10013b9c <__aeabi_dadd+0x108>
10013e8a:	4f96      	ldr	r7, [pc, #600]	; (100140e4 <__aeabi_dadd+0x650>)
10013e8c:	42bc      	cmp	r4, r7
10013e8e:	d000      	beq.n	10013e92 <__aeabi_dadd+0x3fe>
10013e90:	e6d8      	b.n	10013c44 <__aeabi_dadd+0x1b0>
10013e92:	e628      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013e94:	2200      	movs	r2, #0
10013e96:	e780      	b.n	10013d9a <__aeabi_dadd+0x306>
10013e98:	2000      	movs	r0, #0
10013e9a:	e78f      	b.n	10013dbc <__aeabi_dadd+0x328>
10013e9c:	000b      	movs	r3, r1
10013e9e:	432b      	orrs	r3, r5
10013ea0:	2c00      	cmp	r4, #0
10013ea2:	d000      	beq.n	10013ea6 <__aeabi_dadd+0x412>
10013ea4:	e0c2      	b.n	1001402c <__aeabi_dadd+0x598>
10013ea6:	2b00      	cmp	r3, #0
10013ea8:	d100      	bne.n	10013eac <__aeabi_dadd+0x418>
10013eaa:	e101      	b.n	100140b0 <__aeabi_dadd+0x61c>
10013eac:	0003      	movs	r3, r0
10013eae:	4313      	orrs	r3, r2
10013eb0:	d100      	bne.n	10013eb4 <__aeabi_dadd+0x420>
10013eb2:	e618      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013eb4:	18ab      	adds	r3, r5, r2
10013eb6:	42ab      	cmp	r3, r5
10013eb8:	41b6      	sbcs	r6, r6
10013eba:	1809      	adds	r1, r1, r0
10013ebc:	4276      	negs	r6, r6
10013ebe:	1871      	adds	r1, r6, r1
10013ec0:	020a      	lsls	r2, r1, #8
10013ec2:	d400      	bmi.n	10013ec6 <__aeabi_dadd+0x432>
10013ec4:	e109      	b.n	100140da <__aeabi_dadd+0x646>
10013ec6:	4a88      	ldr	r2, [pc, #544]	; (100140e8 <__aeabi_dadd+0x654>)
10013ec8:	001d      	movs	r5, r3
10013eca:	4011      	ands	r1, r2
10013ecc:	4664      	mov	r4, ip
10013ece:	e60a      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013ed0:	2c00      	cmp	r4, #0
10013ed2:	d15b      	bne.n	10013f8c <__aeabi_dadd+0x4f8>
10013ed4:	000e      	movs	r6, r1
10013ed6:	432e      	orrs	r6, r5
10013ed8:	d000      	beq.n	10013edc <__aeabi_dadd+0x448>
10013eda:	e08a      	b.n	10013ff2 <__aeabi_dadd+0x55e>
10013edc:	0001      	movs	r1, r0
10013ede:	4311      	orrs	r1, r2
10013ee0:	d100      	bne.n	10013ee4 <__aeabi_dadd+0x450>
10013ee2:	e0c2      	b.n	1001406a <__aeabi_dadd+0x5d6>
10013ee4:	0001      	movs	r1, r0
10013ee6:	0015      	movs	r5, r2
10013ee8:	469a      	mov	sl, r3
10013eea:	e5fc      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013eec:	4664      	mov	r4, ip
10013eee:	2100      	movs	r1, #0
10013ef0:	2500      	movs	r5, #0
10013ef2:	e68f      	b.n	10013c14 <__aeabi_dadd+0x180>
10013ef4:	2320      	movs	r3, #32
10013ef6:	425b      	negs	r3, r3
10013ef8:	469c      	mov	ip, r3
10013efa:	44dc      	add	ip, fp
10013efc:	4663      	mov	r3, ip
10013efe:	0007      	movs	r7, r0
10013f00:	40df      	lsrs	r7, r3
10013f02:	465b      	mov	r3, fp
10013f04:	46bc      	mov	ip, r7
10013f06:	2b20      	cmp	r3, #32
10013f08:	d100      	bne.n	10013f0c <__aeabi_dadd+0x478>
10013f0a:	e0ac      	b.n	10014066 <__aeabi_dadd+0x5d2>
10013f0c:	2340      	movs	r3, #64	; 0x40
10013f0e:	465f      	mov	r7, fp
10013f10:	1bdb      	subs	r3, r3, r7
10013f12:	4098      	lsls	r0, r3
10013f14:	4302      	orrs	r2, r0
10013f16:	1e50      	subs	r0, r2, #1
10013f18:	4182      	sbcs	r2, r0
10013f1a:	4663      	mov	r3, ip
10013f1c:	4313      	orrs	r3, r2
10013f1e:	001a      	movs	r2, r3
10013f20:	2000      	movs	r0, #0
10013f22:	e698      	b.n	10013c56 <__aeabi_dadd+0x1c2>
10013f24:	4c6f      	ldr	r4, [pc, #444]	; (100140e4 <__aeabi_dadd+0x650>)
10013f26:	45a4      	cmp	ip, r4
10013f28:	d000      	beq.n	10013f2c <__aeabi_dadd+0x498>
10013f2a:	e757      	b.n	10013ddc <__aeabi_dadd+0x348>
10013f2c:	0001      	movs	r1, r0
10013f2e:	0015      	movs	r5, r2
10013f30:	4664      	mov	r4, ip
10013f32:	469a      	mov	sl, r3
10013f34:	e5d7      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013f36:	2c00      	cmp	r4, #0
10013f38:	d139      	bne.n	10013fae <__aeabi_dadd+0x51a>
10013f3a:	000c      	movs	r4, r1
10013f3c:	432c      	orrs	r4, r5
10013f3e:	d06e      	beq.n	1001401e <__aeabi_dadd+0x58a>
10013f40:	43db      	mvns	r3, r3
10013f42:	2b00      	cmp	r3, #0
10013f44:	d01a      	beq.n	10013f7c <__aeabi_dadd+0x4e8>
10013f46:	4c67      	ldr	r4, [pc, #412]	; (100140e4 <__aeabi_dadd+0x650>)
10013f48:	45a4      	cmp	ip, r4
10013f4a:	d068      	beq.n	1001401e <__aeabi_dadd+0x58a>
10013f4c:	2b38      	cmp	r3, #56	; 0x38
10013f4e:	dd00      	ble.n	10013f52 <__aeabi_dadd+0x4be>
10013f50:	e0a4      	b.n	1001409c <__aeabi_dadd+0x608>
10013f52:	2b1f      	cmp	r3, #31
10013f54:	dd00      	ble.n	10013f58 <__aeabi_dadd+0x4c4>
10013f56:	e0ae      	b.n	100140b6 <__aeabi_dadd+0x622>
10013f58:	2420      	movs	r4, #32
10013f5a:	000f      	movs	r7, r1
10013f5c:	1ae4      	subs	r4, r4, r3
10013f5e:	40a7      	lsls	r7, r4
10013f60:	46b9      	mov	r9, r7
10013f62:	002f      	movs	r7, r5
10013f64:	40df      	lsrs	r7, r3
10013f66:	46b8      	mov	r8, r7
10013f68:	46a3      	mov	fp, r4
10013f6a:	464f      	mov	r7, r9
10013f6c:	4644      	mov	r4, r8
10013f6e:	4327      	orrs	r7, r4
10013f70:	465c      	mov	r4, fp
10013f72:	40a5      	lsls	r5, r4
10013f74:	1e6c      	subs	r4, r5, #1
10013f76:	41a5      	sbcs	r5, r4
10013f78:	40d9      	lsrs	r1, r3
10013f7a:	433d      	orrs	r5, r7
10013f7c:	18ad      	adds	r5, r5, r2
10013f7e:	4295      	cmp	r5, r2
10013f80:	419b      	sbcs	r3, r3
10013f82:	1809      	adds	r1, r1, r0
10013f84:	425b      	negs	r3, r3
10013f86:	1859      	adds	r1, r3, r1
10013f88:	4664      	mov	r4, ip
10013f8a:	e66b      	b.n	10013c64 <__aeabi_dadd+0x1d0>
10013f8c:	000c      	movs	r4, r1
10013f8e:	432c      	orrs	r4, r5
10013f90:	d115      	bne.n	10013fbe <__aeabi_dadd+0x52a>
10013f92:	0001      	movs	r1, r0
10013f94:	4311      	orrs	r1, r2
10013f96:	d07b      	beq.n	10014090 <__aeabi_dadd+0x5fc>
10013f98:	0001      	movs	r1, r0
10013f9a:	0015      	movs	r5, r2
10013f9c:	469a      	mov	sl, r3
10013f9e:	4c51      	ldr	r4, [pc, #324]	; (100140e4 <__aeabi_dadd+0x650>)
10013fa0:	e5a1      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013fa2:	430d      	orrs	r5, r1
10013fa4:	1e69      	subs	r1, r5, #1
10013fa6:	418d      	sbcs	r5, r1
10013fa8:	2100      	movs	r1, #0
10013faa:	b2ec      	uxtb	r4, r5
10013fac:	e72d      	b.n	10013e0a <__aeabi_dadd+0x376>
10013fae:	4c4d      	ldr	r4, [pc, #308]	; (100140e4 <__aeabi_dadd+0x650>)
10013fb0:	45a4      	cmp	ip, r4
10013fb2:	d034      	beq.n	1001401e <__aeabi_dadd+0x58a>
10013fb4:	2480      	movs	r4, #128	; 0x80
10013fb6:	0424      	lsls	r4, r4, #16
10013fb8:	425b      	negs	r3, r3
10013fba:	4321      	orrs	r1, r4
10013fbc:	e7c6      	b.n	10013f4c <__aeabi_dadd+0x4b8>
10013fbe:	0004      	movs	r4, r0
10013fc0:	4314      	orrs	r4, r2
10013fc2:	d04e      	beq.n	10014062 <__aeabi_dadd+0x5ce>
10013fc4:	08ed      	lsrs	r5, r5, #3
10013fc6:	074c      	lsls	r4, r1, #29
10013fc8:	432c      	orrs	r4, r5
10013fca:	2580      	movs	r5, #128	; 0x80
10013fcc:	08c9      	lsrs	r1, r1, #3
10013fce:	032d      	lsls	r5, r5, #12
10013fd0:	4229      	tst	r1, r5
10013fd2:	d008      	beq.n	10013fe6 <__aeabi_dadd+0x552>
10013fd4:	08c6      	lsrs	r6, r0, #3
10013fd6:	422e      	tst	r6, r5
10013fd8:	d105      	bne.n	10013fe6 <__aeabi_dadd+0x552>
10013fda:	08d2      	lsrs	r2, r2, #3
10013fdc:	0741      	lsls	r1, r0, #29
10013fde:	4311      	orrs	r1, r2
10013fe0:	000c      	movs	r4, r1
10013fe2:	469a      	mov	sl, r3
10013fe4:	0031      	movs	r1, r6
10013fe6:	0f62      	lsrs	r2, r4, #29
10013fe8:	00c9      	lsls	r1, r1, #3
10013fea:	00e5      	lsls	r5, r4, #3
10013fec:	4311      	orrs	r1, r2
10013fee:	4c3d      	ldr	r4, [pc, #244]	; (100140e4 <__aeabi_dadd+0x650>)
10013ff0:	e579      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013ff2:	0006      	movs	r6, r0
10013ff4:	4316      	orrs	r6, r2
10013ff6:	d100      	bne.n	10013ffa <__aeabi_dadd+0x566>
10013ff8:	e575      	b.n	10013ae6 <__aeabi_dadd+0x52>
10013ffa:	1aae      	subs	r6, r5, r2
10013ffc:	46b0      	mov	r8, r6
10013ffe:	4545      	cmp	r5, r8
10014000:	41bf      	sbcs	r7, r7
10014002:	1a0e      	subs	r6, r1, r0
10014004:	427f      	negs	r7, r7
10014006:	1bf6      	subs	r6, r6, r7
10014008:	0237      	lsls	r7, r6, #8
1001400a:	d400      	bmi.n	1001400e <__aeabi_dadd+0x57a>
1001400c:	e5f4      	b.n	10013bf8 <__aeabi_dadd+0x164>
1001400e:	1b55      	subs	r5, r2, r5
10014010:	42aa      	cmp	r2, r5
10014012:	41b6      	sbcs	r6, r6
10014014:	1a41      	subs	r1, r0, r1
10014016:	4276      	negs	r6, r6
10014018:	1b89      	subs	r1, r1, r6
1001401a:	469a      	mov	sl, r3
1001401c:	e563      	b.n	10013ae6 <__aeabi_dadd+0x52>
1001401e:	0001      	movs	r1, r0
10014020:	0015      	movs	r5, r2
10014022:	4664      	mov	r4, ip
10014024:	e55f      	b.n	10013ae6 <__aeabi_dadd+0x52>
10014026:	2200      	movs	r2, #0
10014028:	2500      	movs	r5, #0
1001402a:	e57b      	b.n	10013b24 <__aeabi_dadd+0x90>
1001402c:	2b00      	cmp	r3, #0
1001402e:	d03b      	beq.n	100140a8 <__aeabi_dadd+0x614>
10014030:	0003      	movs	r3, r0
10014032:	4313      	orrs	r3, r2
10014034:	d015      	beq.n	10014062 <__aeabi_dadd+0x5ce>
10014036:	08ed      	lsrs	r5, r5, #3
10014038:	074b      	lsls	r3, r1, #29
1001403a:	432b      	orrs	r3, r5
1001403c:	2580      	movs	r5, #128	; 0x80
1001403e:	08c9      	lsrs	r1, r1, #3
10014040:	032d      	lsls	r5, r5, #12
10014042:	4229      	tst	r1, r5
10014044:	d007      	beq.n	10014056 <__aeabi_dadd+0x5c2>
10014046:	08c4      	lsrs	r4, r0, #3
10014048:	422c      	tst	r4, r5
1001404a:	d104      	bne.n	10014056 <__aeabi_dadd+0x5c2>
1001404c:	0741      	lsls	r1, r0, #29
1001404e:	000b      	movs	r3, r1
10014050:	0021      	movs	r1, r4
10014052:	08d2      	lsrs	r2, r2, #3
10014054:	4313      	orrs	r3, r2
10014056:	00c9      	lsls	r1, r1, #3
10014058:	0f5a      	lsrs	r2, r3, #29
1001405a:	4311      	orrs	r1, r2
1001405c:	00dd      	lsls	r5, r3, #3
1001405e:	4c21      	ldr	r4, [pc, #132]	; (100140e4 <__aeabi_dadd+0x650>)
10014060:	e541      	b.n	10013ae6 <__aeabi_dadd+0x52>
10014062:	4c20      	ldr	r4, [pc, #128]	; (100140e4 <__aeabi_dadd+0x650>)
10014064:	e53f      	b.n	10013ae6 <__aeabi_dadd+0x52>
10014066:	2000      	movs	r0, #0
10014068:	e754      	b.n	10013f14 <__aeabi_dadd+0x480>
1001406a:	2600      	movs	r6, #0
1001406c:	2500      	movs	r5, #0
1001406e:	e5d1      	b.n	10013c14 <__aeabi_dadd+0x180>
10014070:	0034      	movs	r4, r6
10014072:	000f      	movs	r7, r1
10014074:	3c20      	subs	r4, #32
10014076:	40e7      	lsrs	r7, r4
10014078:	003c      	movs	r4, r7
1001407a:	2e20      	cmp	r6, #32
1001407c:	d02b      	beq.n	100140d6 <__aeabi_dadd+0x642>
1001407e:	2740      	movs	r7, #64	; 0x40
10014080:	1bbe      	subs	r6, r7, r6
10014082:	40b1      	lsls	r1, r6
10014084:	430d      	orrs	r5, r1
10014086:	1e69      	subs	r1, r5, #1
10014088:	418d      	sbcs	r5, r1
1001408a:	2100      	movs	r1, #0
1001408c:	432c      	orrs	r4, r5
1001408e:	e6bc      	b.n	10013e0a <__aeabi_dadd+0x376>
10014090:	2180      	movs	r1, #128	; 0x80
10014092:	2600      	movs	r6, #0
10014094:	0309      	lsls	r1, r1, #12
10014096:	4c13      	ldr	r4, [pc, #76]	; (100140e4 <__aeabi_dadd+0x650>)
10014098:	2500      	movs	r5, #0
1001409a:	e5bb      	b.n	10013c14 <__aeabi_dadd+0x180>
1001409c:	430d      	orrs	r5, r1
1001409e:	1e69      	subs	r1, r5, #1
100140a0:	418d      	sbcs	r5, r1
100140a2:	2100      	movs	r1, #0
100140a4:	b2ed      	uxtb	r5, r5
100140a6:	e769      	b.n	10013f7c <__aeabi_dadd+0x4e8>
100140a8:	0001      	movs	r1, r0
100140aa:	0015      	movs	r5, r2
100140ac:	4c0d      	ldr	r4, [pc, #52]	; (100140e4 <__aeabi_dadd+0x650>)
100140ae:	e51a      	b.n	10013ae6 <__aeabi_dadd+0x52>
100140b0:	0001      	movs	r1, r0
100140b2:	0015      	movs	r5, r2
100140b4:	e517      	b.n	10013ae6 <__aeabi_dadd+0x52>
100140b6:	001c      	movs	r4, r3
100140b8:	000f      	movs	r7, r1
100140ba:	3c20      	subs	r4, #32
100140bc:	40e7      	lsrs	r7, r4
100140be:	003c      	movs	r4, r7
100140c0:	2b20      	cmp	r3, #32
100140c2:	d00c      	beq.n	100140de <__aeabi_dadd+0x64a>
100140c4:	2740      	movs	r7, #64	; 0x40
100140c6:	1afb      	subs	r3, r7, r3
100140c8:	4099      	lsls	r1, r3
100140ca:	430d      	orrs	r5, r1
100140cc:	1e69      	subs	r1, r5, #1
100140ce:	418d      	sbcs	r5, r1
100140d0:	2100      	movs	r1, #0
100140d2:	4325      	orrs	r5, r4
100140d4:	e752      	b.n	10013f7c <__aeabi_dadd+0x4e8>
100140d6:	2100      	movs	r1, #0
100140d8:	e7d4      	b.n	10014084 <__aeabi_dadd+0x5f0>
100140da:	001d      	movs	r5, r3
100140dc:	e592      	b.n	10013c04 <__aeabi_dadd+0x170>
100140de:	2100      	movs	r1, #0
100140e0:	e7f3      	b.n	100140ca <__aeabi_dadd+0x636>
100140e2:	46c0      	nop			; (mov r8, r8)
100140e4:	000007ff 	.word	0x000007ff
100140e8:	ff7fffff 	.word	0xff7fffff

100140ec <__aeabi_ddiv>:
100140ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100140ee:	4656      	mov	r6, sl
100140f0:	464d      	mov	r5, r9
100140f2:	4644      	mov	r4, r8
100140f4:	465f      	mov	r7, fp
100140f6:	b4f0      	push	{r4, r5, r6, r7}
100140f8:	001d      	movs	r5, r3
100140fa:	030e      	lsls	r6, r1, #12
100140fc:	004c      	lsls	r4, r1, #1
100140fe:	0fcb      	lsrs	r3, r1, #31
10014100:	b087      	sub	sp, #28
10014102:	0007      	movs	r7, r0
10014104:	4692      	mov	sl, r2
10014106:	4681      	mov	r9, r0
10014108:	0b36      	lsrs	r6, r6, #12
1001410a:	0d64      	lsrs	r4, r4, #21
1001410c:	4698      	mov	r8, r3
1001410e:	d06a      	beq.n	100141e6 <__aeabi_ddiv+0xfa>
10014110:	4b6d      	ldr	r3, [pc, #436]	; (100142c8 <__aeabi_ddiv+0x1dc>)
10014112:	429c      	cmp	r4, r3
10014114:	d035      	beq.n	10014182 <__aeabi_ddiv+0x96>
10014116:	2280      	movs	r2, #128	; 0x80
10014118:	0f43      	lsrs	r3, r0, #29
1001411a:	0412      	lsls	r2, r2, #16
1001411c:	4313      	orrs	r3, r2
1001411e:	00f6      	lsls	r6, r6, #3
10014120:	431e      	orrs	r6, r3
10014122:	00c3      	lsls	r3, r0, #3
10014124:	4699      	mov	r9, r3
10014126:	4b69      	ldr	r3, [pc, #420]	; (100142cc <__aeabi_ddiv+0x1e0>)
10014128:	2700      	movs	r7, #0
1001412a:	469c      	mov	ip, r3
1001412c:	2300      	movs	r3, #0
1001412e:	4464      	add	r4, ip
10014130:	9302      	str	r3, [sp, #8]
10014132:	032b      	lsls	r3, r5, #12
10014134:	0068      	lsls	r0, r5, #1
10014136:	0b1b      	lsrs	r3, r3, #12
10014138:	0fed      	lsrs	r5, r5, #31
1001413a:	4651      	mov	r1, sl
1001413c:	469b      	mov	fp, r3
1001413e:	0d40      	lsrs	r0, r0, #21
10014140:	9500      	str	r5, [sp, #0]
10014142:	d100      	bne.n	10014146 <__aeabi_ddiv+0x5a>
10014144:	e078      	b.n	10014238 <__aeabi_ddiv+0x14c>
10014146:	4b60      	ldr	r3, [pc, #384]	; (100142c8 <__aeabi_ddiv+0x1dc>)
10014148:	4298      	cmp	r0, r3
1001414a:	d06c      	beq.n	10014226 <__aeabi_ddiv+0x13a>
1001414c:	465b      	mov	r3, fp
1001414e:	00da      	lsls	r2, r3, #3
10014150:	0f4b      	lsrs	r3, r1, #29
10014152:	2180      	movs	r1, #128	; 0x80
10014154:	0409      	lsls	r1, r1, #16
10014156:	430b      	orrs	r3, r1
10014158:	4313      	orrs	r3, r2
1001415a:	469b      	mov	fp, r3
1001415c:	4653      	mov	r3, sl
1001415e:	00d9      	lsls	r1, r3, #3
10014160:	4b5a      	ldr	r3, [pc, #360]	; (100142cc <__aeabi_ddiv+0x1e0>)
10014162:	469c      	mov	ip, r3
10014164:	2300      	movs	r3, #0
10014166:	4460      	add	r0, ip
10014168:	4642      	mov	r2, r8
1001416a:	1a20      	subs	r0, r4, r0
1001416c:	406a      	eors	r2, r5
1001416e:	4692      	mov	sl, r2
10014170:	9001      	str	r0, [sp, #4]
10014172:	431f      	orrs	r7, r3
10014174:	2f0f      	cmp	r7, #15
10014176:	d900      	bls.n	1001417a <__aeabi_ddiv+0x8e>
10014178:	e0b0      	b.n	100142dc <__aeabi_ddiv+0x1f0>
1001417a:	4855      	ldr	r0, [pc, #340]	; (100142d0 <__aeabi_ddiv+0x1e4>)
1001417c:	00bf      	lsls	r7, r7, #2
1001417e:	59c0      	ldr	r0, [r0, r7]
10014180:	4687      	mov	pc, r0
10014182:	4337      	orrs	r7, r6
10014184:	d000      	beq.n	10014188 <__aeabi_ddiv+0x9c>
10014186:	e088      	b.n	1001429a <__aeabi_ddiv+0x1ae>
10014188:	2300      	movs	r3, #0
1001418a:	4699      	mov	r9, r3
1001418c:	3302      	adds	r3, #2
1001418e:	2708      	movs	r7, #8
10014190:	2600      	movs	r6, #0
10014192:	9302      	str	r3, [sp, #8]
10014194:	e7cd      	b.n	10014132 <__aeabi_ddiv+0x46>
10014196:	4643      	mov	r3, r8
10014198:	46b3      	mov	fp, r6
1001419a:	4649      	mov	r1, r9
1001419c:	9300      	str	r3, [sp, #0]
1001419e:	9b02      	ldr	r3, [sp, #8]
100141a0:	9a00      	ldr	r2, [sp, #0]
100141a2:	4692      	mov	sl, r2
100141a4:	2b02      	cmp	r3, #2
100141a6:	d000      	beq.n	100141aa <__aeabi_ddiv+0xbe>
100141a8:	e1bf      	b.n	1001452a <__aeabi_ddiv+0x43e>
100141aa:	2100      	movs	r1, #0
100141ac:	4653      	mov	r3, sl
100141ae:	2201      	movs	r2, #1
100141b0:	2600      	movs	r6, #0
100141b2:	4689      	mov	r9, r1
100141b4:	401a      	ands	r2, r3
100141b6:	4b44      	ldr	r3, [pc, #272]	; (100142c8 <__aeabi_ddiv+0x1dc>)
100141b8:	2100      	movs	r1, #0
100141ba:	0336      	lsls	r6, r6, #12
100141bc:	0d0c      	lsrs	r4, r1, #20
100141be:	0524      	lsls	r4, r4, #20
100141c0:	0b36      	lsrs	r6, r6, #12
100141c2:	4326      	orrs	r6, r4
100141c4:	4c43      	ldr	r4, [pc, #268]	; (100142d4 <__aeabi_ddiv+0x1e8>)
100141c6:	051b      	lsls	r3, r3, #20
100141c8:	4026      	ands	r6, r4
100141ca:	431e      	orrs	r6, r3
100141cc:	0076      	lsls	r6, r6, #1
100141ce:	07d2      	lsls	r2, r2, #31
100141d0:	0876      	lsrs	r6, r6, #1
100141d2:	4316      	orrs	r6, r2
100141d4:	4648      	mov	r0, r9
100141d6:	0031      	movs	r1, r6
100141d8:	b007      	add	sp, #28
100141da:	bc3c      	pop	{r2, r3, r4, r5}
100141dc:	4690      	mov	r8, r2
100141de:	4699      	mov	r9, r3
100141e0:	46a2      	mov	sl, r4
100141e2:	46ab      	mov	fp, r5
100141e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100141e6:	0033      	movs	r3, r6
100141e8:	4303      	orrs	r3, r0
100141ea:	d04f      	beq.n	1001428c <__aeabi_ddiv+0x1a0>
100141ec:	2e00      	cmp	r6, #0
100141ee:	d100      	bne.n	100141f2 <__aeabi_ddiv+0x106>
100141f0:	e1bc      	b.n	1001456c <__aeabi_ddiv+0x480>
100141f2:	0030      	movs	r0, r6
100141f4:	f001 fb1c 	bl	10015830 <__clzsi2>
100141f8:	0003      	movs	r3, r0
100141fa:	3b0b      	subs	r3, #11
100141fc:	2b1c      	cmp	r3, #28
100141fe:	dd00      	ble.n	10014202 <__aeabi_ddiv+0x116>
10014200:	e1ad      	b.n	1001455e <__aeabi_ddiv+0x472>
10014202:	221d      	movs	r2, #29
10014204:	0001      	movs	r1, r0
10014206:	1ad3      	subs	r3, r2, r3
10014208:	3908      	subs	r1, #8
1001420a:	003a      	movs	r2, r7
1001420c:	408f      	lsls	r7, r1
1001420e:	408e      	lsls	r6, r1
10014210:	40da      	lsrs	r2, r3
10014212:	46b9      	mov	r9, r7
10014214:	4316      	orrs	r6, r2
10014216:	4b30      	ldr	r3, [pc, #192]	; (100142d8 <__aeabi_ddiv+0x1ec>)
10014218:	2700      	movs	r7, #0
1001421a:	469c      	mov	ip, r3
1001421c:	2300      	movs	r3, #0
1001421e:	4460      	add	r0, ip
10014220:	4244      	negs	r4, r0
10014222:	9302      	str	r3, [sp, #8]
10014224:	e785      	b.n	10014132 <__aeabi_ddiv+0x46>
10014226:	4653      	mov	r3, sl
10014228:	465a      	mov	r2, fp
1001422a:	4313      	orrs	r3, r2
1001422c:	d12c      	bne.n	10014288 <__aeabi_ddiv+0x19c>
1001422e:	2300      	movs	r3, #0
10014230:	2100      	movs	r1, #0
10014232:	469b      	mov	fp, r3
10014234:	3302      	adds	r3, #2
10014236:	e797      	b.n	10014168 <__aeabi_ddiv+0x7c>
10014238:	430b      	orrs	r3, r1
1001423a:	d020      	beq.n	1001427e <__aeabi_ddiv+0x192>
1001423c:	465b      	mov	r3, fp
1001423e:	2b00      	cmp	r3, #0
10014240:	d100      	bne.n	10014244 <__aeabi_ddiv+0x158>
10014242:	e19e      	b.n	10014582 <__aeabi_ddiv+0x496>
10014244:	4658      	mov	r0, fp
10014246:	f001 faf3 	bl	10015830 <__clzsi2>
1001424a:	0003      	movs	r3, r0
1001424c:	3b0b      	subs	r3, #11
1001424e:	2b1c      	cmp	r3, #28
10014250:	dd00      	ble.n	10014254 <__aeabi_ddiv+0x168>
10014252:	e18f      	b.n	10014574 <__aeabi_ddiv+0x488>
10014254:	0002      	movs	r2, r0
10014256:	4659      	mov	r1, fp
10014258:	3a08      	subs	r2, #8
1001425a:	4091      	lsls	r1, r2
1001425c:	468b      	mov	fp, r1
1001425e:	211d      	movs	r1, #29
10014260:	1acb      	subs	r3, r1, r3
10014262:	4651      	mov	r1, sl
10014264:	40d9      	lsrs	r1, r3
10014266:	000b      	movs	r3, r1
10014268:	4659      	mov	r1, fp
1001426a:	430b      	orrs	r3, r1
1001426c:	4651      	mov	r1, sl
1001426e:	469b      	mov	fp, r3
10014270:	4091      	lsls	r1, r2
10014272:	4b19      	ldr	r3, [pc, #100]	; (100142d8 <__aeabi_ddiv+0x1ec>)
10014274:	469c      	mov	ip, r3
10014276:	4460      	add	r0, ip
10014278:	4240      	negs	r0, r0
1001427a:	2300      	movs	r3, #0
1001427c:	e774      	b.n	10014168 <__aeabi_ddiv+0x7c>
1001427e:	2300      	movs	r3, #0
10014280:	2100      	movs	r1, #0
10014282:	469b      	mov	fp, r3
10014284:	3301      	adds	r3, #1
10014286:	e76f      	b.n	10014168 <__aeabi_ddiv+0x7c>
10014288:	2303      	movs	r3, #3
1001428a:	e76d      	b.n	10014168 <__aeabi_ddiv+0x7c>
1001428c:	2300      	movs	r3, #0
1001428e:	4699      	mov	r9, r3
10014290:	3301      	adds	r3, #1
10014292:	2704      	movs	r7, #4
10014294:	2600      	movs	r6, #0
10014296:	9302      	str	r3, [sp, #8]
10014298:	e74b      	b.n	10014132 <__aeabi_ddiv+0x46>
1001429a:	2303      	movs	r3, #3
1001429c:	270c      	movs	r7, #12
1001429e:	9302      	str	r3, [sp, #8]
100142a0:	e747      	b.n	10014132 <__aeabi_ddiv+0x46>
100142a2:	2201      	movs	r2, #1
100142a4:	1ad5      	subs	r5, r2, r3
100142a6:	2d38      	cmp	r5, #56	; 0x38
100142a8:	dc00      	bgt.n	100142ac <__aeabi_ddiv+0x1c0>
100142aa:	e1b0      	b.n	1001460e <__aeabi_ddiv+0x522>
100142ac:	4653      	mov	r3, sl
100142ae:	401a      	ands	r2, r3
100142b0:	2100      	movs	r1, #0
100142b2:	2300      	movs	r3, #0
100142b4:	2600      	movs	r6, #0
100142b6:	4689      	mov	r9, r1
100142b8:	e77e      	b.n	100141b8 <__aeabi_ddiv+0xcc>
100142ba:	2300      	movs	r3, #0
100142bc:	2680      	movs	r6, #128	; 0x80
100142be:	4699      	mov	r9, r3
100142c0:	2200      	movs	r2, #0
100142c2:	0336      	lsls	r6, r6, #12
100142c4:	4b00      	ldr	r3, [pc, #0]	; (100142c8 <__aeabi_ddiv+0x1dc>)
100142c6:	e777      	b.n	100141b8 <__aeabi_ddiv+0xcc>
100142c8:	000007ff 	.word	0x000007ff
100142cc:	fffffc01 	.word	0xfffffc01
100142d0:	100185c0 	.word	0x100185c0
100142d4:	800fffff 	.word	0x800fffff
100142d8:	000003f3 	.word	0x000003f3
100142dc:	455e      	cmp	r6, fp
100142de:	d900      	bls.n	100142e2 <__aeabi_ddiv+0x1f6>
100142e0:	e172      	b.n	100145c8 <__aeabi_ddiv+0x4dc>
100142e2:	d100      	bne.n	100142e6 <__aeabi_ddiv+0x1fa>
100142e4:	e16d      	b.n	100145c2 <__aeabi_ddiv+0x4d6>
100142e6:	9b01      	ldr	r3, [sp, #4]
100142e8:	464d      	mov	r5, r9
100142ea:	3b01      	subs	r3, #1
100142ec:	9301      	str	r3, [sp, #4]
100142ee:	2300      	movs	r3, #0
100142f0:	0034      	movs	r4, r6
100142f2:	9302      	str	r3, [sp, #8]
100142f4:	465b      	mov	r3, fp
100142f6:	021e      	lsls	r6, r3, #8
100142f8:	0e0b      	lsrs	r3, r1, #24
100142fa:	431e      	orrs	r6, r3
100142fc:	020b      	lsls	r3, r1, #8
100142fe:	9303      	str	r3, [sp, #12]
10014300:	0c33      	lsrs	r3, r6, #16
10014302:	4699      	mov	r9, r3
10014304:	0433      	lsls	r3, r6, #16
10014306:	0c1b      	lsrs	r3, r3, #16
10014308:	4649      	mov	r1, r9
1001430a:	0020      	movs	r0, r4
1001430c:	9300      	str	r3, [sp, #0]
1001430e:	f7fe fc65 	bl	10012bdc <__aeabi_uidiv>
10014312:	9b00      	ldr	r3, [sp, #0]
10014314:	0037      	movs	r7, r6
10014316:	4343      	muls	r3, r0
10014318:	0006      	movs	r6, r0
1001431a:	4649      	mov	r1, r9
1001431c:	0020      	movs	r0, r4
1001431e:	4698      	mov	r8, r3
10014320:	f7fe fce2 	bl	10012ce8 <__aeabi_uidivmod>
10014324:	0c2c      	lsrs	r4, r5, #16
10014326:	0409      	lsls	r1, r1, #16
10014328:	430c      	orrs	r4, r1
1001432a:	45a0      	cmp	r8, r4
1001432c:	d909      	bls.n	10014342 <__aeabi_ddiv+0x256>
1001432e:	19e4      	adds	r4, r4, r7
10014330:	1e73      	subs	r3, r6, #1
10014332:	42a7      	cmp	r7, r4
10014334:	d900      	bls.n	10014338 <__aeabi_ddiv+0x24c>
10014336:	e15c      	b.n	100145f2 <__aeabi_ddiv+0x506>
10014338:	45a0      	cmp	r8, r4
1001433a:	d800      	bhi.n	1001433e <__aeabi_ddiv+0x252>
1001433c:	e159      	b.n	100145f2 <__aeabi_ddiv+0x506>
1001433e:	3e02      	subs	r6, #2
10014340:	19e4      	adds	r4, r4, r7
10014342:	4643      	mov	r3, r8
10014344:	1ae4      	subs	r4, r4, r3
10014346:	4649      	mov	r1, r9
10014348:	0020      	movs	r0, r4
1001434a:	f7fe fc47 	bl	10012bdc <__aeabi_uidiv>
1001434e:	0003      	movs	r3, r0
10014350:	9a00      	ldr	r2, [sp, #0]
10014352:	4680      	mov	r8, r0
10014354:	4353      	muls	r3, r2
10014356:	4649      	mov	r1, r9
10014358:	0020      	movs	r0, r4
1001435a:	469b      	mov	fp, r3
1001435c:	f7fe fcc4 	bl	10012ce8 <__aeabi_uidivmod>
10014360:	042a      	lsls	r2, r5, #16
10014362:	0409      	lsls	r1, r1, #16
10014364:	0c12      	lsrs	r2, r2, #16
10014366:	430a      	orrs	r2, r1
10014368:	4593      	cmp	fp, r2
1001436a:	d90d      	bls.n	10014388 <__aeabi_ddiv+0x29c>
1001436c:	4643      	mov	r3, r8
1001436e:	19d2      	adds	r2, r2, r7
10014370:	3b01      	subs	r3, #1
10014372:	4297      	cmp	r7, r2
10014374:	d900      	bls.n	10014378 <__aeabi_ddiv+0x28c>
10014376:	e13a      	b.n	100145ee <__aeabi_ddiv+0x502>
10014378:	4593      	cmp	fp, r2
1001437a:	d800      	bhi.n	1001437e <__aeabi_ddiv+0x292>
1001437c:	e137      	b.n	100145ee <__aeabi_ddiv+0x502>
1001437e:	2302      	movs	r3, #2
10014380:	425b      	negs	r3, r3
10014382:	469c      	mov	ip, r3
10014384:	19d2      	adds	r2, r2, r7
10014386:	44e0      	add	r8, ip
10014388:	465b      	mov	r3, fp
1001438a:	1ad2      	subs	r2, r2, r3
1001438c:	4643      	mov	r3, r8
1001438e:	0436      	lsls	r6, r6, #16
10014390:	4333      	orrs	r3, r6
10014392:	469b      	mov	fp, r3
10014394:	9903      	ldr	r1, [sp, #12]
10014396:	0c18      	lsrs	r0, r3, #16
10014398:	0c0b      	lsrs	r3, r1, #16
1001439a:	001d      	movs	r5, r3
1001439c:	9305      	str	r3, [sp, #20]
1001439e:	0409      	lsls	r1, r1, #16
100143a0:	465b      	mov	r3, fp
100143a2:	0c09      	lsrs	r1, r1, #16
100143a4:	000c      	movs	r4, r1
100143a6:	041b      	lsls	r3, r3, #16
100143a8:	0c1b      	lsrs	r3, r3, #16
100143aa:	4344      	muls	r4, r0
100143ac:	9104      	str	r1, [sp, #16]
100143ae:	4359      	muls	r1, r3
100143b0:	436b      	muls	r3, r5
100143b2:	4368      	muls	r0, r5
100143b4:	191b      	adds	r3, r3, r4
100143b6:	0c0d      	lsrs	r5, r1, #16
100143b8:	18eb      	adds	r3, r5, r3
100143ba:	429c      	cmp	r4, r3
100143bc:	d903      	bls.n	100143c6 <__aeabi_ddiv+0x2da>
100143be:	2480      	movs	r4, #128	; 0x80
100143c0:	0264      	lsls	r4, r4, #9
100143c2:	46a4      	mov	ip, r4
100143c4:	4460      	add	r0, ip
100143c6:	0c1c      	lsrs	r4, r3, #16
100143c8:	0409      	lsls	r1, r1, #16
100143ca:	041b      	lsls	r3, r3, #16
100143cc:	0c09      	lsrs	r1, r1, #16
100143ce:	1820      	adds	r0, r4, r0
100143d0:	185d      	adds	r5, r3, r1
100143d2:	4282      	cmp	r2, r0
100143d4:	d200      	bcs.n	100143d8 <__aeabi_ddiv+0x2ec>
100143d6:	e0de      	b.n	10014596 <__aeabi_ddiv+0x4aa>
100143d8:	d100      	bne.n	100143dc <__aeabi_ddiv+0x2f0>
100143da:	e0d7      	b.n	1001458c <__aeabi_ddiv+0x4a0>
100143dc:	1a16      	subs	r6, r2, r0
100143de:	9b02      	ldr	r3, [sp, #8]
100143e0:	469c      	mov	ip, r3
100143e2:	1b5d      	subs	r5, r3, r5
100143e4:	45ac      	cmp	ip, r5
100143e6:	419b      	sbcs	r3, r3
100143e8:	425b      	negs	r3, r3
100143ea:	1af6      	subs	r6, r6, r3
100143ec:	42b7      	cmp	r7, r6
100143ee:	d100      	bne.n	100143f2 <__aeabi_ddiv+0x306>
100143f0:	e106      	b.n	10014600 <__aeabi_ddiv+0x514>
100143f2:	4649      	mov	r1, r9
100143f4:	0030      	movs	r0, r6
100143f6:	f7fe fbf1 	bl	10012bdc <__aeabi_uidiv>
100143fa:	9b00      	ldr	r3, [sp, #0]
100143fc:	0004      	movs	r4, r0
100143fe:	4343      	muls	r3, r0
10014400:	4649      	mov	r1, r9
10014402:	0030      	movs	r0, r6
10014404:	4698      	mov	r8, r3
10014406:	f7fe fc6f 	bl	10012ce8 <__aeabi_uidivmod>
1001440a:	0c2e      	lsrs	r6, r5, #16
1001440c:	0409      	lsls	r1, r1, #16
1001440e:	430e      	orrs	r6, r1
10014410:	45b0      	cmp	r8, r6
10014412:	d909      	bls.n	10014428 <__aeabi_ddiv+0x33c>
10014414:	19f6      	adds	r6, r6, r7
10014416:	1e63      	subs	r3, r4, #1
10014418:	42b7      	cmp	r7, r6
1001441a:	d900      	bls.n	1001441e <__aeabi_ddiv+0x332>
1001441c:	e0f3      	b.n	10014606 <__aeabi_ddiv+0x51a>
1001441e:	45b0      	cmp	r8, r6
10014420:	d800      	bhi.n	10014424 <__aeabi_ddiv+0x338>
10014422:	e0f0      	b.n	10014606 <__aeabi_ddiv+0x51a>
10014424:	3c02      	subs	r4, #2
10014426:	19f6      	adds	r6, r6, r7
10014428:	4643      	mov	r3, r8
1001442a:	1af3      	subs	r3, r6, r3
1001442c:	4649      	mov	r1, r9
1001442e:	0018      	movs	r0, r3
10014430:	9302      	str	r3, [sp, #8]
10014432:	f7fe fbd3 	bl	10012bdc <__aeabi_uidiv>
10014436:	9b00      	ldr	r3, [sp, #0]
10014438:	0006      	movs	r6, r0
1001443a:	4343      	muls	r3, r0
1001443c:	4649      	mov	r1, r9
1001443e:	9802      	ldr	r0, [sp, #8]
10014440:	4698      	mov	r8, r3
10014442:	f7fe fc51 	bl	10012ce8 <__aeabi_uidivmod>
10014446:	042d      	lsls	r5, r5, #16
10014448:	0409      	lsls	r1, r1, #16
1001444a:	0c2d      	lsrs	r5, r5, #16
1001444c:	430d      	orrs	r5, r1
1001444e:	45a8      	cmp	r8, r5
10014450:	d909      	bls.n	10014466 <__aeabi_ddiv+0x37a>
10014452:	19ed      	adds	r5, r5, r7
10014454:	1e73      	subs	r3, r6, #1
10014456:	42af      	cmp	r7, r5
10014458:	d900      	bls.n	1001445c <__aeabi_ddiv+0x370>
1001445a:	e0d6      	b.n	1001460a <__aeabi_ddiv+0x51e>
1001445c:	45a8      	cmp	r8, r5
1001445e:	d800      	bhi.n	10014462 <__aeabi_ddiv+0x376>
10014460:	e0d3      	b.n	1001460a <__aeabi_ddiv+0x51e>
10014462:	3e02      	subs	r6, #2
10014464:	19ed      	adds	r5, r5, r7
10014466:	0424      	lsls	r4, r4, #16
10014468:	0021      	movs	r1, r4
1001446a:	4643      	mov	r3, r8
1001446c:	4331      	orrs	r1, r6
1001446e:	9e04      	ldr	r6, [sp, #16]
10014470:	9a05      	ldr	r2, [sp, #20]
10014472:	0030      	movs	r0, r6
10014474:	1aed      	subs	r5, r5, r3
10014476:	040b      	lsls	r3, r1, #16
10014478:	0c0c      	lsrs	r4, r1, #16
1001447a:	0c1b      	lsrs	r3, r3, #16
1001447c:	4358      	muls	r0, r3
1001447e:	4366      	muls	r6, r4
10014480:	4353      	muls	r3, r2
10014482:	4354      	muls	r4, r2
10014484:	199a      	adds	r2, r3, r6
10014486:	0c03      	lsrs	r3, r0, #16
10014488:	189b      	adds	r3, r3, r2
1001448a:	429e      	cmp	r6, r3
1001448c:	d903      	bls.n	10014496 <__aeabi_ddiv+0x3aa>
1001448e:	2280      	movs	r2, #128	; 0x80
10014490:	0252      	lsls	r2, r2, #9
10014492:	4694      	mov	ip, r2
10014494:	4464      	add	r4, ip
10014496:	0c1a      	lsrs	r2, r3, #16
10014498:	0400      	lsls	r0, r0, #16
1001449a:	041b      	lsls	r3, r3, #16
1001449c:	0c00      	lsrs	r0, r0, #16
1001449e:	1914      	adds	r4, r2, r4
100144a0:	181b      	adds	r3, r3, r0
100144a2:	42a5      	cmp	r5, r4
100144a4:	d350      	bcc.n	10014548 <__aeabi_ddiv+0x45c>
100144a6:	d04d      	beq.n	10014544 <__aeabi_ddiv+0x458>
100144a8:	2301      	movs	r3, #1
100144aa:	4319      	orrs	r1, r3
100144ac:	4a96      	ldr	r2, [pc, #600]	; (10014708 <__aeabi_ddiv+0x61c>)
100144ae:	9b01      	ldr	r3, [sp, #4]
100144b0:	4694      	mov	ip, r2
100144b2:	4463      	add	r3, ip
100144b4:	2b00      	cmp	r3, #0
100144b6:	dc00      	bgt.n	100144ba <__aeabi_ddiv+0x3ce>
100144b8:	e6f3      	b.n	100142a2 <__aeabi_ddiv+0x1b6>
100144ba:	074a      	lsls	r2, r1, #29
100144bc:	d009      	beq.n	100144d2 <__aeabi_ddiv+0x3e6>
100144be:	220f      	movs	r2, #15
100144c0:	400a      	ands	r2, r1
100144c2:	2a04      	cmp	r2, #4
100144c4:	d005      	beq.n	100144d2 <__aeabi_ddiv+0x3e6>
100144c6:	1d0a      	adds	r2, r1, #4
100144c8:	428a      	cmp	r2, r1
100144ca:	4189      	sbcs	r1, r1
100144cc:	4249      	negs	r1, r1
100144ce:	448b      	add	fp, r1
100144d0:	0011      	movs	r1, r2
100144d2:	465a      	mov	r2, fp
100144d4:	01d2      	lsls	r2, r2, #7
100144d6:	d508      	bpl.n	100144ea <__aeabi_ddiv+0x3fe>
100144d8:	465a      	mov	r2, fp
100144da:	4b8c      	ldr	r3, [pc, #560]	; (1001470c <__aeabi_ddiv+0x620>)
100144dc:	401a      	ands	r2, r3
100144de:	4693      	mov	fp, r2
100144e0:	2280      	movs	r2, #128	; 0x80
100144e2:	00d2      	lsls	r2, r2, #3
100144e4:	4694      	mov	ip, r2
100144e6:	9b01      	ldr	r3, [sp, #4]
100144e8:	4463      	add	r3, ip
100144ea:	4a89      	ldr	r2, [pc, #548]	; (10014710 <__aeabi_ddiv+0x624>)
100144ec:	4293      	cmp	r3, r2
100144ee:	dd00      	ble.n	100144f2 <__aeabi_ddiv+0x406>
100144f0:	e65b      	b.n	100141aa <__aeabi_ddiv+0xbe>
100144f2:	465a      	mov	r2, fp
100144f4:	08c9      	lsrs	r1, r1, #3
100144f6:	0750      	lsls	r0, r2, #29
100144f8:	4308      	orrs	r0, r1
100144fa:	0256      	lsls	r6, r2, #9
100144fc:	4651      	mov	r1, sl
100144fe:	2201      	movs	r2, #1
10014500:	055b      	lsls	r3, r3, #21
10014502:	4681      	mov	r9, r0
10014504:	0b36      	lsrs	r6, r6, #12
10014506:	0d5b      	lsrs	r3, r3, #21
10014508:	400a      	ands	r2, r1
1001450a:	e655      	b.n	100141b8 <__aeabi_ddiv+0xcc>
1001450c:	2380      	movs	r3, #128	; 0x80
1001450e:	031b      	lsls	r3, r3, #12
10014510:	421e      	tst	r6, r3
10014512:	d011      	beq.n	10014538 <__aeabi_ddiv+0x44c>
10014514:	465a      	mov	r2, fp
10014516:	421a      	tst	r2, r3
10014518:	d10e      	bne.n	10014538 <__aeabi_ddiv+0x44c>
1001451a:	465e      	mov	r6, fp
1001451c:	431e      	orrs	r6, r3
1001451e:	0336      	lsls	r6, r6, #12
10014520:	0b36      	lsrs	r6, r6, #12
10014522:	002a      	movs	r2, r5
10014524:	4689      	mov	r9, r1
10014526:	4b7b      	ldr	r3, [pc, #492]	; (10014714 <__aeabi_ddiv+0x628>)
10014528:	e646      	b.n	100141b8 <__aeabi_ddiv+0xcc>
1001452a:	2b03      	cmp	r3, #3
1001452c:	d100      	bne.n	10014530 <__aeabi_ddiv+0x444>
1001452e:	e0e1      	b.n	100146f4 <__aeabi_ddiv+0x608>
10014530:	2b01      	cmp	r3, #1
10014532:	d1bb      	bne.n	100144ac <__aeabi_ddiv+0x3c0>
10014534:	401a      	ands	r2, r3
10014536:	e6bb      	b.n	100142b0 <__aeabi_ddiv+0x1c4>
10014538:	431e      	orrs	r6, r3
1001453a:	0336      	lsls	r6, r6, #12
1001453c:	0b36      	lsrs	r6, r6, #12
1001453e:	4642      	mov	r2, r8
10014540:	4b74      	ldr	r3, [pc, #464]	; (10014714 <__aeabi_ddiv+0x628>)
10014542:	e639      	b.n	100141b8 <__aeabi_ddiv+0xcc>
10014544:	2b00      	cmp	r3, #0
10014546:	d0b1      	beq.n	100144ac <__aeabi_ddiv+0x3c0>
10014548:	197d      	adds	r5, r7, r5
1001454a:	1e4a      	subs	r2, r1, #1
1001454c:	42af      	cmp	r7, r5
1001454e:	d952      	bls.n	100145f6 <__aeabi_ddiv+0x50a>
10014550:	0011      	movs	r1, r2
10014552:	42a5      	cmp	r5, r4
10014554:	d1a8      	bne.n	100144a8 <__aeabi_ddiv+0x3bc>
10014556:	9a03      	ldr	r2, [sp, #12]
10014558:	429a      	cmp	r2, r3
1001455a:	d1a5      	bne.n	100144a8 <__aeabi_ddiv+0x3bc>
1001455c:	e7a6      	b.n	100144ac <__aeabi_ddiv+0x3c0>
1001455e:	0003      	movs	r3, r0
10014560:	003e      	movs	r6, r7
10014562:	3b28      	subs	r3, #40	; 0x28
10014564:	409e      	lsls	r6, r3
10014566:	2300      	movs	r3, #0
10014568:	4699      	mov	r9, r3
1001456a:	e654      	b.n	10014216 <__aeabi_ddiv+0x12a>
1001456c:	f001 f960 	bl	10015830 <__clzsi2>
10014570:	3020      	adds	r0, #32
10014572:	e641      	b.n	100141f8 <__aeabi_ddiv+0x10c>
10014574:	0003      	movs	r3, r0
10014576:	4652      	mov	r2, sl
10014578:	3b28      	subs	r3, #40	; 0x28
1001457a:	409a      	lsls	r2, r3
1001457c:	2100      	movs	r1, #0
1001457e:	4693      	mov	fp, r2
10014580:	e677      	b.n	10014272 <__aeabi_ddiv+0x186>
10014582:	4650      	mov	r0, sl
10014584:	f001 f954 	bl	10015830 <__clzsi2>
10014588:	3020      	adds	r0, #32
1001458a:	e65e      	b.n	1001424a <__aeabi_ddiv+0x15e>
1001458c:	9b02      	ldr	r3, [sp, #8]
1001458e:	2600      	movs	r6, #0
10014590:	42ab      	cmp	r3, r5
10014592:	d300      	bcc.n	10014596 <__aeabi_ddiv+0x4aa>
10014594:	e723      	b.n	100143de <__aeabi_ddiv+0x2f2>
10014596:	9e03      	ldr	r6, [sp, #12]
10014598:	9902      	ldr	r1, [sp, #8]
1001459a:	46b4      	mov	ip, r6
1001459c:	4461      	add	r1, ip
1001459e:	4688      	mov	r8, r1
100145a0:	45b0      	cmp	r8, r6
100145a2:	41b6      	sbcs	r6, r6
100145a4:	465b      	mov	r3, fp
100145a6:	4276      	negs	r6, r6
100145a8:	19f6      	adds	r6, r6, r7
100145aa:	18b2      	adds	r2, r6, r2
100145ac:	3b01      	subs	r3, #1
100145ae:	9102      	str	r1, [sp, #8]
100145b0:	4297      	cmp	r7, r2
100145b2:	d213      	bcs.n	100145dc <__aeabi_ddiv+0x4f0>
100145b4:	4290      	cmp	r0, r2
100145b6:	d84f      	bhi.n	10014658 <__aeabi_ddiv+0x56c>
100145b8:	d100      	bne.n	100145bc <__aeabi_ddiv+0x4d0>
100145ba:	e08e      	b.n	100146da <__aeabi_ddiv+0x5ee>
100145bc:	1a16      	subs	r6, r2, r0
100145be:	469b      	mov	fp, r3
100145c0:	e70d      	b.n	100143de <__aeabi_ddiv+0x2f2>
100145c2:	4589      	cmp	r9, r1
100145c4:	d200      	bcs.n	100145c8 <__aeabi_ddiv+0x4dc>
100145c6:	e68e      	b.n	100142e6 <__aeabi_ddiv+0x1fa>
100145c8:	0874      	lsrs	r4, r6, #1
100145ca:	464b      	mov	r3, r9
100145cc:	07f6      	lsls	r6, r6, #31
100145ce:	0035      	movs	r5, r6
100145d0:	085b      	lsrs	r3, r3, #1
100145d2:	431d      	orrs	r5, r3
100145d4:	464b      	mov	r3, r9
100145d6:	07db      	lsls	r3, r3, #31
100145d8:	9302      	str	r3, [sp, #8]
100145da:	e68b      	b.n	100142f4 <__aeabi_ddiv+0x208>
100145dc:	4297      	cmp	r7, r2
100145de:	d1ed      	bne.n	100145bc <__aeabi_ddiv+0x4d0>
100145e0:	9903      	ldr	r1, [sp, #12]
100145e2:	9c02      	ldr	r4, [sp, #8]
100145e4:	42a1      	cmp	r1, r4
100145e6:	d9e5      	bls.n	100145b4 <__aeabi_ddiv+0x4c8>
100145e8:	1a3e      	subs	r6, r7, r0
100145ea:	469b      	mov	fp, r3
100145ec:	e6f7      	b.n	100143de <__aeabi_ddiv+0x2f2>
100145ee:	4698      	mov	r8, r3
100145f0:	e6ca      	b.n	10014388 <__aeabi_ddiv+0x29c>
100145f2:	001e      	movs	r6, r3
100145f4:	e6a5      	b.n	10014342 <__aeabi_ddiv+0x256>
100145f6:	42ac      	cmp	r4, r5
100145f8:	d83e      	bhi.n	10014678 <__aeabi_ddiv+0x58c>
100145fa:	d074      	beq.n	100146e6 <__aeabi_ddiv+0x5fa>
100145fc:	0011      	movs	r1, r2
100145fe:	e753      	b.n	100144a8 <__aeabi_ddiv+0x3bc>
10014600:	2101      	movs	r1, #1
10014602:	4249      	negs	r1, r1
10014604:	e752      	b.n	100144ac <__aeabi_ddiv+0x3c0>
10014606:	001c      	movs	r4, r3
10014608:	e70e      	b.n	10014428 <__aeabi_ddiv+0x33c>
1001460a:	001e      	movs	r6, r3
1001460c:	e72b      	b.n	10014466 <__aeabi_ddiv+0x37a>
1001460e:	2d1f      	cmp	r5, #31
10014610:	dc3c      	bgt.n	1001468c <__aeabi_ddiv+0x5a0>
10014612:	2320      	movs	r3, #32
10014614:	000a      	movs	r2, r1
10014616:	4658      	mov	r0, fp
10014618:	1b5b      	subs	r3, r3, r5
1001461a:	4098      	lsls	r0, r3
1001461c:	40ea      	lsrs	r2, r5
1001461e:	4099      	lsls	r1, r3
10014620:	4302      	orrs	r2, r0
10014622:	1e48      	subs	r0, r1, #1
10014624:	4181      	sbcs	r1, r0
10014626:	465e      	mov	r6, fp
10014628:	4311      	orrs	r1, r2
1001462a:	40ee      	lsrs	r6, r5
1001462c:	074b      	lsls	r3, r1, #29
1001462e:	d009      	beq.n	10014644 <__aeabi_ddiv+0x558>
10014630:	230f      	movs	r3, #15
10014632:	400b      	ands	r3, r1
10014634:	2b04      	cmp	r3, #4
10014636:	d005      	beq.n	10014644 <__aeabi_ddiv+0x558>
10014638:	000b      	movs	r3, r1
1001463a:	1d19      	adds	r1, r3, #4
1001463c:	4299      	cmp	r1, r3
1001463e:	419b      	sbcs	r3, r3
10014640:	425b      	negs	r3, r3
10014642:	18f6      	adds	r6, r6, r3
10014644:	0233      	lsls	r3, r6, #8
10014646:	d53c      	bpl.n	100146c2 <__aeabi_ddiv+0x5d6>
10014648:	4653      	mov	r3, sl
1001464a:	2201      	movs	r2, #1
1001464c:	2100      	movs	r1, #0
1001464e:	401a      	ands	r2, r3
10014650:	2600      	movs	r6, #0
10014652:	2301      	movs	r3, #1
10014654:	4689      	mov	r9, r1
10014656:	e5af      	b.n	100141b8 <__aeabi_ddiv+0xcc>
10014658:	2302      	movs	r3, #2
1001465a:	425b      	negs	r3, r3
1001465c:	469c      	mov	ip, r3
1001465e:	9c03      	ldr	r4, [sp, #12]
10014660:	44e3      	add	fp, ip
10014662:	46a4      	mov	ip, r4
10014664:	9b02      	ldr	r3, [sp, #8]
10014666:	4463      	add	r3, ip
10014668:	4698      	mov	r8, r3
1001466a:	45a0      	cmp	r8, r4
1001466c:	41b6      	sbcs	r6, r6
1001466e:	4276      	negs	r6, r6
10014670:	19f6      	adds	r6, r6, r7
10014672:	9302      	str	r3, [sp, #8]
10014674:	18b2      	adds	r2, r6, r2
10014676:	e6b1      	b.n	100143dc <__aeabi_ddiv+0x2f0>
10014678:	9803      	ldr	r0, [sp, #12]
1001467a:	1e8a      	subs	r2, r1, #2
1001467c:	0041      	lsls	r1, r0, #1
1001467e:	4281      	cmp	r1, r0
10014680:	41b6      	sbcs	r6, r6
10014682:	4276      	negs	r6, r6
10014684:	19f6      	adds	r6, r6, r7
10014686:	19ad      	adds	r5, r5, r6
10014688:	9103      	str	r1, [sp, #12]
1001468a:	e761      	b.n	10014550 <__aeabi_ddiv+0x464>
1001468c:	221f      	movs	r2, #31
1001468e:	4252      	negs	r2, r2
10014690:	1ad3      	subs	r3, r2, r3
10014692:	465a      	mov	r2, fp
10014694:	40da      	lsrs	r2, r3
10014696:	0013      	movs	r3, r2
10014698:	2d20      	cmp	r5, #32
1001469a:	d029      	beq.n	100146f0 <__aeabi_ddiv+0x604>
1001469c:	2240      	movs	r2, #64	; 0x40
1001469e:	4658      	mov	r0, fp
100146a0:	1b55      	subs	r5, r2, r5
100146a2:	40a8      	lsls	r0, r5
100146a4:	4301      	orrs	r1, r0
100146a6:	1e48      	subs	r0, r1, #1
100146a8:	4181      	sbcs	r1, r0
100146aa:	2007      	movs	r0, #7
100146ac:	430b      	orrs	r3, r1
100146ae:	4018      	ands	r0, r3
100146b0:	2600      	movs	r6, #0
100146b2:	2800      	cmp	r0, #0
100146b4:	d009      	beq.n	100146ca <__aeabi_ddiv+0x5de>
100146b6:	220f      	movs	r2, #15
100146b8:	2600      	movs	r6, #0
100146ba:	401a      	ands	r2, r3
100146bc:	0019      	movs	r1, r3
100146be:	2a04      	cmp	r2, #4
100146c0:	d1bb      	bne.n	1001463a <__aeabi_ddiv+0x54e>
100146c2:	000b      	movs	r3, r1
100146c4:	0770      	lsls	r0, r6, #29
100146c6:	0276      	lsls	r6, r6, #9
100146c8:	0b36      	lsrs	r6, r6, #12
100146ca:	08db      	lsrs	r3, r3, #3
100146cc:	4303      	orrs	r3, r0
100146ce:	4699      	mov	r9, r3
100146d0:	2201      	movs	r2, #1
100146d2:	4653      	mov	r3, sl
100146d4:	401a      	ands	r2, r3
100146d6:	2300      	movs	r3, #0
100146d8:	e56e      	b.n	100141b8 <__aeabi_ddiv+0xcc>
100146da:	9902      	ldr	r1, [sp, #8]
100146dc:	428d      	cmp	r5, r1
100146de:	d8bb      	bhi.n	10014658 <__aeabi_ddiv+0x56c>
100146e0:	469b      	mov	fp, r3
100146e2:	2600      	movs	r6, #0
100146e4:	e67b      	b.n	100143de <__aeabi_ddiv+0x2f2>
100146e6:	9803      	ldr	r0, [sp, #12]
100146e8:	4298      	cmp	r0, r3
100146ea:	d3c5      	bcc.n	10014678 <__aeabi_ddiv+0x58c>
100146ec:	0011      	movs	r1, r2
100146ee:	e732      	b.n	10014556 <__aeabi_ddiv+0x46a>
100146f0:	2000      	movs	r0, #0
100146f2:	e7d7      	b.n	100146a4 <__aeabi_ddiv+0x5b8>
100146f4:	2680      	movs	r6, #128	; 0x80
100146f6:	465b      	mov	r3, fp
100146f8:	0336      	lsls	r6, r6, #12
100146fa:	431e      	orrs	r6, r3
100146fc:	0336      	lsls	r6, r6, #12
100146fe:	0b36      	lsrs	r6, r6, #12
10014700:	9a00      	ldr	r2, [sp, #0]
10014702:	4689      	mov	r9, r1
10014704:	4b03      	ldr	r3, [pc, #12]	; (10014714 <__aeabi_ddiv+0x628>)
10014706:	e557      	b.n	100141b8 <__aeabi_ddiv+0xcc>
10014708:	000003ff 	.word	0x000003ff
1001470c:	feffffff 	.word	0xfeffffff
10014710:	000007fe 	.word	0x000007fe
10014714:	000007ff 	.word	0x000007ff

10014718 <__eqdf2>:
10014718:	b5f0      	push	{r4, r5, r6, r7, lr}
1001471a:	465f      	mov	r7, fp
1001471c:	4656      	mov	r6, sl
1001471e:	464d      	mov	r5, r9
10014720:	4644      	mov	r4, r8
10014722:	b4f0      	push	{r4, r5, r6, r7}
10014724:	031f      	lsls	r7, r3, #12
10014726:	005c      	lsls	r4, r3, #1
10014728:	0fdb      	lsrs	r3, r3, #31
1001472a:	469a      	mov	sl, r3
1001472c:	4b19      	ldr	r3, [pc, #100]	; (10014794 <__eqdf2+0x7c>)
1001472e:	030e      	lsls	r6, r1, #12
10014730:	004d      	lsls	r5, r1, #1
10014732:	0fc9      	lsrs	r1, r1, #31
10014734:	4680      	mov	r8, r0
10014736:	0b36      	lsrs	r6, r6, #12
10014738:	0d6d      	lsrs	r5, r5, #21
1001473a:	468b      	mov	fp, r1
1001473c:	4691      	mov	r9, r2
1001473e:	0b3f      	lsrs	r7, r7, #12
10014740:	0d64      	lsrs	r4, r4, #21
10014742:	429d      	cmp	r5, r3
10014744:	d019      	beq.n	1001477a <__eqdf2+0x62>
10014746:	4b13      	ldr	r3, [pc, #76]	; (10014794 <__eqdf2+0x7c>)
10014748:	429c      	cmp	r4, r3
1001474a:	d01b      	beq.n	10014784 <__eqdf2+0x6c>
1001474c:	2301      	movs	r3, #1
1001474e:	42a5      	cmp	r5, r4
10014750:	d006      	beq.n	10014760 <__eqdf2+0x48>
10014752:	0018      	movs	r0, r3
10014754:	bc3c      	pop	{r2, r3, r4, r5}
10014756:	4690      	mov	r8, r2
10014758:	4699      	mov	r9, r3
1001475a:	46a2      	mov	sl, r4
1001475c:	46ab      	mov	fp, r5
1001475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014760:	42be      	cmp	r6, r7
10014762:	d1f6      	bne.n	10014752 <__eqdf2+0x3a>
10014764:	45c8      	cmp	r8, r9
10014766:	d1f4      	bne.n	10014752 <__eqdf2+0x3a>
10014768:	45d3      	cmp	fp, sl
1001476a:	d010      	beq.n	1001478e <__eqdf2+0x76>
1001476c:	2d00      	cmp	r5, #0
1001476e:	d1f0      	bne.n	10014752 <__eqdf2+0x3a>
10014770:	4330      	orrs	r0, r6
10014772:	0003      	movs	r3, r0
10014774:	1e5a      	subs	r2, r3, #1
10014776:	4193      	sbcs	r3, r2
10014778:	e7eb      	b.n	10014752 <__eqdf2+0x3a>
1001477a:	0031      	movs	r1, r6
1001477c:	2301      	movs	r3, #1
1001477e:	4301      	orrs	r1, r0
10014780:	d1e7      	bne.n	10014752 <__eqdf2+0x3a>
10014782:	e7e0      	b.n	10014746 <__eqdf2+0x2e>
10014784:	433a      	orrs	r2, r7
10014786:	2301      	movs	r3, #1
10014788:	2a00      	cmp	r2, #0
1001478a:	d1e2      	bne.n	10014752 <__eqdf2+0x3a>
1001478c:	e7de      	b.n	1001474c <__eqdf2+0x34>
1001478e:	2300      	movs	r3, #0
10014790:	e7df      	b.n	10014752 <__eqdf2+0x3a>
10014792:	46c0      	nop			; (mov r8, r8)
10014794:	000007ff 	.word	0x000007ff

10014798 <__gedf2>:
10014798:	b5f0      	push	{r4, r5, r6, r7, lr}
1001479a:	465f      	mov	r7, fp
1001479c:	4644      	mov	r4, r8
1001479e:	4656      	mov	r6, sl
100147a0:	464d      	mov	r5, r9
100147a2:	b4f0      	push	{r4, r5, r6, r7}
100147a4:	031f      	lsls	r7, r3, #12
100147a6:	0b3c      	lsrs	r4, r7, #12
100147a8:	4f2c      	ldr	r7, [pc, #176]	; (1001485c <__gedf2+0xc4>)
100147aa:	030e      	lsls	r6, r1, #12
100147ac:	004d      	lsls	r5, r1, #1
100147ae:	46a3      	mov	fp, r4
100147b0:	005c      	lsls	r4, r3, #1
100147b2:	4684      	mov	ip, r0
100147b4:	0b36      	lsrs	r6, r6, #12
100147b6:	0d6d      	lsrs	r5, r5, #21
100147b8:	0fc9      	lsrs	r1, r1, #31
100147ba:	4690      	mov	r8, r2
100147bc:	0d64      	lsrs	r4, r4, #21
100147be:	0fdb      	lsrs	r3, r3, #31
100147c0:	42bd      	cmp	r5, r7
100147c2:	d02b      	beq.n	1001481c <__gedf2+0x84>
100147c4:	4f25      	ldr	r7, [pc, #148]	; (1001485c <__gedf2+0xc4>)
100147c6:	42bc      	cmp	r4, r7
100147c8:	d02e      	beq.n	10014828 <__gedf2+0x90>
100147ca:	2d00      	cmp	r5, #0
100147cc:	d10e      	bne.n	100147ec <__gedf2+0x54>
100147ce:	4330      	orrs	r0, r6
100147d0:	0007      	movs	r7, r0
100147d2:	4681      	mov	r9, r0
100147d4:	4278      	negs	r0, r7
100147d6:	4178      	adcs	r0, r7
100147d8:	2c00      	cmp	r4, #0
100147da:	d117      	bne.n	1001480c <__gedf2+0x74>
100147dc:	465f      	mov	r7, fp
100147de:	433a      	orrs	r2, r7
100147e0:	d114      	bne.n	1001480c <__gedf2+0x74>
100147e2:	464b      	mov	r3, r9
100147e4:	2000      	movs	r0, #0
100147e6:	2b00      	cmp	r3, #0
100147e8:	d00a      	beq.n	10014800 <__gedf2+0x68>
100147ea:	e006      	b.n	100147fa <__gedf2+0x62>
100147ec:	2c00      	cmp	r4, #0
100147ee:	d102      	bne.n	100147f6 <__gedf2+0x5e>
100147f0:	4658      	mov	r0, fp
100147f2:	4302      	orrs	r2, r0
100147f4:	d001      	beq.n	100147fa <__gedf2+0x62>
100147f6:	4299      	cmp	r1, r3
100147f8:	d01a      	beq.n	10014830 <__gedf2+0x98>
100147fa:	2301      	movs	r3, #1
100147fc:	4248      	negs	r0, r1
100147fe:	4318      	orrs	r0, r3
10014800:	bc3c      	pop	{r2, r3, r4, r5}
10014802:	4690      	mov	r8, r2
10014804:	4699      	mov	r9, r3
10014806:	46a2      	mov	sl, r4
10014808:	46ab      	mov	fp, r5
1001480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001480c:	2800      	cmp	r0, #0
1001480e:	d0f2      	beq.n	100147f6 <__gedf2+0x5e>
10014810:	4258      	negs	r0, r3
10014812:	4158      	adcs	r0, r3
10014814:	2201      	movs	r2, #1
10014816:	4240      	negs	r0, r0
10014818:	4310      	orrs	r0, r2
1001481a:	e7f1      	b.n	10014800 <__gedf2+0x68>
1001481c:	0037      	movs	r7, r6
1001481e:	4307      	orrs	r7, r0
10014820:	d0d0      	beq.n	100147c4 <__gedf2+0x2c>
10014822:	2002      	movs	r0, #2
10014824:	4240      	negs	r0, r0
10014826:	e7eb      	b.n	10014800 <__gedf2+0x68>
10014828:	465f      	mov	r7, fp
1001482a:	4317      	orrs	r7, r2
1001482c:	d0cd      	beq.n	100147ca <__gedf2+0x32>
1001482e:	e7f8      	b.n	10014822 <__gedf2+0x8a>
10014830:	42a5      	cmp	r5, r4
10014832:	dce2      	bgt.n	100147fa <__gedf2+0x62>
10014834:	db05      	blt.n	10014842 <__gedf2+0xaa>
10014836:	455e      	cmp	r6, fp
10014838:	d8df      	bhi.n	100147fa <__gedf2+0x62>
1001483a:	d008      	beq.n	1001484e <__gedf2+0xb6>
1001483c:	2000      	movs	r0, #0
1001483e:	455e      	cmp	r6, fp
10014840:	d2de      	bcs.n	10014800 <__gedf2+0x68>
10014842:	4248      	negs	r0, r1
10014844:	4148      	adcs	r0, r1
10014846:	2301      	movs	r3, #1
10014848:	4240      	negs	r0, r0
1001484a:	4318      	orrs	r0, r3
1001484c:	e7d8      	b.n	10014800 <__gedf2+0x68>
1001484e:	45c4      	cmp	ip, r8
10014850:	d8d3      	bhi.n	100147fa <__gedf2+0x62>
10014852:	2000      	movs	r0, #0
10014854:	45c4      	cmp	ip, r8
10014856:	d3f4      	bcc.n	10014842 <__gedf2+0xaa>
10014858:	e7d2      	b.n	10014800 <__gedf2+0x68>
1001485a:	46c0      	nop			; (mov r8, r8)
1001485c:	000007ff 	.word	0x000007ff

10014860 <__ledf2>:
10014860:	b5f0      	push	{r4, r5, r6, r7, lr}
10014862:	465f      	mov	r7, fp
10014864:	464d      	mov	r5, r9
10014866:	4644      	mov	r4, r8
10014868:	4656      	mov	r6, sl
1001486a:	b4f0      	push	{r4, r5, r6, r7}
1001486c:	031c      	lsls	r4, r3, #12
1001486e:	0b24      	lsrs	r4, r4, #12
10014870:	46a4      	mov	ip, r4
10014872:	4c2f      	ldr	r4, [pc, #188]	; (10014930 <__ledf2+0xd0>)
10014874:	030f      	lsls	r7, r1, #12
10014876:	004d      	lsls	r5, r1, #1
10014878:	005e      	lsls	r6, r3, #1
1001487a:	0fc9      	lsrs	r1, r1, #31
1001487c:	4680      	mov	r8, r0
1001487e:	0b3f      	lsrs	r7, r7, #12
10014880:	0d6d      	lsrs	r5, r5, #21
10014882:	468b      	mov	fp, r1
10014884:	4691      	mov	r9, r2
10014886:	0d76      	lsrs	r6, r6, #21
10014888:	0fdb      	lsrs	r3, r3, #31
1001488a:	42a5      	cmp	r5, r4
1001488c:	d020      	beq.n	100148d0 <__ledf2+0x70>
1001488e:	4c28      	ldr	r4, [pc, #160]	; (10014930 <__ledf2+0xd0>)
10014890:	42a6      	cmp	r6, r4
10014892:	d022      	beq.n	100148da <__ledf2+0x7a>
10014894:	2d00      	cmp	r5, #0
10014896:	d112      	bne.n	100148be <__ledf2+0x5e>
10014898:	4338      	orrs	r0, r7
1001489a:	4244      	negs	r4, r0
1001489c:	4144      	adcs	r4, r0
1001489e:	2e00      	cmp	r6, #0
100148a0:	d020      	beq.n	100148e4 <__ledf2+0x84>
100148a2:	2c00      	cmp	r4, #0
100148a4:	d00d      	beq.n	100148c2 <__ledf2+0x62>
100148a6:	425c      	negs	r4, r3
100148a8:	4163      	adcs	r3, r4
100148aa:	2401      	movs	r4, #1
100148ac:	425b      	negs	r3, r3
100148ae:	431c      	orrs	r4, r3
100148b0:	0020      	movs	r0, r4
100148b2:	bc3c      	pop	{r2, r3, r4, r5}
100148b4:	4690      	mov	r8, r2
100148b6:	4699      	mov	r9, r3
100148b8:	46a2      	mov	sl, r4
100148ba:	46ab      	mov	fp, r5
100148bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100148be:	2e00      	cmp	r6, #0
100148c0:	d017      	beq.n	100148f2 <__ledf2+0x92>
100148c2:	455b      	cmp	r3, fp
100148c4:	d019      	beq.n	100148fa <__ledf2+0x9a>
100148c6:	465b      	mov	r3, fp
100148c8:	425c      	negs	r4, r3
100148ca:	2301      	movs	r3, #1
100148cc:	431c      	orrs	r4, r3
100148ce:	e7ef      	b.n	100148b0 <__ledf2+0x50>
100148d0:	0039      	movs	r1, r7
100148d2:	2402      	movs	r4, #2
100148d4:	4301      	orrs	r1, r0
100148d6:	d1eb      	bne.n	100148b0 <__ledf2+0x50>
100148d8:	e7d9      	b.n	1001488e <__ledf2+0x2e>
100148da:	4661      	mov	r1, ip
100148dc:	2402      	movs	r4, #2
100148de:	4311      	orrs	r1, r2
100148e0:	d1e6      	bne.n	100148b0 <__ledf2+0x50>
100148e2:	e7d7      	b.n	10014894 <__ledf2+0x34>
100148e4:	4661      	mov	r1, ip
100148e6:	430a      	orrs	r2, r1
100148e8:	d1db      	bne.n	100148a2 <__ledf2+0x42>
100148ea:	2400      	movs	r4, #0
100148ec:	2800      	cmp	r0, #0
100148ee:	d0df      	beq.n	100148b0 <__ledf2+0x50>
100148f0:	e7e9      	b.n	100148c6 <__ledf2+0x66>
100148f2:	4661      	mov	r1, ip
100148f4:	430a      	orrs	r2, r1
100148f6:	d1e4      	bne.n	100148c2 <__ledf2+0x62>
100148f8:	e7e5      	b.n	100148c6 <__ledf2+0x66>
100148fa:	42b5      	cmp	r5, r6
100148fc:	dd03      	ble.n	10014906 <__ledf2+0xa6>
100148fe:	2201      	movs	r2, #1
10014900:	425c      	negs	r4, r3
10014902:	4314      	orrs	r4, r2
10014904:	e7d4      	b.n	100148b0 <__ledf2+0x50>
10014906:	42b5      	cmp	r5, r6
10014908:	dbcd      	blt.n	100148a6 <__ledf2+0x46>
1001490a:	4567      	cmp	r7, ip
1001490c:	d8db      	bhi.n	100148c6 <__ledf2+0x66>
1001490e:	d009      	beq.n	10014924 <__ledf2+0xc4>
10014910:	2400      	movs	r4, #0
10014912:	4567      	cmp	r7, ip
10014914:	d2cc      	bcs.n	100148b0 <__ledf2+0x50>
10014916:	4659      	mov	r1, fp
10014918:	424c      	negs	r4, r1
1001491a:	4161      	adcs	r1, r4
1001491c:	2401      	movs	r4, #1
1001491e:	4249      	negs	r1, r1
10014920:	430c      	orrs	r4, r1
10014922:	e7c5      	b.n	100148b0 <__ledf2+0x50>
10014924:	45c8      	cmp	r8, r9
10014926:	d8ce      	bhi.n	100148c6 <__ledf2+0x66>
10014928:	2400      	movs	r4, #0
1001492a:	45c8      	cmp	r8, r9
1001492c:	d3f3      	bcc.n	10014916 <__ledf2+0xb6>
1001492e:	e7bf      	b.n	100148b0 <__ledf2+0x50>
10014930:	000007ff 	.word	0x000007ff

10014934 <__aeabi_dmul>:
10014934:	b5f0      	push	{r4, r5, r6, r7, lr}
10014936:	465f      	mov	r7, fp
10014938:	4656      	mov	r6, sl
1001493a:	464d      	mov	r5, r9
1001493c:	4644      	mov	r4, r8
1001493e:	b4f0      	push	{r4, r5, r6, r7}
10014940:	030d      	lsls	r5, r1, #12
10014942:	4699      	mov	r9, r3
10014944:	004e      	lsls	r6, r1, #1
10014946:	0b2b      	lsrs	r3, r5, #12
10014948:	b087      	sub	sp, #28
1001494a:	0007      	movs	r7, r0
1001494c:	4692      	mov	sl, r2
1001494e:	4680      	mov	r8, r0
10014950:	469b      	mov	fp, r3
10014952:	0d76      	lsrs	r6, r6, #21
10014954:	0fcc      	lsrs	r4, r1, #31
10014956:	2e00      	cmp	r6, #0
10014958:	d069      	beq.n	10014a2e <__aeabi_dmul+0xfa>
1001495a:	4b6d      	ldr	r3, [pc, #436]	; (10014b10 <__aeabi_dmul+0x1dc>)
1001495c:	429e      	cmp	r6, r3
1001495e:	d035      	beq.n	100149cc <__aeabi_dmul+0x98>
10014960:	465b      	mov	r3, fp
10014962:	2280      	movs	r2, #128	; 0x80
10014964:	00dd      	lsls	r5, r3, #3
10014966:	0412      	lsls	r2, r2, #16
10014968:	0f43      	lsrs	r3, r0, #29
1001496a:	4313      	orrs	r3, r2
1001496c:	432b      	orrs	r3, r5
1001496e:	469b      	mov	fp, r3
10014970:	00c3      	lsls	r3, r0, #3
10014972:	4698      	mov	r8, r3
10014974:	4b67      	ldr	r3, [pc, #412]	; (10014b14 <__aeabi_dmul+0x1e0>)
10014976:	2700      	movs	r7, #0
10014978:	469c      	mov	ip, r3
1001497a:	2300      	movs	r3, #0
1001497c:	4466      	add	r6, ip
1001497e:	9301      	str	r3, [sp, #4]
10014980:	464a      	mov	r2, r9
10014982:	0315      	lsls	r5, r2, #12
10014984:	0050      	lsls	r0, r2, #1
10014986:	0fd2      	lsrs	r2, r2, #31
10014988:	4653      	mov	r3, sl
1001498a:	0b2d      	lsrs	r5, r5, #12
1001498c:	0d40      	lsrs	r0, r0, #21
1001498e:	4691      	mov	r9, r2
10014990:	d100      	bne.n	10014994 <__aeabi_dmul+0x60>
10014992:	e076      	b.n	10014a82 <__aeabi_dmul+0x14e>
10014994:	4a5e      	ldr	r2, [pc, #376]	; (10014b10 <__aeabi_dmul+0x1dc>)
10014996:	4290      	cmp	r0, r2
10014998:	d06c      	beq.n	10014a74 <__aeabi_dmul+0x140>
1001499a:	2280      	movs	r2, #128	; 0x80
1001499c:	0f5b      	lsrs	r3, r3, #29
1001499e:	0412      	lsls	r2, r2, #16
100149a0:	4313      	orrs	r3, r2
100149a2:	4a5c      	ldr	r2, [pc, #368]	; (10014b14 <__aeabi_dmul+0x1e0>)
100149a4:	00ed      	lsls	r5, r5, #3
100149a6:	4694      	mov	ip, r2
100149a8:	431d      	orrs	r5, r3
100149aa:	4653      	mov	r3, sl
100149ac:	2200      	movs	r2, #0
100149ae:	00db      	lsls	r3, r3, #3
100149b0:	4460      	add	r0, ip
100149b2:	4649      	mov	r1, r9
100149b4:	1836      	adds	r6, r6, r0
100149b6:	1c70      	adds	r0, r6, #1
100149b8:	4061      	eors	r1, r4
100149ba:	9002      	str	r0, [sp, #8]
100149bc:	4317      	orrs	r7, r2
100149be:	2f0f      	cmp	r7, #15
100149c0:	d900      	bls.n	100149c4 <__aeabi_dmul+0x90>
100149c2:	e0af      	b.n	10014b24 <__aeabi_dmul+0x1f0>
100149c4:	4854      	ldr	r0, [pc, #336]	; (10014b18 <__aeabi_dmul+0x1e4>)
100149c6:	00bf      	lsls	r7, r7, #2
100149c8:	59c7      	ldr	r7, [r0, r7]
100149ca:	46bf      	mov	pc, r7
100149cc:	465b      	mov	r3, fp
100149ce:	431f      	orrs	r7, r3
100149d0:	d000      	beq.n	100149d4 <__aeabi_dmul+0xa0>
100149d2:	e088      	b.n	10014ae6 <__aeabi_dmul+0x1b2>
100149d4:	2300      	movs	r3, #0
100149d6:	469b      	mov	fp, r3
100149d8:	4698      	mov	r8, r3
100149da:	3302      	adds	r3, #2
100149dc:	2708      	movs	r7, #8
100149de:	9301      	str	r3, [sp, #4]
100149e0:	e7ce      	b.n	10014980 <__aeabi_dmul+0x4c>
100149e2:	4649      	mov	r1, r9
100149e4:	2a02      	cmp	r2, #2
100149e6:	d06a      	beq.n	10014abe <__aeabi_dmul+0x18a>
100149e8:	2a03      	cmp	r2, #3
100149ea:	d100      	bne.n	100149ee <__aeabi_dmul+0xba>
100149ec:	e209      	b.n	10014e02 <__aeabi_dmul+0x4ce>
100149ee:	2a01      	cmp	r2, #1
100149f0:	d000      	beq.n	100149f4 <__aeabi_dmul+0xc0>
100149f2:	e1bb      	b.n	10014d6c <__aeabi_dmul+0x438>
100149f4:	4011      	ands	r1, r2
100149f6:	2200      	movs	r2, #0
100149f8:	2300      	movs	r3, #0
100149fa:	2500      	movs	r5, #0
100149fc:	4690      	mov	r8, r2
100149fe:	b2cc      	uxtb	r4, r1
10014a00:	2100      	movs	r1, #0
10014a02:	032d      	lsls	r5, r5, #12
10014a04:	0d0a      	lsrs	r2, r1, #20
10014a06:	0512      	lsls	r2, r2, #20
10014a08:	0b2d      	lsrs	r5, r5, #12
10014a0a:	4315      	orrs	r5, r2
10014a0c:	4a43      	ldr	r2, [pc, #268]	; (10014b1c <__aeabi_dmul+0x1e8>)
10014a0e:	051b      	lsls	r3, r3, #20
10014a10:	4015      	ands	r5, r2
10014a12:	431d      	orrs	r5, r3
10014a14:	006d      	lsls	r5, r5, #1
10014a16:	07e4      	lsls	r4, r4, #31
10014a18:	086d      	lsrs	r5, r5, #1
10014a1a:	4325      	orrs	r5, r4
10014a1c:	4640      	mov	r0, r8
10014a1e:	0029      	movs	r1, r5
10014a20:	b007      	add	sp, #28
10014a22:	bc3c      	pop	{r2, r3, r4, r5}
10014a24:	4690      	mov	r8, r2
10014a26:	4699      	mov	r9, r3
10014a28:	46a2      	mov	sl, r4
10014a2a:	46ab      	mov	fp, r5
10014a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014a2e:	4303      	orrs	r3, r0
10014a30:	d052      	beq.n	10014ad8 <__aeabi_dmul+0x1a4>
10014a32:	465b      	mov	r3, fp
10014a34:	2b00      	cmp	r3, #0
10014a36:	d100      	bne.n	10014a3a <__aeabi_dmul+0x106>
10014a38:	e18a      	b.n	10014d50 <__aeabi_dmul+0x41c>
10014a3a:	4658      	mov	r0, fp
10014a3c:	f000 fef8 	bl	10015830 <__clzsi2>
10014a40:	0003      	movs	r3, r0
10014a42:	3b0b      	subs	r3, #11
10014a44:	2b1c      	cmp	r3, #28
10014a46:	dd00      	ble.n	10014a4a <__aeabi_dmul+0x116>
10014a48:	e17b      	b.n	10014d42 <__aeabi_dmul+0x40e>
10014a4a:	221d      	movs	r2, #29
10014a4c:	1ad3      	subs	r3, r2, r3
10014a4e:	003a      	movs	r2, r7
10014a50:	0001      	movs	r1, r0
10014a52:	465d      	mov	r5, fp
10014a54:	40da      	lsrs	r2, r3
10014a56:	3908      	subs	r1, #8
10014a58:	408d      	lsls	r5, r1
10014a5a:	0013      	movs	r3, r2
10014a5c:	408f      	lsls	r7, r1
10014a5e:	432b      	orrs	r3, r5
10014a60:	469b      	mov	fp, r3
10014a62:	46b8      	mov	r8, r7
10014a64:	4b2e      	ldr	r3, [pc, #184]	; (10014b20 <__aeabi_dmul+0x1ec>)
10014a66:	2700      	movs	r7, #0
10014a68:	469c      	mov	ip, r3
10014a6a:	2300      	movs	r3, #0
10014a6c:	4460      	add	r0, ip
10014a6e:	4246      	negs	r6, r0
10014a70:	9301      	str	r3, [sp, #4]
10014a72:	e785      	b.n	10014980 <__aeabi_dmul+0x4c>
10014a74:	4652      	mov	r2, sl
10014a76:	432a      	orrs	r2, r5
10014a78:	d12c      	bne.n	10014ad4 <__aeabi_dmul+0x1a0>
10014a7a:	2500      	movs	r5, #0
10014a7c:	2300      	movs	r3, #0
10014a7e:	2202      	movs	r2, #2
10014a80:	e797      	b.n	100149b2 <__aeabi_dmul+0x7e>
10014a82:	4652      	mov	r2, sl
10014a84:	432a      	orrs	r2, r5
10014a86:	d021      	beq.n	10014acc <__aeabi_dmul+0x198>
10014a88:	2d00      	cmp	r5, #0
10014a8a:	d100      	bne.n	10014a8e <__aeabi_dmul+0x15a>
10014a8c:	e154      	b.n	10014d38 <__aeabi_dmul+0x404>
10014a8e:	0028      	movs	r0, r5
10014a90:	f000 fece 	bl	10015830 <__clzsi2>
10014a94:	0003      	movs	r3, r0
10014a96:	3b0b      	subs	r3, #11
10014a98:	2b1c      	cmp	r3, #28
10014a9a:	dd00      	ble.n	10014a9e <__aeabi_dmul+0x16a>
10014a9c:	e146      	b.n	10014d2c <__aeabi_dmul+0x3f8>
10014a9e:	211d      	movs	r1, #29
10014aa0:	1acb      	subs	r3, r1, r3
10014aa2:	4651      	mov	r1, sl
10014aa4:	0002      	movs	r2, r0
10014aa6:	40d9      	lsrs	r1, r3
10014aa8:	4653      	mov	r3, sl
10014aaa:	3a08      	subs	r2, #8
10014aac:	4095      	lsls	r5, r2
10014aae:	4093      	lsls	r3, r2
10014ab0:	430d      	orrs	r5, r1
10014ab2:	4a1b      	ldr	r2, [pc, #108]	; (10014b20 <__aeabi_dmul+0x1ec>)
10014ab4:	4694      	mov	ip, r2
10014ab6:	4460      	add	r0, ip
10014ab8:	4240      	negs	r0, r0
10014aba:	2200      	movs	r2, #0
10014abc:	e779      	b.n	100149b2 <__aeabi_dmul+0x7e>
10014abe:	2401      	movs	r4, #1
10014ac0:	2200      	movs	r2, #0
10014ac2:	400c      	ands	r4, r1
10014ac4:	4b12      	ldr	r3, [pc, #72]	; (10014b10 <__aeabi_dmul+0x1dc>)
10014ac6:	2500      	movs	r5, #0
10014ac8:	4690      	mov	r8, r2
10014aca:	e799      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014acc:	2500      	movs	r5, #0
10014ace:	2300      	movs	r3, #0
10014ad0:	2201      	movs	r2, #1
10014ad2:	e76e      	b.n	100149b2 <__aeabi_dmul+0x7e>
10014ad4:	2203      	movs	r2, #3
10014ad6:	e76c      	b.n	100149b2 <__aeabi_dmul+0x7e>
10014ad8:	2300      	movs	r3, #0
10014ada:	469b      	mov	fp, r3
10014adc:	4698      	mov	r8, r3
10014ade:	3301      	adds	r3, #1
10014ae0:	2704      	movs	r7, #4
10014ae2:	9301      	str	r3, [sp, #4]
10014ae4:	e74c      	b.n	10014980 <__aeabi_dmul+0x4c>
10014ae6:	2303      	movs	r3, #3
10014ae8:	270c      	movs	r7, #12
10014aea:	9301      	str	r3, [sp, #4]
10014aec:	e748      	b.n	10014980 <__aeabi_dmul+0x4c>
10014aee:	2300      	movs	r3, #0
10014af0:	2580      	movs	r5, #128	; 0x80
10014af2:	4698      	mov	r8, r3
10014af4:	2400      	movs	r4, #0
10014af6:	032d      	lsls	r5, r5, #12
10014af8:	4b05      	ldr	r3, [pc, #20]	; (10014b10 <__aeabi_dmul+0x1dc>)
10014afa:	e781      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014afc:	465d      	mov	r5, fp
10014afe:	4643      	mov	r3, r8
10014b00:	9a01      	ldr	r2, [sp, #4]
10014b02:	e76f      	b.n	100149e4 <__aeabi_dmul+0xb0>
10014b04:	465d      	mov	r5, fp
10014b06:	4643      	mov	r3, r8
10014b08:	0021      	movs	r1, r4
10014b0a:	9a01      	ldr	r2, [sp, #4]
10014b0c:	e76a      	b.n	100149e4 <__aeabi_dmul+0xb0>
10014b0e:	46c0      	nop			; (mov r8, r8)
10014b10:	000007ff 	.word	0x000007ff
10014b14:	fffffc01 	.word	0xfffffc01
10014b18:	10018600 	.word	0x10018600
10014b1c:	800fffff 	.word	0x800fffff
10014b20:	000003f3 	.word	0x000003f3
10014b24:	4642      	mov	r2, r8
10014b26:	0c12      	lsrs	r2, r2, #16
10014b28:	4691      	mov	r9, r2
10014b2a:	0c1a      	lsrs	r2, r3, #16
10014b2c:	4694      	mov	ip, r2
10014b2e:	4642      	mov	r2, r8
10014b30:	0417      	lsls	r7, r2, #16
10014b32:	464a      	mov	r2, r9
10014b34:	041b      	lsls	r3, r3, #16
10014b36:	0c1b      	lsrs	r3, r3, #16
10014b38:	435a      	muls	r2, r3
10014b3a:	4660      	mov	r0, ip
10014b3c:	4690      	mov	r8, r2
10014b3e:	464a      	mov	r2, r9
10014b40:	4342      	muls	r2, r0
10014b42:	0010      	movs	r0, r2
10014b44:	9203      	str	r2, [sp, #12]
10014b46:	4662      	mov	r2, ip
10014b48:	001c      	movs	r4, r3
10014b4a:	0c3f      	lsrs	r7, r7, #16
10014b4c:	437a      	muls	r2, r7
10014b4e:	437c      	muls	r4, r7
10014b50:	4442      	add	r2, r8
10014b52:	9201      	str	r2, [sp, #4]
10014b54:	0c22      	lsrs	r2, r4, #16
10014b56:	4692      	mov	sl, r2
10014b58:	9a01      	ldr	r2, [sp, #4]
10014b5a:	4452      	add	r2, sl
10014b5c:	4590      	cmp	r8, r2
10014b5e:	d906      	bls.n	10014b6e <__aeabi_dmul+0x23a>
10014b60:	4682      	mov	sl, r0
10014b62:	2080      	movs	r0, #128	; 0x80
10014b64:	0240      	lsls	r0, r0, #9
10014b66:	4680      	mov	r8, r0
10014b68:	44c2      	add	sl, r8
10014b6a:	4650      	mov	r0, sl
10014b6c:	9003      	str	r0, [sp, #12]
10014b6e:	0c10      	lsrs	r0, r2, #16
10014b70:	9004      	str	r0, [sp, #16]
10014b72:	4648      	mov	r0, r9
10014b74:	0424      	lsls	r4, r4, #16
10014b76:	0c24      	lsrs	r4, r4, #16
10014b78:	0412      	lsls	r2, r2, #16
10014b7a:	1912      	adds	r2, r2, r4
10014b7c:	9205      	str	r2, [sp, #20]
10014b7e:	0c2a      	lsrs	r2, r5, #16
10014b80:	042d      	lsls	r5, r5, #16
10014b82:	0c2d      	lsrs	r5, r5, #16
10014b84:	4368      	muls	r0, r5
10014b86:	002c      	movs	r4, r5
10014b88:	4682      	mov	sl, r0
10014b8a:	4648      	mov	r0, r9
10014b8c:	437c      	muls	r4, r7
10014b8e:	4350      	muls	r0, r2
10014b90:	4681      	mov	r9, r0
10014b92:	0c20      	lsrs	r0, r4, #16
10014b94:	4680      	mov	r8, r0
10014b96:	4357      	muls	r7, r2
10014b98:	4457      	add	r7, sl
10014b9a:	4447      	add	r7, r8
10014b9c:	45ba      	cmp	sl, r7
10014b9e:	d903      	bls.n	10014ba8 <__aeabi_dmul+0x274>
10014ba0:	2080      	movs	r0, #128	; 0x80
10014ba2:	0240      	lsls	r0, r0, #9
10014ba4:	4680      	mov	r8, r0
10014ba6:	44c1      	add	r9, r8
10014ba8:	0c38      	lsrs	r0, r7, #16
10014baa:	043f      	lsls	r7, r7, #16
10014bac:	46b8      	mov	r8, r7
10014bae:	4448      	add	r0, r9
10014bb0:	0424      	lsls	r4, r4, #16
10014bb2:	0c24      	lsrs	r4, r4, #16
10014bb4:	9001      	str	r0, [sp, #4]
10014bb6:	9804      	ldr	r0, [sp, #16]
10014bb8:	44a0      	add	r8, r4
10014bba:	4440      	add	r0, r8
10014bbc:	9004      	str	r0, [sp, #16]
10014bbe:	4658      	mov	r0, fp
10014bc0:	0c00      	lsrs	r0, r0, #16
10014bc2:	4681      	mov	r9, r0
10014bc4:	4658      	mov	r0, fp
10014bc6:	0404      	lsls	r4, r0, #16
10014bc8:	0c20      	lsrs	r0, r4, #16
10014bca:	4682      	mov	sl, r0
10014bcc:	0007      	movs	r7, r0
10014bce:	4648      	mov	r0, r9
10014bd0:	435f      	muls	r7, r3
10014bd2:	464c      	mov	r4, r9
10014bd4:	4343      	muls	r3, r0
10014bd6:	4660      	mov	r0, ip
10014bd8:	4360      	muls	r0, r4
10014bda:	4664      	mov	r4, ip
10014bdc:	4683      	mov	fp, r0
10014bde:	4650      	mov	r0, sl
10014be0:	4344      	muls	r4, r0
10014be2:	0c38      	lsrs	r0, r7, #16
10014be4:	4684      	mov	ip, r0
10014be6:	18e4      	adds	r4, r4, r3
10014be8:	4464      	add	r4, ip
10014bea:	42a3      	cmp	r3, r4
10014bec:	d903      	bls.n	10014bf6 <__aeabi_dmul+0x2c2>
10014bee:	2380      	movs	r3, #128	; 0x80
10014bf0:	025b      	lsls	r3, r3, #9
10014bf2:	469c      	mov	ip, r3
10014bf4:	44e3      	add	fp, ip
10014bf6:	4648      	mov	r0, r9
10014bf8:	043f      	lsls	r7, r7, #16
10014bfa:	0c23      	lsrs	r3, r4, #16
10014bfc:	0c3f      	lsrs	r7, r7, #16
10014bfe:	0424      	lsls	r4, r4, #16
10014c00:	19e4      	adds	r4, r4, r7
10014c02:	4657      	mov	r7, sl
10014c04:	4368      	muls	r0, r5
10014c06:	436f      	muls	r7, r5
10014c08:	4684      	mov	ip, r0
10014c0a:	464d      	mov	r5, r9
10014c0c:	4650      	mov	r0, sl
10014c0e:	4355      	muls	r5, r2
10014c10:	4342      	muls	r2, r0
10014c12:	0c38      	lsrs	r0, r7, #16
10014c14:	4681      	mov	r9, r0
10014c16:	4462      	add	r2, ip
10014c18:	444a      	add	r2, r9
10014c1a:	445b      	add	r3, fp
10014c1c:	4594      	cmp	ip, r2
10014c1e:	d903      	bls.n	10014c28 <__aeabi_dmul+0x2f4>
10014c20:	2080      	movs	r0, #128	; 0x80
10014c22:	0240      	lsls	r0, r0, #9
10014c24:	4684      	mov	ip, r0
10014c26:	4465      	add	r5, ip
10014c28:	9803      	ldr	r0, [sp, #12]
10014c2a:	043f      	lsls	r7, r7, #16
10014c2c:	4683      	mov	fp, r0
10014c2e:	9804      	ldr	r0, [sp, #16]
10014c30:	0c3f      	lsrs	r7, r7, #16
10014c32:	4684      	mov	ip, r0
10014c34:	44e3      	add	fp, ip
10014c36:	45c3      	cmp	fp, r8
10014c38:	4180      	sbcs	r0, r0
10014c3a:	4240      	negs	r0, r0
10014c3c:	4682      	mov	sl, r0
10014c3e:	0410      	lsls	r0, r2, #16
10014c40:	4684      	mov	ip, r0
10014c42:	9801      	ldr	r0, [sp, #4]
10014c44:	4467      	add	r7, ip
10014c46:	4684      	mov	ip, r0
10014c48:	4467      	add	r7, ip
10014c4a:	44a3      	add	fp, r4
10014c4c:	46bc      	mov	ip, r7
10014c4e:	45a3      	cmp	fp, r4
10014c50:	41a4      	sbcs	r4, r4
10014c52:	4699      	mov	r9, r3
10014c54:	44d4      	add	ip, sl
10014c56:	4264      	negs	r4, r4
10014c58:	4287      	cmp	r7, r0
10014c5a:	41bf      	sbcs	r7, r7
10014c5c:	45d4      	cmp	ip, sl
10014c5e:	4180      	sbcs	r0, r0
10014c60:	44e1      	add	r9, ip
10014c62:	46a0      	mov	r8, r4
10014c64:	4599      	cmp	r9, r3
10014c66:	419b      	sbcs	r3, r3
10014c68:	427f      	negs	r7, r7
10014c6a:	4240      	negs	r0, r0
10014c6c:	44c8      	add	r8, r9
10014c6e:	4307      	orrs	r7, r0
10014c70:	0c12      	lsrs	r2, r2, #16
10014c72:	18ba      	adds	r2, r7, r2
10014c74:	45a0      	cmp	r8, r4
10014c76:	41a4      	sbcs	r4, r4
10014c78:	425f      	negs	r7, r3
10014c7a:	003b      	movs	r3, r7
10014c7c:	4264      	negs	r4, r4
10014c7e:	4323      	orrs	r3, r4
10014c80:	18d7      	adds	r7, r2, r3
10014c82:	4643      	mov	r3, r8
10014c84:	197d      	adds	r5, r7, r5
10014c86:	0ddb      	lsrs	r3, r3, #23
10014c88:	026d      	lsls	r5, r5, #9
10014c8a:	431d      	orrs	r5, r3
10014c8c:	465b      	mov	r3, fp
10014c8e:	025a      	lsls	r2, r3, #9
10014c90:	9b05      	ldr	r3, [sp, #20]
10014c92:	431a      	orrs	r2, r3
10014c94:	1e53      	subs	r3, r2, #1
10014c96:	419a      	sbcs	r2, r3
10014c98:	465b      	mov	r3, fp
10014c9a:	0ddb      	lsrs	r3, r3, #23
10014c9c:	431a      	orrs	r2, r3
10014c9e:	4643      	mov	r3, r8
10014ca0:	025b      	lsls	r3, r3, #9
10014ca2:	4313      	orrs	r3, r2
10014ca4:	01ea      	lsls	r2, r5, #7
10014ca6:	d507      	bpl.n	10014cb8 <__aeabi_dmul+0x384>
10014ca8:	2201      	movs	r2, #1
10014caa:	085c      	lsrs	r4, r3, #1
10014cac:	4013      	ands	r3, r2
10014cae:	4323      	orrs	r3, r4
10014cb0:	07ea      	lsls	r2, r5, #31
10014cb2:	9e02      	ldr	r6, [sp, #8]
10014cb4:	4313      	orrs	r3, r2
10014cb6:	086d      	lsrs	r5, r5, #1
10014cb8:	4a57      	ldr	r2, [pc, #348]	; (10014e18 <__aeabi_dmul+0x4e4>)
10014cba:	18b2      	adds	r2, r6, r2
10014cbc:	2a00      	cmp	r2, #0
10014cbe:	dd4b      	ble.n	10014d58 <__aeabi_dmul+0x424>
10014cc0:	0758      	lsls	r0, r3, #29
10014cc2:	d009      	beq.n	10014cd8 <__aeabi_dmul+0x3a4>
10014cc4:	200f      	movs	r0, #15
10014cc6:	4018      	ands	r0, r3
10014cc8:	2804      	cmp	r0, #4
10014cca:	d005      	beq.n	10014cd8 <__aeabi_dmul+0x3a4>
10014ccc:	1d18      	adds	r0, r3, #4
10014cce:	4298      	cmp	r0, r3
10014cd0:	419b      	sbcs	r3, r3
10014cd2:	425b      	negs	r3, r3
10014cd4:	18ed      	adds	r5, r5, r3
10014cd6:	0003      	movs	r3, r0
10014cd8:	01e8      	lsls	r0, r5, #7
10014cda:	d504      	bpl.n	10014ce6 <__aeabi_dmul+0x3b2>
10014cdc:	4a4f      	ldr	r2, [pc, #316]	; (10014e1c <__aeabi_dmul+0x4e8>)
10014cde:	4015      	ands	r5, r2
10014ce0:	2280      	movs	r2, #128	; 0x80
10014ce2:	00d2      	lsls	r2, r2, #3
10014ce4:	18b2      	adds	r2, r6, r2
10014ce6:	484e      	ldr	r0, [pc, #312]	; (10014e20 <__aeabi_dmul+0x4ec>)
10014ce8:	4282      	cmp	r2, r0
10014cea:	dd00      	ble.n	10014cee <__aeabi_dmul+0x3ba>
10014cec:	e6e7      	b.n	10014abe <__aeabi_dmul+0x18a>
10014cee:	2401      	movs	r4, #1
10014cf0:	08db      	lsrs	r3, r3, #3
10014cf2:	0768      	lsls	r0, r5, #29
10014cf4:	4318      	orrs	r0, r3
10014cf6:	026d      	lsls	r5, r5, #9
10014cf8:	0553      	lsls	r3, r2, #21
10014cfa:	4680      	mov	r8, r0
10014cfc:	0b2d      	lsrs	r5, r5, #12
10014cfe:	0d5b      	lsrs	r3, r3, #21
10014d00:	400c      	ands	r4, r1
10014d02:	e67d      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014d04:	2280      	movs	r2, #128	; 0x80
10014d06:	4659      	mov	r1, fp
10014d08:	0312      	lsls	r2, r2, #12
10014d0a:	4211      	tst	r1, r2
10014d0c:	d008      	beq.n	10014d20 <__aeabi_dmul+0x3ec>
10014d0e:	4215      	tst	r5, r2
10014d10:	d106      	bne.n	10014d20 <__aeabi_dmul+0x3ec>
10014d12:	4315      	orrs	r5, r2
10014d14:	032d      	lsls	r5, r5, #12
10014d16:	4698      	mov	r8, r3
10014d18:	0b2d      	lsrs	r5, r5, #12
10014d1a:	464c      	mov	r4, r9
10014d1c:	4b41      	ldr	r3, [pc, #260]	; (10014e24 <__aeabi_dmul+0x4f0>)
10014d1e:	e66f      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014d20:	465d      	mov	r5, fp
10014d22:	4315      	orrs	r5, r2
10014d24:	032d      	lsls	r5, r5, #12
10014d26:	0b2d      	lsrs	r5, r5, #12
10014d28:	4b3e      	ldr	r3, [pc, #248]	; (10014e24 <__aeabi_dmul+0x4f0>)
10014d2a:	e669      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014d2c:	0003      	movs	r3, r0
10014d2e:	4655      	mov	r5, sl
10014d30:	3b28      	subs	r3, #40	; 0x28
10014d32:	409d      	lsls	r5, r3
10014d34:	2300      	movs	r3, #0
10014d36:	e6bc      	b.n	10014ab2 <__aeabi_dmul+0x17e>
10014d38:	4650      	mov	r0, sl
10014d3a:	f000 fd79 	bl	10015830 <__clzsi2>
10014d3e:	3020      	adds	r0, #32
10014d40:	e6a8      	b.n	10014a94 <__aeabi_dmul+0x160>
10014d42:	0003      	movs	r3, r0
10014d44:	3b28      	subs	r3, #40	; 0x28
10014d46:	409f      	lsls	r7, r3
10014d48:	2300      	movs	r3, #0
10014d4a:	46bb      	mov	fp, r7
10014d4c:	4698      	mov	r8, r3
10014d4e:	e689      	b.n	10014a64 <__aeabi_dmul+0x130>
10014d50:	f000 fd6e 	bl	10015830 <__clzsi2>
10014d54:	3020      	adds	r0, #32
10014d56:	e673      	b.n	10014a40 <__aeabi_dmul+0x10c>
10014d58:	2401      	movs	r4, #1
10014d5a:	1aa6      	subs	r6, r4, r2
10014d5c:	2e38      	cmp	r6, #56	; 0x38
10014d5e:	dd07      	ble.n	10014d70 <__aeabi_dmul+0x43c>
10014d60:	2200      	movs	r2, #0
10014d62:	400c      	ands	r4, r1
10014d64:	2300      	movs	r3, #0
10014d66:	2500      	movs	r5, #0
10014d68:	4690      	mov	r8, r2
10014d6a:	e649      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014d6c:	9e02      	ldr	r6, [sp, #8]
10014d6e:	e7a3      	b.n	10014cb8 <__aeabi_dmul+0x384>
10014d70:	2e1f      	cmp	r6, #31
10014d72:	dc20      	bgt.n	10014db6 <__aeabi_dmul+0x482>
10014d74:	2220      	movs	r2, #32
10014d76:	002c      	movs	r4, r5
10014d78:	0018      	movs	r0, r3
10014d7a:	1b92      	subs	r2, r2, r6
10014d7c:	40f0      	lsrs	r0, r6
10014d7e:	4094      	lsls	r4, r2
10014d80:	4093      	lsls	r3, r2
10014d82:	4304      	orrs	r4, r0
10014d84:	1e58      	subs	r0, r3, #1
10014d86:	4183      	sbcs	r3, r0
10014d88:	431c      	orrs	r4, r3
10014d8a:	40f5      	lsrs	r5, r6
10014d8c:	0763      	lsls	r3, r4, #29
10014d8e:	d009      	beq.n	10014da4 <__aeabi_dmul+0x470>
10014d90:	230f      	movs	r3, #15
10014d92:	4023      	ands	r3, r4
10014d94:	2b04      	cmp	r3, #4
10014d96:	d005      	beq.n	10014da4 <__aeabi_dmul+0x470>
10014d98:	0023      	movs	r3, r4
10014d9a:	1d1c      	adds	r4, r3, #4
10014d9c:	429c      	cmp	r4, r3
10014d9e:	4192      	sbcs	r2, r2
10014da0:	4252      	negs	r2, r2
10014da2:	18ad      	adds	r5, r5, r2
10014da4:	022b      	lsls	r3, r5, #8
10014da6:	d51f      	bpl.n	10014de8 <__aeabi_dmul+0x4b4>
10014da8:	2401      	movs	r4, #1
10014daa:	2200      	movs	r2, #0
10014dac:	400c      	ands	r4, r1
10014dae:	2301      	movs	r3, #1
10014db0:	2500      	movs	r5, #0
10014db2:	4690      	mov	r8, r2
10014db4:	e624      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014db6:	201f      	movs	r0, #31
10014db8:	002c      	movs	r4, r5
10014dba:	4240      	negs	r0, r0
10014dbc:	1a82      	subs	r2, r0, r2
10014dbe:	40d4      	lsrs	r4, r2
10014dc0:	2e20      	cmp	r6, #32
10014dc2:	d01c      	beq.n	10014dfe <__aeabi_dmul+0x4ca>
10014dc4:	2240      	movs	r2, #64	; 0x40
10014dc6:	1b96      	subs	r6, r2, r6
10014dc8:	40b5      	lsls	r5, r6
10014dca:	432b      	orrs	r3, r5
10014dcc:	1e58      	subs	r0, r3, #1
10014dce:	4183      	sbcs	r3, r0
10014dd0:	2007      	movs	r0, #7
10014dd2:	4323      	orrs	r3, r4
10014dd4:	4018      	ands	r0, r3
10014dd6:	2500      	movs	r5, #0
10014dd8:	2800      	cmp	r0, #0
10014dda:	d009      	beq.n	10014df0 <__aeabi_dmul+0x4bc>
10014ddc:	220f      	movs	r2, #15
10014dde:	2500      	movs	r5, #0
10014de0:	401a      	ands	r2, r3
10014de2:	001c      	movs	r4, r3
10014de4:	2a04      	cmp	r2, #4
10014de6:	d1d8      	bne.n	10014d9a <__aeabi_dmul+0x466>
10014de8:	0023      	movs	r3, r4
10014dea:	0768      	lsls	r0, r5, #29
10014dec:	026d      	lsls	r5, r5, #9
10014dee:	0b2d      	lsrs	r5, r5, #12
10014df0:	2401      	movs	r4, #1
10014df2:	08db      	lsrs	r3, r3, #3
10014df4:	4303      	orrs	r3, r0
10014df6:	4698      	mov	r8, r3
10014df8:	400c      	ands	r4, r1
10014dfa:	2300      	movs	r3, #0
10014dfc:	e600      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014dfe:	2500      	movs	r5, #0
10014e00:	e7e3      	b.n	10014dca <__aeabi_dmul+0x496>
10014e02:	2280      	movs	r2, #128	; 0x80
10014e04:	2401      	movs	r4, #1
10014e06:	0312      	lsls	r2, r2, #12
10014e08:	4315      	orrs	r5, r2
10014e0a:	032d      	lsls	r5, r5, #12
10014e0c:	4698      	mov	r8, r3
10014e0e:	0b2d      	lsrs	r5, r5, #12
10014e10:	400c      	ands	r4, r1
10014e12:	4b04      	ldr	r3, [pc, #16]	; (10014e24 <__aeabi_dmul+0x4f0>)
10014e14:	e5f4      	b.n	10014a00 <__aeabi_dmul+0xcc>
10014e16:	46c0      	nop			; (mov r8, r8)
10014e18:	000003ff 	.word	0x000003ff
10014e1c:	feffffff 	.word	0xfeffffff
10014e20:	000007fe 	.word	0x000007fe
10014e24:	000007ff 	.word	0x000007ff

10014e28 <__aeabi_dsub>:
10014e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10014e2a:	4657      	mov	r7, sl
10014e2c:	464e      	mov	r6, r9
10014e2e:	4645      	mov	r5, r8
10014e30:	b4e0      	push	{r5, r6, r7}
10014e32:	000e      	movs	r6, r1
10014e34:	0011      	movs	r1, r2
10014e36:	0ff2      	lsrs	r2, r6, #31
10014e38:	4692      	mov	sl, r2
10014e3a:	00c5      	lsls	r5, r0, #3
10014e3c:	0f42      	lsrs	r2, r0, #29
10014e3e:	0318      	lsls	r0, r3, #12
10014e40:	0337      	lsls	r7, r6, #12
10014e42:	0074      	lsls	r4, r6, #1
10014e44:	0a40      	lsrs	r0, r0, #9
10014e46:	0f4e      	lsrs	r6, r1, #29
10014e48:	0a7f      	lsrs	r7, r7, #9
10014e4a:	4330      	orrs	r0, r6
10014e4c:	4ecf      	ldr	r6, [pc, #828]	; (1001518c <__aeabi_dsub+0x364>)
10014e4e:	4317      	orrs	r7, r2
10014e50:	005a      	lsls	r2, r3, #1
10014e52:	0d64      	lsrs	r4, r4, #21
10014e54:	0d52      	lsrs	r2, r2, #21
10014e56:	0fdb      	lsrs	r3, r3, #31
10014e58:	00c9      	lsls	r1, r1, #3
10014e5a:	42b2      	cmp	r2, r6
10014e5c:	d100      	bne.n	10014e60 <__aeabi_dsub+0x38>
10014e5e:	e0e5      	b.n	1001502c <__aeabi_dsub+0x204>
10014e60:	2601      	movs	r6, #1
10014e62:	4073      	eors	r3, r6
10014e64:	1aa6      	subs	r6, r4, r2
10014e66:	46b4      	mov	ip, r6
10014e68:	4553      	cmp	r3, sl
10014e6a:	d100      	bne.n	10014e6e <__aeabi_dsub+0x46>
10014e6c:	e0af      	b.n	10014fce <__aeabi_dsub+0x1a6>
10014e6e:	2e00      	cmp	r6, #0
10014e70:	dc00      	bgt.n	10014e74 <__aeabi_dsub+0x4c>
10014e72:	e10d      	b.n	10015090 <__aeabi_dsub+0x268>
10014e74:	2a00      	cmp	r2, #0
10014e76:	d13a      	bne.n	10014eee <__aeabi_dsub+0xc6>
10014e78:	0003      	movs	r3, r0
10014e7a:	430b      	orrs	r3, r1
10014e7c:	d000      	beq.n	10014e80 <__aeabi_dsub+0x58>
10014e7e:	e0e4      	b.n	1001504a <__aeabi_dsub+0x222>
10014e80:	076b      	lsls	r3, r5, #29
10014e82:	d009      	beq.n	10014e98 <__aeabi_dsub+0x70>
10014e84:	230f      	movs	r3, #15
10014e86:	402b      	ands	r3, r5
10014e88:	2b04      	cmp	r3, #4
10014e8a:	d005      	beq.n	10014e98 <__aeabi_dsub+0x70>
10014e8c:	1d2b      	adds	r3, r5, #4
10014e8e:	42ab      	cmp	r3, r5
10014e90:	41ad      	sbcs	r5, r5
10014e92:	426d      	negs	r5, r5
10014e94:	197f      	adds	r7, r7, r5
10014e96:	001d      	movs	r5, r3
10014e98:	023b      	lsls	r3, r7, #8
10014e9a:	d400      	bmi.n	10014e9e <__aeabi_dsub+0x76>
10014e9c:	e088      	b.n	10014fb0 <__aeabi_dsub+0x188>
10014e9e:	4bbb      	ldr	r3, [pc, #748]	; (1001518c <__aeabi_dsub+0x364>)
10014ea0:	3401      	adds	r4, #1
10014ea2:	429c      	cmp	r4, r3
10014ea4:	d100      	bne.n	10014ea8 <__aeabi_dsub+0x80>
10014ea6:	e110      	b.n	100150ca <__aeabi_dsub+0x2a2>
10014ea8:	003a      	movs	r2, r7
10014eaa:	4bb9      	ldr	r3, [pc, #740]	; (10015190 <__aeabi_dsub+0x368>)
10014eac:	4651      	mov	r1, sl
10014eae:	401a      	ands	r2, r3
10014eb0:	2301      	movs	r3, #1
10014eb2:	0750      	lsls	r0, r2, #29
10014eb4:	08ed      	lsrs	r5, r5, #3
10014eb6:	0252      	lsls	r2, r2, #9
10014eb8:	0564      	lsls	r4, r4, #21
10014eba:	4305      	orrs	r5, r0
10014ebc:	0b12      	lsrs	r2, r2, #12
10014ebe:	0d64      	lsrs	r4, r4, #21
10014ec0:	400b      	ands	r3, r1
10014ec2:	2100      	movs	r1, #0
10014ec4:	0028      	movs	r0, r5
10014ec6:	0312      	lsls	r2, r2, #12
10014ec8:	0d0d      	lsrs	r5, r1, #20
10014eca:	0b12      	lsrs	r2, r2, #12
10014ecc:	0564      	lsls	r4, r4, #21
10014ece:	052d      	lsls	r5, r5, #20
10014ed0:	4315      	orrs	r5, r2
10014ed2:	0862      	lsrs	r2, r4, #1
10014ed4:	4caf      	ldr	r4, [pc, #700]	; (10015194 <__aeabi_dsub+0x36c>)
10014ed6:	07db      	lsls	r3, r3, #31
10014ed8:	402c      	ands	r4, r5
10014eda:	4314      	orrs	r4, r2
10014edc:	0064      	lsls	r4, r4, #1
10014ede:	0864      	lsrs	r4, r4, #1
10014ee0:	431c      	orrs	r4, r3
10014ee2:	0021      	movs	r1, r4
10014ee4:	bc1c      	pop	{r2, r3, r4}
10014ee6:	4690      	mov	r8, r2
10014ee8:	4699      	mov	r9, r3
10014eea:	46a2      	mov	sl, r4
10014eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014eee:	4ba7      	ldr	r3, [pc, #668]	; (1001518c <__aeabi_dsub+0x364>)
10014ef0:	429c      	cmp	r4, r3
10014ef2:	d0c5      	beq.n	10014e80 <__aeabi_dsub+0x58>
10014ef4:	2380      	movs	r3, #128	; 0x80
10014ef6:	041b      	lsls	r3, r3, #16
10014ef8:	4318      	orrs	r0, r3
10014efa:	4663      	mov	r3, ip
10014efc:	2b38      	cmp	r3, #56	; 0x38
10014efe:	dd00      	ble.n	10014f02 <__aeabi_dsub+0xda>
10014f00:	e0fd      	b.n	100150fe <__aeabi_dsub+0x2d6>
10014f02:	2b1f      	cmp	r3, #31
10014f04:	dd00      	ble.n	10014f08 <__aeabi_dsub+0xe0>
10014f06:	e130      	b.n	1001516a <__aeabi_dsub+0x342>
10014f08:	4662      	mov	r2, ip
10014f0a:	2320      	movs	r3, #32
10014f0c:	1a9b      	subs	r3, r3, r2
10014f0e:	0002      	movs	r2, r0
10014f10:	409a      	lsls	r2, r3
10014f12:	4666      	mov	r6, ip
10014f14:	4690      	mov	r8, r2
10014f16:	000a      	movs	r2, r1
10014f18:	4099      	lsls	r1, r3
10014f1a:	40f2      	lsrs	r2, r6
10014f1c:	4646      	mov	r6, r8
10014f1e:	1e4b      	subs	r3, r1, #1
10014f20:	4199      	sbcs	r1, r3
10014f22:	4332      	orrs	r2, r6
10014f24:	4311      	orrs	r1, r2
10014f26:	4663      	mov	r3, ip
10014f28:	0002      	movs	r2, r0
10014f2a:	40da      	lsrs	r2, r3
10014f2c:	1a69      	subs	r1, r5, r1
10014f2e:	428d      	cmp	r5, r1
10014f30:	419b      	sbcs	r3, r3
10014f32:	000d      	movs	r5, r1
10014f34:	1aba      	subs	r2, r7, r2
10014f36:	425b      	negs	r3, r3
10014f38:	1ad7      	subs	r7, r2, r3
10014f3a:	023b      	lsls	r3, r7, #8
10014f3c:	d535      	bpl.n	10014faa <__aeabi_dsub+0x182>
10014f3e:	027a      	lsls	r2, r7, #9
10014f40:	0a53      	lsrs	r3, r2, #9
10014f42:	4698      	mov	r8, r3
10014f44:	4643      	mov	r3, r8
10014f46:	2b00      	cmp	r3, #0
10014f48:	d100      	bne.n	10014f4c <__aeabi_dsub+0x124>
10014f4a:	e0c4      	b.n	100150d6 <__aeabi_dsub+0x2ae>
10014f4c:	4640      	mov	r0, r8
10014f4e:	f000 fc6f 	bl	10015830 <__clzsi2>
10014f52:	0003      	movs	r3, r0
10014f54:	3b08      	subs	r3, #8
10014f56:	2b1f      	cmp	r3, #31
10014f58:	dd00      	ble.n	10014f5c <__aeabi_dsub+0x134>
10014f5a:	e0c5      	b.n	100150e8 <__aeabi_dsub+0x2c0>
10014f5c:	2220      	movs	r2, #32
10014f5e:	0029      	movs	r1, r5
10014f60:	1ad2      	subs	r2, r2, r3
10014f62:	4647      	mov	r7, r8
10014f64:	40d1      	lsrs	r1, r2
10014f66:	409f      	lsls	r7, r3
10014f68:	000a      	movs	r2, r1
10014f6a:	409d      	lsls	r5, r3
10014f6c:	433a      	orrs	r2, r7
10014f6e:	429c      	cmp	r4, r3
10014f70:	dd00      	ble.n	10014f74 <__aeabi_dsub+0x14c>
10014f72:	e0c0      	b.n	100150f6 <__aeabi_dsub+0x2ce>
10014f74:	1b1c      	subs	r4, r3, r4
10014f76:	1c63      	adds	r3, r4, #1
10014f78:	2b1f      	cmp	r3, #31
10014f7a:	dd00      	ble.n	10014f7e <__aeabi_dsub+0x156>
10014f7c:	e0e4      	b.n	10015148 <__aeabi_dsub+0x320>
10014f7e:	2120      	movs	r1, #32
10014f80:	0014      	movs	r4, r2
10014f82:	0028      	movs	r0, r5
10014f84:	1ac9      	subs	r1, r1, r3
10014f86:	40d8      	lsrs	r0, r3
10014f88:	408c      	lsls	r4, r1
10014f8a:	408d      	lsls	r5, r1
10014f8c:	4304      	orrs	r4, r0
10014f8e:	40da      	lsrs	r2, r3
10014f90:	1e68      	subs	r0, r5, #1
10014f92:	4185      	sbcs	r5, r0
10014f94:	0017      	movs	r7, r2
10014f96:	4325      	orrs	r5, r4
10014f98:	2400      	movs	r4, #0
10014f9a:	e771      	b.n	10014e80 <__aeabi_dsub+0x58>
10014f9c:	4642      	mov	r2, r8
10014f9e:	4663      	mov	r3, ip
10014fa0:	431a      	orrs	r2, r3
10014fa2:	d100      	bne.n	10014fa6 <__aeabi_dsub+0x17e>
10014fa4:	e24c      	b.n	10015440 <__aeabi_dsub+0x618>
10014fa6:	4667      	mov	r7, ip
10014fa8:	4645      	mov	r5, r8
10014faa:	076b      	lsls	r3, r5, #29
10014fac:	d000      	beq.n	10014fb0 <__aeabi_dsub+0x188>
10014fae:	e769      	b.n	10014e84 <__aeabi_dsub+0x5c>
10014fb0:	2301      	movs	r3, #1
10014fb2:	4651      	mov	r1, sl
10014fb4:	0778      	lsls	r0, r7, #29
10014fb6:	08ed      	lsrs	r5, r5, #3
10014fb8:	08fa      	lsrs	r2, r7, #3
10014fba:	400b      	ands	r3, r1
10014fbc:	4305      	orrs	r5, r0
10014fbe:	4973      	ldr	r1, [pc, #460]	; (1001518c <__aeabi_dsub+0x364>)
10014fc0:	428c      	cmp	r4, r1
10014fc2:	d038      	beq.n	10015036 <__aeabi_dsub+0x20e>
10014fc4:	0312      	lsls	r2, r2, #12
10014fc6:	0564      	lsls	r4, r4, #21
10014fc8:	0b12      	lsrs	r2, r2, #12
10014fca:	0d64      	lsrs	r4, r4, #21
10014fcc:	e779      	b.n	10014ec2 <__aeabi_dsub+0x9a>
10014fce:	2e00      	cmp	r6, #0
10014fd0:	dc00      	bgt.n	10014fd4 <__aeabi_dsub+0x1ac>
10014fd2:	e09a      	b.n	1001510a <__aeabi_dsub+0x2e2>
10014fd4:	2a00      	cmp	r2, #0
10014fd6:	d047      	beq.n	10015068 <__aeabi_dsub+0x240>
10014fd8:	4a6c      	ldr	r2, [pc, #432]	; (1001518c <__aeabi_dsub+0x364>)
10014fda:	4294      	cmp	r4, r2
10014fdc:	d100      	bne.n	10014fe0 <__aeabi_dsub+0x1b8>
10014fde:	e74f      	b.n	10014e80 <__aeabi_dsub+0x58>
10014fe0:	2280      	movs	r2, #128	; 0x80
10014fe2:	0412      	lsls	r2, r2, #16
10014fe4:	4310      	orrs	r0, r2
10014fe6:	4662      	mov	r2, ip
10014fe8:	2a38      	cmp	r2, #56	; 0x38
10014fea:	dc00      	bgt.n	10014fee <__aeabi_dsub+0x1c6>
10014fec:	e108      	b.n	10015200 <__aeabi_dsub+0x3d8>
10014fee:	4301      	orrs	r1, r0
10014ff0:	1e48      	subs	r0, r1, #1
10014ff2:	4181      	sbcs	r1, r0
10014ff4:	2200      	movs	r2, #0
10014ff6:	b2c9      	uxtb	r1, r1
10014ff8:	1949      	adds	r1, r1, r5
10014ffa:	19d2      	adds	r2, r2, r7
10014ffc:	42a9      	cmp	r1, r5
10014ffe:	41bf      	sbcs	r7, r7
10015000:	000d      	movs	r5, r1
10015002:	427f      	negs	r7, r7
10015004:	18bf      	adds	r7, r7, r2
10015006:	023a      	lsls	r2, r7, #8
10015008:	d400      	bmi.n	1001500c <__aeabi_dsub+0x1e4>
1001500a:	e142      	b.n	10015292 <__aeabi_dsub+0x46a>
1001500c:	4a5f      	ldr	r2, [pc, #380]	; (1001518c <__aeabi_dsub+0x364>)
1001500e:	3401      	adds	r4, #1
10015010:	4294      	cmp	r4, r2
10015012:	d100      	bne.n	10015016 <__aeabi_dsub+0x1ee>
10015014:	e14e      	b.n	100152b4 <__aeabi_dsub+0x48c>
10015016:	2001      	movs	r0, #1
10015018:	4a5d      	ldr	r2, [pc, #372]	; (10015190 <__aeabi_dsub+0x368>)
1001501a:	0869      	lsrs	r1, r5, #1
1001501c:	403a      	ands	r2, r7
1001501e:	4028      	ands	r0, r5
10015020:	4308      	orrs	r0, r1
10015022:	07d5      	lsls	r5, r2, #31
10015024:	4305      	orrs	r5, r0
10015026:	0857      	lsrs	r7, r2, #1
10015028:	469a      	mov	sl, r3
1001502a:	e729      	b.n	10014e80 <__aeabi_dsub+0x58>
1001502c:	0006      	movs	r6, r0
1001502e:	430e      	orrs	r6, r1
10015030:	d000      	beq.n	10015034 <__aeabi_dsub+0x20c>
10015032:	e717      	b.n	10014e64 <__aeabi_dsub+0x3c>
10015034:	e714      	b.n	10014e60 <__aeabi_dsub+0x38>
10015036:	0029      	movs	r1, r5
10015038:	4311      	orrs	r1, r2
1001503a:	d100      	bne.n	1001503e <__aeabi_dsub+0x216>
1001503c:	e1f9      	b.n	10015432 <__aeabi_dsub+0x60a>
1001503e:	2180      	movs	r1, #128	; 0x80
10015040:	0309      	lsls	r1, r1, #12
10015042:	430a      	orrs	r2, r1
10015044:	0312      	lsls	r2, r2, #12
10015046:	0b12      	lsrs	r2, r2, #12
10015048:	e73b      	b.n	10014ec2 <__aeabi_dsub+0x9a>
1001504a:	2301      	movs	r3, #1
1001504c:	425b      	negs	r3, r3
1001504e:	4698      	mov	r8, r3
10015050:	44c4      	add	ip, r8
10015052:	4663      	mov	r3, ip
10015054:	2b00      	cmp	r3, #0
10015056:	d172      	bne.n	1001513e <__aeabi_dsub+0x316>
10015058:	1a69      	subs	r1, r5, r1
1001505a:	428d      	cmp	r5, r1
1001505c:	419b      	sbcs	r3, r3
1001505e:	1a3f      	subs	r7, r7, r0
10015060:	425b      	negs	r3, r3
10015062:	1aff      	subs	r7, r7, r3
10015064:	000d      	movs	r5, r1
10015066:	e768      	b.n	10014f3a <__aeabi_dsub+0x112>
10015068:	0002      	movs	r2, r0
1001506a:	430a      	orrs	r2, r1
1001506c:	d100      	bne.n	10015070 <__aeabi_dsub+0x248>
1001506e:	e707      	b.n	10014e80 <__aeabi_dsub+0x58>
10015070:	2201      	movs	r2, #1
10015072:	4252      	negs	r2, r2
10015074:	4690      	mov	r8, r2
10015076:	44c4      	add	ip, r8
10015078:	4662      	mov	r2, ip
1001507a:	2a00      	cmp	r2, #0
1001507c:	d000      	beq.n	10015080 <__aeabi_dsub+0x258>
1001507e:	e0e6      	b.n	1001524e <__aeabi_dsub+0x426>
10015080:	1869      	adds	r1, r5, r1
10015082:	42a9      	cmp	r1, r5
10015084:	41b6      	sbcs	r6, r6
10015086:	183f      	adds	r7, r7, r0
10015088:	4276      	negs	r6, r6
1001508a:	19f7      	adds	r7, r6, r7
1001508c:	000d      	movs	r5, r1
1001508e:	e7ba      	b.n	10015006 <__aeabi_dsub+0x1de>
10015090:	2e00      	cmp	r6, #0
10015092:	d000      	beq.n	10015096 <__aeabi_dsub+0x26e>
10015094:	e080      	b.n	10015198 <__aeabi_dsub+0x370>
10015096:	1c62      	adds	r2, r4, #1
10015098:	0552      	lsls	r2, r2, #21
1001509a:	0d52      	lsrs	r2, r2, #21
1001509c:	2a01      	cmp	r2, #1
1001509e:	dc00      	bgt.n	100150a2 <__aeabi_dsub+0x27a>
100150a0:	e0f9      	b.n	10015296 <__aeabi_dsub+0x46e>
100150a2:	1a6a      	subs	r2, r5, r1
100150a4:	4691      	mov	r9, r2
100150a6:	454d      	cmp	r5, r9
100150a8:	41b6      	sbcs	r6, r6
100150aa:	1a3a      	subs	r2, r7, r0
100150ac:	4276      	negs	r6, r6
100150ae:	1b92      	subs	r2, r2, r6
100150b0:	4690      	mov	r8, r2
100150b2:	0212      	lsls	r2, r2, #8
100150b4:	d400      	bmi.n	100150b8 <__aeabi_dsub+0x290>
100150b6:	e099      	b.n	100151ec <__aeabi_dsub+0x3c4>
100150b8:	1b4d      	subs	r5, r1, r5
100150ba:	42a9      	cmp	r1, r5
100150bc:	4189      	sbcs	r1, r1
100150be:	1bc7      	subs	r7, r0, r7
100150c0:	4249      	negs	r1, r1
100150c2:	1a7a      	subs	r2, r7, r1
100150c4:	4690      	mov	r8, r2
100150c6:	469a      	mov	sl, r3
100150c8:	e73c      	b.n	10014f44 <__aeabi_dsub+0x11c>
100150ca:	4652      	mov	r2, sl
100150cc:	2301      	movs	r3, #1
100150ce:	2500      	movs	r5, #0
100150d0:	4013      	ands	r3, r2
100150d2:	2200      	movs	r2, #0
100150d4:	e6f5      	b.n	10014ec2 <__aeabi_dsub+0x9a>
100150d6:	0028      	movs	r0, r5
100150d8:	f000 fbaa 	bl	10015830 <__clzsi2>
100150dc:	3020      	adds	r0, #32
100150de:	0003      	movs	r3, r0
100150e0:	3b08      	subs	r3, #8
100150e2:	2b1f      	cmp	r3, #31
100150e4:	dc00      	bgt.n	100150e8 <__aeabi_dsub+0x2c0>
100150e6:	e739      	b.n	10014f5c <__aeabi_dsub+0x134>
100150e8:	002a      	movs	r2, r5
100150ea:	3828      	subs	r0, #40	; 0x28
100150ec:	4082      	lsls	r2, r0
100150ee:	2500      	movs	r5, #0
100150f0:	429c      	cmp	r4, r3
100150f2:	dc00      	bgt.n	100150f6 <__aeabi_dsub+0x2ce>
100150f4:	e73e      	b.n	10014f74 <__aeabi_dsub+0x14c>
100150f6:	4f26      	ldr	r7, [pc, #152]	; (10015190 <__aeabi_dsub+0x368>)
100150f8:	1ae4      	subs	r4, r4, r3
100150fa:	4017      	ands	r7, r2
100150fc:	e6c0      	b.n	10014e80 <__aeabi_dsub+0x58>
100150fe:	4301      	orrs	r1, r0
10015100:	1e48      	subs	r0, r1, #1
10015102:	4181      	sbcs	r1, r0
10015104:	2200      	movs	r2, #0
10015106:	b2c9      	uxtb	r1, r1
10015108:	e710      	b.n	10014f2c <__aeabi_dsub+0x104>
1001510a:	2e00      	cmp	r6, #0
1001510c:	d000      	beq.n	10015110 <__aeabi_dsub+0x2e8>
1001510e:	e0f1      	b.n	100152f4 <__aeabi_dsub+0x4cc>
10015110:	1c62      	adds	r2, r4, #1
10015112:	4694      	mov	ip, r2
10015114:	0552      	lsls	r2, r2, #21
10015116:	0d52      	lsrs	r2, r2, #21
10015118:	2a01      	cmp	r2, #1
1001511a:	dc00      	bgt.n	1001511e <__aeabi_dsub+0x2f6>
1001511c:	e0a0      	b.n	10015260 <__aeabi_dsub+0x438>
1001511e:	4a1b      	ldr	r2, [pc, #108]	; (1001518c <__aeabi_dsub+0x364>)
10015120:	4594      	cmp	ip, r2
10015122:	d100      	bne.n	10015126 <__aeabi_dsub+0x2fe>
10015124:	e0c5      	b.n	100152b2 <__aeabi_dsub+0x48a>
10015126:	1869      	adds	r1, r5, r1
10015128:	42a9      	cmp	r1, r5
1001512a:	4192      	sbcs	r2, r2
1001512c:	183f      	adds	r7, r7, r0
1001512e:	4252      	negs	r2, r2
10015130:	19d2      	adds	r2, r2, r7
10015132:	0849      	lsrs	r1, r1, #1
10015134:	07d5      	lsls	r5, r2, #31
10015136:	430d      	orrs	r5, r1
10015138:	0857      	lsrs	r7, r2, #1
1001513a:	4664      	mov	r4, ip
1001513c:	e6a0      	b.n	10014e80 <__aeabi_dsub+0x58>
1001513e:	4b13      	ldr	r3, [pc, #76]	; (1001518c <__aeabi_dsub+0x364>)
10015140:	429c      	cmp	r4, r3
10015142:	d000      	beq.n	10015146 <__aeabi_dsub+0x31e>
10015144:	e6d9      	b.n	10014efa <__aeabi_dsub+0xd2>
10015146:	e69b      	b.n	10014e80 <__aeabi_dsub+0x58>
10015148:	0011      	movs	r1, r2
1001514a:	3c1f      	subs	r4, #31
1001514c:	40e1      	lsrs	r1, r4
1001514e:	000c      	movs	r4, r1
10015150:	2b20      	cmp	r3, #32
10015152:	d100      	bne.n	10015156 <__aeabi_dsub+0x32e>
10015154:	e080      	b.n	10015258 <__aeabi_dsub+0x430>
10015156:	2140      	movs	r1, #64	; 0x40
10015158:	1acb      	subs	r3, r1, r3
1001515a:	409a      	lsls	r2, r3
1001515c:	4315      	orrs	r5, r2
1001515e:	1e6a      	subs	r2, r5, #1
10015160:	4195      	sbcs	r5, r2
10015162:	2700      	movs	r7, #0
10015164:	4325      	orrs	r5, r4
10015166:	2400      	movs	r4, #0
10015168:	e71f      	b.n	10014faa <__aeabi_dsub+0x182>
1001516a:	4663      	mov	r3, ip
1001516c:	0002      	movs	r2, r0
1001516e:	3b20      	subs	r3, #32
10015170:	40da      	lsrs	r2, r3
10015172:	4663      	mov	r3, ip
10015174:	2b20      	cmp	r3, #32
10015176:	d071      	beq.n	1001525c <__aeabi_dsub+0x434>
10015178:	2340      	movs	r3, #64	; 0x40
1001517a:	4666      	mov	r6, ip
1001517c:	1b9b      	subs	r3, r3, r6
1001517e:	4098      	lsls	r0, r3
10015180:	4301      	orrs	r1, r0
10015182:	1e48      	subs	r0, r1, #1
10015184:	4181      	sbcs	r1, r0
10015186:	4311      	orrs	r1, r2
10015188:	2200      	movs	r2, #0
1001518a:	e6cf      	b.n	10014f2c <__aeabi_dsub+0x104>
1001518c:	000007ff 	.word	0x000007ff
10015190:	ff7fffff 	.word	0xff7fffff
10015194:	800fffff 	.word	0x800fffff
10015198:	2c00      	cmp	r4, #0
1001519a:	d048      	beq.n	1001522e <__aeabi_dsub+0x406>
1001519c:	4cca      	ldr	r4, [pc, #808]	; (100154c8 <__aeabi_dsub+0x6a0>)
1001519e:	42a2      	cmp	r2, r4
100151a0:	d100      	bne.n	100151a4 <__aeabi_dsub+0x37c>
100151a2:	e0a2      	b.n	100152ea <__aeabi_dsub+0x4c2>
100151a4:	4274      	negs	r4, r6
100151a6:	46a1      	mov	r9, r4
100151a8:	2480      	movs	r4, #128	; 0x80
100151aa:	0424      	lsls	r4, r4, #16
100151ac:	4327      	orrs	r7, r4
100151ae:	464c      	mov	r4, r9
100151b0:	2c38      	cmp	r4, #56	; 0x38
100151b2:	dd00      	ble.n	100151b6 <__aeabi_dsub+0x38e>
100151b4:	e0db      	b.n	1001536e <__aeabi_dsub+0x546>
100151b6:	2c1f      	cmp	r4, #31
100151b8:	dd00      	ble.n	100151bc <__aeabi_dsub+0x394>
100151ba:	e144      	b.n	10015446 <__aeabi_dsub+0x61e>
100151bc:	464e      	mov	r6, r9
100151be:	2420      	movs	r4, #32
100151c0:	1ba4      	subs	r4, r4, r6
100151c2:	003e      	movs	r6, r7
100151c4:	40a6      	lsls	r6, r4
100151c6:	46a2      	mov	sl, r4
100151c8:	46b0      	mov	r8, r6
100151ca:	464c      	mov	r4, r9
100151cc:	002e      	movs	r6, r5
100151ce:	40e6      	lsrs	r6, r4
100151d0:	46b4      	mov	ip, r6
100151d2:	4646      	mov	r6, r8
100151d4:	4664      	mov	r4, ip
100151d6:	4326      	orrs	r6, r4
100151d8:	4654      	mov	r4, sl
100151da:	40a5      	lsls	r5, r4
100151dc:	1e6c      	subs	r4, r5, #1
100151de:	41a5      	sbcs	r5, r4
100151e0:	0034      	movs	r4, r6
100151e2:	432c      	orrs	r4, r5
100151e4:	464d      	mov	r5, r9
100151e6:	40ef      	lsrs	r7, r5
100151e8:	1b0d      	subs	r5, r1, r4
100151ea:	e028      	b.n	1001523e <__aeabi_dsub+0x416>
100151ec:	464a      	mov	r2, r9
100151ee:	4643      	mov	r3, r8
100151f0:	464d      	mov	r5, r9
100151f2:	431a      	orrs	r2, r3
100151f4:	d000      	beq.n	100151f8 <__aeabi_dsub+0x3d0>
100151f6:	e6a5      	b.n	10014f44 <__aeabi_dsub+0x11c>
100151f8:	2300      	movs	r3, #0
100151fa:	2400      	movs	r4, #0
100151fc:	2500      	movs	r5, #0
100151fe:	e6de      	b.n	10014fbe <__aeabi_dsub+0x196>
10015200:	2a1f      	cmp	r2, #31
10015202:	dc5a      	bgt.n	100152ba <__aeabi_dsub+0x492>
10015204:	4666      	mov	r6, ip
10015206:	2220      	movs	r2, #32
10015208:	1b92      	subs	r2, r2, r6
1001520a:	0006      	movs	r6, r0
1001520c:	4096      	lsls	r6, r2
1001520e:	4691      	mov	r9, r2
10015210:	46b0      	mov	r8, r6
10015212:	4662      	mov	r2, ip
10015214:	000e      	movs	r6, r1
10015216:	40d6      	lsrs	r6, r2
10015218:	4642      	mov	r2, r8
1001521a:	4316      	orrs	r6, r2
1001521c:	464a      	mov	r2, r9
1001521e:	4091      	lsls	r1, r2
10015220:	1e4a      	subs	r2, r1, #1
10015222:	4191      	sbcs	r1, r2
10015224:	0002      	movs	r2, r0
10015226:	4660      	mov	r0, ip
10015228:	4331      	orrs	r1, r6
1001522a:	40c2      	lsrs	r2, r0
1001522c:	e6e4      	b.n	10014ff8 <__aeabi_dsub+0x1d0>
1001522e:	003c      	movs	r4, r7
10015230:	432c      	orrs	r4, r5
10015232:	d05a      	beq.n	100152ea <__aeabi_dsub+0x4c2>
10015234:	43f4      	mvns	r4, r6
10015236:	46a1      	mov	r9, r4
10015238:	2c00      	cmp	r4, #0
1001523a:	d152      	bne.n	100152e2 <__aeabi_dsub+0x4ba>
1001523c:	1b4d      	subs	r5, r1, r5
1001523e:	42a9      	cmp	r1, r5
10015240:	4189      	sbcs	r1, r1
10015242:	1bc7      	subs	r7, r0, r7
10015244:	4249      	negs	r1, r1
10015246:	1a7f      	subs	r7, r7, r1
10015248:	0014      	movs	r4, r2
1001524a:	469a      	mov	sl, r3
1001524c:	e675      	b.n	10014f3a <__aeabi_dsub+0x112>
1001524e:	4a9e      	ldr	r2, [pc, #632]	; (100154c8 <__aeabi_dsub+0x6a0>)
10015250:	4294      	cmp	r4, r2
10015252:	d000      	beq.n	10015256 <__aeabi_dsub+0x42e>
10015254:	e6c7      	b.n	10014fe6 <__aeabi_dsub+0x1be>
10015256:	e613      	b.n	10014e80 <__aeabi_dsub+0x58>
10015258:	2200      	movs	r2, #0
1001525a:	e77f      	b.n	1001515c <__aeabi_dsub+0x334>
1001525c:	2000      	movs	r0, #0
1001525e:	e78f      	b.n	10015180 <__aeabi_dsub+0x358>
10015260:	2c00      	cmp	r4, #0
10015262:	d000      	beq.n	10015266 <__aeabi_dsub+0x43e>
10015264:	e0c8      	b.n	100153f8 <__aeabi_dsub+0x5d0>
10015266:	003b      	movs	r3, r7
10015268:	432b      	orrs	r3, r5
1001526a:	d100      	bne.n	1001526e <__aeabi_dsub+0x446>
1001526c:	e10f      	b.n	1001548e <__aeabi_dsub+0x666>
1001526e:	0003      	movs	r3, r0
10015270:	430b      	orrs	r3, r1
10015272:	d100      	bne.n	10015276 <__aeabi_dsub+0x44e>
10015274:	e604      	b.n	10014e80 <__aeabi_dsub+0x58>
10015276:	1869      	adds	r1, r5, r1
10015278:	42a9      	cmp	r1, r5
1001527a:	419b      	sbcs	r3, r3
1001527c:	183f      	adds	r7, r7, r0
1001527e:	425b      	negs	r3, r3
10015280:	19df      	adds	r7, r3, r7
10015282:	023b      	lsls	r3, r7, #8
10015284:	d400      	bmi.n	10015288 <__aeabi_dsub+0x460>
10015286:	e11a      	b.n	100154be <__aeabi_dsub+0x696>
10015288:	4b90      	ldr	r3, [pc, #576]	; (100154cc <__aeabi_dsub+0x6a4>)
1001528a:	000d      	movs	r5, r1
1001528c:	401f      	ands	r7, r3
1001528e:	4664      	mov	r4, ip
10015290:	e5f6      	b.n	10014e80 <__aeabi_dsub+0x58>
10015292:	469a      	mov	sl, r3
10015294:	e689      	b.n	10014faa <__aeabi_dsub+0x182>
10015296:	003a      	movs	r2, r7
10015298:	432a      	orrs	r2, r5
1001529a:	2c00      	cmp	r4, #0
1001529c:	d15c      	bne.n	10015358 <__aeabi_dsub+0x530>
1001529e:	2a00      	cmp	r2, #0
100152a0:	d175      	bne.n	1001538e <__aeabi_dsub+0x566>
100152a2:	0002      	movs	r2, r0
100152a4:	430a      	orrs	r2, r1
100152a6:	d100      	bne.n	100152aa <__aeabi_dsub+0x482>
100152a8:	e0ca      	b.n	10015440 <__aeabi_dsub+0x618>
100152aa:	0007      	movs	r7, r0
100152ac:	000d      	movs	r5, r1
100152ae:	469a      	mov	sl, r3
100152b0:	e5e6      	b.n	10014e80 <__aeabi_dsub+0x58>
100152b2:	4664      	mov	r4, ip
100152b4:	2200      	movs	r2, #0
100152b6:	2500      	movs	r5, #0
100152b8:	e681      	b.n	10014fbe <__aeabi_dsub+0x196>
100152ba:	4662      	mov	r2, ip
100152bc:	0006      	movs	r6, r0
100152be:	3a20      	subs	r2, #32
100152c0:	40d6      	lsrs	r6, r2
100152c2:	4662      	mov	r2, ip
100152c4:	46b0      	mov	r8, r6
100152c6:	2a20      	cmp	r2, #32
100152c8:	d100      	bne.n	100152cc <__aeabi_dsub+0x4a4>
100152ca:	e0b7      	b.n	1001543c <__aeabi_dsub+0x614>
100152cc:	2240      	movs	r2, #64	; 0x40
100152ce:	4666      	mov	r6, ip
100152d0:	1b92      	subs	r2, r2, r6
100152d2:	4090      	lsls	r0, r2
100152d4:	4301      	orrs	r1, r0
100152d6:	4642      	mov	r2, r8
100152d8:	1e48      	subs	r0, r1, #1
100152da:	4181      	sbcs	r1, r0
100152dc:	4311      	orrs	r1, r2
100152de:	2200      	movs	r2, #0
100152e0:	e68a      	b.n	10014ff8 <__aeabi_dsub+0x1d0>
100152e2:	4c79      	ldr	r4, [pc, #484]	; (100154c8 <__aeabi_dsub+0x6a0>)
100152e4:	42a2      	cmp	r2, r4
100152e6:	d000      	beq.n	100152ea <__aeabi_dsub+0x4c2>
100152e8:	e761      	b.n	100151ae <__aeabi_dsub+0x386>
100152ea:	0007      	movs	r7, r0
100152ec:	000d      	movs	r5, r1
100152ee:	0014      	movs	r4, r2
100152f0:	469a      	mov	sl, r3
100152f2:	e5c5      	b.n	10014e80 <__aeabi_dsub+0x58>
100152f4:	2c00      	cmp	r4, #0
100152f6:	d141      	bne.n	1001537c <__aeabi_dsub+0x554>
100152f8:	003c      	movs	r4, r7
100152fa:	432c      	orrs	r4, r5
100152fc:	d078      	beq.n	100153f0 <__aeabi_dsub+0x5c8>
100152fe:	43f4      	mvns	r4, r6
10015300:	46a1      	mov	r9, r4
10015302:	2c00      	cmp	r4, #0
10015304:	d020      	beq.n	10015348 <__aeabi_dsub+0x520>
10015306:	4c70      	ldr	r4, [pc, #448]	; (100154c8 <__aeabi_dsub+0x6a0>)
10015308:	42a2      	cmp	r2, r4
1001530a:	d071      	beq.n	100153f0 <__aeabi_dsub+0x5c8>
1001530c:	464c      	mov	r4, r9
1001530e:	2c38      	cmp	r4, #56	; 0x38
10015310:	dd00      	ble.n	10015314 <__aeabi_dsub+0x4ec>
10015312:	e0b2      	b.n	1001547a <__aeabi_dsub+0x652>
10015314:	2c1f      	cmp	r4, #31
10015316:	dd00      	ble.n	1001531a <__aeabi_dsub+0x4f2>
10015318:	e0bc      	b.n	10015494 <__aeabi_dsub+0x66c>
1001531a:	2620      	movs	r6, #32
1001531c:	1b34      	subs	r4, r6, r4
1001531e:	46a2      	mov	sl, r4
10015320:	003c      	movs	r4, r7
10015322:	4656      	mov	r6, sl
10015324:	40b4      	lsls	r4, r6
10015326:	464e      	mov	r6, r9
10015328:	46a0      	mov	r8, r4
1001532a:	002c      	movs	r4, r5
1001532c:	40f4      	lsrs	r4, r6
1001532e:	46a4      	mov	ip, r4
10015330:	4644      	mov	r4, r8
10015332:	4666      	mov	r6, ip
10015334:	4334      	orrs	r4, r6
10015336:	46a4      	mov	ip, r4
10015338:	4654      	mov	r4, sl
1001533a:	40a5      	lsls	r5, r4
1001533c:	4664      	mov	r4, ip
1001533e:	1e6e      	subs	r6, r5, #1
10015340:	41b5      	sbcs	r5, r6
10015342:	4325      	orrs	r5, r4
10015344:	464c      	mov	r4, r9
10015346:	40e7      	lsrs	r7, r4
10015348:	186d      	adds	r5, r5, r1
1001534a:	428d      	cmp	r5, r1
1001534c:	4189      	sbcs	r1, r1
1001534e:	183f      	adds	r7, r7, r0
10015350:	4249      	negs	r1, r1
10015352:	19cf      	adds	r7, r1, r7
10015354:	0014      	movs	r4, r2
10015356:	e656      	b.n	10015006 <__aeabi_dsub+0x1de>
10015358:	2a00      	cmp	r2, #0
1001535a:	d12f      	bne.n	100153bc <__aeabi_dsub+0x594>
1001535c:	0002      	movs	r2, r0
1001535e:	430a      	orrs	r2, r1
10015360:	d100      	bne.n	10015364 <__aeabi_dsub+0x53c>
10015362:	e084      	b.n	1001546e <__aeabi_dsub+0x646>
10015364:	0007      	movs	r7, r0
10015366:	000d      	movs	r5, r1
10015368:	469a      	mov	sl, r3
1001536a:	4c57      	ldr	r4, [pc, #348]	; (100154c8 <__aeabi_dsub+0x6a0>)
1001536c:	e588      	b.n	10014e80 <__aeabi_dsub+0x58>
1001536e:	433d      	orrs	r5, r7
10015370:	1e6f      	subs	r7, r5, #1
10015372:	41bd      	sbcs	r5, r7
10015374:	b2ec      	uxtb	r4, r5
10015376:	2700      	movs	r7, #0
10015378:	1b0d      	subs	r5, r1, r4
1001537a:	e760      	b.n	1001523e <__aeabi_dsub+0x416>
1001537c:	4c52      	ldr	r4, [pc, #328]	; (100154c8 <__aeabi_dsub+0x6a0>)
1001537e:	42a2      	cmp	r2, r4
10015380:	d036      	beq.n	100153f0 <__aeabi_dsub+0x5c8>
10015382:	4274      	negs	r4, r6
10015384:	2680      	movs	r6, #128	; 0x80
10015386:	0436      	lsls	r6, r6, #16
10015388:	46a1      	mov	r9, r4
1001538a:	4337      	orrs	r7, r6
1001538c:	e7be      	b.n	1001530c <__aeabi_dsub+0x4e4>
1001538e:	0002      	movs	r2, r0
10015390:	430a      	orrs	r2, r1
10015392:	d100      	bne.n	10015396 <__aeabi_dsub+0x56e>
10015394:	e574      	b.n	10014e80 <__aeabi_dsub+0x58>
10015396:	1a6a      	subs	r2, r5, r1
10015398:	4690      	mov	r8, r2
1001539a:	4545      	cmp	r5, r8
1001539c:	41b6      	sbcs	r6, r6
1001539e:	1a3a      	subs	r2, r7, r0
100153a0:	4276      	negs	r6, r6
100153a2:	1b92      	subs	r2, r2, r6
100153a4:	4694      	mov	ip, r2
100153a6:	0212      	lsls	r2, r2, #8
100153a8:	d400      	bmi.n	100153ac <__aeabi_dsub+0x584>
100153aa:	e5f7      	b.n	10014f9c <__aeabi_dsub+0x174>
100153ac:	1b4d      	subs	r5, r1, r5
100153ae:	42a9      	cmp	r1, r5
100153b0:	4189      	sbcs	r1, r1
100153b2:	1bc7      	subs	r7, r0, r7
100153b4:	4249      	negs	r1, r1
100153b6:	1a7f      	subs	r7, r7, r1
100153b8:	469a      	mov	sl, r3
100153ba:	e561      	b.n	10014e80 <__aeabi_dsub+0x58>
100153bc:	0002      	movs	r2, r0
100153be:	430a      	orrs	r2, r1
100153c0:	d03a      	beq.n	10015438 <__aeabi_dsub+0x610>
100153c2:	08ed      	lsrs	r5, r5, #3
100153c4:	077c      	lsls	r4, r7, #29
100153c6:	432c      	orrs	r4, r5
100153c8:	2580      	movs	r5, #128	; 0x80
100153ca:	08fa      	lsrs	r2, r7, #3
100153cc:	032d      	lsls	r5, r5, #12
100153ce:	422a      	tst	r2, r5
100153d0:	d008      	beq.n	100153e4 <__aeabi_dsub+0x5bc>
100153d2:	08c7      	lsrs	r7, r0, #3
100153d4:	422f      	tst	r7, r5
100153d6:	d105      	bne.n	100153e4 <__aeabi_dsub+0x5bc>
100153d8:	0745      	lsls	r5, r0, #29
100153da:	002c      	movs	r4, r5
100153dc:	003a      	movs	r2, r7
100153de:	469a      	mov	sl, r3
100153e0:	08c9      	lsrs	r1, r1, #3
100153e2:	430c      	orrs	r4, r1
100153e4:	0f67      	lsrs	r7, r4, #29
100153e6:	00d2      	lsls	r2, r2, #3
100153e8:	00e5      	lsls	r5, r4, #3
100153ea:	4317      	orrs	r7, r2
100153ec:	4c36      	ldr	r4, [pc, #216]	; (100154c8 <__aeabi_dsub+0x6a0>)
100153ee:	e547      	b.n	10014e80 <__aeabi_dsub+0x58>
100153f0:	0007      	movs	r7, r0
100153f2:	000d      	movs	r5, r1
100153f4:	0014      	movs	r4, r2
100153f6:	e543      	b.n	10014e80 <__aeabi_dsub+0x58>
100153f8:	003a      	movs	r2, r7
100153fa:	432a      	orrs	r2, r5
100153fc:	d043      	beq.n	10015486 <__aeabi_dsub+0x65e>
100153fe:	0002      	movs	r2, r0
10015400:	430a      	orrs	r2, r1
10015402:	d019      	beq.n	10015438 <__aeabi_dsub+0x610>
10015404:	08ed      	lsrs	r5, r5, #3
10015406:	077c      	lsls	r4, r7, #29
10015408:	432c      	orrs	r4, r5
1001540a:	2580      	movs	r5, #128	; 0x80
1001540c:	08fa      	lsrs	r2, r7, #3
1001540e:	032d      	lsls	r5, r5, #12
10015410:	422a      	tst	r2, r5
10015412:	d007      	beq.n	10015424 <__aeabi_dsub+0x5fc>
10015414:	08c6      	lsrs	r6, r0, #3
10015416:	422e      	tst	r6, r5
10015418:	d104      	bne.n	10015424 <__aeabi_dsub+0x5fc>
1001541a:	0747      	lsls	r7, r0, #29
1001541c:	003c      	movs	r4, r7
1001541e:	0032      	movs	r2, r6
10015420:	08c9      	lsrs	r1, r1, #3
10015422:	430c      	orrs	r4, r1
10015424:	00d7      	lsls	r7, r2, #3
10015426:	0f62      	lsrs	r2, r4, #29
10015428:	00e5      	lsls	r5, r4, #3
1001542a:	4317      	orrs	r7, r2
1001542c:	469a      	mov	sl, r3
1001542e:	4c26      	ldr	r4, [pc, #152]	; (100154c8 <__aeabi_dsub+0x6a0>)
10015430:	e526      	b.n	10014e80 <__aeabi_dsub+0x58>
10015432:	2200      	movs	r2, #0
10015434:	2500      	movs	r5, #0
10015436:	e544      	b.n	10014ec2 <__aeabi_dsub+0x9a>
10015438:	4c23      	ldr	r4, [pc, #140]	; (100154c8 <__aeabi_dsub+0x6a0>)
1001543a:	e521      	b.n	10014e80 <__aeabi_dsub+0x58>
1001543c:	2000      	movs	r0, #0
1001543e:	e749      	b.n	100152d4 <__aeabi_dsub+0x4ac>
10015440:	2300      	movs	r3, #0
10015442:	2500      	movs	r5, #0
10015444:	e5bb      	b.n	10014fbe <__aeabi_dsub+0x196>
10015446:	464c      	mov	r4, r9
10015448:	003e      	movs	r6, r7
1001544a:	3c20      	subs	r4, #32
1001544c:	40e6      	lsrs	r6, r4
1001544e:	464c      	mov	r4, r9
10015450:	46b4      	mov	ip, r6
10015452:	2c20      	cmp	r4, #32
10015454:	d031      	beq.n	100154ba <__aeabi_dsub+0x692>
10015456:	2440      	movs	r4, #64	; 0x40
10015458:	464e      	mov	r6, r9
1001545a:	1ba6      	subs	r6, r4, r6
1001545c:	40b7      	lsls	r7, r6
1001545e:	433d      	orrs	r5, r7
10015460:	1e6c      	subs	r4, r5, #1
10015462:	41a5      	sbcs	r5, r4
10015464:	4664      	mov	r4, ip
10015466:	432c      	orrs	r4, r5
10015468:	2700      	movs	r7, #0
1001546a:	1b0d      	subs	r5, r1, r4
1001546c:	e6e7      	b.n	1001523e <__aeabi_dsub+0x416>
1001546e:	2280      	movs	r2, #128	; 0x80
10015470:	2300      	movs	r3, #0
10015472:	0312      	lsls	r2, r2, #12
10015474:	4c14      	ldr	r4, [pc, #80]	; (100154c8 <__aeabi_dsub+0x6a0>)
10015476:	2500      	movs	r5, #0
10015478:	e5a1      	b.n	10014fbe <__aeabi_dsub+0x196>
1001547a:	433d      	orrs	r5, r7
1001547c:	1e6f      	subs	r7, r5, #1
1001547e:	41bd      	sbcs	r5, r7
10015480:	2700      	movs	r7, #0
10015482:	b2ed      	uxtb	r5, r5
10015484:	e760      	b.n	10015348 <__aeabi_dsub+0x520>
10015486:	0007      	movs	r7, r0
10015488:	000d      	movs	r5, r1
1001548a:	4c0f      	ldr	r4, [pc, #60]	; (100154c8 <__aeabi_dsub+0x6a0>)
1001548c:	e4f8      	b.n	10014e80 <__aeabi_dsub+0x58>
1001548e:	0007      	movs	r7, r0
10015490:	000d      	movs	r5, r1
10015492:	e4f5      	b.n	10014e80 <__aeabi_dsub+0x58>
10015494:	464e      	mov	r6, r9
10015496:	003c      	movs	r4, r7
10015498:	3e20      	subs	r6, #32
1001549a:	40f4      	lsrs	r4, r6
1001549c:	46a0      	mov	r8, r4
1001549e:	464c      	mov	r4, r9
100154a0:	2c20      	cmp	r4, #32
100154a2:	d00e      	beq.n	100154c2 <__aeabi_dsub+0x69a>
100154a4:	2440      	movs	r4, #64	; 0x40
100154a6:	464e      	mov	r6, r9
100154a8:	1ba4      	subs	r4, r4, r6
100154aa:	40a7      	lsls	r7, r4
100154ac:	433d      	orrs	r5, r7
100154ae:	1e6f      	subs	r7, r5, #1
100154b0:	41bd      	sbcs	r5, r7
100154b2:	4644      	mov	r4, r8
100154b4:	2700      	movs	r7, #0
100154b6:	4325      	orrs	r5, r4
100154b8:	e746      	b.n	10015348 <__aeabi_dsub+0x520>
100154ba:	2700      	movs	r7, #0
100154bc:	e7cf      	b.n	1001545e <__aeabi_dsub+0x636>
100154be:	000d      	movs	r5, r1
100154c0:	e573      	b.n	10014faa <__aeabi_dsub+0x182>
100154c2:	2700      	movs	r7, #0
100154c4:	e7f2      	b.n	100154ac <__aeabi_dsub+0x684>
100154c6:	46c0      	nop			; (mov r8, r8)
100154c8:	000007ff 	.word	0x000007ff
100154cc:	ff7fffff 	.word	0xff7fffff

100154d0 <__aeabi_dcmpun>:
100154d0:	b570      	push	{r4, r5, r6, lr}
100154d2:	4e0e      	ldr	r6, [pc, #56]	; (1001550c <__aeabi_dcmpun+0x3c>)
100154d4:	030c      	lsls	r4, r1, #12
100154d6:	031d      	lsls	r5, r3, #12
100154d8:	0049      	lsls	r1, r1, #1
100154da:	005b      	lsls	r3, r3, #1
100154dc:	0b24      	lsrs	r4, r4, #12
100154de:	0d49      	lsrs	r1, r1, #21
100154e0:	0b2d      	lsrs	r5, r5, #12
100154e2:	0d5b      	lsrs	r3, r3, #21
100154e4:	42b1      	cmp	r1, r6
100154e6:	d004      	beq.n	100154f2 <__aeabi_dcmpun+0x22>
100154e8:	4908      	ldr	r1, [pc, #32]	; (1001550c <__aeabi_dcmpun+0x3c>)
100154ea:	2000      	movs	r0, #0
100154ec:	428b      	cmp	r3, r1
100154ee:	d008      	beq.n	10015502 <__aeabi_dcmpun+0x32>
100154f0:	bd70      	pop	{r4, r5, r6, pc}
100154f2:	4304      	orrs	r4, r0
100154f4:	2001      	movs	r0, #1
100154f6:	2c00      	cmp	r4, #0
100154f8:	d1fa      	bne.n	100154f0 <__aeabi_dcmpun+0x20>
100154fa:	4904      	ldr	r1, [pc, #16]	; (1001550c <__aeabi_dcmpun+0x3c>)
100154fc:	2000      	movs	r0, #0
100154fe:	428b      	cmp	r3, r1
10015500:	d1f6      	bne.n	100154f0 <__aeabi_dcmpun+0x20>
10015502:	4315      	orrs	r5, r2
10015504:	0028      	movs	r0, r5
10015506:	1e45      	subs	r5, r0, #1
10015508:	41a8      	sbcs	r0, r5
1001550a:	e7f1      	b.n	100154f0 <__aeabi_dcmpun+0x20>
1001550c:	000007ff 	.word	0x000007ff

10015510 <__aeabi_d2iz>:
10015510:	030b      	lsls	r3, r1, #12
10015512:	b530      	push	{r4, r5, lr}
10015514:	4d13      	ldr	r5, [pc, #76]	; (10015564 <__aeabi_d2iz+0x54>)
10015516:	0b1a      	lsrs	r2, r3, #12
10015518:	004b      	lsls	r3, r1, #1
1001551a:	0d5b      	lsrs	r3, r3, #21
1001551c:	0fc9      	lsrs	r1, r1, #31
1001551e:	2400      	movs	r4, #0
10015520:	42ab      	cmp	r3, r5
10015522:	dd11      	ble.n	10015548 <__aeabi_d2iz+0x38>
10015524:	4c10      	ldr	r4, [pc, #64]	; (10015568 <__aeabi_d2iz+0x58>)
10015526:	42a3      	cmp	r3, r4
10015528:	dc10      	bgt.n	1001554c <__aeabi_d2iz+0x3c>
1001552a:	2480      	movs	r4, #128	; 0x80
1001552c:	0364      	lsls	r4, r4, #13
1001552e:	4322      	orrs	r2, r4
10015530:	4c0e      	ldr	r4, [pc, #56]	; (1001556c <__aeabi_d2iz+0x5c>)
10015532:	1ae4      	subs	r4, r4, r3
10015534:	2c1f      	cmp	r4, #31
10015536:	dd0c      	ble.n	10015552 <__aeabi_d2iz+0x42>
10015538:	480d      	ldr	r0, [pc, #52]	; (10015570 <__aeabi_d2iz+0x60>)
1001553a:	1ac3      	subs	r3, r0, r3
1001553c:	40da      	lsrs	r2, r3
1001553e:	0013      	movs	r3, r2
10015540:	425c      	negs	r4, r3
10015542:	2900      	cmp	r1, #0
10015544:	d100      	bne.n	10015548 <__aeabi_d2iz+0x38>
10015546:	001c      	movs	r4, r3
10015548:	0020      	movs	r0, r4
1001554a:	bd30      	pop	{r4, r5, pc}
1001554c:	4b09      	ldr	r3, [pc, #36]	; (10015574 <__aeabi_d2iz+0x64>)
1001554e:	18cc      	adds	r4, r1, r3
10015550:	e7fa      	b.n	10015548 <__aeabi_d2iz+0x38>
10015552:	40e0      	lsrs	r0, r4
10015554:	4c08      	ldr	r4, [pc, #32]	; (10015578 <__aeabi_d2iz+0x68>)
10015556:	46a4      	mov	ip, r4
10015558:	4463      	add	r3, ip
1001555a:	409a      	lsls	r2, r3
1001555c:	0013      	movs	r3, r2
1001555e:	4303      	orrs	r3, r0
10015560:	e7ee      	b.n	10015540 <__aeabi_d2iz+0x30>
10015562:	46c0      	nop			; (mov r8, r8)
10015564:	000003fe 	.word	0x000003fe
10015568:	0000041d 	.word	0x0000041d
1001556c:	00000433 	.word	0x00000433
10015570:	00000413 	.word	0x00000413
10015574:	7fffffff 	.word	0x7fffffff
10015578:	fffffbed 	.word	0xfffffbed

1001557c <__aeabi_i2d>:
1001557c:	b570      	push	{r4, r5, r6, lr}
1001557e:	2800      	cmp	r0, #0
10015580:	d030      	beq.n	100155e4 <__aeabi_i2d+0x68>
10015582:	17c3      	asrs	r3, r0, #31
10015584:	18c4      	adds	r4, r0, r3
10015586:	405c      	eors	r4, r3
10015588:	0fc5      	lsrs	r5, r0, #31
1001558a:	0020      	movs	r0, r4
1001558c:	f000 f950 	bl	10015830 <__clzsi2>
10015590:	4b17      	ldr	r3, [pc, #92]	; (100155f0 <__aeabi_i2d+0x74>)
10015592:	4a18      	ldr	r2, [pc, #96]	; (100155f4 <__aeabi_i2d+0x78>)
10015594:	1a1b      	subs	r3, r3, r0
10015596:	1ad2      	subs	r2, r2, r3
10015598:	2a1f      	cmp	r2, #31
1001559a:	dd18      	ble.n	100155ce <__aeabi_i2d+0x52>
1001559c:	4a16      	ldr	r2, [pc, #88]	; (100155f8 <__aeabi_i2d+0x7c>)
1001559e:	1ad2      	subs	r2, r2, r3
100155a0:	4094      	lsls	r4, r2
100155a2:	2200      	movs	r2, #0
100155a4:	0324      	lsls	r4, r4, #12
100155a6:	055b      	lsls	r3, r3, #21
100155a8:	0b24      	lsrs	r4, r4, #12
100155aa:	0d5b      	lsrs	r3, r3, #21
100155ac:	2100      	movs	r1, #0
100155ae:	0010      	movs	r0, r2
100155b0:	0324      	lsls	r4, r4, #12
100155b2:	0d0a      	lsrs	r2, r1, #20
100155b4:	0512      	lsls	r2, r2, #20
100155b6:	0b24      	lsrs	r4, r4, #12
100155b8:	4314      	orrs	r4, r2
100155ba:	4a10      	ldr	r2, [pc, #64]	; (100155fc <__aeabi_i2d+0x80>)
100155bc:	051b      	lsls	r3, r3, #20
100155be:	4014      	ands	r4, r2
100155c0:	431c      	orrs	r4, r3
100155c2:	0064      	lsls	r4, r4, #1
100155c4:	07ed      	lsls	r5, r5, #31
100155c6:	0864      	lsrs	r4, r4, #1
100155c8:	432c      	orrs	r4, r5
100155ca:	0021      	movs	r1, r4
100155cc:	bd70      	pop	{r4, r5, r6, pc}
100155ce:	0021      	movs	r1, r4
100155d0:	4091      	lsls	r1, r2
100155d2:	000a      	movs	r2, r1
100155d4:	210b      	movs	r1, #11
100155d6:	1a08      	subs	r0, r1, r0
100155d8:	40c4      	lsrs	r4, r0
100155da:	055b      	lsls	r3, r3, #21
100155dc:	0324      	lsls	r4, r4, #12
100155de:	0b24      	lsrs	r4, r4, #12
100155e0:	0d5b      	lsrs	r3, r3, #21
100155e2:	e7e3      	b.n	100155ac <__aeabi_i2d+0x30>
100155e4:	2500      	movs	r5, #0
100155e6:	2300      	movs	r3, #0
100155e8:	2400      	movs	r4, #0
100155ea:	2200      	movs	r2, #0
100155ec:	e7de      	b.n	100155ac <__aeabi_i2d+0x30>
100155ee:	46c0      	nop			; (mov r8, r8)
100155f0:	0000041e 	.word	0x0000041e
100155f4:	00000433 	.word	0x00000433
100155f8:	00000413 	.word	0x00000413
100155fc:	800fffff 	.word	0x800fffff

10015600 <__aeabi_ui2d>:
10015600:	b570      	push	{r4, r5, r6, lr}
10015602:	1e05      	subs	r5, r0, #0
10015604:	d028      	beq.n	10015658 <__aeabi_ui2d+0x58>
10015606:	f000 f913 	bl	10015830 <__clzsi2>
1001560a:	4b15      	ldr	r3, [pc, #84]	; (10015660 <__aeabi_ui2d+0x60>)
1001560c:	4a15      	ldr	r2, [pc, #84]	; (10015664 <__aeabi_ui2d+0x64>)
1001560e:	1a1b      	subs	r3, r3, r0
10015610:	1ad2      	subs	r2, r2, r3
10015612:	2a1f      	cmp	r2, #31
10015614:	dd16      	ble.n	10015644 <__aeabi_ui2d+0x44>
10015616:	002c      	movs	r4, r5
10015618:	4a13      	ldr	r2, [pc, #76]	; (10015668 <__aeabi_ui2d+0x68>)
1001561a:	2500      	movs	r5, #0
1001561c:	1ad2      	subs	r2, r2, r3
1001561e:	4094      	lsls	r4, r2
10015620:	055a      	lsls	r2, r3, #21
10015622:	0324      	lsls	r4, r4, #12
10015624:	0b24      	lsrs	r4, r4, #12
10015626:	0d52      	lsrs	r2, r2, #21
10015628:	2100      	movs	r1, #0
1001562a:	0324      	lsls	r4, r4, #12
1001562c:	0d0b      	lsrs	r3, r1, #20
1001562e:	0b24      	lsrs	r4, r4, #12
10015630:	051b      	lsls	r3, r3, #20
10015632:	4323      	orrs	r3, r4
10015634:	4c0d      	ldr	r4, [pc, #52]	; (1001566c <__aeabi_ui2d+0x6c>)
10015636:	0512      	lsls	r2, r2, #20
10015638:	4023      	ands	r3, r4
1001563a:	4313      	orrs	r3, r2
1001563c:	005b      	lsls	r3, r3, #1
1001563e:	0028      	movs	r0, r5
10015640:	0859      	lsrs	r1, r3, #1
10015642:	bd70      	pop	{r4, r5, r6, pc}
10015644:	210b      	movs	r1, #11
10015646:	002c      	movs	r4, r5
10015648:	1a08      	subs	r0, r1, r0
1001564a:	40c4      	lsrs	r4, r0
1001564c:	4095      	lsls	r5, r2
1001564e:	0324      	lsls	r4, r4, #12
10015650:	055a      	lsls	r2, r3, #21
10015652:	0b24      	lsrs	r4, r4, #12
10015654:	0d52      	lsrs	r2, r2, #21
10015656:	e7e7      	b.n	10015628 <__aeabi_ui2d+0x28>
10015658:	2200      	movs	r2, #0
1001565a:	2400      	movs	r4, #0
1001565c:	e7e4      	b.n	10015628 <__aeabi_ui2d+0x28>
1001565e:	46c0      	nop			; (mov r8, r8)
10015660:	0000041e 	.word	0x0000041e
10015664:	00000433 	.word	0x00000433
10015668:	00000413 	.word	0x00000413
1001566c:	800fffff 	.word	0x800fffff

10015670 <__aeabi_f2d>:
10015670:	0042      	lsls	r2, r0, #1
10015672:	0e12      	lsrs	r2, r2, #24
10015674:	1c51      	adds	r1, r2, #1
10015676:	0243      	lsls	r3, r0, #9
10015678:	b2c9      	uxtb	r1, r1
1001567a:	b570      	push	{r4, r5, r6, lr}
1001567c:	0a5d      	lsrs	r5, r3, #9
1001567e:	0fc4      	lsrs	r4, r0, #31
10015680:	2901      	cmp	r1, #1
10015682:	dd15      	ble.n	100156b0 <__aeabi_f2d+0x40>
10015684:	21e0      	movs	r1, #224	; 0xe0
10015686:	0089      	lsls	r1, r1, #2
10015688:	468c      	mov	ip, r1
1001568a:	076d      	lsls	r5, r5, #29
1001568c:	0b1b      	lsrs	r3, r3, #12
1001568e:	4462      	add	r2, ip
10015690:	2100      	movs	r1, #0
10015692:	0028      	movs	r0, r5
10015694:	0d0d      	lsrs	r5, r1, #20
10015696:	052d      	lsls	r5, r5, #20
10015698:	432b      	orrs	r3, r5
1001569a:	4d1c      	ldr	r5, [pc, #112]	; (1001570c <__aeabi_f2d+0x9c>)
1001569c:	0552      	lsls	r2, r2, #21
1001569e:	402b      	ands	r3, r5
100156a0:	0852      	lsrs	r2, r2, #1
100156a2:	4313      	orrs	r3, r2
100156a4:	005b      	lsls	r3, r3, #1
100156a6:	07e4      	lsls	r4, r4, #31
100156a8:	085b      	lsrs	r3, r3, #1
100156aa:	4323      	orrs	r3, r4
100156ac:	0019      	movs	r1, r3
100156ae:	bd70      	pop	{r4, r5, r6, pc}
100156b0:	2a00      	cmp	r2, #0
100156b2:	d115      	bne.n	100156e0 <__aeabi_f2d+0x70>
100156b4:	2d00      	cmp	r5, #0
100156b6:	d01f      	beq.n	100156f8 <__aeabi_f2d+0x88>
100156b8:	0028      	movs	r0, r5
100156ba:	f000 f8b9 	bl	10015830 <__clzsi2>
100156be:	280a      	cmp	r0, #10
100156c0:	dc1d      	bgt.n	100156fe <__aeabi_f2d+0x8e>
100156c2:	230b      	movs	r3, #11
100156c4:	002a      	movs	r2, r5
100156c6:	1a1b      	subs	r3, r3, r0
100156c8:	40da      	lsrs	r2, r3
100156ca:	0013      	movs	r3, r2
100156cc:	0002      	movs	r2, r0
100156ce:	3215      	adds	r2, #21
100156d0:	4095      	lsls	r5, r2
100156d2:	4a0f      	ldr	r2, [pc, #60]	; (10015710 <__aeabi_f2d+0xa0>)
100156d4:	031b      	lsls	r3, r3, #12
100156d6:	1a12      	subs	r2, r2, r0
100156d8:	0552      	lsls	r2, r2, #21
100156da:	0b1b      	lsrs	r3, r3, #12
100156dc:	0d52      	lsrs	r2, r2, #21
100156de:	e7d7      	b.n	10015690 <__aeabi_f2d+0x20>
100156e0:	2d00      	cmp	r5, #0
100156e2:	d006      	beq.n	100156f2 <__aeabi_f2d+0x82>
100156e4:	2280      	movs	r2, #128	; 0x80
100156e6:	0b1b      	lsrs	r3, r3, #12
100156e8:	0312      	lsls	r2, r2, #12
100156ea:	4313      	orrs	r3, r2
100156ec:	076d      	lsls	r5, r5, #29
100156ee:	4a09      	ldr	r2, [pc, #36]	; (10015714 <__aeabi_f2d+0xa4>)
100156f0:	e7ce      	b.n	10015690 <__aeabi_f2d+0x20>
100156f2:	4a08      	ldr	r2, [pc, #32]	; (10015714 <__aeabi_f2d+0xa4>)
100156f4:	2300      	movs	r3, #0
100156f6:	e7cb      	b.n	10015690 <__aeabi_f2d+0x20>
100156f8:	2200      	movs	r2, #0
100156fa:	2300      	movs	r3, #0
100156fc:	e7c8      	b.n	10015690 <__aeabi_f2d+0x20>
100156fe:	0003      	movs	r3, r0
10015700:	3b0b      	subs	r3, #11
10015702:	409d      	lsls	r5, r3
10015704:	002b      	movs	r3, r5
10015706:	2500      	movs	r5, #0
10015708:	e7e3      	b.n	100156d2 <__aeabi_f2d+0x62>
1001570a:	46c0      	nop			; (mov r8, r8)
1001570c:	800fffff 	.word	0x800fffff
10015710:	00000389 	.word	0x00000389
10015714:	000007ff 	.word	0x000007ff

10015718 <__aeabi_d2f>:
10015718:	004b      	lsls	r3, r1, #1
1001571a:	b570      	push	{r4, r5, r6, lr}
1001571c:	0d5e      	lsrs	r6, r3, #21
1001571e:	030c      	lsls	r4, r1, #12
10015720:	1c75      	adds	r5, r6, #1
10015722:	0a64      	lsrs	r4, r4, #9
10015724:	0f42      	lsrs	r2, r0, #29
10015726:	056d      	lsls	r5, r5, #21
10015728:	4322      	orrs	r2, r4
1001572a:	0fc9      	lsrs	r1, r1, #31
1001572c:	00c4      	lsls	r4, r0, #3
1001572e:	0d6d      	lsrs	r5, r5, #21
10015730:	2d01      	cmp	r5, #1
10015732:	dd2a      	ble.n	1001578a <__aeabi_d2f+0x72>
10015734:	4b3b      	ldr	r3, [pc, #236]	; (10015824 <__aeabi_d2f+0x10c>)
10015736:	18f3      	adds	r3, r6, r3
10015738:	2bfe      	cmp	r3, #254	; 0xfe
1001573a:	dc1a      	bgt.n	10015772 <__aeabi_d2f+0x5a>
1001573c:	2b00      	cmp	r3, #0
1001573e:	dd42      	ble.n	100157c6 <__aeabi_d2f+0xae>
10015740:	0180      	lsls	r0, r0, #6
10015742:	1e45      	subs	r5, r0, #1
10015744:	41a8      	sbcs	r0, r5
10015746:	00d2      	lsls	r2, r2, #3
10015748:	4310      	orrs	r0, r2
1001574a:	0f62      	lsrs	r2, r4, #29
1001574c:	4302      	orrs	r2, r0
1001574e:	0750      	lsls	r0, r2, #29
10015750:	d004      	beq.n	1001575c <__aeabi_d2f+0x44>
10015752:	200f      	movs	r0, #15
10015754:	4010      	ands	r0, r2
10015756:	2804      	cmp	r0, #4
10015758:	d000      	beq.n	1001575c <__aeabi_d2f+0x44>
1001575a:	3204      	adds	r2, #4
1001575c:	2080      	movs	r0, #128	; 0x80
1001575e:	04c0      	lsls	r0, r0, #19
10015760:	4010      	ands	r0, r2
10015762:	d021      	beq.n	100157a8 <__aeabi_d2f+0x90>
10015764:	3301      	adds	r3, #1
10015766:	2bff      	cmp	r3, #255	; 0xff
10015768:	d003      	beq.n	10015772 <__aeabi_d2f+0x5a>
1001576a:	0192      	lsls	r2, r2, #6
1001576c:	0a52      	lsrs	r2, r2, #9
1001576e:	b2db      	uxtb	r3, r3
10015770:	e001      	b.n	10015776 <__aeabi_d2f+0x5e>
10015772:	23ff      	movs	r3, #255	; 0xff
10015774:	2200      	movs	r2, #0
10015776:	0252      	lsls	r2, r2, #9
10015778:	0a52      	lsrs	r2, r2, #9
1001577a:	05db      	lsls	r3, r3, #23
1001577c:	4313      	orrs	r3, r2
1001577e:	005b      	lsls	r3, r3, #1
10015780:	07c9      	lsls	r1, r1, #31
10015782:	085b      	lsrs	r3, r3, #1
10015784:	430b      	orrs	r3, r1
10015786:	0018      	movs	r0, r3
10015788:	bd70      	pop	{r4, r5, r6, pc}
1001578a:	2e00      	cmp	r6, #0
1001578c:	d007      	beq.n	1001579e <__aeabi_d2f+0x86>
1001578e:	4314      	orrs	r4, r2
10015790:	d0ef      	beq.n	10015772 <__aeabi_d2f+0x5a>
10015792:	2080      	movs	r0, #128	; 0x80
10015794:	00d2      	lsls	r2, r2, #3
10015796:	0480      	lsls	r0, r0, #18
10015798:	4302      	orrs	r2, r0
1001579a:	23ff      	movs	r3, #255	; 0xff
1001579c:	e7d7      	b.n	1001574e <__aeabi_d2f+0x36>
1001579e:	4322      	orrs	r2, r4
100157a0:	2300      	movs	r3, #0
100157a2:	2a00      	cmp	r2, #0
100157a4:	d003      	beq.n	100157ae <__aeabi_d2f+0x96>
100157a6:	2205      	movs	r2, #5
100157a8:	08d2      	lsrs	r2, r2, #3
100157aa:	2bff      	cmp	r3, #255	; 0xff
100157ac:	d003      	beq.n	100157b6 <__aeabi_d2f+0x9e>
100157ae:	0252      	lsls	r2, r2, #9
100157b0:	0a52      	lsrs	r2, r2, #9
100157b2:	b2db      	uxtb	r3, r3
100157b4:	e7df      	b.n	10015776 <__aeabi_d2f+0x5e>
100157b6:	2a00      	cmp	r2, #0
100157b8:	d032      	beq.n	10015820 <__aeabi_d2f+0x108>
100157ba:	2080      	movs	r0, #128	; 0x80
100157bc:	03c0      	lsls	r0, r0, #15
100157be:	4302      	orrs	r2, r0
100157c0:	0252      	lsls	r2, r2, #9
100157c2:	0a52      	lsrs	r2, r2, #9
100157c4:	e7d7      	b.n	10015776 <__aeabi_d2f+0x5e>
100157c6:	0018      	movs	r0, r3
100157c8:	3017      	adds	r0, #23
100157ca:	db14      	blt.n	100157f6 <__aeabi_d2f+0xde>
100157cc:	2080      	movs	r0, #128	; 0x80
100157ce:	0400      	lsls	r0, r0, #16
100157d0:	4302      	orrs	r2, r0
100157d2:	201e      	movs	r0, #30
100157d4:	1ac0      	subs	r0, r0, r3
100157d6:	281f      	cmp	r0, #31
100157d8:	dc0f      	bgt.n	100157fa <__aeabi_d2f+0xe2>
100157da:	0025      	movs	r5, r4
100157dc:	4b12      	ldr	r3, [pc, #72]	; (10015828 <__aeabi_d2f+0x110>)
100157de:	18f3      	adds	r3, r6, r3
100157e0:	409d      	lsls	r5, r3
100157e2:	1e6e      	subs	r6, r5, #1
100157e4:	41b5      	sbcs	r5, r6
100157e6:	409a      	lsls	r2, r3
100157e8:	002b      	movs	r3, r5
100157ea:	4313      	orrs	r3, r2
100157ec:	0022      	movs	r2, r4
100157ee:	40c2      	lsrs	r2, r0
100157f0:	431a      	orrs	r2, r3
100157f2:	2300      	movs	r3, #0
100157f4:	e7ab      	b.n	1001574e <__aeabi_d2f+0x36>
100157f6:	2300      	movs	r3, #0
100157f8:	e7d5      	b.n	100157a6 <__aeabi_d2f+0x8e>
100157fa:	2502      	movs	r5, #2
100157fc:	426d      	negs	r5, r5
100157fe:	1aeb      	subs	r3, r5, r3
10015800:	0015      	movs	r5, r2
10015802:	40dd      	lsrs	r5, r3
10015804:	2820      	cmp	r0, #32
10015806:	d009      	beq.n	1001581c <__aeabi_d2f+0x104>
10015808:	4b08      	ldr	r3, [pc, #32]	; (1001582c <__aeabi_d2f+0x114>)
1001580a:	18f3      	adds	r3, r6, r3
1001580c:	409a      	lsls	r2, r3
1001580e:	4314      	orrs	r4, r2
10015810:	1e62      	subs	r2, r4, #1
10015812:	4194      	sbcs	r4, r2
10015814:	0022      	movs	r2, r4
10015816:	2300      	movs	r3, #0
10015818:	432a      	orrs	r2, r5
1001581a:	e798      	b.n	1001574e <__aeabi_d2f+0x36>
1001581c:	2200      	movs	r2, #0
1001581e:	e7f6      	b.n	1001580e <__aeabi_d2f+0xf6>
10015820:	2200      	movs	r2, #0
10015822:	e7a8      	b.n	10015776 <__aeabi_d2f+0x5e>
10015824:	fffffc80 	.word	0xfffffc80
10015828:	fffffc82 	.word	0xfffffc82
1001582c:	fffffca2 	.word	0xfffffca2

10015830 <__clzsi2>:
10015830:	211c      	movs	r1, #28
10015832:	2301      	movs	r3, #1
10015834:	041b      	lsls	r3, r3, #16
10015836:	4298      	cmp	r0, r3
10015838:	d301      	bcc.n	1001583e <__clzsi2+0xe>
1001583a:	0c00      	lsrs	r0, r0, #16
1001583c:	3910      	subs	r1, #16
1001583e:	0a1b      	lsrs	r3, r3, #8
10015840:	4298      	cmp	r0, r3
10015842:	d301      	bcc.n	10015848 <__clzsi2+0x18>
10015844:	0a00      	lsrs	r0, r0, #8
10015846:	3908      	subs	r1, #8
10015848:	091b      	lsrs	r3, r3, #4
1001584a:	4298      	cmp	r0, r3
1001584c:	d301      	bcc.n	10015852 <__clzsi2+0x22>
1001584e:	0900      	lsrs	r0, r0, #4
10015850:	3904      	subs	r1, #4
10015852:	a202      	add	r2, pc, #8	; (adr r2, 1001585c <__clzsi2+0x2c>)
10015854:	5c10      	ldrb	r0, [r2, r0]
10015856:	1840      	adds	r0, r0, r1
10015858:	4770      	bx	lr
1001585a:	46c0      	nop			; (mov r8, r8)
1001585c:	02020304 	.word	0x02020304
10015860:	01010101 	.word	0x01010101
	...

1001586c <__errno>:
1001586c:	4b01      	ldr	r3, [pc, #4]	; (10015874 <__errno+0x8>)
1001586e:	6818      	ldr	r0, [r3, #0]
10015870:	4770      	bx	lr
10015872:	46c0      	nop			; (mov r8, r8)
10015874:	10018768 	.word	0x10018768

10015878 <__libc_init_array>:
10015878:	4b0e      	ldr	r3, [pc, #56]	; (100158b4 <__libc_init_array+0x3c>)
1001587a:	b570      	push	{r4, r5, r6, lr}
1001587c:	2500      	movs	r5, #0
1001587e:	001e      	movs	r6, r3
10015880:	4c0d      	ldr	r4, [pc, #52]	; (100158b8 <__libc_init_array+0x40>)
10015882:	1ae4      	subs	r4, r4, r3
10015884:	10a4      	asrs	r4, r4, #2
10015886:	42a5      	cmp	r5, r4
10015888:	d004      	beq.n	10015894 <__libc_init_array+0x1c>
1001588a:	00ab      	lsls	r3, r5, #2
1001588c:	58f3      	ldr	r3, [r6, r3]
1001588e:	4798      	blx	r3
10015890:	3501      	adds	r5, #1
10015892:	e7f8      	b.n	10015886 <__libc_init_array+0xe>
10015894:	f002 ff22 	bl	100186dc <_init>
10015898:	4b08      	ldr	r3, [pc, #32]	; (100158bc <__libc_init_array+0x44>)
1001589a:	2500      	movs	r5, #0
1001589c:	001e      	movs	r6, r3
1001589e:	4c08      	ldr	r4, [pc, #32]	; (100158c0 <__libc_init_array+0x48>)
100158a0:	1ae4      	subs	r4, r4, r3
100158a2:	10a4      	asrs	r4, r4, #2
100158a4:	42a5      	cmp	r5, r4
100158a6:	d004      	beq.n	100158b2 <__libc_init_array+0x3a>
100158a8:	00ab      	lsls	r3, r5, #2
100158aa:	58f3      	ldr	r3, [r6, r3]
100158ac:	4798      	blx	r3
100158ae:	3501      	adds	r5, #1
100158b0:	e7f8      	b.n	100158a4 <__libc_init_array+0x2c>
100158b2:	bd70      	pop	{r4, r5, r6, pc}
100158b4:	100186e8 	.word	0x100186e8
100158b8:	100186e8 	.word	0x100186e8
100158bc:	100186e8 	.word	0x100186e8
100158c0:	100186ec 	.word	0x100186ec

100158c4 <malloc>:
100158c4:	b510      	push	{r4, lr}
100158c6:	4b03      	ldr	r3, [pc, #12]	; (100158d4 <malloc+0x10>)
100158c8:	0001      	movs	r1, r0
100158ca:	6818      	ldr	r0, [r3, #0]
100158cc:	f000 f86a 	bl	100159a4 <_malloc_r>
100158d0:	bd10      	pop	{r4, pc}
100158d2:	46c0      	nop			; (mov r8, r8)
100158d4:	10018768 	.word	0x10018768

100158d8 <memcmp>:
100158d8:	b530      	push	{r4, r5, lr}
100158da:	2400      	movs	r4, #0
100158dc:	42a2      	cmp	r2, r4
100158de:	d008      	beq.n	100158f2 <memcmp+0x1a>
100158e0:	5d03      	ldrb	r3, [r0, r4]
100158e2:	1c65      	adds	r5, r4, #1
100158e4:	5d0c      	ldrb	r4, [r1, r4]
100158e6:	42a3      	cmp	r3, r4
100158e8:	d001      	beq.n	100158ee <memcmp+0x16>
100158ea:	1b18      	subs	r0, r3, r4
100158ec:	e002      	b.n	100158f4 <memcmp+0x1c>
100158ee:	002c      	movs	r4, r5
100158f0:	e7f4      	b.n	100158dc <memcmp+0x4>
100158f2:	2000      	movs	r0, #0
100158f4:	bd30      	pop	{r4, r5, pc}

100158f6 <memcpy>:
100158f6:	2300      	movs	r3, #0
100158f8:	b510      	push	{r4, lr}
100158fa:	429a      	cmp	r2, r3
100158fc:	d003      	beq.n	10015906 <memcpy+0x10>
100158fe:	5ccc      	ldrb	r4, [r1, r3]
10015900:	54c4      	strb	r4, [r0, r3]
10015902:	3301      	adds	r3, #1
10015904:	e7f9      	b.n	100158fa <memcpy+0x4>
10015906:	bd10      	pop	{r4, pc}

10015908 <memset>:
10015908:	0003      	movs	r3, r0
1001590a:	1882      	adds	r2, r0, r2
1001590c:	4293      	cmp	r3, r2
1001590e:	d002      	beq.n	10015916 <memset+0xe>
10015910:	7019      	strb	r1, [r3, #0]
10015912:	3301      	adds	r3, #1
10015914:	e7fa      	b.n	1001590c <memset+0x4>
10015916:	4770      	bx	lr

10015918 <_free_r>:
10015918:	b530      	push	{r4, r5, lr}
1001591a:	2900      	cmp	r1, #0
1001591c:	d03e      	beq.n	1001599c <_free_r+0x84>
1001591e:	3904      	subs	r1, #4
10015920:	680b      	ldr	r3, [r1, #0]
10015922:	2b00      	cmp	r3, #0
10015924:	da00      	bge.n	10015928 <_free_r+0x10>
10015926:	18c9      	adds	r1, r1, r3
10015928:	4a1d      	ldr	r2, [pc, #116]	; (100159a0 <_free_r+0x88>)
1001592a:	6813      	ldr	r3, [r2, #0]
1001592c:	0014      	movs	r4, r2
1001592e:	2b00      	cmp	r3, #0
10015930:	d102      	bne.n	10015938 <_free_r+0x20>
10015932:	604b      	str	r3, [r1, #4]
10015934:	6011      	str	r1, [r2, #0]
10015936:	e031      	b.n	1001599c <_free_r+0x84>
10015938:	428b      	cmp	r3, r1
1001593a:	d90d      	bls.n	10015958 <_free_r+0x40>
1001593c:	680a      	ldr	r2, [r1, #0]
1001593e:	1888      	adds	r0, r1, r2
10015940:	4283      	cmp	r3, r0
10015942:	d103      	bne.n	1001594c <_free_r+0x34>
10015944:	6818      	ldr	r0, [r3, #0]
10015946:	685b      	ldr	r3, [r3, #4]
10015948:	1882      	adds	r2, r0, r2
1001594a:	600a      	str	r2, [r1, #0]
1001594c:	604b      	str	r3, [r1, #4]
1001594e:	6021      	str	r1, [r4, #0]
10015950:	e024      	b.n	1001599c <_free_r+0x84>
10015952:	428a      	cmp	r2, r1
10015954:	d803      	bhi.n	1001595e <_free_r+0x46>
10015956:	0013      	movs	r3, r2
10015958:	685a      	ldr	r2, [r3, #4]
1001595a:	2a00      	cmp	r2, #0
1001595c:	d1f9      	bne.n	10015952 <_free_r+0x3a>
1001595e:	681d      	ldr	r5, [r3, #0]
10015960:	195c      	adds	r4, r3, r5
10015962:	428c      	cmp	r4, r1
10015964:	d10b      	bne.n	1001597e <_free_r+0x66>
10015966:	6809      	ldr	r1, [r1, #0]
10015968:	1869      	adds	r1, r5, r1
1001596a:	1858      	adds	r0, r3, r1
1001596c:	6019      	str	r1, [r3, #0]
1001596e:	4282      	cmp	r2, r0
10015970:	d114      	bne.n	1001599c <_free_r+0x84>
10015972:	6810      	ldr	r0, [r2, #0]
10015974:	6852      	ldr	r2, [r2, #4]
10015976:	1841      	adds	r1, r0, r1
10015978:	6019      	str	r1, [r3, #0]
1001597a:	605a      	str	r2, [r3, #4]
1001597c:	e00e      	b.n	1001599c <_free_r+0x84>
1001597e:	428c      	cmp	r4, r1
10015980:	d902      	bls.n	10015988 <_free_r+0x70>
10015982:	230c      	movs	r3, #12
10015984:	6003      	str	r3, [r0, #0]
10015986:	e009      	b.n	1001599c <_free_r+0x84>
10015988:	6808      	ldr	r0, [r1, #0]
1001598a:	180c      	adds	r4, r1, r0
1001598c:	42a2      	cmp	r2, r4
1001598e:	d103      	bne.n	10015998 <_free_r+0x80>
10015990:	6814      	ldr	r4, [r2, #0]
10015992:	6852      	ldr	r2, [r2, #4]
10015994:	1820      	adds	r0, r4, r0
10015996:	6008      	str	r0, [r1, #0]
10015998:	604a      	str	r2, [r1, #4]
1001599a:	6059      	str	r1, [r3, #4]
1001599c:	bd30      	pop	{r4, r5, pc}
1001599e:	46c0      	nop			; (mov r8, r8)
100159a0:	1001a22c 	.word	0x1001a22c

100159a4 <_malloc_r>:
100159a4:	2303      	movs	r3, #3
100159a6:	b570      	push	{r4, r5, r6, lr}
100159a8:	1ccd      	adds	r5, r1, #3
100159aa:	439d      	bics	r5, r3
100159ac:	3508      	adds	r5, #8
100159ae:	0006      	movs	r6, r0
100159b0:	2d0c      	cmp	r5, #12
100159b2:	d201      	bcs.n	100159b8 <_malloc_r+0x14>
100159b4:	250c      	movs	r5, #12
100159b6:	e005      	b.n	100159c4 <_malloc_r+0x20>
100159b8:	2d00      	cmp	r5, #0
100159ba:	da03      	bge.n	100159c4 <_malloc_r+0x20>
100159bc:	230c      	movs	r3, #12
100159be:	2000      	movs	r0, #0
100159c0:	6033      	str	r3, [r6, #0]
100159c2:	e040      	b.n	10015a46 <_malloc_r+0xa2>
100159c4:	42a9      	cmp	r1, r5
100159c6:	d8f9      	bhi.n	100159bc <_malloc_r+0x18>
100159c8:	4b1f      	ldr	r3, [pc, #124]	; (10015a48 <_malloc_r+0xa4>)
100159ca:	681c      	ldr	r4, [r3, #0]
100159cc:	001a      	movs	r2, r3
100159ce:	0021      	movs	r1, r4
100159d0:	2900      	cmp	r1, #0
100159d2:	d013      	beq.n	100159fc <_malloc_r+0x58>
100159d4:	680b      	ldr	r3, [r1, #0]
100159d6:	1b5b      	subs	r3, r3, r5
100159d8:	d40d      	bmi.n	100159f6 <_malloc_r+0x52>
100159da:	2b0b      	cmp	r3, #11
100159dc:	d902      	bls.n	100159e4 <_malloc_r+0x40>
100159de:	600b      	str	r3, [r1, #0]
100159e0:	18cc      	adds	r4, r1, r3
100159e2:	e01e      	b.n	10015a22 <_malloc_r+0x7e>
100159e4:	428c      	cmp	r4, r1
100159e6:	d102      	bne.n	100159ee <_malloc_r+0x4a>
100159e8:	6863      	ldr	r3, [r4, #4]
100159ea:	6013      	str	r3, [r2, #0]
100159ec:	e01a      	b.n	10015a24 <_malloc_r+0x80>
100159ee:	684b      	ldr	r3, [r1, #4]
100159f0:	6063      	str	r3, [r4, #4]
100159f2:	000c      	movs	r4, r1
100159f4:	e016      	b.n	10015a24 <_malloc_r+0x80>
100159f6:	000c      	movs	r4, r1
100159f8:	6849      	ldr	r1, [r1, #4]
100159fa:	e7e9      	b.n	100159d0 <_malloc_r+0x2c>
100159fc:	4c13      	ldr	r4, [pc, #76]	; (10015a4c <_malloc_r+0xa8>)
100159fe:	6823      	ldr	r3, [r4, #0]
10015a00:	2b00      	cmp	r3, #0
10015a02:	d103      	bne.n	10015a0c <_malloc_r+0x68>
10015a04:	0030      	movs	r0, r6
10015a06:	f000 f8f9 	bl	10015bfc <_sbrk_r>
10015a0a:	6020      	str	r0, [r4, #0]
10015a0c:	0029      	movs	r1, r5
10015a0e:	0030      	movs	r0, r6
10015a10:	f000 f8f4 	bl	10015bfc <_sbrk_r>
10015a14:	1c43      	adds	r3, r0, #1
10015a16:	d0d1      	beq.n	100159bc <_malloc_r+0x18>
10015a18:	2303      	movs	r3, #3
10015a1a:	1cc4      	adds	r4, r0, #3
10015a1c:	439c      	bics	r4, r3
10015a1e:	42a0      	cmp	r0, r4
10015a20:	d10a      	bne.n	10015a38 <_malloc_r+0x94>
10015a22:	6025      	str	r5, [r4, #0]
10015a24:	0020      	movs	r0, r4
10015a26:	2207      	movs	r2, #7
10015a28:	300b      	adds	r0, #11
10015a2a:	1d23      	adds	r3, r4, #4
10015a2c:	4390      	bics	r0, r2
10015a2e:	1ac3      	subs	r3, r0, r3
10015a30:	d009      	beq.n	10015a46 <_malloc_r+0xa2>
10015a32:	425a      	negs	r2, r3
10015a34:	50e2      	str	r2, [r4, r3]
10015a36:	e006      	b.n	10015a46 <_malloc_r+0xa2>
10015a38:	1a21      	subs	r1, r4, r0
10015a3a:	0030      	movs	r0, r6
10015a3c:	f000 f8de 	bl	10015bfc <_sbrk_r>
10015a40:	1c43      	adds	r3, r0, #1
10015a42:	d1ee      	bne.n	10015a22 <_malloc_r+0x7e>
10015a44:	e7ba      	b.n	100159bc <_malloc_r+0x18>
10015a46:	bd70      	pop	{r4, r5, r6, pc}
10015a48:	1001a22c 	.word	0x1001a22c
10015a4c:	1001a228 	.word	0x1001a228

10015a50 <iprintf>:
10015a50:	b40f      	push	{r0, r1, r2, r3}
10015a52:	4b0b      	ldr	r3, [pc, #44]	; (10015a80 <iprintf+0x30>)
10015a54:	b513      	push	{r0, r1, r4, lr}
10015a56:	681c      	ldr	r4, [r3, #0]
10015a58:	2c00      	cmp	r4, #0
10015a5a:	d005      	beq.n	10015a68 <iprintf+0x18>
10015a5c:	69a3      	ldr	r3, [r4, #24]
10015a5e:	2b00      	cmp	r3, #0
10015a60:	d102      	bne.n	10015a68 <iprintf+0x18>
10015a62:	0020      	movs	r0, r4
10015a64:	f000 fb58 	bl	10016118 <__sinit>
10015a68:	ab05      	add	r3, sp, #20
10015a6a:	9a04      	ldr	r2, [sp, #16]
10015a6c:	68a1      	ldr	r1, [r4, #8]
10015a6e:	0020      	movs	r0, r4
10015a70:	9301      	str	r3, [sp, #4]
10015a72:	f000 fc71 	bl	10016358 <_vfiprintf_r>
10015a76:	bc16      	pop	{r1, r2, r4}
10015a78:	bc08      	pop	{r3}
10015a7a:	b004      	add	sp, #16
10015a7c:	4718      	bx	r3
10015a7e:	46c0      	nop			; (mov r8, r8)
10015a80:	10018768 	.word	0x10018768

10015a84 <putchar>:
10015a84:	4b08      	ldr	r3, [pc, #32]	; (10015aa8 <putchar+0x24>)
10015a86:	b570      	push	{r4, r5, r6, lr}
10015a88:	681c      	ldr	r4, [r3, #0]
10015a8a:	0005      	movs	r5, r0
10015a8c:	2c00      	cmp	r4, #0
10015a8e:	d005      	beq.n	10015a9c <putchar+0x18>
10015a90:	69a3      	ldr	r3, [r4, #24]
10015a92:	2b00      	cmp	r3, #0
10015a94:	d102      	bne.n	10015a9c <putchar+0x18>
10015a96:	0020      	movs	r0, r4
10015a98:	f000 fb3e 	bl	10016118 <__sinit>
10015a9c:	0029      	movs	r1, r5
10015a9e:	68a2      	ldr	r2, [r4, #8]
10015aa0:	0020      	movs	r0, r4
10015aa2:	f000 ff05 	bl	100168b0 <_putc_r>
10015aa6:	bd70      	pop	{r4, r5, r6, pc}
10015aa8:	10018768 	.word	0x10018768

10015aac <_puts_r>:
10015aac:	b570      	push	{r4, r5, r6, lr}
10015aae:	0005      	movs	r5, r0
10015ab0:	000e      	movs	r6, r1
10015ab2:	2800      	cmp	r0, #0
10015ab4:	d004      	beq.n	10015ac0 <_puts_r+0x14>
10015ab6:	6983      	ldr	r3, [r0, #24]
10015ab8:	2b00      	cmp	r3, #0
10015aba:	d101      	bne.n	10015ac0 <_puts_r+0x14>
10015abc:	f000 fb2c 	bl	10016118 <__sinit>
10015ac0:	69ab      	ldr	r3, [r5, #24]
10015ac2:	68ac      	ldr	r4, [r5, #8]
10015ac4:	2b00      	cmp	r3, #0
10015ac6:	d102      	bne.n	10015ace <_puts_r+0x22>
10015ac8:	0028      	movs	r0, r5
10015aca:	f000 fb25 	bl	10016118 <__sinit>
10015ace:	4b25      	ldr	r3, [pc, #148]	; (10015b64 <_puts_r+0xb8>)
10015ad0:	429c      	cmp	r4, r3
10015ad2:	d101      	bne.n	10015ad8 <_puts_r+0x2c>
10015ad4:	686c      	ldr	r4, [r5, #4]
10015ad6:	e008      	b.n	10015aea <_puts_r+0x3e>
10015ad8:	4b23      	ldr	r3, [pc, #140]	; (10015b68 <_puts_r+0xbc>)
10015ada:	429c      	cmp	r4, r3
10015adc:	d101      	bne.n	10015ae2 <_puts_r+0x36>
10015ade:	68ac      	ldr	r4, [r5, #8]
10015ae0:	e003      	b.n	10015aea <_puts_r+0x3e>
10015ae2:	4b22      	ldr	r3, [pc, #136]	; (10015b6c <_puts_r+0xc0>)
10015ae4:	429c      	cmp	r4, r3
10015ae6:	d100      	bne.n	10015aea <_puts_r+0x3e>
10015ae8:	68ec      	ldr	r4, [r5, #12]
10015aea:	89a3      	ldrh	r3, [r4, #12]
10015aec:	071b      	lsls	r3, r3, #28
10015aee:	d502      	bpl.n	10015af6 <_puts_r+0x4a>
10015af0:	6923      	ldr	r3, [r4, #16]
10015af2:	2b00      	cmp	r3, #0
10015af4:	d111      	bne.n	10015b1a <_puts_r+0x6e>
10015af6:	0021      	movs	r1, r4
10015af8:	0028      	movs	r0, r5
10015afa:	f000 f9a3 	bl	10015e44 <__swsetup_r>
10015afe:	2800      	cmp	r0, #0
10015b00:	d00b      	beq.n	10015b1a <_puts_r+0x6e>
10015b02:	2001      	movs	r0, #1
10015b04:	4240      	negs	r0, r0
10015b06:	e02b      	b.n	10015b60 <_puts_r+0xb4>
10015b08:	3b01      	subs	r3, #1
10015b0a:	3601      	adds	r6, #1
10015b0c:	60a3      	str	r3, [r4, #8]
10015b0e:	2b00      	cmp	r3, #0
10015b10:	db08      	blt.n	10015b24 <_puts_r+0x78>
10015b12:	6823      	ldr	r3, [r4, #0]
10015b14:	1c5a      	adds	r2, r3, #1
10015b16:	6022      	str	r2, [r4, #0]
10015b18:	7019      	strb	r1, [r3, #0]
10015b1a:	7831      	ldrb	r1, [r6, #0]
10015b1c:	68a3      	ldr	r3, [r4, #8]
10015b1e:	2900      	cmp	r1, #0
10015b20:	d1f2      	bne.n	10015b08 <_puts_r+0x5c>
10015b22:	e00b      	b.n	10015b3c <_puts_r+0x90>
10015b24:	69a2      	ldr	r2, [r4, #24]
10015b26:	4293      	cmp	r3, r2
10015b28:	db01      	blt.n	10015b2e <_puts_r+0x82>
10015b2a:	290a      	cmp	r1, #10
10015b2c:	d1f1      	bne.n	10015b12 <_puts_r+0x66>
10015b2e:	0022      	movs	r2, r4
10015b30:	0028      	movs	r0, r5
10015b32:	f000 f92f 	bl	10015d94 <__swbuf_r>
10015b36:	1c43      	adds	r3, r0, #1
10015b38:	d1ef      	bne.n	10015b1a <_puts_r+0x6e>
10015b3a:	e7e2      	b.n	10015b02 <_puts_r+0x56>
10015b3c:	3b01      	subs	r3, #1
10015b3e:	60a3      	str	r3, [r4, #8]
10015b40:	2b00      	cmp	r3, #0
10015b42:	da08      	bge.n	10015b56 <_puts_r+0xaa>
10015b44:	0022      	movs	r2, r4
10015b46:	310a      	adds	r1, #10
10015b48:	0028      	movs	r0, r5
10015b4a:	f000 f923 	bl	10015d94 <__swbuf_r>
10015b4e:	1c43      	adds	r3, r0, #1
10015b50:	d0d7      	beq.n	10015b02 <_puts_r+0x56>
10015b52:	200a      	movs	r0, #10
10015b54:	e004      	b.n	10015b60 <_puts_r+0xb4>
10015b56:	200a      	movs	r0, #10
10015b58:	6823      	ldr	r3, [r4, #0]
10015b5a:	1c5a      	adds	r2, r3, #1
10015b5c:	6022      	str	r2, [r4, #0]
10015b5e:	7018      	strb	r0, [r3, #0]
10015b60:	bd70      	pop	{r4, r5, r6, pc}
10015b62:	46c0      	nop			; (mov r8, r8)
10015b64:	10018648 	.word	0x10018648
10015b68:	10018668 	.word	0x10018668
10015b6c:	10018688 	.word	0x10018688

10015b70 <puts>:
10015b70:	b510      	push	{r4, lr}
10015b72:	4b03      	ldr	r3, [pc, #12]	; (10015b80 <puts+0x10>)
10015b74:	0001      	movs	r1, r0
10015b76:	6818      	ldr	r0, [r3, #0]
10015b78:	f7ff ff98 	bl	10015aac <_puts_r>
10015b7c:	bd10      	pop	{r4, pc}
10015b7e:	46c0      	nop			; (mov r8, r8)
10015b80:	10018768 	.word	0x10018768

10015b84 <rand>:
10015b84:	4b15      	ldr	r3, [pc, #84]	; (10015bdc <rand+0x58>)
10015b86:	b510      	push	{r4, lr}
10015b88:	681c      	ldr	r4, [r3, #0]
10015b8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015b8c:	2b00      	cmp	r3, #0
10015b8e:	d115      	bne.n	10015bbc <rand+0x38>
10015b90:	2018      	movs	r0, #24
10015b92:	f7ff fe97 	bl	100158c4 <malloc>
10015b96:	4b12      	ldr	r3, [pc, #72]	; (10015be0 <rand+0x5c>)
10015b98:	63a0      	str	r0, [r4, #56]	; 0x38
10015b9a:	8003      	strh	r3, [r0, #0]
10015b9c:	4b11      	ldr	r3, [pc, #68]	; (10015be4 <rand+0x60>)
10015b9e:	2201      	movs	r2, #1
10015ba0:	8043      	strh	r3, [r0, #2]
10015ba2:	4b11      	ldr	r3, [pc, #68]	; (10015be8 <rand+0x64>)
10015ba4:	8083      	strh	r3, [r0, #4]
10015ba6:	4b11      	ldr	r3, [pc, #68]	; (10015bec <rand+0x68>)
10015ba8:	80c3      	strh	r3, [r0, #6]
10015baa:	4b11      	ldr	r3, [pc, #68]	; (10015bf0 <rand+0x6c>)
10015bac:	8103      	strh	r3, [r0, #8]
10015bae:	2305      	movs	r3, #5
10015bb0:	8143      	strh	r3, [r0, #10]
10015bb2:	3306      	adds	r3, #6
10015bb4:	8183      	strh	r3, [r0, #12]
10015bb6:	2300      	movs	r3, #0
10015bb8:	6102      	str	r2, [r0, #16]
10015bba:	6143      	str	r3, [r0, #20]
10015bbc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10015bbe:	4a0d      	ldr	r2, [pc, #52]	; (10015bf4 <rand+0x70>)
10015bc0:	6920      	ldr	r0, [r4, #16]
10015bc2:	6961      	ldr	r1, [r4, #20]
10015bc4:	4b0c      	ldr	r3, [pc, #48]	; (10015bf8 <rand+0x74>)
10015bc6:	f7fd f9f7 	bl	10012fb8 <__aeabi_lmul>
10015bca:	2201      	movs	r2, #1
10015bcc:	2300      	movs	r3, #0
10015bce:	1880      	adds	r0, r0, r2
10015bd0:	4159      	adcs	r1, r3
10015bd2:	6120      	str	r0, [r4, #16]
10015bd4:	6161      	str	r1, [r4, #20]
10015bd6:	0048      	lsls	r0, r1, #1
10015bd8:	0840      	lsrs	r0, r0, #1
10015bda:	bd10      	pop	{r4, pc}
10015bdc:	10018768 	.word	0x10018768
10015be0:	0000330e 	.word	0x0000330e
10015be4:	ffffabcd 	.word	0xffffabcd
10015be8:	00001234 	.word	0x00001234
10015bec:	ffffe66d 	.word	0xffffe66d
10015bf0:	ffffdeec 	.word	0xffffdeec
10015bf4:	4c957f2d 	.word	0x4c957f2d
10015bf8:	5851f42d 	.word	0x5851f42d

10015bfc <_sbrk_r>:
10015bfc:	2300      	movs	r3, #0
10015bfe:	b570      	push	{r4, r5, r6, lr}
10015c00:	4c06      	ldr	r4, [pc, #24]	; (10015c1c <_sbrk_r+0x20>)
10015c02:	0005      	movs	r5, r0
10015c04:	0008      	movs	r0, r1
10015c06:	6023      	str	r3, [r4, #0]
10015c08:	f7f2 fbf8 	bl	100083fc <_sbrk>
10015c0c:	1c43      	adds	r3, r0, #1
10015c0e:	d103      	bne.n	10015c18 <_sbrk_r+0x1c>
10015c10:	6823      	ldr	r3, [r4, #0]
10015c12:	2b00      	cmp	r3, #0
10015c14:	d000      	beq.n	10015c18 <_sbrk_r+0x1c>
10015c16:	602b      	str	r3, [r5, #0]
10015c18:	bd70      	pop	{r4, r5, r6, pc}
10015c1a:	46c0      	nop			; (mov r8, r8)
10015c1c:	1001b658 	.word	0x1001b658

10015c20 <setbuf>:
10015c20:	424a      	negs	r2, r1
10015c22:	414a      	adcs	r2, r1
10015c24:	2380      	movs	r3, #128	; 0x80
10015c26:	b510      	push	{r4, lr}
10015c28:	0052      	lsls	r2, r2, #1
10015c2a:	00db      	lsls	r3, r3, #3
10015c2c:	f000 f802 	bl	10015c34 <setvbuf>
10015c30:	bd10      	pop	{r4, pc}
	...

10015c34 <setvbuf>:
10015c34:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c36:	001d      	movs	r5, r3
10015c38:	4b51      	ldr	r3, [pc, #324]	; (10015d80 <setvbuf+0x14c>)
10015c3a:	b085      	sub	sp, #20
10015c3c:	681e      	ldr	r6, [r3, #0]
10015c3e:	0004      	movs	r4, r0
10015c40:	000f      	movs	r7, r1
10015c42:	9200      	str	r2, [sp, #0]
10015c44:	2e00      	cmp	r6, #0
10015c46:	d005      	beq.n	10015c54 <setvbuf+0x20>
10015c48:	69b3      	ldr	r3, [r6, #24]
10015c4a:	2b00      	cmp	r3, #0
10015c4c:	d102      	bne.n	10015c54 <setvbuf+0x20>
10015c4e:	0030      	movs	r0, r6
10015c50:	f000 fa62 	bl	10016118 <__sinit>
10015c54:	4b4b      	ldr	r3, [pc, #300]	; (10015d84 <setvbuf+0x150>)
10015c56:	429c      	cmp	r4, r3
10015c58:	d101      	bne.n	10015c5e <setvbuf+0x2a>
10015c5a:	6874      	ldr	r4, [r6, #4]
10015c5c:	e008      	b.n	10015c70 <setvbuf+0x3c>
10015c5e:	4b4a      	ldr	r3, [pc, #296]	; (10015d88 <setvbuf+0x154>)
10015c60:	429c      	cmp	r4, r3
10015c62:	d101      	bne.n	10015c68 <setvbuf+0x34>
10015c64:	68b4      	ldr	r4, [r6, #8]
10015c66:	e003      	b.n	10015c70 <setvbuf+0x3c>
10015c68:	4b48      	ldr	r3, [pc, #288]	; (10015d8c <setvbuf+0x158>)
10015c6a:	429c      	cmp	r4, r3
10015c6c:	d100      	bne.n	10015c70 <setvbuf+0x3c>
10015c6e:	68f4      	ldr	r4, [r6, #12]
10015c70:	9b00      	ldr	r3, [sp, #0]
10015c72:	2b02      	cmp	r3, #2
10015c74:	d005      	beq.n	10015c82 <setvbuf+0x4e>
10015c76:	2b01      	cmp	r3, #1
10015c78:	d900      	bls.n	10015c7c <setvbuf+0x48>
10015c7a:	e07c      	b.n	10015d76 <setvbuf+0x142>
10015c7c:	2d00      	cmp	r5, #0
10015c7e:	da00      	bge.n	10015c82 <setvbuf+0x4e>
10015c80:	e079      	b.n	10015d76 <setvbuf+0x142>
10015c82:	0021      	movs	r1, r4
10015c84:	0030      	movs	r0, r6
10015c86:	f000 f9d9 	bl	1001603c <_fflush_r>
10015c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015c8c:	2900      	cmp	r1, #0
10015c8e:	d008      	beq.n	10015ca2 <setvbuf+0x6e>
10015c90:	0023      	movs	r3, r4
10015c92:	3344      	adds	r3, #68	; 0x44
10015c94:	4299      	cmp	r1, r3
10015c96:	d002      	beq.n	10015c9e <setvbuf+0x6a>
10015c98:	0030      	movs	r0, r6
10015c9a:	f7ff fe3d 	bl	10015918 <_free_r>
10015c9e:	2300      	movs	r3, #0
10015ca0:	6363      	str	r3, [r4, #52]	; 0x34
10015ca2:	2300      	movs	r3, #0
10015ca4:	61a3      	str	r3, [r4, #24]
10015ca6:	6063      	str	r3, [r4, #4]
10015ca8:	89a3      	ldrh	r3, [r4, #12]
10015caa:	061b      	lsls	r3, r3, #24
10015cac:	d503      	bpl.n	10015cb6 <setvbuf+0x82>
10015cae:	6921      	ldr	r1, [r4, #16]
10015cb0:	0030      	movs	r0, r6
10015cb2:	f7ff fe31 	bl	10015918 <_free_r>
10015cb6:	89a2      	ldrh	r2, [r4, #12]
10015cb8:	4b35      	ldr	r3, [pc, #212]	; (10015d90 <setvbuf+0x15c>)
10015cba:	4013      	ands	r3, r2
10015cbc:	81a3      	strh	r3, [r4, #12]
10015cbe:	9b00      	ldr	r3, [sp, #0]
10015cc0:	2b02      	cmp	r3, #2
10015cc2:	d021      	beq.n	10015d08 <setvbuf+0xd4>
10015cc4:	ab03      	add	r3, sp, #12
10015cc6:	aa02      	add	r2, sp, #8
10015cc8:	0021      	movs	r1, r4
10015cca:	0030      	movs	r0, r6
10015ccc:	f000 fab8 	bl	10016240 <__swhatbuf_r>
10015cd0:	89a3      	ldrh	r3, [r4, #12]
10015cd2:	4318      	orrs	r0, r3
10015cd4:	81a0      	strh	r0, [r4, #12]
10015cd6:	2d00      	cmp	r5, #0
10015cd8:	d101      	bne.n	10015cde <setvbuf+0xaa>
10015cda:	9d02      	ldr	r5, [sp, #8]
10015cdc:	e001      	b.n	10015ce2 <setvbuf+0xae>
10015cde:	2f00      	cmp	r7, #0
10015ce0:	d125      	bne.n	10015d2e <setvbuf+0xfa>
10015ce2:	0028      	movs	r0, r5
10015ce4:	f7ff fdee 	bl	100158c4 <malloc>
10015ce8:	9501      	str	r5, [sp, #4]
10015cea:	1e07      	subs	r7, r0, #0
10015cec:	d11a      	bne.n	10015d24 <setvbuf+0xf0>
10015cee:	9b02      	ldr	r3, [sp, #8]
10015cf0:	9301      	str	r3, [sp, #4]
10015cf2:	42ab      	cmp	r3, r5
10015cf4:	d102      	bne.n	10015cfc <setvbuf+0xc8>
10015cf6:	2001      	movs	r0, #1
10015cf8:	4240      	negs	r0, r0
10015cfa:	e006      	b.n	10015d0a <setvbuf+0xd6>
10015cfc:	9801      	ldr	r0, [sp, #4]
10015cfe:	f7ff fde1 	bl	100158c4 <malloc>
10015d02:	1e07      	subs	r7, r0, #0
10015d04:	d10e      	bne.n	10015d24 <setvbuf+0xf0>
10015d06:	e7f6      	b.n	10015cf6 <setvbuf+0xc2>
10015d08:	2000      	movs	r0, #0
10015d0a:	2202      	movs	r2, #2
10015d0c:	89a3      	ldrh	r3, [r4, #12]
10015d0e:	4313      	orrs	r3, r2
10015d10:	81a3      	strh	r3, [r4, #12]
10015d12:	2300      	movs	r3, #0
10015d14:	60a3      	str	r3, [r4, #8]
10015d16:	0023      	movs	r3, r4
10015d18:	3347      	adds	r3, #71	; 0x47
10015d1a:	6023      	str	r3, [r4, #0]
10015d1c:	6123      	str	r3, [r4, #16]
10015d1e:	2301      	movs	r3, #1
10015d20:	6163      	str	r3, [r4, #20]
10015d22:	e02a      	b.n	10015d7a <setvbuf+0x146>
10015d24:	2280      	movs	r2, #128	; 0x80
10015d26:	89a3      	ldrh	r3, [r4, #12]
10015d28:	9d01      	ldr	r5, [sp, #4]
10015d2a:	4313      	orrs	r3, r2
10015d2c:	81a3      	strh	r3, [r4, #12]
10015d2e:	69b3      	ldr	r3, [r6, #24]
10015d30:	2b00      	cmp	r3, #0
10015d32:	d102      	bne.n	10015d3a <setvbuf+0x106>
10015d34:	0030      	movs	r0, r6
10015d36:	f000 f9ef 	bl	10016118 <__sinit>
10015d3a:	9b00      	ldr	r3, [sp, #0]
10015d3c:	2b01      	cmp	r3, #1
10015d3e:	d103      	bne.n	10015d48 <setvbuf+0x114>
10015d40:	89a3      	ldrh	r3, [r4, #12]
10015d42:	9a00      	ldr	r2, [sp, #0]
10015d44:	431a      	orrs	r2, r3
10015d46:	81a2      	strh	r2, [r4, #12]
10015d48:	2308      	movs	r3, #8
10015d4a:	89a2      	ldrh	r2, [r4, #12]
10015d4c:	6027      	str	r7, [r4, #0]
10015d4e:	4013      	ands	r3, r2
10015d50:	6127      	str	r7, [r4, #16]
10015d52:	6165      	str	r5, [r4, #20]
10015d54:	1e18      	subs	r0, r3, #0
10015d56:	d00c      	beq.n	10015d72 <setvbuf+0x13e>
10015d58:	2301      	movs	r3, #1
10015d5a:	401a      	ands	r2, r3
10015d5c:	2300      	movs	r3, #0
10015d5e:	1e10      	subs	r0, r2, #0
10015d60:	4298      	cmp	r0, r3
10015d62:	d004      	beq.n	10015d6e <setvbuf+0x13a>
10015d64:	426d      	negs	r5, r5
10015d66:	60a3      	str	r3, [r4, #8]
10015d68:	61a5      	str	r5, [r4, #24]
10015d6a:	0018      	movs	r0, r3
10015d6c:	e005      	b.n	10015d7a <setvbuf+0x146>
10015d6e:	60a5      	str	r5, [r4, #8]
10015d70:	e003      	b.n	10015d7a <setvbuf+0x146>
10015d72:	60a3      	str	r3, [r4, #8]
10015d74:	e001      	b.n	10015d7a <setvbuf+0x146>
10015d76:	2001      	movs	r0, #1
10015d78:	4240      	negs	r0, r0
10015d7a:	b005      	add	sp, #20
10015d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d7e:	46c0      	nop			; (mov r8, r8)
10015d80:	10018768 	.word	0x10018768
10015d84:	10018648 	.word	0x10018648
10015d88:	10018668 	.word	0x10018668
10015d8c:	10018688 	.word	0x10018688
10015d90:	fffff35c 	.word	0xfffff35c

10015d94 <__swbuf_r>:
10015d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015d96:	0005      	movs	r5, r0
10015d98:	000f      	movs	r7, r1
10015d9a:	0014      	movs	r4, r2
10015d9c:	2800      	cmp	r0, #0
10015d9e:	d004      	beq.n	10015daa <__swbuf_r+0x16>
10015da0:	6983      	ldr	r3, [r0, #24]
10015da2:	2b00      	cmp	r3, #0
10015da4:	d101      	bne.n	10015daa <__swbuf_r+0x16>
10015da6:	f000 f9b7 	bl	10016118 <__sinit>
10015daa:	4b23      	ldr	r3, [pc, #140]	; (10015e38 <__swbuf_r+0xa4>)
10015dac:	429c      	cmp	r4, r3
10015dae:	d101      	bne.n	10015db4 <__swbuf_r+0x20>
10015db0:	686c      	ldr	r4, [r5, #4]
10015db2:	e008      	b.n	10015dc6 <__swbuf_r+0x32>
10015db4:	4b21      	ldr	r3, [pc, #132]	; (10015e3c <__swbuf_r+0xa8>)
10015db6:	429c      	cmp	r4, r3
10015db8:	d101      	bne.n	10015dbe <__swbuf_r+0x2a>
10015dba:	68ac      	ldr	r4, [r5, #8]
10015dbc:	e003      	b.n	10015dc6 <__swbuf_r+0x32>
10015dbe:	4b20      	ldr	r3, [pc, #128]	; (10015e40 <__swbuf_r+0xac>)
10015dc0:	429c      	cmp	r4, r3
10015dc2:	d100      	bne.n	10015dc6 <__swbuf_r+0x32>
10015dc4:	68ec      	ldr	r4, [r5, #12]
10015dc6:	69a3      	ldr	r3, [r4, #24]
10015dc8:	60a3      	str	r3, [r4, #8]
10015dca:	89a3      	ldrh	r3, [r4, #12]
10015dcc:	071b      	lsls	r3, r3, #28
10015dce:	d50a      	bpl.n	10015de6 <__swbuf_r+0x52>
10015dd0:	6923      	ldr	r3, [r4, #16]
10015dd2:	2b00      	cmp	r3, #0
10015dd4:	d007      	beq.n	10015de6 <__swbuf_r+0x52>
10015dd6:	6823      	ldr	r3, [r4, #0]
10015dd8:	6922      	ldr	r2, [r4, #16]
10015dda:	b2fe      	uxtb	r6, r7
10015ddc:	1a98      	subs	r0, r3, r2
10015dde:	6963      	ldr	r3, [r4, #20]
10015de0:	4298      	cmp	r0, r3
10015de2:	db0f      	blt.n	10015e04 <__swbuf_r+0x70>
10015de4:	e008      	b.n	10015df8 <__swbuf_r+0x64>
10015de6:	0021      	movs	r1, r4
10015de8:	0028      	movs	r0, r5
10015dea:	f000 f82b 	bl	10015e44 <__swsetup_r>
10015dee:	2800      	cmp	r0, #0
10015df0:	d0f1      	beq.n	10015dd6 <__swbuf_r+0x42>
10015df2:	2001      	movs	r0, #1
10015df4:	4240      	negs	r0, r0
10015df6:	e01d      	b.n	10015e34 <__swbuf_r+0xa0>
10015df8:	0021      	movs	r1, r4
10015dfa:	0028      	movs	r0, r5
10015dfc:	f000 f91e 	bl	1001603c <_fflush_r>
10015e00:	2800      	cmp	r0, #0
10015e02:	d1f6      	bne.n	10015df2 <__swbuf_r+0x5e>
10015e04:	68a3      	ldr	r3, [r4, #8]
10015e06:	3001      	adds	r0, #1
10015e08:	3b01      	subs	r3, #1
10015e0a:	60a3      	str	r3, [r4, #8]
10015e0c:	6823      	ldr	r3, [r4, #0]
10015e0e:	1c5a      	adds	r2, r3, #1
10015e10:	6022      	str	r2, [r4, #0]
10015e12:	701f      	strb	r7, [r3, #0]
10015e14:	6963      	ldr	r3, [r4, #20]
10015e16:	4298      	cmp	r0, r3
10015e18:	d005      	beq.n	10015e26 <__swbuf_r+0x92>
10015e1a:	89a3      	ldrh	r3, [r4, #12]
10015e1c:	0030      	movs	r0, r6
10015e1e:	07db      	lsls	r3, r3, #31
10015e20:	d508      	bpl.n	10015e34 <__swbuf_r+0xa0>
10015e22:	2e0a      	cmp	r6, #10
10015e24:	d106      	bne.n	10015e34 <__swbuf_r+0xa0>
10015e26:	0021      	movs	r1, r4
10015e28:	0028      	movs	r0, r5
10015e2a:	f000 f907 	bl	1001603c <_fflush_r>
10015e2e:	2800      	cmp	r0, #0
10015e30:	d1df      	bne.n	10015df2 <__swbuf_r+0x5e>
10015e32:	0030      	movs	r0, r6
10015e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015e36:	46c0      	nop			; (mov r8, r8)
10015e38:	10018648 	.word	0x10018648
10015e3c:	10018668 	.word	0x10018668
10015e40:	10018688 	.word	0x10018688

10015e44 <__swsetup_r>:
10015e44:	4b36      	ldr	r3, [pc, #216]	; (10015f20 <__swsetup_r+0xdc>)
10015e46:	b570      	push	{r4, r5, r6, lr}
10015e48:	681d      	ldr	r5, [r3, #0]
10015e4a:	0006      	movs	r6, r0
10015e4c:	000c      	movs	r4, r1
10015e4e:	2d00      	cmp	r5, #0
10015e50:	d005      	beq.n	10015e5e <__swsetup_r+0x1a>
10015e52:	69ab      	ldr	r3, [r5, #24]
10015e54:	2b00      	cmp	r3, #0
10015e56:	d102      	bne.n	10015e5e <__swsetup_r+0x1a>
10015e58:	0028      	movs	r0, r5
10015e5a:	f000 f95d 	bl	10016118 <__sinit>
10015e5e:	4b31      	ldr	r3, [pc, #196]	; (10015f24 <__swsetup_r+0xe0>)
10015e60:	429c      	cmp	r4, r3
10015e62:	d101      	bne.n	10015e68 <__swsetup_r+0x24>
10015e64:	686c      	ldr	r4, [r5, #4]
10015e66:	e008      	b.n	10015e7a <__swsetup_r+0x36>
10015e68:	4b2f      	ldr	r3, [pc, #188]	; (10015f28 <__swsetup_r+0xe4>)
10015e6a:	429c      	cmp	r4, r3
10015e6c:	d101      	bne.n	10015e72 <__swsetup_r+0x2e>
10015e6e:	68ac      	ldr	r4, [r5, #8]
10015e70:	e003      	b.n	10015e7a <__swsetup_r+0x36>
10015e72:	4b2e      	ldr	r3, [pc, #184]	; (10015f2c <__swsetup_r+0xe8>)
10015e74:	429c      	cmp	r4, r3
10015e76:	d100      	bne.n	10015e7a <__swsetup_r+0x36>
10015e78:	68ec      	ldr	r4, [r5, #12]
10015e7a:	220c      	movs	r2, #12
10015e7c:	5ea3      	ldrsh	r3, [r4, r2]
10015e7e:	b29a      	uxth	r2, r3
10015e80:	0711      	lsls	r1, r2, #28
10015e82:	d423      	bmi.n	10015ecc <__swsetup_r+0x88>
10015e84:	06d1      	lsls	r1, r2, #27
10015e86:	d407      	bmi.n	10015e98 <__swsetup_r+0x54>
10015e88:	2209      	movs	r2, #9
10015e8a:	2001      	movs	r0, #1
10015e8c:	6032      	str	r2, [r6, #0]
10015e8e:	3237      	adds	r2, #55	; 0x37
10015e90:	4313      	orrs	r3, r2
10015e92:	81a3      	strh	r3, [r4, #12]
10015e94:	4240      	negs	r0, r0
10015e96:	e042      	b.n	10015f1e <__swsetup_r+0xda>
10015e98:	0753      	lsls	r3, r2, #29
10015e9a:	d513      	bpl.n	10015ec4 <__swsetup_r+0x80>
10015e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015e9e:	2900      	cmp	r1, #0
10015ea0:	d008      	beq.n	10015eb4 <__swsetup_r+0x70>
10015ea2:	0023      	movs	r3, r4
10015ea4:	3344      	adds	r3, #68	; 0x44
10015ea6:	4299      	cmp	r1, r3
10015ea8:	d002      	beq.n	10015eb0 <__swsetup_r+0x6c>
10015eaa:	0030      	movs	r0, r6
10015eac:	f7ff fd34 	bl	10015918 <_free_r>
10015eb0:	2300      	movs	r3, #0
10015eb2:	6363      	str	r3, [r4, #52]	; 0x34
10015eb4:	2224      	movs	r2, #36	; 0x24
10015eb6:	89a3      	ldrh	r3, [r4, #12]
10015eb8:	4393      	bics	r3, r2
10015eba:	81a3      	strh	r3, [r4, #12]
10015ebc:	2300      	movs	r3, #0
10015ebe:	6063      	str	r3, [r4, #4]
10015ec0:	6923      	ldr	r3, [r4, #16]
10015ec2:	6023      	str	r3, [r4, #0]
10015ec4:	2208      	movs	r2, #8
10015ec6:	89a3      	ldrh	r3, [r4, #12]
10015ec8:	4313      	orrs	r3, r2
10015eca:	81a3      	strh	r3, [r4, #12]
10015ecc:	6923      	ldr	r3, [r4, #16]
10015ece:	2b00      	cmp	r3, #0
10015ed0:	d10b      	bne.n	10015eea <__swsetup_r+0xa6>
10015ed2:	23a0      	movs	r3, #160	; 0xa0
10015ed4:	89a2      	ldrh	r2, [r4, #12]
10015ed6:	009b      	lsls	r3, r3, #2
10015ed8:	4013      	ands	r3, r2
10015eda:	2280      	movs	r2, #128	; 0x80
10015edc:	0092      	lsls	r2, r2, #2
10015ede:	4293      	cmp	r3, r2
10015ee0:	d003      	beq.n	10015eea <__swsetup_r+0xa6>
10015ee2:	0021      	movs	r1, r4
10015ee4:	0030      	movs	r0, r6
10015ee6:	f000 f9d1 	bl	1001628c <__smakebuf_r>
10015eea:	2301      	movs	r3, #1
10015eec:	89a2      	ldrh	r2, [r4, #12]
10015eee:	4013      	ands	r3, r2
10015ef0:	d005      	beq.n	10015efe <__swsetup_r+0xba>
10015ef2:	2300      	movs	r3, #0
10015ef4:	60a3      	str	r3, [r4, #8]
10015ef6:	6963      	ldr	r3, [r4, #20]
10015ef8:	425b      	negs	r3, r3
10015efa:	61a3      	str	r3, [r4, #24]
10015efc:	e003      	b.n	10015f06 <__swsetup_r+0xc2>
10015efe:	0792      	lsls	r2, r2, #30
10015f00:	d400      	bmi.n	10015f04 <__swsetup_r+0xc0>
10015f02:	6963      	ldr	r3, [r4, #20]
10015f04:	60a3      	str	r3, [r4, #8]
10015f06:	2000      	movs	r0, #0
10015f08:	6923      	ldr	r3, [r4, #16]
10015f0a:	4283      	cmp	r3, r0
10015f0c:	d107      	bne.n	10015f1e <__swsetup_r+0xda>
10015f0e:	220c      	movs	r2, #12
10015f10:	5ea3      	ldrsh	r3, [r4, r2]
10015f12:	061a      	lsls	r2, r3, #24
10015f14:	d503      	bpl.n	10015f1e <__swsetup_r+0xda>
10015f16:	2240      	movs	r2, #64	; 0x40
10015f18:	4313      	orrs	r3, r2
10015f1a:	81a3      	strh	r3, [r4, #12]
10015f1c:	3801      	subs	r0, #1
10015f1e:	bd70      	pop	{r4, r5, r6, pc}
10015f20:	10018768 	.word	0x10018768
10015f24:	10018648 	.word	0x10018648
10015f28:	10018668 	.word	0x10018668
10015f2c:	10018688 	.word	0x10018688

10015f30 <__sflush_r>:
10015f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015f32:	898a      	ldrh	r2, [r1, #12]
10015f34:	0005      	movs	r5, r0
10015f36:	000c      	movs	r4, r1
10015f38:	0713      	lsls	r3, r2, #28
10015f3a:	d45a      	bmi.n	10015ff2 <__sflush_r+0xc2>
10015f3c:	684b      	ldr	r3, [r1, #4]
10015f3e:	2b00      	cmp	r3, #0
10015f40:	dc02      	bgt.n	10015f48 <__sflush_r+0x18>
10015f42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015f44:	2b00      	cmp	r3, #0
10015f46:	dd19      	ble.n	10015f7c <__sflush_r+0x4c>
10015f48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015f4a:	2f00      	cmp	r7, #0
10015f4c:	d016      	beq.n	10015f7c <__sflush_r+0x4c>
10015f4e:	2300      	movs	r3, #0
10015f50:	682e      	ldr	r6, [r5, #0]
10015f52:	602b      	str	r3, [r5, #0]
10015f54:	2380      	movs	r3, #128	; 0x80
10015f56:	015b      	lsls	r3, r3, #5
10015f58:	401a      	ands	r2, r3
10015f5a:	d001      	beq.n	10015f60 <__sflush_r+0x30>
10015f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015f5e:	e014      	b.n	10015f8a <__sflush_r+0x5a>
10015f60:	2301      	movs	r3, #1
10015f62:	6a21      	ldr	r1, [r4, #32]
10015f64:	0028      	movs	r0, r5
10015f66:	47b8      	blx	r7
10015f68:	1c43      	adds	r3, r0, #1
10015f6a:	d10e      	bne.n	10015f8a <__sflush_r+0x5a>
10015f6c:	682b      	ldr	r3, [r5, #0]
10015f6e:	2b00      	cmp	r3, #0
10015f70:	d00b      	beq.n	10015f8a <__sflush_r+0x5a>
10015f72:	2b1d      	cmp	r3, #29
10015f74:	d001      	beq.n	10015f7a <__sflush_r+0x4a>
10015f76:	2b16      	cmp	r3, #22
10015f78:	d102      	bne.n	10015f80 <__sflush_r+0x50>
10015f7a:	602e      	str	r6, [r5, #0]
10015f7c:	2000      	movs	r0, #0
10015f7e:	e05a      	b.n	10016036 <__sflush_r+0x106>
10015f80:	2240      	movs	r2, #64	; 0x40
10015f82:	89a3      	ldrh	r3, [r4, #12]
10015f84:	4313      	orrs	r3, r2
10015f86:	81a3      	strh	r3, [r4, #12]
10015f88:	e055      	b.n	10016036 <__sflush_r+0x106>
10015f8a:	89a3      	ldrh	r3, [r4, #12]
10015f8c:	075b      	lsls	r3, r3, #29
10015f8e:	d506      	bpl.n	10015f9e <__sflush_r+0x6e>
10015f90:	6863      	ldr	r3, [r4, #4]
10015f92:	1ac0      	subs	r0, r0, r3
10015f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015f96:	2b00      	cmp	r3, #0
10015f98:	d001      	beq.n	10015f9e <__sflush_r+0x6e>
10015f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015f9c:	1ac0      	subs	r0, r0, r3
10015f9e:	2300      	movs	r3, #0
10015fa0:	0002      	movs	r2, r0
10015fa2:	6a21      	ldr	r1, [r4, #32]
10015fa4:	0028      	movs	r0, r5
10015fa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015fa8:	47b8      	blx	r7
10015faa:	89a3      	ldrh	r3, [r4, #12]
10015fac:	1c42      	adds	r2, r0, #1
10015fae:	d106      	bne.n	10015fbe <__sflush_r+0x8e>
10015fb0:	6829      	ldr	r1, [r5, #0]
10015fb2:	291d      	cmp	r1, #29
10015fb4:	d83a      	bhi.n	1001602c <__sflush_r+0xfc>
10015fb6:	4a20      	ldr	r2, [pc, #128]	; (10016038 <__sflush_r+0x108>)
10015fb8:	40ca      	lsrs	r2, r1
10015fba:	07d2      	lsls	r2, r2, #31
10015fbc:	d536      	bpl.n	1001602c <__sflush_r+0xfc>
10015fbe:	2200      	movs	r2, #0
10015fc0:	6062      	str	r2, [r4, #4]
10015fc2:	6922      	ldr	r2, [r4, #16]
10015fc4:	6022      	str	r2, [r4, #0]
10015fc6:	04db      	lsls	r3, r3, #19
10015fc8:	d505      	bpl.n	10015fd6 <__sflush_r+0xa6>
10015fca:	1c43      	adds	r3, r0, #1
10015fcc:	d102      	bne.n	10015fd4 <__sflush_r+0xa4>
10015fce:	682b      	ldr	r3, [r5, #0]
10015fd0:	2b00      	cmp	r3, #0
10015fd2:	d100      	bne.n	10015fd6 <__sflush_r+0xa6>
10015fd4:	6560      	str	r0, [r4, #84]	; 0x54
10015fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015fd8:	602e      	str	r6, [r5, #0]
10015fda:	2900      	cmp	r1, #0
10015fdc:	d0ce      	beq.n	10015f7c <__sflush_r+0x4c>
10015fde:	0023      	movs	r3, r4
10015fe0:	3344      	adds	r3, #68	; 0x44
10015fe2:	4299      	cmp	r1, r3
10015fe4:	d002      	beq.n	10015fec <__sflush_r+0xbc>
10015fe6:	0028      	movs	r0, r5
10015fe8:	f7ff fc96 	bl	10015918 <_free_r>
10015fec:	2000      	movs	r0, #0
10015fee:	6360      	str	r0, [r4, #52]	; 0x34
10015ff0:	e021      	b.n	10016036 <__sflush_r+0x106>
10015ff2:	690f      	ldr	r7, [r1, #16]
10015ff4:	2f00      	cmp	r7, #0
10015ff6:	d0c1      	beq.n	10015f7c <__sflush_r+0x4c>
10015ff8:	680b      	ldr	r3, [r1, #0]
10015ffa:	600f      	str	r7, [r1, #0]
10015ffc:	1bdb      	subs	r3, r3, r7
10015ffe:	9301      	str	r3, [sp, #4]
10016000:	2300      	movs	r3, #0
10016002:	0792      	lsls	r2, r2, #30
10016004:	d100      	bne.n	10016008 <__sflush_r+0xd8>
10016006:	694b      	ldr	r3, [r1, #20]
10016008:	60a3      	str	r3, [r4, #8]
1001600a:	e003      	b.n	10016014 <__sflush_r+0xe4>
1001600c:	9b01      	ldr	r3, [sp, #4]
1001600e:	183f      	adds	r7, r7, r0
10016010:	1a1b      	subs	r3, r3, r0
10016012:	9301      	str	r3, [sp, #4]
10016014:	9b01      	ldr	r3, [sp, #4]
10016016:	2b00      	cmp	r3, #0
10016018:	ddb0      	ble.n	10015f7c <__sflush_r+0x4c>
1001601a:	9b01      	ldr	r3, [sp, #4]
1001601c:	003a      	movs	r2, r7
1001601e:	6a21      	ldr	r1, [r4, #32]
10016020:	0028      	movs	r0, r5
10016022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016024:	47b0      	blx	r6
10016026:	2800      	cmp	r0, #0
10016028:	dcf0      	bgt.n	1001600c <__sflush_r+0xdc>
1001602a:	89a3      	ldrh	r3, [r4, #12]
1001602c:	2240      	movs	r2, #64	; 0x40
1001602e:	2001      	movs	r0, #1
10016030:	4313      	orrs	r3, r2
10016032:	81a3      	strh	r3, [r4, #12]
10016034:	4240      	negs	r0, r0
10016036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016038:	20400001 	.word	0x20400001

1001603c <_fflush_r>:
1001603c:	690b      	ldr	r3, [r1, #16]
1001603e:	b570      	push	{r4, r5, r6, lr}
10016040:	0005      	movs	r5, r0
10016042:	000c      	movs	r4, r1
10016044:	2b00      	cmp	r3, #0
10016046:	d101      	bne.n	1001604c <_fflush_r+0x10>
10016048:	2000      	movs	r0, #0
1001604a:	e01c      	b.n	10016086 <_fflush_r+0x4a>
1001604c:	2800      	cmp	r0, #0
1001604e:	d004      	beq.n	1001605a <_fflush_r+0x1e>
10016050:	6983      	ldr	r3, [r0, #24]
10016052:	2b00      	cmp	r3, #0
10016054:	d101      	bne.n	1001605a <_fflush_r+0x1e>
10016056:	f000 f85f 	bl	10016118 <__sinit>
1001605a:	4b0b      	ldr	r3, [pc, #44]	; (10016088 <_fflush_r+0x4c>)
1001605c:	429c      	cmp	r4, r3
1001605e:	d101      	bne.n	10016064 <_fflush_r+0x28>
10016060:	686c      	ldr	r4, [r5, #4]
10016062:	e008      	b.n	10016076 <_fflush_r+0x3a>
10016064:	4b09      	ldr	r3, [pc, #36]	; (1001608c <_fflush_r+0x50>)
10016066:	429c      	cmp	r4, r3
10016068:	d101      	bne.n	1001606e <_fflush_r+0x32>
1001606a:	68ac      	ldr	r4, [r5, #8]
1001606c:	e003      	b.n	10016076 <_fflush_r+0x3a>
1001606e:	4b08      	ldr	r3, [pc, #32]	; (10016090 <_fflush_r+0x54>)
10016070:	429c      	cmp	r4, r3
10016072:	d100      	bne.n	10016076 <_fflush_r+0x3a>
10016074:	68ec      	ldr	r4, [r5, #12]
10016076:	220c      	movs	r2, #12
10016078:	5ea3      	ldrsh	r3, [r4, r2]
1001607a:	2b00      	cmp	r3, #0
1001607c:	d0e4      	beq.n	10016048 <_fflush_r+0xc>
1001607e:	0021      	movs	r1, r4
10016080:	0028      	movs	r0, r5
10016082:	f7ff ff55 	bl	10015f30 <__sflush_r>
10016086:	bd70      	pop	{r4, r5, r6, pc}
10016088:	10018648 	.word	0x10018648
1001608c:	10018668 	.word	0x10018668
10016090:	10018688 	.word	0x10018688

10016094 <_cleanup_r>:
10016094:	b510      	push	{r4, lr}
10016096:	4902      	ldr	r1, [pc, #8]	; (100160a0 <_cleanup_r+0xc>)
10016098:	f000 f8b0 	bl	100161fc <_fwalk_reent>
1001609c:	bd10      	pop	{r4, pc}
1001609e:	46c0      	nop			; (mov r8, r8)
100160a0:	1001603d 	.word	0x1001603d

100160a4 <std.isra.0>:
100160a4:	2300      	movs	r3, #0
100160a6:	b510      	push	{r4, lr}
100160a8:	0004      	movs	r4, r0
100160aa:	6003      	str	r3, [r0, #0]
100160ac:	6043      	str	r3, [r0, #4]
100160ae:	6083      	str	r3, [r0, #8]
100160b0:	8181      	strh	r1, [r0, #12]
100160b2:	6643      	str	r3, [r0, #100]	; 0x64
100160b4:	81c2      	strh	r2, [r0, #14]
100160b6:	6103      	str	r3, [r0, #16]
100160b8:	6143      	str	r3, [r0, #20]
100160ba:	6183      	str	r3, [r0, #24]
100160bc:	0019      	movs	r1, r3
100160be:	2208      	movs	r2, #8
100160c0:	305c      	adds	r0, #92	; 0x5c
100160c2:	f7ff fc21 	bl	10015908 <memset>
100160c6:	4b05      	ldr	r3, [pc, #20]	; (100160dc <std.isra.0+0x38>)
100160c8:	6224      	str	r4, [r4, #32]
100160ca:	6263      	str	r3, [r4, #36]	; 0x24
100160cc:	4b04      	ldr	r3, [pc, #16]	; (100160e0 <std.isra.0+0x3c>)
100160ce:	62a3      	str	r3, [r4, #40]	; 0x28
100160d0:	4b04      	ldr	r3, [pc, #16]	; (100160e4 <std.isra.0+0x40>)
100160d2:	62e3      	str	r3, [r4, #44]	; 0x2c
100160d4:	4b04      	ldr	r3, [pc, #16]	; (100160e8 <std.isra.0+0x44>)
100160d6:	6323      	str	r3, [r4, #48]	; 0x30
100160d8:	bd10      	pop	{r4, pc}
100160da:	46c0      	nop			; (mov r8, r8)
100160dc:	1001691d 	.word	0x1001691d
100160e0:	10016945 	.word	0x10016945
100160e4:	1001697d 	.word	0x1001697d
100160e8:	100169a9 	.word	0x100169a9

100160ec <__sfmoreglue>:
100160ec:	b570      	push	{r4, r5, r6, lr}
100160ee:	2568      	movs	r5, #104	; 0x68
100160f0:	1e4b      	subs	r3, r1, #1
100160f2:	435d      	muls	r5, r3
100160f4:	000e      	movs	r6, r1
100160f6:	0029      	movs	r1, r5
100160f8:	3174      	adds	r1, #116	; 0x74
100160fa:	f7ff fc53 	bl	100159a4 <_malloc_r>
100160fe:	1e04      	subs	r4, r0, #0
10016100:	d008      	beq.n	10016114 <__sfmoreglue+0x28>
10016102:	2100      	movs	r1, #0
10016104:	002a      	movs	r2, r5
10016106:	6001      	str	r1, [r0, #0]
10016108:	6046      	str	r6, [r0, #4]
1001610a:	300c      	adds	r0, #12
1001610c:	60a0      	str	r0, [r4, #8]
1001610e:	3268      	adds	r2, #104	; 0x68
10016110:	f7ff fbfa 	bl	10015908 <memset>
10016114:	0020      	movs	r0, r4
10016116:	bd70      	pop	{r4, r5, r6, pc}

10016118 <__sinit>:
10016118:	6983      	ldr	r3, [r0, #24]
1001611a:	b513      	push	{r0, r1, r4, lr}
1001611c:	0004      	movs	r4, r0
1001611e:	2b00      	cmp	r3, #0
10016120:	d128      	bne.n	10016174 <__sinit+0x5c>
10016122:	6483      	str	r3, [r0, #72]	; 0x48
10016124:	64c3      	str	r3, [r0, #76]	; 0x4c
10016126:	6503      	str	r3, [r0, #80]	; 0x50
10016128:	4b13      	ldr	r3, [pc, #76]	; (10016178 <__sinit+0x60>)
1001612a:	4a14      	ldr	r2, [pc, #80]	; (1001617c <__sinit+0x64>)
1001612c:	681b      	ldr	r3, [r3, #0]
1001612e:	6282      	str	r2, [r0, #40]	; 0x28
10016130:	9301      	str	r3, [sp, #4]
10016132:	4298      	cmp	r0, r3
10016134:	d101      	bne.n	1001613a <__sinit+0x22>
10016136:	2301      	movs	r3, #1
10016138:	6183      	str	r3, [r0, #24]
1001613a:	0020      	movs	r0, r4
1001613c:	f000 f820 	bl	10016180 <__sfp>
10016140:	6060      	str	r0, [r4, #4]
10016142:	0020      	movs	r0, r4
10016144:	f000 f81c 	bl	10016180 <__sfp>
10016148:	60a0      	str	r0, [r4, #8]
1001614a:	0020      	movs	r0, r4
1001614c:	f000 f818 	bl	10016180 <__sfp>
10016150:	2200      	movs	r2, #0
10016152:	60e0      	str	r0, [r4, #12]
10016154:	2104      	movs	r1, #4
10016156:	6860      	ldr	r0, [r4, #4]
10016158:	f7ff ffa4 	bl	100160a4 <std.isra.0>
1001615c:	2201      	movs	r2, #1
1001615e:	2109      	movs	r1, #9
10016160:	68a0      	ldr	r0, [r4, #8]
10016162:	f7ff ff9f 	bl	100160a4 <std.isra.0>
10016166:	2202      	movs	r2, #2
10016168:	2112      	movs	r1, #18
1001616a:	68e0      	ldr	r0, [r4, #12]
1001616c:	f7ff ff9a 	bl	100160a4 <std.isra.0>
10016170:	2301      	movs	r3, #1
10016172:	61a3      	str	r3, [r4, #24]
10016174:	bd13      	pop	{r0, r1, r4, pc}
10016176:	46c0      	nop			; (mov r8, r8)
10016178:	10018644 	.word	0x10018644
1001617c:	10016095 	.word	0x10016095

10016180 <__sfp>:
10016180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016182:	4b1d      	ldr	r3, [pc, #116]	; (100161f8 <__sfp+0x78>)
10016184:	0006      	movs	r6, r0
10016186:	681d      	ldr	r5, [r3, #0]
10016188:	69ab      	ldr	r3, [r5, #24]
1001618a:	2b00      	cmp	r3, #0
1001618c:	d102      	bne.n	10016194 <__sfp+0x14>
1001618e:	0028      	movs	r0, r5
10016190:	f7ff ffc2 	bl	10016118 <__sinit>
10016194:	3548      	adds	r5, #72	; 0x48
10016196:	68ac      	ldr	r4, [r5, #8]
10016198:	686b      	ldr	r3, [r5, #4]
1001619a:	3b01      	subs	r3, #1
1001619c:	d405      	bmi.n	100161aa <__sfp+0x2a>
1001619e:	220c      	movs	r2, #12
100161a0:	5ea7      	ldrsh	r7, [r4, r2]
100161a2:	2f00      	cmp	r7, #0
100161a4:	d010      	beq.n	100161c8 <__sfp+0x48>
100161a6:	3468      	adds	r4, #104	; 0x68
100161a8:	e7f7      	b.n	1001619a <__sfp+0x1a>
100161aa:	682b      	ldr	r3, [r5, #0]
100161ac:	2b00      	cmp	r3, #0
100161ae:	d001      	beq.n	100161b4 <__sfp+0x34>
100161b0:	682d      	ldr	r5, [r5, #0]
100161b2:	e7f0      	b.n	10016196 <__sfp+0x16>
100161b4:	2104      	movs	r1, #4
100161b6:	0030      	movs	r0, r6
100161b8:	f7ff ff98 	bl	100160ec <__sfmoreglue>
100161bc:	6028      	str	r0, [r5, #0]
100161be:	2800      	cmp	r0, #0
100161c0:	d1f6      	bne.n	100161b0 <__sfp+0x30>
100161c2:	230c      	movs	r3, #12
100161c4:	6033      	str	r3, [r6, #0]
100161c6:	e016      	b.n	100161f6 <__sfp+0x76>
100161c8:	2301      	movs	r3, #1
100161ca:	0020      	movs	r0, r4
100161cc:	425b      	negs	r3, r3
100161ce:	81e3      	strh	r3, [r4, #14]
100161d0:	3302      	adds	r3, #2
100161d2:	81a3      	strh	r3, [r4, #12]
100161d4:	6667      	str	r7, [r4, #100]	; 0x64
100161d6:	6027      	str	r7, [r4, #0]
100161d8:	60a7      	str	r7, [r4, #8]
100161da:	6067      	str	r7, [r4, #4]
100161dc:	6127      	str	r7, [r4, #16]
100161de:	6167      	str	r7, [r4, #20]
100161e0:	61a7      	str	r7, [r4, #24]
100161e2:	305c      	adds	r0, #92	; 0x5c
100161e4:	2208      	movs	r2, #8
100161e6:	0039      	movs	r1, r7
100161e8:	f7ff fb8e 	bl	10015908 <memset>
100161ec:	0020      	movs	r0, r4
100161ee:	6367      	str	r7, [r4, #52]	; 0x34
100161f0:	63a7      	str	r7, [r4, #56]	; 0x38
100161f2:	64a7      	str	r7, [r4, #72]	; 0x48
100161f4:	64e7      	str	r7, [r4, #76]	; 0x4c
100161f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100161f8:	10018644 	.word	0x10018644

100161fc <_fwalk_reent>:
100161fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100161fe:	0004      	movs	r4, r0
10016200:	0007      	movs	r7, r0
10016202:	2600      	movs	r6, #0
10016204:	9101      	str	r1, [sp, #4]
10016206:	3448      	adds	r4, #72	; 0x48
10016208:	2c00      	cmp	r4, #0
1001620a:	d016      	beq.n	1001623a <_fwalk_reent+0x3e>
1001620c:	6863      	ldr	r3, [r4, #4]
1001620e:	68a5      	ldr	r5, [r4, #8]
10016210:	9300      	str	r3, [sp, #0]
10016212:	9b00      	ldr	r3, [sp, #0]
10016214:	3b01      	subs	r3, #1
10016216:	9300      	str	r3, [sp, #0]
10016218:	d40d      	bmi.n	10016236 <_fwalk_reent+0x3a>
1001621a:	89ab      	ldrh	r3, [r5, #12]
1001621c:	2b01      	cmp	r3, #1
1001621e:	d908      	bls.n	10016232 <_fwalk_reent+0x36>
10016220:	220e      	movs	r2, #14
10016222:	5eab      	ldrsh	r3, [r5, r2]
10016224:	3301      	adds	r3, #1
10016226:	d004      	beq.n	10016232 <_fwalk_reent+0x36>
10016228:	0029      	movs	r1, r5
1001622a:	0038      	movs	r0, r7
1001622c:	9b01      	ldr	r3, [sp, #4]
1001622e:	4798      	blx	r3
10016230:	4306      	orrs	r6, r0
10016232:	3568      	adds	r5, #104	; 0x68
10016234:	e7ed      	b.n	10016212 <_fwalk_reent+0x16>
10016236:	6824      	ldr	r4, [r4, #0]
10016238:	e7e6      	b.n	10016208 <_fwalk_reent+0xc>
1001623a:	0030      	movs	r0, r6
1001623c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016240 <__swhatbuf_r>:
10016240:	b570      	push	{r4, r5, r6, lr}
10016242:	000e      	movs	r6, r1
10016244:	001d      	movs	r5, r3
10016246:	230e      	movs	r3, #14
10016248:	5ec9      	ldrsh	r1, [r1, r3]
1001624a:	b090      	sub	sp, #64	; 0x40
1001624c:	0014      	movs	r4, r2
1001624e:	2900      	cmp	r1, #0
10016250:	da06      	bge.n	10016260 <__swhatbuf_r+0x20>
10016252:	2300      	movs	r3, #0
10016254:	602b      	str	r3, [r5, #0]
10016256:	89b3      	ldrh	r3, [r6, #12]
10016258:	061b      	lsls	r3, r3, #24
1001625a:	d50f      	bpl.n	1001627c <__swhatbuf_r+0x3c>
1001625c:	2340      	movs	r3, #64	; 0x40
1001625e:	e00f      	b.n	10016280 <__swhatbuf_r+0x40>
10016260:	aa01      	add	r2, sp, #4
10016262:	f000 fbcd 	bl	10016a00 <_fstat_r>
10016266:	2800      	cmp	r0, #0
10016268:	dbf3      	blt.n	10016252 <__swhatbuf_r+0x12>
1001626a:	23f0      	movs	r3, #240	; 0xf0
1001626c:	9a02      	ldr	r2, [sp, #8]
1001626e:	021b      	lsls	r3, r3, #8
10016270:	4013      	ands	r3, r2
10016272:	4a05      	ldr	r2, [pc, #20]	; (10016288 <__swhatbuf_r+0x48>)
10016274:	189b      	adds	r3, r3, r2
10016276:	425a      	negs	r2, r3
10016278:	4153      	adcs	r3, r2
1001627a:	602b      	str	r3, [r5, #0]
1001627c:	2380      	movs	r3, #128	; 0x80
1001627e:	00db      	lsls	r3, r3, #3
10016280:	2000      	movs	r0, #0
10016282:	6023      	str	r3, [r4, #0]
10016284:	b010      	add	sp, #64	; 0x40
10016286:	bd70      	pop	{r4, r5, r6, pc}
10016288:	ffffe000 	.word	0xffffe000

1001628c <__smakebuf_r>:
1001628c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001628e:	2602      	movs	r6, #2
10016290:	898b      	ldrh	r3, [r1, #12]
10016292:	0005      	movs	r5, r0
10016294:	000c      	movs	r4, r1
10016296:	4233      	tst	r3, r6
10016298:	d110      	bne.n	100162bc <__smakebuf_r+0x30>
1001629a:	ab01      	add	r3, sp, #4
1001629c:	466a      	mov	r2, sp
1001629e:	f7ff ffcf 	bl	10016240 <__swhatbuf_r>
100162a2:	9900      	ldr	r1, [sp, #0]
100162a4:	0007      	movs	r7, r0
100162a6:	0028      	movs	r0, r5
100162a8:	f7ff fb7c 	bl	100159a4 <_malloc_r>
100162ac:	2800      	cmp	r0, #0
100162ae:	d10c      	bne.n	100162ca <__smakebuf_r+0x3e>
100162b0:	220c      	movs	r2, #12
100162b2:	5ea3      	ldrsh	r3, [r4, r2]
100162b4:	059a      	lsls	r2, r3, #22
100162b6:	d423      	bmi.n	10016300 <__smakebuf_r+0x74>
100162b8:	4333      	orrs	r3, r6
100162ba:	81a3      	strh	r3, [r4, #12]
100162bc:	0023      	movs	r3, r4
100162be:	3347      	adds	r3, #71	; 0x47
100162c0:	6023      	str	r3, [r4, #0]
100162c2:	6123      	str	r3, [r4, #16]
100162c4:	2301      	movs	r3, #1
100162c6:	6163      	str	r3, [r4, #20]
100162c8:	e01a      	b.n	10016300 <__smakebuf_r+0x74>
100162ca:	2280      	movs	r2, #128	; 0x80
100162cc:	4b0d      	ldr	r3, [pc, #52]	; (10016304 <__smakebuf_r+0x78>)
100162ce:	62ab      	str	r3, [r5, #40]	; 0x28
100162d0:	89a3      	ldrh	r3, [r4, #12]
100162d2:	6020      	str	r0, [r4, #0]
100162d4:	4313      	orrs	r3, r2
100162d6:	81a3      	strh	r3, [r4, #12]
100162d8:	9b00      	ldr	r3, [sp, #0]
100162da:	6120      	str	r0, [r4, #16]
100162dc:	6163      	str	r3, [r4, #20]
100162de:	9b01      	ldr	r3, [sp, #4]
100162e0:	2b00      	cmp	r3, #0
100162e2:	d00a      	beq.n	100162fa <__smakebuf_r+0x6e>
100162e4:	230e      	movs	r3, #14
100162e6:	5ee1      	ldrsh	r1, [r4, r3]
100162e8:	0028      	movs	r0, r5
100162ea:	f000 fb9b 	bl	10016a24 <_isatty_r>
100162ee:	2800      	cmp	r0, #0
100162f0:	d003      	beq.n	100162fa <__smakebuf_r+0x6e>
100162f2:	2201      	movs	r2, #1
100162f4:	89a3      	ldrh	r3, [r4, #12]
100162f6:	4313      	orrs	r3, r2
100162f8:	81a3      	strh	r3, [r4, #12]
100162fa:	89a3      	ldrh	r3, [r4, #12]
100162fc:	431f      	orrs	r7, r3
100162fe:	81a7      	strh	r7, [r4, #12]
10016300:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10016302:	46c0      	nop			; (mov r8, r8)
10016304:	10016095 	.word	0x10016095

10016308 <__sfputc_r>:
10016308:	6893      	ldr	r3, [r2, #8]
1001630a:	b510      	push	{r4, lr}
1001630c:	3b01      	subs	r3, #1
1001630e:	6093      	str	r3, [r2, #8]
10016310:	2b00      	cmp	r3, #0
10016312:	da05      	bge.n	10016320 <__sfputc_r+0x18>
10016314:	6994      	ldr	r4, [r2, #24]
10016316:	42a3      	cmp	r3, r4
10016318:	db08      	blt.n	1001632c <__sfputc_r+0x24>
1001631a:	b2cb      	uxtb	r3, r1
1001631c:	2b0a      	cmp	r3, #10
1001631e:	d005      	beq.n	1001632c <__sfputc_r+0x24>
10016320:	6813      	ldr	r3, [r2, #0]
10016322:	1c58      	adds	r0, r3, #1
10016324:	6010      	str	r0, [r2, #0]
10016326:	7019      	strb	r1, [r3, #0]
10016328:	b2c8      	uxtb	r0, r1
1001632a:	e001      	b.n	10016330 <__sfputc_r+0x28>
1001632c:	f7ff fd32 	bl	10015d94 <__swbuf_r>
10016330:	bd10      	pop	{r4, pc}

10016332 <__sfputs_r>:
10016332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016334:	0006      	movs	r6, r0
10016336:	000f      	movs	r7, r1
10016338:	0014      	movs	r4, r2
1001633a:	18d5      	adds	r5, r2, r3
1001633c:	42ac      	cmp	r4, r5
1001633e:	d008      	beq.n	10016352 <__sfputs_r+0x20>
10016340:	7821      	ldrb	r1, [r4, #0]
10016342:	003a      	movs	r2, r7
10016344:	0030      	movs	r0, r6
10016346:	f7ff ffdf 	bl	10016308 <__sfputc_r>
1001634a:	3401      	adds	r4, #1
1001634c:	1c43      	adds	r3, r0, #1
1001634e:	d1f5      	bne.n	1001633c <__sfputs_r+0xa>
10016350:	e000      	b.n	10016354 <__sfputs_r+0x22>
10016352:	2000      	movs	r0, #0
10016354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10016358 <_vfiprintf_r>:
10016358:	b5f0      	push	{r4, r5, r6, r7, lr}
1001635a:	b09f      	sub	sp, #124	; 0x7c
1001635c:	0006      	movs	r6, r0
1001635e:	000f      	movs	r7, r1
10016360:	9202      	str	r2, [sp, #8]
10016362:	9305      	str	r3, [sp, #20]
10016364:	2800      	cmp	r0, #0
10016366:	d004      	beq.n	10016372 <_vfiprintf_r+0x1a>
10016368:	6983      	ldr	r3, [r0, #24]
1001636a:	2b00      	cmp	r3, #0
1001636c:	d101      	bne.n	10016372 <_vfiprintf_r+0x1a>
1001636e:	f7ff fed3 	bl	10016118 <__sinit>
10016372:	4b7f      	ldr	r3, [pc, #508]	; (10016570 <_vfiprintf_r+0x218>)
10016374:	429f      	cmp	r7, r3
10016376:	d101      	bne.n	1001637c <_vfiprintf_r+0x24>
10016378:	6877      	ldr	r7, [r6, #4]
1001637a:	e008      	b.n	1001638e <_vfiprintf_r+0x36>
1001637c:	4b7d      	ldr	r3, [pc, #500]	; (10016574 <_vfiprintf_r+0x21c>)
1001637e:	429f      	cmp	r7, r3
10016380:	d101      	bne.n	10016386 <_vfiprintf_r+0x2e>
10016382:	68b7      	ldr	r7, [r6, #8]
10016384:	e003      	b.n	1001638e <_vfiprintf_r+0x36>
10016386:	4b7c      	ldr	r3, [pc, #496]	; (10016578 <_vfiprintf_r+0x220>)
10016388:	429f      	cmp	r7, r3
1001638a:	d100      	bne.n	1001638e <_vfiprintf_r+0x36>
1001638c:	68f7      	ldr	r7, [r6, #12]
1001638e:	89bb      	ldrh	r3, [r7, #12]
10016390:	071b      	lsls	r3, r3, #28
10016392:	d50a      	bpl.n	100163aa <_vfiprintf_r+0x52>
10016394:	693b      	ldr	r3, [r7, #16]
10016396:	2b00      	cmp	r3, #0
10016398:	d007      	beq.n	100163aa <_vfiprintf_r+0x52>
1001639a:	2300      	movs	r3, #0
1001639c:	ad06      	add	r5, sp, #24
1001639e:	616b      	str	r3, [r5, #20]
100163a0:	3320      	adds	r3, #32
100163a2:	766b      	strb	r3, [r5, #25]
100163a4:	3310      	adds	r3, #16
100163a6:	76ab      	strb	r3, [r5, #26]
100163a8:	e03d      	b.n	10016426 <_vfiprintf_r+0xce>
100163aa:	0039      	movs	r1, r7
100163ac:	0030      	movs	r0, r6
100163ae:	f7ff fd49 	bl	10015e44 <__swsetup_r>
100163b2:	2800      	cmp	r0, #0
100163b4:	d0f1      	beq.n	1001639a <_vfiprintf_r+0x42>
100163b6:	2001      	movs	r0, #1
100163b8:	4240      	negs	r0, r0
100163ba:	e0d6      	b.n	1001656a <_vfiprintf_r+0x212>
100163bc:	9a05      	ldr	r2, [sp, #20]
100163be:	1d11      	adds	r1, r2, #4
100163c0:	6812      	ldr	r2, [r2, #0]
100163c2:	9105      	str	r1, [sp, #20]
100163c4:	2a00      	cmp	r2, #0
100163c6:	da00      	bge.n	100163ca <_vfiprintf_r+0x72>
100163c8:	e07f      	b.n	100164ca <_vfiprintf_r+0x172>
100163ca:	9209      	str	r2, [sp, #36]	; 0x24
100163cc:	3401      	adds	r4, #1
100163ce:	7823      	ldrb	r3, [r4, #0]
100163d0:	2b2e      	cmp	r3, #46	; 0x2e
100163d2:	d100      	bne.n	100163d6 <_vfiprintf_r+0x7e>
100163d4:	e08d      	b.n	100164f2 <_vfiprintf_r+0x19a>
100163d6:	7821      	ldrb	r1, [r4, #0]
100163d8:	2203      	movs	r2, #3
100163da:	4868      	ldr	r0, [pc, #416]	; (1001657c <_vfiprintf_r+0x224>)
100163dc:	f000 fb48 	bl	10016a70 <memchr>
100163e0:	2800      	cmp	r0, #0
100163e2:	d007      	beq.n	100163f4 <_vfiprintf_r+0x9c>
100163e4:	4b65      	ldr	r3, [pc, #404]	; (1001657c <_vfiprintf_r+0x224>)
100163e6:	682a      	ldr	r2, [r5, #0]
100163e8:	1ac0      	subs	r0, r0, r3
100163ea:	2340      	movs	r3, #64	; 0x40
100163ec:	4083      	lsls	r3, r0
100163ee:	4313      	orrs	r3, r2
100163f0:	602b      	str	r3, [r5, #0]
100163f2:	3401      	adds	r4, #1
100163f4:	7821      	ldrb	r1, [r4, #0]
100163f6:	1c63      	adds	r3, r4, #1
100163f8:	2206      	movs	r2, #6
100163fa:	4861      	ldr	r0, [pc, #388]	; (10016580 <_vfiprintf_r+0x228>)
100163fc:	9302      	str	r3, [sp, #8]
100163fe:	7629      	strb	r1, [r5, #24]
10016400:	f000 fb36 	bl	10016a70 <memchr>
10016404:	2800      	cmp	r0, #0
10016406:	d100      	bne.n	1001640a <_vfiprintf_r+0xb2>
10016408:	e09d      	b.n	10016546 <_vfiprintf_r+0x1ee>
1001640a:	4b5e      	ldr	r3, [pc, #376]	; (10016584 <_vfiprintf_r+0x22c>)
1001640c:	2b00      	cmp	r3, #0
1001640e:	d000      	beq.n	10016412 <_vfiprintf_r+0xba>
10016410:	e090      	b.n	10016534 <_vfiprintf_r+0x1dc>
10016412:	2207      	movs	r2, #7
10016414:	9b05      	ldr	r3, [sp, #20]
10016416:	3307      	adds	r3, #7
10016418:	4393      	bics	r3, r2
1001641a:	3308      	adds	r3, #8
1001641c:	9305      	str	r3, [sp, #20]
1001641e:	696b      	ldr	r3, [r5, #20]
10016420:	9a03      	ldr	r2, [sp, #12]
10016422:	189b      	adds	r3, r3, r2
10016424:	616b      	str	r3, [r5, #20]
10016426:	9c02      	ldr	r4, [sp, #8]
10016428:	7823      	ldrb	r3, [r4, #0]
1001642a:	2b00      	cmp	r3, #0
1001642c:	d104      	bne.n	10016438 <_vfiprintf_r+0xe0>
1001642e:	9b02      	ldr	r3, [sp, #8]
10016430:	1ae3      	subs	r3, r4, r3
10016432:	9304      	str	r3, [sp, #16]
10016434:	d012      	beq.n	1001645c <_vfiprintf_r+0x104>
10016436:	e003      	b.n	10016440 <_vfiprintf_r+0xe8>
10016438:	2b25      	cmp	r3, #37	; 0x25
1001643a:	d0f8      	beq.n	1001642e <_vfiprintf_r+0xd6>
1001643c:	3401      	adds	r4, #1
1001643e:	e7f3      	b.n	10016428 <_vfiprintf_r+0xd0>
10016440:	9b04      	ldr	r3, [sp, #16]
10016442:	9a02      	ldr	r2, [sp, #8]
10016444:	0039      	movs	r1, r7
10016446:	0030      	movs	r0, r6
10016448:	f7ff ff73 	bl	10016332 <__sfputs_r>
1001644c:	1c43      	adds	r3, r0, #1
1001644e:	d100      	bne.n	10016452 <_vfiprintf_r+0xfa>
10016450:	e086      	b.n	10016560 <_vfiprintf_r+0x208>
10016452:	696a      	ldr	r2, [r5, #20]
10016454:	9b04      	ldr	r3, [sp, #16]
10016456:	4694      	mov	ip, r2
10016458:	4463      	add	r3, ip
1001645a:	616b      	str	r3, [r5, #20]
1001645c:	7823      	ldrb	r3, [r4, #0]
1001645e:	2b00      	cmp	r3, #0
10016460:	d07e      	beq.n	10016560 <_vfiprintf_r+0x208>
10016462:	2201      	movs	r2, #1
10016464:	2300      	movs	r3, #0
10016466:	4252      	negs	r2, r2
10016468:	606a      	str	r2, [r5, #4]
1001646a:	a902      	add	r1, sp, #8
1001646c:	3254      	adds	r2, #84	; 0x54
1001646e:	1852      	adds	r2, r2, r1
10016470:	3401      	adds	r4, #1
10016472:	602b      	str	r3, [r5, #0]
10016474:	60eb      	str	r3, [r5, #12]
10016476:	60ab      	str	r3, [r5, #8]
10016478:	7013      	strb	r3, [r2, #0]
1001647a:	65ab      	str	r3, [r5, #88]	; 0x58
1001647c:	7821      	ldrb	r1, [r4, #0]
1001647e:	2205      	movs	r2, #5
10016480:	4841      	ldr	r0, [pc, #260]	; (10016588 <_vfiprintf_r+0x230>)
10016482:	f000 faf5 	bl	10016a70 <memchr>
10016486:	2800      	cmp	r0, #0
10016488:	d008      	beq.n	1001649c <_vfiprintf_r+0x144>
1001648a:	4b3f      	ldr	r3, [pc, #252]	; (10016588 <_vfiprintf_r+0x230>)
1001648c:	682a      	ldr	r2, [r5, #0]
1001648e:	1ac0      	subs	r0, r0, r3
10016490:	2301      	movs	r3, #1
10016492:	4083      	lsls	r3, r0
10016494:	4313      	orrs	r3, r2
10016496:	602b      	str	r3, [r5, #0]
10016498:	3401      	adds	r4, #1
1001649a:	e7ef      	b.n	1001647c <_vfiprintf_r+0x124>
1001649c:	682b      	ldr	r3, [r5, #0]
1001649e:	06da      	lsls	r2, r3, #27
100164a0:	d504      	bpl.n	100164ac <_vfiprintf_r+0x154>
100164a2:	2253      	movs	r2, #83	; 0x53
100164a4:	2120      	movs	r1, #32
100164a6:	a802      	add	r0, sp, #8
100164a8:	1812      	adds	r2, r2, r0
100164aa:	7011      	strb	r1, [r2, #0]
100164ac:	071a      	lsls	r2, r3, #28
100164ae:	d504      	bpl.n	100164ba <_vfiprintf_r+0x162>
100164b0:	2253      	movs	r2, #83	; 0x53
100164b2:	212b      	movs	r1, #43	; 0x2b
100164b4:	a802      	add	r0, sp, #8
100164b6:	1812      	adds	r2, r2, r0
100164b8:	7011      	strb	r1, [r2, #0]
100164ba:	7822      	ldrb	r2, [r4, #0]
100164bc:	2a2a      	cmp	r2, #42	; 0x2a
100164be:	d100      	bne.n	100164c2 <_vfiprintf_r+0x16a>
100164c0:	e77c      	b.n	100163bc <_vfiprintf_r+0x64>
100164c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100164c4:	2000      	movs	r0, #0
100164c6:	210a      	movs	r1, #10
100164c8:	e005      	b.n	100164d6 <_vfiprintf_r+0x17e>
100164ca:	4252      	negs	r2, r2
100164cc:	60ea      	str	r2, [r5, #12]
100164ce:	2202      	movs	r2, #2
100164d0:	4313      	orrs	r3, r2
100164d2:	602b      	str	r3, [r5, #0]
100164d4:	e77a      	b.n	100163cc <_vfiprintf_r+0x74>
100164d6:	7822      	ldrb	r2, [r4, #0]
100164d8:	3a30      	subs	r2, #48	; 0x30
100164da:	2a09      	cmp	r2, #9
100164dc:	d804      	bhi.n	100164e8 <_vfiprintf_r+0x190>
100164de:	434b      	muls	r3, r1
100164e0:	3401      	adds	r4, #1
100164e2:	189b      	adds	r3, r3, r2
100164e4:	2001      	movs	r0, #1
100164e6:	e7f6      	b.n	100164d6 <_vfiprintf_r+0x17e>
100164e8:	2800      	cmp	r0, #0
100164ea:	d100      	bne.n	100164ee <_vfiprintf_r+0x196>
100164ec:	e76f      	b.n	100163ce <_vfiprintf_r+0x76>
100164ee:	9309      	str	r3, [sp, #36]	; 0x24
100164f0:	e76d      	b.n	100163ce <_vfiprintf_r+0x76>
100164f2:	7863      	ldrb	r3, [r4, #1]
100164f4:	2b2a      	cmp	r3, #42	; 0x2a
100164f6:	d10a      	bne.n	1001650e <_vfiprintf_r+0x1b6>
100164f8:	9b05      	ldr	r3, [sp, #20]
100164fa:	3402      	adds	r4, #2
100164fc:	1d1a      	adds	r2, r3, #4
100164fe:	681b      	ldr	r3, [r3, #0]
10016500:	9205      	str	r2, [sp, #20]
10016502:	2b00      	cmp	r3, #0
10016504:	da01      	bge.n	1001650a <_vfiprintf_r+0x1b2>
10016506:	2301      	movs	r3, #1
10016508:	425b      	negs	r3, r3
1001650a:	9307      	str	r3, [sp, #28]
1001650c:	e763      	b.n	100163d6 <_vfiprintf_r+0x7e>
1001650e:	2300      	movs	r3, #0
10016510:	200a      	movs	r0, #10
10016512:	001a      	movs	r2, r3
10016514:	3401      	adds	r4, #1
10016516:	606b      	str	r3, [r5, #4]
10016518:	7821      	ldrb	r1, [r4, #0]
1001651a:	3930      	subs	r1, #48	; 0x30
1001651c:	2909      	cmp	r1, #9
1001651e:	d804      	bhi.n	1001652a <_vfiprintf_r+0x1d2>
10016520:	4342      	muls	r2, r0
10016522:	3401      	adds	r4, #1
10016524:	1852      	adds	r2, r2, r1
10016526:	2301      	movs	r3, #1
10016528:	e7f6      	b.n	10016518 <_vfiprintf_r+0x1c0>
1001652a:	2b00      	cmp	r3, #0
1001652c:	d100      	bne.n	10016530 <_vfiprintf_r+0x1d8>
1001652e:	e752      	b.n	100163d6 <_vfiprintf_r+0x7e>
10016530:	9207      	str	r2, [sp, #28]
10016532:	e750      	b.n	100163d6 <_vfiprintf_r+0x7e>
10016534:	ab05      	add	r3, sp, #20
10016536:	9300      	str	r3, [sp, #0]
10016538:	003a      	movs	r2, r7
1001653a:	4b14      	ldr	r3, [pc, #80]	; (1001658c <_vfiprintf_r+0x234>)
1001653c:	0029      	movs	r1, r5
1001653e:	0030      	movs	r0, r6
10016540:	e000      	b.n	10016544 <_vfiprintf_r+0x1ec>
10016542:	bf00      	nop
10016544:	e007      	b.n	10016556 <_vfiprintf_r+0x1fe>
10016546:	ab05      	add	r3, sp, #20
10016548:	9300      	str	r3, [sp, #0]
1001654a:	003a      	movs	r2, r7
1001654c:	4b0f      	ldr	r3, [pc, #60]	; (1001658c <_vfiprintf_r+0x234>)
1001654e:	0029      	movs	r1, r5
10016550:	0030      	movs	r0, r6
10016552:	f000 f88b 	bl	1001666c <_printf_i>
10016556:	9003      	str	r0, [sp, #12]
10016558:	9b03      	ldr	r3, [sp, #12]
1001655a:	3301      	adds	r3, #1
1001655c:	d000      	beq.n	10016560 <_vfiprintf_r+0x208>
1001655e:	e75e      	b.n	1001641e <_vfiprintf_r+0xc6>
10016560:	89bb      	ldrh	r3, [r7, #12]
10016562:	065b      	lsls	r3, r3, #25
10016564:	d500      	bpl.n	10016568 <_vfiprintf_r+0x210>
10016566:	e726      	b.n	100163b6 <_vfiprintf_r+0x5e>
10016568:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001656a:	b01f      	add	sp, #124	; 0x7c
1001656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001656e:	46c0      	nop			; (mov r8, r8)
10016570:	10018648 	.word	0x10018648
10016574:	10018668 	.word	0x10018668
10016578:	10018688 	.word	0x10018688
1001657c:	100186ae 	.word	0x100186ae
10016580:	100186b2 	.word	0x100186b2
10016584:	00000000 	.word	0x00000000
10016588:	100186a8 	.word	0x100186a8
1001658c:	10016333 	.word	0x10016333

10016590 <_printf_common>:
10016590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016592:	0017      	movs	r7, r2
10016594:	9301      	str	r3, [sp, #4]
10016596:	688a      	ldr	r2, [r1, #8]
10016598:	690b      	ldr	r3, [r1, #16]
1001659a:	9000      	str	r0, [sp, #0]
1001659c:	000c      	movs	r4, r1
1001659e:	4293      	cmp	r3, r2
100165a0:	da00      	bge.n	100165a4 <_printf_common+0x14>
100165a2:	0013      	movs	r3, r2
100165a4:	0022      	movs	r2, r4
100165a6:	603b      	str	r3, [r7, #0]
100165a8:	3243      	adds	r2, #67	; 0x43
100165aa:	7812      	ldrb	r2, [r2, #0]
100165ac:	2a00      	cmp	r2, #0
100165ae:	d001      	beq.n	100165b4 <_printf_common+0x24>
100165b0:	3301      	adds	r3, #1
100165b2:	603b      	str	r3, [r7, #0]
100165b4:	6823      	ldr	r3, [r4, #0]
100165b6:	069b      	lsls	r3, r3, #26
100165b8:	d502      	bpl.n	100165c0 <_printf_common+0x30>
100165ba:	683b      	ldr	r3, [r7, #0]
100165bc:	3302      	adds	r3, #2
100165be:	603b      	str	r3, [r7, #0]
100165c0:	2506      	movs	r5, #6
100165c2:	6823      	ldr	r3, [r4, #0]
100165c4:	401d      	ands	r5, r3
100165c6:	d01e      	beq.n	10016606 <_printf_common+0x76>
100165c8:	0023      	movs	r3, r4
100165ca:	3343      	adds	r3, #67	; 0x43
100165cc:	781b      	ldrb	r3, [r3, #0]
100165ce:	1e5a      	subs	r2, r3, #1
100165d0:	4193      	sbcs	r3, r2
100165d2:	6822      	ldr	r2, [r4, #0]
100165d4:	0692      	lsls	r2, r2, #26
100165d6:	d51c      	bpl.n	10016612 <_printf_common+0x82>
100165d8:	2030      	movs	r0, #48	; 0x30
100165da:	18e1      	adds	r1, r4, r3
100165dc:	3143      	adds	r1, #67	; 0x43
100165de:	7008      	strb	r0, [r1, #0]
100165e0:	0021      	movs	r1, r4
100165e2:	1c5a      	adds	r2, r3, #1
100165e4:	3145      	adds	r1, #69	; 0x45
100165e6:	7809      	ldrb	r1, [r1, #0]
100165e8:	18a2      	adds	r2, r4, r2
100165ea:	3243      	adds	r2, #67	; 0x43
100165ec:	3302      	adds	r3, #2
100165ee:	7011      	strb	r1, [r2, #0]
100165f0:	e00f      	b.n	10016612 <_printf_common+0x82>
100165f2:	0022      	movs	r2, r4
100165f4:	2301      	movs	r3, #1
100165f6:	3219      	adds	r2, #25
100165f8:	9901      	ldr	r1, [sp, #4]
100165fa:	9800      	ldr	r0, [sp, #0]
100165fc:	9e08      	ldr	r6, [sp, #32]
100165fe:	47b0      	blx	r6
10016600:	1c43      	adds	r3, r0, #1
10016602:	d00e      	beq.n	10016622 <_printf_common+0x92>
10016604:	3501      	adds	r5, #1
10016606:	68e3      	ldr	r3, [r4, #12]
10016608:	683a      	ldr	r2, [r7, #0]
1001660a:	1a9b      	subs	r3, r3, r2
1001660c:	429d      	cmp	r5, r3
1001660e:	dbf0      	blt.n	100165f2 <_printf_common+0x62>
10016610:	e7da      	b.n	100165c8 <_printf_common+0x38>
10016612:	0022      	movs	r2, r4
10016614:	9901      	ldr	r1, [sp, #4]
10016616:	3243      	adds	r2, #67	; 0x43
10016618:	9800      	ldr	r0, [sp, #0]
1001661a:	9d08      	ldr	r5, [sp, #32]
1001661c:	47a8      	blx	r5
1001661e:	1c43      	adds	r3, r0, #1
10016620:	d102      	bne.n	10016628 <_printf_common+0x98>
10016622:	2001      	movs	r0, #1
10016624:	4240      	negs	r0, r0
10016626:	e020      	b.n	1001666a <_printf_common+0xda>
10016628:	2306      	movs	r3, #6
1001662a:	6820      	ldr	r0, [r4, #0]
1001662c:	68e1      	ldr	r1, [r4, #12]
1001662e:	683a      	ldr	r2, [r7, #0]
10016630:	4003      	ands	r3, r0
10016632:	2500      	movs	r5, #0
10016634:	2b04      	cmp	r3, #4
10016636:	d103      	bne.n	10016640 <_printf_common+0xb0>
10016638:	1a8d      	subs	r5, r1, r2
1001663a:	43eb      	mvns	r3, r5
1001663c:	17db      	asrs	r3, r3, #31
1001663e:	401d      	ands	r5, r3
10016640:	68a3      	ldr	r3, [r4, #8]
10016642:	6922      	ldr	r2, [r4, #16]
10016644:	4293      	cmp	r3, r2
10016646:	dd01      	ble.n	1001664c <_printf_common+0xbc>
10016648:	1a9b      	subs	r3, r3, r2
1001664a:	18ed      	adds	r5, r5, r3
1001664c:	2700      	movs	r7, #0
1001664e:	42bd      	cmp	r5, r7
10016650:	d00a      	beq.n	10016668 <_printf_common+0xd8>
10016652:	0022      	movs	r2, r4
10016654:	2301      	movs	r3, #1
10016656:	321a      	adds	r2, #26
10016658:	9901      	ldr	r1, [sp, #4]
1001665a:	9800      	ldr	r0, [sp, #0]
1001665c:	9e08      	ldr	r6, [sp, #32]
1001665e:	47b0      	blx	r6
10016660:	1c43      	adds	r3, r0, #1
10016662:	d0de      	beq.n	10016622 <_printf_common+0x92>
10016664:	3701      	adds	r7, #1
10016666:	e7f2      	b.n	1001664e <_printf_common+0xbe>
10016668:	2000      	movs	r0, #0
1001666a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001666c <_printf_i>:
1001666c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001666e:	b08b      	sub	sp, #44	; 0x2c
10016670:	9206      	str	r2, [sp, #24]
10016672:	000a      	movs	r2, r1
10016674:	3243      	adds	r2, #67	; 0x43
10016676:	9307      	str	r3, [sp, #28]
10016678:	9005      	str	r0, [sp, #20]
1001667a:	9204      	str	r2, [sp, #16]
1001667c:	7e0a      	ldrb	r2, [r1, #24]
1001667e:	000c      	movs	r4, r1
10016680:	9b10      	ldr	r3, [sp, #64]	; 0x40
10016682:	2a6e      	cmp	r2, #110	; 0x6e
10016684:	d100      	bne.n	10016688 <_printf_i+0x1c>
10016686:	e0ab      	b.n	100167e0 <_printf_i+0x174>
10016688:	d811      	bhi.n	100166ae <_printf_i+0x42>
1001668a:	2a63      	cmp	r2, #99	; 0x63
1001668c:	d022      	beq.n	100166d4 <_printf_i+0x68>
1001668e:	d809      	bhi.n	100166a4 <_printf_i+0x38>
10016690:	2a00      	cmp	r2, #0
10016692:	d100      	bne.n	10016696 <_printf_i+0x2a>
10016694:	e0b5      	b.n	10016802 <_printf_i+0x196>
10016696:	2a58      	cmp	r2, #88	; 0x58
10016698:	d000      	beq.n	1001669c <_printf_i+0x30>
1001669a:	e0c5      	b.n	10016828 <_printf_i+0x1bc>
1001669c:	3145      	adds	r1, #69	; 0x45
1001669e:	700a      	strb	r2, [r1, #0]
100166a0:	4a81      	ldr	r2, [pc, #516]	; (100168a8 <_printf_i+0x23c>)
100166a2:	e04f      	b.n	10016744 <_printf_i+0xd8>
100166a4:	2a64      	cmp	r2, #100	; 0x64
100166a6:	d01d      	beq.n	100166e4 <_printf_i+0x78>
100166a8:	2a69      	cmp	r2, #105	; 0x69
100166aa:	d01b      	beq.n	100166e4 <_printf_i+0x78>
100166ac:	e0bc      	b.n	10016828 <_printf_i+0x1bc>
100166ae:	2a73      	cmp	r2, #115	; 0x73
100166b0:	d100      	bne.n	100166b4 <_printf_i+0x48>
100166b2:	e0aa      	b.n	1001680a <_printf_i+0x19e>
100166b4:	d809      	bhi.n	100166ca <_printf_i+0x5e>
100166b6:	2a6f      	cmp	r2, #111	; 0x6f
100166b8:	d029      	beq.n	1001670e <_printf_i+0xa2>
100166ba:	2a70      	cmp	r2, #112	; 0x70
100166bc:	d000      	beq.n	100166c0 <_printf_i+0x54>
100166be:	e0b3      	b.n	10016828 <_printf_i+0x1bc>
100166c0:	2220      	movs	r2, #32
100166c2:	6809      	ldr	r1, [r1, #0]
100166c4:	430a      	orrs	r2, r1
100166c6:	6022      	str	r2, [r4, #0]
100166c8:	e037      	b.n	1001673a <_printf_i+0xce>
100166ca:	2a75      	cmp	r2, #117	; 0x75
100166cc:	d01f      	beq.n	1001670e <_printf_i+0xa2>
100166ce:	2a78      	cmp	r2, #120	; 0x78
100166d0:	d033      	beq.n	1001673a <_printf_i+0xce>
100166d2:	e0a9      	b.n	10016828 <_printf_i+0x1bc>
100166d4:	000e      	movs	r6, r1
100166d6:	681a      	ldr	r2, [r3, #0]
100166d8:	3642      	adds	r6, #66	; 0x42
100166da:	1d11      	adds	r1, r2, #4
100166dc:	6019      	str	r1, [r3, #0]
100166de:	6813      	ldr	r3, [r2, #0]
100166e0:	7033      	strb	r3, [r6, #0]
100166e2:	e0a4      	b.n	1001682e <_printf_i+0x1c2>
100166e4:	6821      	ldr	r1, [r4, #0]
100166e6:	681a      	ldr	r2, [r3, #0]
100166e8:	0608      	lsls	r0, r1, #24
100166ea:	d406      	bmi.n	100166fa <_printf_i+0x8e>
100166ec:	0649      	lsls	r1, r1, #25
100166ee:	d504      	bpl.n	100166fa <_printf_i+0x8e>
100166f0:	1d11      	adds	r1, r2, #4
100166f2:	6019      	str	r1, [r3, #0]
100166f4:	2300      	movs	r3, #0
100166f6:	5ed5      	ldrsh	r5, [r2, r3]
100166f8:	e002      	b.n	10016700 <_printf_i+0x94>
100166fa:	1d11      	adds	r1, r2, #4
100166fc:	6019      	str	r1, [r3, #0]
100166fe:	6815      	ldr	r5, [r2, #0]
10016700:	2d00      	cmp	r5, #0
10016702:	da3b      	bge.n	1001677c <_printf_i+0x110>
10016704:	232d      	movs	r3, #45	; 0x2d
10016706:	9a04      	ldr	r2, [sp, #16]
10016708:	426d      	negs	r5, r5
1001670a:	7013      	strb	r3, [r2, #0]
1001670c:	e036      	b.n	1001677c <_printf_i+0x110>
1001670e:	6821      	ldr	r1, [r4, #0]
10016710:	681a      	ldr	r2, [r3, #0]
10016712:	0608      	lsls	r0, r1, #24
10016714:	d406      	bmi.n	10016724 <_printf_i+0xb8>
10016716:	0649      	lsls	r1, r1, #25
10016718:	d504      	bpl.n	10016724 <_printf_i+0xb8>
1001671a:	6815      	ldr	r5, [r2, #0]
1001671c:	1d11      	adds	r1, r2, #4
1001671e:	6019      	str	r1, [r3, #0]
10016720:	b2ad      	uxth	r5, r5
10016722:	e002      	b.n	1001672a <_printf_i+0xbe>
10016724:	1d11      	adds	r1, r2, #4
10016726:	6019      	str	r1, [r3, #0]
10016728:	6815      	ldr	r5, [r2, #0]
1001672a:	4b5f      	ldr	r3, [pc, #380]	; (100168a8 <_printf_i+0x23c>)
1001672c:	7e22      	ldrb	r2, [r4, #24]
1001672e:	9303      	str	r3, [sp, #12]
10016730:	2708      	movs	r7, #8
10016732:	2a6f      	cmp	r2, #111	; 0x6f
10016734:	d01d      	beq.n	10016772 <_printf_i+0x106>
10016736:	270a      	movs	r7, #10
10016738:	e01b      	b.n	10016772 <_printf_i+0x106>
1001673a:	0022      	movs	r2, r4
1001673c:	2178      	movs	r1, #120	; 0x78
1001673e:	3245      	adds	r2, #69	; 0x45
10016740:	7011      	strb	r1, [r2, #0]
10016742:	4a5a      	ldr	r2, [pc, #360]	; (100168ac <_printf_i+0x240>)
10016744:	6819      	ldr	r1, [r3, #0]
10016746:	9203      	str	r2, [sp, #12]
10016748:	1d08      	adds	r0, r1, #4
1001674a:	6822      	ldr	r2, [r4, #0]
1001674c:	6018      	str	r0, [r3, #0]
1001674e:	680d      	ldr	r5, [r1, #0]
10016750:	0610      	lsls	r0, r2, #24
10016752:	d402      	bmi.n	1001675a <_printf_i+0xee>
10016754:	0650      	lsls	r0, r2, #25
10016756:	d500      	bpl.n	1001675a <_printf_i+0xee>
10016758:	b2ad      	uxth	r5, r5
1001675a:	07d3      	lsls	r3, r2, #31
1001675c:	d502      	bpl.n	10016764 <_printf_i+0xf8>
1001675e:	2320      	movs	r3, #32
10016760:	431a      	orrs	r2, r3
10016762:	6022      	str	r2, [r4, #0]
10016764:	2710      	movs	r7, #16
10016766:	2d00      	cmp	r5, #0
10016768:	d103      	bne.n	10016772 <_printf_i+0x106>
1001676a:	2320      	movs	r3, #32
1001676c:	6822      	ldr	r2, [r4, #0]
1001676e:	439a      	bics	r2, r3
10016770:	6022      	str	r2, [r4, #0]
10016772:	0023      	movs	r3, r4
10016774:	2200      	movs	r2, #0
10016776:	3343      	adds	r3, #67	; 0x43
10016778:	701a      	strb	r2, [r3, #0]
1001677a:	e002      	b.n	10016782 <_printf_i+0x116>
1001677c:	270a      	movs	r7, #10
1001677e:	4b4a      	ldr	r3, [pc, #296]	; (100168a8 <_printf_i+0x23c>)
10016780:	9303      	str	r3, [sp, #12]
10016782:	6863      	ldr	r3, [r4, #4]
10016784:	60a3      	str	r3, [r4, #8]
10016786:	2b00      	cmp	r3, #0
10016788:	db09      	blt.n	1001679e <_printf_i+0x132>
1001678a:	2204      	movs	r2, #4
1001678c:	6821      	ldr	r1, [r4, #0]
1001678e:	4391      	bics	r1, r2
10016790:	6021      	str	r1, [r4, #0]
10016792:	2d00      	cmp	r5, #0
10016794:	d105      	bne.n	100167a2 <_printf_i+0x136>
10016796:	9e04      	ldr	r6, [sp, #16]
10016798:	2b00      	cmp	r3, #0
1001679a:	d011      	beq.n	100167c0 <_printf_i+0x154>
1001679c:	e07b      	b.n	10016896 <_printf_i+0x22a>
1001679e:	2d00      	cmp	r5, #0
100167a0:	d079      	beq.n	10016896 <_printf_i+0x22a>
100167a2:	9e04      	ldr	r6, [sp, #16]
100167a4:	0028      	movs	r0, r5
100167a6:	0039      	movs	r1, r7
100167a8:	f7fc fa9e 	bl	10012ce8 <__aeabi_uidivmod>
100167ac:	9b03      	ldr	r3, [sp, #12]
100167ae:	3e01      	subs	r6, #1
100167b0:	5c5b      	ldrb	r3, [r3, r1]
100167b2:	0028      	movs	r0, r5
100167b4:	7033      	strb	r3, [r6, #0]
100167b6:	0039      	movs	r1, r7
100167b8:	f7fc fa10 	bl	10012bdc <__aeabi_uidiv>
100167bc:	1e05      	subs	r5, r0, #0
100167be:	d1f1      	bne.n	100167a4 <_printf_i+0x138>
100167c0:	2f08      	cmp	r7, #8
100167c2:	d109      	bne.n	100167d8 <_printf_i+0x16c>
100167c4:	6823      	ldr	r3, [r4, #0]
100167c6:	07db      	lsls	r3, r3, #31
100167c8:	d506      	bpl.n	100167d8 <_printf_i+0x16c>
100167ca:	6863      	ldr	r3, [r4, #4]
100167cc:	6922      	ldr	r2, [r4, #16]
100167ce:	4293      	cmp	r3, r2
100167d0:	dc02      	bgt.n	100167d8 <_printf_i+0x16c>
100167d2:	2330      	movs	r3, #48	; 0x30
100167d4:	3e01      	subs	r6, #1
100167d6:	7033      	strb	r3, [r6, #0]
100167d8:	9b04      	ldr	r3, [sp, #16]
100167da:	1b9b      	subs	r3, r3, r6
100167dc:	6123      	str	r3, [r4, #16]
100167de:	e02b      	b.n	10016838 <_printf_i+0x1cc>
100167e0:	6809      	ldr	r1, [r1, #0]
100167e2:	681a      	ldr	r2, [r3, #0]
100167e4:	0608      	lsls	r0, r1, #24
100167e6:	d407      	bmi.n	100167f8 <_printf_i+0x18c>
100167e8:	0649      	lsls	r1, r1, #25
100167ea:	d505      	bpl.n	100167f8 <_printf_i+0x18c>
100167ec:	1d11      	adds	r1, r2, #4
100167ee:	6019      	str	r1, [r3, #0]
100167f0:	6813      	ldr	r3, [r2, #0]
100167f2:	8aa2      	ldrh	r2, [r4, #20]
100167f4:	801a      	strh	r2, [r3, #0]
100167f6:	e004      	b.n	10016802 <_printf_i+0x196>
100167f8:	1d11      	adds	r1, r2, #4
100167fa:	6019      	str	r1, [r3, #0]
100167fc:	6813      	ldr	r3, [r2, #0]
100167fe:	6962      	ldr	r2, [r4, #20]
10016800:	601a      	str	r2, [r3, #0]
10016802:	2300      	movs	r3, #0
10016804:	9e04      	ldr	r6, [sp, #16]
10016806:	6123      	str	r3, [r4, #16]
10016808:	e016      	b.n	10016838 <_printf_i+0x1cc>
1001680a:	681a      	ldr	r2, [r3, #0]
1001680c:	1d11      	adds	r1, r2, #4
1001680e:	6019      	str	r1, [r3, #0]
10016810:	6816      	ldr	r6, [r2, #0]
10016812:	2100      	movs	r1, #0
10016814:	6862      	ldr	r2, [r4, #4]
10016816:	0030      	movs	r0, r6
10016818:	f000 f92a 	bl	10016a70 <memchr>
1001681c:	2800      	cmp	r0, #0
1001681e:	d001      	beq.n	10016824 <_printf_i+0x1b8>
10016820:	1b80      	subs	r0, r0, r6
10016822:	6060      	str	r0, [r4, #4]
10016824:	6863      	ldr	r3, [r4, #4]
10016826:	e003      	b.n	10016830 <_printf_i+0x1c4>
10016828:	0026      	movs	r6, r4
1001682a:	3642      	adds	r6, #66	; 0x42
1001682c:	7032      	strb	r2, [r6, #0]
1001682e:	2301      	movs	r3, #1
10016830:	6123      	str	r3, [r4, #16]
10016832:	2300      	movs	r3, #0
10016834:	9a04      	ldr	r2, [sp, #16]
10016836:	7013      	strb	r3, [r2, #0]
10016838:	9b07      	ldr	r3, [sp, #28]
1001683a:	aa09      	add	r2, sp, #36	; 0x24
1001683c:	9300      	str	r3, [sp, #0]
1001683e:	0021      	movs	r1, r4
10016840:	9b06      	ldr	r3, [sp, #24]
10016842:	9805      	ldr	r0, [sp, #20]
10016844:	f7ff fea4 	bl	10016590 <_printf_common>
10016848:	1c43      	adds	r3, r0, #1
1001684a:	d102      	bne.n	10016852 <_printf_i+0x1e6>
1001684c:	2001      	movs	r0, #1
1001684e:	4240      	negs	r0, r0
10016850:	e027      	b.n	100168a2 <_printf_i+0x236>
10016852:	6923      	ldr	r3, [r4, #16]
10016854:	0032      	movs	r2, r6
10016856:	9906      	ldr	r1, [sp, #24]
10016858:	9805      	ldr	r0, [sp, #20]
1001685a:	9d07      	ldr	r5, [sp, #28]
1001685c:	47a8      	blx	r5
1001685e:	1c43      	adds	r3, r0, #1
10016860:	d0f4      	beq.n	1001684c <_printf_i+0x1e0>
10016862:	6823      	ldr	r3, [r4, #0]
10016864:	2500      	movs	r5, #0
10016866:	079b      	lsls	r3, r3, #30
10016868:	d40f      	bmi.n	1001688a <_printf_i+0x21e>
1001686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001686c:	68e0      	ldr	r0, [r4, #12]
1001686e:	4298      	cmp	r0, r3
10016870:	da17      	bge.n	100168a2 <_printf_i+0x236>
10016872:	0018      	movs	r0, r3
10016874:	e015      	b.n	100168a2 <_printf_i+0x236>
10016876:	0022      	movs	r2, r4
10016878:	2301      	movs	r3, #1
1001687a:	3219      	adds	r2, #25
1001687c:	9906      	ldr	r1, [sp, #24]
1001687e:	9805      	ldr	r0, [sp, #20]
10016880:	9e07      	ldr	r6, [sp, #28]
10016882:	47b0      	blx	r6
10016884:	1c43      	adds	r3, r0, #1
10016886:	d0e1      	beq.n	1001684c <_printf_i+0x1e0>
10016888:	3501      	adds	r5, #1
1001688a:	68e3      	ldr	r3, [r4, #12]
1001688c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001688e:	1a9b      	subs	r3, r3, r2
10016890:	429d      	cmp	r5, r3
10016892:	dbf0      	blt.n	10016876 <_printf_i+0x20a>
10016894:	e7e9      	b.n	1001686a <_printf_i+0x1fe>
10016896:	0026      	movs	r6, r4
10016898:	9b03      	ldr	r3, [sp, #12]
1001689a:	3642      	adds	r6, #66	; 0x42
1001689c:	781b      	ldrb	r3, [r3, #0]
1001689e:	7033      	strb	r3, [r6, #0]
100168a0:	e78e      	b.n	100167c0 <_printf_i+0x154>
100168a2:	b00b      	add	sp, #44	; 0x2c
100168a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100168a6:	46c0      	nop			; (mov r8, r8)
100168a8:	100186b9 	.word	0x100186b9
100168ac:	100186ca 	.word	0x100186ca

100168b0 <_putc_r>:
100168b0:	b570      	push	{r4, r5, r6, lr}
100168b2:	0006      	movs	r6, r0
100168b4:	000d      	movs	r5, r1
100168b6:	0014      	movs	r4, r2
100168b8:	2800      	cmp	r0, #0
100168ba:	d004      	beq.n	100168c6 <_putc_r+0x16>
100168bc:	6983      	ldr	r3, [r0, #24]
100168be:	2b00      	cmp	r3, #0
100168c0:	d101      	bne.n	100168c6 <_putc_r+0x16>
100168c2:	f7ff fc29 	bl	10016118 <__sinit>
100168c6:	4b12      	ldr	r3, [pc, #72]	; (10016910 <_putc_r+0x60>)
100168c8:	429c      	cmp	r4, r3
100168ca:	d101      	bne.n	100168d0 <_putc_r+0x20>
100168cc:	6874      	ldr	r4, [r6, #4]
100168ce:	e008      	b.n	100168e2 <_putc_r+0x32>
100168d0:	4b10      	ldr	r3, [pc, #64]	; (10016914 <_putc_r+0x64>)
100168d2:	429c      	cmp	r4, r3
100168d4:	d101      	bne.n	100168da <_putc_r+0x2a>
100168d6:	68b4      	ldr	r4, [r6, #8]
100168d8:	e003      	b.n	100168e2 <_putc_r+0x32>
100168da:	4b0f      	ldr	r3, [pc, #60]	; (10016918 <_putc_r+0x68>)
100168dc:	429c      	cmp	r4, r3
100168de:	d100      	bne.n	100168e2 <_putc_r+0x32>
100168e0:	68f4      	ldr	r4, [r6, #12]
100168e2:	68a3      	ldr	r3, [r4, #8]
100168e4:	3b01      	subs	r3, #1
100168e6:	60a3      	str	r3, [r4, #8]
100168e8:	2b00      	cmp	r3, #0
100168ea:	da05      	bge.n	100168f8 <_putc_r+0x48>
100168ec:	69a2      	ldr	r2, [r4, #24]
100168ee:	4293      	cmp	r3, r2
100168f0:	db08      	blt.n	10016904 <_putc_r+0x54>
100168f2:	b2eb      	uxtb	r3, r5
100168f4:	2b0a      	cmp	r3, #10
100168f6:	d005      	beq.n	10016904 <_putc_r+0x54>
100168f8:	6823      	ldr	r3, [r4, #0]
100168fa:	b2e8      	uxtb	r0, r5
100168fc:	1c5a      	adds	r2, r3, #1
100168fe:	6022      	str	r2, [r4, #0]
10016900:	701d      	strb	r5, [r3, #0]
10016902:	e004      	b.n	1001690e <_putc_r+0x5e>
10016904:	0022      	movs	r2, r4
10016906:	0029      	movs	r1, r5
10016908:	0030      	movs	r0, r6
1001690a:	f7ff fa43 	bl	10015d94 <__swbuf_r>
1001690e:	bd70      	pop	{r4, r5, r6, pc}
10016910:	10018648 	.word	0x10018648
10016914:	10018668 	.word	0x10018668
10016918:	10018688 	.word	0x10018688

1001691c <__sread>:
1001691c:	b570      	push	{r4, r5, r6, lr}
1001691e:	000c      	movs	r4, r1
10016920:	250e      	movs	r5, #14
10016922:	5f49      	ldrsh	r1, [r1, r5]
10016924:	f000 f8b0 	bl	10016a88 <_read_r>
10016928:	2800      	cmp	r0, #0
1001692a:	db03      	blt.n	10016934 <__sread+0x18>
1001692c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001692e:	181b      	adds	r3, r3, r0
10016930:	6563      	str	r3, [r4, #84]	; 0x54
10016932:	e003      	b.n	1001693c <__sread+0x20>
10016934:	89a2      	ldrh	r2, [r4, #12]
10016936:	4b02      	ldr	r3, [pc, #8]	; (10016940 <__sread+0x24>)
10016938:	4013      	ands	r3, r2
1001693a:	81a3      	strh	r3, [r4, #12]
1001693c:	bd70      	pop	{r4, r5, r6, pc}
1001693e:	46c0      	nop			; (mov r8, r8)
10016940:	ffffefff 	.word	0xffffefff

10016944 <__swrite>:
10016944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016946:	001f      	movs	r7, r3
10016948:	898b      	ldrh	r3, [r1, #12]
1001694a:	0005      	movs	r5, r0
1001694c:	000c      	movs	r4, r1
1001694e:	0016      	movs	r6, r2
10016950:	05db      	lsls	r3, r3, #23
10016952:	d505      	bpl.n	10016960 <__swrite+0x1c>
10016954:	230e      	movs	r3, #14
10016956:	5ec9      	ldrsh	r1, [r1, r3]
10016958:	2200      	movs	r2, #0
1001695a:	2302      	movs	r3, #2
1001695c:	f000 f874 	bl	10016a48 <_lseek_r>
10016960:	89a2      	ldrh	r2, [r4, #12]
10016962:	4b05      	ldr	r3, [pc, #20]	; (10016978 <__swrite+0x34>)
10016964:	0028      	movs	r0, r5
10016966:	4013      	ands	r3, r2
10016968:	81a3      	strh	r3, [r4, #12]
1001696a:	0032      	movs	r2, r6
1001696c:	230e      	movs	r3, #14
1001696e:	5ee1      	ldrsh	r1, [r4, r3]
10016970:	003b      	movs	r3, r7
10016972:	f000 f81f 	bl	100169b4 <_write_r>
10016976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016978:	ffffefff 	.word	0xffffefff

1001697c <__sseek>:
1001697c:	b570      	push	{r4, r5, r6, lr}
1001697e:	000c      	movs	r4, r1
10016980:	250e      	movs	r5, #14
10016982:	5f49      	ldrsh	r1, [r1, r5]
10016984:	f000 f860 	bl	10016a48 <_lseek_r>
10016988:	89a3      	ldrh	r3, [r4, #12]
1001698a:	1c42      	adds	r2, r0, #1
1001698c:	d103      	bne.n	10016996 <__sseek+0x1a>
1001698e:	4a05      	ldr	r2, [pc, #20]	; (100169a4 <__sseek+0x28>)
10016990:	4013      	ands	r3, r2
10016992:	81a3      	strh	r3, [r4, #12]
10016994:	e004      	b.n	100169a0 <__sseek+0x24>
10016996:	2280      	movs	r2, #128	; 0x80
10016998:	0152      	lsls	r2, r2, #5
1001699a:	4313      	orrs	r3, r2
1001699c:	81a3      	strh	r3, [r4, #12]
1001699e:	6560      	str	r0, [r4, #84]	; 0x54
100169a0:	bd70      	pop	{r4, r5, r6, pc}
100169a2:	46c0      	nop			; (mov r8, r8)
100169a4:	ffffefff 	.word	0xffffefff

100169a8 <__sclose>:
100169a8:	b510      	push	{r4, lr}
100169aa:	230e      	movs	r3, #14
100169ac:	5ec9      	ldrsh	r1, [r1, r3]
100169ae:	f000 f815 	bl	100169dc <_close_r>
100169b2:	bd10      	pop	{r4, pc}

100169b4 <_write_r>:
100169b4:	b570      	push	{r4, r5, r6, lr}
100169b6:	0005      	movs	r5, r0
100169b8:	0008      	movs	r0, r1
100169ba:	0011      	movs	r1, r2
100169bc:	2200      	movs	r2, #0
100169be:	4c06      	ldr	r4, [pc, #24]	; (100169d8 <_write_r+0x24>)
100169c0:	6022      	str	r2, [r4, #0]
100169c2:	001a      	movs	r2, r3
100169c4:	f7f5 fc24 	bl	1000c210 <_write>
100169c8:	1c43      	adds	r3, r0, #1
100169ca:	d103      	bne.n	100169d4 <_write_r+0x20>
100169cc:	6823      	ldr	r3, [r4, #0]
100169ce:	2b00      	cmp	r3, #0
100169d0:	d000      	beq.n	100169d4 <_write_r+0x20>
100169d2:	602b      	str	r3, [r5, #0]
100169d4:	bd70      	pop	{r4, r5, r6, pc}
100169d6:	46c0      	nop			; (mov r8, r8)
100169d8:	1001b658 	.word	0x1001b658

100169dc <_close_r>:
100169dc:	2300      	movs	r3, #0
100169de:	b570      	push	{r4, r5, r6, lr}
100169e0:	4c06      	ldr	r4, [pc, #24]	; (100169fc <_close_r+0x20>)
100169e2:	0005      	movs	r5, r0
100169e4:	0008      	movs	r0, r1
100169e6:	6023      	str	r3, [r4, #0]
100169e8:	f7f1 fd1a 	bl	10008420 <_close>
100169ec:	1c43      	adds	r3, r0, #1
100169ee:	d103      	bne.n	100169f8 <_close_r+0x1c>
100169f0:	6823      	ldr	r3, [r4, #0]
100169f2:	2b00      	cmp	r3, #0
100169f4:	d000      	beq.n	100169f8 <_close_r+0x1c>
100169f6:	602b      	str	r3, [r5, #0]
100169f8:	bd70      	pop	{r4, r5, r6, pc}
100169fa:	46c0      	nop			; (mov r8, r8)
100169fc:	1001b658 	.word	0x1001b658

10016a00 <_fstat_r>:
10016a00:	2300      	movs	r3, #0
10016a02:	b570      	push	{r4, r5, r6, lr}
10016a04:	4c06      	ldr	r4, [pc, #24]	; (10016a20 <_fstat_r+0x20>)
10016a06:	0005      	movs	r5, r0
10016a08:	0008      	movs	r0, r1
10016a0a:	0011      	movs	r1, r2
10016a0c:	6023      	str	r3, [r4, #0]
10016a0e:	f7f1 fd0b 	bl	10008428 <_fstat>
10016a12:	1c43      	adds	r3, r0, #1
10016a14:	d103      	bne.n	10016a1e <_fstat_r+0x1e>
10016a16:	6823      	ldr	r3, [r4, #0]
10016a18:	2b00      	cmp	r3, #0
10016a1a:	d000      	beq.n	10016a1e <_fstat_r+0x1e>
10016a1c:	602b      	str	r3, [r5, #0]
10016a1e:	bd70      	pop	{r4, r5, r6, pc}
10016a20:	1001b658 	.word	0x1001b658

10016a24 <_isatty_r>:
10016a24:	2300      	movs	r3, #0
10016a26:	b570      	push	{r4, r5, r6, lr}
10016a28:	4c06      	ldr	r4, [pc, #24]	; (10016a44 <_isatty_r+0x20>)
10016a2a:	0005      	movs	r5, r0
10016a2c:	0008      	movs	r0, r1
10016a2e:	6023      	str	r3, [r4, #0]
10016a30:	f7f1 fd00 	bl	10008434 <_isatty>
10016a34:	1c43      	adds	r3, r0, #1
10016a36:	d103      	bne.n	10016a40 <_isatty_r+0x1c>
10016a38:	6823      	ldr	r3, [r4, #0]
10016a3a:	2b00      	cmp	r3, #0
10016a3c:	d000      	beq.n	10016a40 <_isatty_r+0x1c>
10016a3e:	602b      	str	r3, [r5, #0]
10016a40:	bd70      	pop	{r4, r5, r6, pc}
10016a42:	46c0      	nop			; (mov r8, r8)
10016a44:	1001b658 	.word	0x1001b658

10016a48 <_lseek_r>:
10016a48:	b570      	push	{r4, r5, r6, lr}
10016a4a:	0005      	movs	r5, r0
10016a4c:	0008      	movs	r0, r1
10016a4e:	0011      	movs	r1, r2
10016a50:	2200      	movs	r2, #0
10016a52:	4c06      	ldr	r4, [pc, #24]	; (10016a6c <_lseek_r+0x24>)
10016a54:	6022      	str	r2, [r4, #0]
10016a56:	001a      	movs	r2, r3
10016a58:	f7f1 fcee 	bl	10008438 <_lseek>
10016a5c:	1c43      	adds	r3, r0, #1
10016a5e:	d103      	bne.n	10016a68 <_lseek_r+0x20>
10016a60:	6823      	ldr	r3, [r4, #0]
10016a62:	2b00      	cmp	r3, #0
10016a64:	d000      	beq.n	10016a68 <_lseek_r+0x20>
10016a66:	602b      	str	r3, [r5, #0]
10016a68:	bd70      	pop	{r4, r5, r6, pc}
10016a6a:	46c0      	nop			; (mov r8, r8)
10016a6c:	1001b658 	.word	0x1001b658

10016a70 <memchr>:
10016a70:	b2c9      	uxtb	r1, r1
10016a72:	1882      	adds	r2, r0, r2
10016a74:	4290      	cmp	r0, r2
10016a76:	d004      	beq.n	10016a82 <memchr+0x12>
10016a78:	7803      	ldrb	r3, [r0, #0]
10016a7a:	428b      	cmp	r3, r1
10016a7c:	d002      	beq.n	10016a84 <memchr+0x14>
10016a7e:	3001      	adds	r0, #1
10016a80:	e7f8      	b.n	10016a74 <memchr+0x4>
10016a82:	2000      	movs	r0, #0
10016a84:	4770      	bx	lr
	...

10016a88 <_read_r>:
10016a88:	b570      	push	{r4, r5, r6, lr}
10016a8a:	0005      	movs	r5, r0
10016a8c:	0008      	movs	r0, r1
10016a8e:	0011      	movs	r1, r2
10016a90:	2200      	movs	r2, #0
10016a92:	4c06      	ldr	r4, [pc, #24]	; (10016aac <_read_r+0x24>)
10016a94:	6022      	str	r2, [r4, #0]
10016a96:	001a      	movs	r2, r3
10016a98:	f7f5 fb9a 	bl	1000c1d0 <_read>
10016a9c:	1c43      	adds	r3, r0, #1
10016a9e:	d103      	bne.n	10016aa8 <_read_r+0x20>
10016aa0:	6823      	ldr	r3, [r4, #0]
10016aa2:	2b00      	cmp	r3, #0
10016aa4:	d000      	beq.n	10016aa8 <_read_r+0x20>
10016aa6:	602b      	str	r3, [r5, #0]
10016aa8:	bd70      	pop	{r4, r5, r6, pc}
10016aaa:	46c0      	nop			; (mov r8, r8)
10016aac:	1001b658 	.word	0x1001b658
10016ab0:	10008788 	.word	0x10008788
10016ab4:	1000878e 	.word	0x1000878e
10016ab8:	1000878e 	.word	0x1000878e
10016abc:	10008788 	.word	0x10008788
10016ac0:	1000878e 	.word	0x1000878e
10016ac4:	1000878e 	.word	0x1000878e
10016ac8:	1000878e 	.word	0x1000878e
10016acc:	1000878e 	.word	0x1000878e
10016ad0:	1000878e 	.word	0x1000878e
10016ad4:	1000878e 	.word	0x1000878e
10016ad8:	1000878e 	.word	0x1000878e
10016adc:	1000878e 	.word	0x1000878e
10016ae0:	1000878e 	.word	0x1000878e
10016ae4:	1000878e 	.word	0x1000878e
10016ae8:	1000878e 	.word	0x1000878e
10016aec:	1000878e 	.word	0x1000878e
10016af0:	1000878e 	.word	0x1000878e
10016af4:	1000878e 	.word	0x1000878e
10016af8:	1000878e 	.word	0x1000878e
10016afc:	1000878e 	.word	0x1000878e
10016b00:	10008788 	.word	0x10008788
10016b04:	10008788 	.word	0x10008788
10016b08:	1000878e 	.word	0x1000878e
10016b0c:	1000878e 	.word	0x1000878e
10016b10:	1000878e 	.word	0x1000878e
10016b14:	1000878e 	.word	0x1000878e
10016b18:	1000878e 	.word	0x1000878e
10016b1c:	1000878e 	.word	0x1000878e
10016b20:	1000878e 	.word	0x1000878e
10016b24:	1000878e 	.word	0x1000878e
10016b28:	1000878e 	.word	0x1000878e
10016b2c:	1000878e 	.word	0x1000878e
10016b30:	1000878e 	.word	0x1000878e
10016b34:	1000878e 	.word	0x1000878e
10016b38:	1000878e 	.word	0x1000878e
10016b3c:	1000878e 	.word	0x1000878e
10016b40:	10008788 	.word	0x10008788
10016b44:	1000878e 	.word	0x1000878e
10016b48:	1000878e 	.word	0x1000878e
10016b4c:	1000878e 	.word	0x1000878e
10016b50:	1000878e 	.word	0x1000878e
10016b54:	1000878e 	.word	0x1000878e
10016b58:	1000878e 	.word	0x1000878e
10016b5c:	1000878e 	.word	0x1000878e
10016b60:	1000878e 	.word	0x1000878e
10016b64:	1000878e 	.word	0x1000878e
10016b68:	1000878e 	.word	0x1000878e
10016b6c:	1000878e 	.word	0x1000878e
10016b70:	1000878e 	.word	0x1000878e
10016b74:	1000878e 	.word	0x1000878e
10016b78:	1000878e 	.word	0x1000878e
10016b7c:	1000878e 	.word	0x1000878e
10016b80:	1000878e 	.word	0x1000878e
10016b84:	1000878e 	.word	0x1000878e
10016b88:	10008788 	.word	0x10008788
10016b8c:	1000878e 	.word	0x1000878e
10016b90:	1000878e 	.word	0x1000878e
10016b94:	10008788 	.word	0x10008788
10016b98:	0000000d 	.word	0x0000000d
10016b9c:	736d735b 	.word	0x736d735b
10016ba0:	656c625f 	.word	0x656c625f
10016ba4:	6961705f 	.word	0x6961705f
10016ba8:	65725f72 	.word	0x65725f72
10016bac:	73657571 	.word	0x73657571
10016bb0:	6e665f74 	.word	0x6e665f74
10016bb4:	5009095d 	.word	0x5009095d
10016bb8:	69726961 	.word	0x69726961
10016bbc:	7220676e 	.word	0x7220676e
10016bc0:	65757165 	.word	0x65757165
10016bc4:	2e2e7473 	.word	0x2e2e7473
10016bc8:	0000002e 	.word	0x0000002e
10016bcc:	736d735b 	.word	0x736d735b
10016bd0:	656c625f 	.word	0x656c625f
10016bd4:	776f705f 	.word	0x776f705f
10016bd8:	645f7265 	.word	0x645f7265
10016bdc:	5d6e776f 	.word	0x5d6e776f
10016be0:	00000000 	.word	0x00000000
10016be4:	736d735b 	.word	0x736d735b
10016be8:	656c625f 	.word	0x656c625f
10016bec:	776f705f 	.word	0x776f705f
10016bf0:	645f7265 	.word	0x645f7265
10016bf4:	5d6e776f 	.word	0x5d6e776f
10016bf8:	6f745309 	.word	0x6f745309
10016bfc:	6e697070 	.word	0x6e697070
10016c00:	6f632067 	.word	0x6f632067
10016c04:	6e616d6d 	.word	0x6e616d6d
10016c08:	65722064 	.word	0x65722064
10016c0c:	76696563 	.word	0x76696563
10016c10:	64206465 	.word	0x64206465
10016c14:	6e697275 	.word	0x6e697275
10016c18:	64612067 	.word	0x64612067
10016c1c:	74726576 	.word	0x74726576
10016c20:	6d657369 	.word	0x6d657369
10016c24:	2e746e65 	.word	0x2e746e65
10016c28:	6f745320 	.word	0x6f745320
10016c2c:	6e697070 	.word	0x6e697070
10016c30:	2e2e2e67 	.word	0x2e2e2e67
10016c34:	00000020 	.word	0x00000020
10016c38:	6c696166 	.word	0x6c696166
10016c3c:	21216465 	.word	0x21216465
10016c40:	00000021 	.word	0x00000021
10016c44:	656e6f64 	.word	0x656e6f64
10016c48:	00000021 	.word	0x00000021
10016c4c:	736d735b 	.word	0x736d735b
10016c50:	656c625f 	.word	0x656c625f
10016c54:	776f705f 	.word	0x776f705f
10016c58:	645f7265 	.word	0x645f7265
10016c5c:	5d6e776f 	.word	0x5d6e776f
10016c60:	65440909 	.word	0x65440909
10016c64:	65636976 	.word	0x65636976
10016c68:	69617020 	.word	0x69617020
10016c6c:	2e646572 	.word	0x2e646572
10016c70:	64202e2e 	.word	0x64202e2e
10016c74:	62617369 	.word	0x62617369
10016c78:	676e696c 	.word	0x676e696c
10016c7c:	746e6920 	.word	0x746e6920
10016c80:	75727265 	.word	0x75727265
10016c84:	20737470 	.word	0x20737470
10016c88:	77732026 	.word	0x77732026
10016c8c:	68637469 	.word	0x68637469
10016c90:	20676e69 	.word	0x20676e69
10016c94:	6e776f64 	.word	0x6e776f64
10016c98:	6e657320 	.word	0x6e657320
10016c9c:	73726f73 	.word	0x73726f73
10016ca0:	00000000 	.word	0x00000000
10016ca4:	736d735b 	.word	0x736d735b
10016ca8:	656c625f 	.word	0x656c625f
10016cac:	776f705f 	.word	0x776f705f
10016cb0:	645f7265 	.word	0x645f7265
10016cb4:	5d6e776f 	.word	0x5d6e776f
10016cb8:	75430909 	.word	0x75430909
10016cbc:	6e657272 	.word	0x6e657272
10016cc0:	20796c74 	.word	0x20796c74
10016cc4:	69646e69 	.word	0x69646e69
10016cc8:	69746163 	.word	0x69746163
10016ccc:	0000676e 	.word	0x0000676e
10016cd0:	736d735b 	.word	0x736d735b
10016cd4:	656c625f 	.word	0x656c625f
10016cd8:	776f705f 	.word	0x776f705f
10016cdc:	645f7265 	.word	0x645f7265
10016ce0:	5d6e776f 	.word	0x5d6e776f
10016ce4:	65440909 	.word	0x65440909
10016ce8:	65636976 	.word	0x65636976
10016cec:	6e6f6320 	.word	0x6e6f6320
10016cf0:	7463656e 	.word	0x7463656e
10016cf4:	2e2e6465 	.word	0x2e2e6465
10016cf8:	6964202e 	.word	0x6964202e
10016cfc:	6e6f6373 	.word	0x6e6f6373
10016d00:	7463656e 	.word	0x7463656e
10016d04:	00676e69 	.word	0x00676e69
10016d08:	736d735b 	.word	0x736d735b
10016d0c:	656c625f 	.word	0x656c625f
10016d10:	7664615f 	.word	0x7664615f
10016d14:	7065725f 	.word	0x7065725f
10016d18:	5f74726f 	.word	0x5f74726f
10016d1c:	095d6e66 	.word	0x095d6e66
10016d20:	76644109 	.word	0x76644109
10016d24:	69747265 	.word	0x69747265
10016d28:	656d6573 	.word	0x656d6573
10016d2c:	7420746e 	.word	0x7420746e
10016d30:	6f656d69 	.word	0x6f656d69
10016d34:	2e2e7475 	.word	0x2e2e7475
10016d38:	0000002e 	.word	0x0000002e
10016d3c:	736d735b 	.word	0x736d735b
10016d40:	656c625f 	.word	0x656c625f
10016d44:	6e6f635f 	.word	0x6e6f635f
10016d48:	7463656e 	.word	0x7463656e
10016d4c:	665f6465 	.word	0x665f6465
10016d50:	09095d6e 	.word	0x09095d6e
10016d54:	69766544 	.word	0x69766544
10016d58:	20736563 	.word	0x20736563
10016d5c:	6e6e6f63 	.word	0x6e6e6f63
10016d60:	65746365 	.word	0x65746365
10016d64:	2e2e2e64 	.word	0x2e2e2e64
10016d68:	00000000 	.word	0x00000000
10016d6c:	20454c42 	.word	0x20454c42
10016d70:	3a4f2f54 	.word	0x3a4f2f54
10016d74:	30303520 	.word	0x30303520
10016d78:	736d2030 	.word	0x736d2030
10016d7c:	00000000 	.word	0x00000000
10016d80:	736d735b 	.word	0x736d735b
10016d84:	656c625f 	.word	0x656c625f
10016d88:	6e6f635f 	.word	0x6e6f635f
10016d8c:	7463656e 	.word	0x7463656e
10016d90:	665f6465 	.word	0x665f6465
10016d94:	09095d6e 	.word	0x09095d6e
10016d98:	6e6f7257 	.word	0x6e6f7257
10016d9c:	4c422067 	.word	0x4c422067
10016da0:	74732045 	.word	0x74732045
10016da4:	2e657461 	.word	0x2e657461
10016da8:	73202e2e 	.word	0x73202e2e
10016dac:	74747568 	.word	0x74747568
10016db0:	20676e69 	.word	0x20676e69
10016db4:	6e776f64 	.word	0x6e776f64
10016db8:	00000000 	.word	0x00000000
10016dbc:	736d735b 	.word	0x736d735b
10016dc0:	656c625f 	.word	0x656c625f
10016dc4:	6961705f 	.word	0x6961705f
10016dc8:	5f646572 	.word	0x5f646572
10016dcc:	005d6e66 	.word	0x005d6e66
10016dd0:	736d735b 	.word	0x736d735b
10016dd4:	656c625f 	.word	0x656c625f
10016dd8:	7664615f 	.word	0x7664615f
10016ddc:	69747265 	.word	0x69747265
10016de0:	095d6573 	.word	0x095d6573
10016de4:	76644109 	.word	0x76644109
10016de8:	69747265 	.word	0x69747265
10016dec:	656d6573 	.word	0x656d6573
10016df0:	6420746e 	.word	0x6420746e
10016df4:	20617461 	.word	0x20617461
10016df8:	20746573 	.word	0x20746573
10016dfc:	6c696166 	.word	0x6c696166
10016e00:	00216465 	.word	0x00216465
10016e04:	736d735b 	.word	0x736d735b
10016e08:	656c625f 	.word	0x656c625f
10016e0c:	7664615f 	.word	0x7664615f
10016e10:	69747265 	.word	0x69747265
10016e14:	095d6573 	.word	0x095d6573
10016e18:	454c4209 	.word	0x454c4209
10016e1c:	61747320 	.word	0x61747320
10016e20:	64657472 	.word	0x64657472
10016e24:	76646120 	.word	0x76646120
10016e28:	69747265 	.word	0x69747265
10016e2c:	656d6573 	.word	0x656d6573
10016e30:	0000746e 	.word	0x0000746e
10016e34:	736d735b 	.word	0x736d735b
10016e38:	7265735f 	.word	0x7265735f
10016e3c:	65636976 	.word	0x65636976
10016e40:	7664615f 	.word	0x7664615f
10016e44:	69747265 	.word	0x69747265
10016e48:	095d6573 	.word	0x095d6573
10016e4c:	20454c42 	.word	0x20454c42
10016e50:	65766461 	.word	0x65766461
10016e54:	73697472 	.word	0x73697472
10016e58:	6e656d65 	.word	0x6e656d65
10016e5c:	74732074 	.word	0x74732074
10016e60:	20747261 	.word	0x20747261
10016e64:	6c696166 	.word	0x6c696166
10016e68:	203a6465 	.word	0x203a6465
10016e6c:	73616572 	.word	0x73616572
10016e70:	30206e6f 	.word	0x30206e6f
10016e74:	00782578 	.word	0x00782578
10016e78:	736d735b 	.word	0x736d735b
10016e7c:	656c625f 	.word	0x656c625f
10016e80:	7369645f 	.word	0x7369645f
10016e84:	6e6e6f63 	.word	0x6e6e6f63
10016e88:	65746365 	.word	0x65746365
10016e8c:	6e665f64 	.word	0x6e665f64
10016e90:	6550095d 	.word	0x6550095d
10016e94:	64207265 	.word	0x64207265
10016e98:	6f637369 	.word	0x6f637369
10016e9c:	63656e6e 	.word	0x63656e6e
10016ea0:	2e646574 	.word	0x2e646574
10016ea4:	68202e2e 	.word	0x68202e2e
10016ea8:	6c646e61 	.word	0x6c646e61
10016eac:	30203a65 	.word	0x30203a65
10016eb0:	34302578 	.word	0x34302578
10016eb4:	72202c78 	.word	0x72202c78
10016eb8:	6f736165 	.word	0x6f736165
10016ebc:	30203a6e 	.word	0x30203a6e
10016ec0:	32302578 	.word	0x32302578
10016ec4:	00000078 	.word	0x00000078
10016ec8:	736d735b 	.word	0x736d735b
10016ecc:	656c625f 	.word	0x656c625f
10016ed0:	6174735f 	.word	0x6174735f
10016ed4:	70757472 	.word	0x70757472
10016ed8:	5309095d 	.word	0x5309095d
10016edc:	74726174 	.word	0x74726174
10016ee0:	20676e69 	.word	0x20676e69
10016ee4:	2e2e7075 	.word	0x2e2e7075
10016ee8:	0000002e 	.word	0x0000002e
10016eec:	49544f4e 	.word	0x49544f4e
10016ef0:	41434946 	.word	0x41434946
10016ef4:	4e4f4954 	.word	0x4e4f4954
10016ef8:	52524520 	.word	0x52524520
10016efc:	2121524f 	.word	0x2121524f
10016f00:	00000000 	.word	0x00000000
10016f04:	544f4e20 	.word	0x544f4e20
10016f08:	74657320 	.word	0x74657320
10016f0c:	0000203f 	.word	0x0000203f

10016f10 <sms_ble_gap_cb>:
	...
10016f1c:	100085a1 00000000 100085e1 10008729     ............)...
	...
10016f34:	10008649 10008469 00000000 00000000     I...i...........
	...

10016f5c <sms_ble_gatt_server_cb>:
10016f5c:	1000843d 10008459 00000000 00000000     =...Y...........
	...
10016f84:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016f94:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016fa4:	656c6968 74657320 676e6974 20707520     hile setting up 
10016fb4:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016fc4:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016fd4:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016fe4:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016ff4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017004:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10017014:	656c6968 74657320 676e6974 20707520     hile setting up 
10017024:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10017034:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10017044:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10017054:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10017064:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10017074:	61570909 676e696b 20707520 00000000     ..Waking up ....
10017084:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10017094:	6f4e0909 73752074 73206465 65746174     ..Not used state
100170a4:	2e2e2e73 00000000 736d735b 7475625f     s.......[sms_but
100170b4:	5f6e6f74 095d6e66 6f4e0909 73752074     ton_fn]...Not us
100170c4:	73206465 65746174 002e2e2e 736d735b     ed state....[sms
100170d4:	7475625f 5f6e6f74 095d6e66 68530909     _button_fn]...Sh
100170e4:	69747475 6420676e 206e776f 00000000     utting down ....
100170f4:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10017104:	6f4e0909 0000656e 736d735b 7475625f     ..None..[sms_but
10017114:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10017124:	5d736563 72655309 65636976 65642073     ces].Services de
10017134:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10017144:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10017154:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10017164:	69767265 5d736563 72655309 65636976     ervices].Service
10017174:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10017184:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10017194:	00000000 626f7250 206d656c 6c696877     ....Problem whil
100171a4:	65732065 6e697474 70672067 70206f69     e setting gpio p
100171b4:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
100171c4:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
100171d4:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
100171e4:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
100171f4:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
10017204:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10017214:	6d656c62 69687720 7320656c 69747465     blem while setti
10017224:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10017234:	00006e69 736d735b 75706d5f 6665645f     in..[sms_mpu_def
10017244:	5f656e69 76726573 73656369 6553095d     ine_services].Se
10017254:	63697672 64207365 6e696665 20676e69     rvices defining 
10017264:	6c696166 202c6465 73616572 30206e6f     failed, reason 0
10017274:	00782578 736d735b 75706d5f 6665645f     x%x.[sms_mpu_def
10017284:	5f656e69 76726573 73656369 6553095d     ine_services].Se
10017294:	63697672 64207365 6e696665 202c6465     rvices defined, 
100172a4:	20534d53 2055504d 646e6168 203a656c     SMS MPU handle: 
100172b4:	00006425 736d735b 64656c5f 6970675f     %d..[sms_led_gpi
100172c4:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
100172d4:	6c696877 65732065 6e697474 70752067     while setting up
100172e4:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
100172f4:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
10017304:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10017314:	20656c69 74746573 20676e69 56207075     ile setting up V
10017324:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10017334:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10017344:	72617453 676e6974 65727020 72757373     Starting pressur
10017354:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10017364:	6572705f 72757373 74735f65 75747261     _pressure_startu
10017374:	09095d70 69614609 2064656c 72206f74     p]...Failed to r
10017384:	74657365 65727020 72757373 65642065     eset pressure de
10017394:	65636976 00000000 736d735b 6572705f     vice....[sms_pre
100173a4:	72757373 74735f65 75747261 09095d70     ssure_startup]..
100173b4:	69614609 2064656c 69206f74 6974696e     .Failed to initi
100173c4:	7a696c61 72702065 75737365 64206572     alize pressure d
100173d4:	63697665 00000065 736d735b 6572705f     evice...[sms_pre
100173e4:	72757373 736d5f65 635f3835 75636c61     ssure_ms58_calcu
100173f4:	6574616c 6574205d 7265706d 72757461     late] temperatur
10017404:	203d2065 20646c25 65727020 72757373     e = %ld  pressur
10017414:	203d2065 00646c25 736d735b 6572705f     e = %ld.[sms_pre
10017424:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017434:	65636976 53095d73 69767265 20736563     vices].Services 
10017444:	69666564 676e696e 69616620 2c64656c     defining failed,
10017454:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10017464:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10017474:	656e6966 7265735f 65636976 53095d73     fine_services].S
10017484:	69767265 20736563 69666564 2c64656e     ervices defined,
10017494:	534d5320 65727020 72757373 61682065      SMS pressure ha
100174a4:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
100174b4:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
100174c4:	6f430909 6e646c75 73207427 74726174     ..Couldn't start
100174d4:	554d4920 00000000 736d735b 6e65735f      IMU....[sms_sen
100174e4:	73726f73 6977735f 5d686374 43090909     sors_switch]...C
100174f4:	646c756f 2074276e 72617473 72702074     ouldn't start pr
10017504:	75737365 73206572 6f736e65 00000072     essure sensor...
10017514:	736d735b 6e65735f 73726f73 6977735f     [sms_sensors_swi
10017524:	5d686374 4d530909 6f772053 6e696b72     tch]..SMS workin
10017534:	6f6d2067 203a6564 00006425 736d735b     g mode: %d..[sms
10017544:	6175645f 6d69746c 735f7265 74726174     _dualtimer_start
10017554:	5309095d 74726174 20676e69 656d6974     ]..Starting time
10017564:	2e642572 6c202e2e 3a64616f 646c2520     r%d... load: %ld
10017574:	6564202c 3a79616c 646c2520 00000000     , delay: %ld....
10017584:	1000b1f0 1000b1fe 1000b20c 1000b21a     ................
10017594:	1000b228 1000b236 1000b244 1000b254     (...6...D...T...
100175a4:	1000b264 1000b274 1000b284 1000b294     d...t...........
100175b4:	1000b2a4 1000b2b4 1000b2c4 1000b2d4     ................
100175c4:	1000b2e4 1000b2f4 1000b304 1000b314     ................
100175d4:	1000b324 1000b334 1000b344 1000b354     $...4...D...T...
100175e4:	1000b364 1000b374 1000b384 1000b394     d...t...........
100175f4:	1000b3a2 1000b3b0 1000b3be 1000b3cc     ................
10017604:	1000b3da 1000b3e8 1000b3f6 1000b404     ................
10017614:	1000b414 1000b424 1000b434 1000b444     ....$...4...D...
10017624:	1000b454 1000b464 1000b474 1000b484     T...d...t.......
10017634:	1000b494 1000b4a4 1000b4b4 1000b4c4     ................
10017644:	1000b4d4 1000b4e4 1000b4f4 1000b504     ................
10017654:	1000b512 1000b520 1000b54c 1000b55a     .... ...L...Z...
10017664:	1000b568 1000b576 1000b584 1000b592     h...v...........
10017674:	1000b5a0 1000b5ae 1000b5bc 1000b5ca     ................
10017684:	1000b5d8 1000b5e6 1000b5f4 1000b602     ................
10017694:	1000b610 1000b61e 1000b62c 1000b63a     ........,...:...
100176a4:	1000b648 1000b656 1000b664 1000b672     H...V...d...r...
100176b4:	1000b680 1000b68e 1000b69c 1000b6aa     ................
100176c4:	1000b6b8 1000b6c6 1000b6d4 1000b6e2     ................
100176d4:	1000b6f0 1000b6fe 1000b70c 1000b71a     ................
100176e4:	1000b728 1000b736 1000b744 1000b752     (...6...D...R...
100176f4:	1000b760 1000b76e 1000b77c 1000b78a     `...n...|.......
10017704:	1000b798 1000b7a6 1000b7b4 1000b7c2     ................
10017714:	1000b7d0 1000b7de 1000b7ec 1000b7fa     ................
10017724:	1000b808 1000b816 1000b824 1000b832     ........$...2...
10017734:	1000b8cc 1000b8f4 1000b91c 1000b944     ............D...
10017744:	1000bb84 1000b974 1000b98c 1000ba04     ....t...........
10017754:	1000ba1c 1000b9a4 1000b9bc 1000b9d4     ................
10017764:	1000b9ec 1000ba34 1000bcf8 1000bcf8     ....4...........
10017774:	1000bcf8 1000bcf8 1000bcf8 1000bcf8     ................
10017784:	1000bcf8 1000bcf8 1000badc 1000baf4     ................
10017794:	1000bb0c 1000bb9a 1000ba64 1000bcf8     ........d.......
100177a4:	1000bcf8 1000bcf8 1000bcf8 1000bcf8     ................
100177b4:	1000bcf8 1000bb24 1000bb3c 1000bb54     ....$...<...T...
100177c4:	1000bb6c 1000bcf8 1000bcb0 1000bcc8     l...............
100177d4:	1000bcf8 1000bcf8 1000bbc6 1000bbdc     ................
100177e4:	1000bbf2 1000bc08 1000bcf8 1000bcf8     ................
100177f4:	1000bcf8 1000bcf8 1000bcf8 1000bcf8     ................
10017804:	1000bcf8 1000bcf8 1000b8b8 1000b8e0     ................
10017814:	1000b908 1000b930 1000b95c 1000ba4c     ....0...\...L...
10017824:	1000ba7c 1000ba94 1000baac 1000bac4     |...............
10017834:	1000bbb0 1000bc1e 1000bc98 1000bce0     ................
10017844:	1000c3da 1000c3ec 1000c3c2 1000c3c2     ................
10017854:	1000c3c2 1000c3da 1000c3c2 1000c3c2     ................
10017864:	1000cdde 1000ce52 1000cdc6 1000ce58     ....R.......X...
10017874:	1000cdcc 1000cdd2 1000cdd8 1000d538     ............8...
10017884:	1000d538 1000d538 1000d538 1000d538     8...8...8...8...
10017894:	1000d538 1000d538 1000d538 1000d538     8...8...8...8...
100178a4:	1000d538 1000d538 1000d538 1000d538     8...8...8...8...
100178b4:	1000d538 1000d538 1000d538 1000d538     8...8...8...8...
100178c4:	1000d538 1000d538 1000d556 1000d556     8...8...V...V...
100178d4:	1000d556 1000d556 1000d556 1000d556     V...V...V...V...
100178e4:	1000d556 1000d556 1000d556 1000d556     V...V...V...V...
100178f4:	1000d578 1000d578 1000d578 1000d578     x...x...x...x...
10017904:	1000d578 1000d578 1000d578 1000d578     x...x...x...x...
10017914:	1000d578 1000d578 1000d5a8 1000d5a8     x...x...........
10017924:	1000d5a8 1000d5a8 1000d5a8 1000d5a8     ................
10017934:	1000d5c2 1000d5c2 1000d5c2 1000d5c2     ................
10017944:	1000d5c2 1000d5c2 1000d5c2 1000d5c2     ................
10017954:	1000d5c2 1000d5dc 1000d5dc 1000d5fe     ................
10017964:	1000d5fe 1000d618 1000d5fe 34333231     ............1234
10017974:	00003635 efcdab00 00efcdab              56..........

10017980 <ble_mgr_gatt_server_handle>:
	...
10017998:	1000c2d5 1000c2fd 1000c345 00000000     ........E.......
100179a8:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100179b8:	65636552 64657669 00000000 6e616353     Received....Scan
100179c8:	676e696e 61662020 64656c69 00000000     ning  failed....
100179d8:	65766441 73697472 20676e69 6c696166     Advertising fail
100179e8:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
100179f8:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10017a08:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10017a18:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10017a28:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10017a38:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10017a48:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10017a58:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10017a68:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10017a78:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10017a88:	00000064 72616843 69725720 43206574     d...Char Write C
10017a98:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10017aa8:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10017ab8:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10017ac8:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10017ad8:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10017ae8:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017af8:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10017b08:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10017b18:	00000000 69766544 64206563 6f637369     ....Device disco
10017b28:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10017b38:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10017b48:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10017b58:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10017b68:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017b78:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017b88:	6c706d6f 64657465 63757320 73736563     ompleted success
10017b98:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017ba8:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017bb8:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017bc8:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017bd8:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017be8:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017bf8:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017c08:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10017c18:	206e6163 69766564 72206563 68636165     can device reach
10017c28:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10017c38:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10017c48:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10017c58:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017c68:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017c78:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017c88:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017c98:	52207463 65757165 46207473 656c6961     ct Request Faile
10017ca8:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017cb8:	72756465 6f632065 656c706d 20646574     edure completed 
10017cc8:	63637573 66737365 796c6c75 00000000     successfully....
10017cd8:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017ce8:	646e756f 206f7420 726f7473 68742065     ound to store th
10017cf8:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017d08:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017d18:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017d28:	76616c53 65532065 69727563 52207974     Slave Security R
10017d38:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017d48:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017d58:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017d68:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017d78:	20676e69 70736572 65736e6f 00000000     ing response....
10017d88:	72696150 71655220 74736575 41202d20     Pair Request - A
10017d98:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017da8:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017db8:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017dc8:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017dd8:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017de8:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017df8:	61656c50 45206573 7265746e 65687420     Please Enter the
10017e08:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017e18:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017e28:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017e38:	70657220 6620796c 656c6961 00000064      reply failed...
10017e48:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017e58:	70707573 6574726f 00000064 65746e45     supported...Ente
10017e68:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017e78:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017e88:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017e98:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017ea8:	76656420 20656369 76696465 00782520      device ediv %x.
10017eb8:	72656570 76656420 20656369 76696465     peer device ediv
10017ec8:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017ed8:	00782520 20656854 65646e69 73692078      %x.The index is
10017ee8:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017ef8:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017f08:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017f18:	20726565 69766564 69206563 6f6e2073     eer device is no
10017f28:	76612074 616c6961 2e656c62 00000000     t available.....
10017f38:	61656c50 75206573 6961706e 68742072     Please unpair th
10017f48:	65642065 65636976 6f726620 6570206d     e device from pe
10017f58:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017f68:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017f78:	20646e61 72617473 61702074 6e697269     and start pairin
10017f88:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017f98:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017fa8:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017fb8:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017fc8:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017fd8:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017fe8:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017ff8:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10018008:	7a696c61 6f697461 6166206e 64656c69     alization failed
10018018:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10018028:	61656c50 63206573 6b636568 65687420     Please check the
10018038:	776f7020 61207265 6320646e 656e6e6f      power and conne
10018048:	6f697463 202f206e 64726168 65726177     ction / hardware
10018058:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10018068:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10018078:	20656d61 20746573 6c696166 00006465     ame set failed..
10018088:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10018098:	5d676966 44420909 64646120 73736572     fig]..BD address
100180a8:	74656720 69616620 0064656c 656c625b      get failed.[ble
100180b8:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100180c8:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
100180d8:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
100180e8:	25583230 2c583230 64644120 73736572     02X%02X, Address
100180f8:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10018108:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018118:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10018128:	666e6f63 72756769 6f697461 6166206e     configuration fa
10018138:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10018148:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10018158:	454c4220 76654420 20656369 72646441      BLE Device Addr
10018168:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10018178:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10018188:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10018198:	69727563 72207974 65757165 73207473     curity request s
100181a8:	65636375 75667373 0000006c 76616c53     uccessful...Slav
100181b8:	65732065 69727563 72207974 65757165     e security reque
100181c8:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100181d8:	65746365 6f742064 65657020 65642072     ected to peer de
100181e8:	65636976 74697720 64612068 73657264     vice with addres
100181f8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10018208:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10018218:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10018228:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10018238:	61522067 6d6f646e 64646120 73736572     g Random address
10018248:	63757320 73736563 00002a2a 6f736552      success**..Reso
10018258:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10018268:	73736572 69616620 2a64656c 0000002a     ress failed**...
10018278:	2078614d 626d756e 6f207265 6f632066     Max number of co
10018288:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10018298:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
100182a8:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
100182b8:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
100182c8:	64656c69 53202d20 75746174 25203a73     iled - Status: %
100182d8:	00000064 23232323 23232323 65442323     d...##########De
100182e8:	65636976 756f4620 0000646e 23232323     vice Found..####
100182f8:	23232323 65442323 65636976 746f4e20     ######Device Not
10018308:	756f4620 0000646e 69766544 69206563      Found..Device i
10018318:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10018328:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10018338:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10018348:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10018358:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10018368:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018378:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018388:	69666963 61642063 65206174 6c62616e     cific data enabl
10018398:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
100183a8:	65766441 73697472 6e656d65 61642074     Advertisement da
100183b8:	73206174 66207465 656c6961 00000064     ta set failed...

100183c8 <ble_mgr_gap_handle>:
100183c8:	1000c261 1000c511 1000c285 1000c2ad     a...............
100183d8:	00000000 1000d18d 1000c38d 1000c429     ............)...
100183e8:	1000c76d 1000c5bd 1000c96d 1000c785     m.......m.......
100183f8:	1000caf9 1000cc3d 1000c44d 1000d3d9     ....=...M.......
	...
10018414:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10018424:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
10018434:	5f6e6f74 29286e66 00000000 316e7442     ton_fn()....Btn1
10018444:	746e6920 202e2e2e 00000000 656d6954      int... ....Time
10018454:	69203272 2e2e746e 0000202e 73756c66     r2 int... ..flus
10018464:	676e6968 00000021 73657250 65732073     hing!...Press se
10018474:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10018484:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10018494:	6e657645 65672074 69742074 756f656d     Event get timeou
100184a4:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
100184b4:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
100184c4:	04022e70                                         p.

100184c6 <CSWTCH.45>:
100184c6:	00100402                                         ...

100184c9 <CSWTCH.47>:
100184c9:	03010300 03030303 03030303 02020303              ...............

100184d8 <client_conf_uuid>:
100184d8:	29042902                                         .)

100184da <presentation_format_uuid>:
100184da:	29012904                                         .)

100184dc <user_desc_uuid>:
100184dc:	29032901                                         .)

100184de <server_conf_uuid>:
100184de:	29002903                                         .)

100184e0 <extended_props_uuid>:
100184e0:	28022900                                         .)

100184e2 <include_uuid>:
100184e2:	28032802                                         .(

100184e4 <char_uuid>:
100184e4:	00002803 00776f70 00000000              .(..pow.....

100184f0 <TWO52>:
100184f0:	00000000 43300000 00000000 c3300000     ......0C......0.
10018500:	100131ce 100130f2 100131b0 10013188     .1...0...1...1..
10018510:	100131b0 1001317c 100131b0 10013188     .1..|1...1...1..
10018520:	100130f2 100130f2 1001317c 10013188     .0...0..|1...1..
10018530:	10013234 10013234 10013234 100131b6     42..42..42...1..
10018540:	100130f2 100130f2 1001319c 10013186     .0...0...1...1..
10018550:	1001319c 1001317c 1001319c 10013186     .1..|1...1...1..
10018560:	100130f2 100130f2 1001317c 10013186     .0...0..|1...1..
10018570:	10013234 10013234 10013234 10013240     42..42..42..@2..
10018580:	1001352c 1001348a 1001348a 10013488     ,5...4...4...4..
10018590:	1001351e 1001351e 10013514 10013488     .5...5...5...4..
100185a0:	1001351e 10013514 1001351e 10013488     .5...5...5...4..
100185b0:	10013524 10013524 10013524 100135ae     $5..$5..$5...5..
100185c0:	100142dc 100141aa 100142b0 100141a0     .B...A...B...A..
100185d0:	100142b0 100142ba 100142b0 100141a0     .B...B...B...A..
100185e0:	100141aa 100141aa 100142ba 100141a0     .A...A...B...A..
100185f0:	10014196 10014196 10014196 1001450c     .A...A...A...E..
10018600:	10014b24 100149e4 100149e4 100149e2     $K...I...I...I..
10018610:	10014afc 10014afc 10014aee 100149e2     .J...J...J...I..
10018620:	10014afc 10014aee 10014afc 100149e2     .J...J...J...I..
10018630:	10014b04 10014b04 10014b04 10014d04     .K...K...K...M..
10018640:	00000043                                C...

10018644 <_global_impure_ptr>:
10018644:	10018708                                ....

10018648 <__sf_fake_stdin>:
	...

10018668 <__sf_fake_stdout>:
	...

10018688 <__sf_fake_stderr>:
	...
100186a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100186b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100186c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
100186d8:	00006665                                ef..

100186dc <_init>:
100186dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100186de:	46c0      	nop			; (mov r8, r8)
100186e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100186e2:	bc08      	pop	{r3}
100186e4:	469e      	mov	lr, r3
100186e6:	4770      	bx	lr

100186e8 <__init_array_start>:
100186e8:	100080b1 	.word	0x100080b1

100186ec <_fini>:
100186ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100186ee:	46c0      	nop			; (mov r8, r8)
100186f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100186f2:	bc08      	pop	{r3}
100186f4:	469e      	mov	lr, r3
100186f6:	4770      	bx	lr

100186f8 <__fini_array_start>:
100186f8:	10008089 	.word	0x10008089
