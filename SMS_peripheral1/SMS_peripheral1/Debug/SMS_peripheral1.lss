
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010594  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  10018594  10018594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef8  10018604  10018604  00018604  2**2
                  ALLOC
  3 .stack        00000804  1001b4fc  1001b4fc  00018604  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018604  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001862c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bc78  00000000  00000000  000186e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052e5  00000000  00000000  00064358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000aa32  00000000  00000000  0006963d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b78  00000000  00000000  0007406f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b38  00000000  00000000  00074be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c350  00000000  00000000  0007571f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000160dc  00000000  00000000  00081a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001418de  00000000  00000000  00097b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d00  00000000  00000000  001d942c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018594 	.word	0x10018594
10008068:	10018594 	.word	0x10018594
1000806c:	10018604 	.word	0x10018604
10008070:	1001b4fc 	.word	0x1001b4fc
10008074:	10018604 	.word	0x10018604
10008078:	10018598 	.word	0x10018598
1000807c:	10018608 	.word	0x10018608
10008080:	100161d5 	.word	0x100161d5
10008084:	1000e689 	.word	0x1000e689

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10018604 	.word	0x10018604
100080a8:	00000000 	.word	0x00000000
100080ac:	10018594 	.word	0x10018594

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10018608 	.word	0x10018608
100080dc:	10018594 	.word	0x10018594
100080e0:	10018594 	.word	0x10018594
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10018620 	.word	0x10018620

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10018620 	.word	0x10018620

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10018620 	.word	0x10018620

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000c409 	.word	0x1000c409

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000bfa1 	.word	0x1000bfa1
10008388:	40003400 	.word	0x40003400
1000838c:	1000b529 	.word	0x1000b529

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10018624 	.word	0x10018624
1000841c:	1001bd00 	.word	0x1001bd00

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <MahonyQuaternionUpdate>:


// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
1000843c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000843e:	465f      	mov	r7, fp
10008440:	4656      	mov	r6, sl
10008442:	464d      	mov	r5, r9
10008444:	4644      	mov	r4, r8
10008446:	b4f0      	push	{r4, r5, r6, r7}
10008448:	b09b      	sub	sp, #108	; 0x6c
1000844a:	1c0c      	adds	r4, r1, #0
1000844c:	1c16      	adds	r6, r2, #0
1000844e:	9307      	str	r3, [sp, #28]
	float q1 = mpu_device.output.q[0];   // short name local variable for readability
10008450:	4bfd      	ldr	r3, [pc, #1012]	; (10008848 <MahonyQuaternionUpdate+0x40c>)
10008452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
10008454:	4692      	mov	sl, r2
	float q2 = mpu_device.output.q[1];
10008456:	6e5a      	ldr	r2, [r3, #100]	; 0x64
10008458:	4691      	mov	r9, r2
	float q3 = mpu_device.output.q[2];
1000845a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000845c:	9201      	str	r2, [sp, #4]
	float q4 = mpu_device.output.q[3];
1000845e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10008460:	9302      	str	r3, [sp, #8]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
10008462:	4dfa      	ldr	r5, [pc, #1000]	; (1000884c <MahonyQuaternionUpdate+0x410>)
10008464:	1c01      	adds	r1, r0, #0
10008466:	9003      	str	r0, [sp, #12]
10008468:	47a8      	blx	r5
1000846a:	9000      	str	r0, [sp, #0]
1000846c:	1c21      	adds	r1, r4, #0
1000846e:	1c20      	adds	r0, r4, #0
10008470:	47a8      	blx	r5
10008472:	4ff7      	ldr	r7, [pc, #988]	; (10008850 <MahonyQuaternionUpdate+0x414>)
10008474:	9004      	str	r0, [sp, #16]
10008476:	1c01      	adds	r1, r0, #0
10008478:	9800      	ldr	r0, [sp, #0]
1000847a:	47b8      	blx	r7
1000847c:	9005      	str	r0, [sp, #20]
1000847e:	1c31      	adds	r1, r6, #0
10008480:	1c30      	adds	r0, r6, #0
10008482:	47a8      	blx	r5
10008484:	9006      	str	r0, [sp, #24]
10008486:	9904      	ldr	r1, [sp, #16]
10008488:	9800      	ldr	r0, [sp, #0]
1000848a:	47b8      	blx	r7
1000848c:	9000      	str	r0, [sp, #0]
1000848e:	9906      	ldr	r1, [sp, #24]
10008490:	9800      	ldr	r0, [sp, #0]
10008492:	47b8      	blx	r7
10008494:	4bef      	ldr	r3, [pc, #956]	; (10008854 <MahonyQuaternionUpdate+0x418>)
10008496:	4798      	blx	r3
10008498:	9004      	str	r0, [sp, #16]
	if (norm == 0.0f) return; // handle NaN
1000849a:	2100      	movs	r1, #0
1000849c:	4bee      	ldr	r3, [pc, #952]	; (10008858 <MahonyQuaternionUpdate+0x41c>)
1000849e:	4798      	blx	r3
100084a0:	2800      	cmp	r0, #0
100084a2:	d000      	beq.n	100084a6 <MahonyQuaternionUpdate+0x6a>
100084a4:	e23c      	b.n	10008920 <MahonyQuaternionUpdate+0x4e4>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
100084a6:	4de9      	ldr	r5, [pc, #932]	; (1000884c <MahonyQuaternionUpdate+0x410>)
100084a8:	9926      	ldr	r1, [sp, #152]	; 0x98
100084aa:	1c08      	adds	r0, r1, #0
100084ac:	47a8      	blx	r5
100084ae:	9000      	str	r0, [sp, #0]
100084b0:	9927      	ldr	r1, [sp, #156]	; 0x9c
100084b2:	1c08      	adds	r0, r1, #0
100084b4:	47a8      	blx	r5
100084b6:	4fe6      	ldr	r7, [pc, #920]	; (10008850 <MahonyQuaternionUpdate+0x414>)
100084b8:	9005      	str	r0, [sp, #20]
100084ba:	1c01      	adds	r1, r0, #0
100084bc:	9800      	ldr	r0, [sp, #0]
100084be:	47b8      	blx	r7
100084c0:	9006      	str	r0, [sp, #24]
100084c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
100084c4:	1c08      	adds	r0, r1, #0
100084c6:	47a8      	blx	r5
100084c8:	9008      	str	r0, [sp, #32]
100084ca:	9905      	ldr	r1, [sp, #20]
100084cc:	9800      	ldr	r0, [sp, #0]
100084ce:	47b8      	blx	r7
100084d0:	9000      	str	r0, [sp, #0]
100084d2:	9908      	ldr	r1, [sp, #32]
100084d4:	9800      	ldr	r0, [sp, #0]
100084d6:	47b8      	blx	r7
100084d8:	4bde      	ldr	r3, [pc, #888]	; (10008854 <MahonyQuaternionUpdate+0x418>)
100084da:	4798      	blx	r3
100084dc:	1c05      	adds	r5, r0, #0
	if (norm == 0.0f) return; // handle NaN
100084de:	2100      	movs	r1, #0
100084e0:	4bdd      	ldr	r3, [pc, #884]	; (10008858 <MahonyQuaternionUpdate+0x41c>)
100084e2:	4798      	blx	r3
100084e4:	2800      	cmp	r0, #0
100084e6:	d000      	beq.n	100084ea <MahonyQuaternionUpdate+0xae>
100084e8:	e21a      	b.n	10008920 <MahonyQuaternionUpdate+0x4e4>
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
	float q1q2 = q1 * q2;
100084ea:	4fd8      	ldr	r7, [pc, #864]	; (1000884c <MahonyQuaternionUpdate+0x410>)
100084ec:	4649      	mov	r1, r9
100084ee:	4650      	mov	r0, sl
100084f0:	47b8      	blx	r7
100084f2:	9005      	str	r0, [sp, #20]
	float q1q3 = q1 * q3;
100084f4:	9901      	ldr	r1, [sp, #4]
100084f6:	4650      	mov	r0, sl
100084f8:	47b8      	blx	r7
100084fa:	900c      	str	r0, [sp, #48]	; 0x30
	float q1q4 = q1 * q4;
100084fc:	9902      	ldr	r1, [sp, #8]
100084fe:	4650      	mov	r0, sl
10008500:	47b8      	blx	r7
10008502:	900d      	str	r0, [sp, #52]	; 0x34
	float q2q2 = q2 * q2;
10008504:	4649      	mov	r1, r9
10008506:	4648      	mov	r0, r9
10008508:	47b8      	blx	r7
1000850a:	900e      	str	r0, [sp, #56]	; 0x38
	float q2q3 = q2 * q3;
1000850c:	9901      	ldr	r1, [sp, #4]
1000850e:	4648      	mov	r0, r9
10008510:	47b8      	blx	r7
10008512:	900f      	str	r0, [sp, #60]	; 0x3c
	float q2q4 = q2 * q4;
10008514:	9902      	ldr	r1, [sp, #8]
10008516:	4648      	mov	r0, r9
10008518:	47b8      	blx	r7
1000851a:	9010      	str	r0, [sp, #64]	; 0x40
	float q3q3 = q3 * q3;
1000851c:	9b01      	ldr	r3, [sp, #4]
1000851e:	1c19      	adds	r1, r3, #0
10008520:	1c18      	adds	r0, r3, #0
10008522:	47b8      	blx	r7
10008524:	9006      	str	r0, [sp, #24]
	float q3q4 = q3 * q4;
10008526:	9902      	ldr	r1, [sp, #8]
10008528:	9801      	ldr	r0, [sp, #4]
1000852a:	47b8      	blx	r7
1000852c:	9011      	str	r0, [sp, #68]	; 0x44
	float q4q4 = q4 * q4;
1000852e:	9a02      	ldr	r2, [sp, #8]
10008530:	1c11      	adds	r1, r2, #0
10008532:	1c10      	adds	r0, r2, #0
10008534:	47b8      	blx	r7
10008536:	9008      	str	r0, [sp, #32]

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f / norm;        // use reciprocal for division
10008538:	49c8      	ldr	r1, [pc, #800]	; (1000885c <MahonyQuaternionUpdate+0x420>)
1000853a:	4688      	mov	r8, r1
1000853c:	9904      	ldr	r1, [sp, #16]
1000853e:	20fe      	movs	r0, #254	; 0xfe
10008540:	0580      	lsls	r0, r0, #22
10008542:	47c0      	blx	r8
10008544:	1c01      	adds	r1, r0, #0
	ax *= norm;
10008546:	9000      	str	r0, [sp, #0]
10008548:	9803      	ldr	r0, [sp, #12]
1000854a:	47b8      	blx	r7
1000854c:	9012      	str	r0, [sp, #72]	; 0x48
	ay *= norm;
1000854e:	9900      	ldr	r1, [sp, #0]
10008550:	1c20      	adds	r0, r4, #0
10008552:	47b8      	blx	r7
10008554:	9013      	str	r0, [sp, #76]	; 0x4c
	az *= norm;
10008556:	9900      	ldr	r1, [sp, #0]
10008558:	1c30      	adds	r0, r6, #0
1000855a:	47b8      	blx	r7
1000855c:	9014      	str	r0, [sp, #80]	; 0x50

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f / norm;        // use reciprocal for division
1000855e:	1c29      	adds	r1, r5, #0
10008560:	20fe      	movs	r0, #254	; 0xfe
10008562:	0580      	lsls	r0, r0, #22
10008564:	47c0      	blx	r8
10008566:	1c04      	adds	r4, r0, #0
	mx *= norm;
10008568:	1c01      	adds	r1, r0, #0
1000856a:	9826      	ldr	r0, [sp, #152]	; 0x98
1000856c:	47b8      	blx	r7
1000856e:	1c06      	adds	r6, r0, #0
	my *= norm;
10008570:	1c21      	adds	r1, r4, #0
10008572:	9827      	ldr	r0, [sp, #156]	; 0x9c
10008574:	47b8      	blx	r7
10008576:	9000      	str	r0, [sp, #0]
	mz *= norm;
10008578:	1c21      	adds	r1, r4, #0
1000857a:	9828      	ldr	r0, [sp, #160]	; 0xa0
1000857c:	47b8      	blx	r7
1000857e:	9003      	str	r0, [sp, #12]

	// Reference direction of Earth's magnetic field
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
10008580:	4db3      	ldr	r5, [pc, #716]	; (10008850 <MahonyQuaternionUpdate+0x414>)
10008582:	1c31      	adds	r1, r6, #0
10008584:	9615      	str	r6, [sp, #84]	; 0x54
10008586:	1c30      	adds	r0, r6, #0
10008588:	47a8      	blx	r5
1000858a:	9009      	str	r0, [sp, #36]	; 0x24
1000858c:	4cb4      	ldr	r4, [pc, #720]	; (10008860 <MahonyQuaternionUpdate+0x424>)
1000858e:	9906      	ldr	r1, [sp, #24]
10008590:	20fc      	movs	r0, #252	; 0xfc
10008592:	0580      	lsls	r0, r0, #22
10008594:	47a0      	blx	r4
10008596:	9908      	ldr	r1, [sp, #32]
10008598:	47a0      	blx	r4
1000859a:	9016      	str	r0, [sp, #88]	; 0x58
1000859c:	9b00      	ldr	r3, [sp, #0]
1000859e:	1c19      	adds	r1, r3, #0
100085a0:	1c18      	adds	r0, r3, #0
100085a2:	47a8      	blx	r5
100085a4:	900a      	str	r0, [sp, #40]	; 0x28
100085a6:	990d      	ldr	r1, [sp, #52]	; 0x34
100085a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
100085aa:	47a0      	blx	r4
100085ac:	9017      	str	r0, [sp, #92]	; 0x5c
100085ae:	9e03      	ldr	r6, [sp, #12]
100085b0:	1c31      	adds	r1, r6, #0
100085b2:	1c30      	adds	r0, r6, #0
100085b4:	47a8      	blx	r5
100085b6:	900b      	str	r0, [sp, #44]	; 0x2c
100085b8:	9910      	ldr	r1, [sp, #64]	; 0x40
100085ba:	980c      	ldr	r0, [sp, #48]	; 0x30
100085bc:	47a8      	blx	r5
100085be:	9018      	str	r0, [sp, #96]	; 0x60
100085c0:	9916      	ldr	r1, [sp, #88]	; 0x58
100085c2:	9809      	ldr	r0, [sp, #36]	; 0x24
100085c4:	47b8      	blx	r7
100085c6:	1c06      	adds	r6, r0, #0
100085c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
100085ca:	980a      	ldr	r0, [sp, #40]	; 0x28
100085cc:	47b8      	blx	r7
100085ce:	1c01      	adds	r1, r0, #0
100085d0:	1c30      	adds	r0, r6, #0
100085d2:	47a8      	blx	r5
100085d4:	1c06      	adds	r6, r0, #0
100085d6:	9918      	ldr	r1, [sp, #96]	; 0x60
100085d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100085da:	47b8      	blx	r7
100085dc:	1c01      	adds	r1, r0, #0
100085de:	1c30      	adds	r0, r6, #0
100085e0:	47a8      	blx	r5
100085e2:	1c06      	adds	r6, r0, #0
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
100085e4:	990e      	ldr	r1, [sp, #56]	; 0x38
100085e6:	20fc      	movs	r0, #252	; 0xfc
100085e8:	0580      	lsls	r0, r0, #22
100085ea:	47a0      	blx	r4
100085ec:	9019      	str	r0, [sp, #100]	; 0x64
100085ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
100085f0:	980d      	ldr	r0, [sp, #52]	; 0x34
100085f2:	47a8      	blx	r5
100085f4:	9909      	ldr	r1, [sp, #36]	; 0x24
100085f6:	47b8      	blx	r7
100085f8:	9004      	str	r0, [sp, #16]
100085fa:	9908      	ldr	r1, [sp, #32]
100085fc:	9819      	ldr	r0, [sp, #100]	; 0x64
100085fe:	47a0      	blx	r4
10008600:	990a      	ldr	r1, [sp, #40]	; 0x28
10008602:	47b8      	blx	r7
10008604:	1c01      	adds	r1, r0, #0
10008606:	9804      	ldr	r0, [sp, #16]
10008608:	47a8      	blx	r5
1000860a:	9004      	str	r0, [sp, #16]
1000860c:	9905      	ldr	r1, [sp, #20]
1000860e:	9811      	ldr	r0, [sp, #68]	; 0x44
10008610:	47a0      	blx	r4
10008612:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008614:	47b8      	blx	r7
10008616:	1c01      	adds	r1, r0, #0
10008618:	9804      	ldr	r0, [sp, #16]
1000861a:	47a8      	blx	r5
1000861c:	9004      	str	r0, [sp, #16]
	bx = sqrtf((hx * hx) + (hy * hy));
1000861e:	1c31      	adds	r1, r6, #0
10008620:	1c30      	adds	r0, r6, #0
10008622:	47b8      	blx	r7
10008624:	900d      	str	r0, [sp, #52]	; 0x34
10008626:	1c31      	adds	r1, r6, #0
10008628:	1c30      	adds	r0, r6, #0
1000862a:	47b8      	blx	r7
1000862c:	1c06      	adds	r6, r0, #0
1000862e:	9a04      	ldr	r2, [sp, #16]
10008630:	1c11      	adds	r1, r2, #0
10008632:	1c10      	adds	r0, r2, #0
10008634:	47b8      	blx	r7
10008636:	1c01      	adds	r1, r0, #0
10008638:	1c30      	adds	r0, r6, #0
1000863a:	47a8      	blx	r5
1000863c:	4a85      	ldr	r2, [pc, #532]	; (10008854 <MahonyQuaternionUpdate+0x418>)
1000863e:	4693      	mov	fp, r2
10008640:	4790      	blx	r2
10008642:	1c06      	adds	r6, r0, #0
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
10008644:	990c      	ldr	r1, [sp, #48]	; 0x30
10008646:	9810      	ldr	r0, [sp, #64]	; 0x40
10008648:	47a0      	blx	r4
1000864a:	9004      	str	r0, [sp, #16]
1000864c:	9911      	ldr	r1, [sp, #68]	; 0x44
1000864e:	9805      	ldr	r0, [sp, #20]
10008650:	47a8      	blx	r5
10008652:	9005      	str	r0, [sp, #20]
10008654:	9906      	ldr	r1, [sp, #24]
10008656:	9819      	ldr	r0, [sp, #100]	; 0x64
10008658:	47a0      	blx	r4
1000865a:	900c      	str	r0, [sp, #48]	; 0x30

	// Estimated direction of gravity and magnetic field
	vx = 2.0f * (q2q4 - q1q3);
1000865c:	9b04      	ldr	r3, [sp, #16]
1000865e:	1c19      	adds	r1, r3, #0
10008660:	1c18      	adds	r0, r3, #0
10008662:	47a8      	blx	r5
10008664:	900d      	str	r0, [sp, #52]	; 0x34
	vy = 2.0f * (q1q2 + q3q4);
10008666:	9a05      	ldr	r2, [sp, #20]
10008668:	1c11      	adds	r1, r2, #0
1000866a:	1c10      	adds	r0, r2, #0
1000866c:	47a8      	blx	r5
1000866e:	900f      	str	r0, [sp, #60]	; 0x3c
	vz = q1q1 - q2q2 - q3q3 + q4q4;
10008670:	4651      	mov	r1, sl
10008672:	4650      	mov	r0, sl
10008674:	47b8      	blx	r7
10008676:	990e      	ldr	r1, [sp, #56]	; 0x38
10008678:	47a0      	blx	r4
1000867a:	9906      	ldr	r1, [sp, #24]
1000867c:	47a0      	blx	r4
1000867e:	9908      	ldr	r1, [sp, #32]
10008680:	47a8      	blx	r5
10008682:	9008      	str	r0, [sp, #32]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
10008684:	1c31      	adds	r1, r6, #0
10008686:	1c30      	adds	r0, r6, #0
10008688:	47a8      	blx	r5
1000868a:	1c06      	adds	r6, r0, #0
1000868c:	9904      	ldr	r1, [sp, #16]
1000868e:	9809      	ldr	r0, [sp, #36]	; 0x24
10008690:	47b8      	blx	r7
10008692:	9006      	str	r0, [sp, #24]
10008694:	9905      	ldr	r1, [sp, #20]
10008696:	980a      	ldr	r0, [sp, #40]	; 0x28
10008698:	47b8      	blx	r7
1000869a:	1c01      	adds	r1, r0, #0
1000869c:	9806      	ldr	r0, [sp, #24]
1000869e:	47a8      	blx	r5
100086a0:	9006      	str	r0, [sp, #24]
100086a2:	990c      	ldr	r1, [sp, #48]	; 0x30
100086a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
100086a6:	47b8      	blx	r7
100086a8:	1c01      	adds	r1, r0, #0
100086aa:	9806      	ldr	r0, [sp, #24]
100086ac:	47a8      	blx	r5
100086ae:	1c01      	adds	r1, r0, #0
100086b0:	47a8      	blx	r5
100086b2:	9006      	str	r0, [sp, #24]
100086b4:	1c31      	adds	r1, r6, #0
100086b6:	9816      	ldr	r0, [sp, #88]	; 0x58
100086b8:	47b8      	blx	r7
100086ba:	9009      	str	r0, [sp, #36]	; 0x24
100086bc:	9906      	ldr	r1, [sp, #24]
100086be:	9804      	ldr	r0, [sp, #16]
100086c0:	47b8      	blx	r7
100086c2:	1c01      	adds	r1, r0, #0
100086c4:	9809      	ldr	r0, [sp, #36]	; 0x24
100086c6:	47a8      	blx	r5
100086c8:	9004      	str	r0, [sp, #16]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
100086ca:	1c31      	adds	r1, r6, #0
100086cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
100086ce:	47b8      	blx	r7
100086d0:	9009      	str	r0, [sp, #36]	; 0x24
100086d2:	9906      	ldr	r1, [sp, #24]
100086d4:	9805      	ldr	r0, [sp, #20]
100086d6:	47b8      	blx	r7
100086d8:	1c01      	adds	r1, r0, #0
100086da:	9809      	ldr	r0, [sp, #36]	; 0x24
100086dc:	47a8      	blx	r5
100086de:	9009      	str	r0, [sp, #36]	; 0x24
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
100086e0:	1c31      	adds	r1, r6, #0
100086e2:	9818      	ldr	r0, [sp, #96]	; 0x60
100086e4:	47b8      	blx	r7
100086e6:	1c06      	adds	r6, r0, #0
100086e8:	9906      	ldr	r1, [sp, #24]
100086ea:	980c      	ldr	r0, [sp, #48]	; 0x30
100086ec:	47b8      	blx	r7
100086ee:	1c01      	adds	r1, r0, #0
100086f0:	1c30      	adds	r0, r6, #0
100086f2:	47a8      	blx	r5
100086f4:	9006      	str	r0, [sp, #24]
		eInt[1] += ey;
		eInt[2] += ez;
	}
	else
	{
		eInt[0] = 0.0f;     // prevent integral wind up
100086f6:	4b5b      	ldr	r3, [pc, #364]	; (10008864 <MahonyQuaternionUpdate+0x428>)
100086f8:	2600      	movs	r6, #0
100086fa:	601e      	str	r6, [r3, #0]
		eInt[1] = 0.0f;
100086fc:	605e      	str	r6, [r3, #4]
		eInt[2] = 0.0f;
100086fe:	609e      	str	r6, [r3, #8]
	}

	// Apply feedback terms
	gx = gx + Kp * ex + Ki * eInt[0];
10008700:	9908      	ldr	r1, [sp, #32]
10008702:	9813      	ldr	r0, [sp, #76]	; 0x4c
10008704:	47b8      	blx	r7
10008706:	9005      	str	r0, [sp, #20]
10008708:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000870a:	9814      	ldr	r0, [sp, #80]	; 0x50
1000870c:	47b8      	blx	r7
1000870e:	1c01      	adds	r1, r0, #0
10008710:	9805      	ldr	r0, [sp, #20]
10008712:	47a0      	blx	r4
10008714:	9005      	str	r0, [sp, #20]
10008716:	9906      	ldr	r1, [sp, #24]
10008718:	9800      	ldr	r0, [sp, #0]
1000871a:	47b8      	blx	r7
1000871c:	900a      	str	r0, [sp, #40]	; 0x28
1000871e:	9909      	ldr	r1, [sp, #36]	; 0x24
10008720:	9803      	ldr	r0, [sp, #12]
10008722:	47b8      	blx	r7
10008724:	1c01      	adds	r1, r0, #0
10008726:	980a      	ldr	r0, [sp, #40]	; 0x28
10008728:	47a0      	blx	r4
1000872a:	1c01      	adds	r1, r0, #0
1000872c:	9805      	ldr	r0, [sp, #20]
1000872e:	47a8      	blx	r5
10008730:	494d      	ldr	r1, [pc, #308]	; (10008868 <MahonyQuaternionUpdate+0x42c>)
10008732:	47b8      	blx	r7
10008734:	9907      	ldr	r1, [sp, #28]
10008736:	47a8      	blx	r5
10008738:	1c31      	adds	r1, r6, #0
1000873a:	47a8      	blx	r5
1000873c:	9005      	str	r0, [sp, #20]
	gy = gy + Kp * ey + Ki * eInt[1];
1000873e:	990d      	ldr	r1, [sp, #52]	; 0x34
10008740:	9814      	ldr	r0, [sp, #80]	; 0x50
10008742:	47b8      	blx	r7
10008744:	9007      	str	r0, [sp, #28]
10008746:	9908      	ldr	r1, [sp, #32]
10008748:	9812      	ldr	r0, [sp, #72]	; 0x48
1000874a:	47b8      	blx	r7
1000874c:	1c01      	adds	r1, r0, #0
1000874e:	9807      	ldr	r0, [sp, #28]
10008750:	47a0      	blx	r4
10008752:	9007      	str	r0, [sp, #28]
10008754:	9904      	ldr	r1, [sp, #16]
10008756:	9803      	ldr	r0, [sp, #12]
10008758:	47b8      	blx	r7
1000875a:	9003      	str	r0, [sp, #12]
1000875c:	9906      	ldr	r1, [sp, #24]
1000875e:	9815      	ldr	r0, [sp, #84]	; 0x54
10008760:	47b8      	blx	r7
10008762:	1c01      	adds	r1, r0, #0
10008764:	9803      	ldr	r0, [sp, #12]
10008766:	47a0      	blx	r4
10008768:	1c01      	adds	r1, r0, #0
1000876a:	9807      	ldr	r0, [sp, #28]
1000876c:	47a8      	blx	r5
1000876e:	493e      	ldr	r1, [pc, #248]	; (10008868 <MahonyQuaternionUpdate+0x42c>)
10008770:	47b8      	blx	r7
10008772:	9924      	ldr	r1, [sp, #144]	; 0x90
10008774:	47a8      	blx	r5
10008776:	1c31      	adds	r1, r6, #0
10008778:	47a8      	blx	r5
1000877a:	9006      	str	r0, [sp, #24]
	gz = gz + Kp * ez + Ki * eInt[2];
1000877c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000877e:	9812      	ldr	r0, [sp, #72]	; 0x48
10008780:	47b8      	blx	r7
10008782:	9003      	str	r0, [sp, #12]
10008784:	990d      	ldr	r1, [sp, #52]	; 0x34
10008786:	9813      	ldr	r0, [sp, #76]	; 0x4c
10008788:	47b8      	blx	r7
1000878a:	1c01      	adds	r1, r0, #0
1000878c:	9803      	ldr	r0, [sp, #12]
1000878e:	47a0      	blx	r4
10008790:	9003      	str	r0, [sp, #12]
10008792:	9909      	ldr	r1, [sp, #36]	; 0x24
10008794:	9815      	ldr	r0, [sp, #84]	; 0x54
10008796:	47b8      	blx	r7
10008798:	9007      	str	r0, [sp, #28]
1000879a:	9904      	ldr	r1, [sp, #16]
1000879c:	9800      	ldr	r0, [sp, #0]
1000879e:	47b8      	blx	r7
100087a0:	1c01      	adds	r1, r0, #0
100087a2:	9807      	ldr	r0, [sp, #28]
100087a4:	47a0      	blx	r4
100087a6:	1c01      	adds	r1, r0, #0
100087a8:	9803      	ldr	r0, [sp, #12]
100087aa:	47a8      	blx	r5
100087ac:	492e      	ldr	r1, [pc, #184]	; (10008868 <MahonyQuaternionUpdate+0x42c>)
100087ae:	47b8      	blx	r7
100087b0:	9925      	ldr	r1, [sp, #148]	; 0x94
100087b2:	47a8      	blx	r5
100087b4:	1c31      	adds	r1, r6, #0
100087b6:	47a8      	blx	r5
100087b8:	1c06      	adds	r6, r0, #0

	// Integrate rate of change of quaternion
	pa = q2;
	pb = q3;
	pc = q4;
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
100087ba:	21fc      	movs	r1, #252	; 0xfc
100087bc:	0589      	lsls	r1, r1, #22
100087be:	4b2b      	ldr	r3, [pc, #172]	; (1000886c <MahonyQuaternionUpdate+0x430>)
100087c0:	6818      	ldr	r0, [r3, #0]
100087c2:	47b8      	blx	r7
100087c4:	9007      	str	r0, [sp, #28]
100087c6:	2180      	movs	r1, #128	; 0x80
100087c8:	0609      	lsls	r1, r1, #24
100087ca:	4449      	add	r1, r9
100087cc:	0008      	movs	r0, r1
100087ce:	9905      	ldr	r1, [sp, #20]
100087d0:	47b8      	blx	r7
100087d2:	9000      	str	r0, [sp, #0]
100087d4:	9906      	ldr	r1, [sp, #24]
100087d6:	9801      	ldr	r0, [sp, #4]
100087d8:	47b8      	blx	r7
100087da:	1c01      	adds	r1, r0, #0
100087dc:	9800      	ldr	r0, [sp, #0]
100087de:	47a0      	blx	r4
100087e0:	9000      	str	r0, [sp, #0]
100087e2:	1c31      	adds	r1, r6, #0
100087e4:	9802      	ldr	r0, [sp, #8]
100087e6:	47b8      	blx	r7
100087e8:	1c01      	adds	r1, r0, #0
100087ea:	9800      	ldr	r0, [sp, #0]
100087ec:	47a0      	blx	r4
100087ee:	9907      	ldr	r1, [sp, #28]
100087f0:	47b8      	blx	r7
100087f2:	4651      	mov	r1, sl
100087f4:	47a8      	blx	r5
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
100087f6:	9000      	str	r0, [sp, #0]
100087f8:	1c01      	adds	r1, r0, #0
100087fa:	9805      	ldr	r0, [sp, #20]
100087fc:	47b8      	blx	r7
100087fe:	9003      	str	r0, [sp, #12]
10008800:	1c31      	adds	r1, r6, #0
10008802:	9801      	ldr	r0, [sp, #4]
10008804:	47b8      	blx	r7
10008806:	1c01      	adds	r1, r0, #0
10008808:	9803      	ldr	r0, [sp, #12]
1000880a:	47a8      	blx	r5
1000880c:	9003      	str	r0, [sp, #12]
1000880e:	9906      	ldr	r1, [sp, #24]
10008810:	9802      	ldr	r0, [sp, #8]
10008812:	47b8      	blx	r7
10008814:	1c01      	adds	r1, r0, #0
10008816:	9803      	ldr	r0, [sp, #12]
10008818:	47a0      	blx	r4
1000881a:	9907      	ldr	r1, [sp, #28]
1000881c:	47b8      	blx	r7
1000881e:	4649      	mov	r1, r9
10008820:	47a8      	blx	r5
10008822:	9003      	str	r0, [sp, #12]
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
10008824:	9900      	ldr	r1, [sp, #0]
10008826:	9806      	ldr	r0, [sp, #24]
10008828:	47b8      	blx	r7
1000882a:	9004      	str	r0, [sp, #16]
1000882c:	1c31      	adds	r1, r6, #0
1000882e:	4648      	mov	r0, r9
10008830:	47b8      	blx	r7
10008832:	1c01      	adds	r1, r0, #0
10008834:	9804      	ldr	r0, [sp, #16]
10008836:	47a0      	blx	r4
10008838:	9004      	str	r0, [sp, #16]
1000883a:	9905      	ldr	r1, [sp, #20]
1000883c:	9802      	ldr	r0, [sp, #8]
1000883e:	47b8      	blx	r7
10008840:	1c01      	adds	r1, r0, #0
10008842:	9804      	ldr	r0, [sp, #16]
10008844:	e014      	b.n	10008870 <MahonyQuaternionUpdate+0x434>
10008846:	46c0      	nop			; (mov r8, r8)
10008848:	1001a0d0 	.word	0x1001a0d0
1000884c:	10013d3d 	.word	0x10013d3d
10008850:	100136bd 	.word	0x100136bd
10008854:	100121f1 	.word	0x100121f1
10008858:	1001359d 	.word	0x1001359d
1000885c:	100139a9 	.word	0x100139a9
10008860:	10013f65 	.word	0x10013f65
10008864:	1001a1b0 	.word	0x1001a1b0
10008868:	41200000 	.word	0x41200000
1000886c:	1001a2f8 	.word	0x1001a2f8
10008870:	47a8      	blx	r5
10008872:	9907      	ldr	r1, [sp, #28]
10008874:	47b8      	blx	r7
10008876:	9901      	ldr	r1, [sp, #4]
10008878:	47a8      	blx	r5
1000887a:	9004      	str	r0, [sp, #16]
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
1000887c:	9900      	ldr	r1, [sp, #0]
1000887e:	1c30      	adds	r0, r6, #0
10008880:	47b8      	blx	r7
10008882:	1c06      	adds	r6, r0, #0
10008884:	9906      	ldr	r1, [sp, #24]
10008886:	4648      	mov	r0, r9
10008888:	47b8      	blx	r7
1000888a:	1c01      	adds	r1, r0, #0
1000888c:	1c30      	adds	r0, r6, #0
1000888e:	47a8      	blx	r5
10008890:	1c06      	adds	r6, r0, #0
10008892:	9905      	ldr	r1, [sp, #20]
10008894:	9801      	ldr	r0, [sp, #4]
10008896:	47b8      	blx	r7
10008898:	1c01      	adds	r1, r0, #0
1000889a:	1c30      	adds	r0, r6, #0
1000889c:	47a0      	blx	r4
1000889e:	9907      	ldr	r1, [sp, #28]
100088a0:	47b8      	blx	r7
100088a2:	9902      	ldr	r1, [sp, #8]
100088a4:	47a8      	blx	r5
100088a6:	1c04      	adds	r4, r0, #0

	// Normalize quaternion
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
100088a8:	9b00      	ldr	r3, [sp, #0]
100088aa:	1c19      	adds	r1, r3, #0
100088ac:	1c18      	adds	r0, r3, #0
100088ae:	47b8      	blx	r7
100088b0:	1c06      	adds	r6, r0, #0
100088b2:	9803      	ldr	r0, [sp, #12]
100088b4:	1c01      	adds	r1, r0, #0
100088b6:	47b8      	blx	r7
100088b8:	1c01      	adds	r1, r0, #0
100088ba:	9001      	str	r0, [sp, #4]
100088bc:	1c30      	adds	r0, r6, #0
100088be:	47a8      	blx	r5
100088c0:	9002      	str	r0, [sp, #8]
100088c2:	9a04      	ldr	r2, [sp, #16]
100088c4:	1c11      	adds	r1, r2, #0
100088c6:	1c10      	adds	r0, r2, #0
100088c8:	47b8      	blx	r7
100088ca:	1c01      	adds	r1, r0, #0
100088cc:	9005      	str	r0, [sp, #20]
100088ce:	9802      	ldr	r0, [sp, #8]
100088d0:	47a8      	blx	r5
100088d2:	9002      	str	r0, [sp, #8]
100088d4:	1c21      	adds	r1, r4, #0
100088d6:	1c20      	adds	r0, r4, #0
100088d8:	47b8      	blx	r7
100088da:	9006      	str	r0, [sp, #24]
100088dc:	9901      	ldr	r1, [sp, #4]
100088de:	1c30      	adds	r0, r6, #0
100088e0:	47a8      	blx	r5
100088e2:	1c06      	adds	r6, r0, #0
100088e4:	9905      	ldr	r1, [sp, #20]
100088e6:	1c30      	adds	r0, r6, #0
100088e8:	47a8      	blx	r5
100088ea:	1c06      	adds	r6, r0, #0
100088ec:	9906      	ldr	r1, [sp, #24]
100088ee:	1c30      	adds	r0, r6, #0
100088f0:	47a8      	blx	r5
100088f2:	47d8      	blx	fp
100088f4:	1c01      	adds	r1, r0, #0
	norm = 1.0f / norm;
100088f6:	20fe      	movs	r0, #254	; 0xfe
100088f8:	0580      	lsls	r0, r0, #22
100088fa:	47c0      	blx	r8
100088fc:	1c05      	adds	r5, r0, #0
	mpu_device.output.q[0] = q1 * norm;
100088fe:	4e0c      	ldr	r6, [pc, #48]	; (10008930 <MahonyQuaternionUpdate+0x4f4>)
10008900:	1c01      	adds	r1, r0, #0
10008902:	9800      	ldr	r0, [sp, #0]
10008904:	47b8      	blx	r7
10008906:	6630      	str	r0, [r6, #96]	; 0x60
	mpu_device.output.q[1] = q2 * norm;
10008908:	1c29      	adds	r1, r5, #0
1000890a:	9803      	ldr	r0, [sp, #12]
1000890c:	47b8      	blx	r7
1000890e:	6670      	str	r0, [r6, #100]	; 0x64
	mpu_device.output.q[2] = q3 * norm;
10008910:	1c29      	adds	r1, r5, #0
10008912:	9804      	ldr	r0, [sp, #16]
10008914:	47b8      	blx	r7
10008916:	66b0      	str	r0, [r6, #104]	; 0x68
	mpu_device.output.q[3] = q4 * norm;
10008918:	1c29      	adds	r1, r5, #0
1000891a:	1c20      	adds	r0, r4, #0
1000891c:	47b8      	blx	r7
1000891e:	66f0      	str	r0, [r6, #108]	; 0x6c
}
10008920:	b01b      	add	sp, #108	; 0x6c
10008922:	bc3c      	pop	{r2, r3, r4, r5}
10008924:	4690      	mov	r8, r2
10008926:	4699      	mov	r9, r3
10008928:	46a2      	mov	sl, r4
1000892a:	46ab      	mov	fp, r5
1000892c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000892e:	46c0      	nop			; (mov r8, r8)
10008930:	1001a0d0 	.word	0x1001a0d0

10008934 <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008934:	4b03      	ldr	r3, [pc, #12]	; (10008944 <sms_ble_pair_request_fn+0x10>)
10008936:	781b      	ldrb	r3, [r3, #0]
10008938:	4b03      	ldr	r3, [pc, #12]	; (10008948 <sms_ble_pair_request_fn+0x14>)
1000893a:	781b      	ldrb	r3, [r3, #0]
1000893c:	4b03      	ldr	r3, [pc, #12]	; (1000894c <sms_ble_pair_request_fn+0x18>)
1000893e:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008940:	2000      	movs	r0, #0
10008942:	4770      	bx	lr
10008944:	1001a1ac 	.word	0x1001a1ac
10008948:	1001a0cc 	.word	0x1001a0cc
1000894c:	1001a2db 	.word	0x1001a2db

10008950 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008950:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
10008952:	4811      	ldr	r0, [pc, #68]	; (10008998 <sms_ble_notification_confirmed_fn+0x48>)
10008954:	4d11      	ldr	r5, [pc, #68]	; (1000899c <sms_ble_notification_confirmed_fn+0x4c>)
10008956:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008958:	4c11      	ldr	r4, [pc, #68]	; (100089a0 <sms_ble_notification_confirmed_fn+0x50>)
1000895a:	7863      	ldrb	r3, [r4, #1]
1000895c:	3b01      	subs	r3, #1
1000895e:	b2db      	uxtb	r3, r3
10008960:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
10008962:	4810      	ldr	r0, [pc, #64]	; (100089a4 <sms_ble_notification_confirmed_fn+0x54>)
10008964:	4b10      	ldr	r3, [pc, #64]	; (100089a8 <sms_ble_notification_confirmed_fn+0x58>)
10008966:	4798      	blx	r3
10008968:	4810      	ldr	r0, [pc, #64]	; (100089ac <sms_ble_notification_confirmed_fn+0x5c>)
1000896a:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000896c:	2201      	movs	r2, #1
1000896e:	4252      	negs	r2, r2
10008970:	4b0f      	ldr	r3, [pc, #60]	; (100089b0 <sms_ble_notification_confirmed_fn+0x60>)
10008972:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008974:	2001      	movs	r0, #1
10008976:	4b0f      	ldr	r3, [pc, #60]	; (100089b4 <sms_ble_notification_confirmed_fn+0x64>)
10008978:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
1000897a:	2200      	movs	r2, #0
1000897c:	4b0e      	ldr	r3, [pc, #56]	; (100089b8 <sms_ble_notification_confirmed_fn+0x68>)
1000897e:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008980:	2322      	movs	r3, #34	; 0x22
10008982:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008984:	4b0d      	ldr	r3, [pc, #52]	; (100089bc <sms_ble_notification_confirmed_fn+0x6c>)
10008986:	781b      	ldrb	r3, [r3, #0]
10008988:	2b00      	cmp	r3, #0
1000898a:	d102      	bne.n	10008992 <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
1000898c:	3201      	adds	r2, #1
1000898e:	4b0c      	ldr	r3, [pc, #48]	; (100089c0 <sms_ble_notification_confirmed_fn+0x70>)
10008990:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10008992:	2000      	movs	r0, #0
10008994:	bd70      	pop	{r4, r5, r6, pc}
10008996:	46c0      	nop			; (mov r8, r8)
10008998:	1001740c 	.word	0x1001740c
1000899c:	100163ad 	.word	0x100163ad
100089a0:	1001a1ac 	.word	0x1001a1ac
100089a4:	10017414 	.word	0x10017414
100089a8:	100164cd 	.word	0x100164cd
100089ac:	10017418 	.word	0x10017418
100089b0:	1001a1a4 	.word	0x1001a1a4
100089b4:	1000a831 	.word	0x1000a831
100089b8:	1001a2db 	.word	0x1001a2db
100089bc:	1001a0cc 	.word	0x1001a0cc
100089c0:	1001a1a9 	.word	0x1001a1a9

100089c4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100089c4:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100089c6:	2001      	movs	r0, #1
100089c8:	4b08      	ldr	r3, [pc, #32]	; (100089ec <sms_ble_indication_confirmed_fn+0x28>)
100089ca:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100089cc:	2200      	movs	r2, #0
100089ce:	4b08      	ldr	r3, [pc, #32]	; (100089f0 <sms_ble_indication_confirmed_fn+0x2c>)
100089d0:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100089d2:	3222      	adds	r2, #34	; 0x22
100089d4:	4b07      	ldr	r3, [pc, #28]	; (100089f4 <sms_ble_indication_confirmed_fn+0x30>)
100089d6:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100089d8:	4b07      	ldr	r3, [pc, #28]	; (100089f8 <sms_ble_indication_confirmed_fn+0x34>)
100089da:	781b      	ldrb	r3, [r3, #0]
100089dc:	2b00      	cmp	r3, #0
100089de:	d102      	bne.n	100089e6 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
100089e0:	3a21      	subs	r2, #33	; 0x21
100089e2:	4b06      	ldr	r3, [pc, #24]	; (100089fc <sms_ble_indication_confirmed_fn+0x38>)
100089e4:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100089e6:	2000      	movs	r0, #0
100089e8:	bd10      	pop	{r4, pc}
100089ea:	46c0      	nop			; (mov r8, r8)
100089ec:	1000a831 	.word	0x1000a831
100089f0:	1001a2db 	.word	0x1001a2db
100089f4:	1001a1ac 	.word	0x1001a1ac
100089f8:	1001a0cc 	.word	0x1001a0cc
100089fc:	1001a1a9 	.word	0x1001a1a9

10008a00 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008a00:	2300      	movs	r3, #0
10008a02:	4a02      	ldr	r2, [pc, #8]	; (10008a0c <sms_ble_init_variables+0xc>)
10008a04:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
10008a06:	4a02      	ldr	r2, [pc, #8]	; (10008a10 <sms_ble_init_variables+0x10>)
10008a08:	8013      	strh	r3, [r2, #0]
}
10008a0a:	4770      	bx	lr
10008a0c:	1001a1ac 	.word	0x1001a1ac
10008a10:	1001a2fc 	.word	0x1001a2fc

10008a14 <sms_ble_startup>:

void sms_ble_startup(void)
{
10008a14:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10008a16:	2202      	movs	r2, #2
10008a18:	4b02      	ldr	r3, [pc, #8]	; (10008a24 <sms_ble_startup+0x10>)
10008a1a:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10008a1c:	2016      	movs	r0, #22
10008a1e:	4b02      	ldr	r3, [pc, #8]	; (10008a28 <sms_ble_startup+0x14>)
10008a20:	4798      	blx	r3
}
10008a22:	bd10      	pop	{r4, pc}
10008a24:	1001a2db 	.word	0x1001a2db
10008a28:	1000a2e9 	.word	0x1000a2e9

10008a2c <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008a2c:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008a2e:	481b      	ldr	r0, [pc, #108]	; (10008a9c <sms_ble_power_down+0x70>)
10008a30:	4b1b      	ldr	r3, [pc, #108]	; (10008aa0 <sms_ble_power_down+0x74>)
10008a32:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008a34:	4b1b      	ldr	r3, [pc, #108]	; (10008aa4 <sms_ble_power_down+0x78>)
10008a36:	781b      	ldrb	r3, [r3, #0]
10008a38:	2b00      	cmp	r3, #0
10008a3a:	d105      	bne.n	10008a48 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008a3c:	2201      	movs	r2, #1
10008a3e:	4b1a      	ldr	r3, [pc, #104]	; (10008aa8 <sms_ble_power_down+0x7c>)
10008a40:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008a42:	4b1a      	ldr	r3, [pc, #104]	; (10008aac <sms_ble_power_down+0x80>)
10008a44:	4798      	blx	r3
10008a46:	e028      	b.n	10008a9a <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008a48:	4b16      	ldr	r3, [pc, #88]	; (10008aa4 <sms_ble_power_down+0x78>)
10008a4a:	781b      	ldrb	r3, [r3, #0]
10008a4c:	b2db      	uxtb	r3, r3
10008a4e:	2b21      	cmp	r3, #33	; 0x21
10008a50:	d015      	beq.n	10008a7e <sms_ble_power_down+0x52>
10008a52:	d802      	bhi.n	10008a5a <sms_ble_power_down+0x2e>
10008a54:	2b20      	cmp	r3, #32
10008a56:	d003      	beq.n	10008a60 <sms_ble_power_down+0x34>
10008a58:	e016      	b.n	10008a88 <sms_ble_power_down+0x5c>
10008a5a:	2b23      	cmp	r3, #35	; 0x23
10008a5c:	d908      	bls.n	10008a70 <sms_ble_power_down+0x44>
10008a5e:	e013      	b.n	10008a88 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008a60:	4b13      	ldr	r3, [pc, #76]	; (10008ab0 <sms_ble_power_down+0x84>)
10008a62:	4798      	blx	r3
10008a64:	2800      	cmp	r0, #0
10008a66:	d10f      	bne.n	10008a88 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008a68:	2211      	movs	r2, #17
10008a6a:	4b0e      	ldr	r3, [pc, #56]	; (10008aa4 <sms_ble_power_down+0x78>)
10008a6c:	701a      	strb	r2, [r3, #0]
10008a6e:	e00b      	b.n	10008a88 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008a70:	2100      	movs	r1, #0
10008a72:	232b      	movs	r3, #43	; 0x2b
10008a74:	4a0f      	ldr	r2, [pc, #60]	; (10008ab4 <sms_ble_power_down+0x88>)
10008a76:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008a78:	2000      	movs	r0, #0
10008a7a:	4b0f      	ldr	r3, [pc, #60]	; (10008ab8 <sms_ble_power_down+0x8c>)
10008a7c:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008a7e:	4b0f      	ldr	r3, [pc, #60]	; (10008abc <sms_ble_power_down+0x90>)
10008a80:	8818      	ldrh	r0, [r3, #0]
10008a82:	2113      	movs	r1, #19
10008a84:	4b0e      	ldr	r3, [pc, #56]	; (10008ac0 <sms_ble_power_down+0x94>)
10008a86:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008a88:	2211      	movs	r2, #17
10008a8a:	4b06      	ldr	r3, [pc, #24]	; (10008aa4 <sms_ble_power_down+0x78>)
10008a8c:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10008a8e:	3a0e      	subs	r2, #14
10008a90:	4b0c      	ldr	r3, [pc, #48]	; (10008ac4 <sms_ble_power_down+0x98>)
10008a92:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008a94:	2016      	movs	r0, #22
10008a96:	4b0c      	ldr	r3, [pc, #48]	; (10008ac8 <sms_ble_power_down+0x9c>)
10008a98:	4798      	blx	r3
	}
}
10008a9a:	bd10      	pop	{r4, pc}
10008a9c:	10017424 	.word	0x10017424
10008aa0:	1000934d 	.word	0x1000934d
10008aa4:	1001a1ac 	.word	0x1001a1ac
10008aa8:	1001a1a9 	.word	0x1001a1a9
10008aac:	1000e42d 	.word	0x1000e42d
10008ab0:	1000f7a9 	.word	0x1000f7a9
10008ab4:	1001a240 	.word	0x1001a240
10008ab8:	1000a569 	.word	0x1000a569
10008abc:	1001a1ae 	.word	0x1001a1ae
10008ac0:	1000f7d5 	.word	0x1000f7d5
10008ac4:	1001a2db 	.word	0x1001a2db
10008ac8:	1000a2e9 	.word	0x1000a2e9

10008acc <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008acc:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008ace:	2211      	movs	r2, #17
10008ad0:	4b02      	ldr	r3, [pc, #8]	; (10008adc <sms_ble_adv_report_fn+0x10>)
10008ad2:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10008ad4:	4b02      	ldr	r3, [pc, #8]	; (10008ae0 <sms_ble_adv_report_fn+0x14>)
10008ad6:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10008ad8:	2000      	movs	r0, #0
10008ada:	bd10      	pop	{r4, pc}
10008adc:	1001a1ac 	.word	0x1001a1ac
10008ae0:	10008a2d 	.word	0x10008a2d

10008ae4 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008ae4:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008ae6:	4b0c      	ldr	r3, [pc, #48]	; (10008b18 <sms_ble_connected_fn+0x34>)
10008ae8:	781b      	ldrb	r3, [r3, #0]
10008aea:	2b20      	cmp	r3, #32
10008aec:	d110      	bne.n	10008b10 <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008aee:	8902      	ldrh	r2, [r0, #8]
10008af0:	4b0a      	ldr	r3, [pc, #40]	; (10008b1c <sms_ble_connected_fn+0x38>)
10008af2:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10008af4:	2221      	movs	r2, #33	; 0x21
10008af6:	4b08      	ldr	r3, [pc, #32]	; (10008b18 <sms_ble_connected_fn+0x34>)
10008af8:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
10008afa:	4809      	ldr	r0, [pc, #36]	; (10008b20 <sms_ble_connected_fn+0x3c>)
10008afc:	4b09      	ldr	r3, [pc, #36]	; (10008b24 <sms_ble_connected_fn+0x40>)
10008afe:	4798      	blx	r3
10008b00:	4809      	ldr	r0, [pc, #36]	; (10008b28 <sms_ble_connected_fn+0x44>)
10008b02:	4b0a      	ldr	r3, [pc, #40]	; (10008b2c <sms_ble_connected_fn+0x48>)
10008b04:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10008b06:	22fa      	movs	r2, #250	; 0xfa
10008b08:	0052      	lsls	r2, r2, #1
10008b0a:	4b09      	ldr	r3, [pc, #36]	; (10008b30 <sms_ble_connected_fn+0x4c>)
10008b0c:	601a      	str	r2, [r3, #0]
10008b0e:	e001      	b.n	10008b14 <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10008b10:	4b08      	ldr	r3, [pc, #32]	; (10008b34 <sms_ble_connected_fn+0x50>)
10008b12:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10008b14:	2000      	movs	r0, #0
10008b16:	bd10      	pop	{r4, pc}
10008b18:	1001a1ac 	.word	0x1001a1ac
10008b1c:	1001a2ce 	.word	0x1001a2ce
10008b20:	10017414 	.word	0x10017414
10008b24:	100164cd 	.word	0x100164cd
10008b28:	1001743c 	.word	0x1001743c
10008b2c:	100163ad 	.word	0x100163ad
10008b30:	1001a1a4 	.word	0x1001a1a4
10008b34:	10008a2d 	.word	0x10008a2d

10008b38 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008b38:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008b3a:	4b0e      	ldr	r3, [pc, #56]	; (10008b74 <sms_ble_paired_fn+0x3c>)
10008b3c:	781b      	ldrb	r3, [r3, #0]
10008b3e:	2b21      	cmp	r3, #33	; 0x21
10008b40:	d114      	bne.n	10008b6c <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
10008b42:	2222      	movs	r2, #34	; 0x22
10008b44:	4b0b      	ldr	r3, [pc, #44]	; (10008b74 <sms_ble_paired_fn+0x3c>)
10008b46:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008b48:	480b      	ldr	r0, [pc, #44]	; (10008b78 <sms_ble_paired_fn+0x40>)
10008b4a:	4b0c      	ldr	r3, [pc, #48]	; (10008b7c <sms_ble_paired_fn+0x44>)
10008b4c:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008b4e:	2101      	movs	r1, #1
10008b50:	2001      	movs	r0, #1
10008b52:	4b0b      	ldr	r3, [pc, #44]	; (10008b80 <sms_ble_paired_fn+0x48>)
10008b54:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
10008b56:	480b      	ldr	r0, [pc, #44]	; (10008b84 <sms_ble_paired_fn+0x4c>)
10008b58:	4b0b      	ldr	r3, [pc, #44]	; (10008b88 <sms_ble_paired_fn+0x50>)
10008b5a:	4798      	blx	r3
10008b5c:	480b      	ldr	r0, [pc, #44]	; (10008b8c <sms_ble_paired_fn+0x54>)
10008b5e:	4b0c      	ldr	r3, [pc, #48]	; (10008b90 <sms_ble_paired_fn+0x58>)
10008b60:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008b62:	2201      	movs	r2, #1
10008b64:	4252      	negs	r2, r2
10008b66:	4b0b      	ldr	r3, [pc, #44]	; (10008b94 <sms_ble_paired_fn+0x5c>)
10008b68:	601a      	str	r2, [r3, #0]
10008b6a:	e001      	b.n	10008b70 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
10008b6c:	4b0a      	ldr	r3, [pc, #40]	; (10008b98 <sms_ble_paired_fn+0x60>)
10008b6e:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008b70:	2000      	movs	r0, #0
10008b72:	bd10      	pop	{r4, pc}
10008b74:	1001a1ac 	.word	0x1001a1ac
10008b78:	1001744c 	.word	0x1001744c
10008b7c:	1000934d 	.word	0x1000934d
10008b80:	1000a5f1 	.word	0x1000a5f1
10008b84:	10017414 	.word	0x10017414
10008b88:	100164cd 	.word	0x100164cd
10008b8c:	10017418 	.word	0x10017418
10008b90:	100163ad 	.word	0x100163ad
10008b94:	1001a1a4 	.word	0x1001a1a4
10008b98:	10008a2d 	.word	0x10008a2d

10008b9c <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008b9c:	b510      	push	{r4, lr}
10008b9e:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008ba0:	2220      	movs	r2, #32
10008ba2:	4b14      	ldr	r3, [pc, #80]	; (10008bf4 <sms_ble_advertise+0x58>)
10008ba4:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008ba6:	4b14      	ldr	r3, [pc, #80]	; (10008bf8 <sms_ble_advertise+0x5c>)
10008ba8:	4798      	blx	r3
10008baa:	1e04      	subs	r4, r0, #0
10008bac:	d007      	beq.n	10008bbe <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008bae:	4813      	ldr	r0, [pc, #76]	; (10008bfc <sms_ble_advertise+0x60>)
10008bb0:	4b13      	ldr	r3, [pc, #76]	; (10008c00 <sms_ble_advertise+0x64>)
10008bb2:	4798      	blx	r3
10008bb4:	4813      	ldr	r0, [pc, #76]	; (10008c04 <sms_ble_advertise+0x68>)
10008bb6:	4b14      	ldr	r3, [pc, #80]	; (10008c08 <sms_ble_advertise+0x6c>)
10008bb8:	4798      	blx	r3
		return status;
10008bba:	0020      	movs	r0, r4
10008bbc:	e018      	b.n	10008bf0 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008bbe:	2300      	movs	r3, #0
10008bc0:	9302      	str	r3, [sp, #8]
10008bc2:	4b12      	ldr	r3, [pc, #72]	; (10008c0c <sms_ble_advertise+0x70>)
10008bc4:	9301      	str	r3, [sp, #4]
10008bc6:	23c8      	movs	r3, #200	; 0xc8
10008bc8:	00db      	lsls	r3, r3, #3
10008bca:	9300      	str	r3, [sp, #0]
10008bcc:	2300      	movs	r3, #0
10008bce:	2200      	movs	r2, #0
10008bd0:	2101      	movs	r1, #1
10008bd2:	2000      	movs	r0, #0
10008bd4:	4c0e      	ldr	r4, [pc, #56]	; (10008c10 <sms_ble_advertise+0x74>)
10008bd6:	47a0      	blx	r4
10008bd8:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
10008bda:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008bdc:	2c00      	cmp	r4, #0
10008bde:	d007      	beq.n	10008bf0 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10008be0:	4806      	ldr	r0, [pc, #24]	; (10008bfc <sms_ble_advertise+0x60>)
10008be2:	4b07      	ldr	r3, [pc, #28]	; (10008c00 <sms_ble_advertise+0x64>)
10008be4:	4798      	blx	r3
10008be6:	0021      	movs	r1, r4
10008be8:	480a      	ldr	r0, [pc, #40]	; (10008c14 <sms_ble_advertise+0x78>)
10008bea:	4b07      	ldr	r3, [pc, #28]	; (10008c08 <sms_ble_advertise+0x6c>)
10008bec:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10008bee:	20e2      	movs	r0, #226	; 0xe2
}
10008bf0:	b004      	add	sp, #16
10008bf2:	bd10      	pop	{r4, pc}
10008bf4:	1001a1ac 	.word	0x1001a1ac
10008bf8:	1000da91 	.word	0x1000da91
10008bfc:	10017414 	.word	0x10017414
10008c00:	100164cd 	.word	0x100164cd
10008c04:	10017460 	.word	0x10017460
10008c08:	100163ad 	.word	0x100163ad
10008c0c:	0000028f 	.word	0x0000028f
10008c10:	1000f66d 	.word	0x1000f66d
10008c14:	10017494 	.word	0x10017494

10008c18 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008c18:	b510      	push	{r4, lr}
10008c1a:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008c1c:	4b16      	ldr	r3, [pc, #88]	; (10008c78 <sms_ble_disconnected_fn+0x60>)
10008c1e:	781b      	ldrb	r3, [r3, #0]
10008c20:	2b22      	cmp	r3, #34	; 0x22
10008c22:	d10a      	bne.n	10008c3a <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10008c24:	2100      	movs	r1, #0
10008c26:	3309      	adds	r3, #9
10008c28:	4a14      	ldr	r2, [pc, #80]	; (10008c7c <sms_ble_disconnected_fn+0x64>)
10008c2a:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10008c2c:	2000      	movs	r0, #0
10008c2e:	4b14      	ldr	r3, [pc, #80]	; (10008c80 <sms_ble_disconnected_fn+0x68>)
10008c30:	4798      	blx	r3
        sms_sensors_switch(false, false);
10008c32:	2100      	movs	r1, #0
10008c34:	2000      	movs	r0, #0
10008c36:	4b13      	ldr	r3, [pc, #76]	; (10008c84 <sms_ble_disconnected_fn+0x6c>)
10008c38:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008c3a:	4b0f      	ldr	r3, [pc, #60]	; (10008c78 <sms_ble_disconnected_fn+0x60>)
10008c3c:	2211      	movs	r2, #17
10008c3e:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008c40:	781b      	ldrb	r3, [r3, #0]
10008c42:	4b11      	ldr	r3, [pc, #68]	; (10008c88 <sms_ble_disconnected_fn+0x70>)
10008c44:	781b      	ldrb	r3, [r3, #0]
10008c46:	4b11      	ldr	r3, [pc, #68]	; (10008c8c <sms_ble_disconnected_fn+0x74>)
10008c48:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008c4a:	78a3      	ldrb	r3, [r4, #2]
10008c4c:	2b1a      	cmp	r3, #26
10008c4e:	d00b      	beq.n	10008c68 <sms_ble_disconnected_fn+0x50>
10008c50:	b2da      	uxtb	r2, r3
10008c52:	2a1a      	cmp	r2, #26
10008c54:	d804      	bhi.n	10008c60 <sms_ble_disconnected_fn+0x48>
10008c56:	2b05      	cmp	r3, #5
10008c58:	d006      	beq.n	10008c68 <sms_ble_disconnected_fn+0x50>
10008c5a:	2b08      	cmp	r3, #8
10008c5c:	d107      	bne.n	10008c6e <sms_ble_disconnected_fn+0x56>
10008c5e:	e003      	b.n	10008c68 <sms_ble_disconnected_fn+0x50>
10008c60:	2b29      	cmp	r3, #41	; 0x29
10008c62:	d001      	beq.n	10008c68 <sms_ble_disconnected_fn+0x50>
10008c64:	2b3b      	cmp	r3, #59	; 0x3b
10008c66:	d102      	bne.n	10008c6e <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008c68:	4b09      	ldr	r3, [pc, #36]	; (10008c90 <sms_ble_disconnected_fn+0x78>)
10008c6a:	4798      	blx	r3
        break;
10008c6c:	e001      	b.n	10008c72 <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10008c6e:	4b09      	ldr	r3, [pc, #36]	; (10008c94 <sms_ble_disconnected_fn+0x7c>)
10008c70:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10008c72:	2000      	movs	r0, #0
10008c74:	bd10      	pop	{r4, pc}
10008c76:	46c0      	nop			; (mov r8, r8)
10008c78:	1001a1ac 	.word	0x1001a1ac
10008c7c:	1001a240 	.word	0x1001a240
10008c80:	1000a569 	.word	0x1000a569
10008c84:	1000a5f1 	.word	0x1000a5f1
10008c88:	1001a0cc 	.word	0x1001a0cc
10008c8c:	1001a2db 	.word	0x1001a2db
10008c90:	10008b9d 	.word	0x10008b9d
10008c94:	10008a2d 	.word	0x10008a2d

10008c98 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008c98:	b530      	push	{r4, r5, lr}
10008c9a:	b087      	sub	sp, #28
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
10008c9c:	2801      	cmp	r0, #1
10008c9e:	d02d      	beq.n	10008cfc <sms_ble_send_characteristic+0x64>
10008ca0:	2800      	cmp	r0, #0
10008ca2:	d002      	beq.n	10008caa <sms_ble_send_characteristic+0x12>
10008ca4:	2802      	cmp	r0, #2
10008ca6:	d03f      	beq.n	10008d28 <sms_ble_send_characteristic+0x90>
10008ca8:	e098      	b.n	10008ddc <sms_ble_send_characteristic+0x144>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10008caa:	2200      	movs	r2, #0
10008cac:	ab01      	add	r3, sp, #4
10008cae:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
10008cb0:	4b60      	ldr	r3, [pc, #384]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cb2:	791b      	ldrb	r3, [r3, #4]
10008cb4:	2b00      	cmp	r3, #0
10008cb6:	d00a      	beq.n	10008cce <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008cb8:	4b5e      	ldr	r3, [pc, #376]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cba:	795a      	ldrb	r2, [r3, #5]
10008cbc:	2300      	movs	r3, #0
10008cbe:	2a7e      	cmp	r2, #126	; 0x7e
10008cc0:	d801      	bhi.n	10008cc6 <sms_ble_send_characteristic+0x2e>
10008cc2:	3201      	adds	r2, #1
10008cc4:	b2d3      	uxtb	r3, r2
10008cc6:	4a5b      	ldr	r2, [pc, #364]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cc8:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10008cca:	aa01      	add	r2, sp, #4
10008ccc:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
10008cce:	4b59      	ldr	r3, [pc, #356]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cd0:	7a9b      	ldrb	r3, [r3, #10]
10008cd2:	2b00      	cmp	r3, #0
10008cd4:	d00e      	beq.n	10008cf4 <sms_ble_send_characteristic+0x5c>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10008cd6:	4b57      	ldr	r3, [pc, #348]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cd8:	7adb      	ldrb	r3, [r3, #11]
10008cda:	2bff      	cmp	r3, #255	; 0xff
10008cdc:	d002      	beq.n	10008ce4 <sms_ble_send_characteristic+0x4c>
10008cde:	3301      	adds	r3, #1
10008ce0:	b2db      	uxtb	r3, r3
10008ce2:	e000      	b.n	10008ce6 <sms_ble_send_characteristic+0x4e>
10008ce4:	2300      	movs	r3, #0
10008ce6:	4a53      	ldr	r2, [pc, #332]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008ce8:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10008cea:	aa01      	add	r2, sp, #4
10008cec:	3b80      	subs	r3, #128	; 0x80
10008cee:	7811      	ldrb	r1, [r2, #0]
10008cf0:	430b      	orrs	r3, r1
10008cf2:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10008cf4:	4b4f      	ldr	r3, [pc, #316]	; (10008e34 <sms_ble_send_characteristic+0x19c>)
10008cf6:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
10008cf8:	2201      	movs	r2, #1
        break;
10008cfa:	e071      	b.n	10008de0 <sms_ble_send_characteristic+0x148>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
10008cfc:	494e      	ldr	r1, [pc, #312]	; (10008e38 <sms_ble_send_characteristic+0x1a0>)
10008cfe:	6a0a      	ldr	r2, [r1, #32]
10008d00:	ab01      	add	r3, sp, #4
10008d02:	1610      	asrs	r0, r2, #24
10008d04:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10008d06:	1410      	asrs	r0, r2, #16
10008d08:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10008d0a:	1210      	asrs	r0, r2, #8
10008d0c:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10008d0e:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10008d10:	69ca      	ldr	r2, [r1, #28]
10008d12:	1610      	asrs	r0, r2, #24
10008d14:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
10008d16:	1410      	asrs	r0, r2, #16
10008d18:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10008d1a:	1210      	asrs	r0, r2, #8
10008d1c:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10008d1e:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10008d20:	2340      	movs	r3, #64	; 0x40
10008d22:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
10008d24:	2208      	movs	r2, #8
        break;
10008d26:	e05b      	b.n	10008de0 <sms_ble_send_characteristic+0x148>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.output.raw_accel[0] & 0xff);
10008d28:	4a44      	ldr	r2, [pc, #272]	; (10008e3c <sms_ble_send_characteristic+0x1a4>)
10008d2a:	2352      	movs	r3, #82	; 0x52
10008d2c:	5ed1      	ldrsh	r1, [r2, r3]
10008d2e:	ab01      	add	r3, sp, #4
10008d30:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.output.raw_accel[0] >> 8) & 0xff);
10008d32:	1209      	asrs	r1, r1, #8
10008d34:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.output.raw_accel[1] & 0xff);
10008d36:	2154      	movs	r1, #84	; 0x54
10008d38:	5e51      	ldrsh	r1, [r2, r1]
10008d3a:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.output.raw_accel[1] >> 8) & 0xff);
10008d3c:	1209      	asrs	r1, r1, #8
10008d3e:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.output.raw_accel[2] & 0xff);
10008d40:	2156      	movs	r1, #86	; 0x56
10008d42:	5e51      	ldrsh	r1, [r2, r1]
10008d44:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.output.raw_accel[2] >> 8) & 0xff);
10008d46:	1209      	asrs	r1, r1, #8
10008d48:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.output.raw_gyro[0] & 0xff);
10008d4a:	214c      	movs	r1, #76	; 0x4c
10008d4c:	5e51      	ldrsh	r1, [r2, r1]
10008d4e:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.output.raw_gyro[0] >> 8) & 0xff);
10008d50:	1209      	asrs	r1, r1, #8
10008d52:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.output.raw_gyro[1] & 0xff);
10008d54:	214e      	movs	r1, #78	; 0x4e
10008d56:	5e51      	ldrsh	r1, [r2, r1]
10008d58:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.output.raw_gyro[1] >> 8) & 0xff);
10008d5a:	1209      	asrs	r1, r1, #8
10008d5c:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.output.raw_gyro[2] & 0xff);
10008d5e:	2150      	movs	r1, #80	; 0x50
10008d60:	5e51      	ldrsh	r1, [r2, r1]
10008d62:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.output.raw_gyro[2] >> 8) & 0xff);
10008d64:	1209      	asrs	r1, r1, #8
10008d66:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
10008d68:	238c      	movs	r3, #140	; 0x8c
10008d6a:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.interrupt.new_compass) {
10008d6c:	3b1a      	subs	r3, #26
10008d6e:	5cd3      	ldrb	r3, [r2, r3]
10008d70:	2b00      	cmp	r3, #0
10008d72:	d014      	beq.n	10008d9e <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.output.raw_compass[0] & 0xff);
10008d74:	2358      	movs	r3, #88	; 0x58
10008d76:	5ed1      	ldrsh	r1, [r2, r3]
10008d78:	ab01      	add	r3, sp, #4
10008d7a:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.output.raw_compass[0] >> 8) & 0xff);
10008d7c:	1209      	asrs	r1, r1, #8
10008d7e:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.output.raw_compass[1] & 0xff);
10008d80:	215a      	movs	r1, #90	; 0x5a
10008d82:	5e51      	ldrsh	r1, [r2, r1]
10008d84:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.output.raw_compass[1] >> 8) & 0xff);
10008d86:	1209      	asrs	r1, r1, #8
10008d88:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.output.raw_compass[2] & 0xff);
10008d8a:	215c      	movs	r1, #92	; 0x5c
10008d8c:	5e51      	ldrsh	r1, [r2, r1]
10008d8e:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.output.raw_compass[2] >> 8) & 0xff);
10008d90:	1209      	asrs	r1, r1, #8
10008d92:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.interrupt.new_compass = false;
10008d94:	2100      	movs	r1, #0
10008d96:	2372      	movs	r3, #114	; 0x72
10008d98:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.output.raw_compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.output.raw_compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.output.raw_compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.output.raw_compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.output.raw_compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
10008d9a:	2212      	movs	r2, #18
10008d9c:	e008      	b.n	10008db0 <sms_ble_send_characteristic+0x118>
            mpu_device.interrupt.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
10008d9e:	ab01      	add	r3, sp, #4
10008da0:	2200      	movs	r2, #0
10008da2:	731a      	strb	r2, [r3, #12]
10008da4:	735a      	strb	r2, [r3, #13]
10008da6:	739a      	strb	r2, [r3, #14]
10008da8:	73da      	strb	r2, [r3, #15]
10008daa:	741a      	strb	r2, [r3, #16]
10008dac:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.output.raw_gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.output.raw_gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.output.raw_gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.output.raw_gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
10008dae:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.interrupt.new_temp) {
10008db0:	2373      	movs	r3, #115	; 0x73
10008db2:	4922      	ldr	r1, [pc, #136]	; (10008e3c <sms_ble_send_characteristic+0x1a4>)
10008db4:	5ccb      	ldrb	r3, [r1, r3]
10008db6:	2b00      	cmp	r3, #0
10008db8:	d00b      	beq.n	10008dd2 <sms_ble_send_characteristic+0x13a>
            send_val[18] = (uint8_t)(mpu_device.output.raw_temp & 0xff);
10008dba:	000a      	movs	r2, r1
10008dbc:	235e      	movs	r3, #94	; 0x5e
10008dbe:	5ed3      	ldrsh	r3, [r2, r3]
10008dc0:	a901      	add	r1, sp, #4
10008dc2:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.output.raw_temp >> 8) & 0xff);
10008dc4:	121b      	asrs	r3, r3, #8
10008dc6:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.interrupt.new_temp = false;
10008dc8:	2100      	movs	r1, #0
10008dca:	2373      	movs	r3, #115	; 0x73
10008dcc:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.interrupt.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.output.raw_temp & 0xff);
            send_val[19] = (uint8_t)((mpu_device.output.raw_temp >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
10008dce:	2214      	movs	r2, #20
10008dd0:	e006      	b.n	10008de0 <sms_ble_send_characteristic+0x148>
            mpu_device.interrupt.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
10008dd2:	ab01      	add	r3, sp, #4
10008dd4:	2100      	movs	r1, #0
10008dd6:	7499      	strb	r1, [r3, #18]
10008dd8:	74d9      	strb	r1, [r3, #19]
10008dda:	e001      	b.n	10008de0 <sms_ble_send_characteristic+0x148>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
10008ddc:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
10008dde:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008de0:	b292      	uxth	r2, r2
10008de2:	a901      	add	r1, sp, #4
10008de4:	0028      	movs	r0, r5
10008de6:	4b16      	ldr	r3, [pc, #88]	; (10008e40 <sms_ble_send_characteristic+0x1a8>)
10008de8:	4798      	blx	r3
10008dea:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
10008dec:	d11f      	bne.n	10008e2e <sms_ble_send_characteristic+0x196>
		DBG_LOG_CONT_DEV(" SET! ");
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
10008dee:	4b15      	ldr	r3, [pc, #84]	; (10008e44 <sms_ble_send_characteristic+0x1ac>)
10008df0:	8818      	ldrh	r0, [r3, #0]
10008df2:	0029      	movs	r1, r5
10008df4:	4b14      	ldr	r3, [pc, #80]	; (10008e48 <sms_ble_send_characteristic+0x1b0>)
10008df6:	4798      	blx	r3
10008df8:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
10008dfa:	d115      	bne.n	10008e28 <sms_ble_send_characteristic+0x190>
			ble_instance.sending_queue++;
10008dfc:	4a13      	ldr	r2, [pc, #76]	; (10008e4c <sms_ble_send_characteristic+0x1b4>)
10008dfe:	7853      	ldrb	r3, [r2, #1]
10008e00:	3301      	adds	r3, #1
10008e02:	b2db      	uxtb	r3, r3
10008e04:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
10008e06:	4b12      	ldr	r3, [pc, #72]	; (10008e50 <sms_ble_send_characteristic+0x1b8>)
10008e08:	8819      	ldrh	r1, [r3, #0]
10008e0a:	3101      	adds	r1, #1
10008e0c:	b289      	uxth	r1, r1
10008e0e:	8019      	strh	r1, [r3, #0]
			DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
10008e10:	4810      	ldr	r0, [pc, #64]	; (10008e54 <sms_ble_send_characteristic+0x1bc>)
10008e12:	4d11      	ldr	r5, [pc, #68]	; (10008e58 <sms_ble_send_characteristic+0x1c0>)
10008e14:	47a8      	blx	r5
			DBG_LOG("T/O: 20ms");
10008e16:	4811      	ldr	r0, [pc, #68]	; (10008e5c <sms_ble_send_characteristic+0x1c4>)
10008e18:	4b11      	ldr	r3, [pc, #68]	; (10008e60 <sms_ble_send_characteristic+0x1c8>)
10008e1a:	4798      	blx	r3
10008e1c:	4811      	ldr	r0, [pc, #68]	; (10008e64 <sms_ble_send_characteristic+0x1cc>)
10008e1e:	47a8      	blx	r5
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
10008e20:	2202      	movs	r2, #2
10008e22:	4b11      	ldr	r3, [pc, #68]	; (10008e68 <sms_ble_send_characteristic+0x1d0>)
10008e24:	601a      	str	r2, [r3, #0]
10008e26:	e002      	b.n	10008e2e <sms_ble_send_characteristic+0x196>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
10008e28:	4810      	ldr	r0, [pc, #64]	; (10008e6c <sms_ble_send_characteristic+0x1d4>)
10008e2a:	4b0b      	ldr	r3, [pc, #44]	; (10008e58 <sms_ble_send_characteristic+0x1c0>)
10008e2c:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
10008e2e:	0020      	movs	r0, r4
10008e30:	b007      	add	sp, #28
10008e32:	bd30      	pop	{r4, r5, pc}
10008e34:	1001a1bc 	.word	0x1001a1bc
10008e38:	1001a240 	.word	0x1001a240
10008e3c:	1001a0d0 	.word	0x1001a0d0
10008e40:	1000ff51 	.word	0x1000ff51
10008e44:	1001a1ae 	.word	0x1001a1ae
10008e48:	100100f1 	.word	0x100100f1
10008e4c:	1001a1ac 	.word	0x1001a1ac
10008e50:	1001a2fc 	.word	0x1001a2fc
10008e54:	100174d8 	.word	0x100174d8
10008e58:	100163ad 	.word	0x100163ad
10008e5c:	10017414 	.word	0x10017414
10008e60:	100164cd 	.word	0x100164cd
10008e64:	100174e4 	.word	0x100174e4
10008e68:	1001a1a4 	.word	0x1001a1a4
10008e6c:	100174f0 	.word	0x100174f0

10008e70 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008e70:	b510      	push	{r4, lr}
10008e72:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10008e74:	0001      	movs	r1, r0
10008e76:	3112      	adds	r1, #18
10008e78:	2301      	movs	r3, #1
10008e7a:	9301      	str	r3, [sp, #4]
10008e7c:	0003      	movs	r3, r0
10008e7e:	3314      	adds	r3, #20
10008e80:	9300      	str	r3, [sp, #0]
10008e82:	2300      	movs	r3, #0
10008e84:	2200      	movs	r2, #0
10008e86:	4c02      	ldr	r4, [pc, #8]	; (10008e90 <sms_ble_primary_service_define+0x20>)
10008e88:	47a0      	blx	r4
}
10008e8a:	b002      	add	sp, #8
10008e8c:	bd10      	pop	{r4, pc}
10008e8e:	46c0      	nop			; (mov r8, r8)
10008e90:	1000ff31 	.word	0x1000ff31

10008e94 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10008e94:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e96:	464f      	mov	r7, r9
10008e98:	4646      	mov	r6, r8
10008e9a:	b4c0      	push	{r6, r7}
10008e9c:	b083      	sub	sp, #12
10008e9e:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
10008ea0:	2801      	cmp	r0, #1
10008ea2:	d010      	beq.n	10008ec6 <sms_ble_service_init+0x32>
10008ea4:	2800      	cmp	r0, #0
10008ea6:	d002      	beq.n	10008eae <sms_ble_service_init+0x1a>
10008ea8:	2802      	cmp	r0, #2
10008eaa:	d019      	beq.n	10008ee0 <sms_ble_service_init+0x4c>
10008eac:	e025      	b.n	10008efa <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
10008eae:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
10008eb0:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10008eb2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
10008eb4:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
10008eb6:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10008eb8:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10008eba:	221c      	movs	r2, #28
10008ebc:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
10008ebe:	3a1b      	subs	r2, #27
10008ec0:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
10008ec2:	4691      	mov	r9, r2
10008ec4:	e023      	b.n	10008f0e <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008ec6:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008ec8:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008eca:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008ecc:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008ece:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008ed0:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008ed2:	221c      	movs	r2, #28
10008ed4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
10008ed6:	3a14      	subs	r2, #20
10008ed8:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
10008eda:	3a06      	subs	r2, #6
10008edc:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
10008ede:	e016      	b.n	10008f0e <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10008ee0:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
10008ee2:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10008ee4:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
10008ee6:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008ee8:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008eea:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008eec:	221c      	movs	r2, #28
10008eee:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008ef0:	3a08      	subs	r2, #8
10008ef2:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
10008ef4:	3a11      	subs	r2, #17
10008ef6:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008ef8:	e009      	b.n	10008f0e <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008efa:	2300      	movs	r3, #0
10008efc:	2400      	movs	r4, #0
10008efe:	2500      	movs	r5, #0
10008f00:	2600      	movs	r6, #0
10008f02:	2700      	movs	r7, #0
10008f04:	2000      	movs	r0, #0
10008f06:	2200      	movs	r2, #0
10008f08:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008f0a:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008f0c:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008f0e:	464a      	mov	r2, r9
10008f10:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
10008f12:	2202      	movs	r2, #2
10008f14:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10008f16:	4642      	mov	r2, r8
10008f18:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008f1a:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008f1c:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008f1e:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008f20:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
10008f22:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10008f24:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10008f26:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008f28:	2300      	movs	r3, #0
10008f2a:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008f2c:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008f2e:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008f30:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
10008f32:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
10008f34:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
10008f36:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008f38:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008f3a:	2412      	movs	r4, #18
10008f3c:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008f3e:	4662      	mov	r2, ip
10008f40:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008f42:	466a      	mov	r2, sp
10008f44:	8892      	ldrh	r2, [r2, #4]
10008f46:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008f48:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008f4a:	2011      	movs	r0, #17
10008f4c:	2234      	movs	r2, #52	; 0x34
10008f4e:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008f50:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
10008f52:	2200      	movs	r2, #0
10008f54:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
10008f56:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008f58:	3033      	adds	r0, #51	; 0x33
10008f5a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008f5c:	3001      	adds	r0, #1
10008f5e:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008f60:	3001      	adds	r0, #1
10008f62:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
10008f64:	2248      	movs	r2, #72	; 0x48
10008f66:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008f68:	3202      	adds	r2, #2
10008f6a:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008f6c:	3202      	adds	r2, #2
10008f6e:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008f70:	640b      	str	r3, [r1, #64]	; 0x40
10008f72:	b003      	add	sp, #12
10008f74:	bc0c      	pop	{r2, r3}
10008f76:	4690      	mov	r8, r2
10008f78:	4699      	mov	r9, r3
10008f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008f7c <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008f7c:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008f7e:	4b05      	ldr	r3, [pc, #20]	; (10008f94 <sms_button_bt0_callback+0x18>)
10008f80:	2201      	movs	r2, #1
10008f82:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008f84:	7858      	ldrb	r0, [r3, #1]
10008f86:	2300      	movs	r3, #0
10008f88:	2200      	movs	r2, #0
10008f8a:	2102      	movs	r1, #2
10008f8c:	4c02      	ldr	r4, [pc, #8]	; (10008f98 <sms_button_bt0_callback+0x1c>)
10008f8e:	47a0      	blx	r4
}
10008f90:	bd10      	pop	{r4, pc}
10008f92:	46c0      	nop			; (mov r8, r8)
10008f94:	1001a1bc 	.word	0x1001a1bc
10008f98:	1000e161 	.word	0x1000e161

10008f9c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008f9c:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008f9e:	4b05      	ldr	r3, [pc, #20]	; (10008fb4 <sms_button_bt1_callback+0x18>)
10008fa0:	2201      	movs	r2, #1
10008fa2:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008fa4:	79d8      	ldrb	r0, [r3, #7]
10008fa6:	2300      	movs	r3, #0
10008fa8:	2200      	movs	r2, #0
10008faa:	2102      	movs	r1, #2
10008fac:	4c02      	ldr	r4, [pc, #8]	; (10008fb8 <sms_button_bt1_callback+0x1c>)
10008fae:	47a0      	blx	r4
}
10008fb0:	bd10      	pop	{r4, pc}
10008fb2:	46c0      	nop			; (mov r8, r8)
10008fb4:	1001a1bc 	.word	0x1001a1bc
10008fb8:	1000e161 	.word	0x1000e161

10008fbc <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008fbc:	4b08      	ldr	r3, [pc, #32]	; (10008fe0 <sms_button_init_variables+0x24>)
10008fbe:	2200      	movs	r2, #0
10008fc0:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008fc2:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008fc4:	211f      	movs	r1, #31
10008fc6:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008fc8:	391e      	subs	r1, #30
10008fca:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008fcc:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008fce:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008fd0:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008fd2:	201d      	movs	r0, #29
10008fd4:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008fd6:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008fd8:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008fda:	72da      	strb	r2, [r3, #11]
}
10008fdc:	4770      	bx	lr
10008fde:	46c0      	nop			; (mov r8, r8)
10008fe0:	1001a1bc 	.word	0x1001a1bc

10008fe4 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008fe6:	4657      	mov	r7, sl
10008fe8:	464e      	mov	r6, r9
10008fea:	4645      	mov	r5, r8
10008fec:	b4e0      	push	{r5, r6, r7}
10008fee:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008ff0:	ac01      	add	r4, sp, #4
10008ff2:	0020      	movs	r0, r4
10008ff4:	4b1d      	ldr	r3, [pc, #116]	; (1000906c <sms_button_gpio_init+0x88>)
10008ff6:	469a      	mov	sl, r3
10008ff8:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008ffa:	2300      	movs	r3, #0
10008ffc:	4699      	mov	r9, r3
10008ffe:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009000:	2302      	movs	r3, #2
10009002:	4698      	mov	r8, r3
10009004:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009006:	2701      	movs	r7, #1
10009008:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000900a:	4e19      	ldr	r6, [pc, #100]	; (10009070 <sms_button_gpio_init+0x8c>)
1000900c:	7870      	ldrb	r0, [r6, #1]
1000900e:	0021      	movs	r1, r4
10009010:	4d18      	ldr	r5, [pc, #96]	; (10009074 <sms_button_gpio_init+0x90>)
10009012:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10009014:	0020      	movs	r0, r4
10009016:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009018:	464b      	mov	r3, r9
1000901a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000901c:	4643      	mov	r3, r8
1000901e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009020:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10009022:	79f0      	ldrb	r0, [r6, #7]
10009024:	0021      	movs	r1, r4
10009026:	47a8      	blx	r5
10009028:	2800      	cmp	r0, #0
1000902a:	d005      	beq.n	10009038 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000902c:	4812      	ldr	r0, [pc, #72]	; (10009078 <sms_button_gpio_init+0x94>)
1000902e:	4b13      	ldr	r3, [pc, #76]	; (1000907c <sms_button_gpio_init+0x98>)
10009030:	4798      	blx	r3
10009032:	4813      	ldr	r0, [pc, #76]	; (10009080 <sms_button_gpio_init+0x9c>)
10009034:	4b13      	ldr	r3, [pc, #76]	; (10009084 <sms_button_gpio_init+0xa0>)
10009036:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10009038:	ac01      	add	r4, sp, #4
1000903a:	0020      	movs	r0, r4
1000903c:	4b0b      	ldr	r3, [pc, #44]	; (1000906c <sms_button_gpio_init+0x88>)
1000903e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009040:	2300      	movs	r3, #0
10009042:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10009044:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009046:	0021      	movs	r1, r4
10009048:	2017      	movs	r0, #23
1000904a:	4b0a      	ldr	r3, [pc, #40]	; (10009074 <sms_button_gpio_init+0x90>)
1000904c:	4798      	blx	r3
1000904e:	2800      	cmp	r0, #0
10009050:	d005      	beq.n	1000905e <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10009052:	4809      	ldr	r0, [pc, #36]	; (10009078 <sms_button_gpio_init+0x94>)
10009054:	4b09      	ldr	r3, [pc, #36]	; (1000907c <sms_button_gpio_init+0x98>)
10009056:	4798      	blx	r3
10009058:	480b      	ldr	r0, [pc, #44]	; (10009088 <sms_button_gpio_init+0xa4>)
1000905a:	4b0a      	ldr	r3, [pc, #40]	; (10009084 <sms_button_gpio_init+0xa0>)
1000905c:	4798      	blx	r3
    }
}
1000905e:	b002      	add	sp, #8
10009060:	bc1c      	pop	{r2, r3, r4}
10009062:	4690      	mov	r8, r2
10009064:	4699      	mov	r9, r3
10009066:	46a2      	mov	sl, r4
10009068:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000906a:	46c0      	nop			; (mov r8, r8)
1000906c:	1000b235 	.word	0x1000b235
10009070:	1001a1bc 	.word	0x1001a1bc
10009074:	1000b245 	.word	0x1000b245
10009078:	10017414 	.word	0x10017414
1000907c:	100164cd 	.word	0x100164cd
10009080:	1001757c 	.word	0x1001757c
10009084:	100163ad 	.word	0x100163ad
10009088:	100175b4 	.word	0x100175b4

1000908c <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000908c:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000908e:	4d05      	ldr	r5, [pc, #20]	; (100090a4 <sms_button_register_callbacks+0x18>)
10009090:	7868      	ldrb	r0, [r5, #1]
10009092:	2202      	movs	r2, #2
10009094:	4904      	ldr	r1, [pc, #16]	; (100090a8 <sms_button_register_callbacks+0x1c>)
10009096:	4c05      	ldr	r4, [pc, #20]	; (100090ac <sms_button_register_callbacks+0x20>)
10009098:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000909a:	79e8      	ldrb	r0, [r5, #7]
1000909c:	2202      	movs	r2, #2
1000909e:	4904      	ldr	r1, [pc, #16]	; (100090b0 <sms_button_register_callbacks+0x24>)
100090a0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100090a2:	bd70      	pop	{r4, r5, r6, pc}
100090a4:	1001a1bc 	.word	0x1001a1bc
100090a8:	10008f7d 	.word	0x10008f7d
100090ac:	1000b675 	.word	0x1000b675
100090b0:	10008f9d 	.word	0x10008f9d

100090b4 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
100090b4:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
100090b6:	201f      	movs	r0, #31
100090b8:	4c08      	ldr	r4, [pc, #32]	; (100090dc <sms_button_get_state+0x28>)
100090ba:	47a0      	blx	r4
100090bc:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
100090be:	201d      	movs	r0, #29
100090c0:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
100090c2:	2d00      	cmp	r5, #0
100090c4:	d004      	beq.n	100090d0 <sms_button_get_state+0x1c>
100090c6:	2303      	movs	r3, #3
100090c8:	2800      	cmp	r0, #0
100090ca:	d104      	bne.n	100090d6 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
100090cc:	3b02      	subs	r3, #2
100090ce:	e002      	b.n	100090d6 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
100090d0:	1e43      	subs	r3, r0, #1
100090d2:	4198      	sbcs	r0, r3
100090d4:	0043      	lsls	r3, r0, #1
}
100090d6:	0018      	movs	r0, r3
100090d8:	bd70      	pop	{r4, r5, r6, pc}
100090da:	46c0      	nop			; (mov r8, r8)
100090dc:	1000b3fd 	.word	0x1000b3fd

100090e0 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
100090e0:	b570      	push	{r4, r5, r6, lr}
100090e2:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
100090e4:	4c47      	ldr	r4, [pc, #284]	; (10009204 <sms_button_fn+0x124>)
100090e6:	7b63      	ldrb	r3, [r4, #13]
100090e8:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
100090ea:	4b47      	ldr	r3, [pc, #284]	; (10009208 <sms_button_fn+0x128>)
100090ec:	4798      	blx	r3
100090ee:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
100090f0:	2d00      	cmp	r5, #0
100090f2:	d103      	bne.n	100090fc <sms_button_fn+0x1c>
100090f4:	4845      	ldr	r0, [pc, #276]	; (1000920c <sms_button_fn+0x12c>)
100090f6:	4b46      	ldr	r3, [pc, #280]	; (10009210 <sms_button_fn+0x130>)
100090f8:	4798      	blx	r3
100090fa:	e004      	b.n	10009106 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
100090fc:	2d01      	cmp	r5, #1
100090fe:	d175      	bne.n	100091ec <sms_button_fn+0x10c>
10009100:	4844      	ldr	r0, [pc, #272]	; (10009214 <sms_button_fn+0x134>)
10009102:	4b43      	ldr	r3, [pc, #268]	; (10009210 <sms_button_fn+0x130>)
10009104:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
10009106:	4b3f      	ldr	r3, [pc, #252]	; (10009204 <sms_button_fn+0x124>)
10009108:	7b5b      	ldrb	r3, [r3, #13]
1000910a:	2b01      	cmp	r3, #1
1000910c:	d006      	beq.n	1000911c <sms_button_fn+0x3c>
1000910e:	2b00      	cmp	r3, #0
10009110:	d067      	beq.n	100091e2 <sms_button_fn+0x102>
10009112:	2b02      	cmp	r3, #2
10009114:	d024      	beq.n	10009160 <sms_button_fn+0x80>
10009116:	2b03      	cmp	r3, #3
10009118:	d043      	beq.n	100091a2 <sms_button_fn+0xc2>
1000911a:	e06a      	b.n	100091f2 <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
1000911c:	4b3e      	ldr	r3, [pc, #248]	; (10009218 <sms_button_fn+0x138>)
1000911e:	781b      	ldrb	r3, [r3, #0]
10009120:	b2db      	uxtb	r3, r3
10009122:	2b00      	cmp	r3, #0
10009124:	d003      	beq.n	1000912e <sms_button_fn+0x4e>
10009126:	3b22      	subs	r3, #34	; 0x22
10009128:	2b01      	cmp	r3, #1
1000912a:	d864      	bhi.n	100091f6 <sms_button_fn+0x116>
1000912c:	e00e      	b.n	1000914c <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000912e:	2201      	movs	r2, #1
10009130:	4b3a      	ldr	r3, [pc, #232]	; (1000921c <sms_button_fn+0x13c>)
10009132:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009134:	2300      	movs	r3, #0
10009136:	4a3a      	ldr	r2, [pc, #232]	; (10009220 <sms_button_fn+0x140>)
10009138:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000913a:	4a3a      	ldr	r2, [pc, #232]	; (10009224 <sms_button_fn+0x144>)
1000913c:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000913e:	2200      	movs	r2, #0
10009140:	21fa      	movs	r1, #250	; 0xfa
10009142:	2001      	movs	r0, #1
10009144:	4b38      	ldr	r3, [pc, #224]	; (10009228 <sms_button_fn+0x148>)
10009146:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009148:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000914a:	e059      	b.n	10009200 <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000914c:	2300      	movs	r3, #0
1000914e:	4a33      	ldr	r2, [pc, #204]	; (1000921c <sms_button_fn+0x13c>)
10009150:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009152:	4a33      	ldr	r2, [pc, #204]	; (10009220 <sms_button_fn+0x140>)
10009154:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10009156:	2000      	movs	r0, #0
10009158:	4b34      	ldr	r3, [pc, #208]	; (1000922c <sms_button_fn+0x14c>)
1000915a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000915c:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000915e:	e04f      	b.n	10009200 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10009160:	4b2d      	ldr	r3, [pc, #180]	; (10009218 <sms_button_fn+0x138>)
10009162:	781b      	ldrb	r3, [r3, #0]
10009164:	b2db      	uxtb	r3, r3
10009166:	2b00      	cmp	r3, #0
10009168:	d002      	beq.n	10009170 <sms_button_fn+0x90>
1000916a:	2b22      	cmp	r3, #34	; 0x22
1000916c:	d00f      	beq.n	1000918e <sms_button_fn+0xae>
1000916e:	e045      	b.n	100091fc <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10009170:	2201      	movs	r2, #1
10009172:	4b2a      	ldr	r3, [pc, #168]	; (1000921c <sms_button_fn+0x13c>)
10009174:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009176:	2300      	movs	r3, #0
10009178:	4a29      	ldr	r2, [pc, #164]	; (10009220 <sms_button_fn+0x140>)
1000917a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000917c:	4a29      	ldr	r2, [pc, #164]	; (10009224 <sms_button_fn+0x144>)
1000917e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10009180:	2200      	movs	r2, #0
10009182:	21fa      	movs	r1, #250	; 0xfa
10009184:	2001      	movs	r0, #1
10009186:	4b28      	ldr	r3, [pc, #160]	; (10009228 <sms_button_fn+0x148>)
10009188:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000918a:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000918c:	e038      	b.n	10009200 <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000918e:	2300      	movs	r3, #0
10009190:	4a22      	ldr	r2, [pc, #136]	; (1000921c <sms_button_fn+0x13c>)
10009192:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009194:	4a22      	ldr	r2, [pc, #136]	; (10009220 <sms_button_fn+0x140>)
10009196:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
10009198:	2000      	movs	r0, #0
1000919a:	4b24      	ldr	r3, [pc, #144]	; (1000922c <sms_button_fn+0x14c>)
1000919c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000919e:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
100091a0:	e02e      	b.n	10009200 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100091a2:	4b1d      	ldr	r3, [pc, #116]	; (10009218 <sms_button_fn+0x138>)
100091a4:	781b      	ldrb	r3, [r3, #0]
100091a6:	2b00      	cmp	r3, #0
100091a8:	d108      	bne.n	100091bc <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
100091aa:	4a1c      	ldr	r2, [pc, #112]	; (1000921c <sms_button_fn+0x13c>)
100091ac:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100091ae:	4a1c      	ldr	r2, [pc, #112]	; (10009220 <sms_button_fn+0x140>)
100091b0:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
100091b2:	2201      	movs	r2, #1
100091b4:	4b1e      	ldr	r3, [pc, #120]	; (10009230 <sms_button_fn+0x150>)
100091b6:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100091b8:	2000      	movs	r0, #0
100091ba:	e021      	b.n	10009200 <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
100091bc:	2100      	movs	r1, #0
100091be:	2000      	movs	r0, #0
100091c0:	4b1c      	ldr	r3, [pc, #112]	; (10009234 <sms_button_fn+0x154>)
100091c2:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
100091c4:	2202      	movs	r2, #2
100091c6:	4b15      	ldr	r3, [pc, #84]	; (1000921c <sms_button_fn+0x13c>)
100091c8:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100091ca:	2300      	movs	r3, #0
100091cc:	4a14      	ldr	r2, [pc, #80]	; (10009220 <sms_button_fn+0x140>)
100091ce:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
100091d0:	4a14      	ldr	r2, [pc, #80]	; (10009224 <sms_button_fn+0x144>)
100091d2:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
100091d4:	2200      	movs	r2, #0
100091d6:	21fa      	movs	r1, #250	; 0xfa
100091d8:	2001      	movs	r0, #1
100091da:	4b13      	ldr	r3, [pc, #76]	; (10009228 <sms_button_fn+0x148>)
100091dc:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100091de:	2000      	movs	r0, #0
100091e0:	e00e      	b.n	10009200 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
100091e2:	2201      	movs	r2, #1
100091e4:	4b12      	ldr	r3, [pc, #72]	; (10009230 <sms_button_fn+0x150>)
100091e6:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100091e8:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
100091ea:	e009      	b.n	10009200 <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
100091ec:	2001      	movs	r0, #1
100091ee:	4240      	negs	r0, r0
100091f0:	e006      	b.n	10009200 <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100091f2:	2000      	movs	r0, #0
100091f4:	e004      	b.n	10009200 <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
100091f6:	2001      	movs	r0, #1
100091f8:	4240      	negs	r0, r0
100091fa:	e001      	b.n	10009200 <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
100091fc:	2001      	movs	r0, #1
100091fe:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
10009200:	bd70      	pop	{r4, r5, r6, pc}
10009202:	46c0      	nop			; (mov r8, r8)
10009204:	1001a1bc 	.word	0x1001a1bc
10009208:	100090b5 	.word	0x100090b5
1000920c:	100175fc 	.word	0x100175fc
10009210:	1000934d 	.word	0x1000934d
10009214:	10017610 	.word	0x10017610
10009218:	1001a1ac 	.word	0x1001a1ac
1000921c:	1001a0cc 	.word	0x1001a0cc
10009220:	1001a2db 	.word	0x1001a2db
10009224:	1001a2fe 	.word	0x1001a2fe
10009228:	1000a7d1 	.word	0x1000a7d1
1000922c:	10008c99 	.word	0x10008c99
10009230:	1001a1a9 	.word	0x1001a1a9
10009234:	1000a569 	.word	0x1000a569

10009238 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10009238:	b510      	push	{r4, lr}
1000923a:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000923c:	2800      	cmp	r0, #0
1000923e:	d104      	bne.n	1000924a <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10009240:	4b0c      	ldr	r3, [pc, #48]	; (10009274 <sms_button_toggle_callback+0x3c>)
10009242:	7858      	ldrb	r0, [r3, #1]
10009244:	4b0c      	ldr	r3, [pc, #48]	; (10009278 <sms_button_toggle_callback+0x40>)
10009246:	4798      	blx	r3
10009248:	e005      	b.n	10009256 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000924a:	2801      	cmp	r0, #1
1000924c:	d103      	bne.n	10009256 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000924e:	4b09      	ldr	r3, [pc, #36]	; (10009274 <sms_button_toggle_callback+0x3c>)
10009250:	7858      	ldrb	r0, [r3, #1]
10009252:	4b0a      	ldr	r3, [pc, #40]	; (1000927c <sms_button_toggle_callback+0x44>)
10009254:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10009256:	2c00      	cmp	r4, #0
10009258:	d104      	bne.n	10009264 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000925a:	4b06      	ldr	r3, [pc, #24]	; (10009274 <sms_button_toggle_callback+0x3c>)
1000925c:	79d8      	ldrb	r0, [r3, #7]
1000925e:	4b06      	ldr	r3, [pc, #24]	; (10009278 <sms_button_toggle_callback+0x40>)
10009260:	4798      	blx	r3
10009262:	e005      	b.n	10009270 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10009264:	2c01      	cmp	r4, #1
10009266:	d103      	bne.n	10009270 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10009268:	4b02      	ldr	r3, [pc, #8]	; (10009274 <sms_button_toggle_callback+0x3c>)
1000926a:	79d8      	ldrb	r0, [r3, #7]
1000926c:	4b03      	ldr	r3, [pc, #12]	; (1000927c <sms_button_toggle_callback+0x44>)
1000926e:	4798      	blx	r3
    }
}
10009270:	bd10      	pop	{r4, pc}
10009272:	46c0      	nop			; (mov r8, r8)
10009274:	1001a1bc 	.word	0x1001a1bc
10009278:	1000b745 	.word	0x1000b745
1000927c:	1000b7a1 	.word	0x1000b7a1

10009280 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10009280:	b510      	push	{r4, lr}
10009282:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009284:	466b      	mov	r3, sp
10009286:	1dda      	adds	r2, r3, #7
10009288:	2300      	movs	r3, #0
1000928a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000928c:	4c09      	ldr	r4, [pc, #36]	; (100092b4 <sms_button_define_services+0x34>)
1000928e:	0021      	movs	r1, r4
10009290:	2000      	movs	r0, #0
10009292:	4b09      	ldr	r3, [pc, #36]	; (100092b8 <sms_button_define_services+0x38>)
10009294:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10009296:	0020      	movs	r0, r4
10009298:	4b08      	ldr	r3, [pc, #32]	; (100092bc <sms_button_define_services+0x3c>)
1000929a:	4798      	blx	r3
1000929c:	1e04      	subs	r4, r0, #0
1000929e:	d006      	beq.n	100092ae <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
100092a0:	4807      	ldr	r0, [pc, #28]	; (100092c0 <sms_button_define_services+0x40>)
100092a2:	4b08      	ldr	r3, [pc, #32]	; (100092c4 <sms_button_define_services+0x44>)
100092a4:	4798      	blx	r3
100092a6:	0021      	movs	r1, r4
100092a8:	4807      	ldr	r0, [pc, #28]	; (100092c8 <sms_button_define_services+0x48>)
100092aa:	4b08      	ldr	r3, [pc, #32]	; (100092cc <sms_button_define_services+0x4c>)
100092ac:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
100092ae:	b002      	add	sp, #8
100092b0:	bd10      	pop	{r4, pc}
100092b2:	46c0      	nop			; (mov r8, r8)
100092b4:	1001a1cc 	.word	0x1001a1cc
100092b8:	10008e95 	.word	0x10008e95
100092bc:	10008e71 	.word	0x10008e71
100092c0:	10017414 	.word	0x10017414
100092c4:	100164cd 	.word	0x100164cd
100092c8:	10017624 	.word	0x10017624
100092cc:	100163ad 	.word	0x100163ad

100092d0 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
100092d0:	b510      	push	{r4, lr}
100092d2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
100092d4:	ac01      	add	r4, sp, #4
100092d6:	0020      	movs	r0, r4
100092d8:	4b15      	ldr	r3, [pc, #84]	; (10009330 <sms_monitor_configure_gpio+0x60>)
100092da:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
100092dc:	2301      	movs	r3, #1
100092de:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
100092e0:	0021      	movs	r1, r4
100092e2:	200e      	movs	r0, #14
100092e4:	4b13      	ldr	r3, [pc, #76]	; (10009334 <sms_monitor_configure_gpio+0x64>)
100092e6:	4798      	blx	r3
100092e8:	2800      	cmp	r0, #0
100092ea:	d005      	beq.n	100092f8 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
100092ec:	4812      	ldr	r0, [pc, #72]	; (10009338 <sms_monitor_configure_gpio+0x68>)
100092ee:	4b13      	ldr	r3, [pc, #76]	; (1000933c <sms_monitor_configure_gpio+0x6c>)
100092f0:	4798      	blx	r3
100092f2:	4813      	ldr	r0, [pc, #76]	; (10009340 <sms_monitor_configure_gpio+0x70>)
100092f4:	4b13      	ldr	r3, [pc, #76]	; (10009344 <sms_monitor_configure_gpio+0x74>)
100092f6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
100092f8:	2100      	movs	r1, #0
100092fa:	200e      	movs	r0, #14
100092fc:	4b12      	ldr	r3, [pc, #72]	; (10009348 <sms_monitor_configure_gpio+0x78>)
100092fe:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10009300:	ac01      	add	r4, sp, #4
10009302:	0020      	movs	r0, r4
10009304:	4b0a      	ldr	r3, [pc, #40]	; (10009330 <sms_monitor_configure_gpio+0x60>)
10009306:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009308:	2301      	movs	r3, #1
1000930a:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000930c:	0021      	movs	r1, r4
1000930e:	200f      	movs	r0, #15
10009310:	4b08      	ldr	r3, [pc, #32]	; (10009334 <sms_monitor_configure_gpio+0x64>)
10009312:	4798      	blx	r3
10009314:	2800      	cmp	r0, #0
10009316:	d005      	beq.n	10009324 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10009318:	4807      	ldr	r0, [pc, #28]	; (10009338 <sms_monitor_configure_gpio+0x68>)
1000931a:	4b08      	ldr	r3, [pc, #32]	; (1000933c <sms_monitor_configure_gpio+0x6c>)
1000931c:	4798      	blx	r3
1000931e:	4808      	ldr	r0, [pc, #32]	; (10009340 <sms_monitor_configure_gpio+0x70>)
10009320:	4b08      	ldr	r3, [pc, #32]	; (10009344 <sms_monitor_configure_gpio+0x74>)
10009322:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10009324:	2100      	movs	r1, #0
10009326:	200f      	movs	r0, #15
10009328:	4b07      	ldr	r3, [pc, #28]	; (10009348 <sms_monitor_configure_gpio+0x78>)
1000932a:	4798      	blx	r3
}
1000932c:	b002      	add	sp, #8
1000932e:	bd10      	pop	{r4, pc}
10009330:	1000b235 	.word	0x1000b235
10009334:	1000b245 	.word	0x1000b245
10009338:	10017414 	.word	0x10017414
1000933c:	100164cd 	.word	0x100164cd
10009340:	10017668 	.word	0x10017668
10009344:	100163ad 	.word	0x100163ad
10009348:	1000b49d 	.word	0x1000b49d

1000934c <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000934c:	4b04      	ldr	r3, [pc, #16]	; (10009360 <sms_monitor_get_states+0x14>)
1000934e:	781b      	ldrb	r3, [r3, #0]
10009350:	4b04      	ldr	r3, [pc, #16]	; (10009364 <sms_monitor_get_states+0x18>)
10009352:	781b      	ldrb	r3, [r3, #0]
10009354:	4b04      	ldr	r3, [pc, #16]	; (10009368 <sms_monitor_get_states+0x1c>)
10009356:	781b      	ldrb	r3, [r3, #0]
10009358:	4b04      	ldr	r3, [pc, #16]	; (1000936c <sms_monitor_get_states+0x20>)
1000935a:	781b      	ldrb	r3, [r3, #0]
}
1000935c:	4770      	bx	lr
1000935e:	46c0      	nop			; (mov r8, r8)
10009360:	1001a1ac 	.word	0x1001a1ac
10009364:	1001a0cc 	.word	0x1001a0cc
10009368:	1001a2db 	.word	0x1001a2db
1000936c:	1001a1a8 	.word	0x1001a1a8

10009370 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009370:	b530      	push	{r4, r5, lr}
10009372:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009374:	2010      	movs	r0, #16
10009376:	4c14      	ldr	r4, [pc, #80]	; (100093c8 <sms_i2c_master_configure+0x58>)
10009378:	47a0      	blx	r4
1000937a:	4b14      	ldr	r3, [pc, #80]	; (100093cc <sms_i2c_master_configure+0x5c>)
1000937c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000937e:	2010      	movs	r0, #16
10009380:	47a0      	blx	r4
10009382:	4b13      	ldr	r3, [pc, #76]	; (100093d0 <sms_i2c_master_configure+0x60>)
10009384:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10009386:	ac01      	add	r4, sp, #4
10009388:	0020      	movs	r0, r4
1000938a:	4b12      	ldr	r3, [pc, #72]	; (100093d4 <sms_i2c_master_configure+0x64>)
1000938c:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000938e:	2303      	movs	r3, #3
10009390:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10009392:	331b      	adds	r3, #27
10009394:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10009396:	3b16      	subs	r3, #22
10009398:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000939a:	3301      	adds	r3, #1
1000939c:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000939e:	3b07      	subs	r3, #7
100093a0:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
100093a2:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
100093a4:	4d0c      	ldr	r5, [pc, #48]	; (100093d8 <sms_i2c_master_configure+0x68>)
100093a6:	4c0d      	ldr	r4, [pc, #52]	; (100093dc <sms_i2c_master_configure+0x6c>)
100093a8:	aa01      	add	r2, sp, #4
100093aa:	490d      	ldr	r1, [pc, #52]	; (100093e0 <sms_i2c_master_configure+0x70>)
100093ac:	0028      	movs	r0, r5
100093ae:	47a0      	blx	r4
100093b0:	2800      	cmp	r0, #0
100093b2:	d1f9      	bne.n	100093a8 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
100093b4:	4b08      	ldr	r3, [pc, #32]	; (100093d8 <sms_i2c_master_configure+0x68>)
100093b6:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100093b8:	2128      	movs	r1, #40	; 0x28
100093ba:	5c53      	ldrb	r3, [r2, r1]
100093bc:	07db      	lsls	r3, r3, #31
100093be:	d4fc      	bmi.n	100093ba <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
100093c0:	2301      	movs	r3, #1
100093c2:	7513      	strb	r3, [r2, #20]
}
100093c4:	b007      	add	sp, #28
100093c6:	bd30      	pop	{r4, r5, pc}
100093c8:	10016221 	.word	0x10016221
100093cc:	1001a2e0 	.word	0x1001a2e0
100093d0:	1001a2c4 	.word	0x1001a2c4
100093d4:	10008305 	.word	0x10008305
100093d8:	1001a2d0 	.word	0x1001a2d0
100093dc:	1000831d 	.word	0x1000831d
100093e0:	40003000 	.word	0x40003000

100093e4 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
100093e6:	4c12      	ldr	r4, [pc, #72]	; (10009430 <sms_i2c_master_write+0x4c>)
100093e8:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
100093ea:	1c50      	adds	r0, r2, #1
100093ec:	b2c0      	uxtb	r0, r0
100093ee:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100093f0:	6860      	ldr	r0, [r4, #4]
100093f2:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100093f4:	2a00      	cmp	r2, #0
100093f6:	d00e      	beq.n	10009416 <sms_i2c_master_write+0x32>
100093f8:	2000      	movs	r0, #0
100093fa:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100093fc:	5c18      	ldrb	r0, [r3, r0]
100093fe:	6865      	ldr	r5, [r4, #4]
10009400:	5468      	strb	r0, [r5, r1]
10009402:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009404:	b2c9      	uxtb	r1, r1
10009406:	428a      	cmp	r2, r1
10009408:	d8f7      	bhi.n	100093fa <sms_i2c_master_write+0x16>
1000940a:	e004      	b.n	10009416 <sms_i2c_master_write+0x32>
1000940c:	3c01      	subs	r4, #1
1000940e:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10009410:	2c00      	cmp	r4, #0
10009412:	d104      	bne.n	1000941e <sms_i2c_master_write+0x3a>
10009414:	e009      	b.n	1000942a <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009416:	4c07      	ldr	r4, [pc, #28]	; (10009434 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009418:	4e05      	ldr	r6, [pc, #20]	; (10009430 <sms_i2c_master_write+0x4c>)
1000941a:	4d07      	ldr	r5, [pc, #28]	; (10009438 <sms_i2c_master_write+0x54>)
1000941c:	4f07      	ldr	r7, [pc, #28]	; (1000943c <sms_i2c_master_write+0x58>)
1000941e:	0031      	movs	r1, r6
10009420:	0028      	movs	r0, r5
10009422:	47b8      	blx	r7
10009424:	2800      	cmp	r0, #0
10009426:	d1f1      	bne.n	1000940c <sms_i2c_master_write+0x28>
10009428:	e001      	b.n	1000942e <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000942a:	2001      	movs	r0, #1
1000942c:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009430:	1001a2e0 	.word	0x1001a2e0
10009434:	000003e9 	.word	0x000003e9
10009438:	1001a2d0 	.word	0x1001a2d0
1000943c:	100083b5 	.word	0x100083b5

10009440 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10009440:	b5f0      	push	{r4, r5, r6, r7, lr}
10009442:	4647      	mov	r7, r8
10009444:	b480      	push	{r7}
10009446:	0017      	movs	r7, r2
10009448:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000944a:	b280      	uxth	r0, r0
1000944c:	4b1d      	ldr	r3, [pc, #116]	; (100094c4 <sms_i2c_master_read+0x84>)
1000944e:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10009450:	2201      	movs	r2, #1
10009452:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009454:	685b      	ldr	r3, [r3, #4]
10009456:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009458:	4b1b      	ldr	r3, [pc, #108]	; (100094c8 <sms_i2c_master_read+0x88>)
1000945a:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000945c:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000945e:	4c1b      	ldr	r4, [pc, #108]	; (100094cc <sms_i2c_master_read+0x8c>)
10009460:	4e18      	ldr	r6, [pc, #96]	; (100094c4 <sms_i2c_master_read+0x84>)
10009462:	4d1b      	ldr	r5, [pc, #108]	; (100094d0 <sms_i2c_master_read+0x90>)
10009464:	e003      	b.n	1000946e <sms_i2c_master_read+0x2e>
10009466:	3c01      	subs	r4, #1
10009468:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000946a:	2c00      	cmp	r4, #0
1000946c:	d01f      	beq.n	100094ae <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000946e:	0031      	movs	r1, r6
10009470:	4818      	ldr	r0, [pc, #96]	; (100094d4 <sms_i2c_master_read+0x94>)
10009472:	47a8      	blx	r5
10009474:	2800      	cmp	r0, #0
10009476:	d1f6      	bne.n	10009466 <sms_i2c_master_read+0x26>
10009478:	4e14      	ldr	r6, [pc, #80]	; (100094cc <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000947a:	4d13      	ldr	r5, [pc, #76]	; (100094c8 <sms_i2c_master_read+0x88>)
1000947c:	4c16      	ldr	r4, [pc, #88]	; (100094d8 <sms_i2c_master_read+0x98>)
1000947e:	e003      	b.n	10009488 <sms_i2c_master_read+0x48>
10009480:	3e01      	subs	r6, #1
10009482:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009484:	2e00      	cmp	r6, #0
10009486:	d015      	beq.n	100094b4 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009488:	0029      	movs	r1, r5
1000948a:	4812      	ldr	r0, [pc, #72]	; (100094d4 <sms_i2c_master_read+0x94>)
1000948c:	47a0      	blx	r4
1000948e:	2800      	cmp	r0, #0
10009490:	d1f6      	bne.n	10009480 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009492:	2f00      	cmp	r7, #0
10009494:	d011      	beq.n	100094ba <sms_i2c_master_read+0x7a>
10009496:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009498:	490b      	ldr	r1, [pc, #44]	; (100094c8 <sms_i2c_master_read+0x88>)
1000949a:	684a      	ldr	r2, [r1, #4]
1000949c:	5cd2      	ldrb	r2, [r2, r3]
1000949e:	4640      	mov	r0, r8
100094a0:	54c2      	strb	r2, [r0, r3]
100094a2:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100094a4:	b2da      	uxtb	r2, r3
100094a6:	4297      	cmp	r7, r2
100094a8:	d8f7      	bhi.n	1000949a <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100094aa:	2000      	movs	r0, #0
100094ac:	e006      	b.n	100094bc <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100094ae:	2001      	movs	r0, #1
100094b0:	4240      	negs	r0, r0
100094b2:	e003      	b.n	100094bc <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100094b4:	2001      	movs	r0, #1
100094b6:	4240      	negs	r0, r0
100094b8:	e000      	b.n	100094bc <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100094ba:	2000      	movs	r0, #0
100094bc:	bc04      	pop	{r2}
100094be:	4690      	mov	r8, r2
100094c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100094c2:	46c0      	nop			; (mov r8, r8)
100094c4:	1001a2e0 	.word	0x1001a2e0
100094c8:	1001a2c4 	.word	0x1001a2c4
100094cc:	000003e9 	.word	0x000003e9
100094d0:	100083d9 	.word	0x100083d9
100094d4:	1001a2d0 	.word	0x1001a2d0
100094d8:	10008391 	.word	0x10008391

100094dc <sms_mpu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	mpu_device.interrupt.enabled = false;
}
/* MPU DRDY callback function */
void sms_mpu_interrupt_callback(void)
{
100094dc:	b510      	push	{r4, lr}
	if(mpu_device.interrupt.enabled) {
100094de:	2370      	movs	r3, #112	; 0x70
100094e0:	4a06      	ldr	r2, [pc, #24]	; (100094fc <sms_mpu_interrupt_callback+0x20>)
100094e2:	5cd3      	ldrb	r3, [r2, r3]
100094e4:	2b00      	cmp	r3, #0
100094e6:	d008      	beq.n	100094fa <sms_mpu_interrupt_callback+0x1e>
		mpu_device.interrupt.new_gyro = true;
100094e8:	2101      	movs	r1, #1
100094ea:	2371      	movs	r3, #113	; 0x71
100094ec:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
100094ee:	2300      	movs	r3, #0
100094f0:	2200      	movs	r2, #0
100094f2:	3101      	adds	r1, #1
100094f4:	201e      	movs	r0, #30
100094f6:	4c02      	ldr	r4, [pc, #8]	; (10009500 <sms_mpu_interrupt_callback+0x24>)
100094f8:	47a0      	blx	r4
	}
}
100094fa:	bd10      	pop	{r4, pc}
100094fc:	1001a0d0 	.word	0x1001a0d0
10009500:	1000e161 	.word	0x1000e161

10009504 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_mpu_configure_gpio(void)
{
10009504:	b510      	push	{r4, lr}
10009506:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10009508:	ac01      	add	r4, sp, #4
1000950a:	0020      	movs	r0, r4
1000950c:	4b0a      	ldr	r3, [pc, #40]	; (10009538 <sms_mpu_configure_gpio+0x34>)
1000950e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009510:	2300      	movs	r3, #0
10009512:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009514:	3302      	adds	r3, #2
10009516:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009518:	3b01      	subs	r3, #1
1000951a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000951c:	0021      	movs	r1, r4
1000951e:	201e      	movs	r0, #30
10009520:	4b06      	ldr	r3, [pc, #24]	; (1000953c <sms_mpu_configure_gpio+0x38>)
10009522:	4798      	blx	r3
10009524:	2800      	cmp	r0, #0
10009526:	d005      	beq.n	10009534 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009528:	4805      	ldr	r0, [pc, #20]	; (10009540 <sms_mpu_configure_gpio+0x3c>)
1000952a:	4b06      	ldr	r3, [pc, #24]	; (10009544 <sms_mpu_configure_gpio+0x40>)
1000952c:	4798      	blx	r3
1000952e:	4806      	ldr	r0, [pc, #24]	; (10009548 <sms_mpu_configure_gpio+0x44>)
10009530:	4b06      	ldr	r3, [pc, #24]	; (1000954c <sms_mpu_configure_gpio+0x48>)
10009532:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10009534:	b002      	add	sp, #8
10009536:	bd10      	pop	{r4, pc}
10009538:	1000b235 	.word	0x1000b235
1000953c:	1000b245 	.word	0x1000b245
10009540:	10017414 	.word	0x10017414
10009544:	100164cd 	.word	0x100164cd
10009548:	10017688 	.word	0x10017688
1000954c:	100163ad 	.word	0x100163ad

10009550 <sms_mpu_register_callbacks>:
/* Register MPU DRDY interrupt callback */
void sms_mpu_register_callbacks(void)
{
10009550:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10009552:	2202      	movs	r2, #2
10009554:	4902      	ldr	r1, [pc, #8]	; (10009560 <sms_mpu_register_callbacks+0x10>)
10009556:	201e      	movs	r0, #30
10009558:	4b02      	ldr	r3, [pc, #8]	; (10009564 <sms_mpu_register_callbacks+0x14>)
1000955a:	4798      	blx	r3
}
1000955c:	bd10      	pop	{r4, pc}
1000955e:	46c0      	nop			; (mov r8, r8)
10009560:	100094dd 	.word	0x100094dd
10009564:	1000b675 	.word	0x1000b675

10009568 <sms_mpu_enable_callback>:
{
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable MPU DRDY interrupt callback */
void sms_mpu_enable_callback(void)
{
10009568:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000956a:	201e      	movs	r0, #30
1000956c:	4b03      	ldr	r3, [pc, #12]	; (1000957c <sms_mpu_enable_callback+0x14>)
1000956e:	4798      	blx	r3
	mpu_device.interrupt.enabled = true;
10009570:	2101      	movs	r1, #1
10009572:	2370      	movs	r3, #112	; 0x70
10009574:	4a02      	ldr	r2, [pc, #8]	; (10009580 <sms_mpu_enable_callback+0x18>)
10009576:	54d1      	strb	r1, [r2, r3]
}
10009578:	bd10      	pop	{r4, pc}
1000957a:	46c0      	nop			; (mov r8, r8)
1000957c:	1000b745 	.word	0x1000b745
10009580:	1001a0d0 	.word	0x1001a0d0

10009584 <sms_mpu_disable_callback>:
/* Disable MPU DRDY interrupt callback */
void sms_mpu_disable_callback(void)
{
10009584:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009586:	201e      	movs	r0, #30
10009588:	4b03      	ldr	r3, [pc, #12]	; (10009598 <sms_mpu_disable_callback+0x14>)
1000958a:	4798      	blx	r3
	mpu_device.interrupt.enabled = false;
1000958c:	2100      	movs	r1, #0
1000958e:	2370      	movs	r3, #112	; 0x70
10009590:	4a02      	ldr	r2, [pc, #8]	; (1000959c <sms_mpu_disable_callback+0x18>)
10009592:	54d1      	strb	r1, [r2, r3]
}
10009594:	bd10      	pop	{r4, pc}
10009596:	46c0      	nop			; (mov r8, r8)
10009598:	1000b7a1 	.word	0x1000b7a1
1000959c:	1001a0d0 	.word	0x1001a0d0

100095a0 <sms_mpu_define_services>:
	}

}
/* BLE service definition */
void sms_mpu_define_services(void)
{
100095a0:	b510      	push	{r4, lr}
100095a2:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
100095a4:	466b      	mov	r3, sp
100095a6:	1dda      	adds	r2, r3, #7
100095a8:	2300      	movs	r3, #0
100095aa:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
100095ac:	4c09      	ldr	r4, [pc, #36]	; (100095d4 <sms_mpu_define_services+0x34>)
100095ae:	0021      	movs	r1, r4
100095b0:	2002      	movs	r0, #2
100095b2:	4b09      	ldr	r3, [pc, #36]	; (100095d8 <sms_mpu_define_services+0x38>)
100095b4:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
100095b6:	0020      	movs	r0, r4
100095b8:	4b08      	ldr	r3, [pc, #32]	; (100095dc <sms_mpu_define_services+0x3c>)
100095ba:	4798      	blx	r3
100095bc:	1e04      	subs	r4, r0, #0
100095be:	d006      	beq.n	100095ce <sms_mpu_define_services+0x2e>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
100095c0:	4807      	ldr	r0, [pc, #28]	; (100095e0 <sms_mpu_define_services+0x40>)
100095c2:	4b08      	ldr	r3, [pc, #32]	; (100095e4 <sms_mpu_define_services+0x44>)
100095c4:	4798      	blx	r3
100095c6:	0021      	movs	r1, r4
100095c8:	4807      	ldr	r0, [pc, #28]	; (100095e8 <sms_mpu_define_services+0x48>)
100095ca:	4b08      	ldr	r3, [pc, #32]	; (100095ec <sms_mpu_define_services+0x4c>)
100095cc:	4798      	blx	r3
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
	}
}
100095ce:	b002      	add	sp, #8
100095d0:	bd10      	pop	{r4, pc}
100095d2:	46c0      	nop			; (mov r8, r8)
100095d4:	1001a148 	.word	0x1001a148
100095d8:	10008e95 	.word	0x10008e95
100095dc:	10008e71 	.word	0x10008e71
100095e0:	10017414 	.word	0x10017414
100095e4:	100164cd 	.word	0x100164cd
100095e8:	100176c8 	.word	0x100176c8
100095ec:	100163ad 	.word	0x100163ad

100095f0 <read_accel_data>:
	MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
    return 0;
}
/* Read accel data */
void read_accel_data(int16_t *destination)
{
100095f0:	b530      	push	{r4, r5, lr}
100095f2:	b083      	sub	sp, #12
100095f4:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100095f6:	466b      	mov	r3, sp
100095f8:	2206      	movs	r2, #6
100095fa:	213b      	movs	r1, #59	; 0x3b
100095fc:	2069      	movs	r0, #105	; 0x69
100095fe:	4d0c      	ldr	r5, [pc, #48]	; (10009630 <read_accel_data+0x40>)
10009600:	47a8      	blx	r5
/* Read accel data */
void read_accel_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009602:	466b      	mov	r3, sp
10009604:	781b      	ldrb	r3, [r3, #0]
10009606:	021b      	lsls	r3, r3, #8
10009608:	466a      	mov	r2, sp
1000960a:	7852      	ldrb	r2, [r2, #1]
1000960c:	4313      	orrs	r3, r2
1000960e:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009610:	466b      	mov	r3, sp
10009612:	789b      	ldrb	r3, [r3, #2]
10009614:	021b      	lsls	r3, r3, #8
10009616:	466a      	mov	r2, sp
10009618:	78d2      	ldrb	r2, [r2, #3]
1000961a:	4313      	orrs	r3, r2
1000961c:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
1000961e:	466b      	mov	r3, sp
10009620:	791b      	ldrb	r3, [r3, #4]
10009622:	021b      	lsls	r3, r3, #8
10009624:	466a      	mov	r2, sp
10009626:	7952      	ldrb	r2, [r2, #5]
10009628:	4313      	orrs	r3, r2
1000962a:	80a3      	strh	r3, [r4, #4]
}
1000962c:	b003      	add	sp, #12
1000962e:	bd30      	pop	{r4, r5, pc}
10009630:	10009441 	.word	0x10009441

10009634 <read_gyro_data>:
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
10009634:	b530      	push	{r4, r5, lr}
10009636:	b083      	sub	sp, #12
10009638:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000963a:	466b      	mov	r3, sp
1000963c:	2206      	movs	r2, #6
1000963e:	2143      	movs	r1, #67	; 0x43
10009640:	2069      	movs	r0, #105	; 0x69
10009642:	4d0c      	ldr	r5, [pc, #48]	; (10009674 <read_gyro_data+0x40>)
10009644:	47a8      	blx	r5
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009646:	466b      	mov	r3, sp
10009648:	781b      	ldrb	r3, [r3, #0]
1000964a:	021b      	lsls	r3, r3, #8
1000964c:	466a      	mov	r2, sp
1000964e:	7852      	ldrb	r2, [r2, #1]
10009650:	4313      	orrs	r3, r2
10009652:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009654:	466b      	mov	r3, sp
10009656:	789b      	ldrb	r3, [r3, #2]
10009658:	021b      	lsls	r3, r3, #8
1000965a:	466a      	mov	r2, sp
1000965c:	78d2      	ldrb	r2, [r2, #3]
1000965e:	4313      	orrs	r3, r2
10009660:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
10009662:	466b      	mov	r3, sp
10009664:	791b      	ldrb	r3, [r3, #4]
10009666:	021b      	lsls	r3, r3, #8
10009668:	466a      	mov	r2, sp
1000966a:	7952      	ldrb	r2, [r2, #5]
1000966c:	4313      	orrs	r3, r2
1000966e:	80a3      	strh	r3, [r4, #4]
}
10009670:	b003      	add	sp, #12
10009672:	bd30      	pop	{r4, r5, pc}
10009674:	10009441 	.word	0x10009441

10009678 <get_Mres>:
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	switch(m_scale) {
10009678:	2800      	cmp	r0, #0
1000967a:	d002      	beq.n	10009682 <get_Mres+0xa>
1000967c:	2801      	cmp	r0, #1
1000967e:	d002      	beq.n	10009686 <get_Mres+0xe>
10009680:	e003      	b.n	1000968a <get_Mres+0x12>
		case MFS_14BITS:
		retVal = 10.0 * 4912.0 / 8190.0;
10009682:	4803      	ldr	r0, [pc, #12]	; (10009690 <get_Mres+0x18>)
10009684:	e002      	b.n	1000968c <get_Mres+0x14>
		break;
		
		case MFS_16BITS:
		retVal = 10.0 * 4912.0 / 32760.0;
10009686:	4803      	ldr	r0, [pc, #12]	; (10009694 <get_Mres+0x1c>)
		break;
10009688:	e000      	b.n	1000968c <get_Mres+0x14>


/* Utility functions */
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
1000968a:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
1000968c:	4770      	bx	lr
1000968e:	46c0      	nop			; (mov r8, r8)
10009690:	40bfebff 	.word	0x40bfebff
10009694:	3fbfebff 	.word	0x3fbfebff

10009698 <get_Gres>:
{
	float retVal = 0;
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	switch(g_scale) {
10009698:	2801      	cmp	r0, #1
1000969a:	d008      	beq.n	100096ae <get_Gres+0x16>
1000969c:	2800      	cmp	r0, #0
1000969e:	d004      	beq.n	100096aa <get_Gres+0x12>
100096a0:	2802      	cmp	r0, #2
100096a2:	d006      	beq.n	100096b2 <get_Gres+0x1a>
100096a4:	2803      	cmp	r0, #3
100096a6:	d006      	beq.n	100096b6 <get_Gres+0x1e>
100096a8:	e007      	b.n	100096ba <get_Gres+0x22>
		case GFS_250DPS:
		retVal = 250.0 / 32768.0;
100096aa:	4805      	ldr	r0, [pc, #20]	; (100096c0 <get_Gres+0x28>)
100096ac:	e006      	b.n	100096bc <get_Gres+0x24>
		break;
		
		case GFS_500DPS:
		retVal = 500.0 / 32768.0;
100096ae:	4805      	ldr	r0, [pc, #20]	; (100096c4 <get_Gres+0x2c>)
		break;
100096b0:	e004      	b.n	100096bc <get_Gres+0x24>
		
		case GFS_1000DPS:
		retVal = 1000.0 / 32768.0;
100096b2:	4805      	ldr	r0, [pc, #20]	; (100096c8 <get_Gres+0x30>)
		break;
100096b4:	e002      	b.n	100096bc <get_Gres+0x24>
		
		case GFS_2000DPS:
		retVal = 2000.0 / 32768.0;
100096b6:	4805      	ldr	r0, [pc, #20]	; (100096cc <get_Gres+0x34>)
		break;
100096b8:	e000      	b.n	100096bc <get_Gres+0x24>
	}
	return retVal;
}
float get_Gres(uint8_t g_scale)
{
	float retVal = 0;
100096ba:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
100096bc:	4770      	bx	lr
100096be:	46c0      	nop			; (mov r8, r8)
100096c0:	3bfa0000 	.word	0x3bfa0000
100096c4:	3c7a0000 	.word	0x3c7a0000
100096c8:	3cfa0000 	.word	0x3cfa0000
100096cc:	3d7a0000 	.word	0x3d7a0000

100096d0 <get_Ares>:
float get_Ares(uint8_t a_scale)
{
	float retVal;
	switch(a_scale) {
100096d0:	2801      	cmp	r0, #1
100096d2:	d009      	beq.n	100096e8 <get_Ares+0x18>
100096d4:	2800      	cmp	r0, #0
100096d6:	d004      	beq.n	100096e2 <get_Ares+0x12>
100096d8:	2802      	cmp	r0, #2
100096da:	d008      	beq.n	100096ee <get_Ares+0x1e>
100096dc:	2803      	cmp	r0, #3
100096de:	d009      	beq.n	100096f4 <get_Ares+0x24>
100096e0:	e00a      	b.n	100096f8 <get_Ares+0x28>
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
		retVal = 2.0/32768.0;
100096e2:	23e2      	movs	r3, #226	; 0xe2
100096e4:	059b      	lsls	r3, r3, #22
100096e6:	e007      	b.n	100096f8 <get_Ares+0x28>
		break;
		case AFS_4G:
		retVal = 4.0/32768.0;
100096e8:	23e4      	movs	r3, #228	; 0xe4
100096ea:	059b      	lsls	r3, r3, #22
		break;
100096ec:	e004      	b.n	100096f8 <get_Ares+0x28>
		case AFS_8G:
		retVal = 8.0/32768.0;
100096ee:	23e6      	movs	r3, #230	; 0xe6
100096f0:	059b      	lsls	r3, r3, #22
		break;
100096f2:	e001      	b.n	100096f8 <get_Ares+0x28>
		case AFS_16G:
		retVal = 16.0/32768.0;
100096f4:	23e8      	movs	r3, #232	; 0xe8
100096f6:	059b      	lsls	r3, r3, #22
		break;
	}
	return retVal;
}
100096f8:	1c18      	adds	r0, r3, #0
100096fa:	4770      	bx	lr

100096fc <writeByte>:


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
100096fc:	b510      	push	{r4, lr}
100096fe:	b082      	sub	sp, #8
10009700:	466b      	mov	r3, sp
10009702:	3307      	adds	r3, #7
10009704:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009706:	2201      	movs	r2, #1
10009708:	4c01      	ldr	r4, [pc, #4]	; (10009710 <writeByte+0x14>)
1000970a:	47a0      	blx	r4
}
1000970c:	b002      	add	sp, #8
1000970e:	bd10      	pop	{r4, pc}
10009710:	100093e5 	.word	0x100093e5

10009714 <sms_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_mpu_calibrate(float *dest1, float *dest2)
{
10009714:	b5f0      	push	{r4, r5, r6, r7, lr}
10009716:	465f      	mov	r7, fp
10009718:	4656      	mov	r6, sl
1000971a:	464d      	mov	r5, r9
1000971c:	4644      	mov	r4, r8
1000971e:	b4f0      	push	{r4, r5, r6, r7}
10009720:	b08f      	sub	sp, #60	; 0x3c
10009722:	9003      	str	r0, [sp, #12]
10009724:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009726:	2280      	movs	r2, #128	; 0x80
10009728:	216b      	movs	r1, #107	; 0x6b
1000972a:	2069      	movs	r0, #105	; 0x69
1000972c:	4ccd      	ldr	r4, [pc, #820]	; (10009a64 <sms_mpu_calibrate+0x350>)
1000972e:	47a0      	blx	r4
	delay_ms(100);
10009730:	2064      	movs	r0, #100	; 0x64
10009732:	4dcd      	ldr	r5, [pc, #820]	; (10009a68 <sms_mpu_calibrate+0x354>)
10009734:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009736:	2201      	movs	r2, #1
10009738:	216b      	movs	r1, #107	; 0x6b
1000973a:	2069      	movs	r0, #105	; 0x69
1000973c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
1000973e:	2200      	movs	r2, #0
10009740:	216c      	movs	r1, #108	; 0x6c
10009742:	2069      	movs	r0, #105	; 0x69
10009744:	47a0      	blx	r4
	delay_ms(200);
10009746:	20c8      	movs	r0, #200	; 0xc8
10009748:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
1000974a:	2200      	movs	r2, #0
1000974c:	2138      	movs	r1, #56	; 0x38
1000974e:	2069      	movs	r0, #105	; 0x69
10009750:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009752:	2200      	movs	r2, #0
10009754:	2123      	movs	r1, #35	; 0x23
10009756:	2069      	movs	r0, #105	; 0x69
10009758:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
1000975a:	2200      	movs	r2, #0
1000975c:	216b      	movs	r1, #107	; 0x6b
1000975e:	2069      	movs	r0, #105	; 0x69
10009760:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009762:	2200      	movs	r2, #0
10009764:	2124      	movs	r1, #36	; 0x24
10009766:	2069      	movs	r0, #105	; 0x69
10009768:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
1000976a:	2200      	movs	r2, #0
1000976c:	216a      	movs	r1, #106	; 0x6a
1000976e:	2069      	movs	r0, #105	; 0x69
10009770:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009772:	220c      	movs	r2, #12
10009774:	216a      	movs	r1, #106	; 0x6a
10009776:	2069      	movs	r0, #105	; 0x69
10009778:	47a0      	blx	r4
	delay_ms(15);
1000977a:	200f      	movs	r0, #15
1000977c:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
1000977e:	2201      	movs	r2, #1
10009780:	211a      	movs	r1, #26
10009782:	2069      	movs	r0, #105	; 0x69
10009784:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009786:	2200      	movs	r2, #0
10009788:	2119      	movs	r1, #25
1000978a:	2069      	movs	r0, #105	; 0x69
1000978c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
1000978e:	2200      	movs	r2, #0
10009790:	211b      	movs	r1, #27
10009792:	2069      	movs	r0, #105	; 0x69
10009794:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009796:	2200      	movs	r2, #0
10009798:	211c      	movs	r1, #28
1000979a:	2069      	movs	r0, #105	; 0x69
1000979c:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
1000979e:	2240      	movs	r2, #64	; 0x40
100097a0:	216a      	movs	r1, #106	; 0x6a
100097a2:	2069      	movs	r0, #105	; 0x69
100097a4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
100097a6:	2278      	movs	r2, #120	; 0x78
100097a8:	2123      	movs	r1, #35	; 0x23
100097aa:	2069      	movs	r0, #105	; 0x69
100097ac:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
100097ae:	2028      	movs	r0, #40	; 0x28
100097b0:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
100097b2:	2200      	movs	r2, #0
100097b4:	2123      	movs	r1, #35	; 0x23
100097b6:	2069      	movs	r0, #105	; 0x69
100097b8:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100097ba:	ac0b      	add	r4, sp, #44	; 0x2c
100097bc:	0023      	movs	r3, r4
100097be:	2202      	movs	r2, #2
100097c0:	2172      	movs	r1, #114	; 0x72
100097c2:	2069      	movs	r0, #105	; 0x69
100097c4:	4da9      	ldr	r5, [pc, #676]	; (10009a6c <sms_mpu_calibrate+0x358>)
100097c6:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
100097c8:	7820      	ldrb	r0, [r4, #0]
100097ca:	0200      	lsls	r0, r0, #8
100097cc:	7863      	ldrb	r3, [r4, #1]
100097ce:	4318      	orrs	r0, r3
100097d0:	210c      	movs	r1, #12
100097d2:	4ba7      	ldr	r3, [pc, #668]	; (10009a70 <sms_mpu_calibrate+0x35c>)
100097d4:	4798      	blx	r3
100097d6:	b283      	uxth	r3, r0
100097d8:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
100097da:	2b00      	cmp	r3, #0
100097dc:	d042      	beq.n	10009864 <sms_mpu_calibrate+0x150>
100097de:	2300      	movs	r3, #0
100097e0:	4698      	mov	r8, r3
100097e2:	2700      	movs	r7, #0
100097e4:	469b      	mov	fp, r3
100097e6:	469a      	mov	sl, r3
100097e8:	4699      	mov	r9, r3
100097ea:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100097ec:	ac0b      	add	r4, sp, #44	; 0x2c
100097ee:	9301      	str	r3, [sp, #4]
100097f0:	0023      	movs	r3, r4
100097f2:	220c      	movs	r2, #12
100097f4:	2174      	movs	r1, #116	; 0x74
100097f6:	2069      	movs	r0, #105	; 0x69
100097f8:	4e9c      	ldr	r6, [pc, #624]	; (10009a6c <sms_mpu_calibrate+0x358>)
100097fa:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
100097fc:	7823      	ldrb	r3, [r4, #0]
100097fe:	021b      	lsls	r3, r3, #8
10009800:	7862      	ldrb	r2, [r4, #1]
10009802:	4313      	orrs	r3, r2
10009804:	b21b      	sxth	r3, r3
10009806:	9a01      	ldr	r2, [sp, #4]
10009808:	4694      	mov	ip, r2
1000980a:	449c      	add	ip, r3
1000980c:	4663      	mov	r3, ip
1000980e:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009810:	78a3      	ldrb	r3, [r4, #2]
10009812:	021b      	lsls	r3, r3, #8
10009814:	78e2      	ldrb	r2, [r4, #3]
10009816:	4313      	orrs	r3, r2
10009818:	b21b      	sxth	r3, r3
1000981a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
1000981c:	7923      	ldrb	r3, [r4, #4]
1000981e:	021b      	lsls	r3, r3, #8
10009820:	7962      	ldrb	r2, [r4, #5]
10009822:	4313      	orrs	r3, r2
10009824:	b21b      	sxth	r3, r3
10009826:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009828:	79a3      	ldrb	r3, [r4, #6]
1000982a:	021b      	lsls	r3, r3, #8
1000982c:	79e2      	ldrb	r2, [r4, #7]
1000982e:	4313      	orrs	r3, r2
10009830:	b21b      	sxth	r3, r3
10009832:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009834:	7a23      	ldrb	r3, [r4, #8]
10009836:	021b      	lsls	r3, r3, #8
10009838:	7a62      	ldrb	r2, [r4, #9]
1000983a:	4313      	orrs	r3, r2
1000983c:	b21b      	sxth	r3, r3
1000983e:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009840:	7aa3      	ldrb	r3, [r4, #10]
10009842:	021b      	lsls	r3, r3, #8
10009844:	7ae2      	ldrb	r2, [r4, #11]
10009846:	4313      	orrs	r3, r2
10009848:	b21b      	sxth	r3, r3
1000984a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
1000984c:	3501      	adds	r5, #1
1000984e:	b2ad      	uxth	r5, r5
10009850:	9b02      	ldr	r3, [sp, #8]
10009852:	42ab      	cmp	r3, r5
10009854:	d1cc      	bne.n	100097f0 <sms_mpu_calibrate+0xdc>
10009856:	4653      	mov	r3, sl
10009858:	46ba      	mov	sl, r7
1000985a:	465a      	mov	r2, fp
1000985c:	46e3      	mov	fp, ip
1000985e:	0016      	movs	r6, r2
10009860:	001f      	movs	r7, r3
10009862:	e006      	b.n	10009872 <sms_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009864:	2300      	movs	r3, #0
10009866:	4698      	mov	r8, r3
10009868:	2700      	movs	r7, #0
1000986a:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
1000986c:	469b      	mov	fp, r3
1000986e:	469a      	mov	sl, r3
10009870:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009872:	4c80      	ldr	r4, [pc, #512]	; (10009a74 <sms_mpu_calibrate+0x360>)
10009874:	9902      	ldr	r1, [sp, #8]
10009876:	4658      	mov	r0, fp
10009878:	47a0      	blx	r4
1000987a:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
1000987c:	9b02      	ldr	r3, [sp, #8]
1000987e:	469b      	mov	fp, r3
10009880:	0019      	movs	r1, r3
10009882:	4650      	mov	r0, sl
10009884:	47a0      	blx	r4
10009886:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009888:	4659      	mov	r1, fp
1000988a:	4648      	mov	r0, r9
1000988c:	47a0      	blx	r4
1000988e:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009890:	4659      	mov	r1, fp
10009892:	4640      	mov	r0, r8
10009894:	47a0      	blx	r4
10009896:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009898:	4659      	mov	r1, fp
1000989a:	0038      	movs	r0, r7
1000989c:	47a0      	blx	r4
1000989e:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
100098a0:	4659      	mov	r1, fp
100098a2:	0030      	movs	r0, r6
100098a4:	47a0      	blx	r4
100098a6:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
100098a8:	464b      	mov	r3, r9
100098aa:	2b00      	cmp	r3, #0
100098ac:	dd03      	ble.n	100098b6 <sms_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
100098ae:	4b72      	ldr	r3, [pc, #456]	; (10009a78 <sms_mpu_calibrate+0x364>)
100098b0:	469c      	mov	ip, r3
100098b2:	44e1      	add	r9, ip
100098b4:	e003      	b.n	100098be <sms_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
100098b6:	2380      	movs	r3, #128	; 0x80
100098b8:	01db      	lsls	r3, r3, #7
100098ba:	469c      	mov	ip, r3
100098bc:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
100098be:	9b01      	ldr	r3, [sp, #4]
100098c0:	4259      	negs	r1, r3
100098c2:	17ca      	asrs	r2, r1, #31
100098c4:	2303      	movs	r3, #3
100098c6:	401a      	ands	r2, r3
100098c8:	1852      	adds	r2, r2, r1
100098ca:	1091      	asrs	r1, r2, #2
100098cc:	1292      	asrs	r2, r2, #10
100098ce:	b2d2      	uxtb	r2, r2
100098d0:	ac0b      	add	r4, sp, #44	; 0x2c
100098d2:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
100098d4:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
100098d6:	9902      	ldr	r1, [sp, #8]
100098d8:	4248      	negs	r0, r1
100098da:	17c1      	asrs	r1, r0, #31
100098dc:	4019      	ands	r1, r3
100098de:	1809      	adds	r1, r1, r0
100098e0:	1088      	asrs	r0, r1, #2
100098e2:	1289      	asrs	r1, r1, #10
100098e4:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100098e6:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100098e8:	9e04      	ldr	r6, [sp, #16]
100098ea:	4271      	negs	r1, r6
100098ec:	17c8      	asrs	r0, r1, #31
100098ee:	4003      	ands	r3, r0
100098f0:	185b      	adds	r3, r3, r1
100098f2:	1099      	asrs	r1, r3, #2
100098f4:	129b      	asrs	r3, r3, #10
100098f6:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100098f8:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100098fa:	2113      	movs	r1, #19
100098fc:	2069      	movs	r0, #105	; 0x69
100098fe:	4e59      	ldr	r6, [pc, #356]	; (10009a64 <sms_mpu_calibrate+0x350>)
10009900:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009902:	7862      	ldrb	r2, [r4, #1]
10009904:	2114      	movs	r1, #20
10009906:	2069      	movs	r0, #105	; 0x69
10009908:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
1000990a:	78a2      	ldrb	r2, [r4, #2]
1000990c:	2115      	movs	r1, #21
1000990e:	2069      	movs	r0, #105	; 0x69
10009910:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009912:	78e2      	ldrb	r2, [r4, #3]
10009914:	2116      	movs	r1, #22
10009916:	2069      	movs	r0, #105	; 0x69
10009918:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
1000991a:	7922      	ldrb	r2, [r4, #4]
1000991c:	2117      	movs	r1, #23
1000991e:	2069      	movs	r0, #105	; 0x69
10009920:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009922:	7962      	ldrb	r2, [r4, #5]
10009924:	2118      	movs	r1, #24
10009926:	2069      	movs	r0, #105	; 0x69
10009928:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
1000992a:	4f54      	ldr	r7, [pc, #336]	; (10009a7c <sms_mpu_calibrate+0x368>)
1000992c:	9801      	ldr	r0, [sp, #4]
1000992e:	47b8      	blx	r7
10009930:	4e53      	ldr	r6, [pc, #332]	; (10009a80 <sms_mpu_calibrate+0x36c>)
10009932:	4954      	ldr	r1, [pc, #336]	; (10009a84 <sms_mpu_calibrate+0x370>)
10009934:	47b0      	blx	r6
10009936:	9b03      	ldr	r3, [sp, #12]
10009938:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
1000993a:	9802      	ldr	r0, [sp, #8]
1000993c:	47b8      	blx	r7
1000993e:	4951      	ldr	r1, [pc, #324]	; (10009a84 <sms_mpu_calibrate+0x370>)
10009940:	47b0      	blx	r6
10009942:	9b03      	ldr	r3, [sp, #12]
10009944:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009946:	9804      	ldr	r0, [sp, #16]
10009948:	47b8      	blx	r7
1000994a:	494e      	ldr	r1, [pc, #312]	; (10009a84 <sms_mpu_calibrate+0x370>)
1000994c:	47b0      	blx	r6
1000994e:	9b03      	ldr	r3, [sp, #12]
10009950:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009952:	0023      	movs	r3, r4
10009954:	2202      	movs	r2, #2
10009956:	2177      	movs	r1, #119	; 0x77
10009958:	2069      	movs	r0, #105	; 0x69
1000995a:	4e44      	ldr	r6, [pc, #272]	; (10009a6c <sms_mpu_calibrate+0x358>)
1000995c:	46b0      	mov	r8, r6
1000995e:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009960:	7827      	ldrb	r7, [r4, #0]
10009962:	023f      	lsls	r7, r7, #8
10009964:	7863      	ldrb	r3, [r4, #1]
10009966:	431f      	orrs	r7, r3
10009968:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000996a:	0023      	movs	r3, r4
1000996c:	2202      	movs	r2, #2
1000996e:	217a      	movs	r1, #122	; 0x7a
10009970:	2069      	movs	r0, #105	; 0x69
10009972:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009974:	7826      	ldrb	r6, [r4, #0]
10009976:	0236      	lsls	r6, r6, #8
10009978:	7863      	ldrb	r3, [r4, #1]
1000997a:	431e      	orrs	r6, r3
1000997c:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000997e:	0023      	movs	r3, r4
10009980:	2202      	movs	r2, #2
10009982:	217d      	movs	r1, #125	; 0x7d
10009984:	2069      	movs	r0, #105	; 0x69
10009986:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009988:	7823      	ldrb	r3, [r4, #0]
1000998a:	021b      	lsls	r3, r3, #8
1000998c:	7861      	ldrb	r1, [r4, #1]
1000998e:	4319      	orrs	r1, r3
10009990:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009992:	ab07      	add	r3, sp, #28
10009994:	2200      	movs	r2, #0
10009996:	701a      	strb	r2, [r3, #0]
10009998:	705a      	strb	r2, [r3, #1]
1000999a:	709a      	strb	r2, [r3, #2]
1000999c:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
1000999e:	2401      	movs	r4, #1
100099a0:	009a      	lsls	r2, r3, #2
100099a2:	a808      	add	r0, sp, #32
100099a4:	5812      	ldr	r2, [r2, r0]
100099a6:	4222      	tst	r2, r4
100099a8:	d001      	beq.n	100099ae <sms_mpu_calibrate+0x29a>
100099aa:	aa07      	add	r2, sp, #28
100099ac:	549c      	strb	r4, [r3, r2]
100099ae:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
100099b0:	2b03      	cmp	r3, #3
100099b2:	d1f5      	bne.n	100099a0 <sms_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
100099b4:	17ea      	asrs	r2, r5, #31
100099b6:	3304      	adds	r3, #4
100099b8:	401a      	ands	r2, r3
100099ba:	1952      	adds	r2, r2, r5
100099bc:	10d2      	asrs	r2, r2, #3
100099be:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
100099c0:	4652      	mov	r2, sl
100099c2:	17d0      	asrs	r0, r2, #31
100099c4:	4018      	ands	r0, r3
100099c6:	4450      	add	r0, sl
100099c8:	10c0      	asrs	r0, r0, #3
100099ca:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
100099cc:	464a      	mov	r2, r9
100099ce:	17d2      	asrs	r2, r2, #31
100099d0:	4013      	ands	r3, r2
100099d2:	444b      	add	r3, r9
100099d4:	10da      	asrs	r2, r3, #3
100099d6:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
100099d8:	123a      	asrs	r2, r7, #8
100099da:	b2d2      	uxtb	r2, r2
100099dc:	ac0b      	add	r4, sp, #44	; 0x2c
100099de:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099e0:	a907      	add	r1, sp, #28
100099e2:	7808      	ldrb	r0, [r1, #0]
100099e4:	4307      	orrs	r7, r0
100099e6:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100099e8:	1230      	asrs	r0, r6, #8
100099ea:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099ec:	7848      	ldrb	r0, [r1, #1]
100099ee:	4306      	orrs	r6, r0
100099f0:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
100099f2:	1218      	asrs	r0, r3, #8
100099f4:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099f6:	7889      	ldrb	r1, [r1, #2]
100099f8:	430b      	orrs	r3, r1
100099fa:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
100099fc:	2177      	movs	r1, #119	; 0x77
100099fe:	2069      	movs	r0, #105	; 0x69
10009a00:	4e18      	ldr	r6, [pc, #96]	; (10009a64 <sms_mpu_calibrate+0x350>)
10009a02:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009a04:	7862      	ldrb	r2, [r4, #1]
10009a06:	2178      	movs	r1, #120	; 0x78
10009a08:	2069      	movs	r0, #105	; 0x69
10009a0a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009a0c:	78a2      	ldrb	r2, [r4, #2]
10009a0e:	217a      	movs	r1, #122	; 0x7a
10009a10:	2069      	movs	r0, #105	; 0x69
10009a12:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009a14:	78e2      	ldrb	r2, [r4, #3]
10009a16:	217b      	movs	r1, #123	; 0x7b
10009a18:	2069      	movs	r0, #105	; 0x69
10009a1a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009a1c:	7922      	ldrb	r2, [r4, #4]
10009a1e:	217d      	movs	r1, #125	; 0x7d
10009a20:	2069      	movs	r0, #105	; 0x69
10009a22:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009a24:	7962      	ldrb	r2, [r4, #5]
10009a26:	217e      	movs	r1, #126	; 0x7e
10009a28:	2069      	movs	r0, #105	; 0x69
10009a2a:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009a2c:	4e13      	ldr	r6, [pc, #76]	; (10009a7c <sms_mpu_calibrate+0x368>)
10009a2e:	0028      	movs	r0, r5
10009a30:	47b0      	blx	r6
10009a32:	4c15      	ldr	r4, [pc, #84]	; (10009a88 <sms_mpu_calibrate+0x374>)
10009a34:	21e2      	movs	r1, #226	; 0xe2
10009a36:	0589      	lsls	r1, r1, #22
10009a38:	47a0      	blx	r4
10009a3a:	9d05      	ldr	r5, [sp, #20]
10009a3c:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009a3e:	4650      	mov	r0, sl
10009a40:	47b0      	blx	r6
10009a42:	21e2      	movs	r1, #226	; 0xe2
10009a44:	0589      	lsls	r1, r1, #22
10009a46:	47a0      	blx	r4
10009a48:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009a4a:	4648      	mov	r0, r9
10009a4c:	47b0      	blx	r6
10009a4e:	21e2      	movs	r1, #226	; 0xe2
10009a50:	0589      	lsls	r1, r1, #22
10009a52:	47a0      	blx	r4
10009a54:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009a56:	b00f      	add	sp, #60	; 0x3c
10009a58:	bc3c      	pop	{r2, r3, r4, r5}
10009a5a:	4690      	mov	r8, r2
10009a5c:	4699      	mov	r9, r3
10009a5e:	46a2      	mov	sl, r4
10009a60:	46ab      	mov	fp, r5
10009a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a64:	100096fd 	.word	0x100096fd
10009a68:	1000aba1 	.word	0x1000aba1
10009a6c:	10009441 	.word	0x10009441
10009a70:	1001321d 	.word	0x1001321d
10009a74:	10013331 	.word	0x10013331
10009a78:	ffffc000 	.word	0xffffc000
10009a7c:	100142e5 	.word	0x100142e5
10009a80:	100139a9 	.word	0x100139a9
10009a84:	43030000 	.word	0x43030000
10009a88:	10013d3d 	.word	0x10013d3d

10009a8c <sms_mpu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_mpu_comp_initialize(float *destination)
{
10009a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a8e:	465f      	mov	r7, fp
10009a90:	4656      	mov	r6, sl
10009a92:	464d      	mov	r5, r9
10009a94:	4644      	mov	r4, r8
10009a96:	b4f0      	push	{r4, r5, r6, r7}
10009a98:	b083      	sub	sp, #12
10009a9a:	4680      	mov	r8, r0
	mpu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009a9c:	4c36      	ldr	r4, [pc, #216]	; (10009b78 <sms_mpu_comp_initialize+0xec>)
10009a9e:	2301      	movs	r3, #1
10009aa0:	70a3      	strb	r3, [r4, #2]
	mpu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009aa2:	3301      	adds	r3, #1
10009aa4:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	mpu_device.config.mag_bias[0] = 470.0;
10009aa6:	4b35      	ldr	r3, [pc, #212]	; (10009b7c <sms_mpu_comp_initialize+0xf0>)
10009aa8:	6363      	str	r3, [r4, #52]	; 0x34
	mpu_device.config.mag_bias[1] = 120.0;
10009aaa:	4b35      	ldr	r3, [pc, #212]	; (10009b80 <sms_mpu_comp_initialize+0xf4>)
10009aac:	63a3      	str	r3, [r4, #56]	; 0x38
	mpu_device.config.mag_bias[2] = 125.0;
10009aae:	4b35      	ldr	r3, [pc, #212]	; (10009b84 <sms_mpu_comp_initialize+0xf8>)
10009ab0:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009ab2:	2200      	movs	r2, #0
10009ab4:	210a      	movs	r1, #10
10009ab6:	200c      	movs	r0, #12
10009ab8:	4e33      	ldr	r6, [pc, #204]	; (10009b88 <sms_mpu_comp_initialize+0xfc>)
10009aba:	47b0      	blx	r6
	delay_ms(10);
10009abc:	200a      	movs	r0, #10
10009abe:	4b33      	ldr	r3, [pc, #204]	; (10009b8c <sms_mpu_comp_initialize+0x100>)
10009ac0:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009ac2:	220f      	movs	r2, #15
10009ac4:	210a      	movs	r1, #10
10009ac6:	200c      	movs	r0, #12
10009ac8:	47b0      	blx	r6
	delay_ms(10);
10009aca:	200a      	movs	r0, #10
10009acc:	4b2f      	ldr	r3, [pc, #188]	; (10009b8c <sms_mpu_comp_initialize+0x100>)
10009ace:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009ad0:	af01      	add	r7, sp, #4
10009ad2:	003b      	movs	r3, r7
10009ad4:	2203      	movs	r2, #3
10009ad6:	2110      	movs	r1, #16
10009ad8:	200c      	movs	r0, #12
10009ada:	4d2d      	ldr	r5, [pc, #180]	; (10009b90 <sms_mpu_comp_initialize+0x104>)
10009adc:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009ade:	7838      	ldrb	r0, [r7, #0]
10009ae0:	3880      	subs	r0, #128	; 0x80
10009ae2:	4b2c      	ldr	r3, [pc, #176]	; (10009b94 <sms_mpu_comp_initialize+0x108>)
10009ae4:	469b      	mov	fp, r3
10009ae6:	4798      	blx	r3
10009ae8:	4b2b      	ldr	r3, [pc, #172]	; (10009b98 <sms_mpu_comp_initialize+0x10c>)
10009aea:	469a      	mov	sl, r3
10009aec:	4798      	blx	r3
10009aee:	2200      	movs	r2, #0
10009af0:	4b2a      	ldr	r3, [pc, #168]	; (10009b9c <sms_mpu_comp_initialize+0x110>)
10009af2:	4d2b      	ldr	r5, [pc, #172]	; (10009ba0 <sms_mpu_comp_initialize+0x114>)
10009af4:	47a8      	blx	r5
10009af6:	2200      	movs	r2, #0
10009af8:	4b2a      	ldr	r3, [pc, #168]	; (10009ba4 <sms_mpu_comp_initialize+0x118>)
10009afa:	4d2b      	ldr	r5, [pc, #172]	; (10009ba8 <sms_mpu_comp_initialize+0x11c>)
10009afc:	47a8      	blx	r5
10009afe:	4b2b      	ldr	r3, [pc, #172]	; (10009bac <sms_mpu_comp_initialize+0x120>)
10009b00:	4699      	mov	r9, r3
10009b02:	4798      	blx	r3
10009b04:	4643      	mov	r3, r8
10009b06:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009b08:	7878      	ldrb	r0, [r7, #1]
10009b0a:	3880      	subs	r0, #128	; 0x80
10009b0c:	47d8      	blx	fp
10009b0e:	47d0      	blx	sl
10009b10:	2200      	movs	r2, #0
10009b12:	4b22      	ldr	r3, [pc, #136]	; (10009b9c <sms_mpu_comp_initialize+0x110>)
10009b14:	4d22      	ldr	r5, [pc, #136]	; (10009ba0 <sms_mpu_comp_initialize+0x114>)
10009b16:	47a8      	blx	r5
10009b18:	2200      	movs	r2, #0
10009b1a:	4b22      	ldr	r3, [pc, #136]	; (10009ba4 <sms_mpu_comp_initialize+0x118>)
10009b1c:	4d22      	ldr	r5, [pc, #136]	; (10009ba8 <sms_mpu_comp_initialize+0x11c>)
10009b1e:	47a8      	blx	r5
10009b20:	47c8      	blx	r9
10009b22:	4643      	mov	r3, r8
10009b24:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009b26:	78b8      	ldrb	r0, [r7, #2]
10009b28:	3880      	subs	r0, #128	; 0x80
10009b2a:	47d8      	blx	fp
10009b2c:	47d0      	blx	sl
10009b2e:	2200      	movs	r2, #0
10009b30:	4b1a      	ldr	r3, [pc, #104]	; (10009b9c <sms_mpu_comp_initialize+0x110>)
10009b32:	4d1b      	ldr	r5, [pc, #108]	; (10009ba0 <sms_mpu_comp_initialize+0x114>)
10009b34:	47a8      	blx	r5
10009b36:	2200      	movs	r2, #0
10009b38:	4b1a      	ldr	r3, [pc, #104]	; (10009ba4 <sms_mpu_comp_initialize+0x118>)
10009b3a:	4d1b      	ldr	r5, [pc, #108]	; (10009ba8 <sms_mpu_comp_initialize+0x11c>)
10009b3c:	47a8      	blx	r5
10009b3e:	47c8      	blx	r9
10009b40:	4643      	mov	r3, r8
10009b42:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009b44:	2200      	movs	r2, #0
10009b46:	210a      	movs	r1, #10
10009b48:	200c      	movs	r0, #12
10009b4a:	47b0      	blx	r6
	delay_ms(10);
10009b4c:	200a      	movs	r0, #10
10009b4e:	4b0f      	ldr	r3, [pc, #60]	; (10009b8c <sms_mpu_comp_initialize+0x100>)
10009b50:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu_device.config.m_scale << 4 | mpu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009b52:	78a2      	ldrb	r2, [r4, #2]
10009b54:	0112      	lsls	r2, r2, #4
10009b56:	78e3      	ldrb	r3, [r4, #3]
10009b58:	431a      	orrs	r2, r3
10009b5a:	b2d2      	uxtb	r2, r2
10009b5c:	210a      	movs	r1, #10
10009b5e:	200c      	movs	r0, #12
10009b60:	47b0      	blx	r6
	delay_ms(10);
10009b62:	200a      	movs	r0, #10
10009b64:	4b09      	ldr	r3, [pc, #36]	; (10009b8c <sms_mpu_comp_initialize+0x100>)
10009b66:	4798      	blx	r3
}
10009b68:	b003      	add	sp, #12
10009b6a:	bc3c      	pop	{r2, r3, r4, r5}
10009b6c:	4690      	mov	r8, r2
10009b6e:	4699      	mov	r9, r3
10009b70:	46a2      	mov	sl, r4
10009b72:	46ab      	mov	fp, r5
10009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b76:	46c0      	nop			; (mov r8, r8)
10009b78:	1001a0d0 	.word	0x1001a0d0
10009b7c:	43eb0000 	.word	0x43eb0000
10009b80:	42f00000 	.word	0x42f00000
10009b84:	42fa0000 	.word	0x42fa0000
10009b88:	100096fd 	.word	0x100096fd
10009b8c:	1000aba1 	.word	0x1000aba1
10009b90:	10009441 	.word	0x10009441
10009b94:	100142e5 	.word	0x100142e5
10009b98:	10015fcd 	.word	0x10015fcd
10009b9c:	3f700000 	.word	0x3f700000
10009ba0:	10015291 	.word	0x10015291
10009ba4:	3ff00000 	.word	0x3ff00000
10009ba8:	100143f1 	.word	0x100143f1
10009bac:	10016075 	.word	0x10016075

10009bb0 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009bb0:	b530      	push	{r4, r5, lr}
10009bb2:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009bb4:	ac01      	add	r4, sp, #4
10009bb6:	0023      	movs	r3, r4
10009bb8:	2201      	movs	r2, #1
10009bba:	4d02      	ldr	r5, [pc, #8]	; (10009bc4 <readByte+0x14>)
10009bbc:	47a8      	blx	r5
	return data[0];
10009bbe:	7820      	ldrb	r0, [r4, #0]
}
10009bc0:	b003      	add	sp, #12
10009bc2:	bd30      	pop	{r4, r5, pc}
10009bc4:	10009441 	.word	0x10009441

10009bc8 <sms_mpu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_mpu_comp_check(void)
{
10009bc8:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009bca:	2100      	movs	r1, #0
10009bcc:	200c      	movs	r0, #12
10009bce:	4b03      	ldr	r3, [pc, #12]	; (10009bdc <sms_mpu_comp_check+0x14>)
10009bd0:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009bd2:	3848      	subs	r0, #72	; 0x48
10009bd4:	1e43      	subs	r3, r0, #1
10009bd6:	4198      	sbcs	r0, r3
10009bd8:	4240      	negs	r0, r0
}
10009bda:	bd10      	pop	{r4, pc}
10009bdc:	10009bb1 	.word	0x10009bb1

10009be0 <sms_mpu_initialize>:
}

/* Initialization functions... */
/* MPU */
void sms_mpu_initialize(void)
{
10009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//q[2] = 0.0;
	//q[3] = 0.0;
	//eInt[0] = 0.0;
	//eInt[1] = 0.0;
	//eInt[2] = 0.0;
	mpu_device.config.a_scale = AFS_2G;
10009be2:	4f24      	ldr	r7, [pc, #144]	; (10009c74 <sms_mpu_initialize+0x94>)
10009be4:	2300      	movs	r3, #0
10009be6:	703b      	strb	r3, [r7, #0]
	mpu_device.config.g_scale = GFS_250DPS;
10009be8:	707b      	strb	r3, [r7, #1]

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009bea:	2200      	movs	r2, #0
10009bec:	216b      	movs	r1, #107	; 0x6b
10009bee:	2069      	movs	r0, #105	; 0x69
10009bf0:	4c21      	ldr	r4, [pc, #132]	; (10009c78 <sms_mpu_initialize+0x98>)
10009bf2:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
10009bf4:	2064      	movs	r0, #100	; 0x64
10009bf6:	4d21      	ldr	r5, [pc, #132]	; (10009c7c <sms_mpu_initialize+0x9c>)
10009bf8:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009bfa:	2201      	movs	r2, #1
10009bfc:	216b      	movs	r1, #107	; 0x6b
10009bfe:	2069      	movs	r0, #105	; 0x69
10009c00:	47a0      	blx	r4
	delay_ms(200);
10009c02:	20c8      	movs	r0, #200	; 0xc8
10009c04:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x04);		// gyro bandwidth = 10 Hz
10009c06:	2204      	movs	r2, #4
10009c08:	211a      	movs	r1, #26
10009c0a:	2069      	movs	r0, #105	; 0x69
10009c0c:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x08);  	// Use a 111 Hz rate; a rate consistent with the filter update rate
10009c0e:	2208      	movs	r2, #8
10009c10:	2119      	movs	r1, #25
10009c12:	2069      	movs	r0, #105	; 0x69
10009c14:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
10009c16:	211b      	movs	r1, #27
10009c18:	2069      	movs	r0, #105	; 0x69
10009c1a:	4e19      	ldr	r6, [pc, #100]	; (10009c80 <sms_mpu_initialize+0xa0>)
10009c1c:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (mpu_device.config.g_scale << 3); // Set full scale range for the gyro
10009c1e:	787a      	ldrb	r2, [r7, #1]
10009c20:	00d2      	lsls	r2, r2, #3
10009c22:	231a      	movs	r3, #26
10009c24:	4398      	bics	r0, r3
10009c26:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009c28:	b2d2      	uxtb	r2, r2
10009c2a:	211b      	movs	r1, #27
10009c2c:	2069      	movs	r0, #105	; 0x69
10009c2e:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009c30:	211c      	movs	r1, #28
10009c32:	2069      	movs	r0, #105	; 0x69
10009c34:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (mpu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009c36:	783a      	ldrb	r2, [r7, #0]
10009c38:	00d2      	lsls	r2, r2, #3
10009c3a:	2318      	movs	r3, #24
10009c3c:	4398      	bics	r0, r3
10009c3e:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009c40:	b2d2      	uxtb	r2, r2
10009c42:	211c      	movs	r1, #28
10009c44:	2069      	movs	r0, #105	; 0x69
10009c46:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009c48:	211d      	movs	r1, #29
10009c4a:	2069      	movs	r0, #105	; 0x69
10009c4c:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009c4e:	23f0      	movs	r3, #240	; 0xf0
10009c50:	0002      	movs	r2, r0
10009c52:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x04;  // Set accelerometer rate to 1 kHz and bandwidth to 10 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009c54:	3bec      	subs	r3, #236	; 0xec
10009c56:	431a      	orrs	r2, r3
10009c58:	211d      	movs	r1, #29
10009c5a:	2069      	movs	r0, #105	; 0x69
10009c5c:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009c5e:	2212      	movs	r2, #18
10009c60:	2137      	movs	r1, #55	; 0x37
10009c62:	2069      	movs	r0, #105	; 0x69
10009c64:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009c66:	2201      	movs	r2, #1
10009c68:	2138      	movs	r1, #56	; 0x38
10009c6a:	2069      	movs	r0, #105	; 0x69
10009c6c:	47a0      	blx	r4
	delay_ms(100);
10009c6e:	2064      	movs	r0, #100	; 0x64
10009c70:	47a8      	blx	r5
}
10009c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c74:	1001a0d0 	.word	0x1001a0d0
10009c78:	100096fd 	.word	0x100096fd
10009c7c:	1000aba1 	.word	0x1000aba1
10009c80:	10009bb1 	.word	0x10009bb1

10009c84 <sms_mpu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_mpu_selftest(float *destination)
{
10009c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c86:	465f      	mov	r7, fp
10009c88:	4656      	mov	r6, sl
10009c8a:	464d      	mov	r5, r9
10009c8c:	4644      	mov	r4, r8
10009c8e:	b4f0      	push	{r4, r5, r6, r7}
10009c90:	b09d      	sub	sp, #116	; 0x74
10009c92:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009c94:	2206      	movs	r2, #6
10009c96:	2100      	movs	r1, #0
10009c98:	a81a      	add	r0, sp, #104	; 0x68
10009c9a:	4ce0      	ldr	r4, [pc, #896]	; (1000a01c <sms_mpu_selftest+0x398>)
10009c9c:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
10009c9e:	220c      	movs	r2, #12
10009ca0:	2100      	movs	r1, #0
10009ca2:	a817      	add	r0, sp, #92	; 0x5c
10009ca4:	47a0      	blx	r4
10009ca6:	220c      	movs	r2, #12
10009ca8:	2100      	movs	r1, #0
10009caa:	a814      	add	r0, sp, #80	; 0x50
10009cac:	47a0      	blx	r4
10009cae:	220c      	movs	r2, #12
10009cb0:	2100      	movs	r1, #0
10009cb2:	a811      	add	r0, sp, #68	; 0x44
10009cb4:	47a0      	blx	r4
10009cb6:	220c      	movs	r2, #12
10009cb8:	2100      	movs	r1, #0
10009cba:	a80e      	add	r0, sp, #56	; 0x38
10009cbc:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
10009cbe:	2200      	movs	r2, #0
10009cc0:	2119      	movs	r1, #25
10009cc2:	2069      	movs	r0, #105	; 0x69
10009cc4:	4cd6      	ldr	r4, [pc, #856]	; (1000a020 <sms_mpu_selftest+0x39c>)
10009cc6:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009cc8:	2202      	movs	r2, #2
10009cca:	211a      	movs	r1, #26
10009ccc:	2069      	movs	r0, #105	; 0x69
10009cce:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009cd0:	2200      	movs	r2, #0
10009cd2:	211b      	movs	r1, #27
10009cd4:	2069      	movs	r0, #105	; 0x69
10009cd6:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009cd8:	2202      	movs	r2, #2
10009cda:	211d      	movs	r1, #29
10009cdc:	2069      	movs	r0, #105	; 0x69
10009cde:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009ce0:	2200      	movs	r2, #0
10009ce2:	211c      	movs	r1, #28
10009ce4:	2069      	movs	r0, #105	; 0x69
10009ce6:	47a0      	blx	r4
10009ce8:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cea:	ac1a      	add	r4, sp, #104	; 0x68
10009cec:	4ecd      	ldr	r6, [pc, #820]	; (1000a024 <sms_mpu_selftest+0x3a0>)
10009cee:	0023      	movs	r3, r4
10009cf0:	2206      	movs	r2, #6
10009cf2:	213b      	movs	r1, #59	; 0x3b
10009cf4:	2069      	movs	r0, #105	; 0x69
10009cf6:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009cf8:	7823      	ldrb	r3, [r4, #0]
10009cfa:	021b      	lsls	r3, r3, #8
10009cfc:	7862      	ldrb	r2, [r4, #1]
10009cfe:	4313      	orrs	r3, r2
10009d00:	b21b      	sxth	r3, r3
10009d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009d04:	4694      	mov	ip, r2
10009d06:	4463      	add	r3, ip
10009d08:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009d0a:	78a3      	ldrb	r3, [r4, #2]
10009d0c:	021b      	lsls	r3, r3, #8
10009d0e:	78e2      	ldrb	r2, [r4, #3]
10009d10:	4313      	orrs	r3, r2
10009d12:	b21b      	sxth	r3, r3
10009d14:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009d16:	9200      	str	r2, [sp, #0]
10009d18:	4694      	mov	ip, r2
10009d1a:	4463      	add	r3, ip
10009d1c:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009d1e:	7923      	ldrb	r3, [r4, #4]
10009d20:	021b      	lsls	r3, r3, #8
10009d22:	7962      	ldrb	r2, [r4, #5]
10009d24:	4313      	orrs	r3, r2
10009d26:	b21b      	sxth	r3, r3
10009d28:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009d2a:	9200      	str	r2, [sp, #0]
10009d2c:	4694      	mov	ip, r2
10009d2e:	4463      	add	r3, ip
10009d30:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009d32:	0023      	movs	r3, r4
10009d34:	2206      	movs	r2, #6
10009d36:	2143      	movs	r1, #67	; 0x43
10009d38:	2069      	movs	r0, #105	; 0x69
10009d3a:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009d3c:	7823      	ldrb	r3, [r4, #0]
10009d3e:	021b      	lsls	r3, r3, #8
10009d40:	7862      	ldrb	r2, [r4, #1]
10009d42:	4313      	orrs	r3, r2
10009d44:	b21b      	sxth	r3, r3
10009d46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009d48:	4694      	mov	ip, r2
10009d4a:	4463      	add	r3, ip
10009d4c:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009d4e:	78a3      	ldrb	r3, [r4, #2]
10009d50:	021b      	lsls	r3, r3, #8
10009d52:	78e2      	ldrb	r2, [r4, #3]
10009d54:	4313      	orrs	r3, r2
10009d56:	b21b      	sxth	r3, r3
10009d58:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009d5a:	9200      	str	r2, [sp, #0]
10009d5c:	4694      	mov	ip, r2
10009d5e:	4463      	add	r3, ip
10009d60:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009d62:	7923      	ldrb	r3, [r4, #4]
10009d64:	021b      	lsls	r3, r3, #8
10009d66:	7962      	ldrb	r2, [r4, #5]
10009d68:	4313      	orrs	r3, r2
10009d6a:	b21b      	sxth	r3, r3
10009d6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009d6e:	9200      	str	r2, [sp, #0]
10009d70:	4694      	mov	ip, r2
10009d72:	4463      	add	r3, ip
10009d74:	9319      	str	r3, [sp, #100]	; 0x64
10009d76:	3d01      	subs	r5, #1
10009d78:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
10009d7a:	2d00      	cmp	r5, #0
10009d7c:	d1b7      	bne.n	10009cee <sms_mpu_selftest+0x6a>
10009d7e:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009d80:	4ea9      	ldr	r6, [pc, #676]	; (1000a028 <sms_mpu_selftest+0x3a4>)
10009d82:	ad14      	add	r5, sp, #80	; 0x50
10009d84:	21c8      	movs	r1, #200	; 0xc8
10009d86:	5960      	ldr	r0, [r4, r5]
10009d88:	47b0      	blx	r6
10009d8a:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
10009d8c:	ad17      	add	r5, sp, #92	; 0x5c
10009d8e:	21c8      	movs	r1, #200	; 0xc8
10009d90:	5960      	ldr	r0, [r4, r5]
10009d92:	47b0      	blx	r6
10009d94:	5160      	str	r0, [r4, r5]
10009d96:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009d98:	2c0c      	cmp	r4, #12
10009d9a:	d1f2      	bne.n	10009d82 <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
10009d9c:	22e0      	movs	r2, #224	; 0xe0
10009d9e:	211c      	movs	r1, #28
10009da0:	2069      	movs	r0, #105	; 0x69
10009da2:	4c9f      	ldr	r4, [pc, #636]	; (1000a020 <sms_mpu_selftest+0x39c>)
10009da4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009da6:	22e0      	movs	r2, #224	; 0xe0
10009da8:	211c      	movs	r1, #28
10009daa:	2069      	movs	r0, #105	; 0x69
10009dac:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009dae:	2019      	movs	r0, #25
10009db0:	4b9e      	ldr	r3, [pc, #632]	; (1000a02c <sms_mpu_selftest+0x3a8>)
10009db2:	4798      	blx	r3
10009db4:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009db6:	ac1a      	add	r4, sp, #104	; 0x68
10009db8:	4e9a      	ldr	r6, [pc, #616]	; (1000a024 <sms_mpu_selftest+0x3a0>)
10009dba:	0023      	movs	r3, r4
10009dbc:	2206      	movs	r2, #6
10009dbe:	213b      	movs	r1, #59	; 0x3b
10009dc0:	2069      	movs	r0, #105	; 0x69
10009dc2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009dc4:	7823      	ldrb	r3, [r4, #0]
10009dc6:	021b      	lsls	r3, r3, #8
10009dc8:	7862      	ldrb	r2, [r4, #1]
10009dca:	4313      	orrs	r3, r2
10009dcc:	b21b      	sxth	r3, r3
10009dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009dd0:	4694      	mov	ip, r2
10009dd2:	4463      	add	r3, ip
10009dd4:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009dd6:	78a3      	ldrb	r3, [r4, #2]
10009dd8:	021b      	lsls	r3, r3, #8
10009dda:	78e2      	ldrb	r2, [r4, #3]
10009ddc:	4313      	orrs	r3, r2
10009dde:	b21b      	sxth	r3, r3
10009de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009de2:	9200      	str	r2, [sp, #0]
10009de4:	4694      	mov	ip, r2
10009de6:	4463      	add	r3, ip
10009de8:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009dea:	7923      	ldrb	r3, [r4, #4]
10009dec:	021b      	lsls	r3, r3, #8
10009dee:	7962      	ldrb	r2, [r4, #5]
10009df0:	4313      	orrs	r3, r2
10009df2:	b21b      	sxth	r3, r3
10009df4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009df6:	9200      	str	r2, [sp, #0]
10009df8:	4694      	mov	ip, r2
10009dfa:	4463      	add	r3, ip
10009dfc:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009dfe:	0023      	movs	r3, r4
10009e00:	2206      	movs	r2, #6
10009e02:	2143      	movs	r1, #67	; 0x43
10009e04:	2069      	movs	r0, #105	; 0x69
10009e06:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009e08:	7823      	ldrb	r3, [r4, #0]
10009e0a:	021b      	lsls	r3, r3, #8
10009e0c:	7862      	ldrb	r2, [r4, #1]
10009e0e:	4313      	orrs	r3, r2
10009e10:	b21b      	sxth	r3, r3
10009e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009e14:	4694      	mov	ip, r2
10009e16:	4463      	add	r3, ip
10009e18:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009e1a:	78a3      	ldrb	r3, [r4, #2]
10009e1c:	021b      	lsls	r3, r3, #8
10009e1e:	78e2      	ldrb	r2, [r4, #3]
10009e20:	4313      	orrs	r3, r2
10009e22:	b21b      	sxth	r3, r3
10009e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009e26:	9200      	str	r2, [sp, #0]
10009e28:	4694      	mov	ip, r2
10009e2a:	4463      	add	r3, ip
10009e2c:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009e2e:	7923      	ldrb	r3, [r4, #4]
10009e30:	021b      	lsls	r3, r3, #8
10009e32:	7962      	ldrb	r2, [r4, #5]
10009e34:	4313      	orrs	r3, r2
10009e36:	b21b      	sxth	r3, r3
10009e38:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009e3a:	9200      	str	r2, [sp, #0]
10009e3c:	4694      	mov	ip, r2
10009e3e:	4463      	add	r3, ip
10009e40:	9310      	str	r3, [sp, #64]	; 0x40
10009e42:	3d01      	subs	r5, #1
10009e44:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009e46:	2d00      	cmp	r5, #0
10009e48:	d1b7      	bne.n	10009dba <sms_mpu_selftest+0x136>
10009e4a:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009e4c:	4e76      	ldr	r6, [pc, #472]	; (1000a028 <sms_mpu_selftest+0x3a4>)
10009e4e:	ad11      	add	r5, sp, #68	; 0x44
10009e50:	21c8      	movs	r1, #200	; 0xc8
10009e52:	5960      	ldr	r0, [r4, r5]
10009e54:	47b0      	blx	r6
10009e56:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009e58:	ad0e      	add	r5, sp, #56	; 0x38
10009e5a:	21c8      	movs	r1, #200	; 0xc8
10009e5c:	5960      	ldr	r0, [r4, r5]
10009e5e:	47b0      	blx	r6
10009e60:	5160      	str	r0, [r4, r5]
10009e62:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009e64:	2c0c      	cmp	r4, #12
10009e66:	d1f2      	bne.n	10009e4e <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009e68:	2200      	movs	r2, #0
10009e6a:	211c      	movs	r1, #28
10009e6c:	2069      	movs	r0, #105	; 0x69
10009e6e:	4c6c      	ldr	r4, [pc, #432]	; (1000a020 <sms_mpu_selftest+0x39c>)
10009e70:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009e72:	2200      	movs	r2, #0
10009e74:	211b      	movs	r1, #27
10009e76:	2069      	movs	r0, #105	; 0x69
10009e78:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009e7a:	2019      	movs	r0, #25
10009e7c:	4b6b      	ldr	r3, [pc, #428]	; (1000a02c <sms_mpu_selftest+0x3a8>)
10009e7e:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009e80:	210d      	movs	r1, #13
10009e82:	2069      	movs	r0, #105	; 0x69
10009e84:	4d6a      	ldr	r5, [pc, #424]	; (1000a030 <sms_mpu_selftest+0x3ac>)
10009e86:	47a8      	blx	r5
10009e88:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
10009e8a:	210e      	movs	r1, #14
10009e8c:	2069      	movs	r0, #105	; 0x69
10009e8e:	47a8      	blx	r5
10009e90:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009e92:	210f      	movs	r1, #15
10009e94:	2069      	movs	r0, #105	; 0x69
10009e96:	47a8      	blx	r5
10009e98:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
10009e9a:	2100      	movs	r1, #0
10009e9c:	2069      	movs	r0, #105	; 0x69
10009e9e:	47a8      	blx	r5
10009ea0:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009ea2:	2101      	movs	r1, #1
10009ea4:	2069      	movs	r0, #105	; 0x69
10009ea6:	47a8      	blx	r5
10009ea8:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
10009eaa:	2102      	movs	r1, #2
10009eac:	2069      	movs	r0, #105	; 0x69
10009eae:	47a8      	blx	r5
10009eb0:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009eb2:	4b60      	ldr	r3, [pc, #384]	; (1000a034 <sms_mpu_selftest+0x3b0>)
10009eb4:	469a      	mov	sl, r3
10009eb6:	0020      	movs	r0, r4
10009eb8:	4798      	blx	r3
10009eba:	4b5f      	ldr	r3, [pc, #380]	; (1000a038 <sms_mpu_selftest+0x3b4>)
10009ebc:	4699      	mov	r9, r3
10009ebe:	4798      	blx	r3
10009ec0:	4e5e      	ldr	r6, [pc, #376]	; (1000a03c <sms_mpu_selftest+0x3b8>)
10009ec2:	2200      	movs	r2, #0
10009ec4:	4b5e      	ldr	r3, [pc, #376]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009ec6:	47b0      	blx	r6
10009ec8:	0002      	movs	r2, r0
10009eca:	000b      	movs	r3, r1
10009ecc:	485d      	ldr	r0, [pc, #372]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009ece:	495e      	ldr	r1, [pc, #376]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009ed0:	4f5e      	ldr	r7, [pc, #376]	; (1000a04c <sms_mpu_selftest+0x3c8>)
10009ed2:	47b8      	blx	r7
10009ed4:	4d5e      	ldr	r5, [pc, #376]	; (1000a050 <sms_mpu_selftest+0x3cc>)
10009ed6:	2200      	movs	r2, #0
10009ed8:	4b5e      	ldr	r3, [pc, #376]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009eda:	47a8      	blx	r5
10009edc:	4c5e      	ldr	r4, [pc, #376]	; (1000a058 <sms_mpu_selftest+0x3d4>)
10009ede:	47a0      	blx	r4
10009ee0:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009ee2:	9800      	ldr	r0, [sp, #0]
10009ee4:	47d0      	blx	sl
10009ee6:	47c8      	blx	r9
10009ee8:	2200      	movs	r2, #0
10009eea:	4b55      	ldr	r3, [pc, #340]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009eec:	47b0      	blx	r6
10009eee:	0002      	movs	r2, r0
10009ef0:	000b      	movs	r3, r1
10009ef2:	4854      	ldr	r0, [pc, #336]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009ef4:	4954      	ldr	r1, [pc, #336]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009ef6:	47b8      	blx	r7
10009ef8:	2200      	movs	r2, #0
10009efa:	4b56      	ldr	r3, [pc, #344]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009efc:	47a8      	blx	r5
10009efe:	47a0      	blx	r4
10009f00:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009f02:	9804      	ldr	r0, [sp, #16]
10009f04:	47d0      	blx	sl
10009f06:	47c8      	blx	r9
10009f08:	2200      	movs	r2, #0
10009f0a:	4b4d      	ldr	r3, [pc, #308]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009f0c:	47b0      	blx	r6
10009f0e:	0002      	movs	r2, r0
10009f10:	000b      	movs	r3, r1
10009f12:	484c      	ldr	r0, [pc, #304]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009f14:	494c      	ldr	r1, [pc, #304]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009f16:	47b8      	blx	r7
10009f18:	2200      	movs	r2, #0
10009f1a:	4b4e      	ldr	r3, [pc, #312]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009f1c:	47a8      	blx	r5
10009f1e:	47a0      	blx	r4
10009f20:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009f22:	9805      	ldr	r0, [sp, #20]
10009f24:	47d0      	blx	sl
10009f26:	47c8      	blx	r9
10009f28:	2200      	movs	r2, #0
10009f2a:	4b45      	ldr	r3, [pc, #276]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009f2c:	47b0      	blx	r6
10009f2e:	0002      	movs	r2, r0
10009f30:	000b      	movs	r3, r1
10009f32:	4844      	ldr	r0, [pc, #272]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009f34:	4944      	ldr	r1, [pc, #272]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009f36:	47b8      	blx	r7
10009f38:	2200      	movs	r2, #0
10009f3a:	4b46      	ldr	r3, [pc, #280]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009f3c:	47a8      	blx	r5
10009f3e:	47a0      	blx	r4
10009f40:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009f42:	9806      	ldr	r0, [sp, #24]
10009f44:	47d0      	blx	sl
10009f46:	47c8      	blx	r9
10009f48:	2200      	movs	r2, #0
10009f4a:	4b3d      	ldr	r3, [pc, #244]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009f4c:	47b0      	blx	r6
10009f4e:	0002      	movs	r2, r0
10009f50:	000b      	movs	r3, r1
10009f52:	483c      	ldr	r0, [pc, #240]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009f54:	493c      	ldr	r1, [pc, #240]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009f56:	47b8      	blx	r7
10009f58:	2200      	movs	r2, #0
10009f5a:	4b3e      	ldr	r3, [pc, #248]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009f5c:	47a8      	blx	r5
10009f5e:	47a0      	blx	r4
10009f60:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009f62:	9807      	ldr	r0, [sp, #28]
10009f64:	47d0      	blx	sl
10009f66:	47c8      	blx	r9
10009f68:	2200      	movs	r2, #0
10009f6a:	4b35      	ldr	r3, [pc, #212]	; (1000a040 <sms_mpu_selftest+0x3bc>)
10009f6c:	47b0      	blx	r6
10009f6e:	0002      	movs	r2, r0
10009f70:	000b      	movs	r3, r1
10009f72:	4834      	ldr	r0, [pc, #208]	; (1000a044 <sms_mpu_selftest+0x3c0>)
10009f74:	4934      	ldr	r1, [pc, #208]	; (1000a048 <sms_mpu_selftest+0x3c4>)
10009f76:	47b8      	blx	r7
10009f78:	2200      	movs	r2, #0
10009f7a:	4b36      	ldr	r3, [pc, #216]	; (1000a054 <sms_mpu_selftest+0x3d0>)
10009f7c:	47a8      	blx	r5
10009f7e:	47a0      	blx	r4
10009f80:	900d      	str	r0, [sp, #52]	; 0x34
10009f82:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009f84:	4b35      	ldr	r3, [pc, #212]	; (1000a05c <sms_mpu_selftest+0x3d8>)
10009f86:	4699      	mov	r9, r3
10009f88:	4d2b      	ldr	r5, [pc, #172]	; (1000a038 <sms_mpu_selftest+0x3b4>)
10009f8a:	4b31      	ldr	r3, [pc, #196]	; (1000a050 <sms_mpu_selftest+0x3cc>)
10009f8c:	4698      	mov	r8, r3
10009f8e:	4b34      	ldr	r3, [pc, #208]	; (1000a060 <sms_mpu_selftest+0x3dc>)
10009f90:	469a      	mov	sl, r3
10009f92:	4f2a      	ldr	r7, [pc, #168]	; (1000a03c <sms_mpu_selftest+0x3b8>)
10009f94:	4e30      	ldr	r6, [pc, #192]	; (1000a058 <sms_mpu_selftest+0x3d4>)
10009f96:	ab11      	add	r3, sp, #68	; 0x44
10009f98:	58e3      	ldr	r3, [r4, r3]
10009f9a:	aa14      	add	r2, sp, #80	; 0x50
10009f9c:	58a0      	ldr	r0, [r4, r2]
10009f9e:	1a18      	subs	r0, r3, r0
10009fa0:	47c8      	blx	r9
10009fa2:	47a8      	blx	r5
10009fa4:	2200      	movs	r2, #0
10009fa6:	4b2f      	ldr	r3, [pc, #188]	; (1000a064 <sms_mpu_selftest+0x3e0>)
10009fa8:	47c0      	blx	r8
10009faa:	9000      	str	r0, [sp, #0]
10009fac:	9101      	str	r1, [sp, #4]
10009fae:	ab08      	add	r3, sp, #32
10009fb0:	58e0      	ldr	r0, [r4, r3]
10009fb2:	47a8      	blx	r5
10009fb4:	0002      	movs	r2, r0
10009fb6:	000b      	movs	r3, r1
10009fb8:	9800      	ldr	r0, [sp, #0]
10009fba:	9901      	ldr	r1, [sp, #4]
10009fbc:	47d0      	blx	sl
10009fbe:	2200      	movs	r2, #0
10009fc0:	4b28      	ldr	r3, [pc, #160]	; (1000a064 <sms_mpu_selftest+0x3e0>)
10009fc2:	47b8      	blx	r7
10009fc4:	47b0      	blx	r6
10009fc6:	9b03      	ldr	r3, [sp, #12]
10009fc8:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009fca:	469b      	mov	fp, r3
10009fcc:	44a3      	add	fp, r4
10009fce:	ab0e      	add	r3, sp, #56	; 0x38
10009fd0:	58e3      	ldr	r3, [r4, r3]
10009fd2:	aa17      	add	r2, sp, #92	; 0x5c
10009fd4:	58a0      	ldr	r0, [r4, r2]
10009fd6:	1a18      	subs	r0, r3, r0
10009fd8:	47c8      	blx	r9
10009fda:	47a8      	blx	r5
10009fdc:	2200      	movs	r2, #0
10009fde:	4b21      	ldr	r3, [pc, #132]	; (1000a064 <sms_mpu_selftest+0x3e0>)
10009fe0:	47c0      	blx	r8
10009fe2:	9000      	str	r0, [sp, #0]
10009fe4:	9101      	str	r1, [sp, #4]
10009fe6:	0023      	movs	r3, r4
10009fe8:	aa08      	add	r2, sp, #32
10009fea:	4694      	mov	ip, r2
10009fec:	4463      	add	r3, ip
10009fee:	68d8      	ldr	r0, [r3, #12]
10009ff0:	47a8      	blx	r5
10009ff2:	0002      	movs	r2, r0
10009ff4:	000b      	movs	r3, r1
10009ff6:	9800      	ldr	r0, [sp, #0]
10009ff8:	9901      	ldr	r1, [sp, #4]
10009ffa:	47d0      	blx	sl
10009ffc:	2200      	movs	r2, #0
10009ffe:	4b19      	ldr	r3, [pc, #100]	; (1000a064 <sms_mpu_selftest+0x3e0>)
1000a000:	47b8      	blx	r7
1000a002:	47b0      	blx	r6
1000a004:	465b      	mov	r3, fp
1000a006:	60d8      	str	r0, [r3, #12]
1000a008:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000a00a:	2c0c      	cmp	r4, #12
1000a00c:	d1c3      	bne.n	10009f96 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000a00e:	b01d      	add	sp, #116	; 0x74
1000a010:	bc3c      	pop	{r2, r3, r4, r5}
1000a012:	4690      	mov	r8, r2
1000a014:	4699      	mov	r9, r3
1000a016:	46a2      	mov	sl, r4
1000a018:	46ab      	mov	fp, r5
1000a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a01c:	10016265 	.word	0x10016265
1000a020:	100096fd 	.word	0x100096fd
1000a024:	10009441 	.word	0x10009441
1000a028:	10013331 	.word	0x10013331
1000a02c:	1000aba1 	.word	0x1000aba1
1000a030:	10009bb1 	.word	0x10009bb1
1000a034:	10014375 	.word	0x10014375
1000a038:	10015fcd 	.word	0x10015fcd
1000a03c:	10015785 	.word	0x10015785
1000a040:	3ff00000 	.word	0x3ff00000
1000a044:	c28f5c29 	.word	0xc28f5c29
1000a048:	3ff028f5 	.word	0x3ff028f5
1000a04c:	10011e79 	.word	0x10011e79
1000a050:	10015291 	.word	0x10015291
1000a054:	40a47800 	.word	0x40a47800
1000a058:	10016075 	.word	0x10016075
1000a05c:	100142e5 	.word	0x100142e5
1000a060:	10014a49 	.word	0x10014a49
1000a064:	40590000 	.word	0x40590000

1000a068 <sms_mpu_check>:
}


/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_mpu_check(void) {
1000a068:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000a06a:	2175      	movs	r1, #117	; 0x75
1000a06c:	2069      	movs	r0, #105	; 0x69
1000a06e:	4b06      	ldr	r3, [pc, #24]	; (1000a088 <sms_mpu_check+0x20>)
1000a070:	4798      	blx	r3
	if(c == 0x71) {
1000a072:	2871      	cmp	r0, #113	; 0x71
1000a074:	d104      	bne.n	1000a080 <sms_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_mpu_selftest(mpu_device.config.self_test);
1000a076:	4805      	ldr	r0, [pc, #20]	; (1000a08c <sms_mpu_check+0x24>)
1000a078:	4b05      	ldr	r3, [pc, #20]	; (1000a090 <sms_mpu_check+0x28>)
1000a07a:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000a07c:	2000      	movs	r0, #0
1000a07e:	e001      	b.n	1000a084 <sms_mpu_check+0x1c>


/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_mpu_check(void) {
	int retVal = -1;
1000a080:	2001      	movs	r0, #1
1000a082:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000a084:	bd10      	pop	{r4, pc}
1000a086:	46c0      	nop			; (mov r8, r8)
1000a088:	10009bb1 	.word	0x10009bb1
1000a08c:	1001a0d4 	.word	0x1001a0d4
1000a090:	10009c85 	.word	0x10009c85

1000a094 <read_comp_data>:
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}
/* Read compass data */
void read_comp_data(int16_t *destination)
{
1000a094:	b530      	push	{r4, r5, lr}
1000a096:	b083      	sub	sp, #12
1000a098:	0004      	movs	r4, r0
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
1000a09a:	2102      	movs	r1, #2
1000a09c:	200c      	movs	r0, #12
1000a09e:	4b12      	ldr	r3, [pc, #72]	; (1000a0e8 <read_comp_data+0x54>)
1000a0a0:	4798      	blx	r3
1000a0a2:	07c3      	lsls	r3, r0, #31
1000a0a4:	d51e      	bpl.n	1000a0e4 <read_comp_data+0x50>
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a0a6:	466b      	mov	r3, sp
1000a0a8:	2207      	movs	r2, #7
1000a0aa:	2103      	movs	r1, #3
1000a0ac:	200c      	movs	r0, #12
1000a0ae:	4d0f      	ldr	r5, [pc, #60]	; (1000a0ec <read_comp_data+0x58>)
1000a0b0:	47a8      	blx	r5
{
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
		readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawData[6]; // End data read by reading ST2 register
		if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
1000a0b2:	466b      	mov	r3, sp
1000a0b4:	799b      	ldrb	r3, [r3, #6]
1000a0b6:	071b      	lsls	r3, r3, #28
1000a0b8:	d414      	bmi.n	1000a0e4 <read_comp_data+0x50>
			destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
1000a0ba:	466b      	mov	r3, sp
1000a0bc:	785b      	ldrb	r3, [r3, #1]
1000a0be:	021b      	lsls	r3, r3, #8
1000a0c0:	466a      	mov	r2, sp
1000a0c2:	7812      	ldrb	r2, [r2, #0]
1000a0c4:	4313      	orrs	r3, r2
1000a0c6:	8023      	strh	r3, [r4, #0]
			destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
1000a0c8:	466b      	mov	r3, sp
1000a0ca:	78db      	ldrb	r3, [r3, #3]
1000a0cc:	021b      	lsls	r3, r3, #8
1000a0ce:	466a      	mov	r2, sp
1000a0d0:	7892      	ldrb	r2, [r2, #2]
1000a0d2:	4313      	orrs	r3, r2
1000a0d4:	8063      	strh	r3, [r4, #2]
			destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
1000a0d6:	466b      	mov	r3, sp
1000a0d8:	795b      	ldrb	r3, [r3, #5]
1000a0da:	021b      	lsls	r3, r3, #8
1000a0dc:	466a      	mov	r2, sp
1000a0de:	7912      	ldrb	r2, [r2, #4]
1000a0e0:	4313      	orrs	r3, r2
1000a0e2:	80a3      	strh	r3, [r4, #4]
		}
	}
}
1000a0e4:	b003      	add	sp, #12
1000a0e6:	bd30      	pop	{r4, r5, pc}
1000a0e8:	10009bb1 	.word	0x10009bb1
1000a0ec:	10009441 	.word	0x10009441

1000a0f0 <sms_mpu_poll_data>:


/* Data reading functions... */
/* Poll */
int sms_mpu_poll_data(void)
{
1000a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0f2:	465f      	mov	r7, fp
1000a0f4:	4656      	mov	r6, sl
1000a0f6:	464d      	mov	r5, r9
1000a0f8:	4644      	mov	r4, r8
1000a0fa:	b4f0      	push	{r4, r5, r6, r7}
1000a0fc:	b08f      	sub	sp, #60	; 0x3c
	read_accel_data(mpu_device.output.raw_accel);
1000a0fe:	4c4a      	ldr	r4, [pc, #296]	; (1000a228 <sms_mpu_poll_data+0x138>)
1000a100:	0020      	movs	r0, r4
1000a102:	4b4a      	ldr	r3, [pc, #296]	; (1000a22c <sms_mpu_poll_data+0x13c>)
1000a104:	4798      	blx	r3
	float a_res = get_Ares(mpu_device.config.a_scale);
1000a106:	3c52      	subs	r4, #82	; 0x52
1000a108:	7820      	ldrb	r0, [r4, #0]
1000a10a:	4b49      	ldr	r3, [pc, #292]	; (1000a230 <sms_mpu_poll_data+0x140>)
1000a10c:	4798      	blx	r3
1000a10e:	1c06      	adds	r6, r0, #0
	float ax = ((float)mpu_device.output.raw_accel[0]) * a_res;
1000a110:	2352      	movs	r3, #82	; 0x52
1000a112:	5ee0      	ldrsh	r0, [r4, r3]
1000a114:	4f47      	ldr	r7, [pc, #284]	; (1000a234 <sms_mpu_poll_data+0x144>)
1000a116:	47b8      	blx	r7
1000a118:	4d47      	ldr	r5, [pc, #284]	; (1000a238 <sms_mpu_poll_data+0x148>)
1000a11a:	1c31      	adds	r1, r6, #0
1000a11c:	47a8      	blx	r5
1000a11e:	9008      	str	r0, [sp, #32]
	float ay = ((float)mpu_device.output.raw_accel[1]) * a_res;
1000a120:	2354      	movs	r3, #84	; 0x54
1000a122:	5ee0      	ldrsh	r0, [r4, r3]
1000a124:	47b8      	blx	r7
1000a126:	1c31      	adds	r1, r6, #0
1000a128:	47a8      	blx	r5
1000a12a:	9009      	str	r0, [sp, #36]	; 0x24
	float az = ((float)mpu_device.output.raw_accel[2]) * a_res;
1000a12c:	2356      	movs	r3, #86	; 0x56
1000a12e:	5ee0      	ldrsh	r0, [r4, r3]
1000a130:	47b8      	blx	r7
1000a132:	1c31      	adds	r1, r6, #0
1000a134:	47a8      	blx	r5
1000a136:	900a      	str	r0, [sp, #40]	; 0x28
	
	read_gyro_data(mpu_device.output.raw_gyro);
1000a138:	0023      	movs	r3, r4
1000a13a:	334c      	adds	r3, #76	; 0x4c
1000a13c:	0018      	movs	r0, r3
1000a13e:	4b3f      	ldr	r3, [pc, #252]	; (1000a23c <sms_mpu_poll_data+0x14c>)
1000a140:	4798      	blx	r3
	float g_res = get_Gres(mpu_device.config.g_scale);
1000a142:	7860      	ldrb	r0, [r4, #1]
1000a144:	4b3e      	ldr	r3, [pc, #248]	; (1000a240 <sms_mpu_poll_data+0x150>)
1000a146:	4798      	blx	r3
1000a148:	1c06      	adds	r6, r0, #0
	float gx = ((float)mpu_device.output.raw_gyro[0]) * g_res;
1000a14a:	234c      	movs	r3, #76	; 0x4c
1000a14c:	5ee0      	ldrsh	r0, [r4, r3]
1000a14e:	47b8      	blx	r7
1000a150:	1c31      	adds	r1, r6, #0
1000a152:	47a8      	blx	r5
1000a154:	900b      	str	r0, [sp, #44]	; 0x2c
	float gy = ((float)mpu_device.output.raw_gyro[1]) * g_res;
1000a156:	234e      	movs	r3, #78	; 0x4e
1000a158:	5ee0      	ldrsh	r0, [r4, r3]
1000a15a:	47b8      	blx	r7
1000a15c:	1c31      	adds	r1, r6, #0
1000a15e:	47a8      	blx	r5
1000a160:	900c      	str	r0, [sp, #48]	; 0x30
	float gz = ((float)mpu_device.output.raw_gyro[2]) * g_res;
1000a162:	2350      	movs	r3, #80	; 0x50
1000a164:	5ee0      	ldrsh	r0, [r4, r3]
1000a166:	47b8      	blx	r7
1000a168:	1c31      	adds	r1, r6, #0
1000a16a:	47a8      	blx	r5
1000a16c:	900d      	str	r0, [sp, #52]	; 0x34
	
	read_comp_data(mpu_device.output.raw_compass);
1000a16e:	0023      	movs	r3, r4
1000a170:	3358      	adds	r3, #88	; 0x58
1000a172:	0018      	movs	r0, r3
1000a174:	4b33      	ldr	r3, [pc, #204]	; (1000a244 <sms_mpu_poll_data+0x154>)
1000a176:	4798      	blx	r3
	float m_res = get_Mres(mpu_device.config.m_scale);
1000a178:	78a0      	ldrb	r0, [r4, #2]
1000a17a:	4b33      	ldr	r3, [pc, #204]	; (1000a248 <sms_mpu_poll_data+0x158>)
1000a17c:	4798      	blx	r3
1000a17e:	9007      	str	r0, [sp, #28]
	float mx = ( ((float)mpu_device.output.raw_compass[0]) * m_res * mpu_device.config.mag_calibration[0] ) - mpu_device.config.mag_bias[0];
	float my = ( ((float)mpu_device.output.raw_compass[1]) * m_res * mpu_device.config.mag_calibration[1] ) - mpu_device.config.mag_bias[1];
	float mz = ( ((float)mpu_device.output.raw_compass[2]) * m_res * mpu_device.config.mag_calibration[2] ) - mpu_device.config.mag_bias[2];
	
	MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a180:	4b32      	ldr	r3, [pc, #200]	; (1000a24c <sms_mpu_poll_data+0x15c>)
1000a182:	469a      	mov	sl, r3
1000a184:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a186:	4798      	blx	r3
1000a188:	4b31      	ldr	r3, [pc, #196]	; (1000a250 <sms_mpu_poll_data+0x160>)
1000a18a:	4699      	mov	r9, r3
1000a18c:	4a31      	ldr	r2, [pc, #196]	; (1000a254 <sms_mpu_poll_data+0x164>)
1000a18e:	4b32      	ldr	r3, [pc, #200]	; (1000a258 <sms_mpu_poll_data+0x168>)
1000a190:	47c8      	blx	r9
1000a192:	4b32      	ldr	r3, [pc, #200]	; (1000a25c <sms_mpu_poll_data+0x16c>)
1000a194:	4698      	mov	r8, r3
1000a196:	2200      	movs	r2, #0
1000a198:	4b31      	ldr	r3, [pc, #196]	; (1000a260 <sms_mpu_poll_data+0x170>)
1000a19a:	47c0      	blx	r8
1000a19c:	4e31      	ldr	r6, [pc, #196]	; (1000a264 <sms_mpu_poll_data+0x174>)
1000a19e:	47b0      	blx	r6
1000a1a0:	900b      	str	r0, [sp, #44]	; 0x2c
	
	read_comp_data(mpu_device.output.raw_compass);
	float m_res = get_Mres(mpu_device.config.m_scale);
	float mx = ( ((float)mpu_device.output.raw_compass[0]) * m_res * mpu_device.config.mag_calibration[0] ) - mpu_device.config.mag_bias[0];
	float my = ( ((float)mpu_device.output.raw_compass[1]) * m_res * mpu_device.config.mag_calibration[1] ) - mpu_device.config.mag_bias[1];
	float mz = ( ((float)mpu_device.output.raw_compass[2]) * m_res * mpu_device.config.mag_calibration[2] ) - mpu_device.config.mag_bias[2];
1000a1a2:	235c      	movs	r3, #92	; 0x5c
	
	MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a1a4:	5ee0      	ldrsh	r0, [r4, r3]
1000a1a6:	47b8      	blx	r7
1000a1a8:	9907      	ldr	r1, [sp, #28]
1000a1aa:	47a8      	blx	r5
1000a1ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1000a1ae:	47a8      	blx	r5
1000a1b0:	4b2d      	ldr	r3, [pc, #180]	; (1000a268 <sms_mpu_poll_data+0x178>)
1000a1b2:	469b      	mov	fp, r3
1000a1b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1000a1b6:	4798      	blx	r3
1000a1b8:	9004      	str	r0, [sp, #16]
	float gy = ((float)mpu_device.output.raw_gyro[1]) * g_res;
	float gz = ((float)mpu_device.output.raw_gyro[2]) * g_res;
	
	read_comp_data(mpu_device.output.raw_compass);
	float m_res = get_Mres(mpu_device.config.m_scale);
	float mx = ( ((float)mpu_device.output.raw_compass[0]) * m_res * mpu_device.config.mag_calibration[0] ) - mpu_device.config.mag_bias[0];
1000a1ba:	2358      	movs	r3, #88	; 0x58
	float my = ( ((float)mpu_device.output.raw_compass[1]) * m_res * mpu_device.config.mag_calibration[1] ) - mpu_device.config.mag_bias[1];
	float mz = ( ((float)mpu_device.output.raw_compass[2]) * m_res * mpu_device.config.mag_calibration[2] ) - mpu_device.config.mag_bias[2];
	
	MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a1bc:	5ee0      	ldrsh	r0, [r4, r3]
1000a1be:	47b8      	blx	r7
1000a1c0:	9907      	ldr	r1, [sp, #28]
1000a1c2:	47a8      	blx	r5
1000a1c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
1000a1c6:	47a8      	blx	r5
1000a1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000a1ca:	47d8      	blx	fp
1000a1cc:	9003      	str	r0, [sp, #12]
	float gz = ((float)mpu_device.output.raw_gyro[2]) * g_res;
	
	read_comp_data(mpu_device.output.raw_compass);
	float m_res = get_Mres(mpu_device.config.m_scale);
	float mx = ( ((float)mpu_device.output.raw_compass[0]) * m_res * mpu_device.config.mag_calibration[0] ) - mpu_device.config.mag_bias[0];
	float my = ( ((float)mpu_device.output.raw_compass[1]) * m_res * mpu_device.config.mag_calibration[1] ) - mpu_device.config.mag_bias[1];
1000a1ce:	235a      	movs	r3, #90	; 0x5a
	float mz = ( ((float)mpu_device.output.raw_compass[2]) * m_res * mpu_device.config.mag_calibration[2] ) - mpu_device.config.mag_bias[2];
	
	MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a1d0:	5ee0      	ldrsh	r0, [r4, r3]
1000a1d2:	47b8      	blx	r7
1000a1d4:	9907      	ldr	r1, [sp, #28]
1000a1d6:	47a8      	blx	r5
1000a1d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
1000a1da:	47a8      	blx	r5
1000a1dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000a1de:	47d8      	blx	fp
1000a1e0:	9002      	str	r0, [sp, #8]
1000a1e2:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a1e4:	47d0      	blx	sl
1000a1e6:	4a1b      	ldr	r2, [pc, #108]	; (1000a254 <sms_mpu_poll_data+0x164>)
1000a1e8:	4b1b      	ldr	r3, [pc, #108]	; (1000a258 <sms_mpu_poll_data+0x168>)
1000a1ea:	47c8      	blx	r9
1000a1ec:	2200      	movs	r2, #0
1000a1ee:	4b1c      	ldr	r3, [pc, #112]	; (1000a260 <sms_mpu_poll_data+0x170>)
1000a1f0:	47c0      	blx	r8
1000a1f2:	47b0      	blx	r6
1000a1f4:	9001      	str	r0, [sp, #4]
1000a1f6:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a1f8:	47d0      	blx	sl
1000a1fa:	4a16      	ldr	r2, [pc, #88]	; (1000a254 <sms_mpu_poll_data+0x164>)
1000a1fc:	4b16      	ldr	r3, [pc, #88]	; (1000a258 <sms_mpu_poll_data+0x168>)
1000a1fe:	47c8      	blx	r9
1000a200:	2200      	movs	r2, #0
1000a202:	4b17      	ldr	r3, [pc, #92]	; (1000a260 <sms_mpu_poll_data+0x170>)
1000a204:	47c0      	blx	r8
1000a206:	47b0      	blx	r6
1000a208:	9000      	str	r0, [sp, #0]
1000a20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a20c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a20e:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a210:	9808      	ldr	r0, [sp, #32]
1000a212:	4c16      	ldr	r4, [pc, #88]	; (1000a26c <sms_mpu_poll_data+0x17c>)
1000a214:	47a0      	blx	r4
    return 0;
}
1000a216:	2000      	movs	r0, #0
1000a218:	b00f      	add	sp, #60	; 0x3c
1000a21a:	bc3c      	pop	{r2, r3, r4, r5}
1000a21c:	4690      	mov	r8, r2
1000a21e:	4699      	mov	r9, r3
1000a220:	46a2      	mov	sl, r4
1000a222:	46ab      	mov	fp, r5
1000a224:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a226:	46c0      	nop			; (mov r8, r8)
1000a228:	1001a122 	.word	0x1001a122
1000a22c:	100095f1 	.word	0x100095f1
1000a230:	100096d1 	.word	0x100096d1
1000a234:	100142e5 	.word	0x100142e5
1000a238:	10013d3d 	.word	0x10013d3d
1000a23c:	10009635 	.word	0x10009635
1000a240:	10009699 	.word	0x10009699
1000a244:	1000a095 	.word	0x1000a095
1000a248:	10009679 	.word	0x10009679
1000a24c:	10015fcd 	.word	0x10015fcd
1000a250:	10015291 	.word	0x10015291
1000a254:	54442d28 	.word	0x54442d28
1000a258:	400921fb 	.word	0x400921fb
1000a25c:	10014a49 	.word	0x10014a49
1000a260:	40668000 	.word	0x40668000
1000a264:	10016075 	.word	0x10016075
1000a268:	10013f65 	.word	0x10013f65
1000a26c:	1000843d 	.word	0x1000843d

1000a270 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a270:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a272:	2100      	movs	r1, #0
1000a274:	4b01      	ldr	r3, [pc, #4]	; (1000a27c <sms_led_switch_on+0xc>)
1000a276:	4798      	blx	r3
}
1000a278:	bd10      	pop	{r4, pc}
1000a27a:	46c0      	nop			; (mov r8, r8)
1000a27c:	1000b49d 	.word	0x1000b49d

1000a280 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a280:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a282:	2101      	movs	r1, #1
1000a284:	4b01      	ldr	r3, [pc, #4]	; (1000a28c <sms_led_switch_off+0xc>)
1000a286:	4798      	blx	r3
}
1000a288:	bd10      	pop	{r4, pc}
1000a28a:	46c0      	nop			; (mov r8, r8)
1000a28c:	1000b49d 	.word	0x1000b49d

1000a290 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a290:	b510      	push	{r4, lr}
1000a292:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a294:	ac01      	add	r4, sp, #4
1000a296:	0020      	movs	r0, r4
1000a298:	4b06      	ldr	r3, [pc, #24]	; (1000a2b4 <sms_led_gpio_init+0x24>)
1000a29a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a29c:	2301      	movs	r3, #1
1000a29e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a2a0:	0021      	movs	r1, r4
1000a2a2:	2016      	movs	r0, #22
1000a2a4:	4b04      	ldr	r3, [pc, #16]	; (1000a2b8 <sms_led_gpio_init+0x28>)
1000a2a6:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a2a8:	2016      	movs	r0, #22
1000a2aa:	4b04      	ldr	r3, [pc, #16]	; (1000a2bc <sms_led_gpio_init+0x2c>)
1000a2ac:	4798      	blx	r3
}
1000a2ae:	b002      	add	sp, #8
1000a2b0:	bd10      	pop	{r4, pc}
1000a2b2:	46c0      	nop			; (mov r8, r8)
1000a2b4:	1000b235 	.word	0x1000b235
1000a2b8:	1000b245 	.word	0x1000b245
1000a2bc:	1000a281 	.word	0x1000a281

1000a2c0 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000a2c0:	b510      	push	{r4, lr}
1000a2c2:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a2c4:	4b05      	ldr	r3, [pc, #20]	; (1000a2dc <sms_led_toggle+0x1c>)
1000a2c6:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a2c8:	2800      	cmp	r0, #0
1000a2ca:	d103      	bne.n	1000a2d4 <sms_led_toggle+0x14>
1000a2cc:	0020      	movs	r0, r4
1000a2ce:	4b04      	ldr	r3, [pc, #16]	; (1000a2e0 <sms_led_toggle+0x20>)
1000a2d0:	4798      	blx	r3
1000a2d2:	e002      	b.n	1000a2da <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a2d4:	0020      	movs	r0, r4
1000a2d6:	4b03      	ldr	r3, [pc, #12]	; (1000a2e4 <sms_led_toggle+0x24>)
1000a2d8:	4798      	blx	r3
}
1000a2da:	bd10      	pop	{r4, pc}
1000a2dc:	1000b44d 	.word	0x1000b44d
1000a2e0:	1000a281 	.word	0x1000a281
1000a2e4:	1000a271 	.word	0x1000a271

1000a2e8 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a2e8:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a2ea:	4b0c      	ldr	r3, [pc, #48]	; (1000a31c <sms_led_blink_start+0x34>)
1000a2ec:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a2ee:	2200      	movs	r2, #0
1000a2f0:	4b0b      	ldr	r3, [pc, #44]	; (1000a320 <sms_led_blink_start+0x38>)
1000a2f2:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a2f4:	4b0b      	ldr	r3, [pc, #44]	; (1000a324 <sms_led_blink_start+0x3c>)
1000a2f6:	781b      	ldrb	r3, [r3, #0]
1000a2f8:	b2db      	uxtb	r3, r3
1000a2fa:	2b02      	cmp	r3, #2
1000a2fc:	d002      	beq.n	1000a304 <sms_led_blink_start+0x1c>
1000a2fe:	2b03      	cmp	r3, #3
1000a300:	d002      	beq.n	1000a308 <sms_led_blink_start+0x20>
1000a302:	e004      	b.n	1000a30e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a304:	2164      	movs	r1, #100	; 0x64
1000a306:	e003      	b.n	1000a310 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a308:	21c8      	movs	r1, #200	; 0xc8
1000a30a:	0049      	lsls	r1, r1, #1
        break;
1000a30c:	e000      	b.n	1000a310 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a30e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a310:	2201      	movs	r2, #1
1000a312:	2001      	movs	r0, #1
1000a314:	4b04      	ldr	r3, [pc, #16]	; (1000a328 <sms_led_blink_start+0x40>)
1000a316:	4798      	blx	r3
}
1000a318:	bd10      	pop	{r4, pc}
1000a31a:	46c0      	nop			; (mov r8, r8)
1000a31c:	1000a271 	.word	0x1000a271
1000a320:	1001a304 	.word	0x1001a304
1000a324:	1001a2db 	.word	0x1001a2db
1000a328:	1000a7d1 	.word	0x1000a7d1

1000a32c <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000a32c:	4b06      	ldr	r3, [pc, #24]	; (1000a348 <sms_pressure_init_variables+0x1c>)
1000a32e:	2200      	movs	r2, #0
1000a330:	2125      	movs	r1, #37	; 0x25
1000a332:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000a334:	3106      	adds	r1, #6
1000a336:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000a338:	3901      	subs	r1, #1
1000a33a:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000a33c:	3902      	subs	r1, #2
1000a33e:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000a340:	3101      	adds	r1, #1
1000a342:	545a      	strb	r2, [r3, r1]
}
1000a344:	4770      	bx	lr
1000a346:	46c0      	nop			; (mov r8, r8)
1000a348:	1001a240 	.word	0x1001a240

1000a34c <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a34c:	b510      	push	{r4, lr}
1000a34e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a350:	4a05      	ldr	r2, [pc, #20]	; (1000a368 <sms_pressure_ms58_reset+0x1c>)
1000a352:	231e      	movs	r3, #30
1000a354:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a356:	3b1d      	subs	r3, #29
1000a358:	9300      	str	r3, [sp, #0]
1000a35a:	4b04      	ldr	r3, [pc, #16]	; (1000a36c <sms_pressure_ms58_reset+0x20>)
1000a35c:	4904      	ldr	r1, [pc, #16]	; (1000a370 <sms_pressure_ms58_reset+0x24>)
1000a35e:	4805      	ldr	r0, [pc, #20]	; (1000a374 <sms_pressure_ms58_reset+0x28>)
1000a360:	4c05      	ldr	r4, [pc, #20]	; (1000a378 <sms_pressure_ms58_reset+0x2c>)
1000a362:	47a0      	blx	r4
}
1000a364:	b002      	add	sp, #8
1000a366:	bd10      	pop	{r4, pc}
1000a368:	1001a230 	.word	0x1001a230
1000a36c:	1001a21c 	.word	0x1001a21c
1000a370:	1001a2dc 	.word	0x1001a2dc
1000a374:	1001a2e8 	.word	0x1001a2e8
1000a378:	1000a6a1 	.word	0x1000a6a1

1000a37c <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a37e:	4657      	mov	r7, sl
1000a380:	b480      	push	{r7}
1000a382:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a384:	4d37      	ldr	r5, [pc, #220]	; (1000a464 <sms_pressure_ms58_read_prom+0xe8>)
1000a386:	23a2      	movs	r3, #162	; 0xa2
1000a388:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000a38a:	2300      	movs	r3, #0
1000a38c:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000a38e:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a390:	4c35      	ldr	r4, [pc, #212]	; (1000a468 <sms_pressure_ms58_read_prom+0xec>)
1000a392:	3303      	adds	r3, #3
1000a394:	469a      	mov	sl, r3
1000a396:	9300      	str	r3, [sp, #0]
1000a398:	0023      	movs	r3, r4
1000a39a:	002a      	movs	r2, r5
1000a39c:	4933      	ldr	r1, [pc, #204]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a39e:	4834      	ldr	r0, [pc, #208]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a3a0:	4f34      	ldr	r7, [pc, #208]	; (1000a474 <sms_pressure_ms58_read_prom+0xf8>)
1000a3a2:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a3a4:	4e34      	ldr	r6, [pc, #208]	; (1000a478 <sms_pressure_ms58_read_prom+0xfc>)
1000a3a6:	7863      	ldrb	r3, [r4, #1]
1000a3a8:	021b      	lsls	r3, r3, #8
1000a3aa:	78a2      	ldrb	r2, [r4, #2]
1000a3ac:	4313      	orrs	r3, r2
1000a3ae:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000a3b0:	23a4      	movs	r3, #164	; 0xa4
1000a3b2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a3b4:	4653      	mov	r3, sl
1000a3b6:	9300      	str	r3, [sp, #0]
1000a3b8:	0023      	movs	r3, r4
1000a3ba:	002a      	movs	r2, r5
1000a3bc:	492b      	ldr	r1, [pc, #172]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a3be:	482c      	ldr	r0, [pc, #176]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a3c0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a3c2:	7863      	ldrb	r3, [r4, #1]
1000a3c4:	021b      	lsls	r3, r3, #8
1000a3c6:	78a2      	ldrb	r2, [r4, #2]
1000a3c8:	4313      	orrs	r3, r2
1000a3ca:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000a3cc:	23a6      	movs	r3, #166	; 0xa6
1000a3ce:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a3d0:	4653      	mov	r3, sl
1000a3d2:	9300      	str	r3, [sp, #0]
1000a3d4:	0023      	movs	r3, r4
1000a3d6:	002a      	movs	r2, r5
1000a3d8:	4924      	ldr	r1, [pc, #144]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a3da:	4825      	ldr	r0, [pc, #148]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a3dc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a3de:	7863      	ldrb	r3, [r4, #1]
1000a3e0:	021b      	lsls	r3, r3, #8
1000a3e2:	78a2      	ldrb	r2, [r4, #2]
1000a3e4:	4313      	orrs	r3, r2
1000a3e6:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000a3e8:	23a8      	movs	r3, #168	; 0xa8
1000a3ea:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a3ec:	4653      	mov	r3, sl
1000a3ee:	9300      	str	r3, [sp, #0]
1000a3f0:	0023      	movs	r3, r4
1000a3f2:	002a      	movs	r2, r5
1000a3f4:	491d      	ldr	r1, [pc, #116]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a3f6:	481e      	ldr	r0, [pc, #120]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a3f8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a3fa:	7863      	ldrb	r3, [r4, #1]
1000a3fc:	021b      	lsls	r3, r3, #8
1000a3fe:	78a2      	ldrb	r2, [r4, #2]
1000a400:	4313      	orrs	r3, r2
1000a402:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000a404:	23aa      	movs	r3, #170	; 0xaa
1000a406:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a408:	4653      	mov	r3, sl
1000a40a:	9300      	str	r3, [sp, #0]
1000a40c:	0023      	movs	r3, r4
1000a40e:	002a      	movs	r2, r5
1000a410:	4916      	ldr	r1, [pc, #88]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a412:	4817      	ldr	r0, [pc, #92]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a414:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a416:	7863      	ldrb	r3, [r4, #1]
1000a418:	021b      	lsls	r3, r3, #8
1000a41a:	78a2      	ldrb	r2, [r4, #2]
1000a41c:	4313      	orrs	r3, r2
1000a41e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000a420:	23ac      	movs	r3, #172	; 0xac
1000a422:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a424:	4653      	mov	r3, sl
1000a426:	9300      	str	r3, [sp, #0]
1000a428:	0023      	movs	r3, r4
1000a42a:	002a      	movs	r2, r5
1000a42c:	490f      	ldr	r1, [pc, #60]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a42e:	4810      	ldr	r0, [pc, #64]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a430:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a432:	7863      	ldrb	r3, [r4, #1]
1000a434:	021b      	lsls	r3, r3, #8
1000a436:	78a2      	ldrb	r2, [r4, #2]
1000a438:	4313      	orrs	r3, r2
1000a43a:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000a43c:	23ae      	movs	r3, #174	; 0xae
1000a43e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a440:	4653      	mov	r3, sl
1000a442:	9300      	str	r3, [sp, #0]
1000a444:	0023      	movs	r3, r4
1000a446:	002a      	movs	r2, r5
1000a448:	4908      	ldr	r1, [pc, #32]	; (1000a46c <sms_pressure_ms58_read_prom+0xf0>)
1000a44a:	4809      	ldr	r0, [pc, #36]	; (1000a470 <sms_pressure_ms58_read_prom+0xf4>)
1000a44c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a44e:	7863      	ldrb	r3, [r4, #1]
1000a450:	021b      	lsls	r3, r3, #8
1000a452:	78a2      	ldrb	r2, [r4, #2]
1000a454:	4313      	orrs	r3, r2
1000a456:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000a458:	2000      	movs	r0, #0
1000a45a:	b002      	add	sp, #8
1000a45c:	bc04      	pop	{r2}
1000a45e:	4692      	mov	sl, r2
1000a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a462:	46c0      	nop			; (mov r8, r8)
1000a464:	1001a230 	.word	0x1001a230
1000a468:	1001a21c 	.word	0x1001a21c
1000a46c:	1001a2dc 	.word	0x1001a2dc
1000a470:	1001a2e8 	.word	0x1001a2e8
1000a474:	1000a6a1 	.word	0x1000a6a1
1000a478:	1001a240 	.word	0x1001a240

1000a47c <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000a47c:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000a47e:	4b0a      	ldr	r3, [pc, #40]	; (1000a4a8 <sms_pressure_init+0x2c>)
1000a480:	4798      	blx	r3
1000a482:	2800      	cmp	r0, #0
1000a484:	d10d      	bne.n	1000a4a2 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000a486:	4b09      	ldr	r3, [pc, #36]	; (1000a4ac <sms_pressure_init+0x30>)
1000a488:	2201      	movs	r2, #1
1000a48a:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000a48c:	2402      	movs	r4, #2
1000a48e:	2125      	movs	r1, #37	; 0x25
1000a490:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000a492:	3103      	adds	r1, #3
1000a494:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000a496:	2200      	movs	r2, #0
1000a498:	3101      	adds	r1, #1
1000a49a:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000a49c:	3101      	adds	r1, #1
1000a49e:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000a4a0:	e000      	b.n	1000a4a4 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000a4a2:	2010      	movs	r0, #16
}
1000a4a4:	bd10      	pop	{r4, pc}
1000a4a6:	46c0      	nop			; (mov r8, r8)
1000a4a8:	1000a37d 	.word	0x1000a37d
1000a4ac:	1001a240 	.word	0x1001a240

1000a4b0 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000a4b0:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000a4b2:	2101      	movs	r1, #1
1000a4b4:	2001      	movs	r0, #1
1000a4b6:	4b10      	ldr	r3, [pc, #64]	; (1000a4f8 <sms_pressure_startup+0x48>)
1000a4b8:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000a4ba:	2101      	movs	r1, #1
1000a4bc:	2325      	movs	r3, #37	; 0x25
1000a4be:	4a0f      	ldr	r2, [pc, #60]	; (1000a4fc <sms_pressure_startup+0x4c>)
1000a4c0:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000a4c2:	4b0f      	ldr	r3, [pc, #60]	; (1000a500 <sms_pressure_startup+0x50>)
1000a4c4:	4798      	blx	r3
    delay_ms(3);
1000a4c6:	2003      	movs	r0, #3
1000a4c8:	4b0e      	ldr	r3, [pc, #56]	; (1000a504 <sms_pressure_startup+0x54>)
1000a4ca:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000a4cc:	4b0e      	ldr	r3, [pc, #56]	; (1000a508 <sms_pressure_startup+0x58>)
1000a4ce:	4798      	blx	r3
1000a4d0:	2800      	cmp	r0, #0
1000a4d2:	d000      	beq.n	1000a4d6 <sms_pressure_startup+0x26>
1000a4d4:	e7fe      	b.n	1000a4d4 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000a4d6:	4b09      	ldr	r3, [pc, #36]	; (1000a4fc <sms_pressure_startup+0x4c>)
1000a4d8:	2102      	movs	r1, #2
1000a4da:	2225      	movs	r2, #37	; 0x25
1000a4dc:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000a4de:	2401      	movs	r4, #1
1000a4e0:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000a4e2:	3a1e      	subs	r2, #30
1000a4e4:	4b09      	ldr	r3, [pc, #36]	; (1000a50c <sms_pressure_startup+0x5c>)
1000a4e6:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000a4e8:	3901      	subs	r1, #1
1000a4ea:	2001      	movs	r0, #1
1000a4ec:	4b08      	ldr	r3, [pc, #32]	; (1000a510 <sms_pressure_startup+0x60>)
1000a4ee:	4798      	blx	r3
    
    ulp_ready = true;
1000a4f0:	4b08      	ldr	r3, [pc, #32]	; (1000a514 <sms_pressure_startup+0x64>)
1000a4f2:	701c      	strb	r4, [r3, #0]
}
1000a4f4:	bd10      	pop	{r4, pc}
1000a4f6:	46c0      	nop			; (mov r8, r8)
1000a4f8:	10009239 	.word	0x10009239
1000a4fc:	1001a240 	.word	0x1001a240
1000a500:	1000a34d 	.word	0x1000a34d
1000a504:	1000aba1 	.word	0x1000aba1
1000a508:	1000a47d 	.word	0x1000a47d
1000a50c:	1001a1a8 	.word	0x1001a1a8
1000a510:	1000a569 	.word	0x1000a569
1000a514:	1001a1a9 	.word	0x1001a1a9

1000a518 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000a518:	b510      	push	{r4, lr}
1000a51a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a51c:	466b      	mov	r3, sp
1000a51e:	1dda      	adds	r2, r3, #7
1000a520:	2300      	movs	r3, #0
1000a522:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000a524:	4c09      	ldr	r4, [pc, #36]	; (1000a54c <sms_pressure_define_services+0x34>)
1000a526:	0021      	movs	r1, r4
1000a528:	2001      	movs	r0, #1
1000a52a:	4b09      	ldr	r3, [pc, #36]	; (1000a550 <sms_pressure_define_services+0x38>)
1000a52c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000a52e:	0020      	movs	r0, r4
1000a530:	4b08      	ldr	r3, [pc, #32]	; (1000a554 <sms_pressure_define_services+0x3c>)
1000a532:	4798      	blx	r3
1000a534:	1e04      	subs	r4, r0, #0
1000a536:	d006      	beq.n	1000a546 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000a538:	4807      	ldr	r0, [pc, #28]	; (1000a558 <sms_pressure_define_services+0x40>)
1000a53a:	4b08      	ldr	r3, [pc, #32]	; (1000a55c <sms_pressure_define_services+0x44>)
1000a53c:	4798      	blx	r3
1000a53e:	0021      	movs	r1, r4
1000a540:	4807      	ldr	r0, [pc, #28]	; (1000a560 <sms_pressure_define_services+0x48>)
1000a542:	4b08      	ldr	r3, [pc, #32]	; (1000a564 <sms_pressure_define_services+0x4c>)
1000a544:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000a546:	b002      	add	sp, #8
1000a548:	bd10      	pop	{r4, pc}
1000a54a:	46c0      	nop			; (mov r8, r8)
1000a54c:	1001a26c 	.word	0x1001a26c
1000a550:	10008e95 	.word	0x10008e95
1000a554:	10008e71 	.word	0x10008e71
1000a558:	10017414 	.word	0x10017414
1000a55c:	100164cd 	.word	0x100164cd
1000a560:	10017708 	.word	0x10017708
1000a564:	100163ad 	.word	0x100163ad

1000a568 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a568:	b510      	push	{r4, lr}
1000a56a:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a56c:	2800      	cmp	r0, #0
1000a56e:	d006      	beq.n	1000a57e <sms_sensors_interrupt_toggle+0x16>
        mpu_device.state = MPU_STATE_ON;
1000a570:	2102      	movs	r1, #2
1000a572:	2375      	movs	r3, #117	; 0x75
1000a574:	4a14      	ldr	r2, [pc, #80]	; (1000a5c8 <sms_sensors_interrupt_toggle+0x60>)
1000a576:	54d1      	strb	r1, [r2, r3]
        sms_mpu_enable_callback();
1000a578:	4b14      	ldr	r3, [pc, #80]	; (1000a5cc <sms_sensors_interrupt_toggle+0x64>)
1000a57a:	4798      	blx	r3
1000a57c:	e005      	b.n	1000a58a <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000a57e:	2100      	movs	r1, #0
1000a580:	2375      	movs	r3, #117	; 0x75
1000a582:	4a11      	ldr	r2, [pc, #68]	; (1000a5c8 <sms_sensors_interrupt_toggle+0x60>)
1000a584:	54d1      	strb	r1, [r2, r3]
        sms_mpu_disable_callback();
1000a586:	4b12      	ldr	r3, [pc, #72]	; (1000a5d0 <sms_sensors_interrupt_toggle+0x68>)
1000a588:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000a58a:	2c00      	cmp	r4, #0
1000a58c:	d010      	beq.n	1000a5b0 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000a58e:	4b11      	ldr	r3, [pc, #68]	; (1000a5d4 <sms_sensors_interrupt_toggle+0x6c>)
1000a590:	2103      	movs	r1, #3
1000a592:	2225      	movs	r2, #37	; 0x25
1000a594:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000a596:	3901      	subs	r1, #1
1000a598:	3206      	adds	r2, #6
1000a59a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a59c:	2100      	movs	r1, #0
1000a59e:	480e      	ldr	r0, [pc, #56]	; (1000a5d8 <sms_sensors_interrupt_toggle+0x70>)
1000a5a0:	4b0e      	ldr	r3, [pc, #56]	; (1000a5dc <sms_sensors_interrupt_toggle+0x74>)
1000a5a2:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a5a4:	4b0e      	ldr	r3, [pc, #56]	; (1000a5e0 <sms_sensors_interrupt_toggle+0x78>)
1000a5a6:	4798      	blx	r3
        sensors_active = true;
1000a5a8:	2201      	movs	r2, #1
1000a5aa:	4b0e      	ldr	r3, [pc, #56]	; (1000a5e4 <sms_sensors_interrupt_toggle+0x7c>)
1000a5ac:	701a      	strb	r2, [r3, #0]
1000a5ae:	e00a      	b.n	1000a5c6 <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000a5b0:	2102      	movs	r1, #2
1000a5b2:	2325      	movs	r3, #37	; 0x25
1000a5b4:	4a07      	ldr	r2, [pc, #28]	; (1000a5d4 <sms_sensors_interrupt_toggle+0x6c>)
1000a5b6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000a5b8:	4b0b      	ldr	r3, [pc, #44]	; (1000a5e8 <sms_sensors_interrupt_toggle+0x80>)
1000a5ba:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000a5bc:	4b0b      	ldr	r3, [pc, #44]	; (1000a5ec <sms_sensors_interrupt_toggle+0x84>)
1000a5be:	4798      	blx	r3
        sensors_active = false;
1000a5c0:	2200      	movs	r2, #0
1000a5c2:	4b08      	ldr	r3, [pc, #32]	; (1000a5e4 <sms_sensors_interrupt_toggle+0x7c>)
1000a5c4:	701a      	strb	r2, [r3, #0]
    }
}
1000a5c6:	bd10      	pop	{r4, pc}
1000a5c8:	1001a0d0 	.word	0x1001a0d0
1000a5cc:	10009569 	.word	0x10009569
1000a5d0:	10009585 	.word	0x10009585
1000a5d4:	1001a240 	.word	0x1001a240
1000a5d8:	000003d5 	.word	0x000003d5
1000a5dc:	1000a705 	.word	0x1000a705
1000a5e0:	1000a739 	.word	0x1000a739
1000a5e4:	1001a2cc 	.word	0x1001a2cc
1000a5e8:	1000a72d 	.word	0x1000a72d
1000a5ec:	1000a759 	.word	0x1000a759

1000a5f0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a5f0:	b510      	push	{r4, lr}
1000a5f2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a5f4:	2800      	cmp	r0, #0
1000a5f6:	d103      	bne.n	1000a600 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000a5f8:	2100      	movs	r1, #0
1000a5fa:	3006      	adds	r0, #6
1000a5fc:	4b07      	ldr	r3, [pc, #28]	; (1000a61c <sms_sensors_switch+0x2c>)
1000a5fe:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000a600:	2c00      	cmp	r4, #0
1000a602:	d006      	beq.n	1000a612 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000a604:	2101      	movs	r1, #1
1000a606:	2325      	movs	r3, #37	; 0x25
1000a608:	4a05      	ldr	r2, [pc, #20]	; (1000a620 <sms_sensors_switch+0x30>)
1000a60a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000a60c:	4b05      	ldr	r3, [pc, #20]	; (1000a624 <sms_sensors_switch+0x34>)
1000a60e:	4798      	blx	r3
1000a610:	e003      	b.n	1000a61a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000a612:	2100      	movs	r1, #0
1000a614:	2007      	movs	r0, #7
1000a616:	4b01      	ldr	r3, [pc, #4]	; (1000a61c <sms_sensors_switch+0x2c>)
1000a618:	4798      	blx	r3
    }
}
1000a61a:	bd10      	pop	{r4, pc}
1000a61c:	1000b49d 	.word	0x1000b49d
1000a620:	1001a240 	.word	0x1001a240
1000a624:	1000a4b1 	.word	0x1000a4b1

1000a628 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a628:	b530      	push	{r4, r5, lr}
1000a62a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a62c:	ac01      	add	r4, sp, #4
1000a62e:	0020      	movs	r0, r4
1000a630:	4b13      	ldr	r3, [pc, #76]	; (1000a680 <sms_spi_master_configure+0x58>)
1000a632:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a634:	2310      	movs	r3, #16
1000a636:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a638:	0021      	movs	r1, r4
1000a63a:	4812      	ldr	r0, [pc, #72]	; (1000a684 <sms_spi_master_configure+0x5c>)
1000a63c:	4b12      	ldr	r3, [pc, #72]	; (1000a688 <sms_spi_master_configure+0x60>)
1000a63e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a640:	ac02      	add	r4, sp, #8
1000a642:	0020      	movs	r0, r4
1000a644:	4b11      	ldr	r3, [pc, #68]	; (1000a68c <sms_spi_master_configure+0x64>)
1000a646:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a648:	2368      	movs	r3, #104	; 0x68
1000a64a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a64c:	2300      	movs	r3, #0
1000a64e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a650:	3311      	adds	r3, #17
1000a652:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a654:	3b0d      	subs	r3, #13
1000a656:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a658:	2213      	movs	r2, #19
1000a65a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a65c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a65e:	3a14      	subs	r2, #20
1000a660:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a662:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a664:	3213      	adds	r2, #19
1000a666:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a668:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a66a:	4d09      	ldr	r5, [pc, #36]	; (1000a690 <sms_spi_master_configure+0x68>)
1000a66c:	0022      	movs	r2, r4
1000a66e:	4909      	ldr	r1, [pc, #36]	; (1000a694 <sms_spi_master_configure+0x6c>)
1000a670:	0028      	movs	r0, r5
1000a672:	4b09      	ldr	r3, [pc, #36]	; (1000a698 <sms_spi_master_configure+0x70>)
1000a674:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a676:	0028      	movs	r0, r5
1000a678:	4b08      	ldr	r3, [pc, #32]	; (1000a69c <sms_spi_master_configure+0x74>)
1000a67a:	4798      	blx	r3
}
1000a67c:	b00d      	add	sp, #52	; 0x34
1000a67e:	bd30      	pop	{r4, r5, pc}
1000a680:	1000abcd 	.word	0x1000abcd
1000a684:	1001a2dc 	.word	0x1001a2dc
1000a688:	1000ac05 	.word	0x1000ac05
1000a68c:	1000abd9 	.word	0x1000abd9
1000a690:	1001a2e8 	.word	0x1001a2e8
1000a694:	40007000 	.word	0x40007000
1000a698:	1000acd5 	.word	0x1000acd5
1000a69c:	1000ac45 	.word	0x1000ac45

1000a6a0 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6a2:	b083      	sub	sp, #12
1000a6a4:	0004      	movs	r4, r0
1000a6a6:	000d      	movs	r5, r1
1000a6a8:	9200      	str	r2, [sp, #0]
1000a6aa:	9301      	str	r3, [sp, #4]
1000a6ac:	ab08      	add	r3, sp, #32
1000a6ae:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a6b0:	2201      	movs	r2, #1
1000a6b2:	4f08      	ldr	r7, [pc, #32]	; (1000a6d4 <sms_spi_master_transceive+0x34>)
1000a6b4:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a6b6:	0033      	movs	r3, r6
1000a6b8:	9a01      	ldr	r2, [sp, #4]
1000a6ba:	9900      	ldr	r1, [sp, #0]
1000a6bc:	0020      	movs	r0, r4
1000a6be:	4e06      	ldr	r6, [pc, #24]	; (1000a6d8 <sms_spi_master_transceive+0x38>)
1000a6c0:	47b0      	blx	r6
1000a6c2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a6c4:	2200      	movs	r2, #0
1000a6c6:	0029      	movs	r1, r5
1000a6c8:	0020      	movs	r0, r4
1000a6ca:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a6cc:	0030      	movs	r0, r6
1000a6ce:	b003      	add	sp, #12
1000a6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a6d2:	46c0      	nop			; (mov r8, r8)
1000a6d4:	1000aebd 	.word	0x1000aebd
1000a6d8:	1000ae39 	.word	0x1000ae39

1000a6dc <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a6dc:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000a6de:	2328      	movs	r3, #40	; 0x28
1000a6e0:	4a06      	ldr	r2, [pc, #24]	; (1000a6fc <sms_timer_aon_callback+0x20>)
1000a6e2:	5cd3      	ldrb	r3, [r2, r3]
1000a6e4:	2b00      	cmp	r3, #0
1000a6e6:	d008      	beq.n	1000a6fa <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000a6e8:	2101      	movs	r1, #1
1000a6ea:	2329      	movs	r3, #41	; 0x29
1000a6ec:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a6ee:	2300      	movs	r3, #0
1000a6f0:	2200      	movs	r2, #0
1000a6f2:	3102      	adds	r1, #2
1000a6f4:	2042      	movs	r0, #66	; 0x42
1000a6f6:	4c02      	ldr	r4, [pc, #8]	; (1000a700 <sms_timer_aon_callback+0x24>)
1000a6f8:	47a0      	blx	r4
	}
}
1000a6fa:	bd10      	pop	{r4, pc}
1000a6fc:	1001a240 	.word	0x1001a240
1000a700:	1000e161 	.word	0x1000e161

1000a704 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000a704:	b530      	push	{r4, r5, lr}
1000a706:	b083      	sub	sp, #12
1000a708:	0004      	movs	r4, r0
1000a70a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a70c:	4668      	mov	r0, sp
1000a70e:	4b05      	ldr	r3, [pc, #20]	; (1000a724 <sms_timer_aon_init+0x20>)
1000a710:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a712:	466b      	mov	r3, sp
1000a714:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000a716:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a718:	4668      	mov	r0, sp
1000a71a:	4b03      	ldr	r3, [pc, #12]	; (1000a728 <sms_timer_aon_init+0x24>)
1000a71c:	4798      	blx	r3
}
1000a71e:	b003      	add	sp, #12
1000a720:	bd30      	pop	{r4, r5, pc}
1000a722:	46c0      	nop			; (mov r8, r8)
1000a724:	100080e9 	.word	0x100080e9
1000a728:	1000815d 	.word	0x1000815d

1000a72c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a72c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a72e:	4b01      	ldr	r3, [pc, #4]	; (1000a734 <sms_timer_aon_disable+0x8>)
1000a730:	4798      	blx	r3
}
1000a732:	bd10      	pop	{r4, pc}
1000a734:	100080f9 	.word	0x100080f9

1000a738 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a738:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a73a:	4804      	ldr	r0, [pc, #16]	; (1000a74c <sms_timer_aon_register_callback+0x14>)
1000a73c:	4b04      	ldr	r3, [pc, #16]	; (1000a750 <sms_timer_aon_register_callback+0x18>)
1000a73e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a740:	2280      	movs	r2, #128	; 0x80
1000a742:	0512      	lsls	r2, r2, #20
1000a744:	4b03      	ldr	r3, [pc, #12]	; (1000a754 <sms_timer_aon_register_callback+0x1c>)
1000a746:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a748:	bd10      	pop	{r4, pc}
1000a74a:	46c0      	nop			; (mov r8, r8)
1000a74c:	1000a6dd 	.word	0x1000a6dd
1000a750:	10008145 	.word	0x10008145
1000a754:	e000e100 	.word	0xe000e100

1000a758 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a758:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a75a:	4b04      	ldr	r3, [pc, #16]	; (1000a76c <sms_timer_aon_unregister_callback+0x14>)
1000a75c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a75e:	2180      	movs	r1, #128	; 0x80
1000a760:	0509      	lsls	r1, r1, #20
1000a762:	2380      	movs	r3, #128	; 0x80
1000a764:	4a02      	ldr	r2, [pc, #8]	; (1000a770 <sms_timer_aon_unregister_callback+0x18>)
1000a766:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a768:	bd10      	pop	{r4, pc}
1000a76a:	46c0      	nop			; (mov r8, r8)
1000a76c:	10008151 	.word	0x10008151
1000a770:	e000e100 	.word	0xe000e100

1000a774 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a774:	b510      	push	{r4, lr}
1000a776:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a778:	ac01      	add	r4, sp, #4
1000a77a:	0020      	movs	r0, r4
1000a77c:	4b09      	ldr	r3, [pc, #36]	; (1000a7a4 <sms_dualtimer_init+0x30>)
1000a77e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000a780:	4b09      	ldr	r3, [pc, #36]	; (1000a7a8 <sms_dualtimer_init+0x34>)
1000a782:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a784:	2300      	movs	r3, #0
1000a786:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000a788:	4a08      	ldr	r2, [pc, #32]	; (1000a7ac <sms_dualtimer_init+0x38>)
1000a78a:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a78c:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000a78e:	0020      	movs	r0, r4
1000a790:	4b07      	ldr	r3, [pc, #28]	; (1000a7b0 <sms_dualtimer_init+0x3c>)
1000a792:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a794:	2000      	movs	r0, #0
1000a796:	4c07      	ldr	r4, [pc, #28]	; (1000a7b4 <sms_dualtimer_init+0x40>)
1000a798:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a79a:	2001      	movs	r0, #1
1000a79c:	47a0      	blx	r4
}
1000a79e:	b008      	add	sp, #32
1000a7a0:	bd10      	pop	{r4, pc}
1000a7a2:	46c0      	nop			; (mov r8, r8)
1000a7a4:	1000af21 	.word	0x1000af21
1000a7a8:	018cba80 	.word	0x018cba80
1000a7ac:	00006590 	.word	0x00006590
1000a7b0:	1000afc9 	.word	0x1000afc9
1000a7b4:	1000afa5 	.word	0x1000afa5

1000a7b8 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a7b8:	b510      	push	{r4, lr}
1000a7ba:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000a7bc:	4b02      	ldr	r3, [pc, #8]	; (1000a7c8 <sms_dualtimer_register_callback+0x10>)
1000a7be:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a7c0:	0020      	movs	r0, r4
1000a7c2:	4b02      	ldr	r3, [pc, #8]	; (1000a7cc <sms_dualtimer_register_callback+0x14>)
1000a7c4:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000a7c6:	bd10      	pop	{r4, pc}
1000a7c8:	1000b0cd 	.word	0x1000b0cd
1000a7cc:	1000afa5 	.word	0x1000afa5

1000a7d0 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a7d0:	b510      	push	{r4, lr}
1000a7d2:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a7d4:	2801      	cmp	r0, #1
1000a7d6:	d006      	beq.n	1000a7e6 <sms_dualtimer_start+0x16>
1000a7d8:	2800      	cmp	r0, #0
1000a7da:	d002      	beq.n	1000a7e2 <sms_dualtimer_start+0x12>
1000a7dc:	2802      	cmp	r0, #2
1000a7de:	d004      	beq.n	1000a7ea <sms_dualtimer_start+0x1a>
1000a7e0:	e005      	b.n	1000a7ee <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a7e2:	221a      	movs	r2, #26
1000a7e4:	e004      	b.n	1000a7f0 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a7e6:	4a0c      	ldr	r2, [pc, #48]	; (1000a818 <sms_dualtimer_start+0x48>)
        break;
1000a7e8:	e002      	b.n	1000a7f0 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a7ea:	4a0c      	ldr	r2, [pc, #48]	; (1000a81c <sms_dualtimer_start+0x4c>)
        break;
1000a7ec:	e000      	b.n	1000a7f0 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a7ee:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a7f0:	2900      	cmp	r1, #0
1000a7f2:	d101      	bne.n	1000a7f8 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000a7f4:	21fa      	movs	r1, #250	; 0xfa
1000a7f6:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000a7f8:	2000      	movs	r0, #0
1000a7fa:	4b09      	ldr	r3, [pc, #36]	; (1000a820 <sms_dualtimer_start+0x50>)
1000a7fc:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a7fe:	434a      	muls	r2, r1
1000a800:	2100      	movs	r1, #0
1000a802:	0020      	movs	r0, r4
1000a804:	4b07      	ldr	r3, [pc, #28]	; (1000a824 <sms_dualtimer_start+0x54>)
1000a806:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a808:	0020      	movs	r0, r4
1000a80a:	4b07      	ldr	r3, [pc, #28]	; (1000a828 <sms_dualtimer_start+0x58>)
1000a80c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a80e:	2280      	movs	r2, #128	; 0x80
1000a810:	01d2      	lsls	r2, r2, #7
1000a812:	4b06      	ldr	r3, [pc, #24]	; (1000a82c <sms_dualtimer_start+0x5c>)
1000a814:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a816:	bd10      	pop	{r4, pc}
1000a818:	00006590 	.word	0x00006590
1000a81c:	018cba80 	.word	0x018cba80
1000a820:	1001a1a9 	.word	0x1001a1a9
1000a824:	1000af59 	.word	0x1000af59
1000a828:	1000af81 	.word	0x1000af81
1000a82c:	e000e100 	.word	0xe000e100

1000a830 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a830:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a832:	4b01      	ldr	r3, [pc, #4]	; (1000a838 <sms_dualtimer_stop+0x8>)
1000a834:	4798      	blx	r3
}
1000a836:	bd10      	pop	{r4, pc}
1000a838:	1000afa5 	.word	0x1000afa5

1000a83c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000a83c:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000a83e:	2201      	movs	r2, #1
1000a840:	4b04      	ldr	r3, [pc, #16]	; (1000a854 <sms_dualtimer1_cb+0x18>)
1000a842:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a844:	2300      	movs	r3, #0
1000a846:	2200      	movs	r2, #0
1000a848:	2101      	movs	r1, #1
1000a84a:	2040      	movs	r0, #64	; 0x40
1000a84c:	4c02      	ldr	r4, [pc, #8]	; (1000a858 <sms_dualtimer1_cb+0x1c>)
1000a84e:	47a0      	blx	r4
}
1000a850:	bd10      	pop	{r4, pc}
1000a852:	46c0      	nop			; (mov r8, r8)
1000a854:	1001a22c 	.word	0x1001a22c
1000a858:	1000e161 	.word	0x1000e161

1000a85c <sms_dualtimer1_fn>:
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}


void sms_dualtimer1_fn(void)
{
1000a85c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000a85e:	4b79      	ldr	r3, [pc, #484]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a860:	781b      	ldrb	r3, [r3, #0]
1000a862:	b2db      	uxtb	r3, r3
1000a864:	2b01      	cmp	r3, #1
1000a866:	d003      	beq.n	1000a870 <sms_dualtimer1_fn+0x14>
1000a868:	2b02      	cmp	r3, #2
1000a86a:	d100      	bne.n	1000a86e <sms_dualtimer1_fn+0x12>
1000a86c:	e0ae      	b.n	1000a9cc <sms_dualtimer1_fn+0x170>
1000a86e:	e0e1      	b.n	1000aa34 <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000a870:	2200      	movs	r2, #0
1000a872:	4b74      	ldr	r3, [pc, #464]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a874:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000a876:	4c74      	ldr	r4, [pc, #464]	; (1000aa48 <sms_dualtimer1_fn+0x1ec>)
1000a878:	7b63      	ldrb	r3, [r4, #13]
1000a87a:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a87c:	4b73      	ldr	r3, [pc, #460]	; (1000aa4c <sms_dualtimer1_fn+0x1f0>)
1000a87e:	4798      	blx	r3
1000a880:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a882:	4873      	ldr	r0, [pc, #460]	; (1000aa50 <sms_dualtimer1_fn+0x1f4>)
1000a884:	4b73      	ldr	r3, [pc, #460]	; (1000aa54 <sms_dualtimer1_fn+0x1f8>)
1000a886:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000a888:	7b23      	ldrb	r3, [r4, #12]
1000a88a:	2b01      	cmp	r3, #1
1000a88c:	d002      	beq.n	1000a894 <sms_dualtimer1_fn+0x38>
1000a88e:	2b02      	cmp	r3, #2
1000a890:	d04c      	beq.n	1000a92c <sms_dualtimer1_fn+0xd0>
1000a892:	e093      	b.n	1000a9bc <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000a894:	4b6c      	ldr	r3, [pc, #432]	; (1000aa48 <sms_dualtimer1_fn+0x1ec>)
1000a896:	7b5b      	ldrb	r3, [r3, #13]
1000a898:	2b01      	cmp	r3, #1
1000a89a:	d002      	beq.n	1000a8a2 <sms_dualtimer1_fn+0x46>
1000a89c:	2b02      	cmp	r3, #2
1000a89e:	d023      	beq.n	1000a8e8 <sms_dualtimer1_fn+0x8c>
1000a8a0:	e03b      	b.n	1000a91a <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a8a2:	4b6d      	ldr	r3, [pc, #436]	; (1000aa58 <sms_dualtimer1_fn+0x1fc>)
1000a8a4:	781b      	ldrb	r3, [r3, #0]
1000a8a6:	2b00      	cmp	r3, #0
1000a8a8:	d115      	bne.n	1000a8d6 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000a8aa:	4a6c      	ldr	r2, [pc, #432]	; (1000aa5c <sms_dualtimer1_fn+0x200>)
1000a8ac:	7813      	ldrb	r3, [r2, #0]
1000a8ae:	3301      	adds	r3, #1
1000a8b0:	b2db      	uxtb	r3, r3
1000a8b2:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a8b4:	2b0f      	cmp	r3, #15
1000a8b6:	d905      	bls.n	1000a8c4 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a8b8:	2200      	movs	r2, #0
1000a8ba:	4b62      	ldr	r3, [pc, #392]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a8bc:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a8be:	4b68      	ldr	r3, [pc, #416]	; (1000aa60 <sms_dualtimer1_fn+0x204>)
1000a8c0:	4798      	blx	r3
1000a8c2:	e0be      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a8c4:	2201      	movs	r2, #1
1000a8c6:	4b5f      	ldr	r3, [pc, #380]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a8c8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a8ca:	2200      	movs	r2, #0
1000a8cc:	21fa      	movs	r1, #250	; 0xfa
1000a8ce:	2001      	movs	r0, #1
1000a8d0:	4b64      	ldr	r3, [pc, #400]	; (1000aa64 <sms_dualtimer1_fn+0x208>)
1000a8d2:	4798      	blx	r3
1000a8d4:	e0b5      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8d6:	4b64      	ldr	r3, [pc, #400]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a8d8:	781b      	ldrb	r3, [r3, #0]
1000a8da:	2b00      	cmp	r3, #0
1000a8dc:	d000      	beq.n	1000a8e0 <sms_dualtimer1_fn+0x84>
1000a8de:	e0b0      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a8e0:	2201      	movs	r2, #1
1000a8e2:	4b62      	ldr	r3, [pc, #392]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a8e4:	701a      	strb	r2, [r3, #0]
1000a8e6:	e0ac      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a8e8:	4b5b      	ldr	r3, [pc, #364]	; (1000aa58 <sms_dualtimer1_fn+0x1fc>)
1000a8ea:	781b      	ldrb	r3, [r3, #0]
1000a8ec:	2b00      	cmp	r3, #0
1000a8ee:	d10b      	bne.n	1000a908 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000a8f0:	2200      	movs	r2, #0
1000a8f2:	4b5a      	ldr	r3, [pc, #360]	; (1000aa5c <sms_dualtimer1_fn+0x200>)
1000a8f4:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a8f6:	3201      	adds	r2, #1
1000a8f8:	4b52      	ldr	r3, [pc, #328]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a8fa:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a8fc:	2200      	movs	r2, #0
1000a8fe:	2164      	movs	r1, #100	; 0x64
1000a900:	2001      	movs	r0, #1
1000a902:	4b58      	ldr	r3, [pc, #352]	; (1000aa64 <sms_dualtimer1_fn+0x208>)
1000a904:	4798      	blx	r3
1000a906:	e09c      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a908:	4b57      	ldr	r3, [pc, #348]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a90a:	781b      	ldrb	r3, [r3, #0]
1000a90c:	2b00      	cmp	r3, #0
1000a90e:	d000      	beq.n	1000a912 <sms_dualtimer1_fn+0xb6>
1000a910:	e097      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a912:	2201      	movs	r2, #1
1000a914:	4b55      	ldr	r3, [pc, #340]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a916:	701a      	strb	r2, [r3, #0]
1000a918:	e093      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a91a:	4b53      	ldr	r3, [pc, #332]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a91c:	781b      	ldrb	r3, [r3, #0]
1000a91e:	2b00      	cmp	r3, #0
1000a920:	d000      	beq.n	1000a924 <sms_dualtimer1_fn+0xc8>
1000a922:	e08e      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a924:	2201      	movs	r2, #1
1000a926:	4b51      	ldr	r3, [pc, #324]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a928:	701a      	strb	r2, [r3, #0]
1000a92a:	e08a      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000a92c:	4b46      	ldr	r3, [pc, #280]	; (1000aa48 <sms_dualtimer1_fn+0x1ec>)
1000a92e:	7b5b      	ldrb	r3, [r3, #13]
1000a930:	2b01      	cmp	r3, #1
1000a932:	d023      	beq.n	1000a97c <sms_dualtimer1_fn+0x120>
1000a934:	2b02      	cmp	r3, #2
1000a936:	d139      	bne.n	1000a9ac <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a938:	4b47      	ldr	r3, [pc, #284]	; (1000aa58 <sms_dualtimer1_fn+0x1fc>)
1000a93a:	781b      	ldrb	r3, [r3, #0]
1000a93c:	2b00      	cmp	r3, #0
1000a93e:	d115      	bne.n	1000a96c <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000a940:	4a46      	ldr	r2, [pc, #280]	; (1000aa5c <sms_dualtimer1_fn+0x200>)
1000a942:	7813      	ldrb	r3, [r2, #0]
1000a944:	3301      	adds	r3, #1
1000a946:	b2db      	uxtb	r3, r3
1000a948:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a94a:	2b0f      	cmp	r3, #15
1000a94c:	d905      	bls.n	1000a95a <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a94e:	2200      	movs	r2, #0
1000a950:	4b3c      	ldr	r3, [pc, #240]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a952:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a954:	4b42      	ldr	r3, [pc, #264]	; (1000aa60 <sms_dualtimer1_fn+0x204>)
1000a956:	4798      	blx	r3
1000a958:	e073      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a95a:	2201      	movs	r2, #1
1000a95c:	4b39      	ldr	r3, [pc, #228]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a95e:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a960:	2200      	movs	r2, #0
1000a962:	21fa      	movs	r1, #250	; 0xfa
1000a964:	2001      	movs	r0, #1
1000a966:	4b3f      	ldr	r3, [pc, #252]	; (1000aa64 <sms_dualtimer1_fn+0x208>)
1000a968:	4798      	blx	r3
1000a96a:	e06a      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a96c:	4b3e      	ldr	r3, [pc, #248]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a96e:	781b      	ldrb	r3, [r3, #0]
1000a970:	2b00      	cmp	r3, #0
1000a972:	d166      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a974:	2201      	movs	r2, #1
1000a976:	4b3d      	ldr	r3, [pc, #244]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a978:	701a      	strb	r2, [r3, #0]
1000a97a:	e062      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a97c:	4b36      	ldr	r3, [pc, #216]	; (1000aa58 <sms_dualtimer1_fn+0x1fc>)
1000a97e:	781b      	ldrb	r3, [r3, #0]
1000a980:	2b00      	cmp	r3, #0
1000a982:	d10b      	bne.n	1000a99c <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000a984:	2200      	movs	r2, #0
1000a986:	4b35      	ldr	r3, [pc, #212]	; (1000aa5c <sms_dualtimer1_fn+0x200>)
1000a988:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a98a:	3201      	adds	r2, #1
1000a98c:	4b2d      	ldr	r3, [pc, #180]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a98e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a990:	2200      	movs	r2, #0
1000a992:	2164      	movs	r1, #100	; 0x64
1000a994:	2001      	movs	r0, #1
1000a996:	4b33      	ldr	r3, [pc, #204]	; (1000aa64 <sms_dualtimer1_fn+0x208>)
1000a998:	4798      	blx	r3
1000a99a:	e052      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a99c:	4b32      	ldr	r3, [pc, #200]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a99e:	781b      	ldrb	r3, [r3, #0]
1000a9a0:	2b00      	cmp	r3, #0
1000a9a2:	d14e      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a9a4:	2201      	movs	r2, #1
1000a9a6:	4b31      	ldr	r3, [pc, #196]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a9a8:	701a      	strb	r2, [r3, #0]
1000a9aa:	e04a      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a9ac:	4b2e      	ldr	r3, [pc, #184]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a9ae:	781b      	ldrb	r3, [r3, #0]
1000a9b0:	2b00      	cmp	r3, #0
1000a9b2:	d146      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a9b4:	2201      	movs	r2, #1
1000a9b6:	4b2d      	ldr	r3, [pc, #180]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a9b8:	701a      	strb	r2, [r3, #0]
1000a9ba:	e042      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a9bc:	4b2a      	ldr	r3, [pc, #168]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000a9be:	781b      	ldrb	r3, [r3, #0]
1000a9c0:	2b00      	cmp	r3, #0
1000a9c2:	d13e      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a9c4:	2201      	movs	r2, #1
1000a9c6:	4b29      	ldr	r3, [pc, #164]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000a9c8:	701a      	strb	r2, [r3, #0]
1000a9ca:	e03a      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000a9cc:	4c1e      	ldr	r4, [pc, #120]	; (1000aa48 <sms_dualtimer1_fn+0x1ec>)
1000a9ce:	7b63      	ldrb	r3, [r4, #13]
1000a9d0:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a9d2:	4b1e      	ldr	r3, [pc, #120]	; (1000aa4c <sms_dualtimer1_fn+0x1f0>)
1000a9d4:	4798      	blx	r3
1000a9d6:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a9d8:	481d      	ldr	r0, [pc, #116]	; (1000aa50 <sms_dualtimer1_fn+0x1f4>)
1000a9da:	4b1e      	ldr	r3, [pc, #120]	; (1000aa54 <sms_dualtimer1_fn+0x1f8>)
1000a9dc:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000a9de:	89a2      	ldrh	r2, [r4, #12]
1000a9e0:	4b23      	ldr	r3, [pc, #140]	; (1000aa70 <sms_dualtimer1_fn+0x214>)
1000a9e2:	429a      	cmp	r2, r3
1000a9e4:	d112      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000a9e6:	4a1d      	ldr	r2, [pc, #116]	; (1000aa5c <sms_dualtimer1_fn+0x200>)
1000a9e8:	7813      	ldrb	r3, [r2, #0]
1000a9ea:	3301      	adds	r3, #1
1000a9ec:	b2db      	uxtb	r3, r3
1000a9ee:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000a9f0:	2b09      	cmp	r3, #9
1000a9f2:	d902      	bls.n	1000a9fa <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000a9f4:	4b1f      	ldr	r3, [pc, #124]	; (1000aa74 <sms_dualtimer1_fn+0x218>)
1000a9f6:	4798      	blx	r3
1000a9f8:	e023      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a9fa:	2202      	movs	r2, #2
1000a9fc:	4b11      	ldr	r3, [pc, #68]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000a9fe:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000aa00:	2200      	movs	r2, #0
1000aa02:	21fa      	movs	r1, #250	; 0xfa
1000aa04:	2001      	movs	r0, #1
1000aa06:	4b17      	ldr	r3, [pc, #92]	; (1000aa64 <sms_dualtimer1_fn+0x208>)
1000aa08:	4798      	blx	r3
1000aa0a:	e01a      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000aa0c:	232b      	movs	r3, #43	; 0x2b
1000aa0e:	4a1a      	ldr	r2, [pc, #104]	; (1000aa78 <sms_dualtimer1_fn+0x21c>)
1000aa10:	5cd3      	ldrb	r3, [r2, r3]
1000aa12:	2b01      	cmp	r3, #1
1000aa14:	d103      	bne.n	1000aa1e <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000aa16:	2101      	movs	r1, #1
1000aa18:	2000      	movs	r0, #0
1000aa1a:	4b18      	ldr	r3, [pc, #96]	; (1000aa7c <sms_dualtimer1_fn+0x220>)
1000aa1c:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000aa1e:	2200      	movs	r2, #0
1000aa20:	4b08      	ldr	r3, [pc, #32]	; (1000aa44 <sms_dualtimer1_fn+0x1e8>)
1000aa22:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000aa24:	4b10      	ldr	r3, [pc, #64]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000aa26:	781b      	ldrb	r3, [r3, #0]
1000aa28:	2b00      	cmp	r3, #0
1000aa2a:	d10a      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000aa2c:	3201      	adds	r2, #1
1000aa2e:	4b0f      	ldr	r3, [pc, #60]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000aa30:	701a      	strb	r2, [r3, #0]
1000aa32:	e006      	b.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000aa34:	4b0c      	ldr	r3, [pc, #48]	; (1000aa68 <sms_dualtimer1_fn+0x20c>)
1000aa36:	781b      	ldrb	r3, [r3, #0]
1000aa38:	2b00      	cmp	r3, #0
1000aa3a:	d102      	bne.n	1000aa42 <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000aa3c:	2201      	movs	r2, #1
1000aa3e:	4b0b      	ldr	r3, [pc, #44]	; (1000aa6c <sms_dualtimer1_fn+0x210>)
1000aa40:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000aa42:	bd10      	pop	{r4, pc}
1000aa44:	1001a0cc 	.word	0x1001a0cc
1000aa48:	1001a1bc 	.word	0x1001a1bc
1000aa4c:	100090b5 	.word	0x100090b5
1000aa50:	10017750 	.word	0x10017750
1000aa54:	1000934d 	.word	0x1000934d
1000aa58:	1001a1ac 	.word	0x1001a1ac
1000aa5c:	1001a2fe 	.word	0x1001a2fe
1000aa60:	10008a15 	.word	0x10008a15
1000aa64:	1000a7d1 	.word	0x1000a7d1
1000aa68:	1001a2db 	.word	0x1001a2db
1000aa6c:	1001a1a9 	.word	0x1001a1a9
1000aa70:	00000303 	.word	0x00000303
1000aa74:	10008a2d 	.word	0x10008a2d
1000aa78:	1001a240 	.word	0x1001a240
1000aa7c:	1000a569 	.word	0x1000a569

1000aa80 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000aa80:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000aa82:	483a      	ldr	r0, [pc, #232]	; (1000ab6c <sms_dualtimer2_fn+0xec>)
1000aa84:	4b3a      	ldr	r3, [pc, #232]	; (1000ab70 <sms_dualtimer2_fn+0xf0>)
1000aa86:	4798      	blx	r3
    switch(timer2_current_mode) {
1000aa88:	4b3a      	ldr	r3, [pc, #232]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000aa8a:	781b      	ldrb	r3, [r3, #0]
1000aa8c:	b2db      	uxtb	r3, r3
1000aa8e:	2b02      	cmp	r3, #2
1000aa90:	d028      	beq.n	1000aae4 <sms_dualtimer2_fn+0x64>
1000aa92:	2b03      	cmp	r3, #3
1000aa94:	d047      	beq.n	1000ab26 <sms_dualtimer2_fn+0xa6>
1000aa96:	2b01      	cmp	r3, #1
1000aa98:	d166      	bne.n	1000ab68 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000aa9a:	2200      	movs	r2, #0
1000aa9c:	4b35      	ldr	r3, [pc, #212]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000aa9e:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000aaa0:	4b35      	ldr	r3, [pc, #212]	; (1000ab78 <sms_dualtimer2_fn+0xf8>)
1000aaa2:	781b      	ldrb	r3, [r3, #0]
1000aaa4:	2b22      	cmp	r3, #34	; 0x22
1000aaa6:	d107      	bne.n	1000aab8 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000aaa8:	4b34      	ldr	r3, [pc, #208]	; (1000ab7c <sms_dualtimer2_fn+0xfc>)
1000aaaa:	781b      	ldrb	r3, [r3, #0]
1000aaac:	2b00      	cmp	r3, #0
1000aaae:	d15b      	bne.n	1000ab68 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000aab0:	3201      	adds	r2, #1
1000aab2:	4b33      	ldr	r3, [pc, #204]	; (1000ab80 <sms_dualtimer2_fn+0x100>)
1000aab4:	701a      	strb	r2, [r3, #0]
1000aab6:	e057      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000aab8:	4a32      	ldr	r2, [pc, #200]	; (1000ab84 <sms_dualtimer2_fn+0x104>)
1000aaba:	7813      	ldrb	r3, [r2, #0]
1000aabc:	3301      	adds	r3, #1
1000aabe:	b2db      	uxtb	r3, r3
1000aac0:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000aac2:	2b00      	cmp	r3, #0
1000aac4:	d006      	beq.n	1000aad4 <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000aac6:	2200      	movs	r2, #0
1000aac8:	4b2a      	ldr	r3, [pc, #168]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000aaca:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000aacc:	3222      	adds	r2, #34	; 0x22
1000aace:	4b2a      	ldr	r3, [pc, #168]	; (1000ab78 <sms_dualtimer2_fn+0xf8>)
1000aad0:	701a      	strb	r2, [r3, #0]
1000aad2:	e049      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000aad4:	2201      	movs	r2, #1
1000aad6:	4b27      	ldr	r3, [pc, #156]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000aad8:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000aada:	2164      	movs	r1, #100	; 0x64
1000aadc:	2001      	movs	r0, #1
1000aade:	4b2a      	ldr	r3, [pc, #168]	; (1000ab88 <sms_dualtimer2_fn+0x108>)
1000aae0:	4798      	blx	r3
1000aae2:	e041      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000aae4:	2200      	movs	r2, #0
1000aae6:	4b23      	ldr	r3, [pc, #140]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000aae8:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000aaea:	4a28      	ldr	r2, [pc, #160]	; (1000ab8c <sms_dualtimer2_fn+0x10c>)
1000aaec:	7813      	ldrb	r3, [r2, #0]
1000aaee:	3301      	adds	r3, #1
1000aaf0:	b2db      	uxtb	r3, r3
1000aaf2:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000aaf4:	7813      	ldrb	r3, [r2, #0]
1000aaf6:	b2db      	uxtb	r3, r3
1000aaf8:	2b07      	cmp	r3, #7
1000aafa:	d908      	bls.n	1000ab0e <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000aafc:	2016      	movs	r0, #22
1000aafe:	4b24      	ldr	r3, [pc, #144]	; (1000ab90 <sms_dualtimer2_fn+0x110>)
1000ab00:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000ab02:	4b24      	ldr	r3, [pc, #144]	; (1000ab94 <sms_dualtimer2_fn+0x114>)
1000ab04:	4798      	blx	r3
            ulp_ready = true;
1000ab06:	2201      	movs	r2, #1
1000ab08:	4b1d      	ldr	r3, [pc, #116]	; (1000ab80 <sms_dualtimer2_fn+0x100>)
1000ab0a:	701a      	strb	r2, [r3, #0]
1000ab0c:	e02c      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ab0e:	2016      	movs	r0, #22
1000ab10:	4b21      	ldr	r3, [pc, #132]	; (1000ab98 <sms_dualtimer2_fn+0x118>)
1000ab12:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000ab14:	2202      	movs	r2, #2
1000ab16:	4b17      	ldr	r3, [pc, #92]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000ab18:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000ab1a:	3a01      	subs	r2, #1
1000ab1c:	2164      	movs	r1, #100	; 0x64
1000ab1e:	2001      	movs	r0, #1
1000ab20:	4b19      	ldr	r3, [pc, #100]	; (1000ab88 <sms_dualtimer2_fn+0x108>)
1000ab22:	4798      	blx	r3
1000ab24:	e020      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000ab26:	2200      	movs	r2, #0
1000ab28:	4b12      	ldr	r3, [pc, #72]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000ab2a:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ab2c:	4a17      	ldr	r2, [pc, #92]	; (1000ab8c <sms_dualtimer2_fn+0x10c>)
1000ab2e:	7813      	ldrb	r3, [r2, #0]
1000ab30:	3301      	adds	r3, #1
1000ab32:	b2db      	uxtb	r3, r3
1000ab34:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000ab36:	7813      	ldrb	r3, [r2, #0]
1000ab38:	b2db      	uxtb	r3, r3
1000ab3a:	2b03      	cmp	r3, #3
1000ab3c:	d908      	bls.n	1000ab50 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ab3e:	2016      	movs	r0, #22
1000ab40:	4b13      	ldr	r3, [pc, #76]	; (1000ab90 <sms_dualtimer2_fn+0x110>)
1000ab42:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000ab44:	4b15      	ldr	r3, [pc, #84]	; (1000ab9c <sms_dualtimer2_fn+0x11c>)
1000ab46:	4798      	blx	r3
            ulp_ready = true;
1000ab48:	2201      	movs	r2, #1
1000ab4a:	4b0d      	ldr	r3, [pc, #52]	; (1000ab80 <sms_dualtimer2_fn+0x100>)
1000ab4c:	701a      	strb	r2, [r3, #0]
1000ab4e:	e00b      	b.n	1000ab68 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ab50:	2016      	movs	r0, #22
1000ab52:	4b11      	ldr	r3, [pc, #68]	; (1000ab98 <sms_dualtimer2_fn+0x118>)
1000ab54:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000ab56:	2203      	movs	r2, #3
1000ab58:	4b06      	ldr	r3, [pc, #24]	; (1000ab74 <sms_dualtimer2_fn+0xf4>)
1000ab5a:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000ab5c:	3a02      	subs	r2, #2
1000ab5e:	21c8      	movs	r1, #200	; 0xc8
1000ab60:	0049      	lsls	r1, r1, #1
1000ab62:	2001      	movs	r0, #1
1000ab64:	4b08      	ldr	r3, [pc, #32]	; (1000ab88 <sms_dualtimer2_fn+0x108>)
1000ab66:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}
1000ab68:	bd10      	pop	{r4, pc}
1000ab6a:	46c0      	nop			; (mov r8, r8)
1000ab6c:	10017764 	.word	0x10017764
1000ab70:	1000934d 	.word	0x1000934d
1000ab74:	1001a2db 	.word	0x1001a2db
1000ab78:	1001a1ac 	.word	0x1001a1ac
1000ab7c:	1001a0cc 	.word	0x1001a0cc
1000ab80:	1001a1a9 	.word	0x1001a1a9
1000ab84:	1001a2cd 	.word	0x1001a2cd
1000ab88:	1000a7d1 	.word	0x1000a7d1
1000ab8c:	1001a304 	.word	0x1001a304
1000ab90:	1000a281 	.word	0x1000a281
1000ab94:	10008b9d 	.word	0x10008b9d
1000ab98:	1000a2c1 	.word	0x1000a2c1
1000ab9c:	1000e63d 	.word	0x1000e63d

1000aba0 <delay_ms>:

void delay_ms(uint32_t delay) {
1000aba0:	b510      	push	{r4, lr}
1000aba2:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000aba4:	2201      	movs	r2, #1
1000aba6:	2001      	movs	r0, #1
1000aba8:	4b05      	ldr	r3, [pc, #20]	; (1000abc0 <delay_ms+0x20>)
1000abaa:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000abac:	4c05      	ldr	r4, [pc, #20]	; (1000abc4 <delay_ms+0x24>)
1000abae:	2001      	movs	r0, #1
1000abb0:	47a0      	blx	r4
1000abb2:	2800      	cmp	r0, #0
1000abb4:	d1fb      	bne.n	1000abae <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000abb6:	3001      	adds	r0, #1
1000abb8:	4b03      	ldr	r3, [pc, #12]	; (1000abc8 <delay_ms+0x28>)
1000abba:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000abbc:	bd10      	pop	{r4, pc}
1000abbe:	46c0      	nop			; (mov r8, r8)
1000abc0:	1000a7d1 	.word	0x1000a7d1
1000abc4:	1000af45 	.word	0x1000af45
1000abc8:	1000afa5 	.word	0x1000afa5

1000abcc <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000abcc:	230c      	movs	r3, #12
1000abce:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000abd0:	2300      	movs	r3, #0
1000abd2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000abd4:	7083      	strb	r3, [r0, #2]
}
1000abd6:	4770      	bx	lr

1000abd8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000abd8:	2301      	movs	r3, #1
1000abda:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000abdc:	2300      	movs	r3, #0
1000abde:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000abe0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000abe2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000abe4:	3381      	adds	r3, #129	; 0x81
1000abe6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000abe8:	3b77      	subs	r3, #119	; 0x77
1000abea:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000abec:	3301      	adds	r3, #1
1000abee:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000abf0:	3301      	adds	r3, #1
1000abf2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000abf4:	3301      	adds	r3, #1
1000abf6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000abf8:	3b0b      	subs	r3, #11
1000abfa:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000abfc:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000abfe:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000ac00:	6243      	str	r3, [r0, #36]	; 0x24
};
1000ac02:	4770      	bx	lr

1000ac04 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000ac04:	b530      	push	{r4, r5, lr}
1000ac06:	b083      	sub	sp, #12
1000ac08:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000ac0a:	780b      	ldrb	r3, [r1, #0]
1000ac0c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000ac0e:	784b      	ldrb	r3, [r1, #1]
1000ac10:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000ac12:	788b      	ldrb	r3, [r1, #2]
1000ac14:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ac16:	ad01      	add	r5, sp, #4
1000ac18:	0028      	movs	r0, r5
1000ac1a:	4b07      	ldr	r3, [pc, #28]	; (1000ac38 <spi_attach_slave+0x34>)
1000ac1c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ac1e:	2301      	movs	r3, #1
1000ac20:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000ac22:	7820      	ldrb	r0, [r4, #0]
1000ac24:	0029      	movs	r1, r5
1000ac26:	4b05      	ldr	r3, [pc, #20]	; (1000ac3c <spi_attach_slave+0x38>)
1000ac28:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000ac2a:	7820      	ldrb	r0, [r4, #0]
1000ac2c:	2101      	movs	r1, #1
1000ac2e:	4b04      	ldr	r3, [pc, #16]	; (1000ac40 <spi_attach_slave+0x3c>)
1000ac30:	4798      	blx	r3
}
1000ac32:	b003      	add	sp, #12
1000ac34:	bd30      	pop	{r4, r5, pc}
1000ac36:	46c0      	nop			; (mov r8, r8)
1000ac38:	1000b235 	.word	0x1000b235
1000ac3c:	1000b245 	.word	0x1000b245
1000ac40:	1000b49d 	.word	0x1000b49d

1000ac44 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000ac44:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000ac46:	2201      	movs	r2, #1
1000ac48:	761a      	strb	r2, [r3, #24]
}
1000ac4a:	4770      	bx	lr

1000ac4c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000ac4c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000ac4e:	2300      	movs	r3, #0
1000ac50:	6802      	ldr	r2, [r0, #0]
1000ac52:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000ac54:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000ac56:	4a0d      	ldr	r2, [pc, #52]	; (1000ac8c <spi_disable+0x40>)
1000ac58:	4293      	cmp	r3, r2
1000ac5a:	d109      	bne.n	1000ac70 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000ac5c:	2041      	movs	r0, #65	; 0x41
1000ac5e:	4c0c      	ldr	r4, [pc, #48]	; (1000ac90 <spi_disable+0x44>)
1000ac60:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000ac62:	2026      	movs	r0, #38	; 0x26
1000ac64:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000ac66:	2038      	movs	r0, #56	; 0x38
1000ac68:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000ac6a:	2001      	movs	r0, #1
1000ac6c:	47a0      	blx	r4
1000ac6e:	e00b      	b.n	1000ac88 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000ac70:	4a08      	ldr	r2, [pc, #32]	; (1000ac94 <spi_disable+0x48>)
1000ac72:	4293      	cmp	r3, r2
1000ac74:	d108      	bne.n	1000ac88 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000ac76:	2042      	movs	r0, #66	; 0x42
1000ac78:	4c05      	ldr	r4, [pc, #20]	; (1000ac90 <spi_disable+0x44>)
1000ac7a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000ac7c:	2027      	movs	r0, #39	; 0x27
1000ac7e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000ac80:	2039      	movs	r0, #57	; 0x39
1000ac82:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000ac84:	2002      	movs	r0, #2
1000ac86:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000ac88:	bd10      	pop	{r4, pc}
1000ac8a:	46c0      	nop			; (mov r8, r8)
1000ac8c:	40006000 	.word	0x40006000
1000ac90:	1000bc35 	.word	0x1000bc35
1000ac94:	40007000 	.word	0x40007000

1000ac98 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000ac98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000ac9a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000ac9c:	4b09      	ldr	r3, [pc, #36]	; (1000acc4 <spi_reset+0x2c>)
1000ac9e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000aca0:	4b09      	ldr	r3, [pc, #36]	; (1000acc8 <spi_reset+0x30>)
1000aca2:	429c      	cmp	r4, r3
1000aca4:	d105      	bne.n	1000acb2 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000aca6:	2001      	movs	r0, #1
1000aca8:	4c08      	ldr	r4, [pc, #32]	; (1000accc <spi_reset+0x34>)
1000acaa:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000acac:	2038      	movs	r0, #56	; 0x38
1000acae:	47a0      	blx	r4
1000acb0:	e007      	b.n	1000acc2 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000acb2:	4b07      	ldr	r3, [pc, #28]	; (1000acd0 <spi_reset+0x38>)
1000acb4:	429c      	cmp	r4, r3
1000acb6:	d104      	bne.n	1000acc2 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000acb8:	2002      	movs	r0, #2
1000acba:	4c04      	ldr	r4, [pc, #16]	; (1000accc <spi_reset+0x34>)
1000acbc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000acbe:	2039      	movs	r0, #57	; 0x39
1000acc0:	47a0      	blx	r4
	}
}
1000acc2:	bd10      	pop	{r4, pc}
1000acc4:	1000ac4d 	.word	0x1000ac4d
1000acc8:	40006000 	.word	0x40006000
1000accc:	1000bfa1 	.word	0x1000bfa1
1000acd0:	40007000 	.word	0x40007000

1000acd4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000acd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000acd6:	465f      	mov	r7, fp
1000acd8:	4646      	mov	r6, r8
1000acda:	b4c0      	push	{r6, r7}
1000acdc:	b083      	sub	sp, #12
1000acde:	0006      	movs	r6, r0
1000ace0:	4688      	mov	r8, r1
1000ace2:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000ace4:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000ace6:	7e0b      	ldrb	r3, [r1, #24]
1000ace8:	07db      	lsls	r3, r3, #31
1000acea:	d501      	bpl.n	1000acf0 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000acec:	2300      	movs	r3, #0
1000acee:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000acf0:	0030      	movs	r0, r6
1000acf2:	4b4a      	ldr	r3, [pc, #296]	; (1000ae1c <spi_init+0x148>)
1000acf4:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000acf6:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000acf8:	4a49      	ldr	r2, [pc, #292]	; (1000ae20 <spi_init+0x14c>)
1000acfa:	4293      	cmp	r3, r2
1000acfc:	d109      	bne.n	1000ad12 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000acfe:	2041      	movs	r0, #65	; 0x41
1000ad00:	4c48      	ldr	r4, [pc, #288]	; (1000ae24 <spi_init+0x150>)
1000ad02:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000ad04:	2026      	movs	r0, #38	; 0x26
1000ad06:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000ad08:	2038      	movs	r0, #56	; 0x38
1000ad0a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000ad0c:	2001      	movs	r0, #1
1000ad0e:	47a0      	blx	r4
1000ad10:	e00b      	b.n	1000ad2a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000ad12:	4a45      	ldr	r2, [pc, #276]	; (1000ae28 <spi_init+0x154>)
1000ad14:	4293      	cmp	r3, r2
1000ad16:	d108      	bne.n	1000ad2a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000ad18:	2042      	movs	r0, #66	; 0x42
1000ad1a:	4c42      	ldr	r4, [pc, #264]	; (1000ae24 <spi_init+0x150>)
1000ad1c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000ad1e:	2027      	movs	r0, #39	; 0x27
1000ad20:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000ad22:	2039      	movs	r0, #57	; 0x39
1000ad24:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000ad26:	2002      	movs	r0, #2
1000ad28:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ad2a:	a801      	add	r0, sp, #4
1000ad2c:	4b3f      	ldr	r3, [pc, #252]	; (1000ae2c <spi_init+0x158>)
1000ad2e:	4798      	blx	r3
1000ad30:	002c      	movs	r4, r5
1000ad32:	3408      	adds	r4, #8
1000ad34:	2318      	movs	r3, #24
1000ad36:	469b      	mov	fp, r3
1000ad38:	44ab      	add	fp, r5
1000ad3a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000ad3c:	6820      	ldr	r0, [r4, #0]
1000ad3e:	1c43      	adds	r3, r0, #1
1000ad40:	d011      	beq.n	1000ad66 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000ad42:	782b      	ldrb	r3, [r5, #0]
1000ad44:	2b01      	cmp	r3, #1
1000ad46:	d102      	bne.n	1000ad4e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ad48:	466a      	mov	r2, sp
1000ad4a:	7113      	strb	r3, [r2, #4]
1000ad4c:	e003      	b.n	1000ad56 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000ad4e:	2b00      	cmp	r3, #0
1000ad50:	d101      	bne.n	1000ad56 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000ad52:	466a      	mov	r2, sp
1000ad54:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000ad56:	b2c0      	uxtb	r0, r0
1000ad58:	a901      	add	r1, sp, #4
1000ad5a:	4b35      	ldr	r3, [pc, #212]	; (1000ae30 <spi_init+0x15c>)
1000ad5c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000ad5e:	8a39      	ldrh	r1, [r7, #16]
1000ad60:	7838      	ldrb	r0, [r7, #0]
1000ad62:	4b34      	ldr	r3, [pc, #208]	; (1000ae34 <spi_init+0x160>)
1000ad64:	4798      	blx	r3
1000ad66:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000ad68:	455c      	cmp	r4, fp
1000ad6a:	d1e6      	bne.n	1000ad3a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000ad6c:	78eb      	ldrb	r3, [r5, #3]
1000ad6e:	4642      	mov	r2, r8
1000ad70:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000ad72:	782b      	ldrb	r3, [r5, #0]
1000ad74:	2b01      	cmp	r3, #1
1000ad76:	d100      	bne.n	1000ad7a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000ad78:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000ad7a:	782b      	ldrb	r3, [r5, #0]
1000ad7c:	2b00      	cmp	r3, #0
1000ad7e:	d101      	bne.n	1000ad84 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000ad80:	4642      	mov	r2, r8
1000ad82:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000ad84:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000ad86:	782a      	ldrb	r2, [r5, #0]
1000ad88:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000ad8a:	782a      	ldrb	r2, [r5, #0]
1000ad8c:	2a01      	cmp	r2, #1
1000ad8e:	d101      	bne.n	1000ad94 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000ad90:	792a      	ldrb	r2, [r5, #4]
1000ad92:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000ad94:	786a      	ldrb	r2, [r5, #1]
1000ad96:	2a04      	cmp	r2, #4
1000ad98:	d104      	bne.n	1000ada4 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000ad9a:	2124      	movs	r1, #36	; 0x24
1000ad9c:	5c58      	ldrb	r0, [r3, r1]
1000ad9e:	4302      	orrs	r2, r0
1000ada0:	545a      	strb	r2, [r3, r1]
1000ada2:	e004      	b.n	1000adae <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000ada4:	2124      	movs	r1, #36	; 0x24
1000ada6:	5c5a      	ldrb	r2, [r3, r1]
1000ada8:	2004      	movs	r0, #4
1000adaa:	4382      	bics	r2, r0
1000adac:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000adae:	78aa      	ldrb	r2, [r5, #2]
1000adb0:	2a01      	cmp	r2, #1
1000adb2:	d01a      	beq.n	1000adea <spi_init+0x116>
1000adb4:	2a00      	cmp	r2, #0
1000adb6:	d004      	beq.n	1000adc2 <spi_init+0xee>
1000adb8:	2a02      	cmp	r2, #2
1000adba:	d00c      	beq.n	1000add6 <spi_init+0x102>
1000adbc:	2a03      	cmp	r2, #3
1000adbe:	d01e      	beq.n	1000adfe <spi_init+0x12a>
1000adc0:	e026      	b.n	1000ae10 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000adc2:	2224      	movs	r2, #36	; 0x24
1000adc4:	5c99      	ldrb	r1, [r3, r2]
1000adc6:	2002      	movs	r0, #2
1000adc8:	4381      	bics	r1, r0
1000adca:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000adcc:	5c99      	ldrb	r1, [r3, r2]
1000adce:	3801      	subs	r0, #1
1000add0:	4381      	bics	r1, r0
1000add2:	5499      	strb	r1, [r3, r2]
1000add4:	e01c      	b.n	1000ae10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000add6:	2224      	movs	r2, #36	; 0x24
1000add8:	5c98      	ldrb	r0, [r3, r2]
1000adda:	2102      	movs	r1, #2
1000addc:	4301      	orrs	r1, r0
1000adde:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000ade0:	5c99      	ldrb	r1, [r3, r2]
1000ade2:	2001      	movs	r0, #1
1000ade4:	4381      	bics	r1, r0
1000ade6:	5499      	strb	r1, [r3, r2]
1000ade8:	e012      	b.n	1000ae10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000adea:	2224      	movs	r2, #36	; 0x24
1000adec:	5c99      	ldrb	r1, [r3, r2]
1000adee:	2002      	movs	r0, #2
1000adf0:	4381      	bics	r1, r0
1000adf2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000adf4:	5c98      	ldrb	r0, [r3, r2]
1000adf6:	2101      	movs	r1, #1
1000adf8:	4301      	orrs	r1, r0
1000adfa:	5499      	strb	r1, [r3, r2]
1000adfc:	e008      	b.n	1000ae10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000adfe:	2224      	movs	r2, #36	; 0x24
1000ae00:	5c98      	ldrb	r0, [r3, r2]
1000ae02:	2102      	movs	r1, #2
1000ae04:	4301      	orrs	r1, r0
1000ae06:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000ae08:	5c98      	ldrb	r0, [r3, r2]
1000ae0a:	2101      	movs	r1, #1
1000ae0c:	4301      	orrs	r1, r0
1000ae0e:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000ae10:	2000      	movs	r0, #0
1000ae12:	b003      	add	sp, #12
1000ae14:	bc0c      	pop	{r2, r3}
1000ae16:	4690      	mov	r8, r2
1000ae18:	469b      	mov	fp, r3
1000ae1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae1c:	1000ac99 	.word	0x1000ac99
1000ae20:	40006000 	.word	0x40006000
1000ae24:	1000b8d9 	.word	0x1000b8d9
1000ae28:	40007000 	.word	0x40007000
1000ae2c:	1000b235 	.word	0x1000b235
1000ae30:	1000b245 	.word	0x1000b245
1000ae34:	1000b529 	.word	0x1000b529

1000ae38 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae3a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000ae3c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000ae3e:	2600      	movs	r6, #0
1000ae40:	466d      	mov	r5, sp
1000ae42:	71ee      	strb	r6, [r5, #7]
1000ae44:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000ae46:	2c00      	cmp	r4, #0
1000ae48:	d034      	beq.n	1000aeb4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000ae4a:	2900      	cmp	r1, #0
1000ae4c:	d104      	bne.n	1000ae58 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000ae4e:	0029      	movs	r1, r5
1000ae50:	7980      	ldrb	r0, [r0, #6]
1000ae52:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000ae54:	2701      	movs	r7, #1
1000ae56:	e00b      	b.n	1000ae70 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000ae58:	2a00      	cmp	r2, #0
1000ae5a:	d005      	beq.n	1000ae68 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ae5c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000ae5e:	2b00      	cmp	r3, #0
1000ae60:	d029      	beq.n	1000aeb6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000ae62:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ae64:	2700      	movs	r7, #0
1000ae66:	e003      	b.n	1000ae70 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000ae68:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ae6a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000ae6c:	466a      	mov	r2, sp
1000ae6e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000ae70:	2528      	movs	r5, #40	; 0x28
1000ae72:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000ae74:	07c0      	lsls	r0, r0, #31
1000ae76:	d4fc      	bmi.n	1000ae72 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000ae78:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000ae7a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000ae7c:	2b00      	cmp	r3, #0
1000ae7e:	d014      	beq.n	1000aeaa <spi_transceive_buffer_wait+0x72>
1000ae80:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000ae82:	4278      	negs	r0, r7
1000ae84:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000ae86:	4270      	negs	r0, r6
1000ae88:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000ae8a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000ae8c:	07c0      	lsls	r0, r0, #31
1000ae8e:	d5fc      	bpl.n	1000ae8a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000ae90:	7808      	ldrb	r0, [r1, #0]
1000ae92:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000ae94:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000ae96:	07c0      	lsls	r0, r0, #31
1000ae98:	d5fc      	bpl.n	1000ae94 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000ae9a:	7920      	ldrb	r0, [r4, #4]
1000ae9c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000ae9e:	3501      	adds	r5, #1
1000aea0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000aea2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000aea4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000aea6:	42ab      	cmp	r3, r5
1000aea8:	d1ef      	bne.n	1000ae8a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000aeaa:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000aeac:	06db      	lsls	r3, r3, #27
1000aeae:	d5fc      	bpl.n	1000aeaa <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000aeb0:	2000      	movs	r0, #0
1000aeb2:	e000      	b.n	1000aeb6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000aeb4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000aeb6:	b003      	add	sp, #12
1000aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aeba:	46c0      	nop			; (mov r8, r8)

1000aebc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000aebc:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000aebe:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000aec0:	2a00      	cmp	r2, #0
1000aec2:	d003      	beq.n	1000aecc <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000aec4:	2100      	movs	r1, #0
1000aec6:	4b04      	ldr	r3, [pc, #16]	; (1000aed8 <spi_select_slave+0x1c>)
1000aec8:	4798      	blx	r3
1000aeca:	e002      	b.n	1000aed2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000aecc:	2101      	movs	r1, #1
1000aece:	4b02      	ldr	r3, [pc, #8]	; (1000aed8 <spi_select_slave+0x1c>)
1000aed0:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000aed2:	2000      	movs	r0, #0
1000aed4:	bd10      	pop	{r4, pc}
1000aed6:	46c0      	nop			; (mov r8, r8)
1000aed8:	1000b49d 	.word	0x1000b49d

1000aedc <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000aedc:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000aede:	4b0d      	ldr	r3, [pc, #52]	; (1000af14 <dualtimer_isr_handler+0x38>)
1000aee0:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000aee2:	2b00      	cmp	r3, #0
1000aee4:	d007      	beq.n	1000aef6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000aee6:	2201      	movs	r2, #1
1000aee8:	4b0a      	ldr	r3, [pc, #40]	; (1000af14 <dualtimer_isr_handler+0x38>)
1000aeea:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000aeec:	4b0a      	ldr	r3, [pc, #40]	; (1000af18 <dualtimer_isr_handler+0x3c>)
1000aeee:	681b      	ldr	r3, [r3, #0]
1000aef0:	2b00      	cmp	r3, #0
1000aef2:	d000      	beq.n	1000aef6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000aef4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000aef6:	2334      	movs	r3, #52	; 0x34
1000aef8:	4a06      	ldr	r2, [pc, #24]	; (1000af14 <dualtimer_isr_handler+0x38>)
1000aefa:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000aefc:	2b00      	cmp	r3, #0
1000aefe:	d007      	beq.n	1000af10 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000af00:	2101      	movs	r1, #1
1000af02:	232c      	movs	r3, #44	; 0x2c
1000af04:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000af06:	4b05      	ldr	r3, [pc, #20]	; (1000af1c <dualtimer_isr_handler+0x40>)
1000af08:	681b      	ldr	r3, [r3, #0]
1000af0a:	2b00      	cmp	r3, #0
1000af0c:	d000      	beq.n	1000af10 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000af0e:	4798      	blx	r3
	}
}
1000af10:	bd10      	pop	{r4, pc}
1000af12:	46c0      	nop			; (mov r8, r8)
1000af14:	40001000 	.word	0x40001000
1000af18:	10018628 	.word	0x10018628
1000af1c:	1001862c 	.word	0x1001862c

1000af20 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000af20:	2301      	movs	r3, #1
1000af22:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000af24:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000af26:	2202      	movs	r2, #2
1000af28:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000af2a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000af2c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000af2e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000af30:	2200      	movs	r2, #0
1000af32:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000af34:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000af36:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000af38:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000af3a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000af3c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000af3e:	7602      	strb	r2, [r0, #24]
}
1000af40:	4770      	bx	lr
1000af42:	46c0      	nop			; (mov r8, r8)

1000af44 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000af44:	2800      	cmp	r0, #0
1000af46:	d102      	bne.n	1000af4e <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000af48:	4b02      	ldr	r3, [pc, #8]	; (1000af54 <dualtimer_get_value+0x10>)
1000af4a:	6858      	ldr	r0, [r3, #4]
1000af4c:	e001      	b.n	1000af52 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000af4e:	4b01      	ldr	r3, [pc, #4]	; (1000af54 <dualtimer_get_value+0x10>)
1000af50:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000af52:	4770      	bx	lr
1000af54:	40001000 	.word	0x40001000

1000af58 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000af58:	2800      	cmp	r0, #0
1000af5a:	d107      	bne.n	1000af6c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000af5c:	2900      	cmp	r1, #0
1000af5e:	d102      	bne.n	1000af66 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000af60:	4b06      	ldr	r3, [pc, #24]	; (1000af7c <dualtimer_set_counter+0x24>)
1000af62:	601a      	str	r2, [r3, #0]
1000af64:	e009      	b.n	1000af7a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000af66:	4b05      	ldr	r3, [pc, #20]	; (1000af7c <dualtimer_set_counter+0x24>)
1000af68:	619a      	str	r2, [r3, #24]
1000af6a:	e006      	b.n	1000af7a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000af6c:	2900      	cmp	r1, #0
1000af6e:	d102      	bne.n	1000af76 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000af70:	4b02      	ldr	r3, [pc, #8]	; (1000af7c <dualtimer_set_counter+0x24>)
1000af72:	621a      	str	r2, [r3, #32]
1000af74:	e001      	b.n	1000af7a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000af76:	4b01      	ldr	r3, [pc, #4]	; (1000af7c <dualtimer_set_counter+0x24>)
1000af78:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000af7a:	4770      	bx	lr
1000af7c:	40001000 	.word	0x40001000

1000af80 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000af80:	2800      	cmp	r0, #0
1000af82:	d105      	bne.n	1000af90 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000af84:	4a06      	ldr	r2, [pc, #24]	; (1000afa0 <dualtimer_enable+0x20>)
1000af86:	7a11      	ldrb	r1, [r2, #8]
1000af88:	2380      	movs	r3, #128	; 0x80
1000af8a:	430b      	orrs	r3, r1
1000af8c:	7213      	strb	r3, [r2, #8]
1000af8e:	e005      	b.n	1000af9c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000af90:	4903      	ldr	r1, [pc, #12]	; (1000afa0 <dualtimer_enable+0x20>)
1000af92:	2228      	movs	r2, #40	; 0x28
1000af94:	5c88      	ldrb	r0, [r1, r2]
1000af96:	2380      	movs	r3, #128	; 0x80
1000af98:	4303      	orrs	r3, r0
1000af9a:	548b      	strb	r3, [r1, r2]
	}
}
1000af9c:	4770      	bx	lr
1000af9e:	46c0      	nop			; (mov r8, r8)
1000afa0:	40001000 	.word	0x40001000

1000afa4 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000afa4:	2800      	cmp	r0, #0
1000afa6:	d105      	bne.n	1000afb4 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000afa8:	4a06      	ldr	r2, [pc, #24]	; (1000afc4 <dualtimer_disable+0x20>)
1000afaa:	7a11      	ldrb	r1, [r2, #8]
1000afac:	237f      	movs	r3, #127	; 0x7f
1000afae:	400b      	ands	r3, r1
1000afb0:	7213      	strb	r3, [r2, #8]
1000afb2:	e005      	b.n	1000afc0 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000afb4:	4903      	ldr	r1, [pc, #12]	; (1000afc4 <dualtimer_disable+0x20>)
1000afb6:	2228      	movs	r2, #40	; 0x28
1000afb8:	5c88      	ldrb	r0, [r1, r2]
1000afba:	237f      	movs	r3, #127	; 0x7f
1000afbc:	4003      	ands	r3, r0
1000afbe:	548b      	strb	r3, [r1, r2]
	}
}
1000afc0:	4770      	bx	lr
1000afc2:	46c0      	nop			; (mov r8, r8)
1000afc4:	40001000 	.word	0x40001000

1000afc8 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000afc8:	b570      	push	{r4, r5, r6, lr}
1000afca:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000afcc:	2004      	movs	r0, #4
1000afce:	4b39      	ldr	r3, [pc, #228]	; (1000b0b4 <dualtimer_init+0xec>)
1000afd0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000afd2:	7823      	ldrb	r3, [r4, #0]
1000afd4:	2b00      	cmp	r3, #0
1000afd6:	d102      	bne.n	1000afde <dualtimer_init+0x16>
1000afd8:	7b23      	ldrb	r3, [r4, #12]
1000afda:	2b00      	cmp	r3, #0
1000afdc:	d065      	beq.n	1000b0aa <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000afde:	4936      	ldr	r1, [pc, #216]	; (1000b0b8 <dualtimer_init+0xf0>)
1000afe0:	68ca      	ldr	r2, [r1, #12]
1000afe2:	2320      	movs	r3, #32
1000afe4:	4313      	orrs	r3, r2
1000afe6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000afe8:	7e22      	ldrb	r2, [r4, #24]
1000afea:	698b      	ldr	r3, [r1, #24]
1000afec:	2003      	movs	r0, #3
1000afee:	4002      	ands	r2, r0
1000aff0:	0112      	lsls	r2, r2, #4
1000aff2:	302d      	adds	r0, #45	; 0x2d
1000aff4:	4383      	bics	r3, r0
1000aff6:	4313      	orrs	r3, r2
1000aff8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000affa:	7823      	ldrb	r3, [r4, #0]
1000affc:	2b00      	cmp	r3, #0
1000affe:	d026      	beq.n	1000b04e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b000:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b002:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b004:	2b00      	cmp	r3, #0
1000b006:	d003      	beq.n	1000b010 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b008:	3b02      	subs	r3, #2
1000b00a:	425d      	negs	r5, r3
1000b00c:	415d      	adcs	r5, r3
1000b00e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b010:	78a2      	ldrb	r2, [r4, #2]
1000b012:	0052      	lsls	r2, r2, #1
1000b014:	2502      	movs	r5, #2
1000b016:	402a      	ands	r2, r5
1000b018:	78e3      	ldrb	r3, [r4, #3]
1000b01a:	009b      	lsls	r3, r3, #2
1000b01c:	350a      	adds	r5, #10
1000b01e:	402b      	ands	r3, r5
1000b020:	431a      	orrs	r2, r3
1000b022:	0015      	movs	r5, r2
1000b024:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b026:	7923      	ldrb	r3, [r4, #4]
1000b028:	2b00      	cmp	r3, #0
1000b02a:	d001      	beq.n	1000b030 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b02c:	2320      	movs	r3, #32
1000b02e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b030:	4b22      	ldr	r3, [pc, #136]	; (1000b0bc <dualtimer_init+0xf4>)
1000b032:	68a2      	ldr	r2, [r4, #8]
1000b034:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b036:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b038:	491f      	ldr	r1, [pc, #124]	; (1000b0b8 <dualtimer_init+0xf0>)
1000b03a:	22c4      	movs	r2, #196	; 0xc4
1000b03c:	0052      	lsls	r2, r2, #1
1000b03e:	5c88      	ldrb	r0, [r1, r2]
1000b040:	2301      	movs	r3, #1
1000b042:	4303      	orrs	r3, r0
1000b044:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b046:	2000      	movs	r0, #0
1000b048:	4b1d      	ldr	r3, [pc, #116]	; (1000b0c0 <dualtimer_init+0xf8>)
1000b04a:	4798      	blx	r3
1000b04c:	e000      	b.n	1000b050 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b04e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b050:	7b23      	ldrb	r3, [r4, #12]
1000b052:	2b00      	cmp	r3, #0
1000b054:	d029      	beq.n	1000b0aa <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b056:	7b63      	ldrb	r3, [r4, #13]
1000b058:	2b00      	cmp	r3, #0
1000b05a:	d005      	beq.n	1000b068 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b05c:	2b01      	cmp	r3, #1
1000b05e:	d005      	beq.n	1000b06c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b060:	2b02      	cmp	r3, #2
1000b062:	d104      	bne.n	1000b06e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b064:	2540      	movs	r5, #64	; 0x40
1000b066:	e002      	b.n	1000b06e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b068:	2501      	movs	r5, #1
1000b06a:	e000      	b.n	1000b06e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b06c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b06e:	7ba3      	ldrb	r3, [r4, #14]
1000b070:	005b      	lsls	r3, r3, #1
1000b072:	2102      	movs	r1, #2
1000b074:	4019      	ands	r1, r3
1000b076:	7be2      	ldrb	r2, [r4, #15]
1000b078:	0092      	lsls	r2, r2, #2
1000b07a:	230c      	movs	r3, #12
1000b07c:	4013      	ands	r3, r2
1000b07e:	430b      	orrs	r3, r1
1000b080:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b082:	7c23      	ldrb	r3, [r4, #16]
1000b084:	2b00      	cmp	r3, #0
1000b086:	d001      	beq.n	1000b08c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b088:	2320      	movs	r3, #32
1000b08a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b08c:	6962      	ldr	r2, [r4, #20]
1000b08e:	4b0b      	ldr	r3, [pc, #44]	; (1000b0bc <dualtimer_init+0xf4>)
1000b090:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b092:	2228      	movs	r2, #40	; 0x28
1000b094:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b096:	4908      	ldr	r1, [pc, #32]	; (1000b0b8 <dualtimer_init+0xf0>)
1000b098:	3261      	adds	r2, #97	; 0x61
1000b09a:	32ff      	adds	r2, #255	; 0xff
1000b09c:	5c88      	ldrb	r0, [r1, r2]
1000b09e:	2302      	movs	r3, #2
1000b0a0:	4303      	orrs	r3, r0
1000b0a2:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b0a4:	2001      	movs	r0, #1
1000b0a6:	4b06      	ldr	r3, [pc, #24]	; (1000b0c0 <dualtimer_init+0xf8>)
1000b0a8:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b0aa:	4906      	ldr	r1, [pc, #24]	; (1000b0c4 <dualtimer_init+0xfc>)
1000b0ac:	201e      	movs	r0, #30
1000b0ae:	4b06      	ldr	r3, [pc, #24]	; (1000b0c8 <dualtimer_init+0x100>)
1000b0b0:	4798      	blx	r3
}
1000b0b2:	bd70      	pop	{r4, r5, r6, pc}
1000b0b4:	1000bfa1 	.word	0x1000bfa1
1000b0b8:	4000b000 	.word	0x4000b000
1000b0bc:	40001000 	.word	0x40001000
1000b0c0:	1000af81 	.word	0x1000af81
1000b0c4:	1000aedd 	.word	0x1000aedd
1000b0c8:	1000c409 	.word	0x1000c409

1000b0cc <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000b0cc:	2800      	cmp	r0, #0
1000b0ce:	d102      	bne.n	1000b0d6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000b0d0:	4b02      	ldr	r3, [pc, #8]	; (1000b0dc <dualtimer_register_callback+0x10>)
1000b0d2:	6019      	str	r1, [r3, #0]
1000b0d4:	e001      	b.n	1000b0da <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000b0d6:	4b02      	ldr	r3, [pc, #8]	; (1000b0e0 <dualtimer_register_callback+0x14>)
1000b0d8:	6019      	str	r1, [r3, #0]
	}
}
1000b0da:	4770      	bx	lr
1000b0dc:	10018628 	.word	0x10018628
1000b0e0:	1001862c 	.word	0x1001862c

1000b0e4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b0e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b0e6:	4b16      	ldr	r3, [pc, #88]	; (1000b140 <gpio_port0_isr_handler+0x5c>)
1000b0e8:	681d      	ldr	r5, [r3, #0]
1000b0ea:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b0ec:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b0ee:	07cb      	lsls	r3, r1, #31
1000b0f0:	d407      	bmi.n	1000b102 <gpio_port0_isr_handler+0x1e>
1000b0f2:	2301      	movs	r3, #1
1000b0f4:	2401      	movs	r4, #1
1000b0f6:	0018      	movs	r0, r3
1000b0f8:	0022      	movs	r2, r4
1000b0fa:	409a      	lsls	r2, r3
1000b0fc:	4211      	tst	r1, r2
1000b0fe:	d014      	beq.n	1000b12a <gpio_port0_isr_handler+0x46>
1000b100:	e001      	b.n	1000b106 <gpio_port0_isr_handler+0x22>
1000b102:	2201      	movs	r2, #1
1000b104:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b106:	b292      	uxth	r2, r2
1000b108:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b10a:	2346      	movs	r3, #70	; 0x46
1000b10c:	4a0c      	ldr	r2, [pc, #48]	; (1000b140 <gpio_port0_isr_handler+0x5c>)
1000b10e:	5ad3      	ldrh	r3, [r2, r3]
1000b110:	4103      	asrs	r3, r0
1000b112:	07db      	lsls	r3, r3, #31
1000b114:	d50c      	bpl.n	1000b130 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b116:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b118:	5ad3      	ldrh	r3, [r2, r3]
1000b11a:	4103      	asrs	r3, r0
1000b11c:	07db      	lsls	r3, r3, #31
1000b11e:	d507      	bpl.n	1000b130 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b120:	0080      	lsls	r0, r0, #2
1000b122:	1810      	adds	r0, r2, r0
1000b124:	6843      	ldr	r3, [r0, #4]
1000b126:	4798      	blx	r3
1000b128:	e002      	b.n	1000b130 <gpio_port0_isr_handler+0x4c>
1000b12a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b12c:	2b10      	cmp	r3, #16
1000b12e:	d1e2      	bne.n	1000b0f6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b130:	2180      	movs	r1, #128	; 0x80
1000b132:	0409      	lsls	r1, r1, #16
1000b134:	23c0      	movs	r3, #192	; 0xc0
1000b136:	005b      	lsls	r3, r3, #1
1000b138:	4a02      	ldr	r2, [pc, #8]	; (1000b144 <gpio_port0_isr_handler+0x60>)
1000b13a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b13c:	bd70      	pop	{r4, r5, r6, pc}
1000b13e:	46c0      	nop			; (mov r8, r8)
1000b140:	1001a308 	.word	0x1001a308
1000b144:	e000e100 	.word	0xe000e100

1000b148 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b14a:	4b18      	ldr	r3, [pc, #96]	; (1000b1ac <gpio_port1_isr_handler+0x64>)
1000b14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b14e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b150:	b2b6      	uxth	r6, r6
1000b152:	0037      	movs	r7, r6
1000b154:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b156:	0b76      	lsrs	r6, r6, #13
1000b158:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b15a:	4d14      	ldr	r5, [pc, #80]	; (1000b1ac <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b15c:	2e00      	cmp	r6, #0
1000b15e:	d001      	beq.n	1000b164 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b160:	4b13      	ldr	r3, [pc, #76]	; (1000b1b0 <gpio_port1_isr_handler+0x68>)
1000b162:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b164:	0022      	movs	r2, r4
1000b166:	2301      	movs	r3, #1
1000b168:	40a3      	lsls	r3, r4
1000b16a:	421f      	tst	r7, r3
1000b16c:	d013      	beq.n	1000b196 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b16e:	b29b      	uxth	r3, r3
1000b170:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b172:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b174:	238e      	movs	r3, #142	; 0x8e
1000b176:	5aeb      	ldrh	r3, [r5, r3]
1000b178:	4123      	asrs	r3, r4
1000b17a:	07db      	lsls	r3, r3, #31
1000b17c:	d50b      	bpl.n	1000b196 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b17e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b180:	490a      	ldr	r1, [pc, #40]	; (1000b1ac <gpio_port1_isr_handler+0x64>)
1000b182:	5acb      	ldrh	r3, [r1, r3]
1000b184:	4123      	asrs	r3, r4
1000b186:	07db      	lsls	r3, r3, #31
1000b188:	d505      	bpl.n	1000b196 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b18a:	3212      	adds	r2, #18
1000b18c:	0092      	lsls	r2, r2, #2
1000b18e:	188a      	adds	r2, r1, r2
1000b190:	6853      	ldr	r3, [r2, #4]
1000b192:	4798      	blx	r3
				break;
1000b194:	e002      	b.n	1000b19c <gpio_port1_isr_handler+0x54>
1000b196:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b198:	2c10      	cmp	r4, #16
1000b19a:	d1df      	bne.n	1000b15c <gpio_port1_isr_handler+0x14>
1000b19c:	2180      	movs	r1, #128	; 0x80
1000b19e:	0449      	lsls	r1, r1, #17
1000b1a0:	23c0      	movs	r3, #192	; 0xc0
1000b1a2:	005b      	lsls	r3, r3, #1
1000b1a4:	4a03      	ldr	r2, [pc, #12]	; (1000b1b4 <gpio_port1_isr_handler+0x6c>)
1000b1a6:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b1aa:	46c0      	nop			; (mov r8, r8)
1000b1ac:	1001a308 	.word	0x1001a308
1000b1b0:	0001bc51 	.word	0x0001bc51
1000b1b4:	e000e100 	.word	0xe000e100

1000b1b8 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b1b8:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b1ba:	2390      	movs	r3, #144	; 0x90
1000b1bc:	4a1b      	ldr	r2, [pc, #108]	; (1000b22c <gpio_port2_isr_handler+0x74>)
1000b1be:	58d2      	ldr	r2, [r2, r3]
1000b1c0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b1c2:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b1c4:	04d9      	lsls	r1, r3, #19
1000b1c6:	d414      	bmi.n	1000b1f2 <gpio_port2_isr_handler+0x3a>
1000b1c8:	0499      	lsls	r1, r3, #18
1000b1ca:	d40a      	bmi.n	1000b1e2 <gpio_port2_isr_handler+0x2a>
1000b1cc:	0459      	lsls	r1, r3, #17
1000b1ce:	d40c      	bmi.n	1000b1ea <gpio_port2_isr_handler+0x32>
1000b1d0:	0bdb      	lsrs	r3, r3, #15
1000b1d2:	03db      	lsls	r3, r3, #15
1000b1d4:	b29b      	uxth	r3, r3
1000b1d6:	2b00      	cmp	r3, #0
1000b1d8:	d020      	beq.n	1000b21c <gpio_port2_isr_handler+0x64>
1000b1da:	2380      	movs	r3, #128	; 0x80
1000b1dc:	021b      	lsls	r3, r3, #8
1000b1de:	210f      	movs	r1, #15
1000b1e0:	e00a      	b.n	1000b1f8 <gpio_port2_isr_handler+0x40>
1000b1e2:	2380      	movs	r3, #128	; 0x80
1000b1e4:	019b      	lsls	r3, r3, #6
1000b1e6:	210d      	movs	r1, #13
1000b1e8:	e006      	b.n	1000b1f8 <gpio_port2_isr_handler+0x40>
1000b1ea:	2380      	movs	r3, #128	; 0x80
1000b1ec:	01db      	lsls	r3, r3, #7
1000b1ee:	210e      	movs	r1, #14
1000b1f0:	e002      	b.n	1000b1f8 <gpio_port2_isr_handler+0x40>
1000b1f2:	2380      	movs	r3, #128	; 0x80
1000b1f4:	015b      	lsls	r3, r3, #5
1000b1f6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b1f8:	b29b      	uxth	r3, r3
1000b1fa:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b1fc:	23d6      	movs	r3, #214	; 0xd6
1000b1fe:	4a0b      	ldr	r2, [pc, #44]	; (1000b22c <gpio_port2_isr_handler+0x74>)
1000b200:	5ad3      	ldrh	r3, [r2, r3]
1000b202:	410b      	asrs	r3, r1
1000b204:	07db      	lsls	r3, r3, #31
1000b206:	d509      	bpl.n	1000b21c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b208:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b20a:	5ad3      	ldrh	r3, [r2, r3]
1000b20c:	410b      	asrs	r3, r1
1000b20e:	07db      	lsls	r3, r3, #31
1000b210:	d504      	bpl.n	1000b21c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b212:	3124      	adds	r1, #36	; 0x24
1000b214:	0089      	lsls	r1, r1, #2
1000b216:	1851      	adds	r1, r2, r1
1000b218:	684b      	ldr	r3, [r1, #4]
1000b21a:	4798      	blx	r3
1000b21c:	2180      	movs	r1, #128	; 0x80
1000b21e:	0489      	lsls	r1, r1, #18
1000b220:	23c0      	movs	r3, #192	; 0xc0
1000b222:	005b      	lsls	r3, r3, #1
1000b224:	4a02      	ldr	r2, [pc, #8]	; (1000b230 <gpio_port2_isr_handler+0x78>)
1000b226:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b228:	bd10      	pop	{r4, pc}
1000b22a:	46c0      	nop			; (mov r8, r8)
1000b22c:	1001a308 	.word	0x1001a308
1000b230:	e000e100 	.word	0xe000e100

1000b234 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b234:	2300      	movs	r3, #0
1000b236:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b238:	2201      	movs	r2, #1
1000b23a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b23c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b23e:	70c3      	strb	r3, [r0, #3]
}
1000b240:	4770      	bx	lr
1000b242:	46c0      	nop			; (mov r8, r8)

1000b244 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b244:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b246:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b248:	2801      	cmp	r0, #1
1000b24a:	d800      	bhi.n	1000b24e <gpio_pin_set_config+0xa>
1000b24c:	e0c8      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b24e:	2807      	cmp	r0, #7
1000b250:	d809      	bhi.n	1000b266 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b252:	4d64      	ldr	r5, [pc, #400]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b254:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b256:	3b10      	subs	r3, #16
1000b258:	4003      	ands	r3, r0
1000b25a:	009b      	lsls	r3, r3, #2
1000b25c:	2407      	movs	r4, #7
1000b25e:	409c      	lsls	r4, r3
1000b260:	43a2      	bics	r2, r4
1000b262:	646a      	str	r2, [r5, #68]	; 0x44
1000b264:	e029      	b.n	1000b2ba <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b266:	280f      	cmp	r0, #15
1000b268:	d809      	bhi.n	1000b27e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b26a:	4d5e      	ldr	r5, [pc, #376]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b26c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b26e:	2307      	movs	r3, #7
1000b270:	4003      	ands	r3, r0
1000b272:	009b      	lsls	r3, r3, #2
1000b274:	2407      	movs	r4, #7
1000b276:	409c      	lsls	r4, r3
1000b278:	43a2      	bics	r2, r4
1000b27a:	64aa      	str	r2, [r5, #72]	; 0x48
1000b27c:	e01d      	b.n	1000b2ba <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b27e:	2817      	cmp	r0, #23
1000b280:	d809      	bhi.n	1000b296 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b282:	4d58      	ldr	r5, [pc, #352]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b284:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b286:	2307      	movs	r3, #7
1000b288:	4003      	ands	r3, r0
1000b28a:	009b      	lsls	r3, r3, #2
1000b28c:	2407      	movs	r4, #7
1000b28e:	409c      	lsls	r4, r3
1000b290:	43a2      	bics	r2, r4
1000b292:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b294:	e011      	b.n	1000b2ba <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b296:	0003      	movs	r3, r0
1000b298:	3b2c      	subs	r3, #44	; 0x2c
1000b29a:	2b03      	cmp	r3, #3
1000b29c:	d80d      	bhi.n	1000b2ba <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b29e:	4d52      	ldr	r5, [pc, #328]	; (1000b3e8 <gpio_pin_set_config+0x1a4>)
1000b2a0:	2482      	movs	r4, #130	; 0x82
1000b2a2:	00e4      	lsls	r4, r4, #3
1000b2a4:	5d2a      	ldrb	r2, [r5, r4]
1000b2a6:	0712      	lsls	r2, r2, #28
1000b2a8:	2601      	movs	r6, #1
1000b2aa:	409e      	lsls	r6, r3
1000b2ac:	0f12      	lsrs	r2, r2, #28
1000b2ae:	5d2b      	ldrb	r3, [r5, r4]
1000b2b0:	43b2      	bics	r2, r6
1000b2b2:	260f      	movs	r6, #15
1000b2b4:	43b3      	bics	r3, r6
1000b2b6:	4313      	orrs	r3, r2
1000b2b8:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b2ba:	0003      	movs	r3, r0
1000b2bc:	3b1d      	subs	r3, #29
1000b2be:	2b02      	cmp	r3, #2
1000b2c0:	d829      	bhi.n	1000b316 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b2c2:	784b      	ldrb	r3, [r1, #1]
1000b2c4:	2b01      	cmp	r3, #1
1000b2c6:	d108      	bne.n	1000b2da <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b2c8:	4d47      	ldr	r5, [pc, #284]	; (1000b3e8 <gpio_pin_set_config+0x1a4>)
1000b2ca:	7d2b      	ldrb	r3, [r5, #20]
1000b2cc:	241f      	movs	r4, #31
1000b2ce:	1a24      	subs	r4, r4, r0
1000b2d0:	2201      	movs	r2, #1
1000b2d2:	40a2      	lsls	r2, r4
1000b2d4:	4393      	bics	r3, r2
1000b2d6:	752b      	strb	r3, [r5, #20]
1000b2d8:	e008      	b.n	1000b2ec <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b2da:	4c43      	ldr	r4, [pc, #268]	; (1000b3e8 <gpio_pin_set_config+0x1a4>)
1000b2dc:	7d25      	ldrb	r5, [r4, #20]
1000b2de:	221f      	movs	r2, #31
1000b2e0:	1a12      	subs	r2, r2, r0
1000b2e2:	2301      	movs	r3, #1
1000b2e4:	4093      	lsls	r3, r2
1000b2e6:	432b      	orrs	r3, r5
1000b2e8:	b2db      	uxtb	r3, r3
1000b2ea:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b2ec:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b2ee:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b2f0:	2a00      	cmp	r2, #0
1000b2f2:	d075      	beq.n	1000b3e0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b2f4:	493c      	ldr	r1, [pc, #240]	; (1000b3e8 <gpio_pin_set_config+0x1a4>)
1000b2f6:	880c      	ldrh	r4, [r1, #0]
1000b2f8:	221f      	movs	r2, #31
1000b2fa:	1a10      	subs	r0, r2, r0
1000b2fc:	0080      	lsls	r0, r0, #2
1000b2fe:	3301      	adds	r3, #1
1000b300:	4083      	lsls	r3, r0
1000b302:	4323      	orrs	r3, r4
1000b304:	b29b      	uxth	r3, r3
1000b306:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b308:	4a38      	ldr	r2, [pc, #224]	; (1000b3ec <gpio_pin_set_config+0x1a8>)
1000b30a:	7811      	ldrb	r1, [r2, #0]
1000b30c:	2302      	movs	r3, #2
1000b30e:	430b      	orrs	r3, r1
1000b310:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b312:	2300      	movs	r3, #0
1000b314:	e064      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b316:	780a      	ldrb	r2, [r1, #0]
1000b318:	2a00      	cmp	r2, #0
1000b31a:	d140      	bne.n	1000b39e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b31c:	280f      	cmp	r0, #15
1000b31e:	d808      	bhi.n	1000b332 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b320:	2301      	movs	r3, #1
1000b322:	4083      	lsls	r3, r0
1000b324:	b29b      	uxth	r3, r3
1000b326:	4a32      	ldr	r2, [pc, #200]	; (1000b3f0 <gpio_pin_set_config+0x1ac>)
1000b328:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b32a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b32c:	281f      	cmp	r0, #31
1000b32e:	d857      	bhi.n	1000b3e0 <gpio_pin_set_config+0x19c>
1000b330:	e012      	b.n	1000b358 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b332:	281f      	cmp	r0, #31
1000b334:	d807      	bhi.n	1000b346 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b336:	220f      	movs	r2, #15
1000b338:	4002      	ands	r2, r0
1000b33a:	2301      	movs	r3, #1
1000b33c:	4093      	lsls	r3, r2
1000b33e:	b29b      	uxth	r3, r3
1000b340:	4a2c      	ldr	r2, [pc, #176]	; (1000b3f4 <gpio_pin_set_config+0x1b0>)
1000b342:	8293      	strh	r3, [r2, #20]
1000b344:	e008      	b.n	1000b358 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b346:	230f      	movs	r3, #15
1000b348:	4018      	ands	r0, r3
1000b34a:	3b0e      	subs	r3, #14
1000b34c:	4083      	lsls	r3, r0
1000b34e:	b29b      	uxth	r3, r3
1000b350:	4a29      	ldr	r2, [pc, #164]	; (1000b3f8 <gpio_pin_set_config+0x1b4>)
1000b352:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b354:	2300      	movs	r3, #0
1000b356:	e043      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b358:	784b      	ldrb	r3, [r1, #1]
1000b35a:	2b01      	cmp	r3, #1
1000b35c:	d00c      	beq.n	1000b378 <gpio_pin_set_config+0x134>
1000b35e:	2b00      	cmp	r3, #0
1000b360:	d002      	beq.n	1000b368 <gpio_pin_set_config+0x124>
1000b362:	2b02      	cmp	r3, #2
1000b364:	d010      	beq.n	1000b388 <gpio_pin_set_config+0x144>
1000b366:	e03a      	b.n	1000b3de <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b368:	491e      	ldr	r1, [pc, #120]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b36a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b36c:	2301      	movs	r3, #1
1000b36e:	4083      	lsls	r3, r0
1000b370:	4313      	orrs	r3, r2
1000b372:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b374:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b376:	e033      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b378:	491a      	ldr	r1, [pc, #104]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b37a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b37c:	2201      	movs	r2, #1
1000b37e:	4082      	lsls	r2, r0
1000b380:	4393      	bics	r3, r2
1000b382:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b384:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b386:	e02b      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b388:	4b16      	ldr	r3, [pc, #88]	; (1000b3e4 <gpio_pin_set_config+0x1a0>)
1000b38a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b38c:	2201      	movs	r2, #1
1000b38e:	4082      	lsls	r2, r0
1000b390:	4311      	orrs	r1, r2
1000b392:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b394:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b396:	4391      	bics	r1, r2
1000b398:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b39a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b39c:	e020      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b39e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b3a0:	2a01      	cmp	r2, #1
1000b3a2:	d11d      	bne.n	1000b3e0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b3a4:	280f      	cmp	r0, #15
1000b3a6:	d806      	bhi.n	1000b3b6 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b3a8:	3301      	adds	r3, #1
1000b3aa:	4083      	lsls	r3, r0
1000b3ac:	b29b      	uxth	r3, r3
1000b3ae:	4a10      	ldr	r2, [pc, #64]	; (1000b3f0 <gpio_pin_set_config+0x1ac>)
1000b3b0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b3b2:	2300      	movs	r3, #0
1000b3b4:	e014      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b3b6:	281f      	cmp	r0, #31
1000b3b8:	d808      	bhi.n	1000b3cc <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b3ba:	230f      	movs	r3, #15
1000b3bc:	4018      	ands	r0, r3
1000b3be:	3b0e      	subs	r3, #14
1000b3c0:	4083      	lsls	r3, r0
1000b3c2:	b29b      	uxth	r3, r3
1000b3c4:	4a0b      	ldr	r2, [pc, #44]	; (1000b3f4 <gpio_pin_set_config+0x1b0>)
1000b3c6:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b3c8:	2300      	movs	r3, #0
1000b3ca:	e009      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b3cc:	230f      	movs	r3, #15
1000b3ce:	4018      	ands	r0, r3
1000b3d0:	3b0e      	subs	r3, #14
1000b3d2:	4083      	lsls	r3, r0
1000b3d4:	b29b      	uxth	r3, r3
1000b3d6:	4a08      	ldr	r2, [pc, #32]	; (1000b3f8 <gpio_pin_set_config+0x1b4>)
1000b3d8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b3da:	2300      	movs	r3, #0
1000b3dc:	e000      	b.n	1000b3e0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b3de:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b3e0:	0018      	movs	r0, r3
1000b3e2:	bd70      	pop	{r4, r5, r6, pc}
1000b3e4:	4000b000 	.word	0x4000b000
1000b3e8:	4000f000 	.word	0x4000f000
1000b3ec:	4000e000 	.word	0x4000e000
1000b3f0:	40010000 	.word	0x40010000
1000b3f4:	40011000 	.word	0x40011000
1000b3f8:	40013000 	.word	0x40013000

1000b3fc <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b3fc:	280f      	cmp	r0, #15
1000b3fe:	d806      	bhi.n	1000b40e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000b400:	4b0f      	ldr	r3, [pc, #60]	; (1000b440 <gpio_pin_get_input_level+0x44>)
1000b402:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000b404:	2301      	movs	r3, #1
1000b406:	4083      	lsls	r3, r0
1000b408:	0018      	movs	r0, r3
1000b40a:	4008      	ands	r0, r1
1000b40c:	e014      	b.n	1000b438 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000b40e:	281f      	cmp	r0, #31
1000b410:	d809      	bhi.n	1000b426 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000b412:	4b0c      	ldr	r3, [pc, #48]	; (1000b444 <gpio_pin_get_input_level+0x48>)
1000b414:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b416:	230f      	movs	r3, #15
1000b418:	4003      	ands	r3, r0
1000b41a:	001a      	movs	r2, r3
1000b41c:	2301      	movs	r3, #1
1000b41e:	4093      	lsls	r3, r2
1000b420:	0018      	movs	r0, r3
1000b422:	4008      	ands	r0, r1
1000b424:	e008      	b.n	1000b438 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000b426:	4b08      	ldr	r3, [pc, #32]	; (1000b448 <gpio_pin_get_input_level+0x4c>)
1000b428:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b42a:	230f      	movs	r3, #15
1000b42c:	4003      	ands	r3, r0
1000b42e:	001a      	movs	r2, r3
1000b430:	2301      	movs	r3, #1
1000b432:	4093      	lsls	r3, r2
1000b434:	0018      	movs	r0, r3
1000b436:	4008      	ands	r0, r1
	}

	return regval;
1000b438:	1e43      	subs	r3, r0, #1
1000b43a:	4198      	sbcs	r0, r3
1000b43c:	b2c0      	uxtb	r0, r0
}
1000b43e:	4770      	bx	lr
1000b440:	40010000 	.word	0x40010000
1000b444:	40011000 	.word	0x40011000
1000b448:	40013000 	.word	0x40013000

1000b44c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b44c:	280f      	cmp	r0, #15
1000b44e:	d806      	bhi.n	1000b45e <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000b450:	4b0f      	ldr	r3, [pc, #60]	; (1000b490 <gpio_pin_get_output_level+0x44>)
1000b452:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000b454:	2301      	movs	r3, #1
1000b456:	4083      	lsls	r3, r0
1000b458:	0018      	movs	r0, r3
1000b45a:	4008      	ands	r0, r1
1000b45c:	e014      	b.n	1000b488 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000b45e:	281f      	cmp	r0, #31
1000b460:	d809      	bhi.n	1000b476 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000b462:	4b0c      	ldr	r3, [pc, #48]	; (1000b494 <gpio_pin_get_output_level+0x48>)
1000b464:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b466:	230f      	movs	r3, #15
1000b468:	4003      	ands	r3, r0
1000b46a:	001a      	movs	r2, r3
1000b46c:	2301      	movs	r3, #1
1000b46e:	4093      	lsls	r3, r2
1000b470:	0018      	movs	r0, r3
1000b472:	4008      	ands	r0, r1
1000b474:	e008      	b.n	1000b488 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000b476:	4b08      	ldr	r3, [pc, #32]	; (1000b498 <gpio_pin_get_output_level+0x4c>)
1000b478:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b47a:	230f      	movs	r3, #15
1000b47c:	4003      	ands	r3, r0
1000b47e:	001a      	movs	r2, r3
1000b480:	2301      	movs	r3, #1
1000b482:	4093      	lsls	r3, r2
1000b484:	0018      	movs	r0, r3
1000b486:	4008      	ands	r0, r1
	}

	return regval;
1000b488:	1e43      	subs	r3, r0, #1
1000b48a:	4198      	sbcs	r0, r3
1000b48c:	b2c0      	uxtb	r0, r0
}
1000b48e:	4770      	bx	lr
1000b490:	40010000 	.word	0x40010000
1000b494:	40011000 	.word	0x40011000
1000b498:	40013000 	.word	0x40013000

1000b49c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b49c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b49e:	280f      	cmp	r0, #15
1000b4a0:	d810      	bhi.n	1000b4c4 <gpio_pin_set_output_level+0x28>
		if(level) {
1000b4a2:	2900      	cmp	r1, #0
1000b4a4:	d007      	beq.n	1000b4b6 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b4a6:	4a1d      	ldr	r2, [pc, #116]	; (1000b51c <gpio_pin_set_output_level+0x80>)
1000b4a8:	8891      	ldrh	r1, [r2, #4]
1000b4aa:	2301      	movs	r3, #1
1000b4ac:	4083      	lsls	r3, r0
1000b4ae:	430b      	orrs	r3, r1
1000b4b0:	b29b      	uxth	r3, r3
1000b4b2:	8093      	strh	r3, [r2, #4]
1000b4b4:	e031      	b.n	1000b51a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b4b6:	4919      	ldr	r1, [pc, #100]	; (1000b51c <gpio_pin_set_output_level+0x80>)
1000b4b8:	888b      	ldrh	r3, [r1, #4]
1000b4ba:	2201      	movs	r2, #1
1000b4bc:	4082      	lsls	r2, r0
1000b4be:	4393      	bics	r3, r2
1000b4c0:	808b      	strh	r3, [r1, #4]
1000b4c2:	e02a      	b.n	1000b51a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b4c4:	281f      	cmp	r0, #31
1000b4c6:	d814      	bhi.n	1000b4f2 <gpio_pin_set_output_level+0x56>
		if(level) {
1000b4c8:	2900      	cmp	r1, #0
1000b4ca:	d009      	beq.n	1000b4e0 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b4cc:	4914      	ldr	r1, [pc, #80]	; (1000b520 <gpio_pin_set_output_level+0x84>)
1000b4ce:	888c      	ldrh	r4, [r1, #4]
1000b4d0:	220f      	movs	r2, #15
1000b4d2:	4010      	ands	r0, r2
1000b4d4:	2301      	movs	r3, #1
1000b4d6:	4083      	lsls	r3, r0
1000b4d8:	4323      	orrs	r3, r4
1000b4da:	b29b      	uxth	r3, r3
1000b4dc:	808b      	strh	r3, [r1, #4]
1000b4de:	e01c      	b.n	1000b51a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b4e0:	490f      	ldr	r1, [pc, #60]	; (1000b520 <gpio_pin_set_output_level+0x84>)
1000b4e2:	888b      	ldrh	r3, [r1, #4]
1000b4e4:	220f      	movs	r2, #15
1000b4e6:	4010      	ands	r0, r2
1000b4e8:	3a0e      	subs	r2, #14
1000b4ea:	4082      	lsls	r2, r0
1000b4ec:	4393      	bics	r3, r2
1000b4ee:	808b      	strh	r3, [r1, #4]
1000b4f0:	e013      	b.n	1000b51a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b4f2:	2900      	cmp	r1, #0
1000b4f4:	d009      	beq.n	1000b50a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b4f6:	490b      	ldr	r1, [pc, #44]	; (1000b524 <gpio_pin_set_output_level+0x88>)
1000b4f8:	888c      	ldrh	r4, [r1, #4]
1000b4fa:	220f      	movs	r2, #15
1000b4fc:	4010      	ands	r0, r2
1000b4fe:	2301      	movs	r3, #1
1000b500:	4083      	lsls	r3, r0
1000b502:	4323      	orrs	r3, r4
1000b504:	b29b      	uxth	r3, r3
1000b506:	808b      	strh	r3, [r1, #4]
1000b508:	e007      	b.n	1000b51a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b50a:	4906      	ldr	r1, [pc, #24]	; (1000b524 <gpio_pin_set_output_level+0x88>)
1000b50c:	888b      	ldrh	r3, [r1, #4]
1000b50e:	220f      	movs	r2, #15
1000b510:	4010      	ands	r0, r2
1000b512:	3a0e      	subs	r2, #14
1000b514:	4082      	lsls	r2, r0
1000b516:	4393      	bics	r3, r2
1000b518:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b51a:	bd10      	pop	{r4, pc}
1000b51c:	40010000 	.word	0x40010000
1000b520:	40011000 	.word	0x40011000
1000b524:	40013000 	.word	0x40013000

1000b528 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b528:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b52a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b52c:	23ff      	movs	r3, #255	; 0xff
1000b52e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b530:	2807      	cmp	r0, #7
1000b532:	d833      	bhi.n	1000b59c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b534:	4a4e      	ldr	r2, [pc, #312]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b536:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b538:	3bf8      	subs	r3, #248	; 0xf8
1000b53a:	4003      	ands	r3, r0
1000b53c:	009b      	lsls	r3, r3, #2
1000b53e:	2607      	movs	r6, #7
1000b540:	409e      	lsls	r6, r3
1000b542:	43b4      	bics	r4, r6
1000b544:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b546:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b548:	000e      	movs	r6, r1
1000b54a:	409e      	lsls	r6, r3
1000b54c:	0033      	movs	r3, r6
1000b54e:	4323      	orrs	r3, r4
1000b550:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b552:	2901      	cmp	r1, #1
1000b554:	d000      	beq.n	1000b558 <gpio_pinmux_cofiguration+0x30>
1000b556:	e08a      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b558:	2803      	cmp	r0, #3
1000b55a:	d80f      	bhi.n	1000b57c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b55c:	0011      	movs	r1, r2
1000b55e:	22d0      	movs	r2, #208	; 0xd0
1000b560:	0052      	lsls	r2, r2, #1
1000b562:	588c      	ldr	r4, [r1, r2]
1000b564:	2303      	movs	r3, #3
1000b566:	4018      	ands	r0, r3
1000b568:	00c0      	lsls	r0, r0, #3
1000b56a:	333c      	adds	r3, #60	; 0x3c
1000b56c:	4083      	lsls	r3, r0
1000b56e:	439c      	bics	r4, r3
1000b570:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b572:	588b      	ldr	r3, [r1, r2]
1000b574:	4085      	lsls	r5, r0
1000b576:	431d      	orrs	r5, r3
1000b578:	508d      	str	r5, [r1, r2]
1000b57a:	e078      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b57c:	493c      	ldr	r1, [pc, #240]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b57e:	22d2      	movs	r2, #210	; 0xd2
1000b580:	0052      	lsls	r2, r2, #1
1000b582:	588c      	ldr	r4, [r1, r2]
1000b584:	2303      	movs	r3, #3
1000b586:	4018      	ands	r0, r3
1000b588:	00c0      	lsls	r0, r0, #3
1000b58a:	333c      	adds	r3, #60	; 0x3c
1000b58c:	4083      	lsls	r3, r0
1000b58e:	439c      	bics	r4, r3
1000b590:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b592:	588b      	ldr	r3, [r1, r2]
1000b594:	4085      	lsls	r5, r0
1000b596:	431d      	orrs	r5, r3
1000b598:	508d      	str	r5, [r1, r2]
1000b59a:	e068      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b59c:	280f      	cmp	r0, #15
1000b59e:	d832      	bhi.n	1000b606 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5a0:	4a33      	ldr	r2, [pc, #204]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b5a2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b5a4:	2307      	movs	r3, #7
1000b5a6:	4003      	ands	r3, r0
1000b5a8:	009b      	lsls	r3, r3, #2
1000b5aa:	2607      	movs	r6, #7
1000b5ac:	409e      	lsls	r6, r3
1000b5ae:	43b4      	bics	r4, r6
1000b5b0:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b5b2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b5b4:	000e      	movs	r6, r1
1000b5b6:	409e      	lsls	r6, r3
1000b5b8:	0033      	movs	r3, r6
1000b5ba:	4323      	orrs	r3, r4
1000b5bc:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b5be:	2901      	cmp	r1, #1
1000b5c0:	d155      	bne.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b5c2:	280b      	cmp	r0, #11
1000b5c4:	d80f      	bhi.n	1000b5e6 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b5c6:	0011      	movs	r1, r2
1000b5c8:	22d4      	movs	r2, #212	; 0xd4
1000b5ca:	0052      	lsls	r2, r2, #1
1000b5cc:	588c      	ldr	r4, [r1, r2]
1000b5ce:	2303      	movs	r3, #3
1000b5d0:	4018      	ands	r0, r3
1000b5d2:	00c0      	lsls	r0, r0, #3
1000b5d4:	333c      	adds	r3, #60	; 0x3c
1000b5d6:	4083      	lsls	r3, r0
1000b5d8:	439c      	bics	r4, r3
1000b5da:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b5dc:	588b      	ldr	r3, [r1, r2]
1000b5de:	4085      	lsls	r5, r0
1000b5e0:	431d      	orrs	r5, r3
1000b5e2:	508d      	str	r5, [r1, r2]
1000b5e4:	e043      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b5e6:	4922      	ldr	r1, [pc, #136]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b5e8:	22d6      	movs	r2, #214	; 0xd6
1000b5ea:	0052      	lsls	r2, r2, #1
1000b5ec:	588c      	ldr	r4, [r1, r2]
1000b5ee:	2303      	movs	r3, #3
1000b5f0:	4018      	ands	r0, r3
1000b5f2:	00c0      	lsls	r0, r0, #3
1000b5f4:	333c      	adds	r3, #60	; 0x3c
1000b5f6:	4083      	lsls	r3, r0
1000b5f8:	439c      	bics	r4, r3
1000b5fa:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b5fc:	588b      	ldr	r3, [r1, r2]
1000b5fe:	4085      	lsls	r5, r0
1000b600:	431d      	orrs	r5, r3
1000b602:	508d      	str	r5, [r1, r2]
1000b604:	e033      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b606:	2817      	cmp	r0, #23
1000b608:	d831      	bhi.n	1000b66e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b60a:	4a19      	ldr	r2, [pc, #100]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b60c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b60e:	2307      	movs	r3, #7
1000b610:	4003      	ands	r3, r0
1000b612:	009b      	lsls	r3, r3, #2
1000b614:	2607      	movs	r6, #7
1000b616:	409e      	lsls	r6, r3
1000b618:	43b4      	bics	r4, r6
1000b61a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b61c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b61e:	000e      	movs	r6, r1
1000b620:	409e      	lsls	r6, r3
1000b622:	0033      	movs	r3, r6
1000b624:	4323      	orrs	r3, r4
1000b626:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b628:	2901      	cmp	r1, #1
1000b62a:	d120      	bne.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b62c:	2813      	cmp	r0, #19
1000b62e:	d80f      	bhi.n	1000b650 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b630:	0011      	movs	r1, r2
1000b632:	22d8      	movs	r2, #216	; 0xd8
1000b634:	0052      	lsls	r2, r2, #1
1000b636:	588c      	ldr	r4, [r1, r2]
1000b638:	2303      	movs	r3, #3
1000b63a:	4018      	ands	r0, r3
1000b63c:	00c0      	lsls	r0, r0, #3
1000b63e:	333c      	adds	r3, #60	; 0x3c
1000b640:	4083      	lsls	r3, r0
1000b642:	439c      	bics	r4, r3
1000b644:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b646:	588b      	ldr	r3, [r1, r2]
1000b648:	4085      	lsls	r5, r0
1000b64a:	431d      	orrs	r5, r3
1000b64c:	508d      	str	r5, [r1, r2]
1000b64e:	e00e      	b.n	1000b66e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b650:	4a07      	ldr	r2, [pc, #28]	; (1000b670 <gpio_pinmux_cofiguration+0x148>)
1000b652:	23da      	movs	r3, #218	; 0xda
1000b654:	005b      	lsls	r3, r3, #1
1000b656:	58d1      	ldr	r1, [r2, r3]
1000b658:	2403      	movs	r4, #3
1000b65a:	4020      	ands	r0, r4
1000b65c:	00c0      	lsls	r0, r0, #3
1000b65e:	343c      	adds	r4, #60	; 0x3c
1000b660:	4084      	lsls	r4, r0
1000b662:	43a1      	bics	r1, r4
1000b664:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b666:	58d1      	ldr	r1, [r2, r3]
1000b668:	4085      	lsls	r5, r0
1000b66a:	430d      	orrs	r5, r1
1000b66c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b66e:	bd70      	pop	{r4, r5, r6, pc}
1000b670:	4000b000 	.word	0x4000b000

1000b674 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b674:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b676:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b678:	280f      	cmp	r0, #15
1000b67a:	d904      	bls.n	1000b686 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b67c:	241f      	movs	r4, #31
1000b67e:	4284      	cmp	r4, r0
1000b680:	415b      	adcs	r3, r3
1000b682:	3c1d      	subs	r4, #29
1000b684:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b686:	2a01      	cmp	r2, #1
1000b688:	d016      	beq.n	1000b6b8 <gpio_register_callback+0x44>
1000b68a:	2a00      	cmp	r2, #0
1000b68c:	d004      	beq.n	1000b698 <gpio_register_callback+0x24>
1000b68e:	2a02      	cmp	r2, #2
1000b690:	d022      	beq.n	1000b6d8 <gpio_register_callback+0x64>
1000b692:	2a03      	cmp	r2, #3
1000b694:	d030      	beq.n	1000b6f8 <gpio_register_callback+0x84>
1000b696:	e03e      	b.n	1000b716 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b698:	4e29      	ldr	r6, [pc, #164]	; (1000b740 <gpio_register_callback+0xcc>)
1000b69a:	00dc      	lsls	r4, r3, #3
1000b69c:	18e2      	adds	r2, r4, r3
1000b69e:	00d2      	lsls	r2, r2, #3
1000b6a0:	5997      	ldr	r7, [r2, r6]
1000b6a2:	250f      	movs	r5, #15
1000b6a4:	4005      	ands	r5, r0
1000b6a6:	2201      	movs	r2, #1
1000b6a8:	40aa      	lsls	r2, r5
1000b6aa:	b292      	uxth	r2, r2
1000b6ac:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b6ae:	18e4      	adds	r4, r4, r3
1000b6b0:	00e4      	lsls	r4, r4, #3
1000b6b2:	59a4      	ldr	r4, [r4, r6]
1000b6b4:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b6b6:	e02e      	b.n	1000b716 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b6b8:	4e21      	ldr	r6, [pc, #132]	; (1000b740 <gpio_register_callback+0xcc>)
1000b6ba:	00dc      	lsls	r4, r3, #3
1000b6bc:	18e2      	adds	r2, r4, r3
1000b6be:	00d2      	lsls	r2, r2, #3
1000b6c0:	5997      	ldr	r7, [r2, r6]
1000b6c2:	250f      	movs	r5, #15
1000b6c4:	4005      	ands	r5, r0
1000b6c6:	2201      	movs	r2, #1
1000b6c8:	40aa      	lsls	r2, r5
1000b6ca:	b292      	uxth	r2, r2
1000b6cc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b6ce:	18e4      	adds	r4, r4, r3
1000b6d0:	00e4      	lsls	r4, r4, #3
1000b6d2:	59a4      	ldr	r4, [r4, r6]
1000b6d4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b6d6:	e01e      	b.n	1000b716 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b6d8:	4e19      	ldr	r6, [pc, #100]	; (1000b740 <gpio_register_callback+0xcc>)
1000b6da:	00dc      	lsls	r4, r3, #3
1000b6dc:	18e2      	adds	r2, r4, r3
1000b6de:	00d2      	lsls	r2, r2, #3
1000b6e0:	5997      	ldr	r7, [r2, r6]
1000b6e2:	250f      	movs	r5, #15
1000b6e4:	4005      	ands	r5, r0
1000b6e6:	2201      	movs	r2, #1
1000b6e8:	40aa      	lsls	r2, r5
1000b6ea:	b292      	uxth	r2, r2
1000b6ec:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b6ee:	18e4      	adds	r4, r4, r3
1000b6f0:	00e4      	lsls	r4, r4, #3
1000b6f2:	59a4      	ldr	r4, [r4, r6]
1000b6f4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b6f6:	e00e      	b.n	1000b716 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b6f8:	4e11      	ldr	r6, [pc, #68]	; (1000b740 <gpio_register_callback+0xcc>)
1000b6fa:	00dc      	lsls	r4, r3, #3
1000b6fc:	18e2      	adds	r2, r4, r3
1000b6fe:	00d2      	lsls	r2, r2, #3
1000b700:	5997      	ldr	r7, [r2, r6]
1000b702:	250f      	movs	r5, #15
1000b704:	4005      	ands	r5, r0
1000b706:	2201      	movs	r2, #1
1000b708:	40aa      	lsls	r2, r5
1000b70a:	b292      	uxth	r2, r2
1000b70c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b70e:	18e4      	adds	r4, r4, r3
1000b710:	00e4      	lsls	r4, r4, #3
1000b712:	59a4      	ldr	r4, [r4, r6]
1000b714:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b716:	220f      	movs	r2, #15
1000b718:	4010      	ands	r0, r2
1000b71a:	4c09      	ldr	r4, [pc, #36]	; (1000b740 <gpio_register_callback+0xcc>)
1000b71c:	00dd      	lsls	r5, r3, #3
1000b71e:	18ea      	adds	r2, r5, r3
1000b720:	0052      	lsls	r2, r2, #1
1000b722:	1812      	adds	r2, r2, r0
1000b724:	0092      	lsls	r2, r2, #2
1000b726:	18a2      	adds	r2, r4, r2
1000b728:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b72a:	18ea      	adds	r2, r5, r3
1000b72c:	00d2      	lsls	r2, r2, #3
1000b72e:	18a2      	adds	r2, r4, r2
1000b730:	3244      	adds	r2, #68	; 0x44
1000b732:	2101      	movs	r1, #1
1000b734:	4081      	lsls	r1, r0
1000b736:	8813      	ldrh	r3, [r2, #0]
1000b738:	430b      	orrs	r3, r1
1000b73a:	8013      	strh	r3, [r2, #0]
}
1000b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b73e:	46c0      	nop			; (mov r8, r8)
1000b740:	1001a308 	.word	0x1001a308

1000b744 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000b744:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b746:	280f      	cmp	r0, #15
1000b748:	d805      	bhi.n	1000b756 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b74a:	2280      	movs	r2, #128	; 0x80
1000b74c:	0412      	lsls	r2, r2, #16
1000b74e:	4b12      	ldr	r3, [pc, #72]	; (1000b798 <gpio_enable_callback+0x54>)
1000b750:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000b752:	2200      	movs	r2, #0
1000b754:	e00c      	b.n	1000b770 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000b756:	281f      	cmp	r0, #31
1000b758:	d805      	bhi.n	1000b766 <gpio_enable_callback+0x22>
1000b75a:	2280      	movs	r2, #128	; 0x80
1000b75c:	0452      	lsls	r2, r2, #17
1000b75e:	4b0e      	ldr	r3, [pc, #56]	; (1000b798 <gpio_enable_callback+0x54>)
1000b760:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000b762:	2201      	movs	r2, #1
1000b764:	e004      	b.n	1000b770 <gpio_enable_callback+0x2c>
1000b766:	2280      	movs	r2, #128	; 0x80
1000b768:	0492      	lsls	r2, r2, #18
1000b76a:	4b0b      	ldr	r3, [pc, #44]	; (1000b798 <gpio_enable_callback+0x54>)
1000b76c:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000b76e:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000b770:	230f      	movs	r3, #15
1000b772:	4018      	ands	r0, r3
1000b774:	2101      	movs	r1, #1
1000b776:	4081      	lsls	r1, r0
1000b778:	4c08      	ldr	r4, [pc, #32]	; (1000b79c <gpio_enable_callback+0x58>)
1000b77a:	00d5      	lsls	r5, r2, #3
1000b77c:	18ab      	adds	r3, r5, r2
1000b77e:	00db      	lsls	r3, r3, #3
1000b780:	18e3      	adds	r3, r4, r3
1000b782:	3346      	adds	r3, #70	; 0x46
1000b784:	8818      	ldrh	r0, [r3, #0]
1000b786:	4308      	orrs	r0, r1
1000b788:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000b78a:	18aa      	adds	r2, r5, r2
1000b78c:	00d2      	lsls	r2, r2, #3
1000b78e:	5913      	ldr	r3, [r2, r4]
1000b790:	b289      	uxth	r1, r1
1000b792:	8419      	strh	r1, [r3, #32]
}
1000b794:	bd30      	pop	{r4, r5, pc}
1000b796:	46c0      	nop			; (mov r8, r8)
1000b798:	e000e100 	.word	0xe000e100
1000b79c:	1001a308 	.word	0x1001a308

1000b7a0 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b7a0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b7a2:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b7a4:	280f      	cmp	r0, #15
1000b7a6:	d904      	bls.n	1000b7b2 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b7a8:	221f      	movs	r2, #31
1000b7aa:	4282      	cmp	r2, r0
1000b7ac:	415b      	adcs	r3, r3
1000b7ae:	3a1d      	subs	r2, #29
1000b7b0:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b7b2:	220f      	movs	r2, #15
1000b7b4:	4010      	ands	r0, r2
1000b7b6:	2101      	movs	r1, #1
1000b7b8:	4081      	lsls	r1, r0
1000b7ba:	4c07      	ldr	r4, [pc, #28]	; (1000b7d8 <gpio_disable_callback+0x38>)
1000b7bc:	00dd      	lsls	r5, r3, #3
1000b7be:	18ea      	adds	r2, r5, r3
1000b7c0:	00d2      	lsls	r2, r2, #3
1000b7c2:	18a2      	adds	r2, r4, r2
1000b7c4:	3246      	adds	r2, #70	; 0x46
1000b7c6:	8810      	ldrh	r0, [r2, #0]
1000b7c8:	4388      	bics	r0, r1
1000b7ca:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b7cc:	18eb      	adds	r3, r5, r3
1000b7ce:	00db      	lsls	r3, r3, #3
1000b7d0:	591b      	ldr	r3, [r3, r4]
1000b7d2:	b289      	uxth	r1, r1
1000b7d4:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b7d6:	bd30      	pop	{r4, r5, pc}
1000b7d8:	1001a308 	.word	0x1001a308

1000b7dc <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b7dc:	b510      	push	{r4, lr}
1000b7de:	4a11      	ldr	r2, [pc, #68]	; (1000b824 <gpio_init+0x48>)
1000b7e0:	0010      	movs	r0, r2
1000b7e2:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b7e4:	2100      	movs	r1, #0
1000b7e6:	e007      	b.n	1000b7f8 <gpio_init+0x1c>
1000b7e8:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b7ea:	4293      	cmp	r3, r2
1000b7ec:	d1fc      	bne.n	1000b7e8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b7ee:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b7f0:	8011      	strh	r1, [r2, #0]
1000b7f2:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b7f4:	4282      	cmp	r2, r0
1000b7f6:	d002      	beq.n	1000b7fe <gpio_init+0x22>
1000b7f8:	0013      	movs	r3, r2
1000b7fa:	3b40      	subs	r3, #64	; 0x40
1000b7fc:	e7f4      	b.n	1000b7e8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b7fe:	4b0a      	ldr	r3, [pc, #40]	; (1000b828 <gpio_init+0x4c>)
1000b800:	4a0a      	ldr	r2, [pc, #40]	; (1000b82c <gpio_init+0x50>)
1000b802:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b804:	4a0a      	ldr	r2, [pc, #40]	; (1000b830 <gpio_init+0x54>)
1000b806:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b808:	490a      	ldr	r1, [pc, #40]	; (1000b834 <gpio_init+0x58>)
1000b80a:	2290      	movs	r2, #144	; 0x90
1000b80c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b80e:	490a      	ldr	r1, [pc, #40]	; (1000b838 <gpio_init+0x5c>)
1000b810:	2027      	movs	r0, #39	; 0x27
1000b812:	4c0a      	ldr	r4, [pc, #40]	; (1000b83c <gpio_init+0x60>)
1000b814:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b816:	490a      	ldr	r1, [pc, #40]	; (1000b840 <gpio_init+0x64>)
1000b818:	2028      	movs	r0, #40	; 0x28
1000b81a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b81c:	4909      	ldr	r1, [pc, #36]	; (1000b844 <gpio_init+0x68>)
1000b81e:	2029      	movs	r0, #41	; 0x29
1000b820:	47a0      	blx	r4
}
1000b822:	bd10      	pop	{r4, pc}
1000b824:	1001a34c 	.word	0x1001a34c
1000b828:	1001a308 	.word	0x1001a308
1000b82c:	40010000 	.word	0x40010000
1000b830:	40011000 	.word	0x40011000
1000b834:	40013000 	.word	0x40013000
1000b838:	1000b0e5 	.word	0x1000b0e5
1000b83c:	1000c409 	.word	0x1000c409
1000b840:	1000b149 	.word	0x1000b149
1000b844:	1000b1b9 	.word	0x1000b1b9

1000b848 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000b848:	2801      	cmp	r0, #1
1000b84a:	d00d      	beq.n	1000b868 <system_clock_config+0x20>
1000b84c:	2800      	cmp	r0, #0
1000b84e:	d002      	beq.n	1000b856 <system_clock_config+0xe>
1000b850:	2802      	cmp	r0, #2
1000b852:	d01c      	beq.n	1000b88e <system_clock_config+0x46>
1000b854:	e02e      	b.n	1000b8b4 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b856:	4a18      	ldr	r2, [pc, #96]	; (1000b8b8 <system_clock_config+0x70>)
1000b858:	6990      	ldr	r0, [r2, #24]
1000b85a:	230c      	movs	r3, #12
1000b85c:	4303      	orrs	r3, r0
1000b85e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000b860:	4a16      	ldr	r2, [pc, #88]	; (1000b8bc <system_clock_config+0x74>)
1000b862:	4b17      	ldr	r3, [pc, #92]	; (1000b8c0 <system_clock_config+0x78>)
1000b864:	601a      	str	r2, [r3, #0]
			break;
1000b866:	e01a      	b.n	1000b89e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b868:	4b13      	ldr	r3, [pc, #76]	; (1000b8b8 <system_clock_config+0x70>)
1000b86a:	6998      	ldr	r0, [r3, #24]
1000b86c:	2208      	movs	r2, #8
1000b86e:	4302      	orrs	r2, r0
1000b870:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b872:	699a      	ldr	r2, [r3, #24]
1000b874:	2004      	movs	r0, #4
1000b876:	4382      	bics	r2, r0
1000b878:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b87a:	4a12      	ldr	r2, [pc, #72]	; (1000b8c4 <system_clock_config+0x7c>)
1000b87c:	6853      	ldr	r3, [r2, #4]
1000b87e:	2080      	movs	r0, #128	; 0x80
1000b880:	0300      	lsls	r0, r0, #12
1000b882:	4303      	orrs	r3, r0
1000b884:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b886:	4a10      	ldr	r2, [pc, #64]	; (1000b8c8 <system_clock_config+0x80>)
1000b888:	4b0d      	ldr	r3, [pc, #52]	; (1000b8c0 <system_clock_config+0x78>)
1000b88a:	601a      	str	r2, [r3, #0]
			break;
1000b88c:	e007      	b.n	1000b89e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b88e:	4a0a      	ldr	r2, [pc, #40]	; (1000b8b8 <system_clock_config+0x70>)
1000b890:	6993      	ldr	r3, [r2, #24]
1000b892:	200c      	movs	r0, #12
1000b894:	4383      	bics	r3, r0
1000b896:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b898:	4a08      	ldr	r2, [pc, #32]	; (1000b8bc <system_clock_config+0x74>)
1000b89a:	4b09      	ldr	r3, [pc, #36]	; (1000b8c0 <system_clock_config+0x78>)
1000b89c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b89e:	4b06      	ldr	r3, [pc, #24]	; (1000b8b8 <system_clock_config+0x70>)
1000b8a0:	699a      	ldr	r2, [r3, #24]
1000b8a2:	2003      	movs	r0, #3
1000b8a4:	4382      	bics	r2, r0
1000b8a6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b8a8:	699a      	ldr	r2, [r3, #24]
1000b8aa:	4001      	ands	r1, r0
1000b8ac:	4311      	orrs	r1, r2
1000b8ae:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b8b0:	2000      	movs	r0, #0
1000b8b2:	e000      	b.n	1000b8b6 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b8b4:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b8b6:	4770      	bx	lr
1000b8b8:	4000b000 	.word	0x4000b000
1000b8bc:	018cba80 	.word	0x018cba80
1000b8c0:	1001a3e0 	.word	0x1001a3e0
1000b8c4:	4000f000 	.word	0x4000f000
1000b8c8:	001e8480 	.word	0x001e8480

1000b8cc <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b8cc:	4b01      	ldr	r3, [pc, #4]	; (1000b8d4 <system_clock_get_value+0x8>)
1000b8ce:	6818      	ldr	r0, [r3, #0]
}
1000b8d0:	4770      	bx	lr
1000b8d2:	46c0      	nop			; (mov r8, r8)
1000b8d4:	1001a3e0 	.word	0x1001a3e0

1000b8d8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b8d8:	b500      	push	{lr}
	switch (peripheral) {
1000b8da:	2835      	cmp	r0, #53	; 0x35
1000b8dc:	d900      	bls.n	1000b8e0 <system_clock_peripheral_enable+0x8>
1000b8de:	e1a2      	b.n	1000bc26 <system_clock_peripheral_enable+0x34e>
1000b8e0:	0080      	lsls	r0, r0, #2
1000b8e2:	4bd2      	ldr	r3, [pc, #840]	; (1000bc2c <system_clock_peripheral_enable+0x354>)
1000b8e4:	581b      	ldr	r3, [r3, r0]
1000b8e6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b8e8:	4ad1      	ldr	r2, [pc, #836]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b8ea:	68d1      	ldr	r1, [r2, #12]
1000b8ec:	2302      	movs	r3, #2
1000b8ee:	430b      	orrs	r3, r1
1000b8f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8f2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b8f4:	e198      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b8f6:	4ace      	ldr	r2, [pc, #824]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b8f8:	68d1      	ldr	r1, [r2, #12]
1000b8fa:	2304      	movs	r3, #4
1000b8fc:	430b      	orrs	r3, r1
1000b8fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b900:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b902:	e191      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b904:	4aca      	ldr	r2, [pc, #808]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b906:	68d1      	ldr	r1, [r2, #12]
1000b908:	2308      	movs	r3, #8
1000b90a:	430b      	orrs	r3, r1
1000b90c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b90e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b910:	e18a      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b912:	4ac7      	ldr	r2, [pc, #796]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b914:	68d1      	ldr	r1, [r2, #12]
1000b916:	2310      	movs	r3, #16
1000b918:	430b      	orrs	r3, r1
1000b91a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b91c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b91e:	e183      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b920:	4ac3      	ldr	r2, [pc, #780]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b922:	68d1      	ldr	r1, [r2, #12]
1000b924:	2320      	movs	r3, #32
1000b926:	430b      	orrs	r3, r1
1000b928:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b92a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b92c:	e17c      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b92e:	4ac0      	ldr	r2, [pc, #768]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b930:	68d1      	ldr	r1, [r2, #12]
1000b932:	2380      	movs	r3, #128	; 0x80
1000b934:	430b      	orrs	r3, r1
1000b936:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b93a:	e175      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b93c:	4abc      	ldr	r2, [pc, #752]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b93e:	68d3      	ldr	r3, [r2, #12]
1000b940:	2180      	movs	r1, #128	; 0x80
1000b942:	0049      	lsls	r1, r1, #1
1000b944:	430b      	orrs	r3, r1
1000b946:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b94a:	e16d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b94c:	4ab8      	ldr	r2, [pc, #736]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b94e:	68d3      	ldr	r3, [r2, #12]
1000b950:	2180      	movs	r1, #128	; 0x80
1000b952:	0109      	lsls	r1, r1, #4
1000b954:	430b      	orrs	r3, r1
1000b956:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b95a:	e165      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b95c:	4ab4      	ldr	r2, [pc, #720]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b95e:	68d3      	ldr	r3, [r2, #12]
1000b960:	2180      	movs	r1, #128	; 0x80
1000b962:	0149      	lsls	r1, r1, #5
1000b964:	430b      	orrs	r3, r1
1000b966:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b968:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b96a:	e15d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b96c:	4ab0      	ldr	r2, [pc, #704]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b96e:	68d3      	ldr	r3, [r2, #12]
1000b970:	2180      	movs	r1, #128	; 0x80
1000b972:	0189      	lsls	r1, r1, #6
1000b974:	430b      	orrs	r3, r1
1000b976:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b978:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b97a:	e155      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b97c:	4aac      	ldr	r2, [pc, #688]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b97e:	68d3      	ldr	r3, [r2, #12]
1000b980:	2180      	movs	r1, #128	; 0x80
1000b982:	01c9      	lsls	r1, r1, #7
1000b984:	430b      	orrs	r3, r1
1000b986:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b98a:	e14d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b98c:	4aa8      	ldr	r2, [pc, #672]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b98e:	68d3      	ldr	r3, [r2, #12]
1000b990:	2180      	movs	r1, #128	; 0x80
1000b992:	0209      	lsls	r1, r1, #8
1000b994:	430b      	orrs	r3, r1
1000b996:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b99a:	e145      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b99c:	4aa4      	ldr	r2, [pc, #656]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b99e:	68d3      	ldr	r3, [r2, #12]
1000b9a0:	2180      	movs	r1, #128	; 0x80
1000b9a2:	0249      	lsls	r1, r1, #9
1000b9a4:	430b      	orrs	r3, r1
1000b9a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b9aa:	e13d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9ac:	4aa0      	ldr	r2, [pc, #640]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9ae:	68d3      	ldr	r3, [r2, #12]
1000b9b0:	2180      	movs	r1, #128	; 0x80
1000b9b2:	0289      	lsls	r1, r1, #10
1000b9b4:	430b      	orrs	r3, r1
1000b9b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b9ba:	e135      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9bc:	4a9c      	ldr	r2, [pc, #624]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9be:	68d3      	ldr	r3, [r2, #12]
1000b9c0:	2180      	movs	r1, #128	; 0x80
1000b9c2:	02c9      	lsls	r1, r1, #11
1000b9c4:	430b      	orrs	r3, r1
1000b9c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b9ca:	e12d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9cc:	4a98      	ldr	r2, [pc, #608]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9ce:	68d3      	ldr	r3, [r2, #12]
1000b9d0:	2180      	movs	r1, #128	; 0x80
1000b9d2:	0309      	lsls	r1, r1, #12
1000b9d4:	430b      	orrs	r3, r1
1000b9d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b9da:	e125      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9dc:	4a94      	ldr	r2, [pc, #592]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9de:	68d3      	ldr	r3, [r2, #12]
1000b9e0:	2180      	movs	r1, #128	; 0x80
1000b9e2:	0349      	lsls	r1, r1, #13
1000b9e4:	430b      	orrs	r3, r1
1000b9e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b9ea:	e11d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9ec:	4a90      	ldr	r2, [pc, #576]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9ee:	68d3      	ldr	r3, [r2, #12]
1000b9f0:	2180      	movs	r1, #128	; 0x80
1000b9f2:	0389      	lsls	r1, r1, #14
1000b9f4:	430b      	orrs	r3, r1
1000b9f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b9fa:	e115      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b9fc:	4a8c      	ldr	r2, [pc, #560]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000b9fe:	68d3      	ldr	r3, [r2, #12]
1000ba00:	2180      	movs	r1, #128	; 0x80
1000ba02:	03c9      	lsls	r1, r1, #15
1000ba04:	430b      	orrs	r3, r1
1000ba06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ba0a:	e10d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba0c:	4a88      	ldr	r2, [pc, #544]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba0e:	68d3      	ldr	r3, [r2, #12]
1000ba10:	2180      	movs	r1, #128	; 0x80
1000ba12:	0409      	lsls	r1, r1, #16
1000ba14:	430b      	orrs	r3, r1
1000ba16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000ba1a:	e105      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba1c:	4a84      	ldr	r2, [pc, #528]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba1e:	68d3      	ldr	r3, [r2, #12]
1000ba20:	2180      	movs	r1, #128	; 0x80
1000ba22:	0449      	lsls	r1, r1, #17
1000ba24:	430b      	orrs	r3, r1
1000ba26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ba2a:	e0fd      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba2c:	4a80      	ldr	r2, [pc, #512]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba2e:	68d3      	ldr	r3, [r2, #12]
1000ba30:	2180      	movs	r1, #128	; 0x80
1000ba32:	0489      	lsls	r1, r1, #18
1000ba34:	430b      	orrs	r3, r1
1000ba36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ba3a:	e0f5      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba3c:	4a7c      	ldr	r2, [pc, #496]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba3e:	68d3      	ldr	r3, [r2, #12]
1000ba40:	2180      	movs	r1, #128	; 0x80
1000ba42:	04c9      	lsls	r1, r1, #19
1000ba44:	430b      	orrs	r3, r1
1000ba46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ba4a:	e0ed      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba4c:	4a78      	ldr	r2, [pc, #480]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba4e:	68d3      	ldr	r3, [r2, #12]
1000ba50:	2180      	movs	r1, #128	; 0x80
1000ba52:	0509      	lsls	r1, r1, #20
1000ba54:	430b      	orrs	r3, r1
1000ba56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ba5a:	e0e5      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba5c:	4a74      	ldr	r2, [pc, #464]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba5e:	68d3      	ldr	r3, [r2, #12]
1000ba60:	2180      	movs	r1, #128	; 0x80
1000ba62:	0549      	lsls	r1, r1, #21
1000ba64:	430b      	orrs	r3, r1
1000ba66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ba6a:	e0dd      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba6c:	4a70      	ldr	r2, [pc, #448]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba6e:	68d3      	ldr	r3, [r2, #12]
1000ba70:	2180      	movs	r1, #128	; 0x80
1000ba72:	0589      	lsls	r1, r1, #22
1000ba74:	430b      	orrs	r3, r1
1000ba76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ba7a:	e0d5      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba7c:	4a6c      	ldr	r2, [pc, #432]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba7e:	68d3      	ldr	r3, [r2, #12]
1000ba80:	2180      	movs	r1, #128	; 0x80
1000ba82:	05c9      	lsls	r1, r1, #23
1000ba84:	430b      	orrs	r3, r1
1000ba86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ba8a:	e0cd      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ba8c:	4a68      	ldr	r2, [pc, #416]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba8e:	6911      	ldr	r1, [r2, #16]
1000ba90:	2301      	movs	r3, #1
1000ba92:	430b      	orrs	r3, r1
1000ba94:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ba98:	e0c6      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ba9a:	4a65      	ldr	r2, [pc, #404]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000ba9c:	6911      	ldr	r1, [r2, #16]
1000ba9e:	2302      	movs	r3, #2
1000baa0:	430b      	orrs	r3, r1
1000baa2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000baa6:	e0bf      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000baa8:	4a61      	ldr	r2, [pc, #388]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000baaa:	6911      	ldr	r1, [r2, #16]
1000baac:	2304      	movs	r3, #4
1000baae:	430b      	orrs	r3, r1
1000bab0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bab2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bab4:	e0b8      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bab6:	4a5e      	ldr	r2, [pc, #376]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bab8:	6911      	ldr	r1, [r2, #16]
1000baba:	2308      	movs	r3, #8
1000babc:	430b      	orrs	r3, r1
1000babe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bac2:	e0b1      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bac4:	4a5a      	ldr	r2, [pc, #360]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bac6:	6911      	ldr	r1, [r2, #16]
1000bac8:	2310      	movs	r3, #16
1000baca:	430b      	orrs	r3, r1
1000bacc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bace:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bad0:	e0aa      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bad2:	4a57      	ldr	r2, [pc, #348]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bad4:	6911      	ldr	r1, [r2, #16]
1000bad6:	2320      	movs	r3, #32
1000bad8:	430b      	orrs	r3, r1
1000bada:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000badc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bade:	e0a3      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bae0:	4a53      	ldr	r2, [pc, #332]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bae2:	6911      	ldr	r1, [r2, #16]
1000bae4:	2340      	movs	r3, #64	; 0x40
1000bae6:	430b      	orrs	r3, r1
1000bae8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000baec:	e09c      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000baee:	4a50      	ldr	r2, [pc, #320]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000baf0:	6911      	ldr	r1, [r2, #16]
1000baf2:	2380      	movs	r3, #128	; 0x80
1000baf4:	430b      	orrs	r3, r1
1000baf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bafa:	e095      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bafc:	4a4c      	ldr	r2, [pc, #304]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bafe:	6913      	ldr	r3, [r2, #16]
1000bb00:	2180      	movs	r1, #128	; 0x80
1000bb02:	0049      	lsls	r1, r1, #1
1000bb04:	430b      	orrs	r3, r1
1000bb06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bb0a:	e08d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb0c:	4a48      	ldr	r2, [pc, #288]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb0e:	6913      	ldr	r3, [r2, #16]
1000bb10:	2180      	movs	r1, #128	; 0x80
1000bb12:	0089      	lsls	r1, r1, #2
1000bb14:	430b      	orrs	r3, r1
1000bb16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bb1a:	e085      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb1c:	4a44      	ldr	r2, [pc, #272]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb1e:	6913      	ldr	r3, [r2, #16]
1000bb20:	2180      	movs	r1, #128	; 0x80
1000bb22:	00c9      	lsls	r1, r1, #3
1000bb24:	430b      	orrs	r3, r1
1000bb26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bb2a:	e07d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb2c:	4a40      	ldr	r2, [pc, #256]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb2e:	6913      	ldr	r3, [r2, #16]
1000bb30:	2180      	movs	r1, #128	; 0x80
1000bb32:	0109      	lsls	r1, r1, #4
1000bb34:	430b      	orrs	r3, r1
1000bb36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bb3a:	e075      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb3c:	4a3c      	ldr	r2, [pc, #240]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb3e:	6913      	ldr	r3, [r2, #16]
1000bb40:	2180      	movs	r1, #128	; 0x80
1000bb42:	0149      	lsls	r1, r1, #5
1000bb44:	430b      	orrs	r3, r1
1000bb46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bb4a:	e06d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb4c:	4a38      	ldr	r2, [pc, #224]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb4e:	6913      	ldr	r3, [r2, #16]
1000bb50:	2180      	movs	r1, #128	; 0x80
1000bb52:	0189      	lsls	r1, r1, #6
1000bb54:	430b      	orrs	r3, r1
1000bb56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bb5a:	e065      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb5c:	4a34      	ldr	r2, [pc, #208]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb5e:	6913      	ldr	r3, [r2, #16]
1000bb60:	2180      	movs	r1, #128	; 0x80
1000bb62:	01c9      	lsls	r1, r1, #7
1000bb64:	430b      	orrs	r3, r1
1000bb66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bb6a:	e05d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb6c:	4a30      	ldr	r2, [pc, #192]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb6e:	6913      	ldr	r3, [r2, #16]
1000bb70:	2180      	movs	r1, #128	; 0x80
1000bb72:	0209      	lsls	r1, r1, #8
1000bb74:	430b      	orrs	r3, r1
1000bb76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bb7a:	e055      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb7c:	4a2c      	ldr	r2, [pc, #176]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb7e:	6913      	ldr	r3, [r2, #16]
1000bb80:	2180      	movs	r1, #128	; 0x80
1000bb82:	0249      	lsls	r1, r1, #9
1000bb84:	430b      	orrs	r3, r1
1000bb86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bb8a:	e04d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb8c:	4a28      	ldr	r2, [pc, #160]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb8e:	6913      	ldr	r3, [r2, #16]
1000bb90:	2180      	movs	r1, #128	; 0x80
1000bb92:	0289      	lsls	r1, r1, #10
1000bb94:	430b      	orrs	r3, r1
1000bb96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bb9a:	e045      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bb9c:	4a24      	ldr	r2, [pc, #144]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bb9e:	6913      	ldr	r3, [r2, #16]
1000bba0:	2180      	movs	r1, #128	; 0x80
1000bba2:	02c9      	lsls	r1, r1, #11
1000bba4:	430b      	orrs	r3, r1
1000bba6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bba8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bbaa:	e03d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbac:	4a20      	ldr	r2, [pc, #128]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbae:	6913      	ldr	r3, [r2, #16]
1000bbb0:	2180      	movs	r1, #128	; 0x80
1000bbb2:	0309      	lsls	r1, r1, #12
1000bbb4:	430b      	orrs	r3, r1
1000bbb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bbba:	e035      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbbc:	4a1c      	ldr	r2, [pc, #112]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbbe:	6913      	ldr	r3, [r2, #16]
1000bbc0:	2180      	movs	r1, #128	; 0x80
1000bbc2:	0349      	lsls	r1, r1, #13
1000bbc4:	430b      	orrs	r3, r1
1000bbc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bbca:	e02d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbcc:	4a18      	ldr	r2, [pc, #96]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbce:	6913      	ldr	r3, [r2, #16]
1000bbd0:	2180      	movs	r1, #128	; 0x80
1000bbd2:	0389      	lsls	r1, r1, #14
1000bbd4:	430b      	orrs	r3, r1
1000bbd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bbda:	e025      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbdc:	4a14      	ldr	r2, [pc, #80]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbde:	6913      	ldr	r3, [r2, #16]
1000bbe0:	2180      	movs	r1, #128	; 0x80
1000bbe2:	03c9      	lsls	r1, r1, #15
1000bbe4:	430b      	orrs	r3, r1
1000bbe6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bbea:	e01d      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbec:	4a10      	ldr	r2, [pc, #64]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbee:	6913      	ldr	r3, [r2, #16]
1000bbf0:	2180      	movs	r1, #128	; 0x80
1000bbf2:	0409      	lsls	r1, r1, #16
1000bbf4:	430b      	orrs	r3, r1
1000bbf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bbfa:	e015      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bbfc:	4a0c      	ldr	r2, [pc, #48]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bbfe:	7d11      	ldrb	r1, [r2, #20]
1000bc00:	2301      	movs	r3, #1
1000bc02:	430b      	orrs	r3, r1
1000bc04:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bc08:	e00e      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bc0a:	4a09      	ldr	r2, [pc, #36]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bc0c:	7d11      	ldrb	r1, [r2, #20]
1000bc0e:	2302      	movs	r3, #2
1000bc10:	430b      	orrs	r3, r1
1000bc12:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bc16:	e007      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bc18:	4a05      	ldr	r2, [pc, #20]	; (1000bc30 <system_clock_peripheral_enable+0x358>)
1000bc1a:	7d11      	ldrb	r1, [r2, #20]
1000bc1c:	2304      	movs	r3, #4
1000bc1e:	430b      	orrs	r3, r1
1000bc20:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bc24:	e000      	b.n	1000bc28 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bc26:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bc28:	bd00      	pop	{pc}
1000bc2a:	46c0      	nop			; (mov r8, r8)
1000bc2c:	10017778 	.word	0x10017778
1000bc30:	4000b000 	.word	0x4000b000

1000bc34 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000bc34:	b500      	push	{lr}
	switch (peripheral) {
1000bc36:	2835      	cmp	r0, #53	; 0x35
1000bc38:	d900      	bls.n	1000bc3c <system_clock_peripheral_disable+0x8>
1000bc3a:	e17d      	b.n	1000bf38 <system_clock_peripheral_disable+0x304>
1000bc3c:	0080      	lsls	r0, r0, #2
1000bc3e:	4bbf      	ldr	r3, [pc, #764]	; (1000bf3c <system_clock_peripheral_disable+0x308>)
1000bc40:	581b      	ldr	r3, [r3, r0]
1000bc42:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc44:	4abe      	ldr	r2, [pc, #760]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc46:	68d3      	ldr	r3, [r2, #12]
1000bc48:	2102      	movs	r1, #2
1000bc4a:	438b      	bics	r3, r1
1000bc4c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc4e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bc50:	e173      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc52:	4abb      	ldr	r2, [pc, #748]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc54:	68d3      	ldr	r3, [r2, #12]
1000bc56:	2104      	movs	r1, #4
1000bc58:	438b      	bics	r3, r1
1000bc5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bc5e:	e16c      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc60:	4ab7      	ldr	r2, [pc, #732]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc62:	68d3      	ldr	r3, [r2, #12]
1000bc64:	2108      	movs	r1, #8
1000bc66:	438b      	bics	r3, r1
1000bc68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bc6c:	e165      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc6e:	4ab4      	ldr	r2, [pc, #720]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc70:	68d3      	ldr	r3, [r2, #12]
1000bc72:	2110      	movs	r1, #16
1000bc74:	438b      	bics	r3, r1
1000bc76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bc7a:	e15e      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc7c:	4ab0      	ldr	r2, [pc, #704]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc7e:	68d3      	ldr	r3, [r2, #12]
1000bc80:	2120      	movs	r1, #32
1000bc82:	438b      	bics	r3, r1
1000bc84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bc88:	e157      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc8a:	4aad      	ldr	r2, [pc, #692]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc8c:	68d3      	ldr	r3, [r2, #12]
1000bc8e:	2180      	movs	r1, #128	; 0x80
1000bc90:	438b      	bics	r3, r1
1000bc92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bc96:	e150      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bc98:	4aa9      	ldr	r2, [pc, #676]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bc9a:	68d1      	ldr	r1, [r2, #12]
1000bc9c:	4ba9      	ldr	r3, [pc, #676]	; (1000bf44 <system_clock_peripheral_disable+0x310>)
1000bc9e:	400b      	ands	r3, r1
1000bca0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bca2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bca4:	e149      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bca6:	4aa6      	ldr	r2, [pc, #664]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bca8:	68d1      	ldr	r1, [r2, #12]
1000bcaa:	4ba7      	ldr	r3, [pc, #668]	; (1000bf48 <system_clock_peripheral_disable+0x314>)
1000bcac:	400b      	ands	r3, r1
1000bcae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bcb2:	e142      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcb4:	4aa2      	ldr	r2, [pc, #648]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bcb6:	68d1      	ldr	r1, [r2, #12]
1000bcb8:	4ba4      	ldr	r3, [pc, #656]	; (1000bf4c <system_clock_peripheral_disable+0x318>)
1000bcba:	400b      	ands	r3, r1
1000bcbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bcc0:	e13b      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcc2:	4a9f      	ldr	r2, [pc, #636]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bcc4:	68d1      	ldr	r1, [r2, #12]
1000bcc6:	4ba2      	ldr	r3, [pc, #648]	; (1000bf50 <system_clock_peripheral_disable+0x31c>)
1000bcc8:	400b      	ands	r3, r1
1000bcca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bcce:	e134      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcd0:	4a9b      	ldr	r2, [pc, #620]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bcd2:	68d1      	ldr	r1, [r2, #12]
1000bcd4:	4b9f      	ldr	r3, [pc, #636]	; (1000bf54 <system_clock_peripheral_disable+0x320>)
1000bcd6:	400b      	ands	r3, r1
1000bcd8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bcdc:	e12d      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcde:	4a98      	ldr	r2, [pc, #608]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bce0:	68d1      	ldr	r1, [r2, #12]
1000bce2:	4b9d      	ldr	r3, [pc, #628]	; (1000bf58 <system_clock_peripheral_disable+0x324>)
1000bce4:	400b      	ands	r3, r1
1000bce6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bce8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bcea:	e126      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcec:	4a94      	ldr	r2, [pc, #592]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bcee:	68d1      	ldr	r1, [r2, #12]
1000bcf0:	4b9a      	ldr	r3, [pc, #616]	; (1000bf5c <system_clock_peripheral_disable+0x328>)
1000bcf2:	400b      	ands	r3, r1
1000bcf4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bcf8:	e11f      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bcfa:	4a91      	ldr	r2, [pc, #580]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bcfc:	68d1      	ldr	r1, [r2, #12]
1000bcfe:	4b98      	ldr	r3, [pc, #608]	; (1000bf60 <system_clock_peripheral_disable+0x32c>)
1000bd00:	400b      	ands	r3, r1
1000bd02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bd06:	e118      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd08:	4a8d      	ldr	r2, [pc, #564]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd0a:	68d1      	ldr	r1, [r2, #12]
1000bd0c:	4b95      	ldr	r3, [pc, #596]	; (1000bf64 <system_clock_peripheral_disable+0x330>)
1000bd0e:	400b      	ands	r3, r1
1000bd10:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bd14:	e111      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd16:	4a8a      	ldr	r2, [pc, #552]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd18:	68d1      	ldr	r1, [r2, #12]
1000bd1a:	4b93      	ldr	r3, [pc, #588]	; (1000bf68 <system_clock_peripheral_disable+0x334>)
1000bd1c:	400b      	ands	r3, r1
1000bd1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bd22:	e10a      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd24:	4a86      	ldr	r2, [pc, #536]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd26:	68d1      	ldr	r1, [r2, #12]
1000bd28:	4b90      	ldr	r3, [pc, #576]	; (1000bf6c <system_clock_peripheral_disable+0x338>)
1000bd2a:	400b      	ands	r3, r1
1000bd2c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bd30:	e103      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd32:	4a83      	ldr	r2, [pc, #524]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd34:	68d1      	ldr	r1, [r2, #12]
1000bd36:	4b8e      	ldr	r3, [pc, #568]	; (1000bf70 <system_clock_peripheral_disable+0x33c>)
1000bd38:	400b      	ands	r3, r1
1000bd3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bd3e:	e0fc      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd40:	4a7f      	ldr	r2, [pc, #508]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd42:	68d1      	ldr	r1, [r2, #12]
1000bd44:	4b8b      	ldr	r3, [pc, #556]	; (1000bf74 <system_clock_peripheral_disable+0x340>)
1000bd46:	400b      	ands	r3, r1
1000bd48:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bd4c:	e0f5      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd4e:	4a7c      	ldr	r2, [pc, #496]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd50:	68d1      	ldr	r1, [r2, #12]
1000bd52:	4b89      	ldr	r3, [pc, #548]	; (1000bf78 <system_clock_peripheral_disable+0x344>)
1000bd54:	400b      	ands	r3, r1
1000bd56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bd5a:	e0ee      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd5c:	4a78      	ldr	r2, [pc, #480]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd5e:	68d1      	ldr	r1, [r2, #12]
1000bd60:	4b86      	ldr	r3, [pc, #536]	; (1000bf7c <system_clock_peripheral_disable+0x348>)
1000bd62:	400b      	ands	r3, r1
1000bd64:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bd68:	e0e7      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd6a:	4a75      	ldr	r2, [pc, #468]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd6c:	68d1      	ldr	r1, [r2, #12]
1000bd6e:	4b84      	ldr	r3, [pc, #528]	; (1000bf80 <system_clock_peripheral_disable+0x34c>)
1000bd70:	400b      	ands	r3, r1
1000bd72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bd76:	e0e0      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd78:	4a71      	ldr	r2, [pc, #452]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd7a:	68d1      	ldr	r1, [r2, #12]
1000bd7c:	4b81      	ldr	r3, [pc, #516]	; (1000bf84 <system_clock_peripheral_disable+0x350>)
1000bd7e:	400b      	ands	r3, r1
1000bd80:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bd84:	e0d9      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd86:	4a6e      	ldr	r2, [pc, #440]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd88:	68d1      	ldr	r1, [r2, #12]
1000bd8a:	4b7f      	ldr	r3, [pc, #508]	; (1000bf88 <system_clock_peripheral_disable+0x354>)
1000bd8c:	400b      	ands	r3, r1
1000bd8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bd92:	e0d2      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd94:	4a6a      	ldr	r2, [pc, #424]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bd96:	68d1      	ldr	r1, [r2, #12]
1000bd98:	4b7c      	ldr	r3, [pc, #496]	; (1000bf8c <system_clock_peripheral_disable+0x358>)
1000bd9a:	400b      	ands	r3, r1
1000bd9c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bda0:	e0cb      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bda2:	4a67      	ldr	r2, [pc, #412]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bda4:	68d1      	ldr	r1, [r2, #12]
1000bda6:	4b7a      	ldr	r3, [pc, #488]	; (1000bf90 <system_clock_peripheral_disable+0x35c>)
1000bda8:	400b      	ands	r3, r1
1000bdaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bdae:	e0c4      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdb0:	4a63      	ldr	r2, [pc, #396]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bdb2:	68d1      	ldr	r1, [r2, #12]
1000bdb4:	4b77      	ldr	r3, [pc, #476]	; (1000bf94 <system_clock_peripheral_disable+0x360>)
1000bdb6:	400b      	ands	r3, r1
1000bdb8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bdbc:	e0bd      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bdbe:	4a60      	ldr	r2, [pc, #384]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bdc0:	6913      	ldr	r3, [r2, #16]
1000bdc2:	2101      	movs	r1, #1
1000bdc4:	438b      	bics	r3, r1
1000bdc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bdca:	e0b6      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bdcc:	4a5c      	ldr	r2, [pc, #368]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bdce:	6913      	ldr	r3, [r2, #16]
1000bdd0:	2102      	movs	r1, #2
1000bdd2:	438b      	bics	r3, r1
1000bdd4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdd6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bdd8:	e0af      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bdda:	4a59      	ldr	r2, [pc, #356]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bddc:	6913      	ldr	r3, [r2, #16]
1000bdde:	2104      	movs	r1, #4
1000bde0:	438b      	bics	r3, r1
1000bde2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bde4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bde6:	e0a8      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bde8:	4a55      	ldr	r2, [pc, #340]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bdea:	6913      	ldr	r3, [r2, #16]
1000bdec:	2108      	movs	r1, #8
1000bdee:	438b      	bics	r3, r1
1000bdf0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdf2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bdf4:	e0a1      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bdf6:	4a52      	ldr	r2, [pc, #328]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bdf8:	6913      	ldr	r3, [r2, #16]
1000bdfa:	2110      	movs	r1, #16
1000bdfc:	438b      	bics	r3, r1
1000bdfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000be02:	e09a      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be04:	4a4e      	ldr	r2, [pc, #312]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be06:	6913      	ldr	r3, [r2, #16]
1000be08:	2120      	movs	r1, #32
1000be0a:	438b      	bics	r3, r1
1000be0c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000be10:	e093      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be12:	4a4b      	ldr	r2, [pc, #300]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be14:	6913      	ldr	r3, [r2, #16]
1000be16:	2140      	movs	r1, #64	; 0x40
1000be18:	438b      	bics	r3, r1
1000be1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000be1e:	e08c      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be20:	4a47      	ldr	r2, [pc, #284]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be22:	6913      	ldr	r3, [r2, #16]
1000be24:	2180      	movs	r1, #128	; 0x80
1000be26:	438b      	bics	r3, r1
1000be28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000be2c:	e085      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be2e:	4a44      	ldr	r2, [pc, #272]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be30:	6911      	ldr	r1, [r2, #16]
1000be32:	4b44      	ldr	r3, [pc, #272]	; (1000bf44 <system_clock_peripheral_disable+0x310>)
1000be34:	400b      	ands	r3, r1
1000be36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000be3a:	e07e      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be3c:	4a40      	ldr	r2, [pc, #256]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be3e:	6911      	ldr	r1, [r2, #16]
1000be40:	4b55      	ldr	r3, [pc, #340]	; (1000bf98 <system_clock_peripheral_disable+0x364>)
1000be42:	400b      	ands	r3, r1
1000be44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000be48:	e077      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be4a:	4a3d      	ldr	r2, [pc, #244]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be4c:	6911      	ldr	r1, [r2, #16]
1000be4e:	4b53      	ldr	r3, [pc, #332]	; (1000bf9c <system_clock_peripheral_disable+0x368>)
1000be50:	400b      	ands	r3, r1
1000be52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000be56:	e070      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be58:	4a39      	ldr	r2, [pc, #228]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be5a:	6911      	ldr	r1, [r2, #16]
1000be5c:	4b3a      	ldr	r3, [pc, #232]	; (1000bf48 <system_clock_peripheral_disable+0x314>)
1000be5e:	400b      	ands	r3, r1
1000be60:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000be64:	e069      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be66:	4a36      	ldr	r2, [pc, #216]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be68:	6911      	ldr	r1, [r2, #16]
1000be6a:	4b38      	ldr	r3, [pc, #224]	; (1000bf4c <system_clock_peripheral_disable+0x318>)
1000be6c:	400b      	ands	r3, r1
1000be6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000be72:	e062      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be74:	4a32      	ldr	r2, [pc, #200]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be76:	6911      	ldr	r1, [r2, #16]
1000be78:	4b35      	ldr	r3, [pc, #212]	; (1000bf50 <system_clock_peripheral_disable+0x31c>)
1000be7a:	400b      	ands	r3, r1
1000be7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000be80:	e05b      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be82:	4a2f      	ldr	r2, [pc, #188]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be84:	6911      	ldr	r1, [r2, #16]
1000be86:	4b33      	ldr	r3, [pc, #204]	; (1000bf54 <system_clock_peripheral_disable+0x320>)
1000be88:	400b      	ands	r3, r1
1000be8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000be8e:	e054      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be90:	4a2b      	ldr	r2, [pc, #172]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000be92:	6911      	ldr	r1, [r2, #16]
1000be94:	4b30      	ldr	r3, [pc, #192]	; (1000bf58 <system_clock_peripheral_disable+0x324>)
1000be96:	400b      	ands	r3, r1
1000be98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000be9c:	e04d      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000be9e:	4a28      	ldr	r2, [pc, #160]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bea0:	6911      	ldr	r1, [r2, #16]
1000bea2:	4b2e      	ldr	r3, [pc, #184]	; (1000bf5c <system_clock_peripheral_disable+0x328>)
1000bea4:	400b      	ands	r3, r1
1000bea6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000beaa:	e046      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000beac:	4a24      	ldr	r2, [pc, #144]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000beae:	6911      	ldr	r1, [r2, #16]
1000beb0:	4b2b      	ldr	r3, [pc, #172]	; (1000bf60 <system_clock_peripheral_disable+0x32c>)
1000beb2:	400b      	ands	r3, r1
1000beb4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000beb8:	e03f      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000beba:	4a21      	ldr	r2, [pc, #132]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bebc:	6911      	ldr	r1, [r2, #16]
1000bebe:	4b29      	ldr	r3, [pc, #164]	; (1000bf64 <system_clock_peripheral_disable+0x330>)
1000bec0:	400b      	ands	r3, r1
1000bec2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bec6:	e038      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bec8:	4a1d      	ldr	r2, [pc, #116]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000beca:	6911      	ldr	r1, [r2, #16]
1000becc:	4b26      	ldr	r3, [pc, #152]	; (1000bf68 <system_clock_peripheral_disable+0x334>)
1000bece:	400b      	ands	r3, r1
1000bed0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bed4:	e031      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bed6:	4a1a      	ldr	r2, [pc, #104]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bed8:	6911      	ldr	r1, [r2, #16]
1000beda:	4b24      	ldr	r3, [pc, #144]	; (1000bf6c <system_clock_peripheral_disable+0x338>)
1000bedc:	400b      	ands	r3, r1
1000bede:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bee2:	e02a      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bee4:	4a16      	ldr	r2, [pc, #88]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bee6:	6911      	ldr	r1, [r2, #16]
1000bee8:	4b21      	ldr	r3, [pc, #132]	; (1000bf70 <system_clock_peripheral_disable+0x33c>)
1000beea:	400b      	ands	r3, r1
1000beec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bef0:	e023      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bef2:	4a13      	ldr	r2, [pc, #76]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bef4:	6911      	ldr	r1, [r2, #16]
1000bef6:	4b1f      	ldr	r3, [pc, #124]	; (1000bf74 <system_clock_peripheral_disable+0x340>)
1000bef8:	400b      	ands	r3, r1
1000befa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000befc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000befe:	e01c      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf00:	4a0f      	ldr	r2, [pc, #60]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bf02:	6911      	ldr	r1, [r2, #16]
1000bf04:	4b1c      	ldr	r3, [pc, #112]	; (1000bf78 <system_clock_peripheral_disable+0x344>)
1000bf06:	400b      	ands	r3, r1
1000bf08:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bf0c:	e015      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bf0e:	4a0c      	ldr	r2, [pc, #48]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bf10:	7d13      	ldrb	r3, [r2, #20]
1000bf12:	2101      	movs	r1, #1
1000bf14:	438b      	bics	r3, r1
1000bf16:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bf1a:	e00e      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bf1c:	4a08      	ldr	r2, [pc, #32]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bf1e:	7d13      	ldrb	r3, [r2, #20]
1000bf20:	2102      	movs	r1, #2
1000bf22:	438b      	bics	r3, r1
1000bf24:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bf28:	e007      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000bf2a:	4a05      	ldr	r2, [pc, #20]	; (1000bf40 <system_clock_peripheral_disable+0x30c>)
1000bf2c:	7d13      	ldrb	r3, [r2, #20]
1000bf2e:	2104      	movs	r1, #4
1000bf30:	438b      	bics	r3, r1
1000bf32:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bf36:	e000      	b.n	1000bf3a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bf38:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bf3a:	bd00      	pop	{pc}
1000bf3c:	10017850 	.word	0x10017850
1000bf40:	4000b000 	.word	0x4000b000
1000bf44:	fffffeff 	.word	0xfffffeff
1000bf48:	fffff7ff 	.word	0xfffff7ff
1000bf4c:	ffffefff 	.word	0xffffefff
1000bf50:	ffffdfff 	.word	0xffffdfff
1000bf54:	ffffbfff 	.word	0xffffbfff
1000bf58:	ffff7fff 	.word	0xffff7fff
1000bf5c:	fffeffff 	.word	0xfffeffff
1000bf60:	fffdffff 	.word	0xfffdffff
1000bf64:	fffbffff 	.word	0xfffbffff
1000bf68:	fff7ffff 	.word	0xfff7ffff
1000bf6c:	ffefffff 	.word	0xffefffff
1000bf70:	ffdfffff 	.word	0xffdfffff
1000bf74:	ffbfffff 	.word	0xffbfffff
1000bf78:	ff7fffff 	.word	0xff7fffff
1000bf7c:	feffffff 	.word	0xfeffffff
1000bf80:	fdffffff 	.word	0xfdffffff
1000bf84:	fbffffff 	.word	0xfbffffff
1000bf88:	f7ffffff 	.word	0xf7ffffff
1000bf8c:	efffffff 	.word	0xefffffff
1000bf90:	dfffffff 	.word	0xdfffffff
1000bf94:	bfffffff 	.word	0xbfffffff
1000bf98:	fffffdff 	.word	0xfffffdff
1000bf9c:	fffffbff 	.word	0xfffffbff

1000bfa0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000bfa0:	b500      	push	{lr}
	switch (peripheral) {
1000bfa2:	2843      	cmp	r0, #67	; 0x43
1000bfa4:	d900      	bls.n	1000bfa8 <system_peripheral_reset+0x8>
1000bfa6:	e223      	b.n	1000c3f0 <system_peripheral_reset+0x450>
1000bfa8:	0080      	lsls	r0, r0, #2
1000bfaa:	4be0      	ldr	r3, [pc, #896]	; (1000c32c <system_peripheral_reset+0x38c>)
1000bfac:	581b      	ldr	r3, [r3, r0]
1000bfae:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfb0:	4bdf      	ldr	r3, [pc, #892]	; (1000c330 <system_peripheral_reset+0x390>)
1000bfb2:	6859      	ldr	r1, [r3, #4]
1000bfb4:	2202      	movs	r2, #2
1000bfb6:	4391      	bics	r1, r2
1000bfb8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfba:	6859      	ldr	r1, [r3, #4]
1000bfbc:	430a      	orrs	r2, r1
1000bfbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000bfc2:	e216      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfc4:	4bda      	ldr	r3, [pc, #872]	; (1000c330 <system_peripheral_reset+0x390>)
1000bfc6:	6859      	ldr	r1, [r3, #4]
1000bfc8:	2204      	movs	r2, #4
1000bfca:	4391      	bics	r1, r2
1000bfcc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfce:	6859      	ldr	r1, [r3, #4]
1000bfd0:	430a      	orrs	r2, r1
1000bfd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000bfd6:	e20c      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfd8:	4bd5      	ldr	r3, [pc, #852]	; (1000c330 <system_peripheral_reset+0x390>)
1000bfda:	6859      	ldr	r1, [r3, #4]
1000bfdc:	2208      	movs	r2, #8
1000bfde:	4391      	bics	r1, r2
1000bfe0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfe2:	6859      	ldr	r1, [r3, #4]
1000bfe4:	430a      	orrs	r2, r1
1000bfe6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfe8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000bfea:	e202      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfec:	4bd0      	ldr	r3, [pc, #832]	; (1000c330 <system_peripheral_reset+0x390>)
1000bfee:	6859      	ldr	r1, [r3, #4]
1000bff0:	2210      	movs	r2, #16
1000bff2:	4391      	bics	r1, r2
1000bff4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bff6:	6859      	ldr	r1, [r3, #4]
1000bff8:	430a      	orrs	r2, r1
1000bffa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bffc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000bffe:	e1f8      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c000:	4bcb      	ldr	r3, [pc, #812]	; (1000c330 <system_peripheral_reset+0x390>)
1000c002:	6859      	ldr	r1, [r3, #4]
1000c004:	2220      	movs	r2, #32
1000c006:	4391      	bics	r1, r2
1000c008:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c00a:	6859      	ldr	r1, [r3, #4]
1000c00c:	430a      	orrs	r2, r1
1000c00e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c010:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c012:	e1ee      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c014:	4bc6      	ldr	r3, [pc, #792]	; (1000c330 <system_peripheral_reset+0x390>)
1000c016:	6859      	ldr	r1, [r3, #4]
1000c018:	2240      	movs	r2, #64	; 0x40
1000c01a:	4391      	bics	r1, r2
1000c01c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c01e:	6859      	ldr	r1, [r3, #4]
1000c020:	430a      	orrs	r2, r1
1000c022:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c024:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c026:	e1e4      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c028:	4bc1      	ldr	r3, [pc, #772]	; (1000c330 <system_peripheral_reset+0x390>)
1000c02a:	6859      	ldr	r1, [r3, #4]
1000c02c:	2280      	movs	r2, #128	; 0x80
1000c02e:	4391      	bics	r1, r2
1000c030:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c032:	6859      	ldr	r1, [r3, #4]
1000c034:	430a      	orrs	r2, r1
1000c036:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c038:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c03a:	e1da      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c03c:	4bbc      	ldr	r3, [pc, #752]	; (1000c330 <system_peripheral_reset+0x390>)
1000c03e:	6859      	ldr	r1, [r3, #4]
1000c040:	4abc      	ldr	r2, [pc, #752]	; (1000c334 <system_peripheral_reset+0x394>)
1000c042:	400a      	ands	r2, r1
1000c044:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c046:	685a      	ldr	r2, [r3, #4]
1000c048:	2180      	movs	r1, #128	; 0x80
1000c04a:	0049      	lsls	r1, r1, #1
1000c04c:	430a      	orrs	r2, r1
1000c04e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c050:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c052:	e1ce      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c054:	4bb6      	ldr	r3, [pc, #728]	; (1000c330 <system_peripheral_reset+0x390>)
1000c056:	6859      	ldr	r1, [r3, #4]
1000c058:	4ab7      	ldr	r2, [pc, #732]	; (1000c338 <system_peripheral_reset+0x398>)
1000c05a:	400a      	ands	r2, r1
1000c05c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c05e:	685a      	ldr	r2, [r3, #4]
1000c060:	2180      	movs	r1, #128	; 0x80
1000c062:	0089      	lsls	r1, r1, #2
1000c064:	430a      	orrs	r2, r1
1000c066:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c068:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c06a:	e1c2      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c06c:	4bb0      	ldr	r3, [pc, #704]	; (1000c330 <system_peripheral_reset+0x390>)
1000c06e:	6859      	ldr	r1, [r3, #4]
1000c070:	4ab2      	ldr	r2, [pc, #712]	; (1000c33c <system_peripheral_reset+0x39c>)
1000c072:	400a      	ands	r2, r1
1000c074:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c076:	685a      	ldr	r2, [r3, #4]
1000c078:	2180      	movs	r1, #128	; 0x80
1000c07a:	00c9      	lsls	r1, r1, #3
1000c07c:	430a      	orrs	r2, r1
1000c07e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c080:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c082:	e1b6      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c084:	4baa      	ldr	r3, [pc, #680]	; (1000c330 <system_peripheral_reset+0x390>)
1000c086:	6859      	ldr	r1, [r3, #4]
1000c088:	4aad      	ldr	r2, [pc, #692]	; (1000c340 <system_peripheral_reset+0x3a0>)
1000c08a:	400a      	ands	r2, r1
1000c08c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c08e:	685a      	ldr	r2, [r3, #4]
1000c090:	2180      	movs	r1, #128	; 0x80
1000c092:	0109      	lsls	r1, r1, #4
1000c094:	430a      	orrs	r2, r1
1000c096:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c098:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c09a:	e1aa      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c09c:	4ba4      	ldr	r3, [pc, #656]	; (1000c330 <system_peripheral_reset+0x390>)
1000c09e:	6859      	ldr	r1, [r3, #4]
1000c0a0:	4aa8      	ldr	r2, [pc, #672]	; (1000c344 <system_peripheral_reset+0x3a4>)
1000c0a2:	400a      	ands	r2, r1
1000c0a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0a6:	685a      	ldr	r2, [r3, #4]
1000c0a8:	2180      	movs	r1, #128	; 0x80
1000c0aa:	0149      	lsls	r1, r1, #5
1000c0ac:	430a      	orrs	r2, r1
1000c0ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0b0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c0b2:	e19e      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0b4:	4b9e      	ldr	r3, [pc, #632]	; (1000c330 <system_peripheral_reset+0x390>)
1000c0b6:	6859      	ldr	r1, [r3, #4]
1000c0b8:	4aa3      	ldr	r2, [pc, #652]	; (1000c348 <system_peripheral_reset+0x3a8>)
1000c0ba:	400a      	ands	r2, r1
1000c0bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0be:	685a      	ldr	r2, [r3, #4]
1000c0c0:	2180      	movs	r1, #128	; 0x80
1000c0c2:	0189      	lsls	r1, r1, #6
1000c0c4:	430a      	orrs	r2, r1
1000c0c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0c8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c0ca:	e192      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0cc:	4b98      	ldr	r3, [pc, #608]	; (1000c330 <system_peripheral_reset+0x390>)
1000c0ce:	6859      	ldr	r1, [r3, #4]
1000c0d0:	4a9e      	ldr	r2, [pc, #632]	; (1000c34c <system_peripheral_reset+0x3ac>)
1000c0d2:	400a      	ands	r2, r1
1000c0d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0d6:	685a      	ldr	r2, [r3, #4]
1000c0d8:	2180      	movs	r1, #128	; 0x80
1000c0da:	01c9      	lsls	r1, r1, #7
1000c0dc:	430a      	orrs	r2, r1
1000c0de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c0e2:	e186      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0e4:	4b92      	ldr	r3, [pc, #584]	; (1000c330 <system_peripheral_reset+0x390>)
1000c0e6:	6859      	ldr	r1, [r3, #4]
1000c0e8:	4a99      	ldr	r2, [pc, #612]	; (1000c350 <system_peripheral_reset+0x3b0>)
1000c0ea:	400a      	ands	r2, r1
1000c0ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ee:	685a      	ldr	r2, [r3, #4]
1000c0f0:	2180      	movs	r1, #128	; 0x80
1000c0f2:	0209      	lsls	r1, r1, #8
1000c0f4:	430a      	orrs	r2, r1
1000c0f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c0fa:	e17a      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0fc:	4b8c      	ldr	r3, [pc, #560]	; (1000c330 <system_peripheral_reset+0x390>)
1000c0fe:	6859      	ldr	r1, [r3, #4]
1000c100:	4a94      	ldr	r2, [pc, #592]	; (1000c354 <system_peripheral_reset+0x3b4>)
1000c102:	400a      	ands	r2, r1
1000c104:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c106:	685a      	ldr	r2, [r3, #4]
1000c108:	2180      	movs	r1, #128	; 0x80
1000c10a:	0249      	lsls	r1, r1, #9
1000c10c:	430a      	orrs	r2, r1
1000c10e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c110:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c112:	e16e      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c114:	4b86      	ldr	r3, [pc, #536]	; (1000c330 <system_peripheral_reset+0x390>)
1000c116:	6859      	ldr	r1, [r3, #4]
1000c118:	4a8f      	ldr	r2, [pc, #572]	; (1000c358 <system_peripheral_reset+0x3b8>)
1000c11a:	400a      	ands	r2, r1
1000c11c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c11e:	685a      	ldr	r2, [r3, #4]
1000c120:	2180      	movs	r1, #128	; 0x80
1000c122:	0289      	lsls	r1, r1, #10
1000c124:	430a      	orrs	r2, r1
1000c126:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c128:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c12a:	e162      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c12c:	4b80      	ldr	r3, [pc, #512]	; (1000c330 <system_peripheral_reset+0x390>)
1000c12e:	6859      	ldr	r1, [r3, #4]
1000c130:	4a8a      	ldr	r2, [pc, #552]	; (1000c35c <system_peripheral_reset+0x3bc>)
1000c132:	400a      	ands	r2, r1
1000c134:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c136:	685a      	ldr	r2, [r3, #4]
1000c138:	2180      	movs	r1, #128	; 0x80
1000c13a:	02c9      	lsls	r1, r1, #11
1000c13c:	430a      	orrs	r2, r1
1000c13e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c140:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c142:	e156      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c144:	4b7a      	ldr	r3, [pc, #488]	; (1000c330 <system_peripheral_reset+0x390>)
1000c146:	6859      	ldr	r1, [r3, #4]
1000c148:	4a85      	ldr	r2, [pc, #532]	; (1000c360 <system_peripheral_reset+0x3c0>)
1000c14a:	400a      	ands	r2, r1
1000c14c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c14e:	685a      	ldr	r2, [r3, #4]
1000c150:	2180      	movs	r1, #128	; 0x80
1000c152:	0309      	lsls	r1, r1, #12
1000c154:	430a      	orrs	r2, r1
1000c156:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c158:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c15a:	e14a      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c15c:	4b74      	ldr	r3, [pc, #464]	; (1000c330 <system_peripheral_reset+0x390>)
1000c15e:	6859      	ldr	r1, [r3, #4]
1000c160:	4a80      	ldr	r2, [pc, #512]	; (1000c364 <system_peripheral_reset+0x3c4>)
1000c162:	400a      	ands	r2, r1
1000c164:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c166:	685a      	ldr	r2, [r3, #4]
1000c168:	2180      	movs	r1, #128	; 0x80
1000c16a:	0349      	lsls	r1, r1, #13
1000c16c:	430a      	orrs	r2, r1
1000c16e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c170:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c172:	e13e      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c174:	4b6e      	ldr	r3, [pc, #440]	; (1000c330 <system_peripheral_reset+0x390>)
1000c176:	6859      	ldr	r1, [r3, #4]
1000c178:	4a7b      	ldr	r2, [pc, #492]	; (1000c368 <system_peripheral_reset+0x3c8>)
1000c17a:	400a      	ands	r2, r1
1000c17c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c17e:	685a      	ldr	r2, [r3, #4]
1000c180:	2180      	movs	r1, #128	; 0x80
1000c182:	0389      	lsls	r1, r1, #14
1000c184:	430a      	orrs	r2, r1
1000c186:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c188:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c18a:	e132      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c18c:	4b68      	ldr	r3, [pc, #416]	; (1000c330 <system_peripheral_reset+0x390>)
1000c18e:	6859      	ldr	r1, [r3, #4]
1000c190:	4a76      	ldr	r2, [pc, #472]	; (1000c36c <system_peripheral_reset+0x3cc>)
1000c192:	400a      	ands	r2, r1
1000c194:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c196:	685a      	ldr	r2, [r3, #4]
1000c198:	2180      	movs	r1, #128	; 0x80
1000c19a:	03c9      	lsls	r1, r1, #15
1000c19c:	430a      	orrs	r2, r1
1000c19e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1a0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c1a2:	e126      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1a4:	4b62      	ldr	r3, [pc, #392]	; (1000c330 <system_peripheral_reset+0x390>)
1000c1a6:	6859      	ldr	r1, [r3, #4]
1000c1a8:	4a71      	ldr	r2, [pc, #452]	; (1000c370 <system_peripheral_reset+0x3d0>)
1000c1aa:	400a      	ands	r2, r1
1000c1ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1ae:	685a      	ldr	r2, [r3, #4]
1000c1b0:	2180      	movs	r1, #128	; 0x80
1000c1b2:	0409      	lsls	r1, r1, #16
1000c1b4:	430a      	orrs	r2, r1
1000c1b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c1ba:	e11a      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1bc:	4b5c      	ldr	r3, [pc, #368]	; (1000c330 <system_peripheral_reset+0x390>)
1000c1be:	6859      	ldr	r1, [r3, #4]
1000c1c0:	4a6c      	ldr	r2, [pc, #432]	; (1000c374 <system_peripheral_reset+0x3d4>)
1000c1c2:	400a      	ands	r2, r1
1000c1c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1c6:	685a      	ldr	r2, [r3, #4]
1000c1c8:	2180      	movs	r1, #128	; 0x80
1000c1ca:	0449      	lsls	r1, r1, #17
1000c1cc:	430a      	orrs	r2, r1
1000c1ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1d0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c1d2:	e10e      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1d4:	4b56      	ldr	r3, [pc, #344]	; (1000c330 <system_peripheral_reset+0x390>)
1000c1d6:	6859      	ldr	r1, [r3, #4]
1000c1d8:	4a67      	ldr	r2, [pc, #412]	; (1000c378 <system_peripheral_reset+0x3d8>)
1000c1da:	400a      	ands	r2, r1
1000c1dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1de:	685a      	ldr	r2, [r3, #4]
1000c1e0:	2180      	movs	r1, #128	; 0x80
1000c1e2:	0489      	lsls	r1, r1, #18
1000c1e4:	430a      	orrs	r2, r1
1000c1e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c1ea:	e102      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1ec:	4b50      	ldr	r3, [pc, #320]	; (1000c330 <system_peripheral_reset+0x390>)
1000c1ee:	6859      	ldr	r1, [r3, #4]
1000c1f0:	4a62      	ldr	r2, [pc, #392]	; (1000c37c <system_peripheral_reset+0x3dc>)
1000c1f2:	400a      	ands	r2, r1
1000c1f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1f6:	685a      	ldr	r2, [r3, #4]
1000c1f8:	2180      	movs	r1, #128	; 0x80
1000c1fa:	04c9      	lsls	r1, r1, #19
1000c1fc:	430a      	orrs	r2, r1
1000c1fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c200:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c202:	e0f6      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c204:	4b4a      	ldr	r3, [pc, #296]	; (1000c330 <system_peripheral_reset+0x390>)
1000c206:	6859      	ldr	r1, [r3, #4]
1000c208:	4a5d      	ldr	r2, [pc, #372]	; (1000c380 <system_peripheral_reset+0x3e0>)
1000c20a:	400a      	ands	r2, r1
1000c20c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c20e:	685a      	ldr	r2, [r3, #4]
1000c210:	2180      	movs	r1, #128	; 0x80
1000c212:	0509      	lsls	r1, r1, #20
1000c214:	430a      	orrs	r2, r1
1000c216:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c218:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c21a:	e0ea      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c21c:	4b44      	ldr	r3, [pc, #272]	; (1000c330 <system_peripheral_reset+0x390>)
1000c21e:	6859      	ldr	r1, [r3, #4]
1000c220:	4a58      	ldr	r2, [pc, #352]	; (1000c384 <system_peripheral_reset+0x3e4>)
1000c222:	400a      	ands	r2, r1
1000c224:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c226:	685a      	ldr	r2, [r3, #4]
1000c228:	2180      	movs	r1, #128	; 0x80
1000c22a:	0549      	lsls	r1, r1, #21
1000c22c:	430a      	orrs	r2, r1
1000c22e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c230:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c232:	e0de      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c234:	4b3e      	ldr	r3, [pc, #248]	; (1000c330 <system_peripheral_reset+0x390>)
1000c236:	6859      	ldr	r1, [r3, #4]
1000c238:	4a53      	ldr	r2, [pc, #332]	; (1000c388 <system_peripheral_reset+0x3e8>)
1000c23a:	400a      	ands	r2, r1
1000c23c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c23e:	685a      	ldr	r2, [r3, #4]
1000c240:	2180      	movs	r1, #128	; 0x80
1000c242:	0589      	lsls	r1, r1, #22
1000c244:	430a      	orrs	r2, r1
1000c246:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c248:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c24a:	e0d2      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c24c:	4b38      	ldr	r3, [pc, #224]	; (1000c330 <system_peripheral_reset+0x390>)
1000c24e:	6859      	ldr	r1, [r3, #4]
1000c250:	4a4e      	ldr	r2, [pc, #312]	; (1000c38c <system_peripheral_reset+0x3ec>)
1000c252:	400a      	ands	r2, r1
1000c254:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c256:	685a      	ldr	r2, [r3, #4]
1000c258:	2180      	movs	r1, #128	; 0x80
1000c25a:	05c9      	lsls	r1, r1, #23
1000c25c:	430a      	orrs	r2, r1
1000c25e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c260:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c262:	e0c6      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c264:	4a32      	ldr	r2, [pc, #200]	; (1000c330 <system_peripheral_reset+0x390>)
1000c266:	6853      	ldr	r3, [r2, #4]
1000c268:	005b      	lsls	r3, r3, #1
1000c26a:	085b      	lsrs	r3, r3, #1
1000c26c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c26e:	6853      	ldr	r3, [r2, #4]
1000c270:	2180      	movs	r1, #128	; 0x80
1000c272:	0609      	lsls	r1, r1, #24
1000c274:	430b      	orrs	r3, r1
1000c276:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c278:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c27a:	e0ba      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c27c:	4b2c      	ldr	r3, [pc, #176]	; (1000c330 <system_peripheral_reset+0x390>)
1000c27e:	891a      	ldrh	r2, [r3, #8]
1000c280:	2101      	movs	r1, #1
1000c282:	438a      	bics	r2, r1
1000c284:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c286:	8919      	ldrh	r1, [r3, #8]
1000c288:	2201      	movs	r2, #1
1000c28a:	430a      	orrs	r2, r1
1000c28c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c28e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c290:	e0af      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c292:	4b27      	ldr	r3, [pc, #156]	; (1000c330 <system_peripheral_reset+0x390>)
1000c294:	891a      	ldrh	r2, [r3, #8]
1000c296:	2102      	movs	r1, #2
1000c298:	438a      	bics	r2, r1
1000c29a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c29c:	8919      	ldrh	r1, [r3, #8]
1000c29e:	2202      	movs	r2, #2
1000c2a0:	430a      	orrs	r2, r1
1000c2a2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c2a6:	e0a4      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2a8:	4b21      	ldr	r3, [pc, #132]	; (1000c330 <system_peripheral_reset+0x390>)
1000c2aa:	891a      	ldrh	r2, [r3, #8]
1000c2ac:	2104      	movs	r1, #4
1000c2ae:	438a      	bics	r2, r1
1000c2b0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2b2:	8919      	ldrh	r1, [r3, #8]
1000c2b4:	2204      	movs	r2, #4
1000c2b6:	430a      	orrs	r2, r1
1000c2b8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ba:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c2bc:	e099      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2be:	4b1c      	ldr	r3, [pc, #112]	; (1000c330 <system_peripheral_reset+0x390>)
1000c2c0:	891a      	ldrh	r2, [r3, #8]
1000c2c2:	2108      	movs	r1, #8
1000c2c4:	438a      	bics	r2, r1
1000c2c6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2c8:	8919      	ldrh	r1, [r3, #8]
1000c2ca:	2208      	movs	r2, #8
1000c2cc:	430a      	orrs	r2, r1
1000c2ce:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d0:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c2d2:	e08e      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2d4:	4b16      	ldr	r3, [pc, #88]	; (1000c330 <system_peripheral_reset+0x390>)
1000c2d6:	891a      	ldrh	r2, [r3, #8]
1000c2d8:	2110      	movs	r1, #16
1000c2da:	438a      	bics	r2, r1
1000c2dc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2de:	8919      	ldrh	r1, [r3, #8]
1000c2e0:	2210      	movs	r2, #16
1000c2e2:	430a      	orrs	r2, r1
1000c2e4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2e6:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c2e8:	e083      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2ea:	4b11      	ldr	r3, [pc, #68]	; (1000c330 <system_peripheral_reset+0x390>)
1000c2ec:	891a      	ldrh	r2, [r3, #8]
1000c2ee:	2120      	movs	r1, #32
1000c2f0:	438a      	bics	r2, r1
1000c2f2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2f4:	8919      	ldrh	r1, [r3, #8]
1000c2f6:	2220      	movs	r2, #32
1000c2f8:	430a      	orrs	r2, r1
1000c2fa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2fc:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c2fe:	e078      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c300:	4b0b      	ldr	r3, [pc, #44]	; (1000c330 <system_peripheral_reset+0x390>)
1000c302:	891a      	ldrh	r2, [r3, #8]
1000c304:	2140      	movs	r1, #64	; 0x40
1000c306:	438a      	bics	r2, r1
1000c308:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c30a:	8919      	ldrh	r1, [r3, #8]
1000c30c:	2240      	movs	r2, #64	; 0x40
1000c30e:	430a      	orrs	r2, r1
1000c310:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c312:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c314:	e06d      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c316:	4b06      	ldr	r3, [pc, #24]	; (1000c330 <system_peripheral_reset+0x390>)
1000c318:	891a      	ldrh	r2, [r3, #8]
1000c31a:	2180      	movs	r1, #128	; 0x80
1000c31c:	438a      	bics	r2, r1
1000c31e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c320:	8919      	ldrh	r1, [r3, #8]
1000c322:	2280      	movs	r2, #128	; 0x80
1000c324:	430a      	orrs	r2, r1
1000c326:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c328:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c32a:	e062      	b.n	1000c3f2 <system_peripheral_reset+0x452>
1000c32c:	10017928 	.word	0x10017928
1000c330:	4000b000 	.word	0x4000b000
1000c334:	fffffeff 	.word	0xfffffeff
1000c338:	fffffdff 	.word	0xfffffdff
1000c33c:	fffffbff 	.word	0xfffffbff
1000c340:	fffff7ff 	.word	0xfffff7ff
1000c344:	ffffefff 	.word	0xffffefff
1000c348:	ffffdfff 	.word	0xffffdfff
1000c34c:	ffffbfff 	.word	0xffffbfff
1000c350:	ffff7fff 	.word	0xffff7fff
1000c354:	fffeffff 	.word	0xfffeffff
1000c358:	fffdffff 	.word	0xfffdffff
1000c35c:	fffbffff 	.word	0xfffbffff
1000c360:	fff7ffff 	.word	0xfff7ffff
1000c364:	ffefffff 	.word	0xffefffff
1000c368:	ffdfffff 	.word	0xffdfffff
1000c36c:	ffbfffff 	.word	0xffbfffff
1000c370:	ff7fffff 	.word	0xff7fffff
1000c374:	feffffff 	.word	0xfeffffff
1000c378:	fdffffff 	.word	0xfdffffff
1000c37c:	fbffffff 	.word	0xfbffffff
1000c380:	f7ffffff 	.word	0xf7ffffff
1000c384:	efffffff 	.word	0xefffffff
1000c388:	dfffffff 	.word	0xdfffffff
1000c38c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c390:	4b18      	ldr	r3, [pc, #96]	; (1000c3f4 <system_peripheral_reset+0x454>)
1000c392:	8919      	ldrh	r1, [r3, #8]
1000c394:	4a18      	ldr	r2, [pc, #96]	; (1000c3f8 <system_peripheral_reset+0x458>)
1000c396:	400a      	ands	r2, r1
1000c398:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c39a:	8919      	ldrh	r1, [r3, #8]
1000c39c:	2280      	movs	r2, #128	; 0x80
1000c39e:	0052      	lsls	r2, r2, #1
1000c3a0:	430a      	orrs	r2, r1
1000c3a2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c3a6:	e024      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3a8:	4b12      	ldr	r3, [pc, #72]	; (1000c3f4 <system_peripheral_reset+0x454>)
1000c3aa:	8919      	ldrh	r1, [r3, #8]
1000c3ac:	4a13      	ldr	r2, [pc, #76]	; (1000c3fc <system_peripheral_reset+0x45c>)
1000c3ae:	400a      	ands	r2, r1
1000c3b0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3b2:	8919      	ldrh	r1, [r3, #8]
1000c3b4:	2280      	movs	r2, #128	; 0x80
1000c3b6:	0092      	lsls	r2, r2, #2
1000c3b8:	430a      	orrs	r2, r1
1000c3ba:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c3be:	e018      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3c0:	4b0c      	ldr	r3, [pc, #48]	; (1000c3f4 <system_peripheral_reset+0x454>)
1000c3c2:	8919      	ldrh	r1, [r3, #8]
1000c3c4:	4a0e      	ldr	r2, [pc, #56]	; (1000c400 <system_peripheral_reset+0x460>)
1000c3c6:	400a      	ands	r2, r1
1000c3c8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3ca:	8919      	ldrh	r1, [r3, #8]
1000c3cc:	2280      	movs	r2, #128	; 0x80
1000c3ce:	00d2      	lsls	r2, r2, #3
1000c3d0:	430a      	orrs	r2, r1
1000c3d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c3d6:	e00c      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3d8:	4b06      	ldr	r3, [pc, #24]	; (1000c3f4 <system_peripheral_reset+0x454>)
1000c3da:	8919      	ldrh	r1, [r3, #8]
1000c3dc:	4a09      	ldr	r2, [pc, #36]	; (1000c404 <system_peripheral_reset+0x464>)
1000c3de:	400a      	ands	r2, r1
1000c3e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3e2:	8919      	ldrh	r1, [r3, #8]
1000c3e4:	2280      	movs	r2, #128	; 0x80
1000c3e6:	0112      	lsls	r2, r2, #4
1000c3e8:	430a      	orrs	r2, r1
1000c3ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ec:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c3ee:	e000      	b.n	1000c3f2 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c3f0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c3f2:	bd00      	pop	{pc}
1000c3f4:	4000b000 	.word	0x4000b000
1000c3f8:	fffffeff 	.word	0xfffffeff
1000c3fc:	fffffdff 	.word	0xfffffdff
1000c400:	fffffbff 	.word	0xfffffbff
1000c404:	fffff7ff 	.word	0xfffff7ff

1000c408 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c408:	2380      	movs	r3, #128	; 0x80
1000c40a:	04db      	lsls	r3, r3, #19
1000c40c:	469c      	mov	ip, r3
1000c40e:	4460      	add	r0, ip
1000c410:	0080      	lsls	r0, r0, #2
1000c412:	6001      	str	r1, [r0, #0]
}
1000c414:	4770      	bx	lr
1000c416:	46c0      	nop			; (mov r8, r8)

1000c418 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c418:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c41a:	4b20      	ldr	r3, [pc, #128]	; (1000c49c <uart_rx0_isr_handler+0x84>)
1000c41c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c41e:	6823      	ldr	r3, [r4, #0]
1000c420:	7d1d      	ldrb	r5, [r3, #20]
1000c422:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c424:	066a      	lsls	r2, r5, #25
1000c426:	d513      	bpl.n	1000c450 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c428:	211e      	movs	r1, #30
1000c42a:	2222      	movs	r2, #34	; 0x22
1000c42c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c42e:	7e1a      	ldrb	r2, [r3, #24]
1000c430:	3123      	adds	r1, #35	; 0x23
1000c432:	438a      	bics	r2, r1
1000c434:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c436:	2321      	movs	r3, #33	; 0x21
1000c438:	5ce3      	ldrb	r3, [r4, r3]
1000c43a:	071b      	lsls	r3, r3, #28
1000c43c:	d506      	bpl.n	1000c44c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c43e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c440:	5ce3      	ldrb	r3, [r4, r3]
1000c442:	071b      	lsls	r3, r3, #28
1000c444:	d502      	bpl.n	1000c44c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c446:	0020      	movs	r0, r4
1000c448:	6923      	ldr	r3, [r4, #16]
1000c44a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c44c:	6823      	ldr	r3, [r4, #0]
1000c44e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c450:	07eb      	lsls	r3, r5, #31
1000c452:	d522      	bpl.n	1000c49a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c454:	6823      	ldr	r3, [r4, #0]
1000c456:	7c1b      	ldrb	r3, [r3, #16]
1000c458:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c45a:	6962      	ldr	r2, [r4, #20]
1000c45c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c45e:	6963      	ldr	r3, [r4, #20]
1000c460:	3301      	adds	r3, #1
1000c462:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c464:	8ba3      	ldrh	r3, [r4, #28]
1000c466:	3b01      	subs	r3, #1
1000c468:	b29b      	uxth	r3, r3
1000c46a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c46c:	8ba3      	ldrh	r3, [r4, #28]
1000c46e:	b29b      	uxth	r3, r3
1000c470:	2b00      	cmp	r3, #0
1000c472:	d112      	bne.n	1000c49a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c474:	3321      	adds	r3, #33	; 0x21
1000c476:	5ce3      	ldrb	r3, [r4, r3]
1000c478:	075b      	lsls	r3, r3, #29
1000c47a:	d50e      	bpl.n	1000c49a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c47c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c47e:	5ce3      	ldrb	r3, [r4, r3]
1000c480:	075b      	lsls	r3, r3, #29
1000c482:	d50a      	bpl.n	1000c49a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c484:	2200      	movs	r2, #0
1000c486:	2322      	movs	r3, #34	; 0x22
1000c488:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c48a:	6822      	ldr	r2, [r4, #0]
1000c48c:	7e13      	ldrb	r3, [r2, #24]
1000c48e:	2101      	movs	r1, #1
1000c490:	438b      	bics	r3, r1
1000c492:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c494:	68e3      	ldr	r3, [r4, #12]
1000c496:	0020      	movs	r0, r4
1000c498:	4798      	blx	r3
			}
		}
	}
}
1000c49a:	bd70      	pop	{r4, r5, r6, pc}
1000c49c:	1001a3e4 	.word	0x1001a3e4

1000c4a0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c4a0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c4a2:	4b21      	ldr	r3, [pc, #132]	; (1000c528 <uart_tx0_isr_handler+0x88>)
1000c4a4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c4a6:	6823      	ldr	r3, [r4, #0]
1000c4a8:	791d      	ldrb	r5, [r3, #4]
1000c4aa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c4ac:	07ea      	lsls	r2, r5, #31
1000c4ae:	d517      	bpl.n	1000c4e0 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c4b0:	69a2      	ldr	r2, [r4, #24]
1000c4b2:	7811      	ldrb	r1, [r2, #0]
1000c4b4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c4b6:	3201      	adds	r2, #1
1000c4b8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c4ba:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c4bc:	8be3      	ldrh	r3, [r4, #30]
1000c4be:	3b01      	subs	r3, #1
1000c4c0:	b29b      	uxth	r3, r3
1000c4c2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c4c4:	8be3      	ldrh	r3, [r4, #30]
1000c4c6:	b29b      	uxth	r3, r3
1000c4c8:	2b00      	cmp	r3, #0
1000c4ca:	d109      	bne.n	1000c4e0 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c4cc:	6822      	ldr	r2, [r4, #0]
1000c4ce:	7a13      	ldrb	r3, [r2, #8]
1000c4d0:	2101      	movs	r1, #1
1000c4d2:	438b      	bics	r3, r1
1000c4d4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c4d6:	6822      	ldr	r2, [r4, #0]
1000c4d8:	7a11      	ldrb	r1, [r2, #8]
1000c4da:	2310      	movs	r3, #16
1000c4dc:	430b      	orrs	r3, r1
1000c4de:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c4e0:	06eb      	lsls	r3, r5, #27
1000c4e2:	d512      	bpl.n	1000c50a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c4e4:	2321      	movs	r3, #33	; 0x21
1000c4e6:	5ce3      	ldrb	r3, [r4, r3]
1000c4e8:	07db      	lsls	r3, r3, #31
1000c4ea:	d50e      	bpl.n	1000c50a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c4ec:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c4ee:	5ce3      	ldrb	r3, [r4, r3]
1000c4f0:	07db      	lsls	r3, r3, #31
1000c4f2:	d50a      	bpl.n	1000c50a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c4f4:	2200      	movs	r2, #0
1000c4f6:	2322      	movs	r3, #34	; 0x22
1000c4f8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c4fa:	6822      	ldr	r2, [r4, #0]
1000c4fc:	7a13      	ldrb	r3, [r2, #8]
1000c4fe:	2110      	movs	r1, #16
1000c500:	438b      	bics	r3, r1
1000c502:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c504:	0020      	movs	r0, r4
1000c506:	6863      	ldr	r3, [r4, #4]
1000c508:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c50a:	06ab      	lsls	r3, r5, #26
1000c50c:	d50a      	bpl.n	1000c524 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c50e:	2321      	movs	r3, #33	; 0x21
1000c510:	5ce3      	ldrb	r3, [r4, r3]
1000c512:	079b      	lsls	r3, r3, #30
1000c514:	d506      	bpl.n	1000c524 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c516:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c518:	5ce3      	ldrb	r3, [r4, r3]
1000c51a:	079b      	lsls	r3, r3, #30
1000c51c:	d502      	bpl.n	1000c524 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c51e:	68a3      	ldr	r3, [r4, #8]
1000c520:	0020      	movs	r0, r4
1000c522:	4798      	blx	r3
		}

	}
}
1000c524:	bd70      	pop	{r4, r5, r6, pc}
1000c526:	46c0      	nop			; (mov r8, r8)
1000c528:	1001a3e4 	.word	0x1001a3e4

1000c52c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c52c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c52e:	4b20      	ldr	r3, [pc, #128]	; (1000c5b0 <uart_rx1_isr_handler+0x84>)
1000c530:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c532:	6823      	ldr	r3, [r4, #0]
1000c534:	7d1d      	ldrb	r5, [r3, #20]
1000c536:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c538:	066a      	lsls	r2, r5, #25
1000c53a:	d513      	bpl.n	1000c564 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c53c:	211e      	movs	r1, #30
1000c53e:	2222      	movs	r2, #34	; 0x22
1000c540:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c542:	7e1a      	ldrb	r2, [r3, #24]
1000c544:	3123      	adds	r1, #35	; 0x23
1000c546:	438a      	bics	r2, r1
1000c548:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c54a:	2321      	movs	r3, #33	; 0x21
1000c54c:	5ce3      	ldrb	r3, [r4, r3]
1000c54e:	071b      	lsls	r3, r3, #28
1000c550:	d506      	bpl.n	1000c560 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c552:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c554:	5ce3      	ldrb	r3, [r4, r3]
1000c556:	071b      	lsls	r3, r3, #28
1000c558:	d502      	bpl.n	1000c560 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c55a:	0020      	movs	r0, r4
1000c55c:	6923      	ldr	r3, [r4, #16]
1000c55e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c560:	6823      	ldr	r3, [r4, #0]
1000c562:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c564:	07eb      	lsls	r3, r5, #31
1000c566:	d522      	bpl.n	1000c5ae <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c568:	6823      	ldr	r3, [r4, #0]
1000c56a:	7c1b      	ldrb	r3, [r3, #16]
1000c56c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c56e:	6962      	ldr	r2, [r4, #20]
1000c570:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c572:	6963      	ldr	r3, [r4, #20]
1000c574:	3301      	adds	r3, #1
1000c576:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c578:	8ba3      	ldrh	r3, [r4, #28]
1000c57a:	3b01      	subs	r3, #1
1000c57c:	b29b      	uxth	r3, r3
1000c57e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c580:	8ba3      	ldrh	r3, [r4, #28]
1000c582:	b29b      	uxth	r3, r3
1000c584:	2b00      	cmp	r3, #0
1000c586:	d112      	bne.n	1000c5ae <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c588:	3321      	adds	r3, #33	; 0x21
1000c58a:	5ce3      	ldrb	r3, [r4, r3]
1000c58c:	075b      	lsls	r3, r3, #29
1000c58e:	d50e      	bpl.n	1000c5ae <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c590:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c592:	5ce3      	ldrb	r3, [r4, r3]
1000c594:	075b      	lsls	r3, r3, #29
1000c596:	d50a      	bpl.n	1000c5ae <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c598:	2200      	movs	r2, #0
1000c59a:	2322      	movs	r3, #34	; 0x22
1000c59c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c59e:	6822      	ldr	r2, [r4, #0]
1000c5a0:	7e13      	ldrb	r3, [r2, #24]
1000c5a2:	2101      	movs	r1, #1
1000c5a4:	438b      	bics	r3, r1
1000c5a6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c5a8:	68e3      	ldr	r3, [r4, #12]
1000c5aa:	0020      	movs	r0, r4
1000c5ac:	4798      	blx	r3
			}
		}
	}
}
1000c5ae:	bd70      	pop	{r4, r5, r6, pc}
1000c5b0:	1001a3e4 	.word	0x1001a3e4

1000c5b4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c5b4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c5b6:	4b21      	ldr	r3, [pc, #132]	; (1000c63c <uart_tx1_isr_handler+0x88>)
1000c5b8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c5ba:	6823      	ldr	r3, [r4, #0]
1000c5bc:	791d      	ldrb	r5, [r3, #4]
1000c5be:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c5c0:	07ea      	lsls	r2, r5, #31
1000c5c2:	d517      	bpl.n	1000c5f4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c5c4:	69a2      	ldr	r2, [r4, #24]
1000c5c6:	7811      	ldrb	r1, [r2, #0]
1000c5c8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c5ca:	3201      	adds	r2, #1
1000c5cc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c5ce:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c5d0:	8be3      	ldrh	r3, [r4, #30]
1000c5d2:	3b01      	subs	r3, #1
1000c5d4:	b29b      	uxth	r3, r3
1000c5d6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c5d8:	8be3      	ldrh	r3, [r4, #30]
1000c5da:	b29b      	uxth	r3, r3
1000c5dc:	2b00      	cmp	r3, #0
1000c5de:	d109      	bne.n	1000c5f4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c5e0:	6822      	ldr	r2, [r4, #0]
1000c5e2:	7a13      	ldrb	r3, [r2, #8]
1000c5e4:	2101      	movs	r1, #1
1000c5e6:	438b      	bics	r3, r1
1000c5e8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c5ea:	6822      	ldr	r2, [r4, #0]
1000c5ec:	7a11      	ldrb	r1, [r2, #8]
1000c5ee:	2310      	movs	r3, #16
1000c5f0:	430b      	orrs	r3, r1
1000c5f2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c5f4:	06eb      	lsls	r3, r5, #27
1000c5f6:	d512      	bpl.n	1000c61e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c5f8:	2321      	movs	r3, #33	; 0x21
1000c5fa:	5ce3      	ldrb	r3, [r4, r3]
1000c5fc:	07db      	lsls	r3, r3, #31
1000c5fe:	d50e      	bpl.n	1000c61e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c600:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c602:	5ce3      	ldrb	r3, [r4, r3]
1000c604:	07db      	lsls	r3, r3, #31
1000c606:	d50a      	bpl.n	1000c61e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c608:	2200      	movs	r2, #0
1000c60a:	2322      	movs	r3, #34	; 0x22
1000c60c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c60e:	6822      	ldr	r2, [r4, #0]
1000c610:	7a13      	ldrb	r3, [r2, #8]
1000c612:	2110      	movs	r1, #16
1000c614:	438b      	bics	r3, r1
1000c616:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c618:	0020      	movs	r0, r4
1000c61a:	6863      	ldr	r3, [r4, #4]
1000c61c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c61e:	06ab      	lsls	r3, r5, #26
1000c620:	d50a      	bpl.n	1000c638 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c622:	2321      	movs	r3, #33	; 0x21
1000c624:	5ce3      	ldrb	r3, [r4, r3]
1000c626:	079b      	lsls	r3, r3, #30
1000c628:	d506      	bpl.n	1000c638 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c62a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c62c:	5ce3      	ldrb	r3, [r4, r3]
1000c62e:	079b      	lsls	r3, r3, #30
1000c630:	d502      	bpl.n	1000c638 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c632:	68a3      	ldr	r3, [r4, #8]
1000c634:	0020      	movs	r0, r4
1000c636:	4798      	blx	r3
		}

	}
}
1000c638:	bd70      	pop	{r4, r5, r6, pc}
1000c63a:	46c0      	nop			; (mov r8, r8)
1000c63c:	1001a3e4 	.word	0x1001a3e4

1000c640 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c640:	23e1      	movs	r3, #225	; 0xe1
1000c642:	025b      	lsls	r3, r3, #9
1000c644:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c646:	2300      	movs	r3, #0
1000c648:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c64a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c64c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c64e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c650:	3302      	adds	r3, #2
1000c652:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c654:	2203      	movs	r2, #3
1000c656:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c658:	3201      	adds	r2, #1
1000c65a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c65c:	3201      	adds	r2, #1
1000c65e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c660:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c662:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c664:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c666:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c668:	4770      	bx	lr
1000c66a:	46c0      	nop			; (mov r8, r8)

1000c66c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c66e:	464f      	mov	r7, r9
1000c670:	4646      	mov	r6, r8
1000c672:	b4c0      	push	{r6, r7}
1000c674:	0005      	movs	r5, r0
1000c676:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c678:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c67a:	2300      	movs	r3, #0
1000c67c:	6043      	str	r3, [r0, #4]
1000c67e:	6083      	str	r3, [r0, #8]
1000c680:	60c3      	str	r3, [r0, #12]
1000c682:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c684:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c686:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c688:	2200      	movs	r2, #0
1000c68a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c68c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c68e:	3320      	adds	r3, #32
1000c690:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c692:	3301      	adds	r3, #1
1000c694:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c696:	3301      	adds	r3, #1
1000c698:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c69a:	4b55      	ldr	r3, [pc, #340]	; (1000c7f0 <uart_init+0x184>)
1000c69c:	4299      	cmp	r1, r3
1000c69e:	d118      	bne.n	1000c6d2 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c6a0:	2009      	movs	r0, #9
1000c6a2:	4c54      	ldr	r4, [pc, #336]	; (1000c7f4 <uart_init+0x188>)
1000c6a4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c6a6:	200a      	movs	r0, #10
1000c6a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c6aa:	2009      	movs	r0, #9
1000c6ac:	4c52      	ldr	r4, [pc, #328]	; (1000c7f8 <uart_init+0x18c>)
1000c6ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c6b0:	200a      	movs	r0, #10
1000c6b2:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c6b4:	4b51      	ldr	r3, [pc, #324]	; (1000c7fc <uart_init+0x190>)
1000c6b6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c6b8:	4951      	ldr	r1, [pc, #324]	; (1000c800 <uart_init+0x194>)
1000c6ba:	2010      	movs	r0, #16
1000c6bc:	4c51      	ldr	r4, [pc, #324]	; (1000c804 <uart_init+0x198>)
1000c6be:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c6c0:	4951      	ldr	r1, [pc, #324]	; (1000c808 <uart_init+0x19c>)
1000c6c2:	2011      	movs	r0, #17
1000c6c4:	47a0      	blx	r4
1000c6c6:	4b51      	ldr	r3, [pc, #324]	; (1000c80c <uart_init+0x1a0>)
1000c6c8:	2201      	movs	r2, #1
1000c6ca:	601a      	str	r2, [r3, #0]
1000c6cc:	3201      	adds	r2, #1
1000c6ce:	601a      	str	r2, [r3, #0]
1000c6d0:	e01a      	b.n	1000c708 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c6d2:	4b4f      	ldr	r3, [pc, #316]	; (1000c810 <uart_init+0x1a4>)
1000c6d4:	4299      	cmp	r1, r3
1000c6d6:	d117      	bne.n	1000c708 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c6d8:	200b      	movs	r0, #11
1000c6da:	4c46      	ldr	r4, [pc, #280]	; (1000c7f4 <uart_init+0x188>)
1000c6dc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c6de:	200c      	movs	r0, #12
1000c6e0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c6e2:	200b      	movs	r0, #11
1000c6e4:	4c44      	ldr	r4, [pc, #272]	; (1000c7f8 <uart_init+0x18c>)
1000c6e6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c6e8:	200c      	movs	r0, #12
1000c6ea:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c6ec:	4b43      	ldr	r3, [pc, #268]	; (1000c7fc <uart_init+0x190>)
1000c6ee:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c6f0:	4948      	ldr	r1, [pc, #288]	; (1000c814 <uart_init+0x1a8>)
1000c6f2:	2012      	movs	r0, #18
1000c6f4:	4c43      	ldr	r4, [pc, #268]	; (1000c804 <uart_init+0x198>)
1000c6f6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c6f8:	4947      	ldr	r1, [pc, #284]	; (1000c818 <uart_init+0x1ac>)
1000c6fa:	2013      	movs	r0, #19
1000c6fc:	47a0      	blx	r4
1000c6fe:	4b43      	ldr	r3, [pc, #268]	; (1000c80c <uart_init+0x1a0>)
1000c700:	2204      	movs	r2, #4
1000c702:	601a      	str	r2, [r3, #0]
1000c704:	3204      	adds	r2, #4
1000c706:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c708:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c70a:	2204      	movs	r2, #4
1000c70c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c70e:	2b00      	cmp	r3, #0
1000c710:	d152      	bne.n	1000c7b8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c712:	3302      	adds	r3, #2
1000c714:	4698      	mov	r8, r3
1000c716:	e04f      	b.n	1000c7b8 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c718:	8a31      	ldrh	r1, [r6, #16]
1000c71a:	ce01      	ldmia	r6!, {r0}
1000c71c:	b2c0      	uxtb	r0, r0
1000c71e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c720:	3401      	adds	r4, #1
1000c722:	b2e4      	uxtb	r4, r4
1000c724:	4544      	cmp	r4, r8
1000c726:	d3f7      	bcc.n	1000c718 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c728:	682b      	ldr	r3, [r5, #0]
1000c72a:	7d1a      	ldrb	r2, [r3, #20]
1000c72c:	07d2      	lsls	r2, r2, #31
1000c72e:	d504      	bpl.n	1000c73a <uart_init+0xce>
1000c730:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c732:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c734:	7d1a      	ldrb	r2, [r3, #20]
1000c736:	420a      	tst	r2, r1
1000c738:	d1fb      	bne.n	1000c732 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c73a:	2100      	movs	r1, #0
1000c73c:	2220      	movs	r2, #32
1000c73e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c740:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c742:	1e59      	subs	r1, r3, #1
1000c744:	418b      	sbcs	r3, r1
1000c746:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c748:	793b      	ldrb	r3, [r7, #4]
1000c74a:	797a      	ldrb	r2, [r7, #5]
1000c74c:	4313      	orrs	r3, r2
1000c74e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c750:	79ba      	ldrb	r2, [r7, #6]
1000c752:	2a02      	cmp	r2, #2
1000c754:	d00d      	beq.n	1000c772 <uart_init+0x106>
1000c756:	b2d1      	uxtb	r1, r2
1000c758:	2902      	cmp	r1, #2
1000c75a:	d802      	bhi.n	1000c762 <uart_init+0xf6>
1000c75c:	2a01      	cmp	r2, #1
1000c75e:	d005      	beq.n	1000c76c <uart_init+0x100>
1000c760:	e00f      	b.n	1000c782 <uart_init+0x116>
1000c762:	2a03      	cmp	r2, #3
1000c764:	d008      	beq.n	1000c778 <uart_init+0x10c>
1000c766:	2a04      	cmp	r2, #4
1000c768:	d009      	beq.n	1000c77e <uart_init+0x112>
1000c76a:	e00a      	b.n	1000c782 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c76c:	2202      	movs	r2, #2
1000c76e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c770:	e007      	b.n	1000c782 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c772:	2206      	movs	r2, #6
1000c774:	4313      	orrs	r3, r2
			break;
1000c776:	e004      	b.n	1000c782 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c778:	220a      	movs	r2, #10
1000c77a:	4313      	orrs	r3, r2
			break;
1000c77c:	e001      	b.n	1000c782 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c77e:	220e      	movs	r2, #14
1000c780:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c782:	2220      	movs	r2, #32
1000c784:	6829      	ldr	r1, [r5, #0]
1000c786:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c788:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c78a:	4b24      	ldr	r3, [pc, #144]	; (1000c81c <uart_init+0x1b0>)
1000c78c:	4798      	blx	r3
1000c78e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c790:	0031      	movs	r1, r6
1000c792:	4b23      	ldr	r3, [pc, #140]	; (1000c820 <uart_init+0x1b4>)
1000c794:	4798      	blx	r3
1000c796:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c798:	0400      	lsls	r0, r0, #16
1000c79a:	0c00      	lsrs	r0, r0, #16
1000c79c:	4370      	muls	r0, r6
1000c79e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c7a0:	0931      	lsrs	r1, r6, #4
1000c7a2:	4288      	cmp	r0, r1
1000c7a4:	d906      	bls.n	1000c7b4 <uart_init+0x148>
1000c7a6:	2300      	movs	r3, #0
		i++;
1000c7a8:	3301      	adds	r3, #1
1000c7aa:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c7ac:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c7ae:	4288      	cmp	r0, r1
1000c7b0:	d8fa      	bhi.n	1000c7a8 <uart_init+0x13c>
1000c7b2:	e007      	b.n	1000c7c4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c7b4:	2300      	movs	r3, #0
1000c7b6:	e005      	b.n	1000c7c4 <uart_init+0x158>
1000c7b8:	003e      	movs	r6, r7
1000c7ba:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c7bc:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c7be:	4b19      	ldr	r3, [pc, #100]	; (1000c824 <uart_init+0x1b8>)
1000c7c0:	4699      	mov	r9, r3
1000c7c2:	e7a9      	b.n	1000c718 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c7c4:	2100      	movs	r1, #0
1000c7c6:	2028      	movs	r0, #40	; 0x28
1000c7c8:	682c      	ldr	r4, [r5, #0]
1000c7ca:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c7cc:	3301      	adds	r3, #1
1000c7ce:	071b      	lsls	r3, r3, #28
1000c7d0:	0f5b      	lsrs	r3, r3, #29
1000c7d2:	00d2      	lsls	r2, r2, #3
1000c7d4:	4313      	orrs	r3, r2
1000c7d6:	b29b      	uxth	r3, r3
1000c7d8:	682a      	ldr	r2, [r5, #0]
1000c7da:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c7dc:	682b      	ldr	r3, [r5, #0]
1000c7de:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c7e0:	682b      	ldr	r3, [r5, #0]
1000c7e2:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c7e4:	2000      	movs	r0, #0
1000c7e6:	bc0c      	pop	{r2, r3}
1000c7e8:	4690      	mov	r8, r2
1000c7ea:	4699      	mov	r9, r3
1000c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c7ee:	46c0      	nop			; (mov r8, r8)
1000c7f0:	40004000 	.word	0x40004000
1000c7f4:	1000bfa1 	.word	0x1000bfa1
1000c7f8:	1000b8d9 	.word	0x1000b8d9
1000c7fc:	1001a3e4 	.word	0x1001a3e4
1000c800:	1000c419 	.word	0x1000c419
1000c804:	1000c409 	.word	0x1000c409
1000c808:	1000c4a1 	.word	0x1000c4a1
1000c80c:	e000e100 	.word	0xe000e100
1000c810:	40005000 	.word	0x40005000
1000c814:	1000c52d 	.word	0x1000c52d
1000c818:	1000c5b5 	.word	0x1000c5b5
1000c81c:	1000b8cd 	.word	0x1000b8cd
1000c820:	1001321d 	.word	0x1001321d
1000c824:	1000b529 	.word	0x1000b529

1000c828 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c828:	6802      	ldr	r2, [r0, #0]
1000c82a:	2001      	movs	r0, #1
1000c82c:	7913      	ldrb	r3, [r2, #4]
1000c82e:	4203      	tst	r3, r0
1000c830:	d0fc      	beq.n	1000c82c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c832:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c834:	2000      	movs	r0, #0
1000c836:	4770      	bx	lr

1000c838 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c838:	6802      	ldr	r2, [r0, #0]
1000c83a:	2001      	movs	r0, #1
1000c83c:	7d13      	ldrb	r3, [r2, #20]
1000c83e:	4203      	tst	r3, r0
1000c840:	d0fc      	beq.n	1000c83c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c842:	7c13      	ldrb	r3, [r2, #16]
1000c844:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c846:	2000      	movs	r0, #0
1000c848:	4770      	bx	lr
1000c84a:	46c0      	nop			; (mov r8, r8)

1000c84c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c84c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c84e:	2a00      	cmp	r2, #0
1000c850:	d00d      	beq.n	1000c86e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c852:	330b      	adds	r3, #11
1000c854:	5cc3      	ldrb	r3, [r0, r3]
1000c856:	b2db      	uxtb	r3, r3
1000c858:	2b05      	cmp	r3, #5
1000c85a:	d008      	beq.n	1000c86e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c85c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c85e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c860:	2205      	movs	r2, #5
1000c862:	2322      	movs	r3, #34	; 0x22
1000c864:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c866:	6803      	ldr	r3, [r0, #0]
1000c868:	3a04      	subs	r2, #4
1000c86a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c86c:	2300      	movs	r3, #0
}
1000c86e:	0018      	movs	r0, r3
1000c870:	4770      	bx	lr
1000c872:	46c0      	nop			; (mov r8, r8)

1000c874 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c874:	0093      	lsls	r3, r2, #2
1000c876:	18c3      	adds	r3, r0, r3
1000c878:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c87a:	2120      	movs	r1, #32
1000c87c:	2301      	movs	r3, #1
1000c87e:	4093      	lsls	r3, r2
1000c880:	5c42      	ldrb	r2, [r0, r1]
1000c882:	4313      	orrs	r3, r2
1000c884:	5443      	strb	r3, [r0, r1]
}
1000c886:	4770      	bx	lr

1000c888 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c888:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c88a:	2221      	movs	r2, #33	; 0x21
1000c88c:	2301      	movs	r3, #1
1000c88e:	408b      	lsls	r3, r1
1000c890:	5c84      	ldrb	r4, [r0, r2]
1000c892:	4323      	orrs	r3, r4
1000c894:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c896:	2901      	cmp	r1, #1
1000c898:	d104      	bne.n	1000c8a4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c89a:	6802      	ldr	r2, [r0, #0]
1000c89c:	7a11      	ldrb	r1, [r2, #8]
1000c89e:	2320      	movs	r3, #32
1000c8a0:	430b      	orrs	r3, r1
1000c8a2:	7213      	strb	r3, [r2, #8]
	}
}
1000c8a4:	bd10      	pop	{r4, pc}
1000c8a6:	46c0      	nop			; (mov r8, r8)

1000c8a8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c8a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c8aa:	2201      	movs	r2, #1
1000c8ac:	408a      	lsls	r2, r1
1000c8ae:	2421      	movs	r4, #33	; 0x21
1000c8b0:	5d03      	ldrb	r3, [r0, r4]
1000c8b2:	4393      	bics	r3, r2
1000c8b4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c8b6:	2901      	cmp	r1, #1
1000c8b8:	d104      	bne.n	1000c8c4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c8ba:	6802      	ldr	r2, [r0, #0]
1000c8bc:	7a13      	ldrb	r3, [r2, #8]
1000c8be:	311f      	adds	r1, #31
1000c8c0:	438b      	bics	r3, r1
1000c8c2:	7213      	strb	r3, [r2, #8]
	}

}
1000c8c4:	bd10      	pop	{r4, pc}
1000c8c6:	46c0      	nop			; (mov r8, r8)

1000c8c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8ca:	4647      	mov	r7, r8
1000c8cc:	b480      	push	{r7}
1000c8ce:	000c      	movs	r4, r1
1000c8d0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c8d2:	2800      	cmp	r0, #0
1000c8d4:	d10d      	bne.n	1000c8f2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c8d6:	2a00      	cmp	r2, #0
1000c8d8:	dd0e      	ble.n	1000c8f8 <_read+0x30>
1000c8da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c8dc:	4e08      	ldr	r6, [pc, #32]	; (1000c900 <_read+0x38>)
1000c8de:	4d09      	ldr	r5, [pc, #36]	; (1000c904 <_read+0x3c>)
1000c8e0:	6830      	ldr	r0, [r6, #0]
1000c8e2:	0021      	movs	r1, r4
1000c8e4:	682b      	ldr	r3, [r5, #0]
1000c8e6:	4798      	blx	r3
		ptr++;
1000c8e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c8ea:	42a7      	cmp	r7, r4
1000c8ec:	d1f8      	bne.n	1000c8e0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c8ee:	4640      	mov	r0, r8
1000c8f0:	e003      	b.n	1000c8fa <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c8f2:	2001      	movs	r0, #1
1000c8f4:	4240      	negs	r0, r0
1000c8f6:	e000      	b.n	1000c8fa <_read+0x32>
	}

	for (; len > 0; --len) {
1000c8f8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c8fa:	bc04      	pop	{r2}
1000c8fc:	4690      	mov	r8, r2
1000c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c900:	1001a3f4 	.word	0x1001a3f4
1000c904:	1001a3ec 	.word	0x1001a3ec

1000c908 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c90a:	4647      	mov	r7, r8
1000c90c:	b480      	push	{r7}
1000c90e:	000e      	movs	r6, r1
1000c910:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c912:	3801      	subs	r0, #1
1000c914:	2802      	cmp	r0, #2
1000c916:	d811      	bhi.n	1000c93c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c918:	2a00      	cmp	r2, #0
1000c91a:	d012      	beq.n	1000c942 <_write+0x3a>
1000c91c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c91e:	4b0c      	ldr	r3, [pc, #48]	; (1000c950 <_write+0x48>)
1000c920:	4698      	mov	r8, r3
1000c922:	4f0c      	ldr	r7, [pc, #48]	; (1000c954 <_write+0x4c>)
1000c924:	4643      	mov	r3, r8
1000c926:	6818      	ldr	r0, [r3, #0]
1000c928:	5d31      	ldrb	r1, [r6, r4]
1000c92a:	683b      	ldr	r3, [r7, #0]
1000c92c:	4798      	blx	r3
1000c92e:	2800      	cmp	r0, #0
1000c930:	db09      	blt.n	1000c946 <_write+0x3e>
			return -1;
		}
		++nChars;
1000c932:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c934:	42a5      	cmp	r5, r4
1000c936:	d1f5      	bne.n	1000c924 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c938:	0020      	movs	r0, r4
1000c93a:	e006      	b.n	1000c94a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c93c:	2001      	movs	r0, #1
1000c93e:	4240      	negs	r0, r0
1000c940:	e003      	b.n	1000c94a <_write+0x42>
	}

	for (; len != 0; --len) {
1000c942:	2000      	movs	r0, #0
1000c944:	e001      	b.n	1000c94a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c946:	2001      	movs	r0, #1
1000c948:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c94a:	bc04      	pop	{r2}
1000c94c:	4690      	mov	r8, r2
1000c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c950:	1001a3f4 	.word	0x1001a3f4
1000c954:	1001a3f0 	.word	0x1001a3f0

1000c958 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c958:	2000      	movs	r0, #0
1000c95a:	4770      	bx	lr

1000c95c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c95c:	2000      	movs	r0, #0
1000c95e:	4770      	bx	lr

1000c960 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c960:	78c0      	ldrb	r0, [r0, #3]
1000c962:	2800      	cmp	r0, #0
1000c964:	d000      	beq.n	1000c968 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c966:	20e2      	movs	r0, #226	; 0xe2
}
1000c968:	4770      	bx	lr
1000c96a:	46c0      	nop			; (mov r8, r8)

1000c96c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c96c:	2000      	movs	r0, #0
1000c96e:	4770      	bx	lr

1000c970 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c970:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c972:	7800      	ldrb	r0, [r0, #0]
1000c974:	2800      	cmp	r0, #0
1000c976:	d006      	beq.n	1000c986 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c978:	4803      	ldr	r0, [pc, #12]	; (1000c988 <ble_scan_report_handler+0x18>)
1000c97a:	4b04      	ldr	r3, [pc, #16]	; (1000c98c <ble_scan_report_handler+0x1c>)
1000c97c:	4798      	blx	r3
1000c97e:	4804      	ldr	r0, [pc, #16]	; (1000c990 <ble_scan_report_handler+0x20>)
1000c980:	4b04      	ldr	r3, [pc, #16]	; (1000c994 <ble_scan_report_handler+0x24>)
1000c982:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c984:	20e2      	movs	r0, #226	; 0xe2
}
1000c986:	bd10      	pop	{r4, pc}
1000c988:	10017414 	.word	0x10017414
1000c98c:	100164cd 	.word	0x100164cd
1000c990:	10017b9c 	.word	0x10017b9c
1000c994:	100163ad 	.word	0x100163ad

1000c998 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c998:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c99a:	7800      	ldrb	r0, [r0, #0]
1000c99c:	2800      	cmp	r0, #0
1000c99e:	d006      	beq.n	1000c9ae <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c9a0:	4803      	ldr	r0, [pc, #12]	; (1000c9b0 <ble_adv_report_handler+0x18>)
1000c9a2:	4b04      	ldr	r3, [pc, #16]	; (1000c9b4 <ble_adv_report_handler+0x1c>)
1000c9a4:	4798      	blx	r3
1000c9a6:	4804      	ldr	r0, [pc, #16]	; (1000c9b8 <ble_adv_report_handler+0x20>)
1000c9a8:	4b04      	ldr	r3, [pc, #16]	; (1000c9bc <ble_adv_report_handler+0x24>)
1000c9aa:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c9ac:	20e2      	movs	r0, #226	; 0xe2
}
1000c9ae:	bd10      	pop	{r4, pc}
1000c9b0:	10017414 	.word	0x10017414
1000c9b4:	100164cd 	.word	0x100164cd
1000c9b8:	10017bb0 	.word	0x10017bb0
1000c9bc:	100163ad 	.word	0x100163ad

1000c9c0 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c9c0:	b510      	push	{r4, lr}
1000c9c2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c9c4:	78c0      	ldrb	r0, [r0, #3]
1000c9c6:	2800      	cmp	r0, #0
1000c9c8:	d008      	beq.n	1000c9dc <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c9ca:	4805      	ldr	r0, [pc, #20]	; (1000c9e0 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000c9cc:	4b05      	ldr	r3, [pc, #20]	; (1000c9e4 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000c9ce:	4798      	blx	r3
1000c9d0:	78a2      	ldrb	r2, [r4, #2]
1000c9d2:	8821      	ldrh	r1, [r4, #0]
1000c9d4:	4804      	ldr	r0, [pc, #16]	; (1000c9e8 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000c9d6:	4b05      	ldr	r3, [pc, #20]	; (1000c9ec <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000c9d8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c9da:	20e2      	movs	r0, #226	; 0xe2
}
1000c9dc:	bd10      	pop	{r4, pc}
1000c9de:	46c0      	nop			; (mov r8, r8)
1000c9e0:	10017414 	.word	0x10017414
1000c9e4:	100164cd 	.word	0x100164cd
1000c9e8:	10017bc4 	.word	0x10017bc4
1000c9ec:	100163ad 	.word	0x100163ad

1000c9f0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c9f2:	0004      	movs	r4, r0
1000c9f4:	4b19      	ldr	r3, [pc, #100]	; (1000ca5c <ble_disconnected_state_handler+0x6c>)
1000c9f6:	229b      	movs	r2, #155	; 0x9b
1000c9f8:	0092      	lsls	r2, r2, #2
1000c9fa:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c9fc:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c9fe:	2600      	movs	r6, #0
1000ca00:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ca02:	001a      	movs	r2, r3
1000ca04:	3a56      	subs	r2, #86	; 0x56
1000ca06:	8811      	ldrh	r1, [r2, #0]
1000ca08:	8822      	ldrh	r2, [r4, #0]
1000ca0a:	4291      	cmp	r1, r2
1000ca0c:	d119      	bne.n	1000ca42 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ca0e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ca10:	2a05      	cmp	r2, #5
1000ca12:	d001      	beq.n	1000ca18 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ca14:	2a08      	cmp	r2, #8
1000ca16:	d101      	bne.n	1000ca1c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ca18:	7007      	strb	r7, [r0, #0]
1000ca1a:	e012      	b.n	1000ca42 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000ca1c:	2a07      	cmp	r2, #7
1000ca1e:	d80f      	bhi.n	1000ca40 <ble_disconnected_state_handler+0x50>
1000ca20:	0092      	lsls	r2, r2, #2
1000ca22:	490f      	ldr	r1, [pc, #60]	; (1000ca60 <ble_disconnected_state_handler+0x70>)
1000ca24:	588a      	ldr	r2, [r1, r2]
1000ca26:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ca28:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000ca2a:	4a0e      	ldr	r2, [pc, #56]	; (1000ca64 <ble_disconnected_state_handler+0x74>)
1000ca2c:	7812      	ldrb	r2, [r2, #0]
1000ca2e:	2a00      	cmp	r2, #0
1000ca30:	d007      	beq.n	1000ca42 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000ca32:	4a0c      	ldr	r2, [pc, #48]	; (1000ca64 <ble_disconnected_state_handler+0x74>)
1000ca34:	7812      	ldrb	r2, [r2, #0]
1000ca36:	3a01      	subs	r2, #1
1000ca38:	b2d2      	uxtb	r2, r2
1000ca3a:	490a      	ldr	r1, [pc, #40]	; (1000ca64 <ble_disconnected_state_handler+0x74>)
1000ca3c:	700a      	strb	r2, [r1, #0]
1000ca3e:	e000      	b.n	1000ca42 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ca40:	7006      	strb	r6, [r0, #0]
1000ca42:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ca44:	42ab      	cmp	r3, r5
1000ca46:	d1db      	bne.n	1000ca00 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ca48:	4807      	ldr	r0, [pc, #28]	; (1000ca68 <ble_disconnected_state_handler+0x78>)
1000ca4a:	4b08      	ldr	r3, [pc, #32]	; (1000ca6c <ble_disconnected_state_handler+0x7c>)
1000ca4c:	4798      	blx	r3
1000ca4e:	8822      	ldrh	r2, [r4, #0]
1000ca50:	78a1      	ldrb	r1, [r4, #2]
1000ca52:	4807      	ldr	r0, [pc, #28]	; (1000ca70 <ble_disconnected_state_handler+0x80>)
1000ca54:	4b07      	ldr	r3, [pc, #28]	; (1000ca74 <ble_disconnected_state_handler+0x84>)
1000ca56:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000ca58:	2000      	movs	r0, #0
1000ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca5c:	1001a46e 	.word	0x1001a46e
1000ca60:	10017a38 	.word	0x10017a38
1000ca64:	1001a67c 	.word	0x1001a67c
1000ca68:	10017414 	.word	0x10017414
1000ca6c:	100164cd 	.word	0x100164cd
1000ca70:	10017bfc 	.word	0x10017bfc
1000ca74:	100163ad 	.word	0x100163ad

1000ca78 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ca7a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000ca7c:	8801      	ldrh	r1, [r0, #0]
1000ca7e:	4b28      	ldr	r3, [pc, #160]	; (1000cb20 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ca80:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000ca82:	891a      	ldrh	r2, [r3, #8]
1000ca84:	428a      	cmp	r2, r1
1000ca86:	d104      	bne.n	1000ca92 <ble_encryption_status_change_handler+0x1a>
1000ca88:	001a      	movs	r2, r3
1000ca8a:	325e      	adds	r2, #94	; 0x5e
1000ca8c:	7812      	ldrb	r2, [r2, #0]
1000ca8e:	2a06      	cmp	r2, #6
1000ca90:	d02e      	beq.n	1000caf0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ca92:	3401      	adds	r4, #1
1000ca94:	b2e4      	uxtb	r4, r4
1000ca96:	337c      	adds	r3, #124	; 0x7c
1000ca98:	2c05      	cmp	r4, #5
1000ca9a:	d1f2      	bne.n	1000ca82 <ble_encryption_status_change_handler+0xa>
1000ca9c:	e039      	b.n	1000cb12 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000ca9e:	4920      	ldr	r1, [pc, #128]	; (1000cb20 <ble_encryption_status_change_handler+0xa8>)
1000caa0:	0163      	lsls	r3, r4, #5
1000caa2:	1b1a      	subs	r2, r3, r4
1000caa4:	0092      	lsls	r2, r2, #2
1000caa6:	188a      	adds	r2, r1, r2
1000caa8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000caaa:	0014      	movs	r4, r2
1000caac:	345e      	adds	r4, #94	; 0x5e
1000caae:	2307      	movs	r3, #7
1000cab0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000cab2:	481c      	ldr	r0, [pc, #112]	; (1000cb24 <ble_encryption_status_change_handler+0xac>)
1000cab4:	4b1c      	ldr	r3, [pc, #112]	; (1000cb28 <ble_encryption_status_change_handler+0xb0>)
1000cab6:	4798      	blx	r3
1000cab8:	481c      	ldr	r0, [pc, #112]	; (1000cb2c <ble_encryption_status_change_handler+0xb4>)
1000caba:	4b1d      	ldr	r3, [pc, #116]	; (1000cb30 <ble_encryption_status_change_handler+0xb8>)
1000cabc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cabe:	25e2      	movs	r5, #226	; 0xe2
1000cac0:	e02b      	b.n	1000cb1a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000cac2:	4818      	ldr	r0, [pc, #96]	; (1000cb24 <ble_encryption_status_change_handler+0xac>)
1000cac4:	4b18      	ldr	r3, [pc, #96]	; (1000cb28 <ble_encryption_status_change_handler+0xb0>)
1000cac6:	4798      	blx	r3
1000cac8:	481a      	ldr	r0, [pc, #104]	; (1000cb34 <ble_encryption_status_change_handler+0xbc>)
1000caca:	4b19      	ldr	r3, [pc, #100]	; (1000cb30 <ble_encryption_status_change_handler+0xb8>)
1000cacc:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000cace:	4914      	ldr	r1, [pc, #80]	; (1000cb20 <ble_encryption_status_change_handler+0xa8>)
1000cad0:	0163      	lsls	r3, r4, #5
1000cad2:	1b1a      	subs	r2, r3, r4
1000cad4:	0092      	lsls	r2, r2, #2
1000cad6:	188a      	adds	r2, r1, r2
1000cad8:	0010      	movs	r0, r2
1000cada:	305e      	adds	r0, #94	; 0x5e
1000cadc:	2708      	movs	r7, #8
1000cade:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000cae0:	78f0      	ldrb	r0, [r6, #3]
1000cae2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000cae4:	78b2      	ldrb	r2, [r6, #2]
1000cae6:	1b1c      	subs	r4, r3, r4
1000cae8:	00a4      	lsls	r4, r4, #2
1000caea:	190c      	adds	r4, r1, r4
1000caec:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000caee:	e014      	b.n	1000cb1a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000caf0:	78b5      	ldrb	r5, [r6, #2]
1000caf2:	2d00      	cmp	r5, #0
1000caf4:	d0e5      	beq.n	1000cac2 <ble_encryption_status_change_handler+0x4a>
1000caf6:	e7d2      	b.n	1000ca9e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000caf8:	4e0a      	ldr	r6, [pc, #40]	; (1000cb24 <ble_encryption_status_change_handler+0xac>)
1000cafa:	0030      	movs	r0, r6
1000cafc:	4d0a      	ldr	r5, [pc, #40]	; (1000cb28 <ble_encryption_status_change_handler+0xb0>)
1000cafe:	47a8      	blx	r5
1000cb00:	480c      	ldr	r0, [pc, #48]	; (1000cb34 <ble_encryption_status_change_handler+0xbc>)
1000cb02:	4c0b      	ldr	r4, [pc, #44]	; (1000cb30 <ble_encryption_status_change_handler+0xb8>)
1000cb04:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000cb06:	0030      	movs	r0, r6
1000cb08:	47a8      	blx	r5
1000cb0a:	480b      	ldr	r0, [pc, #44]	; (1000cb38 <ble_encryption_status_change_handler+0xc0>)
1000cb0c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cb0e:	25e2      	movs	r5, #226	; 0xe2
1000cb10:	e003      	b.n	1000cb1a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cb12:	78b5      	ldrb	r5, [r6, #2]
1000cb14:	2d00      	cmp	r5, #0
1000cb16:	d1c2      	bne.n	1000ca9e <ble_encryption_status_change_handler+0x26>
1000cb18:	e7ee      	b.n	1000caf8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000cb1a:	0028      	movs	r0, r5
1000cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cb1e:	46c0      	nop			; (mov r8, r8)
1000cb20:	1001a410 	.word	0x1001a410
1000cb24:	10017414 	.word	0x10017414
1000cb28:	100164cd 	.word	0x100164cd
1000cb2c:	10017c2c 	.word	0x10017c2c
1000cb30:	100163ad 	.word	0x100163ad
1000cb34:	10017c40 	.word	0x10017c40
1000cb38:	10017c64 	.word	0x10017c64

1000cb3c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000cb3c:	b510      	push	{r4, lr}
1000cb3e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000cb40:	4b15      	ldr	r3, [pc, #84]	; (1000cb98 <ble_scan_info_handler+0x5c>)
1000cb42:	781b      	ldrb	r3, [r3, #0]
1000cb44:	b2db      	uxtb	r3, r3
1000cb46:	2b13      	cmp	r3, #19
1000cb48:	d812      	bhi.n	1000cb70 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000cb4a:	4c13      	ldr	r4, [pc, #76]	; (1000cb98 <ble_scan_info_handler+0x5c>)
1000cb4c:	7823      	ldrb	r3, [r4, #0]
1000cb4e:	b2db      	uxtb	r3, r3
1000cb50:	0098      	lsls	r0, r3, #2
1000cb52:	18c0      	adds	r0, r0, r3
1000cb54:	00c0      	lsls	r0, r0, #3
1000cb56:	18c3      	adds	r3, r0, r3
1000cb58:	4810      	ldr	r0, [pc, #64]	; (1000cb9c <ble_scan_info_handler+0x60>)
1000cb5a:	1818      	adds	r0, r3, r0
1000cb5c:	2229      	movs	r2, #41	; 0x29
1000cb5e:	4b10      	ldr	r3, [pc, #64]	; (1000cba0 <ble_scan_info_handler+0x64>)
1000cb60:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000cb62:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000cb64:	7823      	ldrb	r3, [r4, #0]
1000cb66:	3301      	adds	r3, #1
1000cb68:	b2db      	uxtb	r3, r3
1000cb6a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000cb6c:	2300      	movs	r3, #0
1000cb6e:	e011      	b.n	1000cb94 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cb70:	480c      	ldr	r0, [pc, #48]	; (1000cba4 <ble_scan_info_handler+0x68>)
1000cb72:	4b0d      	ldr	r3, [pc, #52]	; (1000cba8 <ble_scan_info_handler+0x6c>)
1000cb74:	4798      	blx	r3
1000cb76:	480d      	ldr	r0, [pc, #52]	; (1000cbac <ble_scan_info_handler+0x70>)
1000cb78:	4b0d      	ldr	r3, [pc, #52]	; (1000cbb0 <ble_scan_info_handler+0x74>)
1000cb7a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cb7c:	4b0d      	ldr	r3, [pc, #52]	; (1000cbb4 <ble_scan_info_handler+0x78>)
1000cb7e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cb80:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cb82:	2800      	cmp	r0, #0
1000cb84:	d006      	beq.n	1000cb94 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000cb86:	4807      	ldr	r0, [pc, #28]	; (1000cba4 <ble_scan_info_handler+0x68>)
1000cb88:	4b07      	ldr	r3, [pc, #28]	; (1000cba8 <ble_scan_info_handler+0x6c>)
1000cb8a:	4798      	blx	r3
1000cb8c:	480a      	ldr	r0, [pc, #40]	; (1000cbb8 <ble_scan_info_handler+0x7c>)
1000cb8e:	4b08      	ldr	r3, [pc, #32]	; (1000cbb0 <ble_scan_info_handler+0x74>)
1000cb90:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cb92:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000cb94:	0018      	movs	r0, r3
1000cb96:	bd10      	pop	{r4, pc}
1000cb98:	10018f14 	.word	0x10018f14
1000cb9c:	1001a6f4 	.word	0x1001a6f4
1000cba0:	10016253 	.word	0x10016253
1000cba4:	10017414 	.word	0x10017414
1000cba8:	100164cd 	.word	0x100164cd
1000cbac:	10017c8c 	.word	0x10017c8c
1000cbb0:	100163ad 	.word	0x100163ad
1000cbb4:	1000f7b5 	.word	0x1000f7b5
1000cbb8:	10017cc4 	.word	0x10017cc4

1000cbbc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cbbe:	464f      	mov	r7, r9
1000cbc0:	4646      	mov	r6, r8
1000cbc2:	b4c0      	push	{r6, r7}
1000cbc4:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cbc6:	8841      	ldrh	r1, [r0, #2]
1000cbc8:	4b3a      	ldr	r3, [pc, #232]	; (1000ccb4 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cbca:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cbcc:	891a      	ldrh	r2, [r3, #8]
1000cbce:	428a      	cmp	r2, r1
1000cbd0:	d104      	bne.n	1000cbdc <ble_pair_done_handler+0x20>
1000cbd2:	001a      	movs	r2, r3
1000cbd4:	325e      	adds	r2, #94	; 0x5e
1000cbd6:	7812      	ldrb	r2, [r2, #0]
1000cbd8:	2a03      	cmp	r2, #3
1000cbda:	d062      	beq.n	1000cca2 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cbdc:	3401      	adds	r4, #1
1000cbde:	b2e4      	uxtb	r4, r4
1000cbe0:	337c      	adds	r3, #124	; 0x7c
1000cbe2:	2c05      	cmp	r4, #5
1000cbe4:	d1f2      	bne.n	1000cbcc <ble_pair_done_handler+0x10>
1000cbe6:	e02b      	b.n	1000cc40 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000cbe8:	0163      	lsls	r3, r4, #5
1000cbea:	1b1c      	subs	r4, r3, r4
1000cbec:	00a4      	lsls	r4, r4, #2
1000cbee:	4b31      	ldr	r3, [pc, #196]	; (1000ccb4 <ble_pair_done_handler+0xf8>)
1000cbf0:	191c      	adds	r4, r3, r4
1000cbf2:	345e      	adds	r4, #94	; 0x5e
1000cbf4:	7823      	ldrb	r3, [r4, #0]
1000cbf6:	2b01      	cmp	r3, #1
1000cbf8:	d913      	bls.n	1000cc22 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000cbfa:	482f      	ldr	r0, [pc, #188]	; (1000ccb8 <ble_pair_done_handler+0xfc>)
1000cbfc:	4b2f      	ldr	r3, [pc, #188]	; (1000ccbc <ble_pair_done_handler+0x100>)
1000cbfe:	4798      	blx	r3
1000cc00:	482f      	ldr	r0, [pc, #188]	; (1000ccc0 <ble_pair_done_handler+0x104>)
1000cc02:	4b30      	ldr	r3, [pc, #192]	; (1000ccc4 <ble_pair_done_handler+0x108>)
1000cc04:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000cc06:	8868      	ldrh	r0, [r5, #2]
1000cc08:	2113      	movs	r1, #19
1000cc0a:	4b2f      	ldr	r3, [pc, #188]	; (1000ccc8 <ble_pair_done_handler+0x10c>)
1000cc0c:	4798      	blx	r3
1000cc0e:	1e06      	subs	r6, r0, #0
1000cc10:	d04b      	beq.n	1000ccaa <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000cc12:	4829      	ldr	r0, [pc, #164]	; (1000ccb8 <ble_pair_done_handler+0xfc>)
1000cc14:	4b29      	ldr	r3, [pc, #164]	; (1000ccbc <ble_pair_done_handler+0x100>)
1000cc16:	4798      	blx	r3
1000cc18:	482c      	ldr	r0, [pc, #176]	; (1000cccc <ble_pair_done_handler+0x110>)
1000cc1a:	4b2a      	ldr	r3, [pc, #168]	; (1000ccc4 <ble_pair_done_handler+0x108>)
1000cc1c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cc1e:	26e2      	movs	r6, #226	; 0xe2
1000cc20:	e043      	b.n	1000ccaa <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000cc22:	2600      	movs	r6, #0
1000cc24:	e041      	b.n	1000ccaa <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cc26:	4e24      	ldr	r6, [pc, #144]	; (1000ccb8 <ble_pair_done_handler+0xfc>)
1000cc28:	0030      	movs	r0, r6
1000cc2a:	4d24      	ldr	r5, [pc, #144]	; (1000ccbc <ble_pair_done_handler+0x100>)
1000cc2c:	47a8      	blx	r5
1000cc2e:	4828      	ldr	r0, [pc, #160]	; (1000ccd0 <ble_pair_done_handler+0x114>)
1000cc30:	4c24      	ldr	r4, [pc, #144]	; (1000ccc4 <ble_pair_done_handler+0x108>)
1000cc32:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000cc34:	0030      	movs	r0, r6
1000cc36:	47a8      	blx	r5
1000cc38:	4826      	ldr	r0, [pc, #152]	; (1000ccd4 <ble_pair_done_handler+0x118>)
1000cc3a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cc3c:	26e2      	movs	r6, #226	; 0xe2
1000cc3e:	e034      	b.n	1000ccaa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cc40:	792b      	ldrb	r3, [r5, #4]
1000cc42:	2b00      	cmp	r3, #0
1000cc44:	d1d0      	bne.n	1000cbe8 <ble_pair_done_handler+0x2c>
1000cc46:	e7ee      	b.n	1000cc26 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cc48:	481b      	ldr	r0, [pc, #108]	; (1000ccb8 <ble_pair_done_handler+0xfc>)
1000cc4a:	4b1c      	ldr	r3, [pc, #112]	; (1000ccbc <ble_pair_done_handler+0x100>)
1000cc4c:	4798      	blx	r3
1000cc4e:	4820      	ldr	r0, [pc, #128]	; (1000ccd0 <ble_pair_done_handler+0x114>)
1000cc50:	4b1c      	ldr	r3, [pc, #112]	; (1000ccc4 <ble_pair_done_handler+0x108>)
1000cc52:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000cc54:	782a      	ldrb	r2, [r5, #0]
1000cc56:	4b17      	ldr	r3, [pc, #92]	; (1000ccb4 <ble_pair_done_handler+0xf8>)
1000cc58:	4699      	mov	r9, r3
1000cc5a:	0167      	lsls	r7, r4, #5
1000cc5c:	1b3b      	subs	r3, r7, r4
1000cc5e:	009b      	lsls	r3, r3, #2
1000cc60:	444b      	add	r3, r9
1000cc62:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000cc64:	792a      	ldrb	r2, [r5, #4]
1000cc66:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000cc68:	335e      	adds	r3, #94	; 0x5e
1000cc6a:	2205      	movs	r2, #5
1000cc6c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000cc6e:	1b38      	subs	r0, r7, r4
1000cc70:	0080      	lsls	r0, r0, #2
1000cc72:	4448      	add	r0, r9
1000cc74:	3036      	adds	r0, #54	; 0x36
1000cc76:	0029      	movs	r1, r5
1000cc78:	3122      	adds	r1, #34	; 0x22
1000cc7a:	320b      	adds	r2, #11
1000cc7c:	4b16      	ldr	r3, [pc, #88]	; (1000ccd8 <ble_pair_done_handler+0x11c>)
1000cc7e:	4698      	mov	r8, r3
1000cc80:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000cc82:	1b38      	subs	r0, r7, r4
1000cc84:	0080      	lsls	r0, r0, #2
1000cc86:	4448      	add	r0, r9
1000cc88:	3046      	adds	r0, #70	; 0x46
1000cc8a:	0029      	movs	r1, r5
1000cc8c:	3132      	adds	r1, #50	; 0x32
1000cc8e:	2217      	movs	r2, #23
1000cc90:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000cc92:	1b38      	subs	r0, r7, r4
1000cc94:	0080      	lsls	r0, r0, #2
1000cc96:	4448      	add	r0, r9
1000cc98:	301a      	adds	r0, #26
1000cc9a:	1da9      	adds	r1, r5, #6
1000cc9c:	221c      	movs	r2, #28
1000cc9e:	47c0      	blx	r8
1000cca0:	e003      	b.n	1000ccaa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cca2:	792e      	ldrb	r6, [r5, #4]
1000cca4:	2e00      	cmp	r6, #0
1000cca6:	d0cf      	beq.n	1000cc48 <ble_pair_done_handler+0x8c>
1000cca8:	e79e      	b.n	1000cbe8 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000ccaa:	0030      	movs	r0, r6
1000ccac:	bc0c      	pop	{r2, r3}
1000ccae:	4690      	mov	r8, r2
1000ccb0:	4699      	mov	r9, r3
1000ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ccb4:	1001a410 	.word	0x1001a410
1000ccb8:	10017414 	.word	0x10017414
1000ccbc:	100164cd 	.word	0x100164cd
1000ccc0:	10017cdc 	.word	0x10017cdc
1000ccc4:	100163ad 	.word	0x100163ad
1000ccc8:	1000f7d5 	.word	0x1000f7d5
1000cccc:	10017cfc 	.word	0x10017cfc
1000ccd0:	10017d18 	.word	0x10017d18
1000ccd4:	10017d44 	.word	0x10017d44
1000ccd8:	10016253 	.word	0x10016253

1000ccdc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000ccdc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000ccde:	8800      	ldrh	r0, [r0, #0]
1000cce0:	2378      	movs	r3, #120	; 0x78
1000cce2:	2201      	movs	r2, #1
1000cce4:	2101      	movs	r1, #1
1000cce6:	4c02      	ldr	r4, [pc, #8]	; (1000ccf0 <ble_conn_param_update_req+0x14>)
1000cce8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000ccea:	2000      	movs	r0, #0
1000ccec:	bd10      	pop	{r4, pc}
1000ccee:	46c0      	nop			; (mov r8, r8)
1000ccf0:	1000f7f5 	.word	0x1000f7f5

1000ccf4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ccf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccf6:	4657      	mov	r7, sl
1000ccf8:	464e      	mov	r6, r9
1000ccfa:	4645      	mov	r5, r8
1000ccfc:	b4e0      	push	{r5, r6, r7}
1000ccfe:	b084      	sub	sp, #16
1000cd00:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000cd02:	2209      	movs	r2, #9
1000cd04:	2100      	movs	r1, #0
1000cd06:	a801      	add	r0, sp, #4
1000cd08:	4b6a      	ldr	r3, [pc, #424]	; (1000ceb4 <ble_slave_security_request_handler+0x1c0>)
1000cd0a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd0c:	8825      	ldrh	r5, [r4, #0]
1000cd0e:	496a      	ldr	r1, [pc, #424]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cd10:	000a      	movs	r2, r1
1000cd12:	2300      	movs	r3, #0
1000cd14:	8910      	ldrh	r0, [r2, #8]
1000cd16:	42a8      	cmp	r0, r5
1000cd18:	d116      	bne.n	1000cd48 <ble_slave_security_request_handler+0x54>
1000cd1a:	0010      	movs	r0, r2
1000cd1c:	305e      	adds	r0, #94	; 0x5e
1000cd1e:	7800      	ldrb	r0, [r0, #0]
1000cd20:	2802      	cmp	r0, #2
1000cd22:	d111      	bne.n	1000cd48 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000cd24:	4864      	ldr	r0, [pc, #400]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cd26:	015a      	lsls	r2, r3, #5
1000cd28:	1ad6      	subs	r6, r2, r3
1000cd2a:	00b6      	lsls	r6, r6, #2
1000cd2c:	1986      	adds	r6, r0, r6
1000cd2e:	365e      	adds	r6, #94	; 0x5e
1000cd30:	2206      	movs	r2, #6
1000cd32:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000cd34:	32f9      	adds	r2, #249	; 0xf9
1000cd36:	4013      	ands	r3, r2
1000cd38:	015a      	lsls	r2, r3, #5
1000cd3a:	1ad2      	subs	r2, r2, r3
1000cd3c:	0092      	lsls	r2, r2, #2
1000cd3e:	1882      	adds	r2, r0, r2
1000cd40:	7d12      	ldrb	r2, [r2, #20]
1000cd42:	07d0      	lsls	r0, r2, #31
1000cd44:	d405      	bmi.n	1000cd52 <ble_slave_security_request_handler+0x5e>
1000cd46:	e01b      	b.n	1000cd80 <ble_slave_security_request_handler+0x8c>
1000cd48:	3301      	adds	r3, #1
1000cd4a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd4c:	2b05      	cmp	r3, #5
1000cd4e:	d1e1      	bne.n	1000cd14 <ble_slave_security_request_handler+0x20>
1000cd50:	e01e      	b.n	1000cd90 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000cd52:	78e0      	ldrb	r0, [r4, #3]
1000cd54:	2800      	cmp	r0, #0
1000cd56:	d013      	beq.n	1000cd80 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000cd58:	0159      	lsls	r1, r3, #5
1000cd5a:	1ac9      	subs	r1, r1, r3
1000cd5c:	008b      	lsls	r3, r1, #2
1000cd5e:	4956      	ldr	r1, [pc, #344]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cd60:	18c9      	adds	r1, r1, r3
1000cd62:	311a      	adds	r1, #26
1000cd64:	8820      	ldrh	r0, [r4, #0]
1000cd66:	4b55      	ldr	r3, [pc, #340]	; (1000cebc <ble_slave_security_request_handler+0x1c8>)
1000cd68:	4798      	blx	r3
1000cd6a:	2800      	cmp	r0, #0
1000cd6c:	d100      	bne.n	1000cd70 <ble_slave_security_request_handler+0x7c>
1000cd6e:	e09b      	b.n	1000cea8 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000cd70:	4853      	ldr	r0, [pc, #332]	; (1000cec0 <ble_slave_security_request_handler+0x1cc>)
1000cd72:	4b54      	ldr	r3, [pc, #336]	; (1000cec4 <ble_slave_security_request_handler+0x1d0>)
1000cd74:	4798      	blx	r3
1000cd76:	4854      	ldr	r0, [pc, #336]	; (1000cec8 <ble_slave_security_request_handler+0x1d4>)
1000cd78:	4b54      	ldr	r3, [pc, #336]	; (1000cecc <ble_slave_security_request_handler+0x1d8>)
1000cd7a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cd7c:	20e2      	movs	r0, #226	; 0xe2
1000cd7e:	e093      	b.n	1000cea8 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cd80:	015a      	lsls	r2, r3, #5
1000cd82:	1ad3      	subs	r3, r2, r3
1000cd84:	009b      	lsls	r3, r3, #2
1000cd86:	4a4c      	ldr	r2, [pc, #304]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cd88:	18d3      	adds	r3, r2, r3
1000cd8a:	335e      	adds	r3, #94	; 0x5e
1000cd8c:	2202      	movs	r2, #2
1000cd8e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd90:	8825      	ldrh	r5, [r4, #0]
1000cd92:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd94:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cd96:	0016      	movs	r6, r2
1000cd98:	8908      	ldrh	r0, [r1, #8]
1000cd9a:	42a8      	cmp	r0, r5
1000cd9c:	d10d      	bne.n	1000cdba <ble_slave_security_request_handler+0xc6>
1000cd9e:	0008      	movs	r0, r1
1000cda0:	305e      	adds	r0, #94	; 0x5e
1000cda2:	7800      	ldrb	r0, [r0, #0]
1000cda4:	2802      	cmp	r0, #2
1000cda6:	d108      	bne.n	1000cdba <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000cda8:	0152      	lsls	r2, r2, #5
1000cdaa:	1b92      	subs	r2, r2, r6
1000cdac:	0096      	lsls	r6, r2, #2
1000cdae:	4a42      	ldr	r2, [pc, #264]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cdb0:	1992      	adds	r2, r2, r6
1000cdb2:	325e      	adds	r2, #94	; 0x5e
1000cdb4:	2103      	movs	r1, #3
1000cdb6:	7011      	strb	r1, [r2, #0]
			break;
1000cdb8:	e005      	b.n	1000cdc6 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdba:	3301      	adds	r3, #1
1000cdbc:	b2db      	uxtb	r3, r3
1000cdbe:	3201      	adds	r2, #1
1000cdc0:	317c      	adds	r1, #124	; 0x7c
1000cdc2:	2b05      	cmp	r3, #5
1000cdc4:	d1e7      	bne.n	1000cd96 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000cdc6:	aa01      	add	r2, sp, #4
1000cdc8:	78e1      	ldrb	r1, [r4, #3]
1000cdca:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000cdcc:	2101      	movs	r1, #1
1000cdce:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000cdd0:	3103      	adds	r1, #3
1000cdd2:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000cdd4:	001f      	movs	r7, r3
1000cdd6:	015a      	lsls	r2, r3, #5
1000cdd8:	1ad2      	subs	r2, r2, r3
1000cdda:	0092      	lsls	r2, r2, #2
1000cddc:	4936      	ldr	r1, [pc, #216]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000cdde:	5c52      	ldrb	r2, [r2, r1]
1000cde0:	2a02      	cmp	r2, #2
1000cde2:	d104      	bne.n	1000cdee <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cde4:	aa01      	add	r2, sp, #4
1000cde6:	2103      	movs	r1, #3
1000cde8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cdea:	71d1      	strb	r1, [r2, #7]
1000cdec:	e003      	b.n	1000cdf6 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000cdee:	aa01      	add	r2, sp, #4
1000cdf0:	2101      	movs	r1, #1
1000cdf2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000cdf4:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000cdf6:	aa01      	add	r2, sp, #4
1000cdf8:	2110      	movs	r1, #16
1000cdfa:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000cdfc:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000cdfe:	017a      	lsls	r2, r7, #5
1000ce00:	1bd2      	subs	r2, r2, r7
1000ce02:	0092      	lsls	r2, r2, #2
1000ce04:	492c      	ldr	r1, [pc, #176]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000ce06:	188a      	adds	r2, r1, r2
1000ce08:	7e12      	ldrb	r2, [r2, #24]
1000ce0a:	2a40      	cmp	r2, #64	; 0x40
1000ce0c:	d134      	bne.n	1000ce78 <ble_slave_security_request_handler+0x184>
1000ce0e:	015a      	lsls	r2, r3, #5
1000ce10:	1ad3      	subs	r3, r2, r3
1000ce12:	009b      	lsls	r3, r3, #2
1000ce14:	469a      	mov	sl, r3
1000ce16:	001e      	movs	r6, r3
1000ce18:	3660      	adds	r6, #96	; 0x60
1000ce1a:	1876      	adds	r6, r6, r1
1000ce1c:	4655      	mov	r5, sl
1000ce1e:	3568      	adds	r5, #104	; 0x68
1000ce20:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ce22:	4b2b      	ldr	r3, [pc, #172]	; (1000ced0 <ble_slave_security_request_handler+0x1dc>)
1000ce24:	4699      	mov	r9, r3
1000ce26:	230f      	movs	r3, #15
1000ce28:	4698      	mov	r8, r3
1000ce2a:	47c8      	blx	r9
1000ce2c:	4643      	mov	r3, r8
1000ce2e:	4018      	ands	r0, r3
1000ce30:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ce32:	47c8      	blx	r9
1000ce34:	4643      	mov	r3, r8
1000ce36:	4018      	ands	r0, r3
1000ce38:	74b0      	strb	r0, [r6, #18]
1000ce3a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ce3c:	42ae      	cmp	r6, r5
1000ce3e:	d1f4      	bne.n	1000ce2a <ble_slave_security_request_handler+0x136>
1000ce40:	4656      	mov	r6, sl
1000ce42:	3670      	adds	r6, #112	; 0x70
1000ce44:	4a1c      	ldr	r2, [pc, #112]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000ce46:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ce48:	4b21      	ldr	r3, [pc, #132]	; (1000ced0 <ble_slave_security_request_handler+0x1dc>)
1000ce4a:	4699      	mov	r9, r3
1000ce4c:	230f      	movs	r3, #15
1000ce4e:	4698      	mov	r8, r3
1000ce50:	47c8      	blx	r9
1000ce52:	4643      	mov	r3, r8
1000ce54:	4018      	ands	r0, r3
1000ce56:	7028      	strb	r0, [r5, #0]
1000ce58:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ce5a:	42b5      	cmp	r5, r6
1000ce5c:	d1f8      	bne.n	1000ce50 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ce5e:	4b1c      	ldr	r3, [pc, #112]	; (1000ced0 <ble_slave_security_request_handler+0x1dc>)
1000ce60:	4798      	blx	r3
1000ce62:	017b      	lsls	r3, r7, #5
1000ce64:	1bdb      	subs	r3, r3, r7
1000ce66:	009b      	lsls	r3, r3, #2
1000ce68:	4a13      	ldr	r2, [pc, #76]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000ce6a:	18d3      	adds	r3, r2, r3
1000ce6c:	001a      	movs	r2, r3
1000ce6e:	3270      	adds	r2, #112	; 0x70
1000ce70:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ce72:	337a      	adds	r3, #122	; 0x7a
1000ce74:	2210      	movs	r2, #16
1000ce76:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000ce78:	017a      	lsls	r2, r7, #5
1000ce7a:	1bd7      	subs	r7, r2, r7
1000ce7c:	00bf      	lsls	r7, r7, #2
1000ce7e:	3760      	adds	r7, #96	; 0x60
1000ce80:	4a0d      	ldr	r2, [pc, #52]	; (1000ceb8 <ble_slave_security_request_handler+0x1c4>)
1000ce82:	18ba      	adds	r2, r7, r2
1000ce84:	8820      	ldrh	r0, [r4, #0]
1000ce86:	2300      	movs	r3, #0
1000ce88:	a901      	add	r1, sp, #4
1000ce8a:	4c12      	ldr	r4, [pc, #72]	; (1000ced4 <ble_slave_security_request_handler+0x1e0>)
1000ce8c:	47a0      	blx	r4
1000ce8e:	2800      	cmp	r0, #0
1000ce90:	d00a      	beq.n	1000cea8 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000ce92:	ab01      	add	r3, sp, #4
1000ce94:	2200      	movs	r2, #0
1000ce96:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000ce98:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000ce9a:	4809      	ldr	r0, [pc, #36]	; (1000cec0 <ble_slave_security_request_handler+0x1cc>)
1000ce9c:	4b09      	ldr	r3, [pc, #36]	; (1000cec4 <ble_slave_security_request_handler+0x1d0>)
1000ce9e:	4798      	blx	r3
1000cea0:	480d      	ldr	r0, [pc, #52]	; (1000ced8 <ble_slave_security_request_handler+0x1e4>)
1000cea2:	4b0a      	ldr	r3, [pc, #40]	; (1000cecc <ble_slave_security_request_handler+0x1d8>)
1000cea4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cea6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000cea8:	b004      	add	sp, #16
1000ceaa:	bc1c      	pop	{r2, r3, r4}
1000ceac:	4690      	mov	r8, r2
1000ceae:	4699      	mov	r9, r3
1000ceb0:	46a2      	mov	sl, r4
1000ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ceb4:	10016265 	.word	0x10016265
1000ceb8:	1001a410 	.word	0x1001a410
1000cebc:	100103b9 	.word	0x100103b9
1000cec0:	10017414 	.word	0x10017414
1000cec4:	100164cd 	.word	0x100164cd
1000cec8:	10017d74 	.word	0x10017d74
1000cecc:	100163ad 	.word	0x100163ad
1000ced0:	100164e1 	.word	0x100164e1
1000ced4:	100101cd 	.word	0x100101cd
1000ced8:	10017d8c 	.word	0x10017d8c

1000cedc <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000cedc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cede:	465f      	mov	r7, fp
1000cee0:	4656      	mov	r6, sl
1000cee2:	464d      	mov	r5, r9
1000cee4:	4644      	mov	r4, r8
1000cee6:	b4f0      	push	{r4, r5, r6, r7}
1000cee8:	b085      	sub	sp, #20
1000ceea:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ceec:	8804      	ldrh	r4, [r0, #0]
1000ceee:	4a48      	ldr	r2, [pc, #288]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cef0:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cef2:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000cef4:	8910      	ldrh	r0, [r2, #8]
1000cef6:	42a0      	cmp	r0, r4
1000cef8:	d10d      	bne.n	1000cf16 <ble_pair_request_handler+0x3a>
1000cefa:	0010      	movs	r0, r2
1000cefc:	305e      	adds	r0, #94	; 0x5e
1000cefe:	7800      	ldrb	r0, [r0, #0]
1000cf00:	2802      	cmp	r0, #2
1000cf02:	d108      	bne.n	1000cf16 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000cf04:	014a      	lsls	r2, r1, #5
1000cf06:	1a52      	subs	r2, r2, r1
1000cf08:	0095      	lsls	r5, r2, #2
1000cf0a:	4a41      	ldr	r2, [pc, #260]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cf0c:	1952      	adds	r2, r2, r5
1000cf0e:	325e      	adds	r2, #94	; 0x5e
1000cf10:	2103      	movs	r1, #3
1000cf12:	7011      	strb	r1, [r2, #0]
			break;
1000cf14:	e005      	b.n	1000cf22 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf16:	3301      	adds	r3, #1
1000cf18:	b2db      	uxtb	r3, r3
1000cf1a:	3101      	adds	r1, #1
1000cf1c:	327c      	adds	r2, #124	; 0x7c
1000cf1e:	2b05      	cmp	r3, #5
1000cf20:	d1e8      	bne.n	1000cef4 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000cf22:	aa01      	add	r2, sp, #4
1000cf24:	2100      	movs	r1, #0
1000cf26:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000cf28:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000cf2a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000cf2c:	2003      	movs	r0, #3
1000cf2e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000cf30:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000cf32:	001f      	movs	r7, r3
1000cf34:	015a      	lsls	r2, r3, #5
1000cf36:	1ad2      	subs	r2, r2, r3
1000cf38:	0092      	lsls	r2, r2, #2
1000cf3a:	4935      	ldr	r1, [pc, #212]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cf3c:	5c52      	ldrb	r2, [r2, r1]
1000cf3e:	2a02      	cmp	r2, #2
1000cf40:	d104      	bne.n	1000cf4c <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf42:	aa01      	add	r2, sp, #4
1000cf44:	2103      	movs	r1, #3
1000cf46:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf48:	71d1      	strb	r1, [r2, #7]
1000cf4a:	e003      	b.n	1000cf54 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000cf4c:	aa01      	add	r2, sp, #4
1000cf4e:	2101      	movs	r1, #1
1000cf50:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000cf52:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000cf54:	aa01      	add	r2, sp, #4
1000cf56:	2110      	movs	r1, #16
1000cf58:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000cf5a:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000cf5c:	017a      	lsls	r2, r7, #5
1000cf5e:	1bd2      	subs	r2, r2, r7
1000cf60:	0092      	lsls	r2, r2, #2
1000cf62:	492b      	ldr	r1, [pc, #172]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cf64:	188a      	adds	r2, r1, r2
1000cf66:	7e12      	ldrb	r2, [r2, #24]
1000cf68:	2a40      	cmp	r2, #64	; 0x40
1000cf6a:	d131      	bne.n	1000cfd0 <ble_pair_request_handler+0xf4>
1000cf6c:	015a      	lsls	r2, r3, #5
1000cf6e:	1ad3      	subs	r3, r2, r3
1000cf70:	009b      	lsls	r3, r3, #2
1000cf72:	469a      	mov	sl, r3
1000cf74:	001d      	movs	r5, r3
1000cf76:	3560      	adds	r5, #96	; 0x60
1000cf78:	186d      	adds	r5, r5, r1
1000cf7a:	4654      	mov	r4, sl
1000cf7c:	3468      	adds	r4, #104	; 0x68
1000cf7e:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cf80:	4b24      	ldr	r3, [pc, #144]	; (1000d014 <ble_pair_request_handler+0x138>)
1000cf82:	4699      	mov	r9, r3
1000cf84:	260f      	movs	r6, #15
1000cf86:	47c8      	blx	r9
1000cf88:	4030      	ands	r0, r6
1000cf8a:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000cf8c:	47c8      	blx	r9
1000cf8e:	4030      	ands	r0, r6
1000cf90:	74a8      	strb	r0, [r5, #18]
1000cf92:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000cf94:	42a5      	cmp	r5, r4
1000cf96:	d1f6      	bne.n	1000cf86 <ble_pair_request_handler+0xaa>
1000cf98:	4655      	mov	r5, sl
1000cf9a:	3570      	adds	r5, #112	; 0x70
1000cf9c:	4a1c      	ldr	r2, [pc, #112]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cf9e:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cfa0:	4b1c      	ldr	r3, [pc, #112]	; (1000d014 <ble_pair_request_handler+0x138>)
1000cfa2:	4699      	mov	r9, r3
1000cfa4:	230f      	movs	r3, #15
1000cfa6:	4698      	mov	r8, r3
1000cfa8:	47c8      	blx	r9
1000cfaa:	4643      	mov	r3, r8
1000cfac:	4018      	ands	r0, r3
1000cfae:	7020      	strb	r0, [r4, #0]
1000cfb0:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000cfb2:	42ac      	cmp	r4, r5
1000cfb4:	d1f8      	bne.n	1000cfa8 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000cfb6:	4b17      	ldr	r3, [pc, #92]	; (1000d014 <ble_pair_request_handler+0x138>)
1000cfb8:	4798      	blx	r3
1000cfba:	017b      	lsls	r3, r7, #5
1000cfbc:	1bdb      	subs	r3, r3, r7
1000cfbe:	009b      	lsls	r3, r3, #2
1000cfc0:	4a13      	ldr	r2, [pc, #76]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cfc2:	18d3      	adds	r3, r2, r3
1000cfc4:	001a      	movs	r2, r3
1000cfc6:	3270      	adds	r2, #112	; 0x70
1000cfc8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000cfca:	337a      	adds	r3, #122	; 0x7a
1000cfcc:	2210      	movs	r2, #16
1000cfce:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000cfd0:	017a      	lsls	r2, r7, #5
1000cfd2:	1bd7      	subs	r7, r2, r7
1000cfd4:	00bf      	lsls	r7, r7, #2
1000cfd6:	3760      	adds	r7, #96	; 0x60
1000cfd8:	4a0d      	ldr	r2, [pc, #52]	; (1000d010 <ble_pair_request_handler+0x134>)
1000cfda:	18ba      	adds	r2, r7, r2
1000cfdc:	465b      	mov	r3, fp
1000cfde:	8818      	ldrh	r0, [r3, #0]
1000cfe0:	2300      	movs	r3, #0
1000cfe2:	a901      	add	r1, sp, #4
1000cfe4:	4c0c      	ldr	r4, [pc, #48]	; (1000d018 <ble_pair_request_handler+0x13c>)
1000cfe6:	47a0      	blx	r4
1000cfe8:	2800      	cmp	r0, #0
1000cfea:	d00a      	beq.n	1000d002 <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000cfec:	ab01      	add	r3, sp, #4
1000cfee:	2200      	movs	r2, #0
1000cff0:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000cff2:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000cff4:	4809      	ldr	r0, [pc, #36]	; (1000d01c <ble_pair_request_handler+0x140>)
1000cff6:	4b0a      	ldr	r3, [pc, #40]	; (1000d020 <ble_pair_request_handler+0x144>)
1000cff8:	4798      	blx	r3
1000cffa:	480a      	ldr	r0, [pc, #40]	; (1000d024 <ble_pair_request_handler+0x148>)
1000cffc:	4b0a      	ldr	r3, [pc, #40]	; (1000d028 <ble_pair_request_handler+0x14c>)
1000cffe:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d000:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d002:	b005      	add	sp, #20
1000d004:	bc3c      	pop	{r2, r3, r4, r5}
1000d006:	4690      	mov	r8, r2
1000d008:	4699      	mov	r9, r3
1000d00a:	46a2      	mov	sl, r4
1000d00c:	46ab      	mov	fp, r5
1000d00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d010:	1001a410 	.word	0x1001a410
1000d014:	100164e1 	.word	0x100164e1
1000d018:	100101cd 	.word	0x100101cd
1000d01c:	10017414 	.word	0x10017414
1000d020:	100164cd 	.word	0x100164cd
1000d024:	10017db8 	.word	0x10017db8
1000d028:	100163ad 	.word	0x100163ad

1000d02c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d02e:	b085      	sub	sp, #20
1000d030:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d032:	2206      	movs	r2, #6
1000d034:	493d      	ldr	r1, [pc, #244]	; (1000d12c <ble_pair_key_request_handler+0x100>)
1000d036:	a802      	add	r0, sp, #8
1000d038:	4e3d      	ldr	r6, [pc, #244]	; (1000d130 <ble_pair_key_request_handler+0x104>)
1000d03a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d03c:	ac01      	add	r4, sp, #4
1000d03e:	2204      	movs	r2, #4
1000d040:	0029      	movs	r1, r5
1000d042:	0020      	movs	r0, r4
1000d044:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d046:	78e3      	ldrb	r3, [r4, #3]
1000d048:	2b00      	cmp	r3, #0
1000d04a:	d162      	bne.n	1000d112 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d04c:	4839      	ldr	r0, [pc, #228]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d04e:	4b3a      	ldr	r3, [pc, #232]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d050:	4798      	blx	r3
1000d052:	483a      	ldr	r0, [pc, #232]	; (1000d13c <ble_pair_key_request_handler+0x110>)
1000d054:	4b3a      	ldr	r3, [pc, #232]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d056:	4798      	blx	r3
1000d058:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d05a:	4c3a      	ldr	r4, [pc, #232]	; (1000d144 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d05c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d05e:	201e      	movs	r0, #30
1000d060:	47a0      	blx	r4
1000d062:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d064:	2b00      	cmp	r3, #0
1000d066:	d11a      	bne.n	1000d09e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d068:	4f32      	ldr	r7, [pc, #200]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d06a:	0038      	movs	r0, r7
1000d06c:	4e32      	ldr	r6, [pc, #200]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d06e:	47b0      	blx	r6
1000d070:	4835      	ldr	r0, [pc, #212]	; (1000d148 <ble_pair_key_request_handler+0x11c>)
1000d072:	4c33      	ldr	r4, [pc, #204]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d074:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d076:	0038      	movs	r0, r7
1000d078:	47b0      	blx	r6
1000d07a:	4834      	ldr	r0, [pc, #208]	; (1000d14c <ble_pair_key_request_handler+0x120>)
1000d07c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d07e:	8828      	ldrh	r0, [r5, #0]
1000d080:	2113      	movs	r1, #19
1000d082:	4b33      	ldr	r3, [pc, #204]	; (1000d150 <ble_pair_key_request_handler+0x124>)
1000d084:	4798      	blx	r3
1000d086:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d088:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d08a:	2b00      	cmp	r3, #0
1000d08c:	d04c      	beq.n	1000d128 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d08e:	4829      	ldr	r0, [pc, #164]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d090:	4b29      	ldr	r3, [pc, #164]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d092:	4798      	blx	r3
1000d094:	482f      	ldr	r0, [pc, #188]	; (1000d154 <ble_pair_key_request_handler+0x128>)
1000d096:	4b2a      	ldr	r3, [pc, #168]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d098:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d09a:	20e2      	movs	r0, #226	; 0xe2
1000d09c:	e044      	b.n	1000d128 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d09e:	001a      	movs	r2, r3
1000d0a0:	3a30      	subs	r2, #48	; 0x30
1000d0a2:	2a09      	cmp	r2, #9
1000d0a4:	d8db      	bhi.n	1000d05e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d0a6:	aa02      	add	r2, sp, #8
1000d0a8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d0aa:	4038      	ands	r0, r7
1000d0ac:	4b2a      	ldr	r3, [pc, #168]	; (1000d158 <ble_pair_key_request_handler+0x12c>)
1000d0ae:	4798      	blx	r3
1000d0b0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d0b2:	2e06      	cmp	r6, #6
1000d0b4:	d026      	beq.n	1000d104 <ble_pair_key_request_handler+0xd8>
1000d0b6:	e7d2      	b.n	1000d05e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d0b8:	481e      	ldr	r0, [pc, #120]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d0ba:	4b1f      	ldr	r3, [pc, #124]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d0bc:	4798      	blx	r3
1000d0be:	4827      	ldr	r0, [pc, #156]	; (1000d15c <ble_pair_key_request_handler+0x130>)
1000d0c0:	4b1f      	ldr	r3, [pc, #124]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d0c2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d0c4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d0c6:	4e24      	ldr	r6, [pc, #144]	; (1000d158 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d0c8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d0ca:	5ce0      	ldrb	r0, [r4, r3]
1000d0cc:	47b0      	blx	r6
1000d0ce:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d0d0:	2c06      	cmp	r4, #6
1000d0d2:	d1f9      	bne.n	1000d0c8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d0d4:	ab01      	add	r3, sp, #4
1000d0d6:	7899      	ldrb	r1, [r3, #2]
1000d0d8:	8828      	ldrh	r0, [r5, #0]
1000d0da:	aa02      	add	r2, sp, #8
1000d0dc:	4b20      	ldr	r3, [pc, #128]	; (1000d160 <ble_pair_key_request_handler+0x134>)
1000d0de:	4798      	blx	r3
1000d0e0:	2800      	cmp	r0, #0
1000d0e2:	d021      	beq.n	1000d128 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d0e4:	4813      	ldr	r0, [pc, #76]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d0e6:	4b14      	ldr	r3, [pc, #80]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d0e8:	4798      	blx	r3
1000d0ea:	481e      	ldr	r0, [pc, #120]	; (1000d164 <ble_pair_key_request_handler+0x138>)
1000d0ec:	4b14      	ldr	r3, [pc, #80]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d0ee:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d0f0:	2000      	movs	r0, #0
1000d0f2:	e019      	b.n	1000d128 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d0f4:	480f      	ldr	r0, [pc, #60]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d0f6:	4b10      	ldr	r3, [pc, #64]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d0f8:	4798      	blx	r3
1000d0fa:	481b      	ldr	r0, [pc, #108]	; (1000d168 <ble_pair_key_request_handler+0x13c>)
1000d0fc:	4b10      	ldr	r3, [pc, #64]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d0fe:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d100:	2000      	movs	r0, #0
1000d102:	e011      	b.n	1000d128 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d104:	480b      	ldr	r0, [pc, #44]	; (1000d134 <ble_pair_key_request_handler+0x108>)
1000d106:	4b0c      	ldr	r3, [pc, #48]	; (1000d138 <ble_pair_key_request_handler+0x10c>)
1000d108:	4798      	blx	r3
1000d10a:	4818      	ldr	r0, [pc, #96]	; (1000d16c <ble_pair_key_request_handler+0x140>)
1000d10c:	4b0c      	ldr	r3, [pc, #48]	; (1000d140 <ble_pair_key_request_handler+0x114>)
1000d10e:	4798      	blx	r3
1000d110:	e7d8      	b.n	1000d0c4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d112:	ab01      	add	r3, sp, #4
1000d114:	885a      	ldrh	r2, [r3, #2]
1000d116:	2380      	movs	r3, #128	; 0x80
1000d118:	005b      	lsls	r3, r3, #1
1000d11a:	429a      	cmp	r2, r3
1000d11c:	d0cc      	beq.n	1000d0b8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d11e:	ab01      	add	r3, sp, #4
1000d120:	789b      	ldrb	r3, [r3, #2]
1000d122:	2b01      	cmp	r3, #1
1000d124:	d0e6      	beq.n	1000d0f4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d126:	2000      	movs	r0, #0
}
1000d128:	b005      	add	sp, #20
1000d12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d12c:	10017b64 	.word	0x10017b64
1000d130:	10016253 	.word	0x10016253
1000d134:	10017414 	.word	0x10017414
1000d138:	100164cd 	.word	0x100164cd
1000d13c:	10017de0 	.word	0x10017de0
1000d140:	100163ad 	.word	0x100163ad
1000d144:	1000dcb5 	.word	0x1000dcb5
1000d148:	10017e08 	.word	0x10017e08
1000d14c:	10017e14 	.word	0x10017e14
1000d150:	1000f7d5 	.word	0x1000f7d5
1000d154:	10017cfc 	.word	0x10017cfc
1000d158:	100163e1 	.word	0x100163e1
1000d15c:	10017e28 	.word	0x10017e28
1000d160:	100102fd 	.word	0x100102fd
1000d164:	10017e60 	.word	0x10017e60
1000d168:	10017e78 	.word	0x10017e78
1000d16c:	10017e94 	.word	0x10017e94

1000d170 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d172:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d174:	8805      	ldrh	r5, [r0, #0]
1000d176:	4b2f      	ldr	r3, [pc, #188]	; (1000d234 <ble_encryption_request_handler+0xc4>)
1000d178:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d17a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d17c:	0010      	movs	r0, r2
1000d17e:	8919      	ldrh	r1, [r3, #8]
1000d180:	42a9      	cmp	r1, r5
1000d182:	d116      	bne.n	1000d1b2 <ble_encryption_request_handler+0x42>
1000d184:	0019      	movs	r1, r3
1000d186:	315e      	adds	r1, #94	; 0x5e
1000d188:	7809      	ldrb	r1, [r1, #0]
1000d18a:	2901      	cmp	r1, #1
1000d18c:	d911      	bls.n	1000d1b2 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d18e:	4929      	ldr	r1, [pc, #164]	; (1000d234 <ble_encryption_request_handler+0xc4>)
1000d190:	0152      	lsls	r2, r2, #5
1000d192:	1a10      	subs	r0, r2, r0
1000d194:	0080      	lsls	r0, r0, #2
1000d196:	1808      	adds	r0, r1, r0
1000d198:	305e      	adds	r0, #94	; 0x5e
1000d19a:	2306      	movs	r3, #6
1000d19c:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d19e:	0162      	lsls	r2, r4, #5
1000d1a0:	1b13      	subs	r3, r2, r4
1000d1a2:	009b      	lsls	r3, r3, #2
1000d1a4:	18cb      	adds	r3, r1, r3
1000d1a6:	3370      	adds	r3, #112	; 0x70
1000d1a8:	881a      	ldrh	r2, [r3, #0]
1000d1aa:	8873      	ldrh	r3, [r6, #2]
1000d1ac:	429a      	cmp	r2, r3
1000d1ae:	d113      	bne.n	1000d1d8 <ble_encryption_request_handler+0x68>
1000d1b0:	e006      	b.n	1000d1c0 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1b2:	3401      	adds	r4, #1
1000d1b4:	b2e4      	uxtb	r4, r4
1000d1b6:	3201      	adds	r2, #1
1000d1b8:	337c      	adds	r3, #124	; 0x7c
1000d1ba:	2c05      	cmp	r4, #5
1000d1bc:	d1de      	bne.n	1000d17c <ble_encryption_request_handler+0xc>
1000d1be:	e00b      	b.n	1000d1d8 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d1c0:	0161      	lsls	r1, r4, #5
1000d1c2:	1b09      	subs	r1, r1, r4
1000d1c4:	0089      	lsls	r1, r1, #2
1000d1c6:	4b1b      	ldr	r3, [pc, #108]	; (1000d234 <ble_encryption_request_handler+0xc4>)
1000d1c8:	1859      	adds	r1, r3, r1
1000d1ca:	3172      	adds	r1, #114	; 0x72
1000d1cc:	1d30      	adds	r0, r6, #4
1000d1ce:	2208      	movs	r2, #8
1000d1d0:	4b19      	ldr	r3, [pc, #100]	; (1000d238 <ble_encryption_request_handler+0xc8>)
1000d1d2:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000d1d4:	2800      	cmp	r0, #0
1000d1d6:	d015      	beq.n	1000d204 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d1d8:	4f18      	ldr	r7, [pc, #96]	; (1000d23c <ble_encryption_request_handler+0xcc>)
1000d1da:	0038      	movs	r0, r7
1000d1dc:	4e18      	ldr	r6, [pc, #96]	; (1000d240 <ble_encryption_request_handler+0xd0>)
1000d1de:	47b0      	blx	r6
1000d1e0:	4818      	ldr	r0, [pc, #96]	; (1000d244 <ble_encryption_request_handler+0xd4>)
1000d1e2:	4d19      	ldr	r5, [pc, #100]	; (1000d248 <ble_encryption_request_handler+0xd8>)
1000d1e4:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d1e6:	0038      	movs	r0, r7
1000d1e8:	47b0      	blx	r6
1000d1ea:	4818      	ldr	r0, [pc, #96]	; (1000d24c <ble_encryption_request_handler+0xdc>)
1000d1ec:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d1ee:	0163      	lsls	r3, r4, #5
1000d1f0:	1b1c      	subs	r4, r3, r4
1000d1f2:	00a4      	lsls	r4, r4, #2
1000d1f4:	4b0f      	ldr	r3, [pc, #60]	; (1000d234 <ble_encryption_request_handler+0xc4>)
1000d1f6:	191c      	adds	r4, r3, r4
1000d1f8:	8920      	ldrh	r0, [r4, #8]
1000d1fa:	2105      	movs	r1, #5
1000d1fc:	4b14      	ldr	r3, [pc, #80]	; (1000d250 <ble_encryption_request_handler+0xe0>)
1000d1fe:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d200:	20e2      	movs	r0, #226	; 0xe2
1000d202:	e016      	b.n	1000d232 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d204:	0162      	lsls	r2, r4, #5
1000d206:	1b13      	subs	r3, r2, r4
1000d208:	009b      	lsls	r3, r3, #2
1000d20a:	3360      	adds	r3, #96	; 0x60
1000d20c:	4909      	ldr	r1, [pc, #36]	; (1000d234 <ble_encryption_request_handler+0xc4>)
1000d20e:	185b      	adds	r3, r3, r1
1000d210:	1b14      	subs	r4, r2, r4
1000d212:	00a4      	lsls	r4, r4, #2
1000d214:	190c      	adds	r4, r1, r4
1000d216:	7d21      	ldrb	r1, [r4, #20]
1000d218:	8830      	ldrh	r0, [r6, #0]
1000d21a:	2201      	movs	r2, #1
1000d21c:	4c0d      	ldr	r4, [pc, #52]	; (1000d254 <ble_encryption_request_handler+0xe4>)
1000d21e:	47a0      	blx	r4
1000d220:	2800      	cmp	r0, #0
1000d222:	d006      	beq.n	1000d232 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d224:	4805      	ldr	r0, [pc, #20]	; (1000d23c <ble_encryption_request_handler+0xcc>)
1000d226:	4b06      	ldr	r3, [pc, #24]	; (1000d240 <ble_encryption_request_handler+0xd0>)
1000d228:	4798      	blx	r3
1000d22a:	480b      	ldr	r0, [pc, #44]	; (1000d258 <ble_encryption_request_handler+0xe8>)
1000d22c:	4b06      	ldr	r3, [pc, #24]	; (1000d248 <ble_encryption_request_handler+0xd8>)
1000d22e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d230:	2000      	movs	r0, #0
}
1000d232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d234:	1001a410 	.word	0x1001a410
1000d238:	10016235 	.word	0x10016235
1000d23c:	10017414 	.word	0x10017414
1000d240:	100164cd 	.word	0x100164cd
1000d244:	10017ea8 	.word	0x10017ea8
1000d248:	100163ad 	.word	0x100163ad
1000d24c:	10017ee0 	.word	0x10017ee0
1000d250:	1000f7d5 	.word	0x1000f7d5
1000d254:	10010431 	.word	0x10010431
1000d258:	10017f38 	.word	0x10017f38

1000d25c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d25c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d25e:	2a00      	cmp	r2, #0
1000d260:	d047      	beq.n	1000d2f2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d262:	2906      	cmp	r1, #6
1000d264:	d847      	bhi.n	1000d2f6 <ble_mgr_events_callback_handler+0x9a>
1000d266:	0089      	lsls	r1, r1, #2
1000d268:	4b28      	ldr	r3, [pc, #160]	; (1000d30c <ble_mgr_events_callback_handler+0xb0>)
1000d26a:	585b      	ldr	r3, [r3, r1]
1000d26c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d26e:	4b28      	ldr	r3, [pc, #160]	; (1000d310 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d270:	2405      	movs	r4, #5
1000d272:	e00a      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d274:	4b27      	ldr	r3, [pc, #156]	; (1000d314 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d276:	2401      	movs	r4, #1
			}
			break;
1000d278:	e007      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d27a:	4b27      	ldr	r3, [pc, #156]	; (1000d318 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d27c:	2405      	movs	r4, #5
			}
			break;
1000d27e:	e004      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d280:	4b26      	ldr	r3, [pc, #152]	; (1000d31c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d282:	2401      	movs	r4, #1
			}
			break;
1000d284:	e001      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d286:	4b26      	ldr	r3, [pc, #152]	; (1000d320 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d288:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d28a:	2800      	cmp	r0, #0
1000d28c:	d116      	bne.n	1000d2bc <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d28e:	6819      	ldr	r1, [r3, #0]
1000d290:	2900      	cmp	r1, #0
1000d292:	d10b      	bne.n	1000d2ac <ble_mgr_events_callback_handler+0x50>
1000d294:	e006      	b.n	1000d2a4 <ble_mgr_events_callback_handler+0x48>
1000d296:	001d      	movs	r5, r3
1000d298:	3304      	adds	r3, #4
1000d29a:	1f18      	subs	r0, r3, #4
1000d29c:	6800      	ldr	r0, [r0, #0]
1000d29e:	2800      	cmp	r0, #0
1000d2a0:	d106      	bne.n	1000d2b0 <ble_mgr_events_callback_handler+0x54>
1000d2a2:	e000      	b.n	1000d2a6 <ble_mgr_events_callback_handler+0x4a>
1000d2a4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d2a6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d2a8:	2101      	movs	r1, #1
						break;
1000d2aa:	e02c      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
1000d2ac:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d2ae:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d2b0:	3101      	adds	r1, #1
1000d2b2:	b2c9      	uxtb	r1, r1
1000d2b4:	42a1      	cmp	r1, r4
1000d2b6:	d3ee      	bcc.n	1000d296 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d2b8:	2100      	movs	r1, #0
1000d2ba:	e024      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
1000d2bc:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d2be:	2801      	cmp	r0, #1
1000d2c0:	d121      	bne.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d2c2:	6819      	ldr	r1, [r3, #0]
1000d2c4:	428a      	cmp	r2, r1
1000d2c6:	d10c      	bne.n	1000d2e2 <ble_mgr_events_callback_handler+0x86>
1000d2c8:	e006      	b.n	1000d2d8 <ble_mgr_events_callback_handler+0x7c>
1000d2ca:	001d      	movs	r5, r3
1000d2cc:	3304      	adds	r3, #4
1000d2ce:	1f18      	subs	r0, r3, #4
1000d2d0:	6800      	ldr	r0, [r0, #0]
1000d2d2:	4282      	cmp	r2, r0
1000d2d4:	d107      	bne.n	1000d2e6 <ble_mgr_events_callback_handler+0x8a>
1000d2d6:	e000      	b.n	1000d2da <ble_mgr_events_callback_handler+0x7e>
1000d2d8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d2da:	2300      	movs	r3, #0
1000d2dc:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d2de:	2101      	movs	r1, #1
						break;
1000d2e0:	e011      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
1000d2e2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d2e4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d2e6:	3101      	adds	r1, #1
1000d2e8:	b2c9      	uxtb	r1, r1
1000d2ea:	42a1      	cmp	r1, r4
1000d2ec:	d3ed      	bcc.n	1000d2ca <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d2ee:	2100      	movs	r1, #0
1000d2f0:	e009      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d2f2:	2100      	movs	r1, #0
1000d2f4:	e007      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d2f6:	2100      	movs	r1, #0
1000d2f8:	e005      	b.n	1000d306 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d2fa:	4b0a      	ldr	r3, [pc, #40]	; (1000d324 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d2fc:	2405      	movs	r4, #5
1000d2fe:	e7c4      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d300:	4b09      	ldr	r3, [pc, #36]	; (1000d328 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d302:	2401      	movs	r4, #1
1000d304:	e7c1      	b.n	1000d28a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d306:	0008      	movs	r0, r1
1000d308:	bd30      	pop	{r4, r5, pc}
1000d30a:	46c0      	nop			; (mov r8, r8)
1000d30c:	10017a58 	.word	0x10017a58
1000d310:	1001a3fc 	.word	0x1001a3fc
1000d314:	1001a3f8 	.word	0x1001a3f8
1000d318:	1001a680 	.word	0x1001a680
1000d31c:	1001ac34 	.word	0x1001ac34
1000d320:	1001a694 	.word	0x1001a694
1000d324:	1001a6a8 	.word	0x1001a6a8
1000d328:	1001a6f0 	.word	0x1001a6f0

1000d32c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d32e:	465f      	mov	r7, fp
1000d330:	4656      	mov	r6, sl
1000d332:	464d      	mov	r5, r9
1000d334:	4644      	mov	r4, r8
1000d336:	b4f0      	push	{r4, r5, r6, r7}
1000d338:	b08d      	sub	sp, #52	; 0x34
1000d33a:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d33c:	2400      	movs	r4, #0
1000d33e:	4b72      	ldr	r3, [pc, #456]	; (1000d508 <ble_device_init+0x1dc>)
1000d340:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d342:	2207      	movs	r2, #7
1000d344:	2100      	movs	r1, #0
1000d346:	4871      	ldr	r0, [pc, #452]	; (1000d50c <ble_device_init+0x1e0>)
1000d348:	4d71      	ldr	r5, [pc, #452]	; (1000d510 <ble_device_init+0x1e4>)
1000d34a:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d34c:	2212      	movs	r2, #18
1000d34e:	2100      	movs	r1, #0
1000d350:	4870      	ldr	r0, [pc, #448]	; (1000d514 <ble_device_init+0x1e8>)
1000d352:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d354:	4a70      	ldr	r2, [pc, #448]	; (1000d518 <ble_device_init+0x1ec>)
1000d356:	2100      	movs	r1, #0
1000d358:	4870      	ldr	r0, [pc, #448]	; (1000d51c <ble_device_init+0x1f0>)
1000d35a:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000d35c:	4b70      	ldr	r3, [pc, #448]	; (1000d520 <ble_device_init+0x1f4>)
1000d35e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d360:	22cd      	movs	r2, #205	; 0xcd
1000d362:	0092      	lsls	r2, r2, #2
1000d364:	2100      	movs	r1, #0
1000d366:	486f      	ldr	r0, [pc, #444]	; (1000d524 <ble_device_init+0x1f8>)
1000d368:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000d36a:	4b6f      	ldr	r3, [pc, #444]	; (1000d528 <ble_device_init+0x1fc>)
1000d36c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d36e:	2283      	movs	r2, #131	; 0x83
1000d370:	0092      	lsls	r2, r2, #2
1000d372:	2100      	movs	r1, #0
1000d374:	486d      	ldr	r0, [pc, #436]	; (1000d52c <ble_device_init+0x200>)
1000d376:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d378:	4b6d      	ldr	r3, [pc, #436]	; (1000d530 <ble_device_init+0x204>)
1000d37a:	469b      	mov	fp, r3
1000d37c:	2380      	movs	r3, #128	; 0x80
1000d37e:	00db      	lsls	r3, r3, #3
1000d380:	469a      	mov	sl, r3
1000d382:	001a      	movs	r2, r3
1000d384:	2100      	movs	r1, #0
1000d386:	4658      	mov	r0, fp
1000d388:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d38a:	4b6a      	ldr	r3, [pc, #424]	; (1000d534 <ble_device_init+0x208>)
1000d38c:	4699      	mov	r9, r3
1000d38e:	2380      	movs	r3, #128	; 0x80
1000d390:	015b      	lsls	r3, r3, #5
1000d392:	4698      	mov	r8, r3
1000d394:	001a      	movs	r2, r3
1000d396:	2100      	movs	r1, #0
1000d398:	4648      	mov	r0, r9
1000d39a:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d39c:	4f66      	ldr	r7, [pc, #408]	; (1000d538 <ble_device_init+0x20c>)
1000d39e:	221c      	movs	r2, #28
1000d3a0:	2100      	movs	r1, #0
1000d3a2:	0038      	movs	r0, r7
1000d3a4:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d3a6:	465b      	mov	r3, fp
1000d3a8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d3aa:	4653      	mov	r3, sl
1000d3ac:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d3ae:	464b      	mov	r3, r9
1000d3b0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d3b2:	4643      	mov	r3, r8
1000d3b4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d3b6:	4b61      	ldr	r3, [pc, #388]	; (1000d53c <ble_device_init+0x210>)
1000d3b8:	601c      	str	r4, [r3, #0]
1000d3ba:	605c      	str	r4, [r3, #4]
1000d3bc:	609c      	str	r4, [r3, #8]
1000d3be:	60dc      	str	r4, [r3, #12]
1000d3c0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d3c2:	4b5f      	ldr	r3, [pc, #380]	; (1000d540 <ble_device_init+0x214>)
1000d3c4:	601c      	str	r4, [r3, #0]
1000d3c6:	605c      	str	r4, [r3, #4]
1000d3c8:	609c      	str	r4, [r3, #8]
1000d3ca:	60dc      	str	r4, [r3, #12]
1000d3cc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d3ce:	4b5d      	ldr	r3, [pc, #372]	; (1000d544 <ble_device_init+0x218>)
1000d3d0:	601c      	str	r4, [r3, #0]
1000d3d2:	605c      	str	r4, [r3, #4]
1000d3d4:	609c      	str	r4, [r3, #8]
1000d3d6:	60dc      	str	r4, [r3, #12]
1000d3d8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d3da:	4b5b      	ldr	r3, [pc, #364]	; (1000d548 <ble_device_init+0x21c>)
1000d3dc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d3de:	4b5b      	ldr	r3, [pc, #364]	; (1000d54c <ble_device_init+0x220>)
1000d3e0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d3e2:	4b5b      	ldr	r3, [pc, #364]	; (1000d550 <ble_device_init+0x224>)
1000d3e4:	601c      	str	r4, [r3, #0]
1000d3e6:	605c      	str	r4, [r3, #4]
1000d3e8:	609c      	str	r4, [r3, #8]
1000d3ea:	60dc      	str	r4, [r3, #12]
1000d3ec:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d3ee:	4b59      	ldr	r3, [pc, #356]	; (1000d554 <ble_device_init+0x228>)
1000d3f0:	601c      	str	r4, [r3, #0]
1000d3f2:	4c59      	ldr	r4, [pc, #356]	; (1000d558 <ble_device_init+0x22c>)
1000d3f4:	239b      	movs	r3, #155	; 0x9b
1000d3f6:	009b      	lsls	r3, r3, #2
1000d3f8:	4698      	mov	r8, r3
1000d3fa:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d3fc:	4f44      	ldr	r7, [pc, #272]	; (1000d510 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d3fe:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d400:	227c      	movs	r2, #124	; 0x7c
1000d402:	2100      	movs	r1, #0
1000d404:	0020      	movs	r0, r4
1000d406:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d408:	0023      	movs	r3, r4
1000d40a:	335e      	adds	r3, #94	; 0x5e
1000d40c:	2200      	movs	r2, #0
1000d40e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d410:	7625      	strb	r5, [r4, #24]
1000d412:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d414:	45a0      	cmp	r8, r4
1000d416:	d1f3      	bne.n	1000d400 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d418:	4b50      	ldr	r3, [pc, #320]	; (1000d55c <ble_device_init+0x230>)
1000d41a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d41c:	4846      	ldr	r0, [pc, #280]	; (1000d538 <ble_device_init+0x20c>)
1000d41e:	4b3e      	ldr	r3, [pc, #248]	; (1000d518 <ble_device_init+0x1ec>)
1000d420:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d422:	4b3e      	ldr	r3, [pc, #248]	; (1000d51c <ble_device_init+0x1f0>)
1000d424:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d426:	4b4e      	ldr	r3, [pc, #312]	; (1000d560 <ble_device_init+0x234>)
1000d428:	4798      	blx	r3
1000d42a:	2800      	cmp	r0, #0
1000d42c:	d00b      	beq.n	1000d446 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d42e:	4e4d      	ldr	r6, [pc, #308]	; (1000d564 <ble_device_init+0x238>)
1000d430:	0030      	movs	r0, r6
1000d432:	4d4d      	ldr	r5, [pc, #308]	; (1000d568 <ble_device_init+0x23c>)
1000d434:	47a8      	blx	r5
1000d436:	484d      	ldr	r0, [pc, #308]	; (1000d56c <ble_device_init+0x240>)
1000d438:	4c4d      	ldr	r4, [pc, #308]	; (1000d570 <ble_device_init+0x244>)
1000d43a:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d43c:	0030      	movs	r0, r6
1000d43e:	47a8      	blx	r5
1000d440:	484c      	ldr	r0, [pc, #304]	; (1000d574 <ble_device_init+0x248>)
1000d442:	47a0      	blx	r4
1000d444:	e7fe      	b.n	1000d444 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d446:	4a4c      	ldr	r2, [pc, #304]	; (1000d578 <ble_device_init+0x24c>)
1000d448:	2100      	movs	r1, #0
1000d44a:	2000      	movs	r0, #0
1000d44c:	4c4b      	ldr	r4, [pc, #300]	; (1000d57c <ble_device_init+0x250>)
1000d44e:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d450:	4a4b      	ldr	r2, [pc, #300]	; (1000d580 <ble_device_init+0x254>)
1000d452:	2102      	movs	r1, #2
1000d454:	2000      	movs	r0, #0
1000d456:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d458:	2109      	movs	r1, #9
1000d45a:	484a      	ldr	r0, [pc, #296]	; (1000d584 <ble_device_init+0x258>)
1000d45c:	4b4a      	ldr	r3, [pc, #296]	; (1000d588 <ble_device_init+0x25c>)
1000d45e:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d460:	2800      	cmp	r0, #0
1000d462:	d005      	beq.n	1000d470 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000d464:	483f      	ldr	r0, [pc, #252]	; (1000d564 <ble_device_init+0x238>)
1000d466:	4b40      	ldr	r3, [pc, #256]	; (1000d568 <ble_device_init+0x23c>)
1000d468:	4798      	blx	r3
1000d46a:	4848      	ldr	r0, [pc, #288]	; (1000d58c <ble_device_init+0x260>)
1000d46c:	4b40      	ldr	r3, [pc, #256]	; (1000d570 <ble_device_init+0x244>)
1000d46e:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d470:	2207      	movs	r2, #7
1000d472:	4947      	ldr	r1, [pc, #284]	; (1000d590 <ble_device_init+0x264>)
1000d474:	3108      	adds	r1, #8
1000d476:	4668      	mov	r0, sp
1000d478:	4b46      	ldr	r3, [pc, #280]	; (1000d594 <ble_device_init+0x268>)
1000d47a:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d47c:	2226      	movs	r2, #38	; 0x26
1000d47e:	2100      	movs	r1, #0
1000d480:	a802      	add	r0, sp, #8
1000d482:	4b23      	ldr	r3, [pc, #140]	; (1000d510 <ble_device_init+0x1e4>)
1000d484:	4798      	blx	r3
	
	if (addr == NULL)
1000d486:	2e00      	cmp	r6, #0
1000d488:	d10c      	bne.n	1000d4a4 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d48a:	4668      	mov	r0, sp
1000d48c:	4b42      	ldr	r3, [pc, #264]	; (1000d598 <ble_device_init+0x26c>)
1000d48e:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d490:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d492:	2800      	cmp	r0, #0
1000d494:	d006      	beq.n	1000d4a4 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d496:	4833      	ldr	r0, [pc, #204]	; (1000d564 <ble_device_init+0x238>)
1000d498:	4b33      	ldr	r3, [pc, #204]	; (1000d568 <ble_device_init+0x23c>)
1000d49a:	4798      	blx	r3
1000d49c:	483f      	ldr	r0, [pc, #252]	; (1000d59c <ble_device_init+0x270>)
1000d49e:	4b34      	ldr	r3, [pc, #208]	; (1000d570 <ble_device_init+0x244>)
1000d4a0:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d4a2:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d4a4:	ac02      	add	r4, sp, #8
1000d4a6:	230a      	movs	r3, #10
1000d4a8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d4aa:	4b3d      	ldr	r3, [pc, #244]	; (1000d5a0 <ble_device_init+0x274>)
1000d4ac:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d4ae:	2207      	movs	r2, #7
1000d4b0:	0031      	movs	r1, r6
1000d4b2:	a803      	add	r0, sp, #12
1000d4b4:	4b37      	ldr	r3, [pc, #220]	; (1000d594 <ble_device_init+0x268>)
1000d4b6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d4b8:	2300      	movs	r3, #0
1000d4ba:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d4bc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d4be:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d4c0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d4c2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d4c4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d4c6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d4c8:	2380      	movs	r3, #128	; 0x80
1000d4ca:	009b      	lsls	r3, r3, #2
1000d4cc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d4ce:	0020      	movs	r0, r4
1000d4d0:	4b34      	ldr	r3, [pc, #208]	; (1000d5a4 <ble_device_init+0x278>)
1000d4d2:	4798      	blx	r3
1000d4d4:	2800      	cmp	r0, #0
1000d4d6:	d005      	beq.n	1000d4e4 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d4d8:	4822      	ldr	r0, [pc, #136]	; (1000d564 <ble_device_init+0x238>)
1000d4da:	4b23      	ldr	r3, [pc, #140]	; (1000d568 <ble_device_init+0x23c>)
1000d4dc:	4798      	blx	r3
1000d4de:	4832      	ldr	r0, [pc, #200]	; (1000d5a8 <ble_device_init+0x27c>)
1000d4e0:	4b23      	ldr	r3, [pc, #140]	; (1000d570 <ble_device_init+0x244>)
1000d4e2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d4e4:	0030      	movs	r0, r6
1000d4e6:	4b31      	ldr	r3, [pc, #196]	; (1000d5ac <ble_device_init+0x280>)
1000d4e8:	4798      	blx	r3
1000d4ea:	2800      	cmp	r0, #0
1000d4ec:	d005      	beq.n	1000d4fa <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d4ee:	481d      	ldr	r0, [pc, #116]	; (1000d564 <ble_device_init+0x238>)
1000d4f0:	4b1d      	ldr	r3, [pc, #116]	; (1000d568 <ble_device_init+0x23c>)
1000d4f2:	4798      	blx	r3
1000d4f4:	482e      	ldr	r0, [pc, #184]	; (1000d5b0 <ble_device_init+0x284>)
1000d4f6:	4b1e      	ldr	r3, [pc, #120]	; (1000d570 <ble_device_init+0x244>)
1000d4f8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d4fa:	b00d      	add	sp, #52	; 0x34
1000d4fc:	bc3c      	pop	{r2, r3, r4, r5}
1000d4fe:	4690      	mov	r8, r2
1000d500:	4699      	mov	r9, r3
1000d502:	46a2      	mov	sl, r4
1000d504:	46ab      	mov	fp, r5
1000d506:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d508:	10018f10 	.word	0x10018f10
1000d50c:	10018f18 	.word	0x10018f18
1000d510:	10016265 	.word	0x10016265
1000d514:	1001a6bc 	.word	0x1001a6bc
1000d518:	000004e2 	.word	0x000004e2
1000d51c:	10018a30 	.word	0x10018a30
1000d520:	10018f14 	.word	0x10018f14
1000d524:	1001a6f4 	.word	0x1001a6f4
1000d528:	1001a6ec 	.word	0x1001a6ec
1000d52c:	1001aa28 	.word	0x1001aa28
1000d530:	10018630 	.word	0x10018630
1000d534:	10018f20 	.word	0x10018f20
1000d538:	1001a6d0 	.word	0x1001a6d0
1000d53c:	1001a694 	.word	0x1001a694
1000d540:	1001a6a8 	.word	0x1001a6a8
1000d544:	1001a3fc 	.word	0x1001a3fc
1000d548:	1001a6f0 	.word	0x1001a6f0
1000d54c:	1001a3f8 	.word	0x1001a3f8
1000d550:	1001a680 	.word	0x1001a680
1000d554:	1001ac34 	.word	0x1001ac34
1000d558:	1001a410 	.word	0x1001a410
1000d55c:	1001a67c 	.word	0x1001a67c
1000d560:	1000f3e1 	.word	0x1000f3e1
1000d564:	10017414 	.word	0x10017414
1000d568:	100164cd 	.word	0x100164cd
1000d56c:	10017f58 	.word	0x10017f58
1000d570:	100163ad 	.word	0x100163ad
1000d574:	10017f84 	.word	0x10017f84
1000d578:	100181d8 	.word	0x100181d8
1000d57c:	1000d25d 	.word	0x1000d25d
1000d580:	10017b74 	.word	0x10017b74
1000d584:	10017fcc 	.word	0x10017fcc
1000d588:	1000f2f9 	.word	0x1000f2f9
1000d58c:	10017fd8 	.word	0x10017fd8
1000d590:	10017b64 	.word	0x10017b64
1000d594:	10016253 	.word	0x10016253
1000d598:	1000f32d 	.word	0x1000f32d
1000d59c:	10017ff0 	.word	0x10017ff0
1000d5a0:	00003a98 	.word	0x00003a98
1000d5a4:	1000f351 	.word	0x1000f351
1000d5a8:	1001801c 	.word	0x1001801c
1000d5ac:	1000f595 	.word	0x1000f595
1000d5b0:	10018058 	.word	0x10018058

1000d5b4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000d5b4:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000d5b6:	2200      	movs	r2, #0
1000d5b8:	2100      	movs	r1, #0
1000d5ba:	4b06      	ldr	r3, [pc, #24]	; (1000d5d4 <ble_send_slave_sec_request+0x20>)
1000d5bc:	4798      	blx	r3
1000d5be:	2800      	cmp	r0, #0
1000d5c0:	d006      	beq.n	1000d5d0 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000d5c2:	4805      	ldr	r0, [pc, #20]	; (1000d5d8 <ble_send_slave_sec_request+0x24>)
1000d5c4:	4b05      	ldr	r3, [pc, #20]	; (1000d5dc <ble_send_slave_sec_request+0x28>)
1000d5c6:	4798      	blx	r3
1000d5c8:	4805      	ldr	r0, [pc, #20]	; (1000d5e0 <ble_send_slave_sec_request+0x2c>)
1000d5ca:	4b06      	ldr	r3, [pc, #24]	; (1000d5e4 <ble_send_slave_sec_request+0x30>)
1000d5cc:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000d5ce:	20e2      	movs	r0, #226	; 0xe2
}
1000d5d0:	bd10      	pop	{r4, pc}
1000d5d2:	46c0      	nop			; (mov r8, r8)
1000d5d4:	10010379 	.word	0x10010379
1000d5d8:	10017414 	.word	0x10017414
1000d5dc:	100164cd 	.word	0x100164cd
1000d5e0:	100180a8 	.word	0x100180a8
1000d5e4:	100163ad 	.word	0x100163ad

1000d5e8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5ea:	465f      	mov	r7, fp
1000d5ec:	464e      	mov	r6, r9
1000d5ee:	4645      	mov	r5, r8
1000d5f0:	b4e0      	push	{r5, r6, r7}
1000d5f2:	b09a      	sub	sp, #104	; 0x68
1000d5f4:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000d5f6:	7a86      	ldrb	r6, [r0, #10]
1000d5f8:	2e00      	cmp	r6, #0
1000d5fa:	d000      	beq.n	1000d5fe <ble_connected_state_handler+0x16>
1000d5fc:	e0c6      	b.n	1000d78c <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000d5fe:	4875      	ldr	r0, [pc, #468]	; (1000d7d4 <ble_connected_state_handler+0x1ec>)
1000d600:	4f75      	ldr	r7, [pc, #468]	; (1000d7d8 <ble_connected_state_handler+0x1f0>)
1000d602:	47b8      	blx	r7
1000d604:	792b      	ldrb	r3, [r5, #4]
1000d606:	796a      	ldrb	r2, [r5, #5]
1000d608:	79a9      	ldrb	r1, [r5, #6]
1000d60a:	7868      	ldrb	r0, [r5, #1]
1000d60c:	9002      	str	r0, [sp, #8]
1000d60e:	78a8      	ldrb	r0, [r5, #2]
1000d610:	9001      	str	r0, [sp, #4]
1000d612:	78e8      	ldrb	r0, [r5, #3]
1000d614:	9000      	str	r0, [sp, #0]
1000d616:	4871      	ldr	r0, [pc, #452]	; (1000d7dc <ble_connected_state_handler+0x1f4>)
1000d618:	4c71      	ldr	r4, [pc, #452]	; (1000d7e0 <ble_connected_state_handler+0x1f8>)
1000d61a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d61c:	486d      	ldr	r0, [pc, #436]	; (1000d7d4 <ble_connected_state_handler+0x1ec>)
1000d61e:	47b8      	blx	r7
1000d620:	8929      	ldrh	r1, [r5, #8]
1000d622:	4870      	ldr	r0, [pc, #448]	; (1000d7e4 <ble_connected_state_handler+0x1fc>)
1000d624:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d626:	2212      	movs	r2, #18
1000d628:	0029      	movs	r1, r5
1000d62a:	486f      	ldr	r0, [pc, #444]	; (1000d7e8 <ble_connected_state_handler+0x200>)
1000d62c:	4b6f      	ldr	r3, [pc, #444]	; (1000d7ec <ble_connected_state_handler+0x204>)
1000d62e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d630:	9504      	str	r5, [sp, #16]
1000d632:	2207      	movs	r2, #7
1000d634:	0029      	movs	r1, r5
1000d636:	486e      	ldr	r0, [pc, #440]	; (1000d7f0 <ble_connected_state_handler+0x208>)
1000d638:	4b6e      	ldr	r3, [pc, #440]	; (1000d7f4 <ble_connected_state_handler+0x20c>)
1000d63a:	4798      	blx	r3
1000d63c:	2800      	cmp	r0, #0
1000d63e:	d100      	bne.n	1000d642 <ble_connected_state_handler+0x5a>
1000d640:	e0ad      	b.n	1000d79e <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d642:	782b      	ldrb	r3, [r5, #0]
1000d644:	2b02      	cmp	r3, #2
1000d646:	d000      	beq.n	1000d64a <ble_connected_state_handler+0x62>
1000d648:	e0a9      	b.n	1000d79e <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d64a:	2250      	movs	r2, #80	; 0x50
1000d64c:	2100      	movs	r1, #0
1000d64e:	a806      	add	r0, sp, #24
1000d650:	4b69      	ldr	r3, [pc, #420]	; (1000d7f8 <ble_connected_state_handler+0x210>)
1000d652:	4798      	blx	r3
1000d654:	4f69      	ldr	r7, [pc, #420]	; (1000d7fc <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d656:	2300      	movs	r3, #0
1000d658:	e00b      	b.n	1000d672 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d65a:	1c59      	adds	r1, r3, #1
1000d65c:	7814      	ldrb	r4, [r2, #0]
1000d65e:	a806      	add	r0, sp, #24
1000d660:	54c4      	strb	r4, [r0, r3]
1000d662:	3201      	adds	r2, #1
1000d664:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d666:	42b3      	cmp	r3, r6
1000d668:	d1f7      	bne.n	1000d65a <ble_connected_state_handler+0x72>
1000d66a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d66c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d66e:	2b50      	cmp	r3, #80	; 0x50
1000d670:	d004      	beq.n	1000d67c <ble_connected_state_handler+0x94>
1000d672:	001e      	movs	r6, r3
1000d674:	3610      	adds	r6, #16
1000d676:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d678:	003a      	movs	r2, r7
1000d67a:	e7ee      	b.n	1000d65a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d67c:	aa06      	add	r2, sp, #24
1000d67e:	0029      	movs	r1, r5
1000d680:	2005      	movs	r0, #5
1000d682:	4b5f      	ldr	r3, [pc, #380]	; (1000d800 <ble_connected_state_handler+0x218>)
1000d684:	4798      	blx	r3
1000d686:	1e06      	subs	r6, r0, #0
1000d688:	d100      	bne.n	1000d68c <ble_connected_state_handler+0xa4>
1000d68a:	e09c      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d68c:	4851      	ldr	r0, [pc, #324]	; (1000d7d4 <ble_connected_state_handler+0x1ec>)
1000d68e:	4b52      	ldr	r3, [pc, #328]	; (1000d7d8 <ble_connected_state_handler+0x1f0>)
1000d690:	4798      	blx	r3
1000d692:	485c      	ldr	r0, [pc, #368]	; (1000d804 <ble_connected_state_handler+0x21c>)
1000d694:	4b52      	ldr	r3, [pc, #328]	; (1000d7e0 <ble_connected_state_handler+0x1f8>)
1000d696:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d698:	26e2      	movs	r6, #226	; 0xe2
1000d69a:	e094      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
1000d69c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d69e:	9405      	str	r4, [sp, #20]
1000d6a0:	2207      	movs	r2, #7
1000d6a2:	9904      	ldr	r1, [sp, #16]
1000d6a4:	4648      	mov	r0, r9
1000d6a6:	47d8      	blx	fp
1000d6a8:	2800      	cmp	r0, #0
1000d6aa:	d109      	bne.n	1000d6c0 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d6ac:	9a05      	ldr	r2, [sp, #20]
1000d6ae:	0153      	lsls	r3, r2, #5
1000d6b0:	1a9b      	subs	r3, r3, r2
1000d6b2:	009a      	lsls	r2, r3, #2
1000d6b4:	4b54      	ldr	r3, [pc, #336]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d6b6:	189b      	adds	r3, r3, r2
1000d6b8:	335e      	adds	r3, #94	; 0x5e
1000d6ba:	2202      	movs	r2, #2
1000d6bc:	701a      	strb	r2, [r3, #0]
1000d6be:	e02b      	b.n	1000d718 <ble_connected_state_handler+0x130>
1000d6c0:	3401      	adds	r4, #1
1000d6c2:	237c      	movs	r3, #124	; 0x7c
1000d6c4:	469c      	mov	ip, r3
1000d6c6:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d6c8:	2c05      	cmp	r4, #5
1000d6ca:	d1e7      	bne.n	1000d69c <ble_connected_state_handler+0xb4>
1000d6cc:	e072      	b.n	1000d7b4 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d6ce:	001c      	movs	r4, r3
1000d6d0:	7811      	ldrb	r1, [r2, #0]
1000d6d2:	2900      	cmp	r1, #0
1000d6d4:	d11a      	bne.n	1000d70c <ble_connected_state_handler+0x124>
1000d6d6:	e001      	b.n	1000d6dc <ble_connected_state_handler+0xf4>
1000d6d8:	2400      	movs	r4, #0
1000d6da:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d6dc:	0163      	lsls	r3, r4, #5
1000d6de:	4699      	mov	r9, r3
1000d6e0:	1b18      	subs	r0, r3, r4
1000d6e2:	0080      	lsls	r0, r0, #2
1000d6e4:	4b48      	ldr	r3, [pc, #288]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d6e6:	4698      	mov	r8, r3
1000d6e8:	4440      	add	r0, r8
1000d6ea:	2212      	movs	r2, #18
1000d6ec:	0029      	movs	r1, r5
1000d6ee:	4b3f      	ldr	r3, [pc, #252]	; (1000d7ec <ble_connected_state_handler+0x204>)
1000d6f0:	4798      	blx	r3
						ble_device_count++;
1000d6f2:	4a46      	ldr	r2, [pc, #280]	; (1000d80c <ble_connected_state_handler+0x224>)
1000d6f4:	7813      	ldrb	r3, [r2, #0]
1000d6f6:	3301      	adds	r3, #1
1000d6f8:	b2db      	uxtb	r3, r3
1000d6fa:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d6fc:	464b      	mov	r3, r9
1000d6fe:	1b1b      	subs	r3, r3, r4
1000d700:	009b      	lsls	r3, r3, #2
1000d702:	4443      	add	r3, r8
1000d704:	335e      	adds	r3, #94	; 0x5e
1000d706:	2202      	movs	r2, #2
1000d708:	701a      	strb	r2, [r3, #0]
						break;
1000d70a:	e005      	b.n	1000d718 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d70c:	1c79      	adds	r1, r7, #1
1000d70e:	b2cf      	uxtb	r7, r1
1000d710:	3301      	adds	r3, #1
1000d712:	327c      	adds	r2, #124	; 0x7c
1000d714:	2f05      	cmp	r7, #5
1000d716:	d1da      	bne.n	1000d6ce <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d718:	2207      	movs	r2, #7
1000d71a:	0029      	movs	r1, r5
1000d71c:	4834      	ldr	r0, [pc, #208]	; (1000d7f0 <ble_connected_state_handler+0x208>)
1000d71e:	4b35      	ldr	r3, [pc, #212]	; (1000d7f4 <ble_connected_state_handler+0x20c>)
1000d720:	4798      	blx	r3
1000d722:	2800      	cmp	r0, #0
1000d724:	d10c      	bne.n	1000d740 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d726:	017b      	lsls	r3, r7, #5
1000d728:	1bdb      	subs	r3, r3, r7
1000d72a:	009b      	lsls	r3, r3, #2
1000d72c:	4a36      	ldr	r2, [pc, #216]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d72e:	18d3      	adds	r3, r2, r3
1000d730:	2205      	movs	r2, #5
1000d732:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d734:	3202      	adds	r2, #2
1000d736:	2100      	movs	r1, #0
1000d738:	482d      	ldr	r0, [pc, #180]	; (1000d7f0 <ble_connected_state_handler+0x208>)
1000d73a:	4b2f      	ldr	r3, [pc, #188]	; (1000d7f8 <ble_connected_state_handler+0x210>)
1000d73c:	4798      	blx	r3
1000d73e:	e042      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d740:	4b31      	ldr	r3, [pc, #196]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d742:	4698      	mov	r8, r3
1000d744:	017c      	lsls	r4, r7, #5
1000d746:	1be3      	subs	r3, r4, r7
1000d748:	009b      	lsls	r3, r3, #2
1000d74a:	4443      	add	r3, r8
1000d74c:	220a      	movs	r2, #10
1000d74e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d750:	3a03      	subs	r2, #3
1000d752:	2100      	movs	r1, #0
1000d754:	4826      	ldr	r0, [pc, #152]	; (1000d7f0 <ble_connected_state_handler+0x208>)
1000d756:	4b28      	ldr	r3, [pc, #160]	; (1000d7f8 <ble_connected_state_handler+0x210>)
1000d758:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d75a:	1be4      	subs	r4, r4, r7
1000d75c:	00a4      	lsls	r4, r4, #2
1000d75e:	4444      	add	r4, r8
1000d760:	7ca3      	ldrb	r3, [r4, #18]
1000d762:	2b0a      	cmp	r3, #10
1000d764:	d12f      	bne.n	1000d7c6 <ble_connected_state_handler+0x1de>
1000d766:	e00d      	b.n	1000d784 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d768:	481a      	ldr	r0, [pc, #104]	; (1000d7d4 <ble_connected_state_handler+0x1ec>)
1000d76a:	4b1b      	ldr	r3, [pc, #108]	; (1000d7d8 <ble_connected_state_handler+0x1f0>)
1000d76c:	4798      	blx	r3
1000d76e:	4b27      	ldr	r3, [pc, #156]	; (1000d80c <ble_connected_state_handler+0x224>)
1000d770:	7819      	ldrb	r1, [r3, #0]
1000d772:	b2c9      	uxtb	r1, r1
1000d774:	4826      	ldr	r0, [pc, #152]	; (1000d810 <ble_connected_state_handler+0x228>)
1000d776:	4b1a      	ldr	r3, [pc, #104]	; (1000d7e0 <ble_connected_state_handler+0x1f8>)
1000d778:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d77a:	8928      	ldrh	r0, [r5, #8]
1000d77c:	2113      	movs	r1, #19
1000d77e:	4b25      	ldr	r3, [pc, #148]	; (1000d814 <ble_connected_state_handler+0x22c>)
1000d780:	4798      	blx	r3
1000d782:	e020      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d784:	8928      	ldrh	r0, [r5, #8]
1000d786:	4b24      	ldr	r3, [pc, #144]	; (1000d818 <ble_connected_state_handler+0x230>)
1000d788:	4798      	blx	r3
1000d78a:	e01c      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d78c:	4811      	ldr	r0, [pc, #68]	; (1000d7d4 <ble_connected_state_handler+0x1ec>)
1000d78e:	4b12      	ldr	r3, [pc, #72]	; (1000d7d8 <ble_connected_state_handler+0x1f0>)
1000d790:	4798      	blx	r3
1000d792:	7aa9      	ldrb	r1, [r5, #10]
1000d794:	4821      	ldr	r0, [pc, #132]	; (1000d81c <ble_connected_state_handler+0x234>)
1000d796:	4b12      	ldr	r3, [pc, #72]	; (1000d7e0 <ble_connected_state_handler+0x1f8>)
1000d798:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d79a:	2600      	movs	r6, #0
1000d79c:	e013      	b.n	1000d7c6 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d79e:	4b1b      	ldr	r3, [pc, #108]	; (1000d80c <ble_connected_state_handler+0x224>)
1000d7a0:	781b      	ldrb	r3, [r3, #0]
1000d7a2:	b2db      	uxtb	r3, r3
1000d7a4:	2b04      	cmp	r3, #4
1000d7a6:	d8df      	bhi.n	1000d768 <ble_connected_state_handler+0x180>
1000d7a8:	4b17      	ldr	r3, [pc, #92]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d7aa:	4699      	mov	r9, r3
1000d7ac:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d7ae:	4b11      	ldr	r3, [pc, #68]	; (1000d7f4 <ble_connected_state_handler+0x20c>)
1000d7b0:	469b      	mov	fp, r3
1000d7b2:	e773      	b.n	1000d69c <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d7b4:	235e      	movs	r3, #94	; 0x5e
1000d7b6:	4a14      	ldr	r2, [pc, #80]	; (1000d808 <ble_connected_state_handler+0x220>)
1000d7b8:	5cd3      	ldrb	r3, [r2, r3]
1000d7ba:	2b00      	cmp	r3, #0
1000d7bc:	d08c      	beq.n	1000d6d8 <ble_connected_state_handler+0xf0>
1000d7be:	4a18      	ldr	r2, [pc, #96]	; (1000d820 <ble_connected_state_handler+0x238>)
1000d7c0:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7c2:	2701      	movs	r7, #1
1000d7c4:	e783      	b.n	1000d6ce <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d7c6:	0030      	movs	r0, r6
1000d7c8:	b01a      	add	sp, #104	; 0x68
1000d7ca:	bc1c      	pop	{r2, r3, r4}
1000d7cc:	4690      	mov	r8, r2
1000d7ce:	4699      	mov	r9, r3
1000d7d0:	46a3      	mov	fp, r4
1000d7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7d4:	10017414 	.word	0x10017414
1000d7d8:	100164cd 	.word	0x100164cd
1000d7dc:	100180c8 	.word	0x100180c8
1000d7e0:	100163ad 	.word	0x100163ad
1000d7e4:	1001810c 	.word	0x1001810c
1000d7e8:	1001a6bc 	.word	0x1001a6bc
1000d7ec:	10016253 	.word	0x10016253
1000d7f0:	10018f18 	.word	0x10018f18
1000d7f4:	10016235 	.word	0x10016235
1000d7f8:	10016265 	.word	0x10016265
1000d7fc:	1001a456 	.word	0x1001a456
1000d800:	1000f801 	.word	0x1000f801
1000d804:	10018124 	.word	0x10018124
1000d808:	1001a410 	.word	0x1001a410
1000d80c:	1001a67c 	.word	0x1001a67c
1000d810:	10018148 	.word	0x10018148
1000d814:	1000f7d5 	.word	0x1000f7d5
1000d818:	1000d5b5 	.word	0x1000d5b5
1000d81c:	10018184 	.word	0x10018184
1000d820:	1001a4ea 	.word	0x1001a4ea

1000d824 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d824:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d826:	4647      	mov	r7, r8
1000d828:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d82a:	7803      	ldrb	r3, [r0, #0]
1000d82c:	2b00      	cmp	r3, #0
1000d82e:	d141      	bne.n	1000d8b4 <ble_resolv_rand_addr_handler+0x90>
1000d830:	4d2f      	ldr	r5, [pc, #188]	; (1000d8f0 <ble_resolv_rand_addr_handler+0xcc>)
1000d832:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d834:	1c46      	adds	r6, r0, #1
1000d836:	4f2f      	ldr	r7, [pc, #188]	; (1000d8f4 <ble_resolv_rand_addr_handler+0xd0>)
1000d838:	2210      	movs	r2, #16
1000d83a:	0029      	movs	r1, r5
1000d83c:	0030      	movs	r0, r6
1000d83e:	47b8      	blx	r7
1000d840:	2800      	cmp	r0, #0
1000d842:	d03f      	beq.n	1000d8c4 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d844:	3401      	adds	r4, #1
1000d846:	b2e4      	uxtb	r4, r4
1000d848:	357c      	adds	r5, #124	; 0x7c
1000d84a:	2c05      	cmp	r4, #5
1000d84c:	d1f4      	bne.n	1000d838 <ble_resolv_rand_addr_handler+0x14>
1000d84e:	e031      	b.n	1000d8b4 <ble_resolv_rand_addr_handler+0x90>
1000d850:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d852:	001c      	movs	r4, r3
1000d854:	7811      	ldrb	r1, [r2, #0]
1000d856:	2900      	cmp	r1, #0
1000d858:	d122      	bne.n	1000d8a0 <ble_resolv_rand_addr_handler+0x7c>
1000d85a:	e001      	b.n	1000d860 <ble_resolv_rand_addr_handler+0x3c>
1000d85c:	2400      	movs	r4, #0
1000d85e:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d860:	4b25      	ldr	r3, [pc, #148]	; (1000d8f8 <ble_resolv_rand_addr_handler+0xd4>)
1000d862:	4698      	mov	r8, r3
1000d864:	0166      	lsls	r6, r4, #5
1000d866:	1b37      	subs	r7, r6, r4
1000d868:	00bf      	lsls	r7, r7, #2
1000d86a:	4447      	add	r7, r8
1000d86c:	2212      	movs	r2, #18
1000d86e:	4923      	ldr	r1, [pc, #140]	; (1000d8fc <ble_resolv_rand_addr_handler+0xd8>)
1000d870:	0038      	movs	r0, r7
1000d872:	4b23      	ldr	r3, [pc, #140]	; (1000d900 <ble_resolv_rand_addr_handler+0xdc>)
1000d874:	4798      	blx	r3
				ble_device_count++;
1000d876:	4a23      	ldr	r2, [pc, #140]	; (1000d904 <ble_resolv_rand_addr_handler+0xe0>)
1000d878:	7813      	ldrb	r3, [r2, #0]
1000d87a:	3301      	adds	r3, #1
1000d87c:	b2db      	uxtb	r3, r3
1000d87e:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d880:	375e      	adds	r7, #94	; 0x5e
1000d882:	2302      	movs	r3, #2
1000d884:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d886:	1b34      	subs	r4, r6, r4
1000d888:	00a4      	lsls	r4, r4, #2
1000d88a:	4444      	add	r4, r8
1000d88c:	3308      	adds	r3, #8
1000d88e:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d890:	016b      	lsls	r3, r5, #5
1000d892:	1b5d      	subs	r5, r3, r5
1000d894:	00ad      	lsls	r5, r5, #2
1000d896:	4445      	add	r5, r8
1000d898:	7cab      	ldrb	r3, [r5, #18]
1000d89a:	2b0a      	cmp	r3, #10
1000d89c:	d123      	bne.n	1000d8e6 <ble_resolv_rand_addr_handler+0xc2>
1000d89e:	e004      	b.n	1000d8aa <ble_resolv_rand_addr_handler+0x86>
1000d8a0:	3301      	adds	r3, #1
1000d8a2:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8a4:	2b05      	cmp	r3, #5
1000d8a6:	d1d3      	bne.n	1000d850 <ble_resolv_rand_addr_handler+0x2c>
1000d8a8:	e01d      	b.n	1000d8e6 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d8aa:	4b14      	ldr	r3, [pc, #80]	; (1000d8fc <ble_resolv_rand_addr_handler+0xd8>)
1000d8ac:	8918      	ldrh	r0, [r3, #8]
1000d8ae:	4b16      	ldr	r3, [pc, #88]	; (1000d908 <ble_resolv_rand_addr_handler+0xe4>)
1000d8b0:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000d8b2:	e018      	b.n	1000d8e6 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d8b4:	235e      	movs	r3, #94	; 0x5e
1000d8b6:	4a10      	ldr	r2, [pc, #64]	; (1000d8f8 <ble_resolv_rand_addr_handler+0xd4>)
1000d8b8:	5cd3      	ldrb	r3, [r2, r3]
1000d8ba:	2b00      	cmp	r3, #0
1000d8bc:	d0ce      	beq.n	1000d85c <ble_resolv_rand_addr_handler+0x38>
1000d8be:	4a13      	ldr	r2, [pc, #76]	; (1000d90c <ble_resolv_rand_addr_handler+0xe8>)
1000d8c0:	2301      	movs	r3, #1
1000d8c2:	e7c5      	b.n	1000d850 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d8c4:	480c      	ldr	r0, [pc, #48]	; (1000d8f8 <ble_resolv_rand_addr_handler+0xd4>)
1000d8c6:	0163      	lsls	r3, r4, #5
1000d8c8:	1b1a      	subs	r2, r3, r4
1000d8ca:	0092      	lsls	r2, r2, #2
1000d8cc:	1882      	adds	r2, r0, r2
1000d8ce:	0011      	movs	r1, r2
1000d8d0:	315e      	adds	r1, #94	; 0x5e
1000d8d2:	2502      	movs	r5, #2
1000d8d4:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d8d6:	210a      	movs	r1, #10
1000d8d8:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d8da:	0010      	movs	r0, r2
1000d8dc:	2212      	movs	r2, #18
1000d8de:	4907      	ldr	r1, [pc, #28]	; (1000d8fc <ble_resolv_rand_addr_handler+0xd8>)
1000d8e0:	4b07      	ldr	r3, [pc, #28]	; (1000d900 <ble_resolv_rand_addr_handler+0xdc>)
1000d8e2:	4798      	blx	r3
1000d8e4:	e7e1      	b.n	1000d8aa <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d8e6:	2000      	movs	r0, #0
1000d8e8:	bc04      	pop	{r2}
1000d8ea:	4690      	mov	r8, r2
1000d8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8ee:	46c0      	nop			; (mov r8, r8)
1000d8f0:	1001a456 	.word	0x1001a456
1000d8f4:	10016235 	.word	0x10016235
1000d8f8:	1001a410 	.word	0x1001a410
1000d8fc:	1001a6bc 	.word	0x1001a6bc
1000d900:	10016253 	.word	0x10016253
1000d904:	1001a67c 	.word	0x1001a67c
1000d908:	1000d5b5 	.word	0x1000d5b5
1000d90c:	1001a4ea 	.word	0x1001a4ea

1000d910 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d912:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000d914:	283b      	cmp	r0, #59	; 0x3b
1000d916:	d872      	bhi.n	1000d9fe <ble_event_manager+0xee>
1000d918:	0083      	lsls	r3, r0, #2
1000d91a:	4a3c      	ldr	r2, [pc, #240]	; (1000da0c <ble_event_manager+0xfc>)
1000d91c:	58d3      	ldr	r3, [r2, r3]
1000d91e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d920:	0084      	lsls	r4, r0, #2
1000d922:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d924:	4f3a      	ldr	r7, [pc, #232]	; (1000da10 <ble_event_manager+0x100>)
1000d926:	59bb      	ldr	r3, [r7, r6]
1000d928:	2b00      	cmp	r3, #0
1000d92a:	d004      	beq.n	1000d936 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d92c:	591b      	ldr	r3, [r3, r4]
1000d92e:	2b00      	cmp	r3, #0
1000d930:	d001      	beq.n	1000d936 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000d932:	0028      	movs	r0, r5
1000d934:	4798      	blx	r3
1000d936:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d938:	2e14      	cmp	r6, #20
1000d93a:	d1f4      	bne.n	1000d926 <ble_event_manager+0x16>
1000d93c:	e065      	b.n	1000da0a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d93e:	3813      	subs	r0, #19
1000d940:	b2c4      	uxtb	r4, r0
1000d942:	00a4      	lsls	r4, r4, #2
1000d944:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d946:	4f33      	ldr	r7, [pc, #204]	; (1000da14 <ble_event_manager+0x104>)
1000d948:	59bb      	ldr	r3, [r7, r6]
1000d94a:	2b00      	cmp	r3, #0
1000d94c:	d004      	beq.n	1000d958 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d94e:	591b      	ldr	r3, [r3, r4]
1000d950:	2b00      	cmp	r3, #0
1000d952:	d001      	beq.n	1000d958 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000d954:	0028      	movs	r0, r5
1000d956:	4798      	blx	r3
1000d958:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d95a:	2e14      	cmp	r6, #20
1000d95c:	d1f4      	bne.n	1000d948 <ble_event_manager+0x38>
1000d95e:	e054      	b.n	1000da0a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d960:	381d      	subs	r0, #29
1000d962:	b2c4      	uxtb	r4, r0
1000d964:	00a4      	lsls	r4, r4, #2
1000d966:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d968:	4f2b      	ldr	r7, [pc, #172]	; (1000da18 <ble_event_manager+0x108>)
1000d96a:	59bb      	ldr	r3, [r7, r6]
1000d96c:	2b00      	cmp	r3, #0
1000d96e:	d004      	beq.n	1000d97a <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d970:	591b      	ldr	r3, [r3, r4]
1000d972:	2b00      	cmp	r3, #0
1000d974:	d001      	beq.n	1000d97a <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000d976:	0028      	movs	r0, r5
1000d978:	4798      	blx	r3
1000d97a:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d97c:	2e14      	cmp	r6, #20
1000d97e:	d1f4      	bne.n	1000d96a <ble_event_manager+0x5a>
1000d980:	e043      	b.n	1000da0a <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d982:	3827      	subs	r0, #39	; 0x27
1000d984:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d986:	4b25      	ldr	r3, [pc, #148]	; (1000da1c <ble_event_manager+0x10c>)
1000d988:	681b      	ldr	r3, [r3, #0]
1000d98a:	2b00      	cmp	r3, #0
1000d98c:	d03d      	beq.n	1000da0a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d98e:	0080      	lsls	r0, r0, #2
1000d990:	58c3      	ldr	r3, [r0, r3]
1000d992:	2b00      	cmp	r3, #0
1000d994:	d039      	beq.n	1000da0a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d996:	0008      	movs	r0, r1
1000d998:	4798      	blx	r3
1000d99a:	e036      	b.n	1000da0a <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d99c:	382d      	subs	r0, #45	; 0x2d
1000d99e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d9a0:	4b1f      	ldr	r3, [pc, #124]	; (1000da20 <ble_event_manager+0x110>)
1000d9a2:	681b      	ldr	r3, [r3, #0]
1000d9a4:	2b00      	cmp	r3, #0
1000d9a6:	d030      	beq.n	1000da0a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d9a8:	0080      	lsls	r0, r0, #2
1000d9aa:	58c3      	ldr	r3, [r0, r3]
1000d9ac:	2b00      	cmp	r3, #0
1000d9ae:	d02c      	beq.n	1000da0a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d9b0:	0008      	movs	r0, r1
1000d9b2:	4798      	blx	r3
1000d9b4:	e029      	b.n	1000da0a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d9b6:	3836      	subs	r0, #54	; 0x36
1000d9b8:	b2c4      	uxtb	r4, r0
1000d9ba:	00a4      	lsls	r4, r4, #2
1000d9bc:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d9be:	4f19      	ldr	r7, [pc, #100]	; (1000da24 <ble_event_manager+0x114>)
1000d9c0:	59bb      	ldr	r3, [r7, r6]
1000d9c2:	2b00      	cmp	r3, #0
1000d9c4:	d004      	beq.n	1000d9d0 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d9c6:	591b      	ldr	r3, [r3, r4]
1000d9c8:	2b00      	cmp	r3, #0
1000d9ca:	d001      	beq.n	1000d9d0 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000d9cc:	0028      	movs	r0, r5
1000d9ce:	4798      	blx	r3
1000d9d0:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d9d2:	2e14      	cmp	r6, #20
1000d9d4:	d1f4      	bne.n	1000d9c0 <ble_event_manager+0xb0>
1000d9d6:	e018      	b.n	1000da0a <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d9d8:	3838      	subs	r0, #56	; 0x38
1000d9da:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d9dc:	4b12      	ldr	r3, [pc, #72]	; (1000da28 <ble_event_manager+0x118>)
1000d9de:	681b      	ldr	r3, [r3, #0]
1000d9e0:	2b00      	cmp	r3, #0
1000d9e2:	d012      	beq.n	1000da0a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d9e4:	0080      	lsls	r0, r0, #2
1000d9e6:	58c3      	ldr	r3, [r0, r3]
1000d9e8:	2b00      	cmp	r3, #0
1000d9ea:	d00e      	beq.n	1000da0a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d9ec:	0008      	movs	r0, r1
1000d9ee:	4798      	blx	r3
1000d9f0:	e00b      	b.n	1000da0a <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d9f2:	4b0e      	ldr	r3, [pc, #56]	; (1000da2c <ble_event_manager+0x11c>)
1000d9f4:	681b      	ldr	r3, [r3, #0]
1000d9f6:	2b00      	cmp	r3, #0
1000d9f8:	d007      	beq.n	1000da0a <ble_event_manager+0xfa>
			ble_user_event_cb();
1000d9fa:	4798      	blx	r3
1000d9fc:	e005      	b.n	1000da0a <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000d9fe:	4d0c      	ldr	r5, [pc, #48]	; (1000da30 <ble_event_manager+0x120>)
1000da00:	0028      	movs	r0, r5
1000da02:	4c0c      	ldr	r4, [pc, #48]	; (1000da34 <ble_event_manager+0x124>)
1000da04:	47a0      	blx	r4
1000da06:	0028      	movs	r0, r5
1000da08:	47a0      	blx	r4
	}
	break;		
	}
}
1000da0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da0c:	10017a74 	.word	0x10017a74
1000da10:	1001a694 	.word	0x1001a694
1000da14:	1001a6a8 	.word	0x1001a6a8
1000da18:	1001a3fc 	.word	0x1001a3fc
1000da1c:	1001a6f0 	.word	0x1001a6f0
1000da20:	1001a3f8 	.word	0x1001a3f8
1000da24:	1001a680 	.word	0x1001a680
1000da28:	1001ac34 	.word	0x1001ac34
1000da2c:	10018f10 	.word	0x10018f10
1000da30:	10017414 	.word	0x10017414
1000da34:	100164cd 	.word	0x100164cd

1000da38 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000da38:	b570      	push	{r4, r5, r6, lr}
1000da3a:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000da3c:	4b0d      	ldr	r3, [pc, #52]	; (1000da74 <ble_event_task+0x3c>)
1000da3e:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000da40:	2b01      	cmp	r3, #1
1000da42:	d101      	bne.n	1000da48 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000da44:	4b0c      	ldr	r3, [pc, #48]	; (1000da78 <ble_event_task+0x40>)
1000da46:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000da48:	0022      	movs	r2, r4
1000da4a:	490c      	ldr	r1, [pc, #48]	; (1000da7c <ble_event_task+0x44>)
1000da4c:	480c      	ldr	r0, [pc, #48]	; (1000da80 <ble_event_task+0x48>)
1000da4e:	4b0d      	ldr	r3, [pc, #52]	; (1000da84 <ble_event_task+0x4c>)
1000da50:	4798      	blx	r3
1000da52:	0004      	movs	r4, r0
1000da54:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000da56:	4b07      	ldr	r3, [pc, #28]	; (1000da74 <ble_event_task+0x3c>)
1000da58:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000da5a:	2b01      	cmp	r3, #1
1000da5c:	d101      	bne.n	1000da62 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000da5e:	4b0a      	ldr	r3, [pc, #40]	; (1000da88 <ble_event_task+0x50>)
1000da60:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000da62:	2d00      	cmp	r5, #0
1000da64:	d104      	bne.n	1000da70 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000da66:	4b06      	ldr	r3, [pc, #24]	; (1000da80 <ble_event_task+0x48>)
1000da68:	7818      	ldrb	r0, [r3, #0]
1000da6a:	4904      	ldr	r1, [pc, #16]	; (1000da7c <ble_event_task+0x44>)
1000da6c:	4b07      	ldr	r3, [pc, #28]	; (1000da8c <ble_event_task+0x54>)
1000da6e:	4798      	blx	r3
    }
    
    return status;
}
1000da70:	0020      	movs	r0, r4
1000da72:	bd70      	pop	{r4, r5, r6, pc}
1000da74:	10018f1f 	.word	0x10018f1f
1000da78:	1000e42d 	.word	0x1000e42d
1000da7c:	1001aa28 	.word	0x1001aa28
1000da80:	1001a6ec 	.word	0x1001a6ec
1000da84:	1000eb89 	.word	0x1000eb89
1000da88:	1000e405 	.word	0x1000e405
1000da8c:	1000d911 	.word	0x1000d911

1000da90 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000da90:	b510      	push	{r4, lr}
1000da92:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000da94:	ac08      	add	r4, sp, #32
1000da96:	2203      	movs	r2, #3
1000da98:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000da9a:	2302      	movs	r3, #2
1000da9c:	70a3      	strb	r3, [r4, #2]
1000da9e:	3316      	adds	r3, #22
1000daa0:	70e3      	strb	r3, [r4, #3]
1000daa2:	7122      	strb	r2, [r4, #4]
1000daa4:	7163      	strb	r3, [r4, #5]
1000daa6:	3201      	adds	r2, #1
1000daa8:	71a2      	strb	r2, [r4, #6]
1000daaa:	71e3      	strb	r3, [r4, #7]
1000daac:	320b      	adds	r2, #11
1000daae:	7222      	strb	r2, [r4, #8]
1000dab0:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000dab2:	3b0f      	subs	r3, #15
1000dab4:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000dab6:	3a05      	subs	r2, #5
1000dab8:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000daba:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000dabc:	aa0b      	add	r2, sp, #44	; 0x2c
1000dabe:	4b10      	ldr	r3, [pc, #64]	; (1000db00 <ble_advertisement_data_set+0x70>)
1000dac0:	cb03      	ldmia	r3!, {r0, r1}
1000dac2:	c203      	stmia	r2!, {r0, r1}
1000dac4:	781b      	ldrb	r3, [r3, #0]
1000dac6:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000dac8:	2307      	movs	r3, #7
1000daca:	466a      	mov	r2, sp
1000dacc:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000dace:	33f8      	adds	r3, #248	; 0xf8
1000dad0:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000dad2:	2206      	movs	r2, #6
1000dad4:	490b      	ldr	r1, [pc, #44]	; (1000db04 <ble_advertisement_data_set+0x74>)
1000dad6:	466b      	mov	r3, sp
1000dad8:	1c98      	adds	r0, r3, #2
1000dada:	4b0b      	ldr	r3, [pc, #44]	; (1000db08 <ble_advertisement_data_set+0x78>)
1000dadc:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000dade:	2308      	movs	r3, #8
1000dae0:	466a      	mov	r2, sp
1000dae2:	2115      	movs	r1, #21
1000dae4:	0020      	movs	r0, r4
1000dae6:	4c09      	ldr	r4, [pc, #36]	; (1000db0c <ble_advertisement_data_set+0x7c>)
1000dae8:	47a0      	blx	r4
1000daea:	2800      	cmp	r0, #0
1000daec:	d005      	beq.n	1000dafa <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000daee:	4808      	ldr	r0, [pc, #32]	; (1000db10 <ble_advertisement_data_set+0x80>)
1000daf0:	4b08      	ldr	r3, [pc, #32]	; (1000db14 <ble_advertisement_data_set+0x84>)
1000daf2:	4798      	blx	r3
1000daf4:	4808      	ldr	r0, [pc, #32]	; (1000db18 <ble_advertisement_data_set+0x88>)
1000daf6:	4b09      	ldr	r3, [pc, #36]	; (1000db1c <ble_advertisement_data_set+0x8c>)
1000daf8:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000dafa:	2000      	movs	r0, #0
1000dafc:	b010      	add	sp, #64	; 0x40
1000dafe:	bd10      	pop	{r4, pc}
1000db00:	10017fcc 	.word	0x10017fcc
1000db04:	100181ac 	.word	0x100181ac
1000db08:	10016253 	.word	0x10016253
1000db0c:	1000f5e9 	.word	0x1000f5e9
1000db10:	10017414 	.word	0x10017414
1000db14:	100164cd 	.word	0x100164cd
1000db18:	100181b4 	.word	0x100181b4
1000db1c:	100163ad 	.word	0x100163ad

1000db20 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000db20:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000db22:	4b0e      	ldr	r3, [pc, #56]	; (1000db5c <uart_read_complete_callback+0x3c>)
1000db24:	781b      	ldrb	r3, [r3, #0]
1000db26:	2b01      	cmp	r3, #1
1000db28:	d10b      	bne.n	1000db42 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000db2a:	2202      	movs	r2, #2
1000db2c:	4b0b      	ldr	r3, [pc, #44]	; (1000db5c <uart_read_complete_callback+0x3c>)
1000db2e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000db30:	4b0b      	ldr	r3, [pc, #44]	; (1000db60 <uart_read_complete_callback+0x40>)
1000db32:	681b      	ldr	r3, [r3, #0]
1000db34:	2b00      	cmp	r3, #0
1000db36:	d110      	bne.n	1000db5a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000db38:	2102      	movs	r1, #2
1000db3a:	480a      	ldr	r0, [pc, #40]	; (1000db64 <uart_read_complete_callback+0x44>)
1000db3c:	4b0a      	ldr	r3, [pc, #40]	; (1000db68 <uart_read_complete_callback+0x48>)
1000db3e:	4798      	blx	r3
1000db40:	e00b      	b.n	1000db5a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000db42:	4b07      	ldr	r3, [pc, #28]	; (1000db60 <uart_read_complete_callback+0x40>)
1000db44:	681b      	ldr	r3, [r3, #0]
1000db46:	2b00      	cmp	r3, #0
1000db48:	d007      	beq.n	1000db5a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000db4a:	4c08      	ldr	r4, [pc, #32]	; (1000db6c <uart_read_complete_callback+0x4c>)
1000db4c:	7820      	ldrb	r0, [r4, #0]
1000db4e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000db50:	2201      	movs	r2, #1
1000db52:	0021      	movs	r1, r4
1000db54:	4803      	ldr	r0, [pc, #12]	; (1000db64 <uart_read_complete_callback+0x44>)
1000db56:	4b06      	ldr	r3, [pc, #24]	; (1000db70 <uart_read_complete_callback+0x50>)
1000db58:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000db5a:	bd10      	pop	{r4, pc}
1000db5c:	10019f24 	.word	0x10019f24
1000db60:	10019f2c 	.word	0x10019f2c
1000db64:	1001ac38 	.word	0x1001ac38
1000db68:	1000c8a9 	.word	0x1000c8a9
1000db6c:	10019f28 	.word	0x10019f28
1000db70:	1000c84d 	.word	0x1000c84d

1000db74 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000db74:	b570      	push	{r4, r5, r6, lr}
1000db76:	0006      	movs	r6, r0
1000db78:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000db7a:	4c03      	ldr	r4, [pc, #12]	; (1000db88 <usart_serial_getchar+0x14>)
1000db7c:	0029      	movs	r1, r5
1000db7e:	0030      	movs	r0, r6
1000db80:	47a0      	blx	r4
1000db82:	2800      	cmp	r0, #0
1000db84:	d1fa      	bne.n	1000db7c <usart_serial_getchar+0x8>
}
1000db86:	bd70      	pop	{r4, r5, r6, pc}
1000db88:	1000c839 	.word	0x1000c839

1000db8c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000db8c:	b570      	push	{r4, r5, r6, lr}
1000db8e:	0006      	movs	r6, r0
1000db90:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000db92:	4c03      	ldr	r4, [pc, #12]	; (1000dba0 <usart_serial_putchar+0x14>)
1000db94:	0029      	movs	r1, r5
1000db96:	0030      	movs	r0, r6
1000db98:	47a0      	blx	r4
1000db9a:	2800      	cmp	r0, #0
1000db9c:	d1fa      	bne.n	1000db94 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000db9e:	bd70      	pop	{r4, r5, r6, pc}
1000dba0:	1000c829 	.word	0x1000c829

1000dba4 <serial_console_init>:

void serial_console_init(void)
{
1000dba4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000dba6:	2100      	movs	r1, #0
1000dba8:	2000      	movs	r0, #0
1000dbaa:	4b19      	ldr	r3, [pc, #100]	; (1000dc10 <serial_console_init+0x6c>)
1000dbac:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000dbae:	4c19      	ldr	r4, [pc, #100]	; (1000dc14 <serial_console_init+0x70>)
1000dbb0:	0020      	movs	r0, r4
1000dbb2:	4b19      	ldr	r3, [pc, #100]	; (1000dc18 <serial_console_init+0x74>)
1000dbb4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000dbb6:	23e1      	movs	r3, #225	; 0xe1
1000dbb8:	025b      	lsls	r3, r3, #9
1000dbba:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000dbbc:	2302      	movs	r3, #2
1000dbbe:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000dbc0:	2203      	movs	r2, #3
1000dbc2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000dbc4:	3201      	adds	r2, #1
1000dbc6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000dbc8:	3201      	adds	r2, #1
1000dbca:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000dbcc:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000dbce:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000dbd0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000dbd2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000dbd4:	4d11      	ldr	r5, [pc, #68]	; (1000dc1c <serial_console_init+0x78>)
1000dbd6:	4b12      	ldr	r3, [pc, #72]	; (1000dc20 <serial_console_init+0x7c>)
1000dbd8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000dbda:	4a12      	ldr	r2, [pc, #72]	; (1000dc24 <serial_console_init+0x80>)
1000dbdc:	4b12      	ldr	r3, [pc, #72]	; (1000dc28 <serial_console_init+0x84>)
1000dbde:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000dbe0:	4a12      	ldr	r2, [pc, #72]	; (1000dc2c <serial_console_init+0x88>)
1000dbe2:	4b13      	ldr	r3, [pc, #76]	; (1000dc30 <serial_console_init+0x8c>)
1000dbe4:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000dbe6:	0022      	movs	r2, r4
1000dbe8:	4912      	ldr	r1, [pc, #72]	; (1000dc34 <serial_console_init+0x90>)
1000dbea:	0028      	movs	r0, r5
1000dbec:	4b12      	ldr	r3, [pc, #72]	; (1000dc38 <serial_console_init+0x94>)
1000dbee:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000dbf0:	4e12      	ldr	r6, [pc, #72]	; (1000dc3c <serial_console_init+0x98>)
1000dbf2:	6833      	ldr	r3, [r6, #0]
1000dbf4:	6898      	ldr	r0, [r3, #8]
1000dbf6:	2100      	movs	r1, #0
1000dbf8:	4c11      	ldr	r4, [pc, #68]	; (1000dc40 <serial_console_init+0x9c>)
1000dbfa:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000dbfc:	6833      	ldr	r3, [r6, #0]
1000dbfe:	6858      	ldr	r0, [r3, #4]
1000dc00:	2100      	movs	r1, #0
1000dc02:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000dc04:	2202      	movs	r2, #2
1000dc06:	490f      	ldr	r1, [pc, #60]	; (1000dc44 <serial_console_init+0xa0>)
1000dc08:	0028      	movs	r0, r5
1000dc0a:	4b0f      	ldr	r3, [pc, #60]	; (1000dc48 <serial_console_init+0xa4>)
1000dc0c:	4798      	blx	r3
}
1000dc0e:	bd70      	pop	{r4, r5, r6, pc}
1000dc10:	1000b849 	.word	0x1000b849
1000dc14:	1001ac5c 	.word	0x1001ac5c
1000dc18:	1000c641 	.word	0x1000c641
1000dc1c:	1001ac38 	.word	0x1001ac38
1000dc20:	1001a3f4 	.word	0x1001a3f4
1000dc24:	1000db8d 	.word	0x1000db8d
1000dc28:	1001a3f0 	.word	0x1001a3f0
1000dc2c:	1000db75 	.word	0x1000db75
1000dc30:	1001a3ec 	.word	0x1001a3ec
1000dc34:	40004000 	.word	0x40004000
1000dc38:	1000c66d 	.word	0x1000c66d
1000dc3c:	10018600 	.word	0x10018600
1000dc40:	1001657d 	.word	0x1001657d
1000dc44:	1000db21 	.word	0x1000db21
1000dc48:	1000c875 	.word	0x1000c875

1000dc4c <_time_start>:

void _time_start(unsigned int sec)
{
1000dc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc4e:	b083      	sub	sp, #12
1000dc50:	0005      	movs	r5, r0
	system_clock_get_value();
1000dc52:	4c0d      	ldr	r4, [pc, #52]	; (1000dc88 <_time_start+0x3c>)
1000dc54:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000dc56:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000dc58:	4f0c      	ldr	r7, [pc, #48]	; (1000dc8c <_time_start+0x40>)
1000dc5a:	47b8      	blx	r7
1000dc5c:	4e0c      	ldr	r6, [pc, #48]	; (1000dc90 <_time_start+0x44>)
1000dc5e:	4a0d      	ldr	r2, [pc, #52]	; (1000dc94 <_time_start+0x48>)
1000dc60:	4b0d      	ldr	r3, [pc, #52]	; (1000dc98 <_time_start+0x4c>)
1000dc62:	47b0      	blx	r6
1000dc64:	9000      	str	r0, [sp, #0]
1000dc66:	9101      	str	r1, [sp, #4]
1000dc68:	20fa      	movs	r0, #250	; 0xfa
1000dc6a:	0080      	lsls	r0, r0, #2
1000dc6c:	4368      	muls	r0, r5
1000dc6e:	47b8      	blx	r7
1000dc70:	0002      	movs	r2, r0
1000dc72:	000b      	movs	r3, r1
1000dc74:	9800      	ldr	r0, [sp, #0]
1000dc76:	9901      	ldr	r1, [sp, #4]
1000dc78:	47b0      	blx	r6
1000dc7a:	4b08      	ldr	r3, [pc, #32]	; (1000dc9c <_time_start+0x50>)
1000dc7c:	4798      	blx	r3
1000dc7e:	4b08      	ldr	r3, [pc, #32]	; (1000dca0 <_time_start+0x54>)
1000dc80:	6018      	str	r0, [r3, #0]
}
1000dc82:	b003      	add	sp, #12
1000dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc86:	46c0      	nop			; (mov r8, r8)
1000dc88:	1000b8cd 	.word	0x1000b8cd
1000dc8c:	10015f5d 	.word	0x10015f5d
1000dc90:	10015291 	.word	0x10015291
1000dc94:	19feaec7 	.word	0x19feaec7
1000dc98:	3f09d8ef 	.word	0x3f09d8ef
1000dc9c:	10013681 	.word	0x10013681
1000dca0:	10019f20 	.word	0x10019f20

1000dca4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000dca4:	4b02      	ldr	r3, [pc, #8]	; (1000dcb0 <_time_done+0xc>)
1000dca6:	681a      	ldr	r2, [r3, #0]
1000dca8:	1e50      	subs	r0, r2, #1
1000dcaa:	6018      	str	r0, [r3, #0]
}
1000dcac:	4770      	bx	lr
1000dcae:	46c0      	nop			; (mov r8, r8)
1000dcb0:	10019f20 	.word	0x10019f20

1000dcb4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000dcb4:	b570      	push	{r4, r5, r6, lr}
1000dcb6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000dcb8:	2201      	movs	r2, #1
1000dcba:	4b11      	ldr	r3, [pc, #68]	; (1000dd00 <getchar_b11_timeout+0x4c>)
1000dcbc:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000dcbe:	4b11      	ldr	r3, [pc, #68]	; (1000dd04 <getchar_b11_timeout+0x50>)
1000dcc0:	681b      	ldr	r3, [r3, #0]
1000dcc2:	2b00      	cmp	r3, #0
1000dcc4:	d103      	bne.n	1000dcce <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000dcc6:	2102      	movs	r1, #2
1000dcc8:	480f      	ldr	r0, [pc, #60]	; (1000dd08 <getchar_b11_timeout+0x54>)
1000dcca:	4b10      	ldr	r3, [pc, #64]	; (1000dd0c <getchar_b11_timeout+0x58>)
1000dccc:	4798      	blx	r3

	_time_start(sec);
1000dcce:	0020      	movs	r0, r4
1000dcd0:	4b0f      	ldr	r3, [pc, #60]	; (1000dd10 <getchar_b11_timeout+0x5c>)
1000dcd2:	4798      	blx	r3
	
	string_input[0] = 0;
1000dcd4:	490f      	ldr	r1, [pc, #60]	; (1000dd14 <getchar_b11_timeout+0x60>)
1000dcd6:	2300      	movs	r3, #0
1000dcd8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000dcda:	2201      	movs	r2, #1
1000dcdc:	480a      	ldr	r0, [pc, #40]	; (1000dd08 <getchar_b11_timeout+0x54>)
1000dcde:	4b0e      	ldr	r3, [pc, #56]	; (1000dd18 <getchar_b11_timeout+0x64>)
1000dce0:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000dce2:	4c07      	ldr	r4, [pc, #28]	; (1000dd00 <getchar_b11_timeout+0x4c>)
1000dce4:	4d0d      	ldr	r5, [pc, #52]	; (1000dd1c <getchar_b11_timeout+0x68>)
1000dce6:	7823      	ldrb	r3, [r4, #0]
1000dce8:	2b02      	cmp	r3, #2
1000dcea:	d002      	beq.n	1000dcf2 <getchar_b11_timeout+0x3e>
1000dcec:	47a8      	blx	r5
1000dcee:	2800      	cmp	r0, #0
1000dcf0:	d1f9      	bne.n	1000dce6 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000dcf2:	2200      	movs	r2, #0
1000dcf4:	4b02      	ldr	r3, [pc, #8]	; (1000dd00 <getchar_b11_timeout+0x4c>)
1000dcf6:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000dcf8:	4b06      	ldr	r3, [pc, #24]	; (1000dd14 <getchar_b11_timeout+0x60>)
1000dcfa:	7818      	ldrb	r0, [r3, #0]
}
1000dcfc:	bd70      	pop	{r4, r5, r6, pc}
1000dcfe:	46c0      	nop			; (mov r8, r8)
1000dd00:	10019f24 	.word	0x10019f24
1000dd04:	10019f2c 	.word	0x10019f2c
1000dd08:	1001ac38 	.word	0x1001ac38
1000dd0c:	1000c889 	.word	0x1000c889
1000dd10:	1000dc4d 	.word	0x1000dc4d
1000dd14:	10019f28 	.word	0x10019f28
1000dd18:	1000c84d 	.word	0x1000c84d
1000dd1c:	1000dca5 	.word	0x1000dca5

1000dd20 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000dd20:	4b02      	ldr	r3, [pc, #8]	; (1000dd2c <platform_event_free+0xc>)
1000dd22:	681a      	ldr	r2, [r3, #0]
1000dd24:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000dd26:	6018      	str	r0, [r3, #0]
}
1000dd28:	4770      	bx	lr
1000dd2a:	46c0      	nop			; (mov r8, r8)
1000dd2c:	10019f34 	.word	0x10019f34

1000dd30 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000dd30:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000dd32:	4b0b      	ldr	r3, [pc, #44]	; (1000dd60 <platform_event_post+0x30>)
1000dd34:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000dd36:	2c00      	cmp	r4, #0
1000dd38:	d011      	beq.n	1000dd5e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000dd3a:	6825      	ldr	r5, [r4, #0]
1000dd3c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000dd3e:	2300      	movs	r3, #0
1000dd40:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000dd42:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000dd44:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000dd46:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000dd48:	4b06      	ldr	r3, [pc, #24]	; (1000dd64 <platform_event_post+0x34>)
1000dd4a:	681a      	ldr	r2, [r3, #0]
1000dd4c:	2a00      	cmp	r2, #0
1000dd4e:	d102      	bne.n	1000dd56 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000dd50:	601c      	str	r4, [r3, #0]
1000dd52:	e004      	b.n	1000dd5e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000dd54:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000dd56:	6813      	ldr	r3, [r2, #0]
1000dd58:	2b00      	cmp	r3, #0
1000dd5a:	d1fb      	bne.n	1000dd54 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000dd5c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000dd5e:	bd30      	pop	{r4, r5, pc}
1000dd60:	10019f34 	.word	0x10019f34
1000dd64:	10019f30 	.word	0x10019f30

1000dd68 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000dd68:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000dd6a:	2300      	movs	r3, #0
1000dd6c:	4a06      	ldr	r2, [pc, #24]	; (1000dd88 <platform_event_init+0x20>)
1000dd6e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000dd70:	4a06      	ldr	r2, [pc, #24]	; (1000dd8c <platform_event_init+0x24>)
1000dd72:	6013      	str	r3, [r2, #0]
1000dd74:	4c06      	ldr	r4, [pc, #24]	; (1000dd90 <platform_event_init+0x28>)
1000dd76:	0026      	movs	r6, r4
1000dd78:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000dd7a:	4d06      	ldr	r5, [pc, #24]	; (1000dd94 <platform_event_init+0x2c>)
1000dd7c:	0020      	movs	r0, r4
1000dd7e:	47a8      	blx	r5
1000dd80:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000dd82:	42b4      	cmp	r4, r6
1000dd84:	d1fa      	bne.n	1000dd7c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000dd86:	bd70      	pop	{r4, r5, r6, pc}
1000dd88:	10019f34 	.word	0x10019f34
1000dd8c:	10019f30 	.word	0x10019f30
1000dd90:	10019f38 	.word	0x10019f38
1000dd94:	1000dd21 	.word	0x1000dd21

1000dd98 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000dd98:	b570      	push	{r4, r5, r6, lr}
1000dd9a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000dd9c:	4b13      	ldr	r3, [pc, #76]	; (1000ddec <at_ke_msg_send+0x54>)
1000dd9e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000dda0:	4b13      	ldr	r3, [pc, #76]	; (1000ddf0 <at_ke_msg_send+0x58>)
1000dda2:	681b      	ldr	r3, [r3, #0]
1000dda4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000dda6:	2c0c      	cmp	r4, #12
1000dda8:	d01f      	beq.n	1000ddea <at_ke_msg_send+0x52>
1000ddaa:	3c0c      	subs	r4, #12
1000ddac:	88e3      	ldrh	r3, [r4, #6]
1000ddae:	2b05      	cmp	r3, #5
1000ddb0:	d01b      	beq.n	1000ddea <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ddb2:	07eb      	lsls	r3, r5, #31
1000ddb4:	d414      	bmi.n	1000dde0 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ddb6:	4b0f      	ldr	r3, [pc, #60]	; (1000ddf4 <at_ke_msg_send+0x5c>)
1000ddb8:	681b      	ldr	r3, [r3, #0]
1000ddba:	2002      	movs	r0, #2
1000ddbc:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ddbe:	4b0e      	ldr	r3, [pc, #56]	; (1000ddf8 <at_ke_msg_send+0x60>)
1000ddc0:	681b      	ldr	r3, [r3, #0]
1000ddc2:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ddc4:	4c0d      	ldr	r4, [pc, #52]	; (1000ddfc <at_ke_msg_send+0x64>)
1000ddc6:	2003      	movs	r0, #3
1000ddc8:	6823      	ldr	r3, [r4, #0]
1000ddca:	4798      	blx	r3
1000ddcc:	2800      	cmp	r0, #0
1000ddce:	d1fa      	bne.n	1000ddc6 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ddd0:	4b0b      	ldr	r3, [pc, #44]	; (1000de00 <at_ke_msg_send+0x68>)
1000ddd2:	681b      	ldr	r3, [r3, #0]
1000ddd4:	3002      	adds	r0, #2
1000ddd6:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ddd8:	2201      	movs	r2, #1
1000ddda:	4b0a      	ldr	r3, [pc, #40]	; (1000de04 <at_ke_msg_send+0x6c>)
1000dddc:	601a      	str	r2, [r3, #0]
1000ddde:	e004      	b.n	1000ddea <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000dde0:	4b09      	ldr	r3, [pc, #36]	; (1000de08 <at_ke_msg_send+0x70>)
1000dde2:	6818      	ldr	r0, [r3, #0]
1000dde4:	4b09      	ldr	r3, [pc, #36]	; (1000de0c <at_ke_msg_send+0x74>)
1000dde6:	681b      	ldr	r3, [r3, #0]
1000dde8:	4798      	blx	r3
		}
	}
}
1000ddea:	bd70      	pop	{r4, r5, r6, pc}
1000ddec:	4000b1ec 	.word	0x4000b1ec
1000ddf0:	10019fe0 	.word	0x10019fe0
1000ddf4:	10019fd8 	.word	0x10019fd8
1000ddf8:	10019fec 	.word	0x10019fec
1000ddfc:	10019fc0 	.word	0x10019fc0
1000de00:	10019fc8 	.word	0x10019fc8
1000de04:	4000b020 	.word	0x4000b020
1000de08:	10019fcc 	.word	0x10019fcc
1000de0c:	10019fbc 	.word	0x10019fbc

1000de10 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000de10:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000de12:	4b06      	ldr	r3, [pc, #24]	; (1000de2c <samb11_plf_resume_callback+0x1c>)
1000de14:	4a06      	ldr	r2, [pc, #24]	; (1000de30 <samb11_plf_resume_callback+0x20>)
1000de16:	6819      	ldr	r1, [r3, #0]
1000de18:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000de1a:	685a      	ldr	r2, [r3, #4]
1000de1c:	4b05      	ldr	r3, [pc, #20]	; (1000de34 <samb11_plf_resume_callback+0x24>)
1000de1e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000de20:	4b05      	ldr	r3, [pc, #20]	; (1000de38 <samb11_plf_resume_callback+0x28>)
1000de22:	681b      	ldr	r3, [r3, #0]
1000de24:	2b00      	cmp	r3, #0
1000de26:	d000      	beq.n	1000de2a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000de28:	4798      	blx	r3
	}
}
1000de2a:	bd10      	pop	{r4, pc}
1000de2c:	1001ac84 	.word	0x1001ac84
1000de30:	4000b00c 	.word	0x4000b00c
1000de34:	4000b010 	.word	0x4000b010
1000de38:	1001af60 	.word	0x1001af60

1000de3c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000de3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000de3e:	2232      	movs	r2, #50	; 0x32
1000de40:	2100      	movs	r1, #0
1000de42:	480d      	ldr	r0, [pc, #52]	; (1000de78 <init_port_list+0x3c>)
1000de44:	4b0d      	ldr	r3, [pc, #52]	; (1000de7c <init_port_list+0x40>)
1000de46:	4798      	blx	r3
1000de48:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000de4a:	480b      	ldr	r0, [pc, #44]	; (1000de78 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000de4c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000de4e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000de50:	004a      	lsls	r2, r1, #1
1000de52:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000de54:	1882      	adds	r2, r0, r2
1000de56:	7853      	ldrb	r3, [r2, #1]
1000de58:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000de5a:	b2db      	uxtb	r3, r3
1000de5c:	43a3      	bics	r3, r4
1000de5e:	7053      	strb	r3, [r2, #1]
1000de60:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000de62:	2919      	cmp	r1, #25
1000de64:	d1f4      	bne.n	1000de50 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000de66:	4b04      	ldr	r3, [pc, #16]	; (1000de78 <init_port_list+0x3c>)
1000de68:	785a      	ldrb	r2, [r3, #1]
1000de6a:	3918      	subs	r1, #24
1000de6c:	438a      	bics	r2, r1
1000de6e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000de70:	78da      	ldrb	r2, [r3, #3]
1000de72:	438a      	bics	r2, r1
1000de74:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000de76:	bd70      	pop	{r4, r5, r6, pc}
1000de78:	1001aca0 	.word	0x1001aca0
1000de7c:	10016265 	.word	0x10016265

1000de80 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000de80:	4a06      	ldr	r2, [pc, #24]	; (1000de9c <init_clock+0x1c>)
1000de82:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000de84:	4b06      	ldr	r3, [pc, #24]	; (1000dea0 <init_clock+0x20>)
1000de86:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000de88:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000de8a:	4a06      	ldr	r2, [pc, #24]	; (1000dea4 <init_clock+0x24>)
1000de8c:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000de8e:	4906      	ldr	r1, [pc, #24]	; (1000dea8 <init_clock+0x28>)
1000de90:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000de92:	4b06      	ldr	r3, [pc, #24]	; (1000deac <init_clock+0x2c>)
1000de94:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000de96:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000de98:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000de9a:	4770      	bx	lr
1000de9c:	4000b00c 	.word	0x4000b00c
1000dea0:	fffe0fd3 	.word	0xfffe0fd3
1000dea4:	1001ac84 	.word	0x1001ac84
1000dea8:	4000b010 	.word	0x4000b010
1000deac:	ffffe7c0 	.word	0xffffe7c0

1000deb0 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000deb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000deb2:	4657      	mov	r7, sl
1000deb4:	464e      	mov	r6, r9
1000deb6:	4645      	mov	r5, r8
1000deb8:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000deba:	4b4f      	ldr	r3, [pc, #316]	; (1000dff8 <platform_driver_init+0x148>)
1000debc:	781b      	ldrb	r3, [r3, #0]
1000debe:	2b00      	cmp	r3, #0
1000dec0:	d004      	beq.n	1000decc <platform_driver_init+0x1c>
1000dec2:	4b4d      	ldr	r3, [pc, #308]	; (1000dff8 <platform_driver_init+0x148>)
1000dec4:	781b      	ldrb	r3, [r3, #0]
1000dec6:	2b01      	cmp	r3, #1
1000dec8:	d100      	bne.n	1000decc <platform_driver_init+0x1c>
1000deca:	e08c      	b.n	1000dfe6 <platform_driver_init+0x136>
		init_port_list();
1000decc:	4b4b      	ldr	r3, [pc, #300]	; (1000dffc <platform_driver_init+0x14c>)
1000dece:	4798      	blx	r3
		init_clock();
1000ded0:	4b4b      	ldr	r3, [pc, #300]	; (1000e000 <platform_driver_init+0x150>)
1000ded2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ded4:	2300      	movs	r3, #0
1000ded6:	4698      	mov	r8, r3
1000ded8:	4b4a      	ldr	r3, [pc, #296]	; (1000e004 <platform_driver_init+0x154>)
1000deda:	4642      	mov	r2, r8
1000dedc:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000dede:	4c4a      	ldr	r4, [pc, #296]	; (1000e008 <platform_driver_init+0x158>)
1000dee0:	2380      	movs	r3, #128	; 0x80
1000dee2:	2280      	movs	r2, #128	; 0x80
1000dee4:	0412      	lsls	r2, r2, #16
1000dee6:	4692      	mov	sl, r2
1000dee8:	50e2      	str	r2, [r4, r3]
1000deea:	2280      	movs	r2, #128	; 0x80
1000deec:	0452      	lsls	r2, r2, #17
1000deee:	4691      	mov	r9, r2
1000def0:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000def2:	4d46      	ldr	r5, [pc, #280]	; (1000e00c <platform_driver_init+0x15c>)
1000def4:	4b46      	ldr	r3, [pc, #280]	; (1000e010 <platform_driver_init+0x160>)
1000def6:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000def8:	4b46      	ldr	r3, [pc, #280]	; (1000e014 <platform_driver_init+0x164>)
1000defa:	4a47      	ldr	r2, [pc, #284]	; (1000e018 <platform_driver_init+0x168>)
1000defc:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000defe:	4947      	ldr	r1, [pc, #284]	; (1000e01c <platform_driver_init+0x16c>)
1000df00:	4a47      	ldr	r2, [pc, #284]	; (1000e020 <platform_driver_init+0x170>)
1000df02:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000df04:	4a47      	ldr	r2, [pc, #284]	; (1000e024 <platform_driver_init+0x174>)
1000df06:	6811      	ldr	r1, [r2, #0]
1000df08:	4a47      	ldr	r2, [pc, #284]	; (1000e028 <platform_driver_init+0x178>)
1000df0a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000df0c:	4a47      	ldr	r2, [pc, #284]	; (1000e02c <platform_driver_init+0x17c>)
1000df0e:	6811      	ldr	r1, [r2, #0]
1000df10:	4a47      	ldr	r2, [pc, #284]	; (1000e030 <platform_driver_init+0x180>)
1000df12:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000df14:	4947      	ldr	r1, [pc, #284]	; (1000e034 <platform_driver_init+0x184>)
1000df16:	4a48      	ldr	r2, [pc, #288]	; (1000e038 <platform_driver_init+0x188>)
1000df18:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000df1a:	4948      	ldr	r1, [pc, #288]	; (1000e03c <platform_driver_init+0x18c>)
1000df1c:	4a48      	ldr	r2, [pc, #288]	; (1000e040 <platform_driver_init+0x190>)
1000df1e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000df20:	4f48      	ldr	r7, [pc, #288]	; (1000e044 <platform_driver_init+0x194>)
1000df22:	4a49      	ldr	r2, [pc, #292]	; (1000e048 <platform_driver_init+0x198>)
1000df24:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000df26:	4949      	ldr	r1, [pc, #292]	; (1000e04c <platform_driver_init+0x19c>)
1000df28:	4a49      	ldr	r2, [pc, #292]	; (1000e050 <platform_driver_init+0x1a0>)
1000df2a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000df2c:	4949      	ldr	r1, [pc, #292]	; (1000e054 <platform_driver_init+0x1a4>)
1000df2e:	4a4a      	ldr	r2, [pc, #296]	; (1000e058 <platform_driver_init+0x1a8>)
1000df30:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000df32:	4e4a      	ldr	r6, [pc, #296]	; (1000e05c <platform_driver_init+0x1ac>)
1000df34:	4a4a      	ldr	r2, [pc, #296]	; (1000e060 <platform_driver_init+0x1b0>)
1000df36:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000df38:	494a      	ldr	r1, [pc, #296]	; (1000e064 <platform_driver_init+0x1b4>)
1000df3a:	4a4b      	ldr	r2, [pc, #300]	; (1000e068 <platform_driver_init+0x1b8>)
1000df3c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000df3e:	494b      	ldr	r1, [pc, #300]	; (1000e06c <platform_driver_init+0x1bc>)
1000df40:	4a4b      	ldr	r2, [pc, #300]	; (1000e070 <platform_driver_init+0x1c0>)
1000df42:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000df44:	494b      	ldr	r1, [pc, #300]	; (1000e074 <platform_driver_init+0x1c4>)
1000df46:	4a4c      	ldr	r2, [pc, #304]	; (1000e078 <platform_driver_init+0x1c8>)
1000df48:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000df4a:	494c      	ldr	r1, [pc, #304]	; (1000e07c <platform_driver_init+0x1cc>)
1000df4c:	4a4c      	ldr	r2, [pc, #304]	; (1000e080 <platform_driver_init+0x1d0>)
1000df4e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000df50:	494c      	ldr	r1, [pc, #304]	; (1000e084 <platform_driver_init+0x1d4>)
1000df52:	4a4d      	ldr	r2, [pc, #308]	; (1000e088 <platform_driver_init+0x1d8>)
1000df54:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000df56:	2028      	movs	r0, #40	; 0x28
1000df58:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000df5a:	494c      	ldr	r1, [pc, #304]	; (1000e08c <platform_driver_init+0x1dc>)
1000df5c:	2028      	movs	r0, #40	; 0x28
1000df5e:	682b      	ldr	r3, [r5, #0]
1000df60:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000df62:	682b      	ldr	r3, [r5, #0]
1000df64:	494a      	ldr	r1, [pc, #296]	; (1000e090 <platform_driver_init+0x1e0>)
1000df66:	2027      	movs	r0, #39	; 0x27
1000df68:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000df6a:	4b4a      	ldr	r3, [pc, #296]	; (1000e094 <platform_driver_init+0x1e4>)
1000df6c:	681a      	ldr	r2, [r3, #0]
1000df6e:	4b4a      	ldr	r3, [pc, #296]	; (1000e098 <platform_driver_init+0x1e8>)
1000df70:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000df72:	4a4a      	ldr	r2, [pc, #296]	; (1000e09c <platform_driver_init+0x1ec>)
1000df74:	4b4a      	ldr	r3, [pc, #296]	; (1000e0a0 <platform_driver_init+0x1f0>)
1000df76:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000df78:	4a4a      	ldr	r2, [pc, #296]	; (1000e0a4 <platform_driver_init+0x1f4>)
1000df7a:	4b4b      	ldr	r3, [pc, #300]	; (1000e0a8 <platform_driver_init+0x1f8>)
1000df7c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000df7e:	4a4b      	ldr	r2, [pc, #300]	; (1000e0ac <platform_driver_init+0x1fc>)
1000df80:	4b4b      	ldr	r3, [pc, #300]	; (1000e0b0 <platform_driver_init+0x200>)
1000df82:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000df84:	4a4b      	ldr	r2, [pc, #300]	; (1000e0b4 <platform_driver_init+0x204>)
1000df86:	4b4c      	ldr	r3, [pc, #304]	; (1000e0b8 <platform_driver_init+0x208>)
1000df88:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000df8a:	4a4c      	ldr	r2, [pc, #304]	; (1000e0bc <platform_driver_init+0x20c>)
1000df8c:	4b4c      	ldr	r3, [pc, #304]	; (1000e0c0 <platform_driver_init+0x210>)
1000df8e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000df90:	4a4c      	ldr	r2, [pc, #304]	; (1000e0c4 <platform_driver_init+0x214>)
1000df92:	4b4d      	ldr	r3, [pc, #308]	; (1000e0c8 <platform_driver_init+0x218>)
1000df94:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000df96:	4a4d      	ldr	r2, [pc, #308]	; (1000e0cc <platform_driver_init+0x21c>)
1000df98:	4b4d      	ldr	r3, [pc, #308]	; (1000e0d0 <platform_driver_init+0x220>)
1000df9a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000df9c:	22a0      	movs	r2, #160	; 0xa0
1000df9e:	0092      	lsls	r2, r2, #2
1000dfa0:	2100      	movs	r1, #0
1000dfa2:	484c      	ldr	r0, [pc, #304]	; (1000e0d4 <platform_driver_init+0x224>)
1000dfa4:	4b4c      	ldr	r3, [pc, #304]	; (1000e0d8 <platform_driver_init+0x228>)
1000dfa6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dfa8:	2280      	movs	r2, #128	; 0x80
1000dfaa:	0092      	lsls	r2, r2, #2
1000dfac:	4b4b      	ldr	r3, [pc, #300]	; (1000e0dc <platform_driver_init+0x22c>)
1000dfae:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000dfb0:	4b4b      	ldr	r3, [pc, #300]	; (1000e0e0 <platform_driver_init+0x230>)
1000dfb2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000dfb4:	4653      	mov	r3, sl
1000dfb6:	6023      	str	r3, [r4, #0]
1000dfb8:	464b      	mov	r3, r9
1000dfba:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000dfbc:	4b49      	ldr	r3, [pc, #292]	; (1000e0e4 <platform_driver_init+0x234>)
1000dfbe:	4642      	mov	r2, r8
1000dfc0:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000dfc2:	683b      	ldr	r3, [r7, #0]
1000dfc4:	4a48      	ldr	r2, [pc, #288]	; (1000e0e8 <platform_driver_init+0x238>)
1000dfc6:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000dfc8:	6833      	ldr	r3, [r6, #0]
1000dfca:	4a48      	ldr	r2, [pc, #288]	; (1000e0ec <platform_driver_init+0x23c>)
1000dfcc:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000dfce:	2000      	movs	r0, #0
1000dfd0:	4c47      	ldr	r4, [pc, #284]	; (1000e0f0 <platform_driver_init+0x240>)
1000dfd2:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000dfd4:	2001      	movs	r0, #1
1000dfd6:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000dfd8:	2002      	movs	r0, #2
1000dfda:	47a0      	blx	r4
		platform_initialized = 1;
1000dfdc:	2201      	movs	r2, #1
1000dfde:	4b06      	ldr	r3, [pc, #24]	; (1000dff8 <platform_driver_init+0x148>)
1000dfe0:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000dfe2:	2000      	movs	r0, #0
1000dfe4:	e003      	b.n	1000dfee <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000dfe6:	2201      	movs	r2, #1
1000dfe8:	4b03      	ldr	r3, [pc, #12]	; (1000dff8 <platform_driver_init+0x148>)
1000dfea:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000dfec:	2001      	movs	r0, #1
	}
	return status;
}
1000dfee:	bc1c      	pop	{r2, r3, r4}
1000dff0:	4690      	mov	r8, r2
1000dff2:	4699      	mov	r9, r3
1000dff4:	46a2      	mov	sl, r4
1000dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dff8:	10019fc4 	.word	0x10019fc4
1000dffc:	1000de3d 	.word	0x1000de3d
1000e000:	1000de81 	.word	0x1000de81
1000e004:	10019fe4 	.word	0x10019fe4
1000e008:	e000e100 	.word	0xe000e100
1000e00c:	1001af54 	.word	0x1001af54
1000e010:	000007d7 	.word	0x000007d7
1000e014:	000007bd 	.word	0x000007bd
1000e018:	1001ac90 	.word	0x1001ac90
1000e01c:	0001bc51 	.word	0x0001bc51
1000e020:	1001af58 	.word	0x1001af58
1000e024:	100400bc 	.word	0x100400bc
1000e028:	10019fb8 	.word	0x10019fb8
1000e02c:	100400b8 	.word	0x100400b8
1000e030:	10019fb4 	.word	0x10019fb4
1000e034:	0001b99f 	.word	0x0001b99f
1000e038:	1001ac8c 	.word	0x1001ac8c
1000e03c:	0001b9db 	.word	0x0001b9db
1000e040:	1001ac98 	.word	0x1001ac98
1000e044:	1001af68 	.word	0x1001af68
1000e048:	1004003c 	.word	0x1004003c
1000e04c:	10041fc0 	.word	0x10041fc0
1000e050:	1001ac9c 	.word	0x1001ac9c
1000e054:	10041fc4 	.word	0x10041fc4
1000e058:	1001af64 	.word	0x1001af64
1000e05c:	1001af5c 	.word	0x1001af5c
1000e060:	10041fd4 	.word	0x10041fd4
1000e064:	10041fd8 	.word	0x10041fd8
1000e068:	1001ac94 	.word	0x1001ac94
1000e06c:	0001cbe9 	.word	0x0001cbe9
1000e070:	10019fd8 	.word	0x10019fd8
1000e074:	0001cd8f 	.word	0x0001cd8f
1000e078:	10019fc8 	.word	0x10019fc8
1000e07c:	0001cea3 	.word	0x0001cea3
1000e080:	10019fec 	.word	0x10019fec
1000e084:	0001cbcf 	.word	0x0001cbcf
1000e088:	10019fc0 	.word	0x10019fc0
1000e08c:	1000e539 	.word	0x1000e539
1000e090:	1000e4cd 	.word	0x1000e4cd
1000e094:	100400e4 	.word	0x100400e4
1000e098:	10019fe0 	.word	0x10019fe0
1000e09c:	00019fe9 	.word	0x00019fe9
1000e0a0:	10019ff0 	.word	0x10019ff0
1000e0a4:	0001dbdd 	.word	0x0001dbdd
1000e0a8:	10019fbc 	.word	0x10019fbc
1000e0ac:	0001dc5b 	.word	0x0001dc5b
1000e0b0:	10019fd0 	.word	0x10019fd0
1000e0b4:	100405ec 	.word	0x100405ec
1000e0b8:	10019fcc 	.word	0x10019fcc
1000e0bc:	0001d5e3 	.word	0x0001d5e3
1000e0c0:	10019fdc 	.word	0x10019fdc
1000e0c4:	10040c20 	.word	0x10040c20
1000e0c8:	10019ff4 	.word	0x10019ff4
1000e0cc:	00019f09 	.word	0x00019f09
1000e0d0:	10019fb0 	.word	0x10019fb0
1000e0d4:	1001acd4 	.word	0x1001acd4
1000e0d8:	10016265 	.word	0x10016265
1000e0dc:	1001af6c 	.word	0x1001af6c
1000e0e0:	1000dd69 	.word	0x1000dd69
1000e0e4:	1001af60 	.word	0x1001af60
1000e0e8:	1000de11 	.word	0x1000de11
1000e0ec:	1000e595 	.word	0x1000e595
1000e0f0:	1000e57d 	.word	0x1000e57d

1000e0f4 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e0f4:	4b04      	ldr	r3, [pc, #16]	; (1000e108 <platform_register_ble_msg_handler+0x14>)
1000e0f6:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e0f8:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e0fa:	2a01      	cmp	r2, #1
1000e0fc:	d102      	bne.n	1000e104 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e0fe:	4b03      	ldr	r3, [pc, #12]	; (1000e10c <platform_register_ble_msg_handler+0x18>)
1000e100:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e102:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e104:	0018      	movs	r0, r3
1000e106:	4770      	bx	lr
1000e108:	10019fc4 	.word	0x10019fc4
1000e10c:	10019fe4 	.word	0x10019fe4

1000e110 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e110:	b570      	push	{r4, r5, r6, lr}
1000e112:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e114:	4b0e      	ldr	r3, [pc, #56]	; (1000e150 <platform_interface_send+0x40>)
1000e116:	681b      	ldr	r3, [r3, #0]
1000e118:	2b00      	cmp	r3, #0
1000e11a:	d002      	beq.n	1000e122 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e11c:	8840      	ldrh	r0, [r0, #2]
1000e11e:	4798      	blx	r3
1000e120:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e122:	88e3      	ldrh	r3, [r4, #6]
1000e124:	88a2      	ldrh	r2, [r4, #4]
1000e126:	8861      	ldrh	r1, [r4, #2]
1000e128:	8820      	ldrh	r0, [r4, #0]
1000e12a:	4d0a      	ldr	r5, [pc, #40]	; (1000e154 <platform_interface_send+0x44>)
1000e12c:	682d      	ldr	r5, [r5, #0]
1000e12e:	47a8      	blx	r5
1000e130:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e132:	88e2      	ldrh	r2, [r4, #6]
1000e134:	2a00      	cmp	r2, #0
1000e136:	d102      	bne.n	1000e13e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e138:	4b07      	ldr	r3, [pc, #28]	; (1000e158 <platform_interface_send+0x48>)
1000e13a:	4798      	blx	r3
1000e13c:	e006      	b.n	1000e14c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e13e:	0021      	movs	r1, r4
1000e140:	3108      	adds	r1, #8
1000e142:	4b06      	ldr	r3, [pc, #24]	; (1000e15c <platform_interface_send+0x4c>)
1000e144:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e146:	0028      	movs	r0, r5
1000e148:	4b03      	ldr	r3, [pc, #12]	; (1000e158 <platform_interface_send+0x48>)
1000e14a:	4798      	blx	r3
	}
}
1000e14c:	bd70      	pop	{r4, r5, r6, pc}
1000e14e:	46c0      	nop			; (mov r8, r8)
1000e150:	10019fb8 	.word	0x10019fb8
1000e154:	10019ff0 	.word	0x10019ff0
1000e158:	1000dd99 	.word	0x1000dd99
1000e15c:	10016253 	.word	0x10016253

1000e160 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e160:	b570      	push	{r4, r5, r6, lr}
1000e162:	0015      	movs	r5, r2
1000e164:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e166:	020a      	lsls	r2, r1, #8
1000e168:	4302      	orrs	r2, r0
1000e16a:	4b0a      	ldr	r3, [pc, #40]	; (1000e194 <send_plf_int_msg_ind+0x34>)
1000e16c:	681e      	ldr	r6, [r3, #0]
1000e16e:	0023      	movs	r3, r4
1000e170:	2105      	movs	r1, #5
1000e172:	20a0      	movs	r0, #160	; 0xa0
1000e174:	00c0      	lsls	r0, r0, #3
1000e176:	47b0      	blx	r6
1000e178:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e17a:	d00a      	beq.n	1000e192 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e17c:	2c00      	cmp	r4, #0
1000e17e:	d005      	beq.n	1000e18c <send_plf_int_msg_ind+0x2c>
1000e180:	2d00      	cmp	r5, #0
1000e182:	d003      	beq.n	1000e18c <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e184:	0022      	movs	r2, r4
1000e186:	0029      	movs	r1, r5
1000e188:	4b03      	ldr	r3, [pc, #12]	; (1000e198 <send_plf_int_msg_ind+0x38>)
1000e18a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e18c:	0030      	movs	r0, r6
1000e18e:	4b03      	ldr	r3, [pc, #12]	; (1000e19c <send_plf_int_msg_ind+0x3c>)
1000e190:	4798      	blx	r3
	}
}
1000e192:	bd70      	pop	{r4, r5, r6, pc}
1000e194:	10019ff0 	.word	0x10019ff0
1000e198:	10016253 	.word	0x10016253
1000e19c:	1000dd99 	.word	0x1000dd99

1000e1a0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1a2:	465f      	mov	r7, fp
1000e1a4:	4656      	mov	r6, sl
1000e1a6:	464d      	mov	r5, r9
1000e1a8:	4644      	mov	r4, r8
1000e1aa:	b4f0      	push	{r4, r5, r6, r7}
1000e1ac:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e1ae:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e1b0:	2300      	movs	r3, #0
1000e1b2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e1b4:	1ce3      	adds	r3, r4, #3
1000e1b6:	d81c      	bhi.n	1000e1f2 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e1b8:	220d      	movs	r2, #13
1000e1ba:	2100      	movs	r1, #0
1000e1bc:	a802      	add	r0, sp, #8
1000e1be:	4b82      	ldr	r3, [pc, #520]	; (1000e3c8 <platform_event_wait+0x228>)
1000e1c0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e1c2:	2333      	movs	r3, #51	; 0x33
1000e1c4:	aa02      	add	r2, sp, #8
1000e1c6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e1c8:	3b30      	subs	r3, #48	; 0x30
1000e1ca:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e1cc:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e1ce:	3302      	adds	r3, #2
1000e1d0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e1d2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e1d4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e1d6:	0a23      	lsrs	r3, r4, #8
1000e1d8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e1da:	0c23      	lsrs	r3, r4, #16
1000e1dc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e1de:	0e24      	lsrs	r4, r4, #24
1000e1e0:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e1e2:	2301      	movs	r3, #1
1000e1e4:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e1e6:	210d      	movs	r1, #13
1000e1e8:	0010      	movs	r0, r2
1000e1ea:	4b78      	ldr	r3, [pc, #480]	; (1000e3cc <platform_event_wait+0x22c>)
1000e1ec:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e1ee:	2301      	movs	r3, #1
1000e1f0:	4699      	mov	r9, r3
1000e1f2:	2400      	movs	r4, #0
1000e1f4:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e1f6:	4f76      	ldr	r7, [pc, #472]	; (1000e3d0 <platform_event_wait+0x230>)
1000e1f8:	4e76      	ldr	r6, [pc, #472]	; (1000e3d4 <platform_event_wait+0x234>)
1000e1fa:	4977      	ldr	r1, [pc, #476]	; (1000e3d8 <platform_event_wait+0x238>)
1000e1fc:	6838      	ldr	r0, [r7, #0]
1000e1fe:	6833      	ldr	r3, [r6, #0]
1000e200:	4798      	blx	r3
1000e202:	2800      	cmp	r0, #0
1000e204:	d000      	beq.n	1000e208 <platform_event_wait+0x68>
1000e206:	e088      	b.n	1000e31a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e208:	4b73      	ldr	r3, [pc, #460]	; (1000e3d8 <platform_event_wait+0x238>)
1000e20a:	681c      	ldr	r4, [r3, #0]
1000e20c:	88a3      	ldrh	r3, [r4, #4]
1000e20e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e210:	23cd      	movs	r3, #205	; 0xcd
1000e212:	009b      	lsls	r3, r3, #2
1000e214:	459a      	cmp	sl, r3
1000e216:	d100      	bne.n	1000e21a <platform_event_wait+0x7a>
1000e218:	e0c7      	b.n	1000e3aa <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e21a:	8923      	ldrh	r3, [r4, #8]
1000e21c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e21e:	8963      	ldrh	r3, [r4, #10]
1000e220:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e222:	464b      	mov	r3, r9
1000e224:	2b00      	cmp	r3, #0
1000e226:	d011      	beq.n	1000e24c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e228:	220d      	movs	r2, #13
1000e22a:	2100      	movs	r1, #0
1000e22c:	a802      	add	r0, sp, #8
1000e22e:	4b66      	ldr	r3, [pc, #408]	; (1000e3c8 <platform_event_wait+0x228>)
1000e230:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e232:	2333      	movs	r3, #51	; 0x33
1000e234:	aa02      	add	r2, sp, #8
1000e236:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e238:	3b30      	subs	r3, #48	; 0x30
1000e23a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e23c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e23e:	3302      	adds	r3, #2
1000e240:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e242:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e244:	210d      	movs	r1, #13
1000e246:	0010      	movs	r0, r2
1000e248:	4b60      	ldr	r3, [pc, #384]	; (1000e3cc <platform_event_wait+0x22c>)
1000e24a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e24c:	23a0      	movs	r3, #160	; 0xa0
1000e24e:	00db      	lsls	r3, r3, #3
1000e250:	459a      	cmp	sl, r3
1000e252:	d121      	bne.n	1000e298 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e254:	4b61      	ldr	r3, [pc, #388]	; (1000e3dc <platform_event_wait+0x23c>)
1000e256:	881b      	ldrh	r3, [r3, #0]
1000e258:	4443      	add	r3, r8
1000e25a:	22a0      	movs	r2, #160	; 0xa0
1000e25c:	0092      	lsls	r2, r2, #2
1000e25e:	4293      	cmp	r3, r2
1000e260:	dd02      	ble.n	1000e268 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e262:	3a80      	subs	r2, #128	; 0x80
1000e264:	4b5d      	ldr	r3, [pc, #372]	; (1000e3dc <platform_event_wait+0x23c>)
1000e266:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e268:	4b5c      	ldr	r3, [pc, #368]	; (1000e3dc <platform_event_wait+0x23c>)
1000e26a:	469a      	mov	sl, r3
1000e26c:	881d      	ldrh	r5, [r3, #0]
1000e26e:	4b5c      	ldr	r3, [pc, #368]	; (1000e3e0 <platform_event_wait+0x240>)
1000e270:	18ed      	adds	r5, r5, r3
1000e272:	0021      	movs	r1, r4
1000e274:	310c      	adds	r1, #12
1000e276:	4642      	mov	r2, r8
1000e278:	0028      	movs	r0, r5
1000e27a:	4b5a      	ldr	r3, [pc, #360]	; (1000e3e4 <platform_event_wait+0x244>)
1000e27c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e27e:	4642      	mov	r2, r8
1000e280:	0029      	movs	r1, r5
1000e282:	4658      	mov	r0, fp
1000e284:	4b58      	ldr	r3, [pc, #352]	; (1000e3e8 <platform_event_wait+0x248>)
1000e286:	4798      	blx	r3
				plf_event_buff_index += len;
1000e288:	4653      	mov	r3, sl
1000e28a:	881b      	ldrh	r3, [r3, #0]
1000e28c:	4443      	add	r3, r8
1000e28e:	4652      	mov	r2, sl
1000e290:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e292:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e294:	2502      	movs	r5, #2
1000e296:	e03a      	b.n	1000e30e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e298:	4b54      	ldr	r3, [pc, #336]	; (1000e3ec <platform_event_wait+0x24c>)
1000e29a:	681b      	ldr	r3, [r3, #0]
1000e29c:	2b00      	cmp	r3, #0
1000e29e:	d032      	beq.n	1000e306 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e2a0:	4b4d      	ldr	r3, [pc, #308]	; (1000e3d8 <platform_event_wait+0x238>)
1000e2a2:	681a      	ldr	r2, [r3, #0]
1000e2a4:	8893      	ldrh	r3, [r2, #4]
1000e2a6:	21cd      	movs	r1, #205	; 0xcd
1000e2a8:	0089      	lsls	r1, r1, #2
1000e2aa:	428b      	cmp	r3, r1
1000e2ac:	d104      	bne.n	1000e2b8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e2ae:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e2b0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e2b2:	2b00      	cmp	r3, #0
1000e2b4:	d02b      	beq.n	1000e30e <platform_event_wait+0x16e>
1000e2b6:	e028      	b.n	1000e30a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e2b8:	4c4d      	ldr	r4, [pc, #308]	; (1000e3f0 <platform_event_wait+0x250>)
1000e2ba:	4d49      	ldr	r5, [pc, #292]	; (1000e3e0 <platform_event_wait+0x240>)
1000e2bc:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e2be:	702b      	strb	r3, [r5, #0]
1000e2c0:	0a1b      	lsrs	r3, r3, #8
1000e2c2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e2c4:	8910      	ldrh	r0, [r2, #8]
1000e2c6:	4b4b      	ldr	r3, [pc, #300]	; (1000e3f4 <platform_event_wait+0x254>)
1000e2c8:	681b      	ldr	r3, [r3, #0]
1000e2ca:	4798      	blx	r3
1000e2cc:	7128      	strb	r0, [r5, #4]
1000e2ce:	0a00      	lsrs	r0, r0, #8
1000e2d0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e2d2:	6820      	ldr	r0, [r4, #0]
1000e2d4:	4b40      	ldr	r3, [pc, #256]	; (1000e3d8 <platform_event_wait+0x238>)
1000e2d6:	681a      	ldr	r2, [r3, #0]
1000e2d8:	88d2      	ldrh	r2, [r2, #6]
1000e2da:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e2dc:	681d      	ldr	r5, [r3, #0]
1000e2de:	896b      	ldrh	r3, [r5, #10]
1000e2e0:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e2e2:	3008      	adds	r0, #8
1000e2e4:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e2e6:	896a      	ldrh	r2, [r5, #10]
1000e2e8:	2a00      	cmp	r2, #0
1000e2ea:	d003      	beq.n	1000e2f4 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e2ec:	0029      	movs	r1, r5
1000e2ee:	310c      	adds	r1, #12
1000e2f0:	4b3c      	ldr	r3, [pc, #240]	; (1000e3e4 <platform_event_wait+0x244>)
1000e2f2:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e2f4:	8969      	ldrh	r1, [r5, #10]
1000e2f6:	3108      	adds	r1, #8
1000e2f8:	4b3c      	ldr	r3, [pc, #240]	; (1000e3ec <platform_event_wait+0x24c>)
1000e2fa:	681b      	ldr	r3, [r3, #0]
1000e2fc:	4838      	ldr	r0, [pc, #224]	; (1000e3e0 <platform_event_wait+0x240>)
1000e2fe:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e300:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e302:	2503      	movs	r5, #3
1000e304:	e003      	b.n	1000e30e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e306:	2400      	movs	r4, #0
1000e308:	e001      	b.n	1000e30e <platform_event_wait+0x16e>
1000e30a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e30c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e30e:	4b32      	ldr	r3, [pc, #200]	; (1000e3d8 <platform_event_wait+0x238>)
1000e310:	6818      	ldr	r0, [r3, #0]
1000e312:	4b39      	ldr	r3, [pc, #228]	; (1000e3f8 <platform_event_wait+0x258>)
1000e314:	681b      	ldr	r3, [r3, #0]
1000e316:	4798      	blx	r3
1000e318:	e000      	b.n	1000e31c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e31a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e31c:	2c00      	cmp	r4, #0
1000e31e:	d000      	beq.n	1000e322 <platform_event_wait+0x182>
1000e320:	e76b      	b.n	1000e1fa <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e322:	464b      	mov	r3, r9
1000e324:	2b00      	cmp	r3, #0
1000e326:	d046      	beq.n	1000e3b6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e328:	4b29      	ldr	r3, [pc, #164]	; (1000e3d0 <platform_event_wait+0x230>)
1000e32a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e32c:	2e00      	cmp	r6, #0
1000e32e:	d104      	bne.n	1000e33a <platform_event_wait+0x19a>
1000e330:	2300      	movs	r3, #0
1000e332:	6a1c      	ldr	r4, [r3, #32]
1000e334:	2c00      	cmp	r4, #0
1000e336:	d131      	bne.n	1000e39c <platform_event_wait+0x1fc>
1000e338:	e03d      	b.n	1000e3b6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e33a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e33c:	2314      	movs	r3, #20
1000e33e:	469c      	mov	ip, r3
1000e340:	44b4      	add	ip, r6
1000e342:	4663      	mov	r3, ip
1000e344:	4660      	mov	r0, ip
1000e346:	9300      	str	r3, [sp, #0]
1000e348:	4b2c      	ldr	r3, [pc, #176]	; (1000e3fc <platform_event_wait+0x25c>)
1000e34a:	681b      	ldr	r3, [r3, #0]
1000e34c:	4798      	blx	r3
	while(NULL != current)
1000e34e:	2c00      	cmp	r4, #0
1000e350:	d01f      	beq.n	1000e392 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e352:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e354:	23cd      	movs	r3, #205	; 0xcd
1000e356:	009b      	lsls	r3, r3, #2
1000e358:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e35a:	4b27      	ldr	r3, [pc, #156]	; (1000e3f8 <platform_event_wait+0x258>)
1000e35c:	469a      	mov	sl, r3
1000e35e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e360:	6803      	ldr	r3, [r0, #0]
1000e362:	889b      	ldrh	r3, [r3, #4]
1000e364:	4543      	cmp	r3, r8
1000e366:	d110      	bne.n	1000e38a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e368:	2f00      	cmp	r7, #0
1000e36a:	d006      	beq.n	1000e37a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e36c:	6883      	ldr	r3, [r0, #8]
1000e36e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e370:	4653      	mov	r3, sl
1000e372:	681b      	ldr	r3, [r3, #0]
1000e374:	4798      	blx	r3
				current = prev->pstrNext;
1000e376:	68b8      	ldr	r0, [r7, #8]
1000e378:	e009      	b.n	1000e38e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e37a:	6883      	ldr	r3, [r0, #8]
1000e37c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e37e:	4b1e      	ldr	r3, [pc, #120]	; (1000e3f8 <platform_event_wait+0x258>)
1000e380:	681b      	ldr	r3, [r3, #0]
1000e382:	9301      	str	r3, [sp, #4]
1000e384:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e386:	6a30      	ldr	r0, [r6, #32]
1000e388:	e001      	b.n	1000e38e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e38a:	0007      	movs	r7, r0
1000e38c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e38e:	2800      	cmp	r0, #0
1000e390:	d1e6      	bne.n	1000e360 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e392:	4b1b      	ldr	r3, [pc, #108]	; (1000e400 <platform_event_wait+0x260>)
1000e394:	681b      	ldr	r3, [r3, #0]
1000e396:	9800      	ldr	r0, [sp, #0]
1000e398:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e39a:	e00c      	b.n	1000e3b6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e39c:	2314      	movs	r3, #20
1000e39e:	9300      	str	r3, [sp, #0]
1000e3a0:	4b16      	ldr	r3, [pc, #88]	; (1000e3fc <platform_event_wait+0x25c>)
1000e3a2:	681b      	ldr	r3, [r3, #0]
1000e3a4:	2014      	movs	r0, #20
1000e3a6:	4798      	blx	r3
1000e3a8:	e7d3      	b.n	1000e352 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e3aa:	4b10      	ldr	r3, [pc, #64]	; (1000e3ec <platform_event_wait+0x24c>)
1000e3ac:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e3ae:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e3b0:	2b00      	cmp	r3, #0
1000e3b2:	d0ac      	beq.n	1000e30e <platform_event_wait+0x16e>
1000e3b4:	e77b      	b.n	1000e2ae <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e3b6:	0028      	movs	r0, r5
1000e3b8:	b007      	add	sp, #28
1000e3ba:	bc3c      	pop	{r2, r3, r4, r5}
1000e3bc:	4690      	mov	r8, r2
1000e3be:	4699      	mov	r9, r3
1000e3c0:	46a2      	mov	sl, r4
1000e3c2:	46ab      	mov	fp, r5
1000e3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3c6:	46c0      	nop			; (mov r8, r8)
1000e3c8:	10016265 	.word	0x10016265
1000e3cc:	1000e111 	.word	0x1000e111
1000e3d0:	10019ff4 	.word	0x10019ff4
1000e3d4:	10019fdc 	.word	0x10019fdc
1000e3d8:	10019fe8 	.word	0x10019fe8
1000e3dc:	1001af6c 	.word	0x1001af6c
1000e3e0:	1001acd4 	.word	0x1001acd4
1000e3e4:	10016253 	.word	0x10016253
1000e3e8:	1000dd31 	.word	0x1000dd31
1000e3ec:	10019fe4 	.word	0x10019fe4
1000e3f0:	10019fd4 	.word	0x10019fd4
1000e3f4:	10019fb4 	.word	0x10019fb4
1000e3f8:	10019fb0 	.word	0x10019fb0
1000e3fc:	10019fd0 	.word	0x10019fd0
1000e400:	10019fbc 	.word	0x10019fbc

1000e404 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e404:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e406:	4b03      	ldr	r3, [pc, #12]	; (1000e414 <acquire_sleep_lock+0x10>)
1000e408:	681b      	ldr	r3, [r3, #0]
1000e40a:	2080      	movs	r0, #128	; 0x80
1000e40c:	0200      	lsls	r0, r0, #8
1000e40e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e410:	2008      	movs	r0, #8
1000e412:	bd10      	pop	{r4, pc}
1000e414:	1001ac8c 	.word	0x1001ac8c

1000e418 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e418:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e41a:	4b03      	ldr	r3, [pc, #12]	; (1000e428 <release_message_lock+0x10>)
1000e41c:	681b      	ldr	r3, [r3, #0]
1000e41e:	2080      	movs	r0, #128	; 0x80
1000e420:	01c0      	lsls	r0, r0, #7
1000e422:	4798      	blx	r3
	return status;
}
1000e424:	2000      	movs	r0, #0
1000e426:	bd10      	pop	{r4, pc}
1000e428:	1001ac98 	.word	0x1001ac98

1000e42c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e42c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e42e:	4c05      	ldr	r4, [pc, #20]	; (1000e444 <release_sleep_lock+0x18>)
1000e430:	2080      	movs	r0, #128	; 0x80
1000e432:	01c0      	lsls	r0, r0, #7
1000e434:	6823      	ldr	r3, [r4, #0]
1000e436:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e438:	6823      	ldr	r3, [r4, #0]
1000e43a:	2080      	movs	r0, #128	; 0x80
1000e43c:	0200      	lsls	r0, r0, #8
1000e43e:	4798      	blx	r3
	return status;
}
1000e440:	2000      	movs	r0, #0
1000e442:	bd10      	pop	{r4, pc}
1000e444:	1001ac98 	.word	0x1001ac98

1000e448 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e448:	2800      	cmp	r0, #0
1000e44a:	d003      	beq.n	1000e454 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e44c:	4b02      	ldr	r3, [pc, #8]	; (1000e458 <register_resume_callback+0x10>)
1000e44e:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e450:	2000      	movs	r0, #0
1000e452:	e000      	b.n	1000e456 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e454:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e456:	4770      	bx	lr
1000e458:	1001af60 	.word	0x1001af60

1000e45c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e45c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e45e:	4a18      	ldr	r2, [pc, #96]	; (1000e4c0 <gpio1_combined_isr_handler+0x64>)
1000e460:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e462:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e464:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e466:	2180      	movs	r1, #128	; 0x80
1000e468:	0209      	lsls	r1, r1, #8
1000e46a:	4301      	orrs	r1, r0
1000e46c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e46e:	0010      	movs	r0, r2
1000e470:	4d14      	ldr	r5, [pc, #80]	; (1000e4c4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e472:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e474:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e476:	05db      	lsls	r3, r3, #23
1000e478:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e47a:	d011      	beq.n	1000e4a0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e47c:	b2db      	uxtb	r3, r3
1000e47e:	4259      	negs	r1, r3
1000e480:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e482:	2b01      	cmp	r3, #1
1000e484:	d006      	beq.n	1000e494 <gpio1_combined_isr_handler+0x38>
1000e486:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e488:	085b      	lsrs	r3, r3, #1
				index++;
1000e48a:	3101      	adds	r1, #1
1000e48c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e48e:	2b01      	cmp	r3, #1
1000e490:	d1fa      	bne.n	1000e488 <gpio1_combined_isr_handler+0x2c>
1000e492:	e000      	b.n	1000e496 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e494:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e496:	0023      	movs	r3, r4
1000e498:	408b      	lsls	r3, r1
1000e49a:	b29b      	uxth	r3, r3
1000e49c:	8703      	strh	r3, [r0, #56]	; 0x38
1000e49e:	e003      	b.n	1000e4a8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e4a0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e4a2:	432b      	orrs	r3, r5
1000e4a4:	b29b      	uxth	r3, r3
1000e4a6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e4a8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e4aa:	05db      	lsls	r3, r3, #23
1000e4ac:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e4ae:	d1e2      	bne.n	1000e476 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e4b0:	2180      	movs	r1, #128	; 0x80
1000e4b2:	0049      	lsls	r1, r1, #1
1000e4b4:	3381      	adds	r3, #129	; 0x81
1000e4b6:	33ff      	adds	r3, #255	; 0xff
1000e4b8:	4a03      	ldr	r2, [pc, #12]	; (1000e4c8 <gpio1_combined_isr_handler+0x6c>)
1000e4ba:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e4bc:	bd30      	pop	{r4, r5, pc}
1000e4be:	46c0      	nop			; (mov r8, r8)
1000e4c0:	40011000 	.word	0x40011000
1000e4c4:	ffff8000 	.word	0xffff8000
1000e4c8:	e000e100 	.word	0xe000e100

1000e4cc <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e4cc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e4ce:	4a17      	ldr	r2, [pc, #92]	; (1000e52c <gpio0_combined_isr_handler+0x60>)
1000e4d0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e4d2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e4d4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e4d6:	2180      	movs	r1, #128	; 0x80
1000e4d8:	0209      	lsls	r1, r1, #8
1000e4da:	4301      	orrs	r1, r0
1000e4dc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e4de:	0010      	movs	r0, r2
1000e4e0:	4d13      	ldr	r5, [pc, #76]	; (1000e530 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e4e2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e4e4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e4e6:	05db      	lsls	r3, r3, #23
1000e4e8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e4ea:	d011      	beq.n	1000e510 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e4ec:	b2db      	uxtb	r3, r3
1000e4ee:	4259      	negs	r1, r3
1000e4f0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e4f2:	2b01      	cmp	r3, #1
1000e4f4:	d006      	beq.n	1000e504 <gpio0_combined_isr_handler+0x38>
1000e4f6:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e4f8:	085b      	lsrs	r3, r3, #1
				index++;
1000e4fa:	3101      	adds	r1, #1
1000e4fc:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e4fe:	2b01      	cmp	r3, #1
1000e500:	d1fa      	bne.n	1000e4f8 <gpio0_combined_isr_handler+0x2c>
1000e502:	e000      	b.n	1000e506 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e504:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e506:	0023      	movs	r3, r4
1000e508:	408b      	lsls	r3, r1
1000e50a:	b29b      	uxth	r3, r3
1000e50c:	8703      	strh	r3, [r0, #56]	; 0x38
1000e50e:	e003      	b.n	1000e518 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e510:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e512:	432b      	orrs	r3, r5
1000e514:	b29b      	uxth	r3, r3
1000e516:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e518:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e51a:	05db      	lsls	r3, r3, #23
1000e51c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e51e:	d1e2      	bne.n	1000e4e6 <gpio0_combined_isr_handler+0x1a>
1000e520:	2180      	movs	r1, #128	; 0x80
1000e522:	3381      	adds	r3, #129	; 0x81
1000e524:	33ff      	adds	r3, #255	; 0xff
1000e526:	4a03      	ldr	r2, [pc, #12]	; (1000e534 <gpio0_combined_isr_handler+0x68>)
1000e528:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e52a:	bd30      	pop	{r4, r5, pc}
1000e52c:	40010000 	.word	0x40010000
1000e530:	ffff8000 	.word	0xffff8000
1000e534:	e000e100 	.word	0xe000e100

1000e538 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e538:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e53a:	4b0c      	ldr	r3, [pc, #48]	; (1000e56c <PORT1_COMB_Handler+0x34>)
1000e53c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e53e:	0b5b      	lsrs	r3, r3, #13
1000e540:	d010      	beq.n	1000e564 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e542:	4b0b      	ldr	r3, [pc, #44]	; (1000e570 <PORT1_COMB_Handler+0x38>)
1000e544:	681b      	ldr	r3, [r3, #0]
1000e546:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e548:	4a08      	ldr	r2, [pc, #32]	; (1000e56c <PORT1_COMB_Handler+0x34>)
1000e54a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e54c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e54e:	0b5b      	lsrs	r3, r3, #13
1000e550:	035b      	lsls	r3, r3, #13
1000e552:	430b      	orrs	r3, r1
1000e554:	8713      	strh	r3, [r2, #56]	; 0x38
1000e556:	2180      	movs	r1, #128	; 0x80
1000e558:	0049      	lsls	r1, r1, #1
1000e55a:	23c0      	movs	r3, #192	; 0xc0
1000e55c:	005b      	lsls	r3, r3, #1
1000e55e:	4a05      	ldr	r2, [pc, #20]	; (1000e574 <PORT1_COMB_Handler+0x3c>)
1000e560:	50d1      	str	r1, [r2, r3]
1000e562:	e001      	b.n	1000e568 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e564:	4b04      	ldr	r3, [pc, #16]	; (1000e578 <PORT1_COMB_Handler+0x40>)
1000e566:	4798      	blx	r3
	}
}
1000e568:	bd10      	pop	{r4, pc}
1000e56a:	46c0      	nop			; (mov r8, r8)
1000e56c:	40011000 	.word	0x40011000
1000e570:	1001af58 	.word	0x1001af58
1000e574:	e000e100 	.word	0xe000e100
1000e578:	1000e45d 	.word	0x1000e45d

1000e57c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e57c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e57e:	2802      	cmp	r0, #2
1000e580:	d804      	bhi.n	1000e58c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e582:	0080      	lsls	r0, r0, #2
1000e584:	2200      	movs	r2, #0
1000e586:	4b02      	ldr	r3, [pc, #8]	; (1000e590 <wakeup_int_unregister_callback+0x14>)
1000e588:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e58a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e58c:	0018      	movs	r0, r3
1000e58e:	4770      	bx	lr
1000e590:	1001af70 	.word	0x1001af70

1000e594 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e594:	b510      	push	{r4, lr}
1000e596:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e598:	7803      	ldrb	r3, [r0, #0]
1000e59a:	2b01      	cmp	r3, #1
1000e59c:	d108      	bne.n	1000e5b0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e59e:	4b11      	ldr	r3, [pc, #68]	; (1000e5e4 <wakeup_active_event_callback+0x50>)
1000e5a0:	681b      	ldr	r3, [r3, #0]
1000e5a2:	2b00      	cmp	r3, #0
1000e5a4:	d000      	beq.n	1000e5a8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e5a6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e5a8:	23ff      	movs	r3, #255	; 0xff
1000e5aa:	6822      	ldr	r2, [r4, #0]
1000e5ac:	439a      	bics	r2, r3
1000e5ae:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e5b0:	7863      	ldrb	r3, [r4, #1]
1000e5b2:	2b01      	cmp	r3, #1
1000e5b4:	d108      	bne.n	1000e5c8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e5b6:	4b0b      	ldr	r3, [pc, #44]	; (1000e5e4 <wakeup_active_event_callback+0x50>)
1000e5b8:	685b      	ldr	r3, [r3, #4]
1000e5ba:	2b00      	cmp	r3, #0
1000e5bc:	d000      	beq.n	1000e5c0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e5be:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e5c0:	4b09      	ldr	r3, [pc, #36]	; (1000e5e8 <wakeup_active_event_callback+0x54>)
1000e5c2:	6822      	ldr	r2, [r4, #0]
1000e5c4:	4013      	ands	r3, r2
1000e5c6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e5c8:	78a3      	ldrb	r3, [r4, #2]
1000e5ca:	2b01      	cmp	r3, #1
1000e5cc:	d108      	bne.n	1000e5e0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e5ce:	4b05      	ldr	r3, [pc, #20]	; (1000e5e4 <wakeup_active_event_callback+0x50>)
1000e5d0:	689b      	ldr	r3, [r3, #8]
1000e5d2:	2b00      	cmp	r3, #0
1000e5d4:	d000      	beq.n	1000e5d8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e5d6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e5d8:	4b04      	ldr	r3, [pc, #16]	; (1000e5ec <wakeup_active_event_callback+0x58>)
1000e5da:	6822      	ldr	r2, [r4, #0]
1000e5dc:	4013      	ands	r3, r2
1000e5de:	6023      	str	r3, [r4, #0]
	}
}
1000e5e0:	bd10      	pop	{r4, pc}
1000e5e2:	46c0      	nop			; (mov r8, r8)
1000e5e4:	1001af70 	.word	0x1001af70
1000e5e8:	ffff00ff 	.word	0xffff00ff
1000e5ec:	ff00ffff 	.word	0xff00ffff

1000e5f0 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000e5f0:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000e5f2:	4b09      	ldr	r3, [pc, #36]	; (1000e618 <resume_cb+0x28>)
1000e5f4:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000e5f6:	4b09      	ldr	r3, [pc, #36]	; (1000e61c <resume_cb+0x2c>)
1000e5f8:	4798      	blx	r3
	sms_dualtimer_init();
1000e5fa:	4b09      	ldr	r3, [pc, #36]	; (1000e620 <resume_cb+0x30>)
1000e5fc:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000e5fe:	4b09      	ldr	r3, [pc, #36]	; (1000e624 <resume_cb+0x34>)
1000e600:	4798      	blx	r3
	sms_led_gpio_init();
1000e602:	4b09      	ldr	r3, [pc, #36]	; (1000e628 <resume_cb+0x38>)
1000e604:	4798      	blx	r3
	sms_spi_master_configure();
1000e606:	4b09      	ldr	r3, [pc, #36]	; (1000e62c <resume_cb+0x3c>)
1000e608:	4798      	blx	r3
	sms_i2c_master_configure();
1000e60a:	4b09      	ldr	r3, [pc, #36]	; (1000e630 <resume_cb+0x40>)
1000e60c:	4798      	blx	r3
	sms_mpu_configure_gpio();
1000e60e:	4b09      	ldr	r3, [pc, #36]	; (1000e634 <resume_cb+0x44>)
1000e610:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000e612:	4b09      	ldr	r3, [pc, #36]	; (1000e638 <resume_cb+0x48>)
1000e614:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e616:	bd10      	pop	{r4, pc}
1000e618:	1000de3d 	.word	0x1000de3d
1000e61c:	1000dba5 	.word	0x1000dba5
1000e620:	1000a775 	.word	0x1000a775
1000e624:	10008fe5 	.word	0x10008fe5
1000e628:	1000a291 	.word	0x1000a291
1000e62c:	1000a629 	.word	0x1000a629
1000e630:	10009371 	.word	0x10009371
1000e634:	10009505 	.word	0x10009505
1000e638:	100092d1 	.word	0x100092d1

1000e63c <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e63c:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000e63e:	2300      	movs	r3, #0
1000e640:	4a09      	ldr	r2, [pc, #36]	; (1000e668 <sms_init_variables+0x2c>)
1000e642:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000e644:	4a09      	ldr	r2, [pc, #36]	; (1000e66c <sms_init_variables+0x30>)
1000e646:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e648:	2101      	movs	r1, #1
1000e64a:	4a09      	ldr	r2, [pc, #36]	; (1000e670 <sms_init_variables+0x34>)
1000e64c:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000e64e:	4a09      	ldr	r2, [pc, #36]	; (1000e674 <sms_init_variables+0x38>)
1000e650:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000e652:	2201      	movs	r2, #1
1000e654:	4252      	negs	r2, r2
1000e656:	4b08      	ldr	r3, [pc, #32]	; (1000e678 <sms_init_variables+0x3c>)
1000e658:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000e65a:	4b08      	ldr	r3, [pc, #32]	; (1000e67c <sms_init_variables+0x40>)
1000e65c:	4798      	blx	r3
	sms_button_init_variables();
1000e65e:	4b08      	ldr	r3, [pc, #32]	; (1000e680 <sms_init_variables+0x44>)
1000e660:	4798      	blx	r3
	sms_pressure_init_variables();
1000e662:	4b08      	ldr	r3, [pc, #32]	; (1000e684 <sms_init_variables+0x48>)
1000e664:	4798      	blx	r3
}
1000e666:	bd10      	pop	{r4, pc}
1000e668:	1001a0cc 	.word	0x1001a0cc
1000e66c:	1001a2db 	.word	0x1001a2db
1000e670:	1001a1a8 	.word	0x1001a1a8
1000e674:	1001a1a9 	.word	0x1001a1a9
1000e678:	1001a1a4 	.word	0x1001a1a4
1000e67c:	10008a01 	.word	0x10008a01
1000e680:	10008fbd 	.word	0x10008fbd
1000e684:	1000a32d 	.word	0x1000a32d

1000e688 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000e688:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e68a:	b087      	sub	sp, #28
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e68c:	2210      	movs	r2, #16
1000e68e:	4bb2      	ldr	r3, [pc, #712]	; (1000e958 <main+0x2d0>)
1000e690:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e692:	4bb2      	ldr	r3, [pc, #712]	; (1000e95c <main+0x2d4>)
1000e694:	4798      	blx	r3
	gpio_init(); // GPIO
1000e696:	4bb2      	ldr	r3, [pc, #712]	; (1000e960 <main+0x2d8>)
1000e698:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e69a:	4bb2      	ldr	r3, [pc, #712]	; (1000e964 <main+0x2dc>)
1000e69c:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e69e:	4bb2      	ldr	r3, [pc, #712]	; (1000e968 <main+0x2e0>)
1000e6a0:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e6a2:	4bb2      	ldr	r3, [pc, #712]	; (1000e96c <main+0x2e4>)
1000e6a4:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e6a6:	4bb2      	ldr	r3, [pc, #712]	; (1000e970 <main+0x2e8>)
1000e6a8:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000e6aa:	4bb2      	ldr	r3, [pc, #712]	; (1000e974 <main+0x2ec>)
1000e6ac:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000e6ae:	4bb2      	ldr	r3, [pc, #712]	; (1000e978 <main+0x2f0>)
1000e6b0:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000e6b2:	4bb2      	ldr	r3, [pc, #712]	; (1000e97c <main+0x2f4>)
1000e6b4:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000e6b6:	4bb2      	ldr	r3, [pc, #712]	; (1000e980 <main+0x2f8>)
1000e6b8:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000e6ba:	4bb2      	ldr	r3, [pc, #712]	; (1000e984 <main+0x2fc>)
1000e6bc:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000e6be:	4bb2      	ldr	r3, [pc, #712]	; (1000e988 <main+0x300>)
1000e6c0:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e6c2:	2000      	movs	r0, #0
1000e6c4:	4bb1      	ldr	r3, [pc, #708]	; (1000e98c <main+0x304>)
1000e6c6:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e6c8:	4bb1      	ldr	r3, [pc, #708]	; (1000e990 <main+0x308>)
1000e6ca:	4798      	blx	r3
	sms_pressure_define_services();
1000e6cc:	4bb1      	ldr	r3, [pc, #708]	; (1000e994 <main+0x30c>)
1000e6ce:	4798      	blx	r3
	sms_mpu_define_services();
1000e6d0:	4bb1      	ldr	r3, [pc, #708]	; (1000e998 <main+0x310>)
1000e6d2:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e6d4:	48b1      	ldr	r0, [pc, #708]	; (1000e99c <main+0x314>)
1000e6d6:	4bb2      	ldr	r3, [pc, #712]	; (1000e9a0 <main+0x318>)
1000e6d8:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000e6da:	49b2      	ldr	r1, [pc, #712]	; (1000e9a4 <main+0x31c>)
1000e6dc:	2000      	movs	r0, #0
1000e6de:	4bb2      	ldr	r3, [pc, #712]	; (1000e9a8 <main+0x320>)
1000e6e0:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e6e2:	4bb2      	ldr	r3, [pc, #712]	; (1000e9ac <main+0x324>)
1000e6e4:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000e6e6:	4bb2      	ldr	r3, [pc, #712]	; (1000e9b0 <main+0x328>)
1000e6e8:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e6ea:	4ab2      	ldr	r2, [pc, #712]	; (1000e9b4 <main+0x32c>)
1000e6ec:	2100      	movs	r1, #0
1000e6ee:	2000      	movs	r0, #0
1000e6f0:	4cb1      	ldr	r4, [pc, #708]	; (1000e9b8 <main+0x330>)
1000e6f2:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e6f4:	4ab1      	ldr	r2, [pc, #708]	; (1000e9bc <main+0x334>)
1000e6f6:	2102      	movs	r1, #2
1000e6f8:	2000      	movs	r0, #0
1000e6fa:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e6fc:	2100      	movs	r1, #0
1000e6fe:	2000      	movs	r0, #0
1000e700:	4baf      	ldr	r3, [pc, #700]	; (1000e9c0 <main+0x338>)
1000e702:	4798      	blx	r3

	if(sms_mpu_check()) {
1000e704:	4baf      	ldr	r3, [pc, #700]	; (1000e9c4 <main+0x33c>)
1000e706:	4798      	blx	r3
1000e708:	2800      	cmp	r0, #0
1000e70a:	d005      	beq.n	1000e718 <main+0x90>
		DBG_LOG("MPU not here...");
1000e70c:	48ae      	ldr	r0, [pc, #696]	; (1000e9c8 <main+0x340>)
1000e70e:	4baf      	ldr	r3, [pc, #700]	; (1000e9cc <main+0x344>)
1000e710:	4798      	blx	r3
1000e712:	48af      	ldr	r0, [pc, #700]	; (1000e9d0 <main+0x348>)
1000e714:	4baf      	ldr	r3, [pc, #700]	; (1000e9d4 <main+0x34c>)
1000e716:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.config.gyro_bias, mpu_device.config.accel_bias);
1000e718:	4caf      	ldr	r4, [pc, #700]	; (1000e9d8 <main+0x350>)
1000e71a:	0020      	movs	r0, r4
1000e71c:	380c      	subs	r0, #12
1000e71e:	0021      	movs	r1, r4
1000e720:	4bae      	ldr	r3, [pc, #696]	; (1000e9dc <main+0x354>)
1000e722:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(mpu_device.config.gyro_bias[0] * 10000), (uint32_t)(mpu_device.config.gyro_bias[1] * 10000), (uint32_t)(mpu_device.config.gyro_bias[2] * 10000), (uint32_t)(mpu_device.config.accel_bias[0] * 10000), (uint32_t)(mpu_device.config.accel_bias[1] * 10000), (uint32_t)(mpu_device.config.accel_bias[2] * 10000));
1000e724:	48a8      	ldr	r0, [pc, #672]	; (1000e9c8 <main+0x340>)
1000e726:	4ba9      	ldr	r3, [pc, #676]	; (1000e9cc <main+0x344>)
1000e728:	4798      	blx	r3
1000e72a:	3c28      	subs	r4, #40	; 0x28
1000e72c:	4eac      	ldr	r6, [pc, #688]	; (1000e9e0 <main+0x358>)
1000e72e:	49ad      	ldr	r1, [pc, #692]	; (1000e9e4 <main+0x35c>)
1000e730:	6a60      	ldr	r0, [r4, #36]	; 0x24
1000e732:	47b0      	blx	r6
1000e734:	4dac      	ldr	r5, [pc, #688]	; (1000e9e8 <main+0x360>)
1000e736:	47a8      	blx	r5
1000e738:	0007      	movs	r7, r0
1000e73a:	49aa      	ldr	r1, [pc, #680]	; (1000e9e4 <main+0x35c>)
1000e73c:	6a20      	ldr	r0, [r4, #32]
1000e73e:	47b0      	blx	r6
1000e740:	47a8      	blx	r5
1000e742:	9004      	str	r0, [sp, #16]
1000e744:	49a7      	ldr	r1, [pc, #668]	; (1000e9e4 <main+0x35c>)
1000e746:	69e0      	ldr	r0, [r4, #28]
1000e748:	47b0      	blx	r6
1000e74a:	47a8      	blx	r5
1000e74c:	9005      	str	r0, [sp, #20]
1000e74e:	49a5      	ldr	r1, [pc, #660]	; (1000e9e4 <main+0x35c>)
1000e750:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000e752:	47b0      	blx	r6
1000e754:	47a8      	blx	r5
1000e756:	9002      	str	r0, [sp, #8]
1000e758:	49a2      	ldr	r1, [pc, #648]	; (1000e9e4 <main+0x35c>)
1000e75a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000e75c:	47b0      	blx	r6
1000e75e:	47a8      	blx	r5
1000e760:	9001      	str	r0, [sp, #4]
1000e762:	49a0      	ldr	r1, [pc, #640]	; (1000e9e4 <main+0x35c>)
1000e764:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000e766:	47b0      	blx	r6
1000e768:	47a8      	blx	r5
1000e76a:	9000      	str	r0, [sp, #0]
1000e76c:	003b      	movs	r3, r7
1000e76e:	9a04      	ldr	r2, [sp, #16]
1000e770:	9905      	ldr	r1, [sp, #20]
1000e772:	489e      	ldr	r0, [pc, #632]	; (1000e9ec <main+0x364>)
1000e774:	4c97      	ldr	r4, [pc, #604]	; (1000e9d4 <main+0x34c>)
1000e776:	47a0      	blx	r4
	
	sms_mpu_initialize();
1000e778:	4b9d      	ldr	r3, [pc, #628]	; (1000e9f0 <main+0x368>)
1000e77a:	4798      	blx	r3
	//DBG_LOG("MPU-9250 initialized...");
	
	if(sms_mpu_comp_check()) {
1000e77c:	4b9d      	ldr	r3, [pc, #628]	; (1000e9f4 <main+0x36c>)
1000e77e:	4798      	blx	r3
1000e780:	2800      	cmp	r0, #0
1000e782:	d005      	beq.n	1000e790 <main+0x108>
		DBG_LOG("Compass not here...");
1000e784:	4890      	ldr	r0, [pc, #576]	; (1000e9c8 <main+0x340>)
1000e786:	4b91      	ldr	r3, [pc, #580]	; (1000e9cc <main+0x344>)
1000e788:	4798      	blx	r3
1000e78a:	489b      	ldr	r0, [pc, #620]	; (1000e9f8 <main+0x370>)
1000e78c:	4b91      	ldr	r3, [pc, #580]	; (1000e9d4 <main+0x34c>)
1000e78e:	4798      	blx	r3
	}
	
	sms_mpu_comp_initialize(mpu_device.config.mag_calibration);
1000e790:	489a      	ldr	r0, [pc, #616]	; (1000e9fc <main+0x374>)
1000e792:	4b9b      	ldr	r3, [pc, #620]	; (1000ea00 <main+0x378>)
1000e794:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000e796:	2101      	movs	r1, #1
1000e798:	2001      	movs	r0, #1
1000e79a:	4b89      	ldr	r3, [pc, #548]	; (1000e9c0 <main+0x338>)
1000e79c:	4798      	blx	r3
	sms_sensors_interrupt_toggle(true, false);
1000e79e:	2100      	movs	r1, #0
1000e7a0:	2001      	movs	r0, #1
1000e7a2:	4b98      	ldr	r3, [pc, #608]	; (1000ea04 <main+0x37c>)
1000e7a4:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000e7a6:	4e98      	ldr	r6, [pc, #608]	; (1000ea08 <main+0x380>)
1000e7a8:	4c98      	ldr	r4, [pc, #608]	; (1000ea0c <main+0x384>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000e7aa:	4d87      	ldr	r5, [pc, #540]	; (1000e9c8 <main+0x340>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000e7ac:	6830      	ldr	r0, [r6, #0]
1000e7ae:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000e7b0:	2800      	cmp	r0, #0
1000e7b2:	d000      	beq.n	1000e7b6 <main+0x12e>
1000e7b4:	e0b6      	b.n	1000e924 <main+0x29c>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000e7b6:	4b96      	ldr	r3, [pc, #600]	; (1000ea10 <main+0x388>)
1000e7b8:	78db      	ldrb	r3, [r3, #3]
1000e7ba:	2b00      	cmp	r3, #0
1000e7bc:	d00b      	beq.n	1000e7d6 <main+0x14e>
				DBG_LOG("Btn0 int... ");
1000e7be:	4882      	ldr	r0, [pc, #520]	; (1000e9c8 <main+0x340>)
1000e7c0:	4b82      	ldr	r3, [pc, #520]	; (1000e9cc <main+0x344>)
1000e7c2:	4798      	blx	r3
1000e7c4:	4893      	ldr	r0, [pc, #588]	; (1000ea14 <main+0x38c>)
1000e7c6:	4b83      	ldr	r3, [pc, #524]	; (1000e9d4 <main+0x34c>)
1000e7c8:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e7ca:	2000      	movs	r0, #0
1000e7cc:	4b92      	ldr	r3, [pc, #584]	; (1000ea18 <main+0x390>)
1000e7ce:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000e7d0:	2200      	movs	r2, #0
1000e7d2:	4b8f      	ldr	r3, [pc, #572]	; (1000ea10 <main+0x388>)
1000e7d4:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000e7d6:	4b8e      	ldr	r3, [pc, #568]	; (1000ea10 <main+0x388>)
1000e7d8:	7a5b      	ldrb	r3, [r3, #9]
1000e7da:	2b00      	cmp	r3, #0
1000e7dc:	d00b      	beq.n	1000e7f6 <main+0x16e>
				DBG_LOG("Btn1 int... ");
1000e7de:	487a      	ldr	r0, [pc, #488]	; (1000e9c8 <main+0x340>)
1000e7e0:	4b7a      	ldr	r3, [pc, #488]	; (1000e9cc <main+0x344>)
1000e7e2:	4798      	blx	r3
1000e7e4:	488d      	ldr	r0, [pc, #564]	; (1000ea1c <main+0x394>)
1000e7e6:	4b7b      	ldr	r3, [pc, #492]	; (1000e9d4 <main+0x34c>)
1000e7e8:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e7ea:	2001      	movs	r0, #1
1000e7ec:	4b8a      	ldr	r3, [pc, #552]	; (1000ea18 <main+0x390>)
1000e7ee:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000e7f0:	2200      	movs	r2, #0
1000e7f2:	4b87      	ldr	r3, [pc, #540]	; (1000ea10 <main+0x388>)
1000e7f4:	725a      	strb	r2, [r3, #9]
			}
			if(mpu_device.interrupt.new_gyro) {
1000e7f6:	2371      	movs	r3, #113	; 0x71
1000e7f8:	4a89      	ldr	r2, [pc, #548]	; (1000ea20 <main+0x398>)
1000e7fa:	5cd3      	ldrb	r3, [r2, r3]
1000e7fc:	2b00      	cmp	r3, #0
1000e7fe:	d015      	beq.n	1000e82c <main+0x1a4>
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000e800:	2101      	movs	r1, #1
1000e802:	200e      	movs	r0, #14
1000e804:	4f87      	ldr	r7, [pc, #540]	; (1000ea24 <main+0x39c>)
1000e806:	47b8      	blx	r7
				DBG_LOG("MPU int (%ld)... ", cnt++);
1000e808:	486f      	ldr	r0, [pc, #444]	; (1000e9c8 <main+0x340>)
1000e80a:	4b70      	ldr	r3, [pc, #448]	; (1000e9cc <main+0x344>)
1000e80c:	4798      	blx	r3
1000e80e:	4b86      	ldr	r3, [pc, #536]	; (1000ea28 <main+0x3a0>)
1000e810:	6819      	ldr	r1, [r3, #0]
1000e812:	1c4a      	adds	r2, r1, #1
1000e814:	601a      	str	r2, [r3, #0]
1000e816:	4885      	ldr	r0, [pc, #532]	; (1000ea2c <main+0x3a4>)
1000e818:	4b6e      	ldr	r3, [pc, #440]	; (1000e9d4 <main+0x34c>)
1000e81a:	4798      	blx	r3
				sms_mpu_poll_data();
1000e81c:	4b84      	ldr	r3, [pc, #528]	; (1000ea30 <main+0x3a8>)
1000e81e:	4798      	blx	r3
				mpu_device.interrupt.new_gyro = false;
1000e820:	2100      	movs	r1, #0
1000e822:	2371      	movs	r3, #113	; 0x71
1000e824:	4a7e      	ldr	r2, [pc, #504]	; (1000ea20 <main+0x398>)
1000e826:	54d1      	strb	r1, [r2, r3]
				//mpu_device.interrupt.rts = true;
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000e828:	200e      	movs	r0, #14
1000e82a:	47b8      	blx	r7
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000e82c:	2329      	movs	r3, #41	; 0x29
1000e82e:	4a81      	ldr	r2, [pc, #516]	; (1000ea34 <main+0x3ac>)
1000e830:	5cd3      	ldrb	r3, [r2, r3]
1000e832:	2b00      	cmp	r3, #0
1000e834:	d002      	beq.n	1000e83c <main+0x1b4>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000e836:	2100      	movs	r1, #0
1000e838:	2329      	movs	r3, #41	; 0x29
1000e83a:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000e83c:	4b7e      	ldr	r3, [pc, #504]	; (1000ea38 <main+0x3b0>)
1000e83e:	789b      	ldrb	r3, [r3, #2]
1000e840:	2b00      	cmp	r3, #0
1000e842:	d00d      	beq.n	1000e860 <main+0x1d8>
				DBG_LOG("Timer1 int... ");
1000e844:	4860      	ldr	r0, [pc, #384]	; (1000e9c8 <main+0x340>)
1000e846:	4b61      	ldr	r3, [pc, #388]	; (1000e9cc <main+0x344>)
1000e848:	4798      	blx	r3
1000e84a:	487c      	ldr	r0, [pc, #496]	; (1000ea3c <main+0x3b4>)
1000e84c:	4b61      	ldr	r3, [pc, #388]	; (1000e9d4 <main+0x34c>)
1000e84e:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000e850:	2000      	movs	r0, #0
1000e852:	4b7b      	ldr	r3, [pc, #492]	; (1000ea40 <main+0x3b8>)
1000e854:	4798      	blx	r3
				sms_dualtimer1_fn();
1000e856:	4b7b      	ldr	r3, [pc, #492]	; (1000ea44 <main+0x3bc>)
1000e858:	4798      	blx	r3
				timer1_instance.new_int = false;
1000e85a:	2200      	movs	r2, #0
1000e85c:	4b76      	ldr	r3, [pc, #472]	; (1000ea38 <main+0x3b0>)
1000e85e:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000e860:	4b79      	ldr	r3, [pc, #484]	; (1000ea48 <main+0x3c0>)
1000e862:	789b      	ldrb	r3, [r3, #2]
1000e864:	2b00      	cmp	r3, #0
1000e866:	d00d      	beq.n	1000e884 <main+0x1fc>
				DBG_LOG("Timer2 int... ");
1000e868:	4857      	ldr	r0, [pc, #348]	; (1000e9c8 <main+0x340>)
1000e86a:	4b58      	ldr	r3, [pc, #352]	; (1000e9cc <main+0x344>)
1000e86c:	4798      	blx	r3
1000e86e:	4877      	ldr	r0, [pc, #476]	; (1000ea4c <main+0x3c4>)
1000e870:	4b58      	ldr	r3, [pc, #352]	; (1000e9d4 <main+0x34c>)
1000e872:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000e874:	2001      	movs	r0, #1
1000e876:	4b72      	ldr	r3, [pc, #456]	; (1000ea40 <main+0x3b8>)
1000e878:	4798      	blx	r3
				sms_dualtimer2_fn();
1000e87a:	4b75      	ldr	r3, [pc, #468]	; (1000ea50 <main+0x3c8>)
1000e87c:	4798      	blx	r3
				timer2_instance.new_int = false;
1000e87e:	2200      	movs	r2, #0
1000e880:	4b71      	ldr	r3, [pc, #452]	; (1000ea48 <main+0x3c0>)
1000e882:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(mpu_device.interrupt.rts) {
1000e884:	2374      	movs	r3, #116	; 0x74
1000e886:	4a66      	ldr	r2, [pc, #408]	; (1000ea20 <main+0x398>)
1000e888:	5cd3      	ldrb	r3, [r2, r3]
1000e88a:	2b00      	cmp	r3, #0
1000e88c:	d021      	beq.n	1000e8d2 <main+0x24a>
				DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
1000e88e:	484e      	ldr	r0, [pc, #312]	; (1000e9c8 <main+0x340>)
1000e890:	4b4e      	ldr	r3, [pc, #312]	; (1000e9cc <main+0x344>)
1000e892:	4798      	blx	r3
1000e894:	2329      	movs	r3, #41	; 0x29
1000e896:	4a67      	ldr	r2, [pc, #412]	; (1000ea34 <main+0x3ac>)
1000e898:	5cd1      	ldrb	r1, [r2, r3]
1000e89a:	b2c9      	uxtb	r1, r1
1000e89c:	4f2e      	ldr	r7, [pc, #184]	; (1000e958 <main+0x2d0>)
1000e89e:	787a      	ldrb	r2, [r7, #1]
1000e8a0:	b2d2      	uxtb	r2, r2
1000e8a2:	486c      	ldr	r0, [pc, #432]	; (1000ea54 <main+0x3cc>)
1000e8a4:	4b4b      	ldr	r3, [pc, #300]	; (1000e9d4 <main+0x34c>)
1000e8a6:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e8a8:	2101      	movs	r1, #1
1000e8aa:	200f      	movs	r0, #15
1000e8ac:	4b5d      	ldr	r3, [pc, #372]	; (1000ea24 <main+0x39c>)
1000e8ae:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e8b0:	787b      	ldrb	r3, [r7, #1]
1000e8b2:	2b00      	cmp	r3, #0
1000e8b4:	d103      	bne.n	1000e8be <main+0x236>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e8b6:	2002      	movs	r0, #2
1000e8b8:	4b67      	ldr	r3, [pc, #412]	; (1000ea58 <main+0x3d0>)
1000e8ba:	4798      	blx	r3
1000e8bc:	e002      	b.n	1000e8c4 <main+0x23c>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e8be:	4867      	ldr	r0, [pc, #412]	; (1000ea5c <main+0x3d4>)
1000e8c0:	4b44      	ldr	r3, [pc, #272]	; (1000e9d4 <main+0x34c>)
1000e8c2:	4798      	blx	r3
				}
				mpu_device.interrupt.rts = false;
1000e8c4:	2100      	movs	r1, #0
1000e8c6:	2374      	movs	r3, #116	; 0x74
1000e8c8:	4a55      	ldr	r2, [pc, #340]	; (1000ea20 <main+0x398>)
1000e8ca:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e8cc:	200f      	movs	r0, #15
1000e8ce:	4b55      	ldr	r3, [pc, #340]	; (1000ea24 <main+0x39c>)
1000e8d0:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000e8d2:	232a      	movs	r3, #42	; 0x2a
1000e8d4:	4a57      	ldr	r2, [pc, #348]	; (1000ea34 <main+0x3ac>)
1000e8d6:	5cd3      	ldrb	r3, [r2, r3]
1000e8d8:	2b00      	cmp	r3, #0
1000e8da:	d100      	bne.n	1000e8de <main+0x256>
1000e8dc:	e766      	b.n	1000e7ac <main+0x124>
				DBG_LOG("Press sending (%d/%d)... ", mpu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e8de:	483a      	ldr	r0, [pc, #232]	; (1000e9c8 <main+0x340>)
1000e8e0:	4b3a      	ldr	r3, [pc, #232]	; (1000e9cc <main+0x344>)
1000e8e2:	4798      	blx	r3
1000e8e4:	2371      	movs	r3, #113	; 0x71
1000e8e6:	4a4e      	ldr	r2, [pc, #312]	; (1000ea20 <main+0x398>)
1000e8e8:	5cd1      	ldrb	r1, [r2, r3]
1000e8ea:	b2c9      	uxtb	r1, r1
1000e8ec:	4f1a      	ldr	r7, [pc, #104]	; (1000e958 <main+0x2d0>)
1000e8ee:	787a      	ldrb	r2, [r7, #1]
1000e8f0:	b2d2      	uxtb	r2, r2
1000e8f2:	485b      	ldr	r0, [pc, #364]	; (1000ea60 <main+0x3d8>)
1000e8f4:	4b37      	ldr	r3, [pc, #220]	; (1000e9d4 <main+0x34c>)
1000e8f6:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e8f8:	2101      	movs	r1, #1
1000e8fa:	200f      	movs	r0, #15
1000e8fc:	4b49      	ldr	r3, [pc, #292]	; (1000ea24 <main+0x39c>)
1000e8fe:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e900:	787b      	ldrb	r3, [r7, #1]
1000e902:	2b00      	cmp	r3, #0
1000e904:	d103      	bne.n	1000e90e <main+0x286>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e906:	2001      	movs	r0, #1
1000e908:	4b53      	ldr	r3, [pc, #332]	; (1000ea58 <main+0x3d0>)
1000e90a:	4798      	blx	r3
1000e90c:	e002      	b.n	1000e914 <main+0x28c>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e90e:	4853      	ldr	r0, [pc, #332]	; (1000ea5c <main+0x3d4>)
1000e910:	4b30      	ldr	r3, [pc, #192]	; (1000e9d4 <main+0x34c>)
1000e912:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000e914:	2100      	movs	r1, #0
1000e916:	232a      	movs	r3, #42	; 0x2a
1000e918:	4a46      	ldr	r2, [pc, #280]	; (1000ea34 <main+0x3ac>)
1000e91a:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e91c:	200f      	movs	r0, #15
1000e91e:	4b41      	ldr	r3, [pc, #260]	; (1000ea24 <main+0x39c>)
1000e920:	4798      	blx	r3
1000e922:	e743      	b.n	1000e7ac <main+0x124>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000e924:	2845      	cmp	r0, #69	; 0x45
1000e926:	d106      	bne.n	1000e936 <main+0x2ae>
			DBG_LOG("GAP timeout");
1000e928:	4827      	ldr	r0, [pc, #156]	; (1000e9c8 <main+0x340>)
1000e92a:	4b28      	ldr	r3, [pc, #160]	; (1000e9cc <main+0x344>)
1000e92c:	4798      	blx	r3
1000e92e:	484d      	ldr	r0, [pc, #308]	; (1000ea64 <main+0x3dc>)
1000e930:	4b28      	ldr	r3, [pc, #160]	; (1000e9d4 <main+0x34c>)
1000e932:	4798      	blx	r3
1000e934:	e73a      	b.n	1000e7ac <main+0x124>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000e936:	28d0      	cmp	r0, #208	; 0xd0
1000e938:	d106      	bne.n	1000e948 <main+0x2c0>
			DBG_LOG("Event get timeout");
1000e93a:	4823      	ldr	r0, [pc, #140]	; (1000e9c8 <main+0x340>)
1000e93c:	4b23      	ldr	r3, [pc, #140]	; (1000e9cc <main+0x344>)
1000e93e:	4798      	blx	r3
1000e940:	4849      	ldr	r0, [pc, #292]	; (1000ea68 <main+0x3e0>)
1000e942:	4b24      	ldr	r3, [pc, #144]	; (1000e9d4 <main+0x34c>)
1000e944:	4798      	blx	r3
1000e946:	e731      	b.n	1000e7ac <main+0x124>
		}
		else {
			DBG_LOG("BLE error occurred");
1000e948:	0028      	movs	r0, r5
1000e94a:	4b20      	ldr	r3, [pc, #128]	; (1000e9cc <main+0x344>)
1000e94c:	4798      	blx	r3
1000e94e:	4847      	ldr	r0, [pc, #284]	; (1000ea6c <main+0x3e4>)
1000e950:	4b20      	ldr	r3, [pc, #128]	; (1000e9d4 <main+0x34c>)
1000e952:	4798      	blx	r3
1000e954:	e72a      	b.n	1000e7ac <main+0x124>
1000e956:	46c0      	nop			; (mov r8, r8)
1000e958:	1001a1ac 	.word	0x1001a1ac
1000e95c:	1000deb1 	.word	0x1000deb1
1000e960:	1000b7dd 	.word	0x1000b7dd
1000e964:	1000dba5 	.word	0x1000dba5
1000e968:	1000e405 	.word	0x1000e405
1000e96c:	1000e63d 	.word	0x1000e63d
1000e970:	1000a775 	.word	0x1000a775
1000e974:	10008fe5 	.word	0x10008fe5
1000e978:	1000a291 	.word	0x1000a291
1000e97c:	10009371 	.word	0x10009371
1000e980:	1000a629 	.word	0x1000a629
1000e984:	10009505 	.word	0x10009505
1000e988:	100092d1 	.word	0x100092d1
1000e98c:	1000d32d 	.word	0x1000d32d
1000e990:	10009281 	.word	0x10009281
1000e994:	1000a519 	.word	0x1000a519
1000e998:	100095a1 	.word	0x100095a1
1000e99c:	1000e5f1 	.word	0x1000e5f1
1000e9a0:	1000e449 	.word	0x1000e449
1000e9a4:	1000a83d 	.word	0x1000a83d
1000e9a8:	1000a7b9 	.word	0x1000a7b9
1000e9ac:	1000908d 	.word	0x1000908d
1000e9b0:	10009551 	.word	0x10009551
1000e9b4:	10017508 	.word	0x10017508
1000e9b8:	1000d25d 	.word	0x1000d25d
1000e9bc:	10017554 	.word	0x10017554
1000e9c0:	10009239 	.word	0x10009239
1000e9c4:	1000a069 	.word	0x1000a069
1000e9c8:	10017414 	.word	0x10017414
1000e9cc:	100164cd 	.word	0x100164cd
1000e9d0:	10018224 	.word	0x10018224
1000e9d4:	100163ad 	.word	0x100163ad
1000e9d8:	1001a0f8 	.word	0x1001a0f8
1000e9dc:	10009715 	.word	0x10009715
1000e9e0:	10013d3d 	.word	0x10013d3d
1000e9e4:	461c4000 	.word	0x461c4000
1000e9e8:	10013651 	.word	0x10013651
1000e9ec:	10018234 	.word	0x10018234
1000e9f0:	10009be1 	.word	0x10009be1
1000e9f4:	10009bc9 	.word	0x10009bc9
1000e9f8:	10018270 	.word	0x10018270
1000e9fc:	1001a110 	.word	0x1001a110
1000ea00:	10009a8d 	.word	0x10009a8d
1000ea04:	1000a569 	.word	0x1000a569
1000ea08:	1001a1a4 	.word	0x1001a1a4
1000ea0c:	1000da39 	.word	0x1000da39
1000ea10:	1001a1bc 	.word	0x1001a1bc
1000ea14:	10018284 	.word	0x10018284
1000ea18:	100090e1 	.word	0x100090e1
1000ea1c:	10018294 	.word	0x10018294
1000ea20:	1001a0d0 	.word	0x1001a0d0
1000ea24:	1000b49d 	.word	0x1000b49d
1000ea28:	10019ff8 	.word	0x10019ff8
1000ea2c:	100182a4 	.word	0x100182a4
1000ea30:	1000a0f1 	.word	0x1000a0f1
1000ea34:	1001a240 	.word	0x1001a240
1000ea38:	1001a22c 	.word	0x1001a22c
1000ea3c:	100182b8 	.word	0x100182b8
1000ea40:	1000a831 	.word	0x1000a831
1000ea44:	1000a85d 	.word	0x1000a85d
1000ea48:	1001a2d8 	.word	0x1001a2d8
1000ea4c:	100182c8 	.word	0x100182c8
1000ea50:	1000aa81 	.word	0x1000aa81
1000ea54:	100182d8 	.word	0x100182d8
1000ea58:	10008c99 	.word	0x10008c99
1000ea5c:	100182f0 	.word	0x100182f0
1000ea60:	100182fc 	.word	0x100182fc
1000ea64:	10018318 	.word	0x10018318
1000ea68:	10018324 	.word	0x10018324
1000ea6c:	10018338 	.word	0x10018338

1000ea70 <internal_event_post>:
1000ea70:	b570      	push	{r4, r5, r6, lr}
1000ea72:	4d12      	ldr	r5, [pc, #72]	; (1000eabc <internal_event_post+0x4c>)
1000ea74:	682c      	ldr	r4, [r5, #0]
1000ea76:	2c00      	cmp	r4, #0
1000ea78:	d014      	beq.n	1000eaa4 <internal_event_post+0x34>
1000ea7a:	6826      	ldr	r6, [r4, #0]
1000ea7c:	60e2      	str	r2, [r4, #12]
1000ea7e:	602e      	str	r6, [r5, #0]
1000ea80:	2500      	movs	r5, #0
1000ea82:	4a0f      	ldr	r2, [pc, #60]	; (1000eac0 <internal_event_post+0x50>)
1000ea84:	8123      	strh	r3, [r4, #8]
1000ea86:	6813      	ldr	r3, [r2, #0]
1000ea88:	6025      	str	r5, [r4, #0]
1000ea8a:	80a0      	strh	r0, [r4, #4]
1000ea8c:	80e1      	strh	r1, [r4, #6]
1000ea8e:	42ab      	cmp	r3, r5
1000ea90:	d101      	bne.n	1000ea96 <internal_event_post+0x26>
1000ea92:	6014      	str	r4, [r2, #0]
1000ea94:	e011      	b.n	1000eaba <internal_event_post+0x4a>
1000ea96:	681a      	ldr	r2, [r3, #0]
1000ea98:	2a00      	cmp	r2, #0
1000ea9a:	d001      	beq.n	1000eaa0 <internal_event_post+0x30>
1000ea9c:	1c13      	adds	r3, r2, #0
1000ea9e:	e7fa      	b.n	1000ea96 <internal_event_post+0x26>
1000eaa0:	601c      	str	r4, [r3, #0]
1000eaa2:	e00a      	b.n	1000eaba <internal_event_post+0x4a>
1000eaa4:	b2c4      	uxtb	r4, r0
1000eaa6:	2c00      	cmp	r4, #0
1000eaa8:	d107      	bne.n	1000eaba <internal_event_post+0x4a>
1000eaaa:	4c06      	ldr	r4, [pc, #24]	; (1000eac4 <internal_event_post+0x54>)
1000eaac:	60e2      	str	r2, [r4, #12]
1000eaae:	2201      	movs	r2, #1
1000eab0:	8123      	strh	r3, [r4, #8]
1000eab2:	4b05      	ldr	r3, [pc, #20]	; (1000eac8 <internal_event_post+0x58>)
1000eab4:	80a0      	strh	r0, [r4, #4]
1000eab6:	80e1      	strh	r1, [r4, #6]
1000eab8:	701a      	strb	r2, [r3, #0]
1000eaba:	bd70      	pop	{r4, r5, r6, pc}
1000eabc:	1001a014 	.word	0x1001a014
1000eac0:	1001a010 	.word	0x1001a010
1000eac4:	10019ffc 	.word	0x10019ffc
1000eac8:	1001a00c 	.word	0x1001a00c

1000eacc <internal_event_init>:
1000eacc:	b510      	push	{r4, lr}
1000eace:	4b08      	ldr	r3, [pc, #32]	; (1000eaf0 <internal_event_init+0x24>)
1000ead0:	0900      	lsrs	r0, r0, #4
1000ead2:	0100      	lsls	r0, r0, #4
1000ead4:	681a      	ldr	r2, [r3, #0]
1000ead6:	1808      	adds	r0, r1, r0
1000ead8:	4281      	cmp	r1, r0
1000eada:	d003      	beq.n	1000eae4 <internal_event_init+0x18>
1000eadc:	600a      	str	r2, [r1, #0]
1000eade:	1c0a      	adds	r2, r1, #0
1000eae0:	3110      	adds	r1, #16
1000eae2:	e7f9      	b.n	1000ead8 <internal_event_init+0xc>
1000eae4:	601a      	str	r2, [r3, #0]
1000eae6:	2200      	movs	r2, #0
1000eae8:	4b02      	ldr	r3, [pc, #8]	; (1000eaf4 <internal_event_init+0x28>)
1000eaea:	601a      	str	r2, [r3, #0]
1000eaec:	bd10      	pop	{r4, pc}
1000eaee:	46c0      	nop			; (mov r8, r8)
1000eaf0:	1001a014 	.word	0x1001a014
1000eaf4:	1001a010 	.word	0x1001a010

1000eaf8 <special_events_handler>:
1000eaf8:	b538      	push	{r3, r4, r5, lr}
1000eafa:	4c1b      	ldr	r4, [pc, #108]	; (1000eb68 <special_events_handler+0x70>)
1000eafc:	1c03      	adds	r3, r0, #0
1000eafe:	8825      	ldrh	r5, [r4, #0]
1000eb00:	1c08      	adds	r0, r1, #0
1000eb02:	1c21      	adds	r1, r4, #0
1000eb04:	429d      	cmp	r5, r3
1000eb06:	d107      	bne.n	1000eb18 <special_events_handler+0x20>
1000eb08:	88a5      	ldrh	r5, [r4, #4]
1000eb0a:	4285      	cmp	r5, r0
1000eb0c:	d104      	bne.n	1000eb18 <special_events_handler+0x20>
1000eb0e:	2301      	movs	r3, #1
1000eb10:	425b      	negs	r3, r3
1000eb12:	8023      	strh	r3, [r4, #0]
1000eb14:	60a2      	str	r2, [r4, #8]
1000eb16:	e009      	b.n	1000eb2c <special_events_handler+0x34>
1000eb18:	884c      	ldrh	r4, [r1, #2]
1000eb1a:	429c      	cmp	r4, r3
1000eb1c:	d10a      	bne.n	1000eb34 <special_events_handler+0x3c>
1000eb1e:	888c      	ldrh	r4, [r1, #4]
1000eb20:	4284      	cmp	r4, r0
1000eb22:	d107      	bne.n	1000eb34 <special_events_handler+0x3c>
1000eb24:	2301      	movs	r3, #1
1000eb26:	425b      	negs	r3, r3
1000eb28:	804b      	strh	r3, [r1, #2]
1000eb2a:	608a      	str	r2, [r1, #8]
1000eb2c:	4b0f      	ldr	r3, [pc, #60]	; (1000eb6c <special_events_handler+0x74>)
1000eb2e:	4798      	blx	r3
1000eb30:	2001      	movs	r0, #1
1000eb32:	e017      	b.n	1000eb64 <special_events_handler+0x6c>
1000eb34:	490e      	ldr	r1, [pc, #56]	; (1000eb70 <special_events_handler+0x78>)
1000eb36:	428b      	cmp	r3, r1
1000eb38:	d00e      	beq.n	1000eb58 <special_events_handler+0x60>
1000eb3a:	490e      	ldr	r1, [pc, #56]	; (1000eb74 <special_events_handler+0x7c>)
1000eb3c:	428b      	cmp	r3, r1
1000eb3e:	d007      	beq.n	1000eb50 <special_events_handler+0x58>
1000eb40:	490d      	ldr	r1, [pc, #52]	; (1000eb78 <special_events_handler+0x80>)
1000eb42:	2000      	movs	r0, #0
1000eb44:	428b      	cmp	r3, r1
1000eb46:	d10d      	bne.n	1000eb64 <special_events_handler+0x6c>
1000eb48:	1c10      	adds	r0, r2, #0
1000eb4a:	4b0c      	ldr	r3, [pc, #48]	; (1000eb7c <special_events_handler+0x84>)
1000eb4c:	4798      	blx	r3
1000eb4e:	e7ef      	b.n	1000eb30 <special_events_handler+0x38>
1000eb50:	1c11      	adds	r1, r2, #0
1000eb52:	4b0b      	ldr	r3, [pc, #44]	; (1000eb80 <special_events_handler+0x88>)
1000eb54:	2200      	movs	r2, #0
1000eb56:	e002      	b.n	1000eb5e <special_events_handler+0x66>
1000eb58:	1c11      	adds	r1, r2, #0
1000eb5a:	2200      	movs	r2, #0
1000eb5c:	4b09      	ldr	r3, [pc, #36]	; (1000eb84 <special_events_handler+0x8c>)
1000eb5e:	4798      	blx	r3
1000eb60:	4243      	negs	r3, r0
1000eb62:	4158      	adcs	r0, r3
1000eb64:	bd38      	pop	{r3, r4, r5, pc}
1000eb66:	46c0      	nop			; (mov r8, r8)
1000eb68:	1001af7c 	.word	0x1001af7c
1000eb6c:	10010555 	.word	0x10010555
1000eb70:	00000e13 	.word	0x00000e13
1000eb74:	00000e15 	.word	0x00000e15
1000eb78:	00000e01 	.word	0x00000e01
1000eb7c:	100108c5 	.word	0x100108c5
1000eb80:	10010a85 	.word	0x10010a85
1000eb84:	10010b5d 	.word	0x10010b5d

1000eb88 <at_ble_event_get>:
1000eb88:	2300      	movs	r3, #0
1000eb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb8c:	b087      	sub	sp, #28
1000eb8e:	9204      	str	r2, [sp, #16]
1000eb90:	7003      	strb	r3, [r0, #0]
1000eb92:	9b04      	ldr	r3, [sp, #16]
1000eb94:	9003      	str	r0, [sp, #12]
1000eb96:	3b01      	subs	r3, #1
1000eb98:	1c0d      	adds	r5, r1, #0
1000eb9a:	9305      	str	r3, [sp, #20]
1000eb9c:	3303      	adds	r3, #3
1000eb9e:	d802      	bhi.n	1000eba6 <at_ble_event_get+0x1e>
1000eba0:	9804      	ldr	r0, [sp, #16]
1000eba2:	4bae      	ldr	r3, [pc, #696]	; (1000ee5c <at_ble_event_get+0x2d4>)
1000eba4:	4798      	blx	r3
1000eba6:	9b05      	ldr	r3, [sp, #20]
1000eba8:	4cad      	ldr	r4, [pc, #692]	; (1000ee60 <at_ble_event_get+0x2d8>)
1000ebaa:	3303      	adds	r3, #3
1000ebac:	d902      	bls.n	1000ebb4 <at_ble_event_get+0x2c>
1000ebae:	2300      	movs	r3, #0
1000ebb0:	9302      	str	r3, [sp, #8]
1000ebb2:	e015      	b.n	1000ebe0 <at_ble_event_get+0x58>
1000ebb4:	2300      	movs	r3, #0
1000ebb6:	9302      	str	r3, [sp, #8]
1000ebb8:	6823      	ldr	r3, [r4, #0]
1000ebba:	2b00      	cmp	r3, #0
1000ebbc:	d113      	bne.n	1000ebe6 <at_ble_event_get+0x5e>
1000ebbe:	9b02      	ldr	r3, [sp, #8]
1000ebc0:	2bd0      	cmp	r3, #208	; 0xd0
1000ebc2:	d100      	bne.n	1000ebc6 <at_ble_event_get+0x3e>
1000ebc4:	e2da      	b.n	1000f17c <at_ble_event_get+0x5f4>
1000ebc6:	9804      	ldr	r0, [sp, #16]
1000ebc8:	4ba6      	ldr	r3, [pc, #664]	; (1000ee64 <at_ble_event_get+0x2dc>)
1000ebca:	4798      	blx	r3
1000ebcc:	9002      	str	r0, [sp, #8]
1000ebce:	2802      	cmp	r0, #2
1000ebd0:	d1f2      	bne.n	1000ebb8 <at_ble_event_get+0x30>
1000ebd2:	e03f      	b.n	1000ec54 <at_ble_event_get+0xcc>
1000ebd4:	9804      	ldr	r0, [sp, #16]
1000ebd6:	4ba3      	ldr	r3, [pc, #652]	; (1000ee64 <at_ble_event_get+0x2dc>)
1000ebd8:	4798      	blx	r3
1000ebda:	9002      	str	r0, [sp, #8]
1000ebdc:	2802      	cmp	r0, #2
1000ebde:	d039      	beq.n	1000ec54 <at_ble_event_get+0xcc>
1000ebe0:	6823      	ldr	r3, [r4, #0]
1000ebe2:	2b00      	cmp	r3, #0
1000ebe4:	d0f6      	beq.n	1000ebd4 <at_ble_event_get+0x4c>
1000ebe6:	9b02      	ldr	r3, [sp, #8]
1000ebe8:	2bd0      	cmp	r3, #208	; 0xd0
1000ebea:	d100      	bne.n	1000ebee <at_ble_event_get+0x66>
1000ebec:	e2c6      	b.n	1000f17c <at_ble_event_get+0x5f4>
1000ebee:	9b02      	ldr	r3, [sp, #8]
1000ebf0:	3b03      	subs	r3, #3
1000ebf2:	1e5a      	subs	r2, r3, #1
1000ebf4:	4193      	sbcs	r3, r2
1000ebf6:	9a02      	ldr	r2, [sp, #8]
1000ebf8:	425b      	negs	r3, r3
1000ebfa:	401a      	ands	r2, r3
1000ebfc:	6823      	ldr	r3, [r4, #0]
1000ebfe:	9202      	str	r2, [sp, #8]
1000ec00:	2b00      	cmp	r3, #0
1000ec02:	d100      	bne.n	1000ec06 <at_ble_event_get+0x7e>
1000ec04:	e2c2      	b.n	1000f18c <at_ble_event_get+0x604>
1000ec06:	681a      	ldr	r2, [r3, #0]
1000ec08:	68de      	ldr	r6, [r3, #12]
1000ec0a:	6022      	str	r2, [r4, #0]
1000ec0c:	88da      	ldrh	r2, [r3, #6]
1000ec0e:	9201      	str	r2, [sp, #4]
1000ec10:	4a95      	ldr	r2, [pc, #596]	; (1000ee68 <at_ble_event_get+0x2e0>)
1000ec12:	889c      	ldrh	r4, [r3, #4]
1000ec14:	6811      	ldr	r1, [r2, #0]
1000ec16:	6013      	str	r3, [r2, #0]
1000ec18:	6019      	str	r1, [r3, #0]
1000ec1a:	4b94      	ldr	r3, [pc, #592]	; (1000ee6c <at_ble_event_get+0x2e4>)
1000ec1c:	781b      	ldrb	r3, [r3, #0]
1000ec1e:	2b01      	cmp	r3, #1
1000ec20:	d10f      	bne.n	1000ec42 <at_ble_event_get+0xba>
1000ec22:	4b93      	ldr	r3, [pc, #588]	; (1000ee70 <at_ble_event_get+0x2e8>)
1000ec24:	4a92      	ldr	r2, [pc, #584]	; (1000ee70 <at_ble_event_get+0x2e8>)
1000ec26:	8898      	ldrh	r0, [r3, #4]
1000ec28:	88d9      	ldrh	r1, [r3, #6]
1000ec2a:	68d2      	ldr	r2, [r2, #12]
1000ec2c:	891b      	ldrh	r3, [r3, #8]
1000ec2e:	4f91      	ldr	r7, [pc, #580]	; (1000ee74 <at_ble_event_get+0x2ec>)
1000ec30:	47b8      	blx	r7
1000ec32:	2210      	movs	r2, #16
1000ec34:	4b90      	ldr	r3, [pc, #576]	; (1000ee78 <at_ble_event_get+0x2f0>)
1000ec36:	488e      	ldr	r0, [pc, #568]	; (1000ee70 <at_ble_event_get+0x2e8>)
1000ec38:	2100      	movs	r1, #0
1000ec3a:	4798      	blx	r3
1000ec3c:	2300      	movs	r3, #0
1000ec3e:	4a8b      	ldr	r2, [pc, #556]	; (1000ee6c <at_ble_event_get+0x2e4>)
1000ec40:	7013      	strb	r3, [r2, #0]
1000ec42:	9b02      	ldr	r3, [sp, #8]
1000ec44:	2b00      	cmp	r3, #0
1000ec46:	d114      	bne.n	1000ec72 <at_ble_event_get+0xea>
1000ec48:	4b8c      	ldr	r3, [pc, #560]	; (1000ee7c <at_ble_event_get+0x2f4>)
1000ec4a:	429c      	cmp	r4, r3
1000ec4c:	d009      	beq.n	1000ec62 <at_ble_event_get+0xda>
1000ec4e:	4b8c      	ldr	r3, [pc, #560]	; (1000ee80 <at_ble_event_get+0x2f8>)
1000ec50:	429c      	cmp	r4, r3
1000ec52:	d127      	bne.n	1000eca4 <at_ble_event_get+0x11c>
1000ec54:	233a      	movs	r3, #58	; 0x3a
1000ec56:	9a03      	ldr	r2, [sp, #12]
1000ec58:	7013      	strb	r3, [r2, #0]
1000ec5a:	2300      	movs	r3, #0
1000ec5c:	9302      	str	r3, [sp, #8]
1000ec5e:	1c1d      	adds	r5, r3, #0
1000ec60:	e007      	b.n	1000ec72 <at_ble_event_get+0xea>
1000ec62:	9b01      	ldr	r3, [sp, #4]
1000ec64:	42a3      	cmp	r3, r4
1000ec66:	d000      	beq.n	1000ec6a <at_ble_event_get+0xe2>
1000ec68:	e28a      	b.n	1000f180 <at_ble_event_get+0x5f8>
1000ec6a:	2338      	movs	r3, #56	; 0x38
1000ec6c:	9a03      	ldr	r2, [sp, #12]
1000ec6e:	7013      	strb	r3, [r2, #0]
1000ec70:	602e      	str	r6, [r5, #0]
1000ec72:	9b03      	ldr	r3, [sp, #12]
1000ec74:	781b      	ldrb	r3, [r3, #0]
1000ec76:	2b3b      	cmp	r3, #59	; 0x3b
1000ec78:	d101      	bne.n	1000ec7e <at_ble_event_get+0xf6>
1000ec7a:	4b82      	ldr	r3, [pc, #520]	; (1000ee84 <at_ble_event_get+0x2fc>)
1000ec7c:	4798      	blx	r3
1000ec7e:	9b03      	ldr	r3, [sp, #12]
1000ec80:	781b      	ldrb	r3, [r3, #0]
1000ec82:	2b3b      	cmp	r3, #59	; 0x3b
1000ec84:	d003      	beq.n	1000ec8e <at_ble_event_get+0x106>
1000ec86:	9b05      	ldr	r3, [sp, #20]
1000ec88:	3303      	adds	r3, #3
1000ec8a:	d904      	bls.n	1000ec96 <at_ble_event_get+0x10e>
1000ec8c:	e283      	b.n	1000f196 <at_ble_event_get+0x60e>
1000ec8e:	9b02      	ldr	r3, [sp, #8]
1000ec90:	2b00      	cmp	r3, #0
1000ec92:	d088      	beq.n	1000eba6 <at_ble_event_get+0x1e>
1000ec94:	e7f7      	b.n	1000ec86 <at_ble_event_get+0xfe>
1000ec96:	9b02      	ldr	r3, [sp, #8]
1000ec98:	2bd0      	cmp	r3, #208	; 0xd0
1000ec9a:	d100      	bne.n	1000ec9e <at_ble_event_get+0x116>
1000ec9c:	e27b      	b.n	1000f196 <at_ble_event_get+0x60e>
1000ec9e:	4b7a      	ldr	r3, [pc, #488]	; (1000ee88 <at_ble_event_get+0x300>)
1000eca0:	4798      	blx	r3
1000eca2:	e278      	b.n	1000f196 <at_ble_event_get+0x60e>
1000eca4:	9b01      	ldr	r3, [sp, #4]
1000eca6:	2bbb      	cmp	r3, #187	; 0xbb
1000eca8:	d125      	bne.n	1000ecf6 <at_ble_event_get+0x16e>
1000ecaa:	2cbb      	cmp	r4, #187	; 0xbb
1000ecac:	d123      	bne.n	1000ecf6 <at_ble_event_get+0x16e>
1000ecae:	466b      	mov	r3, sp
1000ecb0:	891b      	ldrh	r3, [r3, #8]
1000ecb2:	80ab      	strh	r3, [r5, #4]
1000ecb4:	78b3      	ldrb	r3, [r6, #2]
1000ecb6:	7872      	ldrb	r2, [r6, #1]
1000ecb8:	78f0      	ldrb	r0, [r6, #3]
1000ecba:	021b      	lsls	r3, r3, #8
1000ecbc:	4313      	orrs	r3, r2
1000ecbe:	7971      	ldrb	r1, [r6, #5]
1000ecc0:	7932      	ldrb	r2, [r6, #4]
1000ecc2:	70a8      	strb	r0, [r5, #2]
1000ecc4:	4871      	ldr	r0, [pc, #452]	; (1000ee8c <at_ble_event_get+0x304>)
1000ecc6:	802b      	strh	r3, [r5, #0]
1000ecc8:	4283      	cmp	r3, r0
1000ecca:	d806      	bhi.n	1000ecda <at_ble_event_get+0x152>
1000eccc:	4a70      	ldr	r2, [pc, #448]	; (1000ee90 <at_ble_event_get+0x308>)
1000ecce:	4293      	cmp	r3, r2
1000ecd0:	d20b      	bcs.n	1000ecea <at_ble_event_get+0x162>
1000ecd2:	4a70      	ldr	r2, [pc, #448]	; (1000ee94 <at_ble_event_get+0x30c>)
1000ecd4:	4293      	cmp	r3, r2
1000ecd6:	d008      	beq.n	1000ecea <at_ble_event_get+0x162>
1000ecd8:	e009      	b.n	1000ecee <at_ble_event_get+0x166>
1000ecda:	486f      	ldr	r0, [pc, #444]	; (1000ee98 <at_ble_event_get+0x310>)
1000ecdc:	4283      	cmp	r3, r0
1000ecde:	d106      	bne.n	1000ecee <at_ble_event_get+0x166>
1000ece0:	020b      	lsls	r3, r1, #8
1000ece2:	4313      	orrs	r3, r2
1000ece4:	80ab      	strh	r3, [r5, #4]
1000ece6:	2337      	movs	r3, #55	; 0x37
1000ece8:	e002      	b.n	1000ecf0 <at_ble_event_get+0x168>
1000ecea:	2336      	movs	r3, #54	; 0x36
1000ecec:	e000      	b.n	1000ecf0 <at_ble_event_get+0x168>
1000ecee:	2300      	movs	r3, #0
1000ecf0:	9a03      	ldr	r2, [sp, #12]
1000ecf2:	7013      	strb	r3, [r2, #0]
1000ecf4:	e7bd      	b.n	1000ec72 <at_ble_event_get+0xea>
1000ecf6:	4b69      	ldr	r3, [pc, #420]	; (1000ee9c <at_ble_event_get+0x314>)
1000ecf8:	429c      	cmp	r4, r3
1000ecfa:	d100      	bne.n	1000ecfe <at_ble_event_get+0x176>
1000ecfc:	e144      	b.n	1000ef88 <at_ble_event_get+0x400>
1000ecfe:	d865      	bhi.n	1000edcc <at_ble_event_get+0x244>
1000ed00:	4b67      	ldr	r3, [pc, #412]	; (1000eea0 <at_ble_event_get+0x318>)
1000ed02:	429c      	cmp	r4, r3
1000ed04:	d100      	bne.n	1000ed08 <at_ble_event_get+0x180>
1000ed06:	e1d5      	b.n	1000f0b4 <at_ble_event_get+0x52c>
1000ed08:	d82f      	bhi.n	1000ed6a <at_ble_event_get+0x1e2>
1000ed0a:	4b66      	ldr	r3, [pc, #408]	; (1000eea4 <at_ble_event_get+0x31c>)
1000ed0c:	429c      	cmp	r4, r3
1000ed0e:	d100      	bne.n	1000ed12 <at_ble_event_get+0x18a>
1000ed10:	e1e0      	b.n	1000f0d4 <at_ble_event_get+0x54c>
1000ed12:	d813      	bhi.n	1000ed3c <at_ble_event_get+0x1b4>
1000ed14:	4b64      	ldr	r3, [pc, #400]	; (1000eea8 <at_ble_event_get+0x320>)
1000ed16:	429c      	cmp	r4, r3
1000ed18:	d100      	bne.n	1000ed1c <at_ble_event_get+0x194>
1000ed1a:	e1a3      	b.n	1000f064 <at_ble_event_get+0x4dc>
1000ed1c:	d804      	bhi.n	1000ed28 <at_ble_event_get+0x1a0>
1000ed1e:	2638      	movs	r6, #56	; 0x38
1000ed20:	42b4      	cmp	r4, r6
1000ed22:	d100      	bne.n	1000ed26 <at_ble_event_get+0x19e>
1000ed24:	e225      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ed26:	e117      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed28:	4b60      	ldr	r3, [pc, #384]	; (1000eeac <at_ble_event_get+0x324>)
1000ed2a:	429c      	cmp	r4, r3
1000ed2c:	d100      	bne.n	1000ed30 <at_ble_event_get+0x1a8>
1000ed2e:	e19f      	b.n	1000f070 <at_ble_event_get+0x4e8>
1000ed30:	33fe      	adds	r3, #254	; 0xfe
1000ed32:	33ff      	adds	r3, #255	; 0xff
1000ed34:	429c      	cmp	r4, r3
1000ed36:	d100      	bne.n	1000ed3a <at_ble_event_get+0x1b2>
1000ed38:	e1d3      	b.n	1000f0e2 <at_ble_event_get+0x55a>
1000ed3a:	e10d      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed3c:	4b5c      	ldr	r3, [pc, #368]	; (1000eeb0 <at_ble_event_get+0x328>)
1000ed3e:	429c      	cmp	r4, r3
1000ed40:	d100      	bne.n	1000ed44 <at_ble_event_get+0x1bc>
1000ed42:	e1a9      	b.n	1000f098 <at_ble_event_get+0x510>
1000ed44:	d808      	bhi.n	1000ed58 <at_ble_event_get+0x1d0>
1000ed46:	4b5b      	ldr	r3, [pc, #364]	; (1000eeb4 <at_ble_event_get+0x32c>)
1000ed48:	429c      	cmp	r4, r3
1000ed4a:	d100      	bne.n	1000ed4e <at_ble_event_get+0x1c6>
1000ed4c:	e196      	b.n	1000f07c <at_ble_event_get+0x4f4>
1000ed4e:	4b5a      	ldr	r3, [pc, #360]	; (1000eeb8 <at_ble_event_get+0x330>)
1000ed50:	429c      	cmp	r4, r3
1000ed52:	d100      	bne.n	1000ed56 <at_ble_event_get+0x1ce>
1000ed54:	e199      	b.n	1000f08a <at_ble_event_get+0x502>
1000ed56:	e0ff      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed58:	4b58      	ldr	r3, [pc, #352]	; (1000eebc <at_ble_event_get+0x334>)
1000ed5a:	429c      	cmp	r4, r3
1000ed5c:	d100      	bne.n	1000ed60 <at_ble_event_get+0x1d8>
1000ed5e:	e1a2      	b.n	1000f0a6 <at_ble_event_get+0x51e>
1000ed60:	4b57      	ldr	r3, [pc, #348]	; (1000eec0 <at_ble_event_get+0x338>)
1000ed62:	429c      	cmp	r4, r3
1000ed64:	d100      	bne.n	1000ed68 <at_ble_event_get+0x1e0>
1000ed66:	e1d4      	b.n	1000f112 <at_ble_event_get+0x58a>
1000ed68:	e0f6      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed6a:	4b56      	ldr	r3, [pc, #344]	; (1000eec4 <at_ble_event_get+0x33c>)
1000ed6c:	429c      	cmp	r4, r3
1000ed6e:	d100      	bne.n	1000ed72 <at_ble_event_get+0x1ea>
1000ed70:	e1c8      	b.n	1000f104 <at_ble_event_get+0x57c>
1000ed72:	d812      	bhi.n	1000ed9a <at_ble_event_get+0x212>
1000ed74:	4b54      	ldr	r3, [pc, #336]	; (1000eec8 <at_ble_event_get+0x340>)
1000ed76:	429c      	cmp	r4, r3
1000ed78:	d100      	bne.n	1000ed7c <at_ble_event_get+0x1f4>
1000ed7a:	e1d1      	b.n	1000f120 <at_ble_event_get+0x598>
1000ed7c:	d804      	bhi.n	1000ed88 <at_ble_event_get+0x200>
1000ed7e:	4b53      	ldr	r3, [pc, #332]	; (1000eecc <at_ble_event_get+0x344>)
1000ed80:	429c      	cmp	r4, r3
1000ed82:	d100      	bne.n	1000ed86 <at_ble_event_get+0x1fe>
1000ed84:	e19b      	b.n	1000f0be <at_ble_event_get+0x536>
1000ed86:	e0e7      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed88:	4b51      	ldr	r3, [pc, #324]	; (1000eed0 <at_ble_event_get+0x348>)
1000ed8a:	429c      	cmp	r4, r3
1000ed8c:	d100      	bne.n	1000ed90 <at_ble_event_get+0x208>
1000ed8e:	e1ad      	b.n	1000f0ec <at_ble_event_get+0x564>
1000ed90:	4b50      	ldr	r3, [pc, #320]	; (1000eed4 <at_ble_event_get+0x34c>)
1000ed92:	429c      	cmp	r4, r3
1000ed94:	d100      	bne.n	1000ed98 <at_ble_event_get+0x210>
1000ed96:	e1b0      	b.n	1000f0fa <at_ble_event_get+0x572>
1000ed98:	e0de      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ed9a:	4b4f      	ldr	r3, [pc, #316]	; (1000eed8 <at_ble_event_get+0x350>)
1000ed9c:	429c      	cmp	r4, r3
1000ed9e:	d100      	bne.n	1000eda2 <at_ble_event_get+0x21a>
1000eda0:	e0e0      	b.n	1000ef64 <at_ble_event_get+0x3dc>
1000eda2:	d809      	bhi.n	1000edb8 <at_ble_event_get+0x230>
1000eda4:	3b08      	subs	r3, #8
1000eda6:	429c      	cmp	r4, r3
1000eda8:	d100      	bne.n	1000edac <at_ble_event_get+0x224>
1000edaa:	e0d7      	b.n	1000ef5c <at_ble_event_get+0x3d4>
1000edac:	4b4b      	ldr	r3, [pc, #300]	; (1000eedc <at_ble_event_get+0x354>)
1000edae:	2639      	movs	r6, #57	; 0x39
1000edb0:	429c      	cmp	r4, r3
1000edb2:	d100      	bne.n	1000edb6 <at_ble_event_get+0x22e>
1000edb4:	e1dd      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000edb6:	e0cf      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000edb8:	23d1      	movs	r3, #209	; 0xd1
1000edba:	011b      	lsls	r3, r3, #4
1000edbc:	429c      	cmp	r4, r3
1000edbe:	d100      	bne.n	1000edc2 <at_ble_event_get+0x23a>
1000edc0:	e0d6      	b.n	1000ef70 <at_ble_event_get+0x3e8>
1000edc2:	4b47      	ldr	r3, [pc, #284]	; (1000eee0 <at_ble_event_get+0x358>)
1000edc4:	429c      	cmp	r4, r3
1000edc6:	d100      	bne.n	1000edca <at_ble_event_get+0x242>
1000edc8:	e0d8      	b.n	1000ef7c <at_ble_event_get+0x3f4>
1000edca:	e0c5      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000edcc:	4b45      	ldr	r3, [pc, #276]	; (1000eee4 <at_ble_event_get+0x35c>)
1000edce:	429c      	cmp	r4, r3
1000edd0:	d100      	bne.n	1000edd4 <at_ble_event_get+0x24c>
1000edd2:	e117      	b.n	1000f004 <at_ble_event_get+0x47c>
1000edd4:	d82e      	bhi.n	1000ee34 <at_ble_event_get+0x2ac>
1000edd6:	4b44      	ldr	r3, [pc, #272]	; (1000eee8 <at_ble_event_get+0x360>)
1000edd8:	429c      	cmp	r4, r3
1000edda:	d100      	bne.n	1000edde <at_ble_event_get+0x256>
1000eddc:	e13d      	b.n	1000f05a <at_ble_event_get+0x4d2>
1000edde:	d812      	bhi.n	1000ee06 <at_ble_event_get+0x27e>
1000ede0:	4b42      	ldr	r3, [pc, #264]	; (1000eeec <at_ble_event_get+0x364>)
1000ede2:	429c      	cmp	r4, r3
1000ede4:	d100      	bne.n	1000ede8 <at_ble_event_get+0x260>
1000ede6:	e0e8      	b.n	1000efba <at_ble_event_get+0x432>
1000ede8:	d804      	bhi.n	1000edf4 <at_ble_event_get+0x26c>
1000edea:	3b03      	subs	r3, #3
1000edec:	429c      	cmp	r4, r3
1000edee:	d100      	bne.n	1000edf2 <at_ble_event_get+0x26a>
1000edf0:	e0d0      	b.n	1000ef94 <at_ble_event_get+0x40c>
1000edf2:	e0b1      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000edf4:	4b3e      	ldr	r3, [pc, #248]	; (1000eef0 <at_ble_event_get+0x368>)
1000edf6:	429c      	cmp	r4, r3
1000edf8:	d100      	bne.n	1000edfc <at_ble_event_get+0x274>
1000edfa:	e0d0      	b.n	1000ef9e <at_ble_event_get+0x416>
1000edfc:	4b3d      	ldr	r3, [pc, #244]	; (1000eef4 <at_ble_event_get+0x36c>)
1000edfe:	429c      	cmp	r4, r3
1000ee00:	d100      	bne.n	1000ee04 <at_ble_event_get+0x27c>
1000ee02:	e0f9      	b.n	1000eff8 <at_ble_event_get+0x470>
1000ee04:	e0a8      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ee06:	4b3c      	ldr	r3, [pc, #240]	; (1000eef8 <at_ble_event_get+0x370>)
1000ee08:	429c      	cmp	r4, r3
1000ee0a:	d100      	bne.n	1000ee0e <at_ble_event_get+0x286>
1000ee0c:	e0db      	b.n	1000efc6 <at_ble_event_get+0x43e>
1000ee0e:	d808      	bhi.n	1000ee22 <at_ble_event_get+0x29a>
1000ee10:	4b3a      	ldr	r3, [pc, #232]	; (1000eefc <at_ble_event_get+0x374>)
1000ee12:	429c      	cmp	r4, r3
1000ee14:	d100      	bne.n	1000ee18 <at_ble_event_get+0x290>
1000ee16:	e11b      	b.n	1000f050 <at_ble_event_get+0x4c8>
1000ee18:	4b39      	ldr	r3, [pc, #228]	; (1000ef00 <at_ble_event_get+0x378>)
1000ee1a:	429c      	cmp	r4, r3
1000ee1c:	d100      	bne.n	1000ee20 <at_ble_event_get+0x298>
1000ee1e:	e0d8      	b.n	1000efd2 <at_ble_event_get+0x44a>
1000ee20:	e09a      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ee22:	4b38      	ldr	r3, [pc, #224]	; (1000ef04 <at_ble_event_get+0x37c>)
1000ee24:	429c      	cmp	r4, r3
1000ee26:	d100      	bne.n	1000ee2a <at_ble_event_get+0x2a2>
1000ee28:	e0d8      	b.n	1000efdc <at_ble_event_get+0x454>
1000ee2a:	4b37      	ldr	r3, [pc, #220]	; (1000ef08 <at_ble_event_get+0x380>)
1000ee2c:	429c      	cmp	r4, r3
1000ee2e:	d100      	bne.n	1000ee32 <at_ble_event_get+0x2aa>
1000ee30:	e0db      	b.n	1000efea <at_ble_event_get+0x462>
1000ee32:	e091      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ee34:	4b35      	ldr	r3, [pc, #212]	; (1000ef0c <at_ble_event_get+0x384>)
1000ee36:	429c      	cmp	r4, r3
1000ee38:	d100      	bne.n	1000ee3c <at_ble_event_get+0x2b4>
1000ee3a:	e0f7      	b.n	1000f02c <at_ble_event_get+0x4a4>
1000ee3c:	d876      	bhi.n	1000ef2c <at_ble_event_get+0x3a4>
1000ee3e:	4b34      	ldr	r3, [pc, #208]	; (1000ef10 <at_ble_event_get+0x388>)
1000ee40:	429c      	cmp	r4, r3
1000ee42:	d100      	bne.n	1000ee46 <at_ble_event_get+0x2be>
1000ee44:	e0f8      	b.n	1000f038 <at_ble_event_get+0x4b0>
1000ee46:	d869      	bhi.n	1000ef1c <at_ble_event_get+0x394>
1000ee48:	4b32      	ldr	r3, [pc, #200]	; (1000ef14 <at_ble_event_get+0x38c>)
1000ee4a:	429c      	cmp	r4, r3
1000ee4c:	d100      	bne.n	1000ee50 <at_ble_event_get+0x2c8>
1000ee4e:	e0e0      	b.n	1000f012 <at_ble_event_get+0x48a>
1000ee50:	4b31      	ldr	r3, [pc, #196]	; (1000ef18 <at_ble_event_get+0x390>)
1000ee52:	429c      	cmp	r4, r3
1000ee54:	d100      	bne.n	1000ee58 <at_ble_event_get+0x2d0>
1000ee56:	e0a9      	b.n	1000efac <at_ble_event_get+0x424>
1000ee58:	e07e      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ee5a:	46c0      	nop			; (mov r8, r8)
1000ee5c:	1001058d 	.word	0x1001058d
1000ee60:	1001a010 	.word	0x1001a010
1000ee64:	1000e1a1 	.word	0x1000e1a1
1000ee68:	1001a014 	.word	0x1001a014
1000ee6c:	1001a00c 	.word	0x1001a00c
1000ee70:	10019ffc 	.word	0x10019ffc
1000ee74:	1000ea71 	.word	0x1000ea71
1000ee78:	10016265 	.word	0x10016265
1000ee7c:	0000ffff 	.word	0x0000ffff
1000ee80:	0000fffe 	.word	0x0000fffe
1000ee84:	1000e419 	.word	0x1000e419
1000ee88:	1001058f 	.word	0x1001058f
1000ee8c:	0000201e 	.word	0x0000201e
1000ee90:	0000201d 	.word	0x0000201d
1000ee94:	00000c03 	.word	0x00000c03
1000ee98:	0000201f 	.word	0x0000201f
1000ee9c:	00000d1c 	.word	0x00000d1c
1000eea0:	00000c0c 	.word	0x00000c0c
1000eea4:	00000c02 	.word	0x00000c02
1000eea8:	00000a02 	.word	0x00000a02
1000eeac:	00000a03 	.word	0x00000a03
1000eeb0:	00000c06 	.word	0x00000c06
1000eeb4:	00000c04 	.word	0x00000c04
1000eeb8:	00000c05 	.word	0x00000c05
1000eebc:	00000c07 	.word	0x00000c07
1000eec0:	00000c09 	.word	0x00000c09
1000eec4:	00000c17 	.word	0x00000c17
1000eec8:	00000c12 	.word	0x00000c12
1000eecc:	00000c0d 	.word	0x00000c0d
1000eed0:	00000c13 	.word	0x00000c13
1000eed4:	00000c15 	.word	0x00000c15
1000eed8:	00000d08 	.word	0x00000d08
1000eedc:	00000d01 	.word	0x00000d01
1000eee0:	00000d15 	.word	0x00000d15
1000eee4:	00000e1b 	.word	0x00000e1b
1000eee8:	00000e0f 	.word	0x00000e0f
1000eeec:	00000e03 	.word	0x00000e03
1000eef0:	00000e06 	.word	0x00000e06
1000eef4:	00000e0a 	.word	0x00000e0a
1000eef8:	00000e15 	.word	0x00000e15
1000eefc:	00000e11 	.word	0x00000e11
1000ef00:	00000e13 	.word	0x00000e13
1000ef04:	00000e17 	.word	0x00000e17
1000ef08:	00000e19 	.word	0x00000e19
1000ef0c:	00000e27 	.word	0x00000e27
1000ef10:	00000e21 	.word	0x00000e21
1000ef14:	00000e1c 	.word	0x00000e1c
1000ef18:	00000e1d 	.word	0x00000e1d
1000ef1c:	4b9f      	ldr	r3, [pc, #636]	; (1000f19c <at_ble_event_get+0x614>)
1000ef1e:	429c      	cmp	r4, r3
1000ef20:	d07e      	beq.n	1000f020 <at_ble_event_get+0x498>
1000ef22:	4b9f      	ldr	r3, [pc, #636]	; (1000f1a0 <at_ble_event_get+0x618>)
1000ef24:	429c      	cmp	r4, r3
1000ef26:	d100      	bne.n	1000ef2a <at_ble_event_get+0x3a2>
1000ef28:	e08c      	b.n	1000f044 <at_ble_event_get+0x4bc>
1000ef2a:	e015      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ef2c:	4b9d      	ldr	r3, [pc, #628]	; (1000f1a4 <at_ble_event_get+0x61c>)
1000ef2e:	429c      	cmp	r4, r3
1000ef30:	d100      	bne.n	1000ef34 <at_ble_event_get+0x3ac>
1000ef32:	e10a      	b.n	1000f14a <at_ble_event_get+0x5c2>
1000ef34:	d808      	bhi.n	1000ef48 <at_ble_event_get+0x3c0>
1000ef36:	4b9c      	ldr	r3, [pc, #624]	; (1000f1a8 <at_ble_event_get+0x620>)
1000ef38:	429c      	cmp	r4, r3
1000ef3a:	d100      	bne.n	1000ef3e <at_ble_event_get+0x3b6>
1000ef3c:	e0f7      	b.n	1000f12e <at_ble_event_get+0x5a6>
1000ef3e:	4b9b      	ldr	r3, [pc, #620]	; (1000f1ac <at_ble_event_get+0x624>)
1000ef40:	429c      	cmp	r4, r3
1000ef42:	d100      	bne.n	1000ef46 <at_ble_event_get+0x3be>
1000ef44:	e0fa      	b.n	1000f13c <at_ble_event_get+0x5b4>
1000ef46:	e007      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000ef48:	4b99      	ldr	r3, [pc, #612]	; (1000f1b0 <at_ble_event_get+0x628>)
1000ef4a:	429c      	cmp	r4, r3
1000ef4c:	d100      	bne.n	1000ef50 <at_ble_event_get+0x3c8>
1000ef4e:	e103      	b.n	1000f158 <at_ble_event_get+0x5d0>
1000ef50:	4b98      	ldr	r3, [pc, #608]	; (1000f1b4 <at_ble_event_get+0x62c>)
1000ef52:	429c      	cmp	r4, r3
1000ef54:	d100      	bne.n	1000ef58 <at_ble_event_get+0x3d0>
1000ef56:	e106      	b.n	1000f166 <at_ble_event_get+0x5de>
1000ef58:	2600      	movs	r6, #0
1000ef5a:	e10a      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ef5c:	1c30      	adds	r0, r6, #0
1000ef5e:	1c29      	adds	r1, r5, #0
1000ef60:	4b95      	ldr	r3, [pc, #596]	; (1000f1b8 <at_ble_event_get+0x630>)
1000ef62:	e014      	b.n	1000ef8e <at_ble_event_get+0x406>
1000ef64:	1c30      	adds	r0, r6, #0
1000ef66:	1c29      	adds	r1, r5, #0
1000ef68:	4b94      	ldr	r3, [pc, #592]	; (1000f1bc <at_ble_event_get+0x634>)
1000ef6a:	4798      	blx	r3
1000ef6c:	2604      	movs	r6, #4
1000ef6e:	e100      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ef70:	1c30      	adds	r0, r6, #0
1000ef72:	1c29      	adds	r1, r5, #0
1000ef74:	4b92      	ldr	r3, [pc, #584]	; (1000f1c0 <at_ble_event_get+0x638>)
1000ef76:	4798      	blx	r3
1000ef78:	2601      	movs	r6, #1
1000ef7a:	e0fa      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ef7c:	1c30      	adds	r0, r6, #0
1000ef7e:	1c29      	adds	r1, r5, #0
1000ef80:	4b90      	ldr	r3, [pc, #576]	; (1000f1c4 <at_ble_event_get+0x63c>)
1000ef82:	4798      	blx	r3
1000ef84:	260f      	movs	r6, #15
1000ef86:	e0f4      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ef88:	1c30      	adds	r0, r6, #0
1000ef8a:	1c29      	adds	r1, r5, #0
1000ef8c:	4b8e      	ldr	r3, [pc, #568]	; (1000f1c8 <at_ble_event_get+0x640>)
1000ef8e:	4798      	blx	r3
1000ef90:	1c06      	adds	r6, r0, #0
1000ef92:	e0ee      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000ef94:	9801      	ldr	r0, [sp, #4]
1000ef96:	1c31      	adds	r1, r6, #0
1000ef98:	1c2a      	adds	r2, r5, #0
1000ef9a:	4b8c      	ldr	r3, [pc, #560]	; (1000f1cc <at_ble_event_get+0x644>)
1000ef9c:	e017      	b.n	1000efce <at_ble_event_get+0x446>
1000ef9e:	1c31      	adds	r1, r6, #0
1000efa0:	9801      	ldr	r0, [sp, #4]
1000efa2:	1c2a      	adds	r2, r5, #0
1000efa4:	4b8a      	ldr	r3, [pc, #552]	; (1000f1d0 <at_ble_event_get+0x648>)
1000efa6:	4798      	blx	r3
1000efa8:	2611      	movs	r6, #17
1000efaa:	e0e2      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000efac:	1c31      	adds	r1, r6, #0
1000efae:	9801      	ldr	r0, [sp, #4]
1000efb0:	1c2a      	adds	r2, r5, #0
1000efb2:	4b88      	ldr	r3, [pc, #544]	; (1000f1d4 <at_ble_event_get+0x64c>)
1000efb4:	4798      	blx	r3
1000efb6:	2612      	movs	r6, #18
1000efb8:	e0db      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000efba:	1c30      	adds	r0, r6, #0
1000efbc:	1c29      	adds	r1, r5, #0
1000efbe:	4b86      	ldr	r3, [pc, #536]	; (1000f1d8 <at_ble_event_get+0x650>)
1000efc0:	4798      	blx	r3
1000efc2:	2606      	movs	r6, #6
1000efc4:	e0d5      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000efc6:	1c31      	adds	r1, r6, #0
1000efc8:	1c2a      	adds	r2, r5, #0
1000efca:	9801      	ldr	r0, [sp, #4]
1000efcc:	4b83      	ldr	r3, [pc, #524]	; (1000f1dc <at_ble_event_get+0x654>)
1000efce:	4798      	blx	r3
1000efd0:	e7de      	b.n	1000ef90 <at_ble_event_get+0x408>
1000efd2:	9801      	ldr	r0, [sp, #4]
1000efd4:	1c31      	adds	r1, r6, #0
1000efd6:	1c2a      	adds	r2, r5, #0
1000efd8:	4b81      	ldr	r3, [pc, #516]	; (1000f1e0 <at_ble_event_get+0x658>)
1000efda:	e7f8      	b.n	1000efce <at_ble_event_get+0x446>
1000efdc:	1c31      	adds	r1, r6, #0
1000efde:	9801      	ldr	r0, [sp, #4]
1000efe0:	1c2a      	adds	r2, r5, #0
1000efe2:	4b80      	ldr	r3, [pc, #512]	; (1000f1e4 <at_ble_event_get+0x65c>)
1000efe4:	4798      	blx	r3
1000efe6:	260d      	movs	r6, #13
1000efe8:	e0c3      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000efea:	1c31      	adds	r1, r6, #0
1000efec:	9801      	ldr	r0, [sp, #4]
1000efee:	1c2a      	adds	r2, r5, #0
1000eff0:	4b7d      	ldr	r3, [pc, #500]	; (1000f1e8 <at_ble_event_get+0x660>)
1000eff2:	4798      	blx	r3
1000eff4:	260e      	movs	r6, #14
1000eff6:	e0bc      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000eff8:	9801      	ldr	r0, [sp, #4]
1000effa:	1c31      	adds	r1, r6, #0
1000effc:	1c2a      	adds	r2, r5, #0
1000effe:	4b7b      	ldr	r3, [pc, #492]	; (1000f1ec <at_ble_event_get+0x664>)
1000f000:	4798      	blx	r3
1000f002:	e084      	b.n	1000f10e <at_ble_event_get+0x586>
1000f004:	1c31      	adds	r1, r6, #0
1000f006:	9801      	ldr	r0, [sp, #4]
1000f008:	1c2a      	adds	r2, r5, #0
1000f00a:	4b79      	ldr	r3, [pc, #484]	; (1000f1f0 <at_ble_event_get+0x668>)
1000f00c:	4798      	blx	r3
1000f00e:	260b      	movs	r6, #11
1000f010:	e0af      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f012:	1c31      	adds	r1, r6, #0
1000f014:	9801      	ldr	r0, [sp, #4]
1000f016:	1c2a      	adds	r2, r5, #0
1000f018:	4b76      	ldr	r3, [pc, #472]	; (1000f1f4 <at_ble_event_get+0x66c>)
1000f01a:	4798      	blx	r3
1000f01c:	2610      	movs	r6, #16
1000f01e:	e0a8      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f020:	1c30      	adds	r0, r6, #0
1000f022:	1c29      	adds	r1, r5, #0
1000f024:	4b74      	ldr	r3, [pc, #464]	; (1000f1f8 <at_ble_event_get+0x670>)
1000f026:	4798      	blx	r3
1000f028:	2628      	movs	r6, #40	; 0x28
1000f02a:	e0a2      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f02c:	1c30      	adds	r0, r6, #0
1000f02e:	1c29      	adds	r1, r5, #0
1000f030:	4b72      	ldr	r3, [pc, #456]	; (1000f1fc <at_ble_event_get+0x674>)
1000f032:	4798      	blx	r3
1000f034:	2629      	movs	r6, #41	; 0x29
1000f036:	e09c      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f038:	1c30      	adds	r0, r6, #0
1000f03a:	1c29      	adds	r1, r5, #0
1000f03c:	4b70      	ldr	r3, [pc, #448]	; (1000f200 <at_ble_event_get+0x678>)
1000f03e:	4798      	blx	r3
1000f040:	2627      	movs	r6, #39	; 0x27
1000f042:	e096      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f044:	1c30      	adds	r0, r6, #0
1000f046:	1c29      	adds	r1, r5, #0
1000f048:	4b6e      	ldr	r3, [pc, #440]	; (1000f204 <at_ble_event_get+0x67c>)
1000f04a:	4798      	blx	r3
1000f04c:	262a      	movs	r6, #42	; 0x2a
1000f04e:	e090      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f050:	9801      	ldr	r0, [sp, #4]
1000f052:	1c31      	adds	r1, r6, #0
1000f054:	1c2a      	adds	r2, r5, #0
1000f056:	4b6c      	ldr	r3, [pc, #432]	; (1000f208 <at_ble_event_get+0x680>)
1000f058:	e7b9      	b.n	1000efce <at_ble_event_get+0x446>
1000f05a:	9801      	ldr	r0, [sp, #4]
1000f05c:	1c31      	adds	r1, r6, #0
1000f05e:	1c2a      	adds	r2, r5, #0
1000f060:	4b6a      	ldr	r3, [pc, #424]	; (1000f20c <at_ble_event_get+0x684>)
1000f062:	e7b4      	b.n	1000efce <at_ble_event_get+0x446>
1000f064:	1c30      	adds	r0, r6, #0
1000f066:	1c29      	adds	r1, r5, #0
1000f068:	4b69      	ldr	r3, [pc, #420]	; (1000f210 <at_ble_event_get+0x688>)
1000f06a:	4798      	blx	r3
1000f06c:	262b      	movs	r6, #43	; 0x2b
1000f06e:	e080      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f070:	1c30      	adds	r0, r6, #0
1000f072:	1c29      	adds	r1, r5, #0
1000f074:	4b67      	ldr	r3, [pc, #412]	; (1000f214 <at_ble_event_get+0x68c>)
1000f076:	4798      	blx	r3
1000f078:	262c      	movs	r6, #44	; 0x2c
1000f07a:	e07a      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f07c:	1c31      	adds	r1, r6, #0
1000f07e:	9801      	ldr	r0, [sp, #4]
1000f080:	1c2a      	adds	r2, r5, #0
1000f082:	4b65      	ldr	r3, [pc, #404]	; (1000f218 <at_ble_event_get+0x690>)
1000f084:	4798      	blx	r3
1000f086:	2613      	movs	r6, #19
1000f088:	e073      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f08a:	1c31      	adds	r1, r6, #0
1000f08c:	9801      	ldr	r0, [sp, #4]
1000f08e:	1c2a      	adds	r2, r5, #0
1000f090:	4b62      	ldr	r3, [pc, #392]	; (1000f21c <at_ble_event_get+0x694>)
1000f092:	4798      	blx	r3
1000f094:	2614      	movs	r6, #20
1000f096:	e06c      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f098:	1c31      	adds	r1, r6, #0
1000f09a:	9801      	ldr	r0, [sp, #4]
1000f09c:	1c2a      	adds	r2, r5, #0
1000f09e:	4b60      	ldr	r3, [pc, #384]	; (1000f220 <at_ble_event_get+0x698>)
1000f0a0:	4798      	blx	r3
1000f0a2:	2615      	movs	r6, #21
1000f0a4:	e065      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f0a6:	1c31      	adds	r1, r6, #0
1000f0a8:	9801      	ldr	r0, [sp, #4]
1000f0aa:	1c2a      	adds	r2, r5, #0
1000f0ac:	4b5d      	ldr	r3, [pc, #372]	; (1000f224 <at_ble_event_get+0x69c>)
1000f0ae:	4798      	blx	r3
1000f0b0:	2616      	movs	r6, #22
1000f0b2:	e05e      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f0b4:	9801      	ldr	r0, [sp, #4]
1000f0b6:	1c31      	adds	r1, r6, #0
1000f0b8:	1c2a      	adds	r2, r5, #0
1000f0ba:	4b5b      	ldr	r3, [pc, #364]	; (1000f228 <at_ble_event_get+0x6a0>)
1000f0bc:	e787      	b.n	1000efce <at_ble_event_get+0x446>
1000f0be:	1c31      	adds	r1, r6, #0
1000f0c0:	9801      	ldr	r0, [sp, #4]
1000f0c2:	1c2a      	adds	r2, r5, #0
1000f0c4:	4b58      	ldr	r3, [pc, #352]	; (1000f228 <at_ble_event_get+0x6a0>)
1000f0c6:	4798      	blx	r3
1000f0c8:	88a9      	ldrh	r1, [r5, #4]
1000f0ca:	1c06      	adds	r6, r0, #0
1000f0cc:	4b57      	ldr	r3, [pc, #348]	; (1000f22c <at_ble_event_get+0x6a4>)
1000f0ce:	8828      	ldrh	r0, [r5, #0]
1000f0d0:	4798      	blx	r3
1000f0d2:	e04e      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f0d4:	1c31      	adds	r1, r6, #0
1000f0d6:	9801      	ldr	r0, [sp, #4]
1000f0d8:	1c2a      	adds	r2, r5, #0
1000f0da:	4b55      	ldr	r3, [pc, #340]	; (1000f230 <at_ble_event_get+0x6a8>)
1000f0dc:	4798      	blx	r3
1000f0de:	2623      	movs	r6, #35	; 0x23
1000f0e0:	e047      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f0e2:	9801      	ldr	r0, [sp, #4]
1000f0e4:	1c31      	adds	r1, r6, #0
1000f0e6:	1c2a      	adds	r2, r5, #0
1000f0e8:	4b52      	ldr	r3, [pc, #328]	; (1000f234 <at_ble_event_get+0x6ac>)
1000f0ea:	e770      	b.n	1000efce <at_ble_event_get+0x446>
1000f0ec:	9b01      	ldr	r3, [sp, #4]
1000f0ee:	1c30      	adds	r0, r6, #0
1000f0f0:	0a1f      	lsrs	r7, r3, #8
1000f0f2:	802f      	strh	r7, [r5, #0]
1000f0f4:	1c29      	adds	r1, r5, #0
1000f0f6:	4b50      	ldr	r3, [pc, #320]	; (1000f238 <at_ble_event_get+0x6b0>)
1000f0f8:	e749      	b.n	1000ef8e <at_ble_event_get+0x406>
1000f0fa:	9801      	ldr	r0, [sp, #4]
1000f0fc:	1c31      	adds	r1, r6, #0
1000f0fe:	1c2a      	adds	r2, r5, #0
1000f100:	4b4e      	ldr	r3, [pc, #312]	; (1000f23c <at_ble_event_get+0x6b4>)
1000f102:	e764      	b.n	1000efce <at_ble_event_get+0x446>
1000f104:	1c30      	adds	r0, r6, #0
1000f106:	1c29      	adds	r1, r5, #0
1000f108:	9a01      	ldr	r2, [sp, #4]
1000f10a:	4b4d      	ldr	r3, [pc, #308]	; (1000f240 <at_ble_event_get+0x6b8>)
1000f10c:	4798      	blx	r3
1000f10e:	263b      	movs	r6, #59	; 0x3b
1000f110:	e02f      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f112:	1c31      	adds	r1, r6, #0
1000f114:	9801      	ldr	r0, [sp, #4]
1000f116:	1c2a      	adds	r2, r5, #0
1000f118:	4b4a      	ldr	r3, [pc, #296]	; (1000f244 <at_ble_event_get+0x6bc>)
1000f11a:	4798      	blx	r3
1000f11c:	2618      	movs	r6, #24
1000f11e:	e028      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f120:	1c31      	adds	r1, r6, #0
1000f122:	9801      	ldr	r0, [sp, #4]
1000f124:	1c2a      	adds	r2, r5, #0
1000f126:	4b48      	ldr	r3, [pc, #288]	; (1000f248 <at_ble_event_get+0x6c0>)
1000f128:	4798      	blx	r3
1000f12a:	2620      	movs	r6, #32
1000f12c:	e021      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f12e:	1c31      	adds	r1, r6, #0
1000f130:	9801      	ldr	r0, [sp, #4]
1000f132:	1c2a      	adds	r2, r5, #0
1000f134:	4b45      	ldr	r3, [pc, #276]	; (1000f24c <at_ble_event_get+0x6c4>)
1000f136:	4798      	blx	r3
1000f138:	2633      	movs	r6, #51	; 0x33
1000f13a:	e01a      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f13c:	1c31      	adds	r1, r6, #0
1000f13e:	9801      	ldr	r0, [sp, #4]
1000f140:	1c2a      	adds	r2, r5, #0
1000f142:	4b43      	ldr	r3, [pc, #268]	; (1000f250 <at_ble_event_get+0x6c8>)
1000f144:	4798      	blx	r3
1000f146:	2630      	movs	r6, #48	; 0x30
1000f148:	e013      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f14a:	1c31      	adds	r1, r6, #0
1000f14c:	9801      	ldr	r0, [sp, #4]
1000f14e:	1c2a      	adds	r2, r5, #0
1000f150:	4b40      	ldr	r3, [pc, #256]	; (1000f254 <at_ble_event_get+0x6cc>)
1000f152:	4798      	blx	r3
1000f154:	2634      	movs	r6, #52	; 0x34
1000f156:	e00c      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f158:	1c31      	adds	r1, r6, #0
1000f15a:	9801      	ldr	r0, [sp, #4]
1000f15c:	1c2a      	adds	r2, r5, #0
1000f15e:	4b3e      	ldr	r3, [pc, #248]	; (1000f258 <at_ble_event_get+0x6d0>)
1000f160:	4798      	blx	r3
1000f162:	2635      	movs	r6, #53	; 0x35
1000f164:	e005      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f166:	1c31      	adds	r1, r6, #0
1000f168:	9801      	ldr	r0, [sp, #4]
1000f16a:	1c2a      	adds	r2, r5, #0
1000f16c:	4b3b      	ldr	r3, [pc, #236]	; (1000f25c <at_ble_event_get+0x6d4>)
1000f16e:	4798      	blx	r3
1000f170:	2632      	movs	r6, #50	; 0x32
1000f172:	9b03      	ldr	r3, [sp, #12]
1000f174:	701e      	strb	r6, [r3, #0]
1000f176:	2300      	movs	r3, #0
1000f178:	9302      	str	r3, [sp, #8]
1000f17a:	e57a      	b.n	1000ec72 <at_ble_event_get+0xea>
1000f17c:	23d0      	movs	r3, #208	; 0xd0
1000f17e:	e7fb      	b.n	1000f178 <at_ble_event_get+0x5f0>
1000f180:	9b01      	ldr	r3, [sp, #4]
1000f182:	9e02      	ldr	r6, [sp, #8]
1000f184:	2bbb      	cmp	r3, #187	; 0xbb
1000f186:	d000      	beq.n	1000f18a <at_ble_event_get+0x602>
1000f188:	e6e6      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000f18a:	e7f2      	b.n	1000f172 <at_ble_event_get+0x5ea>
1000f18c:	9b02      	ldr	r3, [sp, #8]
1000f18e:	2b00      	cmp	r3, #0
1000f190:	d000      	beq.n	1000f194 <at_ble_event_get+0x60c>
1000f192:	e56e      	b.n	1000ec72 <at_ble_event_get+0xea>
1000f194:	e6e0      	b.n	1000ef58 <at_ble_event_get+0x3d0>
1000f196:	9802      	ldr	r0, [sp, #8]
1000f198:	b007      	add	sp, #28
1000f19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f19c:	00000e22 	.word	0x00000e22
1000f1a0:	00000e25 	.word	0x00000e25
1000f1a4:	00001b05 	.word	0x00001b05
1000f1a8:	00001b01 	.word	0x00001b01
1000f1ac:	00001b03 	.word	0x00001b03
1000f1b0:	00001b06 	.word	0x00001b06
1000f1b4:	00001b08 	.word	0x00001b08
1000f1b8:	100113b9 	.word	0x100113b9
1000f1bc:	1001139d 	.word	0x1001139d
1000f1c0:	10011639 	.word	0x10011639
1000f1c4:	10011729 	.word	0x10011729
1000f1c8:	1001174d 	.word	0x1001174d
1000f1cc:	10010731 	.word	0x10010731
1000f1d0:	10010fb1 	.word	0x10010fb1
1000f1d4:	1001102d 	.word	0x1001102d
1000f1d8:	100109e9 	.word	0x100109e9
1000f1dc:	10010a85 	.word	0x10010a85
1000f1e0:	10010b5d 	.word	0x10010b5d
1000f1e4:	10010de5 	.word	0x10010de5
1000f1e8:	10010e85 	.word	0x10010e85
1000f1ec:	10010f3d 	.word	0x10010f3d
1000f1f0:	10010f65 	.word	0x10010f65
1000f1f4:	10010f7b 	.word	0x10010f7b
1000f1f8:	10011045 	.word	0x10011045
1000f1fc:	10011073 	.word	0x10011073
1000f200:	10011089 	.word	0x10011089
1000f204:	100110b3 	.word	0x100110b3
1000f208:	10010ee1 	.word	0x10010ee1
1000f20c:	10010f0b 	.word	0x10010f0b
1000f210:	10010171 	.word	0x10010171
1000f214:	1001019d 	.word	0x1001019d
1000f218:	1001196d 	.word	0x1001196d
1000f21c:	100119a9 	.word	0x100119a9
1000f220:	100119f1 	.word	0x100119f1
1000f224:	10011a35 	.word	0x10011a35
1000f228:	10011a69 	.word	0x10011a69
1000f22c:	1001192d 	.word	0x1001192d
1000f230:	10011b35 	.word	0x10011b35
1000f234:	10011abd 	.word	0x10011abd
1000f238:	10010055 	.word	0x10010055
1000f23c:	100100c1 	.word	0x100100c1
1000f240:	10010085 	.word	0x10010085
1000f244:	10011b45 	.word	0x10011b45
1000f248:	10011b85 	.word	0x10011b85
1000f24c:	10011e4d 	.word	0x10011e4d
1000f250:	10011e57 	.word	0x10011e57
1000f254:	10011e5d 	.word	0x10011e5d
1000f258:	10011e63 	.word	0x10011e63
1000f25c:	10011e6f 	.word	0x10011e6f

1000f260 <internal_event_flush>:
1000f260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f262:	490e      	ldr	r1, [pc, #56]	; (1000f29c <internal_event_flush+0x3c>)
1000f264:	2400      	movs	r4, #0
1000f266:	680b      	ldr	r3, [r1, #0]
1000f268:	1c0f      	adds	r7, r1, #0
1000f26a:	1c1e      	adds	r6, r3, #0
1000f26c:	4a0c      	ldr	r2, [pc, #48]	; (1000f2a0 <internal_event_flush+0x40>)
1000f26e:	6815      	ldr	r5, [r2, #0]
1000f270:	9201      	str	r2, [sp, #4]
1000f272:	2b00      	cmp	r3, #0
1000f274:	d00e      	beq.n	1000f294 <internal_event_flush+0x34>
1000f276:	889a      	ldrh	r2, [r3, #4]
1000f278:	6819      	ldr	r1, [r3, #0]
1000f27a:	4282      	cmp	r2, r0
1000f27c:	d107      	bne.n	1000f28e <internal_event_flush+0x2e>
1000f27e:	2c00      	cmp	r4, #0
1000f280:	d001      	beq.n	1000f286 <internal_event_flush+0x26>
1000f282:	6021      	str	r1, [r4, #0]
1000f284:	e000      	b.n	1000f288 <internal_event_flush+0x28>
1000f286:	1c0e      	adds	r6, r1, #0
1000f288:	601d      	str	r5, [r3, #0]
1000f28a:	1c1d      	adds	r5, r3, #0
1000f28c:	1c23      	adds	r3, r4, #0
1000f28e:	1c1c      	adds	r4, r3, #0
1000f290:	1c0b      	adds	r3, r1, #0
1000f292:	e7ee      	b.n	1000f272 <internal_event_flush+0x12>
1000f294:	9b01      	ldr	r3, [sp, #4]
1000f296:	603e      	str	r6, [r7, #0]
1000f298:	601d      	str	r5, [r3, #0]
1000f29a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f29c:	1001a010 	.word	0x1001a010
1000f2a0:	1001a014 	.word	0x1001a014

1000f2a4 <internal_conn_flush>:
1000f2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f2a6:	4a12      	ldr	r2, [pc, #72]	; (1000f2f0 <internal_conn_flush+0x4c>)
1000f2a8:	9000      	str	r0, [sp, #0]
1000f2aa:	6813      	ldr	r3, [r2, #0]
1000f2ac:	4811      	ldr	r0, [pc, #68]	; (1000f2f4 <internal_conn_flush+0x50>)
1000f2ae:	1c1f      	adds	r7, r3, #0
1000f2b0:	2100      	movs	r1, #0
1000f2b2:	4684      	mov	ip, r0
1000f2b4:	6804      	ldr	r4, [r0, #0]
1000f2b6:	9201      	str	r2, [sp, #4]
1000f2b8:	2b00      	cmp	r3, #0
1000f2ba:	d014      	beq.n	1000f2e6 <internal_conn_flush+0x42>
1000f2bc:	88d8      	ldrh	r0, [r3, #6]
1000f2be:	9a00      	ldr	r2, [sp, #0]
1000f2c0:	681d      	ldr	r5, [r3, #0]
1000f2c2:	0a06      	lsrs	r6, r0, #8
1000f2c4:	4296      	cmp	r6, r2
1000f2c6:	d10b      	bne.n	1000f2e0 <internal_conn_flush+0x3c>
1000f2c8:	26fd      	movs	r6, #253	; 0xfd
1000f2ca:	4006      	ands	r6, r0
1000f2cc:	2e0c      	cmp	r6, #12
1000f2ce:	d107      	bne.n	1000f2e0 <internal_conn_flush+0x3c>
1000f2d0:	2900      	cmp	r1, #0
1000f2d2:	d001      	beq.n	1000f2d8 <internal_conn_flush+0x34>
1000f2d4:	600d      	str	r5, [r1, #0]
1000f2d6:	e000      	b.n	1000f2da <internal_conn_flush+0x36>
1000f2d8:	1c2f      	adds	r7, r5, #0
1000f2da:	601c      	str	r4, [r3, #0]
1000f2dc:	1c1c      	adds	r4, r3, #0
1000f2de:	1c0b      	adds	r3, r1, #0
1000f2e0:	1c19      	adds	r1, r3, #0
1000f2e2:	1c2b      	adds	r3, r5, #0
1000f2e4:	e7e8      	b.n	1000f2b8 <internal_conn_flush+0x14>
1000f2e6:	9b01      	ldr	r3, [sp, #4]
1000f2e8:	601f      	str	r7, [r3, #0]
1000f2ea:	4663      	mov	r3, ip
1000f2ec:	601c      	str	r4, [r3, #0]
1000f2ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f2f0:	1001a010 	.word	0x1001a010
1000f2f4:	1001a014 	.word	0x1001a014

1000f2f8 <at_ble_device_name_set>:
1000f2f8:	b530      	push	{r4, r5, lr}
1000f2fa:	23cf      	movs	r3, #207	; 0xcf
1000f2fc:	2800      	cmp	r0, #0
1000f2fe:	d010      	beq.n	1000f322 <at_ble_device_name_set+0x2a>
1000f300:	1e4a      	subs	r2, r1, #1
1000f302:	2a1f      	cmp	r2, #31
1000f304:	d80d      	bhi.n	1000f322 <at_ble_device_name_set+0x2a>
1000f306:	4a08      	ldr	r2, [pc, #32]	; (1000f328 <at_ble_device_name_set+0x30>)
1000f308:	1c13      	adds	r3, r2, #0
1000f30a:	33aa      	adds	r3, #170	; 0xaa
1000f30c:	8019      	strh	r1, [r3, #0]
1000f30e:	2300      	movs	r3, #0
1000f310:	1c1c      	adds	r4, r3, #0
1000f312:	5cc5      	ldrb	r5, [r0, r3]
1000f314:	34ac      	adds	r4, #172	; 0xac
1000f316:	3301      	adds	r3, #1
1000f318:	5515      	strb	r5, [r2, r4]
1000f31a:	b2dc      	uxtb	r4, r3
1000f31c:	428c      	cmp	r4, r1
1000f31e:	d3f7      	bcc.n	1000f310 <at_ble_device_name_set+0x18>
1000f320:	2300      	movs	r3, #0
1000f322:	1c18      	adds	r0, r3, #0
1000f324:	bd30      	pop	{r4, r5, pc}
1000f326:	46c0      	nop			; (mov r8, r8)
1000f328:	1001b01a 	.word	0x1001b01a

1000f32c <at_ble_addr_get>:
1000f32c:	b510      	push	{r4, lr}
1000f32e:	1c04      	adds	r4, r0, #0
1000f330:	20cf      	movs	r0, #207	; 0xcf
1000f332:	2c00      	cmp	r4, #0
1000f334:	d006      	beq.n	1000f344 <at_ble_addr_get+0x18>
1000f336:	4b04      	ldr	r3, [pc, #16]	; (1000f348 <at_ble_addr_get+0x1c>)
1000f338:	38ce      	subs	r0, #206	; 0xce
1000f33a:	1c21      	adds	r1, r4, #0
1000f33c:	4798      	blx	r3
1000f33e:	4b03      	ldr	r3, [pc, #12]	; (1000f34c <at_ble_addr_get+0x20>)
1000f340:	791b      	ldrb	r3, [r3, #4]
1000f342:	7023      	strb	r3, [r4, #0]
1000f344:	bd10      	pop	{r4, pc}
1000f346:	46c0      	nop			; (mov r8, r8)
1000f348:	1001124d 	.word	0x1001124d
1000f34c:	1001b01a 	.word	0x1001b01a

1000f350 <at_ble_set_dev_config>:
1000f350:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f352:	7906      	ldrb	r6, [r0, #4]
1000f354:	b089      	sub	sp, #36	; 0x24
1000f356:	25cf      	movs	r5, #207	; 0xcf
1000f358:	2e03      	cmp	r6, #3
1000f35a:	d838      	bhi.n	1000f3ce <at_ble_set_dev_config+0x7e>
1000f35c:	7803      	ldrb	r3, [r0, #0]
1000f35e:	3511      	adds	r5, #17
1000f360:	2b0f      	cmp	r3, #15
1000f362:	d834      	bhi.n	1000f3ce <at_ble_set_dev_config+0x7e>
1000f364:	2380      	movs	r3, #128	; 0x80
1000f366:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f368:	3d11      	subs	r5, #17
1000f36a:	009b      	lsls	r3, r3, #2
1000f36c:	429f      	cmp	r7, r3
1000f36e:	d82e      	bhi.n	1000f3ce <at_ble_set_dev_config+0x7e>
1000f370:	7fc5      	ldrb	r5, [r0, #31]
1000f372:	7f83      	ldrb	r3, [r0, #30]
1000f374:	01ad      	lsls	r5, r5, #6
1000f376:	015b      	lsls	r3, r3, #5
1000f378:	431d      	orrs	r5, r3
1000f37a:	7ec3      	ldrb	r3, [r0, #27]
1000f37c:	431d      	orrs	r5, r3
1000f37e:	7f43      	ldrb	r3, [r0, #29]
1000f380:	011b      	lsls	r3, r3, #4
1000f382:	431d      	orrs	r5, r3
1000f384:	7f03      	ldrb	r3, [r0, #28]
1000f386:	009b      	lsls	r3, r3, #2
1000f388:	431d      	orrs	r5, r3
1000f38a:	4b12      	ldr	r3, [pc, #72]	; (1000f3d4 <at_ble_set_dev_config+0x84>)
1000f38c:	b2ed      	uxtb	r5, r5
1000f38e:	711e      	strb	r6, [r3, #4]
1000f390:	7903      	ldrb	r3, [r0, #4]
1000f392:	3b02      	subs	r3, #2
1000f394:	2b01      	cmp	r3, #1
1000f396:	d801      	bhi.n	1000f39c <at_ble_set_dev_config+0x4c>
1000f398:	2302      	movs	r3, #2
1000f39a:	7103      	strb	r3, [r0, #4]
1000f39c:	1c04      	adds	r4, r0, #0
1000f39e:	1c23      	adds	r3, r4, #0
1000f3a0:	330b      	adds	r3, #11
1000f3a2:	8861      	ldrh	r1, [r4, #2]
1000f3a4:	9307      	str	r3, [sp, #28]
1000f3a6:	7923      	ldrb	r3, [r4, #4]
1000f3a8:	7800      	ldrb	r0, [r0, #0]
1000f3aa:	9300      	str	r3, [sp, #0]
1000f3ac:	9501      	str	r5, [sp, #4]
1000f3ae:	8c25      	ldrh	r5, [r4, #32]
1000f3b0:	1d62      	adds	r2, r4, #5
1000f3b2:	9502      	str	r5, [sp, #8]
1000f3b4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f3b6:	9b07      	ldr	r3, [sp, #28]
1000f3b8:	9503      	str	r5, [sp, #12]
1000f3ba:	9704      	str	r7, [sp, #16]
1000f3bc:	4d06      	ldr	r5, [pc, #24]	; (1000f3d8 <at_ble_set_dev_config+0x88>)
1000f3be:	47a8      	blx	r5
1000f3c0:	7126      	strb	r6, [r4, #4]
1000f3c2:	1c05      	adds	r5, r0, #0
1000f3c4:	1c21      	adds	r1, r4, #0
1000f3c6:	4803      	ldr	r0, [pc, #12]	; (1000f3d4 <at_ble_set_dev_config+0x84>)
1000f3c8:	2226      	movs	r2, #38	; 0x26
1000f3ca:	4b04      	ldr	r3, [pc, #16]	; (1000f3dc <at_ble_set_dev_config+0x8c>)
1000f3cc:	4798      	blx	r3
1000f3ce:	1c28      	adds	r0, r5, #0
1000f3d0:	b009      	add	sp, #36	; 0x24
1000f3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3d4:	1001b01a 	.word	0x1001b01a
1000f3d8:	10011145 	.word	0x10011145
1000f3dc:	10016253 	.word	0x10016253

1000f3e0 <at_ble_init>:
1000f3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3e2:	b087      	sub	sp, #28
1000f3e4:	af03      	add	r7, sp, #12
1000f3e6:	4954      	ldr	r1, [pc, #336]	; (1000f538 <at_ble_init+0x158>)
1000f3e8:	220b      	movs	r2, #11
1000f3ea:	4b54      	ldr	r3, [pc, #336]	; (1000f53c <at_ble_init+0x15c>)
1000f3ec:	1c04      	adds	r4, r0, #0
1000f3ee:	1c38      	adds	r0, r7, #0
1000f3f0:	4798      	blx	r3
1000f3f2:	2205      	movs	r2, #5
1000f3f4:	4b52      	ldr	r3, [pc, #328]	; (1000f540 <at_ble_init+0x160>)
1000f3f6:	2640      	movs	r6, #64	; 0x40
1000f3f8:	801a      	strh	r2, [r3, #0]
1000f3fa:	2300      	movs	r3, #0
1000f3fc:	4a51      	ldr	r2, [pc, #324]	; (1000f544 <at_ble_init+0x164>)
1000f3fe:	6013      	str	r3, [r2, #0]
1000f400:	4a51      	ldr	r2, [pc, #324]	; (1000f548 <at_ble_init+0x168>)
1000f402:	7013      	strb	r3, [r2, #0]
1000f404:	4a51      	ldr	r2, [pc, #324]	; (1000f54c <at_ble_init+0x16c>)
1000f406:	7013      	strb	r3, [r2, #0]
1000f408:	4b51      	ldr	r3, [pc, #324]	; (1000f550 <at_ble_init+0x170>)
1000f40a:	4798      	blx	r3
1000f40c:	4b51      	ldr	r3, [pc, #324]	; (1000f554 <at_ble_init+0x174>)
1000f40e:	4798      	blx	r3
1000f410:	4b51      	ldr	r3, [pc, #324]	; (1000f558 <at_ble_init+0x178>)
1000f412:	4798      	blx	r3
1000f414:	4b51      	ldr	r3, [pc, #324]	; (1000f55c <at_ble_init+0x17c>)
1000f416:	4798      	blx	r3
1000f418:	2c00      	cmp	r4, #0
1000f41a:	d100      	bne.n	1000f41e <at_ble_init+0x3e>
1000f41c:	e089      	b.n	1000f532 <at_ble_init+0x152>
1000f41e:	68a3      	ldr	r3, [r4, #8]
1000f420:	2b00      	cmp	r3, #0
1000f422:	d100      	bne.n	1000f426 <at_ble_init+0x46>
1000f424:	e085      	b.n	1000f532 <at_ble_init+0x152>
1000f426:	6923      	ldr	r3, [r4, #16]
1000f428:	2b00      	cmp	r3, #0
1000f42a:	d100      	bne.n	1000f42e <at_ble_init+0x4e>
1000f42c:	e081      	b.n	1000f532 <at_ble_init+0x152>
1000f42e:	6820      	ldr	r0, [r4, #0]
1000f430:	2800      	cmp	r0, #0
1000f432:	d102      	bne.n	1000f43a <at_ble_init+0x5a>
1000f434:	6863      	ldr	r3, [r4, #4]
1000f436:	2b00      	cmp	r3, #0
1000f438:	d17b      	bne.n	1000f532 <at_ble_init+0x152>
1000f43a:	4b49      	ldr	r3, [pc, #292]	; (1000f560 <at_ble_init+0x180>)
1000f43c:	6861      	ldr	r1, [r4, #4]
1000f43e:	4798      	blx	r3
1000f440:	4b48      	ldr	r3, [pc, #288]	; (1000f564 <at_ble_init+0x184>)
1000f442:	4798      	blx	r3
1000f444:	2801      	cmp	r0, #1
1000f446:	d901      	bls.n	1000f44c <at_ble_init+0x6c>
1000f448:	26e2      	movs	r6, #226	; 0xe2
1000f44a:	e072      	b.n	1000f532 <at_ble_init+0x152>
1000f44c:	4846      	ldr	r0, [pc, #280]	; (1000f568 <at_ble_init+0x188>)
1000f44e:	4b47      	ldr	r3, [pc, #284]	; (1000f56c <at_ble_init+0x18c>)
1000f450:	4798      	blx	r3
1000f452:	2800      	cmp	r0, #0
1000f454:	d1f8      	bne.n	1000f448 <at_ble_init+0x68>
1000f456:	1c20      	adds	r0, r4, #0
1000f458:	4b45      	ldr	r3, [pc, #276]	; (1000f570 <at_ble_init+0x190>)
1000f45a:	4798      	blx	r3
1000f45c:	68e0      	ldr	r0, [r4, #12]
1000f45e:	68a1      	ldr	r1, [r4, #8]
1000f460:	4b44      	ldr	r3, [pc, #272]	; (1000f574 <at_ble_init+0x194>)
1000f462:	4798      	blx	r3
1000f464:	466b      	mov	r3, sp
1000f466:	2201      	movs	r2, #1
1000f468:	1cdc      	adds	r4, r3, #3
1000f46a:	1c20      	adds	r0, r4, #0
1000f46c:	a901      	add	r1, sp, #4
1000f46e:	4252      	negs	r2, r2
1000f470:	4b41      	ldr	r3, [pc, #260]	; (1000f578 <at_ble_init+0x198>)
1000f472:	4798      	blx	r3
1000f474:	2800      	cmp	r0, #0
1000f476:	d102      	bne.n	1000f47e <at_ble_init+0x9e>
1000f478:	7823      	ldrb	r3, [r4, #0]
1000f47a:	2b39      	cmp	r3, #57	; 0x39
1000f47c:	d1f2      	bne.n	1000f464 <at_ble_init+0x84>
1000f47e:	4b3f      	ldr	r3, [pc, #252]	; (1000f57c <at_ble_init+0x19c>)
1000f480:	4798      	blx	r3
1000f482:	1e06      	subs	r6, r0, #0
1000f484:	d155      	bne.n	1000f532 <at_ble_init+0x152>
1000f486:	1c03      	adds	r3, r0, #0
1000f488:	2101      	movs	r1, #1
1000f48a:	4a3d      	ldr	r2, [pc, #244]	; (1000f580 <at_ble_init+0x1a0>)
1000f48c:	4249      	negs	r1, r1
1000f48e:	189a      	adds	r2, r3, r2
1000f490:	3312      	adds	r3, #18
1000f492:	8151      	strh	r1, [r2, #10]
1000f494:	2b90      	cmp	r3, #144	; 0x90
1000f496:	d1f7      	bne.n	1000f488 <at_ble_init+0xa8>
1000f498:	4c3a      	ldr	r4, [pc, #232]	; (1000f584 <at_ble_init+0x1a4>)
1000f49a:	3b81      	subs	r3, #129	; 0x81
1000f49c:	7023      	strb	r3, [r4, #0]
1000f49e:	4b3a      	ldr	r3, [pc, #232]	; (1000f588 <at_ble_init+0x1a8>)
1000f4a0:	4a3a      	ldr	r2, [pc, #232]	; (1000f58c <at_ble_init+0x1ac>)
1000f4a2:	8063      	strh	r3, [r4, #2]
1000f4a4:	2300      	movs	r3, #0
1000f4a6:	7123      	strb	r3, [r4, #4]
1000f4a8:	3301      	adds	r3, #1
1000f4aa:	1e58      	subs	r0, r3, #1
1000f4ac:	0119      	lsls	r1, r3, #4
1000f4ae:	4301      	orrs	r1, r0
1000f4b0:	3302      	adds	r3, #2
1000f4b2:	7011      	strb	r1, [r2, #0]
1000f4b4:	3201      	adds	r2, #1
1000f4b6:	2b21      	cmp	r3, #33	; 0x21
1000f4b8:	d1f7      	bne.n	1000f4aa <at_ble_init+0xca>
1000f4ba:	33e0      	adds	r3, #224	; 0xe0
1000f4bc:	33ff      	adds	r3, #255	; 0xff
1000f4be:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f4c0:	1c23      	adds	r3, r4, #0
1000f4c2:	2500      	movs	r5, #0
1000f4c4:	3373      	adds	r3, #115	; 0x73
1000f4c6:	701d      	strb	r5, [r3, #0]
1000f4c8:	1c23      	adds	r3, r4, #0
1000f4ca:	3372      	adds	r3, #114	; 0x72
1000f4cc:	701d      	strb	r5, [r3, #0]
1000f4ce:	1c23      	adds	r3, r4, #0
1000f4d0:	3376      	adds	r3, #118	; 0x76
1000f4d2:	701d      	strb	r5, [r3, #0]
1000f4d4:	1c23      	adds	r3, r4, #0
1000f4d6:	33cc      	adds	r3, #204	; 0xcc
1000f4d8:	801d      	strh	r5, [r3, #0]
1000f4da:	1c22      	adds	r2, r4, #0
1000f4dc:	23a0      	movs	r3, #160	; 0xa0
1000f4de:	32d0      	adds	r2, #208	; 0xd0
1000f4e0:	005b      	lsls	r3, r3, #1
1000f4e2:	8013      	strh	r3, [r2, #0]
1000f4e4:	1c22      	adds	r2, r4, #0
1000f4e6:	32ce      	adds	r2, #206	; 0xce
1000f4e8:	8013      	strh	r3, [r2, #0]
1000f4ea:	1c23      	adds	r3, r4, #0
1000f4ec:	33d2      	adds	r3, #210	; 0xd2
1000f4ee:	801d      	strh	r5, [r3, #0]
1000f4f0:	22fa      	movs	r2, #250	; 0xfa
1000f4f2:	1c23      	adds	r3, r4, #0
1000f4f4:	0052      	lsls	r2, r2, #1
1000f4f6:	33d4      	adds	r3, #212	; 0xd4
1000f4f8:	801a      	strh	r2, [r3, #0]
1000f4fa:	1c23      	adds	r3, r4, #0
1000f4fc:	33d6      	adds	r3, #214	; 0xd6
1000f4fe:	701d      	strb	r5, [r3, #0]
1000f500:	1c20      	adds	r0, r4, #0
1000f502:	4b23      	ldr	r3, [pc, #140]	; (1000f590 <at_ble_init+0x1b0>)
1000f504:	76e5      	strb	r5, [r4, #27]
1000f506:	7725      	strb	r5, [r4, #28]
1000f508:	7765      	strb	r5, [r4, #29]
1000f50a:	77a5      	strb	r5, [r4, #30]
1000f50c:	77e5      	strb	r5, [r4, #31]
1000f50e:	8425      	strh	r5, [r4, #32]
1000f510:	8465      	strh	r5, [r4, #34]	; 0x22
1000f512:	4798      	blx	r3
1000f514:	1c23      	adds	r3, r4, #0
1000f516:	2207      	movs	r2, #7
1000f518:	3374      	adds	r3, #116	; 0x74
1000f51a:	701a      	strb	r2, [r3, #0]
1000f51c:	1c23      	adds	r3, r4, #0
1000f51e:	3204      	adds	r2, #4
1000f520:	33aa      	adds	r3, #170	; 0xaa
1000f522:	801a      	strh	r2, [r3, #0]
1000f524:	1c2b      	adds	r3, r5, #0
1000f526:	5d7a      	ldrb	r2, [r7, r5]
1000f528:	33ac      	adds	r3, #172	; 0xac
1000f52a:	3501      	adds	r5, #1
1000f52c:	54e2      	strb	r2, [r4, r3]
1000f52e:	2d0b      	cmp	r5, #11
1000f530:	d1f8      	bne.n	1000f524 <at_ble_init+0x144>
1000f532:	1c30      	adds	r0, r6, #0
1000f534:	b007      	add	sp, #28
1000f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f538:	1001834b 	.word	0x1001834b
1000f53c:	10016253 	.word	0x10016253
1000f540:	1001af88 	.word	0x1001af88
1000f544:	1001a0c0 	.word	0x1001a0c0
1000f548:	1001a020 	.word	0x1001a020
1000f54c:	10018594 	.word	0x10018594
1000f550:	10011b95 	.word	0x10011b95
1000f554:	1000f851 	.word	0x1000f851
1000f558:	1000feb1 	.word	0x1000feb1
1000f55c:	10010165 	.word	0x10010165
1000f560:	1000feed 	.word	0x1000feed
1000f564:	1000deb1 	.word	0x1000deb1
1000f568:	10010465 	.word	0x10010465
1000f56c:	1000e0f5 	.word	0x1000e0f5
1000f570:	1001050d 	.word	0x1001050d
1000f574:	1000eacd 	.word	0x1000eacd
1000f578:	1000eb89 	.word	0x1000eb89
1000f57c:	100110d5 	.word	0x100110d5
1000f580:	1001af8a 	.word	0x1001af8a
1000f584:	1001b01a 	.word	0x1001b01a
1000f588:	00003a98 	.word	0x00003a98
1000f58c:	1001b025 	.word	0x1001b025
1000f590:	1000f351 	.word	0x1000f351

1000f594 <at_ble_addr_set>:
1000f594:	b538      	push	{r3, r4, r5, lr}
1000f596:	1c45      	adds	r5, r0, #1
1000f598:	1c03      	adds	r3, r0, #0
1000f59a:	20cf      	movs	r0, #207	; 0xcf
1000f59c:	2d00      	cmp	r5, #0
1000f59e:	d018      	beq.n	1000f5d2 <at_ble_addr_set+0x3e>
1000f5a0:	781a      	ldrb	r2, [r3, #0]
1000f5a2:	2a03      	cmp	r2, #3
1000f5a4:	d815      	bhi.n	1000f5d2 <at_ble_addr_set+0x3e>
1000f5a6:	2a01      	cmp	r2, #1
1000f5a8:	d102      	bne.n	1000f5b0 <at_ble_addr_set+0x1c>
1000f5aa:	785a      	ldrb	r2, [r3, #1]
1000f5ac:	2a00      	cmp	r2, #0
1000f5ae:	d010      	beq.n	1000f5d2 <at_ble_addr_set+0x3e>
1000f5b0:	1c1c      	adds	r4, r3, #0
1000f5b2:	1c29      	adds	r1, r5, #0
1000f5b4:	2206      	movs	r2, #6
1000f5b6:	4b07      	ldr	r3, [pc, #28]	; (1000f5d4 <at_ble_addr_set+0x40>)
1000f5b8:	4807      	ldr	r0, [pc, #28]	; (1000f5d8 <at_ble_addr_set+0x44>)
1000f5ba:	4798      	blx	r3
1000f5bc:	7823      	ldrb	r3, [r4, #0]
1000f5be:	4807      	ldr	r0, [pc, #28]	; (1000f5dc <at_ble_addr_set+0x48>)
1000f5c0:	7103      	strb	r3, [r0, #4]
1000f5c2:	4b07      	ldr	r3, [pc, #28]	; (1000f5e0 <at_ble_addr_set+0x4c>)
1000f5c4:	4798      	blx	r3
1000f5c6:	7823      	ldrb	r3, [r4, #0]
1000f5c8:	2b00      	cmp	r3, #0
1000f5ca:	d102      	bne.n	1000f5d2 <at_ble_addr_set+0x3e>
1000f5cc:	1c28      	adds	r0, r5, #0
1000f5ce:	4b05      	ldr	r3, [pc, #20]	; (1000f5e4 <at_ble_addr_set+0x50>)
1000f5d0:	4798      	blx	r3
1000f5d2:	bd38      	pop	{r3, r4, r5, pc}
1000f5d4:	10016253 	.word	0x10016253
1000f5d8:	1001b01f 	.word	0x1001b01f
1000f5dc:	1001b01a 	.word	0x1001b01a
1000f5e0:	1000f351 	.word	0x1000f351
1000f5e4:	10010591 	.word	0x10010591

1000f5e8 <at_ble_adv_data_set>:
1000f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f5ea:	4684      	mov	ip, r0
1000f5ec:	1c0f      	adds	r7, r1, #0
1000f5ee:	1c16      	adds	r6, r2, #0
1000f5f0:	1c1c      	adds	r4, r3, #0
1000f5f2:	2800      	cmp	r0, #0
1000f5f4:	d102      	bne.n	1000f5fc <at_ble_adv_data_set+0x14>
1000f5f6:	20e2      	movs	r0, #226	; 0xe2
1000f5f8:	2a00      	cmp	r2, #0
1000f5fa:	d02b      	beq.n	1000f654 <at_ble_adv_data_set+0x6c>
1000f5fc:	20cf      	movs	r0, #207	; 0xcf
1000f5fe:	2f1f      	cmp	r7, #31
1000f600:	d828      	bhi.n	1000f654 <at_ble_adv_data_set+0x6c>
1000f602:	2c1f      	cmp	r4, #31
1000f604:	d826      	bhi.n	1000f654 <at_ble_adv_data_set+0x6c>
1000f606:	4663      	mov	r3, ip
1000f608:	2b00      	cmp	r3, #0
1000f60a:	d00e      	beq.n	1000f62a <at_ble_adv_data_set+0x42>
1000f60c:	4812      	ldr	r0, [pc, #72]	; (1000f658 <at_ble_adv_data_set+0x70>)
1000f60e:	4d13      	ldr	r5, [pc, #76]	; (1000f65c <at_ble_adv_data_set+0x74>)
1000f610:	2f00      	cmp	r7, #0
1000f612:	d104      	bne.n	1000f61e <at_ble_adv_data_set+0x36>
1000f614:	1c39      	adds	r1, r7, #0
1000f616:	221f      	movs	r2, #31
1000f618:	4b11      	ldr	r3, [pc, #68]	; (1000f660 <at_ble_adv_data_set+0x78>)
1000f61a:	4798      	blx	r3
1000f61c:	e003      	b.n	1000f626 <at_ble_adv_data_set+0x3e>
1000f61e:	4661      	mov	r1, ip
1000f620:	1c3a      	adds	r2, r7, #0
1000f622:	4b10      	ldr	r3, [pc, #64]	; (1000f664 <at_ble_adv_data_set+0x7c>)
1000f624:	4798      	blx	r3
1000f626:	3572      	adds	r5, #114	; 0x72
1000f628:	702f      	strb	r7, [r5, #0]
1000f62a:	1e30      	subs	r0, r6, #0
1000f62c:	d012      	beq.n	1000f654 <at_ble_adv_data_set+0x6c>
1000f62e:	4d0b      	ldr	r5, [pc, #44]	; (1000f65c <at_ble_adv_data_set+0x74>)
1000f630:	480d      	ldr	r0, [pc, #52]	; (1000f668 <at_ble_adv_data_set+0x80>)
1000f632:	2c00      	cmp	r4, #0
1000f634:	d107      	bne.n	1000f646 <at_ble_adv_data_set+0x5e>
1000f636:	1c21      	adds	r1, r4, #0
1000f638:	221f      	movs	r2, #31
1000f63a:	4b09      	ldr	r3, [pc, #36]	; (1000f660 <at_ble_adv_data_set+0x78>)
1000f63c:	3573      	adds	r5, #115	; 0x73
1000f63e:	4798      	blx	r3
1000f640:	702c      	strb	r4, [r5, #0]
1000f642:	1c20      	adds	r0, r4, #0
1000f644:	e006      	b.n	1000f654 <at_ble_adv_data_set+0x6c>
1000f646:	1c31      	adds	r1, r6, #0
1000f648:	1c22      	adds	r2, r4, #0
1000f64a:	4b06      	ldr	r3, [pc, #24]	; (1000f664 <at_ble_adv_data_set+0x7c>)
1000f64c:	4798      	blx	r3
1000f64e:	2000      	movs	r0, #0
1000f650:	3573      	adds	r5, #115	; 0x73
1000f652:	702c      	strb	r4, [r5, #0]
1000f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f656:	46c0      	nop			; (mov r8, r8)
1000f658:	1001b04e 	.word	0x1001b04e
1000f65c:	1001b01a 	.word	0x1001b01a
1000f660:	10016265 	.word	0x10016265
1000f664:	10016253 	.word	0x10016253
1000f668:	1001b06d 	.word	0x1001b06d

1000f66c <at_ble_adv_start>:
1000f66c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f66e:	b091      	sub	sp, #68	; 0x44
1000f670:	1c1f      	adds	r7, r3, #0
1000f672:	ab16      	add	r3, sp, #88	; 0x58
1000f674:	881d      	ldrh	r5, [r3, #0]
1000f676:	ab17      	add	r3, sp, #92	; 0x5c
1000f678:	881b      	ldrh	r3, [r3, #0]
1000f67a:	910d      	str	r1, [sp, #52]	; 0x34
1000f67c:	930e      	str	r3, [sp, #56]	; 0x38
1000f67e:	ab18      	add	r3, sp, #96	; 0x60
1000f680:	781b      	ldrb	r3, [r3, #0]
1000f682:	1c04      	adds	r4, r0, #0
1000f684:	930f      	str	r3, [sp, #60]	; 0x3c
1000f686:	4b42      	ldr	r3, [pc, #264]	; (1000f790 <at_ble_adv_start+0x124>)
1000f688:	1c16      	adds	r6, r2, #0
1000f68a:	3373      	adds	r3, #115	; 0x73
1000f68c:	781b      	ldrb	r3, [r3, #0]
1000f68e:	20cf      	movs	r0, #207	; 0xcf
1000f690:	930c      	str	r3, [sp, #48]	; 0x30
1000f692:	2c01      	cmp	r4, #1
1000f694:	d103      	bne.n	1000f69e <at_ble_adv_start+0x32>
1000f696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000f698:	2b00      	cmp	r3, #0
1000f69a:	d176      	bne.n	1000f78a <at_ble_adv_start+0x11e>
1000f69c:	e024      	b.n	1000f6e8 <at_ble_adv_start+0x7c>
1000f69e:	2c04      	cmp	r4, #4
1000f6a0:	d873      	bhi.n	1000f78a <at_ble_adv_start+0x11e>
1000f6a2:	2380      	movs	r3, #128	; 0x80
1000f6a4:	01db      	lsls	r3, r3, #7
1000f6a6:	429d      	cmp	r5, r3
1000f6a8:	d86f      	bhi.n	1000f78a <at_ble_adv_start+0x11e>
1000f6aa:	2c00      	cmp	r4, #0
1000f6ac:	d102      	bne.n	1000f6b4 <at_ble_adv_start+0x48>
1000f6ae:	2d1f      	cmp	r5, #31
1000f6b0:	d96b      	bls.n	1000f78a <at_ble_adv_start+0x11e>
1000f6b2:	e003      	b.n	1000f6bc <at_ble_adv_start+0x50>
1000f6b4:	2d9f      	cmp	r5, #159	; 0x9f
1000f6b6:	d801      	bhi.n	1000f6bc <at_ble_adv_start+0x50>
1000f6b8:	2c01      	cmp	r4, #1
1000f6ba:	d166      	bne.n	1000f78a <at_ble_adv_start+0x11e>
1000f6bc:	2f00      	cmp	r7, #0
1000f6be:	d009      	beq.n	1000f6d4 <at_ble_adv_start+0x68>
1000f6c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f6c2:	20cf      	movs	r0, #207	; 0xcf
1000f6c4:	3b01      	subs	r3, #1
1000f6c6:	2b01      	cmp	r3, #1
1000f6c8:	d95f      	bls.n	1000f78a <at_ble_adv_start+0x11e>
1000f6ca:	2c01      	cmp	r4, #1
1000f6cc:	d102      	bne.n	1000f6d4 <at_ble_adv_start+0x68>
1000f6ce:	2d00      	cmp	r5, #0
1000f6d0:	d100      	bne.n	1000f6d4 <at_ble_adv_start+0x68>
1000f6d2:	3520      	adds	r5, #32
1000f6d4:	4b2f      	ldr	r3, [pc, #188]	; (1000f794 <at_ble_adv_start+0x128>)
1000f6d6:	4798      	blx	r3
1000f6d8:	1c01      	adds	r1, r0, #0
1000f6da:	2e00      	cmp	r6, #0
1000f6dc:	d043      	beq.n	1000f766 <at_ble_adv_start+0xfa>
1000f6de:	7833      	ldrb	r3, [r6, #0]
1000f6e0:	1e60      	subs	r0, r4, #1
1000f6e2:	2b00      	cmp	r3, #0
1000f6e4:	d109      	bne.n	1000f6fa <at_ble_adv_start+0x8e>
1000f6e6:	e03b      	b.n	1000f760 <at_ble_adv_start+0xf4>
1000f6e8:	2380      	movs	r3, #128	; 0x80
1000f6ea:	01db      	lsls	r3, r3, #7
1000f6ec:	429d      	cmp	r5, r3
1000f6ee:	d84c      	bhi.n	1000f78a <at_ble_adv_start+0x11e>
1000f6f0:	2e00      	cmp	r6, #0
1000f6f2:	d04a      	beq.n	1000f78a <at_ble_adv_start+0x11e>
1000f6f4:	2f00      	cmp	r7, #0
1000f6f6:	d1e3      	bne.n	1000f6c0 <at_ble_adv_start+0x54>
1000f6f8:	e02b      	b.n	1000f752 <at_ble_adv_start+0xe6>
1000f6fa:	2301      	movs	r3, #1
1000f6fc:	2803      	cmp	r0, #3
1000f6fe:	d93a      	bls.n	1000f776 <at_ble_adv_start+0x10a>
1000f700:	200d      	movs	r0, #13
1000f702:	1c72      	adds	r2, r6, #1
1000f704:	e002      	b.n	1000f70c <at_ble_adv_start+0xa0>
1000f706:	200e      	movs	r0, #14
1000f708:	1e32      	subs	r2, r6, #0
1000f70a:	d1fa      	bne.n	1000f702 <at_ble_adv_start+0x96>
1000f70c:	4c20      	ldr	r4, [pc, #128]	; (1000f790 <at_ble_adv_start+0x124>)
1000f70e:	3474      	adds	r4, #116	; 0x74
1000f710:	7826      	ldrb	r6, [r4, #0]
1000f712:	2407      	movs	r4, #7
1000f714:	2e00      	cmp	r6, #0
1000f716:	d000      	beq.n	1000f71a <at_ble_adv_start+0xae>
1000f718:	1c34      	adds	r4, r6, #0
1000f71a:	9200      	str	r2, [sp, #0]
1000f71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f71e:	9403      	str	r4, [sp, #12]
1000f720:	9204      	str	r2, [sp, #16]
1000f722:	4a1b      	ldr	r2, [pc, #108]	; (1000f790 <at_ble_adv_start+0x124>)
1000f724:	9501      	str	r5, [sp, #4]
1000f726:	9502      	str	r5, [sp, #8]
1000f728:	9705      	str	r7, [sp, #20]
1000f72a:	3272      	adds	r2, #114	; 0x72
1000f72c:	7812      	ldrb	r2, [r2, #0]
1000f72e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f730:	9206      	str	r2, [sp, #24]
1000f732:	4a19      	ldr	r2, [pc, #100]	; (1000f798 <at_ble_adv_start+0x12c>)
1000f734:	9207      	str	r2, [sp, #28]
1000f736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f738:	9208      	str	r2, [sp, #32]
1000f73a:	4a18      	ldr	r2, [pc, #96]	; (1000f79c <at_ble_adv_start+0x130>)
1000f73c:	9209      	str	r2, [sp, #36]	; 0x24
1000f73e:	2264      	movs	r2, #100	; 0x64
1000f740:	4362      	muls	r2, r4
1000f742:	b292      	uxth	r2, r2
1000f744:	920a      	str	r2, [sp, #40]	; 0x28
1000f746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f748:	4c15      	ldr	r4, [pc, #84]	; (1000f7a0 <at_ble_adv_start+0x134>)
1000f74a:	920b      	str	r2, [sp, #44]	; 0x2c
1000f74c:	4a15      	ldr	r2, [pc, #84]	; (1000f7a4 <at_ble_adv_start+0x138>)
1000f74e:	47a0      	blx	r4
1000f750:	e01b      	b.n	1000f78a <at_ble_adv_start+0x11e>
1000f752:	2d00      	cmp	r5, #0
1000f754:	d1be      	bne.n	1000f6d4 <at_ble_adv_start+0x68>
1000f756:	4b0f      	ldr	r3, [pc, #60]	; (1000f794 <at_ble_adv_start+0x128>)
1000f758:	4798      	blx	r3
1000f75a:	2520      	movs	r5, #32
1000f75c:	1c01      	adds	r1, r0, #0
1000f75e:	e7be      	b.n	1000f6de <at_ble_adv_start+0x72>
1000f760:	2803      	cmp	r0, #3
1000f762:	d8cd      	bhi.n	1000f700 <at_ble_adv_start+0x94>
1000f764:	e006      	b.n	1000f774 <at_ble_adv_start+0x108>
1000f766:	1e60      	subs	r0, r4, #1
1000f768:	2803      	cmp	r0, #3
1000f76a:	d903      	bls.n	1000f774 <at_ble_adv_start+0x108>
1000f76c:	1c33      	adds	r3, r6, #0
1000f76e:	200d      	movs	r0, #13
1000f770:	1c32      	adds	r2, r6, #0
1000f772:	e7cb      	b.n	1000f70c <at_ble_adv_start+0xa0>
1000f774:	2300      	movs	r3, #0
1000f776:	f003 fd3d 	bl	100131f4 <__gnu_thumb1_case_sqi>
1000f77a:	06c6      	.short	0x06c6
1000f77c:	0204      	.short	0x0204
1000f77e:	200f      	movs	r0, #15
1000f780:	e7c2      	b.n	1000f708 <at_ble_adv_start+0x9c>
1000f782:	2200      	movs	r2, #0
1000f784:	920c      	str	r2, [sp, #48]	; 0x30
1000f786:	200c      	movs	r0, #12
1000f788:	e7be      	b.n	1000f708 <at_ble_adv_start+0x9c>
1000f78a:	b011      	add	sp, #68	; 0x44
1000f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f78e:	46c0      	nop			; (mov r8, r8)
1000f790:	1001b01a 	.word	0x1001b01a
1000f794:	10011621 	.word	0x10011621
1000f798:	1001b04e 	.word	0x1001b04e
1000f79c:	1001b06d 	.word	0x1001b06d
1000f7a0:	10011501 	.word	0x10011501
1000f7a4:	00003a98 	.word	0x00003a98

1000f7a8 <at_ble_adv_stop>:
1000f7a8:	b508      	push	{r3, lr}
1000f7aa:	4b01      	ldr	r3, [pc, #4]	; (1000f7b0 <at_ble_adv_stop+0x8>)
1000f7ac:	4798      	blx	r3
1000f7ae:	bd08      	pop	{r3, pc}
1000f7b0:	1001132d 	.word	0x1001132d

1000f7b4 <at_ble_scan_stop>:
1000f7b4:	b510      	push	{r4, lr}
1000f7b6:	4b05      	ldr	r3, [pc, #20]	; (1000f7cc <at_ble_scan_stop+0x18>)
1000f7b8:	4798      	blx	r3
1000f7ba:	1e04      	subs	r4, r0, #0
1000f7bc:	d103      	bne.n	1000f7c6 <at_ble_scan_stop+0x12>
1000f7be:	20d1      	movs	r0, #209	; 0xd1
1000f7c0:	4b03      	ldr	r3, [pc, #12]	; (1000f7d0 <at_ble_scan_stop+0x1c>)
1000f7c2:	0100      	lsls	r0, r0, #4
1000f7c4:	4798      	blx	r3
1000f7c6:	1c20      	adds	r0, r4, #0
1000f7c8:	bd10      	pop	{r4, pc}
1000f7ca:	46c0      	nop			; (mov r8, r8)
1000f7cc:	1001132d 	.word	0x1001132d
1000f7d0:	1000f261 	.word	0x1000f261

1000f7d4 <at_ble_disconnect>:
1000f7d4:	b538      	push	{r3, r4, r5, lr}
1000f7d6:	1c04      	adds	r4, r0, #0
1000f7d8:	4b04      	ldr	r3, [pc, #16]	; (1000f7ec <at_ble_disconnect+0x18>)
1000f7da:	1c08      	adds	r0, r1, #0
1000f7dc:	1c21      	adds	r1, r4, #0
1000f7de:	4798      	blx	r3
1000f7e0:	1c05      	adds	r5, r0, #0
1000f7e2:	4b03      	ldr	r3, [pc, #12]	; (1000f7f0 <at_ble_disconnect+0x1c>)
1000f7e4:	1c20      	adds	r0, r4, #0
1000f7e6:	4798      	blx	r3
1000f7e8:	1c28      	adds	r0, r5, #0
1000f7ea:	bd38      	pop	{r3, r4, r5, pc}
1000f7ec:	100109a5 	.word	0x100109a5
1000f7f0:	1000f2a5 	.word	0x1000f2a5

1000f7f4 <at_ble_conn_update_reply>:
1000f7f4:	b510      	push	{r4, lr}
1000f7f6:	4c01      	ldr	r4, [pc, #4]	; (1000f7fc <at_ble_conn_update_reply+0x8>)
1000f7f8:	47a0      	blx	r4
1000f7fa:	bd10      	pop	{r4, pc}
1000f7fc:	10010e95 	.word	0x10010e95

1000f800 <at_ble_random_address_resolve>:
1000f800:	b510      	push	{r4, lr}
1000f802:	23cf      	movs	r3, #207	; 0xcf
1000f804:	2800      	cmp	r0, #0
1000f806:	d00a      	beq.n	1000f81e <at_ble_random_address_resolve+0x1e>
1000f808:	2900      	cmp	r1, #0
1000f80a:	d008      	beq.n	1000f81e <at_ble_random_address_resolve+0x1e>
1000f80c:	2a00      	cmp	r2, #0
1000f80e:	d006      	beq.n	1000f81e <at_ble_random_address_resolve+0x1e>
1000f810:	780c      	ldrb	r4, [r1, #0]
1000f812:	2c02      	cmp	r4, #2
1000f814:	d103      	bne.n	1000f81e <at_ble_random_address_resolve+0x1e>
1000f816:	4b03      	ldr	r3, [pc, #12]	; (1000f824 <at_ble_random_address_resolve+0x24>)
1000f818:	3101      	adds	r1, #1
1000f81a:	4798      	blx	r3
1000f81c:	2300      	movs	r3, #0
1000f81e:	1c18      	adds	r0, r3, #0
1000f820:	bd10      	pop	{r4, pc}
1000f822:	46c0      	nop			; (mov r8, r8)
1000f824:	100116c1 	.word	0x100116c1

1000f828 <at_ble_uuid_type2len>:
1000f828:	23cf      	movs	r3, #207	; 0xcf
1000f82a:	2802      	cmp	r0, #2
1000f82c:	d801      	bhi.n	1000f832 <at_ble_uuid_type2len+0xa>
1000f82e:	4b02      	ldr	r3, [pc, #8]	; (1000f838 <at_ble_uuid_type2len+0x10>)
1000f830:	5c1b      	ldrb	r3, [r3, r0]
1000f832:	1c18      	adds	r0, r3, #0
1000f834:	4770      	bx	lr
1000f836:	46c0      	nop			; (mov r8, r8)
1000f838:	10018356 	.word	0x10018356

1000f83c <at_ble_uuid_len2type>:
1000f83c:	1e83      	subs	r3, r0, #2
1000f83e:	b2db      	uxtb	r3, r3
1000f840:	2003      	movs	r0, #3
1000f842:	2b0e      	cmp	r3, #14
1000f844:	d801      	bhi.n	1000f84a <at_ble_uuid_len2type+0xe>
1000f846:	4a01      	ldr	r2, [pc, #4]	; (1000f84c <at_ble_uuid_len2type+0x10>)
1000f848:	5cd0      	ldrb	r0, [r2, r3]
1000f84a:	4770      	bx	lr
1000f84c:	10018359 	.word	0x10018359

1000f850 <init_gatt_client_module>:
1000f850:	2200      	movs	r2, #0
1000f852:	4b01      	ldr	r3, [pc, #4]	; (1000f858 <init_gatt_client_module+0x8>)
1000f854:	801a      	strh	r2, [r3, #0]
1000f856:	4770      	bx	lr
1000f858:	1001a018 	.word	0x1001a018

1000f85c <db_searchATT>:
1000f85c:	b570      	push	{r4, r5, r6, lr}
1000f85e:	1c05      	adds	r5, r0, #0
1000f860:	2400      	movs	r4, #0
1000f862:	4b0c      	ldr	r3, [pc, #48]	; (1000f894 <db_searchATT+0x38>)
1000f864:	6819      	ldr	r1, [r3, #0]
1000f866:	4b0c      	ldr	r3, [pc, #48]	; (1000f898 <db_searchATT+0x3c>)
1000f868:	681e      	ldr	r6, [r3, #0]
1000f86a:	428c      	cmp	r4, r1
1000f86c:	dc10      	bgt.n	1000f890 <db_searchATT+0x34>
1000f86e:	200c      	movs	r0, #12
1000f870:	1863      	adds	r3, r4, r1
1000f872:	0fda      	lsrs	r2, r3, #31
1000f874:	18d3      	adds	r3, r2, r3
1000f876:	1c02      	adds	r2, r0, #0
1000f878:	105b      	asrs	r3, r3, #1
1000f87a:	435a      	muls	r2, r3
1000f87c:	18b0      	adds	r0, r6, r2
1000f87e:	8802      	ldrh	r2, [r0, #0]
1000f880:	42aa      	cmp	r2, r5
1000f882:	d201      	bcs.n	1000f888 <db_searchATT+0x2c>
1000f884:	1e59      	subs	r1, r3, #1
1000f886:	e7f0      	b.n	1000f86a <db_searchATT+0xe>
1000f888:	42aa      	cmp	r2, r5
1000f88a:	d902      	bls.n	1000f892 <db_searchATT+0x36>
1000f88c:	1c5c      	adds	r4, r3, #1
1000f88e:	e7ec      	b.n	1000f86a <db_searchATT+0xe>
1000f890:	2000      	movs	r0, #0
1000f892:	bd70      	pop	{r4, r5, r6, pc}
1000f894:	1001a02c 	.word	0x1001a02c
1000f898:	1001a024 	.word	0x1001a024

1000f89c <att_permissions>:
1000f89c:	b530      	push	{r4, r5, lr}
1000f89e:	2403      	movs	r4, #3
1000f8a0:	1c05      	adds	r5, r0, #0
1000f8a2:	2301      	movs	r3, #1
1000f8a4:	4025      	ands	r5, r4
1000f8a6:	42a5      	cmp	r5, r4
1000f8a8:	d009      	beq.n	1000f8be <att_permissions+0x22>
1000f8aa:	1c23      	adds	r3, r4, #0
1000f8ac:	1924      	adds	r4, r4, r4
1000f8ae:	4220      	tst	r0, r4
1000f8b0:	d105      	bne.n	1000f8be <att_permissions+0x22>
1000f8b2:	3b02      	subs	r3, #2
1000f8b4:	4218      	tst	r0, r3
1000f8b6:	d102      	bne.n	1000f8be <att_permissions+0x22>
1000f8b8:	1e4b      	subs	r3, r1, #1
1000f8ba:	4199      	sbcs	r1, r3
1000f8bc:	b28b      	uxth	r3, r1
1000f8be:	2130      	movs	r1, #48	; 0x30
1000f8c0:	4001      	ands	r1, r0
1000f8c2:	2930      	cmp	r1, #48	; 0x30
1000f8c4:	d007      	beq.n	1000f8d6 <att_permissions+0x3a>
1000f8c6:	0641      	lsls	r1, r0, #25
1000f8c8:	d401      	bmi.n	1000f8ce <att_permissions+0x32>
1000f8ca:	0681      	lsls	r1, r0, #26
1000f8cc:	d501      	bpl.n	1000f8d2 <att_permissions+0x36>
1000f8ce:	4807      	ldr	r0, [pc, #28]	; (1000f8ec <att_permissions+0x50>)
1000f8d0:	e009      	b.n	1000f8e6 <att_permissions+0x4a>
1000f8d2:	06c1      	lsls	r1, r0, #27
1000f8d4:	d501      	bpl.n	1000f8da <att_permissions+0x3e>
1000f8d6:	4806      	ldr	r0, [pc, #24]	; (1000f8f0 <att_permissions+0x54>)
1000f8d8:	e005      	b.n	1000f8e6 <att_permissions+0x4a>
1000f8da:	2a00      	cmp	r2, #0
1000f8dc:	d001      	beq.n	1000f8e2 <att_permissions+0x46>
1000f8de:	2204      	movs	r2, #4
1000f8e0:	4313      	orrs	r3, r2
1000f8e2:	2080      	movs	r0, #128	; 0x80
1000f8e4:	0180      	lsls	r0, r0, #6
1000f8e6:	4318      	orrs	r0, r3
1000f8e8:	bd30      	pop	{r4, r5, pc}
1000f8ea:	46c0      	nop			; (mov r8, r8)
1000f8ec:	0000200c 	.word	0x0000200c
1000f8f0:	00002004 	.word	0x00002004

1000f8f4 <char_permissions>:
1000f8f4:	b530      	push	{r4, r5, lr}
1000f8f6:	2300      	movs	r3, #0
1000f8f8:	0784      	lsls	r4, r0, #30
1000f8fa:	d503      	bpl.n	1000f904 <char_permissions+0x10>
1000f8fc:	3301      	adds	r3, #1
1000f8fe:	4219      	tst	r1, r3
1000f900:	d100      	bne.n	1000f904 <char_permissions+0x10>
1000f902:	3302      	adds	r3, #2
1000f904:	0704      	lsls	r4, r0, #28
1000f906:	d508      	bpl.n	1000f91a <char_permissions+0x26>
1000f908:	06cc      	lsls	r4, r1, #27
1000f90a:	d501      	bpl.n	1000f910 <char_permissions+0x1c>
1000f90c:	2404      	movs	r4, #4
1000f90e:	e000      	b.n	1000f912 <char_permissions+0x1e>
1000f910:	240c      	movs	r4, #12
1000f912:	4323      	orrs	r3, r4
1000f914:	2480      	movs	r4, #128	; 0x80
1000f916:	01a4      	lsls	r4, r4, #6
1000f918:	4323      	orrs	r3, r4
1000f91a:	0684      	lsls	r4, r0, #26
1000f91c:	d506      	bpl.n	1000f92c <char_permissions+0x38>
1000f91e:	2406      	movs	r4, #6
1000f920:	4221      	tst	r1, r4
1000f922:	d101      	bne.n	1000f928 <char_permissions+0x34>
1000f924:	340a      	adds	r4, #10
1000f926:	e000      	b.n	1000f92a <char_permissions+0x36>
1000f928:	2430      	movs	r4, #48	; 0x30
1000f92a:	4323      	orrs	r3, r4
1000f92c:	06c4      	lsls	r4, r0, #27
1000f92e:	d506      	bpl.n	1000f93e <char_permissions+0x4a>
1000f930:	2406      	movs	r4, #6
1000f932:	4221      	tst	r1, r4
1000f934:	d101      	bne.n	1000f93a <char_permissions+0x46>
1000f936:	343a      	adds	r4, #58	; 0x3a
1000f938:	e000      	b.n	1000f93c <char_permissions+0x48>
1000f93a:	24c0      	movs	r4, #192	; 0xc0
1000f93c:	4323      	orrs	r3, r4
1000f93e:	2480      	movs	r4, #128	; 0x80
1000f940:	0064      	lsls	r4, r4, #1
1000f942:	4220      	tst	r0, r4
1000f944:	d000      	beq.n	1000f948 <char_permissions+0x54>
1000f946:	4323      	orrs	r3, r4
1000f948:	07c4      	lsls	r4, r0, #31
1000f94a:	d502      	bpl.n	1000f952 <char_permissions+0x5e>
1000f94c:	2480      	movs	r4, #128	; 0x80
1000f94e:	00a4      	lsls	r4, r4, #2
1000f950:	4323      	orrs	r3, r4
1000f952:	2404      	movs	r4, #4
1000f954:	4220      	tst	r0, r4
1000f956:	d006      	beq.n	1000f966 <char_permissions+0x72>
1000f958:	06cd      	lsls	r5, r1, #27
1000f95a:	d400      	bmi.n	1000f95e <char_permissions+0x6a>
1000f95c:	240c      	movs	r4, #12
1000f95e:	4323      	orrs	r3, r4
1000f960:	2480      	movs	r4, #128	; 0x80
1000f962:	0124      	lsls	r4, r4, #4
1000f964:	4323      	orrs	r3, r4
1000f966:	0644      	lsls	r4, r0, #25
1000f968:	d501      	bpl.n	1000f96e <char_permissions+0x7a>
1000f96a:	4c08      	ldr	r4, [pc, #32]	; (1000f98c <char_permissions+0x98>)
1000f96c:	4323      	orrs	r3, r4
1000f96e:	0600      	lsls	r0, r0, #24
1000f970:	d507      	bpl.n	1000f982 <char_permissions+0x8e>
1000f972:	2004      	movs	r0, #4
1000f974:	06c9      	lsls	r1, r1, #27
1000f976:	d400      	bmi.n	1000f97a <char_permissions+0x86>
1000f978:	200c      	movs	r0, #12
1000f97a:	4303      	orrs	r3, r0
1000f97c:	2084      	movs	r0, #132	; 0x84
1000f97e:	0180      	lsls	r0, r0, #6
1000f980:	4303      	orrs	r3, r0
1000f982:	0390      	lsls	r0, r2, #14
1000f984:	4303      	orrs	r3, r0
1000f986:	b298      	uxth	r0, r3
1000f988:	bd30      	pop	{r4, r5, pc}
1000f98a:	46c0      	nop			; (mov r8, r8)
1000f98c:	00001004 	.word	0x00001004

1000f990 <presentation_format_define>:
1000f990:	b507      	push	{r0, r1, r2, lr}
1000f992:	466a      	mov	r2, sp
1000f994:	780b      	ldrb	r3, [r1, #0]
1000f996:	7013      	strb	r3, [r2, #0]
1000f998:	784b      	ldrb	r3, [r1, #1]
1000f99a:	7053      	strb	r3, [r2, #1]
1000f99c:	884b      	ldrh	r3, [r1, #2]
1000f99e:	7093      	strb	r3, [r2, #2]
1000f9a0:	0a1b      	lsrs	r3, r3, #8
1000f9a2:	70d3      	strb	r3, [r2, #3]
1000f9a4:	790b      	ldrb	r3, [r1, #4]
1000f9a6:	7113      	strb	r3, [r2, #4]
1000f9a8:	88cb      	ldrh	r3, [r1, #6]
1000f9aa:	2107      	movs	r1, #7
1000f9ac:	7153      	strb	r3, [r2, #5]
1000f9ae:	0a1b      	lsrs	r3, r3, #8
1000f9b0:	7193      	strb	r3, [r2, #6]
1000f9b2:	4b01      	ldr	r3, [pc, #4]	; (1000f9b8 <presentation_format_define+0x28>)
1000f9b4:	4798      	blx	r3
1000f9b6:	bd0e      	pop	{r1, r2, r3, pc}
1000f9b8:	10011d25 	.word	0x10011d25

1000f9bc <db_addATT>:
1000f9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9be:	4c29      	ldr	r4, [pc, #164]	; (1000fa64 <db_addATT+0xa8>)
1000f9c0:	1c1d      	adds	r5, r3, #0
1000f9c2:	6823      	ldr	r3, [r4, #0]
1000f9c4:	9001      	str	r0, [sp, #4]
1000f9c6:	26d3      	movs	r6, #211	; 0xd3
1000f9c8:	2b00      	cmp	r3, #0
1000f9ca:	d048      	beq.n	1000fa5e <db_addATT+0xa2>
1000f9cc:	1c1e      	adds	r6, r3, #0
1000f9ce:	3e0c      	subs	r6, #12
1000f9d0:	6026      	str	r6, [r4, #0]
1000f9d2:	2900      	cmp	r1, #0
1000f9d4:	d005      	beq.n	1000f9e2 <db_addATT+0x26>
1000f9d6:	4f24      	ldr	r7, [pc, #144]	; (1000fa68 <db_addATT+0xac>)
1000f9d8:	46bc      	mov	ip, r7
1000f9da:	4660      	mov	r0, ip
1000f9dc:	683f      	ldr	r7, [r7, #0]
1000f9de:	18bf      	adds	r7, r7, r2
1000f9e0:	6007      	str	r7, [r0, #0]
1000f9e2:	4821      	ldr	r0, [pc, #132]	; (1000fa68 <db_addATT+0xac>)
1000f9e4:	6807      	ldr	r7, [r0, #0]
1000f9e6:	4684      	mov	ip, r0
1000f9e8:	42be      	cmp	r6, r7
1000f9ea:	d932      	bls.n	1000fa52 <db_addATT+0x96>
1000f9ec:	4668      	mov	r0, sp
1000f9ee:	8880      	ldrh	r0, [r0, #4]
1000f9f0:	3b0c      	subs	r3, #12
1000f9f2:	8018      	strh	r0, [r3, #0]
1000f9f4:	6823      	ldr	r3, [r4, #0]
1000f9f6:	2900      	cmp	r1, #0
1000f9f8:	d009      	beq.n	1000fa0e <db_addATT+0x52>
1000f9fa:	2a00      	cmp	r2, #0
1000f9fc:	d007      	beq.n	1000fa0e <db_addATT+0x52>
1000f9fe:	4660      	mov	r0, ip
1000fa00:	6800      	ldr	r0, [r0, #0]
1000fa02:	809a      	strh	r2, [r3, #4]
1000fa04:	1a80      	subs	r0, r0, r2
1000fa06:	6098      	str	r0, [r3, #8]
1000fa08:	4b18      	ldr	r3, [pc, #96]	; (1000fa6c <db_addATT+0xb0>)
1000fa0a:	4798      	blx	r3
1000fa0c:	e002      	b.n	1000fa14 <db_addATT+0x58>
1000fa0e:	2100      	movs	r1, #0
1000fa10:	809a      	strh	r2, [r3, #4]
1000fa12:	6099      	str	r1, [r3, #8]
1000fa14:	2300      	movs	r3, #0
1000fa16:	6822      	ldr	r2, [r4, #0]
1000fa18:	7093      	strb	r3, [r2, #2]
1000fa1a:	3303      	adds	r3, #3
1000fa1c:	402b      	ands	r3, r5
1000fa1e:	2b03      	cmp	r3, #3
1000fa20:	d001      	beq.n	1000fa26 <db_addATT+0x6a>
1000fa22:	076b      	lsls	r3, r5, #29
1000fa24:	d504      	bpl.n	1000fa30 <db_addATT+0x74>
1000fa26:	2101      	movs	r1, #1
1000fa28:	6822      	ldr	r2, [r4, #0]
1000fa2a:	7893      	ldrb	r3, [r2, #2]
1000fa2c:	430b      	orrs	r3, r1
1000fa2e:	7093      	strb	r3, [r2, #2]
1000fa30:	2330      	movs	r3, #48	; 0x30
1000fa32:	402b      	ands	r3, r5
1000fa34:	2b30      	cmp	r3, #48	; 0x30
1000fa36:	d001      	beq.n	1000fa3c <db_addATT+0x80>
1000fa38:	066b      	lsls	r3, r5, #25
1000fa3a:	d504      	bpl.n	1000fa46 <db_addATT+0x8a>
1000fa3c:	2102      	movs	r1, #2
1000fa3e:	6822      	ldr	r2, [r4, #0]
1000fa40:	7893      	ldrb	r3, [r2, #2]
1000fa42:	430b      	orrs	r3, r1
1000fa44:	7093      	strb	r3, [r2, #2]
1000fa46:	4a0a      	ldr	r2, [pc, #40]	; (1000fa70 <db_addATT+0xb4>)
1000fa48:	2600      	movs	r6, #0
1000fa4a:	6813      	ldr	r3, [r2, #0]
1000fa4c:	3301      	adds	r3, #1
1000fa4e:	6013      	str	r3, [r2, #0]
1000fa50:	e005      	b.n	1000fa5e <db_addATT+0xa2>
1000fa52:	6023      	str	r3, [r4, #0]
1000fa54:	2611      	movs	r6, #17
1000fa56:	2900      	cmp	r1, #0
1000fa58:	d001      	beq.n	1000fa5e <db_addATT+0xa2>
1000fa5a:	1aba      	subs	r2, r7, r2
1000fa5c:	6002      	str	r2, [r0, #0]
1000fa5e:	1c30      	adds	r0, r6, #0
1000fa60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fa62:	46c0      	nop			; (mov r8, r8)
1000fa64:	1001a024 	.word	0x1001a024
1000fa68:	1001a028 	.word	0x1001a028
1000fa6c:	10016253 	.word	0x10016253
1000fa70:	1001a02c 	.word	0x1001a02c

1000fa74 <user_description_define>:
1000fa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa76:	1c05      	adds	r5, r0, #0
1000fa78:	20cf      	movs	r0, #207	; 0xcf
1000fa7a:	2a00      	cmp	r2, #0
1000fa7c:	d01c      	beq.n	1000fab8 <user_description_define+0x44>
1000fa7e:	1c14      	adds	r4, r2, #0
1000fa80:	2203      	movs	r2, #3
1000fa82:	1c1e      	adds	r6, r3, #0
1000fa84:	400a      	ands	r2, r1
1000fa86:	1c0b      	adds	r3, r1, #0
1000fa88:	3a03      	subs	r2, #3
1000fa8a:	4251      	negs	r1, r2
1000fa8c:	4151      	adcs	r1, r2
1000fa8e:	075a      	lsls	r2, r3, #29
1000fa90:	0fd2      	lsrs	r2, r2, #31
1000fa92:	430a      	orrs	r2, r1
1000fa94:	03d2      	lsls	r2, r2, #15
1000fa96:	4f09      	ldr	r7, [pc, #36]	; (1000fabc <user_description_define+0x48>)
1000fa98:	1c28      	adds	r0, r5, #0
1000fa9a:	2a00      	cmp	r2, #0
1000fa9c:	d003      	beq.n	1000faa6 <user_description_define+0x32>
1000fa9e:	1c21      	adds	r1, r4, #0
1000faa0:	1c32      	adds	r2, r6, #0
1000faa2:	47b8      	blx	r7
1000faa4:	e008      	b.n	1000fab8 <user_description_define+0x44>
1000faa6:	1c11      	adds	r1, r2, #0
1000faa8:	47b8      	blx	r7
1000faaa:	2800      	cmp	r0, #0
1000faac:	d104      	bne.n	1000fab8 <user_description_define+0x44>
1000faae:	1c28      	adds	r0, r5, #0
1000fab0:	1c31      	adds	r1, r6, #0
1000fab2:	1c22      	adds	r2, r4, #0
1000fab4:	4b02      	ldr	r3, [pc, #8]	; (1000fac0 <user_description_define+0x4c>)
1000fab6:	4798      	blx	r3
1000fab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000faba:	46c0      	nop			; (mov r8, r8)
1000fabc:	1000f9bd 	.word	0x1000f9bd
1000fac0:	10011d25 	.word	0x10011d25

1000fac4 <at_ble_read_authorize_reply.part.1>:
1000fac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fac6:	4b09      	ldr	r3, [pc, #36]	; (1000faec <at_ble_read_authorize_reply.part.1+0x28>)
1000fac8:	1c05      	adds	r5, r0, #0
1000faca:	1c08      	adds	r0, r1, #0
1000facc:	1c0c      	adds	r4, r1, #0
1000face:	4798      	blx	r3
1000fad0:	2800      	cmp	r0, #0
1000fad2:	d009      	beq.n	1000fae8 <at_ble_read_authorize_reply.part.1+0x24>
1000fad4:	6882      	ldr	r2, [r0, #8]
1000fad6:	2a00      	cmp	r2, #0
1000fad8:	d006      	beq.n	1000fae8 <at_ble_read_authorize_reply.part.1+0x24>
1000fada:	8883      	ldrh	r3, [r0, #4]
1000fadc:	1c29      	adds	r1, r5, #0
1000fade:	9200      	str	r2, [sp, #0]
1000fae0:	1c20      	adds	r0, r4, #0
1000fae2:	2200      	movs	r2, #0
1000fae4:	4c02      	ldr	r4, [pc, #8]	; (1000faf0 <at_ble_read_authorize_reply.part.1+0x2c>)
1000fae6:	47a0      	blx	r4
1000fae8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000faea:	46c0      	nop			; (mov r8, r8)
1000faec:	1000f85d 	.word	0x1000f85d
1000faf0:	100117bd 	.word	0x100117bd

1000faf4 <internal_at_ble_service_define>:
1000faf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000faf6:	b08b      	sub	sp, #44	; 0x2c
1000faf8:	9306      	str	r3, [sp, #24]
1000fafa:	ab10      	add	r3, sp, #64	; 0x40
1000fafc:	9202      	str	r2, [sp, #8]
1000fafe:	cb04      	ldmia	r3!, {r2}
1000fb00:	1c05      	adds	r5, r0, #0
1000fb02:	881b      	ldrh	r3, [r3, #0]
1000fb04:	9105      	str	r1, [sp, #20]
1000fb06:	9303      	str	r3, [sp, #12]
1000fb08:	ab12      	add	r3, sp, #72	; 0x48
1000fb0a:	781b      	ldrb	r3, [r3, #0]
1000fb0c:	20cf      	movs	r0, #207	; 0xcf
1000fb0e:	9304      	str	r3, [sp, #16]
1000fb10:	2d00      	cmp	r5, #0
1000fb12:	d100      	bne.n	1000fb16 <internal_at_ble_service_define+0x22>
1000fb14:	e1ca      	b.n	1000feac <internal_at_ble_service_define+0x3b8>
1000fb16:	2900      	cmp	r1, #0
1000fb18:	d100      	bne.n	1000fb1c <internal_at_ble_service_define+0x28>
1000fb1a:	e1c7      	b.n	1000feac <internal_at_ble_service_define+0x3b8>
1000fb1c:	2a00      	cmp	r2, #0
1000fb1e:	d100      	bne.n	1000fb22 <internal_at_ble_service_define+0x2e>
1000fb20:	e1c4      	b.n	1000feac <internal_at_ble_service_define+0x3b8>
1000fb22:	9b03      	ldr	r3, [sp, #12]
1000fb24:	2b00      	cmp	r3, #0
1000fb26:	d100      	bne.n	1000fb2a <internal_at_ble_service_define+0x36>
1000fb28:	e1c0      	b.n	1000feac <internal_at_ble_service_define+0x3b8>
1000fb2a:	4bc9      	ldr	r3, [pc, #804]	; (1000fe50 <internal_at_ble_service_define+0x35c>)
1000fb2c:	3004      	adds	r0, #4
1000fb2e:	681e      	ldr	r6, [r3, #0]
1000fb30:	2e00      	cmp	r6, #0
1000fb32:	d100      	bne.n	1000fb36 <internal_at_ble_service_define+0x42>
1000fb34:	e1ba      	b.n	1000feac <internal_at_ble_service_define+0x3b8>
1000fb36:	2400      	movs	r4, #0
1000fb38:	4bc6      	ldr	r3, [pc, #792]	; (1000fe54 <internal_at_ble_service_define+0x360>)
1000fb3a:	8034      	strh	r4, [r6, #0]
1000fb3c:	881b      	ldrh	r3, [r3, #0]
1000fb3e:	1db7      	adds	r7, r6, #6
1000fb40:	1c21      	adds	r1, r4, #0
1000fb42:	2210      	movs	r2, #16
1000fb44:	8073      	strh	r3, [r6, #2]
1000fb46:	1c38      	adds	r0, r7, #0
1000fb48:	4bc3      	ldr	r3, [pc, #780]	; (1000fe58 <internal_at_ble_service_define+0x364>)
1000fb4a:	4798      	blx	r3
1000fb4c:	7828      	ldrb	r0, [r5, #0]
1000fb4e:	4bc3      	ldr	r3, [pc, #780]	; (1000fe5c <internal_at_ble_service_define+0x368>)
1000fb50:	4798      	blx	r3
1000fb52:	1c69      	adds	r1, r5, #1
1000fb54:	1c02      	adds	r2, r0, #0
1000fb56:	4bc2      	ldr	r3, [pc, #776]	; (1000fe60 <internal_at_ble_service_define+0x36c>)
1000fb58:	1c38      	adds	r0, r7, #0
1000fb5a:	4798      	blx	r3
1000fb5c:	2204      	movs	r2, #4
1000fb5e:	782b      	ldrb	r3, [r5, #0]
1000fb60:	9d02      	ldr	r5, [sp, #8]
1000fb62:	011b      	lsls	r3, r3, #4
1000fb64:	4313      	orrs	r3, r2
1000fb66:	9a04      	ldr	r2, [sp, #16]
1000fb68:	7174      	strb	r4, [r6, #5]
1000fb6a:	0192      	lsls	r2, r2, #6
1000fb6c:	4313      	orrs	r3, r2
1000fb6e:	7133      	strb	r3, [r6, #4]
1000fb70:	2316      	movs	r3, #22
1000fb72:	9a06      	ldr	r2, [sp, #24]
1000fb74:	3512      	adds	r5, #18
1000fb76:	4353      	muls	r3, r2
1000fb78:	9a02      	ldr	r2, [sp, #8]
1000fb7a:	3312      	adds	r3, #18
1000fb7c:	18d7      	adds	r7, r2, r3
1000fb7e:	42bd      	cmp	r5, r7
1000fb80:	d00f      	beq.n	1000fba2 <internal_at_ble_service_define+0xae>
1000fb82:	4bb8      	ldr	r3, [pc, #736]	; (1000fe64 <internal_at_ble_service_define+0x370>)
1000fb84:	8829      	ldrh	r1, [r5, #0]
1000fb86:	9300      	str	r3, [sp, #0]
1000fb88:	230e      	movs	r3, #14
1000fb8a:	aa06      	add	r2, sp, #24
1000fb8c:	189b      	adds	r3, r3, r2
1000fb8e:	9301      	str	r3, [sp, #4]
1000fb90:	4cb5      	ldr	r4, [pc, #724]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fb92:	1c30      	adds	r0, r6, #0
1000fb94:	2201      	movs	r2, #1
1000fb96:	2302      	movs	r3, #2
1000fb98:	47a0      	blx	r4
1000fb9a:	3516      	adds	r5, #22
1000fb9c:	1e04      	subs	r4, r0, #0
1000fb9e:	d0ee      	beq.n	1000fb7e <internal_at_ble_service_define+0x8a>
1000fba0:	e183      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fba2:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000fba4:	2300      	movs	r3, #0
1000fba6:	3714      	adds	r7, #20
1000fba8:	1c3d      	adds	r5, r7, #0
1000fbaa:	9302      	str	r3, [sp, #8]
1000fbac:	9b02      	ldr	r3, [sp, #8]
1000fbae:	9a03      	ldr	r2, [sp, #12]
1000fbb0:	4293      	cmp	r3, r2
1000fbb2:	db00      	blt.n	1000fbb6 <internal_at_ble_service_define+0xc2>
1000fbb4:	e0bf      	b.n	1000fd36 <internal_at_ble_service_define+0x242>
1000fbb6:	4bad      	ldr	r3, [pc, #692]	; (1000fe6c <internal_at_ble_service_define+0x378>)
1000fbb8:	aa06      	add	r2, sp, #24
1000fbba:	9300      	str	r3, [sp, #0]
1000fbbc:	230e      	movs	r3, #14
1000fbbe:	189b      	adds	r3, r3, r2
1000fbc0:	9301      	str	r3, [sp, #4]
1000fbc2:	4ca9      	ldr	r4, [pc, #676]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fbc4:	1c30      	adds	r0, r6, #0
1000fbc6:	2104      	movs	r1, #4
1000fbc8:	2201      	movs	r2, #1
1000fbca:	2302      	movs	r3, #2
1000fbcc:	47a0      	blx	r4
1000fbce:	1e04      	subs	r4, r0, #0
1000fbd0:	d000      	beq.n	1000fbd4 <internal_at_ble_service_define+0xe0>
1000fbd2:	e16a      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fbd4:	1c2b      	adds	r3, r5, #0
1000fbd6:	3b12      	subs	r3, #18
1000fbd8:	7b2c      	ldrb	r4, [r5, #12]
1000fbda:	781b      	ldrb	r3, [r3, #0]
1000fbdc:	1c21      	adds	r1, r4, #0
1000fbde:	1c1a      	adds	r2, r3, #0
1000fbe0:	9304      	str	r3, [sp, #16]
1000fbe2:	8828      	ldrh	r0, [r5, #0]
1000fbe4:	4ba2      	ldr	r3, [pc, #648]	; (1000fe70 <internal_at_ble_service_define+0x37c>)
1000fbe6:	4798      	blx	r3
1000fbe8:	2303      	movs	r3, #3
1000fbea:	4023      	ands	r3, r4
1000fbec:	3b03      	subs	r3, #3
1000fbee:	4259      	negs	r1, r3
1000fbf0:	4159      	adcs	r1, r3
1000fbf2:	2301      	movs	r3, #1
1000fbf4:	08a4      	lsrs	r4, r4, #2
1000fbf6:	401c      	ands	r4, r3
1000fbf8:	430c      	orrs	r4, r1
1000fbfa:	896b      	ldrh	r3, [r5, #10]
1000fbfc:	03e4      	lsls	r4, r4, #15
1000fbfe:	431c      	orrs	r4, r3
1000fc00:	9007      	str	r0, [sp, #28]
1000fc02:	4b96      	ldr	r3, [pc, #600]	; (1000fe5c <internal_at_ble_service_define+0x368>)
1000fc04:	9804      	ldr	r0, [sp, #16]
1000fc06:	4798      	blx	r3
1000fc08:	1c2a      	adds	r2, r5, #0
1000fc0a:	3a11      	subs	r2, #17
1000fc0c:	9200      	str	r2, [sp, #0]
1000fc0e:	3a03      	subs	r2, #3
1000fc10:	1c03      	adds	r3, r0, #0
1000fc12:	9201      	str	r2, [sp, #4]
1000fc14:	1c21      	adds	r1, r4, #0
1000fc16:	1c30      	adds	r0, r6, #0
1000fc18:	4c93      	ldr	r4, [pc, #588]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fc1a:	9a07      	ldr	r2, [sp, #28]
1000fc1c:	47a0      	blx	r4
1000fc1e:	1e04      	subs	r4, r0, #0
1000fc20:	d000      	beq.n	1000fc24 <internal_at_ble_service_define+0x130>
1000fc22:	e142      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fc24:	22c0      	movs	r2, #192	; 0xc0
1000fc26:	882b      	ldrh	r3, [r5, #0]
1000fc28:	0052      	lsls	r2, r2, #1
1000fc2a:	4213      	tst	r3, r2
1000fc2c:	d104      	bne.n	1000fc38 <internal_at_ble_service_define+0x144>
1000fc2e:	8aab      	ldrh	r3, [r5, #20]
1000fc30:	9304      	str	r3, [sp, #16]
1000fc32:	2b00      	cmp	r3, #0
1000fc34:	d116      	bne.n	1000fc64 <internal_at_ble_service_define+0x170>
1000fc36:	e03a      	b.n	1000fcae <internal_at_ble_service_define+0x1ba>
1000fc38:	2201      	movs	r2, #1
1000fc3a:	09d9      	lsrs	r1, r3, #7
1000fc3c:	4011      	ands	r1, r2
1000fc3e:	05db      	lsls	r3, r3, #23
1000fc40:	d501      	bpl.n	1000fc46 <internal_at_ble_service_define+0x152>
1000fc42:	2302      	movs	r3, #2
1000fc44:	4319      	orrs	r1, r3
1000fc46:	4b8b      	ldr	r3, [pc, #556]	; (1000fe74 <internal_at_ble_service_define+0x380>)
1000fc48:	aa06      	add	r2, sp, #24
1000fc4a:	9300      	str	r3, [sp, #0]
1000fc4c:	230e      	movs	r3, #14
1000fc4e:	189b      	adds	r3, r3, r2
1000fc50:	9301      	str	r3, [sp, #4]
1000fc52:	4c85      	ldr	r4, [pc, #532]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fc54:	0209      	lsls	r1, r1, #8
1000fc56:	1c30      	adds	r0, r6, #0
1000fc58:	2201      	movs	r2, #1
1000fc5a:	2302      	movs	r3, #2
1000fc5c:	47a0      	blx	r4
1000fc5e:	1e04      	subs	r4, r0, #0
1000fc60:	d0e5      	beq.n	1000fc2e <internal_at_ble_service_define+0x13a>
1000fc62:	e122      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fc64:	2380      	movs	r3, #128	; 0x80
1000fc66:	882a      	ldrh	r2, [r5, #0]
1000fc68:	7f2c      	ldrb	r4, [r5, #28]
1000fc6a:	005b      	lsls	r3, r3, #1
1000fc6c:	401a      	ands	r2, r3
1000fc6e:	1c20      	adds	r0, r4, #0
1000fc70:	2101      	movs	r1, #1
1000fc72:	2a00      	cmp	r2, #0
1000fc74:	d000      	beq.n	1000fc78 <internal_at_ble_service_define+0x184>
1000fc76:	1c0a      	adds	r2, r1, #0
1000fc78:	4b7f      	ldr	r3, [pc, #508]	; (1000fe78 <internal_at_ble_service_define+0x384>)
1000fc7a:	4798      	blx	r3
1000fc7c:	2203      	movs	r2, #3
1000fc7e:	4022      	ands	r2, r4
1000fc80:	3a03      	subs	r2, #3
1000fc82:	4251      	negs	r1, r2
1000fc84:	4151      	adcs	r1, r2
1000fc86:	4b7d      	ldr	r3, [pc, #500]	; (1000fe7c <internal_at_ble_service_define+0x388>)
1000fc88:	1c0a      	adds	r2, r1, #0
1000fc8a:	9300      	str	r3, [sp, #0]
1000fc8c:	1c2b      	adds	r3, r5, #0
1000fc8e:	0764      	lsls	r4, r4, #29
1000fc90:	0fe4      	lsrs	r4, r4, #31
1000fc92:	4322      	orrs	r2, r4
1000fc94:	03d2      	lsls	r2, r2, #15
1000fc96:	4310      	orrs	r0, r2
1000fc98:	3320      	adds	r3, #32
1000fc9a:	b282      	uxth	r2, r0
1000fc9c:	9301      	str	r3, [sp, #4]
1000fc9e:	4c72      	ldr	r4, [pc, #456]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fca0:	1c30      	adds	r0, r6, #0
1000fca2:	9904      	ldr	r1, [sp, #16]
1000fca4:	2302      	movs	r3, #2
1000fca6:	47a0      	blx	r4
1000fca8:	1e04      	subs	r4, r0, #0
1000fcaa:	d000      	beq.n	1000fcae <internal_at_ble_service_define+0x1ba>
1000fcac:	e0fd      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fcae:	2101      	movs	r1, #1
1000fcb0:	882b      	ldrh	r3, [r5, #0]
1000fcb2:	420b      	tst	r3, r1
1000fcb4:	d011      	beq.n	1000fcda <internal_at_ble_service_define+0x1e6>
1000fcb6:	7fa8      	ldrb	r0, [r5, #30]
1000fcb8:	4b6f      	ldr	r3, [pc, #444]	; (1000fe78 <internal_at_ble_service_define+0x384>)
1000fcba:	2200      	movs	r2, #0
1000fcbc:	4798      	blx	r3
1000fcbe:	4b70      	ldr	r3, [pc, #448]	; (1000fe80 <internal_at_ble_service_define+0x38c>)
1000fcc0:	1c02      	adds	r2, r0, #0
1000fcc2:	9300      	str	r3, [sp, #0]
1000fcc4:	1c2b      	adds	r3, r5, #0
1000fcc6:	3324      	adds	r3, #36	; 0x24
1000fcc8:	9301      	str	r3, [sp, #4]
1000fcca:	4c67      	ldr	r4, [pc, #412]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fccc:	1c30      	adds	r0, r6, #0
1000fcce:	496d      	ldr	r1, [pc, #436]	; (1000fe84 <internal_at_ble_service_define+0x390>)
1000fcd0:	2302      	movs	r3, #2
1000fcd2:	47a0      	blx	r4
1000fcd4:	1e04      	subs	r4, r0, #0
1000fcd6:	d000      	beq.n	1000fcda <internal_at_ble_service_define+0x1e6>
1000fcd8:	e0e7      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fcda:	2330      	movs	r3, #48	; 0x30
1000fcdc:	882a      	ldrh	r2, [r5, #0]
1000fcde:	421a      	tst	r2, r3
1000fce0:	d012      	beq.n	1000fd08 <internal_at_ble_service_define+0x214>
1000fce2:	2101      	movs	r1, #1
1000fce4:	7f68      	ldrb	r0, [r5, #29]
1000fce6:	1c0a      	adds	r2, r1, #0
1000fce8:	4b63      	ldr	r3, [pc, #396]	; (1000fe78 <internal_at_ble_service_define+0x384>)
1000fcea:	4798      	blx	r3
1000fcec:	4b66      	ldr	r3, [pc, #408]	; (1000fe88 <internal_at_ble_service_define+0x394>)
1000fcee:	1c02      	adds	r2, r0, #0
1000fcf0:	9300      	str	r3, [sp, #0]
1000fcf2:	1c2b      	adds	r3, r5, #0
1000fcf4:	3322      	adds	r3, #34	; 0x22
1000fcf6:	9301      	str	r3, [sp, #4]
1000fcf8:	4c5b      	ldr	r4, [pc, #364]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fcfa:	1c30      	adds	r0, r6, #0
1000fcfc:	4961      	ldr	r1, [pc, #388]	; (1000fe84 <internal_at_ble_service_define+0x390>)
1000fcfe:	2302      	movs	r3, #2
1000fd00:	47a0      	blx	r4
1000fd02:	1e04      	subs	r4, r0, #0
1000fd04:	d000      	beq.n	1000fd08 <internal_at_ble_service_define+0x214>
1000fd06:	e0d0      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fd08:	69ab      	ldr	r3, [r5, #24]
1000fd0a:	2b00      	cmp	r3, #0
1000fd0c:	d00e      	beq.n	1000fd2c <internal_at_ble_service_define+0x238>
1000fd0e:	4b5f      	ldr	r3, [pc, #380]	; (1000fe8c <internal_at_ble_service_define+0x398>)
1000fd10:	aa06      	add	r2, sp, #24
1000fd12:	9300      	str	r3, [sp, #0]
1000fd14:	230e      	movs	r3, #14
1000fd16:	189b      	adds	r3, r3, r2
1000fd18:	9301      	str	r3, [sp, #4]
1000fd1a:	4c53      	ldr	r4, [pc, #332]	; (1000fe68 <internal_at_ble_service_define+0x374>)
1000fd1c:	1c30      	adds	r0, r6, #0
1000fd1e:	2107      	movs	r1, #7
1000fd20:	2201      	movs	r2, #1
1000fd22:	2302      	movs	r3, #2
1000fd24:	47a0      	blx	r4
1000fd26:	1e04      	subs	r4, r0, #0
1000fd28:	d000      	beq.n	1000fd2c <internal_at_ble_service_define+0x238>
1000fd2a:	e0be      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fd2c:	9b02      	ldr	r3, [sp, #8]
1000fd2e:	353c      	adds	r5, #60	; 0x3c
1000fd30:	3301      	adds	r3, #1
1000fd32:	9302      	str	r3, [sp, #8]
1000fd34:	e73a      	b.n	1000fbac <internal_at_ble_service_define+0xb8>
1000fd36:	1c30      	adds	r0, r6, #0
1000fd38:	4b55      	ldr	r3, [pc, #340]	; (1000fe90 <internal_at_ble_service_define+0x39c>)
1000fd3a:	4798      	blx	r3
1000fd3c:	1e04      	subs	r4, r0, #0
1000fd3e:	d000      	beq.n	1000fd42 <internal_at_ble_service_define+0x24e>
1000fd40:	e0b3      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fd42:	8833      	ldrh	r3, [r6, #0]
1000fd44:	9a05      	ldr	r2, [sp, #20]
1000fd46:	8013      	strh	r3, [r2, #0]
1000fd48:	8836      	ldrh	r6, [r6, #0]
1000fd4a:	9b06      	ldr	r3, [sp, #24]
1000fd4c:	9a03      	ldr	r2, [sp, #12]
1000fd4e:	18f6      	adds	r6, r6, r3
1000fd50:	b2b3      	uxth	r3, r6
1000fd52:	9302      	str	r3, [sp, #8]
1000fd54:	233c      	movs	r3, #60	; 0x3c
1000fd56:	4353      	muls	r3, r2
1000fd58:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000fd5a:	3314      	adds	r3, #20
1000fd5c:	18d3      	adds	r3, r2, r3
1000fd5e:	9304      	str	r3, [sp, #16]
1000fd60:	9b04      	ldr	r3, [sp, #16]
1000fd62:	429f      	cmp	r7, r3
1000fd64:	d100      	bne.n	1000fd68 <internal_at_ble_service_define+0x274>
1000fd66:	e0a0      	b.n	1000feaa <internal_at_ble_service_define+0x3b6>
1000fd68:	9b02      	ldr	r3, [sp, #8]
1000fd6a:	1c9d      	adds	r5, r3, #2
1000fd6c:	1c3b      	adds	r3, r7, #0
1000fd6e:	b2ad      	uxth	r5, r5
1000fd70:	3b14      	subs	r3, #20
1000fd72:	801d      	strh	r5, [r3, #0]
1000fd74:	9303      	str	r3, [sp, #12]
1000fd76:	893b      	ldrh	r3, [r7, #8]
1000fd78:	2b00      	cmp	r3, #0
1000fd7a:	d108      	bne.n	1000fd8e <internal_at_ble_service_define+0x29a>
1000fd7c:	23c0      	movs	r3, #192	; 0xc0
1000fd7e:	883a      	ldrh	r2, [r7, #0]
1000fd80:	005b      	lsls	r3, r3, #1
1000fd82:	421a      	tst	r2, r3
1000fd84:	d026      	beq.n	1000fdd4 <internal_at_ble_service_define+0x2e0>
1000fd86:	9e02      	ldr	r6, [sp, #8]
1000fd88:	3603      	adds	r6, #3
1000fd8a:	b2b5      	uxth	r5, r6
1000fd8c:	e022      	b.n	1000fdd4 <internal_at_ble_service_define+0x2e0>
1000fd8e:	2103      	movs	r1, #3
1000fd90:	7b3b      	ldrb	r3, [r7, #12]
1000fd92:	4019      	ands	r1, r3
1000fd94:	3903      	subs	r1, #3
1000fd96:	424a      	negs	r2, r1
1000fd98:	414a      	adcs	r2, r1
1000fd9a:	0759      	lsls	r1, r3, #29
1000fd9c:	0fc9      	lsrs	r1, r1, #31
1000fd9e:	4311      	orrs	r1, r2
1000fda0:	03c9      	lsls	r1, r1, #15
1000fda2:	897a      	ldrh	r2, [r7, #10]
1000fda4:	2900      	cmp	r1, #0
1000fda6:	d007      	beq.n	1000fdb8 <internal_at_ble_service_define+0x2c4>
1000fda8:	6879      	ldr	r1, [r7, #4]
1000fdaa:	2900      	cmp	r1, #0
1000fdac:	d100      	bne.n	1000fdb0 <internal_at_ble_service_define+0x2bc>
1000fdae:	4939      	ldr	r1, [pc, #228]	; (1000fe94 <internal_at_ble_service_define+0x3a0>)
1000fdb0:	1c28      	adds	r0, r5, #0
1000fdb2:	4e39      	ldr	r6, [pc, #228]	; (1000fe98 <internal_at_ble_service_define+0x3a4>)
1000fdb4:	47b0      	blx	r6
1000fdb6:	e00a      	b.n	1000fdce <internal_at_ble_service_define+0x2da>
1000fdb8:	1c28      	adds	r0, r5, #0
1000fdba:	4e37      	ldr	r6, [pc, #220]	; (1000fe98 <internal_at_ble_service_define+0x3a4>)
1000fdbc:	47b0      	blx	r6
1000fdbe:	2800      	cmp	r0, #0
1000fdc0:	d172      	bne.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fdc2:	9b03      	ldr	r3, [sp, #12]
1000fdc4:	8939      	ldrh	r1, [r7, #8]
1000fdc6:	8818      	ldrh	r0, [r3, #0]
1000fdc8:	687a      	ldr	r2, [r7, #4]
1000fdca:	4b34      	ldr	r3, [pc, #208]	; (1000fe9c <internal_at_ble_service_define+0x3a8>)
1000fdcc:	4798      	blx	r3
1000fdce:	2800      	cmp	r0, #0
1000fdd0:	d0d4      	beq.n	1000fd7c <internal_at_ble_service_define+0x288>
1000fdd2:	e069      	b.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fdd4:	8abb      	ldrh	r3, [r7, #20]
1000fdd6:	2b00      	cmp	r3, #0
1000fdd8:	d00a      	beq.n	1000fdf0 <internal_at_ble_service_define+0x2fc>
1000fdda:	3501      	adds	r5, #1
1000fddc:	b2ad      	uxth	r5, r5
1000fdde:	843d      	strh	r5, [r7, #32]
1000fde0:	7f39      	ldrb	r1, [r7, #28]
1000fde2:	8afb      	ldrh	r3, [r7, #22]
1000fde4:	1c28      	adds	r0, r5, #0
1000fde6:	693a      	ldr	r2, [r7, #16]
1000fde8:	4e2d      	ldr	r6, [pc, #180]	; (1000fea0 <internal_at_ble_service_define+0x3ac>)
1000fdea:	47b0      	blx	r6
1000fdec:	2800      	cmp	r0, #0
1000fdee:	d15b      	bne.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fdf0:	883b      	ldrh	r3, [r7, #0]
1000fdf2:	07db      	lsls	r3, r3, #31
1000fdf4:	d50d      	bpl.n	1000fe12 <internal_at_ble_service_define+0x31e>
1000fdf6:	2200      	movs	r2, #0
1000fdf8:	3501      	adds	r5, #1
1000fdfa:	b2ad      	uxth	r5, r5
1000fdfc:	a909      	add	r1, sp, #36	; 0x24
1000fdfe:	84bd      	strh	r5, [r7, #36]	; 0x24
1000fe00:	7fbb      	ldrb	r3, [r7, #30]
1000fe02:	1c28      	adds	r0, r5, #0
1000fe04:	700a      	strb	r2, [r1, #0]
1000fe06:	704a      	strb	r2, [r1, #1]
1000fe08:	4e23      	ldr	r6, [pc, #140]	; (1000fe98 <internal_at_ble_service_define+0x3a4>)
1000fe0a:	3202      	adds	r2, #2
1000fe0c:	47b0      	blx	r6
1000fe0e:	2800      	cmp	r0, #0
1000fe10:	d14a      	bne.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fe12:	2330      	movs	r3, #48	; 0x30
1000fe14:	883a      	ldrh	r2, [r7, #0]
1000fe16:	421a      	tst	r2, r3
1000fe18:	d00d      	beq.n	1000fe36 <internal_at_ble_service_define+0x342>
1000fe1a:	2200      	movs	r2, #0
1000fe1c:	3501      	adds	r5, #1
1000fe1e:	b2ad      	uxth	r5, r5
1000fe20:	a909      	add	r1, sp, #36	; 0x24
1000fe22:	847d      	strh	r5, [r7, #34]	; 0x22
1000fe24:	7f7b      	ldrb	r3, [r7, #29]
1000fe26:	1c28      	adds	r0, r5, #0
1000fe28:	700a      	strb	r2, [r1, #0]
1000fe2a:	704a      	strb	r2, [r1, #1]
1000fe2c:	4e1a      	ldr	r6, [pc, #104]	; (1000fe98 <internal_at_ble_service_define+0x3a4>)
1000fe2e:	3202      	adds	r2, #2
1000fe30:	47b0      	blx	r6
1000fe32:	2800      	cmp	r0, #0
1000fe34:	d138      	bne.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fe36:	69b9      	ldr	r1, [r7, #24]
1000fe38:	2900      	cmp	r1, #0
1000fe3a:	d006      	beq.n	1000fe4a <internal_at_ble_service_define+0x356>
1000fe3c:	3501      	adds	r5, #1
1000fe3e:	b2ad      	uxth	r5, r5
1000fe40:	1c28      	adds	r0, r5, #0
1000fe42:	4b18      	ldr	r3, [pc, #96]	; (1000fea4 <internal_at_ble_service_define+0x3b0>)
1000fe44:	4798      	blx	r3
1000fe46:	2800      	cmp	r0, #0
1000fe48:	d12e      	bne.n	1000fea8 <internal_at_ble_service_define+0x3b4>
1000fe4a:	373c      	adds	r7, #60	; 0x3c
1000fe4c:	9502      	str	r5, [sp, #8]
1000fe4e:	e787      	b.n	1000fd60 <internal_at_ble_service_define+0x26c>
1000fe50:	1001a034 	.word	0x1001a034
1000fe54:	1001af88 	.word	0x1001af88
1000fe58:	10016265 	.word	0x10016265
1000fe5c:	1000f829 	.word	0x1000f829
1000fe60:	10016253 	.word	0x10016253
1000fe64:	10018372 	.word	0x10018372
1000fe68:	10011cb5 	.word	0x10011cb5
1000fe6c:	10018374 	.word	0x10018374
1000fe70:	1000f8f5 	.word	0x1000f8f5
1000fe74:	10018370 	.word	0x10018370
1000fe78:	1000f89d 	.word	0x1000f89d
1000fe7c:	1001836c 	.word	0x1001836c
1000fe80:	1001836e 	.word	0x1001836e
1000fe84:	00008002 	.word	0x00008002
1000fe88:	10018368 	.word	0x10018368
1000fe8c:	1001836a 	.word	0x1001836a
1000fe90:	10011ba9 	.word	0x10011ba9
1000fe94:	1001a020 	.word	0x1001a020
1000fe98:	1000f9bd 	.word	0x1000f9bd
1000fe9c:	10011d25 	.word	0x10011d25
1000fea0:	1000fa75 	.word	0x1000fa75
1000fea4:	1000f991 	.word	0x1000f991
1000fea8:	1c04      	adds	r4, r0, #0
1000feaa:	1c20      	adds	r0, r4, #0
1000feac:	b00b      	add	sp, #44	; 0x2c
1000feae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000feb0 <initi_gatt_server_module>:
1000feb0:	2300      	movs	r3, #0
1000feb2:	4a07      	ldr	r2, [pc, #28]	; (1000fed0 <initi_gatt_server_module+0x20>)
1000feb4:	7013      	strb	r3, [r2, #0]
1000feb6:	4a07      	ldr	r2, [pc, #28]	; (1000fed4 <initi_gatt_server_module+0x24>)
1000feb8:	6013      	str	r3, [r2, #0]
1000feba:	4a07      	ldr	r2, [pc, #28]	; (1000fed8 <initi_gatt_server_module+0x28>)
1000febc:	6013      	str	r3, [r2, #0]
1000febe:	4a07      	ldr	r2, [pc, #28]	; (1000fedc <initi_gatt_server_module+0x2c>)
1000fec0:	6013      	str	r3, [r2, #0]
1000fec2:	4a07      	ldr	r2, [pc, #28]	; (1000fee0 <initi_gatt_server_module+0x30>)
1000fec4:	6013      	str	r3, [r2, #0]
1000fec6:	4a07      	ldr	r2, [pc, #28]	; (1000fee4 <initi_gatt_server_module+0x34>)
1000fec8:	6013      	str	r3, [r2, #0]
1000feca:	4a07      	ldr	r2, [pc, #28]	; (1000fee8 <initi_gatt_server_module+0x38>)
1000fecc:	6013      	str	r3, [r2, #0]
1000fece:	4770      	bx	lr
1000fed0:	1001a020 	.word	0x1001a020
1000fed4:	1001a030 	.word	0x1001a030
1000fed8:	1001a02c 	.word	0x1001a02c
1000fedc:	1001a01c 	.word	0x1001a01c
1000fee0:	1001a028 	.word	0x1001a028
1000fee4:	1001a024 	.word	0x1001a024
1000fee8:	1001a034 	.word	0x1001a034

1000feec <db_init>:
1000feec:	4b0a      	ldr	r3, [pc, #40]	; (1000ff18 <db_init+0x2c>)
1000feee:	4a0b      	ldr	r2, [pc, #44]	; (1000ff1c <db_init+0x30>)
1000fef0:	6018      	str	r0, [r3, #0]
1000fef2:	084b      	lsrs	r3, r1, #1
1000fef4:	6013      	str	r3, [r2, #0]
1000fef6:	4a0a      	ldr	r2, [pc, #40]	; (1000ff20 <db_init+0x34>)
1000fef8:	18c3      	adds	r3, r0, r3
1000fefa:	6013      	str	r3, [r2, #0]
1000fefc:	4a09      	ldr	r2, [pc, #36]	; (1000ff24 <db_init+0x38>)
1000fefe:	1841      	adds	r1, r0, r1
1000ff00:	6013      	str	r3, [r2, #0]
1000ff02:	2303      	movs	r3, #3
1000ff04:	2200      	movs	r2, #0
1000ff06:	3103      	adds	r1, #3
1000ff08:	4399      	bics	r1, r3
1000ff0a:	4b07      	ldr	r3, [pc, #28]	; (1000ff28 <db_init+0x3c>)
1000ff0c:	3904      	subs	r1, #4
1000ff0e:	6019      	str	r1, [r3, #0]
1000ff10:	4b06      	ldr	r3, [pc, #24]	; (1000ff2c <db_init+0x40>)
1000ff12:	601a      	str	r2, [r3, #0]
1000ff14:	4770      	bx	lr
1000ff16:	46c0      	nop			; (mov r8, r8)
1000ff18:	1001a034 	.word	0x1001a034
1000ff1c:	1001a030 	.word	0x1001a030
1000ff20:	1001a01c 	.word	0x1001a01c
1000ff24:	1001a028 	.word	0x1001a028
1000ff28:	1001a024 	.word	0x1001a024
1000ff2c:	1001a02c 	.word	0x1001a02c

1000ff30 <at_ble_primary_service_define>:
1000ff30:	b530      	push	{r4, r5, lr}
1000ff32:	b085      	sub	sp, #20
1000ff34:	ac08      	add	r4, sp, #32
1000ff36:	cc20      	ldmia	r4!, {r5}
1000ff38:	8824      	ldrh	r4, [r4, #0]
1000ff3a:	9500      	str	r5, [sp, #0]
1000ff3c:	9401      	str	r4, [sp, #4]
1000ff3e:	2401      	movs	r4, #1
1000ff40:	9402      	str	r4, [sp, #8]
1000ff42:	4c02      	ldr	r4, [pc, #8]	; (1000ff4c <at_ble_primary_service_define+0x1c>)
1000ff44:	47a0      	blx	r4
1000ff46:	b005      	add	sp, #20
1000ff48:	bd30      	pop	{r4, r5, pc}
1000ff4a:	46c0      	nop			; (mov r8, r8)
1000ff4c:	1000faf5 	.word	0x1000faf5

1000ff50 <at_ble_characteristic_value_set>:
1000ff50:	b570      	push	{r4, r5, r6, lr}
1000ff52:	4b0b      	ldr	r3, [pc, #44]	; (1000ff80 <at_ble_characteristic_value_set+0x30>)
1000ff54:	1c06      	adds	r6, r0, #0
1000ff56:	1c0c      	adds	r4, r1, #0
1000ff58:	1c15      	adds	r5, r2, #0
1000ff5a:	4798      	blx	r3
1000ff5c:	2800      	cmp	r0, #0
1000ff5e:	d008      	beq.n	1000ff72 <at_ble_characteristic_value_set+0x22>
1000ff60:	6880      	ldr	r0, [r0, #8]
1000ff62:	2800      	cmp	r0, #0
1000ff64:	d005      	beq.n	1000ff72 <at_ble_characteristic_value_set+0x22>
1000ff66:	1c21      	adds	r1, r4, #0
1000ff68:	1c2a      	adds	r2, r5, #0
1000ff6a:	4b06      	ldr	r3, [pc, #24]	; (1000ff84 <at_ble_characteristic_value_set+0x34>)
1000ff6c:	4798      	blx	r3
1000ff6e:	2000      	movs	r0, #0
1000ff70:	e004      	b.n	1000ff7c <at_ble_characteristic_value_set+0x2c>
1000ff72:	1c30      	adds	r0, r6, #0
1000ff74:	1c29      	adds	r1, r5, #0
1000ff76:	1c22      	adds	r2, r4, #0
1000ff78:	4b03      	ldr	r3, [pc, #12]	; (1000ff88 <at_ble_characteristic_value_set+0x38>)
1000ff7a:	4798      	blx	r3
1000ff7c:	bd70      	pop	{r4, r5, r6, pc}
1000ff7e:	46c0      	nop			; (mov r8, r8)
1000ff80:	1000f85d 	.word	0x1000f85d
1000ff84:	10016253 	.word	0x10016253
1000ff88:	10011d25 	.word	0x10011d25

1000ff8c <at_ble_characteristic_value_get>:
1000ff8c:	b570      	push	{r4, r5, r6, lr}
1000ff8e:	4b0c      	ldr	r3, [pc, #48]	; (1000ffc0 <at_ble_characteristic_value_get+0x34>)
1000ff90:	1c06      	adds	r6, r0, #0
1000ff92:	1c0c      	adds	r4, r1, #0
1000ff94:	1c15      	adds	r5, r2, #0
1000ff96:	4798      	blx	r3
1000ff98:	2800      	cmp	r0, #0
1000ff9a:	d00b      	beq.n	1000ffb4 <at_ble_characteristic_value_get+0x28>
1000ff9c:	6883      	ldr	r3, [r0, #8]
1000ff9e:	2b00      	cmp	r3, #0
1000ffa0:	d008      	beq.n	1000ffb4 <at_ble_characteristic_value_get+0x28>
1000ffa2:	8883      	ldrh	r3, [r0, #4]
1000ffa4:	802b      	strh	r3, [r5, #0]
1000ffa6:	8882      	ldrh	r2, [r0, #4]
1000ffa8:	6881      	ldr	r1, [r0, #8]
1000ffaa:	4b06      	ldr	r3, [pc, #24]	; (1000ffc4 <at_ble_characteristic_value_get+0x38>)
1000ffac:	1c20      	adds	r0, r4, #0
1000ffae:	4798      	blx	r3
1000ffb0:	2000      	movs	r0, #0
1000ffb2:	e004      	b.n	1000ffbe <at_ble_characteristic_value_get+0x32>
1000ffb4:	1c30      	adds	r0, r6, #0
1000ffb6:	1c29      	adds	r1, r5, #0
1000ffb8:	1c22      	adds	r2, r4, #0
1000ffba:	4b03      	ldr	r3, [pc, #12]	; (1000ffc8 <at_ble_characteristic_value_get+0x3c>)
1000ffbc:	4798      	blx	r3
1000ffbe:	bd70      	pop	{r4, r5, r6, pc}
1000ffc0:	1000f85d 	.word	0x1000f85d
1000ffc4:	10016253 	.word	0x10016253
1000ffc8:	10011db1 	.word	0x10011db1

1000ffcc <at_ble_write_authorize_reply>:
1000ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffce:	b085      	sub	sp, #20
1000ffd0:	1c04      	adds	r4, r0, #0
1000ffd2:	9101      	str	r1, [sp, #4]
1000ffd4:	2900      	cmp	r1, #0
1000ffd6:	d128      	bne.n	1001002a <at_ble_write_authorize_reply+0x5e>
1000ffd8:	8843      	ldrh	r3, [r0, #2]
1000ffda:	1c27      	adds	r7, r4, #0
1000ffdc:	9300      	str	r3, [sp, #0]
1000ffde:	1c18      	adds	r0, r3, #0
1000ffe0:	4b16      	ldr	r3, [pc, #88]	; (1001003c <at_ble_write_authorize_reply+0x70>)
1000ffe2:	4798      	blx	r3
1000ffe4:	3708      	adds	r7, #8
1000ffe6:	2800      	cmp	r0, #0
1000ffe8:	d009      	beq.n	1000fffe <at_ble_write_authorize_reply+0x32>
1000ffea:	6880      	ldr	r0, [r0, #8]
1000ffec:	2800      	cmp	r0, #0
1000ffee:	d006      	beq.n	1000fffe <at_ble_write_authorize_reply+0x32>
1000fff0:	88a3      	ldrh	r3, [r4, #4]
1000fff2:	88e2      	ldrh	r2, [r4, #6]
1000fff4:	18c0      	adds	r0, r0, r3
1000fff6:	1c39      	adds	r1, r7, #0
1000fff8:	4b11      	ldr	r3, [pc, #68]	; (10010040 <at_ble_write_authorize_reply+0x74>)
1000fffa:	4798      	blx	r3
1000fffc:	e015      	b.n	1001002a <at_ble_write_authorize_reply+0x5e>
1000fffe:	ab02      	add	r3, sp, #8
10010000:	1d9e      	adds	r6, r3, #6
10010002:	2300      	movs	r3, #0
10010004:	4d0f      	ldr	r5, [pc, #60]	; (10010044 <at_ble_write_authorize_reply+0x78>)
10010006:	8033      	strh	r3, [r6, #0]
10010008:	6829      	ldr	r1, [r5, #0]
1001000a:	1c32      	adds	r2, r6, #0
1001000c:	4b0e      	ldr	r3, [pc, #56]	; (10010048 <at_ble_write_authorize_reply+0x7c>)
1001000e:	9800      	ldr	r0, [sp, #0]
10010010:	4798      	blx	r3
10010012:	682b      	ldr	r3, [r5, #0]
10010014:	88a0      	ldrh	r0, [r4, #4]
10010016:	88e2      	ldrh	r2, [r4, #6]
10010018:	1818      	adds	r0, r3, r0
1001001a:	1c39      	adds	r1, r7, #0
1001001c:	4b08      	ldr	r3, [pc, #32]	; (10010040 <at_ble_write_authorize_reply+0x74>)
1001001e:	4798      	blx	r3
10010020:	8860      	ldrh	r0, [r4, #2]
10010022:	8832      	ldrh	r2, [r6, #0]
10010024:	6829      	ldr	r1, [r5, #0]
10010026:	4b09      	ldr	r3, [pc, #36]	; (1001004c <at_ble_write_authorize_reply+0x80>)
10010028:	4798      	blx	r3
1001002a:	8860      	ldrh	r0, [r4, #2]
1001002c:	8821      	ldrh	r1, [r4, #0]
1001002e:	9a01      	ldr	r2, [sp, #4]
10010030:	4b07      	ldr	r3, [pc, #28]	; (10010050 <at_ble_write_authorize_reply+0x84>)
10010032:	4798      	blx	r3
10010034:	2000      	movs	r0, #0
10010036:	b005      	add	sp, #20
10010038:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001003a:	46c0      	nop			; (mov r8, r8)
1001003c:	1000f85d 	.word	0x1000f85d
10010040:	10016253 	.word	0x10016253
10010044:	10018598 	.word	0x10018598
10010048:	1000ff8d 	.word	0x1000ff8d
1001004c:	1000ff51 	.word	0x1000ff51
10010050:	10011829 	.word	0x10011829

10010054 <gatts_handle_read_req>:
10010054:	b538      	push	{r3, r4, r5, lr}
10010056:	1c0c      	adds	r4, r1, #0
10010058:	4b07      	ldr	r3, [pc, #28]	; (10010078 <gatts_handle_read_req+0x24>)
1001005a:	4798      	blx	r3
1001005c:	8865      	ldrh	r5, [r4, #2]
1001005e:	4b07      	ldr	r3, [pc, #28]	; (1001007c <gatts_handle_read_req+0x28>)
10010060:	1c28      	adds	r0, r5, #0
10010062:	4798      	blx	r3
10010064:	7883      	ldrb	r3, [r0, #2]
10010066:	2026      	movs	r0, #38	; 0x26
10010068:	07db      	lsls	r3, r3, #31
1001006a:	d404      	bmi.n	10010076 <gatts_handle_read_req+0x22>
1001006c:	8820      	ldrh	r0, [r4, #0]
1001006e:	1c29      	adds	r1, r5, #0
10010070:	4b03      	ldr	r3, [pc, #12]	; (10010080 <gatts_handle_read_req+0x2c>)
10010072:	4798      	blx	r3
10010074:	203b      	movs	r0, #59	; 0x3b
10010076:	bd38      	pop	{r3, r4, r5, pc}
10010078:	1001176d 	.word	0x1001176d
1001007c:	1000f85d 	.word	0x1000f85d
10010080:	1000fac5 	.word	0x1000fac5

10010084 <gatts_handle_att_info_req>:
10010084:	b538      	push	{r3, r4, r5, lr}
10010086:	1c0d      	adds	r5, r1, #0
10010088:	4b0a      	ldr	r3, [pc, #40]	; (100100b4 <gatts_handle_att_info_req+0x30>)
1001008a:	1c14      	adds	r4, r2, #0
1001008c:	4798      	blx	r3
1001008e:	882d      	ldrh	r5, [r5, #0]
10010090:	4b09      	ldr	r3, [pc, #36]	; (100100b8 <gatts_handle_att_info_req+0x34>)
10010092:	1c28      	adds	r0, r5, #0
10010094:	4798      	blx	r3
10010096:	0a22      	lsrs	r2, r4, #8
10010098:	1c03      	adds	r3, r0, #0
1001009a:	4c08      	ldr	r4, [pc, #32]	; (100100bc <gatts_handle_att_info_req+0x38>)
1001009c:	b291      	uxth	r1, r2
1001009e:	2800      	cmp	r0, #0
100100a0:	d003      	beq.n	100100aa <gatts_handle_att_info_req+0x26>
100100a2:	8882      	ldrh	r2, [r0, #4]
100100a4:	2300      	movs	r3, #0
100100a6:	1c28      	adds	r0, r5, #0
100100a8:	e001      	b.n	100100ae <gatts_handle_att_info_req+0x2a>
100100aa:	1c28      	adds	r0, r5, #0
100100ac:	2201      	movs	r2, #1
100100ae:	47a0      	blx	r4
100100b0:	203b      	movs	r0, #59	; 0x3b
100100b2:	bd38      	pop	{r3, r4, r5, pc}
100100b4:	100117b1 	.word	0x100117b1
100100b8:	1000f85d 	.word	0x1000f85d
100100bc:	1001186d 	.word	0x1001186d

100100c0 <gatts_handle_write_req>:
100100c0:	b510      	push	{r4, lr}
100100c2:	1c14      	adds	r4, r2, #0
100100c4:	4b07      	ldr	r3, [pc, #28]	; (100100e4 <gatts_handle_write_req+0x24>)
100100c6:	4798      	blx	r3
100100c8:	4b07      	ldr	r3, [pc, #28]	; (100100e8 <gatts_handle_write_req+0x28>)
100100ca:	8860      	ldrh	r0, [r4, #2]
100100cc:	4798      	blx	r3
100100ce:	2302      	movs	r3, #2
100100d0:	7881      	ldrb	r1, [r0, #2]
100100d2:	2022      	movs	r0, #34	; 0x22
100100d4:	4019      	ands	r1, r3
100100d6:	d103      	bne.n	100100e0 <gatts_handle_write_req+0x20>
100100d8:	1c20      	adds	r0, r4, #0
100100da:	4b04      	ldr	r3, [pc, #16]	; (100100ec <gatts_handle_write_req+0x2c>)
100100dc:	4798      	blx	r3
100100de:	201f      	movs	r0, #31
100100e0:	bd10      	pop	{r4, pc}
100100e2:	46c0      	nop			; (mov r8, r8)
100100e4:	10011779 	.word	0x10011779
100100e8:	1000f85d 	.word	0x1000f85d
100100ec:	1000ffcd 	.word	0x1000ffcd

100100f0 <at_ble_notification_send>:
100100f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100100f2:	4d17      	ldr	r5, [pc, #92]	; (10010150 <at_ble_notification_send+0x60>)
100100f4:	4c17      	ldr	r4, [pc, #92]	; (10010154 <at_ble_notification_send+0x64>)
100100f6:	682a      	ldr	r2, [r5, #0]
100100f8:	44a5      	add	sp, r4
100100fa:	23d2      	movs	r3, #210	; 0xd2
100100fc:	2a04      	cmp	r2, #4
100100fe:	d822      	bhi.n	10010146 <at_ble_notification_send+0x56>
10010100:	1c06      	adds	r6, r0, #0
10010102:	4b15      	ldr	r3, [pc, #84]	; (10010158 <at_ble_notification_send+0x68>)
10010104:	1c08      	adds	r0, r1, #0
10010106:	1c0c      	adds	r4, r1, #0
10010108:	4798      	blx	r3
1001010a:	2800      	cmp	r0, #0
1001010c:	d008      	beq.n	10010120 <at_ble_notification_send+0x30>
1001010e:	6883      	ldr	r3, [r0, #8]
10010110:	2b00      	cmp	r3, #0
10010112:	d005      	beq.n	10010120 <at_ble_notification_send+0x30>
10010114:	8882      	ldrh	r2, [r0, #4]
10010116:	1c21      	adds	r1, r4, #0
10010118:	9200      	str	r2, [sp, #0]
1001011a:	2012      	movs	r0, #18
1001011c:	1c32      	adds	r2, r6, #0
1001011e:	e00c      	b.n	1001013a <at_ble_notification_send+0x4a>
10010120:	270e      	movs	r7, #14
10010122:	446f      	add	r7, sp
10010124:	1c39      	adds	r1, r7, #0
10010126:	aa04      	add	r2, sp, #16
10010128:	4b0c      	ldr	r3, [pc, #48]	; (1001015c <at_ble_notification_send+0x6c>)
1001012a:	1c20      	adds	r0, r4, #0
1001012c:	4798      	blx	r3
1001012e:	2012      	movs	r0, #18
10010130:	1c21      	adds	r1, r4, #0
10010132:	1c32      	adds	r2, r6, #0
10010134:	883b      	ldrh	r3, [r7, #0]
10010136:	9300      	str	r3, [sp, #0]
10010138:	ab04      	add	r3, sp, #16
1001013a:	4c09      	ldr	r4, [pc, #36]	; (10010160 <at_ble_notification_send+0x70>)
1001013c:	47a0      	blx	r4
1001013e:	682b      	ldr	r3, [r5, #0]
10010140:	3301      	adds	r3, #1
10010142:	602b      	str	r3, [r5, #0]
10010144:	2300      	movs	r3, #0
10010146:	1c18      	adds	r0, r3, #0
10010148:	2385      	movs	r3, #133	; 0x85
1001014a:	009b      	lsls	r3, r3, #2
1001014c:	449d      	add	sp, r3
1001014e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010150:	1001a0c0 	.word	0x1001a0c0
10010154:	fffffdec 	.word	0xfffffdec
10010158:	1000f85d 	.word	0x1000f85d
1001015c:	10011db1 	.word	0x10011db1
10010160:	100118b5 	.word	0x100118b5

10010164 <init_l2cc_task_module>:
10010164:	220a      	movs	r2, #10
10010166:	4b01      	ldr	r3, [pc, #4]	; (1001016c <init_l2cc_task_module+0x8>)
10010168:	701a      	strb	r2, [r3, #0]
1001016a:	4770      	bx	lr
1001016c:	10018594 	.word	0x10018594

10010170 <l2cc_data_send_rsp_handler>:
10010170:	b510      	push	{r4, lr}
10010172:	7802      	ldrb	r2, [r0, #0]
10010174:	700a      	strb	r2, [r1, #0]
10010176:	7883      	ldrb	r3, [r0, #2]
10010178:	7844      	ldrb	r4, [r0, #1]
1001017a:	021b      	lsls	r3, r3, #8
1001017c:	4323      	orrs	r3, r4
1001017e:	804b      	strh	r3, [r1, #2]
10010180:	7903      	ldrb	r3, [r0, #4]
10010182:	78c0      	ldrb	r0, [r0, #3]
10010184:	021b      	lsls	r3, r3, #8
10010186:	4303      	orrs	r3, r0
10010188:	808b      	strh	r3, [r1, #4]
1001018a:	2a00      	cmp	r2, #0
1001018c:	d103      	bne.n	10010196 <l2cc_data_send_rsp_handler+0x26>
1001018e:	4a02      	ldr	r2, [pc, #8]	; (10010198 <l2cc_data_send_rsp_handler+0x28>)
10010190:	7813      	ldrb	r3, [r2, #0]
10010192:	3301      	adds	r3, #1
10010194:	7013      	strb	r3, [r2, #0]
10010196:	bd10      	pop	{r4, pc}
10010198:	10018594 	.word	0x10018594

1001019c <l2cc_data_received_handler>:
1001019c:	b508      	push	{r3, lr}
1001019e:	1c03      	adds	r3, r0, #0
100101a0:	7842      	ldrb	r2, [r0, #1]
100101a2:	7800      	ldrb	r0, [r0, #0]
100101a4:	0212      	lsls	r2, r2, #8
100101a6:	4302      	orrs	r2, r0
100101a8:	800a      	strh	r2, [r1, #0]
100101aa:	78da      	ldrb	r2, [r3, #3]
100101ac:	7898      	ldrb	r0, [r3, #2]
100101ae:	0212      	lsls	r2, r2, #8
100101b0:	4302      	orrs	r2, r0
100101b2:	804a      	strh	r2, [r1, #2]
100101b4:	795a      	ldrb	r2, [r3, #5]
100101b6:	7918      	ldrb	r0, [r3, #4]
100101b8:	0212      	lsls	r2, r2, #8
100101ba:	4302      	orrs	r2, r0
100101bc:	808a      	strh	r2, [r1, #4]
100101be:	1d88      	adds	r0, r1, #6
100101c0:	1d99      	adds	r1, r3, #6
100101c2:	4b01      	ldr	r3, [pc, #4]	; (100101c8 <l2cc_data_received_handler+0x2c>)
100101c4:	4798      	blx	r3
100101c6:	bd08      	pop	{r3, pc}
100101c8:	10016253 	.word	0x10016253

100101cc <at_ble_authenticate>:
100101cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100101ce:	1c0c      	adds	r4, r1, #0
100101d0:	211f      	movs	r1, #31
100101d2:	b08b      	sub	sp, #44	; 0x2c
100101d4:	9307      	str	r3, [sp, #28]
100101d6:	ab02      	add	r3, sp, #8
100101d8:	18c9      	adds	r1, r1, r3
100101da:	230f      	movs	r3, #15
100101dc:	700b      	strb	r3, [r1, #0]
100101de:	4b40      	ldr	r3, [pc, #256]	; (100102e0 <at_ble_authenticate+0x114>)
100101e0:	1c05      	adds	r5, r0, #0
100101e2:	1c16      	adds	r6, r2, #0
100101e4:	4798      	blx	r3
100101e6:	1c07      	adds	r7, r0, #0
100101e8:	2001      	movs	r0, #1
100101ea:	2f07      	cmp	r7, #7
100101ec:	d875      	bhi.n	100102da <at_ble_authenticate+0x10e>
100101ee:	2c00      	cmp	r4, #0
100101f0:	d113      	bne.n	1001021a <at_ble_authenticate+0x4e>
100101f2:	2312      	movs	r3, #18
100101f4:	435f      	muls	r7, r3
100101f6:	4b3b      	ldr	r3, [pc, #236]	; (100102e4 <at_ble_authenticate+0x118>)
100101f8:	5cfb      	ldrb	r3, [r7, r3]
100101fa:	4283      	cmp	r3, r0
100101fc:	d001      	beq.n	10010202 <at_ble_authenticate+0x36>
100101fe:	20cf      	movs	r0, #207	; 0xcf
10010200:	e06b      	b.n	100102da <at_ble_authenticate+0x10e>
10010202:	9504      	str	r5, [sp, #16]
10010204:	9400      	str	r4, [sp, #0]
10010206:	9401      	str	r4, [sp, #4]
10010208:	9402      	str	r4, [sp, #8]
1001020a:	9403      	str	r4, [sp, #12]
1001020c:	1c20      	adds	r0, r4, #0
1001020e:	1c21      	adds	r1, r4, #0
10010210:	1c22      	adds	r2, r4, #0
10010212:	1c23      	adds	r3, r4, #0
10010214:	4d34      	ldr	r5, [pc, #208]	; (100102e8 <at_ble_authenticate+0x11c>)
10010216:	47a8      	blx	r5
10010218:	e05e      	b.n	100102d8 <at_ble_authenticate+0x10c>
1001021a:	7922      	ldrb	r2, [r4, #4]
1001021c:	2a06      	cmp	r2, #6
1001021e:	d9ee      	bls.n	100101fe <at_ble_authenticate+0x32>
10010220:	7963      	ldrb	r3, [r4, #5]
10010222:	2b10      	cmp	r3, #16
10010224:	d8eb      	bhi.n	100101fe <at_ble_authenticate+0x32>
10010226:	429a      	cmp	r2, r3
10010228:	d8e9      	bhi.n	100101fe <at_ble_authenticate+0x32>
1001022a:	7a23      	ldrb	r3, [r4, #8]
1001022c:	2b04      	cmp	r3, #4
1001022e:	d8e6      	bhi.n	100101fe <at_ble_authenticate+0x32>
10010230:	79a3      	ldrb	r3, [r4, #6]
10010232:	2b07      	cmp	r3, #7
10010234:	d8e3      	bhi.n	100101fe <at_ble_authenticate+0x32>
10010236:	79e3      	ldrb	r3, [r4, #7]
10010238:	2b07      	cmp	r3, #7
1001023a:	d8e0      	bhi.n	100101fe <at_ble_authenticate+0x32>
1001023c:	78a3      	ldrb	r3, [r4, #2]
1001023e:	2b00      	cmp	r3, #0
10010240:	d006      	beq.n	10010250 <at_ble_authenticate+0x84>
10010242:	2e00      	cmp	r6, #0
10010244:	d0db      	beq.n	100101fe <at_ble_authenticate+0x32>
10010246:	4829      	ldr	r0, [pc, #164]	; (100102ec <at_ble_authenticate+0x120>)
10010248:	1c31      	adds	r1, r6, #0
1001024a:	221c      	movs	r2, #28
1001024c:	4b28      	ldr	r3, [pc, #160]	; (100102f0 <at_ble_authenticate+0x124>)
1001024e:	4798      	blx	r3
10010250:	9b07      	ldr	r3, [sp, #28]
10010252:	2b00      	cmp	r3, #0
10010254:	d005      	beq.n	10010262 <at_ble_authenticate+0x96>
10010256:	4827      	ldr	r0, [pc, #156]	; (100102f4 <at_ble_authenticate+0x128>)
10010258:	1c19      	adds	r1, r3, #0
1001025a:	309a      	adds	r0, #154	; 0x9a
1001025c:	2210      	movs	r2, #16
1001025e:	4b24      	ldr	r3, [pc, #144]	; (100102f0 <at_ble_authenticate+0x124>)
10010260:	4798      	blx	r3
10010262:	7863      	ldrb	r3, [r4, #1]
10010264:	78a2      	ldrb	r2, [r4, #2]
10010266:	009b      	lsls	r3, r3, #2
10010268:	4313      	orrs	r3, r2
1001026a:	2212      	movs	r2, #18
1001026c:	4357      	muls	r7, r2
1001026e:	4a1d      	ldr	r2, [pc, #116]	; (100102e4 <at_ble_authenticate+0x118>)
10010270:	b2db      	uxtb	r3, r3
10010272:	5cba      	ldrb	r2, [r7, r2]
10010274:	2a00      	cmp	r2, #0
10010276:	d116      	bne.n	100102a6 <at_ble_authenticate+0xda>
10010278:	79a0      	ldrb	r0, [r4, #6]
1001027a:	0742      	lsls	r2, r0, #29
1001027c:	d502      	bpl.n	10010284 <at_ble_authenticate+0xb8>
1001027e:	9a07      	ldr	r2, [sp, #28]
10010280:	2a00      	cmp	r2, #0
10010282:	d0bc      	beq.n	100101fe <at_ble_authenticate+0x32>
10010284:	07c2      	lsls	r2, r0, #31
10010286:	d501      	bpl.n	1001028c <at_ble_authenticate+0xc0>
10010288:	2e00      	cmp	r6, #0
1001028a:	d0b8      	beq.n	100101fe <at_ble_authenticate+0x32>
1001028c:	7966      	ldrb	r6, [r4, #5]
1001028e:	7821      	ldrb	r1, [r4, #0]
10010290:	78e2      	ldrb	r2, [r4, #3]
10010292:	9600      	str	r6, [sp, #0]
10010294:	9001      	str	r0, [sp, #4]
10010296:	79e0      	ldrb	r0, [r4, #7]
10010298:	9002      	str	r0, [sp, #8]
1001029a:	7a20      	ldrb	r0, [r4, #8]
1001029c:	4c16      	ldr	r4, [pc, #88]	; (100102f8 <at_ble_authenticate+0x12c>)
1001029e:	9003      	str	r0, [sp, #12]
100102a0:	1c28      	adds	r0, r5, #0
100102a2:	47a0      	blx	r4
100102a4:	e018      	b.n	100102d8 <at_ble_authenticate+0x10c>
100102a6:	2a01      	cmp	r2, #1
100102a8:	d1a9      	bne.n	100101fe <at_ble_authenticate+0x32>
100102aa:	79e0      	ldrb	r0, [r4, #7]
100102ac:	0742      	lsls	r2, r0, #29
100102ae:	d502      	bpl.n	100102b6 <at_ble_authenticate+0xea>
100102b0:	9a07      	ldr	r2, [sp, #28]
100102b2:	2a00      	cmp	r2, #0
100102b4:	d0a3      	beq.n	100101fe <at_ble_authenticate+0x32>
100102b6:	07c2      	lsls	r2, r0, #31
100102b8:	d501      	bpl.n	100102be <at_ble_authenticate+0xf2>
100102ba:	2e00      	cmp	r6, #0
100102bc:	d09f      	beq.n	100101fe <at_ble_authenticate+0x32>
100102be:	7966      	ldrb	r6, [r4, #5]
100102c0:	7821      	ldrb	r1, [r4, #0]
100102c2:	78e2      	ldrb	r2, [r4, #3]
100102c4:	9600      	str	r6, [sp, #0]
100102c6:	79a6      	ldrb	r6, [r4, #6]
100102c8:	9002      	str	r0, [sp, #8]
100102ca:	9601      	str	r6, [sp, #4]
100102cc:	7a20      	ldrb	r0, [r4, #8]
100102ce:	9504      	str	r5, [sp, #16]
100102d0:	9003      	str	r0, [sp, #12]
100102d2:	4c05      	ldr	r4, [pc, #20]	; (100102e8 <at_ble_authenticate+0x11c>)
100102d4:	2001      	movs	r0, #1
100102d6:	47a0      	blx	r4
100102d8:	2000      	movs	r0, #0
100102da:	b00b      	add	sp, #44	; 0x2c
100102dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102de:	46c0      	nop			; (mov r8, r8)
100102e0:	100106cd 	.word	0x100106cd
100102e4:	1001af8a 	.word	0x1001af8a
100102e8:	10010c3d 	.word	0x10010c3d
100102ec:	1001b098 	.word	0x1001b098
100102f0:	10016253 	.word	0x10016253
100102f4:	1001b01a 	.word	0x1001b01a
100102f8:	10010a1d 	.word	0x10010a1d

100102fc <at_ble_pair_key_reply>:
100102fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100102fe:	b085      	sub	sp, #20
10010300:	1c05      	adds	r5, r0, #0
10010302:	1c0c      	adds	r4, r1, #0
10010304:	1c16      	adds	r6, r2, #0
10010306:	2100      	movs	r1, #0
10010308:	4668      	mov	r0, sp
1001030a:	2210      	movs	r2, #16
1001030c:	4b18      	ldr	r3, [pc, #96]	; (10010370 <at_ble_pair_key_reply+0x74>)
1001030e:	4798      	blx	r3
10010310:	2101      	movs	r1, #1
10010312:	2e00      	cmp	r6, #0
10010314:	d101      	bne.n	1001031a <at_ble_pair_key_reply+0x1e>
10010316:	1c31      	adds	r1, r6, #0
10010318:	466e      	mov	r6, sp
1001031a:	2c00      	cmp	r4, #0
1001031c:	d116      	bne.n	1001034c <at_ble_pair_key_reply+0x50>
1001031e:	2701      	movs	r7, #1
10010320:	1c23      	adds	r3, r4, #0
10010322:	1d70      	adds	r0, r6, #5
10010324:	3e01      	subs	r6, #1
10010326:	7802      	ldrb	r2, [r0, #0]
10010328:	3801      	subs	r0, #1
1001032a:	3a30      	subs	r2, #48	; 0x30
1001032c:	437a      	muls	r2, r7
1001032e:	189b      	adds	r3, r3, r2
10010330:	220a      	movs	r2, #10
10010332:	4357      	muls	r7, r2
10010334:	42b0      	cmp	r0, r6
10010336:	d1f6      	bne.n	10010326 <at_ble_pair_key_reply+0x2a>
10010338:	466a      	mov	r2, sp
1001033a:	4668      	mov	r0, sp
1001033c:	7013      	strb	r3, [r2, #0]
1001033e:	0a1a      	lsrs	r2, r3, #8
10010340:	7042      	strb	r2, [r0, #1]
10010342:	0c1a      	lsrs	r2, r3, #16
10010344:	0e1b      	lsrs	r3, r3, #24
10010346:	7082      	strb	r2, [r0, #2]
10010348:	70c3      	strb	r3, [r0, #3]
1001034a:	e009      	b.n	10010360 <at_ble_pair_key_reply+0x64>
1001034c:	20cf      	movs	r0, #207	; 0xcf
1001034e:	2c01      	cmp	r4, #1
10010350:	d10c      	bne.n	1001036c <at_ble_pair_key_reply+0x70>
10010352:	2300      	movs	r3, #0
10010354:	4668      	mov	r0, sp
10010356:	5cf2      	ldrb	r2, [r6, r3]
10010358:	54c2      	strb	r2, [r0, r3]
1001035a:	3301      	adds	r3, #1
1001035c:	2b10      	cmp	r3, #16
1001035e:	d1f9      	bne.n	10010354 <at_ble_pair_key_reply+0x58>
10010360:	2004      	movs	r0, #4
10010362:	466a      	mov	r2, sp
10010364:	1c2b      	adds	r3, r5, #0
10010366:	4c03      	ldr	r4, [pc, #12]	; (10010374 <at_ble_pair_key_reply+0x78>)
10010368:	47a0      	blx	r4
1001036a:	2000      	movs	r0, #0
1001036c:	b005      	add	sp, #20
1001036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010370:	10016265 	.word	0x10016265
10010374:	10010cb9 	.word	0x10010cb9

10010378 <at_ble_send_slave_sec_request>:
10010378:	b570      	push	{r4, r5, r6, lr}
1001037a:	4b0c      	ldr	r3, [pc, #48]	; (100103ac <at_ble_send_slave_sec_request+0x34>)
1001037c:	1c0e      	adds	r6, r1, #0
1001037e:	2100      	movs	r1, #0
10010380:	1c05      	adds	r5, r0, #0
10010382:	1c14      	adds	r4, r2, #0
10010384:	4798      	blx	r3
10010386:	2301      	movs	r3, #1
10010388:	2807      	cmp	r0, #7
1001038a:	d80d      	bhi.n	100103a8 <at_ble_send_slave_sec_request+0x30>
1001038c:	3311      	adds	r3, #17
1001038e:	4358      	muls	r0, r3
10010390:	4b07      	ldr	r3, [pc, #28]	; (100103b0 <at_ble_send_slave_sec_request+0x38>)
10010392:	5cc2      	ldrb	r2, [r0, r3]
10010394:	23e0      	movs	r3, #224	; 0xe0
10010396:	2a01      	cmp	r2, #1
10010398:	d106      	bne.n	100103a8 <at_ble_send_slave_sec_request+0x30>
1001039a:	00b1      	lsls	r1, r6, #2
1001039c:	430c      	orrs	r4, r1
1001039e:	4b05      	ldr	r3, [pc, #20]	; (100103b4 <at_ble_send_slave_sec_request+0x3c>)
100103a0:	b2e1      	uxtb	r1, r4
100103a2:	1c28      	adds	r0, r5, #0
100103a4:	4798      	blx	r3
100103a6:	2300      	movs	r3, #0
100103a8:	1c18      	adds	r0, r3, #0
100103aa:	bd70      	pop	{r4, r5, r6, pc}
100103ac:	100106cd 	.word	0x100106cd
100103b0:	1001af8a 	.word	0x1001af8a
100103b4:	10010d09 	.word	0x10010d09

100103b8 <at_ble_encryption_start>:
100103b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103ba:	23cf      	movs	r3, #207	; 0xcf
100103bc:	2900      	cmp	r1, #0
100103be:	d02b      	beq.n	10010418 <at_ble_encryption_start+0x60>
100103c0:	2a05      	cmp	r2, #5
100103c2:	d829      	bhi.n	10010418 <at_ble_encryption_start+0x60>
100103c4:	2701      	movs	r7, #1
100103c6:	1c3d      	adds	r5, r7, #0
100103c8:	2433      	movs	r4, #51	; 0x33
100103ca:	4095      	lsls	r5, r2
100103cc:	4225      	tst	r5, r4
100103ce:	d023      	beq.n	10010418 <at_ble_encryption_start+0x60>
100103d0:	7e8c      	ldrb	r4, [r1, #26]
100103d2:	3c07      	subs	r4, #7
100103d4:	2c09      	cmp	r4, #9
100103d6:	d81f      	bhi.n	10010418 <at_ble_encryption_start+0x60>
100103d8:	4b10      	ldr	r3, [pc, #64]	; (1001041c <at_ble_encryption_start+0x64>)
100103da:	1c0c      	adds	r4, r1, #0
100103dc:	2100      	movs	r1, #0
100103de:	1c15      	adds	r5, r2, #0
100103e0:	1c06      	adds	r6, r0, #0
100103e2:	4798      	blx	r3
100103e4:	1c3b      	adds	r3, r7, #0
100103e6:	2807      	cmp	r0, #7
100103e8:	d816      	bhi.n	10010418 <at_ble_encryption_start+0x60>
100103ea:	2312      	movs	r3, #18
100103ec:	4358      	muls	r0, r3
100103ee:	4b0c      	ldr	r3, [pc, #48]	; (10010420 <at_ble_encryption_start+0x68>)
100103f0:	5cc7      	ldrb	r7, [r0, r3]
100103f2:	23e0      	movs	r3, #224	; 0xe0
100103f4:	2f00      	cmp	r7, #0
100103f6:	d10f      	bne.n	10010418 <at_ble_encryption_start+0x60>
100103f8:	1c21      	adds	r1, r4, #0
100103fa:	221c      	movs	r2, #28
100103fc:	4b09      	ldr	r3, [pc, #36]	; (10010424 <at_ble_encryption_start+0x6c>)
100103fe:	480a      	ldr	r0, [pc, #40]	; (10010428 <at_ble_encryption_start+0x70>)
10010400:	4798      	blx	r3
10010402:	1c23      	adds	r3, r4, #0
10010404:	7ea1      	ldrb	r1, [r4, #26]
10010406:	8a22      	ldrh	r2, [r4, #16]
10010408:	3312      	adds	r3, #18
1001040a:	9100      	str	r1, [sp, #0]
1001040c:	9501      	str	r5, [sp, #4]
1001040e:	1c21      	adds	r1, r4, #0
10010410:	1c30      	adds	r0, r6, #0
10010412:	4c06      	ldr	r4, [pc, #24]	; (1001042c <at_ble_encryption_start+0x74>)
10010414:	47a0      	blx	r4
10010416:	1c3b      	adds	r3, r7, #0
10010418:	1c18      	adds	r0, r3, #0
1001041a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001041c:	100106cd 	.word	0x100106cd
10010420:	1001af8a 	.word	0x1001af8a
10010424:	10016253 	.word	0x10016253
10010428:	1001b098 	.word	0x1001b098
1001042c:	10010d49 	.word	0x10010d49

10010430 <at_ble_encryption_request_reply>:
10010430:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010432:	24cf      	movs	r4, #207	; 0xcf
10010434:	2b00      	cmp	r3, #0
10010436:	d011      	beq.n	1001045c <at_ble_encryption_request_reply+0x2c>
10010438:	2a00      	cmp	r2, #0
1001043a:	d00a      	beq.n	10010452 <at_ble_encryption_request_reply+0x22>
1001043c:	2905      	cmp	r1, #5
1001043e:	d80d      	bhi.n	1001045c <at_ble_encryption_request_reply+0x2c>
10010440:	2501      	movs	r5, #1
10010442:	2633      	movs	r6, #51	; 0x33
10010444:	408d      	lsls	r5, r1
10010446:	4235      	tst	r5, r6
10010448:	d008      	beq.n	1001045c <at_ble_encryption_request_reply+0x2c>
1001044a:	7e9d      	ldrb	r5, [r3, #26]
1001044c:	3d07      	subs	r5, #7
1001044e:	2d09      	cmp	r5, #9
10010450:	d804      	bhi.n	1001045c <at_ble_encryption_request_reply+0x2c>
10010452:	7e9c      	ldrb	r4, [r3, #26]
10010454:	9400      	str	r4, [sp, #0]
10010456:	4c02      	ldr	r4, [pc, #8]	; (10010460 <at_ble_encryption_request_reply+0x30>)
10010458:	47a0      	blx	r4
1001045a:	2400      	movs	r4, #0
1001045c:	1c20      	adds	r0, r4, #0
1001045e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010460:	10010e05 	.word	0x10010e05

10010464 <rx_callback>:
10010464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010466:	8883      	ldrh	r3, [r0, #4]
10010468:	1c01      	adds	r1, r0, #0
1001046a:	9301      	str	r3, [sp, #4]
1001046c:	88c5      	ldrh	r5, [r0, #6]
1001046e:	8806      	ldrh	r6, [r0, #0]
10010470:	2d00      	cmp	r5, #0
10010472:	d10f      	bne.n	10010494 <rx_callback+0x30>
10010474:	1c19      	adds	r1, r3, #0
10010476:	1c30      	adds	r0, r6, #0
10010478:	4b19      	ldr	r3, [pc, #100]	; (100104e0 <rx_callback+0x7c>)
1001047a:	1c2a      	adds	r2, r5, #0
1001047c:	4798      	blx	r3
1001047e:	1e03      	subs	r3, r0, #0
10010480:	d105      	bne.n	1001048e <rx_callback+0x2a>
10010482:	1c30      	adds	r0, r6, #0
10010484:	9901      	ldr	r1, [sp, #4]
10010486:	1c1a      	adds	r2, r3, #0
10010488:	4c16      	ldr	r4, [pc, #88]	; (100104e4 <rx_callback+0x80>)
1001048a:	47a0      	blx	r4
1001048c:	e027      	b.n	100104de <rx_callback+0x7a>
1001048e:	4b16      	ldr	r3, [pc, #88]	; (100104e8 <rx_callback+0x84>)
10010490:	4798      	blx	r3
10010492:	e024      	b.n	100104de <rx_callback+0x7a>
10010494:	4c15      	ldr	r4, [pc, #84]	; (100104ec <rx_callback+0x88>)
10010496:	4a16      	ldr	r2, [pc, #88]	; (100104f0 <rx_callback+0x8c>)
10010498:	6823      	ldr	r3, [r4, #0]
1001049a:	6812      	ldr	r2, [r2, #0]
1001049c:	18eb      	adds	r3, r5, r3
1001049e:	4293      	cmp	r3, r2
100104a0:	d901      	bls.n	100104a6 <rx_callback+0x42>
100104a2:	2300      	movs	r3, #0
100104a4:	6023      	str	r3, [r4, #0]
100104a6:	4f13      	ldr	r7, [pc, #76]	; (100104f4 <rx_callback+0x90>)
100104a8:	6822      	ldr	r2, [r4, #0]
100104aa:	683b      	ldr	r3, [r7, #0]
100104ac:	3108      	adds	r1, #8
100104ae:	1898      	adds	r0, r3, r2
100104b0:	1c2a      	adds	r2, r5, #0
100104b2:	4b11      	ldr	r3, [pc, #68]	; (100104f8 <rx_callback+0x94>)
100104b4:	4798      	blx	r3
100104b6:	683b      	ldr	r3, [r7, #0]
100104b8:	6822      	ldr	r2, [r4, #0]
100104ba:	1c30      	adds	r0, r6, #0
100104bc:	189a      	adds	r2, r3, r2
100104be:	9901      	ldr	r1, [sp, #4]
100104c0:	4b07      	ldr	r3, [pc, #28]	; (100104e0 <rx_callback+0x7c>)
100104c2:	4798      	blx	r3
100104c4:	2800      	cmp	r0, #0
100104c6:	d1e2      	bne.n	1001048e <rx_callback+0x2a>
100104c8:	6823      	ldr	r3, [r4, #0]
100104ca:	683a      	ldr	r2, [r7, #0]
100104cc:	1c30      	adds	r0, r6, #0
100104ce:	18d2      	adds	r2, r2, r3
100104d0:	9901      	ldr	r1, [sp, #4]
100104d2:	1c2b      	adds	r3, r5, #0
100104d4:	4e03      	ldr	r6, [pc, #12]	; (100104e4 <rx_callback+0x80>)
100104d6:	47b0      	blx	r6
100104d8:	6823      	ldr	r3, [r4, #0]
100104da:	18ed      	adds	r5, r5, r3
100104dc:	6025      	str	r5, [r4, #0]
100104de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100104e0:	1000eaf9 	.word	0x1000eaf9
100104e4:	1000ea71 	.word	0x1000ea71
100104e8:	1000e419 	.word	0x1000e419
100104ec:	1001b0f4 	.word	0x1001b0f4
100104f0:	1001a03c 	.word	0x1001a03c
100104f4:	1001a038 	.word	0x1001a038
100104f8:	10016253 	.word	0x10016253

100104fc <interface_send>:
100104fc:	b508      	push	{r3, lr}
100104fe:	4b02      	ldr	r3, [pc, #8]	; (10010508 <interface_send+0xc>)
10010500:	4798      	blx	r3
10010502:	2000      	movs	r0, #0
10010504:	bd08      	pop	{r3, pc}
10010506:	46c0      	nop			; (mov r8, r8)
10010508:	1000e111 	.word	0x1000e111

1001050c <interface_init>:
1001050c:	2280      	movs	r2, #128	; 0x80
1001050e:	b510      	push	{r4, lr}
10010510:	2100      	movs	r1, #0
10010512:	1c04      	adds	r4, r0, #0
10010514:	0092      	lsls	r2, r2, #2
10010516:	4b08      	ldr	r3, [pc, #32]	; (10010538 <interface_init+0x2c>)
10010518:	4808      	ldr	r0, [pc, #32]	; (1001053c <interface_init+0x30>)
1001051a:	4798      	blx	r3
1001051c:	2200      	movs	r2, #0
1001051e:	4b08      	ldr	r3, [pc, #32]	; (10010540 <interface_init+0x34>)
10010520:	601a      	str	r2, [r3, #0]
10010522:	4a08      	ldr	r2, [pc, #32]	; (10010544 <interface_init+0x38>)
10010524:	4b08      	ldr	r3, [pc, #32]	; (10010548 <interface_init+0x3c>)
10010526:	601a      	str	r2, [r3, #0]
10010528:	4b08      	ldr	r3, [pc, #32]	; (1001054c <interface_init+0x40>)
1001052a:	6922      	ldr	r2, [r4, #16]
1001052c:	601a      	str	r2, [r3, #0]
1001052e:	6962      	ldr	r2, [r4, #20]
10010530:	4b07      	ldr	r3, [pc, #28]	; (10010550 <interface_init+0x44>)
10010532:	601a      	str	r2, [r3, #0]
10010534:	bd10      	pop	{r4, pc}
10010536:	46c0      	nop			; (mov r8, r8)
10010538:	10016265 	.word	0x10016265
1001053c:	1001b2f8 	.word	0x1001b2f8
10010540:	1001b0f4 	.word	0x1001b0f4
10010544:	1001b0f8 	.word	0x1001b0f8
10010548:	10018598 	.word	0x10018598
1001054c:	1001a038 	.word	0x1001a038
10010550:	1001a03c 	.word	0x1001a03c

10010554 <platform_cmd_cmpl_signal>:
10010554:	2201      	movs	r2, #1
10010556:	4b01      	ldr	r3, [pc, #4]	; (1001055c <platform_cmd_cmpl_signal+0x8>)
10010558:	601a      	str	r2, [r3, #0]
1001055a:	4770      	bx	lr
1001055c:	1001a040 	.word	0x1001a040

10010560 <platform_cmd_cmpl_wait>:
10010560:	b510      	push	{r4, lr}
10010562:	1c04      	adds	r4, r0, #0
10010564:	4b07      	ldr	r3, [pc, #28]	; (10010584 <platform_cmd_cmpl_wait+0x24>)
10010566:	681a      	ldr	r2, [r3, #0]
10010568:	2a01      	cmp	r2, #1
1001056a:	d003      	beq.n	10010574 <platform_cmd_cmpl_wait+0x14>
1001056c:	4b06      	ldr	r3, [pc, #24]	; (10010588 <platform_cmd_cmpl_wait+0x28>)
1001056e:	2000      	movs	r0, #0
10010570:	4798      	blx	r3
10010572:	e7f7      	b.n	10010564 <platform_cmd_cmpl_wait+0x4>
10010574:	6819      	ldr	r1, [r3, #0]
10010576:	2901      	cmp	r1, #1
10010578:	d102      	bne.n	10010580 <platform_cmd_cmpl_wait+0x20>
1001057a:	2200      	movs	r2, #0
1001057c:	601a      	str	r2, [r3, #0]
1001057e:	e000      	b.n	10010582 <platform_cmd_cmpl_wait+0x22>
10010580:	7022      	strb	r2, [r4, #0]
10010582:	bd10      	pop	{r4, pc}
10010584:	1001a040 	.word	0x1001a040
10010588:	1000e1a1 	.word	0x1000e1a1

1001058c <start_timer>:
1001058c:	4770      	bx	lr

1001058e <stop_timer>:
1001058e:	4770      	bx	lr

10010590 <dbg_le_set_bd_addr_req_handler>:
10010590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010592:	466b      	mov	r3, sp
10010594:	1dde      	adds	r6, r3, #7
10010596:	2300      	movs	r3, #0
10010598:	7033      	strb	r3, [r6, #0]
1001059a:	230f      	movs	r3, #15
1001059c:	4c13      	ldr	r4, [pc, #76]	; (100105ec <dbg_le_set_bd_addr_req_handler+0x5c>)
1001059e:	2703      	movs	r7, #3
100105a0:	7023      	strb	r3, [r4, #0]
100105a2:	2300      	movs	r3, #0
100105a4:	70e3      	strb	r3, [r4, #3]
100105a6:	4b12      	ldr	r3, [pc, #72]	; (100105f0 <dbg_le_set_bd_addr_req_handler+0x60>)
100105a8:	1c01      	adds	r1, r0, #0
100105aa:	881a      	ldrh	r2, [r3, #0]
100105ac:	881b      	ldrh	r3, [r3, #0]
100105ae:	7122      	strb	r2, [r4, #4]
100105b0:	0a1b      	lsrs	r3, r3, #8
100105b2:	2206      	movs	r2, #6
100105b4:	7163      	strb	r3, [r4, #5]
100105b6:	480f      	ldr	r0, [pc, #60]	; (100105f4 <dbg_le_set_bd_addr_req_handler+0x64>)
100105b8:	4b0f      	ldr	r3, [pc, #60]	; (100105f8 <dbg_le_set_bd_addr_req_handler+0x68>)
100105ba:	7067      	strb	r7, [r4, #1]
100105bc:	70a7      	strb	r7, [r4, #2]
100105be:	4798      	blx	r3
100105c0:	4d0e      	ldr	r5, [pc, #56]	; (100105fc <dbg_le_set_bd_addr_req_handler+0x6c>)
100105c2:	4b0f      	ldr	r3, [pc, #60]	; (10010600 <dbg_le_set_bd_addr_req_handler+0x70>)
100105c4:	210e      	movs	r1, #14
100105c6:	802b      	strh	r3, [r5, #0]
100105c8:	2306      	movs	r3, #6
100105ca:	71a3      	strb	r3, [r4, #6]
100105cc:	2300      	movs	r3, #0
100105ce:	1c20      	adds	r0, r4, #0
100105d0:	71e3      	strb	r3, [r4, #7]
100105d2:	4b0c      	ldr	r3, [pc, #48]	; (10010604 <dbg_le_set_bd_addr_req_handler+0x74>)
100105d4:	80af      	strh	r7, [r5, #4]
100105d6:	4798      	blx	r3
100105d8:	1c30      	adds	r0, r6, #0
100105da:	4b0b      	ldr	r3, [pc, #44]	; (10010608 <dbg_le_set_bd_addr_req_handler+0x78>)
100105dc:	4798      	blx	r3
100105de:	7833      	ldrb	r3, [r6, #0]
100105e0:	20e2      	movs	r0, #226	; 0xe2
100105e2:	2b00      	cmp	r3, #0
100105e4:	d101      	bne.n	100105ea <dbg_le_set_bd_addr_req_handler+0x5a>
100105e6:	68ab      	ldr	r3, [r5, #8]
100105e8:	7818      	ldrb	r0, [r3, #0]
100105ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100105ec:	1001b2f8 	.word	0x1001b2f8
100105f0:	1001af88 	.word	0x1001af88
100105f4:	1001b300 	.word	0x1001b300
100105f8:	10016253 	.word	0x10016253
100105fc:	1001af7c 	.word	0x1001af7c
10010600:	00000329 	.word	0x00000329
10010604:	100104fd 	.word	0x100104fd
10010608:	10010561 	.word	0x10010561

1001060c <gapc_get_dev_info_cfm.constprop.1>:
1001060c:	b538      	push	{r3, r4, r5, lr}
1001060e:	230b      	movs	r3, #11
10010610:	4c27      	ldr	r4, [pc, #156]	; (100106b0 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10010612:	7023      	strb	r3, [r4, #0]
10010614:	3303      	adds	r3, #3
10010616:	7063      	strb	r3, [r4, #1]
10010618:	3329      	adds	r3, #41	; 0x29
1001061a:	70a3      	strb	r3, [r4, #2]
1001061c:	4b25      	ldr	r3, [pc, #148]	; (100106b4 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1001061e:	70e1      	strb	r1, [r4, #3]
10010620:	881a      	ldrh	r2, [r3, #0]
10010622:	881b      	ldrh	r3, [r3, #0]
10010624:	7122      	strb	r2, [r4, #4]
10010626:	0a1b      	lsrs	r3, r3, #8
10010628:	7163      	strb	r3, [r4, #5]
1001062a:	2300      	movs	r3, #0
1001062c:	7220      	strb	r0, [r4, #8]
1001062e:	7263      	strb	r3, [r4, #9]
10010630:	2801      	cmp	r0, #1
10010632:	d02b      	beq.n	1001068c <gapc_get_dev_info_cfm.constprop.1+0x80>
10010634:	4298      	cmp	r0, r3
10010636:	d01b      	beq.n	10010670 <gapc_get_dev_info_cfm.constprop.1+0x64>
10010638:	2802      	cmp	r0, #2
1001063a:	d12f      	bne.n	1001069c <gapc_get_dev_info_cfm.constprop.1+0x90>
1001063c:	4b1e      	ldr	r3, [pc, #120]	; (100106b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001063e:	2112      	movs	r1, #18
10010640:	1c1a      	adds	r2, r3, #0
10010642:	32ce      	adds	r2, #206	; 0xce
10010644:	8812      	ldrh	r2, [r2, #0]
10010646:	72a2      	strb	r2, [r4, #10]
10010648:	0a12      	lsrs	r2, r2, #8
1001064a:	72e2      	strb	r2, [r4, #11]
1001064c:	1c1a      	adds	r2, r3, #0
1001064e:	32d0      	adds	r2, #208	; 0xd0
10010650:	8812      	ldrh	r2, [r2, #0]
10010652:	7322      	strb	r2, [r4, #12]
10010654:	0a12      	lsrs	r2, r2, #8
10010656:	7362      	strb	r2, [r4, #13]
10010658:	1c1a      	adds	r2, r3, #0
1001065a:	32d2      	adds	r2, #210	; 0xd2
1001065c:	8812      	ldrh	r2, [r2, #0]
1001065e:	33d4      	adds	r3, #212	; 0xd4
10010660:	73a2      	strb	r2, [r4, #14]
10010662:	0a12      	lsrs	r2, r2, #8
10010664:	73e2      	strb	r2, [r4, #15]
10010666:	881b      	ldrh	r3, [r3, #0]
10010668:	7423      	strb	r3, [r4, #16]
1001066a:	0a1b      	lsrs	r3, r3, #8
1001066c:	7463      	strb	r3, [r4, #17]
1001066e:	e016      	b.n	1001069e <gapc_get_dev_info_cfm.constprop.1+0x92>
10010670:	4b11      	ldr	r3, [pc, #68]	; (100106b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010672:	4912      	ldr	r1, [pc, #72]	; (100106bc <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010674:	33aa      	adds	r3, #170	; 0xaa
10010676:	881d      	ldrh	r5, [r3, #0]
10010678:	4811      	ldr	r0, [pc, #68]	; (100106c0 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001067a:	0a2b      	lsrs	r3, r5, #8
1001067c:	72a5      	strb	r5, [r4, #10]
1001067e:	72e3      	strb	r3, [r4, #11]
10010680:	1c2a      	adds	r2, r5, #0
10010682:	4b10      	ldr	r3, [pc, #64]	; (100106c4 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010684:	350c      	adds	r5, #12
10010686:	4798      	blx	r3
10010688:	b2a9      	uxth	r1, r5
1001068a:	e008      	b.n	1001069e <gapc_get_dev_info_cfm.constprop.1+0x92>
1001068c:	4b0a      	ldr	r3, [pc, #40]	; (100106b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001068e:	210c      	movs	r1, #12
10010690:	33cc      	adds	r3, #204	; 0xcc
10010692:	881b      	ldrh	r3, [r3, #0]
10010694:	72a3      	strb	r3, [r4, #10]
10010696:	0a1b      	lsrs	r3, r3, #8
10010698:	72e3      	strb	r3, [r4, #11]
1001069a:	e000      	b.n	1001069e <gapc_get_dev_info_cfm.constprop.1+0x92>
1001069c:	210a      	movs	r1, #10
1001069e:	1c0b      	adds	r3, r1, #0
100106a0:	3b08      	subs	r3, #8
100106a2:	71a3      	strb	r3, [r4, #6]
100106a4:	121b      	asrs	r3, r3, #8
100106a6:	71e3      	strb	r3, [r4, #7]
100106a8:	1c20      	adds	r0, r4, #0
100106aa:	4b07      	ldr	r3, [pc, #28]	; (100106c8 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
100106ac:	4798      	blx	r3
100106ae:	bd38      	pop	{r3, r4, r5, pc}
100106b0:	1001b2f8 	.word	0x1001b2f8
100106b4:	1001af88 	.word	0x1001af88
100106b8:	1001b01a 	.word	0x1001b01a
100106bc:	1001b0c6 	.word	0x1001b0c6
100106c0:	1001b304 	.word	0x1001b304
100106c4:	10016253 	.word	0x10016253
100106c8:	100104fd 	.word	0x100104fd

100106cc <check_ConnData_idx_role>:
100106cc:	4b0c      	ldr	r3, [pc, #48]	; (10010700 <check_ConnData_idx_role+0x34>)
100106ce:	b570      	push	{r4, r5, r6, lr}
100106d0:	1c04      	adds	r4, r0, #0
100106d2:	2008      	movs	r0, #8
100106d4:	429c      	cmp	r4, r3
100106d6:	d011      	beq.n	100106fc <check_ConnData_idx_role+0x30>
100106d8:	2300      	movs	r3, #0
100106da:	2212      	movs	r2, #18
100106dc:	435a      	muls	r2, r3
100106de:	4d09      	ldr	r5, [pc, #36]	; (10010704 <check_ConnData_idx_role+0x38>)
100106e0:	b2d8      	uxtb	r0, r3
100106e2:	1956      	adds	r6, r2, r5
100106e4:	8976      	ldrh	r6, [r6, #10]
100106e6:	42a6      	cmp	r6, r4
100106e8:	d104      	bne.n	100106f4 <check_ConnData_idx_role+0x28>
100106ea:	2900      	cmp	r1, #0
100106ec:	d006      	beq.n	100106fc <check_ConnData_idx_role+0x30>
100106ee:	5d53      	ldrb	r3, [r2, r5]
100106f0:	700b      	strb	r3, [r1, #0]
100106f2:	e003      	b.n	100106fc <check_ConnData_idx_role+0x30>
100106f4:	3301      	adds	r3, #1
100106f6:	2b08      	cmp	r3, #8
100106f8:	d1ef      	bne.n	100106da <check_ConnData_idx_role+0xe>
100106fa:	1c18      	adds	r0, r3, #0
100106fc:	bd70      	pop	{r4, r5, r6, pc}
100106fe:	46c0      	nop			; (mov r8, r8)
10010700:	0000ffff 	.word	0x0000ffff
10010704:	1001af8a 	.word	0x1001af8a

10010708 <check_ConnData_emptyEntry>:
10010708:	2300      	movs	r3, #0
1001070a:	2212      	movs	r2, #18
1001070c:	435a      	muls	r2, r3
1001070e:	4906      	ldr	r1, [pc, #24]	; (10010728 <check_ConnData_emptyEntry+0x20>)
10010710:	b2d8      	uxtb	r0, r3
10010712:	1852      	adds	r2, r2, r1
10010714:	8951      	ldrh	r1, [r2, #10]
10010716:	4a05      	ldr	r2, [pc, #20]	; (1001072c <check_ConnData_emptyEntry+0x24>)
10010718:	4291      	cmp	r1, r2
1001071a:	d003      	beq.n	10010724 <check_ConnData_emptyEntry+0x1c>
1001071c:	3301      	adds	r3, #1
1001071e:	2b08      	cmp	r3, #8
10010720:	d1f3      	bne.n	1001070a <check_ConnData_emptyEntry+0x2>
10010722:	1c18      	adds	r0, r3, #0
10010724:	4770      	bx	lr
10010726:	46c0      	nop			; (mov r8, r8)
10010728:	1001af8a 	.word	0x1001af8a
1001072c:	0000ffff 	.word	0x0000ffff

10010730 <gapc_cmp_evt>:
10010730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010732:	780b      	ldrb	r3, [r1, #0]
10010734:	1c05      	adds	r5, r0, #0
10010736:	1e58      	subs	r0, r3, #1
10010738:	784e      	ldrb	r6, [r1, #1]
1001073a:	280f      	cmp	r0, #15
1001073c:	d85a      	bhi.n	100107f4 <gapc_cmp_evt+0xc4>
1001073e:	1c14      	adds	r4, r2, #0
10010740:	f002 fd62 	bl	10013208 <__gnu_thumb1_case_uqi>
10010744:	5858440a 	.word	0x5858440a
10010748:	4b584444 	.word	0x4b584444
1001074c:	0825122d 	.word	0x0825122d
10010750:	3e395858 	.word	0x3e395858
10010754:	203b      	movs	r0, #59	; 0x3b
10010756:	e04e      	b.n	100107f6 <gapc_cmp_evt+0xc6>
10010758:	203b      	movs	r0, #59	; 0x3b
1001075a:	2e00      	cmp	r6, #0
1001075c:	d04b      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
1001075e:	0a2d      	lsrs	r5, r5, #8
10010760:	8015      	strh	r5, [r2, #0]
10010762:	7096      	strb	r6, [r2, #2]
10010764:	3835      	subs	r0, #53	; 0x35
10010766:	e046      	b.n	100107f6 <gapc_cmp_evt+0xc6>
10010768:	466b      	mov	r3, sp
1001076a:	1ddf      	adds	r7, r3, #7
1001076c:	2301      	movs	r3, #1
1001076e:	0a2d      	lsrs	r5, r5, #8
10010770:	703b      	strb	r3, [r7, #0]
10010772:	1c28      	adds	r0, r5, #0
10010774:	1c39      	adds	r1, r7, #0
10010776:	4b20      	ldr	r3, [pc, #128]	; (100107f8 <gapc_cmp_evt+0xc8>)
10010778:	4798      	blx	r3
1001077a:	2807      	cmp	r0, #7
1001077c:	d803      	bhi.n	10010786 <gapc_cmp_evt+0x56>
1001077e:	783b      	ldrb	r3, [r7, #0]
10010780:	203b      	movs	r0, #59	; 0x3b
10010782:	2b00      	cmp	r3, #0
10010784:	d037      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
10010786:	8065      	strh	r5, [r4, #2]
10010788:	7126      	strb	r6, [r4, #4]
1001078a:	2009      	movs	r0, #9
1001078c:	e033      	b.n	100107f6 <gapc_cmp_evt+0xc6>
1001078e:	203b      	movs	r0, #59	; 0x3b
10010790:	2e00      	cmp	r6, #0
10010792:	d030      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
10010794:	0a2d      	lsrs	r5, r5, #8
10010796:	8015      	strh	r5, [r2, #0]
10010798:	7096      	strb	r6, [r2, #2]
1001079a:	382d      	subs	r0, #45	; 0x2d
1001079c:	e02b      	b.n	100107f6 <gapc_cmp_evt+0xc6>
1001079e:	203b      	movs	r0, #59	; 0x3b
100107a0:	2e00      	cmp	r6, #0
100107a2:	d028      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
100107a4:	2300      	movs	r3, #0
100107a6:	0a2d      	lsrs	r5, r5, #8
100107a8:	8015      	strh	r5, [r2, #0]
100107aa:	7096      	strb	r6, [r2, #2]
100107ac:	8093      	strh	r3, [r2, #4]
100107ae:	80d3      	strh	r3, [r2, #6]
100107b0:	8113      	strh	r3, [r2, #8]
100107b2:	3834      	subs	r0, #52	; 0x34
100107b4:	e01f      	b.n	100107f6 <gapc_cmp_evt+0xc6>
100107b6:	203b      	movs	r0, #59	; 0x3b
100107b8:	2e00      	cmp	r6, #0
100107ba:	d01c      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
100107bc:	7216      	strb	r6, [r2, #8]
100107be:	e003      	b.n	100107c8 <gapc_cmp_evt+0x98>
100107c0:	203b      	movs	r0, #59	; 0x3b
100107c2:	2e00      	cmp	r6, #0
100107c4:	d017      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
100107c6:	7116      	strb	r6, [r2, #4]
100107c8:	3812      	subs	r0, #18
100107ca:	e014      	b.n	100107f6 <gapc_cmp_evt+0xc6>
100107cc:	203b      	movs	r0, #59	; 0x3b
100107ce:	2e00      	cmp	r6, #0
100107d0:	d011      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
100107d2:	7093      	strb	r3, [r2, #2]
100107d4:	70d6      	strb	r6, [r2, #3]
100107d6:	382a      	subs	r0, #42	; 0x2a
100107d8:	e00d      	b.n	100107f6 <gapc_cmp_evt+0xc6>
100107da:	203b      	movs	r0, #59	; 0x3b
100107dc:	2e00      	cmp	r6, #0
100107de:	d00a      	beq.n	100107f6 <gapc_cmp_evt+0xc6>
100107e0:	0a2d      	lsrs	r5, r5, #8
100107e2:	7016      	strb	r6, [r2, #0]
100107e4:	8055      	strh	r5, [r2, #2]
100107e6:	1d10      	adds	r0, r2, #4
100107e8:	2100      	movs	r1, #0
100107ea:	2205      	movs	r2, #5
100107ec:	4b03      	ldr	r3, [pc, #12]	; (100107fc <gapc_cmp_evt+0xcc>)
100107ee:	4798      	blx	r3
100107f0:	2012      	movs	r0, #18
100107f2:	e000      	b.n	100107f6 <gapc_cmp_evt+0xc6>
100107f4:	2000      	movs	r0, #0
100107f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107f8:	100106cd 	.word	0x100106cd
100107fc:	10016265 	.word	0x10016265

10010800 <gapc_connection_cfm_handler>:
10010800:	b5f0      	push	{r4, r5, r6, r7, lr}
10010802:	b085      	sub	sp, #20
10010804:	1c1d      	adds	r5, r3, #0
10010806:	ab0a      	add	r3, sp, #40	; 0x28
10010808:	781b      	ldrb	r3, [r3, #0]
1001080a:	9201      	str	r2, [sp, #4]
1001080c:	9302      	str	r3, [sp, #8]
1001080e:	ab0b      	add	r3, sp, #44	; 0x2c
10010810:	781b      	ldrb	r3, [r3, #0]
10010812:	1c07      	adds	r7, r0, #0
10010814:	9303      	str	r3, [sp, #12]
10010816:	ab0c      	add	r3, sp, #48	; 0x30
10010818:	881a      	ldrh	r2, [r3, #0]
1001081a:	2302      	movs	r3, #2
1001081c:	1c0e      	adds	r6, r1, #0
1001081e:	4c23      	ldr	r4, [pc, #140]	; (100108ac <gapc_connection_cfm_handler+0xac>)
10010820:	1c39      	adds	r1, r7, #0
10010822:	7023      	strb	r3, [r4, #0]
10010824:	330c      	adds	r3, #12
10010826:	7063      	strb	r3, [r4, #1]
10010828:	70a3      	strb	r3, [r4, #2]
1001082a:	4b21      	ldr	r3, [pc, #132]	; (100108b0 <gapc_connection_cfm_handler+0xb0>)
1001082c:	70e2      	strb	r2, [r4, #3]
1001082e:	881a      	ldrh	r2, [r3, #0]
10010830:	881b      	ldrh	r3, [r3, #0]
10010832:	7122      	strb	r2, [r4, #4]
10010834:	0a1b      	lsrs	r3, r3, #8
10010836:	4f1f      	ldr	r7, [pc, #124]	; (100108b4 <gapc_connection_cfm_handler+0xb4>)
10010838:	2210      	movs	r2, #16
1001083a:	481f      	ldr	r0, [pc, #124]	; (100108b8 <gapc_connection_cfm_handler+0xb8>)
1001083c:	7163      	strb	r3, [r4, #5]
1001083e:	47b8      	blx	r7
10010840:	0a33      	lsrs	r3, r6, #8
10010842:	7626      	strb	r6, [r4, #24]
10010844:	7663      	strb	r3, [r4, #25]
10010846:	9901      	ldr	r1, [sp, #4]
10010848:	0c33      	lsrs	r3, r6, #16
1001084a:	2210      	movs	r2, #16
1001084c:	0e36      	lsrs	r6, r6, #24
1001084e:	481b      	ldr	r0, [pc, #108]	; (100108bc <gapc_connection_cfm_handler+0xbc>)
10010850:	76a3      	strb	r3, [r4, #26]
10010852:	76e6      	strb	r6, [r4, #27]
10010854:	47b8      	blx	r7
10010856:	1c23      	adds	r3, r4, #0
10010858:	332c      	adds	r3, #44	; 0x2c
1001085a:	701d      	strb	r5, [r3, #0]
1001085c:	1c23      	adds	r3, r4, #0
1001085e:	0a2a      	lsrs	r2, r5, #8
10010860:	332d      	adds	r3, #45	; 0x2d
10010862:	701a      	strb	r2, [r3, #0]
10010864:	1c23      	adds	r3, r4, #0
10010866:	0c2a      	lsrs	r2, r5, #16
10010868:	332e      	adds	r3, #46	; 0x2e
1001086a:	701a      	strb	r2, [r3, #0]
1001086c:	1c23      	adds	r3, r4, #0
1001086e:	0e2d      	lsrs	r5, r5, #24
10010870:	332f      	adds	r3, #47	; 0x2f
10010872:	466a      	mov	r2, sp
10010874:	701d      	strb	r5, [r3, #0]
10010876:	1c23      	adds	r3, r4, #0
10010878:	7a12      	ldrb	r2, [r2, #8]
1001087a:	3330      	adds	r3, #48	; 0x30
1001087c:	701a      	strb	r2, [r3, #0]
1001087e:	1c23      	adds	r3, r4, #0
10010880:	2500      	movs	r5, #0
10010882:	3331      	adds	r3, #49	; 0x31
10010884:	466a      	mov	r2, sp
10010886:	701d      	strb	r5, [r3, #0]
10010888:	1c23      	adds	r3, r4, #0
1001088a:	7b12      	ldrb	r2, [r2, #12]
1001088c:	3332      	adds	r3, #50	; 0x32
1001088e:	701a      	strb	r2, [r3, #0]
10010890:	1c23      	adds	r3, r4, #0
10010892:	3333      	adds	r3, #51	; 0x33
10010894:	701d      	strb	r5, [r3, #0]
10010896:	232c      	movs	r3, #44	; 0x2c
10010898:	1c20      	adds	r0, r4, #0
1001089a:	71a3      	strb	r3, [r4, #6]
1001089c:	2134      	movs	r1, #52	; 0x34
1001089e:	4b08      	ldr	r3, [pc, #32]	; (100108c0 <gapc_connection_cfm_handler+0xc0>)
100108a0:	71e5      	strb	r5, [r4, #7]
100108a2:	4798      	blx	r3
100108a4:	1c28      	adds	r0, r5, #0
100108a6:	b005      	add	sp, #20
100108a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108aa:	46c0      	nop			; (mov r8, r8)
100108ac:	1001b2f8 	.word	0x1001b2f8
100108b0:	1001af88 	.word	0x1001af88
100108b4:	10016253 	.word	0x10016253
100108b8:	1001b300 	.word	0x1001b300
100108bc:	1001b314 	.word	0x1001b314
100108c0:	100104fd 	.word	0x100104fd

100108c4 <gapc_con_req_ind>:
100108c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100108c6:	7845      	ldrb	r5, [r0, #1]
100108c8:	7803      	ldrb	r3, [r0, #0]
100108ca:	4c30      	ldr	r4, [pc, #192]	; (1001098c <gapc_con_req_ind+0xc8>)
100108cc:	022d      	lsls	r5, r5, #8
100108ce:	431d      	orrs	r5, r3
100108d0:	85a5      	strh	r5, [r4, #44]	; 0x2c
100108d2:	78c3      	ldrb	r3, [r0, #3]
100108d4:	7882      	ldrb	r2, [r0, #2]
100108d6:	b08b      	sub	sp, #44	; 0x2c
100108d8:	021b      	lsls	r3, r3, #8
100108da:	431a      	orrs	r2, r3
100108dc:	466b      	mov	r3, sp
100108de:	9205      	str	r2, [sp, #20]
100108e0:	8a9b      	ldrh	r3, [r3, #20]
100108e2:	2120      	movs	r1, #32
100108e4:	85e3      	strh	r3, [r4, #46]	; 0x2e
100108e6:	7943      	ldrb	r3, [r0, #5]
100108e8:	7902      	ldrb	r2, [r0, #4]
100108ea:	021b      	lsls	r3, r3, #8
100108ec:	431a      	orrs	r2, r3
100108ee:	466b      	mov	r3, sp
100108f0:	9206      	str	r2, [sp, #24]
100108f2:	8b1b      	ldrh	r3, [r3, #24]
100108f4:	1c06      	adds	r6, r0, #0
100108f6:	8623      	strh	r3, [r4, #48]	; 0x30
100108f8:	79c3      	ldrb	r3, [r0, #7]
100108fa:	7982      	ldrb	r2, [r0, #6]
100108fc:	021b      	lsls	r3, r3, #8
100108fe:	431a      	orrs	r2, r3
10010900:	466b      	mov	r3, sp
10010902:	9207      	str	r2, [sp, #28]
10010904:	466a      	mov	r2, sp
10010906:	8b9b      	ldrh	r3, [r3, #28]
10010908:	1852      	adds	r2, r2, r1
1001090a:	8663      	strh	r3, [r4, #50]	; 0x32
1001090c:	7a43      	ldrb	r3, [r0, #9]
1001090e:	1c01      	adds	r1, r0, #0
10010910:	9308      	str	r3, [sp, #32]
10010912:	1c23      	adds	r3, r4, #0
10010914:	7812      	ldrb	r2, [r2, #0]
10010916:	3377      	adds	r3, #119	; 0x77
10010918:	3478      	adds	r4, #120	; 0x78
1001091a:	701a      	strb	r2, [r3, #0]
1001091c:	310a      	adds	r1, #10
1001091e:	2206      	movs	r2, #6
10010920:	4b1b      	ldr	r3, [pc, #108]	; (10010990 <gapc_con_req_ind+0xcc>)
10010922:	1c20      	adds	r0, r4, #0
10010924:	4798      	blx	r3
10010926:	7c33      	ldrb	r3, [r6, #16]
10010928:	9309      	str	r3, [sp, #36]	; 0x24
1001092a:	4b1a      	ldr	r3, [pc, #104]	; (10010994 <gapc_con_req_ind+0xd0>)
1001092c:	4798      	blx	r3
1001092e:	4e1a      	ldr	r6, [pc, #104]	; (10010998 <gapc_con_req_ind+0xd4>)
10010930:	1e07      	subs	r7, r0, #0
10010932:	2f07      	cmp	r7, #7
10010934:	d81b      	bhi.n	1001096e <gapc_con_req_ind+0xaa>
10010936:	2312      	movs	r3, #18
10010938:	4343      	muls	r3, r0
1001093a:	18f0      	adds	r0, r6, r3
1001093c:	8145      	strh	r5, [r0, #10]
1001093e:	4669      	mov	r1, sp
10010940:	2524      	movs	r5, #36	; 0x24
10010942:	1949      	adds	r1, r1, r5
10010944:	7809      	ldrb	r1, [r1, #0]
10010946:	2206      	movs	r2, #6
10010948:	54f1      	strb	r1, [r6, r3]
1001094a:	2120      	movs	r1, #32
1001094c:	466b      	mov	r3, sp
1001094e:	185b      	adds	r3, r3, r1
10010950:	781b      	ldrb	r3, [r3, #0]
10010952:	1c21      	adds	r1, r4, #0
10010954:	7043      	strb	r3, [r0, #1]
10010956:	466b      	mov	r3, sp
10010958:	8a9b      	ldrh	r3, [r3, #20]
1001095a:	3002      	adds	r0, #2
1001095c:	8143      	strh	r3, [r0, #10]
1001095e:	466b      	mov	r3, sp
10010960:	8b1b      	ldrh	r3, [r3, #24]
10010962:	8183      	strh	r3, [r0, #12]
10010964:	466b      	mov	r3, sp
10010966:	8b9b      	ldrh	r3, [r3, #28]
10010968:	81c3      	strh	r3, [r0, #14]
1001096a:	4b09      	ldr	r3, [pc, #36]	; (10010990 <gapc_con_req_ind+0xcc>)
1001096c:	4798      	blx	r3
1001096e:	2112      	movs	r1, #18
10010970:	2300      	movs	r3, #0
10010972:	434f      	muls	r7, r1
10010974:	9300      	str	r3, [sp, #0]
10010976:	9301      	str	r3, [sp, #4]
10010978:	19f6      	adds	r6, r6, r7
1001097a:	8971      	ldrh	r1, [r6, #10]
1001097c:	4a07      	ldr	r2, [pc, #28]	; (1001099c <gapc_con_req_ind+0xd8>)
1001097e:	9102      	str	r1, [sp, #8]
10010980:	1c10      	adds	r0, r2, #0
10010982:	1c19      	adds	r1, r3, #0
10010984:	4c06      	ldr	r4, [pc, #24]	; (100109a0 <gapc_con_req_ind+0xdc>)
10010986:	47a0      	blx	r4
10010988:	b00b      	add	sp, #44	; 0x2c
1001098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001098c:	1001b01a 	.word	0x1001b01a
10010990:	10016253 	.word	0x10016253
10010994:	10010709 	.word	0x10010709
10010998:	1001af8a 	.word	0x1001af8a
1001099c:	1001a044 	.word	0x1001a044
100109a0:	10010801 	.word	0x10010801

100109a4 <gapc_disconnect_cmd_handler>:
100109a4:	2204      	movs	r2, #4
100109a6:	b510      	push	{r4, lr}
100109a8:	4b0c      	ldr	r3, [pc, #48]	; (100109dc <gapc_disconnect_cmd_handler+0x38>)
100109aa:	2400      	movs	r4, #0
100109ac:	701a      	strb	r2, [r3, #0]
100109ae:	320a      	adds	r2, #10
100109b0:	705a      	strb	r2, [r3, #1]
100109b2:	709a      	strb	r2, [r3, #2]
100109b4:	4a0a      	ldr	r2, [pc, #40]	; (100109e0 <gapc_disconnect_cmd_handler+0x3c>)
100109b6:	70d9      	strb	r1, [r3, #3]
100109b8:	8811      	ldrh	r1, [r2, #0]
100109ba:	8812      	ldrh	r2, [r2, #0]
100109bc:	7119      	strb	r1, [r3, #4]
100109be:	0a12      	lsrs	r2, r2, #8
100109c0:	715a      	strb	r2, [r3, #5]
100109c2:	2201      	movs	r2, #1
100109c4:	721a      	strb	r2, [r3, #8]
100109c6:	1892      	adds	r2, r2, r2
100109c8:	7258      	strb	r0, [r3, #9]
100109ca:	719a      	strb	r2, [r3, #6]
100109cc:	71dc      	strb	r4, [r3, #7]
100109ce:	1c18      	adds	r0, r3, #0
100109d0:	210a      	movs	r1, #10
100109d2:	4b04      	ldr	r3, [pc, #16]	; (100109e4 <gapc_disconnect_cmd_handler+0x40>)
100109d4:	4798      	blx	r3
100109d6:	1c20      	adds	r0, r4, #0
100109d8:	bd10      	pop	{r4, pc}
100109da:	46c0      	nop			; (mov r8, r8)
100109dc:	1001b2f8 	.word	0x1001b2f8
100109e0:	1001af88 	.word	0x1001af88
100109e4:	100104fd 	.word	0x100104fd

100109e8 <gapc_disconnect_ind>:
100109e8:	1c02      	adds	r2, r0, #0
100109ea:	b508      	push	{r3, lr}
100109ec:	7843      	ldrb	r3, [r0, #1]
100109ee:	7800      	ldrb	r0, [r0, #0]
100109f0:	021b      	lsls	r3, r3, #8
100109f2:	4318      	orrs	r0, r3
100109f4:	8008      	strh	r0, [r1, #0]
100109f6:	7893      	ldrb	r3, [r2, #2]
100109f8:	708b      	strb	r3, [r1, #2]
100109fa:	2100      	movs	r1, #0
100109fc:	4b05      	ldr	r3, [pc, #20]	; (10010a14 <gapc_disconnect_ind+0x2c>)
100109fe:	4798      	blx	r3
10010a00:	2807      	cmp	r0, #7
10010a02:	d806      	bhi.n	10010a12 <gapc_disconnect_ind+0x2a>
10010a04:	2312      	movs	r3, #18
10010a06:	4358      	muls	r0, r3
10010a08:	4b03      	ldr	r3, [pc, #12]	; (10010a18 <gapc_disconnect_ind+0x30>)
10010a0a:	1818      	adds	r0, r3, r0
10010a0c:	2301      	movs	r3, #1
10010a0e:	425b      	negs	r3, r3
10010a10:	8143      	strh	r3, [r0, #10]
10010a12:	bd08      	pop	{r3, pc}
10010a14:	100106cd 	.word	0x100106cd
10010a18:	1001af8a 	.word	0x1001af8a

10010a1c <gapc_bond_cmd_handler>:
10010a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010a1e:	9300      	str	r3, [sp, #0]
10010a20:	2312      	movs	r3, #18
10010a22:	1c04      	adds	r4, r0, #0
10010a24:	a808      	add	r0, sp, #32
10010a26:	7807      	ldrb	r7, [r0, #0]
10010a28:	a809      	add	r0, sp, #36	; 0x24
10010a2a:	7806      	ldrb	r6, [r0, #0]
10010a2c:	a80a      	add	r0, sp, #40	; 0x28
10010a2e:	7805      	ldrb	r5, [r0, #0]
10010a30:	a80b      	add	r0, sp, #44	; 0x2c
10010a32:	7800      	ldrb	r0, [r0, #0]
10010a34:	9001      	str	r0, [sp, #4]
10010a36:	4810      	ldr	r0, [pc, #64]	; (10010a78 <gapc_bond_cmd_handler+0x5c>)
10010a38:	7003      	strb	r3, [r0, #0]
10010a3a:	230e      	movs	r3, #14
10010a3c:	70c4      	strb	r4, [r0, #3]
10010a3e:	4c0f      	ldr	r4, [pc, #60]	; (10010a7c <gapc_bond_cmd_handler+0x60>)
10010a40:	7043      	strb	r3, [r0, #1]
10010a42:	7083      	strb	r3, [r0, #2]
10010a44:	8823      	ldrh	r3, [r4, #0]
10010a46:	8824      	ldrh	r4, [r4, #0]
10010a48:	7103      	strb	r3, [r0, #4]
10010a4a:	466b      	mov	r3, sp
10010a4c:	781b      	ldrb	r3, [r3, #0]
10010a4e:	0a24      	lsrs	r4, r4, #8
10010a50:	72c3      	strb	r3, [r0, #11]
10010a52:	466b      	mov	r3, sp
10010a54:	791b      	ldrb	r3, [r3, #4]
10010a56:	7144      	strb	r4, [r0, #5]
10010a58:	73c3      	strb	r3, [r0, #15]
10010a5a:	2308      	movs	r3, #8
10010a5c:	7183      	strb	r3, [r0, #6]
10010a5e:	2300      	movs	r3, #0
10010a60:	240a      	movs	r4, #10
10010a62:	7241      	strb	r1, [r0, #9]
10010a64:	71c3      	strb	r3, [r0, #7]
10010a66:	2110      	movs	r1, #16
10010a68:	4b05      	ldr	r3, [pc, #20]	; (10010a80 <gapc_bond_cmd_handler+0x64>)
10010a6a:	7307      	strb	r7, [r0, #12]
10010a6c:	7346      	strb	r6, [r0, #13]
10010a6e:	7385      	strb	r5, [r0, #14]
10010a70:	7204      	strb	r4, [r0, #8]
10010a72:	7282      	strb	r2, [r0, #10]
10010a74:	4798      	blx	r3
10010a76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010a78:	1001b2f8 	.word	0x1001b2f8
10010a7c:	1001af88 	.word	0x1001af88
10010a80:	100104fd 	.word	0x100104fd

10010a84 <gapc_bond_ind>:
10010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010a86:	780e      	ldrb	r6, [r1, #0]
10010a88:	1c03      	adds	r3, r0, #0
10010a8a:	1eb0      	subs	r0, r6, #2
10010a8c:	2805      	cmp	r0, #5
10010a8e:	d85d      	bhi.n	10010b4c <gapc_bond_ind+0xc8>
10010a90:	1c15      	adds	r5, r2, #0
10010a92:	1c0c      	adds	r4, r1, #0
10010a94:	f002 fbb8 	bl	10013208 <__gnu_thumb1_case_uqi>
10010a98:	2f5a030d 	.word	0x2f5a030d
10010a9c:	4740      	.short	0x4740
10010a9e:	2009      	movs	r0, #9
10010aa0:	2a00      	cmp	r2, #0
10010aa2:	d054      	beq.n	10010b4e <gapc_bond_ind+0xca>
10010aa4:	0a1b      	lsrs	r3, r3, #8
10010aa6:	8053      	strh	r3, [r2, #2]
10010aa8:	788b      	ldrb	r3, [r1, #2]
10010aaa:	4829      	ldr	r0, [pc, #164]	; (10010b50 <gapc_bond_ind+0xcc>)
10010aac:	7113      	strb	r3, [r2, #4]
10010aae:	2100      	movs	r1, #0
10010ab0:	e01c      	b.n	10010aec <gapc_bond_ind+0x68>
10010ab2:	2009      	movs	r0, #9
10010ab4:	2a00      	cmp	r2, #0
10010ab6:	d04a      	beq.n	10010b4e <gapc_bond_ind+0xca>
10010ab8:	4c25      	ldr	r4, [pc, #148]	; (10010b50 <gapc_bond_ind+0xcc>)
10010aba:	0a1b      	lsrs	r3, r3, #8
10010abc:	8053      	strh	r3, [r2, #2]
10010abe:	788b      	ldrb	r3, [r1, #2]
10010ac0:	2700      	movs	r7, #0
10010ac2:	1c10      	adds	r0, r2, #0
10010ac4:	1c21      	adds	r1, r4, #0
10010ac6:	7013      	strb	r3, [r2, #0]
10010ac8:	4e22      	ldr	r6, [pc, #136]	; (10010b54 <gapc_bond_ind+0xd0>)
10010aca:	7117      	strb	r7, [r2, #4]
10010acc:	312e      	adds	r1, #46	; 0x2e
10010ace:	2217      	movs	r2, #23
10010ad0:	3032      	adds	r0, #50	; 0x32
10010ad2:	47b0      	blx	r6
10010ad4:	1c28      	adds	r0, r5, #0
10010ad6:	1c21      	adds	r1, r4, #0
10010ad8:	2210      	movs	r2, #16
10010ada:	311e      	adds	r1, #30
10010adc:	3022      	adds	r0, #34	; 0x22
10010ade:	47b0      	blx	r6
10010ae0:	1ca1      	adds	r1, r4, #2
10010ae2:	1da8      	adds	r0, r5, #6
10010ae4:	221c      	movs	r2, #28
10010ae6:	47b0      	blx	r6
10010ae8:	1c20      	adds	r0, r4, #0
10010aea:	1c39      	adds	r1, r7, #0
10010aec:	2246      	movs	r2, #70	; 0x46
10010aee:	4b1a      	ldr	r3, [pc, #104]	; (10010b58 <gapc_bond_ind+0xd4>)
10010af0:	4798      	blx	r3
10010af2:	2009      	movs	r0, #9
10010af4:	e02b      	b.n	10010b4e <gapc_bond_ind+0xca>
10010af6:	4d16      	ldr	r5, [pc, #88]	; (10010b50 <gapc_bond_ind+0xcc>)
10010af8:	3102      	adds	r1, #2
10010afa:	1c28      	adds	r0, r5, #0
10010afc:	2210      	movs	r2, #16
10010afe:	4e15      	ldr	r6, [pc, #84]	; (10010b54 <gapc_bond_ind+0xd0>)
10010b00:	302e      	adds	r0, #46	; 0x2e
10010b02:	47b0      	blx	r6
10010b04:	1c28      	adds	r0, r5, #0
10010b06:	1c21      	adds	r1, r4, #0
10010b08:	303f      	adds	r0, #63	; 0x3f
10010b0a:	3112      	adds	r1, #18
10010b0c:	2206      	movs	r2, #6
10010b0e:	47b0      	blx	r6
10010b10:	7e23      	ldrb	r3, [r4, #24]
10010b12:	353e      	adds	r5, #62	; 0x3e
10010b14:	702b      	strb	r3, [r5, #0]
10010b16:	e019      	b.n	10010b4c <gapc_bond_ind+0xc8>
10010b18:	480d      	ldr	r0, [pc, #52]	; (10010b50 <gapc_bond_ind+0xcc>)
10010b1a:	3102      	adds	r1, #2
10010b1c:	2210      	movs	r2, #16
10010b1e:	4b0d      	ldr	r3, [pc, #52]	; (10010b54 <gapc_bond_ind+0xd0>)
10010b20:	301e      	adds	r0, #30
10010b22:	4798      	blx	r3
10010b24:	e012      	b.n	10010b4c <gapc_bond_ind+0xc8>
10010b26:	4d0a      	ldr	r5, [pc, #40]	; (10010b50 <gapc_bond_ind+0xcc>)
10010b28:	3102      	adds	r1, #2
10010b2a:	2210      	movs	r2, #16
10010b2c:	4e09      	ldr	r6, [pc, #36]	; (10010b54 <gapc_bond_ind+0xd0>)
10010b2e:	1ca8      	adds	r0, r5, #2
10010b30:	47b0      	blx	r6
10010b32:	1c28      	adds	r0, r5, #0
10010b34:	1c21      	adds	r1, r4, #0
10010b36:	7ce3      	ldrb	r3, [r4, #19]
10010b38:	7ca2      	ldrb	r2, [r4, #18]
10010b3a:	021b      	lsls	r3, r3, #8
10010b3c:	4313      	orrs	r3, r2
10010b3e:	3014      	adds	r0, #20
10010b40:	3114      	adds	r1, #20
10010b42:	2208      	movs	r2, #8
10010b44:	826b      	strh	r3, [r5, #18]
10010b46:	47b0      	blx	r6
10010b48:	7f23      	ldrb	r3, [r4, #28]
10010b4a:	772b      	strb	r3, [r5, #28]
10010b4c:	2000      	movs	r0, #0
10010b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010b50:	1001a074 	.word	0x1001a074
10010b54:	10016253 	.word	0x10016253
10010b58:	10016265 	.word	0x10016265

10010b5c <gapc_bond_req_ind>:
10010b5c:	b570      	push	{r4, r5, r6, lr}
10010b5e:	780c      	ldrb	r4, [r1, #0]
10010b60:	1c03      	adds	r3, r0, #0
10010b62:	7849      	ldrb	r1, [r1, #1]
10010b64:	2c07      	cmp	r4, #7
10010b66:	d85c      	bhi.n	10010c22 <gapc_bond_req_ind+0xc6>
10010b68:	1c20      	adds	r0, r4, #0
10010b6a:	f002 fb4d 	bl	10013208 <__gnu_thumb1_case_uqi>
10010b6e:	5a04      	.short	0x5a04
10010b70:	5a0b5a5a 	.word	0x5a0b5a5a
10010b74:	1f1f      	.short	0x1f1f
10010b76:	200a      	movs	r0, #10
10010b78:	2a00      	cmp	r2, #0
10010b7a:	d053      	beq.n	10010c24 <gapc_bond_req_ind+0xc8>
10010b7c:	0a1b      	lsrs	r3, r3, #8
10010b7e:	8013      	strh	r3, [r2, #0]
10010b80:	7091      	strb	r1, [r2, #2]
10010b82:	e04f      	b.n	10010c24 <gapc_bond_req_ind+0xc8>
10010b84:	2a00      	cmp	r2, #0
10010b86:	d00b      	beq.n	10010ba0 <gapc_bond_req_ind+0x44>
10010b88:	0a1b      	lsrs	r3, r3, #8
10010b8a:	8013      	strh	r3, [r2, #0]
10010b8c:	2900      	cmp	r1, #0
10010b8e:	d102      	bne.n	10010b96 <gapc_bond_req_ind+0x3a>
10010b90:	2301      	movs	r3, #1
10010b92:	7093      	strb	r3, [r2, #2]
10010b94:	e004      	b.n	10010ba0 <gapc_bond_req_ind+0x44>
10010b96:	2300      	movs	r3, #0
10010b98:	7093      	strb	r3, [r2, #2]
10010b9a:	2902      	cmp	r1, #2
10010b9c:	d102      	bne.n	10010ba4 <gapc_bond_req_ind+0x48>
10010b9e:	70d3      	strb	r3, [r2, #3]
10010ba0:	200c      	movs	r0, #12
10010ba2:	e03f      	b.n	10010c24 <gapc_bond_req_ind+0xc8>
10010ba4:	2901      	cmp	r1, #1
10010ba6:	d1fb      	bne.n	10010ba0 <gapc_bond_req_ind+0x44>
10010ba8:	70d1      	strb	r1, [r2, #3]
10010baa:	e7f9      	b.n	10010ba0 <gapc_bond_req_ind+0x44>
10010bac:	2214      	movs	r2, #20
10010bae:	481e      	ldr	r0, [pc, #120]	; (10010c28 <gapc_bond_req_ind+0xcc>)
10010bb0:	0a1b      	lsrs	r3, r3, #8
10010bb2:	70c3      	strb	r3, [r0, #3]
10010bb4:	4b1d      	ldr	r3, [pc, #116]	; (10010c2c <gapc_bond_req_ind+0xd0>)
10010bb6:	7002      	strb	r2, [r0, #0]
10010bb8:	3a06      	subs	r2, #6
10010bba:	7042      	strb	r2, [r0, #1]
10010bbc:	7082      	strb	r2, [r0, #2]
10010bbe:	881a      	ldrh	r2, [r3, #0]
10010bc0:	881b      	ldrh	r3, [r3, #0]
10010bc2:	4e1b      	ldr	r6, [pc, #108]	; (10010c30 <gapc_bond_req_ind+0xd4>)
10010bc4:	0a1b      	lsrs	r3, r3, #8
10010bc6:	7143      	strb	r3, [r0, #5]
10010bc8:	2301      	movs	r3, #1
10010bca:	7102      	strb	r2, [r0, #4]
10010bcc:	7204      	strb	r4, [r0, #8]
10010bce:	7243      	strb	r3, [r0, #9]
10010bd0:	1c05      	adds	r5, r0, #0
10010bd2:	1c31      	adds	r1, r6, #0
10010bd4:	300a      	adds	r0, #10
10010bd6:	2c07      	cmp	r4, #7
10010bd8:	d116      	bne.n	10010c08 <gapc_bond_req_ind+0xac>
10010bda:	317e      	adds	r1, #126	; 0x7e
10010bdc:	2210      	movs	r2, #16
10010bde:	4c15      	ldr	r4, [pc, #84]	; (10010c34 <gapc_bond_req_ind+0xd8>)
10010be0:	47a0      	blx	r4
10010be2:	1c33      	adds	r3, r6, #0
10010be4:	1c31      	adds	r1, r6, #0
10010be6:	1c28      	adds	r0, r5, #0
10010be8:	338e      	adds	r3, #142	; 0x8e
10010bea:	881b      	ldrh	r3, [r3, #0]
10010bec:	3190      	adds	r1, #144	; 0x90
10010bee:	76ab      	strb	r3, [r5, #26]
10010bf0:	2208      	movs	r2, #8
10010bf2:	0a1b      	lsrs	r3, r3, #8
10010bf4:	301c      	adds	r0, #28
10010bf6:	76eb      	strb	r3, [r5, #27]
10010bf8:	47a0      	blx	r4
10010bfa:	1c31      	adds	r1, r6, #0
10010bfc:	3198      	adds	r1, #152	; 0x98
10010bfe:	780a      	ldrb	r2, [r1, #0]
10010c00:	1d6b      	adds	r3, r5, #5
10010c02:	77da      	strb	r2, [r3, #31]
10010c04:	2125      	movs	r1, #37	; 0x25
10010c06:	e004      	b.n	10010c12 <gapc_bond_req_ind+0xb6>
10010c08:	319a      	adds	r1, #154	; 0x9a
10010c0a:	2210      	movs	r2, #16
10010c0c:	4b09      	ldr	r3, [pc, #36]	; (10010c34 <gapc_bond_req_ind+0xd8>)
10010c0e:	4798      	blx	r3
10010c10:	211a      	movs	r1, #26
10010c12:	1c0b      	adds	r3, r1, #0
10010c14:	2400      	movs	r4, #0
10010c16:	3b08      	subs	r3, #8
10010c18:	71ab      	strb	r3, [r5, #6]
10010c1a:	1c28      	adds	r0, r5, #0
10010c1c:	4b06      	ldr	r3, [pc, #24]	; (10010c38 <gapc_bond_req_ind+0xdc>)
10010c1e:	71ec      	strb	r4, [r5, #7]
10010c20:	4798      	blx	r3
10010c22:	2000      	movs	r0, #0
10010c24:	bd70      	pop	{r4, r5, r6, pc}
10010c26:	46c0      	nop			; (mov r8, r8)
10010c28:	1001b2f8 	.word	0x1001b2f8
10010c2c:	1001af88 	.word	0x1001af88
10010c30:	1001b01a 	.word	0x1001b01a
10010c34:	10016253 	.word	0x10016253
10010c38:	100104fd 	.word	0x100104fd

10010c3c <gapc_bond_cfm_handler_pair_resp>:
10010c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c3e:	b085      	sub	sp, #20
10010c40:	1c07      	adds	r7, r0, #0
10010c42:	a80a      	add	r0, sp, #40	; 0x28
10010c44:	7806      	ldrb	r6, [r0, #0]
10010c46:	a80b      	add	r0, sp, #44	; 0x2c
10010c48:	7805      	ldrb	r5, [r0, #0]
10010c4a:	a80c      	add	r0, sp, #48	; 0x30
10010c4c:	7800      	ldrb	r0, [r0, #0]
10010c4e:	2414      	movs	r4, #20
10010c50:	9002      	str	r0, [sp, #8]
10010c52:	a80d      	add	r0, sp, #52	; 0x34
10010c54:	7800      	ldrb	r0, [r0, #0]
10010c56:	9301      	str	r3, [sp, #4]
10010c58:	9003      	str	r0, [sp, #12]
10010c5a:	a80e      	add	r0, sp, #56	; 0x38
10010c5c:	8800      	ldrh	r0, [r0, #0]
10010c5e:	4684      	mov	ip, r0
10010c60:	4812      	ldr	r0, [pc, #72]	; (10010cac <gapc_bond_cfm_handler_pair_resp+0x70>)
10010c62:	7004      	strb	r4, [r0, #0]
10010c64:	3c06      	subs	r4, #6
10010c66:	7044      	strb	r4, [r0, #1]
10010c68:	7084      	strb	r4, [r0, #2]
10010c6a:	4664      	mov	r4, ip
10010c6c:	70c4      	strb	r4, [r0, #3]
10010c6e:	4c10      	ldr	r4, [pc, #64]	; (10010cb0 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010c70:	7247      	strb	r7, [r0, #9]
10010c72:	8823      	ldrh	r3, [r4, #0]
10010c74:	8824      	ldrh	r4, [r4, #0]
10010c76:	7103      	strb	r3, [r0, #4]
10010c78:	466b      	mov	r3, sp
10010c7a:	791b      	ldrb	r3, [r3, #4]
10010c7c:	0a24      	lsrs	r4, r4, #8
10010c7e:	7303      	strb	r3, [r0, #12]
10010c80:	466b      	mov	r3, sp
10010c82:	7a1b      	ldrb	r3, [r3, #8]
10010c84:	7144      	strb	r4, [r0, #5]
10010c86:	73c3      	strb	r3, [r0, #15]
10010c88:	466b      	mov	r3, sp
10010c8a:	7b1b      	ldrb	r3, [r3, #12]
10010c8c:	2401      	movs	r4, #1
10010c8e:	7403      	strb	r3, [r0, #16]
10010c90:	2309      	movs	r3, #9
10010c92:	7183      	strb	r3, [r0, #6]
10010c94:	2300      	movs	r3, #0
10010c96:	7204      	strb	r4, [r0, #8]
10010c98:	7281      	strb	r1, [r0, #10]
10010c9a:	72c2      	strb	r2, [r0, #11]
10010c9c:	7346      	strb	r6, [r0, #13]
10010c9e:	7385      	strb	r5, [r0, #14]
10010ca0:	71c3      	strb	r3, [r0, #7]
10010ca2:	2111      	movs	r1, #17
10010ca4:	4b03      	ldr	r3, [pc, #12]	; (10010cb4 <gapc_bond_cfm_handler_pair_resp+0x78>)
10010ca6:	4798      	blx	r3
10010ca8:	b005      	add	sp, #20
10010caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010cac:	1001b2f8 	.word	0x1001b2f8
10010cb0:	1001af88 	.word	0x1001af88
10010cb4:	100104fd 	.word	0x100104fd

10010cb8 <gapc_bond_cfm_handler_key_exch>:
10010cb8:	b538      	push	{r3, r4, r5, lr}
10010cba:	2514      	movs	r5, #20
10010cbc:	4c0d      	ldr	r4, [pc, #52]	; (10010cf4 <gapc_bond_cfm_handler_key_exch+0x3c>)
10010cbe:	70e3      	strb	r3, [r4, #3]
10010cc0:	4b0d      	ldr	r3, [pc, #52]	; (10010cf8 <gapc_bond_cfm_handler_key_exch+0x40>)
10010cc2:	7025      	strb	r5, [r4, #0]
10010cc4:	3d06      	subs	r5, #6
10010cc6:	7065      	strb	r5, [r4, #1]
10010cc8:	70a5      	strb	r5, [r4, #2]
10010cca:	881d      	ldrh	r5, [r3, #0]
10010ccc:	881b      	ldrh	r3, [r3, #0]
10010cce:	7220      	strb	r0, [r4, #8]
10010cd0:	0a1b      	lsrs	r3, r3, #8
10010cd2:	7163      	strb	r3, [r4, #5]
10010cd4:	7261      	strb	r1, [r4, #9]
10010cd6:	4b09      	ldr	r3, [pc, #36]	; (10010cfc <gapc_bond_cfm_handler_key_exch+0x44>)
10010cd8:	1c11      	adds	r1, r2, #0
10010cda:	4809      	ldr	r0, [pc, #36]	; (10010d00 <gapc_bond_cfm_handler_key_exch+0x48>)
10010cdc:	2210      	movs	r2, #16
10010cde:	7125      	strb	r5, [r4, #4]
10010ce0:	4798      	blx	r3
10010ce2:	2312      	movs	r3, #18
10010ce4:	71a3      	strb	r3, [r4, #6]
10010ce6:	2300      	movs	r3, #0
10010ce8:	1c20      	adds	r0, r4, #0
10010cea:	71e3      	strb	r3, [r4, #7]
10010cec:	211a      	movs	r1, #26
10010cee:	4b05      	ldr	r3, [pc, #20]	; (10010d04 <gapc_bond_cfm_handler_key_exch+0x4c>)
10010cf0:	4798      	blx	r3
10010cf2:	bd38      	pop	{r3, r4, r5, pc}
10010cf4:	1001b2f8 	.word	0x1001b2f8
10010cf8:	1001af88 	.word	0x1001af88
10010cfc:	10016253 	.word	0x10016253
10010d00:	1001b302 	.word	0x1001b302
10010d04:	100104fd 	.word	0x100104fd

10010d08 <gapc_security_cmd_handler>:
10010d08:	221a      	movs	r2, #26
10010d0a:	b508      	push	{r3, lr}
10010d0c:	4b0b      	ldr	r3, [pc, #44]	; (10010d3c <gapc_security_cmd_handler+0x34>)
10010d0e:	701a      	strb	r2, [r3, #0]
10010d10:	3a0c      	subs	r2, #12
10010d12:	705a      	strb	r2, [r3, #1]
10010d14:	709a      	strb	r2, [r3, #2]
10010d16:	4a0a      	ldr	r2, [pc, #40]	; (10010d40 <gapc_security_cmd_handler+0x38>)
10010d18:	70d8      	strb	r0, [r3, #3]
10010d1a:	8810      	ldrh	r0, [r2, #0]
10010d1c:	8812      	ldrh	r2, [r2, #0]
10010d1e:	7118      	strb	r0, [r3, #4]
10010d20:	0a12      	lsrs	r2, r2, #8
10010d22:	715a      	strb	r2, [r3, #5]
10010d24:	220c      	movs	r2, #12
10010d26:	721a      	strb	r2, [r3, #8]
10010d28:	3a0a      	subs	r2, #10
10010d2a:	719a      	strb	r2, [r3, #6]
10010d2c:	2200      	movs	r2, #0
10010d2e:	7259      	strb	r1, [r3, #9]
10010d30:	71da      	strb	r2, [r3, #7]
10010d32:	1c18      	adds	r0, r3, #0
10010d34:	210a      	movs	r1, #10
10010d36:	4b03      	ldr	r3, [pc, #12]	; (10010d44 <gapc_security_cmd_handler+0x3c>)
10010d38:	4798      	blx	r3
10010d3a:	bd08      	pop	{r3, pc}
10010d3c:	1001b2f8 	.word	0x1001b2f8
10010d40:	1001af88 	.word	0x1001af88
10010d44:	100104fd 	.word	0x100104fd

10010d48 <gapc_encrypt_cmd_handler>:
10010d48:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d4a:	2500      	movs	r5, #0
10010d4c:	b089      	sub	sp, #36	; 0x24
10010d4e:	9306      	str	r3, [sp, #24]
10010d50:	ab0e      	add	r3, sp, #56	; 0x38
10010d52:	781b      	ldrb	r3, [r3, #0]
10010d54:	1c17      	adds	r7, r2, #0
10010d56:	9307      	str	r3, [sp, #28]
10010d58:	ab0f      	add	r3, sp, #60	; 0x3c
10010d5a:	781b      	ldrb	r3, [r3, #0]
10010d5c:	4a19      	ldr	r2, [pc, #100]	; (10010dc4 <gapc_encrypt_cmd_handler+0x7c>)
10010d5e:	1c06      	adds	r6, r0, #0
10010d60:	9105      	str	r1, [sp, #20]
10010d62:	9300      	str	r3, [sp, #0]
10010d64:	9002      	str	r0, [sp, #8]
10010d66:	1c29      	adds	r1, r5, #0
10010d68:	1c2b      	adds	r3, r5, #0
10010d6a:	9501      	str	r5, [sp, #4]
10010d6c:	1c10      	adds	r0, r2, #0
10010d6e:	4c16      	ldr	r4, [pc, #88]	; (10010dc8 <gapc_encrypt_cmd_handler+0x80>)
10010d70:	47a0      	blx	r4
10010d72:	2316      	movs	r3, #22
10010d74:	4c15      	ldr	r4, [pc, #84]	; (10010dcc <gapc_encrypt_cmd_handler+0x84>)
10010d76:	9905      	ldr	r1, [sp, #20]
10010d78:	7023      	strb	r3, [r4, #0]
10010d7a:	3b08      	subs	r3, #8
10010d7c:	7063      	strb	r3, [r4, #1]
10010d7e:	70a3      	strb	r3, [r4, #2]
10010d80:	4b13      	ldr	r3, [pc, #76]	; (10010dd0 <gapc_encrypt_cmd_handler+0x88>)
10010d82:	70e6      	strb	r6, [r4, #3]
10010d84:	881a      	ldrh	r2, [r3, #0]
10010d86:	881b      	ldrh	r3, [r3, #0]
10010d88:	7122      	strb	r2, [r4, #4]
10010d8a:	0a1b      	lsrs	r3, r3, #8
10010d8c:	7163      	strb	r3, [r4, #5]
10010d8e:	230b      	movs	r3, #11
10010d90:	4e10      	ldr	r6, [pc, #64]	; (10010dd4 <gapc_encrypt_cmd_handler+0x8c>)
10010d92:	2210      	movs	r2, #16
10010d94:	4810      	ldr	r0, [pc, #64]	; (10010dd8 <gapc_encrypt_cmd_handler+0x90>)
10010d96:	7223      	strb	r3, [r4, #8]
10010d98:	7265      	strb	r5, [r4, #9]
10010d9a:	47b0      	blx	r6
10010d9c:	0a3b      	lsrs	r3, r7, #8
10010d9e:	9906      	ldr	r1, [sp, #24]
10010da0:	2208      	movs	r2, #8
10010da2:	480e      	ldr	r0, [pc, #56]	; (10010ddc <gapc_encrypt_cmd_handler+0x94>)
10010da4:	76e3      	strb	r3, [r4, #27]
10010da6:	76a7      	strb	r7, [r4, #26]
10010da8:	47b0      	blx	r6
10010daa:	466a      	mov	r2, sp
10010dac:	7f12      	ldrb	r2, [r2, #28]
10010dae:	1d63      	adds	r3, r4, #5
10010db0:	77da      	strb	r2, [r3, #31]
10010db2:	231d      	movs	r3, #29
10010db4:	1c20      	adds	r0, r4, #0
10010db6:	71a3      	strb	r3, [r4, #6]
10010db8:	2125      	movs	r1, #37	; 0x25
10010dba:	4b09      	ldr	r3, [pc, #36]	; (10010de0 <gapc_encrypt_cmd_handler+0x98>)
10010dbc:	71e5      	strb	r5, [r4, #7]
10010dbe:	4798      	blx	r3
10010dc0:	b009      	add	sp, #36	; 0x24
10010dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010dc4:	1001a054 	.word	0x1001a054
10010dc8:	10010801 	.word	0x10010801
10010dcc:	1001b2f8 	.word	0x1001b2f8
10010dd0:	1001af88 	.word	0x1001af88
10010dd4:	10016253 	.word	0x10016253
10010dd8:	1001b302 	.word	0x1001b302
10010ddc:	1001b314 	.word	0x1001b314
10010de0:	100104fd 	.word	0x100104fd

10010de4 <gapc_encrypt_req_ind>:
10010de4:	b508      	push	{r3, lr}
10010de6:	0a00      	lsrs	r0, r0, #8
10010de8:	8010      	strh	r0, [r2, #0]
10010dea:	784b      	ldrb	r3, [r1, #1]
10010dec:	7808      	ldrb	r0, [r1, #0]
10010dee:	021b      	lsls	r3, r3, #8
10010df0:	4303      	orrs	r3, r0
10010df2:	8053      	strh	r3, [r2, #2]
10010df4:	1d10      	adds	r0, r2, #4
10010df6:	3102      	adds	r1, #2
10010df8:	2208      	movs	r2, #8
10010dfa:	4b01      	ldr	r3, [pc, #4]	; (10010e00 <gapc_encrypt_req_ind+0x1c>)
10010dfc:	4798      	blx	r3
10010dfe:	bd08      	pop	{r3, pc}
10010e00:	10016253 	.word	0x10016253

10010e04 <gapc_encrypt_cfm_handler>:
10010e04:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e06:	2500      	movs	r5, #0
10010e08:	b087      	sub	sp, #28
10010e0a:	9304      	str	r3, [sp, #16]
10010e0c:	ab0c      	add	r3, sp, #48	; 0x30
10010e0e:	781b      	ldrb	r3, [r3, #0]
10010e10:	1c17      	adds	r7, r2, #0
10010e12:	4a15      	ldr	r2, [pc, #84]	; (10010e68 <gapc_encrypt_cfm_handler+0x64>)
10010e14:	1c06      	adds	r6, r0, #0
10010e16:	9305      	str	r3, [sp, #20]
10010e18:	9100      	str	r1, [sp, #0]
10010e1a:	9002      	str	r0, [sp, #8]
10010e1c:	1c29      	adds	r1, r5, #0
10010e1e:	1c2b      	adds	r3, r5, #0
10010e20:	9501      	str	r5, [sp, #4]
10010e22:	1c10      	adds	r0, r2, #0
10010e24:	4c11      	ldr	r4, [pc, #68]	; (10010e6c <gapc_encrypt_cfm_handler+0x68>)
10010e26:	47a0      	blx	r4
10010e28:	2318      	movs	r3, #24
10010e2a:	4c11      	ldr	r4, [pc, #68]	; (10010e70 <gapc_encrypt_cfm_handler+0x6c>)
10010e2c:	9904      	ldr	r1, [sp, #16]
10010e2e:	7023      	strb	r3, [r4, #0]
10010e30:	3b0a      	subs	r3, #10
10010e32:	7063      	strb	r3, [r4, #1]
10010e34:	70a3      	strb	r3, [r4, #2]
10010e36:	4b0f      	ldr	r3, [pc, #60]	; (10010e74 <gapc_encrypt_cfm_handler+0x70>)
10010e38:	480f      	ldr	r0, [pc, #60]	; (10010e78 <gapc_encrypt_cfm_handler+0x74>)
10010e3a:	881a      	ldrh	r2, [r3, #0]
10010e3c:	881b      	ldrh	r3, [r3, #0]
10010e3e:	7122      	strb	r2, [r4, #4]
10010e40:	0a1b      	lsrs	r3, r3, #8
10010e42:	7163      	strb	r3, [r4, #5]
10010e44:	2210      	movs	r2, #16
10010e46:	4b0d      	ldr	r3, [pc, #52]	; (10010e7c <gapc_encrypt_cfm_handler+0x78>)
10010e48:	70e6      	strb	r6, [r4, #3]
10010e4a:	7227      	strb	r7, [r4, #8]
10010e4c:	4798      	blx	r3
10010e4e:	466b      	mov	r3, sp
10010e50:	7d1b      	ldrb	r3, [r3, #20]
10010e52:	1c20      	adds	r0, r4, #0
10010e54:	7663      	strb	r3, [r4, #25]
10010e56:	2312      	movs	r3, #18
10010e58:	211a      	movs	r1, #26
10010e5a:	71a3      	strb	r3, [r4, #6]
10010e5c:	4b08      	ldr	r3, [pc, #32]	; (10010e80 <gapc_encrypt_cfm_handler+0x7c>)
10010e5e:	71e5      	strb	r5, [r4, #7]
10010e60:	4798      	blx	r3
10010e62:	b007      	add	sp, #28
10010e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e66:	46c0      	nop			; (mov r8, r8)
10010e68:	1001a064 	.word	0x1001a064
10010e6c:	10010801 	.word	0x10010801
10010e70:	1001b2f8 	.word	0x1001b2f8
10010e74:	1001af88 	.word	0x1001af88
10010e78:	1001b301 	.word	0x1001b301
10010e7c:	10016253 	.word	0x10016253
10010e80:	100104fd 	.word	0x100104fd

10010e84 <gapc_encrypt_ind>:
10010e84:	780b      	ldrb	r3, [r1, #0]
10010e86:	0a00      	lsrs	r0, r0, #8
10010e88:	70d3      	strb	r3, [r2, #3]
10010e8a:	2300      	movs	r3, #0
10010e8c:	8010      	strh	r0, [r2, #0]
10010e8e:	7093      	strb	r3, [r2, #2]
10010e90:	4770      	bx	lr
	...

10010e94 <gapc_param_update_cfm_handler>:
10010e94:	b538      	push	{r3, r4, r5, lr}
10010e96:	2410      	movs	r4, #16
10010e98:	1c05      	adds	r5, r0, #0
10010e9a:	480e      	ldr	r0, [pc, #56]	; (10010ed4 <gapc_param_update_cfm_handler+0x40>)
10010e9c:	7004      	strb	r4, [r0, #0]
10010e9e:	3c02      	subs	r4, #2
10010ea0:	7044      	strb	r4, [r0, #1]
10010ea2:	7084      	strb	r4, [r0, #2]
10010ea4:	4c0c      	ldr	r4, [pc, #48]	; (10010ed8 <gapc_param_update_cfm_handler+0x44>)
10010ea6:	70c5      	strb	r5, [r0, #3]
10010ea8:	8825      	ldrh	r5, [r4, #0]
10010eaa:	8824      	ldrh	r4, [r4, #0]
10010eac:	72c3      	strb	r3, [r0, #11]
10010eae:	0a1b      	lsrs	r3, r3, #8
10010eb0:	0a24      	lsrs	r4, r4, #8
10010eb2:	7303      	strb	r3, [r0, #12]
10010eb4:	2305      	movs	r3, #5
10010eb6:	7144      	strb	r4, [r0, #5]
10010eb8:	2400      	movs	r4, #0
10010eba:	7201      	strb	r1, [r0, #8]
10010ebc:	7242      	strb	r2, [r0, #9]
10010ebe:	7183      	strb	r3, [r0, #6]
10010ec0:	0a12      	lsrs	r2, r2, #8
10010ec2:	210d      	movs	r1, #13
10010ec4:	4b05      	ldr	r3, [pc, #20]	; (10010edc <gapc_param_update_cfm_handler+0x48>)
10010ec6:	7105      	strb	r5, [r0, #4]
10010ec8:	7282      	strb	r2, [r0, #10]
10010eca:	71c4      	strb	r4, [r0, #7]
10010ecc:	4798      	blx	r3
10010ece:	1c20      	adds	r0, r4, #0
10010ed0:	bd38      	pop	{r3, r4, r5, pc}
10010ed2:	46c0      	nop			; (mov r8, r8)
10010ed4:	1001b2f8 	.word	0x1001b2f8
10010ed8:	1001af88 	.word	0x1001af88
10010edc:	100104fd 	.word	0x100104fd

10010ee0 <gapc_param_updated_ind>:
10010ee0:	2300      	movs	r3, #0
10010ee2:	0a00      	lsrs	r0, r0, #8
10010ee4:	8010      	strh	r0, [r2, #0]
10010ee6:	7093      	strb	r3, [r2, #2]
10010ee8:	784b      	ldrb	r3, [r1, #1]
10010eea:	7808      	ldrb	r0, [r1, #0]
10010eec:	021b      	lsls	r3, r3, #8
10010eee:	4303      	orrs	r3, r0
10010ef0:	8093      	strh	r3, [r2, #4]
10010ef2:	78cb      	ldrb	r3, [r1, #3]
10010ef4:	7888      	ldrb	r0, [r1, #2]
10010ef6:	021b      	lsls	r3, r3, #8
10010ef8:	4303      	orrs	r3, r0
10010efa:	80d3      	strh	r3, [r2, #6]
10010efc:	794b      	ldrb	r3, [r1, #5]
10010efe:	7909      	ldrb	r1, [r1, #4]
10010f00:	021b      	lsls	r3, r3, #8
10010f02:	430b      	orrs	r3, r1
10010f04:	2007      	movs	r0, #7
10010f06:	8113      	strh	r3, [r2, #8]
10010f08:	4770      	bx	lr

10010f0a <gapc_param_updated_req_ind>:
10010f0a:	0a00      	lsrs	r0, r0, #8
10010f0c:	8010      	strh	r0, [r2, #0]
10010f0e:	784b      	ldrb	r3, [r1, #1]
10010f10:	7808      	ldrb	r0, [r1, #0]
10010f12:	021b      	lsls	r3, r3, #8
10010f14:	4303      	orrs	r3, r0
10010f16:	8053      	strh	r3, [r2, #2]
10010f18:	78cb      	ldrb	r3, [r1, #3]
10010f1a:	7888      	ldrb	r0, [r1, #2]
10010f1c:	021b      	lsls	r3, r3, #8
10010f1e:	4303      	orrs	r3, r0
10010f20:	8093      	strh	r3, [r2, #4]
10010f22:	794b      	ldrb	r3, [r1, #5]
10010f24:	7908      	ldrb	r0, [r1, #4]
10010f26:	021b      	lsls	r3, r3, #8
10010f28:	4303      	orrs	r3, r0
10010f2a:	80d3      	strh	r3, [r2, #6]
10010f2c:	79cb      	ldrb	r3, [r1, #7]
10010f2e:	7989      	ldrb	r1, [r1, #6]
10010f30:	021b      	lsls	r3, r3, #8
10010f32:	430b      	orrs	r3, r1
10010f34:	2008      	movs	r0, #8
10010f36:	8113      	strh	r3, [r2, #8]
10010f38:	4770      	bx	lr
	...

10010f3c <gapc_dev_info_req_ind_handler>:
10010f3c:	b508      	push	{r3, lr}
10010f3e:	1c0b      	adds	r3, r1, #0
10010f40:	0a01      	lsrs	r1, r0, #8
10010f42:	8011      	strh	r1, [r2, #0]
10010f44:	7818      	ldrb	r0, [r3, #0]
10010f46:	7090      	strb	r0, [r2, #2]
10010f48:	2800      	cmp	r0, #0
10010f4a:	d104      	bne.n	10010f56 <gapc_dev_info_req_ind_handler+0x1a>
10010f4c:	4b03      	ldr	r3, [pc, #12]	; (10010f5c <gapc_dev_info_req_ind_handler+0x20>)
10010f4e:	33aa      	adds	r3, #170	; 0xaa
10010f50:	881b      	ldrh	r3, [r3, #0]
10010f52:	2b00      	cmp	r3, #0
10010f54:	d001      	beq.n	10010f5a <gapc_dev_info_req_ind_handler+0x1e>
10010f56:	4b02      	ldr	r3, [pc, #8]	; (10010f60 <gapc_dev_info_req_ind_handler+0x24>)
10010f58:	4798      	blx	r3
10010f5a:	bd08      	pop	{r3, pc}
10010f5c:	1001b01a 	.word	0x1001b01a
10010f60:	1001060d 	.word	0x1001060d

10010f64 <gapc_sec_req_ind>:
10010f64:	0a00      	lsrs	r0, r0, #8
10010f66:	8010      	strh	r0, [r2, #0]
10010f68:	7809      	ldrb	r1, [r1, #0]
10010f6a:	2301      	movs	r3, #1
10010f6c:	1c08      	adds	r0, r1, #0
10010f6e:	0889      	lsrs	r1, r1, #2
10010f70:	4018      	ands	r0, r3
10010f72:	400b      	ands	r3, r1
10010f74:	70d0      	strb	r0, [r2, #3]
10010f76:	7113      	strb	r3, [r2, #4]
10010f78:	4770      	bx	lr

10010f7a <gapc_sign_counter_ind_handler>:
10010f7a:	0a00      	lsrs	r0, r0, #8
10010f7c:	8010      	strh	r0, [r2, #0]
10010f7e:	784b      	ldrb	r3, [r1, #1]
10010f80:	0218      	lsls	r0, r3, #8
10010f82:	788b      	ldrb	r3, [r1, #2]
10010f84:	041b      	lsls	r3, r3, #16
10010f86:	4303      	orrs	r3, r0
10010f88:	7808      	ldrb	r0, [r1, #0]
10010f8a:	4303      	orrs	r3, r0
10010f8c:	78c8      	ldrb	r0, [r1, #3]
10010f8e:	0600      	lsls	r0, r0, #24
10010f90:	4303      	orrs	r3, r0
10010f92:	6053      	str	r3, [r2, #4]
10010f94:	794b      	ldrb	r3, [r1, #5]
10010f96:	0218      	lsls	r0, r3, #8
10010f98:	798b      	ldrb	r3, [r1, #6]
10010f9a:	041b      	lsls	r3, r3, #16
10010f9c:	4303      	orrs	r3, r0
10010f9e:	7908      	ldrb	r0, [r1, #4]
10010fa0:	79c9      	ldrb	r1, [r1, #7]
10010fa2:	4303      	orrs	r3, r0
10010fa4:	0609      	lsls	r1, r1, #24
10010fa6:	430b      	orrs	r3, r1
10010fa8:	2000      	movs	r0, #0
10010faa:	6093      	str	r3, [r2, #8]
10010fac:	4770      	bx	lr
	...

10010fb0 <gapc_peer_att_info_ind_handler>:
10010fb0:	b510      	push	{r4, lr}
10010fb2:	0a00      	lsrs	r0, r0, #8
10010fb4:	8010      	strh	r0, [r2, #0]
10010fb6:	7808      	ldrb	r0, [r1, #0]
10010fb8:	7090      	strb	r0, [r2, #2]
10010fba:	788b      	ldrb	r3, [r1, #2]
10010fbc:	784c      	ldrb	r4, [r1, #1]
10010fbe:	021b      	lsls	r3, r3, #8
10010fc0:	4323      	orrs	r3, r4
10010fc2:	8093      	strh	r3, [r2, #4]
10010fc4:	2801      	cmp	r0, #1
10010fc6:	d027      	beq.n	10011018 <gapc_peer_att_info_ind_handler+0x68>
10010fc8:	2800      	cmp	r0, #0
10010fca:	d017      	beq.n	10010ffc <gapc_peer_att_info_ind_handler+0x4c>
10010fcc:	2802      	cmp	r0, #2
10010fce:	d12a      	bne.n	10011026 <gapc_peer_att_info_ind_handler+0x76>
10010fd0:	790b      	ldrb	r3, [r1, #4]
10010fd2:	78c8      	ldrb	r0, [r1, #3]
10010fd4:	021b      	lsls	r3, r3, #8
10010fd6:	4303      	orrs	r3, r0
10010fd8:	8113      	strh	r3, [r2, #8]
10010fda:	798b      	ldrb	r3, [r1, #6]
10010fdc:	7948      	ldrb	r0, [r1, #5]
10010fde:	021b      	lsls	r3, r3, #8
10010fe0:	4303      	orrs	r3, r0
10010fe2:	80d3      	strh	r3, [r2, #6]
10010fe4:	7a0b      	ldrb	r3, [r1, #8]
10010fe6:	79c8      	ldrb	r0, [r1, #7]
10010fe8:	021b      	lsls	r3, r3, #8
10010fea:	4303      	orrs	r3, r0
10010fec:	8193      	strh	r3, [r2, #12]
10010fee:	7a8b      	ldrb	r3, [r1, #10]
10010ff0:	7a49      	ldrb	r1, [r1, #9]
10010ff2:	021b      	lsls	r3, r3, #8
10010ff4:	430b      	orrs	r3, r1
10010ff6:	8153      	strh	r3, [r2, #10]
10010ff8:	2306      	movs	r3, #6
10010ffa:	e013      	b.n	10011024 <gapc_peer_att_info_ind_handler+0x74>
10010ffc:	1c14      	adds	r4, r2, #0
10010ffe:	1c20      	adds	r0, r4, #0
10011000:	790a      	ldrb	r2, [r1, #4]
10011002:	78cb      	ldrb	r3, [r1, #3]
10011004:	0212      	lsls	r2, r2, #8
10011006:	431a      	orrs	r2, r3
10011008:	80e2      	strh	r2, [r4, #6]
1001100a:	4b07      	ldr	r3, [pc, #28]	; (10011028 <gapc_peer_att_info_ind_handler+0x78>)
1001100c:	3008      	adds	r0, #8
1001100e:	3105      	adds	r1, #5
10011010:	4798      	blx	r3
10011012:	2302      	movs	r3, #2
10011014:	70a3      	strb	r3, [r4, #2]
10011016:	e006      	b.n	10011026 <gapc_peer_att_info_ind_handler+0x76>
10011018:	790b      	ldrb	r3, [r1, #4]
1001101a:	78c9      	ldrb	r1, [r1, #3]
1001101c:	021b      	lsls	r3, r3, #8
1001101e:	430b      	orrs	r3, r1
10011020:	80d3      	strh	r3, [r2, #6]
10011022:	2305      	movs	r3, #5
10011024:	7093      	strb	r3, [r2, #2]
10011026:	bd10      	pop	{r4, pc}
10011028:	10016253 	.word	0x10016253

1001102c <gapc_con_channel_map_ind_handler>:
1001102c:	b508      	push	{r3, lr}
1001102e:	2300      	movs	r3, #0
10011030:	0a00      	lsrs	r0, r0, #8
10011032:	7013      	strb	r3, [r2, #0]
10011034:	8050      	strh	r0, [r2, #2]
10011036:	4b02      	ldr	r3, [pc, #8]	; (10011040 <gapc_con_channel_map_ind_handler+0x14>)
10011038:	1d10      	adds	r0, r2, #4
1001103a:	2205      	movs	r2, #5
1001103c:	4798      	blx	r3
1001103e:	bd08      	pop	{r3, pc}
10011040:	10016253 	.word	0x10016253

10011044 <gapc_lecb_connected>:
10011044:	7843      	ldrb	r3, [r0, #1]
10011046:	7802      	ldrb	r2, [r0, #0]
10011048:	021b      	lsls	r3, r3, #8
1001104a:	4313      	orrs	r3, r2
1001104c:	800b      	strh	r3, [r1, #0]
1001104e:	78c3      	ldrb	r3, [r0, #3]
10011050:	7882      	ldrb	r2, [r0, #2]
10011052:	021b      	lsls	r3, r3, #8
10011054:	4313      	orrs	r3, r2
10011056:	804b      	strh	r3, [r1, #2]
10011058:	7943      	ldrb	r3, [r0, #5]
1001105a:	7902      	ldrb	r2, [r0, #4]
1001105c:	021b      	lsls	r3, r3, #8
1001105e:	4313      	orrs	r3, r2
10011060:	808b      	strh	r3, [r1, #4]
10011062:	79c3      	ldrb	r3, [r0, #7]
10011064:	7982      	ldrb	r2, [r0, #6]
10011066:	021b      	lsls	r3, r3, #8
10011068:	4313      	orrs	r3, r2
1001106a:	80cb      	strh	r3, [r1, #6]
1001106c:	2300      	movs	r3, #0
1001106e:	720b      	strb	r3, [r1, #8]
10011070:	4770      	bx	lr

10011072 <gapc_lecb_disconnected>:
10011072:	7843      	ldrb	r3, [r0, #1]
10011074:	7802      	ldrb	r2, [r0, #0]
10011076:	021b      	lsls	r3, r3, #8
10011078:	4313      	orrs	r3, r2
1001107a:	800b      	strh	r3, [r1, #0]
1001107c:	78c3      	ldrb	r3, [r0, #3]
1001107e:	7882      	ldrb	r2, [r0, #2]
10011080:	021b      	lsls	r3, r3, #8
10011082:	4313      	orrs	r3, r2
10011084:	804b      	strh	r3, [r1, #2]
10011086:	4770      	bx	lr

10011088 <gapc_lecb_connect_req_ind>:
10011088:	7843      	ldrb	r3, [r0, #1]
1001108a:	7802      	ldrb	r2, [r0, #0]
1001108c:	021b      	lsls	r3, r3, #8
1001108e:	4313      	orrs	r3, r2
10011090:	800b      	strh	r3, [r1, #0]
10011092:	78c3      	ldrb	r3, [r0, #3]
10011094:	7882      	ldrb	r2, [r0, #2]
10011096:	021b      	lsls	r3, r3, #8
10011098:	4313      	orrs	r3, r2
1001109a:	804b      	strh	r3, [r1, #2]
1001109c:	7943      	ldrb	r3, [r0, #5]
1001109e:	7902      	ldrb	r2, [r0, #4]
100110a0:	021b      	lsls	r3, r3, #8
100110a2:	4313      	orrs	r3, r2
100110a4:	808b      	strh	r3, [r1, #4]
100110a6:	79c3      	ldrb	r3, [r0, #7]
100110a8:	7982      	ldrb	r2, [r0, #6]
100110aa:	021b      	lsls	r3, r3, #8
100110ac:	4313      	orrs	r3, r2
100110ae:	80cb      	strh	r3, [r1, #6]
100110b0:	4770      	bx	lr

100110b2 <gapc_lecb_add_credit_resp_handler>:
100110b2:	7843      	ldrb	r3, [r0, #1]
100110b4:	7802      	ldrb	r2, [r0, #0]
100110b6:	021b      	lsls	r3, r3, #8
100110b8:	4313      	orrs	r3, r2
100110ba:	800b      	strh	r3, [r1, #0]
100110bc:	78c3      	ldrb	r3, [r0, #3]
100110be:	7882      	ldrb	r2, [r0, #2]
100110c0:	021b      	lsls	r3, r3, #8
100110c2:	4313      	orrs	r3, r2
100110c4:	804b      	strh	r3, [r1, #2]
100110c6:	7943      	ldrb	r3, [r0, #5]
100110c8:	7902      	ldrb	r2, [r0, #4]
100110ca:	021b      	lsls	r3, r3, #8
100110cc:	4313      	orrs	r3, r2
100110ce:	808b      	strh	r3, [r1, #4]
100110d0:	4770      	bx	lr
	...

100110d4 <gapm_reset_req_handler>:
100110d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100110d6:	466b      	mov	r3, sp
100110d8:	4915      	ldr	r1, [pc, #84]	; (10011130 <gapm_reset_req_handler+0x5c>)
100110da:	4816      	ldr	r0, [pc, #88]	; (10011134 <gapm_reset_req_handler+0x60>)
100110dc:	880c      	ldrh	r4, [r1, #0]
100110de:	8809      	ldrh	r1, [r1, #0]
100110e0:	1ddd      	adds	r5, r3, #7
100110e2:	0a09      	lsrs	r1, r1, #8
100110e4:	2300      	movs	r3, #0
100110e6:	2202      	movs	r2, #2
100110e8:	7141      	strb	r1, [r0, #5]
100110ea:	26d0      	movs	r6, #208	; 0xd0
100110ec:	2101      	movs	r1, #1
100110ee:	7104      	strb	r4, [r0, #4]
100110f0:	4c11      	ldr	r4, [pc, #68]	; (10011138 <gapm_reset_req_handler+0x64>)
100110f2:	702b      	strb	r3, [r5, #0]
100110f4:	7002      	strb	r2, [r0, #0]
100110f6:	70c3      	strb	r3, [r0, #3]
100110f8:	320b      	adds	r2, #11
100110fa:	7201      	strb	r1, [r0, #8]
100110fc:	7181      	strb	r1, [r0, #6]
100110fe:	71c3      	strb	r3, [r0, #7]
10011100:	3108      	adds	r1, #8
10011102:	4b0e      	ldr	r3, [pc, #56]	; (1001113c <gapm_reset_req_handler+0x68>)
10011104:	0136      	lsls	r6, r6, #4
10011106:	7042      	strb	r2, [r0, #1]
10011108:	7082      	strb	r2, [r0, #2]
1001110a:	80a2      	strh	r2, [r4, #4]
1001110c:	8026      	strh	r6, [r4, #0]
1001110e:	4798      	blx	r3
10011110:	1c28      	adds	r0, r5, #0
10011112:	4b0b      	ldr	r3, [pc, #44]	; (10011140 <gapm_reset_req_handler+0x6c>)
10011114:	4798      	blx	r3
10011116:	782b      	ldrb	r3, [r5, #0]
10011118:	20e2      	movs	r0, #226	; 0xe2
1001111a:	2b00      	cmp	r3, #0
1001111c:	d106      	bne.n	1001112c <gapm_reset_req_handler+0x58>
1001111e:	68a3      	ldr	r3, [r4, #8]
10011120:	20e2      	movs	r0, #226	; 0xe2
10011122:	781a      	ldrb	r2, [r3, #0]
10011124:	785b      	ldrb	r3, [r3, #1]
10011126:	2a01      	cmp	r2, #1
10011128:	d100      	bne.n	1001112c <gapm_reset_req_handler+0x58>
1001112a:	1c18      	adds	r0, r3, #0
1001112c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001112e:	46c0      	nop			; (mov r8, r8)
10011130:	1001af88 	.word	0x1001af88
10011134:	1001b2f8 	.word	0x1001b2f8
10011138:	1001af7c 	.word	0x1001af7c
1001113c:	100104fd 	.word	0x100104fd
10011140:	10010561 	.word	0x10010561

10011144 <gapm_set_dev_config_cmd_handler>:
10011144:	b5f0      	push	{r4, r5, r6, r7, lr}
10011146:	b089      	sub	sp, #36	; 0x24
10011148:	9303      	str	r3, [sp, #12]
1001114a:	ab0e      	add	r3, sp, #56	; 0x38
1001114c:	781b      	ldrb	r3, [r3, #0]
1001114e:	4c37      	ldr	r4, [pc, #220]	; (1001122c <gapm_set_dev_config_cmd_handler+0xe8>)
10011150:	9304      	str	r3, [sp, #16]
10011152:	ab0f      	add	r3, sp, #60	; 0x3c
10011154:	781b      	ldrb	r3, [r3, #0]
10011156:	270d      	movs	r7, #13
10011158:	9305      	str	r3, [sp, #20]
1001115a:	ab10      	add	r3, sp, #64	; 0x40
1001115c:	881b      	ldrh	r3, [r3, #0]
1001115e:	72a1      	strb	r1, [r4, #10]
10011160:	9300      	str	r3, [sp, #0]
10011162:	ab11      	add	r3, sp, #68	; 0x44
10011164:	881b      	ldrh	r3, [r3, #0]
10011166:	0a09      	lsrs	r1, r1, #8
10011168:	9301      	str	r3, [sp, #4]
1001116a:	ab12      	add	r3, sp, #72	; 0x48
1001116c:	881b      	ldrh	r3, [r3, #0]
1001116e:	7260      	strb	r0, [r4, #9]
10011170:	9302      	str	r3, [sp, #8]
10011172:	ab06      	add	r3, sp, #24
10011174:	1dde      	adds	r6, r3, #7
10011176:	2300      	movs	r3, #0
10011178:	7033      	strb	r3, [r6, #0]
1001117a:	2304      	movs	r3, #4
1001117c:	7023      	strb	r3, [r4, #0]
1001117e:	2300      	movs	r3, #0
10011180:	70e3      	strb	r3, [r4, #3]
10011182:	4b2b      	ldr	r3, [pc, #172]	; (10011230 <gapm_set_dev_config_cmd_handler+0xec>)
10011184:	72e1      	strb	r1, [r4, #11]
10011186:	881d      	ldrh	r5, [r3, #0]
10011188:	881b      	ldrh	r3, [r3, #0]
1001118a:	1c11      	adds	r1, r2, #0
1001118c:	0a1b      	lsrs	r3, r3, #8
1001118e:	7163      	strb	r3, [r4, #5]
10011190:	2303      	movs	r3, #3
10011192:	7125      	strb	r5, [r4, #4]
10011194:	2206      	movs	r2, #6
10011196:	4d27      	ldr	r5, [pc, #156]	; (10011234 <gapm_set_dev_config_cmd_handler+0xf0>)
10011198:	4827      	ldr	r0, [pc, #156]	; (10011238 <gapm_set_dev_config_cmd_handler+0xf4>)
1001119a:	7223      	strb	r3, [r4, #8]
1001119c:	7067      	strb	r7, [r4, #1]
1001119e:	70a7      	strb	r7, [r4, #2]
100111a0:	47a8      	blx	r5
100111a2:	9903      	ldr	r1, [sp, #12]
100111a4:	2210      	movs	r2, #16
100111a6:	4825      	ldr	r0, [pc, #148]	; (1001123c <gapm_set_dev_config_cmd_handler+0xf8>)
100111a8:	47a8      	blx	r5
100111aa:	466a      	mov	r2, sp
100111ac:	7c12      	ldrb	r2, [r2, #16]
100111ae:	1ce3      	adds	r3, r4, #3
100111b0:	77da      	strb	r2, [r3, #31]
100111b2:	466a      	mov	r2, sp
100111b4:	7d12      	ldrb	r2, [r2, #20]
100111b6:	1d23      	adds	r3, r4, #4
100111b8:	77da      	strb	r2, [r3, #31]
100111ba:	466a      	mov	r2, sp
100111bc:	7812      	ldrb	r2, [r2, #0]
100111be:	1d63      	adds	r3, r4, #5
100111c0:	77da      	strb	r2, [r3, #31]
100111c2:	9b00      	ldr	r3, [sp, #0]
100111c4:	1da2      	adds	r2, r4, #6
100111c6:	0a1b      	lsrs	r3, r3, #8
100111c8:	77d3      	strb	r3, [r2, #31]
100111ca:	466a      	mov	r2, sp
100111cc:	7912      	ldrb	r2, [r2, #4]
100111ce:	1de3      	adds	r3, r4, #7
100111d0:	77da      	strb	r2, [r3, #31]
100111d2:	1c22      	adds	r2, r4, #0
100111d4:	9b01      	ldr	r3, [sp, #4]
100111d6:	3208      	adds	r2, #8
100111d8:	0a1b      	lsrs	r3, r3, #8
100111da:	77d3      	strb	r3, [r2, #31]
100111dc:	466a      	mov	r2, sp
100111de:	1c23      	adds	r3, r4, #0
100111e0:	7a12      	ldrb	r2, [r2, #8]
100111e2:	3328      	adds	r3, #40	; 0x28
100111e4:	701a      	strb	r2, [r3, #0]
100111e6:	1c22      	adds	r2, r4, #0
100111e8:	9b02      	ldr	r3, [sp, #8]
100111ea:	3229      	adds	r2, #41	; 0x29
100111ec:	0a1b      	lsrs	r3, r3, #8
100111ee:	7013      	strb	r3, [r2, #0]
100111f0:	23d0      	movs	r3, #208	; 0xd0
100111f2:	4d13      	ldr	r5, [pc, #76]	; (10011240 <gapm_set_dev_config_cmd_handler+0xfc>)
100111f4:	011b      	lsls	r3, r3, #4
100111f6:	802b      	strh	r3, [r5, #0]
100111f8:	2322      	movs	r3, #34	; 0x22
100111fa:	71a3      	strb	r3, [r4, #6]
100111fc:	2300      	movs	r3, #0
100111fe:	212a      	movs	r1, #42	; 0x2a
10011200:	71e3      	strb	r3, [r4, #7]
10011202:	1c20      	adds	r0, r4, #0
10011204:	4b0f      	ldr	r3, [pc, #60]	; (10011244 <gapm_set_dev_config_cmd_handler+0x100>)
10011206:	80af      	strh	r7, [r5, #4]
10011208:	4798      	blx	r3
1001120a:	1c30      	adds	r0, r6, #0
1001120c:	4b0e      	ldr	r3, [pc, #56]	; (10011248 <gapm_set_dev_config_cmd_handler+0x104>)
1001120e:	4798      	blx	r3
10011210:	7833      	ldrb	r3, [r6, #0]
10011212:	20e2      	movs	r0, #226	; 0xe2
10011214:	2b00      	cmp	r3, #0
10011216:	d106      	bne.n	10011226 <gapm_set_dev_config_cmd_handler+0xe2>
10011218:	68ab      	ldr	r3, [r5, #8]
1001121a:	20e2      	movs	r0, #226	; 0xe2
1001121c:	781a      	ldrb	r2, [r3, #0]
1001121e:	785b      	ldrb	r3, [r3, #1]
10011220:	2a03      	cmp	r2, #3
10011222:	d100      	bne.n	10011226 <gapm_set_dev_config_cmd_handler+0xe2>
10011224:	1c18      	adds	r0, r3, #0
10011226:	b009      	add	sp, #36	; 0x24
10011228:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001122a:	46c0      	nop			; (mov r8, r8)
1001122c:	1001b2f8 	.word	0x1001b2f8
10011230:	1001af88 	.word	0x1001af88
10011234:	10016253 	.word	0x10016253
10011238:	1001b304 	.word	0x1001b304
1001123c:	1001b30a 	.word	0x1001b30a
10011240:	1001af7c 	.word	0x1001af7c
10011244:	100104fd 	.word	0x100104fd
10011248:	10010561 	.word	0x10010561

1001124c <gapm_get_dev_config_cmd_handler>:
1001124c:	4684      	mov	ip, r0
1001124e:	4663      	mov	r3, ip
10011250:	b5f0      	push	{r4, r5, r6, r7, lr}
10011252:	b085      	sub	sp, #20
10011254:	9100      	str	r1, [sp, #0]
10011256:	20cf      	movs	r0, #207	; 0xcf
10011258:	2b01      	cmp	r3, #1
1001125a:	d854      	bhi.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
1001125c:	2900      	cmp	r1, #0
1001125e:	d052      	beq.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
10011260:	2200      	movs	r2, #0
10011262:	492a      	ldr	r1, [pc, #168]	; (1001130c <gapm_get_dev_config_cmd_handler+0xc0>)
10011264:	ab02      	add	r3, sp, #8
10011266:	880c      	ldrh	r4, [r1, #0]
10011268:	8809      	ldrh	r1, [r1, #0]
1001126a:	1d9f      	adds	r7, r3, #6
1001126c:	719a      	strb	r2, [r3, #6]
1001126e:	4b28      	ldr	r3, [pc, #160]	; (10011310 <gapm_get_dev_config_cmd_handler+0xc4>)
10011270:	0a09      	lsrs	r1, r1, #8
10011272:	250d      	movs	r5, #13
10011274:	2606      	movs	r6, #6
10011276:	7159      	strb	r1, [r3, #5]
10011278:	4661      	mov	r1, ip
1001127a:	701e      	strb	r6, [r3, #0]
1001127c:	705d      	strb	r5, [r3, #1]
1001127e:	709d      	strb	r5, [r3, #2]
10011280:	70da      	strb	r2, [r3, #3]
10011282:	711c      	strb	r4, [r3, #4]
10011284:	2901      	cmp	r1, #1
10011286:	d13e      	bne.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
10011288:	21d0      	movs	r1, #208	; 0xd0
1001128a:	4c22      	ldr	r4, [pc, #136]	; (10011314 <gapm_get_dev_config_cmd_handler+0xc8>)
1001128c:	0109      	lsls	r1, r1, #4
1001128e:	8061      	strh	r1, [r4, #2]
10011290:	4921      	ldr	r1, [pc, #132]	; (10011318 <gapm_get_dev_config_cmd_handler+0xcc>)
10011292:	71da      	strb	r2, [r3, #7]
10011294:	8021      	strh	r1, [r4, #0]
10011296:	4661      	mov	r1, ip
10011298:	721e      	strb	r6, [r3, #8]
1001129a:	7199      	strb	r1, [r3, #6]
1001129c:	1c18      	adds	r0, r3, #0
1001129e:	2109      	movs	r1, #9
100112a0:	4b1e      	ldr	r3, [pc, #120]	; (1001131c <gapm_get_dev_config_cmd_handler+0xd0>)
100112a2:	80a5      	strh	r5, [r4, #4]
100112a4:	4798      	blx	r3
100112a6:	1c38      	adds	r0, r7, #0
100112a8:	4b1d      	ldr	r3, [pc, #116]	; (10011320 <gapm_get_dev_config_cmd_handler+0xd4>)
100112aa:	4798      	blx	r3
100112ac:	783b      	ldrb	r3, [r7, #0]
100112ae:	20e2      	movs	r0, #226	; 0xe2
100112b0:	9301      	str	r3, [sp, #4]
100112b2:	2b00      	cmp	r3, #0
100112b4:	d127      	bne.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
100112b6:	8821      	ldrh	r1, [r4, #0]
100112b8:	4a1a      	ldr	r2, [pc, #104]	; (10011324 <gapm_get_dev_config_cmd_handler+0xd8>)
100112ba:	68a7      	ldr	r7, [r4, #8]
100112bc:	3b01      	subs	r3, #1
100112be:	4291      	cmp	r1, r2
100112c0:	d001      	beq.n	100112c6 <gapm_get_dev_config_cmd_handler+0x7a>
100112c2:	8023      	strh	r3, [r4, #0]
100112c4:	e01a      	b.n	100112fc <gapm_get_dev_config_cmd_handler+0xb0>
100112c6:	8063      	strh	r3, [r4, #2]
100112c8:	9b00      	ldr	r3, [sp, #0]
100112ca:	1c39      	adds	r1, r7, #0
100112cc:	1c58      	adds	r0, r3, #1
100112ce:	1c32      	adds	r2, r6, #0
100112d0:	4b15      	ldr	r3, [pc, #84]	; (10011328 <gapm_get_dev_config_cmd_handler+0xdc>)
100112d2:	4798      	blx	r3
100112d4:	79bb      	ldrb	r3, [r7, #6]
100112d6:	9a00      	ldr	r2, [sp, #0]
100112d8:	7013      	strb	r3, [r2, #0]
100112da:	23d0      	movs	r3, #208	; 0xd0
100112dc:	011b      	lsls	r3, r3, #4
100112de:	8023      	strh	r3, [r4, #0]
100112e0:	ab02      	add	r3, sp, #8
100112e2:	80a5      	strh	r5, [r4, #4]
100112e4:	1ddd      	adds	r5, r3, #7
100112e6:	466b      	mov	r3, sp
100112e8:	791b      	ldrb	r3, [r3, #4]
100112ea:	1c28      	adds	r0, r5, #0
100112ec:	702b      	strb	r3, [r5, #0]
100112ee:	4b0c      	ldr	r3, [pc, #48]	; (10011320 <gapm_get_dev_config_cmd_handler+0xd4>)
100112f0:	4798      	blx	r3
100112f2:	782b      	ldrb	r3, [r5, #0]
100112f4:	20d0      	movs	r0, #208	; 0xd0
100112f6:	2b00      	cmp	r3, #0
100112f8:	d105      	bne.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
100112fa:	68a7      	ldr	r7, [r4, #8]
100112fc:	783b      	ldrb	r3, [r7, #0]
100112fe:	7878      	ldrb	r0, [r7, #1]
10011300:	2b06      	cmp	r3, #6
10011302:	d000      	beq.n	10011306 <gapm_get_dev_config_cmd_handler+0xba>
10011304:	20e2      	movs	r0, #226	; 0xe2
10011306:	b005      	add	sp, #20
10011308:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001130a:	46c0      	nop			; (mov r8, r8)
1001130c:	1001af88 	.word	0x1001af88
10011310:	1001b2f8 	.word	0x1001b2f8
10011314:	1001af7c 	.word	0x1001af7c
10011318:	00000d08 	.word	0x00000d08
1001131c:	100104fd 	.word	0x100104fd
10011320:	10010561 	.word	0x10010561
10011324:	0000ffff 	.word	0x0000ffff
10011328:	10016253 	.word	0x10016253

1001132c <gapm_cancel_cmd_handler>:
1001132c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001132e:	4916      	ldr	r1, [pc, #88]	; (10011388 <gapm_cancel_cmd_handler+0x5c>)
10011330:	4816      	ldr	r0, [pc, #88]	; (1001138c <gapm_cancel_cmd_handler+0x60>)
10011332:	880c      	ldrh	r4, [r1, #0]
10011334:	8809      	ldrh	r1, [r1, #0]
10011336:	466b      	mov	r3, sp
10011338:	0a09      	lsrs	r1, r1, #8
1001133a:	7141      	strb	r1, [r0, #5]
1001133c:	2102      	movs	r1, #2
1001133e:	2203      	movs	r2, #3
10011340:	7201      	strb	r1, [r0, #8]
10011342:	21d0      	movs	r1, #208	; 0xd0
10011344:	1ddd      	adds	r5, r3, #7
10011346:	2300      	movs	r3, #0
10011348:	7104      	strb	r4, [r0, #4]
1001134a:	4c11      	ldr	r4, [pc, #68]	; (10011390 <gapm_cancel_cmd_handler+0x64>)
1001134c:	7002      	strb	r2, [r0, #0]
1001134e:	0109      	lsls	r1, r1, #4
10011350:	320a      	adds	r2, #10
10011352:	702b      	strb	r3, [r5, #0]
10011354:	7042      	strb	r2, [r0, #1]
10011356:	7082      	strb	r2, [r0, #2]
10011358:	70c3      	strb	r3, [r0, #3]
1001135a:	8021      	strh	r1, [r4, #0]
1001135c:	80a2      	strh	r2, [r4, #4]
1001135e:	71c3      	strb	r3, [r0, #7]
10011360:	3a0c      	subs	r2, #12
10011362:	2109      	movs	r1, #9
10011364:	4b0b      	ldr	r3, [pc, #44]	; (10011394 <gapm_cancel_cmd_handler+0x68>)
10011366:	7182      	strb	r2, [r0, #6]
10011368:	4798      	blx	r3
1001136a:	1c28      	adds	r0, r5, #0
1001136c:	4b0a      	ldr	r3, [pc, #40]	; (10011398 <gapm_cancel_cmd_handler+0x6c>)
1001136e:	4798      	blx	r3
10011370:	7828      	ldrb	r0, [r5, #0]
10011372:	2800      	cmp	r0, #0
10011374:	d001      	beq.n	1001137a <gapm_cancel_cmd_handler+0x4e>
10011376:	20e2      	movs	r0, #226	; 0xe2
10011378:	e004      	b.n	10011384 <gapm_cancel_cmd_handler+0x58>
1001137a:	68a3      	ldr	r3, [r4, #8]
1001137c:	785b      	ldrb	r3, [r3, #1]
1001137e:	2b44      	cmp	r3, #68	; 0x44
10011380:	d000      	beq.n	10011384 <gapm_cancel_cmd_handler+0x58>
10011382:	1c18      	adds	r0, r3, #0
10011384:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011386:	46c0      	nop			; (mov r8, r8)
10011388:	1001af88 	.word	0x1001af88
1001138c:	1001b2f8 	.word	0x1001b2f8
10011390:	1001af7c 	.word	0x1001af7c
10011394:	100104fd 	.word	0x100104fd
10011398:	10010561 	.word	0x10010561

1001139c <gapm_dev_bdaddr_ind_handler>:
1001139c:	b538      	push	{r3, r4, r5, lr}
1001139e:	1c05      	adds	r5, r0, #0
100113a0:	1c0c      	adds	r4, r1, #0
100113a2:	1c48      	adds	r0, r1, #1
100113a4:	2206      	movs	r2, #6
100113a6:	1c29      	adds	r1, r5, #0
100113a8:	4b02      	ldr	r3, [pc, #8]	; (100113b4 <gapm_dev_bdaddr_ind_handler+0x18>)
100113aa:	4798      	blx	r3
100113ac:	79ab      	ldrb	r3, [r5, #6]
100113ae:	2000      	movs	r0, #0
100113b0:	7023      	strb	r3, [r4, #0]
100113b2:	bd38      	pop	{r3, r4, r5, pc}
100113b4:	10016253 	.word	0x10016253

100113b8 <gapm_cmp_evt>:
100113b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100113ba:	7803      	ldrb	r3, [r0, #0]
100113bc:	7845      	ldrb	r5, [r0, #1]
100113be:	3b0c      	subs	r3, #12
100113c0:	1e18      	subs	r0, r3, #0
100113c2:	280b      	cmp	r0, #11
100113c4:	d900      	bls.n	100113c8 <gapm_cmp_evt+0x10>
100113c6:	e08d      	b.n	100114e4 <gapm_cmp_evt+0x12c>
100113c8:	1c0c      	adds	r4, r1, #0
100113ca:	f001 ff1d 	bl	10013208 <__gnu_thumb1_case_uqi>
100113ce:	1952      	.short	0x1952
100113d0:	068b1919 	.word	0x068b1919
100113d4:	8b595906 	.word	0x8b595906
100113d8:	0d8b      	.short	0x0d8b
100113da:	2300      	movs	r3, #0
100113dc:	2d45      	cmp	r5, #69	; 0x45
100113de:	d000      	beq.n	100113e2 <gapm_cmp_evt+0x2a>
100113e0:	1c2b      	adds	r3, r5, #0
100113e2:	7023      	strb	r3, [r4, #0]
100113e4:	2002      	movs	r0, #2
100113e6:	e07e      	b.n	100114e6 <gapm_cmp_evt+0x12e>
100113e8:	203b      	movs	r0, #59	; 0x3b
100113ea:	2d00      	cmp	r5, #0
100113ec:	d100      	bne.n	100113f0 <gapm_cmp_evt+0x38>
100113ee:	e07a      	b.n	100114e6 <gapm_cmp_evt+0x12e>
100113f0:	700d      	strb	r5, [r1, #0]
100113f2:	1c48      	adds	r0, r1, #1
100113f4:	2210      	movs	r2, #16
100113f6:	2100      	movs	r1, #0
100113f8:	4b3b      	ldr	r3, [pc, #236]	; (100114e8 <gapm_cmp_evt+0x130>)
100113fa:	4798      	blx	r3
100113fc:	200f      	movs	r0, #15
100113fe:	e072      	b.n	100114e6 <gapm_cmp_evt+0x12e>
10011400:	2d00      	cmp	r5, #0
10011402:	d134      	bne.n	1001146e <gapm_cmp_evt+0xb6>
10011404:	4b39      	ldr	r3, [pc, #228]	; (100114ec <gapm_cmp_evt+0x134>)
10011406:	4798      	blx	r3
10011408:	1e43      	subs	r3, r0, #1
1001140a:	b2db      	uxtb	r3, r3
1001140c:	1c28      	adds	r0, r5, #0
1001140e:	2b06      	cmp	r3, #6
10011410:	d869      	bhi.n	100114e6 <gapm_cmp_evt+0x12e>
10011412:	466b      	mov	r3, sp
10011414:	4e36      	ldr	r6, [pc, #216]	; (100114f0 <gapm_cmp_evt+0x138>)
10011416:	1dd9      	adds	r1, r3, #7
10011418:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001141a:	4b36      	ldr	r3, [pc, #216]	; (100114f4 <gapm_cmp_evt+0x13c>)
1001141c:	4798      	blx	r3
1001141e:	2312      	movs	r3, #18
10011420:	4358      	muls	r0, r3
10011422:	4935      	ldr	r1, [pc, #212]	; (100114f8 <gapm_cmp_evt+0x140>)
10011424:	1809      	adds	r1, r1, r0
10011426:	1c0b      	adds	r3, r1, #0
10011428:	894a      	ldrh	r2, [r1, #10]
1001142a:	3308      	adds	r3, #8
1001142c:	8122      	strh	r2, [r4, #8]
1001142e:	784f      	ldrb	r7, [r1, #1]
10011430:	72a5      	strb	r5, [r4, #10]
10011432:	7027      	strb	r7, [r4, #0]
10011434:	898a      	ldrh	r2, [r1, #12]
10011436:	1c60      	adds	r0, r4, #1
10011438:	81a2      	strh	r2, [r4, #12]
1001143a:	88db      	ldrh	r3, [r3, #6]
1001143c:	3102      	adds	r1, #2
1001143e:	81e3      	strh	r3, [r4, #14]
10011440:	89cb      	ldrh	r3, [r1, #14]
10011442:	2206      	movs	r2, #6
10011444:	8223      	strh	r3, [r4, #16]
10011446:	4b2d      	ldr	r3, [pc, #180]	; (100114fc <gapm_cmp_evt+0x144>)
10011448:	4798      	blx	r3
1001144a:	2f00      	cmp	r7, #0
1001144c:	d00a      	beq.n	10011464 <gapm_cmp_evt+0xac>
1001144e:	79a3      	ldrb	r3, [r4, #6]
10011450:	223f      	movs	r2, #63	; 0x3f
10011452:	1c19      	adds	r1, r3, #0
10011454:	3501      	adds	r5, #1
10011456:	4391      	bics	r1, r2
10011458:	29c0      	cmp	r1, #192	; 0xc0
1001145a:	d003      	beq.n	10011464 <gapm_cmp_evt+0xac>
1001145c:	065b      	lsls	r3, r3, #25
1001145e:	0fdb      	lsrs	r3, r3, #31
10011460:	3502      	adds	r5, #2
10011462:	1aed      	subs	r5, r5, r3
10011464:	2301      	movs	r3, #1
10011466:	425b      	negs	r3, r3
10011468:	7025      	strb	r5, [r4, #0]
1001146a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001146c:	e038      	b.n	100114e0 <gapm_cmp_evt+0x128>
1001146e:	700d      	strb	r5, [r1, #0]
10011470:	e004      	b.n	1001147c <gapm_cmp_evt+0xc4>
10011472:	2300      	movs	r3, #0
10011474:	2d45      	cmp	r5, #69	; 0x45
10011476:	d000      	beq.n	1001147a <gapm_cmp_evt+0xc2>
10011478:	1c2b      	adds	r3, r5, #0
1001147a:	7023      	strb	r3, [r4, #0]
1001147c:	2003      	movs	r0, #3
1001147e:	e032      	b.n	100114e6 <gapm_cmp_evt+0x12e>
10011480:	4e1b      	ldr	r6, [pc, #108]	; (100114f0 <gapm_cmp_evt+0x138>)
10011482:	2100      	movs	r1, #0
10011484:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011486:	4b1b      	ldr	r3, [pc, #108]	; (100114f4 <gapm_cmp_evt+0x13c>)
10011488:	4798      	blx	r3
1001148a:	2807      	cmp	r0, #7
1001148c:	d818      	bhi.n	100114c0 <gapm_cmp_evt+0x108>
1001148e:	2301      	movs	r3, #1
10011490:	425b      	negs	r3, r3
10011492:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011494:	3313      	adds	r3, #19
10011496:	4358      	muls	r0, r3
10011498:	4917      	ldr	r1, [pc, #92]	; (100114f8 <gapm_cmp_evt+0x140>)
1001149a:	1809      	adds	r1, r1, r0
1001149c:	1c0b      	adds	r3, r1, #0
1001149e:	894a      	ldrh	r2, [r1, #10]
100114a0:	3308      	adds	r3, #8
100114a2:	8122      	strh	r2, [r4, #8]
100114a4:	784a      	ldrb	r2, [r1, #1]
100114a6:	72a5      	strb	r5, [r4, #10]
100114a8:	7022      	strb	r2, [r4, #0]
100114aa:	898a      	ldrh	r2, [r1, #12]
100114ac:	1c60      	adds	r0, r4, #1
100114ae:	81a2      	strh	r2, [r4, #12]
100114b0:	88db      	ldrh	r3, [r3, #6]
100114b2:	3102      	adds	r1, #2
100114b4:	81e3      	strh	r3, [r4, #14]
100114b6:	89cb      	ldrh	r3, [r1, #14]
100114b8:	2206      	movs	r2, #6
100114ba:	8223      	strh	r3, [r4, #16]
100114bc:	4b0f      	ldr	r3, [pc, #60]	; (100114fc <gapm_cmp_evt+0x144>)
100114be:	4798      	blx	r3
100114c0:	2200      	movs	r2, #0
100114c2:	7823      	ldrb	r3, [r4, #0]
100114c4:	4293      	cmp	r3, r2
100114c6:	d00a      	beq.n	100114de <gapm_cmp_evt+0x126>
100114c8:	79a3      	ldrb	r3, [r4, #6]
100114ca:	323f      	adds	r2, #63	; 0x3f
100114cc:	1c19      	adds	r1, r3, #0
100114ce:	4391      	bics	r1, r2
100114d0:	3a3e      	subs	r2, #62	; 0x3e
100114d2:	29c0      	cmp	r1, #192	; 0xc0
100114d4:	d003      	beq.n	100114de <gapm_cmp_evt+0x126>
100114d6:	065b      	lsls	r3, r3, #25
100114d8:	0fdb      	lsrs	r3, r3, #31
100114da:	3202      	adds	r2, #2
100114dc:	1ad2      	subs	r2, r2, r3
100114de:	7022      	strb	r2, [r4, #0]
100114e0:	2005      	movs	r0, #5
100114e2:	e000      	b.n	100114e6 <gapm_cmp_evt+0x12e>
100114e4:	2000      	movs	r0, #0
100114e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100114e8:	10016265 	.word	0x10016265
100114ec:	10010709 	.word	0x10010709
100114f0:	1001b01a 	.word	0x1001b01a
100114f4:	100106cd 	.word	0x100106cd
100114f8:	1001af8a 	.word	0x1001af8a
100114fc:	10016253 	.word	0x10016253

10011500 <gapm_start_adv_cmd_handler>:
10011500:	b5f0      	push	{r4, r5, r6, r7, lr}
10011502:	b089      	sub	sp, #36	; 0x24
10011504:	9303      	str	r3, [sp, #12]
10011506:	ab0e      	add	r3, sp, #56	; 0x38
10011508:	9102      	str	r1, [sp, #8]
1001150a:	cb02      	ldmia	r3!, {r1}
1001150c:	aa08      	add	r2, sp, #32
1001150e:	881b      	ldrh	r3, [r3, #0]
10011510:	4e3c      	ldr	r6, [pc, #240]	; (10011604 <gapm_start_adv_cmd_handler+0x104>)
10011512:	9300      	str	r3, [sp, #0]
10011514:	ab10      	add	r3, sp, #64	; 0x40
10011516:	881b      	ldrh	r3, [r3, #0]
10011518:	240d      	movs	r4, #13
1001151a:	469c      	mov	ip, r3
1001151c:	ab11      	add	r3, sp, #68	; 0x44
1001151e:	781b      	ldrb	r3, [r3, #0]
10011520:	9304      	str	r3, [sp, #16]
10011522:	ab12      	add	r3, sp, #72	; 0x48
10011524:	781b      	ldrb	r3, [r3, #0]
10011526:	9305      	str	r3, [sp, #20]
10011528:	ab13      	add	r3, sp, #76	; 0x4c
1001152a:	781b      	ldrb	r3, [r3, #0]
1001152c:	9306      	str	r3, [sp, #24]
1001152e:	ab14      	add	r3, sp, #80	; 0x50
10011530:	781b      	ldrb	r3, [r3, #0]
10011532:	9301      	str	r3, [sp, #4]
10011534:	2319      	movs	r3, #25
10011536:	189b      	adds	r3, r3, r2
10011538:	7fdd      	ldrb	r5, [r3, #31]
1001153a:	ab18      	add	r3, sp, #96	; 0x60
1001153c:	881f      	ldrh	r7, [r3, #0]
1001153e:	ab19      	add	r3, sp, #100	; 0x64
10011540:	781b      	ldrb	r3, [r3, #0]
10011542:	8832      	ldrh	r2, [r6, #0]
10011544:	9307      	str	r3, [sp, #28]
10011546:	4b30      	ldr	r3, [pc, #192]	; (10011608 <gapm_start_adv_cmd_handler+0x108>)
10011548:	8836      	ldrh	r6, [r6, #0]
1001154a:	711a      	strb	r2, [r3, #4]
1001154c:	466a      	mov	r2, sp
1001154e:	7a12      	ldrb	r2, [r2, #8]
10011550:	701c      	strb	r4, [r3, #0]
10011552:	705c      	strb	r4, [r3, #1]
10011554:	709c      	strb	r4, [r3, #2]
10011556:	725a      	strb	r2, [r3, #9]
10011558:	2400      	movs	r4, #0
1001155a:	466a      	mov	r2, sp
1001155c:	0a36      	lsrs	r6, r6, #8
1001155e:	70dc      	strb	r4, [r3, #3]
10011560:	7218      	strb	r0, [r3, #8]
10011562:	729c      	strb	r4, [r3, #10]
10011564:	715e      	strb	r6, [r3, #5]
10011566:	72dc      	strb	r4, [r3, #11]
10011568:	7812      	ldrb	r2, [r2, #0]
1001156a:	380e      	subs	r0, #14
1001156c:	731a      	strb	r2, [r3, #12]
1001156e:	9a00      	ldr	r2, [sp, #0]
10011570:	0a14      	lsrs	r4, r2, #8
10011572:	4662      	mov	r2, ip
10011574:	739a      	strb	r2, [r3, #14]
10011576:	4662      	mov	r2, ip
10011578:	735c      	strb	r4, [r3, #13]
1001157a:	0a14      	lsrs	r4, r2, #8
1001157c:	466a      	mov	r2, sp
1001157e:	7c12      	ldrb	r2, [r2, #16]
10011580:	73dc      	strb	r4, [r3, #15]
10011582:	741a      	strb	r2, [r3, #16]
10011584:	1c1c      	adds	r4, r3, #0
10011586:	2801      	cmp	r0, #1
10011588:	d809      	bhi.n	1001159e <gapm_start_adv_cmd_handler+0x9e>
1001158a:	2900      	cmp	r1, #0
1001158c:	d003      	beq.n	10011596 <gapm_start_adv_cmd_handler+0x96>
1001158e:	481f      	ldr	r0, [pc, #124]	; (1001160c <gapm_start_adv_cmd_handler+0x10c>)
10011590:	2206      	movs	r2, #6
10011592:	4b1f      	ldr	r3, [pc, #124]	; (10011610 <gapm_start_adv_cmd_handler+0x110>)
10011594:	4798      	blx	r3
10011596:	466b      	mov	r3, sp
10011598:	7b1b      	ldrb	r3, [r3, #12]
1001159a:	75e3      	strb	r3, [r4, #23]
1001159c:	e014      	b.n	100115c8 <gapm_start_adv_cmd_handler+0xc8>
1001159e:	466b      	mov	r3, sp
100115a0:	7d1b      	ldrb	r3, [r3, #20]
100115a2:	9915      	ldr	r1, [sp, #84]	; 0x54
100115a4:	7463      	strb	r3, [r4, #17]
100115a6:	466b      	mov	r3, sp
100115a8:	7e1b      	ldrb	r3, [r3, #24]
100115aa:	9a01      	ldr	r2, [sp, #4]
100115ac:	74a3      	strb	r3, [r4, #18]
100115ae:	466b      	mov	r3, sp
100115b0:	791b      	ldrb	r3, [r3, #4]
100115b2:	4818      	ldr	r0, [pc, #96]	; (10011614 <gapm_start_adv_cmd_handler+0x114>)
100115b4:	4e16      	ldr	r6, [pc, #88]	; (10011610 <gapm_start_adv_cmd_handler+0x110>)
100115b6:	74e3      	strb	r3, [r4, #19]
100115b8:	47b0      	blx	r6
100115ba:	1c23      	adds	r3, r4, #0
100115bc:	4816      	ldr	r0, [pc, #88]	; (10011618 <gapm_start_adv_cmd_handler+0x118>)
100115be:	3330      	adds	r3, #48	; 0x30
100115c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
100115c2:	1c2a      	adds	r2, r5, #0
100115c4:	701d      	strb	r5, [r3, #0]
100115c6:	47b0      	blx	r6
100115c8:	1c22      	adds	r2, r4, #0
100115ca:	23a5      	movs	r3, #165	; 0xa5
100115cc:	3250      	adds	r2, #80	; 0x50
100115ce:	7013      	strb	r3, [r2, #0]
100115d0:	1c22      	adds	r2, r4, #0
100115d2:	3251      	adds	r2, #81	; 0x51
100115d4:	7013      	strb	r3, [r2, #0]
100115d6:	1c23      	adds	r3, r4, #0
100115d8:	1c22      	adds	r2, r4, #0
100115da:	3352      	adds	r3, #82	; 0x52
100115dc:	701f      	strb	r7, [r3, #0]
100115de:	3253      	adds	r2, #83	; 0x53
100115e0:	0a3b      	lsrs	r3, r7, #8
100115e2:	7013      	strb	r3, [r2, #0]
100115e4:	466a      	mov	r2, sp
100115e6:	1c23      	adds	r3, r4, #0
100115e8:	7f12      	ldrb	r2, [r2, #28]
100115ea:	3354      	adds	r3, #84	; 0x54
100115ec:	701a      	strb	r2, [r3, #0]
100115ee:	234d      	movs	r3, #77	; 0x4d
100115f0:	2500      	movs	r5, #0
100115f2:	71a3      	strb	r3, [r4, #6]
100115f4:	1c20      	adds	r0, r4, #0
100115f6:	2155      	movs	r1, #85	; 0x55
100115f8:	4b08      	ldr	r3, [pc, #32]	; (1001161c <gapm_start_adv_cmd_handler+0x11c>)
100115fa:	71e5      	strb	r5, [r4, #7]
100115fc:	4798      	blx	r3
100115fe:	1c28      	adds	r0, r5, #0
10011600:	b009      	add	sp, #36	; 0x24
10011602:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011604:	1001af88 	.word	0x1001af88
10011608:	1001b2f8 	.word	0x1001b2f8
1001160c:	1001b309 	.word	0x1001b309
10011610:	10016253 	.word	0x10016253
10011614:	1001b30c 	.word	0x1001b30c
10011618:	1001b329 	.word	0x1001b329
1001161c:	100104fd 	.word	0x100104fd

10011620 <get_gap_local_addr_type>:
10011620:	4b04      	ldr	r3, [pc, #16]	; (10011634 <get_gap_local_addr_type+0x14>)
10011622:	2001      	movs	r0, #1
10011624:	791b      	ldrb	r3, [r3, #4]
10011626:	2b02      	cmp	r3, #2
10011628:	d003      	beq.n	10011632 <get_gap_local_addr_type+0x12>
1001162a:	3b03      	subs	r3, #3
1001162c:	4258      	negs	r0, r3
1001162e:	4158      	adcs	r0, r3
10011630:	0040      	lsls	r0, r0, #1
10011632:	4770      	bx	lr
10011634:	1001b01a 	.word	0x1001b01a

10011638 <gapm_adv_report_evt_handler>:
10011638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001163a:	7843      	ldrb	r3, [r0, #1]
1001163c:	1c05      	adds	r5, r0, #0
1001163e:	9301      	str	r3, [sp, #4]
10011640:	466b      	mov	r3, sp
10011642:	1c0c      	adds	r4, r1, #0
10011644:	791b      	ldrb	r3, [r3, #4]
10011646:	7806      	ldrb	r6, [r0, #0]
10011648:	2206      	movs	r2, #6
1001164a:	704b      	strb	r3, [r1, #1]
1001164c:	1c88      	adds	r0, r1, #2
1001164e:	4f1b      	ldr	r7, [pc, #108]	; (100116bc <gapm_adv_report_evt_handler+0x84>)
10011650:	1ca9      	adds	r1, r5, #2
10011652:	47b8      	blx	r7
10011654:	1c20      	adds	r0, r4, #0
10011656:	1c29      	adds	r1, r5, #0
10011658:	7a2a      	ldrb	r2, [r5, #8]
1001165a:	3008      	adds	r0, #8
1001165c:	77c2      	strb	r2, [r0, #31]
1001165e:	3109      	adds	r1, #9
10011660:	3528      	adds	r5, #40	; 0x28
10011662:	47b8      	blx	r7
10011664:	782b      	ldrb	r3, [r5, #0]
10011666:	b25a      	sxtb	r2, r3
10011668:	2a00      	cmp	r2, #0
1001166a:	da01      	bge.n	10011670 <gapm_adv_report_evt_handler+0x38>
1001166c:	3301      	adds	r3, #1
1001166e:	b2db      	uxtb	r3, r3
10011670:	1c22      	adds	r2, r4, #0
10011672:	3228      	adds	r2, #40	; 0x28
10011674:	7013      	strb	r3, [r2, #0]
10011676:	2200      	movs	r2, #0
10011678:	9b01      	ldr	r3, [sp, #4]
1001167a:	4293      	cmp	r3, r2
1001167c:	d00a      	beq.n	10011694 <gapm_adv_report_evt_handler+0x5c>
1001167e:	79e3      	ldrb	r3, [r4, #7]
10011680:	323f      	adds	r2, #63	; 0x3f
10011682:	1c19      	adds	r1, r3, #0
10011684:	4391      	bics	r1, r2
10011686:	3a3e      	subs	r2, #62	; 0x3e
10011688:	29c0      	cmp	r1, #192	; 0xc0
1001168a:	d003      	beq.n	10011694 <gapm_adv_report_evt_handler+0x5c>
1001168c:	065b      	lsls	r3, r3, #25
1001168e:	0fdb      	lsrs	r3, r3, #31
10011690:	3202      	adds	r2, #2
10011692:	1ad2      	subs	r2, r2, r3
10011694:	7062      	strb	r2, [r4, #1]
10011696:	2e04      	cmp	r6, #4
10011698:	d80f      	bhi.n	100116ba <gapm_adv_report_evt_handler+0x82>
1001169a:	1c30      	adds	r0, r6, #0
1001169c:	f001 fdb4 	bl	10013208 <__gnu_thumb1_case_uqi>
100116a0:	09070503 	.word	0x09070503
100116a4:	0b          	.byte	0x0b
100116a5:	00          	.byte	0x00
100116a6:	2300      	movs	r3, #0
100116a8:	e006      	b.n	100116b8 <gapm_adv_report_evt_handler+0x80>
100116aa:	2301      	movs	r3, #1
100116ac:	e004      	b.n	100116b8 <gapm_adv_report_evt_handler+0x80>
100116ae:	2302      	movs	r3, #2
100116b0:	e002      	b.n	100116b8 <gapm_adv_report_evt_handler+0x80>
100116b2:	2303      	movs	r3, #3
100116b4:	e000      	b.n	100116b8 <gapm_adv_report_evt_handler+0x80>
100116b6:	2305      	movs	r3, #5
100116b8:	7023      	strb	r3, [r4, #0]
100116ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100116bc:	10016253 	.word	0x10016253

100116c0 <gapm_resolv_addr_cmd_handler>:
100116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100116c2:	2314      	movs	r3, #20
100116c4:	4c12      	ldr	r4, [pc, #72]	; (10011710 <gapm_resolv_addr_cmd_handler+0x50>)
100116c6:	1c17      	adds	r7, r2, #0
100116c8:	7023      	strb	r3, [r4, #0]
100116ca:	3b07      	subs	r3, #7
100116cc:	7063      	strb	r3, [r4, #1]
100116ce:	70a3      	strb	r3, [r4, #2]
100116d0:	2300      	movs	r3, #0
100116d2:	70e3      	strb	r3, [r4, #3]
100116d4:	4b0f      	ldr	r3, [pc, #60]	; (10011714 <gapm_resolv_addr_cmd_handler+0x54>)
100116d6:	1c05      	adds	r5, r0, #0
100116d8:	881a      	ldrh	r2, [r3, #0]
100116da:	881b      	ldrh	r3, [r3, #0]
100116dc:	4e0e      	ldr	r6, [pc, #56]	; (10011718 <gapm_resolv_addr_cmd_handler+0x58>)
100116de:	0a1b      	lsrs	r3, r3, #8
100116e0:	7163      	strb	r3, [r4, #5]
100116e2:	2317      	movs	r3, #23
100116e4:	012d      	lsls	r5, r5, #4
100116e6:	7122      	strb	r2, [r4, #4]
100116e8:	7260      	strb	r0, [r4, #9]
100116ea:	2206      	movs	r2, #6
100116ec:	480b      	ldr	r0, [pc, #44]	; (1001171c <gapm_resolv_addr_cmd_handler+0x5c>)
100116ee:	7223      	strb	r3, [r4, #8]
100116f0:	47b0      	blx	r6
100116f2:	1c39      	adds	r1, r7, #0
100116f4:	1c2a      	adds	r2, r5, #0
100116f6:	480a      	ldr	r0, [pc, #40]	; (10011720 <gapm_resolv_addr_cmd_handler+0x60>)
100116f8:	47b0      	blx	r6
100116fa:	1c29      	adds	r1, r5, #0
100116fc:	3110      	adds	r1, #16
100116fe:	1c0b      	adds	r3, r1, #0
10011700:	3b08      	subs	r3, #8
10011702:	71a3      	strb	r3, [r4, #6]
10011704:	121b      	asrs	r3, r3, #8
10011706:	71e3      	strb	r3, [r4, #7]
10011708:	1c20      	adds	r0, r4, #0
1001170a:	4b06      	ldr	r3, [pc, #24]	; (10011724 <gapm_resolv_addr_cmd_handler+0x64>)
1001170c:	4798      	blx	r3
1001170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011710:	1001b2f8 	.word	0x1001b2f8
10011714:	1001af88 	.word	0x1001af88
10011718:	10016253 	.word	0x10016253
1001171c:	1001b302 	.word	0x1001b302
10011720:	1001b308 	.word	0x1001b308
10011724:	100104fd 	.word	0x100104fd

10011728 <gapm_addr_solved_ind_handler>:
10011728:	b570      	push	{r4, r5, r6, lr}
1001172a:	1c04      	adds	r4, r0, #0
1001172c:	1c08      	adds	r0, r1, #0
1001172e:	1c0d      	adds	r5, r1, #0
10011730:	4e05      	ldr	r6, [pc, #20]	; (10011748 <gapm_addr_solved_ind_handler+0x20>)
10011732:	1c21      	adds	r1, r4, #0
10011734:	2206      	movs	r2, #6
10011736:	3011      	adds	r0, #17
10011738:	47b0      	blx	r6
1001173a:	1c68      	adds	r0, r5, #1
1001173c:	1da1      	adds	r1, r4, #6
1001173e:	2210      	movs	r2, #16
10011740:	47b0      	blx	r6
10011742:	2300      	movs	r3, #0
10011744:	702b      	strb	r3, [r5, #0]
10011746:	bd70      	pop	{r4, r5, r6, pc}
10011748:	10016253 	.word	0x10016253

1001174c <gapm_profile_added_ind_handler>:
1001174c:	b510      	push	{r4, lr}
1001174e:	7843      	ldrb	r3, [r0, #1]
10011750:	7902      	ldrb	r2, [r0, #4]
10011752:	7944      	ldrb	r4, [r0, #5]
10011754:	7800      	ldrb	r0, [r0, #0]
10011756:	021b      	lsls	r3, r3, #8
10011758:	4303      	orrs	r3, r0
1001175a:	2b1b      	cmp	r3, #27
1001175c:	d104      	bne.n	10011768 <gapm_profile_added_ind_handler+0x1c>
1001175e:	2300      	movs	r3, #0
10011760:	700b      	strb	r3, [r1, #0]
10011762:	0223      	lsls	r3, r4, #8
10011764:	4313      	orrs	r3, r2
10011766:	804b      	strh	r3, [r1, #2]
10011768:	203b      	movs	r0, #59	; 0x3b
1001176a:	bd10      	pop	{r4, pc}

1001176c <gattc_read_req_ind_parser>:
1001176c:	7843      	ldrb	r3, [r0, #1]
1001176e:	7802      	ldrb	r2, [r0, #0]
10011770:	021b      	lsls	r3, r3, #8
10011772:	4313      	orrs	r3, r2
10011774:	804b      	strh	r3, [r1, #2]
10011776:	4770      	bx	lr

10011778 <gattc_write_req_ind_parser>:
10011778:	b508      	push	{r3, lr}
1001177a:	1c13      	adds	r3, r2, #0
1001177c:	0a00      	lsrs	r0, r0, #8
1001177e:	8010      	strh	r0, [r2, #0]
10011780:	784a      	ldrb	r2, [r1, #1]
10011782:	7808      	ldrb	r0, [r1, #0]
10011784:	0212      	lsls	r2, r2, #8
10011786:	4302      	orrs	r2, r0
10011788:	805a      	strh	r2, [r3, #2]
1001178a:	78ca      	ldrb	r2, [r1, #3]
1001178c:	7888      	ldrb	r0, [r1, #2]
1001178e:	0212      	lsls	r2, r2, #8
10011790:	4302      	orrs	r2, r0
10011792:	809a      	strh	r2, [r3, #4]
10011794:	794a      	ldrb	r2, [r1, #5]
10011796:	7908      	ldrb	r0, [r1, #4]
10011798:	0212      	lsls	r2, r2, #8
1001179a:	4302      	orrs	r2, r0
1001179c:	80da      	strh	r2, [r3, #6]
1001179e:	3308      	adds	r3, #8
100117a0:	1c18      	adds	r0, r3, #0
100117a2:	3106      	adds	r1, #6
100117a4:	4b01      	ldr	r3, [pc, #4]	; (100117ac <gattc_write_req_ind_parser+0x34>)
100117a6:	4798      	blx	r3
100117a8:	bd08      	pop	{r3, pc}
100117aa:	46c0      	nop			; (mov r8, r8)
100117ac:	10016253 	.word	0x10016253

100117b0 <gattc_att_info_req_parser>:
100117b0:	7843      	ldrb	r3, [r0, #1]
100117b2:	7802      	ldrb	r2, [r0, #0]
100117b4:	021b      	lsls	r3, r3, #8
100117b6:	4313      	orrs	r3, r2
100117b8:	800b      	strh	r3, [r1, #0]
100117ba:	4770      	bx	lr

100117bc <gattc_read_cfm>:
100117bc:	b538      	push	{r3, r4, r5, lr}
100117be:	2514      	movs	r5, #20
100117c0:	1c1c      	adds	r4, r3, #0
100117c2:	4b14      	ldr	r3, [pc, #80]	; (10011814 <gattc_read_cfm+0x58>)
100117c4:	70d9      	strb	r1, [r3, #3]
100117c6:	4914      	ldr	r1, [pc, #80]	; (10011818 <gattc_read_cfm+0x5c>)
100117c8:	701d      	strb	r5, [r3, #0]
100117ca:	3d08      	subs	r5, #8
100117cc:	705d      	strb	r5, [r3, #1]
100117ce:	709d      	strb	r5, [r3, #2]
100117d0:	880d      	ldrh	r5, [r1, #0]
100117d2:	8809      	ldrh	r1, [r1, #0]
100117d4:	7218      	strb	r0, [r3, #8]
100117d6:	0a09      	lsrs	r1, r1, #8
100117d8:	7159      	strb	r1, [r3, #5]
100117da:	0a00      	lsrs	r0, r0, #8
100117dc:	0a21      	lsrs	r1, r4, #8
100117de:	711d      	strb	r5, [r3, #4]
100117e0:	7258      	strb	r0, [r3, #9]
100117e2:	729c      	strb	r4, [r3, #10]
100117e4:	72d9      	strb	r1, [r3, #11]
100117e6:	731a      	strb	r2, [r3, #12]
100117e8:	1c1d      	adds	r5, r3, #0
100117ea:	2c00      	cmp	r4, #0
100117ec:	d007      	beq.n	100117fe <gattc_read_cfm+0x42>
100117ee:	9904      	ldr	r1, [sp, #16]
100117f0:	1c22      	adds	r2, r4, #0
100117f2:	480a      	ldr	r0, [pc, #40]	; (1001181c <gattc_read_cfm+0x60>)
100117f4:	4b0a      	ldr	r3, [pc, #40]	; (10011820 <gattc_read_cfm+0x64>)
100117f6:	340d      	adds	r4, #13
100117f8:	4798      	blx	r3
100117fa:	b2a1      	uxth	r1, r4
100117fc:	e001      	b.n	10011802 <gattc_read_cfm+0x46>
100117fe:	210e      	movs	r1, #14
10011800:	735c      	strb	r4, [r3, #13]
10011802:	1c0b      	adds	r3, r1, #0
10011804:	3b08      	subs	r3, #8
10011806:	71ab      	strb	r3, [r5, #6]
10011808:	121b      	asrs	r3, r3, #8
1001180a:	71eb      	strb	r3, [r5, #7]
1001180c:	1c28      	adds	r0, r5, #0
1001180e:	4b05      	ldr	r3, [pc, #20]	; (10011824 <gattc_read_cfm+0x68>)
10011810:	4798      	blx	r3
10011812:	bd38      	pop	{r3, r4, r5, pc}
10011814:	1001b2f8 	.word	0x1001b2f8
10011818:	1001af88 	.word	0x1001af88
1001181c:	1001b305 	.word	0x1001b305
10011820:	10016253 	.word	0x10016253
10011824:	100104fd 	.word	0x100104fd

10011828 <gattc_write_cfm>:
10011828:	4b0d      	ldr	r3, [pc, #52]	; (10011860 <gattc_write_cfm+0x38>)
1001182a:	b510      	push	{r4, lr}
1001182c:	729a      	strb	r2, [r3, #10]
1001182e:	2203      	movs	r2, #3
10011830:	2416      	movs	r4, #22
10011832:	719a      	strb	r2, [r3, #6]
10011834:	2200      	movs	r2, #0
10011836:	70d9      	strb	r1, [r3, #3]
10011838:	490a      	ldr	r1, [pc, #40]	; (10011864 <gattc_write_cfm+0x3c>)
1001183a:	701c      	strb	r4, [r3, #0]
1001183c:	3c0a      	subs	r4, #10
1001183e:	705c      	strb	r4, [r3, #1]
10011840:	709c      	strb	r4, [r3, #2]
10011842:	880c      	ldrh	r4, [r1, #0]
10011844:	8809      	ldrh	r1, [r1, #0]
10011846:	7218      	strb	r0, [r3, #8]
10011848:	0a09      	lsrs	r1, r1, #8
1001184a:	0a00      	lsrs	r0, r0, #8
1001184c:	711c      	strb	r4, [r3, #4]
1001184e:	7159      	strb	r1, [r3, #5]
10011850:	7258      	strb	r0, [r3, #9]
10011852:	71da      	strb	r2, [r3, #7]
10011854:	1c18      	adds	r0, r3, #0
10011856:	210b      	movs	r1, #11
10011858:	4b03      	ldr	r3, [pc, #12]	; (10011868 <gattc_write_cfm+0x40>)
1001185a:	4798      	blx	r3
1001185c:	bd10      	pop	{r4, pc}
1001185e:	46c0      	nop			; (mov r8, r8)
10011860:	1001b2f8 	.word	0x1001b2f8
10011864:	1001af88 	.word	0x1001af88
10011868:	100104fd 	.word	0x100104fd

1001186c <gattc_att_info_cfm>:
1001186c:	b538      	push	{r3, r4, r5, lr}
1001186e:	4c0e      	ldr	r4, [pc, #56]	; (100118a8 <gattc_att_info_cfm+0x3c>)
10011870:	2518      	movs	r5, #24
10011872:	7323      	strb	r3, [r4, #12]
10011874:	2305      	movs	r3, #5
10011876:	71a3      	strb	r3, [r4, #6]
10011878:	2300      	movs	r3, #0
1001187a:	70e1      	strb	r1, [r4, #3]
1001187c:	490b      	ldr	r1, [pc, #44]	; (100118ac <gattc_att_info_cfm+0x40>)
1001187e:	7025      	strb	r5, [r4, #0]
10011880:	3d0c      	subs	r5, #12
10011882:	7065      	strb	r5, [r4, #1]
10011884:	70a5      	strb	r5, [r4, #2]
10011886:	880d      	ldrh	r5, [r1, #0]
10011888:	8809      	ldrh	r1, [r1, #0]
1001188a:	7220      	strb	r0, [r4, #8]
1001188c:	0a09      	lsrs	r1, r1, #8
1001188e:	0a00      	lsrs	r0, r0, #8
10011890:	7161      	strb	r1, [r4, #5]
10011892:	7260      	strb	r0, [r4, #9]
10011894:	72a2      	strb	r2, [r4, #10]
10011896:	71e3      	strb	r3, [r4, #7]
10011898:	0a12      	lsrs	r2, r2, #8
1001189a:	1c20      	adds	r0, r4, #0
1001189c:	210d      	movs	r1, #13
1001189e:	4b04      	ldr	r3, [pc, #16]	; (100118b0 <gattc_att_info_cfm+0x44>)
100118a0:	7125      	strb	r5, [r4, #4]
100118a2:	72e2      	strb	r2, [r4, #11]
100118a4:	4798      	blx	r3
100118a6:	bd38      	pop	{r3, r4, r5, pc}
100118a8:	1001b2f8 	.word	0x1001b2f8
100118ac:	1001af88 	.word	0x1001af88
100118b0:	100104fd 	.word	0x100104fd

100118b4 <gattc_send_evt_cmd_handler>:
100118b4:	b570      	push	{r4, r5, r6, lr}
100118b6:	2610      	movs	r6, #16
100118b8:	ac04      	add	r4, sp, #16
100118ba:	8825      	ldrh	r5, [r4, #0]
100118bc:	4c15      	ldr	r4, [pc, #84]	; (10011914 <gattc_send_evt_cmd_handler+0x60>)
100118be:	70e2      	strb	r2, [r4, #3]
100118c0:	4a15      	ldr	r2, [pc, #84]	; (10011918 <gattc_send_evt_cmd_handler+0x64>)
100118c2:	7026      	strb	r6, [r4, #0]
100118c4:	3e04      	subs	r6, #4
100118c6:	7066      	strb	r6, [r4, #1]
100118c8:	70a6      	strb	r6, [r4, #2]
100118ca:	8816      	ldrh	r6, [r2, #0]
100118cc:	8812      	ldrh	r2, [r2, #0]
100118ce:	7220      	strb	r0, [r4, #8]
100118d0:	0a12      	lsrs	r2, r2, #8
100118d2:	7162      	strb	r2, [r4, #5]
100118d4:	4a11      	ldr	r2, [pc, #68]	; (1001191c <gattc_send_evt_cmd_handler+0x68>)
100118d6:	7321      	strb	r1, [r4, #12]
100118d8:	8812      	ldrh	r2, [r2, #0]
100118da:	73a5      	strb	r5, [r4, #14]
100118dc:	3201      	adds	r2, #1
100118de:	7262      	strb	r2, [r4, #9]
100118e0:	1212      	asrs	r2, r2, #8
100118e2:	72a2      	strb	r2, [r4, #10]
100118e4:	2200      	movs	r2, #0
100118e6:	72e2      	strb	r2, [r4, #11]
100118e8:	0a0a      	lsrs	r2, r1, #8
100118ea:	7362      	strb	r2, [r4, #13]
100118ec:	0a2a      	lsrs	r2, r5, #8
100118ee:	73e2      	strb	r2, [r4, #15]
100118f0:	1c19      	adds	r1, r3, #0
100118f2:	1c2a      	adds	r2, r5, #0
100118f4:	4b0a      	ldr	r3, [pc, #40]	; (10011920 <gattc_send_evt_cmd_handler+0x6c>)
100118f6:	3510      	adds	r5, #16
100118f8:	480a      	ldr	r0, [pc, #40]	; (10011924 <gattc_send_evt_cmd_handler+0x70>)
100118fa:	7126      	strb	r6, [r4, #4]
100118fc:	4798      	blx	r3
100118fe:	b2a9      	uxth	r1, r5
10011900:	1c0b      	adds	r3, r1, #0
10011902:	3b08      	subs	r3, #8
10011904:	71a3      	strb	r3, [r4, #6]
10011906:	121b      	asrs	r3, r3, #8
10011908:	71e3      	strb	r3, [r4, #7]
1001190a:	1c20      	adds	r0, r4, #0
1001190c:	4b06      	ldr	r3, [pc, #24]	; (10011928 <gattc_send_evt_cmd_handler+0x74>)
1001190e:	4798      	blx	r3
10011910:	bd70      	pop	{r4, r5, r6, pc}
10011912:	46c0      	nop			; (mov r8, r8)
10011914:	1001b2f8 	.word	0x1001b2f8
10011918:	1001af88 	.word	0x1001af88
1001191c:	1001a0bc 	.word	0x1001a0bc
10011920:	10016253 	.word	0x10016253
10011924:	1001b308 	.word	0x1001b308
10011928:	100104fd 	.word	0x100104fd

1001192c <gattc_event_cfm_handler>:
1001192c:	220e      	movs	r2, #14
1001192e:	b508      	push	{r3, lr}
10011930:	4b0b      	ldr	r3, [pc, #44]	; (10011960 <gattc_event_cfm_handler+0x34>)
10011932:	701a      	strb	r2, [r3, #0]
10011934:	3a02      	subs	r2, #2
10011936:	705a      	strb	r2, [r3, #1]
10011938:	709a      	strb	r2, [r3, #2]
1001193a:	4a0a      	ldr	r2, [pc, #40]	; (10011964 <gattc_event_cfm_handler+0x38>)
1001193c:	70d8      	strb	r0, [r3, #3]
1001193e:	8810      	ldrh	r0, [r2, #0]
10011940:	8812      	ldrh	r2, [r2, #0]
10011942:	7219      	strb	r1, [r3, #8]
10011944:	0a12      	lsrs	r2, r2, #8
10011946:	715a      	strb	r2, [r3, #5]
10011948:	2202      	movs	r2, #2
1001194a:	719a      	strb	r2, [r3, #6]
1001194c:	2200      	movs	r2, #0
1001194e:	0a09      	lsrs	r1, r1, #8
10011950:	7118      	strb	r0, [r3, #4]
10011952:	7259      	strb	r1, [r3, #9]
10011954:	71da      	strb	r2, [r3, #7]
10011956:	1c18      	adds	r0, r3, #0
10011958:	210a      	movs	r1, #10
1001195a:	4b03      	ldr	r3, [pc, #12]	; (10011968 <gattc_event_cfm_handler+0x3c>)
1001195c:	4798      	blx	r3
1001195e:	bd08      	pop	{r3, pc}
10011960:	1001b2f8 	.word	0x1001b2f8
10011964:	1001af88 	.word	0x1001af88
10011968:	100104fd 	.word	0x100104fd

1001196c <gattc_disc_svc_ind_parser>:
1001196c:	b570      	push	{r4, r5, r6, lr}
1001196e:	1c15      	adds	r5, r2, #0
10011970:	0a00      	lsrs	r0, r0, #8
10011972:	8010      	strh	r0, [r2, #0]
10011974:	784b      	ldrb	r3, [r1, #1]
10011976:	780a      	ldrb	r2, [r1, #0]
10011978:	021b      	lsls	r3, r3, #8
1001197a:	4313      	orrs	r3, r2
1001197c:	806b      	strh	r3, [r5, #2]
1001197e:	78cb      	ldrb	r3, [r1, #3]
10011980:	788a      	ldrb	r2, [r1, #2]
10011982:	021b      	lsls	r3, r3, #8
10011984:	4313      	orrs	r3, r2
10011986:	80ab      	strh	r3, [r5, #4]
10011988:	790e      	ldrb	r6, [r1, #4]
1001198a:	4b05      	ldr	r3, [pc, #20]	; (100119a0 <gattc_disc_svc_ind_parser+0x34>)
1001198c:	1c30      	adds	r0, r6, #0
1001198e:	1c0c      	adds	r4, r1, #0
10011990:	4798      	blx	r3
10011992:	1c32      	adds	r2, r6, #0
10011994:	71a8      	strb	r0, [r5, #6]
10011996:	1d61      	adds	r1, r4, #5
10011998:	1de8      	adds	r0, r5, #7
1001199a:	4b02      	ldr	r3, [pc, #8]	; (100119a4 <gattc_disc_svc_ind_parser+0x38>)
1001199c:	4798      	blx	r3
1001199e:	bd70      	pop	{r4, r5, r6, pc}
100119a0:	1000f83d 	.word	0x1000f83d
100119a4:	10016253 	.word	0x10016253

100119a8 <gattc_disc_svc_incl_ind_parser>:
100119a8:	b570      	push	{r4, r5, r6, lr}
100119aa:	1c15      	adds	r5, r2, #0
100119ac:	0a00      	lsrs	r0, r0, #8
100119ae:	8010      	strh	r0, [r2, #0]
100119b0:	784b      	ldrb	r3, [r1, #1]
100119b2:	780a      	ldrb	r2, [r1, #0]
100119b4:	021b      	lsls	r3, r3, #8
100119b6:	4313      	orrs	r3, r2
100119b8:	806b      	strh	r3, [r5, #2]
100119ba:	78cb      	ldrb	r3, [r1, #3]
100119bc:	788a      	ldrb	r2, [r1, #2]
100119be:	021b      	lsls	r3, r3, #8
100119c0:	4313      	orrs	r3, r2
100119c2:	80ab      	strh	r3, [r5, #4]
100119c4:	794b      	ldrb	r3, [r1, #5]
100119c6:	790a      	ldrb	r2, [r1, #4]
100119c8:	021b      	lsls	r3, r3, #8
100119ca:	4313      	orrs	r3, r2
100119cc:	80eb      	strh	r3, [r5, #6]
100119ce:	798e      	ldrb	r6, [r1, #6]
100119d0:	4b05      	ldr	r3, [pc, #20]	; (100119e8 <gattc_disc_svc_incl_ind_parser+0x40>)
100119d2:	1c30      	adds	r0, r6, #0
100119d4:	1c0c      	adds	r4, r1, #0
100119d6:	4798      	blx	r3
100119d8:	7228      	strb	r0, [r5, #8]
100119da:	1c28      	adds	r0, r5, #0
100119dc:	1c32      	adds	r2, r6, #0
100119de:	1de1      	adds	r1, r4, #7
100119e0:	4b02      	ldr	r3, [pc, #8]	; (100119ec <gattc_disc_svc_incl_ind_parser+0x44>)
100119e2:	3009      	adds	r0, #9
100119e4:	4798      	blx	r3
100119e6:	bd70      	pop	{r4, r5, r6, pc}
100119e8:	1000f83d 	.word	0x1000f83d
100119ec:	10016253 	.word	0x10016253

100119f0 <gattc_disc_char_ind_parser>:
100119f0:	b570      	push	{r4, r5, r6, lr}
100119f2:	1c15      	adds	r5, r2, #0
100119f4:	0a00      	lsrs	r0, r0, #8
100119f6:	8010      	strh	r0, [r2, #0]
100119f8:	784b      	ldrb	r3, [r1, #1]
100119fa:	780a      	ldrb	r2, [r1, #0]
100119fc:	021b      	lsls	r3, r3, #8
100119fe:	4313      	orrs	r3, r2
10011a00:	806b      	strh	r3, [r5, #2]
10011a02:	78cb      	ldrb	r3, [r1, #3]
10011a04:	788a      	ldrb	r2, [r1, #2]
10011a06:	021b      	lsls	r3, r3, #8
10011a08:	4313      	orrs	r3, r2
10011a0a:	80ab      	strh	r3, [r5, #4]
10011a0c:	790b      	ldrb	r3, [r1, #4]
10011a0e:	1c0c      	adds	r4, r1, #0
10011a10:	71ab      	strb	r3, [r5, #6]
10011a12:	794e      	ldrb	r6, [r1, #5]
10011a14:	4b05      	ldr	r3, [pc, #20]	; (10011a2c <gattc_disc_char_ind_parser+0x3c>)
10011a16:	1c30      	adds	r0, r6, #0
10011a18:	4798      	blx	r3
10011a1a:	71e8      	strb	r0, [r5, #7]
10011a1c:	1c28      	adds	r0, r5, #0
10011a1e:	1c32      	adds	r2, r6, #0
10011a20:	1da1      	adds	r1, r4, #6
10011a22:	4b03      	ldr	r3, [pc, #12]	; (10011a30 <gattc_disc_char_ind_parser+0x40>)
10011a24:	3008      	adds	r0, #8
10011a26:	4798      	blx	r3
10011a28:	bd70      	pop	{r4, r5, r6, pc}
10011a2a:	46c0      	nop			; (mov r8, r8)
10011a2c:	1000f83d 	.word	0x1000f83d
10011a30:	10016253 	.word	0x10016253

10011a34 <gattc_disc_char_desc_ind_parser>:
10011a34:	b570      	push	{r4, r5, r6, lr}
10011a36:	1c15      	adds	r5, r2, #0
10011a38:	0a00      	lsrs	r0, r0, #8
10011a3a:	8010      	strh	r0, [r2, #0]
10011a3c:	784b      	ldrb	r3, [r1, #1]
10011a3e:	780a      	ldrb	r2, [r1, #0]
10011a40:	021b      	lsls	r3, r3, #8
10011a42:	4313      	orrs	r3, r2
10011a44:	806b      	strh	r3, [r5, #2]
10011a46:	788e      	ldrb	r6, [r1, #2]
10011a48:	4b05      	ldr	r3, [pc, #20]	; (10011a60 <gattc_disc_char_desc_ind_parser+0x2c>)
10011a4a:	1c30      	adds	r0, r6, #0
10011a4c:	1c0c      	adds	r4, r1, #0
10011a4e:	4798      	blx	r3
10011a50:	1c32      	adds	r2, r6, #0
10011a52:	7128      	strb	r0, [r5, #4]
10011a54:	1ce1      	adds	r1, r4, #3
10011a56:	1d68      	adds	r0, r5, #5
10011a58:	4b02      	ldr	r3, [pc, #8]	; (10011a64 <gattc_disc_char_desc_ind_parser+0x30>)
10011a5a:	4798      	blx	r3
10011a5c:	bd70      	pop	{r4, r5, r6, pc}
10011a5e:	46c0      	nop			; (mov r8, r8)
10011a60:	1000f83d 	.word	0x1000f83d
10011a64:	10016253 	.word	0x10016253

10011a68 <gattc_event_ind_and_notification_parser>:
10011a68:	b510      	push	{r4, lr}
10011a6a:	780c      	ldrb	r4, [r1, #0]
10011a6c:	1c13      	adds	r3, r2, #0
10011a6e:	2c12      	cmp	r4, #18
10011a70:	d10e      	bne.n	10011a90 <gattc_event_ind_and_notification_parser+0x28>
10011a72:	0a00      	lsrs	r0, r0, #8
10011a74:	8010      	strh	r0, [r2, #0]
10011a76:	788a      	ldrb	r2, [r1, #2]
10011a78:	709a      	strb	r2, [r3, #2]
10011a7a:	7948      	ldrb	r0, [r1, #5]
10011a7c:	790c      	ldrb	r4, [r1, #4]
10011a7e:	0200      	lsls	r0, r0, #8
10011a80:	4320      	orrs	r0, r4
10011a82:	8098      	strh	r0, [r3, #4]
10011a84:	3106      	adds	r1, #6
10011a86:	1d98      	adds	r0, r3, #6
10011a88:	4b0b      	ldr	r3, [pc, #44]	; (10011ab8 <gattc_event_ind_and_notification_parser+0x50>)
10011a8a:	4798      	blx	r3
10011a8c:	221b      	movs	r2, #27
10011a8e:	e010      	b.n	10011ab2 <gattc_event_ind_and_notification_parser+0x4a>
10011a90:	2200      	movs	r2, #0
10011a92:	2c13      	cmp	r4, #19
10011a94:	d10d      	bne.n	10011ab2 <gattc_event_ind_and_notification_parser+0x4a>
10011a96:	0a00      	lsrs	r0, r0, #8
10011a98:	8018      	strh	r0, [r3, #0]
10011a9a:	788a      	ldrb	r2, [r1, #2]
10011a9c:	709a      	strb	r2, [r3, #2]
10011a9e:	7908      	ldrb	r0, [r1, #4]
10011aa0:	78cc      	ldrb	r4, [r1, #3]
10011aa2:	0200      	lsls	r0, r0, #8
10011aa4:	4320      	orrs	r0, r4
10011aa6:	8098      	strh	r0, [r3, #4]
10011aa8:	3106      	adds	r1, #6
10011aaa:	1d98      	adds	r0, r3, #6
10011aac:	4b02      	ldr	r3, [pc, #8]	; (10011ab8 <gattc_event_ind_and_notification_parser+0x50>)
10011aae:	4798      	blx	r3
10011ab0:	221c      	movs	r2, #28
10011ab2:	1c10      	adds	r0, r2, #0
10011ab4:	bd10      	pop	{r4, pc}
10011ab6:	46c0      	nop			; (mov r8, r8)
10011ab8:	10016253 	.word	0x10016253

10011abc <gattc_complete_evt_handler>:
10011abc:	b500      	push	{lr}
10011abe:	0a00      	lsrs	r0, r0, #8
10011ac0:	8010      	strh	r0, [r2, #0]
10011ac2:	7808      	ldrb	r0, [r1, #0]
10011ac4:	7090      	strb	r0, [r2, #2]
10011ac6:	784b      	ldrb	r3, [r1, #1]
10011ac8:	3801      	subs	r0, #1
10011aca:	70d3      	strb	r3, [r2, #3]
10011acc:	2813      	cmp	r0, #19
10011ace:	d82c      	bhi.n	10011b2a <gattc_complete_evt_handler+0x6e>
10011ad0:	f001 fb9a 	bl	10013208 <__gnu_thumb1_case_uqi>
10011ad4:	0a0a0a0c 	.word	0x0a0a0a0c
10011ad8:	210a0a0a 	.word	0x210a0a0a
10011adc:	111f2121 	.word	0x111f2121
10011ae0:	2b111111 	.word	0x2b111111
10011ae4:	2919132b 	.word	0x2919132b
10011ae8:	2017      	movs	r0, #23
10011aea:	e01f      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011aec:	2024      	movs	r0, #36	; 0x24
10011aee:	2b00      	cmp	r3, #0
10011af0:	d11c      	bne.n	10011b2c <gattc_complete_evt_handler+0x70>
10011af2:	3017      	adds	r0, #23
10011af4:	e01a      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011af6:	2025      	movs	r0, #37	; 0x25
10011af8:	e018      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011afa:	4a0d      	ldr	r2, [pc, #52]	; (10011b30 <gattc_complete_evt_handler+0x74>)
10011afc:	201d      	movs	r0, #29
10011afe:	6813      	ldr	r3, [r2, #0]
10011b00:	3b01      	subs	r3, #1
10011b02:	6013      	str	r3, [r2, #0]
10011b04:	e012      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b06:	4a0a      	ldr	r2, [pc, #40]	; (10011b30 <gattc_complete_evt_handler+0x74>)
10011b08:	201e      	movs	r0, #30
10011b0a:	6813      	ldr	r3, [r2, #0]
10011b0c:	3b01      	subs	r3, #1
10011b0e:	6013      	str	r3, [r2, #0]
10011b10:	e00c      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b12:	2019      	movs	r0, #25
10011b14:	e00a      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b16:	203b      	movs	r0, #59	; 0x3b
10011b18:	2b00      	cmp	r3, #0
10011b1a:	d007      	beq.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b1c:	2182      	movs	r1, #130	; 0x82
10011b1e:	0089      	lsls	r1, r1, #2
10011b20:	5453      	strb	r3, [r2, r1]
10011b22:	3823      	subs	r0, #35	; 0x23
10011b24:	e002      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b26:	2021      	movs	r0, #33	; 0x21
10011b28:	e000      	b.n	10011b2c <gattc_complete_evt_handler+0x70>
10011b2a:	2000      	movs	r0, #0
10011b2c:	bd00      	pop	{pc}
10011b2e:	46c0      	nop			; (mov r8, r8)
10011b30:	1001a0c0 	.word	0x1001a0c0

10011b34 <gattc_event_mtu_changed_ind_parser>:
10011b34:	0a00      	lsrs	r0, r0, #8
10011b36:	8010      	strh	r0, [r2, #0]
10011b38:	784b      	ldrb	r3, [r1, #1]
10011b3a:	7809      	ldrb	r1, [r1, #0]
10011b3c:	021b      	lsls	r3, r3, #8
10011b3e:	430b      	orrs	r3, r1
10011b40:	8053      	strh	r3, [r2, #2]
10011b42:	4770      	bx	lr

10011b44 <gattc_read_ind_parser>:
10011b44:	0a00      	lsrs	r0, r0, #8
10011b46:	b508      	push	{r3, lr}
10011b48:	8010      	strh	r0, [r2, #0]
10011b4a:	1c13      	adds	r3, r2, #0
10011b4c:	2282      	movs	r2, #130	; 0x82
10011b4e:	2000      	movs	r0, #0
10011b50:	0092      	lsls	r2, r2, #2
10011b52:	5498      	strb	r0, [r3, r2]
10011b54:	784a      	ldrb	r2, [r1, #1]
10011b56:	7808      	ldrb	r0, [r1, #0]
10011b58:	0212      	lsls	r2, r2, #8
10011b5a:	4302      	orrs	r2, r0
10011b5c:	805a      	strh	r2, [r3, #2]
10011b5e:	78ca      	ldrb	r2, [r1, #3]
10011b60:	7888      	ldrb	r0, [r1, #2]
10011b62:	0212      	lsls	r2, r2, #8
10011b64:	4302      	orrs	r2, r0
10011b66:	80da      	strh	r2, [r3, #6]
10011b68:	794a      	ldrb	r2, [r1, #5]
10011b6a:	7908      	ldrb	r0, [r1, #4]
10011b6c:	0212      	lsls	r2, r2, #8
10011b6e:	4302      	orrs	r2, r0
10011b70:	809a      	strh	r2, [r3, #4]
10011b72:	3308      	adds	r3, #8
10011b74:	1c18      	adds	r0, r3, #0
10011b76:	3106      	adds	r1, #6
10011b78:	4b01      	ldr	r3, [pc, #4]	; (10011b80 <gattc_read_ind_parser+0x3c>)
10011b7a:	4798      	blx	r3
10011b7c:	bd08      	pop	{r3, pc}
10011b7e:	46c0      	nop			; (mov r8, r8)
10011b80:	10016253 	.word	0x10016253

10011b84 <gattc_svc_changed_cfg_ind_parser>:
10011b84:	0a00      	lsrs	r0, r0, #8
10011b86:	8010      	strh	r0, [r2, #0]
10011b88:	784b      	ldrb	r3, [r1, #1]
10011b8a:	7809      	ldrb	r1, [r1, #0]
10011b8c:	021b      	lsls	r3, r3, #8
10011b8e:	430b      	orrs	r3, r1
10011b90:	8053      	strh	r3, [r2, #2]
10011b92:	4770      	bx	lr

10011b94 <init_gattc_task_module>:
10011b94:	2300      	movs	r3, #0
10011b96:	4a02      	ldr	r2, [pc, #8]	; (10011ba0 <init_gattc_task_module+0xc>)
10011b98:	8013      	strh	r3, [r2, #0]
10011b9a:	4a02      	ldr	r2, [pc, #8]	; (10011ba4 <init_gattc_task_module+0x10>)
10011b9c:	8013      	strh	r3, [r2, #0]
10011b9e:	4770      	bx	lr
10011ba0:	1001a0ba 	.word	0x1001a0ba
10011ba4:	1001a0bc 	.word	0x1001a0bc

10011ba8 <gattm_add_svc_req_handler>:
10011ba8:	2200      	movs	r2, #0
10011baa:	210b      	movs	r1, #11
10011bac:	b5f0      	push	{r4, r5, r6, r7, lr}
10011bae:	1c04      	adds	r4, r0, #0
10011bb0:	7943      	ldrb	r3, [r0, #5]
10011bb2:	b085      	sub	sp, #20
10011bb4:	9301      	str	r3, [sp, #4]
10011bb6:	ab02      	add	r3, sp, #8
10011bb8:	71da      	strb	r2, [r3, #7]
10011bba:	4b37      	ldr	r3, [pc, #220]	; (10011c98 <gattm_add_svc_req_handler+0xf0>)
10011bbc:	7059      	strb	r1, [r3, #1]
10011bbe:	7099      	strb	r1, [r3, #2]
10011bc0:	4936      	ldr	r1, [pc, #216]	; (10011c9c <gattm_add_svc_req_handler+0xf4>)
10011bc2:	701a      	strb	r2, [r3, #0]
10011bc4:	8808      	ldrh	r0, [r1, #0]
10011bc6:	8809      	ldrh	r1, [r1, #0]
10011bc8:	70da      	strb	r2, [r3, #3]
10011bca:	0a09      	lsrs	r1, r1, #8
10011bcc:	7118      	strb	r0, [r3, #4]
10011bce:	7159      	strb	r1, [r3, #5]
10011bd0:	8821      	ldrh	r1, [r4, #0]
10011bd2:	7219      	strb	r1, [r3, #8]
10011bd4:	8821      	ldrh	r1, [r4, #0]
10011bd6:	0a09      	lsrs	r1, r1, #8
10011bd8:	7259      	strb	r1, [r3, #9]
10011bda:	8861      	ldrh	r1, [r4, #2]
10011bdc:	7299      	strb	r1, [r3, #10]
10011bde:	8861      	ldrh	r1, [r4, #2]
10011be0:	0a09      	lsrs	r1, r1, #8
10011be2:	72d9      	strb	r1, [r3, #11]
10011be4:	7921      	ldrb	r1, [r4, #4]
10011be6:	7319      	strb	r1, [r3, #12]
10011be8:	4669      	mov	r1, sp
10011bea:	7909      	ldrb	r1, [r1, #4]
10011bec:	7359      	strb	r1, [r3, #13]
10011bee:	18a1      	adds	r1, r4, r2
10011bf0:	7988      	ldrb	r0, [r1, #6]
10011bf2:	1899      	adds	r1, r3, r2
10011bf4:	3201      	adds	r2, #1
10011bf6:	7388      	strb	r0, [r1, #14]
10011bf8:	2a10      	cmp	r2, #16
10011bfa:	d1f8      	bne.n	10011bee <gattm_add_svc_req_handler+0x46>
10011bfc:	1c27      	adds	r7, r4, #0
10011bfe:	2300      	movs	r3, #0
10011c00:	251e      	movs	r5, #30
10011c02:	3716      	adds	r7, #22
10011c04:	9300      	str	r3, [sp, #0]
10011c06:	9b00      	ldr	r3, [sp, #0]
10011c08:	9a01      	ldr	r2, [sp, #4]
10011c0a:	4e23      	ldr	r6, [pc, #140]	; (10011c98 <gattm_add_svc_req_handler+0xf0>)
10011c0c:	4293      	cmp	r3, r2
10011c0e:	da21      	bge.n	10011c54 <gattm_add_svc_req_handler+0xac>
10011c10:	1c39      	adds	r1, r7, #0
10011c12:	1970      	adds	r0, r6, r5
10011c14:	2210      	movs	r2, #16
10011c16:	4b22      	ldr	r3, [pc, #136]	; (10011ca0 <gattm_add_svc_req_handler+0xf8>)
10011c18:	4798      	blx	r3
10011c1a:	1c2b      	adds	r3, r5, #0
10011c1c:	8a3a      	ldrh	r2, [r7, #16]
10011c1e:	3310      	adds	r3, #16
10011c20:	b29b      	uxth	r3, r3
10011c22:	54f2      	strb	r2, [r6, r3]
10011c24:	1c2b      	adds	r3, r5, #0
10011c26:	8a3a      	ldrh	r2, [r7, #16]
10011c28:	3311      	adds	r3, #17
10011c2a:	b29b      	uxth	r3, r3
10011c2c:	0a12      	lsrs	r2, r2, #8
10011c2e:	54f2      	strb	r2, [r6, r3]
10011c30:	1c2a      	adds	r2, r5, #0
10011c32:	1c2b      	adds	r3, r5, #0
10011c34:	8a79      	ldrh	r1, [r7, #18]
10011c36:	3212      	adds	r2, #18
10011c38:	b292      	uxth	r2, r2
10011c3a:	54b1      	strb	r1, [r6, r2]
10011c3c:	8a7a      	ldrh	r2, [r7, #18]
10011c3e:	3313      	adds	r3, #19
10011c40:	b29b      	uxth	r3, r3
10011c42:	0a12      	lsrs	r2, r2, #8
10011c44:	54f2      	strb	r2, [r6, r3]
10011c46:	9b00      	ldr	r3, [sp, #0]
10011c48:	3514      	adds	r5, #20
10011c4a:	3301      	adds	r3, #1
10011c4c:	b2ad      	uxth	r5, r5
10011c4e:	9300      	str	r3, [sp, #0]
10011c50:	3714      	adds	r7, #20
10011c52:	e7d8      	b.n	10011c06 <gattm_add_svc_req_handler+0x5e>
10011c54:	2114      	movs	r1, #20
10011c56:	4d13      	ldr	r5, [pc, #76]	; (10011ca4 <gattm_add_svc_req_handler+0xfc>)
10011c58:	4b13      	ldr	r3, [pc, #76]	; (10011ca8 <gattm_add_svc_req_handler+0x100>)
10011c5a:	4351      	muls	r1, r2
10011c5c:	802b      	strh	r3, [r5, #0]
10011c5e:	230b      	movs	r3, #11
10011c60:	311e      	adds	r1, #30
10011c62:	80ab      	strh	r3, [r5, #4]
10011c64:	1c0b      	adds	r3, r1, #0
10011c66:	3b08      	subs	r3, #8
10011c68:	71b3      	strb	r3, [r6, #6]
10011c6a:	121b      	asrs	r3, r3, #8
10011c6c:	71f3      	strb	r3, [r6, #7]
10011c6e:	1c30      	adds	r0, r6, #0
10011c70:	4b0e      	ldr	r3, [pc, #56]	; (10011cac <gattm_add_svc_req_handler+0x104>)
10011c72:	4798      	blx	r3
10011c74:	ab02      	add	r3, sp, #8
10011c76:	1dde      	adds	r6, r3, #7
10011c78:	1c30      	adds	r0, r6, #0
10011c7a:	4b0d      	ldr	r3, [pc, #52]	; (10011cb0 <gattm_add_svc_req_handler+0x108>)
10011c7c:	4798      	blx	r3
10011c7e:	7833      	ldrb	r3, [r6, #0]
10011c80:	20e2      	movs	r0, #226	; 0xe2
10011c82:	2b00      	cmp	r3, #0
10011c84:	d106      	bne.n	10011c94 <gattm_add_svc_req_handler+0xec>
10011c86:	68aa      	ldr	r2, [r5, #8]
10011c88:	7853      	ldrb	r3, [r2, #1]
10011c8a:	7811      	ldrb	r1, [r2, #0]
10011c8c:	021b      	lsls	r3, r3, #8
10011c8e:	430b      	orrs	r3, r1
10011c90:	8023      	strh	r3, [r4, #0]
10011c92:	7890      	ldrb	r0, [r2, #2]
10011c94:	b005      	add	sp, #20
10011c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c98:	1001b2f8 	.word	0x1001b2f8
10011c9c:	1001af88 	.word	0x1001af88
10011ca0:	10016253 	.word	0x10016253
10011ca4:	1001af7c 	.word	0x1001af7c
10011ca8:	00000b01 	.word	0x00000b01
10011cac:	100104fd 	.word	0x100104fd
10011cb0:	10010561 	.word	0x10010561

10011cb4 <gattm_add_attribute_req_handler>:
10011cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011cb6:	1c1f      	adds	r7, r3, #0
10011cb8:	4b16      	ldr	r3, [pc, #88]	; (10011d14 <gattm_add_attribute_req_handler+0x60>)
10011cba:	9100      	str	r1, [sp, #0]
10011cbc:	9201      	str	r2, [sp, #4]
10011cbe:	1c05      	adds	r5, r0, #0
10011cc0:	7946      	ldrb	r6, [r0, #5]
10011cc2:	6818      	ldr	r0, [r3, #0]
10011cc4:	2114      	movs	r1, #20
10011cc6:	4b14      	ldr	r3, [pc, #80]	; (10011d18 <gattm_add_attribute_req_handler+0x64>)
10011cc8:	382a      	subs	r0, #42	; 0x2a
10011cca:	4798      	blx	r3
10011ccc:	2311      	movs	r3, #17
10011cce:	4286      	cmp	r6, r0
10011cd0:	d21e      	bcs.n	10011d10 <gattm_add_attribute_req_handler+0x5c>
10011cd2:	2414      	movs	r4, #20
10011cd4:	4366      	muls	r6, r4
10011cd6:	19a8      	adds	r0, r5, r6
10011cd8:	2100      	movs	r1, #0
10011cda:	2210      	movs	r2, #16
10011cdc:	4b0f      	ldr	r3, [pc, #60]	; (10011d1c <gattm_add_attribute_req_handler+0x68>)
10011cde:	3016      	adds	r0, #22
10011ce0:	4798      	blx	r3
10011ce2:	7968      	ldrb	r0, [r5, #5]
10011ce4:	1c3a      	adds	r2, r7, #0
10011ce6:	4360      	muls	r0, r4
10011ce8:	1828      	adds	r0, r5, r0
10011cea:	4b0d      	ldr	r3, [pc, #52]	; (10011d20 <gattm_add_attribute_req_handler+0x6c>)
10011cec:	3016      	adds	r0, #22
10011cee:	9908      	ldr	r1, [sp, #32]
10011cf0:	4798      	blx	r3
10011cf2:	466a      	mov	r2, sp
10011cf4:	796b      	ldrb	r3, [r5, #5]
10011cf6:	8812      	ldrh	r2, [r2, #0]
10011cf8:	435c      	muls	r4, r3
10011cfa:	192c      	adds	r4, r5, r4
10011cfc:	8522      	strh	r2, [r4, #40]	; 0x28
10011cfe:	466a      	mov	r2, sp
10011d00:	8892      	ldrh	r2, [r2, #4]
10011d02:	84e2      	strh	r2, [r4, #38]	; 0x26
10011d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011d06:	8013      	strh	r3, [r2, #0]
10011d08:	796b      	ldrb	r3, [r5, #5]
10011d0a:	3301      	adds	r3, #1
10011d0c:	716b      	strb	r3, [r5, #5]
10011d0e:	2300      	movs	r3, #0
10011d10:	1c18      	adds	r0, r3, #0
10011d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011d14:	1001a030 	.word	0x1001a030
10011d18:	1001321d 	.word	0x1001321d
10011d1c:	10016265 	.word	0x10016265
10011d20:	10016253 	.word	0x10016253

10011d24 <gattm_att_set_value_req_handler>:
10011d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011d26:	466b      	mov	r3, sp
10011d28:	1dde      	adds	r6, r3, #7
10011d2a:	2300      	movs	r3, #0
10011d2c:	1c0d      	adds	r5, r1, #0
10011d2e:	210c      	movs	r1, #12
10011d30:	270b      	movs	r7, #11
10011d32:	4c17      	ldr	r4, [pc, #92]	; (10011d90 <gattm_att_set_value_req_handler+0x6c>)
10011d34:	7033      	strb	r3, [r6, #0]
10011d36:	70e3      	strb	r3, [r4, #3]
10011d38:	4b16      	ldr	r3, [pc, #88]	; (10011d94 <gattm_att_set_value_req_handler+0x70>)
10011d3a:	7021      	strb	r1, [r4, #0]
10011d3c:	8819      	ldrh	r1, [r3, #0]
10011d3e:	881b      	ldrh	r3, [r3, #0]
10011d40:	7220      	strb	r0, [r4, #8]
10011d42:	0a1b      	lsrs	r3, r3, #8
10011d44:	7163      	strb	r3, [r4, #5]
10011d46:	0a00      	lsrs	r0, r0, #8
10011d48:	0a2b      	lsrs	r3, r5, #8
10011d4a:	7121      	strb	r1, [r4, #4]
10011d4c:	7260      	strb	r0, [r4, #9]
10011d4e:	1c11      	adds	r1, r2, #0
10011d50:	72a5      	strb	r5, [r4, #10]
10011d52:	1c2a      	adds	r2, r5, #0
10011d54:	72e3      	strb	r3, [r4, #11]
10011d56:	350c      	adds	r5, #12
10011d58:	4b0f      	ldr	r3, [pc, #60]	; (10011d98 <gattm_att_set_value_req_handler+0x74>)
10011d5a:	4810      	ldr	r0, [pc, #64]	; (10011d9c <gattm_att_set_value_req_handler+0x78>)
10011d5c:	7067      	strb	r7, [r4, #1]
10011d5e:	70a7      	strb	r7, [r4, #2]
10011d60:	4798      	blx	r3
10011d62:	b2a9      	uxth	r1, r5
10011d64:	4b0e      	ldr	r3, [pc, #56]	; (10011da0 <gattm_att_set_value_req_handler+0x7c>)
10011d66:	4d0f      	ldr	r5, [pc, #60]	; (10011da4 <gattm_att_set_value_req_handler+0x80>)
10011d68:	1c20      	adds	r0, r4, #0
10011d6a:	802b      	strh	r3, [r5, #0]
10011d6c:	1c0b      	adds	r3, r1, #0
10011d6e:	3b08      	subs	r3, #8
10011d70:	71a3      	strb	r3, [r4, #6]
10011d72:	121b      	asrs	r3, r3, #8
10011d74:	71e3      	strb	r3, [r4, #7]
10011d76:	4b0c      	ldr	r3, [pc, #48]	; (10011da8 <gattm_att_set_value_req_handler+0x84>)
10011d78:	80af      	strh	r7, [r5, #4]
10011d7a:	4798      	blx	r3
10011d7c:	1c30      	adds	r0, r6, #0
10011d7e:	4b0b      	ldr	r3, [pc, #44]	; (10011dac <gattm_att_set_value_req_handler+0x88>)
10011d80:	4798      	blx	r3
10011d82:	7833      	ldrb	r3, [r6, #0]
10011d84:	20e2      	movs	r0, #226	; 0xe2
10011d86:	2b00      	cmp	r3, #0
10011d88:	d101      	bne.n	10011d8e <gattm_att_set_value_req_handler+0x6a>
10011d8a:	68ab      	ldr	r3, [r5, #8]
10011d8c:	7898      	ldrb	r0, [r3, #2]
10011d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011d90:	1001b2f8 	.word	0x1001b2f8
10011d94:	1001af88 	.word	0x1001af88
10011d98:	10016253 	.word	0x10016253
10011d9c:	1001b304 	.word	0x1001b304
10011da0:	00000b0d 	.word	0x00000b0d
10011da4:	1001af7c 	.word	0x1001af7c
10011da8:	100104fd 	.word	0x100104fd
10011dac:	10010561 	.word	0x10010561

10011db0 <gattm_att_get_value_req_handler>:
10011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011db2:	b085      	sub	sp, #20
10011db4:	9201      	str	r2, [sp, #4]
10011db6:	220a      	movs	r2, #10
10011db8:	1c04      	adds	r4, r0, #0
10011dba:	481d      	ldr	r0, [pc, #116]	; (10011e30 <gattm_att_get_value_req_handler+0x80>)
10011dbc:	ab02      	add	r3, sp, #8
10011dbe:	1dde      	adds	r6, r3, #7
10011dc0:	7002      	strb	r2, [r0, #0]
10011dc2:	2300      	movs	r3, #0
10011dc4:	220b      	movs	r2, #11
10011dc6:	4d1b      	ldr	r5, [pc, #108]	; (10011e34 <gattm_att_get_value_req_handler+0x84>)
10011dc8:	1c0f      	adds	r7, r1, #0
10011dca:	8829      	ldrh	r1, [r5, #0]
10011dcc:	882d      	ldrh	r5, [r5, #0]
10011dce:	7101      	strb	r1, [r0, #4]
10011dd0:	0a2d      	lsrs	r5, r5, #8
10011dd2:	7145      	strb	r5, [r0, #5]
10011dd4:	0a25      	lsrs	r5, r4, #8
10011dd6:	7245      	strb	r5, [r0, #9]
10011dd8:	4917      	ldr	r1, [pc, #92]	; (10011e38 <gattm_att_get_value_req_handler+0x88>)
10011dda:	4d18      	ldr	r5, [pc, #96]	; (10011e3c <gattm_att_get_value_req_handler+0x8c>)
10011ddc:	7033      	strb	r3, [r6, #0]
10011dde:	7042      	strb	r2, [r0, #1]
10011de0:	7082      	strb	r2, [r0, #2]
10011de2:	70c3      	strb	r3, [r0, #3]
10011de4:	8029      	strh	r1, [r5, #0]
10011de6:	80aa      	strh	r2, [r5, #4]
10011de8:	71c3      	strb	r3, [r0, #7]
10011dea:	3a09      	subs	r2, #9
10011dec:	210a      	movs	r1, #10
10011dee:	4b14      	ldr	r3, [pc, #80]	; (10011e40 <gattm_att_get_value_req_handler+0x90>)
10011df0:	7182      	strb	r2, [r0, #6]
10011df2:	7204      	strb	r4, [r0, #8]
10011df4:	4798      	blx	r3
10011df6:	1c30      	adds	r0, r6, #0
10011df8:	4b12      	ldr	r3, [pc, #72]	; (10011e44 <gattm_att_get_value_req_handler+0x94>)
10011dfa:	4798      	blx	r3
10011dfc:	7833      	ldrb	r3, [r6, #0]
10011dfe:	20e2      	movs	r0, #226	; 0xe2
10011e00:	2b00      	cmp	r3, #0
10011e02:	d112      	bne.n	10011e2a <gattm_att_get_value_req_handler+0x7a>
10011e04:	68a9      	ldr	r1, [r5, #8]
10011e06:	9801      	ldr	r0, [sp, #4]
10011e08:	784d      	ldrb	r5, [r1, #1]
10011e0a:	780b      	ldrb	r3, [r1, #0]
10011e0c:	78ca      	ldrb	r2, [r1, #3]
10011e0e:	022d      	lsls	r5, r5, #8
10011e10:	431d      	orrs	r5, r3
10011e12:	788b      	ldrb	r3, [r1, #2]
10011e14:	0212      	lsls	r2, r2, #8
10011e16:	431a      	orrs	r2, r3
10011e18:	803a      	strh	r2, [r7, #0]
10011e1a:	790e      	ldrb	r6, [r1, #4]
10011e1c:	4b0a      	ldr	r3, [pc, #40]	; (10011e48 <gattm_att_get_value_req_handler+0x98>)
10011e1e:	3105      	adds	r1, #5
10011e20:	4798      	blx	r3
10011e22:	20e2      	movs	r0, #226	; 0xe2
10011e24:	42ac      	cmp	r4, r5
10011e26:	d100      	bne.n	10011e2a <gattm_att_get_value_req_handler+0x7a>
10011e28:	1c30      	adds	r0, r6, #0
10011e2a:	b005      	add	sp, #20
10011e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011e2e:	46c0      	nop			; (mov r8, r8)
10011e30:	1001b2f8 	.word	0x1001b2f8
10011e34:	1001af88 	.word	0x1001af88
10011e38:	00000b0b 	.word	0x00000b0b
10011e3c:	1001af7c 	.word	0x1001af7c
10011e40:	100104fd 	.word	0x100104fd
10011e44:	10010561 	.word	0x10010561
10011e48:	10016253 	.word	0x10016253

10011e4c <htpt_enable_rsp_handler>:
10011e4c:	780b      	ldrb	r3, [r1, #0]
10011e4e:	7013      	strb	r3, [r2, #0]
10011e50:	784b      	ldrb	r3, [r1, #1]
10011e52:	7053      	strb	r3, [r2, #1]
10011e54:	4770      	bx	lr

10011e56 <htpt_temp_send_rsp_handler>:
10011e56:	780b      	ldrb	r3, [r1, #0]
10011e58:	7013      	strb	r3, [r2, #0]
10011e5a:	4770      	bx	lr

10011e5c <htpt_meas_intv_upd_rsp_handler>:
10011e5c:	780b      	ldrb	r3, [r1, #0]
10011e5e:	7013      	strb	r3, [r2, #0]
10011e60:	4770      	bx	lr

10011e62 <htpt_meas_intv_chg_req_ind_handler>:
10011e62:	78cb      	ldrb	r3, [r1, #3]
10011e64:	7889      	ldrb	r1, [r1, #2]
10011e66:	021b      	lsls	r3, r3, #8
10011e68:	430b      	orrs	r3, r1
10011e6a:	8013      	strh	r3, [r2, #0]
10011e6c:	4770      	bx	lr

10011e6e <htpt_cfg_indntf_ind_handler>:
10011e6e:	780b      	ldrb	r3, [r1, #0]
10011e70:	7013      	strb	r3, [r2, #0]
10011e72:	784b      	ldrb	r3, [r1, #1]
10011e74:	7053      	strb	r3, [r2, #1]
10011e76:	4770      	bx	lr

10011e78 <pow>:
10011e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e7a:	465f      	mov	r7, fp
10011e7c:	464d      	mov	r5, r9
10011e7e:	4656      	mov	r6, sl
10011e80:	4644      	mov	r4, r8
10011e82:	b4f0      	push	{r4, r5, r6, r7}
10011e84:	b091      	sub	sp, #68	; 0x44
10011e86:	001f      	movs	r7, r3
10011e88:	0004      	movs	r4, r0
10011e8a:	000d      	movs	r5, r1
10011e8c:	0016      	movs	r6, r2
10011e8e:	f000 fa01 	bl	10012294 <__ieee754_pow>
10011e92:	4bcf      	ldr	r3, [pc, #828]	; (100121d0 <pow+0x358>)
10011e94:	9002      	str	r0, [sp, #8]
10011e96:	9103      	str	r1, [sp, #12]
10011e98:	469b      	mov	fp, r3
10011e9a:	781b      	ldrb	r3, [r3, #0]
10011e9c:	b25b      	sxtb	r3, r3
10011e9e:	4699      	mov	r9, r3
10011ea0:	3301      	adds	r3, #1
10011ea2:	d04f      	beq.n	10011f44 <pow+0xcc>
10011ea4:	0032      	movs	r2, r6
10011ea6:	003b      	movs	r3, r7
10011ea8:	0030      	movs	r0, r6
10011eaa:	0039      	movs	r1, r7
10011eac:	f003 ffbe 	bl	10015e2c <__aeabi_dcmpun>
10011eb0:	9000      	str	r0, [sp, #0]
10011eb2:	2800      	cmp	r0, #0
10011eb4:	d146      	bne.n	10011f44 <pow+0xcc>
10011eb6:	0022      	movs	r2, r4
10011eb8:	002b      	movs	r3, r5
10011eba:	0020      	movs	r0, r4
10011ebc:	0029      	movs	r1, r5
10011ebe:	f003 ffb5 	bl	10015e2c <__aeabi_dcmpun>
10011ec2:	2200      	movs	r2, #0
10011ec4:	4682      	mov	sl, r0
10011ec6:	2800      	cmp	r0, #0
10011ec8:	d134      	bne.n	10011f34 <pow+0xbc>
10011eca:	2300      	movs	r3, #0
10011ecc:	0020      	movs	r0, r4
10011ece:	0029      	movs	r1, r5
10011ed0:	f001 fb2a 	bl	10013528 <__aeabi_dcmpeq>
10011ed4:	2800      	cmp	r0, #0
10011ed6:	d03a      	beq.n	10011f4e <pow+0xd6>
10011ed8:	2200      	movs	r2, #0
10011eda:	2300      	movs	r3, #0
10011edc:	0030      	movs	r0, r6
10011ede:	0039      	movs	r1, r7
10011ee0:	f001 fb22 	bl	10013528 <__aeabi_dcmpeq>
10011ee4:	9005      	str	r0, [sp, #20]
10011ee6:	2800      	cmp	r0, #0
10011ee8:	d100      	bne.n	10011eec <pow+0x74>
10011eea:	e074      	b.n	10011fd6 <pow+0x15e>
10011eec:	ab06      	add	r3, sp, #24
10011eee:	4698      	mov	r8, r3
10011ef0:	2301      	movs	r3, #1
10011ef2:	4642      	mov	r2, r8
10011ef4:	9306      	str	r3, [sp, #24]
10011ef6:	4bb7      	ldr	r3, [pc, #732]	; (100121d4 <pow+0x35c>)
10011ef8:	6053      	str	r3, [r2, #4]
10011efa:	4643      	mov	r3, r8
10011efc:	4652      	mov	r2, sl
10011efe:	609c      	str	r4, [r3, #8]
10011f00:	60dd      	str	r5, [r3, #12]
10011f02:	621a      	str	r2, [r3, #32]
10011f04:	611e      	str	r6, [r3, #16]
10011f06:	615f      	str	r7, [r3, #20]
10011f08:	4642      	mov	r2, r8
10011f0a:	2300      	movs	r3, #0
10011f0c:	2400      	movs	r4, #0
10011f0e:	6193      	str	r3, [r2, #24]
10011f10:	61d4      	str	r4, [r2, #28]
10011f12:	464b      	mov	r3, r9
10011f14:	2b00      	cmp	r3, #0
10011f16:	d100      	bne.n	10011f1a <pow+0xa2>
10011f18:	e094      	b.n	10012044 <pow+0x1cc>
10011f1a:	2300      	movs	r3, #0
10011f1c:	4cae      	ldr	r4, [pc, #696]	; (100121d8 <pow+0x360>)
10011f1e:	9300      	str	r3, [sp, #0]
10011f20:	9401      	str	r4, [sp, #4]
10011f22:	9800      	ldr	r0, [sp, #0]
10011f24:	9901      	ldr	r1, [sp, #4]
10011f26:	b011      	add	sp, #68	; 0x44
10011f28:	bc3c      	pop	{r2, r3, r4, r5}
10011f2a:	4690      	mov	r8, r2
10011f2c:	4699      	mov	r9, r3
10011f2e:	46a2      	mov	sl, r4
10011f30:	46ab      	mov	fp, r5
10011f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f34:	2300      	movs	r3, #0
10011f36:	0030      	movs	r0, r6
10011f38:	0039      	movs	r1, r7
10011f3a:	f001 faf5 	bl	10013528 <__aeabi_dcmpeq>
10011f3e:	2800      	cmp	r0, #0
10011f40:	d000      	beq.n	10011f44 <pow+0xcc>
10011f42:	e0eb      	b.n	1001211c <pow+0x2a4>
10011f44:	9b02      	ldr	r3, [sp, #8]
10011f46:	9c03      	ldr	r4, [sp, #12]
10011f48:	9300      	str	r3, [sp, #0]
10011f4a:	9401      	str	r4, [sp, #4]
10011f4c:	e7e9      	b.n	10011f22 <pow+0xaa>
10011f4e:	9802      	ldr	r0, [sp, #8]
10011f50:	9903      	ldr	r1, [sp, #12]
10011f52:	f001 f82b 	bl	10012fac <finite>
10011f56:	4681      	mov	r9, r0
10011f58:	2800      	cmp	r0, #0
10011f5a:	d100      	bne.n	10011f5e <pow+0xe6>
10011f5c:	e086      	b.n	1001206c <pow+0x1f4>
10011f5e:	9802      	ldr	r0, [sp, #8]
10011f60:	9903      	ldr	r1, [sp, #12]
10011f62:	2200      	movs	r2, #0
10011f64:	2300      	movs	r3, #0
10011f66:	f001 fadf 	bl	10013528 <__aeabi_dcmpeq>
10011f6a:	2800      	cmp	r0, #0
10011f6c:	d0ea      	beq.n	10011f44 <pow+0xcc>
10011f6e:	0020      	movs	r0, r4
10011f70:	0029      	movs	r1, r5
10011f72:	f001 f81b 	bl	10012fac <finite>
10011f76:	9a02      	ldr	r2, [sp, #8]
10011f78:	9b03      	ldr	r3, [sp, #12]
10011f7a:	9200      	str	r2, [sp, #0]
10011f7c:	9301      	str	r3, [sp, #4]
10011f7e:	2800      	cmp	r0, #0
10011f80:	d0cf      	beq.n	10011f22 <pow+0xaa>
10011f82:	0030      	movs	r0, r6
10011f84:	0039      	movs	r1, r7
10011f86:	f001 f811 	bl	10012fac <finite>
10011f8a:	9a02      	ldr	r2, [sp, #8]
10011f8c:	9b03      	ldr	r3, [sp, #12]
10011f8e:	9200      	str	r2, [sp, #0]
10011f90:	9301      	str	r3, [sp, #4]
10011f92:	2800      	cmp	r0, #0
10011f94:	d0c5      	beq.n	10011f22 <pow+0xaa>
10011f96:	ab06      	add	r3, sp, #24
10011f98:	4698      	mov	r8, r3
10011f9a:	2304      	movs	r3, #4
10011f9c:	4642      	mov	r2, r8
10011f9e:	9306      	str	r3, [sp, #24]
10011fa0:	4b8c      	ldr	r3, [pc, #560]	; (100121d4 <pow+0x35c>)
10011fa2:	6094      	str	r4, [r2, #8]
10011fa4:	60d5      	str	r5, [r2, #12]
10011fa6:	6053      	str	r3, [r2, #4]
10011fa8:	2300      	movs	r3, #0
10011faa:	2400      	movs	r4, #0
10011fac:	6213      	str	r3, [r2, #32]
10011fae:	2300      	movs	r3, #0
10011fb0:	6193      	str	r3, [r2, #24]
10011fb2:	61d4      	str	r4, [r2, #28]
10011fb4:	465b      	mov	r3, fp
10011fb6:	781b      	ldrb	r3, [r3, #0]
10011fb8:	6116      	str	r6, [r2, #16]
10011fba:	6157      	str	r7, [r2, #20]
10011fbc:	b25b      	sxtb	r3, r3
10011fbe:	2b02      	cmp	r3, #2
10011fc0:	d004      	beq.n	10011fcc <pow+0x154>
10011fc2:	4640      	mov	r0, r8
10011fc4:	f000 fffc 	bl	10012fc0 <matherr>
10011fc8:	2800      	cmp	r0, #0
10011fca:	d140      	bne.n	1001204e <pow+0x1d6>
10011fcc:	f004 f8fc 	bl	100161c8 <__errno>
10011fd0:	2322      	movs	r3, #34	; 0x22
10011fd2:	6003      	str	r3, [r0, #0]
10011fd4:	e03b      	b.n	1001204e <pow+0x1d6>
10011fd6:	0030      	movs	r0, r6
10011fd8:	0039      	movs	r1, r7
10011fda:	f000 ffe7 	bl	10012fac <finite>
10011fde:	9a02      	ldr	r2, [sp, #8]
10011fe0:	9b03      	ldr	r3, [sp, #12]
10011fe2:	9200      	str	r2, [sp, #0]
10011fe4:	9301      	str	r3, [sp, #4]
10011fe6:	2800      	cmp	r0, #0
10011fe8:	d09b      	beq.n	10011f22 <pow+0xaa>
10011fea:	2200      	movs	r2, #0
10011fec:	2300      	movs	r3, #0
10011fee:	0030      	movs	r0, r6
10011ff0:	0039      	movs	r1, r7
10011ff2:	f001 fa9f 	bl	10013534 <__aeabi_dcmplt>
10011ff6:	2800      	cmp	r0, #0
10011ff8:	d100      	bne.n	10011ffc <pow+0x184>
10011ffa:	e792      	b.n	10011f22 <pow+0xaa>
10011ffc:	ab06      	add	r3, sp, #24
10011ffe:	4698      	mov	r8, r3
10012000:	2301      	movs	r3, #1
10012002:	4642      	mov	r2, r8
10012004:	9306      	str	r3, [sp, #24]
10012006:	4b73      	ldr	r3, [pc, #460]	; (100121d4 <pow+0x35c>)
10012008:	6053      	str	r3, [r2, #4]
1001200a:	4643      	mov	r3, r8
1001200c:	9a05      	ldr	r2, [sp, #20]
1001200e:	609c      	str	r4, [r3, #8]
10012010:	60dd      	str	r5, [r3, #12]
10012012:	621a      	str	r2, [r3, #32]
10012014:	611e      	str	r6, [r3, #16]
10012016:	615f      	str	r7, [r3, #20]
10012018:	465b      	mov	r3, fp
1001201a:	781b      	ldrb	r3, [r3, #0]
1001201c:	b25b      	sxtb	r3, r3
1001201e:	2b00      	cmp	r3, #0
10012020:	d00b      	beq.n	1001203a <pow+0x1c2>
10012022:	2000      	movs	r0, #0
10012024:	4642      	mov	r2, r8
10012026:	496d      	ldr	r1, [pc, #436]	; (100121dc <pow+0x364>)
10012028:	6190      	str	r0, [r2, #24]
1001202a:	61d1      	str	r1, [r2, #28]
1001202c:	2b02      	cmp	r3, #2
1001202e:	d109      	bne.n	10012044 <pow+0x1cc>
10012030:	f004 f8ca 	bl	100161c8 <__errno>
10012034:	2321      	movs	r3, #33	; 0x21
10012036:	6003      	str	r3, [r0, #0]
10012038:	e009      	b.n	1001204e <pow+0x1d6>
1001203a:	4642      	mov	r2, r8
1001203c:	2300      	movs	r3, #0
1001203e:	2400      	movs	r4, #0
10012040:	6193      	str	r3, [r2, #24]
10012042:	61d4      	str	r4, [r2, #28]
10012044:	4640      	mov	r0, r8
10012046:	f000 ffbb 	bl	10012fc0 <matherr>
1001204a:	2800      	cmp	r0, #0
1001204c:	d0f0      	beq.n	10012030 <pow+0x1b8>
1001204e:	4643      	mov	r3, r8
10012050:	6a1b      	ldr	r3, [r3, #32]
10012052:	2b00      	cmp	r3, #0
10012054:	d004      	beq.n	10012060 <pow+0x1e8>
10012056:	f004 f8b7 	bl	100161c8 <__errno>
1001205a:	4643      	mov	r3, r8
1001205c:	6a1b      	ldr	r3, [r3, #32]
1001205e:	6003      	str	r3, [r0, #0]
10012060:	4643      	mov	r3, r8
10012062:	69dc      	ldr	r4, [r3, #28]
10012064:	699b      	ldr	r3, [r3, #24]
10012066:	9300      	str	r3, [sp, #0]
10012068:	9401      	str	r4, [sp, #4]
1001206a:	e75a      	b.n	10011f22 <pow+0xaa>
1001206c:	0020      	movs	r0, r4
1001206e:	0029      	movs	r1, r5
10012070:	f000 ff9c 	bl	10012fac <finite>
10012074:	2800      	cmp	r0, #0
10012076:	d100      	bne.n	1001207a <pow+0x202>
10012078:	e771      	b.n	10011f5e <pow+0xe6>
1001207a:	0030      	movs	r0, r6
1001207c:	0039      	movs	r1, r7
1001207e:	f000 ff95 	bl	10012fac <finite>
10012082:	2800      	cmp	r0, #0
10012084:	d100      	bne.n	10012088 <pow+0x210>
10012086:	e76a      	b.n	10011f5e <pow+0xe6>
10012088:	9802      	ldr	r0, [sp, #8]
1001208a:	9903      	ldr	r1, [sp, #12]
1001208c:	000b      	movs	r3, r1
1001208e:	0002      	movs	r2, r0
10012090:	f003 fecc 	bl	10015e2c <__aeabi_dcmpun>
10012094:	ab06      	add	r3, sp, #24
10012096:	4698      	mov	r8, r3
10012098:	2800      	cmp	r0, #0
1001209a:	d17a      	bne.n	10012192 <pow+0x31a>
1001209c:	2303      	movs	r3, #3
1001209e:	4642      	mov	r2, r8
100120a0:	9306      	str	r3, [sp, #24]
100120a2:	4b4c      	ldr	r3, [pc, #304]	; (100121d4 <pow+0x35c>)
100120a4:	6210      	str	r0, [r2, #32]
100120a6:	6053      	str	r3, [r2, #4]
100120a8:	465b      	mov	r3, fp
100120aa:	781b      	ldrb	r3, [r3, #0]
100120ac:	6094      	str	r4, [r2, #8]
100120ae:	60d5      	str	r5, [r2, #12]
100120b0:	b25b      	sxtb	r3, r3
100120b2:	6116      	str	r6, [r2, #16]
100120b4:	6157      	str	r7, [r2, #20]
100120b6:	4699      	mov	r9, r3
100120b8:	2b00      	cmp	r3, #0
100120ba:	d148      	bne.n	1001214e <pow+0x2d6>
100120bc:	22e0      	movs	r2, #224	; 0xe0
100120be:	4641      	mov	r1, r8
100120c0:	4b47      	ldr	r3, [pc, #284]	; (100121e0 <pow+0x368>)
100120c2:	0612      	lsls	r2, r2, #24
100120c4:	618a      	str	r2, [r1, #24]
100120c6:	61cb      	str	r3, [r1, #28]
100120c8:	0020      	movs	r0, r4
100120ca:	2200      	movs	r2, #0
100120cc:	2300      	movs	r3, #0
100120ce:	0029      	movs	r1, r5
100120d0:	f001 fa30 	bl	10013534 <__aeabi_dcmplt>
100120d4:	2800      	cmp	r0, #0
100120d6:	d100      	bne.n	100120da <pow+0x262>
100120d8:	e773      	b.n	10011fc2 <pow+0x14a>
100120da:	2200      	movs	r2, #0
100120dc:	4b41      	ldr	r3, [pc, #260]	; (100121e4 <pow+0x36c>)
100120de:	0030      	movs	r0, r6
100120e0:	0039      	movs	r1, r7
100120e2:	f003 f8d5 	bl	10015290 <__aeabi_dmul>
100120e6:	0004      	movs	r4, r0
100120e8:	000d      	movs	r5, r1
100120ea:	f000 ff71 	bl	10012fd0 <rint>
100120ee:	0002      	movs	r2, r0
100120f0:	000b      	movs	r3, r1
100120f2:	0020      	movs	r0, r4
100120f4:	0029      	movs	r1, r5
100120f6:	f001 fa17 	bl	10013528 <__aeabi_dcmpeq>
100120fa:	2800      	cmp	r0, #0
100120fc:	d105      	bne.n	1001210a <pow+0x292>
100120fe:	22e0      	movs	r2, #224	; 0xe0
10012100:	4b39      	ldr	r3, [pc, #228]	; (100121e8 <pow+0x370>)
10012102:	0612      	lsls	r2, r2, #24
10012104:	4641      	mov	r1, r8
10012106:	618a      	str	r2, [r1, #24]
10012108:	61cb      	str	r3, [r1, #28]
1001210a:	465b      	mov	r3, fp
1001210c:	781b      	ldrb	r3, [r3, #0]
1001210e:	b25b      	sxtb	r3, r3
10012110:	4699      	mov	r9, r3
10012112:	464b      	mov	r3, r9
10012114:	2b02      	cmp	r3, #2
10012116:	d000      	beq.n	1001211a <pow+0x2a2>
10012118:	e753      	b.n	10011fc2 <pow+0x14a>
1001211a:	e757      	b.n	10011fcc <pow+0x154>
1001211c:	ab06      	add	r3, sp, #24
1001211e:	4698      	mov	r8, r3
10012120:	2301      	movs	r3, #1
10012122:	4642      	mov	r2, r8
10012124:	9306      	str	r3, [sp, #24]
10012126:	4b2b      	ldr	r3, [pc, #172]	; (100121d4 <pow+0x35c>)
10012128:	6053      	str	r3, [r2, #4]
1001212a:	4643      	mov	r3, r8
1001212c:	609c      	str	r4, [r3, #8]
1001212e:	60dd      	str	r5, [r3, #12]
10012130:	2400      	movs	r4, #0
10012132:	9a00      	ldr	r2, [sp, #0]
10012134:	4d28      	ldr	r5, [pc, #160]	; (100121d8 <pow+0x360>)
10012136:	621a      	str	r2, [r3, #32]
10012138:	611e      	str	r6, [r3, #16]
1001213a:	615f      	str	r7, [r3, #20]
1001213c:	619c      	str	r4, [r3, #24]
1001213e:	61dd      	str	r5, [r3, #28]
10012140:	464b      	mov	r3, r9
10012142:	9400      	str	r4, [sp, #0]
10012144:	9501      	str	r5, [sp, #4]
10012146:	2b02      	cmp	r3, #2
10012148:	d000      	beq.n	1001214c <pow+0x2d4>
1001214a:	e77b      	b.n	10012044 <pow+0x1cc>
1001214c:	e6e9      	b.n	10011f22 <pow+0xaa>
1001214e:	2200      	movs	r2, #0
10012150:	4641      	mov	r1, r8
10012152:	4b26      	ldr	r3, [pc, #152]	; (100121ec <pow+0x374>)
10012154:	0020      	movs	r0, r4
10012156:	618a      	str	r2, [r1, #24]
10012158:	61cb      	str	r3, [r1, #28]
1001215a:	2200      	movs	r2, #0
1001215c:	2300      	movs	r3, #0
1001215e:	0029      	movs	r1, r5
10012160:	f001 f9e8 	bl	10013534 <__aeabi_dcmplt>
10012164:	2800      	cmp	r0, #0
10012166:	d0d4      	beq.n	10012112 <pow+0x29a>
10012168:	2200      	movs	r2, #0
1001216a:	4b1e      	ldr	r3, [pc, #120]	; (100121e4 <pow+0x36c>)
1001216c:	0030      	movs	r0, r6
1001216e:	0039      	movs	r1, r7
10012170:	f003 f88e 	bl	10015290 <__aeabi_dmul>
10012174:	0004      	movs	r4, r0
10012176:	000d      	movs	r5, r1
10012178:	f000 ff2a 	bl	10012fd0 <rint>
1001217c:	0002      	movs	r2, r0
1001217e:	000b      	movs	r3, r1
10012180:	0020      	movs	r0, r4
10012182:	0029      	movs	r1, r5
10012184:	f001 f9d0 	bl	10013528 <__aeabi_dcmpeq>
10012188:	2800      	cmp	r0, #0
1001218a:	d1be      	bne.n	1001210a <pow+0x292>
1001218c:	2200      	movs	r2, #0
1001218e:	4b13      	ldr	r3, [pc, #76]	; (100121dc <pow+0x364>)
10012190:	e7b8      	b.n	10012104 <pow+0x28c>
10012192:	2301      	movs	r3, #1
10012194:	4642      	mov	r2, r8
10012196:	9306      	str	r3, [sp, #24]
10012198:	4b0e      	ldr	r3, [pc, #56]	; (100121d4 <pow+0x35c>)
1001219a:	6053      	str	r3, [r2, #4]
1001219c:	4643      	mov	r3, r8
1001219e:	464a      	mov	r2, r9
100121a0:	609c      	str	r4, [r3, #8]
100121a2:	60dd      	str	r5, [r3, #12]
100121a4:	621a      	str	r2, [r3, #32]
100121a6:	611e      	str	r6, [r3, #16]
100121a8:	615f      	str	r7, [r3, #20]
100121aa:	2400      	movs	r4, #0
100121ac:	465b      	mov	r3, fp
100121ae:	571c      	ldrsb	r4, [r3, r4]
100121b0:	2c00      	cmp	r4, #0
100121b2:	d100      	bne.n	100121b6 <pow+0x33e>
100121b4:	e741      	b.n	1001203a <pow+0x1c2>
100121b6:	2300      	movs	r3, #0
100121b8:	2200      	movs	r2, #0
100121ba:	0019      	movs	r1, r3
100121bc:	0010      	movs	r0, r2
100121be:	f002 fc43 	bl	10014a48 <__aeabi_ddiv>
100121c2:	4643      	mov	r3, r8
100121c4:	6198      	str	r0, [r3, #24]
100121c6:	61d9      	str	r1, [r3, #28]
100121c8:	2c02      	cmp	r4, #2
100121ca:	d100      	bne.n	100121ce <pow+0x356>
100121cc:	e730      	b.n	10012030 <pow+0x1b8>
100121ce:	e739      	b.n	10012044 <pow+0x1cc>
100121d0:	1001859c 	.word	0x1001859c
100121d4:	10018378 	.word	0x10018378
100121d8:	3ff00000 	.word	0x3ff00000
100121dc:	fff00000 	.word	0xfff00000
100121e0:	47efffff 	.word	0x47efffff
100121e4:	3fe00000 	.word	0x3fe00000
100121e8:	c7efffff 	.word	0xc7efffff
100121ec:	7ff00000 	.word	0x7ff00000

100121f0 <sqrtf>:
100121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100121f2:	2600      	movs	r6, #0
100121f4:	b08d      	sub	sp, #52	; 0x34
100121f6:	1c04      	adds	r4, r0, #0
100121f8:	f000 fe78 	bl	10012eec <__ieee754_sqrtf>
100121fc:	4b23      	ldr	r3, [pc, #140]	; (1001228c <sqrtf+0x9c>)
100121fe:	1c05      	adds	r5, r0, #0
10012200:	579e      	ldrsb	r6, [r3, r6]
10012202:	1c73      	adds	r3, r6, #1
10012204:	d00b      	beq.n	1001221e <sqrtf+0x2e>
10012206:	1c21      	adds	r1, r4, #0
10012208:	1c20      	adds	r0, r4, #0
1001220a:	f002 f831 	bl	10014270 <__aeabi_fcmpun>
1001220e:	1e07      	subs	r7, r0, #0
10012210:	d105      	bne.n	1001221e <sqrtf+0x2e>
10012212:	2100      	movs	r1, #0
10012214:	1c20      	adds	r0, r4, #0
10012216:	f001 f9c7 	bl	100135a8 <__aeabi_fcmplt>
1001221a:	2800      	cmp	r0, #0
1001221c:	d102      	bne.n	10012224 <sqrtf+0x34>
1001221e:	1c28      	adds	r0, r5, #0
10012220:	b00d      	add	sp, #52	; 0x34
10012222:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012224:	2301      	movs	r3, #1
10012226:	9302      	str	r3, [sp, #8]
10012228:	4b19      	ldr	r3, [pc, #100]	; (10012290 <sqrtf+0xa0>)
1001222a:	1c20      	adds	r0, r4, #0
1001222c:	9303      	str	r3, [sp, #12]
1001222e:	970a      	str	r7, [sp, #40]	; 0x28
10012230:	f003 fecc 	bl	10015fcc <__aeabi_f2d>
10012234:	2200      	movs	r2, #0
10012236:	9006      	str	r0, [sp, #24]
10012238:	9107      	str	r1, [sp, #28]
1001223a:	9004      	str	r0, [sp, #16]
1001223c:	9105      	str	r1, [sp, #20]
1001223e:	2300      	movs	r3, #0
10012240:	2e00      	cmp	r6, #0
10012242:	d014      	beq.n	1001226e <sqrtf+0x7e>
10012244:	0010      	movs	r0, r2
10012246:	0019      	movs	r1, r3
10012248:	f002 fbfe 	bl	10014a48 <__aeabi_ddiv>
1001224c:	9008      	str	r0, [sp, #32]
1001224e:	9109      	str	r1, [sp, #36]	; 0x24
10012250:	2e02      	cmp	r6, #2
10012252:	d10e      	bne.n	10012272 <sqrtf+0x82>
10012254:	f003 ffb8 	bl	100161c8 <__errno>
10012258:	2321      	movs	r3, #33	; 0x21
1001225a:	6003      	str	r3, [r0, #0]
1001225c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001225e:	9301      	str	r3, [sp, #4]
10012260:	2b00      	cmp	r3, #0
10012262:	d10c      	bne.n	1001227e <sqrtf+0x8e>
10012264:	9808      	ldr	r0, [sp, #32]
10012266:	9909      	ldr	r1, [sp, #36]	; 0x24
10012268:	f003 ff04 	bl	10016074 <__aeabi_d2f>
1001226c:	e7d8      	b.n	10012220 <sqrtf+0x30>
1001226e:	9208      	str	r2, [sp, #32]
10012270:	9309      	str	r3, [sp, #36]	; 0x24
10012272:	a802      	add	r0, sp, #8
10012274:	f000 fea4 	bl	10012fc0 <matherr>
10012278:	2800      	cmp	r0, #0
1001227a:	d1ef      	bne.n	1001225c <sqrtf+0x6c>
1001227c:	e7ea      	b.n	10012254 <sqrtf+0x64>
1001227e:	f003 ffa3 	bl	100161c8 <__errno>
10012282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012284:	9301      	str	r3, [sp, #4]
10012286:	6003      	str	r3, [r0, #0]
10012288:	e7ec      	b.n	10012264 <sqrtf+0x74>
1001228a:	46c0      	nop			; (mov r8, r8)
1001228c:	1001859c 	.word	0x1001859c
10012290:	1001837c 	.word	0x1001837c

10012294 <__ieee754_pow>:
10012294:	b5f0      	push	{r4, r5, r6, r7, lr}
10012296:	4656      	mov	r6, sl
10012298:	464d      	mov	r5, r9
1001229a:	4644      	mov	r4, r8
1001229c:	465f      	mov	r7, fp
1001229e:	b4f0      	push	{r4, r5, r6, r7}
100122a0:	001c      	movs	r4, r3
100122a2:	0013      	movs	r3, r2
100122a4:	0067      	lsls	r7, r4, #1
100122a6:	b091      	sub	sp, #68	; 0x44
100122a8:	087f      	lsrs	r7, r7, #1
100122aa:	9300      	str	r3, [sp, #0]
100122ac:	9401      	str	r4, [sp, #4]
100122ae:	0006      	movs	r6, r0
100122b0:	000d      	movs	r5, r1
100122b2:	4680      	mov	r8, r0
100122b4:	4689      	mov	r9, r1
100122b6:	46a2      	mov	sl, r4
100122b8:	433b      	orrs	r3, r7
100122ba:	d032      	beq.n	10012322 <__ieee754_pow+0x8e>
100122bc:	4b6e      	ldr	r3, [pc, #440]	; (10012478 <__ieee754_pow+0x1e4>)
100122be:	006c      	lsls	r4, r5, #1
100122c0:	0864      	lsrs	r4, r4, #1
100122c2:	429c      	cmp	r4, r3
100122c4:	dc29      	bgt.n	1001231a <__ieee754_pow+0x86>
100122c6:	d026      	beq.n	10012316 <__ieee754_pow+0x82>
100122c8:	429f      	cmp	r7, r3
100122ca:	dc26      	bgt.n	1001231a <__ieee754_pow+0x86>
100122cc:	4b6a      	ldr	r3, [pc, #424]	; (10012478 <__ieee754_pow+0x1e4>)
100122ce:	429f      	cmp	r7, r3
100122d0:	d100      	bne.n	100122d4 <__ieee754_pow+0x40>
100122d2:	e089      	b.n	100123e8 <__ieee754_pow+0x154>
100122d4:	2300      	movs	r3, #0
100122d6:	469b      	mov	fp, r3
100122d8:	464b      	mov	r3, r9
100122da:	2b00      	cmp	r3, #0
100122dc:	da00      	bge.n	100122e0 <__ieee754_pow+0x4c>
100122de:	e087      	b.n	100123f0 <__ieee754_pow+0x15c>
100122e0:	2a00      	cmp	r2, #0
100122e2:	d12f      	bne.n	10012344 <__ieee754_pow+0xb0>
100122e4:	4b64      	ldr	r3, [pc, #400]	; (10012478 <__ieee754_pow+0x1e4>)
100122e6:	429f      	cmp	r7, r3
100122e8:	d100      	bne.n	100122ec <__ieee754_pow+0x58>
100122ea:	e09f      	b.n	1001242c <__ieee754_pow+0x198>
100122ec:	4b63      	ldr	r3, [pc, #396]	; (1001247c <__ieee754_pow+0x1e8>)
100122ee:	429f      	cmp	r7, r3
100122f0:	d05d      	beq.n	100123ae <__ieee754_pow+0x11a>
100122f2:	2380      	movs	r3, #128	; 0x80
100122f4:	05db      	lsls	r3, r3, #23
100122f6:	459a      	cmp	sl, r3
100122f8:	d101      	bne.n	100122fe <__ieee754_pow+0x6a>
100122fa:	f000 fbc1 	bl	10012a80 <__ieee754_pow+0x7ec>
100122fe:	4b60      	ldr	r3, [pc, #384]	; (10012480 <__ieee754_pow+0x1ec>)
10012300:	459a      	cmp	sl, r3
10012302:	d11f      	bne.n	10012344 <__ieee754_pow+0xb0>
10012304:	464b      	mov	r3, r9
10012306:	2b00      	cmp	r3, #0
10012308:	db1c      	blt.n	10012344 <__ieee754_pow+0xb0>
1001230a:	0030      	movs	r0, r6
1001230c:	0029      	movs	r1, r5
1001230e:	f000 fcf7 	bl	10012d00 <__ieee754_sqrt>
10012312:	0006      	movs	r6, r0
10012314:	e007      	b.n	10012326 <__ieee754_pow+0x92>
10012316:	2800      	cmp	r0, #0
10012318:	d00d      	beq.n	10012336 <__ieee754_pow+0xa2>
1001231a:	4b5a      	ldr	r3, [pc, #360]	; (10012484 <__ieee754_pow+0x1f0>)
1001231c:	18e0      	adds	r0, r4, r3
1001231e:	4330      	orrs	r0, r6
10012320:	d10b      	bne.n	1001233a <__ieee754_pow+0xa6>
10012322:	2600      	movs	r6, #0
10012324:	4955      	ldr	r1, [pc, #340]	; (1001247c <__ieee754_pow+0x1e8>)
10012326:	0030      	movs	r0, r6
10012328:	b011      	add	sp, #68	; 0x44
1001232a:	bc3c      	pop	{r2, r3, r4, r5}
1001232c:	4690      	mov	r8, r2
1001232e:	4699      	mov	r9, r3
10012330:	46a2      	mov	sl, r4
10012332:	46ab      	mov	fp, r5
10012334:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012336:	42a7      	cmp	r7, r4
10012338:	ddc8      	ble.n	100122cc <__ieee754_pow+0x38>
1001233a:	4853      	ldr	r0, [pc, #332]	; (10012488 <__ieee754_pow+0x1f4>)
1001233c:	f000 fe42 	bl	10012fc4 <nan>
10012340:	0006      	movs	r6, r0
10012342:	e7f0      	b.n	10012326 <__ieee754_pow+0x92>
10012344:	0030      	movs	r0, r6
10012346:	0029      	movs	r1, r5
10012348:	f000 fe2c 	bl	10012fa4 <fabs>
1001234c:	4643      	mov	r3, r8
1001234e:	2b00      	cmp	r3, #0
10012350:	d01d      	beq.n	1001238e <__ieee754_pow+0xfa>
10012352:	0feb      	lsrs	r3, r5, #31
10012354:	3b01      	subs	r3, #1
10012356:	4698      	mov	r8, r3
10012358:	465b      	mov	r3, fp
1001235a:	4642      	mov	r2, r8
1001235c:	4313      	orrs	r3, r2
1001235e:	d079      	beq.n	10012454 <__ieee754_pow+0x1c0>
10012360:	4b4a      	ldr	r3, [pc, #296]	; (1001248c <__ieee754_pow+0x1f8>)
10012362:	429f      	cmp	r7, r3
10012364:	dc00      	bgt.n	10012368 <__ieee754_pow+0xd4>
10012366:	e09f      	b.n	100124a8 <__ieee754_pow+0x214>
10012368:	4b49      	ldr	r3, [pc, #292]	; (10012490 <__ieee754_pow+0x1fc>)
1001236a:	429f      	cmp	r7, r3
1001236c:	dc01      	bgt.n	10012372 <__ieee754_pow+0xde>
1001236e:	f000 fbce 	bl	10012b0e <__ieee754_pow+0x87a>
10012372:	4b48      	ldr	r3, [pc, #288]	; (10012494 <__ieee754_pow+0x200>)
10012374:	429c      	cmp	r4, r3
10012376:	dd79      	ble.n	1001246c <__ieee754_pow+0x1d8>
10012378:	4653      	mov	r3, sl
1001237a:	2b00      	cmp	r3, #0
1001237c:	dd79      	ble.n	10012472 <__ieee754_pow+0x1de>
1001237e:	4a46      	ldr	r2, [pc, #280]	; (10012498 <__ieee754_pow+0x204>)
10012380:	4b46      	ldr	r3, [pc, #280]	; (1001249c <__ieee754_pow+0x208>)
10012382:	0010      	movs	r0, r2
10012384:	0019      	movs	r1, r3
10012386:	f002 ff83 	bl	10015290 <__aeabi_dmul>
1001238a:	0006      	movs	r6, r0
1001238c:	e7cb      	b.n	10012326 <__ieee754_pow+0x92>
1001238e:	2c00      	cmp	r4, #0
10012390:	d004      	beq.n	1001239c <__ieee754_pow+0x108>
10012392:	4a3a      	ldr	r2, [pc, #232]	; (1001247c <__ieee754_pow+0x1e8>)
10012394:	00ab      	lsls	r3, r5, #2
10012396:	089b      	lsrs	r3, r3, #2
10012398:	4293      	cmp	r3, r2
1001239a:	d1da      	bne.n	10012352 <__ieee754_pow+0xbe>
1001239c:	4653      	mov	r3, sl
1001239e:	2b00      	cmp	r3, #0
100123a0:	da00      	bge.n	100123a4 <__ieee754_pow+0x110>
100123a2:	e3ad      	b.n	10012b00 <__ieee754_pow+0x86c>
100123a4:	464b      	mov	r3, r9
100123a6:	2b00      	cmp	r3, #0
100123a8:	db0d      	blt.n	100123c6 <__ieee754_pow+0x132>
100123aa:	0006      	movs	r6, r0
100123ac:	e7bb      	b.n	10012326 <__ieee754_pow+0x92>
100123ae:	4653      	mov	r3, sl
100123b0:	0029      	movs	r1, r5
100123b2:	2b00      	cmp	r3, #0
100123b4:	dab7      	bge.n	10012326 <__ieee754_pow+0x92>
100123b6:	0032      	movs	r2, r6
100123b8:	002b      	movs	r3, r5
100123ba:	2000      	movs	r0, #0
100123bc:	492f      	ldr	r1, [pc, #188]	; (1001247c <__ieee754_pow+0x1e8>)
100123be:	f002 fb43 	bl	10014a48 <__aeabi_ddiv>
100123c2:	0006      	movs	r6, r0
100123c4:	e7af      	b.n	10012326 <__ieee754_pow+0x92>
100123c6:	4b2f      	ldr	r3, [pc, #188]	; (10012484 <__ieee754_pow+0x1f0>)
100123c8:	469c      	mov	ip, r3
100123ca:	465b      	mov	r3, fp
100123cc:	4464      	add	r4, ip
100123ce:	431c      	orrs	r4, r3
100123d0:	d101      	bne.n	100123d6 <__ieee754_pow+0x142>
100123d2:	f000 fc2b 	bl	10012c2c <__ieee754_pow+0x998>
100123d6:	465b      	mov	r3, fp
100123d8:	0006      	movs	r6, r0
100123da:	2b01      	cmp	r3, #1
100123dc:	d1a3      	bne.n	10012326 <__ieee754_pow+0x92>
100123de:	2380      	movs	r3, #128	; 0x80
100123e0:	061b      	lsls	r3, r3, #24
100123e2:	469c      	mov	ip, r3
100123e4:	4461      	add	r1, ip
100123e6:	e79e      	b.n	10012326 <__ieee754_pow+0x92>
100123e8:	2a00      	cmp	r2, #0
100123ea:	d100      	bne.n	100123ee <__ieee754_pow+0x15a>
100123ec:	e772      	b.n	100122d4 <__ieee754_pow+0x40>
100123ee:	e794      	b.n	1001231a <__ieee754_pow+0x86>
100123f0:	4b2b      	ldr	r3, [pc, #172]	; (100124a0 <__ieee754_pow+0x20c>)
100123f2:	429f      	cmp	r7, r3
100123f4:	dc2b      	bgt.n	1001244e <__ieee754_pow+0x1ba>
100123f6:	4b27      	ldr	r3, [pc, #156]	; (10012494 <__ieee754_pow+0x200>)
100123f8:	429f      	cmp	r7, r3
100123fa:	dc00      	bgt.n	100123fe <__ieee754_pow+0x16a>
100123fc:	e770      	b.n	100122e0 <__ieee754_pow+0x4c>
100123fe:	4929      	ldr	r1, [pc, #164]	; (100124a4 <__ieee754_pow+0x210>)
10012400:	153b      	asrs	r3, r7, #20
10012402:	468c      	mov	ip, r1
10012404:	4463      	add	r3, ip
10012406:	2b14      	cmp	r3, #20
10012408:	dc01      	bgt.n	1001240e <__ieee754_pow+0x17a>
1001240a:	f000 fbf2 	bl	10012bf2 <__ieee754_pow+0x95e>
1001240e:	2134      	movs	r1, #52	; 0x34
10012410:	1acb      	subs	r3, r1, r3
10012412:	9900      	ldr	r1, [sp, #0]
10012414:	40d9      	lsrs	r1, r3
10012416:	0008      	movs	r0, r1
10012418:	4098      	lsls	r0, r3
1001241a:	4282      	cmp	r2, r0
1001241c:	d000      	beq.n	10012420 <__ieee754_pow+0x18c>
1001241e:	e75f      	b.n	100122e0 <__ieee754_pow+0x4c>
10012420:	2301      	movs	r3, #1
10012422:	4019      	ands	r1, r3
10012424:	3301      	adds	r3, #1
10012426:	1a5b      	subs	r3, r3, r1
10012428:	469b      	mov	fp, r3
1001242a:	e759      	b.n	100122e0 <__ieee754_pow+0x4c>
1001242c:	4b15      	ldr	r3, [pc, #84]	; (10012484 <__ieee754_pow+0x1f0>)
1001242e:	18e0      	adds	r0, r4, r3
10012430:	4306      	orrs	r6, r0
10012432:	d100      	bne.n	10012436 <__ieee754_pow+0x1a2>
10012434:	e775      	b.n	10012322 <__ieee754_pow+0x8e>
10012436:	4b17      	ldr	r3, [pc, #92]	; (10012494 <__ieee754_pow+0x200>)
10012438:	429c      	cmp	r4, r3
1001243a:	dc00      	bgt.n	1001243e <__ieee754_pow+0x1aa>
1001243c:	e351      	b.n	10012ae2 <__ieee754_pow+0x84e>
1001243e:	4653      	mov	r3, sl
10012440:	2b00      	cmp	r3, #0
10012442:	db16      	blt.n	10012472 <__ieee754_pow+0x1de>
10012444:	9b00      	ldr	r3, [sp, #0]
10012446:	9c01      	ldr	r4, [sp, #4]
10012448:	001e      	movs	r6, r3
1001244a:	0021      	movs	r1, r4
1001244c:	e76b      	b.n	10012326 <__ieee754_pow+0x92>
1001244e:	2302      	movs	r3, #2
10012450:	469b      	mov	fp, r3
10012452:	e745      	b.n	100122e0 <__ieee754_pow+0x4c>
10012454:	0032      	movs	r2, r6
10012456:	002b      	movs	r3, r5
10012458:	0030      	movs	r0, r6
1001245a:	0029      	movs	r1, r5
1001245c:	f003 f992 	bl	10015784 <__aeabi_dsub>
10012460:	0002      	movs	r2, r0
10012462:	000b      	movs	r3, r1
10012464:	f002 faf0 	bl	10014a48 <__aeabi_ddiv>
10012468:	0006      	movs	r6, r0
1001246a:	e75c      	b.n	10012326 <__ieee754_pow+0x92>
1001246c:	4653      	mov	r3, sl
1001246e:	2b00      	cmp	r3, #0
10012470:	db85      	blt.n	1001237e <__ieee754_pow+0xea>
10012472:	2600      	movs	r6, #0
10012474:	2100      	movs	r1, #0
10012476:	e756      	b.n	10012326 <__ieee754_pow+0x92>
10012478:	7ff00000 	.word	0x7ff00000
1001247c:	3ff00000 	.word	0x3ff00000
10012480:	3fe00000 	.word	0x3fe00000
10012484:	c0100000 	.word	0xc0100000
10012488:	10018290 	.word	0x10018290
1001248c:	41e00000 	.word	0x41e00000
10012490:	43f00000 	.word	0x43f00000
10012494:	3fefffff 	.word	0x3fefffff
10012498:	8800759c 	.word	0x8800759c
1001249c:	7e37e43c 	.word	0x7e37e43c
100124a0:	433fffff 	.word	0x433fffff
100124a4:	fffffc01 	.word	0xfffffc01
100124a8:	4be8      	ldr	r3, [pc, #928]	; (1001284c <__ieee754_pow+0x5b8>)
100124aa:	2200      	movs	r2, #0
100124ac:	429c      	cmp	r4, r3
100124ae:	dc06      	bgt.n	100124be <__ieee754_pow+0x22a>
100124b0:	2200      	movs	r2, #0
100124b2:	4be7      	ldr	r3, [pc, #924]	; (10012850 <__ieee754_pow+0x5bc>)
100124b4:	f002 feec 	bl	10015290 <__aeabi_dmul>
100124b8:	2235      	movs	r2, #53	; 0x35
100124ba:	000c      	movs	r4, r1
100124bc:	4252      	negs	r2, r2
100124be:	4de5      	ldr	r5, [pc, #916]	; (10012854 <__ieee754_pow+0x5c0>)
100124c0:	1523      	asrs	r3, r4, #20
100124c2:	46ac      	mov	ip, r5
100124c4:	4463      	add	r3, ip
100124c6:	4699      	mov	r9, r3
100124c8:	0324      	lsls	r4, r4, #12
100124ca:	4de3      	ldr	r5, [pc, #908]	; (10012858 <__ieee754_pow+0x5c4>)
100124cc:	4be3      	ldr	r3, [pc, #908]	; (1001285c <__ieee754_pow+0x5c8>)
100124ce:	0b24      	lsrs	r4, r4, #12
100124d0:	4491      	add	r9, r2
100124d2:	4325      	orrs	r5, r4
100124d4:	429c      	cmp	r4, r3
100124d6:	dd09      	ble.n	100124ec <__ieee754_pow+0x258>
100124d8:	4be1      	ldr	r3, [pc, #900]	; (10012860 <__ieee754_pow+0x5cc>)
100124da:	429c      	cmp	r4, r3
100124dc:	dc00      	bgt.n	100124e0 <__ieee754_pow+0x24c>
100124de:	e3a9      	b.n	10012c34 <__ieee754_pow+0x9a0>
100124e0:	2301      	movs	r3, #1
100124e2:	469c      	mov	ip, r3
100124e4:	4bdf      	ldr	r3, [pc, #892]	; (10012864 <__ieee754_pow+0x5d0>)
100124e6:	44e1      	add	r9, ip
100124e8:	469c      	mov	ip, r3
100124ea:	4465      	add	r5, ip
100124ec:	2300      	movs	r3, #0
100124ee:	2400      	movs	r4, #0
100124f0:	2200      	movs	r2, #0
100124f2:	9308      	str	r3, [sp, #32]
100124f4:	9409      	str	r4, [sp, #36]	; 0x24
100124f6:	930c      	str	r3, [sp, #48]	; 0x30
100124f8:	940d      	str	r4, [sp, #52]	; 0x34
100124fa:	2400      	movs	r4, #0
100124fc:	4bd6      	ldr	r3, [pc, #856]	; (10012858 <__ieee754_pow+0x5c4>)
100124fe:	9206      	str	r2, [sp, #24]
10012500:	9307      	str	r3, [sp, #28]
10012502:	9a06      	ldr	r2, [sp, #24]
10012504:	9b07      	ldr	r3, [sp, #28]
10012506:	0029      	movs	r1, r5
10012508:	900a      	str	r0, [sp, #40]	; 0x28
1001250a:	910b      	str	r1, [sp, #44]	; 0x2c
1001250c:	f003 f93a 	bl	10015784 <__aeabi_dsub>
10012510:	9a06      	ldr	r2, [sp, #24]
10012512:	9b07      	ldr	r3, [sp, #28]
10012514:	0006      	movs	r6, r0
10012516:	000f      	movs	r7, r1
10012518:	980a      	ldr	r0, [sp, #40]	; 0x28
1001251a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1001251c:	f001 ff68 	bl	100143f0 <__aeabi_dadd>
10012520:	0002      	movs	r2, r0
10012522:	000b      	movs	r3, r1
10012524:	2000      	movs	r0, #0
10012526:	49cc      	ldr	r1, [pc, #816]	; (10012858 <__ieee754_pow+0x5c4>)
10012528:	f002 fa8e 	bl	10014a48 <__aeabi_ddiv>
1001252c:	000a      	movs	r2, r1
1001252e:	0001      	movs	r1, r0
10012530:	0013      	movs	r3, r2
10012532:	910e      	str	r1, [sp, #56]	; 0x38
10012534:	920f      	str	r2, [sp, #60]	; 0x3c
10012536:	0002      	movs	r2, r0
10012538:	0039      	movs	r1, r7
1001253a:	0030      	movs	r0, r6
1001253c:	f002 fea8 	bl	10015290 <__aeabi_dmul>
10012540:	000a      	movs	r2, r1
10012542:	0001      	movs	r1, r0
10012544:	2080      	movs	r0, #128	; 0x80
10012546:	9104      	str	r1, [sp, #16]
10012548:	9205      	str	r2, [sp, #20]
1001254a:	0013      	movs	r3, r2
1001254c:	2200      	movs	r2, #0
1001254e:	2180      	movs	r1, #128	; 0x80
10012550:	0300      	lsls	r0, r0, #12
10012552:	4684      	mov	ip, r0
10012554:	9202      	str	r2, [sp, #8]
10012556:	9303      	str	r3, [sp, #12]
10012558:	2200      	movs	r2, #0
1001255a:	0589      	lsls	r1, r1, #22
1001255c:	106d      	asrs	r5, r5, #1
1001255e:	430d      	orrs	r5, r1
10012560:	4465      	add	r5, ip
10012562:	192b      	adds	r3, r5, r4
10012564:	9802      	ldr	r0, [sp, #8]
10012566:	9903      	ldr	r1, [sp, #12]
10012568:	0014      	movs	r4, r2
1001256a:	001d      	movs	r5, r3
1001256c:	f002 fe90 	bl	10015290 <__aeabi_dmul>
10012570:	0002      	movs	r2, r0
10012572:	000b      	movs	r3, r1
10012574:	0030      	movs	r0, r6
10012576:	0039      	movs	r1, r7
10012578:	f003 f904 	bl	10015784 <__aeabi_dsub>
1001257c:	9a06      	ldr	r2, [sp, #24]
1001257e:	9b07      	ldr	r3, [sp, #28]
10012580:	0006      	movs	r6, r0
10012582:	000f      	movs	r7, r1
10012584:	0020      	movs	r0, r4
10012586:	0029      	movs	r1, r5
10012588:	f003 f8fc 	bl	10015784 <__aeabi_dsub>
1001258c:	0002      	movs	r2, r0
1001258e:	000b      	movs	r3, r1
10012590:	980a      	ldr	r0, [sp, #40]	; 0x28
10012592:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012594:	f003 f8f6 	bl	10015784 <__aeabi_dsub>
10012598:	9a02      	ldr	r2, [sp, #8]
1001259a:	9b03      	ldr	r3, [sp, #12]
1001259c:	f002 fe78 	bl	10015290 <__aeabi_dmul>
100125a0:	0002      	movs	r2, r0
100125a2:	000b      	movs	r3, r1
100125a4:	0030      	movs	r0, r6
100125a6:	0039      	movs	r1, r7
100125a8:	f003 f8ec 	bl	10015784 <__aeabi_dsub>
100125ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100125ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100125b0:	f002 fe6e 	bl	10015290 <__aeabi_dmul>
100125b4:	9d04      	ldr	r5, [sp, #16]
100125b6:	9e05      	ldr	r6, [sp, #20]
100125b8:	9006      	str	r0, [sp, #24]
100125ba:	9107      	str	r1, [sp, #28]
100125bc:	002a      	movs	r2, r5
100125be:	0033      	movs	r3, r6
100125c0:	0028      	movs	r0, r5
100125c2:	0031      	movs	r1, r6
100125c4:	f002 fe64 	bl	10015290 <__aeabi_dmul>
100125c8:	0006      	movs	r6, r0
100125ca:	000f      	movs	r7, r1
100125cc:	4aa6      	ldr	r2, [pc, #664]	; (10012868 <__ieee754_pow+0x5d4>)
100125ce:	4ba7      	ldr	r3, [pc, #668]	; (1001286c <__ieee754_pow+0x5d8>)
100125d0:	f002 fe5e 	bl	10015290 <__aeabi_dmul>
100125d4:	4aa6      	ldr	r2, [pc, #664]	; (10012870 <__ieee754_pow+0x5dc>)
100125d6:	4ba7      	ldr	r3, [pc, #668]	; (10012874 <__ieee754_pow+0x5e0>)
100125d8:	f001 ff0a 	bl	100143f0 <__aeabi_dadd>
100125dc:	0032      	movs	r2, r6
100125de:	003b      	movs	r3, r7
100125e0:	f002 fe56 	bl	10015290 <__aeabi_dmul>
100125e4:	4aa4      	ldr	r2, [pc, #656]	; (10012878 <__ieee754_pow+0x5e4>)
100125e6:	4ba5      	ldr	r3, [pc, #660]	; (1001287c <__ieee754_pow+0x5e8>)
100125e8:	f001 ff02 	bl	100143f0 <__aeabi_dadd>
100125ec:	0032      	movs	r2, r6
100125ee:	003b      	movs	r3, r7
100125f0:	f002 fe4e 	bl	10015290 <__aeabi_dmul>
100125f4:	4aa2      	ldr	r2, [pc, #648]	; (10012880 <__ieee754_pow+0x5ec>)
100125f6:	4ba3      	ldr	r3, [pc, #652]	; (10012884 <__ieee754_pow+0x5f0>)
100125f8:	f001 fefa 	bl	100143f0 <__aeabi_dadd>
100125fc:	0032      	movs	r2, r6
100125fe:	003b      	movs	r3, r7
10012600:	f002 fe46 	bl	10015290 <__aeabi_dmul>
10012604:	4aa0      	ldr	r2, [pc, #640]	; (10012888 <__ieee754_pow+0x5f4>)
10012606:	4ba1      	ldr	r3, [pc, #644]	; (1001288c <__ieee754_pow+0x5f8>)
10012608:	f001 fef2 	bl	100143f0 <__aeabi_dadd>
1001260c:	0032      	movs	r2, r6
1001260e:	003b      	movs	r3, r7
10012610:	f002 fe3e 	bl	10015290 <__aeabi_dmul>
10012614:	4a9e      	ldr	r2, [pc, #632]	; (10012890 <__ieee754_pow+0x5fc>)
10012616:	4b9f      	ldr	r3, [pc, #636]	; (10012894 <__ieee754_pow+0x600>)
10012618:	f001 feea 	bl	100143f0 <__aeabi_dadd>
1001261c:	0032      	movs	r2, r6
1001261e:	0004      	movs	r4, r0
10012620:	000d      	movs	r5, r1
10012622:	003b      	movs	r3, r7
10012624:	0030      	movs	r0, r6
10012626:	0039      	movs	r1, r7
10012628:	f002 fe32 	bl	10015290 <__aeabi_dmul>
1001262c:	0002      	movs	r2, r0
1001262e:	000b      	movs	r3, r1
10012630:	0020      	movs	r0, r4
10012632:	0029      	movs	r1, r5
10012634:	f002 fe2c 	bl	10015290 <__aeabi_dmul>
10012638:	9e02      	ldr	r6, [sp, #8]
1001263a:	9f03      	ldr	r7, [sp, #12]
1001263c:	0004      	movs	r4, r0
1001263e:	000d      	movs	r5, r1
10012640:	9804      	ldr	r0, [sp, #16]
10012642:	9905      	ldr	r1, [sp, #20]
10012644:	0032      	movs	r2, r6
10012646:	003b      	movs	r3, r7
10012648:	f001 fed2 	bl	100143f0 <__aeabi_dadd>
1001264c:	9a06      	ldr	r2, [sp, #24]
1001264e:	9b07      	ldr	r3, [sp, #28]
10012650:	f002 fe1e 	bl	10015290 <__aeabi_dmul>
10012654:	0022      	movs	r2, r4
10012656:	002b      	movs	r3, r5
10012658:	f001 feca 	bl	100143f0 <__aeabi_dadd>
1001265c:	0032      	movs	r2, r6
1001265e:	900a      	str	r0, [sp, #40]	; 0x28
10012660:	910b      	str	r1, [sp, #44]	; 0x2c
10012662:	003b      	movs	r3, r7
10012664:	0030      	movs	r0, r6
10012666:	0039      	movs	r1, r7
10012668:	9602      	str	r6, [sp, #8]
1001266a:	9703      	str	r7, [sp, #12]
1001266c:	f002 fe10 	bl	10015290 <__aeabi_dmul>
10012670:	2200      	movs	r2, #0
10012672:	4b89      	ldr	r3, [pc, #548]	; (10012898 <__ieee754_pow+0x604>)
10012674:	0004      	movs	r4, r0
10012676:	000d      	movs	r5, r1
10012678:	f001 feba 	bl	100143f0 <__aeabi_dadd>
1001267c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001267e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012680:	f001 feb6 	bl	100143f0 <__aeabi_dadd>
10012684:	2600      	movs	r6, #0
10012686:	000f      	movs	r7, r1
10012688:	0032      	movs	r2, r6
1001268a:	000b      	movs	r3, r1
1001268c:	9802      	ldr	r0, [sp, #8]
1001268e:	9903      	ldr	r1, [sp, #12]
10012690:	f002 fdfe 	bl	10015290 <__aeabi_dmul>
10012694:	2200      	movs	r2, #0
10012696:	9002      	str	r0, [sp, #8]
10012698:	9103      	str	r1, [sp, #12]
1001269a:	4b7f      	ldr	r3, [pc, #508]	; (10012898 <__ieee754_pow+0x604>)
1001269c:	0030      	movs	r0, r6
1001269e:	0039      	movs	r1, r7
100126a0:	f003 f870 	bl	10015784 <__aeabi_dsub>
100126a4:	0022      	movs	r2, r4
100126a6:	002b      	movs	r3, r5
100126a8:	f003 f86c 	bl	10015784 <__aeabi_dsub>
100126ac:	0002      	movs	r2, r0
100126ae:	000b      	movs	r3, r1
100126b0:	980a      	ldr	r0, [sp, #40]	; 0x28
100126b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
100126b4:	f003 f866 	bl	10015784 <__aeabi_dsub>
100126b8:	9a04      	ldr	r2, [sp, #16]
100126ba:	9b05      	ldr	r3, [sp, #20]
100126bc:	f002 fde8 	bl	10015290 <__aeabi_dmul>
100126c0:	0032      	movs	r2, r6
100126c2:	0004      	movs	r4, r0
100126c4:	000d      	movs	r5, r1
100126c6:	9806      	ldr	r0, [sp, #24]
100126c8:	9907      	ldr	r1, [sp, #28]
100126ca:	003b      	movs	r3, r7
100126cc:	f002 fde0 	bl	10015290 <__aeabi_dmul>
100126d0:	0002      	movs	r2, r0
100126d2:	000b      	movs	r3, r1
100126d4:	0020      	movs	r0, r4
100126d6:	0029      	movs	r1, r5
100126d8:	f001 fe8a 	bl	100143f0 <__aeabi_dadd>
100126dc:	0004      	movs	r4, r0
100126de:	000d      	movs	r5, r1
100126e0:	0002      	movs	r2, r0
100126e2:	000b      	movs	r3, r1
100126e4:	9802      	ldr	r0, [sp, #8]
100126e6:	9903      	ldr	r1, [sp, #12]
100126e8:	f001 fe82 	bl	100143f0 <__aeabi_dadd>
100126ec:	2600      	movs	r6, #0
100126ee:	22e0      	movs	r2, #224	; 0xe0
100126f0:	4b6a      	ldr	r3, [pc, #424]	; (1001289c <__ieee754_pow+0x608>)
100126f2:	0612      	lsls	r2, r2, #24
100126f4:	0030      	movs	r0, r6
100126f6:	000f      	movs	r7, r1
100126f8:	f002 fdca 	bl	10015290 <__aeabi_dmul>
100126fc:	9a02      	ldr	r2, [sp, #8]
100126fe:	9b03      	ldr	r3, [sp, #12]
10012700:	9004      	str	r0, [sp, #16]
10012702:	9105      	str	r1, [sp, #20]
10012704:	0030      	movs	r0, r6
10012706:	0039      	movs	r1, r7
10012708:	f003 f83c 	bl	10015784 <__aeabi_dsub>
1001270c:	0002      	movs	r2, r0
1001270e:	000b      	movs	r3, r1
10012710:	0020      	movs	r0, r4
10012712:	0029      	movs	r1, r5
10012714:	f003 f836 	bl	10015784 <__aeabi_dsub>
10012718:	4a61      	ldr	r2, [pc, #388]	; (100128a0 <__ieee754_pow+0x60c>)
1001271a:	4b60      	ldr	r3, [pc, #384]	; (1001289c <__ieee754_pow+0x608>)
1001271c:	f002 fdb8 	bl	10015290 <__aeabi_dmul>
10012720:	4a60      	ldr	r2, [pc, #384]	; (100128a4 <__ieee754_pow+0x610>)
10012722:	0004      	movs	r4, r0
10012724:	000d      	movs	r5, r1
10012726:	4b60      	ldr	r3, [pc, #384]	; (100128a8 <__ieee754_pow+0x614>)
10012728:	0030      	movs	r0, r6
1001272a:	0039      	movs	r1, r7
1001272c:	f002 fdb0 	bl	10015290 <__aeabi_dmul>
10012730:	0002      	movs	r2, r0
10012732:	000b      	movs	r3, r1
10012734:	0020      	movs	r0, r4
10012736:	0029      	movs	r1, r5
10012738:	f001 fe5a 	bl	100143f0 <__aeabi_dadd>
1001273c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001273e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012740:	f001 fe56 	bl	100143f0 <__aeabi_dadd>
10012744:	0006      	movs	r6, r0
10012746:	4648      	mov	r0, r9
10012748:	000f      	movs	r7, r1
1001274a:	f003 fbc5 	bl	10015ed8 <__aeabi_i2d>
1001274e:	0004      	movs	r4, r0
10012750:	000d      	movs	r5, r1
10012752:	9804      	ldr	r0, [sp, #16]
10012754:	9905      	ldr	r1, [sp, #20]
10012756:	0032      	movs	r2, r6
10012758:	003b      	movs	r3, r7
1001275a:	f001 fe49 	bl	100143f0 <__aeabi_dadd>
1001275e:	9a08      	ldr	r2, [sp, #32]
10012760:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012762:	f001 fe45 	bl	100143f0 <__aeabi_dadd>
10012766:	0022      	movs	r2, r4
10012768:	002b      	movs	r3, r5
1001276a:	f001 fe41 	bl	100143f0 <__aeabi_dadd>
1001276e:	2000      	movs	r0, #0
10012770:	0022      	movs	r2, r4
10012772:	002b      	movs	r3, r5
10012774:	9002      	str	r0, [sp, #8]
10012776:	9103      	str	r1, [sp, #12]
10012778:	f003 f804 	bl	10015784 <__aeabi_dsub>
1001277c:	9a08      	ldr	r2, [sp, #32]
1001277e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012780:	f003 f800 	bl	10015784 <__aeabi_dsub>
10012784:	9a04      	ldr	r2, [sp, #16]
10012786:	9b05      	ldr	r3, [sp, #20]
10012788:	f002 fffc 	bl	10015784 <__aeabi_dsub>
1001278c:	0002      	movs	r2, r0
1001278e:	000b      	movs	r3, r1
10012790:	0030      	movs	r0, r6
10012792:	0039      	movs	r1, r7
10012794:	f002 fff6 	bl	10015784 <__aeabi_dsub>
10012798:	9004      	str	r0, [sp, #16]
1001279a:	9105      	str	r1, [sp, #20]
1001279c:	465b      	mov	r3, fp
1001279e:	4642      	mov	r2, r8
100127a0:	3b01      	subs	r3, #1
100127a2:	4313      	orrs	r3, r2
100127a4:	d100      	bne.n	100127a8 <__ieee754_pow+0x514>
100127a6:	e197      	b.n	10012ad8 <__ieee754_pow+0x844>
100127a8:	2300      	movs	r3, #0
100127aa:	4c2b      	ldr	r4, [pc, #172]	; (10012858 <__ieee754_pow+0x5c4>)
100127ac:	9306      	str	r3, [sp, #24]
100127ae:	9407      	str	r4, [sp, #28]
100127b0:	9800      	ldr	r0, [sp, #0]
100127b2:	9901      	ldr	r1, [sp, #4]
100127b4:	2600      	movs	r6, #0
100127b6:	000b      	movs	r3, r1
100127b8:	0032      	movs	r2, r6
100127ba:	000f      	movs	r7, r1
100127bc:	f002 ffe2 	bl	10015784 <__aeabi_dsub>
100127c0:	9a02      	ldr	r2, [sp, #8]
100127c2:	9b03      	ldr	r3, [sp, #12]
100127c4:	f002 fd64 	bl	10015290 <__aeabi_dmul>
100127c8:	9a00      	ldr	r2, [sp, #0]
100127ca:	9b01      	ldr	r3, [sp, #4]
100127cc:	0004      	movs	r4, r0
100127ce:	000d      	movs	r5, r1
100127d0:	9804      	ldr	r0, [sp, #16]
100127d2:	9905      	ldr	r1, [sp, #20]
100127d4:	f002 fd5c 	bl	10015290 <__aeabi_dmul>
100127d8:	0002      	movs	r2, r0
100127da:	000b      	movs	r3, r1
100127dc:	0020      	movs	r0, r4
100127de:	0029      	movs	r1, r5
100127e0:	f001 fe06 	bl	100143f0 <__aeabi_dadd>
100127e4:	0004      	movs	r4, r0
100127e6:	000d      	movs	r5, r1
100127e8:	9802      	ldr	r0, [sp, #8]
100127ea:	9903      	ldr	r1, [sp, #12]
100127ec:	003b      	movs	r3, r7
100127ee:	0032      	movs	r2, r6
100127f0:	9404      	str	r4, [sp, #16]
100127f2:	9505      	str	r5, [sp, #20]
100127f4:	f002 fd4c 	bl	10015290 <__aeabi_dmul>
100127f8:	9000      	str	r0, [sp, #0]
100127fa:	9101      	str	r1, [sp, #4]
100127fc:	000b      	movs	r3, r1
100127fe:	0002      	movs	r2, r0
10012800:	0029      	movs	r1, r5
10012802:	0020      	movs	r0, r4
10012804:	f001 fdf4 	bl	100143f0 <__aeabi_dadd>
10012808:	4b28      	ldr	r3, [pc, #160]	; (100128ac <__ieee754_pow+0x618>)
1001280a:	4681      	mov	r9, r0
1001280c:	1e0f      	subs	r7, r1, #0
1001280e:	468a      	mov	sl, r1
10012810:	429f      	cmp	r7, r3
10012812:	dc00      	bgt.n	10012816 <__ieee754_pow+0x582>
10012814:	e13c      	b.n	10012a90 <__ieee754_pow+0x7fc>
10012816:	4b26      	ldr	r3, [pc, #152]	; (100128b0 <__ieee754_pow+0x61c>)
10012818:	18cb      	adds	r3, r1, r3
1001281a:	4303      	orrs	r3, r0
1001281c:	d000      	beq.n	10012820 <__ieee754_pow+0x58c>
1001281e:	e1db      	b.n	10012bd8 <__ieee754_pow+0x944>
10012820:	9804      	ldr	r0, [sp, #16]
10012822:	9905      	ldr	r1, [sp, #20]
10012824:	4a23      	ldr	r2, [pc, #140]	; (100128b4 <__ieee754_pow+0x620>)
10012826:	4b24      	ldr	r3, [pc, #144]	; (100128b8 <__ieee754_pow+0x624>)
10012828:	f001 fde2 	bl	100143f0 <__aeabi_dadd>
1001282c:	9a00      	ldr	r2, [sp, #0]
1001282e:	9b01      	ldr	r3, [sp, #4]
10012830:	0004      	movs	r4, r0
10012832:	000d      	movs	r5, r1
10012834:	4648      	mov	r0, r9
10012836:	0039      	movs	r1, r7
10012838:	f002 ffa4 	bl	10015784 <__aeabi_dsub>
1001283c:	0002      	movs	r2, r0
1001283e:	000b      	movs	r3, r1
10012840:	0020      	movs	r0, r4
10012842:	0029      	movs	r1, r5
10012844:	f000 fe8a 	bl	1001355c <__aeabi_dcmpgt>
10012848:	003e      	movs	r6, r7
1001284a:	e037      	b.n	100128bc <__ieee754_pow+0x628>
1001284c:	000fffff 	.word	0x000fffff
10012850:	43400000 	.word	0x43400000
10012854:	fffffc01 	.word	0xfffffc01
10012858:	3ff00000 	.word	0x3ff00000
1001285c:	0003988e 	.word	0x0003988e
10012860:	000bb679 	.word	0x000bb679
10012864:	fff00000 	.word	0xfff00000
10012868:	4a454eef 	.word	0x4a454eef
1001286c:	3fca7e28 	.word	0x3fca7e28
10012870:	93c9db65 	.word	0x93c9db65
10012874:	3fcd864a 	.word	0x3fcd864a
10012878:	a91d4101 	.word	0xa91d4101
1001287c:	3fd17460 	.word	0x3fd17460
10012880:	518f264d 	.word	0x518f264d
10012884:	3fd55555 	.word	0x3fd55555
10012888:	db6fabff 	.word	0xdb6fabff
1001288c:	3fdb6db6 	.word	0x3fdb6db6
10012890:	33333303 	.word	0x33333303
10012894:	3fe33333 	.word	0x3fe33333
10012898:	40080000 	.word	0x40080000
1001289c:	3feec709 	.word	0x3feec709
100128a0:	dc3a03fd 	.word	0xdc3a03fd
100128a4:	145b01f5 	.word	0x145b01f5
100128a8:	be3e2fe0 	.word	0xbe3e2fe0
100128ac:	408fffff 	.word	0x408fffff
100128b0:	bf700000 	.word	0xbf700000
100128b4:	652b82fe 	.word	0x652b82fe
100128b8:	3c971547 	.word	0x3c971547
100128bc:	2800      	cmp	r0, #0
100128be:	d000      	beq.n	100128c2 <__ieee754_pow+0x62e>
100128c0:	e18a      	b.n	10012bd8 <__ieee754_pow+0x944>
100128c2:	2280      	movs	r2, #128	; 0x80
100128c4:	4be7      	ldr	r3, [pc, #924]	; (10012c64 <__ieee754_pow+0x9d0>)
100128c6:	0352      	lsls	r2, r2, #13
100128c8:	469c      	mov	ip, r3
100128ca:	0013      	movs	r3, r2
100128cc:	1536      	asrs	r6, r6, #20
100128ce:	4466      	add	r6, ip
100128d0:	4133      	asrs	r3, r6
100128d2:	49e5      	ldr	r1, [pc, #916]	; (10012c68 <__ieee754_pow+0x9d4>)
100128d4:	19db      	adds	r3, r3, r7
100128d6:	005e      	lsls	r6, r3, #1
100128d8:	001c      	movs	r4, r3
100128da:	031b      	lsls	r3, r3, #12
100128dc:	468c      	mov	ip, r1
100128de:	0b1b      	lsrs	r3, r3, #12
100128e0:	4313      	orrs	r3, r2
100128e2:	2214      	movs	r2, #20
100128e4:	0d76      	lsrs	r6, r6, #21
100128e6:	4fe1      	ldr	r7, [pc, #900]	; (10012c6c <__ieee754_pow+0x9d8>)
100128e8:	4466      	add	r6, ip
100128ea:	4137      	asrs	r7, r6
100128ec:	1b96      	subs	r6, r2, r6
100128ee:	4133      	asrs	r3, r6
100128f0:	4698      	mov	r8, r3
100128f2:	4653      	mov	r3, sl
100128f4:	43bc      	bics	r4, r7
100128f6:	2000      	movs	r0, #0
100128f8:	0021      	movs	r1, r4
100128fa:	2b00      	cmp	r3, #0
100128fc:	da00      	bge.n	10012900 <__ieee754_pow+0x66c>
100128fe:	e1a9      	b.n	10012c54 <__ieee754_pow+0x9c0>
10012900:	0002      	movs	r2, r0
10012902:	000b      	movs	r3, r1
10012904:	9800      	ldr	r0, [sp, #0]
10012906:	9901      	ldr	r1, [sp, #4]
10012908:	f002 ff3c 	bl	10015784 <__aeabi_dsub>
1001290c:	000b      	movs	r3, r1
1001290e:	9000      	str	r0, [sp, #0]
10012910:	9101      	str	r1, [sp, #4]
10012912:	0002      	movs	r2, r0
10012914:	9804      	ldr	r0, [sp, #16]
10012916:	9905      	ldr	r1, [sp, #20]
10012918:	f001 fd6a 	bl	100143f0 <__aeabi_dadd>
1001291c:	4643      	mov	r3, r8
1001291e:	051b      	lsls	r3, r3, #20
10012920:	4699      	mov	r9, r3
10012922:	2000      	movs	r0, #0
10012924:	2200      	movs	r2, #0
10012926:	4bd2      	ldr	r3, [pc, #840]	; (10012c70 <__ieee754_pow+0x9dc>)
10012928:	0006      	movs	r6, r0
1001292a:	000f      	movs	r7, r1
1001292c:	f002 fcb0 	bl	10015290 <__aeabi_dmul>
10012930:	9a00      	ldr	r2, [sp, #0]
10012932:	9b01      	ldr	r3, [sp, #4]
10012934:	9002      	str	r0, [sp, #8]
10012936:	9103      	str	r1, [sp, #12]
10012938:	0030      	movs	r0, r6
1001293a:	0039      	movs	r1, r7
1001293c:	f002 ff22 	bl	10015784 <__aeabi_dsub>
10012940:	0002      	movs	r2, r0
10012942:	000b      	movs	r3, r1
10012944:	9804      	ldr	r0, [sp, #16]
10012946:	9905      	ldr	r1, [sp, #20]
10012948:	f002 ff1c 	bl	10015784 <__aeabi_dsub>
1001294c:	4ac9      	ldr	r2, [pc, #804]	; (10012c74 <__ieee754_pow+0x9e0>)
1001294e:	4bca      	ldr	r3, [pc, #808]	; (10012c78 <__ieee754_pow+0x9e4>)
10012950:	f002 fc9e 	bl	10015290 <__aeabi_dmul>
10012954:	4ac9      	ldr	r2, [pc, #804]	; (10012c7c <__ieee754_pow+0x9e8>)
10012956:	0004      	movs	r4, r0
10012958:	000d      	movs	r5, r1
1001295a:	4bc9      	ldr	r3, [pc, #804]	; (10012c80 <__ieee754_pow+0x9ec>)
1001295c:	0030      	movs	r0, r6
1001295e:	0039      	movs	r1, r7
10012960:	f002 fc96 	bl	10015290 <__aeabi_dmul>
10012964:	0002      	movs	r2, r0
10012966:	000b      	movs	r3, r1
10012968:	0020      	movs	r0, r4
1001296a:	0029      	movs	r1, r5
1001296c:	f001 fd40 	bl	100143f0 <__aeabi_dadd>
10012970:	0004      	movs	r4, r0
10012972:	000d      	movs	r5, r1
10012974:	0002      	movs	r2, r0
10012976:	000b      	movs	r3, r1
10012978:	9802      	ldr	r0, [sp, #8]
1001297a:	9903      	ldr	r1, [sp, #12]
1001297c:	f001 fd38 	bl	100143f0 <__aeabi_dadd>
10012980:	9a02      	ldr	r2, [sp, #8]
10012982:	9b03      	ldr	r3, [sp, #12]
10012984:	0006      	movs	r6, r0
10012986:	000f      	movs	r7, r1
10012988:	f002 fefc 	bl	10015784 <__aeabi_dsub>
1001298c:	0002      	movs	r2, r0
1001298e:	000b      	movs	r3, r1
10012990:	0020      	movs	r0, r4
10012992:	0029      	movs	r1, r5
10012994:	f002 fef6 	bl	10015784 <__aeabi_dsub>
10012998:	0032      	movs	r2, r6
1001299a:	9000      	str	r0, [sp, #0]
1001299c:	9101      	str	r1, [sp, #4]
1001299e:	003b      	movs	r3, r7
100129a0:	0030      	movs	r0, r6
100129a2:	0039      	movs	r1, r7
100129a4:	f002 fc74 	bl	10015290 <__aeabi_dmul>
100129a8:	0004      	movs	r4, r0
100129aa:	000d      	movs	r5, r1
100129ac:	4ab5      	ldr	r2, [pc, #724]	; (10012c84 <__ieee754_pow+0x9f0>)
100129ae:	4bb6      	ldr	r3, [pc, #728]	; (10012c88 <__ieee754_pow+0x9f4>)
100129b0:	f002 fc6e 	bl	10015290 <__aeabi_dmul>
100129b4:	4ab5      	ldr	r2, [pc, #724]	; (10012c8c <__ieee754_pow+0x9f8>)
100129b6:	4bb6      	ldr	r3, [pc, #728]	; (10012c90 <__ieee754_pow+0x9fc>)
100129b8:	f002 fee4 	bl	10015784 <__aeabi_dsub>
100129bc:	0022      	movs	r2, r4
100129be:	002b      	movs	r3, r5
100129c0:	f002 fc66 	bl	10015290 <__aeabi_dmul>
100129c4:	4ab3      	ldr	r2, [pc, #716]	; (10012c94 <__ieee754_pow+0xa00>)
100129c6:	4bb4      	ldr	r3, [pc, #720]	; (10012c98 <__ieee754_pow+0xa04>)
100129c8:	f001 fd12 	bl	100143f0 <__aeabi_dadd>
100129cc:	0022      	movs	r2, r4
100129ce:	002b      	movs	r3, r5
100129d0:	f002 fc5e 	bl	10015290 <__aeabi_dmul>
100129d4:	4ab1      	ldr	r2, [pc, #708]	; (10012c9c <__ieee754_pow+0xa08>)
100129d6:	4bb2      	ldr	r3, [pc, #712]	; (10012ca0 <__ieee754_pow+0xa0c>)
100129d8:	f002 fed4 	bl	10015784 <__aeabi_dsub>
100129dc:	0022      	movs	r2, r4
100129de:	002b      	movs	r3, r5
100129e0:	f002 fc56 	bl	10015290 <__aeabi_dmul>
100129e4:	4aaf      	ldr	r2, [pc, #700]	; (10012ca4 <__ieee754_pow+0xa10>)
100129e6:	4bb0      	ldr	r3, [pc, #704]	; (10012ca8 <__ieee754_pow+0xa14>)
100129e8:	f001 fd02 	bl	100143f0 <__aeabi_dadd>
100129ec:	0022      	movs	r2, r4
100129ee:	002b      	movs	r3, r5
100129f0:	f002 fc4e 	bl	10015290 <__aeabi_dmul>
100129f4:	0002      	movs	r2, r0
100129f6:	000b      	movs	r3, r1
100129f8:	0030      	movs	r0, r6
100129fa:	0039      	movs	r1, r7
100129fc:	f002 fec2 	bl	10015784 <__aeabi_dsub>
10012a00:	0004      	movs	r4, r0
10012a02:	000d      	movs	r5, r1
10012a04:	0002      	movs	r2, r0
10012a06:	000b      	movs	r3, r1
10012a08:	0030      	movs	r0, r6
10012a0a:	0039      	movs	r1, r7
10012a0c:	f002 fc40 	bl	10015290 <__aeabi_dmul>
10012a10:	2380      	movs	r3, #128	; 0x80
10012a12:	9002      	str	r0, [sp, #8]
10012a14:	9103      	str	r1, [sp, #12]
10012a16:	2200      	movs	r2, #0
10012a18:	05db      	lsls	r3, r3, #23
10012a1a:	0020      	movs	r0, r4
10012a1c:	0029      	movs	r1, r5
10012a1e:	f002 feb1 	bl	10015784 <__aeabi_dsub>
10012a22:	0002      	movs	r2, r0
10012a24:	000b      	movs	r3, r1
10012a26:	9802      	ldr	r0, [sp, #8]
10012a28:	9903      	ldr	r1, [sp, #12]
10012a2a:	f002 f80d 	bl	10014a48 <__aeabi_ddiv>
10012a2e:	9a00      	ldr	r2, [sp, #0]
10012a30:	9b01      	ldr	r3, [sp, #4]
10012a32:	0004      	movs	r4, r0
10012a34:	000d      	movs	r5, r1
10012a36:	0030      	movs	r0, r6
10012a38:	0039      	movs	r1, r7
10012a3a:	f002 fc29 	bl	10015290 <__aeabi_dmul>
10012a3e:	9a00      	ldr	r2, [sp, #0]
10012a40:	9b01      	ldr	r3, [sp, #4]
10012a42:	f001 fcd5 	bl	100143f0 <__aeabi_dadd>
10012a46:	0002      	movs	r2, r0
10012a48:	000b      	movs	r3, r1
10012a4a:	0020      	movs	r0, r4
10012a4c:	0029      	movs	r1, r5
10012a4e:	f002 fe99 	bl	10015784 <__aeabi_dsub>
10012a52:	0032      	movs	r2, r6
10012a54:	003b      	movs	r3, r7
10012a56:	f002 fe95 	bl	10015784 <__aeabi_dsub>
10012a5a:	0002      	movs	r2, r0
10012a5c:	000b      	movs	r3, r1
10012a5e:	2000      	movs	r0, #0
10012a60:	4992      	ldr	r1, [pc, #584]	; (10012cac <__ieee754_pow+0xa18>)
10012a62:	f002 fe8f 	bl	10015784 <__aeabi_dsub>
10012a66:	464b      	mov	r3, r9
10012a68:	185b      	adds	r3, r3, r1
10012a6a:	151a      	asrs	r2, r3, #20
10012a6c:	2a00      	cmp	r2, #0
10012a6e:	dc00      	bgt.n	10012a72 <__ieee754_pow+0x7de>
10012a70:	e0f4      	b.n	10012c5c <__ieee754_pow+0x9c8>
10012a72:	0019      	movs	r1, r3
10012a74:	9a06      	ldr	r2, [sp, #24]
10012a76:	9b07      	ldr	r3, [sp, #28]
10012a78:	f002 fc0a 	bl	10015290 <__aeabi_dmul>
10012a7c:	0006      	movs	r6, r0
10012a7e:	e452      	b.n	10012326 <__ieee754_pow+0x92>
10012a80:	0032      	movs	r2, r6
10012a82:	0030      	movs	r0, r6
10012a84:	002b      	movs	r3, r5
10012a86:	0029      	movs	r1, r5
10012a88:	f002 fc02 	bl	10015290 <__aeabi_dmul>
10012a8c:	0006      	movs	r6, r0
10012a8e:	e44a      	b.n	10012326 <__ieee754_pow+0x92>
10012a90:	4b87      	ldr	r3, [pc, #540]	; (10012cb0 <__ieee754_pow+0xa1c>)
10012a92:	004e      	lsls	r6, r1, #1
10012a94:	0876      	lsrs	r6, r6, #1
10012a96:	429e      	cmp	r6, r3
10012a98:	dc00      	bgt.n	10012a9c <__ieee754_pow+0x808>
10012a9a:	e0bf      	b.n	10012c1c <__ieee754_pow+0x988>
10012a9c:	4b85      	ldr	r3, [pc, #532]	; (10012cb4 <__ieee754_pow+0xa20>)
10012a9e:	18cb      	adds	r3, r1, r3
10012aa0:	4303      	orrs	r3, r0
10012aa2:	d10c      	bne.n	10012abe <__ieee754_pow+0x82a>
10012aa4:	9a00      	ldr	r2, [sp, #0]
10012aa6:	9b01      	ldr	r3, [sp, #4]
10012aa8:	f002 fe6c 	bl	10015784 <__aeabi_dsub>
10012aac:	0002      	movs	r2, r0
10012aae:	000b      	movs	r3, r1
10012ab0:	9804      	ldr	r0, [sp, #16]
10012ab2:	9905      	ldr	r1, [sp, #20]
10012ab4:	f000 fd48 	bl	10013548 <__aeabi_dcmple>
10012ab8:	2800      	cmp	r0, #0
10012aba:	d100      	bne.n	10012abe <__ieee754_pow+0x82a>
10012abc:	e701      	b.n	100128c2 <__ieee754_pow+0x62e>
10012abe:	9806      	ldr	r0, [sp, #24]
10012ac0:	9907      	ldr	r1, [sp, #28]
10012ac2:	4a7d      	ldr	r2, [pc, #500]	; (10012cb8 <__ieee754_pow+0xa24>)
10012ac4:	4b7d      	ldr	r3, [pc, #500]	; (10012cbc <__ieee754_pow+0xa28>)
10012ac6:	f002 fbe3 	bl	10015290 <__aeabi_dmul>
10012aca:	4a7b      	ldr	r2, [pc, #492]	; (10012cb8 <__ieee754_pow+0xa24>)
10012acc:	4b7b      	ldr	r3, [pc, #492]	; (10012cbc <__ieee754_pow+0xa28>)
10012ace:	f002 fbdf 	bl	10015290 <__aeabi_dmul>
10012ad2:	0006      	movs	r6, r0
10012ad4:	f7ff fc27 	bl	10012326 <__ieee754_pow+0x92>
10012ad8:	2300      	movs	r3, #0
10012ada:	4c79      	ldr	r4, [pc, #484]	; (10012cc0 <__ieee754_pow+0xa2c>)
10012adc:	9306      	str	r3, [sp, #24]
10012ade:	9407      	str	r4, [sp, #28]
10012ae0:	e666      	b.n	100127b0 <__ieee754_pow+0x51c>
10012ae2:	4653      	mov	r3, sl
10012ae4:	2b00      	cmp	r3, #0
10012ae6:	db00      	blt.n	10012aea <__ieee754_pow+0x856>
10012ae8:	e4c3      	b.n	10012472 <__ieee754_pow+0x1de>
10012aea:	9b00      	ldr	r3, [sp, #0]
10012aec:	9c01      	ldr	r4, [sp, #4]
10012aee:	2280      	movs	r2, #128	; 0x80
10012af0:	0612      	lsls	r2, r2, #24
10012af2:	001e      	movs	r6, r3
10012af4:	4694      	mov	ip, r2
10012af6:	0023      	movs	r3, r4
10012af8:	4463      	add	r3, ip
10012afa:	0019      	movs	r1, r3
10012afc:	f7ff fc13 	bl	10012326 <__ieee754_pow+0x92>
10012b00:	0002      	movs	r2, r0
10012b02:	000b      	movs	r3, r1
10012b04:	2000      	movs	r0, #0
10012b06:	4969      	ldr	r1, [pc, #420]	; (10012cac <__ieee754_pow+0xa18>)
10012b08:	f001 ff9e 	bl	10014a48 <__aeabi_ddiv>
10012b0c:	e44a      	b.n	100123a4 <__ieee754_pow+0x110>
10012b0e:	4b6d      	ldr	r3, [pc, #436]	; (10012cc4 <__ieee754_pow+0xa30>)
10012b10:	429c      	cmp	r4, r3
10012b12:	dc00      	bgt.n	10012b16 <__ieee754_pow+0x882>
10012b14:	e4aa      	b.n	1001246c <__ieee754_pow+0x1d8>
10012b16:	4b65      	ldr	r3, [pc, #404]	; (10012cac <__ieee754_pow+0xa18>)
10012b18:	429c      	cmp	r4, r3
10012b1a:	dd01      	ble.n	10012b20 <__ieee754_pow+0x88c>
10012b1c:	f7ff fc2c 	bl	10012378 <__ieee754_pow+0xe4>
10012b20:	2200      	movs	r2, #0
10012b22:	4b62      	ldr	r3, [pc, #392]	; (10012cac <__ieee754_pow+0xa18>)
10012b24:	f002 fe2e 	bl	10015784 <__aeabi_dsub>
10012b28:	22c0      	movs	r2, #192	; 0xc0
10012b2a:	4b67      	ldr	r3, [pc, #412]	; (10012cc8 <__ieee754_pow+0xa34>)
10012b2c:	05d2      	lsls	r2, r2, #23
10012b2e:	0004      	movs	r4, r0
10012b30:	000d      	movs	r5, r1
10012b32:	f002 fbad 	bl	10015290 <__aeabi_dmul>
10012b36:	4a65      	ldr	r2, [pc, #404]	; (10012ccc <__ieee754_pow+0xa38>)
10012b38:	0006      	movs	r6, r0
10012b3a:	000f      	movs	r7, r1
10012b3c:	4b64      	ldr	r3, [pc, #400]	; (10012cd0 <__ieee754_pow+0xa3c>)
10012b3e:	0020      	movs	r0, r4
10012b40:	0029      	movs	r1, r5
10012b42:	f002 fba5 	bl	10015290 <__aeabi_dmul>
10012b46:	2200      	movs	r2, #0
10012b48:	9002      	str	r0, [sp, #8]
10012b4a:	9103      	str	r1, [sp, #12]
10012b4c:	4b61      	ldr	r3, [pc, #388]	; (10012cd4 <__ieee754_pow+0xa40>)
10012b4e:	0020      	movs	r0, r4
10012b50:	0029      	movs	r1, r5
10012b52:	f002 fb9d 	bl	10015290 <__aeabi_dmul>
10012b56:	0002      	movs	r2, r0
10012b58:	000b      	movs	r3, r1
10012b5a:	485f      	ldr	r0, [pc, #380]	; (10012cd8 <__ieee754_pow+0xa44>)
10012b5c:	495f      	ldr	r1, [pc, #380]	; (10012cdc <__ieee754_pow+0xa48>)
10012b5e:	f002 fe11 	bl	10015784 <__aeabi_dsub>
10012b62:	0022      	movs	r2, r4
10012b64:	002b      	movs	r3, r5
10012b66:	f002 fb93 	bl	10015290 <__aeabi_dmul>
10012b6a:	0002      	movs	r2, r0
10012b6c:	000b      	movs	r3, r1
10012b6e:	2000      	movs	r0, #0
10012b70:	495b      	ldr	r1, [pc, #364]	; (10012ce0 <__ieee754_pow+0xa4c>)
10012b72:	f002 fe07 	bl	10015784 <__aeabi_dsub>
10012b76:	0022      	movs	r2, r4
10012b78:	9004      	str	r0, [sp, #16]
10012b7a:	9105      	str	r1, [sp, #20]
10012b7c:	002b      	movs	r3, r5
10012b7e:	0020      	movs	r0, r4
10012b80:	0029      	movs	r1, r5
10012b82:	f002 fb85 	bl	10015290 <__aeabi_dmul>
10012b86:	0002      	movs	r2, r0
10012b88:	000b      	movs	r3, r1
10012b8a:	9804      	ldr	r0, [sp, #16]
10012b8c:	9905      	ldr	r1, [sp, #20]
10012b8e:	f002 fb7f 	bl	10015290 <__aeabi_dmul>
10012b92:	4a54      	ldr	r2, [pc, #336]	; (10012ce4 <__ieee754_pow+0xa50>)
10012b94:	4b4c      	ldr	r3, [pc, #304]	; (10012cc8 <__ieee754_pow+0xa34>)
10012b96:	f002 fb7b 	bl	10015290 <__aeabi_dmul>
10012b9a:	0002      	movs	r2, r0
10012b9c:	000b      	movs	r3, r1
10012b9e:	9802      	ldr	r0, [sp, #8]
10012ba0:	9903      	ldr	r1, [sp, #12]
10012ba2:	f002 fdef 	bl	10015784 <__aeabi_dsub>
10012ba6:	0002      	movs	r2, r0
10012ba8:	000b      	movs	r3, r1
10012baa:	0004      	movs	r4, r0
10012bac:	000d      	movs	r5, r1
10012bae:	0030      	movs	r0, r6
10012bb0:	0039      	movs	r1, r7
10012bb2:	f001 fc1d 	bl	100143f0 <__aeabi_dadd>
10012bb6:	2200      	movs	r2, #0
10012bb8:	0010      	movs	r0, r2
10012bba:	003b      	movs	r3, r7
10012bbc:	0032      	movs	r2, r6
10012bbe:	9002      	str	r0, [sp, #8]
10012bc0:	9103      	str	r1, [sp, #12]
10012bc2:	f002 fddf 	bl	10015784 <__aeabi_dsub>
10012bc6:	0002      	movs	r2, r0
10012bc8:	000b      	movs	r3, r1
10012bca:	0020      	movs	r0, r4
10012bcc:	0029      	movs	r1, r5
10012bce:	f002 fdd9 	bl	10015784 <__aeabi_dsub>
10012bd2:	9004      	str	r0, [sp, #16]
10012bd4:	9105      	str	r1, [sp, #20]
10012bd6:	e5e1      	b.n	1001279c <__ieee754_pow+0x508>
10012bd8:	4a43      	ldr	r2, [pc, #268]	; (10012ce8 <__ieee754_pow+0xa54>)
10012bda:	4b44      	ldr	r3, [pc, #272]	; (10012cec <__ieee754_pow+0xa58>)
10012bdc:	9806      	ldr	r0, [sp, #24]
10012bde:	9907      	ldr	r1, [sp, #28]
10012be0:	f002 fb56 	bl	10015290 <__aeabi_dmul>
10012be4:	4a40      	ldr	r2, [pc, #256]	; (10012ce8 <__ieee754_pow+0xa54>)
10012be6:	4b41      	ldr	r3, [pc, #260]	; (10012cec <__ieee754_pow+0xa58>)
10012be8:	f002 fb52 	bl	10015290 <__aeabi_dmul>
10012bec:	0006      	movs	r6, r0
10012bee:	f7ff fb9a 	bl	10012326 <__ieee754_pow+0x92>
10012bf2:	2a00      	cmp	r2, #0
10012bf4:	d001      	beq.n	10012bfa <__ieee754_pow+0x966>
10012bf6:	f7ff fba5 	bl	10012344 <__ieee754_pow+0xb0>
10012bfa:	3214      	adds	r2, #20
10012bfc:	1ad3      	subs	r3, r2, r3
10012bfe:	003a      	movs	r2, r7
10012c00:	411a      	asrs	r2, r3
10012c02:	0011      	movs	r1, r2
10012c04:	4099      	lsls	r1, r3
10012c06:	428f      	cmp	r7, r1
10012c08:	d001      	beq.n	10012c0e <__ieee754_pow+0x97a>
10012c0a:	f7ff fb6f 	bl	100122ec <__ieee754_pow+0x58>
10012c0e:	2301      	movs	r3, #1
10012c10:	4013      	ands	r3, r2
10012c12:	2202      	movs	r2, #2
10012c14:	1ad3      	subs	r3, r2, r3
10012c16:	469b      	mov	fp, r3
10012c18:	f7ff fb68 	bl	100122ec <__ieee754_pow+0x58>
10012c1c:	4b30      	ldr	r3, [pc, #192]	; (10012ce0 <__ieee754_pow+0xa4c>)
10012c1e:	429e      	cmp	r6, r3
10012c20:	dd00      	ble.n	10012c24 <__ieee754_pow+0x990>
10012c22:	e64e      	b.n	100128c2 <__ieee754_pow+0x62e>
10012c24:	2300      	movs	r3, #0
10012c26:	4699      	mov	r9, r3
10012c28:	4698      	mov	r8, r3
10012c2a:	e67a      	b.n	10012922 <__ieee754_pow+0x68e>
10012c2c:	0002      	movs	r2, r0
10012c2e:	000b      	movs	r3, r1
10012c30:	f7ff fc14 	bl	1001245c <__ieee754_pow+0x1c8>
10012c34:	2380      	movs	r3, #128	; 0x80
10012c36:	4c2e      	ldr	r4, [pc, #184]	; (10012cf0 <__ieee754_pow+0xa5c>)
10012c38:	05db      	lsls	r3, r3, #23
10012c3a:	9308      	str	r3, [sp, #32]
10012c3c:	9409      	str	r4, [sp, #36]	; 0x24
10012c3e:	4b2d      	ldr	r3, [pc, #180]	; (10012cf4 <__ieee754_pow+0xa60>)
10012c40:	4c2d      	ldr	r4, [pc, #180]	; (10012cf8 <__ieee754_pow+0xa64>)
10012c42:	2200      	movs	r2, #0
10012c44:	930c      	str	r3, [sp, #48]	; 0x30
10012c46:	940d      	str	r4, [sp, #52]	; 0x34
10012c48:	2480      	movs	r4, #128	; 0x80
10012c4a:	4b2c      	ldr	r3, [pc, #176]	; (10012cfc <__ieee754_pow+0xa68>)
10012c4c:	02e4      	lsls	r4, r4, #11
10012c4e:	9206      	str	r2, [sp, #24]
10012c50:	9307      	str	r3, [sp, #28]
10012c52:	e456      	b.n	10012502 <__ieee754_pow+0x26e>
10012c54:	4643      	mov	r3, r8
10012c56:	425b      	negs	r3, r3
10012c58:	4698      	mov	r8, r3
10012c5a:	e651      	b.n	10012900 <__ieee754_pow+0x66c>
10012c5c:	4642      	mov	r2, r8
10012c5e:	f000 fa59 	bl	10013114 <scalbn>
10012c62:	e707      	b.n	10012a74 <__ieee754_pow+0x7e0>
10012c64:	fffffc02 	.word	0xfffffc02
10012c68:	fffffc01 	.word	0xfffffc01
10012c6c:	000fffff 	.word	0x000fffff
10012c70:	3fe62e43 	.word	0x3fe62e43
10012c74:	fefa39ef 	.word	0xfefa39ef
10012c78:	3fe62e42 	.word	0x3fe62e42
10012c7c:	0ca86c39 	.word	0x0ca86c39
10012c80:	be205c61 	.word	0xbe205c61
10012c84:	72bea4d0 	.word	0x72bea4d0
10012c88:	3e663769 	.word	0x3e663769
10012c8c:	c5d26bf1 	.word	0xc5d26bf1
10012c90:	3ebbbd41 	.word	0x3ebbbd41
10012c94:	af25de2c 	.word	0xaf25de2c
10012c98:	3f11566a 	.word	0x3f11566a
10012c9c:	16bebd93 	.word	0x16bebd93
10012ca0:	3f66c16c 	.word	0x3f66c16c
10012ca4:	5555553e 	.word	0x5555553e
10012ca8:	3fc55555 	.word	0x3fc55555
10012cac:	3ff00000 	.word	0x3ff00000
10012cb0:	4090cbff 	.word	0x4090cbff
10012cb4:	3f6f3400 	.word	0x3f6f3400
10012cb8:	c2f8f359 	.word	0xc2f8f359
10012cbc:	01a56e1f 	.word	0x01a56e1f
10012cc0:	bff00000 	.word	0xbff00000
10012cc4:	3feffffe 	.word	0x3feffffe
10012cc8:	3ff71547 	.word	0x3ff71547
10012ccc:	f85ddf44 	.word	0xf85ddf44
10012cd0:	3e54ae0b 	.word	0x3e54ae0b
10012cd4:	3fd00000 	.word	0x3fd00000
10012cd8:	55555555 	.word	0x55555555
10012cdc:	3fd55555 	.word	0x3fd55555
10012ce0:	3fe00000 	.word	0x3fe00000
10012ce4:	652b82fe 	.word	0x652b82fe
10012ce8:	8800759c 	.word	0x8800759c
10012cec:	7e37e43c 	.word	0x7e37e43c
10012cf0:	3fe2b803 	.word	0x3fe2b803
10012cf4:	43cfd006 	.word	0x43cfd006
10012cf8:	3e4cfdeb 	.word	0x3e4cfdeb
10012cfc:	3ff80000 	.word	0x3ff80000

10012d00 <__ieee754_sqrt>:
10012d00:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d02:	4656      	mov	r6, sl
10012d04:	464d      	mov	r5, r9
10012d06:	4644      	mov	r4, r8
10012d08:	465f      	mov	r7, fp
10012d0a:	4b75      	ldr	r3, [pc, #468]	; (10012ee0 <__ieee754_sqrt+0x1e0>)
10012d0c:	b4f0      	push	{r4, r5, r6, r7}
10012d0e:	000a      	movs	r2, r1
10012d10:	000d      	movs	r5, r1
10012d12:	0019      	movs	r1, r3
10012d14:	b083      	sub	sp, #12
10012d16:	0006      	movs	r6, r0
10012d18:	0004      	movs	r4, r0
10012d1a:	4029      	ands	r1, r5
10012d1c:	4299      	cmp	r1, r3
10012d1e:	d100      	bne.n	10012d22 <__ieee754_sqrt+0x22>
10012d20:	e0ba      	b.n	10012e98 <__ieee754_sqrt+0x198>
10012d22:	2d00      	cmp	r5, #0
10012d24:	dc00      	bgt.n	10012d28 <__ieee754_sqrt+0x28>
10012d26:	e094      	b.n	10012e52 <__ieee754_sqrt+0x152>
10012d28:	152d      	asrs	r5, r5, #20
10012d2a:	d100      	bne.n	10012d2e <__ieee754_sqrt+0x2e>
10012d2c:	e0a3      	b.n	10012e76 <__ieee754_sqrt+0x176>
10012d2e:	4b6d      	ldr	r3, [pc, #436]	; (10012ee4 <__ieee754_sqrt+0x1e4>)
10012d30:	0312      	lsls	r2, r2, #12
10012d32:	469c      	mov	ip, r3
10012d34:	2380      	movs	r3, #128	; 0x80
10012d36:	0b12      	lsrs	r2, r2, #12
10012d38:	035b      	lsls	r3, r3, #13
10012d3a:	4465      	add	r5, ip
10012d3c:	431a      	orrs	r2, r3
10012d3e:	07eb      	lsls	r3, r5, #31
10012d40:	d500      	bpl.n	10012d44 <__ieee754_sqrt+0x44>
10012d42:	e081      	b.n	10012e48 <__ieee754_sqrt+0x148>
10012d44:	106b      	asrs	r3, r5, #1
10012d46:	4698      	mov	r8, r3
10012d48:	0fe3      	lsrs	r3, r4, #31
10012d4a:	189b      	adds	r3, r3, r2
10012d4c:	189b      	adds	r3, r3, r2
10012d4e:	2280      	movs	r2, #128	; 0x80
10012d50:	2116      	movs	r1, #22
10012d52:	2600      	movs	r6, #0
10012d54:	2700      	movs	r7, #0
10012d56:	0064      	lsls	r4, r4, #1
10012d58:	0392      	lsls	r2, r2, #14
10012d5a:	18b8      	adds	r0, r7, r2
10012d5c:	4298      	cmp	r0, r3
10012d5e:	dc02      	bgt.n	10012d66 <__ieee754_sqrt+0x66>
10012d60:	1887      	adds	r7, r0, r2
10012d62:	1a1b      	subs	r3, r3, r0
10012d64:	18b6      	adds	r6, r6, r2
10012d66:	0fe0      	lsrs	r0, r4, #31
10012d68:	005b      	lsls	r3, r3, #1
10012d6a:	3901      	subs	r1, #1
10012d6c:	181b      	adds	r3, r3, r0
10012d6e:	0064      	lsls	r4, r4, #1
10012d70:	0852      	lsrs	r2, r2, #1
10012d72:	2900      	cmp	r1, #0
10012d74:	d1f1      	bne.n	10012d5a <__ieee754_sqrt+0x5a>
10012d76:	2200      	movs	r2, #0
10012d78:	9201      	str	r2, [sp, #4]
10012d7a:	4694      	mov	ip, r2
10012d7c:	2280      	movs	r2, #128	; 0x80
10012d7e:	0612      	lsls	r2, r2, #24
10012d80:	2020      	movs	r0, #32
10012d82:	4691      	mov	r9, r2
10012d84:	e009      	b.n	10012d9a <__ieee754_sqrt+0x9a>
10012d86:	429f      	cmp	r7, r3
10012d88:	d041      	beq.n	10012e0e <__ieee754_sqrt+0x10e>
10012d8a:	0fe1      	lsrs	r1, r4, #31
10012d8c:	18c9      	adds	r1, r1, r3
10012d8e:	3801      	subs	r0, #1
10012d90:	18cb      	adds	r3, r1, r3
10012d92:	0064      	lsls	r4, r4, #1
10012d94:	0852      	lsrs	r2, r2, #1
10012d96:	2800      	cmp	r0, #0
10012d98:	d01e      	beq.n	10012dd8 <__ieee754_sqrt+0xd8>
10012d9a:	4661      	mov	r1, ip
10012d9c:	1851      	adds	r1, r2, r1
10012d9e:	429f      	cmp	r7, r3
10012da0:	daf1      	bge.n	10012d86 <__ieee754_sqrt+0x86>
10012da2:	188d      	adds	r5, r1, r2
10012da4:	46ac      	mov	ip, r5
10012da6:	0fcd      	lsrs	r5, r1, #31
10012da8:	07ed      	lsls	r5, r5, #31
10012daa:	46ba      	mov	sl, r7
10012dac:	454d      	cmp	r5, r9
10012dae:	d039      	beq.n	10012e24 <__ieee754_sqrt+0x124>
10012db0:	1bdb      	subs	r3, r3, r7
10012db2:	428c      	cmp	r4, r1
10012db4:	41bf      	sbcs	r7, r7
10012db6:	427f      	negs	r7, r7
10012db8:	1bdb      	subs	r3, r3, r7
10012dba:	1a64      	subs	r4, r4, r1
10012dbc:	9901      	ldr	r1, [sp, #4]
10012dbe:	3801      	subs	r0, #1
10012dc0:	468b      	mov	fp, r1
10012dc2:	4493      	add	fp, r2
10012dc4:	4659      	mov	r1, fp
10012dc6:	9101      	str	r1, [sp, #4]
10012dc8:	0fe1      	lsrs	r1, r4, #31
10012dca:	18c9      	adds	r1, r1, r3
10012dcc:	4657      	mov	r7, sl
10012dce:	18cb      	adds	r3, r1, r3
10012dd0:	0064      	lsls	r4, r4, #1
10012dd2:	0852      	lsrs	r2, r2, #1
10012dd4:	2800      	cmp	r0, #0
10012dd6:	d1e0      	bne.n	10012d9a <__ieee754_sqrt+0x9a>
10012dd8:	4323      	orrs	r3, r4
10012dda:	d12b      	bne.n	10012e34 <__ieee754_sqrt+0x134>
10012ddc:	9b01      	ldr	r3, [sp, #4]
10012dde:	085b      	lsrs	r3, r3, #1
10012de0:	4941      	ldr	r1, [pc, #260]	; (10012ee8 <__ieee754_sqrt+0x1e8>)
10012de2:	1072      	asrs	r2, r6, #1
10012de4:	468c      	mov	ip, r1
10012de6:	4462      	add	r2, ip
10012de8:	07f1      	lsls	r1, r6, #31
10012dea:	d502      	bpl.n	10012df2 <__ieee754_sqrt+0xf2>
10012dec:	2180      	movs	r1, #128	; 0x80
10012dee:	0609      	lsls	r1, r1, #24
10012df0:	430b      	orrs	r3, r1
10012df2:	4641      	mov	r1, r8
10012df4:	0509      	lsls	r1, r1, #20
10012df6:	188d      	adds	r5, r1, r2
10012df8:	001e      	movs	r6, r3
10012dfa:	002f      	movs	r7, r5
10012dfc:	0030      	movs	r0, r6
10012dfe:	0039      	movs	r1, r7
10012e00:	b003      	add	sp, #12
10012e02:	bc3c      	pop	{r2, r3, r4, r5}
10012e04:	4690      	mov	r8, r2
10012e06:	4699      	mov	r9, r3
10012e08:	46a2      	mov	sl, r4
10012e0a:	46ab      	mov	fp, r5
10012e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e0e:	42a1      	cmp	r1, r4
10012e10:	d80e      	bhi.n	10012e30 <__ieee754_sqrt+0x130>
10012e12:	188d      	adds	r5, r1, r2
10012e14:	46ac      	mov	ip, r5
10012e16:	0fcd      	lsrs	r5, r1, #31
10012e18:	07ed      	lsls	r5, r5, #31
10012e1a:	454d      	cmp	r5, r9
10012e1c:	d048      	beq.n	10012eb0 <__ieee754_sqrt+0x1b0>
10012e1e:	469a      	mov	sl, r3
10012e20:	2300      	movs	r3, #0
10012e22:	e7ca      	b.n	10012dba <__ieee754_sqrt+0xba>
10012e24:	4665      	mov	r5, ip
10012e26:	2d00      	cmp	r5, #0
10012e28:	dbc2      	blt.n	10012db0 <__ieee754_sqrt+0xb0>
10012e2a:	1c7d      	adds	r5, r7, #1
10012e2c:	46aa      	mov	sl, r5
10012e2e:	e7bf      	b.n	10012db0 <__ieee754_sqrt+0xb0>
10012e30:	003b      	movs	r3, r7
10012e32:	e7aa      	b.n	10012d8a <__ieee754_sqrt+0x8a>
10012e34:	9b01      	ldr	r3, [sp, #4]
10012e36:	3301      	adds	r3, #1
10012e38:	d03e      	beq.n	10012eb8 <__ieee754_sqrt+0x1b8>
10012e3a:	9a01      	ldr	r2, [sp, #4]
10012e3c:	2301      	movs	r3, #1
10012e3e:	4694      	mov	ip, r2
10012e40:	4013      	ands	r3, r2
10012e42:	4463      	add	r3, ip
10012e44:	085b      	lsrs	r3, r3, #1
10012e46:	e7cb      	b.n	10012de0 <__ieee754_sqrt+0xe0>
10012e48:	0fe3      	lsrs	r3, r4, #31
10012e4a:	0052      	lsls	r2, r2, #1
10012e4c:	189a      	adds	r2, r3, r2
10012e4e:	0064      	lsls	r4, r4, #1
10012e50:	e778      	b.n	10012d44 <__ieee754_sqrt+0x44>
10012e52:	006b      	lsls	r3, r5, #1
10012e54:	085b      	lsrs	r3, r3, #1
10012e56:	4303      	orrs	r3, r0
10012e58:	002f      	movs	r7, r5
10012e5a:	2b00      	cmp	r3, #0
10012e5c:	d0ce      	beq.n	10012dfc <__ieee754_sqrt+0xfc>
10012e5e:	2500      	movs	r5, #0
10012e60:	2a00      	cmp	r2, #0
10012e62:	d131      	bne.n	10012ec8 <__ieee754_sqrt+0x1c8>
10012e64:	0ae2      	lsrs	r2, r4, #11
10012e66:	3d15      	subs	r5, #21
10012e68:	0564      	lsls	r4, r4, #21
10012e6a:	2a00      	cmp	r2, #0
10012e6c:	d0fa      	beq.n	10012e64 <__ieee754_sqrt+0x164>
10012e6e:	2380      	movs	r3, #128	; 0x80
10012e70:	035b      	lsls	r3, r3, #13
10012e72:	421a      	tst	r2, r3
10012e74:	d123      	bne.n	10012ebe <__ieee754_sqrt+0x1be>
10012e76:	2080      	movs	r0, #128	; 0x80
10012e78:	2300      	movs	r3, #0
10012e7a:	0340      	lsls	r0, r0, #13
10012e7c:	e000      	b.n	10012e80 <__ieee754_sqrt+0x180>
10012e7e:	000b      	movs	r3, r1
10012e80:	0052      	lsls	r2, r2, #1
10012e82:	1c59      	adds	r1, r3, #1
10012e84:	4202      	tst	r2, r0
10012e86:	d0fa      	beq.n	10012e7e <__ieee754_sqrt+0x17e>
10012e88:	2020      	movs	r0, #32
10012e8a:	1a40      	subs	r0, r0, r1
10012e8c:	1aed      	subs	r5, r5, r3
10012e8e:	0023      	movs	r3, r4
10012e90:	40c3      	lsrs	r3, r0
10012e92:	408c      	lsls	r4, r1
10012e94:	431a      	orrs	r2, r3
10012e96:	e74a      	b.n	10012d2e <__ieee754_sqrt+0x2e>
10012e98:	0002      	movs	r2, r0
10012e9a:	002b      	movs	r3, r5
10012e9c:	0029      	movs	r1, r5
10012e9e:	f002 f9f7 	bl	10015290 <__aeabi_dmul>
10012ea2:	0032      	movs	r2, r6
10012ea4:	002b      	movs	r3, r5
10012ea6:	f001 faa3 	bl	100143f0 <__aeabi_dadd>
10012eaa:	0006      	movs	r6, r0
10012eac:	000f      	movs	r7, r1
10012eae:	e7a5      	b.n	10012dfc <__ieee754_sqrt+0xfc>
10012eb0:	4665      	mov	r5, ip
10012eb2:	2d00      	cmp	r5, #0
10012eb4:	dab9      	bge.n	10012e2a <__ieee754_sqrt+0x12a>
10012eb6:	e7b2      	b.n	10012e1e <__ieee754_sqrt+0x11e>
10012eb8:	3601      	adds	r6, #1
10012eba:	2300      	movs	r3, #0
10012ebc:	e790      	b.n	10012de0 <__ieee754_sqrt+0xe0>
10012ebe:	2301      	movs	r3, #1
10012ec0:	2020      	movs	r0, #32
10012ec2:	425b      	negs	r3, r3
10012ec4:	2100      	movs	r1, #0
10012ec6:	e7e1      	b.n	10012e8c <__ieee754_sqrt+0x18c>
10012ec8:	003b      	movs	r3, r7
10012eca:	0002      	movs	r2, r0
10012ecc:	0039      	movs	r1, r7
10012ece:	f002 fc59 	bl	10015784 <__aeabi_dsub>
10012ed2:	0002      	movs	r2, r0
10012ed4:	000b      	movs	r3, r1
10012ed6:	f001 fdb7 	bl	10014a48 <__aeabi_ddiv>
10012eda:	0006      	movs	r6, r0
10012edc:	000f      	movs	r7, r1
10012ede:	e78d      	b.n	10012dfc <__ieee754_sqrt+0xfc>
10012ee0:	7ff00000 	.word	0x7ff00000
10012ee4:	fffffc01 	.word	0xfffffc01
10012ee8:	3fe00000 	.word	0x3fe00000

10012eec <__ieee754_sqrtf>:
10012eec:	492b      	ldr	r1, [pc, #172]	; (10012f9c <__ieee754_sqrtf+0xb0>)
10012eee:	0042      	lsls	r2, r0, #1
10012ef0:	b570      	push	{r4, r5, r6, lr}
10012ef2:	0003      	movs	r3, r0
10012ef4:	1c04      	adds	r4, r0, #0
10012ef6:	0852      	lsrs	r2, r2, #1
10012ef8:	428a      	cmp	r2, r1
10012efa:	d83a      	bhi.n	10012f72 <__ieee754_sqrtf+0x86>
10012efc:	2a00      	cmp	r2, #0
10012efe:	d037      	beq.n	10012f70 <__ieee754_sqrtf+0x84>
10012f00:	2800      	cmp	r0, #0
10012f02:	db3f      	blt.n	10012f84 <__ieee754_sqrtf+0x98>
10012f04:	4926      	ldr	r1, [pc, #152]	; (10012fa0 <__ieee754_sqrtf+0xb4>)
10012f06:	15c0      	asrs	r0, r0, #23
10012f08:	428a      	cmp	r2, r1
10012f0a:	d80b      	bhi.n	10012f24 <__ieee754_sqrtf+0x38>
10012f0c:	3101      	adds	r1, #1
10012f0e:	4221      	tst	r1, r4
10012f10:	d13f      	bne.n	10012f92 <__ieee754_sqrtf+0xa6>
10012f12:	2200      	movs	r2, #0
10012f14:	000c      	movs	r4, r1
10012f16:	e000      	b.n	10012f1a <__ieee754_sqrtf+0x2e>
10012f18:	000a      	movs	r2, r1
10012f1a:	005b      	lsls	r3, r3, #1
10012f1c:	1c51      	adds	r1, r2, #1
10012f1e:	4223      	tst	r3, r4
10012f20:	d0fa      	beq.n	10012f18 <__ieee754_sqrtf+0x2c>
10012f22:	1a80      	subs	r0, r0, r2
10012f24:	2280      	movs	r2, #128	; 0x80
10012f26:	025b      	lsls	r3, r3, #9
10012f28:	0a5b      	lsrs	r3, r3, #9
10012f2a:	0412      	lsls	r2, r2, #16
10012f2c:	387f      	subs	r0, #127	; 0x7f
10012f2e:	4313      	orrs	r3, r2
10012f30:	07c2      	lsls	r2, r0, #31
10012f32:	d425      	bmi.n	10012f80 <__ieee754_sqrtf+0x94>
10012f34:	2280      	movs	r2, #128	; 0x80
10012f36:	2119      	movs	r1, #25
10012f38:	2500      	movs	r5, #0
10012f3a:	2600      	movs	r6, #0
10012f3c:	1040      	asrs	r0, r0, #1
10012f3e:	005b      	lsls	r3, r3, #1
10012f40:	0452      	lsls	r2, r2, #17
10012f42:	18b4      	adds	r4, r6, r2
10012f44:	429c      	cmp	r4, r3
10012f46:	dc02      	bgt.n	10012f4e <__ieee754_sqrtf+0x62>
10012f48:	18a6      	adds	r6, r4, r2
10012f4a:	1b1b      	subs	r3, r3, r4
10012f4c:	18ad      	adds	r5, r5, r2
10012f4e:	3901      	subs	r1, #1
10012f50:	005b      	lsls	r3, r3, #1
10012f52:	0852      	lsrs	r2, r2, #1
10012f54:	2900      	cmp	r1, #0
10012f56:	d1f4      	bne.n	10012f42 <__ieee754_sqrtf+0x56>
10012f58:	2b00      	cmp	r3, #0
10012f5a:	d002      	beq.n	10012f62 <__ieee754_sqrtf+0x76>
10012f5c:	2301      	movs	r3, #1
10012f5e:	402b      	ands	r3, r5
10012f60:	18ed      	adds	r5, r5, r3
10012f62:	23fc      	movs	r3, #252	; 0xfc
10012f64:	059b      	lsls	r3, r3, #22
10012f66:	469c      	mov	ip, r3
10012f68:	106d      	asrs	r5, r5, #1
10012f6a:	4465      	add	r5, ip
10012f6c:	05c0      	lsls	r0, r0, #23
10012f6e:	1940      	adds	r0, r0, r5
10012f70:	bd70      	pop	{r4, r5, r6, pc}
10012f72:	1c01      	adds	r1, r0, #0
10012f74:	f000 fee2 	bl	10013d3c <__aeabi_fmul>
10012f78:	1c21      	adds	r1, r4, #0
10012f7a:	f000 fb9f 	bl	100136bc <__aeabi_fadd>
10012f7e:	e7f7      	b.n	10012f70 <__ieee754_sqrtf+0x84>
10012f80:	005b      	lsls	r3, r3, #1
10012f82:	e7d7      	b.n	10012f34 <__ieee754_sqrtf+0x48>
10012f84:	1c01      	adds	r1, r0, #0
10012f86:	f000 ffed 	bl	10013f64 <__aeabi_fsub>
10012f8a:	1c01      	adds	r1, r0, #0
10012f8c:	f000 fd0c 	bl	100139a8 <__aeabi_fdiv>
10012f90:	e7ee      	b.n	10012f70 <__ieee754_sqrtf+0x84>
10012f92:	2201      	movs	r2, #1
10012f94:	4252      	negs	r2, r2
10012f96:	1a80      	subs	r0, r0, r2
10012f98:	e7c4      	b.n	10012f24 <__ieee754_sqrtf+0x38>
10012f9a:	46c0      	nop			; (mov r8, r8)
10012f9c:	7f7fffff 	.word	0x7f7fffff
10012fa0:	007fffff 	.word	0x007fffff

10012fa4 <fabs>:
10012fa4:	0049      	lsls	r1, r1, #1
10012fa6:	084b      	lsrs	r3, r1, #1
10012fa8:	0019      	movs	r1, r3
10012faa:	4770      	bx	lr

10012fac <finite>:
10012fac:	4b03      	ldr	r3, [pc, #12]	; (10012fbc <finite+0x10>)
10012fae:	0048      	lsls	r0, r1, #1
10012fb0:	469c      	mov	ip, r3
10012fb2:	0840      	lsrs	r0, r0, #1
10012fb4:	4460      	add	r0, ip
10012fb6:	0fc0      	lsrs	r0, r0, #31
10012fb8:	4770      	bx	lr
10012fba:	46c0      	nop			; (mov r8, r8)
10012fbc:	80100000 	.word	0x80100000

10012fc0 <matherr>:
10012fc0:	2000      	movs	r0, #0
10012fc2:	4770      	bx	lr

10012fc4 <nan>:
10012fc4:	2000      	movs	r0, #0
10012fc6:	4901      	ldr	r1, [pc, #4]	; (10012fcc <nan+0x8>)
10012fc8:	4770      	bx	lr
10012fca:	46c0      	nop			; (mov r8, r8)
10012fcc:	7ff80000 	.word	0x7ff80000

10012fd0 <rint>:
10012fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fd2:	4647      	mov	r7, r8
10012fd4:	b480      	push	{r7}
10012fd6:	0fcb      	lsrs	r3, r1, #31
10012fd8:	4698      	mov	r8, r3
10012fda:	4c4a      	ldr	r4, [pc, #296]	; (10013104 <rint+0x134>)
10012fdc:	004b      	lsls	r3, r1, #1
10012fde:	0d5b      	lsrs	r3, r3, #21
10012fe0:	191e      	adds	r6, r3, r4
10012fe2:	b082      	sub	sp, #8
10012fe4:	0007      	movs	r7, r0
10012fe6:	000a      	movs	r2, r1
10012fe8:	2e13      	cmp	r6, #19
10012fea:	dc35      	bgt.n	10013058 <rint+0x88>
10012fec:	2e00      	cmp	r6, #0
10012fee:	db57      	blt.n	100130a0 <rint+0xd0>
10012ff0:	4b45      	ldr	r3, [pc, #276]	; (10013108 <rint+0x138>)
10012ff2:	0004      	movs	r4, r0
10012ff4:	4133      	asrs	r3, r6
10012ff6:	001f      	movs	r7, r3
10012ff8:	400f      	ands	r7, r1
10012ffa:	4307      	orrs	r7, r0
10012ffc:	000d      	movs	r5, r1
10012ffe:	2f00      	cmp	r7, #0
10013000:	d024      	beq.n	1001304c <rint+0x7c>
10013002:	085b      	lsrs	r3, r3, #1
10013004:	001c      	movs	r4, r3
10013006:	400c      	ands	r4, r1
10013008:	4320      	orrs	r0, r4
1001300a:	2700      	movs	r7, #0
1001300c:	2800      	cmp	r0, #0
1001300e:	d007      	beq.n	10013020 <rint+0x50>
10013010:	2e13      	cmp	r6, #19
10013012:	d100      	bne.n	10013016 <rint+0x46>
10013014:	e072      	b.n	100130fc <rint+0x12c>
10013016:	2280      	movs	r2, #128	; 0x80
10013018:	02d2      	lsls	r2, r2, #11
1001301a:	4132      	asrs	r2, r6
1001301c:	4399      	bics	r1, r3
1001301e:	430a      	orrs	r2, r1
10013020:	4643      	mov	r3, r8
10013022:	00de      	lsls	r6, r3, #3
10013024:	4b39      	ldr	r3, [pc, #228]	; (1001310c <rint+0x13c>)
10013026:	0011      	movs	r1, r2
10013028:	199e      	adds	r6, r3, r6
1001302a:	6834      	ldr	r4, [r6, #0]
1001302c:	6875      	ldr	r5, [r6, #4]
1001302e:	0038      	movs	r0, r7
10013030:	0022      	movs	r2, r4
10013032:	002b      	movs	r3, r5
10013034:	f001 f9dc 	bl	100143f0 <__aeabi_dadd>
10013038:	9000      	str	r0, [sp, #0]
1001303a:	9101      	str	r1, [sp, #4]
1001303c:	9800      	ldr	r0, [sp, #0]
1001303e:	9901      	ldr	r1, [sp, #4]
10013040:	0022      	movs	r2, r4
10013042:	002b      	movs	r3, r5
10013044:	f002 fb9e 	bl	10015784 <__aeabi_dsub>
10013048:	0004      	movs	r4, r0
1001304a:	000d      	movs	r5, r1
1001304c:	0020      	movs	r0, r4
1001304e:	0029      	movs	r1, r5
10013050:	b002      	add	sp, #8
10013052:	bc04      	pop	{r2}
10013054:	4690      	mov	r8, r2
10013056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013058:	2e33      	cmp	r6, #51	; 0x33
1001305a:	dd0c      	ble.n	10013076 <rint+0xa6>
1001305c:	2380      	movs	r3, #128	; 0x80
1001305e:	0004      	movs	r4, r0
10013060:	000d      	movs	r5, r1
10013062:	00db      	lsls	r3, r3, #3
10013064:	429e      	cmp	r6, r3
10013066:	d1f1      	bne.n	1001304c <rint+0x7c>
10013068:	0002      	movs	r2, r0
1001306a:	000b      	movs	r3, r1
1001306c:	f001 f9c0 	bl	100143f0 <__aeabi_dadd>
10013070:	0004      	movs	r4, r0
10013072:	000d      	movs	r5, r1
10013074:	e7ea      	b.n	1001304c <rint+0x7c>
10013076:	4c26      	ldr	r4, [pc, #152]	; (10013110 <rint+0x140>)
10013078:	000d      	movs	r5, r1
1001307a:	46a4      	mov	ip, r4
1001307c:	2401      	movs	r4, #1
1001307e:	4463      	add	r3, ip
10013080:	4264      	negs	r4, r4
10013082:	40dc      	lsrs	r4, r3
10013084:	46a4      	mov	ip, r4
10013086:	4661      	mov	r1, ip
10013088:	0004      	movs	r4, r0
1001308a:	4201      	tst	r1, r0
1001308c:	d0de      	beq.n	1001304c <rint+0x7c>
1001308e:	0849      	lsrs	r1, r1, #1
10013090:	4201      	tst	r1, r0
10013092:	d0c5      	beq.n	10013020 <rint+0x50>
10013094:	2780      	movs	r7, #128	; 0x80
10013096:	05ff      	lsls	r7, r7, #23
10013098:	411f      	asrs	r7, r3
1001309a:	4388      	bics	r0, r1
1001309c:	4307      	orrs	r7, r0
1001309e:	e7bf      	b.n	10013020 <rint+0x50>
100130a0:	004b      	lsls	r3, r1, #1
100130a2:	085b      	lsrs	r3, r3, #1
100130a4:	4303      	orrs	r3, r0
100130a6:	0004      	movs	r4, r0
100130a8:	000d      	movs	r5, r1
100130aa:	2b00      	cmp	r3, #0
100130ac:	d0ce      	beq.n	1001304c <rint+0x7c>
100130ae:	030b      	lsls	r3, r1, #12
100130b0:	0b1b      	lsrs	r3, r3, #12
100130b2:	4303      	orrs	r3, r0
100130b4:	425a      	negs	r2, r3
100130b6:	4313      	orrs	r3, r2
100130b8:	2280      	movs	r2, #128	; 0x80
100130ba:	0b1b      	lsrs	r3, r3, #12
100130bc:	0312      	lsls	r2, r2, #12
100130be:	4013      	ands	r3, r2
100130c0:	0c4a      	lsrs	r2, r1, #17
100130c2:	0452      	lsls	r2, r2, #17
100130c4:	4313      	orrs	r3, r2
100130c6:	0019      	movs	r1, r3
100130c8:	4643      	mov	r3, r8
100130ca:	4a10      	ldr	r2, [pc, #64]	; (1001310c <rint+0x13c>)
100130cc:	00db      	lsls	r3, r3, #3
100130ce:	18d3      	adds	r3, r2, r3
100130d0:	681c      	ldr	r4, [r3, #0]
100130d2:	685d      	ldr	r5, [r3, #4]
100130d4:	0022      	movs	r2, r4
100130d6:	002b      	movs	r3, r5
100130d8:	f001 f98a 	bl	100143f0 <__aeabi_dadd>
100130dc:	9000      	str	r0, [sp, #0]
100130de:	9101      	str	r1, [sp, #4]
100130e0:	9800      	ldr	r0, [sp, #0]
100130e2:	9901      	ldr	r1, [sp, #4]
100130e4:	0022      	movs	r2, r4
100130e6:	002b      	movs	r3, r5
100130e8:	f002 fb4c 	bl	10015784 <__aeabi_dsub>
100130ec:	4642      	mov	r2, r8
100130ee:	004b      	lsls	r3, r1, #1
100130f0:	085b      	lsrs	r3, r3, #1
100130f2:	07d6      	lsls	r6, r2, #31
100130f4:	4333      	orrs	r3, r6
100130f6:	0004      	movs	r4, r0
100130f8:	001d      	movs	r5, r3
100130fa:	e7a7      	b.n	1001304c <rint+0x7c>
100130fc:	2780      	movs	r7, #128	; 0x80
100130fe:	063f      	lsls	r7, r7, #24
10013100:	e789      	b.n	10013016 <rint+0x46>
10013102:	46c0      	nop			; (mov r8, r8)
10013104:	fffffc01 	.word	0xfffffc01
10013108:	000fffff 	.word	0x000fffff
1001310c:	10018388 	.word	0x10018388
10013110:	fffffbed 	.word	0xfffffbed

10013114 <scalbn>:
10013114:	004b      	lsls	r3, r1, #1
10013116:	b570      	push	{r4, r5, r6, lr}
10013118:	0d5b      	lsrs	r3, r3, #21
1001311a:	0014      	movs	r4, r2
1001311c:	000a      	movs	r2, r1
1001311e:	2b00      	cmp	r3, #0
10013120:	d11a      	bne.n	10013158 <scalbn+0x44>
10013122:	004b      	lsls	r3, r1, #1
10013124:	085b      	lsrs	r3, r3, #1
10013126:	4303      	orrs	r3, r0
10013128:	d015      	beq.n	10013156 <scalbn+0x42>
1001312a:	2200      	movs	r2, #0
1001312c:	4b22      	ldr	r3, [pc, #136]	; (100131b8 <scalbn+0xa4>)
1001312e:	f002 f8af 	bl	10015290 <__aeabi_dmul>
10013132:	4b22      	ldr	r3, [pc, #136]	; (100131bc <scalbn+0xa8>)
10013134:	000a      	movs	r2, r1
10013136:	429c      	cmp	r4, r3
10013138:	db22      	blt.n	10013180 <scalbn+0x6c>
1001313a:	004b      	lsls	r3, r1, #1
1001313c:	0d5b      	lsrs	r3, r3, #21
1001313e:	3b36      	subs	r3, #54	; 0x36
10013140:	4d1f      	ldr	r5, [pc, #124]	; (100131c0 <scalbn+0xac>)
10013142:	18e3      	adds	r3, r4, r3
10013144:	42ab      	cmp	r3, r5
10013146:	dc20      	bgt.n	1001318a <scalbn+0x76>
10013148:	2b00      	cmp	r3, #0
1001314a:	dd0d      	ble.n	10013168 <scalbn+0x54>
1001314c:	4c1d      	ldr	r4, [pc, #116]	; (100131c4 <scalbn+0xb0>)
1001314e:	051b      	lsls	r3, r3, #20
10013150:	4022      	ands	r2, r4
10013152:	431a      	orrs	r2, r3
10013154:	0011      	movs	r1, r2
10013156:	bd70      	pop	{r4, r5, r6, pc}
10013158:	4d1b      	ldr	r5, [pc, #108]	; (100131c8 <scalbn+0xb4>)
1001315a:	42ab      	cmp	r3, r5
1001315c:	d1f0      	bne.n	10013140 <scalbn+0x2c>
1001315e:	0002      	movs	r2, r0
10013160:	000b      	movs	r3, r1
10013162:	f001 f945 	bl	100143f0 <__aeabi_dadd>
10013166:	e7f6      	b.n	10013156 <scalbn+0x42>
10013168:	001d      	movs	r5, r3
1001316a:	3535      	adds	r5, #53	; 0x35
1001316c:	da18      	bge.n	100131a0 <scalbn+0x8c>
1001316e:	4b17      	ldr	r3, [pc, #92]	; (100131cc <scalbn+0xb8>)
10013170:	0002      	movs	r2, r0
10013172:	429c      	cmp	r4, r3
10013174:	dc0a      	bgt.n	1001318c <scalbn+0x78>
10013176:	000b      	movs	r3, r1
10013178:	4815      	ldr	r0, [pc, #84]	; (100131d0 <scalbn+0xbc>)
1001317a:	4916      	ldr	r1, [pc, #88]	; (100131d4 <scalbn+0xc0>)
1001317c:	f000 f832 	bl	100131e4 <copysign>
10013180:	4a13      	ldr	r2, [pc, #76]	; (100131d0 <scalbn+0xbc>)
10013182:	4b14      	ldr	r3, [pc, #80]	; (100131d4 <scalbn+0xc0>)
10013184:	f002 f884 	bl	10015290 <__aeabi_dmul>
10013188:	e7e5      	b.n	10013156 <scalbn+0x42>
1001318a:	0002      	movs	r2, r0
1001318c:	000b      	movs	r3, r1
1001318e:	4812      	ldr	r0, [pc, #72]	; (100131d8 <scalbn+0xc4>)
10013190:	4912      	ldr	r1, [pc, #72]	; (100131dc <scalbn+0xc8>)
10013192:	f000 f827 	bl	100131e4 <copysign>
10013196:	4a10      	ldr	r2, [pc, #64]	; (100131d8 <scalbn+0xc4>)
10013198:	4b10      	ldr	r3, [pc, #64]	; (100131dc <scalbn+0xc8>)
1001319a:	f002 f879 	bl	10015290 <__aeabi_dmul>
1001319e:	e7da      	b.n	10013156 <scalbn+0x42>
100131a0:	4c08      	ldr	r4, [pc, #32]	; (100131c4 <scalbn+0xb0>)
100131a2:	3336      	adds	r3, #54	; 0x36
100131a4:	4022      	ands	r2, r4
100131a6:	051b      	lsls	r3, r3, #20
100131a8:	4313      	orrs	r3, r2
100131aa:	0019      	movs	r1, r3
100131ac:	2200      	movs	r2, #0
100131ae:	4b0c      	ldr	r3, [pc, #48]	; (100131e0 <scalbn+0xcc>)
100131b0:	f002 f86e 	bl	10015290 <__aeabi_dmul>
100131b4:	e7cf      	b.n	10013156 <scalbn+0x42>
100131b6:	46c0      	nop			; (mov r8, r8)
100131b8:	43500000 	.word	0x43500000
100131bc:	ffff3cb0 	.word	0xffff3cb0
100131c0:	000007fe 	.word	0x000007fe
100131c4:	800fffff 	.word	0x800fffff
100131c8:	000007ff 	.word	0x000007ff
100131cc:	0000c350 	.word	0x0000c350
100131d0:	c2f8f359 	.word	0xc2f8f359
100131d4:	01a56e1f 	.word	0x01a56e1f
100131d8:	8800759c 	.word	0x8800759c
100131dc:	7e37e43c 	.word	0x7e37e43c
100131e0:	3c900000 	.word	0x3c900000

100131e4 <copysign>:
100131e4:	b530      	push	{r4, r5, lr}
100131e6:	004a      	lsls	r2, r1, #1
100131e8:	0fdb      	lsrs	r3, r3, #31
100131ea:	07db      	lsls	r3, r3, #31
100131ec:	0852      	lsrs	r2, r2, #1
100131ee:	431a      	orrs	r2, r3
100131f0:	0011      	movs	r1, r2
100131f2:	bd30      	pop	{r4, r5, pc}

100131f4 <__gnu_thumb1_case_sqi>:
100131f4:	b402      	push	{r1}
100131f6:	4671      	mov	r1, lr
100131f8:	0849      	lsrs	r1, r1, #1
100131fa:	0049      	lsls	r1, r1, #1
100131fc:	5609      	ldrsb	r1, [r1, r0]
100131fe:	0049      	lsls	r1, r1, #1
10013200:	448e      	add	lr, r1
10013202:	bc02      	pop	{r1}
10013204:	4770      	bx	lr
10013206:	46c0      	nop			; (mov r8, r8)

10013208 <__gnu_thumb1_case_uqi>:
10013208:	b402      	push	{r1}
1001320a:	4671      	mov	r1, lr
1001320c:	0849      	lsrs	r1, r1, #1
1001320e:	0049      	lsls	r1, r1, #1
10013210:	5c09      	ldrb	r1, [r1, r0]
10013212:	0049      	lsls	r1, r1, #1
10013214:	448e      	add	lr, r1
10013216:	bc02      	pop	{r1}
10013218:	4770      	bx	lr
1001321a:	46c0      	nop			; (mov r8, r8)

1001321c <__aeabi_uidiv>:
1001321c:	2200      	movs	r2, #0
1001321e:	0843      	lsrs	r3, r0, #1
10013220:	428b      	cmp	r3, r1
10013222:	d374      	bcc.n	1001330e <__aeabi_uidiv+0xf2>
10013224:	0903      	lsrs	r3, r0, #4
10013226:	428b      	cmp	r3, r1
10013228:	d35f      	bcc.n	100132ea <__aeabi_uidiv+0xce>
1001322a:	0a03      	lsrs	r3, r0, #8
1001322c:	428b      	cmp	r3, r1
1001322e:	d344      	bcc.n	100132ba <__aeabi_uidiv+0x9e>
10013230:	0b03      	lsrs	r3, r0, #12
10013232:	428b      	cmp	r3, r1
10013234:	d328      	bcc.n	10013288 <__aeabi_uidiv+0x6c>
10013236:	0c03      	lsrs	r3, r0, #16
10013238:	428b      	cmp	r3, r1
1001323a:	d30d      	bcc.n	10013258 <__aeabi_uidiv+0x3c>
1001323c:	22ff      	movs	r2, #255	; 0xff
1001323e:	0209      	lsls	r1, r1, #8
10013240:	ba12      	rev	r2, r2
10013242:	0c03      	lsrs	r3, r0, #16
10013244:	428b      	cmp	r3, r1
10013246:	d302      	bcc.n	1001324e <__aeabi_uidiv+0x32>
10013248:	1212      	asrs	r2, r2, #8
1001324a:	0209      	lsls	r1, r1, #8
1001324c:	d065      	beq.n	1001331a <__aeabi_uidiv+0xfe>
1001324e:	0b03      	lsrs	r3, r0, #12
10013250:	428b      	cmp	r3, r1
10013252:	d319      	bcc.n	10013288 <__aeabi_uidiv+0x6c>
10013254:	e000      	b.n	10013258 <__aeabi_uidiv+0x3c>
10013256:	0a09      	lsrs	r1, r1, #8
10013258:	0bc3      	lsrs	r3, r0, #15
1001325a:	428b      	cmp	r3, r1
1001325c:	d301      	bcc.n	10013262 <__aeabi_uidiv+0x46>
1001325e:	03cb      	lsls	r3, r1, #15
10013260:	1ac0      	subs	r0, r0, r3
10013262:	4152      	adcs	r2, r2
10013264:	0b83      	lsrs	r3, r0, #14
10013266:	428b      	cmp	r3, r1
10013268:	d301      	bcc.n	1001326e <__aeabi_uidiv+0x52>
1001326a:	038b      	lsls	r3, r1, #14
1001326c:	1ac0      	subs	r0, r0, r3
1001326e:	4152      	adcs	r2, r2
10013270:	0b43      	lsrs	r3, r0, #13
10013272:	428b      	cmp	r3, r1
10013274:	d301      	bcc.n	1001327a <__aeabi_uidiv+0x5e>
10013276:	034b      	lsls	r3, r1, #13
10013278:	1ac0      	subs	r0, r0, r3
1001327a:	4152      	adcs	r2, r2
1001327c:	0b03      	lsrs	r3, r0, #12
1001327e:	428b      	cmp	r3, r1
10013280:	d301      	bcc.n	10013286 <__aeabi_uidiv+0x6a>
10013282:	030b      	lsls	r3, r1, #12
10013284:	1ac0      	subs	r0, r0, r3
10013286:	4152      	adcs	r2, r2
10013288:	0ac3      	lsrs	r3, r0, #11
1001328a:	428b      	cmp	r3, r1
1001328c:	d301      	bcc.n	10013292 <__aeabi_uidiv+0x76>
1001328e:	02cb      	lsls	r3, r1, #11
10013290:	1ac0      	subs	r0, r0, r3
10013292:	4152      	adcs	r2, r2
10013294:	0a83      	lsrs	r3, r0, #10
10013296:	428b      	cmp	r3, r1
10013298:	d301      	bcc.n	1001329e <__aeabi_uidiv+0x82>
1001329a:	028b      	lsls	r3, r1, #10
1001329c:	1ac0      	subs	r0, r0, r3
1001329e:	4152      	adcs	r2, r2
100132a0:	0a43      	lsrs	r3, r0, #9
100132a2:	428b      	cmp	r3, r1
100132a4:	d301      	bcc.n	100132aa <__aeabi_uidiv+0x8e>
100132a6:	024b      	lsls	r3, r1, #9
100132a8:	1ac0      	subs	r0, r0, r3
100132aa:	4152      	adcs	r2, r2
100132ac:	0a03      	lsrs	r3, r0, #8
100132ae:	428b      	cmp	r3, r1
100132b0:	d301      	bcc.n	100132b6 <__aeabi_uidiv+0x9a>
100132b2:	020b      	lsls	r3, r1, #8
100132b4:	1ac0      	subs	r0, r0, r3
100132b6:	4152      	adcs	r2, r2
100132b8:	d2cd      	bcs.n	10013256 <__aeabi_uidiv+0x3a>
100132ba:	09c3      	lsrs	r3, r0, #7
100132bc:	428b      	cmp	r3, r1
100132be:	d301      	bcc.n	100132c4 <__aeabi_uidiv+0xa8>
100132c0:	01cb      	lsls	r3, r1, #7
100132c2:	1ac0      	subs	r0, r0, r3
100132c4:	4152      	adcs	r2, r2
100132c6:	0983      	lsrs	r3, r0, #6
100132c8:	428b      	cmp	r3, r1
100132ca:	d301      	bcc.n	100132d0 <__aeabi_uidiv+0xb4>
100132cc:	018b      	lsls	r3, r1, #6
100132ce:	1ac0      	subs	r0, r0, r3
100132d0:	4152      	adcs	r2, r2
100132d2:	0943      	lsrs	r3, r0, #5
100132d4:	428b      	cmp	r3, r1
100132d6:	d301      	bcc.n	100132dc <__aeabi_uidiv+0xc0>
100132d8:	014b      	lsls	r3, r1, #5
100132da:	1ac0      	subs	r0, r0, r3
100132dc:	4152      	adcs	r2, r2
100132de:	0903      	lsrs	r3, r0, #4
100132e0:	428b      	cmp	r3, r1
100132e2:	d301      	bcc.n	100132e8 <__aeabi_uidiv+0xcc>
100132e4:	010b      	lsls	r3, r1, #4
100132e6:	1ac0      	subs	r0, r0, r3
100132e8:	4152      	adcs	r2, r2
100132ea:	08c3      	lsrs	r3, r0, #3
100132ec:	428b      	cmp	r3, r1
100132ee:	d301      	bcc.n	100132f4 <__aeabi_uidiv+0xd8>
100132f0:	00cb      	lsls	r3, r1, #3
100132f2:	1ac0      	subs	r0, r0, r3
100132f4:	4152      	adcs	r2, r2
100132f6:	0883      	lsrs	r3, r0, #2
100132f8:	428b      	cmp	r3, r1
100132fa:	d301      	bcc.n	10013300 <__aeabi_uidiv+0xe4>
100132fc:	008b      	lsls	r3, r1, #2
100132fe:	1ac0      	subs	r0, r0, r3
10013300:	4152      	adcs	r2, r2
10013302:	0843      	lsrs	r3, r0, #1
10013304:	428b      	cmp	r3, r1
10013306:	d301      	bcc.n	1001330c <__aeabi_uidiv+0xf0>
10013308:	004b      	lsls	r3, r1, #1
1001330a:	1ac0      	subs	r0, r0, r3
1001330c:	4152      	adcs	r2, r2
1001330e:	1a41      	subs	r1, r0, r1
10013310:	d200      	bcs.n	10013314 <__aeabi_uidiv+0xf8>
10013312:	4601      	mov	r1, r0
10013314:	4152      	adcs	r2, r2
10013316:	4610      	mov	r0, r2
10013318:	4770      	bx	lr
1001331a:	e7ff      	b.n	1001331c <__aeabi_uidiv+0x100>
1001331c:	b501      	push	{r0, lr}
1001331e:	2000      	movs	r0, #0
10013320:	f000 f8f0 	bl	10013504 <__aeabi_idiv0>
10013324:	bd02      	pop	{r1, pc}
10013326:	46c0      	nop			; (mov r8, r8)

10013328 <__aeabi_uidivmod>:
10013328:	2900      	cmp	r1, #0
1001332a:	d0f7      	beq.n	1001331c <__aeabi_uidiv+0x100>
1001332c:	e776      	b.n	1001321c <__aeabi_uidiv>
1001332e:	4770      	bx	lr

10013330 <__aeabi_idiv>:
10013330:	4603      	mov	r3, r0
10013332:	430b      	orrs	r3, r1
10013334:	d47f      	bmi.n	10013436 <__aeabi_idiv+0x106>
10013336:	2200      	movs	r2, #0
10013338:	0843      	lsrs	r3, r0, #1
1001333a:	428b      	cmp	r3, r1
1001333c:	d374      	bcc.n	10013428 <__aeabi_idiv+0xf8>
1001333e:	0903      	lsrs	r3, r0, #4
10013340:	428b      	cmp	r3, r1
10013342:	d35f      	bcc.n	10013404 <__aeabi_idiv+0xd4>
10013344:	0a03      	lsrs	r3, r0, #8
10013346:	428b      	cmp	r3, r1
10013348:	d344      	bcc.n	100133d4 <__aeabi_idiv+0xa4>
1001334a:	0b03      	lsrs	r3, r0, #12
1001334c:	428b      	cmp	r3, r1
1001334e:	d328      	bcc.n	100133a2 <__aeabi_idiv+0x72>
10013350:	0c03      	lsrs	r3, r0, #16
10013352:	428b      	cmp	r3, r1
10013354:	d30d      	bcc.n	10013372 <__aeabi_idiv+0x42>
10013356:	22ff      	movs	r2, #255	; 0xff
10013358:	0209      	lsls	r1, r1, #8
1001335a:	ba12      	rev	r2, r2
1001335c:	0c03      	lsrs	r3, r0, #16
1001335e:	428b      	cmp	r3, r1
10013360:	d302      	bcc.n	10013368 <__aeabi_idiv+0x38>
10013362:	1212      	asrs	r2, r2, #8
10013364:	0209      	lsls	r1, r1, #8
10013366:	d065      	beq.n	10013434 <__aeabi_idiv+0x104>
10013368:	0b03      	lsrs	r3, r0, #12
1001336a:	428b      	cmp	r3, r1
1001336c:	d319      	bcc.n	100133a2 <__aeabi_idiv+0x72>
1001336e:	e000      	b.n	10013372 <__aeabi_idiv+0x42>
10013370:	0a09      	lsrs	r1, r1, #8
10013372:	0bc3      	lsrs	r3, r0, #15
10013374:	428b      	cmp	r3, r1
10013376:	d301      	bcc.n	1001337c <__aeabi_idiv+0x4c>
10013378:	03cb      	lsls	r3, r1, #15
1001337a:	1ac0      	subs	r0, r0, r3
1001337c:	4152      	adcs	r2, r2
1001337e:	0b83      	lsrs	r3, r0, #14
10013380:	428b      	cmp	r3, r1
10013382:	d301      	bcc.n	10013388 <__aeabi_idiv+0x58>
10013384:	038b      	lsls	r3, r1, #14
10013386:	1ac0      	subs	r0, r0, r3
10013388:	4152      	adcs	r2, r2
1001338a:	0b43      	lsrs	r3, r0, #13
1001338c:	428b      	cmp	r3, r1
1001338e:	d301      	bcc.n	10013394 <__aeabi_idiv+0x64>
10013390:	034b      	lsls	r3, r1, #13
10013392:	1ac0      	subs	r0, r0, r3
10013394:	4152      	adcs	r2, r2
10013396:	0b03      	lsrs	r3, r0, #12
10013398:	428b      	cmp	r3, r1
1001339a:	d301      	bcc.n	100133a0 <__aeabi_idiv+0x70>
1001339c:	030b      	lsls	r3, r1, #12
1001339e:	1ac0      	subs	r0, r0, r3
100133a0:	4152      	adcs	r2, r2
100133a2:	0ac3      	lsrs	r3, r0, #11
100133a4:	428b      	cmp	r3, r1
100133a6:	d301      	bcc.n	100133ac <__aeabi_idiv+0x7c>
100133a8:	02cb      	lsls	r3, r1, #11
100133aa:	1ac0      	subs	r0, r0, r3
100133ac:	4152      	adcs	r2, r2
100133ae:	0a83      	lsrs	r3, r0, #10
100133b0:	428b      	cmp	r3, r1
100133b2:	d301      	bcc.n	100133b8 <__aeabi_idiv+0x88>
100133b4:	028b      	lsls	r3, r1, #10
100133b6:	1ac0      	subs	r0, r0, r3
100133b8:	4152      	adcs	r2, r2
100133ba:	0a43      	lsrs	r3, r0, #9
100133bc:	428b      	cmp	r3, r1
100133be:	d301      	bcc.n	100133c4 <__aeabi_idiv+0x94>
100133c0:	024b      	lsls	r3, r1, #9
100133c2:	1ac0      	subs	r0, r0, r3
100133c4:	4152      	adcs	r2, r2
100133c6:	0a03      	lsrs	r3, r0, #8
100133c8:	428b      	cmp	r3, r1
100133ca:	d301      	bcc.n	100133d0 <__aeabi_idiv+0xa0>
100133cc:	020b      	lsls	r3, r1, #8
100133ce:	1ac0      	subs	r0, r0, r3
100133d0:	4152      	adcs	r2, r2
100133d2:	d2cd      	bcs.n	10013370 <__aeabi_idiv+0x40>
100133d4:	09c3      	lsrs	r3, r0, #7
100133d6:	428b      	cmp	r3, r1
100133d8:	d301      	bcc.n	100133de <__aeabi_idiv+0xae>
100133da:	01cb      	lsls	r3, r1, #7
100133dc:	1ac0      	subs	r0, r0, r3
100133de:	4152      	adcs	r2, r2
100133e0:	0983      	lsrs	r3, r0, #6
100133e2:	428b      	cmp	r3, r1
100133e4:	d301      	bcc.n	100133ea <__aeabi_idiv+0xba>
100133e6:	018b      	lsls	r3, r1, #6
100133e8:	1ac0      	subs	r0, r0, r3
100133ea:	4152      	adcs	r2, r2
100133ec:	0943      	lsrs	r3, r0, #5
100133ee:	428b      	cmp	r3, r1
100133f0:	d301      	bcc.n	100133f6 <__aeabi_idiv+0xc6>
100133f2:	014b      	lsls	r3, r1, #5
100133f4:	1ac0      	subs	r0, r0, r3
100133f6:	4152      	adcs	r2, r2
100133f8:	0903      	lsrs	r3, r0, #4
100133fa:	428b      	cmp	r3, r1
100133fc:	d301      	bcc.n	10013402 <__aeabi_idiv+0xd2>
100133fe:	010b      	lsls	r3, r1, #4
10013400:	1ac0      	subs	r0, r0, r3
10013402:	4152      	adcs	r2, r2
10013404:	08c3      	lsrs	r3, r0, #3
10013406:	428b      	cmp	r3, r1
10013408:	d301      	bcc.n	1001340e <__aeabi_idiv+0xde>
1001340a:	00cb      	lsls	r3, r1, #3
1001340c:	1ac0      	subs	r0, r0, r3
1001340e:	4152      	adcs	r2, r2
10013410:	0883      	lsrs	r3, r0, #2
10013412:	428b      	cmp	r3, r1
10013414:	d301      	bcc.n	1001341a <__aeabi_idiv+0xea>
10013416:	008b      	lsls	r3, r1, #2
10013418:	1ac0      	subs	r0, r0, r3
1001341a:	4152      	adcs	r2, r2
1001341c:	0843      	lsrs	r3, r0, #1
1001341e:	428b      	cmp	r3, r1
10013420:	d301      	bcc.n	10013426 <__aeabi_idiv+0xf6>
10013422:	004b      	lsls	r3, r1, #1
10013424:	1ac0      	subs	r0, r0, r3
10013426:	4152      	adcs	r2, r2
10013428:	1a41      	subs	r1, r0, r1
1001342a:	d200      	bcs.n	1001342e <__aeabi_idiv+0xfe>
1001342c:	4601      	mov	r1, r0
1001342e:	4152      	adcs	r2, r2
10013430:	4610      	mov	r0, r2
10013432:	4770      	bx	lr
10013434:	e05d      	b.n	100134f2 <__aeabi_idiv+0x1c2>
10013436:	0fca      	lsrs	r2, r1, #31
10013438:	d000      	beq.n	1001343c <__aeabi_idiv+0x10c>
1001343a:	4249      	negs	r1, r1
1001343c:	1003      	asrs	r3, r0, #32
1001343e:	d300      	bcc.n	10013442 <__aeabi_idiv+0x112>
10013440:	4240      	negs	r0, r0
10013442:	4053      	eors	r3, r2
10013444:	2200      	movs	r2, #0
10013446:	469c      	mov	ip, r3
10013448:	0903      	lsrs	r3, r0, #4
1001344a:	428b      	cmp	r3, r1
1001344c:	d32d      	bcc.n	100134aa <__aeabi_idiv+0x17a>
1001344e:	0a03      	lsrs	r3, r0, #8
10013450:	428b      	cmp	r3, r1
10013452:	d312      	bcc.n	1001347a <__aeabi_idiv+0x14a>
10013454:	22fc      	movs	r2, #252	; 0xfc
10013456:	0189      	lsls	r1, r1, #6
10013458:	ba12      	rev	r2, r2
1001345a:	0a03      	lsrs	r3, r0, #8
1001345c:	428b      	cmp	r3, r1
1001345e:	d30c      	bcc.n	1001347a <__aeabi_idiv+0x14a>
10013460:	0189      	lsls	r1, r1, #6
10013462:	1192      	asrs	r2, r2, #6
10013464:	428b      	cmp	r3, r1
10013466:	d308      	bcc.n	1001347a <__aeabi_idiv+0x14a>
10013468:	0189      	lsls	r1, r1, #6
1001346a:	1192      	asrs	r2, r2, #6
1001346c:	428b      	cmp	r3, r1
1001346e:	d304      	bcc.n	1001347a <__aeabi_idiv+0x14a>
10013470:	0189      	lsls	r1, r1, #6
10013472:	d03a      	beq.n	100134ea <__aeabi_idiv+0x1ba>
10013474:	1192      	asrs	r2, r2, #6
10013476:	e000      	b.n	1001347a <__aeabi_idiv+0x14a>
10013478:	0989      	lsrs	r1, r1, #6
1001347a:	09c3      	lsrs	r3, r0, #7
1001347c:	428b      	cmp	r3, r1
1001347e:	d301      	bcc.n	10013484 <__aeabi_idiv+0x154>
10013480:	01cb      	lsls	r3, r1, #7
10013482:	1ac0      	subs	r0, r0, r3
10013484:	4152      	adcs	r2, r2
10013486:	0983      	lsrs	r3, r0, #6
10013488:	428b      	cmp	r3, r1
1001348a:	d301      	bcc.n	10013490 <__aeabi_idiv+0x160>
1001348c:	018b      	lsls	r3, r1, #6
1001348e:	1ac0      	subs	r0, r0, r3
10013490:	4152      	adcs	r2, r2
10013492:	0943      	lsrs	r3, r0, #5
10013494:	428b      	cmp	r3, r1
10013496:	d301      	bcc.n	1001349c <__aeabi_idiv+0x16c>
10013498:	014b      	lsls	r3, r1, #5
1001349a:	1ac0      	subs	r0, r0, r3
1001349c:	4152      	adcs	r2, r2
1001349e:	0903      	lsrs	r3, r0, #4
100134a0:	428b      	cmp	r3, r1
100134a2:	d301      	bcc.n	100134a8 <__aeabi_idiv+0x178>
100134a4:	010b      	lsls	r3, r1, #4
100134a6:	1ac0      	subs	r0, r0, r3
100134a8:	4152      	adcs	r2, r2
100134aa:	08c3      	lsrs	r3, r0, #3
100134ac:	428b      	cmp	r3, r1
100134ae:	d301      	bcc.n	100134b4 <__aeabi_idiv+0x184>
100134b0:	00cb      	lsls	r3, r1, #3
100134b2:	1ac0      	subs	r0, r0, r3
100134b4:	4152      	adcs	r2, r2
100134b6:	0883      	lsrs	r3, r0, #2
100134b8:	428b      	cmp	r3, r1
100134ba:	d301      	bcc.n	100134c0 <__aeabi_idiv+0x190>
100134bc:	008b      	lsls	r3, r1, #2
100134be:	1ac0      	subs	r0, r0, r3
100134c0:	4152      	adcs	r2, r2
100134c2:	d2d9      	bcs.n	10013478 <__aeabi_idiv+0x148>
100134c4:	0843      	lsrs	r3, r0, #1
100134c6:	428b      	cmp	r3, r1
100134c8:	d301      	bcc.n	100134ce <__aeabi_idiv+0x19e>
100134ca:	004b      	lsls	r3, r1, #1
100134cc:	1ac0      	subs	r0, r0, r3
100134ce:	4152      	adcs	r2, r2
100134d0:	1a41      	subs	r1, r0, r1
100134d2:	d200      	bcs.n	100134d6 <__aeabi_idiv+0x1a6>
100134d4:	4601      	mov	r1, r0
100134d6:	4663      	mov	r3, ip
100134d8:	4152      	adcs	r2, r2
100134da:	105b      	asrs	r3, r3, #1
100134dc:	4610      	mov	r0, r2
100134de:	d301      	bcc.n	100134e4 <__aeabi_idiv+0x1b4>
100134e0:	4240      	negs	r0, r0
100134e2:	2b00      	cmp	r3, #0
100134e4:	d500      	bpl.n	100134e8 <__aeabi_idiv+0x1b8>
100134e6:	4249      	negs	r1, r1
100134e8:	4770      	bx	lr
100134ea:	4663      	mov	r3, ip
100134ec:	105b      	asrs	r3, r3, #1
100134ee:	d300      	bcc.n	100134f2 <__aeabi_idiv+0x1c2>
100134f0:	4240      	negs	r0, r0
100134f2:	b501      	push	{r0, lr}
100134f4:	2000      	movs	r0, #0
100134f6:	f000 f805 	bl	10013504 <__aeabi_idiv0>
100134fa:	bd02      	pop	{r1, pc}

100134fc <__aeabi_idivmod>:
100134fc:	2900      	cmp	r1, #0
100134fe:	d0f8      	beq.n	100134f2 <__aeabi_idiv+0x1c2>
10013500:	e716      	b.n	10013330 <__aeabi_idiv>
10013502:	4770      	bx	lr

10013504 <__aeabi_idiv0>:
10013504:	4770      	bx	lr
10013506:	46c0      	nop			; (mov r8, r8)

10013508 <__aeabi_cdrcmple>:
10013508:	4684      	mov	ip, r0
1001350a:	1c10      	adds	r0, r2, #0
1001350c:	4662      	mov	r2, ip
1001350e:	468c      	mov	ip, r1
10013510:	1c19      	adds	r1, r3, #0
10013512:	4663      	mov	r3, ip
10013514:	e000      	b.n	10013518 <__aeabi_cdcmpeq>
10013516:	46c0      	nop			; (mov r8, r8)

10013518 <__aeabi_cdcmpeq>:
10013518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001351a:	f001 fe4f 	bl	100151bc <__ledf2>
1001351e:	2800      	cmp	r0, #0
10013520:	d401      	bmi.n	10013526 <__aeabi_cdcmpeq+0xe>
10013522:	2100      	movs	r1, #0
10013524:	42c8      	cmn	r0, r1
10013526:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013528 <__aeabi_dcmpeq>:
10013528:	b510      	push	{r4, lr}
1001352a:	f001 fda3 	bl	10015074 <__eqdf2>
1001352e:	4240      	negs	r0, r0
10013530:	3001      	adds	r0, #1
10013532:	bd10      	pop	{r4, pc}

10013534 <__aeabi_dcmplt>:
10013534:	b510      	push	{r4, lr}
10013536:	f001 fe41 	bl	100151bc <__ledf2>
1001353a:	2800      	cmp	r0, #0
1001353c:	db01      	blt.n	10013542 <__aeabi_dcmplt+0xe>
1001353e:	2000      	movs	r0, #0
10013540:	bd10      	pop	{r4, pc}
10013542:	2001      	movs	r0, #1
10013544:	bd10      	pop	{r4, pc}
10013546:	46c0      	nop			; (mov r8, r8)

10013548 <__aeabi_dcmple>:
10013548:	b510      	push	{r4, lr}
1001354a:	f001 fe37 	bl	100151bc <__ledf2>
1001354e:	2800      	cmp	r0, #0
10013550:	dd01      	ble.n	10013556 <__aeabi_dcmple+0xe>
10013552:	2000      	movs	r0, #0
10013554:	bd10      	pop	{r4, pc}
10013556:	2001      	movs	r0, #1
10013558:	bd10      	pop	{r4, pc}
1001355a:	46c0      	nop			; (mov r8, r8)

1001355c <__aeabi_dcmpgt>:
1001355c:	b510      	push	{r4, lr}
1001355e:	f001 fdc9 	bl	100150f4 <__gedf2>
10013562:	2800      	cmp	r0, #0
10013564:	dc01      	bgt.n	1001356a <__aeabi_dcmpgt+0xe>
10013566:	2000      	movs	r0, #0
10013568:	bd10      	pop	{r4, pc}
1001356a:	2001      	movs	r0, #1
1001356c:	bd10      	pop	{r4, pc}
1001356e:	46c0      	nop			; (mov r8, r8)

10013570 <__aeabi_dcmpge>:
10013570:	b510      	push	{r4, lr}
10013572:	f001 fdbf 	bl	100150f4 <__gedf2>
10013576:	2800      	cmp	r0, #0
10013578:	da01      	bge.n	1001357e <__aeabi_dcmpge+0xe>
1001357a:	2000      	movs	r0, #0
1001357c:	bd10      	pop	{r4, pc}
1001357e:	2001      	movs	r0, #1
10013580:	bd10      	pop	{r4, pc}
10013582:	46c0      	nop			; (mov r8, r8)

10013584 <__aeabi_cfrcmple>:
10013584:	4684      	mov	ip, r0
10013586:	1c08      	adds	r0, r1, #0
10013588:	4661      	mov	r1, ip
1001358a:	e7ff      	b.n	1001358c <__aeabi_cfcmpeq>

1001358c <__aeabi_cfcmpeq>:
1001358c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001358e:	f000 fb91 	bl	10013cb4 <__lesf2>
10013592:	2800      	cmp	r0, #0
10013594:	d401      	bmi.n	1001359a <__aeabi_cfcmpeq+0xe>
10013596:	2100      	movs	r1, #0
10013598:	42c8      	cmn	r0, r1
1001359a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001359c <__aeabi_fcmpeq>:
1001359c:	b510      	push	{r4, lr}
1001359e:	f000 fb1d 	bl	10013bdc <__eqsf2>
100135a2:	4240      	negs	r0, r0
100135a4:	3001      	adds	r0, #1
100135a6:	bd10      	pop	{r4, pc}

100135a8 <__aeabi_fcmplt>:
100135a8:	b510      	push	{r4, lr}
100135aa:	f000 fb83 	bl	10013cb4 <__lesf2>
100135ae:	2800      	cmp	r0, #0
100135b0:	db01      	blt.n	100135b6 <__aeabi_fcmplt+0xe>
100135b2:	2000      	movs	r0, #0
100135b4:	bd10      	pop	{r4, pc}
100135b6:	2001      	movs	r0, #1
100135b8:	bd10      	pop	{r4, pc}
100135ba:	46c0      	nop			; (mov r8, r8)

100135bc <__aeabi_fcmple>:
100135bc:	b510      	push	{r4, lr}
100135be:	f000 fb79 	bl	10013cb4 <__lesf2>
100135c2:	2800      	cmp	r0, #0
100135c4:	dd01      	ble.n	100135ca <__aeabi_fcmple+0xe>
100135c6:	2000      	movs	r0, #0
100135c8:	bd10      	pop	{r4, pc}
100135ca:	2001      	movs	r0, #1
100135cc:	bd10      	pop	{r4, pc}
100135ce:	46c0      	nop			; (mov r8, r8)

100135d0 <__aeabi_fcmpgt>:
100135d0:	b510      	push	{r4, lr}
100135d2:	f000 fb2b 	bl	10013c2c <__gesf2>
100135d6:	2800      	cmp	r0, #0
100135d8:	dc01      	bgt.n	100135de <__aeabi_fcmpgt+0xe>
100135da:	2000      	movs	r0, #0
100135dc:	bd10      	pop	{r4, pc}
100135de:	2001      	movs	r0, #1
100135e0:	bd10      	pop	{r4, pc}
100135e2:	46c0      	nop			; (mov r8, r8)

100135e4 <__aeabi_fcmpge>:
100135e4:	b510      	push	{r4, lr}
100135e6:	f000 fb21 	bl	10013c2c <__gesf2>
100135ea:	2800      	cmp	r0, #0
100135ec:	da01      	bge.n	100135f2 <__aeabi_fcmpge+0xe>
100135ee:	2000      	movs	r0, #0
100135f0:	bd10      	pop	{r4, pc}
100135f2:	2001      	movs	r0, #1
100135f4:	bd10      	pop	{r4, pc}
100135f6:	46c0      	nop			; (mov r8, r8)

100135f8 <__aeabi_lmul>:
100135f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100135fa:	464f      	mov	r7, r9
100135fc:	4646      	mov	r6, r8
100135fe:	b4c0      	push	{r6, r7}
10013600:	0416      	lsls	r6, r2, #16
10013602:	0c36      	lsrs	r6, r6, #16
10013604:	4699      	mov	r9, r3
10013606:	0033      	movs	r3, r6
10013608:	0405      	lsls	r5, r0, #16
1001360a:	0c2c      	lsrs	r4, r5, #16
1001360c:	0c07      	lsrs	r7, r0, #16
1001360e:	0c15      	lsrs	r5, r2, #16
10013610:	4363      	muls	r3, r4
10013612:	437e      	muls	r6, r7
10013614:	436f      	muls	r7, r5
10013616:	4365      	muls	r5, r4
10013618:	0c1c      	lsrs	r4, r3, #16
1001361a:	19ad      	adds	r5, r5, r6
1001361c:	1964      	adds	r4, r4, r5
1001361e:	469c      	mov	ip, r3
10013620:	42a6      	cmp	r6, r4
10013622:	d903      	bls.n	1001362c <__aeabi_lmul+0x34>
10013624:	2380      	movs	r3, #128	; 0x80
10013626:	025b      	lsls	r3, r3, #9
10013628:	4698      	mov	r8, r3
1001362a:	4447      	add	r7, r8
1001362c:	4663      	mov	r3, ip
1001362e:	0c25      	lsrs	r5, r4, #16
10013630:	19ef      	adds	r7, r5, r7
10013632:	041d      	lsls	r5, r3, #16
10013634:	464b      	mov	r3, r9
10013636:	434a      	muls	r2, r1
10013638:	4343      	muls	r3, r0
1001363a:	0c2d      	lsrs	r5, r5, #16
1001363c:	0424      	lsls	r4, r4, #16
1001363e:	1964      	adds	r4, r4, r5
10013640:	1899      	adds	r1, r3, r2
10013642:	19c9      	adds	r1, r1, r7
10013644:	0020      	movs	r0, r4
10013646:	bc0c      	pop	{r2, r3}
10013648:	4690      	mov	r8, r2
1001364a:	4699      	mov	r9, r3
1001364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001364e:	46c0      	nop			; (mov r8, r8)

10013650 <__aeabi_f2uiz>:
10013650:	219e      	movs	r1, #158	; 0x9e
10013652:	b510      	push	{r4, lr}
10013654:	05c9      	lsls	r1, r1, #23
10013656:	1c04      	adds	r4, r0, #0
10013658:	f7ff ffc4 	bl	100135e4 <__aeabi_fcmpge>
1001365c:	2800      	cmp	r0, #0
1001365e:	d103      	bne.n	10013668 <__aeabi_f2uiz+0x18>
10013660:	1c20      	adds	r0, r4, #0
10013662:	f000 fe1d 	bl	100142a0 <__aeabi_f2iz>
10013666:	bd10      	pop	{r4, pc}
10013668:	219e      	movs	r1, #158	; 0x9e
1001366a:	1c20      	adds	r0, r4, #0
1001366c:	05c9      	lsls	r1, r1, #23
1001366e:	f000 fc79 	bl	10013f64 <__aeabi_fsub>
10013672:	f000 fe15 	bl	100142a0 <__aeabi_f2iz>
10013676:	2380      	movs	r3, #128	; 0x80
10013678:	061b      	lsls	r3, r3, #24
1001367a:	469c      	mov	ip, r3
1001367c:	4460      	add	r0, ip
1001367e:	e7f2      	b.n	10013666 <__aeabi_f2uiz+0x16>

10013680 <__aeabi_d2uiz>:
10013680:	b570      	push	{r4, r5, r6, lr}
10013682:	2200      	movs	r2, #0
10013684:	4b0c      	ldr	r3, [pc, #48]	; (100136b8 <__aeabi_d2uiz+0x38>)
10013686:	0004      	movs	r4, r0
10013688:	000d      	movs	r5, r1
1001368a:	f7ff ff71 	bl	10013570 <__aeabi_dcmpge>
1001368e:	2800      	cmp	r0, #0
10013690:	d104      	bne.n	1001369c <__aeabi_d2uiz+0x1c>
10013692:	0020      	movs	r0, r4
10013694:	0029      	movs	r1, r5
10013696:	f002 fbe9 	bl	10015e6c <__aeabi_d2iz>
1001369a:	bd70      	pop	{r4, r5, r6, pc}
1001369c:	4b06      	ldr	r3, [pc, #24]	; (100136b8 <__aeabi_d2uiz+0x38>)
1001369e:	2200      	movs	r2, #0
100136a0:	0020      	movs	r0, r4
100136a2:	0029      	movs	r1, r5
100136a4:	f002 f86e 	bl	10015784 <__aeabi_dsub>
100136a8:	f002 fbe0 	bl	10015e6c <__aeabi_d2iz>
100136ac:	2380      	movs	r3, #128	; 0x80
100136ae:	061b      	lsls	r3, r3, #24
100136b0:	469c      	mov	ip, r3
100136b2:	4460      	add	r0, ip
100136b4:	e7f1      	b.n	1001369a <__aeabi_d2uiz+0x1a>
100136b6:	46c0      	nop			; (mov r8, r8)
100136b8:	41e00000 	.word	0x41e00000

100136bc <__aeabi_fadd>:
100136bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100136be:	024a      	lsls	r2, r1, #9
100136c0:	0243      	lsls	r3, r0, #9
100136c2:	0044      	lsls	r4, r0, #1
100136c4:	004e      	lsls	r6, r1, #1
100136c6:	0fc5      	lsrs	r5, r0, #31
100136c8:	0e24      	lsrs	r4, r4, #24
100136ca:	0028      	movs	r0, r5
100136cc:	099b      	lsrs	r3, r3, #6
100136ce:	0e36      	lsrs	r6, r6, #24
100136d0:	0fc9      	lsrs	r1, r1, #31
100136d2:	0992      	lsrs	r2, r2, #6
100136d4:	428d      	cmp	r5, r1
100136d6:	d059      	beq.n	1001378c <__aeabi_fadd+0xd0>
100136d8:	1ba0      	subs	r0, r4, r6
100136da:	2800      	cmp	r0, #0
100136dc:	dc00      	bgt.n	100136e0 <__aeabi_fadd+0x24>
100136de:	e08d      	b.n	100137fc <__aeabi_fadd+0x140>
100136e0:	2e00      	cmp	r6, #0
100136e2:	d11a      	bne.n	1001371a <__aeabi_fadd+0x5e>
100136e4:	2a00      	cmp	r2, #0
100136e6:	d000      	beq.n	100136ea <__aeabi_fadd+0x2e>
100136e8:	e079      	b.n	100137de <__aeabi_fadd+0x122>
100136ea:	075a      	lsls	r2, r3, #29
100136ec:	d004      	beq.n	100136f8 <__aeabi_fadd+0x3c>
100136ee:	220f      	movs	r2, #15
100136f0:	401a      	ands	r2, r3
100136f2:	2a04      	cmp	r2, #4
100136f4:	d000      	beq.n	100136f8 <__aeabi_fadd+0x3c>
100136f6:	3304      	adds	r3, #4
100136f8:	015a      	lsls	r2, r3, #5
100136fa:	d538      	bpl.n	1001376e <__aeabi_fadd+0xb2>
100136fc:	3401      	adds	r4, #1
100136fe:	2cff      	cmp	r4, #255	; 0xff
10013700:	d100      	bne.n	10013704 <__aeabi_fadd+0x48>
10013702:	e089      	b.n	10013818 <__aeabi_fadd+0x15c>
10013704:	0028      	movs	r0, r5
10013706:	019b      	lsls	r3, r3, #6
10013708:	0a5b      	lsrs	r3, r3, #9
1001370a:	b2e4      	uxtb	r4, r4
1001370c:	025b      	lsls	r3, r3, #9
1001370e:	05e4      	lsls	r4, r4, #23
10013710:	0a5b      	lsrs	r3, r3, #9
10013712:	4323      	orrs	r3, r4
10013714:	07c0      	lsls	r0, r0, #31
10013716:	4318      	orrs	r0, r3
10013718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001371a:	2cff      	cmp	r4, #255	; 0xff
1001371c:	d0e5      	beq.n	100136ea <__aeabi_fadd+0x2e>
1001371e:	2180      	movs	r1, #128	; 0x80
10013720:	04c9      	lsls	r1, r1, #19
10013722:	430a      	orrs	r2, r1
10013724:	281b      	cmp	r0, #27
10013726:	dd00      	ble.n	1001372a <__aeabi_fadd+0x6e>
10013728:	e089      	b.n	1001383e <__aeabi_fadd+0x182>
1001372a:	0016      	movs	r6, r2
1001372c:	2120      	movs	r1, #32
1001372e:	40c6      	lsrs	r6, r0
10013730:	1a08      	subs	r0, r1, r0
10013732:	4082      	lsls	r2, r0
10013734:	1e51      	subs	r1, r2, #1
10013736:	418a      	sbcs	r2, r1
10013738:	4332      	orrs	r2, r6
1001373a:	1a9b      	subs	r3, r3, r2
1001373c:	015a      	lsls	r2, r3, #5
1001373e:	d514      	bpl.n	1001376a <__aeabi_fadd+0xae>
10013740:	019b      	lsls	r3, r3, #6
10013742:	099e      	lsrs	r6, r3, #6
10013744:	0030      	movs	r0, r6
10013746:	f002 fd21 	bl	1001618c <__clzsi2>
1001374a:	3805      	subs	r0, #5
1001374c:	4086      	lsls	r6, r0
1001374e:	4284      	cmp	r4, r0
10013750:	dc65      	bgt.n	1001381e <__aeabi_fadd+0x162>
10013752:	1b04      	subs	r4, r0, r4
10013754:	0033      	movs	r3, r6
10013756:	2020      	movs	r0, #32
10013758:	3401      	adds	r4, #1
1001375a:	40e3      	lsrs	r3, r4
1001375c:	1b04      	subs	r4, r0, r4
1001375e:	40a6      	lsls	r6, r4
10013760:	1e72      	subs	r2, r6, #1
10013762:	4196      	sbcs	r6, r2
10013764:	2400      	movs	r4, #0
10013766:	4333      	orrs	r3, r6
10013768:	e7bf      	b.n	100136ea <__aeabi_fadd+0x2e>
1001376a:	075a      	lsls	r2, r3, #29
1001376c:	d1bf      	bne.n	100136ee <__aeabi_fadd+0x32>
1001376e:	08df      	lsrs	r7, r3, #3
10013770:	0028      	movs	r0, r5
10013772:	2cff      	cmp	r4, #255	; 0xff
10013774:	d12f      	bne.n	100137d6 <__aeabi_fadd+0x11a>
10013776:	2f00      	cmp	r7, #0
10013778:	d100      	bne.n	1001377c <__aeabi_fadd+0xc0>
1001377a:	e087      	b.n	1001388c <__aeabi_fadd+0x1d0>
1001377c:	2280      	movs	r2, #128	; 0x80
1001377e:	03d2      	lsls	r2, r2, #15
10013780:	0013      	movs	r3, r2
10013782:	433b      	orrs	r3, r7
10013784:	025b      	lsls	r3, r3, #9
10013786:	0a5b      	lsrs	r3, r3, #9
10013788:	24ff      	movs	r4, #255	; 0xff
1001378a:	e7bf      	b.n	1001370c <__aeabi_fadd+0x50>
1001378c:	1ba1      	subs	r1, r4, r6
1001378e:	2900      	cmp	r1, #0
10013790:	dd49      	ble.n	10013826 <__aeabi_fadd+0x16a>
10013792:	2e00      	cmp	r6, #0
10013794:	d029      	beq.n	100137ea <__aeabi_fadd+0x12e>
10013796:	2cff      	cmp	r4, #255	; 0xff
10013798:	d0a7      	beq.n	100136ea <__aeabi_fadd+0x2e>
1001379a:	2680      	movs	r6, #128	; 0x80
1001379c:	04f6      	lsls	r6, r6, #19
1001379e:	4332      	orrs	r2, r6
100137a0:	291b      	cmp	r1, #27
100137a2:	dd00      	ble.n	100137a6 <__aeabi_fadd+0xea>
100137a4:	e08d      	b.n	100138c2 <__aeabi_fadd+0x206>
100137a6:	0017      	movs	r7, r2
100137a8:	2620      	movs	r6, #32
100137aa:	40cf      	lsrs	r7, r1
100137ac:	1a71      	subs	r1, r6, r1
100137ae:	408a      	lsls	r2, r1
100137b0:	1e51      	subs	r1, r2, #1
100137b2:	418a      	sbcs	r2, r1
100137b4:	433a      	orrs	r2, r7
100137b6:	189b      	adds	r3, r3, r2
100137b8:	015a      	lsls	r2, r3, #5
100137ba:	d5d6      	bpl.n	1001376a <__aeabi_fadd+0xae>
100137bc:	3401      	adds	r4, #1
100137be:	2cff      	cmp	r4, #255	; 0xff
100137c0:	d064      	beq.n	1001388c <__aeabi_fadd+0x1d0>
100137c2:	2201      	movs	r2, #1
100137c4:	4976      	ldr	r1, [pc, #472]	; (100139a0 <__aeabi_fadd+0x2e4>)
100137c6:	401a      	ands	r2, r3
100137c8:	085b      	lsrs	r3, r3, #1
100137ca:	400b      	ands	r3, r1
100137cc:	4313      	orrs	r3, r2
100137ce:	e78c      	b.n	100136ea <__aeabi_fadd+0x2e>
100137d0:	1e03      	subs	r3, r0, #0
100137d2:	d1ca      	bne.n	1001376a <__aeabi_fadd+0xae>
100137d4:	2000      	movs	r0, #0
100137d6:	027b      	lsls	r3, r7, #9
100137d8:	0a5b      	lsrs	r3, r3, #9
100137da:	b2e4      	uxtb	r4, r4
100137dc:	e796      	b.n	1001370c <__aeabi_fadd+0x50>
100137de:	3801      	subs	r0, #1
100137e0:	2800      	cmp	r0, #0
100137e2:	d0aa      	beq.n	1001373a <__aeabi_fadd+0x7e>
100137e4:	2cff      	cmp	r4, #255	; 0xff
100137e6:	d19d      	bne.n	10013724 <__aeabi_fadd+0x68>
100137e8:	e77f      	b.n	100136ea <__aeabi_fadd+0x2e>
100137ea:	2a00      	cmp	r2, #0
100137ec:	d100      	bne.n	100137f0 <__aeabi_fadd+0x134>
100137ee:	e77c      	b.n	100136ea <__aeabi_fadd+0x2e>
100137f0:	3901      	subs	r1, #1
100137f2:	2900      	cmp	r1, #0
100137f4:	d0df      	beq.n	100137b6 <__aeabi_fadd+0xfa>
100137f6:	2cff      	cmp	r4, #255	; 0xff
100137f8:	d1d2      	bne.n	100137a0 <__aeabi_fadd+0xe4>
100137fa:	e776      	b.n	100136ea <__aeabi_fadd+0x2e>
100137fc:	2800      	cmp	r0, #0
100137fe:	d120      	bne.n	10013842 <__aeabi_fadd+0x186>
10013800:	1c60      	adds	r0, r4, #1
10013802:	b2c0      	uxtb	r0, r0
10013804:	2801      	cmp	r0, #1
10013806:	dd53      	ble.n	100138b0 <__aeabi_fadd+0x1f4>
10013808:	2780      	movs	r7, #128	; 0x80
1001380a:	1a9e      	subs	r6, r3, r2
1001380c:	04ff      	lsls	r7, r7, #19
1001380e:	4037      	ands	r7, r6
10013810:	d02f      	beq.n	10013872 <__aeabi_fadd+0x1b6>
10013812:	1ad6      	subs	r6, r2, r3
10013814:	000d      	movs	r5, r1
10013816:	e795      	b.n	10013744 <__aeabi_fadd+0x88>
10013818:	0028      	movs	r0, r5
1001381a:	2300      	movs	r3, #0
1001381c:	e776      	b.n	1001370c <__aeabi_fadd+0x50>
1001381e:	4b61      	ldr	r3, [pc, #388]	; (100139a4 <__aeabi_fadd+0x2e8>)
10013820:	1a24      	subs	r4, r4, r0
10013822:	4033      	ands	r3, r6
10013824:	e761      	b.n	100136ea <__aeabi_fadd+0x2e>
10013826:	2900      	cmp	r1, #0
10013828:	d14d      	bne.n	100138c6 <__aeabi_fadd+0x20a>
1001382a:	1c61      	adds	r1, r4, #1
1001382c:	b2ce      	uxtb	r6, r1
1001382e:	2e01      	cmp	r6, #1
10013830:	dd2f      	ble.n	10013892 <__aeabi_fadd+0x1d6>
10013832:	29ff      	cmp	r1, #255	; 0xff
10013834:	d02a      	beq.n	1001388c <__aeabi_fadd+0x1d0>
10013836:	189b      	adds	r3, r3, r2
10013838:	085b      	lsrs	r3, r3, #1
1001383a:	000c      	movs	r4, r1
1001383c:	e755      	b.n	100136ea <__aeabi_fadd+0x2e>
1001383e:	2201      	movs	r2, #1
10013840:	e77b      	b.n	1001373a <__aeabi_fadd+0x7e>
10013842:	2c00      	cmp	r4, #0
10013844:	d11b      	bne.n	1001387e <__aeabi_fadd+0x1c2>
10013846:	2b00      	cmp	r3, #0
10013848:	d05b      	beq.n	10013902 <__aeabi_fadd+0x246>
1001384a:	43c0      	mvns	r0, r0
1001384c:	2800      	cmp	r0, #0
1001384e:	d00c      	beq.n	1001386a <__aeabi_fadd+0x1ae>
10013850:	2eff      	cmp	r6, #255	; 0xff
10013852:	d07e      	beq.n	10013952 <__aeabi_fadd+0x296>
10013854:	281b      	cmp	r0, #27
10013856:	dd00      	ble.n	1001385a <__aeabi_fadd+0x19e>
10013858:	e092      	b.n	10013980 <__aeabi_fadd+0x2c4>
1001385a:	001d      	movs	r5, r3
1001385c:	2420      	movs	r4, #32
1001385e:	40c5      	lsrs	r5, r0
10013860:	1a20      	subs	r0, r4, r0
10013862:	4083      	lsls	r3, r0
10013864:	1e58      	subs	r0, r3, #1
10013866:	4183      	sbcs	r3, r0
10013868:	432b      	orrs	r3, r5
1001386a:	1ad3      	subs	r3, r2, r3
1001386c:	0034      	movs	r4, r6
1001386e:	000d      	movs	r5, r1
10013870:	e764      	b.n	1001373c <__aeabi_fadd+0x80>
10013872:	2e00      	cmp	r6, #0
10013874:	d000      	beq.n	10013878 <__aeabi_fadd+0x1bc>
10013876:	e765      	b.n	10013744 <__aeabi_fadd+0x88>
10013878:	2000      	movs	r0, #0
1001387a:	2400      	movs	r4, #0
1001387c:	e7ab      	b.n	100137d6 <__aeabi_fadd+0x11a>
1001387e:	2eff      	cmp	r6, #255	; 0xff
10013880:	d067      	beq.n	10013952 <__aeabi_fadd+0x296>
10013882:	2480      	movs	r4, #128	; 0x80
10013884:	04e4      	lsls	r4, r4, #19
10013886:	4240      	negs	r0, r0
10013888:	4323      	orrs	r3, r4
1001388a:	e7e3      	b.n	10013854 <__aeabi_fadd+0x198>
1001388c:	24ff      	movs	r4, #255	; 0xff
1001388e:	2300      	movs	r3, #0
10013890:	e73c      	b.n	1001370c <__aeabi_fadd+0x50>
10013892:	2c00      	cmp	r4, #0
10013894:	d161      	bne.n	1001395a <__aeabi_fadd+0x29e>
10013896:	2b00      	cmp	r3, #0
10013898:	d07e      	beq.n	10013998 <__aeabi_fadd+0x2dc>
1001389a:	2a00      	cmp	r2, #0
1001389c:	d100      	bne.n	100138a0 <__aeabi_fadd+0x1e4>
1001389e:	e724      	b.n	100136ea <__aeabi_fadd+0x2e>
100138a0:	189b      	adds	r3, r3, r2
100138a2:	015a      	lsls	r2, r3, #5
100138a4:	d400      	bmi.n	100138a8 <__aeabi_fadd+0x1ec>
100138a6:	e760      	b.n	1001376a <__aeabi_fadd+0xae>
100138a8:	4a3e      	ldr	r2, [pc, #248]	; (100139a4 <__aeabi_fadd+0x2e8>)
100138aa:	000c      	movs	r4, r1
100138ac:	4013      	ands	r3, r2
100138ae:	e71c      	b.n	100136ea <__aeabi_fadd+0x2e>
100138b0:	2c00      	cmp	r4, #0
100138b2:	d11e      	bne.n	100138f2 <__aeabi_fadd+0x236>
100138b4:	2b00      	cmp	r3, #0
100138b6:	d12f      	bne.n	10013918 <__aeabi_fadd+0x25c>
100138b8:	2a00      	cmp	r2, #0
100138ba:	d066      	beq.n	1001398a <__aeabi_fadd+0x2ce>
100138bc:	0013      	movs	r3, r2
100138be:	000d      	movs	r5, r1
100138c0:	e713      	b.n	100136ea <__aeabi_fadd+0x2e>
100138c2:	2201      	movs	r2, #1
100138c4:	e777      	b.n	100137b6 <__aeabi_fadd+0xfa>
100138c6:	2c00      	cmp	r4, #0
100138c8:	d11f      	bne.n	1001390a <__aeabi_fadd+0x24e>
100138ca:	2b00      	cmp	r3, #0
100138cc:	d05a      	beq.n	10013984 <__aeabi_fadd+0x2c8>
100138ce:	43c9      	mvns	r1, r1
100138d0:	2900      	cmp	r1, #0
100138d2:	d00b      	beq.n	100138ec <__aeabi_fadd+0x230>
100138d4:	2eff      	cmp	r6, #255	; 0xff
100138d6:	d050      	beq.n	1001397a <__aeabi_fadd+0x2be>
100138d8:	291b      	cmp	r1, #27
100138da:	dc5f      	bgt.n	1001399c <__aeabi_fadd+0x2e0>
100138dc:	001f      	movs	r7, r3
100138de:	2420      	movs	r4, #32
100138e0:	40cf      	lsrs	r7, r1
100138e2:	1a61      	subs	r1, r4, r1
100138e4:	408b      	lsls	r3, r1
100138e6:	1e59      	subs	r1, r3, #1
100138e8:	418b      	sbcs	r3, r1
100138ea:	433b      	orrs	r3, r7
100138ec:	189b      	adds	r3, r3, r2
100138ee:	0034      	movs	r4, r6
100138f0:	e762      	b.n	100137b8 <__aeabi_fadd+0xfc>
100138f2:	2b00      	cmp	r3, #0
100138f4:	d11c      	bne.n	10013930 <__aeabi_fadd+0x274>
100138f6:	2a00      	cmp	r2, #0
100138f8:	d04a      	beq.n	10013990 <__aeabi_fadd+0x2d4>
100138fa:	0013      	movs	r3, r2
100138fc:	000d      	movs	r5, r1
100138fe:	24ff      	movs	r4, #255	; 0xff
10013900:	e6f3      	b.n	100136ea <__aeabi_fadd+0x2e>
10013902:	0013      	movs	r3, r2
10013904:	0034      	movs	r4, r6
10013906:	000d      	movs	r5, r1
10013908:	e6ef      	b.n	100136ea <__aeabi_fadd+0x2e>
1001390a:	2eff      	cmp	r6, #255	; 0xff
1001390c:	d035      	beq.n	1001397a <__aeabi_fadd+0x2be>
1001390e:	2480      	movs	r4, #128	; 0x80
10013910:	04e4      	lsls	r4, r4, #19
10013912:	4249      	negs	r1, r1
10013914:	4323      	orrs	r3, r4
10013916:	e7df      	b.n	100138d8 <__aeabi_fadd+0x21c>
10013918:	2a00      	cmp	r2, #0
1001391a:	d100      	bne.n	1001391e <__aeabi_fadd+0x262>
1001391c:	e6e5      	b.n	100136ea <__aeabi_fadd+0x2e>
1001391e:	2780      	movs	r7, #128	; 0x80
10013920:	1a98      	subs	r0, r3, r2
10013922:	04ff      	lsls	r7, r7, #19
10013924:	4007      	ands	r7, r0
10013926:	d100      	bne.n	1001392a <__aeabi_fadd+0x26e>
10013928:	e752      	b.n	100137d0 <__aeabi_fadd+0x114>
1001392a:	1ad3      	subs	r3, r2, r3
1001392c:	000d      	movs	r5, r1
1001392e:	e6dc      	b.n	100136ea <__aeabi_fadd+0x2e>
10013930:	24ff      	movs	r4, #255	; 0xff
10013932:	2a00      	cmp	r2, #0
10013934:	d100      	bne.n	10013938 <__aeabi_fadd+0x27c>
10013936:	e6d8      	b.n	100136ea <__aeabi_fadd+0x2e>
10013938:	2080      	movs	r0, #128	; 0x80
1001393a:	08db      	lsrs	r3, r3, #3
1001393c:	03c0      	lsls	r0, r0, #15
1001393e:	4203      	tst	r3, r0
10013940:	d004      	beq.n	1001394c <__aeabi_fadd+0x290>
10013942:	08d2      	lsrs	r2, r2, #3
10013944:	4202      	tst	r2, r0
10013946:	d101      	bne.n	1001394c <__aeabi_fadd+0x290>
10013948:	0013      	movs	r3, r2
1001394a:	000d      	movs	r5, r1
1001394c:	00db      	lsls	r3, r3, #3
1001394e:	24ff      	movs	r4, #255	; 0xff
10013950:	e6cb      	b.n	100136ea <__aeabi_fadd+0x2e>
10013952:	0013      	movs	r3, r2
10013954:	24ff      	movs	r4, #255	; 0xff
10013956:	000d      	movs	r5, r1
10013958:	e6c7      	b.n	100136ea <__aeabi_fadd+0x2e>
1001395a:	2b00      	cmp	r3, #0
1001395c:	d00d      	beq.n	1001397a <__aeabi_fadd+0x2be>
1001395e:	24ff      	movs	r4, #255	; 0xff
10013960:	2a00      	cmp	r2, #0
10013962:	d100      	bne.n	10013966 <__aeabi_fadd+0x2aa>
10013964:	e6c1      	b.n	100136ea <__aeabi_fadd+0x2e>
10013966:	2180      	movs	r1, #128	; 0x80
10013968:	08db      	lsrs	r3, r3, #3
1001396a:	03c9      	lsls	r1, r1, #15
1001396c:	420b      	tst	r3, r1
1001396e:	d0ed      	beq.n	1001394c <__aeabi_fadd+0x290>
10013970:	08d2      	lsrs	r2, r2, #3
10013972:	420a      	tst	r2, r1
10013974:	d1ea      	bne.n	1001394c <__aeabi_fadd+0x290>
10013976:	0013      	movs	r3, r2
10013978:	e7e8      	b.n	1001394c <__aeabi_fadd+0x290>
1001397a:	0013      	movs	r3, r2
1001397c:	24ff      	movs	r4, #255	; 0xff
1001397e:	e6b4      	b.n	100136ea <__aeabi_fadd+0x2e>
10013980:	2301      	movs	r3, #1
10013982:	e772      	b.n	1001386a <__aeabi_fadd+0x1ae>
10013984:	0013      	movs	r3, r2
10013986:	0034      	movs	r4, r6
10013988:	e6af      	b.n	100136ea <__aeabi_fadd+0x2e>
1001398a:	2700      	movs	r7, #0
1001398c:	2000      	movs	r0, #0
1001398e:	e722      	b.n	100137d6 <__aeabi_fadd+0x11a>
10013990:	2780      	movs	r7, #128	; 0x80
10013992:	2000      	movs	r0, #0
10013994:	03ff      	lsls	r7, r7, #15
10013996:	e6f1      	b.n	1001377c <__aeabi_fadd+0xc0>
10013998:	0013      	movs	r3, r2
1001399a:	e6a6      	b.n	100136ea <__aeabi_fadd+0x2e>
1001399c:	2301      	movs	r3, #1
1001399e:	e7a5      	b.n	100138ec <__aeabi_fadd+0x230>
100139a0:	7dffffff 	.word	0x7dffffff
100139a4:	fbffffff 	.word	0xfbffffff

100139a8 <__aeabi_fdiv>:
100139a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100139aa:	4656      	mov	r6, sl
100139ac:	4644      	mov	r4, r8
100139ae:	465f      	mov	r7, fp
100139b0:	464d      	mov	r5, r9
100139b2:	b4f0      	push	{r4, r5, r6, r7}
100139b4:	0244      	lsls	r4, r0, #9
100139b6:	0046      	lsls	r6, r0, #1
100139b8:	0fc7      	lsrs	r7, r0, #31
100139ba:	b083      	sub	sp, #12
100139bc:	4688      	mov	r8, r1
100139be:	0a65      	lsrs	r5, r4, #9
100139c0:	0e36      	lsrs	r6, r6, #24
100139c2:	46ba      	mov	sl, r7
100139c4:	d03d      	beq.n	10013a42 <__aeabi_fdiv+0x9a>
100139c6:	2eff      	cmp	r6, #255	; 0xff
100139c8:	d022      	beq.n	10013a10 <__aeabi_fdiv+0x68>
100139ca:	2300      	movs	r3, #0
100139cc:	00ec      	lsls	r4, r5, #3
100139ce:	2580      	movs	r5, #128	; 0x80
100139d0:	4699      	mov	r9, r3
100139d2:	469b      	mov	fp, r3
100139d4:	04ed      	lsls	r5, r5, #19
100139d6:	4325      	orrs	r5, r4
100139d8:	3e7f      	subs	r6, #127	; 0x7f
100139da:	4643      	mov	r3, r8
100139dc:	025c      	lsls	r4, r3, #9
100139de:	0058      	lsls	r0, r3, #1
100139e0:	0fdb      	lsrs	r3, r3, #31
100139e2:	0a64      	lsrs	r4, r4, #9
100139e4:	0e00      	lsrs	r0, r0, #24
100139e6:	4698      	mov	r8, r3
100139e8:	d036      	beq.n	10013a58 <__aeabi_fdiv+0xb0>
100139ea:	28ff      	cmp	r0, #255	; 0xff
100139ec:	d030      	beq.n	10013a50 <__aeabi_fdiv+0xa8>
100139ee:	2380      	movs	r3, #128	; 0x80
100139f0:	2100      	movs	r1, #0
100139f2:	00e4      	lsls	r4, r4, #3
100139f4:	04db      	lsls	r3, r3, #19
100139f6:	431c      	orrs	r4, r3
100139f8:	387f      	subs	r0, #127	; 0x7f
100139fa:	1a30      	subs	r0, r6, r0
100139fc:	9001      	str	r0, [sp, #4]
100139fe:	4648      	mov	r0, r9
10013a00:	4642      	mov	r2, r8
10013a02:	4308      	orrs	r0, r1
10013a04:	4e72      	ldr	r6, [pc, #456]	; (10013bd0 <__aeabi_fdiv+0x228>)
10013a06:	0080      	lsls	r0, r0, #2
10013a08:	5830      	ldr	r0, [r6, r0]
10013a0a:	407a      	eors	r2, r7
10013a0c:	0013      	movs	r3, r2
10013a0e:	4687      	mov	pc, r0
10013a10:	2d00      	cmp	r5, #0
10013a12:	d144      	bne.n	10013a9e <__aeabi_fdiv+0xf6>
10013a14:	2308      	movs	r3, #8
10013a16:	4699      	mov	r9, r3
10013a18:	3b06      	subs	r3, #6
10013a1a:	469b      	mov	fp, r3
10013a1c:	e7dd      	b.n	100139da <__aeabi_fdiv+0x32>
10013a1e:	2201      	movs	r2, #1
10013a20:	20ff      	movs	r0, #255	; 0xff
10013a22:	2400      	movs	r4, #0
10013a24:	401a      	ands	r2, r3
10013a26:	0264      	lsls	r4, r4, #9
10013a28:	05c3      	lsls	r3, r0, #23
10013a2a:	0a64      	lsrs	r4, r4, #9
10013a2c:	07d2      	lsls	r2, r2, #31
10013a2e:	431c      	orrs	r4, r3
10013a30:	4314      	orrs	r4, r2
10013a32:	0020      	movs	r0, r4
10013a34:	b003      	add	sp, #12
10013a36:	bc3c      	pop	{r2, r3, r4, r5}
10013a38:	4690      	mov	r8, r2
10013a3a:	4699      	mov	r9, r3
10013a3c:	46a2      	mov	sl, r4
10013a3e:	46ab      	mov	fp, r5
10013a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a42:	2d00      	cmp	r5, #0
10013a44:	d120      	bne.n	10013a88 <__aeabi_fdiv+0xe0>
10013a46:	2304      	movs	r3, #4
10013a48:	4699      	mov	r9, r3
10013a4a:	3b03      	subs	r3, #3
10013a4c:	469b      	mov	fp, r3
10013a4e:	e7c4      	b.n	100139da <__aeabi_fdiv+0x32>
10013a50:	2c00      	cmp	r4, #0
10013a52:	d117      	bne.n	10013a84 <__aeabi_fdiv+0xdc>
10013a54:	2102      	movs	r1, #2
10013a56:	e002      	b.n	10013a5e <__aeabi_fdiv+0xb6>
10013a58:	2c00      	cmp	r4, #0
10013a5a:	d10a      	bne.n	10013a72 <__aeabi_fdiv+0xca>
10013a5c:	2101      	movs	r1, #1
10013a5e:	1a32      	subs	r2, r6, r0
10013a60:	9201      	str	r2, [sp, #4]
10013a62:	464a      	mov	r2, r9
10013a64:	4643      	mov	r3, r8
10013a66:	430a      	orrs	r2, r1
10013a68:	485a      	ldr	r0, [pc, #360]	; (10013bd4 <__aeabi_fdiv+0x22c>)
10013a6a:	0092      	lsls	r2, r2, #2
10013a6c:	5882      	ldr	r2, [r0, r2]
10013a6e:	407b      	eors	r3, r7
10013a70:	4697      	mov	pc, r2
10013a72:	0020      	movs	r0, r4
10013a74:	f002 fb8a 	bl	1001618c <__clzsi2>
10013a78:	1f43      	subs	r3, r0, #5
10013a7a:	3076      	adds	r0, #118	; 0x76
10013a7c:	409c      	lsls	r4, r3
10013a7e:	4240      	negs	r0, r0
10013a80:	2100      	movs	r1, #0
10013a82:	e7ba      	b.n	100139fa <__aeabi_fdiv+0x52>
10013a84:	2103      	movs	r1, #3
10013a86:	e7b8      	b.n	100139fa <__aeabi_fdiv+0x52>
10013a88:	0028      	movs	r0, r5
10013a8a:	f002 fb7f 	bl	1001618c <__clzsi2>
10013a8e:	1f43      	subs	r3, r0, #5
10013a90:	409d      	lsls	r5, r3
10013a92:	2300      	movs	r3, #0
10013a94:	3076      	adds	r0, #118	; 0x76
10013a96:	4246      	negs	r6, r0
10013a98:	4699      	mov	r9, r3
10013a9a:	469b      	mov	fp, r3
10013a9c:	e79d      	b.n	100139da <__aeabi_fdiv+0x32>
10013a9e:	230c      	movs	r3, #12
10013aa0:	4699      	mov	r9, r3
10013aa2:	3b09      	subs	r3, #9
10013aa4:	469b      	mov	fp, r3
10013aa6:	e798      	b.n	100139da <__aeabi_fdiv+0x32>
10013aa8:	2480      	movs	r4, #128	; 0x80
10013aaa:	2200      	movs	r2, #0
10013aac:	03e4      	lsls	r4, r4, #15
10013aae:	20ff      	movs	r0, #255	; 0xff
10013ab0:	e7b9      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013ab2:	2400      	movs	r4, #0
10013ab4:	46c2      	mov	sl, r8
10013ab6:	468b      	mov	fp, r1
10013ab8:	465a      	mov	r2, fp
10013aba:	4653      	mov	r3, sl
10013abc:	2a02      	cmp	r2, #2
10013abe:	d0ae      	beq.n	10013a1e <__aeabi_fdiv+0x76>
10013ac0:	2a03      	cmp	r2, #3
10013ac2:	d07d      	beq.n	10013bc0 <__aeabi_fdiv+0x218>
10013ac4:	2a01      	cmp	r2, #1
10013ac6:	d131      	bne.n	10013b2c <__aeabi_fdiv+0x184>
10013ac8:	2201      	movs	r2, #1
10013aca:	2000      	movs	r0, #0
10013acc:	401a      	ands	r2, r3
10013ace:	2400      	movs	r4, #0
10013ad0:	e7a9      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013ad2:	2201      	movs	r2, #1
10013ad4:	1a10      	subs	r0, r2, r0
10013ad6:	281b      	cmp	r0, #27
10013ad8:	dd56      	ble.n	10013b88 <__aeabi_fdiv+0x1e0>
10013ada:	401a      	ands	r2, r3
10013adc:	2000      	movs	r0, #0
10013ade:	2400      	movs	r4, #0
10013ae0:	e7a1      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013ae2:	2380      	movs	r3, #128	; 0x80
10013ae4:	03db      	lsls	r3, r3, #15
10013ae6:	421d      	tst	r5, r3
10013ae8:	d14b      	bne.n	10013b82 <__aeabi_fdiv+0x1da>
10013aea:	2380      	movs	r3, #128	; 0x80
10013aec:	03db      	lsls	r3, r3, #15
10013aee:	432b      	orrs	r3, r5
10013af0:	025c      	lsls	r4, r3, #9
10013af2:	0a64      	lsrs	r4, r4, #9
10013af4:	003a      	movs	r2, r7
10013af6:	20ff      	movs	r0, #255	; 0xff
10013af8:	e795      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013afa:	016d      	lsls	r5, r5, #5
10013afc:	0160      	lsls	r0, r4, #5
10013afe:	4285      	cmp	r5, r0
10013b00:	d230      	bcs.n	10013b64 <__aeabi_fdiv+0x1bc>
10013b02:	9a01      	ldr	r2, [sp, #4]
10013b04:	2400      	movs	r4, #0
10013b06:	3a01      	subs	r2, #1
10013b08:	9201      	str	r2, [sp, #4]
10013b0a:	221b      	movs	r2, #27
10013b0c:	2701      	movs	r7, #1
10013b0e:	0029      	movs	r1, r5
10013b10:	0064      	lsls	r4, r4, #1
10013b12:	006d      	lsls	r5, r5, #1
10013b14:	2900      	cmp	r1, #0
10013b16:	db01      	blt.n	10013b1c <__aeabi_fdiv+0x174>
10013b18:	42a8      	cmp	r0, r5
10013b1a:	d801      	bhi.n	10013b20 <__aeabi_fdiv+0x178>
10013b1c:	1a2d      	subs	r5, r5, r0
10013b1e:	433c      	orrs	r4, r7
10013b20:	3a01      	subs	r2, #1
10013b22:	2a00      	cmp	r2, #0
10013b24:	d1f3      	bne.n	10013b0e <__aeabi_fdiv+0x166>
10013b26:	1e6a      	subs	r2, r5, #1
10013b28:	4195      	sbcs	r5, r2
10013b2a:	432c      	orrs	r4, r5
10013b2c:	9801      	ldr	r0, [sp, #4]
10013b2e:	307f      	adds	r0, #127	; 0x7f
10013b30:	2800      	cmp	r0, #0
10013b32:	ddce      	ble.n	10013ad2 <__aeabi_fdiv+0x12a>
10013b34:	0762      	lsls	r2, r4, #29
10013b36:	d004      	beq.n	10013b42 <__aeabi_fdiv+0x19a>
10013b38:	220f      	movs	r2, #15
10013b3a:	4022      	ands	r2, r4
10013b3c:	2a04      	cmp	r2, #4
10013b3e:	d000      	beq.n	10013b42 <__aeabi_fdiv+0x19a>
10013b40:	3404      	adds	r4, #4
10013b42:	0122      	lsls	r2, r4, #4
10013b44:	d503      	bpl.n	10013b4e <__aeabi_fdiv+0x1a6>
10013b46:	4a24      	ldr	r2, [pc, #144]	; (10013bd8 <__aeabi_fdiv+0x230>)
10013b48:	9801      	ldr	r0, [sp, #4]
10013b4a:	4014      	ands	r4, r2
10013b4c:	3080      	adds	r0, #128	; 0x80
10013b4e:	28fe      	cmp	r0, #254	; 0xfe
10013b50:	dd00      	ble.n	10013b54 <__aeabi_fdiv+0x1ac>
10013b52:	e764      	b.n	10013a1e <__aeabi_fdiv+0x76>
10013b54:	2201      	movs	r2, #1
10013b56:	01a4      	lsls	r4, r4, #6
10013b58:	0a64      	lsrs	r4, r4, #9
10013b5a:	b2c0      	uxtb	r0, r0
10013b5c:	401a      	ands	r2, r3
10013b5e:	e762      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013b60:	002c      	movs	r4, r5
10013b62:	e7a9      	b.n	10013ab8 <__aeabi_fdiv+0x110>
10013b64:	1a2d      	subs	r5, r5, r0
10013b66:	221a      	movs	r2, #26
10013b68:	2401      	movs	r4, #1
10013b6a:	e7cf      	b.n	10013b0c <__aeabi_fdiv+0x164>
10013b6c:	026b      	lsls	r3, r5, #9
10013b6e:	d5bc      	bpl.n	10013aea <__aeabi_fdiv+0x142>
10013b70:	2400      	movs	r4, #0
10013b72:	2380      	movs	r3, #128	; 0x80
10013b74:	03db      	lsls	r3, r3, #15
10013b76:	431c      	orrs	r4, r3
10013b78:	0264      	lsls	r4, r4, #9
10013b7a:	0a64      	lsrs	r4, r4, #9
10013b7c:	4642      	mov	r2, r8
10013b7e:	20ff      	movs	r0, #255	; 0xff
10013b80:	e751      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013b82:	421c      	tst	r4, r3
10013b84:	d1b3      	bne.n	10013aee <__aeabi_fdiv+0x146>
10013b86:	e7f4      	b.n	10013b72 <__aeabi_fdiv+0x1ca>
10013b88:	0021      	movs	r1, r4
10013b8a:	2220      	movs	r2, #32
10013b8c:	40c1      	lsrs	r1, r0
10013b8e:	1a10      	subs	r0, r2, r0
10013b90:	4084      	lsls	r4, r0
10013b92:	1e62      	subs	r2, r4, #1
10013b94:	4194      	sbcs	r4, r2
10013b96:	430c      	orrs	r4, r1
10013b98:	0762      	lsls	r2, r4, #29
10013b9a:	d004      	beq.n	10013ba6 <__aeabi_fdiv+0x1fe>
10013b9c:	220f      	movs	r2, #15
10013b9e:	4022      	ands	r2, r4
10013ba0:	2a04      	cmp	r2, #4
10013ba2:	d000      	beq.n	10013ba6 <__aeabi_fdiv+0x1fe>
10013ba4:	3404      	adds	r4, #4
10013ba6:	0162      	lsls	r2, r4, #5
10013ba8:	d504      	bpl.n	10013bb4 <__aeabi_fdiv+0x20c>
10013baa:	2201      	movs	r2, #1
10013bac:	2001      	movs	r0, #1
10013bae:	401a      	ands	r2, r3
10013bb0:	2400      	movs	r4, #0
10013bb2:	e738      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013bb4:	2201      	movs	r2, #1
10013bb6:	01a4      	lsls	r4, r4, #6
10013bb8:	0a64      	lsrs	r4, r4, #9
10013bba:	401a      	ands	r2, r3
10013bbc:	2000      	movs	r0, #0
10013bbe:	e732      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013bc0:	2380      	movs	r3, #128	; 0x80
10013bc2:	03db      	lsls	r3, r3, #15
10013bc4:	431c      	orrs	r4, r3
10013bc6:	0264      	lsls	r4, r4, #9
10013bc8:	0a64      	lsrs	r4, r4, #9
10013bca:	4652      	mov	r2, sl
10013bcc:	20ff      	movs	r0, #255	; 0xff
10013bce:	e72a      	b.n	10013a26 <__aeabi_fdiv+0x7e>
10013bd0:	10018398 	.word	0x10018398
10013bd4:	100183d8 	.word	0x100183d8
10013bd8:	f7ffffff 	.word	0xf7ffffff

10013bdc <__eqsf2>:
10013bdc:	0243      	lsls	r3, r0, #9
10013bde:	b570      	push	{r4, r5, r6, lr}
10013be0:	0042      	lsls	r2, r0, #1
10013be2:	004c      	lsls	r4, r1, #1
10013be4:	0a5d      	lsrs	r5, r3, #9
10013be6:	0fc3      	lsrs	r3, r0, #31
10013be8:	0248      	lsls	r0, r1, #9
10013bea:	0e12      	lsrs	r2, r2, #24
10013bec:	0a46      	lsrs	r6, r0, #9
10013bee:	0e24      	lsrs	r4, r4, #24
10013bf0:	0fc9      	lsrs	r1, r1, #31
10013bf2:	2aff      	cmp	r2, #255	; 0xff
10013bf4:	d00f      	beq.n	10013c16 <__eqsf2+0x3a>
10013bf6:	2cff      	cmp	r4, #255	; 0xff
10013bf8:	d011      	beq.n	10013c1e <__eqsf2+0x42>
10013bfa:	2001      	movs	r0, #1
10013bfc:	42a2      	cmp	r2, r4
10013bfe:	d000      	beq.n	10013c02 <__eqsf2+0x26>
10013c00:	bd70      	pop	{r4, r5, r6, pc}
10013c02:	42b5      	cmp	r5, r6
10013c04:	d1fc      	bne.n	10013c00 <__eqsf2+0x24>
10013c06:	428b      	cmp	r3, r1
10013c08:	d00d      	beq.n	10013c26 <__eqsf2+0x4a>
10013c0a:	2a00      	cmp	r2, #0
10013c0c:	d1f8      	bne.n	10013c00 <__eqsf2+0x24>
10013c0e:	0028      	movs	r0, r5
10013c10:	1e43      	subs	r3, r0, #1
10013c12:	4198      	sbcs	r0, r3
10013c14:	e7f4      	b.n	10013c00 <__eqsf2+0x24>
10013c16:	2001      	movs	r0, #1
10013c18:	2d00      	cmp	r5, #0
10013c1a:	d1f1      	bne.n	10013c00 <__eqsf2+0x24>
10013c1c:	e7eb      	b.n	10013bf6 <__eqsf2+0x1a>
10013c1e:	2001      	movs	r0, #1
10013c20:	2e00      	cmp	r6, #0
10013c22:	d1ed      	bne.n	10013c00 <__eqsf2+0x24>
10013c24:	e7e9      	b.n	10013bfa <__eqsf2+0x1e>
10013c26:	2000      	movs	r0, #0
10013c28:	e7ea      	b.n	10013c00 <__eqsf2+0x24>
10013c2a:	46c0      	nop			; (mov r8, r8)

10013c2c <__gesf2>:
10013c2c:	0243      	lsls	r3, r0, #9
10013c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c30:	0042      	lsls	r2, r0, #1
10013c32:	0a5d      	lsrs	r5, r3, #9
10013c34:	0fc3      	lsrs	r3, r0, #31
10013c36:	0248      	lsls	r0, r1, #9
10013c38:	0a44      	lsrs	r4, r0, #9
10013c3a:	0048      	lsls	r0, r1, #1
10013c3c:	0e12      	lsrs	r2, r2, #24
10013c3e:	0e00      	lsrs	r0, r0, #24
10013c40:	0fc9      	lsrs	r1, r1, #31
10013c42:	2aff      	cmp	r2, #255	; 0xff
10013c44:	d01f      	beq.n	10013c86 <__gesf2+0x5a>
10013c46:	28ff      	cmp	r0, #255	; 0xff
10013c48:	d022      	beq.n	10013c90 <__gesf2+0x64>
10013c4a:	2a00      	cmp	r2, #0
10013c4c:	d109      	bne.n	10013c62 <__gesf2+0x36>
10013c4e:	426e      	negs	r6, r5
10013c50:	416e      	adcs	r6, r5
10013c52:	2800      	cmp	r0, #0
10013c54:	d10f      	bne.n	10013c76 <__gesf2+0x4a>
10013c56:	2c00      	cmp	r4, #0
10013c58:	d10d      	bne.n	10013c76 <__gesf2+0x4a>
10013c5a:	2000      	movs	r0, #0
10013c5c:	2d00      	cmp	r5, #0
10013c5e:	d009      	beq.n	10013c74 <__gesf2+0x48>
10013c60:	e005      	b.n	10013c6e <__gesf2+0x42>
10013c62:	2800      	cmp	r0, #0
10013c64:	d101      	bne.n	10013c6a <__gesf2+0x3e>
10013c66:	2c00      	cmp	r4, #0
10013c68:	d001      	beq.n	10013c6e <__gesf2+0x42>
10013c6a:	428b      	cmp	r3, r1
10013c6c:	d013      	beq.n	10013c96 <__gesf2+0x6a>
10013c6e:	4258      	negs	r0, r3
10013c70:	2301      	movs	r3, #1
10013c72:	4318      	orrs	r0, r3
10013c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c76:	2e00      	cmp	r6, #0
10013c78:	d0f7      	beq.n	10013c6a <__gesf2+0x3e>
10013c7a:	4248      	negs	r0, r1
10013c7c:	4141      	adcs	r1, r0
10013c7e:	2001      	movs	r0, #1
10013c80:	4249      	negs	r1, r1
10013c82:	4308      	orrs	r0, r1
10013c84:	e7f6      	b.n	10013c74 <__gesf2+0x48>
10013c86:	2d00      	cmp	r5, #0
10013c88:	d0dd      	beq.n	10013c46 <__gesf2+0x1a>
10013c8a:	2002      	movs	r0, #2
10013c8c:	4240      	negs	r0, r0
10013c8e:	e7f1      	b.n	10013c74 <__gesf2+0x48>
10013c90:	2c00      	cmp	r4, #0
10013c92:	d0da      	beq.n	10013c4a <__gesf2+0x1e>
10013c94:	e7f9      	b.n	10013c8a <__gesf2+0x5e>
10013c96:	4282      	cmp	r2, r0
10013c98:	dce9      	bgt.n	10013c6e <__gesf2+0x42>
10013c9a:	db04      	blt.n	10013ca6 <__gesf2+0x7a>
10013c9c:	42a5      	cmp	r5, r4
10013c9e:	d8e6      	bhi.n	10013c6e <__gesf2+0x42>
10013ca0:	2000      	movs	r0, #0
10013ca2:	42a5      	cmp	r5, r4
10013ca4:	d2e6      	bcs.n	10013c74 <__gesf2+0x48>
10013ca6:	4258      	negs	r0, r3
10013ca8:	4143      	adcs	r3, r0
10013caa:	2001      	movs	r0, #1
10013cac:	425b      	negs	r3, r3
10013cae:	4318      	orrs	r0, r3
10013cb0:	e7e0      	b.n	10013c74 <__gesf2+0x48>
10013cb2:	46c0      	nop			; (mov r8, r8)

10013cb4 <__lesf2>:
10013cb4:	0243      	lsls	r3, r0, #9
10013cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
10013cb8:	0042      	lsls	r2, r0, #1
10013cba:	004c      	lsls	r4, r1, #1
10013cbc:	0a5e      	lsrs	r6, r3, #9
10013cbe:	0fc3      	lsrs	r3, r0, #31
10013cc0:	0248      	lsls	r0, r1, #9
10013cc2:	0e12      	lsrs	r2, r2, #24
10013cc4:	0a45      	lsrs	r5, r0, #9
10013cc6:	0e24      	lsrs	r4, r4, #24
10013cc8:	0fc9      	lsrs	r1, r1, #31
10013cca:	2aff      	cmp	r2, #255	; 0xff
10013ccc:	d017      	beq.n	10013cfe <__lesf2+0x4a>
10013cce:	2cff      	cmp	r4, #255	; 0xff
10013cd0:	d019      	beq.n	10013d06 <__lesf2+0x52>
10013cd2:	2a00      	cmp	r2, #0
10013cd4:	d10b      	bne.n	10013cee <__lesf2+0x3a>
10013cd6:	4270      	negs	r0, r6
10013cd8:	4170      	adcs	r0, r6
10013cda:	2c00      	cmp	r4, #0
10013cdc:	d017      	beq.n	10013d0e <__lesf2+0x5a>
10013cde:	2800      	cmp	r0, #0
10013ce0:	d007      	beq.n	10013cf2 <__lesf2+0x3e>
10013ce2:	4248      	negs	r0, r1
10013ce4:	4141      	adcs	r1, r0
10013ce6:	2001      	movs	r0, #1
10013ce8:	4249      	negs	r1, r1
10013cea:	4308      	orrs	r0, r1
10013cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013cee:	2c00      	cmp	r4, #0
10013cf0:	d013      	beq.n	10013d1a <__lesf2+0x66>
10013cf2:	428b      	cmp	r3, r1
10013cf4:	d014      	beq.n	10013d20 <__lesf2+0x6c>
10013cf6:	4258      	negs	r0, r3
10013cf8:	2301      	movs	r3, #1
10013cfa:	4318      	orrs	r0, r3
10013cfc:	e7f6      	b.n	10013cec <__lesf2+0x38>
10013cfe:	2002      	movs	r0, #2
10013d00:	2e00      	cmp	r6, #0
10013d02:	d1f3      	bne.n	10013cec <__lesf2+0x38>
10013d04:	e7e3      	b.n	10013cce <__lesf2+0x1a>
10013d06:	2002      	movs	r0, #2
10013d08:	2d00      	cmp	r5, #0
10013d0a:	d1ef      	bne.n	10013cec <__lesf2+0x38>
10013d0c:	e7e1      	b.n	10013cd2 <__lesf2+0x1e>
10013d0e:	2d00      	cmp	r5, #0
10013d10:	d1e5      	bne.n	10013cde <__lesf2+0x2a>
10013d12:	2000      	movs	r0, #0
10013d14:	2e00      	cmp	r6, #0
10013d16:	d0e9      	beq.n	10013cec <__lesf2+0x38>
10013d18:	e7ed      	b.n	10013cf6 <__lesf2+0x42>
10013d1a:	2d00      	cmp	r5, #0
10013d1c:	d1e9      	bne.n	10013cf2 <__lesf2+0x3e>
10013d1e:	e7ea      	b.n	10013cf6 <__lesf2+0x42>
10013d20:	42a2      	cmp	r2, r4
10013d22:	dce8      	bgt.n	10013cf6 <__lesf2+0x42>
10013d24:	db04      	blt.n	10013d30 <__lesf2+0x7c>
10013d26:	42ae      	cmp	r6, r5
10013d28:	d8e5      	bhi.n	10013cf6 <__lesf2+0x42>
10013d2a:	2000      	movs	r0, #0
10013d2c:	42ae      	cmp	r6, r5
10013d2e:	d2dd      	bcs.n	10013cec <__lesf2+0x38>
10013d30:	4258      	negs	r0, r3
10013d32:	4143      	adcs	r3, r0
10013d34:	2001      	movs	r0, #1
10013d36:	425b      	negs	r3, r3
10013d38:	4318      	orrs	r0, r3
10013d3a:	e7d7      	b.n	10013cec <__lesf2+0x38>

10013d3c <__aeabi_fmul>:
10013d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d3e:	4657      	mov	r7, sl
10013d40:	464e      	mov	r6, r9
10013d42:	4645      	mov	r5, r8
10013d44:	0043      	lsls	r3, r0, #1
10013d46:	b4e0      	push	{r5, r6, r7}
10013d48:	0246      	lsls	r6, r0, #9
10013d4a:	4688      	mov	r8, r1
10013d4c:	0a76      	lsrs	r6, r6, #9
10013d4e:	0e1f      	lsrs	r7, r3, #24
10013d50:	0fc4      	lsrs	r4, r0, #31
10013d52:	2f00      	cmp	r7, #0
10013d54:	d047      	beq.n	10013de6 <__aeabi_fmul+0xaa>
10013d56:	2fff      	cmp	r7, #255	; 0xff
10013d58:	d025      	beq.n	10013da6 <__aeabi_fmul+0x6a>
10013d5a:	2300      	movs	r3, #0
10013d5c:	2580      	movs	r5, #128	; 0x80
10013d5e:	469a      	mov	sl, r3
10013d60:	4699      	mov	r9, r3
10013d62:	00f6      	lsls	r6, r6, #3
10013d64:	04ed      	lsls	r5, r5, #19
10013d66:	432e      	orrs	r6, r5
10013d68:	3f7f      	subs	r7, #127	; 0x7f
10013d6a:	4643      	mov	r3, r8
10013d6c:	4642      	mov	r2, r8
10013d6e:	025d      	lsls	r5, r3, #9
10013d70:	0fd2      	lsrs	r2, r2, #31
10013d72:	005b      	lsls	r3, r3, #1
10013d74:	0a6d      	lsrs	r5, r5, #9
10013d76:	0e1b      	lsrs	r3, r3, #24
10013d78:	4690      	mov	r8, r2
10013d7a:	d040      	beq.n	10013dfe <__aeabi_fmul+0xc2>
10013d7c:	2bff      	cmp	r3, #255	; 0xff
10013d7e:	d039      	beq.n	10013df4 <__aeabi_fmul+0xb8>
10013d80:	2280      	movs	r2, #128	; 0x80
10013d82:	2000      	movs	r0, #0
10013d84:	00ed      	lsls	r5, r5, #3
10013d86:	04d2      	lsls	r2, r2, #19
10013d88:	4315      	orrs	r5, r2
10013d8a:	3b7f      	subs	r3, #127	; 0x7f
10013d8c:	18fb      	adds	r3, r7, r3
10013d8e:	4642      	mov	r2, r8
10013d90:	4657      	mov	r7, sl
10013d92:	1c59      	adds	r1, r3, #1
10013d94:	4062      	eors	r2, r4
10013d96:	468c      	mov	ip, r1
10013d98:	4307      	orrs	r7, r0
10013d9a:	2f0f      	cmp	r7, #15
10013d9c:	d85c      	bhi.n	10013e58 <__aeabi_fmul+0x11c>
10013d9e:	496f      	ldr	r1, [pc, #444]	; (10013f5c <__aeabi_fmul+0x220>)
10013da0:	00bf      	lsls	r7, r7, #2
10013da2:	59c9      	ldr	r1, [r1, r7]
10013da4:	468f      	mov	pc, r1
10013da6:	2e00      	cmp	r6, #0
10013da8:	d145      	bne.n	10013e36 <__aeabi_fmul+0xfa>
10013daa:	2308      	movs	r3, #8
10013dac:	469a      	mov	sl, r3
10013dae:	3b06      	subs	r3, #6
10013db0:	4699      	mov	r9, r3
10013db2:	e7da      	b.n	10013d6a <__aeabi_fmul+0x2e>
10013db4:	4642      	mov	r2, r8
10013db6:	2802      	cmp	r0, #2
10013db8:	d02d      	beq.n	10013e16 <__aeabi_fmul+0xda>
10013dba:	2803      	cmp	r0, #3
10013dbc:	d100      	bne.n	10013dc0 <__aeabi_fmul+0x84>
10013dbe:	e0c3      	b.n	10013f48 <__aeabi_fmul+0x20c>
10013dc0:	2801      	cmp	r0, #1
10013dc2:	d000      	beq.n	10013dc6 <__aeabi_fmul+0x8a>
10013dc4:	e0a2      	b.n	10013f0c <__aeabi_fmul+0x1d0>
10013dc6:	2500      	movs	r5, #0
10013dc8:	2600      	movs	r6, #0
10013dca:	4002      	ands	r2, r0
10013dcc:	b2d4      	uxtb	r4, r2
10013dce:	0276      	lsls	r6, r6, #9
10013dd0:	05ed      	lsls	r5, r5, #23
10013dd2:	0a76      	lsrs	r6, r6, #9
10013dd4:	432e      	orrs	r6, r5
10013dd6:	07e4      	lsls	r4, r4, #31
10013dd8:	4326      	orrs	r6, r4
10013dda:	0030      	movs	r0, r6
10013ddc:	bc1c      	pop	{r2, r3, r4}
10013dde:	4690      	mov	r8, r2
10013de0:	4699      	mov	r9, r3
10013de2:	46a2      	mov	sl, r4
10013de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013de6:	2e00      	cmp	r6, #0
10013de8:	d11a      	bne.n	10013e20 <__aeabi_fmul+0xe4>
10013dea:	2304      	movs	r3, #4
10013dec:	469a      	mov	sl, r3
10013dee:	3b03      	subs	r3, #3
10013df0:	4699      	mov	r9, r3
10013df2:	e7ba      	b.n	10013d6a <__aeabi_fmul+0x2e>
10013df4:	002a      	movs	r2, r5
10013df6:	1e51      	subs	r1, r2, #1
10013df8:	418a      	sbcs	r2, r1
10013dfa:	1c90      	adds	r0, r2, #2
10013dfc:	e7c6      	b.n	10013d8c <__aeabi_fmul+0x50>
10013dfe:	2001      	movs	r0, #1
10013e00:	2d00      	cmp	r5, #0
10013e02:	d0c3      	beq.n	10013d8c <__aeabi_fmul+0x50>
10013e04:	0028      	movs	r0, r5
10013e06:	f002 f9c1 	bl	1001618c <__clzsi2>
10013e0a:	1f43      	subs	r3, r0, #5
10013e0c:	3076      	adds	r0, #118	; 0x76
10013e0e:	409d      	lsls	r5, r3
10013e10:	4243      	negs	r3, r0
10013e12:	2000      	movs	r0, #0
10013e14:	e7ba      	b.n	10013d8c <__aeabi_fmul+0x50>
10013e16:	2401      	movs	r4, #1
10013e18:	25ff      	movs	r5, #255	; 0xff
10013e1a:	4014      	ands	r4, r2
10013e1c:	2600      	movs	r6, #0
10013e1e:	e7d6      	b.n	10013dce <__aeabi_fmul+0x92>
10013e20:	0030      	movs	r0, r6
10013e22:	f002 f9b3 	bl	1001618c <__clzsi2>
10013e26:	1f43      	subs	r3, r0, #5
10013e28:	409e      	lsls	r6, r3
10013e2a:	2300      	movs	r3, #0
10013e2c:	3076      	adds	r0, #118	; 0x76
10013e2e:	4247      	negs	r7, r0
10013e30:	469a      	mov	sl, r3
10013e32:	4699      	mov	r9, r3
10013e34:	e799      	b.n	10013d6a <__aeabi_fmul+0x2e>
10013e36:	230c      	movs	r3, #12
10013e38:	469a      	mov	sl, r3
10013e3a:	3b09      	subs	r3, #9
10013e3c:	4699      	mov	r9, r3
10013e3e:	e794      	b.n	10013d6a <__aeabi_fmul+0x2e>
10013e40:	2680      	movs	r6, #128	; 0x80
10013e42:	2400      	movs	r4, #0
10013e44:	03f6      	lsls	r6, r6, #15
10013e46:	25ff      	movs	r5, #255	; 0xff
10013e48:	e7c1      	b.n	10013dce <__aeabi_fmul+0x92>
10013e4a:	0035      	movs	r5, r6
10013e4c:	4648      	mov	r0, r9
10013e4e:	e7b2      	b.n	10013db6 <__aeabi_fmul+0x7a>
10013e50:	0035      	movs	r5, r6
10013e52:	0022      	movs	r2, r4
10013e54:	4648      	mov	r0, r9
10013e56:	e7ae      	b.n	10013db6 <__aeabi_fmul+0x7a>
10013e58:	0429      	lsls	r1, r5, #16
10013e5a:	0c09      	lsrs	r1, r1, #16
10013e5c:	0008      	movs	r0, r1
10013e5e:	0c37      	lsrs	r7, r6, #16
10013e60:	0436      	lsls	r6, r6, #16
10013e62:	0c36      	lsrs	r6, r6, #16
10013e64:	0c2c      	lsrs	r4, r5, #16
10013e66:	4379      	muls	r1, r7
10013e68:	4370      	muls	r0, r6
10013e6a:	4367      	muls	r7, r4
10013e6c:	4374      	muls	r4, r6
10013e6e:	0c06      	lsrs	r6, r0, #16
10013e70:	1864      	adds	r4, r4, r1
10013e72:	1936      	adds	r6, r6, r4
10013e74:	42b1      	cmp	r1, r6
10013e76:	d903      	bls.n	10013e80 <__aeabi_fmul+0x144>
10013e78:	2180      	movs	r1, #128	; 0x80
10013e7a:	0249      	lsls	r1, r1, #9
10013e7c:	4688      	mov	r8, r1
10013e7e:	4447      	add	r7, r8
10013e80:	0400      	lsls	r0, r0, #16
10013e82:	0c00      	lsrs	r0, r0, #16
10013e84:	0431      	lsls	r1, r6, #16
10013e86:	1809      	adds	r1, r1, r0
10013e88:	018d      	lsls	r5, r1, #6
10013e8a:	1e68      	subs	r0, r5, #1
10013e8c:	4185      	sbcs	r5, r0
10013e8e:	0e89      	lsrs	r1, r1, #26
10013e90:	4329      	orrs	r1, r5
10013e92:	0c35      	lsrs	r5, r6, #16
10013e94:	19ed      	adds	r5, r5, r7
10013e96:	01ad      	lsls	r5, r5, #6
10013e98:	430d      	orrs	r5, r1
10013e9a:	0129      	lsls	r1, r5, #4
10013e9c:	d504      	bpl.n	10013ea8 <__aeabi_fmul+0x16c>
10013e9e:	2301      	movs	r3, #1
10013ea0:	0869      	lsrs	r1, r5, #1
10013ea2:	401d      	ands	r5, r3
10013ea4:	4663      	mov	r3, ip
10013ea6:	430d      	orrs	r5, r1
10013ea8:	0019      	movs	r1, r3
10013eaa:	317f      	adds	r1, #127	; 0x7f
10013eac:	2900      	cmp	r1, #0
10013eae:	dd25      	ble.n	10013efc <__aeabi_fmul+0x1c0>
10013eb0:	0768      	lsls	r0, r5, #29
10013eb2:	d004      	beq.n	10013ebe <__aeabi_fmul+0x182>
10013eb4:	200f      	movs	r0, #15
10013eb6:	4028      	ands	r0, r5
10013eb8:	2804      	cmp	r0, #4
10013eba:	d000      	beq.n	10013ebe <__aeabi_fmul+0x182>
10013ebc:	3504      	adds	r5, #4
10013ebe:	0128      	lsls	r0, r5, #4
10013ec0:	d503      	bpl.n	10013eca <__aeabi_fmul+0x18e>
10013ec2:	4927      	ldr	r1, [pc, #156]	; (10013f60 <__aeabi_fmul+0x224>)
10013ec4:	3380      	adds	r3, #128	; 0x80
10013ec6:	400d      	ands	r5, r1
10013ec8:	0019      	movs	r1, r3
10013eca:	29fe      	cmp	r1, #254	; 0xfe
10013ecc:	dca3      	bgt.n	10013e16 <__aeabi_fmul+0xda>
10013ece:	2401      	movs	r4, #1
10013ed0:	01ad      	lsls	r5, r5, #6
10013ed2:	0a6e      	lsrs	r6, r5, #9
10013ed4:	4014      	ands	r4, r2
10013ed6:	b2cd      	uxtb	r5, r1
10013ed8:	e779      	b.n	10013dce <__aeabi_fmul+0x92>
10013eda:	2080      	movs	r0, #128	; 0x80
10013edc:	03c0      	lsls	r0, r0, #15
10013ede:	4206      	tst	r6, r0
10013ee0:	d007      	beq.n	10013ef2 <__aeabi_fmul+0x1b6>
10013ee2:	4205      	tst	r5, r0
10013ee4:	d105      	bne.n	10013ef2 <__aeabi_fmul+0x1b6>
10013ee6:	4328      	orrs	r0, r5
10013ee8:	0246      	lsls	r6, r0, #9
10013eea:	0a76      	lsrs	r6, r6, #9
10013eec:	4644      	mov	r4, r8
10013eee:	25ff      	movs	r5, #255	; 0xff
10013ef0:	e76d      	b.n	10013dce <__aeabi_fmul+0x92>
10013ef2:	4306      	orrs	r6, r0
10013ef4:	0276      	lsls	r6, r6, #9
10013ef6:	0a76      	lsrs	r6, r6, #9
10013ef8:	25ff      	movs	r5, #255	; 0xff
10013efa:	e768      	b.n	10013dce <__aeabi_fmul+0x92>
10013efc:	2401      	movs	r4, #1
10013efe:	1a61      	subs	r1, r4, r1
10013f00:	291b      	cmp	r1, #27
10013f02:	dd05      	ble.n	10013f10 <__aeabi_fmul+0x1d4>
10013f04:	4014      	ands	r4, r2
10013f06:	2500      	movs	r5, #0
10013f08:	2600      	movs	r6, #0
10013f0a:	e760      	b.n	10013dce <__aeabi_fmul+0x92>
10013f0c:	4663      	mov	r3, ip
10013f0e:	e7cb      	b.n	10013ea8 <__aeabi_fmul+0x16c>
10013f10:	002e      	movs	r6, r5
10013f12:	2320      	movs	r3, #32
10013f14:	40ce      	lsrs	r6, r1
10013f16:	1a59      	subs	r1, r3, r1
10013f18:	408d      	lsls	r5, r1
10013f1a:	1e6b      	subs	r3, r5, #1
10013f1c:	419d      	sbcs	r5, r3
10013f1e:	432e      	orrs	r6, r5
10013f20:	0773      	lsls	r3, r6, #29
10013f22:	d004      	beq.n	10013f2e <__aeabi_fmul+0x1f2>
10013f24:	230f      	movs	r3, #15
10013f26:	4033      	ands	r3, r6
10013f28:	2b04      	cmp	r3, #4
10013f2a:	d000      	beq.n	10013f2e <__aeabi_fmul+0x1f2>
10013f2c:	3604      	adds	r6, #4
10013f2e:	0173      	lsls	r3, r6, #5
10013f30:	d504      	bpl.n	10013f3c <__aeabi_fmul+0x200>
10013f32:	2401      	movs	r4, #1
10013f34:	2501      	movs	r5, #1
10013f36:	4014      	ands	r4, r2
10013f38:	2600      	movs	r6, #0
10013f3a:	e748      	b.n	10013dce <__aeabi_fmul+0x92>
10013f3c:	2401      	movs	r4, #1
10013f3e:	01b6      	lsls	r6, r6, #6
10013f40:	0a76      	lsrs	r6, r6, #9
10013f42:	4014      	ands	r4, r2
10013f44:	2500      	movs	r5, #0
10013f46:	e742      	b.n	10013dce <__aeabi_fmul+0x92>
10013f48:	2680      	movs	r6, #128	; 0x80
10013f4a:	2401      	movs	r4, #1
10013f4c:	03f6      	lsls	r6, r6, #15
10013f4e:	432e      	orrs	r6, r5
10013f50:	0276      	lsls	r6, r6, #9
10013f52:	0a76      	lsrs	r6, r6, #9
10013f54:	4014      	ands	r4, r2
10013f56:	25ff      	movs	r5, #255	; 0xff
10013f58:	e739      	b.n	10013dce <__aeabi_fmul+0x92>
10013f5a:	46c0      	nop			; (mov r8, r8)
10013f5c:	10018418 	.word	0x10018418
10013f60:	f7ffffff 	.word	0xf7ffffff

10013f64 <__aeabi_fsub>:
10013f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013f66:	024a      	lsls	r2, r1, #9
10013f68:	004e      	lsls	r6, r1, #1
10013f6a:	0243      	lsls	r3, r0, #9
10013f6c:	0044      	lsls	r4, r0, #1
10013f6e:	0e24      	lsrs	r4, r4, #24
10013f70:	0fc5      	lsrs	r5, r0, #31
10013f72:	099b      	lsrs	r3, r3, #6
10013f74:	0e36      	lsrs	r6, r6, #24
10013f76:	0fc9      	lsrs	r1, r1, #31
10013f78:	0992      	lsrs	r2, r2, #6
10013f7a:	2eff      	cmp	r6, #255	; 0xff
10013f7c:	d100      	bne.n	10013f80 <__aeabi_fsub+0x1c>
10013f7e:	e083      	b.n	10014088 <__aeabi_fsub+0x124>
10013f80:	2001      	movs	r0, #1
10013f82:	4041      	eors	r1, r0
10013f84:	1ba0      	subs	r0, r4, r6
10013f86:	42a9      	cmp	r1, r5
10013f88:	d05c      	beq.n	10014044 <__aeabi_fsub+0xe0>
10013f8a:	2800      	cmp	r0, #0
10013f8c:	dc00      	bgt.n	10013f90 <__aeabi_fsub+0x2c>
10013f8e:	e095      	b.n	100140bc <__aeabi_fsub+0x158>
10013f90:	2e00      	cmp	r6, #0
10013f92:	d11c      	bne.n	10013fce <__aeabi_fsub+0x6a>
10013f94:	2a00      	cmp	r2, #0
10013f96:	d000      	beq.n	10013f9a <__aeabi_fsub+0x36>
10013f98:	e081      	b.n	1001409e <__aeabi_fsub+0x13a>
10013f9a:	075a      	lsls	r2, r3, #29
10013f9c:	d004      	beq.n	10013fa8 <__aeabi_fsub+0x44>
10013f9e:	220f      	movs	r2, #15
10013fa0:	401a      	ands	r2, r3
10013fa2:	2a04      	cmp	r2, #4
10013fa4:	d000      	beq.n	10013fa8 <__aeabi_fsub+0x44>
10013fa6:	3304      	adds	r3, #4
10013fa8:	015a      	lsls	r2, r3, #5
10013faa:	d53b      	bpl.n	10014024 <__aeabi_fsub+0xc0>
10013fac:	3401      	adds	r4, #1
10013fae:	2cff      	cmp	r4, #255	; 0xff
10013fb0:	d100      	bne.n	10013fb4 <__aeabi_fsub+0x50>
10013fb2:	e091      	b.n	100140d8 <__aeabi_fsub+0x174>
10013fb4:	2001      	movs	r0, #1
10013fb6:	019b      	lsls	r3, r3, #6
10013fb8:	0a5b      	lsrs	r3, r3, #9
10013fba:	b2e4      	uxtb	r4, r4
10013fbc:	4005      	ands	r5, r0
10013fbe:	025b      	lsls	r3, r3, #9
10013fc0:	05e4      	lsls	r4, r4, #23
10013fc2:	0a5b      	lsrs	r3, r3, #9
10013fc4:	07ed      	lsls	r5, r5, #31
10013fc6:	4323      	orrs	r3, r4
10013fc8:	432b      	orrs	r3, r5
10013fca:	0018      	movs	r0, r3
10013fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013fce:	2cff      	cmp	r4, #255	; 0xff
10013fd0:	d0e3      	beq.n	10013f9a <__aeabi_fsub+0x36>
10013fd2:	2180      	movs	r1, #128	; 0x80
10013fd4:	04c9      	lsls	r1, r1, #19
10013fd6:	430a      	orrs	r2, r1
10013fd8:	281b      	cmp	r0, #27
10013fda:	dd00      	ble.n	10013fde <__aeabi_fsub+0x7a>
10013fdc:	e090      	b.n	10014100 <__aeabi_fsub+0x19c>
10013fde:	0016      	movs	r6, r2
10013fe0:	2120      	movs	r1, #32
10013fe2:	40c6      	lsrs	r6, r0
10013fe4:	1a08      	subs	r0, r1, r0
10013fe6:	4082      	lsls	r2, r0
10013fe8:	1e51      	subs	r1, r2, #1
10013fea:	418a      	sbcs	r2, r1
10013fec:	4332      	orrs	r2, r6
10013fee:	1a9b      	subs	r3, r3, r2
10013ff0:	015a      	lsls	r2, r3, #5
10013ff2:	d515      	bpl.n	10014020 <__aeabi_fsub+0xbc>
10013ff4:	019b      	lsls	r3, r3, #6
10013ff6:	099e      	lsrs	r6, r3, #6
10013ff8:	0030      	movs	r0, r6
10013ffa:	f002 f8c7 	bl	1001618c <__clzsi2>
10013ffe:	3805      	subs	r0, #5
10014000:	4086      	lsls	r6, r0
10014002:	4284      	cmp	r4, r0
10014004:	dc6c      	bgt.n	100140e0 <__aeabi_fsub+0x17c>
10014006:	1b04      	subs	r4, r0, r4
10014008:	0033      	movs	r3, r6
1001400a:	2020      	movs	r0, #32
1001400c:	3401      	adds	r4, #1
1001400e:	40e3      	lsrs	r3, r4
10014010:	1b04      	subs	r4, r0, r4
10014012:	40a6      	lsls	r6, r4
10014014:	1e72      	subs	r2, r6, #1
10014016:	4196      	sbcs	r6, r2
10014018:	2400      	movs	r4, #0
1001401a:	4333      	orrs	r3, r6
1001401c:	e7bd      	b.n	10013f9a <__aeabi_fsub+0x36>
1001401e:	000d      	movs	r5, r1
10014020:	075a      	lsls	r2, r3, #29
10014022:	d1bc      	bne.n	10013f9e <__aeabi_fsub+0x3a>
10014024:	08df      	lsrs	r7, r3, #3
10014026:	2301      	movs	r3, #1
10014028:	401d      	ands	r5, r3
1001402a:	2cff      	cmp	r4, #255	; 0xff
1001402c:	d133      	bne.n	10014096 <__aeabi_fsub+0x132>
1001402e:	2f00      	cmp	r7, #0
10014030:	d100      	bne.n	10014034 <__aeabi_fsub+0xd0>
10014032:	e090      	b.n	10014156 <__aeabi_fsub+0x1f2>
10014034:	2280      	movs	r2, #128	; 0x80
10014036:	03d2      	lsls	r2, r2, #15
10014038:	0013      	movs	r3, r2
1001403a:	433b      	orrs	r3, r7
1001403c:	025b      	lsls	r3, r3, #9
1001403e:	0a5b      	lsrs	r3, r3, #9
10014040:	24ff      	movs	r4, #255	; 0xff
10014042:	e7bc      	b.n	10013fbe <__aeabi_fsub+0x5a>
10014044:	2800      	cmp	r0, #0
10014046:	dd4f      	ble.n	100140e8 <__aeabi_fsub+0x184>
10014048:	2e00      	cmp	r6, #0
1001404a:	d02e      	beq.n	100140aa <__aeabi_fsub+0x146>
1001404c:	2cff      	cmp	r4, #255	; 0xff
1001404e:	d0a4      	beq.n	10013f9a <__aeabi_fsub+0x36>
10014050:	2580      	movs	r5, #128	; 0x80
10014052:	04ed      	lsls	r5, r5, #19
10014054:	432a      	orrs	r2, r5
10014056:	281b      	cmp	r0, #27
10014058:	dd00      	ble.n	1001405c <__aeabi_fsub+0xf8>
1001405a:	e097      	b.n	1001418c <__aeabi_fsub+0x228>
1001405c:	0016      	movs	r6, r2
1001405e:	2520      	movs	r5, #32
10014060:	40c6      	lsrs	r6, r0
10014062:	1a28      	subs	r0, r5, r0
10014064:	4082      	lsls	r2, r0
10014066:	1e50      	subs	r0, r2, #1
10014068:	4182      	sbcs	r2, r0
1001406a:	4332      	orrs	r2, r6
1001406c:	189b      	adds	r3, r3, r2
1001406e:	015a      	lsls	r2, r3, #5
10014070:	d5d5      	bpl.n	1001401e <__aeabi_fsub+0xba>
10014072:	3401      	adds	r4, #1
10014074:	2cff      	cmp	r4, #255	; 0xff
10014076:	d06d      	beq.n	10014154 <__aeabi_fsub+0x1f0>
10014078:	2201      	movs	r2, #1
1001407a:	487b      	ldr	r0, [pc, #492]	; (10014268 <__aeabi_fsub+0x304>)
1001407c:	401a      	ands	r2, r3
1001407e:	085b      	lsrs	r3, r3, #1
10014080:	4003      	ands	r3, r0
10014082:	4313      	orrs	r3, r2
10014084:	000d      	movs	r5, r1
10014086:	e788      	b.n	10013f9a <__aeabi_fsub+0x36>
10014088:	2a00      	cmp	r2, #0
1001408a:	d000      	beq.n	1001408e <__aeabi_fsub+0x12a>
1001408c:	e77a      	b.n	10013f84 <__aeabi_fsub+0x20>
1001408e:	e777      	b.n	10013f80 <__aeabi_fsub+0x1c>
10014090:	1e03      	subs	r3, r0, #0
10014092:	d1c5      	bne.n	10014020 <__aeabi_fsub+0xbc>
10014094:	2500      	movs	r5, #0
10014096:	027b      	lsls	r3, r7, #9
10014098:	0a5b      	lsrs	r3, r3, #9
1001409a:	b2e4      	uxtb	r4, r4
1001409c:	e78f      	b.n	10013fbe <__aeabi_fsub+0x5a>
1001409e:	3801      	subs	r0, #1
100140a0:	2800      	cmp	r0, #0
100140a2:	d0a4      	beq.n	10013fee <__aeabi_fsub+0x8a>
100140a4:	2cff      	cmp	r4, #255	; 0xff
100140a6:	d197      	bne.n	10013fd8 <__aeabi_fsub+0x74>
100140a8:	e777      	b.n	10013f9a <__aeabi_fsub+0x36>
100140aa:	2a00      	cmp	r2, #0
100140ac:	d100      	bne.n	100140b0 <__aeabi_fsub+0x14c>
100140ae:	e774      	b.n	10013f9a <__aeabi_fsub+0x36>
100140b0:	3801      	subs	r0, #1
100140b2:	2800      	cmp	r0, #0
100140b4:	d0da      	beq.n	1001406c <__aeabi_fsub+0x108>
100140b6:	2cff      	cmp	r4, #255	; 0xff
100140b8:	d1cd      	bne.n	10014056 <__aeabi_fsub+0xf2>
100140ba:	e76e      	b.n	10013f9a <__aeabi_fsub+0x36>
100140bc:	2800      	cmp	r0, #0
100140be:	d121      	bne.n	10014104 <__aeabi_fsub+0x1a0>
100140c0:	1c60      	adds	r0, r4, #1
100140c2:	b2c0      	uxtb	r0, r0
100140c4:	2801      	cmp	r0, #1
100140c6:	dd58      	ble.n	1001417a <__aeabi_fsub+0x216>
100140c8:	2780      	movs	r7, #128	; 0x80
100140ca:	1a9e      	subs	r6, r3, r2
100140cc:	04ff      	lsls	r7, r7, #19
100140ce:	4037      	ands	r7, r6
100140d0:	d02f      	beq.n	10014132 <__aeabi_fsub+0x1ce>
100140d2:	1ad6      	subs	r6, r2, r3
100140d4:	000d      	movs	r5, r1
100140d6:	e78f      	b.n	10013ff8 <__aeabi_fsub+0x94>
100140d8:	2301      	movs	r3, #1
100140da:	401d      	ands	r5, r3
100140dc:	2300      	movs	r3, #0
100140de:	e76e      	b.n	10013fbe <__aeabi_fsub+0x5a>
100140e0:	4b62      	ldr	r3, [pc, #392]	; (1001426c <__aeabi_fsub+0x308>)
100140e2:	1a24      	subs	r4, r4, r0
100140e4:	4033      	ands	r3, r6
100140e6:	e758      	b.n	10013f9a <__aeabi_fsub+0x36>
100140e8:	2800      	cmp	r0, #0
100140ea:	d151      	bne.n	10014190 <__aeabi_fsub+0x22c>
100140ec:	1c60      	adds	r0, r4, #1
100140ee:	b2c6      	uxtb	r6, r0
100140f0:	2e01      	cmp	r6, #1
100140f2:	dd33      	ble.n	1001415c <__aeabi_fsub+0x1f8>
100140f4:	28ff      	cmp	r0, #255	; 0xff
100140f6:	d02d      	beq.n	10014154 <__aeabi_fsub+0x1f0>
100140f8:	189b      	adds	r3, r3, r2
100140fa:	085b      	lsrs	r3, r3, #1
100140fc:	0004      	movs	r4, r0
100140fe:	e74c      	b.n	10013f9a <__aeabi_fsub+0x36>
10014100:	2201      	movs	r2, #1
10014102:	e774      	b.n	10013fee <__aeabi_fsub+0x8a>
10014104:	2c00      	cmp	r4, #0
10014106:	d01a      	beq.n	1001413e <__aeabi_fsub+0x1da>
10014108:	2eff      	cmp	r6, #255	; 0xff
1001410a:	d01f      	beq.n	1001414c <__aeabi_fsub+0x1e8>
1001410c:	2480      	movs	r4, #128	; 0x80
1001410e:	04e4      	lsls	r4, r4, #19
10014110:	4240      	negs	r0, r0
10014112:	4323      	orrs	r3, r4
10014114:	281b      	cmp	r0, #27
10014116:	dd00      	ble.n	1001411a <__aeabi_fsub+0x1b6>
10014118:	e096      	b.n	10014248 <__aeabi_fsub+0x2e4>
1001411a:	001d      	movs	r5, r3
1001411c:	2420      	movs	r4, #32
1001411e:	40c5      	lsrs	r5, r0
10014120:	1a20      	subs	r0, r4, r0
10014122:	4083      	lsls	r3, r0
10014124:	1e58      	subs	r0, r3, #1
10014126:	4183      	sbcs	r3, r0
10014128:	432b      	orrs	r3, r5
1001412a:	1ad3      	subs	r3, r2, r3
1001412c:	0034      	movs	r4, r6
1001412e:	000d      	movs	r5, r1
10014130:	e75e      	b.n	10013ff0 <__aeabi_fsub+0x8c>
10014132:	2e00      	cmp	r6, #0
10014134:	d000      	beq.n	10014138 <__aeabi_fsub+0x1d4>
10014136:	e75f      	b.n	10013ff8 <__aeabi_fsub+0x94>
10014138:	2500      	movs	r5, #0
1001413a:	2400      	movs	r4, #0
1001413c:	e7ab      	b.n	10014096 <__aeabi_fsub+0x132>
1001413e:	2b00      	cmp	r3, #0
10014140:	d044      	beq.n	100141cc <__aeabi_fsub+0x268>
10014142:	43c0      	mvns	r0, r0
10014144:	2800      	cmp	r0, #0
10014146:	d0f0      	beq.n	1001412a <__aeabi_fsub+0x1c6>
10014148:	2eff      	cmp	r6, #255	; 0xff
1001414a:	d1e3      	bne.n	10014114 <__aeabi_fsub+0x1b0>
1001414c:	0013      	movs	r3, r2
1001414e:	24ff      	movs	r4, #255	; 0xff
10014150:	000d      	movs	r5, r1
10014152:	e722      	b.n	10013f9a <__aeabi_fsub+0x36>
10014154:	000d      	movs	r5, r1
10014156:	24ff      	movs	r4, #255	; 0xff
10014158:	2300      	movs	r3, #0
1001415a:	e730      	b.n	10013fbe <__aeabi_fsub+0x5a>
1001415c:	2c00      	cmp	r4, #0
1001415e:	d15d      	bne.n	1001421c <__aeabi_fsub+0x2b8>
10014160:	2b00      	cmp	r3, #0
10014162:	d07d      	beq.n	10014260 <__aeabi_fsub+0x2fc>
10014164:	2a00      	cmp	r2, #0
10014166:	d100      	bne.n	1001416a <__aeabi_fsub+0x206>
10014168:	e717      	b.n	10013f9a <__aeabi_fsub+0x36>
1001416a:	189b      	adds	r3, r3, r2
1001416c:	015a      	lsls	r2, r3, #5
1001416e:	d400      	bmi.n	10014172 <__aeabi_fsub+0x20e>
10014170:	e756      	b.n	10014020 <__aeabi_fsub+0xbc>
10014172:	4a3e      	ldr	r2, [pc, #248]	; (1001426c <__aeabi_fsub+0x308>)
10014174:	0004      	movs	r4, r0
10014176:	4013      	ands	r3, r2
10014178:	e70f      	b.n	10013f9a <__aeabi_fsub+0x36>
1001417a:	2c00      	cmp	r4, #0
1001417c:	d11e      	bne.n	100141bc <__aeabi_fsub+0x258>
1001417e:	2b00      	cmp	r3, #0
10014180:	d12f      	bne.n	100141e2 <__aeabi_fsub+0x27e>
10014182:	2a00      	cmp	r2, #0
10014184:	d065      	beq.n	10014252 <__aeabi_fsub+0x2ee>
10014186:	0013      	movs	r3, r2
10014188:	000d      	movs	r5, r1
1001418a:	e706      	b.n	10013f9a <__aeabi_fsub+0x36>
1001418c:	2201      	movs	r2, #1
1001418e:	e76d      	b.n	1001406c <__aeabi_fsub+0x108>
10014190:	2c00      	cmp	r4, #0
10014192:	d11f      	bne.n	100141d4 <__aeabi_fsub+0x270>
10014194:	2b00      	cmp	r3, #0
10014196:	d059      	beq.n	1001424c <__aeabi_fsub+0x2e8>
10014198:	43c0      	mvns	r0, r0
1001419a:	2800      	cmp	r0, #0
1001419c:	d00b      	beq.n	100141b6 <__aeabi_fsub+0x252>
1001419e:	2eff      	cmp	r6, #255	; 0xff
100141a0:	d04f      	beq.n	10014242 <__aeabi_fsub+0x2de>
100141a2:	281b      	cmp	r0, #27
100141a4:	dc5e      	bgt.n	10014264 <__aeabi_fsub+0x300>
100141a6:	001d      	movs	r5, r3
100141a8:	2420      	movs	r4, #32
100141aa:	40c5      	lsrs	r5, r0
100141ac:	1a20      	subs	r0, r4, r0
100141ae:	4083      	lsls	r3, r0
100141b0:	1e58      	subs	r0, r3, #1
100141b2:	4183      	sbcs	r3, r0
100141b4:	432b      	orrs	r3, r5
100141b6:	189b      	adds	r3, r3, r2
100141b8:	0034      	movs	r4, r6
100141ba:	e758      	b.n	1001406e <__aeabi_fsub+0x10a>
100141bc:	2b00      	cmp	r3, #0
100141be:	d11c      	bne.n	100141fa <__aeabi_fsub+0x296>
100141c0:	2a00      	cmp	r2, #0
100141c2:	d049      	beq.n	10014258 <__aeabi_fsub+0x2f4>
100141c4:	0013      	movs	r3, r2
100141c6:	000d      	movs	r5, r1
100141c8:	24ff      	movs	r4, #255	; 0xff
100141ca:	e6e6      	b.n	10013f9a <__aeabi_fsub+0x36>
100141cc:	0013      	movs	r3, r2
100141ce:	0034      	movs	r4, r6
100141d0:	000d      	movs	r5, r1
100141d2:	e6e2      	b.n	10013f9a <__aeabi_fsub+0x36>
100141d4:	2eff      	cmp	r6, #255	; 0xff
100141d6:	d034      	beq.n	10014242 <__aeabi_fsub+0x2de>
100141d8:	2480      	movs	r4, #128	; 0x80
100141da:	04e4      	lsls	r4, r4, #19
100141dc:	4240      	negs	r0, r0
100141de:	4323      	orrs	r3, r4
100141e0:	e7df      	b.n	100141a2 <__aeabi_fsub+0x23e>
100141e2:	2a00      	cmp	r2, #0
100141e4:	d100      	bne.n	100141e8 <__aeabi_fsub+0x284>
100141e6:	e6d8      	b.n	10013f9a <__aeabi_fsub+0x36>
100141e8:	2780      	movs	r7, #128	; 0x80
100141ea:	1a98      	subs	r0, r3, r2
100141ec:	04ff      	lsls	r7, r7, #19
100141ee:	4007      	ands	r7, r0
100141f0:	d100      	bne.n	100141f4 <__aeabi_fsub+0x290>
100141f2:	e74d      	b.n	10014090 <__aeabi_fsub+0x12c>
100141f4:	1ad3      	subs	r3, r2, r3
100141f6:	000d      	movs	r5, r1
100141f8:	e6cf      	b.n	10013f9a <__aeabi_fsub+0x36>
100141fa:	24ff      	movs	r4, #255	; 0xff
100141fc:	2a00      	cmp	r2, #0
100141fe:	d100      	bne.n	10014202 <__aeabi_fsub+0x29e>
10014200:	e6cb      	b.n	10013f9a <__aeabi_fsub+0x36>
10014202:	2080      	movs	r0, #128	; 0x80
10014204:	08db      	lsrs	r3, r3, #3
10014206:	03c0      	lsls	r0, r0, #15
10014208:	4203      	tst	r3, r0
1001420a:	d004      	beq.n	10014216 <__aeabi_fsub+0x2b2>
1001420c:	08d2      	lsrs	r2, r2, #3
1001420e:	4202      	tst	r2, r0
10014210:	d101      	bne.n	10014216 <__aeabi_fsub+0x2b2>
10014212:	0013      	movs	r3, r2
10014214:	000d      	movs	r5, r1
10014216:	00db      	lsls	r3, r3, #3
10014218:	24ff      	movs	r4, #255	; 0xff
1001421a:	e6be      	b.n	10013f9a <__aeabi_fsub+0x36>
1001421c:	2b00      	cmp	r3, #0
1001421e:	d010      	beq.n	10014242 <__aeabi_fsub+0x2de>
10014220:	24ff      	movs	r4, #255	; 0xff
10014222:	2a00      	cmp	r2, #0
10014224:	d100      	bne.n	10014228 <__aeabi_fsub+0x2c4>
10014226:	e6b8      	b.n	10013f9a <__aeabi_fsub+0x36>
10014228:	2080      	movs	r0, #128	; 0x80
1001422a:	08db      	lsrs	r3, r3, #3
1001422c:	03c0      	lsls	r0, r0, #15
1001422e:	4203      	tst	r3, r0
10014230:	d003      	beq.n	1001423a <__aeabi_fsub+0x2d6>
10014232:	08d2      	lsrs	r2, r2, #3
10014234:	4202      	tst	r2, r0
10014236:	d100      	bne.n	1001423a <__aeabi_fsub+0x2d6>
10014238:	0013      	movs	r3, r2
1001423a:	00db      	lsls	r3, r3, #3
1001423c:	000d      	movs	r5, r1
1001423e:	24ff      	movs	r4, #255	; 0xff
10014240:	e6ab      	b.n	10013f9a <__aeabi_fsub+0x36>
10014242:	0013      	movs	r3, r2
10014244:	24ff      	movs	r4, #255	; 0xff
10014246:	e6a8      	b.n	10013f9a <__aeabi_fsub+0x36>
10014248:	2301      	movs	r3, #1
1001424a:	e76e      	b.n	1001412a <__aeabi_fsub+0x1c6>
1001424c:	0013      	movs	r3, r2
1001424e:	0034      	movs	r4, r6
10014250:	e6a3      	b.n	10013f9a <__aeabi_fsub+0x36>
10014252:	2700      	movs	r7, #0
10014254:	2500      	movs	r5, #0
10014256:	e71e      	b.n	10014096 <__aeabi_fsub+0x132>
10014258:	2780      	movs	r7, #128	; 0x80
1001425a:	2500      	movs	r5, #0
1001425c:	03ff      	lsls	r7, r7, #15
1001425e:	e6e9      	b.n	10014034 <__aeabi_fsub+0xd0>
10014260:	0013      	movs	r3, r2
10014262:	e69a      	b.n	10013f9a <__aeabi_fsub+0x36>
10014264:	2301      	movs	r3, #1
10014266:	e7a6      	b.n	100141b6 <__aeabi_fsub+0x252>
10014268:	7dffffff 	.word	0x7dffffff
1001426c:	fbffffff 	.word	0xfbffffff

10014270 <__aeabi_fcmpun>:
10014270:	0243      	lsls	r3, r0, #9
10014272:	0a5a      	lsrs	r2, r3, #9
10014274:	0040      	lsls	r0, r0, #1
10014276:	024b      	lsls	r3, r1, #9
10014278:	0049      	lsls	r1, r1, #1
1001427a:	0e00      	lsrs	r0, r0, #24
1001427c:	0a5b      	lsrs	r3, r3, #9
1001427e:	0e09      	lsrs	r1, r1, #24
10014280:	28ff      	cmp	r0, #255	; 0xff
10014282:	d003      	beq.n	1001428c <__aeabi_fcmpun+0x1c>
10014284:	2000      	movs	r0, #0
10014286:	29ff      	cmp	r1, #255	; 0xff
10014288:	d006      	beq.n	10014298 <__aeabi_fcmpun+0x28>
1001428a:	4770      	bx	lr
1001428c:	38fe      	subs	r0, #254	; 0xfe
1001428e:	2a00      	cmp	r2, #0
10014290:	d1fb      	bne.n	1001428a <__aeabi_fcmpun+0x1a>
10014292:	2000      	movs	r0, #0
10014294:	29ff      	cmp	r1, #255	; 0xff
10014296:	d1f8      	bne.n	1001428a <__aeabi_fcmpun+0x1a>
10014298:	0018      	movs	r0, r3
1001429a:	1e43      	subs	r3, r0, #1
1001429c:	4198      	sbcs	r0, r3
1001429e:	e7f4      	b.n	1001428a <__aeabi_fcmpun+0x1a>

100142a0 <__aeabi_f2iz>:
100142a0:	0243      	lsls	r3, r0, #9
100142a2:	0a59      	lsrs	r1, r3, #9
100142a4:	0043      	lsls	r3, r0, #1
100142a6:	0fc2      	lsrs	r2, r0, #31
100142a8:	0e1b      	lsrs	r3, r3, #24
100142aa:	2000      	movs	r0, #0
100142ac:	2b7e      	cmp	r3, #126	; 0x7e
100142ae:	dd0e      	ble.n	100142ce <__aeabi_f2iz+0x2e>
100142b0:	2b9d      	cmp	r3, #157	; 0x9d
100142b2:	dc0d      	bgt.n	100142d0 <__aeabi_f2iz+0x30>
100142b4:	2080      	movs	r0, #128	; 0x80
100142b6:	0400      	lsls	r0, r0, #16
100142b8:	4301      	orrs	r1, r0
100142ba:	2b95      	cmp	r3, #149	; 0x95
100142bc:	dc0b      	bgt.n	100142d6 <__aeabi_f2iz+0x36>
100142be:	2096      	movs	r0, #150	; 0x96
100142c0:	1ac3      	subs	r3, r0, r3
100142c2:	40d9      	lsrs	r1, r3
100142c4:	000b      	movs	r3, r1
100142c6:	4258      	negs	r0, r3
100142c8:	2a00      	cmp	r2, #0
100142ca:	d100      	bne.n	100142ce <__aeabi_f2iz+0x2e>
100142cc:	0018      	movs	r0, r3
100142ce:	4770      	bx	lr
100142d0:	4b03      	ldr	r3, [pc, #12]	; (100142e0 <__aeabi_f2iz+0x40>)
100142d2:	18d0      	adds	r0, r2, r3
100142d4:	e7fb      	b.n	100142ce <__aeabi_f2iz+0x2e>
100142d6:	3b96      	subs	r3, #150	; 0x96
100142d8:	4099      	lsls	r1, r3
100142da:	000b      	movs	r3, r1
100142dc:	e7f3      	b.n	100142c6 <__aeabi_f2iz+0x26>
100142de:	46c0      	nop			; (mov r8, r8)
100142e0:	7fffffff 	.word	0x7fffffff

100142e4 <__aeabi_i2f>:
100142e4:	b570      	push	{r4, r5, r6, lr}
100142e6:	2800      	cmp	r0, #0
100142e8:	d030      	beq.n	1001434c <__aeabi_i2f+0x68>
100142ea:	17c3      	asrs	r3, r0, #31
100142ec:	18c5      	adds	r5, r0, r3
100142ee:	405d      	eors	r5, r3
100142f0:	0fc4      	lsrs	r4, r0, #31
100142f2:	0028      	movs	r0, r5
100142f4:	f001 ff4a 	bl	1001618c <__clzsi2>
100142f8:	239e      	movs	r3, #158	; 0x9e
100142fa:	1a1b      	subs	r3, r3, r0
100142fc:	2b96      	cmp	r3, #150	; 0x96
100142fe:	dc0d      	bgt.n	1001431c <__aeabi_i2f+0x38>
10014300:	2296      	movs	r2, #150	; 0x96
10014302:	1ad2      	subs	r2, r2, r3
10014304:	4095      	lsls	r5, r2
10014306:	026a      	lsls	r2, r5, #9
10014308:	0a52      	lsrs	r2, r2, #9
1001430a:	b2d8      	uxtb	r0, r3
1001430c:	0252      	lsls	r2, r2, #9
1001430e:	05c0      	lsls	r0, r0, #23
10014310:	0a52      	lsrs	r2, r2, #9
10014312:	07e4      	lsls	r4, r4, #31
10014314:	4302      	orrs	r2, r0
10014316:	4322      	orrs	r2, r4
10014318:	0010      	movs	r0, r2
1001431a:	bd70      	pop	{r4, r5, r6, pc}
1001431c:	2b99      	cmp	r3, #153	; 0x99
1001431e:	dc19      	bgt.n	10014354 <__aeabi_i2f+0x70>
10014320:	2299      	movs	r2, #153	; 0x99
10014322:	1ad2      	subs	r2, r2, r3
10014324:	4095      	lsls	r5, r2
10014326:	4a12      	ldr	r2, [pc, #72]	; (10014370 <__aeabi_i2f+0x8c>)
10014328:	402a      	ands	r2, r5
1001432a:	0769      	lsls	r1, r5, #29
1001432c:	d004      	beq.n	10014338 <__aeabi_i2f+0x54>
1001432e:	210f      	movs	r1, #15
10014330:	400d      	ands	r5, r1
10014332:	2d04      	cmp	r5, #4
10014334:	d000      	beq.n	10014338 <__aeabi_i2f+0x54>
10014336:	3204      	adds	r2, #4
10014338:	0151      	lsls	r1, r2, #5
1001433a:	d503      	bpl.n	10014344 <__aeabi_i2f+0x60>
1001433c:	4b0c      	ldr	r3, [pc, #48]	; (10014370 <__aeabi_i2f+0x8c>)
1001433e:	401a      	ands	r2, r3
10014340:	239f      	movs	r3, #159	; 0x9f
10014342:	1a1b      	subs	r3, r3, r0
10014344:	0192      	lsls	r2, r2, #6
10014346:	0a52      	lsrs	r2, r2, #9
10014348:	b2d8      	uxtb	r0, r3
1001434a:	e7df      	b.n	1001430c <__aeabi_i2f+0x28>
1001434c:	2400      	movs	r4, #0
1001434e:	2000      	movs	r0, #0
10014350:	2200      	movs	r2, #0
10014352:	e7db      	b.n	1001430c <__aeabi_i2f+0x28>
10014354:	2205      	movs	r2, #5
10014356:	002e      	movs	r6, r5
10014358:	1a12      	subs	r2, r2, r0
1001435a:	21b9      	movs	r1, #185	; 0xb9
1001435c:	40d6      	lsrs	r6, r2
1001435e:	002a      	movs	r2, r5
10014360:	1ac9      	subs	r1, r1, r3
10014362:	408a      	lsls	r2, r1
10014364:	1e55      	subs	r5, r2, #1
10014366:	41aa      	sbcs	r2, r5
10014368:	0035      	movs	r5, r6
1001436a:	4315      	orrs	r5, r2
1001436c:	e7db      	b.n	10014326 <__aeabi_i2f+0x42>
1001436e:	46c0      	nop			; (mov r8, r8)
10014370:	fbffffff 	.word	0xfbffffff

10014374 <__aeabi_ui2f>:
10014374:	b570      	push	{r4, r5, r6, lr}
10014376:	1e04      	subs	r4, r0, #0
10014378:	d028      	beq.n	100143cc <__aeabi_ui2f+0x58>
1001437a:	f001 ff07 	bl	1001618c <__clzsi2>
1001437e:	239e      	movs	r3, #158	; 0x9e
10014380:	1a1b      	subs	r3, r3, r0
10014382:	2b96      	cmp	r3, #150	; 0x96
10014384:	dc0a      	bgt.n	1001439c <__aeabi_ui2f+0x28>
10014386:	2296      	movs	r2, #150	; 0x96
10014388:	1ad2      	subs	r2, r2, r3
1001438a:	4094      	lsls	r4, r2
1001438c:	0262      	lsls	r2, r4, #9
1001438e:	0a52      	lsrs	r2, r2, #9
10014390:	b2d8      	uxtb	r0, r3
10014392:	0252      	lsls	r2, r2, #9
10014394:	0a52      	lsrs	r2, r2, #9
10014396:	05c0      	lsls	r0, r0, #23
10014398:	4310      	orrs	r0, r2
1001439a:	bd70      	pop	{r4, r5, r6, pc}
1001439c:	2b99      	cmp	r3, #153	; 0x99
1001439e:	dc18      	bgt.n	100143d2 <__aeabi_ui2f+0x5e>
100143a0:	2299      	movs	r2, #153	; 0x99
100143a2:	1ad2      	subs	r2, r2, r3
100143a4:	4094      	lsls	r4, r2
100143a6:	4a11      	ldr	r2, [pc, #68]	; (100143ec <__aeabi_ui2f+0x78>)
100143a8:	4022      	ands	r2, r4
100143aa:	0761      	lsls	r1, r4, #29
100143ac:	d004      	beq.n	100143b8 <__aeabi_ui2f+0x44>
100143ae:	210f      	movs	r1, #15
100143b0:	400c      	ands	r4, r1
100143b2:	2c04      	cmp	r4, #4
100143b4:	d000      	beq.n	100143b8 <__aeabi_ui2f+0x44>
100143b6:	3204      	adds	r2, #4
100143b8:	0151      	lsls	r1, r2, #5
100143ba:	d503      	bpl.n	100143c4 <__aeabi_ui2f+0x50>
100143bc:	4b0b      	ldr	r3, [pc, #44]	; (100143ec <__aeabi_ui2f+0x78>)
100143be:	401a      	ands	r2, r3
100143c0:	239f      	movs	r3, #159	; 0x9f
100143c2:	1a1b      	subs	r3, r3, r0
100143c4:	0192      	lsls	r2, r2, #6
100143c6:	0a52      	lsrs	r2, r2, #9
100143c8:	b2d8      	uxtb	r0, r3
100143ca:	e7e2      	b.n	10014392 <__aeabi_ui2f+0x1e>
100143cc:	2000      	movs	r0, #0
100143ce:	2200      	movs	r2, #0
100143d0:	e7df      	b.n	10014392 <__aeabi_ui2f+0x1e>
100143d2:	2205      	movs	r2, #5
100143d4:	0025      	movs	r5, r4
100143d6:	1a12      	subs	r2, r2, r0
100143d8:	21b9      	movs	r1, #185	; 0xb9
100143da:	40d5      	lsrs	r5, r2
100143dc:	0022      	movs	r2, r4
100143de:	1ac9      	subs	r1, r1, r3
100143e0:	408a      	lsls	r2, r1
100143e2:	1e54      	subs	r4, r2, #1
100143e4:	41a2      	sbcs	r2, r4
100143e6:	002c      	movs	r4, r5
100143e8:	4314      	orrs	r4, r2
100143ea:	e7dc      	b.n	100143a6 <__aeabi_ui2f+0x32>
100143ec:	fbffffff 	.word	0xfbffffff

100143f0 <__aeabi_dadd>:
100143f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100143f2:	4656      	mov	r6, sl
100143f4:	465f      	mov	r7, fp
100143f6:	464d      	mov	r5, r9
100143f8:	4644      	mov	r4, r8
100143fa:	b4f0      	push	{r4, r5, r6, r7}
100143fc:	000f      	movs	r7, r1
100143fe:	0ffd      	lsrs	r5, r7, #31
10014400:	46aa      	mov	sl, r5
10014402:	0309      	lsls	r1, r1, #12
10014404:	007c      	lsls	r4, r7, #1
10014406:	002e      	movs	r6, r5
10014408:	005f      	lsls	r7, r3, #1
1001440a:	0f45      	lsrs	r5, r0, #29
1001440c:	0a49      	lsrs	r1, r1, #9
1001440e:	0d7f      	lsrs	r7, r7, #21
10014410:	4329      	orrs	r1, r5
10014412:	00c5      	lsls	r5, r0, #3
10014414:	0318      	lsls	r0, r3, #12
10014416:	46bc      	mov	ip, r7
10014418:	0a40      	lsrs	r0, r0, #9
1001441a:	0f57      	lsrs	r7, r2, #29
1001441c:	0d64      	lsrs	r4, r4, #21
1001441e:	0fdb      	lsrs	r3, r3, #31
10014420:	4338      	orrs	r0, r7
10014422:	00d2      	lsls	r2, r2, #3
10014424:	459a      	cmp	sl, r3
10014426:	d100      	bne.n	1001442a <__aeabi_dadd+0x3a>
10014428:	e0aa      	b.n	10014580 <__aeabi_dadd+0x190>
1001442a:	4666      	mov	r6, ip
1001442c:	1ba6      	subs	r6, r4, r6
1001442e:	2e00      	cmp	r6, #0
10014430:	dc00      	bgt.n	10014434 <__aeabi_dadd+0x44>
10014432:	e0ff      	b.n	10014634 <__aeabi_dadd+0x244>
10014434:	4663      	mov	r3, ip
10014436:	2b00      	cmp	r3, #0
10014438:	d139      	bne.n	100144ae <__aeabi_dadd+0xbe>
1001443a:	0003      	movs	r3, r0
1001443c:	4313      	orrs	r3, r2
1001443e:	d000      	beq.n	10014442 <__aeabi_dadd+0x52>
10014440:	e0d9      	b.n	100145f6 <__aeabi_dadd+0x206>
10014442:	076b      	lsls	r3, r5, #29
10014444:	d009      	beq.n	1001445a <__aeabi_dadd+0x6a>
10014446:	230f      	movs	r3, #15
10014448:	402b      	ands	r3, r5
1001444a:	2b04      	cmp	r3, #4
1001444c:	d005      	beq.n	1001445a <__aeabi_dadd+0x6a>
1001444e:	1d2b      	adds	r3, r5, #4
10014450:	42ab      	cmp	r3, r5
10014452:	41ad      	sbcs	r5, r5
10014454:	426d      	negs	r5, r5
10014456:	1949      	adds	r1, r1, r5
10014458:	001d      	movs	r5, r3
1001445a:	020b      	lsls	r3, r1, #8
1001445c:	d400      	bmi.n	10014460 <__aeabi_dadd+0x70>
1001445e:	e082      	b.n	10014566 <__aeabi_dadd+0x176>
10014460:	4bca      	ldr	r3, [pc, #808]	; (1001478c <__aeabi_dadd+0x39c>)
10014462:	3401      	adds	r4, #1
10014464:	429c      	cmp	r4, r3
10014466:	d100      	bne.n	1001446a <__aeabi_dadd+0x7a>
10014468:	e0fe      	b.n	10014668 <__aeabi_dadd+0x278>
1001446a:	000a      	movs	r2, r1
1001446c:	4656      	mov	r6, sl
1001446e:	4bc8      	ldr	r3, [pc, #800]	; (10014790 <__aeabi_dadd+0x3a0>)
10014470:	08ed      	lsrs	r5, r5, #3
10014472:	401a      	ands	r2, r3
10014474:	0750      	lsls	r0, r2, #29
10014476:	0564      	lsls	r4, r4, #21
10014478:	0252      	lsls	r2, r2, #9
1001447a:	4305      	orrs	r5, r0
1001447c:	0b12      	lsrs	r2, r2, #12
1001447e:	0d64      	lsrs	r4, r4, #21
10014480:	2100      	movs	r1, #0
10014482:	0312      	lsls	r2, r2, #12
10014484:	0d0b      	lsrs	r3, r1, #20
10014486:	051b      	lsls	r3, r3, #20
10014488:	0564      	lsls	r4, r4, #21
1001448a:	0b12      	lsrs	r2, r2, #12
1001448c:	431a      	orrs	r2, r3
1001448e:	0863      	lsrs	r3, r4, #1
10014490:	4cc0      	ldr	r4, [pc, #768]	; (10014794 <__aeabi_dadd+0x3a4>)
10014492:	07f6      	lsls	r6, r6, #31
10014494:	4014      	ands	r4, r2
10014496:	431c      	orrs	r4, r3
10014498:	0064      	lsls	r4, r4, #1
1001449a:	0864      	lsrs	r4, r4, #1
1001449c:	4334      	orrs	r4, r6
1001449e:	0028      	movs	r0, r5
100144a0:	0021      	movs	r1, r4
100144a2:	bc3c      	pop	{r2, r3, r4, r5}
100144a4:	4690      	mov	r8, r2
100144a6:	4699      	mov	r9, r3
100144a8:	46a2      	mov	sl, r4
100144aa:	46ab      	mov	fp, r5
100144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100144ae:	4bb7      	ldr	r3, [pc, #732]	; (1001478c <__aeabi_dadd+0x39c>)
100144b0:	429c      	cmp	r4, r3
100144b2:	d0c6      	beq.n	10014442 <__aeabi_dadd+0x52>
100144b4:	2380      	movs	r3, #128	; 0x80
100144b6:	041b      	lsls	r3, r3, #16
100144b8:	4318      	orrs	r0, r3
100144ba:	2e38      	cmp	r6, #56	; 0x38
100144bc:	dd00      	ble.n	100144c0 <__aeabi_dadd+0xd0>
100144be:	e0eb      	b.n	10014698 <__aeabi_dadd+0x2a8>
100144c0:	2e1f      	cmp	r6, #31
100144c2:	dd00      	ble.n	100144c6 <__aeabi_dadd+0xd6>
100144c4:	e11e      	b.n	10014704 <__aeabi_dadd+0x314>
100144c6:	2320      	movs	r3, #32
100144c8:	1b9b      	subs	r3, r3, r6
100144ca:	469c      	mov	ip, r3
100144cc:	0003      	movs	r3, r0
100144ce:	4667      	mov	r7, ip
100144d0:	40bb      	lsls	r3, r7
100144d2:	4698      	mov	r8, r3
100144d4:	0013      	movs	r3, r2
100144d6:	4647      	mov	r7, r8
100144d8:	40f3      	lsrs	r3, r6
100144da:	433b      	orrs	r3, r7
100144dc:	4667      	mov	r7, ip
100144de:	40ba      	lsls	r2, r7
100144e0:	1e57      	subs	r7, r2, #1
100144e2:	41ba      	sbcs	r2, r7
100144e4:	4313      	orrs	r3, r2
100144e6:	0002      	movs	r2, r0
100144e8:	40f2      	lsrs	r2, r6
100144ea:	1aeb      	subs	r3, r5, r3
100144ec:	429d      	cmp	r5, r3
100144ee:	41b6      	sbcs	r6, r6
100144f0:	001d      	movs	r5, r3
100144f2:	1a8a      	subs	r2, r1, r2
100144f4:	4276      	negs	r6, r6
100144f6:	1b91      	subs	r1, r2, r6
100144f8:	020b      	lsls	r3, r1, #8
100144fa:	d531      	bpl.n	10014560 <__aeabi_dadd+0x170>
100144fc:	024a      	lsls	r2, r1, #9
100144fe:	0a56      	lsrs	r6, r2, #9
10014500:	2e00      	cmp	r6, #0
10014502:	d100      	bne.n	10014506 <__aeabi_dadd+0x116>
10014504:	e0b4      	b.n	10014670 <__aeabi_dadd+0x280>
10014506:	0030      	movs	r0, r6
10014508:	f001 fe40 	bl	1001618c <__clzsi2>
1001450c:	0003      	movs	r3, r0
1001450e:	3b08      	subs	r3, #8
10014510:	2b1f      	cmp	r3, #31
10014512:	dd00      	ble.n	10014516 <__aeabi_dadd+0x126>
10014514:	e0b5      	b.n	10014682 <__aeabi_dadd+0x292>
10014516:	2220      	movs	r2, #32
10014518:	0029      	movs	r1, r5
1001451a:	1ad2      	subs	r2, r2, r3
1001451c:	40d1      	lsrs	r1, r2
1001451e:	409e      	lsls	r6, r3
10014520:	000a      	movs	r2, r1
10014522:	409d      	lsls	r5, r3
10014524:	4332      	orrs	r2, r6
10014526:	429c      	cmp	r4, r3
10014528:	dd00      	ble.n	1001452c <__aeabi_dadd+0x13c>
1001452a:	e0b1      	b.n	10014690 <__aeabi_dadd+0x2a0>
1001452c:	1b1c      	subs	r4, r3, r4
1001452e:	1c63      	adds	r3, r4, #1
10014530:	2b1f      	cmp	r3, #31
10014532:	dd00      	ble.n	10014536 <__aeabi_dadd+0x146>
10014534:	e0d5      	b.n	100146e2 <__aeabi_dadd+0x2f2>
10014536:	2120      	movs	r1, #32
10014538:	0014      	movs	r4, r2
1001453a:	0028      	movs	r0, r5
1001453c:	1ac9      	subs	r1, r1, r3
1001453e:	408c      	lsls	r4, r1
10014540:	40d8      	lsrs	r0, r3
10014542:	408d      	lsls	r5, r1
10014544:	4304      	orrs	r4, r0
10014546:	40da      	lsrs	r2, r3
10014548:	1e68      	subs	r0, r5, #1
1001454a:	4185      	sbcs	r5, r0
1001454c:	0011      	movs	r1, r2
1001454e:	4325      	orrs	r5, r4
10014550:	2400      	movs	r4, #0
10014552:	e776      	b.n	10014442 <__aeabi_dadd+0x52>
10014554:	4641      	mov	r1, r8
10014556:	4331      	orrs	r1, r6
10014558:	d100      	bne.n	1001455c <__aeabi_dadd+0x16c>
1001455a:	e234      	b.n	100149c6 <__aeabi_dadd+0x5d6>
1001455c:	0031      	movs	r1, r6
1001455e:	4645      	mov	r5, r8
10014560:	076b      	lsls	r3, r5, #29
10014562:	d000      	beq.n	10014566 <__aeabi_dadd+0x176>
10014564:	e76f      	b.n	10014446 <__aeabi_dadd+0x56>
10014566:	4656      	mov	r6, sl
10014568:	0748      	lsls	r0, r1, #29
1001456a:	08ed      	lsrs	r5, r5, #3
1001456c:	08c9      	lsrs	r1, r1, #3
1001456e:	4305      	orrs	r5, r0
10014570:	4b86      	ldr	r3, [pc, #536]	; (1001478c <__aeabi_dadd+0x39c>)
10014572:	429c      	cmp	r4, r3
10014574:	d035      	beq.n	100145e2 <__aeabi_dadd+0x1f2>
10014576:	030a      	lsls	r2, r1, #12
10014578:	0564      	lsls	r4, r4, #21
1001457a:	0b12      	lsrs	r2, r2, #12
1001457c:	0d64      	lsrs	r4, r4, #21
1001457e:	e77f      	b.n	10014480 <__aeabi_dadd+0x90>
10014580:	4663      	mov	r3, ip
10014582:	1ae3      	subs	r3, r4, r3
10014584:	469b      	mov	fp, r3
10014586:	2b00      	cmp	r3, #0
10014588:	dc00      	bgt.n	1001458c <__aeabi_dadd+0x19c>
1001458a:	e08b      	b.n	100146a4 <__aeabi_dadd+0x2b4>
1001458c:	4667      	mov	r7, ip
1001458e:	2f00      	cmp	r7, #0
10014590:	d03c      	beq.n	1001460c <__aeabi_dadd+0x21c>
10014592:	4f7e      	ldr	r7, [pc, #504]	; (1001478c <__aeabi_dadd+0x39c>)
10014594:	42bc      	cmp	r4, r7
10014596:	d100      	bne.n	1001459a <__aeabi_dadd+0x1aa>
10014598:	e753      	b.n	10014442 <__aeabi_dadd+0x52>
1001459a:	2780      	movs	r7, #128	; 0x80
1001459c:	043f      	lsls	r7, r7, #16
1001459e:	4338      	orrs	r0, r7
100145a0:	465b      	mov	r3, fp
100145a2:	2b38      	cmp	r3, #56	; 0x38
100145a4:	dc00      	bgt.n	100145a8 <__aeabi_dadd+0x1b8>
100145a6:	e0f7      	b.n	10014798 <__aeabi_dadd+0x3a8>
100145a8:	4302      	orrs	r2, r0
100145aa:	1e50      	subs	r0, r2, #1
100145ac:	4182      	sbcs	r2, r0
100145ae:	2000      	movs	r0, #0
100145b0:	b2d2      	uxtb	r2, r2
100145b2:	1953      	adds	r3, r2, r5
100145b4:	1842      	adds	r2, r0, r1
100145b6:	42ab      	cmp	r3, r5
100145b8:	4189      	sbcs	r1, r1
100145ba:	001d      	movs	r5, r3
100145bc:	4249      	negs	r1, r1
100145be:	1889      	adds	r1, r1, r2
100145c0:	020b      	lsls	r3, r1, #8
100145c2:	d5cd      	bpl.n	10014560 <__aeabi_dadd+0x170>
100145c4:	4b71      	ldr	r3, [pc, #452]	; (1001478c <__aeabi_dadd+0x39c>)
100145c6:	3401      	adds	r4, #1
100145c8:	429c      	cmp	r4, r3
100145ca:	d100      	bne.n	100145ce <__aeabi_dadd+0x1de>
100145cc:	e13d      	b.n	1001484a <__aeabi_dadd+0x45a>
100145ce:	2001      	movs	r0, #1
100145d0:	4a6f      	ldr	r2, [pc, #444]	; (10014790 <__aeabi_dadd+0x3a0>)
100145d2:	086b      	lsrs	r3, r5, #1
100145d4:	400a      	ands	r2, r1
100145d6:	4028      	ands	r0, r5
100145d8:	4318      	orrs	r0, r3
100145da:	07d5      	lsls	r5, r2, #31
100145dc:	4305      	orrs	r5, r0
100145de:	0851      	lsrs	r1, r2, #1
100145e0:	e72f      	b.n	10014442 <__aeabi_dadd+0x52>
100145e2:	002b      	movs	r3, r5
100145e4:	430b      	orrs	r3, r1
100145e6:	d100      	bne.n	100145ea <__aeabi_dadd+0x1fa>
100145e8:	e1cb      	b.n	10014982 <__aeabi_dadd+0x592>
100145ea:	2380      	movs	r3, #128	; 0x80
100145ec:	031b      	lsls	r3, r3, #12
100145ee:	430b      	orrs	r3, r1
100145f0:	031a      	lsls	r2, r3, #12
100145f2:	0b12      	lsrs	r2, r2, #12
100145f4:	e744      	b.n	10014480 <__aeabi_dadd+0x90>
100145f6:	3e01      	subs	r6, #1
100145f8:	2e00      	cmp	r6, #0
100145fa:	d16d      	bne.n	100146d8 <__aeabi_dadd+0x2e8>
100145fc:	1aae      	subs	r6, r5, r2
100145fe:	42b5      	cmp	r5, r6
10014600:	419b      	sbcs	r3, r3
10014602:	1a09      	subs	r1, r1, r0
10014604:	425b      	negs	r3, r3
10014606:	1ac9      	subs	r1, r1, r3
10014608:	0035      	movs	r5, r6
1001460a:	e775      	b.n	100144f8 <__aeabi_dadd+0x108>
1001460c:	0007      	movs	r7, r0
1001460e:	4317      	orrs	r7, r2
10014610:	d100      	bne.n	10014614 <__aeabi_dadd+0x224>
10014612:	e716      	b.n	10014442 <__aeabi_dadd+0x52>
10014614:	2301      	movs	r3, #1
10014616:	425b      	negs	r3, r3
10014618:	469c      	mov	ip, r3
1001461a:	44e3      	add	fp, ip
1001461c:	465b      	mov	r3, fp
1001461e:	2b00      	cmp	r3, #0
10014620:	d000      	beq.n	10014624 <__aeabi_dadd+0x234>
10014622:	e0e0      	b.n	100147e6 <__aeabi_dadd+0x3f6>
10014624:	18aa      	adds	r2, r5, r2
10014626:	42aa      	cmp	r2, r5
10014628:	419b      	sbcs	r3, r3
1001462a:	1809      	adds	r1, r1, r0
1001462c:	425b      	negs	r3, r3
1001462e:	1859      	adds	r1, r3, r1
10014630:	0015      	movs	r5, r2
10014632:	e7c5      	b.n	100145c0 <__aeabi_dadd+0x1d0>
10014634:	2e00      	cmp	r6, #0
10014636:	d175      	bne.n	10014724 <__aeabi_dadd+0x334>
10014638:	1c66      	adds	r6, r4, #1
1001463a:	0576      	lsls	r6, r6, #21
1001463c:	0d76      	lsrs	r6, r6, #21
1001463e:	2e01      	cmp	r6, #1
10014640:	dc00      	bgt.n	10014644 <__aeabi_dadd+0x254>
10014642:	e0f3      	b.n	1001482c <__aeabi_dadd+0x43c>
10014644:	1aae      	subs	r6, r5, r2
10014646:	46b0      	mov	r8, r6
10014648:	4545      	cmp	r5, r8
1001464a:	41bf      	sbcs	r7, r7
1001464c:	1a0e      	subs	r6, r1, r0
1001464e:	427f      	negs	r7, r7
10014650:	1bf6      	subs	r6, r6, r7
10014652:	0237      	lsls	r7, r6, #8
10014654:	d400      	bmi.n	10014658 <__aeabi_dadd+0x268>
10014656:	e08f      	b.n	10014778 <__aeabi_dadd+0x388>
10014658:	1b55      	subs	r5, r2, r5
1001465a:	42aa      	cmp	r2, r5
1001465c:	41b6      	sbcs	r6, r6
1001465e:	1a41      	subs	r1, r0, r1
10014660:	4276      	negs	r6, r6
10014662:	1b8e      	subs	r6, r1, r6
10014664:	469a      	mov	sl, r3
10014666:	e74b      	b.n	10014500 <__aeabi_dadd+0x110>
10014668:	4656      	mov	r6, sl
1001466a:	2200      	movs	r2, #0
1001466c:	2500      	movs	r5, #0
1001466e:	e707      	b.n	10014480 <__aeabi_dadd+0x90>
10014670:	0028      	movs	r0, r5
10014672:	f001 fd8b 	bl	1001618c <__clzsi2>
10014676:	3020      	adds	r0, #32
10014678:	0003      	movs	r3, r0
1001467a:	3b08      	subs	r3, #8
1001467c:	2b1f      	cmp	r3, #31
1001467e:	dc00      	bgt.n	10014682 <__aeabi_dadd+0x292>
10014680:	e749      	b.n	10014516 <__aeabi_dadd+0x126>
10014682:	002a      	movs	r2, r5
10014684:	3828      	subs	r0, #40	; 0x28
10014686:	4082      	lsls	r2, r0
10014688:	2500      	movs	r5, #0
1001468a:	429c      	cmp	r4, r3
1001468c:	dc00      	bgt.n	10014690 <__aeabi_dadd+0x2a0>
1001468e:	e74d      	b.n	1001452c <__aeabi_dadd+0x13c>
10014690:	493f      	ldr	r1, [pc, #252]	; (10014790 <__aeabi_dadd+0x3a0>)
10014692:	1ae4      	subs	r4, r4, r3
10014694:	4011      	ands	r1, r2
10014696:	e6d4      	b.n	10014442 <__aeabi_dadd+0x52>
10014698:	4302      	orrs	r2, r0
1001469a:	1e50      	subs	r0, r2, #1
1001469c:	4182      	sbcs	r2, r0
1001469e:	b2d3      	uxtb	r3, r2
100146a0:	2200      	movs	r2, #0
100146a2:	e722      	b.n	100144ea <__aeabi_dadd+0xfa>
100146a4:	2b00      	cmp	r3, #0
100146a6:	d000      	beq.n	100146aa <__aeabi_dadd+0x2ba>
100146a8:	e0f3      	b.n	10014892 <__aeabi_dadd+0x4a2>
100146aa:	1c63      	adds	r3, r4, #1
100146ac:	469c      	mov	ip, r3
100146ae:	055b      	lsls	r3, r3, #21
100146b0:	0d5b      	lsrs	r3, r3, #21
100146b2:	2b01      	cmp	r3, #1
100146b4:	dc00      	bgt.n	100146b8 <__aeabi_dadd+0x2c8>
100146b6:	e09f      	b.n	100147f8 <__aeabi_dadd+0x408>
100146b8:	4b34      	ldr	r3, [pc, #208]	; (1001478c <__aeabi_dadd+0x39c>)
100146ba:	459c      	cmp	ip, r3
100146bc:	d100      	bne.n	100146c0 <__aeabi_dadd+0x2d0>
100146be:	e0c3      	b.n	10014848 <__aeabi_dadd+0x458>
100146c0:	18aa      	adds	r2, r5, r2
100146c2:	1809      	adds	r1, r1, r0
100146c4:	42aa      	cmp	r2, r5
100146c6:	4180      	sbcs	r0, r0
100146c8:	4240      	negs	r0, r0
100146ca:	1841      	adds	r1, r0, r1
100146cc:	07cd      	lsls	r5, r1, #31
100146ce:	0852      	lsrs	r2, r2, #1
100146d0:	4315      	orrs	r5, r2
100146d2:	0849      	lsrs	r1, r1, #1
100146d4:	4664      	mov	r4, ip
100146d6:	e6b4      	b.n	10014442 <__aeabi_dadd+0x52>
100146d8:	4b2c      	ldr	r3, [pc, #176]	; (1001478c <__aeabi_dadd+0x39c>)
100146da:	429c      	cmp	r4, r3
100146dc:	d000      	beq.n	100146e0 <__aeabi_dadd+0x2f0>
100146de:	e6ec      	b.n	100144ba <__aeabi_dadd+0xca>
100146e0:	e6af      	b.n	10014442 <__aeabi_dadd+0x52>
100146e2:	0011      	movs	r1, r2
100146e4:	3c1f      	subs	r4, #31
100146e6:	40e1      	lsrs	r1, r4
100146e8:	000c      	movs	r4, r1
100146ea:	2b20      	cmp	r3, #32
100146ec:	d100      	bne.n	100146f0 <__aeabi_dadd+0x300>
100146ee:	e07f      	b.n	100147f0 <__aeabi_dadd+0x400>
100146f0:	2140      	movs	r1, #64	; 0x40
100146f2:	1acb      	subs	r3, r1, r3
100146f4:	409a      	lsls	r2, r3
100146f6:	4315      	orrs	r5, r2
100146f8:	1e6a      	subs	r2, r5, #1
100146fa:	4195      	sbcs	r5, r2
100146fc:	2100      	movs	r1, #0
100146fe:	4325      	orrs	r5, r4
10014700:	2400      	movs	r4, #0
10014702:	e72d      	b.n	10014560 <__aeabi_dadd+0x170>
10014704:	0033      	movs	r3, r6
10014706:	0007      	movs	r7, r0
10014708:	3b20      	subs	r3, #32
1001470a:	40df      	lsrs	r7, r3
1001470c:	003b      	movs	r3, r7
1001470e:	2e20      	cmp	r6, #32
10014710:	d070      	beq.n	100147f4 <__aeabi_dadd+0x404>
10014712:	2740      	movs	r7, #64	; 0x40
10014714:	1bbe      	subs	r6, r7, r6
10014716:	40b0      	lsls	r0, r6
10014718:	4302      	orrs	r2, r0
1001471a:	1e50      	subs	r0, r2, #1
1001471c:	4182      	sbcs	r2, r0
1001471e:	4313      	orrs	r3, r2
10014720:	2200      	movs	r2, #0
10014722:	e6e2      	b.n	100144ea <__aeabi_dadd+0xfa>
10014724:	2c00      	cmp	r4, #0
10014726:	d04f      	beq.n	100147c8 <__aeabi_dadd+0x3d8>
10014728:	4c18      	ldr	r4, [pc, #96]	; (1001478c <__aeabi_dadd+0x39c>)
1001472a:	45a4      	cmp	ip, r4
1001472c:	d100      	bne.n	10014730 <__aeabi_dadd+0x340>
1001472e:	e0ab      	b.n	10014888 <__aeabi_dadd+0x498>
10014730:	2480      	movs	r4, #128	; 0x80
10014732:	0424      	lsls	r4, r4, #16
10014734:	4276      	negs	r6, r6
10014736:	4321      	orrs	r1, r4
10014738:	2e38      	cmp	r6, #56	; 0x38
1001473a:	dd00      	ble.n	1001473e <__aeabi_dadd+0x34e>
1001473c:	e0df      	b.n	100148fe <__aeabi_dadd+0x50e>
1001473e:	2e1f      	cmp	r6, #31
10014740:	dd00      	ble.n	10014744 <__aeabi_dadd+0x354>
10014742:	e143      	b.n	100149cc <__aeabi_dadd+0x5dc>
10014744:	2720      	movs	r7, #32
10014746:	1bbc      	subs	r4, r7, r6
10014748:	46a1      	mov	r9, r4
1001474a:	000c      	movs	r4, r1
1001474c:	464f      	mov	r7, r9
1001474e:	40bc      	lsls	r4, r7
10014750:	46a0      	mov	r8, r4
10014752:	002c      	movs	r4, r5
10014754:	4647      	mov	r7, r8
10014756:	40f4      	lsrs	r4, r6
10014758:	433c      	orrs	r4, r7
1001475a:	464f      	mov	r7, r9
1001475c:	40bd      	lsls	r5, r7
1001475e:	1e6f      	subs	r7, r5, #1
10014760:	41bd      	sbcs	r5, r7
10014762:	40f1      	lsrs	r1, r6
10014764:	432c      	orrs	r4, r5
10014766:	1b15      	subs	r5, r2, r4
10014768:	42aa      	cmp	r2, r5
1001476a:	4192      	sbcs	r2, r2
1001476c:	1a41      	subs	r1, r0, r1
1001476e:	4252      	negs	r2, r2
10014770:	1a89      	subs	r1, r1, r2
10014772:	4664      	mov	r4, ip
10014774:	469a      	mov	sl, r3
10014776:	e6bf      	b.n	100144f8 <__aeabi_dadd+0x108>
10014778:	4641      	mov	r1, r8
1001477a:	4645      	mov	r5, r8
1001477c:	4331      	orrs	r1, r6
1001477e:	d000      	beq.n	10014782 <__aeabi_dadd+0x392>
10014780:	e6be      	b.n	10014500 <__aeabi_dadd+0x110>
10014782:	2600      	movs	r6, #0
10014784:	2400      	movs	r4, #0
10014786:	2500      	movs	r5, #0
10014788:	e6f2      	b.n	10014570 <__aeabi_dadd+0x180>
1001478a:	46c0      	nop			; (mov r8, r8)
1001478c:	000007ff 	.word	0x000007ff
10014790:	ff7fffff 	.word	0xff7fffff
10014794:	800fffff 	.word	0x800fffff
10014798:	2b1f      	cmp	r3, #31
1001479a:	dc59      	bgt.n	10014850 <__aeabi_dadd+0x460>
1001479c:	2720      	movs	r7, #32
1001479e:	1aff      	subs	r7, r7, r3
100147a0:	46bc      	mov	ip, r7
100147a2:	0007      	movs	r7, r0
100147a4:	4663      	mov	r3, ip
100147a6:	409f      	lsls	r7, r3
100147a8:	465b      	mov	r3, fp
100147aa:	46b9      	mov	r9, r7
100147ac:	0017      	movs	r7, r2
100147ae:	40df      	lsrs	r7, r3
100147b0:	46b8      	mov	r8, r7
100147b2:	464f      	mov	r7, r9
100147b4:	4643      	mov	r3, r8
100147b6:	431f      	orrs	r7, r3
100147b8:	4663      	mov	r3, ip
100147ba:	409a      	lsls	r2, r3
100147bc:	1e53      	subs	r3, r2, #1
100147be:	419a      	sbcs	r2, r3
100147c0:	465b      	mov	r3, fp
100147c2:	433a      	orrs	r2, r7
100147c4:	40d8      	lsrs	r0, r3
100147c6:	e6f4      	b.n	100145b2 <__aeabi_dadd+0x1c2>
100147c8:	000c      	movs	r4, r1
100147ca:	432c      	orrs	r4, r5
100147cc:	d05c      	beq.n	10014888 <__aeabi_dadd+0x498>
100147ce:	43f6      	mvns	r6, r6
100147d0:	2e00      	cmp	r6, #0
100147d2:	d155      	bne.n	10014880 <__aeabi_dadd+0x490>
100147d4:	1b55      	subs	r5, r2, r5
100147d6:	42aa      	cmp	r2, r5
100147d8:	41a4      	sbcs	r4, r4
100147da:	1a41      	subs	r1, r0, r1
100147dc:	4264      	negs	r4, r4
100147de:	1b09      	subs	r1, r1, r4
100147e0:	469a      	mov	sl, r3
100147e2:	4664      	mov	r4, ip
100147e4:	e688      	b.n	100144f8 <__aeabi_dadd+0x108>
100147e6:	4f96      	ldr	r7, [pc, #600]	; (10014a40 <__aeabi_dadd+0x650>)
100147e8:	42bc      	cmp	r4, r7
100147ea:	d000      	beq.n	100147ee <__aeabi_dadd+0x3fe>
100147ec:	e6d8      	b.n	100145a0 <__aeabi_dadd+0x1b0>
100147ee:	e628      	b.n	10014442 <__aeabi_dadd+0x52>
100147f0:	2200      	movs	r2, #0
100147f2:	e780      	b.n	100146f6 <__aeabi_dadd+0x306>
100147f4:	2000      	movs	r0, #0
100147f6:	e78f      	b.n	10014718 <__aeabi_dadd+0x328>
100147f8:	000b      	movs	r3, r1
100147fa:	432b      	orrs	r3, r5
100147fc:	2c00      	cmp	r4, #0
100147fe:	d000      	beq.n	10014802 <__aeabi_dadd+0x412>
10014800:	e0c2      	b.n	10014988 <__aeabi_dadd+0x598>
10014802:	2b00      	cmp	r3, #0
10014804:	d100      	bne.n	10014808 <__aeabi_dadd+0x418>
10014806:	e101      	b.n	10014a0c <__aeabi_dadd+0x61c>
10014808:	0003      	movs	r3, r0
1001480a:	4313      	orrs	r3, r2
1001480c:	d100      	bne.n	10014810 <__aeabi_dadd+0x420>
1001480e:	e618      	b.n	10014442 <__aeabi_dadd+0x52>
10014810:	18ab      	adds	r3, r5, r2
10014812:	42ab      	cmp	r3, r5
10014814:	41b6      	sbcs	r6, r6
10014816:	1809      	adds	r1, r1, r0
10014818:	4276      	negs	r6, r6
1001481a:	1871      	adds	r1, r6, r1
1001481c:	020a      	lsls	r2, r1, #8
1001481e:	d400      	bmi.n	10014822 <__aeabi_dadd+0x432>
10014820:	e109      	b.n	10014a36 <__aeabi_dadd+0x646>
10014822:	4a88      	ldr	r2, [pc, #544]	; (10014a44 <__aeabi_dadd+0x654>)
10014824:	001d      	movs	r5, r3
10014826:	4011      	ands	r1, r2
10014828:	4664      	mov	r4, ip
1001482a:	e60a      	b.n	10014442 <__aeabi_dadd+0x52>
1001482c:	2c00      	cmp	r4, #0
1001482e:	d15b      	bne.n	100148e8 <__aeabi_dadd+0x4f8>
10014830:	000e      	movs	r6, r1
10014832:	432e      	orrs	r6, r5
10014834:	d000      	beq.n	10014838 <__aeabi_dadd+0x448>
10014836:	e08a      	b.n	1001494e <__aeabi_dadd+0x55e>
10014838:	0001      	movs	r1, r0
1001483a:	4311      	orrs	r1, r2
1001483c:	d100      	bne.n	10014840 <__aeabi_dadd+0x450>
1001483e:	e0c2      	b.n	100149c6 <__aeabi_dadd+0x5d6>
10014840:	0001      	movs	r1, r0
10014842:	0015      	movs	r5, r2
10014844:	469a      	mov	sl, r3
10014846:	e5fc      	b.n	10014442 <__aeabi_dadd+0x52>
10014848:	4664      	mov	r4, ip
1001484a:	2100      	movs	r1, #0
1001484c:	2500      	movs	r5, #0
1001484e:	e68f      	b.n	10014570 <__aeabi_dadd+0x180>
10014850:	2320      	movs	r3, #32
10014852:	425b      	negs	r3, r3
10014854:	469c      	mov	ip, r3
10014856:	44dc      	add	ip, fp
10014858:	4663      	mov	r3, ip
1001485a:	0007      	movs	r7, r0
1001485c:	40df      	lsrs	r7, r3
1001485e:	465b      	mov	r3, fp
10014860:	46bc      	mov	ip, r7
10014862:	2b20      	cmp	r3, #32
10014864:	d100      	bne.n	10014868 <__aeabi_dadd+0x478>
10014866:	e0ac      	b.n	100149c2 <__aeabi_dadd+0x5d2>
10014868:	2340      	movs	r3, #64	; 0x40
1001486a:	465f      	mov	r7, fp
1001486c:	1bdb      	subs	r3, r3, r7
1001486e:	4098      	lsls	r0, r3
10014870:	4302      	orrs	r2, r0
10014872:	1e50      	subs	r0, r2, #1
10014874:	4182      	sbcs	r2, r0
10014876:	4663      	mov	r3, ip
10014878:	4313      	orrs	r3, r2
1001487a:	001a      	movs	r2, r3
1001487c:	2000      	movs	r0, #0
1001487e:	e698      	b.n	100145b2 <__aeabi_dadd+0x1c2>
10014880:	4c6f      	ldr	r4, [pc, #444]	; (10014a40 <__aeabi_dadd+0x650>)
10014882:	45a4      	cmp	ip, r4
10014884:	d000      	beq.n	10014888 <__aeabi_dadd+0x498>
10014886:	e757      	b.n	10014738 <__aeabi_dadd+0x348>
10014888:	0001      	movs	r1, r0
1001488a:	0015      	movs	r5, r2
1001488c:	4664      	mov	r4, ip
1001488e:	469a      	mov	sl, r3
10014890:	e5d7      	b.n	10014442 <__aeabi_dadd+0x52>
10014892:	2c00      	cmp	r4, #0
10014894:	d139      	bne.n	1001490a <__aeabi_dadd+0x51a>
10014896:	000c      	movs	r4, r1
10014898:	432c      	orrs	r4, r5
1001489a:	d06e      	beq.n	1001497a <__aeabi_dadd+0x58a>
1001489c:	43db      	mvns	r3, r3
1001489e:	2b00      	cmp	r3, #0
100148a0:	d01a      	beq.n	100148d8 <__aeabi_dadd+0x4e8>
100148a2:	4c67      	ldr	r4, [pc, #412]	; (10014a40 <__aeabi_dadd+0x650>)
100148a4:	45a4      	cmp	ip, r4
100148a6:	d068      	beq.n	1001497a <__aeabi_dadd+0x58a>
100148a8:	2b38      	cmp	r3, #56	; 0x38
100148aa:	dd00      	ble.n	100148ae <__aeabi_dadd+0x4be>
100148ac:	e0a4      	b.n	100149f8 <__aeabi_dadd+0x608>
100148ae:	2b1f      	cmp	r3, #31
100148b0:	dd00      	ble.n	100148b4 <__aeabi_dadd+0x4c4>
100148b2:	e0ae      	b.n	10014a12 <__aeabi_dadd+0x622>
100148b4:	2420      	movs	r4, #32
100148b6:	000f      	movs	r7, r1
100148b8:	1ae4      	subs	r4, r4, r3
100148ba:	40a7      	lsls	r7, r4
100148bc:	46b9      	mov	r9, r7
100148be:	002f      	movs	r7, r5
100148c0:	40df      	lsrs	r7, r3
100148c2:	46b8      	mov	r8, r7
100148c4:	46a3      	mov	fp, r4
100148c6:	464f      	mov	r7, r9
100148c8:	4644      	mov	r4, r8
100148ca:	4327      	orrs	r7, r4
100148cc:	465c      	mov	r4, fp
100148ce:	40a5      	lsls	r5, r4
100148d0:	1e6c      	subs	r4, r5, #1
100148d2:	41a5      	sbcs	r5, r4
100148d4:	40d9      	lsrs	r1, r3
100148d6:	433d      	orrs	r5, r7
100148d8:	18ad      	adds	r5, r5, r2
100148da:	4295      	cmp	r5, r2
100148dc:	419b      	sbcs	r3, r3
100148de:	1809      	adds	r1, r1, r0
100148e0:	425b      	negs	r3, r3
100148e2:	1859      	adds	r1, r3, r1
100148e4:	4664      	mov	r4, ip
100148e6:	e66b      	b.n	100145c0 <__aeabi_dadd+0x1d0>
100148e8:	000c      	movs	r4, r1
100148ea:	432c      	orrs	r4, r5
100148ec:	d115      	bne.n	1001491a <__aeabi_dadd+0x52a>
100148ee:	0001      	movs	r1, r0
100148f0:	4311      	orrs	r1, r2
100148f2:	d07b      	beq.n	100149ec <__aeabi_dadd+0x5fc>
100148f4:	0001      	movs	r1, r0
100148f6:	0015      	movs	r5, r2
100148f8:	469a      	mov	sl, r3
100148fa:	4c51      	ldr	r4, [pc, #324]	; (10014a40 <__aeabi_dadd+0x650>)
100148fc:	e5a1      	b.n	10014442 <__aeabi_dadd+0x52>
100148fe:	430d      	orrs	r5, r1
10014900:	1e69      	subs	r1, r5, #1
10014902:	418d      	sbcs	r5, r1
10014904:	2100      	movs	r1, #0
10014906:	b2ec      	uxtb	r4, r5
10014908:	e72d      	b.n	10014766 <__aeabi_dadd+0x376>
1001490a:	4c4d      	ldr	r4, [pc, #308]	; (10014a40 <__aeabi_dadd+0x650>)
1001490c:	45a4      	cmp	ip, r4
1001490e:	d034      	beq.n	1001497a <__aeabi_dadd+0x58a>
10014910:	2480      	movs	r4, #128	; 0x80
10014912:	0424      	lsls	r4, r4, #16
10014914:	425b      	negs	r3, r3
10014916:	4321      	orrs	r1, r4
10014918:	e7c6      	b.n	100148a8 <__aeabi_dadd+0x4b8>
1001491a:	0004      	movs	r4, r0
1001491c:	4314      	orrs	r4, r2
1001491e:	d04e      	beq.n	100149be <__aeabi_dadd+0x5ce>
10014920:	08ed      	lsrs	r5, r5, #3
10014922:	074c      	lsls	r4, r1, #29
10014924:	432c      	orrs	r4, r5
10014926:	2580      	movs	r5, #128	; 0x80
10014928:	08c9      	lsrs	r1, r1, #3
1001492a:	032d      	lsls	r5, r5, #12
1001492c:	4229      	tst	r1, r5
1001492e:	d008      	beq.n	10014942 <__aeabi_dadd+0x552>
10014930:	08c6      	lsrs	r6, r0, #3
10014932:	422e      	tst	r6, r5
10014934:	d105      	bne.n	10014942 <__aeabi_dadd+0x552>
10014936:	08d2      	lsrs	r2, r2, #3
10014938:	0741      	lsls	r1, r0, #29
1001493a:	4311      	orrs	r1, r2
1001493c:	000c      	movs	r4, r1
1001493e:	469a      	mov	sl, r3
10014940:	0031      	movs	r1, r6
10014942:	0f62      	lsrs	r2, r4, #29
10014944:	00c9      	lsls	r1, r1, #3
10014946:	00e5      	lsls	r5, r4, #3
10014948:	4311      	orrs	r1, r2
1001494a:	4c3d      	ldr	r4, [pc, #244]	; (10014a40 <__aeabi_dadd+0x650>)
1001494c:	e579      	b.n	10014442 <__aeabi_dadd+0x52>
1001494e:	0006      	movs	r6, r0
10014950:	4316      	orrs	r6, r2
10014952:	d100      	bne.n	10014956 <__aeabi_dadd+0x566>
10014954:	e575      	b.n	10014442 <__aeabi_dadd+0x52>
10014956:	1aae      	subs	r6, r5, r2
10014958:	46b0      	mov	r8, r6
1001495a:	4545      	cmp	r5, r8
1001495c:	41bf      	sbcs	r7, r7
1001495e:	1a0e      	subs	r6, r1, r0
10014960:	427f      	negs	r7, r7
10014962:	1bf6      	subs	r6, r6, r7
10014964:	0237      	lsls	r7, r6, #8
10014966:	d400      	bmi.n	1001496a <__aeabi_dadd+0x57a>
10014968:	e5f4      	b.n	10014554 <__aeabi_dadd+0x164>
1001496a:	1b55      	subs	r5, r2, r5
1001496c:	42aa      	cmp	r2, r5
1001496e:	41b6      	sbcs	r6, r6
10014970:	1a41      	subs	r1, r0, r1
10014972:	4276      	negs	r6, r6
10014974:	1b89      	subs	r1, r1, r6
10014976:	469a      	mov	sl, r3
10014978:	e563      	b.n	10014442 <__aeabi_dadd+0x52>
1001497a:	0001      	movs	r1, r0
1001497c:	0015      	movs	r5, r2
1001497e:	4664      	mov	r4, ip
10014980:	e55f      	b.n	10014442 <__aeabi_dadd+0x52>
10014982:	2200      	movs	r2, #0
10014984:	2500      	movs	r5, #0
10014986:	e57b      	b.n	10014480 <__aeabi_dadd+0x90>
10014988:	2b00      	cmp	r3, #0
1001498a:	d03b      	beq.n	10014a04 <__aeabi_dadd+0x614>
1001498c:	0003      	movs	r3, r0
1001498e:	4313      	orrs	r3, r2
10014990:	d015      	beq.n	100149be <__aeabi_dadd+0x5ce>
10014992:	08ed      	lsrs	r5, r5, #3
10014994:	074b      	lsls	r3, r1, #29
10014996:	432b      	orrs	r3, r5
10014998:	2580      	movs	r5, #128	; 0x80
1001499a:	08c9      	lsrs	r1, r1, #3
1001499c:	032d      	lsls	r5, r5, #12
1001499e:	4229      	tst	r1, r5
100149a0:	d007      	beq.n	100149b2 <__aeabi_dadd+0x5c2>
100149a2:	08c4      	lsrs	r4, r0, #3
100149a4:	422c      	tst	r4, r5
100149a6:	d104      	bne.n	100149b2 <__aeabi_dadd+0x5c2>
100149a8:	0741      	lsls	r1, r0, #29
100149aa:	000b      	movs	r3, r1
100149ac:	0021      	movs	r1, r4
100149ae:	08d2      	lsrs	r2, r2, #3
100149b0:	4313      	orrs	r3, r2
100149b2:	00c9      	lsls	r1, r1, #3
100149b4:	0f5a      	lsrs	r2, r3, #29
100149b6:	4311      	orrs	r1, r2
100149b8:	00dd      	lsls	r5, r3, #3
100149ba:	4c21      	ldr	r4, [pc, #132]	; (10014a40 <__aeabi_dadd+0x650>)
100149bc:	e541      	b.n	10014442 <__aeabi_dadd+0x52>
100149be:	4c20      	ldr	r4, [pc, #128]	; (10014a40 <__aeabi_dadd+0x650>)
100149c0:	e53f      	b.n	10014442 <__aeabi_dadd+0x52>
100149c2:	2000      	movs	r0, #0
100149c4:	e754      	b.n	10014870 <__aeabi_dadd+0x480>
100149c6:	2600      	movs	r6, #0
100149c8:	2500      	movs	r5, #0
100149ca:	e5d1      	b.n	10014570 <__aeabi_dadd+0x180>
100149cc:	0034      	movs	r4, r6
100149ce:	000f      	movs	r7, r1
100149d0:	3c20      	subs	r4, #32
100149d2:	40e7      	lsrs	r7, r4
100149d4:	003c      	movs	r4, r7
100149d6:	2e20      	cmp	r6, #32
100149d8:	d02b      	beq.n	10014a32 <__aeabi_dadd+0x642>
100149da:	2740      	movs	r7, #64	; 0x40
100149dc:	1bbe      	subs	r6, r7, r6
100149de:	40b1      	lsls	r1, r6
100149e0:	430d      	orrs	r5, r1
100149e2:	1e69      	subs	r1, r5, #1
100149e4:	418d      	sbcs	r5, r1
100149e6:	2100      	movs	r1, #0
100149e8:	432c      	orrs	r4, r5
100149ea:	e6bc      	b.n	10014766 <__aeabi_dadd+0x376>
100149ec:	2180      	movs	r1, #128	; 0x80
100149ee:	2600      	movs	r6, #0
100149f0:	0309      	lsls	r1, r1, #12
100149f2:	4c13      	ldr	r4, [pc, #76]	; (10014a40 <__aeabi_dadd+0x650>)
100149f4:	2500      	movs	r5, #0
100149f6:	e5bb      	b.n	10014570 <__aeabi_dadd+0x180>
100149f8:	430d      	orrs	r5, r1
100149fa:	1e69      	subs	r1, r5, #1
100149fc:	418d      	sbcs	r5, r1
100149fe:	2100      	movs	r1, #0
10014a00:	b2ed      	uxtb	r5, r5
10014a02:	e769      	b.n	100148d8 <__aeabi_dadd+0x4e8>
10014a04:	0001      	movs	r1, r0
10014a06:	0015      	movs	r5, r2
10014a08:	4c0d      	ldr	r4, [pc, #52]	; (10014a40 <__aeabi_dadd+0x650>)
10014a0a:	e51a      	b.n	10014442 <__aeabi_dadd+0x52>
10014a0c:	0001      	movs	r1, r0
10014a0e:	0015      	movs	r5, r2
10014a10:	e517      	b.n	10014442 <__aeabi_dadd+0x52>
10014a12:	001c      	movs	r4, r3
10014a14:	000f      	movs	r7, r1
10014a16:	3c20      	subs	r4, #32
10014a18:	40e7      	lsrs	r7, r4
10014a1a:	003c      	movs	r4, r7
10014a1c:	2b20      	cmp	r3, #32
10014a1e:	d00c      	beq.n	10014a3a <__aeabi_dadd+0x64a>
10014a20:	2740      	movs	r7, #64	; 0x40
10014a22:	1afb      	subs	r3, r7, r3
10014a24:	4099      	lsls	r1, r3
10014a26:	430d      	orrs	r5, r1
10014a28:	1e69      	subs	r1, r5, #1
10014a2a:	418d      	sbcs	r5, r1
10014a2c:	2100      	movs	r1, #0
10014a2e:	4325      	orrs	r5, r4
10014a30:	e752      	b.n	100148d8 <__aeabi_dadd+0x4e8>
10014a32:	2100      	movs	r1, #0
10014a34:	e7d4      	b.n	100149e0 <__aeabi_dadd+0x5f0>
10014a36:	001d      	movs	r5, r3
10014a38:	e592      	b.n	10014560 <__aeabi_dadd+0x170>
10014a3a:	2100      	movs	r1, #0
10014a3c:	e7f3      	b.n	10014a26 <__aeabi_dadd+0x636>
10014a3e:	46c0      	nop			; (mov r8, r8)
10014a40:	000007ff 	.word	0x000007ff
10014a44:	ff7fffff 	.word	0xff7fffff

10014a48 <__aeabi_ddiv>:
10014a48:	b5f0      	push	{r4, r5, r6, r7, lr}
10014a4a:	4656      	mov	r6, sl
10014a4c:	464d      	mov	r5, r9
10014a4e:	4644      	mov	r4, r8
10014a50:	465f      	mov	r7, fp
10014a52:	b4f0      	push	{r4, r5, r6, r7}
10014a54:	001d      	movs	r5, r3
10014a56:	030e      	lsls	r6, r1, #12
10014a58:	004c      	lsls	r4, r1, #1
10014a5a:	0fcb      	lsrs	r3, r1, #31
10014a5c:	b087      	sub	sp, #28
10014a5e:	0007      	movs	r7, r0
10014a60:	4692      	mov	sl, r2
10014a62:	4681      	mov	r9, r0
10014a64:	0b36      	lsrs	r6, r6, #12
10014a66:	0d64      	lsrs	r4, r4, #21
10014a68:	4698      	mov	r8, r3
10014a6a:	d06a      	beq.n	10014b42 <__aeabi_ddiv+0xfa>
10014a6c:	4b6d      	ldr	r3, [pc, #436]	; (10014c24 <__aeabi_ddiv+0x1dc>)
10014a6e:	429c      	cmp	r4, r3
10014a70:	d035      	beq.n	10014ade <__aeabi_ddiv+0x96>
10014a72:	2280      	movs	r2, #128	; 0x80
10014a74:	0f43      	lsrs	r3, r0, #29
10014a76:	0412      	lsls	r2, r2, #16
10014a78:	4313      	orrs	r3, r2
10014a7a:	00f6      	lsls	r6, r6, #3
10014a7c:	431e      	orrs	r6, r3
10014a7e:	00c3      	lsls	r3, r0, #3
10014a80:	4699      	mov	r9, r3
10014a82:	4b69      	ldr	r3, [pc, #420]	; (10014c28 <__aeabi_ddiv+0x1e0>)
10014a84:	2700      	movs	r7, #0
10014a86:	469c      	mov	ip, r3
10014a88:	2300      	movs	r3, #0
10014a8a:	4464      	add	r4, ip
10014a8c:	9302      	str	r3, [sp, #8]
10014a8e:	032b      	lsls	r3, r5, #12
10014a90:	0068      	lsls	r0, r5, #1
10014a92:	0b1b      	lsrs	r3, r3, #12
10014a94:	0fed      	lsrs	r5, r5, #31
10014a96:	4651      	mov	r1, sl
10014a98:	469b      	mov	fp, r3
10014a9a:	0d40      	lsrs	r0, r0, #21
10014a9c:	9500      	str	r5, [sp, #0]
10014a9e:	d100      	bne.n	10014aa2 <__aeabi_ddiv+0x5a>
10014aa0:	e078      	b.n	10014b94 <__aeabi_ddiv+0x14c>
10014aa2:	4b60      	ldr	r3, [pc, #384]	; (10014c24 <__aeabi_ddiv+0x1dc>)
10014aa4:	4298      	cmp	r0, r3
10014aa6:	d06c      	beq.n	10014b82 <__aeabi_ddiv+0x13a>
10014aa8:	465b      	mov	r3, fp
10014aaa:	00da      	lsls	r2, r3, #3
10014aac:	0f4b      	lsrs	r3, r1, #29
10014aae:	2180      	movs	r1, #128	; 0x80
10014ab0:	0409      	lsls	r1, r1, #16
10014ab2:	430b      	orrs	r3, r1
10014ab4:	4313      	orrs	r3, r2
10014ab6:	469b      	mov	fp, r3
10014ab8:	4653      	mov	r3, sl
10014aba:	00d9      	lsls	r1, r3, #3
10014abc:	4b5a      	ldr	r3, [pc, #360]	; (10014c28 <__aeabi_ddiv+0x1e0>)
10014abe:	469c      	mov	ip, r3
10014ac0:	2300      	movs	r3, #0
10014ac2:	4460      	add	r0, ip
10014ac4:	4642      	mov	r2, r8
10014ac6:	1a20      	subs	r0, r4, r0
10014ac8:	406a      	eors	r2, r5
10014aca:	4692      	mov	sl, r2
10014acc:	9001      	str	r0, [sp, #4]
10014ace:	431f      	orrs	r7, r3
10014ad0:	2f0f      	cmp	r7, #15
10014ad2:	d900      	bls.n	10014ad6 <__aeabi_ddiv+0x8e>
10014ad4:	e0b0      	b.n	10014c38 <__aeabi_ddiv+0x1f0>
10014ad6:	4855      	ldr	r0, [pc, #340]	; (10014c2c <__aeabi_ddiv+0x1e4>)
10014ad8:	00bf      	lsls	r7, r7, #2
10014ada:	59c0      	ldr	r0, [r0, r7]
10014adc:	4687      	mov	pc, r0
10014ade:	4337      	orrs	r7, r6
10014ae0:	d000      	beq.n	10014ae4 <__aeabi_ddiv+0x9c>
10014ae2:	e088      	b.n	10014bf6 <__aeabi_ddiv+0x1ae>
10014ae4:	2300      	movs	r3, #0
10014ae6:	4699      	mov	r9, r3
10014ae8:	3302      	adds	r3, #2
10014aea:	2708      	movs	r7, #8
10014aec:	2600      	movs	r6, #0
10014aee:	9302      	str	r3, [sp, #8]
10014af0:	e7cd      	b.n	10014a8e <__aeabi_ddiv+0x46>
10014af2:	4643      	mov	r3, r8
10014af4:	46b3      	mov	fp, r6
10014af6:	4649      	mov	r1, r9
10014af8:	9300      	str	r3, [sp, #0]
10014afa:	9b02      	ldr	r3, [sp, #8]
10014afc:	9a00      	ldr	r2, [sp, #0]
10014afe:	4692      	mov	sl, r2
10014b00:	2b02      	cmp	r3, #2
10014b02:	d000      	beq.n	10014b06 <__aeabi_ddiv+0xbe>
10014b04:	e1bf      	b.n	10014e86 <__aeabi_ddiv+0x43e>
10014b06:	2100      	movs	r1, #0
10014b08:	4653      	mov	r3, sl
10014b0a:	2201      	movs	r2, #1
10014b0c:	2600      	movs	r6, #0
10014b0e:	4689      	mov	r9, r1
10014b10:	401a      	ands	r2, r3
10014b12:	4b44      	ldr	r3, [pc, #272]	; (10014c24 <__aeabi_ddiv+0x1dc>)
10014b14:	2100      	movs	r1, #0
10014b16:	0336      	lsls	r6, r6, #12
10014b18:	0d0c      	lsrs	r4, r1, #20
10014b1a:	0524      	lsls	r4, r4, #20
10014b1c:	0b36      	lsrs	r6, r6, #12
10014b1e:	4326      	orrs	r6, r4
10014b20:	4c43      	ldr	r4, [pc, #268]	; (10014c30 <__aeabi_ddiv+0x1e8>)
10014b22:	051b      	lsls	r3, r3, #20
10014b24:	4026      	ands	r6, r4
10014b26:	431e      	orrs	r6, r3
10014b28:	0076      	lsls	r6, r6, #1
10014b2a:	07d2      	lsls	r2, r2, #31
10014b2c:	0876      	lsrs	r6, r6, #1
10014b2e:	4316      	orrs	r6, r2
10014b30:	4648      	mov	r0, r9
10014b32:	0031      	movs	r1, r6
10014b34:	b007      	add	sp, #28
10014b36:	bc3c      	pop	{r2, r3, r4, r5}
10014b38:	4690      	mov	r8, r2
10014b3a:	4699      	mov	r9, r3
10014b3c:	46a2      	mov	sl, r4
10014b3e:	46ab      	mov	fp, r5
10014b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014b42:	0033      	movs	r3, r6
10014b44:	4303      	orrs	r3, r0
10014b46:	d04f      	beq.n	10014be8 <__aeabi_ddiv+0x1a0>
10014b48:	2e00      	cmp	r6, #0
10014b4a:	d100      	bne.n	10014b4e <__aeabi_ddiv+0x106>
10014b4c:	e1bc      	b.n	10014ec8 <__aeabi_ddiv+0x480>
10014b4e:	0030      	movs	r0, r6
10014b50:	f001 fb1c 	bl	1001618c <__clzsi2>
10014b54:	0003      	movs	r3, r0
10014b56:	3b0b      	subs	r3, #11
10014b58:	2b1c      	cmp	r3, #28
10014b5a:	dd00      	ble.n	10014b5e <__aeabi_ddiv+0x116>
10014b5c:	e1ad      	b.n	10014eba <__aeabi_ddiv+0x472>
10014b5e:	221d      	movs	r2, #29
10014b60:	0001      	movs	r1, r0
10014b62:	1ad3      	subs	r3, r2, r3
10014b64:	3908      	subs	r1, #8
10014b66:	003a      	movs	r2, r7
10014b68:	408f      	lsls	r7, r1
10014b6a:	408e      	lsls	r6, r1
10014b6c:	40da      	lsrs	r2, r3
10014b6e:	46b9      	mov	r9, r7
10014b70:	4316      	orrs	r6, r2
10014b72:	4b30      	ldr	r3, [pc, #192]	; (10014c34 <__aeabi_ddiv+0x1ec>)
10014b74:	2700      	movs	r7, #0
10014b76:	469c      	mov	ip, r3
10014b78:	2300      	movs	r3, #0
10014b7a:	4460      	add	r0, ip
10014b7c:	4244      	negs	r4, r0
10014b7e:	9302      	str	r3, [sp, #8]
10014b80:	e785      	b.n	10014a8e <__aeabi_ddiv+0x46>
10014b82:	4653      	mov	r3, sl
10014b84:	465a      	mov	r2, fp
10014b86:	4313      	orrs	r3, r2
10014b88:	d12c      	bne.n	10014be4 <__aeabi_ddiv+0x19c>
10014b8a:	2300      	movs	r3, #0
10014b8c:	2100      	movs	r1, #0
10014b8e:	469b      	mov	fp, r3
10014b90:	3302      	adds	r3, #2
10014b92:	e797      	b.n	10014ac4 <__aeabi_ddiv+0x7c>
10014b94:	430b      	orrs	r3, r1
10014b96:	d020      	beq.n	10014bda <__aeabi_ddiv+0x192>
10014b98:	465b      	mov	r3, fp
10014b9a:	2b00      	cmp	r3, #0
10014b9c:	d100      	bne.n	10014ba0 <__aeabi_ddiv+0x158>
10014b9e:	e19e      	b.n	10014ede <__aeabi_ddiv+0x496>
10014ba0:	4658      	mov	r0, fp
10014ba2:	f001 faf3 	bl	1001618c <__clzsi2>
10014ba6:	0003      	movs	r3, r0
10014ba8:	3b0b      	subs	r3, #11
10014baa:	2b1c      	cmp	r3, #28
10014bac:	dd00      	ble.n	10014bb0 <__aeabi_ddiv+0x168>
10014bae:	e18f      	b.n	10014ed0 <__aeabi_ddiv+0x488>
10014bb0:	0002      	movs	r2, r0
10014bb2:	4659      	mov	r1, fp
10014bb4:	3a08      	subs	r2, #8
10014bb6:	4091      	lsls	r1, r2
10014bb8:	468b      	mov	fp, r1
10014bba:	211d      	movs	r1, #29
10014bbc:	1acb      	subs	r3, r1, r3
10014bbe:	4651      	mov	r1, sl
10014bc0:	40d9      	lsrs	r1, r3
10014bc2:	000b      	movs	r3, r1
10014bc4:	4659      	mov	r1, fp
10014bc6:	430b      	orrs	r3, r1
10014bc8:	4651      	mov	r1, sl
10014bca:	469b      	mov	fp, r3
10014bcc:	4091      	lsls	r1, r2
10014bce:	4b19      	ldr	r3, [pc, #100]	; (10014c34 <__aeabi_ddiv+0x1ec>)
10014bd0:	469c      	mov	ip, r3
10014bd2:	4460      	add	r0, ip
10014bd4:	4240      	negs	r0, r0
10014bd6:	2300      	movs	r3, #0
10014bd8:	e774      	b.n	10014ac4 <__aeabi_ddiv+0x7c>
10014bda:	2300      	movs	r3, #0
10014bdc:	2100      	movs	r1, #0
10014bde:	469b      	mov	fp, r3
10014be0:	3301      	adds	r3, #1
10014be2:	e76f      	b.n	10014ac4 <__aeabi_ddiv+0x7c>
10014be4:	2303      	movs	r3, #3
10014be6:	e76d      	b.n	10014ac4 <__aeabi_ddiv+0x7c>
10014be8:	2300      	movs	r3, #0
10014bea:	4699      	mov	r9, r3
10014bec:	3301      	adds	r3, #1
10014bee:	2704      	movs	r7, #4
10014bf0:	2600      	movs	r6, #0
10014bf2:	9302      	str	r3, [sp, #8]
10014bf4:	e74b      	b.n	10014a8e <__aeabi_ddiv+0x46>
10014bf6:	2303      	movs	r3, #3
10014bf8:	270c      	movs	r7, #12
10014bfa:	9302      	str	r3, [sp, #8]
10014bfc:	e747      	b.n	10014a8e <__aeabi_ddiv+0x46>
10014bfe:	2201      	movs	r2, #1
10014c00:	1ad5      	subs	r5, r2, r3
10014c02:	2d38      	cmp	r5, #56	; 0x38
10014c04:	dc00      	bgt.n	10014c08 <__aeabi_ddiv+0x1c0>
10014c06:	e1b0      	b.n	10014f6a <__aeabi_ddiv+0x522>
10014c08:	4653      	mov	r3, sl
10014c0a:	401a      	ands	r2, r3
10014c0c:	2100      	movs	r1, #0
10014c0e:	2300      	movs	r3, #0
10014c10:	2600      	movs	r6, #0
10014c12:	4689      	mov	r9, r1
10014c14:	e77e      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014c16:	2300      	movs	r3, #0
10014c18:	2680      	movs	r6, #128	; 0x80
10014c1a:	4699      	mov	r9, r3
10014c1c:	2200      	movs	r2, #0
10014c1e:	0336      	lsls	r6, r6, #12
10014c20:	4b00      	ldr	r3, [pc, #0]	; (10014c24 <__aeabi_ddiv+0x1dc>)
10014c22:	e777      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014c24:	000007ff 	.word	0x000007ff
10014c28:	fffffc01 	.word	0xfffffc01
10014c2c:	10018458 	.word	0x10018458
10014c30:	800fffff 	.word	0x800fffff
10014c34:	000003f3 	.word	0x000003f3
10014c38:	455e      	cmp	r6, fp
10014c3a:	d900      	bls.n	10014c3e <__aeabi_ddiv+0x1f6>
10014c3c:	e172      	b.n	10014f24 <__aeabi_ddiv+0x4dc>
10014c3e:	d100      	bne.n	10014c42 <__aeabi_ddiv+0x1fa>
10014c40:	e16d      	b.n	10014f1e <__aeabi_ddiv+0x4d6>
10014c42:	9b01      	ldr	r3, [sp, #4]
10014c44:	464d      	mov	r5, r9
10014c46:	3b01      	subs	r3, #1
10014c48:	9301      	str	r3, [sp, #4]
10014c4a:	2300      	movs	r3, #0
10014c4c:	0034      	movs	r4, r6
10014c4e:	9302      	str	r3, [sp, #8]
10014c50:	465b      	mov	r3, fp
10014c52:	021e      	lsls	r6, r3, #8
10014c54:	0e0b      	lsrs	r3, r1, #24
10014c56:	431e      	orrs	r6, r3
10014c58:	020b      	lsls	r3, r1, #8
10014c5a:	9303      	str	r3, [sp, #12]
10014c5c:	0c33      	lsrs	r3, r6, #16
10014c5e:	4699      	mov	r9, r3
10014c60:	0433      	lsls	r3, r6, #16
10014c62:	0c1b      	lsrs	r3, r3, #16
10014c64:	4649      	mov	r1, r9
10014c66:	0020      	movs	r0, r4
10014c68:	9300      	str	r3, [sp, #0]
10014c6a:	f7fe fad7 	bl	1001321c <__aeabi_uidiv>
10014c6e:	9b00      	ldr	r3, [sp, #0]
10014c70:	0037      	movs	r7, r6
10014c72:	4343      	muls	r3, r0
10014c74:	0006      	movs	r6, r0
10014c76:	4649      	mov	r1, r9
10014c78:	0020      	movs	r0, r4
10014c7a:	4698      	mov	r8, r3
10014c7c:	f7fe fb54 	bl	10013328 <__aeabi_uidivmod>
10014c80:	0c2c      	lsrs	r4, r5, #16
10014c82:	0409      	lsls	r1, r1, #16
10014c84:	430c      	orrs	r4, r1
10014c86:	45a0      	cmp	r8, r4
10014c88:	d909      	bls.n	10014c9e <__aeabi_ddiv+0x256>
10014c8a:	19e4      	adds	r4, r4, r7
10014c8c:	1e73      	subs	r3, r6, #1
10014c8e:	42a7      	cmp	r7, r4
10014c90:	d900      	bls.n	10014c94 <__aeabi_ddiv+0x24c>
10014c92:	e15c      	b.n	10014f4e <__aeabi_ddiv+0x506>
10014c94:	45a0      	cmp	r8, r4
10014c96:	d800      	bhi.n	10014c9a <__aeabi_ddiv+0x252>
10014c98:	e159      	b.n	10014f4e <__aeabi_ddiv+0x506>
10014c9a:	3e02      	subs	r6, #2
10014c9c:	19e4      	adds	r4, r4, r7
10014c9e:	4643      	mov	r3, r8
10014ca0:	1ae4      	subs	r4, r4, r3
10014ca2:	4649      	mov	r1, r9
10014ca4:	0020      	movs	r0, r4
10014ca6:	f7fe fab9 	bl	1001321c <__aeabi_uidiv>
10014caa:	0003      	movs	r3, r0
10014cac:	9a00      	ldr	r2, [sp, #0]
10014cae:	4680      	mov	r8, r0
10014cb0:	4353      	muls	r3, r2
10014cb2:	4649      	mov	r1, r9
10014cb4:	0020      	movs	r0, r4
10014cb6:	469b      	mov	fp, r3
10014cb8:	f7fe fb36 	bl	10013328 <__aeabi_uidivmod>
10014cbc:	042a      	lsls	r2, r5, #16
10014cbe:	0409      	lsls	r1, r1, #16
10014cc0:	0c12      	lsrs	r2, r2, #16
10014cc2:	430a      	orrs	r2, r1
10014cc4:	4593      	cmp	fp, r2
10014cc6:	d90d      	bls.n	10014ce4 <__aeabi_ddiv+0x29c>
10014cc8:	4643      	mov	r3, r8
10014cca:	19d2      	adds	r2, r2, r7
10014ccc:	3b01      	subs	r3, #1
10014cce:	4297      	cmp	r7, r2
10014cd0:	d900      	bls.n	10014cd4 <__aeabi_ddiv+0x28c>
10014cd2:	e13a      	b.n	10014f4a <__aeabi_ddiv+0x502>
10014cd4:	4593      	cmp	fp, r2
10014cd6:	d800      	bhi.n	10014cda <__aeabi_ddiv+0x292>
10014cd8:	e137      	b.n	10014f4a <__aeabi_ddiv+0x502>
10014cda:	2302      	movs	r3, #2
10014cdc:	425b      	negs	r3, r3
10014cde:	469c      	mov	ip, r3
10014ce0:	19d2      	adds	r2, r2, r7
10014ce2:	44e0      	add	r8, ip
10014ce4:	465b      	mov	r3, fp
10014ce6:	1ad2      	subs	r2, r2, r3
10014ce8:	4643      	mov	r3, r8
10014cea:	0436      	lsls	r6, r6, #16
10014cec:	4333      	orrs	r3, r6
10014cee:	469b      	mov	fp, r3
10014cf0:	9903      	ldr	r1, [sp, #12]
10014cf2:	0c18      	lsrs	r0, r3, #16
10014cf4:	0c0b      	lsrs	r3, r1, #16
10014cf6:	001d      	movs	r5, r3
10014cf8:	9305      	str	r3, [sp, #20]
10014cfa:	0409      	lsls	r1, r1, #16
10014cfc:	465b      	mov	r3, fp
10014cfe:	0c09      	lsrs	r1, r1, #16
10014d00:	000c      	movs	r4, r1
10014d02:	041b      	lsls	r3, r3, #16
10014d04:	0c1b      	lsrs	r3, r3, #16
10014d06:	4344      	muls	r4, r0
10014d08:	9104      	str	r1, [sp, #16]
10014d0a:	4359      	muls	r1, r3
10014d0c:	436b      	muls	r3, r5
10014d0e:	4368      	muls	r0, r5
10014d10:	191b      	adds	r3, r3, r4
10014d12:	0c0d      	lsrs	r5, r1, #16
10014d14:	18eb      	adds	r3, r5, r3
10014d16:	429c      	cmp	r4, r3
10014d18:	d903      	bls.n	10014d22 <__aeabi_ddiv+0x2da>
10014d1a:	2480      	movs	r4, #128	; 0x80
10014d1c:	0264      	lsls	r4, r4, #9
10014d1e:	46a4      	mov	ip, r4
10014d20:	4460      	add	r0, ip
10014d22:	0c1c      	lsrs	r4, r3, #16
10014d24:	0409      	lsls	r1, r1, #16
10014d26:	041b      	lsls	r3, r3, #16
10014d28:	0c09      	lsrs	r1, r1, #16
10014d2a:	1820      	adds	r0, r4, r0
10014d2c:	185d      	adds	r5, r3, r1
10014d2e:	4282      	cmp	r2, r0
10014d30:	d200      	bcs.n	10014d34 <__aeabi_ddiv+0x2ec>
10014d32:	e0de      	b.n	10014ef2 <__aeabi_ddiv+0x4aa>
10014d34:	d100      	bne.n	10014d38 <__aeabi_ddiv+0x2f0>
10014d36:	e0d7      	b.n	10014ee8 <__aeabi_ddiv+0x4a0>
10014d38:	1a16      	subs	r6, r2, r0
10014d3a:	9b02      	ldr	r3, [sp, #8]
10014d3c:	469c      	mov	ip, r3
10014d3e:	1b5d      	subs	r5, r3, r5
10014d40:	45ac      	cmp	ip, r5
10014d42:	419b      	sbcs	r3, r3
10014d44:	425b      	negs	r3, r3
10014d46:	1af6      	subs	r6, r6, r3
10014d48:	42b7      	cmp	r7, r6
10014d4a:	d100      	bne.n	10014d4e <__aeabi_ddiv+0x306>
10014d4c:	e106      	b.n	10014f5c <__aeabi_ddiv+0x514>
10014d4e:	4649      	mov	r1, r9
10014d50:	0030      	movs	r0, r6
10014d52:	f7fe fa63 	bl	1001321c <__aeabi_uidiv>
10014d56:	9b00      	ldr	r3, [sp, #0]
10014d58:	0004      	movs	r4, r0
10014d5a:	4343      	muls	r3, r0
10014d5c:	4649      	mov	r1, r9
10014d5e:	0030      	movs	r0, r6
10014d60:	4698      	mov	r8, r3
10014d62:	f7fe fae1 	bl	10013328 <__aeabi_uidivmod>
10014d66:	0c2e      	lsrs	r6, r5, #16
10014d68:	0409      	lsls	r1, r1, #16
10014d6a:	430e      	orrs	r6, r1
10014d6c:	45b0      	cmp	r8, r6
10014d6e:	d909      	bls.n	10014d84 <__aeabi_ddiv+0x33c>
10014d70:	19f6      	adds	r6, r6, r7
10014d72:	1e63      	subs	r3, r4, #1
10014d74:	42b7      	cmp	r7, r6
10014d76:	d900      	bls.n	10014d7a <__aeabi_ddiv+0x332>
10014d78:	e0f3      	b.n	10014f62 <__aeabi_ddiv+0x51a>
10014d7a:	45b0      	cmp	r8, r6
10014d7c:	d800      	bhi.n	10014d80 <__aeabi_ddiv+0x338>
10014d7e:	e0f0      	b.n	10014f62 <__aeabi_ddiv+0x51a>
10014d80:	3c02      	subs	r4, #2
10014d82:	19f6      	adds	r6, r6, r7
10014d84:	4643      	mov	r3, r8
10014d86:	1af3      	subs	r3, r6, r3
10014d88:	4649      	mov	r1, r9
10014d8a:	0018      	movs	r0, r3
10014d8c:	9302      	str	r3, [sp, #8]
10014d8e:	f7fe fa45 	bl	1001321c <__aeabi_uidiv>
10014d92:	9b00      	ldr	r3, [sp, #0]
10014d94:	0006      	movs	r6, r0
10014d96:	4343      	muls	r3, r0
10014d98:	4649      	mov	r1, r9
10014d9a:	9802      	ldr	r0, [sp, #8]
10014d9c:	4698      	mov	r8, r3
10014d9e:	f7fe fac3 	bl	10013328 <__aeabi_uidivmod>
10014da2:	042d      	lsls	r5, r5, #16
10014da4:	0409      	lsls	r1, r1, #16
10014da6:	0c2d      	lsrs	r5, r5, #16
10014da8:	430d      	orrs	r5, r1
10014daa:	45a8      	cmp	r8, r5
10014dac:	d909      	bls.n	10014dc2 <__aeabi_ddiv+0x37a>
10014dae:	19ed      	adds	r5, r5, r7
10014db0:	1e73      	subs	r3, r6, #1
10014db2:	42af      	cmp	r7, r5
10014db4:	d900      	bls.n	10014db8 <__aeabi_ddiv+0x370>
10014db6:	e0d6      	b.n	10014f66 <__aeabi_ddiv+0x51e>
10014db8:	45a8      	cmp	r8, r5
10014dba:	d800      	bhi.n	10014dbe <__aeabi_ddiv+0x376>
10014dbc:	e0d3      	b.n	10014f66 <__aeabi_ddiv+0x51e>
10014dbe:	3e02      	subs	r6, #2
10014dc0:	19ed      	adds	r5, r5, r7
10014dc2:	0424      	lsls	r4, r4, #16
10014dc4:	0021      	movs	r1, r4
10014dc6:	4643      	mov	r3, r8
10014dc8:	4331      	orrs	r1, r6
10014dca:	9e04      	ldr	r6, [sp, #16]
10014dcc:	9a05      	ldr	r2, [sp, #20]
10014dce:	0030      	movs	r0, r6
10014dd0:	1aed      	subs	r5, r5, r3
10014dd2:	040b      	lsls	r3, r1, #16
10014dd4:	0c0c      	lsrs	r4, r1, #16
10014dd6:	0c1b      	lsrs	r3, r3, #16
10014dd8:	4358      	muls	r0, r3
10014dda:	4366      	muls	r6, r4
10014ddc:	4353      	muls	r3, r2
10014dde:	4354      	muls	r4, r2
10014de0:	199a      	adds	r2, r3, r6
10014de2:	0c03      	lsrs	r3, r0, #16
10014de4:	189b      	adds	r3, r3, r2
10014de6:	429e      	cmp	r6, r3
10014de8:	d903      	bls.n	10014df2 <__aeabi_ddiv+0x3aa>
10014dea:	2280      	movs	r2, #128	; 0x80
10014dec:	0252      	lsls	r2, r2, #9
10014dee:	4694      	mov	ip, r2
10014df0:	4464      	add	r4, ip
10014df2:	0c1a      	lsrs	r2, r3, #16
10014df4:	0400      	lsls	r0, r0, #16
10014df6:	041b      	lsls	r3, r3, #16
10014df8:	0c00      	lsrs	r0, r0, #16
10014dfa:	1914      	adds	r4, r2, r4
10014dfc:	181b      	adds	r3, r3, r0
10014dfe:	42a5      	cmp	r5, r4
10014e00:	d350      	bcc.n	10014ea4 <__aeabi_ddiv+0x45c>
10014e02:	d04d      	beq.n	10014ea0 <__aeabi_ddiv+0x458>
10014e04:	2301      	movs	r3, #1
10014e06:	4319      	orrs	r1, r3
10014e08:	4a96      	ldr	r2, [pc, #600]	; (10015064 <__aeabi_ddiv+0x61c>)
10014e0a:	9b01      	ldr	r3, [sp, #4]
10014e0c:	4694      	mov	ip, r2
10014e0e:	4463      	add	r3, ip
10014e10:	2b00      	cmp	r3, #0
10014e12:	dc00      	bgt.n	10014e16 <__aeabi_ddiv+0x3ce>
10014e14:	e6f3      	b.n	10014bfe <__aeabi_ddiv+0x1b6>
10014e16:	074a      	lsls	r2, r1, #29
10014e18:	d009      	beq.n	10014e2e <__aeabi_ddiv+0x3e6>
10014e1a:	220f      	movs	r2, #15
10014e1c:	400a      	ands	r2, r1
10014e1e:	2a04      	cmp	r2, #4
10014e20:	d005      	beq.n	10014e2e <__aeabi_ddiv+0x3e6>
10014e22:	1d0a      	adds	r2, r1, #4
10014e24:	428a      	cmp	r2, r1
10014e26:	4189      	sbcs	r1, r1
10014e28:	4249      	negs	r1, r1
10014e2a:	448b      	add	fp, r1
10014e2c:	0011      	movs	r1, r2
10014e2e:	465a      	mov	r2, fp
10014e30:	01d2      	lsls	r2, r2, #7
10014e32:	d508      	bpl.n	10014e46 <__aeabi_ddiv+0x3fe>
10014e34:	465a      	mov	r2, fp
10014e36:	4b8c      	ldr	r3, [pc, #560]	; (10015068 <__aeabi_ddiv+0x620>)
10014e38:	401a      	ands	r2, r3
10014e3a:	4693      	mov	fp, r2
10014e3c:	2280      	movs	r2, #128	; 0x80
10014e3e:	00d2      	lsls	r2, r2, #3
10014e40:	4694      	mov	ip, r2
10014e42:	9b01      	ldr	r3, [sp, #4]
10014e44:	4463      	add	r3, ip
10014e46:	4a89      	ldr	r2, [pc, #548]	; (1001506c <__aeabi_ddiv+0x624>)
10014e48:	4293      	cmp	r3, r2
10014e4a:	dd00      	ble.n	10014e4e <__aeabi_ddiv+0x406>
10014e4c:	e65b      	b.n	10014b06 <__aeabi_ddiv+0xbe>
10014e4e:	465a      	mov	r2, fp
10014e50:	08c9      	lsrs	r1, r1, #3
10014e52:	0750      	lsls	r0, r2, #29
10014e54:	4308      	orrs	r0, r1
10014e56:	0256      	lsls	r6, r2, #9
10014e58:	4651      	mov	r1, sl
10014e5a:	2201      	movs	r2, #1
10014e5c:	055b      	lsls	r3, r3, #21
10014e5e:	4681      	mov	r9, r0
10014e60:	0b36      	lsrs	r6, r6, #12
10014e62:	0d5b      	lsrs	r3, r3, #21
10014e64:	400a      	ands	r2, r1
10014e66:	e655      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014e68:	2380      	movs	r3, #128	; 0x80
10014e6a:	031b      	lsls	r3, r3, #12
10014e6c:	421e      	tst	r6, r3
10014e6e:	d011      	beq.n	10014e94 <__aeabi_ddiv+0x44c>
10014e70:	465a      	mov	r2, fp
10014e72:	421a      	tst	r2, r3
10014e74:	d10e      	bne.n	10014e94 <__aeabi_ddiv+0x44c>
10014e76:	465e      	mov	r6, fp
10014e78:	431e      	orrs	r6, r3
10014e7a:	0336      	lsls	r6, r6, #12
10014e7c:	0b36      	lsrs	r6, r6, #12
10014e7e:	002a      	movs	r2, r5
10014e80:	4689      	mov	r9, r1
10014e82:	4b7b      	ldr	r3, [pc, #492]	; (10015070 <__aeabi_ddiv+0x628>)
10014e84:	e646      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014e86:	2b03      	cmp	r3, #3
10014e88:	d100      	bne.n	10014e8c <__aeabi_ddiv+0x444>
10014e8a:	e0e1      	b.n	10015050 <__aeabi_ddiv+0x608>
10014e8c:	2b01      	cmp	r3, #1
10014e8e:	d1bb      	bne.n	10014e08 <__aeabi_ddiv+0x3c0>
10014e90:	401a      	ands	r2, r3
10014e92:	e6bb      	b.n	10014c0c <__aeabi_ddiv+0x1c4>
10014e94:	431e      	orrs	r6, r3
10014e96:	0336      	lsls	r6, r6, #12
10014e98:	0b36      	lsrs	r6, r6, #12
10014e9a:	4642      	mov	r2, r8
10014e9c:	4b74      	ldr	r3, [pc, #464]	; (10015070 <__aeabi_ddiv+0x628>)
10014e9e:	e639      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014ea0:	2b00      	cmp	r3, #0
10014ea2:	d0b1      	beq.n	10014e08 <__aeabi_ddiv+0x3c0>
10014ea4:	197d      	adds	r5, r7, r5
10014ea6:	1e4a      	subs	r2, r1, #1
10014ea8:	42af      	cmp	r7, r5
10014eaa:	d952      	bls.n	10014f52 <__aeabi_ddiv+0x50a>
10014eac:	0011      	movs	r1, r2
10014eae:	42a5      	cmp	r5, r4
10014eb0:	d1a8      	bne.n	10014e04 <__aeabi_ddiv+0x3bc>
10014eb2:	9a03      	ldr	r2, [sp, #12]
10014eb4:	429a      	cmp	r2, r3
10014eb6:	d1a5      	bne.n	10014e04 <__aeabi_ddiv+0x3bc>
10014eb8:	e7a6      	b.n	10014e08 <__aeabi_ddiv+0x3c0>
10014eba:	0003      	movs	r3, r0
10014ebc:	003e      	movs	r6, r7
10014ebe:	3b28      	subs	r3, #40	; 0x28
10014ec0:	409e      	lsls	r6, r3
10014ec2:	2300      	movs	r3, #0
10014ec4:	4699      	mov	r9, r3
10014ec6:	e654      	b.n	10014b72 <__aeabi_ddiv+0x12a>
10014ec8:	f001 f960 	bl	1001618c <__clzsi2>
10014ecc:	3020      	adds	r0, #32
10014ece:	e641      	b.n	10014b54 <__aeabi_ddiv+0x10c>
10014ed0:	0003      	movs	r3, r0
10014ed2:	4652      	mov	r2, sl
10014ed4:	3b28      	subs	r3, #40	; 0x28
10014ed6:	409a      	lsls	r2, r3
10014ed8:	2100      	movs	r1, #0
10014eda:	4693      	mov	fp, r2
10014edc:	e677      	b.n	10014bce <__aeabi_ddiv+0x186>
10014ede:	4650      	mov	r0, sl
10014ee0:	f001 f954 	bl	1001618c <__clzsi2>
10014ee4:	3020      	adds	r0, #32
10014ee6:	e65e      	b.n	10014ba6 <__aeabi_ddiv+0x15e>
10014ee8:	9b02      	ldr	r3, [sp, #8]
10014eea:	2600      	movs	r6, #0
10014eec:	42ab      	cmp	r3, r5
10014eee:	d300      	bcc.n	10014ef2 <__aeabi_ddiv+0x4aa>
10014ef0:	e723      	b.n	10014d3a <__aeabi_ddiv+0x2f2>
10014ef2:	9e03      	ldr	r6, [sp, #12]
10014ef4:	9902      	ldr	r1, [sp, #8]
10014ef6:	46b4      	mov	ip, r6
10014ef8:	4461      	add	r1, ip
10014efa:	4688      	mov	r8, r1
10014efc:	45b0      	cmp	r8, r6
10014efe:	41b6      	sbcs	r6, r6
10014f00:	465b      	mov	r3, fp
10014f02:	4276      	negs	r6, r6
10014f04:	19f6      	adds	r6, r6, r7
10014f06:	18b2      	adds	r2, r6, r2
10014f08:	3b01      	subs	r3, #1
10014f0a:	9102      	str	r1, [sp, #8]
10014f0c:	4297      	cmp	r7, r2
10014f0e:	d213      	bcs.n	10014f38 <__aeabi_ddiv+0x4f0>
10014f10:	4290      	cmp	r0, r2
10014f12:	d84f      	bhi.n	10014fb4 <__aeabi_ddiv+0x56c>
10014f14:	d100      	bne.n	10014f18 <__aeabi_ddiv+0x4d0>
10014f16:	e08e      	b.n	10015036 <__aeabi_ddiv+0x5ee>
10014f18:	1a16      	subs	r6, r2, r0
10014f1a:	469b      	mov	fp, r3
10014f1c:	e70d      	b.n	10014d3a <__aeabi_ddiv+0x2f2>
10014f1e:	4589      	cmp	r9, r1
10014f20:	d200      	bcs.n	10014f24 <__aeabi_ddiv+0x4dc>
10014f22:	e68e      	b.n	10014c42 <__aeabi_ddiv+0x1fa>
10014f24:	0874      	lsrs	r4, r6, #1
10014f26:	464b      	mov	r3, r9
10014f28:	07f6      	lsls	r6, r6, #31
10014f2a:	0035      	movs	r5, r6
10014f2c:	085b      	lsrs	r3, r3, #1
10014f2e:	431d      	orrs	r5, r3
10014f30:	464b      	mov	r3, r9
10014f32:	07db      	lsls	r3, r3, #31
10014f34:	9302      	str	r3, [sp, #8]
10014f36:	e68b      	b.n	10014c50 <__aeabi_ddiv+0x208>
10014f38:	4297      	cmp	r7, r2
10014f3a:	d1ed      	bne.n	10014f18 <__aeabi_ddiv+0x4d0>
10014f3c:	9903      	ldr	r1, [sp, #12]
10014f3e:	9c02      	ldr	r4, [sp, #8]
10014f40:	42a1      	cmp	r1, r4
10014f42:	d9e5      	bls.n	10014f10 <__aeabi_ddiv+0x4c8>
10014f44:	1a3e      	subs	r6, r7, r0
10014f46:	469b      	mov	fp, r3
10014f48:	e6f7      	b.n	10014d3a <__aeabi_ddiv+0x2f2>
10014f4a:	4698      	mov	r8, r3
10014f4c:	e6ca      	b.n	10014ce4 <__aeabi_ddiv+0x29c>
10014f4e:	001e      	movs	r6, r3
10014f50:	e6a5      	b.n	10014c9e <__aeabi_ddiv+0x256>
10014f52:	42ac      	cmp	r4, r5
10014f54:	d83e      	bhi.n	10014fd4 <__aeabi_ddiv+0x58c>
10014f56:	d074      	beq.n	10015042 <__aeabi_ddiv+0x5fa>
10014f58:	0011      	movs	r1, r2
10014f5a:	e753      	b.n	10014e04 <__aeabi_ddiv+0x3bc>
10014f5c:	2101      	movs	r1, #1
10014f5e:	4249      	negs	r1, r1
10014f60:	e752      	b.n	10014e08 <__aeabi_ddiv+0x3c0>
10014f62:	001c      	movs	r4, r3
10014f64:	e70e      	b.n	10014d84 <__aeabi_ddiv+0x33c>
10014f66:	001e      	movs	r6, r3
10014f68:	e72b      	b.n	10014dc2 <__aeabi_ddiv+0x37a>
10014f6a:	2d1f      	cmp	r5, #31
10014f6c:	dc3c      	bgt.n	10014fe8 <__aeabi_ddiv+0x5a0>
10014f6e:	2320      	movs	r3, #32
10014f70:	000a      	movs	r2, r1
10014f72:	4658      	mov	r0, fp
10014f74:	1b5b      	subs	r3, r3, r5
10014f76:	4098      	lsls	r0, r3
10014f78:	40ea      	lsrs	r2, r5
10014f7a:	4099      	lsls	r1, r3
10014f7c:	4302      	orrs	r2, r0
10014f7e:	1e48      	subs	r0, r1, #1
10014f80:	4181      	sbcs	r1, r0
10014f82:	465e      	mov	r6, fp
10014f84:	4311      	orrs	r1, r2
10014f86:	40ee      	lsrs	r6, r5
10014f88:	074b      	lsls	r3, r1, #29
10014f8a:	d009      	beq.n	10014fa0 <__aeabi_ddiv+0x558>
10014f8c:	230f      	movs	r3, #15
10014f8e:	400b      	ands	r3, r1
10014f90:	2b04      	cmp	r3, #4
10014f92:	d005      	beq.n	10014fa0 <__aeabi_ddiv+0x558>
10014f94:	000b      	movs	r3, r1
10014f96:	1d19      	adds	r1, r3, #4
10014f98:	4299      	cmp	r1, r3
10014f9a:	419b      	sbcs	r3, r3
10014f9c:	425b      	negs	r3, r3
10014f9e:	18f6      	adds	r6, r6, r3
10014fa0:	0233      	lsls	r3, r6, #8
10014fa2:	d53c      	bpl.n	1001501e <__aeabi_ddiv+0x5d6>
10014fa4:	4653      	mov	r3, sl
10014fa6:	2201      	movs	r2, #1
10014fa8:	2100      	movs	r1, #0
10014faa:	401a      	ands	r2, r3
10014fac:	2600      	movs	r6, #0
10014fae:	2301      	movs	r3, #1
10014fb0:	4689      	mov	r9, r1
10014fb2:	e5af      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10014fb4:	2302      	movs	r3, #2
10014fb6:	425b      	negs	r3, r3
10014fb8:	469c      	mov	ip, r3
10014fba:	9c03      	ldr	r4, [sp, #12]
10014fbc:	44e3      	add	fp, ip
10014fbe:	46a4      	mov	ip, r4
10014fc0:	9b02      	ldr	r3, [sp, #8]
10014fc2:	4463      	add	r3, ip
10014fc4:	4698      	mov	r8, r3
10014fc6:	45a0      	cmp	r8, r4
10014fc8:	41b6      	sbcs	r6, r6
10014fca:	4276      	negs	r6, r6
10014fcc:	19f6      	adds	r6, r6, r7
10014fce:	9302      	str	r3, [sp, #8]
10014fd0:	18b2      	adds	r2, r6, r2
10014fd2:	e6b1      	b.n	10014d38 <__aeabi_ddiv+0x2f0>
10014fd4:	9803      	ldr	r0, [sp, #12]
10014fd6:	1e8a      	subs	r2, r1, #2
10014fd8:	0041      	lsls	r1, r0, #1
10014fda:	4281      	cmp	r1, r0
10014fdc:	41b6      	sbcs	r6, r6
10014fde:	4276      	negs	r6, r6
10014fe0:	19f6      	adds	r6, r6, r7
10014fe2:	19ad      	adds	r5, r5, r6
10014fe4:	9103      	str	r1, [sp, #12]
10014fe6:	e761      	b.n	10014eac <__aeabi_ddiv+0x464>
10014fe8:	221f      	movs	r2, #31
10014fea:	4252      	negs	r2, r2
10014fec:	1ad3      	subs	r3, r2, r3
10014fee:	465a      	mov	r2, fp
10014ff0:	40da      	lsrs	r2, r3
10014ff2:	0013      	movs	r3, r2
10014ff4:	2d20      	cmp	r5, #32
10014ff6:	d029      	beq.n	1001504c <__aeabi_ddiv+0x604>
10014ff8:	2240      	movs	r2, #64	; 0x40
10014ffa:	4658      	mov	r0, fp
10014ffc:	1b55      	subs	r5, r2, r5
10014ffe:	40a8      	lsls	r0, r5
10015000:	4301      	orrs	r1, r0
10015002:	1e48      	subs	r0, r1, #1
10015004:	4181      	sbcs	r1, r0
10015006:	2007      	movs	r0, #7
10015008:	430b      	orrs	r3, r1
1001500a:	4018      	ands	r0, r3
1001500c:	2600      	movs	r6, #0
1001500e:	2800      	cmp	r0, #0
10015010:	d009      	beq.n	10015026 <__aeabi_ddiv+0x5de>
10015012:	220f      	movs	r2, #15
10015014:	2600      	movs	r6, #0
10015016:	401a      	ands	r2, r3
10015018:	0019      	movs	r1, r3
1001501a:	2a04      	cmp	r2, #4
1001501c:	d1bb      	bne.n	10014f96 <__aeabi_ddiv+0x54e>
1001501e:	000b      	movs	r3, r1
10015020:	0770      	lsls	r0, r6, #29
10015022:	0276      	lsls	r6, r6, #9
10015024:	0b36      	lsrs	r6, r6, #12
10015026:	08db      	lsrs	r3, r3, #3
10015028:	4303      	orrs	r3, r0
1001502a:	4699      	mov	r9, r3
1001502c:	2201      	movs	r2, #1
1001502e:	4653      	mov	r3, sl
10015030:	401a      	ands	r2, r3
10015032:	2300      	movs	r3, #0
10015034:	e56e      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10015036:	9902      	ldr	r1, [sp, #8]
10015038:	428d      	cmp	r5, r1
1001503a:	d8bb      	bhi.n	10014fb4 <__aeabi_ddiv+0x56c>
1001503c:	469b      	mov	fp, r3
1001503e:	2600      	movs	r6, #0
10015040:	e67b      	b.n	10014d3a <__aeabi_ddiv+0x2f2>
10015042:	9803      	ldr	r0, [sp, #12]
10015044:	4298      	cmp	r0, r3
10015046:	d3c5      	bcc.n	10014fd4 <__aeabi_ddiv+0x58c>
10015048:	0011      	movs	r1, r2
1001504a:	e732      	b.n	10014eb2 <__aeabi_ddiv+0x46a>
1001504c:	2000      	movs	r0, #0
1001504e:	e7d7      	b.n	10015000 <__aeabi_ddiv+0x5b8>
10015050:	2680      	movs	r6, #128	; 0x80
10015052:	465b      	mov	r3, fp
10015054:	0336      	lsls	r6, r6, #12
10015056:	431e      	orrs	r6, r3
10015058:	0336      	lsls	r6, r6, #12
1001505a:	0b36      	lsrs	r6, r6, #12
1001505c:	9a00      	ldr	r2, [sp, #0]
1001505e:	4689      	mov	r9, r1
10015060:	4b03      	ldr	r3, [pc, #12]	; (10015070 <__aeabi_ddiv+0x628>)
10015062:	e557      	b.n	10014b14 <__aeabi_ddiv+0xcc>
10015064:	000003ff 	.word	0x000003ff
10015068:	feffffff 	.word	0xfeffffff
1001506c:	000007fe 	.word	0x000007fe
10015070:	000007ff 	.word	0x000007ff

10015074 <__eqdf2>:
10015074:	b5f0      	push	{r4, r5, r6, r7, lr}
10015076:	465f      	mov	r7, fp
10015078:	4656      	mov	r6, sl
1001507a:	464d      	mov	r5, r9
1001507c:	4644      	mov	r4, r8
1001507e:	b4f0      	push	{r4, r5, r6, r7}
10015080:	031f      	lsls	r7, r3, #12
10015082:	005c      	lsls	r4, r3, #1
10015084:	0fdb      	lsrs	r3, r3, #31
10015086:	469a      	mov	sl, r3
10015088:	4b19      	ldr	r3, [pc, #100]	; (100150f0 <__eqdf2+0x7c>)
1001508a:	030e      	lsls	r6, r1, #12
1001508c:	004d      	lsls	r5, r1, #1
1001508e:	0fc9      	lsrs	r1, r1, #31
10015090:	4680      	mov	r8, r0
10015092:	0b36      	lsrs	r6, r6, #12
10015094:	0d6d      	lsrs	r5, r5, #21
10015096:	468b      	mov	fp, r1
10015098:	4691      	mov	r9, r2
1001509a:	0b3f      	lsrs	r7, r7, #12
1001509c:	0d64      	lsrs	r4, r4, #21
1001509e:	429d      	cmp	r5, r3
100150a0:	d019      	beq.n	100150d6 <__eqdf2+0x62>
100150a2:	4b13      	ldr	r3, [pc, #76]	; (100150f0 <__eqdf2+0x7c>)
100150a4:	429c      	cmp	r4, r3
100150a6:	d01b      	beq.n	100150e0 <__eqdf2+0x6c>
100150a8:	2301      	movs	r3, #1
100150aa:	42a5      	cmp	r5, r4
100150ac:	d006      	beq.n	100150bc <__eqdf2+0x48>
100150ae:	0018      	movs	r0, r3
100150b0:	bc3c      	pop	{r2, r3, r4, r5}
100150b2:	4690      	mov	r8, r2
100150b4:	4699      	mov	r9, r3
100150b6:	46a2      	mov	sl, r4
100150b8:	46ab      	mov	fp, r5
100150ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100150bc:	42be      	cmp	r6, r7
100150be:	d1f6      	bne.n	100150ae <__eqdf2+0x3a>
100150c0:	45c8      	cmp	r8, r9
100150c2:	d1f4      	bne.n	100150ae <__eqdf2+0x3a>
100150c4:	45d3      	cmp	fp, sl
100150c6:	d010      	beq.n	100150ea <__eqdf2+0x76>
100150c8:	2d00      	cmp	r5, #0
100150ca:	d1f0      	bne.n	100150ae <__eqdf2+0x3a>
100150cc:	4330      	orrs	r0, r6
100150ce:	0003      	movs	r3, r0
100150d0:	1e5a      	subs	r2, r3, #1
100150d2:	4193      	sbcs	r3, r2
100150d4:	e7eb      	b.n	100150ae <__eqdf2+0x3a>
100150d6:	0031      	movs	r1, r6
100150d8:	2301      	movs	r3, #1
100150da:	4301      	orrs	r1, r0
100150dc:	d1e7      	bne.n	100150ae <__eqdf2+0x3a>
100150de:	e7e0      	b.n	100150a2 <__eqdf2+0x2e>
100150e0:	433a      	orrs	r2, r7
100150e2:	2301      	movs	r3, #1
100150e4:	2a00      	cmp	r2, #0
100150e6:	d1e2      	bne.n	100150ae <__eqdf2+0x3a>
100150e8:	e7de      	b.n	100150a8 <__eqdf2+0x34>
100150ea:	2300      	movs	r3, #0
100150ec:	e7df      	b.n	100150ae <__eqdf2+0x3a>
100150ee:	46c0      	nop			; (mov r8, r8)
100150f0:	000007ff 	.word	0x000007ff

100150f4 <__gedf2>:
100150f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100150f6:	465f      	mov	r7, fp
100150f8:	4644      	mov	r4, r8
100150fa:	4656      	mov	r6, sl
100150fc:	464d      	mov	r5, r9
100150fe:	b4f0      	push	{r4, r5, r6, r7}
10015100:	031f      	lsls	r7, r3, #12
10015102:	0b3c      	lsrs	r4, r7, #12
10015104:	4f2c      	ldr	r7, [pc, #176]	; (100151b8 <__gedf2+0xc4>)
10015106:	030e      	lsls	r6, r1, #12
10015108:	004d      	lsls	r5, r1, #1
1001510a:	46a3      	mov	fp, r4
1001510c:	005c      	lsls	r4, r3, #1
1001510e:	4684      	mov	ip, r0
10015110:	0b36      	lsrs	r6, r6, #12
10015112:	0d6d      	lsrs	r5, r5, #21
10015114:	0fc9      	lsrs	r1, r1, #31
10015116:	4690      	mov	r8, r2
10015118:	0d64      	lsrs	r4, r4, #21
1001511a:	0fdb      	lsrs	r3, r3, #31
1001511c:	42bd      	cmp	r5, r7
1001511e:	d02b      	beq.n	10015178 <__gedf2+0x84>
10015120:	4f25      	ldr	r7, [pc, #148]	; (100151b8 <__gedf2+0xc4>)
10015122:	42bc      	cmp	r4, r7
10015124:	d02e      	beq.n	10015184 <__gedf2+0x90>
10015126:	2d00      	cmp	r5, #0
10015128:	d10e      	bne.n	10015148 <__gedf2+0x54>
1001512a:	4330      	orrs	r0, r6
1001512c:	0007      	movs	r7, r0
1001512e:	4681      	mov	r9, r0
10015130:	4278      	negs	r0, r7
10015132:	4178      	adcs	r0, r7
10015134:	2c00      	cmp	r4, #0
10015136:	d117      	bne.n	10015168 <__gedf2+0x74>
10015138:	465f      	mov	r7, fp
1001513a:	433a      	orrs	r2, r7
1001513c:	d114      	bne.n	10015168 <__gedf2+0x74>
1001513e:	464b      	mov	r3, r9
10015140:	2000      	movs	r0, #0
10015142:	2b00      	cmp	r3, #0
10015144:	d00a      	beq.n	1001515c <__gedf2+0x68>
10015146:	e006      	b.n	10015156 <__gedf2+0x62>
10015148:	2c00      	cmp	r4, #0
1001514a:	d102      	bne.n	10015152 <__gedf2+0x5e>
1001514c:	4658      	mov	r0, fp
1001514e:	4302      	orrs	r2, r0
10015150:	d001      	beq.n	10015156 <__gedf2+0x62>
10015152:	4299      	cmp	r1, r3
10015154:	d01a      	beq.n	1001518c <__gedf2+0x98>
10015156:	2301      	movs	r3, #1
10015158:	4248      	negs	r0, r1
1001515a:	4318      	orrs	r0, r3
1001515c:	bc3c      	pop	{r2, r3, r4, r5}
1001515e:	4690      	mov	r8, r2
10015160:	4699      	mov	r9, r3
10015162:	46a2      	mov	sl, r4
10015164:	46ab      	mov	fp, r5
10015166:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015168:	2800      	cmp	r0, #0
1001516a:	d0f2      	beq.n	10015152 <__gedf2+0x5e>
1001516c:	4258      	negs	r0, r3
1001516e:	4158      	adcs	r0, r3
10015170:	2201      	movs	r2, #1
10015172:	4240      	negs	r0, r0
10015174:	4310      	orrs	r0, r2
10015176:	e7f1      	b.n	1001515c <__gedf2+0x68>
10015178:	0037      	movs	r7, r6
1001517a:	4307      	orrs	r7, r0
1001517c:	d0d0      	beq.n	10015120 <__gedf2+0x2c>
1001517e:	2002      	movs	r0, #2
10015180:	4240      	negs	r0, r0
10015182:	e7eb      	b.n	1001515c <__gedf2+0x68>
10015184:	465f      	mov	r7, fp
10015186:	4317      	orrs	r7, r2
10015188:	d0cd      	beq.n	10015126 <__gedf2+0x32>
1001518a:	e7f8      	b.n	1001517e <__gedf2+0x8a>
1001518c:	42a5      	cmp	r5, r4
1001518e:	dce2      	bgt.n	10015156 <__gedf2+0x62>
10015190:	db05      	blt.n	1001519e <__gedf2+0xaa>
10015192:	455e      	cmp	r6, fp
10015194:	d8df      	bhi.n	10015156 <__gedf2+0x62>
10015196:	d008      	beq.n	100151aa <__gedf2+0xb6>
10015198:	2000      	movs	r0, #0
1001519a:	455e      	cmp	r6, fp
1001519c:	d2de      	bcs.n	1001515c <__gedf2+0x68>
1001519e:	4248      	negs	r0, r1
100151a0:	4148      	adcs	r0, r1
100151a2:	2301      	movs	r3, #1
100151a4:	4240      	negs	r0, r0
100151a6:	4318      	orrs	r0, r3
100151a8:	e7d8      	b.n	1001515c <__gedf2+0x68>
100151aa:	45c4      	cmp	ip, r8
100151ac:	d8d3      	bhi.n	10015156 <__gedf2+0x62>
100151ae:	2000      	movs	r0, #0
100151b0:	45c4      	cmp	ip, r8
100151b2:	d3f4      	bcc.n	1001519e <__gedf2+0xaa>
100151b4:	e7d2      	b.n	1001515c <__gedf2+0x68>
100151b6:	46c0      	nop			; (mov r8, r8)
100151b8:	000007ff 	.word	0x000007ff

100151bc <__ledf2>:
100151bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100151be:	465f      	mov	r7, fp
100151c0:	464d      	mov	r5, r9
100151c2:	4644      	mov	r4, r8
100151c4:	4656      	mov	r6, sl
100151c6:	b4f0      	push	{r4, r5, r6, r7}
100151c8:	031c      	lsls	r4, r3, #12
100151ca:	0b24      	lsrs	r4, r4, #12
100151cc:	46a4      	mov	ip, r4
100151ce:	4c2f      	ldr	r4, [pc, #188]	; (1001528c <__ledf2+0xd0>)
100151d0:	030f      	lsls	r7, r1, #12
100151d2:	004d      	lsls	r5, r1, #1
100151d4:	005e      	lsls	r6, r3, #1
100151d6:	0fc9      	lsrs	r1, r1, #31
100151d8:	4680      	mov	r8, r0
100151da:	0b3f      	lsrs	r7, r7, #12
100151dc:	0d6d      	lsrs	r5, r5, #21
100151de:	468b      	mov	fp, r1
100151e0:	4691      	mov	r9, r2
100151e2:	0d76      	lsrs	r6, r6, #21
100151e4:	0fdb      	lsrs	r3, r3, #31
100151e6:	42a5      	cmp	r5, r4
100151e8:	d020      	beq.n	1001522c <__ledf2+0x70>
100151ea:	4c28      	ldr	r4, [pc, #160]	; (1001528c <__ledf2+0xd0>)
100151ec:	42a6      	cmp	r6, r4
100151ee:	d022      	beq.n	10015236 <__ledf2+0x7a>
100151f0:	2d00      	cmp	r5, #0
100151f2:	d112      	bne.n	1001521a <__ledf2+0x5e>
100151f4:	4338      	orrs	r0, r7
100151f6:	4244      	negs	r4, r0
100151f8:	4144      	adcs	r4, r0
100151fa:	2e00      	cmp	r6, #0
100151fc:	d020      	beq.n	10015240 <__ledf2+0x84>
100151fe:	2c00      	cmp	r4, #0
10015200:	d00d      	beq.n	1001521e <__ledf2+0x62>
10015202:	425c      	negs	r4, r3
10015204:	4163      	adcs	r3, r4
10015206:	2401      	movs	r4, #1
10015208:	425b      	negs	r3, r3
1001520a:	431c      	orrs	r4, r3
1001520c:	0020      	movs	r0, r4
1001520e:	bc3c      	pop	{r2, r3, r4, r5}
10015210:	4690      	mov	r8, r2
10015212:	4699      	mov	r9, r3
10015214:	46a2      	mov	sl, r4
10015216:	46ab      	mov	fp, r5
10015218:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001521a:	2e00      	cmp	r6, #0
1001521c:	d017      	beq.n	1001524e <__ledf2+0x92>
1001521e:	455b      	cmp	r3, fp
10015220:	d019      	beq.n	10015256 <__ledf2+0x9a>
10015222:	465b      	mov	r3, fp
10015224:	425c      	negs	r4, r3
10015226:	2301      	movs	r3, #1
10015228:	431c      	orrs	r4, r3
1001522a:	e7ef      	b.n	1001520c <__ledf2+0x50>
1001522c:	0039      	movs	r1, r7
1001522e:	2402      	movs	r4, #2
10015230:	4301      	orrs	r1, r0
10015232:	d1eb      	bne.n	1001520c <__ledf2+0x50>
10015234:	e7d9      	b.n	100151ea <__ledf2+0x2e>
10015236:	4661      	mov	r1, ip
10015238:	2402      	movs	r4, #2
1001523a:	4311      	orrs	r1, r2
1001523c:	d1e6      	bne.n	1001520c <__ledf2+0x50>
1001523e:	e7d7      	b.n	100151f0 <__ledf2+0x34>
10015240:	4661      	mov	r1, ip
10015242:	430a      	orrs	r2, r1
10015244:	d1db      	bne.n	100151fe <__ledf2+0x42>
10015246:	2400      	movs	r4, #0
10015248:	2800      	cmp	r0, #0
1001524a:	d0df      	beq.n	1001520c <__ledf2+0x50>
1001524c:	e7e9      	b.n	10015222 <__ledf2+0x66>
1001524e:	4661      	mov	r1, ip
10015250:	430a      	orrs	r2, r1
10015252:	d1e4      	bne.n	1001521e <__ledf2+0x62>
10015254:	e7e5      	b.n	10015222 <__ledf2+0x66>
10015256:	42b5      	cmp	r5, r6
10015258:	dd03      	ble.n	10015262 <__ledf2+0xa6>
1001525a:	2201      	movs	r2, #1
1001525c:	425c      	negs	r4, r3
1001525e:	4314      	orrs	r4, r2
10015260:	e7d4      	b.n	1001520c <__ledf2+0x50>
10015262:	42b5      	cmp	r5, r6
10015264:	dbcd      	blt.n	10015202 <__ledf2+0x46>
10015266:	4567      	cmp	r7, ip
10015268:	d8db      	bhi.n	10015222 <__ledf2+0x66>
1001526a:	d009      	beq.n	10015280 <__ledf2+0xc4>
1001526c:	2400      	movs	r4, #0
1001526e:	4567      	cmp	r7, ip
10015270:	d2cc      	bcs.n	1001520c <__ledf2+0x50>
10015272:	4659      	mov	r1, fp
10015274:	424c      	negs	r4, r1
10015276:	4161      	adcs	r1, r4
10015278:	2401      	movs	r4, #1
1001527a:	4249      	negs	r1, r1
1001527c:	430c      	orrs	r4, r1
1001527e:	e7c5      	b.n	1001520c <__ledf2+0x50>
10015280:	45c8      	cmp	r8, r9
10015282:	d8ce      	bhi.n	10015222 <__ledf2+0x66>
10015284:	2400      	movs	r4, #0
10015286:	45c8      	cmp	r8, r9
10015288:	d3f3      	bcc.n	10015272 <__ledf2+0xb6>
1001528a:	e7bf      	b.n	1001520c <__ledf2+0x50>
1001528c:	000007ff 	.word	0x000007ff

10015290 <__aeabi_dmul>:
10015290:	b5f0      	push	{r4, r5, r6, r7, lr}
10015292:	465f      	mov	r7, fp
10015294:	4656      	mov	r6, sl
10015296:	464d      	mov	r5, r9
10015298:	4644      	mov	r4, r8
1001529a:	b4f0      	push	{r4, r5, r6, r7}
1001529c:	030d      	lsls	r5, r1, #12
1001529e:	4699      	mov	r9, r3
100152a0:	004e      	lsls	r6, r1, #1
100152a2:	0b2b      	lsrs	r3, r5, #12
100152a4:	b087      	sub	sp, #28
100152a6:	0007      	movs	r7, r0
100152a8:	4692      	mov	sl, r2
100152aa:	4680      	mov	r8, r0
100152ac:	469b      	mov	fp, r3
100152ae:	0d76      	lsrs	r6, r6, #21
100152b0:	0fcc      	lsrs	r4, r1, #31
100152b2:	2e00      	cmp	r6, #0
100152b4:	d069      	beq.n	1001538a <__aeabi_dmul+0xfa>
100152b6:	4b6d      	ldr	r3, [pc, #436]	; (1001546c <__aeabi_dmul+0x1dc>)
100152b8:	429e      	cmp	r6, r3
100152ba:	d035      	beq.n	10015328 <__aeabi_dmul+0x98>
100152bc:	465b      	mov	r3, fp
100152be:	2280      	movs	r2, #128	; 0x80
100152c0:	00dd      	lsls	r5, r3, #3
100152c2:	0412      	lsls	r2, r2, #16
100152c4:	0f43      	lsrs	r3, r0, #29
100152c6:	4313      	orrs	r3, r2
100152c8:	432b      	orrs	r3, r5
100152ca:	469b      	mov	fp, r3
100152cc:	00c3      	lsls	r3, r0, #3
100152ce:	4698      	mov	r8, r3
100152d0:	4b67      	ldr	r3, [pc, #412]	; (10015470 <__aeabi_dmul+0x1e0>)
100152d2:	2700      	movs	r7, #0
100152d4:	469c      	mov	ip, r3
100152d6:	2300      	movs	r3, #0
100152d8:	4466      	add	r6, ip
100152da:	9301      	str	r3, [sp, #4]
100152dc:	464a      	mov	r2, r9
100152de:	0315      	lsls	r5, r2, #12
100152e0:	0050      	lsls	r0, r2, #1
100152e2:	0fd2      	lsrs	r2, r2, #31
100152e4:	4653      	mov	r3, sl
100152e6:	0b2d      	lsrs	r5, r5, #12
100152e8:	0d40      	lsrs	r0, r0, #21
100152ea:	4691      	mov	r9, r2
100152ec:	d100      	bne.n	100152f0 <__aeabi_dmul+0x60>
100152ee:	e076      	b.n	100153de <__aeabi_dmul+0x14e>
100152f0:	4a5e      	ldr	r2, [pc, #376]	; (1001546c <__aeabi_dmul+0x1dc>)
100152f2:	4290      	cmp	r0, r2
100152f4:	d06c      	beq.n	100153d0 <__aeabi_dmul+0x140>
100152f6:	2280      	movs	r2, #128	; 0x80
100152f8:	0f5b      	lsrs	r3, r3, #29
100152fa:	0412      	lsls	r2, r2, #16
100152fc:	4313      	orrs	r3, r2
100152fe:	4a5c      	ldr	r2, [pc, #368]	; (10015470 <__aeabi_dmul+0x1e0>)
10015300:	00ed      	lsls	r5, r5, #3
10015302:	4694      	mov	ip, r2
10015304:	431d      	orrs	r5, r3
10015306:	4653      	mov	r3, sl
10015308:	2200      	movs	r2, #0
1001530a:	00db      	lsls	r3, r3, #3
1001530c:	4460      	add	r0, ip
1001530e:	4649      	mov	r1, r9
10015310:	1836      	adds	r6, r6, r0
10015312:	1c70      	adds	r0, r6, #1
10015314:	4061      	eors	r1, r4
10015316:	9002      	str	r0, [sp, #8]
10015318:	4317      	orrs	r7, r2
1001531a:	2f0f      	cmp	r7, #15
1001531c:	d900      	bls.n	10015320 <__aeabi_dmul+0x90>
1001531e:	e0af      	b.n	10015480 <__aeabi_dmul+0x1f0>
10015320:	4854      	ldr	r0, [pc, #336]	; (10015474 <__aeabi_dmul+0x1e4>)
10015322:	00bf      	lsls	r7, r7, #2
10015324:	59c7      	ldr	r7, [r0, r7]
10015326:	46bf      	mov	pc, r7
10015328:	465b      	mov	r3, fp
1001532a:	431f      	orrs	r7, r3
1001532c:	d000      	beq.n	10015330 <__aeabi_dmul+0xa0>
1001532e:	e088      	b.n	10015442 <__aeabi_dmul+0x1b2>
10015330:	2300      	movs	r3, #0
10015332:	469b      	mov	fp, r3
10015334:	4698      	mov	r8, r3
10015336:	3302      	adds	r3, #2
10015338:	2708      	movs	r7, #8
1001533a:	9301      	str	r3, [sp, #4]
1001533c:	e7ce      	b.n	100152dc <__aeabi_dmul+0x4c>
1001533e:	4649      	mov	r1, r9
10015340:	2a02      	cmp	r2, #2
10015342:	d06a      	beq.n	1001541a <__aeabi_dmul+0x18a>
10015344:	2a03      	cmp	r2, #3
10015346:	d100      	bne.n	1001534a <__aeabi_dmul+0xba>
10015348:	e209      	b.n	1001575e <__aeabi_dmul+0x4ce>
1001534a:	2a01      	cmp	r2, #1
1001534c:	d000      	beq.n	10015350 <__aeabi_dmul+0xc0>
1001534e:	e1bb      	b.n	100156c8 <__aeabi_dmul+0x438>
10015350:	4011      	ands	r1, r2
10015352:	2200      	movs	r2, #0
10015354:	2300      	movs	r3, #0
10015356:	2500      	movs	r5, #0
10015358:	4690      	mov	r8, r2
1001535a:	b2cc      	uxtb	r4, r1
1001535c:	2100      	movs	r1, #0
1001535e:	032d      	lsls	r5, r5, #12
10015360:	0d0a      	lsrs	r2, r1, #20
10015362:	0512      	lsls	r2, r2, #20
10015364:	0b2d      	lsrs	r5, r5, #12
10015366:	4315      	orrs	r5, r2
10015368:	4a43      	ldr	r2, [pc, #268]	; (10015478 <__aeabi_dmul+0x1e8>)
1001536a:	051b      	lsls	r3, r3, #20
1001536c:	4015      	ands	r5, r2
1001536e:	431d      	orrs	r5, r3
10015370:	006d      	lsls	r5, r5, #1
10015372:	07e4      	lsls	r4, r4, #31
10015374:	086d      	lsrs	r5, r5, #1
10015376:	4325      	orrs	r5, r4
10015378:	4640      	mov	r0, r8
1001537a:	0029      	movs	r1, r5
1001537c:	b007      	add	sp, #28
1001537e:	bc3c      	pop	{r2, r3, r4, r5}
10015380:	4690      	mov	r8, r2
10015382:	4699      	mov	r9, r3
10015384:	46a2      	mov	sl, r4
10015386:	46ab      	mov	fp, r5
10015388:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001538a:	4303      	orrs	r3, r0
1001538c:	d052      	beq.n	10015434 <__aeabi_dmul+0x1a4>
1001538e:	465b      	mov	r3, fp
10015390:	2b00      	cmp	r3, #0
10015392:	d100      	bne.n	10015396 <__aeabi_dmul+0x106>
10015394:	e18a      	b.n	100156ac <__aeabi_dmul+0x41c>
10015396:	4658      	mov	r0, fp
10015398:	f000 fef8 	bl	1001618c <__clzsi2>
1001539c:	0003      	movs	r3, r0
1001539e:	3b0b      	subs	r3, #11
100153a0:	2b1c      	cmp	r3, #28
100153a2:	dd00      	ble.n	100153a6 <__aeabi_dmul+0x116>
100153a4:	e17b      	b.n	1001569e <__aeabi_dmul+0x40e>
100153a6:	221d      	movs	r2, #29
100153a8:	1ad3      	subs	r3, r2, r3
100153aa:	003a      	movs	r2, r7
100153ac:	0001      	movs	r1, r0
100153ae:	465d      	mov	r5, fp
100153b0:	40da      	lsrs	r2, r3
100153b2:	3908      	subs	r1, #8
100153b4:	408d      	lsls	r5, r1
100153b6:	0013      	movs	r3, r2
100153b8:	408f      	lsls	r7, r1
100153ba:	432b      	orrs	r3, r5
100153bc:	469b      	mov	fp, r3
100153be:	46b8      	mov	r8, r7
100153c0:	4b2e      	ldr	r3, [pc, #184]	; (1001547c <__aeabi_dmul+0x1ec>)
100153c2:	2700      	movs	r7, #0
100153c4:	469c      	mov	ip, r3
100153c6:	2300      	movs	r3, #0
100153c8:	4460      	add	r0, ip
100153ca:	4246      	negs	r6, r0
100153cc:	9301      	str	r3, [sp, #4]
100153ce:	e785      	b.n	100152dc <__aeabi_dmul+0x4c>
100153d0:	4652      	mov	r2, sl
100153d2:	432a      	orrs	r2, r5
100153d4:	d12c      	bne.n	10015430 <__aeabi_dmul+0x1a0>
100153d6:	2500      	movs	r5, #0
100153d8:	2300      	movs	r3, #0
100153da:	2202      	movs	r2, #2
100153dc:	e797      	b.n	1001530e <__aeabi_dmul+0x7e>
100153de:	4652      	mov	r2, sl
100153e0:	432a      	orrs	r2, r5
100153e2:	d021      	beq.n	10015428 <__aeabi_dmul+0x198>
100153e4:	2d00      	cmp	r5, #0
100153e6:	d100      	bne.n	100153ea <__aeabi_dmul+0x15a>
100153e8:	e154      	b.n	10015694 <__aeabi_dmul+0x404>
100153ea:	0028      	movs	r0, r5
100153ec:	f000 fece 	bl	1001618c <__clzsi2>
100153f0:	0003      	movs	r3, r0
100153f2:	3b0b      	subs	r3, #11
100153f4:	2b1c      	cmp	r3, #28
100153f6:	dd00      	ble.n	100153fa <__aeabi_dmul+0x16a>
100153f8:	e146      	b.n	10015688 <__aeabi_dmul+0x3f8>
100153fa:	211d      	movs	r1, #29
100153fc:	1acb      	subs	r3, r1, r3
100153fe:	4651      	mov	r1, sl
10015400:	0002      	movs	r2, r0
10015402:	40d9      	lsrs	r1, r3
10015404:	4653      	mov	r3, sl
10015406:	3a08      	subs	r2, #8
10015408:	4095      	lsls	r5, r2
1001540a:	4093      	lsls	r3, r2
1001540c:	430d      	orrs	r5, r1
1001540e:	4a1b      	ldr	r2, [pc, #108]	; (1001547c <__aeabi_dmul+0x1ec>)
10015410:	4694      	mov	ip, r2
10015412:	4460      	add	r0, ip
10015414:	4240      	negs	r0, r0
10015416:	2200      	movs	r2, #0
10015418:	e779      	b.n	1001530e <__aeabi_dmul+0x7e>
1001541a:	2401      	movs	r4, #1
1001541c:	2200      	movs	r2, #0
1001541e:	400c      	ands	r4, r1
10015420:	4b12      	ldr	r3, [pc, #72]	; (1001546c <__aeabi_dmul+0x1dc>)
10015422:	2500      	movs	r5, #0
10015424:	4690      	mov	r8, r2
10015426:	e799      	b.n	1001535c <__aeabi_dmul+0xcc>
10015428:	2500      	movs	r5, #0
1001542a:	2300      	movs	r3, #0
1001542c:	2201      	movs	r2, #1
1001542e:	e76e      	b.n	1001530e <__aeabi_dmul+0x7e>
10015430:	2203      	movs	r2, #3
10015432:	e76c      	b.n	1001530e <__aeabi_dmul+0x7e>
10015434:	2300      	movs	r3, #0
10015436:	469b      	mov	fp, r3
10015438:	4698      	mov	r8, r3
1001543a:	3301      	adds	r3, #1
1001543c:	2704      	movs	r7, #4
1001543e:	9301      	str	r3, [sp, #4]
10015440:	e74c      	b.n	100152dc <__aeabi_dmul+0x4c>
10015442:	2303      	movs	r3, #3
10015444:	270c      	movs	r7, #12
10015446:	9301      	str	r3, [sp, #4]
10015448:	e748      	b.n	100152dc <__aeabi_dmul+0x4c>
1001544a:	2300      	movs	r3, #0
1001544c:	2580      	movs	r5, #128	; 0x80
1001544e:	4698      	mov	r8, r3
10015450:	2400      	movs	r4, #0
10015452:	032d      	lsls	r5, r5, #12
10015454:	4b05      	ldr	r3, [pc, #20]	; (1001546c <__aeabi_dmul+0x1dc>)
10015456:	e781      	b.n	1001535c <__aeabi_dmul+0xcc>
10015458:	465d      	mov	r5, fp
1001545a:	4643      	mov	r3, r8
1001545c:	9a01      	ldr	r2, [sp, #4]
1001545e:	e76f      	b.n	10015340 <__aeabi_dmul+0xb0>
10015460:	465d      	mov	r5, fp
10015462:	4643      	mov	r3, r8
10015464:	0021      	movs	r1, r4
10015466:	9a01      	ldr	r2, [sp, #4]
10015468:	e76a      	b.n	10015340 <__aeabi_dmul+0xb0>
1001546a:	46c0      	nop			; (mov r8, r8)
1001546c:	000007ff 	.word	0x000007ff
10015470:	fffffc01 	.word	0xfffffc01
10015474:	10018498 	.word	0x10018498
10015478:	800fffff 	.word	0x800fffff
1001547c:	000003f3 	.word	0x000003f3
10015480:	4642      	mov	r2, r8
10015482:	0c12      	lsrs	r2, r2, #16
10015484:	4691      	mov	r9, r2
10015486:	0c1a      	lsrs	r2, r3, #16
10015488:	4694      	mov	ip, r2
1001548a:	4642      	mov	r2, r8
1001548c:	0417      	lsls	r7, r2, #16
1001548e:	464a      	mov	r2, r9
10015490:	041b      	lsls	r3, r3, #16
10015492:	0c1b      	lsrs	r3, r3, #16
10015494:	435a      	muls	r2, r3
10015496:	4660      	mov	r0, ip
10015498:	4690      	mov	r8, r2
1001549a:	464a      	mov	r2, r9
1001549c:	4342      	muls	r2, r0
1001549e:	0010      	movs	r0, r2
100154a0:	9203      	str	r2, [sp, #12]
100154a2:	4662      	mov	r2, ip
100154a4:	001c      	movs	r4, r3
100154a6:	0c3f      	lsrs	r7, r7, #16
100154a8:	437a      	muls	r2, r7
100154aa:	437c      	muls	r4, r7
100154ac:	4442      	add	r2, r8
100154ae:	9201      	str	r2, [sp, #4]
100154b0:	0c22      	lsrs	r2, r4, #16
100154b2:	4692      	mov	sl, r2
100154b4:	9a01      	ldr	r2, [sp, #4]
100154b6:	4452      	add	r2, sl
100154b8:	4590      	cmp	r8, r2
100154ba:	d906      	bls.n	100154ca <__aeabi_dmul+0x23a>
100154bc:	4682      	mov	sl, r0
100154be:	2080      	movs	r0, #128	; 0x80
100154c0:	0240      	lsls	r0, r0, #9
100154c2:	4680      	mov	r8, r0
100154c4:	44c2      	add	sl, r8
100154c6:	4650      	mov	r0, sl
100154c8:	9003      	str	r0, [sp, #12]
100154ca:	0c10      	lsrs	r0, r2, #16
100154cc:	9004      	str	r0, [sp, #16]
100154ce:	4648      	mov	r0, r9
100154d0:	0424      	lsls	r4, r4, #16
100154d2:	0c24      	lsrs	r4, r4, #16
100154d4:	0412      	lsls	r2, r2, #16
100154d6:	1912      	adds	r2, r2, r4
100154d8:	9205      	str	r2, [sp, #20]
100154da:	0c2a      	lsrs	r2, r5, #16
100154dc:	042d      	lsls	r5, r5, #16
100154de:	0c2d      	lsrs	r5, r5, #16
100154e0:	4368      	muls	r0, r5
100154e2:	002c      	movs	r4, r5
100154e4:	4682      	mov	sl, r0
100154e6:	4648      	mov	r0, r9
100154e8:	437c      	muls	r4, r7
100154ea:	4350      	muls	r0, r2
100154ec:	4681      	mov	r9, r0
100154ee:	0c20      	lsrs	r0, r4, #16
100154f0:	4680      	mov	r8, r0
100154f2:	4357      	muls	r7, r2
100154f4:	4457      	add	r7, sl
100154f6:	4447      	add	r7, r8
100154f8:	45ba      	cmp	sl, r7
100154fa:	d903      	bls.n	10015504 <__aeabi_dmul+0x274>
100154fc:	2080      	movs	r0, #128	; 0x80
100154fe:	0240      	lsls	r0, r0, #9
10015500:	4680      	mov	r8, r0
10015502:	44c1      	add	r9, r8
10015504:	0c38      	lsrs	r0, r7, #16
10015506:	043f      	lsls	r7, r7, #16
10015508:	46b8      	mov	r8, r7
1001550a:	4448      	add	r0, r9
1001550c:	0424      	lsls	r4, r4, #16
1001550e:	0c24      	lsrs	r4, r4, #16
10015510:	9001      	str	r0, [sp, #4]
10015512:	9804      	ldr	r0, [sp, #16]
10015514:	44a0      	add	r8, r4
10015516:	4440      	add	r0, r8
10015518:	9004      	str	r0, [sp, #16]
1001551a:	4658      	mov	r0, fp
1001551c:	0c00      	lsrs	r0, r0, #16
1001551e:	4681      	mov	r9, r0
10015520:	4658      	mov	r0, fp
10015522:	0404      	lsls	r4, r0, #16
10015524:	0c20      	lsrs	r0, r4, #16
10015526:	4682      	mov	sl, r0
10015528:	0007      	movs	r7, r0
1001552a:	4648      	mov	r0, r9
1001552c:	435f      	muls	r7, r3
1001552e:	464c      	mov	r4, r9
10015530:	4343      	muls	r3, r0
10015532:	4660      	mov	r0, ip
10015534:	4360      	muls	r0, r4
10015536:	4664      	mov	r4, ip
10015538:	4683      	mov	fp, r0
1001553a:	4650      	mov	r0, sl
1001553c:	4344      	muls	r4, r0
1001553e:	0c38      	lsrs	r0, r7, #16
10015540:	4684      	mov	ip, r0
10015542:	18e4      	adds	r4, r4, r3
10015544:	4464      	add	r4, ip
10015546:	42a3      	cmp	r3, r4
10015548:	d903      	bls.n	10015552 <__aeabi_dmul+0x2c2>
1001554a:	2380      	movs	r3, #128	; 0x80
1001554c:	025b      	lsls	r3, r3, #9
1001554e:	469c      	mov	ip, r3
10015550:	44e3      	add	fp, ip
10015552:	4648      	mov	r0, r9
10015554:	043f      	lsls	r7, r7, #16
10015556:	0c23      	lsrs	r3, r4, #16
10015558:	0c3f      	lsrs	r7, r7, #16
1001555a:	0424      	lsls	r4, r4, #16
1001555c:	19e4      	adds	r4, r4, r7
1001555e:	4657      	mov	r7, sl
10015560:	4368      	muls	r0, r5
10015562:	436f      	muls	r7, r5
10015564:	4684      	mov	ip, r0
10015566:	464d      	mov	r5, r9
10015568:	4650      	mov	r0, sl
1001556a:	4355      	muls	r5, r2
1001556c:	4342      	muls	r2, r0
1001556e:	0c38      	lsrs	r0, r7, #16
10015570:	4681      	mov	r9, r0
10015572:	4462      	add	r2, ip
10015574:	444a      	add	r2, r9
10015576:	445b      	add	r3, fp
10015578:	4594      	cmp	ip, r2
1001557a:	d903      	bls.n	10015584 <__aeabi_dmul+0x2f4>
1001557c:	2080      	movs	r0, #128	; 0x80
1001557e:	0240      	lsls	r0, r0, #9
10015580:	4684      	mov	ip, r0
10015582:	4465      	add	r5, ip
10015584:	9803      	ldr	r0, [sp, #12]
10015586:	043f      	lsls	r7, r7, #16
10015588:	4683      	mov	fp, r0
1001558a:	9804      	ldr	r0, [sp, #16]
1001558c:	0c3f      	lsrs	r7, r7, #16
1001558e:	4684      	mov	ip, r0
10015590:	44e3      	add	fp, ip
10015592:	45c3      	cmp	fp, r8
10015594:	4180      	sbcs	r0, r0
10015596:	4240      	negs	r0, r0
10015598:	4682      	mov	sl, r0
1001559a:	0410      	lsls	r0, r2, #16
1001559c:	4684      	mov	ip, r0
1001559e:	9801      	ldr	r0, [sp, #4]
100155a0:	4467      	add	r7, ip
100155a2:	4684      	mov	ip, r0
100155a4:	4467      	add	r7, ip
100155a6:	44a3      	add	fp, r4
100155a8:	46bc      	mov	ip, r7
100155aa:	45a3      	cmp	fp, r4
100155ac:	41a4      	sbcs	r4, r4
100155ae:	4699      	mov	r9, r3
100155b0:	44d4      	add	ip, sl
100155b2:	4264      	negs	r4, r4
100155b4:	4287      	cmp	r7, r0
100155b6:	41bf      	sbcs	r7, r7
100155b8:	45d4      	cmp	ip, sl
100155ba:	4180      	sbcs	r0, r0
100155bc:	44e1      	add	r9, ip
100155be:	46a0      	mov	r8, r4
100155c0:	4599      	cmp	r9, r3
100155c2:	419b      	sbcs	r3, r3
100155c4:	427f      	negs	r7, r7
100155c6:	4240      	negs	r0, r0
100155c8:	44c8      	add	r8, r9
100155ca:	4307      	orrs	r7, r0
100155cc:	0c12      	lsrs	r2, r2, #16
100155ce:	18ba      	adds	r2, r7, r2
100155d0:	45a0      	cmp	r8, r4
100155d2:	41a4      	sbcs	r4, r4
100155d4:	425f      	negs	r7, r3
100155d6:	003b      	movs	r3, r7
100155d8:	4264      	negs	r4, r4
100155da:	4323      	orrs	r3, r4
100155dc:	18d7      	adds	r7, r2, r3
100155de:	4643      	mov	r3, r8
100155e0:	197d      	adds	r5, r7, r5
100155e2:	0ddb      	lsrs	r3, r3, #23
100155e4:	026d      	lsls	r5, r5, #9
100155e6:	431d      	orrs	r5, r3
100155e8:	465b      	mov	r3, fp
100155ea:	025a      	lsls	r2, r3, #9
100155ec:	9b05      	ldr	r3, [sp, #20]
100155ee:	431a      	orrs	r2, r3
100155f0:	1e53      	subs	r3, r2, #1
100155f2:	419a      	sbcs	r2, r3
100155f4:	465b      	mov	r3, fp
100155f6:	0ddb      	lsrs	r3, r3, #23
100155f8:	431a      	orrs	r2, r3
100155fa:	4643      	mov	r3, r8
100155fc:	025b      	lsls	r3, r3, #9
100155fe:	4313      	orrs	r3, r2
10015600:	01ea      	lsls	r2, r5, #7
10015602:	d507      	bpl.n	10015614 <__aeabi_dmul+0x384>
10015604:	2201      	movs	r2, #1
10015606:	085c      	lsrs	r4, r3, #1
10015608:	4013      	ands	r3, r2
1001560a:	4323      	orrs	r3, r4
1001560c:	07ea      	lsls	r2, r5, #31
1001560e:	9e02      	ldr	r6, [sp, #8]
10015610:	4313      	orrs	r3, r2
10015612:	086d      	lsrs	r5, r5, #1
10015614:	4a57      	ldr	r2, [pc, #348]	; (10015774 <__aeabi_dmul+0x4e4>)
10015616:	18b2      	adds	r2, r6, r2
10015618:	2a00      	cmp	r2, #0
1001561a:	dd4b      	ble.n	100156b4 <__aeabi_dmul+0x424>
1001561c:	0758      	lsls	r0, r3, #29
1001561e:	d009      	beq.n	10015634 <__aeabi_dmul+0x3a4>
10015620:	200f      	movs	r0, #15
10015622:	4018      	ands	r0, r3
10015624:	2804      	cmp	r0, #4
10015626:	d005      	beq.n	10015634 <__aeabi_dmul+0x3a4>
10015628:	1d18      	adds	r0, r3, #4
1001562a:	4298      	cmp	r0, r3
1001562c:	419b      	sbcs	r3, r3
1001562e:	425b      	negs	r3, r3
10015630:	18ed      	adds	r5, r5, r3
10015632:	0003      	movs	r3, r0
10015634:	01e8      	lsls	r0, r5, #7
10015636:	d504      	bpl.n	10015642 <__aeabi_dmul+0x3b2>
10015638:	4a4f      	ldr	r2, [pc, #316]	; (10015778 <__aeabi_dmul+0x4e8>)
1001563a:	4015      	ands	r5, r2
1001563c:	2280      	movs	r2, #128	; 0x80
1001563e:	00d2      	lsls	r2, r2, #3
10015640:	18b2      	adds	r2, r6, r2
10015642:	484e      	ldr	r0, [pc, #312]	; (1001577c <__aeabi_dmul+0x4ec>)
10015644:	4282      	cmp	r2, r0
10015646:	dd00      	ble.n	1001564a <__aeabi_dmul+0x3ba>
10015648:	e6e7      	b.n	1001541a <__aeabi_dmul+0x18a>
1001564a:	2401      	movs	r4, #1
1001564c:	08db      	lsrs	r3, r3, #3
1001564e:	0768      	lsls	r0, r5, #29
10015650:	4318      	orrs	r0, r3
10015652:	026d      	lsls	r5, r5, #9
10015654:	0553      	lsls	r3, r2, #21
10015656:	4680      	mov	r8, r0
10015658:	0b2d      	lsrs	r5, r5, #12
1001565a:	0d5b      	lsrs	r3, r3, #21
1001565c:	400c      	ands	r4, r1
1001565e:	e67d      	b.n	1001535c <__aeabi_dmul+0xcc>
10015660:	2280      	movs	r2, #128	; 0x80
10015662:	4659      	mov	r1, fp
10015664:	0312      	lsls	r2, r2, #12
10015666:	4211      	tst	r1, r2
10015668:	d008      	beq.n	1001567c <__aeabi_dmul+0x3ec>
1001566a:	4215      	tst	r5, r2
1001566c:	d106      	bne.n	1001567c <__aeabi_dmul+0x3ec>
1001566e:	4315      	orrs	r5, r2
10015670:	032d      	lsls	r5, r5, #12
10015672:	4698      	mov	r8, r3
10015674:	0b2d      	lsrs	r5, r5, #12
10015676:	464c      	mov	r4, r9
10015678:	4b41      	ldr	r3, [pc, #260]	; (10015780 <__aeabi_dmul+0x4f0>)
1001567a:	e66f      	b.n	1001535c <__aeabi_dmul+0xcc>
1001567c:	465d      	mov	r5, fp
1001567e:	4315      	orrs	r5, r2
10015680:	032d      	lsls	r5, r5, #12
10015682:	0b2d      	lsrs	r5, r5, #12
10015684:	4b3e      	ldr	r3, [pc, #248]	; (10015780 <__aeabi_dmul+0x4f0>)
10015686:	e669      	b.n	1001535c <__aeabi_dmul+0xcc>
10015688:	0003      	movs	r3, r0
1001568a:	4655      	mov	r5, sl
1001568c:	3b28      	subs	r3, #40	; 0x28
1001568e:	409d      	lsls	r5, r3
10015690:	2300      	movs	r3, #0
10015692:	e6bc      	b.n	1001540e <__aeabi_dmul+0x17e>
10015694:	4650      	mov	r0, sl
10015696:	f000 fd79 	bl	1001618c <__clzsi2>
1001569a:	3020      	adds	r0, #32
1001569c:	e6a8      	b.n	100153f0 <__aeabi_dmul+0x160>
1001569e:	0003      	movs	r3, r0
100156a0:	3b28      	subs	r3, #40	; 0x28
100156a2:	409f      	lsls	r7, r3
100156a4:	2300      	movs	r3, #0
100156a6:	46bb      	mov	fp, r7
100156a8:	4698      	mov	r8, r3
100156aa:	e689      	b.n	100153c0 <__aeabi_dmul+0x130>
100156ac:	f000 fd6e 	bl	1001618c <__clzsi2>
100156b0:	3020      	adds	r0, #32
100156b2:	e673      	b.n	1001539c <__aeabi_dmul+0x10c>
100156b4:	2401      	movs	r4, #1
100156b6:	1aa6      	subs	r6, r4, r2
100156b8:	2e38      	cmp	r6, #56	; 0x38
100156ba:	dd07      	ble.n	100156cc <__aeabi_dmul+0x43c>
100156bc:	2200      	movs	r2, #0
100156be:	400c      	ands	r4, r1
100156c0:	2300      	movs	r3, #0
100156c2:	2500      	movs	r5, #0
100156c4:	4690      	mov	r8, r2
100156c6:	e649      	b.n	1001535c <__aeabi_dmul+0xcc>
100156c8:	9e02      	ldr	r6, [sp, #8]
100156ca:	e7a3      	b.n	10015614 <__aeabi_dmul+0x384>
100156cc:	2e1f      	cmp	r6, #31
100156ce:	dc20      	bgt.n	10015712 <__aeabi_dmul+0x482>
100156d0:	2220      	movs	r2, #32
100156d2:	002c      	movs	r4, r5
100156d4:	0018      	movs	r0, r3
100156d6:	1b92      	subs	r2, r2, r6
100156d8:	40f0      	lsrs	r0, r6
100156da:	4094      	lsls	r4, r2
100156dc:	4093      	lsls	r3, r2
100156de:	4304      	orrs	r4, r0
100156e0:	1e58      	subs	r0, r3, #1
100156e2:	4183      	sbcs	r3, r0
100156e4:	431c      	orrs	r4, r3
100156e6:	40f5      	lsrs	r5, r6
100156e8:	0763      	lsls	r3, r4, #29
100156ea:	d009      	beq.n	10015700 <__aeabi_dmul+0x470>
100156ec:	230f      	movs	r3, #15
100156ee:	4023      	ands	r3, r4
100156f0:	2b04      	cmp	r3, #4
100156f2:	d005      	beq.n	10015700 <__aeabi_dmul+0x470>
100156f4:	0023      	movs	r3, r4
100156f6:	1d1c      	adds	r4, r3, #4
100156f8:	429c      	cmp	r4, r3
100156fa:	4192      	sbcs	r2, r2
100156fc:	4252      	negs	r2, r2
100156fe:	18ad      	adds	r5, r5, r2
10015700:	022b      	lsls	r3, r5, #8
10015702:	d51f      	bpl.n	10015744 <__aeabi_dmul+0x4b4>
10015704:	2401      	movs	r4, #1
10015706:	2200      	movs	r2, #0
10015708:	400c      	ands	r4, r1
1001570a:	2301      	movs	r3, #1
1001570c:	2500      	movs	r5, #0
1001570e:	4690      	mov	r8, r2
10015710:	e624      	b.n	1001535c <__aeabi_dmul+0xcc>
10015712:	201f      	movs	r0, #31
10015714:	002c      	movs	r4, r5
10015716:	4240      	negs	r0, r0
10015718:	1a82      	subs	r2, r0, r2
1001571a:	40d4      	lsrs	r4, r2
1001571c:	2e20      	cmp	r6, #32
1001571e:	d01c      	beq.n	1001575a <__aeabi_dmul+0x4ca>
10015720:	2240      	movs	r2, #64	; 0x40
10015722:	1b96      	subs	r6, r2, r6
10015724:	40b5      	lsls	r5, r6
10015726:	432b      	orrs	r3, r5
10015728:	1e58      	subs	r0, r3, #1
1001572a:	4183      	sbcs	r3, r0
1001572c:	2007      	movs	r0, #7
1001572e:	4323      	orrs	r3, r4
10015730:	4018      	ands	r0, r3
10015732:	2500      	movs	r5, #0
10015734:	2800      	cmp	r0, #0
10015736:	d009      	beq.n	1001574c <__aeabi_dmul+0x4bc>
10015738:	220f      	movs	r2, #15
1001573a:	2500      	movs	r5, #0
1001573c:	401a      	ands	r2, r3
1001573e:	001c      	movs	r4, r3
10015740:	2a04      	cmp	r2, #4
10015742:	d1d8      	bne.n	100156f6 <__aeabi_dmul+0x466>
10015744:	0023      	movs	r3, r4
10015746:	0768      	lsls	r0, r5, #29
10015748:	026d      	lsls	r5, r5, #9
1001574a:	0b2d      	lsrs	r5, r5, #12
1001574c:	2401      	movs	r4, #1
1001574e:	08db      	lsrs	r3, r3, #3
10015750:	4303      	orrs	r3, r0
10015752:	4698      	mov	r8, r3
10015754:	400c      	ands	r4, r1
10015756:	2300      	movs	r3, #0
10015758:	e600      	b.n	1001535c <__aeabi_dmul+0xcc>
1001575a:	2500      	movs	r5, #0
1001575c:	e7e3      	b.n	10015726 <__aeabi_dmul+0x496>
1001575e:	2280      	movs	r2, #128	; 0x80
10015760:	2401      	movs	r4, #1
10015762:	0312      	lsls	r2, r2, #12
10015764:	4315      	orrs	r5, r2
10015766:	032d      	lsls	r5, r5, #12
10015768:	4698      	mov	r8, r3
1001576a:	0b2d      	lsrs	r5, r5, #12
1001576c:	400c      	ands	r4, r1
1001576e:	4b04      	ldr	r3, [pc, #16]	; (10015780 <__aeabi_dmul+0x4f0>)
10015770:	e5f4      	b.n	1001535c <__aeabi_dmul+0xcc>
10015772:	46c0      	nop			; (mov r8, r8)
10015774:	000003ff 	.word	0x000003ff
10015778:	feffffff 	.word	0xfeffffff
1001577c:	000007fe 	.word	0x000007fe
10015780:	000007ff 	.word	0x000007ff

10015784 <__aeabi_dsub>:
10015784:	b5f0      	push	{r4, r5, r6, r7, lr}
10015786:	4657      	mov	r7, sl
10015788:	464e      	mov	r6, r9
1001578a:	4645      	mov	r5, r8
1001578c:	b4e0      	push	{r5, r6, r7}
1001578e:	000e      	movs	r6, r1
10015790:	0011      	movs	r1, r2
10015792:	0ff2      	lsrs	r2, r6, #31
10015794:	4692      	mov	sl, r2
10015796:	00c5      	lsls	r5, r0, #3
10015798:	0f42      	lsrs	r2, r0, #29
1001579a:	0318      	lsls	r0, r3, #12
1001579c:	0337      	lsls	r7, r6, #12
1001579e:	0074      	lsls	r4, r6, #1
100157a0:	0a40      	lsrs	r0, r0, #9
100157a2:	0f4e      	lsrs	r6, r1, #29
100157a4:	0a7f      	lsrs	r7, r7, #9
100157a6:	4330      	orrs	r0, r6
100157a8:	4ecf      	ldr	r6, [pc, #828]	; (10015ae8 <__aeabi_dsub+0x364>)
100157aa:	4317      	orrs	r7, r2
100157ac:	005a      	lsls	r2, r3, #1
100157ae:	0d64      	lsrs	r4, r4, #21
100157b0:	0d52      	lsrs	r2, r2, #21
100157b2:	0fdb      	lsrs	r3, r3, #31
100157b4:	00c9      	lsls	r1, r1, #3
100157b6:	42b2      	cmp	r2, r6
100157b8:	d100      	bne.n	100157bc <__aeabi_dsub+0x38>
100157ba:	e0e5      	b.n	10015988 <__aeabi_dsub+0x204>
100157bc:	2601      	movs	r6, #1
100157be:	4073      	eors	r3, r6
100157c0:	1aa6      	subs	r6, r4, r2
100157c2:	46b4      	mov	ip, r6
100157c4:	4553      	cmp	r3, sl
100157c6:	d100      	bne.n	100157ca <__aeabi_dsub+0x46>
100157c8:	e0af      	b.n	1001592a <__aeabi_dsub+0x1a6>
100157ca:	2e00      	cmp	r6, #0
100157cc:	dc00      	bgt.n	100157d0 <__aeabi_dsub+0x4c>
100157ce:	e10d      	b.n	100159ec <__aeabi_dsub+0x268>
100157d0:	2a00      	cmp	r2, #0
100157d2:	d13a      	bne.n	1001584a <__aeabi_dsub+0xc6>
100157d4:	0003      	movs	r3, r0
100157d6:	430b      	orrs	r3, r1
100157d8:	d000      	beq.n	100157dc <__aeabi_dsub+0x58>
100157da:	e0e4      	b.n	100159a6 <__aeabi_dsub+0x222>
100157dc:	076b      	lsls	r3, r5, #29
100157de:	d009      	beq.n	100157f4 <__aeabi_dsub+0x70>
100157e0:	230f      	movs	r3, #15
100157e2:	402b      	ands	r3, r5
100157e4:	2b04      	cmp	r3, #4
100157e6:	d005      	beq.n	100157f4 <__aeabi_dsub+0x70>
100157e8:	1d2b      	adds	r3, r5, #4
100157ea:	42ab      	cmp	r3, r5
100157ec:	41ad      	sbcs	r5, r5
100157ee:	426d      	negs	r5, r5
100157f0:	197f      	adds	r7, r7, r5
100157f2:	001d      	movs	r5, r3
100157f4:	023b      	lsls	r3, r7, #8
100157f6:	d400      	bmi.n	100157fa <__aeabi_dsub+0x76>
100157f8:	e088      	b.n	1001590c <__aeabi_dsub+0x188>
100157fa:	4bbb      	ldr	r3, [pc, #748]	; (10015ae8 <__aeabi_dsub+0x364>)
100157fc:	3401      	adds	r4, #1
100157fe:	429c      	cmp	r4, r3
10015800:	d100      	bne.n	10015804 <__aeabi_dsub+0x80>
10015802:	e110      	b.n	10015a26 <__aeabi_dsub+0x2a2>
10015804:	003a      	movs	r2, r7
10015806:	4bb9      	ldr	r3, [pc, #740]	; (10015aec <__aeabi_dsub+0x368>)
10015808:	4651      	mov	r1, sl
1001580a:	401a      	ands	r2, r3
1001580c:	2301      	movs	r3, #1
1001580e:	0750      	lsls	r0, r2, #29
10015810:	08ed      	lsrs	r5, r5, #3
10015812:	0252      	lsls	r2, r2, #9
10015814:	0564      	lsls	r4, r4, #21
10015816:	4305      	orrs	r5, r0
10015818:	0b12      	lsrs	r2, r2, #12
1001581a:	0d64      	lsrs	r4, r4, #21
1001581c:	400b      	ands	r3, r1
1001581e:	2100      	movs	r1, #0
10015820:	0028      	movs	r0, r5
10015822:	0312      	lsls	r2, r2, #12
10015824:	0d0d      	lsrs	r5, r1, #20
10015826:	0b12      	lsrs	r2, r2, #12
10015828:	0564      	lsls	r4, r4, #21
1001582a:	052d      	lsls	r5, r5, #20
1001582c:	4315      	orrs	r5, r2
1001582e:	0862      	lsrs	r2, r4, #1
10015830:	4caf      	ldr	r4, [pc, #700]	; (10015af0 <__aeabi_dsub+0x36c>)
10015832:	07db      	lsls	r3, r3, #31
10015834:	402c      	ands	r4, r5
10015836:	4314      	orrs	r4, r2
10015838:	0064      	lsls	r4, r4, #1
1001583a:	0864      	lsrs	r4, r4, #1
1001583c:	431c      	orrs	r4, r3
1001583e:	0021      	movs	r1, r4
10015840:	bc1c      	pop	{r2, r3, r4}
10015842:	4690      	mov	r8, r2
10015844:	4699      	mov	r9, r3
10015846:	46a2      	mov	sl, r4
10015848:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001584a:	4ba7      	ldr	r3, [pc, #668]	; (10015ae8 <__aeabi_dsub+0x364>)
1001584c:	429c      	cmp	r4, r3
1001584e:	d0c5      	beq.n	100157dc <__aeabi_dsub+0x58>
10015850:	2380      	movs	r3, #128	; 0x80
10015852:	041b      	lsls	r3, r3, #16
10015854:	4318      	orrs	r0, r3
10015856:	4663      	mov	r3, ip
10015858:	2b38      	cmp	r3, #56	; 0x38
1001585a:	dd00      	ble.n	1001585e <__aeabi_dsub+0xda>
1001585c:	e0fd      	b.n	10015a5a <__aeabi_dsub+0x2d6>
1001585e:	2b1f      	cmp	r3, #31
10015860:	dd00      	ble.n	10015864 <__aeabi_dsub+0xe0>
10015862:	e130      	b.n	10015ac6 <__aeabi_dsub+0x342>
10015864:	4662      	mov	r2, ip
10015866:	2320      	movs	r3, #32
10015868:	1a9b      	subs	r3, r3, r2
1001586a:	0002      	movs	r2, r0
1001586c:	409a      	lsls	r2, r3
1001586e:	4666      	mov	r6, ip
10015870:	4690      	mov	r8, r2
10015872:	000a      	movs	r2, r1
10015874:	4099      	lsls	r1, r3
10015876:	40f2      	lsrs	r2, r6
10015878:	4646      	mov	r6, r8
1001587a:	1e4b      	subs	r3, r1, #1
1001587c:	4199      	sbcs	r1, r3
1001587e:	4332      	orrs	r2, r6
10015880:	4311      	orrs	r1, r2
10015882:	4663      	mov	r3, ip
10015884:	0002      	movs	r2, r0
10015886:	40da      	lsrs	r2, r3
10015888:	1a69      	subs	r1, r5, r1
1001588a:	428d      	cmp	r5, r1
1001588c:	419b      	sbcs	r3, r3
1001588e:	000d      	movs	r5, r1
10015890:	1aba      	subs	r2, r7, r2
10015892:	425b      	negs	r3, r3
10015894:	1ad7      	subs	r7, r2, r3
10015896:	023b      	lsls	r3, r7, #8
10015898:	d535      	bpl.n	10015906 <__aeabi_dsub+0x182>
1001589a:	027a      	lsls	r2, r7, #9
1001589c:	0a53      	lsrs	r3, r2, #9
1001589e:	4698      	mov	r8, r3
100158a0:	4643      	mov	r3, r8
100158a2:	2b00      	cmp	r3, #0
100158a4:	d100      	bne.n	100158a8 <__aeabi_dsub+0x124>
100158a6:	e0c4      	b.n	10015a32 <__aeabi_dsub+0x2ae>
100158a8:	4640      	mov	r0, r8
100158aa:	f000 fc6f 	bl	1001618c <__clzsi2>
100158ae:	0003      	movs	r3, r0
100158b0:	3b08      	subs	r3, #8
100158b2:	2b1f      	cmp	r3, #31
100158b4:	dd00      	ble.n	100158b8 <__aeabi_dsub+0x134>
100158b6:	e0c5      	b.n	10015a44 <__aeabi_dsub+0x2c0>
100158b8:	2220      	movs	r2, #32
100158ba:	0029      	movs	r1, r5
100158bc:	1ad2      	subs	r2, r2, r3
100158be:	4647      	mov	r7, r8
100158c0:	40d1      	lsrs	r1, r2
100158c2:	409f      	lsls	r7, r3
100158c4:	000a      	movs	r2, r1
100158c6:	409d      	lsls	r5, r3
100158c8:	433a      	orrs	r2, r7
100158ca:	429c      	cmp	r4, r3
100158cc:	dd00      	ble.n	100158d0 <__aeabi_dsub+0x14c>
100158ce:	e0c0      	b.n	10015a52 <__aeabi_dsub+0x2ce>
100158d0:	1b1c      	subs	r4, r3, r4
100158d2:	1c63      	adds	r3, r4, #1
100158d4:	2b1f      	cmp	r3, #31
100158d6:	dd00      	ble.n	100158da <__aeabi_dsub+0x156>
100158d8:	e0e4      	b.n	10015aa4 <__aeabi_dsub+0x320>
100158da:	2120      	movs	r1, #32
100158dc:	0014      	movs	r4, r2
100158de:	0028      	movs	r0, r5
100158e0:	1ac9      	subs	r1, r1, r3
100158e2:	40d8      	lsrs	r0, r3
100158e4:	408c      	lsls	r4, r1
100158e6:	408d      	lsls	r5, r1
100158e8:	4304      	orrs	r4, r0
100158ea:	40da      	lsrs	r2, r3
100158ec:	1e68      	subs	r0, r5, #1
100158ee:	4185      	sbcs	r5, r0
100158f0:	0017      	movs	r7, r2
100158f2:	4325      	orrs	r5, r4
100158f4:	2400      	movs	r4, #0
100158f6:	e771      	b.n	100157dc <__aeabi_dsub+0x58>
100158f8:	4642      	mov	r2, r8
100158fa:	4663      	mov	r3, ip
100158fc:	431a      	orrs	r2, r3
100158fe:	d100      	bne.n	10015902 <__aeabi_dsub+0x17e>
10015900:	e24c      	b.n	10015d9c <__aeabi_dsub+0x618>
10015902:	4667      	mov	r7, ip
10015904:	4645      	mov	r5, r8
10015906:	076b      	lsls	r3, r5, #29
10015908:	d000      	beq.n	1001590c <__aeabi_dsub+0x188>
1001590a:	e769      	b.n	100157e0 <__aeabi_dsub+0x5c>
1001590c:	2301      	movs	r3, #1
1001590e:	4651      	mov	r1, sl
10015910:	0778      	lsls	r0, r7, #29
10015912:	08ed      	lsrs	r5, r5, #3
10015914:	08fa      	lsrs	r2, r7, #3
10015916:	400b      	ands	r3, r1
10015918:	4305      	orrs	r5, r0
1001591a:	4973      	ldr	r1, [pc, #460]	; (10015ae8 <__aeabi_dsub+0x364>)
1001591c:	428c      	cmp	r4, r1
1001591e:	d038      	beq.n	10015992 <__aeabi_dsub+0x20e>
10015920:	0312      	lsls	r2, r2, #12
10015922:	0564      	lsls	r4, r4, #21
10015924:	0b12      	lsrs	r2, r2, #12
10015926:	0d64      	lsrs	r4, r4, #21
10015928:	e779      	b.n	1001581e <__aeabi_dsub+0x9a>
1001592a:	2e00      	cmp	r6, #0
1001592c:	dc00      	bgt.n	10015930 <__aeabi_dsub+0x1ac>
1001592e:	e09a      	b.n	10015a66 <__aeabi_dsub+0x2e2>
10015930:	2a00      	cmp	r2, #0
10015932:	d047      	beq.n	100159c4 <__aeabi_dsub+0x240>
10015934:	4a6c      	ldr	r2, [pc, #432]	; (10015ae8 <__aeabi_dsub+0x364>)
10015936:	4294      	cmp	r4, r2
10015938:	d100      	bne.n	1001593c <__aeabi_dsub+0x1b8>
1001593a:	e74f      	b.n	100157dc <__aeabi_dsub+0x58>
1001593c:	2280      	movs	r2, #128	; 0x80
1001593e:	0412      	lsls	r2, r2, #16
10015940:	4310      	orrs	r0, r2
10015942:	4662      	mov	r2, ip
10015944:	2a38      	cmp	r2, #56	; 0x38
10015946:	dc00      	bgt.n	1001594a <__aeabi_dsub+0x1c6>
10015948:	e108      	b.n	10015b5c <__aeabi_dsub+0x3d8>
1001594a:	4301      	orrs	r1, r0
1001594c:	1e48      	subs	r0, r1, #1
1001594e:	4181      	sbcs	r1, r0
10015950:	2200      	movs	r2, #0
10015952:	b2c9      	uxtb	r1, r1
10015954:	1949      	adds	r1, r1, r5
10015956:	19d2      	adds	r2, r2, r7
10015958:	42a9      	cmp	r1, r5
1001595a:	41bf      	sbcs	r7, r7
1001595c:	000d      	movs	r5, r1
1001595e:	427f      	negs	r7, r7
10015960:	18bf      	adds	r7, r7, r2
10015962:	023a      	lsls	r2, r7, #8
10015964:	d400      	bmi.n	10015968 <__aeabi_dsub+0x1e4>
10015966:	e142      	b.n	10015bee <__aeabi_dsub+0x46a>
10015968:	4a5f      	ldr	r2, [pc, #380]	; (10015ae8 <__aeabi_dsub+0x364>)
1001596a:	3401      	adds	r4, #1
1001596c:	4294      	cmp	r4, r2
1001596e:	d100      	bne.n	10015972 <__aeabi_dsub+0x1ee>
10015970:	e14e      	b.n	10015c10 <__aeabi_dsub+0x48c>
10015972:	2001      	movs	r0, #1
10015974:	4a5d      	ldr	r2, [pc, #372]	; (10015aec <__aeabi_dsub+0x368>)
10015976:	0869      	lsrs	r1, r5, #1
10015978:	403a      	ands	r2, r7
1001597a:	4028      	ands	r0, r5
1001597c:	4308      	orrs	r0, r1
1001597e:	07d5      	lsls	r5, r2, #31
10015980:	4305      	orrs	r5, r0
10015982:	0857      	lsrs	r7, r2, #1
10015984:	469a      	mov	sl, r3
10015986:	e729      	b.n	100157dc <__aeabi_dsub+0x58>
10015988:	0006      	movs	r6, r0
1001598a:	430e      	orrs	r6, r1
1001598c:	d000      	beq.n	10015990 <__aeabi_dsub+0x20c>
1001598e:	e717      	b.n	100157c0 <__aeabi_dsub+0x3c>
10015990:	e714      	b.n	100157bc <__aeabi_dsub+0x38>
10015992:	0029      	movs	r1, r5
10015994:	4311      	orrs	r1, r2
10015996:	d100      	bne.n	1001599a <__aeabi_dsub+0x216>
10015998:	e1f9      	b.n	10015d8e <__aeabi_dsub+0x60a>
1001599a:	2180      	movs	r1, #128	; 0x80
1001599c:	0309      	lsls	r1, r1, #12
1001599e:	430a      	orrs	r2, r1
100159a0:	0312      	lsls	r2, r2, #12
100159a2:	0b12      	lsrs	r2, r2, #12
100159a4:	e73b      	b.n	1001581e <__aeabi_dsub+0x9a>
100159a6:	2301      	movs	r3, #1
100159a8:	425b      	negs	r3, r3
100159aa:	4698      	mov	r8, r3
100159ac:	44c4      	add	ip, r8
100159ae:	4663      	mov	r3, ip
100159b0:	2b00      	cmp	r3, #0
100159b2:	d172      	bne.n	10015a9a <__aeabi_dsub+0x316>
100159b4:	1a69      	subs	r1, r5, r1
100159b6:	428d      	cmp	r5, r1
100159b8:	419b      	sbcs	r3, r3
100159ba:	1a3f      	subs	r7, r7, r0
100159bc:	425b      	negs	r3, r3
100159be:	1aff      	subs	r7, r7, r3
100159c0:	000d      	movs	r5, r1
100159c2:	e768      	b.n	10015896 <__aeabi_dsub+0x112>
100159c4:	0002      	movs	r2, r0
100159c6:	430a      	orrs	r2, r1
100159c8:	d100      	bne.n	100159cc <__aeabi_dsub+0x248>
100159ca:	e707      	b.n	100157dc <__aeabi_dsub+0x58>
100159cc:	2201      	movs	r2, #1
100159ce:	4252      	negs	r2, r2
100159d0:	4690      	mov	r8, r2
100159d2:	44c4      	add	ip, r8
100159d4:	4662      	mov	r2, ip
100159d6:	2a00      	cmp	r2, #0
100159d8:	d000      	beq.n	100159dc <__aeabi_dsub+0x258>
100159da:	e0e6      	b.n	10015baa <__aeabi_dsub+0x426>
100159dc:	1869      	adds	r1, r5, r1
100159de:	42a9      	cmp	r1, r5
100159e0:	41b6      	sbcs	r6, r6
100159e2:	183f      	adds	r7, r7, r0
100159e4:	4276      	negs	r6, r6
100159e6:	19f7      	adds	r7, r6, r7
100159e8:	000d      	movs	r5, r1
100159ea:	e7ba      	b.n	10015962 <__aeabi_dsub+0x1de>
100159ec:	2e00      	cmp	r6, #0
100159ee:	d000      	beq.n	100159f2 <__aeabi_dsub+0x26e>
100159f0:	e080      	b.n	10015af4 <__aeabi_dsub+0x370>
100159f2:	1c62      	adds	r2, r4, #1
100159f4:	0552      	lsls	r2, r2, #21
100159f6:	0d52      	lsrs	r2, r2, #21
100159f8:	2a01      	cmp	r2, #1
100159fa:	dc00      	bgt.n	100159fe <__aeabi_dsub+0x27a>
100159fc:	e0f9      	b.n	10015bf2 <__aeabi_dsub+0x46e>
100159fe:	1a6a      	subs	r2, r5, r1
10015a00:	4691      	mov	r9, r2
10015a02:	454d      	cmp	r5, r9
10015a04:	41b6      	sbcs	r6, r6
10015a06:	1a3a      	subs	r2, r7, r0
10015a08:	4276      	negs	r6, r6
10015a0a:	1b92      	subs	r2, r2, r6
10015a0c:	4690      	mov	r8, r2
10015a0e:	0212      	lsls	r2, r2, #8
10015a10:	d400      	bmi.n	10015a14 <__aeabi_dsub+0x290>
10015a12:	e099      	b.n	10015b48 <__aeabi_dsub+0x3c4>
10015a14:	1b4d      	subs	r5, r1, r5
10015a16:	42a9      	cmp	r1, r5
10015a18:	4189      	sbcs	r1, r1
10015a1a:	1bc7      	subs	r7, r0, r7
10015a1c:	4249      	negs	r1, r1
10015a1e:	1a7a      	subs	r2, r7, r1
10015a20:	4690      	mov	r8, r2
10015a22:	469a      	mov	sl, r3
10015a24:	e73c      	b.n	100158a0 <__aeabi_dsub+0x11c>
10015a26:	4652      	mov	r2, sl
10015a28:	2301      	movs	r3, #1
10015a2a:	2500      	movs	r5, #0
10015a2c:	4013      	ands	r3, r2
10015a2e:	2200      	movs	r2, #0
10015a30:	e6f5      	b.n	1001581e <__aeabi_dsub+0x9a>
10015a32:	0028      	movs	r0, r5
10015a34:	f000 fbaa 	bl	1001618c <__clzsi2>
10015a38:	3020      	adds	r0, #32
10015a3a:	0003      	movs	r3, r0
10015a3c:	3b08      	subs	r3, #8
10015a3e:	2b1f      	cmp	r3, #31
10015a40:	dc00      	bgt.n	10015a44 <__aeabi_dsub+0x2c0>
10015a42:	e739      	b.n	100158b8 <__aeabi_dsub+0x134>
10015a44:	002a      	movs	r2, r5
10015a46:	3828      	subs	r0, #40	; 0x28
10015a48:	4082      	lsls	r2, r0
10015a4a:	2500      	movs	r5, #0
10015a4c:	429c      	cmp	r4, r3
10015a4e:	dc00      	bgt.n	10015a52 <__aeabi_dsub+0x2ce>
10015a50:	e73e      	b.n	100158d0 <__aeabi_dsub+0x14c>
10015a52:	4f26      	ldr	r7, [pc, #152]	; (10015aec <__aeabi_dsub+0x368>)
10015a54:	1ae4      	subs	r4, r4, r3
10015a56:	4017      	ands	r7, r2
10015a58:	e6c0      	b.n	100157dc <__aeabi_dsub+0x58>
10015a5a:	4301      	orrs	r1, r0
10015a5c:	1e48      	subs	r0, r1, #1
10015a5e:	4181      	sbcs	r1, r0
10015a60:	2200      	movs	r2, #0
10015a62:	b2c9      	uxtb	r1, r1
10015a64:	e710      	b.n	10015888 <__aeabi_dsub+0x104>
10015a66:	2e00      	cmp	r6, #0
10015a68:	d000      	beq.n	10015a6c <__aeabi_dsub+0x2e8>
10015a6a:	e0f1      	b.n	10015c50 <__aeabi_dsub+0x4cc>
10015a6c:	1c62      	adds	r2, r4, #1
10015a6e:	4694      	mov	ip, r2
10015a70:	0552      	lsls	r2, r2, #21
10015a72:	0d52      	lsrs	r2, r2, #21
10015a74:	2a01      	cmp	r2, #1
10015a76:	dc00      	bgt.n	10015a7a <__aeabi_dsub+0x2f6>
10015a78:	e0a0      	b.n	10015bbc <__aeabi_dsub+0x438>
10015a7a:	4a1b      	ldr	r2, [pc, #108]	; (10015ae8 <__aeabi_dsub+0x364>)
10015a7c:	4594      	cmp	ip, r2
10015a7e:	d100      	bne.n	10015a82 <__aeabi_dsub+0x2fe>
10015a80:	e0c5      	b.n	10015c0e <__aeabi_dsub+0x48a>
10015a82:	1869      	adds	r1, r5, r1
10015a84:	42a9      	cmp	r1, r5
10015a86:	4192      	sbcs	r2, r2
10015a88:	183f      	adds	r7, r7, r0
10015a8a:	4252      	negs	r2, r2
10015a8c:	19d2      	adds	r2, r2, r7
10015a8e:	0849      	lsrs	r1, r1, #1
10015a90:	07d5      	lsls	r5, r2, #31
10015a92:	430d      	orrs	r5, r1
10015a94:	0857      	lsrs	r7, r2, #1
10015a96:	4664      	mov	r4, ip
10015a98:	e6a0      	b.n	100157dc <__aeabi_dsub+0x58>
10015a9a:	4b13      	ldr	r3, [pc, #76]	; (10015ae8 <__aeabi_dsub+0x364>)
10015a9c:	429c      	cmp	r4, r3
10015a9e:	d000      	beq.n	10015aa2 <__aeabi_dsub+0x31e>
10015aa0:	e6d9      	b.n	10015856 <__aeabi_dsub+0xd2>
10015aa2:	e69b      	b.n	100157dc <__aeabi_dsub+0x58>
10015aa4:	0011      	movs	r1, r2
10015aa6:	3c1f      	subs	r4, #31
10015aa8:	40e1      	lsrs	r1, r4
10015aaa:	000c      	movs	r4, r1
10015aac:	2b20      	cmp	r3, #32
10015aae:	d100      	bne.n	10015ab2 <__aeabi_dsub+0x32e>
10015ab0:	e080      	b.n	10015bb4 <__aeabi_dsub+0x430>
10015ab2:	2140      	movs	r1, #64	; 0x40
10015ab4:	1acb      	subs	r3, r1, r3
10015ab6:	409a      	lsls	r2, r3
10015ab8:	4315      	orrs	r5, r2
10015aba:	1e6a      	subs	r2, r5, #1
10015abc:	4195      	sbcs	r5, r2
10015abe:	2700      	movs	r7, #0
10015ac0:	4325      	orrs	r5, r4
10015ac2:	2400      	movs	r4, #0
10015ac4:	e71f      	b.n	10015906 <__aeabi_dsub+0x182>
10015ac6:	4663      	mov	r3, ip
10015ac8:	0002      	movs	r2, r0
10015aca:	3b20      	subs	r3, #32
10015acc:	40da      	lsrs	r2, r3
10015ace:	4663      	mov	r3, ip
10015ad0:	2b20      	cmp	r3, #32
10015ad2:	d071      	beq.n	10015bb8 <__aeabi_dsub+0x434>
10015ad4:	2340      	movs	r3, #64	; 0x40
10015ad6:	4666      	mov	r6, ip
10015ad8:	1b9b      	subs	r3, r3, r6
10015ada:	4098      	lsls	r0, r3
10015adc:	4301      	orrs	r1, r0
10015ade:	1e48      	subs	r0, r1, #1
10015ae0:	4181      	sbcs	r1, r0
10015ae2:	4311      	orrs	r1, r2
10015ae4:	2200      	movs	r2, #0
10015ae6:	e6cf      	b.n	10015888 <__aeabi_dsub+0x104>
10015ae8:	000007ff 	.word	0x000007ff
10015aec:	ff7fffff 	.word	0xff7fffff
10015af0:	800fffff 	.word	0x800fffff
10015af4:	2c00      	cmp	r4, #0
10015af6:	d048      	beq.n	10015b8a <__aeabi_dsub+0x406>
10015af8:	4cca      	ldr	r4, [pc, #808]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015afa:	42a2      	cmp	r2, r4
10015afc:	d100      	bne.n	10015b00 <__aeabi_dsub+0x37c>
10015afe:	e0a2      	b.n	10015c46 <__aeabi_dsub+0x4c2>
10015b00:	4274      	negs	r4, r6
10015b02:	46a1      	mov	r9, r4
10015b04:	2480      	movs	r4, #128	; 0x80
10015b06:	0424      	lsls	r4, r4, #16
10015b08:	4327      	orrs	r7, r4
10015b0a:	464c      	mov	r4, r9
10015b0c:	2c38      	cmp	r4, #56	; 0x38
10015b0e:	dd00      	ble.n	10015b12 <__aeabi_dsub+0x38e>
10015b10:	e0db      	b.n	10015cca <__aeabi_dsub+0x546>
10015b12:	2c1f      	cmp	r4, #31
10015b14:	dd00      	ble.n	10015b18 <__aeabi_dsub+0x394>
10015b16:	e144      	b.n	10015da2 <__aeabi_dsub+0x61e>
10015b18:	464e      	mov	r6, r9
10015b1a:	2420      	movs	r4, #32
10015b1c:	1ba4      	subs	r4, r4, r6
10015b1e:	003e      	movs	r6, r7
10015b20:	40a6      	lsls	r6, r4
10015b22:	46a2      	mov	sl, r4
10015b24:	46b0      	mov	r8, r6
10015b26:	464c      	mov	r4, r9
10015b28:	002e      	movs	r6, r5
10015b2a:	40e6      	lsrs	r6, r4
10015b2c:	46b4      	mov	ip, r6
10015b2e:	4646      	mov	r6, r8
10015b30:	4664      	mov	r4, ip
10015b32:	4326      	orrs	r6, r4
10015b34:	4654      	mov	r4, sl
10015b36:	40a5      	lsls	r5, r4
10015b38:	1e6c      	subs	r4, r5, #1
10015b3a:	41a5      	sbcs	r5, r4
10015b3c:	0034      	movs	r4, r6
10015b3e:	432c      	orrs	r4, r5
10015b40:	464d      	mov	r5, r9
10015b42:	40ef      	lsrs	r7, r5
10015b44:	1b0d      	subs	r5, r1, r4
10015b46:	e028      	b.n	10015b9a <__aeabi_dsub+0x416>
10015b48:	464a      	mov	r2, r9
10015b4a:	4643      	mov	r3, r8
10015b4c:	464d      	mov	r5, r9
10015b4e:	431a      	orrs	r2, r3
10015b50:	d000      	beq.n	10015b54 <__aeabi_dsub+0x3d0>
10015b52:	e6a5      	b.n	100158a0 <__aeabi_dsub+0x11c>
10015b54:	2300      	movs	r3, #0
10015b56:	2400      	movs	r4, #0
10015b58:	2500      	movs	r5, #0
10015b5a:	e6de      	b.n	1001591a <__aeabi_dsub+0x196>
10015b5c:	2a1f      	cmp	r2, #31
10015b5e:	dc5a      	bgt.n	10015c16 <__aeabi_dsub+0x492>
10015b60:	4666      	mov	r6, ip
10015b62:	2220      	movs	r2, #32
10015b64:	1b92      	subs	r2, r2, r6
10015b66:	0006      	movs	r6, r0
10015b68:	4096      	lsls	r6, r2
10015b6a:	4691      	mov	r9, r2
10015b6c:	46b0      	mov	r8, r6
10015b6e:	4662      	mov	r2, ip
10015b70:	000e      	movs	r6, r1
10015b72:	40d6      	lsrs	r6, r2
10015b74:	4642      	mov	r2, r8
10015b76:	4316      	orrs	r6, r2
10015b78:	464a      	mov	r2, r9
10015b7a:	4091      	lsls	r1, r2
10015b7c:	1e4a      	subs	r2, r1, #1
10015b7e:	4191      	sbcs	r1, r2
10015b80:	0002      	movs	r2, r0
10015b82:	4660      	mov	r0, ip
10015b84:	4331      	orrs	r1, r6
10015b86:	40c2      	lsrs	r2, r0
10015b88:	e6e4      	b.n	10015954 <__aeabi_dsub+0x1d0>
10015b8a:	003c      	movs	r4, r7
10015b8c:	432c      	orrs	r4, r5
10015b8e:	d05a      	beq.n	10015c46 <__aeabi_dsub+0x4c2>
10015b90:	43f4      	mvns	r4, r6
10015b92:	46a1      	mov	r9, r4
10015b94:	2c00      	cmp	r4, #0
10015b96:	d152      	bne.n	10015c3e <__aeabi_dsub+0x4ba>
10015b98:	1b4d      	subs	r5, r1, r5
10015b9a:	42a9      	cmp	r1, r5
10015b9c:	4189      	sbcs	r1, r1
10015b9e:	1bc7      	subs	r7, r0, r7
10015ba0:	4249      	negs	r1, r1
10015ba2:	1a7f      	subs	r7, r7, r1
10015ba4:	0014      	movs	r4, r2
10015ba6:	469a      	mov	sl, r3
10015ba8:	e675      	b.n	10015896 <__aeabi_dsub+0x112>
10015baa:	4a9e      	ldr	r2, [pc, #632]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015bac:	4294      	cmp	r4, r2
10015bae:	d000      	beq.n	10015bb2 <__aeabi_dsub+0x42e>
10015bb0:	e6c7      	b.n	10015942 <__aeabi_dsub+0x1be>
10015bb2:	e613      	b.n	100157dc <__aeabi_dsub+0x58>
10015bb4:	2200      	movs	r2, #0
10015bb6:	e77f      	b.n	10015ab8 <__aeabi_dsub+0x334>
10015bb8:	2000      	movs	r0, #0
10015bba:	e78f      	b.n	10015adc <__aeabi_dsub+0x358>
10015bbc:	2c00      	cmp	r4, #0
10015bbe:	d000      	beq.n	10015bc2 <__aeabi_dsub+0x43e>
10015bc0:	e0c8      	b.n	10015d54 <__aeabi_dsub+0x5d0>
10015bc2:	003b      	movs	r3, r7
10015bc4:	432b      	orrs	r3, r5
10015bc6:	d100      	bne.n	10015bca <__aeabi_dsub+0x446>
10015bc8:	e10f      	b.n	10015dea <__aeabi_dsub+0x666>
10015bca:	0003      	movs	r3, r0
10015bcc:	430b      	orrs	r3, r1
10015bce:	d100      	bne.n	10015bd2 <__aeabi_dsub+0x44e>
10015bd0:	e604      	b.n	100157dc <__aeabi_dsub+0x58>
10015bd2:	1869      	adds	r1, r5, r1
10015bd4:	42a9      	cmp	r1, r5
10015bd6:	419b      	sbcs	r3, r3
10015bd8:	183f      	adds	r7, r7, r0
10015bda:	425b      	negs	r3, r3
10015bdc:	19df      	adds	r7, r3, r7
10015bde:	023b      	lsls	r3, r7, #8
10015be0:	d400      	bmi.n	10015be4 <__aeabi_dsub+0x460>
10015be2:	e11a      	b.n	10015e1a <__aeabi_dsub+0x696>
10015be4:	4b90      	ldr	r3, [pc, #576]	; (10015e28 <__aeabi_dsub+0x6a4>)
10015be6:	000d      	movs	r5, r1
10015be8:	401f      	ands	r7, r3
10015bea:	4664      	mov	r4, ip
10015bec:	e5f6      	b.n	100157dc <__aeabi_dsub+0x58>
10015bee:	469a      	mov	sl, r3
10015bf0:	e689      	b.n	10015906 <__aeabi_dsub+0x182>
10015bf2:	003a      	movs	r2, r7
10015bf4:	432a      	orrs	r2, r5
10015bf6:	2c00      	cmp	r4, #0
10015bf8:	d15c      	bne.n	10015cb4 <__aeabi_dsub+0x530>
10015bfa:	2a00      	cmp	r2, #0
10015bfc:	d175      	bne.n	10015cea <__aeabi_dsub+0x566>
10015bfe:	0002      	movs	r2, r0
10015c00:	430a      	orrs	r2, r1
10015c02:	d100      	bne.n	10015c06 <__aeabi_dsub+0x482>
10015c04:	e0ca      	b.n	10015d9c <__aeabi_dsub+0x618>
10015c06:	0007      	movs	r7, r0
10015c08:	000d      	movs	r5, r1
10015c0a:	469a      	mov	sl, r3
10015c0c:	e5e6      	b.n	100157dc <__aeabi_dsub+0x58>
10015c0e:	4664      	mov	r4, ip
10015c10:	2200      	movs	r2, #0
10015c12:	2500      	movs	r5, #0
10015c14:	e681      	b.n	1001591a <__aeabi_dsub+0x196>
10015c16:	4662      	mov	r2, ip
10015c18:	0006      	movs	r6, r0
10015c1a:	3a20      	subs	r2, #32
10015c1c:	40d6      	lsrs	r6, r2
10015c1e:	4662      	mov	r2, ip
10015c20:	46b0      	mov	r8, r6
10015c22:	2a20      	cmp	r2, #32
10015c24:	d100      	bne.n	10015c28 <__aeabi_dsub+0x4a4>
10015c26:	e0b7      	b.n	10015d98 <__aeabi_dsub+0x614>
10015c28:	2240      	movs	r2, #64	; 0x40
10015c2a:	4666      	mov	r6, ip
10015c2c:	1b92      	subs	r2, r2, r6
10015c2e:	4090      	lsls	r0, r2
10015c30:	4301      	orrs	r1, r0
10015c32:	4642      	mov	r2, r8
10015c34:	1e48      	subs	r0, r1, #1
10015c36:	4181      	sbcs	r1, r0
10015c38:	4311      	orrs	r1, r2
10015c3a:	2200      	movs	r2, #0
10015c3c:	e68a      	b.n	10015954 <__aeabi_dsub+0x1d0>
10015c3e:	4c79      	ldr	r4, [pc, #484]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015c40:	42a2      	cmp	r2, r4
10015c42:	d000      	beq.n	10015c46 <__aeabi_dsub+0x4c2>
10015c44:	e761      	b.n	10015b0a <__aeabi_dsub+0x386>
10015c46:	0007      	movs	r7, r0
10015c48:	000d      	movs	r5, r1
10015c4a:	0014      	movs	r4, r2
10015c4c:	469a      	mov	sl, r3
10015c4e:	e5c5      	b.n	100157dc <__aeabi_dsub+0x58>
10015c50:	2c00      	cmp	r4, #0
10015c52:	d141      	bne.n	10015cd8 <__aeabi_dsub+0x554>
10015c54:	003c      	movs	r4, r7
10015c56:	432c      	orrs	r4, r5
10015c58:	d078      	beq.n	10015d4c <__aeabi_dsub+0x5c8>
10015c5a:	43f4      	mvns	r4, r6
10015c5c:	46a1      	mov	r9, r4
10015c5e:	2c00      	cmp	r4, #0
10015c60:	d020      	beq.n	10015ca4 <__aeabi_dsub+0x520>
10015c62:	4c70      	ldr	r4, [pc, #448]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015c64:	42a2      	cmp	r2, r4
10015c66:	d071      	beq.n	10015d4c <__aeabi_dsub+0x5c8>
10015c68:	464c      	mov	r4, r9
10015c6a:	2c38      	cmp	r4, #56	; 0x38
10015c6c:	dd00      	ble.n	10015c70 <__aeabi_dsub+0x4ec>
10015c6e:	e0b2      	b.n	10015dd6 <__aeabi_dsub+0x652>
10015c70:	2c1f      	cmp	r4, #31
10015c72:	dd00      	ble.n	10015c76 <__aeabi_dsub+0x4f2>
10015c74:	e0bc      	b.n	10015df0 <__aeabi_dsub+0x66c>
10015c76:	2620      	movs	r6, #32
10015c78:	1b34      	subs	r4, r6, r4
10015c7a:	46a2      	mov	sl, r4
10015c7c:	003c      	movs	r4, r7
10015c7e:	4656      	mov	r6, sl
10015c80:	40b4      	lsls	r4, r6
10015c82:	464e      	mov	r6, r9
10015c84:	46a0      	mov	r8, r4
10015c86:	002c      	movs	r4, r5
10015c88:	40f4      	lsrs	r4, r6
10015c8a:	46a4      	mov	ip, r4
10015c8c:	4644      	mov	r4, r8
10015c8e:	4666      	mov	r6, ip
10015c90:	4334      	orrs	r4, r6
10015c92:	46a4      	mov	ip, r4
10015c94:	4654      	mov	r4, sl
10015c96:	40a5      	lsls	r5, r4
10015c98:	4664      	mov	r4, ip
10015c9a:	1e6e      	subs	r6, r5, #1
10015c9c:	41b5      	sbcs	r5, r6
10015c9e:	4325      	orrs	r5, r4
10015ca0:	464c      	mov	r4, r9
10015ca2:	40e7      	lsrs	r7, r4
10015ca4:	186d      	adds	r5, r5, r1
10015ca6:	428d      	cmp	r5, r1
10015ca8:	4189      	sbcs	r1, r1
10015caa:	183f      	adds	r7, r7, r0
10015cac:	4249      	negs	r1, r1
10015cae:	19cf      	adds	r7, r1, r7
10015cb0:	0014      	movs	r4, r2
10015cb2:	e656      	b.n	10015962 <__aeabi_dsub+0x1de>
10015cb4:	2a00      	cmp	r2, #0
10015cb6:	d12f      	bne.n	10015d18 <__aeabi_dsub+0x594>
10015cb8:	0002      	movs	r2, r0
10015cba:	430a      	orrs	r2, r1
10015cbc:	d100      	bne.n	10015cc0 <__aeabi_dsub+0x53c>
10015cbe:	e084      	b.n	10015dca <__aeabi_dsub+0x646>
10015cc0:	0007      	movs	r7, r0
10015cc2:	000d      	movs	r5, r1
10015cc4:	469a      	mov	sl, r3
10015cc6:	4c57      	ldr	r4, [pc, #348]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015cc8:	e588      	b.n	100157dc <__aeabi_dsub+0x58>
10015cca:	433d      	orrs	r5, r7
10015ccc:	1e6f      	subs	r7, r5, #1
10015cce:	41bd      	sbcs	r5, r7
10015cd0:	b2ec      	uxtb	r4, r5
10015cd2:	2700      	movs	r7, #0
10015cd4:	1b0d      	subs	r5, r1, r4
10015cd6:	e760      	b.n	10015b9a <__aeabi_dsub+0x416>
10015cd8:	4c52      	ldr	r4, [pc, #328]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015cda:	42a2      	cmp	r2, r4
10015cdc:	d036      	beq.n	10015d4c <__aeabi_dsub+0x5c8>
10015cde:	4274      	negs	r4, r6
10015ce0:	2680      	movs	r6, #128	; 0x80
10015ce2:	0436      	lsls	r6, r6, #16
10015ce4:	46a1      	mov	r9, r4
10015ce6:	4337      	orrs	r7, r6
10015ce8:	e7be      	b.n	10015c68 <__aeabi_dsub+0x4e4>
10015cea:	0002      	movs	r2, r0
10015cec:	430a      	orrs	r2, r1
10015cee:	d100      	bne.n	10015cf2 <__aeabi_dsub+0x56e>
10015cf0:	e574      	b.n	100157dc <__aeabi_dsub+0x58>
10015cf2:	1a6a      	subs	r2, r5, r1
10015cf4:	4690      	mov	r8, r2
10015cf6:	4545      	cmp	r5, r8
10015cf8:	41b6      	sbcs	r6, r6
10015cfa:	1a3a      	subs	r2, r7, r0
10015cfc:	4276      	negs	r6, r6
10015cfe:	1b92      	subs	r2, r2, r6
10015d00:	4694      	mov	ip, r2
10015d02:	0212      	lsls	r2, r2, #8
10015d04:	d400      	bmi.n	10015d08 <__aeabi_dsub+0x584>
10015d06:	e5f7      	b.n	100158f8 <__aeabi_dsub+0x174>
10015d08:	1b4d      	subs	r5, r1, r5
10015d0a:	42a9      	cmp	r1, r5
10015d0c:	4189      	sbcs	r1, r1
10015d0e:	1bc7      	subs	r7, r0, r7
10015d10:	4249      	negs	r1, r1
10015d12:	1a7f      	subs	r7, r7, r1
10015d14:	469a      	mov	sl, r3
10015d16:	e561      	b.n	100157dc <__aeabi_dsub+0x58>
10015d18:	0002      	movs	r2, r0
10015d1a:	430a      	orrs	r2, r1
10015d1c:	d03a      	beq.n	10015d94 <__aeabi_dsub+0x610>
10015d1e:	08ed      	lsrs	r5, r5, #3
10015d20:	077c      	lsls	r4, r7, #29
10015d22:	432c      	orrs	r4, r5
10015d24:	2580      	movs	r5, #128	; 0x80
10015d26:	08fa      	lsrs	r2, r7, #3
10015d28:	032d      	lsls	r5, r5, #12
10015d2a:	422a      	tst	r2, r5
10015d2c:	d008      	beq.n	10015d40 <__aeabi_dsub+0x5bc>
10015d2e:	08c7      	lsrs	r7, r0, #3
10015d30:	422f      	tst	r7, r5
10015d32:	d105      	bne.n	10015d40 <__aeabi_dsub+0x5bc>
10015d34:	0745      	lsls	r5, r0, #29
10015d36:	002c      	movs	r4, r5
10015d38:	003a      	movs	r2, r7
10015d3a:	469a      	mov	sl, r3
10015d3c:	08c9      	lsrs	r1, r1, #3
10015d3e:	430c      	orrs	r4, r1
10015d40:	0f67      	lsrs	r7, r4, #29
10015d42:	00d2      	lsls	r2, r2, #3
10015d44:	00e5      	lsls	r5, r4, #3
10015d46:	4317      	orrs	r7, r2
10015d48:	4c36      	ldr	r4, [pc, #216]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015d4a:	e547      	b.n	100157dc <__aeabi_dsub+0x58>
10015d4c:	0007      	movs	r7, r0
10015d4e:	000d      	movs	r5, r1
10015d50:	0014      	movs	r4, r2
10015d52:	e543      	b.n	100157dc <__aeabi_dsub+0x58>
10015d54:	003a      	movs	r2, r7
10015d56:	432a      	orrs	r2, r5
10015d58:	d043      	beq.n	10015de2 <__aeabi_dsub+0x65e>
10015d5a:	0002      	movs	r2, r0
10015d5c:	430a      	orrs	r2, r1
10015d5e:	d019      	beq.n	10015d94 <__aeabi_dsub+0x610>
10015d60:	08ed      	lsrs	r5, r5, #3
10015d62:	077c      	lsls	r4, r7, #29
10015d64:	432c      	orrs	r4, r5
10015d66:	2580      	movs	r5, #128	; 0x80
10015d68:	08fa      	lsrs	r2, r7, #3
10015d6a:	032d      	lsls	r5, r5, #12
10015d6c:	422a      	tst	r2, r5
10015d6e:	d007      	beq.n	10015d80 <__aeabi_dsub+0x5fc>
10015d70:	08c6      	lsrs	r6, r0, #3
10015d72:	422e      	tst	r6, r5
10015d74:	d104      	bne.n	10015d80 <__aeabi_dsub+0x5fc>
10015d76:	0747      	lsls	r7, r0, #29
10015d78:	003c      	movs	r4, r7
10015d7a:	0032      	movs	r2, r6
10015d7c:	08c9      	lsrs	r1, r1, #3
10015d7e:	430c      	orrs	r4, r1
10015d80:	00d7      	lsls	r7, r2, #3
10015d82:	0f62      	lsrs	r2, r4, #29
10015d84:	00e5      	lsls	r5, r4, #3
10015d86:	4317      	orrs	r7, r2
10015d88:	469a      	mov	sl, r3
10015d8a:	4c26      	ldr	r4, [pc, #152]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015d8c:	e526      	b.n	100157dc <__aeabi_dsub+0x58>
10015d8e:	2200      	movs	r2, #0
10015d90:	2500      	movs	r5, #0
10015d92:	e544      	b.n	1001581e <__aeabi_dsub+0x9a>
10015d94:	4c23      	ldr	r4, [pc, #140]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015d96:	e521      	b.n	100157dc <__aeabi_dsub+0x58>
10015d98:	2000      	movs	r0, #0
10015d9a:	e749      	b.n	10015c30 <__aeabi_dsub+0x4ac>
10015d9c:	2300      	movs	r3, #0
10015d9e:	2500      	movs	r5, #0
10015da0:	e5bb      	b.n	1001591a <__aeabi_dsub+0x196>
10015da2:	464c      	mov	r4, r9
10015da4:	003e      	movs	r6, r7
10015da6:	3c20      	subs	r4, #32
10015da8:	40e6      	lsrs	r6, r4
10015daa:	464c      	mov	r4, r9
10015dac:	46b4      	mov	ip, r6
10015dae:	2c20      	cmp	r4, #32
10015db0:	d031      	beq.n	10015e16 <__aeabi_dsub+0x692>
10015db2:	2440      	movs	r4, #64	; 0x40
10015db4:	464e      	mov	r6, r9
10015db6:	1ba6      	subs	r6, r4, r6
10015db8:	40b7      	lsls	r7, r6
10015dba:	433d      	orrs	r5, r7
10015dbc:	1e6c      	subs	r4, r5, #1
10015dbe:	41a5      	sbcs	r5, r4
10015dc0:	4664      	mov	r4, ip
10015dc2:	432c      	orrs	r4, r5
10015dc4:	2700      	movs	r7, #0
10015dc6:	1b0d      	subs	r5, r1, r4
10015dc8:	e6e7      	b.n	10015b9a <__aeabi_dsub+0x416>
10015dca:	2280      	movs	r2, #128	; 0x80
10015dcc:	2300      	movs	r3, #0
10015dce:	0312      	lsls	r2, r2, #12
10015dd0:	4c14      	ldr	r4, [pc, #80]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015dd2:	2500      	movs	r5, #0
10015dd4:	e5a1      	b.n	1001591a <__aeabi_dsub+0x196>
10015dd6:	433d      	orrs	r5, r7
10015dd8:	1e6f      	subs	r7, r5, #1
10015dda:	41bd      	sbcs	r5, r7
10015ddc:	2700      	movs	r7, #0
10015dde:	b2ed      	uxtb	r5, r5
10015de0:	e760      	b.n	10015ca4 <__aeabi_dsub+0x520>
10015de2:	0007      	movs	r7, r0
10015de4:	000d      	movs	r5, r1
10015de6:	4c0f      	ldr	r4, [pc, #60]	; (10015e24 <__aeabi_dsub+0x6a0>)
10015de8:	e4f8      	b.n	100157dc <__aeabi_dsub+0x58>
10015dea:	0007      	movs	r7, r0
10015dec:	000d      	movs	r5, r1
10015dee:	e4f5      	b.n	100157dc <__aeabi_dsub+0x58>
10015df0:	464e      	mov	r6, r9
10015df2:	003c      	movs	r4, r7
10015df4:	3e20      	subs	r6, #32
10015df6:	40f4      	lsrs	r4, r6
10015df8:	46a0      	mov	r8, r4
10015dfa:	464c      	mov	r4, r9
10015dfc:	2c20      	cmp	r4, #32
10015dfe:	d00e      	beq.n	10015e1e <__aeabi_dsub+0x69a>
10015e00:	2440      	movs	r4, #64	; 0x40
10015e02:	464e      	mov	r6, r9
10015e04:	1ba4      	subs	r4, r4, r6
10015e06:	40a7      	lsls	r7, r4
10015e08:	433d      	orrs	r5, r7
10015e0a:	1e6f      	subs	r7, r5, #1
10015e0c:	41bd      	sbcs	r5, r7
10015e0e:	4644      	mov	r4, r8
10015e10:	2700      	movs	r7, #0
10015e12:	4325      	orrs	r5, r4
10015e14:	e746      	b.n	10015ca4 <__aeabi_dsub+0x520>
10015e16:	2700      	movs	r7, #0
10015e18:	e7cf      	b.n	10015dba <__aeabi_dsub+0x636>
10015e1a:	000d      	movs	r5, r1
10015e1c:	e573      	b.n	10015906 <__aeabi_dsub+0x182>
10015e1e:	2700      	movs	r7, #0
10015e20:	e7f2      	b.n	10015e08 <__aeabi_dsub+0x684>
10015e22:	46c0      	nop			; (mov r8, r8)
10015e24:	000007ff 	.word	0x000007ff
10015e28:	ff7fffff 	.word	0xff7fffff

10015e2c <__aeabi_dcmpun>:
10015e2c:	b570      	push	{r4, r5, r6, lr}
10015e2e:	4e0e      	ldr	r6, [pc, #56]	; (10015e68 <__aeabi_dcmpun+0x3c>)
10015e30:	030c      	lsls	r4, r1, #12
10015e32:	031d      	lsls	r5, r3, #12
10015e34:	0049      	lsls	r1, r1, #1
10015e36:	005b      	lsls	r3, r3, #1
10015e38:	0b24      	lsrs	r4, r4, #12
10015e3a:	0d49      	lsrs	r1, r1, #21
10015e3c:	0b2d      	lsrs	r5, r5, #12
10015e3e:	0d5b      	lsrs	r3, r3, #21
10015e40:	42b1      	cmp	r1, r6
10015e42:	d004      	beq.n	10015e4e <__aeabi_dcmpun+0x22>
10015e44:	4908      	ldr	r1, [pc, #32]	; (10015e68 <__aeabi_dcmpun+0x3c>)
10015e46:	2000      	movs	r0, #0
10015e48:	428b      	cmp	r3, r1
10015e4a:	d008      	beq.n	10015e5e <__aeabi_dcmpun+0x32>
10015e4c:	bd70      	pop	{r4, r5, r6, pc}
10015e4e:	4304      	orrs	r4, r0
10015e50:	2001      	movs	r0, #1
10015e52:	2c00      	cmp	r4, #0
10015e54:	d1fa      	bne.n	10015e4c <__aeabi_dcmpun+0x20>
10015e56:	4904      	ldr	r1, [pc, #16]	; (10015e68 <__aeabi_dcmpun+0x3c>)
10015e58:	2000      	movs	r0, #0
10015e5a:	428b      	cmp	r3, r1
10015e5c:	d1f6      	bne.n	10015e4c <__aeabi_dcmpun+0x20>
10015e5e:	4315      	orrs	r5, r2
10015e60:	0028      	movs	r0, r5
10015e62:	1e45      	subs	r5, r0, #1
10015e64:	41a8      	sbcs	r0, r5
10015e66:	e7f1      	b.n	10015e4c <__aeabi_dcmpun+0x20>
10015e68:	000007ff 	.word	0x000007ff

10015e6c <__aeabi_d2iz>:
10015e6c:	030b      	lsls	r3, r1, #12
10015e6e:	b530      	push	{r4, r5, lr}
10015e70:	4d13      	ldr	r5, [pc, #76]	; (10015ec0 <__aeabi_d2iz+0x54>)
10015e72:	0b1a      	lsrs	r2, r3, #12
10015e74:	004b      	lsls	r3, r1, #1
10015e76:	0d5b      	lsrs	r3, r3, #21
10015e78:	0fc9      	lsrs	r1, r1, #31
10015e7a:	2400      	movs	r4, #0
10015e7c:	42ab      	cmp	r3, r5
10015e7e:	dd11      	ble.n	10015ea4 <__aeabi_d2iz+0x38>
10015e80:	4c10      	ldr	r4, [pc, #64]	; (10015ec4 <__aeabi_d2iz+0x58>)
10015e82:	42a3      	cmp	r3, r4
10015e84:	dc10      	bgt.n	10015ea8 <__aeabi_d2iz+0x3c>
10015e86:	2480      	movs	r4, #128	; 0x80
10015e88:	0364      	lsls	r4, r4, #13
10015e8a:	4322      	orrs	r2, r4
10015e8c:	4c0e      	ldr	r4, [pc, #56]	; (10015ec8 <__aeabi_d2iz+0x5c>)
10015e8e:	1ae4      	subs	r4, r4, r3
10015e90:	2c1f      	cmp	r4, #31
10015e92:	dd0c      	ble.n	10015eae <__aeabi_d2iz+0x42>
10015e94:	480d      	ldr	r0, [pc, #52]	; (10015ecc <__aeabi_d2iz+0x60>)
10015e96:	1ac3      	subs	r3, r0, r3
10015e98:	40da      	lsrs	r2, r3
10015e9a:	0013      	movs	r3, r2
10015e9c:	425c      	negs	r4, r3
10015e9e:	2900      	cmp	r1, #0
10015ea0:	d100      	bne.n	10015ea4 <__aeabi_d2iz+0x38>
10015ea2:	001c      	movs	r4, r3
10015ea4:	0020      	movs	r0, r4
10015ea6:	bd30      	pop	{r4, r5, pc}
10015ea8:	4b09      	ldr	r3, [pc, #36]	; (10015ed0 <__aeabi_d2iz+0x64>)
10015eaa:	18cc      	adds	r4, r1, r3
10015eac:	e7fa      	b.n	10015ea4 <__aeabi_d2iz+0x38>
10015eae:	40e0      	lsrs	r0, r4
10015eb0:	4c08      	ldr	r4, [pc, #32]	; (10015ed4 <__aeabi_d2iz+0x68>)
10015eb2:	46a4      	mov	ip, r4
10015eb4:	4463      	add	r3, ip
10015eb6:	409a      	lsls	r2, r3
10015eb8:	0013      	movs	r3, r2
10015eba:	4303      	orrs	r3, r0
10015ebc:	e7ee      	b.n	10015e9c <__aeabi_d2iz+0x30>
10015ebe:	46c0      	nop			; (mov r8, r8)
10015ec0:	000003fe 	.word	0x000003fe
10015ec4:	0000041d 	.word	0x0000041d
10015ec8:	00000433 	.word	0x00000433
10015ecc:	00000413 	.word	0x00000413
10015ed0:	7fffffff 	.word	0x7fffffff
10015ed4:	fffffbed 	.word	0xfffffbed

10015ed8 <__aeabi_i2d>:
10015ed8:	b570      	push	{r4, r5, r6, lr}
10015eda:	2800      	cmp	r0, #0
10015edc:	d030      	beq.n	10015f40 <__aeabi_i2d+0x68>
10015ede:	17c3      	asrs	r3, r0, #31
10015ee0:	18c4      	adds	r4, r0, r3
10015ee2:	405c      	eors	r4, r3
10015ee4:	0fc5      	lsrs	r5, r0, #31
10015ee6:	0020      	movs	r0, r4
10015ee8:	f000 f950 	bl	1001618c <__clzsi2>
10015eec:	4b17      	ldr	r3, [pc, #92]	; (10015f4c <__aeabi_i2d+0x74>)
10015eee:	4a18      	ldr	r2, [pc, #96]	; (10015f50 <__aeabi_i2d+0x78>)
10015ef0:	1a1b      	subs	r3, r3, r0
10015ef2:	1ad2      	subs	r2, r2, r3
10015ef4:	2a1f      	cmp	r2, #31
10015ef6:	dd18      	ble.n	10015f2a <__aeabi_i2d+0x52>
10015ef8:	4a16      	ldr	r2, [pc, #88]	; (10015f54 <__aeabi_i2d+0x7c>)
10015efa:	1ad2      	subs	r2, r2, r3
10015efc:	4094      	lsls	r4, r2
10015efe:	2200      	movs	r2, #0
10015f00:	0324      	lsls	r4, r4, #12
10015f02:	055b      	lsls	r3, r3, #21
10015f04:	0b24      	lsrs	r4, r4, #12
10015f06:	0d5b      	lsrs	r3, r3, #21
10015f08:	2100      	movs	r1, #0
10015f0a:	0010      	movs	r0, r2
10015f0c:	0324      	lsls	r4, r4, #12
10015f0e:	0d0a      	lsrs	r2, r1, #20
10015f10:	0512      	lsls	r2, r2, #20
10015f12:	0b24      	lsrs	r4, r4, #12
10015f14:	4314      	orrs	r4, r2
10015f16:	4a10      	ldr	r2, [pc, #64]	; (10015f58 <__aeabi_i2d+0x80>)
10015f18:	051b      	lsls	r3, r3, #20
10015f1a:	4014      	ands	r4, r2
10015f1c:	431c      	orrs	r4, r3
10015f1e:	0064      	lsls	r4, r4, #1
10015f20:	07ed      	lsls	r5, r5, #31
10015f22:	0864      	lsrs	r4, r4, #1
10015f24:	432c      	orrs	r4, r5
10015f26:	0021      	movs	r1, r4
10015f28:	bd70      	pop	{r4, r5, r6, pc}
10015f2a:	0021      	movs	r1, r4
10015f2c:	4091      	lsls	r1, r2
10015f2e:	000a      	movs	r2, r1
10015f30:	210b      	movs	r1, #11
10015f32:	1a08      	subs	r0, r1, r0
10015f34:	40c4      	lsrs	r4, r0
10015f36:	055b      	lsls	r3, r3, #21
10015f38:	0324      	lsls	r4, r4, #12
10015f3a:	0b24      	lsrs	r4, r4, #12
10015f3c:	0d5b      	lsrs	r3, r3, #21
10015f3e:	e7e3      	b.n	10015f08 <__aeabi_i2d+0x30>
10015f40:	2500      	movs	r5, #0
10015f42:	2300      	movs	r3, #0
10015f44:	2400      	movs	r4, #0
10015f46:	2200      	movs	r2, #0
10015f48:	e7de      	b.n	10015f08 <__aeabi_i2d+0x30>
10015f4a:	46c0      	nop			; (mov r8, r8)
10015f4c:	0000041e 	.word	0x0000041e
10015f50:	00000433 	.word	0x00000433
10015f54:	00000413 	.word	0x00000413
10015f58:	800fffff 	.word	0x800fffff

10015f5c <__aeabi_ui2d>:
10015f5c:	b570      	push	{r4, r5, r6, lr}
10015f5e:	1e05      	subs	r5, r0, #0
10015f60:	d028      	beq.n	10015fb4 <__aeabi_ui2d+0x58>
10015f62:	f000 f913 	bl	1001618c <__clzsi2>
10015f66:	4b15      	ldr	r3, [pc, #84]	; (10015fbc <__aeabi_ui2d+0x60>)
10015f68:	4a15      	ldr	r2, [pc, #84]	; (10015fc0 <__aeabi_ui2d+0x64>)
10015f6a:	1a1b      	subs	r3, r3, r0
10015f6c:	1ad2      	subs	r2, r2, r3
10015f6e:	2a1f      	cmp	r2, #31
10015f70:	dd16      	ble.n	10015fa0 <__aeabi_ui2d+0x44>
10015f72:	002c      	movs	r4, r5
10015f74:	4a13      	ldr	r2, [pc, #76]	; (10015fc4 <__aeabi_ui2d+0x68>)
10015f76:	2500      	movs	r5, #0
10015f78:	1ad2      	subs	r2, r2, r3
10015f7a:	4094      	lsls	r4, r2
10015f7c:	055a      	lsls	r2, r3, #21
10015f7e:	0324      	lsls	r4, r4, #12
10015f80:	0b24      	lsrs	r4, r4, #12
10015f82:	0d52      	lsrs	r2, r2, #21
10015f84:	2100      	movs	r1, #0
10015f86:	0324      	lsls	r4, r4, #12
10015f88:	0d0b      	lsrs	r3, r1, #20
10015f8a:	0b24      	lsrs	r4, r4, #12
10015f8c:	051b      	lsls	r3, r3, #20
10015f8e:	4323      	orrs	r3, r4
10015f90:	4c0d      	ldr	r4, [pc, #52]	; (10015fc8 <__aeabi_ui2d+0x6c>)
10015f92:	0512      	lsls	r2, r2, #20
10015f94:	4023      	ands	r3, r4
10015f96:	4313      	orrs	r3, r2
10015f98:	005b      	lsls	r3, r3, #1
10015f9a:	0028      	movs	r0, r5
10015f9c:	0859      	lsrs	r1, r3, #1
10015f9e:	bd70      	pop	{r4, r5, r6, pc}
10015fa0:	210b      	movs	r1, #11
10015fa2:	002c      	movs	r4, r5
10015fa4:	1a08      	subs	r0, r1, r0
10015fa6:	40c4      	lsrs	r4, r0
10015fa8:	4095      	lsls	r5, r2
10015faa:	0324      	lsls	r4, r4, #12
10015fac:	055a      	lsls	r2, r3, #21
10015fae:	0b24      	lsrs	r4, r4, #12
10015fb0:	0d52      	lsrs	r2, r2, #21
10015fb2:	e7e7      	b.n	10015f84 <__aeabi_ui2d+0x28>
10015fb4:	2200      	movs	r2, #0
10015fb6:	2400      	movs	r4, #0
10015fb8:	e7e4      	b.n	10015f84 <__aeabi_ui2d+0x28>
10015fba:	46c0      	nop			; (mov r8, r8)
10015fbc:	0000041e 	.word	0x0000041e
10015fc0:	00000433 	.word	0x00000433
10015fc4:	00000413 	.word	0x00000413
10015fc8:	800fffff 	.word	0x800fffff

10015fcc <__aeabi_f2d>:
10015fcc:	0042      	lsls	r2, r0, #1
10015fce:	0e12      	lsrs	r2, r2, #24
10015fd0:	1c51      	adds	r1, r2, #1
10015fd2:	0243      	lsls	r3, r0, #9
10015fd4:	b2c9      	uxtb	r1, r1
10015fd6:	b570      	push	{r4, r5, r6, lr}
10015fd8:	0a5d      	lsrs	r5, r3, #9
10015fda:	0fc4      	lsrs	r4, r0, #31
10015fdc:	2901      	cmp	r1, #1
10015fde:	dd15      	ble.n	1001600c <__aeabi_f2d+0x40>
10015fe0:	21e0      	movs	r1, #224	; 0xe0
10015fe2:	0089      	lsls	r1, r1, #2
10015fe4:	468c      	mov	ip, r1
10015fe6:	076d      	lsls	r5, r5, #29
10015fe8:	0b1b      	lsrs	r3, r3, #12
10015fea:	4462      	add	r2, ip
10015fec:	2100      	movs	r1, #0
10015fee:	0028      	movs	r0, r5
10015ff0:	0d0d      	lsrs	r5, r1, #20
10015ff2:	052d      	lsls	r5, r5, #20
10015ff4:	432b      	orrs	r3, r5
10015ff6:	4d1c      	ldr	r5, [pc, #112]	; (10016068 <__aeabi_f2d+0x9c>)
10015ff8:	0552      	lsls	r2, r2, #21
10015ffa:	402b      	ands	r3, r5
10015ffc:	0852      	lsrs	r2, r2, #1
10015ffe:	4313      	orrs	r3, r2
10016000:	005b      	lsls	r3, r3, #1
10016002:	07e4      	lsls	r4, r4, #31
10016004:	085b      	lsrs	r3, r3, #1
10016006:	4323      	orrs	r3, r4
10016008:	0019      	movs	r1, r3
1001600a:	bd70      	pop	{r4, r5, r6, pc}
1001600c:	2a00      	cmp	r2, #0
1001600e:	d115      	bne.n	1001603c <__aeabi_f2d+0x70>
10016010:	2d00      	cmp	r5, #0
10016012:	d01f      	beq.n	10016054 <__aeabi_f2d+0x88>
10016014:	0028      	movs	r0, r5
10016016:	f000 f8b9 	bl	1001618c <__clzsi2>
1001601a:	280a      	cmp	r0, #10
1001601c:	dc1d      	bgt.n	1001605a <__aeabi_f2d+0x8e>
1001601e:	230b      	movs	r3, #11
10016020:	002a      	movs	r2, r5
10016022:	1a1b      	subs	r3, r3, r0
10016024:	40da      	lsrs	r2, r3
10016026:	0013      	movs	r3, r2
10016028:	0002      	movs	r2, r0
1001602a:	3215      	adds	r2, #21
1001602c:	4095      	lsls	r5, r2
1001602e:	4a0f      	ldr	r2, [pc, #60]	; (1001606c <__aeabi_f2d+0xa0>)
10016030:	031b      	lsls	r3, r3, #12
10016032:	1a12      	subs	r2, r2, r0
10016034:	0552      	lsls	r2, r2, #21
10016036:	0b1b      	lsrs	r3, r3, #12
10016038:	0d52      	lsrs	r2, r2, #21
1001603a:	e7d7      	b.n	10015fec <__aeabi_f2d+0x20>
1001603c:	2d00      	cmp	r5, #0
1001603e:	d006      	beq.n	1001604e <__aeabi_f2d+0x82>
10016040:	2280      	movs	r2, #128	; 0x80
10016042:	0b1b      	lsrs	r3, r3, #12
10016044:	0312      	lsls	r2, r2, #12
10016046:	4313      	orrs	r3, r2
10016048:	076d      	lsls	r5, r5, #29
1001604a:	4a09      	ldr	r2, [pc, #36]	; (10016070 <__aeabi_f2d+0xa4>)
1001604c:	e7ce      	b.n	10015fec <__aeabi_f2d+0x20>
1001604e:	4a08      	ldr	r2, [pc, #32]	; (10016070 <__aeabi_f2d+0xa4>)
10016050:	2300      	movs	r3, #0
10016052:	e7cb      	b.n	10015fec <__aeabi_f2d+0x20>
10016054:	2200      	movs	r2, #0
10016056:	2300      	movs	r3, #0
10016058:	e7c8      	b.n	10015fec <__aeabi_f2d+0x20>
1001605a:	0003      	movs	r3, r0
1001605c:	3b0b      	subs	r3, #11
1001605e:	409d      	lsls	r5, r3
10016060:	002b      	movs	r3, r5
10016062:	2500      	movs	r5, #0
10016064:	e7e3      	b.n	1001602e <__aeabi_f2d+0x62>
10016066:	46c0      	nop			; (mov r8, r8)
10016068:	800fffff 	.word	0x800fffff
1001606c:	00000389 	.word	0x00000389
10016070:	000007ff 	.word	0x000007ff

10016074 <__aeabi_d2f>:
10016074:	004b      	lsls	r3, r1, #1
10016076:	b570      	push	{r4, r5, r6, lr}
10016078:	0d5e      	lsrs	r6, r3, #21
1001607a:	030c      	lsls	r4, r1, #12
1001607c:	1c75      	adds	r5, r6, #1
1001607e:	0a64      	lsrs	r4, r4, #9
10016080:	0f42      	lsrs	r2, r0, #29
10016082:	056d      	lsls	r5, r5, #21
10016084:	4322      	orrs	r2, r4
10016086:	0fc9      	lsrs	r1, r1, #31
10016088:	00c4      	lsls	r4, r0, #3
1001608a:	0d6d      	lsrs	r5, r5, #21
1001608c:	2d01      	cmp	r5, #1
1001608e:	dd2a      	ble.n	100160e6 <__aeabi_d2f+0x72>
10016090:	4b3b      	ldr	r3, [pc, #236]	; (10016180 <__aeabi_d2f+0x10c>)
10016092:	18f3      	adds	r3, r6, r3
10016094:	2bfe      	cmp	r3, #254	; 0xfe
10016096:	dc1a      	bgt.n	100160ce <__aeabi_d2f+0x5a>
10016098:	2b00      	cmp	r3, #0
1001609a:	dd42      	ble.n	10016122 <__aeabi_d2f+0xae>
1001609c:	0180      	lsls	r0, r0, #6
1001609e:	1e45      	subs	r5, r0, #1
100160a0:	41a8      	sbcs	r0, r5
100160a2:	00d2      	lsls	r2, r2, #3
100160a4:	4310      	orrs	r0, r2
100160a6:	0f62      	lsrs	r2, r4, #29
100160a8:	4302      	orrs	r2, r0
100160aa:	0750      	lsls	r0, r2, #29
100160ac:	d004      	beq.n	100160b8 <__aeabi_d2f+0x44>
100160ae:	200f      	movs	r0, #15
100160b0:	4010      	ands	r0, r2
100160b2:	2804      	cmp	r0, #4
100160b4:	d000      	beq.n	100160b8 <__aeabi_d2f+0x44>
100160b6:	3204      	adds	r2, #4
100160b8:	2080      	movs	r0, #128	; 0x80
100160ba:	04c0      	lsls	r0, r0, #19
100160bc:	4010      	ands	r0, r2
100160be:	d021      	beq.n	10016104 <__aeabi_d2f+0x90>
100160c0:	3301      	adds	r3, #1
100160c2:	2bff      	cmp	r3, #255	; 0xff
100160c4:	d003      	beq.n	100160ce <__aeabi_d2f+0x5a>
100160c6:	0192      	lsls	r2, r2, #6
100160c8:	0a52      	lsrs	r2, r2, #9
100160ca:	b2db      	uxtb	r3, r3
100160cc:	e001      	b.n	100160d2 <__aeabi_d2f+0x5e>
100160ce:	23ff      	movs	r3, #255	; 0xff
100160d0:	2200      	movs	r2, #0
100160d2:	0252      	lsls	r2, r2, #9
100160d4:	0a52      	lsrs	r2, r2, #9
100160d6:	05db      	lsls	r3, r3, #23
100160d8:	4313      	orrs	r3, r2
100160da:	005b      	lsls	r3, r3, #1
100160dc:	07c9      	lsls	r1, r1, #31
100160de:	085b      	lsrs	r3, r3, #1
100160e0:	430b      	orrs	r3, r1
100160e2:	0018      	movs	r0, r3
100160e4:	bd70      	pop	{r4, r5, r6, pc}
100160e6:	2e00      	cmp	r6, #0
100160e8:	d007      	beq.n	100160fa <__aeabi_d2f+0x86>
100160ea:	4314      	orrs	r4, r2
100160ec:	d0ef      	beq.n	100160ce <__aeabi_d2f+0x5a>
100160ee:	2080      	movs	r0, #128	; 0x80
100160f0:	00d2      	lsls	r2, r2, #3
100160f2:	0480      	lsls	r0, r0, #18
100160f4:	4302      	orrs	r2, r0
100160f6:	23ff      	movs	r3, #255	; 0xff
100160f8:	e7d7      	b.n	100160aa <__aeabi_d2f+0x36>
100160fa:	4322      	orrs	r2, r4
100160fc:	2300      	movs	r3, #0
100160fe:	2a00      	cmp	r2, #0
10016100:	d003      	beq.n	1001610a <__aeabi_d2f+0x96>
10016102:	2205      	movs	r2, #5
10016104:	08d2      	lsrs	r2, r2, #3
10016106:	2bff      	cmp	r3, #255	; 0xff
10016108:	d003      	beq.n	10016112 <__aeabi_d2f+0x9e>
1001610a:	0252      	lsls	r2, r2, #9
1001610c:	0a52      	lsrs	r2, r2, #9
1001610e:	b2db      	uxtb	r3, r3
10016110:	e7df      	b.n	100160d2 <__aeabi_d2f+0x5e>
10016112:	2a00      	cmp	r2, #0
10016114:	d032      	beq.n	1001617c <__aeabi_d2f+0x108>
10016116:	2080      	movs	r0, #128	; 0x80
10016118:	03c0      	lsls	r0, r0, #15
1001611a:	4302      	orrs	r2, r0
1001611c:	0252      	lsls	r2, r2, #9
1001611e:	0a52      	lsrs	r2, r2, #9
10016120:	e7d7      	b.n	100160d2 <__aeabi_d2f+0x5e>
10016122:	0018      	movs	r0, r3
10016124:	3017      	adds	r0, #23
10016126:	db14      	blt.n	10016152 <__aeabi_d2f+0xde>
10016128:	2080      	movs	r0, #128	; 0x80
1001612a:	0400      	lsls	r0, r0, #16
1001612c:	4302      	orrs	r2, r0
1001612e:	201e      	movs	r0, #30
10016130:	1ac0      	subs	r0, r0, r3
10016132:	281f      	cmp	r0, #31
10016134:	dc0f      	bgt.n	10016156 <__aeabi_d2f+0xe2>
10016136:	0025      	movs	r5, r4
10016138:	4b12      	ldr	r3, [pc, #72]	; (10016184 <__aeabi_d2f+0x110>)
1001613a:	18f3      	adds	r3, r6, r3
1001613c:	409d      	lsls	r5, r3
1001613e:	1e6e      	subs	r6, r5, #1
10016140:	41b5      	sbcs	r5, r6
10016142:	409a      	lsls	r2, r3
10016144:	002b      	movs	r3, r5
10016146:	4313      	orrs	r3, r2
10016148:	0022      	movs	r2, r4
1001614a:	40c2      	lsrs	r2, r0
1001614c:	431a      	orrs	r2, r3
1001614e:	2300      	movs	r3, #0
10016150:	e7ab      	b.n	100160aa <__aeabi_d2f+0x36>
10016152:	2300      	movs	r3, #0
10016154:	e7d5      	b.n	10016102 <__aeabi_d2f+0x8e>
10016156:	2502      	movs	r5, #2
10016158:	426d      	negs	r5, r5
1001615a:	1aeb      	subs	r3, r5, r3
1001615c:	0015      	movs	r5, r2
1001615e:	40dd      	lsrs	r5, r3
10016160:	2820      	cmp	r0, #32
10016162:	d009      	beq.n	10016178 <__aeabi_d2f+0x104>
10016164:	4b08      	ldr	r3, [pc, #32]	; (10016188 <__aeabi_d2f+0x114>)
10016166:	18f3      	adds	r3, r6, r3
10016168:	409a      	lsls	r2, r3
1001616a:	4314      	orrs	r4, r2
1001616c:	1e62      	subs	r2, r4, #1
1001616e:	4194      	sbcs	r4, r2
10016170:	0022      	movs	r2, r4
10016172:	2300      	movs	r3, #0
10016174:	432a      	orrs	r2, r5
10016176:	e798      	b.n	100160aa <__aeabi_d2f+0x36>
10016178:	2200      	movs	r2, #0
1001617a:	e7f6      	b.n	1001616a <__aeabi_d2f+0xf6>
1001617c:	2200      	movs	r2, #0
1001617e:	e7a8      	b.n	100160d2 <__aeabi_d2f+0x5e>
10016180:	fffffc80 	.word	0xfffffc80
10016184:	fffffc82 	.word	0xfffffc82
10016188:	fffffca2 	.word	0xfffffca2

1001618c <__clzsi2>:
1001618c:	211c      	movs	r1, #28
1001618e:	2301      	movs	r3, #1
10016190:	041b      	lsls	r3, r3, #16
10016192:	4298      	cmp	r0, r3
10016194:	d301      	bcc.n	1001619a <__clzsi2+0xe>
10016196:	0c00      	lsrs	r0, r0, #16
10016198:	3910      	subs	r1, #16
1001619a:	0a1b      	lsrs	r3, r3, #8
1001619c:	4298      	cmp	r0, r3
1001619e:	d301      	bcc.n	100161a4 <__clzsi2+0x18>
100161a0:	0a00      	lsrs	r0, r0, #8
100161a2:	3908      	subs	r1, #8
100161a4:	091b      	lsrs	r3, r3, #4
100161a6:	4298      	cmp	r0, r3
100161a8:	d301      	bcc.n	100161ae <__clzsi2+0x22>
100161aa:	0900      	lsrs	r0, r0, #4
100161ac:	3904      	subs	r1, #4
100161ae:	a202      	add	r2, pc, #8	; (adr r2, 100161b8 <__clzsi2+0x2c>)
100161b0:	5c10      	ldrb	r0, [r2, r0]
100161b2:	1840      	adds	r0, r0, r1
100161b4:	4770      	bx	lr
100161b6:	46c0      	nop			; (mov r8, r8)
100161b8:	02020304 	.word	0x02020304
100161bc:	01010101 	.word	0x01010101
	...

100161c8 <__errno>:
100161c8:	4b01      	ldr	r3, [pc, #4]	; (100161d0 <__errno+0x8>)
100161ca:	6818      	ldr	r0, [r3, #0]
100161cc:	4770      	bx	lr
100161ce:	46c0      	nop			; (mov r8, r8)
100161d0:	10018600 	.word	0x10018600

100161d4 <__libc_init_array>:
100161d4:	4b0e      	ldr	r3, [pc, #56]	; (10016210 <__libc_init_array+0x3c>)
100161d6:	b570      	push	{r4, r5, r6, lr}
100161d8:	2500      	movs	r5, #0
100161da:	001e      	movs	r6, r3
100161dc:	4c0d      	ldr	r4, [pc, #52]	; (10016214 <__libc_init_array+0x40>)
100161de:	1ae4      	subs	r4, r4, r3
100161e0:	10a4      	asrs	r4, r4, #2
100161e2:	42a5      	cmp	r5, r4
100161e4:	d004      	beq.n	100161f0 <__libc_init_array+0x1c>
100161e6:	00ab      	lsls	r3, r5, #2
100161e8:	58f3      	ldr	r3, [r6, r3]
100161ea:	4798      	blx	r3
100161ec:	3501      	adds	r5, #1
100161ee:	e7f8      	b.n	100161e2 <__libc_init_array+0xe>
100161f0:	f002 f9c0 	bl	10018574 <_init>
100161f4:	4b08      	ldr	r3, [pc, #32]	; (10016218 <__libc_init_array+0x44>)
100161f6:	2500      	movs	r5, #0
100161f8:	001e      	movs	r6, r3
100161fa:	4c08      	ldr	r4, [pc, #32]	; (1001621c <__libc_init_array+0x48>)
100161fc:	1ae4      	subs	r4, r4, r3
100161fe:	10a4      	asrs	r4, r4, #2
10016200:	42a5      	cmp	r5, r4
10016202:	d004      	beq.n	1001620e <__libc_init_array+0x3a>
10016204:	00ab      	lsls	r3, r5, #2
10016206:	58f3      	ldr	r3, [r6, r3]
10016208:	4798      	blx	r3
1001620a:	3501      	adds	r5, #1
1001620c:	e7f8      	b.n	10016200 <__libc_init_array+0x2c>
1001620e:	bd70      	pop	{r4, r5, r6, pc}
10016210:	10018580 	.word	0x10018580
10016214:	10018580 	.word	0x10018580
10016218:	10018580 	.word	0x10018580
1001621c:	10018584 	.word	0x10018584

10016220 <malloc>:
10016220:	b510      	push	{r4, lr}
10016222:	4b03      	ldr	r3, [pc, #12]	; (10016230 <malloc+0x10>)
10016224:	0001      	movs	r1, r0
10016226:	6818      	ldr	r0, [r3, #0]
10016228:	f000 f86a 	bl	10016300 <_malloc_r>
1001622c:	bd10      	pop	{r4, pc}
1001622e:	46c0      	nop			; (mov r8, r8)
10016230:	10018600 	.word	0x10018600

10016234 <memcmp>:
10016234:	b530      	push	{r4, r5, lr}
10016236:	2400      	movs	r4, #0
10016238:	42a2      	cmp	r2, r4
1001623a:	d008      	beq.n	1001624e <memcmp+0x1a>
1001623c:	5d03      	ldrb	r3, [r0, r4]
1001623e:	1c65      	adds	r5, r4, #1
10016240:	5d0c      	ldrb	r4, [r1, r4]
10016242:	42a3      	cmp	r3, r4
10016244:	d001      	beq.n	1001624a <memcmp+0x16>
10016246:	1b18      	subs	r0, r3, r4
10016248:	e002      	b.n	10016250 <memcmp+0x1c>
1001624a:	002c      	movs	r4, r5
1001624c:	e7f4      	b.n	10016238 <memcmp+0x4>
1001624e:	2000      	movs	r0, #0
10016250:	bd30      	pop	{r4, r5, pc}

10016252 <memcpy>:
10016252:	2300      	movs	r3, #0
10016254:	b510      	push	{r4, lr}
10016256:	429a      	cmp	r2, r3
10016258:	d003      	beq.n	10016262 <memcpy+0x10>
1001625a:	5ccc      	ldrb	r4, [r1, r3]
1001625c:	54c4      	strb	r4, [r0, r3]
1001625e:	3301      	adds	r3, #1
10016260:	e7f9      	b.n	10016256 <memcpy+0x4>
10016262:	bd10      	pop	{r4, pc}

10016264 <memset>:
10016264:	0003      	movs	r3, r0
10016266:	1882      	adds	r2, r0, r2
10016268:	4293      	cmp	r3, r2
1001626a:	d002      	beq.n	10016272 <memset+0xe>
1001626c:	7019      	strb	r1, [r3, #0]
1001626e:	3301      	adds	r3, #1
10016270:	e7fa      	b.n	10016268 <memset+0x4>
10016272:	4770      	bx	lr

10016274 <_free_r>:
10016274:	b530      	push	{r4, r5, lr}
10016276:	2900      	cmp	r1, #0
10016278:	d03e      	beq.n	100162f8 <_free_r+0x84>
1001627a:	3904      	subs	r1, #4
1001627c:	680b      	ldr	r3, [r1, #0]
1001627e:	2b00      	cmp	r3, #0
10016280:	da00      	bge.n	10016284 <_free_r+0x10>
10016282:	18c9      	adds	r1, r1, r3
10016284:	4a1d      	ldr	r2, [pc, #116]	; (100162fc <_free_r+0x88>)
10016286:	6813      	ldr	r3, [r2, #0]
10016288:	0014      	movs	r4, r2
1001628a:	2b00      	cmp	r3, #0
1001628c:	d102      	bne.n	10016294 <_free_r+0x20>
1001628e:	604b      	str	r3, [r1, #4]
10016290:	6011      	str	r1, [r2, #0]
10016292:	e031      	b.n	100162f8 <_free_r+0x84>
10016294:	428b      	cmp	r3, r1
10016296:	d90d      	bls.n	100162b4 <_free_r+0x40>
10016298:	680a      	ldr	r2, [r1, #0]
1001629a:	1888      	adds	r0, r1, r2
1001629c:	4283      	cmp	r3, r0
1001629e:	d103      	bne.n	100162a8 <_free_r+0x34>
100162a0:	6818      	ldr	r0, [r3, #0]
100162a2:	685b      	ldr	r3, [r3, #4]
100162a4:	1882      	adds	r2, r0, r2
100162a6:	600a      	str	r2, [r1, #0]
100162a8:	604b      	str	r3, [r1, #4]
100162aa:	6021      	str	r1, [r4, #0]
100162ac:	e024      	b.n	100162f8 <_free_r+0x84>
100162ae:	428a      	cmp	r2, r1
100162b0:	d803      	bhi.n	100162ba <_free_r+0x46>
100162b2:	0013      	movs	r3, r2
100162b4:	685a      	ldr	r2, [r3, #4]
100162b6:	2a00      	cmp	r2, #0
100162b8:	d1f9      	bne.n	100162ae <_free_r+0x3a>
100162ba:	681d      	ldr	r5, [r3, #0]
100162bc:	195c      	adds	r4, r3, r5
100162be:	428c      	cmp	r4, r1
100162c0:	d10b      	bne.n	100162da <_free_r+0x66>
100162c2:	6809      	ldr	r1, [r1, #0]
100162c4:	1869      	adds	r1, r5, r1
100162c6:	1858      	adds	r0, r3, r1
100162c8:	6019      	str	r1, [r3, #0]
100162ca:	4282      	cmp	r2, r0
100162cc:	d114      	bne.n	100162f8 <_free_r+0x84>
100162ce:	6810      	ldr	r0, [r2, #0]
100162d0:	6852      	ldr	r2, [r2, #4]
100162d2:	1841      	adds	r1, r0, r1
100162d4:	6019      	str	r1, [r3, #0]
100162d6:	605a      	str	r2, [r3, #4]
100162d8:	e00e      	b.n	100162f8 <_free_r+0x84>
100162da:	428c      	cmp	r4, r1
100162dc:	d902      	bls.n	100162e4 <_free_r+0x70>
100162de:	230c      	movs	r3, #12
100162e0:	6003      	str	r3, [r0, #0]
100162e2:	e009      	b.n	100162f8 <_free_r+0x84>
100162e4:	6808      	ldr	r0, [r1, #0]
100162e6:	180c      	adds	r4, r1, r0
100162e8:	42a2      	cmp	r2, r4
100162ea:	d103      	bne.n	100162f4 <_free_r+0x80>
100162ec:	6814      	ldr	r4, [r2, #0]
100162ee:	6852      	ldr	r2, [r2, #4]
100162f0:	1820      	adds	r0, r4, r0
100162f2:	6008      	str	r0, [r1, #0]
100162f4:	604a      	str	r2, [r1, #4]
100162f6:	6059      	str	r1, [r3, #4]
100162f8:	bd30      	pop	{r4, r5, pc}
100162fa:	46c0      	nop			; (mov r8, r8)
100162fc:	1001a0c8 	.word	0x1001a0c8

10016300 <_malloc_r>:
10016300:	2303      	movs	r3, #3
10016302:	b570      	push	{r4, r5, r6, lr}
10016304:	1ccd      	adds	r5, r1, #3
10016306:	439d      	bics	r5, r3
10016308:	3508      	adds	r5, #8
1001630a:	0006      	movs	r6, r0
1001630c:	2d0c      	cmp	r5, #12
1001630e:	d201      	bcs.n	10016314 <_malloc_r+0x14>
10016310:	250c      	movs	r5, #12
10016312:	e005      	b.n	10016320 <_malloc_r+0x20>
10016314:	2d00      	cmp	r5, #0
10016316:	da03      	bge.n	10016320 <_malloc_r+0x20>
10016318:	230c      	movs	r3, #12
1001631a:	2000      	movs	r0, #0
1001631c:	6033      	str	r3, [r6, #0]
1001631e:	e040      	b.n	100163a2 <_malloc_r+0xa2>
10016320:	42a9      	cmp	r1, r5
10016322:	d8f9      	bhi.n	10016318 <_malloc_r+0x18>
10016324:	4b1f      	ldr	r3, [pc, #124]	; (100163a4 <_malloc_r+0xa4>)
10016326:	681c      	ldr	r4, [r3, #0]
10016328:	001a      	movs	r2, r3
1001632a:	0021      	movs	r1, r4
1001632c:	2900      	cmp	r1, #0
1001632e:	d013      	beq.n	10016358 <_malloc_r+0x58>
10016330:	680b      	ldr	r3, [r1, #0]
10016332:	1b5b      	subs	r3, r3, r5
10016334:	d40d      	bmi.n	10016352 <_malloc_r+0x52>
10016336:	2b0b      	cmp	r3, #11
10016338:	d902      	bls.n	10016340 <_malloc_r+0x40>
1001633a:	600b      	str	r3, [r1, #0]
1001633c:	18cc      	adds	r4, r1, r3
1001633e:	e01e      	b.n	1001637e <_malloc_r+0x7e>
10016340:	428c      	cmp	r4, r1
10016342:	d102      	bne.n	1001634a <_malloc_r+0x4a>
10016344:	6863      	ldr	r3, [r4, #4]
10016346:	6013      	str	r3, [r2, #0]
10016348:	e01a      	b.n	10016380 <_malloc_r+0x80>
1001634a:	684b      	ldr	r3, [r1, #4]
1001634c:	6063      	str	r3, [r4, #4]
1001634e:	000c      	movs	r4, r1
10016350:	e016      	b.n	10016380 <_malloc_r+0x80>
10016352:	000c      	movs	r4, r1
10016354:	6849      	ldr	r1, [r1, #4]
10016356:	e7e9      	b.n	1001632c <_malloc_r+0x2c>
10016358:	4c13      	ldr	r4, [pc, #76]	; (100163a8 <_malloc_r+0xa8>)
1001635a:	6823      	ldr	r3, [r4, #0]
1001635c:	2b00      	cmp	r3, #0
1001635e:	d103      	bne.n	10016368 <_malloc_r+0x68>
10016360:	0030      	movs	r0, r6
10016362:	f000 f8f9 	bl	10016558 <_sbrk_r>
10016366:	6020      	str	r0, [r4, #0]
10016368:	0029      	movs	r1, r5
1001636a:	0030      	movs	r0, r6
1001636c:	f000 f8f4 	bl	10016558 <_sbrk_r>
10016370:	1c43      	adds	r3, r0, #1
10016372:	d0d1      	beq.n	10016318 <_malloc_r+0x18>
10016374:	2303      	movs	r3, #3
10016376:	1cc4      	adds	r4, r0, #3
10016378:	439c      	bics	r4, r3
1001637a:	42a0      	cmp	r0, r4
1001637c:	d10a      	bne.n	10016394 <_malloc_r+0x94>
1001637e:	6025      	str	r5, [r4, #0]
10016380:	0020      	movs	r0, r4
10016382:	2207      	movs	r2, #7
10016384:	300b      	adds	r0, #11
10016386:	1d23      	adds	r3, r4, #4
10016388:	4390      	bics	r0, r2
1001638a:	1ac3      	subs	r3, r0, r3
1001638c:	d009      	beq.n	100163a2 <_malloc_r+0xa2>
1001638e:	425a      	negs	r2, r3
10016390:	50e2      	str	r2, [r4, r3]
10016392:	e006      	b.n	100163a2 <_malloc_r+0xa2>
10016394:	1a21      	subs	r1, r4, r0
10016396:	0030      	movs	r0, r6
10016398:	f000 f8de 	bl	10016558 <_sbrk_r>
1001639c:	1c43      	adds	r3, r0, #1
1001639e:	d1ee      	bne.n	1001637e <_malloc_r+0x7e>
100163a0:	e7ba      	b.n	10016318 <_malloc_r+0x18>
100163a2:	bd70      	pop	{r4, r5, r6, pc}
100163a4:	1001a0c8 	.word	0x1001a0c8
100163a8:	1001a0c4 	.word	0x1001a0c4

100163ac <iprintf>:
100163ac:	b40f      	push	{r0, r1, r2, r3}
100163ae:	4b0b      	ldr	r3, [pc, #44]	; (100163dc <iprintf+0x30>)
100163b0:	b513      	push	{r0, r1, r4, lr}
100163b2:	681c      	ldr	r4, [r3, #0]
100163b4:	2c00      	cmp	r4, #0
100163b6:	d005      	beq.n	100163c4 <iprintf+0x18>
100163b8:	69a3      	ldr	r3, [r4, #24]
100163ba:	2b00      	cmp	r3, #0
100163bc:	d102      	bne.n	100163c4 <iprintf+0x18>
100163be:	0020      	movs	r0, r4
100163c0:	f000 fb58 	bl	10016a74 <__sinit>
100163c4:	ab05      	add	r3, sp, #20
100163c6:	9a04      	ldr	r2, [sp, #16]
100163c8:	68a1      	ldr	r1, [r4, #8]
100163ca:	0020      	movs	r0, r4
100163cc:	9301      	str	r3, [sp, #4]
100163ce:	f000 fc71 	bl	10016cb4 <_vfiprintf_r>
100163d2:	bc16      	pop	{r1, r2, r4}
100163d4:	bc08      	pop	{r3}
100163d6:	b004      	add	sp, #16
100163d8:	4718      	bx	r3
100163da:	46c0      	nop			; (mov r8, r8)
100163dc:	10018600 	.word	0x10018600

100163e0 <putchar>:
100163e0:	4b08      	ldr	r3, [pc, #32]	; (10016404 <putchar+0x24>)
100163e2:	b570      	push	{r4, r5, r6, lr}
100163e4:	681c      	ldr	r4, [r3, #0]
100163e6:	0005      	movs	r5, r0
100163e8:	2c00      	cmp	r4, #0
100163ea:	d005      	beq.n	100163f8 <putchar+0x18>
100163ec:	69a3      	ldr	r3, [r4, #24]
100163ee:	2b00      	cmp	r3, #0
100163f0:	d102      	bne.n	100163f8 <putchar+0x18>
100163f2:	0020      	movs	r0, r4
100163f4:	f000 fb3e 	bl	10016a74 <__sinit>
100163f8:	0029      	movs	r1, r5
100163fa:	68a2      	ldr	r2, [r4, #8]
100163fc:	0020      	movs	r0, r4
100163fe:	f000 ff05 	bl	1001720c <_putc_r>
10016402:	bd70      	pop	{r4, r5, r6, pc}
10016404:	10018600 	.word	0x10018600

10016408 <_puts_r>:
10016408:	b570      	push	{r4, r5, r6, lr}
1001640a:	0005      	movs	r5, r0
1001640c:	000e      	movs	r6, r1
1001640e:	2800      	cmp	r0, #0
10016410:	d004      	beq.n	1001641c <_puts_r+0x14>
10016412:	6983      	ldr	r3, [r0, #24]
10016414:	2b00      	cmp	r3, #0
10016416:	d101      	bne.n	1001641c <_puts_r+0x14>
10016418:	f000 fb2c 	bl	10016a74 <__sinit>
1001641c:	69ab      	ldr	r3, [r5, #24]
1001641e:	68ac      	ldr	r4, [r5, #8]
10016420:	2b00      	cmp	r3, #0
10016422:	d102      	bne.n	1001642a <_puts_r+0x22>
10016424:	0028      	movs	r0, r5
10016426:	f000 fb25 	bl	10016a74 <__sinit>
1001642a:	4b25      	ldr	r3, [pc, #148]	; (100164c0 <_puts_r+0xb8>)
1001642c:	429c      	cmp	r4, r3
1001642e:	d101      	bne.n	10016434 <_puts_r+0x2c>
10016430:	686c      	ldr	r4, [r5, #4]
10016432:	e008      	b.n	10016446 <_puts_r+0x3e>
10016434:	4b23      	ldr	r3, [pc, #140]	; (100164c4 <_puts_r+0xbc>)
10016436:	429c      	cmp	r4, r3
10016438:	d101      	bne.n	1001643e <_puts_r+0x36>
1001643a:	68ac      	ldr	r4, [r5, #8]
1001643c:	e003      	b.n	10016446 <_puts_r+0x3e>
1001643e:	4b22      	ldr	r3, [pc, #136]	; (100164c8 <_puts_r+0xc0>)
10016440:	429c      	cmp	r4, r3
10016442:	d100      	bne.n	10016446 <_puts_r+0x3e>
10016444:	68ec      	ldr	r4, [r5, #12]
10016446:	89a3      	ldrh	r3, [r4, #12]
10016448:	071b      	lsls	r3, r3, #28
1001644a:	d502      	bpl.n	10016452 <_puts_r+0x4a>
1001644c:	6923      	ldr	r3, [r4, #16]
1001644e:	2b00      	cmp	r3, #0
10016450:	d111      	bne.n	10016476 <_puts_r+0x6e>
10016452:	0021      	movs	r1, r4
10016454:	0028      	movs	r0, r5
10016456:	f000 f9a3 	bl	100167a0 <__swsetup_r>
1001645a:	2800      	cmp	r0, #0
1001645c:	d00b      	beq.n	10016476 <_puts_r+0x6e>
1001645e:	2001      	movs	r0, #1
10016460:	4240      	negs	r0, r0
10016462:	e02b      	b.n	100164bc <_puts_r+0xb4>
10016464:	3b01      	subs	r3, #1
10016466:	3601      	adds	r6, #1
10016468:	60a3      	str	r3, [r4, #8]
1001646a:	2b00      	cmp	r3, #0
1001646c:	db08      	blt.n	10016480 <_puts_r+0x78>
1001646e:	6823      	ldr	r3, [r4, #0]
10016470:	1c5a      	adds	r2, r3, #1
10016472:	6022      	str	r2, [r4, #0]
10016474:	7019      	strb	r1, [r3, #0]
10016476:	7831      	ldrb	r1, [r6, #0]
10016478:	68a3      	ldr	r3, [r4, #8]
1001647a:	2900      	cmp	r1, #0
1001647c:	d1f2      	bne.n	10016464 <_puts_r+0x5c>
1001647e:	e00b      	b.n	10016498 <_puts_r+0x90>
10016480:	69a2      	ldr	r2, [r4, #24]
10016482:	4293      	cmp	r3, r2
10016484:	db01      	blt.n	1001648a <_puts_r+0x82>
10016486:	290a      	cmp	r1, #10
10016488:	d1f1      	bne.n	1001646e <_puts_r+0x66>
1001648a:	0022      	movs	r2, r4
1001648c:	0028      	movs	r0, r5
1001648e:	f000 f92f 	bl	100166f0 <__swbuf_r>
10016492:	1c43      	adds	r3, r0, #1
10016494:	d1ef      	bne.n	10016476 <_puts_r+0x6e>
10016496:	e7e2      	b.n	1001645e <_puts_r+0x56>
10016498:	3b01      	subs	r3, #1
1001649a:	60a3      	str	r3, [r4, #8]
1001649c:	2b00      	cmp	r3, #0
1001649e:	da08      	bge.n	100164b2 <_puts_r+0xaa>
100164a0:	0022      	movs	r2, r4
100164a2:	310a      	adds	r1, #10
100164a4:	0028      	movs	r0, r5
100164a6:	f000 f923 	bl	100166f0 <__swbuf_r>
100164aa:	1c43      	adds	r3, r0, #1
100164ac:	d0d7      	beq.n	1001645e <_puts_r+0x56>
100164ae:	200a      	movs	r0, #10
100164b0:	e004      	b.n	100164bc <_puts_r+0xb4>
100164b2:	200a      	movs	r0, #10
100164b4:	6823      	ldr	r3, [r4, #0]
100164b6:	1c5a      	adds	r2, r3, #1
100164b8:	6022      	str	r2, [r4, #0]
100164ba:	7018      	strb	r0, [r3, #0]
100164bc:	bd70      	pop	{r4, r5, r6, pc}
100164be:	46c0      	nop			; (mov r8, r8)
100164c0:	100184e0 	.word	0x100184e0
100164c4:	10018500 	.word	0x10018500
100164c8:	10018520 	.word	0x10018520

100164cc <puts>:
100164cc:	b510      	push	{r4, lr}
100164ce:	4b03      	ldr	r3, [pc, #12]	; (100164dc <puts+0x10>)
100164d0:	0001      	movs	r1, r0
100164d2:	6818      	ldr	r0, [r3, #0]
100164d4:	f7ff ff98 	bl	10016408 <_puts_r>
100164d8:	bd10      	pop	{r4, pc}
100164da:	46c0      	nop			; (mov r8, r8)
100164dc:	10018600 	.word	0x10018600

100164e0 <rand>:
100164e0:	4b15      	ldr	r3, [pc, #84]	; (10016538 <rand+0x58>)
100164e2:	b510      	push	{r4, lr}
100164e4:	681c      	ldr	r4, [r3, #0]
100164e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100164e8:	2b00      	cmp	r3, #0
100164ea:	d115      	bne.n	10016518 <rand+0x38>
100164ec:	2018      	movs	r0, #24
100164ee:	f7ff fe97 	bl	10016220 <malloc>
100164f2:	4b12      	ldr	r3, [pc, #72]	; (1001653c <rand+0x5c>)
100164f4:	63a0      	str	r0, [r4, #56]	; 0x38
100164f6:	8003      	strh	r3, [r0, #0]
100164f8:	4b11      	ldr	r3, [pc, #68]	; (10016540 <rand+0x60>)
100164fa:	2201      	movs	r2, #1
100164fc:	8043      	strh	r3, [r0, #2]
100164fe:	4b11      	ldr	r3, [pc, #68]	; (10016544 <rand+0x64>)
10016500:	8083      	strh	r3, [r0, #4]
10016502:	4b11      	ldr	r3, [pc, #68]	; (10016548 <rand+0x68>)
10016504:	80c3      	strh	r3, [r0, #6]
10016506:	4b11      	ldr	r3, [pc, #68]	; (1001654c <rand+0x6c>)
10016508:	8103      	strh	r3, [r0, #8]
1001650a:	2305      	movs	r3, #5
1001650c:	8143      	strh	r3, [r0, #10]
1001650e:	3306      	adds	r3, #6
10016510:	8183      	strh	r3, [r0, #12]
10016512:	2300      	movs	r3, #0
10016514:	6102      	str	r2, [r0, #16]
10016516:	6143      	str	r3, [r0, #20]
10016518:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001651a:	4a0d      	ldr	r2, [pc, #52]	; (10016550 <rand+0x70>)
1001651c:	6920      	ldr	r0, [r4, #16]
1001651e:	6961      	ldr	r1, [r4, #20]
10016520:	4b0c      	ldr	r3, [pc, #48]	; (10016554 <rand+0x74>)
10016522:	f7fd f869 	bl	100135f8 <__aeabi_lmul>
10016526:	2201      	movs	r2, #1
10016528:	2300      	movs	r3, #0
1001652a:	1880      	adds	r0, r0, r2
1001652c:	4159      	adcs	r1, r3
1001652e:	6120      	str	r0, [r4, #16]
10016530:	6161      	str	r1, [r4, #20]
10016532:	0048      	lsls	r0, r1, #1
10016534:	0840      	lsrs	r0, r0, #1
10016536:	bd10      	pop	{r4, pc}
10016538:	10018600 	.word	0x10018600
1001653c:	0000330e 	.word	0x0000330e
10016540:	ffffabcd 	.word	0xffffabcd
10016544:	00001234 	.word	0x00001234
10016548:	ffffe66d 	.word	0xffffe66d
1001654c:	ffffdeec 	.word	0xffffdeec
10016550:	4c957f2d 	.word	0x4c957f2d
10016554:	5851f42d 	.word	0x5851f42d

10016558 <_sbrk_r>:
10016558:	2300      	movs	r3, #0
1001655a:	b570      	push	{r4, r5, r6, lr}
1001655c:	4c06      	ldr	r4, [pc, #24]	; (10016578 <_sbrk_r+0x20>)
1001655e:	0005      	movs	r5, r0
10016560:	0008      	movs	r0, r1
10016562:	6023      	str	r3, [r4, #0]
10016564:	f7f1 ff4a 	bl	100083fc <_sbrk>
10016568:	1c43      	adds	r3, r0, #1
1001656a:	d103      	bne.n	10016574 <_sbrk_r+0x1c>
1001656c:	6823      	ldr	r3, [r4, #0]
1001656e:	2b00      	cmp	r3, #0
10016570:	d000      	beq.n	10016574 <_sbrk_r+0x1c>
10016572:	602b      	str	r3, [r5, #0]
10016574:	bd70      	pop	{r4, r5, r6, pc}
10016576:	46c0      	nop			; (mov r8, r8)
10016578:	1001b4f8 	.word	0x1001b4f8

1001657c <setbuf>:
1001657c:	424a      	negs	r2, r1
1001657e:	414a      	adcs	r2, r1
10016580:	2380      	movs	r3, #128	; 0x80
10016582:	b510      	push	{r4, lr}
10016584:	0052      	lsls	r2, r2, #1
10016586:	00db      	lsls	r3, r3, #3
10016588:	f000 f802 	bl	10016590 <setvbuf>
1001658c:	bd10      	pop	{r4, pc}
	...

10016590 <setvbuf>:
10016590:	b5f0      	push	{r4, r5, r6, r7, lr}
10016592:	001d      	movs	r5, r3
10016594:	4b51      	ldr	r3, [pc, #324]	; (100166dc <setvbuf+0x14c>)
10016596:	b085      	sub	sp, #20
10016598:	681e      	ldr	r6, [r3, #0]
1001659a:	0004      	movs	r4, r0
1001659c:	000f      	movs	r7, r1
1001659e:	9200      	str	r2, [sp, #0]
100165a0:	2e00      	cmp	r6, #0
100165a2:	d005      	beq.n	100165b0 <setvbuf+0x20>
100165a4:	69b3      	ldr	r3, [r6, #24]
100165a6:	2b00      	cmp	r3, #0
100165a8:	d102      	bne.n	100165b0 <setvbuf+0x20>
100165aa:	0030      	movs	r0, r6
100165ac:	f000 fa62 	bl	10016a74 <__sinit>
100165b0:	4b4b      	ldr	r3, [pc, #300]	; (100166e0 <setvbuf+0x150>)
100165b2:	429c      	cmp	r4, r3
100165b4:	d101      	bne.n	100165ba <setvbuf+0x2a>
100165b6:	6874      	ldr	r4, [r6, #4]
100165b8:	e008      	b.n	100165cc <setvbuf+0x3c>
100165ba:	4b4a      	ldr	r3, [pc, #296]	; (100166e4 <setvbuf+0x154>)
100165bc:	429c      	cmp	r4, r3
100165be:	d101      	bne.n	100165c4 <setvbuf+0x34>
100165c0:	68b4      	ldr	r4, [r6, #8]
100165c2:	e003      	b.n	100165cc <setvbuf+0x3c>
100165c4:	4b48      	ldr	r3, [pc, #288]	; (100166e8 <setvbuf+0x158>)
100165c6:	429c      	cmp	r4, r3
100165c8:	d100      	bne.n	100165cc <setvbuf+0x3c>
100165ca:	68f4      	ldr	r4, [r6, #12]
100165cc:	9b00      	ldr	r3, [sp, #0]
100165ce:	2b02      	cmp	r3, #2
100165d0:	d005      	beq.n	100165de <setvbuf+0x4e>
100165d2:	2b01      	cmp	r3, #1
100165d4:	d900      	bls.n	100165d8 <setvbuf+0x48>
100165d6:	e07c      	b.n	100166d2 <setvbuf+0x142>
100165d8:	2d00      	cmp	r5, #0
100165da:	da00      	bge.n	100165de <setvbuf+0x4e>
100165dc:	e079      	b.n	100166d2 <setvbuf+0x142>
100165de:	0021      	movs	r1, r4
100165e0:	0030      	movs	r0, r6
100165e2:	f000 f9d9 	bl	10016998 <_fflush_r>
100165e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100165e8:	2900      	cmp	r1, #0
100165ea:	d008      	beq.n	100165fe <setvbuf+0x6e>
100165ec:	0023      	movs	r3, r4
100165ee:	3344      	adds	r3, #68	; 0x44
100165f0:	4299      	cmp	r1, r3
100165f2:	d002      	beq.n	100165fa <setvbuf+0x6a>
100165f4:	0030      	movs	r0, r6
100165f6:	f7ff fe3d 	bl	10016274 <_free_r>
100165fa:	2300      	movs	r3, #0
100165fc:	6363      	str	r3, [r4, #52]	; 0x34
100165fe:	2300      	movs	r3, #0
10016600:	61a3      	str	r3, [r4, #24]
10016602:	6063      	str	r3, [r4, #4]
10016604:	89a3      	ldrh	r3, [r4, #12]
10016606:	061b      	lsls	r3, r3, #24
10016608:	d503      	bpl.n	10016612 <setvbuf+0x82>
1001660a:	6921      	ldr	r1, [r4, #16]
1001660c:	0030      	movs	r0, r6
1001660e:	f7ff fe31 	bl	10016274 <_free_r>
10016612:	89a2      	ldrh	r2, [r4, #12]
10016614:	4b35      	ldr	r3, [pc, #212]	; (100166ec <setvbuf+0x15c>)
10016616:	4013      	ands	r3, r2
10016618:	81a3      	strh	r3, [r4, #12]
1001661a:	9b00      	ldr	r3, [sp, #0]
1001661c:	2b02      	cmp	r3, #2
1001661e:	d021      	beq.n	10016664 <setvbuf+0xd4>
10016620:	ab03      	add	r3, sp, #12
10016622:	aa02      	add	r2, sp, #8
10016624:	0021      	movs	r1, r4
10016626:	0030      	movs	r0, r6
10016628:	f000 fab8 	bl	10016b9c <__swhatbuf_r>
1001662c:	89a3      	ldrh	r3, [r4, #12]
1001662e:	4318      	orrs	r0, r3
10016630:	81a0      	strh	r0, [r4, #12]
10016632:	2d00      	cmp	r5, #0
10016634:	d101      	bne.n	1001663a <setvbuf+0xaa>
10016636:	9d02      	ldr	r5, [sp, #8]
10016638:	e001      	b.n	1001663e <setvbuf+0xae>
1001663a:	2f00      	cmp	r7, #0
1001663c:	d125      	bne.n	1001668a <setvbuf+0xfa>
1001663e:	0028      	movs	r0, r5
10016640:	f7ff fdee 	bl	10016220 <malloc>
10016644:	9501      	str	r5, [sp, #4]
10016646:	1e07      	subs	r7, r0, #0
10016648:	d11a      	bne.n	10016680 <setvbuf+0xf0>
1001664a:	9b02      	ldr	r3, [sp, #8]
1001664c:	9301      	str	r3, [sp, #4]
1001664e:	42ab      	cmp	r3, r5
10016650:	d102      	bne.n	10016658 <setvbuf+0xc8>
10016652:	2001      	movs	r0, #1
10016654:	4240      	negs	r0, r0
10016656:	e006      	b.n	10016666 <setvbuf+0xd6>
10016658:	9801      	ldr	r0, [sp, #4]
1001665a:	f7ff fde1 	bl	10016220 <malloc>
1001665e:	1e07      	subs	r7, r0, #0
10016660:	d10e      	bne.n	10016680 <setvbuf+0xf0>
10016662:	e7f6      	b.n	10016652 <setvbuf+0xc2>
10016664:	2000      	movs	r0, #0
10016666:	2202      	movs	r2, #2
10016668:	89a3      	ldrh	r3, [r4, #12]
1001666a:	4313      	orrs	r3, r2
1001666c:	81a3      	strh	r3, [r4, #12]
1001666e:	2300      	movs	r3, #0
10016670:	60a3      	str	r3, [r4, #8]
10016672:	0023      	movs	r3, r4
10016674:	3347      	adds	r3, #71	; 0x47
10016676:	6023      	str	r3, [r4, #0]
10016678:	6123      	str	r3, [r4, #16]
1001667a:	2301      	movs	r3, #1
1001667c:	6163      	str	r3, [r4, #20]
1001667e:	e02a      	b.n	100166d6 <setvbuf+0x146>
10016680:	2280      	movs	r2, #128	; 0x80
10016682:	89a3      	ldrh	r3, [r4, #12]
10016684:	9d01      	ldr	r5, [sp, #4]
10016686:	4313      	orrs	r3, r2
10016688:	81a3      	strh	r3, [r4, #12]
1001668a:	69b3      	ldr	r3, [r6, #24]
1001668c:	2b00      	cmp	r3, #0
1001668e:	d102      	bne.n	10016696 <setvbuf+0x106>
10016690:	0030      	movs	r0, r6
10016692:	f000 f9ef 	bl	10016a74 <__sinit>
10016696:	9b00      	ldr	r3, [sp, #0]
10016698:	2b01      	cmp	r3, #1
1001669a:	d103      	bne.n	100166a4 <setvbuf+0x114>
1001669c:	89a3      	ldrh	r3, [r4, #12]
1001669e:	9a00      	ldr	r2, [sp, #0]
100166a0:	431a      	orrs	r2, r3
100166a2:	81a2      	strh	r2, [r4, #12]
100166a4:	2308      	movs	r3, #8
100166a6:	89a2      	ldrh	r2, [r4, #12]
100166a8:	6027      	str	r7, [r4, #0]
100166aa:	4013      	ands	r3, r2
100166ac:	6127      	str	r7, [r4, #16]
100166ae:	6165      	str	r5, [r4, #20]
100166b0:	1e18      	subs	r0, r3, #0
100166b2:	d00c      	beq.n	100166ce <setvbuf+0x13e>
100166b4:	2301      	movs	r3, #1
100166b6:	401a      	ands	r2, r3
100166b8:	2300      	movs	r3, #0
100166ba:	1e10      	subs	r0, r2, #0
100166bc:	4298      	cmp	r0, r3
100166be:	d004      	beq.n	100166ca <setvbuf+0x13a>
100166c0:	426d      	negs	r5, r5
100166c2:	60a3      	str	r3, [r4, #8]
100166c4:	61a5      	str	r5, [r4, #24]
100166c6:	0018      	movs	r0, r3
100166c8:	e005      	b.n	100166d6 <setvbuf+0x146>
100166ca:	60a5      	str	r5, [r4, #8]
100166cc:	e003      	b.n	100166d6 <setvbuf+0x146>
100166ce:	60a3      	str	r3, [r4, #8]
100166d0:	e001      	b.n	100166d6 <setvbuf+0x146>
100166d2:	2001      	movs	r0, #1
100166d4:	4240      	negs	r0, r0
100166d6:	b005      	add	sp, #20
100166d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100166da:	46c0      	nop			; (mov r8, r8)
100166dc:	10018600 	.word	0x10018600
100166e0:	100184e0 	.word	0x100184e0
100166e4:	10018500 	.word	0x10018500
100166e8:	10018520 	.word	0x10018520
100166ec:	fffff35c 	.word	0xfffff35c

100166f0 <__swbuf_r>:
100166f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100166f2:	0005      	movs	r5, r0
100166f4:	000f      	movs	r7, r1
100166f6:	0014      	movs	r4, r2
100166f8:	2800      	cmp	r0, #0
100166fa:	d004      	beq.n	10016706 <__swbuf_r+0x16>
100166fc:	6983      	ldr	r3, [r0, #24]
100166fe:	2b00      	cmp	r3, #0
10016700:	d101      	bne.n	10016706 <__swbuf_r+0x16>
10016702:	f000 f9b7 	bl	10016a74 <__sinit>
10016706:	4b23      	ldr	r3, [pc, #140]	; (10016794 <__swbuf_r+0xa4>)
10016708:	429c      	cmp	r4, r3
1001670a:	d101      	bne.n	10016710 <__swbuf_r+0x20>
1001670c:	686c      	ldr	r4, [r5, #4]
1001670e:	e008      	b.n	10016722 <__swbuf_r+0x32>
10016710:	4b21      	ldr	r3, [pc, #132]	; (10016798 <__swbuf_r+0xa8>)
10016712:	429c      	cmp	r4, r3
10016714:	d101      	bne.n	1001671a <__swbuf_r+0x2a>
10016716:	68ac      	ldr	r4, [r5, #8]
10016718:	e003      	b.n	10016722 <__swbuf_r+0x32>
1001671a:	4b20      	ldr	r3, [pc, #128]	; (1001679c <__swbuf_r+0xac>)
1001671c:	429c      	cmp	r4, r3
1001671e:	d100      	bne.n	10016722 <__swbuf_r+0x32>
10016720:	68ec      	ldr	r4, [r5, #12]
10016722:	69a3      	ldr	r3, [r4, #24]
10016724:	60a3      	str	r3, [r4, #8]
10016726:	89a3      	ldrh	r3, [r4, #12]
10016728:	071b      	lsls	r3, r3, #28
1001672a:	d50a      	bpl.n	10016742 <__swbuf_r+0x52>
1001672c:	6923      	ldr	r3, [r4, #16]
1001672e:	2b00      	cmp	r3, #0
10016730:	d007      	beq.n	10016742 <__swbuf_r+0x52>
10016732:	6823      	ldr	r3, [r4, #0]
10016734:	6922      	ldr	r2, [r4, #16]
10016736:	b2fe      	uxtb	r6, r7
10016738:	1a98      	subs	r0, r3, r2
1001673a:	6963      	ldr	r3, [r4, #20]
1001673c:	4298      	cmp	r0, r3
1001673e:	db0f      	blt.n	10016760 <__swbuf_r+0x70>
10016740:	e008      	b.n	10016754 <__swbuf_r+0x64>
10016742:	0021      	movs	r1, r4
10016744:	0028      	movs	r0, r5
10016746:	f000 f82b 	bl	100167a0 <__swsetup_r>
1001674a:	2800      	cmp	r0, #0
1001674c:	d0f1      	beq.n	10016732 <__swbuf_r+0x42>
1001674e:	2001      	movs	r0, #1
10016750:	4240      	negs	r0, r0
10016752:	e01d      	b.n	10016790 <__swbuf_r+0xa0>
10016754:	0021      	movs	r1, r4
10016756:	0028      	movs	r0, r5
10016758:	f000 f91e 	bl	10016998 <_fflush_r>
1001675c:	2800      	cmp	r0, #0
1001675e:	d1f6      	bne.n	1001674e <__swbuf_r+0x5e>
10016760:	68a3      	ldr	r3, [r4, #8]
10016762:	3001      	adds	r0, #1
10016764:	3b01      	subs	r3, #1
10016766:	60a3      	str	r3, [r4, #8]
10016768:	6823      	ldr	r3, [r4, #0]
1001676a:	1c5a      	adds	r2, r3, #1
1001676c:	6022      	str	r2, [r4, #0]
1001676e:	701f      	strb	r7, [r3, #0]
10016770:	6963      	ldr	r3, [r4, #20]
10016772:	4298      	cmp	r0, r3
10016774:	d005      	beq.n	10016782 <__swbuf_r+0x92>
10016776:	89a3      	ldrh	r3, [r4, #12]
10016778:	0030      	movs	r0, r6
1001677a:	07db      	lsls	r3, r3, #31
1001677c:	d508      	bpl.n	10016790 <__swbuf_r+0xa0>
1001677e:	2e0a      	cmp	r6, #10
10016780:	d106      	bne.n	10016790 <__swbuf_r+0xa0>
10016782:	0021      	movs	r1, r4
10016784:	0028      	movs	r0, r5
10016786:	f000 f907 	bl	10016998 <_fflush_r>
1001678a:	2800      	cmp	r0, #0
1001678c:	d1df      	bne.n	1001674e <__swbuf_r+0x5e>
1001678e:	0030      	movs	r0, r6
10016790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016792:	46c0      	nop			; (mov r8, r8)
10016794:	100184e0 	.word	0x100184e0
10016798:	10018500 	.word	0x10018500
1001679c:	10018520 	.word	0x10018520

100167a0 <__swsetup_r>:
100167a0:	4b36      	ldr	r3, [pc, #216]	; (1001687c <__swsetup_r+0xdc>)
100167a2:	b570      	push	{r4, r5, r6, lr}
100167a4:	681d      	ldr	r5, [r3, #0]
100167a6:	0006      	movs	r6, r0
100167a8:	000c      	movs	r4, r1
100167aa:	2d00      	cmp	r5, #0
100167ac:	d005      	beq.n	100167ba <__swsetup_r+0x1a>
100167ae:	69ab      	ldr	r3, [r5, #24]
100167b0:	2b00      	cmp	r3, #0
100167b2:	d102      	bne.n	100167ba <__swsetup_r+0x1a>
100167b4:	0028      	movs	r0, r5
100167b6:	f000 f95d 	bl	10016a74 <__sinit>
100167ba:	4b31      	ldr	r3, [pc, #196]	; (10016880 <__swsetup_r+0xe0>)
100167bc:	429c      	cmp	r4, r3
100167be:	d101      	bne.n	100167c4 <__swsetup_r+0x24>
100167c0:	686c      	ldr	r4, [r5, #4]
100167c2:	e008      	b.n	100167d6 <__swsetup_r+0x36>
100167c4:	4b2f      	ldr	r3, [pc, #188]	; (10016884 <__swsetup_r+0xe4>)
100167c6:	429c      	cmp	r4, r3
100167c8:	d101      	bne.n	100167ce <__swsetup_r+0x2e>
100167ca:	68ac      	ldr	r4, [r5, #8]
100167cc:	e003      	b.n	100167d6 <__swsetup_r+0x36>
100167ce:	4b2e      	ldr	r3, [pc, #184]	; (10016888 <__swsetup_r+0xe8>)
100167d0:	429c      	cmp	r4, r3
100167d2:	d100      	bne.n	100167d6 <__swsetup_r+0x36>
100167d4:	68ec      	ldr	r4, [r5, #12]
100167d6:	220c      	movs	r2, #12
100167d8:	5ea3      	ldrsh	r3, [r4, r2]
100167da:	b29a      	uxth	r2, r3
100167dc:	0711      	lsls	r1, r2, #28
100167de:	d423      	bmi.n	10016828 <__swsetup_r+0x88>
100167e0:	06d1      	lsls	r1, r2, #27
100167e2:	d407      	bmi.n	100167f4 <__swsetup_r+0x54>
100167e4:	2209      	movs	r2, #9
100167e6:	2001      	movs	r0, #1
100167e8:	6032      	str	r2, [r6, #0]
100167ea:	3237      	adds	r2, #55	; 0x37
100167ec:	4313      	orrs	r3, r2
100167ee:	81a3      	strh	r3, [r4, #12]
100167f0:	4240      	negs	r0, r0
100167f2:	e042      	b.n	1001687a <__swsetup_r+0xda>
100167f4:	0753      	lsls	r3, r2, #29
100167f6:	d513      	bpl.n	10016820 <__swsetup_r+0x80>
100167f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
100167fa:	2900      	cmp	r1, #0
100167fc:	d008      	beq.n	10016810 <__swsetup_r+0x70>
100167fe:	0023      	movs	r3, r4
10016800:	3344      	adds	r3, #68	; 0x44
10016802:	4299      	cmp	r1, r3
10016804:	d002      	beq.n	1001680c <__swsetup_r+0x6c>
10016806:	0030      	movs	r0, r6
10016808:	f7ff fd34 	bl	10016274 <_free_r>
1001680c:	2300      	movs	r3, #0
1001680e:	6363      	str	r3, [r4, #52]	; 0x34
10016810:	2224      	movs	r2, #36	; 0x24
10016812:	89a3      	ldrh	r3, [r4, #12]
10016814:	4393      	bics	r3, r2
10016816:	81a3      	strh	r3, [r4, #12]
10016818:	2300      	movs	r3, #0
1001681a:	6063      	str	r3, [r4, #4]
1001681c:	6923      	ldr	r3, [r4, #16]
1001681e:	6023      	str	r3, [r4, #0]
10016820:	2208      	movs	r2, #8
10016822:	89a3      	ldrh	r3, [r4, #12]
10016824:	4313      	orrs	r3, r2
10016826:	81a3      	strh	r3, [r4, #12]
10016828:	6923      	ldr	r3, [r4, #16]
1001682a:	2b00      	cmp	r3, #0
1001682c:	d10b      	bne.n	10016846 <__swsetup_r+0xa6>
1001682e:	23a0      	movs	r3, #160	; 0xa0
10016830:	89a2      	ldrh	r2, [r4, #12]
10016832:	009b      	lsls	r3, r3, #2
10016834:	4013      	ands	r3, r2
10016836:	2280      	movs	r2, #128	; 0x80
10016838:	0092      	lsls	r2, r2, #2
1001683a:	4293      	cmp	r3, r2
1001683c:	d003      	beq.n	10016846 <__swsetup_r+0xa6>
1001683e:	0021      	movs	r1, r4
10016840:	0030      	movs	r0, r6
10016842:	f000 f9d1 	bl	10016be8 <__smakebuf_r>
10016846:	2301      	movs	r3, #1
10016848:	89a2      	ldrh	r2, [r4, #12]
1001684a:	4013      	ands	r3, r2
1001684c:	d005      	beq.n	1001685a <__swsetup_r+0xba>
1001684e:	2300      	movs	r3, #0
10016850:	60a3      	str	r3, [r4, #8]
10016852:	6963      	ldr	r3, [r4, #20]
10016854:	425b      	negs	r3, r3
10016856:	61a3      	str	r3, [r4, #24]
10016858:	e003      	b.n	10016862 <__swsetup_r+0xc2>
1001685a:	0792      	lsls	r2, r2, #30
1001685c:	d400      	bmi.n	10016860 <__swsetup_r+0xc0>
1001685e:	6963      	ldr	r3, [r4, #20]
10016860:	60a3      	str	r3, [r4, #8]
10016862:	2000      	movs	r0, #0
10016864:	6923      	ldr	r3, [r4, #16]
10016866:	4283      	cmp	r3, r0
10016868:	d107      	bne.n	1001687a <__swsetup_r+0xda>
1001686a:	220c      	movs	r2, #12
1001686c:	5ea3      	ldrsh	r3, [r4, r2]
1001686e:	061a      	lsls	r2, r3, #24
10016870:	d503      	bpl.n	1001687a <__swsetup_r+0xda>
10016872:	2240      	movs	r2, #64	; 0x40
10016874:	4313      	orrs	r3, r2
10016876:	81a3      	strh	r3, [r4, #12]
10016878:	3801      	subs	r0, #1
1001687a:	bd70      	pop	{r4, r5, r6, pc}
1001687c:	10018600 	.word	0x10018600
10016880:	100184e0 	.word	0x100184e0
10016884:	10018500 	.word	0x10018500
10016888:	10018520 	.word	0x10018520

1001688c <__sflush_r>:
1001688c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001688e:	898a      	ldrh	r2, [r1, #12]
10016890:	0005      	movs	r5, r0
10016892:	000c      	movs	r4, r1
10016894:	0713      	lsls	r3, r2, #28
10016896:	d45a      	bmi.n	1001694e <__sflush_r+0xc2>
10016898:	684b      	ldr	r3, [r1, #4]
1001689a:	2b00      	cmp	r3, #0
1001689c:	dc02      	bgt.n	100168a4 <__sflush_r+0x18>
1001689e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100168a0:	2b00      	cmp	r3, #0
100168a2:	dd19      	ble.n	100168d8 <__sflush_r+0x4c>
100168a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100168a6:	2f00      	cmp	r7, #0
100168a8:	d016      	beq.n	100168d8 <__sflush_r+0x4c>
100168aa:	2300      	movs	r3, #0
100168ac:	682e      	ldr	r6, [r5, #0]
100168ae:	602b      	str	r3, [r5, #0]
100168b0:	2380      	movs	r3, #128	; 0x80
100168b2:	015b      	lsls	r3, r3, #5
100168b4:	401a      	ands	r2, r3
100168b6:	d001      	beq.n	100168bc <__sflush_r+0x30>
100168b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
100168ba:	e014      	b.n	100168e6 <__sflush_r+0x5a>
100168bc:	2301      	movs	r3, #1
100168be:	6a21      	ldr	r1, [r4, #32]
100168c0:	0028      	movs	r0, r5
100168c2:	47b8      	blx	r7
100168c4:	1c43      	adds	r3, r0, #1
100168c6:	d10e      	bne.n	100168e6 <__sflush_r+0x5a>
100168c8:	682b      	ldr	r3, [r5, #0]
100168ca:	2b00      	cmp	r3, #0
100168cc:	d00b      	beq.n	100168e6 <__sflush_r+0x5a>
100168ce:	2b1d      	cmp	r3, #29
100168d0:	d001      	beq.n	100168d6 <__sflush_r+0x4a>
100168d2:	2b16      	cmp	r3, #22
100168d4:	d102      	bne.n	100168dc <__sflush_r+0x50>
100168d6:	602e      	str	r6, [r5, #0]
100168d8:	2000      	movs	r0, #0
100168da:	e05a      	b.n	10016992 <__sflush_r+0x106>
100168dc:	2240      	movs	r2, #64	; 0x40
100168de:	89a3      	ldrh	r3, [r4, #12]
100168e0:	4313      	orrs	r3, r2
100168e2:	81a3      	strh	r3, [r4, #12]
100168e4:	e055      	b.n	10016992 <__sflush_r+0x106>
100168e6:	89a3      	ldrh	r3, [r4, #12]
100168e8:	075b      	lsls	r3, r3, #29
100168ea:	d506      	bpl.n	100168fa <__sflush_r+0x6e>
100168ec:	6863      	ldr	r3, [r4, #4]
100168ee:	1ac0      	subs	r0, r0, r3
100168f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
100168f2:	2b00      	cmp	r3, #0
100168f4:	d001      	beq.n	100168fa <__sflush_r+0x6e>
100168f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
100168f8:	1ac0      	subs	r0, r0, r3
100168fa:	2300      	movs	r3, #0
100168fc:	0002      	movs	r2, r0
100168fe:	6a21      	ldr	r1, [r4, #32]
10016900:	0028      	movs	r0, r5
10016902:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016904:	47b8      	blx	r7
10016906:	89a3      	ldrh	r3, [r4, #12]
10016908:	1c42      	adds	r2, r0, #1
1001690a:	d106      	bne.n	1001691a <__sflush_r+0x8e>
1001690c:	6829      	ldr	r1, [r5, #0]
1001690e:	291d      	cmp	r1, #29
10016910:	d83a      	bhi.n	10016988 <__sflush_r+0xfc>
10016912:	4a20      	ldr	r2, [pc, #128]	; (10016994 <__sflush_r+0x108>)
10016914:	40ca      	lsrs	r2, r1
10016916:	07d2      	lsls	r2, r2, #31
10016918:	d536      	bpl.n	10016988 <__sflush_r+0xfc>
1001691a:	2200      	movs	r2, #0
1001691c:	6062      	str	r2, [r4, #4]
1001691e:	6922      	ldr	r2, [r4, #16]
10016920:	6022      	str	r2, [r4, #0]
10016922:	04db      	lsls	r3, r3, #19
10016924:	d505      	bpl.n	10016932 <__sflush_r+0xa6>
10016926:	1c43      	adds	r3, r0, #1
10016928:	d102      	bne.n	10016930 <__sflush_r+0xa4>
1001692a:	682b      	ldr	r3, [r5, #0]
1001692c:	2b00      	cmp	r3, #0
1001692e:	d100      	bne.n	10016932 <__sflush_r+0xa6>
10016930:	6560      	str	r0, [r4, #84]	; 0x54
10016932:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016934:	602e      	str	r6, [r5, #0]
10016936:	2900      	cmp	r1, #0
10016938:	d0ce      	beq.n	100168d8 <__sflush_r+0x4c>
1001693a:	0023      	movs	r3, r4
1001693c:	3344      	adds	r3, #68	; 0x44
1001693e:	4299      	cmp	r1, r3
10016940:	d002      	beq.n	10016948 <__sflush_r+0xbc>
10016942:	0028      	movs	r0, r5
10016944:	f7ff fc96 	bl	10016274 <_free_r>
10016948:	2000      	movs	r0, #0
1001694a:	6360      	str	r0, [r4, #52]	; 0x34
1001694c:	e021      	b.n	10016992 <__sflush_r+0x106>
1001694e:	690f      	ldr	r7, [r1, #16]
10016950:	2f00      	cmp	r7, #0
10016952:	d0c1      	beq.n	100168d8 <__sflush_r+0x4c>
10016954:	680b      	ldr	r3, [r1, #0]
10016956:	600f      	str	r7, [r1, #0]
10016958:	1bdb      	subs	r3, r3, r7
1001695a:	9301      	str	r3, [sp, #4]
1001695c:	2300      	movs	r3, #0
1001695e:	0792      	lsls	r2, r2, #30
10016960:	d100      	bne.n	10016964 <__sflush_r+0xd8>
10016962:	694b      	ldr	r3, [r1, #20]
10016964:	60a3      	str	r3, [r4, #8]
10016966:	e003      	b.n	10016970 <__sflush_r+0xe4>
10016968:	9b01      	ldr	r3, [sp, #4]
1001696a:	183f      	adds	r7, r7, r0
1001696c:	1a1b      	subs	r3, r3, r0
1001696e:	9301      	str	r3, [sp, #4]
10016970:	9b01      	ldr	r3, [sp, #4]
10016972:	2b00      	cmp	r3, #0
10016974:	ddb0      	ble.n	100168d8 <__sflush_r+0x4c>
10016976:	9b01      	ldr	r3, [sp, #4]
10016978:	003a      	movs	r2, r7
1001697a:	6a21      	ldr	r1, [r4, #32]
1001697c:	0028      	movs	r0, r5
1001697e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016980:	47b0      	blx	r6
10016982:	2800      	cmp	r0, #0
10016984:	dcf0      	bgt.n	10016968 <__sflush_r+0xdc>
10016986:	89a3      	ldrh	r3, [r4, #12]
10016988:	2240      	movs	r2, #64	; 0x40
1001698a:	2001      	movs	r0, #1
1001698c:	4313      	orrs	r3, r2
1001698e:	81a3      	strh	r3, [r4, #12]
10016990:	4240      	negs	r0, r0
10016992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016994:	20400001 	.word	0x20400001

10016998 <_fflush_r>:
10016998:	690b      	ldr	r3, [r1, #16]
1001699a:	b570      	push	{r4, r5, r6, lr}
1001699c:	0005      	movs	r5, r0
1001699e:	000c      	movs	r4, r1
100169a0:	2b00      	cmp	r3, #0
100169a2:	d101      	bne.n	100169a8 <_fflush_r+0x10>
100169a4:	2000      	movs	r0, #0
100169a6:	e01c      	b.n	100169e2 <_fflush_r+0x4a>
100169a8:	2800      	cmp	r0, #0
100169aa:	d004      	beq.n	100169b6 <_fflush_r+0x1e>
100169ac:	6983      	ldr	r3, [r0, #24]
100169ae:	2b00      	cmp	r3, #0
100169b0:	d101      	bne.n	100169b6 <_fflush_r+0x1e>
100169b2:	f000 f85f 	bl	10016a74 <__sinit>
100169b6:	4b0b      	ldr	r3, [pc, #44]	; (100169e4 <_fflush_r+0x4c>)
100169b8:	429c      	cmp	r4, r3
100169ba:	d101      	bne.n	100169c0 <_fflush_r+0x28>
100169bc:	686c      	ldr	r4, [r5, #4]
100169be:	e008      	b.n	100169d2 <_fflush_r+0x3a>
100169c0:	4b09      	ldr	r3, [pc, #36]	; (100169e8 <_fflush_r+0x50>)
100169c2:	429c      	cmp	r4, r3
100169c4:	d101      	bne.n	100169ca <_fflush_r+0x32>
100169c6:	68ac      	ldr	r4, [r5, #8]
100169c8:	e003      	b.n	100169d2 <_fflush_r+0x3a>
100169ca:	4b08      	ldr	r3, [pc, #32]	; (100169ec <_fflush_r+0x54>)
100169cc:	429c      	cmp	r4, r3
100169ce:	d100      	bne.n	100169d2 <_fflush_r+0x3a>
100169d0:	68ec      	ldr	r4, [r5, #12]
100169d2:	220c      	movs	r2, #12
100169d4:	5ea3      	ldrsh	r3, [r4, r2]
100169d6:	2b00      	cmp	r3, #0
100169d8:	d0e4      	beq.n	100169a4 <_fflush_r+0xc>
100169da:	0021      	movs	r1, r4
100169dc:	0028      	movs	r0, r5
100169de:	f7ff ff55 	bl	1001688c <__sflush_r>
100169e2:	bd70      	pop	{r4, r5, r6, pc}
100169e4:	100184e0 	.word	0x100184e0
100169e8:	10018500 	.word	0x10018500
100169ec:	10018520 	.word	0x10018520

100169f0 <_cleanup_r>:
100169f0:	b510      	push	{r4, lr}
100169f2:	4902      	ldr	r1, [pc, #8]	; (100169fc <_cleanup_r+0xc>)
100169f4:	f000 f8b0 	bl	10016b58 <_fwalk_reent>
100169f8:	bd10      	pop	{r4, pc}
100169fa:	46c0      	nop			; (mov r8, r8)
100169fc:	10016999 	.word	0x10016999

10016a00 <std.isra.0>:
10016a00:	2300      	movs	r3, #0
10016a02:	b510      	push	{r4, lr}
10016a04:	0004      	movs	r4, r0
10016a06:	6003      	str	r3, [r0, #0]
10016a08:	6043      	str	r3, [r0, #4]
10016a0a:	6083      	str	r3, [r0, #8]
10016a0c:	8181      	strh	r1, [r0, #12]
10016a0e:	6643      	str	r3, [r0, #100]	; 0x64
10016a10:	81c2      	strh	r2, [r0, #14]
10016a12:	6103      	str	r3, [r0, #16]
10016a14:	6143      	str	r3, [r0, #20]
10016a16:	6183      	str	r3, [r0, #24]
10016a18:	0019      	movs	r1, r3
10016a1a:	2208      	movs	r2, #8
10016a1c:	305c      	adds	r0, #92	; 0x5c
10016a1e:	f7ff fc21 	bl	10016264 <memset>
10016a22:	4b05      	ldr	r3, [pc, #20]	; (10016a38 <std.isra.0+0x38>)
10016a24:	6224      	str	r4, [r4, #32]
10016a26:	6263      	str	r3, [r4, #36]	; 0x24
10016a28:	4b04      	ldr	r3, [pc, #16]	; (10016a3c <std.isra.0+0x3c>)
10016a2a:	62a3      	str	r3, [r4, #40]	; 0x28
10016a2c:	4b04      	ldr	r3, [pc, #16]	; (10016a40 <std.isra.0+0x40>)
10016a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
10016a30:	4b04      	ldr	r3, [pc, #16]	; (10016a44 <std.isra.0+0x44>)
10016a32:	6323      	str	r3, [r4, #48]	; 0x30
10016a34:	bd10      	pop	{r4, pc}
10016a36:	46c0      	nop			; (mov r8, r8)
10016a38:	10017279 	.word	0x10017279
10016a3c:	100172a1 	.word	0x100172a1
10016a40:	100172d9 	.word	0x100172d9
10016a44:	10017305 	.word	0x10017305

10016a48 <__sfmoreglue>:
10016a48:	b570      	push	{r4, r5, r6, lr}
10016a4a:	2568      	movs	r5, #104	; 0x68
10016a4c:	1e4b      	subs	r3, r1, #1
10016a4e:	435d      	muls	r5, r3
10016a50:	000e      	movs	r6, r1
10016a52:	0029      	movs	r1, r5
10016a54:	3174      	adds	r1, #116	; 0x74
10016a56:	f7ff fc53 	bl	10016300 <_malloc_r>
10016a5a:	1e04      	subs	r4, r0, #0
10016a5c:	d008      	beq.n	10016a70 <__sfmoreglue+0x28>
10016a5e:	2100      	movs	r1, #0
10016a60:	002a      	movs	r2, r5
10016a62:	6001      	str	r1, [r0, #0]
10016a64:	6046      	str	r6, [r0, #4]
10016a66:	300c      	adds	r0, #12
10016a68:	60a0      	str	r0, [r4, #8]
10016a6a:	3268      	adds	r2, #104	; 0x68
10016a6c:	f7ff fbfa 	bl	10016264 <memset>
10016a70:	0020      	movs	r0, r4
10016a72:	bd70      	pop	{r4, r5, r6, pc}

10016a74 <__sinit>:
10016a74:	6983      	ldr	r3, [r0, #24]
10016a76:	b513      	push	{r0, r1, r4, lr}
10016a78:	0004      	movs	r4, r0
10016a7a:	2b00      	cmp	r3, #0
10016a7c:	d128      	bne.n	10016ad0 <__sinit+0x5c>
10016a7e:	6483      	str	r3, [r0, #72]	; 0x48
10016a80:	64c3      	str	r3, [r0, #76]	; 0x4c
10016a82:	6503      	str	r3, [r0, #80]	; 0x50
10016a84:	4b13      	ldr	r3, [pc, #76]	; (10016ad4 <__sinit+0x60>)
10016a86:	4a14      	ldr	r2, [pc, #80]	; (10016ad8 <__sinit+0x64>)
10016a88:	681b      	ldr	r3, [r3, #0]
10016a8a:	6282      	str	r2, [r0, #40]	; 0x28
10016a8c:	9301      	str	r3, [sp, #4]
10016a8e:	4298      	cmp	r0, r3
10016a90:	d101      	bne.n	10016a96 <__sinit+0x22>
10016a92:	2301      	movs	r3, #1
10016a94:	6183      	str	r3, [r0, #24]
10016a96:	0020      	movs	r0, r4
10016a98:	f000 f820 	bl	10016adc <__sfp>
10016a9c:	6060      	str	r0, [r4, #4]
10016a9e:	0020      	movs	r0, r4
10016aa0:	f000 f81c 	bl	10016adc <__sfp>
10016aa4:	60a0      	str	r0, [r4, #8]
10016aa6:	0020      	movs	r0, r4
10016aa8:	f000 f818 	bl	10016adc <__sfp>
10016aac:	2200      	movs	r2, #0
10016aae:	60e0      	str	r0, [r4, #12]
10016ab0:	2104      	movs	r1, #4
10016ab2:	6860      	ldr	r0, [r4, #4]
10016ab4:	f7ff ffa4 	bl	10016a00 <std.isra.0>
10016ab8:	2201      	movs	r2, #1
10016aba:	2109      	movs	r1, #9
10016abc:	68a0      	ldr	r0, [r4, #8]
10016abe:	f7ff ff9f 	bl	10016a00 <std.isra.0>
10016ac2:	2202      	movs	r2, #2
10016ac4:	2112      	movs	r1, #18
10016ac6:	68e0      	ldr	r0, [r4, #12]
10016ac8:	f7ff ff9a 	bl	10016a00 <std.isra.0>
10016acc:	2301      	movs	r3, #1
10016ace:	61a3      	str	r3, [r4, #24]
10016ad0:	bd13      	pop	{r0, r1, r4, pc}
10016ad2:	46c0      	nop			; (mov r8, r8)
10016ad4:	100184dc 	.word	0x100184dc
10016ad8:	100169f1 	.word	0x100169f1

10016adc <__sfp>:
10016adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016ade:	4b1d      	ldr	r3, [pc, #116]	; (10016b54 <__sfp+0x78>)
10016ae0:	0006      	movs	r6, r0
10016ae2:	681d      	ldr	r5, [r3, #0]
10016ae4:	69ab      	ldr	r3, [r5, #24]
10016ae6:	2b00      	cmp	r3, #0
10016ae8:	d102      	bne.n	10016af0 <__sfp+0x14>
10016aea:	0028      	movs	r0, r5
10016aec:	f7ff ffc2 	bl	10016a74 <__sinit>
10016af0:	3548      	adds	r5, #72	; 0x48
10016af2:	68ac      	ldr	r4, [r5, #8]
10016af4:	686b      	ldr	r3, [r5, #4]
10016af6:	3b01      	subs	r3, #1
10016af8:	d405      	bmi.n	10016b06 <__sfp+0x2a>
10016afa:	220c      	movs	r2, #12
10016afc:	5ea7      	ldrsh	r7, [r4, r2]
10016afe:	2f00      	cmp	r7, #0
10016b00:	d010      	beq.n	10016b24 <__sfp+0x48>
10016b02:	3468      	adds	r4, #104	; 0x68
10016b04:	e7f7      	b.n	10016af6 <__sfp+0x1a>
10016b06:	682b      	ldr	r3, [r5, #0]
10016b08:	2b00      	cmp	r3, #0
10016b0a:	d001      	beq.n	10016b10 <__sfp+0x34>
10016b0c:	682d      	ldr	r5, [r5, #0]
10016b0e:	e7f0      	b.n	10016af2 <__sfp+0x16>
10016b10:	2104      	movs	r1, #4
10016b12:	0030      	movs	r0, r6
10016b14:	f7ff ff98 	bl	10016a48 <__sfmoreglue>
10016b18:	6028      	str	r0, [r5, #0]
10016b1a:	2800      	cmp	r0, #0
10016b1c:	d1f6      	bne.n	10016b0c <__sfp+0x30>
10016b1e:	230c      	movs	r3, #12
10016b20:	6033      	str	r3, [r6, #0]
10016b22:	e016      	b.n	10016b52 <__sfp+0x76>
10016b24:	2301      	movs	r3, #1
10016b26:	0020      	movs	r0, r4
10016b28:	425b      	negs	r3, r3
10016b2a:	81e3      	strh	r3, [r4, #14]
10016b2c:	3302      	adds	r3, #2
10016b2e:	81a3      	strh	r3, [r4, #12]
10016b30:	6667      	str	r7, [r4, #100]	; 0x64
10016b32:	6027      	str	r7, [r4, #0]
10016b34:	60a7      	str	r7, [r4, #8]
10016b36:	6067      	str	r7, [r4, #4]
10016b38:	6127      	str	r7, [r4, #16]
10016b3a:	6167      	str	r7, [r4, #20]
10016b3c:	61a7      	str	r7, [r4, #24]
10016b3e:	305c      	adds	r0, #92	; 0x5c
10016b40:	2208      	movs	r2, #8
10016b42:	0039      	movs	r1, r7
10016b44:	f7ff fb8e 	bl	10016264 <memset>
10016b48:	0020      	movs	r0, r4
10016b4a:	6367      	str	r7, [r4, #52]	; 0x34
10016b4c:	63a7      	str	r7, [r4, #56]	; 0x38
10016b4e:	64a7      	str	r7, [r4, #72]	; 0x48
10016b50:	64e7      	str	r7, [r4, #76]	; 0x4c
10016b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016b54:	100184dc 	.word	0x100184dc

10016b58 <_fwalk_reent>:
10016b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016b5a:	0004      	movs	r4, r0
10016b5c:	0007      	movs	r7, r0
10016b5e:	2600      	movs	r6, #0
10016b60:	9101      	str	r1, [sp, #4]
10016b62:	3448      	adds	r4, #72	; 0x48
10016b64:	2c00      	cmp	r4, #0
10016b66:	d016      	beq.n	10016b96 <_fwalk_reent+0x3e>
10016b68:	6863      	ldr	r3, [r4, #4]
10016b6a:	68a5      	ldr	r5, [r4, #8]
10016b6c:	9300      	str	r3, [sp, #0]
10016b6e:	9b00      	ldr	r3, [sp, #0]
10016b70:	3b01      	subs	r3, #1
10016b72:	9300      	str	r3, [sp, #0]
10016b74:	d40d      	bmi.n	10016b92 <_fwalk_reent+0x3a>
10016b76:	89ab      	ldrh	r3, [r5, #12]
10016b78:	2b01      	cmp	r3, #1
10016b7a:	d908      	bls.n	10016b8e <_fwalk_reent+0x36>
10016b7c:	220e      	movs	r2, #14
10016b7e:	5eab      	ldrsh	r3, [r5, r2]
10016b80:	3301      	adds	r3, #1
10016b82:	d004      	beq.n	10016b8e <_fwalk_reent+0x36>
10016b84:	0029      	movs	r1, r5
10016b86:	0038      	movs	r0, r7
10016b88:	9b01      	ldr	r3, [sp, #4]
10016b8a:	4798      	blx	r3
10016b8c:	4306      	orrs	r6, r0
10016b8e:	3568      	adds	r5, #104	; 0x68
10016b90:	e7ed      	b.n	10016b6e <_fwalk_reent+0x16>
10016b92:	6824      	ldr	r4, [r4, #0]
10016b94:	e7e6      	b.n	10016b64 <_fwalk_reent+0xc>
10016b96:	0030      	movs	r0, r6
10016b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016b9c <__swhatbuf_r>:
10016b9c:	b570      	push	{r4, r5, r6, lr}
10016b9e:	000e      	movs	r6, r1
10016ba0:	001d      	movs	r5, r3
10016ba2:	230e      	movs	r3, #14
10016ba4:	5ec9      	ldrsh	r1, [r1, r3]
10016ba6:	b090      	sub	sp, #64	; 0x40
10016ba8:	0014      	movs	r4, r2
10016baa:	2900      	cmp	r1, #0
10016bac:	da06      	bge.n	10016bbc <__swhatbuf_r+0x20>
10016bae:	2300      	movs	r3, #0
10016bb0:	602b      	str	r3, [r5, #0]
10016bb2:	89b3      	ldrh	r3, [r6, #12]
10016bb4:	061b      	lsls	r3, r3, #24
10016bb6:	d50f      	bpl.n	10016bd8 <__swhatbuf_r+0x3c>
10016bb8:	2340      	movs	r3, #64	; 0x40
10016bba:	e00f      	b.n	10016bdc <__swhatbuf_r+0x40>
10016bbc:	aa01      	add	r2, sp, #4
10016bbe:	f000 fbcd 	bl	1001735c <_fstat_r>
10016bc2:	2800      	cmp	r0, #0
10016bc4:	dbf3      	blt.n	10016bae <__swhatbuf_r+0x12>
10016bc6:	23f0      	movs	r3, #240	; 0xf0
10016bc8:	9a02      	ldr	r2, [sp, #8]
10016bca:	021b      	lsls	r3, r3, #8
10016bcc:	4013      	ands	r3, r2
10016bce:	4a05      	ldr	r2, [pc, #20]	; (10016be4 <__swhatbuf_r+0x48>)
10016bd0:	189b      	adds	r3, r3, r2
10016bd2:	425a      	negs	r2, r3
10016bd4:	4153      	adcs	r3, r2
10016bd6:	602b      	str	r3, [r5, #0]
10016bd8:	2380      	movs	r3, #128	; 0x80
10016bda:	00db      	lsls	r3, r3, #3
10016bdc:	2000      	movs	r0, #0
10016bde:	6023      	str	r3, [r4, #0]
10016be0:	b010      	add	sp, #64	; 0x40
10016be2:	bd70      	pop	{r4, r5, r6, pc}
10016be4:	ffffe000 	.word	0xffffe000

10016be8 <__smakebuf_r>:
10016be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016bea:	2602      	movs	r6, #2
10016bec:	898b      	ldrh	r3, [r1, #12]
10016bee:	0005      	movs	r5, r0
10016bf0:	000c      	movs	r4, r1
10016bf2:	4233      	tst	r3, r6
10016bf4:	d110      	bne.n	10016c18 <__smakebuf_r+0x30>
10016bf6:	ab01      	add	r3, sp, #4
10016bf8:	466a      	mov	r2, sp
10016bfa:	f7ff ffcf 	bl	10016b9c <__swhatbuf_r>
10016bfe:	9900      	ldr	r1, [sp, #0]
10016c00:	0007      	movs	r7, r0
10016c02:	0028      	movs	r0, r5
10016c04:	f7ff fb7c 	bl	10016300 <_malloc_r>
10016c08:	2800      	cmp	r0, #0
10016c0a:	d10c      	bne.n	10016c26 <__smakebuf_r+0x3e>
10016c0c:	220c      	movs	r2, #12
10016c0e:	5ea3      	ldrsh	r3, [r4, r2]
10016c10:	059a      	lsls	r2, r3, #22
10016c12:	d423      	bmi.n	10016c5c <__smakebuf_r+0x74>
10016c14:	4333      	orrs	r3, r6
10016c16:	81a3      	strh	r3, [r4, #12]
10016c18:	0023      	movs	r3, r4
10016c1a:	3347      	adds	r3, #71	; 0x47
10016c1c:	6023      	str	r3, [r4, #0]
10016c1e:	6123      	str	r3, [r4, #16]
10016c20:	2301      	movs	r3, #1
10016c22:	6163      	str	r3, [r4, #20]
10016c24:	e01a      	b.n	10016c5c <__smakebuf_r+0x74>
10016c26:	2280      	movs	r2, #128	; 0x80
10016c28:	4b0d      	ldr	r3, [pc, #52]	; (10016c60 <__smakebuf_r+0x78>)
10016c2a:	62ab      	str	r3, [r5, #40]	; 0x28
10016c2c:	89a3      	ldrh	r3, [r4, #12]
10016c2e:	6020      	str	r0, [r4, #0]
10016c30:	4313      	orrs	r3, r2
10016c32:	81a3      	strh	r3, [r4, #12]
10016c34:	9b00      	ldr	r3, [sp, #0]
10016c36:	6120      	str	r0, [r4, #16]
10016c38:	6163      	str	r3, [r4, #20]
10016c3a:	9b01      	ldr	r3, [sp, #4]
10016c3c:	2b00      	cmp	r3, #0
10016c3e:	d00a      	beq.n	10016c56 <__smakebuf_r+0x6e>
10016c40:	230e      	movs	r3, #14
10016c42:	5ee1      	ldrsh	r1, [r4, r3]
10016c44:	0028      	movs	r0, r5
10016c46:	f000 fb9b 	bl	10017380 <_isatty_r>
10016c4a:	2800      	cmp	r0, #0
10016c4c:	d003      	beq.n	10016c56 <__smakebuf_r+0x6e>
10016c4e:	2201      	movs	r2, #1
10016c50:	89a3      	ldrh	r3, [r4, #12]
10016c52:	4313      	orrs	r3, r2
10016c54:	81a3      	strh	r3, [r4, #12]
10016c56:	89a3      	ldrh	r3, [r4, #12]
10016c58:	431f      	orrs	r7, r3
10016c5a:	81a7      	strh	r7, [r4, #12]
10016c5c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10016c5e:	46c0      	nop			; (mov r8, r8)
10016c60:	100169f1 	.word	0x100169f1

10016c64 <__sfputc_r>:
10016c64:	6893      	ldr	r3, [r2, #8]
10016c66:	b510      	push	{r4, lr}
10016c68:	3b01      	subs	r3, #1
10016c6a:	6093      	str	r3, [r2, #8]
10016c6c:	2b00      	cmp	r3, #0
10016c6e:	da05      	bge.n	10016c7c <__sfputc_r+0x18>
10016c70:	6994      	ldr	r4, [r2, #24]
10016c72:	42a3      	cmp	r3, r4
10016c74:	db08      	blt.n	10016c88 <__sfputc_r+0x24>
10016c76:	b2cb      	uxtb	r3, r1
10016c78:	2b0a      	cmp	r3, #10
10016c7a:	d005      	beq.n	10016c88 <__sfputc_r+0x24>
10016c7c:	6813      	ldr	r3, [r2, #0]
10016c7e:	1c58      	adds	r0, r3, #1
10016c80:	6010      	str	r0, [r2, #0]
10016c82:	7019      	strb	r1, [r3, #0]
10016c84:	b2c8      	uxtb	r0, r1
10016c86:	e001      	b.n	10016c8c <__sfputc_r+0x28>
10016c88:	f7ff fd32 	bl	100166f0 <__swbuf_r>
10016c8c:	bd10      	pop	{r4, pc}

10016c8e <__sfputs_r>:
10016c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016c90:	0006      	movs	r6, r0
10016c92:	000f      	movs	r7, r1
10016c94:	0014      	movs	r4, r2
10016c96:	18d5      	adds	r5, r2, r3
10016c98:	42ac      	cmp	r4, r5
10016c9a:	d008      	beq.n	10016cae <__sfputs_r+0x20>
10016c9c:	7821      	ldrb	r1, [r4, #0]
10016c9e:	003a      	movs	r2, r7
10016ca0:	0030      	movs	r0, r6
10016ca2:	f7ff ffdf 	bl	10016c64 <__sfputc_r>
10016ca6:	3401      	adds	r4, #1
10016ca8:	1c43      	adds	r3, r0, #1
10016caa:	d1f5      	bne.n	10016c98 <__sfputs_r+0xa>
10016cac:	e000      	b.n	10016cb0 <__sfputs_r+0x22>
10016cae:	2000      	movs	r0, #0
10016cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10016cb4 <_vfiprintf_r>:
10016cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10016cb6:	b09f      	sub	sp, #124	; 0x7c
10016cb8:	0006      	movs	r6, r0
10016cba:	000f      	movs	r7, r1
10016cbc:	9202      	str	r2, [sp, #8]
10016cbe:	9305      	str	r3, [sp, #20]
10016cc0:	2800      	cmp	r0, #0
10016cc2:	d004      	beq.n	10016cce <_vfiprintf_r+0x1a>
10016cc4:	6983      	ldr	r3, [r0, #24]
10016cc6:	2b00      	cmp	r3, #0
10016cc8:	d101      	bne.n	10016cce <_vfiprintf_r+0x1a>
10016cca:	f7ff fed3 	bl	10016a74 <__sinit>
10016cce:	4b7f      	ldr	r3, [pc, #508]	; (10016ecc <_vfiprintf_r+0x218>)
10016cd0:	429f      	cmp	r7, r3
10016cd2:	d101      	bne.n	10016cd8 <_vfiprintf_r+0x24>
10016cd4:	6877      	ldr	r7, [r6, #4]
10016cd6:	e008      	b.n	10016cea <_vfiprintf_r+0x36>
10016cd8:	4b7d      	ldr	r3, [pc, #500]	; (10016ed0 <_vfiprintf_r+0x21c>)
10016cda:	429f      	cmp	r7, r3
10016cdc:	d101      	bne.n	10016ce2 <_vfiprintf_r+0x2e>
10016cde:	68b7      	ldr	r7, [r6, #8]
10016ce0:	e003      	b.n	10016cea <_vfiprintf_r+0x36>
10016ce2:	4b7c      	ldr	r3, [pc, #496]	; (10016ed4 <_vfiprintf_r+0x220>)
10016ce4:	429f      	cmp	r7, r3
10016ce6:	d100      	bne.n	10016cea <_vfiprintf_r+0x36>
10016ce8:	68f7      	ldr	r7, [r6, #12]
10016cea:	89bb      	ldrh	r3, [r7, #12]
10016cec:	071b      	lsls	r3, r3, #28
10016cee:	d50a      	bpl.n	10016d06 <_vfiprintf_r+0x52>
10016cf0:	693b      	ldr	r3, [r7, #16]
10016cf2:	2b00      	cmp	r3, #0
10016cf4:	d007      	beq.n	10016d06 <_vfiprintf_r+0x52>
10016cf6:	2300      	movs	r3, #0
10016cf8:	ad06      	add	r5, sp, #24
10016cfa:	616b      	str	r3, [r5, #20]
10016cfc:	3320      	adds	r3, #32
10016cfe:	766b      	strb	r3, [r5, #25]
10016d00:	3310      	adds	r3, #16
10016d02:	76ab      	strb	r3, [r5, #26]
10016d04:	e03d      	b.n	10016d82 <_vfiprintf_r+0xce>
10016d06:	0039      	movs	r1, r7
10016d08:	0030      	movs	r0, r6
10016d0a:	f7ff fd49 	bl	100167a0 <__swsetup_r>
10016d0e:	2800      	cmp	r0, #0
10016d10:	d0f1      	beq.n	10016cf6 <_vfiprintf_r+0x42>
10016d12:	2001      	movs	r0, #1
10016d14:	4240      	negs	r0, r0
10016d16:	e0d6      	b.n	10016ec6 <_vfiprintf_r+0x212>
10016d18:	9a05      	ldr	r2, [sp, #20]
10016d1a:	1d11      	adds	r1, r2, #4
10016d1c:	6812      	ldr	r2, [r2, #0]
10016d1e:	9105      	str	r1, [sp, #20]
10016d20:	2a00      	cmp	r2, #0
10016d22:	da00      	bge.n	10016d26 <_vfiprintf_r+0x72>
10016d24:	e07f      	b.n	10016e26 <_vfiprintf_r+0x172>
10016d26:	9209      	str	r2, [sp, #36]	; 0x24
10016d28:	3401      	adds	r4, #1
10016d2a:	7823      	ldrb	r3, [r4, #0]
10016d2c:	2b2e      	cmp	r3, #46	; 0x2e
10016d2e:	d100      	bne.n	10016d32 <_vfiprintf_r+0x7e>
10016d30:	e08d      	b.n	10016e4e <_vfiprintf_r+0x19a>
10016d32:	7821      	ldrb	r1, [r4, #0]
10016d34:	2203      	movs	r2, #3
10016d36:	4868      	ldr	r0, [pc, #416]	; (10016ed8 <_vfiprintf_r+0x224>)
10016d38:	f000 fb48 	bl	100173cc <memchr>
10016d3c:	2800      	cmp	r0, #0
10016d3e:	d007      	beq.n	10016d50 <_vfiprintf_r+0x9c>
10016d40:	4b65      	ldr	r3, [pc, #404]	; (10016ed8 <_vfiprintf_r+0x224>)
10016d42:	682a      	ldr	r2, [r5, #0]
10016d44:	1ac0      	subs	r0, r0, r3
10016d46:	2340      	movs	r3, #64	; 0x40
10016d48:	4083      	lsls	r3, r0
10016d4a:	4313      	orrs	r3, r2
10016d4c:	602b      	str	r3, [r5, #0]
10016d4e:	3401      	adds	r4, #1
10016d50:	7821      	ldrb	r1, [r4, #0]
10016d52:	1c63      	adds	r3, r4, #1
10016d54:	2206      	movs	r2, #6
10016d56:	4861      	ldr	r0, [pc, #388]	; (10016edc <_vfiprintf_r+0x228>)
10016d58:	9302      	str	r3, [sp, #8]
10016d5a:	7629      	strb	r1, [r5, #24]
10016d5c:	f000 fb36 	bl	100173cc <memchr>
10016d60:	2800      	cmp	r0, #0
10016d62:	d100      	bne.n	10016d66 <_vfiprintf_r+0xb2>
10016d64:	e09d      	b.n	10016ea2 <_vfiprintf_r+0x1ee>
10016d66:	4b5e      	ldr	r3, [pc, #376]	; (10016ee0 <_vfiprintf_r+0x22c>)
10016d68:	2b00      	cmp	r3, #0
10016d6a:	d000      	beq.n	10016d6e <_vfiprintf_r+0xba>
10016d6c:	e090      	b.n	10016e90 <_vfiprintf_r+0x1dc>
10016d6e:	2207      	movs	r2, #7
10016d70:	9b05      	ldr	r3, [sp, #20]
10016d72:	3307      	adds	r3, #7
10016d74:	4393      	bics	r3, r2
10016d76:	3308      	adds	r3, #8
10016d78:	9305      	str	r3, [sp, #20]
10016d7a:	696b      	ldr	r3, [r5, #20]
10016d7c:	9a03      	ldr	r2, [sp, #12]
10016d7e:	189b      	adds	r3, r3, r2
10016d80:	616b      	str	r3, [r5, #20]
10016d82:	9c02      	ldr	r4, [sp, #8]
10016d84:	7823      	ldrb	r3, [r4, #0]
10016d86:	2b00      	cmp	r3, #0
10016d88:	d104      	bne.n	10016d94 <_vfiprintf_r+0xe0>
10016d8a:	9b02      	ldr	r3, [sp, #8]
10016d8c:	1ae3      	subs	r3, r4, r3
10016d8e:	9304      	str	r3, [sp, #16]
10016d90:	d012      	beq.n	10016db8 <_vfiprintf_r+0x104>
10016d92:	e003      	b.n	10016d9c <_vfiprintf_r+0xe8>
10016d94:	2b25      	cmp	r3, #37	; 0x25
10016d96:	d0f8      	beq.n	10016d8a <_vfiprintf_r+0xd6>
10016d98:	3401      	adds	r4, #1
10016d9a:	e7f3      	b.n	10016d84 <_vfiprintf_r+0xd0>
10016d9c:	9b04      	ldr	r3, [sp, #16]
10016d9e:	9a02      	ldr	r2, [sp, #8]
10016da0:	0039      	movs	r1, r7
10016da2:	0030      	movs	r0, r6
10016da4:	f7ff ff73 	bl	10016c8e <__sfputs_r>
10016da8:	1c43      	adds	r3, r0, #1
10016daa:	d100      	bne.n	10016dae <_vfiprintf_r+0xfa>
10016dac:	e086      	b.n	10016ebc <_vfiprintf_r+0x208>
10016dae:	696a      	ldr	r2, [r5, #20]
10016db0:	9b04      	ldr	r3, [sp, #16]
10016db2:	4694      	mov	ip, r2
10016db4:	4463      	add	r3, ip
10016db6:	616b      	str	r3, [r5, #20]
10016db8:	7823      	ldrb	r3, [r4, #0]
10016dba:	2b00      	cmp	r3, #0
10016dbc:	d07e      	beq.n	10016ebc <_vfiprintf_r+0x208>
10016dbe:	2201      	movs	r2, #1
10016dc0:	2300      	movs	r3, #0
10016dc2:	4252      	negs	r2, r2
10016dc4:	606a      	str	r2, [r5, #4]
10016dc6:	a902      	add	r1, sp, #8
10016dc8:	3254      	adds	r2, #84	; 0x54
10016dca:	1852      	adds	r2, r2, r1
10016dcc:	3401      	adds	r4, #1
10016dce:	602b      	str	r3, [r5, #0]
10016dd0:	60eb      	str	r3, [r5, #12]
10016dd2:	60ab      	str	r3, [r5, #8]
10016dd4:	7013      	strb	r3, [r2, #0]
10016dd6:	65ab      	str	r3, [r5, #88]	; 0x58
10016dd8:	7821      	ldrb	r1, [r4, #0]
10016dda:	2205      	movs	r2, #5
10016ddc:	4841      	ldr	r0, [pc, #260]	; (10016ee4 <_vfiprintf_r+0x230>)
10016dde:	f000 faf5 	bl	100173cc <memchr>
10016de2:	2800      	cmp	r0, #0
10016de4:	d008      	beq.n	10016df8 <_vfiprintf_r+0x144>
10016de6:	4b3f      	ldr	r3, [pc, #252]	; (10016ee4 <_vfiprintf_r+0x230>)
10016de8:	682a      	ldr	r2, [r5, #0]
10016dea:	1ac0      	subs	r0, r0, r3
10016dec:	2301      	movs	r3, #1
10016dee:	4083      	lsls	r3, r0
10016df0:	4313      	orrs	r3, r2
10016df2:	602b      	str	r3, [r5, #0]
10016df4:	3401      	adds	r4, #1
10016df6:	e7ef      	b.n	10016dd8 <_vfiprintf_r+0x124>
10016df8:	682b      	ldr	r3, [r5, #0]
10016dfa:	06da      	lsls	r2, r3, #27
10016dfc:	d504      	bpl.n	10016e08 <_vfiprintf_r+0x154>
10016dfe:	2253      	movs	r2, #83	; 0x53
10016e00:	2120      	movs	r1, #32
10016e02:	a802      	add	r0, sp, #8
10016e04:	1812      	adds	r2, r2, r0
10016e06:	7011      	strb	r1, [r2, #0]
10016e08:	071a      	lsls	r2, r3, #28
10016e0a:	d504      	bpl.n	10016e16 <_vfiprintf_r+0x162>
10016e0c:	2253      	movs	r2, #83	; 0x53
10016e0e:	212b      	movs	r1, #43	; 0x2b
10016e10:	a802      	add	r0, sp, #8
10016e12:	1812      	adds	r2, r2, r0
10016e14:	7011      	strb	r1, [r2, #0]
10016e16:	7822      	ldrb	r2, [r4, #0]
10016e18:	2a2a      	cmp	r2, #42	; 0x2a
10016e1a:	d100      	bne.n	10016e1e <_vfiprintf_r+0x16a>
10016e1c:	e77c      	b.n	10016d18 <_vfiprintf_r+0x64>
10016e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016e20:	2000      	movs	r0, #0
10016e22:	210a      	movs	r1, #10
10016e24:	e005      	b.n	10016e32 <_vfiprintf_r+0x17e>
10016e26:	4252      	negs	r2, r2
10016e28:	60ea      	str	r2, [r5, #12]
10016e2a:	2202      	movs	r2, #2
10016e2c:	4313      	orrs	r3, r2
10016e2e:	602b      	str	r3, [r5, #0]
10016e30:	e77a      	b.n	10016d28 <_vfiprintf_r+0x74>
10016e32:	7822      	ldrb	r2, [r4, #0]
10016e34:	3a30      	subs	r2, #48	; 0x30
10016e36:	2a09      	cmp	r2, #9
10016e38:	d804      	bhi.n	10016e44 <_vfiprintf_r+0x190>
10016e3a:	434b      	muls	r3, r1
10016e3c:	3401      	adds	r4, #1
10016e3e:	189b      	adds	r3, r3, r2
10016e40:	2001      	movs	r0, #1
10016e42:	e7f6      	b.n	10016e32 <_vfiprintf_r+0x17e>
10016e44:	2800      	cmp	r0, #0
10016e46:	d100      	bne.n	10016e4a <_vfiprintf_r+0x196>
10016e48:	e76f      	b.n	10016d2a <_vfiprintf_r+0x76>
10016e4a:	9309      	str	r3, [sp, #36]	; 0x24
10016e4c:	e76d      	b.n	10016d2a <_vfiprintf_r+0x76>
10016e4e:	7863      	ldrb	r3, [r4, #1]
10016e50:	2b2a      	cmp	r3, #42	; 0x2a
10016e52:	d10a      	bne.n	10016e6a <_vfiprintf_r+0x1b6>
10016e54:	9b05      	ldr	r3, [sp, #20]
10016e56:	3402      	adds	r4, #2
10016e58:	1d1a      	adds	r2, r3, #4
10016e5a:	681b      	ldr	r3, [r3, #0]
10016e5c:	9205      	str	r2, [sp, #20]
10016e5e:	2b00      	cmp	r3, #0
10016e60:	da01      	bge.n	10016e66 <_vfiprintf_r+0x1b2>
10016e62:	2301      	movs	r3, #1
10016e64:	425b      	negs	r3, r3
10016e66:	9307      	str	r3, [sp, #28]
10016e68:	e763      	b.n	10016d32 <_vfiprintf_r+0x7e>
10016e6a:	2300      	movs	r3, #0
10016e6c:	200a      	movs	r0, #10
10016e6e:	001a      	movs	r2, r3
10016e70:	3401      	adds	r4, #1
10016e72:	606b      	str	r3, [r5, #4]
10016e74:	7821      	ldrb	r1, [r4, #0]
10016e76:	3930      	subs	r1, #48	; 0x30
10016e78:	2909      	cmp	r1, #9
10016e7a:	d804      	bhi.n	10016e86 <_vfiprintf_r+0x1d2>
10016e7c:	4342      	muls	r2, r0
10016e7e:	3401      	adds	r4, #1
10016e80:	1852      	adds	r2, r2, r1
10016e82:	2301      	movs	r3, #1
10016e84:	e7f6      	b.n	10016e74 <_vfiprintf_r+0x1c0>
10016e86:	2b00      	cmp	r3, #0
10016e88:	d100      	bne.n	10016e8c <_vfiprintf_r+0x1d8>
10016e8a:	e752      	b.n	10016d32 <_vfiprintf_r+0x7e>
10016e8c:	9207      	str	r2, [sp, #28]
10016e8e:	e750      	b.n	10016d32 <_vfiprintf_r+0x7e>
10016e90:	ab05      	add	r3, sp, #20
10016e92:	9300      	str	r3, [sp, #0]
10016e94:	003a      	movs	r2, r7
10016e96:	4b14      	ldr	r3, [pc, #80]	; (10016ee8 <_vfiprintf_r+0x234>)
10016e98:	0029      	movs	r1, r5
10016e9a:	0030      	movs	r0, r6
10016e9c:	e000      	b.n	10016ea0 <_vfiprintf_r+0x1ec>
10016e9e:	bf00      	nop
10016ea0:	e007      	b.n	10016eb2 <_vfiprintf_r+0x1fe>
10016ea2:	ab05      	add	r3, sp, #20
10016ea4:	9300      	str	r3, [sp, #0]
10016ea6:	003a      	movs	r2, r7
10016ea8:	4b0f      	ldr	r3, [pc, #60]	; (10016ee8 <_vfiprintf_r+0x234>)
10016eaa:	0029      	movs	r1, r5
10016eac:	0030      	movs	r0, r6
10016eae:	f000 f88b 	bl	10016fc8 <_printf_i>
10016eb2:	9003      	str	r0, [sp, #12]
10016eb4:	9b03      	ldr	r3, [sp, #12]
10016eb6:	3301      	adds	r3, #1
10016eb8:	d000      	beq.n	10016ebc <_vfiprintf_r+0x208>
10016eba:	e75e      	b.n	10016d7a <_vfiprintf_r+0xc6>
10016ebc:	89bb      	ldrh	r3, [r7, #12]
10016ebe:	065b      	lsls	r3, r3, #25
10016ec0:	d500      	bpl.n	10016ec4 <_vfiprintf_r+0x210>
10016ec2:	e726      	b.n	10016d12 <_vfiprintf_r+0x5e>
10016ec4:	980b      	ldr	r0, [sp, #44]	; 0x2c
10016ec6:	b01f      	add	sp, #124	; 0x7c
10016ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016eca:	46c0      	nop			; (mov r8, r8)
10016ecc:	100184e0 	.word	0x100184e0
10016ed0:	10018500 	.word	0x10018500
10016ed4:	10018520 	.word	0x10018520
10016ed8:	10018546 	.word	0x10018546
10016edc:	1001854a 	.word	0x1001854a
10016ee0:	00000000 	.word	0x00000000
10016ee4:	10018540 	.word	0x10018540
10016ee8:	10016c8f 	.word	0x10016c8f

10016eec <_printf_common>:
10016eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016eee:	0017      	movs	r7, r2
10016ef0:	9301      	str	r3, [sp, #4]
10016ef2:	688a      	ldr	r2, [r1, #8]
10016ef4:	690b      	ldr	r3, [r1, #16]
10016ef6:	9000      	str	r0, [sp, #0]
10016ef8:	000c      	movs	r4, r1
10016efa:	4293      	cmp	r3, r2
10016efc:	da00      	bge.n	10016f00 <_printf_common+0x14>
10016efe:	0013      	movs	r3, r2
10016f00:	0022      	movs	r2, r4
10016f02:	603b      	str	r3, [r7, #0]
10016f04:	3243      	adds	r2, #67	; 0x43
10016f06:	7812      	ldrb	r2, [r2, #0]
10016f08:	2a00      	cmp	r2, #0
10016f0a:	d001      	beq.n	10016f10 <_printf_common+0x24>
10016f0c:	3301      	adds	r3, #1
10016f0e:	603b      	str	r3, [r7, #0]
10016f10:	6823      	ldr	r3, [r4, #0]
10016f12:	069b      	lsls	r3, r3, #26
10016f14:	d502      	bpl.n	10016f1c <_printf_common+0x30>
10016f16:	683b      	ldr	r3, [r7, #0]
10016f18:	3302      	adds	r3, #2
10016f1a:	603b      	str	r3, [r7, #0]
10016f1c:	2506      	movs	r5, #6
10016f1e:	6823      	ldr	r3, [r4, #0]
10016f20:	401d      	ands	r5, r3
10016f22:	d01e      	beq.n	10016f62 <_printf_common+0x76>
10016f24:	0023      	movs	r3, r4
10016f26:	3343      	adds	r3, #67	; 0x43
10016f28:	781b      	ldrb	r3, [r3, #0]
10016f2a:	1e5a      	subs	r2, r3, #1
10016f2c:	4193      	sbcs	r3, r2
10016f2e:	6822      	ldr	r2, [r4, #0]
10016f30:	0692      	lsls	r2, r2, #26
10016f32:	d51c      	bpl.n	10016f6e <_printf_common+0x82>
10016f34:	2030      	movs	r0, #48	; 0x30
10016f36:	18e1      	adds	r1, r4, r3
10016f38:	3143      	adds	r1, #67	; 0x43
10016f3a:	7008      	strb	r0, [r1, #0]
10016f3c:	0021      	movs	r1, r4
10016f3e:	1c5a      	adds	r2, r3, #1
10016f40:	3145      	adds	r1, #69	; 0x45
10016f42:	7809      	ldrb	r1, [r1, #0]
10016f44:	18a2      	adds	r2, r4, r2
10016f46:	3243      	adds	r2, #67	; 0x43
10016f48:	3302      	adds	r3, #2
10016f4a:	7011      	strb	r1, [r2, #0]
10016f4c:	e00f      	b.n	10016f6e <_printf_common+0x82>
10016f4e:	0022      	movs	r2, r4
10016f50:	2301      	movs	r3, #1
10016f52:	3219      	adds	r2, #25
10016f54:	9901      	ldr	r1, [sp, #4]
10016f56:	9800      	ldr	r0, [sp, #0]
10016f58:	9e08      	ldr	r6, [sp, #32]
10016f5a:	47b0      	blx	r6
10016f5c:	1c43      	adds	r3, r0, #1
10016f5e:	d00e      	beq.n	10016f7e <_printf_common+0x92>
10016f60:	3501      	adds	r5, #1
10016f62:	68e3      	ldr	r3, [r4, #12]
10016f64:	683a      	ldr	r2, [r7, #0]
10016f66:	1a9b      	subs	r3, r3, r2
10016f68:	429d      	cmp	r5, r3
10016f6a:	dbf0      	blt.n	10016f4e <_printf_common+0x62>
10016f6c:	e7da      	b.n	10016f24 <_printf_common+0x38>
10016f6e:	0022      	movs	r2, r4
10016f70:	9901      	ldr	r1, [sp, #4]
10016f72:	3243      	adds	r2, #67	; 0x43
10016f74:	9800      	ldr	r0, [sp, #0]
10016f76:	9d08      	ldr	r5, [sp, #32]
10016f78:	47a8      	blx	r5
10016f7a:	1c43      	adds	r3, r0, #1
10016f7c:	d102      	bne.n	10016f84 <_printf_common+0x98>
10016f7e:	2001      	movs	r0, #1
10016f80:	4240      	negs	r0, r0
10016f82:	e020      	b.n	10016fc6 <_printf_common+0xda>
10016f84:	2306      	movs	r3, #6
10016f86:	6820      	ldr	r0, [r4, #0]
10016f88:	68e1      	ldr	r1, [r4, #12]
10016f8a:	683a      	ldr	r2, [r7, #0]
10016f8c:	4003      	ands	r3, r0
10016f8e:	2500      	movs	r5, #0
10016f90:	2b04      	cmp	r3, #4
10016f92:	d103      	bne.n	10016f9c <_printf_common+0xb0>
10016f94:	1a8d      	subs	r5, r1, r2
10016f96:	43eb      	mvns	r3, r5
10016f98:	17db      	asrs	r3, r3, #31
10016f9a:	401d      	ands	r5, r3
10016f9c:	68a3      	ldr	r3, [r4, #8]
10016f9e:	6922      	ldr	r2, [r4, #16]
10016fa0:	4293      	cmp	r3, r2
10016fa2:	dd01      	ble.n	10016fa8 <_printf_common+0xbc>
10016fa4:	1a9b      	subs	r3, r3, r2
10016fa6:	18ed      	adds	r5, r5, r3
10016fa8:	2700      	movs	r7, #0
10016faa:	42bd      	cmp	r5, r7
10016fac:	d00a      	beq.n	10016fc4 <_printf_common+0xd8>
10016fae:	0022      	movs	r2, r4
10016fb0:	2301      	movs	r3, #1
10016fb2:	321a      	adds	r2, #26
10016fb4:	9901      	ldr	r1, [sp, #4]
10016fb6:	9800      	ldr	r0, [sp, #0]
10016fb8:	9e08      	ldr	r6, [sp, #32]
10016fba:	47b0      	blx	r6
10016fbc:	1c43      	adds	r3, r0, #1
10016fbe:	d0de      	beq.n	10016f7e <_printf_common+0x92>
10016fc0:	3701      	adds	r7, #1
10016fc2:	e7f2      	b.n	10016faa <_printf_common+0xbe>
10016fc4:	2000      	movs	r0, #0
10016fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10016fc8 <_printf_i>:
10016fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10016fca:	b08b      	sub	sp, #44	; 0x2c
10016fcc:	9206      	str	r2, [sp, #24]
10016fce:	000a      	movs	r2, r1
10016fd0:	3243      	adds	r2, #67	; 0x43
10016fd2:	9307      	str	r3, [sp, #28]
10016fd4:	9005      	str	r0, [sp, #20]
10016fd6:	9204      	str	r2, [sp, #16]
10016fd8:	7e0a      	ldrb	r2, [r1, #24]
10016fda:	000c      	movs	r4, r1
10016fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
10016fde:	2a6e      	cmp	r2, #110	; 0x6e
10016fe0:	d100      	bne.n	10016fe4 <_printf_i+0x1c>
10016fe2:	e0ab      	b.n	1001713c <_printf_i+0x174>
10016fe4:	d811      	bhi.n	1001700a <_printf_i+0x42>
10016fe6:	2a63      	cmp	r2, #99	; 0x63
10016fe8:	d022      	beq.n	10017030 <_printf_i+0x68>
10016fea:	d809      	bhi.n	10017000 <_printf_i+0x38>
10016fec:	2a00      	cmp	r2, #0
10016fee:	d100      	bne.n	10016ff2 <_printf_i+0x2a>
10016ff0:	e0b5      	b.n	1001715e <_printf_i+0x196>
10016ff2:	2a58      	cmp	r2, #88	; 0x58
10016ff4:	d000      	beq.n	10016ff8 <_printf_i+0x30>
10016ff6:	e0c5      	b.n	10017184 <_printf_i+0x1bc>
10016ff8:	3145      	adds	r1, #69	; 0x45
10016ffa:	700a      	strb	r2, [r1, #0]
10016ffc:	4a81      	ldr	r2, [pc, #516]	; (10017204 <_printf_i+0x23c>)
10016ffe:	e04f      	b.n	100170a0 <_printf_i+0xd8>
10017000:	2a64      	cmp	r2, #100	; 0x64
10017002:	d01d      	beq.n	10017040 <_printf_i+0x78>
10017004:	2a69      	cmp	r2, #105	; 0x69
10017006:	d01b      	beq.n	10017040 <_printf_i+0x78>
10017008:	e0bc      	b.n	10017184 <_printf_i+0x1bc>
1001700a:	2a73      	cmp	r2, #115	; 0x73
1001700c:	d100      	bne.n	10017010 <_printf_i+0x48>
1001700e:	e0aa      	b.n	10017166 <_printf_i+0x19e>
10017010:	d809      	bhi.n	10017026 <_printf_i+0x5e>
10017012:	2a6f      	cmp	r2, #111	; 0x6f
10017014:	d029      	beq.n	1001706a <_printf_i+0xa2>
10017016:	2a70      	cmp	r2, #112	; 0x70
10017018:	d000      	beq.n	1001701c <_printf_i+0x54>
1001701a:	e0b3      	b.n	10017184 <_printf_i+0x1bc>
1001701c:	2220      	movs	r2, #32
1001701e:	6809      	ldr	r1, [r1, #0]
10017020:	430a      	orrs	r2, r1
10017022:	6022      	str	r2, [r4, #0]
10017024:	e037      	b.n	10017096 <_printf_i+0xce>
10017026:	2a75      	cmp	r2, #117	; 0x75
10017028:	d01f      	beq.n	1001706a <_printf_i+0xa2>
1001702a:	2a78      	cmp	r2, #120	; 0x78
1001702c:	d033      	beq.n	10017096 <_printf_i+0xce>
1001702e:	e0a9      	b.n	10017184 <_printf_i+0x1bc>
10017030:	000e      	movs	r6, r1
10017032:	681a      	ldr	r2, [r3, #0]
10017034:	3642      	adds	r6, #66	; 0x42
10017036:	1d11      	adds	r1, r2, #4
10017038:	6019      	str	r1, [r3, #0]
1001703a:	6813      	ldr	r3, [r2, #0]
1001703c:	7033      	strb	r3, [r6, #0]
1001703e:	e0a4      	b.n	1001718a <_printf_i+0x1c2>
10017040:	6821      	ldr	r1, [r4, #0]
10017042:	681a      	ldr	r2, [r3, #0]
10017044:	0608      	lsls	r0, r1, #24
10017046:	d406      	bmi.n	10017056 <_printf_i+0x8e>
10017048:	0649      	lsls	r1, r1, #25
1001704a:	d504      	bpl.n	10017056 <_printf_i+0x8e>
1001704c:	1d11      	adds	r1, r2, #4
1001704e:	6019      	str	r1, [r3, #0]
10017050:	2300      	movs	r3, #0
10017052:	5ed5      	ldrsh	r5, [r2, r3]
10017054:	e002      	b.n	1001705c <_printf_i+0x94>
10017056:	1d11      	adds	r1, r2, #4
10017058:	6019      	str	r1, [r3, #0]
1001705a:	6815      	ldr	r5, [r2, #0]
1001705c:	2d00      	cmp	r5, #0
1001705e:	da3b      	bge.n	100170d8 <_printf_i+0x110>
10017060:	232d      	movs	r3, #45	; 0x2d
10017062:	9a04      	ldr	r2, [sp, #16]
10017064:	426d      	negs	r5, r5
10017066:	7013      	strb	r3, [r2, #0]
10017068:	e036      	b.n	100170d8 <_printf_i+0x110>
1001706a:	6821      	ldr	r1, [r4, #0]
1001706c:	681a      	ldr	r2, [r3, #0]
1001706e:	0608      	lsls	r0, r1, #24
10017070:	d406      	bmi.n	10017080 <_printf_i+0xb8>
10017072:	0649      	lsls	r1, r1, #25
10017074:	d504      	bpl.n	10017080 <_printf_i+0xb8>
10017076:	6815      	ldr	r5, [r2, #0]
10017078:	1d11      	adds	r1, r2, #4
1001707a:	6019      	str	r1, [r3, #0]
1001707c:	b2ad      	uxth	r5, r5
1001707e:	e002      	b.n	10017086 <_printf_i+0xbe>
10017080:	1d11      	adds	r1, r2, #4
10017082:	6019      	str	r1, [r3, #0]
10017084:	6815      	ldr	r5, [r2, #0]
10017086:	4b5f      	ldr	r3, [pc, #380]	; (10017204 <_printf_i+0x23c>)
10017088:	7e22      	ldrb	r2, [r4, #24]
1001708a:	9303      	str	r3, [sp, #12]
1001708c:	2708      	movs	r7, #8
1001708e:	2a6f      	cmp	r2, #111	; 0x6f
10017090:	d01d      	beq.n	100170ce <_printf_i+0x106>
10017092:	270a      	movs	r7, #10
10017094:	e01b      	b.n	100170ce <_printf_i+0x106>
10017096:	0022      	movs	r2, r4
10017098:	2178      	movs	r1, #120	; 0x78
1001709a:	3245      	adds	r2, #69	; 0x45
1001709c:	7011      	strb	r1, [r2, #0]
1001709e:	4a5a      	ldr	r2, [pc, #360]	; (10017208 <_printf_i+0x240>)
100170a0:	6819      	ldr	r1, [r3, #0]
100170a2:	9203      	str	r2, [sp, #12]
100170a4:	1d08      	adds	r0, r1, #4
100170a6:	6822      	ldr	r2, [r4, #0]
100170a8:	6018      	str	r0, [r3, #0]
100170aa:	680d      	ldr	r5, [r1, #0]
100170ac:	0610      	lsls	r0, r2, #24
100170ae:	d402      	bmi.n	100170b6 <_printf_i+0xee>
100170b0:	0650      	lsls	r0, r2, #25
100170b2:	d500      	bpl.n	100170b6 <_printf_i+0xee>
100170b4:	b2ad      	uxth	r5, r5
100170b6:	07d3      	lsls	r3, r2, #31
100170b8:	d502      	bpl.n	100170c0 <_printf_i+0xf8>
100170ba:	2320      	movs	r3, #32
100170bc:	431a      	orrs	r2, r3
100170be:	6022      	str	r2, [r4, #0]
100170c0:	2710      	movs	r7, #16
100170c2:	2d00      	cmp	r5, #0
100170c4:	d103      	bne.n	100170ce <_printf_i+0x106>
100170c6:	2320      	movs	r3, #32
100170c8:	6822      	ldr	r2, [r4, #0]
100170ca:	439a      	bics	r2, r3
100170cc:	6022      	str	r2, [r4, #0]
100170ce:	0023      	movs	r3, r4
100170d0:	2200      	movs	r2, #0
100170d2:	3343      	adds	r3, #67	; 0x43
100170d4:	701a      	strb	r2, [r3, #0]
100170d6:	e002      	b.n	100170de <_printf_i+0x116>
100170d8:	270a      	movs	r7, #10
100170da:	4b4a      	ldr	r3, [pc, #296]	; (10017204 <_printf_i+0x23c>)
100170dc:	9303      	str	r3, [sp, #12]
100170de:	6863      	ldr	r3, [r4, #4]
100170e0:	60a3      	str	r3, [r4, #8]
100170e2:	2b00      	cmp	r3, #0
100170e4:	db09      	blt.n	100170fa <_printf_i+0x132>
100170e6:	2204      	movs	r2, #4
100170e8:	6821      	ldr	r1, [r4, #0]
100170ea:	4391      	bics	r1, r2
100170ec:	6021      	str	r1, [r4, #0]
100170ee:	2d00      	cmp	r5, #0
100170f0:	d105      	bne.n	100170fe <_printf_i+0x136>
100170f2:	9e04      	ldr	r6, [sp, #16]
100170f4:	2b00      	cmp	r3, #0
100170f6:	d011      	beq.n	1001711c <_printf_i+0x154>
100170f8:	e07b      	b.n	100171f2 <_printf_i+0x22a>
100170fa:	2d00      	cmp	r5, #0
100170fc:	d079      	beq.n	100171f2 <_printf_i+0x22a>
100170fe:	9e04      	ldr	r6, [sp, #16]
10017100:	0028      	movs	r0, r5
10017102:	0039      	movs	r1, r7
10017104:	f7fc f910 	bl	10013328 <__aeabi_uidivmod>
10017108:	9b03      	ldr	r3, [sp, #12]
1001710a:	3e01      	subs	r6, #1
1001710c:	5c5b      	ldrb	r3, [r3, r1]
1001710e:	0028      	movs	r0, r5
10017110:	7033      	strb	r3, [r6, #0]
10017112:	0039      	movs	r1, r7
10017114:	f7fc f882 	bl	1001321c <__aeabi_uidiv>
10017118:	1e05      	subs	r5, r0, #0
1001711a:	d1f1      	bne.n	10017100 <_printf_i+0x138>
1001711c:	2f08      	cmp	r7, #8
1001711e:	d109      	bne.n	10017134 <_printf_i+0x16c>
10017120:	6823      	ldr	r3, [r4, #0]
10017122:	07db      	lsls	r3, r3, #31
10017124:	d506      	bpl.n	10017134 <_printf_i+0x16c>
10017126:	6863      	ldr	r3, [r4, #4]
10017128:	6922      	ldr	r2, [r4, #16]
1001712a:	4293      	cmp	r3, r2
1001712c:	dc02      	bgt.n	10017134 <_printf_i+0x16c>
1001712e:	2330      	movs	r3, #48	; 0x30
10017130:	3e01      	subs	r6, #1
10017132:	7033      	strb	r3, [r6, #0]
10017134:	9b04      	ldr	r3, [sp, #16]
10017136:	1b9b      	subs	r3, r3, r6
10017138:	6123      	str	r3, [r4, #16]
1001713a:	e02b      	b.n	10017194 <_printf_i+0x1cc>
1001713c:	6809      	ldr	r1, [r1, #0]
1001713e:	681a      	ldr	r2, [r3, #0]
10017140:	0608      	lsls	r0, r1, #24
10017142:	d407      	bmi.n	10017154 <_printf_i+0x18c>
10017144:	0649      	lsls	r1, r1, #25
10017146:	d505      	bpl.n	10017154 <_printf_i+0x18c>
10017148:	1d11      	adds	r1, r2, #4
1001714a:	6019      	str	r1, [r3, #0]
1001714c:	6813      	ldr	r3, [r2, #0]
1001714e:	8aa2      	ldrh	r2, [r4, #20]
10017150:	801a      	strh	r2, [r3, #0]
10017152:	e004      	b.n	1001715e <_printf_i+0x196>
10017154:	1d11      	adds	r1, r2, #4
10017156:	6019      	str	r1, [r3, #0]
10017158:	6813      	ldr	r3, [r2, #0]
1001715a:	6962      	ldr	r2, [r4, #20]
1001715c:	601a      	str	r2, [r3, #0]
1001715e:	2300      	movs	r3, #0
10017160:	9e04      	ldr	r6, [sp, #16]
10017162:	6123      	str	r3, [r4, #16]
10017164:	e016      	b.n	10017194 <_printf_i+0x1cc>
10017166:	681a      	ldr	r2, [r3, #0]
10017168:	1d11      	adds	r1, r2, #4
1001716a:	6019      	str	r1, [r3, #0]
1001716c:	6816      	ldr	r6, [r2, #0]
1001716e:	2100      	movs	r1, #0
10017170:	6862      	ldr	r2, [r4, #4]
10017172:	0030      	movs	r0, r6
10017174:	f000 f92a 	bl	100173cc <memchr>
10017178:	2800      	cmp	r0, #0
1001717a:	d001      	beq.n	10017180 <_printf_i+0x1b8>
1001717c:	1b80      	subs	r0, r0, r6
1001717e:	6060      	str	r0, [r4, #4]
10017180:	6863      	ldr	r3, [r4, #4]
10017182:	e003      	b.n	1001718c <_printf_i+0x1c4>
10017184:	0026      	movs	r6, r4
10017186:	3642      	adds	r6, #66	; 0x42
10017188:	7032      	strb	r2, [r6, #0]
1001718a:	2301      	movs	r3, #1
1001718c:	6123      	str	r3, [r4, #16]
1001718e:	2300      	movs	r3, #0
10017190:	9a04      	ldr	r2, [sp, #16]
10017192:	7013      	strb	r3, [r2, #0]
10017194:	9b07      	ldr	r3, [sp, #28]
10017196:	aa09      	add	r2, sp, #36	; 0x24
10017198:	9300      	str	r3, [sp, #0]
1001719a:	0021      	movs	r1, r4
1001719c:	9b06      	ldr	r3, [sp, #24]
1001719e:	9805      	ldr	r0, [sp, #20]
100171a0:	f7ff fea4 	bl	10016eec <_printf_common>
100171a4:	1c43      	adds	r3, r0, #1
100171a6:	d102      	bne.n	100171ae <_printf_i+0x1e6>
100171a8:	2001      	movs	r0, #1
100171aa:	4240      	negs	r0, r0
100171ac:	e027      	b.n	100171fe <_printf_i+0x236>
100171ae:	6923      	ldr	r3, [r4, #16]
100171b0:	0032      	movs	r2, r6
100171b2:	9906      	ldr	r1, [sp, #24]
100171b4:	9805      	ldr	r0, [sp, #20]
100171b6:	9d07      	ldr	r5, [sp, #28]
100171b8:	47a8      	blx	r5
100171ba:	1c43      	adds	r3, r0, #1
100171bc:	d0f4      	beq.n	100171a8 <_printf_i+0x1e0>
100171be:	6823      	ldr	r3, [r4, #0]
100171c0:	2500      	movs	r5, #0
100171c2:	079b      	lsls	r3, r3, #30
100171c4:	d40f      	bmi.n	100171e6 <_printf_i+0x21e>
100171c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100171c8:	68e0      	ldr	r0, [r4, #12]
100171ca:	4298      	cmp	r0, r3
100171cc:	da17      	bge.n	100171fe <_printf_i+0x236>
100171ce:	0018      	movs	r0, r3
100171d0:	e015      	b.n	100171fe <_printf_i+0x236>
100171d2:	0022      	movs	r2, r4
100171d4:	2301      	movs	r3, #1
100171d6:	3219      	adds	r2, #25
100171d8:	9906      	ldr	r1, [sp, #24]
100171da:	9805      	ldr	r0, [sp, #20]
100171dc:	9e07      	ldr	r6, [sp, #28]
100171de:	47b0      	blx	r6
100171e0:	1c43      	adds	r3, r0, #1
100171e2:	d0e1      	beq.n	100171a8 <_printf_i+0x1e0>
100171e4:	3501      	adds	r5, #1
100171e6:	68e3      	ldr	r3, [r4, #12]
100171e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100171ea:	1a9b      	subs	r3, r3, r2
100171ec:	429d      	cmp	r5, r3
100171ee:	dbf0      	blt.n	100171d2 <_printf_i+0x20a>
100171f0:	e7e9      	b.n	100171c6 <_printf_i+0x1fe>
100171f2:	0026      	movs	r6, r4
100171f4:	9b03      	ldr	r3, [sp, #12]
100171f6:	3642      	adds	r6, #66	; 0x42
100171f8:	781b      	ldrb	r3, [r3, #0]
100171fa:	7033      	strb	r3, [r6, #0]
100171fc:	e78e      	b.n	1001711c <_printf_i+0x154>
100171fe:	b00b      	add	sp, #44	; 0x2c
10017200:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017202:	46c0      	nop			; (mov r8, r8)
10017204:	10018551 	.word	0x10018551
10017208:	10018562 	.word	0x10018562

1001720c <_putc_r>:
1001720c:	b570      	push	{r4, r5, r6, lr}
1001720e:	0006      	movs	r6, r0
10017210:	000d      	movs	r5, r1
10017212:	0014      	movs	r4, r2
10017214:	2800      	cmp	r0, #0
10017216:	d004      	beq.n	10017222 <_putc_r+0x16>
10017218:	6983      	ldr	r3, [r0, #24]
1001721a:	2b00      	cmp	r3, #0
1001721c:	d101      	bne.n	10017222 <_putc_r+0x16>
1001721e:	f7ff fc29 	bl	10016a74 <__sinit>
10017222:	4b12      	ldr	r3, [pc, #72]	; (1001726c <_putc_r+0x60>)
10017224:	429c      	cmp	r4, r3
10017226:	d101      	bne.n	1001722c <_putc_r+0x20>
10017228:	6874      	ldr	r4, [r6, #4]
1001722a:	e008      	b.n	1001723e <_putc_r+0x32>
1001722c:	4b10      	ldr	r3, [pc, #64]	; (10017270 <_putc_r+0x64>)
1001722e:	429c      	cmp	r4, r3
10017230:	d101      	bne.n	10017236 <_putc_r+0x2a>
10017232:	68b4      	ldr	r4, [r6, #8]
10017234:	e003      	b.n	1001723e <_putc_r+0x32>
10017236:	4b0f      	ldr	r3, [pc, #60]	; (10017274 <_putc_r+0x68>)
10017238:	429c      	cmp	r4, r3
1001723a:	d100      	bne.n	1001723e <_putc_r+0x32>
1001723c:	68f4      	ldr	r4, [r6, #12]
1001723e:	68a3      	ldr	r3, [r4, #8]
10017240:	3b01      	subs	r3, #1
10017242:	60a3      	str	r3, [r4, #8]
10017244:	2b00      	cmp	r3, #0
10017246:	da05      	bge.n	10017254 <_putc_r+0x48>
10017248:	69a2      	ldr	r2, [r4, #24]
1001724a:	4293      	cmp	r3, r2
1001724c:	db08      	blt.n	10017260 <_putc_r+0x54>
1001724e:	b2eb      	uxtb	r3, r5
10017250:	2b0a      	cmp	r3, #10
10017252:	d005      	beq.n	10017260 <_putc_r+0x54>
10017254:	6823      	ldr	r3, [r4, #0]
10017256:	b2e8      	uxtb	r0, r5
10017258:	1c5a      	adds	r2, r3, #1
1001725a:	6022      	str	r2, [r4, #0]
1001725c:	701d      	strb	r5, [r3, #0]
1001725e:	e004      	b.n	1001726a <_putc_r+0x5e>
10017260:	0022      	movs	r2, r4
10017262:	0029      	movs	r1, r5
10017264:	0030      	movs	r0, r6
10017266:	f7ff fa43 	bl	100166f0 <__swbuf_r>
1001726a:	bd70      	pop	{r4, r5, r6, pc}
1001726c:	100184e0 	.word	0x100184e0
10017270:	10018500 	.word	0x10018500
10017274:	10018520 	.word	0x10018520

10017278 <__sread>:
10017278:	b570      	push	{r4, r5, r6, lr}
1001727a:	000c      	movs	r4, r1
1001727c:	250e      	movs	r5, #14
1001727e:	5f49      	ldrsh	r1, [r1, r5]
10017280:	f000 f8b0 	bl	100173e4 <_read_r>
10017284:	2800      	cmp	r0, #0
10017286:	db03      	blt.n	10017290 <__sread+0x18>
10017288:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001728a:	181b      	adds	r3, r3, r0
1001728c:	6563      	str	r3, [r4, #84]	; 0x54
1001728e:	e003      	b.n	10017298 <__sread+0x20>
10017290:	89a2      	ldrh	r2, [r4, #12]
10017292:	4b02      	ldr	r3, [pc, #8]	; (1001729c <__sread+0x24>)
10017294:	4013      	ands	r3, r2
10017296:	81a3      	strh	r3, [r4, #12]
10017298:	bd70      	pop	{r4, r5, r6, pc}
1001729a:	46c0      	nop			; (mov r8, r8)
1001729c:	ffffefff 	.word	0xffffefff

100172a0 <__swrite>:
100172a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100172a2:	001f      	movs	r7, r3
100172a4:	898b      	ldrh	r3, [r1, #12]
100172a6:	0005      	movs	r5, r0
100172a8:	000c      	movs	r4, r1
100172aa:	0016      	movs	r6, r2
100172ac:	05db      	lsls	r3, r3, #23
100172ae:	d505      	bpl.n	100172bc <__swrite+0x1c>
100172b0:	230e      	movs	r3, #14
100172b2:	5ec9      	ldrsh	r1, [r1, r3]
100172b4:	2200      	movs	r2, #0
100172b6:	2302      	movs	r3, #2
100172b8:	f000 f874 	bl	100173a4 <_lseek_r>
100172bc:	89a2      	ldrh	r2, [r4, #12]
100172be:	4b05      	ldr	r3, [pc, #20]	; (100172d4 <__swrite+0x34>)
100172c0:	0028      	movs	r0, r5
100172c2:	4013      	ands	r3, r2
100172c4:	81a3      	strh	r3, [r4, #12]
100172c6:	0032      	movs	r2, r6
100172c8:	230e      	movs	r3, #14
100172ca:	5ee1      	ldrsh	r1, [r4, r3]
100172cc:	003b      	movs	r3, r7
100172ce:	f000 f81f 	bl	10017310 <_write_r>
100172d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100172d4:	ffffefff 	.word	0xffffefff

100172d8 <__sseek>:
100172d8:	b570      	push	{r4, r5, r6, lr}
100172da:	000c      	movs	r4, r1
100172dc:	250e      	movs	r5, #14
100172de:	5f49      	ldrsh	r1, [r1, r5]
100172e0:	f000 f860 	bl	100173a4 <_lseek_r>
100172e4:	89a3      	ldrh	r3, [r4, #12]
100172e6:	1c42      	adds	r2, r0, #1
100172e8:	d103      	bne.n	100172f2 <__sseek+0x1a>
100172ea:	4a05      	ldr	r2, [pc, #20]	; (10017300 <__sseek+0x28>)
100172ec:	4013      	ands	r3, r2
100172ee:	81a3      	strh	r3, [r4, #12]
100172f0:	e004      	b.n	100172fc <__sseek+0x24>
100172f2:	2280      	movs	r2, #128	; 0x80
100172f4:	0152      	lsls	r2, r2, #5
100172f6:	4313      	orrs	r3, r2
100172f8:	81a3      	strh	r3, [r4, #12]
100172fa:	6560      	str	r0, [r4, #84]	; 0x54
100172fc:	bd70      	pop	{r4, r5, r6, pc}
100172fe:	46c0      	nop			; (mov r8, r8)
10017300:	ffffefff 	.word	0xffffefff

10017304 <__sclose>:
10017304:	b510      	push	{r4, lr}
10017306:	230e      	movs	r3, #14
10017308:	5ec9      	ldrsh	r1, [r1, r3]
1001730a:	f000 f815 	bl	10017338 <_close_r>
1001730e:	bd10      	pop	{r4, pc}

10017310 <_write_r>:
10017310:	b570      	push	{r4, r5, r6, lr}
10017312:	0005      	movs	r5, r0
10017314:	0008      	movs	r0, r1
10017316:	0011      	movs	r1, r2
10017318:	2200      	movs	r2, #0
1001731a:	4c06      	ldr	r4, [pc, #24]	; (10017334 <_write_r+0x24>)
1001731c:	6022      	str	r2, [r4, #0]
1001731e:	001a      	movs	r2, r3
10017320:	f7f5 faf2 	bl	1000c908 <_write>
10017324:	1c43      	adds	r3, r0, #1
10017326:	d103      	bne.n	10017330 <_write_r+0x20>
10017328:	6823      	ldr	r3, [r4, #0]
1001732a:	2b00      	cmp	r3, #0
1001732c:	d000      	beq.n	10017330 <_write_r+0x20>
1001732e:	602b      	str	r3, [r5, #0]
10017330:	bd70      	pop	{r4, r5, r6, pc}
10017332:	46c0      	nop			; (mov r8, r8)
10017334:	1001b4f8 	.word	0x1001b4f8

10017338 <_close_r>:
10017338:	2300      	movs	r3, #0
1001733a:	b570      	push	{r4, r5, r6, lr}
1001733c:	4c06      	ldr	r4, [pc, #24]	; (10017358 <_close_r+0x20>)
1001733e:	0005      	movs	r5, r0
10017340:	0008      	movs	r0, r1
10017342:	6023      	str	r3, [r4, #0]
10017344:	f7f1 f86c 	bl	10008420 <_close>
10017348:	1c43      	adds	r3, r0, #1
1001734a:	d103      	bne.n	10017354 <_close_r+0x1c>
1001734c:	6823      	ldr	r3, [r4, #0]
1001734e:	2b00      	cmp	r3, #0
10017350:	d000      	beq.n	10017354 <_close_r+0x1c>
10017352:	602b      	str	r3, [r5, #0]
10017354:	bd70      	pop	{r4, r5, r6, pc}
10017356:	46c0      	nop			; (mov r8, r8)
10017358:	1001b4f8 	.word	0x1001b4f8

1001735c <_fstat_r>:
1001735c:	2300      	movs	r3, #0
1001735e:	b570      	push	{r4, r5, r6, lr}
10017360:	4c06      	ldr	r4, [pc, #24]	; (1001737c <_fstat_r+0x20>)
10017362:	0005      	movs	r5, r0
10017364:	0008      	movs	r0, r1
10017366:	0011      	movs	r1, r2
10017368:	6023      	str	r3, [r4, #0]
1001736a:	f7f1 f85d 	bl	10008428 <_fstat>
1001736e:	1c43      	adds	r3, r0, #1
10017370:	d103      	bne.n	1001737a <_fstat_r+0x1e>
10017372:	6823      	ldr	r3, [r4, #0]
10017374:	2b00      	cmp	r3, #0
10017376:	d000      	beq.n	1001737a <_fstat_r+0x1e>
10017378:	602b      	str	r3, [r5, #0]
1001737a:	bd70      	pop	{r4, r5, r6, pc}
1001737c:	1001b4f8 	.word	0x1001b4f8

10017380 <_isatty_r>:
10017380:	2300      	movs	r3, #0
10017382:	b570      	push	{r4, r5, r6, lr}
10017384:	4c06      	ldr	r4, [pc, #24]	; (100173a0 <_isatty_r+0x20>)
10017386:	0005      	movs	r5, r0
10017388:	0008      	movs	r0, r1
1001738a:	6023      	str	r3, [r4, #0]
1001738c:	f7f1 f852 	bl	10008434 <_isatty>
10017390:	1c43      	adds	r3, r0, #1
10017392:	d103      	bne.n	1001739c <_isatty_r+0x1c>
10017394:	6823      	ldr	r3, [r4, #0]
10017396:	2b00      	cmp	r3, #0
10017398:	d000      	beq.n	1001739c <_isatty_r+0x1c>
1001739a:	602b      	str	r3, [r5, #0]
1001739c:	bd70      	pop	{r4, r5, r6, pc}
1001739e:	46c0      	nop			; (mov r8, r8)
100173a0:	1001b4f8 	.word	0x1001b4f8

100173a4 <_lseek_r>:
100173a4:	b570      	push	{r4, r5, r6, lr}
100173a6:	0005      	movs	r5, r0
100173a8:	0008      	movs	r0, r1
100173aa:	0011      	movs	r1, r2
100173ac:	2200      	movs	r2, #0
100173ae:	4c06      	ldr	r4, [pc, #24]	; (100173c8 <_lseek_r+0x24>)
100173b0:	6022      	str	r2, [r4, #0]
100173b2:	001a      	movs	r2, r3
100173b4:	f7f1 f840 	bl	10008438 <_lseek>
100173b8:	1c43      	adds	r3, r0, #1
100173ba:	d103      	bne.n	100173c4 <_lseek_r+0x20>
100173bc:	6823      	ldr	r3, [r4, #0]
100173be:	2b00      	cmp	r3, #0
100173c0:	d000      	beq.n	100173c4 <_lseek_r+0x20>
100173c2:	602b      	str	r3, [r5, #0]
100173c4:	bd70      	pop	{r4, r5, r6, pc}
100173c6:	46c0      	nop			; (mov r8, r8)
100173c8:	1001b4f8 	.word	0x1001b4f8

100173cc <memchr>:
100173cc:	b2c9      	uxtb	r1, r1
100173ce:	1882      	adds	r2, r0, r2
100173d0:	4290      	cmp	r0, r2
100173d2:	d004      	beq.n	100173de <memchr+0x12>
100173d4:	7803      	ldrb	r3, [r0, #0]
100173d6:	428b      	cmp	r3, r1
100173d8:	d002      	beq.n	100173e0 <memchr+0x14>
100173da:	3001      	adds	r0, #1
100173dc:	e7f8      	b.n	100173d0 <memchr+0x4>
100173de:	2000      	movs	r0, #0
100173e0:	4770      	bx	lr
	...

100173e4 <_read_r>:
100173e4:	b570      	push	{r4, r5, r6, lr}
100173e6:	0005      	movs	r5, r0
100173e8:	0008      	movs	r0, r1
100173ea:	0011      	movs	r1, r2
100173ec:	2200      	movs	r2, #0
100173ee:	4c06      	ldr	r4, [pc, #24]	; (10017408 <_read_r+0x24>)
100173f0:	6022      	str	r2, [r4, #0]
100173f2:	001a      	movs	r2, r3
100173f4:	f7f5 fa68 	bl	1000c8c8 <_read>
100173f8:	1c43      	adds	r3, r0, #1
100173fa:	d103      	bne.n	10017404 <_read_r+0x20>
100173fc:	6823      	ldr	r3, [r4, #0]
100173fe:	2b00      	cmp	r3, #0
10017400:	d000      	beq.n	10017404 <_read_r+0x20>
10017402:	602b      	str	r3, [r5, #0]
10017404:	bd70      	pop	{r4, r5, r6, pc}
10017406:	46c0      	nop			; (mov r8, r8)
10017408:	1001b4f8 	.word	0x1001b4f8
1001740c:	6e6f6420 	.word	0x6e6f6420
10017410:	00002165 	.word	0x00002165
10017414:	0000000d 	.word	0x0000000d
10017418:	3a4f2f54 	.word	0x3a4f2f54
1001741c:	46464f20 	.word	0x46464f20
10017420:	00000000 	.word	0x00000000
10017424:	736d735b 	.word	0x736d735b
10017428:	656c625f 	.word	0x656c625f
1001742c:	776f705f 	.word	0x776f705f
10017430:	645f7265 	.word	0x645f7265
10017434:	5d6e776f 	.word	0x5d6e776f
10017438:	00000000 	.word	0x00000000
1001743c:	3a4f2f54 	.word	0x3a4f2f54
10017440:	30303520 	.word	0x30303520
10017444:	736d2030 	.word	0x736d2030
10017448:	00000000 	.word	0x00000000
1001744c:	736d735b 	.word	0x736d735b
10017450:	656c625f 	.word	0x656c625f
10017454:	6961705f 	.word	0x6961705f
10017458:	5f646572 	.word	0x5f646572
1001745c:	005d6e66 	.word	0x005d6e66
10017460:	736d735b 	.word	0x736d735b
10017464:	656c625f 	.word	0x656c625f
10017468:	7664615f 	.word	0x7664615f
1001746c:	69747265 	.word	0x69747265
10017470:	095d6573 	.word	0x095d6573
10017474:	65766441 	.word	0x65766441
10017478:	73697472 	.word	0x73697472
1001747c:	6e656d65 	.word	0x6e656d65
10017480:	61642074 	.word	0x61642074
10017484:	73206174 	.word	0x73206174
10017488:	66207465 	.word	0x66207465
1001748c:	656c6961 	.word	0x656c6961
10017490:	00002164 	.word	0x00002164
10017494:	736d735b 	.word	0x736d735b
10017498:	7265735f 	.word	0x7265735f
1001749c:	65636976 	.word	0x65636976
100174a0:	7664615f 	.word	0x7664615f
100174a4:	69747265 	.word	0x69747265
100174a8:	095d6573 	.word	0x095d6573
100174ac:	20454c42 	.word	0x20454c42
100174b0:	65766441 	.word	0x65766441
100174b4:	73697472 	.word	0x73697472
100174b8:	6e656d65 	.word	0x6e656d65
100174bc:	74732074 	.word	0x74732074
100174c0:	20747261 	.word	0x20747261
100174c4:	6c696166 	.word	0x6c696166
100174c8:	203a6465 	.word	0x203a6465
100174cc:	73616572 	.word	0x73616572
100174d0:	30206e6f 	.word	0x30206e6f
100174d4:	00782578 	.word	0x00782578
100174d8:	20642520 	.word	0x20642520
100174dc:	454e4f47 	.word	0x454e4f47
100174e0:	0000203f 	.word	0x0000203f
100174e4:	3a4f2f54 	.word	0x3a4f2f54
100174e8:	6d303220 	.word	0x6d303220
100174ec:	00000073 	.word	0x00000073
100174f0:	49544f4e 	.word	0x49544f4e
100174f4:	41434946 	.word	0x41434946
100174f8:	4e4f4954 	.word	0x4e4f4954
100174fc:	52524520 	.word	0x52524520
10017500:	2121524f 	.word	0x2121524f
10017504:	00000000 	.word	0x00000000

10017508 <sms_ble_gap_cb>:
	...
10017514:	10008acd 00000000 10008ae5 10008c19     ................
	...
1001752c:	10008b39 10008935 00000000 00000000     9...5...........
	...

10017554 <sms_ble_gatt_server_cb>:
10017554:	10008951 100089c5 00000000 00000000     Q...............
	...
1001757c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
1001758c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
1001759c:	656c6968 74657320 676e6974 20707520     hile setting up 
100175ac:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
100175bc:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
100175cc:	6c626f72 77206d65 656c6968 74657320     roblem while set
100175dc:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
100175ec:	65737520 75622072 6e6f7474 00000000      user button....
100175fc:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
1001760c:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
1001761c:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
1001762c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
1001763c:	5d736563 72655309 65636976 65642073     ces].Services de
1001764c:	696e6966 6620676e 656c6961 72202c64     fining failed, r
1001765c:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
1001766c:	206d656c 6c696877 65732065 6e697474     lem while settin
1001767c:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
1001768c:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
1001769c:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
100176ac:	7320656c 69747465 7520676e 4d492070     le setting up IM
100176bc:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
100176cc:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
100176dc:	73656369 6553095d 63697672 64207365     ices].Services d
100176ec:	6e696665 20676e69 6c696166 202c6465     efining failed, 
100176fc:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
1001770c:	6572705f 72757373 65645f65 656e6966     _pressure_define
1001771c:	7265735f 65636976 53095d73 69767265     _services].Servi
1001772c:	20736563 69666564 676e696e 69616620     ces defining fai
1001773c:	2c64656c 61657220 206e6f73 78257830     led, reason 0x%x
1001774c:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
1001775c:	5f317265 005d6e66 736d735b 6175645f     er1_fn].[sms_dua
1001776c:	6d69746c 5f327265 005d6e66 1000b8e8     ltimer2_fn].....
1001777c:	1000b8f6 1000b904 1000b912 1000b920     ............ ...
1001778c:	1000b92e 1000b93c 1000b94c 1000b95c     ....<...L...\...
1001779c:	1000b96c 1000b97c 1000b98c 1000b99c     l...|...........
100177ac:	1000b9ac 1000b9bc 1000b9cc 1000b9dc     ................
100177bc:	1000b9ec 1000b9fc 1000ba0c 1000ba1c     ................
100177cc:	1000ba2c 1000ba3c 1000ba4c 1000ba5c     ,...<...L...\...
100177dc:	1000ba6c 1000ba7c 1000ba8c 1000ba9a     l...|...........
100177ec:	1000baa8 1000bab6 1000bac4 1000bad2     ................
100177fc:	1000bae0 1000baee 1000bafc 1000bb0c     ................
1001780c:	1000bb1c 1000bb2c 1000bb3c 1000bb4c     ....,...<...L...
1001781c:	1000bb5c 1000bb6c 1000bb7c 1000bb8c     \...l...|.......
1001782c:	1000bb9c 1000bbac 1000bbbc 1000bbcc     ................
1001783c:	1000bbdc 1000bbec 1000bbfc 1000bc0a     ................
1001784c:	1000bc18 1000bc44 1000bc52 1000bc60     ....D...R...`...
1001785c:	1000bc6e 1000bc7c 1000bc8a 1000bc98     n...|...........
1001786c:	1000bca6 1000bcb4 1000bcc2 1000bcd0     ................
1001787c:	1000bcde 1000bcec 1000bcfa 1000bd08     ................
1001788c:	1000bd16 1000bd24 1000bd32 1000bd40     ....$...2...@...
1001789c:	1000bd4e 1000bd5c 1000bd6a 1000bd78     N...\...j...x...
100178ac:	1000bd86 1000bd94 1000bda2 1000bdb0     ................
100178bc:	1000bdbe 1000bdcc 1000bdda 1000bde8     ................
100178cc:	1000bdf6 1000be04 1000be12 1000be20     ............ ...
100178dc:	1000be2e 1000be3c 1000be4a 1000be58     ....<...J...X...
100178ec:	1000be66 1000be74 1000be82 1000be90     f...t...........
100178fc:	1000be9e 1000beac 1000beba 1000bec8     ................
1001790c:	1000bed6 1000bee4 1000bef2 1000bf00     ................
1001791c:	1000bf0e 1000bf1c 1000bf2a 1000bfc4     ........*.......
1001792c:	1000bfec 1000c014 1000c03c 1000c27c     ........<...|...
1001793c:	1000c06c 1000c084 1000c0fc 1000c114     l...............
1001794c:	1000c09c 1000c0b4 1000c0cc 1000c0e4     ................
1001795c:	1000c12c 1000c3f0 1000c3f0 1000c3f0     ,...............
1001796c:	1000c3f0 1000c3f0 1000c3f0 1000c3f0     ................
1001797c:	1000c3f0 1000c1d4 1000c1ec 1000c204     ................
1001798c:	1000c292 1000c15c 1000c3f0 1000c3f0     ....\...........
1001799c:	1000c3f0 1000c3f0 1000c3f0 1000c3f0     ................
100179ac:	1000c21c 1000c234 1000c24c 1000c264     ....4...L...d...
100179bc:	1000c3f0 1000c3a8 1000c3c0 1000c3f0     ................
100179cc:	1000c3f0 1000c2be 1000c2d4 1000c2ea     ................
100179dc:	1000c300 1000c3f0 1000c3f0 1000c3f0     ................
100179ec:	1000c3f0 1000c3f0 1000c3f0 1000c3f0     ................
100179fc:	1000c3f0 1000bfb0 1000bfd8 1000c000     ................
10017a0c:	1000c028 1000c054 1000c144 1000c174     (...T...D...t...
10017a1c:	1000c18c 1000c1a4 1000c1bc 1000c2a8     ................
10017a2c:	1000c316 1000c390 1000c3d8 1000ca40     ............@...
10017a3c:	1000ca42 1000ca28 1000ca28 1000ca28     B...(...(...(...
10017a4c:	1000ca40 1000ca28 1000ca28 1000d286     @...(...(.......
10017a5c:	1000d2fa 1000d26e 1000d300 1000d274     ....n.......t...
10017a6c:	1000d27a 1000d280 1000d920 1000d920     z....... ... ...
10017a7c:	1000d920 1000d920 1000d920 1000d920      ... ... ... ...
10017a8c:	1000d920 1000d920 1000d920 1000d920      ... ... ... ...
10017a9c:	1000d920 1000d920 1000d920 1000d920      ... ... ... ...
10017aac:	1000d920 1000d920 1000d920 1000d920      ... ... ... ...
10017abc:	1000d920 1000d93e 1000d93e 1000d93e      ...>...>...>...
10017acc:	1000d93e 1000d93e 1000d93e 1000d93e     >...>...>...>...
10017adc:	1000d93e 1000d93e 1000d93e 1000d960     >...>...>...`...
10017aec:	1000d960 1000d960 1000d960 1000d960     `...`...`...`...
10017afc:	1000d960 1000d960 1000d960 1000d960     `...`...`...`...
10017b0c:	1000d960 1000d982 1000d982 1000d982     `...............
10017b1c:	1000d982 1000d982 1000d982 1000d99c     ................
10017b2c:	1000d99c 1000d99c 1000d99c 1000d99c     ................
10017b3c:	1000d99c 1000d99c 1000d99c 1000d99c     ................
10017b4c:	1000d9b6 1000d9b6 1000d9d8 1000d9d8     ................
10017b5c:	1000d9f2 1000d9d8 34333231 00003635     ........123456..
10017b6c:	efcdab00 00efcdab                       ........

10017b74 <ble_mgr_gatt_server_handle>:
	...
10017b8c:	1000c95d 1000c9c1 1000c961 00000000     ].......a.......
10017b9c:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10017bac:	00000000 65766441 73697472 20676e69     ....Advertising 
10017bbc:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10017bcc:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10017bdc:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10017bec:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10017bfc:	69766544 64206563 6f637369 63656e6e     Device disconnec
10017c0c:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10017c1c:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10017c2c:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017c3c:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017c4c:	6c706d6f 64657465 63757320 73736563     ompleted success
10017c5c:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017c6c:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017c7c:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017c8c:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10017c9c:	7320666f 206e6163 69766564 72206563     of scan device r
10017cac:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10017cbc:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10017ccc:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10017cdc:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10017cec:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10017cfc:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10017d0c:	46207473 656c6961 00000064 72696150     st Failed...Pair
10017d1c:	20676e69 636f7270 72756465 6f632065     ing procedure co
10017d2c:	656c706d 20646574 63637573 66737365     mpleted successf
10017d3c:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10017d4c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10017d5c:	726f7473 68742065 61702065 6e697269     store the pairin
10017d6c:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10017d7c:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017d8c:	76616c53 65532065 69727563 52207974     Slave Security R
10017d9c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017dac:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10017dbc:	71655220 74736575 41202d20 65687475      Request - Authe
10017dcc:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10017ddc:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10017dec:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10017dfc:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10017e0c:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10017e1c:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10017e2c:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10017e3c:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10017e4c:	206e6f28 6568746f 65442072 65636976     (on other Device
10017e5c:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10017e6c:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10017e7c:	74616546 20657275 20746f4e 70707573     Feature Not supp
10017e8c:	6574726f 00000064 65746e45 20646572     orted...Entered 
10017e9c:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10017eac:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10017ebc:	7020666f 20726565 69766564 69206563     of peer device i
10017ecc:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10017edc:	00000000 61656c50 75206573 6961706e     ....Please unpai
10017eec:	68742072 65642065 65636976 6f726620     r the device fro
10017efc:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10017f0c:	656c6962 65732029 6e697474 6d207367     bile) settings m
10017f1c:	20756e65 20646e61 72617473 61702074     enu and start pa
10017f2c:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10017f3c:	69747079 52206e6f 65757165 52207473     yption Request R
10017f4c:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10017f5c:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10017f6c:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10017f7c:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10017f8c:	09095d74 61656c50 63206573 6b636568     t]..Please check
10017f9c:	65687420 776f7020 61207265 6320646e      the power and c
10017fac:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10017fbc:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10017fcc:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10017fdc:	6e206563 20656d61 20746573 6c696166     ce name set fail
10017fec:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
10017ffc:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
1001800c:	73736572 74656720 69616620 0064656c     ress get failed.
1001801c:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
1001802c:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
1001803c:	20656369 666e6f63 72756769 6f697461     ice configuratio
1001804c:	6166206e 64656c69 00000000 656c625b     n failed....[ble
1001805c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
1001806c:	74655309 454c4220 76654420 20656369     .Set BLE Device 
1001807c:	72646441 20737365 6c696166 00006465     Address failed..
1001808c:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
1001809c:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
100180ac:	65732065 69727563 72207974 65757165     e security reque
100180bc:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100180cc:	65746365 6f742064 65657020 65642072     ected to peer de
100180dc:	65636976 74697720 64612068 73657264     vice with addres
100180ec:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100180fc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001810c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001811c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001812c:	61522067 6d6f646e 64646120 73736572     g Random address
1001813c:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
1001814c:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001815c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001816c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001817c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001818c:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001819c:	53202d20 75746174 25203a73 00000064      - Status: %d...
100181ac:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
100181bc:	73697472 6e656d65 61642074 73206174     rtisement data s
100181cc:	66207465 656c6961 00000064              et failed...

100181d8 <ble_mgr_gap_handle>:
100181d8:	1000c959 1000cb3d 1000c971 1000c999     Y...=...q.......
100181e8:	00000000 1000d5e9 1000c9f1 1000c96d     ............m...
100181f8:	1000ccdd 1000cbbd 1000cedd 1000ccf5     ................
10018208:	1000d02d 1000d171 1000ca79 1000d825     -...q...y...%...
	...
10018224:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
10018234:	2055504d 696c6163 74617262 2e2e6465     MPU calibrated..
10018244:	6962202e 76207361 65756c61 25203a73     . bias values: %
10018254:	2520646c 2520646c 2f20646c 646c2520     ld %ld %ld / %ld
10018264:	646c2520 646c2520 00000000 706d6f43      %ld %ld....Comp
10018274:	20737361 20746f6e 65726568 002e2e2e     ass not here....
10018284:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10018294:	316e7442 746e6920 202e2e2e 00000000     Btn1 int... ....
100182a4:	2055504d 20746e69 646c2528 2e2e2e29     MPU int (%ld)...
100182b4:	00000020 656d6954 69203172 2e2e746e      ...Timer1 int..
100182c4:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
100182d4:	0000202e 2055504d 646e6573 20676e69     . ..MPU sending 
100182e4:	2f642528 2e296425 00202e2e 73756c66     (%d/%d)... .flus
100182f4:	676e6968 00000021 73657250 65732073     hing!...Press se
10018304:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10018314:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10018324:	6e657645 65672074 69742074 756f656d     Event get timeou
10018334:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
10018344:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
10018354:	04022e70                                         p.

10018356 <CSWTCH.45>:
10018356:	00100402                                         ...

10018359 <CSWTCH.47>:
10018359:	03010300 03030303 03030303 02020303              ...............

10018368 <client_conf_uuid>:
10018368:	29042902                                         .)

1001836a <presentation_format_uuid>:
1001836a:	29012904                                         .)

1001836c <user_desc_uuid>:
1001836c:	29032901                                         .)

1001836e <server_conf_uuid>:
1001836e:	29002903                                         .)

10018370 <extended_props_uuid>:
10018370:	28022900                                         .)

10018372 <include_uuid>:
10018372:	28032802                                         .(

10018374 <char_uuid>:
10018374:	00002803 00776f70 74727173 00000066     .(..pow.sqrtf...
10018384:	00000000                                ....

10018388 <TWO52>:
10018388:	00000000 43300000 00000000 c3300000     ......0C......0.
10018398:	10013afa 10013a1e 10013adc 10013ab4     .:...:...:...:..
100183a8:	10013adc 10013aa8 10013adc 10013ab4     .:...:...:...:..
100183b8:	10013a1e 10013a1e 10013aa8 10013ab4     .:...:...:...:..
100183c8:	10013b60 10013b60 10013b60 10013ae2     `;..`;..`;...:..
100183d8:	10013a1e 10013a1e 10013ac8 10013ab2     .:...:...:...:..
100183e8:	10013ac8 10013aa8 10013ac8 10013ab2     .:...:...:...:..
100183f8:	10013a1e 10013a1e 10013aa8 10013ab2     .:...:...:...:..
10018408:	10013b60 10013b60 10013b60 10013b6c     `;..`;..`;..l;..
10018418:	10013e58 10013db6 10013db6 10013db4     X>...=...=...=..
10018428:	10013e4a 10013e4a 10013e40 10013db4     J>..J>..@>...=..
10018438:	10013e4a 10013e40 10013e4a 10013db4     J>..@>..J>...=..
10018448:	10013e50 10013e50 10013e50 10013eda     P>..P>..P>...>..
10018458:	10014c38 10014b06 10014c0c 10014afc     8L...K...L...J..
10018468:	10014c0c 10014c16 10014c0c 10014afc     .L...L...L...J..
10018478:	10014b06 10014b06 10014c16 10014afc     .K...K...L...J..
10018488:	10014af2 10014af2 10014af2 10014e68     .J...J...J..hN..
10018498:	10015480 10015340 10015340 1001533e     .T..@S..@S..>S..
100184a8:	10015458 10015458 1001544a 1001533e     XT..XT..JT..>S..
100184b8:	10015458 1001544a 10015458 1001533e     XT..JT..XT..>S..
100184c8:	10015460 10015460 10015460 10015660     `T..`T..`T..`V..
100184d8:	00000043                                C...

100184dc <_global_impure_ptr>:
100184dc:	100185a0                                ....

100184e0 <__sf_fake_stdin>:
	...

10018500 <__sf_fake_stdout>:
	...

10018520 <__sf_fake_stderr>:
	...
10018540:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018550:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018560:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018570:	00006665                                ef..

10018574 <_init>:
10018574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018576:	46c0      	nop			; (mov r8, r8)
10018578:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001857a:	bc08      	pop	{r3}
1001857c:	469e      	mov	lr, r3
1001857e:	4770      	bx	lr

10018580 <__init_array_start>:
10018580:	100080b1 	.word	0x100080b1

10018584 <_fini>:
10018584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018586:	46c0      	nop			; (mov r8, r8)
10018588:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001858a:	bc08      	pop	{r3}
1001858c:	469e      	mov	lr, r3
1001858e:	4770      	bx	lr

10018590 <__fini_array_start>:
10018590:	10008089 	.word	0x10008089
