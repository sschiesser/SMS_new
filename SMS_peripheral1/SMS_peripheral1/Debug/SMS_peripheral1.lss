
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ec70  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10016c70  10016c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea8  10016d1c  10016d1c  00016d1c  2**2
                  ALLOC
  3 .stack        00000804  10019bc4  10019bc4  00016d1c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00016d1c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00016d44  2**0
                  CONTENTS, READONLY
  6 .debug_info   000509ba  00000000  00000000  00016df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000597e  00000000  00000000  000677b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b7a9  00000000  00000000  0006d130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d88  00000000  00000000  000788d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e00  00000000  00000000  00079661  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e88  00000000  00000000  0007a461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018d12  00000000  00000000  000a32e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014723c  00000000  00000000  000bbffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f48  00000000  00000000  00203238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10016c70 	.word	0x10016c70
10008068:	10016c70 	.word	0x10016c70
1000806c:	10016d1c 	.word	0x10016d1c
10008070:	10019bc4 	.word	0x10019bc4
10008074:	10016d1c 	.word	0x10016d1c
10008078:	10016c74 	.word	0x10016c74
1000807c:	10016d20 	.word	0x10016d20
10008080:	10014339 	.word	0x10014339
10008084:	1000eef9 	.word	0x1000eef9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10016d1c 	.word	0x10016d1c
100080a8:	00000000 	.word	0x00000000
100080ac:	10016c70 	.word	0x10016c70

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10016d20 	.word	0x10016d20
100080dc:	10016c70 	.word	0x10016c70
100080e0:	10016c70 	.word	0x10016c70
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c13d 	.word	0x1000c13d
10008114:	10012641 	.word	0x10012641
10008118:	10016c74 	.word	0x10016c74
1000811c:	000f4240 	.word	0x000f4240
10008120:	10016c70 	.word	0x10016c70
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	10014545 	.word	0x10014545
10008160:	10016c74 	.word	0x10016c74
10008164:	e000e010 	.word	0xe000e010
10008168:	10015570 	.word	0x10015570
1000816c:	10014511 	.word	0x10014511

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	10016d38 	.word	0x10016d38

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	10016d38 	.word	0x10016d38

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	10016d38 	.word	0x10016d38

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b29      	ldr	r3, [pc, #164]	; (10008290 <aon_sleep_timer_init+0xac>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a26      	ldr	r2, [pc, #152]	; (10008290 <aon_sleep_timer_init+0xac>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a22      	ldr	r2, [pc, #136]	; (10008290 <aon_sleep_timer_init+0xac>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b21      	ldr	r3, [pc, #132]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d1f      	ldr	r5, [pc, #124]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b0e      	ldr	r3, [pc, #56]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0b      	ldr	r3, [pc, #44]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d106      	bne.n	10008284 <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4907      	ldr	r1, [pc, #28]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008284:	4904      	ldr	r1, [pc, #16]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008286:	202b      	movs	r0, #43	; 0x2b
10008288:	4b04      	ldr	r3, [pc, #16]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000828a:	4798      	blx	r3
}
1000828c:	b003      	add	sp, #12
1000828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008290:	4000e000 	.word	0x4000e000
10008294:	4000d000 	.word	0x4000d000
10008298:	100081b1 	.word	0x100081b1
1000829c:	1000cc79 	.word	0x1000cc79

100082a0 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a2:	4657      	mov	r7, sl
100082a4:	464e      	mov	r6, r9
100082a6:	4645      	mov	r5, r8
100082a8:	b4e0      	push	{r5, r6, r7}
100082aa:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100082ac:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100082ae:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100082b0:	2d00      	cmp	r5, #0
100082b2:	d033      	beq.n	1000831c <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
100082b4:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082b6:	2428      	movs	r4, #40	; 0x28
100082b8:	5d1a      	ldrb	r2, [r3, r4]
100082ba:	07d2      	lsls	r2, r2, #31
100082bc:	d4fc      	bmi.n	100082b8 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082be:	2201      	movs	r2, #1
100082c0:	2434      	movs	r4, #52	; 0x34
100082c2:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082c4:	3c14      	subs	r4, #20
100082c6:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082c8:	880a      	ldrh	r2, [r1, #0]
100082ca:	0052      	lsls	r2, r2, #1
100082cc:	2402      	movs	r4, #2
100082ce:	34ff      	adds	r4, #255	; 0xff
100082d0:	4322      	orrs	r2, r4
100082d2:	b292      	uxth	r2, r2
100082d4:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082d6:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
100082d8:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082da:	4222      	tst	r2, r4
100082dc:	d0fc      	beq.n	100082d8 <_i2c_master_read_packet+0x38>
100082de:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
100082e0:	1e6c      	subs	r4, r5, #1
100082e2:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082e4:	2420      	movs	r4, #32
100082e6:	46a1      	mov	r9, r4
100082e8:	2400      	movs	r4, #0
100082ea:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ec:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
100082ee:	7944      	ldrb	r4, [r0, #5]
100082f0:	2c00      	cmp	r4, #0
100082f2:	d104      	bne.n	100082fe <_i2c_master_read_packet+0x5e>
100082f4:	4562      	cmp	r2, ip
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	464c      	mov	r4, r9
100082fa:	4647      	mov	r7, r8
100082fc:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
100082fe:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008300:	4234      	tst	r4, r6
10008302:	d008      	beq.n	10008316 <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
10008304:	1c54      	adds	r4, r2, #1
10008306:	46a2      	mov	sl, r4
10008308:	791f      	ldrb	r7, [r3, #4]
1000830a:	684c      	ldr	r4, [r1, #4]
1000830c:	54a7      	strb	r7, [r4, r2]
1000830e:	4652      	mov	r2, sl
10008310:	466c      	mov	r4, sp
10008312:	80e2      	strh	r2, [r4, #6]
10008314:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
10008316:	42aa      	cmp	r2, r5
10008318:	d3e9      	bcc.n	100082ee <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
1000831a:	2300      	movs	r3, #0
}
1000831c:	0018      	movs	r0, r3
1000831e:	b002      	add	sp, #8
10008320:	bc1c      	pop	{r2, r3, r4}
10008322:	4690      	mov	r8, r2
10008324:	4699      	mov	r9, r3
10008326:	46a2      	mov	sl, r4
10008328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000832a:	46c0      	nop			; (mov r8, r8)

1000832c <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000832c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000832e:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
10008330:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008332:	884e      	ldrh	r6, [r1, #2]
10008334:	2428      	movs	r4, #40	; 0x28
10008336:	5d13      	ldrb	r3, [r2, r4]
10008338:	07db      	lsls	r3, r3, #31
1000833a:	d4fc      	bmi.n	10008336 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000833c:	2301      	movs	r3, #1
1000833e:	2434      	movs	r4, #52	; 0x34
10008340:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
10008342:	3c14      	subs	r4, #20
10008344:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008346:	880b      	ldrh	r3, [r1, #0]
10008348:	005b      	lsls	r3, r3, #1
1000834a:	34e0      	adds	r4, #224	; 0xe0
1000834c:	4323      	orrs	r3, r4
1000834e:	b29b      	uxth	r3, r3
10008350:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
10008352:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008354:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008356:	7a13      	ldrb	r3, [r2, #8]
10008358:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000835a:	421d      	tst	r5, r3
1000835c:	d004      	beq.n	10008368 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000835e:	1c67      	adds	r7, r4, #1
10008360:	6848      	ldr	r0, [r1, #4]
10008362:	5d04      	ldrb	r4, [r0, r4]
10008364:	8014      	strh	r4, [r2, #0]
10008366:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008368:	42b4      	cmp	r4, r6
1000836a:	d3f4      	bcc.n	10008356 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000836c:	06db      	lsls	r3, r3, #27
1000836e:	d403      	bmi.n	10008378 <_i2c_master_write_packet+0x4c>
10008370:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
10008372:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008374:	420b      	tst	r3, r1
10008376:	d0fc      	beq.n	10008372 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008378:	4663      	mov	r3, ip
1000837a:	795b      	ldrb	r3, [r3, #5]
1000837c:	2b00      	cmp	r3, #0
1000837e:	d102      	bne.n	10008386 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008380:	2100      	movs	r1, #0
10008382:	3320      	adds	r3, #32
10008384:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008386:	2000      	movs	r0, #0
10008388:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000838a:	46c0      	nop			; (mov r8, r8)

1000838c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000838c:	2303      	movs	r3, #3
1000838e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008390:	330d      	adds	r3, #13
10008392:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008394:	3b08      	subs	r3, #8
10008396:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008398:	3301      	adds	r3, #1
1000839a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000839c:	3b07      	subs	r3, #7
1000839e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100083a0:	6103      	str	r3, [r0, #16]
}
100083a2:	4770      	bx	lr

100083a4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100083a4:	b570      	push	{r4, r5, r6, lr}
100083a6:	0004      	movs	r4, r0
100083a8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100083aa:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100083ac:	2800      	cmp	r0, #0
100083ae:	d026      	beq.n	100083fe <i2c_master_init+0x5a>
100083b0:	2a00      	cmp	r2, #0
100083b2:	d026      	beq.n	10008402 <i2c_master_init+0x5e>
100083b4:	2228      	movs	r2, #40	; 0x28
100083b6:	5c8b      	ldrb	r3, [r1, r2]
100083b8:	07db      	lsls	r3, r3, #31
100083ba:	d4fc      	bmi.n	100083b6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100083bc:	2300      	movs	r3, #0
100083be:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100083c0:	6823      	ldr	r3, [r4, #0]
100083c2:	4a11      	ldr	r2, [pc, #68]	; (10008408 <i2c_master_init+0x64>)
100083c4:	4293      	cmp	r3, r2
100083c6:	d103      	bne.n	100083d0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083c8:	2003      	movs	r0, #3
100083ca:	4b10      	ldr	r3, [pc, #64]	; (1000840c <i2c_master_init+0x68>)
100083cc:	4798      	blx	r3
100083ce:	e006      	b.n	100083de <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083d0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083d2:	4a0f      	ldr	r2, [pc, #60]	; (10008410 <i2c_master_init+0x6c>)
100083d4:	4293      	cmp	r3, r2
100083d6:	d115      	bne.n	10008404 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083d8:	3002      	adds	r0, #2
100083da:	4b0c      	ldr	r3, [pc, #48]	; (1000840c <i2c_master_init+0x68>)
100083dc:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083de:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083e0:	8929      	ldrh	r1, [r5, #8]
100083e2:	7928      	ldrb	r0, [r5, #4]
100083e4:	4e0b      	ldr	r6, [pc, #44]	; (10008414 <i2c_master_init+0x70>)
100083e6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083e8:	8a29      	ldrh	r1, [r5, #16]
100083ea:	7b28      	ldrb	r0, [r5, #12]
100083ec:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ee:	782b      	ldrb	r3, [r5, #0]
100083f0:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083f2:	886b      	ldrh	r3, [r5, #2]
100083f4:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083f6:	2301      	movs	r3, #1
100083f8:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083fa:	2000      	movs	r0, #0
100083fc:	e002      	b.n	10008404 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083fe:	2017      	movs	r0, #23
10008400:	e000      	b.n	10008404 <i2c_master_init+0x60>
10008402:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008404:	bd70      	pop	{r4, r5, r6, pc}
10008406:	46c0      	nop			; (mov r8, r8)
10008408:	40003000 	.word	0x40003000
1000840c:	1000c811 	.word	0x1000c811
10008410:	40003400 	.word	0x40003400
10008414:	1000bd99 	.word	0x1000bd99

10008418 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_read_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	100082a1 	.word	0x100082a1

1000843c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008448:	2300      	movs	r3, #0
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	1000832d 	.word	0x1000832d

10008460 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008460:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008462:	2800      	cmp	r0, #0
10008464:	d008      	beq.n	10008478 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008466:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008468:	2900      	cmp	r1, #0
1000846a:	d006      	beq.n	1000847a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000846c:	3b16      	subs	r3, #22
1000846e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008470:	4b03      	ldr	r3, [pc, #12]	; (10008480 <i2c_master_write_packet_wait_no_stop+0x20>)
10008472:	4798      	blx	r3
10008474:	0003      	movs	r3, r0
10008476:	e000      	b.n	1000847a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008478:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000847a:	0018      	movs	r0, r3
1000847c:	bd10      	pop	{r4, pc}
1000847e:	46c0      	nop			; (mov r8, r8)
10008480:	1000832d 	.word	0x1000832d

10008484 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10008484:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10008486:	4a06      	ldr	r2, [pc, #24]	; (100084a0 <_sbrk+0x1c>)
10008488:	6812      	ldr	r2, [r2, #0]
1000848a:	2a00      	cmp	r2, #0
1000848c:	d102      	bne.n	10008494 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000848e:	4905      	ldr	r1, [pc, #20]	; (100084a4 <_sbrk+0x20>)
10008490:	4a03      	ldr	r2, [pc, #12]	; (100084a0 <_sbrk+0x1c>)
10008492:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10008494:	4a02      	ldr	r2, [pc, #8]	; (100084a0 <_sbrk+0x1c>)
10008496:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008498:	18c3      	adds	r3, r0, r3
1000849a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000849c:	4770      	bx	lr
1000849e:	46c0      	nop			; (mov r8, r8)
100084a0:	10016d3c 	.word	0x10016d3c
100084a4:	1001a3c8 	.word	0x1001a3c8

100084a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
100084a8:	2001      	movs	r0, #1
100084aa:	4240      	negs	r0, r0
100084ac:	4770      	bx	lr
100084ae:	46c0      	nop			; (mov r8, r8)

100084b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
100084b0:	2380      	movs	r3, #128	; 0x80
100084b2:	019b      	lsls	r3, r3, #6
100084b4:	604b      	str	r3, [r1, #4]

	return 0;
}
100084b6:	2000      	movs	r0, #0
100084b8:	4770      	bx	lr
100084ba:	46c0      	nop			; (mov r8, r8)

100084bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
100084bc:	2001      	movs	r0, #1
100084be:	4770      	bx	lr

100084c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100084c0:	2000      	movs	r0, #0
100084c2:	4770      	bx	lr

100084c4 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100084c4:	b510      	push	{r4, lr}
100084c6:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100084c8:	2324      	movs	r3, #36	; 0x24
100084ca:	4a25      	ldr	r2, [pc, #148]	; (10008560 <set_int_enable+0x9c>)
100084cc:	5cd3      	ldrb	r3, [r2, r3]
100084ce:	2b00      	cmp	r3, #0
100084d0:	d019      	beq.n	10008506 <set_int_enable+0x42>
        if (enable)
100084d2:	2800      	cmp	r0, #0
100084d4:	d003      	beq.n	100084de <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100084d6:	2202      	movs	r2, #2
100084d8:	466b      	mov	r3, sp
100084da:	71da      	strb	r2, [r3, #7]
100084dc:	e002      	b.n	100084e4 <set_int_enable+0x20>
        else
            tmp = 0x00;
100084de:	2200      	movs	r2, #0
100084e0:	466b      	mov	r3, sp
100084e2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084e4:	4b1e      	ldr	r3, [pc, #120]	; (10008560 <set_int_enable+0x9c>)
100084e6:	681a      	ldr	r2, [r3, #0]
100084e8:	7c51      	ldrb	r1, [r2, #17]
100084ea:	685b      	ldr	r3, [r3, #4]
100084ec:	7818      	ldrb	r0, [r3, #0]
100084ee:	466b      	mov	r3, sp
100084f0:	3307      	adds	r3, #7
100084f2:	2201      	movs	r2, #1
100084f4:	4c1b      	ldr	r4, [pc, #108]	; (10008564 <set_int_enable+0xa0>)
100084f6:	47a0      	blx	r4
100084f8:	2800      	cmp	r0, #0
100084fa:	d127      	bne.n	1000854c <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084fc:	466b      	mov	r3, sp
100084fe:	79da      	ldrb	r2, [r3, #7]
10008500:	4b17      	ldr	r3, [pc, #92]	; (10008560 <set_int_enable+0x9c>)
10008502:	745a      	strb	r2, [r3, #17]
10008504:	e02a      	b.n	1000855c <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
10008506:	4b16      	ldr	r3, [pc, #88]	; (10008560 <set_int_enable+0x9c>)
10008508:	7a9b      	ldrb	r3, [r3, #10]
1000850a:	2b00      	cmp	r3, #0
1000850c:	d021      	beq.n	10008552 <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
1000850e:	2800      	cmp	r0, #0
10008510:	d008      	beq.n	10008524 <set_int_enable+0x60>
10008512:	4b13      	ldr	r3, [pc, #76]	; (10008560 <set_int_enable+0x9c>)
10008514:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
10008516:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008518:	2b00      	cmp	r3, #0
1000851a:	d11f      	bne.n	1000855c <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000851c:	2201      	movs	r2, #1
1000851e:	466b      	mov	r3, sp
10008520:	71da      	strb	r2, [r3, #7]
10008522:	e002      	b.n	1000852a <set_int_enable+0x66>
        else
            tmp = 0x00;
10008524:	2200      	movs	r2, #0
10008526:	466b      	mov	r3, sp
10008528:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1000852a:	4b0d      	ldr	r3, [pc, #52]	; (10008560 <set_int_enable+0x9c>)
1000852c:	681a      	ldr	r2, [r3, #0]
1000852e:	7c51      	ldrb	r1, [r2, #17]
10008530:	685b      	ldr	r3, [r3, #4]
10008532:	7818      	ldrb	r0, [r3, #0]
10008534:	466b      	mov	r3, sp
10008536:	3307      	adds	r3, #7
10008538:	2201      	movs	r2, #1
1000853a:	4c0a      	ldr	r4, [pc, #40]	; (10008564 <set_int_enable+0xa0>)
1000853c:	47a0      	blx	r4
1000853e:	2800      	cmp	r0, #0
10008540:	d10a      	bne.n	10008558 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008542:	466b      	mov	r3, sp
10008544:	79da      	ldrb	r2, [r3, #7]
10008546:	4b06      	ldr	r3, [pc, #24]	; (10008560 <set_int_enable+0x9c>)
10008548:	745a      	strb	r2, [r3, #17]
1000854a:	e007      	b.n	1000855c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000854c:	2001      	movs	r0, #1
1000854e:	4240      	negs	r0, r0
10008550:	e004      	b.n	1000855c <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
10008552:	2001      	movs	r0, #1
10008554:	4240      	negs	r0, r0
10008556:	e001      	b.n	1000855c <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008558:	2001      	movs	r0, #1
1000855a:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
1000855c:	b002      	add	sp, #8
1000855e:	bd10      	pop	{r4, pc}
10008560:	10016c78 	.word	0x10016c78
10008564:	1000a649 	.word	0x1000a649

10008568 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008568:	b510      	push	{r4, lr}
1000856a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000856c:	4b79      	ldr	r3, [pc, #484]	; (10008754 <mpu_reset_fifo+0x1ec>)
1000856e:	7a9b      	ldrb	r3, [r3, #10]
10008570:	2b00      	cmp	r3, #0
10008572:	d100      	bne.n	10008576 <mpu_reset_fifo+0xe>
10008574:	e0ce      	b.n	10008714 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008576:	466b      	mov	r3, sp
10008578:	3307      	adds	r3, #7
1000857a:	2200      	movs	r2, #0
1000857c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000857e:	4a75      	ldr	r2, [pc, #468]	; (10008754 <mpu_reset_fifo+0x1ec>)
10008580:	6811      	ldr	r1, [r2, #0]
10008582:	7c49      	ldrb	r1, [r1, #17]
10008584:	6852      	ldr	r2, [r2, #4]
10008586:	7810      	ldrb	r0, [r2, #0]
10008588:	2201      	movs	r2, #1
1000858a:	4c73      	ldr	r4, [pc, #460]	; (10008758 <mpu_reset_fifo+0x1f0>)
1000858c:	47a0      	blx	r4
1000858e:	2800      	cmp	r0, #0
10008590:	d000      	beq.n	10008594 <mpu_reset_fifo+0x2c>
10008592:	e0c2      	b.n	1000871a <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008594:	4b6f      	ldr	r3, [pc, #444]	; (10008754 <mpu_reset_fifo+0x1ec>)
10008596:	681a      	ldr	r2, [r3, #0]
10008598:	7951      	ldrb	r1, [r2, #5]
1000859a:	685b      	ldr	r3, [r3, #4]
1000859c:	7818      	ldrb	r0, [r3, #0]
1000859e:	466b      	mov	r3, sp
100085a0:	3307      	adds	r3, #7
100085a2:	2201      	movs	r2, #1
100085a4:	4c6c      	ldr	r4, [pc, #432]	; (10008758 <mpu_reset_fifo+0x1f0>)
100085a6:	47a0      	blx	r4
100085a8:	2800      	cmp	r0, #0
100085aa:	d000      	beq.n	100085ae <mpu_reset_fifo+0x46>
100085ac:	e0b8      	b.n	10008720 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ae:	4b69      	ldr	r3, [pc, #420]	; (10008754 <mpu_reset_fifo+0x1ec>)
100085b0:	681a      	ldr	r2, [r3, #0]
100085b2:	7911      	ldrb	r1, [r2, #4]
100085b4:	685b      	ldr	r3, [r3, #4]
100085b6:	7818      	ldrb	r0, [r3, #0]
100085b8:	466b      	mov	r3, sp
100085ba:	3307      	adds	r3, #7
100085bc:	2201      	movs	r2, #1
100085be:	4c66      	ldr	r4, [pc, #408]	; (10008758 <mpu_reset_fifo+0x1f0>)
100085c0:	47a0      	blx	r4
100085c2:	2800      	cmp	r0, #0
100085c4:	d000      	beq.n	100085c8 <mpu_reset_fifo+0x60>
100085c6:	e0ae      	b.n	10008726 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
100085c8:	2324      	movs	r3, #36	; 0x24
100085ca:	4a62      	ldr	r2, [pc, #392]	; (10008754 <mpu_reset_fifo+0x1ec>)
100085cc:	5cd3      	ldrb	r3, [r2, r3]
100085ce:	2b00      	cmp	r3, #0
100085d0:	d04f      	beq.n	10008672 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100085d2:	466b      	mov	r3, sp
100085d4:	3307      	adds	r3, #7
100085d6:	220c      	movs	r2, #12
100085d8:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085da:	4a5e      	ldr	r2, [pc, #376]	; (10008754 <mpu_reset_fifo+0x1ec>)
100085dc:	6811      	ldr	r1, [r2, #0]
100085de:	7909      	ldrb	r1, [r1, #4]
100085e0:	6852      	ldr	r2, [r2, #4]
100085e2:	7810      	ldrb	r0, [r2, #0]
100085e4:	2201      	movs	r2, #1
100085e6:	4c5c      	ldr	r4, [pc, #368]	; (10008758 <mpu_reset_fifo+0x1f0>)
100085e8:	47a0      	blx	r4
100085ea:	2800      	cmp	r0, #0
100085ec:	d000      	beq.n	100085f0 <mpu_reset_fifo+0x88>
100085ee:	e09d      	b.n	1000872c <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
100085f0:	3032      	adds	r0, #50	; 0x32
100085f2:	4b5a      	ldr	r3, [pc, #360]	; (1000875c <mpu_reset_fifo+0x1f4>)
100085f4:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100085f6:	22c0      	movs	r2, #192	; 0xc0
100085f8:	466b      	mov	r3, sp
100085fa:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100085fc:	4b55      	ldr	r3, [pc, #340]	; (10008754 <mpu_reset_fifo+0x1ec>)
100085fe:	7a9b      	ldrb	r3, [r3, #10]
10008600:	07db      	lsls	r3, r3, #31
10008602:	d502      	bpl.n	1000860a <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
10008604:	3220      	adds	r2, #32
10008606:	466b      	mov	r3, sp
10008608:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000860a:	4b52      	ldr	r3, [pc, #328]	; (10008754 <mpu_reset_fifo+0x1ec>)
1000860c:	681a      	ldr	r2, [r3, #0]
1000860e:	7911      	ldrb	r1, [r2, #4]
10008610:	685b      	ldr	r3, [r3, #4]
10008612:	7818      	ldrb	r0, [r3, #0]
10008614:	466b      	mov	r3, sp
10008616:	3307      	adds	r3, #7
10008618:	2201      	movs	r2, #1
1000861a:	4c4f      	ldr	r4, [pc, #316]	; (10008758 <mpu_reset_fifo+0x1f0>)
1000861c:	47a0      	blx	r4
1000861e:	2800      	cmp	r0, #0
10008620:	d000      	beq.n	10008624 <mpu_reset_fifo+0xbc>
10008622:	e086      	b.n	10008732 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008624:	4b4b      	ldr	r3, [pc, #300]	; (10008754 <mpu_reset_fifo+0x1ec>)
10008626:	7c5b      	ldrb	r3, [r3, #17]
10008628:	2b00      	cmp	r3, #0
1000862a:	d003      	beq.n	10008634 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
1000862c:	2202      	movs	r2, #2
1000862e:	466b      	mov	r3, sp
10008630:	71da      	strb	r2, [r3, #7]
10008632:	e002      	b.n	1000863a <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008634:	2200      	movs	r2, #0
10008636:	466b      	mov	r3, sp
10008638:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000863a:	4b46      	ldr	r3, [pc, #280]	; (10008754 <mpu_reset_fifo+0x1ec>)
1000863c:	681a      	ldr	r2, [r3, #0]
1000863e:	7c51      	ldrb	r1, [r2, #17]
10008640:	685b      	ldr	r3, [r3, #4]
10008642:	7818      	ldrb	r0, [r3, #0]
10008644:	466b      	mov	r3, sp
10008646:	3307      	adds	r3, #7
10008648:	2201      	movs	r2, #1
1000864a:	4c43      	ldr	r4, [pc, #268]	; (10008758 <mpu_reset_fifo+0x1f0>)
1000864c:	47a0      	blx	r4
1000864e:	2800      	cmp	r0, #0
10008650:	d172      	bne.n	10008738 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
10008652:	466b      	mov	r3, sp
10008654:	3307      	adds	r3, #7
10008656:	2200      	movs	r2, #0
10008658:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000865a:	4a3e      	ldr	r2, [pc, #248]	; (10008754 <mpu_reset_fifo+0x1ec>)
1000865c:	6811      	ldr	r1, [r2, #0]
1000865e:	7949      	ldrb	r1, [r1, #5]
10008660:	6852      	ldr	r2, [r2, #4]
10008662:	7810      	ldrb	r0, [r2, #0]
10008664:	2201      	movs	r2, #1
10008666:	4c3c      	ldr	r4, [pc, #240]	; (10008758 <mpu_reset_fifo+0x1f0>)
10008668:	47a0      	blx	r4
1000866a:	1e43      	subs	r3, r0, #1
1000866c:	4198      	sbcs	r0, r3
1000866e:	4240      	negs	r0, r0
10008670:	e06d      	b.n	1000874e <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
10008672:	466b      	mov	r3, sp
10008674:	3307      	adds	r3, #7
10008676:	2204      	movs	r2, #4
10008678:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000867a:	4a36      	ldr	r2, [pc, #216]	; (10008754 <mpu_reset_fifo+0x1ec>)
1000867c:	6811      	ldr	r1, [r2, #0]
1000867e:	7909      	ldrb	r1, [r1, #4]
10008680:	6852      	ldr	r2, [r2, #4]
10008682:	7810      	ldrb	r0, [r2, #0]
10008684:	2201      	movs	r2, #1
10008686:	4c34      	ldr	r4, [pc, #208]	; (10008758 <mpu_reset_fifo+0x1f0>)
10008688:	47a0      	blx	r4
1000868a:	2800      	cmp	r0, #0
1000868c:	d157      	bne.n	1000873e <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000868e:	4b31      	ldr	r3, [pc, #196]	; (10008754 <mpu_reset_fifo+0x1ec>)
10008690:	7c9b      	ldrb	r3, [r3, #18]
10008692:	2b00      	cmp	r3, #0
10008694:	d103      	bne.n	1000869e <mpu_reset_fifo+0x136>
10008696:	4b2f      	ldr	r3, [pc, #188]	; (10008754 <mpu_reset_fifo+0x1ec>)
10008698:	7a9b      	ldrb	r3, [r3, #10]
1000869a:	07db      	lsls	r3, r3, #31
1000869c:	d403      	bmi.n	100086a6 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000869e:	2240      	movs	r2, #64	; 0x40
100086a0:	466b      	mov	r3, sp
100086a2:	71da      	strb	r2, [r3, #7]
100086a4:	e002      	b.n	100086ac <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100086a6:	2260      	movs	r2, #96	; 0x60
100086a8:	466b      	mov	r3, sp
100086aa:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086ac:	4b29      	ldr	r3, [pc, #164]	; (10008754 <mpu_reset_fifo+0x1ec>)
100086ae:	681a      	ldr	r2, [r3, #0]
100086b0:	7911      	ldrb	r1, [r2, #4]
100086b2:	685b      	ldr	r3, [r3, #4]
100086b4:	7818      	ldrb	r0, [r3, #0]
100086b6:	466b      	mov	r3, sp
100086b8:	3307      	adds	r3, #7
100086ba:	2201      	movs	r2, #1
100086bc:	4c26      	ldr	r4, [pc, #152]	; (10008758 <mpu_reset_fifo+0x1f0>)
100086be:	47a0      	blx	r4
100086c0:	2800      	cmp	r0, #0
100086c2:	d13f      	bne.n	10008744 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
100086c4:	3032      	adds	r0, #50	; 0x32
100086c6:	4b25      	ldr	r3, [pc, #148]	; (1000875c <mpu_reset_fifo+0x1f4>)
100086c8:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
100086ca:	4b22      	ldr	r3, [pc, #136]	; (10008754 <mpu_reset_fifo+0x1ec>)
100086cc:	7c5b      	ldrb	r3, [r3, #17]
100086ce:	2b00      	cmp	r3, #0
100086d0:	d003      	beq.n	100086da <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
100086d2:	2201      	movs	r2, #1
100086d4:	466b      	mov	r3, sp
100086d6:	71da      	strb	r2, [r3, #7]
100086d8:	e002      	b.n	100086e0 <mpu_reset_fifo+0x178>
        else
            data = 0;
100086da:	2200      	movs	r2, #0
100086dc:	466b      	mov	r3, sp
100086de:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100086e0:	4b1c      	ldr	r3, [pc, #112]	; (10008754 <mpu_reset_fifo+0x1ec>)
100086e2:	681a      	ldr	r2, [r3, #0]
100086e4:	7c51      	ldrb	r1, [r2, #17]
100086e6:	685b      	ldr	r3, [r3, #4]
100086e8:	7818      	ldrb	r0, [r3, #0]
100086ea:	466b      	mov	r3, sp
100086ec:	3307      	adds	r3, #7
100086ee:	2201      	movs	r2, #1
100086f0:	4c19      	ldr	r4, [pc, #100]	; (10008758 <mpu_reset_fifo+0x1f0>)
100086f2:	47a0      	blx	r4
100086f4:	2800      	cmp	r0, #0
100086f6:	d128      	bne.n	1000874a <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100086f8:	4a16      	ldr	r2, [pc, #88]	; (10008754 <mpu_reset_fifo+0x1ec>)
100086fa:	0013      	movs	r3, r2
100086fc:	3310      	adds	r3, #16
100086fe:	6811      	ldr	r1, [r2, #0]
10008700:	7949      	ldrb	r1, [r1, #5]
10008702:	6852      	ldr	r2, [r2, #4]
10008704:	7810      	ldrb	r0, [r2, #0]
10008706:	2201      	movs	r2, #1
10008708:	4c13      	ldr	r4, [pc, #76]	; (10008758 <mpu_reset_fifo+0x1f0>)
1000870a:	47a0      	blx	r4
1000870c:	1e43      	subs	r3, r0, #1
1000870e:	4198      	sbcs	r0, r3
10008710:	4240      	negs	r0, r0
10008712:	e01c      	b.n	1000874e <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008714:	2001      	movs	r0, #1
10008716:	4240      	negs	r0, r0
10008718:	e019      	b.n	1000874e <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000871a:	2001      	movs	r0, #1
1000871c:	4240      	negs	r0, r0
1000871e:	e016      	b.n	1000874e <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
10008720:	2001      	movs	r0, #1
10008722:	4240      	negs	r0, r0
10008724:	e013      	b.n	1000874e <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008726:	2001      	movs	r0, #1
10008728:	4240      	negs	r0, r0
1000872a:	e010      	b.n	1000874e <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000872c:	2001      	movs	r0, #1
1000872e:	4240      	negs	r0, r0
10008730:	e00d      	b.n	1000874e <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008732:	2001      	movs	r0, #1
10008734:	4240      	negs	r0, r0
10008736:	e00a      	b.n	1000874e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008738:	2001      	movs	r0, #1
1000873a:	4240      	negs	r0, r0
1000873c:	e007      	b.n	1000874e <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000873e:	2001      	movs	r0, #1
10008740:	4240      	negs	r0, r0
10008742:	e004      	b.n	1000874e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008744:	2001      	movs	r0, #1
10008746:	4240      	negs	r0, r0
10008748:	e001      	b.n	1000874e <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000874a:	2001      	movs	r0, #1
1000874c:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
1000874e:	b002      	add	sp, #8
10008750:	bd10      	pop	{r4, pc}
10008752:	46c0      	nop			; (mov r8, r8)
10008754:	10016c78 	.word	0x10016c78
10008758:	1000a649 	.word	0x1000a649
1000875c:	10008129 	.word	0x10008129

10008760 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008760:	b510      	push	{r4, lr}
10008762:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008764:	4b24      	ldr	r3, [pc, #144]	; (100087f8 <mpu_set_gyro_fsr+0x98>)
10008766:	7a9b      	ldrb	r3, [r3, #10]
10008768:	2b00      	cmp	r3, #0
1000876a:	d03b      	beq.n	100087e4 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
1000876c:	23fa      	movs	r3, #250	; 0xfa
1000876e:	005b      	lsls	r3, r3, #1
10008770:	4298      	cmp	r0, r3
10008772:	d010      	beq.n	10008796 <mpu_set_gyro_fsr+0x36>
10008774:	d802      	bhi.n	1000877c <mpu_set_gyro_fsr+0x1c>
10008776:	28fa      	cmp	r0, #250	; 0xfa
10008778:	d009      	beq.n	1000878e <mpu_set_gyro_fsr+0x2e>
1000877a:	e036      	b.n	100087ea <mpu_set_gyro_fsr+0x8a>
1000877c:	23fa      	movs	r3, #250	; 0xfa
1000877e:	009b      	lsls	r3, r3, #2
10008780:	4298      	cmp	r0, r3
10008782:	d00c      	beq.n	1000879e <mpu_set_gyro_fsr+0x3e>
10008784:	23fa      	movs	r3, #250	; 0xfa
10008786:	00db      	lsls	r3, r3, #3
10008788:	4298      	cmp	r0, r3
1000878a:	d00c      	beq.n	100087a6 <mpu_set_gyro_fsr+0x46>
1000878c:	e02d      	b.n	100087ea <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000878e:	2200      	movs	r2, #0
10008790:	466b      	mov	r3, sp
10008792:	71da      	strb	r2, [r3, #7]
        break;
10008794:	e00a      	b.n	100087ac <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008796:	2208      	movs	r2, #8
10008798:	466b      	mov	r3, sp
1000879a:	71da      	strb	r2, [r3, #7]
        break;
1000879c:	e006      	b.n	100087ac <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000879e:	2210      	movs	r2, #16
100087a0:	466b      	mov	r3, sp
100087a2:	71da      	strb	r2, [r3, #7]
        break;
100087a4:	e002      	b.n	100087ac <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
100087a6:	2218      	movs	r2, #24
100087a8:	466b      	mov	r3, sp
100087aa:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
100087ac:	466b      	mov	r3, sp
100087ae:	3307      	adds	r3, #7
100087b0:	781b      	ldrb	r3, [r3, #0]
100087b2:	4a11      	ldr	r2, [pc, #68]	; (100087f8 <mpu_set_gyro_fsr+0x98>)
100087b4:	7a12      	ldrb	r2, [r2, #8]
100087b6:	08db      	lsrs	r3, r3, #3
        return 0;
100087b8:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
100087ba:	429a      	cmp	r2, r3
100087bc:	d01a      	beq.n	100087f4 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
100087be:	4b0e      	ldr	r3, [pc, #56]	; (100087f8 <mpu_set_gyro_fsr+0x98>)
100087c0:	681a      	ldr	r2, [r3, #0]
100087c2:	7991      	ldrb	r1, [r2, #6]
100087c4:	685b      	ldr	r3, [r3, #4]
100087c6:	7818      	ldrb	r0, [r3, #0]
100087c8:	466b      	mov	r3, sp
100087ca:	3307      	adds	r3, #7
100087cc:	2201      	movs	r2, #1
100087ce:	4c0b      	ldr	r4, [pc, #44]	; (100087fc <mpu_set_gyro_fsr+0x9c>)
100087d0:	47a0      	blx	r4
100087d2:	2800      	cmp	r0, #0
100087d4:	d10c      	bne.n	100087f0 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
100087d6:	466b      	mov	r3, sp
100087d8:	3307      	adds	r3, #7
100087da:	781b      	ldrb	r3, [r3, #0]
100087dc:	08db      	lsrs	r3, r3, #3
100087de:	4a06      	ldr	r2, [pc, #24]	; (100087f8 <mpu_set_gyro_fsr+0x98>)
100087e0:	7213      	strb	r3, [r2, #8]
    return 0;
100087e2:	e007      	b.n	100087f4 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087e4:	2001      	movs	r0, #1
100087e6:	4240      	negs	r0, r0
100087e8:	e004      	b.n	100087f4 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
100087ea:	2001      	movs	r0, #1
100087ec:	4240      	negs	r0, r0
100087ee:	e001      	b.n	100087f4 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
100087f0:	2001      	movs	r0, #1
100087f2:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
100087f4:	b002      	add	sp, #8
100087f6:	bd10      	pop	{r4, pc}
100087f8:	10016c78 	.word	0x10016c78
100087fc:	1000a649 	.word	0x1000a649

10008800 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008800:	4b11      	ldr	r3, [pc, #68]	; (10008848 <mpu_get_accel_fsr+0x48>)
10008802:	7a5b      	ldrb	r3, [r3, #9]
10008804:	2b01      	cmp	r3, #1
10008806:	d009      	beq.n	1000881c <mpu_get_accel_fsr+0x1c>
10008808:	2b00      	cmp	r3, #0
1000880a:	d004      	beq.n	10008816 <mpu_get_accel_fsr+0x16>
1000880c:	2b02      	cmp	r3, #2
1000880e:	d008      	beq.n	10008822 <mpu_get_accel_fsr+0x22>
10008810:	2b03      	cmp	r3, #3
10008812:	d009      	beq.n	10008828 <mpu_get_accel_fsr+0x28>
10008814:	e014      	b.n	10008840 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
10008816:	2302      	movs	r3, #2
10008818:	7003      	strb	r3, [r0, #0]
        break;
1000881a:	e007      	b.n	1000882c <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
1000881c:	2304      	movs	r3, #4
1000881e:	7003      	strb	r3, [r0, #0]
        break;
10008820:	e004      	b.n	1000882c <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
10008822:	2308      	movs	r3, #8
10008824:	7003      	strb	r3, [r0, #0]
        break;
10008826:	e001      	b.n	1000882c <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
10008828:	2310      	movs	r3, #16
1000882a:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000882c:	4b06      	ldr	r3, [pc, #24]	; (10008848 <mpu_get_accel_fsr+0x48>)
1000882e:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008830:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008832:	2a00      	cmp	r2, #0
10008834:	d006      	beq.n	10008844 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
10008836:	7803      	ldrb	r3, [r0, #0]
10008838:	005b      	lsls	r3, r3, #1
1000883a:	7003      	strb	r3, [r0, #0]
    return 0;
1000883c:	2300      	movs	r3, #0
1000883e:	e001      	b.n	10008844 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008840:	2301      	movs	r3, #1
10008842:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008844:	0018      	movs	r0, r3
10008846:	4770      	bx	lr
10008848:	10016c78 	.word	0x10016c78

1000884c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000884c:	b510      	push	{r4, lr}
1000884e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008850:	4b21      	ldr	r3, [pc, #132]	; (100088d8 <mpu_set_accel_fsr+0x8c>)
10008852:	7a9b      	ldrb	r3, [r3, #10]
10008854:	2b00      	cmp	r3, #0
10008856:	d035      	beq.n	100088c4 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
10008858:	2804      	cmp	r0, #4
1000885a:	d00c      	beq.n	10008876 <mpu_set_accel_fsr+0x2a>
1000885c:	d802      	bhi.n	10008864 <mpu_set_accel_fsr+0x18>
1000885e:	2802      	cmp	r0, #2
10008860:	d005      	beq.n	1000886e <mpu_set_accel_fsr+0x22>
10008862:	e032      	b.n	100088ca <mpu_set_accel_fsr+0x7e>
10008864:	2808      	cmp	r0, #8
10008866:	d00a      	beq.n	1000887e <mpu_set_accel_fsr+0x32>
10008868:	2810      	cmp	r0, #16
1000886a:	d00c      	beq.n	10008886 <mpu_set_accel_fsr+0x3a>
1000886c:	e02d      	b.n	100088ca <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
1000886e:	2200      	movs	r2, #0
10008870:	466b      	mov	r3, sp
10008872:	71da      	strb	r2, [r3, #7]
        break;
10008874:	e00a      	b.n	1000888c <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
10008876:	2208      	movs	r2, #8
10008878:	466b      	mov	r3, sp
1000887a:	71da      	strb	r2, [r3, #7]
        break;
1000887c:	e006      	b.n	1000888c <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
1000887e:	2210      	movs	r2, #16
10008880:	466b      	mov	r3, sp
10008882:	71da      	strb	r2, [r3, #7]
        break;
10008884:	e002      	b.n	1000888c <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
10008886:	2218      	movs	r2, #24
10008888:	466b      	mov	r3, sp
1000888a:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000888c:	466b      	mov	r3, sp
1000888e:	3307      	adds	r3, #7
10008890:	781b      	ldrb	r3, [r3, #0]
10008892:	4a11      	ldr	r2, [pc, #68]	; (100088d8 <mpu_set_accel_fsr+0x8c>)
10008894:	7a52      	ldrb	r2, [r2, #9]
10008896:	08db      	lsrs	r3, r3, #3
        return 0;
10008898:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000889a:	429a      	cmp	r2, r3
1000889c:	d01a      	beq.n	100088d4 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000889e:	4b0e      	ldr	r3, [pc, #56]	; (100088d8 <mpu_set_accel_fsr+0x8c>)
100088a0:	681a      	ldr	r2, [r3, #0]
100088a2:	79d1      	ldrb	r1, [r2, #7]
100088a4:	685b      	ldr	r3, [r3, #4]
100088a6:	7818      	ldrb	r0, [r3, #0]
100088a8:	466b      	mov	r3, sp
100088aa:	3307      	adds	r3, #7
100088ac:	2201      	movs	r2, #1
100088ae:	4c0b      	ldr	r4, [pc, #44]	; (100088dc <mpu_set_accel_fsr+0x90>)
100088b0:	47a0      	blx	r4
100088b2:	2800      	cmp	r0, #0
100088b4:	d10c      	bne.n	100088d0 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100088b6:	466b      	mov	r3, sp
100088b8:	3307      	adds	r3, #7
100088ba:	781b      	ldrb	r3, [r3, #0]
100088bc:	08db      	lsrs	r3, r3, #3
100088be:	4a06      	ldr	r2, [pc, #24]	; (100088d8 <mpu_set_accel_fsr+0x8c>)
100088c0:	7253      	strb	r3, [r2, #9]
    return 0;
100088c2:	e007      	b.n	100088d4 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100088c4:	2001      	movs	r0, #1
100088c6:	4240      	negs	r0, r0
100088c8:	e004      	b.n	100088d4 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100088ca:	2001      	movs	r0, #1
100088cc:	4240      	negs	r0, r0
100088ce:	e001      	b.n	100088d4 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
100088d0:	2001      	movs	r0, #1
100088d2:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100088d4:	b002      	add	sp, #8
100088d6:	bd10      	pop	{r4, pc}
100088d8:	10016c78 	.word	0x10016c78
100088dc:	1000a649 	.word	0x1000a649

100088e0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
100088e0:	b510      	push	{r4, lr}
100088e2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088e4:	4b2b      	ldr	r3, [pc, #172]	; (10008994 <mpu_set_lpf+0xb4>)
100088e6:	7a9b      	ldrb	r3, [r3, #10]
100088e8:	2b00      	cmp	r3, #0
100088ea:	d049      	beq.n	10008980 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
100088ec:	28bb      	cmp	r0, #187	; 0xbb
100088ee:	d903      	bls.n	100088f8 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
100088f0:	2201      	movs	r2, #1
100088f2:	466b      	mov	r3, sp
100088f4:	71da      	strb	r2, [r3, #7]
100088f6:	e01a      	b.n	1000892e <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
100088f8:	2861      	cmp	r0, #97	; 0x61
100088fa:	d903      	bls.n	10008904 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
100088fc:	2202      	movs	r2, #2
100088fe:	466b      	mov	r3, sp
10008900:	71da      	strb	r2, [r3, #7]
10008902:	e014      	b.n	1000892e <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008904:	2829      	cmp	r0, #41	; 0x29
10008906:	d903      	bls.n	10008910 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008908:	2203      	movs	r2, #3
1000890a:	466b      	mov	r3, sp
1000890c:	71da      	strb	r2, [r3, #7]
1000890e:	e00e      	b.n	1000892e <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008910:	2813      	cmp	r0, #19
10008912:	d903      	bls.n	1000891c <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008914:	2204      	movs	r2, #4
10008916:	466b      	mov	r3, sp
10008918:	71da      	strb	r2, [r3, #7]
1000891a:	e008      	b.n	1000892e <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
1000891c:	2809      	cmp	r0, #9
1000891e:	d903      	bls.n	10008928 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008920:	2205      	movs	r2, #5
10008922:	466b      	mov	r3, sp
10008924:	71da      	strb	r2, [r3, #7]
10008926:	e002      	b.n	1000892e <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
10008928:	2206      	movs	r2, #6
1000892a:	466b      	mov	r3, sp
1000892c:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
1000892e:	4b19      	ldr	r3, [pc, #100]	; (10008994 <mpu_set_lpf+0xb4>)
10008930:	7ada      	ldrb	r2, [r3, #11]
10008932:	466b      	mov	r3, sp
10008934:	3307      	adds	r3, #7
10008936:	781b      	ldrb	r3, [r3, #0]
        return 0;
10008938:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000893a:	429a      	cmp	r2, r3
1000893c:	d028      	beq.n	10008990 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000893e:	4b15      	ldr	r3, [pc, #84]	; (10008994 <mpu_set_lpf+0xb4>)
10008940:	681a      	ldr	r2, [r3, #0]
10008942:	7891      	ldrb	r1, [r2, #2]
10008944:	685b      	ldr	r3, [r3, #4]
10008946:	7818      	ldrb	r0, [r3, #0]
10008948:	466b      	mov	r3, sp
1000894a:	3307      	adds	r3, #7
1000894c:	2201      	movs	r2, #1
1000894e:	4c12      	ldr	r4, [pc, #72]	; (10008998 <mpu_set_lpf+0xb8>)
10008950:	47a0      	blx	r4
10008952:	2800      	cmp	r0, #0
10008954:	d117      	bne.n	10008986 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008956:	466b      	mov	r3, sp
10008958:	3307      	adds	r3, #7
1000895a:	7819      	ldrb	r1, [r3, #0]
1000895c:	2240      	movs	r2, #64	; 0x40
1000895e:	430a      	orrs	r2, r1
10008960:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008962:	4a0c      	ldr	r2, [pc, #48]	; (10008994 <mpu_set_lpf+0xb4>)
10008964:	6811      	ldr	r1, [r2, #0]
10008966:	7a09      	ldrb	r1, [r1, #8]
10008968:	6852      	ldr	r2, [r2, #4]
1000896a:	7810      	ldrb	r0, [r2, #0]
1000896c:	2201      	movs	r2, #1
1000896e:	4c0a      	ldr	r4, [pc, #40]	; (10008998 <mpu_set_lpf+0xb8>)
10008970:	47a0      	blx	r4
10008972:	2800      	cmp	r0, #0
10008974:	d10a      	bne.n	1000898c <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008976:	466b      	mov	r3, sp
10008978:	79da      	ldrb	r2, [r3, #7]
1000897a:	4b06      	ldr	r3, [pc, #24]	; (10008994 <mpu_set_lpf+0xb4>)
1000897c:	72da      	strb	r2, [r3, #11]
    return 0;
1000897e:	e007      	b.n	10008990 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008980:	2001      	movs	r0, #1
10008982:	4240      	negs	r0, r0
10008984:	e004      	b.n	10008990 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008986:	2001      	movs	r0, #1
10008988:	4240      	negs	r0, r0
1000898a:	e001      	b.n	10008990 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
1000898c:	2001      	movs	r0, #1
1000898e:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
10008990:	b002      	add	sp, #8
10008992:	bd10      	pop	{r4, pc}
10008994:	10016c78 	.word	0x10016c78
10008998:	1000a649 	.word	0x1000a649

1000899c <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
1000899c:	2324      	movs	r3, #36	; 0x24
1000899e:	4a05      	ldr	r2, [pc, #20]	; (100089b4 <mpu_get_sample_rate+0x18>)
100089a0:	5cd3      	ldrb	r3, [r2, r3]
100089a2:	2b00      	cmp	r3, #0
100089a4:	d103      	bne.n	100089ae <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100089a6:	89d3      	ldrh	r3, [r2, #14]
100089a8:	8003      	strh	r3, [r0, #0]
    return 0;
100089aa:	2000      	movs	r0, #0
100089ac:	e001      	b.n	100089b2 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100089ae:	2001      	movs	r0, #1
100089b0:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
100089b2:	4770      	bx	lr
100089b4:	10016c78 	.word	0x10016c78

100089b8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100089b8:	b530      	push	{r4, r5, lr}
100089ba:	b083      	sub	sp, #12
100089bc:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100089be:	d020      	beq.n	10008a02 <mpu_set_compass_sample_rate+0x4a>
100089c0:	4b17      	ldr	r3, [pc, #92]	; (10008a20 <mpu_set_compass_sample_rate+0x68>)
100089c2:	89d8      	ldrh	r0, [r3, #14]
100089c4:	4281      	cmp	r1, r0
100089c6:	d81f      	bhi.n	10008a08 <mpu_set_compass_sample_rate+0x50>
100089c8:	2964      	cmp	r1, #100	; 0x64
100089ca:	d820      	bhi.n	10008a0e <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100089cc:	466b      	mov	r3, sp
100089ce:	1ddc      	adds	r4, r3, #7
100089d0:	4b14      	ldr	r3, [pc, #80]	; (10008a24 <mpu_set_compass_sample_rate+0x6c>)
100089d2:	4798      	blx	r3
100089d4:	3801      	subs	r0, #1
100089d6:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100089d8:	4b11      	ldr	r3, [pc, #68]	; (10008a20 <mpu_set_compass_sample_rate+0x68>)
100089da:	2224      	movs	r2, #36	; 0x24
100089dc:	6819      	ldr	r1, [r3, #0]
100089de:	5c89      	ldrb	r1, [r1, r2]
100089e0:	685b      	ldr	r3, [r3, #4]
100089e2:	7818      	ldrb	r0, [r3, #0]
100089e4:	0023      	movs	r3, r4
100089e6:	3a23      	subs	r2, #35	; 0x23
100089e8:	4c0f      	ldr	r4, [pc, #60]	; (10008a28 <mpu_set_compass_sample_rate+0x70>)
100089ea:	47a0      	blx	r4
100089ec:	1e04      	subs	r4, r0, #0
100089ee:	d111      	bne.n	10008a14 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
100089f0:	4d0b      	ldr	r5, [pc, #44]	; (10008a20 <mpu_set_compass_sample_rate+0x68>)
100089f2:	89e8      	ldrh	r0, [r5, #14]
100089f4:	466b      	mov	r3, sp
100089f6:	79d9      	ldrb	r1, [r3, #7]
100089f8:	3101      	adds	r1, #1
100089fa:	4b0c      	ldr	r3, [pc, #48]	; (10008a2c <mpu_set_compass_sample_rate+0x74>)
100089fc:	4798      	blx	r3
100089fe:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a00:	e00a      	b.n	10008a18 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a02:	2401      	movs	r4, #1
10008a04:	4264      	negs	r4, r4
10008a06:	e007      	b.n	10008a18 <mpu_set_compass_sample_rate+0x60>
10008a08:	2401      	movs	r4, #1
10008a0a:	4264      	negs	r4, r4
10008a0c:	e004      	b.n	10008a18 <mpu_set_compass_sample_rate+0x60>
10008a0e:	2401      	movs	r4, #1
10008a10:	4264      	negs	r4, r4
10008a12:	e001      	b.n	10008a18 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a14:	2401      	movs	r4, #1
10008a16:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008a18:	0020      	movs	r0, r4
10008a1a:	b003      	add	sp, #12
10008a1c:	bd30      	pop	{r4, r5, pc}
10008a1e:	46c0      	nop			; (mov r8, r8)
10008a20:	10016c78 	.word	0x10016c78
10008a24:	10012641 	.word	0x10012641
10008a28:	1000a649 	.word	0x1000a649
10008a2c:	10012755 	.word	0x10012755

10008a30 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a30:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a32:	2324      	movs	r3, #36	; 0x24
10008a34:	4a16      	ldr	r2, [pc, #88]	; (10008a90 <mpu_configure_fifo+0x60>)
10008a36:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a38:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a3a:	2b00      	cmp	r3, #0
10008a3c:	d126      	bne.n	10008a8c <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a3e:	7a94      	ldrb	r4, [r2, #10]
10008a40:	2c00      	cmp	r4, #0
10008a42:	d015      	beq.n	10008a70 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a44:	2301      	movs	r3, #1
10008a46:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a48:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a4a:	4004      	ands	r4, r0
10008a4c:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008a4e:	1b04      	subs	r4, r0, r4
10008a50:	1e63      	subs	r3, r4, #1
10008a52:	419c      	sbcs	r4, r3
10008a54:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008a56:	2800      	cmp	r0, #0
10008a58:	d10d      	bne.n	10008a76 <mpu_configure_fifo+0x46>
10008a5a:	7d13      	ldrb	r3, [r2, #20]
10008a5c:	2b00      	cmp	r3, #0
10008a5e:	d112      	bne.n	10008a86 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008a60:	4b0c      	ldr	r3, [pc, #48]	; (10008a94 <mpu_configure_fifo+0x64>)
10008a62:	4798      	blx	r3
10008a64:	e012      	b.n	10008a8c <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008a66:	4b0a      	ldr	r3, [pc, #40]	; (10008a90 <mpu_configure_fifo+0x60>)
10008a68:	741d      	strb	r5, [r3, #16]
                return -1;
10008a6a:	2401      	movs	r4, #1
10008a6c:	4264      	negs	r4, r4
10008a6e:	e00d      	b.n	10008a8c <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008a70:	2401      	movs	r4, #1
10008a72:	4264      	negs	r4, r4
10008a74:	e00a      	b.n	10008a8c <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a76:	2001      	movs	r0, #1
10008a78:	4b06      	ldr	r3, [pc, #24]	; (10008a94 <mpu_configure_fifo+0x64>)
10008a7a:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008a7c:	4b06      	ldr	r3, [pc, #24]	; (10008a98 <mpu_configure_fifo+0x68>)
10008a7e:	4798      	blx	r3
10008a80:	2800      	cmp	r0, #0
10008a82:	d003      	beq.n	10008a8c <mpu_configure_fifo+0x5c>
10008a84:	e7ef      	b.n	10008a66 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a86:	2001      	movs	r0, #1
10008a88:	4b02      	ldr	r3, [pc, #8]	; (10008a94 <mpu_configure_fifo+0x64>)
10008a8a:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008a8c:	0020      	movs	r0, r4
10008a8e:	bd70      	pop	{r4, r5, r6, pc}
10008a90:	10016c78 	.word	0x10016c78
10008a94:	100084c5 	.word	0x100084c5
10008a98:	10008569 	.word	0x10008569

10008a9c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008a9c:	b530      	push	{r4, r5, lr}
10008a9e:	b083      	sub	sp, #12
10008aa0:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008aa2:	4b59      	ldr	r3, [pc, #356]	; (10008c08 <mpu_set_bypass+0x16c>)
10008aa4:	7c9b      	ldrb	r3, [r3, #18]
10008aa6:	4283      	cmp	r3, r0
10008aa8:	d100      	bne.n	10008aac <mpu_set_bypass+0x10>
10008aaa:	e097      	b.n	10008bdc <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008aac:	2800      	cmp	r0, #0
10008aae:	d042      	beq.n	10008b36 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ab0:	4b55      	ldr	r3, [pc, #340]	; (10008c08 <mpu_set_bypass+0x16c>)
10008ab2:	681a      	ldr	r2, [r3, #0]
10008ab4:	7911      	ldrb	r1, [r2, #4]
10008ab6:	685b      	ldr	r3, [r3, #4]
10008ab8:	7818      	ldrb	r0, [r3, #0]
10008aba:	466b      	mov	r3, sp
10008abc:	3307      	adds	r3, #7
10008abe:	2201      	movs	r2, #1
10008ac0:	4d52      	ldr	r5, [pc, #328]	; (10008c0c <mpu_set_bypass+0x170>)
10008ac2:	47a8      	blx	r5
10008ac4:	2800      	cmp	r0, #0
10008ac6:	d000      	beq.n	10008aca <mpu_set_bypass+0x2e>
10008ac8:	e08a      	b.n	10008be0 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008aca:	466b      	mov	r3, sp
10008acc:	3307      	adds	r3, #7
10008ace:	781a      	ldrb	r2, [r3, #0]
10008ad0:	2120      	movs	r1, #32
10008ad2:	438a      	bics	r2, r1
10008ad4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ad6:	4a4c      	ldr	r2, [pc, #304]	; (10008c08 <mpu_set_bypass+0x16c>)
10008ad8:	6811      	ldr	r1, [r2, #0]
10008ada:	7909      	ldrb	r1, [r1, #4]
10008adc:	6852      	ldr	r2, [r2, #4]
10008ade:	7810      	ldrb	r0, [r2, #0]
10008ae0:	2201      	movs	r2, #1
10008ae2:	4d4b      	ldr	r5, [pc, #300]	; (10008c10 <mpu_set_bypass+0x174>)
10008ae4:	47a8      	blx	r5
10008ae6:	2800      	cmp	r0, #0
10008ae8:	d17d      	bne.n	10008be6 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008aea:	3003      	adds	r0, #3
10008aec:	4b49      	ldr	r3, [pc, #292]	; (10008c14 <mpu_set_bypass+0x178>)
10008aee:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008af0:	2202      	movs	r2, #2
10008af2:	466b      	mov	r3, sp
10008af4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008af6:	2322      	movs	r3, #34	; 0x22
10008af8:	4a43      	ldr	r2, [pc, #268]	; (10008c08 <mpu_set_bypass+0x16c>)
10008afa:	5cd3      	ldrb	r3, [r2, r3]
10008afc:	2b00      	cmp	r3, #0
10008afe:	d002      	beq.n	10008b06 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008b00:	2282      	movs	r2, #130	; 0x82
10008b02:	466b      	mov	r3, sp
10008b04:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b06:	2323      	movs	r3, #35	; 0x23
10008b08:	4a3f      	ldr	r2, [pc, #252]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b0a:	5cd3      	ldrb	r3, [r2, r3]
10008b0c:	2b00      	cmp	r3, #0
10008b0e:	d005      	beq.n	10008b1c <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b10:	466b      	mov	r3, sp
10008b12:	1dda      	adds	r2, r3, #7
10008b14:	79d9      	ldrb	r1, [r3, #7]
10008b16:	2330      	movs	r3, #48	; 0x30
10008b18:	430b      	orrs	r3, r1
10008b1a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b1c:	4b3a      	ldr	r3, [pc, #232]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b1e:	681a      	ldr	r2, [r3, #0]
10008b20:	7dd1      	ldrb	r1, [r2, #23]
10008b22:	685b      	ldr	r3, [r3, #4]
10008b24:	7818      	ldrb	r0, [r3, #0]
10008b26:	466b      	mov	r3, sp
10008b28:	3307      	adds	r3, #7
10008b2a:	2201      	movs	r2, #1
10008b2c:	4d38      	ldr	r5, [pc, #224]	; (10008c10 <mpu_set_bypass+0x174>)
10008b2e:	47a8      	blx	r5
10008b30:	2800      	cmp	r0, #0
10008b32:	d04f      	beq.n	10008bd4 <mpu_set_bypass+0x138>
10008b34:	e05a      	b.n	10008bec <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b36:	4b34      	ldr	r3, [pc, #208]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b38:	681a      	ldr	r2, [r3, #0]
10008b3a:	7911      	ldrb	r1, [r2, #4]
10008b3c:	685b      	ldr	r3, [r3, #4]
10008b3e:	7818      	ldrb	r0, [r3, #0]
10008b40:	466b      	mov	r3, sp
10008b42:	3307      	adds	r3, #7
10008b44:	2201      	movs	r2, #1
10008b46:	4d31      	ldr	r5, [pc, #196]	; (10008c0c <mpu_set_bypass+0x170>)
10008b48:	47a8      	blx	r5
10008b4a:	2800      	cmp	r0, #0
10008b4c:	d151      	bne.n	10008bf2 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008b4e:	4b2e      	ldr	r3, [pc, #184]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b50:	7a9b      	ldrb	r3, [r3, #10]
10008b52:	07db      	lsls	r3, r3, #31
10008b54:	d506      	bpl.n	10008b64 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008b56:	466b      	mov	r3, sp
10008b58:	1dda      	adds	r2, r3, #7
10008b5a:	79d9      	ldrb	r1, [r3, #7]
10008b5c:	2320      	movs	r3, #32
10008b5e:	430b      	orrs	r3, r1
10008b60:	7013      	strb	r3, [r2, #0]
10008b62:	e005      	b.n	10008b70 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008b64:	466b      	mov	r3, sp
10008b66:	1dda      	adds	r2, r3, #7
10008b68:	79db      	ldrb	r3, [r3, #7]
10008b6a:	2120      	movs	r1, #32
10008b6c:	438b      	bics	r3, r1
10008b6e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b70:	4b25      	ldr	r3, [pc, #148]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b72:	681a      	ldr	r2, [r3, #0]
10008b74:	7911      	ldrb	r1, [r2, #4]
10008b76:	685b      	ldr	r3, [r3, #4]
10008b78:	7818      	ldrb	r0, [r3, #0]
10008b7a:	466b      	mov	r3, sp
10008b7c:	3307      	adds	r3, #7
10008b7e:	2201      	movs	r2, #1
10008b80:	4d23      	ldr	r5, [pc, #140]	; (10008c10 <mpu_set_bypass+0x174>)
10008b82:	47a8      	blx	r5
10008b84:	2800      	cmp	r0, #0
10008b86:	d137      	bne.n	10008bf8 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008b88:	3003      	adds	r0, #3
10008b8a:	4b22      	ldr	r3, [pc, #136]	; (10008c14 <mpu_set_bypass+0x178>)
10008b8c:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008b8e:	2322      	movs	r3, #34	; 0x22
10008b90:	4a1d      	ldr	r2, [pc, #116]	; (10008c08 <mpu_set_bypass+0x16c>)
10008b92:	5cd3      	ldrb	r3, [r2, r3]
10008b94:	2b00      	cmp	r3, #0
10008b96:	d003      	beq.n	10008ba0 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008b98:	2280      	movs	r2, #128	; 0x80
10008b9a:	466b      	mov	r3, sp
10008b9c:	71da      	strb	r2, [r3, #7]
10008b9e:	e002      	b.n	10008ba6 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008ba0:	2200      	movs	r2, #0
10008ba2:	466b      	mov	r3, sp
10008ba4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008ba6:	2323      	movs	r3, #35	; 0x23
10008ba8:	4a17      	ldr	r2, [pc, #92]	; (10008c08 <mpu_set_bypass+0x16c>)
10008baa:	5cd3      	ldrb	r3, [r2, r3]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d005      	beq.n	10008bbc <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bb0:	466b      	mov	r3, sp
10008bb2:	1dda      	adds	r2, r3, #7
10008bb4:	79d9      	ldrb	r1, [r3, #7]
10008bb6:	2330      	movs	r3, #48	; 0x30
10008bb8:	430b      	orrs	r3, r1
10008bba:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bbc:	4b12      	ldr	r3, [pc, #72]	; (10008c08 <mpu_set_bypass+0x16c>)
10008bbe:	681a      	ldr	r2, [r3, #0]
10008bc0:	7dd1      	ldrb	r1, [r2, #23]
10008bc2:	685b      	ldr	r3, [r3, #4]
10008bc4:	7818      	ldrb	r0, [r3, #0]
10008bc6:	466b      	mov	r3, sp
10008bc8:	3307      	adds	r3, #7
10008bca:	2201      	movs	r2, #1
10008bcc:	4d10      	ldr	r5, [pc, #64]	; (10008c10 <mpu_set_bypass+0x174>)
10008bce:	47a8      	blx	r5
10008bd0:	2800      	cmp	r0, #0
10008bd2:	d114      	bne.n	10008bfe <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008bd4:	4b0c      	ldr	r3, [pc, #48]	; (10008c08 <mpu_set_bypass+0x16c>)
10008bd6:	749c      	strb	r4, [r3, #18]
    return 0;
10008bd8:	2000      	movs	r0, #0
10008bda:	e012      	b.n	10008c02 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008bdc:	2000      	movs	r0, #0
10008bde:	e010      	b.n	10008c02 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008be0:	2001      	movs	r0, #1
10008be2:	4240      	negs	r0, r0
10008be4:	e00d      	b.n	10008c02 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008be6:	2001      	movs	r0, #1
10008be8:	4240      	negs	r0, r0
10008bea:	e00a      	b.n	10008c02 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bec:	2001      	movs	r0, #1
10008bee:	4240      	negs	r0, r0
10008bf0:	e007      	b.n	10008c02 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bf2:	2001      	movs	r0, #1
10008bf4:	4240      	negs	r0, r0
10008bf6:	e004      	b.n	10008c02 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008bf8:	2001      	movs	r0, #1
10008bfa:	4240      	negs	r0, r0
10008bfc:	e001      	b.n	10008c02 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008bfe:	2001      	movs	r0, #1
10008c00:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008c02:	b003      	add	sp, #12
10008c04:	bd30      	pop	{r4, r5, pc}
10008c06:	46c0      	nop			; (mov r8, r8)
10008c08:	10016c78 	.word	0x10016c78
10008c0c:	1000a6a5 	.word	0x1000a6a5
10008c10:	1000a649 	.word	0x1000a649
10008c14:	10008129 	.word	0x10008129

10008c18 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c18:	b530      	push	{r4, r5, lr}
10008c1a:	b083      	sub	sp, #12
10008c1c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c1e:	2323      	movs	r3, #35	; 0x23
10008c20:	4a1c      	ldr	r2, [pc, #112]	; (10008c94 <mpu_set_int_latched+0x7c>)
10008c22:	5cd3      	ldrb	r3, [r2, r3]
10008c24:	4283      	cmp	r3, r0
10008c26:	d02e      	beq.n	10008c86 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008c28:	2800      	cmp	r0, #0
10008c2a:	d003      	beq.n	10008c34 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c2c:	2230      	movs	r2, #48	; 0x30
10008c2e:	466b      	mov	r3, sp
10008c30:	71da      	strb	r2, [r3, #7]
10008c32:	e002      	b.n	10008c3a <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008c34:	2200      	movs	r2, #0
10008c36:	466b      	mov	r3, sp
10008c38:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008c3a:	4b16      	ldr	r3, [pc, #88]	; (10008c94 <mpu_set_int_latched+0x7c>)
10008c3c:	7c9b      	ldrb	r3, [r3, #18]
10008c3e:	2b00      	cmp	r3, #0
10008c40:	d005      	beq.n	10008c4e <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008c42:	466b      	mov	r3, sp
10008c44:	1dda      	adds	r2, r3, #7
10008c46:	79d9      	ldrb	r1, [r3, #7]
10008c48:	2302      	movs	r3, #2
10008c4a:	430b      	orrs	r3, r1
10008c4c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008c4e:	2322      	movs	r3, #34	; 0x22
10008c50:	4a10      	ldr	r2, [pc, #64]	; (10008c94 <mpu_set_int_latched+0x7c>)
10008c52:	5cd3      	ldrb	r3, [r2, r3]
10008c54:	2b00      	cmp	r3, #0
10008c56:	d006      	beq.n	10008c66 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008c58:	466b      	mov	r3, sp
10008c5a:	1dda      	adds	r2, r3, #7
10008c5c:	79db      	ldrb	r3, [r3, #7]
10008c5e:	2180      	movs	r1, #128	; 0x80
10008c60:	4249      	negs	r1, r1
10008c62:	430b      	orrs	r3, r1
10008c64:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c66:	4b0b      	ldr	r3, [pc, #44]	; (10008c94 <mpu_set_int_latched+0x7c>)
10008c68:	681a      	ldr	r2, [r3, #0]
10008c6a:	7dd1      	ldrb	r1, [r2, #23]
10008c6c:	685b      	ldr	r3, [r3, #4]
10008c6e:	7818      	ldrb	r0, [r3, #0]
10008c70:	466b      	mov	r3, sp
10008c72:	3307      	adds	r3, #7
10008c74:	2201      	movs	r2, #1
10008c76:	4d08      	ldr	r5, [pc, #32]	; (10008c98 <mpu_set_int_latched+0x80>)
10008c78:	47a8      	blx	r5
10008c7a:	2800      	cmp	r0, #0
10008c7c:	d105      	bne.n	10008c8a <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c7e:	2323      	movs	r3, #35	; 0x23
10008c80:	4a04      	ldr	r2, [pc, #16]	; (10008c94 <mpu_set_int_latched+0x7c>)
10008c82:	54d4      	strb	r4, [r2, r3]
    return 0;
10008c84:	e003      	b.n	10008c8e <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c86:	2000      	movs	r0, #0
10008c88:	e001      	b.n	10008c8e <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008c8a:	2001      	movs	r0, #1
10008c8c:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008c8e:	b003      	add	sp, #12
10008c90:	bd30      	pop	{r4, r5, pc}
10008c92:	46c0      	nop			; (mov r8, r8)
10008c94:	10016c78 	.word	0x10016c78
10008c98:	1000a649 	.word	0x1000a649

10008c9c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008c9c:	b510      	push	{r4, lr}
10008c9e:	b082      	sub	sp, #8
10008ca0:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ca2:	2c28      	cmp	r4, #40	; 0x28
10008ca4:	d878      	bhi.n	10008d98 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008ca6:	2800      	cmp	r0, #0
10008ca8:	d115      	bne.n	10008cd6 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008caa:	2000      	movs	r0, #0
10008cac:	4b44      	ldr	r3, [pc, #272]	; (10008dc0 <mpu_lp_accel_mode+0x124>)
10008cae:	4798      	blx	r3
        tmp[0] = 0;
10008cb0:	ab01      	add	r3, sp, #4
10008cb2:	2200      	movs	r2, #0
10008cb4:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008cb6:	3207      	adds	r2, #7
10008cb8:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cba:	4a42      	ldr	r2, [pc, #264]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008cbc:	6811      	ldr	r1, [r2, #0]
10008cbe:	7d49      	ldrb	r1, [r1, #21]
10008cc0:	6852      	ldr	r2, [r2, #4]
10008cc2:	7810      	ldrb	r0, [r2, #0]
10008cc4:	2202      	movs	r2, #2
10008cc6:	4c40      	ldr	r4, [pc, #256]	; (10008dc8 <mpu_lp_accel_mode+0x12c>)
10008cc8:	47a0      	blx	r4
10008cca:	1e04      	subs	r4, r0, #0
10008ccc:	d167      	bne.n	10008d9e <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008cce:	2200      	movs	r2, #0
10008cd0:	4b3c      	ldr	r3, [pc, #240]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008cd2:	751a      	strb	r2, [r3, #20]
        return 0;
10008cd4:	e071      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008cd6:	2001      	movs	r0, #1
10008cd8:	4b39      	ldr	r3, [pc, #228]	; (10008dc0 <mpu_lp_accel_mode+0x124>)
10008cda:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cdc:	2c01      	cmp	r4, #1
10008cde:	d103      	bne.n	10008ce8 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008ce0:	2202      	movs	r2, #2
10008ce2:	ab01      	add	r3, sp, #4
10008ce4:	701a      	strb	r2, [r3, #0]
10008ce6:	e01a      	b.n	10008d1e <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008ce8:	2c02      	cmp	r4, #2
10008cea:	d103      	bne.n	10008cf4 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008cec:	2203      	movs	r2, #3
10008cee:	ab01      	add	r3, sp, #4
10008cf0:	701a      	strb	r2, [r3, #0]
10008cf2:	e014      	b.n	10008d1e <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008cf4:	2c05      	cmp	r4, #5
10008cf6:	d803      	bhi.n	10008d00 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008cf8:	2204      	movs	r2, #4
10008cfa:	ab01      	add	r3, sp, #4
10008cfc:	701a      	strb	r2, [r3, #0]
10008cfe:	e00e      	b.n	10008d1e <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008d00:	2c0a      	cmp	r4, #10
10008d02:	d803      	bhi.n	10008d0c <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008d04:	2205      	movs	r2, #5
10008d06:	ab01      	add	r3, sp, #4
10008d08:	701a      	strb	r2, [r3, #0]
10008d0a:	e008      	b.n	10008d1e <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008d0c:	2c14      	cmp	r4, #20
10008d0e:	d803      	bhi.n	10008d18 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008d10:	2206      	movs	r2, #6
10008d12:	ab01      	add	r3, sp, #4
10008d14:	701a      	strb	r2, [r3, #0]
10008d16:	e002      	b.n	10008d1e <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008d18:	2207      	movs	r2, #7
10008d1a:	ab01      	add	r3, sp, #4
10008d1c:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008d1e:	4b29      	ldr	r3, [pc, #164]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008d20:	681a      	ldr	r2, [r3, #0]
10008d22:	7a51      	ldrb	r1, [r2, #9]
10008d24:	685b      	ldr	r3, [r3, #4]
10008d26:	7818      	ldrb	r0, [r3, #0]
10008d28:	ab01      	add	r3, sp, #4
10008d2a:	2201      	movs	r2, #1
10008d2c:	4c26      	ldr	r4, [pc, #152]	; (10008dc8 <mpu_lp_accel_mode+0x12c>)
10008d2e:	47a0      	blx	r4
10008d30:	2800      	cmp	r0, #0
10008d32:	d137      	bne.n	10008da4 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d34:	4b23      	ldr	r3, [pc, #140]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008d36:	681a      	ldr	r2, [r3, #0]
10008d38:	7a11      	ldrb	r1, [r2, #8]
10008d3a:	685b      	ldr	r3, [r3, #4]
10008d3c:	7818      	ldrb	r0, [r3, #0]
10008d3e:	ab01      	add	r3, sp, #4
10008d40:	2201      	movs	r2, #1
10008d42:	4c22      	ldr	r4, [pc, #136]	; (10008dcc <mpu_lp_accel_mode+0x130>)
10008d44:	47a0      	blx	r4
10008d46:	2800      	cmp	r0, #0
10008d48:	d12f      	bne.n	10008daa <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d4a:	ab01      	add	r3, sp, #4
10008d4c:	7819      	ldrb	r1, [r3, #0]
10008d4e:	2208      	movs	r2, #8
10008d50:	430a      	orrs	r2, r1
10008d52:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d54:	4a1b      	ldr	r2, [pc, #108]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008d56:	6811      	ldr	r1, [r2, #0]
10008d58:	7a09      	ldrb	r1, [r1, #8]
10008d5a:	6852      	ldr	r2, [r2, #4]
10008d5c:	7810      	ldrb	r0, [r2, #0]
10008d5e:	2201      	movs	r2, #1
10008d60:	4c19      	ldr	r4, [pc, #100]	; (10008dc8 <mpu_lp_accel_mode+0x12c>)
10008d62:	47a0      	blx	r4
10008d64:	2800      	cmp	r0, #0
10008d66:	d123      	bne.n	10008db0 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d68:	ab01      	add	r3, sp, #4
10008d6a:	2220      	movs	r2, #32
10008d6c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d6e:	4a15      	ldr	r2, [pc, #84]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008d70:	6811      	ldr	r1, [r2, #0]
10008d72:	7d49      	ldrb	r1, [r1, #21]
10008d74:	6852      	ldr	r2, [r2, #4]
10008d76:	7810      	ldrb	r0, [r2, #0]
10008d78:	2201      	movs	r2, #1
10008d7a:	4c13      	ldr	r4, [pc, #76]	; (10008dc8 <mpu_lp_accel_mode+0x12c>)
10008d7c:	47a0      	blx	r4
10008d7e:	1e04      	subs	r4, r0, #0
10008d80:	d119      	bne.n	10008db6 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d82:	4b10      	ldr	r3, [pc, #64]	; (10008dc4 <mpu_lp_accel_mode+0x128>)
10008d84:	2208      	movs	r2, #8
10008d86:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008d88:	2200      	movs	r2, #0
10008d8a:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d8c:	3201      	adds	r2, #1
10008d8e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008d90:	2000      	movs	r0, #0
10008d92:	4b0f      	ldr	r3, [pc, #60]	; (10008dd0 <mpu_lp_accel_mode+0x134>)
10008d94:	4798      	blx	r3

    return 0;
10008d96:	e010      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008d98:	2401      	movs	r4, #1
10008d9a:	4264      	negs	r4, r4
10008d9c:	e00d      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008d9e:	2401      	movs	r4, #1
10008da0:	4264      	negs	r4, r4
10008da2:	e00a      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008da4:	2401      	movs	r4, #1
10008da6:	4264      	negs	r4, r4
10008da8:	e007      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008daa:	2401      	movs	r4, #1
10008dac:	4264      	negs	r4, r4
10008dae:	e004      	b.n	10008dba <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008db0:	2401      	movs	r4, #1
10008db2:	4264      	negs	r4, r4
10008db4:	e001      	b.n	10008dba <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008db6:	2401      	movs	r4, #1
10008db8:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008dba:	0020      	movs	r0, r4
10008dbc:	b002      	add	sp, #8
10008dbe:	bd10      	pop	{r4, pc}
10008dc0:	10008c19 	.word	0x10008c19
10008dc4:	10016c78 	.word	0x10016c78
10008dc8:	1000a649 	.word	0x1000a649
10008dcc:	1000a6a5 	.word	0x1000a6a5
10008dd0:	10008a31 	.word	0x10008a31

10008dd4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008dd4:	b530      	push	{r4, r5, lr}
10008dd6:	b083      	sub	sp, #12
10008dd8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008dda:	4b2c      	ldr	r3, [pc, #176]	; (10008e8c <mpu_set_sample_rate+0xb8>)
10008ddc:	7a9b      	ldrb	r3, [r3, #10]
10008dde:	2b00      	cmp	r3, #0
10008de0:	d048      	beq.n	10008e74 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008de2:	2324      	movs	r3, #36	; 0x24
10008de4:	4a29      	ldr	r2, [pc, #164]	; (10008e8c <mpu_set_sample_rate+0xb8>)
10008de6:	5cd3      	ldrb	r3, [r2, r3]
10008de8:	2b00      	cmp	r3, #0
10008dea:	d146      	bne.n	10008e7a <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dec:	7d13      	ldrb	r3, [r2, #20]
10008dee:	2b00      	cmp	r3, #0
10008df0:	d00a      	beq.n	10008e08 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008df2:	1e43      	subs	r3, r0, #1
10008df4:	b29b      	uxth	r3, r3
10008df6:	2b27      	cmp	r3, #39	; 0x27
10008df8:	d803      	bhi.n	10008e02 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008dfa:	4b25      	ldr	r3, [pc, #148]	; (10008e90 <mpu_set_sample_rate+0xbc>)
10008dfc:	4798      	blx	r3
                return 0;
10008dfe:	2400      	movs	r4, #0
10008e00:	e040      	b.n	10008e84 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008e02:	2000      	movs	r0, #0
10008e04:	4b22      	ldr	r3, [pc, #136]	; (10008e90 <mpu_set_sample_rate+0xbc>)
10008e06:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008e08:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008e0a:	2c03      	cmp	r4, #3
10008e0c:	d907      	bls.n	10008e1e <mpu_set_sample_rate+0x4a>
10008e0e:	1c21      	adds	r1, r4, #0
10008e10:	23fa      	movs	r3, #250	; 0xfa
10008e12:	009b      	lsls	r3, r3, #2
10008e14:	429c      	cmp	r4, r3
10008e16:	d901      	bls.n	10008e1c <mpu_set_sample_rate+0x48>
10008e18:	4b1e      	ldr	r3, [pc, #120]	; (10008e94 <mpu_set_sample_rate+0xc0>)
10008e1a:	8819      	ldrh	r1, [r3, #0]
10008e1c:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008e1e:	466b      	mov	r3, sp
10008e20:	1ddc      	adds	r4, r3, #7
10008e22:	20fa      	movs	r0, #250	; 0xfa
10008e24:	0080      	lsls	r0, r0, #2
10008e26:	4b1c      	ldr	r3, [pc, #112]	; (10008e98 <mpu_set_sample_rate+0xc4>)
10008e28:	4798      	blx	r3
10008e2a:	3801      	subs	r0, #1
10008e2c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008e2e:	4b17      	ldr	r3, [pc, #92]	; (10008e8c <mpu_set_sample_rate+0xb8>)
10008e30:	681a      	ldr	r2, [r3, #0]
10008e32:	7851      	ldrb	r1, [r2, #1]
10008e34:	685b      	ldr	r3, [r3, #4]
10008e36:	7818      	ldrb	r0, [r3, #0]
10008e38:	0023      	movs	r3, r4
10008e3a:	2201      	movs	r2, #1
10008e3c:	4c17      	ldr	r4, [pc, #92]	; (10008e9c <mpu_set_sample_rate+0xc8>)
10008e3e:	47a0      	blx	r4
10008e40:	1e04      	subs	r4, r0, #0
10008e42:	d11d      	bne.n	10008e80 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e44:	4d11      	ldr	r5, [pc, #68]	; (10008e8c <mpu_set_sample_rate+0xb8>)
10008e46:	466b      	mov	r3, sp
10008e48:	79d9      	ldrb	r1, [r3, #7]
10008e4a:	3101      	adds	r1, #1
10008e4c:	20fa      	movs	r0, #250	; 0xfa
10008e4e:	0080      	lsls	r0, r0, #2
10008e50:	4b11      	ldr	r3, [pc, #68]	; (10008e98 <mpu_set_sample_rate+0xc4>)
10008e52:	4798      	blx	r3
10008e54:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e56:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008e58:	1c18      	adds	r0, r3, #0
10008e5a:	b29b      	uxth	r3, r3
10008e5c:	2b64      	cmp	r3, #100	; 0x64
10008e5e:	d900      	bls.n	10008e62 <mpu_set_sample_rate+0x8e>
10008e60:	2064      	movs	r0, #100	; 0x64
10008e62:	b280      	uxth	r0, r0
10008e64:	4b0e      	ldr	r3, [pc, #56]	; (10008ea0 <mpu_set_sample_rate+0xcc>)
10008e66:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e68:	4b08      	ldr	r3, [pc, #32]	; (10008e8c <mpu_set_sample_rate+0xb8>)
10008e6a:	89d8      	ldrh	r0, [r3, #14]
10008e6c:	0840      	lsrs	r0, r0, #1
10008e6e:	4b0d      	ldr	r3, [pc, #52]	; (10008ea4 <mpu_set_sample_rate+0xd0>)
10008e70:	4798      	blx	r3
        return 0;
10008e72:	e007      	b.n	10008e84 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e74:	2401      	movs	r4, #1
10008e76:	4264      	negs	r4, r4
10008e78:	e004      	b.n	10008e84 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008e7a:	2401      	movs	r4, #1
10008e7c:	4264      	negs	r4, r4
10008e7e:	e001      	b.n	10008e84 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008e80:	2401      	movs	r4, #1
10008e82:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008e84:	0020      	movs	r0, r4
10008e86:	b003      	add	sp, #12
10008e88:	bd30      	pop	{r4, r5, pc}
10008e8a:	46c0      	nop			; (mov r8, r8)
10008e8c:	10016c78 	.word	0x10016c78
10008e90:	10008c9d 	.word	0x10008c9d
10008e94:	10015574 	.word	0x10015574
10008e98:	10012755 	.word	0x10012755
10008e9c:	1000a649 	.word	0x1000a649
10008ea0:	100089b9 	.word	0x100089b9
10008ea4:	100088e1 	.word	0x100088e1

10008ea8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008ea8:	b530      	push	{r4, r5, lr}
10008eaa:	b083      	sub	sp, #12
10008eac:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008eae:	2370      	movs	r3, #112	; 0x70
10008eb0:	4203      	tst	r3, r0
10008eb2:	d003      	beq.n	10008ebc <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008eb4:	2201      	movs	r2, #1
10008eb6:	466b      	mov	r3, sp
10008eb8:	71da      	strb	r2, [r3, #7]
10008eba:	e015      	b.n	10008ee8 <mpu_set_sensors+0x40>
    else if (sensors)
10008ebc:	2800      	cmp	r0, #0
10008ebe:	d003      	beq.n	10008ec8 <mpu_set_sensors+0x20>
        data = 0;
10008ec0:	2200      	movs	r2, #0
10008ec2:	466b      	mov	r3, sp
10008ec4:	71da      	strb	r2, [r3, #7]
10008ec6:	e00f      	b.n	10008ee8 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008ec8:	466b      	mov	r3, sp
10008eca:	3307      	adds	r3, #7
10008ecc:	2240      	movs	r2, #64	; 0x40
10008ece:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008ed0:	4a6a      	ldr	r2, [pc, #424]	; (1000907c <mpu_set_sensors+0x1d4>)
10008ed2:	6811      	ldr	r1, [r2, #0]
10008ed4:	7d49      	ldrb	r1, [r1, #21]
10008ed6:	6852      	ldr	r2, [r2, #4]
10008ed8:	7810      	ldrb	r0, [r2, #0]
10008eda:	2201      	movs	r2, #1
10008edc:	4d68      	ldr	r5, [pc, #416]	; (10009080 <mpu_set_sensors+0x1d8>)
10008ede:	47a8      	blx	r5
10008ee0:	2800      	cmp	r0, #0
10008ee2:	d100      	bne.n	10008ee6 <mpu_set_sensors+0x3e>
10008ee4:	e0b2      	b.n	1000904c <mpu_set_sensors+0x1a4>
10008ee6:	e00b      	b.n	10008f00 <mpu_set_sensors+0x58>
10008ee8:	4b64      	ldr	r3, [pc, #400]	; (1000907c <mpu_set_sensors+0x1d4>)
10008eea:	681a      	ldr	r2, [r3, #0]
10008eec:	7d51      	ldrb	r1, [r2, #21]
10008eee:	685b      	ldr	r3, [r3, #4]
10008ef0:	7818      	ldrb	r0, [r3, #0]
10008ef2:	466b      	mov	r3, sp
10008ef4:	3307      	adds	r3, #7
10008ef6:	2201      	movs	r2, #1
10008ef8:	4d61      	ldr	r5, [pc, #388]	; (10009080 <mpu_set_sensors+0x1d8>)
10008efa:	47a8      	blx	r5
10008efc:	2800      	cmp	r0, #0
10008efe:	d005      	beq.n	10008f0c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008f00:	2200      	movs	r2, #0
10008f02:	4b5e      	ldr	r3, [pc, #376]	; (1000907c <mpu_set_sensors+0x1d4>)
10008f04:	729a      	strb	r2, [r3, #10]
        return -1;
10008f06:	2501      	movs	r5, #1
10008f08:	426d      	negs	r5, r5
10008f0a:	e0b4      	b.n	10009076 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008f0c:	466b      	mov	r3, sp
10008f0e:	1dda      	adds	r2, r3, #7
10008f10:	79db      	ldrb	r3, [r3, #7]
10008f12:	2140      	movs	r1, #64	; 0x40
10008f14:	438b      	bics	r3, r1
10008f16:	4959      	ldr	r1, [pc, #356]	; (1000907c <mpu_set_sensors+0x1d4>)
10008f18:	730b      	strb	r3, [r1, #12]

    data = 0;
10008f1a:	2300      	movs	r3, #0
10008f1c:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008f1e:	0663      	lsls	r3, r4, #25
10008f20:	d402      	bmi.n	10008f28 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008f22:	2204      	movs	r2, #4
10008f24:	466b      	mov	r3, sp
10008f26:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008f28:	06a3      	lsls	r3, r4, #26
10008f2a:	d405      	bmi.n	10008f38 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008f2c:	466b      	mov	r3, sp
10008f2e:	1dda      	adds	r2, r3, #7
10008f30:	79d9      	ldrb	r1, [r3, #7]
10008f32:	2302      	movs	r3, #2
10008f34:	430b      	orrs	r3, r1
10008f36:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008f38:	06e3      	lsls	r3, r4, #27
10008f3a:	d405      	bmi.n	10008f48 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008f3c:	466b      	mov	r3, sp
10008f3e:	1dda      	adds	r2, r3, #7
10008f40:	79d9      	ldrb	r1, [r3, #7]
10008f42:	2301      	movs	r3, #1
10008f44:	430b      	orrs	r3, r1
10008f46:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008f48:	0723      	lsls	r3, r4, #28
10008f4a:	d405      	bmi.n	10008f58 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008f4c:	466b      	mov	r3, sp
10008f4e:	1dda      	adds	r2, r3, #7
10008f50:	79d9      	ldrb	r1, [r3, #7]
10008f52:	2338      	movs	r3, #56	; 0x38
10008f54:	430b      	orrs	r3, r1
10008f56:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008f58:	4b48      	ldr	r3, [pc, #288]	; (1000907c <mpu_set_sensors+0x1d4>)
10008f5a:	681a      	ldr	r2, [r3, #0]
10008f5c:	7d91      	ldrb	r1, [r2, #22]
10008f5e:	685b      	ldr	r3, [r3, #4]
10008f60:	7818      	ldrb	r0, [r3, #0]
10008f62:	466b      	mov	r3, sp
10008f64:	3307      	adds	r3, #7
10008f66:	2201      	movs	r2, #1
10008f68:	4d45      	ldr	r5, [pc, #276]	; (10009080 <mpu_set_sensors+0x1d8>)
10008f6a:	47a8      	blx	r5
10008f6c:	2800      	cmp	r0, #0
10008f6e:	d005      	beq.n	10008f7c <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008f70:	2200      	movs	r2, #0
10008f72:	4b42      	ldr	r3, [pc, #264]	; (1000907c <mpu_set_sensors+0x1d4>)
10008f74:	729a      	strb	r2, [r3, #10]
        return -1;
10008f76:	2501      	movs	r5, #1
10008f78:	426d      	negs	r5, r5
10008f7a:	e07c      	b.n	10009076 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008f7c:	2308      	movs	r3, #8
10008f7e:	0022      	movs	r2, r4
10008f80:	439a      	bics	r2, r3
10008f82:	d06b      	beq.n	1000905c <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008f84:	2000      	movs	r0, #0
10008f86:	4b3f      	ldr	r3, [pc, #252]	; (10009084 <mpu_set_sensors+0x1dc>)
10008f88:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f8a:	4b3c      	ldr	r3, [pc, #240]	; (1000907c <mpu_set_sensors+0x1d4>)
10008f8c:	681a      	ldr	r2, [r3, #0]
10008f8e:	7911      	ldrb	r1, [r2, #4]
10008f90:	685b      	ldr	r3, [r3, #4]
10008f92:	7818      	ldrb	r0, [r3, #0]
10008f94:	466b      	mov	r3, sp
10008f96:	3306      	adds	r3, #6
10008f98:	2201      	movs	r2, #1
10008f9a:	4d3b      	ldr	r5, [pc, #236]	; (10009088 <mpu_set_sensors+0x1e0>)
10008f9c:	47a8      	blx	r5
10008f9e:	2800      	cmp	r0, #0
10008fa0:	d148      	bne.n	10009034 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008fa2:	07e3      	lsls	r3, r4, #31
10008fa4:	d509      	bpl.n	10008fba <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008fa6:	2211      	movs	r2, #17
10008fa8:	466b      	mov	r3, sp
10008faa:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008fac:	466b      	mov	r3, sp
10008fae:	1d9a      	adds	r2, r3, #6
10008fb0:	7999      	ldrb	r1, [r3, #6]
10008fb2:	2320      	movs	r3, #32
10008fb4:	430b      	orrs	r3, r1
10008fb6:	7013      	strb	r3, [r2, #0]
10008fb8:	e008      	b.n	10008fcc <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008fba:	2210      	movs	r2, #16
10008fbc:	466b      	mov	r3, sp
10008fbe:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008fc0:	466b      	mov	r3, sp
10008fc2:	1d9a      	adds	r2, r3, #6
10008fc4:	799b      	ldrb	r3, [r3, #6]
10008fc6:	2120      	movs	r1, #32
10008fc8:	438b      	bics	r3, r1
10008fca:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008fcc:	2324      	movs	r3, #36	; 0x24
10008fce:	4a2b      	ldr	r2, [pc, #172]	; (1000907c <mpu_set_sensors+0x1d4>)
10008fd0:	5cd3      	ldrb	r3, [r2, r3]
10008fd2:	2b00      	cmp	r3, #0
10008fd4:	d007      	beq.n	10008fe6 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008fd6:	466b      	mov	r3, sp
10008fd8:	1d9a      	adds	r2, r3, #6
10008fda:	799b      	ldrb	r3, [r3, #6]
10008fdc:	2180      	movs	r1, #128	; 0x80
10008fde:	4249      	negs	r1, r1
10008fe0:	430b      	orrs	r3, r1
10008fe2:	7013      	strb	r3, [r2, #0]
10008fe4:	e005      	b.n	10008ff2 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fe6:	466b      	mov	r3, sp
10008fe8:	1d9a      	adds	r2, r3, #6
10008fea:	799b      	ldrb	r3, [r3, #6]
10008fec:	217f      	movs	r1, #127	; 0x7f
10008fee:	400b      	ands	r3, r1
10008ff0:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008ff2:	4b22      	ldr	r3, [pc, #136]	; (1000907c <mpu_set_sensors+0x1d4>)
10008ff4:	2226      	movs	r2, #38	; 0x26
10008ff6:	6819      	ldr	r1, [r3, #0]
10008ff8:	5c89      	ldrb	r1, [r1, r2]
10008ffa:	685b      	ldr	r3, [r3, #4]
10008ffc:	7818      	ldrb	r0, [r3, #0]
10008ffe:	466b      	mov	r3, sp
10009000:	3307      	adds	r3, #7
10009002:	3a25      	subs	r2, #37	; 0x25
10009004:	4d1e      	ldr	r5, [pc, #120]	; (10009080 <mpu_set_sensors+0x1d8>)
10009006:	47a8      	blx	r5
10009008:	2800      	cmp	r0, #0
1000900a:	d116      	bne.n	1000903a <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000900c:	4b1b      	ldr	r3, [pc, #108]	; (1000907c <mpu_set_sensors+0x1d4>)
1000900e:	681a      	ldr	r2, [r3, #0]
10009010:	7911      	ldrb	r1, [r2, #4]
10009012:	685b      	ldr	r3, [r3, #4]
10009014:	7818      	ldrb	r0, [r3, #0]
10009016:	466b      	mov	r3, sp
10009018:	3306      	adds	r3, #6
1000901a:	2201      	movs	r2, #1
1000901c:	4d18      	ldr	r5, [pc, #96]	; (10009080 <mpu_set_sensors+0x1d8>)
1000901e:	47a8      	blx	r5
10009020:	1e05      	subs	r5, r0, #0
10009022:	d10d      	bne.n	10009040 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009024:	4b15      	ldr	r3, [pc, #84]	; (1000907c <mpu_set_sensors+0x1d4>)
10009026:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009028:	2200      	movs	r2, #0
1000902a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1000902c:	2032      	movs	r0, #50	; 0x32
1000902e:	4b17      	ldr	r3, [pc, #92]	; (1000908c <mpu_set_sensors+0x1e4>)
10009030:	4798      	blx	r3
    return 0;
10009032:	e020      	b.n	10009076 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009034:	2501      	movs	r5, #1
10009036:	426d      	negs	r5, r5
10009038:	e01d      	b.n	10009076 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000903a:	2501      	movs	r5, #1
1000903c:	426d      	negs	r5, r5
1000903e:	e01a      	b.n	10009076 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009040:	2501      	movs	r5, #1
10009042:	426d      	negs	r5, r5
10009044:	e017      	b.n	10009076 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009046:	2501      	movs	r5, #1
10009048:	426d      	negs	r5, r5
1000904a:	e014      	b.n	10009076 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000904c:	466b      	mov	r3, sp
1000904e:	3307      	adds	r3, #7
10009050:	781b      	ldrb	r3, [r3, #0]
10009052:	2240      	movs	r2, #64	; 0x40
10009054:	4393      	bics	r3, r2
10009056:	4a09      	ldr	r2, [pc, #36]	; (1000907c <mpu_set_sensors+0x1d4>)
10009058:	7313      	strb	r3, [r2, #12]
1000905a:	e762      	b.n	10008f22 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000905c:	4b07      	ldr	r3, [pc, #28]	; (1000907c <mpu_set_sensors+0x1d4>)
1000905e:	681a      	ldr	r2, [r3, #0]
10009060:	7911      	ldrb	r1, [r2, #4]
10009062:	685b      	ldr	r3, [r3, #4]
10009064:	7818      	ldrb	r0, [r3, #0]
10009066:	466b      	mov	r3, sp
10009068:	3306      	adds	r3, #6
1000906a:	2201      	movs	r2, #1
1000906c:	4d06      	ldr	r5, [pc, #24]	; (10009088 <mpu_set_sensors+0x1e0>)
1000906e:	47a8      	blx	r5
10009070:	2800      	cmp	r0, #0
10009072:	d0a2      	beq.n	10008fba <mpu_set_sensors+0x112>
10009074:	e7e7      	b.n	10009046 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009076:	0028      	movs	r0, r5
10009078:	b003      	add	sp, #12
1000907a:	bd30      	pop	{r4, r5, pc}
1000907c:	10016c78 	.word	0x10016c78
10009080:	1000a649 	.word	0x1000a649
10009084:	10008c19 	.word	0x10008c19
10009088:	1000a6a5 	.word	0x1000a6a5
1000908c:	10008129 	.word	0x10008129

10009090 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009090:	b530      	push	{r4, r5, lr}
10009092:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009094:	ab02      	add	r3, sp, #8
10009096:	2280      	movs	r2, #128	; 0x80
10009098:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000909a:	4ab9      	ldr	r2, [pc, #740]	; (10009380 <mpu_init+0x2f0>)
1000909c:	6811      	ldr	r1, [r2, #0]
1000909e:	7d49      	ldrb	r1, [r1, #21]
100090a0:	6852      	ldr	r2, [r2, #4]
100090a2:	7810      	ldrb	r0, [r2, #0]
100090a4:	2201      	movs	r2, #1
100090a6:	4cb7      	ldr	r4, [pc, #732]	; (10009384 <mpu_init+0x2f4>)
100090a8:	47a0      	blx	r4
100090aa:	2800      	cmp	r0, #0
100090ac:	d000      	beq.n	100090b0 <mpu_init+0x20>
100090ae:	e149      	b.n	10009344 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
100090b0:	3064      	adds	r0, #100	; 0x64
100090b2:	4bb5      	ldr	r3, [pc, #724]	; (10009388 <mpu_init+0x2f8>)
100090b4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100090b6:	ab02      	add	r3, sp, #8
100090b8:	2200      	movs	r2, #0
100090ba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100090bc:	4ab0      	ldr	r2, [pc, #704]	; (10009380 <mpu_init+0x2f0>)
100090be:	6811      	ldr	r1, [r2, #0]
100090c0:	7d49      	ldrb	r1, [r1, #21]
100090c2:	6852      	ldr	r2, [r2, #4]
100090c4:	7810      	ldrb	r0, [r2, #0]
100090c6:	2201      	movs	r2, #1
100090c8:	4cae      	ldr	r4, [pc, #696]	; (10009384 <mpu_init+0x2f4>)
100090ca:	47a0      	blx	r4
100090cc:	2800      	cmp	r0, #0
100090ce:	d000      	beq.n	100090d2 <mpu_init+0x42>
100090d0:	e13b      	b.n	1000934a <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100090d2:	4aab      	ldr	r2, [pc, #684]	; (10009380 <mpu_init+0x2f0>)
100090d4:	2300      	movs	r3, #0
100090d6:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100090d8:	ab02      	add	r3, sp, #8
100090da:	2140      	movs	r1, #64	; 0x40
100090dc:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100090de:	6811      	ldr	r1, [r2, #0]
100090e0:	7a09      	ldrb	r1, [r1, #8]
100090e2:	6852      	ldr	r2, [r2, #4]
100090e4:	7810      	ldrb	r0, [r2, #0]
100090e6:	2201      	movs	r2, #1
100090e8:	4ca6      	ldr	r4, [pc, #664]	; (10009384 <mpu_init+0x2f4>)
100090ea:	47a0      	blx	r4
100090ec:	2800      	cmp	r0, #0
100090ee:	d000      	beq.n	100090f2 <mpu_init+0x62>
100090f0:	e12e      	b.n	10009350 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
100090f2:	4ca3      	ldr	r4, [pc, #652]	; (10009380 <mpu_init+0x2f0>)
100090f4:	23ff      	movs	r3, #255	; 0xff
100090f6:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
100090f8:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
100090fa:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
100090fc:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
100090fe:	2201      	movs	r2, #1
10009100:	4252      	negs	r2, r2
10009102:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009104:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009106:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009108:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000910a:	3bfe      	subs	r3, #254	; 0xfe
1000910c:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000910e:	2500      	movs	r5, #0
10009110:	3321      	adds	r3, #33	; 0x21
10009112:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009114:	3301      	adds	r3, #1
10009116:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009118:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000911a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000911c:	0020      	movs	r0, r4
1000911e:	3016      	adds	r0, #22
10009120:	320d      	adds	r2, #13
10009122:	2100      	movs	r1, #0
10009124:	4b99      	ldr	r3, [pc, #612]	; (1000938c <mpu_init+0x2fc>)
10009126:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009128:	2324      	movs	r3, #36	; 0x24
1000912a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000912c:	3301      	adds	r3, #1
1000912e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009130:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
10009132:	20fa      	movs	r0, #250	; 0xfa
10009134:	00c0      	lsls	r0, r0, #3
10009136:	4b96      	ldr	r3, [pc, #600]	; (10009390 <mpu_init+0x300>)
10009138:	4798      	blx	r3
1000913a:	2800      	cmp	r0, #0
1000913c:	d000      	beq.n	10009140 <mpu_init+0xb0>
1000913e:	e10a      	b.n	10009356 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
10009140:	3002      	adds	r0, #2
10009142:	4b94      	ldr	r3, [pc, #592]	; (10009394 <mpu_init+0x304>)
10009144:	4798      	blx	r3
10009146:	2800      	cmp	r0, #0
10009148:	d000      	beq.n	1000914c <mpu_init+0xbc>
1000914a:	e107      	b.n	1000935c <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
1000914c:	302a      	adds	r0, #42	; 0x2a
1000914e:	4b92      	ldr	r3, [pc, #584]	; (10009398 <mpu_init+0x308>)
10009150:	4798      	blx	r3
10009152:	2800      	cmp	r0, #0
10009154:	d000      	beq.n	10009158 <mpu_init+0xc8>
10009156:	e104      	b.n	10009362 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009158:	3032      	adds	r0, #50	; 0x32
1000915a:	4b90      	ldr	r3, [pc, #576]	; (1000939c <mpu_init+0x30c>)
1000915c:	4798      	blx	r3
1000915e:	2800      	cmp	r0, #0
10009160:	d000      	beq.n	10009164 <mpu_init+0xd4>
10009162:	e101      	b.n	10009368 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009164:	4b8e      	ldr	r3, [pc, #568]	; (100093a0 <mpu_init+0x310>)
10009166:	4798      	blx	r3
10009168:	2800      	cmp	r0, #0
1000916a:	d000      	beq.n	1000916e <mpu_init+0xde>
1000916c:	e0ff      	b.n	1000936e <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000916e:	3001      	adds	r0, #1
10009170:	4b8c      	ldr	r3, [pc, #560]	; (100093a4 <mpu_init+0x314>)
10009172:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009174:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009176:	4d8c      	ldr	r5, [pc, #560]	; (100093a8 <mpu_init+0x318>)
10009178:	ab01      	add	r3, sp, #4
1000917a:	2201      	movs	r2, #1
1000917c:	2100      	movs	r1, #0
1000917e:	0020      	movs	r0, r4
10009180:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
10009182:	2800      	cmp	r0, #0
10009184:	d103      	bne.n	1000918e <mpu_init+0xfe>
10009186:	466b      	mov	r3, sp
10009188:	791b      	ldrb	r3, [r3, #4]
1000918a:	2b48      	cmp	r3, #72	; 0x48
1000918c:	d004      	beq.n	10009198 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000918e:	3401      	adds	r4, #1
10009190:	b2e4      	uxtb	r4, r4
10009192:	2c10      	cmp	r4, #16
10009194:	d1f0      	bne.n	10009178 <mpu_init+0xe8>
10009196:	e001      	b.n	1000919c <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009198:	2c0f      	cmp	r4, #15
1000919a:	d905      	bls.n	100091a8 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
1000919c:	4883      	ldr	r0, [pc, #524]	; (100093ac <mpu_init+0x31c>)
1000919e:	4c84      	ldr	r4, [pc, #528]	; (100093b0 <mpu_init+0x320>)
100091a0:	47a0      	blx	r4
100091a2:	4884      	ldr	r0, [pc, #528]	; (100093b4 <mpu_init+0x324>)
100091a4:	47a0      	blx	r4
100091a6:	e0c4      	b.n	10009332 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100091a8:	232a      	movs	r3, #42	; 0x2a
100091aa:	4a75      	ldr	r2, [pc, #468]	; (10009380 <mpu_init+0x2f0>)
100091ac:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100091ae:	ab01      	add	r3, sp, #4
100091b0:	2210      	movs	r2, #16
100091b2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091b4:	3a0f      	subs	r2, #15
100091b6:	210a      	movs	r1, #10
100091b8:	0020      	movs	r0, r4
100091ba:	4c72      	ldr	r4, [pc, #456]	; (10009384 <mpu_init+0x2f4>)
100091bc:	47a0      	blx	r4
100091be:	2800      	cmp	r0, #0
100091c0:	d000      	beq.n	100091c4 <mpu_init+0x134>
100091c2:	e0b6      	b.n	10009332 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091c4:	3001      	adds	r0, #1
100091c6:	4b70      	ldr	r3, [pc, #448]	; (10009388 <mpu_init+0x2f8>)
100091c8:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100091ca:	ab01      	add	r3, sp, #4
100091cc:	221f      	movs	r2, #31
100091ce:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091d0:	320b      	adds	r2, #11
100091d2:	496b      	ldr	r1, [pc, #428]	; (10009380 <mpu_init+0x2f0>)
100091d4:	5c88      	ldrb	r0, [r1, r2]
100091d6:	3a29      	subs	r2, #41	; 0x29
100091d8:	210a      	movs	r1, #10
100091da:	4c6a      	ldr	r4, [pc, #424]	; (10009384 <mpu_init+0x2f4>)
100091dc:	47a0      	blx	r4
100091de:	2800      	cmp	r0, #0
100091e0:	d000      	beq.n	100091e4 <mpu_init+0x154>
100091e2:	e0a6      	b.n	10009332 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100091e4:	3001      	adds	r0, #1
100091e6:	4b68      	ldr	r3, [pc, #416]	; (10009388 <mpu_init+0x2f8>)
100091e8:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
100091ea:	232a      	movs	r3, #42	; 0x2a
100091ec:	4a64      	ldr	r2, [pc, #400]	; (10009380 <mpu_init+0x2f0>)
100091ee:	5cd0      	ldrb	r0, [r2, r3]
100091f0:	ab01      	add	r3, sp, #4
100091f2:	2203      	movs	r2, #3
100091f4:	2110      	movs	r1, #16
100091f6:	4c6c      	ldr	r4, [pc, #432]	; (100093a8 <mpu_init+0x318>)
100091f8:	47a0      	blx	r4
100091fa:	2800      	cmp	r0, #0
100091fc:	d000      	beq.n	10009200 <mpu_init+0x170>
100091fe:	e098      	b.n	10009332 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009200:	4a5f      	ldr	r2, [pc, #380]	; (10009380 <mpu_init+0x2f0>)
10009202:	ab01      	add	r3, sp, #4
10009204:	7819      	ldrb	r1, [r3, #0]
10009206:	3180      	adds	r1, #128	; 0x80
10009208:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000920a:	7859      	ldrb	r1, [r3, #1]
1000920c:	3180      	adds	r1, #128	; 0x80
1000920e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009210:	7899      	ldrb	r1, [r3, #2]
10009212:	3180      	adds	r1, #128	; 0x80
10009214:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009216:	2110      	movs	r1, #16
10009218:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000921a:	311a      	adds	r1, #26
1000921c:	5c50      	ldrb	r0, [r2, r1]
1000921e:	2201      	movs	r2, #1
10009220:	3920      	subs	r1, #32
10009222:	4c58      	ldr	r4, [pc, #352]	; (10009384 <mpu_init+0x2f4>)
10009224:	47a0      	blx	r4
10009226:	2800      	cmp	r0, #0
10009228:	d000      	beq.n	1000922c <mpu_init+0x19c>
1000922a:	e082      	b.n	10009332 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000922c:	3001      	adds	r0, #1
1000922e:	4b56      	ldr	r3, [pc, #344]	; (10009388 <mpu_init+0x2f8>)
10009230:	4798      	blx	r3

    mpu_set_bypass(0);
10009232:	2000      	movs	r0, #0
10009234:	4b5b      	ldr	r3, [pc, #364]	; (100093a4 <mpu_init+0x314>)
10009236:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009238:	ab01      	add	r3, sp, #4
1000923a:	2240      	movs	r2, #64	; 0x40
1000923c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000923e:	4a50      	ldr	r2, [pc, #320]	; (10009380 <mpu_init+0x2f0>)
10009240:	6811      	ldr	r1, [r2, #0]
10009242:	7e89      	ldrb	r1, [r1, #26]
10009244:	6852      	ldr	r2, [r2, #4]
10009246:	7810      	ldrb	r0, [r2, #0]
10009248:	2201      	movs	r2, #1
1000924a:	4c4e      	ldr	r4, [pc, #312]	; (10009384 <mpu_init+0x2f4>)
1000924c:	47a0      	blx	r4
1000924e:	2800      	cmp	r0, #0
10009250:	d16f      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009252:	ab01      	add	r3, sp, #4
10009254:	4a4a      	ldr	r2, [pc, #296]	; (10009380 <mpu_init+0x2f0>)
10009256:	212a      	movs	r1, #42	; 0x2a
10009258:	5c51      	ldrb	r1, [r2, r1]
1000925a:	3880      	subs	r0, #128	; 0x80
1000925c:	4301      	orrs	r1, r0
1000925e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009260:	6811      	ldr	r1, [r2, #0]
10009262:	7f89      	ldrb	r1, [r1, #30]
10009264:	6852      	ldr	r2, [r2, #4]
10009266:	7810      	ldrb	r0, [r2, #0]
10009268:	2201      	movs	r2, #1
1000926a:	4c46      	ldr	r4, [pc, #280]	; (10009384 <mpu_init+0x2f4>)
1000926c:	47a0      	blx	r4
1000926e:	2800      	cmp	r0, #0
10009270:	d15f      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009272:	ab01      	add	r3, sp, #4
10009274:	2202      	movs	r2, #2
10009276:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009278:	4a41      	ldr	r2, [pc, #260]	; (10009380 <mpu_init+0x2f0>)
1000927a:	6811      	ldr	r1, [r2, #0]
1000927c:	7fc9      	ldrb	r1, [r1, #31]
1000927e:	6852      	ldr	r2, [r2, #4]
10009280:	7810      	ldrb	r0, [r2, #0]
10009282:	2201      	movs	r2, #1
10009284:	4c3f      	ldr	r4, [pc, #252]	; (10009384 <mpu_init+0x2f4>)
10009286:	47a0      	blx	r4
10009288:	2800      	cmp	r0, #0
1000928a:	d152      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000928c:	ab01      	add	r3, sp, #4
1000928e:	2288      	movs	r2, #136	; 0x88
10009290:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009292:	4a3b      	ldr	r2, [pc, #236]	; (10009380 <mpu_init+0x2f0>)
10009294:	2120      	movs	r1, #32
10009296:	6810      	ldr	r0, [r2, #0]
10009298:	5c41      	ldrb	r1, [r0, r1]
1000929a:	6852      	ldr	r2, [r2, #4]
1000929c:	7810      	ldrb	r0, [r2, #0]
1000929e:	2201      	movs	r2, #1
100092a0:	4c38      	ldr	r4, [pc, #224]	; (10009384 <mpu_init+0x2f4>)
100092a2:	47a0      	blx	r4
100092a4:	2800      	cmp	r0, #0
100092a6:	d144      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100092a8:	ab01      	add	r3, sp, #4
100092aa:	4a35      	ldr	r2, [pc, #212]	; (10009380 <mpu_init+0x2f0>)
100092ac:	212a      	movs	r1, #42	; 0x2a
100092ae:	5c51      	ldrb	r1, [r2, r1]
100092b0:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100092b2:	2121      	movs	r1, #33	; 0x21
100092b4:	6810      	ldr	r0, [r2, #0]
100092b6:	5c41      	ldrb	r1, [r0, r1]
100092b8:	6852      	ldr	r2, [r2, #4]
100092ba:	7810      	ldrb	r0, [r2, #0]
100092bc:	2201      	movs	r2, #1
100092be:	4c31      	ldr	r4, [pc, #196]	; (10009384 <mpu_init+0x2f4>)
100092c0:	47a0      	blx	r4
100092c2:	2800      	cmp	r0, #0
100092c4:	d135      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100092c6:	ab01      	add	r3, sp, #4
100092c8:	220a      	movs	r2, #10
100092ca:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100092cc:	4a2c      	ldr	r2, [pc, #176]	; (10009380 <mpu_init+0x2f0>)
100092ce:	2122      	movs	r1, #34	; 0x22
100092d0:	6810      	ldr	r0, [r2, #0]
100092d2:	5c41      	ldrb	r1, [r0, r1]
100092d4:	6852      	ldr	r2, [r2, #4]
100092d6:	7810      	ldrb	r0, [r2, #0]
100092d8:	2201      	movs	r2, #1
100092da:	4c2a      	ldr	r4, [pc, #168]	; (10009384 <mpu_init+0x2f4>)
100092dc:	47a0      	blx	r4
100092de:	2800      	cmp	r0, #0
100092e0:	d127      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100092e2:	ab01      	add	r3, sp, #4
100092e4:	2281      	movs	r2, #129	; 0x81
100092e6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
100092e8:	4a25      	ldr	r2, [pc, #148]	; (10009380 <mpu_init+0x2f0>)
100092ea:	2123      	movs	r1, #35	; 0x23
100092ec:	6810      	ldr	r0, [r2, #0]
100092ee:	5c41      	ldrb	r1, [r0, r1]
100092f0:	6852      	ldr	r2, [r2, #4]
100092f2:	7810      	ldrb	r0, [r2, #0]
100092f4:	2201      	movs	r2, #1
100092f6:	4c23      	ldr	r4, [pc, #140]	; (10009384 <mpu_init+0x2f4>)
100092f8:	47a0      	blx	r4
100092fa:	2800      	cmp	r0, #0
100092fc:	d119      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100092fe:	ab01      	add	r3, sp, #4
10009300:	2211      	movs	r2, #17
10009302:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009304:	4a1e      	ldr	r2, [pc, #120]	; (10009380 <mpu_init+0x2f0>)
10009306:	2126      	movs	r1, #38	; 0x26
10009308:	6810      	ldr	r0, [r2, #0]
1000930a:	5c41      	ldrb	r1, [r0, r1]
1000930c:	6852      	ldr	r2, [r2, #4]
1000930e:	7810      	ldrb	r0, [r2, #0]
10009310:	2201      	movs	r2, #1
10009312:	4c1c      	ldr	r4, [pc, #112]	; (10009384 <mpu_init+0x2f4>)
10009314:	47a0      	blx	r4
10009316:	2800      	cmp	r0, #0
10009318:	d10b      	bne.n	10009332 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000931a:	ab01      	add	r3, sp, #4
1000931c:	2203      	movs	r2, #3
1000931e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009320:	4a17      	ldr	r2, [pc, #92]	; (10009380 <mpu_init+0x2f0>)
10009322:	2127      	movs	r1, #39	; 0x27
10009324:	6810      	ldr	r0, [r2, #0]
10009326:	5c41      	ldrb	r1, [r0, r1]
10009328:	6852      	ldr	r2, [r2, #4]
1000932a:	7810      	ldrb	r0, [r2, #0]
1000932c:	2201      	movs	r2, #1
1000932e:	4c15      	ldr	r4, [pc, #84]	; (10009384 <mpu_init+0x2f4>)
10009330:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009332:	200a      	movs	r0, #10
10009334:	4b20      	ldr	r3, [pc, #128]	; (100093b8 <mpu_init+0x328>)
10009336:	4798      	blx	r3
10009338:	1e04      	subs	r4, r0, #0
1000933a:	d11b      	bne.n	10009374 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000933c:	2000      	movs	r0, #0
1000933e:	4b1f      	ldr	r3, [pc, #124]	; (100093bc <mpu_init+0x32c>)
10009340:	4798      	blx	r3
    return 0;
10009342:	e019      	b.n	10009378 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009344:	2401      	movs	r4, #1
10009346:	4264      	negs	r4, r4
10009348:	e016      	b.n	10009378 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000934a:	2401      	movs	r4, #1
1000934c:	4264      	negs	r4, r4
1000934e:	e013      	b.n	10009378 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009350:	2401      	movs	r4, #1
10009352:	4264      	negs	r4, r4
10009354:	e010      	b.n	10009378 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(SMS_MPU_GYRO_FS))
        return -1;
10009356:	2401      	movs	r4, #1
10009358:	4264      	negs	r4, r4
1000935a:	e00d      	b.n	10009378 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(SMS_MPU_ACCEL_FS))
        return -1;
1000935c:	2401      	movs	r4, #1
1000935e:	4264      	negs	r4, r4
10009360:	e00a      	b.n	10009378 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
10009362:	2401      	movs	r4, #1
10009364:	4264      	negs	r4, r4
10009366:	e007      	b.n	10009378 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009368:	2401      	movs	r4, #1
1000936a:	4264      	negs	r4, r4
1000936c:	e004      	b.n	10009378 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000936e:	2401      	movs	r4, #1
10009370:	4264      	negs	r4, r4
10009372:	e001      	b.n	10009378 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009374:	2401      	movs	r4, #1
10009376:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009378:	0020      	movs	r0, r4
1000937a:	b005      	add	sp, #20
1000937c:	bd30      	pop	{r4, r5, pc}
1000937e:	46c0      	nop			; (mov r8, r8)
10009380:	10016c78 	.word	0x10016c78
10009384:	1000a649 	.word	0x1000a649
10009388:	10008129 	.word	0x10008129
1000938c:	100143c9 	.word	0x100143c9
10009390:	10008761 	.word	0x10008761
10009394:	1000884d 	.word	0x1000884d
10009398:	100088e1 	.word	0x100088e1
1000939c:	10008dd5 	.word	0x10008dd5
100093a0:	10008a31 	.word	0x10008a31
100093a4:	10008a9d 	.word	0x10008a9d
100093a8:	1000a6a5 	.word	0x1000a6a5
100093ac:	100157dc 	.word	0x100157dc
100093b0:	10014631 	.word	0x10014631
100093b4:	1001564c 	.word	0x1001564c
100093b8:	100089b9 	.word	0x100089b9
100093bc:	10008ea9 	.word	0x10008ea9

100093c0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100093c0:	b570      	push	{r4, r5, r6, lr}
100093c2:	b082      	sub	sp, #8
100093c4:	000c      	movs	r4, r1
100093c6:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100093c8:	d025      	beq.n	10009416 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100093ca:	4b19      	ldr	r3, [pc, #100]	; (10009430 <mpu_write_mem+0x70>)
100093cc:	7a9b      	ldrb	r3, [r3, #10]
100093ce:	2b00      	cmp	r3, #0
100093d0:	d024      	beq.n	1000941c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100093d2:	ab01      	add	r3, sp, #4
100093d4:	0a02      	lsrs	r2, r0, #8
100093d6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100093d8:	b2c0      	uxtb	r0, r0
100093da:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100093dc:	4b14      	ldr	r3, [pc, #80]	; (10009430 <mpu_write_mem+0x70>)
100093de:	685b      	ldr	r3, [r3, #4]
100093e0:	1840      	adds	r0, r0, r1
100093e2:	895a      	ldrh	r2, [r3, #10]
100093e4:	4290      	cmp	r0, r2
100093e6:	dc1c      	bgt.n	10009422 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100093e8:	4a11      	ldr	r2, [pc, #68]	; (10009430 <mpu_write_mem+0x70>)
100093ea:	6812      	ldr	r2, [r2, #0]
100093ec:	7ed1      	ldrb	r1, [r2, #27]
100093ee:	7818      	ldrb	r0, [r3, #0]
100093f0:	ab01      	add	r3, sp, #4
100093f2:	2202      	movs	r2, #2
100093f4:	4e0f      	ldr	r6, [pc, #60]	; (10009434 <mpu_write_mem+0x74>)
100093f6:	47b0      	blx	r6
100093f8:	2800      	cmp	r0, #0
100093fa:	d115      	bne.n	10009428 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
100093fc:	b2e2      	uxtb	r2, r4
100093fe:	4b0c      	ldr	r3, [pc, #48]	; (10009430 <mpu_write_mem+0x70>)
10009400:	6819      	ldr	r1, [r3, #0]
10009402:	7e09      	ldrb	r1, [r1, #24]
10009404:	685b      	ldr	r3, [r3, #4]
10009406:	7818      	ldrb	r0, [r3, #0]
10009408:	002b      	movs	r3, r5
1000940a:	4c0a      	ldr	r4, [pc, #40]	; (10009434 <mpu_write_mem+0x74>)
1000940c:	47a0      	blx	r4
1000940e:	1e43      	subs	r3, r0, #1
10009410:	4198      	sbcs	r0, r3
10009412:	4240      	negs	r0, r0
10009414:	e00a      	b.n	1000942c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009416:	2001      	movs	r0, #1
10009418:	4240      	negs	r0, r0
1000941a:	e007      	b.n	1000942c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000941c:	2001      	movs	r0, #1
1000941e:	4240      	negs	r0, r0
10009420:	e004      	b.n	1000942c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009422:	2001      	movs	r0, #1
10009424:	4240      	negs	r0, r0
10009426:	e001      	b.n	1000942c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009428:	2001      	movs	r0, #1
1000942a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000942c:	b002      	add	sp, #8
1000942e:	bd70      	pop	{r4, r5, r6, pc}
10009430:	10016c78 	.word	0x10016c78
10009434:	1000a649 	.word	0x1000a649

10009438 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009438:	b570      	push	{r4, r5, r6, lr}
1000943a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000943c:	2324      	movs	r3, #36	; 0x24
1000943e:	4a21      	ldr	r2, [pc, #132]	; (100094c4 <mpu_set_dmp_state+0x8c>)
10009440:	5cd3      	ldrb	r3, [r2, r3]
10009442:	4283      	cmp	r3, r0
10009444:	d037      	beq.n	100094b6 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009446:	2800      	cmp	r0, #0
10009448:	d020      	beq.n	1000948c <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000944a:	2325      	movs	r3, #37	; 0x25
1000944c:	5cd3      	ldrb	r3, [r2, r3]
1000944e:	2b00      	cmp	r3, #0
10009450:	d033      	beq.n	100094ba <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009452:	2000      	movs	r0, #0
10009454:	4d1c      	ldr	r5, [pc, #112]	; (100094c8 <mpu_set_dmp_state+0x90>)
10009456:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009458:	2000      	movs	r0, #0
1000945a:	4b1c      	ldr	r3, [pc, #112]	; (100094cc <mpu_set_dmp_state+0x94>)
1000945c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000945e:	4c19      	ldr	r4, [pc, #100]	; (100094c4 <mpu_set_dmp_state+0x8c>)
10009460:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009462:	4b1b      	ldr	r3, [pc, #108]	; (100094d0 <mpu_set_dmp_state+0x98>)
10009464:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009466:	466b      	mov	r3, sp
10009468:	3307      	adds	r3, #7
1000946a:	2200      	movs	r2, #0
1000946c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000946e:	6862      	ldr	r2, [r4, #4]
10009470:	7810      	ldrb	r0, [r2, #0]
10009472:	2201      	movs	r2, #1
10009474:	2123      	movs	r1, #35	; 0x23
10009476:	4e17      	ldr	r6, [pc, #92]	; (100094d4 <mpu_set_dmp_state+0x9c>)
10009478:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000947a:	2201      	movs	r2, #1
1000947c:	2324      	movs	r3, #36	; 0x24
1000947e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009480:	2001      	movs	r0, #1
10009482:	47a8      	blx	r5
        mpu_reset_fifo();
10009484:	4b14      	ldr	r3, [pc, #80]	; (100094d8 <mpu_set_dmp_state+0xa0>)
10009486:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
10009488:	2000      	movs	r0, #0
1000948a:	e018      	b.n	100094be <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
1000948c:	2000      	movs	r0, #0
1000948e:	4b0e      	ldr	r3, [pc, #56]	; (100094c8 <mpu_set_dmp_state+0x90>)
10009490:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
10009492:	466b      	mov	r3, sp
10009494:	3307      	adds	r3, #7
10009496:	4c0b      	ldr	r4, [pc, #44]	; (100094c4 <mpu_set_dmp_state+0x8c>)
10009498:	7c22      	ldrb	r2, [r4, #16]
1000949a:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000949c:	6862      	ldr	r2, [r4, #4]
1000949e:	7810      	ldrb	r0, [r2, #0]
100094a0:	2201      	movs	r2, #1
100094a2:	2123      	movs	r1, #35	; 0x23
100094a4:	4d0b      	ldr	r5, [pc, #44]	; (100094d4 <mpu_set_dmp_state+0x9c>)
100094a6:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100094a8:	2200      	movs	r2, #0
100094aa:	2324      	movs	r3, #36	; 0x24
100094ac:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
100094ae:	4b0a      	ldr	r3, [pc, #40]	; (100094d8 <mpu_set_dmp_state+0xa0>)
100094b0:	4798      	blx	r3
    }
    return 0;
100094b2:	2000      	movs	r0, #0
100094b4:	e003      	b.n	100094be <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100094b6:	2000      	movs	r0, #0
100094b8:	e001      	b.n	100094be <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100094ba:	2001      	movs	r0, #1
100094bc:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
100094be:	b002      	add	sp, #8
100094c0:	bd70      	pop	{r4, r5, r6, pc}
100094c2:	46c0      	nop			; (mov r8, r8)
100094c4:	10016c78 	.word	0x10016c78
100094c8:	100084c5 	.word	0x100084c5
100094cc:	10008a9d 	.word	0x10008a9d
100094d0:	10008dd5 	.word	0x10008dd5
100094d4:	1000a649 	.word	0x1000a649
100094d8:	10008569 	.word	0x10008569

100094dc <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100094dc:	4b02      	ldr	r3, [pc, #8]	; (100094e8 <mpu_get_compass_fsr+0xc>)
100094de:	685b      	ldr	r3, [r3, #4]
100094e0:	899b      	ldrh	r3, [r3, #12]
100094e2:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100094e4:	2000      	movs	r0, #0
100094e6:	4770      	bx	lr
100094e8:	10016c78 	.word	0x10016c78

100094ec <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094ec:	b510      	push	{r4, lr}
100094ee:	b086      	sub	sp, #24
100094f0:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094f2:	220c      	movs	r2, #12
100094f4:	4915      	ldr	r1, [pc, #84]	; (1000954c <dmp_set_fifo_rate+0x60>)
100094f6:	3110      	adds	r1, #16
100094f8:	a803      	add	r0, sp, #12
100094fa:	4b15      	ldr	r3, [pc, #84]	; (10009550 <dmp_set_fifo_rate+0x64>)
100094fc:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100094fe:	2cc8      	cmp	r4, #200	; 0xc8
10009500:	d819      	bhi.n	10009536 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009502:	0021      	movs	r1, r4
10009504:	20c8      	movs	r0, #200	; 0xc8
10009506:	4b13      	ldr	r3, [pc, #76]	; (10009554 <dmp_set_fifo_rate+0x68>)
10009508:	4798      	blx	r3
1000950a:	3801      	subs	r0, #1
1000950c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000950e:	aa01      	add	r2, sp, #4
10009510:	0a03      	lsrs	r3, r0, #8
10009512:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009514:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009516:	2102      	movs	r1, #2
10009518:	480f      	ldr	r0, [pc, #60]	; (10009558 <dmp_set_fifo_rate+0x6c>)
1000951a:	4b10      	ldr	r3, [pc, #64]	; (1000955c <dmp_set_fifo_rate+0x70>)
1000951c:	4798      	blx	r3
1000951e:	2800      	cmp	r0, #0
10009520:	d10c      	bne.n	1000953c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009522:	aa03      	add	r2, sp, #12
10009524:	210c      	movs	r1, #12
10009526:	480e      	ldr	r0, [pc, #56]	; (10009560 <dmp_set_fifo_rate+0x74>)
10009528:	4b0c      	ldr	r3, [pc, #48]	; (1000955c <dmp_set_fifo_rate+0x70>)
1000952a:	4798      	blx	r3
1000952c:	2800      	cmp	r0, #0
1000952e:	d108      	bne.n	10009542 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009530:	4b0c      	ldr	r3, [pc, #48]	; (10009564 <dmp_set_fifo_rate+0x78>)
10009532:	819c      	strh	r4, [r3, #12]
    return 0;
10009534:	e007      	b.n	10009546 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009536:	2001      	movs	r0, #1
10009538:	4240      	negs	r0, r0
1000953a:	e004      	b.n	10009546 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000953c:	2001      	movs	r0, #1
1000953e:	4240      	negs	r0, r0
10009540:	e001      	b.n	10009546 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009542:	2001      	movs	r0, #1
10009544:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009546:	b006      	add	sp, #24
10009548:	bd10      	pop	{r4, pc}
1000954a:	46c0      	nop			; (mov r8, r8)
1000954c:	10015a28 	.word	0x10015a28
10009550:	100143b7 	.word	0x100143b7
10009554:	10012755 	.word	0x10012755
10009558:	00000216 	.word	0x00000216
1000955c:	100093c1 	.word	0x100093c1
10009560:	00000ac1 	.word	0x00000ac1
10009564:	10016d40 	.word	0x10016d40

10009568 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000956a:	4647      	mov	r7, r8
1000956c:	b480      	push	{r7}
1000956e:	b082      	sub	sp, #8
10009570:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009572:	0743      	lsls	r3, r0, #29
10009574:	d100      	bne.n	10009578 <dmp_set_tap_thresh+0x10>
10009576:	e09c      	b.n	100096b2 <dmp_set_tap_thresh+0x14a>
10009578:	23c8      	movs	r3, #200	; 0xc8
1000957a:	00db      	lsls	r3, r3, #3
1000957c:	4299      	cmp	r1, r3
1000957e:	d900      	bls.n	10009582 <dmp_set_tap_thresh+0x1a>
10009580:	e09a      	b.n	100096b8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009582:	0008      	movs	r0, r1
10009584:	4b58      	ldr	r3, [pc, #352]	; (100096e8 <dmp_set_tap_thresh+0x180>)
10009586:	4798      	blx	r3
10009588:	4958      	ldr	r1, [pc, #352]	; (100096ec <dmp_set_tap_thresh+0x184>)
1000958a:	4b59      	ldr	r3, [pc, #356]	; (100096f0 <dmp_set_tap_thresh+0x188>)
1000958c:	4798      	blx	r3
1000958e:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
10009590:	466b      	mov	r3, sp
10009592:	1cdd      	adds	r5, r3, #3
10009594:	0028      	movs	r0, r5
10009596:	4b57      	ldr	r3, [pc, #348]	; (100096f4 <dmp_set_tap_thresh+0x18c>)
10009598:	4798      	blx	r3
    switch (accel_fsr) {
1000959a:	782b      	ldrb	r3, [r5, #0]
1000959c:	2b04      	cmp	r3, #4
1000959e:	d019      	beq.n	100095d4 <dmp_set_tap_thresh+0x6c>
100095a0:	b2da      	uxtb	r2, r3
100095a2:	2a04      	cmp	r2, #4
100095a4:	d802      	bhi.n	100095ac <dmp_set_tap_thresh+0x44>
100095a6:	2b02      	cmp	r3, #2
100095a8:	d005      	beq.n	100095b6 <dmp_set_tap_thresh+0x4e>
100095aa:	e088      	b.n	100096be <dmp_set_tap_thresh+0x156>
100095ac:	2b08      	cmp	r3, #8
100095ae:	d020      	beq.n	100095f2 <dmp_set_tap_thresh+0x8a>
100095b0:	2b10      	cmp	r3, #16
100095b2:	d02d      	beq.n	10009610 <dmp_set_tap_thresh+0xa8>
100095b4:	e083      	b.n	100096be <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095b6:	4b50      	ldr	r3, [pc, #320]	; (100096f8 <dmp_set_tap_thresh+0x190>)
100095b8:	4698      	mov	r8, r3
100095ba:	218d      	movs	r1, #141	; 0x8d
100095bc:	05c9      	lsls	r1, r1, #23
100095be:	1c30      	adds	r0, r6, #0
100095c0:	4798      	blx	r3
100095c2:	4f4e      	ldr	r7, [pc, #312]	; (100096fc <dmp_set_tap_thresh+0x194>)
100095c4:	47b8      	blx	r7
100095c6:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095c8:	494d      	ldr	r1, [pc, #308]	; (10009700 <dmp_set_tap_thresh+0x198>)
100095ca:	1c30      	adds	r0, r6, #0
100095cc:	47c0      	blx	r8
100095ce:	47b8      	blx	r7
100095d0:	b280      	uxth	r0, r0
        break;
100095d2:	e02b      	b.n	1000962c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100095d4:	4b48      	ldr	r3, [pc, #288]	; (100096f8 <dmp_set_tap_thresh+0x190>)
100095d6:	4698      	mov	r8, r3
100095d8:	218c      	movs	r1, #140	; 0x8c
100095da:	05c9      	lsls	r1, r1, #23
100095dc:	1c30      	adds	r0, r6, #0
100095de:	4798      	blx	r3
100095e0:	4f46      	ldr	r7, [pc, #280]	; (100096fc <dmp_set_tap_thresh+0x194>)
100095e2:	47b8      	blx	r7
100095e4:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100095e6:	4947      	ldr	r1, [pc, #284]	; (10009704 <dmp_set_tap_thresh+0x19c>)
100095e8:	1c30      	adds	r0, r6, #0
100095ea:	47c0      	blx	r8
100095ec:	47b8      	blx	r7
100095ee:	b280      	uxth	r0, r0
        break;
100095f0:	e01c      	b.n	1000962c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100095f2:	4b41      	ldr	r3, [pc, #260]	; (100096f8 <dmp_set_tap_thresh+0x190>)
100095f4:	4698      	mov	r8, r3
100095f6:	218b      	movs	r1, #139	; 0x8b
100095f8:	05c9      	lsls	r1, r1, #23
100095fa:	1c30      	adds	r0, r6, #0
100095fc:	4798      	blx	r3
100095fe:	4f3f      	ldr	r7, [pc, #252]	; (100096fc <dmp_set_tap_thresh+0x194>)
10009600:	47b8      	blx	r7
10009602:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009604:	4940      	ldr	r1, [pc, #256]	; (10009708 <dmp_set_tap_thresh+0x1a0>)
10009606:	1c30      	adds	r0, r6, #0
10009608:	47c0      	blx	r8
1000960a:	47b8      	blx	r7
1000960c:	b280      	uxth	r0, r0
        break;
1000960e:	e00d      	b.n	1000962c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009610:	4b39      	ldr	r3, [pc, #228]	; (100096f8 <dmp_set_tap_thresh+0x190>)
10009612:	4698      	mov	r8, r3
10009614:	218a      	movs	r1, #138	; 0x8a
10009616:	05c9      	lsls	r1, r1, #23
10009618:	1c30      	adds	r0, r6, #0
1000961a:	4798      	blx	r3
1000961c:	4f37      	ldr	r7, [pc, #220]	; (100096fc <dmp_set_tap_thresh+0x194>)
1000961e:	47b8      	blx	r7
10009620:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009622:	493a      	ldr	r1, [pc, #232]	; (1000970c <dmp_set_tap_thresh+0x1a4>)
10009624:	1c30      	adds	r0, r6, #0
10009626:	47c0      	blx	r8
10009628:	47b8      	blx	r7
1000962a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000962c:	ab01      	add	r3, sp, #4
1000962e:	0a2a      	lsrs	r2, r5, #8
10009630:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009632:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009634:	0a02      	lsrs	r2, r0, #8
10009636:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009638:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000963a:	07e3      	lsls	r3, r4, #31
1000963c:	d510      	bpl.n	10009660 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000963e:	aa01      	add	r2, sp, #4
10009640:	2102      	movs	r1, #2
10009642:	20ea      	movs	r0, #234	; 0xea
10009644:	0040      	lsls	r0, r0, #1
10009646:	4b32      	ldr	r3, [pc, #200]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
10009648:	4798      	blx	r3
1000964a:	2800      	cmp	r0, #0
1000964c:	d13a      	bne.n	100096c4 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000964e:	466b      	mov	r3, sp
10009650:	1d9a      	adds	r2, r3, #6
10009652:	2102      	movs	r1, #2
10009654:	3025      	adds	r0, #37	; 0x25
10009656:	30ff      	adds	r0, #255	; 0xff
10009658:	4b2d      	ldr	r3, [pc, #180]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
1000965a:	4798      	blx	r3
1000965c:	2800      	cmp	r0, #0
1000965e:	d134      	bne.n	100096ca <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
10009660:	07a3      	lsls	r3, r4, #30
10009662:	d510      	bpl.n	10009686 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009664:	aa01      	add	r2, sp, #4
10009666:	2102      	movs	r1, #2
10009668:	20ec      	movs	r0, #236	; 0xec
1000966a:	0040      	lsls	r0, r0, #1
1000966c:	4b28      	ldr	r3, [pc, #160]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
1000966e:	4798      	blx	r3
10009670:	2800      	cmp	r0, #0
10009672:	d12d      	bne.n	100096d0 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009674:	466b      	mov	r3, sp
10009676:	1d9a      	adds	r2, r3, #6
10009678:	2102      	movs	r1, #2
1000967a:	3029      	adds	r0, #41	; 0x29
1000967c:	30ff      	adds	r0, #255	; 0xff
1000967e:	4b24      	ldr	r3, [pc, #144]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
10009680:	4798      	blx	r3
10009682:	2800      	cmp	r0, #0
10009684:	d127      	bne.n	100096d6 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009686:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009688:	0763      	lsls	r3, r4, #29
1000968a:	d529      	bpl.n	100096e0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1000968c:	aa01      	add	r2, sp, #4
1000968e:	2102      	movs	r1, #2
10009690:	30dd      	adds	r0, #221	; 0xdd
10009692:	30ff      	adds	r0, #255	; 0xff
10009694:	4b1e      	ldr	r3, [pc, #120]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
10009696:	4798      	blx	r3
10009698:	2800      	cmp	r0, #0
1000969a:	d11f      	bne.n	100096dc <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
1000969c:	466b      	mov	r3, sp
1000969e:	1d9a      	adds	r2, r3, #6
100096a0:	2102      	movs	r1, #2
100096a2:	302d      	adds	r0, #45	; 0x2d
100096a4:	30ff      	adds	r0, #255	; 0xff
100096a6:	4b1a      	ldr	r3, [pc, #104]	; (10009710 <dmp_set_tap_thresh+0x1a8>)
100096a8:	4798      	blx	r3
100096aa:	1e43      	subs	r3, r0, #1
100096ac:	4198      	sbcs	r0, r3
100096ae:	4240      	negs	r0, r0
100096b0:	e016      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100096b2:	2001      	movs	r0, #1
100096b4:	4240      	negs	r0, r0
100096b6:	e013      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
100096b8:	2001      	movs	r0, #1
100096ba:	4240      	negs	r0, r0
100096bc:	e010      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100096be:	2001      	movs	r0, #1
100096c0:	4240      	negs	r0, r0
100096c2:	e00d      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100096c4:	2001      	movs	r0, #1
100096c6:	4240      	negs	r0, r0
100096c8:	e00a      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100096ca:	2001      	movs	r0, #1
100096cc:	4240      	negs	r0, r0
100096ce:	e007      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100096d0:	2001      	movs	r0, #1
100096d2:	4240      	negs	r0, r0
100096d4:	e004      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100096d6:	2001      	movs	r0, #1
100096d8:	4240      	negs	r0, r0
100096da:	e001      	b.n	100096e0 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100096dc:	2001      	movs	r0, #1
100096de:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100096e0:	b002      	add	sp, #8
100096e2:	bc04      	pop	{r2}
100096e4:	4690      	mov	r8, r2
100096e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096e8:	100133ed 	.word	0x100133ed
100096ec:	43480000 	.word	0x43480000
100096f0:	10012ae1 	.word	0x10012ae1
100096f4:	10008801 	.word	0x10008801
100096f8:	10012e75 	.word	0x10012e75
100096fc:	10012a75 	.word	0x10012a75
10009700:	46400000 	.word	0x46400000
10009704:	45c00000 	.word	0x45c00000
10009708:	45400000 	.word	0x45400000
1000970c:	44c00000 	.word	0x44c00000
10009710:	100093c1 	.word	0x100093c1

10009714 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009714:	b500      	push	{lr}
10009716:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009718:	07c3      	lsls	r3, r0, #31
1000971a:	d403      	bmi.n	10009724 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
1000971c:	2200      	movs	r2, #0
1000971e:	466b      	mov	r3, sp
10009720:	71da      	strb	r2, [r3, #7]
10009722:	e002      	b.n	1000972a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009724:	2230      	movs	r2, #48	; 0x30
10009726:	466b      	mov	r3, sp
10009728:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
1000972a:	0783      	lsls	r3, r0, #30
1000972c:	d505      	bpl.n	1000973a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
1000972e:	466b      	mov	r3, sp
10009730:	1dda      	adds	r2, r3, #7
10009732:	79d9      	ldrb	r1, [r3, #7]
10009734:	230c      	movs	r3, #12
10009736:	430b      	orrs	r3, r1
10009738:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
1000973a:	0743      	lsls	r3, r0, #29
1000973c:	d505      	bpl.n	1000974a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
1000973e:	466b      	mov	r3, sp
10009740:	1dda      	adds	r2, r3, #7
10009742:	79d9      	ldrb	r1, [r3, #7]
10009744:	2303      	movs	r3, #3
10009746:	430b      	orrs	r3, r1
10009748:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000974a:	466b      	mov	r3, sp
1000974c:	1dda      	adds	r2, r3, #7
1000974e:	2101      	movs	r1, #1
10009750:	20a4      	movs	r0, #164	; 0xa4
10009752:	0040      	lsls	r0, r0, #1
10009754:	4b01      	ldr	r3, [pc, #4]	; (1000975c <dmp_set_tap_axes+0x48>)
10009756:	4798      	blx	r3
}
10009758:	b003      	add	sp, #12
1000975a:	bd00      	pop	{pc}
1000975c:	100093c1 	.word	0x100093c1

10009760 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009760:	b500      	push	{lr}
10009762:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009764:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009766:	2800      	cmp	r0, #0
10009768:	d004      	beq.n	10009774 <dmp_set_tap_count+0x14>
1000976a:	1c03      	adds	r3, r0, #0
1000976c:	2804      	cmp	r0, #4
1000976e:	d900      	bls.n	10009772 <dmp_set_tap_count+0x12>
10009770:	2304      	movs	r3, #4
10009772:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009774:	466a      	mov	r2, sp
10009776:	3207      	adds	r2, #7
10009778:	3b01      	subs	r3, #1
1000977a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
1000977c:	2101      	movs	r1, #1
1000977e:	2050      	movs	r0, #80	; 0x50
10009780:	30ff      	adds	r0, #255	; 0xff
10009782:	4b02      	ldr	r3, [pc, #8]	; (1000978c <dmp_set_tap_count+0x2c>)
10009784:	4798      	blx	r3
}
10009786:	b003      	add	sp, #12
10009788:	bd00      	pop	{pc}
1000978a:	46c0      	nop			; (mov r8, r8)
1000978c:	100093c1 	.word	0x100093c1

10009790 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009790:	b500      	push	{lr}
10009792:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009794:	2105      	movs	r1, #5
10009796:	4b07      	ldr	r3, [pc, #28]	; (100097b4 <dmp_set_tap_time+0x24>)
10009798:	4798      	blx	r3
1000979a:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000979c:	aa01      	add	r2, sp, #4
1000979e:	0a03      	lsrs	r3, r0, #8
100097a0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097a2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097a4:	2102      	movs	r1, #2
100097a6:	20ef      	movs	r0, #239	; 0xef
100097a8:	0040      	lsls	r0, r0, #1
100097aa:	4b03      	ldr	r3, [pc, #12]	; (100097b8 <dmp_set_tap_time+0x28>)
100097ac:	4798      	blx	r3
}
100097ae:	b003      	add	sp, #12
100097b0:	bd00      	pop	{pc}
100097b2:	46c0      	nop			; (mov r8, r8)
100097b4:	10012641 	.word	0x10012641
100097b8:	100093c1 	.word	0x100093c1

100097bc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
100097bc:	b500      	push	{lr}
100097be:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100097c0:	2105      	movs	r1, #5
100097c2:	4b07      	ldr	r3, [pc, #28]	; (100097e0 <dmp_set_tap_time_multi+0x24>)
100097c4:	4798      	blx	r3
100097c6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097c8:	aa01      	add	r2, sp, #4
100097ca:	0a03      	lsrs	r3, r0, #8
100097cc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097ce:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100097d0:	2102      	movs	r1, #2
100097d2:	20ed      	movs	r0, #237	; 0xed
100097d4:	0040      	lsls	r0, r0, #1
100097d6:	4b03      	ldr	r3, [pc, #12]	; (100097e4 <dmp_set_tap_time_multi+0x28>)
100097d8:	4798      	blx	r3
}
100097da:	b003      	add	sp, #12
100097dc:	bd00      	pop	{pc}
100097de:	46c0      	nop			; (mov r8, r8)
100097e0:	10012641 	.word	0x10012641
100097e4:	100093c1 	.word	0x100093c1

100097e8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
100097e8:	b510      	push	{r4, lr}
100097ea:	b082      	sub	sp, #8
100097ec:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
100097ee:	21fa      	movs	r1, #250	; 0xfa
100097f0:	0089      	lsls	r1, r1, #2
100097f2:	4b09      	ldr	r3, [pc, #36]	; (10009818 <dmp_set_shake_reject_thresh+0x30>)
100097f4:	4798      	blx	r3
100097f6:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100097f8:	aa01      	add	r2, sp, #4
100097fa:	1603      	asrs	r3, r0, #24
100097fc:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097fe:	1403      	asrs	r3, r0, #16
10009800:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009802:	1203      	asrs	r3, r0, #8
10009804:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009806:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009808:	2104      	movs	r1, #4
1000980a:	20ae      	movs	r0, #174	; 0xae
1000980c:	0040      	lsls	r0, r0, #1
1000980e:	4b03      	ldr	r3, [pc, #12]	; (1000981c <dmp_set_shake_reject_thresh+0x34>)
10009810:	4798      	blx	r3
}
10009812:	b002      	add	sp, #8
10009814:	bd10      	pop	{r4, pc}
10009816:	46c0      	nop			; (mov r8, r8)
10009818:	10012755 	.word	0x10012755
1000981c:	100093c1 	.word	0x100093c1

10009820 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009820:	b500      	push	{lr}
10009822:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009824:	2105      	movs	r1, #5
10009826:	4b07      	ldr	r3, [pc, #28]	; (10009844 <dmp_set_shake_reject_time+0x24>)
10009828:	4798      	blx	r3
1000982a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
1000982c:	aa01      	add	r2, sp, #4
1000982e:	0a03      	lsrs	r3, r0, #8
10009830:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009832:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009834:	2102      	movs	r1, #2
10009836:	20ad      	movs	r0, #173	; 0xad
10009838:	0040      	lsls	r0, r0, #1
1000983a:	4b03      	ldr	r3, [pc, #12]	; (10009848 <dmp_set_shake_reject_time+0x28>)
1000983c:	4798      	blx	r3
}
1000983e:	b003      	add	sp, #12
10009840:	bd00      	pop	{pc}
10009842:	46c0      	nop			; (mov r8, r8)
10009844:	10012641 	.word	0x10012641
10009848:	100093c1 	.word	0x100093c1

1000984c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
1000984c:	b500      	push	{lr}
1000984e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009850:	2105      	movs	r1, #5
10009852:	4b07      	ldr	r3, [pc, #28]	; (10009870 <dmp_set_shake_reject_timeout+0x24>)
10009854:	4798      	blx	r3
10009856:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009858:	aa01      	add	r2, sp, #4
1000985a:	0a03      	lsrs	r3, r0, #8
1000985c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000985e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009860:	2102      	movs	r1, #2
10009862:	20ac      	movs	r0, #172	; 0xac
10009864:	0040      	lsls	r0, r0, #1
10009866:	4b03      	ldr	r3, [pc, #12]	; (10009874 <dmp_set_shake_reject_timeout+0x28>)
10009868:	4798      	blx	r3
}
1000986a:	b003      	add	sp, #12
1000986c:	bd00      	pop	{pc}
1000986e:	46c0      	nop			; (mov r8, r8)
10009870:	10012641 	.word	0x10012641
10009874:	100093c1 	.word	0x100093c1

10009878 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009878:	b500      	push	{lr}
1000987a:	b085      	sub	sp, #20
    if (enable) {
1000987c:	2800      	cmp	r0, #0
1000987e:	d00c      	beq.n	1000989a <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009880:	2209      	movs	r2, #9
10009882:	490d      	ldr	r1, [pc, #52]	; (100098b8 <dmp_enable_gyro_cal+0x40>)
10009884:	311c      	adds	r1, #28
10009886:	a801      	add	r0, sp, #4
10009888:	4b0c      	ldr	r3, [pc, #48]	; (100098bc <dmp_enable_gyro_cal+0x44>)
1000988a:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000988c:	aa01      	add	r2, sp, #4
1000988e:	2109      	movs	r1, #9
10009890:	2097      	movs	r0, #151	; 0x97
10009892:	00c0      	lsls	r0, r0, #3
10009894:	4b0a      	ldr	r3, [pc, #40]	; (100098c0 <dmp_enable_gyro_cal+0x48>)
10009896:	4798      	blx	r3
10009898:	e00b      	b.n	100098b2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1000989a:	2209      	movs	r2, #9
1000989c:	4906      	ldr	r1, [pc, #24]	; (100098b8 <dmp_enable_gyro_cal+0x40>)
1000989e:	3128      	adds	r1, #40	; 0x28
100098a0:	a801      	add	r0, sp, #4
100098a2:	4b06      	ldr	r3, [pc, #24]	; (100098bc <dmp_enable_gyro_cal+0x44>)
100098a4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100098a6:	aa01      	add	r2, sp, #4
100098a8:	2109      	movs	r1, #9
100098aa:	2097      	movs	r0, #151	; 0x97
100098ac:	00c0      	lsls	r0, r0, #3
100098ae:	4b04      	ldr	r3, [pc, #16]	; (100098c0 <dmp_enable_gyro_cal+0x48>)
100098b0:	4798      	blx	r3
    }
}
100098b2:	b005      	add	sp, #20
100098b4:	bd00      	pop	{pc}
100098b6:	46c0      	nop			; (mov r8, r8)
100098b8:	10015a28 	.word	0x10015a28
100098bc:	100143b7 	.word	0x100143b7
100098c0:	100093c1 	.word	0x100093c1

100098c4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
100098c4:	b500      	push	{lr}
100098c6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100098c8:	2800      	cmp	r0, #0
100098ca:	d009      	beq.n	100098e0 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
100098cc:	ab01      	add	r3, sp, #4
100098ce:	22c0      	movs	r2, #192	; 0xc0
100098d0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
100098d2:	3202      	adds	r2, #2
100098d4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
100098d6:	3202      	adds	r2, #2
100098d8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
100098da:	3202      	adds	r2, #2
100098dc:	70da      	strb	r2, [r3, #3]
100098de:	e001      	b.n	100098e4 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
100098e0:	4b05      	ldr	r3, [pc, #20]	; (100098f8 <dmp_enable_lp_quat+0x34>)
100098e2:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
100098e4:	aa01      	add	r2, sp, #4
100098e6:	2104      	movs	r1, #4
100098e8:	4804      	ldr	r0, [pc, #16]	; (100098fc <dmp_enable_lp_quat+0x38>)
100098ea:	4b05      	ldr	r3, [pc, #20]	; (10009900 <dmp_enable_lp_quat+0x3c>)
100098ec:	4798      	blx	r3

    return mpu_reset_fifo();
100098ee:	4b05      	ldr	r3, [pc, #20]	; (10009904 <dmp_enable_lp_quat+0x40>)
100098f0:	4798      	blx	r3
}
100098f2:	b003      	add	sp, #12
100098f4:	bd00      	pop	{pc}
100098f6:	46c0      	nop			; (mov r8, r8)
100098f8:	8b8b8b8b 	.word	0x8b8b8b8b
100098fc:	00000a98 	.word	0x00000a98
10009900:	100093c1 	.word	0x100093c1
10009904:	10008569 	.word	0x10008569

10009908 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009908:	b500      	push	{lr}
1000990a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
1000990c:	2800      	cmp	r0, #0
1000990e:	d009      	beq.n	10009924 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009910:	ab01      	add	r3, sp, #4
10009912:	2220      	movs	r2, #32
10009914:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009916:	3208      	adds	r2, #8
10009918:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
1000991a:	3208      	adds	r2, #8
1000991c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
1000991e:	3208      	adds	r2, #8
10009920:	70da      	strb	r2, [r3, #3]
10009922:	e001      	b.n	10009928 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009924:	4b05      	ldr	r3, [pc, #20]	; (1000993c <dmp_enable_6x_lp_quat+0x34>)
10009926:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009928:	aa01      	add	r2, sp, #4
1000992a:	2104      	movs	r1, #4
1000992c:	4804      	ldr	r0, [pc, #16]	; (10009940 <dmp_enable_6x_lp_quat+0x38>)
1000992e:	4b05      	ldr	r3, [pc, #20]	; (10009944 <dmp_enable_6x_lp_quat+0x3c>)
10009930:	4798      	blx	r3

    return mpu_reset_fifo();
10009932:	4b05      	ldr	r3, [pc, #20]	; (10009948 <dmp_enable_6x_lp_quat+0x40>)
10009934:	4798      	blx	r3
}
10009936:	b003      	add	sp, #12
10009938:	bd00      	pop	{pc}
1000993a:	46c0      	nop			; (mov r8, r8)
1000993c:	a3a3a3a3 	.word	0xa3a3a3a3
10009940:	00000a9e 	.word	0x00000a9e
10009944:	100093c1 	.word	0x100093c1
10009948:	10008569 	.word	0x10008569

1000994c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000994c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000994e:	b085      	sub	sp, #20
10009950:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009952:	ad01      	add	r5, sp, #4
10009954:	2302      	movs	r3, #2
10009956:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009958:	33c8      	adds	r3, #200	; 0xc8
1000995a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000995c:	3319      	adds	r3, #25
1000995e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009960:	3bda      	subs	r3, #218	; 0xda
10009962:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009964:	002a      	movs	r2, r5
10009966:	2104      	movs	r1, #4
10009968:	2068      	movs	r0, #104	; 0x68
1000996a:	4b6a      	ldr	r3, [pc, #424]	; (10009b14 <dmp_enable_feature+0x1c8>)
1000996c:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000996e:	23a3      	movs	r3, #163	; 0xa3
10009970:	702b      	strb	r3, [r5, #0]
10009972:	2740      	movs	r7, #64	; 0x40
10009974:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009976:	d007      	beq.n	10009988 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009978:	ab01      	add	r3, sp, #4
1000997a:	22c0      	movs	r2, #192	; 0xc0
1000997c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
1000997e:	3208      	adds	r2, #8
10009980:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009982:	3a06      	subs	r2, #6
10009984:	70da      	strb	r2, [r3, #3]
10009986:	e004      	b.n	10009992 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009988:	ab01      	add	r3, sp, #4
1000998a:	22a3      	movs	r2, #163	; 0xa3
1000998c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
1000998e:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009990:	70da      	strb	r2, [r3, #3]
10009992:	25c0      	movs	r5, #192	; 0xc0
10009994:	006d      	lsls	r5, r5, #1
10009996:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009998:	d007      	beq.n	100099aa <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
1000999a:	ab01      	add	r3, sp, #4
1000999c:	22c4      	movs	r2, #196	; 0xc4
1000999e:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
100099a0:	3208      	adds	r2, #8
100099a2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
100099a4:	3a06      	subs	r2, #6
100099a6:	719a      	strb	r2, [r3, #6]
100099a8:	e004      	b.n	100099b4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
100099aa:	ab01      	add	r3, sp, #4
100099ac:	22a3      	movs	r2, #163	; 0xa3
100099ae:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
100099b0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
100099b2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
100099b4:	aa01      	add	r2, sp, #4
100099b6:	23a3      	movs	r3, #163	; 0xa3
100099b8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
100099ba:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
100099bc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
100099be:	210a      	movs	r1, #10
100099c0:	4855      	ldr	r0, [pc, #340]	; (10009b18 <dmp_enable_feature+0x1cc>)
100099c2:	4b54      	ldr	r3, [pc, #336]	; (10009b14 <dmp_enable_feature+0x1c8>)
100099c4:	4798      	blx	r3
100099c6:	2603      	movs	r6, #3
100099c8:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
100099ca:	d003      	beq.n	100099d4 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
100099cc:	2220      	movs	r2, #32
100099ce:	ab01      	add	r3, sp, #4
100099d0:	701a      	strb	r2, [r3, #0]
100099d2:	e002      	b.n	100099da <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
100099d4:	22d8      	movs	r2, #216	; 0xd8
100099d6:	ab01      	add	r3, sp, #4
100099d8:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
100099da:	aa01      	add	r2, sp, #4
100099dc:	2101      	movs	r1, #1
100099de:	484f      	ldr	r0, [pc, #316]	; (10009b1c <dmp_enable_feature+0x1d0>)
100099e0:	4b4c      	ldr	r3, [pc, #304]	; (10009b14 <dmp_enable_feature+0x1c8>)
100099e2:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
100099e4:	06a3      	lsls	r3, r4, #26
100099e6:	d503      	bpl.n	100099f0 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
100099e8:	2001      	movs	r0, #1
100099ea:	4b4d      	ldr	r3, [pc, #308]	; (10009b20 <dmp_enable_feature+0x1d4>)
100099ec:	4798      	blx	r3
100099ee:	e002      	b.n	100099f6 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
100099f0:	2000      	movs	r0, #0
100099f2:	4b4b      	ldr	r3, [pc, #300]	; (10009b20 <dmp_enable_feature+0x1d4>)
100099f4:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100099f6:	2d00      	cmp	r5, #0
100099f8:	d019      	beq.n	10009a2e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
100099fa:	05e3      	lsls	r3, r4, #23
100099fc:	d509      	bpl.n	10009a12 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
100099fe:	ab01      	add	r3, sp, #4
10009a00:	22b2      	movs	r2, #178	; 0xb2
10009a02:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009a04:	3a27      	subs	r2, #39	; 0x27
10009a06:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009a08:	322b      	adds	r2, #43	; 0x2b
10009a0a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009a0c:	3a1b      	subs	r2, #27
10009a0e:	70da      	strb	r2, [r3, #3]
10009a10:	e008      	b.n	10009a24 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009a12:	ab01      	add	r3, sp, #4
10009a14:	22b0      	movs	r2, #176	; 0xb0
10009a16:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009a18:	3a30      	subs	r2, #48	; 0x30
10009a1a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009a1c:	3234      	adds	r2, #52	; 0x34
10009a1e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009a20:	3a24      	subs	r2, #36	; 0x24
10009a22:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009a24:	aa01      	add	r2, sp, #4
10009a26:	2104      	movs	r1, #4
10009a28:	483e      	ldr	r0, [pc, #248]	; (10009b24 <dmp_enable_feature+0x1d8>)
10009a2a:	4b3a      	ldr	r3, [pc, #232]	; (10009b14 <dmp_enable_feature+0x1c8>)
10009a2c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009a2e:	07e3      	lsls	r3, r4, #31
10009a30:	d523      	bpl.n	10009a7a <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009a32:	aa01      	add	r2, sp, #4
10009a34:	23f8      	movs	r3, #248	; 0xf8
10009a36:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a38:	2101      	movs	r1, #1
10009a3a:	208b      	movs	r0, #139	; 0x8b
10009a3c:	0100      	lsls	r0, r0, #4
10009a3e:	4b35      	ldr	r3, [pc, #212]	; (10009b14 <dmp_enable_feature+0x1c8>)
10009a40:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009a42:	21fa      	movs	r1, #250	; 0xfa
10009a44:	2007      	movs	r0, #7
10009a46:	4b38      	ldr	r3, [pc, #224]	; (10009b28 <dmp_enable_feature+0x1dc>)
10009a48:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009a4a:	2007      	movs	r0, #7
10009a4c:	4b37      	ldr	r3, [pc, #220]	; (10009b2c <dmp_enable_feature+0x1e0>)
10009a4e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009a50:	2001      	movs	r0, #1
10009a52:	4b37      	ldr	r3, [pc, #220]	; (10009b30 <dmp_enable_feature+0x1e4>)
10009a54:	4798      	blx	r3
        dmp_set_tap_time(100);
10009a56:	2064      	movs	r0, #100	; 0x64
10009a58:	4b36      	ldr	r3, [pc, #216]	; (10009b34 <dmp_enable_feature+0x1e8>)
10009a5a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009a5c:	20fa      	movs	r0, #250	; 0xfa
10009a5e:	0040      	lsls	r0, r0, #1
10009a60:	4b35      	ldr	r3, [pc, #212]	; (10009b38 <dmp_enable_feature+0x1ec>)
10009a62:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009a64:	21c8      	movs	r1, #200	; 0xc8
10009a66:	4835      	ldr	r0, [pc, #212]	; (10009b3c <dmp_enable_feature+0x1f0>)
10009a68:	4b35      	ldr	r3, [pc, #212]	; (10009b40 <dmp_enable_feature+0x1f4>)
10009a6a:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009a6c:	2028      	movs	r0, #40	; 0x28
10009a6e:	4b35      	ldr	r3, [pc, #212]	; (10009b44 <dmp_enable_feature+0x1f8>)
10009a70:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009a72:	200a      	movs	r0, #10
10009a74:	4b34      	ldr	r3, [pc, #208]	; (10009b48 <dmp_enable_feature+0x1fc>)
10009a76:	4798      	blx	r3
10009a78:	e007      	b.n	10009a8a <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009a7a:	aa01      	add	r2, sp, #4
10009a7c:	23d8      	movs	r3, #216	; 0xd8
10009a7e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009a80:	2101      	movs	r1, #1
10009a82:	208b      	movs	r0, #139	; 0x8b
10009a84:	0100      	lsls	r0, r0, #4
10009a86:	4b23      	ldr	r3, [pc, #140]	; (10009b14 <dmp_enable_feature+0x1c8>)
10009a88:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009a8a:	07a3      	lsls	r3, r4, #30
10009a8c:	d503      	bpl.n	10009a96 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009a8e:	22d9      	movs	r2, #217	; 0xd9
10009a90:	ab01      	add	r3, sp, #4
10009a92:	701a      	strb	r2, [r3, #0]
10009a94:	e002      	b.n	10009a9c <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009a96:	22d8      	movs	r2, #216	; 0xd8
10009a98:	ab01      	add	r3, sp, #4
10009a9a:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009a9c:	aa01      	add	r2, sp, #4
10009a9e:	2101      	movs	r1, #1
10009aa0:	482a      	ldr	r0, [pc, #168]	; (10009b4c <dmp_enable_feature+0x200>)
10009aa2:	4b1c      	ldr	r3, [pc, #112]	; (10009b14 <dmp_enable_feature+0x1c8>)
10009aa4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009aa6:	0763      	lsls	r3, r4, #29
10009aa8:	d503      	bpl.n	10009ab2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009aaa:	2001      	movs	r0, #1
10009aac:	4b28      	ldr	r3, [pc, #160]	; (10009b50 <dmp_enable_feature+0x204>)
10009aae:	4798      	blx	r3
10009ab0:	e002      	b.n	10009ab8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009ab2:	2000      	movs	r0, #0
10009ab4:	4b26      	ldr	r3, [pc, #152]	; (10009b50 <dmp_enable_feature+0x204>)
10009ab6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009ab8:	06e3      	lsls	r3, r4, #27
10009aba:	d503      	bpl.n	10009ac4 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009abc:	2001      	movs	r0, #1
10009abe:	4b25      	ldr	r3, [pc, #148]	; (10009b54 <dmp_enable_feature+0x208>)
10009ac0:	4798      	blx	r3
10009ac2:	e002      	b.n	10009aca <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009ac4:	2000      	movs	r0, #0
10009ac6:	4b23      	ldr	r3, [pc, #140]	; (10009b54 <dmp_enable_feature+0x208>)
10009ac8:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009aca:	2308      	movs	r3, #8
10009acc:	4323      	orrs	r3, r4
10009ace:	4a22      	ldr	r2, [pc, #136]	; (10009b58 <dmp_enable_feature+0x20c>)
10009ad0:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009ad2:	4b22      	ldr	r3, [pc, #136]	; (10009b5c <dmp_enable_feature+0x210>)
10009ad4:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009ad6:	2f00      	cmp	r7, #0
10009ad8:	d103      	bne.n	10009ae2 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009ada:	2200      	movs	r2, #0
10009adc:	4b1e      	ldr	r3, [pc, #120]	; (10009b58 <dmp_enable_feature+0x20c>)
10009ade:	739a      	strb	r2, [r3, #14]
10009ae0:	e002      	b.n	10009ae8 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009ae2:	2206      	movs	r2, #6
10009ae4:	4b1c      	ldr	r3, [pc, #112]	; (10009b58 <dmp_enable_feature+0x20c>)
10009ae6:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009ae8:	2d00      	cmp	r5, #0
10009aea:	d003      	beq.n	10009af4 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009aec:	4a1a      	ldr	r2, [pc, #104]	; (10009b58 <dmp_enable_feature+0x20c>)
10009aee:	7b93      	ldrb	r3, [r2, #14]
10009af0:	3306      	adds	r3, #6
10009af2:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009af4:	2314      	movs	r3, #20
10009af6:	4223      	tst	r3, r4
10009af8:	d003      	beq.n	10009b02 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009afa:	4a17      	ldr	r2, [pc, #92]	; (10009b58 <dmp_enable_feature+0x20c>)
10009afc:	7b93      	ldrb	r3, [r2, #14]
10009afe:	3310      	adds	r3, #16
10009b00:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009b02:	2e00      	cmp	r6, #0
10009b04:	d003      	beq.n	10009b0e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009b06:	4a14      	ldr	r2, [pc, #80]	; (10009b58 <dmp_enable_feature+0x20c>)
10009b08:	7b93      	ldrb	r3, [r2, #14]
10009b0a:	3304      	adds	r3, #4
10009b0c:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009b0e:	2000      	movs	r0, #0
10009b10:	b005      	add	sp, #20
10009b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b14:	100093c1 	.word	0x100093c1
10009b18:	00000aa7 	.word	0x00000aa7
10009b1c:	00000ab6 	.word	0x00000ab6
10009b20:	10009879 	.word	0x10009879
10009b24:	00000aa2 	.word	0x00000aa2
10009b28:	10009569 	.word	0x10009569
10009b2c:	10009715 	.word	0x10009715
10009b30:	10009761 	.word	0x10009761
10009b34:	10009791 	.word	0x10009791
10009b38:	100097bd 	.word	0x100097bd
10009b3c:	02cae309 	.word	0x02cae309
10009b40:	100097e9 	.word	0x100097e9
10009b44:	10009821 	.word	0x10009821
10009b48:	1000984d 	.word	0x1000984d
10009b4c:	0000073d 	.word	0x0000073d
10009b50:	100098c5 	.word	0x100098c5
10009b54:	10009909 	.word	0x10009909
10009b58:	10016d40 	.word	0x10016d40
10009b5c:	10008569 	.word	0x10008569

10009b60 <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10009b60:	4b03      	ldr	r3, [pc, #12]	; (10009b70 <sms_ble_pair_request_fn+0x10>)
10009b62:	781b      	ldrb	r3, [r3, #0]
10009b64:	4b03      	ldr	r3, [pc, #12]	; (10009b74 <sms_ble_pair_request_fn+0x14>)
10009b66:	781b      	ldrb	r3, [r3, #0]
10009b68:	4b03      	ldr	r3, [pc, #12]	; (10009b78 <sms_ble_pair_request_fn+0x18>)
10009b6a:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009b6c:	2000      	movs	r0, #0
10009b6e:	4770      	bx	lr
10009b70:	10018888 	.word	0x10018888
10009b74:	100187f0 	.word	0x100187f0
10009b78:	100189ab 	.word	0x100189ab

10009b7c <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009b7c:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
10009b7e:	4811      	ldr	r0, [pc, #68]	; (10009bc4 <sms_ble_notification_confirmed_fn+0x48>)
10009b80:	4d11      	ldr	r5, [pc, #68]	; (10009bc8 <sms_ble_notification_confirmed_fn+0x4c>)
10009b82:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10009b84:	4c11      	ldr	r4, [pc, #68]	; (10009bcc <sms_ble_notification_confirmed_fn+0x50>)
10009b86:	7863      	ldrb	r3, [r4, #1]
10009b88:	3b01      	subs	r3, #1
10009b8a:	b2db      	uxtb	r3, r3
10009b8c:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
10009b8e:	4810      	ldr	r0, [pc, #64]	; (10009bd0 <sms_ble_notification_confirmed_fn+0x54>)
10009b90:	4b10      	ldr	r3, [pc, #64]	; (10009bd4 <sms_ble_notification_confirmed_fn+0x58>)
10009b92:	4798      	blx	r3
10009b94:	4810      	ldr	r0, [pc, #64]	; (10009bd8 <sms_ble_notification_confirmed_fn+0x5c>)
10009b96:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10009b98:	2201      	movs	r2, #1
10009b9a:	4252      	negs	r2, r2
10009b9c:	4b0f      	ldr	r3, [pc, #60]	; (10009bdc <sms_ble_notification_confirmed_fn+0x60>)
10009b9e:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ba0:	2001      	movs	r0, #1
10009ba2:	4b0f      	ldr	r3, [pc, #60]	; (10009be0 <sms_ble_notification_confirmed_fn+0x64>)
10009ba4:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ba6:	2200      	movs	r2, #0
10009ba8:	4b0e      	ldr	r3, [pc, #56]	; (10009be4 <sms_ble_notification_confirmed_fn+0x68>)
10009baa:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10009bac:	2322      	movs	r3, #34	; 0x22
10009bae:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009bb0:	4b0d      	ldr	r3, [pc, #52]	; (10009be8 <sms_ble_notification_confirmed_fn+0x6c>)
10009bb2:	781b      	ldrb	r3, [r3, #0]
10009bb4:	2b00      	cmp	r3, #0
10009bb6:	d102      	bne.n	10009bbe <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
10009bb8:	3201      	adds	r2, #1
10009bba:	4b0c      	ldr	r3, [pc, #48]	; (10009bec <sms_ble_notification_confirmed_fn+0x70>)
10009bbc:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009bbe:	2000      	movs	r0, #0
10009bc0:	bd70      	pop	{r4, r5, r6, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	10015a74 	.word	0x10015a74
10009bc8:	10014511 	.word	0x10014511
10009bcc:	10018888 	.word	0x10018888
10009bd0:	100157dc 	.word	0x100157dc
10009bd4:	10014631 	.word	0x10014631
10009bd8:	10015a7c 	.word	0x10015a7c
10009bdc:	10018880 	.word	0x10018880
10009be0:	1000b0c1 	.word	0x1000b0c1
10009be4:	100189ab 	.word	0x100189ab
10009be8:	100187f0 	.word	0x100187f0
10009bec:	10018885 	.word	0x10018885

10009bf0 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009bf0:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009bf2:	2001      	movs	r0, #1
10009bf4:	4b08      	ldr	r3, [pc, #32]	; (10009c18 <sms_ble_indication_confirmed_fn+0x28>)
10009bf6:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009bf8:	2200      	movs	r2, #0
10009bfa:	4b08      	ldr	r3, [pc, #32]	; (10009c1c <sms_ble_indication_confirmed_fn+0x2c>)
10009bfc:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10009bfe:	3222      	adds	r2, #34	; 0x22
10009c00:	4b07      	ldr	r3, [pc, #28]	; (10009c20 <sms_ble_indication_confirmed_fn+0x30>)
10009c02:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009c04:	4b07      	ldr	r3, [pc, #28]	; (10009c24 <sms_ble_indication_confirmed_fn+0x34>)
10009c06:	781b      	ldrb	r3, [r3, #0]
10009c08:	2b00      	cmp	r3, #0
10009c0a:	d102      	bne.n	10009c12 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009c0c:	3a21      	subs	r2, #33	; 0x21
10009c0e:	4b06      	ldr	r3, [pc, #24]	; (10009c28 <sms_ble_indication_confirmed_fn+0x38>)
10009c10:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009c12:	2000      	movs	r0, #0
10009c14:	bd10      	pop	{r4, pc}
10009c16:	46c0      	nop			; (mov r8, r8)
10009c18:	1000b0c1 	.word	0x1000b0c1
10009c1c:	100189ab 	.word	0x100189ab
10009c20:	10018888 	.word	0x10018888
10009c24:	100187f0 	.word	0x100187f0
10009c28:	10018885 	.word	0x10018885

10009c2c <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10009c2c:	2300      	movs	r3, #0
10009c2e:	4a02      	ldr	r2, [pc, #8]	; (10009c38 <sms_ble_init_variables+0xc>)
10009c30:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
10009c32:	4a02      	ldr	r2, [pc, #8]	; (10009c3c <sms_ble_init_variables+0x10>)
10009c34:	8013      	strh	r3, [r2, #0]
}
10009c36:	4770      	bx	lr
10009c38:	10018888 	.word	0x10018888
10009c3c:	100189c4 	.word	0x100189c4

10009c40 <sms_ble_startup>:

void sms_ble_startup(void)
{
10009c40:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009c42:	2202      	movs	r2, #2
10009c44:	4b02      	ldr	r3, [pc, #8]	; (10009c50 <sms_ble_startup+0x10>)
10009c46:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10009c48:	2016      	movs	r0, #22
10009c4a:	4b02      	ldr	r3, [pc, #8]	; (10009c54 <sms_ble_startup+0x14>)
10009c4c:	4798      	blx	r3
}
10009c4e:	bd10      	pop	{r4, pc}
10009c50:	100189ab 	.word	0x100189ab
10009c54:	1000a94d 	.word	0x1000a94d

10009c58 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009c58:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10009c5a:	481b      	ldr	r0, [pc, #108]	; (10009cc8 <sms_ble_power_down+0x70>)
10009c5c:	4b1b      	ldr	r3, [pc, #108]	; (10009ccc <sms_ble_power_down+0x74>)
10009c5e:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10009c60:	4b1b      	ldr	r3, [pc, #108]	; (10009cd0 <sms_ble_power_down+0x78>)
10009c62:	781b      	ldrb	r3, [r3, #0]
10009c64:	2b00      	cmp	r3, #0
10009c66:	d105      	bne.n	10009c74 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10009c68:	2201      	movs	r2, #1
10009c6a:	4b1a      	ldr	r3, [pc, #104]	; (10009cd4 <sms_ble_power_down+0x7c>)
10009c6c:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10009c6e:	4b1a      	ldr	r3, [pc, #104]	; (10009cd8 <sms_ble_power_down+0x80>)
10009c70:	4798      	blx	r3
10009c72:	e028      	b.n	10009cc6 <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10009c74:	4b16      	ldr	r3, [pc, #88]	; (10009cd0 <sms_ble_power_down+0x78>)
10009c76:	781b      	ldrb	r3, [r3, #0]
10009c78:	b2db      	uxtb	r3, r3
10009c7a:	2b21      	cmp	r3, #33	; 0x21
10009c7c:	d015      	beq.n	10009caa <sms_ble_power_down+0x52>
10009c7e:	d802      	bhi.n	10009c86 <sms_ble_power_down+0x2e>
10009c80:	2b20      	cmp	r3, #32
10009c82:	d003      	beq.n	10009c8c <sms_ble_power_down+0x34>
10009c84:	e016      	b.n	10009cb4 <sms_ble_power_down+0x5c>
10009c86:	2b23      	cmp	r3, #35	; 0x23
10009c88:	d908      	bls.n	10009c9c <sms_ble_power_down+0x44>
10009c8a:	e013      	b.n	10009cb4 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009c8c:	4b13      	ldr	r3, [pc, #76]	; (10009cdc <sms_ble_power_down+0x84>)
10009c8e:	4798      	blx	r3
10009c90:	2800      	cmp	r0, #0
10009c92:	d10f      	bne.n	10009cb4 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009c94:	2211      	movs	r2, #17
10009c96:	4b0e      	ldr	r3, [pc, #56]	; (10009cd0 <sms_ble_power_down+0x78>)
10009c98:	701a      	strb	r2, [r3, #0]
10009c9a:	e00b      	b.n	10009cb4 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10009c9c:	2100      	movs	r1, #0
10009c9e:	232b      	movs	r3, #43	; 0x2b
10009ca0:	4a0f      	ldr	r2, [pc, #60]	; (10009ce0 <sms_ble_power_down+0x88>)
10009ca2:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10009ca4:	2000      	movs	r0, #0
10009ca6:	4b0f      	ldr	r3, [pc, #60]	; (10009ce4 <sms_ble_power_down+0x8c>)
10009ca8:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009caa:	4b0f      	ldr	r3, [pc, #60]	; (10009ce8 <sms_ble_power_down+0x90>)
10009cac:	8818      	ldrh	r0, [r3, #0]
10009cae:	2113      	movs	r1, #19
10009cb0:	4b0e      	ldr	r3, [pc, #56]	; (10009cec <sms_ble_power_down+0x94>)
10009cb2:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009cb4:	2211      	movs	r2, #17
10009cb6:	4b06      	ldr	r3, [pc, #24]	; (10009cd0 <sms_ble_power_down+0x78>)
10009cb8:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009cba:	3a0e      	subs	r2, #14
10009cbc:	4b0c      	ldr	r3, [pc, #48]	; (10009cf0 <sms_ble_power_down+0x98>)
10009cbe:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10009cc0:	2016      	movs	r0, #22
10009cc2:	4b0c      	ldr	r3, [pc, #48]	; (10009cf4 <sms_ble_power_down+0x9c>)
10009cc4:	4798      	blx	r3
	}
}
10009cc6:	bd10      	pop	{r4, pc}
10009cc8:	10015a88 	.word	0x10015a88
10009ccc:	1000a5b1 	.word	0x1000a5b1
10009cd0:	10018888 	.word	0x10018888
10009cd4:	10018885 	.word	0x10018885
10009cd8:	1000ec9d 	.word	0x1000ec9d
10009cdc:	1000ff49 	.word	0x1000ff49
10009ce0:	10018910 	.word	0x10018910
10009ce4:	1000ad81 	.word	0x1000ad81
10009ce8:	1001888a 	.word	0x1001888a
10009cec:	1000ff75 	.word	0x1000ff75
10009cf0:	100189ab 	.word	0x100189ab
10009cf4:	1000a94d 	.word	0x1000a94d

10009cf8 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009cf8:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009cfa:	2211      	movs	r2, #17
10009cfc:	4b02      	ldr	r3, [pc, #8]	; (10009d08 <sms_ble_adv_report_fn+0x10>)
10009cfe:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009d00:	4b02      	ldr	r3, [pc, #8]	; (10009d0c <sms_ble_adv_report_fn+0x14>)
10009d02:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009d04:	2000      	movs	r0, #0
10009d06:	bd10      	pop	{r4, pc}
10009d08:	10018888 	.word	0x10018888
10009d0c:	10009c59 	.word	0x10009c59

10009d10 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009d10:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10009d12:	4b0c      	ldr	r3, [pc, #48]	; (10009d44 <sms_ble_connected_fn+0x34>)
10009d14:	781b      	ldrb	r3, [r3, #0]
10009d16:	2b20      	cmp	r3, #32
10009d18:	d110      	bne.n	10009d3c <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009d1a:	8902      	ldrh	r2, [r0, #8]
10009d1c:	4b0a      	ldr	r3, [pc, #40]	; (10009d48 <sms_ble_connected_fn+0x38>)
10009d1e:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10009d20:	2221      	movs	r2, #33	; 0x21
10009d22:	4b08      	ldr	r3, [pc, #32]	; (10009d44 <sms_ble_connected_fn+0x34>)
10009d24:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
10009d26:	4809      	ldr	r0, [pc, #36]	; (10009d4c <sms_ble_connected_fn+0x3c>)
10009d28:	4b09      	ldr	r3, [pc, #36]	; (10009d50 <sms_ble_connected_fn+0x40>)
10009d2a:	4798      	blx	r3
10009d2c:	4809      	ldr	r0, [pc, #36]	; (10009d54 <sms_ble_connected_fn+0x44>)
10009d2e:	4b0a      	ldr	r3, [pc, #40]	; (10009d58 <sms_ble_connected_fn+0x48>)
10009d30:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10009d32:	22fa      	movs	r2, #250	; 0xfa
10009d34:	0052      	lsls	r2, r2, #1
10009d36:	4b09      	ldr	r3, [pc, #36]	; (10009d5c <sms_ble_connected_fn+0x4c>)
10009d38:	601a      	str	r2, [r3, #0]
10009d3a:	e001      	b.n	10009d40 <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10009d3c:	4b08      	ldr	r3, [pc, #32]	; (10009d60 <sms_ble_connected_fn+0x50>)
10009d3e:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009d40:	2000      	movs	r0, #0
10009d42:	bd10      	pop	{r4, pc}
10009d44:	10018888 	.word	0x10018888
10009d48:	1001899e 	.word	0x1001899e
10009d4c:	100157dc 	.word	0x100157dc
10009d50:	10014631 	.word	0x10014631
10009d54:	10015aa0 	.word	0x10015aa0
10009d58:	10014511 	.word	0x10014511
10009d5c:	10018880 	.word	0x10018880
10009d60:	10009c59 	.word	0x10009c59

10009d64 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009d64:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10009d66:	4b17      	ldr	r3, [pc, #92]	; (10009dc4 <sms_ble_paired_fn+0x60>)
10009d68:	781b      	ldrb	r3, [r3, #0]
10009d6a:	2b21      	cmp	r3, #33	; 0x21
10009d6c:	d125      	bne.n	10009dba <sms_ble_paired_fn+0x56>
        ble_instance.current_state = BLE_STATE_PAIRED;
10009d6e:	2222      	movs	r2, #34	; 0x22
10009d70:	4b14      	ldr	r3, [pc, #80]	; (10009dc4 <sms_ble_paired_fn+0x60>)
10009d72:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009d74:	4814      	ldr	r0, [pc, #80]	; (10009dc8 <sms_ble_paired_fn+0x64>)
10009d76:	4b15      	ldr	r3, [pc, #84]	; (10009dcc <sms_ble_paired_fn+0x68>)
10009d78:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		if(sms_mpu_initialize()) {
10009d7a:	4b15      	ldr	r3, [pc, #84]	; (10009dd0 <sms_ble_paired_fn+0x6c>)
10009d7c:	4798      	blx	r3
10009d7e:	2800      	cmp	r0, #0
10009d80:	d006      	beq.n	10009d90 <sms_ble_paired_fn+0x2c>
			DBG_LOG("Failed to initialize MPU");
10009d82:	4814      	ldr	r0, [pc, #80]	; (10009dd4 <sms_ble_paired_fn+0x70>)
10009d84:	4b14      	ldr	r3, [pc, #80]	; (10009dd8 <sms_ble_paired_fn+0x74>)
10009d86:	4798      	blx	r3
10009d88:	4814      	ldr	r0, [pc, #80]	; (10009ddc <sms_ble_paired_fn+0x78>)
10009d8a:	4b15      	ldr	r3, [pc, #84]	; (10009de0 <sms_ble_paired_fn+0x7c>)
10009d8c:	4798      	blx	r3
10009d8e:	e005      	b.n	10009d9c <sms_ble_paired_fn+0x38>
		}
		else {
			DBG_LOG("MPU initialized");
10009d90:	4810      	ldr	r0, [pc, #64]	; (10009dd4 <sms_ble_paired_fn+0x70>)
10009d92:	4b11      	ldr	r3, [pc, #68]	; (10009dd8 <sms_ble_paired_fn+0x74>)
10009d94:	4798      	blx	r3
10009d96:	4813      	ldr	r0, [pc, #76]	; (10009de4 <sms_ble_paired_fn+0x80>)
10009d98:	4b11      	ldr	r3, [pc, #68]	; (10009de0 <sms_ble_paired_fn+0x7c>)
10009d9a:	4798      	blx	r3
		}
        sms_sensors_switch(false, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009d9c:	2101      	movs	r1, #1
10009d9e:	2000      	movs	r0, #0
10009da0:	4b11      	ldr	r3, [pc, #68]	; (10009de8 <sms_ble_paired_fn+0x84>)
10009da2:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
10009da4:	480b      	ldr	r0, [pc, #44]	; (10009dd4 <sms_ble_paired_fn+0x70>)
10009da6:	4b0c      	ldr	r3, [pc, #48]	; (10009dd8 <sms_ble_paired_fn+0x74>)
10009da8:	4798      	blx	r3
10009daa:	4810      	ldr	r0, [pc, #64]	; (10009dec <sms_ble_paired_fn+0x88>)
10009dac:	4b0c      	ldr	r3, [pc, #48]	; (10009de0 <sms_ble_paired_fn+0x7c>)
10009dae:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10009db0:	2201      	movs	r2, #1
10009db2:	4252      	negs	r2, r2
10009db4:	4b0e      	ldr	r3, [pc, #56]	; (10009df0 <sms_ble_paired_fn+0x8c>)
10009db6:	601a      	str	r2, [r3, #0]
10009db8:	e001      	b.n	10009dbe <sms_ble_paired_fn+0x5a>
    }
    else {
        sms_ble_power_down();
10009dba:	4b0e      	ldr	r3, [pc, #56]	; (10009df4 <sms_ble_paired_fn+0x90>)
10009dbc:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009dbe:	2000      	movs	r0, #0
10009dc0:	bd10      	pop	{r4, pc}
10009dc2:	46c0      	nop			; (mov r8, r8)
10009dc4:	10018888 	.word	0x10018888
10009dc8:	10015ab0 	.word	0x10015ab0
10009dcc:	1000a5b1 	.word	0x1000a5b1
10009dd0:	1000a7cd 	.word	0x1000a7cd
10009dd4:	100157dc 	.word	0x100157dc
10009dd8:	10014631 	.word	0x10014631
10009ddc:	10015ac4 	.word	0x10015ac4
10009de0:	10014511 	.word	0x10014511
10009de4:	10015ae0 	.word	0x10015ae0
10009de8:	1000ae0d 	.word	0x1000ae0d
10009dec:	10015a7c 	.word	0x10015a7c
10009df0:	10018880 	.word	0x10018880
10009df4:	10009c59 	.word	0x10009c59

10009df8 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10009df8:	b510      	push	{r4, lr}
10009dfa:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10009dfc:	2220      	movs	r2, #32
10009dfe:	4b14      	ldr	r3, [pc, #80]	; (10009e50 <sms_ble_advertise+0x58>)
10009e00:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009e02:	4b14      	ldr	r3, [pc, #80]	; (10009e54 <sms_ble_advertise+0x5c>)
10009e04:	4798      	blx	r3
10009e06:	1e04      	subs	r4, r0, #0
10009e08:	d007      	beq.n	10009e1a <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009e0a:	4813      	ldr	r0, [pc, #76]	; (10009e58 <sms_ble_advertise+0x60>)
10009e0c:	4b13      	ldr	r3, [pc, #76]	; (10009e5c <sms_ble_advertise+0x64>)
10009e0e:	4798      	blx	r3
10009e10:	4813      	ldr	r0, [pc, #76]	; (10009e60 <sms_ble_advertise+0x68>)
10009e12:	4b14      	ldr	r3, [pc, #80]	; (10009e64 <sms_ble_advertise+0x6c>)
10009e14:	4798      	blx	r3
		return status;
10009e16:	0020      	movs	r0, r4
10009e18:	e018      	b.n	10009e4c <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009e1a:	2300      	movs	r3, #0
10009e1c:	9302      	str	r3, [sp, #8]
10009e1e:	4b12      	ldr	r3, [pc, #72]	; (10009e68 <sms_ble_advertise+0x70>)
10009e20:	9301      	str	r3, [sp, #4]
10009e22:	23c8      	movs	r3, #200	; 0xc8
10009e24:	00db      	lsls	r3, r3, #3
10009e26:	9300      	str	r3, [sp, #0]
10009e28:	2300      	movs	r3, #0
10009e2a:	2200      	movs	r2, #0
10009e2c:	2101      	movs	r1, #1
10009e2e:	2000      	movs	r0, #0
10009e30:	4c0e      	ldr	r4, [pc, #56]	; (10009e6c <sms_ble_advertise+0x74>)
10009e32:	47a0      	blx	r4
10009e34:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
10009e36:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009e38:	2c00      	cmp	r4, #0
10009e3a:	d007      	beq.n	10009e4c <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009e3c:	4806      	ldr	r0, [pc, #24]	; (10009e58 <sms_ble_advertise+0x60>)
10009e3e:	4b07      	ldr	r3, [pc, #28]	; (10009e5c <sms_ble_advertise+0x64>)
10009e40:	4798      	blx	r3
10009e42:	0021      	movs	r1, r4
10009e44:	480a      	ldr	r0, [pc, #40]	; (10009e70 <sms_ble_advertise+0x78>)
10009e46:	4b07      	ldr	r3, [pc, #28]	; (10009e64 <sms_ble_advertise+0x6c>)
10009e48:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009e4a:	20e2      	movs	r0, #226	; 0xe2
}
10009e4c:	b004      	add	sp, #16
10009e4e:	bd10      	pop	{r4, pc}
10009e50:	10018888 	.word	0x10018888
10009e54:	1000e301 	.word	0x1000e301
10009e58:	100157dc 	.word	0x100157dc
10009e5c:	10014631 	.word	0x10014631
10009e60:	10015af0 	.word	0x10015af0
10009e64:	10014511 	.word	0x10014511
10009e68:	0000028f 	.word	0x0000028f
10009e6c:	1000fe0d 	.word	0x1000fe0d
10009e70:	10015b24 	.word	0x10015b24

10009e74 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009e74:	b510      	push	{r4, lr}
10009e76:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10009e78:	4b16      	ldr	r3, [pc, #88]	; (10009ed4 <sms_ble_disconnected_fn+0x60>)
10009e7a:	781b      	ldrb	r3, [r3, #0]
10009e7c:	2b22      	cmp	r3, #34	; 0x22
10009e7e:	d10a      	bne.n	10009e96 <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10009e80:	2100      	movs	r1, #0
10009e82:	3309      	adds	r3, #9
10009e84:	4a14      	ldr	r2, [pc, #80]	; (10009ed8 <sms_ble_disconnected_fn+0x64>)
10009e86:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10009e88:	2000      	movs	r0, #0
10009e8a:	4b14      	ldr	r3, [pc, #80]	; (10009edc <sms_ble_disconnected_fn+0x68>)
10009e8c:	4798      	blx	r3
        sms_sensors_switch(false, false);
10009e8e:	2100      	movs	r1, #0
10009e90:	2000      	movs	r0, #0
10009e92:	4b13      	ldr	r3, [pc, #76]	; (10009ee0 <sms_ble_disconnected_fn+0x6c>)
10009e94:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10009e96:	4b0f      	ldr	r3, [pc, #60]	; (10009ed4 <sms_ble_disconnected_fn+0x60>)
10009e98:	2211      	movs	r2, #17
10009e9a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10009e9c:	781b      	ldrb	r3, [r3, #0]
10009e9e:	4b11      	ldr	r3, [pc, #68]	; (10009ee4 <sms_ble_disconnected_fn+0x70>)
10009ea0:	781b      	ldrb	r3, [r3, #0]
10009ea2:	4b11      	ldr	r3, [pc, #68]	; (10009ee8 <sms_ble_disconnected_fn+0x74>)
10009ea4:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009ea6:	78a3      	ldrb	r3, [r4, #2]
10009ea8:	2b1a      	cmp	r3, #26
10009eaa:	d00b      	beq.n	10009ec4 <sms_ble_disconnected_fn+0x50>
10009eac:	b2da      	uxtb	r2, r3
10009eae:	2a1a      	cmp	r2, #26
10009eb0:	d804      	bhi.n	10009ebc <sms_ble_disconnected_fn+0x48>
10009eb2:	2b05      	cmp	r3, #5
10009eb4:	d006      	beq.n	10009ec4 <sms_ble_disconnected_fn+0x50>
10009eb6:	2b08      	cmp	r3, #8
10009eb8:	d107      	bne.n	10009eca <sms_ble_disconnected_fn+0x56>
10009eba:	e003      	b.n	10009ec4 <sms_ble_disconnected_fn+0x50>
10009ebc:	2b29      	cmp	r3, #41	; 0x29
10009ebe:	d001      	beq.n	10009ec4 <sms_ble_disconnected_fn+0x50>
10009ec0:	2b3b      	cmp	r3, #59	; 0x3b
10009ec2:	d102      	bne.n	10009eca <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009ec4:	4b09      	ldr	r3, [pc, #36]	; (10009eec <sms_ble_disconnected_fn+0x78>)
10009ec6:	4798      	blx	r3
        break;
10009ec8:	e001      	b.n	10009ece <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009eca:	4b09      	ldr	r3, [pc, #36]	; (10009ef0 <sms_ble_disconnected_fn+0x7c>)
10009ecc:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009ece:	2000      	movs	r0, #0
10009ed0:	bd10      	pop	{r4, pc}
10009ed2:	46c0      	nop			; (mov r8, r8)
10009ed4:	10018888 	.word	0x10018888
10009ed8:	10018910 	.word	0x10018910
10009edc:	1000ad81 	.word	0x1000ad81
10009ee0:	1000ae0d 	.word	0x1000ae0d
10009ee4:	100187f0 	.word	0x100187f0
10009ee8:	100189ab 	.word	0x100189ab
10009eec:	10009df9 	.word	0x10009df9
10009ef0:	10009c59 	.word	0x10009c59

10009ef4 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009ef4:	b530      	push	{r4, r5, lr}
10009ef6:	b087      	sub	sp, #28
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
10009ef8:	2801      	cmp	r0, #1
10009efa:	d02d      	beq.n	10009f58 <sms_ble_send_characteristic+0x64>
10009efc:	2800      	cmp	r0, #0
10009efe:	d002      	beq.n	10009f06 <sms_ble_send_characteristic+0x12>
10009f00:	2802      	cmp	r0, #2
10009f02:	d03f      	beq.n	10009f84 <sms_ble_send_characteristic+0x90>
10009f04:	e097      	b.n	1000a036 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10009f06:	2200      	movs	r2, #0
10009f08:	ab01      	add	r3, sp, #4
10009f0a:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
10009f0c:	4b60      	ldr	r3, [pc, #384]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f0e:	791b      	ldrb	r3, [r3, #4]
10009f10:	2b00      	cmp	r3, #0
10009f12:	d00a      	beq.n	10009f2a <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10009f14:	4b5e      	ldr	r3, [pc, #376]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f16:	795a      	ldrb	r2, [r3, #5]
10009f18:	2300      	movs	r3, #0
10009f1a:	2a7e      	cmp	r2, #126	; 0x7e
10009f1c:	d801      	bhi.n	10009f22 <sms_ble_send_characteristic+0x2e>
10009f1e:	3201      	adds	r2, #1
10009f20:	b2d3      	uxtb	r3, r2
10009f22:	4a5b      	ldr	r2, [pc, #364]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f24:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10009f26:	aa01      	add	r2, sp, #4
10009f28:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
10009f2a:	4b59      	ldr	r3, [pc, #356]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f2c:	7a9b      	ldrb	r3, [r3, #10]
10009f2e:	2b00      	cmp	r3, #0
10009f30:	d00e      	beq.n	10009f50 <sms_ble_send_characteristic+0x5c>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10009f32:	4b57      	ldr	r3, [pc, #348]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f34:	7adb      	ldrb	r3, [r3, #11]
10009f36:	2bff      	cmp	r3, #255	; 0xff
10009f38:	d002      	beq.n	10009f40 <sms_ble_send_characteristic+0x4c>
10009f3a:	3301      	adds	r3, #1
10009f3c:	b2db      	uxtb	r3, r3
10009f3e:	e000      	b.n	10009f42 <sms_ble_send_characteristic+0x4e>
10009f40:	2300      	movs	r3, #0
10009f42:	4a53      	ldr	r2, [pc, #332]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f44:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10009f46:	aa01      	add	r2, sp, #4
10009f48:	3b80      	subs	r3, #128	; 0x80
10009f4a:	7811      	ldrb	r1, [r2, #0]
10009f4c:	430b      	orrs	r3, r1
10009f4e:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009f50:	4b4f      	ldr	r3, [pc, #316]	; (1000a090 <sms_ble_send_characteristic+0x19c>)
10009f52:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
10009f54:	2201      	movs	r2, #1
        break;
10009f56:	e070      	b.n	1000a03a <sms_ble_send_characteristic+0x146>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
10009f58:	494e      	ldr	r1, [pc, #312]	; (1000a094 <sms_ble_send_characteristic+0x1a0>)
10009f5a:	6a0a      	ldr	r2, [r1, #32]
10009f5c:	ab01      	add	r3, sp, #4
10009f5e:	1610      	asrs	r0, r2, #24
10009f60:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10009f62:	1410      	asrs	r0, r2, #16
10009f64:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10009f66:	1210      	asrs	r0, r2, #8
10009f68:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10009f6a:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10009f6c:	69ca      	ldr	r2, [r1, #28]
10009f6e:	1610      	asrs	r0, r2, #24
10009f70:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
10009f72:	1410      	asrs	r0, r2, #16
10009f74:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10009f76:	1210      	asrs	r0, r2, #8
10009f78:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10009f7a:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10009f7c:	2340      	movs	r3, #64	; 0x40
10009f7e:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
10009f80:	2208      	movs	r2, #8
        break;
10009f82:	e05a      	b.n	1000a03a <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
10009f84:	4a44      	ldr	r2, [pc, #272]	; (1000a098 <sms_ble_send_characteristic+0x1a4>)
10009f86:	230e      	movs	r3, #14
10009f88:	5ed1      	ldrsh	r1, [r2, r3]
10009f8a:	ab01      	add	r3, sp, #4
10009f8c:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
10009f8e:	1209      	asrs	r1, r1, #8
10009f90:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
10009f92:	2010      	movs	r0, #16
10009f94:	5e11      	ldrsh	r1, [r2, r0]
10009f96:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
10009f98:	1209      	asrs	r1, r1, #8
10009f9a:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
10009f9c:	2012      	movs	r0, #18
10009f9e:	5e11      	ldrsh	r1, [r2, r0]
10009fa0:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
10009fa2:	1209      	asrs	r1, r1, #8
10009fa4:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
10009fa6:	2008      	movs	r0, #8
10009fa8:	5e11      	ldrsh	r1, [r2, r0]
10009faa:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
10009fac:	1209      	asrs	r1, r1, #8
10009fae:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
10009fb0:	200a      	movs	r0, #10
10009fb2:	5e11      	ldrsh	r1, [r2, r0]
10009fb4:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
10009fb6:	1209      	asrs	r1, r1, #8
10009fb8:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
10009fba:	200c      	movs	r0, #12
10009fbc:	5e11      	ldrsh	r1, [r2, r0]
10009fbe:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
10009fc0:	1209      	asrs	r1, r1, #8
10009fc2:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
10009fc4:	2344      	movs	r3, #68	; 0x44
10009fc6:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
10009fc8:	3b18      	subs	r3, #24
10009fca:	5cd3      	ldrb	r3, [r2, r3]
10009fcc:	2b00      	cmp	r3, #0
10009fce:	d014      	beq.n	10009ffa <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
10009fd0:	2314      	movs	r3, #20
10009fd2:	5ed1      	ldrsh	r1, [r2, r3]
10009fd4:	ab01      	add	r3, sp, #4
10009fd6:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
10009fd8:	1209      	asrs	r1, r1, #8
10009fda:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
10009fdc:	2016      	movs	r0, #22
10009fde:	5e11      	ldrsh	r1, [r2, r0]
10009fe0:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
10009fe2:	1209      	asrs	r1, r1, #8
10009fe4:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
10009fe6:	2018      	movs	r0, #24
10009fe8:	5e11      	ldrsh	r1, [r2, r0]
10009fea:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
10009fec:	1209      	asrs	r1, r1, #8
10009fee:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
10009ff0:	2100      	movs	r1, #0
10009ff2:	232c      	movs	r3, #44	; 0x2c
10009ff4:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
10009ff6:	2212      	movs	r2, #18
10009ff8:	e008      	b.n	1000a00c <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
10009ffa:	ab01      	add	r3, sp, #4
10009ffc:	2200      	movs	r2, #0
10009ffe:	731a      	strb	r2, [r3, #12]
1000a000:	735a      	strb	r2, [r3, #13]
1000a002:	739a      	strb	r2, [r3, #14]
1000a004:	73da      	strb	r2, [r3, #15]
1000a006:	741a      	strb	r2, [r3, #16]
1000a008:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
1000a00a:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
1000a00c:	232d      	movs	r3, #45	; 0x2d
1000a00e:	4922      	ldr	r1, [pc, #136]	; (1000a098 <sms_ble_send_characteristic+0x1a4>)
1000a010:	5ccb      	ldrb	r3, [r1, r3]
1000a012:	2b00      	cmp	r3, #0
1000a014:	d00a      	beq.n	1000a02c <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
1000a016:	000a      	movs	r2, r1
1000a018:	69cb      	ldr	r3, [r1, #28]
1000a01a:	a901      	add	r1, sp, #4
1000a01c:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
1000a01e:	121b      	asrs	r3, r3, #8
1000a020:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
1000a022:	2100      	movs	r1, #0
1000a024:	232d      	movs	r3, #45	; 0x2d
1000a026:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
1000a028:	2214      	movs	r2, #20
1000a02a:	e006      	b.n	1000a03a <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
1000a02c:	ab01      	add	r3, sp, #4
1000a02e:	2100      	movs	r1, #0
1000a030:	7499      	strb	r1, [r3, #18]
1000a032:	74d9      	strb	r1, [r3, #19]
1000a034:	e001      	b.n	1000a03a <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a036:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a038:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a03a:	b292      	uxth	r2, r2
1000a03c:	a901      	add	r1, sp, #4
1000a03e:	0028      	movs	r0, r5
1000a040:	4b16      	ldr	r3, [pc, #88]	; (1000a09c <sms_ble_send_characteristic+0x1a8>)
1000a042:	4798      	blx	r3
1000a044:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a046:	d11f      	bne.n	1000a088 <sms_ble_send_characteristic+0x194>
		DBG_LOG_CONT_DEV(" SET! ");
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a048:	4b15      	ldr	r3, [pc, #84]	; (1000a0a0 <sms_ble_send_characteristic+0x1ac>)
1000a04a:	8818      	ldrh	r0, [r3, #0]
1000a04c:	0029      	movs	r1, r5
1000a04e:	4b15      	ldr	r3, [pc, #84]	; (1000a0a4 <sms_ble_send_characteristic+0x1b0>)
1000a050:	4798      	blx	r3
1000a052:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000a054:	d115      	bne.n	1000a082 <sms_ble_send_characteristic+0x18e>
			ble_instance.sending_queue++;
1000a056:	4a14      	ldr	r2, [pc, #80]	; (1000a0a8 <sms_ble_send_characteristic+0x1b4>)
1000a058:	7853      	ldrb	r3, [r2, #1]
1000a05a:	3301      	adds	r3, #1
1000a05c:	b2db      	uxtb	r3, r3
1000a05e:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000a060:	4b12      	ldr	r3, [pc, #72]	; (1000a0ac <sms_ble_send_characteristic+0x1b8>)
1000a062:	8819      	ldrh	r1, [r3, #0]
1000a064:	3101      	adds	r1, #1
1000a066:	b289      	uxth	r1, r1
1000a068:	8019      	strh	r1, [r3, #0]
			DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
1000a06a:	4811      	ldr	r0, [pc, #68]	; (1000a0b0 <sms_ble_send_characteristic+0x1bc>)
1000a06c:	4d11      	ldr	r5, [pc, #68]	; (1000a0b4 <sms_ble_send_characteristic+0x1c0>)
1000a06e:	47a8      	blx	r5
			DBG_LOG("T/O: 20ms");
1000a070:	4811      	ldr	r0, [pc, #68]	; (1000a0b8 <sms_ble_send_characteristic+0x1c4>)
1000a072:	4b12      	ldr	r3, [pc, #72]	; (1000a0bc <sms_ble_send_characteristic+0x1c8>)
1000a074:	4798      	blx	r3
1000a076:	4812      	ldr	r0, [pc, #72]	; (1000a0c0 <sms_ble_send_characteristic+0x1cc>)
1000a078:	47a8      	blx	r5
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
1000a07a:	2202      	movs	r2, #2
1000a07c:	4b11      	ldr	r3, [pc, #68]	; (1000a0c4 <sms_ble_send_characteristic+0x1d0>)
1000a07e:	601a      	str	r2, [r3, #0]
1000a080:	e002      	b.n	1000a088 <sms_ble_send_characteristic+0x194>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000a082:	4811      	ldr	r0, [pc, #68]	; (1000a0c8 <sms_ble_send_characteristic+0x1d4>)
1000a084:	4b0b      	ldr	r3, [pc, #44]	; (1000a0b4 <sms_ble_send_characteristic+0x1c0>)
1000a086:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
1000a088:	0020      	movs	r0, r4
1000a08a:	b007      	add	sp, #28
1000a08c:	bd30      	pop	{r4, r5, pc}
1000a08e:	46c0      	nop			; (mov r8, r8)
1000a090:	1001888c 	.word	0x1001888c
1000a094:	10018910 	.word	0x10018910
1000a098:	100187f4 	.word	0x100187f4
1000a09c:	100106f1 	.word	0x100106f1
1000a0a0:	1001888a 	.word	0x1001888a
1000a0a4:	10010891 	.word	0x10010891
1000a0a8:	10018888 	.word	0x10018888
1000a0ac:	100189c4 	.word	0x100189c4
1000a0b0:	10015b68 	.word	0x10015b68
1000a0b4:	10014511 	.word	0x10014511
1000a0b8:	100157dc 	.word	0x100157dc
1000a0bc:	10014631 	.word	0x10014631
1000a0c0:	10015b74 	.word	0x10015b74
1000a0c4:	10018880 	.word	0x10018880
1000a0c8:	10015b80 	.word	0x10015b80

1000a0cc <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a0cc:	b510      	push	{r4, lr}
1000a0ce:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a0d0:	0001      	movs	r1, r0
1000a0d2:	3112      	adds	r1, #18
1000a0d4:	2301      	movs	r3, #1
1000a0d6:	9301      	str	r3, [sp, #4]
1000a0d8:	0003      	movs	r3, r0
1000a0da:	3314      	adds	r3, #20
1000a0dc:	9300      	str	r3, [sp, #0]
1000a0de:	2300      	movs	r3, #0
1000a0e0:	2200      	movs	r2, #0
1000a0e2:	4c02      	ldr	r4, [pc, #8]	; (1000a0ec <sms_ble_primary_service_define+0x20>)
1000a0e4:	47a0      	blx	r4
}
1000a0e6:	b002      	add	sp, #8
1000a0e8:	bd10      	pop	{r4, pc}
1000a0ea:	46c0      	nop			; (mov r8, r8)
1000a0ec:	100106d1 	.word	0x100106d1

1000a0f0 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0f2:	464f      	mov	r7, r9
1000a0f4:	4646      	mov	r6, r8
1000a0f6:	b4c0      	push	{r6, r7}
1000a0f8:	b083      	sub	sp, #12
1000a0fa:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a0fc:	2801      	cmp	r0, #1
1000a0fe:	d010      	beq.n	1000a122 <sms_ble_service_init+0x32>
1000a100:	2800      	cmp	r0, #0
1000a102:	d002      	beq.n	1000a10a <sms_ble_service_init+0x1a>
1000a104:	2802      	cmp	r0, #2
1000a106:	d019      	beq.n	1000a13c <sms_ble_service_init+0x4c>
1000a108:	e025      	b.n	1000a156 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a10a:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a10c:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a10e:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a110:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a112:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a114:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a116:	221c      	movs	r2, #28
1000a118:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a11a:	3a1b      	subs	r2, #27
1000a11c:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a11e:	4691      	mov	r9, r2
1000a120:	e023      	b.n	1000a16a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
1000a122:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a124:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a126:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000a128:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000a12a:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a12c:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a12e:	221c      	movs	r2, #28
1000a130:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000a132:	3a14      	subs	r2, #20
1000a134:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a136:	3a06      	subs	r2, #6
1000a138:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000a13a:	e016      	b.n	1000a16a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000a13c:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000a13e:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000a140:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000a142:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
1000a144:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000a146:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000a148:	221c      	movs	r2, #28
1000a14a:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000a14c:	3a08      	subs	r2, #8
1000a14e:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000a150:	3a11      	subs	r2, #17
1000a152:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
1000a154:	e009      	b.n	1000a16a <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a156:	2300      	movs	r3, #0
1000a158:	2400      	movs	r4, #0
1000a15a:	2500      	movs	r5, #0
1000a15c:	2600      	movs	r6, #0
1000a15e:	2700      	movs	r7, #0
1000a160:	2000      	movs	r0, #0
1000a162:	2200      	movs	r2, #0
1000a164:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a166:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a168:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a16a:	464a      	mov	r2, r9
1000a16c:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a16e:	2202      	movs	r2, #2
1000a170:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a172:	4642      	mov	r2, r8
1000a174:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a176:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a178:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a17a:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a17c:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a17e:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a180:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a182:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a184:	2300      	movs	r3, #0
1000a186:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a188:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a18a:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a18c:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a18e:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a190:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a192:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a194:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a196:	2412      	movs	r4, #18
1000a198:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a19a:	4662      	mov	r2, ip
1000a19c:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a19e:	466a      	mov	r2, sp
1000a1a0:	8892      	ldrh	r2, [r2, #4]
1000a1a2:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a1a4:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a1a6:	2011      	movs	r0, #17
1000a1a8:	2234      	movs	r2, #52	; 0x34
1000a1aa:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a1ac:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a1ae:	2200      	movs	r2, #0
1000a1b0:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a1b2:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a1b4:	3033      	adds	r0, #51	; 0x33
1000a1b6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a1b8:	3001      	adds	r0, #1
1000a1ba:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a1bc:	3001      	adds	r0, #1
1000a1be:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a1c0:	2248      	movs	r2, #72	; 0x48
1000a1c2:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a1c4:	3202      	adds	r2, #2
1000a1c6:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a1c8:	3202      	adds	r2, #2
1000a1ca:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a1cc:	640b      	str	r3, [r1, #64]	; 0x40
1000a1ce:	b003      	add	sp, #12
1000a1d0:	bc0c      	pop	{r2, r3}
1000a1d2:	4690      	mov	r8, r2
1000a1d4:	4699      	mov	r9, r3
1000a1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a1d8 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a1d8:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
1000a1da:	4b05      	ldr	r3, [pc, #20]	; (1000a1f0 <sms_button_bt0_callback+0x18>)
1000a1dc:	2201      	movs	r2, #1
1000a1de:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1e0:	7858      	ldrb	r0, [r3, #1]
1000a1e2:	2300      	movs	r3, #0
1000a1e4:	2200      	movs	r2, #0
1000a1e6:	2102      	movs	r1, #2
1000a1e8:	4c02      	ldr	r4, [pc, #8]	; (1000a1f4 <sms_button_bt0_callback+0x1c>)
1000a1ea:	47a0      	blx	r4
}
1000a1ec:	bd10      	pop	{r4, pc}
1000a1ee:	46c0      	nop			; (mov r8, r8)
1000a1f0:	1001888c 	.word	0x1001888c
1000a1f4:	1000e9d1 	.word	0x1000e9d1

1000a1f8 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a1f8:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
1000a1fa:	4b05      	ldr	r3, [pc, #20]	; (1000a210 <sms_button_bt1_callback+0x18>)
1000a1fc:	2201      	movs	r2, #1
1000a1fe:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a200:	79d8      	ldrb	r0, [r3, #7]
1000a202:	2300      	movs	r3, #0
1000a204:	2200      	movs	r2, #0
1000a206:	2102      	movs	r1, #2
1000a208:	4c02      	ldr	r4, [pc, #8]	; (1000a214 <sms_button_bt1_callback+0x1c>)
1000a20a:	47a0      	blx	r4
}
1000a20c:	bd10      	pop	{r4, pc}
1000a20e:	46c0      	nop			; (mov r8, r8)
1000a210:	1001888c 	.word	0x1001888c
1000a214:	1000e9d1 	.word	0x1000e9d1

1000a218 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
1000a218:	4b08      	ldr	r3, [pc, #32]	; (1000a23c <sms_button_init_variables+0x24>)
1000a21a:	2200      	movs	r2, #0
1000a21c:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
1000a21e:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000a220:	211f      	movs	r1, #31
1000a222:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
1000a224:	391e      	subs	r1, #30
1000a226:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000a228:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
1000a22a:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
1000a22c:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000a22e:	201d      	movs	r0, #29
1000a230:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
1000a232:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
1000a234:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
1000a236:	72da      	strb	r2, [r3, #11]
}
1000a238:	4770      	bx	lr
1000a23a:	46c0      	nop			; (mov r8, r8)
1000a23c:	1001888c 	.word	0x1001888c

1000a240 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
1000a240:	b510      	push	{r4, lr}
1000a242:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a244:	ac01      	add	r4, sp, #4
1000a246:	0020      	movs	r0, r4
1000a248:	4b20      	ldr	r3, [pc, #128]	; (1000a2cc <sms_button_gpio_init+0x8c>)
1000a24a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a24c:	2300      	movs	r3, #0
1000a24e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a250:	3302      	adds	r3, #2
1000a252:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a254:	3b01      	subs	r3, #1
1000a256:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a258:	4b1d      	ldr	r3, [pc, #116]	; (1000a2d0 <sms_button_gpio_init+0x90>)
1000a25a:	7858      	ldrb	r0, [r3, #1]
1000a25c:	0021      	movs	r1, r4
1000a25e:	4b1d      	ldr	r3, [pc, #116]	; (1000a2d4 <sms_button_gpio_init+0x94>)
1000a260:	4798      	blx	r3
1000a262:	2800      	cmp	r0, #0
1000a264:	d005      	beq.n	1000a272 <sms_button_gpio_init+0x32>
        DBG_LOG("[sms_button_configure]\tproblem while setting up button0");
1000a266:	481c      	ldr	r0, [pc, #112]	; (1000a2d8 <sms_button_gpio_init+0x98>)
1000a268:	4b1c      	ldr	r3, [pc, #112]	; (1000a2dc <sms_button_gpio_init+0x9c>)
1000a26a:	4798      	blx	r3
1000a26c:	481c      	ldr	r0, [pc, #112]	; (1000a2e0 <sms_button_gpio_init+0xa0>)
1000a26e:	4b1d      	ldr	r3, [pc, #116]	; (1000a2e4 <sms_button_gpio_init+0xa4>)
1000a270:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a272:	ac01      	add	r4, sp, #4
1000a274:	0020      	movs	r0, r4
1000a276:	4b15      	ldr	r3, [pc, #84]	; (1000a2cc <sms_button_gpio_init+0x8c>)
1000a278:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a27a:	2300      	movs	r3, #0
1000a27c:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a27e:	3302      	adds	r3, #2
1000a280:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a282:	3b01      	subs	r3, #1
1000a284:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a286:	4b12      	ldr	r3, [pc, #72]	; (1000a2d0 <sms_button_gpio_init+0x90>)
1000a288:	79d8      	ldrb	r0, [r3, #7]
1000a28a:	0021      	movs	r1, r4
1000a28c:	4b11      	ldr	r3, [pc, #68]	; (1000a2d4 <sms_button_gpio_init+0x94>)
1000a28e:	4798      	blx	r3
1000a290:	2800      	cmp	r0, #0
1000a292:	d005      	beq.n	1000a2a0 <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a294:	4810      	ldr	r0, [pc, #64]	; (1000a2d8 <sms_button_gpio_init+0x98>)
1000a296:	4b11      	ldr	r3, [pc, #68]	; (1000a2dc <sms_button_gpio_init+0x9c>)
1000a298:	4798      	blx	r3
1000a29a:	4813      	ldr	r0, [pc, #76]	; (1000a2e8 <sms_button_gpio_init+0xa8>)
1000a29c:	4b11      	ldr	r3, [pc, #68]	; (1000a2e4 <sms_button_gpio_init+0xa4>)
1000a29e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a2a0:	ac01      	add	r4, sp, #4
1000a2a2:	0020      	movs	r0, r4
1000a2a4:	4b09      	ldr	r3, [pc, #36]	; (1000a2cc <sms_button_gpio_init+0x8c>)
1000a2a6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a2a8:	2300      	movs	r3, #0
1000a2aa:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a2ac:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a2ae:	0021      	movs	r1, r4
1000a2b0:	2017      	movs	r0, #23
1000a2b2:	4b08      	ldr	r3, [pc, #32]	; (1000a2d4 <sms_button_gpio_init+0x94>)
1000a2b4:	4798      	blx	r3
1000a2b6:	2800      	cmp	r0, #0
1000a2b8:	d005      	beq.n	1000a2c6 <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a2ba:	4807      	ldr	r0, [pc, #28]	; (1000a2d8 <sms_button_gpio_init+0x98>)
1000a2bc:	4b07      	ldr	r3, [pc, #28]	; (1000a2dc <sms_button_gpio_init+0x9c>)
1000a2be:	4798      	blx	r3
1000a2c0:	480a      	ldr	r0, [pc, #40]	; (1000a2ec <sms_button_gpio_init+0xac>)
1000a2c2:	4b08      	ldr	r3, [pc, #32]	; (1000a2e4 <sms_button_gpio_init+0xa4>)
1000a2c4:	4798      	blx	r3
    }
}
1000a2c6:	b002      	add	sp, #8
1000a2c8:	bd10      	pop	{r4, pc}
1000a2ca:	46c0      	nop			; (mov r8, r8)
1000a2cc:	1000baa5 	.word	0x1000baa5
1000a2d0:	1001888c 	.word	0x1001888c
1000a2d4:	1000bab5 	.word	0x1000bab5
1000a2d8:	100157dc 	.word	0x100157dc
1000a2dc:	10014631 	.word	0x10014631
1000a2e0:	10015c0c 	.word	0x10015c0c
1000a2e4:	10014511 	.word	0x10014511
1000a2e8:	10015c44 	.word	0x10015c44
1000a2ec:	10015c7c 	.word	0x10015c7c

1000a2f0 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a2f0:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a2f2:	4d05      	ldr	r5, [pc, #20]	; (1000a308 <sms_button_register_callbacks+0x18>)
1000a2f4:	7868      	ldrb	r0, [r5, #1]
1000a2f6:	2202      	movs	r2, #2
1000a2f8:	4904      	ldr	r1, [pc, #16]	; (1000a30c <sms_button_register_callbacks+0x1c>)
1000a2fa:	4c05      	ldr	r4, [pc, #20]	; (1000a310 <sms_button_register_callbacks+0x20>)
1000a2fc:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a2fe:	79e8      	ldrb	r0, [r5, #7]
1000a300:	2202      	movs	r2, #2
1000a302:	4904      	ldr	r1, [pc, #16]	; (1000a314 <sms_button_register_callbacks+0x24>)
1000a304:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a306:	bd70      	pop	{r4, r5, r6, pc}
1000a308:	1001888c 	.word	0x1001888c
1000a30c:	1000a1d9 	.word	0x1000a1d9
1000a310:	1000bee5 	.word	0x1000bee5
1000a314:	1000a1f9 	.word	0x1000a1f9

1000a318 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a318:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a31a:	201f      	movs	r0, #31
1000a31c:	4c08      	ldr	r4, [pc, #32]	; (1000a340 <sms_button_get_state+0x28>)
1000a31e:	47a0      	blx	r4
1000a320:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a322:	201d      	movs	r0, #29
1000a324:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a326:	2d00      	cmp	r5, #0
1000a328:	d004      	beq.n	1000a334 <sms_button_get_state+0x1c>
1000a32a:	2303      	movs	r3, #3
1000a32c:	2800      	cmp	r0, #0
1000a32e:	d104      	bne.n	1000a33a <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a330:	3b02      	subs	r3, #2
1000a332:	e002      	b.n	1000a33a <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a334:	1e43      	subs	r3, r0, #1
1000a336:	4198      	sbcs	r0, r3
1000a338:	0043      	lsls	r3, r0, #1
}
1000a33a:	0018      	movs	r0, r3
1000a33c:	bd70      	pop	{r4, r5, r6, pc}
1000a33e:	46c0      	nop			; (mov r8, r8)
1000a340:	1000bc6d 	.word	0x1000bc6d

1000a344 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
1000a344:	b570      	push	{r4, r5, r6, lr}
1000a346:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a348:	4c47      	ldr	r4, [pc, #284]	; (1000a468 <sms_button_fn+0x124>)
1000a34a:	7b63      	ldrb	r3, [r4, #13]
1000a34c:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000a34e:	4b47      	ldr	r3, [pc, #284]	; (1000a46c <sms_button_fn+0x128>)
1000a350:	4798      	blx	r3
1000a352:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a354:	2d00      	cmp	r5, #0
1000a356:	d103      	bne.n	1000a360 <sms_button_fn+0x1c>
1000a358:	4845      	ldr	r0, [pc, #276]	; (1000a470 <sms_button_fn+0x12c>)
1000a35a:	4b46      	ldr	r3, [pc, #280]	; (1000a474 <sms_button_fn+0x130>)
1000a35c:	4798      	blx	r3
1000a35e:	e004      	b.n	1000a36a <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a360:	2d01      	cmp	r5, #1
1000a362:	d175      	bne.n	1000a450 <sms_button_fn+0x10c>
1000a364:	4844      	ldr	r0, [pc, #272]	; (1000a478 <sms_button_fn+0x134>)
1000a366:	4b43      	ldr	r3, [pc, #268]	; (1000a474 <sms_button_fn+0x130>)
1000a368:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a36a:	4b3f      	ldr	r3, [pc, #252]	; (1000a468 <sms_button_fn+0x124>)
1000a36c:	7b5b      	ldrb	r3, [r3, #13]
1000a36e:	2b01      	cmp	r3, #1
1000a370:	d006      	beq.n	1000a380 <sms_button_fn+0x3c>
1000a372:	2b00      	cmp	r3, #0
1000a374:	d067      	beq.n	1000a446 <sms_button_fn+0x102>
1000a376:	2b02      	cmp	r3, #2
1000a378:	d024      	beq.n	1000a3c4 <sms_button_fn+0x80>
1000a37a:	2b03      	cmp	r3, #3
1000a37c:	d043      	beq.n	1000a406 <sms_button_fn+0xc2>
1000a37e:	e06a      	b.n	1000a456 <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
1000a380:	4b3e      	ldr	r3, [pc, #248]	; (1000a47c <sms_button_fn+0x138>)
1000a382:	781b      	ldrb	r3, [r3, #0]
1000a384:	b2db      	uxtb	r3, r3
1000a386:	2b00      	cmp	r3, #0
1000a388:	d003      	beq.n	1000a392 <sms_button_fn+0x4e>
1000a38a:	3b22      	subs	r3, #34	; 0x22
1000a38c:	2b01      	cmp	r3, #1
1000a38e:	d864      	bhi.n	1000a45a <sms_button_fn+0x116>
1000a390:	e00e      	b.n	1000a3b0 <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a392:	2201      	movs	r2, #1
1000a394:	4b3a      	ldr	r3, [pc, #232]	; (1000a480 <sms_button_fn+0x13c>)
1000a396:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a398:	2300      	movs	r3, #0
1000a39a:	4a3a      	ldr	r2, [pc, #232]	; (1000a484 <sms_button_fn+0x140>)
1000a39c:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a39e:	4a3a      	ldr	r2, [pc, #232]	; (1000a488 <sms_button_fn+0x144>)
1000a3a0:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3a2:	2200      	movs	r2, #0
1000a3a4:	21fa      	movs	r1, #250	; 0xfa
1000a3a6:	2001      	movs	r0, #1
1000a3a8:	4b38      	ldr	r3, [pc, #224]	; (1000a48c <sms_button_fn+0x148>)
1000a3aa:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3ac:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a3ae:	e059      	b.n	1000a464 <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a3b0:	2300      	movs	r3, #0
1000a3b2:	4a33      	ldr	r2, [pc, #204]	; (1000a480 <sms_button_fn+0x13c>)
1000a3b4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3b6:	4a33      	ldr	r2, [pc, #204]	; (1000a484 <sms_button_fn+0x140>)
1000a3b8:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a3ba:	2000      	movs	r0, #0
1000a3bc:	4b34      	ldr	r3, [pc, #208]	; (1000a490 <sms_button_fn+0x14c>)
1000a3be:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3c0:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a3c2:	e04f      	b.n	1000a464 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
1000a3c4:	4b2d      	ldr	r3, [pc, #180]	; (1000a47c <sms_button_fn+0x138>)
1000a3c6:	781b      	ldrb	r3, [r3, #0]
1000a3c8:	b2db      	uxtb	r3, r3
1000a3ca:	2b00      	cmp	r3, #0
1000a3cc:	d002      	beq.n	1000a3d4 <sms_button_fn+0x90>
1000a3ce:	2b22      	cmp	r3, #34	; 0x22
1000a3d0:	d00f      	beq.n	1000a3f2 <sms_button_fn+0xae>
1000a3d2:	e045      	b.n	1000a460 <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a3d4:	2201      	movs	r2, #1
1000a3d6:	4b2a      	ldr	r3, [pc, #168]	; (1000a480 <sms_button_fn+0x13c>)
1000a3d8:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3da:	2300      	movs	r3, #0
1000a3dc:	4a29      	ldr	r2, [pc, #164]	; (1000a484 <sms_button_fn+0x140>)
1000a3de:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a3e0:	4a29      	ldr	r2, [pc, #164]	; (1000a488 <sms_button_fn+0x144>)
1000a3e2:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3e4:	2200      	movs	r2, #0
1000a3e6:	21fa      	movs	r1, #250	; 0xfa
1000a3e8:	2001      	movs	r0, #1
1000a3ea:	4b28      	ldr	r3, [pc, #160]	; (1000a48c <sms_button_fn+0x148>)
1000a3ec:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3ee:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a3f0:	e038      	b.n	1000a464 <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a3f2:	2300      	movs	r3, #0
1000a3f4:	4a22      	ldr	r2, [pc, #136]	; (1000a480 <sms_button_fn+0x13c>)
1000a3f6:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3f8:	4a22      	ldr	r2, [pc, #136]	; (1000a484 <sms_button_fn+0x140>)
1000a3fa:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a3fc:	2000      	movs	r0, #0
1000a3fe:	4b24      	ldr	r3, [pc, #144]	; (1000a490 <sms_button_fn+0x14c>)
1000a400:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a402:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000a404:	e02e      	b.n	1000a464 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a406:	4b1d      	ldr	r3, [pc, #116]	; (1000a47c <sms_button_fn+0x138>)
1000a408:	781b      	ldrb	r3, [r3, #0]
1000a40a:	2b00      	cmp	r3, #0
1000a40c:	d108      	bne.n	1000a420 <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a40e:	4a1c      	ldr	r2, [pc, #112]	; (1000a480 <sms_button_fn+0x13c>)
1000a410:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a412:	4a1c      	ldr	r2, [pc, #112]	; (1000a484 <sms_button_fn+0x140>)
1000a414:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a416:	2201      	movs	r2, #1
1000a418:	4b1e      	ldr	r3, [pc, #120]	; (1000a494 <sms_button_fn+0x150>)
1000a41a:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a41c:	2000      	movs	r0, #0
1000a41e:	e021      	b.n	1000a464 <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
1000a420:	2100      	movs	r1, #0
1000a422:	2000      	movs	r0, #0
1000a424:	4b1c      	ldr	r3, [pc, #112]	; (1000a498 <sms_button_fn+0x154>)
1000a426:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a428:	2202      	movs	r2, #2
1000a42a:	4b15      	ldr	r3, [pc, #84]	; (1000a480 <sms_button_fn+0x13c>)
1000a42c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a42e:	2300      	movs	r3, #0
1000a430:	4a14      	ldr	r2, [pc, #80]	; (1000a484 <sms_button_fn+0x140>)
1000a432:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a434:	4a14      	ldr	r2, [pc, #80]	; (1000a488 <sms_button_fn+0x144>)
1000a436:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a438:	2200      	movs	r2, #0
1000a43a:	21fa      	movs	r1, #250	; 0xfa
1000a43c:	2001      	movs	r0, #1
1000a43e:	4b13      	ldr	r3, [pc, #76]	; (1000a48c <sms_button_fn+0x148>)
1000a440:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a442:	2000      	movs	r0, #0
1000a444:	e00e      	b.n	1000a464 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a446:	2201      	movs	r2, #1
1000a448:	4b12      	ldr	r3, [pc, #72]	; (1000a494 <sms_button_fn+0x150>)
1000a44a:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a44c:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a44e:	e009      	b.n	1000a464 <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a450:	2001      	movs	r0, #1
1000a452:	4240      	negs	r0, r0
1000a454:	e006      	b.n	1000a464 <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a456:	2000      	movs	r0, #0
1000a458:	e004      	b.n	1000a464 <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
1000a45a:	2001      	movs	r0, #1
1000a45c:	4240      	negs	r0, r0
1000a45e:	e001      	b.n	1000a464 <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
1000a460:	2001      	movs	r0, #1
1000a462:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a464:	bd70      	pop	{r4, r5, r6, pc}
1000a466:	46c0      	nop			; (mov r8, r8)
1000a468:	1001888c 	.word	0x1001888c
1000a46c:	1000a319 	.word	0x1000a319
1000a470:	10015cc4 	.word	0x10015cc4
1000a474:	1000a5b1 	.word	0x1000a5b1
1000a478:	10015cd8 	.word	0x10015cd8
1000a47c:	10018888 	.word	0x10018888
1000a480:	100187f0 	.word	0x100187f0
1000a484:	100189ab 	.word	0x100189ab
1000a488:	100189c6 	.word	0x100189c6
1000a48c:	1000b061 	.word	0x1000b061
1000a490:	10009ef5 	.word	0x10009ef5
1000a494:	10018885 	.word	0x10018885
1000a498:	1000ad81 	.word	0x1000ad81

1000a49c <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a49c:	b510      	push	{r4, lr}
1000a49e:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a4a0:	2800      	cmp	r0, #0
1000a4a2:	d104      	bne.n	1000a4ae <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
1000a4a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a4d8 <sms_button_toggle_callback+0x3c>)
1000a4a6:	7858      	ldrb	r0, [r3, #1]
1000a4a8:	4b0c      	ldr	r3, [pc, #48]	; (1000a4dc <sms_button_toggle_callback+0x40>)
1000a4aa:	4798      	blx	r3
1000a4ac:	e005      	b.n	1000a4ba <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a4ae:	2801      	cmp	r0, #1
1000a4b0:	d103      	bne.n	1000a4ba <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000a4b2:	4b09      	ldr	r3, [pc, #36]	; (1000a4d8 <sms_button_toggle_callback+0x3c>)
1000a4b4:	7858      	ldrb	r0, [r3, #1]
1000a4b6:	4b0a      	ldr	r3, [pc, #40]	; (1000a4e0 <sms_button_toggle_callback+0x44>)
1000a4b8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a4ba:	2c00      	cmp	r4, #0
1000a4bc:	d104      	bne.n	1000a4c8 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000a4be:	4b06      	ldr	r3, [pc, #24]	; (1000a4d8 <sms_button_toggle_callback+0x3c>)
1000a4c0:	79d8      	ldrb	r0, [r3, #7]
1000a4c2:	4b06      	ldr	r3, [pc, #24]	; (1000a4dc <sms_button_toggle_callback+0x40>)
1000a4c4:	4798      	blx	r3
1000a4c6:	e005      	b.n	1000a4d4 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a4c8:	2c01      	cmp	r4, #1
1000a4ca:	d103      	bne.n	1000a4d4 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000a4cc:	4b02      	ldr	r3, [pc, #8]	; (1000a4d8 <sms_button_toggle_callback+0x3c>)
1000a4ce:	79d8      	ldrb	r0, [r3, #7]
1000a4d0:	4b03      	ldr	r3, [pc, #12]	; (1000a4e0 <sms_button_toggle_callback+0x44>)
1000a4d2:	4798      	blx	r3
    }
}
1000a4d4:	bd10      	pop	{r4, pc}
1000a4d6:	46c0      	nop			; (mov r8, r8)
1000a4d8:	1001888c 	.word	0x1001888c
1000a4dc:	1000bfb5 	.word	0x1000bfb5
1000a4e0:	1000c011 	.word	0x1000c011

1000a4e4 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a4e4:	b510      	push	{r4, lr}
1000a4e6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a4e8:	466b      	mov	r3, sp
1000a4ea:	1dda      	adds	r2, r3, #7
1000a4ec:	2300      	movs	r3, #0
1000a4ee:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a4f0:	4c09      	ldr	r4, [pc, #36]	; (1000a518 <sms_button_define_services+0x34>)
1000a4f2:	0021      	movs	r1, r4
1000a4f4:	2000      	movs	r0, #0
1000a4f6:	4b09      	ldr	r3, [pc, #36]	; (1000a51c <sms_button_define_services+0x38>)
1000a4f8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a4fa:	0020      	movs	r0, r4
1000a4fc:	4b08      	ldr	r3, [pc, #32]	; (1000a520 <sms_button_define_services+0x3c>)
1000a4fe:	4798      	blx	r3
1000a500:	1e04      	subs	r4, r0, #0
1000a502:	d006      	beq.n	1000a512 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a504:	4807      	ldr	r0, [pc, #28]	; (1000a524 <sms_button_define_services+0x40>)
1000a506:	4b08      	ldr	r3, [pc, #32]	; (1000a528 <sms_button_define_services+0x44>)
1000a508:	4798      	blx	r3
1000a50a:	0021      	movs	r1, r4
1000a50c:	4807      	ldr	r0, [pc, #28]	; (1000a52c <sms_button_define_services+0x48>)
1000a50e:	4b08      	ldr	r3, [pc, #32]	; (1000a530 <sms_button_define_services+0x4c>)
1000a510:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
1000a512:	b002      	add	sp, #8
1000a514:	bd10      	pop	{r4, pc}
1000a516:	46c0      	nop			; (mov r8, r8)
1000a518:	1001889c 	.word	0x1001889c
1000a51c:	1000a0f1 	.word	0x1000a0f1
1000a520:	1000a0cd 	.word	0x1000a0cd
1000a524:	100157dc 	.word	0x100157dc
1000a528:	10014631 	.word	0x10014631
1000a52c:	10015cec 	.word	0x10015cec
1000a530:	10014511 	.word	0x10014511

1000a534 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a534:	b510      	push	{r4, lr}
1000a536:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a538:	ac01      	add	r4, sp, #4
1000a53a:	0020      	movs	r0, r4
1000a53c:	4b15      	ldr	r3, [pc, #84]	; (1000a594 <sms_monitor_configure_gpio+0x60>)
1000a53e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a540:	2301      	movs	r3, #1
1000a542:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a544:	0021      	movs	r1, r4
1000a546:	200e      	movs	r0, #14
1000a548:	4b13      	ldr	r3, [pc, #76]	; (1000a598 <sms_monitor_configure_gpio+0x64>)
1000a54a:	4798      	blx	r3
1000a54c:	2800      	cmp	r0, #0
1000a54e:	d005      	beq.n	1000a55c <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a550:	4812      	ldr	r0, [pc, #72]	; (1000a59c <sms_monitor_configure_gpio+0x68>)
1000a552:	4b13      	ldr	r3, [pc, #76]	; (1000a5a0 <sms_monitor_configure_gpio+0x6c>)
1000a554:	4798      	blx	r3
1000a556:	4813      	ldr	r0, [pc, #76]	; (1000a5a4 <sms_monitor_configure_gpio+0x70>)
1000a558:	4b13      	ldr	r3, [pc, #76]	; (1000a5a8 <sms_monitor_configure_gpio+0x74>)
1000a55a:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a55c:	2100      	movs	r1, #0
1000a55e:	200e      	movs	r0, #14
1000a560:	4b12      	ldr	r3, [pc, #72]	; (1000a5ac <sms_monitor_configure_gpio+0x78>)
1000a562:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
1000a564:	ac01      	add	r4, sp, #4
1000a566:	0020      	movs	r0, r4
1000a568:	4b0a      	ldr	r3, [pc, #40]	; (1000a594 <sms_monitor_configure_gpio+0x60>)
1000a56a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a56c:	2301      	movs	r3, #1
1000a56e:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000a570:	0021      	movs	r1, r4
1000a572:	200f      	movs	r0, #15
1000a574:	4b08      	ldr	r3, [pc, #32]	; (1000a598 <sms_monitor_configure_gpio+0x64>)
1000a576:	4798      	blx	r3
1000a578:	2800      	cmp	r0, #0
1000a57a:	d005      	beq.n	1000a588 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
1000a57c:	4807      	ldr	r0, [pc, #28]	; (1000a59c <sms_monitor_configure_gpio+0x68>)
1000a57e:	4b08      	ldr	r3, [pc, #32]	; (1000a5a0 <sms_monitor_configure_gpio+0x6c>)
1000a580:	4798      	blx	r3
1000a582:	4808      	ldr	r0, [pc, #32]	; (1000a5a4 <sms_monitor_configure_gpio+0x70>)
1000a584:	4b08      	ldr	r3, [pc, #32]	; (1000a5a8 <sms_monitor_configure_gpio+0x74>)
1000a586:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000a588:	2100      	movs	r1, #0
1000a58a:	200f      	movs	r0, #15
1000a58c:	4b07      	ldr	r3, [pc, #28]	; (1000a5ac <sms_monitor_configure_gpio+0x78>)
1000a58e:	4798      	blx	r3
}
1000a590:	b002      	add	sp, #8
1000a592:	bd10      	pop	{r4, pc}
1000a594:	1000baa5 	.word	0x1000baa5
1000a598:	1000bab5 	.word	0x1000bab5
1000a59c:	100157dc 	.word	0x100157dc
1000a5a0:	10014631 	.word	0x10014631
1000a5a4:	10015d30 	.word	0x10015d30
1000a5a8:	10014511 	.word	0x10014511
1000a5ac:	1000bd0d 	.word	0x1000bd0d

1000a5b0 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a5b0:	4b04      	ldr	r3, [pc, #16]	; (1000a5c4 <sms_monitor_get_states+0x14>)
1000a5b2:	781b      	ldrb	r3, [r3, #0]
1000a5b4:	4b04      	ldr	r3, [pc, #16]	; (1000a5c8 <sms_monitor_get_states+0x18>)
1000a5b6:	781b      	ldrb	r3, [r3, #0]
1000a5b8:	4b04      	ldr	r3, [pc, #16]	; (1000a5cc <sms_monitor_get_states+0x1c>)
1000a5ba:	781b      	ldrb	r3, [r3, #0]
1000a5bc:	4b04      	ldr	r3, [pc, #16]	; (1000a5d0 <sms_monitor_get_states+0x20>)
1000a5be:	781b      	ldrb	r3, [r3, #0]
}
1000a5c0:	4770      	bx	lr
1000a5c2:	46c0      	nop			; (mov r8, r8)
1000a5c4:	10018888 	.word	0x10018888
1000a5c8:	100187f0 	.word	0x100187f0
1000a5cc:	100189ab 	.word	0x100189ab
1000a5d0:	10018884 	.word	0x10018884

1000a5d4 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a5d4:	b530      	push	{r4, r5, lr}
1000a5d6:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a5d8:	2010      	movs	r0, #16
1000a5da:	4c14      	ldr	r4, [pc, #80]	; (1000a62c <sms_i2c_master_configure+0x58>)
1000a5dc:	47a0      	blx	r4
1000a5de:	4b14      	ldr	r3, [pc, #80]	; (1000a630 <sms_i2c_master_configure+0x5c>)
1000a5e0:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a5e2:	2010      	movs	r0, #16
1000a5e4:	47a0      	blx	r4
1000a5e6:	4b13      	ldr	r3, [pc, #76]	; (1000a634 <sms_i2c_master_configure+0x60>)
1000a5e8:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a5ea:	ac01      	add	r4, sp, #4
1000a5ec:	0020      	movs	r0, r4
1000a5ee:	4b12      	ldr	r3, [pc, #72]	; (1000a638 <sms_i2c_master_configure+0x64>)
1000a5f0:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a5f2:	2303      	movs	r3, #3
1000a5f4:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a5f6:	331b      	adds	r3, #27
1000a5f8:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a5fa:	3b16      	subs	r3, #22
1000a5fc:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a5fe:	3301      	adds	r3, #1
1000a600:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a602:	3b07      	subs	r3, #7
1000a604:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a606:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a608:	4d0c      	ldr	r5, [pc, #48]	; (1000a63c <sms_i2c_master_configure+0x68>)
1000a60a:	4c0d      	ldr	r4, [pc, #52]	; (1000a640 <sms_i2c_master_configure+0x6c>)
1000a60c:	aa01      	add	r2, sp, #4
1000a60e:	490d      	ldr	r1, [pc, #52]	; (1000a644 <sms_i2c_master_configure+0x70>)
1000a610:	0028      	movs	r0, r5
1000a612:	47a0      	blx	r4
1000a614:	2800      	cmp	r0, #0
1000a616:	d1f9      	bne.n	1000a60c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a618:	4b08      	ldr	r3, [pc, #32]	; (1000a63c <sms_i2c_master_configure+0x68>)
1000a61a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a61c:	2128      	movs	r1, #40	; 0x28
1000a61e:	5c53      	ldrb	r3, [r2, r1]
1000a620:	07db      	lsls	r3, r3, #31
1000a622:	d4fc      	bmi.n	1000a61e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a624:	2301      	movs	r3, #1
1000a626:	7513      	strb	r3, [r2, #20]
}
1000a628:	b007      	add	sp, #28
1000a62a:	bd30      	pop	{r4, r5, pc}
1000a62c:	10014385 	.word	0x10014385
1000a630:	100189b0 	.word	0x100189b0
1000a634:	10018994 	.word	0x10018994
1000a638:	1000838d 	.word	0x1000838d
1000a63c:	100189a0 	.word	0x100189a0
1000a640:	100083a5 	.word	0x100083a5
1000a644:	40003000 	.word	0x40003000

1000a648 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a64a:	4c12      	ldr	r4, [pc, #72]	; (1000a694 <sms_i2c_master_write+0x4c>)
1000a64c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a64e:	1c50      	adds	r0, r2, #1
1000a650:	b2c0      	uxtb	r0, r0
1000a652:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a654:	6860      	ldr	r0, [r4, #4]
1000a656:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a658:	2a00      	cmp	r2, #0
1000a65a:	d00e      	beq.n	1000a67a <sms_i2c_master_write+0x32>
1000a65c:	2000      	movs	r0, #0
1000a65e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a660:	5c18      	ldrb	r0, [r3, r0]
1000a662:	6865      	ldr	r5, [r4, #4]
1000a664:	5468      	strb	r0, [r5, r1]
1000a666:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a668:	b2c9      	uxtb	r1, r1
1000a66a:	428a      	cmp	r2, r1
1000a66c:	d8f7      	bhi.n	1000a65e <sms_i2c_master_write+0x16>
1000a66e:	e004      	b.n	1000a67a <sms_i2c_master_write+0x32>
1000a670:	3c01      	subs	r4, #1
1000a672:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a674:	2c00      	cmp	r4, #0
1000a676:	d104      	bne.n	1000a682 <sms_i2c_master_write+0x3a>
1000a678:	e009      	b.n	1000a68e <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a67a:	4c07      	ldr	r4, [pc, #28]	; (1000a698 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a67c:	4e05      	ldr	r6, [pc, #20]	; (1000a694 <sms_i2c_master_write+0x4c>)
1000a67e:	4d07      	ldr	r5, [pc, #28]	; (1000a69c <sms_i2c_master_write+0x54>)
1000a680:	4f07      	ldr	r7, [pc, #28]	; (1000a6a0 <sms_i2c_master_write+0x58>)
1000a682:	0031      	movs	r1, r6
1000a684:	0028      	movs	r0, r5
1000a686:	47b8      	blx	r7
1000a688:	2800      	cmp	r0, #0
1000a68a:	d1f1      	bne.n	1000a670 <sms_i2c_master_write+0x28>
1000a68c:	e001      	b.n	1000a692 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a68e:	2001      	movs	r0, #1
1000a690:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a694:	100189b0 	.word	0x100189b0
1000a698:	000003e9 	.word	0x000003e9
1000a69c:	100189a0 	.word	0x100189a0
1000a6a0:	1000843d 	.word	0x1000843d

1000a6a4 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6a6:	4647      	mov	r7, r8
1000a6a8:	b480      	push	{r7}
1000a6aa:	0017      	movs	r7, r2
1000a6ac:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a6ae:	b280      	uxth	r0, r0
1000a6b0:	4b1d      	ldr	r3, [pc, #116]	; (1000a728 <sms_i2c_master_read+0x84>)
1000a6b2:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a6b4:	2201      	movs	r2, #1
1000a6b6:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a6b8:	685b      	ldr	r3, [r3, #4]
1000a6ba:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a6bc:	4b1b      	ldr	r3, [pc, #108]	; (1000a72c <sms_i2c_master_read+0x88>)
1000a6be:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a6c0:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a6c2:	4c1b      	ldr	r4, [pc, #108]	; (1000a730 <sms_i2c_master_read+0x8c>)
1000a6c4:	4e18      	ldr	r6, [pc, #96]	; (1000a728 <sms_i2c_master_read+0x84>)
1000a6c6:	4d1b      	ldr	r5, [pc, #108]	; (1000a734 <sms_i2c_master_read+0x90>)
1000a6c8:	e003      	b.n	1000a6d2 <sms_i2c_master_read+0x2e>
1000a6ca:	3c01      	subs	r4, #1
1000a6cc:	b2a4      	uxth	r4, r4
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000a6ce:	2c00      	cmp	r4, #0
1000a6d0:	d01f      	beq.n	1000a712 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a6d2:	0031      	movs	r1, r6
1000a6d4:	4818      	ldr	r0, [pc, #96]	; (1000a738 <sms_i2c_master_read+0x94>)
1000a6d6:	47a8      	blx	r5
1000a6d8:	2800      	cmp	r0, #0
1000a6da:	d1f6      	bne.n	1000a6ca <sms_i2c_master_read+0x26>
1000a6dc:	4e14      	ldr	r6, [pc, #80]	; (1000a730 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a6de:	4d13      	ldr	r5, [pc, #76]	; (1000a72c <sms_i2c_master_read+0x88>)
1000a6e0:	4c16      	ldr	r4, [pc, #88]	; (1000a73c <sms_i2c_master_read+0x98>)
1000a6e2:	e003      	b.n	1000a6ec <sms_i2c_master_read+0x48>
1000a6e4:	3e01      	subs	r6, #1
1000a6e6:	b2b6      	uxth	r6, r6
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000a6e8:	2e00      	cmp	r6, #0
1000a6ea:	d015      	beq.n	1000a718 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a6ec:	0029      	movs	r1, r5
1000a6ee:	4812      	ldr	r0, [pc, #72]	; (1000a738 <sms_i2c_master_read+0x94>)
1000a6f0:	47a0      	blx	r4
1000a6f2:	2800      	cmp	r0, #0
1000a6f4:	d1f6      	bne.n	1000a6e4 <sms_i2c_master_read+0x40>
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a6f6:	2f00      	cmp	r7, #0
1000a6f8:	d011      	beq.n	1000a71e <sms_i2c_master_read+0x7a>
1000a6fa:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000a6fc:	490b      	ldr	r1, [pc, #44]	; (1000a72c <sms_i2c_master_read+0x88>)
1000a6fe:	684a      	ldr	r2, [r1, #4]
1000a700:	5cd2      	ldrb	r2, [r2, r3]
1000a702:	4640      	mov	r0, r8
1000a704:	54c2      	strb	r2, [r0, r3]
1000a706:	3301      	adds	r3, #1
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a708:	b2da      	uxtb	r2, r3
1000a70a:	4297      	cmp	r7, r2
1000a70c:	d8f7      	bhi.n	1000a6fe <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a70e:	2000      	movs	r0, #0
1000a710:	e006      	b.n	1000a720 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a712:	2001      	movs	r0, #1
1000a714:	4240      	negs	r0, r0
1000a716:	e003      	b.n	1000a720 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a718:	2001      	movs	r0, #1
1000a71a:	4240      	negs	r0, r0
1000a71c:	e000      	b.n	1000a720 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000a71e:	2000      	movs	r0, #0
1000a720:	bc04      	pop	{r2}
1000a722:	4690      	mov	r8, r2
1000a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a726:	46c0      	nop			; (mov r8, r8)
1000a728:	100189b0 	.word	0x100189b0
1000a72c:	10018994 	.word	0x10018994
1000a730:	000003e9 	.word	0x000003e9
1000a734:	10008461 	.word	0x10008461
1000a738:	100189a0 	.word	0x100189a0
1000a73c:	10008419 	.word	0x10008419

1000a740 <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000a740:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
1000a742:	2328      	movs	r3, #40	; 0x28
1000a744:	4a06      	ldr	r2, [pc, #24]	; (1000a760 <sms_mpu_interrupt_callback+0x20>)
1000a746:	5cd3      	ldrb	r3, [r2, r3]
1000a748:	2b00      	cmp	r3, #0
1000a74a:	d008      	beq.n	1000a75e <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
1000a74c:	2101      	movs	r1, #1
1000a74e:	2329      	movs	r3, #41	; 0x29
1000a750:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000a752:	2300      	movs	r3, #0
1000a754:	2200      	movs	r2, #0
1000a756:	3101      	adds	r1, #1
1000a758:	201e      	movs	r0, #30
1000a75a:	4c02      	ldr	r4, [pc, #8]	; (1000a764 <sms_mpu_interrupt_callback+0x24>)
1000a75c:	47a0      	blx	r4
	}
}
1000a75e:	bd10      	pop	{r4, pc}
1000a760:	100187f4 	.word	0x100187f4
1000a764:	1000e9d1 	.word	0x1000e9d1

1000a768 <sms_mpu_configure_gpio>:
#include "sms_mpu.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000a768:	b510      	push	{r4, lr}
1000a76a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000a76c:	ac01      	add	r4, sp, #4
1000a76e:	0020      	movs	r0, r4
1000a770:	4b0a      	ldr	r3, [pc, #40]	; (1000a79c <sms_mpu_configure_gpio+0x34>)
1000a772:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a774:	2300      	movs	r3, #0
1000a776:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a778:	3302      	adds	r3, #2
1000a77a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a77c:	3b01      	subs	r3, #1
1000a77e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000a780:	0021      	movs	r1, r4
1000a782:	201e      	movs	r0, #30
1000a784:	4b06      	ldr	r3, [pc, #24]	; (1000a7a0 <sms_mpu_configure_gpio+0x38>)
1000a786:	4798      	blx	r3
1000a788:	2800      	cmp	r0, #0
1000a78a:	d005      	beq.n	1000a798 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000a78c:	4805      	ldr	r0, [pc, #20]	; (1000a7a4 <sms_mpu_configure_gpio+0x3c>)
1000a78e:	4b06      	ldr	r3, [pc, #24]	; (1000a7a8 <sms_mpu_configure_gpio+0x40>)
1000a790:	4798      	blx	r3
1000a792:	4806      	ldr	r0, [pc, #24]	; (1000a7ac <sms_mpu_configure_gpio+0x44>)
1000a794:	4b06      	ldr	r3, [pc, #24]	; (1000a7b0 <sms_mpu_configure_gpio+0x48>)
1000a796:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
1000a798:	b002      	add	sp, #8
1000a79a:	bd10      	pop	{r4, pc}
1000a79c:	1000baa5 	.word	0x1000baa5
1000a7a0:	1000bab5 	.word	0x1000bab5
1000a7a4:	100157dc 	.word	0x100157dc
1000a7a8:	10014631 	.word	0x10014631
1000a7ac:	10015d50 	.word	0x10015d50
1000a7b0:	10014511 	.word	0x10014511

1000a7b4 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000a7b4:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000a7b6:	2202      	movs	r2, #2
1000a7b8:	4902      	ldr	r1, [pc, #8]	; (1000a7c4 <sms_mpu_register_callbacks+0x10>)
1000a7ba:	201e      	movs	r0, #30
1000a7bc:	4b02      	ldr	r3, [pc, #8]	; (1000a7c8 <sms_mpu_register_callbacks+0x14>)
1000a7be:	4798      	blx	r3
}
1000a7c0:	bd10      	pop	{r4, pc}
1000a7c2:	46c0      	nop			; (mov r8, r8)
1000a7c4:	1000a741 	.word	0x1000a741
1000a7c8:	1000bee5 	.word	0x1000bee5

1000a7cc <sms_mpu_initialize>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_initialize(void) {
1000a7cc:	b570      	push	{r4, r5, r6, lr}
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
    res = mpu_init(NULL);
1000a7ce:	2000      	movs	r0, #0
1000a7d0:	4b20      	ldr	r3, [pc, #128]	; (1000a854 <sms_mpu_initialize+0x88>)
1000a7d2:	4798      	blx	r3
    if(res) {
1000a7d4:	2800      	cmp	r0, #0
1000a7d6:	d13a      	bne.n	1000a84e <sms_mpu_initialize+0x82>
        DBG_LOG_CONT_DEV(" failed!");
        return -1;
    }
    DBG_LOG_DEV("Setting up MPU...");
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000a7d8:	3079      	adds	r0, #121	; 0x79
1000a7da:	4b1f      	ldr	r3, [pc, #124]	; (1000a858 <sms_mpu_initialize+0x8c>)
1000a7dc:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000a7de:	2078      	movs	r0, #120	; 0x78
1000a7e0:	4b1e      	ldr	r3, [pc, #120]	; (1000a85c <sms_mpu_initialize+0x90>)
1000a7e2:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a7e4:	2032      	movs	r0, #50	; 0x32
1000a7e6:	4b1e      	ldr	r3, [pc, #120]	; (1000a860 <sms_mpu_initialize+0x94>)
1000a7e8:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000a7ea:	2032      	movs	r0, #50	; 0x32
1000a7ec:	4b1d      	ldr	r3, [pc, #116]	; (1000a864 <sms_mpu_initialize+0x98>)
1000a7ee:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000a7f0:	4d1d      	ldr	r5, [pc, #116]	; (1000a868 <sms_mpu_initialize+0x9c>)
1000a7f2:	0028      	movs	r0, r5
1000a7f4:	4b1d      	ldr	r3, [pc, #116]	; (1000a86c <sms_mpu_initialize+0xa0>)
1000a7f6:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000a7f8:	1f68      	subs	r0, r5, #5
1000a7fa:	4b1d      	ldr	r3, [pc, #116]	; (1000a870 <sms_mpu_initialize+0xa4>)
1000a7fc:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000a7fe:	1ea8      	subs	r0, r5, #2
1000a800:	4b1c      	ldr	r3, [pc, #112]	; (1000a874 <sms_mpu_initialize+0xa8>)
1000a802:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000a804:	1fac      	subs	r4, r5, #6
1000a806:	2307      	movs	r3, #7
1000a808:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000a80a:	20f0      	movs	r0, #240	; 0xf0
1000a80c:	0040      	lsls	r0, r0, #1
1000a80e:	83e8      	strh	r0, [r5, #30]
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000a810:	4b19      	ldr	r3, [pc, #100]	; (1000a878 <sms_mpu_initialize+0xac>)
1000a812:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000a814:	2032      	movs	r0, #50	; 0x32
1000a816:	4b19      	ldr	r3, [pc, #100]	; (1000a87c <sms_mpu_initialize+0xb0>)
1000a818:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000a81a:	2001      	movs	r0, #1
1000a81c:	4b18      	ldr	r3, [pc, #96]	; (1000a880 <sms_mpu_initialize+0xb4>)
1000a81e:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000a820:	2301      	movs	r3, #1
1000a822:	2222      	movs	r2, #34	; 0x22
1000a824:	54a3      	strb	r3, [r4, r2]
	mpu_device.int_enabled = true;
1000a826:	3206      	adds	r2, #6
1000a828:	54a3      	strb	r3, [r4, r2]
	mpu_device.new_int = false;
1000a82a:	2300      	movs	r3, #0
1000a82c:	3201      	adds	r2, #1
1000a82e:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000a830:	3201      	adds	r2, #1
1000a832:	54a3      	strb	r3, [r4, r2]
    mpu_device.temp_cnt = 0;
1000a834:	3201      	adds	r2, #1
1000a836:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000a838:	3201      	adds	r2, #1
1000a83a:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000a83c:	3201      	adds	r2, #1
1000a83e:	54a3      	strb	r3, [r4, r2]
	mpu_device.rts = false;
1000a840:	3201      	adds	r2, #1
1000a842:	54a3      	strb	r3, [r4, r2]
	mpu_device.state = MPU_STATE_ON;
1000a844:	3a2c      	subs	r2, #44	; 0x2c
1000a846:	332f      	adds	r3, #47	; 0x2f
1000a848:	54e2      	strb	r2, [r4, r3]
    
    return 0;
1000a84a:	2000      	movs	r0, #0
1000a84c:	e001      	b.n	1000a852 <sms_mpu_initialize+0x86>
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
    res = mpu_init(NULL);
    if(res) {
        DBG_LOG_CONT_DEV(" failed!");
        return -1;
1000a84e:	2001      	movs	r0, #1
1000a850:	4240      	negs	r0, r0
    mpu_device.new_temp = false;
	mpu_device.rts = false;
	mpu_device.state = MPU_STATE_ON;
    
    return 0;
}
1000a852:	bd70      	pop	{r4, r5, r6, pc}
1000a854:	10009091 	.word	0x10009091
1000a858:	10008ea9 	.word	0x10008ea9
1000a85c:	10008a31 	.word	0x10008a31
1000a860:	10008dd5 	.word	0x10008dd5
1000a864:	100089b9 	.word	0x100089b9
1000a868:	100187fa 	.word	0x100187fa
1000a86c:	1000899d 	.word	0x1000899d
1000a870:	10008801 	.word	0x10008801
1000a874:	100094dd 	.word	0x100094dd
1000a878:	1000994d 	.word	0x1000994d
1000a87c:	100094ed 	.word	0x100094ed
1000a880:	10009439 	.word	0x10009439

1000a884 <sms_mpu_define_services>:

    return 0;
}

void sms_mpu_define_services(void)
{
1000a884:	b510      	push	{r4, lr}
1000a886:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a888:	466b      	mov	r3, sp
1000a88a:	1dda      	adds	r2, r3, #7
1000a88c:	2300      	movs	r3, #0
1000a88e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
1000a890:	4c09      	ldr	r4, [pc, #36]	; (1000a8b8 <sms_mpu_define_services+0x34>)
1000a892:	0021      	movs	r1, r4
1000a894:	2002      	movs	r0, #2
1000a896:	4b09      	ldr	r3, [pc, #36]	; (1000a8bc <sms_mpu_define_services+0x38>)
1000a898:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
1000a89a:	0020      	movs	r0, r4
1000a89c:	4b08      	ldr	r3, [pc, #32]	; (1000a8c0 <sms_mpu_define_services+0x3c>)
1000a89e:	4798      	blx	r3
1000a8a0:	1e04      	subs	r4, r0, #0
1000a8a2:	d006      	beq.n	1000a8b2 <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000a8a4:	4807      	ldr	r0, [pc, #28]	; (1000a8c4 <sms_mpu_define_services+0x40>)
1000a8a6:	4b08      	ldr	r3, [pc, #32]	; (1000a8c8 <sms_mpu_define_services+0x44>)
1000a8a8:	4798      	blx	r3
1000a8aa:	0021      	movs	r1, r4
1000a8ac:	4807      	ldr	r0, [pc, #28]	; (1000a8cc <sms_mpu_define_services+0x48>)
1000a8ae:	4b08      	ldr	r3, [pc, #32]	; (1000a8d0 <sms_mpu_define_services+0x4c>)
1000a8b0:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
1000a8b2:	b002      	add	sp, #8
1000a8b4:	bd10      	pop	{r4, pc}
1000a8b6:	46c0      	nop			; (mov r8, r8)
1000a8b8:	10018824 	.word	0x10018824
1000a8bc:	1000a0f1 	.word	0x1000a0f1
1000a8c0:	1000a0cd 	.word	0x1000a0cd
1000a8c4:	100157dc 	.word	0x100157dc
1000a8c8:	10014631 	.word	0x10014631
1000a8cc:	10015d90 	.word	0x10015d90
1000a8d0:	10014511 	.word	0x10014511

1000a8d4 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a8d4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a8d6:	2100      	movs	r1, #0
1000a8d8:	4b01      	ldr	r3, [pc, #4]	; (1000a8e0 <sms_led_switch_on+0xc>)
1000a8da:	4798      	blx	r3
}
1000a8dc:	bd10      	pop	{r4, pc}
1000a8de:	46c0      	nop			; (mov r8, r8)
1000a8e0:	1000bd0d 	.word	0x1000bd0d

1000a8e4 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a8e4:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a8e6:	2101      	movs	r1, #1
1000a8e8:	4b01      	ldr	r3, [pc, #4]	; (1000a8f0 <sms_led_switch_off+0xc>)
1000a8ea:	4798      	blx	r3
}
1000a8ec:	bd10      	pop	{r4, pc}
1000a8ee:	46c0      	nop			; (mov r8, r8)
1000a8f0:	1000bd0d 	.word	0x1000bd0d

1000a8f4 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a8f4:	b510      	push	{r4, lr}
1000a8f6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a8f8:	ac01      	add	r4, sp, #4
1000a8fa:	0020      	movs	r0, r4
1000a8fc:	4b06      	ldr	r3, [pc, #24]	; (1000a918 <sms_led_gpio_init+0x24>)
1000a8fe:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a900:	2301      	movs	r3, #1
1000a902:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a904:	0021      	movs	r1, r4
1000a906:	2016      	movs	r0, #22
1000a908:	4b04      	ldr	r3, [pc, #16]	; (1000a91c <sms_led_gpio_init+0x28>)
1000a90a:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a90c:	2016      	movs	r0, #22
1000a90e:	4b04      	ldr	r3, [pc, #16]	; (1000a920 <sms_led_gpio_init+0x2c>)
1000a910:	4798      	blx	r3
}
1000a912:	b002      	add	sp, #8
1000a914:	bd10      	pop	{r4, pc}
1000a916:	46c0      	nop			; (mov r8, r8)
1000a918:	1000baa5 	.word	0x1000baa5
1000a91c:	1000bab5 	.word	0x1000bab5
1000a920:	1000a8e5 	.word	0x1000a8e5

1000a924 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000a924:	b510      	push	{r4, lr}
1000a926:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a928:	4b05      	ldr	r3, [pc, #20]	; (1000a940 <sms_led_toggle+0x1c>)
1000a92a:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a92c:	2800      	cmp	r0, #0
1000a92e:	d103      	bne.n	1000a938 <sms_led_toggle+0x14>
1000a930:	0020      	movs	r0, r4
1000a932:	4b04      	ldr	r3, [pc, #16]	; (1000a944 <sms_led_toggle+0x20>)
1000a934:	4798      	blx	r3
1000a936:	e002      	b.n	1000a93e <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a938:	0020      	movs	r0, r4
1000a93a:	4b03      	ldr	r3, [pc, #12]	; (1000a948 <sms_led_toggle+0x24>)
1000a93c:	4798      	blx	r3
}
1000a93e:	bd10      	pop	{r4, pc}
1000a940:	1000bcbd 	.word	0x1000bcbd
1000a944:	1000a8e5 	.word	0x1000a8e5
1000a948:	1000a8d5 	.word	0x1000a8d5

1000a94c <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a94c:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a94e:	4b0c      	ldr	r3, [pc, #48]	; (1000a980 <sms_led_blink_start+0x34>)
1000a950:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a952:	2200      	movs	r2, #0
1000a954:	4b0b      	ldr	r3, [pc, #44]	; (1000a984 <sms_led_blink_start+0x38>)
1000a956:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a958:	4b0b      	ldr	r3, [pc, #44]	; (1000a988 <sms_led_blink_start+0x3c>)
1000a95a:	781b      	ldrb	r3, [r3, #0]
1000a95c:	b2db      	uxtb	r3, r3
1000a95e:	2b02      	cmp	r3, #2
1000a960:	d002      	beq.n	1000a968 <sms_led_blink_start+0x1c>
1000a962:	2b03      	cmp	r3, #3
1000a964:	d002      	beq.n	1000a96c <sms_led_blink_start+0x20>
1000a966:	e004      	b.n	1000a972 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a968:	2164      	movs	r1, #100	; 0x64
1000a96a:	e003      	b.n	1000a974 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a96c:	21c8      	movs	r1, #200	; 0xc8
1000a96e:	0049      	lsls	r1, r1, #1
        break;
1000a970:	e000      	b.n	1000a974 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a972:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a974:	2201      	movs	r2, #1
1000a976:	2001      	movs	r0, #1
1000a978:	4b04      	ldr	r3, [pc, #16]	; (1000a98c <sms_led_blink_start+0x40>)
1000a97a:	4798      	blx	r3
}
1000a97c:	bd10      	pop	{r4, pc}
1000a97e:	46c0      	nop			; (mov r8, r8)
1000a980:	1000a8d5 	.word	0x1000a8d5
1000a984:	100189cc 	.word	0x100189cc
1000a988:	100189ab 	.word	0x100189ab
1000a98c:	1000b061 	.word	0x1000b061

1000a990 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000a990:	4b06      	ldr	r3, [pc, #24]	; (1000a9ac <sms_pressure_init_variables+0x1c>)
1000a992:	2200      	movs	r2, #0
1000a994:	2125      	movs	r1, #37	; 0x25
1000a996:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000a998:	3106      	adds	r1, #6
1000a99a:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000a99c:	3901      	subs	r1, #1
1000a99e:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000a9a0:	3902      	subs	r1, #2
1000a9a2:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000a9a4:	3101      	adds	r1, #1
1000a9a6:	545a      	strb	r2, [r3, r1]
}
1000a9a8:	4770      	bx	lr
1000a9aa:	46c0      	nop			; (mov r8, r8)
1000a9ac:	10018910 	.word	0x10018910

1000a9b0 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a9b0:	b510      	push	{r4, lr}
1000a9b2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a9b4:	4a05      	ldr	r2, [pc, #20]	; (1000a9cc <sms_pressure_ms58_reset+0x1c>)
1000a9b6:	231e      	movs	r3, #30
1000a9b8:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a9ba:	3b1d      	subs	r3, #29
1000a9bc:	9300      	str	r3, [sp, #0]
1000a9be:	4b04      	ldr	r3, [pc, #16]	; (1000a9d0 <sms_pressure_ms58_reset+0x20>)
1000a9c0:	4904      	ldr	r1, [pc, #16]	; (1000a9d4 <sms_pressure_ms58_reset+0x24>)
1000a9c2:	4805      	ldr	r0, [pc, #20]	; (1000a9d8 <sms_pressure_ms58_reset+0x28>)
1000a9c4:	4c05      	ldr	r4, [pc, #20]	; (1000a9dc <sms_pressure_ms58_reset+0x2c>)
1000a9c6:	47a0      	blx	r4
}
1000a9c8:	b002      	add	sp, #8
1000a9ca:	bd10      	pop	{r4, pc}
1000a9cc:	10018900 	.word	0x10018900
1000a9d0:	100188ec 	.word	0x100188ec
1000a9d4:	100189ac 	.word	0x100189ac
1000a9d8:	100189b8 	.word	0x100189b8
1000a9dc:	1000af39 	.word	0x1000af39

1000a9e0 <sms_pressure_ms58_read_prom>:
		}
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9e2:	4657      	mov	r7, sl
1000a9e4:	b480      	push	{r7}
1000a9e6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a9e8:	4d37      	ldr	r5, [pc, #220]	; (1000aac8 <sms_pressure_ms58_read_prom+0xe8>)
1000a9ea:	23a2      	movs	r3, #162	; 0xa2
1000a9ec:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000a9ee:	2300      	movs	r3, #0
1000a9f0:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000a9f2:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a9f4:	4c35      	ldr	r4, [pc, #212]	; (1000aacc <sms_pressure_ms58_read_prom+0xec>)
1000a9f6:	3303      	adds	r3, #3
1000a9f8:	469a      	mov	sl, r3
1000a9fa:	9300      	str	r3, [sp, #0]
1000a9fc:	0023      	movs	r3, r4
1000a9fe:	002a      	movs	r2, r5
1000aa00:	4933      	ldr	r1, [pc, #204]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa02:	4834      	ldr	r0, [pc, #208]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa04:	4f34      	ldr	r7, [pc, #208]	; (1000aad8 <sms_pressure_ms58_read_prom+0xf8>)
1000aa06:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa08:	4e34      	ldr	r6, [pc, #208]	; (1000aadc <sms_pressure_ms58_read_prom+0xfc>)
1000aa0a:	7863      	ldrb	r3, [r4, #1]
1000aa0c:	021b      	lsls	r3, r3, #8
1000aa0e:	78a2      	ldrb	r2, [r4, #2]
1000aa10:	4313      	orrs	r3, r2
1000aa12:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000aa14:	23a4      	movs	r3, #164	; 0xa4
1000aa16:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa18:	4653      	mov	r3, sl
1000aa1a:	9300      	str	r3, [sp, #0]
1000aa1c:	0023      	movs	r3, r4
1000aa1e:	002a      	movs	r2, r5
1000aa20:	492b      	ldr	r1, [pc, #172]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa22:	482c      	ldr	r0, [pc, #176]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa24:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa26:	7863      	ldrb	r3, [r4, #1]
1000aa28:	021b      	lsls	r3, r3, #8
1000aa2a:	78a2      	ldrb	r2, [r4, #2]
1000aa2c:	4313      	orrs	r3, r2
1000aa2e:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000aa30:	23a6      	movs	r3, #166	; 0xa6
1000aa32:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa34:	4653      	mov	r3, sl
1000aa36:	9300      	str	r3, [sp, #0]
1000aa38:	0023      	movs	r3, r4
1000aa3a:	002a      	movs	r2, r5
1000aa3c:	4924      	ldr	r1, [pc, #144]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa3e:	4825      	ldr	r0, [pc, #148]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa40:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa42:	7863      	ldrb	r3, [r4, #1]
1000aa44:	021b      	lsls	r3, r3, #8
1000aa46:	78a2      	ldrb	r2, [r4, #2]
1000aa48:	4313      	orrs	r3, r2
1000aa4a:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000aa4c:	23a8      	movs	r3, #168	; 0xa8
1000aa4e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa50:	4653      	mov	r3, sl
1000aa52:	9300      	str	r3, [sp, #0]
1000aa54:	0023      	movs	r3, r4
1000aa56:	002a      	movs	r2, r5
1000aa58:	491d      	ldr	r1, [pc, #116]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa5a:	481e      	ldr	r0, [pc, #120]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa5c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa5e:	7863      	ldrb	r3, [r4, #1]
1000aa60:	021b      	lsls	r3, r3, #8
1000aa62:	78a2      	ldrb	r2, [r4, #2]
1000aa64:	4313      	orrs	r3, r2
1000aa66:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000aa68:	23aa      	movs	r3, #170	; 0xaa
1000aa6a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa6c:	4653      	mov	r3, sl
1000aa6e:	9300      	str	r3, [sp, #0]
1000aa70:	0023      	movs	r3, r4
1000aa72:	002a      	movs	r2, r5
1000aa74:	4916      	ldr	r1, [pc, #88]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa76:	4817      	ldr	r0, [pc, #92]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa78:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa7a:	7863      	ldrb	r3, [r4, #1]
1000aa7c:	021b      	lsls	r3, r3, #8
1000aa7e:	78a2      	ldrb	r2, [r4, #2]
1000aa80:	4313      	orrs	r3, r2
1000aa82:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000aa84:	23ac      	movs	r3, #172	; 0xac
1000aa86:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aa88:	4653      	mov	r3, sl
1000aa8a:	9300      	str	r3, [sp, #0]
1000aa8c:	0023      	movs	r3, r4
1000aa8e:	002a      	movs	r2, r5
1000aa90:	490f      	ldr	r1, [pc, #60]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aa92:	4810      	ldr	r0, [pc, #64]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aa94:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aa96:	7863      	ldrb	r3, [r4, #1]
1000aa98:	021b      	lsls	r3, r3, #8
1000aa9a:	78a2      	ldrb	r2, [r4, #2]
1000aa9c:	4313      	orrs	r3, r2
1000aa9e:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000aaa0:	23ae      	movs	r3, #174	; 0xae
1000aaa2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000aaa4:	4653      	mov	r3, sl
1000aaa6:	9300      	str	r3, [sp, #0]
1000aaa8:	0023      	movs	r3, r4
1000aaaa:	002a      	movs	r2, r5
1000aaac:	4908      	ldr	r1, [pc, #32]	; (1000aad0 <sms_pressure_ms58_read_prom+0xf0>)
1000aaae:	4809      	ldr	r0, [pc, #36]	; (1000aad4 <sms_pressure_ms58_read_prom+0xf4>)
1000aab0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000aab2:	7863      	ldrb	r3, [r4, #1]
1000aab4:	021b      	lsls	r3, r3, #8
1000aab6:	78a2      	ldrb	r2, [r4, #2]
1000aab8:	4313      	orrs	r3, r2
1000aaba:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000aabc:	2000      	movs	r0, #0
1000aabe:	b002      	add	sp, #8
1000aac0:	bc04      	pop	{r2}
1000aac2:	4692      	mov	sl, r2
1000aac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aac6:	46c0      	nop			; (mov r8, r8)
1000aac8:	10018900 	.word	0x10018900
1000aacc:	100188ec 	.word	0x100188ec
1000aad0:	100189ac 	.word	0x100189ac
1000aad4:	100189b8 	.word	0x100189b8
1000aad8:	1000af39 	.word	0x1000af39
1000aadc:	10018910 	.word	0x10018910

1000aae0 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000aae0:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000aae2:	4b0a      	ldr	r3, [pc, #40]	; (1000ab0c <sms_pressure_init+0x2c>)
1000aae4:	4798      	blx	r3
1000aae6:	2800      	cmp	r0, #0
1000aae8:	d10d      	bne.n	1000ab06 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000aaea:	4b09      	ldr	r3, [pc, #36]	; (1000ab10 <sms_pressure_init+0x30>)
1000aaec:	2201      	movs	r2, #1
1000aaee:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000aaf0:	2402      	movs	r4, #2
1000aaf2:	2125      	movs	r1, #37	; 0x25
1000aaf4:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000aaf6:	3103      	adds	r1, #3
1000aaf8:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000aafa:	2200      	movs	r2, #0
1000aafc:	3101      	adds	r1, #1
1000aafe:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000ab00:	3101      	adds	r1, #1
1000ab02:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000ab04:	e000      	b.n	1000ab08 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000ab06:	2010      	movs	r0, #16
}
1000ab08:	bd10      	pop	{r4, pc}
1000ab0a:	46c0      	nop			; (mov r8, r8)
1000ab0c:	1000a9e1 	.word	0x1000a9e1
1000ab10:	10018910 	.word	0x10018910

1000ab14 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000ab14:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000ab16:	2101      	movs	r1, #1
1000ab18:	2001      	movs	r0, #1
1000ab1a:	4b10      	ldr	r3, [pc, #64]	; (1000ab5c <sms_pressure_startup+0x48>)
1000ab1c:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000ab1e:	2101      	movs	r1, #1
1000ab20:	2325      	movs	r3, #37	; 0x25
1000ab22:	4a0f      	ldr	r2, [pc, #60]	; (1000ab60 <sms_pressure_startup+0x4c>)
1000ab24:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000ab26:	4b0f      	ldr	r3, [pc, #60]	; (1000ab64 <sms_pressure_startup+0x50>)
1000ab28:	4798      	blx	r3
    delay_ms(3);
1000ab2a:	2003      	movs	r0, #3
1000ab2c:	4b0e      	ldr	r3, [pc, #56]	; (1000ab68 <sms_pressure_startup+0x54>)
1000ab2e:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000ab30:	4b0e      	ldr	r3, [pc, #56]	; (1000ab6c <sms_pressure_startup+0x58>)
1000ab32:	4798      	blx	r3
1000ab34:	2800      	cmp	r0, #0
1000ab36:	d000      	beq.n	1000ab3a <sms_pressure_startup+0x26>
1000ab38:	e7fe      	b.n	1000ab38 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000ab3a:	4b09      	ldr	r3, [pc, #36]	; (1000ab60 <sms_pressure_startup+0x4c>)
1000ab3c:	2102      	movs	r1, #2
1000ab3e:	2225      	movs	r2, #37	; 0x25
1000ab40:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000ab42:	2401      	movs	r4, #1
1000ab44:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000ab46:	3a1e      	subs	r2, #30
1000ab48:	4b09      	ldr	r3, [pc, #36]	; (1000ab70 <sms_pressure_startup+0x5c>)
1000ab4a:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000ab4c:	3901      	subs	r1, #1
1000ab4e:	2001      	movs	r0, #1
1000ab50:	4b08      	ldr	r3, [pc, #32]	; (1000ab74 <sms_pressure_startup+0x60>)
1000ab52:	4798      	blx	r3
    
    ulp_ready = true;
1000ab54:	4b08      	ldr	r3, [pc, #32]	; (1000ab78 <sms_pressure_startup+0x64>)
1000ab56:	701c      	strb	r4, [r3, #0]
}
1000ab58:	bd10      	pop	{r4, pc}
1000ab5a:	46c0      	nop			; (mov r8, r8)
1000ab5c:	1000a49d 	.word	0x1000a49d
1000ab60:	10018910 	.word	0x10018910
1000ab64:	1000a9b1 	.word	0x1000a9b1
1000ab68:	10008129 	.word	0x10008129
1000ab6c:	1000aae1 	.word	0x1000aae1
1000ab70:	10018884 	.word	0x10018884
1000ab74:	1000ad81 	.word	0x1000ad81
1000ab78:	10018885 	.word	0x10018885

1000ab7c <sms_pressure_ms58_read_data>:

    return STATUS_OK;
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000ab7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab7e:	4657      	mov	r7, sl
1000ab80:	464e      	mov	r6, r9
1000ab82:	b4c0      	push	{r6, r7}
1000ab84:	b083      	sub	sp, #12
    switch(pressure_device.hal.current_state) {
1000ab86:	2325      	movs	r3, #37	; 0x25
1000ab88:	4a2c      	ldr	r2, [pc, #176]	; (1000ac3c <sms_pressure_ms58_read_data+0xc0>)
1000ab8a:	5cd3      	ldrb	r3, [r2, r3]
1000ab8c:	2b03      	cmp	r3, #3
1000ab8e:	d002      	beq.n	1000ab96 <sms_pressure_ms58_read_data+0x1a>
1000ab90:	2b04      	cmp	r3, #4
1000ab92:	d025      	beq.n	1000abe0 <sms_pressure_ms58_read_data+0x64>
1000ab94:	e04b      	b.n	1000ac2e <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000ab96:	4c2a      	ldr	r4, [pc, #168]	; (1000ac40 <sms_pressure_ms58_read_data+0xc4>)
1000ab98:	2300      	movs	r3, #0
1000ab9a:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ab9c:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ab9e:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000aba0:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000aba2:	4d28      	ldr	r5, [pc, #160]	; (1000ac44 <sms_pressure_ms58_read_data+0xc8>)
1000aba4:	2704      	movs	r7, #4
1000aba6:	9700      	str	r7, [sp, #0]
1000aba8:	002b      	movs	r3, r5
1000abaa:	0022      	movs	r2, r4
1000abac:	4926      	ldr	r1, [pc, #152]	; (1000ac48 <sms_pressure_ms58_read_data+0xcc>)
1000abae:	4827      	ldr	r0, [pc, #156]	; (1000ac4c <sms_pressure_ms58_read_data+0xd0>)
1000abb0:	4e27      	ldr	r6, [pc, #156]	; (1000ac50 <sms_pressure_ms58_read_data+0xd4>)
1000abb2:	46b2      	mov	sl, r6
1000abb4:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000abb6:	4e21      	ldr	r6, [pc, #132]	; (1000ac3c <sms_pressure_ms58_read_data+0xc0>)
1000abb8:	786b      	ldrb	r3, [r5, #1]
1000abba:	041a      	lsls	r2, r3, #16
1000abbc:	78ab      	ldrb	r3, [r5, #2]
1000abbe:	021b      	lsls	r3, r3, #8
1000abc0:	4313      	orrs	r3, r2
1000abc2:	78ea      	ldrb	r2, [r5, #3]
1000abc4:	4313      	orrs	r3, r2
1000abc6:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000abc8:	2352      	movs	r3, #82	; 0x52
1000abca:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000abcc:	3b51      	subs	r3, #81	; 0x51
1000abce:	9300      	str	r3, [sp, #0]
1000abd0:	002b      	movs	r3, r5
1000abd2:	0022      	movs	r2, r4
1000abd4:	491c      	ldr	r1, [pc, #112]	; (1000ac48 <sms_pressure_ms58_read_data+0xcc>)
1000abd6:	481d      	ldr	r0, [pc, #116]	; (1000ac4c <sms_pressure_ms58_read_data+0xd0>)
1000abd8:	47d0      	blx	sl
        pressure_device.hal.current_state = MS58_STATE_CONV_TEMPERATURE;
1000abda:	2325      	movs	r3, #37	; 0x25
1000abdc:	54f7      	strb	r7, [r6, r3]
        break;
1000abde:	e026      	b.n	1000ac2e <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000abe0:	4c17      	ldr	r4, [pc, #92]	; (1000ac40 <sms_pressure_ms58_read_data+0xc4>)
1000abe2:	2300      	movs	r3, #0
1000abe4:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000abe6:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000abe8:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000abea:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000abec:	4d15      	ldr	r5, [pc, #84]	; (1000ac44 <sms_pressure_ms58_read_data+0xc8>)
1000abee:	3304      	adds	r3, #4
1000abf0:	9300      	str	r3, [sp, #0]
1000abf2:	002b      	movs	r3, r5
1000abf4:	0022      	movs	r2, r4
1000abf6:	4914      	ldr	r1, [pc, #80]	; (1000ac48 <sms_pressure_ms58_read_data+0xcc>)
1000abf8:	4814      	ldr	r0, [pc, #80]	; (1000ac4c <sms_pressure_ms58_read_data+0xd0>)
1000abfa:	4e15      	ldr	r6, [pc, #84]	; (1000ac50 <sms_pressure_ms58_read_data+0xd4>)
1000abfc:	46b1      	mov	r9, r6
1000abfe:	47b0      	blx	r6
        pressure_device.hal.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000ac00:	4e0e      	ldr	r6, [pc, #56]	; (1000ac3c <sms_pressure_ms58_read_data+0xc0>)
1000ac02:	786b      	ldrb	r3, [r5, #1]
1000ac04:	041a      	lsls	r2, r3, #16
1000ac06:	78ab      	ldrb	r3, [r5, #2]
1000ac08:	021b      	lsls	r3, r3, #8
1000ac0a:	4313      	orrs	r3, r2
1000ac0c:	78ea      	ldrb	r2, [r5, #3]
1000ac0e:	4313      	orrs	r3, r2
1000ac10:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000ac12:	2342      	movs	r3, #66	; 0x42
1000ac14:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000ac16:	2701      	movs	r7, #1
1000ac18:	9700      	str	r7, [sp, #0]
1000ac1a:	002b      	movs	r3, r5
1000ac1c:	0022      	movs	r2, r4
1000ac1e:	490a      	ldr	r1, [pc, #40]	; (1000ac48 <sms_pressure_ms58_read_data+0xcc>)
1000ac20:	480a      	ldr	r0, [pc, #40]	; (1000ac4c <sms_pressure_ms58_read_data+0xd0>)
1000ac22:	47c8      	blx	r9
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000ac24:	2203      	movs	r2, #3
1000ac26:	2325      	movs	r3, #37	; 0x25
1000ac28:	54f2      	strb	r2, [r6, r3]
        pressure_device.hal.data_complete = true;
1000ac2a:	3b01      	subs	r3, #1
1000ac2c:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000ac2e:	2000      	movs	r0, #0
1000ac30:	b003      	add	sp, #12
1000ac32:	bc0c      	pop	{r2, r3}
1000ac34:	4691      	mov	r9, r2
1000ac36:	469a      	mov	sl, r3
1000ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac3a:	46c0      	nop			; (mov r8, r8)
1000ac3c:	10018910 	.word	0x10018910
1000ac40:	10018900 	.word	0x10018900
1000ac44:	100188ec 	.word	0x100188ec
1000ac48:	100189ac 	.word	0x100189ac
1000ac4c:	100189b8 	.word	0x100189b8
1000ac50:	1000af39 	.word	0x1000af39

1000ac54 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac56:	464f      	mov	r7, r9
1000ac58:	b480      	push	{r7}
1000ac5a:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.hal.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.hal.adc_values[MS58_TYPE_TEMP] - tv1);
1000ac5c:	4d22      	ldr	r5, [pc, #136]	; (1000ace8 <sms_pressure_ms58_calculate+0x94>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.hal.prom_values[6] * (int64_t)deltaT);
1000ac5e:	89ec      	ldrh	r4, [r5, #14]
1000ac60:	0224      	lsls	r4, r4, #8
1000ac62:	69ab      	ldr	r3, [r5, #24]
1000ac64:	1b1c      	subs	r4, r3, r4
1000ac66:	17e3      	asrs	r3, r4, #31
1000ac68:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.hal.temperature = (int32_t)(tv2 + 2000);
1000ac6a:	8a28      	ldrh	r0, [r5, #16]
1000ac6c:	4a1f      	ldr	r2, [pc, #124]	; (1000acec <sms_pressure_ms58_calculate+0x98>)
1000ac6e:	4691      	mov	r9, r2
1000ac70:	0022      	movs	r2, r4
1000ac72:	2100      	movs	r1, #0
1000ac74:	47c8      	blx	r9
1000ac76:	0249      	lsls	r1, r1, #9
1000ac78:	0dc0      	lsrs	r0, r0, #23
1000ac7a:	4308      	orrs	r0, r1
1000ac7c:	23fa      	movs	r3, #250	; 0xfa
1000ac7e:	00db      	lsls	r3, r3, #3
1000ac80:	469c      	mov	ip, r3
1000ac82:	4460      	add	r0, ip
1000ac84:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.hal.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000ac86:	89a8      	ldrh	r0, [r5, #12]
1000ac88:	0022      	movs	r2, r4
1000ac8a:	9601      	str	r6, [sp, #4]
1000ac8c:	0033      	movs	r3, r6
1000ac8e:	2100      	movs	r1, #0
1000ac90:	47c8      	blx	r9
1000ac92:	064e      	lsls	r6, r1, #25
1000ac94:	09c2      	lsrs	r2, r0, #7
1000ac96:	4332      	orrs	r2, r6
1000ac98:	11cb      	asrs	r3, r1, #7
1000ac9a:	892e      	ldrh	r6, [r5, #8]
1000ac9c:	2100      	movs	r1, #0
1000ac9e:	0430      	lsls	r0, r6, #16
1000aca0:	1812      	adds	r2, r2, r0
1000aca2:	414b      	adcs	r3, r1
1000aca4:	0016      	movs	r6, r2
1000aca6:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.hal.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000aca8:	8968      	ldrh	r0, [r5, #10]
1000acaa:	0022      	movs	r2, r4
1000acac:	9b01      	ldr	r3, [sp, #4]
1000acae:	2100      	movs	r1, #0
1000acb0:	47c8      	blx	r9
1000acb2:	060c      	lsls	r4, r1, #24
1000acb4:	0a02      	lsrs	r2, r0, #8
1000acb6:	4322      	orrs	r2, r4
1000acb8:	120b      	asrs	r3, r1, #8
1000acba:	88ec      	ldrh	r4, [r5, #6]
1000acbc:	2100      	movs	r1, #0
1000acbe:	03e0      	lsls	r0, r4, #15
1000acc0:	1880      	adds	r0, r0, r2
1000acc2:	4159      	adcs	r1, r3
1000acc4:	696a      	ldr	r2, [r5, #20]
1000acc6:	2300      	movs	r3, #0
1000acc8:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.hal.pressure = (int32_t)(tv2 >> 15);
1000acca:	02cc      	lsls	r4, r1, #11
1000accc:	0d42      	lsrs	r2, r0, #21
1000acce:	4322      	orrs	r2, r4
1000acd0:	154b      	asrs	r3, r1, #21
1000acd2:	1b92      	subs	r2, r2, r6
1000acd4:	41bb      	sbcs	r3, r7
1000acd6:	0011      	movs	r1, r2
1000acd8:	045b      	lsls	r3, r3, #17
1000acda:	0bca      	lsrs	r2, r1, #15
1000acdc:	431a      	orrs	r2, r3
1000acde:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}
1000ace0:	b002      	add	sp, #8
1000ace2:	bc04      	pop	{r2}
1000ace4:	4691      	mov	r9, r2
1000ace6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ace8:	10018910 	.word	0x10018910
1000acec:	10012a1d 	.word	0x10012a1d

1000acf0 <sms_pressure_poll_data>:
    spi_wdata[0] = MS58_RESET;
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

void sms_pressure_poll_data(void)
{
1000acf0:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000acf2:	4b0b      	ldr	r3, [pc, #44]	; (1000ad20 <sms_pressure_poll_data+0x30>)
1000acf4:	781b      	ldrb	r3, [r3, #0]
1000acf6:	2b22      	cmp	r3, #34	; 0x22
1000acf8:	d111      	bne.n	1000ad1e <sms_pressure_poll_data+0x2e>
		//pressure_device.hal.temperature = 2000 + (rand() % 500);
		//pressure_device.hal.pressure = 100000 + (rand() % 20000);
		if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000acfa:	4b0a      	ldr	r3, [pc, #40]	; (1000ad24 <sms_pressure_poll_data+0x34>)
1000acfc:	4798      	blx	r3
1000acfe:	2800      	cmp	r0, #0
1000ad00:	d10d      	bne.n	1000ad1e <sms_pressure_poll_data+0x2e>
			DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
		}
		else {
			if(pressure_device.hal.data_complete) {
1000ad02:	2324      	movs	r3, #36	; 0x24
1000ad04:	4a08      	ldr	r2, [pc, #32]	; (1000ad28 <sms_pressure_poll_data+0x38>)
1000ad06:	5cd3      	ldrb	r3, [r2, r3]
1000ad08:	2b00      	cmp	r3, #0
1000ad0a:	d008      	beq.n	1000ad1e <sms_pressure_poll_data+0x2e>
				pressure_device.hal.data_complete = false;
1000ad0c:	0014      	movs	r4, r2
1000ad0e:	2200      	movs	r2, #0
1000ad10:	2324      	movs	r3, #36	; 0x24
1000ad12:	54e2      	strb	r2, [r4, r3]
				sms_pressure_ms58_calculate();
1000ad14:	4b05      	ldr	r3, [pc, #20]	; (1000ad2c <sms_pressure_poll_data+0x3c>)
1000ad16:	4798      	blx	r3
				pressure_device.rts = true;
1000ad18:	2201      	movs	r2, #1
1000ad1a:	232a      	movs	r3, #42	; 0x2a
1000ad1c:	54e2      	strb	r2, [r4, r3]
			}
		}
	}
}
1000ad1e:	bd10      	pop	{r4, pc}
1000ad20:	10018888 	.word	0x10018888
1000ad24:	1000ab7d 	.word	0x1000ab7d
1000ad28:	10018910 	.word	0x10018910
1000ad2c:	1000ac55 	.word	0x1000ac55

1000ad30 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000ad30:	b510      	push	{r4, lr}
1000ad32:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000ad34:	466b      	mov	r3, sp
1000ad36:	1dda      	adds	r2, r3, #7
1000ad38:	2300      	movs	r3, #0
1000ad3a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000ad3c:	4c09      	ldr	r4, [pc, #36]	; (1000ad64 <sms_pressure_define_services+0x34>)
1000ad3e:	0021      	movs	r1, r4
1000ad40:	2001      	movs	r0, #1
1000ad42:	4b09      	ldr	r3, [pc, #36]	; (1000ad68 <sms_pressure_define_services+0x38>)
1000ad44:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000ad46:	0020      	movs	r0, r4
1000ad48:	4b08      	ldr	r3, [pc, #32]	; (1000ad6c <sms_pressure_define_services+0x3c>)
1000ad4a:	4798      	blx	r3
1000ad4c:	1e04      	subs	r4, r0, #0
1000ad4e:	d006      	beq.n	1000ad5e <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000ad50:	4807      	ldr	r0, [pc, #28]	; (1000ad70 <sms_pressure_define_services+0x40>)
1000ad52:	4b08      	ldr	r3, [pc, #32]	; (1000ad74 <sms_pressure_define_services+0x44>)
1000ad54:	4798      	blx	r3
1000ad56:	0021      	movs	r1, r4
1000ad58:	4807      	ldr	r0, [pc, #28]	; (1000ad78 <sms_pressure_define_services+0x48>)
1000ad5a:	4b08      	ldr	r3, [pc, #32]	; (1000ad7c <sms_pressure_define_services+0x4c>)
1000ad5c:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000ad5e:	b002      	add	sp, #8
1000ad60:	bd10      	pop	{r4, pc}
1000ad62:	46c0      	nop			; (mov r8, r8)
1000ad64:	1001893c 	.word	0x1001893c
1000ad68:	1000a0f1 	.word	0x1000a0f1
1000ad6c:	1000a0cd 	.word	0x1000a0cd
1000ad70:	100157dc 	.word	0x100157dc
1000ad74:	10014631 	.word	0x10014631
1000ad78:	10015dd0 	.word	0x10015dd0
1000ad7c:	10014511 	.word	0x10014511

1000ad80 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000ad80:	b510      	push	{r4, lr}
1000ad82:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000ad84:	2800      	cmp	r0, #0
1000ad86:	d007      	beq.n	1000ad98 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000ad88:	2102      	movs	r1, #2
1000ad8a:	232f      	movs	r3, #47	; 0x2f
1000ad8c:	4a15      	ldr	r2, [pc, #84]	; (1000ade4 <sms_sensors_interrupt_toggle+0x64>)
1000ad8e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000ad90:	201e      	movs	r0, #30
1000ad92:	4b15      	ldr	r3, [pc, #84]	; (1000ade8 <sms_sensors_interrupt_toggle+0x68>)
1000ad94:	4798      	blx	r3
1000ad96:	e006      	b.n	1000ada6 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000ad98:	2100      	movs	r1, #0
1000ad9a:	232f      	movs	r3, #47	; 0x2f
1000ad9c:	4a11      	ldr	r2, [pc, #68]	; (1000ade4 <sms_sensors_interrupt_toggle+0x64>)
1000ad9e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000ada0:	201e      	movs	r0, #30
1000ada2:	4b12      	ldr	r3, [pc, #72]	; (1000adec <sms_sensors_interrupt_toggle+0x6c>)
1000ada4:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000ada6:	2c00      	cmp	r4, #0
1000ada8:	d010      	beq.n	1000adcc <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000adaa:	4b11      	ldr	r3, [pc, #68]	; (1000adf0 <sms_sensors_interrupt_toggle+0x70>)
1000adac:	2103      	movs	r1, #3
1000adae:	2225      	movs	r2, #37	; 0x25
1000adb0:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000adb2:	3901      	subs	r1, #1
1000adb4:	3206      	adds	r2, #6
1000adb6:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000adb8:	2100      	movs	r1, #0
1000adba:	480e      	ldr	r0, [pc, #56]	; (1000adf4 <sms_sensors_interrupt_toggle+0x74>)
1000adbc:	4b0e      	ldr	r3, [pc, #56]	; (1000adf8 <sms_sensors_interrupt_toggle+0x78>)
1000adbe:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000adc0:	4b0e      	ldr	r3, [pc, #56]	; (1000adfc <sms_sensors_interrupt_toggle+0x7c>)
1000adc2:	4798      	blx	r3
        sensors_active = true;
1000adc4:	2201      	movs	r2, #1
1000adc6:	4b0e      	ldr	r3, [pc, #56]	; (1000ae00 <sms_sensors_interrupt_toggle+0x80>)
1000adc8:	701a      	strb	r2, [r3, #0]
1000adca:	e00a      	b.n	1000ade2 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000adcc:	2102      	movs	r1, #2
1000adce:	2325      	movs	r3, #37	; 0x25
1000add0:	4a07      	ldr	r2, [pc, #28]	; (1000adf0 <sms_sensors_interrupt_toggle+0x70>)
1000add2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000add4:	4b0b      	ldr	r3, [pc, #44]	; (1000ae04 <sms_sensors_interrupt_toggle+0x84>)
1000add6:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000add8:	4b0b      	ldr	r3, [pc, #44]	; (1000ae08 <sms_sensors_interrupt_toggle+0x88>)
1000adda:	4798      	blx	r3
        sensors_active = false;
1000addc:	2200      	movs	r2, #0
1000adde:	4b08      	ldr	r3, [pc, #32]	; (1000ae00 <sms_sensors_interrupt_toggle+0x80>)
1000ade0:	701a      	strb	r2, [r3, #0]
    }
}
1000ade2:	bd10      	pop	{r4, pc}
1000ade4:	100187f4 	.word	0x100187f4
1000ade8:	1000bfb5 	.word	0x1000bfb5
1000adec:	1000c011 	.word	0x1000c011
1000adf0:	10018910 	.word	0x10018910
1000adf4:	000003d5 	.word	0x000003d5
1000adf8:	1000af9d 	.word	0x1000af9d
1000adfc:	1000afd1 	.word	0x1000afd1
1000ae00:	1001899c 	.word	0x1001899c
1000ae04:	1000afc5 	.word	0x1000afc5
1000ae08:	1000aff1 	.word	0x1000aff1

1000ae0c <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000ae0c:	b510      	push	{r4, lr}
1000ae0e:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000ae10:	2800      	cmp	r0, #0
1000ae12:	d019      	beq.n	1000ae48 <sms_sensors_switch+0x3c>
        if(sms_mpu_initialize()) {
1000ae14:	4b1e      	ldr	r3, [pc, #120]	; (1000ae90 <sms_sensors_switch+0x84>)
1000ae16:	4798      	blx	r3
1000ae18:	2800      	cmp	r0, #0
1000ae1a:	d00a      	beq.n	1000ae32 <sms_sensors_switch+0x26>
            DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't initialize MPU");
1000ae1c:	481d      	ldr	r0, [pc, #116]	; (1000ae94 <sms_sensors_switch+0x88>)
1000ae1e:	4b1e      	ldr	r3, [pc, #120]	; (1000ae98 <sms_sensors_switch+0x8c>)
1000ae20:	4798      	blx	r3
1000ae22:	481e      	ldr	r0, [pc, #120]	; (1000ae9c <sms_sensors_switch+0x90>)
1000ae24:	4b1e      	ldr	r3, [pc, #120]	; (1000aea0 <sms_sensors_switch+0x94>)
1000ae26:	4798      	blx	r3
            gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000ae28:	2100      	movs	r1, #0
1000ae2a:	2006      	movs	r0, #6
1000ae2c:	4b1d      	ldr	r3, [pc, #116]	; (1000aea4 <sms_sensors_switch+0x98>)
1000ae2e:	4798      	blx	r3
1000ae30:	e014      	b.n	1000ae5c <sms_sensors_switch+0x50>
        }
        else {
			DBG_LOG("[sms_sensors_switch]\t\t\tInit done!");
1000ae32:	4818      	ldr	r0, [pc, #96]	; (1000ae94 <sms_sensors_switch+0x88>)
1000ae34:	4b18      	ldr	r3, [pc, #96]	; (1000ae98 <sms_sensors_switch+0x8c>)
1000ae36:	4798      	blx	r3
1000ae38:	481b      	ldr	r0, [pc, #108]	; (1000aea8 <sms_sensors_switch+0x9c>)
1000ae3a:	4b19      	ldr	r3, [pc, #100]	; (1000aea0 <sms_sensors_switch+0x94>)
1000ae3c:	4798      	blx	r3
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
			gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000ae3e:	2100      	movs	r1, #0
1000ae40:	2006      	movs	r0, #6
1000ae42:	4b18      	ldr	r3, [pc, #96]	; (1000aea4 <sms_sensors_switch+0x98>)
1000ae44:	4798      	blx	r3
1000ae46:	e009      	b.n	1000ae5c <sms_sensors_switch+0x50>
        }
    }
    else {
		DBG_LOG("[sms_sensors_switch]\t\t\tMPU not enabled");
1000ae48:	4812      	ldr	r0, [pc, #72]	; (1000ae94 <sms_sensors_switch+0x88>)
1000ae4a:	4b13      	ldr	r3, [pc, #76]	; (1000ae98 <sms_sensors_switch+0x8c>)
1000ae4c:	4798      	blx	r3
1000ae4e:	4817      	ldr	r0, [pc, #92]	; (1000aeac <sms_sensors_switch+0xa0>)
1000ae50:	4b13      	ldr	r3, [pc, #76]	; (1000aea0 <sms_sensors_switch+0x94>)
1000ae52:	4798      	blx	r3
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000ae54:	2100      	movs	r1, #0
1000ae56:	2006      	movs	r0, #6
1000ae58:	4b12      	ldr	r3, [pc, #72]	; (1000aea4 <sms_sensors_switch+0x98>)
1000ae5a:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {         
1000ae5c:	2c00      	cmp	r4, #0
1000ae5e:	d00c      	beq.n	1000ae7a <sms_sensors_switch+0x6e>
		DBG_LOG("[sms_sensors_switch]\t\t\tEnabling pressure");       
1000ae60:	480c      	ldr	r0, [pc, #48]	; (1000ae94 <sms_sensors_switch+0x88>)
1000ae62:	4b0d      	ldr	r3, [pc, #52]	; (1000ae98 <sms_sensors_switch+0x8c>)
1000ae64:	4798      	blx	r3
1000ae66:	4812      	ldr	r0, [pc, #72]	; (1000aeb0 <sms_sensors_switch+0xa4>)
1000ae68:	4b0d      	ldr	r3, [pc, #52]	; (1000aea0 <sms_sensors_switch+0x94>)
1000ae6a:	4798      	blx	r3
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000ae6c:	2101      	movs	r1, #1
1000ae6e:	2325      	movs	r3, #37	; 0x25
1000ae70:	4a10      	ldr	r2, [pc, #64]	; (1000aeb4 <sms_sensors_switch+0xa8>)
1000ae72:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000ae74:	4b10      	ldr	r3, [pc, #64]	; (1000aeb8 <sms_sensors_switch+0xac>)
1000ae76:	4798      	blx	r3
1000ae78:	e009      	b.n	1000ae8e <sms_sensors_switch+0x82>
    }
    else {
		DBG_LOG("[sms_sensors_switch]\t\t\tPressure not enabled");
1000ae7a:	4806      	ldr	r0, [pc, #24]	; (1000ae94 <sms_sensors_switch+0x88>)
1000ae7c:	4b06      	ldr	r3, [pc, #24]	; (1000ae98 <sms_sensors_switch+0x8c>)
1000ae7e:	4798      	blx	r3
1000ae80:	480e      	ldr	r0, [pc, #56]	; (1000aebc <sms_sensors_switch+0xb0>)
1000ae82:	4b07      	ldr	r3, [pc, #28]	; (1000aea0 <sms_sensors_switch+0x94>)
1000ae84:	4798      	blx	r3
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000ae86:	2100      	movs	r1, #0
1000ae88:	2007      	movs	r0, #7
1000ae8a:	4b06      	ldr	r3, [pc, #24]	; (1000aea4 <sms_sensors_switch+0x98>)
1000ae8c:	4798      	blx	r3
    }
}
1000ae8e:	bd10      	pop	{r4, pc}
1000ae90:	1000a7cd 	.word	0x1000a7cd
1000ae94:	100157dc 	.word	0x100157dc
1000ae98:	10014631 	.word	0x10014631
1000ae9c:	10015e18 	.word	0x10015e18
1000aea0:	10014511 	.word	0x10014511
1000aea4:	1000bd0d 	.word	0x1000bd0d
1000aea8:	10015e48 	.word	0x10015e48
1000aeac:	10015e6c 	.word	0x10015e6c
1000aeb0:	10015e94 	.word	0x10015e94
1000aeb4:	10018910 	.word	0x10018910
1000aeb8:	1000ab15 	.word	0x1000ab15
1000aebc:	10015ec0 	.word	0x10015ec0

1000aec0 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000aec0:	b530      	push	{r4, r5, lr}
1000aec2:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000aec4:	ac01      	add	r4, sp, #4
1000aec6:	0020      	movs	r0, r4
1000aec8:	4b13      	ldr	r3, [pc, #76]	; (1000af18 <sms_spi_master_configure+0x58>)
1000aeca:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000aecc:	2310      	movs	r3, #16
1000aece:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000aed0:	0021      	movs	r1, r4
1000aed2:	4812      	ldr	r0, [pc, #72]	; (1000af1c <sms_spi_master_configure+0x5c>)
1000aed4:	4b12      	ldr	r3, [pc, #72]	; (1000af20 <sms_spi_master_configure+0x60>)
1000aed6:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000aed8:	ac02      	add	r4, sp, #8
1000aeda:	0020      	movs	r0, r4
1000aedc:	4b11      	ldr	r3, [pc, #68]	; (1000af24 <sms_spi_master_configure+0x64>)
1000aede:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000aee0:	2368      	movs	r3, #104	; 0x68
1000aee2:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000aee4:	2300      	movs	r3, #0
1000aee6:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000aee8:	3311      	adds	r3, #17
1000aeea:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000aeec:	3b0d      	subs	r3, #13
1000aeee:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000aef0:	2213      	movs	r2, #19
1000aef2:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000aef4:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000aef6:	3a14      	subs	r2, #20
1000aef8:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000aefa:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000aefc:	3213      	adds	r2, #19
1000aefe:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000af00:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000af02:	4d09      	ldr	r5, [pc, #36]	; (1000af28 <sms_spi_master_configure+0x68>)
1000af04:	0022      	movs	r2, r4
1000af06:	4909      	ldr	r1, [pc, #36]	; (1000af2c <sms_spi_master_configure+0x6c>)
1000af08:	0028      	movs	r0, r5
1000af0a:	4b09      	ldr	r3, [pc, #36]	; (1000af30 <sms_spi_master_configure+0x70>)
1000af0c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000af0e:	0028      	movs	r0, r5
1000af10:	4b08      	ldr	r3, [pc, #32]	; (1000af34 <sms_spi_master_configure+0x74>)
1000af12:	4798      	blx	r3
}
1000af14:	b00d      	add	sp, #52	; 0x34
1000af16:	bd30      	pop	{r4, r5, pc}
1000af18:	1000b451 	.word	0x1000b451
1000af1c:	100189ac 	.word	0x100189ac
1000af20:	1000b489 	.word	0x1000b489
1000af24:	1000b45d 	.word	0x1000b45d
1000af28:	100189b8 	.word	0x100189b8
1000af2c:	40007000 	.word	0x40007000
1000af30:	1000b559 	.word	0x1000b559
1000af34:	1000b4c9 	.word	0x1000b4c9

1000af38 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000af38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af3a:	b083      	sub	sp, #12
1000af3c:	0004      	movs	r4, r0
1000af3e:	000d      	movs	r5, r1
1000af40:	9200      	str	r2, [sp, #0]
1000af42:	9301      	str	r3, [sp, #4]
1000af44:	ab08      	add	r3, sp, #32
1000af46:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000af48:	2201      	movs	r2, #1
1000af4a:	4f08      	ldr	r7, [pc, #32]	; (1000af6c <sms_spi_master_transceive+0x34>)
1000af4c:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000af4e:	0033      	movs	r3, r6
1000af50:	9a01      	ldr	r2, [sp, #4]
1000af52:	9900      	ldr	r1, [sp, #0]
1000af54:	0020      	movs	r0, r4
1000af56:	4e06      	ldr	r6, [pc, #24]	; (1000af70 <sms_spi_master_transceive+0x38>)
1000af58:	47b0      	blx	r6
1000af5a:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000af5c:	2200      	movs	r2, #0
1000af5e:	0029      	movs	r1, r5
1000af60:	0020      	movs	r0, r4
1000af62:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000af64:	0030      	movs	r0, r6
1000af66:	b003      	add	sp, #12
1000af68:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af6a:	46c0      	nop			; (mov r8, r8)
1000af6c:	1000b741 	.word	0x1000b741
1000af70:	1000b6bd 	.word	0x1000b6bd

1000af74 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000af74:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000af76:	2328      	movs	r3, #40	; 0x28
1000af78:	4a06      	ldr	r2, [pc, #24]	; (1000af94 <sms_timer_aon_callback+0x20>)
1000af7a:	5cd3      	ldrb	r3, [r2, r3]
1000af7c:	2b00      	cmp	r3, #0
1000af7e:	d008      	beq.n	1000af92 <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000af80:	2101      	movs	r1, #1
1000af82:	2329      	movs	r3, #41	; 0x29
1000af84:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000af86:	2300      	movs	r3, #0
1000af88:	2200      	movs	r2, #0
1000af8a:	3102      	adds	r1, #2
1000af8c:	2042      	movs	r0, #66	; 0x42
1000af8e:	4c02      	ldr	r4, [pc, #8]	; (1000af98 <sms_timer_aon_callback+0x24>)
1000af90:	47a0      	blx	r4
	}
}
1000af92:	bd10      	pop	{r4, pc}
1000af94:	10018910 	.word	0x10018910
1000af98:	1000e9d1 	.word	0x1000e9d1

1000af9c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000af9c:	b530      	push	{r4, r5, lr}
1000af9e:	b083      	sub	sp, #12
1000afa0:	0004      	movs	r4, r0
1000afa2:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000afa4:	4668      	mov	r0, sp
1000afa6:	4b05      	ldr	r3, [pc, #20]	; (1000afbc <sms_timer_aon_init+0x20>)
1000afa8:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000afaa:	466b      	mov	r3, sp
1000afac:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000afae:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000afb0:	4668      	mov	r0, sp
1000afb2:	4b03      	ldr	r3, [pc, #12]	; (1000afc0 <sms_timer_aon_init+0x24>)
1000afb4:	4798      	blx	r3
}
1000afb6:	b003      	add	sp, #12
1000afb8:	bd30      	pop	{r4, r5, pc}
1000afba:	46c0      	nop			; (mov r8, r8)
1000afbc:	10008171 	.word	0x10008171
1000afc0:	100081e5 	.word	0x100081e5

1000afc4 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000afc4:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000afc6:	4b01      	ldr	r3, [pc, #4]	; (1000afcc <sms_timer_aon_disable+0x8>)
1000afc8:	4798      	blx	r3
}
1000afca:	bd10      	pop	{r4, pc}
1000afcc:	10008181 	.word	0x10008181

1000afd0 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000afd0:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000afd2:	4804      	ldr	r0, [pc, #16]	; (1000afe4 <sms_timer_aon_register_callback+0x14>)
1000afd4:	4b04      	ldr	r3, [pc, #16]	; (1000afe8 <sms_timer_aon_register_callback+0x18>)
1000afd6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000afd8:	2280      	movs	r2, #128	; 0x80
1000afda:	0512      	lsls	r2, r2, #20
1000afdc:	4b03      	ldr	r3, [pc, #12]	; (1000afec <sms_timer_aon_register_callback+0x1c>)
1000afde:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000afe0:	bd10      	pop	{r4, pc}
1000afe2:	46c0      	nop			; (mov r8, r8)
1000afe4:	1000af75 	.word	0x1000af75
1000afe8:	100081cd 	.word	0x100081cd
1000afec:	e000e100 	.word	0xe000e100

1000aff0 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000aff0:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000aff2:	4b04      	ldr	r3, [pc, #16]	; (1000b004 <sms_timer_aon_unregister_callback+0x14>)
1000aff4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aff6:	2180      	movs	r1, #128	; 0x80
1000aff8:	0509      	lsls	r1, r1, #20
1000affa:	2380      	movs	r3, #128	; 0x80
1000affc:	4a02      	ldr	r2, [pc, #8]	; (1000b008 <sms_timer_aon_unregister_callback+0x18>)
1000affe:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b000:	bd10      	pop	{r4, pc}
1000b002:	46c0      	nop			; (mov r8, r8)
1000b004:	100081d9 	.word	0x100081d9
1000b008:	e000e100 	.word	0xe000e100

1000b00c <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b00c:	b510      	push	{r4, lr}
1000b00e:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b010:	ac01      	add	r4, sp, #4
1000b012:	0020      	movs	r0, r4
1000b014:	4b08      	ldr	r3, [pc, #32]	; (1000b038 <sms_dualtimer_init+0x2c>)
1000b016:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b018:	4a08      	ldr	r2, [pc, #32]	; (1000b03c <sms_dualtimer_init+0x30>)
1000b01a:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b01c:	2300      	movs	r3, #0
1000b01e:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b020:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b022:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b024:	0020      	movs	r0, r4
1000b026:	4b06      	ldr	r3, [pc, #24]	; (1000b040 <sms_dualtimer_init+0x34>)
1000b028:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b02a:	2000      	movs	r0, #0
1000b02c:	4c05      	ldr	r4, [pc, #20]	; (1000b044 <sms_dualtimer_init+0x38>)
1000b02e:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b030:	2001      	movs	r0, #1
1000b032:	47a0      	blx	r4
}
1000b034:	b008      	add	sp, #32
1000b036:	bd10      	pop	{r4, pc}
1000b038:	1000b7a5 	.word	0x1000b7a5
1000b03c:	018cba80 	.word	0x018cba80
1000b040:	1000b839 	.word	0x1000b839
1000b044:	1000b815 	.word	0x1000b815

1000b048 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b048:	b510      	push	{r4, lr}
1000b04a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b04c:	4b02      	ldr	r3, [pc, #8]	; (1000b058 <sms_dualtimer_register_callback+0x10>)
1000b04e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b050:	0020      	movs	r0, r4
1000b052:	4b02      	ldr	r3, [pc, #8]	; (1000b05c <sms_dualtimer_register_callback+0x14>)
1000b054:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b056:	bd10      	pop	{r4, pc}
1000b058:	1000b93d 	.word	0x1000b93d
1000b05c:	1000b815 	.word	0x1000b815

1000b060 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b060:	b510      	push	{r4, lr}
1000b062:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b064:	2801      	cmp	r0, #1
1000b066:	d006      	beq.n	1000b076 <sms_dualtimer_start+0x16>
1000b068:	2800      	cmp	r0, #0
1000b06a:	d002      	beq.n	1000b072 <sms_dualtimer_start+0x12>
1000b06c:	2802      	cmp	r0, #2
1000b06e:	d004      	beq.n	1000b07a <sms_dualtimer_start+0x1a>
1000b070:	e005      	b.n	1000b07e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b072:	221a      	movs	r2, #26
1000b074:	e004      	b.n	1000b080 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b076:	4a0c      	ldr	r2, [pc, #48]	; (1000b0a8 <sms_dualtimer_start+0x48>)
        break;
1000b078:	e002      	b.n	1000b080 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b07a:	4a0c      	ldr	r2, [pc, #48]	; (1000b0ac <sms_dualtimer_start+0x4c>)
        break;
1000b07c:	e000      	b.n	1000b080 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b07e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b080:	2900      	cmp	r1, #0
1000b082:	d101      	bne.n	1000b088 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b084:	21fa      	movs	r1, #250	; 0xfa
1000b086:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b088:	2000      	movs	r0, #0
1000b08a:	4b09      	ldr	r3, [pc, #36]	; (1000b0b0 <sms_dualtimer_start+0x50>)
1000b08c:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b08e:	434a      	muls	r2, r1
1000b090:	2100      	movs	r1, #0
1000b092:	0020      	movs	r0, r4
1000b094:	4b07      	ldr	r3, [pc, #28]	; (1000b0b4 <sms_dualtimer_start+0x54>)
1000b096:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b098:	0020      	movs	r0, r4
1000b09a:	4b07      	ldr	r3, [pc, #28]	; (1000b0b8 <sms_dualtimer_start+0x58>)
1000b09c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b09e:	2280      	movs	r2, #128	; 0x80
1000b0a0:	01d2      	lsls	r2, r2, #7
1000b0a2:	4b06      	ldr	r3, [pc, #24]	; (1000b0bc <sms_dualtimer_start+0x5c>)
1000b0a4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b0a6:	bd10      	pop	{r4, pc}
1000b0a8:	00006590 	.word	0x00006590
1000b0ac:	018cba80 	.word	0x018cba80
1000b0b0:	10018885 	.word	0x10018885
1000b0b4:	1000b7c9 	.word	0x1000b7c9
1000b0b8:	1000b7f1 	.word	0x1000b7f1
1000b0bc:	e000e100 	.word	0xe000e100

1000b0c0 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b0c0:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b0c2:	4b01      	ldr	r3, [pc, #4]	; (1000b0c8 <sms_dualtimer_stop+0x8>)
1000b0c4:	4798      	blx	r3
}
1000b0c6:	bd10      	pop	{r4, pc}
1000b0c8:	1000b815 	.word	0x1000b815

1000b0cc <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b0cc:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000b0ce:	2201      	movs	r2, #1
1000b0d0:	4b04      	ldr	r3, [pc, #16]	; (1000b0e4 <sms_dualtimer1_cb+0x18>)
1000b0d2:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b0d4:	2300      	movs	r3, #0
1000b0d6:	2200      	movs	r2, #0
1000b0d8:	2101      	movs	r1, #1
1000b0da:	2040      	movs	r0, #64	; 0x40
1000b0dc:	4c02      	ldr	r4, [pc, #8]	; (1000b0e8 <sms_dualtimer1_cb+0x1c>)
1000b0de:	47a0      	blx	r4
}
1000b0e0:	bd10      	pop	{r4, pc}
1000b0e2:	46c0      	nop			; (mov r8, r8)
1000b0e4:	100188fc 	.word	0x100188fc
1000b0e8:	1000e9d1 	.word	0x1000e9d1

1000b0ec <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b0ec:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000b0ee:	2201      	movs	r2, #1
1000b0f0:	4b04      	ldr	r3, [pc, #16]	; (1000b104 <sms_dualtimer2_cb+0x18>)
1000b0f2:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b0f4:	2300      	movs	r3, #0
1000b0f6:	2200      	movs	r2, #0
1000b0f8:	2101      	movs	r1, #1
1000b0fa:	2041      	movs	r0, #65	; 0x41
1000b0fc:	4c02      	ldr	r4, [pc, #8]	; (1000b108 <sms_dualtimer2_cb+0x1c>)
1000b0fe:	47a0      	blx	r4
}
1000b100:	bd10      	pop	{r4, pc}
1000b102:	46c0      	nop			; (mov r8, r8)
1000b104:	100189a8 	.word	0x100189a8
1000b108:	1000e9d1 	.word	0x1000e9d1

1000b10c <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b10c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b10e:	4b79      	ldr	r3, [pc, #484]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b110:	781b      	ldrb	r3, [r3, #0]
1000b112:	b2db      	uxtb	r3, r3
1000b114:	2b01      	cmp	r3, #1
1000b116:	d003      	beq.n	1000b120 <sms_dualtimer1_fn+0x14>
1000b118:	2b02      	cmp	r3, #2
1000b11a:	d100      	bne.n	1000b11e <sms_dualtimer1_fn+0x12>
1000b11c:	e0ae      	b.n	1000b27c <sms_dualtimer1_fn+0x170>
1000b11e:	e0e1      	b.n	1000b2e4 <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b120:	2200      	movs	r2, #0
1000b122:	4b74      	ldr	r3, [pc, #464]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b124:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b126:	4c74      	ldr	r4, [pc, #464]	; (1000b2f8 <sms_dualtimer1_fn+0x1ec>)
1000b128:	7b63      	ldrb	r3, [r4, #13]
1000b12a:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b12c:	4b73      	ldr	r3, [pc, #460]	; (1000b2fc <sms_dualtimer1_fn+0x1f0>)
1000b12e:	4798      	blx	r3
1000b130:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b132:	4873      	ldr	r0, [pc, #460]	; (1000b300 <sms_dualtimer1_fn+0x1f4>)
1000b134:	4b73      	ldr	r3, [pc, #460]	; (1000b304 <sms_dualtimer1_fn+0x1f8>)
1000b136:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b138:	7b23      	ldrb	r3, [r4, #12]
1000b13a:	2b01      	cmp	r3, #1
1000b13c:	d002      	beq.n	1000b144 <sms_dualtimer1_fn+0x38>
1000b13e:	2b02      	cmp	r3, #2
1000b140:	d04c      	beq.n	1000b1dc <sms_dualtimer1_fn+0xd0>
1000b142:	e093      	b.n	1000b26c <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b144:	4b6c      	ldr	r3, [pc, #432]	; (1000b2f8 <sms_dualtimer1_fn+0x1ec>)
1000b146:	7b5b      	ldrb	r3, [r3, #13]
1000b148:	2b01      	cmp	r3, #1
1000b14a:	d002      	beq.n	1000b152 <sms_dualtimer1_fn+0x46>
1000b14c:	2b02      	cmp	r3, #2
1000b14e:	d023      	beq.n	1000b198 <sms_dualtimer1_fn+0x8c>
1000b150:	e03b      	b.n	1000b1ca <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b152:	4b6d      	ldr	r3, [pc, #436]	; (1000b308 <sms_dualtimer1_fn+0x1fc>)
1000b154:	781b      	ldrb	r3, [r3, #0]
1000b156:	2b00      	cmp	r3, #0
1000b158:	d115      	bne.n	1000b186 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000b15a:	4a6c      	ldr	r2, [pc, #432]	; (1000b30c <sms_dualtimer1_fn+0x200>)
1000b15c:	7813      	ldrb	r3, [r2, #0]
1000b15e:	3301      	adds	r3, #1
1000b160:	b2db      	uxtb	r3, r3
1000b162:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b164:	2b0f      	cmp	r3, #15
1000b166:	d905      	bls.n	1000b174 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b168:	2200      	movs	r2, #0
1000b16a:	4b62      	ldr	r3, [pc, #392]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b16c:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b16e:	4b68      	ldr	r3, [pc, #416]	; (1000b310 <sms_dualtimer1_fn+0x204>)
1000b170:	4798      	blx	r3
1000b172:	e0be      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b174:	2201      	movs	r2, #1
1000b176:	4b5f      	ldr	r3, [pc, #380]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b178:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b17a:	2200      	movs	r2, #0
1000b17c:	21fa      	movs	r1, #250	; 0xfa
1000b17e:	2001      	movs	r0, #1
1000b180:	4b64      	ldr	r3, [pc, #400]	; (1000b314 <sms_dualtimer1_fn+0x208>)
1000b182:	4798      	blx	r3
1000b184:	e0b5      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b186:	4b64      	ldr	r3, [pc, #400]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b188:	781b      	ldrb	r3, [r3, #0]
1000b18a:	2b00      	cmp	r3, #0
1000b18c:	d000      	beq.n	1000b190 <sms_dualtimer1_fn+0x84>
1000b18e:	e0b0      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b190:	2201      	movs	r2, #1
1000b192:	4b62      	ldr	r3, [pc, #392]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b194:	701a      	strb	r2, [r3, #0]
1000b196:	e0ac      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b198:	4b5b      	ldr	r3, [pc, #364]	; (1000b308 <sms_dualtimer1_fn+0x1fc>)
1000b19a:	781b      	ldrb	r3, [r3, #0]
1000b19c:	2b00      	cmp	r3, #0
1000b19e:	d10b      	bne.n	1000b1b8 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000b1a0:	2200      	movs	r2, #0
1000b1a2:	4b5a      	ldr	r3, [pc, #360]	; (1000b30c <sms_dualtimer1_fn+0x200>)
1000b1a4:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b1a6:	3201      	adds	r2, #1
1000b1a8:	4b52      	ldr	r3, [pc, #328]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b1aa:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b1ac:	2200      	movs	r2, #0
1000b1ae:	2164      	movs	r1, #100	; 0x64
1000b1b0:	2001      	movs	r0, #1
1000b1b2:	4b58      	ldr	r3, [pc, #352]	; (1000b314 <sms_dualtimer1_fn+0x208>)
1000b1b4:	4798      	blx	r3
1000b1b6:	e09c      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b1b8:	4b57      	ldr	r3, [pc, #348]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b1ba:	781b      	ldrb	r3, [r3, #0]
1000b1bc:	2b00      	cmp	r3, #0
1000b1be:	d000      	beq.n	1000b1c2 <sms_dualtimer1_fn+0xb6>
1000b1c0:	e097      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b1c2:	2201      	movs	r2, #1
1000b1c4:	4b55      	ldr	r3, [pc, #340]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b1c6:	701a      	strb	r2, [r3, #0]
1000b1c8:	e093      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b1ca:	4b53      	ldr	r3, [pc, #332]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b1cc:	781b      	ldrb	r3, [r3, #0]
1000b1ce:	2b00      	cmp	r3, #0
1000b1d0:	d000      	beq.n	1000b1d4 <sms_dualtimer1_fn+0xc8>
1000b1d2:	e08e      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b1d4:	2201      	movs	r2, #1
1000b1d6:	4b51      	ldr	r3, [pc, #324]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b1d8:	701a      	strb	r2, [r3, #0]
1000b1da:	e08a      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b1dc:	4b46      	ldr	r3, [pc, #280]	; (1000b2f8 <sms_dualtimer1_fn+0x1ec>)
1000b1de:	7b5b      	ldrb	r3, [r3, #13]
1000b1e0:	2b01      	cmp	r3, #1
1000b1e2:	d023      	beq.n	1000b22c <sms_dualtimer1_fn+0x120>
1000b1e4:	2b02      	cmp	r3, #2
1000b1e6:	d139      	bne.n	1000b25c <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b1e8:	4b47      	ldr	r3, [pc, #284]	; (1000b308 <sms_dualtimer1_fn+0x1fc>)
1000b1ea:	781b      	ldrb	r3, [r3, #0]
1000b1ec:	2b00      	cmp	r3, #0
1000b1ee:	d115      	bne.n	1000b21c <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000b1f0:	4a46      	ldr	r2, [pc, #280]	; (1000b30c <sms_dualtimer1_fn+0x200>)
1000b1f2:	7813      	ldrb	r3, [r2, #0]
1000b1f4:	3301      	adds	r3, #1
1000b1f6:	b2db      	uxtb	r3, r3
1000b1f8:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b1fa:	2b0f      	cmp	r3, #15
1000b1fc:	d905      	bls.n	1000b20a <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b1fe:	2200      	movs	r2, #0
1000b200:	4b3c      	ldr	r3, [pc, #240]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b202:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b204:	4b42      	ldr	r3, [pc, #264]	; (1000b310 <sms_dualtimer1_fn+0x204>)
1000b206:	4798      	blx	r3
1000b208:	e073      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b20a:	2201      	movs	r2, #1
1000b20c:	4b39      	ldr	r3, [pc, #228]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b20e:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b210:	2200      	movs	r2, #0
1000b212:	21fa      	movs	r1, #250	; 0xfa
1000b214:	2001      	movs	r0, #1
1000b216:	4b3f      	ldr	r3, [pc, #252]	; (1000b314 <sms_dualtimer1_fn+0x208>)
1000b218:	4798      	blx	r3
1000b21a:	e06a      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b21c:	4b3e      	ldr	r3, [pc, #248]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b21e:	781b      	ldrb	r3, [r3, #0]
1000b220:	2b00      	cmp	r3, #0
1000b222:	d166      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b224:	2201      	movs	r2, #1
1000b226:	4b3d      	ldr	r3, [pc, #244]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b228:	701a      	strb	r2, [r3, #0]
1000b22a:	e062      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000b22c:	4b36      	ldr	r3, [pc, #216]	; (1000b308 <sms_dualtimer1_fn+0x1fc>)
1000b22e:	781b      	ldrb	r3, [r3, #0]
1000b230:	2b00      	cmp	r3, #0
1000b232:	d10b      	bne.n	1000b24c <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000b234:	2200      	movs	r2, #0
1000b236:	4b35      	ldr	r3, [pc, #212]	; (1000b30c <sms_dualtimer1_fn+0x200>)
1000b238:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b23a:	3201      	adds	r2, #1
1000b23c:	4b2d      	ldr	r3, [pc, #180]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b23e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b240:	2200      	movs	r2, #0
1000b242:	2164      	movs	r1, #100	; 0x64
1000b244:	2001      	movs	r0, #1
1000b246:	4b33      	ldr	r3, [pc, #204]	; (1000b314 <sms_dualtimer1_fn+0x208>)
1000b248:	4798      	blx	r3
1000b24a:	e052      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b24c:	4b32      	ldr	r3, [pc, #200]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b24e:	781b      	ldrb	r3, [r3, #0]
1000b250:	2b00      	cmp	r3, #0
1000b252:	d14e      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b254:	2201      	movs	r2, #1
1000b256:	4b31      	ldr	r3, [pc, #196]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b258:	701a      	strb	r2, [r3, #0]
1000b25a:	e04a      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b25c:	4b2e      	ldr	r3, [pc, #184]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b25e:	781b      	ldrb	r3, [r3, #0]
1000b260:	2b00      	cmp	r3, #0
1000b262:	d146      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b264:	2201      	movs	r2, #1
1000b266:	4b2d      	ldr	r3, [pc, #180]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b268:	701a      	strb	r2, [r3, #0]
1000b26a:	e042      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b26c:	4b2a      	ldr	r3, [pc, #168]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b26e:	781b      	ldrb	r3, [r3, #0]
1000b270:	2b00      	cmp	r3, #0
1000b272:	d13e      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b274:	2201      	movs	r2, #1
1000b276:	4b29      	ldr	r3, [pc, #164]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b278:	701a      	strb	r2, [r3, #0]
1000b27a:	e03a      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b27c:	4c1e      	ldr	r4, [pc, #120]	; (1000b2f8 <sms_dualtimer1_fn+0x1ec>)
1000b27e:	7b63      	ldrb	r3, [r4, #13]
1000b280:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000b282:	4b1e      	ldr	r3, [pc, #120]	; (1000b2fc <sms_dualtimer1_fn+0x1f0>)
1000b284:	4798      	blx	r3
1000b286:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b288:	481d      	ldr	r0, [pc, #116]	; (1000b300 <sms_dualtimer1_fn+0x1f4>)
1000b28a:	4b1e      	ldr	r3, [pc, #120]	; (1000b304 <sms_dualtimer1_fn+0x1f8>)
1000b28c:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b28e:	89a2      	ldrh	r2, [r4, #12]
1000b290:	4b23      	ldr	r3, [pc, #140]	; (1000b320 <sms_dualtimer1_fn+0x214>)
1000b292:	429a      	cmp	r2, r3
1000b294:	d112      	bne.n	1000b2bc <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000b296:	4a1d      	ldr	r2, [pc, #116]	; (1000b30c <sms_dualtimer1_fn+0x200>)
1000b298:	7813      	ldrb	r3, [r2, #0]
1000b29a:	3301      	adds	r3, #1
1000b29c:	b2db      	uxtb	r3, r3
1000b29e:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b2a0:	2b09      	cmp	r3, #9
1000b2a2:	d902      	bls.n	1000b2aa <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000b2a4:	4b1f      	ldr	r3, [pc, #124]	; (1000b324 <sms_dualtimer1_fn+0x218>)
1000b2a6:	4798      	blx	r3
1000b2a8:	e023      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b2aa:	2202      	movs	r2, #2
1000b2ac:	4b11      	ldr	r3, [pc, #68]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b2ae:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b2b0:	2200      	movs	r2, #0
1000b2b2:	21fa      	movs	r1, #250	; 0xfa
1000b2b4:	2001      	movs	r0, #1
1000b2b6:	4b17      	ldr	r3, [pc, #92]	; (1000b314 <sms_dualtimer1_fn+0x208>)
1000b2b8:	4798      	blx	r3
1000b2ba:	e01a      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b2bc:	232b      	movs	r3, #43	; 0x2b
1000b2be:	4a1a      	ldr	r2, [pc, #104]	; (1000b328 <sms_dualtimer1_fn+0x21c>)
1000b2c0:	5cd3      	ldrb	r3, [r2, r3]
1000b2c2:	2b01      	cmp	r3, #1
1000b2c4:	d103      	bne.n	1000b2ce <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000b2c6:	2101      	movs	r1, #1
1000b2c8:	2000      	movs	r0, #0
1000b2ca:	4b18      	ldr	r3, [pc, #96]	; (1000b32c <sms_dualtimer1_fn+0x220>)
1000b2cc:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b2ce:	2200      	movs	r2, #0
1000b2d0:	4b08      	ldr	r3, [pc, #32]	; (1000b2f4 <sms_dualtimer1_fn+0x1e8>)
1000b2d2:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b2d4:	4b10      	ldr	r3, [pc, #64]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b2d6:	781b      	ldrb	r3, [r3, #0]
1000b2d8:	2b00      	cmp	r3, #0
1000b2da:	d10a      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000b2dc:	3201      	adds	r2, #1
1000b2de:	4b0f      	ldr	r3, [pc, #60]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b2e0:	701a      	strb	r2, [r3, #0]
1000b2e2:	e006      	b.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b2e4:	4b0c      	ldr	r3, [pc, #48]	; (1000b318 <sms_dualtimer1_fn+0x20c>)
1000b2e6:	781b      	ldrb	r3, [r3, #0]
1000b2e8:	2b00      	cmp	r3, #0
1000b2ea:	d102      	bne.n	1000b2f2 <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000b2ec:	2201      	movs	r2, #1
1000b2ee:	4b0b      	ldr	r3, [pc, #44]	; (1000b31c <sms_dualtimer1_fn+0x210>)
1000b2f0:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b2f2:	bd10      	pop	{r4, pc}
1000b2f4:	100187f0 	.word	0x100187f0
1000b2f8:	1001888c 	.word	0x1001888c
1000b2fc:	1000a319 	.word	0x1000a319
1000b300:	10015eec 	.word	0x10015eec
1000b304:	1000a5b1 	.word	0x1000a5b1
1000b308:	10018888 	.word	0x10018888
1000b30c:	100189c6 	.word	0x100189c6
1000b310:	10009c41 	.word	0x10009c41
1000b314:	1000b061 	.word	0x1000b061
1000b318:	100189ab 	.word	0x100189ab
1000b31c:	10018885 	.word	0x10018885
1000b320:	00000303 	.word	0x00000303
1000b324:	10009c59 	.word	0x10009c59
1000b328:	10018910 	.word	0x10018910
1000b32c:	1000ad81 	.word	0x1000ad81

1000b330 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b330:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b332:	483a      	ldr	r0, [pc, #232]	; (1000b41c <sms_dualtimer2_fn+0xec>)
1000b334:	4b3a      	ldr	r3, [pc, #232]	; (1000b420 <sms_dualtimer2_fn+0xf0>)
1000b336:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b338:	4b3a      	ldr	r3, [pc, #232]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b33a:	781b      	ldrb	r3, [r3, #0]
1000b33c:	b2db      	uxtb	r3, r3
1000b33e:	2b02      	cmp	r3, #2
1000b340:	d028      	beq.n	1000b394 <sms_dualtimer2_fn+0x64>
1000b342:	2b03      	cmp	r3, #3
1000b344:	d047      	beq.n	1000b3d6 <sms_dualtimer2_fn+0xa6>
1000b346:	2b01      	cmp	r3, #1
1000b348:	d166      	bne.n	1000b418 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b34a:	2200      	movs	r2, #0
1000b34c:	4b35      	ldr	r3, [pc, #212]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b34e:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000b350:	4b35      	ldr	r3, [pc, #212]	; (1000b428 <sms_dualtimer2_fn+0xf8>)
1000b352:	781b      	ldrb	r3, [r3, #0]
1000b354:	2b22      	cmp	r3, #34	; 0x22
1000b356:	d107      	bne.n	1000b368 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b358:	4b34      	ldr	r3, [pc, #208]	; (1000b42c <sms_dualtimer2_fn+0xfc>)
1000b35a:	781b      	ldrb	r3, [r3, #0]
1000b35c:	2b00      	cmp	r3, #0
1000b35e:	d15b      	bne.n	1000b418 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000b360:	3201      	adds	r2, #1
1000b362:	4b33      	ldr	r3, [pc, #204]	; (1000b430 <sms_dualtimer2_fn+0x100>)
1000b364:	701a      	strb	r2, [r3, #0]
1000b366:	e057      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b368:	4a32      	ldr	r2, [pc, #200]	; (1000b434 <sms_dualtimer2_fn+0x104>)
1000b36a:	7813      	ldrb	r3, [r2, #0]
1000b36c:	3301      	adds	r3, #1
1000b36e:	b2db      	uxtb	r3, r3
1000b370:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b372:	2b00      	cmp	r3, #0
1000b374:	d006      	beq.n	1000b384 <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b376:	2200      	movs	r2, #0
1000b378:	4b2a      	ldr	r3, [pc, #168]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b37a:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000b37c:	3222      	adds	r2, #34	; 0x22
1000b37e:	4b2a      	ldr	r3, [pc, #168]	; (1000b428 <sms_dualtimer2_fn+0xf8>)
1000b380:	701a      	strb	r2, [r3, #0]
1000b382:	e049      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b384:	2201      	movs	r2, #1
1000b386:	4b27      	ldr	r3, [pc, #156]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b388:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b38a:	2164      	movs	r1, #100	; 0x64
1000b38c:	2001      	movs	r0, #1
1000b38e:	4b2a      	ldr	r3, [pc, #168]	; (1000b438 <sms_dualtimer2_fn+0x108>)
1000b390:	4798      	blx	r3
1000b392:	e041      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000b394:	2200      	movs	r2, #0
1000b396:	4b23      	ldr	r3, [pc, #140]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b398:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b39a:	4a28      	ldr	r2, [pc, #160]	; (1000b43c <sms_dualtimer2_fn+0x10c>)
1000b39c:	7813      	ldrb	r3, [r2, #0]
1000b39e:	3301      	adds	r3, #1
1000b3a0:	b2db      	uxtb	r3, r3
1000b3a2:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b3a4:	7813      	ldrb	r3, [r2, #0]
1000b3a6:	b2db      	uxtb	r3, r3
1000b3a8:	2b07      	cmp	r3, #7
1000b3aa:	d908      	bls.n	1000b3be <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b3ac:	2016      	movs	r0, #22
1000b3ae:	4b24      	ldr	r3, [pc, #144]	; (1000b440 <sms_dualtimer2_fn+0x110>)
1000b3b0:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b3b2:	4b24      	ldr	r3, [pc, #144]	; (1000b444 <sms_dualtimer2_fn+0x114>)
1000b3b4:	4798      	blx	r3
            ulp_ready = true;
1000b3b6:	2201      	movs	r2, #1
1000b3b8:	4b1d      	ldr	r3, [pc, #116]	; (1000b430 <sms_dualtimer2_fn+0x100>)
1000b3ba:	701a      	strb	r2, [r3, #0]
1000b3bc:	e02c      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b3be:	2016      	movs	r0, #22
1000b3c0:	4b21      	ldr	r3, [pc, #132]	; (1000b448 <sms_dualtimer2_fn+0x118>)
1000b3c2:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b3c4:	2202      	movs	r2, #2
1000b3c6:	4b17      	ldr	r3, [pc, #92]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b3c8:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b3ca:	3a01      	subs	r2, #1
1000b3cc:	2164      	movs	r1, #100	; 0x64
1000b3ce:	2001      	movs	r0, #1
1000b3d0:	4b19      	ldr	r3, [pc, #100]	; (1000b438 <sms_dualtimer2_fn+0x108>)
1000b3d2:	4798      	blx	r3
1000b3d4:	e020      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000b3d6:	2200      	movs	r2, #0
1000b3d8:	4b12      	ldr	r3, [pc, #72]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b3da:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b3dc:	4a17      	ldr	r2, [pc, #92]	; (1000b43c <sms_dualtimer2_fn+0x10c>)
1000b3de:	7813      	ldrb	r3, [r2, #0]
1000b3e0:	3301      	adds	r3, #1
1000b3e2:	b2db      	uxtb	r3, r3
1000b3e4:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b3e6:	7813      	ldrb	r3, [r2, #0]
1000b3e8:	b2db      	uxtb	r3, r3
1000b3ea:	2b03      	cmp	r3, #3
1000b3ec:	d908      	bls.n	1000b400 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b3ee:	2016      	movs	r0, #22
1000b3f0:	4b13      	ldr	r3, [pc, #76]	; (1000b440 <sms_dualtimer2_fn+0x110>)
1000b3f2:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b3f4:	4b15      	ldr	r3, [pc, #84]	; (1000b44c <sms_dualtimer2_fn+0x11c>)
1000b3f6:	4798      	blx	r3
            ulp_ready = true;
1000b3f8:	2201      	movs	r2, #1
1000b3fa:	4b0d      	ldr	r3, [pc, #52]	; (1000b430 <sms_dualtimer2_fn+0x100>)
1000b3fc:	701a      	strb	r2, [r3, #0]
1000b3fe:	e00b      	b.n	1000b418 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b400:	2016      	movs	r0, #22
1000b402:	4b11      	ldr	r3, [pc, #68]	; (1000b448 <sms_dualtimer2_fn+0x118>)
1000b404:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b406:	2203      	movs	r2, #3
1000b408:	4b06      	ldr	r3, [pc, #24]	; (1000b424 <sms_dualtimer2_fn+0xf4>)
1000b40a:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b40c:	3a02      	subs	r2, #2
1000b40e:	21c8      	movs	r1, #200	; 0xc8
1000b410:	0049      	lsls	r1, r1, #1
1000b412:	2001      	movs	r0, #1
1000b414:	4b08      	ldr	r3, [pc, #32]	; (1000b438 <sms_dualtimer2_fn+0x108>)
1000b416:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b418:	bd10      	pop	{r4, pc}
1000b41a:	46c0      	nop			; (mov r8, r8)
1000b41c:	10015f00 	.word	0x10015f00
1000b420:	1000a5b1 	.word	0x1000a5b1
1000b424:	100189ab 	.word	0x100189ab
1000b428:	10018888 	.word	0x10018888
1000b42c:	100187f0 	.word	0x100187f0
1000b430:	10018885 	.word	0x10018885
1000b434:	1001899d 	.word	0x1001899d
1000b438:	1000b061 	.word	0x1000b061
1000b43c:	100189cc 	.word	0x100189cc
1000b440:	1000a8e5 	.word	0x1000a8e5
1000b444:	10009df9 	.word	0x10009df9
1000b448:	1000a925 	.word	0x1000a925
1000b44c:	1000eead 	.word	0x1000eead

1000b450 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b450:	230c      	movs	r3, #12
1000b452:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b454:	2300      	movs	r3, #0
1000b456:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b458:	7083      	strb	r3, [r0, #2]
}
1000b45a:	4770      	bx	lr

1000b45c <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b45c:	2301      	movs	r3, #1
1000b45e:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b460:	2300      	movs	r3, #0
1000b462:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b464:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b466:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b468:	3381      	adds	r3, #129	; 0x81
1000b46a:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b46c:	3b77      	subs	r3, #119	; 0x77
1000b46e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b470:	3301      	adds	r3, #1
1000b472:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b474:	3301      	adds	r3, #1
1000b476:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b478:	3301      	adds	r3, #1
1000b47a:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b47c:	3b0b      	subs	r3, #11
1000b47e:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b480:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b482:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b484:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b486:	4770      	bx	lr

1000b488 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b488:	b530      	push	{r4, r5, lr}
1000b48a:	b083      	sub	sp, #12
1000b48c:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b48e:	780b      	ldrb	r3, [r1, #0]
1000b490:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b492:	784b      	ldrb	r3, [r1, #1]
1000b494:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b496:	788b      	ldrb	r3, [r1, #2]
1000b498:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b49a:	ad01      	add	r5, sp, #4
1000b49c:	0028      	movs	r0, r5
1000b49e:	4b07      	ldr	r3, [pc, #28]	; (1000b4bc <spi_attach_slave+0x34>)
1000b4a0:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b4a2:	2301      	movs	r3, #1
1000b4a4:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b4a6:	7820      	ldrb	r0, [r4, #0]
1000b4a8:	0029      	movs	r1, r5
1000b4aa:	4b05      	ldr	r3, [pc, #20]	; (1000b4c0 <spi_attach_slave+0x38>)
1000b4ac:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b4ae:	7820      	ldrb	r0, [r4, #0]
1000b4b0:	2101      	movs	r1, #1
1000b4b2:	4b04      	ldr	r3, [pc, #16]	; (1000b4c4 <spi_attach_slave+0x3c>)
1000b4b4:	4798      	blx	r3
}
1000b4b6:	b003      	add	sp, #12
1000b4b8:	bd30      	pop	{r4, r5, pc}
1000b4ba:	46c0      	nop			; (mov r8, r8)
1000b4bc:	1000baa5 	.word	0x1000baa5
1000b4c0:	1000bab5 	.word	0x1000bab5
1000b4c4:	1000bd0d 	.word	0x1000bd0d

1000b4c8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b4c8:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b4ca:	2201      	movs	r2, #1
1000b4cc:	761a      	strb	r2, [r3, #24]
}
1000b4ce:	4770      	bx	lr

1000b4d0 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b4d0:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b4d2:	2300      	movs	r3, #0
1000b4d4:	6802      	ldr	r2, [r0, #0]
1000b4d6:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b4d8:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b4da:	4a0d      	ldr	r2, [pc, #52]	; (1000b510 <spi_disable+0x40>)
1000b4dc:	4293      	cmp	r3, r2
1000b4de:	d109      	bne.n	1000b4f4 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b4e0:	2041      	movs	r0, #65	; 0x41
1000b4e2:	4c0c      	ldr	r4, [pc, #48]	; (1000b514 <spi_disable+0x44>)
1000b4e4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b4e6:	2026      	movs	r0, #38	; 0x26
1000b4e8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b4ea:	2038      	movs	r0, #56	; 0x38
1000b4ec:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b4ee:	2001      	movs	r0, #1
1000b4f0:	47a0      	blx	r4
1000b4f2:	e00b      	b.n	1000b50c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b4f4:	4a08      	ldr	r2, [pc, #32]	; (1000b518 <spi_disable+0x48>)
1000b4f6:	4293      	cmp	r3, r2
1000b4f8:	d108      	bne.n	1000b50c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b4fa:	2042      	movs	r0, #66	; 0x42
1000b4fc:	4c05      	ldr	r4, [pc, #20]	; (1000b514 <spi_disable+0x44>)
1000b4fe:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b500:	2027      	movs	r0, #39	; 0x27
1000b502:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b504:	2039      	movs	r0, #57	; 0x39
1000b506:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b508:	2002      	movs	r0, #2
1000b50a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b50c:	bd10      	pop	{r4, pc}
1000b50e:	46c0      	nop			; (mov r8, r8)
1000b510:	40006000 	.word	0x40006000
1000b514:	1000c4a5 	.word	0x1000c4a5
1000b518:	40007000 	.word	0x40007000

1000b51c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b51c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b51e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b520:	4b09      	ldr	r3, [pc, #36]	; (1000b548 <spi_reset+0x2c>)
1000b522:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b524:	4b09      	ldr	r3, [pc, #36]	; (1000b54c <spi_reset+0x30>)
1000b526:	429c      	cmp	r4, r3
1000b528:	d105      	bne.n	1000b536 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b52a:	2001      	movs	r0, #1
1000b52c:	4c08      	ldr	r4, [pc, #32]	; (1000b550 <spi_reset+0x34>)
1000b52e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b530:	2038      	movs	r0, #56	; 0x38
1000b532:	47a0      	blx	r4
1000b534:	e007      	b.n	1000b546 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b536:	4b07      	ldr	r3, [pc, #28]	; (1000b554 <spi_reset+0x38>)
1000b538:	429c      	cmp	r4, r3
1000b53a:	d104      	bne.n	1000b546 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b53c:	2002      	movs	r0, #2
1000b53e:	4c04      	ldr	r4, [pc, #16]	; (1000b550 <spi_reset+0x34>)
1000b540:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b542:	2039      	movs	r0, #57	; 0x39
1000b544:	47a0      	blx	r4
	}
}
1000b546:	bd10      	pop	{r4, pc}
1000b548:	1000b4d1 	.word	0x1000b4d1
1000b54c:	40006000 	.word	0x40006000
1000b550:	1000c811 	.word	0x1000c811
1000b554:	40007000 	.word	0x40007000

1000b558 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b558:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b55a:	465f      	mov	r7, fp
1000b55c:	4646      	mov	r6, r8
1000b55e:	b4c0      	push	{r6, r7}
1000b560:	b083      	sub	sp, #12
1000b562:	0006      	movs	r6, r0
1000b564:	4688      	mov	r8, r1
1000b566:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b568:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b56a:	7e0b      	ldrb	r3, [r1, #24]
1000b56c:	07db      	lsls	r3, r3, #31
1000b56e:	d501      	bpl.n	1000b574 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b570:	2300      	movs	r3, #0
1000b572:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b574:	0030      	movs	r0, r6
1000b576:	4b4a      	ldr	r3, [pc, #296]	; (1000b6a0 <spi_init+0x148>)
1000b578:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b57a:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b57c:	4a49      	ldr	r2, [pc, #292]	; (1000b6a4 <spi_init+0x14c>)
1000b57e:	4293      	cmp	r3, r2
1000b580:	d109      	bne.n	1000b596 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b582:	2041      	movs	r0, #65	; 0x41
1000b584:	4c48      	ldr	r4, [pc, #288]	; (1000b6a8 <spi_init+0x150>)
1000b586:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b588:	2026      	movs	r0, #38	; 0x26
1000b58a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b58c:	2038      	movs	r0, #56	; 0x38
1000b58e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b590:	2001      	movs	r0, #1
1000b592:	47a0      	blx	r4
1000b594:	e00b      	b.n	1000b5ae <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b596:	4a45      	ldr	r2, [pc, #276]	; (1000b6ac <spi_init+0x154>)
1000b598:	4293      	cmp	r3, r2
1000b59a:	d108      	bne.n	1000b5ae <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b59c:	2042      	movs	r0, #66	; 0x42
1000b59e:	4c42      	ldr	r4, [pc, #264]	; (1000b6a8 <spi_init+0x150>)
1000b5a0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b5a2:	2027      	movs	r0, #39	; 0x27
1000b5a4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b5a6:	2039      	movs	r0, #57	; 0x39
1000b5a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b5aa:	2002      	movs	r0, #2
1000b5ac:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b5ae:	a801      	add	r0, sp, #4
1000b5b0:	4b3f      	ldr	r3, [pc, #252]	; (1000b6b0 <spi_init+0x158>)
1000b5b2:	4798      	blx	r3
1000b5b4:	002c      	movs	r4, r5
1000b5b6:	3408      	adds	r4, #8
1000b5b8:	2318      	movs	r3, #24
1000b5ba:	469b      	mov	fp, r3
1000b5bc:	44ab      	add	fp, r5
1000b5be:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b5c0:	6820      	ldr	r0, [r4, #0]
1000b5c2:	1c43      	adds	r3, r0, #1
1000b5c4:	d011      	beq.n	1000b5ea <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b5c6:	782b      	ldrb	r3, [r5, #0]
1000b5c8:	2b01      	cmp	r3, #1
1000b5ca:	d102      	bne.n	1000b5d2 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b5cc:	466a      	mov	r2, sp
1000b5ce:	7113      	strb	r3, [r2, #4]
1000b5d0:	e003      	b.n	1000b5da <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b5d2:	2b00      	cmp	r3, #0
1000b5d4:	d101      	bne.n	1000b5da <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b5d6:	466a      	mov	r2, sp
1000b5d8:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b5da:	b2c0      	uxtb	r0, r0
1000b5dc:	a901      	add	r1, sp, #4
1000b5de:	4b35      	ldr	r3, [pc, #212]	; (1000b6b4 <spi_init+0x15c>)
1000b5e0:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b5e2:	8a39      	ldrh	r1, [r7, #16]
1000b5e4:	7838      	ldrb	r0, [r7, #0]
1000b5e6:	4b34      	ldr	r3, [pc, #208]	; (1000b6b8 <spi_init+0x160>)
1000b5e8:	4798      	blx	r3
1000b5ea:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b5ec:	455c      	cmp	r4, fp
1000b5ee:	d1e6      	bne.n	1000b5be <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b5f0:	78eb      	ldrb	r3, [r5, #3]
1000b5f2:	4642      	mov	r2, r8
1000b5f4:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b5f6:	782b      	ldrb	r3, [r5, #0]
1000b5f8:	2b01      	cmp	r3, #1
1000b5fa:	d100      	bne.n	1000b5fe <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b5fc:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b5fe:	782b      	ldrb	r3, [r5, #0]
1000b600:	2b00      	cmp	r3, #0
1000b602:	d101      	bne.n	1000b608 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b604:	4642      	mov	r2, r8
1000b606:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b608:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b60a:	782a      	ldrb	r2, [r5, #0]
1000b60c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b60e:	782a      	ldrb	r2, [r5, #0]
1000b610:	2a01      	cmp	r2, #1
1000b612:	d101      	bne.n	1000b618 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b614:	792a      	ldrb	r2, [r5, #4]
1000b616:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b618:	786a      	ldrb	r2, [r5, #1]
1000b61a:	2a04      	cmp	r2, #4
1000b61c:	d104      	bne.n	1000b628 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b61e:	2124      	movs	r1, #36	; 0x24
1000b620:	5c58      	ldrb	r0, [r3, r1]
1000b622:	4302      	orrs	r2, r0
1000b624:	545a      	strb	r2, [r3, r1]
1000b626:	e004      	b.n	1000b632 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b628:	2124      	movs	r1, #36	; 0x24
1000b62a:	5c5a      	ldrb	r2, [r3, r1]
1000b62c:	2004      	movs	r0, #4
1000b62e:	4382      	bics	r2, r0
1000b630:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b632:	78aa      	ldrb	r2, [r5, #2]
1000b634:	2a01      	cmp	r2, #1
1000b636:	d01a      	beq.n	1000b66e <spi_init+0x116>
1000b638:	2a00      	cmp	r2, #0
1000b63a:	d004      	beq.n	1000b646 <spi_init+0xee>
1000b63c:	2a02      	cmp	r2, #2
1000b63e:	d00c      	beq.n	1000b65a <spi_init+0x102>
1000b640:	2a03      	cmp	r2, #3
1000b642:	d01e      	beq.n	1000b682 <spi_init+0x12a>
1000b644:	e026      	b.n	1000b694 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b646:	2224      	movs	r2, #36	; 0x24
1000b648:	5c99      	ldrb	r1, [r3, r2]
1000b64a:	2002      	movs	r0, #2
1000b64c:	4381      	bics	r1, r0
1000b64e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b650:	5c99      	ldrb	r1, [r3, r2]
1000b652:	3801      	subs	r0, #1
1000b654:	4381      	bics	r1, r0
1000b656:	5499      	strb	r1, [r3, r2]
1000b658:	e01c      	b.n	1000b694 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b65a:	2224      	movs	r2, #36	; 0x24
1000b65c:	5c98      	ldrb	r0, [r3, r2]
1000b65e:	2102      	movs	r1, #2
1000b660:	4301      	orrs	r1, r0
1000b662:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b664:	5c99      	ldrb	r1, [r3, r2]
1000b666:	2001      	movs	r0, #1
1000b668:	4381      	bics	r1, r0
1000b66a:	5499      	strb	r1, [r3, r2]
1000b66c:	e012      	b.n	1000b694 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b66e:	2224      	movs	r2, #36	; 0x24
1000b670:	5c99      	ldrb	r1, [r3, r2]
1000b672:	2002      	movs	r0, #2
1000b674:	4381      	bics	r1, r0
1000b676:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b678:	5c98      	ldrb	r0, [r3, r2]
1000b67a:	2101      	movs	r1, #1
1000b67c:	4301      	orrs	r1, r0
1000b67e:	5499      	strb	r1, [r3, r2]
1000b680:	e008      	b.n	1000b694 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b682:	2224      	movs	r2, #36	; 0x24
1000b684:	5c98      	ldrb	r0, [r3, r2]
1000b686:	2102      	movs	r1, #2
1000b688:	4301      	orrs	r1, r0
1000b68a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b68c:	5c98      	ldrb	r0, [r3, r2]
1000b68e:	2101      	movs	r1, #1
1000b690:	4301      	orrs	r1, r0
1000b692:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b694:	2000      	movs	r0, #0
1000b696:	b003      	add	sp, #12
1000b698:	bc0c      	pop	{r2, r3}
1000b69a:	4690      	mov	r8, r2
1000b69c:	469b      	mov	fp, r3
1000b69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6a0:	1000b51d 	.word	0x1000b51d
1000b6a4:	40006000 	.word	0x40006000
1000b6a8:	1000c149 	.word	0x1000c149
1000b6ac:	40007000 	.word	0x40007000
1000b6b0:	1000baa5 	.word	0x1000baa5
1000b6b4:	1000bab5 	.word	0x1000bab5
1000b6b8:	1000bd99 	.word	0x1000bd99

1000b6bc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6be:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b6c0:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b6c2:	2600      	movs	r6, #0
1000b6c4:	466d      	mov	r5, sp
1000b6c6:	71ee      	strb	r6, [r5, #7]
1000b6c8:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b6ca:	2c00      	cmp	r4, #0
1000b6cc:	d034      	beq.n	1000b738 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b6ce:	2900      	cmp	r1, #0
1000b6d0:	d104      	bne.n	1000b6dc <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b6d2:	0029      	movs	r1, r5
1000b6d4:	7980      	ldrb	r0, [r0, #6]
1000b6d6:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b6d8:	2701      	movs	r7, #1
1000b6da:	e00b      	b.n	1000b6f4 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b6dc:	2a00      	cmp	r2, #0
1000b6de:	d005      	beq.n	1000b6ec <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b6e0:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b6e2:	2b00      	cmp	r3, #0
1000b6e4:	d029      	beq.n	1000b73a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b6e6:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b6e8:	2700      	movs	r7, #0
1000b6ea:	e003      	b.n	1000b6f4 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b6ec:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b6ee:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b6f0:	466a      	mov	r2, sp
1000b6f2:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b6f4:	2528      	movs	r5, #40	; 0x28
1000b6f6:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b6f8:	07c0      	lsls	r0, r0, #31
1000b6fa:	d4fc      	bmi.n	1000b6f6 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b6fc:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b6fe:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b700:	2b00      	cmp	r3, #0
1000b702:	d014      	beq.n	1000b72e <spi_transceive_buffer_wait+0x72>
1000b704:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b706:	4278      	negs	r0, r7
1000b708:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b70a:	4270      	negs	r0, r6
1000b70c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b70e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b710:	07c0      	lsls	r0, r0, #31
1000b712:	d5fc      	bpl.n	1000b70e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b714:	7808      	ldrb	r0, [r1, #0]
1000b716:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b718:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b71a:	07c0      	lsls	r0, r0, #31
1000b71c:	d5fc      	bpl.n	1000b718 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b71e:	7920      	ldrb	r0, [r4, #4]
1000b720:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b722:	3501      	adds	r5, #1
1000b724:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b726:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b728:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b72a:	42ab      	cmp	r3, r5
1000b72c:	d1ef      	bne.n	1000b70e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b72e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b730:	06db      	lsls	r3, r3, #27
1000b732:	d5fc      	bpl.n	1000b72e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b734:	2000      	movs	r0, #0
1000b736:	e000      	b.n	1000b73a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b738:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b73a:	b003      	add	sp, #12
1000b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b73e:	46c0      	nop			; (mov r8, r8)

1000b740 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b740:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b742:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b744:	2a00      	cmp	r2, #0
1000b746:	d003      	beq.n	1000b750 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b748:	2100      	movs	r1, #0
1000b74a:	4b04      	ldr	r3, [pc, #16]	; (1000b75c <spi_select_slave+0x1c>)
1000b74c:	4798      	blx	r3
1000b74e:	e002      	b.n	1000b756 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b750:	2101      	movs	r1, #1
1000b752:	4b02      	ldr	r3, [pc, #8]	; (1000b75c <spi_select_slave+0x1c>)
1000b754:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b756:	2000      	movs	r0, #0
1000b758:	bd10      	pop	{r4, pc}
1000b75a:	46c0      	nop			; (mov r8, r8)
1000b75c:	1000bd0d 	.word	0x1000bd0d

1000b760 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b760:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b762:	4b0d      	ldr	r3, [pc, #52]	; (1000b798 <dualtimer_isr_handler+0x38>)
1000b764:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b766:	2b00      	cmp	r3, #0
1000b768:	d007      	beq.n	1000b77a <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b76a:	2201      	movs	r2, #1
1000b76c:	4b0a      	ldr	r3, [pc, #40]	; (1000b798 <dualtimer_isr_handler+0x38>)
1000b76e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b770:	4b0a      	ldr	r3, [pc, #40]	; (1000b79c <dualtimer_isr_handler+0x3c>)
1000b772:	681b      	ldr	r3, [r3, #0]
1000b774:	2b00      	cmp	r3, #0
1000b776:	d000      	beq.n	1000b77a <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b778:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b77a:	2334      	movs	r3, #52	; 0x34
1000b77c:	4a06      	ldr	r2, [pc, #24]	; (1000b798 <dualtimer_isr_handler+0x38>)
1000b77e:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b780:	2b00      	cmp	r3, #0
1000b782:	d007      	beq.n	1000b794 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b784:	2101      	movs	r1, #1
1000b786:	232c      	movs	r3, #44	; 0x2c
1000b788:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b78a:	4b05      	ldr	r3, [pc, #20]	; (1000b7a0 <dualtimer_isr_handler+0x40>)
1000b78c:	681b      	ldr	r3, [r3, #0]
1000b78e:	2b00      	cmp	r3, #0
1000b790:	d000      	beq.n	1000b794 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b792:	4798      	blx	r3
	}
}
1000b794:	bd10      	pop	{r4, pc}
1000b796:	46c0      	nop			; (mov r8, r8)
1000b798:	40001000 	.word	0x40001000
1000b79c:	10016d50 	.word	0x10016d50
1000b7a0:	10016d54 	.word	0x10016d54

1000b7a4 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b7a4:	2301      	movs	r3, #1
1000b7a6:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b7a8:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b7aa:	2202      	movs	r2, #2
1000b7ac:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b7ae:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b7b0:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b7b2:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b7b4:	2200      	movs	r2, #0
1000b7b6:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b7b8:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b7ba:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b7bc:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b7be:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b7c0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b7c2:	7602      	strb	r2, [r0, #24]
}
1000b7c4:	4770      	bx	lr
1000b7c6:	46c0      	nop			; (mov r8, r8)

1000b7c8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b7c8:	2800      	cmp	r0, #0
1000b7ca:	d107      	bne.n	1000b7dc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b7cc:	2900      	cmp	r1, #0
1000b7ce:	d102      	bne.n	1000b7d6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b7d0:	4b06      	ldr	r3, [pc, #24]	; (1000b7ec <dualtimer_set_counter+0x24>)
1000b7d2:	601a      	str	r2, [r3, #0]
1000b7d4:	e009      	b.n	1000b7ea <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b7d6:	4b05      	ldr	r3, [pc, #20]	; (1000b7ec <dualtimer_set_counter+0x24>)
1000b7d8:	619a      	str	r2, [r3, #24]
1000b7da:	e006      	b.n	1000b7ea <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b7dc:	2900      	cmp	r1, #0
1000b7de:	d102      	bne.n	1000b7e6 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b7e0:	4b02      	ldr	r3, [pc, #8]	; (1000b7ec <dualtimer_set_counter+0x24>)
1000b7e2:	621a      	str	r2, [r3, #32]
1000b7e4:	e001      	b.n	1000b7ea <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b7e6:	4b01      	ldr	r3, [pc, #4]	; (1000b7ec <dualtimer_set_counter+0x24>)
1000b7e8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b7ea:	4770      	bx	lr
1000b7ec:	40001000 	.word	0x40001000

1000b7f0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b7f0:	2800      	cmp	r0, #0
1000b7f2:	d105      	bne.n	1000b800 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b7f4:	4a06      	ldr	r2, [pc, #24]	; (1000b810 <dualtimer_enable+0x20>)
1000b7f6:	7a11      	ldrb	r1, [r2, #8]
1000b7f8:	2380      	movs	r3, #128	; 0x80
1000b7fa:	430b      	orrs	r3, r1
1000b7fc:	7213      	strb	r3, [r2, #8]
1000b7fe:	e005      	b.n	1000b80c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b800:	4903      	ldr	r1, [pc, #12]	; (1000b810 <dualtimer_enable+0x20>)
1000b802:	2228      	movs	r2, #40	; 0x28
1000b804:	5c88      	ldrb	r0, [r1, r2]
1000b806:	2380      	movs	r3, #128	; 0x80
1000b808:	4303      	orrs	r3, r0
1000b80a:	548b      	strb	r3, [r1, r2]
	}
}
1000b80c:	4770      	bx	lr
1000b80e:	46c0      	nop			; (mov r8, r8)
1000b810:	40001000 	.word	0x40001000

1000b814 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b814:	2800      	cmp	r0, #0
1000b816:	d105      	bne.n	1000b824 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b818:	4a06      	ldr	r2, [pc, #24]	; (1000b834 <dualtimer_disable+0x20>)
1000b81a:	7a11      	ldrb	r1, [r2, #8]
1000b81c:	237f      	movs	r3, #127	; 0x7f
1000b81e:	400b      	ands	r3, r1
1000b820:	7213      	strb	r3, [r2, #8]
1000b822:	e005      	b.n	1000b830 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b824:	4903      	ldr	r1, [pc, #12]	; (1000b834 <dualtimer_disable+0x20>)
1000b826:	2228      	movs	r2, #40	; 0x28
1000b828:	5c88      	ldrb	r0, [r1, r2]
1000b82a:	237f      	movs	r3, #127	; 0x7f
1000b82c:	4003      	ands	r3, r0
1000b82e:	548b      	strb	r3, [r1, r2]
	}
}
1000b830:	4770      	bx	lr
1000b832:	46c0      	nop			; (mov r8, r8)
1000b834:	40001000 	.word	0x40001000

1000b838 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b838:	b570      	push	{r4, r5, r6, lr}
1000b83a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b83c:	2004      	movs	r0, #4
1000b83e:	4b39      	ldr	r3, [pc, #228]	; (1000b924 <dualtimer_init+0xec>)
1000b840:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b842:	7823      	ldrb	r3, [r4, #0]
1000b844:	2b00      	cmp	r3, #0
1000b846:	d102      	bne.n	1000b84e <dualtimer_init+0x16>
1000b848:	7b23      	ldrb	r3, [r4, #12]
1000b84a:	2b00      	cmp	r3, #0
1000b84c:	d065      	beq.n	1000b91a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b84e:	4936      	ldr	r1, [pc, #216]	; (1000b928 <dualtimer_init+0xf0>)
1000b850:	68ca      	ldr	r2, [r1, #12]
1000b852:	2320      	movs	r3, #32
1000b854:	4313      	orrs	r3, r2
1000b856:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b858:	7e22      	ldrb	r2, [r4, #24]
1000b85a:	698b      	ldr	r3, [r1, #24]
1000b85c:	2003      	movs	r0, #3
1000b85e:	4002      	ands	r2, r0
1000b860:	0112      	lsls	r2, r2, #4
1000b862:	302d      	adds	r0, #45	; 0x2d
1000b864:	4383      	bics	r3, r0
1000b866:	4313      	orrs	r3, r2
1000b868:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b86a:	7823      	ldrb	r3, [r4, #0]
1000b86c:	2b00      	cmp	r3, #0
1000b86e:	d026      	beq.n	1000b8be <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b870:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b872:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b874:	2b00      	cmp	r3, #0
1000b876:	d003      	beq.n	1000b880 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b878:	3b02      	subs	r3, #2
1000b87a:	425d      	negs	r5, r3
1000b87c:	415d      	adcs	r5, r3
1000b87e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b880:	78a2      	ldrb	r2, [r4, #2]
1000b882:	0052      	lsls	r2, r2, #1
1000b884:	2502      	movs	r5, #2
1000b886:	402a      	ands	r2, r5
1000b888:	78e3      	ldrb	r3, [r4, #3]
1000b88a:	009b      	lsls	r3, r3, #2
1000b88c:	350a      	adds	r5, #10
1000b88e:	402b      	ands	r3, r5
1000b890:	431a      	orrs	r2, r3
1000b892:	0015      	movs	r5, r2
1000b894:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b896:	7923      	ldrb	r3, [r4, #4]
1000b898:	2b00      	cmp	r3, #0
1000b89a:	d001      	beq.n	1000b8a0 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b89c:	2320      	movs	r3, #32
1000b89e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b8a0:	4b22      	ldr	r3, [pc, #136]	; (1000b92c <dualtimer_init+0xf4>)
1000b8a2:	68a2      	ldr	r2, [r4, #8]
1000b8a4:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b8a6:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b8a8:	491f      	ldr	r1, [pc, #124]	; (1000b928 <dualtimer_init+0xf0>)
1000b8aa:	22c4      	movs	r2, #196	; 0xc4
1000b8ac:	0052      	lsls	r2, r2, #1
1000b8ae:	5c88      	ldrb	r0, [r1, r2]
1000b8b0:	2301      	movs	r3, #1
1000b8b2:	4303      	orrs	r3, r0
1000b8b4:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b8b6:	2000      	movs	r0, #0
1000b8b8:	4b1d      	ldr	r3, [pc, #116]	; (1000b930 <dualtimer_init+0xf8>)
1000b8ba:	4798      	blx	r3
1000b8bc:	e000      	b.n	1000b8c0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b8be:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b8c0:	7b23      	ldrb	r3, [r4, #12]
1000b8c2:	2b00      	cmp	r3, #0
1000b8c4:	d029      	beq.n	1000b91a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b8c6:	7b63      	ldrb	r3, [r4, #13]
1000b8c8:	2b00      	cmp	r3, #0
1000b8ca:	d005      	beq.n	1000b8d8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b8cc:	2b01      	cmp	r3, #1
1000b8ce:	d005      	beq.n	1000b8dc <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b8d0:	2b02      	cmp	r3, #2
1000b8d2:	d104      	bne.n	1000b8de <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b8d4:	2540      	movs	r5, #64	; 0x40
1000b8d6:	e002      	b.n	1000b8de <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b8d8:	2501      	movs	r5, #1
1000b8da:	e000      	b.n	1000b8de <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b8dc:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b8de:	7ba3      	ldrb	r3, [r4, #14]
1000b8e0:	005b      	lsls	r3, r3, #1
1000b8e2:	2102      	movs	r1, #2
1000b8e4:	4019      	ands	r1, r3
1000b8e6:	7be2      	ldrb	r2, [r4, #15]
1000b8e8:	0092      	lsls	r2, r2, #2
1000b8ea:	230c      	movs	r3, #12
1000b8ec:	4013      	ands	r3, r2
1000b8ee:	430b      	orrs	r3, r1
1000b8f0:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b8f2:	7c23      	ldrb	r3, [r4, #16]
1000b8f4:	2b00      	cmp	r3, #0
1000b8f6:	d001      	beq.n	1000b8fc <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b8f8:	2320      	movs	r3, #32
1000b8fa:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b8fc:	6962      	ldr	r2, [r4, #20]
1000b8fe:	4b0b      	ldr	r3, [pc, #44]	; (1000b92c <dualtimer_init+0xf4>)
1000b900:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b902:	2228      	movs	r2, #40	; 0x28
1000b904:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b906:	4908      	ldr	r1, [pc, #32]	; (1000b928 <dualtimer_init+0xf0>)
1000b908:	3261      	adds	r2, #97	; 0x61
1000b90a:	32ff      	adds	r2, #255	; 0xff
1000b90c:	5c88      	ldrb	r0, [r1, r2]
1000b90e:	2302      	movs	r3, #2
1000b910:	4303      	orrs	r3, r0
1000b912:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b914:	2001      	movs	r0, #1
1000b916:	4b06      	ldr	r3, [pc, #24]	; (1000b930 <dualtimer_init+0xf8>)
1000b918:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b91a:	4906      	ldr	r1, [pc, #24]	; (1000b934 <dualtimer_init+0xfc>)
1000b91c:	201e      	movs	r0, #30
1000b91e:	4b06      	ldr	r3, [pc, #24]	; (1000b938 <dualtimer_init+0x100>)
1000b920:	4798      	blx	r3
}
1000b922:	bd70      	pop	{r4, r5, r6, pc}
1000b924:	1000c811 	.word	0x1000c811
1000b928:	4000b000 	.word	0x4000b000
1000b92c:	40001000 	.word	0x40001000
1000b930:	1000b7f1 	.word	0x1000b7f1
1000b934:	1000b761 	.word	0x1000b761
1000b938:	1000cc79 	.word	0x1000cc79

1000b93c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000b93c:	2800      	cmp	r0, #0
1000b93e:	d102      	bne.n	1000b946 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000b940:	4b02      	ldr	r3, [pc, #8]	; (1000b94c <dualtimer_register_callback+0x10>)
1000b942:	6019      	str	r1, [r3, #0]
1000b944:	e001      	b.n	1000b94a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000b946:	4b02      	ldr	r3, [pc, #8]	; (1000b950 <dualtimer_register_callback+0x14>)
1000b948:	6019      	str	r1, [r3, #0]
	}
}
1000b94a:	4770      	bx	lr
1000b94c:	10016d50 	.word	0x10016d50
1000b950:	10016d54 	.word	0x10016d54

1000b954 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b954:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b956:	4b16      	ldr	r3, [pc, #88]	; (1000b9b0 <gpio_port0_isr_handler+0x5c>)
1000b958:	681d      	ldr	r5, [r3, #0]
1000b95a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b95c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b95e:	07cb      	lsls	r3, r1, #31
1000b960:	d407      	bmi.n	1000b972 <gpio_port0_isr_handler+0x1e>
1000b962:	2301      	movs	r3, #1
1000b964:	2401      	movs	r4, #1
1000b966:	0018      	movs	r0, r3
1000b968:	0022      	movs	r2, r4
1000b96a:	409a      	lsls	r2, r3
1000b96c:	4211      	tst	r1, r2
1000b96e:	d014      	beq.n	1000b99a <gpio_port0_isr_handler+0x46>
1000b970:	e001      	b.n	1000b976 <gpio_port0_isr_handler+0x22>
1000b972:	2201      	movs	r2, #1
1000b974:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b976:	b292      	uxth	r2, r2
1000b978:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b97a:	2346      	movs	r3, #70	; 0x46
1000b97c:	4a0c      	ldr	r2, [pc, #48]	; (1000b9b0 <gpio_port0_isr_handler+0x5c>)
1000b97e:	5ad3      	ldrh	r3, [r2, r3]
1000b980:	4103      	asrs	r3, r0
1000b982:	07db      	lsls	r3, r3, #31
1000b984:	d50c      	bpl.n	1000b9a0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b986:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b988:	5ad3      	ldrh	r3, [r2, r3]
1000b98a:	4103      	asrs	r3, r0
1000b98c:	07db      	lsls	r3, r3, #31
1000b98e:	d507      	bpl.n	1000b9a0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b990:	0080      	lsls	r0, r0, #2
1000b992:	1810      	adds	r0, r2, r0
1000b994:	6843      	ldr	r3, [r0, #4]
1000b996:	4798      	blx	r3
1000b998:	e002      	b.n	1000b9a0 <gpio_port0_isr_handler+0x4c>
1000b99a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b99c:	2b10      	cmp	r3, #16
1000b99e:	d1e2      	bne.n	1000b966 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b9a0:	2180      	movs	r1, #128	; 0x80
1000b9a2:	0409      	lsls	r1, r1, #16
1000b9a4:	23c0      	movs	r3, #192	; 0xc0
1000b9a6:	005b      	lsls	r3, r3, #1
1000b9a8:	4a02      	ldr	r2, [pc, #8]	; (1000b9b4 <gpio_port0_isr_handler+0x60>)
1000b9aa:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b9ac:	bd70      	pop	{r4, r5, r6, pc}
1000b9ae:	46c0      	nop			; (mov r8, r8)
1000b9b0:	100189d0 	.word	0x100189d0
1000b9b4:	e000e100 	.word	0xe000e100

1000b9b8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b9ba:	4b18      	ldr	r3, [pc, #96]	; (1000ba1c <gpio_port1_isr_handler+0x64>)
1000b9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b9be:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b9c0:	b2b6      	uxth	r6, r6
1000b9c2:	0037      	movs	r7, r6
1000b9c4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b9c6:	0b76      	lsrs	r6, r6, #13
1000b9c8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b9ca:	4d14      	ldr	r5, [pc, #80]	; (1000ba1c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b9cc:	2e00      	cmp	r6, #0
1000b9ce:	d001      	beq.n	1000b9d4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b9d0:	4b13      	ldr	r3, [pc, #76]	; (1000ba20 <gpio_port1_isr_handler+0x68>)
1000b9d2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b9d4:	0022      	movs	r2, r4
1000b9d6:	2301      	movs	r3, #1
1000b9d8:	40a3      	lsls	r3, r4
1000b9da:	421f      	tst	r7, r3
1000b9dc:	d013      	beq.n	1000ba06 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b9de:	b29b      	uxth	r3, r3
1000b9e0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b9e2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b9e4:	238e      	movs	r3, #142	; 0x8e
1000b9e6:	5aeb      	ldrh	r3, [r5, r3]
1000b9e8:	4123      	asrs	r3, r4
1000b9ea:	07db      	lsls	r3, r3, #31
1000b9ec:	d50b      	bpl.n	1000ba06 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b9ee:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b9f0:	490a      	ldr	r1, [pc, #40]	; (1000ba1c <gpio_port1_isr_handler+0x64>)
1000b9f2:	5acb      	ldrh	r3, [r1, r3]
1000b9f4:	4123      	asrs	r3, r4
1000b9f6:	07db      	lsls	r3, r3, #31
1000b9f8:	d505      	bpl.n	1000ba06 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b9fa:	3212      	adds	r2, #18
1000b9fc:	0092      	lsls	r2, r2, #2
1000b9fe:	188a      	adds	r2, r1, r2
1000ba00:	6853      	ldr	r3, [r2, #4]
1000ba02:	4798      	blx	r3
				break;
1000ba04:	e002      	b.n	1000ba0c <gpio_port1_isr_handler+0x54>
1000ba06:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000ba08:	2c10      	cmp	r4, #16
1000ba0a:	d1df      	bne.n	1000b9cc <gpio_port1_isr_handler+0x14>
1000ba0c:	2180      	movs	r1, #128	; 0x80
1000ba0e:	0449      	lsls	r1, r1, #17
1000ba10:	23c0      	movs	r3, #192	; 0xc0
1000ba12:	005b      	lsls	r3, r3, #1
1000ba14:	4a03      	ldr	r2, [pc, #12]	; (1000ba24 <gpio_port1_isr_handler+0x6c>)
1000ba16:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ba1a:	46c0      	nop			; (mov r8, r8)
1000ba1c:	100189d0 	.word	0x100189d0
1000ba20:	0001bc51 	.word	0x0001bc51
1000ba24:	e000e100 	.word	0xe000e100

1000ba28 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000ba28:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000ba2a:	2390      	movs	r3, #144	; 0x90
1000ba2c:	4a1b      	ldr	r2, [pc, #108]	; (1000ba9c <gpio_port2_isr_handler+0x74>)
1000ba2e:	58d2      	ldr	r2, [r2, r3]
1000ba30:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ba32:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ba34:	04d9      	lsls	r1, r3, #19
1000ba36:	d414      	bmi.n	1000ba62 <gpio_port2_isr_handler+0x3a>
1000ba38:	0499      	lsls	r1, r3, #18
1000ba3a:	d40a      	bmi.n	1000ba52 <gpio_port2_isr_handler+0x2a>
1000ba3c:	0459      	lsls	r1, r3, #17
1000ba3e:	d40c      	bmi.n	1000ba5a <gpio_port2_isr_handler+0x32>
1000ba40:	0bdb      	lsrs	r3, r3, #15
1000ba42:	03db      	lsls	r3, r3, #15
1000ba44:	b29b      	uxth	r3, r3
1000ba46:	2b00      	cmp	r3, #0
1000ba48:	d020      	beq.n	1000ba8c <gpio_port2_isr_handler+0x64>
1000ba4a:	2380      	movs	r3, #128	; 0x80
1000ba4c:	021b      	lsls	r3, r3, #8
1000ba4e:	210f      	movs	r1, #15
1000ba50:	e00a      	b.n	1000ba68 <gpio_port2_isr_handler+0x40>
1000ba52:	2380      	movs	r3, #128	; 0x80
1000ba54:	019b      	lsls	r3, r3, #6
1000ba56:	210d      	movs	r1, #13
1000ba58:	e006      	b.n	1000ba68 <gpio_port2_isr_handler+0x40>
1000ba5a:	2380      	movs	r3, #128	; 0x80
1000ba5c:	01db      	lsls	r3, r3, #7
1000ba5e:	210e      	movs	r1, #14
1000ba60:	e002      	b.n	1000ba68 <gpio_port2_isr_handler+0x40>
1000ba62:	2380      	movs	r3, #128	; 0x80
1000ba64:	015b      	lsls	r3, r3, #5
1000ba66:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000ba68:	b29b      	uxth	r3, r3
1000ba6a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ba6c:	23d6      	movs	r3, #214	; 0xd6
1000ba6e:	4a0b      	ldr	r2, [pc, #44]	; (1000ba9c <gpio_port2_isr_handler+0x74>)
1000ba70:	5ad3      	ldrh	r3, [r2, r3]
1000ba72:	410b      	asrs	r3, r1
1000ba74:	07db      	lsls	r3, r3, #31
1000ba76:	d509      	bpl.n	1000ba8c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000ba78:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ba7a:	5ad3      	ldrh	r3, [r2, r3]
1000ba7c:	410b      	asrs	r3, r1
1000ba7e:	07db      	lsls	r3, r3, #31
1000ba80:	d504      	bpl.n	1000ba8c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000ba82:	3124      	adds	r1, #36	; 0x24
1000ba84:	0089      	lsls	r1, r1, #2
1000ba86:	1851      	adds	r1, r2, r1
1000ba88:	684b      	ldr	r3, [r1, #4]
1000ba8a:	4798      	blx	r3
1000ba8c:	2180      	movs	r1, #128	; 0x80
1000ba8e:	0489      	lsls	r1, r1, #18
1000ba90:	23c0      	movs	r3, #192	; 0xc0
1000ba92:	005b      	lsls	r3, r3, #1
1000ba94:	4a02      	ldr	r2, [pc, #8]	; (1000baa0 <gpio_port2_isr_handler+0x78>)
1000ba96:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000ba98:	bd10      	pop	{r4, pc}
1000ba9a:	46c0      	nop			; (mov r8, r8)
1000ba9c:	100189d0 	.word	0x100189d0
1000baa0:	e000e100 	.word	0xe000e100

1000baa4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000baa4:	2300      	movs	r3, #0
1000baa6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000baa8:	2201      	movs	r2, #1
1000baaa:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000baac:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000baae:	70c3      	strb	r3, [r0, #3]
}
1000bab0:	4770      	bx	lr
1000bab2:	46c0      	nop			; (mov r8, r8)

1000bab4 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bab4:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bab6:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bab8:	2801      	cmp	r0, #1
1000baba:	d800      	bhi.n	1000babe <gpio_pin_set_config+0xa>
1000babc:	e0c8      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000babe:	2807      	cmp	r0, #7
1000bac0:	d809      	bhi.n	1000bad6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bac2:	4d64      	ldr	r5, [pc, #400]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000bac4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bac6:	3b10      	subs	r3, #16
1000bac8:	4003      	ands	r3, r0
1000baca:	009b      	lsls	r3, r3, #2
1000bacc:	2407      	movs	r4, #7
1000bace:	409c      	lsls	r4, r3
1000bad0:	43a2      	bics	r2, r4
1000bad2:	646a      	str	r2, [r5, #68]	; 0x44
1000bad4:	e029      	b.n	1000bb2a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bad6:	280f      	cmp	r0, #15
1000bad8:	d809      	bhi.n	1000baee <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bada:	4d5e      	ldr	r5, [pc, #376]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000badc:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bade:	2307      	movs	r3, #7
1000bae0:	4003      	ands	r3, r0
1000bae2:	009b      	lsls	r3, r3, #2
1000bae4:	2407      	movs	r4, #7
1000bae6:	409c      	lsls	r4, r3
1000bae8:	43a2      	bics	r2, r4
1000baea:	64aa      	str	r2, [r5, #72]	; 0x48
1000baec:	e01d      	b.n	1000bb2a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000baee:	2817      	cmp	r0, #23
1000baf0:	d809      	bhi.n	1000bb06 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000baf2:	4d58      	ldr	r5, [pc, #352]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000baf4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000baf6:	2307      	movs	r3, #7
1000baf8:	4003      	ands	r3, r0
1000bafa:	009b      	lsls	r3, r3, #2
1000bafc:	2407      	movs	r4, #7
1000bafe:	409c      	lsls	r4, r3
1000bb00:	43a2      	bics	r2, r4
1000bb02:	64ea      	str	r2, [r5, #76]	; 0x4c
1000bb04:	e011      	b.n	1000bb2a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bb06:	0003      	movs	r3, r0
1000bb08:	3b2c      	subs	r3, #44	; 0x2c
1000bb0a:	2b03      	cmp	r3, #3
1000bb0c:	d80d      	bhi.n	1000bb2a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bb0e:	4d52      	ldr	r5, [pc, #328]	; (1000bc58 <gpio_pin_set_config+0x1a4>)
1000bb10:	2482      	movs	r4, #130	; 0x82
1000bb12:	00e4      	lsls	r4, r4, #3
1000bb14:	5d2a      	ldrb	r2, [r5, r4]
1000bb16:	0712      	lsls	r2, r2, #28
1000bb18:	2601      	movs	r6, #1
1000bb1a:	409e      	lsls	r6, r3
1000bb1c:	0f12      	lsrs	r2, r2, #28
1000bb1e:	5d2b      	ldrb	r3, [r5, r4]
1000bb20:	43b2      	bics	r2, r6
1000bb22:	260f      	movs	r6, #15
1000bb24:	43b3      	bics	r3, r6
1000bb26:	4313      	orrs	r3, r2
1000bb28:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bb2a:	0003      	movs	r3, r0
1000bb2c:	3b1d      	subs	r3, #29
1000bb2e:	2b02      	cmp	r3, #2
1000bb30:	d829      	bhi.n	1000bb86 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bb32:	784b      	ldrb	r3, [r1, #1]
1000bb34:	2b01      	cmp	r3, #1
1000bb36:	d108      	bne.n	1000bb4a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bb38:	4d47      	ldr	r5, [pc, #284]	; (1000bc58 <gpio_pin_set_config+0x1a4>)
1000bb3a:	7d2b      	ldrb	r3, [r5, #20]
1000bb3c:	241f      	movs	r4, #31
1000bb3e:	1a24      	subs	r4, r4, r0
1000bb40:	2201      	movs	r2, #1
1000bb42:	40a2      	lsls	r2, r4
1000bb44:	4393      	bics	r3, r2
1000bb46:	752b      	strb	r3, [r5, #20]
1000bb48:	e008      	b.n	1000bb5c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bb4a:	4c43      	ldr	r4, [pc, #268]	; (1000bc58 <gpio_pin_set_config+0x1a4>)
1000bb4c:	7d25      	ldrb	r5, [r4, #20]
1000bb4e:	221f      	movs	r2, #31
1000bb50:	1a12      	subs	r2, r2, r0
1000bb52:	2301      	movs	r3, #1
1000bb54:	4093      	lsls	r3, r2
1000bb56:	432b      	orrs	r3, r5
1000bb58:	b2db      	uxtb	r3, r3
1000bb5a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bb5c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb5e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bb60:	2a00      	cmp	r2, #0
1000bb62:	d075      	beq.n	1000bc50 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bb64:	493c      	ldr	r1, [pc, #240]	; (1000bc58 <gpio_pin_set_config+0x1a4>)
1000bb66:	880c      	ldrh	r4, [r1, #0]
1000bb68:	221f      	movs	r2, #31
1000bb6a:	1a10      	subs	r0, r2, r0
1000bb6c:	0080      	lsls	r0, r0, #2
1000bb6e:	3301      	adds	r3, #1
1000bb70:	4083      	lsls	r3, r0
1000bb72:	4323      	orrs	r3, r4
1000bb74:	b29b      	uxth	r3, r3
1000bb76:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bb78:	4a38      	ldr	r2, [pc, #224]	; (1000bc5c <gpio_pin_set_config+0x1a8>)
1000bb7a:	7811      	ldrb	r1, [r2, #0]
1000bb7c:	2302      	movs	r3, #2
1000bb7e:	430b      	orrs	r3, r1
1000bb80:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb82:	2300      	movs	r3, #0
1000bb84:	e064      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bb86:	780a      	ldrb	r2, [r1, #0]
1000bb88:	2a00      	cmp	r2, #0
1000bb8a:	d140      	bne.n	1000bc0e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bb8c:	280f      	cmp	r0, #15
1000bb8e:	d808      	bhi.n	1000bba2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bb90:	2301      	movs	r3, #1
1000bb92:	4083      	lsls	r3, r0
1000bb94:	b29b      	uxth	r3, r3
1000bb96:	4a32      	ldr	r2, [pc, #200]	; (1000bc60 <gpio_pin_set_config+0x1ac>)
1000bb98:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb9a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bb9c:	281f      	cmp	r0, #31
1000bb9e:	d857      	bhi.n	1000bc50 <gpio_pin_set_config+0x19c>
1000bba0:	e012      	b.n	1000bbc8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bba2:	281f      	cmp	r0, #31
1000bba4:	d807      	bhi.n	1000bbb6 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bba6:	220f      	movs	r2, #15
1000bba8:	4002      	ands	r2, r0
1000bbaa:	2301      	movs	r3, #1
1000bbac:	4093      	lsls	r3, r2
1000bbae:	b29b      	uxth	r3, r3
1000bbb0:	4a2c      	ldr	r2, [pc, #176]	; (1000bc64 <gpio_pin_set_config+0x1b0>)
1000bbb2:	8293      	strh	r3, [r2, #20]
1000bbb4:	e008      	b.n	1000bbc8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bbb6:	230f      	movs	r3, #15
1000bbb8:	4018      	ands	r0, r3
1000bbba:	3b0e      	subs	r3, #14
1000bbbc:	4083      	lsls	r3, r0
1000bbbe:	b29b      	uxth	r3, r3
1000bbc0:	4a29      	ldr	r2, [pc, #164]	; (1000bc68 <gpio_pin_set_config+0x1b4>)
1000bbc2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bbc4:	2300      	movs	r3, #0
1000bbc6:	e043      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bbc8:	784b      	ldrb	r3, [r1, #1]
1000bbca:	2b01      	cmp	r3, #1
1000bbcc:	d00c      	beq.n	1000bbe8 <gpio_pin_set_config+0x134>
1000bbce:	2b00      	cmp	r3, #0
1000bbd0:	d002      	beq.n	1000bbd8 <gpio_pin_set_config+0x124>
1000bbd2:	2b02      	cmp	r3, #2
1000bbd4:	d010      	beq.n	1000bbf8 <gpio_pin_set_config+0x144>
1000bbd6:	e03a      	b.n	1000bc4e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bbd8:	491e      	ldr	r1, [pc, #120]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000bbda:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bbdc:	2301      	movs	r3, #1
1000bbde:	4083      	lsls	r3, r0
1000bbe0:	4313      	orrs	r3, r2
1000bbe2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bbe4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bbe6:	e033      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bbe8:	491a      	ldr	r1, [pc, #104]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000bbea:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bbec:	2201      	movs	r2, #1
1000bbee:	4082      	lsls	r2, r0
1000bbf0:	4393      	bics	r3, r2
1000bbf2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bbf4:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bbf6:	e02b      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bbf8:	4b16      	ldr	r3, [pc, #88]	; (1000bc54 <gpio_pin_set_config+0x1a0>)
1000bbfa:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bbfc:	2201      	movs	r2, #1
1000bbfe:	4082      	lsls	r2, r0
1000bc00:	4311      	orrs	r1, r2
1000bc02:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bc04:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bc06:	4391      	bics	r1, r2
1000bc08:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc0a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bc0c:	e020      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc0e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bc10:	2a01      	cmp	r2, #1
1000bc12:	d11d      	bne.n	1000bc50 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bc14:	280f      	cmp	r0, #15
1000bc16:	d806      	bhi.n	1000bc26 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bc18:	3301      	adds	r3, #1
1000bc1a:	4083      	lsls	r3, r0
1000bc1c:	b29b      	uxth	r3, r3
1000bc1e:	4a10      	ldr	r2, [pc, #64]	; (1000bc60 <gpio_pin_set_config+0x1ac>)
1000bc20:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc22:	2300      	movs	r3, #0
1000bc24:	e014      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bc26:	281f      	cmp	r0, #31
1000bc28:	d808      	bhi.n	1000bc3c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bc2a:	230f      	movs	r3, #15
1000bc2c:	4018      	ands	r0, r3
1000bc2e:	3b0e      	subs	r3, #14
1000bc30:	4083      	lsls	r3, r0
1000bc32:	b29b      	uxth	r3, r3
1000bc34:	4a0b      	ldr	r2, [pc, #44]	; (1000bc64 <gpio_pin_set_config+0x1b0>)
1000bc36:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc38:	2300      	movs	r3, #0
1000bc3a:	e009      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bc3c:	230f      	movs	r3, #15
1000bc3e:	4018      	ands	r0, r3
1000bc40:	3b0e      	subs	r3, #14
1000bc42:	4083      	lsls	r3, r0
1000bc44:	b29b      	uxth	r3, r3
1000bc46:	4a08      	ldr	r2, [pc, #32]	; (1000bc68 <gpio_pin_set_config+0x1b4>)
1000bc48:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc4a:	2300      	movs	r3, #0
1000bc4c:	e000      	b.n	1000bc50 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bc4e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bc50:	0018      	movs	r0, r3
1000bc52:	bd70      	pop	{r4, r5, r6, pc}
1000bc54:	4000b000 	.word	0x4000b000
1000bc58:	4000f000 	.word	0x4000f000
1000bc5c:	4000e000 	.word	0x4000e000
1000bc60:	40010000 	.word	0x40010000
1000bc64:	40011000 	.word	0x40011000
1000bc68:	40013000 	.word	0x40013000

1000bc6c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bc6c:	280f      	cmp	r0, #15
1000bc6e:	d806      	bhi.n	1000bc7e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000bc70:	4b0f      	ldr	r3, [pc, #60]	; (1000bcb0 <gpio_pin_get_input_level+0x44>)
1000bc72:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000bc74:	2301      	movs	r3, #1
1000bc76:	4083      	lsls	r3, r0
1000bc78:	0018      	movs	r0, r3
1000bc7a:	4008      	ands	r0, r1
1000bc7c:	e014      	b.n	1000bca8 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000bc7e:	281f      	cmp	r0, #31
1000bc80:	d809      	bhi.n	1000bc96 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000bc82:	4b0c      	ldr	r3, [pc, #48]	; (1000bcb4 <gpio_pin_get_input_level+0x48>)
1000bc84:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bc86:	230f      	movs	r3, #15
1000bc88:	4003      	ands	r3, r0
1000bc8a:	001a      	movs	r2, r3
1000bc8c:	2301      	movs	r3, #1
1000bc8e:	4093      	lsls	r3, r2
1000bc90:	0018      	movs	r0, r3
1000bc92:	4008      	ands	r0, r1
1000bc94:	e008      	b.n	1000bca8 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000bc96:	4b08      	ldr	r3, [pc, #32]	; (1000bcb8 <gpio_pin_get_input_level+0x4c>)
1000bc98:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bc9a:	230f      	movs	r3, #15
1000bc9c:	4003      	ands	r3, r0
1000bc9e:	001a      	movs	r2, r3
1000bca0:	2301      	movs	r3, #1
1000bca2:	4093      	lsls	r3, r2
1000bca4:	0018      	movs	r0, r3
1000bca6:	4008      	ands	r0, r1
	}

	return regval;
1000bca8:	1e43      	subs	r3, r0, #1
1000bcaa:	4198      	sbcs	r0, r3
1000bcac:	b2c0      	uxtb	r0, r0
}
1000bcae:	4770      	bx	lr
1000bcb0:	40010000 	.word	0x40010000
1000bcb4:	40011000 	.word	0x40011000
1000bcb8:	40013000 	.word	0x40013000

1000bcbc <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bcbc:	280f      	cmp	r0, #15
1000bcbe:	d806      	bhi.n	1000bcce <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000bcc0:	4b0f      	ldr	r3, [pc, #60]	; (1000bd00 <gpio_pin_get_output_level+0x44>)
1000bcc2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000bcc4:	2301      	movs	r3, #1
1000bcc6:	4083      	lsls	r3, r0
1000bcc8:	0018      	movs	r0, r3
1000bcca:	4008      	ands	r0, r1
1000bccc:	e014      	b.n	1000bcf8 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000bcce:	281f      	cmp	r0, #31
1000bcd0:	d809      	bhi.n	1000bce6 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000bcd2:	4b0c      	ldr	r3, [pc, #48]	; (1000bd04 <gpio_pin_get_output_level+0x48>)
1000bcd4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bcd6:	230f      	movs	r3, #15
1000bcd8:	4003      	ands	r3, r0
1000bcda:	001a      	movs	r2, r3
1000bcdc:	2301      	movs	r3, #1
1000bcde:	4093      	lsls	r3, r2
1000bce0:	0018      	movs	r0, r3
1000bce2:	4008      	ands	r0, r1
1000bce4:	e008      	b.n	1000bcf8 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000bce6:	4b08      	ldr	r3, [pc, #32]	; (1000bd08 <gpio_pin_get_output_level+0x4c>)
1000bce8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000bcea:	230f      	movs	r3, #15
1000bcec:	4003      	ands	r3, r0
1000bcee:	001a      	movs	r2, r3
1000bcf0:	2301      	movs	r3, #1
1000bcf2:	4093      	lsls	r3, r2
1000bcf4:	0018      	movs	r0, r3
1000bcf6:	4008      	ands	r0, r1
	}

	return regval;
1000bcf8:	1e43      	subs	r3, r0, #1
1000bcfa:	4198      	sbcs	r0, r3
1000bcfc:	b2c0      	uxtb	r0, r0
}
1000bcfe:	4770      	bx	lr
1000bd00:	40010000 	.word	0x40010000
1000bd04:	40011000 	.word	0x40011000
1000bd08:	40013000 	.word	0x40013000

1000bd0c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000bd0c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000bd0e:	280f      	cmp	r0, #15
1000bd10:	d810      	bhi.n	1000bd34 <gpio_pin_set_output_level+0x28>
		if(level) {
1000bd12:	2900      	cmp	r1, #0
1000bd14:	d007      	beq.n	1000bd26 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000bd16:	4a1d      	ldr	r2, [pc, #116]	; (1000bd8c <gpio_pin_set_output_level+0x80>)
1000bd18:	8891      	ldrh	r1, [r2, #4]
1000bd1a:	2301      	movs	r3, #1
1000bd1c:	4083      	lsls	r3, r0
1000bd1e:	430b      	orrs	r3, r1
1000bd20:	b29b      	uxth	r3, r3
1000bd22:	8093      	strh	r3, [r2, #4]
1000bd24:	e031      	b.n	1000bd8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000bd26:	4919      	ldr	r1, [pc, #100]	; (1000bd8c <gpio_pin_set_output_level+0x80>)
1000bd28:	888b      	ldrh	r3, [r1, #4]
1000bd2a:	2201      	movs	r2, #1
1000bd2c:	4082      	lsls	r2, r0
1000bd2e:	4393      	bics	r3, r2
1000bd30:	808b      	strh	r3, [r1, #4]
1000bd32:	e02a      	b.n	1000bd8a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000bd34:	281f      	cmp	r0, #31
1000bd36:	d814      	bhi.n	1000bd62 <gpio_pin_set_output_level+0x56>
		if(level) {
1000bd38:	2900      	cmp	r1, #0
1000bd3a:	d009      	beq.n	1000bd50 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bd3c:	4914      	ldr	r1, [pc, #80]	; (1000bd90 <gpio_pin_set_output_level+0x84>)
1000bd3e:	888c      	ldrh	r4, [r1, #4]
1000bd40:	220f      	movs	r2, #15
1000bd42:	4010      	ands	r0, r2
1000bd44:	2301      	movs	r3, #1
1000bd46:	4083      	lsls	r3, r0
1000bd48:	4323      	orrs	r3, r4
1000bd4a:	b29b      	uxth	r3, r3
1000bd4c:	808b      	strh	r3, [r1, #4]
1000bd4e:	e01c      	b.n	1000bd8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bd50:	490f      	ldr	r1, [pc, #60]	; (1000bd90 <gpio_pin_set_output_level+0x84>)
1000bd52:	888b      	ldrh	r3, [r1, #4]
1000bd54:	220f      	movs	r2, #15
1000bd56:	4010      	ands	r0, r2
1000bd58:	3a0e      	subs	r2, #14
1000bd5a:	4082      	lsls	r2, r0
1000bd5c:	4393      	bics	r3, r2
1000bd5e:	808b      	strh	r3, [r1, #4]
1000bd60:	e013      	b.n	1000bd8a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000bd62:	2900      	cmp	r1, #0
1000bd64:	d009      	beq.n	1000bd7a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000bd66:	490b      	ldr	r1, [pc, #44]	; (1000bd94 <gpio_pin_set_output_level+0x88>)
1000bd68:	888c      	ldrh	r4, [r1, #4]
1000bd6a:	220f      	movs	r2, #15
1000bd6c:	4010      	ands	r0, r2
1000bd6e:	2301      	movs	r3, #1
1000bd70:	4083      	lsls	r3, r0
1000bd72:	4323      	orrs	r3, r4
1000bd74:	b29b      	uxth	r3, r3
1000bd76:	808b      	strh	r3, [r1, #4]
1000bd78:	e007      	b.n	1000bd8a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000bd7a:	4906      	ldr	r1, [pc, #24]	; (1000bd94 <gpio_pin_set_output_level+0x88>)
1000bd7c:	888b      	ldrh	r3, [r1, #4]
1000bd7e:	220f      	movs	r2, #15
1000bd80:	4010      	ands	r0, r2
1000bd82:	3a0e      	subs	r2, #14
1000bd84:	4082      	lsls	r2, r0
1000bd86:	4393      	bics	r3, r2
1000bd88:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000bd8a:	bd10      	pop	{r4, pc}
1000bd8c:	40010000 	.word	0x40010000
1000bd90:	40011000 	.word	0x40011000
1000bd94:	40013000 	.word	0x40013000

1000bd98 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bd98:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bd9a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bd9c:	23ff      	movs	r3, #255	; 0xff
1000bd9e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bda0:	2807      	cmp	r0, #7
1000bda2:	d833      	bhi.n	1000be0c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bda4:	4a4e      	ldr	r2, [pc, #312]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000bda6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bda8:	3bf8      	subs	r3, #248	; 0xf8
1000bdaa:	4003      	ands	r3, r0
1000bdac:	009b      	lsls	r3, r3, #2
1000bdae:	2607      	movs	r6, #7
1000bdb0:	409e      	lsls	r6, r3
1000bdb2:	43b4      	bics	r4, r6
1000bdb4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bdb6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bdb8:	000e      	movs	r6, r1
1000bdba:	409e      	lsls	r6, r3
1000bdbc:	0033      	movs	r3, r6
1000bdbe:	4323      	orrs	r3, r4
1000bdc0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bdc2:	2901      	cmp	r1, #1
1000bdc4:	d000      	beq.n	1000bdc8 <gpio_pinmux_cofiguration+0x30>
1000bdc6:	e08a      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000bdc8:	2803      	cmp	r0, #3
1000bdca:	d80f      	bhi.n	1000bdec <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bdcc:	0011      	movs	r1, r2
1000bdce:	22d0      	movs	r2, #208	; 0xd0
1000bdd0:	0052      	lsls	r2, r2, #1
1000bdd2:	588c      	ldr	r4, [r1, r2]
1000bdd4:	2303      	movs	r3, #3
1000bdd6:	4018      	ands	r0, r3
1000bdd8:	00c0      	lsls	r0, r0, #3
1000bdda:	333c      	adds	r3, #60	; 0x3c
1000bddc:	4083      	lsls	r3, r0
1000bdde:	439c      	bics	r4, r3
1000bde0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bde2:	588b      	ldr	r3, [r1, r2]
1000bde4:	4085      	lsls	r5, r0
1000bde6:	431d      	orrs	r5, r3
1000bde8:	508d      	str	r5, [r1, r2]
1000bdea:	e078      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bdec:	493c      	ldr	r1, [pc, #240]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000bdee:	22d2      	movs	r2, #210	; 0xd2
1000bdf0:	0052      	lsls	r2, r2, #1
1000bdf2:	588c      	ldr	r4, [r1, r2]
1000bdf4:	2303      	movs	r3, #3
1000bdf6:	4018      	ands	r0, r3
1000bdf8:	00c0      	lsls	r0, r0, #3
1000bdfa:	333c      	adds	r3, #60	; 0x3c
1000bdfc:	4083      	lsls	r3, r0
1000bdfe:	439c      	bics	r4, r3
1000be00:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000be02:	588b      	ldr	r3, [r1, r2]
1000be04:	4085      	lsls	r5, r0
1000be06:	431d      	orrs	r5, r3
1000be08:	508d      	str	r5, [r1, r2]
1000be0a:	e068      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000be0c:	280f      	cmp	r0, #15
1000be0e:	d832      	bhi.n	1000be76 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be10:	4a33      	ldr	r2, [pc, #204]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000be12:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000be14:	2307      	movs	r3, #7
1000be16:	4003      	ands	r3, r0
1000be18:	009b      	lsls	r3, r3, #2
1000be1a:	2607      	movs	r6, #7
1000be1c:	409e      	lsls	r6, r3
1000be1e:	43b4      	bics	r4, r6
1000be20:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000be22:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000be24:	000e      	movs	r6, r1
1000be26:	409e      	lsls	r6, r3
1000be28:	0033      	movs	r3, r6
1000be2a:	4323      	orrs	r3, r4
1000be2c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000be2e:	2901      	cmp	r1, #1
1000be30:	d155      	bne.n	1000bede <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000be32:	280b      	cmp	r0, #11
1000be34:	d80f      	bhi.n	1000be56 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000be36:	0011      	movs	r1, r2
1000be38:	22d4      	movs	r2, #212	; 0xd4
1000be3a:	0052      	lsls	r2, r2, #1
1000be3c:	588c      	ldr	r4, [r1, r2]
1000be3e:	2303      	movs	r3, #3
1000be40:	4018      	ands	r0, r3
1000be42:	00c0      	lsls	r0, r0, #3
1000be44:	333c      	adds	r3, #60	; 0x3c
1000be46:	4083      	lsls	r3, r0
1000be48:	439c      	bics	r4, r3
1000be4a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000be4c:	588b      	ldr	r3, [r1, r2]
1000be4e:	4085      	lsls	r5, r0
1000be50:	431d      	orrs	r5, r3
1000be52:	508d      	str	r5, [r1, r2]
1000be54:	e043      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000be56:	4922      	ldr	r1, [pc, #136]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000be58:	22d6      	movs	r2, #214	; 0xd6
1000be5a:	0052      	lsls	r2, r2, #1
1000be5c:	588c      	ldr	r4, [r1, r2]
1000be5e:	2303      	movs	r3, #3
1000be60:	4018      	ands	r0, r3
1000be62:	00c0      	lsls	r0, r0, #3
1000be64:	333c      	adds	r3, #60	; 0x3c
1000be66:	4083      	lsls	r3, r0
1000be68:	439c      	bics	r4, r3
1000be6a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000be6c:	588b      	ldr	r3, [r1, r2]
1000be6e:	4085      	lsls	r5, r0
1000be70:	431d      	orrs	r5, r3
1000be72:	508d      	str	r5, [r1, r2]
1000be74:	e033      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000be76:	2817      	cmp	r0, #23
1000be78:	d831      	bhi.n	1000bede <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be7a:	4a19      	ldr	r2, [pc, #100]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000be7c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000be7e:	2307      	movs	r3, #7
1000be80:	4003      	ands	r3, r0
1000be82:	009b      	lsls	r3, r3, #2
1000be84:	2607      	movs	r6, #7
1000be86:	409e      	lsls	r6, r3
1000be88:	43b4      	bics	r4, r6
1000be8a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000be8c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000be8e:	000e      	movs	r6, r1
1000be90:	409e      	lsls	r6, r3
1000be92:	0033      	movs	r3, r6
1000be94:	4323      	orrs	r3, r4
1000be96:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000be98:	2901      	cmp	r1, #1
1000be9a:	d120      	bne.n	1000bede <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000be9c:	2813      	cmp	r0, #19
1000be9e:	d80f      	bhi.n	1000bec0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bea0:	0011      	movs	r1, r2
1000bea2:	22d8      	movs	r2, #216	; 0xd8
1000bea4:	0052      	lsls	r2, r2, #1
1000bea6:	588c      	ldr	r4, [r1, r2]
1000bea8:	2303      	movs	r3, #3
1000beaa:	4018      	ands	r0, r3
1000beac:	00c0      	lsls	r0, r0, #3
1000beae:	333c      	adds	r3, #60	; 0x3c
1000beb0:	4083      	lsls	r3, r0
1000beb2:	439c      	bics	r4, r3
1000beb4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000beb6:	588b      	ldr	r3, [r1, r2]
1000beb8:	4085      	lsls	r5, r0
1000beba:	431d      	orrs	r5, r3
1000bebc:	508d      	str	r5, [r1, r2]
1000bebe:	e00e      	b.n	1000bede <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bec0:	4a07      	ldr	r2, [pc, #28]	; (1000bee0 <gpio_pinmux_cofiguration+0x148>)
1000bec2:	23da      	movs	r3, #218	; 0xda
1000bec4:	005b      	lsls	r3, r3, #1
1000bec6:	58d1      	ldr	r1, [r2, r3]
1000bec8:	2403      	movs	r4, #3
1000beca:	4020      	ands	r0, r4
1000becc:	00c0      	lsls	r0, r0, #3
1000bece:	343c      	adds	r4, #60	; 0x3c
1000bed0:	4084      	lsls	r4, r0
1000bed2:	43a1      	bics	r1, r4
1000bed4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bed6:	58d1      	ldr	r1, [r2, r3]
1000bed8:	4085      	lsls	r5, r0
1000beda:	430d      	orrs	r5, r1
1000bedc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000bede:	bd70      	pop	{r4, r5, r6, pc}
1000bee0:	4000b000 	.word	0x4000b000

1000bee4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bee6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bee8:	280f      	cmp	r0, #15
1000beea:	d904      	bls.n	1000bef6 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000beec:	241f      	movs	r4, #31
1000beee:	4284      	cmp	r4, r0
1000bef0:	415b      	adcs	r3, r3
1000bef2:	3c1d      	subs	r4, #29
1000bef4:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000bef6:	2a01      	cmp	r2, #1
1000bef8:	d016      	beq.n	1000bf28 <gpio_register_callback+0x44>
1000befa:	2a00      	cmp	r2, #0
1000befc:	d004      	beq.n	1000bf08 <gpio_register_callback+0x24>
1000befe:	2a02      	cmp	r2, #2
1000bf00:	d022      	beq.n	1000bf48 <gpio_register_callback+0x64>
1000bf02:	2a03      	cmp	r2, #3
1000bf04:	d030      	beq.n	1000bf68 <gpio_register_callback+0x84>
1000bf06:	e03e      	b.n	1000bf86 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bf08:	4e29      	ldr	r6, [pc, #164]	; (1000bfb0 <gpio_register_callback+0xcc>)
1000bf0a:	00dc      	lsls	r4, r3, #3
1000bf0c:	18e2      	adds	r2, r4, r3
1000bf0e:	00d2      	lsls	r2, r2, #3
1000bf10:	5997      	ldr	r7, [r2, r6]
1000bf12:	250f      	movs	r5, #15
1000bf14:	4005      	ands	r5, r0
1000bf16:	2201      	movs	r2, #1
1000bf18:	40aa      	lsls	r2, r5
1000bf1a:	b292      	uxth	r2, r2
1000bf1c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000bf1e:	18e4      	adds	r4, r4, r3
1000bf20:	00e4      	lsls	r4, r4, #3
1000bf22:	59a4      	ldr	r4, [r4, r6]
1000bf24:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000bf26:	e02e      	b.n	1000bf86 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bf28:	4e21      	ldr	r6, [pc, #132]	; (1000bfb0 <gpio_register_callback+0xcc>)
1000bf2a:	00dc      	lsls	r4, r3, #3
1000bf2c:	18e2      	adds	r2, r4, r3
1000bf2e:	00d2      	lsls	r2, r2, #3
1000bf30:	5997      	ldr	r7, [r2, r6]
1000bf32:	250f      	movs	r5, #15
1000bf34:	4005      	ands	r5, r0
1000bf36:	2201      	movs	r2, #1
1000bf38:	40aa      	lsls	r2, r5
1000bf3a:	b292      	uxth	r2, r2
1000bf3c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bf3e:	18e4      	adds	r4, r4, r3
1000bf40:	00e4      	lsls	r4, r4, #3
1000bf42:	59a4      	ldr	r4, [r4, r6]
1000bf44:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bf46:	e01e      	b.n	1000bf86 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bf48:	4e19      	ldr	r6, [pc, #100]	; (1000bfb0 <gpio_register_callback+0xcc>)
1000bf4a:	00dc      	lsls	r4, r3, #3
1000bf4c:	18e2      	adds	r2, r4, r3
1000bf4e:	00d2      	lsls	r2, r2, #3
1000bf50:	5997      	ldr	r7, [r2, r6]
1000bf52:	250f      	movs	r5, #15
1000bf54:	4005      	ands	r5, r0
1000bf56:	2201      	movs	r2, #1
1000bf58:	40aa      	lsls	r2, r5
1000bf5a:	b292      	uxth	r2, r2
1000bf5c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bf5e:	18e4      	adds	r4, r4, r3
1000bf60:	00e4      	lsls	r4, r4, #3
1000bf62:	59a4      	ldr	r4, [r4, r6]
1000bf64:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bf66:	e00e      	b.n	1000bf86 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bf68:	4e11      	ldr	r6, [pc, #68]	; (1000bfb0 <gpio_register_callback+0xcc>)
1000bf6a:	00dc      	lsls	r4, r3, #3
1000bf6c:	18e2      	adds	r2, r4, r3
1000bf6e:	00d2      	lsls	r2, r2, #3
1000bf70:	5997      	ldr	r7, [r2, r6]
1000bf72:	250f      	movs	r5, #15
1000bf74:	4005      	ands	r5, r0
1000bf76:	2201      	movs	r2, #1
1000bf78:	40aa      	lsls	r2, r5
1000bf7a:	b292      	uxth	r2, r2
1000bf7c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000bf7e:	18e4      	adds	r4, r4, r3
1000bf80:	00e4      	lsls	r4, r4, #3
1000bf82:	59a4      	ldr	r4, [r4, r6]
1000bf84:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bf86:	220f      	movs	r2, #15
1000bf88:	4010      	ands	r0, r2
1000bf8a:	4c09      	ldr	r4, [pc, #36]	; (1000bfb0 <gpio_register_callback+0xcc>)
1000bf8c:	00dd      	lsls	r5, r3, #3
1000bf8e:	18ea      	adds	r2, r5, r3
1000bf90:	0052      	lsls	r2, r2, #1
1000bf92:	1812      	adds	r2, r2, r0
1000bf94:	0092      	lsls	r2, r2, #2
1000bf96:	18a2      	adds	r2, r4, r2
1000bf98:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bf9a:	18ea      	adds	r2, r5, r3
1000bf9c:	00d2      	lsls	r2, r2, #3
1000bf9e:	18a2      	adds	r2, r4, r2
1000bfa0:	3244      	adds	r2, #68	; 0x44
1000bfa2:	2101      	movs	r1, #1
1000bfa4:	4081      	lsls	r1, r0
1000bfa6:	8813      	ldrh	r3, [r2, #0]
1000bfa8:	430b      	orrs	r3, r1
1000bfaa:	8013      	strh	r3, [r2, #0]
}
1000bfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfae:	46c0      	nop			; (mov r8, r8)
1000bfb0:	100189d0 	.word	0x100189d0

1000bfb4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000bfb4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bfb6:	280f      	cmp	r0, #15
1000bfb8:	d805      	bhi.n	1000bfc6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bfba:	2280      	movs	r2, #128	; 0x80
1000bfbc:	0412      	lsls	r2, r2, #16
1000bfbe:	4b12      	ldr	r3, [pc, #72]	; (1000c008 <gpio_enable_callback+0x54>)
1000bfc0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000bfc2:	2200      	movs	r2, #0
1000bfc4:	e00c      	b.n	1000bfe0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000bfc6:	281f      	cmp	r0, #31
1000bfc8:	d805      	bhi.n	1000bfd6 <gpio_enable_callback+0x22>
1000bfca:	2280      	movs	r2, #128	; 0x80
1000bfcc:	0452      	lsls	r2, r2, #17
1000bfce:	4b0e      	ldr	r3, [pc, #56]	; (1000c008 <gpio_enable_callback+0x54>)
1000bfd0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000bfd2:	2201      	movs	r2, #1
1000bfd4:	e004      	b.n	1000bfe0 <gpio_enable_callback+0x2c>
1000bfd6:	2280      	movs	r2, #128	; 0x80
1000bfd8:	0492      	lsls	r2, r2, #18
1000bfda:	4b0b      	ldr	r3, [pc, #44]	; (1000c008 <gpio_enable_callback+0x54>)
1000bfdc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000bfde:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bfe0:	230f      	movs	r3, #15
1000bfe2:	4018      	ands	r0, r3
1000bfe4:	2101      	movs	r1, #1
1000bfe6:	4081      	lsls	r1, r0
1000bfe8:	4c08      	ldr	r4, [pc, #32]	; (1000c00c <gpio_enable_callback+0x58>)
1000bfea:	00d5      	lsls	r5, r2, #3
1000bfec:	18ab      	adds	r3, r5, r2
1000bfee:	00db      	lsls	r3, r3, #3
1000bff0:	18e3      	adds	r3, r4, r3
1000bff2:	3346      	adds	r3, #70	; 0x46
1000bff4:	8818      	ldrh	r0, [r3, #0]
1000bff6:	4308      	orrs	r0, r1
1000bff8:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bffa:	18aa      	adds	r2, r5, r2
1000bffc:	00d2      	lsls	r2, r2, #3
1000bffe:	5913      	ldr	r3, [r2, r4]
1000c000:	b289      	uxth	r1, r1
1000c002:	8419      	strh	r1, [r3, #32]
}
1000c004:	bd30      	pop	{r4, r5, pc}
1000c006:	46c0      	nop			; (mov r8, r8)
1000c008:	e000e100 	.word	0xe000e100
1000c00c:	100189d0 	.word	0x100189d0

1000c010 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c010:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c012:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c014:	280f      	cmp	r0, #15
1000c016:	d904      	bls.n	1000c022 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c018:	221f      	movs	r2, #31
1000c01a:	4282      	cmp	r2, r0
1000c01c:	415b      	adcs	r3, r3
1000c01e:	3a1d      	subs	r2, #29
1000c020:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c022:	220f      	movs	r2, #15
1000c024:	4010      	ands	r0, r2
1000c026:	2101      	movs	r1, #1
1000c028:	4081      	lsls	r1, r0
1000c02a:	4c07      	ldr	r4, [pc, #28]	; (1000c048 <gpio_disable_callback+0x38>)
1000c02c:	00dd      	lsls	r5, r3, #3
1000c02e:	18ea      	adds	r2, r5, r3
1000c030:	00d2      	lsls	r2, r2, #3
1000c032:	18a2      	adds	r2, r4, r2
1000c034:	3246      	adds	r2, #70	; 0x46
1000c036:	8810      	ldrh	r0, [r2, #0]
1000c038:	4388      	bics	r0, r1
1000c03a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c03c:	18eb      	adds	r3, r5, r3
1000c03e:	00db      	lsls	r3, r3, #3
1000c040:	591b      	ldr	r3, [r3, r4]
1000c042:	b289      	uxth	r1, r1
1000c044:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c046:	bd30      	pop	{r4, r5, pc}
1000c048:	100189d0 	.word	0x100189d0

1000c04c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c04c:	b510      	push	{r4, lr}
1000c04e:	4a11      	ldr	r2, [pc, #68]	; (1000c094 <gpio_init+0x48>)
1000c050:	0010      	movs	r0, r2
1000c052:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c054:	2100      	movs	r1, #0
1000c056:	e007      	b.n	1000c068 <gpio_init+0x1c>
1000c058:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c05a:	4293      	cmp	r3, r2
1000c05c:	d1fc      	bne.n	1000c058 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c05e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c060:	8011      	strh	r1, [r2, #0]
1000c062:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c064:	4282      	cmp	r2, r0
1000c066:	d002      	beq.n	1000c06e <gpio_init+0x22>
1000c068:	0013      	movs	r3, r2
1000c06a:	3b40      	subs	r3, #64	; 0x40
1000c06c:	e7f4      	b.n	1000c058 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c06e:	4b0a      	ldr	r3, [pc, #40]	; (1000c098 <gpio_init+0x4c>)
1000c070:	4a0a      	ldr	r2, [pc, #40]	; (1000c09c <gpio_init+0x50>)
1000c072:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c074:	4a0a      	ldr	r2, [pc, #40]	; (1000c0a0 <gpio_init+0x54>)
1000c076:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c078:	490a      	ldr	r1, [pc, #40]	; (1000c0a4 <gpio_init+0x58>)
1000c07a:	2290      	movs	r2, #144	; 0x90
1000c07c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c07e:	490a      	ldr	r1, [pc, #40]	; (1000c0a8 <gpio_init+0x5c>)
1000c080:	2027      	movs	r0, #39	; 0x27
1000c082:	4c0a      	ldr	r4, [pc, #40]	; (1000c0ac <gpio_init+0x60>)
1000c084:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c086:	490a      	ldr	r1, [pc, #40]	; (1000c0b0 <gpio_init+0x64>)
1000c088:	2028      	movs	r0, #40	; 0x28
1000c08a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c08c:	4909      	ldr	r1, [pc, #36]	; (1000c0b4 <gpio_init+0x68>)
1000c08e:	2029      	movs	r0, #41	; 0x29
1000c090:	47a0      	blx	r4
}
1000c092:	bd10      	pop	{r4, pc}
1000c094:	10018a14 	.word	0x10018a14
1000c098:	100189d0 	.word	0x100189d0
1000c09c:	40010000 	.word	0x40010000
1000c0a0:	40011000 	.word	0x40011000
1000c0a4:	40013000 	.word	0x40013000
1000c0a8:	1000b955 	.word	0x1000b955
1000c0ac:	1000cc79 	.word	0x1000cc79
1000c0b0:	1000b9b9 	.word	0x1000b9b9
1000c0b4:	1000ba29 	.word	0x1000ba29

1000c0b8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c0b8:	2801      	cmp	r0, #1
1000c0ba:	d00d      	beq.n	1000c0d8 <system_clock_config+0x20>
1000c0bc:	2800      	cmp	r0, #0
1000c0be:	d002      	beq.n	1000c0c6 <system_clock_config+0xe>
1000c0c0:	2802      	cmp	r0, #2
1000c0c2:	d01c      	beq.n	1000c0fe <system_clock_config+0x46>
1000c0c4:	e02e      	b.n	1000c124 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c0c6:	4a18      	ldr	r2, [pc, #96]	; (1000c128 <system_clock_config+0x70>)
1000c0c8:	6990      	ldr	r0, [r2, #24]
1000c0ca:	230c      	movs	r3, #12
1000c0cc:	4303      	orrs	r3, r0
1000c0ce:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c0d0:	4a16      	ldr	r2, [pc, #88]	; (1000c12c <system_clock_config+0x74>)
1000c0d2:	4b17      	ldr	r3, [pc, #92]	; (1000c130 <system_clock_config+0x78>)
1000c0d4:	601a      	str	r2, [r3, #0]
			break;
1000c0d6:	e01a      	b.n	1000c10e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c0d8:	4b13      	ldr	r3, [pc, #76]	; (1000c128 <system_clock_config+0x70>)
1000c0da:	6998      	ldr	r0, [r3, #24]
1000c0dc:	2208      	movs	r2, #8
1000c0de:	4302      	orrs	r2, r0
1000c0e0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c0e2:	699a      	ldr	r2, [r3, #24]
1000c0e4:	2004      	movs	r0, #4
1000c0e6:	4382      	bics	r2, r0
1000c0e8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c0ea:	4a12      	ldr	r2, [pc, #72]	; (1000c134 <system_clock_config+0x7c>)
1000c0ec:	6853      	ldr	r3, [r2, #4]
1000c0ee:	2080      	movs	r0, #128	; 0x80
1000c0f0:	0300      	lsls	r0, r0, #12
1000c0f2:	4303      	orrs	r3, r0
1000c0f4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c0f6:	4a10      	ldr	r2, [pc, #64]	; (1000c138 <system_clock_config+0x80>)
1000c0f8:	4b0d      	ldr	r3, [pc, #52]	; (1000c130 <system_clock_config+0x78>)
1000c0fa:	601a      	str	r2, [r3, #0]
			break;
1000c0fc:	e007      	b.n	1000c10e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c0fe:	4a0a      	ldr	r2, [pc, #40]	; (1000c128 <system_clock_config+0x70>)
1000c100:	6993      	ldr	r3, [r2, #24]
1000c102:	200c      	movs	r0, #12
1000c104:	4383      	bics	r3, r0
1000c106:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c108:	4a08      	ldr	r2, [pc, #32]	; (1000c12c <system_clock_config+0x74>)
1000c10a:	4b09      	ldr	r3, [pc, #36]	; (1000c130 <system_clock_config+0x78>)
1000c10c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c10e:	4b06      	ldr	r3, [pc, #24]	; (1000c128 <system_clock_config+0x70>)
1000c110:	699a      	ldr	r2, [r3, #24]
1000c112:	2003      	movs	r0, #3
1000c114:	4382      	bics	r2, r0
1000c116:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c118:	699a      	ldr	r2, [r3, #24]
1000c11a:	4001      	ands	r1, r0
1000c11c:	4311      	orrs	r1, r2
1000c11e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c120:	2000      	movs	r0, #0
1000c122:	e000      	b.n	1000c126 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c124:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c126:	4770      	bx	lr
1000c128:	4000b000 	.word	0x4000b000
1000c12c:	018cba80 	.word	0x018cba80
1000c130:	10018aa8 	.word	0x10018aa8
1000c134:	4000f000 	.word	0x4000f000
1000c138:	001e8480 	.word	0x001e8480

1000c13c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c13c:	4b01      	ldr	r3, [pc, #4]	; (1000c144 <system_clock_get_value+0x8>)
1000c13e:	6818      	ldr	r0, [r3, #0]
}
1000c140:	4770      	bx	lr
1000c142:	46c0      	nop			; (mov r8, r8)
1000c144:	10018aa8 	.word	0x10018aa8

1000c148 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c148:	b500      	push	{lr}
	switch (peripheral) {
1000c14a:	2835      	cmp	r0, #53	; 0x35
1000c14c:	d900      	bls.n	1000c150 <system_clock_peripheral_enable+0x8>
1000c14e:	e1a2      	b.n	1000c496 <system_clock_peripheral_enable+0x34e>
1000c150:	0080      	lsls	r0, r0, #2
1000c152:	4bd2      	ldr	r3, [pc, #840]	; (1000c49c <system_clock_peripheral_enable+0x354>)
1000c154:	581b      	ldr	r3, [r3, r0]
1000c156:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c158:	4ad1      	ldr	r2, [pc, #836]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c15a:	68d1      	ldr	r1, [r2, #12]
1000c15c:	2302      	movs	r3, #2
1000c15e:	430b      	orrs	r3, r1
1000c160:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c162:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c164:	e198      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c166:	4ace      	ldr	r2, [pc, #824]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c168:	68d1      	ldr	r1, [r2, #12]
1000c16a:	2304      	movs	r3, #4
1000c16c:	430b      	orrs	r3, r1
1000c16e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c170:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c172:	e191      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c174:	4aca      	ldr	r2, [pc, #808]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c176:	68d1      	ldr	r1, [r2, #12]
1000c178:	2308      	movs	r3, #8
1000c17a:	430b      	orrs	r3, r1
1000c17c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c17e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c180:	e18a      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c182:	4ac7      	ldr	r2, [pc, #796]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c184:	68d1      	ldr	r1, [r2, #12]
1000c186:	2310      	movs	r3, #16
1000c188:	430b      	orrs	r3, r1
1000c18a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c18c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c18e:	e183      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c190:	4ac3      	ldr	r2, [pc, #780]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c192:	68d1      	ldr	r1, [r2, #12]
1000c194:	2320      	movs	r3, #32
1000c196:	430b      	orrs	r3, r1
1000c198:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c19c:	e17c      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c19e:	4ac0      	ldr	r2, [pc, #768]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1a0:	68d1      	ldr	r1, [r2, #12]
1000c1a2:	2380      	movs	r3, #128	; 0x80
1000c1a4:	430b      	orrs	r3, r1
1000c1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c1aa:	e175      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1ac:	4abc      	ldr	r2, [pc, #752]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1ae:	68d3      	ldr	r3, [r2, #12]
1000c1b0:	2180      	movs	r1, #128	; 0x80
1000c1b2:	0049      	lsls	r1, r1, #1
1000c1b4:	430b      	orrs	r3, r1
1000c1b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c1ba:	e16d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1bc:	4ab8      	ldr	r2, [pc, #736]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1be:	68d3      	ldr	r3, [r2, #12]
1000c1c0:	2180      	movs	r1, #128	; 0x80
1000c1c2:	0109      	lsls	r1, r1, #4
1000c1c4:	430b      	orrs	r3, r1
1000c1c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c1ca:	e165      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1cc:	4ab4      	ldr	r2, [pc, #720]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1ce:	68d3      	ldr	r3, [r2, #12]
1000c1d0:	2180      	movs	r1, #128	; 0x80
1000c1d2:	0149      	lsls	r1, r1, #5
1000c1d4:	430b      	orrs	r3, r1
1000c1d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c1da:	e15d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1dc:	4ab0      	ldr	r2, [pc, #704]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1de:	68d3      	ldr	r3, [r2, #12]
1000c1e0:	2180      	movs	r1, #128	; 0x80
1000c1e2:	0189      	lsls	r1, r1, #6
1000c1e4:	430b      	orrs	r3, r1
1000c1e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c1ea:	e155      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1ec:	4aac      	ldr	r2, [pc, #688]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1ee:	68d3      	ldr	r3, [r2, #12]
1000c1f0:	2180      	movs	r1, #128	; 0x80
1000c1f2:	01c9      	lsls	r1, r1, #7
1000c1f4:	430b      	orrs	r3, r1
1000c1f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c1fa:	e14d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1fc:	4aa8      	ldr	r2, [pc, #672]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c1fe:	68d3      	ldr	r3, [r2, #12]
1000c200:	2180      	movs	r1, #128	; 0x80
1000c202:	0209      	lsls	r1, r1, #8
1000c204:	430b      	orrs	r3, r1
1000c206:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c20a:	e145      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c20c:	4aa4      	ldr	r2, [pc, #656]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c20e:	68d3      	ldr	r3, [r2, #12]
1000c210:	2180      	movs	r1, #128	; 0x80
1000c212:	0249      	lsls	r1, r1, #9
1000c214:	430b      	orrs	r3, r1
1000c216:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c21a:	e13d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c21c:	4aa0      	ldr	r2, [pc, #640]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c21e:	68d3      	ldr	r3, [r2, #12]
1000c220:	2180      	movs	r1, #128	; 0x80
1000c222:	0289      	lsls	r1, r1, #10
1000c224:	430b      	orrs	r3, r1
1000c226:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c228:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c22a:	e135      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c22c:	4a9c      	ldr	r2, [pc, #624]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c22e:	68d3      	ldr	r3, [r2, #12]
1000c230:	2180      	movs	r1, #128	; 0x80
1000c232:	02c9      	lsls	r1, r1, #11
1000c234:	430b      	orrs	r3, r1
1000c236:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c238:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c23a:	e12d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c23c:	4a98      	ldr	r2, [pc, #608]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c23e:	68d3      	ldr	r3, [r2, #12]
1000c240:	2180      	movs	r1, #128	; 0x80
1000c242:	0309      	lsls	r1, r1, #12
1000c244:	430b      	orrs	r3, r1
1000c246:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c248:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c24a:	e125      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c24c:	4a94      	ldr	r2, [pc, #592]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c24e:	68d3      	ldr	r3, [r2, #12]
1000c250:	2180      	movs	r1, #128	; 0x80
1000c252:	0349      	lsls	r1, r1, #13
1000c254:	430b      	orrs	r3, r1
1000c256:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c258:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c25a:	e11d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c25c:	4a90      	ldr	r2, [pc, #576]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c25e:	68d3      	ldr	r3, [r2, #12]
1000c260:	2180      	movs	r1, #128	; 0x80
1000c262:	0389      	lsls	r1, r1, #14
1000c264:	430b      	orrs	r3, r1
1000c266:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c26a:	e115      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c26c:	4a8c      	ldr	r2, [pc, #560]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c26e:	68d3      	ldr	r3, [r2, #12]
1000c270:	2180      	movs	r1, #128	; 0x80
1000c272:	03c9      	lsls	r1, r1, #15
1000c274:	430b      	orrs	r3, r1
1000c276:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c27a:	e10d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c27c:	4a88      	ldr	r2, [pc, #544]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c27e:	68d3      	ldr	r3, [r2, #12]
1000c280:	2180      	movs	r1, #128	; 0x80
1000c282:	0409      	lsls	r1, r1, #16
1000c284:	430b      	orrs	r3, r1
1000c286:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c288:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c28a:	e105      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c28c:	4a84      	ldr	r2, [pc, #528]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c28e:	68d3      	ldr	r3, [r2, #12]
1000c290:	2180      	movs	r1, #128	; 0x80
1000c292:	0449      	lsls	r1, r1, #17
1000c294:	430b      	orrs	r3, r1
1000c296:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c298:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c29a:	e0fd      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c29c:	4a80      	ldr	r2, [pc, #512]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c29e:	68d3      	ldr	r3, [r2, #12]
1000c2a0:	2180      	movs	r1, #128	; 0x80
1000c2a2:	0489      	lsls	r1, r1, #18
1000c2a4:	430b      	orrs	r3, r1
1000c2a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c2aa:	e0f5      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2ac:	4a7c      	ldr	r2, [pc, #496]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2ae:	68d3      	ldr	r3, [r2, #12]
1000c2b0:	2180      	movs	r1, #128	; 0x80
1000c2b2:	04c9      	lsls	r1, r1, #19
1000c2b4:	430b      	orrs	r3, r1
1000c2b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c2ba:	e0ed      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2bc:	4a78      	ldr	r2, [pc, #480]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2be:	68d3      	ldr	r3, [r2, #12]
1000c2c0:	2180      	movs	r1, #128	; 0x80
1000c2c2:	0509      	lsls	r1, r1, #20
1000c2c4:	430b      	orrs	r3, r1
1000c2c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c2ca:	e0e5      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2cc:	4a74      	ldr	r2, [pc, #464]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2ce:	68d3      	ldr	r3, [r2, #12]
1000c2d0:	2180      	movs	r1, #128	; 0x80
1000c2d2:	0549      	lsls	r1, r1, #21
1000c2d4:	430b      	orrs	r3, r1
1000c2d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c2da:	e0dd      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2dc:	4a70      	ldr	r2, [pc, #448]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2de:	68d3      	ldr	r3, [r2, #12]
1000c2e0:	2180      	movs	r1, #128	; 0x80
1000c2e2:	0589      	lsls	r1, r1, #22
1000c2e4:	430b      	orrs	r3, r1
1000c2e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c2ea:	e0d5      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2ec:	4a6c      	ldr	r2, [pc, #432]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2ee:	68d3      	ldr	r3, [r2, #12]
1000c2f0:	2180      	movs	r1, #128	; 0x80
1000c2f2:	05c9      	lsls	r1, r1, #23
1000c2f4:	430b      	orrs	r3, r1
1000c2f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c2fa:	e0cd      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2fc:	4a68      	ldr	r2, [pc, #416]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c2fe:	6911      	ldr	r1, [r2, #16]
1000c300:	2301      	movs	r3, #1
1000c302:	430b      	orrs	r3, r1
1000c304:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c306:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c308:	e0c6      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c30a:	4a65      	ldr	r2, [pc, #404]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c30c:	6911      	ldr	r1, [r2, #16]
1000c30e:	2302      	movs	r3, #2
1000c310:	430b      	orrs	r3, r1
1000c312:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c316:	e0bf      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c318:	4a61      	ldr	r2, [pc, #388]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c31a:	6911      	ldr	r1, [r2, #16]
1000c31c:	2304      	movs	r3, #4
1000c31e:	430b      	orrs	r3, r1
1000c320:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c322:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c324:	e0b8      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c326:	4a5e      	ldr	r2, [pc, #376]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c328:	6911      	ldr	r1, [r2, #16]
1000c32a:	2308      	movs	r3, #8
1000c32c:	430b      	orrs	r3, r1
1000c32e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c332:	e0b1      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c334:	4a5a      	ldr	r2, [pc, #360]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c336:	6911      	ldr	r1, [r2, #16]
1000c338:	2310      	movs	r3, #16
1000c33a:	430b      	orrs	r3, r1
1000c33c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c33e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c340:	e0aa      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c342:	4a57      	ldr	r2, [pc, #348]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c344:	6911      	ldr	r1, [r2, #16]
1000c346:	2320      	movs	r3, #32
1000c348:	430b      	orrs	r3, r1
1000c34a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c34c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c34e:	e0a3      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c350:	4a53      	ldr	r2, [pc, #332]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c352:	6911      	ldr	r1, [r2, #16]
1000c354:	2340      	movs	r3, #64	; 0x40
1000c356:	430b      	orrs	r3, r1
1000c358:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c35a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c35c:	e09c      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c35e:	4a50      	ldr	r2, [pc, #320]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c360:	6911      	ldr	r1, [r2, #16]
1000c362:	2380      	movs	r3, #128	; 0x80
1000c364:	430b      	orrs	r3, r1
1000c366:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c36a:	e095      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c36c:	4a4c      	ldr	r2, [pc, #304]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c36e:	6913      	ldr	r3, [r2, #16]
1000c370:	2180      	movs	r1, #128	; 0x80
1000c372:	0049      	lsls	r1, r1, #1
1000c374:	430b      	orrs	r3, r1
1000c376:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c378:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c37a:	e08d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c37c:	4a48      	ldr	r2, [pc, #288]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c37e:	6913      	ldr	r3, [r2, #16]
1000c380:	2180      	movs	r1, #128	; 0x80
1000c382:	0089      	lsls	r1, r1, #2
1000c384:	430b      	orrs	r3, r1
1000c386:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c388:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c38a:	e085      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c38c:	4a44      	ldr	r2, [pc, #272]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c38e:	6913      	ldr	r3, [r2, #16]
1000c390:	2180      	movs	r1, #128	; 0x80
1000c392:	00c9      	lsls	r1, r1, #3
1000c394:	430b      	orrs	r3, r1
1000c396:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c398:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c39a:	e07d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c39c:	4a40      	ldr	r2, [pc, #256]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c39e:	6913      	ldr	r3, [r2, #16]
1000c3a0:	2180      	movs	r1, #128	; 0x80
1000c3a2:	0109      	lsls	r1, r1, #4
1000c3a4:	430b      	orrs	r3, r1
1000c3a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c3aa:	e075      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3ac:	4a3c      	ldr	r2, [pc, #240]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3ae:	6913      	ldr	r3, [r2, #16]
1000c3b0:	2180      	movs	r1, #128	; 0x80
1000c3b2:	0149      	lsls	r1, r1, #5
1000c3b4:	430b      	orrs	r3, r1
1000c3b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c3ba:	e06d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3bc:	4a38      	ldr	r2, [pc, #224]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3be:	6913      	ldr	r3, [r2, #16]
1000c3c0:	2180      	movs	r1, #128	; 0x80
1000c3c2:	0189      	lsls	r1, r1, #6
1000c3c4:	430b      	orrs	r3, r1
1000c3c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c3ca:	e065      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3cc:	4a34      	ldr	r2, [pc, #208]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3ce:	6913      	ldr	r3, [r2, #16]
1000c3d0:	2180      	movs	r1, #128	; 0x80
1000c3d2:	01c9      	lsls	r1, r1, #7
1000c3d4:	430b      	orrs	r3, r1
1000c3d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c3da:	e05d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3dc:	4a30      	ldr	r2, [pc, #192]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3de:	6913      	ldr	r3, [r2, #16]
1000c3e0:	2180      	movs	r1, #128	; 0x80
1000c3e2:	0209      	lsls	r1, r1, #8
1000c3e4:	430b      	orrs	r3, r1
1000c3e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c3ea:	e055      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3ec:	4a2c      	ldr	r2, [pc, #176]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3ee:	6913      	ldr	r3, [r2, #16]
1000c3f0:	2180      	movs	r1, #128	; 0x80
1000c3f2:	0249      	lsls	r1, r1, #9
1000c3f4:	430b      	orrs	r3, r1
1000c3f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c3fa:	e04d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c3fc:	4a28      	ldr	r2, [pc, #160]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c3fe:	6913      	ldr	r3, [r2, #16]
1000c400:	2180      	movs	r1, #128	; 0x80
1000c402:	0289      	lsls	r1, r1, #10
1000c404:	430b      	orrs	r3, r1
1000c406:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c408:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c40a:	e045      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c40c:	4a24      	ldr	r2, [pc, #144]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c40e:	6913      	ldr	r3, [r2, #16]
1000c410:	2180      	movs	r1, #128	; 0x80
1000c412:	02c9      	lsls	r1, r1, #11
1000c414:	430b      	orrs	r3, r1
1000c416:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c418:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c41a:	e03d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c41c:	4a20      	ldr	r2, [pc, #128]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c41e:	6913      	ldr	r3, [r2, #16]
1000c420:	2180      	movs	r1, #128	; 0x80
1000c422:	0309      	lsls	r1, r1, #12
1000c424:	430b      	orrs	r3, r1
1000c426:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c428:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c42a:	e035      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c42c:	4a1c      	ldr	r2, [pc, #112]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c42e:	6913      	ldr	r3, [r2, #16]
1000c430:	2180      	movs	r1, #128	; 0x80
1000c432:	0349      	lsls	r1, r1, #13
1000c434:	430b      	orrs	r3, r1
1000c436:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c438:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c43a:	e02d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c43c:	4a18      	ldr	r2, [pc, #96]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c43e:	6913      	ldr	r3, [r2, #16]
1000c440:	2180      	movs	r1, #128	; 0x80
1000c442:	0389      	lsls	r1, r1, #14
1000c444:	430b      	orrs	r3, r1
1000c446:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c448:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c44a:	e025      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c44c:	4a14      	ldr	r2, [pc, #80]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c44e:	6913      	ldr	r3, [r2, #16]
1000c450:	2180      	movs	r1, #128	; 0x80
1000c452:	03c9      	lsls	r1, r1, #15
1000c454:	430b      	orrs	r3, r1
1000c456:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c458:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c45a:	e01d      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c45c:	4a10      	ldr	r2, [pc, #64]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c45e:	6913      	ldr	r3, [r2, #16]
1000c460:	2180      	movs	r1, #128	; 0x80
1000c462:	0409      	lsls	r1, r1, #16
1000c464:	430b      	orrs	r3, r1
1000c466:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c468:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c46a:	e015      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c46c:	4a0c      	ldr	r2, [pc, #48]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c46e:	7d11      	ldrb	r1, [r2, #20]
1000c470:	2301      	movs	r3, #1
1000c472:	430b      	orrs	r3, r1
1000c474:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c476:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c478:	e00e      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c47a:	4a09      	ldr	r2, [pc, #36]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c47c:	7d11      	ldrb	r1, [r2, #20]
1000c47e:	2302      	movs	r3, #2
1000c480:	430b      	orrs	r3, r1
1000c482:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c484:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c486:	e007      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c488:	4a05      	ldr	r2, [pc, #20]	; (1000c4a0 <system_clock_peripheral_enable+0x358>)
1000c48a:	7d11      	ldrb	r1, [r2, #20]
1000c48c:	2304      	movs	r3, #4
1000c48e:	430b      	orrs	r3, r1
1000c490:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c492:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c494:	e000      	b.n	1000c498 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c496:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c498:	bd00      	pop	{pc}
1000c49a:	46c0      	nop			; (mov r8, r8)
1000c49c:	10015f14 	.word	0x10015f14
1000c4a0:	4000b000 	.word	0x4000b000

1000c4a4 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c4a4:	b500      	push	{lr}
	switch (peripheral) {
1000c4a6:	2835      	cmp	r0, #53	; 0x35
1000c4a8:	d900      	bls.n	1000c4ac <system_clock_peripheral_disable+0x8>
1000c4aa:	e17d      	b.n	1000c7a8 <system_clock_peripheral_disable+0x304>
1000c4ac:	0080      	lsls	r0, r0, #2
1000c4ae:	4bbf      	ldr	r3, [pc, #764]	; (1000c7ac <system_clock_peripheral_disable+0x308>)
1000c4b0:	581b      	ldr	r3, [r3, r0]
1000c4b2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4b4:	4abe      	ldr	r2, [pc, #760]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4b6:	68d3      	ldr	r3, [r2, #12]
1000c4b8:	2102      	movs	r1, #2
1000c4ba:	438b      	bics	r3, r1
1000c4bc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4be:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c4c0:	e173      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4c2:	4abb      	ldr	r2, [pc, #748]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4c4:	68d3      	ldr	r3, [r2, #12]
1000c4c6:	2104      	movs	r1, #4
1000c4c8:	438b      	bics	r3, r1
1000c4ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c4ce:	e16c      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4d0:	4ab7      	ldr	r2, [pc, #732]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4d2:	68d3      	ldr	r3, [r2, #12]
1000c4d4:	2108      	movs	r1, #8
1000c4d6:	438b      	bics	r3, r1
1000c4d8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c4dc:	e165      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4de:	4ab4      	ldr	r2, [pc, #720]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4e0:	68d3      	ldr	r3, [r2, #12]
1000c4e2:	2110      	movs	r1, #16
1000c4e4:	438b      	bics	r3, r1
1000c4e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c4ea:	e15e      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4ec:	4ab0      	ldr	r2, [pc, #704]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4ee:	68d3      	ldr	r3, [r2, #12]
1000c4f0:	2120      	movs	r1, #32
1000c4f2:	438b      	bics	r3, r1
1000c4f4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c4f8:	e157      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c4fa:	4aad      	ldr	r2, [pc, #692]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c4fc:	68d3      	ldr	r3, [r2, #12]
1000c4fe:	2180      	movs	r1, #128	; 0x80
1000c500:	438b      	bics	r3, r1
1000c502:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c504:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c506:	e150      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c508:	4aa9      	ldr	r2, [pc, #676]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c50a:	68d1      	ldr	r1, [r2, #12]
1000c50c:	4ba9      	ldr	r3, [pc, #676]	; (1000c7b4 <system_clock_peripheral_disable+0x310>)
1000c50e:	400b      	ands	r3, r1
1000c510:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c512:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c514:	e149      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c516:	4aa6      	ldr	r2, [pc, #664]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c518:	68d1      	ldr	r1, [r2, #12]
1000c51a:	4ba7      	ldr	r3, [pc, #668]	; (1000c7b8 <system_clock_peripheral_disable+0x314>)
1000c51c:	400b      	ands	r3, r1
1000c51e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c522:	e142      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c524:	4aa2      	ldr	r2, [pc, #648]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c526:	68d1      	ldr	r1, [r2, #12]
1000c528:	4ba4      	ldr	r3, [pc, #656]	; (1000c7bc <system_clock_peripheral_disable+0x318>)
1000c52a:	400b      	ands	r3, r1
1000c52c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c52e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c530:	e13b      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c532:	4a9f      	ldr	r2, [pc, #636]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c534:	68d1      	ldr	r1, [r2, #12]
1000c536:	4ba2      	ldr	r3, [pc, #648]	; (1000c7c0 <system_clock_peripheral_disable+0x31c>)
1000c538:	400b      	ands	r3, r1
1000c53a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c53c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c53e:	e134      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c540:	4a9b      	ldr	r2, [pc, #620]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c542:	68d1      	ldr	r1, [r2, #12]
1000c544:	4b9f      	ldr	r3, [pc, #636]	; (1000c7c4 <system_clock_peripheral_disable+0x320>)
1000c546:	400b      	ands	r3, r1
1000c548:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c54a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c54c:	e12d      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c54e:	4a98      	ldr	r2, [pc, #608]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c550:	68d1      	ldr	r1, [r2, #12]
1000c552:	4b9d      	ldr	r3, [pc, #628]	; (1000c7c8 <system_clock_peripheral_disable+0x324>)
1000c554:	400b      	ands	r3, r1
1000c556:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c558:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c55a:	e126      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c55c:	4a94      	ldr	r2, [pc, #592]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c55e:	68d1      	ldr	r1, [r2, #12]
1000c560:	4b9a      	ldr	r3, [pc, #616]	; (1000c7cc <system_clock_peripheral_disable+0x328>)
1000c562:	400b      	ands	r3, r1
1000c564:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c566:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c568:	e11f      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c56a:	4a91      	ldr	r2, [pc, #580]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c56c:	68d1      	ldr	r1, [r2, #12]
1000c56e:	4b98      	ldr	r3, [pc, #608]	; (1000c7d0 <system_clock_peripheral_disable+0x32c>)
1000c570:	400b      	ands	r3, r1
1000c572:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c574:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c576:	e118      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c578:	4a8d      	ldr	r2, [pc, #564]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c57a:	68d1      	ldr	r1, [r2, #12]
1000c57c:	4b95      	ldr	r3, [pc, #596]	; (1000c7d4 <system_clock_peripheral_disable+0x330>)
1000c57e:	400b      	ands	r3, r1
1000c580:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c582:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c584:	e111      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c586:	4a8a      	ldr	r2, [pc, #552]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c588:	68d1      	ldr	r1, [r2, #12]
1000c58a:	4b93      	ldr	r3, [pc, #588]	; (1000c7d8 <system_clock_peripheral_disable+0x334>)
1000c58c:	400b      	ands	r3, r1
1000c58e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c590:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c592:	e10a      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c594:	4a86      	ldr	r2, [pc, #536]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c596:	68d1      	ldr	r1, [r2, #12]
1000c598:	4b90      	ldr	r3, [pc, #576]	; (1000c7dc <system_clock_peripheral_disable+0x338>)
1000c59a:	400b      	ands	r3, r1
1000c59c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c59e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c5a0:	e103      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5a2:	4a83      	ldr	r2, [pc, #524]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5a4:	68d1      	ldr	r1, [r2, #12]
1000c5a6:	4b8e      	ldr	r3, [pc, #568]	; (1000c7e0 <system_clock_peripheral_disable+0x33c>)
1000c5a8:	400b      	ands	r3, r1
1000c5aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c5ae:	e0fc      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5b0:	4a7f      	ldr	r2, [pc, #508]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5b2:	68d1      	ldr	r1, [r2, #12]
1000c5b4:	4b8b      	ldr	r3, [pc, #556]	; (1000c7e4 <system_clock_peripheral_disable+0x340>)
1000c5b6:	400b      	ands	r3, r1
1000c5b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c5bc:	e0f5      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5be:	4a7c      	ldr	r2, [pc, #496]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5c0:	68d1      	ldr	r1, [r2, #12]
1000c5c2:	4b89      	ldr	r3, [pc, #548]	; (1000c7e8 <system_clock_peripheral_disable+0x344>)
1000c5c4:	400b      	ands	r3, r1
1000c5c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c5ca:	e0ee      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5cc:	4a78      	ldr	r2, [pc, #480]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5ce:	68d1      	ldr	r1, [r2, #12]
1000c5d0:	4b86      	ldr	r3, [pc, #536]	; (1000c7ec <system_clock_peripheral_disable+0x348>)
1000c5d2:	400b      	ands	r3, r1
1000c5d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c5d8:	e0e7      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5da:	4a75      	ldr	r2, [pc, #468]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5dc:	68d1      	ldr	r1, [r2, #12]
1000c5de:	4b84      	ldr	r3, [pc, #528]	; (1000c7f0 <system_clock_peripheral_disable+0x34c>)
1000c5e0:	400b      	ands	r3, r1
1000c5e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c5e6:	e0e0      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5e8:	4a71      	ldr	r2, [pc, #452]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5ea:	68d1      	ldr	r1, [r2, #12]
1000c5ec:	4b81      	ldr	r3, [pc, #516]	; (1000c7f4 <system_clock_peripheral_disable+0x350>)
1000c5ee:	400b      	ands	r3, r1
1000c5f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c5f4:	e0d9      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c5f6:	4a6e      	ldr	r2, [pc, #440]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c5f8:	68d1      	ldr	r1, [r2, #12]
1000c5fa:	4b7f      	ldr	r3, [pc, #508]	; (1000c7f8 <system_clock_peripheral_disable+0x354>)
1000c5fc:	400b      	ands	r3, r1
1000c5fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c600:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c602:	e0d2      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c604:	4a6a      	ldr	r2, [pc, #424]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c606:	68d1      	ldr	r1, [r2, #12]
1000c608:	4b7c      	ldr	r3, [pc, #496]	; (1000c7fc <system_clock_peripheral_disable+0x358>)
1000c60a:	400b      	ands	r3, r1
1000c60c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c60e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c610:	e0cb      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c612:	4a67      	ldr	r2, [pc, #412]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c614:	68d1      	ldr	r1, [r2, #12]
1000c616:	4b7a      	ldr	r3, [pc, #488]	; (1000c800 <system_clock_peripheral_disable+0x35c>)
1000c618:	400b      	ands	r3, r1
1000c61a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c61c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c61e:	e0c4      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c620:	4a63      	ldr	r2, [pc, #396]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c622:	68d1      	ldr	r1, [r2, #12]
1000c624:	4b77      	ldr	r3, [pc, #476]	; (1000c804 <system_clock_peripheral_disable+0x360>)
1000c626:	400b      	ands	r3, r1
1000c628:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c62a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c62c:	e0bd      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c62e:	4a60      	ldr	r2, [pc, #384]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c630:	6913      	ldr	r3, [r2, #16]
1000c632:	2101      	movs	r1, #1
1000c634:	438b      	bics	r3, r1
1000c636:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c638:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c63a:	e0b6      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c63c:	4a5c      	ldr	r2, [pc, #368]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c63e:	6913      	ldr	r3, [r2, #16]
1000c640:	2102      	movs	r1, #2
1000c642:	438b      	bics	r3, r1
1000c644:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c646:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c648:	e0af      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c64a:	4a59      	ldr	r2, [pc, #356]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c64c:	6913      	ldr	r3, [r2, #16]
1000c64e:	2104      	movs	r1, #4
1000c650:	438b      	bics	r3, r1
1000c652:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c654:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c656:	e0a8      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c658:	4a55      	ldr	r2, [pc, #340]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c65a:	6913      	ldr	r3, [r2, #16]
1000c65c:	2108      	movs	r1, #8
1000c65e:	438b      	bics	r3, r1
1000c660:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c662:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c664:	e0a1      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c666:	4a52      	ldr	r2, [pc, #328]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c668:	6913      	ldr	r3, [r2, #16]
1000c66a:	2110      	movs	r1, #16
1000c66c:	438b      	bics	r3, r1
1000c66e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c670:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c672:	e09a      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c674:	4a4e      	ldr	r2, [pc, #312]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c676:	6913      	ldr	r3, [r2, #16]
1000c678:	2120      	movs	r1, #32
1000c67a:	438b      	bics	r3, r1
1000c67c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c67e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c680:	e093      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c682:	4a4b      	ldr	r2, [pc, #300]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c684:	6913      	ldr	r3, [r2, #16]
1000c686:	2140      	movs	r1, #64	; 0x40
1000c688:	438b      	bics	r3, r1
1000c68a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c68c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c68e:	e08c      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c690:	4a47      	ldr	r2, [pc, #284]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c692:	6913      	ldr	r3, [r2, #16]
1000c694:	2180      	movs	r1, #128	; 0x80
1000c696:	438b      	bics	r3, r1
1000c698:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c69a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c69c:	e085      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c69e:	4a44      	ldr	r2, [pc, #272]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6a0:	6911      	ldr	r1, [r2, #16]
1000c6a2:	4b44      	ldr	r3, [pc, #272]	; (1000c7b4 <system_clock_peripheral_disable+0x310>)
1000c6a4:	400b      	ands	r3, r1
1000c6a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c6aa:	e07e      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6ac:	4a40      	ldr	r2, [pc, #256]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6ae:	6911      	ldr	r1, [r2, #16]
1000c6b0:	4b55      	ldr	r3, [pc, #340]	; (1000c808 <system_clock_peripheral_disable+0x364>)
1000c6b2:	400b      	ands	r3, r1
1000c6b4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c6b8:	e077      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6ba:	4a3d      	ldr	r2, [pc, #244]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6bc:	6911      	ldr	r1, [r2, #16]
1000c6be:	4b53      	ldr	r3, [pc, #332]	; (1000c80c <system_clock_peripheral_disable+0x368>)
1000c6c0:	400b      	ands	r3, r1
1000c6c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c6c6:	e070      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6c8:	4a39      	ldr	r2, [pc, #228]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6ca:	6911      	ldr	r1, [r2, #16]
1000c6cc:	4b3a      	ldr	r3, [pc, #232]	; (1000c7b8 <system_clock_peripheral_disable+0x314>)
1000c6ce:	400b      	ands	r3, r1
1000c6d0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c6d4:	e069      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6d6:	4a36      	ldr	r2, [pc, #216]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6d8:	6911      	ldr	r1, [r2, #16]
1000c6da:	4b38      	ldr	r3, [pc, #224]	; (1000c7bc <system_clock_peripheral_disable+0x318>)
1000c6dc:	400b      	ands	r3, r1
1000c6de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c6e2:	e062      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6e4:	4a32      	ldr	r2, [pc, #200]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6e6:	6911      	ldr	r1, [r2, #16]
1000c6e8:	4b35      	ldr	r3, [pc, #212]	; (1000c7c0 <system_clock_peripheral_disable+0x31c>)
1000c6ea:	400b      	ands	r3, r1
1000c6ec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c6f0:	e05b      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c6f2:	4a2f      	ldr	r2, [pc, #188]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c6f4:	6911      	ldr	r1, [r2, #16]
1000c6f6:	4b33      	ldr	r3, [pc, #204]	; (1000c7c4 <system_clock_peripheral_disable+0x320>)
1000c6f8:	400b      	ands	r3, r1
1000c6fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c6fe:	e054      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c700:	4a2b      	ldr	r2, [pc, #172]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c702:	6911      	ldr	r1, [r2, #16]
1000c704:	4b30      	ldr	r3, [pc, #192]	; (1000c7c8 <system_clock_peripheral_disable+0x324>)
1000c706:	400b      	ands	r3, r1
1000c708:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c70a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c70c:	e04d      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c70e:	4a28      	ldr	r2, [pc, #160]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c710:	6911      	ldr	r1, [r2, #16]
1000c712:	4b2e      	ldr	r3, [pc, #184]	; (1000c7cc <system_clock_peripheral_disable+0x328>)
1000c714:	400b      	ands	r3, r1
1000c716:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c718:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c71a:	e046      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c71c:	4a24      	ldr	r2, [pc, #144]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c71e:	6911      	ldr	r1, [r2, #16]
1000c720:	4b2b      	ldr	r3, [pc, #172]	; (1000c7d0 <system_clock_peripheral_disable+0x32c>)
1000c722:	400b      	ands	r3, r1
1000c724:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c726:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c728:	e03f      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c72a:	4a21      	ldr	r2, [pc, #132]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c72c:	6911      	ldr	r1, [r2, #16]
1000c72e:	4b29      	ldr	r3, [pc, #164]	; (1000c7d4 <system_clock_peripheral_disable+0x330>)
1000c730:	400b      	ands	r3, r1
1000c732:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c734:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c736:	e038      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c738:	4a1d      	ldr	r2, [pc, #116]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c73a:	6911      	ldr	r1, [r2, #16]
1000c73c:	4b26      	ldr	r3, [pc, #152]	; (1000c7d8 <system_clock_peripheral_disable+0x334>)
1000c73e:	400b      	ands	r3, r1
1000c740:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c742:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c744:	e031      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c746:	4a1a      	ldr	r2, [pc, #104]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c748:	6911      	ldr	r1, [r2, #16]
1000c74a:	4b24      	ldr	r3, [pc, #144]	; (1000c7dc <system_clock_peripheral_disable+0x338>)
1000c74c:	400b      	ands	r3, r1
1000c74e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c750:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c752:	e02a      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c754:	4a16      	ldr	r2, [pc, #88]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c756:	6911      	ldr	r1, [r2, #16]
1000c758:	4b21      	ldr	r3, [pc, #132]	; (1000c7e0 <system_clock_peripheral_disable+0x33c>)
1000c75a:	400b      	ands	r3, r1
1000c75c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c75e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c760:	e023      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c762:	4a13      	ldr	r2, [pc, #76]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c764:	6911      	ldr	r1, [r2, #16]
1000c766:	4b1f      	ldr	r3, [pc, #124]	; (1000c7e4 <system_clock_peripheral_disable+0x340>)
1000c768:	400b      	ands	r3, r1
1000c76a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c76c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c76e:	e01c      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c770:	4a0f      	ldr	r2, [pc, #60]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c772:	6911      	ldr	r1, [r2, #16]
1000c774:	4b1c      	ldr	r3, [pc, #112]	; (1000c7e8 <system_clock_peripheral_disable+0x344>)
1000c776:	400b      	ands	r3, r1
1000c778:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c77a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c77c:	e015      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c77e:	4a0c      	ldr	r2, [pc, #48]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c780:	7d13      	ldrb	r3, [r2, #20]
1000c782:	2101      	movs	r1, #1
1000c784:	438b      	bics	r3, r1
1000c786:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c78a:	e00e      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c78c:	4a08      	ldr	r2, [pc, #32]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c78e:	7d13      	ldrb	r3, [r2, #20]
1000c790:	2102      	movs	r1, #2
1000c792:	438b      	bics	r3, r1
1000c794:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c796:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c798:	e007      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c79a:	4a05      	ldr	r2, [pc, #20]	; (1000c7b0 <system_clock_peripheral_disable+0x30c>)
1000c79c:	7d13      	ldrb	r3, [r2, #20]
1000c79e:	2104      	movs	r1, #4
1000c7a0:	438b      	bics	r3, r1
1000c7a2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c7a6:	e000      	b.n	1000c7aa <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c7a8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c7aa:	bd00      	pop	{pc}
1000c7ac:	10015fec 	.word	0x10015fec
1000c7b0:	4000b000 	.word	0x4000b000
1000c7b4:	fffffeff 	.word	0xfffffeff
1000c7b8:	fffff7ff 	.word	0xfffff7ff
1000c7bc:	ffffefff 	.word	0xffffefff
1000c7c0:	ffffdfff 	.word	0xffffdfff
1000c7c4:	ffffbfff 	.word	0xffffbfff
1000c7c8:	ffff7fff 	.word	0xffff7fff
1000c7cc:	fffeffff 	.word	0xfffeffff
1000c7d0:	fffdffff 	.word	0xfffdffff
1000c7d4:	fffbffff 	.word	0xfffbffff
1000c7d8:	fff7ffff 	.word	0xfff7ffff
1000c7dc:	ffefffff 	.word	0xffefffff
1000c7e0:	ffdfffff 	.word	0xffdfffff
1000c7e4:	ffbfffff 	.word	0xffbfffff
1000c7e8:	ff7fffff 	.word	0xff7fffff
1000c7ec:	feffffff 	.word	0xfeffffff
1000c7f0:	fdffffff 	.word	0xfdffffff
1000c7f4:	fbffffff 	.word	0xfbffffff
1000c7f8:	f7ffffff 	.word	0xf7ffffff
1000c7fc:	efffffff 	.word	0xefffffff
1000c800:	dfffffff 	.word	0xdfffffff
1000c804:	bfffffff 	.word	0xbfffffff
1000c808:	fffffdff 	.word	0xfffffdff
1000c80c:	fffffbff 	.word	0xfffffbff

1000c810 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c810:	b500      	push	{lr}
	switch (peripheral) {
1000c812:	2843      	cmp	r0, #67	; 0x43
1000c814:	d900      	bls.n	1000c818 <system_peripheral_reset+0x8>
1000c816:	e223      	b.n	1000cc60 <system_peripheral_reset+0x450>
1000c818:	0080      	lsls	r0, r0, #2
1000c81a:	4be0      	ldr	r3, [pc, #896]	; (1000cb9c <system_peripheral_reset+0x38c>)
1000c81c:	581b      	ldr	r3, [r3, r0]
1000c81e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c820:	4bdf      	ldr	r3, [pc, #892]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c822:	6859      	ldr	r1, [r3, #4]
1000c824:	2202      	movs	r2, #2
1000c826:	4391      	bics	r1, r2
1000c828:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c82a:	6859      	ldr	r1, [r3, #4]
1000c82c:	430a      	orrs	r2, r1
1000c82e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c830:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c832:	e216      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c834:	4bda      	ldr	r3, [pc, #872]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c836:	6859      	ldr	r1, [r3, #4]
1000c838:	2204      	movs	r2, #4
1000c83a:	4391      	bics	r1, r2
1000c83c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c83e:	6859      	ldr	r1, [r3, #4]
1000c840:	430a      	orrs	r2, r1
1000c842:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c844:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c846:	e20c      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c848:	4bd5      	ldr	r3, [pc, #852]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c84a:	6859      	ldr	r1, [r3, #4]
1000c84c:	2208      	movs	r2, #8
1000c84e:	4391      	bics	r1, r2
1000c850:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c852:	6859      	ldr	r1, [r3, #4]
1000c854:	430a      	orrs	r2, r1
1000c856:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c858:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c85a:	e202      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c85c:	4bd0      	ldr	r3, [pc, #832]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c85e:	6859      	ldr	r1, [r3, #4]
1000c860:	2210      	movs	r2, #16
1000c862:	4391      	bics	r1, r2
1000c864:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c866:	6859      	ldr	r1, [r3, #4]
1000c868:	430a      	orrs	r2, r1
1000c86a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c86c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c86e:	e1f8      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c870:	4bcb      	ldr	r3, [pc, #812]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c872:	6859      	ldr	r1, [r3, #4]
1000c874:	2220      	movs	r2, #32
1000c876:	4391      	bics	r1, r2
1000c878:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c87a:	6859      	ldr	r1, [r3, #4]
1000c87c:	430a      	orrs	r2, r1
1000c87e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c880:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c882:	e1ee      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c884:	4bc6      	ldr	r3, [pc, #792]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c886:	6859      	ldr	r1, [r3, #4]
1000c888:	2240      	movs	r2, #64	; 0x40
1000c88a:	4391      	bics	r1, r2
1000c88c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c88e:	6859      	ldr	r1, [r3, #4]
1000c890:	430a      	orrs	r2, r1
1000c892:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c894:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c896:	e1e4      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c898:	4bc1      	ldr	r3, [pc, #772]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c89a:	6859      	ldr	r1, [r3, #4]
1000c89c:	2280      	movs	r2, #128	; 0x80
1000c89e:	4391      	bics	r1, r2
1000c8a0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8a2:	6859      	ldr	r1, [r3, #4]
1000c8a4:	430a      	orrs	r2, r1
1000c8a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c8aa:	e1da      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8ac:	4bbc      	ldr	r3, [pc, #752]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c8ae:	6859      	ldr	r1, [r3, #4]
1000c8b0:	4abc      	ldr	r2, [pc, #752]	; (1000cba4 <system_peripheral_reset+0x394>)
1000c8b2:	400a      	ands	r2, r1
1000c8b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8b6:	685a      	ldr	r2, [r3, #4]
1000c8b8:	2180      	movs	r1, #128	; 0x80
1000c8ba:	0049      	lsls	r1, r1, #1
1000c8bc:	430a      	orrs	r2, r1
1000c8be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c8c2:	e1ce      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8c4:	4bb6      	ldr	r3, [pc, #728]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c8c6:	6859      	ldr	r1, [r3, #4]
1000c8c8:	4ab7      	ldr	r2, [pc, #732]	; (1000cba8 <system_peripheral_reset+0x398>)
1000c8ca:	400a      	ands	r2, r1
1000c8cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8ce:	685a      	ldr	r2, [r3, #4]
1000c8d0:	2180      	movs	r1, #128	; 0x80
1000c8d2:	0089      	lsls	r1, r1, #2
1000c8d4:	430a      	orrs	r2, r1
1000c8d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c8da:	e1c2      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8dc:	4bb0      	ldr	r3, [pc, #704]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c8de:	6859      	ldr	r1, [r3, #4]
1000c8e0:	4ab2      	ldr	r2, [pc, #712]	; (1000cbac <system_peripheral_reset+0x39c>)
1000c8e2:	400a      	ands	r2, r1
1000c8e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8e6:	685a      	ldr	r2, [r3, #4]
1000c8e8:	2180      	movs	r1, #128	; 0x80
1000c8ea:	00c9      	lsls	r1, r1, #3
1000c8ec:	430a      	orrs	r2, r1
1000c8ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c8f2:	e1b6      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8f4:	4baa      	ldr	r3, [pc, #680]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c8f6:	6859      	ldr	r1, [r3, #4]
1000c8f8:	4aad      	ldr	r2, [pc, #692]	; (1000cbb0 <system_peripheral_reset+0x3a0>)
1000c8fa:	400a      	ands	r2, r1
1000c8fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8fe:	685a      	ldr	r2, [r3, #4]
1000c900:	2180      	movs	r1, #128	; 0x80
1000c902:	0109      	lsls	r1, r1, #4
1000c904:	430a      	orrs	r2, r1
1000c906:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c908:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c90a:	e1aa      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c90c:	4ba4      	ldr	r3, [pc, #656]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c90e:	6859      	ldr	r1, [r3, #4]
1000c910:	4aa8      	ldr	r2, [pc, #672]	; (1000cbb4 <system_peripheral_reset+0x3a4>)
1000c912:	400a      	ands	r2, r1
1000c914:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c916:	685a      	ldr	r2, [r3, #4]
1000c918:	2180      	movs	r1, #128	; 0x80
1000c91a:	0149      	lsls	r1, r1, #5
1000c91c:	430a      	orrs	r2, r1
1000c91e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c920:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c922:	e19e      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c924:	4b9e      	ldr	r3, [pc, #632]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c926:	6859      	ldr	r1, [r3, #4]
1000c928:	4aa3      	ldr	r2, [pc, #652]	; (1000cbb8 <system_peripheral_reset+0x3a8>)
1000c92a:	400a      	ands	r2, r1
1000c92c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c92e:	685a      	ldr	r2, [r3, #4]
1000c930:	2180      	movs	r1, #128	; 0x80
1000c932:	0189      	lsls	r1, r1, #6
1000c934:	430a      	orrs	r2, r1
1000c936:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c938:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c93a:	e192      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c93c:	4b98      	ldr	r3, [pc, #608]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c93e:	6859      	ldr	r1, [r3, #4]
1000c940:	4a9e      	ldr	r2, [pc, #632]	; (1000cbbc <system_peripheral_reset+0x3ac>)
1000c942:	400a      	ands	r2, r1
1000c944:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c946:	685a      	ldr	r2, [r3, #4]
1000c948:	2180      	movs	r1, #128	; 0x80
1000c94a:	01c9      	lsls	r1, r1, #7
1000c94c:	430a      	orrs	r2, r1
1000c94e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c950:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c952:	e186      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c954:	4b92      	ldr	r3, [pc, #584]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c956:	6859      	ldr	r1, [r3, #4]
1000c958:	4a99      	ldr	r2, [pc, #612]	; (1000cbc0 <system_peripheral_reset+0x3b0>)
1000c95a:	400a      	ands	r2, r1
1000c95c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c95e:	685a      	ldr	r2, [r3, #4]
1000c960:	2180      	movs	r1, #128	; 0x80
1000c962:	0209      	lsls	r1, r1, #8
1000c964:	430a      	orrs	r2, r1
1000c966:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c968:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c96a:	e17a      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c96c:	4b8c      	ldr	r3, [pc, #560]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c96e:	6859      	ldr	r1, [r3, #4]
1000c970:	4a94      	ldr	r2, [pc, #592]	; (1000cbc4 <system_peripheral_reset+0x3b4>)
1000c972:	400a      	ands	r2, r1
1000c974:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c976:	685a      	ldr	r2, [r3, #4]
1000c978:	2180      	movs	r1, #128	; 0x80
1000c97a:	0249      	lsls	r1, r1, #9
1000c97c:	430a      	orrs	r2, r1
1000c97e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c980:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c982:	e16e      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c984:	4b86      	ldr	r3, [pc, #536]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c986:	6859      	ldr	r1, [r3, #4]
1000c988:	4a8f      	ldr	r2, [pc, #572]	; (1000cbc8 <system_peripheral_reset+0x3b8>)
1000c98a:	400a      	ands	r2, r1
1000c98c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c98e:	685a      	ldr	r2, [r3, #4]
1000c990:	2180      	movs	r1, #128	; 0x80
1000c992:	0289      	lsls	r1, r1, #10
1000c994:	430a      	orrs	r2, r1
1000c996:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c998:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c99a:	e162      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c99c:	4b80      	ldr	r3, [pc, #512]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c99e:	6859      	ldr	r1, [r3, #4]
1000c9a0:	4a8a      	ldr	r2, [pc, #552]	; (1000cbcc <system_peripheral_reset+0x3bc>)
1000c9a2:	400a      	ands	r2, r1
1000c9a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9a6:	685a      	ldr	r2, [r3, #4]
1000c9a8:	2180      	movs	r1, #128	; 0x80
1000c9aa:	02c9      	lsls	r1, r1, #11
1000c9ac:	430a      	orrs	r2, r1
1000c9ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c9b2:	e156      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9b4:	4b7a      	ldr	r3, [pc, #488]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c9b6:	6859      	ldr	r1, [r3, #4]
1000c9b8:	4a85      	ldr	r2, [pc, #532]	; (1000cbd0 <system_peripheral_reset+0x3c0>)
1000c9ba:	400a      	ands	r2, r1
1000c9bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9be:	685a      	ldr	r2, [r3, #4]
1000c9c0:	2180      	movs	r1, #128	; 0x80
1000c9c2:	0309      	lsls	r1, r1, #12
1000c9c4:	430a      	orrs	r2, r1
1000c9c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c9ca:	e14a      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9cc:	4b74      	ldr	r3, [pc, #464]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c9ce:	6859      	ldr	r1, [r3, #4]
1000c9d0:	4a80      	ldr	r2, [pc, #512]	; (1000cbd4 <system_peripheral_reset+0x3c4>)
1000c9d2:	400a      	ands	r2, r1
1000c9d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9d6:	685a      	ldr	r2, [r3, #4]
1000c9d8:	2180      	movs	r1, #128	; 0x80
1000c9da:	0349      	lsls	r1, r1, #13
1000c9dc:	430a      	orrs	r2, r1
1000c9de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c9e2:	e13e      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9e4:	4b6e      	ldr	r3, [pc, #440]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c9e6:	6859      	ldr	r1, [r3, #4]
1000c9e8:	4a7b      	ldr	r2, [pc, #492]	; (1000cbd8 <system_peripheral_reset+0x3c8>)
1000c9ea:	400a      	ands	r2, r1
1000c9ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9ee:	685a      	ldr	r2, [r3, #4]
1000c9f0:	2180      	movs	r1, #128	; 0x80
1000c9f2:	0389      	lsls	r1, r1, #14
1000c9f4:	430a      	orrs	r2, r1
1000c9f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c9fa:	e132      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9fc:	4b68      	ldr	r3, [pc, #416]	; (1000cba0 <system_peripheral_reset+0x390>)
1000c9fe:	6859      	ldr	r1, [r3, #4]
1000ca00:	4a76      	ldr	r2, [pc, #472]	; (1000cbdc <system_peripheral_reset+0x3cc>)
1000ca02:	400a      	ands	r2, r1
1000ca04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca06:	685a      	ldr	r2, [r3, #4]
1000ca08:	2180      	movs	r1, #128	; 0x80
1000ca0a:	03c9      	lsls	r1, r1, #15
1000ca0c:	430a      	orrs	r2, r1
1000ca0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca10:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000ca12:	e126      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca14:	4b62      	ldr	r3, [pc, #392]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca16:	6859      	ldr	r1, [r3, #4]
1000ca18:	4a71      	ldr	r2, [pc, #452]	; (1000cbe0 <system_peripheral_reset+0x3d0>)
1000ca1a:	400a      	ands	r2, r1
1000ca1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca1e:	685a      	ldr	r2, [r3, #4]
1000ca20:	2180      	movs	r1, #128	; 0x80
1000ca22:	0409      	lsls	r1, r1, #16
1000ca24:	430a      	orrs	r2, r1
1000ca26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca28:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000ca2a:	e11a      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca2c:	4b5c      	ldr	r3, [pc, #368]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca2e:	6859      	ldr	r1, [r3, #4]
1000ca30:	4a6c      	ldr	r2, [pc, #432]	; (1000cbe4 <system_peripheral_reset+0x3d4>)
1000ca32:	400a      	ands	r2, r1
1000ca34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca36:	685a      	ldr	r2, [r3, #4]
1000ca38:	2180      	movs	r1, #128	; 0x80
1000ca3a:	0449      	lsls	r1, r1, #17
1000ca3c:	430a      	orrs	r2, r1
1000ca3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca40:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000ca42:	e10e      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca44:	4b56      	ldr	r3, [pc, #344]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca46:	6859      	ldr	r1, [r3, #4]
1000ca48:	4a67      	ldr	r2, [pc, #412]	; (1000cbe8 <system_peripheral_reset+0x3d8>)
1000ca4a:	400a      	ands	r2, r1
1000ca4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca4e:	685a      	ldr	r2, [r3, #4]
1000ca50:	2180      	movs	r1, #128	; 0x80
1000ca52:	0489      	lsls	r1, r1, #18
1000ca54:	430a      	orrs	r2, r1
1000ca56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca58:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000ca5a:	e102      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca5c:	4b50      	ldr	r3, [pc, #320]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca5e:	6859      	ldr	r1, [r3, #4]
1000ca60:	4a62      	ldr	r2, [pc, #392]	; (1000cbec <system_peripheral_reset+0x3dc>)
1000ca62:	400a      	ands	r2, r1
1000ca64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca66:	685a      	ldr	r2, [r3, #4]
1000ca68:	2180      	movs	r1, #128	; 0x80
1000ca6a:	04c9      	lsls	r1, r1, #19
1000ca6c:	430a      	orrs	r2, r1
1000ca6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca70:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000ca72:	e0f6      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca74:	4b4a      	ldr	r3, [pc, #296]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca76:	6859      	ldr	r1, [r3, #4]
1000ca78:	4a5d      	ldr	r2, [pc, #372]	; (1000cbf0 <system_peripheral_reset+0x3e0>)
1000ca7a:	400a      	ands	r2, r1
1000ca7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca7e:	685a      	ldr	r2, [r3, #4]
1000ca80:	2180      	movs	r1, #128	; 0x80
1000ca82:	0509      	lsls	r1, r1, #20
1000ca84:	430a      	orrs	r2, r1
1000ca86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca88:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000ca8a:	e0ea      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca8c:	4b44      	ldr	r3, [pc, #272]	; (1000cba0 <system_peripheral_reset+0x390>)
1000ca8e:	6859      	ldr	r1, [r3, #4]
1000ca90:	4a58      	ldr	r2, [pc, #352]	; (1000cbf4 <system_peripheral_reset+0x3e4>)
1000ca92:	400a      	ands	r2, r1
1000ca94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca96:	685a      	ldr	r2, [r3, #4]
1000ca98:	2180      	movs	r1, #128	; 0x80
1000ca9a:	0549      	lsls	r1, r1, #21
1000ca9c:	430a      	orrs	r2, r1
1000ca9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000caa2:	e0de      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caa4:	4b3e      	ldr	r3, [pc, #248]	; (1000cba0 <system_peripheral_reset+0x390>)
1000caa6:	6859      	ldr	r1, [r3, #4]
1000caa8:	4a53      	ldr	r2, [pc, #332]	; (1000cbf8 <system_peripheral_reset+0x3e8>)
1000caaa:	400a      	ands	r2, r1
1000caac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caae:	685a      	ldr	r2, [r3, #4]
1000cab0:	2180      	movs	r1, #128	; 0x80
1000cab2:	0589      	lsls	r1, r1, #22
1000cab4:	430a      	orrs	r2, r1
1000cab6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000caba:	e0d2      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cabc:	4b38      	ldr	r3, [pc, #224]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cabe:	6859      	ldr	r1, [r3, #4]
1000cac0:	4a4e      	ldr	r2, [pc, #312]	; (1000cbfc <system_peripheral_reset+0x3ec>)
1000cac2:	400a      	ands	r2, r1
1000cac4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cac6:	685a      	ldr	r2, [r3, #4]
1000cac8:	2180      	movs	r1, #128	; 0x80
1000caca:	05c9      	lsls	r1, r1, #23
1000cacc:	430a      	orrs	r2, r1
1000cace:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cad2:	e0c6      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cad4:	4a32      	ldr	r2, [pc, #200]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cad6:	6853      	ldr	r3, [r2, #4]
1000cad8:	005b      	lsls	r3, r3, #1
1000cada:	085b      	lsrs	r3, r3, #1
1000cadc:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cade:	6853      	ldr	r3, [r2, #4]
1000cae0:	2180      	movs	r1, #128	; 0x80
1000cae2:	0609      	lsls	r1, r1, #24
1000cae4:	430b      	orrs	r3, r1
1000cae6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000caea:	e0ba      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000caec:	4b2c      	ldr	r3, [pc, #176]	; (1000cba0 <system_peripheral_reset+0x390>)
1000caee:	891a      	ldrh	r2, [r3, #8]
1000caf0:	2101      	movs	r1, #1
1000caf2:	438a      	bics	r2, r1
1000caf4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000caf6:	8919      	ldrh	r1, [r3, #8]
1000caf8:	2201      	movs	r2, #1
1000cafa:	430a      	orrs	r2, r1
1000cafc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cafe:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000cb00:	e0af      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb02:	4b27      	ldr	r3, [pc, #156]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb04:	891a      	ldrh	r2, [r3, #8]
1000cb06:	2102      	movs	r1, #2
1000cb08:	438a      	bics	r2, r1
1000cb0a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb0c:	8919      	ldrh	r1, [r3, #8]
1000cb0e:	2202      	movs	r2, #2
1000cb10:	430a      	orrs	r2, r1
1000cb12:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb14:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000cb16:	e0a4      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb18:	4b21      	ldr	r3, [pc, #132]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb1a:	891a      	ldrh	r2, [r3, #8]
1000cb1c:	2104      	movs	r1, #4
1000cb1e:	438a      	bics	r2, r1
1000cb20:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb22:	8919      	ldrh	r1, [r3, #8]
1000cb24:	2204      	movs	r2, #4
1000cb26:	430a      	orrs	r2, r1
1000cb28:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb2a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000cb2c:	e099      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb2e:	4b1c      	ldr	r3, [pc, #112]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb30:	891a      	ldrh	r2, [r3, #8]
1000cb32:	2108      	movs	r1, #8
1000cb34:	438a      	bics	r2, r1
1000cb36:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb38:	8919      	ldrh	r1, [r3, #8]
1000cb3a:	2208      	movs	r2, #8
1000cb3c:	430a      	orrs	r2, r1
1000cb3e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb40:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000cb42:	e08e      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb44:	4b16      	ldr	r3, [pc, #88]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb46:	891a      	ldrh	r2, [r3, #8]
1000cb48:	2110      	movs	r1, #16
1000cb4a:	438a      	bics	r2, r1
1000cb4c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb4e:	8919      	ldrh	r1, [r3, #8]
1000cb50:	2210      	movs	r2, #16
1000cb52:	430a      	orrs	r2, r1
1000cb54:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb56:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000cb58:	e083      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb5a:	4b11      	ldr	r3, [pc, #68]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb5c:	891a      	ldrh	r2, [r3, #8]
1000cb5e:	2120      	movs	r1, #32
1000cb60:	438a      	bics	r2, r1
1000cb62:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb64:	8919      	ldrh	r1, [r3, #8]
1000cb66:	2220      	movs	r2, #32
1000cb68:	430a      	orrs	r2, r1
1000cb6a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb6c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cb6e:	e078      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb70:	4b0b      	ldr	r3, [pc, #44]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb72:	891a      	ldrh	r2, [r3, #8]
1000cb74:	2140      	movs	r1, #64	; 0x40
1000cb76:	438a      	bics	r2, r1
1000cb78:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb7a:	8919      	ldrh	r1, [r3, #8]
1000cb7c:	2240      	movs	r2, #64	; 0x40
1000cb7e:	430a      	orrs	r2, r1
1000cb80:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb82:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000cb84:	e06d      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb86:	4b06      	ldr	r3, [pc, #24]	; (1000cba0 <system_peripheral_reset+0x390>)
1000cb88:	891a      	ldrh	r2, [r3, #8]
1000cb8a:	2180      	movs	r1, #128	; 0x80
1000cb8c:	438a      	bics	r2, r1
1000cb8e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb90:	8919      	ldrh	r1, [r3, #8]
1000cb92:	2280      	movs	r2, #128	; 0x80
1000cb94:	430a      	orrs	r2, r1
1000cb96:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb98:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cb9a:	e062      	b.n	1000cc62 <system_peripheral_reset+0x452>
1000cb9c:	100160c4 	.word	0x100160c4
1000cba0:	4000b000 	.word	0x4000b000
1000cba4:	fffffeff 	.word	0xfffffeff
1000cba8:	fffffdff 	.word	0xfffffdff
1000cbac:	fffffbff 	.word	0xfffffbff
1000cbb0:	fffff7ff 	.word	0xfffff7ff
1000cbb4:	ffffefff 	.word	0xffffefff
1000cbb8:	ffffdfff 	.word	0xffffdfff
1000cbbc:	ffffbfff 	.word	0xffffbfff
1000cbc0:	ffff7fff 	.word	0xffff7fff
1000cbc4:	fffeffff 	.word	0xfffeffff
1000cbc8:	fffdffff 	.word	0xfffdffff
1000cbcc:	fffbffff 	.word	0xfffbffff
1000cbd0:	fff7ffff 	.word	0xfff7ffff
1000cbd4:	ffefffff 	.word	0xffefffff
1000cbd8:	ffdfffff 	.word	0xffdfffff
1000cbdc:	ffbfffff 	.word	0xffbfffff
1000cbe0:	ff7fffff 	.word	0xff7fffff
1000cbe4:	feffffff 	.word	0xfeffffff
1000cbe8:	fdffffff 	.word	0xfdffffff
1000cbec:	fbffffff 	.word	0xfbffffff
1000cbf0:	f7ffffff 	.word	0xf7ffffff
1000cbf4:	efffffff 	.word	0xefffffff
1000cbf8:	dfffffff 	.word	0xdfffffff
1000cbfc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc00:	4b18      	ldr	r3, [pc, #96]	; (1000cc64 <system_peripheral_reset+0x454>)
1000cc02:	8919      	ldrh	r1, [r3, #8]
1000cc04:	4a18      	ldr	r2, [pc, #96]	; (1000cc68 <system_peripheral_reset+0x458>)
1000cc06:	400a      	ands	r2, r1
1000cc08:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc0a:	8919      	ldrh	r1, [r3, #8]
1000cc0c:	2280      	movs	r2, #128	; 0x80
1000cc0e:	0052      	lsls	r2, r2, #1
1000cc10:	430a      	orrs	r2, r1
1000cc12:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc14:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000cc16:	e024      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc18:	4b12      	ldr	r3, [pc, #72]	; (1000cc64 <system_peripheral_reset+0x454>)
1000cc1a:	8919      	ldrh	r1, [r3, #8]
1000cc1c:	4a13      	ldr	r2, [pc, #76]	; (1000cc6c <system_peripheral_reset+0x45c>)
1000cc1e:	400a      	ands	r2, r1
1000cc20:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc22:	8919      	ldrh	r1, [r3, #8]
1000cc24:	2280      	movs	r2, #128	; 0x80
1000cc26:	0092      	lsls	r2, r2, #2
1000cc28:	430a      	orrs	r2, r1
1000cc2a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc2c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cc2e:	e018      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc30:	4b0c      	ldr	r3, [pc, #48]	; (1000cc64 <system_peripheral_reset+0x454>)
1000cc32:	8919      	ldrh	r1, [r3, #8]
1000cc34:	4a0e      	ldr	r2, [pc, #56]	; (1000cc70 <system_peripheral_reset+0x460>)
1000cc36:	400a      	ands	r2, r1
1000cc38:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc3a:	8919      	ldrh	r1, [r3, #8]
1000cc3c:	2280      	movs	r2, #128	; 0x80
1000cc3e:	00d2      	lsls	r2, r2, #3
1000cc40:	430a      	orrs	r2, r1
1000cc42:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc44:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cc46:	e00c      	b.n	1000cc62 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc48:	4b06      	ldr	r3, [pc, #24]	; (1000cc64 <system_peripheral_reset+0x454>)
1000cc4a:	8919      	ldrh	r1, [r3, #8]
1000cc4c:	4a09      	ldr	r2, [pc, #36]	; (1000cc74 <system_peripheral_reset+0x464>)
1000cc4e:	400a      	ands	r2, r1
1000cc50:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc52:	8919      	ldrh	r1, [r3, #8]
1000cc54:	2280      	movs	r2, #128	; 0x80
1000cc56:	0112      	lsls	r2, r2, #4
1000cc58:	430a      	orrs	r2, r1
1000cc5a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc5c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cc5e:	e000      	b.n	1000cc62 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cc60:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cc62:	bd00      	pop	{pc}
1000cc64:	4000b000 	.word	0x4000b000
1000cc68:	fffffeff 	.word	0xfffffeff
1000cc6c:	fffffdff 	.word	0xfffffdff
1000cc70:	fffffbff 	.word	0xfffffbff
1000cc74:	fffff7ff 	.word	0xfffff7ff

1000cc78 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000cc78:	2380      	movs	r3, #128	; 0x80
1000cc7a:	04db      	lsls	r3, r3, #19
1000cc7c:	469c      	mov	ip, r3
1000cc7e:	4460      	add	r0, ip
1000cc80:	0080      	lsls	r0, r0, #2
1000cc82:	6001      	str	r1, [r0, #0]
}
1000cc84:	4770      	bx	lr
1000cc86:	46c0      	nop			; (mov r8, r8)

1000cc88 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000cc88:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cc8a:	4b20      	ldr	r3, [pc, #128]	; (1000cd0c <uart_rx0_isr_handler+0x84>)
1000cc8c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cc8e:	6823      	ldr	r3, [r4, #0]
1000cc90:	7d1d      	ldrb	r5, [r3, #20]
1000cc92:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cc94:	066a      	lsls	r2, r5, #25
1000cc96:	d513      	bpl.n	1000ccc0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cc98:	211e      	movs	r1, #30
1000cc9a:	2222      	movs	r2, #34	; 0x22
1000cc9c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cc9e:	7e1a      	ldrb	r2, [r3, #24]
1000cca0:	3123      	adds	r1, #35	; 0x23
1000cca2:	438a      	bics	r2, r1
1000cca4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cca6:	2321      	movs	r3, #33	; 0x21
1000cca8:	5ce3      	ldrb	r3, [r4, r3]
1000ccaa:	071b      	lsls	r3, r3, #28
1000ccac:	d506      	bpl.n	1000ccbc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ccae:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ccb0:	5ce3      	ldrb	r3, [r4, r3]
1000ccb2:	071b      	lsls	r3, r3, #28
1000ccb4:	d502      	bpl.n	1000ccbc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ccb6:	0020      	movs	r0, r4
1000ccb8:	6923      	ldr	r3, [r4, #16]
1000ccba:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ccbc:	6823      	ldr	r3, [r4, #0]
1000ccbe:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ccc0:	07eb      	lsls	r3, r5, #31
1000ccc2:	d522      	bpl.n	1000cd0a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ccc4:	6823      	ldr	r3, [r4, #0]
1000ccc6:	7c1b      	ldrb	r3, [r3, #16]
1000ccc8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ccca:	6962      	ldr	r2, [r4, #20]
1000cccc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ccce:	6963      	ldr	r3, [r4, #20]
1000ccd0:	3301      	adds	r3, #1
1000ccd2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ccd4:	8ba3      	ldrh	r3, [r4, #28]
1000ccd6:	3b01      	subs	r3, #1
1000ccd8:	b29b      	uxth	r3, r3
1000ccda:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ccdc:	8ba3      	ldrh	r3, [r4, #28]
1000ccde:	b29b      	uxth	r3, r3
1000cce0:	2b00      	cmp	r3, #0
1000cce2:	d112      	bne.n	1000cd0a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cce4:	3321      	adds	r3, #33	; 0x21
1000cce6:	5ce3      	ldrb	r3, [r4, r3]
1000cce8:	075b      	lsls	r3, r3, #29
1000ccea:	d50e      	bpl.n	1000cd0a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ccec:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ccee:	5ce3      	ldrb	r3, [r4, r3]
1000ccf0:	075b      	lsls	r3, r3, #29
1000ccf2:	d50a      	bpl.n	1000cd0a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ccf4:	2200      	movs	r2, #0
1000ccf6:	2322      	movs	r3, #34	; 0x22
1000ccf8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ccfa:	6822      	ldr	r2, [r4, #0]
1000ccfc:	7e13      	ldrb	r3, [r2, #24]
1000ccfe:	2101      	movs	r1, #1
1000cd00:	438b      	bics	r3, r1
1000cd02:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cd04:	68e3      	ldr	r3, [r4, #12]
1000cd06:	0020      	movs	r0, r4
1000cd08:	4798      	blx	r3
			}
		}
	}
}
1000cd0a:	bd70      	pop	{r4, r5, r6, pc}
1000cd0c:	10018aac 	.word	0x10018aac

1000cd10 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000cd10:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cd12:	4b21      	ldr	r3, [pc, #132]	; (1000cd98 <uart_tx0_isr_handler+0x88>)
1000cd14:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cd16:	6823      	ldr	r3, [r4, #0]
1000cd18:	791d      	ldrb	r5, [r3, #4]
1000cd1a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cd1c:	07ea      	lsls	r2, r5, #31
1000cd1e:	d517      	bpl.n	1000cd50 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cd20:	69a2      	ldr	r2, [r4, #24]
1000cd22:	7811      	ldrb	r1, [r2, #0]
1000cd24:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cd26:	3201      	adds	r2, #1
1000cd28:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cd2a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cd2c:	8be3      	ldrh	r3, [r4, #30]
1000cd2e:	3b01      	subs	r3, #1
1000cd30:	b29b      	uxth	r3, r3
1000cd32:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cd34:	8be3      	ldrh	r3, [r4, #30]
1000cd36:	b29b      	uxth	r3, r3
1000cd38:	2b00      	cmp	r3, #0
1000cd3a:	d109      	bne.n	1000cd50 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cd3c:	6822      	ldr	r2, [r4, #0]
1000cd3e:	7a13      	ldrb	r3, [r2, #8]
1000cd40:	2101      	movs	r1, #1
1000cd42:	438b      	bics	r3, r1
1000cd44:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cd46:	6822      	ldr	r2, [r4, #0]
1000cd48:	7a11      	ldrb	r1, [r2, #8]
1000cd4a:	2310      	movs	r3, #16
1000cd4c:	430b      	orrs	r3, r1
1000cd4e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cd50:	06eb      	lsls	r3, r5, #27
1000cd52:	d512      	bpl.n	1000cd7a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cd54:	2321      	movs	r3, #33	; 0x21
1000cd56:	5ce3      	ldrb	r3, [r4, r3]
1000cd58:	07db      	lsls	r3, r3, #31
1000cd5a:	d50e      	bpl.n	1000cd7a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cd5c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cd5e:	5ce3      	ldrb	r3, [r4, r3]
1000cd60:	07db      	lsls	r3, r3, #31
1000cd62:	d50a      	bpl.n	1000cd7a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cd64:	2200      	movs	r2, #0
1000cd66:	2322      	movs	r3, #34	; 0x22
1000cd68:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cd6a:	6822      	ldr	r2, [r4, #0]
1000cd6c:	7a13      	ldrb	r3, [r2, #8]
1000cd6e:	2110      	movs	r1, #16
1000cd70:	438b      	bics	r3, r1
1000cd72:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cd74:	0020      	movs	r0, r4
1000cd76:	6863      	ldr	r3, [r4, #4]
1000cd78:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cd7a:	06ab      	lsls	r3, r5, #26
1000cd7c:	d50a      	bpl.n	1000cd94 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cd7e:	2321      	movs	r3, #33	; 0x21
1000cd80:	5ce3      	ldrb	r3, [r4, r3]
1000cd82:	079b      	lsls	r3, r3, #30
1000cd84:	d506      	bpl.n	1000cd94 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cd86:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cd88:	5ce3      	ldrb	r3, [r4, r3]
1000cd8a:	079b      	lsls	r3, r3, #30
1000cd8c:	d502      	bpl.n	1000cd94 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cd8e:	68a3      	ldr	r3, [r4, #8]
1000cd90:	0020      	movs	r0, r4
1000cd92:	4798      	blx	r3
		}

	}
}
1000cd94:	bd70      	pop	{r4, r5, r6, pc}
1000cd96:	46c0      	nop			; (mov r8, r8)
1000cd98:	10018aac 	.word	0x10018aac

1000cd9c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cd9c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cd9e:	4b20      	ldr	r3, [pc, #128]	; (1000ce20 <uart_rx1_isr_handler+0x84>)
1000cda0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cda2:	6823      	ldr	r3, [r4, #0]
1000cda4:	7d1d      	ldrb	r5, [r3, #20]
1000cda6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cda8:	066a      	lsls	r2, r5, #25
1000cdaa:	d513      	bpl.n	1000cdd4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cdac:	211e      	movs	r1, #30
1000cdae:	2222      	movs	r2, #34	; 0x22
1000cdb0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cdb2:	7e1a      	ldrb	r2, [r3, #24]
1000cdb4:	3123      	adds	r1, #35	; 0x23
1000cdb6:	438a      	bics	r2, r1
1000cdb8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cdba:	2321      	movs	r3, #33	; 0x21
1000cdbc:	5ce3      	ldrb	r3, [r4, r3]
1000cdbe:	071b      	lsls	r3, r3, #28
1000cdc0:	d506      	bpl.n	1000cdd0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cdc2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cdc4:	5ce3      	ldrb	r3, [r4, r3]
1000cdc6:	071b      	lsls	r3, r3, #28
1000cdc8:	d502      	bpl.n	1000cdd0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cdca:	0020      	movs	r0, r4
1000cdcc:	6923      	ldr	r3, [r4, #16]
1000cdce:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cdd0:	6823      	ldr	r3, [r4, #0]
1000cdd2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cdd4:	07eb      	lsls	r3, r5, #31
1000cdd6:	d522      	bpl.n	1000ce1e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cdd8:	6823      	ldr	r3, [r4, #0]
1000cdda:	7c1b      	ldrb	r3, [r3, #16]
1000cddc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cdde:	6962      	ldr	r2, [r4, #20]
1000cde0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cde2:	6963      	ldr	r3, [r4, #20]
1000cde4:	3301      	adds	r3, #1
1000cde6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cde8:	8ba3      	ldrh	r3, [r4, #28]
1000cdea:	3b01      	subs	r3, #1
1000cdec:	b29b      	uxth	r3, r3
1000cdee:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cdf0:	8ba3      	ldrh	r3, [r4, #28]
1000cdf2:	b29b      	uxth	r3, r3
1000cdf4:	2b00      	cmp	r3, #0
1000cdf6:	d112      	bne.n	1000ce1e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cdf8:	3321      	adds	r3, #33	; 0x21
1000cdfa:	5ce3      	ldrb	r3, [r4, r3]
1000cdfc:	075b      	lsls	r3, r3, #29
1000cdfe:	d50e      	bpl.n	1000ce1e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ce00:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce02:	5ce3      	ldrb	r3, [r4, r3]
1000ce04:	075b      	lsls	r3, r3, #29
1000ce06:	d50a      	bpl.n	1000ce1e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ce08:	2200      	movs	r2, #0
1000ce0a:	2322      	movs	r3, #34	; 0x22
1000ce0c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ce0e:	6822      	ldr	r2, [r4, #0]
1000ce10:	7e13      	ldrb	r3, [r2, #24]
1000ce12:	2101      	movs	r1, #1
1000ce14:	438b      	bics	r3, r1
1000ce16:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ce18:	68e3      	ldr	r3, [r4, #12]
1000ce1a:	0020      	movs	r0, r4
1000ce1c:	4798      	blx	r3
			}
		}
	}
}
1000ce1e:	bd70      	pop	{r4, r5, r6, pc}
1000ce20:	10018aac 	.word	0x10018aac

1000ce24 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000ce24:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ce26:	4b21      	ldr	r3, [pc, #132]	; (1000ceac <uart_tx1_isr_handler+0x88>)
1000ce28:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ce2a:	6823      	ldr	r3, [r4, #0]
1000ce2c:	791d      	ldrb	r5, [r3, #4]
1000ce2e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ce30:	07ea      	lsls	r2, r5, #31
1000ce32:	d517      	bpl.n	1000ce64 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ce34:	69a2      	ldr	r2, [r4, #24]
1000ce36:	7811      	ldrb	r1, [r2, #0]
1000ce38:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ce3a:	3201      	adds	r2, #1
1000ce3c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ce3e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ce40:	8be3      	ldrh	r3, [r4, #30]
1000ce42:	3b01      	subs	r3, #1
1000ce44:	b29b      	uxth	r3, r3
1000ce46:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ce48:	8be3      	ldrh	r3, [r4, #30]
1000ce4a:	b29b      	uxth	r3, r3
1000ce4c:	2b00      	cmp	r3, #0
1000ce4e:	d109      	bne.n	1000ce64 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ce50:	6822      	ldr	r2, [r4, #0]
1000ce52:	7a13      	ldrb	r3, [r2, #8]
1000ce54:	2101      	movs	r1, #1
1000ce56:	438b      	bics	r3, r1
1000ce58:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ce5a:	6822      	ldr	r2, [r4, #0]
1000ce5c:	7a11      	ldrb	r1, [r2, #8]
1000ce5e:	2310      	movs	r3, #16
1000ce60:	430b      	orrs	r3, r1
1000ce62:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ce64:	06eb      	lsls	r3, r5, #27
1000ce66:	d512      	bpl.n	1000ce8e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ce68:	2321      	movs	r3, #33	; 0x21
1000ce6a:	5ce3      	ldrb	r3, [r4, r3]
1000ce6c:	07db      	lsls	r3, r3, #31
1000ce6e:	d50e      	bpl.n	1000ce8e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ce70:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ce72:	5ce3      	ldrb	r3, [r4, r3]
1000ce74:	07db      	lsls	r3, r3, #31
1000ce76:	d50a      	bpl.n	1000ce8e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ce78:	2200      	movs	r2, #0
1000ce7a:	2322      	movs	r3, #34	; 0x22
1000ce7c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ce7e:	6822      	ldr	r2, [r4, #0]
1000ce80:	7a13      	ldrb	r3, [r2, #8]
1000ce82:	2110      	movs	r1, #16
1000ce84:	438b      	bics	r3, r1
1000ce86:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ce88:	0020      	movs	r0, r4
1000ce8a:	6863      	ldr	r3, [r4, #4]
1000ce8c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ce8e:	06ab      	lsls	r3, r5, #26
1000ce90:	d50a      	bpl.n	1000cea8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ce92:	2321      	movs	r3, #33	; 0x21
1000ce94:	5ce3      	ldrb	r3, [r4, r3]
1000ce96:	079b      	lsls	r3, r3, #30
1000ce98:	d506      	bpl.n	1000cea8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ce9a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ce9c:	5ce3      	ldrb	r3, [r4, r3]
1000ce9e:	079b      	lsls	r3, r3, #30
1000cea0:	d502      	bpl.n	1000cea8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cea2:	68a3      	ldr	r3, [r4, #8]
1000cea4:	0020      	movs	r0, r4
1000cea6:	4798      	blx	r3
		}

	}
}
1000cea8:	bd70      	pop	{r4, r5, r6, pc}
1000ceaa:	46c0      	nop			; (mov r8, r8)
1000ceac:	10018aac 	.word	0x10018aac

1000ceb0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000ceb0:	23e1      	movs	r3, #225	; 0xe1
1000ceb2:	025b      	lsls	r3, r3, #9
1000ceb4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000ceb6:	2300      	movs	r3, #0
1000ceb8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000ceba:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000cebc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000cebe:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cec0:	3302      	adds	r3, #2
1000cec2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cec4:	2203      	movs	r2, #3
1000cec6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cec8:	3201      	adds	r2, #1
1000ceca:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cecc:	3201      	adds	r2, #1
1000cece:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000ced0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000ced2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000ced4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000ced6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000ced8:	4770      	bx	lr
1000ceda:	46c0      	nop			; (mov r8, r8)

1000cedc <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cede:	464f      	mov	r7, r9
1000cee0:	4646      	mov	r6, r8
1000cee2:	b4c0      	push	{r6, r7}
1000cee4:	0005      	movs	r5, r0
1000cee6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cee8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000ceea:	2300      	movs	r3, #0
1000ceec:	6043      	str	r3, [r0, #4]
1000ceee:	6083      	str	r3, [r0, #8]
1000cef0:	60c3      	str	r3, [r0, #12]
1000cef2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cef4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cef6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000cef8:	2200      	movs	r2, #0
1000cefa:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000cefc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cefe:	3320      	adds	r3, #32
1000cf00:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cf02:	3301      	adds	r3, #1
1000cf04:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000cf06:	3301      	adds	r3, #1
1000cf08:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000cf0a:	4b55      	ldr	r3, [pc, #340]	; (1000d060 <uart_init+0x184>)
1000cf0c:	4299      	cmp	r1, r3
1000cf0e:	d118      	bne.n	1000cf42 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000cf10:	2009      	movs	r0, #9
1000cf12:	4c54      	ldr	r4, [pc, #336]	; (1000d064 <uart_init+0x188>)
1000cf14:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000cf16:	200a      	movs	r0, #10
1000cf18:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cf1a:	2009      	movs	r0, #9
1000cf1c:	4c52      	ldr	r4, [pc, #328]	; (1000d068 <uart_init+0x18c>)
1000cf1e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cf20:	200a      	movs	r0, #10
1000cf22:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cf24:	4b51      	ldr	r3, [pc, #324]	; (1000d06c <uart_init+0x190>)
1000cf26:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cf28:	4951      	ldr	r1, [pc, #324]	; (1000d070 <uart_init+0x194>)
1000cf2a:	2010      	movs	r0, #16
1000cf2c:	4c51      	ldr	r4, [pc, #324]	; (1000d074 <uart_init+0x198>)
1000cf2e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cf30:	4951      	ldr	r1, [pc, #324]	; (1000d078 <uart_init+0x19c>)
1000cf32:	2011      	movs	r0, #17
1000cf34:	47a0      	blx	r4
1000cf36:	4b51      	ldr	r3, [pc, #324]	; (1000d07c <uart_init+0x1a0>)
1000cf38:	2201      	movs	r2, #1
1000cf3a:	601a      	str	r2, [r3, #0]
1000cf3c:	3201      	adds	r2, #1
1000cf3e:	601a      	str	r2, [r3, #0]
1000cf40:	e01a      	b.n	1000cf78 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000cf42:	4b4f      	ldr	r3, [pc, #316]	; (1000d080 <uart_init+0x1a4>)
1000cf44:	4299      	cmp	r1, r3
1000cf46:	d117      	bne.n	1000cf78 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cf48:	200b      	movs	r0, #11
1000cf4a:	4c46      	ldr	r4, [pc, #280]	; (1000d064 <uart_init+0x188>)
1000cf4c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cf4e:	200c      	movs	r0, #12
1000cf50:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cf52:	200b      	movs	r0, #11
1000cf54:	4c44      	ldr	r4, [pc, #272]	; (1000d068 <uart_init+0x18c>)
1000cf56:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cf58:	200c      	movs	r0, #12
1000cf5a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cf5c:	4b43      	ldr	r3, [pc, #268]	; (1000d06c <uart_init+0x190>)
1000cf5e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cf60:	4948      	ldr	r1, [pc, #288]	; (1000d084 <uart_init+0x1a8>)
1000cf62:	2012      	movs	r0, #18
1000cf64:	4c43      	ldr	r4, [pc, #268]	; (1000d074 <uart_init+0x198>)
1000cf66:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cf68:	4947      	ldr	r1, [pc, #284]	; (1000d088 <uart_init+0x1ac>)
1000cf6a:	2013      	movs	r0, #19
1000cf6c:	47a0      	blx	r4
1000cf6e:	4b43      	ldr	r3, [pc, #268]	; (1000d07c <uart_init+0x1a0>)
1000cf70:	2204      	movs	r2, #4
1000cf72:	601a      	str	r2, [r3, #0]
1000cf74:	3204      	adds	r2, #4
1000cf76:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cf78:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000cf7a:	2204      	movs	r2, #4
1000cf7c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cf7e:	2b00      	cmp	r3, #0
1000cf80:	d152      	bne.n	1000d028 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000cf82:	3302      	adds	r3, #2
1000cf84:	4698      	mov	r8, r3
1000cf86:	e04f      	b.n	1000d028 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cf88:	8a31      	ldrh	r1, [r6, #16]
1000cf8a:	ce01      	ldmia	r6!, {r0}
1000cf8c:	b2c0      	uxtb	r0, r0
1000cf8e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cf90:	3401      	adds	r4, #1
1000cf92:	b2e4      	uxtb	r4, r4
1000cf94:	4544      	cmp	r4, r8
1000cf96:	d3f7      	bcc.n	1000cf88 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cf98:	682b      	ldr	r3, [r5, #0]
1000cf9a:	7d1a      	ldrb	r2, [r3, #20]
1000cf9c:	07d2      	lsls	r2, r2, #31
1000cf9e:	d504      	bpl.n	1000cfaa <uart_init+0xce>
1000cfa0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000cfa2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cfa4:	7d1a      	ldrb	r2, [r3, #20]
1000cfa6:	420a      	tst	r2, r1
1000cfa8:	d1fb      	bne.n	1000cfa2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000cfaa:	2100      	movs	r1, #0
1000cfac:	2220      	movs	r2, #32
1000cfae:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cfb0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000cfb2:	1e59      	subs	r1, r3, #1
1000cfb4:	418b      	sbcs	r3, r1
1000cfb6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cfb8:	793b      	ldrb	r3, [r7, #4]
1000cfba:	797a      	ldrb	r2, [r7, #5]
1000cfbc:	4313      	orrs	r3, r2
1000cfbe:	430b      	orrs	r3, r1
	switch(config->parity) {
1000cfc0:	79ba      	ldrb	r2, [r7, #6]
1000cfc2:	2a02      	cmp	r2, #2
1000cfc4:	d00d      	beq.n	1000cfe2 <uart_init+0x106>
1000cfc6:	b2d1      	uxtb	r1, r2
1000cfc8:	2902      	cmp	r1, #2
1000cfca:	d802      	bhi.n	1000cfd2 <uart_init+0xf6>
1000cfcc:	2a01      	cmp	r2, #1
1000cfce:	d005      	beq.n	1000cfdc <uart_init+0x100>
1000cfd0:	e00f      	b.n	1000cff2 <uart_init+0x116>
1000cfd2:	2a03      	cmp	r2, #3
1000cfd4:	d008      	beq.n	1000cfe8 <uart_init+0x10c>
1000cfd6:	2a04      	cmp	r2, #4
1000cfd8:	d009      	beq.n	1000cfee <uart_init+0x112>
1000cfda:	e00a      	b.n	1000cff2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000cfdc:	2202      	movs	r2, #2
1000cfde:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000cfe0:	e007      	b.n	1000cff2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000cfe2:	2206      	movs	r2, #6
1000cfe4:	4313      	orrs	r3, r2
			break;
1000cfe6:	e004      	b.n	1000cff2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000cfe8:	220a      	movs	r2, #10
1000cfea:	4313      	orrs	r3, r2
			break;
1000cfec:	e001      	b.n	1000cff2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000cfee:	220e      	movs	r2, #14
1000cff0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000cff2:	2220      	movs	r2, #32
1000cff4:	6829      	ldr	r1, [r5, #0]
1000cff6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000cff8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cffa:	4b24      	ldr	r3, [pc, #144]	; (1000d08c <uart_init+0x1b0>)
1000cffc:	4798      	blx	r3
1000cffe:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d000:	0031      	movs	r1, r6
1000d002:	4b23      	ldr	r3, [pc, #140]	; (1000d090 <uart_init+0x1b4>)
1000d004:	4798      	blx	r3
1000d006:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d008:	0400      	lsls	r0, r0, #16
1000d00a:	0c00      	lsrs	r0, r0, #16
1000d00c:	4370      	muls	r0, r6
1000d00e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d010:	0931      	lsrs	r1, r6, #4
1000d012:	4288      	cmp	r0, r1
1000d014:	d906      	bls.n	1000d024 <uart_init+0x148>
1000d016:	2300      	movs	r3, #0
		i++;
1000d018:	3301      	adds	r3, #1
1000d01a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d01c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d01e:	4288      	cmp	r0, r1
1000d020:	d8fa      	bhi.n	1000d018 <uart_init+0x13c>
1000d022:	e007      	b.n	1000d034 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d024:	2300      	movs	r3, #0
1000d026:	e005      	b.n	1000d034 <uart_init+0x158>
1000d028:	003e      	movs	r6, r7
1000d02a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d02c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d02e:	4b19      	ldr	r3, [pc, #100]	; (1000d094 <uart_init+0x1b8>)
1000d030:	4699      	mov	r9, r3
1000d032:	e7a9      	b.n	1000cf88 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d034:	2100      	movs	r1, #0
1000d036:	2028      	movs	r0, #40	; 0x28
1000d038:	682c      	ldr	r4, [r5, #0]
1000d03a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d03c:	3301      	adds	r3, #1
1000d03e:	071b      	lsls	r3, r3, #28
1000d040:	0f5b      	lsrs	r3, r3, #29
1000d042:	00d2      	lsls	r2, r2, #3
1000d044:	4313      	orrs	r3, r2
1000d046:	b29b      	uxth	r3, r3
1000d048:	682a      	ldr	r2, [r5, #0]
1000d04a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d04c:	682b      	ldr	r3, [r5, #0]
1000d04e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d050:	682b      	ldr	r3, [r5, #0]
1000d052:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d054:	2000      	movs	r0, #0
1000d056:	bc0c      	pop	{r2, r3}
1000d058:	4690      	mov	r8, r2
1000d05a:	4699      	mov	r9, r3
1000d05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d05e:	46c0      	nop			; (mov r8, r8)
1000d060:	40004000 	.word	0x40004000
1000d064:	1000c811 	.word	0x1000c811
1000d068:	1000c149 	.word	0x1000c149
1000d06c:	10018aac 	.word	0x10018aac
1000d070:	1000cc89 	.word	0x1000cc89
1000d074:	1000cc79 	.word	0x1000cc79
1000d078:	1000cd11 	.word	0x1000cd11
1000d07c:	e000e100 	.word	0xe000e100
1000d080:	40005000 	.word	0x40005000
1000d084:	1000cd9d 	.word	0x1000cd9d
1000d088:	1000ce25 	.word	0x1000ce25
1000d08c:	1000c13d 	.word	0x1000c13d
1000d090:	10012641 	.word	0x10012641
1000d094:	1000bd99 	.word	0x1000bd99

1000d098 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d098:	6802      	ldr	r2, [r0, #0]
1000d09a:	2001      	movs	r0, #1
1000d09c:	7913      	ldrb	r3, [r2, #4]
1000d09e:	4203      	tst	r3, r0
1000d0a0:	d0fc      	beq.n	1000d09c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d0a2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d0a4:	2000      	movs	r0, #0
1000d0a6:	4770      	bx	lr

1000d0a8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d0a8:	6802      	ldr	r2, [r0, #0]
1000d0aa:	2001      	movs	r0, #1
1000d0ac:	7d13      	ldrb	r3, [r2, #20]
1000d0ae:	4203      	tst	r3, r0
1000d0b0:	d0fc      	beq.n	1000d0ac <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d0b2:	7c13      	ldrb	r3, [r2, #16]
1000d0b4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d0b6:	2000      	movs	r0, #0
1000d0b8:	4770      	bx	lr
1000d0ba:	46c0      	nop			; (mov r8, r8)

1000d0bc <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d0bc:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d0be:	2a00      	cmp	r2, #0
1000d0c0:	d00d      	beq.n	1000d0de <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d0c2:	330b      	adds	r3, #11
1000d0c4:	5cc3      	ldrb	r3, [r0, r3]
1000d0c6:	b2db      	uxtb	r3, r3
1000d0c8:	2b05      	cmp	r3, #5
1000d0ca:	d008      	beq.n	1000d0de <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d0cc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d0ce:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d0d0:	2205      	movs	r2, #5
1000d0d2:	2322      	movs	r3, #34	; 0x22
1000d0d4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d0d6:	6803      	ldr	r3, [r0, #0]
1000d0d8:	3a04      	subs	r2, #4
1000d0da:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d0dc:	2300      	movs	r3, #0
}
1000d0de:	0018      	movs	r0, r3
1000d0e0:	4770      	bx	lr
1000d0e2:	46c0      	nop			; (mov r8, r8)

1000d0e4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d0e4:	0093      	lsls	r3, r2, #2
1000d0e6:	18c3      	adds	r3, r0, r3
1000d0e8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d0ea:	2120      	movs	r1, #32
1000d0ec:	2301      	movs	r3, #1
1000d0ee:	4093      	lsls	r3, r2
1000d0f0:	5c42      	ldrb	r2, [r0, r1]
1000d0f2:	4313      	orrs	r3, r2
1000d0f4:	5443      	strb	r3, [r0, r1]
}
1000d0f6:	4770      	bx	lr

1000d0f8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d0f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d0fa:	2221      	movs	r2, #33	; 0x21
1000d0fc:	2301      	movs	r3, #1
1000d0fe:	408b      	lsls	r3, r1
1000d100:	5c84      	ldrb	r4, [r0, r2]
1000d102:	4323      	orrs	r3, r4
1000d104:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d106:	2901      	cmp	r1, #1
1000d108:	d104      	bne.n	1000d114 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d10a:	6802      	ldr	r2, [r0, #0]
1000d10c:	7a11      	ldrb	r1, [r2, #8]
1000d10e:	2320      	movs	r3, #32
1000d110:	430b      	orrs	r3, r1
1000d112:	7213      	strb	r3, [r2, #8]
	}
}
1000d114:	bd10      	pop	{r4, pc}
1000d116:	46c0      	nop			; (mov r8, r8)

1000d118 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d118:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d11a:	2201      	movs	r2, #1
1000d11c:	408a      	lsls	r2, r1
1000d11e:	2421      	movs	r4, #33	; 0x21
1000d120:	5d03      	ldrb	r3, [r0, r4]
1000d122:	4393      	bics	r3, r2
1000d124:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d126:	2901      	cmp	r1, #1
1000d128:	d104      	bne.n	1000d134 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d12a:	6802      	ldr	r2, [r0, #0]
1000d12c:	7a13      	ldrb	r3, [r2, #8]
1000d12e:	311f      	adds	r1, #31
1000d130:	438b      	bics	r3, r1
1000d132:	7213      	strb	r3, [r2, #8]
	}

}
1000d134:	bd10      	pop	{r4, pc}
1000d136:	46c0      	nop			; (mov r8, r8)

1000d138 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d138:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d13a:	4647      	mov	r7, r8
1000d13c:	b480      	push	{r7}
1000d13e:	000c      	movs	r4, r1
1000d140:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d142:	2800      	cmp	r0, #0
1000d144:	d10d      	bne.n	1000d162 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d146:	2a00      	cmp	r2, #0
1000d148:	dd0e      	ble.n	1000d168 <_read+0x30>
1000d14a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d14c:	4e08      	ldr	r6, [pc, #32]	; (1000d170 <_read+0x38>)
1000d14e:	4d09      	ldr	r5, [pc, #36]	; (1000d174 <_read+0x3c>)
1000d150:	6830      	ldr	r0, [r6, #0]
1000d152:	0021      	movs	r1, r4
1000d154:	682b      	ldr	r3, [r5, #0]
1000d156:	4798      	blx	r3
		ptr++;
1000d158:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d15a:	42a7      	cmp	r7, r4
1000d15c:	d1f8      	bne.n	1000d150 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d15e:	4640      	mov	r0, r8
1000d160:	e003      	b.n	1000d16a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d162:	2001      	movs	r0, #1
1000d164:	4240      	negs	r0, r0
1000d166:	e000      	b.n	1000d16a <_read+0x32>
	}

	for (; len > 0; --len) {
1000d168:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d16a:	bc04      	pop	{r2}
1000d16c:	4690      	mov	r8, r2
1000d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d170:	10018abc 	.word	0x10018abc
1000d174:	10018ab4 	.word	0x10018ab4

1000d178 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d178:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d17a:	4647      	mov	r7, r8
1000d17c:	b480      	push	{r7}
1000d17e:	000e      	movs	r6, r1
1000d180:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d182:	3801      	subs	r0, #1
1000d184:	2802      	cmp	r0, #2
1000d186:	d811      	bhi.n	1000d1ac <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d188:	2a00      	cmp	r2, #0
1000d18a:	d012      	beq.n	1000d1b2 <_write+0x3a>
1000d18c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d18e:	4b0c      	ldr	r3, [pc, #48]	; (1000d1c0 <_write+0x48>)
1000d190:	4698      	mov	r8, r3
1000d192:	4f0c      	ldr	r7, [pc, #48]	; (1000d1c4 <_write+0x4c>)
1000d194:	4643      	mov	r3, r8
1000d196:	6818      	ldr	r0, [r3, #0]
1000d198:	5d31      	ldrb	r1, [r6, r4]
1000d19a:	683b      	ldr	r3, [r7, #0]
1000d19c:	4798      	blx	r3
1000d19e:	2800      	cmp	r0, #0
1000d1a0:	db09      	blt.n	1000d1b6 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d1a2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d1a4:	42a5      	cmp	r5, r4
1000d1a6:	d1f5      	bne.n	1000d194 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d1a8:	0020      	movs	r0, r4
1000d1aa:	e006      	b.n	1000d1ba <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d1ac:	2001      	movs	r0, #1
1000d1ae:	4240      	negs	r0, r0
1000d1b0:	e003      	b.n	1000d1ba <_write+0x42>
	}

	for (; len != 0; --len) {
1000d1b2:	2000      	movs	r0, #0
1000d1b4:	e001      	b.n	1000d1ba <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d1b6:	2001      	movs	r0, #1
1000d1b8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d1ba:	bc04      	pop	{r2}
1000d1bc:	4690      	mov	r8, r2
1000d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1c0:	10018abc 	.word	0x10018abc
1000d1c4:	10018ab8 	.word	0x10018ab8

1000d1c8 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d1c8:	2000      	movs	r0, #0
1000d1ca:	4770      	bx	lr

1000d1cc <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d1cc:	2000      	movs	r0, #0
1000d1ce:	4770      	bx	lr

1000d1d0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d1d0:	78c0      	ldrb	r0, [r0, #3]
1000d1d2:	2800      	cmp	r0, #0
1000d1d4:	d000      	beq.n	1000d1d8 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d1d6:	20e2      	movs	r0, #226	; 0xe2
}
1000d1d8:	4770      	bx	lr
1000d1da:	46c0      	nop			; (mov r8, r8)

1000d1dc <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d1dc:	2000      	movs	r0, #0
1000d1de:	4770      	bx	lr

1000d1e0 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d1e0:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d1e2:	7800      	ldrb	r0, [r0, #0]
1000d1e4:	2800      	cmp	r0, #0
1000d1e6:	d006      	beq.n	1000d1f6 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d1e8:	4803      	ldr	r0, [pc, #12]	; (1000d1f8 <ble_scan_report_handler+0x18>)
1000d1ea:	4b04      	ldr	r3, [pc, #16]	; (1000d1fc <ble_scan_report_handler+0x1c>)
1000d1ec:	4798      	blx	r3
1000d1ee:	4804      	ldr	r0, [pc, #16]	; (1000d200 <ble_scan_report_handler+0x20>)
1000d1f0:	4b04      	ldr	r3, [pc, #16]	; (1000d204 <ble_scan_report_handler+0x24>)
1000d1f2:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d1f4:	20e2      	movs	r0, #226	; 0xe2
}
1000d1f6:	bd10      	pop	{r4, pc}
1000d1f8:	100157dc 	.word	0x100157dc
1000d1fc:	10014631 	.word	0x10014631
1000d200:	10016338 	.word	0x10016338
1000d204:	10014511 	.word	0x10014511

1000d208 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d208:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d20a:	7800      	ldrb	r0, [r0, #0]
1000d20c:	2800      	cmp	r0, #0
1000d20e:	d006      	beq.n	1000d21e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d210:	4803      	ldr	r0, [pc, #12]	; (1000d220 <ble_adv_report_handler+0x18>)
1000d212:	4b04      	ldr	r3, [pc, #16]	; (1000d224 <ble_adv_report_handler+0x1c>)
1000d214:	4798      	blx	r3
1000d216:	4804      	ldr	r0, [pc, #16]	; (1000d228 <ble_adv_report_handler+0x20>)
1000d218:	4b04      	ldr	r3, [pc, #16]	; (1000d22c <ble_adv_report_handler+0x24>)
1000d21a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d21c:	20e2      	movs	r0, #226	; 0xe2
}
1000d21e:	bd10      	pop	{r4, pc}
1000d220:	100157dc 	.word	0x100157dc
1000d224:	10014631 	.word	0x10014631
1000d228:	1001634c 	.word	0x1001634c
1000d22c:	10014511 	.word	0x10014511

1000d230 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d230:	b510      	push	{r4, lr}
1000d232:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d234:	78c0      	ldrb	r0, [r0, #3]
1000d236:	2800      	cmp	r0, #0
1000d238:	d008      	beq.n	1000d24c <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d23a:	4805      	ldr	r0, [pc, #20]	; (1000d250 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000d23c:	4b05      	ldr	r3, [pc, #20]	; (1000d254 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000d23e:	4798      	blx	r3
1000d240:	78a2      	ldrb	r2, [r4, #2]
1000d242:	8821      	ldrh	r1, [r4, #0]
1000d244:	4804      	ldr	r0, [pc, #16]	; (1000d258 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000d246:	4b05      	ldr	r3, [pc, #20]	; (1000d25c <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000d248:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d24a:	20e2      	movs	r0, #226	; 0xe2
}
1000d24c:	bd10      	pop	{r4, pc}
1000d24e:	46c0      	nop			; (mov r8, r8)
1000d250:	100157dc 	.word	0x100157dc
1000d254:	10014631 	.word	0x10014631
1000d258:	10016360 	.word	0x10016360
1000d25c:	10014511 	.word	0x10014511

1000d260 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d262:	0004      	movs	r4, r0
1000d264:	4b19      	ldr	r3, [pc, #100]	; (1000d2cc <ble_disconnected_state_handler+0x6c>)
1000d266:	229b      	movs	r2, #155	; 0x9b
1000d268:	0092      	lsls	r2, r2, #2
1000d26a:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d26c:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d26e:	2600      	movs	r6, #0
1000d270:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d272:	001a      	movs	r2, r3
1000d274:	3a56      	subs	r2, #86	; 0x56
1000d276:	8811      	ldrh	r1, [r2, #0]
1000d278:	8822      	ldrh	r2, [r4, #0]
1000d27a:	4291      	cmp	r1, r2
1000d27c:	d119      	bne.n	1000d2b2 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d27e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d280:	2a05      	cmp	r2, #5
1000d282:	d001      	beq.n	1000d288 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d284:	2a08      	cmp	r2, #8
1000d286:	d101      	bne.n	1000d28c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d288:	7007      	strb	r7, [r0, #0]
1000d28a:	e012      	b.n	1000d2b2 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d28c:	2a07      	cmp	r2, #7
1000d28e:	d80f      	bhi.n	1000d2b0 <ble_disconnected_state_handler+0x50>
1000d290:	0092      	lsls	r2, r2, #2
1000d292:	490f      	ldr	r1, [pc, #60]	; (1000d2d0 <ble_disconnected_state_handler+0x70>)
1000d294:	588a      	ldr	r2, [r1, r2]
1000d296:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d298:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000d29a:	4a0e      	ldr	r2, [pc, #56]	; (1000d2d4 <ble_disconnected_state_handler+0x74>)
1000d29c:	7812      	ldrb	r2, [r2, #0]
1000d29e:	2a00      	cmp	r2, #0
1000d2a0:	d007      	beq.n	1000d2b2 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000d2a2:	4a0c      	ldr	r2, [pc, #48]	; (1000d2d4 <ble_disconnected_state_handler+0x74>)
1000d2a4:	7812      	ldrb	r2, [r2, #0]
1000d2a6:	3a01      	subs	r2, #1
1000d2a8:	b2d2      	uxtb	r2, r2
1000d2aa:	490a      	ldr	r1, [pc, #40]	; (1000d2d4 <ble_disconnected_state_handler+0x74>)
1000d2ac:	700a      	strb	r2, [r1, #0]
1000d2ae:	e000      	b.n	1000d2b2 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d2b0:	7006      	strb	r6, [r0, #0]
1000d2b2:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2b4:	42ab      	cmp	r3, r5
1000d2b6:	d1db      	bne.n	1000d270 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d2b8:	4807      	ldr	r0, [pc, #28]	; (1000d2d8 <ble_disconnected_state_handler+0x78>)
1000d2ba:	4b08      	ldr	r3, [pc, #32]	; (1000d2dc <ble_disconnected_state_handler+0x7c>)
1000d2bc:	4798      	blx	r3
1000d2be:	8822      	ldrh	r2, [r4, #0]
1000d2c0:	78a1      	ldrb	r1, [r4, #2]
1000d2c2:	4807      	ldr	r0, [pc, #28]	; (1000d2e0 <ble_disconnected_state_handler+0x80>)
1000d2c4:	4b07      	ldr	r3, [pc, #28]	; (1000d2e4 <ble_disconnected_state_handler+0x84>)
1000d2c6:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d2c8:	2000      	movs	r0, #0
1000d2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d2cc:	10018b36 	.word	0x10018b36
1000d2d0:	100161d4 	.word	0x100161d4
1000d2d4:	10018d44 	.word	0x10018d44
1000d2d8:	100157dc 	.word	0x100157dc
1000d2dc:	10014631 	.word	0x10014631
1000d2e0:	10016398 	.word	0x10016398
1000d2e4:	10014511 	.word	0x10014511

1000d2e8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d2ea:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d2ec:	8801      	ldrh	r1, [r0, #0]
1000d2ee:	4b28      	ldr	r3, [pc, #160]	; (1000d390 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2f0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d2f2:	891a      	ldrh	r2, [r3, #8]
1000d2f4:	428a      	cmp	r2, r1
1000d2f6:	d104      	bne.n	1000d302 <ble_encryption_status_change_handler+0x1a>
1000d2f8:	001a      	movs	r2, r3
1000d2fa:	325e      	adds	r2, #94	; 0x5e
1000d2fc:	7812      	ldrb	r2, [r2, #0]
1000d2fe:	2a06      	cmp	r2, #6
1000d300:	d02e      	beq.n	1000d360 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d302:	3401      	adds	r4, #1
1000d304:	b2e4      	uxtb	r4, r4
1000d306:	337c      	adds	r3, #124	; 0x7c
1000d308:	2c05      	cmp	r4, #5
1000d30a:	d1f2      	bne.n	1000d2f2 <ble_encryption_status_change_handler+0xa>
1000d30c:	e039      	b.n	1000d382 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d30e:	4920      	ldr	r1, [pc, #128]	; (1000d390 <ble_encryption_status_change_handler+0xa8>)
1000d310:	0163      	lsls	r3, r4, #5
1000d312:	1b1a      	subs	r2, r3, r4
1000d314:	0092      	lsls	r2, r2, #2
1000d316:	188a      	adds	r2, r1, r2
1000d318:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d31a:	0014      	movs	r4, r2
1000d31c:	345e      	adds	r4, #94	; 0x5e
1000d31e:	2307      	movs	r3, #7
1000d320:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d322:	481c      	ldr	r0, [pc, #112]	; (1000d394 <ble_encryption_status_change_handler+0xac>)
1000d324:	4b1c      	ldr	r3, [pc, #112]	; (1000d398 <ble_encryption_status_change_handler+0xb0>)
1000d326:	4798      	blx	r3
1000d328:	481c      	ldr	r0, [pc, #112]	; (1000d39c <ble_encryption_status_change_handler+0xb4>)
1000d32a:	4b1d      	ldr	r3, [pc, #116]	; (1000d3a0 <ble_encryption_status_change_handler+0xb8>)
1000d32c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d32e:	25e2      	movs	r5, #226	; 0xe2
1000d330:	e02b      	b.n	1000d38a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d332:	4818      	ldr	r0, [pc, #96]	; (1000d394 <ble_encryption_status_change_handler+0xac>)
1000d334:	4b18      	ldr	r3, [pc, #96]	; (1000d398 <ble_encryption_status_change_handler+0xb0>)
1000d336:	4798      	blx	r3
1000d338:	481a      	ldr	r0, [pc, #104]	; (1000d3a4 <ble_encryption_status_change_handler+0xbc>)
1000d33a:	4b19      	ldr	r3, [pc, #100]	; (1000d3a0 <ble_encryption_status_change_handler+0xb8>)
1000d33c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d33e:	4914      	ldr	r1, [pc, #80]	; (1000d390 <ble_encryption_status_change_handler+0xa8>)
1000d340:	0163      	lsls	r3, r4, #5
1000d342:	1b1a      	subs	r2, r3, r4
1000d344:	0092      	lsls	r2, r2, #2
1000d346:	188a      	adds	r2, r1, r2
1000d348:	0010      	movs	r0, r2
1000d34a:	305e      	adds	r0, #94	; 0x5e
1000d34c:	2708      	movs	r7, #8
1000d34e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d350:	78f0      	ldrb	r0, [r6, #3]
1000d352:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d354:	78b2      	ldrb	r2, [r6, #2]
1000d356:	1b1c      	subs	r4, r3, r4
1000d358:	00a4      	lsls	r4, r4, #2
1000d35a:	190c      	adds	r4, r1, r4
1000d35c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d35e:	e014      	b.n	1000d38a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d360:	78b5      	ldrb	r5, [r6, #2]
1000d362:	2d00      	cmp	r5, #0
1000d364:	d0e5      	beq.n	1000d332 <ble_encryption_status_change_handler+0x4a>
1000d366:	e7d2      	b.n	1000d30e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d368:	4e0a      	ldr	r6, [pc, #40]	; (1000d394 <ble_encryption_status_change_handler+0xac>)
1000d36a:	0030      	movs	r0, r6
1000d36c:	4d0a      	ldr	r5, [pc, #40]	; (1000d398 <ble_encryption_status_change_handler+0xb0>)
1000d36e:	47a8      	blx	r5
1000d370:	480c      	ldr	r0, [pc, #48]	; (1000d3a4 <ble_encryption_status_change_handler+0xbc>)
1000d372:	4c0b      	ldr	r4, [pc, #44]	; (1000d3a0 <ble_encryption_status_change_handler+0xb8>)
1000d374:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d376:	0030      	movs	r0, r6
1000d378:	47a8      	blx	r5
1000d37a:	480b      	ldr	r0, [pc, #44]	; (1000d3a8 <ble_encryption_status_change_handler+0xc0>)
1000d37c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d37e:	25e2      	movs	r5, #226	; 0xe2
1000d380:	e003      	b.n	1000d38a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d382:	78b5      	ldrb	r5, [r6, #2]
1000d384:	2d00      	cmp	r5, #0
1000d386:	d1c2      	bne.n	1000d30e <ble_encryption_status_change_handler+0x26>
1000d388:	e7ee      	b.n	1000d368 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d38a:	0028      	movs	r0, r5
1000d38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d38e:	46c0      	nop			; (mov r8, r8)
1000d390:	10018ad8 	.word	0x10018ad8
1000d394:	100157dc 	.word	0x100157dc
1000d398:	10014631 	.word	0x10014631
1000d39c:	100163c8 	.word	0x100163c8
1000d3a0:	10014511 	.word	0x10014511
1000d3a4:	100163dc 	.word	0x100163dc
1000d3a8:	10016400 	.word	0x10016400

1000d3ac <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d3ac:	b510      	push	{r4, lr}
1000d3ae:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d3b0:	4b15      	ldr	r3, [pc, #84]	; (1000d408 <ble_scan_info_handler+0x5c>)
1000d3b2:	781b      	ldrb	r3, [r3, #0]
1000d3b4:	b2db      	uxtb	r3, r3
1000d3b6:	2b13      	cmp	r3, #19
1000d3b8:	d812      	bhi.n	1000d3e0 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d3ba:	4c13      	ldr	r4, [pc, #76]	; (1000d408 <ble_scan_info_handler+0x5c>)
1000d3bc:	7823      	ldrb	r3, [r4, #0]
1000d3be:	b2db      	uxtb	r3, r3
1000d3c0:	0098      	lsls	r0, r3, #2
1000d3c2:	18c0      	adds	r0, r0, r3
1000d3c4:	00c0      	lsls	r0, r0, #3
1000d3c6:	18c3      	adds	r3, r0, r3
1000d3c8:	4810      	ldr	r0, [pc, #64]	; (1000d40c <ble_scan_info_handler+0x60>)
1000d3ca:	1818      	adds	r0, r3, r0
1000d3cc:	2229      	movs	r2, #41	; 0x29
1000d3ce:	4b10      	ldr	r3, [pc, #64]	; (1000d410 <ble_scan_info_handler+0x64>)
1000d3d0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d3d2:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d3d4:	7823      	ldrb	r3, [r4, #0]
1000d3d6:	3301      	adds	r3, #1
1000d3d8:	b2db      	uxtb	r3, r3
1000d3da:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000d3dc:	2300      	movs	r3, #0
1000d3de:	e011      	b.n	1000d404 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d3e0:	480c      	ldr	r0, [pc, #48]	; (1000d414 <ble_scan_info_handler+0x68>)
1000d3e2:	4b0d      	ldr	r3, [pc, #52]	; (1000d418 <ble_scan_info_handler+0x6c>)
1000d3e4:	4798      	blx	r3
1000d3e6:	480d      	ldr	r0, [pc, #52]	; (1000d41c <ble_scan_info_handler+0x70>)
1000d3e8:	4b0d      	ldr	r3, [pc, #52]	; (1000d420 <ble_scan_info_handler+0x74>)
1000d3ea:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d3ec:	4b0d      	ldr	r3, [pc, #52]	; (1000d424 <ble_scan_info_handler+0x78>)
1000d3ee:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d3f0:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d3f2:	2800      	cmp	r0, #0
1000d3f4:	d006      	beq.n	1000d404 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000d3f6:	4807      	ldr	r0, [pc, #28]	; (1000d414 <ble_scan_info_handler+0x68>)
1000d3f8:	4b07      	ldr	r3, [pc, #28]	; (1000d418 <ble_scan_info_handler+0x6c>)
1000d3fa:	4798      	blx	r3
1000d3fc:	480a      	ldr	r0, [pc, #40]	; (1000d428 <ble_scan_info_handler+0x7c>)
1000d3fe:	4b08      	ldr	r3, [pc, #32]	; (1000d420 <ble_scan_info_handler+0x74>)
1000d400:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d402:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d404:	0018      	movs	r0, r3
1000d406:	bd10      	pop	{r4, pc}
1000d408:	1001763c 	.word	0x1001763c
1000d40c:	10018dbc 	.word	0x10018dbc
1000d410:	100143b7 	.word	0x100143b7
1000d414:	100157dc 	.word	0x100157dc
1000d418:	10014631 	.word	0x10014631
1000d41c:	10016428 	.word	0x10016428
1000d420:	10014511 	.word	0x10014511
1000d424:	1000ff55 	.word	0x1000ff55
1000d428:	10016460 	.word	0x10016460

1000d42c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d42e:	464f      	mov	r7, r9
1000d430:	4646      	mov	r6, r8
1000d432:	b4c0      	push	{r6, r7}
1000d434:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d436:	8841      	ldrh	r1, [r0, #2]
1000d438:	4b3a      	ldr	r3, [pc, #232]	; (1000d524 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d43a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d43c:	891a      	ldrh	r2, [r3, #8]
1000d43e:	428a      	cmp	r2, r1
1000d440:	d104      	bne.n	1000d44c <ble_pair_done_handler+0x20>
1000d442:	001a      	movs	r2, r3
1000d444:	325e      	adds	r2, #94	; 0x5e
1000d446:	7812      	ldrb	r2, [r2, #0]
1000d448:	2a03      	cmp	r2, #3
1000d44a:	d062      	beq.n	1000d512 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d44c:	3401      	adds	r4, #1
1000d44e:	b2e4      	uxtb	r4, r4
1000d450:	337c      	adds	r3, #124	; 0x7c
1000d452:	2c05      	cmp	r4, #5
1000d454:	d1f2      	bne.n	1000d43c <ble_pair_done_handler+0x10>
1000d456:	e02b      	b.n	1000d4b0 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d458:	0163      	lsls	r3, r4, #5
1000d45a:	1b1c      	subs	r4, r3, r4
1000d45c:	00a4      	lsls	r4, r4, #2
1000d45e:	4b31      	ldr	r3, [pc, #196]	; (1000d524 <ble_pair_done_handler+0xf8>)
1000d460:	191c      	adds	r4, r3, r4
1000d462:	345e      	adds	r4, #94	; 0x5e
1000d464:	7823      	ldrb	r3, [r4, #0]
1000d466:	2b01      	cmp	r3, #1
1000d468:	d913      	bls.n	1000d492 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000d46a:	482f      	ldr	r0, [pc, #188]	; (1000d528 <ble_pair_done_handler+0xfc>)
1000d46c:	4b2f      	ldr	r3, [pc, #188]	; (1000d52c <ble_pair_done_handler+0x100>)
1000d46e:	4798      	blx	r3
1000d470:	482f      	ldr	r0, [pc, #188]	; (1000d530 <ble_pair_done_handler+0x104>)
1000d472:	4b30      	ldr	r3, [pc, #192]	; (1000d534 <ble_pair_done_handler+0x108>)
1000d474:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d476:	8868      	ldrh	r0, [r5, #2]
1000d478:	2113      	movs	r1, #19
1000d47a:	4b2f      	ldr	r3, [pc, #188]	; (1000d538 <ble_pair_done_handler+0x10c>)
1000d47c:	4798      	blx	r3
1000d47e:	1e06      	subs	r6, r0, #0
1000d480:	d04b      	beq.n	1000d51a <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000d482:	4829      	ldr	r0, [pc, #164]	; (1000d528 <ble_pair_done_handler+0xfc>)
1000d484:	4b29      	ldr	r3, [pc, #164]	; (1000d52c <ble_pair_done_handler+0x100>)
1000d486:	4798      	blx	r3
1000d488:	482c      	ldr	r0, [pc, #176]	; (1000d53c <ble_pair_done_handler+0x110>)
1000d48a:	4b2a      	ldr	r3, [pc, #168]	; (1000d534 <ble_pair_done_handler+0x108>)
1000d48c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d48e:	26e2      	movs	r6, #226	; 0xe2
1000d490:	e043      	b.n	1000d51a <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d492:	2600      	movs	r6, #0
1000d494:	e041      	b.n	1000d51a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d496:	4e24      	ldr	r6, [pc, #144]	; (1000d528 <ble_pair_done_handler+0xfc>)
1000d498:	0030      	movs	r0, r6
1000d49a:	4d24      	ldr	r5, [pc, #144]	; (1000d52c <ble_pair_done_handler+0x100>)
1000d49c:	47a8      	blx	r5
1000d49e:	4828      	ldr	r0, [pc, #160]	; (1000d540 <ble_pair_done_handler+0x114>)
1000d4a0:	4c24      	ldr	r4, [pc, #144]	; (1000d534 <ble_pair_done_handler+0x108>)
1000d4a2:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d4a4:	0030      	movs	r0, r6
1000d4a6:	47a8      	blx	r5
1000d4a8:	4826      	ldr	r0, [pc, #152]	; (1000d544 <ble_pair_done_handler+0x118>)
1000d4aa:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d4ac:	26e2      	movs	r6, #226	; 0xe2
1000d4ae:	e034      	b.n	1000d51a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d4b0:	792b      	ldrb	r3, [r5, #4]
1000d4b2:	2b00      	cmp	r3, #0
1000d4b4:	d1d0      	bne.n	1000d458 <ble_pair_done_handler+0x2c>
1000d4b6:	e7ee      	b.n	1000d496 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d4b8:	481b      	ldr	r0, [pc, #108]	; (1000d528 <ble_pair_done_handler+0xfc>)
1000d4ba:	4b1c      	ldr	r3, [pc, #112]	; (1000d52c <ble_pair_done_handler+0x100>)
1000d4bc:	4798      	blx	r3
1000d4be:	4820      	ldr	r0, [pc, #128]	; (1000d540 <ble_pair_done_handler+0x114>)
1000d4c0:	4b1c      	ldr	r3, [pc, #112]	; (1000d534 <ble_pair_done_handler+0x108>)
1000d4c2:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d4c4:	782a      	ldrb	r2, [r5, #0]
1000d4c6:	4b17      	ldr	r3, [pc, #92]	; (1000d524 <ble_pair_done_handler+0xf8>)
1000d4c8:	4699      	mov	r9, r3
1000d4ca:	0167      	lsls	r7, r4, #5
1000d4cc:	1b3b      	subs	r3, r7, r4
1000d4ce:	009b      	lsls	r3, r3, #2
1000d4d0:	444b      	add	r3, r9
1000d4d2:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d4d4:	792a      	ldrb	r2, [r5, #4]
1000d4d6:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d4d8:	335e      	adds	r3, #94	; 0x5e
1000d4da:	2205      	movs	r2, #5
1000d4dc:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d4de:	1b38      	subs	r0, r7, r4
1000d4e0:	0080      	lsls	r0, r0, #2
1000d4e2:	4448      	add	r0, r9
1000d4e4:	3036      	adds	r0, #54	; 0x36
1000d4e6:	0029      	movs	r1, r5
1000d4e8:	3122      	adds	r1, #34	; 0x22
1000d4ea:	320b      	adds	r2, #11
1000d4ec:	4b16      	ldr	r3, [pc, #88]	; (1000d548 <ble_pair_done_handler+0x11c>)
1000d4ee:	4698      	mov	r8, r3
1000d4f0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d4f2:	1b38      	subs	r0, r7, r4
1000d4f4:	0080      	lsls	r0, r0, #2
1000d4f6:	4448      	add	r0, r9
1000d4f8:	3046      	adds	r0, #70	; 0x46
1000d4fa:	0029      	movs	r1, r5
1000d4fc:	3132      	adds	r1, #50	; 0x32
1000d4fe:	2217      	movs	r2, #23
1000d500:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d502:	1b38      	subs	r0, r7, r4
1000d504:	0080      	lsls	r0, r0, #2
1000d506:	4448      	add	r0, r9
1000d508:	301a      	adds	r0, #26
1000d50a:	1da9      	adds	r1, r5, #6
1000d50c:	221c      	movs	r2, #28
1000d50e:	47c0      	blx	r8
1000d510:	e003      	b.n	1000d51a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d512:	792e      	ldrb	r6, [r5, #4]
1000d514:	2e00      	cmp	r6, #0
1000d516:	d0cf      	beq.n	1000d4b8 <ble_pair_done_handler+0x8c>
1000d518:	e79e      	b.n	1000d458 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d51a:	0030      	movs	r0, r6
1000d51c:	bc0c      	pop	{r2, r3}
1000d51e:	4690      	mov	r8, r2
1000d520:	4699      	mov	r9, r3
1000d522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d524:	10018ad8 	.word	0x10018ad8
1000d528:	100157dc 	.word	0x100157dc
1000d52c:	10014631 	.word	0x10014631
1000d530:	10016478 	.word	0x10016478
1000d534:	10014511 	.word	0x10014511
1000d538:	1000ff75 	.word	0x1000ff75
1000d53c:	10016498 	.word	0x10016498
1000d540:	100164b4 	.word	0x100164b4
1000d544:	100164e0 	.word	0x100164e0
1000d548:	100143b7 	.word	0x100143b7

1000d54c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d54c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d54e:	8800      	ldrh	r0, [r0, #0]
1000d550:	2378      	movs	r3, #120	; 0x78
1000d552:	2201      	movs	r2, #1
1000d554:	2101      	movs	r1, #1
1000d556:	4c02      	ldr	r4, [pc, #8]	; (1000d560 <ble_conn_param_update_req+0x14>)
1000d558:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d55a:	2000      	movs	r0, #0
1000d55c:	bd10      	pop	{r4, pc}
1000d55e:	46c0      	nop			; (mov r8, r8)
1000d560:	1000ff95 	.word	0x1000ff95

1000d564 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d564:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d566:	4657      	mov	r7, sl
1000d568:	464e      	mov	r6, r9
1000d56a:	4645      	mov	r5, r8
1000d56c:	b4e0      	push	{r5, r6, r7}
1000d56e:	b084      	sub	sp, #16
1000d570:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d572:	2209      	movs	r2, #9
1000d574:	2100      	movs	r1, #0
1000d576:	a801      	add	r0, sp, #4
1000d578:	4b6a      	ldr	r3, [pc, #424]	; (1000d724 <ble_slave_security_request_handler+0x1c0>)
1000d57a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d57c:	8825      	ldrh	r5, [r4, #0]
1000d57e:	496a      	ldr	r1, [pc, #424]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d580:	000a      	movs	r2, r1
1000d582:	2300      	movs	r3, #0
1000d584:	8910      	ldrh	r0, [r2, #8]
1000d586:	42a8      	cmp	r0, r5
1000d588:	d116      	bne.n	1000d5b8 <ble_slave_security_request_handler+0x54>
1000d58a:	0010      	movs	r0, r2
1000d58c:	305e      	adds	r0, #94	; 0x5e
1000d58e:	7800      	ldrb	r0, [r0, #0]
1000d590:	2802      	cmp	r0, #2
1000d592:	d111      	bne.n	1000d5b8 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d594:	4864      	ldr	r0, [pc, #400]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d596:	015a      	lsls	r2, r3, #5
1000d598:	1ad6      	subs	r6, r2, r3
1000d59a:	00b6      	lsls	r6, r6, #2
1000d59c:	1986      	adds	r6, r0, r6
1000d59e:	365e      	adds	r6, #94	; 0x5e
1000d5a0:	2206      	movs	r2, #6
1000d5a2:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d5a4:	32f9      	adds	r2, #249	; 0xf9
1000d5a6:	4013      	ands	r3, r2
1000d5a8:	015a      	lsls	r2, r3, #5
1000d5aa:	1ad2      	subs	r2, r2, r3
1000d5ac:	0092      	lsls	r2, r2, #2
1000d5ae:	1882      	adds	r2, r0, r2
1000d5b0:	7d12      	ldrb	r2, [r2, #20]
1000d5b2:	07d0      	lsls	r0, r2, #31
1000d5b4:	d405      	bmi.n	1000d5c2 <ble_slave_security_request_handler+0x5e>
1000d5b6:	e01b      	b.n	1000d5f0 <ble_slave_security_request_handler+0x8c>
1000d5b8:	3301      	adds	r3, #1
1000d5ba:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5bc:	2b05      	cmp	r3, #5
1000d5be:	d1e1      	bne.n	1000d584 <ble_slave_security_request_handler+0x20>
1000d5c0:	e01e      	b.n	1000d600 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d5c2:	78e0      	ldrb	r0, [r4, #3]
1000d5c4:	2800      	cmp	r0, #0
1000d5c6:	d013      	beq.n	1000d5f0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d5c8:	0159      	lsls	r1, r3, #5
1000d5ca:	1ac9      	subs	r1, r1, r3
1000d5cc:	008b      	lsls	r3, r1, #2
1000d5ce:	4956      	ldr	r1, [pc, #344]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d5d0:	18c9      	adds	r1, r1, r3
1000d5d2:	311a      	adds	r1, #26
1000d5d4:	8820      	ldrh	r0, [r4, #0]
1000d5d6:	4b55      	ldr	r3, [pc, #340]	; (1000d72c <ble_slave_security_request_handler+0x1c8>)
1000d5d8:	4798      	blx	r3
1000d5da:	2800      	cmp	r0, #0
1000d5dc:	d100      	bne.n	1000d5e0 <ble_slave_security_request_handler+0x7c>
1000d5de:	e09b      	b.n	1000d718 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d5e0:	4853      	ldr	r0, [pc, #332]	; (1000d730 <ble_slave_security_request_handler+0x1cc>)
1000d5e2:	4b54      	ldr	r3, [pc, #336]	; (1000d734 <ble_slave_security_request_handler+0x1d0>)
1000d5e4:	4798      	blx	r3
1000d5e6:	4854      	ldr	r0, [pc, #336]	; (1000d738 <ble_slave_security_request_handler+0x1d4>)
1000d5e8:	4b54      	ldr	r3, [pc, #336]	; (1000d73c <ble_slave_security_request_handler+0x1d8>)
1000d5ea:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d5ec:	20e2      	movs	r0, #226	; 0xe2
1000d5ee:	e093      	b.n	1000d718 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d5f0:	015a      	lsls	r2, r3, #5
1000d5f2:	1ad3      	subs	r3, r2, r3
1000d5f4:	009b      	lsls	r3, r3, #2
1000d5f6:	4a4c      	ldr	r2, [pc, #304]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d5f8:	18d3      	adds	r3, r2, r3
1000d5fa:	335e      	adds	r3, #94	; 0x5e
1000d5fc:	2202      	movs	r2, #2
1000d5fe:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d600:	8825      	ldrh	r5, [r4, #0]
1000d602:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d604:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d606:	0016      	movs	r6, r2
1000d608:	8908      	ldrh	r0, [r1, #8]
1000d60a:	42a8      	cmp	r0, r5
1000d60c:	d10d      	bne.n	1000d62a <ble_slave_security_request_handler+0xc6>
1000d60e:	0008      	movs	r0, r1
1000d610:	305e      	adds	r0, #94	; 0x5e
1000d612:	7800      	ldrb	r0, [r0, #0]
1000d614:	2802      	cmp	r0, #2
1000d616:	d108      	bne.n	1000d62a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d618:	0152      	lsls	r2, r2, #5
1000d61a:	1b92      	subs	r2, r2, r6
1000d61c:	0096      	lsls	r6, r2, #2
1000d61e:	4a42      	ldr	r2, [pc, #264]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d620:	1992      	adds	r2, r2, r6
1000d622:	325e      	adds	r2, #94	; 0x5e
1000d624:	2103      	movs	r1, #3
1000d626:	7011      	strb	r1, [r2, #0]
			break;
1000d628:	e005      	b.n	1000d636 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d62a:	3301      	adds	r3, #1
1000d62c:	b2db      	uxtb	r3, r3
1000d62e:	3201      	adds	r2, #1
1000d630:	317c      	adds	r1, #124	; 0x7c
1000d632:	2b05      	cmp	r3, #5
1000d634:	d1e7      	bne.n	1000d606 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000d636:	aa01      	add	r2, sp, #4
1000d638:	78e1      	ldrb	r1, [r4, #3]
1000d63a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000d63c:	2101      	movs	r1, #1
1000d63e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000d640:	3103      	adds	r1, #3
1000d642:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d644:	001f      	movs	r7, r3
1000d646:	015a      	lsls	r2, r3, #5
1000d648:	1ad2      	subs	r2, r2, r3
1000d64a:	0092      	lsls	r2, r2, #2
1000d64c:	4936      	ldr	r1, [pc, #216]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d64e:	5c52      	ldrb	r2, [r2, r1]
1000d650:	2a02      	cmp	r2, #2
1000d652:	d104      	bne.n	1000d65e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d654:	aa01      	add	r2, sp, #4
1000d656:	2103      	movs	r1, #3
1000d658:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d65a:	71d1      	strb	r1, [r2, #7]
1000d65c:	e003      	b.n	1000d666 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d65e:	aa01      	add	r2, sp, #4
1000d660:	2101      	movs	r1, #1
1000d662:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d664:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000d666:	aa01      	add	r2, sp, #4
1000d668:	2110      	movs	r1, #16
1000d66a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d66c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d66e:	017a      	lsls	r2, r7, #5
1000d670:	1bd2      	subs	r2, r2, r7
1000d672:	0092      	lsls	r2, r2, #2
1000d674:	492c      	ldr	r1, [pc, #176]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d676:	188a      	adds	r2, r1, r2
1000d678:	7e12      	ldrb	r2, [r2, #24]
1000d67a:	2a40      	cmp	r2, #64	; 0x40
1000d67c:	d134      	bne.n	1000d6e8 <ble_slave_security_request_handler+0x184>
1000d67e:	015a      	lsls	r2, r3, #5
1000d680:	1ad3      	subs	r3, r2, r3
1000d682:	009b      	lsls	r3, r3, #2
1000d684:	469a      	mov	sl, r3
1000d686:	001e      	movs	r6, r3
1000d688:	3660      	adds	r6, #96	; 0x60
1000d68a:	1876      	adds	r6, r6, r1
1000d68c:	4655      	mov	r5, sl
1000d68e:	3568      	adds	r5, #104	; 0x68
1000d690:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d692:	4b2b      	ldr	r3, [pc, #172]	; (1000d740 <ble_slave_security_request_handler+0x1dc>)
1000d694:	4699      	mov	r9, r3
1000d696:	230f      	movs	r3, #15
1000d698:	4698      	mov	r8, r3
1000d69a:	47c8      	blx	r9
1000d69c:	4643      	mov	r3, r8
1000d69e:	4018      	ands	r0, r3
1000d6a0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d6a2:	47c8      	blx	r9
1000d6a4:	4643      	mov	r3, r8
1000d6a6:	4018      	ands	r0, r3
1000d6a8:	74b0      	strb	r0, [r6, #18]
1000d6aa:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d6ac:	42ae      	cmp	r6, r5
1000d6ae:	d1f4      	bne.n	1000d69a <ble_slave_security_request_handler+0x136>
1000d6b0:	4656      	mov	r6, sl
1000d6b2:	3670      	adds	r6, #112	; 0x70
1000d6b4:	4a1c      	ldr	r2, [pc, #112]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d6b6:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d6b8:	4b21      	ldr	r3, [pc, #132]	; (1000d740 <ble_slave_security_request_handler+0x1dc>)
1000d6ba:	4699      	mov	r9, r3
1000d6bc:	230f      	movs	r3, #15
1000d6be:	4698      	mov	r8, r3
1000d6c0:	47c8      	blx	r9
1000d6c2:	4643      	mov	r3, r8
1000d6c4:	4018      	ands	r0, r3
1000d6c6:	7028      	strb	r0, [r5, #0]
1000d6c8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d6ca:	42b5      	cmp	r5, r6
1000d6cc:	d1f8      	bne.n	1000d6c0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d6ce:	4b1c      	ldr	r3, [pc, #112]	; (1000d740 <ble_slave_security_request_handler+0x1dc>)
1000d6d0:	4798      	blx	r3
1000d6d2:	017b      	lsls	r3, r7, #5
1000d6d4:	1bdb      	subs	r3, r3, r7
1000d6d6:	009b      	lsls	r3, r3, #2
1000d6d8:	4a13      	ldr	r2, [pc, #76]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d6da:	18d3      	adds	r3, r2, r3
1000d6dc:	001a      	movs	r2, r3
1000d6de:	3270      	adds	r2, #112	; 0x70
1000d6e0:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d6e2:	337a      	adds	r3, #122	; 0x7a
1000d6e4:	2210      	movs	r2, #16
1000d6e6:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d6e8:	017a      	lsls	r2, r7, #5
1000d6ea:	1bd7      	subs	r7, r2, r7
1000d6ec:	00bf      	lsls	r7, r7, #2
1000d6ee:	3760      	adds	r7, #96	; 0x60
1000d6f0:	4a0d      	ldr	r2, [pc, #52]	; (1000d728 <ble_slave_security_request_handler+0x1c4>)
1000d6f2:	18ba      	adds	r2, r7, r2
1000d6f4:	8820      	ldrh	r0, [r4, #0]
1000d6f6:	2300      	movs	r3, #0
1000d6f8:	a901      	add	r1, sp, #4
1000d6fa:	4c12      	ldr	r4, [pc, #72]	; (1000d744 <ble_slave_security_request_handler+0x1e0>)
1000d6fc:	47a0      	blx	r4
1000d6fe:	2800      	cmp	r0, #0
1000d700:	d00a      	beq.n	1000d718 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000d702:	ab01      	add	r3, sp, #4
1000d704:	2200      	movs	r2, #0
1000d706:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d708:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000d70a:	4809      	ldr	r0, [pc, #36]	; (1000d730 <ble_slave_security_request_handler+0x1cc>)
1000d70c:	4b09      	ldr	r3, [pc, #36]	; (1000d734 <ble_slave_security_request_handler+0x1d0>)
1000d70e:	4798      	blx	r3
1000d710:	480d      	ldr	r0, [pc, #52]	; (1000d748 <ble_slave_security_request_handler+0x1e4>)
1000d712:	4b0a      	ldr	r3, [pc, #40]	; (1000d73c <ble_slave_security_request_handler+0x1d8>)
1000d714:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d716:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d718:	b004      	add	sp, #16
1000d71a:	bc1c      	pop	{r2, r3, r4}
1000d71c:	4690      	mov	r8, r2
1000d71e:	4699      	mov	r9, r3
1000d720:	46a2      	mov	sl, r4
1000d722:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d724:	100143c9 	.word	0x100143c9
1000d728:	10018ad8 	.word	0x10018ad8
1000d72c:	10010b59 	.word	0x10010b59
1000d730:	100157dc 	.word	0x100157dc
1000d734:	10014631 	.word	0x10014631
1000d738:	10016510 	.word	0x10016510
1000d73c:	10014511 	.word	0x10014511
1000d740:	10014645 	.word	0x10014645
1000d744:	1001096d 	.word	0x1001096d
1000d748:	10016528 	.word	0x10016528

1000d74c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000d74c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d74e:	465f      	mov	r7, fp
1000d750:	4656      	mov	r6, sl
1000d752:	464d      	mov	r5, r9
1000d754:	4644      	mov	r4, r8
1000d756:	b4f0      	push	{r4, r5, r6, r7}
1000d758:	b085      	sub	sp, #20
1000d75a:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d75c:	8804      	ldrh	r4, [r0, #0]
1000d75e:	4a48      	ldr	r2, [pc, #288]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d760:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d762:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d764:	8910      	ldrh	r0, [r2, #8]
1000d766:	42a0      	cmp	r0, r4
1000d768:	d10d      	bne.n	1000d786 <ble_pair_request_handler+0x3a>
1000d76a:	0010      	movs	r0, r2
1000d76c:	305e      	adds	r0, #94	; 0x5e
1000d76e:	7800      	ldrb	r0, [r0, #0]
1000d770:	2802      	cmp	r0, #2
1000d772:	d108      	bne.n	1000d786 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d774:	014a      	lsls	r2, r1, #5
1000d776:	1a52      	subs	r2, r2, r1
1000d778:	0095      	lsls	r5, r2, #2
1000d77a:	4a41      	ldr	r2, [pc, #260]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d77c:	1952      	adds	r2, r2, r5
1000d77e:	325e      	adds	r2, #94	; 0x5e
1000d780:	2103      	movs	r1, #3
1000d782:	7011      	strb	r1, [r2, #0]
			break;
1000d784:	e005      	b.n	1000d792 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d786:	3301      	adds	r3, #1
1000d788:	b2db      	uxtb	r3, r3
1000d78a:	3101      	adds	r1, #1
1000d78c:	327c      	adds	r2, #124	; 0x7c
1000d78e:	2b05      	cmp	r3, #5
1000d790:	d1e8      	bne.n	1000d764 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d792:	aa01      	add	r2, sp, #4
1000d794:	2100      	movs	r1, #0
1000d796:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d798:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d79a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d79c:	2003      	movs	r0, #3
1000d79e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d7a0:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d7a2:	001f      	movs	r7, r3
1000d7a4:	015a      	lsls	r2, r3, #5
1000d7a6:	1ad2      	subs	r2, r2, r3
1000d7a8:	0092      	lsls	r2, r2, #2
1000d7aa:	4935      	ldr	r1, [pc, #212]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d7ac:	5c52      	ldrb	r2, [r2, r1]
1000d7ae:	2a02      	cmp	r2, #2
1000d7b0:	d104      	bne.n	1000d7bc <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d7b2:	aa01      	add	r2, sp, #4
1000d7b4:	2103      	movs	r1, #3
1000d7b6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d7b8:	71d1      	strb	r1, [r2, #7]
1000d7ba:	e003      	b.n	1000d7c4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d7bc:	aa01      	add	r2, sp, #4
1000d7be:	2101      	movs	r1, #1
1000d7c0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d7c2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d7c4:	aa01      	add	r2, sp, #4
1000d7c6:	2110      	movs	r1, #16
1000d7c8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d7ca:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d7cc:	017a      	lsls	r2, r7, #5
1000d7ce:	1bd2      	subs	r2, r2, r7
1000d7d0:	0092      	lsls	r2, r2, #2
1000d7d2:	492b      	ldr	r1, [pc, #172]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d7d4:	188a      	adds	r2, r1, r2
1000d7d6:	7e12      	ldrb	r2, [r2, #24]
1000d7d8:	2a40      	cmp	r2, #64	; 0x40
1000d7da:	d131      	bne.n	1000d840 <ble_pair_request_handler+0xf4>
1000d7dc:	015a      	lsls	r2, r3, #5
1000d7de:	1ad3      	subs	r3, r2, r3
1000d7e0:	009b      	lsls	r3, r3, #2
1000d7e2:	469a      	mov	sl, r3
1000d7e4:	001d      	movs	r5, r3
1000d7e6:	3560      	adds	r5, #96	; 0x60
1000d7e8:	186d      	adds	r5, r5, r1
1000d7ea:	4654      	mov	r4, sl
1000d7ec:	3468      	adds	r4, #104	; 0x68
1000d7ee:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d7f0:	4b24      	ldr	r3, [pc, #144]	; (1000d884 <ble_pair_request_handler+0x138>)
1000d7f2:	4699      	mov	r9, r3
1000d7f4:	260f      	movs	r6, #15
1000d7f6:	47c8      	blx	r9
1000d7f8:	4030      	ands	r0, r6
1000d7fa:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d7fc:	47c8      	blx	r9
1000d7fe:	4030      	ands	r0, r6
1000d800:	74a8      	strb	r0, [r5, #18]
1000d802:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d804:	42a5      	cmp	r5, r4
1000d806:	d1f6      	bne.n	1000d7f6 <ble_pair_request_handler+0xaa>
1000d808:	4655      	mov	r5, sl
1000d80a:	3570      	adds	r5, #112	; 0x70
1000d80c:	4a1c      	ldr	r2, [pc, #112]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d80e:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d810:	4b1c      	ldr	r3, [pc, #112]	; (1000d884 <ble_pair_request_handler+0x138>)
1000d812:	4699      	mov	r9, r3
1000d814:	230f      	movs	r3, #15
1000d816:	4698      	mov	r8, r3
1000d818:	47c8      	blx	r9
1000d81a:	4643      	mov	r3, r8
1000d81c:	4018      	ands	r0, r3
1000d81e:	7020      	strb	r0, [r4, #0]
1000d820:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d822:	42ac      	cmp	r4, r5
1000d824:	d1f8      	bne.n	1000d818 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d826:	4b17      	ldr	r3, [pc, #92]	; (1000d884 <ble_pair_request_handler+0x138>)
1000d828:	4798      	blx	r3
1000d82a:	017b      	lsls	r3, r7, #5
1000d82c:	1bdb      	subs	r3, r3, r7
1000d82e:	009b      	lsls	r3, r3, #2
1000d830:	4a13      	ldr	r2, [pc, #76]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d832:	18d3      	adds	r3, r2, r3
1000d834:	001a      	movs	r2, r3
1000d836:	3270      	adds	r2, #112	; 0x70
1000d838:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d83a:	337a      	adds	r3, #122	; 0x7a
1000d83c:	2210      	movs	r2, #16
1000d83e:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d840:	017a      	lsls	r2, r7, #5
1000d842:	1bd7      	subs	r7, r2, r7
1000d844:	00bf      	lsls	r7, r7, #2
1000d846:	3760      	adds	r7, #96	; 0x60
1000d848:	4a0d      	ldr	r2, [pc, #52]	; (1000d880 <ble_pair_request_handler+0x134>)
1000d84a:	18ba      	adds	r2, r7, r2
1000d84c:	465b      	mov	r3, fp
1000d84e:	8818      	ldrh	r0, [r3, #0]
1000d850:	2300      	movs	r3, #0
1000d852:	a901      	add	r1, sp, #4
1000d854:	4c0c      	ldr	r4, [pc, #48]	; (1000d888 <ble_pair_request_handler+0x13c>)
1000d856:	47a0      	blx	r4
1000d858:	2800      	cmp	r0, #0
1000d85a:	d00a      	beq.n	1000d872 <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000d85c:	ab01      	add	r3, sp, #4
1000d85e:	2200      	movs	r2, #0
1000d860:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d862:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d864:	4809      	ldr	r0, [pc, #36]	; (1000d88c <ble_pair_request_handler+0x140>)
1000d866:	4b0a      	ldr	r3, [pc, #40]	; (1000d890 <ble_pair_request_handler+0x144>)
1000d868:	4798      	blx	r3
1000d86a:	480a      	ldr	r0, [pc, #40]	; (1000d894 <ble_pair_request_handler+0x148>)
1000d86c:	4b0a      	ldr	r3, [pc, #40]	; (1000d898 <ble_pair_request_handler+0x14c>)
1000d86e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d870:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d872:	b005      	add	sp, #20
1000d874:	bc3c      	pop	{r2, r3, r4, r5}
1000d876:	4690      	mov	r8, r2
1000d878:	4699      	mov	r9, r3
1000d87a:	46a2      	mov	sl, r4
1000d87c:	46ab      	mov	fp, r5
1000d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d880:	10018ad8 	.word	0x10018ad8
1000d884:	10014645 	.word	0x10014645
1000d888:	1001096d 	.word	0x1001096d
1000d88c:	100157dc 	.word	0x100157dc
1000d890:	10014631 	.word	0x10014631
1000d894:	10016554 	.word	0x10016554
1000d898:	10014511 	.word	0x10014511

1000d89c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d89e:	b085      	sub	sp, #20
1000d8a0:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d8a2:	2206      	movs	r2, #6
1000d8a4:	493d      	ldr	r1, [pc, #244]	; (1000d99c <ble_pair_key_request_handler+0x100>)
1000d8a6:	a802      	add	r0, sp, #8
1000d8a8:	4e3d      	ldr	r6, [pc, #244]	; (1000d9a0 <ble_pair_key_request_handler+0x104>)
1000d8aa:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d8ac:	ac01      	add	r4, sp, #4
1000d8ae:	2204      	movs	r2, #4
1000d8b0:	0029      	movs	r1, r5
1000d8b2:	0020      	movs	r0, r4
1000d8b4:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d8b6:	78e3      	ldrb	r3, [r4, #3]
1000d8b8:	2b00      	cmp	r3, #0
1000d8ba:	d162      	bne.n	1000d982 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d8bc:	4839      	ldr	r0, [pc, #228]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d8be:	4b3a      	ldr	r3, [pc, #232]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d8c0:	4798      	blx	r3
1000d8c2:	483a      	ldr	r0, [pc, #232]	; (1000d9ac <ble_pair_key_request_handler+0x110>)
1000d8c4:	4b3a      	ldr	r3, [pc, #232]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d8c6:	4798      	blx	r3
1000d8c8:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d8ca:	4c3a      	ldr	r4, [pc, #232]	; (1000d9b4 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d8cc:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d8ce:	201e      	movs	r0, #30
1000d8d0:	47a0      	blx	r4
1000d8d2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d8d4:	2b00      	cmp	r3, #0
1000d8d6:	d11a      	bne.n	1000d90e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d8d8:	4f32      	ldr	r7, [pc, #200]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d8da:	0038      	movs	r0, r7
1000d8dc:	4e32      	ldr	r6, [pc, #200]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d8de:	47b0      	blx	r6
1000d8e0:	4835      	ldr	r0, [pc, #212]	; (1000d9b8 <ble_pair_key_request_handler+0x11c>)
1000d8e2:	4c33      	ldr	r4, [pc, #204]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d8e4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d8e6:	0038      	movs	r0, r7
1000d8e8:	47b0      	blx	r6
1000d8ea:	4834      	ldr	r0, [pc, #208]	; (1000d9bc <ble_pair_key_request_handler+0x120>)
1000d8ec:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d8ee:	8828      	ldrh	r0, [r5, #0]
1000d8f0:	2113      	movs	r1, #19
1000d8f2:	4b33      	ldr	r3, [pc, #204]	; (1000d9c0 <ble_pair_key_request_handler+0x124>)
1000d8f4:	4798      	blx	r3
1000d8f6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d8f8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d8fa:	2b00      	cmp	r3, #0
1000d8fc:	d04c      	beq.n	1000d998 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d8fe:	4829      	ldr	r0, [pc, #164]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d900:	4b29      	ldr	r3, [pc, #164]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d902:	4798      	blx	r3
1000d904:	482f      	ldr	r0, [pc, #188]	; (1000d9c4 <ble_pair_key_request_handler+0x128>)
1000d906:	4b2a      	ldr	r3, [pc, #168]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d908:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d90a:	20e2      	movs	r0, #226	; 0xe2
1000d90c:	e044      	b.n	1000d998 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d90e:	001a      	movs	r2, r3
1000d910:	3a30      	subs	r2, #48	; 0x30
1000d912:	2a09      	cmp	r2, #9
1000d914:	d8db      	bhi.n	1000d8ce <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d916:	aa02      	add	r2, sp, #8
1000d918:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d91a:	4038      	ands	r0, r7
1000d91c:	4b2a      	ldr	r3, [pc, #168]	; (1000d9c8 <ble_pair_key_request_handler+0x12c>)
1000d91e:	4798      	blx	r3
1000d920:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d922:	2e06      	cmp	r6, #6
1000d924:	d026      	beq.n	1000d974 <ble_pair_key_request_handler+0xd8>
1000d926:	e7d2      	b.n	1000d8ce <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d928:	481e      	ldr	r0, [pc, #120]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d92a:	4b1f      	ldr	r3, [pc, #124]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d92c:	4798      	blx	r3
1000d92e:	4827      	ldr	r0, [pc, #156]	; (1000d9cc <ble_pair_key_request_handler+0x130>)
1000d930:	4b1f      	ldr	r3, [pc, #124]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d932:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d934:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d936:	4e24      	ldr	r6, [pc, #144]	; (1000d9c8 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d938:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d93a:	5ce0      	ldrb	r0, [r4, r3]
1000d93c:	47b0      	blx	r6
1000d93e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d940:	2c06      	cmp	r4, #6
1000d942:	d1f9      	bne.n	1000d938 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d944:	ab01      	add	r3, sp, #4
1000d946:	7899      	ldrb	r1, [r3, #2]
1000d948:	8828      	ldrh	r0, [r5, #0]
1000d94a:	aa02      	add	r2, sp, #8
1000d94c:	4b20      	ldr	r3, [pc, #128]	; (1000d9d0 <ble_pair_key_request_handler+0x134>)
1000d94e:	4798      	blx	r3
1000d950:	2800      	cmp	r0, #0
1000d952:	d021      	beq.n	1000d998 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d954:	4813      	ldr	r0, [pc, #76]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d956:	4b14      	ldr	r3, [pc, #80]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d958:	4798      	blx	r3
1000d95a:	481e      	ldr	r0, [pc, #120]	; (1000d9d4 <ble_pair_key_request_handler+0x138>)
1000d95c:	4b14      	ldr	r3, [pc, #80]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d95e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d960:	2000      	movs	r0, #0
1000d962:	e019      	b.n	1000d998 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d964:	480f      	ldr	r0, [pc, #60]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d966:	4b10      	ldr	r3, [pc, #64]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d968:	4798      	blx	r3
1000d96a:	481b      	ldr	r0, [pc, #108]	; (1000d9d8 <ble_pair_key_request_handler+0x13c>)
1000d96c:	4b10      	ldr	r3, [pc, #64]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d96e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d970:	2000      	movs	r0, #0
1000d972:	e011      	b.n	1000d998 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d974:	480b      	ldr	r0, [pc, #44]	; (1000d9a4 <ble_pair_key_request_handler+0x108>)
1000d976:	4b0c      	ldr	r3, [pc, #48]	; (1000d9a8 <ble_pair_key_request_handler+0x10c>)
1000d978:	4798      	blx	r3
1000d97a:	4818      	ldr	r0, [pc, #96]	; (1000d9dc <ble_pair_key_request_handler+0x140>)
1000d97c:	4b0c      	ldr	r3, [pc, #48]	; (1000d9b0 <ble_pair_key_request_handler+0x114>)
1000d97e:	4798      	blx	r3
1000d980:	e7d8      	b.n	1000d934 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d982:	ab01      	add	r3, sp, #4
1000d984:	885a      	ldrh	r2, [r3, #2]
1000d986:	2380      	movs	r3, #128	; 0x80
1000d988:	005b      	lsls	r3, r3, #1
1000d98a:	429a      	cmp	r2, r3
1000d98c:	d0cc      	beq.n	1000d928 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d98e:	ab01      	add	r3, sp, #4
1000d990:	789b      	ldrb	r3, [r3, #2]
1000d992:	2b01      	cmp	r3, #1
1000d994:	d0e6      	beq.n	1000d964 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d996:	2000      	movs	r0, #0
}
1000d998:	b005      	add	sp, #20
1000d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d99c:	10016300 	.word	0x10016300
1000d9a0:	100143b7 	.word	0x100143b7
1000d9a4:	100157dc 	.word	0x100157dc
1000d9a8:	10014631 	.word	0x10014631
1000d9ac:	1001657c 	.word	0x1001657c
1000d9b0:	10014511 	.word	0x10014511
1000d9b4:	1000e525 	.word	0x1000e525
1000d9b8:	100165a4 	.word	0x100165a4
1000d9bc:	100165b0 	.word	0x100165b0
1000d9c0:	1000ff75 	.word	0x1000ff75
1000d9c4:	10016498 	.word	0x10016498
1000d9c8:	10014545 	.word	0x10014545
1000d9cc:	100165c4 	.word	0x100165c4
1000d9d0:	10010a9d 	.word	0x10010a9d
1000d9d4:	100165fc 	.word	0x100165fc
1000d9d8:	10016614 	.word	0x10016614
1000d9dc:	10016630 	.word	0x10016630

1000d9e0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d9e2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d9e4:	8805      	ldrh	r5, [r0, #0]
1000d9e6:	4b2f      	ldr	r3, [pc, #188]	; (1000daa4 <ble_encryption_request_handler+0xc4>)
1000d9e8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9ea:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d9ec:	0010      	movs	r0, r2
1000d9ee:	8919      	ldrh	r1, [r3, #8]
1000d9f0:	42a9      	cmp	r1, r5
1000d9f2:	d116      	bne.n	1000da22 <ble_encryption_request_handler+0x42>
1000d9f4:	0019      	movs	r1, r3
1000d9f6:	315e      	adds	r1, #94	; 0x5e
1000d9f8:	7809      	ldrb	r1, [r1, #0]
1000d9fa:	2901      	cmp	r1, #1
1000d9fc:	d911      	bls.n	1000da22 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d9fe:	4929      	ldr	r1, [pc, #164]	; (1000daa4 <ble_encryption_request_handler+0xc4>)
1000da00:	0152      	lsls	r2, r2, #5
1000da02:	1a10      	subs	r0, r2, r0
1000da04:	0080      	lsls	r0, r0, #2
1000da06:	1808      	adds	r0, r1, r0
1000da08:	305e      	adds	r0, #94	; 0x5e
1000da0a:	2306      	movs	r3, #6
1000da0c:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000da0e:	0162      	lsls	r2, r4, #5
1000da10:	1b13      	subs	r3, r2, r4
1000da12:	009b      	lsls	r3, r3, #2
1000da14:	18cb      	adds	r3, r1, r3
1000da16:	3370      	adds	r3, #112	; 0x70
1000da18:	881a      	ldrh	r2, [r3, #0]
1000da1a:	8873      	ldrh	r3, [r6, #2]
1000da1c:	429a      	cmp	r2, r3
1000da1e:	d113      	bne.n	1000da48 <ble_encryption_request_handler+0x68>
1000da20:	e006      	b.n	1000da30 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000da22:	3401      	adds	r4, #1
1000da24:	b2e4      	uxtb	r4, r4
1000da26:	3201      	adds	r2, #1
1000da28:	337c      	adds	r3, #124	; 0x7c
1000da2a:	2c05      	cmp	r4, #5
1000da2c:	d1de      	bne.n	1000d9ec <ble_encryption_request_handler+0xc>
1000da2e:	e00b      	b.n	1000da48 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000da30:	0161      	lsls	r1, r4, #5
1000da32:	1b09      	subs	r1, r1, r4
1000da34:	0089      	lsls	r1, r1, #2
1000da36:	4b1b      	ldr	r3, [pc, #108]	; (1000daa4 <ble_encryption_request_handler+0xc4>)
1000da38:	1859      	adds	r1, r3, r1
1000da3a:	3172      	adds	r1, #114	; 0x72
1000da3c:	1d30      	adds	r0, r6, #4
1000da3e:	2208      	movs	r2, #8
1000da40:	4b19      	ldr	r3, [pc, #100]	; (1000daa8 <ble_encryption_request_handler+0xc8>)
1000da42:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000da44:	2800      	cmp	r0, #0
1000da46:	d015      	beq.n	1000da74 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000da48:	4f18      	ldr	r7, [pc, #96]	; (1000daac <ble_encryption_request_handler+0xcc>)
1000da4a:	0038      	movs	r0, r7
1000da4c:	4e18      	ldr	r6, [pc, #96]	; (1000dab0 <ble_encryption_request_handler+0xd0>)
1000da4e:	47b0      	blx	r6
1000da50:	4818      	ldr	r0, [pc, #96]	; (1000dab4 <ble_encryption_request_handler+0xd4>)
1000da52:	4d19      	ldr	r5, [pc, #100]	; (1000dab8 <ble_encryption_request_handler+0xd8>)
1000da54:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000da56:	0038      	movs	r0, r7
1000da58:	47b0      	blx	r6
1000da5a:	4818      	ldr	r0, [pc, #96]	; (1000dabc <ble_encryption_request_handler+0xdc>)
1000da5c:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000da5e:	0163      	lsls	r3, r4, #5
1000da60:	1b1c      	subs	r4, r3, r4
1000da62:	00a4      	lsls	r4, r4, #2
1000da64:	4b0f      	ldr	r3, [pc, #60]	; (1000daa4 <ble_encryption_request_handler+0xc4>)
1000da66:	191c      	adds	r4, r3, r4
1000da68:	8920      	ldrh	r0, [r4, #8]
1000da6a:	2105      	movs	r1, #5
1000da6c:	4b14      	ldr	r3, [pc, #80]	; (1000dac0 <ble_encryption_request_handler+0xe0>)
1000da6e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000da70:	20e2      	movs	r0, #226	; 0xe2
1000da72:	e016      	b.n	1000daa2 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000da74:	0162      	lsls	r2, r4, #5
1000da76:	1b13      	subs	r3, r2, r4
1000da78:	009b      	lsls	r3, r3, #2
1000da7a:	3360      	adds	r3, #96	; 0x60
1000da7c:	4909      	ldr	r1, [pc, #36]	; (1000daa4 <ble_encryption_request_handler+0xc4>)
1000da7e:	185b      	adds	r3, r3, r1
1000da80:	1b14      	subs	r4, r2, r4
1000da82:	00a4      	lsls	r4, r4, #2
1000da84:	190c      	adds	r4, r1, r4
1000da86:	7d21      	ldrb	r1, [r4, #20]
1000da88:	8830      	ldrh	r0, [r6, #0]
1000da8a:	2201      	movs	r2, #1
1000da8c:	4c0d      	ldr	r4, [pc, #52]	; (1000dac4 <ble_encryption_request_handler+0xe4>)
1000da8e:	47a0      	blx	r4
1000da90:	2800      	cmp	r0, #0
1000da92:	d006      	beq.n	1000daa2 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000da94:	4805      	ldr	r0, [pc, #20]	; (1000daac <ble_encryption_request_handler+0xcc>)
1000da96:	4b06      	ldr	r3, [pc, #24]	; (1000dab0 <ble_encryption_request_handler+0xd0>)
1000da98:	4798      	blx	r3
1000da9a:	480b      	ldr	r0, [pc, #44]	; (1000dac8 <ble_encryption_request_handler+0xe8>)
1000da9c:	4b06      	ldr	r3, [pc, #24]	; (1000dab8 <ble_encryption_request_handler+0xd8>)
1000da9e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000daa0:	2000      	movs	r0, #0
}
1000daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000daa4:	10018ad8 	.word	0x10018ad8
1000daa8:	10014399 	.word	0x10014399
1000daac:	100157dc 	.word	0x100157dc
1000dab0:	10014631 	.word	0x10014631
1000dab4:	10016644 	.word	0x10016644
1000dab8:	10014511 	.word	0x10014511
1000dabc:	1001667c 	.word	0x1001667c
1000dac0:	1000ff75 	.word	0x1000ff75
1000dac4:	10010bd1 	.word	0x10010bd1
1000dac8:	100166d4 	.word	0x100166d4

1000dacc <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000dacc:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000dace:	2a00      	cmp	r2, #0
1000dad0:	d047      	beq.n	1000db62 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000dad2:	2906      	cmp	r1, #6
1000dad4:	d847      	bhi.n	1000db66 <ble_mgr_events_callback_handler+0x9a>
1000dad6:	0089      	lsls	r1, r1, #2
1000dad8:	4b28      	ldr	r3, [pc, #160]	; (1000db7c <ble_mgr_events_callback_handler+0xb0>)
1000dada:	585b      	ldr	r3, [r3, r1]
1000dadc:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000dade:	4b28      	ldr	r3, [pc, #160]	; (1000db80 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000dae0:	2405      	movs	r4, #5
1000dae2:	e00a      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000dae4:	4b27      	ldr	r3, [pc, #156]	; (1000db84 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000dae6:	2401      	movs	r4, #1
			}
			break;
1000dae8:	e007      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000daea:	4b27      	ldr	r3, [pc, #156]	; (1000db88 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000daec:	2405      	movs	r4, #5
			}
			break;
1000daee:	e004      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000daf0:	4b26      	ldr	r3, [pc, #152]	; (1000db8c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000daf2:	2401      	movs	r4, #1
			}
			break;
1000daf4:	e001      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000daf6:	4b26      	ldr	r3, [pc, #152]	; (1000db90 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000daf8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000dafa:	2800      	cmp	r0, #0
1000dafc:	d116      	bne.n	1000db2c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000dafe:	6819      	ldr	r1, [r3, #0]
1000db00:	2900      	cmp	r1, #0
1000db02:	d10b      	bne.n	1000db1c <ble_mgr_events_callback_handler+0x50>
1000db04:	e006      	b.n	1000db14 <ble_mgr_events_callback_handler+0x48>
1000db06:	001d      	movs	r5, r3
1000db08:	3304      	adds	r3, #4
1000db0a:	1f18      	subs	r0, r3, #4
1000db0c:	6800      	ldr	r0, [r0, #0]
1000db0e:	2800      	cmp	r0, #0
1000db10:	d106      	bne.n	1000db20 <ble_mgr_events_callback_handler+0x54>
1000db12:	e000      	b.n	1000db16 <ble_mgr_events_callback_handler+0x4a>
1000db14:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000db16:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000db18:	2101      	movs	r1, #1
						break;
1000db1a:	e02c      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
1000db1c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000db1e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000db20:	3101      	adds	r1, #1
1000db22:	b2c9      	uxtb	r1, r1
1000db24:	42a1      	cmp	r1, r4
1000db26:	d3ee      	bcc.n	1000db06 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000db28:	2100      	movs	r1, #0
1000db2a:	e024      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
1000db2c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000db2e:	2801      	cmp	r0, #1
1000db30:	d121      	bne.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000db32:	6819      	ldr	r1, [r3, #0]
1000db34:	428a      	cmp	r2, r1
1000db36:	d10c      	bne.n	1000db52 <ble_mgr_events_callback_handler+0x86>
1000db38:	e006      	b.n	1000db48 <ble_mgr_events_callback_handler+0x7c>
1000db3a:	001d      	movs	r5, r3
1000db3c:	3304      	adds	r3, #4
1000db3e:	1f18      	subs	r0, r3, #4
1000db40:	6800      	ldr	r0, [r0, #0]
1000db42:	4282      	cmp	r2, r0
1000db44:	d107      	bne.n	1000db56 <ble_mgr_events_callback_handler+0x8a>
1000db46:	e000      	b.n	1000db4a <ble_mgr_events_callback_handler+0x7e>
1000db48:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000db4a:	2300      	movs	r3, #0
1000db4c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000db4e:	2101      	movs	r1, #1
						break;
1000db50:	e011      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
1000db52:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000db54:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000db56:	3101      	adds	r1, #1
1000db58:	b2c9      	uxtb	r1, r1
1000db5a:	42a1      	cmp	r1, r4
1000db5c:	d3ed      	bcc.n	1000db3a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000db5e:	2100      	movs	r1, #0
1000db60:	e009      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000db62:	2100      	movs	r1, #0
1000db64:	e007      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000db66:	2100      	movs	r1, #0
1000db68:	e005      	b.n	1000db76 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000db6a:	4b0a      	ldr	r3, [pc, #40]	; (1000db94 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000db6c:	2405      	movs	r4, #5
1000db6e:	e7c4      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000db70:	4b09      	ldr	r3, [pc, #36]	; (1000db98 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000db72:	2401      	movs	r4, #1
1000db74:	e7c1      	b.n	1000dafa <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000db76:	0008      	movs	r0, r1
1000db78:	bd30      	pop	{r4, r5, pc}
1000db7a:	46c0      	nop			; (mov r8, r8)
1000db7c:	100161f4 	.word	0x100161f4
1000db80:	10018ac4 	.word	0x10018ac4
1000db84:	10018ac0 	.word	0x10018ac0
1000db88:	10018d48 	.word	0x10018d48
1000db8c:	100192fc 	.word	0x100192fc
1000db90:	10018d5c 	.word	0x10018d5c
1000db94:	10018d70 	.word	0x10018d70
1000db98:	10018db8 	.word	0x10018db8

1000db9c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000db9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db9e:	465f      	mov	r7, fp
1000dba0:	4656      	mov	r6, sl
1000dba2:	464d      	mov	r5, r9
1000dba4:	4644      	mov	r4, r8
1000dba6:	b4f0      	push	{r4, r5, r6, r7}
1000dba8:	b08d      	sub	sp, #52	; 0x34
1000dbaa:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000dbac:	2400      	movs	r4, #0
1000dbae:	4b72      	ldr	r3, [pc, #456]	; (1000dd78 <ble_device_init+0x1dc>)
1000dbb0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dbb2:	2207      	movs	r2, #7
1000dbb4:	2100      	movs	r1, #0
1000dbb6:	4871      	ldr	r0, [pc, #452]	; (1000dd7c <ble_device_init+0x1e0>)
1000dbb8:	4d71      	ldr	r5, [pc, #452]	; (1000dd80 <ble_device_init+0x1e4>)
1000dbba:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000dbbc:	2212      	movs	r2, #18
1000dbbe:	2100      	movs	r1, #0
1000dbc0:	4870      	ldr	r0, [pc, #448]	; (1000dd84 <ble_device_init+0x1e8>)
1000dbc2:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000dbc4:	4a70      	ldr	r2, [pc, #448]	; (1000dd88 <ble_device_init+0x1ec>)
1000dbc6:	2100      	movs	r1, #0
1000dbc8:	4870      	ldr	r0, [pc, #448]	; (1000dd8c <ble_device_init+0x1f0>)
1000dbca:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000dbcc:	4b70      	ldr	r3, [pc, #448]	; (1000dd90 <ble_device_init+0x1f4>)
1000dbce:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000dbd0:	22cd      	movs	r2, #205	; 0xcd
1000dbd2:	0092      	lsls	r2, r2, #2
1000dbd4:	2100      	movs	r1, #0
1000dbd6:	486f      	ldr	r0, [pc, #444]	; (1000dd94 <ble_device_init+0x1f8>)
1000dbd8:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000dbda:	4b6f      	ldr	r3, [pc, #444]	; (1000dd98 <ble_device_init+0x1fc>)
1000dbdc:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000dbde:	2283      	movs	r2, #131	; 0x83
1000dbe0:	0092      	lsls	r2, r2, #2
1000dbe2:	2100      	movs	r1, #0
1000dbe4:	486d      	ldr	r0, [pc, #436]	; (1000dd9c <ble_device_init+0x200>)
1000dbe6:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000dbe8:	4b6d      	ldr	r3, [pc, #436]	; (1000dda0 <ble_device_init+0x204>)
1000dbea:	469b      	mov	fp, r3
1000dbec:	2380      	movs	r3, #128	; 0x80
1000dbee:	00db      	lsls	r3, r3, #3
1000dbf0:	469a      	mov	sl, r3
1000dbf2:	001a      	movs	r2, r3
1000dbf4:	2100      	movs	r1, #0
1000dbf6:	4658      	mov	r0, fp
1000dbf8:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000dbfa:	4b6a      	ldr	r3, [pc, #424]	; (1000dda4 <ble_device_init+0x208>)
1000dbfc:	4699      	mov	r9, r3
1000dbfe:	2380      	movs	r3, #128	; 0x80
1000dc00:	015b      	lsls	r3, r3, #5
1000dc02:	4698      	mov	r8, r3
1000dc04:	001a      	movs	r2, r3
1000dc06:	2100      	movs	r1, #0
1000dc08:	4648      	mov	r0, r9
1000dc0a:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000dc0c:	4f66      	ldr	r7, [pc, #408]	; (1000dda8 <ble_device_init+0x20c>)
1000dc0e:	221c      	movs	r2, #28
1000dc10:	2100      	movs	r1, #0
1000dc12:	0038      	movs	r0, r7
1000dc14:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000dc16:	465b      	mov	r3, fp
1000dc18:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000dc1a:	4653      	mov	r3, sl
1000dc1c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000dc1e:	464b      	mov	r3, r9
1000dc20:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000dc22:	4643      	mov	r3, r8
1000dc24:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000dc26:	4b61      	ldr	r3, [pc, #388]	; (1000ddac <ble_device_init+0x210>)
1000dc28:	601c      	str	r4, [r3, #0]
1000dc2a:	605c      	str	r4, [r3, #4]
1000dc2c:	609c      	str	r4, [r3, #8]
1000dc2e:	60dc      	str	r4, [r3, #12]
1000dc30:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000dc32:	4b5f      	ldr	r3, [pc, #380]	; (1000ddb0 <ble_device_init+0x214>)
1000dc34:	601c      	str	r4, [r3, #0]
1000dc36:	605c      	str	r4, [r3, #4]
1000dc38:	609c      	str	r4, [r3, #8]
1000dc3a:	60dc      	str	r4, [r3, #12]
1000dc3c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000dc3e:	4b5d      	ldr	r3, [pc, #372]	; (1000ddb4 <ble_device_init+0x218>)
1000dc40:	601c      	str	r4, [r3, #0]
1000dc42:	605c      	str	r4, [r3, #4]
1000dc44:	609c      	str	r4, [r3, #8]
1000dc46:	60dc      	str	r4, [r3, #12]
1000dc48:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000dc4a:	4b5b      	ldr	r3, [pc, #364]	; (1000ddb8 <ble_device_init+0x21c>)
1000dc4c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000dc4e:	4b5b      	ldr	r3, [pc, #364]	; (1000ddbc <ble_device_init+0x220>)
1000dc50:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000dc52:	4b5b      	ldr	r3, [pc, #364]	; (1000ddc0 <ble_device_init+0x224>)
1000dc54:	601c      	str	r4, [r3, #0]
1000dc56:	605c      	str	r4, [r3, #4]
1000dc58:	609c      	str	r4, [r3, #8]
1000dc5a:	60dc      	str	r4, [r3, #12]
1000dc5c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000dc5e:	4b59      	ldr	r3, [pc, #356]	; (1000ddc4 <ble_device_init+0x228>)
1000dc60:	601c      	str	r4, [r3, #0]
1000dc62:	4c59      	ldr	r4, [pc, #356]	; (1000ddc8 <ble_device_init+0x22c>)
1000dc64:	239b      	movs	r3, #155	; 0x9b
1000dc66:	009b      	lsls	r3, r3, #2
1000dc68:	4698      	mov	r8, r3
1000dc6a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000dc6c:	4f44      	ldr	r7, [pc, #272]	; (1000dd80 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000dc6e:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000dc70:	227c      	movs	r2, #124	; 0x7c
1000dc72:	2100      	movs	r1, #0
1000dc74:	0020      	movs	r0, r4
1000dc76:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000dc78:	0023      	movs	r3, r4
1000dc7a:	335e      	adds	r3, #94	; 0x5e
1000dc7c:	2200      	movs	r2, #0
1000dc7e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000dc80:	7625      	strb	r5, [r4, #24]
1000dc82:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc84:	45a0      	cmp	r8, r4
1000dc86:	d1f3      	bne.n	1000dc70 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000dc88:	4b50      	ldr	r3, [pc, #320]	; (1000ddcc <ble_device_init+0x230>)
1000dc8a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000dc8c:	4846      	ldr	r0, [pc, #280]	; (1000dda8 <ble_device_init+0x20c>)
1000dc8e:	4b3e      	ldr	r3, [pc, #248]	; (1000dd88 <ble_device_init+0x1ec>)
1000dc90:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000dc92:	4b3e      	ldr	r3, [pc, #248]	; (1000dd8c <ble_device_init+0x1f0>)
1000dc94:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000dc96:	4b4e      	ldr	r3, [pc, #312]	; (1000ddd0 <ble_device_init+0x234>)
1000dc98:	4798      	blx	r3
1000dc9a:	2800      	cmp	r0, #0
1000dc9c:	d00b      	beq.n	1000dcb6 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000dc9e:	4e4d      	ldr	r6, [pc, #308]	; (1000ddd4 <ble_device_init+0x238>)
1000dca0:	0030      	movs	r0, r6
1000dca2:	4d4d      	ldr	r5, [pc, #308]	; (1000ddd8 <ble_device_init+0x23c>)
1000dca4:	47a8      	blx	r5
1000dca6:	484d      	ldr	r0, [pc, #308]	; (1000dddc <ble_device_init+0x240>)
1000dca8:	4c4d      	ldr	r4, [pc, #308]	; (1000dde0 <ble_device_init+0x244>)
1000dcaa:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000dcac:	0030      	movs	r0, r6
1000dcae:	47a8      	blx	r5
1000dcb0:	484c      	ldr	r0, [pc, #304]	; (1000dde4 <ble_device_init+0x248>)
1000dcb2:	47a0      	blx	r4
1000dcb4:	e7fe      	b.n	1000dcb4 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000dcb6:	4a4c      	ldr	r2, [pc, #304]	; (1000dde8 <ble_device_init+0x24c>)
1000dcb8:	2100      	movs	r1, #0
1000dcba:	2000      	movs	r0, #0
1000dcbc:	4c4b      	ldr	r4, [pc, #300]	; (1000ddec <ble_device_init+0x250>)
1000dcbe:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000dcc0:	4a4b      	ldr	r2, [pc, #300]	; (1000ddf0 <ble_device_init+0x254>)
1000dcc2:	2102      	movs	r1, #2
1000dcc4:	2000      	movs	r0, #0
1000dcc6:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000dcc8:	2109      	movs	r1, #9
1000dcca:	484a      	ldr	r0, [pc, #296]	; (1000ddf4 <ble_device_init+0x258>)
1000dccc:	4b4a      	ldr	r3, [pc, #296]	; (1000ddf8 <ble_device_init+0x25c>)
1000dcce:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000dcd0:	2800      	cmp	r0, #0
1000dcd2:	d005      	beq.n	1000dce0 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000dcd4:	483f      	ldr	r0, [pc, #252]	; (1000ddd4 <ble_device_init+0x238>)
1000dcd6:	4b40      	ldr	r3, [pc, #256]	; (1000ddd8 <ble_device_init+0x23c>)
1000dcd8:	4798      	blx	r3
1000dcda:	4848      	ldr	r0, [pc, #288]	; (1000ddfc <ble_device_init+0x260>)
1000dcdc:	4b40      	ldr	r3, [pc, #256]	; (1000dde0 <ble_device_init+0x244>)
1000dcde:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000dce0:	2207      	movs	r2, #7
1000dce2:	4947      	ldr	r1, [pc, #284]	; (1000de00 <ble_device_init+0x264>)
1000dce4:	3108      	adds	r1, #8
1000dce6:	4668      	mov	r0, sp
1000dce8:	4b46      	ldr	r3, [pc, #280]	; (1000de04 <ble_device_init+0x268>)
1000dcea:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000dcec:	2226      	movs	r2, #38	; 0x26
1000dcee:	2100      	movs	r1, #0
1000dcf0:	a802      	add	r0, sp, #8
1000dcf2:	4b23      	ldr	r3, [pc, #140]	; (1000dd80 <ble_device_init+0x1e4>)
1000dcf4:	4798      	blx	r3
	
	if (addr == NULL)
1000dcf6:	2e00      	cmp	r6, #0
1000dcf8:	d10c      	bne.n	1000dd14 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000dcfa:	4668      	mov	r0, sp
1000dcfc:	4b42      	ldr	r3, [pc, #264]	; (1000de08 <ble_device_init+0x26c>)
1000dcfe:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000dd00:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000dd02:	2800      	cmp	r0, #0
1000dd04:	d006      	beq.n	1000dd14 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000dd06:	4833      	ldr	r0, [pc, #204]	; (1000ddd4 <ble_device_init+0x238>)
1000dd08:	4b33      	ldr	r3, [pc, #204]	; (1000ddd8 <ble_device_init+0x23c>)
1000dd0a:	4798      	blx	r3
1000dd0c:	483f      	ldr	r0, [pc, #252]	; (1000de0c <ble_device_init+0x270>)
1000dd0e:	4b34      	ldr	r3, [pc, #208]	; (1000dde0 <ble_device_init+0x244>)
1000dd10:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000dd12:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000dd14:	ac02      	add	r4, sp, #8
1000dd16:	230a      	movs	r3, #10
1000dd18:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000dd1a:	4b3d      	ldr	r3, [pc, #244]	; (1000de10 <ble_device_init+0x274>)
1000dd1c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000dd1e:	2207      	movs	r2, #7
1000dd20:	0031      	movs	r1, r6
1000dd22:	a803      	add	r0, sp, #12
1000dd24:	4b37      	ldr	r3, [pc, #220]	; (1000de04 <ble_device_init+0x268>)
1000dd26:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000dd28:	2300      	movs	r3, #0
1000dd2a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000dd2c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000dd2e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000dd30:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000dd32:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000dd34:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000dd36:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000dd38:	2380      	movs	r3, #128	; 0x80
1000dd3a:	009b      	lsls	r3, r3, #2
1000dd3c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000dd3e:	0020      	movs	r0, r4
1000dd40:	4b34      	ldr	r3, [pc, #208]	; (1000de14 <ble_device_init+0x278>)
1000dd42:	4798      	blx	r3
1000dd44:	2800      	cmp	r0, #0
1000dd46:	d005      	beq.n	1000dd54 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000dd48:	4822      	ldr	r0, [pc, #136]	; (1000ddd4 <ble_device_init+0x238>)
1000dd4a:	4b23      	ldr	r3, [pc, #140]	; (1000ddd8 <ble_device_init+0x23c>)
1000dd4c:	4798      	blx	r3
1000dd4e:	4832      	ldr	r0, [pc, #200]	; (1000de18 <ble_device_init+0x27c>)
1000dd50:	4b23      	ldr	r3, [pc, #140]	; (1000dde0 <ble_device_init+0x244>)
1000dd52:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000dd54:	0030      	movs	r0, r6
1000dd56:	4b31      	ldr	r3, [pc, #196]	; (1000de1c <ble_device_init+0x280>)
1000dd58:	4798      	blx	r3
1000dd5a:	2800      	cmp	r0, #0
1000dd5c:	d005      	beq.n	1000dd6a <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000dd5e:	481d      	ldr	r0, [pc, #116]	; (1000ddd4 <ble_device_init+0x238>)
1000dd60:	4b1d      	ldr	r3, [pc, #116]	; (1000ddd8 <ble_device_init+0x23c>)
1000dd62:	4798      	blx	r3
1000dd64:	482e      	ldr	r0, [pc, #184]	; (1000de20 <ble_device_init+0x284>)
1000dd66:	4b1e      	ldr	r3, [pc, #120]	; (1000dde0 <ble_device_init+0x244>)
1000dd68:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000dd6a:	b00d      	add	sp, #52	; 0x34
1000dd6c:	bc3c      	pop	{r2, r3, r4, r5}
1000dd6e:	4690      	mov	r8, r2
1000dd70:	4699      	mov	r9, r3
1000dd72:	46a2      	mov	sl, r4
1000dd74:	46ab      	mov	fp, r5
1000dd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd78:	10017638 	.word	0x10017638
1000dd7c:	10017640 	.word	0x10017640
1000dd80:	100143c9 	.word	0x100143c9
1000dd84:	10018d84 	.word	0x10018d84
1000dd88:	000004e2 	.word	0x000004e2
1000dd8c:	10017158 	.word	0x10017158
1000dd90:	1001763c 	.word	0x1001763c
1000dd94:	10018dbc 	.word	0x10018dbc
1000dd98:	10018db4 	.word	0x10018db4
1000dd9c:	100190f0 	.word	0x100190f0
1000dda0:	10016d58 	.word	0x10016d58
1000dda4:	10017648 	.word	0x10017648
1000dda8:	10018d98 	.word	0x10018d98
1000ddac:	10018d5c 	.word	0x10018d5c
1000ddb0:	10018d70 	.word	0x10018d70
1000ddb4:	10018ac4 	.word	0x10018ac4
1000ddb8:	10018db8 	.word	0x10018db8
1000ddbc:	10018ac0 	.word	0x10018ac0
1000ddc0:	10018d48 	.word	0x10018d48
1000ddc4:	100192fc 	.word	0x100192fc
1000ddc8:	10018ad8 	.word	0x10018ad8
1000ddcc:	10018d44 	.word	0x10018d44
1000ddd0:	1000fb81 	.word	0x1000fb81
1000ddd4:	100157dc 	.word	0x100157dc
1000ddd8:	10014631 	.word	0x10014631
1000dddc:	100166f4 	.word	0x100166f4
1000dde0:	10014511 	.word	0x10014511
1000dde4:	10016720 	.word	0x10016720
1000dde8:	10016974 	.word	0x10016974
1000ddec:	1000dacd 	.word	0x1000dacd
1000ddf0:	10016310 	.word	0x10016310
1000ddf4:	10016768 	.word	0x10016768
1000ddf8:	1000fa99 	.word	0x1000fa99
1000ddfc:	10016774 	.word	0x10016774
1000de00:	10016300 	.word	0x10016300
1000de04:	100143b7 	.word	0x100143b7
1000de08:	1000facd 	.word	0x1000facd
1000de0c:	1001678c 	.word	0x1001678c
1000de10:	00003a98 	.word	0x00003a98
1000de14:	1000faf1 	.word	0x1000faf1
1000de18:	100167b8 	.word	0x100167b8
1000de1c:	1000fd35 	.word	0x1000fd35
1000de20:	100167f4 	.word	0x100167f4

1000de24 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000de24:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000de26:	2200      	movs	r2, #0
1000de28:	2100      	movs	r1, #0
1000de2a:	4b06      	ldr	r3, [pc, #24]	; (1000de44 <ble_send_slave_sec_request+0x20>)
1000de2c:	4798      	blx	r3
1000de2e:	2800      	cmp	r0, #0
1000de30:	d006      	beq.n	1000de40 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000de32:	4805      	ldr	r0, [pc, #20]	; (1000de48 <ble_send_slave_sec_request+0x24>)
1000de34:	4b05      	ldr	r3, [pc, #20]	; (1000de4c <ble_send_slave_sec_request+0x28>)
1000de36:	4798      	blx	r3
1000de38:	4805      	ldr	r0, [pc, #20]	; (1000de50 <ble_send_slave_sec_request+0x2c>)
1000de3a:	4b06      	ldr	r3, [pc, #24]	; (1000de54 <ble_send_slave_sec_request+0x30>)
1000de3c:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000de3e:	20e2      	movs	r0, #226	; 0xe2
}
1000de40:	bd10      	pop	{r4, pc}
1000de42:	46c0      	nop			; (mov r8, r8)
1000de44:	10010b19 	.word	0x10010b19
1000de48:	100157dc 	.word	0x100157dc
1000de4c:	10014631 	.word	0x10014631
1000de50:	10016844 	.word	0x10016844
1000de54:	10014511 	.word	0x10014511

1000de58 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000de58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de5a:	465f      	mov	r7, fp
1000de5c:	464e      	mov	r6, r9
1000de5e:	4645      	mov	r5, r8
1000de60:	b4e0      	push	{r5, r6, r7}
1000de62:	b09a      	sub	sp, #104	; 0x68
1000de64:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000de66:	7a86      	ldrb	r6, [r0, #10]
1000de68:	2e00      	cmp	r6, #0
1000de6a:	d000      	beq.n	1000de6e <ble_connected_state_handler+0x16>
1000de6c:	e0c6      	b.n	1000dffc <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000de6e:	4875      	ldr	r0, [pc, #468]	; (1000e044 <ble_connected_state_handler+0x1ec>)
1000de70:	4f75      	ldr	r7, [pc, #468]	; (1000e048 <ble_connected_state_handler+0x1f0>)
1000de72:	47b8      	blx	r7
1000de74:	792b      	ldrb	r3, [r5, #4]
1000de76:	796a      	ldrb	r2, [r5, #5]
1000de78:	79a9      	ldrb	r1, [r5, #6]
1000de7a:	7868      	ldrb	r0, [r5, #1]
1000de7c:	9002      	str	r0, [sp, #8]
1000de7e:	78a8      	ldrb	r0, [r5, #2]
1000de80:	9001      	str	r0, [sp, #4]
1000de82:	78e8      	ldrb	r0, [r5, #3]
1000de84:	9000      	str	r0, [sp, #0]
1000de86:	4871      	ldr	r0, [pc, #452]	; (1000e04c <ble_connected_state_handler+0x1f4>)
1000de88:	4c71      	ldr	r4, [pc, #452]	; (1000e050 <ble_connected_state_handler+0x1f8>)
1000de8a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000de8c:	486d      	ldr	r0, [pc, #436]	; (1000e044 <ble_connected_state_handler+0x1ec>)
1000de8e:	47b8      	blx	r7
1000de90:	8929      	ldrh	r1, [r5, #8]
1000de92:	4870      	ldr	r0, [pc, #448]	; (1000e054 <ble_connected_state_handler+0x1fc>)
1000de94:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000de96:	2212      	movs	r2, #18
1000de98:	0029      	movs	r1, r5
1000de9a:	486f      	ldr	r0, [pc, #444]	; (1000e058 <ble_connected_state_handler+0x200>)
1000de9c:	4b6f      	ldr	r3, [pc, #444]	; (1000e05c <ble_connected_state_handler+0x204>)
1000de9e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dea0:	9504      	str	r5, [sp, #16]
1000dea2:	2207      	movs	r2, #7
1000dea4:	0029      	movs	r1, r5
1000dea6:	486e      	ldr	r0, [pc, #440]	; (1000e060 <ble_connected_state_handler+0x208>)
1000dea8:	4b6e      	ldr	r3, [pc, #440]	; (1000e064 <ble_connected_state_handler+0x20c>)
1000deaa:	4798      	blx	r3
1000deac:	2800      	cmp	r0, #0
1000deae:	d100      	bne.n	1000deb2 <ble_connected_state_handler+0x5a>
1000deb0:	e0ad      	b.n	1000e00e <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000deb2:	782b      	ldrb	r3, [r5, #0]
1000deb4:	2b02      	cmp	r3, #2
1000deb6:	d000      	beq.n	1000deba <ble_connected_state_handler+0x62>
1000deb8:	e0a9      	b.n	1000e00e <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000deba:	2250      	movs	r2, #80	; 0x50
1000debc:	2100      	movs	r1, #0
1000debe:	a806      	add	r0, sp, #24
1000dec0:	4b69      	ldr	r3, [pc, #420]	; (1000e068 <ble_connected_state_handler+0x210>)
1000dec2:	4798      	blx	r3
1000dec4:	4f69      	ldr	r7, [pc, #420]	; (1000e06c <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000dec6:	2300      	movs	r3, #0
1000dec8:	e00b      	b.n	1000dee2 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000deca:	1c59      	adds	r1, r3, #1
1000decc:	7814      	ldrb	r4, [r2, #0]
1000dece:	a806      	add	r0, sp, #24
1000ded0:	54c4      	strb	r4, [r0, r3]
1000ded2:	3201      	adds	r2, #1
1000ded4:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ded6:	42b3      	cmp	r3, r6
1000ded8:	d1f7      	bne.n	1000deca <ble_connected_state_handler+0x72>
1000deda:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000dedc:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000dede:	2b50      	cmp	r3, #80	; 0x50
1000dee0:	d004      	beq.n	1000deec <ble_connected_state_handler+0x94>
1000dee2:	001e      	movs	r6, r3
1000dee4:	3610      	adds	r6, #16
1000dee6:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000dee8:	003a      	movs	r2, r7
1000deea:	e7ee      	b.n	1000deca <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000deec:	aa06      	add	r2, sp, #24
1000deee:	0029      	movs	r1, r5
1000def0:	2005      	movs	r0, #5
1000def2:	4b5f      	ldr	r3, [pc, #380]	; (1000e070 <ble_connected_state_handler+0x218>)
1000def4:	4798      	blx	r3
1000def6:	1e06      	subs	r6, r0, #0
1000def8:	d100      	bne.n	1000defc <ble_connected_state_handler+0xa4>
1000defa:	e09c      	b.n	1000e036 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000defc:	4851      	ldr	r0, [pc, #324]	; (1000e044 <ble_connected_state_handler+0x1ec>)
1000defe:	4b52      	ldr	r3, [pc, #328]	; (1000e048 <ble_connected_state_handler+0x1f0>)
1000df00:	4798      	blx	r3
1000df02:	485c      	ldr	r0, [pc, #368]	; (1000e074 <ble_connected_state_handler+0x21c>)
1000df04:	4b52      	ldr	r3, [pc, #328]	; (1000e050 <ble_connected_state_handler+0x1f8>)
1000df06:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000df08:	26e2      	movs	r6, #226	; 0xe2
1000df0a:	e094      	b.n	1000e036 <ble_connected_state_handler+0x1de>
1000df0c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000df0e:	9405      	str	r4, [sp, #20]
1000df10:	2207      	movs	r2, #7
1000df12:	9904      	ldr	r1, [sp, #16]
1000df14:	4648      	mov	r0, r9
1000df16:	47d8      	blx	fp
1000df18:	2800      	cmp	r0, #0
1000df1a:	d109      	bne.n	1000df30 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000df1c:	9a05      	ldr	r2, [sp, #20]
1000df1e:	0153      	lsls	r3, r2, #5
1000df20:	1a9b      	subs	r3, r3, r2
1000df22:	009a      	lsls	r2, r3, #2
1000df24:	4b54      	ldr	r3, [pc, #336]	; (1000e078 <ble_connected_state_handler+0x220>)
1000df26:	189b      	adds	r3, r3, r2
1000df28:	335e      	adds	r3, #94	; 0x5e
1000df2a:	2202      	movs	r2, #2
1000df2c:	701a      	strb	r2, [r3, #0]
1000df2e:	e02b      	b.n	1000df88 <ble_connected_state_handler+0x130>
1000df30:	3401      	adds	r4, #1
1000df32:	237c      	movs	r3, #124	; 0x7c
1000df34:	469c      	mov	ip, r3
1000df36:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df38:	2c05      	cmp	r4, #5
1000df3a:	d1e7      	bne.n	1000df0c <ble_connected_state_handler+0xb4>
1000df3c:	e072      	b.n	1000e024 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000df3e:	001c      	movs	r4, r3
1000df40:	7811      	ldrb	r1, [r2, #0]
1000df42:	2900      	cmp	r1, #0
1000df44:	d11a      	bne.n	1000df7c <ble_connected_state_handler+0x124>
1000df46:	e001      	b.n	1000df4c <ble_connected_state_handler+0xf4>
1000df48:	2400      	movs	r4, #0
1000df4a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000df4c:	0163      	lsls	r3, r4, #5
1000df4e:	4699      	mov	r9, r3
1000df50:	1b18      	subs	r0, r3, r4
1000df52:	0080      	lsls	r0, r0, #2
1000df54:	4b48      	ldr	r3, [pc, #288]	; (1000e078 <ble_connected_state_handler+0x220>)
1000df56:	4698      	mov	r8, r3
1000df58:	4440      	add	r0, r8
1000df5a:	2212      	movs	r2, #18
1000df5c:	0029      	movs	r1, r5
1000df5e:	4b3f      	ldr	r3, [pc, #252]	; (1000e05c <ble_connected_state_handler+0x204>)
1000df60:	4798      	blx	r3
						ble_device_count++;
1000df62:	4a46      	ldr	r2, [pc, #280]	; (1000e07c <ble_connected_state_handler+0x224>)
1000df64:	7813      	ldrb	r3, [r2, #0]
1000df66:	3301      	adds	r3, #1
1000df68:	b2db      	uxtb	r3, r3
1000df6a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000df6c:	464b      	mov	r3, r9
1000df6e:	1b1b      	subs	r3, r3, r4
1000df70:	009b      	lsls	r3, r3, #2
1000df72:	4443      	add	r3, r8
1000df74:	335e      	adds	r3, #94	; 0x5e
1000df76:	2202      	movs	r2, #2
1000df78:	701a      	strb	r2, [r3, #0]
						break;
1000df7a:	e005      	b.n	1000df88 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df7c:	1c79      	adds	r1, r7, #1
1000df7e:	b2cf      	uxtb	r7, r1
1000df80:	3301      	adds	r3, #1
1000df82:	327c      	adds	r2, #124	; 0x7c
1000df84:	2f05      	cmp	r7, #5
1000df86:	d1da      	bne.n	1000df3e <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000df88:	2207      	movs	r2, #7
1000df8a:	0029      	movs	r1, r5
1000df8c:	4834      	ldr	r0, [pc, #208]	; (1000e060 <ble_connected_state_handler+0x208>)
1000df8e:	4b35      	ldr	r3, [pc, #212]	; (1000e064 <ble_connected_state_handler+0x20c>)
1000df90:	4798      	blx	r3
1000df92:	2800      	cmp	r0, #0
1000df94:	d10c      	bne.n	1000dfb0 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000df96:	017b      	lsls	r3, r7, #5
1000df98:	1bdb      	subs	r3, r3, r7
1000df9a:	009b      	lsls	r3, r3, #2
1000df9c:	4a36      	ldr	r2, [pc, #216]	; (1000e078 <ble_connected_state_handler+0x220>)
1000df9e:	18d3      	adds	r3, r2, r3
1000dfa0:	2205      	movs	r2, #5
1000dfa2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dfa4:	3202      	adds	r2, #2
1000dfa6:	2100      	movs	r1, #0
1000dfa8:	482d      	ldr	r0, [pc, #180]	; (1000e060 <ble_connected_state_handler+0x208>)
1000dfaa:	4b2f      	ldr	r3, [pc, #188]	; (1000e068 <ble_connected_state_handler+0x210>)
1000dfac:	4798      	blx	r3
1000dfae:	e042      	b.n	1000e036 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dfb0:	4b31      	ldr	r3, [pc, #196]	; (1000e078 <ble_connected_state_handler+0x220>)
1000dfb2:	4698      	mov	r8, r3
1000dfb4:	017c      	lsls	r4, r7, #5
1000dfb6:	1be3      	subs	r3, r4, r7
1000dfb8:	009b      	lsls	r3, r3, #2
1000dfba:	4443      	add	r3, r8
1000dfbc:	220a      	movs	r2, #10
1000dfbe:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dfc0:	3a03      	subs	r2, #3
1000dfc2:	2100      	movs	r1, #0
1000dfc4:	4826      	ldr	r0, [pc, #152]	; (1000e060 <ble_connected_state_handler+0x208>)
1000dfc6:	4b28      	ldr	r3, [pc, #160]	; (1000e068 <ble_connected_state_handler+0x210>)
1000dfc8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dfca:	1be4      	subs	r4, r4, r7
1000dfcc:	00a4      	lsls	r4, r4, #2
1000dfce:	4444      	add	r4, r8
1000dfd0:	7ca3      	ldrb	r3, [r4, #18]
1000dfd2:	2b0a      	cmp	r3, #10
1000dfd4:	d12f      	bne.n	1000e036 <ble_connected_state_handler+0x1de>
1000dfd6:	e00d      	b.n	1000dff4 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000dfd8:	481a      	ldr	r0, [pc, #104]	; (1000e044 <ble_connected_state_handler+0x1ec>)
1000dfda:	4b1b      	ldr	r3, [pc, #108]	; (1000e048 <ble_connected_state_handler+0x1f0>)
1000dfdc:	4798      	blx	r3
1000dfde:	4b27      	ldr	r3, [pc, #156]	; (1000e07c <ble_connected_state_handler+0x224>)
1000dfe0:	7819      	ldrb	r1, [r3, #0]
1000dfe2:	b2c9      	uxtb	r1, r1
1000dfe4:	4826      	ldr	r0, [pc, #152]	; (1000e080 <ble_connected_state_handler+0x228>)
1000dfe6:	4b1a      	ldr	r3, [pc, #104]	; (1000e050 <ble_connected_state_handler+0x1f8>)
1000dfe8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000dfea:	8928      	ldrh	r0, [r5, #8]
1000dfec:	2113      	movs	r1, #19
1000dfee:	4b25      	ldr	r3, [pc, #148]	; (1000e084 <ble_connected_state_handler+0x22c>)
1000dff0:	4798      	blx	r3
1000dff2:	e020      	b.n	1000e036 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000dff4:	8928      	ldrh	r0, [r5, #8]
1000dff6:	4b24      	ldr	r3, [pc, #144]	; (1000e088 <ble_connected_state_handler+0x230>)
1000dff8:	4798      	blx	r3
1000dffa:	e01c      	b.n	1000e036 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000dffc:	4811      	ldr	r0, [pc, #68]	; (1000e044 <ble_connected_state_handler+0x1ec>)
1000dffe:	4b12      	ldr	r3, [pc, #72]	; (1000e048 <ble_connected_state_handler+0x1f0>)
1000e000:	4798      	blx	r3
1000e002:	7aa9      	ldrb	r1, [r5, #10]
1000e004:	4821      	ldr	r0, [pc, #132]	; (1000e08c <ble_connected_state_handler+0x234>)
1000e006:	4b12      	ldr	r3, [pc, #72]	; (1000e050 <ble_connected_state_handler+0x1f8>)
1000e008:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e00a:	2600      	movs	r6, #0
1000e00c:	e013      	b.n	1000e036 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e00e:	4b1b      	ldr	r3, [pc, #108]	; (1000e07c <ble_connected_state_handler+0x224>)
1000e010:	781b      	ldrb	r3, [r3, #0]
1000e012:	b2db      	uxtb	r3, r3
1000e014:	2b04      	cmp	r3, #4
1000e016:	d8df      	bhi.n	1000dfd8 <ble_connected_state_handler+0x180>
1000e018:	4b17      	ldr	r3, [pc, #92]	; (1000e078 <ble_connected_state_handler+0x220>)
1000e01a:	4699      	mov	r9, r3
1000e01c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e01e:	4b11      	ldr	r3, [pc, #68]	; (1000e064 <ble_connected_state_handler+0x20c>)
1000e020:	469b      	mov	fp, r3
1000e022:	e773      	b.n	1000df0c <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e024:	235e      	movs	r3, #94	; 0x5e
1000e026:	4a14      	ldr	r2, [pc, #80]	; (1000e078 <ble_connected_state_handler+0x220>)
1000e028:	5cd3      	ldrb	r3, [r2, r3]
1000e02a:	2b00      	cmp	r3, #0
1000e02c:	d08c      	beq.n	1000df48 <ble_connected_state_handler+0xf0>
1000e02e:	4a18      	ldr	r2, [pc, #96]	; (1000e090 <ble_connected_state_handler+0x238>)
1000e030:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e032:	2701      	movs	r7, #1
1000e034:	e783      	b.n	1000df3e <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e036:	0030      	movs	r0, r6
1000e038:	b01a      	add	sp, #104	; 0x68
1000e03a:	bc1c      	pop	{r2, r3, r4}
1000e03c:	4690      	mov	r8, r2
1000e03e:	4699      	mov	r9, r3
1000e040:	46a3      	mov	fp, r4
1000e042:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e044:	100157dc 	.word	0x100157dc
1000e048:	10014631 	.word	0x10014631
1000e04c:	10016864 	.word	0x10016864
1000e050:	10014511 	.word	0x10014511
1000e054:	100168a8 	.word	0x100168a8
1000e058:	10018d84 	.word	0x10018d84
1000e05c:	100143b7 	.word	0x100143b7
1000e060:	10017640 	.word	0x10017640
1000e064:	10014399 	.word	0x10014399
1000e068:	100143c9 	.word	0x100143c9
1000e06c:	10018b1e 	.word	0x10018b1e
1000e070:	1000ffa1 	.word	0x1000ffa1
1000e074:	100168c0 	.word	0x100168c0
1000e078:	10018ad8 	.word	0x10018ad8
1000e07c:	10018d44 	.word	0x10018d44
1000e080:	100168e4 	.word	0x100168e4
1000e084:	1000ff75 	.word	0x1000ff75
1000e088:	1000de25 	.word	0x1000de25
1000e08c:	10016920 	.word	0x10016920
1000e090:	10018bb2 	.word	0x10018bb2

1000e094 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e094:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e096:	4647      	mov	r7, r8
1000e098:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e09a:	7803      	ldrb	r3, [r0, #0]
1000e09c:	2b00      	cmp	r3, #0
1000e09e:	d141      	bne.n	1000e124 <ble_resolv_rand_addr_handler+0x90>
1000e0a0:	4d2f      	ldr	r5, [pc, #188]	; (1000e160 <ble_resolv_rand_addr_handler+0xcc>)
1000e0a2:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e0a4:	1c46      	adds	r6, r0, #1
1000e0a6:	4f2f      	ldr	r7, [pc, #188]	; (1000e164 <ble_resolv_rand_addr_handler+0xd0>)
1000e0a8:	2210      	movs	r2, #16
1000e0aa:	0029      	movs	r1, r5
1000e0ac:	0030      	movs	r0, r6
1000e0ae:	47b8      	blx	r7
1000e0b0:	2800      	cmp	r0, #0
1000e0b2:	d03f      	beq.n	1000e134 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e0b4:	3401      	adds	r4, #1
1000e0b6:	b2e4      	uxtb	r4, r4
1000e0b8:	357c      	adds	r5, #124	; 0x7c
1000e0ba:	2c05      	cmp	r4, #5
1000e0bc:	d1f4      	bne.n	1000e0a8 <ble_resolv_rand_addr_handler+0x14>
1000e0be:	e031      	b.n	1000e124 <ble_resolv_rand_addr_handler+0x90>
1000e0c0:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e0c2:	001c      	movs	r4, r3
1000e0c4:	7811      	ldrb	r1, [r2, #0]
1000e0c6:	2900      	cmp	r1, #0
1000e0c8:	d122      	bne.n	1000e110 <ble_resolv_rand_addr_handler+0x7c>
1000e0ca:	e001      	b.n	1000e0d0 <ble_resolv_rand_addr_handler+0x3c>
1000e0cc:	2400      	movs	r4, #0
1000e0ce:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e0d0:	4b25      	ldr	r3, [pc, #148]	; (1000e168 <ble_resolv_rand_addr_handler+0xd4>)
1000e0d2:	4698      	mov	r8, r3
1000e0d4:	0166      	lsls	r6, r4, #5
1000e0d6:	1b37      	subs	r7, r6, r4
1000e0d8:	00bf      	lsls	r7, r7, #2
1000e0da:	4447      	add	r7, r8
1000e0dc:	2212      	movs	r2, #18
1000e0de:	4923      	ldr	r1, [pc, #140]	; (1000e16c <ble_resolv_rand_addr_handler+0xd8>)
1000e0e0:	0038      	movs	r0, r7
1000e0e2:	4b23      	ldr	r3, [pc, #140]	; (1000e170 <ble_resolv_rand_addr_handler+0xdc>)
1000e0e4:	4798      	blx	r3
				ble_device_count++;
1000e0e6:	4a23      	ldr	r2, [pc, #140]	; (1000e174 <ble_resolv_rand_addr_handler+0xe0>)
1000e0e8:	7813      	ldrb	r3, [r2, #0]
1000e0ea:	3301      	adds	r3, #1
1000e0ec:	b2db      	uxtb	r3, r3
1000e0ee:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e0f0:	375e      	adds	r7, #94	; 0x5e
1000e0f2:	2302      	movs	r3, #2
1000e0f4:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e0f6:	1b34      	subs	r4, r6, r4
1000e0f8:	00a4      	lsls	r4, r4, #2
1000e0fa:	4444      	add	r4, r8
1000e0fc:	3308      	adds	r3, #8
1000e0fe:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e100:	016b      	lsls	r3, r5, #5
1000e102:	1b5d      	subs	r5, r3, r5
1000e104:	00ad      	lsls	r5, r5, #2
1000e106:	4445      	add	r5, r8
1000e108:	7cab      	ldrb	r3, [r5, #18]
1000e10a:	2b0a      	cmp	r3, #10
1000e10c:	d123      	bne.n	1000e156 <ble_resolv_rand_addr_handler+0xc2>
1000e10e:	e004      	b.n	1000e11a <ble_resolv_rand_addr_handler+0x86>
1000e110:	3301      	adds	r3, #1
1000e112:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e114:	2b05      	cmp	r3, #5
1000e116:	d1d3      	bne.n	1000e0c0 <ble_resolv_rand_addr_handler+0x2c>
1000e118:	e01d      	b.n	1000e156 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e11a:	4b14      	ldr	r3, [pc, #80]	; (1000e16c <ble_resolv_rand_addr_handler+0xd8>)
1000e11c:	8918      	ldrh	r0, [r3, #8]
1000e11e:	4b16      	ldr	r3, [pc, #88]	; (1000e178 <ble_resolv_rand_addr_handler+0xe4>)
1000e120:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000e122:	e018      	b.n	1000e156 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e124:	235e      	movs	r3, #94	; 0x5e
1000e126:	4a10      	ldr	r2, [pc, #64]	; (1000e168 <ble_resolv_rand_addr_handler+0xd4>)
1000e128:	5cd3      	ldrb	r3, [r2, r3]
1000e12a:	2b00      	cmp	r3, #0
1000e12c:	d0ce      	beq.n	1000e0cc <ble_resolv_rand_addr_handler+0x38>
1000e12e:	4a13      	ldr	r2, [pc, #76]	; (1000e17c <ble_resolv_rand_addr_handler+0xe8>)
1000e130:	2301      	movs	r3, #1
1000e132:	e7c5      	b.n	1000e0c0 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e134:	480c      	ldr	r0, [pc, #48]	; (1000e168 <ble_resolv_rand_addr_handler+0xd4>)
1000e136:	0163      	lsls	r3, r4, #5
1000e138:	1b1a      	subs	r2, r3, r4
1000e13a:	0092      	lsls	r2, r2, #2
1000e13c:	1882      	adds	r2, r0, r2
1000e13e:	0011      	movs	r1, r2
1000e140:	315e      	adds	r1, #94	; 0x5e
1000e142:	2502      	movs	r5, #2
1000e144:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e146:	210a      	movs	r1, #10
1000e148:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e14a:	0010      	movs	r0, r2
1000e14c:	2212      	movs	r2, #18
1000e14e:	4907      	ldr	r1, [pc, #28]	; (1000e16c <ble_resolv_rand_addr_handler+0xd8>)
1000e150:	4b07      	ldr	r3, [pc, #28]	; (1000e170 <ble_resolv_rand_addr_handler+0xdc>)
1000e152:	4798      	blx	r3
1000e154:	e7e1      	b.n	1000e11a <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e156:	2000      	movs	r0, #0
1000e158:	bc04      	pop	{r2}
1000e15a:	4690      	mov	r8, r2
1000e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e15e:	46c0      	nop			; (mov r8, r8)
1000e160:	10018b1e 	.word	0x10018b1e
1000e164:	10014399 	.word	0x10014399
1000e168:	10018ad8 	.word	0x10018ad8
1000e16c:	10018d84 	.word	0x10018d84
1000e170:	100143b7 	.word	0x100143b7
1000e174:	10018d44 	.word	0x10018d44
1000e178:	1000de25 	.word	0x1000de25
1000e17c:	10018bb2 	.word	0x10018bb2

1000e180 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e182:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000e184:	283b      	cmp	r0, #59	; 0x3b
1000e186:	d872      	bhi.n	1000e26e <ble_event_manager+0xee>
1000e188:	0083      	lsls	r3, r0, #2
1000e18a:	4a3c      	ldr	r2, [pc, #240]	; (1000e27c <ble_event_manager+0xfc>)
1000e18c:	58d3      	ldr	r3, [r2, r3]
1000e18e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e190:	0084      	lsls	r4, r0, #2
1000e192:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e194:	4f3a      	ldr	r7, [pc, #232]	; (1000e280 <ble_event_manager+0x100>)
1000e196:	59bb      	ldr	r3, [r7, r6]
1000e198:	2b00      	cmp	r3, #0
1000e19a:	d004      	beq.n	1000e1a6 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e19c:	591b      	ldr	r3, [r3, r4]
1000e19e:	2b00      	cmp	r3, #0
1000e1a0:	d001      	beq.n	1000e1a6 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000e1a2:	0028      	movs	r0, r5
1000e1a4:	4798      	blx	r3
1000e1a6:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e1a8:	2e14      	cmp	r6, #20
1000e1aa:	d1f4      	bne.n	1000e196 <ble_event_manager+0x16>
1000e1ac:	e065      	b.n	1000e27a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e1ae:	3813      	subs	r0, #19
1000e1b0:	b2c4      	uxtb	r4, r0
1000e1b2:	00a4      	lsls	r4, r4, #2
1000e1b4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e1b6:	4f33      	ldr	r7, [pc, #204]	; (1000e284 <ble_event_manager+0x104>)
1000e1b8:	59bb      	ldr	r3, [r7, r6]
1000e1ba:	2b00      	cmp	r3, #0
1000e1bc:	d004      	beq.n	1000e1c8 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e1be:	591b      	ldr	r3, [r3, r4]
1000e1c0:	2b00      	cmp	r3, #0
1000e1c2:	d001      	beq.n	1000e1c8 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000e1c4:	0028      	movs	r0, r5
1000e1c6:	4798      	blx	r3
1000e1c8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e1ca:	2e14      	cmp	r6, #20
1000e1cc:	d1f4      	bne.n	1000e1b8 <ble_event_manager+0x38>
1000e1ce:	e054      	b.n	1000e27a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e1d0:	381d      	subs	r0, #29
1000e1d2:	b2c4      	uxtb	r4, r0
1000e1d4:	00a4      	lsls	r4, r4, #2
1000e1d6:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e1d8:	4f2b      	ldr	r7, [pc, #172]	; (1000e288 <ble_event_manager+0x108>)
1000e1da:	59bb      	ldr	r3, [r7, r6]
1000e1dc:	2b00      	cmp	r3, #0
1000e1de:	d004      	beq.n	1000e1ea <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e1e0:	591b      	ldr	r3, [r3, r4]
1000e1e2:	2b00      	cmp	r3, #0
1000e1e4:	d001      	beq.n	1000e1ea <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000e1e6:	0028      	movs	r0, r5
1000e1e8:	4798      	blx	r3
1000e1ea:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e1ec:	2e14      	cmp	r6, #20
1000e1ee:	d1f4      	bne.n	1000e1da <ble_event_manager+0x5a>
1000e1f0:	e043      	b.n	1000e27a <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e1f2:	3827      	subs	r0, #39	; 0x27
1000e1f4:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e1f6:	4b25      	ldr	r3, [pc, #148]	; (1000e28c <ble_event_manager+0x10c>)
1000e1f8:	681b      	ldr	r3, [r3, #0]
1000e1fa:	2b00      	cmp	r3, #0
1000e1fc:	d03d      	beq.n	1000e27a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e1fe:	0080      	lsls	r0, r0, #2
1000e200:	58c3      	ldr	r3, [r0, r3]
1000e202:	2b00      	cmp	r3, #0
1000e204:	d039      	beq.n	1000e27a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e206:	0008      	movs	r0, r1
1000e208:	4798      	blx	r3
1000e20a:	e036      	b.n	1000e27a <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e20c:	382d      	subs	r0, #45	; 0x2d
1000e20e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e210:	4b1f      	ldr	r3, [pc, #124]	; (1000e290 <ble_event_manager+0x110>)
1000e212:	681b      	ldr	r3, [r3, #0]
1000e214:	2b00      	cmp	r3, #0
1000e216:	d030      	beq.n	1000e27a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e218:	0080      	lsls	r0, r0, #2
1000e21a:	58c3      	ldr	r3, [r0, r3]
1000e21c:	2b00      	cmp	r3, #0
1000e21e:	d02c      	beq.n	1000e27a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e220:	0008      	movs	r0, r1
1000e222:	4798      	blx	r3
1000e224:	e029      	b.n	1000e27a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e226:	3836      	subs	r0, #54	; 0x36
1000e228:	b2c4      	uxtb	r4, r0
1000e22a:	00a4      	lsls	r4, r4, #2
1000e22c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e22e:	4f19      	ldr	r7, [pc, #100]	; (1000e294 <ble_event_manager+0x114>)
1000e230:	59bb      	ldr	r3, [r7, r6]
1000e232:	2b00      	cmp	r3, #0
1000e234:	d004      	beq.n	1000e240 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e236:	591b      	ldr	r3, [r3, r4]
1000e238:	2b00      	cmp	r3, #0
1000e23a:	d001      	beq.n	1000e240 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000e23c:	0028      	movs	r0, r5
1000e23e:	4798      	blx	r3
1000e240:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e242:	2e14      	cmp	r6, #20
1000e244:	d1f4      	bne.n	1000e230 <ble_event_manager+0xb0>
1000e246:	e018      	b.n	1000e27a <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e248:	3838      	subs	r0, #56	; 0x38
1000e24a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e24c:	4b12      	ldr	r3, [pc, #72]	; (1000e298 <ble_event_manager+0x118>)
1000e24e:	681b      	ldr	r3, [r3, #0]
1000e250:	2b00      	cmp	r3, #0
1000e252:	d012      	beq.n	1000e27a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e254:	0080      	lsls	r0, r0, #2
1000e256:	58c3      	ldr	r3, [r0, r3]
1000e258:	2b00      	cmp	r3, #0
1000e25a:	d00e      	beq.n	1000e27a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000e25c:	0008      	movs	r0, r1
1000e25e:	4798      	blx	r3
1000e260:	e00b      	b.n	1000e27a <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e262:	4b0e      	ldr	r3, [pc, #56]	; (1000e29c <ble_event_manager+0x11c>)
1000e264:	681b      	ldr	r3, [r3, #0]
1000e266:	2b00      	cmp	r3, #0
1000e268:	d007      	beq.n	1000e27a <ble_event_manager+0xfa>
			ble_user_event_cb();
1000e26a:	4798      	blx	r3
1000e26c:	e005      	b.n	1000e27a <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000e26e:	4d0c      	ldr	r5, [pc, #48]	; (1000e2a0 <ble_event_manager+0x120>)
1000e270:	0028      	movs	r0, r5
1000e272:	4c0c      	ldr	r4, [pc, #48]	; (1000e2a4 <ble_event_manager+0x124>)
1000e274:	47a0      	blx	r4
1000e276:	0028      	movs	r0, r5
1000e278:	47a0      	blx	r4
	}
	break;		
	}
}
1000e27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e27c:	10016210 	.word	0x10016210
1000e280:	10018d5c 	.word	0x10018d5c
1000e284:	10018d70 	.word	0x10018d70
1000e288:	10018ac4 	.word	0x10018ac4
1000e28c:	10018db8 	.word	0x10018db8
1000e290:	10018ac0 	.word	0x10018ac0
1000e294:	10018d48 	.word	0x10018d48
1000e298:	100192fc 	.word	0x100192fc
1000e29c:	10017638 	.word	0x10017638
1000e2a0:	100157dc 	.word	0x100157dc
1000e2a4:	10014631 	.word	0x10014631

1000e2a8 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e2a8:	b570      	push	{r4, r5, r6, lr}
1000e2aa:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e2ac:	4b0d      	ldr	r3, [pc, #52]	; (1000e2e4 <ble_event_task+0x3c>)
1000e2ae:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e2b0:	2b01      	cmp	r3, #1
1000e2b2:	d101      	bne.n	1000e2b8 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e2b4:	4b0c      	ldr	r3, [pc, #48]	; (1000e2e8 <ble_event_task+0x40>)
1000e2b6:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e2b8:	0022      	movs	r2, r4
1000e2ba:	490c      	ldr	r1, [pc, #48]	; (1000e2ec <ble_event_task+0x44>)
1000e2bc:	480c      	ldr	r0, [pc, #48]	; (1000e2f0 <ble_event_task+0x48>)
1000e2be:	4b0d      	ldr	r3, [pc, #52]	; (1000e2f4 <ble_event_task+0x4c>)
1000e2c0:	4798      	blx	r3
1000e2c2:	0004      	movs	r4, r0
1000e2c4:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e2c6:	4b07      	ldr	r3, [pc, #28]	; (1000e2e4 <ble_event_task+0x3c>)
1000e2c8:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e2ca:	2b01      	cmp	r3, #1
1000e2cc:	d101      	bne.n	1000e2d2 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e2ce:	4b0a      	ldr	r3, [pc, #40]	; (1000e2f8 <ble_event_task+0x50>)
1000e2d0:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e2d2:	2d00      	cmp	r5, #0
1000e2d4:	d104      	bne.n	1000e2e0 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e2d6:	4b06      	ldr	r3, [pc, #24]	; (1000e2f0 <ble_event_task+0x48>)
1000e2d8:	7818      	ldrb	r0, [r3, #0]
1000e2da:	4904      	ldr	r1, [pc, #16]	; (1000e2ec <ble_event_task+0x44>)
1000e2dc:	4b07      	ldr	r3, [pc, #28]	; (1000e2fc <ble_event_task+0x54>)
1000e2de:	4798      	blx	r3
    }
    
    return status;
}
1000e2e0:	0020      	movs	r0, r4
1000e2e2:	bd70      	pop	{r4, r5, r6, pc}
1000e2e4:	10017647 	.word	0x10017647
1000e2e8:	1000ec9d 	.word	0x1000ec9d
1000e2ec:	100190f0 	.word	0x100190f0
1000e2f0:	10018db4 	.word	0x10018db4
1000e2f4:	1000f329 	.word	0x1000f329
1000e2f8:	1000ec75 	.word	0x1000ec75
1000e2fc:	1000e181 	.word	0x1000e181

1000e300 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e300:	b510      	push	{r4, lr}
1000e302:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e304:	ac08      	add	r4, sp, #32
1000e306:	2203      	movs	r2, #3
1000e308:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e30a:	2302      	movs	r3, #2
1000e30c:	70a3      	strb	r3, [r4, #2]
1000e30e:	3316      	adds	r3, #22
1000e310:	70e3      	strb	r3, [r4, #3]
1000e312:	7122      	strb	r2, [r4, #4]
1000e314:	7163      	strb	r3, [r4, #5]
1000e316:	3201      	adds	r2, #1
1000e318:	71a2      	strb	r2, [r4, #6]
1000e31a:	71e3      	strb	r3, [r4, #7]
1000e31c:	320b      	adds	r2, #11
1000e31e:	7222      	strb	r2, [r4, #8]
1000e320:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e322:	3b0f      	subs	r3, #15
1000e324:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e326:	3a05      	subs	r2, #5
1000e328:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e32a:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e32c:	aa0b      	add	r2, sp, #44	; 0x2c
1000e32e:	4b10      	ldr	r3, [pc, #64]	; (1000e370 <ble_advertisement_data_set+0x70>)
1000e330:	cb03      	ldmia	r3!, {r0, r1}
1000e332:	c203      	stmia	r2!, {r0, r1}
1000e334:	781b      	ldrb	r3, [r3, #0]
1000e336:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000e338:	2307      	movs	r3, #7
1000e33a:	466a      	mov	r2, sp
1000e33c:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000e33e:	33f8      	adds	r3, #248	; 0xf8
1000e340:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000e342:	2206      	movs	r2, #6
1000e344:	490b      	ldr	r1, [pc, #44]	; (1000e374 <ble_advertisement_data_set+0x74>)
1000e346:	466b      	mov	r3, sp
1000e348:	1c98      	adds	r0, r3, #2
1000e34a:	4b0b      	ldr	r3, [pc, #44]	; (1000e378 <ble_advertisement_data_set+0x78>)
1000e34c:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000e34e:	2308      	movs	r3, #8
1000e350:	466a      	mov	r2, sp
1000e352:	2115      	movs	r1, #21
1000e354:	0020      	movs	r0, r4
1000e356:	4c09      	ldr	r4, [pc, #36]	; (1000e37c <ble_advertisement_data_set+0x7c>)
1000e358:	47a0      	blx	r4
1000e35a:	2800      	cmp	r0, #0
1000e35c:	d005      	beq.n	1000e36a <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000e35e:	4808      	ldr	r0, [pc, #32]	; (1000e380 <ble_advertisement_data_set+0x80>)
1000e360:	4b08      	ldr	r3, [pc, #32]	; (1000e384 <ble_advertisement_data_set+0x84>)
1000e362:	4798      	blx	r3
1000e364:	4808      	ldr	r0, [pc, #32]	; (1000e388 <ble_advertisement_data_set+0x88>)
1000e366:	4b09      	ldr	r3, [pc, #36]	; (1000e38c <ble_advertisement_data_set+0x8c>)
1000e368:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000e36a:	2000      	movs	r0, #0
1000e36c:	b010      	add	sp, #64	; 0x40
1000e36e:	bd10      	pop	{r4, pc}
1000e370:	10016768 	.word	0x10016768
1000e374:	10016948 	.word	0x10016948
1000e378:	100143b7 	.word	0x100143b7
1000e37c:	1000fd89 	.word	0x1000fd89
1000e380:	100157dc 	.word	0x100157dc
1000e384:	10014631 	.word	0x10014631
1000e388:	10016950 	.word	0x10016950
1000e38c:	10014511 	.word	0x10014511

1000e390 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000e390:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000e392:	4b0e      	ldr	r3, [pc, #56]	; (1000e3cc <uart_read_complete_callback+0x3c>)
1000e394:	781b      	ldrb	r3, [r3, #0]
1000e396:	2b01      	cmp	r3, #1
1000e398:	d10b      	bne.n	1000e3b2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000e39a:	2202      	movs	r2, #2
1000e39c:	4b0b      	ldr	r3, [pc, #44]	; (1000e3cc <uart_read_complete_callback+0x3c>)
1000e39e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000e3a0:	4b0b      	ldr	r3, [pc, #44]	; (1000e3d0 <uart_read_complete_callback+0x40>)
1000e3a2:	681b      	ldr	r3, [r3, #0]
1000e3a4:	2b00      	cmp	r3, #0
1000e3a6:	d110      	bne.n	1000e3ca <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000e3a8:	2102      	movs	r1, #2
1000e3aa:	480a      	ldr	r0, [pc, #40]	; (1000e3d4 <uart_read_complete_callback+0x44>)
1000e3ac:	4b0a      	ldr	r3, [pc, #40]	; (1000e3d8 <uart_read_complete_callback+0x48>)
1000e3ae:	4798      	blx	r3
1000e3b0:	e00b      	b.n	1000e3ca <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000e3b2:	4b07      	ldr	r3, [pc, #28]	; (1000e3d0 <uart_read_complete_callback+0x40>)
1000e3b4:	681b      	ldr	r3, [r3, #0]
1000e3b6:	2b00      	cmp	r3, #0
1000e3b8:	d007      	beq.n	1000e3ca <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000e3ba:	4c08      	ldr	r4, [pc, #32]	; (1000e3dc <uart_read_complete_callback+0x4c>)
1000e3bc:	7820      	ldrb	r0, [r4, #0]
1000e3be:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e3c0:	2201      	movs	r2, #1
1000e3c2:	0021      	movs	r1, r4
1000e3c4:	4803      	ldr	r0, [pc, #12]	; (1000e3d4 <uart_read_complete_callback+0x44>)
1000e3c6:	4b06      	ldr	r3, [pc, #24]	; (1000e3e0 <uart_read_complete_callback+0x50>)
1000e3c8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000e3ca:	bd10      	pop	{r4, pc}
1000e3cc:	1001864c 	.word	0x1001864c
1000e3d0:	10018654 	.word	0x10018654
1000e3d4:	10019300 	.word	0x10019300
1000e3d8:	1000d119 	.word	0x1000d119
1000e3dc:	10018650 	.word	0x10018650
1000e3e0:	1000d0bd 	.word	0x1000d0bd

1000e3e4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000e3e4:	b570      	push	{r4, r5, r6, lr}
1000e3e6:	0006      	movs	r6, r0
1000e3e8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e3ea:	4c03      	ldr	r4, [pc, #12]	; (1000e3f8 <usart_serial_getchar+0x14>)
1000e3ec:	0029      	movs	r1, r5
1000e3ee:	0030      	movs	r0, r6
1000e3f0:	47a0      	blx	r4
1000e3f2:	2800      	cmp	r0, #0
1000e3f4:	d1fa      	bne.n	1000e3ec <usart_serial_getchar+0x8>
}
1000e3f6:	bd70      	pop	{r4, r5, r6, pc}
1000e3f8:	1000d0a9 	.word	0x1000d0a9

1000e3fc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e3fc:	b570      	push	{r4, r5, r6, lr}
1000e3fe:	0006      	movs	r6, r0
1000e400:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e402:	4c03      	ldr	r4, [pc, #12]	; (1000e410 <usart_serial_putchar+0x14>)
1000e404:	0029      	movs	r1, r5
1000e406:	0030      	movs	r0, r6
1000e408:	47a0      	blx	r4
1000e40a:	2800      	cmp	r0, #0
1000e40c:	d1fa      	bne.n	1000e404 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e40e:	bd70      	pop	{r4, r5, r6, pc}
1000e410:	1000d099 	.word	0x1000d099

1000e414 <serial_console_init>:

void serial_console_init(void)
{
1000e414:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e416:	2100      	movs	r1, #0
1000e418:	2000      	movs	r0, #0
1000e41a:	4b19      	ldr	r3, [pc, #100]	; (1000e480 <serial_console_init+0x6c>)
1000e41c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e41e:	4c19      	ldr	r4, [pc, #100]	; (1000e484 <serial_console_init+0x70>)
1000e420:	0020      	movs	r0, r4
1000e422:	4b19      	ldr	r3, [pc, #100]	; (1000e488 <serial_console_init+0x74>)
1000e424:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e426:	23e1      	movs	r3, #225	; 0xe1
1000e428:	025b      	lsls	r3, r3, #9
1000e42a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e42c:	2302      	movs	r3, #2
1000e42e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e430:	2203      	movs	r2, #3
1000e432:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e434:	3201      	adds	r2, #1
1000e436:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e438:	3201      	adds	r2, #1
1000e43a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e43c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e43e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e440:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e442:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e444:	4d11      	ldr	r5, [pc, #68]	; (1000e48c <serial_console_init+0x78>)
1000e446:	4b12      	ldr	r3, [pc, #72]	; (1000e490 <serial_console_init+0x7c>)
1000e448:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e44a:	4a12      	ldr	r2, [pc, #72]	; (1000e494 <serial_console_init+0x80>)
1000e44c:	4b12      	ldr	r3, [pc, #72]	; (1000e498 <serial_console_init+0x84>)
1000e44e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e450:	4a12      	ldr	r2, [pc, #72]	; (1000e49c <serial_console_init+0x88>)
1000e452:	4b13      	ldr	r3, [pc, #76]	; (1000e4a0 <serial_console_init+0x8c>)
1000e454:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e456:	0022      	movs	r2, r4
1000e458:	4912      	ldr	r1, [pc, #72]	; (1000e4a4 <serial_console_init+0x90>)
1000e45a:	0028      	movs	r0, r5
1000e45c:	4b12      	ldr	r3, [pc, #72]	; (1000e4a8 <serial_console_init+0x94>)
1000e45e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000e460:	4e12      	ldr	r6, [pc, #72]	; (1000e4ac <serial_console_init+0x98>)
1000e462:	6833      	ldr	r3, [r6, #0]
1000e464:	6898      	ldr	r0, [r3, #8]
1000e466:	2100      	movs	r1, #0
1000e468:	4c11      	ldr	r4, [pc, #68]	; (1000e4b0 <serial_console_init+0x9c>)
1000e46a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000e46c:	6833      	ldr	r3, [r6, #0]
1000e46e:	6858      	ldr	r0, [r3, #4]
1000e470:	2100      	movs	r1, #0
1000e472:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000e474:	2202      	movs	r2, #2
1000e476:	490f      	ldr	r1, [pc, #60]	; (1000e4b4 <serial_console_init+0xa0>)
1000e478:	0028      	movs	r0, r5
1000e47a:	4b0f      	ldr	r3, [pc, #60]	; (1000e4b8 <serial_console_init+0xa4>)
1000e47c:	4798      	blx	r3
}
1000e47e:	bd70      	pop	{r4, r5, r6, pc}
1000e480:	1000c0b9 	.word	0x1000c0b9
1000e484:	10019324 	.word	0x10019324
1000e488:	1000ceb1 	.word	0x1000ceb1
1000e48c:	10019300 	.word	0x10019300
1000e490:	10018abc 	.word	0x10018abc
1000e494:	1000e3fd 	.word	0x1000e3fd
1000e498:	10018ab8 	.word	0x10018ab8
1000e49c:	1000e3e5 	.word	0x1000e3e5
1000e4a0:	10018ab4 	.word	0x10018ab4
1000e4a4:	40004000 	.word	0x40004000
1000e4a8:	1000cedd 	.word	0x1000cedd
1000e4ac:	10016d18 	.word	0x10016d18
1000e4b0:	100146e1 	.word	0x100146e1
1000e4b4:	1000e391 	.word	0x1000e391
1000e4b8:	1000d0e5 	.word	0x1000d0e5

1000e4bc <_time_start>:

void _time_start(unsigned int sec)
{
1000e4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4be:	b083      	sub	sp, #12
1000e4c0:	0005      	movs	r5, r0
	system_clock_get_value();
1000e4c2:	4c0d      	ldr	r4, [pc, #52]	; (1000e4f8 <_time_start+0x3c>)
1000e4c4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000e4c6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000e4c8:	4f0c      	ldr	r7, [pc, #48]	; (1000e4fc <_time_start+0x40>)
1000e4ca:	47b8      	blx	r7
1000e4cc:	4e0c      	ldr	r6, [pc, #48]	; (1000e500 <_time_start+0x44>)
1000e4ce:	4a0d      	ldr	r2, [pc, #52]	; (1000e504 <_time_start+0x48>)
1000e4d0:	4b0d      	ldr	r3, [pc, #52]	; (1000e508 <_time_start+0x4c>)
1000e4d2:	47b0      	blx	r6
1000e4d4:	9000      	str	r0, [sp, #0]
1000e4d6:	9101      	str	r1, [sp, #4]
1000e4d8:	20fa      	movs	r0, #250	; 0xfa
1000e4da:	0080      	lsls	r0, r0, #2
1000e4dc:	4368      	muls	r0, r5
1000e4de:	47b8      	blx	r7
1000e4e0:	0002      	movs	r2, r0
1000e4e2:	000b      	movs	r3, r1
1000e4e4:	9800      	ldr	r0, [sp, #0]
1000e4e6:	9901      	ldr	r1, [sp, #4]
1000e4e8:	47b0      	blx	r6
1000e4ea:	4b08      	ldr	r3, [pc, #32]	; (1000e50c <_time_start+0x50>)
1000e4ec:	4798      	blx	r3
1000e4ee:	4b08      	ldr	r3, [pc, #32]	; (1000e510 <_time_start+0x54>)
1000e4f0:	6018      	str	r0, [r3, #0]
}
1000e4f2:	b003      	add	sp, #12
1000e4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e4f6:	46c0      	nop			; (mov r8, r8)
1000e4f8:	1000c13d 	.word	0x1000c13d
1000e4fc:	1001428d 	.word	0x1001428d
1000e500:	10013685 	.word	0x10013685
1000e504:	19feaec7 	.word	0x19feaec7
1000e508:	3f09d8ef 	.word	0x3f09d8ef
1000e50c:	10012aa5 	.word	0x10012aa5
1000e510:	10018648 	.word	0x10018648

1000e514 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000e514:	4b02      	ldr	r3, [pc, #8]	; (1000e520 <_time_done+0xc>)
1000e516:	681a      	ldr	r2, [r3, #0]
1000e518:	1e50      	subs	r0, r2, #1
1000e51a:	6018      	str	r0, [r3, #0]
}
1000e51c:	4770      	bx	lr
1000e51e:	46c0      	nop			; (mov r8, r8)
1000e520:	10018648 	.word	0x10018648

1000e524 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000e524:	b570      	push	{r4, r5, r6, lr}
1000e526:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000e528:	2201      	movs	r2, #1
1000e52a:	4b11      	ldr	r3, [pc, #68]	; (1000e570 <getchar_b11_timeout+0x4c>)
1000e52c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000e52e:	4b11      	ldr	r3, [pc, #68]	; (1000e574 <getchar_b11_timeout+0x50>)
1000e530:	681b      	ldr	r3, [r3, #0]
1000e532:	2b00      	cmp	r3, #0
1000e534:	d103      	bne.n	1000e53e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000e536:	2102      	movs	r1, #2
1000e538:	480f      	ldr	r0, [pc, #60]	; (1000e578 <getchar_b11_timeout+0x54>)
1000e53a:	4b10      	ldr	r3, [pc, #64]	; (1000e57c <getchar_b11_timeout+0x58>)
1000e53c:	4798      	blx	r3

	_time_start(sec);
1000e53e:	0020      	movs	r0, r4
1000e540:	4b0f      	ldr	r3, [pc, #60]	; (1000e580 <getchar_b11_timeout+0x5c>)
1000e542:	4798      	blx	r3
	
	string_input[0] = 0;
1000e544:	490f      	ldr	r1, [pc, #60]	; (1000e584 <getchar_b11_timeout+0x60>)
1000e546:	2300      	movs	r3, #0
1000e548:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e54a:	2201      	movs	r2, #1
1000e54c:	480a      	ldr	r0, [pc, #40]	; (1000e578 <getchar_b11_timeout+0x54>)
1000e54e:	4b0e      	ldr	r3, [pc, #56]	; (1000e588 <getchar_b11_timeout+0x64>)
1000e550:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000e552:	4c07      	ldr	r4, [pc, #28]	; (1000e570 <getchar_b11_timeout+0x4c>)
1000e554:	4d0d      	ldr	r5, [pc, #52]	; (1000e58c <getchar_b11_timeout+0x68>)
1000e556:	7823      	ldrb	r3, [r4, #0]
1000e558:	2b02      	cmp	r3, #2
1000e55a:	d002      	beq.n	1000e562 <getchar_b11_timeout+0x3e>
1000e55c:	47a8      	blx	r5
1000e55e:	2800      	cmp	r0, #0
1000e560:	d1f9      	bne.n	1000e556 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000e562:	2200      	movs	r2, #0
1000e564:	4b02      	ldr	r3, [pc, #8]	; (1000e570 <getchar_b11_timeout+0x4c>)
1000e566:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000e568:	4b06      	ldr	r3, [pc, #24]	; (1000e584 <getchar_b11_timeout+0x60>)
1000e56a:	7818      	ldrb	r0, [r3, #0]
}
1000e56c:	bd70      	pop	{r4, r5, r6, pc}
1000e56e:	46c0      	nop			; (mov r8, r8)
1000e570:	1001864c 	.word	0x1001864c
1000e574:	10018654 	.word	0x10018654
1000e578:	10019300 	.word	0x10019300
1000e57c:	1000d0f9 	.word	0x1000d0f9
1000e580:	1000e4bd 	.word	0x1000e4bd
1000e584:	10018650 	.word	0x10018650
1000e588:	1000d0bd 	.word	0x1000d0bd
1000e58c:	1000e515 	.word	0x1000e515

1000e590 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000e590:	4b02      	ldr	r3, [pc, #8]	; (1000e59c <platform_event_free+0xc>)
1000e592:	681a      	ldr	r2, [r3, #0]
1000e594:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000e596:	6018      	str	r0, [r3, #0]
}
1000e598:	4770      	bx	lr
1000e59a:	46c0      	nop			; (mov r8, r8)
1000e59c:	1001865c 	.word	0x1001865c

1000e5a0 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000e5a0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000e5a2:	4b0b      	ldr	r3, [pc, #44]	; (1000e5d0 <platform_event_post+0x30>)
1000e5a4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000e5a6:	2c00      	cmp	r4, #0
1000e5a8:	d011      	beq.n	1000e5ce <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000e5aa:	6825      	ldr	r5, [r4, #0]
1000e5ac:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000e5ae:	2300      	movs	r3, #0
1000e5b0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000e5b2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000e5b4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000e5b6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000e5b8:	4b06      	ldr	r3, [pc, #24]	; (1000e5d4 <platform_event_post+0x34>)
1000e5ba:	681a      	ldr	r2, [r3, #0]
1000e5bc:	2a00      	cmp	r2, #0
1000e5be:	d102      	bne.n	1000e5c6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000e5c0:	601c      	str	r4, [r3, #0]
1000e5c2:	e004      	b.n	1000e5ce <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000e5c4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000e5c6:	6813      	ldr	r3, [r2, #0]
1000e5c8:	2b00      	cmp	r3, #0
1000e5ca:	d1fb      	bne.n	1000e5c4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000e5cc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000e5ce:	bd30      	pop	{r4, r5, pc}
1000e5d0:	1001865c 	.word	0x1001865c
1000e5d4:	10018658 	.word	0x10018658

1000e5d8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000e5d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000e5da:	2300      	movs	r3, #0
1000e5dc:	4a06      	ldr	r2, [pc, #24]	; (1000e5f8 <platform_event_init+0x20>)
1000e5de:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000e5e0:	4a06      	ldr	r2, [pc, #24]	; (1000e5fc <platform_event_init+0x24>)
1000e5e2:	6013      	str	r3, [r2, #0]
1000e5e4:	4c06      	ldr	r4, [pc, #24]	; (1000e600 <platform_event_init+0x28>)
1000e5e6:	0026      	movs	r6, r4
1000e5e8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000e5ea:	4d06      	ldr	r5, [pc, #24]	; (1000e604 <platform_event_init+0x2c>)
1000e5ec:	0020      	movs	r0, r4
1000e5ee:	47a8      	blx	r5
1000e5f0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000e5f2:	42b4      	cmp	r4, r6
1000e5f4:	d1fa      	bne.n	1000e5ec <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000e5f6:	bd70      	pop	{r4, r5, r6, pc}
1000e5f8:	1001865c 	.word	0x1001865c
1000e5fc:	10018658 	.word	0x10018658
1000e600:	10018660 	.word	0x10018660
1000e604:	1000e591 	.word	0x1000e591

1000e608 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000e608:	b570      	push	{r4, r5, r6, lr}
1000e60a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e60c:	4b13      	ldr	r3, [pc, #76]	; (1000e65c <at_ke_msg_send+0x54>)
1000e60e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000e610:	4b13      	ldr	r3, [pc, #76]	; (1000e660 <at_ke_msg_send+0x58>)
1000e612:	681b      	ldr	r3, [r3, #0]
1000e614:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000e616:	2c0c      	cmp	r4, #12
1000e618:	d01f      	beq.n	1000e65a <at_ke_msg_send+0x52>
1000e61a:	3c0c      	subs	r4, #12
1000e61c:	88e3      	ldrh	r3, [r4, #6]
1000e61e:	2b05      	cmp	r3, #5
1000e620:	d01b      	beq.n	1000e65a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000e622:	07eb      	lsls	r3, r5, #31
1000e624:	d414      	bmi.n	1000e650 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000e626:	4b0f      	ldr	r3, [pc, #60]	; (1000e664 <at_ke_msg_send+0x5c>)
1000e628:	681b      	ldr	r3, [r3, #0]
1000e62a:	2002      	movs	r0, #2
1000e62c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000e62e:	4b0e      	ldr	r3, [pc, #56]	; (1000e668 <at_ke_msg_send+0x60>)
1000e630:	681b      	ldr	r3, [r3, #0]
1000e632:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000e634:	4c0d      	ldr	r4, [pc, #52]	; (1000e66c <at_ke_msg_send+0x64>)
1000e636:	2003      	movs	r0, #3
1000e638:	6823      	ldr	r3, [r4, #0]
1000e63a:	4798      	blx	r3
1000e63c:	2800      	cmp	r0, #0
1000e63e:	d1fa      	bne.n	1000e636 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000e640:	4b0b      	ldr	r3, [pc, #44]	; (1000e670 <at_ke_msg_send+0x68>)
1000e642:	681b      	ldr	r3, [r3, #0]
1000e644:	3002      	adds	r0, #2
1000e646:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000e648:	2201      	movs	r2, #1
1000e64a:	4b0a      	ldr	r3, [pc, #40]	; (1000e674 <at_ke_msg_send+0x6c>)
1000e64c:	601a      	str	r2, [r3, #0]
1000e64e:	e004      	b.n	1000e65a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000e650:	4b09      	ldr	r3, [pc, #36]	; (1000e678 <at_ke_msg_send+0x70>)
1000e652:	6818      	ldr	r0, [r3, #0]
1000e654:	4b09      	ldr	r3, [pc, #36]	; (1000e67c <at_ke_msg_send+0x74>)
1000e656:	681b      	ldr	r3, [r3, #0]
1000e658:	4798      	blx	r3
		}
	}
}
1000e65a:	bd70      	pop	{r4, r5, r6, pc}
1000e65c:	4000b1ec 	.word	0x4000b1ec
1000e660:	10018708 	.word	0x10018708
1000e664:	10018700 	.word	0x10018700
1000e668:	10018714 	.word	0x10018714
1000e66c:	100186e8 	.word	0x100186e8
1000e670:	100186f0 	.word	0x100186f0
1000e674:	4000b020 	.word	0x4000b020
1000e678:	100186f4 	.word	0x100186f4
1000e67c:	100186e4 	.word	0x100186e4

1000e680 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000e680:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000e682:	4b06      	ldr	r3, [pc, #24]	; (1000e69c <samb11_plf_resume_callback+0x1c>)
1000e684:	4a06      	ldr	r2, [pc, #24]	; (1000e6a0 <samb11_plf_resume_callback+0x20>)
1000e686:	6819      	ldr	r1, [r3, #0]
1000e688:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000e68a:	685a      	ldr	r2, [r3, #4]
1000e68c:	4b05      	ldr	r3, [pc, #20]	; (1000e6a4 <samb11_plf_resume_callback+0x24>)
1000e68e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000e690:	4b05      	ldr	r3, [pc, #20]	; (1000e6a8 <samb11_plf_resume_callback+0x28>)
1000e692:	681b      	ldr	r3, [r3, #0]
1000e694:	2b00      	cmp	r3, #0
1000e696:	d000      	beq.n	1000e69a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000e698:	4798      	blx	r3
	}
}
1000e69a:	bd10      	pop	{r4, pc}
1000e69c:	1001934c 	.word	0x1001934c
1000e6a0:	4000b00c 	.word	0x4000b00c
1000e6a4:	4000b010 	.word	0x4000b010
1000e6a8:	10019628 	.word	0x10019628

1000e6ac <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e6ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e6ae:	2232      	movs	r2, #50	; 0x32
1000e6b0:	2100      	movs	r1, #0
1000e6b2:	480d      	ldr	r0, [pc, #52]	; (1000e6e8 <init_port_list+0x3c>)
1000e6b4:	4b0d      	ldr	r3, [pc, #52]	; (1000e6ec <init_port_list+0x40>)
1000e6b6:	4798      	blx	r3
1000e6b8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e6ba:	480b      	ldr	r0, [pc, #44]	; (1000e6e8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000e6bc:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000e6be:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e6c0:	004a      	lsls	r2, r1, #1
1000e6c2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000e6c4:	1882      	adds	r2, r0, r2
1000e6c6:	7853      	ldrb	r3, [r2, #1]
1000e6c8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000e6ca:	b2db      	uxtb	r3, r3
1000e6cc:	43a3      	bics	r3, r4
1000e6ce:	7053      	strb	r3, [r2, #1]
1000e6d0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e6d2:	2919      	cmp	r1, #25
1000e6d4:	d1f4      	bne.n	1000e6c0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e6d6:	4b04      	ldr	r3, [pc, #16]	; (1000e6e8 <init_port_list+0x3c>)
1000e6d8:	785a      	ldrb	r2, [r3, #1]
1000e6da:	3918      	subs	r1, #24
1000e6dc:	438a      	bics	r2, r1
1000e6de:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e6e0:	78da      	ldrb	r2, [r3, #3]
1000e6e2:	438a      	bics	r2, r1
1000e6e4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000e6e6:	bd70      	pop	{r4, r5, r6, pc}
1000e6e8:	10019368 	.word	0x10019368
1000e6ec:	100143c9 	.word	0x100143c9

1000e6f0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e6f0:	4a06      	ldr	r2, [pc, #24]	; (1000e70c <init_clock+0x1c>)
1000e6f2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e6f4:	4b06      	ldr	r3, [pc, #24]	; (1000e710 <init_clock+0x20>)
1000e6f6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e6f8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000e6fa:	4a06      	ldr	r2, [pc, #24]	; (1000e714 <init_clock+0x24>)
1000e6fc:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e6fe:	4906      	ldr	r1, [pc, #24]	; (1000e718 <init_clock+0x28>)
1000e700:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e702:	4b06      	ldr	r3, [pc, #24]	; (1000e71c <init_clock+0x2c>)
1000e704:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e706:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000e708:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000e70a:	4770      	bx	lr
1000e70c:	4000b00c 	.word	0x4000b00c
1000e710:	fffe0fd3 	.word	0xfffe0fd3
1000e714:	1001934c 	.word	0x1001934c
1000e718:	4000b010 	.word	0x4000b010
1000e71c:	ffffe7c0 	.word	0xffffe7c0

1000e720 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e720:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e722:	4657      	mov	r7, sl
1000e724:	464e      	mov	r6, r9
1000e726:	4645      	mov	r5, r8
1000e728:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e72a:	4b4f      	ldr	r3, [pc, #316]	; (1000e868 <platform_driver_init+0x148>)
1000e72c:	781b      	ldrb	r3, [r3, #0]
1000e72e:	2b00      	cmp	r3, #0
1000e730:	d004      	beq.n	1000e73c <platform_driver_init+0x1c>
1000e732:	4b4d      	ldr	r3, [pc, #308]	; (1000e868 <platform_driver_init+0x148>)
1000e734:	781b      	ldrb	r3, [r3, #0]
1000e736:	2b01      	cmp	r3, #1
1000e738:	d100      	bne.n	1000e73c <platform_driver_init+0x1c>
1000e73a:	e08c      	b.n	1000e856 <platform_driver_init+0x136>
		init_port_list();
1000e73c:	4b4b      	ldr	r3, [pc, #300]	; (1000e86c <platform_driver_init+0x14c>)
1000e73e:	4798      	blx	r3
		init_clock();
1000e740:	4b4b      	ldr	r3, [pc, #300]	; (1000e870 <platform_driver_init+0x150>)
1000e742:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e744:	2300      	movs	r3, #0
1000e746:	4698      	mov	r8, r3
1000e748:	4b4a      	ldr	r3, [pc, #296]	; (1000e874 <platform_driver_init+0x154>)
1000e74a:	4642      	mov	r2, r8
1000e74c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e74e:	4c4a      	ldr	r4, [pc, #296]	; (1000e878 <platform_driver_init+0x158>)
1000e750:	2380      	movs	r3, #128	; 0x80
1000e752:	2280      	movs	r2, #128	; 0x80
1000e754:	0412      	lsls	r2, r2, #16
1000e756:	4692      	mov	sl, r2
1000e758:	50e2      	str	r2, [r4, r3]
1000e75a:	2280      	movs	r2, #128	; 0x80
1000e75c:	0452      	lsls	r2, r2, #17
1000e75e:	4691      	mov	r9, r2
1000e760:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e762:	4d46      	ldr	r5, [pc, #280]	; (1000e87c <platform_driver_init+0x15c>)
1000e764:	4b46      	ldr	r3, [pc, #280]	; (1000e880 <platform_driver_init+0x160>)
1000e766:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e768:	4b46      	ldr	r3, [pc, #280]	; (1000e884 <platform_driver_init+0x164>)
1000e76a:	4a47      	ldr	r2, [pc, #284]	; (1000e888 <platform_driver_init+0x168>)
1000e76c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e76e:	4947      	ldr	r1, [pc, #284]	; (1000e88c <platform_driver_init+0x16c>)
1000e770:	4a47      	ldr	r2, [pc, #284]	; (1000e890 <platform_driver_init+0x170>)
1000e772:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e774:	4a47      	ldr	r2, [pc, #284]	; (1000e894 <platform_driver_init+0x174>)
1000e776:	6811      	ldr	r1, [r2, #0]
1000e778:	4a47      	ldr	r2, [pc, #284]	; (1000e898 <platform_driver_init+0x178>)
1000e77a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e77c:	4a47      	ldr	r2, [pc, #284]	; (1000e89c <platform_driver_init+0x17c>)
1000e77e:	6811      	ldr	r1, [r2, #0]
1000e780:	4a47      	ldr	r2, [pc, #284]	; (1000e8a0 <platform_driver_init+0x180>)
1000e782:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e784:	4947      	ldr	r1, [pc, #284]	; (1000e8a4 <platform_driver_init+0x184>)
1000e786:	4a48      	ldr	r2, [pc, #288]	; (1000e8a8 <platform_driver_init+0x188>)
1000e788:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e78a:	4948      	ldr	r1, [pc, #288]	; (1000e8ac <platform_driver_init+0x18c>)
1000e78c:	4a48      	ldr	r2, [pc, #288]	; (1000e8b0 <platform_driver_init+0x190>)
1000e78e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e790:	4f48      	ldr	r7, [pc, #288]	; (1000e8b4 <platform_driver_init+0x194>)
1000e792:	4a49      	ldr	r2, [pc, #292]	; (1000e8b8 <platform_driver_init+0x198>)
1000e794:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e796:	4949      	ldr	r1, [pc, #292]	; (1000e8bc <platform_driver_init+0x19c>)
1000e798:	4a49      	ldr	r2, [pc, #292]	; (1000e8c0 <platform_driver_init+0x1a0>)
1000e79a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e79c:	4949      	ldr	r1, [pc, #292]	; (1000e8c4 <platform_driver_init+0x1a4>)
1000e79e:	4a4a      	ldr	r2, [pc, #296]	; (1000e8c8 <platform_driver_init+0x1a8>)
1000e7a0:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e7a2:	4e4a      	ldr	r6, [pc, #296]	; (1000e8cc <platform_driver_init+0x1ac>)
1000e7a4:	4a4a      	ldr	r2, [pc, #296]	; (1000e8d0 <platform_driver_init+0x1b0>)
1000e7a6:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e7a8:	494a      	ldr	r1, [pc, #296]	; (1000e8d4 <platform_driver_init+0x1b4>)
1000e7aa:	4a4b      	ldr	r2, [pc, #300]	; (1000e8d8 <platform_driver_init+0x1b8>)
1000e7ac:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e7ae:	494b      	ldr	r1, [pc, #300]	; (1000e8dc <platform_driver_init+0x1bc>)
1000e7b0:	4a4b      	ldr	r2, [pc, #300]	; (1000e8e0 <platform_driver_init+0x1c0>)
1000e7b2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e7b4:	494b      	ldr	r1, [pc, #300]	; (1000e8e4 <platform_driver_init+0x1c4>)
1000e7b6:	4a4c      	ldr	r2, [pc, #304]	; (1000e8e8 <platform_driver_init+0x1c8>)
1000e7b8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e7ba:	494c      	ldr	r1, [pc, #304]	; (1000e8ec <platform_driver_init+0x1cc>)
1000e7bc:	4a4c      	ldr	r2, [pc, #304]	; (1000e8f0 <platform_driver_init+0x1d0>)
1000e7be:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e7c0:	494c      	ldr	r1, [pc, #304]	; (1000e8f4 <platform_driver_init+0x1d4>)
1000e7c2:	4a4d      	ldr	r2, [pc, #308]	; (1000e8f8 <platform_driver_init+0x1d8>)
1000e7c4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e7c6:	2028      	movs	r0, #40	; 0x28
1000e7c8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e7ca:	494c      	ldr	r1, [pc, #304]	; (1000e8fc <platform_driver_init+0x1dc>)
1000e7cc:	2028      	movs	r0, #40	; 0x28
1000e7ce:	682b      	ldr	r3, [r5, #0]
1000e7d0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e7d2:	682b      	ldr	r3, [r5, #0]
1000e7d4:	494a      	ldr	r1, [pc, #296]	; (1000e900 <platform_driver_init+0x1e0>)
1000e7d6:	2027      	movs	r0, #39	; 0x27
1000e7d8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e7da:	4b4a      	ldr	r3, [pc, #296]	; (1000e904 <platform_driver_init+0x1e4>)
1000e7dc:	681a      	ldr	r2, [r3, #0]
1000e7de:	4b4a      	ldr	r3, [pc, #296]	; (1000e908 <platform_driver_init+0x1e8>)
1000e7e0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e7e2:	4a4a      	ldr	r2, [pc, #296]	; (1000e90c <platform_driver_init+0x1ec>)
1000e7e4:	4b4a      	ldr	r3, [pc, #296]	; (1000e910 <platform_driver_init+0x1f0>)
1000e7e6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e7e8:	4a4a      	ldr	r2, [pc, #296]	; (1000e914 <platform_driver_init+0x1f4>)
1000e7ea:	4b4b      	ldr	r3, [pc, #300]	; (1000e918 <platform_driver_init+0x1f8>)
1000e7ec:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e7ee:	4a4b      	ldr	r2, [pc, #300]	; (1000e91c <platform_driver_init+0x1fc>)
1000e7f0:	4b4b      	ldr	r3, [pc, #300]	; (1000e920 <platform_driver_init+0x200>)
1000e7f2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e7f4:	4a4b      	ldr	r2, [pc, #300]	; (1000e924 <platform_driver_init+0x204>)
1000e7f6:	4b4c      	ldr	r3, [pc, #304]	; (1000e928 <platform_driver_init+0x208>)
1000e7f8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e7fa:	4a4c      	ldr	r2, [pc, #304]	; (1000e92c <platform_driver_init+0x20c>)
1000e7fc:	4b4c      	ldr	r3, [pc, #304]	; (1000e930 <platform_driver_init+0x210>)
1000e7fe:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e800:	4a4c      	ldr	r2, [pc, #304]	; (1000e934 <platform_driver_init+0x214>)
1000e802:	4b4d      	ldr	r3, [pc, #308]	; (1000e938 <platform_driver_init+0x218>)
1000e804:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e806:	4a4d      	ldr	r2, [pc, #308]	; (1000e93c <platform_driver_init+0x21c>)
1000e808:	4b4d      	ldr	r3, [pc, #308]	; (1000e940 <platform_driver_init+0x220>)
1000e80a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e80c:	22a0      	movs	r2, #160	; 0xa0
1000e80e:	0092      	lsls	r2, r2, #2
1000e810:	2100      	movs	r1, #0
1000e812:	484c      	ldr	r0, [pc, #304]	; (1000e944 <platform_driver_init+0x224>)
1000e814:	4b4c      	ldr	r3, [pc, #304]	; (1000e948 <platform_driver_init+0x228>)
1000e816:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e818:	2280      	movs	r2, #128	; 0x80
1000e81a:	0092      	lsls	r2, r2, #2
1000e81c:	4b4b      	ldr	r3, [pc, #300]	; (1000e94c <platform_driver_init+0x22c>)
1000e81e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e820:	4b4b      	ldr	r3, [pc, #300]	; (1000e950 <platform_driver_init+0x230>)
1000e822:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e824:	4653      	mov	r3, sl
1000e826:	6023      	str	r3, [r4, #0]
1000e828:	464b      	mov	r3, r9
1000e82a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e82c:	4b49      	ldr	r3, [pc, #292]	; (1000e954 <platform_driver_init+0x234>)
1000e82e:	4642      	mov	r2, r8
1000e830:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e832:	683b      	ldr	r3, [r7, #0]
1000e834:	4a48      	ldr	r2, [pc, #288]	; (1000e958 <platform_driver_init+0x238>)
1000e836:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e838:	6833      	ldr	r3, [r6, #0]
1000e83a:	4a48      	ldr	r2, [pc, #288]	; (1000e95c <platform_driver_init+0x23c>)
1000e83c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e83e:	2000      	movs	r0, #0
1000e840:	4c47      	ldr	r4, [pc, #284]	; (1000e960 <platform_driver_init+0x240>)
1000e842:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e844:	2001      	movs	r0, #1
1000e846:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e848:	2002      	movs	r0, #2
1000e84a:	47a0      	blx	r4
		platform_initialized = 1;
1000e84c:	2201      	movs	r2, #1
1000e84e:	4b06      	ldr	r3, [pc, #24]	; (1000e868 <platform_driver_init+0x148>)
1000e850:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e852:	2000      	movs	r0, #0
1000e854:	e003      	b.n	1000e85e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e856:	2201      	movs	r2, #1
1000e858:	4b03      	ldr	r3, [pc, #12]	; (1000e868 <platform_driver_init+0x148>)
1000e85a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e85c:	2001      	movs	r0, #1
	}
	return status;
}
1000e85e:	bc1c      	pop	{r2, r3, r4}
1000e860:	4690      	mov	r8, r2
1000e862:	4699      	mov	r9, r3
1000e864:	46a2      	mov	sl, r4
1000e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e868:	100186ec 	.word	0x100186ec
1000e86c:	1000e6ad 	.word	0x1000e6ad
1000e870:	1000e6f1 	.word	0x1000e6f1
1000e874:	1001870c 	.word	0x1001870c
1000e878:	e000e100 	.word	0xe000e100
1000e87c:	1001961c 	.word	0x1001961c
1000e880:	000007d7 	.word	0x000007d7
1000e884:	000007bd 	.word	0x000007bd
1000e888:	10019358 	.word	0x10019358
1000e88c:	0001bc51 	.word	0x0001bc51
1000e890:	10019620 	.word	0x10019620
1000e894:	100400bc 	.word	0x100400bc
1000e898:	100186e0 	.word	0x100186e0
1000e89c:	100400b8 	.word	0x100400b8
1000e8a0:	100186dc 	.word	0x100186dc
1000e8a4:	0001b99f 	.word	0x0001b99f
1000e8a8:	10019354 	.word	0x10019354
1000e8ac:	0001b9db 	.word	0x0001b9db
1000e8b0:	10019360 	.word	0x10019360
1000e8b4:	10019630 	.word	0x10019630
1000e8b8:	1004003c 	.word	0x1004003c
1000e8bc:	10041fc0 	.word	0x10041fc0
1000e8c0:	10019364 	.word	0x10019364
1000e8c4:	10041fc4 	.word	0x10041fc4
1000e8c8:	1001962c 	.word	0x1001962c
1000e8cc:	10019624 	.word	0x10019624
1000e8d0:	10041fd4 	.word	0x10041fd4
1000e8d4:	10041fd8 	.word	0x10041fd8
1000e8d8:	1001935c 	.word	0x1001935c
1000e8dc:	0001cbe9 	.word	0x0001cbe9
1000e8e0:	10018700 	.word	0x10018700
1000e8e4:	0001cd8f 	.word	0x0001cd8f
1000e8e8:	100186f0 	.word	0x100186f0
1000e8ec:	0001cea3 	.word	0x0001cea3
1000e8f0:	10018714 	.word	0x10018714
1000e8f4:	0001cbcf 	.word	0x0001cbcf
1000e8f8:	100186e8 	.word	0x100186e8
1000e8fc:	1000eda9 	.word	0x1000eda9
1000e900:	1000ed3d 	.word	0x1000ed3d
1000e904:	100400e4 	.word	0x100400e4
1000e908:	10018708 	.word	0x10018708
1000e90c:	00019fe9 	.word	0x00019fe9
1000e910:	10018718 	.word	0x10018718
1000e914:	0001dbdd 	.word	0x0001dbdd
1000e918:	100186e4 	.word	0x100186e4
1000e91c:	0001dc5b 	.word	0x0001dc5b
1000e920:	100186f8 	.word	0x100186f8
1000e924:	100405ec 	.word	0x100405ec
1000e928:	100186f4 	.word	0x100186f4
1000e92c:	0001d5e3 	.word	0x0001d5e3
1000e930:	10018704 	.word	0x10018704
1000e934:	10040c20 	.word	0x10040c20
1000e938:	1001871c 	.word	0x1001871c
1000e93c:	00019f09 	.word	0x00019f09
1000e940:	100186d8 	.word	0x100186d8
1000e944:	1001939c 	.word	0x1001939c
1000e948:	100143c9 	.word	0x100143c9
1000e94c:	10019634 	.word	0x10019634
1000e950:	1000e5d9 	.word	0x1000e5d9
1000e954:	10019628 	.word	0x10019628
1000e958:	1000e681 	.word	0x1000e681
1000e95c:	1000ee05 	.word	0x1000ee05
1000e960:	1000eded 	.word	0x1000eded

1000e964 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e964:	4b04      	ldr	r3, [pc, #16]	; (1000e978 <platform_register_ble_msg_handler+0x14>)
1000e966:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e968:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e96a:	2a01      	cmp	r2, #1
1000e96c:	d102      	bne.n	1000e974 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e96e:	4b03      	ldr	r3, [pc, #12]	; (1000e97c <platform_register_ble_msg_handler+0x18>)
1000e970:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e972:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e974:	0018      	movs	r0, r3
1000e976:	4770      	bx	lr
1000e978:	100186ec 	.word	0x100186ec
1000e97c:	1001870c 	.word	0x1001870c

1000e980 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e980:	b570      	push	{r4, r5, r6, lr}
1000e982:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e984:	4b0e      	ldr	r3, [pc, #56]	; (1000e9c0 <platform_interface_send+0x40>)
1000e986:	681b      	ldr	r3, [r3, #0]
1000e988:	2b00      	cmp	r3, #0
1000e98a:	d002      	beq.n	1000e992 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e98c:	8840      	ldrh	r0, [r0, #2]
1000e98e:	4798      	blx	r3
1000e990:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e992:	88e3      	ldrh	r3, [r4, #6]
1000e994:	88a2      	ldrh	r2, [r4, #4]
1000e996:	8861      	ldrh	r1, [r4, #2]
1000e998:	8820      	ldrh	r0, [r4, #0]
1000e99a:	4d0a      	ldr	r5, [pc, #40]	; (1000e9c4 <platform_interface_send+0x44>)
1000e99c:	682d      	ldr	r5, [r5, #0]
1000e99e:	47a8      	blx	r5
1000e9a0:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e9a2:	88e2      	ldrh	r2, [r4, #6]
1000e9a4:	2a00      	cmp	r2, #0
1000e9a6:	d102      	bne.n	1000e9ae <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e9a8:	4b07      	ldr	r3, [pc, #28]	; (1000e9c8 <platform_interface_send+0x48>)
1000e9aa:	4798      	blx	r3
1000e9ac:	e006      	b.n	1000e9bc <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e9ae:	0021      	movs	r1, r4
1000e9b0:	3108      	adds	r1, #8
1000e9b2:	4b06      	ldr	r3, [pc, #24]	; (1000e9cc <platform_interface_send+0x4c>)
1000e9b4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e9b6:	0028      	movs	r0, r5
1000e9b8:	4b03      	ldr	r3, [pc, #12]	; (1000e9c8 <platform_interface_send+0x48>)
1000e9ba:	4798      	blx	r3
	}
}
1000e9bc:	bd70      	pop	{r4, r5, r6, pc}
1000e9be:	46c0      	nop			; (mov r8, r8)
1000e9c0:	100186e0 	.word	0x100186e0
1000e9c4:	10018718 	.word	0x10018718
1000e9c8:	1000e609 	.word	0x1000e609
1000e9cc:	100143b7 	.word	0x100143b7

1000e9d0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e9d0:	b570      	push	{r4, r5, r6, lr}
1000e9d2:	0015      	movs	r5, r2
1000e9d4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e9d6:	020a      	lsls	r2, r1, #8
1000e9d8:	4302      	orrs	r2, r0
1000e9da:	4b0a      	ldr	r3, [pc, #40]	; (1000ea04 <send_plf_int_msg_ind+0x34>)
1000e9dc:	681e      	ldr	r6, [r3, #0]
1000e9de:	0023      	movs	r3, r4
1000e9e0:	2105      	movs	r1, #5
1000e9e2:	20a0      	movs	r0, #160	; 0xa0
1000e9e4:	00c0      	lsls	r0, r0, #3
1000e9e6:	47b0      	blx	r6
1000e9e8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e9ea:	d00a      	beq.n	1000ea02 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e9ec:	2c00      	cmp	r4, #0
1000e9ee:	d005      	beq.n	1000e9fc <send_plf_int_msg_ind+0x2c>
1000e9f0:	2d00      	cmp	r5, #0
1000e9f2:	d003      	beq.n	1000e9fc <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e9f4:	0022      	movs	r2, r4
1000e9f6:	0029      	movs	r1, r5
1000e9f8:	4b03      	ldr	r3, [pc, #12]	; (1000ea08 <send_plf_int_msg_ind+0x38>)
1000e9fa:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e9fc:	0030      	movs	r0, r6
1000e9fe:	4b03      	ldr	r3, [pc, #12]	; (1000ea0c <send_plf_int_msg_ind+0x3c>)
1000ea00:	4798      	blx	r3
	}
}
1000ea02:	bd70      	pop	{r4, r5, r6, pc}
1000ea04:	10018718 	.word	0x10018718
1000ea08:	100143b7 	.word	0x100143b7
1000ea0c:	1000e609 	.word	0x1000e609

1000ea10 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea12:	465f      	mov	r7, fp
1000ea14:	4656      	mov	r6, sl
1000ea16:	464d      	mov	r5, r9
1000ea18:	4644      	mov	r4, r8
1000ea1a:	b4f0      	push	{r4, r5, r6, r7}
1000ea1c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ea1e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000ea20:	2300      	movs	r3, #0
1000ea22:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ea24:	1ce3      	adds	r3, r4, #3
1000ea26:	d81c      	bhi.n	1000ea62 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000ea28:	220d      	movs	r2, #13
1000ea2a:	2100      	movs	r1, #0
1000ea2c:	a802      	add	r0, sp, #8
1000ea2e:	4b82      	ldr	r3, [pc, #520]	; (1000ec38 <platform_event_wait+0x228>)
1000ea30:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ea32:	2333      	movs	r3, #51	; 0x33
1000ea34:	aa02      	add	r2, sp, #8
1000ea36:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ea38:	3b30      	subs	r3, #48	; 0x30
1000ea3a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ea3c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ea3e:	3302      	adds	r3, #2
1000ea40:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ea42:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000ea44:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000ea46:	0a23      	lsrs	r3, r4, #8
1000ea48:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000ea4a:	0c23      	lsrs	r3, r4, #16
1000ea4c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000ea4e:	0e24      	lsrs	r4, r4, #24
1000ea50:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000ea52:	2301      	movs	r3, #1
1000ea54:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ea56:	210d      	movs	r1, #13
1000ea58:	0010      	movs	r0, r2
1000ea5a:	4b78      	ldr	r3, [pc, #480]	; (1000ec3c <platform_event_wait+0x22c>)
1000ea5c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000ea5e:	2301      	movs	r3, #1
1000ea60:	4699      	mov	r9, r3
1000ea62:	2400      	movs	r4, #0
1000ea64:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000ea66:	4f76      	ldr	r7, [pc, #472]	; (1000ec40 <platform_event_wait+0x230>)
1000ea68:	4e76      	ldr	r6, [pc, #472]	; (1000ec44 <platform_event_wait+0x234>)
1000ea6a:	4977      	ldr	r1, [pc, #476]	; (1000ec48 <platform_event_wait+0x238>)
1000ea6c:	6838      	ldr	r0, [r7, #0]
1000ea6e:	6833      	ldr	r3, [r6, #0]
1000ea70:	4798      	blx	r3
1000ea72:	2800      	cmp	r0, #0
1000ea74:	d000      	beq.n	1000ea78 <platform_event_wait+0x68>
1000ea76:	e088      	b.n	1000eb8a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000ea78:	4b73      	ldr	r3, [pc, #460]	; (1000ec48 <platform_event_wait+0x238>)
1000ea7a:	681c      	ldr	r4, [r3, #0]
1000ea7c:	88a3      	ldrh	r3, [r4, #4]
1000ea7e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ea80:	23cd      	movs	r3, #205	; 0xcd
1000ea82:	009b      	lsls	r3, r3, #2
1000ea84:	459a      	cmp	sl, r3
1000ea86:	d100      	bne.n	1000ea8a <platform_event_wait+0x7a>
1000ea88:	e0c7      	b.n	1000ec1a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000ea8a:	8923      	ldrh	r3, [r4, #8]
1000ea8c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000ea8e:	8963      	ldrh	r3, [r4, #10]
1000ea90:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ea92:	464b      	mov	r3, r9
1000ea94:	2b00      	cmp	r3, #0
1000ea96:	d011      	beq.n	1000eabc <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ea98:	220d      	movs	r2, #13
1000ea9a:	2100      	movs	r1, #0
1000ea9c:	a802      	add	r0, sp, #8
1000ea9e:	4b66      	ldr	r3, [pc, #408]	; (1000ec38 <platform_event_wait+0x228>)
1000eaa0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000eaa2:	2333      	movs	r3, #51	; 0x33
1000eaa4:	aa02      	add	r2, sp, #8
1000eaa6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000eaa8:	3b30      	subs	r3, #48	; 0x30
1000eaaa:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000eaac:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000eaae:	3302      	adds	r3, #2
1000eab0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000eab2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000eab4:	210d      	movs	r1, #13
1000eab6:	0010      	movs	r0, r2
1000eab8:	4b60      	ldr	r3, [pc, #384]	; (1000ec3c <platform_event_wait+0x22c>)
1000eaba:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000eabc:	23a0      	movs	r3, #160	; 0xa0
1000eabe:	00db      	lsls	r3, r3, #3
1000eac0:	459a      	cmp	sl, r3
1000eac2:	d121      	bne.n	1000eb08 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000eac4:	4b61      	ldr	r3, [pc, #388]	; (1000ec4c <platform_event_wait+0x23c>)
1000eac6:	881b      	ldrh	r3, [r3, #0]
1000eac8:	4443      	add	r3, r8
1000eaca:	22a0      	movs	r2, #160	; 0xa0
1000eacc:	0092      	lsls	r2, r2, #2
1000eace:	4293      	cmp	r3, r2
1000ead0:	dd02      	ble.n	1000ead8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ead2:	3a80      	subs	r2, #128	; 0x80
1000ead4:	4b5d      	ldr	r3, [pc, #372]	; (1000ec4c <platform_event_wait+0x23c>)
1000ead6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ead8:	4b5c      	ldr	r3, [pc, #368]	; (1000ec4c <platform_event_wait+0x23c>)
1000eada:	469a      	mov	sl, r3
1000eadc:	881d      	ldrh	r5, [r3, #0]
1000eade:	4b5c      	ldr	r3, [pc, #368]	; (1000ec50 <platform_event_wait+0x240>)
1000eae0:	18ed      	adds	r5, r5, r3
1000eae2:	0021      	movs	r1, r4
1000eae4:	310c      	adds	r1, #12
1000eae6:	4642      	mov	r2, r8
1000eae8:	0028      	movs	r0, r5
1000eaea:	4b5a      	ldr	r3, [pc, #360]	; (1000ec54 <platform_event_wait+0x244>)
1000eaec:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000eaee:	4642      	mov	r2, r8
1000eaf0:	0029      	movs	r1, r5
1000eaf2:	4658      	mov	r0, fp
1000eaf4:	4b58      	ldr	r3, [pc, #352]	; (1000ec58 <platform_event_wait+0x248>)
1000eaf6:	4798      	blx	r3
				plf_event_buff_index += len;
1000eaf8:	4653      	mov	r3, sl
1000eafa:	881b      	ldrh	r3, [r3, #0]
1000eafc:	4443      	add	r3, r8
1000eafe:	4652      	mov	r2, sl
1000eb00:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000eb02:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000eb04:	2502      	movs	r5, #2
1000eb06:	e03a      	b.n	1000eb7e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000eb08:	4b54      	ldr	r3, [pc, #336]	; (1000ec5c <platform_event_wait+0x24c>)
1000eb0a:	681b      	ldr	r3, [r3, #0]
1000eb0c:	2b00      	cmp	r3, #0
1000eb0e:	d032      	beq.n	1000eb76 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000eb10:	4b4d      	ldr	r3, [pc, #308]	; (1000ec48 <platform_event_wait+0x238>)
1000eb12:	681a      	ldr	r2, [r3, #0]
1000eb14:	8893      	ldrh	r3, [r2, #4]
1000eb16:	21cd      	movs	r1, #205	; 0xcd
1000eb18:	0089      	lsls	r1, r1, #2
1000eb1a:	428b      	cmp	r3, r1
1000eb1c:	d104      	bne.n	1000eb28 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000eb1e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000eb20:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000eb22:	2b00      	cmp	r3, #0
1000eb24:	d02b      	beq.n	1000eb7e <platform_event_wait+0x16e>
1000eb26:	e028      	b.n	1000eb7a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000eb28:	4c4d      	ldr	r4, [pc, #308]	; (1000ec60 <platform_event_wait+0x250>)
1000eb2a:	4d49      	ldr	r5, [pc, #292]	; (1000ec50 <platform_event_wait+0x240>)
1000eb2c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000eb2e:	702b      	strb	r3, [r5, #0]
1000eb30:	0a1b      	lsrs	r3, r3, #8
1000eb32:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000eb34:	8910      	ldrh	r0, [r2, #8]
1000eb36:	4b4b      	ldr	r3, [pc, #300]	; (1000ec64 <platform_event_wait+0x254>)
1000eb38:	681b      	ldr	r3, [r3, #0]
1000eb3a:	4798      	blx	r3
1000eb3c:	7128      	strb	r0, [r5, #4]
1000eb3e:	0a00      	lsrs	r0, r0, #8
1000eb40:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000eb42:	6820      	ldr	r0, [r4, #0]
1000eb44:	4b40      	ldr	r3, [pc, #256]	; (1000ec48 <platform_event_wait+0x238>)
1000eb46:	681a      	ldr	r2, [r3, #0]
1000eb48:	88d2      	ldrh	r2, [r2, #6]
1000eb4a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000eb4c:	681d      	ldr	r5, [r3, #0]
1000eb4e:	896b      	ldrh	r3, [r5, #10]
1000eb50:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000eb52:	3008      	adds	r0, #8
1000eb54:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000eb56:	896a      	ldrh	r2, [r5, #10]
1000eb58:	2a00      	cmp	r2, #0
1000eb5a:	d003      	beq.n	1000eb64 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000eb5c:	0029      	movs	r1, r5
1000eb5e:	310c      	adds	r1, #12
1000eb60:	4b3c      	ldr	r3, [pc, #240]	; (1000ec54 <platform_event_wait+0x244>)
1000eb62:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000eb64:	8969      	ldrh	r1, [r5, #10]
1000eb66:	3108      	adds	r1, #8
1000eb68:	4b3c      	ldr	r3, [pc, #240]	; (1000ec5c <platform_event_wait+0x24c>)
1000eb6a:	681b      	ldr	r3, [r3, #0]
1000eb6c:	4838      	ldr	r0, [pc, #224]	; (1000ec50 <platform_event_wait+0x240>)
1000eb6e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000eb70:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000eb72:	2503      	movs	r5, #3
1000eb74:	e003      	b.n	1000eb7e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000eb76:	2400      	movs	r4, #0
1000eb78:	e001      	b.n	1000eb7e <platform_event_wait+0x16e>
1000eb7a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000eb7c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000eb7e:	4b32      	ldr	r3, [pc, #200]	; (1000ec48 <platform_event_wait+0x238>)
1000eb80:	6818      	ldr	r0, [r3, #0]
1000eb82:	4b39      	ldr	r3, [pc, #228]	; (1000ec68 <platform_event_wait+0x258>)
1000eb84:	681b      	ldr	r3, [r3, #0]
1000eb86:	4798      	blx	r3
1000eb88:	e000      	b.n	1000eb8c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000eb8a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000eb8c:	2c00      	cmp	r4, #0
1000eb8e:	d000      	beq.n	1000eb92 <platform_event_wait+0x182>
1000eb90:	e76b      	b.n	1000ea6a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000eb92:	464b      	mov	r3, r9
1000eb94:	2b00      	cmp	r3, #0
1000eb96:	d046      	beq.n	1000ec26 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000eb98:	4b29      	ldr	r3, [pc, #164]	; (1000ec40 <platform_event_wait+0x230>)
1000eb9a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000eb9c:	2e00      	cmp	r6, #0
1000eb9e:	d104      	bne.n	1000ebaa <platform_event_wait+0x19a>
1000eba0:	2300      	movs	r3, #0
1000eba2:	6a1c      	ldr	r4, [r3, #32]
1000eba4:	2c00      	cmp	r4, #0
1000eba6:	d131      	bne.n	1000ec0c <platform_event_wait+0x1fc>
1000eba8:	e03d      	b.n	1000ec26 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000ebaa:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000ebac:	2314      	movs	r3, #20
1000ebae:	469c      	mov	ip, r3
1000ebb0:	44b4      	add	ip, r6
1000ebb2:	4663      	mov	r3, ip
1000ebb4:	4660      	mov	r0, ip
1000ebb6:	9300      	str	r3, [sp, #0]
1000ebb8:	4b2c      	ldr	r3, [pc, #176]	; (1000ec6c <platform_event_wait+0x25c>)
1000ebba:	681b      	ldr	r3, [r3, #0]
1000ebbc:	4798      	blx	r3
	while(NULL != current)
1000ebbe:	2c00      	cmp	r4, #0
1000ebc0:	d01f      	beq.n	1000ec02 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000ebc2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ebc4:	23cd      	movs	r3, #205	; 0xcd
1000ebc6:	009b      	lsls	r3, r3, #2
1000ebc8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000ebca:	4b27      	ldr	r3, [pc, #156]	; (1000ec68 <platform_event_wait+0x258>)
1000ebcc:	469a      	mov	sl, r3
1000ebce:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ebd0:	6803      	ldr	r3, [r0, #0]
1000ebd2:	889b      	ldrh	r3, [r3, #4]
1000ebd4:	4543      	cmp	r3, r8
1000ebd6:	d110      	bne.n	1000ebfa <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000ebd8:	2f00      	cmp	r7, #0
1000ebda:	d006      	beq.n	1000ebea <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000ebdc:	6883      	ldr	r3, [r0, #8]
1000ebde:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000ebe0:	4653      	mov	r3, sl
1000ebe2:	681b      	ldr	r3, [r3, #0]
1000ebe4:	4798      	blx	r3
				current = prev->pstrNext;
1000ebe6:	68b8      	ldr	r0, [r7, #8]
1000ebe8:	e009      	b.n	1000ebfe <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000ebea:	6883      	ldr	r3, [r0, #8]
1000ebec:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000ebee:	4b1e      	ldr	r3, [pc, #120]	; (1000ec68 <platform_event_wait+0x258>)
1000ebf0:	681b      	ldr	r3, [r3, #0]
1000ebf2:	9301      	str	r3, [sp, #4]
1000ebf4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000ebf6:	6a30      	ldr	r0, [r6, #32]
1000ebf8:	e001      	b.n	1000ebfe <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000ebfa:	0007      	movs	r7, r0
1000ebfc:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000ebfe:	2800      	cmp	r0, #0
1000ec00:	d1e6      	bne.n	1000ebd0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000ec02:	4b1b      	ldr	r3, [pc, #108]	; (1000ec70 <platform_event_wait+0x260>)
1000ec04:	681b      	ldr	r3, [r3, #0]
1000ec06:	9800      	ldr	r0, [sp, #0]
1000ec08:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000ec0a:	e00c      	b.n	1000ec26 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000ec0c:	2314      	movs	r3, #20
1000ec0e:	9300      	str	r3, [sp, #0]
1000ec10:	4b16      	ldr	r3, [pc, #88]	; (1000ec6c <platform_event_wait+0x25c>)
1000ec12:	681b      	ldr	r3, [r3, #0]
1000ec14:	2014      	movs	r0, #20
1000ec16:	4798      	blx	r3
1000ec18:	e7d3      	b.n	1000ebc2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ec1a:	4b10      	ldr	r3, [pc, #64]	; (1000ec5c <platform_event_wait+0x24c>)
1000ec1c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ec1e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ec20:	2b00      	cmp	r3, #0
1000ec22:	d0ac      	beq.n	1000eb7e <platform_event_wait+0x16e>
1000ec24:	e77b      	b.n	1000eb1e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000ec26:	0028      	movs	r0, r5
1000ec28:	b007      	add	sp, #28
1000ec2a:	bc3c      	pop	{r2, r3, r4, r5}
1000ec2c:	4690      	mov	r8, r2
1000ec2e:	4699      	mov	r9, r3
1000ec30:	46a2      	mov	sl, r4
1000ec32:	46ab      	mov	fp, r5
1000ec34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec36:	46c0      	nop			; (mov r8, r8)
1000ec38:	100143c9 	.word	0x100143c9
1000ec3c:	1000e981 	.word	0x1000e981
1000ec40:	1001871c 	.word	0x1001871c
1000ec44:	10018704 	.word	0x10018704
1000ec48:	10018710 	.word	0x10018710
1000ec4c:	10019634 	.word	0x10019634
1000ec50:	1001939c 	.word	0x1001939c
1000ec54:	100143b7 	.word	0x100143b7
1000ec58:	1000e5a1 	.word	0x1000e5a1
1000ec5c:	1001870c 	.word	0x1001870c
1000ec60:	100186fc 	.word	0x100186fc
1000ec64:	100186dc 	.word	0x100186dc
1000ec68:	100186d8 	.word	0x100186d8
1000ec6c:	100186f8 	.word	0x100186f8
1000ec70:	100186e4 	.word	0x100186e4

1000ec74 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ec74:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ec76:	4b03      	ldr	r3, [pc, #12]	; (1000ec84 <acquire_sleep_lock+0x10>)
1000ec78:	681b      	ldr	r3, [r3, #0]
1000ec7a:	2080      	movs	r0, #128	; 0x80
1000ec7c:	0200      	lsls	r0, r0, #8
1000ec7e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ec80:	2008      	movs	r0, #8
1000ec82:	bd10      	pop	{r4, pc}
1000ec84:	10019354 	.word	0x10019354

1000ec88 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ec88:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ec8a:	4b03      	ldr	r3, [pc, #12]	; (1000ec98 <release_message_lock+0x10>)
1000ec8c:	681b      	ldr	r3, [r3, #0]
1000ec8e:	2080      	movs	r0, #128	; 0x80
1000ec90:	01c0      	lsls	r0, r0, #7
1000ec92:	4798      	blx	r3
	return status;
}
1000ec94:	2000      	movs	r0, #0
1000ec96:	bd10      	pop	{r4, pc}
1000ec98:	10019360 	.word	0x10019360

1000ec9c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ec9c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ec9e:	4c05      	ldr	r4, [pc, #20]	; (1000ecb4 <release_sleep_lock+0x18>)
1000eca0:	2080      	movs	r0, #128	; 0x80
1000eca2:	01c0      	lsls	r0, r0, #7
1000eca4:	6823      	ldr	r3, [r4, #0]
1000eca6:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000eca8:	6823      	ldr	r3, [r4, #0]
1000ecaa:	2080      	movs	r0, #128	; 0x80
1000ecac:	0200      	lsls	r0, r0, #8
1000ecae:	4798      	blx	r3
	return status;
}
1000ecb0:	2000      	movs	r0, #0
1000ecb2:	bd10      	pop	{r4, pc}
1000ecb4:	10019360 	.word	0x10019360

1000ecb8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000ecb8:	2800      	cmp	r0, #0
1000ecba:	d003      	beq.n	1000ecc4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000ecbc:	4b02      	ldr	r3, [pc, #8]	; (1000ecc8 <register_resume_callback+0x10>)
1000ecbe:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000ecc0:	2000      	movs	r0, #0
1000ecc2:	e000      	b.n	1000ecc6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000ecc4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000ecc6:	4770      	bx	lr
1000ecc8:	10019628 	.word	0x10019628

1000eccc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000eccc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ecce:	4a18      	ldr	r2, [pc, #96]	; (1000ed30 <gpio1_combined_isr_handler+0x64>)
1000ecd0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ecd2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ecd4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ecd6:	2180      	movs	r1, #128	; 0x80
1000ecd8:	0209      	lsls	r1, r1, #8
1000ecda:	4301      	orrs	r1, r0
1000ecdc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ecde:	0010      	movs	r0, r2
1000ece0:	4d14      	ldr	r5, [pc, #80]	; (1000ed34 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ece2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ece4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ece6:	05db      	lsls	r3, r3, #23
1000ece8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ecea:	d011      	beq.n	1000ed10 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ecec:	b2db      	uxtb	r3, r3
1000ecee:	4259      	negs	r1, r3
1000ecf0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000ecf2:	2b01      	cmp	r3, #1
1000ecf4:	d006      	beq.n	1000ed04 <gpio1_combined_isr_handler+0x38>
1000ecf6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000ecf8:	085b      	lsrs	r3, r3, #1
				index++;
1000ecfa:	3101      	adds	r1, #1
1000ecfc:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000ecfe:	2b01      	cmp	r3, #1
1000ed00:	d1fa      	bne.n	1000ecf8 <gpio1_combined_isr_handler+0x2c>
1000ed02:	e000      	b.n	1000ed06 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ed04:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ed06:	0023      	movs	r3, r4
1000ed08:	408b      	lsls	r3, r1
1000ed0a:	b29b      	uxth	r3, r3
1000ed0c:	8703      	strh	r3, [r0, #56]	; 0x38
1000ed0e:	e003      	b.n	1000ed18 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ed10:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ed12:	432b      	orrs	r3, r5
1000ed14:	b29b      	uxth	r3, r3
1000ed16:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000ed18:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ed1a:	05db      	lsls	r3, r3, #23
1000ed1c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ed1e:	d1e2      	bne.n	1000ece6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ed20:	2180      	movs	r1, #128	; 0x80
1000ed22:	0049      	lsls	r1, r1, #1
1000ed24:	3381      	adds	r3, #129	; 0x81
1000ed26:	33ff      	adds	r3, #255	; 0xff
1000ed28:	4a03      	ldr	r2, [pc, #12]	; (1000ed38 <gpio1_combined_isr_handler+0x6c>)
1000ed2a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000ed2c:	bd30      	pop	{r4, r5, pc}
1000ed2e:	46c0      	nop			; (mov r8, r8)
1000ed30:	40011000 	.word	0x40011000
1000ed34:	ffff8000 	.word	0xffff8000
1000ed38:	e000e100 	.word	0xe000e100

1000ed3c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000ed3c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000ed3e:	4a17      	ldr	r2, [pc, #92]	; (1000ed9c <gpio0_combined_isr_handler+0x60>)
1000ed40:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ed42:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ed44:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ed46:	2180      	movs	r1, #128	; 0x80
1000ed48:	0209      	lsls	r1, r1, #8
1000ed4a:	4301      	orrs	r1, r0
1000ed4c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ed4e:	0010      	movs	r0, r2
1000ed50:	4d13      	ldr	r5, [pc, #76]	; (1000eda0 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ed52:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ed54:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ed56:	05db      	lsls	r3, r3, #23
1000ed58:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ed5a:	d011      	beq.n	1000ed80 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000ed5c:	b2db      	uxtb	r3, r3
1000ed5e:	4259      	negs	r1, r3
1000ed60:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000ed62:	2b01      	cmp	r3, #1
1000ed64:	d006      	beq.n	1000ed74 <gpio0_combined_isr_handler+0x38>
1000ed66:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ed68:	085b      	lsrs	r3, r3, #1
				index++;
1000ed6a:	3101      	adds	r1, #1
1000ed6c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ed6e:	2b01      	cmp	r3, #1
1000ed70:	d1fa      	bne.n	1000ed68 <gpio0_combined_isr_handler+0x2c>
1000ed72:	e000      	b.n	1000ed76 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ed74:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ed76:	0023      	movs	r3, r4
1000ed78:	408b      	lsls	r3, r1
1000ed7a:	b29b      	uxth	r3, r3
1000ed7c:	8703      	strh	r3, [r0, #56]	; 0x38
1000ed7e:	e003      	b.n	1000ed88 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ed80:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ed82:	432b      	orrs	r3, r5
1000ed84:	b29b      	uxth	r3, r3
1000ed86:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ed88:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ed8a:	05db      	lsls	r3, r3, #23
1000ed8c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ed8e:	d1e2      	bne.n	1000ed56 <gpio0_combined_isr_handler+0x1a>
1000ed90:	2180      	movs	r1, #128	; 0x80
1000ed92:	3381      	adds	r3, #129	; 0x81
1000ed94:	33ff      	adds	r3, #255	; 0xff
1000ed96:	4a03      	ldr	r2, [pc, #12]	; (1000eda4 <gpio0_combined_isr_handler+0x68>)
1000ed98:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000ed9a:	bd30      	pop	{r4, r5, pc}
1000ed9c:	40010000 	.word	0x40010000
1000eda0:	ffff8000 	.word	0xffff8000
1000eda4:	e000e100 	.word	0xe000e100

1000eda8 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000eda8:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000edaa:	4b0c      	ldr	r3, [pc, #48]	; (1000eddc <PORT1_COMB_Handler+0x34>)
1000edac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000edae:	0b5b      	lsrs	r3, r3, #13
1000edb0:	d010      	beq.n	1000edd4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000edb2:	4b0b      	ldr	r3, [pc, #44]	; (1000ede0 <PORT1_COMB_Handler+0x38>)
1000edb4:	681b      	ldr	r3, [r3, #0]
1000edb6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000edb8:	4a08      	ldr	r2, [pc, #32]	; (1000eddc <PORT1_COMB_Handler+0x34>)
1000edba:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000edbc:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000edbe:	0b5b      	lsrs	r3, r3, #13
1000edc0:	035b      	lsls	r3, r3, #13
1000edc2:	430b      	orrs	r3, r1
1000edc4:	8713      	strh	r3, [r2, #56]	; 0x38
1000edc6:	2180      	movs	r1, #128	; 0x80
1000edc8:	0049      	lsls	r1, r1, #1
1000edca:	23c0      	movs	r3, #192	; 0xc0
1000edcc:	005b      	lsls	r3, r3, #1
1000edce:	4a05      	ldr	r2, [pc, #20]	; (1000ede4 <PORT1_COMB_Handler+0x3c>)
1000edd0:	50d1      	str	r1, [r2, r3]
1000edd2:	e001      	b.n	1000edd8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000edd4:	4b04      	ldr	r3, [pc, #16]	; (1000ede8 <PORT1_COMB_Handler+0x40>)
1000edd6:	4798      	blx	r3
	}
}
1000edd8:	bd10      	pop	{r4, pc}
1000edda:	46c0      	nop			; (mov r8, r8)
1000eddc:	40011000 	.word	0x40011000
1000ede0:	10019620 	.word	0x10019620
1000ede4:	e000e100 	.word	0xe000e100
1000ede8:	1000eccd 	.word	0x1000eccd

1000edec <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000edec:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000edee:	2802      	cmp	r0, #2
1000edf0:	d804      	bhi.n	1000edfc <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000edf2:	0080      	lsls	r0, r0, #2
1000edf4:	2200      	movs	r2, #0
1000edf6:	4b02      	ldr	r3, [pc, #8]	; (1000ee00 <wakeup_int_unregister_callback+0x14>)
1000edf8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000edfa:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000edfc:	0018      	movs	r0, r3
1000edfe:	4770      	bx	lr
1000ee00:	10019638 	.word	0x10019638

1000ee04 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000ee04:	b510      	push	{r4, lr}
1000ee06:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000ee08:	7803      	ldrb	r3, [r0, #0]
1000ee0a:	2b01      	cmp	r3, #1
1000ee0c:	d108      	bne.n	1000ee20 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000ee0e:	4b11      	ldr	r3, [pc, #68]	; (1000ee54 <wakeup_active_event_callback+0x50>)
1000ee10:	681b      	ldr	r3, [r3, #0]
1000ee12:	2b00      	cmp	r3, #0
1000ee14:	d000      	beq.n	1000ee18 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000ee16:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000ee18:	23ff      	movs	r3, #255	; 0xff
1000ee1a:	6822      	ldr	r2, [r4, #0]
1000ee1c:	439a      	bics	r2, r3
1000ee1e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000ee20:	7863      	ldrb	r3, [r4, #1]
1000ee22:	2b01      	cmp	r3, #1
1000ee24:	d108      	bne.n	1000ee38 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000ee26:	4b0b      	ldr	r3, [pc, #44]	; (1000ee54 <wakeup_active_event_callback+0x50>)
1000ee28:	685b      	ldr	r3, [r3, #4]
1000ee2a:	2b00      	cmp	r3, #0
1000ee2c:	d000      	beq.n	1000ee30 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000ee2e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000ee30:	4b09      	ldr	r3, [pc, #36]	; (1000ee58 <wakeup_active_event_callback+0x54>)
1000ee32:	6822      	ldr	r2, [r4, #0]
1000ee34:	4013      	ands	r3, r2
1000ee36:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000ee38:	78a3      	ldrb	r3, [r4, #2]
1000ee3a:	2b01      	cmp	r3, #1
1000ee3c:	d108      	bne.n	1000ee50 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000ee3e:	4b05      	ldr	r3, [pc, #20]	; (1000ee54 <wakeup_active_event_callback+0x50>)
1000ee40:	689b      	ldr	r3, [r3, #8]
1000ee42:	2b00      	cmp	r3, #0
1000ee44:	d000      	beq.n	1000ee48 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000ee46:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000ee48:	4b04      	ldr	r3, [pc, #16]	; (1000ee5c <wakeup_active_event_callback+0x58>)
1000ee4a:	6822      	ldr	r2, [r4, #0]
1000ee4c:	4013      	ands	r3, r2
1000ee4e:	6023      	str	r3, [r4, #0]
	}
}
1000ee50:	bd10      	pop	{r4, pc}
1000ee52:	46c0      	nop			; (mov r8, r8)
1000ee54:	10019638 	.word	0x10019638
1000ee58:	ffff00ff 	.word	0xffff00ff
1000ee5c:	ff00ffff 	.word	0xff00ffff

1000ee60 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000ee60:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000ee62:	4b09      	ldr	r3, [pc, #36]	; (1000ee88 <resume_cb+0x28>)
1000ee64:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000ee66:	4b09      	ldr	r3, [pc, #36]	; (1000ee8c <resume_cb+0x2c>)
1000ee68:	4798      	blx	r3
	sms_dualtimer_init();
1000ee6a:	4b09      	ldr	r3, [pc, #36]	; (1000ee90 <resume_cb+0x30>)
1000ee6c:	4798      	blx	r3
	delay_init();
1000ee6e:	4b09      	ldr	r3, [pc, #36]	; (1000ee94 <resume_cb+0x34>)
1000ee70:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000ee72:	4b09      	ldr	r3, [pc, #36]	; (1000ee98 <resume_cb+0x38>)
1000ee74:	4798      	blx	r3
	sms_led_gpio_init();
1000ee76:	4b09      	ldr	r3, [pc, #36]	; (1000ee9c <resume_cb+0x3c>)
1000ee78:	4798      	blx	r3
	sms_spi_master_configure();
1000ee7a:	4b09      	ldr	r3, [pc, #36]	; (1000eea0 <resume_cb+0x40>)
1000ee7c:	4798      	blx	r3
	sms_i2c_master_configure();
1000ee7e:	4b09      	ldr	r3, [pc, #36]	; (1000eea4 <resume_cb+0x44>)
1000ee80:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000ee82:	4b09      	ldr	r3, [pc, #36]	; (1000eea8 <resume_cb+0x48>)
1000ee84:	4798      	blx	r3
}
1000ee86:	bd10      	pop	{r4, pc}
1000ee88:	1000e6ad 	.word	0x1000e6ad
1000ee8c:	1000e415 	.word	0x1000e415
1000ee90:	1000b00d 	.word	0x1000b00d
1000ee94:	100080e9 	.word	0x100080e9
1000ee98:	1000a241 	.word	0x1000a241
1000ee9c:	1000a8f5 	.word	0x1000a8f5
1000eea0:	1000aec1 	.word	0x1000aec1
1000eea4:	1000a5d5 	.word	0x1000a5d5
1000eea8:	1000a535 	.word	0x1000a535

1000eeac <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000eeac:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000eeae:	2300      	movs	r3, #0
1000eeb0:	4a09      	ldr	r2, [pc, #36]	; (1000eed8 <sms_init_variables+0x2c>)
1000eeb2:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000eeb4:	4a09      	ldr	r2, [pc, #36]	; (1000eedc <sms_init_variables+0x30>)
1000eeb6:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000eeb8:	2101      	movs	r1, #1
1000eeba:	4a09      	ldr	r2, [pc, #36]	; (1000eee0 <sms_init_variables+0x34>)
1000eebc:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000eebe:	4a09      	ldr	r2, [pc, #36]	; (1000eee4 <sms_init_variables+0x38>)
1000eec0:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000eec2:	2201      	movs	r2, #1
1000eec4:	4252      	negs	r2, r2
1000eec6:	4b08      	ldr	r3, [pc, #32]	; (1000eee8 <sms_init_variables+0x3c>)
1000eec8:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000eeca:	4b08      	ldr	r3, [pc, #32]	; (1000eeec <sms_init_variables+0x40>)
1000eecc:	4798      	blx	r3
	sms_button_init_variables();
1000eece:	4b08      	ldr	r3, [pc, #32]	; (1000eef0 <sms_init_variables+0x44>)
1000eed0:	4798      	blx	r3
	sms_pressure_init_variables();
1000eed2:	4b08      	ldr	r3, [pc, #32]	; (1000eef4 <sms_init_variables+0x48>)
1000eed4:	4798      	blx	r3
}
1000eed6:	bd10      	pop	{r4, pc}
1000eed8:	100187f0 	.word	0x100187f0
1000eedc:	100189ab 	.word	0x100189ab
1000eee0:	10018884 	.word	0x10018884
1000eee4:	10018885 	.word	0x10018885
1000eee8:	10018880 	.word	0x10018880
1000eeec:	10009c2d 	.word	0x10009c2d
1000eef0:	1000a219 	.word	0x1000a219
1000eef4:	1000a991 	.word	0x1000a991

1000eef8 <main>:
}



int main(void)
{
1000eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000eefa:	2210      	movs	r2, #16
1000eefc:	4b8c      	ldr	r3, [pc, #560]	; (1000f130 <main+0x238>)
1000eefe:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000ef00:	4b8c      	ldr	r3, [pc, #560]	; (1000f134 <main+0x23c>)
1000ef02:	4798      	blx	r3
	gpio_init(); // GPIO
1000ef04:	4b8c      	ldr	r3, [pc, #560]	; (1000f138 <main+0x240>)
1000ef06:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000ef08:	4b8c      	ldr	r3, [pc, #560]	; (1000f13c <main+0x244>)
1000ef0a:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000ef0c:	4b8c      	ldr	r3, [pc, #560]	; (1000f140 <main+0x248>)
1000ef0e:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000ef10:	4b8c      	ldr	r3, [pc, #560]	; (1000f144 <main+0x24c>)
1000ef12:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000ef14:	4b8c      	ldr	r3, [pc, #560]	; (1000f148 <main+0x250>)
1000ef16:	4798      	blx	r3
	
	// Buttons
	//sms_button_gpio_init();
	
	// LED
	sms_led_gpio_init();
1000ef18:	4b8c      	ldr	r3, [pc, #560]	; (1000f14c <main+0x254>)
1000ef1a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000ef1c:	4b8c      	ldr	r3, [pc, #560]	; (1000f150 <main+0x258>)
1000ef1e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000ef20:	4b8c      	ldr	r3, [pc, #560]	; (1000f154 <main+0x25c>)
1000ef22:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000ef24:	4b8c      	ldr	r3, [pc, #560]	; (1000f158 <main+0x260>)
1000ef26:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000ef28:	4b8c      	ldr	r3, [pc, #560]	; (1000f15c <main+0x264>)
1000ef2a:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000ef2c:	2000      	movs	r0, #0
1000ef2e:	4b8c      	ldr	r3, [pc, #560]	; (1000f160 <main+0x268>)
1000ef30:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000ef32:	4b8c      	ldr	r3, [pc, #560]	; (1000f164 <main+0x26c>)
1000ef34:	4798      	blx	r3
	sms_pressure_define_services();
1000ef36:	4b8c      	ldr	r3, [pc, #560]	; (1000f168 <main+0x270>)
1000ef38:	4798      	blx	r3
	sms_mpu_define_services();
1000ef3a:	4b8c      	ldr	r3, [pc, #560]	; (1000f16c <main+0x274>)
1000ef3c:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000ef3e:	488c      	ldr	r0, [pc, #560]	; (1000f170 <main+0x278>)
1000ef40:	4b8c      	ldr	r3, [pc, #560]	; (1000f174 <main+0x27c>)
1000ef42:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000ef44:	498c      	ldr	r1, [pc, #560]	; (1000f178 <main+0x280>)
1000ef46:	2000      	movs	r0, #0
1000ef48:	4c8c      	ldr	r4, [pc, #560]	; (1000f17c <main+0x284>)
1000ef4a:	47a0      	blx	r4
	sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000ef4c:	498c      	ldr	r1, [pc, #560]	; (1000f180 <main+0x288>)
1000ef4e:	2001      	movs	r0, #1
1000ef50:	47a0      	blx	r4

	// Buttons
	sms_button_register_callbacks();
1000ef52:	4b8c      	ldr	r3, [pc, #560]	; (1000f184 <main+0x28c>)
1000ef54:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000ef56:	4b8c      	ldr	r3, [pc, #560]	; (1000f188 <main+0x290>)
1000ef58:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000ef5a:	4a8c      	ldr	r2, [pc, #560]	; (1000f18c <main+0x294>)
1000ef5c:	2100      	movs	r1, #0
1000ef5e:	2000      	movs	r0, #0
1000ef60:	4c8b      	ldr	r4, [pc, #556]	; (1000f190 <main+0x298>)
1000ef62:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000ef64:	4a8b      	ldr	r2, [pc, #556]	; (1000f194 <main+0x29c>)
1000ef66:	2102      	movs	r1, #2
1000ef68:	2000      	movs	r0, #0
1000ef6a:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000ef6c:	2100      	movs	r1, #0
1000ef6e:	2000      	movs	r0, #0
1000ef70:	4b89      	ldr	r3, [pc, #548]	; (1000f198 <main+0x2a0>)
1000ef72:	4798      	blx	r3


	sms_ble_startup();
1000ef74:	4b89      	ldr	r3, [pc, #548]	; (1000f19c <main+0x2a4>)
1000ef76:	4798      	blx	r3
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ef78:	4e89      	ldr	r6, [pc, #548]	; (1000f1a0 <main+0x2a8>)
1000ef7a:	4c8a      	ldr	r4, [pc, #552]	; (1000f1a4 <main+0x2ac>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000ef7c:	4d8a      	ldr	r5, [pc, #552]	; (1000f1a8 <main+0x2b0>)
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ef7e:	6830      	ldr	r0, [r6, #0]
1000ef80:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000ef82:	2800      	cmp	r0, #0
1000ef84:	d000      	beq.n	1000ef88 <main+0x90>
1000ef86:	e0b9      	b.n	1000f0fc <main+0x204>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000ef88:	4b88      	ldr	r3, [pc, #544]	; (1000f1ac <main+0x2b4>)
1000ef8a:	78db      	ldrb	r3, [r3, #3]
1000ef8c:	2b00      	cmp	r3, #0
1000ef8e:	d00b      	beq.n	1000efa8 <main+0xb0>
				DBG_LOG("Btn0 int... ");
1000ef90:	4885      	ldr	r0, [pc, #532]	; (1000f1a8 <main+0x2b0>)
1000ef92:	4b87      	ldr	r3, [pc, #540]	; (1000f1b0 <main+0x2b8>)
1000ef94:	4798      	blx	r3
1000ef96:	4887      	ldr	r0, [pc, #540]	; (1000f1b4 <main+0x2bc>)
1000ef98:	4b87      	ldr	r3, [pc, #540]	; (1000f1b8 <main+0x2c0>)
1000ef9a:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000ef9c:	2000      	movs	r0, #0
1000ef9e:	4b87      	ldr	r3, [pc, #540]	; (1000f1bc <main+0x2c4>)
1000efa0:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000efa2:	2200      	movs	r2, #0
1000efa4:	4b81      	ldr	r3, [pc, #516]	; (1000f1ac <main+0x2b4>)
1000efa6:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000efa8:	4b80      	ldr	r3, [pc, #512]	; (1000f1ac <main+0x2b4>)
1000efaa:	7a5b      	ldrb	r3, [r3, #9]
1000efac:	2b00      	cmp	r3, #0
1000efae:	d00b      	beq.n	1000efc8 <main+0xd0>
				DBG_LOG("Btn1 int... ");
1000efb0:	487d      	ldr	r0, [pc, #500]	; (1000f1a8 <main+0x2b0>)
1000efb2:	4b7f      	ldr	r3, [pc, #508]	; (1000f1b0 <main+0x2b8>)
1000efb4:	4798      	blx	r3
1000efb6:	4882      	ldr	r0, [pc, #520]	; (1000f1c0 <main+0x2c8>)
1000efb8:	4b7f      	ldr	r3, [pc, #508]	; (1000f1b8 <main+0x2c0>)
1000efba:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000efbc:	2001      	movs	r0, #1
1000efbe:	4b7f      	ldr	r3, [pc, #508]	; (1000f1bc <main+0x2c4>)
1000efc0:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000efc2:	2200      	movs	r2, #0
1000efc4:	4b79      	ldr	r3, [pc, #484]	; (1000f1ac <main+0x2b4>)
1000efc6:	725a      	strb	r2, [r3, #9]
			}
			if(mpu_device.new_int) {
1000efc8:	2329      	movs	r3, #41	; 0x29
1000efca:	4a7e      	ldr	r2, [pc, #504]	; (1000f1c4 <main+0x2cc>)
1000efcc:	5cd3      	ldrb	r3, [r2, r3]
1000efce:	2b00      	cmp	r3, #0
1000efd0:	d002      	beq.n	1000efd8 <main+0xe0>
				//DBG_LOG("MPU int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
				//sms_mpu_poll_data();
				mpu_device.new_int = false;
1000efd2:	2100      	movs	r1, #0
1000efd4:	2329      	movs	r3, #41	; 0x29
1000efd6:	54d1      	strb	r1, [r2, r3]
				//mpu_device.rts = true;
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000efd8:	2329      	movs	r3, #41	; 0x29
1000efda:	4a7b      	ldr	r2, [pc, #492]	; (1000f1c8 <main+0x2d0>)
1000efdc:	5cd3      	ldrb	r3, [r2, r3]
1000efde:	2b00      	cmp	r3, #0
1000efe0:	d018      	beq.n	1000f014 <main+0x11c>
				DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
1000efe2:	4871      	ldr	r0, [pc, #452]	; (1000f1a8 <main+0x2b0>)
1000efe4:	4b72      	ldr	r3, [pc, #456]	; (1000f1b0 <main+0x2b8>)
1000efe6:	4798      	blx	r3
1000efe8:	4b51      	ldr	r3, [pc, #324]	; (1000f130 <main+0x238>)
1000efea:	7859      	ldrb	r1, [r3, #1]
1000efec:	b2c9      	uxtb	r1, r1
1000efee:	4877      	ldr	r0, [pc, #476]	; (1000f1cc <main+0x2d4>)
1000eff0:	4b71      	ldr	r3, [pc, #452]	; (1000f1b8 <main+0x2c0>)
1000eff2:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000eff4:	2101      	movs	r1, #1
1000eff6:	200f      	movs	r0, #15
1000eff8:	4f75      	ldr	r7, [pc, #468]	; (1000f1d0 <main+0x2d8>)
1000effa:	47b8      	blx	r7
				sms_pressure_poll_data();
1000effc:	4b75      	ldr	r3, [pc, #468]	; (1000f1d4 <main+0x2dc>)
1000effe:	4798      	blx	r3
				pressure_device.new_int = false;
1000f000:	4b71      	ldr	r3, [pc, #452]	; (1000f1c8 <main+0x2d0>)
1000f002:	2100      	movs	r1, #0
1000f004:	2229      	movs	r2, #41	; 0x29
1000f006:	5499      	strb	r1, [r3, r2]
				pressure_device.rts = true;
1000f008:	3101      	adds	r1, #1
1000f00a:	3201      	adds	r2, #1
1000f00c:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000f00e:	2100      	movs	r1, #0
1000f010:	200f      	movs	r0, #15
1000f012:	47b8      	blx	r7
				DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000f014:	4b70      	ldr	r3, [pc, #448]	; (1000f1d8 <main+0x2e0>)
1000f016:	789b      	ldrb	r3, [r3, #2]
1000f018:	2b00      	cmp	r3, #0
1000f01a:	d00d      	beq.n	1000f038 <main+0x140>
				DBG_LOG("Timer1 int... ");
1000f01c:	4862      	ldr	r0, [pc, #392]	; (1000f1a8 <main+0x2b0>)
1000f01e:	4b64      	ldr	r3, [pc, #400]	; (1000f1b0 <main+0x2b8>)
1000f020:	4798      	blx	r3
1000f022:	486e      	ldr	r0, [pc, #440]	; (1000f1dc <main+0x2e4>)
1000f024:	4b64      	ldr	r3, [pc, #400]	; (1000f1b8 <main+0x2c0>)
1000f026:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f028:	2000      	movs	r0, #0
1000f02a:	4b6d      	ldr	r3, [pc, #436]	; (1000f1e0 <main+0x2e8>)
1000f02c:	4798      	blx	r3
				sms_dualtimer1_fn();
1000f02e:	4b6d      	ldr	r3, [pc, #436]	; (1000f1e4 <main+0x2ec>)
1000f030:	4798      	blx	r3
				timer1_instance.new_int = false;
1000f032:	2200      	movs	r2, #0
1000f034:	4b68      	ldr	r3, [pc, #416]	; (1000f1d8 <main+0x2e0>)
1000f036:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000f038:	4b6b      	ldr	r3, [pc, #428]	; (1000f1e8 <main+0x2f0>)
1000f03a:	789b      	ldrb	r3, [r3, #2]
1000f03c:	2b00      	cmp	r3, #0
1000f03e:	d00d      	beq.n	1000f05c <main+0x164>
				DBG_LOG("Timer2 int... ");
1000f040:	4859      	ldr	r0, [pc, #356]	; (1000f1a8 <main+0x2b0>)
1000f042:	4b5b      	ldr	r3, [pc, #364]	; (1000f1b0 <main+0x2b8>)
1000f044:	4798      	blx	r3
1000f046:	4869      	ldr	r0, [pc, #420]	; (1000f1ec <main+0x2f4>)
1000f048:	4b5b      	ldr	r3, [pc, #364]	; (1000f1b8 <main+0x2c0>)
1000f04a:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f04c:	2001      	movs	r0, #1
1000f04e:	4b64      	ldr	r3, [pc, #400]	; (1000f1e0 <main+0x2e8>)
1000f050:	4798      	blx	r3
				sms_dualtimer2_fn();
1000f052:	4b67      	ldr	r3, [pc, #412]	; (1000f1f0 <main+0x2f8>)
1000f054:	4798      	blx	r3
				timer2_instance.new_int = false;
1000f056:	2200      	movs	r2, #0
1000f058:	4b63      	ldr	r3, [pc, #396]	; (1000f1e8 <main+0x2f0>)
1000f05a:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(mpu_device.rts) {
1000f05c:	232e      	movs	r3, #46	; 0x2e
1000f05e:	4a59      	ldr	r2, [pc, #356]	; (1000f1c4 <main+0x2cc>)
1000f060:	5cd3      	ldrb	r3, [r2, r3]
1000f062:	2b00      	cmp	r3, #0
1000f064:	d021      	beq.n	1000f0aa <main+0x1b2>
				DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
1000f066:	4850      	ldr	r0, [pc, #320]	; (1000f1a8 <main+0x2b0>)
1000f068:	4b51      	ldr	r3, [pc, #324]	; (1000f1b0 <main+0x2b8>)
1000f06a:	4798      	blx	r3
1000f06c:	2329      	movs	r3, #41	; 0x29
1000f06e:	4a56      	ldr	r2, [pc, #344]	; (1000f1c8 <main+0x2d0>)
1000f070:	5cd1      	ldrb	r1, [r2, r3]
1000f072:	b2c9      	uxtb	r1, r1
1000f074:	4f2e      	ldr	r7, [pc, #184]	; (1000f130 <main+0x238>)
1000f076:	787a      	ldrb	r2, [r7, #1]
1000f078:	b2d2      	uxtb	r2, r2
1000f07a:	485e      	ldr	r0, [pc, #376]	; (1000f1f4 <main+0x2fc>)
1000f07c:	4b4e      	ldr	r3, [pc, #312]	; (1000f1b8 <main+0x2c0>)
1000f07e:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000f080:	2101      	movs	r1, #1
1000f082:	200f      	movs	r0, #15
1000f084:	4b52      	ldr	r3, [pc, #328]	; (1000f1d0 <main+0x2d8>)
1000f086:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000f088:	787b      	ldrb	r3, [r7, #1]
1000f08a:	2b00      	cmp	r3, #0
1000f08c:	d103      	bne.n	1000f096 <main+0x19e>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000f08e:	2002      	movs	r0, #2
1000f090:	4b59      	ldr	r3, [pc, #356]	; (1000f1f8 <main+0x300>)
1000f092:	4798      	blx	r3
1000f094:	e002      	b.n	1000f09c <main+0x1a4>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000f096:	4859      	ldr	r0, [pc, #356]	; (1000f1fc <main+0x304>)
1000f098:	4b47      	ldr	r3, [pc, #284]	; (1000f1b8 <main+0x2c0>)
1000f09a:	4798      	blx	r3
				}
				mpu_device.rts = false;
1000f09c:	2100      	movs	r1, #0
1000f09e:	232e      	movs	r3, #46	; 0x2e
1000f0a0:	4a48      	ldr	r2, [pc, #288]	; (1000f1c4 <main+0x2cc>)
1000f0a2:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000f0a4:	200f      	movs	r0, #15
1000f0a6:	4b4a      	ldr	r3, [pc, #296]	; (1000f1d0 <main+0x2d8>)
1000f0a8:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000f0aa:	232a      	movs	r3, #42	; 0x2a
1000f0ac:	4a46      	ldr	r2, [pc, #280]	; (1000f1c8 <main+0x2d0>)
1000f0ae:	5cd3      	ldrb	r3, [r2, r3]
1000f0b0:	2b00      	cmp	r3, #0
1000f0b2:	d100      	bne.n	1000f0b6 <main+0x1be>
1000f0b4:	e763      	b.n	1000ef7e <main+0x86>
				DBG_LOG("Press sending (%d/%d)... ", mpu_device.new_int, ble_instance.sending_queue);
1000f0b6:	483c      	ldr	r0, [pc, #240]	; (1000f1a8 <main+0x2b0>)
1000f0b8:	4b3d      	ldr	r3, [pc, #244]	; (1000f1b0 <main+0x2b8>)
1000f0ba:	4798      	blx	r3
1000f0bc:	2329      	movs	r3, #41	; 0x29
1000f0be:	4a41      	ldr	r2, [pc, #260]	; (1000f1c4 <main+0x2cc>)
1000f0c0:	5cd1      	ldrb	r1, [r2, r3]
1000f0c2:	b2c9      	uxtb	r1, r1
1000f0c4:	4f1a      	ldr	r7, [pc, #104]	; (1000f130 <main+0x238>)
1000f0c6:	787a      	ldrb	r2, [r7, #1]
1000f0c8:	b2d2      	uxtb	r2, r2
1000f0ca:	484d      	ldr	r0, [pc, #308]	; (1000f200 <main+0x308>)
1000f0cc:	4b3a      	ldr	r3, [pc, #232]	; (1000f1b8 <main+0x2c0>)
1000f0ce:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000f0d0:	2101      	movs	r1, #1
1000f0d2:	200f      	movs	r0, #15
1000f0d4:	4b3e      	ldr	r3, [pc, #248]	; (1000f1d0 <main+0x2d8>)
1000f0d6:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000f0d8:	787b      	ldrb	r3, [r7, #1]
1000f0da:	2b00      	cmp	r3, #0
1000f0dc:	d103      	bne.n	1000f0e6 <main+0x1ee>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000f0de:	2001      	movs	r0, #1
1000f0e0:	4b45      	ldr	r3, [pc, #276]	; (1000f1f8 <main+0x300>)
1000f0e2:	4798      	blx	r3
1000f0e4:	e002      	b.n	1000f0ec <main+0x1f4>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000f0e6:	4845      	ldr	r0, [pc, #276]	; (1000f1fc <main+0x304>)
1000f0e8:	4b33      	ldr	r3, [pc, #204]	; (1000f1b8 <main+0x2c0>)
1000f0ea:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000f0ec:	2100      	movs	r1, #0
1000f0ee:	232a      	movs	r3, #42	; 0x2a
1000f0f0:	4a35      	ldr	r2, [pc, #212]	; (1000f1c8 <main+0x2d0>)
1000f0f2:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000f0f4:	200f      	movs	r0, #15
1000f0f6:	4b36      	ldr	r3, [pc, #216]	; (1000f1d0 <main+0x2d8>)
1000f0f8:	4798      	blx	r3
1000f0fa:	e740      	b.n	1000ef7e <main+0x86>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000f0fc:	2845      	cmp	r0, #69	; 0x45
1000f0fe:	d106      	bne.n	1000f10e <main+0x216>
			DBG_LOG("GAP timeout");
1000f100:	4829      	ldr	r0, [pc, #164]	; (1000f1a8 <main+0x2b0>)
1000f102:	4b2b      	ldr	r3, [pc, #172]	; (1000f1b0 <main+0x2b8>)
1000f104:	4798      	blx	r3
1000f106:	483f      	ldr	r0, [pc, #252]	; (1000f204 <main+0x30c>)
1000f108:	4b2b      	ldr	r3, [pc, #172]	; (1000f1b8 <main+0x2c0>)
1000f10a:	4798      	blx	r3
1000f10c:	e737      	b.n	1000ef7e <main+0x86>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000f10e:	28d0      	cmp	r0, #208	; 0xd0
1000f110:	d106      	bne.n	1000f120 <main+0x228>
			DBG_LOG("Event get timeout");
1000f112:	4825      	ldr	r0, [pc, #148]	; (1000f1a8 <main+0x2b0>)
1000f114:	4b26      	ldr	r3, [pc, #152]	; (1000f1b0 <main+0x2b8>)
1000f116:	4798      	blx	r3
1000f118:	483b      	ldr	r0, [pc, #236]	; (1000f208 <main+0x310>)
1000f11a:	4b27      	ldr	r3, [pc, #156]	; (1000f1b8 <main+0x2c0>)
1000f11c:	4798      	blx	r3
1000f11e:	e72e      	b.n	1000ef7e <main+0x86>
		}
		else {
			DBG_LOG("BLE error occurred");
1000f120:	0028      	movs	r0, r5
1000f122:	4b23      	ldr	r3, [pc, #140]	; (1000f1b0 <main+0x2b8>)
1000f124:	4798      	blx	r3
1000f126:	4839      	ldr	r0, [pc, #228]	; (1000f20c <main+0x314>)
1000f128:	4b23      	ldr	r3, [pc, #140]	; (1000f1b8 <main+0x2c0>)
1000f12a:	4798      	blx	r3
1000f12c:	e727      	b.n	1000ef7e <main+0x86>
1000f12e:	46c0      	nop			; (mov r8, r8)
1000f130:	10018888 	.word	0x10018888
1000f134:	1000e721 	.word	0x1000e721
1000f138:	1000c04d 	.word	0x1000c04d
1000f13c:	1000e415 	.word	0x1000e415
1000f140:	1000ec75 	.word	0x1000ec75
1000f144:	1000eead 	.word	0x1000eead
1000f148:	1000b00d 	.word	0x1000b00d
1000f14c:	1000a8f5 	.word	0x1000a8f5
1000f150:	1000a5d5 	.word	0x1000a5d5
1000f154:	1000aec1 	.word	0x1000aec1
1000f158:	1000a769 	.word	0x1000a769
1000f15c:	1000a535 	.word	0x1000a535
1000f160:	1000db9d 	.word	0x1000db9d
1000f164:	1000a4e5 	.word	0x1000a4e5
1000f168:	1000ad31 	.word	0x1000ad31
1000f16c:	1000a885 	.word	0x1000a885
1000f170:	1000ee61 	.word	0x1000ee61
1000f174:	1000ecb9 	.word	0x1000ecb9
1000f178:	1000b0cd 	.word	0x1000b0cd
1000f17c:	1000b049 	.word	0x1000b049
1000f180:	1000b0ed 	.word	0x1000b0ed
1000f184:	1000a2f1 	.word	0x1000a2f1
1000f188:	1000a7b5 	.word	0x1000a7b5
1000f18c:	10015b98 	.word	0x10015b98
1000f190:	1000dacd 	.word	0x1000dacd
1000f194:	10015be4 	.word	0x10015be4
1000f198:	1000a49d 	.word	0x1000a49d
1000f19c:	10009c41 	.word	0x10009c41
1000f1a0:	10018880 	.word	0x10018880
1000f1a4:	1000e2a9 	.word	0x1000e2a9
1000f1a8:	100157dc 	.word	0x100157dc
1000f1ac:	1001888c 	.word	0x1001888c
1000f1b0:	10014631 	.word	0x10014631
1000f1b4:	100169c0 	.word	0x100169c0
1000f1b8:	10014511 	.word	0x10014511
1000f1bc:	1000a345 	.word	0x1000a345
1000f1c0:	100169d0 	.word	0x100169d0
1000f1c4:	100187f4 	.word	0x100187f4
1000f1c8:	10018910 	.word	0x10018910
1000f1cc:	100169e0 	.word	0x100169e0
1000f1d0:	1000bd0d 	.word	0x1000bd0d
1000f1d4:	1000acf1 	.word	0x1000acf1
1000f1d8:	100188fc 	.word	0x100188fc
1000f1dc:	100169f4 	.word	0x100169f4
1000f1e0:	1000b0c1 	.word	0x1000b0c1
1000f1e4:	1000b10d 	.word	0x1000b10d
1000f1e8:	100189a8 	.word	0x100189a8
1000f1ec:	10016a04 	.word	0x10016a04
1000f1f0:	1000b331 	.word	0x1000b331
1000f1f4:	10016a14 	.word	0x10016a14
1000f1f8:	10009ef5 	.word	0x10009ef5
1000f1fc:	10016a2c 	.word	0x10016a2c
1000f200:	10016a38 	.word	0x10016a38
1000f204:	10016a54 	.word	0x10016a54
1000f208:	10016a60 	.word	0x10016a60
1000f20c:	10016a74 	.word	0x10016a74

1000f210 <internal_event_post>:
1000f210:	b570      	push	{r4, r5, r6, lr}
1000f212:	4d12      	ldr	r5, [pc, #72]	; (1000f25c <internal_event_post+0x4c>)
1000f214:	682c      	ldr	r4, [r5, #0]
1000f216:	2c00      	cmp	r4, #0
1000f218:	d014      	beq.n	1000f244 <internal_event_post+0x34>
1000f21a:	6826      	ldr	r6, [r4, #0]
1000f21c:	60e2      	str	r2, [r4, #12]
1000f21e:	602e      	str	r6, [r5, #0]
1000f220:	2500      	movs	r5, #0
1000f222:	4a0f      	ldr	r2, [pc, #60]	; (1000f260 <internal_event_post+0x50>)
1000f224:	8123      	strh	r3, [r4, #8]
1000f226:	6813      	ldr	r3, [r2, #0]
1000f228:	6025      	str	r5, [r4, #0]
1000f22a:	80a0      	strh	r0, [r4, #4]
1000f22c:	80e1      	strh	r1, [r4, #6]
1000f22e:	42ab      	cmp	r3, r5
1000f230:	d101      	bne.n	1000f236 <internal_event_post+0x26>
1000f232:	6014      	str	r4, [r2, #0]
1000f234:	e011      	b.n	1000f25a <internal_event_post+0x4a>
1000f236:	681a      	ldr	r2, [r3, #0]
1000f238:	2a00      	cmp	r2, #0
1000f23a:	d001      	beq.n	1000f240 <internal_event_post+0x30>
1000f23c:	1c13      	adds	r3, r2, #0
1000f23e:	e7fa      	b.n	1000f236 <internal_event_post+0x26>
1000f240:	601c      	str	r4, [r3, #0]
1000f242:	e00a      	b.n	1000f25a <internal_event_post+0x4a>
1000f244:	b2c4      	uxtb	r4, r0
1000f246:	2c00      	cmp	r4, #0
1000f248:	d107      	bne.n	1000f25a <internal_event_post+0x4a>
1000f24a:	4c06      	ldr	r4, [pc, #24]	; (1000f264 <internal_event_post+0x54>)
1000f24c:	60e2      	str	r2, [r4, #12]
1000f24e:	2201      	movs	r2, #1
1000f250:	8123      	strh	r3, [r4, #8]
1000f252:	4b05      	ldr	r3, [pc, #20]	; (1000f268 <internal_event_post+0x58>)
1000f254:	80a0      	strh	r0, [r4, #4]
1000f256:	80e1      	strh	r1, [r4, #6]
1000f258:	701a      	strb	r2, [r3, #0]
1000f25a:	bd70      	pop	{r4, r5, r6, pc}
1000f25c:	10018738 	.word	0x10018738
1000f260:	10018734 	.word	0x10018734
1000f264:	10018720 	.word	0x10018720
1000f268:	10018730 	.word	0x10018730

1000f26c <internal_event_init>:
1000f26c:	b510      	push	{r4, lr}
1000f26e:	4b08      	ldr	r3, [pc, #32]	; (1000f290 <internal_event_init+0x24>)
1000f270:	0900      	lsrs	r0, r0, #4
1000f272:	0100      	lsls	r0, r0, #4
1000f274:	681a      	ldr	r2, [r3, #0]
1000f276:	1808      	adds	r0, r1, r0
1000f278:	4281      	cmp	r1, r0
1000f27a:	d003      	beq.n	1000f284 <internal_event_init+0x18>
1000f27c:	600a      	str	r2, [r1, #0]
1000f27e:	1c0a      	adds	r2, r1, #0
1000f280:	3110      	adds	r1, #16
1000f282:	e7f9      	b.n	1000f278 <internal_event_init+0xc>
1000f284:	601a      	str	r2, [r3, #0]
1000f286:	2200      	movs	r2, #0
1000f288:	4b02      	ldr	r3, [pc, #8]	; (1000f294 <internal_event_init+0x28>)
1000f28a:	601a      	str	r2, [r3, #0]
1000f28c:	bd10      	pop	{r4, pc}
1000f28e:	46c0      	nop			; (mov r8, r8)
1000f290:	10018738 	.word	0x10018738
1000f294:	10018734 	.word	0x10018734

1000f298 <special_events_handler>:
1000f298:	b538      	push	{r3, r4, r5, lr}
1000f29a:	4c1b      	ldr	r4, [pc, #108]	; (1000f308 <special_events_handler+0x70>)
1000f29c:	1c03      	adds	r3, r0, #0
1000f29e:	8825      	ldrh	r5, [r4, #0]
1000f2a0:	1c08      	adds	r0, r1, #0
1000f2a2:	1c21      	adds	r1, r4, #0
1000f2a4:	429d      	cmp	r5, r3
1000f2a6:	d107      	bne.n	1000f2b8 <special_events_handler+0x20>
1000f2a8:	88a5      	ldrh	r5, [r4, #4]
1000f2aa:	4285      	cmp	r5, r0
1000f2ac:	d104      	bne.n	1000f2b8 <special_events_handler+0x20>
1000f2ae:	2301      	movs	r3, #1
1000f2b0:	425b      	negs	r3, r3
1000f2b2:	8023      	strh	r3, [r4, #0]
1000f2b4:	60a2      	str	r2, [r4, #8]
1000f2b6:	e009      	b.n	1000f2cc <special_events_handler+0x34>
1000f2b8:	884c      	ldrh	r4, [r1, #2]
1000f2ba:	429c      	cmp	r4, r3
1000f2bc:	d10a      	bne.n	1000f2d4 <special_events_handler+0x3c>
1000f2be:	888c      	ldrh	r4, [r1, #4]
1000f2c0:	4284      	cmp	r4, r0
1000f2c2:	d107      	bne.n	1000f2d4 <special_events_handler+0x3c>
1000f2c4:	2301      	movs	r3, #1
1000f2c6:	425b      	negs	r3, r3
1000f2c8:	804b      	strh	r3, [r1, #2]
1000f2ca:	608a      	str	r2, [r1, #8]
1000f2cc:	4b0f      	ldr	r3, [pc, #60]	; (1000f30c <special_events_handler+0x74>)
1000f2ce:	4798      	blx	r3
1000f2d0:	2001      	movs	r0, #1
1000f2d2:	e017      	b.n	1000f304 <special_events_handler+0x6c>
1000f2d4:	490e      	ldr	r1, [pc, #56]	; (1000f310 <special_events_handler+0x78>)
1000f2d6:	428b      	cmp	r3, r1
1000f2d8:	d00e      	beq.n	1000f2f8 <special_events_handler+0x60>
1000f2da:	490e      	ldr	r1, [pc, #56]	; (1000f314 <special_events_handler+0x7c>)
1000f2dc:	428b      	cmp	r3, r1
1000f2de:	d007      	beq.n	1000f2f0 <special_events_handler+0x58>
1000f2e0:	490d      	ldr	r1, [pc, #52]	; (1000f318 <special_events_handler+0x80>)
1000f2e2:	2000      	movs	r0, #0
1000f2e4:	428b      	cmp	r3, r1
1000f2e6:	d10d      	bne.n	1000f304 <special_events_handler+0x6c>
1000f2e8:	1c10      	adds	r0, r2, #0
1000f2ea:	4b0c      	ldr	r3, [pc, #48]	; (1000f31c <special_events_handler+0x84>)
1000f2ec:	4798      	blx	r3
1000f2ee:	e7ef      	b.n	1000f2d0 <special_events_handler+0x38>
1000f2f0:	1c11      	adds	r1, r2, #0
1000f2f2:	4b0b      	ldr	r3, [pc, #44]	; (1000f320 <special_events_handler+0x88>)
1000f2f4:	2200      	movs	r2, #0
1000f2f6:	e002      	b.n	1000f2fe <special_events_handler+0x66>
1000f2f8:	1c11      	adds	r1, r2, #0
1000f2fa:	2200      	movs	r2, #0
1000f2fc:	4b09      	ldr	r3, [pc, #36]	; (1000f324 <special_events_handler+0x8c>)
1000f2fe:	4798      	blx	r3
1000f300:	4243      	negs	r3, r0
1000f302:	4158      	adcs	r0, r3
1000f304:	bd38      	pop	{r3, r4, r5, pc}
1000f306:	46c0      	nop			; (mov r8, r8)
1000f308:	10019644 	.word	0x10019644
1000f30c:	10010cf5 	.word	0x10010cf5
1000f310:	00000e13 	.word	0x00000e13
1000f314:	00000e15 	.word	0x00000e15
1000f318:	00000e01 	.word	0x00000e01
1000f31c:	10011065 	.word	0x10011065
1000f320:	10011225 	.word	0x10011225
1000f324:	100112fd 	.word	0x100112fd

1000f328 <at_ble_event_get>:
1000f328:	2300      	movs	r3, #0
1000f32a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f32c:	b087      	sub	sp, #28
1000f32e:	9204      	str	r2, [sp, #16]
1000f330:	7003      	strb	r3, [r0, #0]
1000f332:	9b04      	ldr	r3, [sp, #16]
1000f334:	9003      	str	r0, [sp, #12]
1000f336:	3b01      	subs	r3, #1
1000f338:	1c0d      	adds	r5, r1, #0
1000f33a:	9305      	str	r3, [sp, #20]
1000f33c:	3303      	adds	r3, #3
1000f33e:	d802      	bhi.n	1000f346 <at_ble_event_get+0x1e>
1000f340:	9804      	ldr	r0, [sp, #16]
1000f342:	4bae      	ldr	r3, [pc, #696]	; (1000f5fc <at_ble_event_get+0x2d4>)
1000f344:	4798      	blx	r3
1000f346:	9b05      	ldr	r3, [sp, #20]
1000f348:	4cad      	ldr	r4, [pc, #692]	; (1000f600 <at_ble_event_get+0x2d8>)
1000f34a:	3303      	adds	r3, #3
1000f34c:	d902      	bls.n	1000f354 <at_ble_event_get+0x2c>
1000f34e:	2300      	movs	r3, #0
1000f350:	9302      	str	r3, [sp, #8]
1000f352:	e015      	b.n	1000f380 <at_ble_event_get+0x58>
1000f354:	2300      	movs	r3, #0
1000f356:	9302      	str	r3, [sp, #8]
1000f358:	6823      	ldr	r3, [r4, #0]
1000f35a:	2b00      	cmp	r3, #0
1000f35c:	d113      	bne.n	1000f386 <at_ble_event_get+0x5e>
1000f35e:	9b02      	ldr	r3, [sp, #8]
1000f360:	2bd0      	cmp	r3, #208	; 0xd0
1000f362:	d100      	bne.n	1000f366 <at_ble_event_get+0x3e>
1000f364:	e2da      	b.n	1000f91c <at_ble_event_get+0x5f4>
1000f366:	9804      	ldr	r0, [sp, #16]
1000f368:	4ba6      	ldr	r3, [pc, #664]	; (1000f604 <at_ble_event_get+0x2dc>)
1000f36a:	4798      	blx	r3
1000f36c:	9002      	str	r0, [sp, #8]
1000f36e:	2802      	cmp	r0, #2
1000f370:	d1f2      	bne.n	1000f358 <at_ble_event_get+0x30>
1000f372:	e03f      	b.n	1000f3f4 <at_ble_event_get+0xcc>
1000f374:	9804      	ldr	r0, [sp, #16]
1000f376:	4ba3      	ldr	r3, [pc, #652]	; (1000f604 <at_ble_event_get+0x2dc>)
1000f378:	4798      	blx	r3
1000f37a:	9002      	str	r0, [sp, #8]
1000f37c:	2802      	cmp	r0, #2
1000f37e:	d039      	beq.n	1000f3f4 <at_ble_event_get+0xcc>
1000f380:	6823      	ldr	r3, [r4, #0]
1000f382:	2b00      	cmp	r3, #0
1000f384:	d0f6      	beq.n	1000f374 <at_ble_event_get+0x4c>
1000f386:	9b02      	ldr	r3, [sp, #8]
1000f388:	2bd0      	cmp	r3, #208	; 0xd0
1000f38a:	d100      	bne.n	1000f38e <at_ble_event_get+0x66>
1000f38c:	e2c6      	b.n	1000f91c <at_ble_event_get+0x5f4>
1000f38e:	9b02      	ldr	r3, [sp, #8]
1000f390:	3b03      	subs	r3, #3
1000f392:	1e5a      	subs	r2, r3, #1
1000f394:	4193      	sbcs	r3, r2
1000f396:	9a02      	ldr	r2, [sp, #8]
1000f398:	425b      	negs	r3, r3
1000f39a:	401a      	ands	r2, r3
1000f39c:	6823      	ldr	r3, [r4, #0]
1000f39e:	9202      	str	r2, [sp, #8]
1000f3a0:	2b00      	cmp	r3, #0
1000f3a2:	d100      	bne.n	1000f3a6 <at_ble_event_get+0x7e>
1000f3a4:	e2c2      	b.n	1000f92c <at_ble_event_get+0x604>
1000f3a6:	681a      	ldr	r2, [r3, #0]
1000f3a8:	68de      	ldr	r6, [r3, #12]
1000f3aa:	6022      	str	r2, [r4, #0]
1000f3ac:	88da      	ldrh	r2, [r3, #6]
1000f3ae:	9201      	str	r2, [sp, #4]
1000f3b0:	4a95      	ldr	r2, [pc, #596]	; (1000f608 <at_ble_event_get+0x2e0>)
1000f3b2:	889c      	ldrh	r4, [r3, #4]
1000f3b4:	6811      	ldr	r1, [r2, #0]
1000f3b6:	6013      	str	r3, [r2, #0]
1000f3b8:	6019      	str	r1, [r3, #0]
1000f3ba:	4b94      	ldr	r3, [pc, #592]	; (1000f60c <at_ble_event_get+0x2e4>)
1000f3bc:	781b      	ldrb	r3, [r3, #0]
1000f3be:	2b01      	cmp	r3, #1
1000f3c0:	d10f      	bne.n	1000f3e2 <at_ble_event_get+0xba>
1000f3c2:	4b93      	ldr	r3, [pc, #588]	; (1000f610 <at_ble_event_get+0x2e8>)
1000f3c4:	4a92      	ldr	r2, [pc, #584]	; (1000f610 <at_ble_event_get+0x2e8>)
1000f3c6:	8898      	ldrh	r0, [r3, #4]
1000f3c8:	88d9      	ldrh	r1, [r3, #6]
1000f3ca:	68d2      	ldr	r2, [r2, #12]
1000f3cc:	891b      	ldrh	r3, [r3, #8]
1000f3ce:	4f91      	ldr	r7, [pc, #580]	; (1000f614 <at_ble_event_get+0x2ec>)
1000f3d0:	47b8      	blx	r7
1000f3d2:	2210      	movs	r2, #16
1000f3d4:	4b90      	ldr	r3, [pc, #576]	; (1000f618 <at_ble_event_get+0x2f0>)
1000f3d6:	488e      	ldr	r0, [pc, #568]	; (1000f610 <at_ble_event_get+0x2e8>)
1000f3d8:	2100      	movs	r1, #0
1000f3da:	4798      	blx	r3
1000f3dc:	2300      	movs	r3, #0
1000f3de:	4a8b      	ldr	r2, [pc, #556]	; (1000f60c <at_ble_event_get+0x2e4>)
1000f3e0:	7013      	strb	r3, [r2, #0]
1000f3e2:	9b02      	ldr	r3, [sp, #8]
1000f3e4:	2b00      	cmp	r3, #0
1000f3e6:	d114      	bne.n	1000f412 <at_ble_event_get+0xea>
1000f3e8:	4b8c      	ldr	r3, [pc, #560]	; (1000f61c <at_ble_event_get+0x2f4>)
1000f3ea:	429c      	cmp	r4, r3
1000f3ec:	d009      	beq.n	1000f402 <at_ble_event_get+0xda>
1000f3ee:	4b8c      	ldr	r3, [pc, #560]	; (1000f620 <at_ble_event_get+0x2f8>)
1000f3f0:	429c      	cmp	r4, r3
1000f3f2:	d127      	bne.n	1000f444 <at_ble_event_get+0x11c>
1000f3f4:	233a      	movs	r3, #58	; 0x3a
1000f3f6:	9a03      	ldr	r2, [sp, #12]
1000f3f8:	7013      	strb	r3, [r2, #0]
1000f3fa:	2300      	movs	r3, #0
1000f3fc:	9302      	str	r3, [sp, #8]
1000f3fe:	1c1d      	adds	r5, r3, #0
1000f400:	e007      	b.n	1000f412 <at_ble_event_get+0xea>
1000f402:	9b01      	ldr	r3, [sp, #4]
1000f404:	42a3      	cmp	r3, r4
1000f406:	d000      	beq.n	1000f40a <at_ble_event_get+0xe2>
1000f408:	e28a      	b.n	1000f920 <at_ble_event_get+0x5f8>
1000f40a:	2338      	movs	r3, #56	; 0x38
1000f40c:	9a03      	ldr	r2, [sp, #12]
1000f40e:	7013      	strb	r3, [r2, #0]
1000f410:	602e      	str	r6, [r5, #0]
1000f412:	9b03      	ldr	r3, [sp, #12]
1000f414:	781b      	ldrb	r3, [r3, #0]
1000f416:	2b3b      	cmp	r3, #59	; 0x3b
1000f418:	d101      	bne.n	1000f41e <at_ble_event_get+0xf6>
1000f41a:	4b82      	ldr	r3, [pc, #520]	; (1000f624 <at_ble_event_get+0x2fc>)
1000f41c:	4798      	blx	r3
1000f41e:	9b03      	ldr	r3, [sp, #12]
1000f420:	781b      	ldrb	r3, [r3, #0]
1000f422:	2b3b      	cmp	r3, #59	; 0x3b
1000f424:	d003      	beq.n	1000f42e <at_ble_event_get+0x106>
1000f426:	9b05      	ldr	r3, [sp, #20]
1000f428:	3303      	adds	r3, #3
1000f42a:	d904      	bls.n	1000f436 <at_ble_event_get+0x10e>
1000f42c:	e283      	b.n	1000f936 <at_ble_event_get+0x60e>
1000f42e:	9b02      	ldr	r3, [sp, #8]
1000f430:	2b00      	cmp	r3, #0
1000f432:	d088      	beq.n	1000f346 <at_ble_event_get+0x1e>
1000f434:	e7f7      	b.n	1000f426 <at_ble_event_get+0xfe>
1000f436:	9b02      	ldr	r3, [sp, #8]
1000f438:	2bd0      	cmp	r3, #208	; 0xd0
1000f43a:	d100      	bne.n	1000f43e <at_ble_event_get+0x116>
1000f43c:	e27b      	b.n	1000f936 <at_ble_event_get+0x60e>
1000f43e:	4b7a      	ldr	r3, [pc, #488]	; (1000f628 <at_ble_event_get+0x300>)
1000f440:	4798      	blx	r3
1000f442:	e278      	b.n	1000f936 <at_ble_event_get+0x60e>
1000f444:	9b01      	ldr	r3, [sp, #4]
1000f446:	2bbb      	cmp	r3, #187	; 0xbb
1000f448:	d125      	bne.n	1000f496 <at_ble_event_get+0x16e>
1000f44a:	2cbb      	cmp	r4, #187	; 0xbb
1000f44c:	d123      	bne.n	1000f496 <at_ble_event_get+0x16e>
1000f44e:	466b      	mov	r3, sp
1000f450:	891b      	ldrh	r3, [r3, #8]
1000f452:	80ab      	strh	r3, [r5, #4]
1000f454:	78b3      	ldrb	r3, [r6, #2]
1000f456:	7872      	ldrb	r2, [r6, #1]
1000f458:	78f0      	ldrb	r0, [r6, #3]
1000f45a:	021b      	lsls	r3, r3, #8
1000f45c:	4313      	orrs	r3, r2
1000f45e:	7971      	ldrb	r1, [r6, #5]
1000f460:	7932      	ldrb	r2, [r6, #4]
1000f462:	70a8      	strb	r0, [r5, #2]
1000f464:	4871      	ldr	r0, [pc, #452]	; (1000f62c <at_ble_event_get+0x304>)
1000f466:	802b      	strh	r3, [r5, #0]
1000f468:	4283      	cmp	r3, r0
1000f46a:	d806      	bhi.n	1000f47a <at_ble_event_get+0x152>
1000f46c:	4a70      	ldr	r2, [pc, #448]	; (1000f630 <at_ble_event_get+0x308>)
1000f46e:	4293      	cmp	r3, r2
1000f470:	d20b      	bcs.n	1000f48a <at_ble_event_get+0x162>
1000f472:	4a70      	ldr	r2, [pc, #448]	; (1000f634 <at_ble_event_get+0x30c>)
1000f474:	4293      	cmp	r3, r2
1000f476:	d008      	beq.n	1000f48a <at_ble_event_get+0x162>
1000f478:	e009      	b.n	1000f48e <at_ble_event_get+0x166>
1000f47a:	486f      	ldr	r0, [pc, #444]	; (1000f638 <at_ble_event_get+0x310>)
1000f47c:	4283      	cmp	r3, r0
1000f47e:	d106      	bne.n	1000f48e <at_ble_event_get+0x166>
1000f480:	020b      	lsls	r3, r1, #8
1000f482:	4313      	orrs	r3, r2
1000f484:	80ab      	strh	r3, [r5, #4]
1000f486:	2337      	movs	r3, #55	; 0x37
1000f488:	e002      	b.n	1000f490 <at_ble_event_get+0x168>
1000f48a:	2336      	movs	r3, #54	; 0x36
1000f48c:	e000      	b.n	1000f490 <at_ble_event_get+0x168>
1000f48e:	2300      	movs	r3, #0
1000f490:	9a03      	ldr	r2, [sp, #12]
1000f492:	7013      	strb	r3, [r2, #0]
1000f494:	e7bd      	b.n	1000f412 <at_ble_event_get+0xea>
1000f496:	4b69      	ldr	r3, [pc, #420]	; (1000f63c <at_ble_event_get+0x314>)
1000f498:	429c      	cmp	r4, r3
1000f49a:	d100      	bne.n	1000f49e <at_ble_event_get+0x176>
1000f49c:	e144      	b.n	1000f728 <at_ble_event_get+0x400>
1000f49e:	d865      	bhi.n	1000f56c <at_ble_event_get+0x244>
1000f4a0:	4b67      	ldr	r3, [pc, #412]	; (1000f640 <at_ble_event_get+0x318>)
1000f4a2:	429c      	cmp	r4, r3
1000f4a4:	d100      	bne.n	1000f4a8 <at_ble_event_get+0x180>
1000f4a6:	e1d5      	b.n	1000f854 <at_ble_event_get+0x52c>
1000f4a8:	d82f      	bhi.n	1000f50a <at_ble_event_get+0x1e2>
1000f4aa:	4b66      	ldr	r3, [pc, #408]	; (1000f644 <at_ble_event_get+0x31c>)
1000f4ac:	429c      	cmp	r4, r3
1000f4ae:	d100      	bne.n	1000f4b2 <at_ble_event_get+0x18a>
1000f4b0:	e1e0      	b.n	1000f874 <at_ble_event_get+0x54c>
1000f4b2:	d813      	bhi.n	1000f4dc <at_ble_event_get+0x1b4>
1000f4b4:	4b64      	ldr	r3, [pc, #400]	; (1000f648 <at_ble_event_get+0x320>)
1000f4b6:	429c      	cmp	r4, r3
1000f4b8:	d100      	bne.n	1000f4bc <at_ble_event_get+0x194>
1000f4ba:	e1a3      	b.n	1000f804 <at_ble_event_get+0x4dc>
1000f4bc:	d804      	bhi.n	1000f4c8 <at_ble_event_get+0x1a0>
1000f4be:	2638      	movs	r6, #56	; 0x38
1000f4c0:	42b4      	cmp	r4, r6
1000f4c2:	d100      	bne.n	1000f4c6 <at_ble_event_get+0x19e>
1000f4c4:	e225      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f4c6:	e117      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f4c8:	4b60      	ldr	r3, [pc, #384]	; (1000f64c <at_ble_event_get+0x324>)
1000f4ca:	429c      	cmp	r4, r3
1000f4cc:	d100      	bne.n	1000f4d0 <at_ble_event_get+0x1a8>
1000f4ce:	e19f      	b.n	1000f810 <at_ble_event_get+0x4e8>
1000f4d0:	33fe      	adds	r3, #254	; 0xfe
1000f4d2:	33ff      	adds	r3, #255	; 0xff
1000f4d4:	429c      	cmp	r4, r3
1000f4d6:	d100      	bne.n	1000f4da <at_ble_event_get+0x1b2>
1000f4d8:	e1d3      	b.n	1000f882 <at_ble_event_get+0x55a>
1000f4da:	e10d      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f4dc:	4b5c      	ldr	r3, [pc, #368]	; (1000f650 <at_ble_event_get+0x328>)
1000f4de:	429c      	cmp	r4, r3
1000f4e0:	d100      	bne.n	1000f4e4 <at_ble_event_get+0x1bc>
1000f4e2:	e1a9      	b.n	1000f838 <at_ble_event_get+0x510>
1000f4e4:	d808      	bhi.n	1000f4f8 <at_ble_event_get+0x1d0>
1000f4e6:	4b5b      	ldr	r3, [pc, #364]	; (1000f654 <at_ble_event_get+0x32c>)
1000f4e8:	429c      	cmp	r4, r3
1000f4ea:	d100      	bne.n	1000f4ee <at_ble_event_get+0x1c6>
1000f4ec:	e196      	b.n	1000f81c <at_ble_event_get+0x4f4>
1000f4ee:	4b5a      	ldr	r3, [pc, #360]	; (1000f658 <at_ble_event_get+0x330>)
1000f4f0:	429c      	cmp	r4, r3
1000f4f2:	d100      	bne.n	1000f4f6 <at_ble_event_get+0x1ce>
1000f4f4:	e199      	b.n	1000f82a <at_ble_event_get+0x502>
1000f4f6:	e0ff      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f4f8:	4b58      	ldr	r3, [pc, #352]	; (1000f65c <at_ble_event_get+0x334>)
1000f4fa:	429c      	cmp	r4, r3
1000f4fc:	d100      	bne.n	1000f500 <at_ble_event_get+0x1d8>
1000f4fe:	e1a2      	b.n	1000f846 <at_ble_event_get+0x51e>
1000f500:	4b57      	ldr	r3, [pc, #348]	; (1000f660 <at_ble_event_get+0x338>)
1000f502:	429c      	cmp	r4, r3
1000f504:	d100      	bne.n	1000f508 <at_ble_event_get+0x1e0>
1000f506:	e1d4      	b.n	1000f8b2 <at_ble_event_get+0x58a>
1000f508:	e0f6      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f50a:	4b56      	ldr	r3, [pc, #344]	; (1000f664 <at_ble_event_get+0x33c>)
1000f50c:	429c      	cmp	r4, r3
1000f50e:	d100      	bne.n	1000f512 <at_ble_event_get+0x1ea>
1000f510:	e1c8      	b.n	1000f8a4 <at_ble_event_get+0x57c>
1000f512:	d812      	bhi.n	1000f53a <at_ble_event_get+0x212>
1000f514:	4b54      	ldr	r3, [pc, #336]	; (1000f668 <at_ble_event_get+0x340>)
1000f516:	429c      	cmp	r4, r3
1000f518:	d100      	bne.n	1000f51c <at_ble_event_get+0x1f4>
1000f51a:	e1d1      	b.n	1000f8c0 <at_ble_event_get+0x598>
1000f51c:	d804      	bhi.n	1000f528 <at_ble_event_get+0x200>
1000f51e:	4b53      	ldr	r3, [pc, #332]	; (1000f66c <at_ble_event_get+0x344>)
1000f520:	429c      	cmp	r4, r3
1000f522:	d100      	bne.n	1000f526 <at_ble_event_get+0x1fe>
1000f524:	e19b      	b.n	1000f85e <at_ble_event_get+0x536>
1000f526:	e0e7      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f528:	4b51      	ldr	r3, [pc, #324]	; (1000f670 <at_ble_event_get+0x348>)
1000f52a:	429c      	cmp	r4, r3
1000f52c:	d100      	bne.n	1000f530 <at_ble_event_get+0x208>
1000f52e:	e1ad      	b.n	1000f88c <at_ble_event_get+0x564>
1000f530:	4b50      	ldr	r3, [pc, #320]	; (1000f674 <at_ble_event_get+0x34c>)
1000f532:	429c      	cmp	r4, r3
1000f534:	d100      	bne.n	1000f538 <at_ble_event_get+0x210>
1000f536:	e1b0      	b.n	1000f89a <at_ble_event_get+0x572>
1000f538:	e0de      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f53a:	4b4f      	ldr	r3, [pc, #316]	; (1000f678 <at_ble_event_get+0x350>)
1000f53c:	429c      	cmp	r4, r3
1000f53e:	d100      	bne.n	1000f542 <at_ble_event_get+0x21a>
1000f540:	e0e0      	b.n	1000f704 <at_ble_event_get+0x3dc>
1000f542:	d809      	bhi.n	1000f558 <at_ble_event_get+0x230>
1000f544:	3b08      	subs	r3, #8
1000f546:	429c      	cmp	r4, r3
1000f548:	d100      	bne.n	1000f54c <at_ble_event_get+0x224>
1000f54a:	e0d7      	b.n	1000f6fc <at_ble_event_get+0x3d4>
1000f54c:	4b4b      	ldr	r3, [pc, #300]	; (1000f67c <at_ble_event_get+0x354>)
1000f54e:	2639      	movs	r6, #57	; 0x39
1000f550:	429c      	cmp	r4, r3
1000f552:	d100      	bne.n	1000f556 <at_ble_event_get+0x22e>
1000f554:	e1dd      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f556:	e0cf      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f558:	23d1      	movs	r3, #209	; 0xd1
1000f55a:	011b      	lsls	r3, r3, #4
1000f55c:	429c      	cmp	r4, r3
1000f55e:	d100      	bne.n	1000f562 <at_ble_event_get+0x23a>
1000f560:	e0d6      	b.n	1000f710 <at_ble_event_get+0x3e8>
1000f562:	4b47      	ldr	r3, [pc, #284]	; (1000f680 <at_ble_event_get+0x358>)
1000f564:	429c      	cmp	r4, r3
1000f566:	d100      	bne.n	1000f56a <at_ble_event_get+0x242>
1000f568:	e0d8      	b.n	1000f71c <at_ble_event_get+0x3f4>
1000f56a:	e0c5      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f56c:	4b45      	ldr	r3, [pc, #276]	; (1000f684 <at_ble_event_get+0x35c>)
1000f56e:	429c      	cmp	r4, r3
1000f570:	d100      	bne.n	1000f574 <at_ble_event_get+0x24c>
1000f572:	e117      	b.n	1000f7a4 <at_ble_event_get+0x47c>
1000f574:	d82e      	bhi.n	1000f5d4 <at_ble_event_get+0x2ac>
1000f576:	4b44      	ldr	r3, [pc, #272]	; (1000f688 <at_ble_event_get+0x360>)
1000f578:	429c      	cmp	r4, r3
1000f57a:	d100      	bne.n	1000f57e <at_ble_event_get+0x256>
1000f57c:	e13d      	b.n	1000f7fa <at_ble_event_get+0x4d2>
1000f57e:	d812      	bhi.n	1000f5a6 <at_ble_event_get+0x27e>
1000f580:	4b42      	ldr	r3, [pc, #264]	; (1000f68c <at_ble_event_get+0x364>)
1000f582:	429c      	cmp	r4, r3
1000f584:	d100      	bne.n	1000f588 <at_ble_event_get+0x260>
1000f586:	e0e8      	b.n	1000f75a <at_ble_event_get+0x432>
1000f588:	d804      	bhi.n	1000f594 <at_ble_event_get+0x26c>
1000f58a:	3b03      	subs	r3, #3
1000f58c:	429c      	cmp	r4, r3
1000f58e:	d100      	bne.n	1000f592 <at_ble_event_get+0x26a>
1000f590:	e0d0      	b.n	1000f734 <at_ble_event_get+0x40c>
1000f592:	e0b1      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f594:	4b3e      	ldr	r3, [pc, #248]	; (1000f690 <at_ble_event_get+0x368>)
1000f596:	429c      	cmp	r4, r3
1000f598:	d100      	bne.n	1000f59c <at_ble_event_get+0x274>
1000f59a:	e0d0      	b.n	1000f73e <at_ble_event_get+0x416>
1000f59c:	4b3d      	ldr	r3, [pc, #244]	; (1000f694 <at_ble_event_get+0x36c>)
1000f59e:	429c      	cmp	r4, r3
1000f5a0:	d100      	bne.n	1000f5a4 <at_ble_event_get+0x27c>
1000f5a2:	e0f9      	b.n	1000f798 <at_ble_event_get+0x470>
1000f5a4:	e0a8      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f5a6:	4b3c      	ldr	r3, [pc, #240]	; (1000f698 <at_ble_event_get+0x370>)
1000f5a8:	429c      	cmp	r4, r3
1000f5aa:	d100      	bne.n	1000f5ae <at_ble_event_get+0x286>
1000f5ac:	e0db      	b.n	1000f766 <at_ble_event_get+0x43e>
1000f5ae:	d808      	bhi.n	1000f5c2 <at_ble_event_get+0x29a>
1000f5b0:	4b3a      	ldr	r3, [pc, #232]	; (1000f69c <at_ble_event_get+0x374>)
1000f5b2:	429c      	cmp	r4, r3
1000f5b4:	d100      	bne.n	1000f5b8 <at_ble_event_get+0x290>
1000f5b6:	e11b      	b.n	1000f7f0 <at_ble_event_get+0x4c8>
1000f5b8:	4b39      	ldr	r3, [pc, #228]	; (1000f6a0 <at_ble_event_get+0x378>)
1000f5ba:	429c      	cmp	r4, r3
1000f5bc:	d100      	bne.n	1000f5c0 <at_ble_event_get+0x298>
1000f5be:	e0d8      	b.n	1000f772 <at_ble_event_get+0x44a>
1000f5c0:	e09a      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f5c2:	4b38      	ldr	r3, [pc, #224]	; (1000f6a4 <at_ble_event_get+0x37c>)
1000f5c4:	429c      	cmp	r4, r3
1000f5c6:	d100      	bne.n	1000f5ca <at_ble_event_get+0x2a2>
1000f5c8:	e0d8      	b.n	1000f77c <at_ble_event_get+0x454>
1000f5ca:	4b37      	ldr	r3, [pc, #220]	; (1000f6a8 <at_ble_event_get+0x380>)
1000f5cc:	429c      	cmp	r4, r3
1000f5ce:	d100      	bne.n	1000f5d2 <at_ble_event_get+0x2aa>
1000f5d0:	e0db      	b.n	1000f78a <at_ble_event_get+0x462>
1000f5d2:	e091      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f5d4:	4b35      	ldr	r3, [pc, #212]	; (1000f6ac <at_ble_event_get+0x384>)
1000f5d6:	429c      	cmp	r4, r3
1000f5d8:	d100      	bne.n	1000f5dc <at_ble_event_get+0x2b4>
1000f5da:	e0f7      	b.n	1000f7cc <at_ble_event_get+0x4a4>
1000f5dc:	d876      	bhi.n	1000f6cc <at_ble_event_get+0x3a4>
1000f5de:	4b34      	ldr	r3, [pc, #208]	; (1000f6b0 <at_ble_event_get+0x388>)
1000f5e0:	429c      	cmp	r4, r3
1000f5e2:	d100      	bne.n	1000f5e6 <at_ble_event_get+0x2be>
1000f5e4:	e0f8      	b.n	1000f7d8 <at_ble_event_get+0x4b0>
1000f5e6:	d869      	bhi.n	1000f6bc <at_ble_event_get+0x394>
1000f5e8:	4b32      	ldr	r3, [pc, #200]	; (1000f6b4 <at_ble_event_get+0x38c>)
1000f5ea:	429c      	cmp	r4, r3
1000f5ec:	d100      	bne.n	1000f5f0 <at_ble_event_get+0x2c8>
1000f5ee:	e0e0      	b.n	1000f7b2 <at_ble_event_get+0x48a>
1000f5f0:	4b31      	ldr	r3, [pc, #196]	; (1000f6b8 <at_ble_event_get+0x390>)
1000f5f2:	429c      	cmp	r4, r3
1000f5f4:	d100      	bne.n	1000f5f8 <at_ble_event_get+0x2d0>
1000f5f6:	e0a9      	b.n	1000f74c <at_ble_event_get+0x424>
1000f5f8:	e07e      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f5fa:	46c0      	nop			; (mov r8, r8)
1000f5fc:	10010d2d 	.word	0x10010d2d
1000f600:	10018734 	.word	0x10018734
1000f604:	1000ea11 	.word	0x1000ea11
1000f608:	10018738 	.word	0x10018738
1000f60c:	10018730 	.word	0x10018730
1000f610:	10018720 	.word	0x10018720
1000f614:	1000f211 	.word	0x1000f211
1000f618:	100143c9 	.word	0x100143c9
1000f61c:	0000ffff 	.word	0x0000ffff
1000f620:	0000fffe 	.word	0x0000fffe
1000f624:	1000ec89 	.word	0x1000ec89
1000f628:	10010d2f 	.word	0x10010d2f
1000f62c:	0000201e 	.word	0x0000201e
1000f630:	0000201d 	.word	0x0000201d
1000f634:	00000c03 	.word	0x00000c03
1000f638:	0000201f 	.word	0x0000201f
1000f63c:	00000d1c 	.word	0x00000d1c
1000f640:	00000c0c 	.word	0x00000c0c
1000f644:	00000c02 	.word	0x00000c02
1000f648:	00000a02 	.word	0x00000a02
1000f64c:	00000a03 	.word	0x00000a03
1000f650:	00000c06 	.word	0x00000c06
1000f654:	00000c04 	.word	0x00000c04
1000f658:	00000c05 	.word	0x00000c05
1000f65c:	00000c07 	.word	0x00000c07
1000f660:	00000c09 	.word	0x00000c09
1000f664:	00000c17 	.word	0x00000c17
1000f668:	00000c12 	.word	0x00000c12
1000f66c:	00000c0d 	.word	0x00000c0d
1000f670:	00000c13 	.word	0x00000c13
1000f674:	00000c15 	.word	0x00000c15
1000f678:	00000d08 	.word	0x00000d08
1000f67c:	00000d01 	.word	0x00000d01
1000f680:	00000d15 	.word	0x00000d15
1000f684:	00000e1b 	.word	0x00000e1b
1000f688:	00000e0f 	.word	0x00000e0f
1000f68c:	00000e03 	.word	0x00000e03
1000f690:	00000e06 	.word	0x00000e06
1000f694:	00000e0a 	.word	0x00000e0a
1000f698:	00000e15 	.word	0x00000e15
1000f69c:	00000e11 	.word	0x00000e11
1000f6a0:	00000e13 	.word	0x00000e13
1000f6a4:	00000e17 	.word	0x00000e17
1000f6a8:	00000e19 	.word	0x00000e19
1000f6ac:	00000e27 	.word	0x00000e27
1000f6b0:	00000e21 	.word	0x00000e21
1000f6b4:	00000e1c 	.word	0x00000e1c
1000f6b8:	00000e1d 	.word	0x00000e1d
1000f6bc:	4b9f      	ldr	r3, [pc, #636]	; (1000f93c <at_ble_event_get+0x614>)
1000f6be:	429c      	cmp	r4, r3
1000f6c0:	d07e      	beq.n	1000f7c0 <at_ble_event_get+0x498>
1000f6c2:	4b9f      	ldr	r3, [pc, #636]	; (1000f940 <at_ble_event_get+0x618>)
1000f6c4:	429c      	cmp	r4, r3
1000f6c6:	d100      	bne.n	1000f6ca <at_ble_event_get+0x3a2>
1000f6c8:	e08c      	b.n	1000f7e4 <at_ble_event_get+0x4bc>
1000f6ca:	e015      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f6cc:	4b9d      	ldr	r3, [pc, #628]	; (1000f944 <at_ble_event_get+0x61c>)
1000f6ce:	429c      	cmp	r4, r3
1000f6d0:	d100      	bne.n	1000f6d4 <at_ble_event_get+0x3ac>
1000f6d2:	e10a      	b.n	1000f8ea <at_ble_event_get+0x5c2>
1000f6d4:	d808      	bhi.n	1000f6e8 <at_ble_event_get+0x3c0>
1000f6d6:	4b9c      	ldr	r3, [pc, #624]	; (1000f948 <at_ble_event_get+0x620>)
1000f6d8:	429c      	cmp	r4, r3
1000f6da:	d100      	bne.n	1000f6de <at_ble_event_get+0x3b6>
1000f6dc:	e0f7      	b.n	1000f8ce <at_ble_event_get+0x5a6>
1000f6de:	4b9b      	ldr	r3, [pc, #620]	; (1000f94c <at_ble_event_get+0x624>)
1000f6e0:	429c      	cmp	r4, r3
1000f6e2:	d100      	bne.n	1000f6e6 <at_ble_event_get+0x3be>
1000f6e4:	e0fa      	b.n	1000f8dc <at_ble_event_get+0x5b4>
1000f6e6:	e007      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f6e8:	4b99      	ldr	r3, [pc, #612]	; (1000f950 <at_ble_event_get+0x628>)
1000f6ea:	429c      	cmp	r4, r3
1000f6ec:	d100      	bne.n	1000f6f0 <at_ble_event_get+0x3c8>
1000f6ee:	e103      	b.n	1000f8f8 <at_ble_event_get+0x5d0>
1000f6f0:	4b98      	ldr	r3, [pc, #608]	; (1000f954 <at_ble_event_get+0x62c>)
1000f6f2:	429c      	cmp	r4, r3
1000f6f4:	d100      	bne.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f6f6:	e106      	b.n	1000f906 <at_ble_event_get+0x5de>
1000f6f8:	2600      	movs	r6, #0
1000f6fa:	e10a      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f6fc:	1c30      	adds	r0, r6, #0
1000f6fe:	1c29      	adds	r1, r5, #0
1000f700:	4b95      	ldr	r3, [pc, #596]	; (1000f958 <at_ble_event_get+0x630>)
1000f702:	e014      	b.n	1000f72e <at_ble_event_get+0x406>
1000f704:	1c30      	adds	r0, r6, #0
1000f706:	1c29      	adds	r1, r5, #0
1000f708:	4b94      	ldr	r3, [pc, #592]	; (1000f95c <at_ble_event_get+0x634>)
1000f70a:	4798      	blx	r3
1000f70c:	2604      	movs	r6, #4
1000f70e:	e100      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f710:	1c30      	adds	r0, r6, #0
1000f712:	1c29      	adds	r1, r5, #0
1000f714:	4b92      	ldr	r3, [pc, #584]	; (1000f960 <at_ble_event_get+0x638>)
1000f716:	4798      	blx	r3
1000f718:	2601      	movs	r6, #1
1000f71a:	e0fa      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f71c:	1c30      	adds	r0, r6, #0
1000f71e:	1c29      	adds	r1, r5, #0
1000f720:	4b90      	ldr	r3, [pc, #576]	; (1000f964 <at_ble_event_get+0x63c>)
1000f722:	4798      	blx	r3
1000f724:	260f      	movs	r6, #15
1000f726:	e0f4      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f728:	1c30      	adds	r0, r6, #0
1000f72a:	1c29      	adds	r1, r5, #0
1000f72c:	4b8e      	ldr	r3, [pc, #568]	; (1000f968 <at_ble_event_get+0x640>)
1000f72e:	4798      	blx	r3
1000f730:	1c06      	adds	r6, r0, #0
1000f732:	e0ee      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f734:	9801      	ldr	r0, [sp, #4]
1000f736:	1c31      	adds	r1, r6, #0
1000f738:	1c2a      	adds	r2, r5, #0
1000f73a:	4b8c      	ldr	r3, [pc, #560]	; (1000f96c <at_ble_event_get+0x644>)
1000f73c:	e017      	b.n	1000f76e <at_ble_event_get+0x446>
1000f73e:	1c31      	adds	r1, r6, #0
1000f740:	9801      	ldr	r0, [sp, #4]
1000f742:	1c2a      	adds	r2, r5, #0
1000f744:	4b8a      	ldr	r3, [pc, #552]	; (1000f970 <at_ble_event_get+0x648>)
1000f746:	4798      	blx	r3
1000f748:	2611      	movs	r6, #17
1000f74a:	e0e2      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f74c:	1c31      	adds	r1, r6, #0
1000f74e:	9801      	ldr	r0, [sp, #4]
1000f750:	1c2a      	adds	r2, r5, #0
1000f752:	4b88      	ldr	r3, [pc, #544]	; (1000f974 <at_ble_event_get+0x64c>)
1000f754:	4798      	blx	r3
1000f756:	2612      	movs	r6, #18
1000f758:	e0db      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f75a:	1c30      	adds	r0, r6, #0
1000f75c:	1c29      	adds	r1, r5, #0
1000f75e:	4b86      	ldr	r3, [pc, #536]	; (1000f978 <at_ble_event_get+0x650>)
1000f760:	4798      	blx	r3
1000f762:	2606      	movs	r6, #6
1000f764:	e0d5      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f766:	1c31      	adds	r1, r6, #0
1000f768:	1c2a      	adds	r2, r5, #0
1000f76a:	9801      	ldr	r0, [sp, #4]
1000f76c:	4b83      	ldr	r3, [pc, #524]	; (1000f97c <at_ble_event_get+0x654>)
1000f76e:	4798      	blx	r3
1000f770:	e7de      	b.n	1000f730 <at_ble_event_get+0x408>
1000f772:	9801      	ldr	r0, [sp, #4]
1000f774:	1c31      	adds	r1, r6, #0
1000f776:	1c2a      	adds	r2, r5, #0
1000f778:	4b81      	ldr	r3, [pc, #516]	; (1000f980 <at_ble_event_get+0x658>)
1000f77a:	e7f8      	b.n	1000f76e <at_ble_event_get+0x446>
1000f77c:	1c31      	adds	r1, r6, #0
1000f77e:	9801      	ldr	r0, [sp, #4]
1000f780:	1c2a      	adds	r2, r5, #0
1000f782:	4b80      	ldr	r3, [pc, #512]	; (1000f984 <at_ble_event_get+0x65c>)
1000f784:	4798      	blx	r3
1000f786:	260d      	movs	r6, #13
1000f788:	e0c3      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f78a:	1c31      	adds	r1, r6, #0
1000f78c:	9801      	ldr	r0, [sp, #4]
1000f78e:	1c2a      	adds	r2, r5, #0
1000f790:	4b7d      	ldr	r3, [pc, #500]	; (1000f988 <at_ble_event_get+0x660>)
1000f792:	4798      	blx	r3
1000f794:	260e      	movs	r6, #14
1000f796:	e0bc      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f798:	9801      	ldr	r0, [sp, #4]
1000f79a:	1c31      	adds	r1, r6, #0
1000f79c:	1c2a      	adds	r2, r5, #0
1000f79e:	4b7b      	ldr	r3, [pc, #492]	; (1000f98c <at_ble_event_get+0x664>)
1000f7a0:	4798      	blx	r3
1000f7a2:	e084      	b.n	1000f8ae <at_ble_event_get+0x586>
1000f7a4:	1c31      	adds	r1, r6, #0
1000f7a6:	9801      	ldr	r0, [sp, #4]
1000f7a8:	1c2a      	adds	r2, r5, #0
1000f7aa:	4b79      	ldr	r3, [pc, #484]	; (1000f990 <at_ble_event_get+0x668>)
1000f7ac:	4798      	blx	r3
1000f7ae:	260b      	movs	r6, #11
1000f7b0:	e0af      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7b2:	1c31      	adds	r1, r6, #0
1000f7b4:	9801      	ldr	r0, [sp, #4]
1000f7b6:	1c2a      	adds	r2, r5, #0
1000f7b8:	4b76      	ldr	r3, [pc, #472]	; (1000f994 <at_ble_event_get+0x66c>)
1000f7ba:	4798      	blx	r3
1000f7bc:	2610      	movs	r6, #16
1000f7be:	e0a8      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7c0:	1c30      	adds	r0, r6, #0
1000f7c2:	1c29      	adds	r1, r5, #0
1000f7c4:	4b74      	ldr	r3, [pc, #464]	; (1000f998 <at_ble_event_get+0x670>)
1000f7c6:	4798      	blx	r3
1000f7c8:	2628      	movs	r6, #40	; 0x28
1000f7ca:	e0a2      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7cc:	1c30      	adds	r0, r6, #0
1000f7ce:	1c29      	adds	r1, r5, #0
1000f7d0:	4b72      	ldr	r3, [pc, #456]	; (1000f99c <at_ble_event_get+0x674>)
1000f7d2:	4798      	blx	r3
1000f7d4:	2629      	movs	r6, #41	; 0x29
1000f7d6:	e09c      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7d8:	1c30      	adds	r0, r6, #0
1000f7da:	1c29      	adds	r1, r5, #0
1000f7dc:	4b70      	ldr	r3, [pc, #448]	; (1000f9a0 <at_ble_event_get+0x678>)
1000f7de:	4798      	blx	r3
1000f7e0:	2627      	movs	r6, #39	; 0x27
1000f7e2:	e096      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7e4:	1c30      	adds	r0, r6, #0
1000f7e6:	1c29      	adds	r1, r5, #0
1000f7e8:	4b6e      	ldr	r3, [pc, #440]	; (1000f9a4 <at_ble_event_get+0x67c>)
1000f7ea:	4798      	blx	r3
1000f7ec:	262a      	movs	r6, #42	; 0x2a
1000f7ee:	e090      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f7f0:	9801      	ldr	r0, [sp, #4]
1000f7f2:	1c31      	adds	r1, r6, #0
1000f7f4:	1c2a      	adds	r2, r5, #0
1000f7f6:	4b6c      	ldr	r3, [pc, #432]	; (1000f9a8 <at_ble_event_get+0x680>)
1000f7f8:	e7b9      	b.n	1000f76e <at_ble_event_get+0x446>
1000f7fa:	9801      	ldr	r0, [sp, #4]
1000f7fc:	1c31      	adds	r1, r6, #0
1000f7fe:	1c2a      	adds	r2, r5, #0
1000f800:	4b6a      	ldr	r3, [pc, #424]	; (1000f9ac <at_ble_event_get+0x684>)
1000f802:	e7b4      	b.n	1000f76e <at_ble_event_get+0x446>
1000f804:	1c30      	adds	r0, r6, #0
1000f806:	1c29      	adds	r1, r5, #0
1000f808:	4b69      	ldr	r3, [pc, #420]	; (1000f9b0 <at_ble_event_get+0x688>)
1000f80a:	4798      	blx	r3
1000f80c:	262b      	movs	r6, #43	; 0x2b
1000f80e:	e080      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f810:	1c30      	adds	r0, r6, #0
1000f812:	1c29      	adds	r1, r5, #0
1000f814:	4b67      	ldr	r3, [pc, #412]	; (1000f9b4 <at_ble_event_get+0x68c>)
1000f816:	4798      	blx	r3
1000f818:	262c      	movs	r6, #44	; 0x2c
1000f81a:	e07a      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f81c:	1c31      	adds	r1, r6, #0
1000f81e:	9801      	ldr	r0, [sp, #4]
1000f820:	1c2a      	adds	r2, r5, #0
1000f822:	4b65      	ldr	r3, [pc, #404]	; (1000f9b8 <at_ble_event_get+0x690>)
1000f824:	4798      	blx	r3
1000f826:	2613      	movs	r6, #19
1000f828:	e073      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f82a:	1c31      	adds	r1, r6, #0
1000f82c:	9801      	ldr	r0, [sp, #4]
1000f82e:	1c2a      	adds	r2, r5, #0
1000f830:	4b62      	ldr	r3, [pc, #392]	; (1000f9bc <at_ble_event_get+0x694>)
1000f832:	4798      	blx	r3
1000f834:	2614      	movs	r6, #20
1000f836:	e06c      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f838:	1c31      	adds	r1, r6, #0
1000f83a:	9801      	ldr	r0, [sp, #4]
1000f83c:	1c2a      	adds	r2, r5, #0
1000f83e:	4b60      	ldr	r3, [pc, #384]	; (1000f9c0 <at_ble_event_get+0x698>)
1000f840:	4798      	blx	r3
1000f842:	2615      	movs	r6, #21
1000f844:	e065      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f846:	1c31      	adds	r1, r6, #0
1000f848:	9801      	ldr	r0, [sp, #4]
1000f84a:	1c2a      	adds	r2, r5, #0
1000f84c:	4b5d      	ldr	r3, [pc, #372]	; (1000f9c4 <at_ble_event_get+0x69c>)
1000f84e:	4798      	blx	r3
1000f850:	2616      	movs	r6, #22
1000f852:	e05e      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f854:	9801      	ldr	r0, [sp, #4]
1000f856:	1c31      	adds	r1, r6, #0
1000f858:	1c2a      	adds	r2, r5, #0
1000f85a:	4b5b      	ldr	r3, [pc, #364]	; (1000f9c8 <at_ble_event_get+0x6a0>)
1000f85c:	e787      	b.n	1000f76e <at_ble_event_get+0x446>
1000f85e:	1c31      	adds	r1, r6, #0
1000f860:	9801      	ldr	r0, [sp, #4]
1000f862:	1c2a      	adds	r2, r5, #0
1000f864:	4b58      	ldr	r3, [pc, #352]	; (1000f9c8 <at_ble_event_get+0x6a0>)
1000f866:	4798      	blx	r3
1000f868:	88a9      	ldrh	r1, [r5, #4]
1000f86a:	1c06      	adds	r6, r0, #0
1000f86c:	4b57      	ldr	r3, [pc, #348]	; (1000f9cc <at_ble_event_get+0x6a4>)
1000f86e:	8828      	ldrh	r0, [r5, #0]
1000f870:	4798      	blx	r3
1000f872:	e04e      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f874:	1c31      	adds	r1, r6, #0
1000f876:	9801      	ldr	r0, [sp, #4]
1000f878:	1c2a      	adds	r2, r5, #0
1000f87a:	4b55      	ldr	r3, [pc, #340]	; (1000f9d0 <at_ble_event_get+0x6a8>)
1000f87c:	4798      	blx	r3
1000f87e:	2623      	movs	r6, #35	; 0x23
1000f880:	e047      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f882:	9801      	ldr	r0, [sp, #4]
1000f884:	1c31      	adds	r1, r6, #0
1000f886:	1c2a      	adds	r2, r5, #0
1000f888:	4b52      	ldr	r3, [pc, #328]	; (1000f9d4 <at_ble_event_get+0x6ac>)
1000f88a:	e770      	b.n	1000f76e <at_ble_event_get+0x446>
1000f88c:	9b01      	ldr	r3, [sp, #4]
1000f88e:	1c30      	adds	r0, r6, #0
1000f890:	0a1f      	lsrs	r7, r3, #8
1000f892:	802f      	strh	r7, [r5, #0]
1000f894:	1c29      	adds	r1, r5, #0
1000f896:	4b50      	ldr	r3, [pc, #320]	; (1000f9d8 <at_ble_event_get+0x6b0>)
1000f898:	e749      	b.n	1000f72e <at_ble_event_get+0x406>
1000f89a:	9801      	ldr	r0, [sp, #4]
1000f89c:	1c31      	adds	r1, r6, #0
1000f89e:	1c2a      	adds	r2, r5, #0
1000f8a0:	4b4e      	ldr	r3, [pc, #312]	; (1000f9dc <at_ble_event_get+0x6b4>)
1000f8a2:	e764      	b.n	1000f76e <at_ble_event_get+0x446>
1000f8a4:	1c30      	adds	r0, r6, #0
1000f8a6:	1c29      	adds	r1, r5, #0
1000f8a8:	9a01      	ldr	r2, [sp, #4]
1000f8aa:	4b4d      	ldr	r3, [pc, #308]	; (1000f9e0 <at_ble_event_get+0x6b8>)
1000f8ac:	4798      	blx	r3
1000f8ae:	263b      	movs	r6, #59	; 0x3b
1000f8b0:	e02f      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8b2:	1c31      	adds	r1, r6, #0
1000f8b4:	9801      	ldr	r0, [sp, #4]
1000f8b6:	1c2a      	adds	r2, r5, #0
1000f8b8:	4b4a      	ldr	r3, [pc, #296]	; (1000f9e4 <at_ble_event_get+0x6bc>)
1000f8ba:	4798      	blx	r3
1000f8bc:	2618      	movs	r6, #24
1000f8be:	e028      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8c0:	1c31      	adds	r1, r6, #0
1000f8c2:	9801      	ldr	r0, [sp, #4]
1000f8c4:	1c2a      	adds	r2, r5, #0
1000f8c6:	4b48      	ldr	r3, [pc, #288]	; (1000f9e8 <at_ble_event_get+0x6c0>)
1000f8c8:	4798      	blx	r3
1000f8ca:	2620      	movs	r6, #32
1000f8cc:	e021      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8ce:	1c31      	adds	r1, r6, #0
1000f8d0:	9801      	ldr	r0, [sp, #4]
1000f8d2:	1c2a      	adds	r2, r5, #0
1000f8d4:	4b45      	ldr	r3, [pc, #276]	; (1000f9ec <at_ble_event_get+0x6c4>)
1000f8d6:	4798      	blx	r3
1000f8d8:	2633      	movs	r6, #51	; 0x33
1000f8da:	e01a      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8dc:	1c31      	adds	r1, r6, #0
1000f8de:	9801      	ldr	r0, [sp, #4]
1000f8e0:	1c2a      	adds	r2, r5, #0
1000f8e2:	4b43      	ldr	r3, [pc, #268]	; (1000f9f0 <at_ble_event_get+0x6c8>)
1000f8e4:	4798      	blx	r3
1000f8e6:	2630      	movs	r6, #48	; 0x30
1000f8e8:	e013      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8ea:	1c31      	adds	r1, r6, #0
1000f8ec:	9801      	ldr	r0, [sp, #4]
1000f8ee:	1c2a      	adds	r2, r5, #0
1000f8f0:	4b40      	ldr	r3, [pc, #256]	; (1000f9f4 <at_ble_event_get+0x6cc>)
1000f8f2:	4798      	blx	r3
1000f8f4:	2634      	movs	r6, #52	; 0x34
1000f8f6:	e00c      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f8f8:	1c31      	adds	r1, r6, #0
1000f8fa:	9801      	ldr	r0, [sp, #4]
1000f8fc:	1c2a      	adds	r2, r5, #0
1000f8fe:	4b3e      	ldr	r3, [pc, #248]	; (1000f9f8 <at_ble_event_get+0x6d0>)
1000f900:	4798      	blx	r3
1000f902:	2635      	movs	r6, #53	; 0x35
1000f904:	e005      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f906:	1c31      	adds	r1, r6, #0
1000f908:	9801      	ldr	r0, [sp, #4]
1000f90a:	1c2a      	adds	r2, r5, #0
1000f90c:	4b3b      	ldr	r3, [pc, #236]	; (1000f9fc <at_ble_event_get+0x6d4>)
1000f90e:	4798      	blx	r3
1000f910:	2632      	movs	r6, #50	; 0x32
1000f912:	9b03      	ldr	r3, [sp, #12]
1000f914:	701e      	strb	r6, [r3, #0]
1000f916:	2300      	movs	r3, #0
1000f918:	9302      	str	r3, [sp, #8]
1000f91a:	e57a      	b.n	1000f412 <at_ble_event_get+0xea>
1000f91c:	23d0      	movs	r3, #208	; 0xd0
1000f91e:	e7fb      	b.n	1000f918 <at_ble_event_get+0x5f0>
1000f920:	9b01      	ldr	r3, [sp, #4]
1000f922:	9e02      	ldr	r6, [sp, #8]
1000f924:	2bbb      	cmp	r3, #187	; 0xbb
1000f926:	d000      	beq.n	1000f92a <at_ble_event_get+0x602>
1000f928:	e6e6      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f92a:	e7f2      	b.n	1000f912 <at_ble_event_get+0x5ea>
1000f92c:	9b02      	ldr	r3, [sp, #8]
1000f92e:	2b00      	cmp	r3, #0
1000f930:	d000      	beq.n	1000f934 <at_ble_event_get+0x60c>
1000f932:	e56e      	b.n	1000f412 <at_ble_event_get+0xea>
1000f934:	e6e0      	b.n	1000f6f8 <at_ble_event_get+0x3d0>
1000f936:	9802      	ldr	r0, [sp, #8]
1000f938:	b007      	add	sp, #28
1000f93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f93c:	00000e22 	.word	0x00000e22
1000f940:	00000e25 	.word	0x00000e25
1000f944:	00001b05 	.word	0x00001b05
1000f948:	00001b01 	.word	0x00001b01
1000f94c:	00001b03 	.word	0x00001b03
1000f950:	00001b06 	.word	0x00001b06
1000f954:	00001b08 	.word	0x00001b08
1000f958:	10011b59 	.word	0x10011b59
1000f95c:	10011b3d 	.word	0x10011b3d
1000f960:	10011dd9 	.word	0x10011dd9
1000f964:	10011ec9 	.word	0x10011ec9
1000f968:	10011eed 	.word	0x10011eed
1000f96c:	10010ed1 	.word	0x10010ed1
1000f970:	10011751 	.word	0x10011751
1000f974:	100117cd 	.word	0x100117cd
1000f978:	10011189 	.word	0x10011189
1000f97c:	10011225 	.word	0x10011225
1000f980:	100112fd 	.word	0x100112fd
1000f984:	10011585 	.word	0x10011585
1000f988:	10011625 	.word	0x10011625
1000f98c:	100116dd 	.word	0x100116dd
1000f990:	10011705 	.word	0x10011705
1000f994:	1001171b 	.word	0x1001171b
1000f998:	100117e5 	.word	0x100117e5
1000f99c:	10011813 	.word	0x10011813
1000f9a0:	10011829 	.word	0x10011829
1000f9a4:	10011853 	.word	0x10011853
1000f9a8:	10011681 	.word	0x10011681
1000f9ac:	100116ab 	.word	0x100116ab
1000f9b0:	10010911 	.word	0x10010911
1000f9b4:	1001093d 	.word	0x1001093d
1000f9b8:	1001210d 	.word	0x1001210d
1000f9bc:	10012149 	.word	0x10012149
1000f9c0:	10012191 	.word	0x10012191
1000f9c4:	100121d5 	.word	0x100121d5
1000f9c8:	10012209 	.word	0x10012209
1000f9cc:	100120cd 	.word	0x100120cd
1000f9d0:	100122d5 	.word	0x100122d5
1000f9d4:	1001225d 	.word	0x1001225d
1000f9d8:	100107f5 	.word	0x100107f5
1000f9dc:	10010861 	.word	0x10010861
1000f9e0:	10010825 	.word	0x10010825
1000f9e4:	100122e5 	.word	0x100122e5
1000f9e8:	10012325 	.word	0x10012325
1000f9ec:	100125ed 	.word	0x100125ed
1000f9f0:	100125f7 	.word	0x100125f7
1000f9f4:	100125fd 	.word	0x100125fd
1000f9f8:	10012603 	.word	0x10012603
1000f9fc:	1001260f 	.word	0x1001260f

1000fa00 <internal_event_flush>:
1000fa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fa02:	490e      	ldr	r1, [pc, #56]	; (1000fa3c <internal_event_flush+0x3c>)
1000fa04:	2400      	movs	r4, #0
1000fa06:	680b      	ldr	r3, [r1, #0]
1000fa08:	1c0f      	adds	r7, r1, #0
1000fa0a:	1c1e      	adds	r6, r3, #0
1000fa0c:	4a0c      	ldr	r2, [pc, #48]	; (1000fa40 <internal_event_flush+0x40>)
1000fa0e:	6815      	ldr	r5, [r2, #0]
1000fa10:	9201      	str	r2, [sp, #4]
1000fa12:	2b00      	cmp	r3, #0
1000fa14:	d00e      	beq.n	1000fa34 <internal_event_flush+0x34>
1000fa16:	889a      	ldrh	r2, [r3, #4]
1000fa18:	6819      	ldr	r1, [r3, #0]
1000fa1a:	4282      	cmp	r2, r0
1000fa1c:	d107      	bne.n	1000fa2e <internal_event_flush+0x2e>
1000fa1e:	2c00      	cmp	r4, #0
1000fa20:	d001      	beq.n	1000fa26 <internal_event_flush+0x26>
1000fa22:	6021      	str	r1, [r4, #0]
1000fa24:	e000      	b.n	1000fa28 <internal_event_flush+0x28>
1000fa26:	1c0e      	adds	r6, r1, #0
1000fa28:	601d      	str	r5, [r3, #0]
1000fa2a:	1c1d      	adds	r5, r3, #0
1000fa2c:	1c23      	adds	r3, r4, #0
1000fa2e:	1c1c      	adds	r4, r3, #0
1000fa30:	1c0b      	adds	r3, r1, #0
1000fa32:	e7ee      	b.n	1000fa12 <internal_event_flush+0x12>
1000fa34:	9b01      	ldr	r3, [sp, #4]
1000fa36:	603e      	str	r6, [r7, #0]
1000fa38:	601d      	str	r5, [r3, #0]
1000fa3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fa3c:	10018734 	.word	0x10018734
1000fa40:	10018738 	.word	0x10018738

1000fa44 <internal_conn_flush>:
1000fa44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fa46:	4a12      	ldr	r2, [pc, #72]	; (1000fa90 <internal_conn_flush+0x4c>)
1000fa48:	9000      	str	r0, [sp, #0]
1000fa4a:	6813      	ldr	r3, [r2, #0]
1000fa4c:	4811      	ldr	r0, [pc, #68]	; (1000fa94 <internal_conn_flush+0x50>)
1000fa4e:	1c1f      	adds	r7, r3, #0
1000fa50:	2100      	movs	r1, #0
1000fa52:	4684      	mov	ip, r0
1000fa54:	6804      	ldr	r4, [r0, #0]
1000fa56:	9201      	str	r2, [sp, #4]
1000fa58:	2b00      	cmp	r3, #0
1000fa5a:	d014      	beq.n	1000fa86 <internal_conn_flush+0x42>
1000fa5c:	88d8      	ldrh	r0, [r3, #6]
1000fa5e:	9a00      	ldr	r2, [sp, #0]
1000fa60:	681d      	ldr	r5, [r3, #0]
1000fa62:	0a06      	lsrs	r6, r0, #8
1000fa64:	4296      	cmp	r6, r2
1000fa66:	d10b      	bne.n	1000fa80 <internal_conn_flush+0x3c>
1000fa68:	26fd      	movs	r6, #253	; 0xfd
1000fa6a:	4006      	ands	r6, r0
1000fa6c:	2e0c      	cmp	r6, #12
1000fa6e:	d107      	bne.n	1000fa80 <internal_conn_flush+0x3c>
1000fa70:	2900      	cmp	r1, #0
1000fa72:	d001      	beq.n	1000fa78 <internal_conn_flush+0x34>
1000fa74:	600d      	str	r5, [r1, #0]
1000fa76:	e000      	b.n	1000fa7a <internal_conn_flush+0x36>
1000fa78:	1c2f      	adds	r7, r5, #0
1000fa7a:	601c      	str	r4, [r3, #0]
1000fa7c:	1c1c      	adds	r4, r3, #0
1000fa7e:	1c0b      	adds	r3, r1, #0
1000fa80:	1c19      	adds	r1, r3, #0
1000fa82:	1c2b      	adds	r3, r5, #0
1000fa84:	e7e8      	b.n	1000fa58 <internal_conn_flush+0x14>
1000fa86:	9b01      	ldr	r3, [sp, #4]
1000fa88:	601f      	str	r7, [r3, #0]
1000fa8a:	4663      	mov	r3, ip
1000fa8c:	601c      	str	r4, [r3, #0]
1000fa8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fa90:	10018734 	.word	0x10018734
1000fa94:	10018738 	.word	0x10018738

1000fa98 <at_ble_device_name_set>:
1000fa98:	b530      	push	{r4, r5, lr}
1000fa9a:	23cf      	movs	r3, #207	; 0xcf
1000fa9c:	2800      	cmp	r0, #0
1000fa9e:	d010      	beq.n	1000fac2 <at_ble_device_name_set+0x2a>
1000faa0:	1e4a      	subs	r2, r1, #1
1000faa2:	2a1f      	cmp	r2, #31
1000faa4:	d80d      	bhi.n	1000fac2 <at_ble_device_name_set+0x2a>
1000faa6:	4a08      	ldr	r2, [pc, #32]	; (1000fac8 <at_ble_device_name_set+0x30>)
1000faa8:	1c13      	adds	r3, r2, #0
1000faaa:	33aa      	adds	r3, #170	; 0xaa
1000faac:	8019      	strh	r1, [r3, #0]
1000faae:	2300      	movs	r3, #0
1000fab0:	1c1c      	adds	r4, r3, #0
1000fab2:	5cc5      	ldrb	r5, [r0, r3]
1000fab4:	34ac      	adds	r4, #172	; 0xac
1000fab6:	3301      	adds	r3, #1
1000fab8:	5515      	strb	r5, [r2, r4]
1000faba:	b2dc      	uxtb	r4, r3
1000fabc:	428c      	cmp	r4, r1
1000fabe:	d3f7      	bcc.n	1000fab0 <at_ble_device_name_set+0x18>
1000fac0:	2300      	movs	r3, #0
1000fac2:	1c18      	adds	r0, r3, #0
1000fac4:	bd30      	pop	{r4, r5, pc}
1000fac6:	46c0      	nop			; (mov r8, r8)
1000fac8:	100196e2 	.word	0x100196e2

1000facc <at_ble_addr_get>:
1000facc:	b510      	push	{r4, lr}
1000face:	1c04      	adds	r4, r0, #0
1000fad0:	20cf      	movs	r0, #207	; 0xcf
1000fad2:	2c00      	cmp	r4, #0
1000fad4:	d006      	beq.n	1000fae4 <at_ble_addr_get+0x18>
1000fad6:	4b04      	ldr	r3, [pc, #16]	; (1000fae8 <at_ble_addr_get+0x1c>)
1000fad8:	38ce      	subs	r0, #206	; 0xce
1000fada:	1c21      	adds	r1, r4, #0
1000fadc:	4798      	blx	r3
1000fade:	4b03      	ldr	r3, [pc, #12]	; (1000faec <at_ble_addr_get+0x20>)
1000fae0:	791b      	ldrb	r3, [r3, #4]
1000fae2:	7023      	strb	r3, [r4, #0]
1000fae4:	bd10      	pop	{r4, pc}
1000fae6:	46c0      	nop			; (mov r8, r8)
1000fae8:	100119ed 	.word	0x100119ed
1000faec:	100196e2 	.word	0x100196e2

1000faf0 <at_ble_set_dev_config>:
1000faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000faf2:	7906      	ldrb	r6, [r0, #4]
1000faf4:	b089      	sub	sp, #36	; 0x24
1000faf6:	25cf      	movs	r5, #207	; 0xcf
1000faf8:	2e03      	cmp	r6, #3
1000fafa:	d838      	bhi.n	1000fb6e <at_ble_set_dev_config+0x7e>
1000fafc:	7803      	ldrb	r3, [r0, #0]
1000fafe:	3511      	adds	r5, #17
1000fb00:	2b0f      	cmp	r3, #15
1000fb02:	d834      	bhi.n	1000fb6e <at_ble_set_dev_config+0x7e>
1000fb04:	2380      	movs	r3, #128	; 0x80
1000fb06:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000fb08:	3d11      	subs	r5, #17
1000fb0a:	009b      	lsls	r3, r3, #2
1000fb0c:	429f      	cmp	r7, r3
1000fb0e:	d82e      	bhi.n	1000fb6e <at_ble_set_dev_config+0x7e>
1000fb10:	7fc5      	ldrb	r5, [r0, #31]
1000fb12:	7f83      	ldrb	r3, [r0, #30]
1000fb14:	01ad      	lsls	r5, r5, #6
1000fb16:	015b      	lsls	r3, r3, #5
1000fb18:	431d      	orrs	r5, r3
1000fb1a:	7ec3      	ldrb	r3, [r0, #27]
1000fb1c:	431d      	orrs	r5, r3
1000fb1e:	7f43      	ldrb	r3, [r0, #29]
1000fb20:	011b      	lsls	r3, r3, #4
1000fb22:	431d      	orrs	r5, r3
1000fb24:	7f03      	ldrb	r3, [r0, #28]
1000fb26:	009b      	lsls	r3, r3, #2
1000fb28:	431d      	orrs	r5, r3
1000fb2a:	4b12      	ldr	r3, [pc, #72]	; (1000fb74 <at_ble_set_dev_config+0x84>)
1000fb2c:	b2ed      	uxtb	r5, r5
1000fb2e:	711e      	strb	r6, [r3, #4]
1000fb30:	7903      	ldrb	r3, [r0, #4]
1000fb32:	3b02      	subs	r3, #2
1000fb34:	2b01      	cmp	r3, #1
1000fb36:	d801      	bhi.n	1000fb3c <at_ble_set_dev_config+0x4c>
1000fb38:	2302      	movs	r3, #2
1000fb3a:	7103      	strb	r3, [r0, #4]
1000fb3c:	1c04      	adds	r4, r0, #0
1000fb3e:	1c23      	adds	r3, r4, #0
1000fb40:	330b      	adds	r3, #11
1000fb42:	8861      	ldrh	r1, [r4, #2]
1000fb44:	9307      	str	r3, [sp, #28]
1000fb46:	7923      	ldrb	r3, [r4, #4]
1000fb48:	7800      	ldrb	r0, [r0, #0]
1000fb4a:	9300      	str	r3, [sp, #0]
1000fb4c:	9501      	str	r5, [sp, #4]
1000fb4e:	8c25      	ldrh	r5, [r4, #32]
1000fb50:	1d62      	adds	r2, r4, #5
1000fb52:	9502      	str	r5, [sp, #8]
1000fb54:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000fb56:	9b07      	ldr	r3, [sp, #28]
1000fb58:	9503      	str	r5, [sp, #12]
1000fb5a:	9704      	str	r7, [sp, #16]
1000fb5c:	4d06      	ldr	r5, [pc, #24]	; (1000fb78 <at_ble_set_dev_config+0x88>)
1000fb5e:	47a8      	blx	r5
1000fb60:	7126      	strb	r6, [r4, #4]
1000fb62:	1c05      	adds	r5, r0, #0
1000fb64:	1c21      	adds	r1, r4, #0
1000fb66:	4803      	ldr	r0, [pc, #12]	; (1000fb74 <at_ble_set_dev_config+0x84>)
1000fb68:	2226      	movs	r2, #38	; 0x26
1000fb6a:	4b04      	ldr	r3, [pc, #16]	; (1000fb7c <at_ble_set_dev_config+0x8c>)
1000fb6c:	4798      	blx	r3
1000fb6e:	1c28      	adds	r0, r5, #0
1000fb70:	b009      	add	sp, #36	; 0x24
1000fb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb74:	100196e2 	.word	0x100196e2
1000fb78:	100118e5 	.word	0x100118e5
1000fb7c:	100143b7 	.word	0x100143b7

1000fb80 <at_ble_init>:
1000fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb82:	b087      	sub	sp, #28
1000fb84:	af03      	add	r7, sp, #12
1000fb86:	4954      	ldr	r1, [pc, #336]	; (1000fcd8 <at_ble_init+0x158>)
1000fb88:	220b      	movs	r2, #11
1000fb8a:	4b54      	ldr	r3, [pc, #336]	; (1000fcdc <at_ble_init+0x15c>)
1000fb8c:	1c04      	adds	r4, r0, #0
1000fb8e:	1c38      	adds	r0, r7, #0
1000fb90:	4798      	blx	r3
1000fb92:	2205      	movs	r2, #5
1000fb94:	4b52      	ldr	r3, [pc, #328]	; (1000fce0 <at_ble_init+0x160>)
1000fb96:	2640      	movs	r6, #64	; 0x40
1000fb98:	801a      	strh	r2, [r3, #0]
1000fb9a:	2300      	movs	r3, #0
1000fb9c:	4a51      	ldr	r2, [pc, #324]	; (1000fce4 <at_ble_init+0x164>)
1000fb9e:	6013      	str	r3, [r2, #0]
1000fba0:	4a51      	ldr	r2, [pc, #324]	; (1000fce8 <at_ble_init+0x168>)
1000fba2:	7013      	strb	r3, [r2, #0]
1000fba4:	4a51      	ldr	r2, [pc, #324]	; (1000fcec <at_ble_init+0x16c>)
1000fba6:	7013      	strb	r3, [r2, #0]
1000fba8:	4b51      	ldr	r3, [pc, #324]	; (1000fcf0 <at_ble_init+0x170>)
1000fbaa:	4798      	blx	r3
1000fbac:	4b51      	ldr	r3, [pc, #324]	; (1000fcf4 <at_ble_init+0x174>)
1000fbae:	4798      	blx	r3
1000fbb0:	4b51      	ldr	r3, [pc, #324]	; (1000fcf8 <at_ble_init+0x178>)
1000fbb2:	4798      	blx	r3
1000fbb4:	4b51      	ldr	r3, [pc, #324]	; (1000fcfc <at_ble_init+0x17c>)
1000fbb6:	4798      	blx	r3
1000fbb8:	2c00      	cmp	r4, #0
1000fbba:	d100      	bne.n	1000fbbe <at_ble_init+0x3e>
1000fbbc:	e089      	b.n	1000fcd2 <at_ble_init+0x152>
1000fbbe:	68a3      	ldr	r3, [r4, #8]
1000fbc0:	2b00      	cmp	r3, #0
1000fbc2:	d100      	bne.n	1000fbc6 <at_ble_init+0x46>
1000fbc4:	e085      	b.n	1000fcd2 <at_ble_init+0x152>
1000fbc6:	6923      	ldr	r3, [r4, #16]
1000fbc8:	2b00      	cmp	r3, #0
1000fbca:	d100      	bne.n	1000fbce <at_ble_init+0x4e>
1000fbcc:	e081      	b.n	1000fcd2 <at_ble_init+0x152>
1000fbce:	6820      	ldr	r0, [r4, #0]
1000fbd0:	2800      	cmp	r0, #0
1000fbd2:	d102      	bne.n	1000fbda <at_ble_init+0x5a>
1000fbd4:	6863      	ldr	r3, [r4, #4]
1000fbd6:	2b00      	cmp	r3, #0
1000fbd8:	d17b      	bne.n	1000fcd2 <at_ble_init+0x152>
1000fbda:	4b49      	ldr	r3, [pc, #292]	; (1000fd00 <at_ble_init+0x180>)
1000fbdc:	6861      	ldr	r1, [r4, #4]
1000fbde:	4798      	blx	r3
1000fbe0:	4b48      	ldr	r3, [pc, #288]	; (1000fd04 <at_ble_init+0x184>)
1000fbe2:	4798      	blx	r3
1000fbe4:	2801      	cmp	r0, #1
1000fbe6:	d901      	bls.n	1000fbec <at_ble_init+0x6c>
1000fbe8:	26e2      	movs	r6, #226	; 0xe2
1000fbea:	e072      	b.n	1000fcd2 <at_ble_init+0x152>
1000fbec:	4846      	ldr	r0, [pc, #280]	; (1000fd08 <at_ble_init+0x188>)
1000fbee:	4b47      	ldr	r3, [pc, #284]	; (1000fd0c <at_ble_init+0x18c>)
1000fbf0:	4798      	blx	r3
1000fbf2:	2800      	cmp	r0, #0
1000fbf4:	d1f8      	bne.n	1000fbe8 <at_ble_init+0x68>
1000fbf6:	1c20      	adds	r0, r4, #0
1000fbf8:	4b45      	ldr	r3, [pc, #276]	; (1000fd10 <at_ble_init+0x190>)
1000fbfa:	4798      	blx	r3
1000fbfc:	68e0      	ldr	r0, [r4, #12]
1000fbfe:	68a1      	ldr	r1, [r4, #8]
1000fc00:	4b44      	ldr	r3, [pc, #272]	; (1000fd14 <at_ble_init+0x194>)
1000fc02:	4798      	blx	r3
1000fc04:	466b      	mov	r3, sp
1000fc06:	2201      	movs	r2, #1
1000fc08:	1cdc      	adds	r4, r3, #3
1000fc0a:	1c20      	adds	r0, r4, #0
1000fc0c:	a901      	add	r1, sp, #4
1000fc0e:	4252      	negs	r2, r2
1000fc10:	4b41      	ldr	r3, [pc, #260]	; (1000fd18 <at_ble_init+0x198>)
1000fc12:	4798      	blx	r3
1000fc14:	2800      	cmp	r0, #0
1000fc16:	d102      	bne.n	1000fc1e <at_ble_init+0x9e>
1000fc18:	7823      	ldrb	r3, [r4, #0]
1000fc1a:	2b39      	cmp	r3, #57	; 0x39
1000fc1c:	d1f2      	bne.n	1000fc04 <at_ble_init+0x84>
1000fc1e:	4b3f      	ldr	r3, [pc, #252]	; (1000fd1c <at_ble_init+0x19c>)
1000fc20:	4798      	blx	r3
1000fc22:	1e06      	subs	r6, r0, #0
1000fc24:	d155      	bne.n	1000fcd2 <at_ble_init+0x152>
1000fc26:	1c03      	adds	r3, r0, #0
1000fc28:	2101      	movs	r1, #1
1000fc2a:	4a3d      	ldr	r2, [pc, #244]	; (1000fd20 <at_ble_init+0x1a0>)
1000fc2c:	4249      	negs	r1, r1
1000fc2e:	189a      	adds	r2, r3, r2
1000fc30:	3312      	adds	r3, #18
1000fc32:	8151      	strh	r1, [r2, #10]
1000fc34:	2b90      	cmp	r3, #144	; 0x90
1000fc36:	d1f7      	bne.n	1000fc28 <at_ble_init+0xa8>
1000fc38:	4c3a      	ldr	r4, [pc, #232]	; (1000fd24 <at_ble_init+0x1a4>)
1000fc3a:	3b81      	subs	r3, #129	; 0x81
1000fc3c:	7023      	strb	r3, [r4, #0]
1000fc3e:	4b3a      	ldr	r3, [pc, #232]	; (1000fd28 <at_ble_init+0x1a8>)
1000fc40:	4a3a      	ldr	r2, [pc, #232]	; (1000fd2c <at_ble_init+0x1ac>)
1000fc42:	8063      	strh	r3, [r4, #2]
1000fc44:	2300      	movs	r3, #0
1000fc46:	7123      	strb	r3, [r4, #4]
1000fc48:	3301      	adds	r3, #1
1000fc4a:	1e58      	subs	r0, r3, #1
1000fc4c:	0119      	lsls	r1, r3, #4
1000fc4e:	4301      	orrs	r1, r0
1000fc50:	3302      	adds	r3, #2
1000fc52:	7011      	strb	r1, [r2, #0]
1000fc54:	3201      	adds	r2, #1
1000fc56:	2b21      	cmp	r3, #33	; 0x21
1000fc58:	d1f7      	bne.n	1000fc4a <at_ble_init+0xca>
1000fc5a:	33e0      	adds	r3, #224	; 0xe0
1000fc5c:	33ff      	adds	r3, #255	; 0xff
1000fc5e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000fc60:	1c23      	adds	r3, r4, #0
1000fc62:	2500      	movs	r5, #0
1000fc64:	3373      	adds	r3, #115	; 0x73
1000fc66:	701d      	strb	r5, [r3, #0]
1000fc68:	1c23      	adds	r3, r4, #0
1000fc6a:	3372      	adds	r3, #114	; 0x72
1000fc6c:	701d      	strb	r5, [r3, #0]
1000fc6e:	1c23      	adds	r3, r4, #0
1000fc70:	3376      	adds	r3, #118	; 0x76
1000fc72:	701d      	strb	r5, [r3, #0]
1000fc74:	1c23      	adds	r3, r4, #0
1000fc76:	33cc      	adds	r3, #204	; 0xcc
1000fc78:	801d      	strh	r5, [r3, #0]
1000fc7a:	1c22      	adds	r2, r4, #0
1000fc7c:	23a0      	movs	r3, #160	; 0xa0
1000fc7e:	32d0      	adds	r2, #208	; 0xd0
1000fc80:	005b      	lsls	r3, r3, #1
1000fc82:	8013      	strh	r3, [r2, #0]
1000fc84:	1c22      	adds	r2, r4, #0
1000fc86:	32ce      	adds	r2, #206	; 0xce
1000fc88:	8013      	strh	r3, [r2, #0]
1000fc8a:	1c23      	adds	r3, r4, #0
1000fc8c:	33d2      	adds	r3, #210	; 0xd2
1000fc8e:	801d      	strh	r5, [r3, #0]
1000fc90:	22fa      	movs	r2, #250	; 0xfa
1000fc92:	1c23      	adds	r3, r4, #0
1000fc94:	0052      	lsls	r2, r2, #1
1000fc96:	33d4      	adds	r3, #212	; 0xd4
1000fc98:	801a      	strh	r2, [r3, #0]
1000fc9a:	1c23      	adds	r3, r4, #0
1000fc9c:	33d6      	adds	r3, #214	; 0xd6
1000fc9e:	701d      	strb	r5, [r3, #0]
1000fca0:	1c20      	adds	r0, r4, #0
1000fca2:	4b23      	ldr	r3, [pc, #140]	; (1000fd30 <at_ble_init+0x1b0>)
1000fca4:	76e5      	strb	r5, [r4, #27]
1000fca6:	7725      	strb	r5, [r4, #28]
1000fca8:	7765      	strb	r5, [r4, #29]
1000fcaa:	77a5      	strb	r5, [r4, #30]
1000fcac:	77e5      	strb	r5, [r4, #31]
1000fcae:	8425      	strh	r5, [r4, #32]
1000fcb0:	8465      	strh	r5, [r4, #34]	; 0x22
1000fcb2:	4798      	blx	r3
1000fcb4:	1c23      	adds	r3, r4, #0
1000fcb6:	2207      	movs	r2, #7
1000fcb8:	3374      	adds	r3, #116	; 0x74
1000fcba:	701a      	strb	r2, [r3, #0]
1000fcbc:	1c23      	adds	r3, r4, #0
1000fcbe:	3204      	adds	r2, #4
1000fcc0:	33aa      	adds	r3, #170	; 0xaa
1000fcc2:	801a      	strh	r2, [r3, #0]
1000fcc4:	1c2b      	adds	r3, r5, #0
1000fcc6:	5d7a      	ldrb	r2, [r7, r5]
1000fcc8:	33ac      	adds	r3, #172	; 0xac
1000fcca:	3501      	adds	r5, #1
1000fccc:	54e2      	strb	r2, [r4, r3]
1000fcce:	2d0b      	cmp	r5, #11
1000fcd0:	d1f8      	bne.n	1000fcc4 <at_ble_init+0x144>
1000fcd2:	1c30      	adds	r0, r6, #0
1000fcd4:	b007      	add	sp, #28
1000fcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fcd8:	10016a88 	.word	0x10016a88
1000fcdc:	100143b7 	.word	0x100143b7
1000fce0:	10019650 	.word	0x10019650
1000fce4:	100187e4 	.word	0x100187e4
1000fce8:	10018744 	.word	0x10018744
1000fcec:	10016cb0 	.word	0x10016cb0
1000fcf0:	10012335 	.word	0x10012335
1000fcf4:	1000fff1 	.word	0x1000fff1
1000fcf8:	10010651 	.word	0x10010651
1000fcfc:	10010905 	.word	0x10010905
1000fd00:	1001068d 	.word	0x1001068d
1000fd04:	1000e721 	.word	0x1000e721
1000fd08:	10010c05 	.word	0x10010c05
1000fd0c:	1000e965 	.word	0x1000e965
1000fd10:	10010cad 	.word	0x10010cad
1000fd14:	1000f26d 	.word	0x1000f26d
1000fd18:	1000f329 	.word	0x1000f329
1000fd1c:	10011875 	.word	0x10011875
1000fd20:	10019652 	.word	0x10019652
1000fd24:	100196e2 	.word	0x100196e2
1000fd28:	00003a98 	.word	0x00003a98
1000fd2c:	100196ed 	.word	0x100196ed
1000fd30:	1000faf1 	.word	0x1000faf1

1000fd34 <at_ble_addr_set>:
1000fd34:	b538      	push	{r3, r4, r5, lr}
1000fd36:	1c45      	adds	r5, r0, #1
1000fd38:	1c03      	adds	r3, r0, #0
1000fd3a:	20cf      	movs	r0, #207	; 0xcf
1000fd3c:	2d00      	cmp	r5, #0
1000fd3e:	d018      	beq.n	1000fd72 <at_ble_addr_set+0x3e>
1000fd40:	781a      	ldrb	r2, [r3, #0]
1000fd42:	2a03      	cmp	r2, #3
1000fd44:	d815      	bhi.n	1000fd72 <at_ble_addr_set+0x3e>
1000fd46:	2a01      	cmp	r2, #1
1000fd48:	d102      	bne.n	1000fd50 <at_ble_addr_set+0x1c>
1000fd4a:	785a      	ldrb	r2, [r3, #1]
1000fd4c:	2a00      	cmp	r2, #0
1000fd4e:	d010      	beq.n	1000fd72 <at_ble_addr_set+0x3e>
1000fd50:	1c1c      	adds	r4, r3, #0
1000fd52:	1c29      	adds	r1, r5, #0
1000fd54:	2206      	movs	r2, #6
1000fd56:	4b07      	ldr	r3, [pc, #28]	; (1000fd74 <at_ble_addr_set+0x40>)
1000fd58:	4807      	ldr	r0, [pc, #28]	; (1000fd78 <at_ble_addr_set+0x44>)
1000fd5a:	4798      	blx	r3
1000fd5c:	7823      	ldrb	r3, [r4, #0]
1000fd5e:	4807      	ldr	r0, [pc, #28]	; (1000fd7c <at_ble_addr_set+0x48>)
1000fd60:	7103      	strb	r3, [r0, #4]
1000fd62:	4b07      	ldr	r3, [pc, #28]	; (1000fd80 <at_ble_addr_set+0x4c>)
1000fd64:	4798      	blx	r3
1000fd66:	7823      	ldrb	r3, [r4, #0]
1000fd68:	2b00      	cmp	r3, #0
1000fd6a:	d102      	bne.n	1000fd72 <at_ble_addr_set+0x3e>
1000fd6c:	1c28      	adds	r0, r5, #0
1000fd6e:	4b05      	ldr	r3, [pc, #20]	; (1000fd84 <at_ble_addr_set+0x50>)
1000fd70:	4798      	blx	r3
1000fd72:	bd38      	pop	{r3, r4, r5, pc}
1000fd74:	100143b7 	.word	0x100143b7
1000fd78:	100196e7 	.word	0x100196e7
1000fd7c:	100196e2 	.word	0x100196e2
1000fd80:	1000faf1 	.word	0x1000faf1
1000fd84:	10010d31 	.word	0x10010d31

1000fd88 <at_ble_adv_data_set>:
1000fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fd8a:	4684      	mov	ip, r0
1000fd8c:	1c0f      	adds	r7, r1, #0
1000fd8e:	1c16      	adds	r6, r2, #0
1000fd90:	1c1c      	adds	r4, r3, #0
1000fd92:	2800      	cmp	r0, #0
1000fd94:	d102      	bne.n	1000fd9c <at_ble_adv_data_set+0x14>
1000fd96:	20e2      	movs	r0, #226	; 0xe2
1000fd98:	2a00      	cmp	r2, #0
1000fd9a:	d02b      	beq.n	1000fdf4 <at_ble_adv_data_set+0x6c>
1000fd9c:	20cf      	movs	r0, #207	; 0xcf
1000fd9e:	2f1f      	cmp	r7, #31
1000fda0:	d828      	bhi.n	1000fdf4 <at_ble_adv_data_set+0x6c>
1000fda2:	2c1f      	cmp	r4, #31
1000fda4:	d826      	bhi.n	1000fdf4 <at_ble_adv_data_set+0x6c>
1000fda6:	4663      	mov	r3, ip
1000fda8:	2b00      	cmp	r3, #0
1000fdaa:	d00e      	beq.n	1000fdca <at_ble_adv_data_set+0x42>
1000fdac:	4812      	ldr	r0, [pc, #72]	; (1000fdf8 <at_ble_adv_data_set+0x70>)
1000fdae:	4d13      	ldr	r5, [pc, #76]	; (1000fdfc <at_ble_adv_data_set+0x74>)
1000fdb0:	2f00      	cmp	r7, #0
1000fdb2:	d104      	bne.n	1000fdbe <at_ble_adv_data_set+0x36>
1000fdb4:	1c39      	adds	r1, r7, #0
1000fdb6:	221f      	movs	r2, #31
1000fdb8:	4b11      	ldr	r3, [pc, #68]	; (1000fe00 <at_ble_adv_data_set+0x78>)
1000fdba:	4798      	blx	r3
1000fdbc:	e003      	b.n	1000fdc6 <at_ble_adv_data_set+0x3e>
1000fdbe:	4661      	mov	r1, ip
1000fdc0:	1c3a      	adds	r2, r7, #0
1000fdc2:	4b10      	ldr	r3, [pc, #64]	; (1000fe04 <at_ble_adv_data_set+0x7c>)
1000fdc4:	4798      	blx	r3
1000fdc6:	3572      	adds	r5, #114	; 0x72
1000fdc8:	702f      	strb	r7, [r5, #0]
1000fdca:	1e30      	subs	r0, r6, #0
1000fdcc:	d012      	beq.n	1000fdf4 <at_ble_adv_data_set+0x6c>
1000fdce:	4d0b      	ldr	r5, [pc, #44]	; (1000fdfc <at_ble_adv_data_set+0x74>)
1000fdd0:	480d      	ldr	r0, [pc, #52]	; (1000fe08 <at_ble_adv_data_set+0x80>)
1000fdd2:	2c00      	cmp	r4, #0
1000fdd4:	d107      	bne.n	1000fde6 <at_ble_adv_data_set+0x5e>
1000fdd6:	1c21      	adds	r1, r4, #0
1000fdd8:	221f      	movs	r2, #31
1000fdda:	4b09      	ldr	r3, [pc, #36]	; (1000fe00 <at_ble_adv_data_set+0x78>)
1000fddc:	3573      	adds	r5, #115	; 0x73
1000fdde:	4798      	blx	r3
1000fde0:	702c      	strb	r4, [r5, #0]
1000fde2:	1c20      	adds	r0, r4, #0
1000fde4:	e006      	b.n	1000fdf4 <at_ble_adv_data_set+0x6c>
1000fde6:	1c31      	adds	r1, r6, #0
1000fde8:	1c22      	adds	r2, r4, #0
1000fdea:	4b06      	ldr	r3, [pc, #24]	; (1000fe04 <at_ble_adv_data_set+0x7c>)
1000fdec:	4798      	blx	r3
1000fdee:	2000      	movs	r0, #0
1000fdf0:	3573      	adds	r5, #115	; 0x73
1000fdf2:	702c      	strb	r4, [r5, #0]
1000fdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fdf6:	46c0      	nop			; (mov r8, r8)
1000fdf8:	10019716 	.word	0x10019716
1000fdfc:	100196e2 	.word	0x100196e2
1000fe00:	100143c9 	.word	0x100143c9
1000fe04:	100143b7 	.word	0x100143b7
1000fe08:	10019735 	.word	0x10019735

1000fe0c <at_ble_adv_start>:
1000fe0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe0e:	b091      	sub	sp, #68	; 0x44
1000fe10:	1c1f      	adds	r7, r3, #0
1000fe12:	ab16      	add	r3, sp, #88	; 0x58
1000fe14:	881d      	ldrh	r5, [r3, #0]
1000fe16:	ab17      	add	r3, sp, #92	; 0x5c
1000fe18:	881b      	ldrh	r3, [r3, #0]
1000fe1a:	910d      	str	r1, [sp, #52]	; 0x34
1000fe1c:	930e      	str	r3, [sp, #56]	; 0x38
1000fe1e:	ab18      	add	r3, sp, #96	; 0x60
1000fe20:	781b      	ldrb	r3, [r3, #0]
1000fe22:	1c04      	adds	r4, r0, #0
1000fe24:	930f      	str	r3, [sp, #60]	; 0x3c
1000fe26:	4b42      	ldr	r3, [pc, #264]	; (1000ff30 <at_ble_adv_start+0x124>)
1000fe28:	1c16      	adds	r6, r2, #0
1000fe2a:	3373      	adds	r3, #115	; 0x73
1000fe2c:	781b      	ldrb	r3, [r3, #0]
1000fe2e:	20cf      	movs	r0, #207	; 0xcf
1000fe30:	930c      	str	r3, [sp, #48]	; 0x30
1000fe32:	2c01      	cmp	r4, #1
1000fe34:	d103      	bne.n	1000fe3e <at_ble_adv_start+0x32>
1000fe36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000fe38:	2b00      	cmp	r3, #0
1000fe3a:	d176      	bne.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe3c:	e024      	b.n	1000fe88 <at_ble_adv_start+0x7c>
1000fe3e:	2c04      	cmp	r4, #4
1000fe40:	d873      	bhi.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe42:	2380      	movs	r3, #128	; 0x80
1000fe44:	01db      	lsls	r3, r3, #7
1000fe46:	429d      	cmp	r5, r3
1000fe48:	d86f      	bhi.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe4a:	2c00      	cmp	r4, #0
1000fe4c:	d102      	bne.n	1000fe54 <at_ble_adv_start+0x48>
1000fe4e:	2d1f      	cmp	r5, #31
1000fe50:	d96b      	bls.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe52:	e003      	b.n	1000fe5c <at_ble_adv_start+0x50>
1000fe54:	2d9f      	cmp	r5, #159	; 0x9f
1000fe56:	d801      	bhi.n	1000fe5c <at_ble_adv_start+0x50>
1000fe58:	2c01      	cmp	r4, #1
1000fe5a:	d166      	bne.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe5c:	2f00      	cmp	r7, #0
1000fe5e:	d009      	beq.n	1000fe74 <at_ble_adv_start+0x68>
1000fe60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fe62:	20cf      	movs	r0, #207	; 0xcf
1000fe64:	3b01      	subs	r3, #1
1000fe66:	2b01      	cmp	r3, #1
1000fe68:	d95f      	bls.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe6a:	2c01      	cmp	r4, #1
1000fe6c:	d102      	bne.n	1000fe74 <at_ble_adv_start+0x68>
1000fe6e:	2d00      	cmp	r5, #0
1000fe70:	d100      	bne.n	1000fe74 <at_ble_adv_start+0x68>
1000fe72:	3520      	adds	r5, #32
1000fe74:	4b2f      	ldr	r3, [pc, #188]	; (1000ff34 <at_ble_adv_start+0x128>)
1000fe76:	4798      	blx	r3
1000fe78:	1c01      	adds	r1, r0, #0
1000fe7a:	2e00      	cmp	r6, #0
1000fe7c:	d043      	beq.n	1000ff06 <at_ble_adv_start+0xfa>
1000fe7e:	7833      	ldrb	r3, [r6, #0]
1000fe80:	1e60      	subs	r0, r4, #1
1000fe82:	2b00      	cmp	r3, #0
1000fe84:	d109      	bne.n	1000fe9a <at_ble_adv_start+0x8e>
1000fe86:	e03b      	b.n	1000ff00 <at_ble_adv_start+0xf4>
1000fe88:	2380      	movs	r3, #128	; 0x80
1000fe8a:	01db      	lsls	r3, r3, #7
1000fe8c:	429d      	cmp	r5, r3
1000fe8e:	d84c      	bhi.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe90:	2e00      	cmp	r6, #0
1000fe92:	d04a      	beq.n	1000ff2a <at_ble_adv_start+0x11e>
1000fe94:	2f00      	cmp	r7, #0
1000fe96:	d1e3      	bne.n	1000fe60 <at_ble_adv_start+0x54>
1000fe98:	e02b      	b.n	1000fef2 <at_ble_adv_start+0xe6>
1000fe9a:	2301      	movs	r3, #1
1000fe9c:	2803      	cmp	r0, #3
1000fe9e:	d93a      	bls.n	1000ff16 <at_ble_adv_start+0x10a>
1000fea0:	200d      	movs	r0, #13
1000fea2:	1c72      	adds	r2, r6, #1
1000fea4:	e002      	b.n	1000feac <at_ble_adv_start+0xa0>
1000fea6:	200e      	movs	r0, #14
1000fea8:	1e32      	subs	r2, r6, #0
1000feaa:	d1fa      	bne.n	1000fea2 <at_ble_adv_start+0x96>
1000feac:	4c20      	ldr	r4, [pc, #128]	; (1000ff30 <at_ble_adv_start+0x124>)
1000feae:	3474      	adds	r4, #116	; 0x74
1000feb0:	7826      	ldrb	r6, [r4, #0]
1000feb2:	2407      	movs	r4, #7
1000feb4:	2e00      	cmp	r6, #0
1000feb6:	d000      	beq.n	1000feba <at_ble_adv_start+0xae>
1000feb8:	1c34      	adds	r4, r6, #0
1000feba:	9200      	str	r2, [sp, #0]
1000febc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000febe:	9403      	str	r4, [sp, #12]
1000fec0:	9204      	str	r2, [sp, #16]
1000fec2:	4a1b      	ldr	r2, [pc, #108]	; (1000ff30 <at_ble_adv_start+0x124>)
1000fec4:	9501      	str	r5, [sp, #4]
1000fec6:	9502      	str	r5, [sp, #8]
1000fec8:	9705      	str	r7, [sp, #20]
1000feca:	3272      	adds	r2, #114	; 0x72
1000fecc:	7812      	ldrb	r2, [r2, #0]
1000fece:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000fed0:	9206      	str	r2, [sp, #24]
1000fed2:	4a19      	ldr	r2, [pc, #100]	; (1000ff38 <at_ble_adv_start+0x12c>)
1000fed4:	9207      	str	r2, [sp, #28]
1000fed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000fed8:	9208      	str	r2, [sp, #32]
1000feda:	4a18      	ldr	r2, [pc, #96]	; (1000ff3c <at_ble_adv_start+0x130>)
1000fedc:	9209      	str	r2, [sp, #36]	; 0x24
1000fede:	2264      	movs	r2, #100	; 0x64
1000fee0:	4362      	muls	r2, r4
1000fee2:	b292      	uxth	r2, r2
1000fee4:	920a      	str	r2, [sp, #40]	; 0x28
1000fee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000fee8:	4c15      	ldr	r4, [pc, #84]	; (1000ff40 <at_ble_adv_start+0x134>)
1000feea:	920b      	str	r2, [sp, #44]	; 0x2c
1000feec:	4a15      	ldr	r2, [pc, #84]	; (1000ff44 <at_ble_adv_start+0x138>)
1000feee:	47a0      	blx	r4
1000fef0:	e01b      	b.n	1000ff2a <at_ble_adv_start+0x11e>
1000fef2:	2d00      	cmp	r5, #0
1000fef4:	d1be      	bne.n	1000fe74 <at_ble_adv_start+0x68>
1000fef6:	4b0f      	ldr	r3, [pc, #60]	; (1000ff34 <at_ble_adv_start+0x128>)
1000fef8:	4798      	blx	r3
1000fefa:	2520      	movs	r5, #32
1000fefc:	1c01      	adds	r1, r0, #0
1000fefe:	e7be      	b.n	1000fe7e <at_ble_adv_start+0x72>
1000ff00:	2803      	cmp	r0, #3
1000ff02:	d8cd      	bhi.n	1000fea0 <at_ble_adv_start+0x94>
1000ff04:	e006      	b.n	1000ff14 <at_ble_adv_start+0x108>
1000ff06:	1e60      	subs	r0, r4, #1
1000ff08:	2803      	cmp	r0, #3
1000ff0a:	d903      	bls.n	1000ff14 <at_ble_adv_start+0x108>
1000ff0c:	1c33      	adds	r3, r6, #0
1000ff0e:	200d      	movs	r0, #13
1000ff10:	1c32      	adds	r2, r6, #0
1000ff12:	e7cb      	b.n	1000feac <at_ble_adv_start+0xa0>
1000ff14:	2300      	movs	r3, #0
1000ff16:	f002 fb7f 	bl	10012618 <__gnu_thumb1_case_sqi>
1000ff1a:	06c6      	.short	0x06c6
1000ff1c:	0204      	.short	0x0204
1000ff1e:	200f      	movs	r0, #15
1000ff20:	e7c2      	b.n	1000fea8 <at_ble_adv_start+0x9c>
1000ff22:	2200      	movs	r2, #0
1000ff24:	920c      	str	r2, [sp, #48]	; 0x30
1000ff26:	200c      	movs	r0, #12
1000ff28:	e7be      	b.n	1000fea8 <at_ble_adv_start+0x9c>
1000ff2a:	b011      	add	sp, #68	; 0x44
1000ff2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff2e:	46c0      	nop			; (mov r8, r8)
1000ff30:	100196e2 	.word	0x100196e2
1000ff34:	10011dc1 	.word	0x10011dc1
1000ff38:	10019716 	.word	0x10019716
1000ff3c:	10019735 	.word	0x10019735
1000ff40:	10011ca1 	.word	0x10011ca1
1000ff44:	00003a98 	.word	0x00003a98

1000ff48 <at_ble_adv_stop>:
1000ff48:	b508      	push	{r3, lr}
1000ff4a:	4b01      	ldr	r3, [pc, #4]	; (1000ff50 <at_ble_adv_stop+0x8>)
1000ff4c:	4798      	blx	r3
1000ff4e:	bd08      	pop	{r3, pc}
1000ff50:	10011acd 	.word	0x10011acd

1000ff54 <at_ble_scan_stop>:
1000ff54:	b510      	push	{r4, lr}
1000ff56:	4b05      	ldr	r3, [pc, #20]	; (1000ff6c <at_ble_scan_stop+0x18>)
1000ff58:	4798      	blx	r3
1000ff5a:	1e04      	subs	r4, r0, #0
1000ff5c:	d103      	bne.n	1000ff66 <at_ble_scan_stop+0x12>
1000ff5e:	20d1      	movs	r0, #209	; 0xd1
1000ff60:	4b03      	ldr	r3, [pc, #12]	; (1000ff70 <at_ble_scan_stop+0x1c>)
1000ff62:	0100      	lsls	r0, r0, #4
1000ff64:	4798      	blx	r3
1000ff66:	1c20      	adds	r0, r4, #0
1000ff68:	bd10      	pop	{r4, pc}
1000ff6a:	46c0      	nop			; (mov r8, r8)
1000ff6c:	10011acd 	.word	0x10011acd
1000ff70:	1000fa01 	.word	0x1000fa01

1000ff74 <at_ble_disconnect>:
1000ff74:	b538      	push	{r3, r4, r5, lr}
1000ff76:	1c04      	adds	r4, r0, #0
1000ff78:	4b04      	ldr	r3, [pc, #16]	; (1000ff8c <at_ble_disconnect+0x18>)
1000ff7a:	1c08      	adds	r0, r1, #0
1000ff7c:	1c21      	adds	r1, r4, #0
1000ff7e:	4798      	blx	r3
1000ff80:	1c05      	adds	r5, r0, #0
1000ff82:	4b03      	ldr	r3, [pc, #12]	; (1000ff90 <at_ble_disconnect+0x1c>)
1000ff84:	1c20      	adds	r0, r4, #0
1000ff86:	4798      	blx	r3
1000ff88:	1c28      	adds	r0, r5, #0
1000ff8a:	bd38      	pop	{r3, r4, r5, pc}
1000ff8c:	10011145 	.word	0x10011145
1000ff90:	1000fa45 	.word	0x1000fa45

1000ff94 <at_ble_conn_update_reply>:
1000ff94:	b510      	push	{r4, lr}
1000ff96:	4c01      	ldr	r4, [pc, #4]	; (1000ff9c <at_ble_conn_update_reply+0x8>)
1000ff98:	47a0      	blx	r4
1000ff9a:	bd10      	pop	{r4, pc}
1000ff9c:	10011635 	.word	0x10011635

1000ffa0 <at_ble_random_address_resolve>:
1000ffa0:	b510      	push	{r4, lr}
1000ffa2:	23cf      	movs	r3, #207	; 0xcf
1000ffa4:	2800      	cmp	r0, #0
1000ffa6:	d00a      	beq.n	1000ffbe <at_ble_random_address_resolve+0x1e>
1000ffa8:	2900      	cmp	r1, #0
1000ffaa:	d008      	beq.n	1000ffbe <at_ble_random_address_resolve+0x1e>
1000ffac:	2a00      	cmp	r2, #0
1000ffae:	d006      	beq.n	1000ffbe <at_ble_random_address_resolve+0x1e>
1000ffb0:	780c      	ldrb	r4, [r1, #0]
1000ffb2:	2c02      	cmp	r4, #2
1000ffb4:	d103      	bne.n	1000ffbe <at_ble_random_address_resolve+0x1e>
1000ffb6:	4b03      	ldr	r3, [pc, #12]	; (1000ffc4 <at_ble_random_address_resolve+0x24>)
1000ffb8:	3101      	adds	r1, #1
1000ffba:	4798      	blx	r3
1000ffbc:	2300      	movs	r3, #0
1000ffbe:	1c18      	adds	r0, r3, #0
1000ffc0:	bd10      	pop	{r4, pc}
1000ffc2:	46c0      	nop			; (mov r8, r8)
1000ffc4:	10011e61 	.word	0x10011e61

1000ffc8 <at_ble_uuid_type2len>:
1000ffc8:	23cf      	movs	r3, #207	; 0xcf
1000ffca:	2802      	cmp	r0, #2
1000ffcc:	d801      	bhi.n	1000ffd2 <at_ble_uuid_type2len+0xa>
1000ffce:	4b02      	ldr	r3, [pc, #8]	; (1000ffd8 <at_ble_uuid_type2len+0x10>)
1000ffd0:	5c1b      	ldrb	r3, [r3, r0]
1000ffd2:	1c18      	adds	r0, r3, #0
1000ffd4:	4770      	bx	lr
1000ffd6:	46c0      	nop			; (mov r8, r8)
1000ffd8:	10016a93 	.word	0x10016a93

1000ffdc <at_ble_uuid_len2type>:
1000ffdc:	1e83      	subs	r3, r0, #2
1000ffde:	b2db      	uxtb	r3, r3
1000ffe0:	2003      	movs	r0, #3
1000ffe2:	2b0e      	cmp	r3, #14
1000ffe4:	d801      	bhi.n	1000ffea <at_ble_uuid_len2type+0xe>
1000ffe6:	4a01      	ldr	r2, [pc, #4]	; (1000ffec <at_ble_uuid_len2type+0x10>)
1000ffe8:	5cd0      	ldrb	r0, [r2, r3]
1000ffea:	4770      	bx	lr
1000ffec:	10016a96 	.word	0x10016a96

1000fff0 <init_gatt_client_module>:
1000fff0:	2200      	movs	r2, #0
1000fff2:	4b01      	ldr	r3, [pc, #4]	; (1000fff8 <init_gatt_client_module+0x8>)
1000fff4:	801a      	strh	r2, [r3, #0]
1000fff6:	4770      	bx	lr
1000fff8:	1001873c 	.word	0x1001873c

1000fffc <db_searchATT>:
1000fffc:	b570      	push	{r4, r5, r6, lr}
1000fffe:	1c05      	adds	r5, r0, #0
10010000:	2400      	movs	r4, #0
10010002:	4b0c      	ldr	r3, [pc, #48]	; (10010034 <db_searchATT+0x38>)
10010004:	6819      	ldr	r1, [r3, #0]
10010006:	4b0c      	ldr	r3, [pc, #48]	; (10010038 <db_searchATT+0x3c>)
10010008:	681e      	ldr	r6, [r3, #0]
1001000a:	428c      	cmp	r4, r1
1001000c:	dc10      	bgt.n	10010030 <db_searchATT+0x34>
1001000e:	200c      	movs	r0, #12
10010010:	1863      	adds	r3, r4, r1
10010012:	0fda      	lsrs	r2, r3, #31
10010014:	18d3      	adds	r3, r2, r3
10010016:	1c02      	adds	r2, r0, #0
10010018:	105b      	asrs	r3, r3, #1
1001001a:	435a      	muls	r2, r3
1001001c:	18b0      	adds	r0, r6, r2
1001001e:	8802      	ldrh	r2, [r0, #0]
10010020:	42aa      	cmp	r2, r5
10010022:	d201      	bcs.n	10010028 <db_searchATT+0x2c>
10010024:	1e59      	subs	r1, r3, #1
10010026:	e7f0      	b.n	1001000a <db_searchATT+0xe>
10010028:	42aa      	cmp	r2, r5
1001002a:	d902      	bls.n	10010032 <db_searchATT+0x36>
1001002c:	1c5c      	adds	r4, r3, #1
1001002e:	e7ec      	b.n	1001000a <db_searchATT+0xe>
10010030:	2000      	movs	r0, #0
10010032:	bd70      	pop	{r4, r5, r6, pc}
10010034:	10018750 	.word	0x10018750
10010038:	10018748 	.word	0x10018748

1001003c <att_permissions>:
1001003c:	b530      	push	{r4, r5, lr}
1001003e:	2403      	movs	r4, #3
10010040:	1c05      	adds	r5, r0, #0
10010042:	2301      	movs	r3, #1
10010044:	4025      	ands	r5, r4
10010046:	42a5      	cmp	r5, r4
10010048:	d009      	beq.n	1001005e <att_permissions+0x22>
1001004a:	1c23      	adds	r3, r4, #0
1001004c:	1924      	adds	r4, r4, r4
1001004e:	4220      	tst	r0, r4
10010050:	d105      	bne.n	1001005e <att_permissions+0x22>
10010052:	3b02      	subs	r3, #2
10010054:	4218      	tst	r0, r3
10010056:	d102      	bne.n	1001005e <att_permissions+0x22>
10010058:	1e4b      	subs	r3, r1, #1
1001005a:	4199      	sbcs	r1, r3
1001005c:	b28b      	uxth	r3, r1
1001005e:	2130      	movs	r1, #48	; 0x30
10010060:	4001      	ands	r1, r0
10010062:	2930      	cmp	r1, #48	; 0x30
10010064:	d007      	beq.n	10010076 <att_permissions+0x3a>
10010066:	0641      	lsls	r1, r0, #25
10010068:	d401      	bmi.n	1001006e <att_permissions+0x32>
1001006a:	0681      	lsls	r1, r0, #26
1001006c:	d501      	bpl.n	10010072 <att_permissions+0x36>
1001006e:	4807      	ldr	r0, [pc, #28]	; (1001008c <att_permissions+0x50>)
10010070:	e009      	b.n	10010086 <att_permissions+0x4a>
10010072:	06c1      	lsls	r1, r0, #27
10010074:	d501      	bpl.n	1001007a <att_permissions+0x3e>
10010076:	4806      	ldr	r0, [pc, #24]	; (10010090 <att_permissions+0x54>)
10010078:	e005      	b.n	10010086 <att_permissions+0x4a>
1001007a:	2a00      	cmp	r2, #0
1001007c:	d001      	beq.n	10010082 <att_permissions+0x46>
1001007e:	2204      	movs	r2, #4
10010080:	4313      	orrs	r3, r2
10010082:	2080      	movs	r0, #128	; 0x80
10010084:	0180      	lsls	r0, r0, #6
10010086:	4318      	orrs	r0, r3
10010088:	bd30      	pop	{r4, r5, pc}
1001008a:	46c0      	nop			; (mov r8, r8)
1001008c:	0000200c 	.word	0x0000200c
10010090:	00002004 	.word	0x00002004

10010094 <char_permissions>:
10010094:	b530      	push	{r4, r5, lr}
10010096:	2300      	movs	r3, #0
10010098:	0784      	lsls	r4, r0, #30
1001009a:	d503      	bpl.n	100100a4 <char_permissions+0x10>
1001009c:	3301      	adds	r3, #1
1001009e:	4219      	tst	r1, r3
100100a0:	d100      	bne.n	100100a4 <char_permissions+0x10>
100100a2:	3302      	adds	r3, #2
100100a4:	0704      	lsls	r4, r0, #28
100100a6:	d508      	bpl.n	100100ba <char_permissions+0x26>
100100a8:	06cc      	lsls	r4, r1, #27
100100aa:	d501      	bpl.n	100100b0 <char_permissions+0x1c>
100100ac:	2404      	movs	r4, #4
100100ae:	e000      	b.n	100100b2 <char_permissions+0x1e>
100100b0:	240c      	movs	r4, #12
100100b2:	4323      	orrs	r3, r4
100100b4:	2480      	movs	r4, #128	; 0x80
100100b6:	01a4      	lsls	r4, r4, #6
100100b8:	4323      	orrs	r3, r4
100100ba:	0684      	lsls	r4, r0, #26
100100bc:	d506      	bpl.n	100100cc <char_permissions+0x38>
100100be:	2406      	movs	r4, #6
100100c0:	4221      	tst	r1, r4
100100c2:	d101      	bne.n	100100c8 <char_permissions+0x34>
100100c4:	340a      	adds	r4, #10
100100c6:	e000      	b.n	100100ca <char_permissions+0x36>
100100c8:	2430      	movs	r4, #48	; 0x30
100100ca:	4323      	orrs	r3, r4
100100cc:	06c4      	lsls	r4, r0, #27
100100ce:	d506      	bpl.n	100100de <char_permissions+0x4a>
100100d0:	2406      	movs	r4, #6
100100d2:	4221      	tst	r1, r4
100100d4:	d101      	bne.n	100100da <char_permissions+0x46>
100100d6:	343a      	adds	r4, #58	; 0x3a
100100d8:	e000      	b.n	100100dc <char_permissions+0x48>
100100da:	24c0      	movs	r4, #192	; 0xc0
100100dc:	4323      	orrs	r3, r4
100100de:	2480      	movs	r4, #128	; 0x80
100100e0:	0064      	lsls	r4, r4, #1
100100e2:	4220      	tst	r0, r4
100100e4:	d000      	beq.n	100100e8 <char_permissions+0x54>
100100e6:	4323      	orrs	r3, r4
100100e8:	07c4      	lsls	r4, r0, #31
100100ea:	d502      	bpl.n	100100f2 <char_permissions+0x5e>
100100ec:	2480      	movs	r4, #128	; 0x80
100100ee:	00a4      	lsls	r4, r4, #2
100100f0:	4323      	orrs	r3, r4
100100f2:	2404      	movs	r4, #4
100100f4:	4220      	tst	r0, r4
100100f6:	d006      	beq.n	10010106 <char_permissions+0x72>
100100f8:	06cd      	lsls	r5, r1, #27
100100fa:	d400      	bmi.n	100100fe <char_permissions+0x6a>
100100fc:	240c      	movs	r4, #12
100100fe:	4323      	orrs	r3, r4
10010100:	2480      	movs	r4, #128	; 0x80
10010102:	0124      	lsls	r4, r4, #4
10010104:	4323      	orrs	r3, r4
10010106:	0644      	lsls	r4, r0, #25
10010108:	d501      	bpl.n	1001010e <char_permissions+0x7a>
1001010a:	4c08      	ldr	r4, [pc, #32]	; (1001012c <char_permissions+0x98>)
1001010c:	4323      	orrs	r3, r4
1001010e:	0600      	lsls	r0, r0, #24
10010110:	d507      	bpl.n	10010122 <char_permissions+0x8e>
10010112:	2004      	movs	r0, #4
10010114:	06c9      	lsls	r1, r1, #27
10010116:	d400      	bmi.n	1001011a <char_permissions+0x86>
10010118:	200c      	movs	r0, #12
1001011a:	4303      	orrs	r3, r0
1001011c:	2084      	movs	r0, #132	; 0x84
1001011e:	0180      	lsls	r0, r0, #6
10010120:	4303      	orrs	r3, r0
10010122:	0390      	lsls	r0, r2, #14
10010124:	4303      	orrs	r3, r0
10010126:	b298      	uxth	r0, r3
10010128:	bd30      	pop	{r4, r5, pc}
1001012a:	46c0      	nop			; (mov r8, r8)
1001012c:	00001004 	.word	0x00001004

10010130 <presentation_format_define>:
10010130:	b507      	push	{r0, r1, r2, lr}
10010132:	466a      	mov	r2, sp
10010134:	780b      	ldrb	r3, [r1, #0]
10010136:	7013      	strb	r3, [r2, #0]
10010138:	784b      	ldrb	r3, [r1, #1]
1001013a:	7053      	strb	r3, [r2, #1]
1001013c:	884b      	ldrh	r3, [r1, #2]
1001013e:	7093      	strb	r3, [r2, #2]
10010140:	0a1b      	lsrs	r3, r3, #8
10010142:	70d3      	strb	r3, [r2, #3]
10010144:	790b      	ldrb	r3, [r1, #4]
10010146:	7113      	strb	r3, [r2, #4]
10010148:	88cb      	ldrh	r3, [r1, #6]
1001014a:	2107      	movs	r1, #7
1001014c:	7153      	strb	r3, [r2, #5]
1001014e:	0a1b      	lsrs	r3, r3, #8
10010150:	7193      	strb	r3, [r2, #6]
10010152:	4b01      	ldr	r3, [pc, #4]	; (10010158 <presentation_format_define+0x28>)
10010154:	4798      	blx	r3
10010156:	bd0e      	pop	{r1, r2, r3, pc}
10010158:	100124c5 	.word	0x100124c5

1001015c <db_addATT>:
1001015c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001015e:	4c29      	ldr	r4, [pc, #164]	; (10010204 <db_addATT+0xa8>)
10010160:	1c1d      	adds	r5, r3, #0
10010162:	6823      	ldr	r3, [r4, #0]
10010164:	9001      	str	r0, [sp, #4]
10010166:	26d3      	movs	r6, #211	; 0xd3
10010168:	2b00      	cmp	r3, #0
1001016a:	d048      	beq.n	100101fe <db_addATT+0xa2>
1001016c:	1c1e      	adds	r6, r3, #0
1001016e:	3e0c      	subs	r6, #12
10010170:	6026      	str	r6, [r4, #0]
10010172:	2900      	cmp	r1, #0
10010174:	d005      	beq.n	10010182 <db_addATT+0x26>
10010176:	4f24      	ldr	r7, [pc, #144]	; (10010208 <db_addATT+0xac>)
10010178:	46bc      	mov	ip, r7
1001017a:	4660      	mov	r0, ip
1001017c:	683f      	ldr	r7, [r7, #0]
1001017e:	18bf      	adds	r7, r7, r2
10010180:	6007      	str	r7, [r0, #0]
10010182:	4821      	ldr	r0, [pc, #132]	; (10010208 <db_addATT+0xac>)
10010184:	6807      	ldr	r7, [r0, #0]
10010186:	4684      	mov	ip, r0
10010188:	42be      	cmp	r6, r7
1001018a:	d932      	bls.n	100101f2 <db_addATT+0x96>
1001018c:	4668      	mov	r0, sp
1001018e:	8880      	ldrh	r0, [r0, #4]
10010190:	3b0c      	subs	r3, #12
10010192:	8018      	strh	r0, [r3, #0]
10010194:	6823      	ldr	r3, [r4, #0]
10010196:	2900      	cmp	r1, #0
10010198:	d009      	beq.n	100101ae <db_addATT+0x52>
1001019a:	2a00      	cmp	r2, #0
1001019c:	d007      	beq.n	100101ae <db_addATT+0x52>
1001019e:	4660      	mov	r0, ip
100101a0:	6800      	ldr	r0, [r0, #0]
100101a2:	809a      	strh	r2, [r3, #4]
100101a4:	1a80      	subs	r0, r0, r2
100101a6:	6098      	str	r0, [r3, #8]
100101a8:	4b18      	ldr	r3, [pc, #96]	; (1001020c <db_addATT+0xb0>)
100101aa:	4798      	blx	r3
100101ac:	e002      	b.n	100101b4 <db_addATT+0x58>
100101ae:	2100      	movs	r1, #0
100101b0:	809a      	strh	r2, [r3, #4]
100101b2:	6099      	str	r1, [r3, #8]
100101b4:	2300      	movs	r3, #0
100101b6:	6822      	ldr	r2, [r4, #0]
100101b8:	7093      	strb	r3, [r2, #2]
100101ba:	3303      	adds	r3, #3
100101bc:	402b      	ands	r3, r5
100101be:	2b03      	cmp	r3, #3
100101c0:	d001      	beq.n	100101c6 <db_addATT+0x6a>
100101c2:	076b      	lsls	r3, r5, #29
100101c4:	d504      	bpl.n	100101d0 <db_addATT+0x74>
100101c6:	2101      	movs	r1, #1
100101c8:	6822      	ldr	r2, [r4, #0]
100101ca:	7893      	ldrb	r3, [r2, #2]
100101cc:	430b      	orrs	r3, r1
100101ce:	7093      	strb	r3, [r2, #2]
100101d0:	2330      	movs	r3, #48	; 0x30
100101d2:	402b      	ands	r3, r5
100101d4:	2b30      	cmp	r3, #48	; 0x30
100101d6:	d001      	beq.n	100101dc <db_addATT+0x80>
100101d8:	066b      	lsls	r3, r5, #25
100101da:	d504      	bpl.n	100101e6 <db_addATT+0x8a>
100101dc:	2102      	movs	r1, #2
100101de:	6822      	ldr	r2, [r4, #0]
100101e0:	7893      	ldrb	r3, [r2, #2]
100101e2:	430b      	orrs	r3, r1
100101e4:	7093      	strb	r3, [r2, #2]
100101e6:	4a0a      	ldr	r2, [pc, #40]	; (10010210 <db_addATT+0xb4>)
100101e8:	2600      	movs	r6, #0
100101ea:	6813      	ldr	r3, [r2, #0]
100101ec:	3301      	adds	r3, #1
100101ee:	6013      	str	r3, [r2, #0]
100101f0:	e005      	b.n	100101fe <db_addATT+0xa2>
100101f2:	6023      	str	r3, [r4, #0]
100101f4:	2611      	movs	r6, #17
100101f6:	2900      	cmp	r1, #0
100101f8:	d001      	beq.n	100101fe <db_addATT+0xa2>
100101fa:	1aba      	subs	r2, r7, r2
100101fc:	6002      	str	r2, [r0, #0]
100101fe:	1c30      	adds	r0, r6, #0
10010200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010202:	46c0      	nop			; (mov r8, r8)
10010204:	10018748 	.word	0x10018748
10010208:	1001874c 	.word	0x1001874c
1001020c:	100143b7 	.word	0x100143b7
10010210:	10018750 	.word	0x10018750

10010214 <user_description_define>:
10010214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010216:	1c05      	adds	r5, r0, #0
10010218:	20cf      	movs	r0, #207	; 0xcf
1001021a:	2a00      	cmp	r2, #0
1001021c:	d01c      	beq.n	10010258 <user_description_define+0x44>
1001021e:	1c14      	adds	r4, r2, #0
10010220:	2203      	movs	r2, #3
10010222:	1c1e      	adds	r6, r3, #0
10010224:	400a      	ands	r2, r1
10010226:	1c0b      	adds	r3, r1, #0
10010228:	3a03      	subs	r2, #3
1001022a:	4251      	negs	r1, r2
1001022c:	4151      	adcs	r1, r2
1001022e:	075a      	lsls	r2, r3, #29
10010230:	0fd2      	lsrs	r2, r2, #31
10010232:	430a      	orrs	r2, r1
10010234:	03d2      	lsls	r2, r2, #15
10010236:	4f09      	ldr	r7, [pc, #36]	; (1001025c <user_description_define+0x48>)
10010238:	1c28      	adds	r0, r5, #0
1001023a:	2a00      	cmp	r2, #0
1001023c:	d003      	beq.n	10010246 <user_description_define+0x32>
1001023e:	1c21      	adds	r1, r4, #0
10010240:	1c32      	adds	r2, r6, #0
10010242:	47b8      	blx	r7
10010244:	e008      	b.n	10010258 <user_description_define+0x44>
10010246:	1c11      	adds	r1, r2, #0
10010248:	47b8      	blx	r7
1001024a:	2800      	cmp	r0, #0
1001024c:	d104      	bne.n	10010258 <user_description_define+0x44>
1001024e:	1c28      	adds	r0, r5, #0
10010250:	1c31      	adds	r1, r6, #0
10010252:	1c22      	adds	r2, r4, #0
10010254:	4b02      	ldr	r3, [pc, #8]	; (10010260 <user_description_define+0x4c>)
10010256:	4798      	blx	r3
10010258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001025a:	46c0      	nop			; (mov r8, r8)
1001025c:	1001015d 	.word	0x1001015d
10010260:	100124c5 	.word	0x100124c5

10010264 <at_ble_read_authorize_reply.part.1>:
10010264:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010266:	4b09      	ldr	r3, [pc, #36]	; (1001028c <at_ble_read_authorize_reply.part.1+0x28>)
10010268:	1c05      	adds	r5, r0, #0
1001026a:	1c08      	adds	r0, r1, #0
1001026c:	1c0c      	adds	r4, r1, #0
1001026e:	4798      	blx	r3
10010270:	2800      	cmp	r0, #0
10010272:	d009      	beq.n	10010288 <at_ble_read_authorize_reply.part.1+0x24>
10010274:	6882      	ldr	r2, [r0, #8]
10010276:	2a00      	cmp	r2, #0
10010278:	d006      	beq.n	10010288 <at_ble_read_authorize_reply.part.1+0x24>
1001027a:	8883      	ldrh	r3, [r0, #4]
1001027c:	1c29      	adds	r1, r5, #0
1001027e:	9200      	str	r2, [sp, #0]
10010280:	1c20      	adds	r0, r4, #0
10010282:	2200      	movs	r2, #0
10010284:	4c02      	ldr	r4, [pc, #8]	; (10010290 <at_ble_read_authorize_reply.part.1+0x2c>)
10010286:	47a0      	blx	r4
10010288:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001028a:	46c0      	nop			; (mov r8, r8)
1001028c:	1000fffd 	.word	0x1000fffd
10010290:	10011f5d 	.word	0x10011f5d

10010294 <internal_at_ble_service_define>:
10010294:	b5f0      	push	{r4, r5, r6, r7, lr}
10010296:	b08b      	sub	sp, #44	; 0x2c
10010298:	9306      	str	r3, [sp, #24]
1001029a:	ab10      	add	r3, sp, #64	; 0x40
1001029c:	9202      	str	r2, [sp, #8]
1001029e:	cb04      	ldmia	r3!, {r2}
100102a0:	1c05      	adds	r5, r0, #0
100102a2:	881b      	ldrh	r3, [r3, #0]
100102a4:	9105      	str	r1, [sp, #20]
100102a6:	9303      	str	r3, [sp, #12]
100102a8:	ab12      	add	r3, sp, #72	; 0x48
100102aa:	781b      	ldrb	r3, [r3, #0]
100102ac:	20cf      	movs	r0, #207	; 0xcf
100102ae:	9304      	str	r3, [sp, #16]
100102b0:	2d00      	cmp	r5, #0
100102b2:	d100      	bne.n	100102b6 <internal_at_ble_service_define+0x22>
100102b4:	e1ca      	b.n	1001064c <internal_at_ble_service_define+0x3b8>
100102b6:	2900      	cmp	r1, #0
100102b8:	d100      	bne.n	100102bc <internal_at_ble_service_define+0x28>
100102ba:	e1c7      	b.n	1001064c <internal_at_ble_service_define+0x3b8>
100102bc:	2a00      	cmp	r2, #0
100102be:	d100      	bne.n	100102c2 <internal_at_ble_service_define+0x2e>
100102c0:	e1c4      	b.n	1001064c <internal_at_ble_service_define+0x3b8>
100102c2:	9b03      	ldr	r3, [sp, #12]
100102c4:	2b00      	cmp	r3, #0
100102c6:	d100      	bne.n	100102ca <internal_at_ble_service_define+0x36>
100102c8:	e1c0      	b.n	1001064c <internal_at_ble_service_define+0x3b8>
100102ca:	4bc9      	ldr	r3, [pc, #804]	; (100105f0 <internal_at_ble_service_define+0x35c>)
100102cc:	3004      	adds	r0, #4
100102ce:	681e      	ldr	r6, [r3, #0]
100102d0:	2e00      	cmp	r6, #0
100102d2:	d100      	bne.n	100102d6 <internal_at_ble_service_define+0x42>
100102d4:	e1ba      	b.n	1001064c <internal_at_ble_service_define+0x3b8>
100102d6:	2400      	movs	r4, #0
100102d8:	4bc6      	ldr	r3, [pc, #792]	; (100105f4 <internal_at_ble_service_define+0x360>)
100102da:	8034      	strh	r4, [r6, #0]
100102dc:	881b      	ldrh	r3, [r3, #0]
100102de:	1db7      	adds	r7, r6, #6
100102e0:	1c21      	adds	r1, r4, #0
100102e2:	2210      	movs	r2, #16
100102e4:	8073      	strh	r3, [r6, #2]
100102e6:	1c38      	adds	r0, r7, #0
100102e8:	4bc3      	ldr	r3, [pc, #780]	; (100105f8 <internal_at_ble_service_define+0x364>)
100102ea:	4798      	blx	r3
100102ec:	7828      	ldrb	r0, [r5, #0]
100102ee:	4bc3      	ldr	r3, [pc, #780]	; (100105fc <internal_at_ble_service_define+0x368>)
100102f0:	4798      	blx	r3
100102f2:	1c69      	adds	r1, r5, #1
100102f4:	1c02      	adds	r2, r0, #0
100102f6:	4bc2      	ldr	r3, [pc, #776]	; (10010600 <internal_at_ble_service_define+0x36c>)
100102f8:	1c38      	adds	r0, r7, #0
100102fa:	4798      	blx	r3
100102fc:	2204      	movs	r2, #4
100102fe:	782b      	ldrb	r3, [r5, #0]
10010300:	9d02      	ldr	r5, [sp, #8]
10010302:	011b      	lsls	r3, r3, #4
10010304:	4313      	orrs	r3, r2
10010306:	9a04      	ldr	r2, [sp, #16]
10010308:	7174      	strb	r4, [r6, #5]
1001030a:	0192      	lsls	r2, r2, #6
1001030c:	4313      	orrs	r3, r2
1001030e:	7133      	strb	r3, [r6, #4]
10010310:	2316      	movs	r3, #22
10010312:	9a06      	ldr	r2, [sp, #24]
10010314:	3512      	adds	r5, #18
10010316:	4353      	muls	r3, r2
10010318:	9a02      	ldr	r2, [sp, #8]
1001031a:	3312      	adds	r3, #18
1001031c:	18d7      	adds	r7, r2, r3
1001031e:	42bd      	cmp	r5, r7
10010320:	d00f      	beq.n	10010342 <internal_at_ble_service_define+0xae>
10010322:	4bb8      	ldr	r3, [pc, #736]	; (10010604 <internal_at_ble_service_define+0x370>)
10010324:	8829      	ldrh	r1, [r5, #0]
10010326:	9300      	str	r3, [sp, #0]
10010328:	230e      	movs	r3, #14
1001032a:	aa06      	add	r2, sp, #24
1001032c:	189b      	adds	r3, r3, r2
1001032e:	9301      	str	r3, [sp, #4]
10010330:	4cb5      	ldr	r4, [pc, #724]	; (10010608 <internal_at_ble_service_define+0x374>)
10010332:	1c30      	adds	r0, r6, #0
10010334:	2201      	movs	r2, #1
10010336:	2302      	movs	r3, #2
10010338:	47a0      	blx	r4
1001033a:	3516      	adds	r5, #22
1001033c:	1e04      	subs	r4, r0, #0
1001033e:	d0ee      	beq.n	1001031e <internal_at_ble_service_define+0x8a>
10010340:	e183      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
10010342:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010344:	2300      	movs	r3, #0
10010346:	3714      	adds	r7, #20
10010348:	1c3d      	adds	r5, r7, #0
1001034a:	9302      	str	r3, [sp, #8]
1001034c:	9b02      	ldr	r3, [sp, #8]
1001034e:	9a03      	ldr	r2, [sp, #12]
10010350:	4293      	cmp	r3, r2
10010352:	db00      	blt.n	10010356 <internal_at_ble_service_define+0xc2>
10010354:	e0bf      	b.n	100104d6 <internal_at_ble_service_define+0x242>
10010356:	4bad      	ldr	r3, [pc, #692]	; (1001060c <internal_at_ble_service_define+0x378>)
10010358:	aa06      	add	r2, sp, #24
1001035a:	9300      	str	r3, [sp, #0]
1001035c:	230e      	movs	r3, #14
1001035e:	189b      	adds	r3, r3, r2
10010360:	9301      	str	r3, [sp, #4]
10010362:	4ca9      	ldr	r4, [pc, #676]	; (10010608 <internal_at_ble_service_define+0x374>)
10010364:	1c30      	adds	r0, r6, #0
10010366:	2104      	movs	r1, #4
10010368:	2201      	movs	r2, #1
1001036a:	2302      	movs	r3, #2
1001036c:	47a0      	blx	r4
1001036e:	1e04      	subs	r4, r0, #0
10010370:	d000      	beq.n	10010374 <internal_at_ble_service_define+0xe0>
10010372:	e16a      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
10010374:	1c2b      	adds	r3, r5, #0
10010376:	3b12      	subs	r3, #18
10010378:	7b2c      	ldrb	r4, [r5, #12]
1001037a:	781b      	ldrb	r3, [r3, #0]
1001037c:	1c21      	adds	r1, r4, #0
1001037e:	1c1a      	adds	r2, r3, #0
10010380:	9304      	str	r3, [sp, #16]
10010382:	8828      	ldrh	r0, [r5, #0]
10010384:	4ba2      	ldr	r3, [pc, #648]	; (10010610 <internal_at_ble_service_define+0x37c>)
10010386:	4798      	blx	r3
10010388:	2303      	movs	r3, #3
1001038a:	4023      	ands	r3, r4
1001038c:	3b03      	subs	r3, #3
1001038e:	4259      	negs	r1, r3
10010390:	4159      	adcs	r1, r3
10010392:	2301      	movs	r3, #1
10010394:	08a4      	lsrs	r4, r4, #2
10010396:	401c      	ands	r4, r3
10010398:	430c      	orrs	r4, r1
1001039a:	896b      	ldrh	r3, [r5, #10]
1001039c:	03e4      	lsls	r4, r4, #15
1001039e:	431c      	orrs	r4, r3
100103a0:	9007      	str	r0, [sp, #28]
100103a2:	4b96      	ldr	r3, [pc, #600]	; (100105fc <internal_at_ble_service_define+0x368>)
100103a4:	9804      	ldr	r0, [sp, #16]
100103a6:	4798      	blx	r3
100103a8:	1c2a      	adds	r2, r5, #0
100103aa:	3a11      	subs	r2, #17
100103ac:	9200      	str	r2, [sp, #0]
100103ae:	3a03      	subs	r2, #3
100103b0:	1c03      	adds	r3, r0, #0
100103b2:	9201      	str	r2, [sp, #4]
100103b4:	1c21      	adds	r1, r4, #0
100103b6:	1c30      	adds	r0, r6, #0
100103b8:	4c93      	ldr	r4, [pc, #588]	; (10010608 <internal_at_ble_service_define+0x374>)
100103ba:	9a07      	ldr	r2, [sp, #28]
100103bc:	47a0      	blx	r4
100103be:	1e04      	subs	r4, r0, #0
100103c0:	d000      	beq.n	100103c4 <internal_at_ble_service_define+0x130>
100103c2:	e142      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
100103c4:	22c0      	movs	r2, #192	; 0xc0
100103c6:	882b      	ldrh	r3, [r5, #0]
100103c8:	0052      	lsls	r2, r2, #1
100103ca:	4213      	tst	r3, r2
100103cc:	d104      	bne.n	100103d8 <internal_at_ble_service_define+0x144>
100103ce:	8aab      	ldrh	r3, [r5, #20]
100103d0:	9304      	str	r3, [sp, #16]
100103d2:	2b00      	cmp	r3, #0
100103d4:	d116      	bne.n	10010404 <internal_at_ble_service_define+0x170>
100103d6:	e03a      	b.n	1001044e <internal_at_ble_service_define+0x1ba>
100103d8:	2201      	movs	r2, #1
100103da:	09d9      	lsrs	r1, r3, #7
100103dc:	4011      	ands	r1, r2
100103de:	05db      	lsls	r3, r3, #23
100103e0:	d501      	bpl.n	100103e6 <internal_at_ble_service_define+0x152>
100103e2:	2302      	movs	r3, #2
100103e4:	4319      	orrs	r1, r3
100103e6:	4b8b      	ldr	r3, [pc, #556]	; (10010614 <internal_at_ble_service_define+0x380>)
100103e8:	aa06      	add	r2, sp, #24
100103ea:	9300      	str	r3, [sp, #0]
100103ec:	230e      	movs	r3, #14
100103ee:	189b      	adds	r3, r3, r2
100103f0:	9301      	str	r3, [sp, #4]
100103f2:	4c85      	ldr	r4, [pc, #532]	; (10010608 <internal_at_ble_service_define+0x374>)
100103f4:	0209      	lsls	r1, r1, #8
100103f6:	1c30      	adds	r0, r6, #0
100103f8:	2201      	movs	r2, #1
100103fa:	2302      	movs	r3, #2
100103fc:	47a0      	blx	r4
100103fe:	1e04      	subs	r4, r0, #0
10010400:	d0e5      	beq.n	100103ce <internal_at_ble_service_define+0x13a>
10010402:	e122      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
10010404:	2380      	movs	r3, #128	; 0x80
10010406:	882a      	ldrh	r2, [r5, #0]
10010408:	7f2c      	ldrb	r4, [r5, #28]
1001040a:	005b      	lsls	r3, r3, #1
1001040c:	401a      	ands	r2, r3
1001040e:	1c20      	adds	r0, r4, #0
10010410:	2101      	movs	r1, #1
10010412:	2a00      	cmp	r2, #0
10010414:	d000      	beq.n	10010418 <internal_at_ble_service_define+0x184>
10010416:	1c0a      	adds	r2, r1, #0
10010418:	4b7f      	ldr	r3, [pc, #508]	; (10010618 <internal_at_ble_service_define+0x384>)
1001041a:	4798      	blx	r3
1001041c:	2203      	movs	r2, #3
1001041e:	4022      	ands	r2, r4
10010420:	3a03      	subs	r2, #3
10010422:	4251      	negs	r1, r2
10010424:	4151      	adcs	r1, r2
10010426:	4b7d      	ldr	r3, [pc, #500]	; (1001061c <internal_at_ble_service_define+0x388>)
10010428:	1c0a      	adds	r2, r1, #0
1001042a:	9300      	str	r3, [sp, #0]
1001042c:	1c2b      	adds	r3, r5, #0
1001042e:	0764      	lsls	r4, r4, #29
10010430:	0fe4      	lsrs	r4, r4, #31
10010432:	4322      	orrs	r2, r4
10010434:	03d2      	lsls	r2, r2, #15
10010436:	4310      	orrs	r0, r2
10010438:	3320      	adds	r3, #32
1001043a:	b282      	uxth	r2, r0
1001043c:	9301      	str	r3, [sp, #4]
1001043e:	4c72      	ldr	r4, [pc, #456]	; (10010608 <internal_at_ble_service_define+0x374>)
10010440:	1c30      	adds	r0, r6, #0
10010442:	9904      	ldr	r1, [sp, #16]
10010444:	2302      	movs	r3, #2
10010446:	47a0      	blx	r4
10010448:	1e04      	subs	r4, r0, #0
1001044a:	d000      	beq.n	1001044e <internal_at_ble_service_define+0x1ba>
1001044c:	e0fd      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
1001044e:	2101      	movs	r1, #1
10010450:	882b      	ldrh	r3, [r5, #0]
10010452:	420b      	tst	r3, r1
10010454:	d011      	beq.n	1001047a <internal_at_ble_service_define+0x1e6>
10010456:	7fa8      	ldrb	r0, [r5, #30]
10010458:	4b6f      	ldr	r3, [pc, #444]	; (10010618 <internal_at_ble_service_define+0x384>)
1001045a:	2200      	movs	r2, #0
1001045c:	4798      	blx	r3
1001045e:	4b70      	ldr	r3, [pc, #448]	; (10010620 <internal_at_ble_service_define+0x38c>)
10010460:	1c02      	adds	r2, r0, #0
10010462:	9300      	str	r3, [sp, #0]
10010464:	1c2b      	adds	r3, r5, #0
10010466:	3324      	adds	r3, #36	; 0x24
10010468:	9301      	str	r3, [sp, #4]
1001046a:	4c67      	ldr	r4, [pc, #412]	; (10010608 <internal_at_ble_service_define+0x374>)
1001046c:	1c30      	adds	r0, r6, #0
1001046e:	496d      	ldr	r1, [pc, #436]	; (10010624 <internal_at_ble_service_define+0x390>)
10010470:	2302      	movs	r3, #2
10010472:	47a0      	blx	r4
10010474:	1e04      	subs	r4, r0, #0
10010476:	d000      	beq.n	1001047a <internal_at_ble_service_define+0x1e6>
10010478:	e0e7      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
1001047a:	2330      	movs	r3, #48	; 0x30
1001047c:	882a      	ldrh	r2, [r5, #0]
1001047e:	421a      	tst	r2, r3
10010480:	d012      	beq.n	100104a8 <internal_at_ble_service_define+0x214>
10010482:	2101      	movs	r1, #1
10010484:	7f68      	ldrb	r0, [r5, #29]
10010486:	1c0a      	adds	r2, r1, #0
10010488:	4b63      	ldr	r3, [pc, #396]	; (10010618 <internal_at_ble_service_define+0x384>)
1001048a:	4798      	blx	r3
1001048c:	4b66      	ldr	r3, [pc, #408]	; (10010628 <internal_at_ble_service_define+0x394>)
1001048e:	1c02      	adds	r2, r0, #0
10010490:	9300      	str	r3, [sp, #0]
10010492:	1c2b      	adds	r3, r5, #0
10010494:	3322      	adds	r3, #34	; 0x22
10010496:	9301      	str	r3, [sp, #4]
10010498:	4c5b      	ldr	r4, [pc, #364]	; (10010608 <internal_at_ble_service_define+0x374>)
1001049a:	1c30      	adds	r0, r6, #0
1001049c:	4961      	ldr	r1, [pc, #388]	; (10010624 <internal_at_ble_service_define+0x390>)
1001049e:	2302      	movs	r3, #2
100104a0:	47a0      	blx	r4
100104a2:	1e04      	subs	r4, r0, #0
100104a4:	d000      	beq.n	100104a8 <internal_at_ble_service_define+0x214>
100104a6:	e0d0      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
100104a8:	69ab      	ldr	r3, [r5, #24]
100104aa:	2b00      	cmp	r3, #0
100104ac:	d00e      	beq.n	100104cc <internal_at_ble_service_define+0x238>
100104ae:	4b5f      	ldr	r3, [pc, #380]	; (1001062c <internal_at_ble_service_define+0x398>)
100104b0:	aa06      	add	r2, sp, #24
100104b2:	9300      	str	r3, [sp, #0]
100104b4:	230e      	movs	r3, #14
100104b6:	189b      	adds	r3, r3, r2
100104b8:	9301      	str	r3, [sp, #4]
100104ba:	4c53      	ldr	r4, [pc, #332]	; (10010608 <internal_at_ble_service_define+0x374>)
100104bc:	1c30      	adds	r0, r6, #0
100104be:	2107      	movs	r1, #7
100104c0:	2201      	movs	r2, #1
100104c2:	2302      	movs	r3, #2
100104c4:	47a0      	blx	r4
100104c6:	1e04      	subs	r4, r0, #0
100104c8:	d000      	beq.n	100104cc <internal_at_ble_service_define+0x238>
100104ca:	e0be      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
100104cc:	9b02      	ldr	r3, [sp, #8]
100104ce:	353c      	adds	r5, #60	; 0x3c
100104d0:	3301      	adds	r3, #1
100104d2:	9302      	str	r3, [sp, #8]
100104d4:	e73a      	b.n	1001034c <internal_at_ble_service_define+0xb8>
100104d6:	1c30      	adds	r0, r6, #0
100104d8:	4b55      	ldr	r3, [pc, #340]	; (10010630 <internal_at_ble_service_define+0x39c>)
100104da:	4798      	blx	r3
100104dc:	1e04      	subs	r4, r0, #0
100104de:	d000      	beq.n	100104e2 <internal_at_ble_service_define+0x24e>
100104e0:	e0b3      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
100104e2:	8833      	ldrh	r3, [r6, #0]
100104e4:	9a05      	ldr	r2, [sp, #20]
100104e6:	8013      	strh	r3, [r2, #0]
100104e8:	8836      	ldrh	r6, [r6, #0]
100104ea:	9b06      	ldr	r3, [sp, #24]
100104ec:	9a03      	ldr	r2, [sp, #12]
100104ee:	18f6      	adds	r6, r6, r3
100104f0:	b2b3      	uxth	r3, r6
100104f2:	9302      	str	r3, [sp, #8]
100104f4:	233c      	movs	r3, #60	; 0x3c
100104f6:	4353      	muls	r3, r2
100104f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100104fa:	3314      	adds	r3, #20
100104fc:	18d3      	adds	r3, r2, r3
100104fe:	9304      	str	r3, [sp, #16]
10010500:	9b04      	ldr	r3, [sp, #16]
10010502:	429f      	cmp	r7, r3
10010504:	d100      	bne.n	10010508 <internal_at_ble_service_define+0x274>
10010506:	e0a0      	b.n	1001064a <internal_at_ble_service_define+0x3b6>
10010508:	9b02      	ldr	r3, [sp, #8]
1001050a:	1c9d      	adds	r5, r3, #2
1001050c:	1c3b      	adds	r3, r7, #0
1001050e:	b2ad      	uxth	r5, r5
10010510:	3b14      	subs	r3, #20
10010512:	801d      	strh	r5, [r3, #0]
10010514:	9303      	str	r3, [sp, #12]
10010516:	893b      	ldrh	r3, [r7, #8]
10010518:	2b00      	cmp	r3, #0
1001051a:	d108      	bne.n	1001052e <internal_at_ble_service_define+0x29a>
1001051c:	23c0      	movs	r3, #192	; 0xc0
1001051e:	883a      	ldrh	r2, [r7, #0]
10010520:	005b      	lsls	r3, r3, #1
10010522:	421a      	tst	r2, r3
10010524:	d026      	beq.n	10010574 <internal_at_ble_service_define+0x2e0>
10010526:	9e02      	ldr	r6, [sp, #8]
10010528:	3603      	adds	r6, #3
1001052a:	b2b5      	uxth	r5, r6
1001052c:	e022      	b.n	10010574 <internal_at_ble_service_define+0x2e0>
1001052e:	2103      	movs	r1, #3
10010530:	7b3b      	ldrb	r3, [r7, #12]
10010532:	4019      	ands	r1, r3
10010534:	3903      	subs	r1, #3
10010536:	424a      	negs	r2, r1
10010538:	414a      	adcs	r2, r1
1001053a:	0759      	lsls	r1, r3, #29
1001053c:	0fc9      	lsrs	r1, r1, #31
1001053e:	4311      	orrs	r1, r2
10010540:	03c9      	lsls	r1, r1, #15
10010542:	897a      	ldrh	r2, [r7, #10]
10010544:	2900      	cmp	r1, #0
10010546:	d007      	beq.n	10010558 <internal_at_ble_service_define+0x2c4>
10010548:	6879      	ldr	r1, [r7, #4]
1001054a:	2900      	cmp	r1, #0
1001054c:	d100      	bne.n	10010550 <internal_at_ble_service_define+0x2bc>
1001054e:	4939      	ldr	r1, [pc, #228]	; (10010634 <internal_at_ble_service_define+0x3a0>)
10010550:	1c28      	adds	r0, r5, #0
10010552:	4e39      	ldr	r6, [pc, #228]	; (10010638 <internal_at_ble_service_define+0x3a4>)
10010554:	47b0      	blx	r6
10010556:	e00a      	b.n	1001056e <internal_at_ble_service_define+0x2da>
10010558:	1c28      	adds	r0, r5, #0
1001055a:	4e37      	ldr	r6, [pc, #220]	; (10010638 <internal_at_ble_service_define+0x3a4>)
1001055c:	47b0      	blx	r6
1001055e:	2800      	cmp	r0, #0
10010560:	d172      	bne.n	10010648 <internal_at_ble_service_define+0x3b4>
10010562:	9b03      	ldr	r3, [sp, #12]
10010564:	8939      	ldrh	r1, [r7, #8]
10010566:	8818      	ldrh	r0, [r3, #0]
10010568:	687a      	ldr	r2, [r7, #4]
1001056a:	4b34      	ldr	r3, [pc, #208]	; (1001063c <internal_at_ble_service_define+0x3a8>)
1001056c:	4798      	blx	r3
1001056e:	2800      	cmp	r0, #0
10010570:	d0d4      	beq.n	1001051c <internal_at_ble_service_define+0x288>
10010572:	e069      	b.n	10010648 <internal_at_ble_service_define+0x3b4>
10010574:	8abb      	ldrh	r3, [r7, #20]
10010576:	2b00      	cmp	r3, #0
10010578:	d00a      	beq.n	10010590 <internal_at_ble_service_define+0x2fc>
1001057a:	3501      	adds	r5, #1
1001057c:	b2ad      	uxth	r5, r5
1001057e:	843d      	strh	r5, [r7, #32]
10010580:	7f39      	ldrb	r1, [r7, #28]
10010582:	8afb      	ldrh	r3, [r7, #22]
10010584:	1c28      	adds	r0, r5, #0
10010586:	693a      	ldr	r2, [r7, #16]
10010588:	4e2d      	ldr	r6, [pc, #180]	; (10010640 <internal_at_ble_service_define+0x3ac>)
1001058a:	47b0      	blx	r6
1001058c:	2800      	cmp	r0, #0
1001058e:	d15b      	bne.n	10010648 <internal_at_ble_service_define+0x3b4>
10010590:	883b      	ldrh	r3, [r7, #0]
10010592:	07db      	lsls	r3, r3, #31
10010594:	d50d      	bpl.n	100105b2 <internal_at_ble_service_define+0x31e>
10010596:	2200      	movs	r2, #0
10010598:	3501      	adds	r5, #1
1001059a:	b2ad      	uxth	r5, r5
1001059c:	a909      	add	r1, sp, #36	; 0x24
1001059e:	84bd      	strh	r5, [r7, #36]	; 0x24
100105a0:	7fbb      	ldrb	r3, [r7, #30]
100105a2:	1c28      	adds	r0, r5, #0
100105a4:	700a      	strb	r2, [r1, #0]
100105a6:	704a      	strb	r2, [r1, #1]
100105a8:	4e23      	ldr	r6, [pc, #140]	; (10010638 <internal_at_ble_service_define+0x3a4>)
100105aa:	3202      	adds	r2, #2
100105ac:	47b0      	blx	r6
100105ae:	2800      	cmp	r0, #0
100105b0:	d14a      	bne.n	10010648 <internal_at_ble_service_define+0x3b4>
100105b2:	2330      	movs	r3, #48	; 0x30
100105b4:	883a      	ldrh	r2, [r7, #0]
100105b6:	421a      	tst	r2, r3
100105b8:	d00d      	beq.n	100105d6 <internal_at_ble_service_define+0x342>
100105ba:	2200      	movs	r2, #0
100105bc:	3501      	adds	r5, #1
100105be:	b2ad      	uxth	r5, r5
100105c0:	a909      	add	r1, sp, #36	; 0x24
100105c2:	847d      	strh	r5, [r7, #34]	; 0x22
100105c4:	7f7b      	ldrb	r3, [r7, #29]
100105c6:	1c28      	adds	r0, r5, #0
100105c8:	700a      	strb	r2, [r1, #0]
100105ca:	704a      	strb	r2, [r1, #1]
100105cc:	4e1a      	ldr	r6, [pc, #104]	; (10010638 <internal_at_ble_service_define+0x3a4>)
100105ce:	3202      	adds	r2, #2
100105d0:	47b0      	blx	r6
100105d2:	2800      	cmp	r0, #0
100105d4:	d138      	bne.n	10010648 <internal_at_ble_service_define+0x3b4>
100105d6:	69b9      	ldr	r1, [r7, #24]
100105d8:	2900      	cmp	r1, #0
100105da:	d006      	beq.n	100105ea <internal_at_ble_service_define+0x356>
100105dc:	3501      	adds	r5, #1
100105de:	b2ad      	uxth	r5, r5
100105e0:	1c28      	adds	r0, r5, #0
100105e2:	4b18      	ldr	r3, [pc, #96]	; (10010644 <internal_at_ble_service_define+0x3b0>)
100105e4:	4798      	blx	r3
100105e6:	2800      	cmp	r0, #0
100105e8:	d12e      	bne.n	10010648 <internal_at_ble_service_define+0x3b4>
100105ea:	373c      	adds	r7, #60	; 0x3c
100105ec:	9502      	str	r5, [sp, #8]
100105ee:	e787      	b.n	10010500 <internal_at_ble_service_define+0x26c>
100105f0:	10018758 	.word	0x10018758
100105f4:	10019650 	.word	0x10019650
100105f8:	100143c9 	.word	0x100143c9
100105fc:	1000ffc9 	.word	0x1000ffc9
10010600:	100143b7 	.word	0x100143b7
10010604:	10016aaf 	.word	0x10016aaf
10010608:	10012455 	.word	0x10012455
1001060c:	10016ab1 	.word	0x10016ab1
10010610:	10010095 	.word	0x10010095
10010614:	10016aad 	.word	0x10016aad
10010618:	1001003d 	.word	0x1001003d
1001061c:	10016aa9 	.word	0x10016aa9
10010620:	10016aab 	.word	0x10016aab
10010624:	00008002 	.word	0x00008002
10010628:	10016aa5 	.word	0x10016aa5
1001062c:	10016aa7 	.word	0x10016aa7
10010630:	10012349 	.word	0x10012349
10010634:	10018744 	.word	0x10018744
10010638:	1001015d 	.word	0x1001015d
1001063c:	100124c5 	.word	0x100124c5
10010640:	10010215 	.word	0x10010215
10010644:	10010131 	.word	0x10010131
10010648:	1c04      	adds	r4, r0, #0
1001064a:	1c20      	adds	r0, r4, #0
1001064c:	b00b      	add	sp, #44	; 0x2c
1001064e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010650 <initi_gatt_server_module>:
10010650:	2300      	movs	r3, #0
10010652:	4a07      	ldr	r2, [pc, #28]	; (10010670 <initi_gatt_server_module+0x20>)
10010654:	7013      	strb	r3, [r2, #0]
10010656:	4a07      	ldr	r2, [pc, #28]	; (10010674 <initi_gatt_server_module+0x24>)
10010658:	6013      	str	r3, [r2, #0]
1001065a:	4a07      	ldr	r2, [pc, #28]	; (10010678 <initi_gatt_server_module+0x28>)
1001065c:	6013      	str	r3, [r2, #0]
1001065e:	4a07      	ldr	r2, [pc, #28]	; (1001067c <initi_gatt_server_module+0x2c>)
10010660:	6013      	str	r3, [r2, #0]
10010662:	4a07      	ldr	r2, [pc, #28]	; (10010680 <initi_gatt_server_module+0x30>)
10010664:	6013      	str	r3, [r2, #0]
10010666:	4a07      	ldr	r2, [pc, #28]	; (10010684 <initi_gatt_server_module+0x34>)
10010668:	6013      	str	r3, [r2, #0]
1001066a:	4a07      	ldr	r2, [pc, #28]	; (10010688 <initi_gatt_server_module+0x38>)
1001066c:	6013      	str	r3, [r2, #0]
1001066e:	4770      	bx	lr
10010670:	10018744 	.word	0x10018744
10010674:	10018754 	.word	0x10018754
10010678:	10018750 	.word	0x10018750
1001067c:	10018740 	.word	0x10018740
10010680:	1001874c 	.word	0x1001874c
10010684:	10018748 	.word	0x10018748
10010688:	10018758 	.word	0x10018758

1001068c <db_init>:
1001068c:	4b0a      	ldr	r3, [pc, #40]	; (100106b8 <db_init+0x2c>)
1001068e:	4a0b      	ldr	r2, [pc, #44]	; (100106bc <db_init+0x30>)
10010690:	6018      	str	r0, [r3, #0]
10010692:	084b      	lsrs	r3, r1, #1
10010694:	6013      	str	r3, [r2, #0]
10010696:	4a0a      	ldr	r2, [pc, #40]	; (100106c0 <db_init+0x34>)
10010698:	18c3      	adds	r3, r0, r3
1001069a:	6013      	str	r3, [r2, #0]
1001069c:	4a09      	ldr	r2, [pc, #36]	; (100106c4 <db_init+0x38>)
1001069e:	1841      	adds	r1, r0, r1
100106a0:	6013      	str	r3, [r2, #0]
100106a2:	2303      	movs	r3, #3
100106a4:	2200      	movs	r2, #0
100106a6:	3103      	adds	r1, #3
100106a8:	4399      	bics	r1, r3
100106aa:	4b07      	ldr	r3, [pc, #28]	; (100106c8 <db_init+0x3c>)
100106ac:	3904      	subs	r1, #4
100106ae:	6019      	str	r1, [r3, #0]
100106b0:	4b06      	ldr	r3, [pc, #24]	; (100106cc <db_init+0x40>)
100106b2:	601a      	str	r2, [r3, #0]
100106b4:	4770      	bx	lr
100106b6:	46c0      	nop			; (mov r8, r8)
100106b8:	10018758 	.word	0x10018758
100106bc:	10018754 	.word	0x10018754
100106c0:	10018740 	.word	0x10018740
100106c4:	1001874c 	.word	0x1001874c
100106c8:	10018748 	.word	0x10018748
100106cc:	10018750 	.word	0x10018750

100106d0 <at_ble_primary_service_define>:
100106d0:	b530      	push	{r4, r5, lr}
100106d2:	b085      	sub	sp, #20
100106d4:	ac08      	add	r4, sp, #32
100106d6:	cc20      	ldmia	r4!, {r5}
100106d8:	8824      	ldrh	r4, [r4, #0]
100106da:	9500      	str	r5, [sp, #0]
100106dc:	9401      	str	r4, [sp, #4]
100106de:	2401      	movs	r4, #1
100106e0:	9402      	str	r4, [sp, #8]
100106e2:	4c02      	ldr	r4, [pc, #8]	; (100106ec <at_ble_primary_service_define+0x1c>)
100106e4:	47a0      	blx	r4
100106e6:	b005      	add	sp, #20
100106e8:	bd30      	pop	{r4, r5, pc}
100106ea:	46c0      	nop			; (mov r8, r8)
100106ec:	10010295 	.word	0x10010295

100106f0 <at_ble_characteristic_value_set>:
100106f0:	b570      	push	{r4, r5, r6, lr}
100106f2:	4b0b      	ldr	r3, [pc, #44]	; (10010720 <at_ble_characteristic_value_set+0x30>)
100106f4:	1c06      	adds	r6, r0, #0
100106f6:	1c0c      	adds	r4, r1, #0
100106f8:	1c15      	adds	r5, r2, #0
100106fa:	4798      	blx	r3
100106fc:	2800      	cmp	r0, #0
100106fe:	d008      	beq.n	10010712 <at_ble_characteristic_value_set+0x22>
10010700:	6880      	ldr	r0, [r0, #8]
10010702:	2800      	cmp	r0, #0
10010704:	d005      	beq.n	10010712 <at_ble_characteristic_value_set+0x22>
10010706:	1c21      	adds	r1, r4, #0
10010708:	1c2a      	adds	r2, r5, #0
1001070a:	4b06      	ldr	r3, [pc, #24]	; (10010724 <at_ble_characteristic_value_set+0x34>)
1001070c:	4798      	blx	r3
1001070e:	2000      	movs	r0, #0
10010710:	e004      	b.n	1001071c <at_ble_characteristic_value_set+0x2c>
10010712:	1c30      	adds	r0, r6, #0
10010714:	1c29      	adds	r1, r5, #0
10010716:	1c22      	adds	r2, r4, #0
10010718:	4b03      	ldr	r3, [pc, #12]	; (10010728 <at_ble_characteristic_value_set+0x38>)
1001071a:	4798      	blx	r3
1001071c:	bd70      	pop	{r4, r5, r6, pc}
1001071e:	46c0      	nop			; (mov r8, r8)
10010720:	1000fffd 	.word	0x1000fffd
10010724:	100143b7 	.word	0x100143b7
10010728:	100124c5 	.word	0x100124c5

1001072c <at_ble_characteristic_value_get>:
1001072c:	b570      	push	{r4, r5, r6, lr}
1001072e:	4b0c      	ldr	r3, [pc, #48]	; (10010760 <at_ble_characteristic_value_get+0x34>)
10010730:	1c06      	adds	r6, r0, #0
10010732:	1c0c      	adds	r4, r1, #0
10010734:	1c15      	adds	r5, r2, #0
10010736:	4798      	blx	r3
10010738:	2800      	cmp	r0, #0
1001073a:	d00b      	beq.n	10010754 <at_ble_characteristic_value_get+0x28>
1001073c:	6883      	ldr	r3, [r0, #8]
1001073e:	2b00      	cmp	r3, #0
10010740:	d008      	beq.n	10010754 <at_ble_characteristic_value_get+0x28>
10010742:	8883      	ldrh	r3, [r0, #4]
10010744:	802b      	strh	r3, [r5, #0]
10010746:	8882      	ldrh	r2, [r0, #4]
10010748:	6881      	ldr	r1, [r0, #8]
1001074a:	4b06      	ldr	r3, [pc, #24]	; (10010764 <at_ble_characteristic_value_get+0x38>)
1001074c:	1c20      	adds	r0, r4, #0
1001074e:	4798      	blx	r3
10010750:	2000      	movs	r0, #0
10010752:	e004      	b.n	1001075e <at_ble_characteristic_value_get+0x32>
10010754:	1c30      	adds	r0, r6, #0
10010756:	1c29      	adds	r1, r5, #0
10010758:	1c22      	adds	r2, r4, #0
1001075a:	4b03      	ldr	r3, [pc, #12]	; (10010768 <at_ble_characteristic_value_get+0x3c>)
1001075c:	4798      	blx	r3
1001075e:	bd70      	pop	{r4, r5, r6, pc}
10010760:	1000fffd 	.word	0x1000fffd
10010764:	100143b7 	.word	0x100143b7
10010768:	10012551 	.word	0x10012551

1001076c <at_ble_write_authorize_reply>:
1001076c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001076e:	b085      	sub	sp, #20
10010770:	1c04      	adds	r4, r0, #0
10010772:	9101      	str	r1, [sp, #4]
10010774:	2900      	cmp	r1, #0
10010776:	d128      	bne.n	100107ca <at_ble_write_authorize_reply+0x5e>
10010778:	8843      	ldrh	r3, [r0, #2]
1001077a:	1c27      	adds	r7, r4, #0
1001077c:	9300      	str	r3, [sp, #0]
1001077e:	1c18      	adds	r0, r3, #0
10010780:	4b16      	ldr	r3, [pc, #88]	; (100107dc <at_ble_write_authorize_reply+0x70>)
10010782:	4798      	blx	r3
10010784:	3708      	adds	r7, #8
10010786:	2800      	cmp	r0, #0
10010788:	d009      	beq.n	1001079e <at_ble_write_authorize_reply+0x32>
1001078a:	6880      	ldr	r0, [r0, #8]
1001078c:	2800      	cmp	r0, #0
1001078e:	d006      	beq.n	1001079e <at_ble_write_authorize_reply+0x32>
10010790:	88a3      	ldrh	r3, [r4, #4]
10010792:	88e2      	ldrh	r2, [r4, #6]
10010794:	18c0      	adds	r0, r0, r3
10010796:	1c39      	adds	r1, r7, #0
10010798:	4b11      	ldr	r3, [pc, #68]	; (100107e0 <at_ble_write_authorize_reply+0x74>)
1001079a:	4798      	blx	r3
1001079c:	e015      	b.n	100107ca <at_ble_write_authorize_reply+0x5e>
1001079e:	ab02      	add	r3, sp, #8
100107a0:	1d9e      	adds	r6, r3, #6
100107a2:	2300      	movs	r3, #0
100107a4:	4d0f      	ldr	r5, [pc, #60]	; (100107e4 <at_ble_write_authorize_reply+0x78>)
100107a6:	8033      	strh	r3, [r6, #0]
100107a8:	6829      	ldr	r1, [r5, #0]
100107aa:	1c32      	adds	r2, r6, #0
100107ac:	4b0e      	ldr	r3, [pc, #56]	; (100107e8 <at_ble_write_authorize_reply+0x7c>)
100107ae:	9800      	ldr	r0, [sp, #0]
100107b0:	4798      	blx	r3
100107b2:	682b      	ldr	r3, [r5, #0]
100107b4:	88a0      	ldrh	r0, [r4, #4]
100107b6:	88e2      	ldrh	r2, [r4, #6]
100107b8:	1818      	adds	r0, r3, r0
100107ba:	1c39      	adds	r1, r7, #0
100107bc:	4b08      	ldr	r3, [pc, #32]	; (100107e0 <at_ble_write_authorize_reply+0x74>)
100107be:	4798      	blx	r3
100107c0:	8860      	ldrh	r0, [r4, #2]
100107c2:	8832      	ldrh	r2, [r6, #0]
100107c4:	6829      	ldr	r1, [r5, #0]
100107c6:	4b09      	ldr	r3, [pc, #36]	; (100107ec <at_ble_write_authorize_reply+0x80>)
100107c8:	4798      	blx	r3
100107ca:	8860      	ldrh	r0, [r4, #2]
100107cc:	8821      	ldrh	r1, [r4, #0]
100107ce:	9a01      	ldr	r2, [sp, #4]
100107d0:	4b07      	ldr	r3, [pc, #28]	; (100107f0 <at_ble_write_authorize_reply+0x84>)
100107d2:	4798      	blx	r3
100107d4:	2000      	movs	r0, #0
100107d6:	b005      	add	sp, #20
100107d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107da:	46c0      	nop			; (mov r8, r8)
100107dc:	1000fffd 	.word	0x1000fffd
100107e0:	100143b7 	.word	0x100143b7
100107e4:	10016cb4 	.word	0x10016cb4
100107e8:	1001072d 	.word	0x1001072d
100107ec:	100106f1 	.word	0x100106f1
100107f0:	10011fc9 	.word	0x10011fc9

100107f4 <gatts_handle_read_req>:
100107f4:	b538      	push	{r3, r4, r5, lr}
100107f6:	1c0c      	adds	r4, r1, #0
100107f8:	4b07      	ldr	r3, [pc, #28]	; (10010818 <gatts_handle_read_req+0x24>)
100107fa:	4798      	blx	r3
100107fc:	8865      	ldrh	r5, [r4, #2]
100107fe:	4b07      	ldr	r3, [pc, #28]	; (1001081c <gatts_handle_read_req+0x28>)
10010800:	1c28      	adds	r0, r5, #0
10010802:	4798      	blx	r3
10010804:	7883      	ldrb	r3, [r0, #2]
10010806:	2026      	movs	r0, #38	; 0x26
10010808:	07db      	lsls	r3, r3, #31
1001080a:	d404      	bmi.n	10010816 <gatts_handle_read_req+0x22>
1001080c:	8820      	ldrh	r0, [r4, #0]
1001080e:	1c29      	adds	r1, r5, #0
10010810:	4b03      	ldr	r3, [pc, #12]	; (10010820 <gatts_handle_read_req+0x2c>)
10010812:	4798      	blx	r3
10010814:	203b      	movs	r0, #59	; 0x3b
10010816:	bd38      	pop	{r3, r4, r5, pc}
10010818:	10011f0d 	.word	0x10011f0d
1001081c:	1000fffd 	.word	0x1000fffd
10010820:	10010265 	.word	0x10010265

10010824 <gatts_handle_att_info_req>:
10010824:	b538      	push	{r3, r4, r5, lr}
10010826:	1c0d      	adds	r5, r1, #0
10010828:	4b0a      	ldr	r3, [pc, #40]	; (10010854 <gatts_handle_att_info_req+0x30>)
1001082a:	1c14      	adds	r4, r2, #0
1001082c:	4798      	blx	r3
1001082e:	882d      	ldrh	r5, [r5, #0]
10010830:	4b09      	ldr	r3, [pc, #36]	; (10010858 <gatts_handle_att_info_req+0x34>)
10010832:	1c28      	adds	r0, r5, #0
10010834:	4798      	blx	r3
10010836:	0a22      	lsrs	r2, r4, #8
10010838:	1c03      	adds	r3, r0, #0
1001083a:	4c08      	ldr	r4, [pc, #32]	; (1001085c <gatts_handle_att_info_req+0x38>)
1001083c:	b291      	uxth	r1, r2
1001083e:	2800      	cmp	r0, #0
10010840:	d003      	beq.n	1001084a <gatts_handle_att_info_req+0x26>
10010842:	8882      	ldrh	r2, [r0, #4]
10010844:	2300      	movs	r3, #0
10010846:	1c28      	adds	r0, r5, #0
10010848:	e001      	b.n	1001084e <gatts_handle_att_info_req+0x2a>
1001084a:	1c28      	adds	r0, r5, #0
1001084c:	2201      	movs	r2, #1
1001084e:	47a0      	blx	r4
10010850:	203b      	movs	r0, #59	; 0x3b
10010852:	bd38      	pop	{r3, r4, r5, pc}
10010854:	10011f51 	.word	0x10011f51
10010858:	1000fffd 	.word	0x1000fffd
1001085c:	1001200d 	.word	0x1001200d

10010860 <gatts_handle_write_req>:
10010860:	b510      	push	{r4, lr}
10010862:	1c14      	adds	r4, r2, #0
10010864:	4b07      	ldr	r3, [pc, #28]	; (10010884 <gatts_handle_write_req+0x24>)
10010866:	4798      	blx	r3
10010868:	4b07      	ldr	r3, [pc, #28]	; (10010888 <gatts_handle_write_req+0x28>)
1001086a:	8860      	ldrh	r0, [r4, #2]
1001086c:	4798      	blx	r3
1001086e:	2302      	movs	r3, #2
10010870:	7881      	ldrb	r1, [r0, #2]
10010872:	2022      	movs	r0, #34	; 0x22
10010874:	4019      	ands	r1, r3
10010876:	d103      	bne.n	10010880 <gatts_handle_write_req+0x20>
10010878:	1c20      	adds	r0, r4, #0
1001087a:	4b04      	ldr	r3, [pc, #16]	; (1001088c <gatts_handle_write_req+0x2c>)
1001087c:	4798      	blx	r3
1001087e:	201f      	movs	r0, #31
10010880:	bd10      	pop	{r4, pc}
10010882:	46c0      	nop			; (mov r8, r8)
10010884:	10011f19 	.word	0x10011f19
10010888:	1000fffd 	.word	0x1000fffd
1001088c:	1001076d 	.word	0x1001076d

10010890 <at_ble_notification_send>:
10010890:	b5f0      	push	{r4, r5, r6, r7, lr}
10010892:	4d17      	ldr	r5, [pc, #92]	; (100108f0 <at_ble_notification_send+0x60>)
10010894:	4c17      	ldr	r4, [pc, #92]	; (100108f4 <at_ble_notification_send+0x64>)
10010896:	682a      	ldr	r2, [r5, #0]
10010898:	44a5      	add	sp, r4
1001089a:	23d2      	movs	r3, #210	; 0xd2
1001089c:	2a04      	cmp	r2, #4
1001089e:	d822      	bhi.n	100108e6 <at_ble_notification_send+0x56>
100108a0:	1c06      	adds	r6, r0, #0
100108a2:	4b15      	ldr	r3, [pc, #84]	; (100108f8 <at_ble_notification_send+0x68>)
100108a4:	1c08      	adds	r0, r1, #0
100108a6:	1c0c      	adds	r4, r1, #0
100108a8:	4798      	blx	r3
100108aa:	2800      	cmp	r0, #0
100108ac:	d008      	beq.n	100108c0 <at_ble_notification_send+0x30>
100108ae:	6883      	ldr	r3, [r0, #8]
100108b0:	2b00      	cmp	r3, #0
100108b2:	d005      	beq.n	100108c0 <at_ble_notification_send+0x30>
100108b4:	8882      	ldrh	r2, [r0, #4]
100108b6:	1c21      	adds	r1, r4, #0
100108b8:	9200      	str	r2, [sp, #0]
100108ba:	2012      	movs	r0, #18
100108bc:	1c32      	adds	r2, r6, #0
100108be:	e00c      	b.n	100108da <at_ble_notification_send+0x4a>
100108c0:	270e      	movs	r7, #14
100108c2:	446f      	add	r7, sp
100108c4:	1c39      	adds	r1, r7, #0
100108c6:	aa04      	add	r2, sp, #16
100108c8:	4b0c      	ldr	r3, [pc, #48]	; (100108fc <at_ble_notification_send+0x6c>)
100108ca:	1c20      	adds	r0, r4, #0
100108cc:	4798      	blx	r3
100108ce:	2012      	movs	r0, #18
100108d0:	1c21      	adds	r1, r4, #0
100108d2:	1c32      	adds	r2, r6, #0
100108d4:	883b      	ldrh	r3, [r7, #0]
100108d6:	9300      	str	r3, [sp, #0]
100108d8:	ab04      	add	r3, sp, #16
100108da:	4c09      	ldr	r4, [pc, #36]	; (10010900 <at_ble_notification_send+0x70>)
100108dc:	47a0      	blx	r4
100108de:	682b      	ldr	r3, [r5, #0]
100108e0:	3301      	adds	r3, #1
100108e2:	602b      	str	r3, [r5, #0]
100108e4:	2300      	movs	r3, #0
100108e6:	1c18      	adds	r0, r3, #0
100108e8:	2385      	movs	r3, #133	; 0x85
100108ea:	009b      	lsls	r3, r3, #2
100108ec:	449d      	add	sp, r3
100108ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108f0:	100187e4 	.word	0x100187e4
100108f4:	fffffdec 	.word	0xfffffdec
100108f8:	1000fffd 	.word	0x1000fffd
100108fc:	10012551 	.word	0x10012551
10010900:	10012055 	.word	0x10012055

10010904 <init_l2cc_task_module>:
10010904:	220a      	movs	r2, #10
10010906:	4b01      	ldr	r3, [pc, #4]	; (1001090c <init_l2cc_task_module+0x8>)
10010908:	701a      	strb	r2, [r3, #0]
1001090a:	4770      	bx	lr
1001090c:	10016cb0 	.word	0x10016cb0

10010910 <l2cc_data_send_rsp_handler>:
10010910:	b510      	push	{r4, lr}
10010912:	7802      	ldrb	r2, [r0, #0]
10010914:	700a      	strb	r2, [r1, #0]
10010916:	7883      	ldrb	r3, [r0, #2]
10010918:	7844      	ldrb	r4, [r0, #1]
1001091a:	021b      	lsls	r3, r3, #8
1001091c:	4323      	orrs	r3, r4
1001091e:	804b      	strh	r3, [r1, #2]
10010920:	7903      	ldrb	r3, [r0, #4]
10010922:	78c0      	ldrb	r0, [r0, #3]
10010924:	021b      	lsls	r3, r3, #8
10010926:	4303      	orrs	r3, r0
10010928:	808b      	strh	r3, [r1, #4]
1001092a:	2a00      	cmp	r2, #0
1001092c:	d103      	bne.n	10010936 <l2cc_data_send_rsp_handler+0x26>
1001092e:	4a02      	ldr	r2, [pc, #8]	; (10010938 <l2cc_data_send_rsp_handler+0x28>)
10010930:	7813      	ldrb	r3, [r2, #0]
10010932:	3301      	adds	r3, #1
10010934:	7013      	strb	r3, [r2, #0]
10010936:	bd10      	pop	{r4, pc}
10010938:	10016cb0 	.word	0x10016cb0

1001093c <l2cc_data_received_handler>:
1001093c:	b508      	push	{r3, lr}
1001093e:	1c03      	adds	r3, r0, #0
10010940:	7842      	ldrb	r2, [r0, #1]
10010942:	7800      	ldrb	r0, [r0, #0]
10010944:	0212      	lsls	r2, r2, #8
10010946:	4302      	orrs	r2, r0
10010948:	800a      	strh	r2, [r1, #0]
1001094a:	78da      	ldrb	r2, [r3, #3]
1001094c:	7898      	ldrb	r0, [r3, #2]
1001094e:	0212      	lsls	r2, r2, #8
10010950:	4302      	orrs	r2, r0
10010952:	804a      	strh	r2, [r1, #2]
10010954:	795a      	ldrb	r2, [r3, #5]
10010956:	7918      	ldrb	r0, [r3, #4]
10010958:	0212      	lsls	r2, r2, #8
1001095a:	4302      	orrs	r2, r0
1001095c:	808a      	strh	r2, [r1, #4]
1001095e:	1d88      	adds	r0, r1, #6
10010960:	1d99      	adds	r1, r3, #6
10010962:	4b01      	ldr	r3, [pc, #4]	; (10010968 <l2cc_data_received_handler+0x2c>)
10010964:	4798      	blx	r3
10010966:	bd08      	pop	{r3, pc}
10010968:	100143b7 	.word	0x100143b7

1001096c <at_ble_authenticate>:
1001096c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001096e:	1c0c      	adds	r4, r1, #0
10010970:	211f      	movs	r1, #31
10010972:	b08b      	sub	sp, #44	; 0x2c
10010974:	9307      	str	r3, [sp, #28]
10010976:	ab02      	add	r3, sp, #8
10010978:	18c9      	adds	r1, r1, r3
1001097a:	230f      	movs	r3, #15
1001097c:	700b      	strb	r3, [r1, #0]
1001097e:	4b40      	ldr	r3, [pc, #256]	; (10010a80 <at_ble_authenticate+0x114>)
10010980:	1c05      	adds	r5, r0, #0
10010982:	1c16      	adds	r6, r2, #0
10010984:	4798      	blx	r3
10010986:	1c07      	adds	r7, r0, #0
10010988:	2001      	movs	r0, #1
1001098a:	2f07      	cmp	r7, #7
1001098c:	d875      	bhi.n	10010a7a <at_ble_authenticate+0x10e>
1001098e:	2c00      	cmp	r4, #0
10010990:	d113      	bne.n	100109ba <at_ble_authenticate+0x4e>
10010992:	2312      	movs	r3, #18
10010994:	435f      	muls	r7, r3
10010996:	4b3b      	ldr	r3, [pc, #236]	; (10010a84 <at_ble_authenticate+0x118>)
10010998:	5cfb      	ldrb	r3, [r7, r3]
1001099a:	4283      	cmp	r3, r0
1001099c:	d001      	beq.n	100109a2 <at_ble_authenticate+0x36>
1001099e:	20cf      	movs	r0, #207	; 0xcf
100109a0:	e06b      	b.n	10010a7a <at_ble_authenticate+0x10e>
100109a2:	9504      	str	r5, [sp, #16]
100109a4:	9400      	str	r4, [sp, #0]
100109a6:	9401      	str	r4, [sp, #4]
100109a8:	9402      	str	r4, [sp, #8]
100109aa:	9403      	str	r4, [sp, #12]
100109ac:	1c20      	adds	r0, r4, #0
100109ae:	1c21      	adds	r1, r4, #0
100109b0:	1c22      	adds	r2, r4, #0
100109b2:	1c23      	adds	r3, r4, #0
100109b4:	4d34      	ldr	r5, [pc, #208]	; (10010a88 <at_ble_authenticate+0x11c>)
100109b6:	47a8      	blx	r5
100109b8:	e05e      	b.n	10010a78 <at_ble_authenticate+0x10c>
100109ba:	7922      	ldrb	r2, [r4, #4]
100109bc:	2a06      	cmp	r2, #6
100109be:	d9ee      	bls.n	1001099e <at_ble_authenticate+0x32>
100109c0:	7963      	ldrb	r3, [r4, #5]
100109c2:	2b10      	cmp	r3, #16
100109c4:	d8eb      	bhi.n	1001099e <at_ble_authenticate+0x32>
100109c6:	429a      	cmp	r2, r3
100109c8:	d8e9      	bhi.n	1001099e <at_ble_authenticate+0x32>
100109ca:	7a23      	ldrb	r3, [r4, #8]
100109cc:	2b04      	cmp	r3, #4
100109ce:	d8e6      	bhi.n	1001099e <at_ble_authenticate+0x32>
100109d0:	79a3      	ldrb	r3, [r4, #6]
100109d2:	2b07      	cmp	r3, #7
100109d4:	d8e3      	bhi.n	1001099e <at_ble_authenticate+0x32>
100109d6:	79e3      	ldrb	r3, [r4, #7]
100109d8:	2b07      	cmp	r3, #7
100109da:	d8e0      	bhi.n	1001099e <at_ble_authenticate+0x32>
100109dc:	78a3      	ldrb	r3, [r4, #2]
100109de:	2b00      	cmp	r3, #0
100109e0:	d006      	beq.n	100109f0 <at_ble_authenticate+0x84>
100109e2:	2e00      	cmp	r6, #0
100109e4:	d0db      	beq.n	1001099e <at_ble_authenticate+0x32>
100109e6:	4829      	ldr	r0, [pc, #164]	; (10010a8c <at_ble_authenticate+0x120>)
100109e8:	1c31      	adds	r1, r6, #0
100109ea:	221c      	movs	r2, #28
100109ec:	4b28      	ldr	r3, [pc, #160]	; (10010a90 <at_ble_authenticate+0x124>)
100109ee:	4798      	blx	r3
100109f0:	9b07      	ldr	r3, [sp, #28]
100109f2:	2b00      	cmp	r3, #0
100109f4:	d005      	beq.n	10010a02 <at_ble_authenticate+0x96>
100109f6:	4827      	ldr	r0, [pc, #156]	; (10010a94 <at_ble_authenticate+0x128>)
100109f8:	1c19      	adds	r1, r3, #0
100109fa:	309a      	adds	r0, #154	; 0x9a
100109fc:	2210      	movs	r2, #16
100109fe:	4b24      	ldr	r3, [pc, #144]	; (10010a90 <at_ble_authenticate+0x124>)
10010a00:	4798      	blx	r3
10010a02:	7863      	ldrb	r3, [r4, #1]
10010a04:	78a2      	ldrb	r2, [r4, #2]
10010a06:	009b      	lsls	r3, r3, #2
10010a08:	4313      	orrs	r3, r2
10010a0a:	2212      	movs	r2, #18
10010a0c:	4357      	muls	r7, r2
10010a0e:	4a1d      	ldr	r2, [pc, #116]	; (10010a84 <at_ble_authenticate+0x118>)
10010a10:	b2db      	uxtb	r3, r3
10010a12:	5cba      	ldrb	r2, [r7, r2]
10010a14:	2a00      	cmp	r2, #0
10010a16:	d116      	bne.n	10010a46 <at_ble_authenticate+0xda>
10010a18:	79a0      	ldrb	r0, [r4, #6]
10010a1a:	0742      	lsls	r2, r0, #29
10010a1c:	d502      	bpl.n	10010a24 <at_ble_authenticate+0xb8>
10010a1e:	9a07      	ldr	r2, [sp, #28]
10010a20:	2a00      	cmp	r2, #0
10010a22:	d0bc      	beq.n	1001099e <at_ble_authenticate+0x32>
10010a24:	07c2      	lsls	r2, r0, #31
10010a26:	d501      	bpl.n	10010a2c <at_ble_authenticate+0xc0>
10010a28:	2e00      	cmp	r6, #0
10010a2a:	d0b8      	beq.n	1001099e <at_ble_authenticate+0x32>
10010a2c:	7966      	ldrb	r6, [r4, #5]
10010a2e:	7821      	ldrb	r1, [r4, #0]
10010a30:	78e2      	ldrb	r2, [r4, #3]
10010a32:	9600      	str	r6, [sp, #0]
10010a34:	9001      	str	r0, [sp, #4]
10010a36:	79e0      	ldrb	r0, [r4, #7]
10010a38:	9002      	str	r0, [sp, #8]
10010a3a:	7a20      	ldrb	r0, [r4, #8]
10010a3c:	4c16      	ldr	r4, [pc, #88]	; (10010a98 <at_ble_authenticate+0x12c>)
10010a3e:	9003      	str	r0, [sp, #12]
10010a40:	1c28      	adds	r0, r5, #0
10010a42:	47a0      	blx	r4
10010a44:	e018      	b.n	10010a78 <at_ble_authenticate+0x10c>
10010a46:	2a01      	cmp	r2, #1
10010a48:	d1a9      	bne.n	1001099e <at_ble_authenticate+0x32>
10010a4a:	79e0      	ldrb	r0, [r4, #7]
10010a4c:	0742      	lsls	r2, r0, #29
10010a4e:	d502      	bpl.n	10010a56 <at_ble_authenticate+0xea>
10010a50:	9a07      	ldr	r2, [sp, #28]
10010a52:	2a00      	cmp	r2, #0
10010a54:	d0a3      	beq.n	1001099e <at_ble_authenticate+0x32>
10010a56:	07c2      	lsls	r2, r0, #31
10010a58:	d501      	bpl.n	10010a5e <at_ble_authenticate+0xf2>
10010a5a:	2e00      	cmp	r6, #0
10010a5c:	d09f      	beq.n	1001099e <at_ble_authenticate+0x32>
10010a5e:	7966      	ldrb	r6, [r4, #5]
10010a60:	7821      	ldrb	r1, [r4, #0]
10010a62:	78e2      	ldrb	r2, [r4, #3]
10010a64:	9600      	str	r6, [sp, #0]
10010a66:	79a6      	ldrb	r6, [r4, #6]
10010a68:	9002      	str	r0, [sp, #8]
10010a6a:	9601      	str	r6, [sp, #4]
10010a6c:	7a20      	ldrb	r0, [r4, #8]
10010a6e:	9504      	str	r5, [sp, #16]
10010a70:	9003      	str	r0, [sp, #12]
10010a72:	4c05      	ldr	r4, [pc, #20]	; (10010a88 <at_ble_authenticate+0x11c>)
10010a74:	2001      	movs	r0, #1
10010a76:	47a0      	blx	r4
10010a78:	2000      	movs	r0, #0
10010a7a:	b00b      	add	sp, #44	; 0x2c
10010a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a7e:	46c0      	nop			; (mov r8, r8)
10010a80:	10010e6d 	.word	0x10010e6d
10010a84:	10019652 	.word	0x10019652
10010a88:	100113dd 	.word	0x100113dd
10010a8c:	10019760 	.word	0x10019760
10010a90:	100143b7 	.word	0x100143b7
10010a94:	100196e2 	.word	0x100196e2
10010a98:	100111bd 	.word	0x100111bd

10010a9c <at_ble_pair_key_reply>:
10010a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a9e:	b085      	sub	sp, #20
10010aa0:	1c05      	adds	r5, r0, #0
10010aa2:	1c0c      	adds	r4, r1, #0
10010aa4:	1c16      	adds	r6, r2, #0
10010aa6:	2100      	movs	r1, #0
10010aa8:	4668      	mov	r0, sp
10010aaa:	2210      	movs	r2, #16
10010aac:	4b18      	ldr	r3, [pc, #96]	; (10010b10 <at_ble_pair_key_reply+0x74>)
10010aae:	4798      	blx	r3
10010ab0:	2101      	movs	r1, #1
10010ab2:	2e00      	cmp	r6, #0
10010ab4:	d101      	bne.n	10010aba <at_ble_pair_key_reply+0x1e>
10010ab6:	1c31      	adds	r1, r6, #0
10010ab8:	466e      	mov	r6, sp
10010aba:	2c00      	cmp	r4, #0
10010abc:	d116      	bne.n	10010aec <at_ble_pair_key_reply+0x50>
10010abe:	2701      	movs	r7, #1
10010ac0:	1c23      	adds	r3, r4, #0
10010ac2:	1d70      	adds	r0, r6, #5
10010ac4:	3e01      	subs	r6, #1
10010ac6:	7802      	ldrb	r2, [r0, #0]
10010ac8:	3801      	subs	r0, #1
10010aca:	3a30      	subs	r2, #48	; 0x30
10010acc:	437a      	muls	r2, r7
10010ace:	189b      	adds	r3, r3, r2
10010ad0:	220a      	movs	r2, #10
10010ad2:	4357      	muls	r7, r2
10010ad4:	42b0      	cmp	r0, r6
10010ad6:	d1f6      	bne.n	10010ac6 <at_ble_pair_key_reply+0x2a>
10010ad8:	466a      	mov	r2, sp
10010ada:	4668      	mov	r0, sp
10010adc:	7013      	strb	r3, [r2, #0]
10010ade:	0a1a      	lsrs	r2, r3, #8
10010ae0:	7042      	strb	r2, [r0, #1]
10010ae2:	0c1a      	lsrs	r2, r3, #16
10010ae4:	0e1b      	lsrs	r3, r3, #24
10010ae6:	7082      	strb	r2, [r0, #2]
10010ae8:	70c3      	strb	r3, [r0, #3]
10010aea:	e009      	b.n	10010b00 <at_ble_pair_key_reply+0x64>
10010aec:	20cf      	movs	r0, #207	; 0xcf
10010aee:	2c01      	cmp	r4, #1
10010af0:	d10c      	bne.n	10010b0c <at_ble_pair_key_reply+0x70>
10010af2:	2300      	movs	r3, #0
10010af4:	4668      	mov	r0, sp
10010af6:	5cf2      	ldrb	r2, [r6, r3]
10010af8:	54c2      	strb	r2, [r0, r3]
10010afa:	3301      	adds	r3, #1
10010afc:	2b10      	cmp	r3, #16
10010afe:	d1f9      	bne.n	10010af4 <at_ble_pair_key_reply+0x58>
10010b00:	2004      	movs	r0, #4
10010b02:	466a      	mov	r2, sp
10010b04:	1c2b      	adds	r3, r5, #0
10010b06:	4c03      	ldr	r4, [pc, #12]	; (10010b14 <at_ble_pair_key_reply+0x78>)
10010b08:	47a0      	blx	r4
10010b0a:	2000      	movs	r0, #0
10010b0c:	b005      	add	sp, #20
10010b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b10:	100143c9 	.word	0x100143c9
10010b14:	10011459 	.word	0x10011459

10010b18 <at_ble_send_slave_sec_request>:
10010b18:	b570      	push	{r4, r5, r6, lr}
10010b1a:	4b0c      	ldr	r3, [pc, #48]	; (10010b4c <at_ble_send_slave_sec_request+0x34>)
10010b1c:	1c0e      	adds	r6, r1, #0
10010b1e:	2100      	movs	r1, #0
10010b20:	1c05      	adds	r5, r0, #0
10010b22:	1c14      	adds	r4, r2, #0
10010b24:	4798      	blx	r3
10010b26:	2301      	movs	r3, #1
10010b28:	2807      	cmp	r0, #7
10010b2a:	d80d      	bhi.n	10010b48 <at_ble_send_slave_sec_request+0x30>
10010b2c:	3311      	adds	r3, #17
10010b2e:	4358      	muls	r0, r3
10010b30:	4b07      	ldr	r3, [pc, #28]	; (10010b50 <at_ble_send_slave_sec_request+0x38>)
10010b32:	5cc2      	ldrb	r2, [r0, r3]
10010b34:	23e0      	movs	r3, #224	; 0xe0
10010b36:	2a01      	cmp	r2, #1
10010b38:	d106      	bne.n	10010b48 <at_ble_send_slave_sec_request+0x30>
10010b3a:	00b1      	lsls	r1, r6, #2
10010b3c:	430c      	orrs	r4, r1
10010b3e:	4b05      	ldr	r3, [pc, #20]	; (10010b54 <at_ble_send_slave_sec_request+0x3c>)
10010b40:	b2e1      	uxtb	r1, r4
10010b42:	1c28      	adds	r0, r5, #0
10010b44:	4798      	blx	r3
10010b46:	2300      	movs	r3, #0
10010b48:	1c18      	adds	r0, r3, #0
10010b4a:	bd70      	pop	{r4, r5, r6, pc}
10010b4c:	10010e6d 	.word	0x10010e6d
10010b50:	10019652 	.word	0x10019652
10010b54:	100114a9 	.word	0x100114a9

10010b58 <at_ble_encryption_start>:
10010b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b5a:	23cf      	movs	r3, #207	; 0xcf
10010b5c:	2900      	cmp	r1, #0
10010b5e:	d02b      	beq.n	10010bb8 <at_ble_encryption_start+0x60>
10010b60:	2a05      	cmp	r2, #5
10010b62:	d829      	bhi.n	10010bb8 <at_ble_encryption_start+0x60>
10010b64:	2701      	movs	r7, #1
10010b66:	1c3d      	adds	r5, r7, #0
10010b68:	2433      	movs	r4, #51	; 0x33
10010b6a:	4095      	lsls	r5, r2
10010b6c:	4225      	tst	r5, r4
10010b6e:	d023      	beq.n	10010bb8 <at_ble_encryption_start+0x60>
10010b70:	7e8c      	ldrb	r4, [r1, #26]
10010b72:	3c07      	subs	r4, #7
10010b74:	2c09      	cmp	r4, #9
10010b76:	d81f      	bhi.n	10010bb8 <at_ble_encryption_start+0x60>
10010b78:	4b10      	ldr	r3, [pc, #64]	; (10010bbc <at_ble_encryption_start+0x64>)
10010b7a:	1c0c      	adds	r4, r1, #0
10010b7c:	2100      	movs	r1, #0
10010b7e:	1c15      	adds	r5, r2, #0
10010b80:	1c06      	adds	r6, r0, #0
10010b82:	4798      	blx	r3
10010b84:	1c3b      	adds	r3, r7, #0
10010b86:	2807      	cmp	r0, #7
10010b88:	d816      	bhi.n	10010bb8 <at_ble_encryption_start+0x60>
10010b8a:	2312      	movs	r3, #18
10010b8c:	4358      	muls	r0, r3
10010b8e:	4b0c      	ldr	r3, [pc, #48]	; (10010bc0 <at_ble_encryption_start+0x68>)
10010b90:	5cc7      	ldrb	r7, [r0, r3]
10010b92:	23e0      	movs	r3, #224	; 0xe0
10010b94:	2f00      	cmp	r7, #0
10010b96:	d10f      	bne.n	10010bb8 <at_ble_encryption_start+0x60>
10010b98:	1c21      	adds	r1, r4, #0
10010b9a:	221c      	movs	r2, #28
10010b9c:	4b09      	ldr	r3, [pc, #36]	; (10010bc4 <at_ble_encryption_start+0x6c>)
10010b9e:	480a      	ldr	r0, [pc, #40]	; (10010bc8 <at_ble_encryption_start+0x70>)
10010ba0:	4798      	blx	r3
10010ba2:	1c23      	adds	r3, r4, #0
10010ba4:	7ea1      	ldrb	r1, [r4, #26]
10010ba6:	8a22      	ldrh	r2, [r4, #16]
10010ba8:	3312      	adds	r3, #18
10010baa:	9100      	str	r1, [sp, #0]
10010bac:	9501      	str	r5, [sp, #4]
10010bae:	1c21      	adds	r1, r4, #0
10010bb0:	1c30      	adds	r0, r6, #0
10010bb2:	4c06      	ldr	r4, [pc, #24]	; (10010bcc <at_ble_encryption_start+0x74>)
10010bb4:	47a0      	blx	r4
10010bb6:	1c3b      	adds	r3, r7, #0
10010bb8:	1c18      	adds	r0, r3, #0
10010bba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010bbc:	10010e6d 	.word	0x10010e6d
10010bc0:	10019652 	.word	0x10019652
10010bc4:	100143b7 	.word	0x100143b7
10010bc8:	10019760 	.word	0x10019760
10010bcc:	100114e9 	.word	0x100114e9

10010bd0 <at_ble_encryption_request_reply>:
10010bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010bd2:	24cf      	movs	r4, #207	; 0xcf
10010bd4:	2b00      	cmp	r3, #0
10010bd6:	d011      	beq.n	10010bfc <at_ble_encryption_request_reply+0x2c>
10010bd8:	2a00      	cmp	r2, #0
10010bda:	d00a      	beq.n	10010bf2 <at_ble_encryption_request_reply+0x22>
10010bdc:	2905      	cmp	r1, #5
10010bde:	d80d      	bhi.n	10010bfc <at_ble_encryption_request_reply+0x2c>
10010be0:	2501      	movs	r5, #1
10010be2:	2633      	movs	r6, #51	; 0x33
10010be4:	408d      	lsls	r5, r1
10010be6:	4235      	tst	r5, r6
10010be8:	d008      	beq.n	10010bfc <at_ble_encryption_request_reply+0x2c>
10010bea:	7e9d      	ldrb	r5, [r3, #26]
10010bec:	3d07      	subs	r5, #7
10010bee:	2d09      	cmp	r5, #9
10010bf0:	d804      	bhi.n	10010bfc <at_ble_encryption_request_reply+0x2c>
10010bf2:	7e9c      	ldrb	r4, [r3, #26]
10010bf4:	9400      	str	r4, [sp, #0]
10010bf6:	4c02      	ldr	r4, [pc, #8]	; (10010c00 <at_ble_encryption_request_reply+0x30>)
10010bf8:	47a0      	blx	r4
10010bfa:	2400      	movs	r4, #0
10010bfc:	1c20      	adds	r0, r4, #0
10010bfe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010c00:	100115a5 	.word	0x100115a5

10010c04 <rx_callback>:
10010c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c06:	8883      	ldrh	r3, [r0, #4]
10010c08:	1c01      	adds	r1, r0, #0
10010c0a:	9301      	str	r3, [sp, #4]
10010c0c:	88c5      	ldrh	r5, [r0, #6]
10010c0e:	8806      	ldrh	r6, [r0, #0]
10010c10:	2d00      	cmp	r5, #0
10010c12:	d10f      	bne.n	10010c34 <rx_callback+0x30>
10010c14:	1c19      	adds	r1, r3, #0
10010c16:	1c30      	adds	r0, r6, #0
10010c18:	4b19      	ldr	r3, [pc, #100]	; (10010c80 <rx_callback+0x7c>)
10010c1a:	1c2a      	adds	r2, r5, #0
10010c1c:	4798      	blx	r3
10010c1e:	1e03      	subs	r3, r0, #0
10010c20:	d105      	bne.n	10010c2e <rx_callback+0x2a>
10010c22:	1c30      	adds	r0, r6, #0
10010c24:	9901      	ldr	r1, [sp, #4]
10010c26:	1c1a      	adds	r2, r3, #0
10010c28:	4c16      	ldr	r4, [pc, #88]	; (10010c84 <rx_callback+0x80>)
10010c2a:	47a0      	blx	r4
10010c2c:	e027      	b.n	10010c7e <rx_callback+0x7a>
10010c2e:	4b16      	ldr	r3, [pc, #88]	; (10010c88 <rx_callback+0x84>)
10010c30:	4798      	blx	r3
10010c32:	e024      	b.n	10010c7e <rx_callback+0x7a>
10010c34:	4c15      	ldr	r4, [pc, #84]	; (10010c8c <rx_callback+0x88>)
10010c36:	4a16      	ldr	r2, [pc, #88]	; (10010c90 <rx_callback+0x8c>)
10010c38:	6823      	ldr	r3, [r4, #0]
10010c3a:	6812      	ldr	r2, [r2, #0]
10010c3c:	18eb      	adds	r3, r5, r3
10010c3e:	4293      	cmp	r3, r2
10010c40:	d901      	bls.n	10010c46 <rx_callback+0x42>
10010c42:	2300      	movs	r3, #0
10010c44:	6023      	str	r3, [r4, #0]
10010c46:	4f13      	ldr	r7, [pc, #76]	; (10010c94 <rx_callback+0x90>)
10010c48:	6822      	ldr	r2, [r4, #0]
10010c4a:	683b      	ldr	r3, [r7, #0]
10010c4c:	3108      	adds	r1, #8
10010c4e:	1898      	adds	r0, r3, r2
10010c50:	1c2a      	adds	r2, r5, #0
10010c52:	4b11      	ldr	r3, [pc, #68]	; (10010c98 <rx_callback+0x94>)
10010c54:	4798      	blx	r3
10010c56:	683b      	ldr	r3, [r7, #0]
10010c58:	6822      	ldr	r2, [r4, #0]
10010c5a:	1c30      	adds	r0, r6, #0
10010c5c:	189a      	adds	r2, r3, r2
10010c5e:	9901      	ldr	r1, [sp, #4]
10010c60:	4b07      	ldr	r3, [pc, #28]	; (10010c80 <rx_callback+0x7c>)
10010c62:	4798      	blx	r3
10010c64:	2800      	cmp	r0, #0
10010c66:	d1e2      	bne.n	10010c2e <rx_callback+0x2a>
10010c68:	6823      	ldr	r3, [r4, #0]
10010c6a:	683a      	ldr	r2, [r7, #0]
10010c6c:	1c30      	adds	r0, r6, #0
10010c6e:	18d2      	adds	r2, r2, r3
10010c70:	9901      	ldr	r1, [sp, #4]
10010c72:	1c2b      	adds	r3, r5, #0
10010c74:	4e03      	ldr	r6, [pc, #12]	; (10010c84 <rx_callback+0x80>)
10010c76:	47b0      	blx	r6
10010c78:	6823      	ldr	r3, [r4, #0]
10010c7a:	18ed      	adds	r5, r5, r3
10010c7c:	6025      	str	r5, [r4, #0]
10010c7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010c80:	1000f299 	.word	0x1000f299
10010c84:	1000f211 	.word	0x1000f211
10010c88:	1000ec89 	.word	0x1000ec89
10010c8c:	100197bc 	.word	0x100197bc
10010c90:	10018760 	.word	0x10018760
10010c94:	1001875c 	.word	0x1001875c
10010c98:	100143b7 	.word	0x100143b7

10010c9c <interface_send>:
10010c9c:	b508      	push	{r3, lr}
10010c9e:	4b02      	ldr	r3, [pc, #8]	; (10010ca8 <interface_send+0xc>)
10010ca0:	4798      	blx	r3
10010ca2:	2000      	movs	r0, #0
10010ca4:	bd08      	pop	{r3, pc}
10010ca6:	46c0      	nop			; (mov r8, r8)
10010ca8:	1000e981 	.word	0x1000e981

10010cac <interface_init>:
10010cac:	2280      	movs	r2, #128	; 0x80
10010cae:	b510      	push	{r4, lr}
10010cb0:	2100      	movs	r1, #0
10010cb2:	1c04      	adds	r4, r0, #0
10010cb4:	0092      	lsls	r2, r2, #2
10010cb6:	4b08      	ldr	r3, [pc, #32]	; (10010cd8 <interface_init+0x2c>)
10010cb8:	4808      	ldr	r0, [pc, #32]	; (10010cdc <interface_init+0x30>)
10010cba:	4798      	blx	r3
10010cbc:	2200      	movs	r2, #0
10010cbe:	4b08      	ldr	r3, [pc, #32]	; (10010ce0 <interface_init+0x34>)
10010cc0:	601a      	str	r2, [r3, #0]
10010cc2:	4a08      	ldr	r2, [pc, #32]	; (10010ce4 <interface_init+0x38>)
10010cc4:	4b08      	ldr	r3, [pc, #32]	; (10010ce8 <interface_init+0x3c>)
10010cc6:	601a      	str	r2, [r3, #0]
10010cc8:	4b08      	ldr	r3, [pc, #32]	; (10010cec <interface_init+0x40>)
10010cca:	6922      	ldr	r2, [r4, #16]
10010ccc:	601a      	str	r2, [r3, #0]
10010cce:	6962      	ldr	r2, [r4, #20]
10010cd0:	4b07      	ldr	r3, [pc, #28]	; (10010cf0 <interface_init+0x44>)
10010cd2:	601a      	str	r2, [r3, #0]
10010cd4:	bd10      	pop	{r4, pc}
10010cd6:	46c0      	nop			; (mov r8, r8)
10010cd8:	100143c9 	.word	0x100143c9
10010cdc:	100199c0 	.word	0x100199c0
10010ce0:	100197bc 	.word	0x100197bc
10010ce4:	100197c0 	.word	0x100197c0
10010ce8:	10016cb4 	.word	0x10016cb4
10010cec:	1001875c 	.word	0x1001875c
10010cf0:	10018760 	.word	0x10018760

10010cf4 <platform_cmd_cmpl_signal>:
10010cf4:	2201      	movs	r2, #1
10010cf6:	4b01      	ldr	r3, [pc, #4]	; (10010cfc <platform_cmd_cmpl_signal+0x8>)
10010cf8:	601a      	str	r2, [r3, #0]
10010cfa:	4770      	bx	lr
10010cfc:	10018764 	.word	0x10018764

10010d00 <platform_cmd_cmpl_wait>:
10010d00:	b510      	push	{r4, lr}
10010d02:	1c04      	adds	r4, r0, #0
10010d04:	4b07      	ldr	r3, [pc, #28]	; (10010d24 <platform_cmd_cmpl_wait+0x24>)
10010d06:	681a      	ldr	r2, [r3, #0]
10010d08:	2a01      	cmp	r2, #1
10010d0a:	d003      	beq.n	10010d14 <platform_cmd_cmpl_wait+0x14>
10010d0c:	4b06      	ldr	r3, [pc, #24]	; (10010d28 <platform_cmd_cmpl_wait+0x28>)
10010d0e:	2000      	movs	r0, #0
10010d10:	4798      	blx	r3
10010d12:	e7f7      	b.n	10010d04 <platform_cmd_cmpl_wait+0x4>
10010d14:	6819      	ldr	r1, [r3, #0]
10010d16:	2901      	cmp	r1, #1
10010d18:	d102      	bne.n	10010d20 <platform_cmd_cmpl_wait+0x20>
10010d1a:	2200      	movs	r2, #0
10010d1c:	601a      	str	r2, [r3, #0]
10010d1e:	e000      	b.n	10010d22 <platform_cmd_cmpl_wait+0x22>
10010d20:	7022      	strb	r2, [r4, #0]
10010d22:	bd10      	pop	{r4, pc}
10010d24:	10018764 	.word	0x10018764
10010d28:	1000ea11 	.word	0x1000ea11

10010d2c <start_timer>:
10010d2c:	4770      	bx	lr

10010d2e <stop_timer>:
10010d2e:	4770      	bx	lr

10010d30 <dbg_le_set_bd_addr_req_handler>:
10010d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010d32:	466b      	mov	r3, sp
10010d34:	1dde      	adds	r6, r3, #7
10010d36:	2300      	movs	r3, #0
10010d38:	7033      	strb	r3, [r6, #0]
10010d3a:	230f      	movs	r3, #15
10010d3c:	4c13      	ldr	r4, [pc, #76]	; (10010d8c <dbg_le_set_bd_addr_req_handler+0x5c>)
10010d3e:	2703      	movs	r7, #3
10010d40:	7023      	strb	r3, [r4, #0]
10010d42:	2300      	movs	r3, #0
10010d44:	70e3      	strb	r3, [r4, #3]
10010d46:	4b12      	ldr	r3, [pc, #72]	; (10010d90 <dbg_le_set_bd_addr_req_handler+0x60>)
10010d48:	1c01      	adds	r1, r0, #0
10010d4a:	881a      	ldrh	r2, [r3, #0]
10010d4c:	881b      	ldrh	r3, [r3, #0]
10010d4e:	7122      	strb	r2, [r4, #4]
10010d50:	0a1b      	lsrs	r3, r3, #8
10010d52:	2206      	movs	r2, #6
10010d54:	7163      	strb	r3, [r4, #5]
10010d56:	480f      	ldr	r0, [pc, #60]	; (10010d94 <dbg_le_set_bd_addr_req_handler+0x64>)
10010d58:	4b0f      	ldr	r3, [pc, #60]	; (10010d98 <dbg_le_set_bd_addr_req_handler+0x68>)
10010d5a:	7067      	strb	r7, [r4, #1]
10010d5c:	70a7      	strb	r7, [r4, #2]
10010d5e:	4798      	blx	r3
10010d60:	4d0e      	ldr	r5, [pc, #56]	; (10010d9c <dbg_le_set_bd_addr_req_handler+0x6c>)
10010d62:	4b0f      	ldr	r3, [pc, #60]	; (10010da0 <dbg_le_set_bd_addr_req_handler+0x70>)
10010d64:	210e      	movs	r1, #14
10010d66:	802b      	strh	r3, [r5, #0]
10010d68:	2306      	movs	r3, #6
10010d6a:	71a3      	strb	r3, [r4, #6]
10010d6c:	2300      	movs	r3, #0
10010d6e:	1c20      	adds	r0, r4, #0
10010d70:	71e3      	strb	r3, [r4, #7]
10010d72:	4b0c      	ldr	r3, [pc, #48]	; (10010da4 <dbg_le_set_bd_addr_req_handler+0x74>)
10010d74:	80af      	strh	r7, [r5, #4]
10010d76:	4798      	blx	r3
10010d78:	1c30      	adds	r0, r6, #0
10010d7a:	4b0b      	ldr	r3, [pc, #44]	; (10010da8 <dbg_le_set_bd_addr_req_handler+0x78>)
10010d7c:	4798      	blx	r3
10010d7e:	7833      	ldrb	r3, [r6, #0]
10010d80:	20e2      	movs	r0, #226	; 0xe2
10010d82:	2b00      	cmp	r3, #0
10010d84:	d101      	bne.n	10010d8a <dbg_le_set_bd_addr_req_handler+0x5a>
10010d86:	68ab      	ldr	r3, [r5, #8]
10010d88:	7818      	ldrb	r0, [r3, #0]
10010d8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010d8c:	100199c0 	.word	0x100199c0
10010d90:	10019650 	.word	0x10019650
10010d94:	100199c8 	.word	0x100199c8
10010d98:	100143b7 	.word	0x100143b7
10010d9c:	10019644 	.word	0x10019644
10010da0:	00000329 	.word	0x00000329
10010da4:	10010c9d 	.word	0x10010c9d
10010da8:	10010d01 	.word	0x10010d01

10010dac <gapc_get_dev_info_cfm.constprop.1>:
10010dac:	b538      	push	{r3, r4, r5, lr}
10010dae:	230b      	movs	r3, #11
10010db0:	4c27      	ldr	r4, [pc, #156]	; (10010e50 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10010db2:	7023      	strb	r3, [r4, #0]
10010db4:	3303      	adds	r3, #3
10010db6:	7063      	strb	r3, [r4, #1]
10010db8:	3329      	adds	r3, #41	; 0x29
10010dba:	70a3      	strb	r3, [r4, #2]
10010dbc:	4b25      	ldr	r3, [pc, #148]	; (10010e54 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10010dbe:	70e1      	strb	r1, [r4, #3]
10010dc0:	881a      	ldrh	r2, [r3, #0]
10010dc2:	881b      	ldrh	r3, [r3, #0]
10010dc4:	7122      	strb	r2, [r4, #4]
10010dc6:	0a1b      	lsrs	r3, r3, #8
10010dc8:	7163      	strb	r3, [r4, #5]
10010dca:	2300      	movs	r3, #0
10010dcc:	7220      	strb	r0, [r4, #8]
10010dce:	7263      	strb	r3, [r4, #9]
10010dd0:	2801      	cmp	r0, #1
10010dd2:	d02b      	beq.n	10010e2c <gapc_get_dev_info_cfm.constprop.1+0x80>
10010dd4:	4298      	cmp	r0, r3
10010dd6:	d01b      	beq.n	10010e10 <gapc_get_dev_info_cfm.constprop.1+0x64>
10010dd8:	2802      	cmp	r0, #2
10010dda:	d12f      	bne.n	10010e3c <gapc_get_dev_info_cfm.constprop.1+0x90>
10010ddc:	4b1e      	ldr	r3, [pc, #120]	; (10010e58 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010dde:	2112      	movs	r1, #18
10010de0:	1c1a      	adds	r2, r3, #0
10010de2:	32ce      	adds	r2, #206	; 0xce
10010de4:	8812      	ldrh	r2, [r2, #0]
10010de6:	72a2      	strb	r2, [r4, #10]
10010de8:	0a12      	lsrs	r2, r2, #8
10010dea:	72e2      	strb	r2, [r4, #11]
10010dec:	1c1a      	adds	r2, r3, #0
10010dee:	32d0      	adds	r2, #208	; 0xd0
10010df0:	8812      	ldrh	r2, [r2, #0]
10010df2:	7322      	strb	r2, [r4, #12]
10010df4:	0a12      	lsrs	r2, r2, #8
10010df6:	7362      	strb	r2, [r4, #13]
10010df8:	1c1a      	adds	r2, r3, #0
10010dfa:	32d2      	adds	r2, #210	; 0xd2
10010dfc:	8812      	ldrh	r2, [r2, #0]
10010dfe:	33d4      	adds	r3, #212	; 0xd4
10010e00:	73a2      	strb	r2, [r4, #14]
10010e02:	0a12      	lsrs	r2, r2, #8
10010e04:	73e2      	strb	r2, [r4, #15]
10010e06:	881b      	ldrh	r3, [r3, #0]
10010e08:	7423      	strb	r3, [r4, #16]
10010e0a:	0a1b      	lsrs	r3, r3, #8
10010e0c:	7463      	strb	r3, [r4, #17]
10010e0e:	e016      	b.n	10010e3e <gapc_get_dev_info_cfm.constprop.1+0x92>
10010e10:	4b11      	ldr	r3, [pc, #68]	; (10010e58 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010e12:	4912      	ldr	r1, [pc, #72]	; (10010e5c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010e14:	33aa      	adds	r3, #170	; 0xaa
10010e16:	881d      	ldrh	r5, [r3, #0]
10010e18:	4811      	ldr	r0, [pc, #68]	; (10010e60 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010e1a:	0a2b      	lsrs	r3, r5, #8
10010e1c:	72a5      	strb	r5, [r4, #10]
10010e1e:	72e3      	strb	r3, [r4, #11]
10010e20:	1c2a      	adds	r2, r5, #0
10010e22:	4b10      	ldr	r3, [pc, #64]	; (10010e64 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010e24:	350c      	adds	r5, #12
10010e26:	4798      	blx	r3
10010e28:	b2a9      	uxth	r1, r5
10010e2a:	e008      	b.n	10010e3e <gapc_get_dev_info_cfm.constprop.1+0x92>
10010e2c:	4b0a      	ldr	r3, [pc, #40]	; (10010e58 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010e2e:	210c      	movs	r1, #12
10010e30:	33cc      	adds	r3, #204	; 0xcc
10010e32:	881b      	ldrh	r3, [r3, #0]
10010e34:	72a3      	strb	r3, [r4, #10]
10010e36:	0a1b      	lsrs	r3, r3, #8
10010e38:	72e3      	strb	r3, [r4, #11]
10010e3a:	e000      	b.n	10010e3e <gapc_get_dev_info_cfm.constprop.1+0x92>
10010e3c:	210a      	movs	r1, #10
10010e3e:	1c0b      	adds	r3, r1, #0
10010e40:	3b08      	subs	r3, #8
10010e42:	71a3      	strb	r3, [r4, #6]
10010e44:	121b      	asrs	r3, r3, #8
10010e46:	71e3      	strb	r3, [r4, #7]
10010e48:	1c20      	adds	r0, r4, #0
10010e4a:	4b07      	ldr	r3, [pc, #28]	; (10010e68 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010e4c:	4798      	blx	r3
10010e4e:	bd38      	pop	{r3, r4, r5, pc}
10010e50:	100199c0 	.word	0x100199c0
10010e54:	10019650 	.word	0x10019650
10010e58:	100196e2 	.word	0x100196e2
10010e5c:	1001978e 	.word	0x1001978e
10010e60:	100199cc 	.word	0x100199cc
10010e64:	100143b7 	.word	0x100143b7
10010e68:	10010c9d 	.word	0x10010c9d

10010e6c <check_ConnData_idx_role>:
10010e6c:	4b0c      	ldr	r3, [pc, #48]	; (10010ea0 <check_ConnData_idx_role+0x34>)
10010e6e:	b570      	push	{r4, r5, r6, lr}
10010e70:	1c04      	adds	r4, r0, #0
10010e72:	2008      	movs	r0, #8
10010e74:	429c      	cmp	r4, r3
10010e76:	d011      	beq.n	10010e9c <check_ConnData_idx_role+0x30>
10010e78:	2300      	movs	r3, #0
10010e7a:	2212      	movs	r2, #18
10010e7c:	435a      	muls	r2, r3
10010e7e:	4d09      	ldr	r5, [pc, #36]	; (10010ea4 <check_ConnData_idx_role+0x38>)
10010e80:	b2d8      	uxtb	r0, r3
10010e82:	1956      	adds	r6, r2, r5
10010e84:	8976      	ldrh	r6, [r6, #10]
10010e86:	42a6      	cmp	r6, r4
10010e88:	d104      	bne.n	10010e94 <check_ConnData_idx_role+0x28>
10010e8a:	2900      	cmp	r1, #0
10010e8c:	d006      	beq.n	10010e9c <check_ConnData_idx_role+0x30>
10010e8e:	5d53      	ldrb	r3, [r2, r5]
10010e90:	700b      	strb	r3, [r1, #0]
10010e92:	e003      	b.n	10010e9c <check_ConnData_idx_role+0x30>
10010e94:	3301      	adds	r3, #1
10010e96:	2b08      	cmp	r3, #8
10010e98:	d1ef      	bne.n	10010e7a <check_ConnData_idx_role+0xe>
10010e9a:	1c18      	adds	r0, r3, #0
10010e9c:	bd70      	pop	{r4, r5, r6, pc}
10010e9e:	46c0      	nop			; (mov r8, r8)
10010ea0:	0000ffff 	.word	0x0000ffff
10010ea4:	10019652 	.word	0x10019652

10010ea8 <check_ConnData_emptyEntry>:
10010ea8:	2300      	movs	r3, #0
10010eaa:	2212      	movs	r2, #18
10010eac:	435a      	muls	r2, r3
10010eae:	4906      	ldr	r1, [pc, #24]	; (10010ec8 <check_ConnData_emptyEntry+0x20>)
10010eb0:	b2d8      	uxtb	r0, r3
10010eb2:	1852      	adds	r2, r2, r1
10010eb4:	8951      	ldrh	r1, [r2, #10]
10010eb6:	4a05      	ldr	r2, [pc, #20]	; (10010ecc <check_ConnData_emptyEntry+0x24>)
10010eb8:	4291      	cmp	r1, r2
10010eba:	d003      	beq.n	10010ec4 <check_ConnData_emptyEntry+0x1c>
10010ebc:	3301      	adds	r3, #1
10010ebe:	2b08      	cmp	r3, #8
10010ec0:	d1f3      	bne.n	10010eaa <check_ConnData_emptyEntry+0x2>
10010ec2:	1c18      	adds	r0, r3, #0
10010ec4:	4770      	bx	lr
10010ec6:	46c0      	nop			; (mov r8, r8)
10010ec8:	10019652 	.word	0x10019652
10010ecc:	0000ffff 	.word	0x0000ffff

10010ed0 <gapc_cmp_evt>:
10010ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010ed2:	780b      	ldrb	r3, [r1, #0]
10010ed4:	1c05      	adds	r5, r0, #0
10010ed6:	1e58      	subs	r0, r3, #1
10010ed8:	784e      	ldrb	r6, [r1, #1]
10010eda:	280f      	cmp	r0, #15
10010edc:	d85a      	bhi.n	10010f94 <gapc_cmp_evt+0xc4>
10010ede:	1c14      	adds	r4, r2, #0
10010ee0:	f001 fba4 	bl	1001262c <__gnu_thumb1_case_uqi>
10010ee4:	5858440a 	.word	0x5858440a
10010ee8:	4b584444 	.word	0x4b584444
10010eec:	0825122d 	.word	0x0825122d
10010ef0:	3e395858 	.word	0x3e395858
10010ef4:	203b      	movs	r0, #59	; 0x3b
10010ef6:	e04e      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010ef8:	203b      	movs	r0, #59	; 0x3b
10010efa:	2e00      	cmp	r6, #0
10010efc:	d04b      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010efe:	0a2d      	lsrs	r5, r5, #8
10010f00:	8015      	strh	r5, [r2, #0]
10010f02:	7096      	strb	r6, [r2, #2]
10010f04:	3835      	subs	r0, #53	; 0x35
10010f06:	e046      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f08:	466b      	mov	r3, sp
10010f0a:	1ddf      	adds	r7, r3, #7
10010f0c:	2301      	movs	r3, #1
10010f0e:	0a2d      	lsrs	r5, r5, #8
10010f10:	703b      	strb	r3, [r7, #0]
10010f12:	1c28      	adds	r0, r5, #0
10010f14:	1c39      	adds	r1, r7, #0
10010f16:	4b20      	ldr	r3, [pc, #128]	; (10010f98 <gapc_cmp_evt+0xc8>)
10010f18:	4798      	blx	r3
10010f1a:	2807      	cmp	r0, #7
10010f1c:	d803      	bhi.n	10010f26 <gapc_cmp_evt+0x56>
10010f1e:	783b      	ldrb	r3, [r7, #0]
10010f20:	203b      	movs	r0, #59	; 0x3b
10010f22:	2b00      	cmp	r3, #0
10010f24:	d037      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f26:	8065      	strh	r5, [r4, #2]
10010f28:	7126      	strb	r6, [r4, #4]
10010f2a:	2009      	movs	r0, #9
10010f2c:	e033      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f2e:	203b      	movs	r0, #59	; 0x3b
10010f30:	2e00      	cmp	r6, #0
10010f32:	d030      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f34:	0a2d      	lsrs	r5, r5, #8
10010f36:	8015      	strh	r5, [r2, #0]
10010f38:	7096      	strb	r6, [r2, #2]
10010f3a:	382d      	subs	r0, #45	; 0x2d
10010f3c:	e02b      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f3e:	203b      	movs	r0, #59	; 0x3b
10010f40:	2e00      	cmp	r6, #0
10010f42:	d028      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f44:	2300      	movs	r3, #0
10010f46:	0a2d      	lsrs	r5, r5, #8
10010f48:	8015      	strh	r5, [r2, #0]
10010f4a:	7096      	strb	r6, [r2, #2]
10010f4c:	8093      	strh	r3, [r2, #4]
10010f4e:	80d3      	strh	r3, [r2, #6]
10010f50:	8113      	strh	r3, [r2, #8]
10010f52:	3834      	subs	r0, #52	; 0x34
10010f54:	e01f      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f56:	203b      	movs	r0, #59	; 0x3b
10010f58:	2e00      	cmp	r6, #0
10010f5a:	d01c      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f5c:	7216      	strb	r6, [r2, #8]
10010f5e:	e003      	b.n	10010f68 <gapc_cmp_evt+0x98>
10010f60:	203b      	movs	r0, #59	; 0x3b
10010f62:	2e00      	cmp	r6, #0
10010f64:	d017      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f66:	7116      	strb	r6, [r2, #4]
10010f68:	3812      	subs	r0, #18
10010f6a:	e014      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f6c:	203b      	movs	r0, #59	; 0x3b
10010f6e:	2e00      	cmp	r6, #0
10010f70:	d011      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f72:	7093      	strb	r3, [r2, #2]
10010f74:	70d6      	strb	r6, [r2, #3]
10010f76:	382a      	subs	r0, #42	; 0x2a
10010f78:	e00d      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f7a:	203b      	movs	r0, #59	; 0x3b
10010f7c:	2e00      	cmp	r6, #0
10010f7e:	d00a      	beq.n	10010f96 <gapc_cmp_evt+0xc6>
10010f80:	0a2d      	lsrs	r5, r5, #8
10010f82:	7016      	strb	r6, [r2, #0]
10010f84:	8055      	strh	r5, [r2, #2]
10010f86:	1d10      	adds	r0, r2, #4
10010f88:	2100      	movs	r1, #0
10010f8a:	2205      	movs	r2, #5
10010f8c:	4b03      	ldr	r3, [pc, #12]	; (10010f9c <gapc_cmp_evt+0xcc>)
10010f8e:	4798      	blx	r3
10010f90:	2012      	movs	r0, #18
10010f92:	e000      	b.n	10010f96 <gapc_cmp_evt+0xc6>
10010f94:	2000      	movs	r0, #0
10010f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010f98:	10010e6d 	.word	0x10010e6d
10010f9c:	100143c9 	.word	0x100143c9

10010fa0 <gapc_connection_cfm_handler>:
10010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fa2:	b085      	sub	sp, #20
10010fa4:	1c1d      	adds	r5, r3, #0
10010fa6:	ab0a      	add	r3, sp, #40	; 0x28
10010fa8:	781b      	ldrb	r3, [r3, #0]
10010faa:	9201      	str	r2, [sp, #4]
10010fac:	9302      	str	r3, [sp, #8]
10010fae:	ab0b      	add	r3, sp, #44	; 0x2c
10010fb0:	781b      	ldrb	r3, [r3, #0]
10010fb2:	1c07      	adds	r7, r0, #0
10010fb4:	9303      	str	r3, [sp, #12]
10010fb6:	ab0c      	add	r3, sp, #48	; 0x30
10010fb8:	881a      	ldrh	r2, [r3, #0]
10010fba:	2302      	movs	r3, #2
10010fbc:	1c0e      	adds	r6, r1, #0
10010fbe:	4c23      	ldr	r4, [pc, #140]	; (1001104c <gapc_connection_cfm_handler+0xac>)
10010fc0:	1c39      	adds	r1, r7, #0
10010fc2:	7023      	strb	r3, [r4, #0]
10010fc4:	330c      	adds	r3, #12
10010fc6:	7063      	strb	r3, [r4, #1]
10010fc8:	70a3      	strb	r3, [r4, #2]
10010fca:	4b21      	ldr	r3, [pc, #132]	; (10011050 <gapc_connection_cfm_handler+0xb0>)
10010fcc:	70e2      	strb	r2, [r4, #3]
10010fce:	881a      	ldrh	r2, [r3, #0]
10010fd0:	881b      	ldrh	r3, [r3, #0]
10010fd2:	7122      	strb	r2, [r4, #4]
10010fd4:	0a1b      	lsrs	r3, r3, #8
10010fd6:	4f1f      	ldr	r7, [pc, #124]	; (10011054 <gapc_connection_cfm_handler+0xb4>)
10010fd8:	2210      	movs	r2, #16
10010fda:	481f      	ldr	r0, [pc, #124]	; (10011058 <gapc_connection_cfm_handler+0xb8>)
10010fdc:	7163      	strb	r3, [r4, #5]
10010fde:	47b8      	blx	r7
10010fe0:	0a33      	lsrs	r3, r6, #8
10010fe2:	7626      	strb	r6, [r4, #24]
10010fe4:	7663      	strb	r3, [r4, #25]
10010fe6:	9901      	ldr	r1, [sp, #4]
10010fe8:	0c33      	lsrs	r3, r6, #16
10010fea:	2210      	movs	r2, #16
10010fec:	0e36      	lsrs	r6, r6, #24
10010fee:	481b      	ldr	r0, [pc, #108]	; (1001105c <gapc_connection_cfm_handler+0xbc>)
10010ff0:	76a3      	strb	r3, [r4, #26]
10010ff2:	76e6      	strb	r6, [r4, #27]
10010ff4:	47b8      	blx	r7
10010ff6:	1c23      	adds	r3, r4, #0
10010ff8:	332c      	adds	r3, #44	; 0x2c
10010ffa:	701d      	strb	r5, [r3, #0]
10010ffc:	1c23      	adds	r3, r4, #0
10010ffe:	0a2a      	lsrs	r2, r5, #8
10011000:	332d      	adds	r3, #45	; 0x2d
10011002:	701a      	strb	r2, [r3, #0]
10011004:	1c23      	adds	r3, r4, #0
10011006:	0c2a      	lsrs	r2, r5, #16
10011008:	332e      	adds	r3, #46	; 0x2e
1001100a:	701a      	strb	r2, [r3, #0]
1001100c:	1c23      	adds	r3, r4, #0
1001100e:	0e2d      	lsrs	r5, r5, #24
10011010:	332f      	adds	r3, #47	; 0x2f
10011012:	466a      	mov	r2, sp
10011014:	701d      	strb	r5, [r3, #0]
10011016:	1c23      	adds	r3, r4, #0
10011018:	7a12      	ldrb	r2, [r2, #8]
1001101a:	3330      	adds	r3, #48	; 0x30
1001101c:	701a      	strb	r2, [r3, #0]
1001101e:	1c23      	adds	r3, r4, #0
10011020:	2500      	movs	r5, #0
10011022:	3331      	adds	r3, #49	; 0x31
10011024:	466a      	mov	r2, sp
10011026:	701d      	strb	r5, [r3, #0]
10011028:	1c23      	adds	r3, r4, #0
1001102a:	7b12      	ldrb	r2, [r2, #12]
1001102c:	3332      	adds	r3, #50	; 0x32
1001102e:	701a      	strb	r2, [r3, #0]
10011030:	1c23      	adds	r3, r4, #0
10011032:	3333      	adds	r3, #51	; 0x33
10011034:	701d      	strb	r5, [r3, #0]
10011036:	232c      	movs	r3, #44	; 0x2c
10011038:	1c20      	adds	r0, r4, #0
1001103a:	71a3      	strb	r3, [r4, #6]
1001103c:	2134      	movs	r1, #52	; 0x34
1001103e:	4b08      	ldr	r3, [pc, #32]	; (10011060 <gapc_connection_cfm_handler+0xc0>)
10011040:	71e5      	strb	r5, [r4, #7]
10011042:	4798      	blx	r3
10011044:	1c28      	adds	r0, r5, #0
10011046:	b005      	add	sp, #20
10011048:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001104a:	46c0      	nop			; (mov r8, r8)
1001104c:	100199c0 	.word	0x100199c0
10011050:	10019650 	.word	0x10019650
10011054:	100143b7 	.word	0x100143b7
10011058:	100199c8 	.word	0x100199c8
1001105c:	100199dc 	.word	0x100199dc
10011060:	10010c9d 	.word	0x10010c9d

10011064 <gapc_con_req_ind>:
10011064:	b5f0      	push	{r4, r5, r6, r7, lr}
10011066:	7845      	ldrb	r5, [r0, #1]
10011068:	7803      	ldrb	r3, [r0, #0]
1001106a:	4c30      	ldr	r4, [pc, #192]	; (1001112c <gapc_con_req_ind+0xc8>)
1001106c:	022d      	lsls	r5, r5, #8
1001106e:	431d      	orrs	r5, r3
10011070:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011072:	78c3      	ldrb	r3, [r0, #3]
10011074:	7882      	ldrb	r2, [r0, #2]
10011076:	b08b      	sub	sp, #44	; 0x2c
10011078:	021b      	lsls	r3, r3, #8
1001107a:	431a      	orrs	r2, r3
1001107c:	466b      	mov	r3, sp
1001107e:	9205      	str	r2, [sp, #20]
10011080:	8a9b      	ldrh	r3, [r3, #20]
10011082:	2120      	movs	r1, #32
10011084:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011086:	7943      	ldrb	r3, [r0, #5]
10011088:	7902      	ldrb	r2, [r0, #4]
1001108a:	021b      	lsls	r3, r3, #8
1001108c:	431a      	orrs	r2, r3
1001108e:	466b      	mov	r3, sp
10011090:	9206      	str	r2, [sp, #24]
10011092:	8b1b      	ldrh	r3, [r3, #24]
10011094:	1c06      	adds	r6, r0, #0
10011096:	8623      	strh	r3, [r4, #48]	; 0x30
10011098:	79c3      	ldrb	r3, [r0, #7]
1001109a:	7982      	ldrb	r2, [r0, #6]
1001109c:	021b      	lsls	r3, r3, #8
1001109e:	431a      	orrs	r2, r3
100110a0:	466b      	mov	r3, sp
100110a2:	9207      	str	r2, [sp, #28]
100110a4:	466a      	mov	r2, sp
100110a6:	8b9b      	ldrh	r3, [r3, #28]
100110a8:	1852      	adds	r2, r2, r1
100110aa:	8663      	strh	r3, [r4, #50]	; 0x32
100110ac:	7a43      	ldrb	r3, [r0, #9]
100110ae:	1c01      	adds	r1, r0, #0
100110b0:	9308      	str	r3, [sp, #32]
100110b2:	1c23      	adds	r3, r4, #0
100110b4:	7812      	ldrb	r2, [r2, #0]
100110b6:	3377      	adds	r3, #119	; 0x77
100110b8:	3478      	adds	r4, #120	; 0x78
100110ba:	701a      	strb	r2, [r3, #0]
100110bc:	310a      	adds	r1, #10
100110be:	2206      	movs	r2, #6
100110c0:	4b1b      	ldr	r3, [pc, #108]	; (10011130 <gapc_con_req_ind+0xcc>)
100110c2:	1c20      	adds	r0, r4, #0
100110c4:	4798      	blx	r3
100110c6:	7c33      	ldrb	r3, [r6, #16]
100110c8:	9309      	str	r3, [sp, #36]	; 0x24
100110ca:	4b1a      	ldr	r3, [pc, #104]	; (10011134 <gapc_con_req_ind+0xd0>)
100110cc:	4798      	blx	r3
100110ce:	4e1a      	ldr	r6, [pc, #104]	; (10011138 <gapc_con_req_ind+0xd4>)
100110d0:	1e07      	subs	r7, r0, #0
100110d2:	2f07      	cmp	r7, #7
100110d4:	d81b      	bhi.n	1001110e <gapc_con_req_ind+0xaa>
100110d6:	2312      	movs	r3, #18
100110d8:	4343      	muls	r3, r0
100110da:	18f0      	adds	r0, r6, r3
100110dc:	8145      	strh	r5, [r0, #10]
100110de:	4669      	mov	r1, sp
100110e0:	2524      	movs	r5, #36	; 0x24
100110e2:	1949      	adds	r1, r1, r5
100110e4:	7809      	ldrb	r1, [r1, #0]
100110e6:	2206      	movs	r2, #6
100110e8:	54f1      	strb	r1, [r6, r3]
100110ea:	2120      	movs	r1, #32
100110ec:	466b      	mov	r3, sp
100110ee:	185b      	adds	r3, r3, r1
100110f0:	781b      	ldrb	r3, [r3, #0]
100110f2:	1c21      	adds	r1, r4, #0
100110f4:	7043      	strb	r3, [r0, #1]
100110f6:	466b      	mov	r3, sp
100110f8:	8a9b      	ldrh	r3, [r3, #20]
100110fa:	3002      	adds	r0, #2
100110fc:	8143      	strh	r3, [r0, #10]
100110fe:	466b      	mov	r3, sp
10011100:	8b1b      	ldrh	r3, [r3, #24]
10011102:	8183      	strh	r3, [r0, #12]
10011104:	466b      	mov	r3, sp
10011106:	8b9b      	ldrh	r3, [r3, #28]
10011108:	81c3      	strh	r3, [r0, #14]
1001110a:	4b09      	ldr	r3, [pc, #36]	; (10011130 <gapc_con_req_ind+0xcc>)
1001110c:	4798      	blx	r3
1001110e:	2112      	movs	r1, #18
10011110:	2300      	movs	r3, #0
10011112:	434f      	muls	r7, r1
10011114:	9300      	str	r3, [sp, #0]
10011116:	9301      	str	r3, [sp, #4]
10011118:	19f6      	adds	r6, r6, r7
1001111a:	8971      	ldrh	r1, [r6, #10]
1001111c:	4a07      	ldr	r2, [pc, #28]	; (1001113c <gapc_con_req_ind+0xd8>)
1001111e:	9102      	str	r1, [sp, #8]
10011120:	1c10      	adds	r0, r2, #0
10011122:	1c19      	adds	r1, r3, #0
10011124:	4c06      	ldr	r4, [pc, #24]	; (10011140 <gapc_con_req_ind+0xdc>)
10011126:	47a0      	blx	r4
10011128:	b00b      	add	sp, #44	; 0x2c
1001112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001112c:	100196e2 	.word	0x100196e2
10011130:	100143b7 	.word	0x100143b7
10011134:	10010ea9 	.word	0x10010ea9
10011138:	10019652 	.word	0x10019652
1001113c:	10018768 	.word	0x10018768
10011140:	10010fa1 	.word	0x10010fa1

10011144 <gapc_disconnect_cmd_handler>:
10011144:	2204      	movs	r2, #4
10011146:	b510      	push	{r4, lr}
10011148:	4b0c      	ldr	r3, [pc, #48]	; (1001117c <gapc_disconnect_cmd_handler+0x38>)
1001114a:	2400      	movs	r4, #0
1001114c:	701a      	strb	r2, [r3, #0]
1001114e:	320a      	adds	r2, #10
10011150:	705a      	strb	r2, [r3, #1]
10011152:	709a      	strb	r2, [r3, #2]
10011154:	4a0a      	ldr	r2, [pc, #40]	; (10011180 <gapc_disconnect_cmd_handler+0x3c>)
10011156:	70d9      	strb	r1, [r3, #3]
10011158:	8811      	ldrh	r1, [r2, #0]
1001115a:	8812      	ldrh	r2, [r2, #0]
1001115c:	7119      	strb	r1, [r3, #4]
1001115e:	0a12      	lsrs	r2, r2, #8
10011160:	715a      	strb	r2, [r3, #5]
10011162:	2201      	movs	r2, #1
10011164:	721a      	strb	r2, [r3, #8]
10011166:	1892      	adds	r2, r2, r2
10011168:	7258      	strb	r0, [r3, #9]
1001116a:	719a      	strb	r2, [r3, #6]
1001116c:	71dc      	strb	r4, [r3, #7]
1001116e:	1c18      	adds	r0, r3, #0
10011170:	210a      	movs	r1, #10
10011172:	4b04      	ldr	r3, [pc, #16]	; (10011184 <gapc_disconnect_cmd_handler+0x40>)
10011174:	4798      	blx	r3
10011176:	1c20      	adds	r0, r4, #0
10011178:	bd10      	pop	{r4, pc}
1001117a:	46c0      	nop			; (mov r8, r8)
1001117c:	100199c0 	.word	0x100199c0
10011180:	10019650 	.word	0x10019650
10011184:	10010c9d 	.word	0x10010c9d

10011188 <gapc_disconnect_ind>:
10011188:	1c02      	adds	r2, r0, #0
1001118a:	b508      	push	{r3, lr}
1001118c:	7843      	ldrb	r3, [r0, #1]
1001118e:	7800      	ldrb	r0, [r0, #0]
10011190:	021b      	lsls	r3, r3, #8
10011192:	4318      	orrs	r0, r3
10011194:	8008      	strh	r0, [r1, #0]
10011196:	7893      	ldrb	r3, [r2, #2]
10011198:	708b      	strb	r3, [r1, #2]
1001119a:	2100      	movs	r1, #0
1001119c:	4b05      	ldr	r3, [pc, #20]	; (100111b4 <gapc_disconnect_ind+0x2c>)
1001119e:	4798      	blx	r3
100111a0:	2807      	cmp	r0, #7
100111a2:	d806      	bhi.n	100111b2 <gapc_disconnect_ind+0x2a>
100111a4:	2312      	movs	r3, #18
100111a6:	4358      	muls	r0, r3
100111a8:	4b03      	ldr	r3, [pc, #12]	; (100111b8 <gapc_disconnect_ind+0x30>)
100111aa:	1818      	adds	r0, r3, r0
100111ac:	2301      	movs	r3, #1
100111ae:	425b      	negs	r3, r3
100111b0:	8143      	strh	r3, [r0, #10]
100111b2:	bd08      	pop	{r3, pc}
100111b4:	10010e6d 	.word	0x10010e6d
100111b8:	10019652 	.word	0x10019652

100111bc <gapc_bond_cmd_handler>:
100111bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100111be:	9300      	str	r3, [sp, #0]
100111c0:	2312      	movs	r3, #18
100111c2:	1c04      	adds	r4, r0, #0
100111c4:	a808      	add	r0, sp, #32
100111c6:	7807      	ldrb	r7, [r0, #0]
100111c8:	a809      	add	r0, sp, #36	; 0x24
100111ca:	7806      	ldrb	r6, [r0, #0]
100111cc:	a80a      	add	r0, sp, #40	; 0x28
100111ce:	7805      	ldrb	r5, [r0, #0]
100111d0:	a80b      	add	r0, sp, #44	; 0x2c
100111d2:	7800      	ldrb	r0, [r0, #0]
100111d4:	9001      	str	r0, [sp, #4]
100111d6:	4810      	ldr	r0, [pc, #64]	; (10011218 <gapc_bond_cmd_handler+0x5c>)
100111d8:	7003      	strb	r3, [r0, #0]
100111da:	230e      	movs	r3, #14
100111dc:	70c4      	strb	r4, [r0, #3]
100111de:	4c0f      	ldr	r4, [pc, #60]	; (1001121c <gapc_bond_cmd_handler+0x60>)
100111e0:	7043      	strb	r3, [r0, #1]
100111e2:	7083      	strb	r3, [r0, #2]
100111e4:	8823      	ldrh	r3, [r4, #0]
100111e6:	8824      	ldrh	r4, [r4, #0]
100111e8:	7103      	strb	r3, [r0, #4]
100111ea:	466b      	mov	r3, sp
100111ec:	781b      	ldrb	r3, [r3, #0]
100111ee:	0a24      	lsrs	r4, r4, #8
100111f0:	72c3      	strb	r3, [r0, #11]
100111f2:	466b      	mov	r3, sp
100111f4:	791b      	ldrb	r3, [r3, #4]
100111f6:	7144      	strb	r4, [r0, #5]
100111f8:	73c3      	strb	r3, [r0, #15]
100111fa:	2308      	movs	r3, #8
100111fc:	7183      	strb	r3, [r0, #6]
100111fe:	2300      	movs	r3, #0
10011200:	240a      	movs	r4, #10
10011202:	7241      	strb	r1, [r0, #9]
10011204:	71c3      	strb	r3, [r0, #7]
10011206:	2110      	movs	r1, #16
10011208:	4b05      	ldr	r3, [pc, #20]	; (10011220 <gapc_bond_cmd_handler+0x64>)
1001120a:	7307      	strb	r7, [r0, #12]
1001120c:	7346      	strb	r6, [r0, #13]
1001120e:	7385      	strb	r5, [r0, #14]
10011210:	7204      	strb	r4, [r0, #8]
10011212:	7282      	strb	r2, [r0, #10]
10011214:	4798      	blx	r3
10011216:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011218:	100199c0 	.word	0x100199c0
1001121c:	10019650 	.word	0x10019650
10011220:	10010c9d 	.word	0x10010c9d

10011224 <gapc_bond_ind>:
10011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011226:	780e      	ldrb	r6, [r1, #0]
10011228:	1c03      	adds	r3, r0, #0
1001122a:	1eb0      	subs	r0, r6, #2
1001122c:	2805      	cmp	r0, #5
1001122e:	d85d      	bhi.n	100112ec <gapc_bond_ind+0xc8>
10011230:	1c15      	adds	r5, r2, #0
10011232:	1c0c      	adds	r4, r1, #0
10011234:	f001 f9fa 	bl	1001262c <__gnu_thumb1_case_uqi>
10011238:	2f5a030d 	.word	0x2f5a030d
1001123c:	4740      	.short	0x4740
1001123e:	2009      	movs	r0, #9
10011240:	2a00      	cmp	r2, #0
10011242:	d054      	beq.n	100112ee <gapc_bond_ind+0xca>
10011244:	0a1b      	lsrs	r3, r3, #8
10011246:	8053      	strh	r3, [r2, #2]
10011248:	788b      	ldrb	r3, [r1, #2]
1001124a:	4829      	ldr	r0, [pc, #164]	; (100112f0 <gapc_bond_ind+0xcc>)
1001124c:	7113      	strb	r3, [r2, #4]
1001124e:	2100      	movs	r1, #0
10011250:	e01c      	b.n	1001128c <gapc_bond_ind+0x68>
10011252:	2009      	movs	r0, #9
10011254:	2a00      	cmp	r2, #0
10011256:	d04a      	beq.n	100112ee <gapc_bond_ind+0xca>
10011258:	4c25      	ldr	r4, [pc, #148]	; (100112f0 <gapc_bond_ind+0xcc>)
1001125a:	0a1b      	lsrs	r3, r3, #8
1001125c:	8053      	strh	r3, [r2, #2]
1001125e:	788b      	ldrb	r3, [r1, #2]
10011260:	2700      	movs	r7, #0
10011262:	1c10      	adds	r0, r2, #0
10011264:	1c21      	adds	r1, r4, #0
10011266:	7013      	strb	r3, [r2, #0]
10011268:	4e22      	ldr	r6, [pc, #136]	; (100112f4 <gapc_bond_ind+0xd0>)
1001126a:	7117      	strb	r7, [r2, #4]
1001126c:	312e      	adds	r1, #46	; 0x2e
1001126e:	2217      	movs	r2, #23
10011270:	3032      	adds	r0, #50	; 0x32
10011272:	47b0      	blx	r6
10011274:	1c28      	adds	r0, r5, #0
10011276:	1c21      	adds	r1, r4, #0
10011278:	2210      	movs	r2, #16
1001127a:	311e      	adds	r1, #30
1001127c:	3022      	adds	r0, #34	; 0x22
1001127e:	47b0      	blx	r6
10011280:	1ca1      	adds	r1, r4, #2
10011282:	1da8      	adds	r0, r5, #6
10011284:	221c      	movs	r2, #28
10011286:	47b0      	blx	r6
10011288:	1c20      	adds	r0, r4, #0
1001128a:	1c39      	adds	r1, r7, #0
1001128c:	2246      	movs	r2, #70	; 0x46
1001128e:	4b1a      	ldr	r3, [pc, #104]	; (100112f8 <gapc_bond_ind+0xd4>)
10011290:	4798      	blx	r3
10011292:	2009      	movs	r0, #9
10011294:	e02b      	b.n	100112ee <gapc_bond_ind+0xca>
10011296:	4d16      	ldr	r5, [pc, #88]	; (100112f0 <gapc_bond_ind+0xcc>)
10011298:	3102      	adds	r1, #2
1001129a:	1c28      	adds	r0, r5, #0
1001129c:	2210      	movs	r2, #16
1001129e:	4e15      	ldr	r6, [pc, #84]	; (100112f4 <gapc_bond_ind+0xd0>)
100112a0:	302e      	adds	r0, #46	; 0x2e
100112a2:	47b0      	blx	r6
100112a4:	1c28      	adds	r0, r5, #0
100112a6:	1c21      	adds	r1, r4, #0
100112a8:	303f      	adds	r0, #63	; 0x3f
100112aa:	3112      	adds	r1, #18
100112ac:	2206      	movs	r2, #6
100112ae:	47b0      	blx	r6
100112b0:	7e23      	ldrb	r3, [r4, #24]
100112b2:	353e      	adds	r5, #62	; 0x3e
100112b4:	702b      	strb	r3, [r5, #0]
100112b6:	e019      	b.n	100112ec <gapc_bond_ind+0xc8>
100112b8:	480d      	ldr	r0, [pc, #52]	; (100112f0 <gapc_bond_ind+0xcc>)
100112ba:	3102      	adds	r1, #2
100112bc:	2210      	movs	r2, #16
100112be:	4b0d      	ldr	r3, [pc, #52]	; (100112f4 <gapc_bond_ind+0xd0>)
100112c0:	301e      	adds	r0, #30
100112c2:	4798      	blx	r3
100112c4:	e012      	b.n	100112ec <gapc_bond_ind+0xc8>
100112c6:	4d0a      	ldr	r5, [pc, #40]	; (100112f0 <gapc_bond_ind+0xcc>)
100112c8:	3102      	adds	r1, #2
100112ca:	2210      	movs	r2, #16
100112cc:	4e09      	ldr	r6, [pc, #36]	; (100112f4 <gapc_bond_ind+0xd0>)
100112ce:	1ca8      	adds	r0, r5, #2
100112d0:	47b0      	blx	r6
100112d2:	1c28      	adds	r0, r5, #0
100112d4:	1c21      	adds	r1, r4, #0
100112d6:	7ce3      	ldrb	r3, [r4, #19]
100112d8:	7ca2      	ldrb	r2, [r4, #18]
100112da:	021b      	lsls	r3, r3, #8
100112dc:	4313      	orrs	r3, r2
100112de:	3014      	adds	r0, #20
100112e0:	3114      	adds	r1, #20
100112e2:	2208      	movs	r2, #8
100112e4:	826b      	strh	r3, [r5, #18]
100112e6:	47b0      	blx	r6
100112e8:	7f23      	ldrb	r3, [r4, #28]
100112ea:	772b      	strb	r3, [r5, #28]
100112ec:	2000      	movs	r0, #0
100112ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100112f0:	10018798 	.word	0x10018798
100112f4:	100143b7 	.word	0x100143b7
100112f8:	100143c9 	.word	0x100143c9

100112fc <gapc_bond_req_ind>:
100112fc:	b570      	push	{r4, r5, r6, lr}
100112fe:	780c      	ldrb	r4, [r1, #0]
10011300:	1c03      	adds	r3, r0, #0
10011302:	7849      	ldrb	r1, [r1, #1]
10011304:	2c07      	cmp	r4, #7
10011306:	d85c      	bhi.n	100113c2 <gapc_bond_req_ind+0xc6>
10011308:	1c20      	adds	r0, r4, #0
1001130a:	f001 f98f 	bl	1001262c <__gnu_thumb1_case_uqi>
1001130e:	5a04      	.short	0x5a04
10011310:	5a0b5a5a 	.word	0x5a0b5a5a
10011314:	1f1f      	.short	0x1f1f
10011316:	200a      	movs	r0, #10
10011318:	2a00      	cmp	r2, #0
1001131a:	d053      	beq.n	100113c4 <gapc_bond_req_ind+0xc8>
1001131c:	0a1b      	lsrs	r3, r3, #8
1001131e:	8013      	strh	r3, [r2, #0]
10011320:	7091      	strb	r1, [r2, #2]
10011322:	e04f      	b.n	100113c4 <gapc_bond_req_ind+0xc8>
10011324:	2a00      	cmp	r2, #0
10011326:	d00b      	beq.n	10011340 <gapc_bond_req_ind+0x44>
10011328:	0a1b      	lsrs	r3, r3, #8
1001132a:	8013      	strh	r3, [r2, #0]
1001132c:	2900      	cmp	r1, #0
1001132e:	d102      	bne.n	10011336 <gapc_bond_req_ind+0x3a>
10011330:	2301      	movs	r3, #1
10011332:	7093      	strb	r3, [r2, #2]
10011334:	e004      	b.n	10011340 <gapc_bond_req_ind+0x44>
10011336:	2300      	movs	r3, #0
10011338:	7093      	strb	r3, [r2, #2]
1001133a:	2902      	cmp	r1, #2
1001133c:	d102      	bne.n	10011344 <gapc_bond_req_ind+0x48>
1001133e:	70d3      	strb	r3, [r2, #3]
10011340:	200c      	movs	r0, #12
10011342:	e03f      	b.n	100113c4 <gapc_bond_req_ind+0xc8>
10011344:	2901      	cmp	r1, #1
10011346:	d1fb      	bne.n	10011340 <gapc_bond_req_ind+0x44>
10011348:	70d1      	strb	r1, [r2, #3]
1001134a:	e7f9      	b.n	10011340 <gapc_bond_req_ind+0x44>
1001134c:	2214      	movs	r2, #20
1001134e:	481e      	ldr	r0, [pc, #120]	; (100113c8 <gapc_bond_req_ind+0xcc>)
10011350:	0a1b      	lsrs	r3, r3, #8
10011352:	70c3      	strb	r3, [r0, #3]
10011354:	4b1d      	ldr	r3, [pc, #116]	; (100113cc <gapc_bond_req_ind+0xd0>)
10011356:	7002      	strb	r2, [r0, #0]
10011358:	3a06      	subs	r2, #6
1001135a:	7042      	strb	r2, [r0, #1]
1001135c:	7082      	strb	r2, [r0, #2]
1001135e:	881a      	ldrh	r2, [r3, #0]
10011360:	881b      	ldrh	r3, [r3, #0]
10011362:	4e1b      	ldr	r6, [pc, #108]	; (100113d0 <gapc_bond_req_ind+0xd4>)
10011364:	0a1b      	lsrs	r3, r3, #8
10011366:	7143      	strb	r3, [r0, #5]
10011368:	2301      	movs	r3, #1
1001136a:	7102      	strb	r2, [r0, #4]
1001136c:	7204      	strb	r4, [r0, #8]
1001136e:	7243      	strb	r3, [r0, #9]
10011370:	1c05      	adds	r5, r0, #0
10011372:	1c31      	adds	r1, r6, #0
10011374:	300a      	adds	r0, #10
10011376:	2c07      	cmp	r4, #7
10011378:	d116      	bne.n	100113a8 <gapc_bond_req_ind+0xac>
1001137a:	317e      	adds	r1, #126	; 0x7e
1001137c:	2210      	movs	r2, #16
1001137e:	4c15      	ldr	r4, [pc, #84]	; (100113d4 <gapc_bond_req_ind+0xd8>)
10011380:	47a0      	blx	r4
10011382:	1c33      	adds	r3, r6, #0
10011384:	1c31      	adds	r1, r6, #0
10011386:	1c28      	adds	r0, r5, #0
10011388:	338e      	adds	r3, #142	; 0x8e
1001138a:	881b      	ldrh	r3, [r3, #0]
1001138c:	3190      	adds	r1, #144	; 0x90
1001138e:	76ab      	strb	r3, [r5, #26]
10011390:	2208      	movs	r2, #8
10011392:	0a1b      	lsrs	r3, r3, #8
10011394:	301c      	adds	r0, #28
10011396:	76eb      	strb	r3, [r5, #27]
10011398:	47a0      	blx	r4
1001139a:	1c31      	adds	r1, r6, #0
1001139c:	3198      	adds	r1, #152	; 0x98
1001139e:	780a      	ldrb	r2, [r1, #0]
100113a0:	1d6b      	adds	r3, r5, #5
100113a2:	77da      	strb	r2, [r3, #31]
100113a4:	2125      	movs	r1, #37	; 0x25
100113a6:	e004      	b.n	100113b2 <gapc_bond_req_ind+0xb6>
100113a8:	319a      	adds	r1, #154	; 0x9a
100113aa:	2210      	movs	r2, #16
100113ac:	4b09      	ldr	r3, [pc, #36]	; (100113d4 <gapc_bond_req_ind+0xd8>)
100113ae:	4798      	blx	r3
100113b0:	211a      	movs	r1, #26
100113b2:	1c0b      	adds	r3, r1, #0
100113b4:	2400      	movs	r4, #0
100113b6:	3b08      	subs	r3, #8
100113b8:	71ab      	strb	r3, [r5, #6]
100113ba:	1c28      	adds	r0, r5, #0
100113bc:	4b06      	ldr	r3, [pc, #24]	; (100113d8 <gapc_bond_req_ind+0xdc>)
100113be:	71ec      	strb	r4, [r5, #7]
100113c0:	4798      	blx	r3
100113c2:	2000      	movs	r0, #0
100113c4:	bd70      	pop	{r4, r5, r6, pc}
100113c6:	46c0      	nop			; (mov r8, r8)
100113c8:	100199c0 	.word	0x100199c0
100113cc:	10019650 	.word	0x10019650
100113d0:	100196e2 	.word	0x100196e2
100113d4:	100143b7 	.word	0x100143b7
100113d8:	10010c9d 	.word	0x10010c9d

100113dc <gapc_bond_cfm_handler_pair_resp>:
100113dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100113de:	b085      	sub	sp, #20
100113e0:	1c07      	adds	r7, r0, #0
100113e2:	a80a      	add	r0, sp, #40	; 0x28
100113e4:	7806      	ldrb	r6, [r0, #0]
100113e6:	a80b      	add	r0, sp, #44	; 0x2c
100113e8:	7805      	ldrb	r5, [r0, #0]
100113ea:	a80c      	add	r0, sp, #48	; 0x30
100113ec:	7800      	ldrb	r0, [r0, #0]
100113ee:	2414      	movs	r4, #20
100113f0:	9002      	str	r0, [sp, #8]
100113f2:	a80d      	add	r0, sp, #52	; 0x34
100113f4:	7800      	ldrb	r0, [r0, #0]
100113f6:	9301      	str	r3, [sp, #4]
100113f8:	9003      	str	r0, [sp, #12]
100113fa:	a80e      	add	r0, sp, #56	; 0x38
100113fc:	8800      	ldrh	r0, [r0, #0]
100113fe:	4684      	mov	ip, r0
10011400:	4812      	ldr	r0, [pc, #72]	; (1001144c <gapc_bond_cfm_handler_pair_resp+0x70>)
10011402:	7004      	strb	r4, [r0, #0]
10011404:	3c06      	subs	r4, #6
10011406:	7044      	strb	r4, [r0, #1]
10011408:	7084      	strb	r4, [r0, #2]
1001140a:	4664      	mov	r4, ip
1001140c:	70c4      	strb	r4, [r0, #3]
1001140e:	4c10      	ldr	r4, [pc, #64]	; (10011450 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011410:	7247      	strb	r7, [r0, #9]
10011412:	8823      	ldrh	r3, [r4, #0]
10011414:	8824      	ldrh	r4, [r4, #0]
10011416:	7103      	strb	r3, [r0, #4]
10011418:	466b      	mov	r3, sp
1001141a:	791b      	ldrb	r3, [r3, #4]
1001141c:	0a24      	lsrs	r4, r4, #8
1001141e:	7303      	strb	r3, [r0, #12]
10011420:	466b      	mov	r3, sp
10011422:	7a1b      	ldrb	r3, [r3, #8]
10011424:	7144      	strb	r4, [r0, #5]
10011426:	73c3      	strb	r3, [r0, #15]
10011428:	466b      	mov	r3, sp
1001142a:	7b1b      	ldrb	r3, [r3, #12]
1001142c:	2401      	movs	r4, #1
1001142e:	7403      	strb	r3, [r0, #16]
10011430:	2309      	movs	r3, #9
10011432:	7183      	strb	r3, [r0, #6]
10011434:	2300      	movs	r3, #0
10011436:	7204      	strb	r4, [r0, #8]
10011438:	7281      	strb	r1, [r0, #10]
1001143a:	72c2      	strb	r2, [r0, #11]
1001143c:	7346      	strb	r6, [r0, #13]
1001143e:	7385      	strb	r5, [r0, #14]
10011440:	71c3      	strb	r3, [r0, #7]
10011442:	2111      	movs	r1, #17
10011444:	4b03      	ldr	r3, [pc, #12]	; (10011454 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011446:	4798      	blx	r3
10011448:	b005      	add	sp, #20
1001144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001144c:	100199c0 	.word	0x100199c0
10011450:	10019650 	.word	0x10019650
10011454:	10010c9d 	.word	0x10010c9d

10011458 <gapc_bond_cfm_handler_key_exch>:
10011458:	b538      	push	{r3, r4, r5, lr}
1001145a:	2514      	movs	r5, #20
1001145c:	4c0d      	ldr	r4, [pc, #52]	; (10011494 <gapc_bond_cfm_handler_key_exch+0x3c>)
1001145e:	70e3      	strb	r3, [r4, #3]
10011460:	4b0d      	ldr	r3, [pc, #52]	; (10011498 <gapc_bond_cfm_handler_key_exch+0x40>)
10011462:	7025      	strb	r5, [r4, #0]
10011464:	3d06      	subs	r5, #6
10011466:	7065      	strb	r5, [r4, #1]
10011468:	70a5      	strb	r5, [r4, #2]
1001146a:	881d      	ldrh	r5, [r3, #0]
1001146c:	881b      	ldrh	r3, [r3, #0]
1001146e:	7220      	strb	r0, [r4, #8]
10011470:	0a1b      	lsrs	r3, r3, #8
10011472:	7163      	strb	r3, [r4, #5]
10011474:	7261      	strb	r1, [r4, #9]
10011476:	4b09      	ldr	r3, [pc, #36]	; (1001149c <gapc_bond_cfm_handler_key_exch+0x44>)
10011478:	1c11      	adds	r1, r2, #0
1001147a:	4809      	ldr	r0, [pc, #36]	; (100114a0 <gapc_bond_cfm_handler_key_exch+0x48>)
1001147c:	2210      	movs	r2, #16
1001147e:	7125      	strb	r5, [r4, #4]
10011480:	4798      	blx	r3
10011482:	2312      	movs	r3, #18
10011484:	71a3      	strb	r3, [r4, #6]
10011486:	2300      	movs	r3, #0
10011488:	1c20      	adds	r0, r4, #0
1001148a:	71e3      	strb	r3, [r4, #7]
1001148c:	211a      	movs	r1, #26
1001148e:	4b05      	ldr	r3, [pc, #20]	; (100114a4 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011490:	4798      	blx	r3
10011492:	bd38      	pop	{r3, r4, r5, pc}
10011494:	100199c0 	.word	0x100199c0
10011498:	10019650 	.word	0x10019650
1001149c:	100143b7 	.word	0x100143b7
100114a0:	100199ca 	.word	0x100199ca
100114a4:	10010c9d 	.word	0x10010c9d

100114a8 <gapc_security_cmd_handler>:
100114a8:	221a      	movs	r2, #26
100114aa:	b508      	push	{r3, lr}
100114ac:	4b0b      	ldr	r3, [pc, #44]	; (100114dc <gapc_security_cmd_handler+0x34>)
100114ae:	701a      	strb	r2, [r3, #0]
100114b0:	3a0c      	subs	r2, #12
100114b2:	705a      	strb	r2, [r3, #1]
100114b4:	709a      	strb	r2, [r3, #2]
100114b6:	4a0a      	ldr	r2, [pc, #40]	; (100114e0 <gapc_security_cmd_handler+0x38>)
100114b8:	70d8      	strb	r0, [r3, #3]
100114ba:	8810      	ldrh	r0, [r2, #0]
100114bc:	8812      	ldrh	r2, [r2, #0]
100114be:	7118      	strb	r0, [r3, #4]
100114c0:	0a12      	lsrs	r2, r2, #8
100114c2:	715a      	strb	r2, [r3, #5]
100114c4:	220c      	movs	r2, #12
100114c6:	721a      	strb	r2, [r3, #8]
100114c8:	3a0a      	subs	r2, #10
100114ca:	719a      	strb	r2, [r3, #6]
100114cc:	2200      	movs	r2, #0
100114ce:	7259      	strb	r1, [r3, #9]
100114d0:	71da      	strb	r2, [r3, #7]
100114d2:	1c18      	adds	r0, r3, #0
100114d4:	210a      	movs	r1, #10
100114d6:	4b03      	ldr	r3, [pc, #12]	; (100114e4 <gapc_security_cmd_handler+0x3c>)
100114d8:	4798      	blx	r3
100114da:	bd08      	pop	{r3, pc}
100114dc:	100199c0 	.word	0x100199c0
100114e0:	10019650 	.word	0x10019650
100114e4:	10010c9d 	.word	0x10010c9d

100114e8 <gapc_encrypt_cmd_handler>:
100114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ea:	2500      	movs	r5, #0
100114ec:	b089      	sub	sp, #36	; 0x24
100114ee:	9306      	str	r3, [sp, #24]
100114f0:	ab0e      	add	r3, sp, #56	; 0x38
100114f2:	781b      	ldrb	r3, [r3, #0]
100114f4:	1c17      	adds	r7, r2, #0
100114f6:	9307      	str	r3, [sp, #28]
100114f8:	ab0f      	add	r3, sp, #60	; 0x3c
100114fa:	781b      	ldrb	r3, [r3, #0]
100114fc:	4a19      	ldr	r2, [pc, #100]	; (10011564 <gapc_encrypt_cmd_handler+0x7c>)
100114fe:	1c06      	adds	r6, r0, #0
10011500:	9105      	str	r1, [sp, #20]
10011502:	9300      	str	r3, [sp, #0]
10011504:	9002      	str	r0, [sp, #8]
10011506:	1c29      	adds	r1, r5, #0
10011508:	1c2b      	adds	r3, r5, #0
1001150a:	9501      	str	r5, [sp, #4]
1001150c:	1c10      	adds	r0, r2, #0
1001150e:	4c16      	ldr	r4, [pc, #88]	; (10011568 <gapc_encrypt_cmd_handler+0x80>)
10011510:	47a0      	blx	r4
10011512:	2316      	movs	r3, #22
10011514:	4c15      	ldr	r4, [pc, #84]	; (1001156c <gapc_encrypt_cmd_handler+0x84>)
10011516:	9905      	ldr	r1, [sp, #20]
10011518:	7023      	strb	r3, [r4, #0]
1001151a:	3b08      	subs	r3, #8
1001151c:	7063      	strb	r3, [r4, #1]
1001151e:	70a3      	strb	r3, [r4, #2]
10011520:	4b13      	ldr	r3, [pc, #76]	; (10011570 <gapc_encrypt_cmd_handler+0x88>)
10011522:	70e6      	strb	r6, [r4, #3]
10011524:	881a      	ldrh	r2, [r3, #0]
10011526:	881b      	ldrh	r3, [r3, #0]
10011528:	7122      	strb	r2, [r4, #4]
1001152a:	0a1b      	lsrs	r3, r3, #8
1001152c:	7163      	strb	r3, [r4, #5]
1001152e:	230b      	movs	r3, #11
10011530:	4e10      	ldr	r6, [pc, #64]	; (10011574 <gapc_encrypt_cmd_handler+0x8c>)
10011532:	2210      	movs	r2, #16
10011534:	4810      	ldr	r0, [pc, #64]	; (10011578 <gapc_encrypt_cmd_handler+0x90>)
10011536:	7223      	strb	r3, [r4, #8]
10011538:	7265      	strb	r5, [r4, #9]
1001153a:	47b0      	blx	r6
1001153c:	0a3b      	lsrs	r3, r7, #8
1001153e:	9906      	ldr	r1, [sp, #24]
10011540:	2208      	movs	r2, #8
10011542:	480e      	ldr	r0, [pc, #56]	; (1001157c <gapc_encrypt_cmd_handler+0x94>)
10011544:	76e3      	strb	r3, [r4, #27]
10011546:	76a7      	strb	r7, [r4, #26]
10011548:	47b0      	blx	r6
1001154a:	466a      	mov	r2, sp
1001154c:	7f12      	ldrb	r2, [r2, #28]
1001154e:	1d63      	adds	r3, r4, #5
10011550:	77da      	strb	r2, [r3, #31]
10011552:	231d      	movs	r3, #29
10011554:	1c20      	adds	r0, r4, #0
10011556:	71a3      	strb	r3, [r4, #6]
10011558:	2125      	movs	r1, #37	; 0x25
1001155a:	4b09      	ldr	r3, [pc, #36]	; (10011580 <gapc_encrypt_cmd_handler+0x98>)
1001155c:	71e5      	strb	r5, [r4, #7]
1001155e:	4798      	blx	r3
10011560:	b009      	add	sp, #36	; 0x24
10011562:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011564:	10018778 	.word	0x10018778
10011568:	10010fa1 	.word	0x10010fa1
1001156c:	100199c0 	.word	0x100199c0
10011570:	10019650 	.word	0x10019650
10011574:	100143b7 	.word	0x100143b7
10011578:	100199ca 	.word	0x100199ca
1001157c:	100199dc 	.word	0x100199dc
10011580:	10010c9d 	.word	0x10010c9d

10011584 <gapc_encrypt_req_ind>:
10011584:	b508      	push	{r3, lr}
10011586:	0a00      	lsrs	r0, r0, #8
10011588:	8010      	strh	r0, [r2, #0]
1001158a:	784b      	ldrb	r3, [r1, #1]
1001158c:	7808      	ldrb	r0, [r1, #0]
1001158e:	021b      	lsls	r3, r3, #8
10011590:	4303      	orrs	r3, r0
10011592:	8053      	strh	r3, [r2, #2]
10011594:	1d10      	adds	r0, r2, #4
10011596:	3102      	adds	r1, #2
10011598:	2208      	movs	r2, #8
1001159a:	4b01      	ldr	r3, [pc, #4]	; (100115a0 <gapc_encrypt_req_ind+0x1c>)
1001159c:	4798      	blx	r3
1001159e:	bd08      	pop	{r3, pc}
100115a0:	100143b7 	.word	0x100143b7

100115a4 <gapc_encrypt_cfm_handler>:
100115a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100115a6:	2500      	movs	r5, #0
100115a8:	b087      	sub	sp, #28
100115aa:	9304      	str	r3, [sp, #16]
100115ac:	ab0c      	add	r3, sp, #48	; 0x30
100115ae:	781b      	ldrb	r3, [r3, #0]
100115b0:	1c17      	adds	r7, r2, #0
100115b2:	4a15      	ldr	r2, [pc, #84]	; (10011608 <gapc_encrypt_cfm_handler+0x64>)
100115b4:	1c06      	adds	r6, r0, #0
100115b6:	9305      	str	r3, [sp, #20]
100115b8:	9100      	str	r1, [sp, #0]
100115ba:	9002      	str	r0, [sp, #8]
100115bc:	1c29      	adds	r1, r5, #0
100115be:	1c2b      	adds	r3, r5, #0
100115c0:	9501      	str	r5, [sp, #4]
100115c2:	1c10      	adds	r0, r2, #0
100115c4:	4c11      	ldr	r4, [pc, #68]	; (1001160c <gapc_encrypt_cfm_handler+0x68>)
100115c6:	47a0      	blx	r4
100115c8:	2318      	movs	r3, #24
100115ca:	4c11      	ldr	r4, [pc, #68]	; (10011610 <gapc_encrypt_cfm_handler+0x6c>)
100115cc:	9904      	ldr	r1, [sp, #16]
100115ce:	7023      	strb	r3, [r4, #0]
100115d0:	3b0a      	subs	r3, #10
100115d2:	7063      	strb	r3, [r4, #1]
100115d4:	70a3      	strb	r3, [r4, #2]
100115d6:	4b0f      	ldr	r3, [pc, #60]	; (10011614 <gapc_encrypt_cfm_handler+0x70>)
100115d8:	480f      	ldr	r0, [pc, #60]	; (10011618 <gapc_encrypt_cfm_handler+0x74>)
100115da:	881a      	ldrh	r2, [r3, #0]
100115dc:	881b      	ldrh	r3, [r3, #0]
100115de:	7122      	strb	r2, [r4, #4]
100115e0:	0a1b      	lsrs	r3, r3, #8
100115e2:	7163      	strb	r3, [r4, #5]
100115e4:	2210      	movs	r2, #16
100115e6:	4b0d      	ldr	r3, [pc, #52]	; (1001161c <gapc_encrypt_cfm_handler+0x78>)
100115e8:	70e6      	strb	r6, [r4, #3]
100115ea:	7227      	strb	r7, [r4, #8]
100115ec:	4798      	blx	r3
100115ee:	466b      	mov	r3, sp
100115f0:	7d1b      	ldrb	r3, [r3, #20]
100115f2:	1c20      	adds	r0, r4, #0
100115f4:	7663      	strb	r3, [r4, #25]
100115f6:	2312      	movs	r3, #18
100115f8:	211a      	movs	r1, #26
100115fa:	71a3      	strb	r3, [r4, #6]
100115fc:	4b08      	ldr	r3, [pc, #32]	; (10011620 <gapc_encrypt_cfm_handler+0x7c>)
100115fe:	71e5      	strb	r5, [r4, #7]
10011600:	4798      	blx	r3
10011602:	b007      	add	sp, #28
10011604:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011606:	46c0      	nop			; (mov r8, r8)
10011608:	10018788 	.word	0x10018788
1001160c:	10010fa1 	.word	0x10010fa1
10011610:	100199c0 	.word	0x100199c0
10011614:	10019650 	.word	0x10019650
10011618:	100199c9 	.word	0x100199c9
1001161c:	100143b7 	.word	0x100143b7
10011620:	10010c9d 	.word	0x10010c9d

10011624 <gapc_encrypt_ind>:
10011624:	780b      	ldrb	r3, [r1, #0]
10011626:	0a00      	lsrs	r0, r0, #8
10011628:	70d3      	strb	r3, [r2, #3]
1001162a:	2300      	movs	r3, #0
1001162c:	8010      	strh	r0, [r2, #0]
1001162e:	7093      	strb	r3, [r2, #2]
10011630:	4770      	bx	lr
	...

10011634 <gapc_param_update_cfm_handler>:
10011634:	b538      	push	{r3, r4, r5, lr}
10011636:	2410      	movs	r4, #16
10011638:	1c05      	adds	r5, r0, #0
1001163a:	480e      	ldr	r0, [pc, #56]	; (10011674 <gapc_param_update_cfm_handler+0x40>)
1001163c:	7004      	strb	r4, [r0, #0]
1001163e:	3c02      	subs	r4, #2
10011640:	7044      	strb	r4, [r0, #1]
10011642:	7084      	strb	r4, [r0, #2]
10011644:	4c0c      	ldr	r4, [pc, #48]	; (10011678 <gapc_param_update_cfm_handler+0x44>)
10011646:	70c5      	strb	r5, [r0, #3]
10011648:	8825      	ldrh	r5, [r4, #0]
1001164a:	8824      	ldrh	r4, [r4, #0]
1001164c:	72c3      	strb	r3, [r0, #11]
1001164e:	0a1b      	lsrs	r3, r3, #8
10011650:	0a24      	lsrs	r4, r4, #8
10011652:	7303      	strb	r3, [r0, #12]
10011654:	2305      	movs	r3, #5
10011656:	7144      	strb	r4, [r0, #5]
10011658:	2400      	movs	r4, #0
1001165a:	7201      	strb	r1, [r0, #8]
1001165c:	7242      	strb	r2, [r0, #9]
1001165e:	7183      	strb	r3, [r0, #6]
10011660:	0a12      	lsrs	r2, r2, #8
10011662:	210d      	movs	r1, #13
10011664:	4b05      	ldr	r3, [pc, #20]	; (1001167c <gapc_param_update_cfm_handler+0x48>)
10011666:	7105      	strb	r5, [r0, #4]
10011668:	7282      	strb	r2, [r0, #10]
1001166a:	71c4      	strb	r4, [r0, #7]
1001166c:	4798      	blx	r3
1001166e:	1c20      	adds	r0, r4, #0
10011670:	bd38      	pop	{r3, r4, r5, pc}
10011672:	46c0      	nop			; (mov r8, r8)
10011674:	100199c0 	.word	0x100199c0
10011678:	10019650 	.word	0x10019650
1001167c:	10010c9d 	.word	0x10010c9d

10011680 <gapc_param_updated_ind>:
10011680:	2300      	movs	r3, #0
10011682:	0a00      	lsrs	r0, r0, #8
10011684:	8010      	strh	r0, [r2, #0]
10011686:	7093      	strb	r3, [r2, #2]
10011688:	784b      	ldrb	r3, [r1, #1]
1001168a:	7808      	ldrb	r0, [r1, #0]
1001168c:	021b      	lsls	r3, r3, #8
1001168e:	4303      	orrs	r3, r0
10011690:	8093      	strh	r3, [r2, #4]
10011692:	78cb      	ldrb	r3, [r1, #3]
10011694:	7888      	ldrb	r0, [r1, #2]
10011696:	021b      	lsls	r3, r3, #8
10011698:	4303      	orrs	r3, r0
1001169a:	80d3      	strh	r3, [r2, #6]
1001169c:	794b      	ldrb	r3, [r1, #5]
1001169e:	7909      	ldrb	r1, [r1, #4]
100116a0:	021b      	lsls	r3, r3, #8
100116a2:	430b      	orrs	r3, r1
100116a4:	2007      	movs	r0, #7
100116a6:	8113      	strh	r3, [r2, #8]
100116a8:	4770      	bx	lr

100116aa <gapc_param_updated_req_ind>:
100116aa:	0a00      	lsrs	r0, r0, #8
100116ac:	8010      	strh	r0, [r2, #0]
100116ae:	784b      	ldrb	r3, [r1, #1]
100116b0:	7808      	ldrb	r0, [r1, #0]
100116b2:	021b      	lsls	r3, r3, #8
100116b4:	4303      	orrs	r3, r0
100116b6:	8053      	strh	r3, [r2, #2]
100116b8:	78cb      	ldrb	r3, [r1, #3]
100116ba:	7888      	ldrb	r0, [r1, #2]
100116bc:	021b      	lsls	r3, r3, #8
100116be:	4303      	orrs	r3, r0
100116c0:	8093      	strh	r3, [r2, #4]
100116c2:	794b      	ldrb	r3, [r1, #5]
100116c4:	7908      	ldrb	r0, [r1, #4]
100116c6:	021b      	lsls	r3, r3, #8
100116c8:	4303      	orrs	r3, r0
100116ca:	80d3      	strh	r3, [r2, #6]
100116cc:	79cb      	ldrb	r3, [r1, #7]
100116ce:	7989      	ldrb	r1, [r1, #6]
100116d0:	021b      	lsls	r3, r3, #8
100116d2:	430b      	orrs	r3, r1
100116d4:	2008      	movs	r0, #8
100116d6:	8113      	strh	r3, [r2, #8]
100116d8:	4770      	bx	lr
	...

100116dc <gapc_dev_info_req_ind_handler>:
100116dc:	b508      	push	{r3, lr}
100116de:	1c0b      	adds	r3, r1, #0
100116e0:	0a01      	lsrs	r1, r0, #8
100116e2:	8011      	strh	r1, [r2, #0]
100116e4:	7818      	ldrb	r0, [r3, #0]
100116e6:	7090      	strb	r0, [r2, #2]
100116e8:	2800      	cmp	r0, #0
100116ea:	d104      	bne.n	100116f6 <gapc_dev_info_req_ind_handler+0x1a>
100116ec:	4b03      	ldr	r3, [pc, #12]	; (100116fc <gapc_dev_info_req_ind_handler+0x20>)
100116ee:	33aa      	adds	r3, #170	; 0xaa
100116f0:	881b      	ldrh	r3, [r3, #0]
100116f2:	2b00      	cmp	r3, #0
100116f4:	d001      	beq.n	100116fa <gapc_dev_info_req_ind_handler+0x1e>
100116f6:	4b02      	ldr	r3, [pc, #8]	; (10011700 <gapc_dev_info_req_ind_handler+0x24>)
100116f8:	4798      	blx	r3
100116fa:	bd08      	pop	{r3, pc}
100116fc:	100196e2 	.word	0x100196e2
10011700:	10010dad 	.word	0x10010dad

10011704 <gapc_sec_req_ind>:
10011704:	0a00      	lsrs	r0, r0, #8
10011706:	8010      	strh	r0, [r2, #0]
10011708:	7809      	ldrb	r1, [r1, #0]
1001170a:	2301      	movs	r3, #1
1001170c:	1c08      	adds	r0, r1, #0
1001170e:	0889      	lsrs	r1, r1, #2
10011710:	4018      	ands	r0, r3
10011712:	400b      	ands	r3, r1
10011714:	70d0      	strb	r0, [r2, #3]
10011716:	7113      	strb	r3, [r2, #4]
10011718:	4770      	bx	lr

1001171a <gapc_sign_counter_ind_handler>:
1001171a:	0a00      	lsrs	r0, r0, #8
1001171c:	8010      	strh	r0, [r2, #0]
1001171e:	784b      	ldrb	r3, [r1, #1]
10011720:	0218      	lsls	r0, r3, #8
10011722:	788b      	ldrb	r3, [r1, #2]
10011724:	041b      	lsls	r3, r3, #16
10011726:	4303      	orrs	r3, r0
10011728:	7808      	ldrb	r0, [r1, #0]
1001172a:	4303      	orrs	r3, r0
1001172c:	78c8      	ldrb	r0, [r1, #3]
1001172e:	0600      	lsls	r0, r0, #24
10011730:	4303      	orrs	r3, r0
10011732:	6053      	str	r3, [r2, #4]
10011734:	794b      	ldrb	r3, [r1, #5]
10011736:	0218      	lsls	r0, r3, #8
10011738:	798b      	ldrb	r3, [r1, #6]
1001173a:	041b      	lsls	r3, r3, #16
1001173c:	4303      	orrs	r3, r0
1001173e:	7908      	ldrb	r0, [r1, #4]
10011740:	79c9      	ldrb	r1, [r1, #7]
10011742:	4303      	orrs	r3, r0
10011744:	0609      	lsls	r1, r1, #24
10011746:	430b      	orrs	r3, r1
10011748:	2000      	movs	r0, #0
1001174a:	6093      	str	r3, [r2, #8]
1001174c:	4770      	bx	lr
	...

10011750 <gapc_peer_att_info_ind_handler>:
10011750:	b510      	push	{r4, lr}
10011752:	0a00      	lsrs	r0, r0, #8
10011754:	8010      	strh	r0, [r2, #0]
10011756:	7808      	ldrb	r0, [r1, #0]
10011758:	7090      	strb	r0, [r2, #2]
1001175a:	788b      	ldrb	r3, [r1, #2]
1001175c:	784c      	ldrb	r4, [r1, #1]
1001175e:	021b      	lsls	r3, r3, #8
10011760:	4323      	orrs	r3, r4
10011762:	8093      	strh	r3, [r2, #4]
10011764:	2801      	cmp	r0, #1
10011766:	d027      	beq.n	100117b8 <gapc_peer_att_info_ind_handler+0x68>
10011768:	2800      	cmp	r0, #0
1001176a:	d017      	beq.n	1001179c <gapc_peer_att_info_ind_handler+0x4c>
1001176c:	2802      	cmp	r0, #2
1001176e:	d12a      	bne.n	100117c6 <gapc_peer_att_info_ind_handler+0x76>
10011770:	790b      	ldrb	r3, [r1, #4]
10011772:	78c8      	ldrb	r0, [r1, #3]
10011774:	021b      	lsls	r3, r3, #8
10011776:	4303      	orrs	r3, r0
10011778:	8113      	strh	r3, [r2, #8]
1001177a:	798b      	ldrb	r3, [r1, #6]
1001177c:	7948      	ldrb	r0, [r1, #5]
1001177e:	021b      	lsls	r3, r3, #8
10011780:	4303      	orrs	r3, r0
10011782:	80d3      	strh	r3, [r2, #6]
10011784:	7a0b      	ldrb	r3, [r1, #8]
10011786:	79c8      	ldrb	r0, [r1, #7]
10011788:	021b      	lsls	r3, r3, #8
1001178a:	4303      	orrs	r3, r0
1001178c:	8193      	strh	r3, [r2, #12]
1001178e:	7a8b      	ldrb	r3, [r1, #10]
10011790:	7a49      	ldrb	r1, [r1, #9]
10011792:	021b      	lsls	r3, r3, #8
10011794:	430b      	orrs	r3, r1
10011796:	8153      	strh	r3, [r2, #10]
10011798:	2306      	movs	r3, #6
1001179a:	e013      	b.n	100117c4 <gapc_peer_att_info_ind_handler+0x74>
1001179c:	1c14      	adds	r4, r2, #0
1001179e:	1c20      	adds	r0, r4, #0
100117a0:	790a      	ldrb	r2, [r1, #4]
100117a2:	78cb      	ldrb	r3, [r1, #3]
100117a4:	0212      	lsls	r2, r2, #8
100117a6:	431a      	orrs	r2, r3
100117a8:	80e2      	strh	r2, [r4, #6]
100117aa:	4b07      	ldr	r3, [pc, #28]	; (100117c8 <gapc_peer_att_info_ind_handler+0x78>)
100117ac:	3008      	adds	r0, #8
100117ae:	3105      	adds	r1, #5
100117b0:	4798      	blx	r3
100117b2:	2302      	movs	r3, #2
100117b4:	70a3      	strb	r3, [r4, #2]
100117b6:	e006      	b.n	100117c6 <gapc_peer_att_info_ind_handler+0x76>
100117b8:	790b      	ldrb	r3, [r1, #4]
100117ba:	78c9      	ldrb	r1, [r1, #3]
100117bc:	021b      	lsls	r3, r3, #8
100117be:	430b      	orrs	r3, r1
100117c0:	80d3      	strh	r3, [r2, #6]
100117c2:	2305      	movs	r3, #5
100117c4:	7093      	strb	r3, [r2, #2]
100117c6:	bd10      	pop	{r4, pc}
100117c8:	100143b7 	.word	0x100143b7

100117cc <gapc_con_channel_map_ind_handler>:
100117cc:	b508      	push	{r3, lr}
100117ce:	2300      	movs	r3, #0
100117d0:	0a00      	lsrs	r0, r0, #8
100117d2:	7013      	strb	r3, [r2, #0]
100117d4:	8050      	strh	r0, [r2, #2]
100117d6:	4b02      	ldr	r3, [pc, #8]	; (100117e0 <gapc_con_channel_map_ind_handler+0x14>)
100117d8:	1d10      	adds	r0, r2, #4
100117da:	2205      	movs	r2, #5
100117dc:	4798      	blx	r3
100117de:	bd08      	pop	{r3, pc}
100117e0:	100143b7 	.word	0x100143b7

100117e4 <gapc_lecb_connected>:
100117e4:	7843      	ldrb	r3, [r0, #1]
100117e6:	7802      	ldrb	r2, [r0, #0]
100117e8:	021b      	lsls	r3, r3, #8
100117ea:	4313      	orrs	r3, r2
100117ec:	800b      	strh	r3, [r1, #0]
100117ee:	78c3      	ldrb	r3, [r0, #3]
100117f0:	7882      	ldrb	r2, [r0, #2]
100117f2:	021b      	lsls	r3, r3, #8
100117f4:	4313      	orrs	r3, r2
100117f6:	804b      	strh	r3, [r1, #2]
100117f8:	7943      	ldrb	r3, [r0, #5]
100117fa:	7902      	ldrb	r2, [r0, #4]
100117fc:	021b      	lsls	r3, r3, #8
100117fe:	4313      	orrs	r3, r2
10011800:	808b      	strh	r3, [r1, #4]
10011802:	79c3      	ldrb	r3, [r0, #7]
10011804:	7982      	ldrb	r2, [r0, #6]
10011806:	021b      	lsls	r3, r3, #8
10011808:	4313      	orrs	r3, r2
1001180a:	80cb      	strh	r3, [r1, #6]
1001180c:	2300      	movs	r3, #0
1001180e:	720b      	strb	r3, [r1, #8]
10011810:	4770      	bx	lr

10011812 <gapc_lecb_disconnected>:
10011812:	7843      	ldrb	r3, [r0, #1]
10011814:	7802      	ldrb	r2, [r0, #0]
10011816:	021b      	lsls	r3, r3, #8
10011818:	4313      	orrs	r3, r2
1001181a:	800b      	strh	r3, [r1, #0]
1001181c:	78c3      	ldrb	r3, [r0, #3]
1001181e:	7882      	ldrb	r2, [r0, #2]
10011820:	021b      	lsls	r3, r3, #8
10011822:	4313      	orrs	r3, r2
10011824:	804b      	strh	r3, [r1, #2]
10011826:	4770      	bx	lr

10011828 <gapc_lecb_connect_req_ind>:
10011828:	7843      	ldrb	r3, [r0, #1]
1001182a:	7802      	ldrb	r2, [r0, #0]
1001182c:	021b      	lsls	r3, r3, #8
1001182e:	4313      	orrs	r3, r2
10011830:	800b      	strh	r3, [r1, #0]
10011832:	78c3      	ldrb	r3, [r0, #3]
10011834:	7882      	ldrb	r2, [r0, #2]
10011836:	021b      	lsls	r3, r3, #8
10011838:	4313      	orrs	r3, r2
1001183a:	804b      	strh	r3, [r1, #2]
1001183c:	7943      	ldrb	r3, [r0, #5]
1001183e:	7902      	ldrb	r2, [r0, #4]
10011840:	021b      	lsls	r3, r3, #8
10011842:	4313      	orrs	r3, r2
10011844:	808b      	strh	r3, [r1, #4]
10011846:	79c3      	ldrb	r3, [r0, #7]
10011848:	7982      	ldrb	r2, [r0, #6]
1001184a:	021b      	lsls	r3, r3, #8
1001184c:	4313      	orrs	r3, r2
1001184e:	80cb      	strh	r3, [r1, #6]
10011850:	4770      	bx	lr

10011852 <gapc_lecb_add_credit_resp_handler>:
10011852:	7843      	ldrb	r3, [r0, #1]
10011854:	7802      	ldrb	r2, [r0, #0]
10011856:	021b      	lsls	r3, r3, #8
10011858:	4313      	orrs	r3, r2
1001185a:	800b      	strh	r3, [r1, #0]
1001185c:	78c3      	ldrb	r3, [r0, #3]
1001185e:	7882      	ldrb	r2, [r0, #2]
10011860:	021b      	lsls	r3, r3, #8
10011862:	4313      	orrs	r3, r2
10011864:	804b      	strh	r3, [r1, #2]
10011866:	7943      	ldrb	r3, [r0, #5]
10011868:	7902      	ldrb	r2, [r0, #4]
1001186a:	021b      	lsls	r3, r3, #8
1001186c:	4313      	orrs	r3, r2
1001186e:	808b      	strh	r3, [r1, #4]
10011870:	4770      	bx	lr
	...

10011874 <gapm_reset_req_handler>:
10011874:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011876:	466b      	mov	r3, sp
10011878:	4915      	ldr	r1, [pc, #84]	; (100118d0 <gapm_reset_req_handler+0x5c>)
1001187a:	4816      	ldr	r0, [pc, #88]	; (100118d4 <gapm_reset_req_handler+0x60>)
1001187c:	880c      	ldrh	r4, [r1, #0]
1001187e:	8809      	ldrh	r1, [r1, #0]
10011880:	1ddd      	adds	r5, r3, #7
10011882:	0a09      	lsrs	r1, r1, #8
10011884:	2300      	movs	r3, #0
10011886:	2202      	movs	r2, #2
10011888:	7141      	strb	r1, [r0, #5]
1001188a:	26d0      	movs	r6, #208	; 0xd0
1001188c:	2101      	movs	r1, #1
1001188e:	7104      	strb	r4, [r0, #4]
10011890:	4c11      	ldr	r4, [pc, #68]	; (100118d8 <gapm_reset_req_handler+0x64>)
10011892:	702b      	strb	r3, [r5, #0]
10011894:	7002      	strb	r2, [r0, #0]
10011896:	70c3      	strb	r3, [r0, #3]
10011898:	320b      	adds	r2, #11
1001189a:	7201      	strb	r1, [r0, #8]
1001189c:	7181      	strb	r1, [r0, #6]
1001189e:	71c3      	strb	r3, [r0, #7]
100118a0:	3108      	adds	r1, #8
100118a2:	4b0e      	ldr	r3, [pc, #56]	; (100118dc <gapm_reset_req_handler+0x68>)
100118a4:	0136      	lsls	r6, r6, #4
100118a6:	7042      	strb	r2, [r0, #1]
100118a8:	7082      	strb	r2, [r0, #2]
100118aa:	80a2      	strh	r2, [r4, #4]
100118ac:	8026      	strh	r6, [r4, #0]
100118ae:	4798      	blx	r3
100118b0:	1c28      	adds	r0, r5, #0
100118b2:	4b0b      	ldr	r3, [pc, #44]	; (100118e0 <gapm_reset_req_handler+0x6c>)
100118b4:	4798      	blx	r3
100118b6:	782b      	ldrb	r3, [r5, #0]
100118b8:	20e2      	movs	r0, #226	; 0xe2
100118ba:	2b00      	cmp	r3, #0
100118bc:	d106      	bne.n	100118cc <gapm_reset_req_handler+0x58>
100118be:	68a3      	ldr	r3, [r4, #8]
100118c0:	20e2      	movs	r0, #226	; 0xe2
100118c2:	781a      	ldrb	r2, [r3, #0]
100118c4:	785b      	ldrb	r3, [r3, #1]
100118c6:	2a01      	cmp	r2, #1
100118c8:	d100      	bne.n	100118cc <gapm_reset_req_handler+0x58>
100118ca:	1c18      	adds	r0, r3, #0
100118cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100118ce:	46c0      	nop			; (mov r8, r8)
100118d0:	10019650 	.word	0x10019650
100118d4:	100199c0 	.word	0x100199c0
100118d8:	10019644 	.word	0x10019644
100118dc:	10010c9d 	.word	0x10010c9d
100118e0:	10010d01 	.word	0x10010d01

100118e4 <gapm_set_dev_config_cmd_handler>:
100118e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100118e6:	b089      	sub	sp, #36	; 0x24
100118e8:	9303      	str	r3, [sp, #12]
100118ea:	ab0e      	add	r3, sp, #56	; 0x38
100118ec:	781b      	ldrb	r3, [r3, #0]
100118ee:	4c37      	ldr	r4, [pc, #220]	; (100119cc <gapm_set_dev_config_cmd_handler+0xe8>)
100118f0:	9304      	str	r3, [sp, #16]
100118f2:	ab0f      	add	r3, sp, #60	; 0x3c
100118f4:	781b      	ldrb	r3, [r3, #0]
100118f6:	270d      	movs	r7, #13
100118f8:	9305      	str	r3, [sp, #20]
100118fa:	ab10      	add	r3, sp, #64	; 0x40
100118fc:	881b      	ldrh	r3, [r3, #0]
100118fe:	72a1      	strb	r1, [r4, #10]
10011900:	9300      	str	r3, [sp, #0]
10011902:	ab11      	add	r3, sp, #68	; 0x44
10011904:	881b      	ldrh	r3, [r3, #0]
10011906:	0a09      	lsrs	r1, r1, #8
10011908:	9301      	str	r3, [sp, #4]
1001190a:	ab12      	add	r3, sp, #72	; 0x48
1001190c:	881b      	ldrh	r3, [r3, #0]
1001190e:	7260      	strb	r0, [r4, #9]
10011910:	9302      	str	r3, [sp, #8]
10011912:	ab06      	add	r3, sp, #24
10011914:	1dde      	adds	r6, r3, #7
10011916:	2300      	movs	r3, #0
10011918:	7033      	strb	r3, [r6, #0]
1001191a:	2304      	movs	r3, #4
1001191c:	7023      	strb	r3, [r4, #0]
1001191e:	2300      	movs	r3, #0
10011920:	70e3      	strb	r3, [r4, #3]
10011922:	4b2b      	ldr	r3, [pc, #172]	; (100119d0 <gapm_set_dev_config_cmd_handler+0xec>)
10011924:	72e1      	strb	r1, [r4, #11]
10011926:	881d      	ldrh	r5, [r3, #0]
10011928:	881b      	ldrh	r3, [r3, #0]
1001192a:	1c11      	adds	r1, r2, #0
1001192c:	0a1b      	lsrs	r3, r3, #8
1001192e:	7163      	strb	r3, [r4, #5]
10011930:	2303      	movs	r3, #3
10011932:	7125      	strb	r5, [r4, #4]
10011934:	2206      	movs	r2, #6
10011936:	4d27      	ldr	r5, [pc, #156]	; (100119d4 <gapm_set_dev_config_cmd_handler+0xf0>)
10011938:	4827      	ldr	r0, [pc, #156]	; (100119d8 <gapm_set_dev_config_cmd_handler+0xf4>)
1001193a:	7223      	strb	r3, [r4, #8]
1001193c:	7067      	strb	r7, [r4, #1]
1001193e:	70a7      	strb	r7, [r4, #2]
10011940:	47a8      	blx	r5
10011942:	9903      	ldr	r1, [sp, #12]
10011944:	2210      	movs	r2, #16
10011946:	4825      	ldr	r0, [pc, #148]	; (100119dc <gapm_set_dev_config_cmd_handler+0xf8>)
10011948:	47a8      	blx	r5
1001194a:	466a      	mov	r2, sp
1001194c:	7c12      	ldrb	r2, [r2, #16]
1001194e:	1ce3      	adds	r3, r4, #3
10011950:	77da      	strb	r2, [r3, #31]
10011952:	466a      	mov	r2, sp
10011954:	7d12      	ldrb	r2, [r2, #20]
10011956:	1d23      	adds	r3, r4, #4
10011958:	77da      	strb	r2, [r3, #31]
1001195a:	466a      	mov	r2, sp
1001195c:	7812      	ldrb	r2, [r2, #0]
1001195e:	1d63      	adds	r3, r4, #5
10011960:	77da      	strb	r2, [r3, #31]
10011962:	9b00      	ldr	r3, [sp, #0]
10011964:	1da2      	adds	r2, r4, #6
10011966:	0a1b      	lsrs	r3, r3, #8
10011968:	77d3      	strb	r3, [r2, #31]
1001196a:	466a      	mov	r2, sp
1001196c:	7912      	ldrb	r2, [r2, #4]
1001196e:	1de3      	adds	r3, r4, #7
10011970:	77da      	strb	r2, [r3, #31]
10011972:	1c22      	adds	r2, r4, #0
10011974:	9b01      	ldr	r3, [sp, #4]
10011976:	3208      	adds	r2, #8
10011978:	0a1b      	lsrs	r3, r3, #8
1001197a:	77d3      	strb	r3, [r2, #31]
1001197c:	466a      	mov	r2, sp
1001197e:	1c23      	adds	r3, r4, #0
10011980:	7a12      	ldrb	r2, [r2, #8]
10011982:	3328      	adds	r3, #40	; 0x28
10011984:	701a      	strb	r2, [r3, #0]
10011986:	1c22      	adds	r2, r4, #0
10011988:	9b02      	ldr	r3, [sp, #8]
1001198a:	3229      	adds	r2, #41	; 0x29
1001198c:	0a1b      	lsrs	r3, r3, #8
1001198e:	7013      	strb	r3, [r2, #0]
10011990:	23d0      	movs	r3, #208	; 0xd0
10011992:	4d13      	ldr	r5, [pc, #76]	; (100119e0 <gapm_set_dev_config_cmd_handler+0xfc>)
10011994:	011b      	lsls	r3, r3, #4
10011996:	802b      	strh	r3, [r5, #0]
10011998:	2322      	movs	r3, #34	; 0x22
1001199a:	71a3      	strb	r3, [r4, #6]
1001199c:	2300      	movs	r3, #0
1001199e:	212a      	movs	r1, #42	; 0x2a
100119a0:	71e3      	strb	r3, [r4, #7]
100119a2:	1c20      	adds	r0, r4, #0
100119a4:	4b0f      	ldr	r3, [pc, #60]	; (100119e4 <gapm_set_dev_config_cmd_handler+0x100>)
100119a6:	80af      	strh	r7, [r5, #4]
100119a8:	4798      	blx	r3
100119aa:	1c30      	adds	r0, r6, #0
100119ac:	4b0e      	ldr	r3, [pc, #56]	; (100119e8 <gapm_set_dev_config_cmd_handler+0x104>)
100119ae:	4798      	blx	r3
100119b0:	7833      	ldrb	r3, [r6, #0]
100119b2:	20e2      	movs	r0, #226	; 0xe2
100119b4:	2b00      	cmp	r3, #0
100119b6:	d106      	bne.n	100119c6 <gapm_set_dev_config_cmd_handler+0xe2>
100119b8:	68ab      	ldr	r3, [r5, #8]
100119ba:	20e2      	movs	r0, #226	; 0xe2
100119bc:	781a      	ldrb	r2, [r3, #0]
100119be:	785b      	ldrb	r3, [r3, #1]
100119c0:	2a03      	cmp	r2, #3
100119c2:	d100      	bne.n	100119c6 <gapm_set_dev_config_cmd_handler+0xe2>
100119c4:	1c18      	adds	r0, r3, #0
100119c6:	b009      	add	sp, #36	; 0x24
100119c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100119ca:	46c0      	nop			; (mov r8, r8)
100119cc:	100199c0 	.word	0x100199c0
100119d0:	10019650 	.word	0x10019650
100119d4:	100143b7 	.word	0x100143b7
100119d8:	100199cc 	.word	0x100199cc
100119dc:	100199d2 	.word	0x100199d2
100119e0:	10019644 	.word	0x10019644
100119e4:	10010c9d 	.word	0x10010c9d
100119e8:	10010d01 	.word	0x10010d01

100119ec <gapm_get_dev_config_cmd_handler>:
100119ec:	4684      	mov	ip, r0
100119ee:	4663      	mov	r3, ip
100119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100119f2:	b085      	sub	sp, #20
100119f4:	9100      	str	r1, [sp, #0]
100119f6:	20cf      	movs	r0, #207	; 0xcf
100119f8:	2b01      	cmp	r3, #1
100119fa:	d854      	bhi.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
100119fc:	2900      	cmp	r1, #0
100119fe:	d052      	beq.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
10011a00:	2200      	movs	r2, #0
10011a02:	492a      	ldr	r1, [pc, #168]	; (10011aac <gapm_get_dev_config_cmd_handler+0xc0>)
10011a04:	ab02      	add	r3, sp, #8
10011a06:	880c      	ldrh	r4, [r1, #0]
10011a08:	8809      	ldrh	r1, [r1, #0]
10011a0a:	1d9f      	adds	r7, r3, #6
10011a0c:	719a      	strb	r2, [r3, #6]
10011a0e:	4b28      	ldr	r3, [pc, #160]	; (10011ab0 <gapm_get_dev_config_cmd_handler+0xc4>)
10011a10:	0a09      	lsrs	r1, r1, #8
10011a12:	250d      	movs	r5, #13
10011a14:	2606      	movs	r6, #6
10011a16:	7159      	strb	r1, [r3, #5]
10011a18:	4661      	mov	r1, ip
10011a1a:	701e      	strb	r6, [r3, #0]
10011a1c:	705d      	strb	r5, [r3, #1]
10011a1e:	709d      	strb	r5, [r3, #2]
10011a20:	70da      	strb	r2, [r3, #3]
10011a22:	711c      	strb	r4, [r3, #4]
10011a24:	2901      	cmp	r1, #1
10011a26:	d13e      	bne.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
10011a28:	21d0      	movs	r1, #208	; 0xd0
10011a2a:	4c22      	ldr	r4, [pc, #136]	; (10011ab4 <gapm_get_dev_config_cmd_handler+0xc8>)
10011a2c:	0109      	lsls	r1, r1, #4
10011a2e:	8061      	strh	r1, [r4, #2]
10011a30:	4921      	ldr	r1, [pc, #132]	; (10011ab8 <gapm_get_dev_config_cmd_handler+0xcc>)
10011a32:	71da      	strb	r2, [r3, #7]
10011a34:	8021      	strh	r1, [r4, #0]
10011a36:	4661      	mov	r1, ip
10011a38:	721e      	strb	r6, [r3, #8]
10011a3a:	7199      	strb	r1, [r3, #6]
10011a3c:	1c18      	adds	r0, r3, #0
10011a3e:	2109      	movs	r1, #9
10011a40:	4b1e      	ldr	r3, [pc, #120]	; (10011abc <gapm_get_dev_config_cmd_handler+0xd0>)
10011a42:	80a5      	strh	r5, [r4, #4]
10011a44:	4798      	blx	r3
10011a46:	1c38      	adds	r0, r7, #0
10011a48:	4b1d      	ldr	r3, [pc, #116]	; (10011ac0 <gapm_get_dev_config_cmd_handler+0xd4>)
10011a4a:	4798      	blx	r3
10011a4c:	783b      	ldrb	r3, [r7, #0]
10011a4e:	20e2      	movs	r0, #226	; 0xe2
10011a50:	9301      	str	r3, [sp, #4]
10011a52:	2b00      	cmp	r3, #0
10011a54:	d127      	bne.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
10011a56:	8821      	ldrh	r1, [r4, #0]
10011a58:	4a1a      	ldr	r2, [pc, #104]	; (10011ac4 <gapm_get_dev_config_cmd_handler+0xd8>)
10011a5a:	68a7      	ldr	r7, [r4, #8]
10011a5c:	3b01      	subs	r3, #1
10011a5e:	4291      	cmp	r1, r2
10011a60:	d001      	beq.n	10011a66 <gapm_get_dev_config_cmd_handler+0x7a>
10011a62:	8023      	strh	r3, [r4, #0]
10011a64:	e01a      	b.n	10011a9c <gapm_get_dev_config_cmd_handler+0xb0>
10011a66:	8063      	strh	r3, [r4, #2]
10011a68:	9b00      	ldr	r3, [sp, #0]
10011a6a:	1c39      	adds	r1, r7, #0
10011a6c:	1c58      	adds	r0, r3, #1
10011a6e:	1c32      	adds	r2, r6, #0
10011a70:	4b15      	ldr	r3, [pc, #84]	; (10011ac8 <gapm_get_dev_config_cmd_handler+0xdc>)
10011a72:	4798      	blx	r3
10011a74:	79bb      	ldrb	r3, [r7, #6]
10011a76:	9a00      	ldr	r2, [sp, #0]
10011a78:	7013      	strb	r3, [r2, #0]
10011a7a:	23d0      	movs	r3, #208	; 0xd0
10011a7c:	011b      	lsls	r3, r3, #4
10011a7e:	8023      	strh	r3, [r4, #0]
10011a80:	ab02      	add	r3, sp, #8
10011a82:	80a5      	strh	r5, [r4, #4]
10011a84:	1ddd      	adds	r5, r3, #7
10011a86:	466b      	mov	r3, sp
10011a88:	791b      	ldrb	r3, [r3, #4]
10011a8a:	1c28      	adds	r0, r5, #0
10011a8c:	702b      	strb	r3, [r5, #0]
10011a8e:	4b0c      	ldr	r3, [pc, #48]	; (10011ac0 <gapm_get_dev_config_cmd_handler+0xd4>)
10011a90:	4798      	blx	r3
10011a92:	782b      	ldrb	r3, [r5, #0]
10011a94:	20d0      	movs	r0, #208	; 0xd0
10011a96:	2b00      	cmp	r3, #0
10011a98:	d105      	bne.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
10011a9a:	68a7      	ldr	r7, [r4, #8]
10011a9c:	783b      	ldrb	r3, [r7, #0]
10011a9e:	7878      	ldrb	r0, [r7, #1]
10011aa0:	2b06      	cmp	r3, #6
10011aa2:	d000      	beq.n	10011aa6 <gapm_get_dev_config_cmd_handler+0xba>
10011aa4:	20e2      	movs	r0, #226	; 0xe2
10011aa6:	b005      	add	sp, #20
10011aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011aaa:	46c0      	nop			; (mov r8, r8)
10011aac:	10019650 	.word	0x10019650
10011ab0:	100199c0 	.word	0x100199c0
10011ab4:	10019644 	.word	0x10019644
10011ab8:	00000d08 	.word	0x00000d08
10011abc:	10010c9d 	.word	0x10010c9d
10011ac0:	10010d01 	.word	0x10010d01
10011ac4:	0000ffff 	.word	0x0000ffff
10011ac8:	100143b7 	.word	0x100143b7

10011acc <gapm_cancel_cmd_handler>:
10011acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
10011ace:	4916      	ldr	r1, [pc, #88]	; (10011b28 <gapm_cancel_cmd_handler+0x5c>)
10011ad0:	4816      	ldr	r0, [pc, #88]	; (10011b2c <gapm_cancel_cmd_handler+0x60>)
10011ad2:	880c      	ldrh	r4, [r1, #0]
10011ad4:	8809      	ldrh	r1, [r1, #0]
10011ad6:	466b      	mov	r3, sp
10011ad8:	0a09      	lsrs	r1, r1, #8
10011ada:	7141      	strb	r1, [r0, #5]
10011adc:	2102      	movs	r1, #2
10011ade:	2203      	movs	r2, #3
10011ae0:	7201      	strb	r1, [r0, #8]
10011ae2:	21d0      	movs	r1, #208	; 0xd0
10011ae4:	1ddd      	adds	r5, r3, #7
10011ae6:	2300      	movs	r3, #0
10011ae8:	7104      	strb	r4, [r0, #4]
10011aea:	4c11      	ldr	r4, [pc, #68]	; (10011b30 <gapm_cancel_cmd_handler+0x64>)
10011aec:	7002      	strb	r2, [r0, #0]
10011aee:	0109      	lsls	r1, r1, #4
10011af0:	320a      	adds	r2, #10
10011af2:	702b      	strb	r3, [r5, #0]
10011af4:	7042      	strb	r2, [r0, #1]
10011af6:	7082      	strb	r2, [r0, #2]
10011af8:	70c3      	strb	r3, [r0, #3]
10011afa:	8021      	strh	r1, [r4, #0]
10011afc:	80a2      	strh	r2, [r4, #4]
10011afe:	71c3      	strb	r3, [r0, #7]
10011b00:	3a0c      	subs	r2, #12
10011b02:	2109      	movs	r1, #9
10011b04:	4b0b      	ldr	r3, [pc, #44]	; (10011b34 <gapm_cancel_cmd_handler+0x68>)
10011b06:	7182      	strb	r2, [r0, #6]
10011b08:	4798      	blx	r3
10011b0a:	1c28      	adds	r0, r5, #0
10011b0c:	4b0a      	ldr	r3, [pc, #40]	; (10011b38 <gapm_cancel_cmd_handler+0x6c>)
10011b0e:	4798      	blx	r3
10011b10:	7828      	ldrb	r0, [r5, #0]
10011b12:	2800      	cmp	r0, #0
10011b14:	d001      	beq.n	10011b1a <gapm_cancel_cmd_handler+0x4e>
10011b16:	20e2      	movs	r0, #226	; 0xe2
10011b18:	e004      	b.n	10011b24 <gapm_cancel_cmd_handler+0x58>
10011b1a:	68a3      	ldr	r3, [r4, #8]
10011b1c:	785b      	ldrb	r3, [r3, #1]
10011b1e:	2b44      	cmp	r3, #68	; 0x44
10011b20:	d000      	beq.n	10011b24 <gapm_cancel_cmd_handler+0x58>
10011b22:	1c18      	adds	r0, r3, #0
10011b24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011b26:	46c0      	nop			; (mov r8, r8)
10011b28:	10019650 	.word	0x10019650
10011b2c:	100199c0 	.word	0x100199c0
10011b30:	10019644 	.word	0x10019644
10011b34:	10010c9d 	.word	0x10010c9d
10011b38:	10010d01 	.word	0x10010d01

10011b3c <gapm_dev_bdaddr_ind_handler>:
10011b3c:	b538      	push	{r3, r4, r5, lr}
10011b3e:	1c05      	adds	r5, r0, #0
10011b40:	1c0c      	adds	r4, r1, #0
10011b42:	1c48      	adds	r0, r1, #1
10011b44:	2206      	movs	r2, #6
10011b46:	1c29      	adds	r1, r5, #0
10011b48:	4b02      	ldr	r3, [pc, #8]	; (10011b54 <gapm_dev_bdaddr_ind_handler+0x18>)
10011b4a:	4798      	blx	r3
10011b4c:	79ab      	ldrb	r3, [r5, #6]
10011b4e:	2000      	movs	r0, #0
10011b50:	7023      	strb	r3, [r4, #0]
10011b52:	bd38      	pop	{r3, r4, r5, pc}
10011b54:	100143b7 	.word	0x100143b7

10011b58 <gapm_cmp_evt>:
10011b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011b5a:	7803      	ldrb	r3, [r0, #0]
10011b5c:	7845      	ldrb	r5, [r0, #1]
10011b5e:	3b0c      	subs	r3, #12
10011b60:	1e18      	subs	r0, r3, #0
10011b62:	280b      	cmp	r0, #11
10011b64:	d900      	bls.n	10011b68 <gapm_cmp_evt+0x10>
10011b66:	e08d      	b.n	10011c84 <gapm_cmp_evt+0x12c>
10011b68:	1c0c      	adds	r4, r1, #0
10011b6a:	f000 fd5f 	bl	1001262c <__gnu_thumb1_case_uqi>
10011b6e:	1952      	.short	0x1952
10011b70:	068b1919 	.word	0x068b1919
10011b74:	8b595906 	.word	0x8b595906
10011b78:	0d8b      	.short	0x0d8b
10011b7a:	2300      	movs	r3, #0
10011b7c:	2d45      	cmp	r5, #69	; 0x45
10011b7e:	d000      	beq.n	10011b82 <gapm_cmp_evt+0x2a>
10011b80:	1c2b      	adds	r3, r5, #0
10011b82:	7023      	strb	r3, [r4, #0]
10011b84:	2002      	movs	r0, #2
10011b86:	e07e      	b.n	10011c86 <gapm_cmp_evt+0x12e>
10011b88:	203b      	movs	r0, #59	; 0x3b
10011b8a:	2d00      	cmp	r5, #0
10011b8c:	d100      	bne.n	10011b90 <gapm_cmp_evt+0x38>
10011b8e:	e07a      	b.n	10011c86 <gapm_cmp_evt+0x12e>
10011b90:	700d      	strb	r5, [r1, #0]
10011b92:	1c48      	adds	r0, r1, #1
10011b94:	2210      	movs	r2, #16
10011b96:	2100      	movs	r1, #0
10011b98:	4b3b      	ldr	r3, [pc, #236]	; (10011c88 <gapm_cmp_evt+0x130>)
10011b9a:	4798      	blx	r3
10011b9c:	200f      	movs	r0, #15
10011b9e:	e072      	b.n	10011c86 <gapm_cmp_evt+0x12e>
10011ba0:	2d00      	cmp	r5, #0
10011ba2:	d134      	bne.n	10011c0e <gapm_cmp_evt+0xb6>
10011ba4:	4b39      	ldr	r3, [pc, #228]	; (10011c8c <gapm_cmp_evt+0x134>)
10011ba6:	4798      	blx	r3
10011ba8:	1e43      	subs	r3, r0, #1
10011baa:	b2db      	uxtb	r3, r3
10011bac:	1c28      	adds	r0, r5, #0
10011bae:	2b06      	cmp	r3, #6
10011bb0:	d869      	bhi.n	10011c86 <gapm_cmp_evt+0x12e>
10011bb2:	466b      	mov	r3, sp
10011bb4:	4e36      	ldr	r6, [pc, #216]	; (10011c90 <gapm_cmp_evt+0x138>)
10011bb6:	1dd9      	adds	r1, r3, #7
10011bb8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011bba:	4b36      	ldr	r3, [pc, #216]	; (10011c94 <gapm_cmp_evt+0x13c>)
10011bbc:	4798      	blx	r3
10011bbe:	2312      	movs	r3, #18
10011bc0:	4358      	muls	r0, r3
10011bc2:	4935      	ldr	r1, [pc, #212]	; (10011c98 <gapm_cmp_evt+0x140>)
10011bc4:	1809      	adds	r1, r1, r0
10011bc6:	1c0b      	adds	r3, r1, #0
10011bc8:	894a      	ldrh	r2, [r1, #10]
10011bca:	3308      	adds	r3, #8
10011bcc:	8122      	strh	r2, [r4, #8]
10011bce:	784f      	ldrb	r7, [r1, #1]
10011bd0:	72a5      	strb	r5, [r4, #10]
10011bd2:	7027      	strb	r7, [r4, #0]
10011bd4:	898a      	ldrh	r2, [r1, #12]
10011bd6:	1c60      	adds	r0, r4, #1
10011bd8:	81a2      	strh	r2, [r4, #12]
10011bda:	88db      	ldrh	r3, [r3, #6]
10011bdc:	3102      	adds	r1, #2
10011bde:	81e3      	strh	r3, [r4, #14]
10011be0:	89cb      	ldrh	r3, [r1, #14]
10011be2:	2206      	movs	r2, #6
10011be4:	8223      	strh	r3, [r4, #16]
10011be6:	4b2d      	ldr	r3, [pc, #180]	; (10011c9c <gapm_cmp_evt+0x144>)
10011be8:	4798      	blx	r3
10011bea:	2f00      	cmp	r7, #0
10011bec:	d00a      	beq.n	10011c04 <gapm_cmp_evt+0xac>
10011bee:	79a3      	ldrb	r3, [r4, #6]
10011bf0:	223f      	movs	r2, #63	; 0x3f
10011bf2:	1c19      	adds	r1, r3, #0
10011bf4:	3501      	adds	r5, #1
10011bf6:	4391      	bics	r1, r2
10011bf8:	29c0      	cmp	r1, #192	; 0xc0
10011bfa:	d003      	beq.n	10011c04 <gapm_cmp_evt+0xac>
10011bfc:	065b      	lsls	r3, r3, #25
10011bfe:	0fdb      	lsrs	r3, r3, #31
10011c00:	3502      	adds	r5, #2
10011c02:	1aed      	subs	r5, r5, r3
10011c04:	2301      	movs	r3, #1
10011c06:	425b      	negs	r3, r3
10011c08:	7025      	strb	r5, [r4, #0]
10011c0a:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011c0c:	e038      	b.n	10011c80 <gapm_cmp_evt+0x128>
10011c0e:	700d      	strb	r5, [r1, #0]
10011c10:	e004      	b.n	10011c1c <gapm_cmp_evt+0xc4>
10011c12:	2300      	movs	r3, #0
10011c14:	2d45      	cmp	r5, #69	; 0x45
10011c16:	d000      	beq.n	10011c1a <gapm_cmp_evt+0xc2>
10011c18:	1c2b      	adds	r3, r5, #0
10011c1a:	7023      	strb	r3, [r4, #0]
10011c1c:	2003      	movs	r0, #3
10011c1e:	e032      	b.n	10011c86 <gapm_cmp_evt+0x12e>
10011c20:	4e1b      	ldr	r6, [pc, #108]	; (10011c90 <gapm_cmp_evt+0x138>)
10011c22:	2100      	movs	r1, #0
10011c24:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011c26:	4b1b      	ldr	r3, [pc, #108]	; (10011c94 <gapm_cmp_evt+0x13c>)
10011c28:	4798      	blx	r3
10011c2a:	2807      	cmp	r0, #7
10011c2c:	d818      	bhi.n	10011c60 <gapm_cmp_evt+0x108>
10011c2e:	2301      	movs	r3, #1
10011c30:	425b      	negs	r3, r3
10011c32:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011c34:	3313      	adds	r3, #19
10011c36:	4358      	muls	r0, r3
10011c38:	4917      	ldr	r1, [pc, #92]	; (10011c98 <gapm_cmp_evt+0x140>)
10011c3a:	1809      	adds	r1, r1, r0
10011c3c:	1c0b      	adds	r3, r1, #0
10011c3e:	894a      	ldrh	r2, [r1, #10]
10011c40:	3308      	adds	r3, #8
10011c42:	8122      	strh	r2, [r4, #8]
10011c44:	784a      	ldrb	r2, [r1, #1]
10011c46:	72a5      	strb	r5, [r4, #10]
10011c48:	7022      	strb	r2, [r4, #0]
10011c4a:	898a      	ldrh	r2, [r1, #12]
10011c4c:	1c60      	adds	r0, r4, #1
10011c4e:	81a2      	strh	r2, [r4, #12]
10011c50:	88db      	ldrh	r3, [r3, #6]
10011c52:	3102      	adds	r1, #2
10011c54:	81e3      	strh	r3, [r4, #14]
10011c56:	89cb      	ldrh	r3, [r1, #14]
10011c58:	2206      	movs	r2, #6
10011c5a:	8223      	strh	r3, [r4, #16]
10011c5c:	4b0f      	ldr	r3, [pc, #60]	; (10011c9c <gapm_cmp_evt+0x144>)
10011c5e:	4798      	blx	r3
10011c60:	2200      	movs	r2, #0
10011c62:	7823      	ldrb	r3, [r4, #0]
10011c64:	4293      	cmp	r3, r2
10011c66:	d00a      	beq.n	10011c7e <gapm_cmp_evt+0x126>
10011c68:	79a3      	ldrb	r3, [r4, #6]
10011c6a:	323f      	adds	r2, #63	; 0x3f
10011c6c:	1c19      	adds	r1, r3, #0
10011c6e:	4391      	bics	r1, r2
10011c70:	3a3e      	subs	r2, #62	; 0x3e
10011c72:	29c0      	cmp	r1, #192	; 0xc0
10011c74:	d003      	beq.n	10011c7e <gapm_cmp_evt+0x126>
10011c76:	065b      	lsls	r3, r3, #25
10011c78:	0fdb      	lsrs	r3, r3, #31
10011c7a:	3202      	adds	r2, #2
10011c7c:	1ad2      	subs	r2, r2, r3
10011c7e:	7022      	strb	r2, [r4, #0]
10011c80:	2005      	movs	r0, #5
10011c82:	e000      	b.n	10011c86 <gapm_cmp_evt+0x12e>
10011c84:	2000      	movs	r0, #0
10011c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011c88:	100143c9 	.word	0x100143c9
10011c8c:	10010ea9 	.word	0x10010ea9
10011c90:	100196e2 	.word	0x100196e2
10011c94:	10010e6d 	.word	0x10010e6d
10011c98:	10019652 	.word	0x10019652
10011c9c:	100143b7 	.word	0x100143b7

10011ca0 <gapm_start_adv_cmd_handler>:
10011ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ca2:	b089      	sub	sp, #36	; 0x24
10011ca4:	9303      	str	r3, [sp, #12]
10011ca6:	ab0e      	add	r3, sp, #56	; 0x38
10011ca8:	9102      	str	r1, [sp, #8]
10011caa:	cb02      	ldmia	r3!, {r1}
10011cac:	aa08      	add	r2, sp, #32
10011cae:	881b      	ldrh	r3, [r3, #0]
10011cb0:	4e3c      	ldr	r6, [pc, #240]	; (10011da4 <gapm_start_adv_cmd_handler+0x104>)
10011cb2:	9300      	str	r3, [sp, #0]
10011cb4:	ab10      	add	r3, sp, #64	; 0x40
10011cb6:	881b      	ldrh	r3, [r3, #0]
10011cb8:	240d      	movs	r4, #13
10011cba:	469c      	mov	ip, r3
10011cbc:	ab11      	add	r3, sp, #68	; 0x44
10011cbe:	781b      	ldrb	r3, [r3, #0]
10011cc0:	9304      	str	r3, [sp, #16]
10011cc2:	ab12      	add	r3, sp, #72	; 0x48
10011cc4:	781b      	ldrb	r3, [r3, #0]
10011cc6:	9305      	str	r3, [sp, #20]
10011cc8:	ab13      	add	r3, sp, #76	; 0x4c
10011cca:	781b      	ldrb	r3, [r3, #0]
10011ccc:	9306      	str	r3, [sp, #24]
10011cce:	ab14      	add	r3, sp, #80	; 0x50
10011cd0:	781b      	ldrb	r3, [r3, #0]
10011cd2:	9301      	str	r3, [sp, #4]
10011cd4:	2319      	movs	r3, #25
10011cd6:	189b      	adds	r3, r3, r2
10011cd8:	7fdd      	ldrb	r5, [r3, #31]
10011cda:	ab18      	add	r3, sp, #96	; 0x60
10011cdc:	881f      	ldrh	r7, [r3, #0]
10011cde:	ab19      	add	r3, sp, #100	; 0x64
10011ce0:	781b      	ldrb	r3, [r3, #0]
10011ce2:	8832      	ldrh	r2, [r6, #0]
10011ce4:	9307      	str	r3, [sp, #28]
10011ce6:	4b30      	ldr	r3, [pc, #192]	; (10011da8 <gapm_start_adv_cmd_handler+0x108>)
10011ce8:	8836      	ldrh	r6, [r6, #0]
10011cea:	711a      	strb	r2, [r3, #4]
10011cec:	466a      	mov	r2, sp
10011cee:	7a12      	ldrb	r2, [r2, #8]
10011cf0:	701c      	strb	r4, [r3, #0]
10011cf2:	705c      	strb	r4, [r3, #1]
10011cf4:	709c      	strb	r4, [r3, #2]
10011cf6:	725a      	strb	r2, [r3, #9]
10011cf8:	2400      	movs	r4, #0
10011cfa:	466a      	mov	r2, sp
10011cfc:	0a36      	lsrs	r6, r6, #8
10011cfe:	70dc      	strb	r4, [r3, #3]
10011d00:	7218      	strb	r0, [r3, #8]
10011d02:	729c      	strb	r4, [r3, #10]
10011d04:	715e      	strb	r6, [r3, #5]
10011d06:	72dc      	strb	r4, [r3, #11]
10011d08:	7812      	ldrb	r2, [r2, #0]
10011d0a:	380e      	subs	r0, #14
10011d0c:	731a      	strb	r2, [r3, #12]
10011d0e:	9a00      	ldr	r2, [sp, #0]
10011d10:	0a14      	lsrs	r4, r2, #8
10011d12:	4662      	mov	r2, ip
10011d14:	739a      	strb	r2, [r3, #14]
10011d16:	4662      	mov	r2, ip
10011d18:	735c      	strb	r4, [r3, #13]
10011d1a:	0a14      	lsrs	r4, r2, #8
10011d1c:	466a      	mov	r2, sp
10011d1e:	7c12      	ldrb	r2, [r2, #16]
10011d20:	73dc      	strb	r4, [r3, #15]
10011d22:	741a      	strb	r2, [r3, #16]
10011d24:	1c1c      	adds	r4, r3, #0
10011d26:	2801      	cmp	r0, #1
10011d28:	d809      	bhi.n	10011d3e <gapm_start_adv_cmd_handler+0x9e>
10011d2a:	2900      	cmp	r1, #0
10011d2c:	d003      	beq.n	10011d36 <gapm_start_adv_cmd_handler+0x96>
10011d2e:	481f      	ldr	r0, [pc, #124]	; (10011dac <gapm_start_adv_cmd_handler+0x10c>)
10011d30:	2206      	movs	r2, #6
10011d32:	4b1f      	ldr	r3, [pc, #124]	; (10011db0 <gapm_start_adv_cmd_handler+0x110>)
10011d34:	4798      	blx	r3
10011d36:	466b      	mov	r3, sp
10011d38:	7b1b      	ldrb	r3, [r3, #12]
10011d3a:	75e3      	strb	r3, [r4, #23]
10011d3c:	e014      	b.n	10011d68 <gapm_start_adv_cmd_handler+0xc8>
10011d3e:	466b      	mov	r3, sp
10011d40:	7d1b      	ldrb	r3, [r3, #20]
10011d42:	9915      	ldr	r1, [sp, #84]	; 0x54
10011d44:	7463      	strb	r3, [r4, #17]
10011d46:	466b      	mov	r3, sp
10011d48:	7e1b      	ldrb	r3, [r3, #24]
10011d4a:	9a01      	ldr	r2, [sp, #4]
10011d4c:	74a3      	strb	r3, [r4, #18]
10011d4e:	466b      	mov	r3, sp
10011d50:	791b      	ldrb	r3, [r3, #4]
10011d52:	4818      	ldr	r0, [pc, #96]	; (10011db4 <gapm_start_adv_cmd_handler+0x114>)
10011d54:	4e16      	ldr	r6, [pc, #88]	; (10011db0 <gapm_start_adv_cmd_handler+0x110>)
10011d56:	74e3      	strb	r3, [r4, #19]
10011d58:	47b0      	blx	r6
10011d5a:	1c23      	adds	r3, r4, #0
10011d5c:	4816      	ldr	r0, [pc, #88]	; (10011db8 <gapm_start_adv_cmd_handler+0x118>)
10011d5e:	3330      	adds	r3, #48	; 0x30
10011d60:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011d62:	1c2a      	adds	r2, r5, #0
10011d64:	701d      	strb	r5, [r3, #0]
10011d66:	47b0      	blx	r6
10011d68:	1c22      	adds	r2, r4, #0
10011d6a:	23a5      	movs	r3, #165	; 0xa5
10011d6c:	3250      	adds	r2, #80	; 0x50
10011d6e:	7013      	strb	r3, [r2, #0]
10011d70:	1c22      	adds	r2, r4, #0
10011d72:	3251      	adds	r2, #81	; 0x51
10011d74:	7013      	strb	r3, [r2, #0]
10011d76:	1c23      	adds	r3, r4, #0
10011d78:	1c22      	adds	r2, r4, #0
10011d7a:	3352      	adds	r3, #82	; 0x52
10011d7c:	701f      	strb	r7, [r3, #0]
10011d7e:	3253      	adds	r2, #83	; 0x53
10011d80:	0a3b      	lsrs	r3, r7, #8
10011d82:	7013      	strb	r3, [r2, #0]
10011d84:	466a      	mov	r2, sp
10011d86:	1c23      	adds	r3, r4, #0
10011d88:	7f12      	ldrb	r2, [r2, #28]
10011d8a:	3354      	adds	r3, #84	; 0x54
10011d8c:	701a      	strb	r2, [r3, #0]
10011d8e:	234d      	movs	r3, #77	; 0x4d
10011d90:	2500      	movs	r5, #0
10011d92:	71a3      	strb	r3, [r4, #6]
10011d94:	1c20      	adds	r0, r4, #0
10011d96:	2155      	movs	r1, #85	; 0x55
10011d98:	4b08      	ldr	r3, [pc, #32]	; (10011dbc <gapm_start_adv_cmd_handler+0x11c>)
10011d9a:	71e5      	strb	r5, [r4, #7]
10011d9c:	4798      	blx	r3
10011d9e:	1c28      	adds	r0, r5, #0
10011da0:	b009      	add	sp, #36	; 0x24
10011da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011da4:	10019650 	.word	0x10019650
10011da8:	100199c0 	.word	0x100199c0
10011dac:	100199d1 	.word	0x100199d1
10011db0:	100143b7 	.word	0x100143b7
10011db4:	100199d4 	.word	0x100199d4
10011db8:	100199f1 	.word	0x100199f1
10011dbc:	10010c9d 	.word	0x10010c9d

10011dc0 <get_gap_local_addr_type>:
10011dc0:	4b04      	ldr	r3, [pc, #16]	; (10011dd4 <get_gap_local_addr_type+0x14>)
10011dc2:	2001      	movs	r0, #1
10011dc4:	791b      	ldrb	r3, [r3, #4]
10011dc6:	2b02      	cmp	r3, #2
10011dc8:	d003      	beq.n	10011dd2 <get_gap_local_addr_type+0x12>
10011dca:	3b03      	subs	r3, #3
10011dcc:	4258      	negs	r0, r3
10011dce:	4158      	adcs	r0, r3
10011dd0:	0040      	lsls	r0, r0, #1
10011dd2:	4770      	bx	lr
10011dd4:	100196e2 	.word	0x100196e2

10011dd8 <gapm_adv_report_evt_handler>:
10011dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011dda:	7843      	ldrb	r3, [r0, #1]
10011ddc:	1c05      	adds	r5, r0, #0
10011dde:	9301      	str	r3, [sp, #4]
10011de0:	466b      	mov	r3, sp
10011de2:	1c0c      	adds	r4, r1, #0
10011de4:	791b      	ldrb	r3, [r3, #4]
10011de6:	7806      	ldrb	r6, [r0, #0]
10011de8:	2206      	movs	r2, #6
10011dea:	704b      	strb	r3, [r1, #1]
10011dec:	1c88      	adds	r0, r1, #2
10011dee:	4f1b      	ldr	r7, [pc, #108]	; (10011e5c <gapm_adv_report_evt_handler+0x84>)
10011df0:	1ca9      	adds	r1, r5, #2
10011df2:	47b8      	blx	r7
10011df4:	1c20      	adds	r0, r4, #0
10011df6:	1c29      	adds	r1, r5, #0
10011df8:	7a2a      	ldrb	r2, [r5, #8]
10011dfa:	3008      	adds	r0, #8
10011dfc:	77c2      	strb	r2, [r0, #31]
10011dfe:	3109      	adds	r1, #9
10011e00:	3528      	adds	r5, #40	; 0x28
10011e02:	47b8      	blx	r7
10011e04:	782b      	ldrb	r3, [r5, #0]
10011e06:	b25a      	sxtb	r2, r3
10011e08:	2a00      	cmp	r2, #0
10011e0a:	da01      	bge.n	10011e10 <gapm_adv_report_evt_handler+0x38>
10011e0c:	3301      	adds	r3, #1
10011e0e:	b2db      	uxtb	r3, r3
10011e10:	1c22      	adds	r2, r4, #0
10011e12:	3228      	adds	r2, #40	; 0x28
10011e14:	7013      	strb	r3, [r2, #0]
10011e16:	2200      	movs	r2, #0
10011e18:	9b01      	ldr	r3, [sp, #4]
10011e1a:	4293      	cmp	r3, r2
10011e1c:	d00a      	beq.n	10011e34 <gapm_adv_report_evt_handler+0x5c>
10011e1e:	79e3      	ldrb	r3, [r4, #7]
10011e20:	323f      	adds	r2, #63	; 0x3f
10011e22:	1c19      	adds	r1, r3, #0
10011e24:	4391      	bics	r1, r2
10011e26:	3a3e      	subs	r2, #62	; 0x3e
10011e28:	29c0      	cmp	r1, #192	; 0xc0
10011e2a:	d003      	beq.n	10011e34 <gapm_adv_report_evt_handler+0x5c>
10011e2c:	065b      	lsls	r3, r3, #25
10011e2e:	0fdb      	lsrs	r3, r3, #31
10011e30:	3202      	adds	r2, #2
10011e32:	1ad2      	subs	r2, r2, r3
10011e34:	7062      	strb	r2, [r4, #1]
10011e36:	2e04      	cmp	r6, #4
10011e38:	d80f      	bhi.n	10011e5a <gapm_adv_report_evt_handler+0x82>
10011e3a:	1c30      	adds	r0, r6, #0
10011e3c:	f000 fbf6 	bl	1001262c <__gnu_thumb1_case_uqi>
10011e40:	09070503 	.word	0x09070503
10011e44:	0b          	.byte	0x0b
10011e45:	00          	.byte	0x00
10011e46:	2300      	movs	r3, #0
10011e48:	e006      	b.n	10011e58 <gapm_adv_report_evt_handler+0x80>
10011e4a:	2301      	movs	r3, #1
10011e4c:	e004      	b.n	10011e58 <gapm_adv_report_evt_handler+0x80>
10011e4e:	2302      	movs	r3, #2
10011e50:	e002      	b.n	10011e58 <gapm_adv_report_evt_handler+0x80>
10011e52:	2303      	movs	r3, #3
10011e54:	e000      	b.n	10011e58 <gapm_adv_report_evt_handler+0x80>
10011e56:	2305      	movs	r3, #5
10011e58:	7023      	strb	r3, [r4, #0]
10011e5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011e5c:	100143b7 	.word	0x100143b7

10011e60 <gapm_resolv_addr_cmd_handler>:
10011e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011e62:	2314      	movs	r3, #20
10011e64:	4c12      	ldr	r4, [pc, #72]	; (10011eb0 <gapm_resolv_addr_cmd_handler+0x50>)
10011e66:	1c17      	adds	r7, r2, #0
10011e68:	7023      	strb	r3, [r4, #0]
10011e6a:	3b07      	subs	r3, #7
10011e6c:	7063      	strb	r3, [r4, #1]
10011e6e:	70a3      	strb	r3, [r4, #2]
10011e70:	2300      	movs	r3, #0
10011e72:	70e3      	strb	r3, [r4, #3]
10011e74:	4b0f      	ldr	r3, [pc, #60]	; (10011eb4 <gapm_resolv_addr_cmd_handler+0x54>)
10011e76:	1c05      	adds	r5, r0, #0
10011e78:	881a      	ldrh	r2, [r3, #0]
10011e7a:	881b      	ldrh	r3, [r3, #0]
10011e7c:	4e0e      	ldr	r6, [pc, #56]	; (10011eb8 <gapm_resolv_addr_cmd_handler+0x58>)
10011e7e:	0a1b      	lsrs	r3, r3, #8
10011e80:	7163      	strb	r3, [r4, #5]
10011e82:	2317      	movs	r3, #23
10011e84:	012d      	lsls	r5, r5, #4
10011e86:	7122      	strb	r2, [r4, #4]
10011e88:	7260      	strb	r0, [r4, #9]
10011e8a:	2206      	movs	r2, #6
10011e8c:	480b      	ldr	r0, [pc, #44]	; (10011ebc <gapm_resolv_addr_cmd_handler+0x5c>)
10011e8e:	7223      	strb	r3, [r4, #8]
10011e90:	47b0      	blx	r6
10011e92:	1c39      	adds	r1, r7, #0
10011e94:	1c2a      	adds	r2, r5, #0
10011e96:	480a      	ldr	r0, [pc, #40]	; (10011ec0 <gapm_resolv_addr_cmd_handler+0x60>)
10011e98:	47b0      	blx	r6
10011e9a:	1c29      	adds	r1, r5, #0
10011e9c:	3110      	adds	r1, #16
10011e9e:	1c0b      	adds	r3, r1, #0
10011ea0:	3b08      	subs	r3, #8
10011ea2:	71a3      	strb	r3, [r4, #6]
10011ea4:	121b      	asrs	r3, r3, #8
10011ea6:	71e3      	strb	r3, [r4, #7]
10011ea8:	1c20      	adds	r0, r4, #0
10011eaa:	4b06      	ldr	r3, [pc, #24]	; (10011ec4 <gapm_resolv_addr_cmd_handler+0x64>)
10011eac:	4798      	blx	r3
10011eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011eb0:	100199c0 	.word	0x100199c0
10011eb4:	10019650 	.word	0x10019650
10011eb8:	100143b7 	.word	0x100143b7
10011ebc:	100199ca 	.word	0x100199ca
10011ec0:	100199d0 	.word	0x100199d0
10011ec4:	10010c9d 	.word	0x10010c9d

10011ec8 <gapm_addr_solved_ind_handler>:
10011ec8:	b570      	push	{r4, r5, r6, lr}
10011eca:	1c04      	adds	r4, r0, #0
10011ecc:	1c08      	adds	r0, r1, #0
10011ece:	1c0d      	adds	r5, r1, #0
10011ed0:	4e05      	ldr	r6, [pc, #20]	; (10011ee8 <gapm_addr_solved_ind_handler+0x20>)
10011ed2:	1c21      	adds	r1, r4, #0
10011ed4:	2206      	movs	r2, #6
10011ed6:	3011      	adds	r0, #17
10011ed8:	47b0      	blx	r6
10011eda:	1c68      	adds	r0, r5, #1
10011edc:	1da1      	adds	r1, r4, #6
10011ede:	2210      	movs	r2, #16
10011ee0:	47b0      	blx	r6
10011ee2:	2300      	movs	r3, #0
10011ee4:	702b      	strb	r3, [r5, #0]
10011ee6:	bd70      	pop	{r4, r5, r6, pc}
10011ee8:	100143b7 	.word	0x100143b7

10011eec <gapm_profile_added_ind_handler>:
10011eec:	b510      	push	{r4, lr}
10011eee:	7843      	ldrb	r3, [r0, #1]
10011ef0:	7902      	ldrb	r2, [r0, #4]
10011ef2:	7944      	ldrb	r4, [r0, #5]
10011ef4:	7800      	ldrb	r0, [r0, #0]
10011ef6:	021b      	lsls	r3, r3, #8
10011ef8:	4303      	orrs	r3, r0
10011efa:	2b1b      	cmp	r3, #27
10011efc:	d104      	bne.n	10011f08 <gapm_profile_added_ind_handler+0x1c>
10011efe:	2300      	movs	r3, #0
10011f00:	700b      	strb	r3, [r1, #0]
10011f02:	0223      	lsls	r3, r4, #8
10011f04:	4313      	orrs	r3, r2
10011f06:	804b      	strh	r3, [r1, #2]
10011f08:	203b      	movs	r0, #59	; 0x3b
10011f0a:	bd10      	pop	{r4, pc}

10011f0c <gattc_read_req_ind_parser>:
10011f0c:	7843      	ldrb	r3, [r0, #1]
10011f0e:	7802      	ldrb	r2, [r0, #0]
10011f10:	021b      	lsls	r3, r3, #8
10011f12:	4313      	orrs	r3, r2
10011f14:	804b      	strh	r3, [r1, #2]
10011f16:	4770      	bx	lr

10011f18 <gattc_write_req_ind_parser>:
10011f18:	b508      	push	{r3, lr}
10011f1a:	1c13      	adds	r3, r2, #0
10011f1c:	0a00      	lsrs	r0, r0, #8
10011f1e:	8010      	strh	r0, [r2, #0]
10011f20:	784a      	ldrb	r2, [r1, #1]
10011f22:	7808      	ldrb	r0, [r1, #0]
10011f24:	0212      	lsls	r2, r2, #8
10011f26:	4302      	orrs	r2, r0
10011f28:	805a      	strh	r2, [r3, #2]
10011f2a:	78ca      	ldrb	r2, [r1, #3]
10011f2c:	7888      	ldrb	r0, [r1, #2]
10011f2e:	0212      	lsls	r2, r2, #8
10011f30:	4302      	orrs	r2, r0
10011f32:	809a      	strh	r2, [r3, #4]
10011f34:	794a      	ldrb	r2, [r1, #5]
10011f36:	7908      	ldrb	r0, [r1, #4]
10011f38:	0212      	lsls	r2, r2, #8
10011f3a:	4302      	orrs	r2, r0
10011f3c:	80da      	strh	r2, [r3, #6]
10011f3e:	3308      	adds	r3, #8
10011f40:	1c18      	adds	r0, r3, #0
10011f42:	3106      	adds	r1, #6
10011f44:	4b01      	ldr	r3, [pc, #4]	; (10011f4c <gattc_write_req_ind_parser+0x34>)
10011f46:	4798      	blx	r3
10011f48:	bd08      	pop	{r3, pc}
10011f4a:	46c0      	nop			; (mov r8, r8)
10011f4c:	100143b7 	.word	0x100143b7

10011f50 <gattc_att_info_req_parser>:
10011f50:	7843      	ldrb	r3, [r0, #1]
10011f52:	7802      	ldrb	r2, [r0, #0]
10011f54:	021b      	lsls	r3, r3, #8
10011f56:	4313      	orrs	r3, r2
10011f58:	800b      	strh	r3, [r1, #0]
10011f5a:	4770      	bx	lr

10011f5c <gattc_read_cfm>:
10011f5c:	b538      	push	{r3, r4, r5, lr}
10011f5e:	2514      	movs	r5, #20
10011f60:	1c1c      	adds	r4, r3, #0
10011f62:	4b14      	ldr	r3, [pc, #80]	; (10011fb4 <gattc_read_cfm+0x58>)
10011f64:	70d9      	strb	r1, [r3, #3]
10011f66:	4914      	ldr	r1, [pc, #80]	; (10011fb8 <gattc_read_cfm+0x5c>)
10011f68:	701d      	strb	r5, [r3, #0]
10011f6a:	3d08      	subs	r5, #8
10011f6c:	705d      	strb	r5, [r3, #1]
10011f6e:	709d      	strb	r5, [r3, #2]
10011f70:	880d      	ldrh	r5, [r1, #0]
10011f72:	8809      	ldrh	r1, [r1, #0]
10011f74:	7218      	strb	r0, [r3, #8]
10011f76:	0a09      	lsrs	r1, r1, #8
10011f78:	7159      	strb	r1, [r3, #5]
10011f7a:	0a00      	lsrs	r0, r0, #8
10011f7c:	0a21      	lsrs	r1, r4, #8
10011f7e:	711d      	strb	r5, [r3, #4]
10011f80:	7258      	strb	r0, [r3, #9]
10011f82:	729c      	strb	r4, [r3, #10]
10011f84:	72d9      	strb	r1, [r3, #11]
10011f86:	731a      	strb	r2, [r3, #12]
10011f88:	1c1d      	adds	r5, r3, #0
10011f8a:	2c00      	cmp	r4, #0
10011f8c:	d007      	beq.n	10011f9e <gattc_read_cfm+0x42>
10011f8e:	9904      	ldr	r1, [sp, #16]
10011f90:	1c22      	adds	r2, r4, #0
10011f92:	480a      	ldr	r0, [pc, #40]	; (10011fbc <gattc_read_cfm+0x60>)
10011f94:	4b0a      	ldr	r3, [pc, #40]	; (10011fc0 <gattc_read_cfm+0x64>)
10011f96:	340d      	adds	r4, #13
10011f98:	4798      	blx	r3
10011f9a:	b2a1      	uxth	r1, r4
10011f9c:	e001      	b.n	10011fa2 <gattc_read_cfm+0x46>
10011f9e:	210e      	movs	r1, #14
10011fa0:	735c      	strb	r4, [r3, #13]
10011fa2:	1c0b      	adds	r3, r1, #0
10011fa4:	3b08      	subs	r3, #8
10011fa6:	71ab      	strb	r3, [r5, #6]
10011fa8:	121b      	asrs	r3, r3, #8
10011faa:	71eb      	strb	r3, [r5, #7]
10011fac:	1c28      	adds	r0, r5, #0
10011fae:	4b05      	ldr	r3, [pc, #20]	; (10011fc4 <gattc_read_cfm+0x68>)
10011fb0:	4798      	blx	r3
10011fb2:	bd38      	pop	{r3, r4, r5, pc}
10011fb4:	100199c0 	.word	0x100199c0
10011fb8:	10019650 	.word	0x10019650
10011fbc:	100199cd 	.word	0x100199cd
10011fc0:	100143b7 	.word	0x100143b7
10011fc4:	10010c9d 	.word	0x10010c9d

10011fc8 <gattc_write_cfm>:
10011fc8:	4b0d      	ldr	r3, [pc, #52]	; (10012000 <gattc_write_cfm+0x38>)
10011fca:	b510      	push	{r4, lr}
10011fcc:	729a      	strb	r2, [r3, #10]
10011fce:	2203      	movs	r2, #3
10011fd0:	2416      	movs	r4, #22
10011fd2:	719a      	strb	r2, [r3, #6]
10011fd4:	2200      	movs	r2, #0
10011fd6:	70d9      	strb	r1, [r3, #3]
10011fd8:	490a      	ldr	r1, [pc, #40]	; (10012004 <gattc_write_cfm+0x3c>)
10011fda:	701c      	strb	r4, [r3, #0]
10011fdc:	3c0a      	subs	r4, #10
10011fde:	705c      	strb	r4, [r3, #1]
10011fe0:	709c      	strb	r4, [r3, #2]
10011fe2:	880c      	ldrh	r4, [r1, #0]
10011fe4:	8809      	ldrh	r1, [r1, #0]
10011fe6:	7218      	strb	r0, [r3, #8]
10011fe8:	0a09      	lsrs	r1, r1, #8
10011fea:	0a00      	lsrs	r0, r0, #8
10011fec:	711c      	strb	r4, [r3, #4]
10011fee:	7159      	strb	r1, [r3, #5]
10011ff0:	7258      	strb	r0, [r3, #9]
10011ff2:	71da      	strb	r2, [r3, #7]
10011ff4:	1c18      	adds	r0, r3, #0
10011ff6:	210b      	movs	r1, #11
10011ff8:	4b03      	ldr	r3, [pc, #12]	; (10012008 <gattc_write_cfm+0x40>)
10011ffa:	4798      	blx	r3
10011ffc:	bd10      	pop	{r4, pc}
10011ffe:	46c0      	nop			; (mov r8, r8)
10012000:	100199c0 	.word	0x100199c0
10012004:	10019650 	.word	0x10019650
10012008:	10010c9d 	.word	0x10010c9d

1001200c <gattc_att_info_cfm>:
1001200c:	b538      	push	{r3, r4, r5, lr}
1001200e:	4c0e      	ldr	r4, [pc, #56]	; (10012048 <gattc_att_info_cfm+0x3c>)
10012010:	2518      	movs	r5, #24
10012012:	7323      	strb	r3, [r4, #12]
10012014:	2305      	movs	r3, #5
10012016:	71a3      	strb	r3, [r4, #6]
10012018:	2300      	movs	r3, #0
1001201a:	70e1      	strb	r1, [r4, #3]
1001201c:	490b      	ldr	r1, [pc, #44]	; (1001204c <gattc_att_info_cfm+0x40>)
1001201e:	7025      	strb	r5, [r4, #0]
10012020:	3d0c      	subs	r5, #12
10012022:	7065      	strb	r5, [r4, #1]
10012024:	70a5      	strb	r5, [r4, #2]
10012026:	880d      	ldrh	r5, [r1, #0]
10012028:	8809      	ldrh	r1, [r1, #0]
1001202a:	7220      	strb	r0, [r4, #8]
1001202c:	0a09      	lsrs	r1, r1, #8
1001202e:	0a00      	lsrs	r0, r0, #8
10012030:	7161      	strb	r1, [r4, #5]
10012032:	7260      	strb	r0, [r4, #9]
10012034:	72a2      	strb	r2, [r4, #10]
10012036:	71e3      	strb	r3, [r4, #7]
10012038:	0a12      	lsrs	r2, r2, #8
1001203a:	1c20      	adds	r0, r4, #0
1001203c:	210d      	movs	r1, #13
1001203e:	4b04      	ldr	r3, [pc, #16]	; (10012050 <gattc_att_info_cfm+0x44>)
10012040:	7125      	strb	r5, [r4, #4]
10012042:	72e2      	strb	r2, [r4, #11]
10012044:	4798      	blx	r3
10012046:	bd38      	pop	{r3, r4, r5, pc}
10012048:	100199c0 	.word	0x100199c0
1001204c:	10019650 	.word	0x10019650
10012050:	10010c9d 	.word	0x10010c9d

10012054 <gattc_send_evt_cmd_handler>:
10012054:	b570      	push	{r4, r5, r6, lr}
10012056:	2610      	movs	r6, #16
10012058:	ac04      	add	r4, sp, #16
1001205a:	8825      	ldrh	r5, [r4, #0]
1001205c:	4c15      	ldr	r4, [pc, #84]	; (100120b4 <gattc_send_evt_cmd_handler+0x60>)
1001205e:	70e2      	strb	r2, [r4, #3]
10012060:	4a15      	ldr	r2, [pc, #84]	; (100120b8 <gattc_send_evt_cmd_handler+0x64>)
10012062:	7026      	strb	r6, [r4, #0]
10012064:	3e04      	subs	r6, #4
10012066:	7066      	strb	r6, [r4, #1]
10012068:	70a6      	strb	r6, [r4, #2]
1001206a:	8816      	ldrh	r6, [r2, #0]
1001206c:	8812      	ldrh	r2, [r2, #0]
1001206e:	7220      	strb	r0, [r4, #8]
10012070:	0a12      	lsrs	r2, r2, #8
10012072:	7162      	strb	r2, [r4, #5]
10012074:	4a11      	ldr	r2, [pc, #68]	; (100120bc <gattc_send_evt_cmd_handler+0x68>)
10012076:	7321      	strb	r1, [r4, #12]
10012078:	8812      	ldrh	r2, [r2, #0]
1001207a:	73a5      	strb	r5, [r4, #14]
1001207c:	3201      	adds	r2, #1
1001207e:	7262      	strb	r2, [r4, #9]
10012080:	1212      	asrs	r2, r2, #8
10012082:	72a2      	strb	r2, [r4, #10]
10012084:	2200      	movs	r2, #0
10012086:	72e2      	strb	r2, [r4, #11]
10012088:	0a0a      	lsrs	r2, r1, #8
1001208a:	7362      	strb	r2, [r4, #13]
1001208c:	0a2a      	lsrs	r2, r5, #8
1001208e:	73e2      	strb	r2, [r4, #15]
10012090:	1c19      	adds	r1, r3, #0
10012092:	1c2a      	adds	r2, r5, #0
10012094:	4b0a      	ldr	r3, [pc, #40]	; (100120c0 <gattc_send_evt_cmd_handler+0x6c>)
10012096:	3510      	adds	r5, #16
10012098:	480a      	ldr	r0, [pc, #40]	; (100120c4 <gattc_send_evt_cmd_handler+0x70>)
1001209a:	7126      	strb	r6, [r4, #4]
1001209c:	4798      	blx	r3
1001209e:	b2a9      	uxth	r1, r5
100120a0:	1c0b      	adds	r3, r1, #0
100120a2:	3b08      	subs	r3, #8
100120a4:	71a3      	strb	r3, [r4, #6]
100120a6:	121b      	asrs	r3, r3, #8
100120a8:	71e3      	strb	r3, [r4, #7]
100120aa:	1c20      	adds	r0, r4, #0
100120ac:	4b06      	ldr	r3, [pc, #24]	; (100120c8 <gattc_send_evt_cmd_handler+0x74>)
100120ae:	4798      	blx	r3
100120b0:	bd70      	pop	{r4, r5, r6, pc}
100120b2:	46c0      	nop			; (mov r8, r8)
100120b4:	100199c0 	.word	0x100199c0
100120b8:	10019650 	.word	0x10019650
100120bc:	100187e0 	.word	0x100187e0
100120c0:	100143b7 	.word	0x100143b7
100120c4:	100199d0 	.word	0x100199d0
100120c8:	10010c9d 	.word	0x10010c9d

100120cc <gattc_event_cfm_handler>:
100120cc:	220e      	movs	r2, #14
100120ce:	b508      	push	{r3, lr}
100120d0:	4b0b      	ldr	r3, [pc, #44]	; (10012100 <gattc_event_cfm_handler+0x34>)
100120d2:	701a      	strb	r2, [r3, #0]
100120d4:	3a02      	subs	r2, #2
100120d6:	705a      	strb	r2, [r3, #1]
100120d8:	709a      	strb	r2, [r3, #2]
100120da:	4a0a      	ldr	r2, [pc, #40]	; (10012104 <gattc_event_cfm_handler+0x38>)
100120dc:	70d8      	strb	r0, [r3, #3]
100120de:	8810      	ldrh	r0, [r2, #0]
100120e0:	8812      	ldrh	r2, [r2, #0]
100120e2:	7219      	strb	r1, [r3, #8]
100120e4:	0a12      	lsrs	r2, r2, #8
100120e6:	715a      	strb	r2, [r3, #5]
100120e8:	2202      	movs	r2, #2
100120ea:	719a      	strb	r2, [r3, #6]
100120ec:	2200      	movs	r2, #0
100120ee:	0a09      	lsrs	r1, r1, #8
100120f0:	7118      	strb	r0, [r3, #4]
100120f2:	7259      	strb	r1, [r3, #9]
100120f4:	71da      	strb	r2, [r3, #7]
100120f6:	1c18      	adds	r0, r3, #0
100120f8:	210a      	movs	r1, #10
100120fa:	4b03      	ldr	r3, [pc, #12]	; (10012108 <gattc_event_cfm_handler+0x3c>)
100120fc:	4798      	blx	r3
100120fe:	bd08      	pop	{r3, pc}
10012100:	100199c0 	.word	0x100199c0
10012104:	10019650 	.word	0x10019650
10012108:	10010c9d 	.word	0x10010c9d

1001210c <gattc_disc_svc_ind_parser>:
1001210c:	b570      	push	{r4, r5, r6, lr}
1001210e:	1c15      	adds	r5, r2, #0
10012110:	0a00      	lsrs	r0, r0, #8
10012112:	8010      	strh	r0, [r2, #0]
10012114:	784b      	ldrb	r3, [r1, #1]
10012116:	780a      	ldrb	r2, [r1, #0]
10012118:	021b      	lsls	r3, r3, #8
1001211a:	4313      	orrs	r3, r2
1001211c:	806b      	strh	r3, [r5, #2]
1001211e:	78cb      	ldrb	r3, [r1, #3]
10012120:	788a      	ldrb	r2, [r1, #2]
10012122:	021b      	lsls	r3, r3, #8
10012124:	4313      	orrs	r3, r2
10012126:	80ab      	strh	r3, [r5, #4]
10012128:	790e      	ldrb	r6, [r1, #4]
1001212a:	4b05      	ldr	r3, [pc, #20]	; (10012140 <gattc_disc_svc_ind_parser+0x34>)
1001212c:	1c30      	adds	r0, r6, #0
1001212e:	1c0c      	adds	r4, r1, #0
10012130:	4798      	blx	r3
10012132:	1c32      	adds	r2, r6, #0
10012134:	71a8      	strb	r0, [r5, #6]
10012136:	1d61      	adds	r1, r4, #5
10012138:	1de8      	adds	r0, r5, #7
1001213a:	4b02      	ldr	r3, [pc, #8]	; (10012144 <gattc_disc_svc_ind_parser+0x38>)
1001213c:	4798      	blx	r3
1001213e:	bd70      	pop	{r4, r5, r6, pc}
10012140:	1000ffdd 	.word	0x1000ffdd
10012144:	100143b7 	.word	0x100143b7

10012148 <gattc_disc_svc_incl_ind_parser>:
10012148:	b570      	push	{r4, r5, r6, lr}
1001214a:	1c15      	adds	r5, r2, #0
1001214c:	0a00      	lsrs	r0, r0, #8
1001214e:	8010      	strh	r0, [r2, #0]
10012150:	784b      	ldrb	r3, [r1, #1]
10012152:	780a      	ldrb	r2, [r1, #0]
10012154:	021b      	lsls	r3, r3, #8
10012156:	4313      	orrs	r3, r2
10012158:	806b      	strh	r3, [r5, #2]
1001215a:	78cb      	ldrb	r3, [r1, #3]
1001215c:	788a      	ldrb	r2, [r1, #2]
1001215e:	021b      	lsls	r3, r3, #8
10012160:	4313      	orrs	r3, r2
10012162:	80ab      	strh	r3, [r5, #4]
10012164:	794b      	ldrb	r3, [r1, #5]
10012166:	790a      	ldrb	r2, [r1, #4]
10012168:	021b      	lsls	r3, r3, #8
1001216a:	4313      	orrs	r3, r2
1001216c:	80eb      	strh	r3, [r5, #6]
1001216e:	798e      	ldrb	r6, [r1, #6]
10012170:	4b05      	ldr	r3, [pc, #20]	; (10012188 <gattc_disc_svc_incl_ind_parser+0x40>)
10012172:	1c30      	adds	r0, r6, #0
10012174:	1c0c      	adds	r4, r1, #0
10012176:	4798      	blx	r3
10012178:	7228      	strb	r0, [r5, #8]
1001217a:	1c28      	adds	r0, r5, #0
1001217c:	1c32      	adds	r2, r6, #0
1001217e:	1de1      	adds	r1, r4, #7
10012180:	4b02      	ldr	r3, [pc, #8]	; (1001218c <gattc_disc_svc_incl_ind_parser+0x44>)
10012182:	3009      	adds	r0, #9
10012184:	4798      	blx	r3
10012186:	bd70      	pop	{r4, r5, r6, pc}
10012188:	1000ffdd 	.word	0x1000ffdd
1001218c:	100143b7 	.word	0x100143b7

10012190 <gattc_disc_char_ind_parser>:
10012190:	b570      	push	{r4, r5, r6, lr}
10012192:	1c15      	adds	r5, r2, #0
10012194:	0a00      	lsrs	r0, r0, #8
10012196:	8010      	strh	r0, [r2, #0]
10012198:	784b      	ldrb	r3, [r1, #1]
1001219a:	780a      	ldrb	r2, [r1, #0]
1001219c:	021b      	lsls	r3, r3, #8
1001219e:	4313      	orrs	r3, r2
100121a0:	806b      	strh	r3, [r5, #2]
100121a2:	78cb      	ldrb	r3, [r1, #3]
100121a4:	788a      	ldrb	r2, [r1, #2]
100121a6:	021b      	lsls	r3, r3, #8
100121a8:	4313      	orrs	r3, r2
100121aa:	80ab      	strh	r3, [r5, #4]
100121ac:	790b      	ldrb	r3, [r1, #4]
100121ae:	1c0c      	adds	r4, r1, #0
100121b0:	71ab      	strb	r3, [r5, #6]
100121b2:	794e      	ldrb	r6, [r1, #5]
100121b4:	4b05      	ldr	r3, [pc, #20]	; (100121cc <gattc_disc_char_ind_parser+0x3c>)
100121b6:	1c30      	adds	r0, r6, #0
100121b8:	4798      	blx	r3
100121ba:	71e8      	strb	r0, [r5, #7]
100121bc:	1c28      	adds	r0, r5, #0
100121be:	1c32      	adds	r2, r6, #0
100121c0:	1da1      	adds	r1, r4, #6
100121c2:	4b03      	ldr	r3, [pc, #12]	; (100121d0 <gattc_disc_char_ind_parser+0x40>)
100121c4:	3008      	adds	r0, #8
100121c6:	4798      	blx	r3
100121c8:	bd70      	pop	{r4, r5, r6, pc}
100121ca:	46c0      	nop			; (mov r8, r8)
100121cc:	1000ffdd 	.word	0x1000ffdd
100121d0:	100143b7 	.word	0x100143b7

100121d4 <gattc_disc_char_desc_ind_parser>:
100121d4:	b570      	push	{r4, r5, r6, lr}
100121d6:	1c15      	adds	r5, r2, #0
100121d8:	0a00      	lsrs	r0, r0, #8
100121da:	8010      	strh	r0, [r2, #0]
100121dc:	784b      	ldrb	r3, [r1, #1]
100121de:	780a      	ldrb	r2, [r1, #0]
100121e0:	021b      	lsls	r3, r3, #8
100121e2:	4313      	orrs	r3, r2
100121e4:	806b      	strh	r3, [r5, #2]
100121e6:	788e      	ldrb	r6, [r1, #2]
100121e8:	4b05      	ldr	r3, [pc, #20]	; (10012200 <gattc_disc_char_desc_ind_parser+0x2c>)
100121ea:	1c30      	adds	r0, r6, #0
100121ec:	1c0c      	adds	r4, r1, #0
100121ee:	4798      	blx	r3
100121f0:	1c32      	adds	r2, r6, #0
100121f2:	7128      	strb	r0, [r5, #4]
100121f4:	1ce1      	adds	r1, r4, #3
100121f6:	1d68      	adds	r0, r5, #5
100121f8:	4b02      	ldr	r3, [pc, #8]	; (10012204 <gattc_disc_char_desc_ind_parser+0x30>)
100121fa:	4798      	blx	r3
100121fc:	bd70      	pop	{r4, r5, r6, pc}
100121fe:	46c0      	nop			; (mov r8, r8)
10012200:	1000ffdd 	.word	0x1000ffdd
10012204:	100143b7 	.word	0x100143b7

10012208 <gattc_event_ind_and_notification_parser>:
10012208:	b510      	push	{r4, lr}
1001220a:	780c      	ldrb	r4, [r1, #0]
1001220c:	1c13      	adds	r3, r2, #0
1001220e:	2c12      	cmp	r4, #18
10012210:	d10e      	bne.n	10012230 <gattc_event_ind_and_notification_parser+0x28>
10012212:	0a00      	lsrs	r0, r0, #8
10012214:	8010      	strh	r0, [r2, #0]
10012216:	788a      	ldrb	r2, [r1, #2]
10012218:	709a      	strb	r2, [r3, #2]
1001221a:	7948      	ldrb	r0, [r1, #5]
1001221c:	790c      	ldrb	r4, [r1, #4]
1001221e:	0200      	lsls	r0, r0, #8
10012220:	4320      	orrs	r0, r4
10012222:	8098      	strh	r0, [r3, #4]
10012224:	3106      	adds	r1, #6
10012226:	1d98      	adds	r0, r3, #6
10012228:	4b0b      	ldr	r3, [pc, #44]	; (10012258 <gattc_event_ind_and_notification_parser+0x50>)
1001222a:	4798      	blx	r3
1001222c:	221b      	movs	r2, #27
1001222e:	e010      	b.n	10012252 <gattc_event_ind_and_notification_parser+0x4a>
10012230:	2200      	movs	r2, #0
10012232:	2c13      	cmp	r4, #19
10012234:	d10d      	bne.n	10012252 <gattc_event_ind_and_notification_parser+0x4a>
10012236:	0a00      	lsrs	r0, r0, #8
10012238:	8018      	strh	r0, [r3, #0]
1001223a:	788a      	ldrb	r2, [r1, #2]
1001223c:	709a      	strb	r2, [r3, #2]
1001223e:	7908      	ldrb	r0, [r1, #4]
10012240:	78cc      	ldrb	r4, [r1, #3]
10012242:	0200      	lsls	r0, r0, #8
10012244:	4320      	orrs	r0, r4
10012246:	8098      	strh	r0, [r3, #4]
10012248:	3106      	adds	r1, #6
1001224a:	1d98      	adds	r0, r3, #6
1001224c:	4b02      	ldr	r3, [pc, #8]	; (10012258 <gattc_event_ind_and_notification_parser+0x50>)
1001224e:	4798      	blx	r3
10012250:	221c      	movs	r2, #28
10012252:	1c10      	adds	r0, r2, #0
10012254:	bd10      	pop	{r4, pc}
10012256:	46c0      	nop			; (mov r8, r8)
10012258:	100143b7 	.word	0x100143b7

1001225c <gattc_complete_evt_handler>:
1001225c:	b500      	push	{lr}
1001225e:	0a00      	lsrs	r0, r0, #8
10012260:	8010      	strh	r0, [r2, #0]
10012262:	7808      	ldrb	r0, [r1, #0]
10012264:	7090      	strb	r0, [r2, #2]
10012266:	784b      	ldrb	r3, [r1, #1]
10012268:	3801      	subs	r0, #1
1001226a:	70d3      	strb	r3, [r2, #3]
1001226c:	2813      	cmp	r0, #19
1001226e:	d82c      	bhi.n	100122ca <gattc_complete_evt_handler+0x6e>
10012270:	f000 f9dc 	bl	1001262c <__gnu_thumb1_case_uqi>
10012274:	0a0a0a0c 	.word	0x0a0a0a0c
10012278:	210a0a0a 	.word	0x210a0a0a
1001227c:	111f2121 	.word	0x111f2121
10012280:	2b111111 	.word	0x2b111111
10012284:	2919132b 	.word	0x2919132b
10012288:	2017      	movs	r0, #23
1001228a:	e01f      	b.n	100122cc <gattc_complete_evt_handler+0x70>
1001228c:	2024      	movs	r0, #36	; 0x24
1001228e:	2b00      	cmp	r3, #0
10012290:	d11c      	bne.n	100122cc <gattc_complete_evt_handler+0x70>
10012292:	3017      	adds	r0, #23
10012294:	e01a      	b.n	100122cc <gattc_complete_evt_handler+0x70>
10012296:	2025      	movs	r0, #37	; 0x25
10012298:	e018      	b.n	100122cc <gattc_complete_evt_handler+0x70>
1001229a:	4a0d      	ldr	r2, [pc, #52]	; (100122d0 <gattc_complete_evt_handler+0x74>)
1001229c:	201d      	movs	r0, #29
1001229e:	6813      	ldr	r3, [r2, #0]
100122a0:	3b01      	subs	r3, #1
100122a2:	6013      	str	r3, [r2, #0]
100122a4:	e012      	b.n	100122cc <gattc_complete_evt_handler+0x70>
100122a6:	4a0a      	ldr	r2, [pc, #40]	; (100122d0 <gattc_complete_evt_handler+0x74>)
100122a8:	201e      	movs	r0, #30
100122aa:	6813      	ldr	r3, [r2, #0]
100122ac:	3b01      	subs	r3, #1
100122ae:	6013      	str	r3, [r2, #0]
100122b0:	e00c      	b.n	100122cc <gattc_complete_evt_handler+0x70>
100122b2:	2019      	movs	r0, #25
100122b4:	e00a      	b.n	100122cc <gattc_complete_evt_handler+0x70>
100122b6:	203b      	movs	r0, #59	; 0x3b
100122b8:	2b00      	cmp	r3, #0
100122ba:	d007      	beq.n	100122cc <gattc_complete_evt_handler+0x70>
100122bc:	2182      	movs	r1, #130	; 0x82
100122be:	0089      	lsls	r1, r1, #2
100122c0:	5453      	strb	r3, [r2, r1]
100122c2:	3823      	subs	r0, #35	; 0x23
100122c4:	e002      	b.n	100122cc <gattc_complete_evt_handler+0x70>
100122c6:	2021      	movs	r0, #33	; 0x21
100122c8:	e000      	b.n	100122cc <gattc_complete_evt_handler+0x70>
100122ca:	2000      	movs	r0, #0
100122cc:	bd00      	pop	{pc}
100122ce:	46c0      	nop			; (mov r8, r8)
100122d0:	100187e4 	.word	0x100187e4

100122d4 <gattc_event_mtu_changed_ind_parser>:
100122d4:	0a00      	lsrs	r0, r0, #8
100122d6:	8010      	strh	r0, [r2, #0]
100122d8:	784b      	ldrb	r3, [r1, #1]
100122da:	7809      	ldrb	r1, [r1, #0]
100122dc:	021b      	lsls	r3, r3, #8
100122de:	430b      	orrs	r3, r1
100122e0:	8053      	strh	r3, [r2, #2]
100122e2:	4770      	bx	lr

100122e4 <gattc_read_ind_parser>:
100122e4:	0a00      	lsrs	r0, r0, #8
100122e6:	b508      	push	{r3, lr}
100122e8:	8010      	strh	r0, [r2, #0]
100122ea:	1c13      	adds	r3, r2, #0
100122ec:	2282      	movs	r2, #130	; 0x82
100122ee:	2000      	movs	r0, #0
100122f0:	0092      	lsls	r2, r2, #2
100122f2:	5498      	strb	r0, [r3, r2]
100122f4:	784a      	ldrb	r2, [r1, #1]
100122f6:	7808      	ldrb	r0, [r1, #0]
100122f8:	0212      	lsls	r2, r2, #8
100122fa:	4302      	orrs	r2, r0
100122fc:	805a      	strh	r2, [r3, #2]
100122fe:	78ca      	ldrb	r2, [r1, #3]
10012300:	7888      	ldrb	r0, [r1, #2]
10012302:	0212      	lsls	r2, r2, #8
10012304:	4302      	orrs	r2, r0
10012306:	80da      	strh	r2, [r3, #6]
10012308:	794a      	ldrb	r2, [r1, #5]
1001230a:	7908      	ldrb	r0, [r1, #4]
1001230c:	0212      	lsls	r2, r2, #8
1001230e:	4302      	orrs	r2, r0
10012310:	809a      	strh	r2, [r3, #4]
10012312:	3308      	adds	r3, #8
10012314:	1c18      	adds	r0, r3, #0
10012316:	3106      	adds	r1, #6
10012318:	4b01      	ldr	r3, [pc, #4]	; (10012320 <gattc_read_ind_parser+0x3c>)
1001231a:	4798      	blx	r3
1001231c:	bd08      	pop	{r3, pc}
1001231e:	46c0      	nop			; (mov r8, r8)
10012320:	100143b7 	.word	0x100143b7

10012324 <gattc_svc_changed_cfg_ind_parser>:
10012324:	0a00      	lsrs	r0, r0, #8
10012326:	8010      	strh	r0, [r2, #0]
10012328:	784b      	ldrb	r3, [r1, #1]
1001232a:	7809      	ldrb	r1, [r1, #0]
1001232c:	021b      	lsls	r3, r3, #8
1001232e:	430b      	orrs	r3, r1
10012330:	8053      	strh	r3, [r2, #2]
10012332:	4770      	bx	lr

10012334 <init_gattc_task_module>:
10012334:	2300      	movs	r3, #0
10012336:	4a02      	ldr	r2, [pc, #8]	; (10012340 <init_gattc_task_module+0xc>)
10012338:	8013      	strh	r3, [r2, #0]
1001233a:	4a02      	ldr	r2, [pc, #8]	; (10012344 <init_gattc_task_module+0x10>)
1001233c:	8013      	strh	r3, [r2, #0]
1001233e:	4770      	bx	lr
10012340:	100187de 	.word	0x100187de
10012344:	100187e0 	.word	0x100187e0

10012348 <gattm_add_svc_req_handler>:
10012348:	2200      	movs	r2, #0
1001234a:	210b      	movs	r1, #11
1001234c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001234e:	1c04      	adds	r4, r0, #0
10012350:	7943      	ldrb	r3, [r0, #5]
10012352:	b085      	sub	sp, #20
10012354:	9301      	str	r3, [sp, #4]
10012356:	ab02      	add	r3, sp, #8
10012358:	71da      	strb	r2, [r3, #7]
1001235a:	4b37      	ldr	r3, [pc, #220]	; (10012438 <gattm_add_svc_req_handler+0xf0>)
1001235c:	7059      	strb	r1, [r3, #1]
1001235e:	7099      	strb	r1, [r3, #2]
10012360:	4936      	ldr	r1, [pc, #216]	; (1001243c <gattm_add_svc_req_handler+0xf4>)
10012362:	701a      	strb	r2, [r3, #0]
10012364:	8808      	ldrh	r0, [r1, #0]
10012366:	8809      	ldrh	r1, [r1, #0]
10012368:	70da      	strb	r2, [r3, #3]
1001236a:	0a09      	lsrs	r1, r1, #8
1001236c:	7118      	strb	r0, [r3, #4]
1001236e:	7159      	strb	r1, [r3, #5]
10012370:	8821      	ldrh	r1, [r4, #0]
10012372:	7219      	strb	r1, [r3, #8]
10012374:	8821      	ldrh	r1, [r4, #0]
10012376:	0a09      	lsrs	r1, r1, #8
10012378:	7259      	strb	r1, [r3, #9]
1001237a:	8861      	ldrh	r1, [r4, #2]
1001237c:	7299      	strb	r1, [r3, #10]
1001237e:	8861      	ldrh	r1, [r4, #2]
10012380:	0a09      	lsrs	r1, r1, #8
10012382:	72d9      	strb	r1, [r3, #11]
10012384:	7921      	ldrb	r1, [r4, #4]
10012386:	7319      	strb	r1, [r3, #12]
10012388:	4669      	mov	r1, sp
1001238a:	7909      	ldrb	r1, [r1, #4]
1001238c:	7359      	strb	r1, [r3, #13]
1001238e:	18a1      	adds	r1, r4, r2
10012390:	7988      	ldrb	r0, [r1, #6]
10012392:	1899      	adds	r1, r3, r2
10012394:	3201      	adds	r2, #1
10012396:	7388      	strb	r0, [r1, #14]
10012398:	2a10      	cmp	r2, #16
1001239a:	d1f8      	bne.n	1001238e <gattm_add_svc_req_handler+0x46>
1001239c:	1c27      	adds	r7, r4, #0
1001239e:	2300      	movs	r3, #0
100123a0:	251e      	movs	r5, #30
100123a2:	3716      	adds	r7, #22
100123a4:	9300      	str	r3, [sp, #0]
100123a6:	9b00      	ldr	r3, [sp, #0]
100123a8:	9a01      	ldr	r2, [sp, #4]
100123aa:	4e23      	ldr	r6, [pc, #140]	; (10012438 <gattm_add_svc_req_handler+0xf0>)
100123ac:	4293      	cmp	r3, r2
100123ae:	da21      	bge.n	100123f4 <gattm_add_svc_req_handler+0xac>
100123b0:	1c39      	adds	r1, r7, #0
100123b2:	1970      	adds	r0, r6, r5
100123b4:	2210      	movs	r2, #16
100123b6:	4b22      	ldr	r3, [pc, #136]	; (10012440 <gattm_add_svc_req_handler+0xf8>)
100123b8:	4798      	blx	r3
100123ba:	1c2b      	adds	r3, r5, #0
100123bc:	8a3a      	ldrh	r2, [r7, #16]
100123be:	3310      	adds	r3, #16
100123c0:	b29b      	uxth	r3, r3
100123c2:	54f2      	strb	r2, [r6, r3]
100123c4:	1c2b      	adds	r3, r5, #0
100123c6:	8a3a      	ldrh	r2, [r7, #16]
100123c8:	3311      	adds	r3, #17
100123ca:	b29b      	uxth	r3, r3
100123cc:	0a12      	lsrs	r2, r2, #8
100123ce:	54f2      	strb	r2, [r6, r3]
100123d0:	1c2a      	adds	r2, r5, #0
100123d2:	1c2b      	adds	r3, r5, #0
100123d4:	8a79      	ldrh	r1, [r7, #18]
100123d6:	3212      	adds	r2, #18
100123d8:	b292      	uxth	r2, r2
100123da:	54b1      	strb	r1, [r6, r2]
100123dc:	8a7a      	ldrh	r2, [r7, #18]
100123de:	3313      	adds	r3, #19
100123e0:	b29b      	uxth	r3, r3
100123e2:	0a12      	lsrs	r2, r2, #8
100123e4:	54f2      	strb	r2, [r6, r3]
100123e6:	9b00      	ldr	r3, [sp, #0]
100123e8:	3514      	adds	r5, #20
100123ea:	3301      	adds	r3, #1
100123ec:	b2ad      	uxth	r5, r5
100123ee:	9300      	str	r3, [sp, #0]
100123f0:	3714      	adds	r7, #20
100123f2:	e7d8      	b.n	100123a6 <gattm_add_svc_req_handler+0x5e>
100123f4:	2114      	movs	r1, #20
100123f6:	4d13      	ldr	r5, [pc, #76]	; (10012444 <gattm_add_svc_req_handler+0xfc>)
100123f8:	4b13      	ldr	r3, [pc, #76]	; (10012448 <gattm_add_svc_req_handler+0x100>)
100123fa:	4351      	muls	r1, r2
100123fc:	802b      	strh	r3, [r5, #0]
100123fe:	230b      	movs	r3, #11
10012400:	311e      	adds	r1, #30
10012402:	80ab      	strh	r3, [r5, #4]
10012404:	1c0b      	adds	r3, r1, #0
10012406:	3b08      	subs	r3, #8
10012408:	71b3      	strb	r3, [r6, #6]
1001240a:	121b      	asrs	r3, r3, #8
1001240c:	71f3      	strb	r3, [r6, #7]
1001240e:	1c30      	adds	r0, r6, #0
10012410:	4b0e      	ldr	r3, [pc, #56]	; (1001244c <gattm_add_svc_req_handler+0x104>)
10012412:	4798      	blx	r3
10012414:	ab02      	add	r3, sp, #8
10012416:	1dde      	adds	r6, r3, #7
10012418:	1c30      	adds	r0, r6, #0
1001241a:	4b0d      	ldr	r3, [pc, #52]	; (10012450 <gattm_add_svc_req_handler+0x108>)
1001241c:	4798      	blx	r3
1001241e:	7833      	ldrb	r3, [r6, #0]
10012420:	20e2      	movs	r0, #226	; 0xe2
10012422:	2b00      	cmp	r3, #0
10012424:	d106      	bne.n	10012434 <gattm_add_svc_req_handler+0xec>
10012426:	68aa      	ldr	r2, [r5, #8]
10012428:	7853      	ldrb	r3, [r2, #1]
1001242a:	7811      	ldrb	r1, [r2, #0]
1001242c:	021b      	lsls	r3, r3, #8
1001242e:	430b      	orrs	r3, r1
10012430:	8023      	strh	r3, [r4, #0]
10012432:	7890      	ldrb	r0, [r2, #2]
10012434:	b005      	add	sp, #20
10012436:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012438:	100199c0 	.word	0x100199c0
1001243c:	10019650 	.word	0x10019650
10012440:	100143b7 	.word	0x100143b7
10012444:	10019644 	.word	0x10019644
10012448:	00000b01 	.word	0x00000b01
1001244c:	10010c9d 	.word	0x10010c9d
10012450:	10010d01 	.word	0x10010d01

10012454 <gattm_add_attribute_req_handler>:
10012454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012456:	1c1f      	adds	r7, r3, #0
10012458:	4b16      	ldr	r3, [pc, #88]	; (100124b4 <gattm_add_attribute_req_handler+0x60>)
1001245a:	9100      	str	r1, [sp, #0]
1001245c:	9201      	str	r2, [sp, #4]
1001245e:	1c05      	adds	r5, r0, #0
10012460:	7946      	ldrb	r6, [r0, #5]
10012462:	6818      	ldr	r0, [r3, #0]
10012464:	2114      	movs	r1, #20
10012466:	4b14      	ldr	r3, [pc, #80]	; (100124b8 <gattm_add_attribute_req_handler+0x64>)
10012468:	382a      	subs	r0, #42	; 0x2a
1001246a:	4798      	blx	r3
1001246c:	2311      	movs	r3, #17
1001246e:	4286      	cmp	r6, r0
10012470:	d21e      	bcs.n	100124b0 <gattm_add_attribute_req_handler+0x5c>
10012472:	2414      	movs	r4, #20
10012474:	4366      	muls	r6, r4
10012476:	19a8      	adds	r0, r5, r6
10012478:	2100      	movs	r1, #0
1001247a:	2210      	movs	r2, #16
1001247c:	4b0f      	ldr	r3, [pc, #60]	; (100124bc <gattm_add_attribute_req_handler+0x68>)
1001247e:	3016      	adds	r0, #22
10012480:	4798      	blx	r3
10012482:	7968      	ldrb	r0, [r5, #5]
10012484:	1c3a      	adds	r2, r7, #0
10012486:	4360      	muls	r0, r4
10012488:	1828      	adds	r0, r5, r0
1001248a:	4b0d      	ldr	r3, [pc, #52]	; (100124c0 <gattm_add_attribute_req_handler+0x6c>)
1001248c:	3016      	adds	r0, #22
1001248e:	9908      	ldr	r1, [sp, #32]
10012490:	4798      	blx	r3
10012492:	466a      	mov	r2, sp
10012494:	796b      	ldrb	r3, [r5, #5]
10012496:	8812      	ldrh	r2, [r2, #0]
10012498:	435c      	muls	r4, r3
1001249a:	192c      	adds	r4, r5, r4
1001249c:	8522      	strh	r2, [r4, #40]	; 0x28
1001249e:	466a      	mov	r2, sp
100124a0:	8892      	ldrh	r2, [r2, #4]
100124a2:	84e2      	strh	r2, [r4, #38]	; 0x26
100124a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100124a6:	8013      	strh	r3, [r2, #0]
100124a8:	796b      	ldrb	r3, [r5, #5]
100124aa:	3301      	adds	r3, #1
100124ac:	716b      	strb	r3, [r5, #5]
100124ae:	2300      	movs	r3, #0
100124b0:	1c18      	adds	r0, r3, #0
100124b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100124b4:	10018754 	.word	0x10018754
100124b8:	10012641 	.word	0x10012641
100124bc:	100143c9 	.word	0x100143c9
100124c0:	100143b7 	.word	0x100143b7

100124c4 <gattm_att_set_value_req_handler>:
100124c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124c6:	466b      	mov	r3, sp
100124c8:	1dde      	adds	r6, r3, #7
100124ca:	2300      	movs	r3, #0
100124cc:	1c0d      	adds	r5, r1, #0
100124ce:	210c      	movs	r1, #12
100124d0:	270b      	movs	r7, #11
100124d2:	4c17      	ldr	r4, [pc, #92]	; (10012530 <gattm_att_set_value_req_handler+0x6c>)
100124d4:	7033      	strb	r3, [r6, #0]
100124d6:	70e3      	strb	r3, [r4, #3]
100124d8:	4b16      	ldr	r3, [pc, #88]	; (10012534 <gattm_att_set_value_req_handler+0x70>)
100124da:	7021      	strb	r1, [r4, #0]
100124dc:	8819      	ldrh	r1, [r3, #0]
100124de:	881b      	ldrh	r3, [r3, #0]
100124e0:	7220      	strb	r0, [r4, #8]
100124e2:	0a1b      	lsrs	r3, r3, #8
100124e4:	7163      	strb	r3, [r4, #5]
100124e6:	0a00      	lsrs	r0, r0, #8
100124e8:	0a2b      	lsrs	r3, r5, #8
100124ea:	7121      	strb	r1, [r4, #4]
100124ec:	7260      	strb	r0, [r4, #9]
100124ee:	1c11      	adds	r1, r2, #0
100124f0:	72a5      	strb	r5, [r4, #10]
100124f2:	1c2a      	adds	r2, r5, #0
100124f4:	72e3      	strb	r3, [r4, #11]
100124f6:	350c      	adds	r5, #12
100124f8:	4b0f      	ldr	r3, [pc, #60]	; (10012538 <gattm_att_set_value_req_handler+0x74>)
100124fa:	4810      	ldr	r0, [pc, #64]	; (1001253c <gattm_att_set_value_req_handler+0x78>)
100124fc:	7067      	strb	r7, [r4, #1]
100124fe:	70a7      	strb	r7, [r4, #2]
10012500:	4798      	blx	r3
10012502:	b2a9      	uxth	r1, r5
10012504:	4b0e      	ldr	r3, [pc, #56]	; (10012540 <gattm_att_set_value_req_handler+0x7c>)
10012506:	4d0f      	ldr	r5, [pc, #60]	; (10012544 <gattm_att_set_value_req_handler+0x80>)
10012508:	1c20      	adds	r0, r4, #0
1001250a:	802b      	strh	r3, [r5, #0]
1001250c:	1c0b      	adds	r3, r1, #0
1001250e:	3b08      	subs	r3, #8
10012510:	71a3      	strb	r3, [r4, #6]
10012512:	121b      	asrs	r3, r3, #8
10012514:	71e3      	strb	r3, [r4, #7]
10012516:	4b0c      	ldr	r3, [pc, #48]	; (10012548 <gattm_att_set_value_req_handler+0x84>)
10012518:	80af      	strh	r7, [r5, #4]
1001251a:	4798      	blx	r3
1001251c:	1c30      	adds	r0, r6, #0
1001251e:	4b0b      	ldr	r3, [pc, #44]	; (1001254c <gattm_att_set_value_req_handler+0x88>)
10012520:	4798      	blx	r3
10012522:	7833      	ldrb	r3, [r6, #0]
10012524:	20e2      	movs	r0, #226	; 0xe2
10012526:	2b00      	cmp	r3, #0
10012528:	d101      	bne.n	1001252e <gattm_att_set_value_req_handler+0x6a>
1001252a:	68ab      	ldr	r3, [r5, #8]
1001252c:	7898      	ldrb	r0, [r3, #2]
1001252e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012530:	100199c0 	.word	0x100199c0
10012534:	10019650 	.word	0x10019650
10012538:	100143b7 	.word	0x100143b7
1001253c:	100199cc 	.word	0x100199cc
10012540:	00000b0d 	.word	0x00000b0d
10012544:	10019644 	.word	0x10019644
10012548:	10010c9d 	.word	0x10010c9d
1001254c:	10010d01 	.word	0x10010d01

10012550 <gattm_att_get_value_req_handler>:
10012550:	b5f0      	push	{r4, r5, r6, r7, lr}
10012552:	b085      	sub	sp, #20
10012554:	9201      	str	r2, [sp, #4]
10012556:	220a      	movs	r2, #10
10012558:	1c04      	adds	r4, r0, #0
1001255a:	481d      	ldr	r0, [pc, #116]	; (100125d0 <gattm_att_get_value_req_handler+0x80>)
1001255c:	ab02      	add	r3, sp, #8
1001255e:	1dde      	adds	r6, r3, #7
10012560:	7002      	strb	r2, [r0, #0]
10012562:	2300      	movs	r3, #0
10012564:	220b      	movs	r2, #11
10012566:	4d1b      	ldr	r5, [pc, #108]	; (100125d4 <gattm_att_get_value_req_handler+0x84>)
10012568:	1c0f      	adds	r7, r1, #0
1001256a:	8829      	ldrh	r1, [r5, #0]
1001256c:	882d      	ldrh	r5, [r5, #0]
1001256e:	7101      	strb	r1, [r0, #4]
10012570:	0a2d      	lsrs	r5, r5, #8
10012572:	7145      	strb	r5, [r0, #5]
10012574:	0a25      	lsrs	r5, r4, #8
10012576:	7245      	strb	r5, [r0, #9]
10012578:	4917      	ldr	r1, [pc, #92]	; (100125d8 <gattm_att_get_value_req_handler+0x88>)
1001257a:	4d18      	ldr	r5, [pc, #96]	; (100125dc <gattm_att_get_value_req_handler+0x8c>)
1001257c:	7033      	strb	r3, [r6, #0]
1001257e:	7042      	strb	r2, [r0, #1]
10012580:	7082      	strb	r2, [r0, #2]
10012582:	70c3      	strb	r3, [r0, #3]
10012584:	8029      	strh	r1, [r5, #0]
10012586:	80aa      	strh	r2, [r5, #4]
10012588:	71c3      	strb	r3, [r0, #7]
1001258a:	3a09      	subs	r2, #9
1001258c:	210a      	movs	r1, #10
1001258e:	4b14      	ldr	r3, [pc, #80]	; (100125e0 <gattm_att_get_value_req_handler+0x90>)
10012590:	7182      	strb	r2, [r0, #6]
10012592:	7204      	strb	r4, [r0, #8]
10012594:	4798      	blx	r3
10012596:	1c30      	adds	r0, r6, #0
10012598:	4b12      	ldr	r3, [pc, #72]	; (100125e4 <gattm_att_get_value_req_handler+0x94>)
1001259a:	4798      	blx	r3
1001259c:	7833      	ldrb	r3, [r6, #0]
1001259e:	20e2      	movs	r0, #226	; 0xe2
100125a0:	2b00      	cmp	r3, #0
100125a2:	d112      	bne.n	100125ca <gattm_att_get_value_req_handler+0x7a>
100125a4:	68a9      	ldr	r1, [r5, #8]
100125a6:	9801      	ldr	r0, [sp, #4]
100125a8:	784d      	ldrb	r5, [r1, #1]
100125aa:	780b      	ldrb	r3, [r1, #0]
100125ac:	78ca      	ldrb	r2, [r1, #3]
100125ae:	022d      	lsls	r5, r5, #8
100125b0:	431d      	orrs	r5, r3
100125b2:	788b      	ldrb	r3, [r1, #2]
100125b4:	0212      	lsls	r2, r2, #8
100125b6:	431a      	orrs	r2, r3
100125b8:	803a      	strh	r2, [r7, #0]
100125ba:	790e      	ldrb	r6, [r1, #4]
100125bc:	4b0a      	ldr	r3, [pc, #40]	; (100125e8 <gattm_att_get_value_req_handler+0x98>)
100125be:	3105      	adds	r1, #5
100125c0:	4798      	blx	r3
100125c2:	20e2      	movs	r0, #226	; 0xe2
100125c4:	42ac      	cmp	r4, r5
100125c6:	d100      	bne.n	100125ca <gattm_att_get_value_req_handler+0x7a>
100125c8:	1c30      	adds	r0, r6, #0
100125ca:	b005      	add	sp, #20
100125cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100125ce:	46c0      	nop			; (mov r8, r8)
100125d0:	100199c0 	.word	0x100199c0
100125d4:	10019650 	.word	0x10019650
100125d8:	00000b0b 	.word	0x00000b0b
100125dc:	10019644 	.word	0x10019644
100125e0:	10010c9d 	.word	0x10010c9d
100125e4:	10010d01 	.word	0x10010d01
100125e8:	100143b7 	.word	0x100143b7

100125ec <htpt_enable_rsp_handler>:
100125ec:	780b      	ldrb	r3, [r1, #0]
100125ee:	7013      	strb	r3, [r2, #0]
100125f0:	784b      	ldrb	r3, [r1, #1]
100125f2:	7053      	strb	r3, [r2, #1]
100125f4:	4770      	bx	lr

100125f6 <htpt_temp_send_rsp_handler>:
100125f6:	780b      	ldrb	r3, [r1, #0]
100125f8:	7013      	strb	r3, [r2, #0]
100125fa:	4770      	bx	lr

100125fc <htpt_meas_intv_upd_rsp_handler>:
100125fc:	780b      	ldrb	r3, [r1, #0]
100125fe:	7013      	strb	r3, [r2, #0]
10012600:	4770      	bx	lr

10012602 <htpt_meas_intv_chg_req_ind_handler>:
10012602:	78cb      	ldrb	r3, [r1, #3]
10012604:	7889      	ldrb	r1, [r1, #2]
10012606:	021b      	lsls	r3, r3, #8
10012608:	430b      	orrs	r3, r1
1001260a:	8013      	strh	r3, [r2, #0]
1001260c:	4770      	bx	lr

1001260e <htpt_cfg_indntf_ind_handler>:
1001260e:	780b      	ldrb	r3, [r1, #0]
10012610:	7013      	strb	r3, [r2, #0]
10012612:	784b      	ldrb	r3, [r1, #1]
10012614:	7053      	strb	r3, [r2, #1]
10012616:	4770      	bx	lr

10012618 <__gnu_thumb1_case_sqi>:
10012618:	b402      	push	{r1}
1001261a:	4671      	mov	r1, lr
1001261c:	0849      	lsrs	r1, r1, #1
1001261e:	0049      	lsls	r1, r1, #1
10012620:	5609      	ldrsb	r1, [r1, r0]
10012622:	0049      	lsls	r1, r1, #1
10012624:	448e      	add	lr, r1
10012626:	bc02      	pop	{r1}
10012628:	4770      	bx	lr
1001262a:	46c0      	nop			; (mov r8, r8)

1001262c <__gnu_thumb1_case_uqi>:
1001262c:	b402      	push	{r1}
1001262e:	4671      	mov	r1, lr
10012630:	0849      	lsrs	r1, r1, #1
10012632:	0049      	lsls	r1, r1, #1
10012634:	5c09      	ldrb	r1, [r1, r0]
10012636:	0049      	lsls	r1, r1, #1
10012638:	448e      	add	lr, r1
1001263a:	bc02      	pop	{r1}
1001263c:	4770      	bx	lr
1001263e:	46c0      	nop			; (mov r8, r8)

10012640 <__aeabi_uidiv>:
10012640:	2200      	movs	r2, #0
10012642:	0843      	lsrs	r3, r0, #1
10012644:	428b      	cmp	r3, r1
10012646:	d374      	bcc.n	10012732 <__aeabi_uidiv+0xf2>
10012648:	0903      	lsrs	r3, r0, #4
1001264a:	428b      	cmp	r3, r1
1001264c:	d35f      	bcc.n	1001270e <__aeabi_uidiv+0xce>
1001264e:	0a03      	lsrs	r3, r0, #8
10012650:	428b      	cmp	r3, r1
10012652:	d344      	bcc.n	100126de <__aeabi_uidiv+0x9e>
10012654:	0b03      	lsrs	r3, r0, #12
10012656:	428b      	cmp	r3, r1
10012658:	d328      	bcc.n	100126ac <__aeabi_uidiv+0x6c>
1001265a:	0c03      	lsrs	r3, r0, #16
1001265c:	428b      	cmp	r3, r1
1001265e:	d30d      	bcc.n	1001267c <__aeabi_uidiv+0x3c>
10012660:	22ff      	movs	r2, #255	; 0xff
10012662:	0209      	lsls	r1, r1, #8
10012664:	ba12      	rev	r2, r2
10012666:	0c03      	lsrs	r3, r0, #16
10012668:	428b      	cmp	r3, r1
1001266a:	d302      	bcc.n	10012672 <__aeabi_uidiv+0x32>
1001266c:	1212      	asrs	r2, r2, #8
1001266e:	0209      	lsls	r1, r1, #8
10012670:	d065      	beq.n	1001273e <__aeabi_uidiv+0xfe>
10012672:	0b03      	lsrs	r3, r0, #12
10012674:	428b      	cmp	r3, r1
10012676:	d319      	bcc.n	100126ac <__aeabi_uidiv+0x6c>
10012678:	e000      	b.n	1001267c <__aeabi_uidiv+0x3c>
1001267a:	0a09      	lsrs	r1, r1, #8
1001267c:	0bc3      	lsrs	r3, r0, #15
1001267e:	428b      	cmp	r3, r1
10012680:	d301      	bcc.n	10012686 <__aeabi_uidiv+0x46>
10012682:	03cb      	lsls	r3, r1, #15
10012684:	1ac0      	subs	r0, r0, r3
10012686:	4152      	adcs	r2, r2
10012688:	0b83      	lsrs	r3, r0, #14
1001268a:	428b      	cmp	r3, r1
1001268c:	d301      	bcc.n	10012692 <__aeabi_uidiv+0x52>
1001268e:	038b      	lsls	r3, r1, #14
10012690:	1ac0      	subs	r0, r0, r3
10012692:	4152      	adcs	r2, r2
10012694:	0b43      	lsrs	r3, r0, #13
10012696:	428b      	cmp	r3, r1
10012698:	d301      	bcc.n	1001269e <__aeabi_uidiv+0x5e>
1001269a:	034b      	lsls	r3, r1, #13
1001269c:	1ac0      	subs	r0, r0, r3
1001269e:	4152      	adcs	r2, r2
100126a0:	0b03      	lsrs	r3, r0, #12
100126a2:	428b      	cmp	r3, r1
100126a4:	d301      	bcc.n	100126aa <__aeabi_uidiv+0x6a>
100126a6:	030b      	lsls	r3, r1, #12
100126a8:	1ac0      	subs	r0, r0, r3
100126aa:	4152      	adcs	r2, r2
100126ac:	0ac3      	lsrs	r3, r0, #11
100126ae:	428b      	cmp	r3, r1
100126b0:	d301      	bcc.n	100126b6 <__aeabi_uidiv+0x76>
100126b2:	02cb      	lsls	r3, r1, #11
100126b4:	1ac0      	subs	r0, r0, r3
100126b6:	4152      	adcs	r2, r2
100126b8:	0a83      	lsrs	r3, r0, #10
100126ba:	428b      	cmp	r3, r1
100126bc:	d301      	bcc.n	100126c2 <__aeabi_uidiv+0x82>
100126be:	028b      	lsls	r3, r1, #10
100126c0:	1ac0      	subs	r0, r0, r3
100126c2:	4152      	adcs	r2, r2
100126c4:	0a43      	lsrs	r3, r0, #9
100126c6:	428b      	cmp	r3, r1
100126c8:	d301      	bcc.n	100126ce <__aeabi_uidiv+0x8e>
100126ca:	024b      	lsls	r3, r1, #9
100126cc:	1ac0      	subs	r0, r0, r3
100126ce:	4152      	adcs	r2, r2
100126d0:	0a03      	lsrs	r3, r0, #8
100126d2:	428b      	cmp	r3, r1
100126d4:	d301      	bcc.n	100126da <__aeabi_uidiv+0x9a>
100126d6:	020b      	lsls	r3, r1, #8
100126d8:	1ac0      	subs	r0, r0, r3
100126da:	4152      	adcs	r2, r2
100126dc:	d2cd      	bcs.n	1001267a <__aeabi_uidiv+0x3a>
100126de:	09c3      	lsrs	r3, r0, #7
100126e0:	428b      	cmp	r3, r1
100126e2:	d301      	bcc.n	100126e8 <__aeabi_uidiv+0xa8>
100126e4:	01cb      	lsls	r3, r1, #7
100126e6:	1ac0      	subs	r0, r0, r3
100126e8:	4152      	adcs	r2, r2
100126ea:	0983      	lsrs	r3, r0, #6
100126ec:	428b      	cmp	r3, r1
100126ee:	d301      	bcc.n	100126f4 <__aeabi_uidiv+0xb4>
100126f0:	018b      	lsls	r3, r1, #6
100126f2:	1ac0      	subs	r0, r0, r3
100126f4:	4152      	adcs	r2, r2
100126f6:	0943      	lsrs	r3, r0, #5
100126f8:	428b      	cmp	r3, r1
100126fa:	d301      	bcc.n	10012700 <__aeabi_uidiv+0xc0>
100126fc:	014b      	lsls	r3, r1, #5
100126fe:	1ac0      	subs	r0, r0, r3
10012700:	4152      	adcs	r2, r2
10012702:	0903      	lsrs	r3, r0, #4
10012704:	428b      	cmp	r3, r1
10012706:	d301      	bcc.n	1001270c <__aeabi_uidiv+0xcc>
10012708:	010b      	lsls	r3, r1, #4
1001270a:	1ac0      	subs	r0, r0, r3
1001270c:	4152      	adcs	r2, r2
1001270e:	08c3      	lsrs	r3, r0, #3
10012710:	428b      	cmp	r3, r1
10012712:	d301      	bcc.n	10012718 <__aeabi_uidiv+0xd8>
10012714:	00cb      	lsls	r3, r1, #3
10012716:	1ac0      	subs	r0, r0, r3
10012718:	4152      	adcs	r2, r2
1001271a:	0883      	lsrs	r3, r0, #2
1001271c:	428b      	cmp	r3, r1
1001271e:	d301      	bcc.n	10012724 <__aeabi_uidiv+0xe4>
10012720:	008b      	lsls	r3, r1, #2
10012722:	1ac0      	subs	r0, r0, r3
10012724:	4152      	adcs	r2, r2
10012726:	0843      	lsrs	r3, r0, #1
10012728:	428b      	cmp	r3, r1
1001272a:	d301      	bcc.n	10012730 <__aeabi_uidiv+0xf0>
1001272c:	004b      	lsls	r3, r1, #1
1001272e:	1ac0      	subs	r0, r0, r3
10012730:	4152      	adcs	r2, r2
10012732:	1a41      	subs	r1, r0, r1
10012734:	d200      	bcs.n	10012738 <__aeabi_uidiv+0xf8>
10012736:	4601      	mov	r1, r0
10012738:	4152      	adcs	r2, r2
1001273a:	4610      	mov	r0, r2
1001273c:	4770      	bx	lr
1001273e:	e7ff      	b.n	10012740 <__aeabi_uidiv+0x100>
10012740:	b501      	push	{r0, lr}
10012742:	2000      	movs	r0, #0
10012744:	f000 f8f0 	bl	10012928 <__aeabi_idiv0>
10012748:	bd02      	pop	{r1, pc}
1001274a:	46c0      	nop			; (mov r8, r8)

1001274c <__aeabi_uidivmod>:
1001274c:	2900      	cmp	r1, #0
1001274e:	d0f7      	beq.n	10012740 <__aeabi_uidiv+0x100>
10012750:	e776      	b.n	10012640 <__aeabi_uidiv>
10012752:	4770      	bx	lr

10012754 <__aeabi_idiv>:
10012754:	4603      	mov	r3, r0
10012756:	430b      	orrs	r3, r1
10012758:	d47f      	bmi.n	1001285a <__aeabi_idiv+0x106>
1001275a:	2200      	movs	r2, #0
1001275c:	0843      	lsrs	r3, r0, #1
1001275e:	428b      	cmp	r3, r1
10012760:	d374      	bcc.n	1001284c <__aeabi_idiv+0xf8>
10012762:	0903      	lsrs	r3, r0, #4
10012764:	428b      	cmp	r3, r1
10012766:	d35f      	bcc.n	10012828 <__aeabi_idiv+0xd4>
10012768:	0a03      	lsrs	r3, r0, #8
1001276a:	428b      	cmp	r3, r1
1001276c:	d344      	bcc.n	100127f8 <__aeabi_idiv+0xa4>
1001276e:	0b03      	lsrs	r3, r0, #12
10012770:	428b      	cmp	r3, r1
10012772:	d328      	bcc.n	100127c6 <__aeabi_idiv+0x72>
10012774:	0c03      	lsrs	r3, r0, #16
10012776:	428b      	cmp	r3, r1
10012778:	d30d      	bcc.n	10012796 <__aeabi_idiv+0x42>
1001277a:	22ff      	movs	r2, #255	; 0xff
1001277c:	0209      	lsls	r1, r1, #8
1001277e:	ba12      	rev	r2, r2
10012780:	0c03      	lsrs	r3, r0, #16
10012782:	428b      	cmp	r3, r1
10012784:	d302      	bcc.n	1001278c <__aeabi_idiv+0x38>
10012786:	1212      	asrs	r2, r2, #8
10012788:	0209      	lsls	r1, r1, #8
1001278a:	d065      	beq.n	10012858 <__aeabi_idiv+0x104>
1001278c:	0b03      	lsrs	r3, r0, #12
1001278e:	428b      	cmp	r3, r1
10012790:	d319      	bcc.n	100127c6 <__aeabi_idiv+0x72>
10012792:	e000      	b.n	10012796 <__aeabi_idiv+0x42>
10012794:	0a09      	lsrs	r1, r1, #8
10012796:	0bc3      	lsrs	r3, r0, #15
10012798:	428b      	cmp	r3, r1
1001279a:	d301      	bcc.n	100127a0 <__aeabi_idiv+0x4c>
1001279c:	03cb      	lsls	r3, r1, #15
1001279e:	1ac0      	subs	r0, r0, r3
100127a0:	4152      	adcs	r2, r2
100127a2:	0b83      	lsrs	r3, r0, #14
100127a4:	428b      	cmp	r3, r1
100127a6:	d301      	bcc.n	100127ac <__aeabi_idiv+0x58>
100127a8:	038b      	lsls	r3, r1, #14
100127aa:	1ac0      	subs	r0, r0, r3
100127ac:	4152      	adcs	r2, r2
100127ae:	0b43      	lsrs	r3, r0, #13
100127b0:	428b      	cmp	r3, r1
100127b2:	d301      	bcc.n	100127b8 <__aeabi_idiv+0x64>
100127b4:	034b      	lsls	r3, r1, #13
100127b6:	1ac0      	subs	r0, r0, r3
100127b8:	4152      	adcs	r2, r2
100127ba:	0b03      	lsrs	r3, r0, #12
100127bc:	428b      	cmp	r3, r1
100127be:	d301      	bcc.n	100127c4 <__aeabi_idiv+0x70>
100127c0:	030b      	lsls	r3, r1, #12
100127c2:	1ac0      	subs	r0, r0, r3
100127c4:	4152      	adcs	r2, r2
100127c6:	0ac3      	lsrs	r3, r0, #11
100127c8:	428b      	cmp	r3, r1
100127ca:	d301      	bcc.n	100127d0 <__aeabi_idiv+0x7c>
100127cc:	02cb      	lsls	r3, r1, #11
100127ce:	1ac0      	subs	r0, r0, r3
100127d0:	4152      	adcs	r2, r2
100127d2:	0a83      	lsrs	r3, r0, #10
100127d4:	428b      	cmp	r3, r1
100127d6:	d301      	bcc.n	100127dc <__aeabi_idiv+0x88>
100127d8:	028b      	lsls	r3, r1, #10
100127da:	1ac0      	subs	r0, r0, r3
100127dc:	4152      	adcs	r2, r2
100127de:	0a43      	lsrs	r3, r0, #9
100127e0:	428b      	cmp	r3, r1
100127e2:	d301      	bcc.n	100127e8 <__aeabi_idiv+0x94>
100127e4:	024b      	lsls	r3, r1, #9
100127e6:	1ac0      	subs	r0, r0, r3
100127e8:	4152      	adcs	r2, r2
100127ea:	0a03      	lsrs	r3, r0, #8
100127ec:	428b      	cmp	r3, r1
100127ee:	d301      	bcc.n	100127f4 <__aeabi_idiv+0xa0>
100127f0:	020b      	lsls	r3, r1, #8
100127f2:	1ac0      	subs	r0, r0, r3
100127f4:	4152      	adcs	r2, r2
100127f6:	d2cd      	bcs.n	10012794 <__aeabi_idiv+0x40>
100127f8:	09c3      	lsrs	r3, r0, #7
100127fa:	428b      	cmp	r3, r1
100127fc:	d301      	bcc.n	10012802 <__aeabi_idiv+0xae>
100127fe:	01cb      	lsls	r3, r1, #7
10012800:	1ac0      	subs	r0, r0, r3
10012802:	4152      	adcs	r2, r2
10012804:	0983      	lsrs	r3, r0, #6
10012806:	428b      	cmp	r3, r1
10012808:	d301      	bcc.n	1001280e <__aeabi_idiv+0xba>
1001280a:	018b      	lsls	r3, r1, #6
1001280c:	1ac0      	subs	r0, r0, r3
1001280e:	4152      	adcs	r2, r2
10012810:	0943      	lsrs	r3, r0, #5
10012812:	428b      	cmp	r3, r1
10012814:	d301      	bcc.n	1001281a <__aeabi_idiv+0xc6>
10012816:	014b      	lsls	r3, r1, #5
10012818:	1ac0      	subs	r0, r0, r3
1001281a:	4152      	adcs	r2, r2
1001281c:	0903      	lsrs	r3, r0, #4
1001281e:	428b      	cmp	r3, r1
10012820:	d301      	bcc.n	10012826 <__aeabi_idiv+0xd2>
10012822:	010b      	lsls	r3, r1, #4
10012824:	1ac0      	subs	r0, r0, r3
10012826:	4152      	adcs	r2, r2
10012828:	08c3      	lsrs	r3, r0, #3
1001282a:	428b      	cmp	r3, r1
1001282c:	d301      	bcc.n	10012832 <__aeabi_idiv+0xde>
1001282e:	00cb      	lsls	r3, r1, #3
10012830:	1ac0      	subs	r0, r0, r3
10012832:	4152      	adcs	r2, r2
10012834:	0883      	lsrs	r3, r0, #2
10012836:	428b      	cmp	r3, r1
10012838:	d301      	bcc.n	1001283e <__aeabi_idiv+0xea>
1001283a:	008b      	lsls	r3, r1, #2
1001283c:	1ac0      	subs	r0, r0, r3
1001283e:	4152      	adcs	r2, r2
10012840:	0843      	lsrs	r3, r0, #1
10012842:	428b      	cmp	r3, r1
10012844:	d301      	bcc.n	1001284a <__aeabi_idiv+0xf6>
10012846:	004b      	lsls	r3, r1, #1
10012848:	1ac0      	subs	r0, r0, r3
1001284a:	4152      	adcs	r2, r2
1001284c:	1a41      	subs	r1, r0, r1
1001284e:	d200      	bcs.n	10012852 <__aeabi_idiv+0xfe>
10012850:	4601      	mov	r1, r0
10012852:	4152      	adcs	r2, r2
10012854:	4610      	mov	r0, r2
10012856:	4770      	bx	lr
10012858:	e05d      	b.n	10012916 <__aeabi_idiv+0x1c2>
1001285a:	0fca      	lsrs	r2, r1, #31
1001285c:	d000      	beq.n	10012860 <__aeabi_idiv+0x10c>
1001285e:	4249      	negs	r1, r1
10012860:	1003      	asrs	r3, r0, #32
10012862:	d300      	bcc.n	10012866 <__aeabi_idiv+0x112>
10012864:	4240      	negs	r0, r0
10012866:	4053      	eors	r3, r2
10012868:	2200      	movs	r2, #0
1001286a:	469c      	mov	ip, r3
1001286c:	0903      	lsrs	r3, r0, #4
1001286e:	428b      	cmp	r3, r1
10012870:	d32d      	bcc.n	100128ce <__aeabi_idiv+0x17a>
10012872:	0a03      	lsrs	r3, r0, #8
10012874:	428b      	cmp	r3, r1
10012876:	d312      	bcc.n	1001289e <__aeabi_idiv+0x14a>
10012878:	22fc      	movs	r2, #252	; 0xfc
1001287a:	0189      	lsls	r1, r1, #6
1001287c:	ba12      	rev	r2, r2
1001287e:	0a03      	lsrs	r3, r0, #8
10012880:	428b      	cmp	r3, r1
10012882:	d30c      	bcc.n	1001289e <__aeabi_idiv+0x14a>
10012884:	0189      	lsls	r1, r1, #6
10012886:	1192      	asrs	r2, r2, #6
10012888:	428b      	cmp	r3, r1
1001288a:	d308      	bcc.n	1001289e <__aeabi_idiv+0x14a>
1001288c:	0189      	lsls	r1, r1, #6
1001288e:	1192      	asrs	r2, r2, #6
10012890:	428b      	cmp	r3, r1
10012892:	d304      	bcc.n	1001289e <__aeabi_idiv+0x14a>
10012894:	0189      	lsls	r1, r1, #6
10012896:	d03a      	beq.n	1001290e <__aeabi_idiv+0x1ba>
10012898:	1192      	asrs	r2, r2, #6
1001289a:	e000      	b.n	1001289e <__aeabi_idiv+0x14a>
1001289c:	0989      	lsrs	r1, r1, #6
1001289e:	09c3      	lsrs	r3, r0, #7
100128a0:	428b      	cmp	r3, r1
100128a2:	d301      	bcc.n	100128a8 <__aeabi_idiv+0x154>
100128a4:	01cb      	lsls	r3, r1, #7
100128a6:	1ac0      	subs	r0, r0, r3
100128a8:	4152      	adcs	r2, r2
100128aa:	0983      	lsrs	r3, r0, #6
100128ac:	428b      	cmp	r3, r1
100128ae:	d301      	bcc.n	100128b4 <__aeabi_idiv+0x160>
100128b0:	018b      	lsls	r3, r1, #6
100128b2:	1ac0      	subs	r0, r0, r3
100128b4:	4152      	adcs	r2, r2
100128b6:	0943      	lsrs	r3, r0, #5
100128b8:	428b      	cmp	r3, r1
100128ba:	d301      	bcc.n	100128c0 <__aeabi_idiv+0x16c>
100128bc:	014b      	lsls	r3, r1, #5
100128be:	1ac0      	subs	r0, r0, r3
100128c0:	4152      	adcs	r2, r2
100128c2:	0903      	lsrs	r3, r0, #4
100128c4:	428b      	cmp	r3, r1
100128c6:	d301      	bcc.n	100128cc <__aeabi_idiv+0x178>
100128c8:	010b      	lsls	r3, r1, #4
100128ca:	1ac0      	subs	r0, r0, r3
100128cc:	4152      	adcs	r2, r2
100128ce:	08c3      	lsrs	r3, r0, #3
100128d0:	428b      	cmp	r3, r1
100128d2:	d301      	bcc.n	100128d8 <__aeabi_idiv+0x184>
100128d4:	00cb      	lsls	r3, r1, #3
100128d6:	1ac0      	subs	r0, r0, r3
100128d8:	4152      	adcs	r2, r2
100128da:	0883      	lsrs	r3, r0, #2
100128dc:	428b      	cmp	r3, r1
100128de:	d301      	bcc.n	100128e4 <__aeabi_idiv+0x190>
100128e0:	008b      	lsls	r3, r1, #2
100128e2:	1ac0      	subs	r0, r0, r3
100128e4:	4152      	adcs	r2, r2
100128e6:	d2d9      	bcs.n	1001289c <__aeabi_idiv+0x148>
100128e8:	0843      	lsrs	r3, r0, #1
100128ea:	428b      	cmp	r3, r1
100128ec:	d301      	bcc.n	100128f2 <__aeabi_idiv+0x19e>
100128ee:	004b      	lsls	r3, r1, #1
100128f0:	1ac0      	subs	r0, r0, r3
100128f2:	4152      	adcs	r2, r2
100128f4:	1a41      	subs	r1, r0, r1
100128f6:	d200      	bcs.n	100128fa <__aeabi_idiv+0x1a6>
100128f8:	4601      	mov	r1, r0
100128fa:	4663      	mov	r3, ip
100128fc:	4152      	adcs	r2, r2
100128fe:	105b      	asrs	r3, r3, #1
10012900:	4610      	mov	r0, r2
10012902:	d301      	bcc.n	10012908 <__aeabi_idiv+0x1b4>
10012904:	4240      	negs	r0, r0
10012906:	2b00      	cmp	r3, #0
10012908:	d500      	bpl.n	1001290c <__aeabi_idiv+0x1b8>
1001290a:	4249      	negs	r1, r1
1001290c:	4770      	bx	lr
1001290e:	4663      	mov	r3, ip
10012910:	105b      	asrs	r3, r3, #1
10012912:	d300      	bcc.n	10012916 <__aeabi_idiv+0x1c2>
10012914:	4240      	negs	r0, r0
10012916:	b501      	push	{r0, lr}
10012918:	2000      	movs	r0, #0
1001291a:	f000 f805 	bl	10012928 <__aeabi_idiv0>
1001291e:	bd02      	pop	{r1, pc}

10012920 <__aeabi_idivmod>:
10012920:	2900      	cmp	r1, #0
10012922:	d0f8      	beq.n	10012916 <__aeabi_idiv+0x1c2>
10012924:	e716      	b.n	10012754 <__aeabi_idiv>
10012926:	4770      	bx	lr

10012928 <__aeabi_idiv0>:
10012928:	4770      	bx	lr
1001292a:	46c0      	nop			; (mov r8, r8)

1001292c <__aeabi_cdrcmple>:
1001292c:	4684      	mov	ip, r0
1001292e:	1c10      	adds	r0, r2, #0
10012930:	4662      	mov	r2, ip
10012932:	468c      	mov	ip, r1
10012934:	1c19      	adds	r1, r3, #0
10012936:	4663      	mov	r3, ip
10012938:	e000      	b.n	1001293c <__aeabi_cdcmpeq>
1001293a:	46c0      	nop			; (mov r8, r8)

1001293c <__aeabi_cdcmpeq>:
1001293c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001293e:	f000 fe37 	bl	100135b0 <__ledf2>
10012942:	2800      	cmp	r0, #0
10012944:	d401      	bmi.n	1001294a <__aeabi_cdcmpeq+0xe>
10012946:	2100      	movs	r1, #0
10012948:	42c8      	cmn	r0, r1
1001294a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001294c <__aeabi_dcmpeq>:
1001294c:	b510      	push	{r4, lr}
1001294e:	f000 fd8b 	bl	10013468 <__eqdf2>
10012952:	4240      	negs	r0, r0
10012954:	3001      	adds	r0, #1
10012956:	bd10      	pop	{r4, pc}

10012958 <__aeabi_dcmplt>:
10012958:	b510      	push	{r4, lr}
1001295a:	f000 fe29 	bl	100135b0 <__ledf2>
1001295e:	2800      	cmp	r0, #0
10012960:	db01      	blt.n	10012966 <__aeabi_dcmplt+0xe>
10012962:	2000      	movs	r0, #0
10012964:	bd10      	pop	{r4, pc}
10012966:	2001      	movs	r0, #1
10012968:	bd10      	pop	{r4, pc}
1001296a:	46c0      	nop			; (mov r8, r8)

1001296c <__aeabi_dcmple>:
1001296c:	b510      	push	{r4, lr}
1001296e:	f000 fe1f 	bl	100135b0 <__ledf2>
10012972:	2800      	cmp	r0, #0
10012974:	dd01      	ble.n	1001297a <__aeabi_dcmple+0xe>
10012976:	2000      	movs	r0, #0
10012978:	bd10      	pop	{r4, pc}
1001297a:	2001      	movs	r0, #1
1001297c:	bd10      	pop	{r4, pc}
1001297e:	46c0      	nop			; (mov r8, r8)

10012980 <__aeabi_dcmpgt>:
10012980:	b510      	push	{r4, lr}
10012982:	f000 fdb1 	bl	100134e8 <__gedf2>
10012986:	2800      	cmp	r0, #0
10012988:	dc01      	bgt.n	1001298e <__aeabi_dcmpgt+0xe>
1001298a:	2000      	movs	r0, #0
1001298c:	bd10      	pop	{r4, pc}
1001298e:	2001      	movs	r0, #1
10012990:	bd10      	pop	{r4, pc}
10012992:	46c0      	nop			; (mov r8, r8)

10012994 <__aeabi_dcmpge>:
10012994:	b510      	push	{r4, lr}
10012996:	f000 fda7 	bl	100134e8 <__gedf2>
1001299a:	2800      	cmp	r0, #0
1001299c:	da01      	bge.n	100129a2 <__aeabi_dcmpge+0xe>
1001299e:	2000      	movs	r0, #0
100129a0:	bd10      	pop	{r4, pc}
100129a2:	2001      	movs	r0, #1
100129a4:	bd10      	pop	{r4, pc}
100129a6:	46c0      	nop			; (mov r8, r8)

100129a8 <__aeabi_cfrcmple>:
100129a8:	4684      	mov	ip, r0
100129aa:	1c08      	adds	r0, r1, #0
100129ac:	4661      	mov	r1, ip
100129ae:	e7ff      	b.n	100129b0 <__aeabi_cfcmpeq>

100129b0 <__aeabi_cfcmpeq>:
100129b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100129b2:	f000 fa1b 	bl	10012dec <__lesf2>
100129b6:	2800      	cmp	r0, #0
100129b8:	d401      	bmi.n	100129be <__aeabi_cfcmpeq+0xe>
100129ba:	2100      	movs	r1, #0
100129bc:	42c8      	cmn	r0, r1
100129be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100129c0 <__aeabi_fcmpeq>:
100129c0:	b510      	push	{r4, lr}
100129c2:	f000 f9a7 	bl	10012d14 <__eqsf2>
100129c6:	4240      	negs	r0, r0
100129c8:	3001      	adds	r0, #1
100129ca:	bd10      	pop	{r4, pc}

100129cc <__aeabi_fcmplt>:
100129cc:	b510      	push	{r4, lr}
100129ce:	f000 fa0d 	bl	10012dec <__lesf2>
100129d2:	2800      	cmp	r0, #0
100129d4:	db01      	blt.n	100129da <__aeabi_fcmplt+0xe>
100129d6:	2000      	movs	r0, #0
100129d8:	bd10      	pop	{r4, pc}
100129da:	2001      	movs	r0, #1
100129dc:	bd10      	pop	{r4, pc}
100129de:	46c0      	nop			; (mov r8, r8)

100129e0 <__aeabi_fcmple>:
100129e0:	b510      	push	{r4, lr}
100129e2:	f000 fa03 	bl	10012dec <__lesf2>
100129e6:	2800      	cmp	r0, #0
100129e8:	dd01      	ble.n	100129ee <__aeabi_fcmple+0xe>
100129ea:	2000      	movs	r0, #0
100129ec:	bd10      	pop	{r4, pc}
100129ee:	2001      	movs	r0, #1
100129f0:	bd10      	pop	{r4, pc}
100129f2:	46c0      	nop			; (mov r8, r8)

100129f4 <__aeabi_fcmpgt>:
100129f4:	b510      	push	{r4, lr}
100129f6:	f000 f9b5 	bl	10012d64 <__gesf2>
100129fa:	2800      	cmp	r0, #0
100129fc:	dc01      	bgt.n	10012a02 <__aeabi_fcmpgt+0xe>
100129fe:	2000      	movs	r0, #0
10012a00:	bd10      	pop	{r4, pc}
10012a02:	2001      	movs	r0, #1
10012a04:	bd10      	pop	{r4, pc}
10012a06:	46c0      	nop			; (mov r8, r8)

10012a08 <__aeabi_fcmpge>:
10012a08:	b510      	push	{r4, lr}
10012a0a:	f000 f9ab 	bl	10012d64 <__gesf2>
10012a0e:	2800      	cmp	r0, #0
10012a10:	da01      	bge.n	10012a16 <__aeabi_fcmpge+0xe>
10012a12:	2000      	movs	r0, #0
10012a14:	bd10      	pop	{r4, pc}
10012a16:	2001      	movs	r0, #1
10012a18:	bd10      	pop	{r4, pc}
10012a1a:	46c0      	nop			; (mov r8, r8)

10012a1c <__aeabi_lmul>:
10012a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012a1e:	464f      	mov	r7, r9
10012a20:	4646      	mov	r6, r8
10012a22:	b4c0      	push	{r6, r7}
10012a24:	0416      	lsls	r6, r2, #16
10012a26:	0c36      	lsrs	r6, r6, #16
10012a28:	4699      	mov	r9, r3
10012a2a:	0033      	movs	r3, r6
10012a2c:	0405      	lsls	r5, r0, #16
10012a2e:	0c2c      	lsrs	r4, r5, #16
10012a30:	0c07      	lsrs	r7, r0, #16
10012a32:	0c15      	lsrs	r5, r2, #16
10012a34:	4363      	muls	r3, r4
10012a36:	437e      	muls	r6, r7
10012a38:	436f      	muls	r7, r5
10012a3a:	4365      	muls	r5, r4
10012a3c:	0c1c      	lsrs	r4, r3, #16
10012a3e:	19ad      	adds	r5, r5, r6
10012a40:	1964      	adds	r4, r4, r5
10012a42:	469c      	mov	ip, r3
10012a44:	42a6      	cmp	r6, r4
10012a46:	d903      	bls.n	10012a50 <__aeabi_lmul+0x34>
10012a48:	2380      	movs	r3, #128	; 0x80
10012a4a:	025b      	lsls	r3, r3, #9
10012a4c:	4698      	mov	r8, r3
10012a4e:	4447      	add	r7, r8
10012a50:	4663      	mov	r3, ip
10012a52:	0c25      	lsrs	r5, r4, #16
10012a54:	19ef      	adds	r7, r5, r7
10012a56:	041d      	lsls	r5, r3, #16
10012a58:	464b      	mov	r3, r9
10012a5a:	434a      	muls	r2, r1
10012a5c:	4343      	muls	r3, r0
10012a5e:	0c2d      	lsrs	r5, r5, #16
10012a60:	0424      	lsls	r4, r4, #16
10012a62:	1964      	adds	r4, r4, r5
10012a64:	1899      	adds	r1, r3, r2
10012a66:	19c9      	adds	r1, r1, r7
10012a68:	0020      	movs	r0, r4
10012a6a:	bc0c      	pop	{r2, r3}
10012a6c:	4690      	mov	r8, r2
10012a6e:	4699      	mov	r9, r3
10012a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a72:	46c0      	nop			; (mov r8, r8)

10012a74 <__aeabi_f2uiz>:
10012a74:	219e      	movs	r1, #158	; 0x9e
10012a76:	b510      	push	{r4, lr}
10012a78:	05c9      	lsls	r1, r1, #23
10012a7a:	1c04      	adds	r4, r0, #0
10012a7c:	f7ff ffc4 	bl	10012a08 <__aeabi_fcmpge>
10012a80:	2800      	cmp	r0, #0
10012a82:	d103      	bne.n	10012a8c <__aeabi_f2uiz+0x18>
10012a84:	1c20      	adds	r0, r4, #0
10012a86:	f000 fc8f 	bl	100133a8 <__aeabi_f2iz>
10012a8a:	bd10      	pop	{r4, pc}
10012a8c:	219e      	movs	r1, #158	; 0x9e
10012a8e:	1c20      	adds	r0, r4, #0
10012a90:	05c9      	lsls	r1, r1, #23
10012a92:	f000 fb03 	bl	1001309c <__aeabi_fsub>
10012a96:	f000 fc87 	bl	100133a8 <__aeabi_f2iz>
10012a9a:	2380      	movs	r3, #128	; 0x80
10012a9c:	061b      	lsls	r3, r3, #24
10012a9e:	469c      	mov	ip, r3
10012aa0:	4460      	add	r0, ip
10012aa2:	e7f2      	b.n	10012a8a <__aeabi_f2uiz+0x16>

10012aa4 <__aeabi_d2uiz>:
10012aa4:	b570      	push	{r4, r5, r6, lr}
10012aa6:	2200      	movs	r2, #0
10012aa8:	4b0c      	ldr	r3, [pc, #48]	; (10012adc <__aeabi_d2uiz+0x38>)
10012aaa:	0004      	movs	r4, r0
10012aac:	000d      	movs	r5, r1
10012aae:	f7ff ff71 	bl	10012994 <__aeabi_dcmpge>
10012ab2:	2800      	cmp	r0, #0
10012ab4:	d104      	bne.n	10012ac0 <__aeabi_d2uiz+0x1c>
10012ab6:	0020      	movs	r0, r4
10012ab8:	0029      	movs	r1, r5
10012aba:	f001 fbb1 	bl	10014220 <__aeabi_d2iz>
10012abe:	bd70      	pop	{r4, r5, r6, pc}
10012ac0:	4b06      	ldr	r3, [pc, #24]	; (10012adc <__aeabi_d2uiz+0x38>)
10012ac2:	2200      	movs	r2, #0
10012ac4:	0020      	movs	r0, r4
10012ac6:	0029      	movs	r1, r5
10012ac8:	f001 f856 	bl	10013b78 <__aeabi_dsub>
10012acc:	f001 fba8 	bl	10014220 <__aeabi_d2iz>
10012ad0:	2380      	movs	r3, #128	; 0x80
10012ad2:	061b      	lsls	r3, r3, #24
10012ad4:	469c      	mov	ip, r3
10012ad6:	4460      	add	r0, ip
10012ad8:	e7f1      	b.n	10012abe <__aeabi_d2uiz+0x1a>
10012ada:	46c0      	nop			; (mov r8, r8)
10012adc:	41e00000 	.word	0x41e00000

10012ae0 <__aeabi_fdiv>:
10012ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ae2:	4656      	mov	r6, sl
10012ae4:	4644      	mov	r4, r8
10012ae6:	465f      	mov	r7, fp
10012ae8:	464d      	mov	r5, r9
10012aea:	b4f0      	push	{r4, r5, r6, r7}
10012aec:	0244      	lsls	r4, r0, #9
10012aee:	0046      	lsls	r6, r0, #1
10012af0:	0fc7      	lsrs	r7, r0, #31
10012af2:	b083      	sub	sp, #12
10012af4:	4688      	mov	r8, r1
10012af6:	0a65      	lsrs	r5, r4, #9
10012af8:	0e36      	lsrs	r6, r6, #24
10012afa:	46ba      	mov	sl, r7
10012afc:	d03d      	beq.n	10012b7a <__aeabi_fdiv+0x9a>
10012afe:	2eff      	cmp	r6, #255	; 0xff
10012b00:	d022      	beq.n	10012b48 <__aeabi_fdiv+0x68>
10012b02:	2300      	movs	r3, #0
10012b04:	00ec      	lsls	r4, r5, #3
10012b06:	2580      	movs	r5, #128	; 0x80
10012b08:	4699      	mov	r9, r3
10012b0a:	469b      	mov	fp, r3
10012b0c:	04ed      	lsls	r5, r5, #19
10012b0e:	4325      	orrs	r5, r4
10012b10:	3e7f      	subs	r6, #127	; 0x7f
10012b12:	4643      	mov	r3, r8
10012b14:	025c      	lsls	r4, r3, #9
10012b16:	0058      	lsls	r0, r3, #1
10012b18:	0fdb      	lsrs	r3, r3, #31
10012b1a:	0a64      	lsrs	r4, r4, #9
10012b1c:	0e00      	lsrs	r0, r0, #24
10012b1e:	4698      	mov	r8, r3
10012b20:	d036      	beq.n	10012b90 <__aeabi_fdiv+0xb0>
10012b22:	28ff      	cmp	r0, #255	; 0xff
10012b24:	d030      	beq.n	10012b88 <__aeabi_fdiv+0xa8>
10012b26:	2380      	movs	r3, #128	; 0x80
10012b28:	2100      	movs	r1, #0
10012b2a:	00e4      	lsls	r4, r4, #3
10012b2c:	04db      	lsls	r3, r3, #19
10012b2e:	431c      	orrs	r4, r3
10012b30:	387f      	subs	r0, #127	; 0x7f
10012b32:	1a30      	subs	r0, r6, r0
10012b34:	9001      	str	r0, [sp, #4]
10012b36:	4648      	mov	r0, r9
10012b38:	4642      	mov	r2, r8
10012b3a:	4308      	orrs	r0, r1
10012b3c:	4e72      	ldr	r6, [pc, #456]	; (10012d08 <__aeabi_fdiv+0x228>)
10012b3e:	0080      	lsls	r0, r0, #2
10012b40:	5830      	ldr	r0, [r6, r0]
10012b42:	407a      	eors	r2, r7
10012b44:	0013      	movs	r3, r2
10012b46:	4687      	mov	pc, r0
10012b48:	2d00      	cmp	r5, #0
10012b4a:	d144      	bne.n	10012bd6 <__aeabi_fdiv+0xf6>
10012b4c:	2308      	movs	r3, #8
10012b4e:	4699      	mov	r9, r3
10012b50:	3b06      	subs	r3, #6
10012b52:	469b      	mov	fp, r3
10012b54:	e7dd      	b.n	10012b12 <__aeabi_fdiv+0x32>
10012b56:	2201      	movs	r2, #1
10012b58:	20ff      	movs	r0, #255	; 0xff
10012b5a:	2400      	movs	r4, #0
10012b5c:	401a      	ands	r2, r3
10012b5e:	0264      	lsls	r4, r4, #9
10012b60:	05c3      	lsls	r3, r0, #23
10012b62:	0a64      	lsrs	r4, r4, #9
10012b64:	07d2      	lsls	r2, r2, #31
10012b66:	431c      	orrs	r4, r3
10012b68:	4314      	orrs	r4, r2
10012b6a:	0020      	movs	r0, r4
10012b6c:	b003      	add	sp, #12
10012b6e:	bc3c      	pop	{r2, r3, r4, r5}
10012b70:	4690      	mov	r8, r2
10012b72:	4699      	mov	r9, r3
10012b74:	46a2      	mov	sl, r4
10012b76:	46ab      	mov	fp, r5
10012b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012b7a:	2d00      	cmp	r5, #0
10012b7c:	d120      	bne.n	10012bc0 <__aeabi_fdiv+0xe0>
10012b7e:	2304      	movs	r3, #4
10012b80:	4699      	mov	r9, r3
10012b82:	3b03      	subs	r3, #3
10012b84:	469b      	mov	fp, r3
10012b86:	e7c4      	b.n	10012b12 <__aeabi_fdiv+0x32>
10012b88:	2c00      	cmp	r4, #0
10012b8a:	d117      	bne.n	10012bbc <__aeabi_fdiv+0xdc>
10012b8c:	2102      	movs	r1, #2
10012b8e:	e002      	b.n	10012b96 <__aeabi_fdiv+0xb6>
10012b90:	2c00      	cmp	r4, #0
10012b92:	d10a      	bne.n	10012baa <__aeabi_fdiv+0xca>
10012b94:	2101      	movs	r1, #1
10012b96:	1a32      	subs	r2, r6, r0
10012b98:	9201      	str	r2, [sp, #4]
10012b9a:	464a      	mov	r2, r9
10012b9c:	4643      	mov	r3, r8
10012b9e:	430a      	orrs	r2, r1
10012ba0:	485a      	ldr	r0, [pc, #360]	; (10012d0c <__aeabi_fdiv+0x22c>)
10012ba2:	0092      	lsls	r2, r2, #2
10012ba4:	5882      	ldr	r2, [r0, r2]
10012ba6:	407b      	eors	r3, r7
10012ba8:	4697      	mov	pc, r2
10012baa:	0020      	movs	r0, r4
10012bac:	f001 fba6 	bl	100142fc <__clzsi2>
10012bb0:	1f43      	subs	r3, r0, #5
10012bb2:	3076      	adds	r0, #118	; 0x76
10012bb4:	409c      	lsls	r4, r3
10012bb6:	4240      	negs	r0, r0
10012bb8:	2100      	movs	r1, #0
10012bba:	e7ba      	b.n	10012b32 <__aeabi_fdiv+0x52>
10012bbc:	2103      	movs	r1, #3
10012bbe:	e7b8      	b.n	10012b32 <__aeabi_fdiv+0x52>
10012bc0:	0028      	movs	r0, r5
10012bc2:	f001 fb9b 	bl	100142fc <__clzsi2>
10012bc6:	1f43      	subs	r3, r0, #5
10012bc8:	409d      	lsls	r5, r3
10012bca:	2300      	movs	r3, #0
10012bcc:	3076      	adds	r0, #118	; 0x76
10012bce:	4246      	negs	r6, r0
10012bd0:	4699      	mov	r9, r3
10012bd2:	469b      	mov	fp, r3
10012bd4:	e79d      	b.n	10012b12 <__aeabi_fdiv+0x32>
10012bd6:	230c      	movs	r3, #12
10012bd8:	4699      	mov	r9, r3
10012bda:	3b09      	subs	r3, #9
10012bdc:	469b      	mov	fp, r3
10012bde:	e798      	b.n	10012b12 <__aeabi_fdiv+0x32>
10012be0:	2480      	movs	r4, #128	; 0x80
10012be2:	2200      	movs	r2, #0
10012be4:	03e4      	lsls	r4, r4, #15
10012be6:	20ff      	movs	r0, #255	; 0xff
10012be8:	e7b9      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012bea:	2400      	movs	r4, #0
10012bec:	46c2      	mov	sl, r8
10012bee:	468b      	mov	fp, r1
10012bf0:	465a      	mov	r2, fp
10012bf2:	4653      	mov	r3, sl
10012bf4:	2a02      	cmp	r2, #2
10012bf6:	d0ae      	beq.n	10012b56 <__aeabi_fdiv+0x76>
10012bf8:	2a03      	cmp	r2, #3
10012bfa:	d07d      	beq.n	10012cf8 <__aeabi_fdiv+0x218>
10012bfc:	2a01      	cmp	r2, #1
10012bfe:	d131      	bne.n	10012c64 <__aeabi_fdiv+0x184>
10012c00:	2201      	movs	r2, #1
10012c02:	2000      	movs	r0, #0
10012c04:	401a      	ands	r2, r3
10012c06:	2400      	movs	r4, #0
10012c08:	e7a9      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012c0a:	2201      	movs	r2, #1
10012c0c:	1a10      	subs	r0, r2, r0
10012c0e:	281b      	cmp	r0, #27
10012c10:	dd56      	ble.n	10012cc0 <__aeabi_fdiv+0x1e0>
10012c12:	401a      	ands	r2, r3
10012c14:	2000      	movs	r0, #0
10012c16:	2400      	movs	r4, #0
10012c18:	e7a1      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012c1a:	2380      	movs	r3, #128	; 0x80
10012c1c:	03db      	lsls	r3, r3, #15
10012c1e:	421d      	tst	r5, r3
10012c20:	d14b      	bne.n	10012cba <__aeabi_fdiv+0x1da>
10012c22:	2380      	movs	r3, #128	; 0x80
10012c24:	03db      	lsls	r3, r3, #15
10012c26:	432b      	orrs	r3, r5
10012c28:	025c      	lsls	r4, r3, #9
10012c2a:	0a64      	lsrs	r4, r4, #9
10012c2c:	003a      	movs	r2, r7
10012c2e:	20ff      	movs	r0, #255	; 0xff
10012c30:	e795      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012c32:	016d      	lsls	r5, r5, #5
10012c34:	0160      	lsls	r0, r4, #5
10012c36:	4285      	cmp	r5, r0
10012c38:	d230      	bcs.n	10012c9c <__aeabi_fdiv+0x1bc>
10012c3a:	9a01      	ldr	r2, [sp, #4]
10012c3c:	2400      	movs	r4, #0
10012c3e:	3a01      	subs	r2, #1
10012c40:	9201      	str	r2, [sp, #4]
10012c42:	221b      	movs	r2, #27
10012c44:	2701      	movs	r7, #1
10012c46:	0029      	movs	r1, r5
10012c48:	0064      	lsls	r4, r4, #1
10012c4a:	006d      	lsls	r5, r5, #1
10012c4c:	2900      	cmp	r1, #0
10012c4e:	db01      	blt.n	10012c54 <__aeabi_fdiv+0x174>
10012c50:	42a8      	cmp	r0, r5
10012c52:	d801      	bhi.n	10012c58 <__aeabi_fdiv+0x178>
10012c54:	1a2d      	subs	r5, r5, r0
10012c56:	433c      	orrs	r4, r7
10012c58:	3a01      	subs	r2, #1
10012c5a:	2a00      	cmp	r2, #0
10012c5c:	d1f3      	bne.n	10012c46 <__aeabi_fdiv+0x166>
10012c5e:	1e6a      	subs	r2, r5, #1
10012c60:	4195      	sbcs	r5, r2
10012c62:	432c      	orrs	r4, r5
10012c64:	9801      	ldr	r0, [sp, #4]
10012c66:	307f      	adds	r0, #127	; 0x7f
10012c68:	2800      	cmp	r0, #0
10012c6a:	ddce      	ble.n	10012c0a <__aeabi_fdiv+0x12a>
10012c6c:	0762      	lsls	r2, r4, #29
10012c6e:	d004      	beq.n	10012c7a <__aeabi_fdiv+0x19a>
10012c70:	220f      	movs	r2, #15
10012c72:	4022      	ands	r2, r4
10012c74:	2a04      	cmp	r2, #4
10012c76:	d000      	beq.n	10012c7a <__aeabi_fdiv+0x19a>
10012c78:	3404      	adds	r4, #4
10012c7a:	0122      	lsls	r2, r4, #4
10012c7c:	d503      	bpl.n	10012c86 <__aeabi_fdiv+0x1a6>
10012c7e:	4a24      	ldr	r2, [pc, #144]	; (10012d10 <__aeabi_fdiv+0x230>)
10012c80:	9801      	ldr	r0, [sp, #4]
10012c82:	4014      	ands	r4, r2
10012c84:	3080      	adds	r0, #128	; 0x80
10012c86:	28fe      	cmp	r0, #254	; 0xfe
10012c88:	dd00      	ble.n	10012c8c <__aeabi_fdiv+0x1ac>
10012c8a:	e764      	b.n	10012b56 <__aeabi_fdiv+0x76>
10012c8c:	2201      	movs	r2, #1
10012c8e:	01a4      	lsls	r4, r4, #6
10012c90:	0a64      	lsrs	r4, r4, #9
10012c92:	b2c0      	uxtb	r0, r0
10012c94:	401a      	ands	r2, r3
10012c96:	e762      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012c98:	002c      	movs	r4, r5
10012c9a:	e7a9      	b.n	10012bf0 <__aeabi_fdiv+0x110>
10012c9c:	1a2d      	subs	r5, r5, r0
10012c9e:	221a      	movs	r2, #26
10012ca0:	2401      	movs	r4, #1
10012ca2:	e7cf      	b.n	10012c44 <__aeabi_fdiv+0x164>
10012ca4:	026b      	lsls	r3, r5, #9
10012ca6:	d5bc      	bpl.n	10012c22 <__aeabi_fdiv+0x142>
10012ca8:	2400      	movs	r4, #0
10012caa:	2380      	movs	r3, #128	; 0x80
10012cac:	03db      	lsls	r3, r3, #15
10012cae:	431c      	orrs	r4, r3
10012cb0:	0264      	lsls	r4, r4, #9
10012cb2:	0a64      	lsrs	r4, r4, #9
10012cb4:	4642      	mov	r2, r8
10012cb6:	20ff      	movs	r0, #255	; 0xff
10012cb8:	e751      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012cba:	421c      	tst	r4, r3
10012cbc:	d1b3      	bne.n	10012c26 <__aeabi_fdiv+0x146>
10012cbe:	e7f4      	b.n	10012caa <__aeabi_fdiv+0x1ca>
10012cc0:	0021      	movs	r1, r4
10012cc2:	2220      	movs	r2, #32
10012cc4:	40c1      	lsrs	r1, r0
10012cc6:	1a10      	subs	r0, r2, r0
10012cc8:	4084      	lsls	r4, r0
10012cca:	1e62      	subs	r2, r4, #1
10012ccc:	4194      	sbcs	r4, r2
10012cce:	430c      	orrs	r4, r1
10012cd0:	0762      	lsls	r2, r4, #29
10012cd2:	d004      	beq.n	10012cde <__aeabi_fdiv+0x1fe>
10012cd4:	220f      	movs	r2, #15
10012cd6:	4022      	ands	r2, r4
10012cd8:	2a04      	cmp	r2, #4
10012cda:	d000      	beq.n	10012cde <__aeabi_fdiv+0x1fe>
10012cdc:	3404      	adds	r4, #4
10012cde:	0162      	lsls	r2, r4, #5
10012ce0:	d504      	bpl.n	10012cec <__aeabi_fdiv+0x20c>
10012ce2:	2201      	movs	r2, #1
10012ce4:	2001      	movs	r0, #1
10012ce6:	401a      	ands	r2, r3
10012ce8:	2400      	movs	r4, #0
10012cea:	e738      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012cec:	2201      	movs	r2, #1
10012cee:	01a4      	lsls	r4, r4, #6
10012cf0:	0a64      	lsrs	r4, r4, #9
10012cf2:	401a      	ands	r2, r3
10012cf4:	2000      	movs	r0, #0
10012cf6:	e732      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012cf8:	2380      	movs	r3, #128	; 0x80
10012cfa:	03db      	lsls	r3, r3, #15
10012cfc:	431c      	orrs	r4, r3
10012cfe:	0264      	lsls	r4, r4, #9
10012d00:	0a64      	lsrs	r4, r4, #9
10012d02:	4652      	mov	r2, sl
10012d04:	20ff      	movs	r0, #255	; 0xff
10012d06:	e72a      	b.n	10012b5e <__aeabi_fdiv+0x7e>
10012d08:	10016ab4 	.word	0x10016ab4
10012d0c:	10016af4 	.word	0x10016af4
10012d10:	f7ffffff 	.word	0xf7ffffff

10012d14 <__eqsf2>:
10012d14:	0243      	lsls	r3, r0, #9
10012d16:	b570      	push	{r4, r5, r6, lr}
10012d18:	0042      	lsls	r2, r0, #1
10012d1a:	004c      	lsls	r4, r1, #1
10012d1c:	0a5d      	lsrs	r5, r3, #9
10012d1e:	0fc3      	lsrs	r3, r0, #31
10012d20:	0248      	lsls	r0, r1, #9
10012d22:	0e12      	lsrs	r2, r2, #24
10012d24:	0a46      	lsrs	r6, r0, #9
10012d26:	0e24      	lsrs	r4, r4, #24
10012d28:	0fc9      	lsrs	r1, r1, #31
10012d2a:	2aff      	cmp	r2, #255	; 0xff
10012d2c:	d00f      	beq.n	10012d4e <__eqsf2+0x3a>
10012d2e:	2cff      	cmp	r4, #255	; 0xff
10012d30:	d011      	beq.n	10012d56 <__eqsf2+0x42>
10012d32:	2001      	movs	r0, #1
10012d34:	42a2      	cmp	r2, r4
10012d36:	d000      	beq.n	10012d3a <__eqsf2+0x26>
10012d38:	bd70      	pop	{r4, r5, r6, pc}
10012d3a:	42b5      	cmp	r5, r6
10012d3c:	d1fc      	bne.n	10012d38 <__eqsf2+0x24>
10012d3e:	428b      	cmp	r3, r1
10012d40:	d00d      	beq.n	10012d5e <__eqsf2+0x4a>
10012d42:	2a00      	cmp	r2, #0
10012d44:	d1f8      	bne.n	10012d38 <__eqsf2+0x24>
10012d46:	0028      	movs	r0, r5
10012d48:	1e43      	subs	r3, r0, #1
10012d4a:	4198      	sbcs	r0, r3
10012d4c:	e7f4      	b.n	10012d38 <__eqsf2+0x24>
10012d4e:	2001      	movs	r0, #1
10012d50:	2d00      	cmp	r5, #0
10012d52:	d1f1      	bne.n	10012d38 <__eqsf2+0x24>
10012d54:	e7eb      	b.n	10012d2e <__eqsf2+0x1a>
10012d56:	2001      	movs	r0, #1
10012d58:	2e00      	cmp	r6, #0
10012d5a:	d1ed      	bne.n	10012d38 <__eqsf2+0x24>
10012d5c:	e7e9      	b.n	10012d32 <__eqsf2+0x1e>
10012d5e:	2000      	movs	r0, #0
10012d60:	e7ea      	b.n	10012d38 <__eqsf2+0x24>
10012d62:	46c0      	nop			; (mov r8, r8)

10012d64 <__gesf2>:
10012d64:	0243      	lsls	r3, r0, #9
10012d66:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d68:	0042      	lsls	r2, r0, #1
10012d6a:	0a5d      	lsrs	r5, r3, #9
10012d6c:	0fc3      	lsrs	r3, r0, #31
10012d6e:	0248      	lsls	r0, r1, #9
10012d70:	0a44      	lsrs	r4, r0, #9
10012d72:	0048      	lsls	r0, r1, #1
10012d74:	0e12      	lsrs	r2, r2, #24
10012d76:	0e00      	lsrs	r0, r0, #24
10012d78:	0fc9      	lsrs	r1, r1, #31
10012d7a:	2aff      	cmp	r2, #255	; 0xff
10012d7c:	d01f      	beq.n	10012dbe <__gesf2+0x5a>
10012d7e:	28ff      	cmp	r0, #255	; 0xff
10012d80:	d022      	beq.n	10012dc8 <__gesf2+0x64>
10012d82:	2a00      	cmp	r2, #0
10012d84:	d109      	bne.n	10012d9a <__gesf2+0x36>
10012d86:	426e      	negs	r6, r5
10012d88:	416e      	adcs	r6, r5
10012d8a:	2800      	cmp	r0, #0
10012d8c:	d10f      	bne.n	10012dae <__gesf2+0x4a>
10012d8e:	2c00      	cmp	r4, #0
10012d90:	d10d      	bne.n	10012dae <__gesf2+0x4a>
10012d92:	2000      	movs	r0, #0
10012d94:	2d00      	cmp	r5, #0
10012d96:	d009      	beq.n	10012dac <__gesf2+0x48>
10012d98:	e005      	b.n	10012da6 <__gesf2+0x42>
10012d9a:	2800      	cmp	r0, #0
10012d9c:	d101      	bne.n	10012da2 <__gesf2+0x3e>
10012d9e:	2c00      	cmp	r4, #0
10012da0:	d001      	beq.n	10012da6 <__gesf2+0x42>
10012da2:	428b      	cmp	r3, r1
10012da4:	d013      	beq.n	10012dce <__gesf2+0x6a>
10012da6:	4258      	negs	r0, r3
10012da8:	2301      	movs	r3, #1
10012daa:	4318      	orrs	r0, r3
10012dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012dae:	2e00      	cmp	r6, #0
10012db0:	d0f7      	beq.n	10012da2 <__gesf2+0x3e>
10012db2:	4248      	negs	r0, r1
10012db4:	4141      	adcs	r1, r0
10012db6:	2001      	movs	r0, #1
10012db8:	4249      	negs	r1, r1
10012dba:	4308      	orrs	r0, r1
10012dbc:	e7f6      	b.n	10012dac <__gesf2+0x48>
10012dbe:	2d00      	cmp	r5, #0
10012dc0:	d0dd      	beq.n	10012d7e <__gesf2+0x1a>
10012dc2:	2002      	movs	r0, #2
10012dc4:	4240      	negs	r0, r0
10012dc6:	e7f1      	b.n	10012dac <__gesf2+0x48>
10012dc8:	2c00      	cmp	r4, #0
10012dca:	d0da      	beq.n	10012d82 <__gesf2+0x1e>
10012dcc:	e7f9      	b.n	10012dc2 <__gesf2+0x5e>
10012dce:	4282      	cmp	r2, r0
10012dd0:	dce9      	bgt.n	10012da6 <__gesf2+0x42>
10012dd2:	db04      	blt.n	10012dde <__gesf2+0x7a>
10012dd4:	42a5      	cmp	r5, r4
10012dd6:	d8e6      	bhi.n	10012da6 <__gesf2+0x42>
10012dd8:	2000      	movs	r0, #0
10012dda:	42a5      	cmp	r5, r4
10012ddc:	d2e6      	bcs.n	10012dac <__gesf2+0x48>
10012dde:	4258      	negs	r0, r3
10012de0:	4143      	adcs	r3, r0
10012de2:	2001      	movs	r0, #1
10012de4:	425b      	negs	r3, r3
10012de6:	4318      	orrs	r0, r3
10012de8:	e7e0      	b.n	10012dac <__gesf2+0x48>
10012dea:	46c0      	nop			; (mov r8, r8)

10012dec <__lesf2>:
10012dec:	0243      	lsls	r3, r0, #9
10012dee:	b5f0      	push	{r4, r5, r6, r7, lr}
10012df0:	0042      	lsls	r2, r0, #1
10012df2:	004c      	lsls	r4, r1, #1
10012df4:	0a5e      	lsrs	r6, r3, #9
10012df6:	0fc3      	lsrs	r3, r0, #31
10012df8:	0248      	lsls	r0, r1, #9
10012dfa:	0e12      	lsrs	r2, r2, #24
10012dfc:	0a45      	lsrs	r5, r0, #9
10012dfe:	0e24      	lsrs	r4, r4, #24
10012e00:	0fc9      	lsrs	r1, r1, #31
10012e02:	2aff      	cmp	r2, #255	; 0xff
10012e04:	d017      	beq.n	10012e36 <__lesf2+0x4a>
10012e06:	2cff      	cmp	r4, #255	; 0xff
10012e08:	d019      	beq.n	10012e3e <__lesf2+0x52>
10012e0a:	2a00      	cmp	r2, #0
10012e0c:	d10b      	bne.n	10012e26 <__lesf2+0x3a>
10012e0e:	4270      	negs	r0, r6
10012e10:	4170      	adcs	r0, r6
10012e12:	2c00      	cmp	r4, #0
10012e14:	d017      	beq.n	10012e46 <__lesf2+0x5a>
10012e16:	2800      	cmp	r0, #0
10012e18:	d007      	beq.n	10012e2a <__lesf2+0x3e>
10012e1a:	4248      	negs	r0, r1
10012e1c:	4141      	adcs	r1, r0
10012e1e:	2001      	movs	r0, #1
10012e20:	4249      	negs	r1, r1
10012e22:	4308      	orrs	r0, r1
10012e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e26:	2c00      	cmp	r4, #0
10012e28:	d013      	beq.n	10012e52 <__lesf2+0x66>
10012e2a:	428b      	cmp	r3, r1
10012e2c:	d014      	beq.n	10012e58 <__lesf2+0x6c>
10012e2e:	4258      	negs	r0, r3
10012e30:	2301      	movs	r3, #1
10012e32:	4318      	orrs	r0, r3
10012e34:	e7f6      	b.n	10012e24 <__lesf2+0x38>
10012e36:	2002      	movs	r0, #2
10012e38:	2e00      	cmp	r6, #0
10012e3a:	d1f3      	bne.n	10012e24 <__lesf2+0x38>
10012e3c:	e7e3      	b.n	10012e06 <__lesf2+0x1a>
10012e3e:	2002      	movs	r0, #2
10012e40:	2d00      	cmp	r5, #0
10012e42:	d1ef      	bne.n	10012e24 <__lesf2+0x38>
10012e44:	e7e1      	b.n	10012e0a <__lesf2+0x1e>
10012e46:	2d00      	cmp	r5, #0
10012e48:	d1e5      	bne.n	10012e16 <__lesf2+0x2a>
10012e4a:	2000      	movs	r0, #0
10012e4c:	2e00      	cmp	r6, #0
10012e4e:	d0e9      	beq.n	10012e24 <__lesf2+0x38>
10012e50:	e7ed      	b.n	10012e2e <__lesf2+0x42>
10012e52:	2d00      	cmp	r5, #0
10012e54:	d1e9      	bne.n	10012e2a <__lesf2+0x3e>
10012e56:	e7ea      	b.n	10012e2e <__lesf2+0x42>
10012e58:	42a2      	cmp	r2, r4
10012e5a:	dce8      	bgt.n	10012e2e <__lesf2+0x42>
10012e5c:	db04      	blt.n	10012e68 <__lesf2+0x7c>
10012e5e:	42ae      	cmp	r6, r5
10012e60:	d8e5      	bhi.n	10012e2e <__lesf2+0x42>
10012e62:	2000      	movs	r0, #0
10012e64:	42ae      	cmp	r6, r5
10012e66:	d2dd      	bcs.n	10012e24 <__lesf2+0x38>
10012e68:	4258      	negs	r0, r3
10012e6a:	4143      	adcs	r3, r0
10012e6c:	2001      	movs	r0, #1
10012e6e:	425b      	negs	r3, r3
10012e70:	4318      	orrs	r0, r3
10012e72:	e7d7      	b.n	10012e24 <__lesf2+0x38>

10012e74 <__aeabi_fmul>:
10012e74:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e76:	4657      	mov	r7, sl
10012e78:	464e      	mov	r6, r9
10012e7a:	4645      	mov	r5, r8
10012e7c:	0043      	lsls	r3, r0, #1
10012e7e:	b4e0      	push	{r5, r6, r7}
10012e80:	0246      	lsls	r6, r0, #9
10012e82:	4688      	mov	r8, r1
10012e84:	0a76      	lsrs	r6, r6, #9
10012e86:	0e1f      	lsrs	r7, r3, #24
10012e88:	0fc4      	lsrs	r4, r0, #31
10012e8a:	2f00      	cmp	r7, #0
10012e8c:	d047      	beq.n	10012f1e <__aeabi_fmul+0xaa>
10012e8e:	2fff      	cmp	r7, #255	; 0xff
10012e90:	d025      	beq.n	10012ede <__aeabi_fmul+0x6a>
10012e92:	2300      	movs	r3, #0
10012e94:	2580      	movs	r5, #128	; 0x80
10012e96:	469a      	mov	sl, r3
10012e98:	4699      	mov	r9, r3
10012e9a:	00f6      	lsls	r6, r6, #3
10012e9c:	04ed      	lsls	r5, r5, #19
10012e9e:	432e      	orrs	r6, r5
10012ea0:	3f7f      	subs	r7, #127	; 0x7f
10012ea2:	4643      	mov	r3, r8
10012ea4:	4642      	mov	r2, r8
10012ea6:	025d      	lsls	r5, r3, #9
10012ea8:	0fd2      	lsrs	r2, r2, #31
10012eaa:	005b      	lsls	r3, r3, #1
10012eac:	0a6d      	lsrs	r5, r5, #9
10012eae:	0e1b      	lsrs	r3, r3, #24
10012eb0:	4690      	mov	r8, r2
10012eb2:	d040      	beq.n	10012f36 <__aeabi_fmul+0xc2>
10012eb4:	2bff      	cmp	r3, #255	; 0xff
10012eb6:	d039      	beq.n	10012f2c <__aeabi_fmul+0xb8>
10012eb8:	2280      	movs	r2, #128	; 0x80
10012eba:	2000      	movs	r0, #0
10012ebc:	00ed      	lsls	r5, r5, #3
10012ebe:	04d2      	lsls	r2, r2, #19
10012ec0:	4315      	orrs	r5, r2
10012ec2:	3b7f      	subs	r3, #127	; 0x7f
10012ec4:	18fb      	adds	r3, r7, r3
10012ec6:	4642      	mov	r2, r8
10012ec8:	4657      	mov	r7, sl
10012eca:	1c59      	adds	r1, r3, #1
10012ecc:	4062      	eors	r2, r4
10012ece:	468c      	mov	ip, r1
10012ed0:	4307      	orrs	r7, r0
10012ed2:	2f0f      	cmp	r7, #15
10012ed4:	d85c      	bhi.n	10012f90 <__aeabi_fmul+0x11c>
10012ed6:	496f      	ldr	r1, [pc, #444]	; (10013094 <__aeabi_fmul+0x220>)
10012ed8:	00bf      	lsls	r7, r7, #2
10012eda:	59c9      	ldr	r1, [r1, r7]
10012edc:	468f      	mov	pc, r1
10012ede:	2e00      	cmp	r6, #0
10012ee0:	d145      	bne.n	10012f6e <__aeabi_fmul+0xfa>
10012ee2:	2308      	movs	r3, #8
10012ee4:	469a      	mov	sl, r3
10012ee6:	3b06      	subs	r3, #6
10012ee8:	4699      	mov	r9, r3
10012eea:	e7da      	b.n	10012ea2 <__aeabi_fmul+0x2e>
10012eec:	4642      	mov	r2, r8
10012eee:	2802      	cmp	r0, #2
10012ef0:	d02d      	beq.n	10012f4e <__aeabi_fmul+0xda>
10012ef2:	2803      	cmp	r0, #3
10012ef4:	d100      	bne.n	10012ef8 <__aeabi_fmul+0x84>
10012ef6:	e0c3      	b.n	10013080 <__aeabi_fmul+0x20c>
10012ef8:	2801      	cmp	r0, #1
10012efa:	d000      	beq.n	10012efe <__aeabi_fmul+0x8a>
10012efc:	e0a2      	b.n	10013044 <__aeabi_fmul+0x1d0>
10012efe:	2500      	movs	r5, #0
10012f00:	2600      	movs	r6, #0
10012f02:	4002      	ands	r2, r0
10012f04:	b2d4      	uxtb	r4, r2
10012f06:	0276      	lsls	r6, r6, #9
10012f08:	05ed      	lsls	r5, r5, #23
10012f0a:	0a76      	lsrs	r6, r6, #9
10012f0c:	432e      	orrs	r6, r5
10012f0e:	07e4      	lsls	r4, r4, #31
10012f10:	4326      	orrs	r6, r4
10012f12:	0030      	movs	r0, r6
10012f14:	bc1c      	pop	{r2, r3, r4}
10012f16:	4690      	mov	r8, r2
10012f18:	4699      	mov	r9, r3
10012f1a:	46a2      	mov	sl, r4
10012f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f1e:	2e00      	cmp	r6, #0
10012f20:	d11a      	bne.n	10012f58 <__aeabi_fmul+0xe4>
10012f22:	2304      	movs	r3, #4
10012f24:	469a      	mov	sl, r3
10012f26:	3b03      	subs	r3, #3
10012f28:	4699      	mov	r9, r3
10012f2a:	e7ba      	b.n	10012ea2 <__aeabi_fmul+0x2e>
10012f2c:	002a      	movs	r2, r5
10012f2e:	1e51      	subs	r1, r2, #1
10012f30:	418a      	sbcs	r2, r1
10012f32:	1c90      	adds	r0, r2, #2
10012f34:	e7c6      	b.n	10012ec4 <__aeabi_fmul+0x50>
10012f36:	2001      	movs	r0, #1
10012f38:	2d00      	cmp	r5, #0
10012f3a:	d0c3      	beq.n	10012ec4 <__aeabi_fmul+0x50>
10012f3c:	0028      	movs	r0, r5
10012f3e:	f001 f9dd 	bl	100142fc <__clzsi2>
10012f42:	1f43      	subs	r3, r0, #5
10012f44:	3076      	adds	r0, #118	; 0x76
10012f46:	409d      	lsls	r5, r3
10012f48:	4243      	negs	r3, r0
10012f4a:	2000      	movs	r0, #0
10012f4c:	e7ba      	b.n	10012ec4 <__aeabi_fmul+0x50>
10012f4e:	2401      	movs	r4, #1
10012f50:	25ff      	movs	r5, #255	; 0xff
10012f52:	4014      	ands	r4, r2
10012f54:	2600      	movs	r6, #0
10012f56:	e7d6      	b.n	10012f06 <__aeabi_fmul+0x92>
10012f58:	0030      	movs	r0, r6
10012f5a:	f001 f9cf 	bl	100142fc <__clzsi2>
10012f5e:	1f43      	subs	r3, r0, #5
10012f60:	409e      	lsls	r6, r3
10012f62:	2300      	movs	r3, #0
10012f64:	3076      	adds	r0, #118	; 0x76
10012f66:	4247      	negs	r7, r0
10012f68:	469a      	mov	sl, r3
10012f6a:	4699      	mov	r9, r3
10012f6c:	e799      	b.n	10012ea2 <__aeabi_fmul+0x2e>
10012f6e:	230c      	movs	r3, #12
10012f70:	469a      	mov	sl, r3
10012f72:	3b09      	subs	r3, #9
10012f74:	4699      	mov	r9, r3
10012f76:	e794      	b.n	10012ea2 <__aeabi_fmul+0x2e>
10012f78:	2680      	movs	r6, #128	; 0x80
10012f7a:	2400      	movs	r4, #0
10012f7c:	03f6      	lsls	r6, r6, #15
10012f7e:	25ff      	movs	r5, #255	; 0xff
10012f80:	e7c1      	b.n	10012f06 <__aeabi_fmul+0x92>
10012f82:	0035      	movs	r5, r6
10012f84:	4648      	mov	r0, r9
10012f86:	e7b2      	b.n	10012eee <__aeabi_fmul+0x7a>
10012f88:	0035      	movs	r5, r6
10012f8a:	0022      	movs	r2, r4
10012f8c:	4648      	mov	r0, r9
10012f8e:	e7ae      	b.n	10012eee <__aeabi_fmul+0x7a>
10012f90:	0429      	lsls	r1, r5, #16
10012f92:	0c09      	lsrs	r1, r1, #16
10012f94:	0008      	movs	r0, r1
10012f96:	0c37      	lsrs	r7, r6, #16
10012f98:	0436      	lsls	r6, r6, #16
10012f9a:	0c36      	lsrs	r6, r6, #16
10012f9c:	0c2c      	lsrs	r4, r5, #16
10012f9e:	4379      	muls	r1, r7
10012fa0:	4370      	muls	r0, r6
10012fa2:	4367      	muls	r7, r4
10012fa4:	4374      	muls	r4, r6
10012fa6:	0c06      	lsrs	r6, r0, #16
10012fa8:	1864      	adds	r4, r4, r1
10012faa:	1936      	adds	r6, r6, r4
10012fac:	42b1      	cmp	r1, r6
10012fae:	d903      	bls.n	10012fb8 <__aeabi_fmul+0x144>
10012fb0:	2180      	movs	r1, #128	; 0x80
10012fb2:	0249      	lsls	r1, r1, #9
10012fb4:	4688      	mov	r8, r1
10012fb6:	4447      	add	r7, r8
10012fb8:	0400      	lsls	r0, r0, #16
10012fba:	0c00      	lsrs	r0, r0, #16
10012fbc:	0431      	lsls	r1, r6, #16
10012fbe:	1809      	adds	r1, r1, r0
10012fc0:	018d      	lsls	r5, r1, #6
10012fc2:	1e68      	subs	r0, r5, #1
10012fc4:	4185      	sbcs	r5, r0
10012fc6:	0e89      	lsrs	r1, r1, #26
10012fc8:	4329      	orrs	r1, r5
10012fca:	0c35      	lsrs	r5, r6, #16
10012fcc:	19ed      	adds	r5, r5, r7
10012fce:	01ad      	lsls	r5, r5, #6
10012fd0:	430d      	orrs	r5, r1
10012fd2:	0129      	lsls	r1, r5, #4
10012fd4:	d504      	bpl.n	10012fe0 <__aeabi_fmul+0x16c>
10012fd6:	2301      	movs	r3, #1
10012fd8:	0869      	lsrs	r1, r5, #1
10012fda:	401d      	ands	r5, r3
10012fdc:	4663      	mov	r3, ip
10012fde:	430d      	orrs	r5, r1
10012fe0:	0019      	movs	r1, r3
10012fe2:	317f      	adds	r1, #127	; 0x7f
10012fe4:	2900      	cmp	r1, #0
10012fe6:	dd25      	ble.n	10013034 <__aeabi_fmul+0x1c0>
10012fe8:	0768      	lsls	r0, r5, #29
10012fea:	d004      	beq.n	10012ff6 <__aeabi_fmul+0x182>
10012fec:	200f      	movs	r0, #15
10012fee:	4028      	ands	r0, r5
10012ff0:	2804      	cmp	r0, #4
10012ff2:	d000      	beq.n	10012ff6 <__aeabi_fmul+0x182>
10012ff4:	3504      	adds	r5, #4
10012ff6:	0128      	lsls	r0, r5, #4
10012ff8:	d503      	bpl.n	10013002 <__aeabi_fmul+0x18e>
10012ffa:	4927      	ldr	r1, [pc, #156]	; (10013098 <__aeabi_fmul+0x224>)
10012ffc:	3380      	adds	r3, #128	; 0x80
10012ffe:	400d      	ands	r5, r1
10013000:	0019      	movs	r1, r3
10013002:	29fe      	cmp	r1, #254	; 0xfe
10013004:	dca3      	bgt.n	10012f4e <__aeabi_fmul+0xda>
10013006:	2401      	movs	r4, #1
10013008:	01ad      	lsls	r5, r5, #6
1001300a:	0a6e      	lsrs	r6, r5, #9
1001300c:	4014      	ands	r4, r2
1001300e:	b2cd      	uxtb	r5, r1
10013010:	e779      	b.n	10012f06 <__aeabi_fmul+0x92>
10013012:	2080      	movs	r0, #128	; 0x80
10013014:	03c0      	lsls	r0, r0, #15
10013016:	4206      	tst	r6, r0
10013018:	d007      	beq.n	1001302a <__aeabi_fmul+0x1b6>
1001301a:	4205      	tst	r5, r0
1001301c:	d105      	bne.n	1001302a <__aeabi_fmul+0x1b6>
1001301e:	4328      	orrs	r0, r5
10013020:	0246      	lsls	r6, r0, #9
10013022:	0a76      	lsrs	r6, r6, #9
10013024:	4644      	mov	r4, r8
10013026:	25ff      	movs	r5, #255	; 0xff
10013028:	e76d      	b.n	10012f06 <__aeabi_fmul+0x92>
1001302a:	4306      	orrs	r6, r0
1001302c:	0276      	lsls	r6, r6, #9
1001302e:	0a76      	lsrs	r6, r6, #9
10013030:	25ff      	movs	r5, #255	; 0xff
10013032:	e768      	b.n	10012f06 <__aeabi_fmul+0x92>
10013034:	2401      	movs	r4, #1
10013036:	1a61      	subs	r1, r4, r1
10013038:	291b      	cmp	r1, #27
1001303a:	dd05      	ble.n	10013048 <__aeabi_fmul+0x1d4>
1001303c:	4014      	ands	r4, r2
1001303e:	2500      	movs	r5, #0
10013040:	2600      	movs	r6, #0
10013042:	e760      	b.n	10012f06 <__aeabi_fmul+0x92>
10013044:	4663      	mov	r3, ip
10013046:	e7cb      	b.n	10012fe0 <__aeabi_fmul+0x16c>
10013048:	002e      	movs	r6, r5
1001304a:	2320      	movs	r3, #32
1001304c:	40ce      	lsrs	r6, r1
1001304e:	1a59      	subs	r1, r3, r1
10013050:	408d      	lsls	r5, r1
10013052:	1e6b      	subs	r3, r5, #1
10013054:	419d      	sbcs	r5, r3
10013056:	432e      	orrs	r6, r5
10013058:	0773      	lsls	r3, r6, #29
1001305a:	d004      	beq.n	10013066 <__aeabi_fmul+0x1f2>
1001305c:	230f      	movs	r3, #15
1001305e:	4033      	ands	r3, r6
10013060:	2b04      	cmp	r3, #4
10013062:	d000      	beq.n	10013066 <__aeabi_fmul+0x1f2>
10013064:	3604      	adds	r6, #4
10013066:	0173      	lsls	r3, r6, #5
10013068:	d504      	bpl.n	10013074 <__aeabi_fmul+0x200>
1001306a:	2401      	movs	r4, #1
1001306c:	2501      	movs	r5, #1
1001306e:	4014      	ands	r4, r2
10013070:	2600      	movs	r6, #0
10013072:	e748      	b.n	10012f06 <__aeabi_fmul+0x92>
10013074:	2401      	movs	r4, #1
10013076:	01b6      	lsls	r6, r6, #6
10013078:	0a76      	lsrs	r6, r6, #9
1001307a:	4014      	ands	r4, r2
1001307c:	2500      	movs	r5, #0
1001307e:	e742      	b.n	10012f06 <__aeabi_fmul+0x92>
10013080:	2680      	movs	r6, #128	; 0x80
10013082:	2401      	movs	r4, #1
10013084:	03f6      	lsls	r6, r6, #15
10013086:	432e      	orrs	r6, r5
10013088:	0276      	lsls	r6, r6, #9
1001308a:	0a76      	lsrs	r6, r6, #9
1001308c:	4014      	ands	r4, r2
1001308e:	25ff      	movs	r5, #255	; 0xff
10013090:	e739      	b.n	10012f06 <__aeabi_fmul+0x92>
10013092:	46c0      	nop			; (mov r8, r8)
10013094:	10016b34 	.word	0x10016b34
10013098:	f7ffffff 	.word	0xf7ffffff

1001309c <__aeabi_fsub>:
1001309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001309e:	024a      	lsls	r2, r1, #9
100130a0:	004e      	lsls	r6, r1, #1
100130a2:	0243      	lsls	r3, r0, #9
100130a4:	0044      	lsls	r4, r0, #1
100130a6:	0e24      	lsrs	r4, r4, #24
100130a8:	0fc5      	lsrs	r5, r0, #31
100130aa:	099b      	lsrs	r3, r3, #6
100130ac:	0e36      	lsrs	r6, r6, #24
100130ae:	0fc9      	lsrs	r1, r1, #31
100130b0:	0992      	lsrs	r2, r2, #6
100130b2:	2eff      	cmp	r6, #255	; 0xff
100130b4:	d100      	bne.n	100130b8 <__aeabi_fsub+0x1c>
100130b6:	e083      	b.n	100131c0 <__aeabi_fsub+0x124>
100130b8:	2001      	movs	r0, #1
100130ba:	4041      	eors	r1, r0
100130bc:	1ba0      	subs	r0, r4, r6
100130be:	42a9      	cmp	r1, r5
100130c0:	d05c      	beq.n	1001317c <__aeabi_fsub+0xe0>
100130c2:	2800      	cmp	r0, #0
100130c4:	dc00      	bgt.n	100130c8 <__aeabi_fsub+0x2c>
100130c6:	e095      	b.n	100131f4 <__aeabi_fsub+0x158>
100130c8:	2e00      	cmp	r6, #0
100130ca:	d11c      	bne.n	10013106 <__aeabi_fsub+0x6a>
100130cc:	2a00      	cmp	r2, #0
100130ce:	d000      	beq.n	100130d2 <__aeabi_fsub+0x36>
100130d0:	e081      	b.n	100131d6 <__aeabi_fsub+0x13a>
100130d2:	075a      	lsls	r2, r3, #29
100130d4:	d004      	beq.n	100130e0 <__aeabi_fsub+0x44>
100130d6:	220f      	movs	r2, #15
100130d8:	401a      	ands	r2, r3
100130da:	2a04      	cmp	r2, #4
100130dc:	d000      	beq.n	100130e0 <__aeabi_fsub+0x44>
100130de:	3304      	adds	r3, #4
100130e0:	015a      	lsls	r2, r3, #5
100130e2:	d53b      	bpl.n	1001315c <__aeabi_fsub+0xc0>
100130e4:	3401      	adds	r4, #1
100130e6:	2cff      	cmp	r4, #255	; 0xff
100130e8:	d100      	bne.n	100130ec <__aeabi_fsub+0x50>
100130ea:	e091      	b.n	10013210 <__aeabi_fsub+0x174>
100130ec:	2001      	movs	r0, #1
100130ee:	019b      	lsls	r3, r3, #6
100130f0:	0a5b      	lsrs	r3, r3, #9
100130f2:	b2e4      	uxtb	r4, r4
100130f4:	4005      	ands	r5, r0
100130f6:	025b      	lsls	r3, r3, #9
100130f8:	05e4      	lsls	r4, r4, #23
100130fa:	0a5b      	lsrs	r3, r3, #9
100130fc:	07ed      	lsls	r5, r5, #31
100130fe:	4323      	orrs	r3, r4
10013100:	432b      	orrs	r3, r5
10013102:	0018      	movs	r0, r3
10013104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013106:	2cff      	cmp	r4, #255	; 0xff
10013108:	d0e3      	beq.n	100130d2 <__aeabi_fsub+0x36>
1001310a:	2180      	movs	r1, #128	; 0x80
1001310c:	04c9      	lsls	r1, r1, #19
1001310e:	430a      	orrs	r2, r1
10013110:	281b      	cmp	r0, #27
10013112:	dd00      	ble.n	10013116 <__aeabi_fsub+0x7a>
10013114:	e090      	b.n	10013238 <__aeabi_fsub+0x19c>
10013116:	0016      	movs	r6, r2
10013118:	2120      	movs	r1, #32
1001311a:	40c6      	lsrs	r6, r0
1001311c:	1a08      	subs	r0, r1, r0
1001311e:	4082      	lsls	r2, r0
10013120:	1e51      	subs	r1, r2, #1
10013122:	418a      	sbcs	r2, r1
10013124:	4332      	orrs	r2, r6
10013126:	1a9b      	subs	r3, r3, r2
10013128:	015a      	lsls	r2, r3, #5
1001312a:	d515      	bpl.n	10013158 <__aeabi_fsub+0xbc>
1001312c:	019b      	lsls	r3, r3, #6
1001312e:	099e      	lsrs	r6, r3, #6
10013130:	0030      	movs	r0, r6
10013132:	f001 f8e3 	bl	100142fc <__clzsi2>
10013136:	3805      	subs	r0, #5
10013138:	4086      	lsls	r6, r0
1001313a:	4284      	cmp	r4, r0
1001313c:	dc6c      	bgt.n	10013218 <__aeabi_fsub+0x17c>
1001313e:	1b04      	subs	r4, r0, r4
10013140:	0033      	movs	r3, r6
10013142:	2020      	movs	r0, #32
10013144:	3401      	adds	r4, #1
10013146:	40e3      	lsrs	r3, r4
10013148:	1b04      	subs	r4, r0, r4
1001314a:	40a6      	lsls	r6, r4
1001314c:	1e72      	subs	r2, r6, #1
1001314e:	4196      	sbcs	r6, r2
10013150:	2400      	movs	r4, #0
10013152:	4333      	orrs	r3, r6
10013154:	e7bd      	b.n	100130d2 <__aeabi_fsub+0x36>
10013156:	000d      	movs	r5, r1
10013158:	075a      	lsls	r2, r3, #29
1001315a:	d1bc      	bne.n	100130d6 <__aeabi_fsub+0x3a>
1001315c:	08df      	lsrs	r7, r3, #3
1001315e:	2301      	movs	r3, #1
10013160:	401d      	ands	r5, r3
10013162:	2cff      	cmp	r4, #255	; 0xff
10013164:	d133      	bne.n	100131ce <__aeabi_fsub+0x132>
10013166:	2f00      	cmp	r7, #0
10013168:	d100      	bne.n	1001316c <__aeabi_fsub+0xd0>
1001316a:	e090      	b.n	1001328e <__aeabi_fsub+0x1f2>
1001316c:	2280      	movs	r2, #128	; 0x80
1001316e:	03d2      	lsls	r2, r2, #15
10013170:	0013      	movs	r3, r2
10013172:	433b      	orrs	r3, r7
10013174:	025b      	lsls	r3, r3, #9
10013176:	0a5b      	lsrs	r3, r3, #9
10013178:	24ff      	movs	r4, #255	; 0xff
1001317a:	e7bc      	b.n	100130f6 <__aeabi_fsub+0x5a>
1001317c:	2800      	cmp	r0, #0
1001317e:	dd4f      	ble.n	10013220 <__aeabi_fsub+0x184>
10013180:	2e00      	cmp	r6, #0
10013182:	d02e      	beq.n	100131e2 <__aeabi_fsub+0x146>
10013184:	2cff      	cmp	r4, #255	; 0xff
10013186:	d0a4      	beq.n	100130d2 <__aeabi_fsub+0x36>
10013188:	2580      	movs	r5, #128	; 0x80
1001318a:	04ed      	lsls	r5, r5, #19
1001318c:	432a      	orrs	r2, r5
1001318e:	281b      	cmp	r0, #27
10013190:	dd00      	ble.n	10013194 <__aeabi_fsub+0xf8>
10013192:	e097      	b.n	100132c4 <__aeabi_fsub+0x228>
10013194:	0016      	movs	r6, r2
10013196:	2520      	movs	r5, #32
10013198:	40c6      	lsrs	r6, r0
1001319a:	1a28      	subs	r0, r5, r0
1001319c:	4082      	lsls	r2, r0
1001319e:	1e50      	subs	r0, r2, #1
100131a0:	4182      	sbcs	r2, r0
100131a2:	4332      	orrs	r2, r6
100131a4:	189b      	adds	r3, r3, r2
100131a6:	015a      	lsls	r2, r3, #5
100131a8:	d5d5      	bpl.n	10013156 <__aeabi_fsub+0xba>
100131aa:	3401      	adds	r4, #1
100131ac:	2cff      	cmp	r4, #255	; 0xff
100131ae:	d06d      	beq.n	1001328c <__aeabi_fsub+0x1f0>
100131b0:	2201      	movs	r2, #1
100131b2:	487b      	ldr	r0, [pc, #492]	; (100133a0 <__aeabi_fsub+0x304>)
100131b4:	401a      	ands	r2, r3
100131b6:	085b      	lsrs	r3, r3, #1
100131b8:	4003      	ands	r3, r0
100131ba:	4313      	orrs	r3, r2
100131bc:	000d      	movs	r5, r1
100131be:	e788      	b.n	100130d2 <__aeabi_fsub+0x36>
100131c0:	2a00      	cmp	r2, #0
100131c2:	d000      	beq.n	100131c6 <__aeabi_fsub+0x12a>
100131c4:	e77a      	b.n	100130bc <__aeabi_fsub+0x20>
100131c6:	e777      	b.n	100130b8 <__aeabi_fsub+0x1c>
100131c8:	1e03      	subs	r3, r0, #0
100131ca:	d1c5      	bne.n	10013158 <__aeabi_fsub+0xbc>
100131cc:	2500      	movs	r5, #0
100131ce:	027b      	lsls	r3, r7, #9
100131d0:	0a5b      	lsrs	r3, r3, #9
100131d2:	b2e4      	uxtb	r4, r4
100131d4:	e78f      	b.n	100130f6 <__aeabi_fsub+0x5a>
100131d6:	3801      	subs	r0, #1
100131d8:	2800      	cmp	r0, #0
100131da:	d0a4      	beq.n	10013126 <__aeabi_fsub+0x8a>
100131dc:	2cff      	cmp	r4, #255	; 0xff
100131de:	d197      	bne.n	10013110 <__aeabi_fsub+0x74>
100131e0:	e777      	b.n	100130d2 <__aeabi_fsub+0x36>
100131e2:	2a00      	cmp	r2, #0
100131e4:	d100      	bne.n	100131e8 <__aeabi_fsub+0x14c>
100131e6:	e774      	b.n	100130d2 <__aeabi_fsub+0x36>
100131e8:	3801      	subs	r0, #1
100131ea:	2800      	cmp	r0, #0
100131ec:	d0da      	beq.n	100131a4 <__aeabi_fsub+0x108>
100131ee:	2cff      	cmp	r4, #255	; 0xff
100131f0:	d1cd      	bne.n	1001318e <__aeabi_fsub+0xf2>
100131f2:	e76e      	b.n	100130d2 <__aeabi_fsub+0x36>
100131f4:	2800      	cmp	r0, #0
100131f6:	d121      	bne.n	1001323c <__aeabi_fsub+0x1a0>
100131f8:	1c60      	adds	r0, r4, #1
100131fa:	b2c0      	uxtb	r0, r0
100131fc:	2801      	cmp	r0, #1
100131fe:	dd58      	ble.n	100132b2 <__aeabi_fsub+0x216>
10013200:	2780      	movs	r7, #128	; 0x80
10013202:	1a9e      	subs	r6, r3, r2
10013204:	04ff      	lsls	r7, r7, #19
10013206:	4037      	ands	r7, r6
10013208:	d02f      	beq.n	1001326a <__aeabi_fsub+0x1ce>
1001320a:	1ad6      	subs	r6, r2, r3
1001320c:	000d      	movs	r5, r1
1001320e:	e78f      	b.n	10013130 <__aeabi_fsub+0x94>
10013210:	2301      	movs	r3, #1
10013212:	401d      	ands	r5, r3
10013214:	2300      	movs	r3, #0
10013216:	e76e      	b.n	100130f6 <__aeabi_fsub+0x5a>
10013218:	4b62      	ldr	r3, [pc, #392]	; (100133a4 <__aeabi_fsub+0x308>)
1001321a:	1a24      	subs	r4, r4, r0
1001321c:	4033      	ands	r3, r6
1001321e:	e758      	b.n	100130d2 <__aeabi_fsub+0x36>
10013220:	2800      	cmp	r0, #0
10013222:	d151      	bne.n	100132c8 <__aeabi_fsub+0x22c>
10013224:	1c60      	adds	r0, r4, #1
10013226:	b2c6      	uxtb	r6, r0
10013228:	2e01      	cmp	r6, #1
1001322a:	dd33      	ble.n	10013294 <__aeabi_fsub+0x1f8>
1001322c:	28ff      	cmp	r0, #255	; 0xff
1001322e:	d02d      	beq.n	1001328c <__aeabi_fsub+0x1f0>
10013230:	189b      	adds	r3, r3, r2
10013232:	085b      	lsrs	r3, r3, #1
10013234:	0004      	movs	r4, r0
10013236:	e74c      	b.n	100130d2 <__aeabi_fsub+0x36>
10013238:	2201      	movs	r2, #1
1001323a:	e774      	b.n	10013126 <__aeabi_fsub+0x8a>
1001323c:	2c00      	cmp	r4, #0
1001323e:	d01a      	beq.n	10013276 <__aeabi_fsub+0x1da>
10013240:	2eff      	cmp	r6, #255	; 0xff
10013242:	d01f      	beq.n	10013284 <__aeabi_fsub+0x1e8>
10013244:	2480      	movs	r4, #128	; 0x80
10013246:	04e4      	lsls	r4, r4, #19
10013248:	4240      	negs	r0, r0
1001324a:	4323      	orrs	r3, r4
1001324c:	281b      	cmp	r0, #27
1001324e:	dd00      	ble.n	10013252 <__aeabi_fsub+0x1b6>
10013250:	e096      	b.n	10013380 <__aeabi_fsub+0x2e4>
10013252:	001d      	movs	r5, r3
10013254:	2420      	movs	r4, #32
10013256:	40c5      	lsrs	r5, r0
10013258:	1a20      	subs	r0, r4, r0
1001325a:	4083      	lsls	r3, r0
1001325c:	1e58      	subs	r0, r3, #1
1001325e:	4183      	sbcs	r3, r0
10013260:	432b      	orrs	r3, r5
10013262:	1ad3      	subs	r3, r2, r3
10013264:	0034      	movs	r4, r6
10013266:	000d      	movs	r5, r1
10013268:	e75e      	b.n	10013128 <__aeabi_fsub+0x8c>
1001326a:	2e00      	cmp	r6, #0
1001326c:	d000      	beq.n	10013270 <__aeabi_fsub+0x1d4>
1001326e:	e75f      	b.n	10013130 <__aeabi_fsub+0x94>
10013270:	2500      	movs	r5, #0
10013272:	2400      	movs	r4, #0
10013274:	e7ab      	b.n	100131ce <__aeabi_fsub+0x132>
10013276:	2b00      	cmp	r3, #0
10013278:	d044      	beq.n	10013304 <__aeabi_fsub+0x268>
1001327a:	43c0      	mvns	r0, r0
1001327c:	2800      	cmp	r0, #0
1001327e:	d0f0      	beq.n	10013262 <__aeabi_fsub+0x1c6>
10013280:	2eff      	cmp	r6, #255	; 0xff
10013282:	d1e3      	bne.n	1001324c <__aeabi_fsub+0x1b0>
10013284:	0013      	movs	r3, r2
10013286:	24ff      	movs	r4, #255	; 0xff
10013288:	000d      	movs	r5, r1
1001328a:	e722      	b.n	100130d2 <__aeabi_fsub+0x36>
1001328c:	000d      	movs	r5, r1
1001328e:	24ff      	movs	r4, #255	; 0xff
10013290:	2300      	movs	r3, #0
10013292:	e730      	b.n	100130f6 <__aeabi_fsub+0x5a>
10013294:	2c00      	cmp	r4, #0
10013296:	d15d      	bne.n	10013354 <__aeabi_fsub+0x2b8>
10013298:	2b00      	cmp	r3, #0
1001329a:	d07d      	beq.n	10013398 <__aeabi_fsub+0x2fc>
1001329c:	2a00      	cmp	r2, #0
1001329e:	d100      	bne.n	100132a2 <__aeabi_fsub+0x206>
100132a0:	e717      	b.n	100130d2 <__aeabi_fsub+0x36>
100132a2:	189b      	adds	r3, r3, r2
100132a4:	015a      	lsls	r2, r3, #5
100132a6:	d400      	bmi.n	100132aa <__aeabi_fsub+0x20e>
100132a8:	e756      	b.n	10013158 <__aeabi_fsub+0xbc>
100132aa:	4a3e      	ldr	r2, [pc, #248]	; (100133a4 <__aeabi_fsub+0x308>)
100132ac:	0004      	movs	r4, r0
100132ae:	4013      	ands	r3, r2
100132b0:	e70f      	b.n	100130d2 <__aeabi_fsub+0x36>
100132b2:	2c00      	cmp	r4, #0
100132b4:	d11e      	bne.n	100132f4 <__aeabi_fsub+0x258>
100132b6:	2b00      	cmp	r3, #0
100132b8:	d12f      	bne.n	1001331a <__aeabi_fsub+0x27e>
100132ba:	2a00      	cmp	r2, #0
100132bc:	d065      	beq.n	1001338a <__aeabi_fsub+0x2ee>
100132be:	0013      	movs	r3, r2
100132c0:	000d      	movs	r5, r1
100132c2:	e706      	b.n	100130d2 <__aeabi_fsub+0x36>
100132c4:	2201      	movs	r2, #1
100132c6:	e76d      	b.n	100131a4 <__aeabi_fsub+0x108>
100132c8:	2c00      	cmp	r4, #0
100132ca:	d11f      	bne.n	1001330c <__aeabi_fsub+0x270>
100132cc:	2b00      	cmp	r3, #0
100132ce:	d059      	beq.n	10013384 <__aeabi_fsub+0x2e8>
100132d0:	43c0      	mvns	r0, r0
100132d2:	2800      	cmp	r0, #0
100132d4:	d00b      	beq.n	100132ee <__aeabi_fsub+0x252>
100132d6:	2eff      	cmp	r6, #255	; 0xff
100132d8:	d04f      	beq.n	1001337a <__aeabi_fsub+0x2de>
100132da:	281b      	cmp	r0, #27
100132dc:	dc5e      	bgt.n	1001339c <__aeabi_fsub+0x300>
100132de:	001d      	movs	r5, r3
100132e0:	2420      	movs	r4, #32
100132e2:	40c5      	lsrs	r5, r0
100132e4:	1a20      	subs	r0, r4, r0
100132e6:	4083      	lsls	r3, r0
100132e8:	1e58      	subs	r0, r3, #1
100132ea:	4183      	sbcs	r3, r0
100132ec:	432b      	orrs	r3, r5
100132ee:	189b      	adds	r3, r3, r2
100132f0:	0034      	movs	r4, r6
100132f2:	e758      	b.n	100131a6 <__aeabi_fsub+0x10a>
100132f4:	2b00      	cmp	r3, #0
100132f6:	d11c      	bne.n	10013332 <__aeabi_fsub+0x296>
100132f8:	2a00      	cmp	r2, #0
100132fa:	d049      	beq.n	10013390 <__aeabi_fsub+0x2f4>
100132fc:	0013      	movs	r3, r2
100132fe:	000d      	movs	r5, r1
10013300:	24ff      	movs	r4, #255	; 0xff
10013302:	e6e6      	b.n	100130d2 <__aeabi_fsub+0x36>
10013304:	0013      	movs	r3, r2
10013306:	0034      	movs	r4, r6
10013308:	000d      	movs	r5, r1
1001330a:	e6e2      	b.n	100130d2 <__aeabi_fsub+0x36>
1001330c:	2eff      	cmp	r6, #255	; 0xff
1001330e:	d034      	beq.n	1001337a <__aeabi_fsub+0x2de>
10013310:	2480      	movs	r4, #128	; 0x80
10013312:	04e4      	lsls	r4, r4, #19
10013314:	4240      	negs	r0, r0
10013316:	4323      	orrs	r3, r4
10013318:	e7df      	b.n	100132da <__aeabi_fsub+0x23e>
1001331a:	2a00      	cmp	r2, #0
1001331c:	d100      	bne.n	10013320 <__aeabi_fsub+0x284>
1001331e:	e6d8      	b.n	100130d2 <__aeabi_fsub+0x36>
10013320:	2780      	movs	r7, #128	; 0x80
10013322:	1a98      	subs	r0, r3, r2
10013324:	04ff      	lsls	r7, r7, #19
10013326:	4007      	ands	r7, r0
10013328:	d100      	bne.n	1001332c <__aeabi_fsub+0x290>
1001332a:	e74d      	b.n	100131c8 <__aeabi_fsub+0x12c>
1001332c:	1ad3      	subs	r3, r2, r3
1001332e:	000d      	movs	r5, r1
10013330:	e6cf      	b.n	100130d2 <__aeabi_fsub+0x36>
10013332:	24ff      	movs	r4, #255	; 0xff
10013334:	2a00      	cmp	r2, #0
10013336:	d100      	bne.n	1001333a <__aeabi_fsub+0x29e>
10013338:	e6cb      	b.n	100130d2 <__aeabi_fsub+0x36>
1001333a:	2080      	movs	r0, #128	; 0x80
1001333c:	08db      	lsrs	r3, r3, #3
1001333e:	03c0      	lsls	r0, r0, #15
10013340:	4203      	tst	r3, r0
10013342:	d004      	beq.n	1001334e <__aeabi_fsub+0x2b2>
10013344:	08d2      	lsrs	r2, r2, #3
10013346:	4202      	tst	r2, r0
10013348:	d101      	bne.n	1001334e <__aeabi_fsub+0x2b2>
1001334a:	0013      	movs	r3, r2
1001334c:	000d      	movs	r5, r1
1001334e:	00db      	lsls	r3, r3, #3
10013350:	24ff      	movs	r4, #255	; 0xff
10013352:	e6be      	b.n	100130d2 <__aeabi_fsub+0x36>
10013354:	2b00      	cmp	r3, #0
10013356:	d010      	beq.n	1001337a <__aeabi_fsub+0x2de>
10013358:	24ff      	movs	r4, #255	; 0xff
1001335a:	2a00      	cmp	r2, #0
1001335c:	d100      	bne.n	10013360 <__aeabi_fsub+0x2c4>
1001335e:	e6b8      	b.n	100130d2 <__aeabi_fsub+0x36>
10013360:	2080      	movs	r0, #128	; 0x80
10013362:	08db      	lsrs	r3, r3, #3
10013364:	03c0      	lsls	r0, r0, #15
10013366:	4203      	tst	r3, r0
10013368:	d003      	beq.n	10013372 <__aeabi_fsub+0x2d6>
1001336a:	08d2      	lsrs	r2, r2, #3
1001336c:	4202      	tst	r2, r0
1001336e:	d100      	bne.n	10013372 <__aeabi_fsub+0x2d6>
10013370:	0013      	movs	r3, r2
10013372:	00db      	lsls	r3, r3, #3
10013374:	000d      	movs	r5, r1
10013376:	24ff      	movs	r4, #255	; 0xff
10013378:	e6ab      	b.n	100130d2 <__aeabi_fsub+0x36>
1001337a:	0013      	movs	r3, r2
1001337c:	24ff      	movs	r4, #255	; 0xff
1001337e:	e6a8      	b.n	100130d2 <__aeabi_fsub+0x36>
10013380:	2301      	movs	r3, #1
10013382:	e76e      	b.n	10013262 <__aeabi_fsub+0x1c6>
10013384:	0013      	movs	r3, r2
10013386:	0034      	movs	r4, r6
10013388:	e6a3      	b.n	100130d2 <__aeabi_fsub+0x36>
1001338a:	2700      	movs	r7, #0
1001338c:	2500      	movs	r5, #0
1001338e:	e71e      	b.n	100131ce <__aeabi_fsub+0x132>
10013390:	2780      	movs	r7, #128	; 0x80
10013392:	2500      	movs	r5, #0
10013394:	03ff      	lsls	r7, r7, #15
10013396:	e6e9      	b.n	1001316c <__aeabi_fsub+0xd0>
10013398:	0013      	movs	r3, r2
1001339a:	e69a      	b.n	100130d2 <__aeabi_fsub+0x36>
1001339c:	2301      	movs	r3, #1
1001339e:	e7a6      	b.n	100132ee <__aeabi_fsub+0x252>
100133a0:	7dffffff 	.word	0x7dffffff
100133a4:	fbffffff 	.word	0xfbffffff

100133a8 <__aeabi_f2iz>:
100133a8:	0243      	lsls	r3, r0, #9
100133aa:	0a59      	lsrs	r1, r3, #9
100133ac:	0043      	lsls	r3, r0, #1
100133ae:	0fc2      	lsrs	r2, r0, #31
100133b0:	0e1b      	lsrs	r3, r3, #24
100133b2:	2000      	movs	r0, #0
100133b4:	2b7e      	cmp	r3, #126	; 0x7e
100133b6:	dd0e      	ble.n	100133d6 <__aeabi_f2iz+0x2e>
100133b8:	2b9d      	cmp	r3, #157	; 0x9d
100133ba:	dc0d      	bgt.n	100133d8 <__aeabi_f2iz+0x30>
100133bc:	2080      	movs	r0, #128	; 0x80
100133be:	0400      	lsls	r0, r0, #16
100133c0:	4301      	orrs	r1, r0
100133c2:	2b95      	cmp	r3, #149	; 0x95
100133c4:	dc0b      	bgt.n	100133de <__aeabi_f2iz+0x36>
100133c6:	2096      	movs	r0, #150	; 0x96
100133c8:	1ac3      	subs	r3, r0, r3
100133ca:	40d9      	lsrs	r1, r3
100133cc:	000b      	movs	r3, r1
100133ce:	4258      	negs	r0, r3
100133d0:	2a00      	cmp	r2, #0
100133d2:	d100      	bne.n	100133d6 <__aeabi_f2iz+0x2e>
100133d4:	0018      	movs	r0, r3
100133d6:	4770      	bx	lr
100133d8:	4b03      	ldr	r3, [pc, #12]	; (100133e8 <__aeabi_f2iz+0x40>)
100133da:	18d0      	adds	r0, r2, r3
100133dc:	e7fb      	b.n	100133d6 <__aeabi_f2iz+0x2e>
100133de:	3b96      	subs	r3, #150	; 0x96
100133e0:	4099      	lsls	r1, r3
100133e2:	000b      	movs	r3, r1
100133e4:	e7f3      	b.n	100133ce <__aeabi_f2iz+0x26>
100133e6:	46c0      	nop			; (mov r8, r8)
100133e8:	7fffffff 	.word	0x7fffffff

100133ec <__aeabi_ui2f>:
100133ec:	b570      	push	{r4, r5, r6, lr}
100133ee:	1e04      	subs	r4, r0, #0
100133f0:	d028      	beq.n	10013444 <__aeabi_ui2f+0x58>
100133f2:	f000 ff83 	bl	100142fc <__clzsi2>
100133f6:	239e      	movs	r3, #158	; 0x9e
100133f8:	1a1b      	subs	r3, r3, r0
100133fa:	2b96      	cmp	r3, #150	; 0x96
100133fc:	dc0a      	bgt.n	10013414 <__aeabi_ui2f+0x28>
100133fe:	2296      	movs	r2, #150	; 0x96
10013400:	1ad2      	subs	r2, r2, r3
10013402:	4094      	lsls	r4, r2
10013404:	0262      	lsls	r2, r4, #9
10013406:	0a52      	lsrs	r2, r2, #9
10013408:	b2d8      	uxtb	r0, r3
1001340a:	0252      	lsls	r2, r2, #9
1001340c:	0a52      	lsrs	r2, r2, #9
1001340e:	05c0      	lsls	r0, r0, #23
10013410:	4310      	orrs	r0, r2
10013412:	bd70      	pop	{r4, r5, r6, pc}
10013414:	2b99      	cmp	r3, #153	; 0x99
10013416:	dc18      	bgt.n	1001344a <__aeabi_ui2f+0x5e>
10013418:	2299      	movs	r2, #153	; 0x99
1001341a:	1ad2      	subs	r2, r2, r3
1001341c:	4094      	lsls	r4, r2
1001341e:	4a11      	ldr	r2, [pc, #68]	; (10013464 <__aeabi_ui2f+0x78>)
10013420:	4022      	ands	r2, r4
10013422:	0761      	lsls	r1, r4, #29
10013424:	d004      	beq.n	10013430 <__aeabi_ui2f+0x44>
10013426:	210f      	movs	r1, #15
10013428:	400c      	ands	r4, r1
1001342a:	2c04      	cmp	r4, #4
1001342c:	d000      	beq.n	10013430 <__aeabi_ui2f+0x44>
1001342e:	3204      	adds	r2, #4
10013430:	0151      	lsls	r1, r2, #5
10013432:	d503      	bpl.n	1001343c <__aeabi_ui2f+0x50>
10013434:	4b0b      	ldr	r3, [pc, #44]	; (10013464 <__aeabi_ui2f+0x78>)
10013436:	401a      	ands	r2, r3
10013438:	239f      	movs	r3, #159	; 0x9f
1001343a:	1a1b      	subs	r3, r3, r0
1001343c:	0192      	lsls	r2, r2, #6
1001343e:	0a52      	lsrs	r2, r2, #9
10013440:	b2d8      	uxtb	r0, r3
10013442:	e7e2      	b.n	1001340a <__aeabi_ui2f+0x1e>
10013444:	2000      	movs	r0, #0
10013446:	2200      	movs	r2, #0
10013448:	e7df      	b.n	1001340a <__aeabi_ui2f+0x1e>
1001344a:	2205      	movs	r2, #5
1001344c:	0025      	movs	r5, r4
1001344e:	1a12      	subs	r2, r2, r0
10013450:	21b9      	movs	r1, #185	; 0xb9
10013452:	40d5      	lsrs	r5, r2
10013454:	0022      	movs	r2, r4
10013456:	1ac9      	subs	r1, r1, r3
10013458:	408a      	lsls	r2, r1
1001345a:	1e54      	subs	r4, r2, #1
1001345c:	41a2      	sbcs	r2, r4
1001345e:	002c      	movs	r4, r5
10013460:	4314      	orrs	r4, r2
10013462:	e7dc      	b.n	1001341e <__aeabi_ui2f+0x32>
10013464:	fbffffff 	.word	0xfbffffff

10013468 <__eqdf2>:
10013468:	b5f0      	push	{r4, r5, r6, r7, lr}
1001346a:	465f      	mov	r7, fp
1001346c:	4656      	mov	r6, sl
1001346e:	464d      	mov	r5, r9
10013470:	4644      	mov	r4, r8
10013472:	b4f0      	push	{r4, r5, r6, r7}
10013474:	031f      	lsls	r7, r3, #12
10013476:	005c      	lsls	r4, r3, #1
10013478:	0fdb      	lsrs	r3, r3, #31
1001347a:	469a      	mov	sl, r3
1001347c:	4b19      	ldr	r3, [pc, #100]	; (100134e4 <__eqdf2+0x7c>)
1001347e:	030e      	lsls	r6, r1, #12
10013480:	004d      	lsls	r5, r1, #1
10013482:	0fc9      	lsrs	r1, r1, #31
10013484:	4680      	mov	r8, r0
10013486:	0b36      	lsrs	r6, r6, #12
10013488:	0d6d      	lsrs	r5, r5, #21
1001348a:	468b      	mov	fp, r1
1001348c:	4691      	mov	r9, r2
1001348e:	0b3f      	lsrs	r7, r7, #12
10013490:	0d64      	lsrs	r4, r4, #21
10013492:	429d      	cmp	r5, r3
10013494:	d019      	beq.n	100134ca <__eqdf2+0x62>
10013496:	4b13      	ldr	r3, [pc, #76]	; (100134e4 <__eqdf2+0x7c>)
10013498:	429c      	cmp	r4, r3
1001349a:	d01b      	beq.n	100134d4 <__eqdf2+0x6c>
1001349c:	2301      	movs	r3, #1
1001349e:	42a5      	cmp	r5, r4
100134a0:	d006      	beq.n	100134b0 <__eqdf2+0x48>
100134a2:	0018      	movs	r0, r3
100134a4:	bc3c      	pop	{r2, r3, r4, r5}
100134a6:	4690      	mov	r8, r2
100134a8:	4699      	mov	r9, r3
100134aa:	46a2      	mov	sl, r4
100134ac:	46ab      	mov	fp, r5
100134ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100134b0:	42be      	cmp	r6, r7
100134b2:	d1f6      	bne.n	100134a2 <__eqdf2+0x3a>
100134b4:	45c8      	cmp	r8, r9
100134b6:	d1f4      	bne.n	100134a2 <__eqdf2+0x3a>
100134b8:	45d3      	cmp	fp, sl
100134ba:	d010      	beq.n	100134de <__eqdf2+0x76>
100134bc:	2d00      	cmp	r5, #0
100134be:	d1f0      	bne.n	100134a2 <__eqdf2+0x3a>
100134c0:	4330      	orrs	r0, r6
100134c2:	0003      	movs	r3, r0
100134c4:	1e5a      	subs	r2, r3, #1
100134c6:	4193      	sbcs	r3, r2
100134c8:	e7eb      	b.n	100134a2 <__eqdf2+0x3a>
100134ca:	0031      	movs	r1, r6
100134cc:	2301      	movs	r3, #1
100134ce:	4301      	orrs	r1, r0
100134d0:	d1e7      	bne.n	100134a2 <__eqdf2+0x3a>
100134d2:	e7e0      	b.n	10013496 <__eqdf2+0x2e>
100134d4:	433a      	orrs	r2, r7
100134d6:	2301      	movs	r3, #1
100134d8:	2a00      	cmp	r2, #0
100134da:	d1e2      	bne.n	100134a2 <__eqdf2+0x3a>
100134dc:	e7de      	b.n	1001349c <__eqdf2+0x34>
100134de:	2300      	movs	r3, #0
100134e0:	e7df      	b.n	100134a2 <__eqdf2+0x3a>
100134e2:	46c0      	nop			; (mov r8, r8)
100134e4:	000007ff 	.word	0x000007ff

100134e8 <__gedf2>:
100134e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100134ea:	465f      	mov	r7, fp
100134ec:	4644      	mov	r4, r8
100134ee:	4656      	mov	r6, sl
100134f0:	464d      	mov	r5, r9
100134f2:	b4f0      	push	{r4, r5, r6, r7}
100134f4:	031f      	lsls	r7, r3, #12
100134f6:	0b3c      	lsrs	r4, r7, #12
100134f8:	4f2c      	ldr	r7, [pc, #176]	; (100135ac <__gedf2+0xc4>)
100134fa:	030e      	lsls	r6, r1, #12
100134fc:	004d      	lsls	r5, r1, #1
100134fe:	46a3      	mov	fp, r4
10013500:	005c      	lsls	r4, r3, #1
10013502:	4684      	mov	ip, r0
10013504:	0b36      	lsrs	r6, r6, #12
10013506:	0d6d      	lsrs	r5, r5, #21
10013508:	0fc9      	lsrs	r1, r1, #31
1001350a:	4690      	mov	r8, r2
1001350c:	0d64      	lsrs	r4, r4, #21
1001350e:	0fdb      	lsrs	r3, r3, #31
10013510:	42bd      	cmp	r5, r7
10013512:	d02b      	beq.n	1001356c <__gedf2+0x84>
10013514:	4f25      	ldr	r7, [pc, #148]	; (100135ac <__gedf2+0xc4>)
10013516:	42bc      	cmp	r4, r7
10013518:	d02e      	beq.n	10013578 <__gedf2+0x90>
1001351a:	2d00      	cmp	r5, #0
1001351c:	d10e      	bne.n	1001353c <__gedf2+0x54>
1001351e:	4330      	orrs	r0, r6
10013520:	0007      	movs	r7, r0
10013522:	4681      	mov	r9, r0
10013524:	4278      	negs	r0, r7
10013526:	4178      	adcs	r0, r7
10013528:	2c00      	cmp	r4, #0
1001352a:	d117      	bne.n	1001355c <__gedf2+0x74>
1001352c:	465f      	mov	r7, fp
1001352e:	433a      	orrs	r2, r7
10013530:	d114      	bne.n	1001355c <__gedf2+0x74>
10013532:	464b      	mov	r3, r9
10013534:	2000      	movs	r0, #0
10013536:	2b00      	cmp	r3, #0
10013538:	d00a      	beq.n	10013550 <__gedf2+0x68>
1001353a:	e006      	b.n	1001354a <__gedf2+0x62>
1001353c:	2c00      	cmp	r4, #0
1001353e:	d102      	bne.n	10013546 <__gedf2+0x5e>
10013540:	4658      	mov	r0, fp
10013542:	4302      	orrs	r2, r0
10013544:	d001      	beq.n	1001354a <__gedf2+0x62>
10013546:	4299      	cmp	r1, r3
10013548:	d01a      	beq.n	10013580 <__gedf2+0x98>
1001354a:	2301      	movs	r3, #1
1001354c:	4248      	negs	r0, r1
1001354e:	4318      	orrs	r0, r3
10013550:	bc3c      	pop	{r2, r3, r4, r5}
10013552:	4690      	mov	r8, r2
10013554:	4699      	mov	r9, r3
10013556:	46a2      	mov	sl, r4
10013558:	46ab      	mov	fp, r5
1001355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001355c:	2800      	cmp	r0, #0
1001355e:	d0f2      	beq.n	10013546 <__gedf2+0x5e>
10013560:	4258      	negs	r0, r3
10013562:	4158      	adcs	r0, r3
10013564:	2201      	movs	r2, #1
10013566:	4240      	negs	r0, r0
10013568:	4310      	orrs	r0, r2
1001356a:	e7f1      	b.n	10013550 <__gedf2+0x68>
1001356c:	0037      	movs	r7, r6
1001356e:	4307      	orrs	r7, r0
10013570:	d0d0      	beq.n	10013514 <__gedf2+0x2c>
10013572:	2002      	movs	r0, #2
10013574:	4240      	negs	r0, r0
10013576:	e7eb      	b.n	10013550 <__gedf2+0x68>
10013578:	465f      	mov	r7, fp
1001357a:	4317      	orrs	r7, r2
1001357c:	d0cd      	beq.n	1001351a <__gedf2+0x32>
1001357e:	e7f8      	b.n	10013572 <__gedf2+0x8a>
10013580:	42a5      	cmp	r5, r4
10013582:	dce2      	bgt.n	1001354a <__gedf2+0x62>
10013584:	db05      	blt.n	10013592 <__gedf2+0xaa>
10013586:	455e      	cmp	r6, fp
10013588:	d8df      	bhi.n	1001354a <__gedf2+0x62>
1001358a:	d008      	beq.n	1001359e <__gedf2+0xb6>
1001358c:	2000      	movs	r0, #0
1001358e:	455e      	cmp	r6, fp
10013590:	d2de      	bcs.n	10013550 <__gedf2+0x68>
10013592:	4248      	negs	r0, r1
10013594:	4148      	adcs	r0, r1
10013596:	2301      	movs	r3, #1
10013598:	4240      	negs	r0, r0
1001359a:	4318      	orrs	r0, r3
1001359c:	e7d8      	b.n	10013550 <__gedf2+0x68>
1001359e:	45c4      	cmp	ip, r8
100135a0:	d8d3      	bhi.n	1001354a <__gedf2+0x62>
100135a2:	2000      	movs	r0, #0
100135a4:	45c4      	cmp	ip, r8
100135a6:	d3f4      	bcc.n	10013592 <__gedf2+0xaa>
100135a8:	e7d2      	b.n	10013550 <__gedf2+0x68>
100135aa:	46c0      	nop			; (mov r8, r8)
100135ac:	000007ff 	.word	0x000007ff

100135b0 <__ledf2>:
100135b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100135b2:	465f      	mov	r7, fp
100135b4:	464d      	mov	r5, r9
100135b6:	4644      	mov	r4, r8
100135b8:	4656      	mov	r6, sl
100135ba:	b4f0      	push	{r4, r5, r6, r7}
100135bc:	031c      	lsls	r4, r3, #12
100135be:	0b24      	lsrs	r4, r4, #12
100135c0:	46a4      	mov	ip, r4
100135c2:	4c2f      	ldr	r4, [pc, #188]	; (10013680 <__ledf2+0xd0>)
100135c4:	030f      	lsls	r7, r1, #12
100135c6:	004d      	lsls	r5, r1, #1
100135c8:	005e      	lsls	r6, r3, #1
100135ca:	0fc9      	lsrs	r1, r1, #31
100135cc:	4680      	mov	r8, r0
100135ce:	0b3f      	lsrs	r7, r7, #12
100135d0:	0d6d      	lsrs	r5, r5, #21
100135d2:	468b      	mov	fp, r1
100135d4:	4691      	mov	r9, r2
100135d6:	0d76      	lsrs	r6, r6, #21
100135d8:	0fdb      	lsrs	r3, r3, #31
100135da:	42a5      	cmp	r5, r4
100135dc:	d020      	beq.n	10013620 <__ledf2+0x70>
100135de:	4c28      	ldr	r4, [pc, #160]	; (10013680 <__ledf2+0xd0>)
100135e0:	42a6      	cmp	r6, r4
100135e2:	d022      	beq.n	1001362a <__ledf2+0x7a>
100135e4:	2d00      	cmp	r5, #0
100135e6:	d112      	bne.n	1001360e <__ledf2+0x5e>
100135e8:	4338      	orrs	r0, r7
100135ea:	4244      	negs	r4, r0
100135ec:	4144      	adcs	r4, r0
100135ee:	2e00      	cmp	r6, #0
100135f0:	d020      	beq.n	10013634 <__ledf2+0x84>
100135f2:	2c00      	cmp	r4, #0
100135f4:	d00d      	beq.n	10013612 <__ledf2+0x62>
100135f6:	425c      	negs	r4, r3
100135f8:	4163      	adcs	r3, r4
100135fa:	2401      	movs	r4, #1
100135fc:	425b      	negs	r3, r3
100135fe:	431c      	orrs	r4, r3
10013600:	0020      	movs	r0, r4
10013602:	bc3c      	pop	{r2, r3, r4, r5}
10013604:	4690      	mov	r8, r2
10013606:	4699      	mov	r9, r3
10013608:	46a2      	mov	sl, r4
1001360a:	46ab      	mov	fp, r5
1001360c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001360e:	2e00      	cmp	r6, #0
10013610:	d017      	beq.n	10013642 <__ledf2+0x92>
10013612:	455b      	cmp	r3, fp
10013614:	d019      	beq.n	1001364a <__ledf2+0x9a>
10013616:	465b      	mov	r3, fp
10013618:	425c      	negs	r4, r3
1001361a:	2301      	movs	r3, #1
1001361c:	431c      	orrs	r4, r3
1001361e:	e7ef      	b.n	10013600 <__ledf2+0x50>
10013620:	0039      	movs	r1, r7
10013622:	2402      	movs	r4, #2
10013624:	4301      	orrs	r1, r0
10013626:	d1eb      	bne.n	10013600 <__ledf2+0x50>
10013628:	e7d9      	b.n	100135de <__ledf2+0x2e>
1001362a:	4661      	mov	r1, ip
1001362c:	2402      	movs	r4, #2
1001362e:	4311      	orrs	r1, r2
10013630:	d1e6      	bne.n	10013600 <__ledf2+0x50>
10013632:	e7d7      	b.n	100135e4 <__ledf2+0x34>
10013634:	4661      	mov	r1, ip
10013636:	430a      	orrs	r2, r1
10013638:	d1db      	bne.n	100135f2 <__ledf2+0x42>
1001363a:	2400      	movs	r4, #0
1001363c:	2800      	cmp	r0, #0
1001363e:	d0df      	beq.n	10013600 <__ledf2+0x50>
10013640:	e7e9      	b.n	10013616 <__ledf2+0x66>
10013642:	4661      	mov	r1, ip
10013644:	430a      	orrs	r2, r1
10013646:	d1e4      	bne.n	10013612 <__ledf2+0x62>
10013648:	e7e5      	b.n	10013616 <__ledf2+0x66>
1001364a:	42b5      	cmp	r5, r6
1001364c:	dd03      	ble.n	10013656 <__ledf2+0xa6>
1001364e:	2201      	movs	r2, #1
10013650:	425c      	negs	r4, r3
10013652:	4314      	orrs	r4, r2
10013654:	e7d4      	b.n	10013600 <__ledf2+0x50>
10013656:	42b5      	cmp	r5, r6
10013658:	dbcd      	blt.n	100135f6 <__ledf2+0x46>
1001365a:	4567      	cmp	r7, ip
1001365c:	d8db      	bhi.n	10013616 <__ledf2+0x66>
1001365e:	d009      	beq.n	10013674 <__ledf2+0xc4>
10013660:	2400      	movs	r4, #0
10013662:	4567      	cmp	r7, ip
10013664:	d2cc      	bcs.n	10013600 <__ledf2+0x50>
10013666:	4659      	mov	r1, fp
10013668:	424c      	negs	r4, r1
1001366a:	4161      	adcs	r1, r4
1001366c:	2401      	movs	r4, #1
1001366e:	4249      	negs	r1, r1
10013670:	430c      	orrs	r4, r1
10013672:	e7c5      	b.n	10013600 <__ledf2+0x50>
10013674:	45c8      	cmp	r8, r9
10013676:	d8ce      	bhi.n	10013616 <__ledf2+0x66>
10013678:	2400      	movs	r4, #0
1001367a:	45c8      	cmp	r8, r9
1001367c:	d3f3      	bcc.n	10013666 <__ledf2+0xb6>
1001367e:	e7bf      	b.n	10013600 <__ledf2+0x50>
10013680:	000007ff 	.word	0x000007ff

10013684 <__aeabi_dmul>:
10013684:	b5f0      	push	{r4, r5, r6, r7, lr}
10013686:	465f      	mov	r7, fp
10013688:	4656      	mov	r6, sl
1001368a:	464d      	mov	r5, r9
1001368c:	4644      	mov	r4, r8
1001368e:	b4f0      	push	{r4, r5, r6, r7}
10013690:	030d      	lsls	r5, r1, #12
10013692:	4699      	mov	r9, r3
10013694:	004e      	lsls	r6, r1, #1
10013696:	0b2b      	lsrs	r3, r5, #12
10013698:	b087      	sub	sp, #28
1001369a:	0007      	movs	r7, r0
1001369c:	4692      	mov	sl, r2
1001369e:	4680      	mov	r8, r0
100136a0:	469b      	mov	fp, r3
100136a2:	0d76      	lsrs	r6, r6, #21
100136a4:	0fcc      	lsrs	r4, r1, #31
100136a6:	2e00      	cmp	r6, #0
100136a8:	d069      	beq.n	1001377e <__aeabi_dmul+0xfa>
100136aa:	4b6d      	ldr	r3, [pc, #436]	; (10013860 <__aeabi_dmul+0x1dc>)
100136ac:	429e      	cmp	r6, r3
100136ae:	d035      	beq.n	1001371c <__aeabi_dmul+0x98>
100136b0:	465b      	mov	r3, fp
100136b2:	2280      	movs	r2, #128	; 0x80
100136b4:	00dd      	lsls	r5, r3, #3
100136b6:	0412      	lsls	r2, r2, #16
100136b8:	0f43      	lsrs	r3, r0, #29
100136ba:	4313      	orrs	r3, r2
100136bc:	432b      	orrs	r3, r5
100136be:	469b      	mov	fp, r3
100136c0:	00c3      	lsls	r3, r0, #3
100136c2:	4698      	mov	r8, r3
100136c4:	4b67      	ldr	r3, [pc, #412]	; (10013864 <__aeabi_dmul+0x1e0>)
100136c6:	2700      	movs	r7, #0
100136c8:	469c      	mov	ip, r3
100136ca:	2300      	movs	r3, #0
100136cc:	4466      	add	r6, ip
100136ce:	9301      	str	r3, [sp, #4]
100136d0:	464a      	mov	r2, r9
100136d2:	0315      	lsls	r5, r2, #12
100136d4:	0050      	lsls	r0, r2, #1
100136d6:	0fd2      	lsrs	r2, r2, #31
100136d8:	4653      	mov	r3, sl
100136da:	0b2d      	lsrs	r5, r5, #12
100136dc:	0d40      	lsrs	r0, r0, #21
100136de:	4691      	mov	r9, r2
100136e0:	d100      	bne.n	100136e4 <__aeabi_dmul+0x60>
100136e2:	e076      	b.n	100137d2 <__aeabi_dmul+0x14e>
100136e4:	4a5e      	ldr	r2, [pc, #376]	; (10013860 <__aeabi_dmul+0x1dc>)
100136e6:	4290      	cmp	r0, r2
100136e8:	d06c      	beq.n	100137c4 <__aeabi_dmul+0x140>
100136ea:	2280      	movs	r2, #128	; 0x80
100136ec:	0f5b      	lsrs	r3, r3, #29
100136ee:	0412      	lsls	r2, r2, #16
100136f0:	4313      	orrs	r3, r2
100136f2:	4a5c      	ldr	r2, [pc, #368]	; (10013864 <__aeabi_dmul+0x1e0>)
100136f4:	00ed      	lsls	r5, r5, #3
100136f6:	4694      	mov	ip, r2
100136f8:	431d      	orrs	r5, r3
100136fa:	4653      	mov	r3, sl
100136fc:	2200      	movs	r2, #0
100136fe:	00db      	lsls	r3, r3, #3
10013700:	4460      	add	r0, ip
10013702:	4649      	mov	r1, r9
10013704:	1836      	adds	r6, r6, r0
10013706:	1c70      	adds	r0, r6, #1
10013708:	4061      	eors	r1, r4
1001370a:	9002      	str	r0, [sp, #8]
1001370c:	4317      	orrs	r7, r2
1001370e:	2f0f      	cmp	r7, #15
10013710:	d900      	bls.n	10013714 <__aeabi_dmul+0x90>
10013712:	e0af      	b.n	10013874 <__aeabi_dmul+0x1f0>
10013714:	4854      	ldr	r0, [pc, #336]	; (10013868 <__aeabi_dmul+0x1e4>)
10013716:	00bf      	lsls	r7, r7, #2
10013718:	59c7      	ldr	r7, [r0, r7]
1001371a:	46bf      	mov	pc, r7
1001371c:	465b      	mov	r3, fp
1001371e:	431f      	orrs	r7, r3
10013720:	d000      	beq.n	10013724 <__aeabi_dmul+0xa0>
10013722:	e088      	b.n	10013836 <__aeabi_dmul+0x1b2>
10013724:	2300      	movs	r3, #0
10013726:	469b      	mov	fp, r3
10013728:	4698      	mov	r8, r3
1001372a:	3302      	adds	r3, #2
1001372c:	2708      	movs	r7, #8
1001372e:	9301      	str	r3, [sp, #4]
10013730:	e7ce      	b.n	100136d0 <__aeabi_dmul+0x4c>
10013732:	4649      	mov	r1, r9
10013734:	2a02      	cmp	r2, #2
10013736:	d06a      	beq.n	1001380e <__aeabi_dmul+0x18a>
10013738:	2a03      	cmp	r2, #3
1001373a:	d100      	bne.n	1001373e <__aeabi_dmul+0xba>
1001373c:	e209      	b.n	10013b52 <__aeabi_dmul+0x4ce>
1001373e:	2a01      	cmp	r2, #1
10013740:	d000      	beq.n	10013744 <__aeabi_dmul+0xc0>
10013742:	e1bb      	b.n	10013abc <__aeabi_dmul+0x438>
10013744:	4011      	ands	r1, r2
10013746:	2200      	movs	r2, #0
10013748:	2300      	movs	r3, #0
1001374a:	2500      	movs	r5, #0
1001374c:	4690      	mov	r8, r2
1001374e:	b2cc      	uxtb	r4, r1
10013750:	2100      	movs	r1, #0
10013752:	032d      	lsls	r5, r5, #12
10013754:	0d0a      	lsrs	r2, r1, #20
10013756:	0512      	lsls	r2, r2, #20
10013758:	0b2d      	lsrs	r5, r5, #12
1001375a:	4315      	orrs	r5, r2
1001375c:	4a43      	ldr	r2, [pc, #268]	; (1001386c <__aeabi_dmul+0x1e8>)
1001375e:	051b      	lsls	r3, r3, #20
10013760:	4015      	ands	r5, r2
10013762:	431d      	orrs	r5, r3
10013764:	006d      	lsls	r5, r5, #1
10013766:	07e4      	lsls	r4, r4, #31
10013768:	086d      	lsrs	r5, r5, #1
1001376a:	4325      	orrs	r5, r4
1001376c:	4640      	mov	r0, r8
1001376e:	0029      	movs	r1, r5
10013770:	b007      	add	sp, #28
10013772:	bc3c      	pop	{r2, r3, r4, r5}
10013774:	4690      	mov	r8, r2
10013776:	4699      	mov	r9, r3
10013778:	46a2      	mov	sl, r4
1001377a:	46ab      	mov	fp, r5
1001377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001377e:	4303      	orrs	r3, r0
10013780:	d052      	beq.n	10013828 <__aeabi_dmul+0x1a4>
10013782:	465b      	mov	r3, fp
10013784:	2b00      	cmp	r3, #0
10013786:	d100      	bne.n	1001378a <__aeabi_dmul+0x106>
10013788:	e18a      	b.n	10013aa0 <__aeabi_dmul+0x41c>
1001378a:	4658      	mov	r0, fp
1001378c:	f000 fdb6 	bl	100142fc <__clzsi2>
10013790:	0003      	movs	r3, r0
10013792:	3b0b      	subs	r3, #11
10013794:	2b1c      	cmp	r3, #28
10013796:	dd00      	ble.n	1001379a <__aeabi_dmul+0x116>
10013798:	e17b      	b.n	10013a92 <__aeabi_dmul+0x40e>
1001379a:	221d      	movs	r2, #29
1001379c:	1ad3      	subs	r3, r2, r3
1001379e:	003a      	movs	r2, r7
100137a0:	0001      	movs	r1, r0
100137a2:	465d      	mov	r5, fp
100137a4:	40da      	lsrs	r2, r3
100137a6:	3908      	subs	r1, #8
100137a8:	408d      	lsls	r5, r1
100137aa:	0013      	movs	r3, r2
100137ac:	408f      	lsls	r7, r1
100137ae:	432b      	orrs	r3, r5
100137b0:	469b      	mov	fp, r3
100137b2:	46b8      	mov	r8, r7
100137b4:	4b2e      	ldr	r3, [pc, #184]	; (10013870 <__aeabi_dmul+0x1ec>)
100137b6:	2700      	movs	r7, #0
100137b8:	469c      	mov	ip, r3
100137ba:	2300      	movs	r3, #0
100137bc:	4460      	add	r0, ip
100137be:	4246      	negs	r6, r0
100137c0:	9301      	str	r3, [sp, #4]
100137c2:	e785      	b.n	100136d0 <__aeabi_dmul+0x4c>
100137c4:	4652      	mov	r2, sl
100137c6:	432a      	orrs	r2, r5
100137c8:	d12c      	bne.n	10013824 <__aeabi_dmul+0x1a0>
100137ca:	2500      	movs	r5, #0
100137cc:	2300      	movs	r3, #0
100137ce:	2202      	movs	r2, #2
100137d0:	e797      	b.n	10013702 <__aeabi_dmul+0x7e>
100137d2:	4652      	mov	r2, sl
100137d4:	432a      	orrs	r2, r5
100137d6:	d021      	beq.n	1001381c <__aeabi_dmul+0x198>
100137d8:	2d00      	cmp	r5, #0
100137da:	d100      	bne.n	100137de <__aeabi_dmul+0x15a>
100137dc:	e154      	b.n	10013a88 <__aeabi_dmul+0x404>
100137de:	0028      	movs	r0, r5
100137e0:	f000 fd8c 	bl	100142fc <__clzsi2>
100137e4:	0003      	movs	r3, r0
100137e6:	3b0b      	subs	r3, #11
100137e8:	2b1c      	cmp	r3, #28
100137ea:	dd00      	ble.n	100137ee <__aeabi_dmul+0x16a>
100137ec:	e146      	b.n	10013a7c <__aeabi_dmul+0x3f8>
100137ee:	211d      	movs	r1, #29
100137f0:	1acb      	subs	r3, r1, r3
100137f2:	4651      	mov	r1, sl
100137f4:	0002      	movs	r2, r0
100137f6:	40d9      	lsrs	r1, r3
100137f8:	4653      	mov	r3, sl
100137fa:	3a08      	subs	r2, #8
100137fc:	4095      	lsls	r5, r2
100137fe:	4093      	lsls	r3, r2
10013800:	430d      	orrs	r5, r1
10013802:	4a1b      	ldr	r2, [pc, #108]	; (10013870 <__aeabi_dmul+0x1ec>)
10013804:	4694      	mov	ip, r2
10013806:	4460      	add	r0, ip
10013808:	4240      	negs	r0, r0
1001380a:	2200      	movs	r2, #0
1001380c:	e779      	b.n	10013702 <__aeabi_dmul+0x7e>
1001380e:	2401      	movs	r4, #1
10013810:	2200      	movs	r2, #0
10013812:	400c      	ands	r4, r1
10013814:	4b12      	ldr	r3, [pc, #72]	; (10013860 <__aeabi_dmul+0x1dc>)
10013816:	2500      	movs	r5, #0
10013818:	4690      	mov	r8, r2
1001381a:	e799      	b.n	10013750 <__aeabi_dmul+0xcc>
1001381c:	2500      	movs	r5, #0
1001381e:	2300      	movs	r3, #0
10013820:	2201      	movs	r2, #1
10013822:	e76e      	b.n	10013702 <__aeabi_dmul+0x7e>
10013824:	2203      	movs	r2, #3
10013826:	e76c      	b.n	10013702 <__aeabi_dmul+0x7e>
10013828:	2300      	movs	r3, #0
1001382a:	469b      	mov	fp, r3
1001382c:	4698      	mov	r8, r3
1001382e:	3301      	adds	r3, #1
10013830:	2704      	movs	r7, #4
10013832:	9301      	str	r3, [sp, #4]
10013834:	e74c      	b.n	100136d0 <__aeabi_dmul+0x4c>
10013836:	2303      	movs	r3, #3
10013838:	270c      	movs	r7, #12
1001383a:	9301      	str	r3, [sp, #4]
1001383c:	e748      	b.n	100136d0 <__aeabi_dmul+0x4c>
1001383e:	2300      	movs	r3, #0
10013840:	2580      	movs	r5, #128	; 0x80
10013842:	4698      	mov	r8, r3
10013844:	2400      	movs	r4, #0
10013846:	032d      	lsls	r5, r5, #12
10013848:	4b05      	ldr	r3, [pc, #20]	; (10013860 <__aeabi_dmul+0x1dc>)
1001384a:	e781      	b.n	10013750 <__aeabi_dmul+0xcc>
1001384c:	465d      	mov	r5, fp
1001384e:	4643      	mov	r3, r8
10013850:	9a01      	ldr	r2, [sp, #4]
10013852:	e76f      	b.n	10013734 <__aeabi_dmul+0xb0>
10013854:	465d      	mov	r5, fp
10013856:	4643      	mov	r3, r8
10013858:	0021      	movs	r1, r4
1001385a:	9a01      	ldr	r2, [sp, #4]
1001385c:	e76a      	b.n	10013734 <__aeabi_dmul+0xb0>
1001385e:	46c0      	nop			; (mov r8, r8)
10013860:	000007ff 	.word	0x000007ff
10013864:	fffffc01 	.word	0xfffffc01
10013868:	10016b74 	.word	0x10016b74
1001386c:	800fffff 	.word	0x800fffff
10013870:	000003f3 	.word	0x000003f3
10013874:	4642      	mov	r2, r8
10013876:	0c12      	lsrs	r2, r2, #16
10013878:	4691      	mov	r9, r2
1001387a:	0c1a      	lsrs	r2, r3, #16
1001387c:	4694      	mov	ip, r2
1001387e:	4642      	mov	r2, r8
10013880:	0417      	lsls	r7, r2, #16
10013882:	464a      	mov	r2, r9
10013884:	041b      	lsls	r3, r3, #16
10013886:	0c1b      	lsrs	r3, r3, #16
10013888:	435a      	muls	r2, r3
1001388a:	4660      	mov	r0, ip
1001388c:	4690      	mov	r8, r2
1001388e:	464a      	mov	r2, r9
10013890:	4342      	muls	r2, r0
10013892:	0010      	movs	r0, r2
10013894:	9203      	str	r2, [sp, #12]
10013896:	4662      	mov	r2, ip
10013898:	001c      	movs	r4, r3
1001389a:	0c3f      	lsrs	r7, r7, #16
1001389c:	437a      	muls	r2, r7
1001389e:	437c      	muls	r4, r7
100138a0:	4442      	add	r2, r8
100138a2:	9201      	str	r2, [sp, #4]
100138a4:	0c22      	lsrs	r2, r4, #16
100138a6:	4692      	mov	sl, r2
100138a8:	9a01      	ldr	r2, [sp, #4]
100138aa:	4452      	add	r2, sl
100138ac:	4590      	cmp	r8, r2
100138ae:	d906      	bls.n	100138be <__aeabi_dmul+0x23a>
100138b0:	4682      	mov	sl, r0
100138b2:	2080      	movs	r0, #128	; 0x80
100138b4:	0240      	lsls	r0, r0, #9
100138b6:	4680      	mov	r8, r0
100138b8:	44c2      	add	sl, r8
100138ba:	4650      	mov	r0, sl
100138bc:	9003      	str	r0, [sp, #12]
100138be:	0c10      	lsrs	r0, r2, #16
100138c0:	9004      	str	r0, [sp, #16]
100138c2:	4648      	mov	r0, r9
100138c4:	0424      	lsls	r4, r4, #16
100138c6:	0c24      	lsrs	r4, r4, #16
100138c8:	0412      	lsls	r2, r2, #16
100138ca:	1912      	adds	r2, r2, r4
100138cc:	9205      	str	r2, [sp, #20]
100138ce:	0c2a      	lsrs	r2, r5, #16
100138d0:	042d      	lsls	r5, r5, #16
100138d2:	0c2d      	lsrs	r5, r5, #16
100138d4:	4368      	muls	r0, r5
100138d6:	002c      	movs	r4, r5
100138d8:	4682      	mov	sl, r0
100138da:	4648      	mov	r0, r9
100138dc:	437c      	muls	r4, r7
100138de:	4350      	muls	r0, r2
100138e0:	4681      	mov	r9, r0
100138e2:	0c20      	lsrs	r0, r4, #16
100138e4:	4680      	mov	r8, r0
100138e6:	4357      	muls	r7, r2
100138e8:	4457      	add	r7, sl
100138ea:	4447      	add	r7, r8
100138ec:	45ba      	cmp	sl, r7
100138ee:	d903      	bls.n	100138f8 <__aeabi_dmul+0x274>
100138f0:	2080      	movs	r0, #128	; 0x80
100138f2:	0240      	lsls	r0, r0, #9
100138f4:	4680      	mov	r8, r0
100138f6:	44c1      	add	r9, r8
100138f8:	0c38      	lsrs	r0, r7, #16
100138fa:	043f      	lsls	r7, r7, #16
100138fc:	46b8      	mov	r8, r7
100138fe:	4448      	add	r0, r9
10013900:	0424      	lsls	r4, r4, #16
10013902:	0c24      	lsrs	r4, r4, #16
10013904:	9001      	str	r0, [sp, #4]
10013906:	9804      	ldr	r0, [sp, #16]
10013908:	44a0      	add	r8, r4
1001390a:	4440      	add	r0, r8
1001390c:	9004      	str	r0, [sp, #16]
1001390e:	4658      	mov	r0, fp
10013910:	0c00      	lsrs	r0, r0, #16
10013912:	4681      	mov	r9, r0
10013914:	4658      	mov	r0, fp
10013916:	0404      	lsls	r4, r0, #16
10013918:	0c20      	lsrs	r0, r4, #16
1001391a:	4682      	mov	sl, r0
1001391c:	0007      	movs	r7, r0
1001391e:	4648      	mov	r0, r9
10013920:	435f      	muls	r7, r3
10013922:	464c      	mov	r4, r9
10013924:	4343      	muls	r3, r0
10013926:	4660      	mov	r0, ip
10013928:	4360      	muls	r0, r4
1001392a:	4664      	mov	r4, ip
1001392c:	4683      	mov	fp, r0
1001392e:	4650      	mov	r0, sl
10013930:	4344      	muls	r4, r0
10013932:	0c38      	lsrs	r0, r7, #16
10013934:	4684      	mov	ip, r0
10013936:	18e4      	adds	r4, r4, r3
10013938:	4464      	add	r4, ip
1001393a:	42a3      	cmp	r3, r4
1001393c:	d903      	bls.n	10013946 <__aeabi_dmul+0x2c2>
1001393e:	2380      	movs	r3, #128	; 0x80
10013940:	025b      	lsls	r3, r3, #9
10013942:	469c      	mov	ip, r3
10013944:	44e3      	add	fp, ip
10013946:	4648      	mov	r0, r9
10013948:	043f      	lsls	r7, r7, #16
1001394a:	0c23      	lsrs	r3, r4, #16
1001394c:	0c3f      	lsrs	r7, r7, #16
1001394e:	0424      	lsls	r4, r4, #16
10013950:	19e4      	adds	r4, r4, r7
10013952:	4657      	mov	r7, sl
10013954:	4368      	muls	r0, r5
10013956:	436f      	muls	r7, r5
10013958:	4684      	mov	ip, r0
1001395a:	464d      	mov	r5, r9
1001395c:	4650      	mov	r0, sl
1001395e:	4355      	muls	r5, r2
10013960:	4342      	muls	r2, r0
10013962:	0c38      	lsrs	r0, r7, #16
10013964:	4681      	mov	r9, r0
10013966:	4462      	add	r2, ip
10013968:	444a      	add	r2, r9
1001396a:	445b      	add	r3, fp
1001396c:	4594      	cmp	ip, r2
1001396e:	d903      	bls.n	10013978 <__aeabi_dmul+0x2f4>
10013970:	2080      	movs	r0, #128	; 0x80
10013972:	0240      	lsls	r0, r0, #9
10013974:	4684      	mov	ip, r0
10013976:	4465      	add	r5, ip
10013978:	9803      	ldr	r0, [sp, #12]
1001397a:	043f      	lsls	r7, r7, #16
1001397c:	4683      	mov	fp, r0
1001397e:	9804      	ldr	r0, [sp, #16]
10013980:	0c3f      	lsrs	r7, r7, #16
10013982:	4684      	mov	ip, r0
10013984:	44e3      	add	fp, ip
10013986:	45c3      	cmp	fp, r8
10013988:	4180      	sbcs	r0, r0
1001398a:	4240      	negs	r0, r0
1001398c:	4682      	mov	sl, r0
1001398e:	0410      	lsls	r0, r2, #16
10013990:	4684      	mov	ip, r0
10013992:	9801      	ldr	r0, [sp, #4]
10013994:	4467      	add	r7, ip
10013996:	4684      	mov	ip, r0
10013998:	4467      	add	r7, ip
1001399a:	44a3      	add	fp, r4
1001399c:	46bc      	mov	ip, r7
1001399e:	45a3      	cmp	fp, r4
100139a0:	41a4      	sbcs	r4, r4
100139a2:	4699      	mov	r9, r3
100139a4:	44d4      	add	ip, sl
100139a6:	4264      	negs	r4, r4
100139a8:	4287      	cmp	r7, r0
100139aa:	41bf      	sbcs	r7, r7
100139ac:	45d4      	cmp	ip, sl
100139ae:	4180      	sbcs	r0, r0
100139b0:	44e1      	add	r9, ip
100139b2:	46a0      	mov	r8, r4
100139b4:	4599      	cmp	r9, r3
100139b6:	419b      	sbcs	r3, r3
100139b8:	427f      	negs	r7, r7
100139ba:	4240      	negs	r0, r0
100139bc:	44c8      	add	r8, r9
100139be:	4307      	orrs	r7, r0
100139c0:	0c12      	lsrs	r2, r2, #16
100139c2:	18ba      	adds	r2, r7, r2
100139c4:	45a0      	cmp	r8, r4
100139c6:	41a4      	sbcs	r4, r4
100139c8:	425f      	negs	r7, r3
100139ca:	003b      	movs	r3, r7
100139cc:	4264      	negs	r4, r4
100139ce:	4323      	orrs	r3, r4
100139d0:	18d7      	adds	r7, r2, r3
100139d2:	4643      	mov	r3, r8
100139d4:	197d      	adds	r5, r7, r5
100139d6:	0ddb      	lsrs	r3, r3, #23
100139d8:	026d      	lsls	r5, r5, #9
100139da:	431d      	orrs	r5, r3
100139dc:	465b      	mov	r3, fp
100139de:	025a      	lsls	r2, r3, #9
100139e0:	9b05      	ldr	r3, [sp, #20]
100139e2:	431a      	orrs	r2, r3
100139e4:	1e53      	subs	r3, r2, #1
100139e6:	419a      	sbcs	r2, r3
100139e8:	465b      	mov	r3, fp
100139ea:	0ddb      	lsrs	r3, r3, #23
100139ec:	431a      	orrs	r2, r3
100139ee:	4643      	mov	r3, r8
100139f0:	025b      	lsls	r3, r3, #9
100139f2:	4313      	orrs	r3, r2
100139f4:	01ea      	lsls	r2, r5, #7
100139f6:	d507      	bpl.n	10013a08 <__aeabi_dmul+0x384>
100139f8:	2201      	movs	r2, #1
100139fa:	085c      	lsrs	r4, r3, #1
100139fc:	4013      	ands	r3, r2
100139fe:	4323      	orrs	r3, r4
10013a00:	07ea      	lsls	r2, r5, #31
10013a02:	9e02      	ldr	r6, [sp, #8]
10013a04:	4313      	orrs	r3, r2
10013a06:	086d      	lsrs	r5, r5, #1
10013a08:	4a57      	ldr	r2, [pc, #348]	; (10013b68 <__aeabi_dmul+0x4e4>)
10013a0a:	18b2      	adds	r2, r6, r2
10013a0c:	2a00      	cmp	r2, #0
10013a0e:	dd4b      	ble.n	10013aa8 <__aeabi_dmul+0x424>
10013a10:	0758      	lsls	r0, r3, #29
10013a12:	d009      	beq.n	10013a28 <__aeabi_dmul+0x3a4>
10013a14:	200f      	movs	r0, #15
10013a16:	4018      	ands	r0, r3
10013a18:	2804      	cmp	r0, #4
10013a1a:	d005      	beq.n	10013a28 <__aeabi_dmul+0x3a4>
10013a1c:	1d18      	adds	r0, r3, #4
10013a1e:	4298      	cmp	r0, r3
10013a20:	419b      	sbcs	r3, r3
10013a22:	425b      	negs	r3, r3
10013a24:	18ed      	adds	r5, r5, r3
10013a26:	0003      	movs	r3, r0
10013a28:	01e8      	lsls	r0, r5, #7
10013a2a:	d504      	bpl.n	10013a36 <__aeabi_dmul+0x3b2>
10013a2c:	4a4f      	ldr	r2, [pc, #316]	; (10013b6c <__aeabi_dmul+0x4e8>)
10013a2e:	4015      	ands	r5, r2
10013a30:	2280      	movs	r2, #128	; 0x80
10013a32:	00d2      	lsls	r2, r2, #3
10013a34:	18b2      	adds	r2, r6, r2
10013a36:	484e      	ldr	r0, [pc, #312]	; (10013b70 <__aeabi_dmul+0x4ec>)
10013a38:	4282      	cmp	r2, r0
10013a3a:	dd00      	ble.n	10013a3e <__aeabi_dmul+0x3ba>
10013a3c:	e6e7      	b.n	1001380e <__aeabi_dmul+0x18a>
10013a3e:	2401      	movs	r4, #1
10013a40:	08db      	lsrs	r3, r3, #3
10013a42:	0768      	lsls	r0, r5, #29
10013a44:	4318      	orrs	r0, r3
10013a46:	026d      	lsls	r5, r5, #9
10013a48:	0553      	lsls	r3, r2, #21
10013a4a:	4680      	mov	r8, r0
10013a4c:	0b2d      	lsrs	r5, r5, #12
10013a4e:	0d5b      	lsrs	r3, r3, #21
10013a50:	400c      	ands	r4, r1
10013a52:	e67d      	b.n	10013750 <__aeabi_dmul+0xcc>
10013a54:	2280      	movs	r2, #128	; 0x80
10013a56:	4659      	mov	r1, fp
10013a58:	0312      	lsls	r2, r2, #12
10013a5a:	4211      	tst	r1, r2
10013a5c:	d008      	beq.n	10013a70 <__aeabi_dmul+0x3ec>
10013a5e:	4215      	tst	r5, r2
10013a60:	d106      	bne.n	10013a70 <__aeabi_dmul+0x3ec>
10013a62:	4315      	orrs	r5, r2
10013a64:	032d      	lsls	r5, r5, #12
10013a66:	4698      	mov	r8, r3
10013a68:	0b2d      	lsrs	r5, r5, #12
10013a6a:	464c      	mov	r4, r9
10013a6c:	4b41      	ldr	r3, [pc, #260]	; (10013b74 <__aeabi_dmul+0x4f0>)
10013a6e:	e66f      	b.n	10013750 <__aeabi_dmul+0xcc>
10013a70:	465d      	mov	r5, fp
10013a72:	4315      	orrs	r5, r2
10013a74:	032d      	lsls	r5, r5, #12
10013a76:	0b2d      	lsrs	r5, r5, #12
10013a78:	4b3e      	ldr	r3, [pc, #248]	; (10013b74 <__aeabi_dmul+0x4f0>)
10013a7a:	e669      	b.n	10013750 <__aeabi_dmul+0xcc>
10013a7c:	0003      	movs	r3, r0
10013a7e:	4655      	mov	r5, sl
10013a80:	3b28      	subs	r3, #40	; 0x28
10013a82:	409d      	lsls	r5, r3
10013a84:	2300      	movs	r3, #0
10013a86:	e6bc      	b.n	10013802 <__aeabi_dmul+0x17e>
10013a88:	4650      	mov	r0, sl
10013a8a:	f000 fc37 	bl	100142fc <__clzsi2>
10013a8e:	3020      	adds	r0, #32
10013a90:	e6a8      	b.n	100137e4 <__aeabi_dmul+0x160>
10013a92:	0003      	movs	r3, r0
10013a94:	3b28      	subs	r3, #40	; 0x28
10013a96:	409f      	lsls	r7, r3
10013a98:	2300      	movs	r3, #0
10013a9a:	46bb      	mov	fp, r7
10013a9c:	4698      	mov	r8, r3
10013a9e:	e689      	b.n	100137b4 <__aeabi_dmul+0x130>
10013aa0:	f000 fc2c 	bl	100142fc <__clzsi2>
10013aa4:	3020      	adds	r0, #32
10013aa6:	e673      	b.n	10013790 <__aeabi_dmul+0x10c>
10013aa8:	2401      	movs	r4, #1
10013aaa:	1aa6      	subs	r6, r4, r2
10013aac:	2e38      	cmp	r6, #56	; 0x38
10013aae:	dd07      	ble.n	10013ac0 <__aeabi_dmul+0x43c>
10013ab0:	2200      	movs	r2, #0
10013ab2:	400c      	ands	r4, r1
10013ab4:	2300      	movs	r3, #0
10013ab6:	2500      	movs	r5, #0
10013ab8:	4690      	mov	r8, r2
10013aba:	e649      	b.n	10013750 <__aeabi_dmul+0xcc>
10013abc:	9e02      	ldr	r6, [sp, #8]
10013abe:	e7a3      	b.n	10013a08 <__aeabi_dmul+0x384>
10013ac0:	2e1f      	cmp	r6, #31
10013ac2:	dc20      	bgt.n	10013b06 <__aeabi_dmul+0x482>
10013ac4:	2220      	movs	r2, #32
10013ac6:	002c      	movs	r4, r5
10013ac8:	0018      	movs	r0, r3
10013aca:	1b92      	subs	r2, r2, r6
10013acc:	40f0      	lsrs	r0, r6
10013ace:	4094      	lsls	r4, r2
10013ad0:	4093      	lsls	r3, r2
10013ad2:	4304      	orrs	r4, r0
10013ad4:	1e58      	subs	r0, r3, #1
10013ad6:	4183      	sbcs	r3, r0
10013ad8:	431c      	orrs	r4, r3
10013ada:	40f5      	lsrs	r5, r6
10013adc:	0763      	lsls	r3, r4, #29
10013ade:	d009      	beq.n	10013af4 <__aeabi_dmul+0x470>
10013ae0:	230f      	movs	r3, #15
10013ae2:	4023      	ands	r3, r4
10013ae4:	2b04      	cmp	r3, #4
10013ae6:	d005      	beq.n	10013af4 <__aeabi_dmul+0x470>
10013ae8:	0023      	movs	r3, r4
10013aea:	1d1c      	adds	r4, r3, #4
10013aec:	429c      	cmp	r4, r3
10013aee:	4192      	sbcs	r2, r2
10013af0:	4252      	negs	r2, r2
10013af2:	18ad      	adds	r5, r5, r2
10013af4:	022b      	lsls	r3, r5, #8
10013af6:	d51f      	bpl.n	10013b38 <__aeabi_dmul+0x4b4>
10013af8:	2401      	movs	r4, #1
10013afa:	2200      	movs	r2, #0
10013afc:	400c      	ands	r4, r1
10013afe:	2301      	movs	r3, #1
10013b00:	2500      	movs	r5, #0
10013b02:	4690      	mov	r8, r2
10013b04:	e624      	b.n	10013750 <__aeabi_dmul+0xcc>
10013b06:	201f      	movs	r0, #31
10013b08:	002c      	movs	r4, r5
10013b0a:	4240      	negs	r0, r0
10013b0c:	1a82      	subs	r2, r0, r2
10013b0e:	40d4      	lsrs	r4, r2
10013b10:	2e20      	cmp	r6, #32
10013b12:	d01c      	beq.n	10013b4e <__aeabi_dmul+0x4ca>
10013b14:	2240      	movs	r2, #64	; 0x40
10013b16:	1b96      	subs	r6, r2, r6
10013b18:	40b5      	lsls	r5, r6
10013b1a:	432b      	orrs	r3, r5
10013b1c:	1e58      	subs	r0, r3, #1
10013b1e:	4183      	sbcs	r3, r0
10013b20:	2007      	movs	r0, #7
10013b22:	4323      	orrs	r3, r4
10013b24:	4018      	ands	r0, r3
10013b26:	2500      	movs	r5, #0
10013b28:	2800      	cmp	r0, #0
10013b2a:	d009      	beq.n	10013b40 <__aeabi_dmul+0x4bc>
10013b2c:	220f      	movs	r2, #15
10013b2e:	2500      	movs	r5, #0
10013b30:	401a      	ands	r2, r3
10013b32:	001c      	movs	r4, r3
10013b34:	2a04      	cmp	r2, #4
10013b36:	d1d8      	bne.n	10013aea <__aeabi_dmul+0x466>
10013b38:	0023      	movs	r3, r4
10013b3a:	0768      	lsls	r0, r5, #29
10013b3c:	026d      	lsls	r5, r5, #9
10013b3e:	0b2d      	lsrs	r5, r5, #12
10013b40:	2401      	movs	r4, #1
10013b42:	08db      	lsrs	r3, r3, #3
10013b44:	4303      	orrs	r3, r0
10013b46:	4698      	mov	r8, r3
10013b48:	400c      	ands	r4, r1
10013b4a:	2300      	movs	r3, #0
10013b4c:	e600      	b.n	10013750 <__aeabi_dmul+0xcc>
10013b4e:	2500      	movs	r5, #0
10013b50:	e7e3      	b.n	10013b1a <__aeabi_dmul+0x496>
10013b52:	2280      	movs	r2, #128	; 0x80
10013b54:	2401      	movs	r4, #1
10013b56:	0312      	lsls	r2, r2, #12
10013b58:	4315      	orrs	r5, r2
10013b5a:	032d      	lsls	r5, r5, #12
10013b5c:	4698      	mov	r8, r3
10013b5e:	0b2d      	lsrs	r5, r5, #12
10013b60:	400c      	ands	r4, r1
10013b62:	4b04      	ldr	r3, [pc, #16]	; (10013b74 <__aeabi_dmul+0x4f0>)
10013b64:	e5f4      	b.n	10013750 <__aeabi_dmul+0xcc>
10013b66:	46c0      	nop			; (mov r8, r8)
10013b68:	000003ff 	.word	0x000003ff
10013b6c:	feffffff 	.word	0xfeffffff
10013b70:	000007fe 	.word	0x000007fe
10013b74:	000007ff 	.word	0x000007ff

10013b78 <__aeabi_dsub>:
10013b78:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b7a:	4657      	mov	r7, sl
10013b7c:	464e      	mov	r6, r9
10013b7e:	4645      	mov	r5, r8
10013b80:	b4e0      	push	{r5, r6, r7}
10013b82:	000e      	movs	r6, r1
10013b84:	0011      	movs	r1, r2
10013b86:	0ff2      	lsrs	r2, r6, #31
10013b88:	4692      	mov	sl, r2
10013b8a:	00c5      	lsls	r5, r0, #3
10013b8c:	0f42      	lsrs	r2, r0, #29
10013b8e:	0318      	lsls	r0, r3, #12
10013b90:	0337      	lsls	r7, r6, #12
10013b92:	0074      	lsls	r4, r6, #1
10013b94:	0a40      	lsrs	r0, r0, #9
10013b96:	0f4e      	lsrs	r6, r1, #29
10013b98:	0a7f      	lsrs	r7, r7, #9
10013b9a:	4330      	orrs	r0, r6
10013b9c:	4ecf      	ldr	r6, [pc, #828]	; (10013edc <__aeabi_dsub+0x364>)
10013b9e:	4317      	orrs	r7, r2
10013ba0:	005a      	lsls	r2, r3, #1
10013ba2:	0d64      	lsrs	r4, r4, #21
10013ba4:	0d52      	lsrs	r2, r2, #21
10013ba6:	0fdb      	lsrs	r3, r3, #31
10013ba8:	00c9      	lsls	r1, r1, #3
10013baa:	42b2      	cmp	r2, r6
10013bac:	d100      	bne.n	10013bb0 <__aeabi_dsub+0x38>
10013bae:	e0e5      	b.n	10013d7c <__aeabi_dsub+0x204>
10013bb0:	2601      	movs	r6, #1
10013bb2:	4073      	eors	r3, r6
10013bb4:	1aa6      	subs	r6, r4, r2
10013bb6:	46b4      	mov	ip, r6
10013bb8:	4553      	cmp	r3, sl
10013bba:	d100      	bne.n	10013bbe <__aeabi_dsub+0x46>
10013bbc:	e0af      	b.n	10013d1e <__aeabi_dsub+0x1a6>
10013bbe:	2e00      	cmp	r6, #0
10013bc0:	dc00      	bgt.n	10013bc4 <__aeabi_dsub+0x4c>
10013bc2:	e10d      	b.n	10013de0 <__aeabi_dsub+0x268>
10013bc4:	2a00      	cmp	r2, #0
10013bc6:	d13a      	bne.n	10013c3e <__aeabi_dsub+0xc6>
10013bc8:	0003      	movs	r3, r0
10013bca:	430b      	orrs	r3, r1
10013bcc:	d000      	beq.n	10013bd0 <__aeabi_dsub+0x58>
10013bce:	e0e4      	b.n	10013d9a <__aeabi_dsub+0x222>
10013bd0:	076b      	lsls	r3, r5, #29
10013bd2:	d009      	beq.n	10013be8 <__aeabi_dsub+0x70>
10013bd4:	230f      	movs	r3, #15
10013bd6:	402b      	ands	r3, r5
10013bd8:	2b04      	cmp	r3, #4
10013bda:	d005      	beq.n	10013be8 <__aeabi_dsub+0x70>
10013bdc:	1d2b      	adds	r3, r5, #4
10013bde:	42ab      	cmp	r3, r5
10013be0:	41ad      	sbcs	r5, r5
10013be2:	426d      	negs	r5, r5
10013be4:	197f      	adds	r7, r7, r5
10013be6:	001d      	movs	r5, r3
10013be8:	023b      	lsls	r3, r7, #8
10013bea:	d400      	bmi.n	10013bee <__aeabi_dsub+0x76>
10013bec:	e088      	b.n	10013d00 <__aeabi_dsub+0x188>
10013bee:	4bbb      	ldr	r3, [pc, #748]	; (10013edc <__aeabi_dsub+0x364>)
10013bf0:	3401      	adds	r4, #1
10013bf2:	429c      	cmp	r4, r3
10013bf4:	d100      	bne.n	10013bf8 <__aeabi_dsub+0x80>
10013bf6:	e110      	b.n	10013e1a <__aeabi_dsub+0x2a2>
10013bf8:	003a      	movs	r2, r7
10013bfa:	4bb9      	ldr	r3, [pc, #740]	; (10013ee0 <__aeabi_dsub+0x368>)
10013bfc:	4651      	mov	r1, sl
10013bfe:	401a      	ands	r2, r3
10013c00:	2301      	movs	r3, #1
10013c02:	0750      	lsls	r0, r2, #29
10013c04:	08ed      	lsrs	r5, r5, #3
10013c06:	0252      	lsls	r2, r2, #9
10013c08:	0564      	lsls	r4, r4, #21
10013c0a:	4305      	orrs	r5, r0
10013c0c:	0b12      	lsrs	r2, r2, #12
10013c0e:	0d64      	lsrs	r4, r4, #21
10013c10:	400b      	ands	r3, r1
10013c12:	2100      	movs	r1, #0
10013c14:	0028      	movs	r0, r5
10013c16:	0312      	lsls	r2, r2, #12
10013c18:	0d0d      	lsrs	r5, r1, #20
10013c1a:	0b12      	lsrs	r2, r2, #12
10013c1c:	0564      	lsls	r4, r4, #21
10013c1e:	052d      	lsls	r5, r5, #20
10013c20:	4315      	orrs	r5, r2
10013c22:	0862      	lsrs	r2, r4, #1
10013c24:	4caf      	ldr	r4, [pc, #700]	; (10013ee4 <__aeabi_dsub+0x36c>)
10013c26:	07db      	lsls	r3, r3, #31
10013c28:	402c      	ands	r4, r5
10013c2a:	4314      	orrs	r4, r2
10013c2c:	0064      	lsls	r4, r4, #1
10013c2e:	0864      	lsrs	r4, r4, #1
10013c30:	431c      	orrs	r4, r3
10013c32:	0021      	movs	r1, r4
10013c34:	bc1c      	pop	{r2, r3, r4}
10013c36:	4690      	mov	r8, r2
10013c38:	4699      	mov	r9, r3
10013c3a:	46a2      	mov	sl, r4
10013c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c3e:	4ba7      	ldr	r3, [pc, #668]	; (10013edc <__aeabi_dsub+0x364>)
10013c40:	429c      	cmp	r4, r3
10013c42:	d0c5      	beq.n	10013bd0 <__aeabi_dsub+0x58>
10013c44:	2380      	movs	r3, #128	; 0x80
10013c46:	041b      	lsls	r3, r3, #16
10013c48:	4318      	orrs	r0, r3
10013c4a:	4663      	mov	r3, ip
10013c4c:	2b38      	cmp	r3, #56	; 0x38
10013c4e:	dd00      	ble.n	10013c52 <__aeabi_dsub+0xda>
10013c50:	e0fd      	b.n	10013e4e <__aeabi_dsub+0x2d6>
10013c52:	2b1f      	cmp	r3, #31
10013c54:	dd00      	ble.n	10013c58 <__aeabi_dsub+0xe0>
10013c56:	e130      	b.n	10013eba <__aeabi_dsub+0x342>
10013c58:	4662      	mov	r2, ip
10013c5a:	2320      	movs	r3, #32
10013c5c:	1a9b      	subs	r3, r3, r2
10013c5e:	0002      	movs	r2, r0
10013c60:	409a      	lsls	r2, r3
10013c62:	4666      	mov	r6, ip
10013c64:	4690      	mov	r8, r2
10013c66:	000a      	movs	r2, r1
10013c68:	4099      	lsls	r1, r3
10013c6a:	40f2      	lsrs	r2, r6
10013c6c:	4646      	mov	r6, r8
10013c6e:	1e4b      	subs	r3, r1, #1
10013c70:	4199      	sbcs	r1, r3
10013c72:	4332      	orrs	r2, r6
10013c74:	4311      	orrs	r1, r2
10013c76:	4663      	mov	r3, ip
10013c78:	0002      	movs	r2, r0
10013c7a:	40da      	lsrs	r2, r3
10013c7c:	1a69      	subs	r1, r5, r1
10013c7e:	428d      	cmp	r5, r1
10013c80:	419b      	sbcs	r3, r3
10013c82:	000d      	movs	r5, r1
10013c84:	1aba      	subs	r2, r7, r2
10013c86:	425b      	negs	r3, r3
10013c88:	1ad7      	subs	r7, r2, r3
10013c8a:	023b      	lsls	r3, r7, #8
10013c8c:	d535      	bpl.n	10013cfa <__aeabi_dsub+0x182>
10013c8e:	027a      	lsls	r2, r7, #9
10013c90:	0a53      	lsrs	r3, r2, #9
10013c92:	4698      	mov	r8, r3
10013c94:	4643      	mov	r3, r8
10013c96:	2b00      	cmp	r3, #0
10013c98:	d100      	bne.n	10013c9c <__aeabi_dsub+0x124>
10013c9a:	e0c4      	b.n	10013e26 <__aeabi_dsub+0x2ae>
10013c9c:	4640      	mov	r0, r8
10013c9e:	f000 fb2d 	bl	100142fc <__clzsi2>
10013ca2:	0003      	movs	r3, r0
10013ca4:	3b08      	subs	r3, #8
10013ca6:	2b1f      	cmp	r3, #31
10013ca8:	dd00      	ble.n	10013cac <__aeabi_dsub+0x134>
10013caa:	e0c5      	b.n	10013e38 <__aeabi_dsub+0x2c0>
10013cac:	2220      	movs	r2, #32
10013cae:	0029      	movs	r1, r5
10013cb0:	1ad2      	subs	r2, r2, r3
10013cb2:	4647      	mov	r7, r8
10013cb4:	40d1      	lsrs	r1, r2
10013cb6:	409f      	lsls	r7, r3
10013cb8:	000a      	movs	r2, r1
10013cba:	409d      	lsls	r5, r3
10013cbc:	433a      	orrs	r2, r7
10013cbe:	429c      	cmp	r4, r3
10013cc0:	dd00      	ble.n	10013cc4 <__aeabi_dsub+0x14c>
10013cc2:	e0c0      	b.n	10013e46 <__aeabi_dsub+0x2ce>
10013cc4:	1b1c      	subs	r4, r3, r4
10013cc6:	1c63      	adds	r3, r4, #1
10013cc8:	2b1f      	cmp	r3, #31
10013cca:	dd00      	ble.n	10013cce <__aeabi_dsub+0x156>
10013ccc:	e0e4      	b.n	10013e98 <__aeabi_dsub+0x320>
10013cce:	2120      	movs	r1, #32
10013cd0:	0014      	movs	r4, r2
10013cd2:	0028      	movs	r0, r5
10013cd4:	1ac9      	subs	r1, r1, r3
10013cd6:	40d8      	lsrs	r0, r3
10013cd8:	408c      	lsls	r4, r1
10013cda:	408d      	lsls	r5, r1
10013cdc:	4304      	orrs	r4, r0
10013cde:	40da      	lsrs	r2, r3
10013ce0:	1e68      	subs	r0, r5, #1
10013ce2:	4185      	sbcs	r5, r0
10013ce4:	0017      	movs	r7, r2
10013ce6:	4325      	orrs	r5, r4
10013ce8:	2400      	movs	r4, #0
10013cea:	e771      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013cec:	4642      	mov	r2, r8
10013cee:	4663      	mov	r3, ip
10013cf0:	431a      	orrs	r2, r3
10013cf2:	d100      	bne.n	10013cf6 <__aeabi_dsub+0x17e>
10013cf4:	e24c      	b.n	10014190 <__aeabi_dsub+0x618>
10013cf6:	4667      	mov	r7, ip
10013cf8:	4645      	mov	r5, r8
10013cfa:	076b      	lsls	r3, r5, #29
10013cfc:	d000      	beq.n	10013d00 <__aeabi_dsub+0x188>
10013cfe:	e769      	b.n	10013bd4 <__aeabi_dsub+0x5c>
10013d00:	2301      	movs	r3, #1
10013d02:	4651      	mov	r1, sl
10013d04:	0778      	lsls	r0, r7, #29
10013d06:	08ed      	lsrs	r5, r5, #3
10013d08:	08fa      	lsrs	r2, r7, #3
10013d0a:	400b      	ands	r3, r1
10013d0c:	4305      	orrs	r5, r0
10013d0e:	4973      	ldr	r1, [pc, #460]	; (10013edc <__aeabi_dsub+0x364>)
10013d10:	428c      	cmp	r4, r1
10013d12:	d038      	beq.n	10013d86 <__aeabi_dsub+0x20e>
10013d14:	0312      	lsls	r2, r2, #12
10013d16:	0564      	lsls	r4, r4, #21
10013d18:	0b12      	lsrs	r2, r2, #12
10013d1a:	0d64      	lsrs	r4, r4, #21
10013d1c:	e779      	b.n	10013c12 <__aeabi_dsub+0x9a>
10013d1e:	2e00      	cmp	r6, #0
10013d20:	dc00      	bgt.n	10013d24 <__aeabi_dsub+0x1ac>
10013d22:	e09a      	b.n	10013e5a <__aeabi_dsub+0x2e2>
10013d24:	2a00      	cmp	r2, #0
10013d26:	d047      	beq.n	10013db8 <__aeabi_dsub+0x240>
10013d28:	4a6c      	ldr	r2, [pc, #432]	; (10013edc <__aeabi_dsub+0x364>)
10013d2a:	4294      	cmp	r4, r2
10013d2c:	d100      	bne.n	10013d30 <__aeabi_dsub+0x1b8>
10013d2e:	e74f      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013d30:	2280      	movs	r2, #128	; 0x80
10013d32:	0412      	lsls	r2, r2, #16
10013d34:	4310      	orrs	r0, r2
10013d36:	4662      	mov	r2, ip
10013d38:	2a38      	cmp	r2, #56	; 0x38
10013d3a:	dc00      	bgt.n	10013d3e <__aeabi_dsub+0x1c6>
10013d3c:	e108      	b.n	10013f50 <__aeabi_dsub+0x3d8>
10013d3e:	4301      	orrs	r1, r0
10013d40:	1e48      	subs	r0, r1, #1
10013d42:	4181      	sbcs	r1, r0
10013d44:	2200      	movs	r2, #0
10013d46:	b2c9      	uxtb	r1, r1
10013d48:	1949      	adds	r1, r1, r5
10013d4a:	19d2      	adds	r2, r2, r7
10013d4c:	42a9      	cmp	r1, r5
10013d4e:	41bf      	sbcs	r7, r7
10013d50:	000d      	movs	r5, r1
10013d52:	427f      	negs	r7, r7
10013d54:	18bf      	adds	r7, r7, r2
10013d56:	023a      	lsls	r2, r7, #8
10013d58:	d400      	bmi.n	10013d5c <__aeabi_dsub+0x1e4>
10013d5a:	e142      	b.n	10013fe2 <__aeabi_dsub+0x46a>
10013d5c:	4a5f      	ldr	r2, [pc, #380]	; (10013edc <__aeabi_dsub+0x364>)
10013d5e:	3401      	adds	r4, #1
10013d60:	4294      	cmp	r4, r2
10013d62:	d100      	bne.n	10013d66 <__aeabi_dsub+0x1ee>
10013d64:	e14e      	b.n	10014004 <__aeabi_dsub+0x48c>
10013d66:	2001      	movs	r0, #1
10013d68:	4a5d      	ldr	r2, [pc, #372]	; (10013ee0 <__aeabi_dsub+0x368>)
10013d6a:	0869      	lsrs	r1, r5, #1
10013d6c:	403a      	ands	r2, r7
10013d6e:	4028      	ands	r0, r5
10013d70:	4308      	orrs	r0, r1
10013d72:	07d5      	lsls	r5, r2, #31
10013d74:	4305      	orrs	r5, r0
10013d76:	0857      	lsrs	r7, r2, #1
10013d78:	469a      	mov	sl, r3
10013d7a:	e729      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013d7c:	0006      	movs	r6, r0
10013d7e:	430e      	orrs	r6, r1
10013d80:	d000      	beq.n	10013d84 <__aeabi_dsub+0x20c>
10013d82:	e717      	b.n	10013bb4 <__aeabi_dsub+0x3c>
10013d84:	e714      	b.n	10013bb0 <__aeabi_dsub+0x38>
10013d86:	0029      	movs	r1, r5
10013d88:	4311      	orrs	r1, r2
10013d8a:	d100      	bne.n	10013d8e <__aeabi_dsub+0x216>
10013d8c:	e1f9      	b.n	10014182 <__aeabi_dsub+0x60a>
10013d8e:	2180      	movs	r1, #128	; 0x80
10013d90:	0309      	lsls	r1, r1, #12
10013d92:	430a      	orrs	r2, r1
10013d94:	0312      	lsls	r2, r2, #12
10013d96:	0b12      	lsrs	r2, r2, #12
10013d98:	e73b      	b.n	10013c12 <__aeabi_dsub+0x9a>
10013d9a:	2301      	movs	r3, #1
10013d9c:	425b      	negs	r3, r3
10013d9e:	4698      	mov	r8, r3
10013da0:	44c4      	add	ip, r8
10013da2:	4663      	mov	r3, ip
10013da4:	2b00      	cmp	r3, #0
10013da6:	d172      	bne.n	10013e8e <__aeabi_dsub+0x316>
10013da8:	1a69      	subs	r1, r5, r1
10013daa:	428d      	cmp	r5, r1
10013dac:	419b      	sbcs	r3, r3
10013dae:	1a3f      	subs	r7, r7, r0
10013db0:	425b      	negs	r3, r3
10013db2:	1aff      	subs	r7, r7, r3
10013db4:	000d      	movs	r5, r1
10013db6:	e768      	b.n	10013c8a <__aeabi_dsub+0x112>
10013db8:	0002      	movs	r2, r0
10013dba:	430a      	orrs	r2, r1
10013dbc:	d100      	bne.n	10013dc0 <__aeabi_dsub+0x248>
10013dbe:	e707      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013dc0:	2201      	movs	r2, #1
10013dc2:	4252      	negs	r2, r2
10013dc4:	4690      	mov	r8, r2
10013dc6:	44c4      	add	ip, r8
10013dc8:	4662      	mov	r2, ip
10013dca:	2a00      	cmp	r2, #0
10013dcc:	d000      	beq.n	10013dd0 <__aeabi_dsub+0x258>
10013dce:	e0e6      	b.n	10013f9e <__aeabi_dsub+0x426>
10013dd0:	1869      	adds	r1, r5, r1
10013dd2:	42a9      	cmp	r1, r5
10013dd4:	41b6      	sbcs	r6, r6
10013dd6:	183f      	adds	r7, r7, r0
10013dd8:	4276      	negs	r6, r6
10013dda:	19f7      	adds	r7, r6, r7
10013ddc:	000d      	movs	r5, r1
10013dde:	e7ba      	b.n	10013d56 <__aeabi_dsub+0x1de>
10013de0:	2e00      	cmp	r6, #0
10013de2:	d000      	beq.n	10013de6 <__aeabi_dsub+0x26e>
10013de4:	e080      	b.n	10013ee8 <__aeabi_dsub+0x370>
10013de6:	1c62      	adds	r2, r4, #1
10013de8:	0552      	lsls	r2, r2, #21
10013dea:	0d52      	lsrs	r2, r2, #21
10013dec:	2a01      	cmp	r2, #1
10013dee:	dc00      	bgt.n	10013df2 <__aeabi_dsub+0x27a>
10013df0:	e0f9      	b.n	10013fe6 <__aeabi_dsub+0x46e>
10013df2:	1a6a      	subs	r2, r5, r1
10013df4:	4691      	mov	r9, r2
10013df6:	454d      	cmp	r5, r9
10013df8:	41b6      	sbcs	r6, r6
10013dfa:	1a3a      	subs	r2, r7, r0
10013dfc:	4276      	negs	r6, r6
10013dfe:	1b92      	subs	r2, r2, r6
10013e00:	4690      	mov	r8, r2
10013e02:	0212      	lsls	r2, r2, #8
10013e04:	d400      	bmi.n	10013e08 <__aeabi_dsub+0x290>
10013e06:	e099      	b.n	10013f3c <__aeabi_dsub+0x3c4>
10013e08:	1b4d      	subs	r5, r1, r5
10013e0a:	42a9      	cmp	r1, r5
10013e0c:	4189      	sbcs	r1, r1
10013e0e:	1bc7      	subs	r7, r0, r7
10013e10:	4249      	negs	r1, r1
10013e12:	1a7a      	subs	r2, r7, r1
10013e14:	4690      	mov	r8, r2
10013e16:	469a      	mov	sl, r3
10013e18:	e73c      	b.n	10013c94 <__aeabi_dsub+0x11c>
10013e1a:	4652      	mov	r2, sl
10013e1c:	2301      	movs	r3, #1
10013e1e:	2500      	movs	r5, #0
10013e20:	4013      	ands	r3, r2
10013e22:	2200      	movs	r2, #0
10013e24:	e6f5      	b.n	10013c12 <__aeabi_dsub+0x9a>
10013e26:	0028      	movs	r0, r5
10013e28:	f000 fa68 	bl	100142fc <__clzsi2>
10013e2c:	3020      	adds	r0, #32
10013e2e:	0003      	movs	r3, r0
10013e30:	3b08      	subs	r3, #8
10013e32:	2b1f      	cmp	r3, #31
10013e34:	dc00      	bgt.n	10013e38 <__aeabi_dsub+0x2c0>
10013e36:	e739      	b.n	10013cac <__aeabi_dsub+0x134>
10013e38:	002a      	movs	r2, r5
10013e3a:	3828      	subs	r0, #40	; 0x28
10013e3c:	4082      	lsls	r2, r0
10013e3e:	2500      	movs	r5, #0
10013e40:	429c      	cmp	r4, r3
10013e42:	dc00      	bgt.n	10013e46 <__aeabi_dsub+0x2ce>
10013e44:	e73e      	b.n	10013cc4 <__aeabi_dsub+0x14c>
10013e46:	4f26      	ldr	r7, [pc, #152]	; (10013ee0 <__aeabi_dsub+0x368>)
10013e48:	1ae4      	subs	r4, r4, r3
10013e4a:	4017      	ands	r7, r2
10013e4c:	e6c0      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013e4e:	4301      	orrs	r1, r0
10013e50:	1e48      	subs	r0, r1, #1
10013e52:	4181      	sbcs	r1, r0
10013e54:	2200      	movs	r2, #0
10013e56:	b2c9      	uxtb	r1, r1
10013e58:	e710      	b.n	10013c7c <__aeabi_dsub+0x104>
10013e5a:	2e00      	cmp	r6, #0
10013e5c:	d000      	beq.n	10013e60 <__aeabi_dsub+0x2e8>
10013e5e:	e0f1      	b.n	10014044 <__aeabi_dsub+0x4cc>
10013e60:	1c62      	adds	r2, r4, #1
10013e62:	4694      	mov	ip, r2
10013e64:	0552      	lsls	r2, r2, #21
10013e66:	0d52      	lsrs	r2, r2, #21
10013e68:	2a01      	cmp	r2, #1
10013e6a:	dc00      	bgt.n	10013e6e <__aeabi_dsub+0x2f6>
10013e6c:	e0a0      	b.n	10013fb0 <__aeabi_dsub+0x438>
10013e6e:	4a1b      	ldr	r2, [pc, #108]	; (10013edc <__aeabi_dsub+0x364>)
10013e70:	4594      	cmp	ip, r2
10013e72:	d100      	bne.n	10013e76 <__aeabi_dsub+0x2fe>
10013e74:	e0c5      	b.n	10014002 <__aeabi_dsub+0x48a>
10013e76:	1869      	adds	r1, r5, r1
10013e78:	42a9      	cmp	r1, r5
10013e7a:	4192      	sbcs	r2, r2
10013e7c:	183f      	adds	r7, r7, r0
10013e7e:	4252      	negs	r2, r2
10013e80:	19d2      	adds	r2, r2, r7
10013e82:	0849      	lsrs	r1, r1, #1
10013e84:	07d5      	lsls	r5, r2, #31
10013e86:	430d      	orrs	r5, r1
10013e88:	0857      	lsrs	r7, r2, #1
10013e8a:	4664      	mov	r4, ip
10013e8c:	e6a0      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013e8e:	4b13      	ldr	r3, [pc, #76]	; (10013edc <__aeabi_dsub+0x364>)
10013e90:	429c      	cmp	r4, r3
10013e92:	d000      	beq.n	10013e96 <__aeabi_dsub+0x31e>
10013e94:	e6d9      	b.n	10013c4a <__aeabi_dsub+0xd2>
10013e96:	e69b      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013e98:	0011      	movs	r1, r2
10013e9a:	3c1f      	subs	r4, #31
10013e9c:	40e1      	lsrs	r1, r4
10013e9e:	000c      	movs	r4, r1
10013ea0:	2b20      	cmp	r3, #32
10013ea2:	d100      	bne.n	10013ea6 <__aeabi_dsub+0x32e>
10013ea4:	e080      	b.n	10013fa8 <__aeabi_dsub+0x430>
10013ea6:	2140      	movs	r1, #64	; 0x40
10013ea8:	1acb      	subs	r3, r1, r3
10013eaa:	409a      	lsls	r2, r3
10013eac:	4315      	orrs	r5, r2
10013eae:	1e6a      	subs	r2, r5, #1
10013eb0:	4195      	sbcs	r5, r2
10013eb2:	2700      	movs	r7, #0
10013eb4:	4325      	orrs	r5, r4
10013eb6:	2400      	movs	r4, #0
10013eb8:	e71f      	b.n	10013cfa <__aeabi_dsub+0x182>
10013eba:	4663      	mov	r3, ip
10013ebc:	0002      	movs	r2, r0
10013ebe:	3b20      	subs	r3, #32
10013ec0:	40da      	lsrs	r2, r3
10013ec2:	4663      	mov	r3, ip
10013ec4:	2b20      	cmp	r3, #32
10013ec6:	d071      	beq.n	10013fac <__aeabi_dsub+0x434>
10013ec8:	2340      	movs	r3, #64	; 0x40
10013eca:	4666      	mov	r6, ip
10013ecc:	1b9b      	subs	r3, r3, r6
10013ece:	4098      	lsls	r0, r3
10013ed0:	4301      	orrs	r1, r0
10013ed2:	1e48      	subs	r0, r1, #1
10013ed4:	4181      	sbcs	r1, r0
10013ed6:	4311      	orrs	r1, r2
10013ed8:	2200      	movs	r2, #0
10013eda:	e6cf      	b.n	10013c7c <__aeabi_dsub+0x104>
10013edc:	000007ff 	.word	0x000007ff
10013ee0:	ff7fffff 	.word	0xff7fffff
10013ee4:	800fffff 	.word	0x800fffff
10013ee8:	2c00      	cmp	r4, #0
10013eea:	d048      	beq.n	10013f7e <__aeabi_dsub+0x406>
10013eec:	4cca      	ldr	r4, [pc, #808]	; (10014218 <__aeabi_dsub+0x6a0>)
10013eee:	42a2      	cmp	r2, r4
10013ef0:	d100      	bne.n	10013ef4 <__aeabi_dsub+0x37c>
10013ef2:	e0a2      	b.n	1001403a <__aeabi_dsub+0x4c2>
10013ef4:	4274      	negs	r4, r6
10013ef6:	46a1      	mov	r9, r4
10013ef8:	2480      	movs	r4, #128	; 0x80
10013efa:	0424      	lsls	r4, r4, #16
10013efc:	4327      	orrs	r7, r4
10013efe:	464c      	mov	r4, r9
10013f00:	2c38      	cmp	r4, #56	; 0x38
10013f02:	dd00      	ble.n	10013f06 <__aeabi_dsub+0x38e>
10013f04:	e0db      	b.n	100140be <__aeabi_dsub+0x546>
10013f06:	2c1f      	cmp	r4, #31
10013f08:	dd00      	ble.n	10013f0c <__aeabi_dsub+0x394>
10013f0a:	e144      	b.n	10014196 <__aeabi_dsub+0x61e>
10013f0c:	464e      	mov	r6, r9
10013f0e:	2420      	movs	r4, #32
10013f10:	1ba4      	subs	r4, r4, r6
10013f12:	003e      	movs	r6, r7
10013f14:	40a6      	lsls	r6, r4
10013f16:	46a2      	mov	sl, r4
10013f18:	46b0      	mov	r8, r6
10013f1a:	464c      	mov	r4, r9
10013f1c:	002e      	movs	r6, r5
10013f1e:	40e6      	lsrs	r6, r4
10013f20:	46b4      	mov	ip, r6
10013f22:	4646      	mov	r6, r8
10013f24:	4664      	mov	r4, ip
10013f26:	4326      	orrs	r6, r4
10013f28:	4654      	mov	r4, sl
10013f2a:	40a5      	lsls	r5, r4
10013f2c:	1e6c      	subs	r4, r5, #1
10013f2e:	41a5      	sbcs	r5, r4
10013f30:	0034      	movs	r4, r6
10013f32:	432c      	orrs	r4, r5
10013f34:	464d      	mov	r5, r9
10013f36:	40ef      	lsrs	r7, r5
10013f38:	1b0d      	subs	r5, r1, r4
10013f3a:	e028      	b.n	10013f8e <__aeabi_dsub+0x416>
10013f3c:	464a      	mov	r2, r9
10013f3e:	4643      	mov	r3, r8
10013f40:	464d      	mov	r5, r9
10013f42:	431a      	orrs	r2, r3
10013f44:	d000      	beq.n	10013f48 <__aeabi_dsub+0x3d0>
10013f46:	e6a5      	b.n	10013c94 <__aeabi_dsub+0x11c>
10013f48:	2300      	movs	r3, #0
10013f4a:	2400      	movs	r4, #0
10013f4c:	2500      	movs	r5, #0
10013f4e:	e6de      	b.n	10013d0e <__aeabi_dsub+0x196>
10013f50:	2a1f      	cmp	r2, #31
10013f52:	dc5a      	bgt.n	1001400a <__aeabi_dsub+0x492>
10013f54:	4666      	mov	r6, ip
10013f56:	2220      	movs	r2, #32
10013f58:	1b92      	subs	r2, r2, r6
10013f5a:	0006      	movs	r6, r0
10013f5c:	4096      	lsls	r6, r2
10013f5e:	4691      	mov	r9, r2
10013f60:	46b0      	mov	r8, r6
10013f62:	4662      	mov	r2, ip
10013f64:	000e      	movs	r6, r1
10013f66:	40d6      	lsrs	r6, r2
10013f68:	4642      	mov	r2, r8
10013f6a:	4316      	orrs	r6, r2
10013f6c:	464a      	mov	r2, r9
10013f6e:	4091      	lsls	r1, r2
10013f70:	1e4a      	subs	r2, r1, #1
10013f72:	4191      	sbcs	r1, r2
10013f74:	0002      	movs	r2, r0
10013f76:	4660      	mov	r0, ip
10013f78:	4331      	orrs	r1, r6
10013f7a:	40c2      	lsrs	r2, r0
10013f7c:	e6e4      	b.n	10013d48 <__aeabi_dsub+0x1d0>
10013f7e:	003c      	movs	r4, r7
10013f80:	432c      	orrs	r4, r5
10013f82:	d05a      	beq.n	1001403a <__aeabi_dsub+0x4c2>
10013f84:	43f4      	mvns	r4, r6
10013f86:	46a1      	mov	r9, r4
10013f88:	2c00      	cmp	r4, #0
10013f8a:	d152      	bne.n	10014032 <__aeabi_dsub+0x4ba>
10013f8c:	1b4d      	subs	r5, r1, r5
10013f8e:	42a9      	cmp	r1, r5
10013f90:	4189      	sbcs	r1, r1
10013f92:	1bc7      	subs	r7, r0, r7
10013f94:	4249      	negs	r1, r1
10013f96:	1a7f      	subs	r7, r7, r1
10013f98:	0014      	movs	r4, r2
10013f9a:	469a      	mov	sl, r3
10013f9c:	e675      	b.n	10013c8a <__aeabi_dsub+0x112>
10013f9e:	4a9e      	ldr	r2, [pc, #632]	; (10014218 <__aeabi_dsub+0x6a0>)
10013fa0:	4294      	cmp	r4, r2
10013fa2:	d000      	beq.n	10013fa6 <__aeabi_dsub+0x42e>
10013fa4:	e6c7      	b.n	10013d36 <__aeabi_dsub+0x1be>
10013fa6:	e613      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013fa8:	2200      	movs	r2, #0
10013faa:	e77f      	b.n	10013eac <__aeabi_dsub+0x334>
10013fac:	2000      	movs	r0, #0
10013fae:	e78f      	b.n	10013ed0 <__aeabi_dsub+0x358>
10013fb0:	2c00      	cmp	r4, #0
10013fb2:	d000      	beq.n	10013fb6 <__aeabi_dsub+0x43e>
10013fb4:	e0c8      	b.n	10014148 <__aeabi_dsub+0x5d0>
10013fb6:	003b      	movs	r3, r7
10013fb8:	432b      	orrs	r3, r5
10013fba:	d100      	bne.n	10013fbe <__aeabi_dsub+0x446>
10013fbc:	e10f      	b.n	100141de <__aeabi_dsub+0x666>
10013fbe:	0003      	movs	r3, r0
10013fc0:	430b      	orrs	r3, r1
10013fc2:	d100      	bne.n	10013fc6 <__aeabi_dsub+0x44e>
10013fc4:	e604      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013fc6:	1869      	adds	r1, r5, r1
10013fc8:	42a9      	cmp	r1, r5
10013fca:	419b      	sbcs	r3, r3
10013fcc:	183f      	adds	r7, r7, r0
10013fce:	425b      	negs	r3, r3
10013fd0:	19df      	adds	r7, r3, r7
10013fd2:	023b      	lsls	r3, r7, #8
10013fd4:	d400      	bmi.n	10013fd8 <__aeabi_dsub+0x460>
10013fd6:	e11a      	b.n	1001420e <__aeabi_dsub+0x696>
10013fd8:	4b90      	ldr	r3, [pc, #576]	; (1001421c <__aeabi_dsub+0x6a4>)
10013fda:	000d      	movs	r5, r1
10013fdc:	401f      	ands	r7, r3
10013fde:	4664      	mov	r4, ip
10013fe0:	e5f6      	b.n	10013bd0 <__aeabi_dsub+0x58>
10013fe2:	469a      	mov	sl, r3
10013fe4:	e689      	b.n	10013cfa <__aeabi_dsub+0x182>
10013fe6:	003a      	movs	r2, r7
10013fe8:	432a      	orrs	r2, r5
10013fea:	2c00      	cmp	r4, #0
10013fec:	d15c      	bne.n	100140a8 <__aeabi_dsub+0x530>
10013fee:	2a00      	cmp	r2, #0
10013ff0:	d175      	bne.n	100140de <__aeabi_dsub+0x566>
10013ff2:	0002      	movs	r2, r0
10013ff4:	430a      	orrs	r2, r1
10013ff6:	d100      	bne.n	10013ffa <__aeabi_dsub+0x482>
10013ff8:	e0ca      	b.n	10014190 <__aeabi_dsub+0x618>
10013ffa:	0007      	movs	r7, r0
10013ffc:	000d      	movs	r5, r1
10013ffe:	469a      	mov	sl, r3
10014000:	e5e6      	b.n	10013bd0 <__aeabi_dsub+0x58>
10014002:	4664      	mov	r4, ip
10014004:	2200      	movs	r2, #0
10014006:	2500      	movs	r5, #0
10014008:	e681      	b.n	10013d0e <__aeabi_dsub+0x196>
1001400a:	4662      	mov	r2, ip
1001400c:	0006      	movs	r6, r0
1001400e:	3a20      	subs	r2, #32
10014010:	40d6      	lsrs	r6, r2
10014012:	4662      	mov	r2, ip
10014014:	46b0      	mov	r8, r6
10014016:	2a20      	cmp	r2, #32
10014018:	d100      	bne.n	1001401c <__aeabi_dsub+0x4a4>
1001401a:	e0b7      	b.n	1001418c <__aeabi_dsub+0x614>
1001401c:	2240      	movs	r2, #64	; 0x40
1001401e:	4666      	mov	r6, ip
10014020:	1b92      	subs	r2, r2, r6
10014022:	4090      	lsls	r0, r2
10014024:	4301      	orrs	r1, r0
10014026:	4642      	mov	r2, r8
10014028:	1e48      	subs	r0, r1, #1
1001402a:	4181      	sbcs	r1, r0
1001402c:	4311      	orrs	r1, r2
1001402e:	2200      	movs	r2, #0
10014030:	e68a      	b.n	10013d48 <__aeabi_dsub+0x1d0>
10014032:	4c79      	ldr	r4, [pc, #484]	; (10014218 <__aeabi_dsub+0x6a0>)
10014034:	42a2      	cmp	r2, r4
10014036:	d000      	beq.n	1001403a <__aeabi_dsub+0x4c2>
10014038:	e761      	b.n	10013efe <__aeabi_dsub+0x386>
1001403a:	0007      	movs	r7, r0
1001403c:	000d      	movs	r5, r1
1001403e:	0014      	movs	r4, r2
10014040:	469a      	mov	sl, r3
10014042:	e5c5      	b.n	10013bd0 <__aeabi_dsub+0x58>
10014044:	2c00      	cmp	r4, #0
10014046:	d141      	bne.n	100140cc <__aeabi_dsub+0x554>
10014048:	003c      	movs	r4, r7
1001404a:	432c      	orrs	r4, r5
1001404c:	d078      	beq.n	10014140 <__aeabi_dsub+0x5c8>
1001404e:	43f4      	mvns	r4, r6
10014050:	46a1      	mov	r9, r4
10014052:	2c00      	cmp	r4, #0
10014054:	d020      	beq.n	10014098 <__aeabi_dsub+0x520>
10014056:	4c70      	ldr	r4, [pc, #448]	; (10014218 <__aeabi_dsub+0x6a0>)
10014058:	42a2      	cmp	r2, r4
1001405a:	d071      	beq.n	10014140 <__aeabi_dsub+0x5c8>
1001405c:	464c      	mov	r4, r9
1001405e:	2c38      	cmp	r4, #56	; 0x38
10014060:	dd00      	ble.n	10014064 <__aeabi_dsub+0x4ec>
10014062:	e0b2      	b.n	100141ca <__aeabi_dsub+0x652>
10014064:	2c1f      	cmp	r4, #31
10014066:	dd00      	ble.n	1001406a <__aeabi_dsub+0x4f2>
10014068:	e0bc      	b.n	100141e4 <__aeabi_dsub+0x66c>
1001406a:	2620      	movs	r6, #32
1001406c:	1b34      	subs	r4, r6, r4
1001406e:	46a2      	mov	sl, r4
10014070:	003c      	movs	r4, r7
10014072:	4656      	mov	r6, sl
10014074:	40b4      	lsls	r4, r6
10014076:	464e      	mov	r6, r9
10014078:	46a0      	mov	r8, r4
1001407a:	002c      	movs	r4, r5
1001407c:	40f4      	lsrs	r4, r6
1001407e:	46a4      	mov	ip, r4
10014080:	4644      	mov	r4, r8
10014082:	4666      	mov	r6, ip
10014084:	4334      	orrs	r4, r6
10014086:	46a4      	mov	ip, r4
10014088:	4654      	mov	r4, sl
1001408a:	40a5      	lsls	r5, r4
1001408c:	4664      	mov	r4, ip
1001408e:	1e6e      	subs	r6, r5, #1
10014090:	41b5      	sbcs	r5, r6
10014092:	4325      	orrs	r5, r4
10014094:	464c      	mov	r4, r9
10014096:	40e7      	lsrs	r7, r4
10014098:	186d      	adds	r5, r5, r1
1001409a:	428d      	cmp	r5, r1
1001409c:	4189      	sbcs	r1, r1
1001409e:	183f      	adds	r7, r7, r0
100140a0:	4249      	negs	r1, r1
100140a2:	19cf      	adds	r7, r1, r7
100140a4:	0014      	movs	r4, r2
100140a6:	e656      	b.n	10013d56 <__aeabi_dsub+0x1de>
100140a8:	2a00      	cmp	r2, #0
100140aa:	d12f      	bne.n	1001410c <__aeabi_dsub+0x594>
100140ac:	0002      	movs	r2, r0
100140ae:	430a      	orrs	r2, r1
100140b0:	d100      	bne.n	100140b4 <__aeabi_dsub+0x53c>
100140b2:	e084      	b.n	100141be <__aeabi_dsub+0x646>
100140b4:	0007      	movs	r7, r0
100140b6:	000d      	movs	r5, r1
100140b8:	469a      	mov	sl, r3
100140ba:	4c57      	ldr	r4, [pc, #348]	; (10014218 <__aeabi_dsub+0x6a0>)
100140bc:	e588      	b.n	10013bd0 <__aeabi_dsub+0x58>
100140be:	433d      	orrs	r5, r7
100140c0:	1e6f      	subs	r7, r5, #1
100140c2:	41bd      	sbcs	r5, r7
100140c4:	b2ec      	uxtb	r4, r5
100140c6:	2700      	movs	r7, #0
100140c8:	1b0d      	subs	r5, r1, r4
100140ca:	e760      	b.n	10013f8e <__aeabi_dsub+0x416>
100140cc:	4c52      	ldr	r4, [pc, #328]	; (10014218 <__aeabi_dsub+0x6a0>)
100140ce:	42a2      	cmp	r2, r4
100140d0:	d036      	beq.n	10014140 <__aeabi_dsub+0x5c8>
100140d2:	4274      	negs	r4, r6
100140d4:	2680      	movs	r6, #128	; 0x80
100140d6:	0436      	lsls	r6, r6, #16
100140d8:	46a1      	mov	r9, r4
100140da:	4337      	orrs	r7, r6
100140dc:	e7be      	b.n	1001405c <__aeabi_dsub+0x4e4>
100140de:	0002      	movs	r2, r0
100140e0:	430a      	orrs	r2, r1
100140e2:	d100      	bne.n	100140e6 <__aeabi_dsub+0x56e>
100140e4:	e574      	b.n	10013bd0 <__aeabi_dsub+0x58>
100140e6:	1a6a      	subs	r2, r5, r1
100140e8:	4690      	mov	r8, r2
100140ea:	4545      	cmp	r5, r8
100140ec:	41b6      	sbcs	r6, r6
100140ee:	1a3a      	subs	r2, r7, r0
100140f0:	4276      	negs	r6, r6
100140f2:	1b92      	subs	r2, r2, r6
100140f4:	4694      	mov	ip, r2
100140f6:	0212      	lsls	r2, r2, #8
100140f8:	d400      	bmi.n	100140fc <__aeabi_dsub+0x584>
100140fa:	e5f7      	b.n	10013cec <__aeabi_dsub+0x174>
100140fc:	1b4d      	subs	r5, r1, r5
100140fe:	42a9      	cmp	r1, r5
10014100:	4189      	sbcs	r1, r1
10014102:	1bc7      	subs	r7, r0, r7
10014104:	4249      	negs	r1, r1
10014106:	1a7f      	subs	r7, r7, r1
10014108:	469a      	mov	sl, r3
1001410a:	e561      	b.n	10013bd0 <__aeabi_dsub+0x58>
1001410c:	0002      	movs	r2, r0
1001410e:	430a      	orrs	r2, r1
10014110:	d03a      	beq.n	10014188 <__aeabi_dsub+0x610>
10014112:	08ed      	lsrs	r5, r5, #3
10014114:	077c      	lsls	r4, r7, #29
10014116:	432c      	orrs	r4, r5
10014118:	2580      	movs	r5, #128	; 0x80
1001411a:	08fa      	lsrs	r2, r7, #3
1001411c:	032d      	lsls	r5, r5, #12
1001411e:	422a      	tst	r2, r5
10014120:	d008      	beq.n	10014134 <__aeabi_dsub+0x5bc>
10014122:	08c7      	lsrs	r7, r0, #3
10014124:	422f      	tst	r7, r5
10014126:	d105      	bne.n	10014134 <__aeabi_dsub+0x5bc>
10014128:	0745      	lsls	r5, r0, #29
1001412a:	002c      	movs	r4, r5
1001412c:	003a      	movs	r2, r7
1001412e:	469a      	mov	sl, r3
10014130:	08c9      	lsrs	r1, r1, #3
10014132:	430c      	orrs	r4, r1
10014134:	0f67      	lsrs	r7, r4, #29
10014136:	00d2      	lsls	r2, r2, #3
10014138:	00e5      	lsls	r5, r4, #3
1001413a:	4317      	orrs	r7, r2
1001413c:	4c36      	ldr	r4, [pc, #216]	; (10014218 <__aeabi_dsub+0x6a0>)
1001413e:	e547      	b.n	10013bd0 <__aeabi_dsub+0x58>
10014140:	0007      	movs	r7, r0
10014142:	000d      	movs	r5, r1
10014144:	0014      	movs	r4, r2
10014146:	e543      	b.n	10013bd0 <__aeabi_dsub+0x58>
10014148:	003a      	movs	r2, r7
1001414a:	432a      	orrs	r2, r5
1001414c:	d043      	beq.n	100141d6 <__aeabi_dsub+0x65e>
1001414e:	0002      	movs	r2, r0
10014150:	430a      	orrs	r2, r1
10014152:	d019      	beq.n	10014188 <__aeabi_dsub+0x610>
10014154:	08ed      	lsrs	r5, r5, #3
10014156:	077c      	lsls	r4, r7, #29
10014158:	432c      	orrs	r4, r5
1001415a:	2580      	movs	r5, #128	; 0x80
1001415c:	08fa      	lsrs	r2, r7, #3
1001415e:	032d      	lsls	r5, r5, #12
10014160:	422a      	tst	r2, r5
10014162:	d007      	beq.n	10014174 <__aeabi_dsub+0x5fc>
10014164:	08c6      	lsrs	r6, r0, #3
10014166:	422e      	tst	r6, r5
10014168:	d104      	bne.n	10014174 <__aeabi_dsub+0x5fc>
1001416a:	0747      	lsls	r7, r0, #29
1001416c:	003c      	movs	r4, r7
1001416e:	0032      	movs	r2, r6
10014170:	08c9      	lsrs	r1, r1, #3
10014172:	430c      	orrs	r4, r1
10014174:	00d7      	lsls	r7, r2, #3
10014176:	0f62      	lsrs	r2, r4, #29
10014178:	00e5      	lsls	r5, r4, #3
1001417a:	4317      	orrs	r7, r2
1001417c:	469a      	mov	sl, r3
1001417e:	4c26      	ldr	r4, [pc, #152]	; (10014218 <__aeabi_dsub+0x6a0>)
10014180:	e526      	b.n	10013bd0 <__aeabi_dsub+0x58>
10014182:	2200      	movs	r2, #0
10014184:	2500      	movs	r5, #0
10014186:	e544      	b.n	10013c12 <__aeabi_dsub+0x9a>
10014188:	4c23      	ldr	r4, [pc, #140]	; (10014218 <__aeabi_dsub+0x6a0>)
1001418a:	e521      	b.n	10013bd0 <__aeabi_dsub+0x58>
1001418c:	2000      	movs	r0, #0
1001418e:	e749      	b.n	10014024 <__aeabi_dsub+0x4ac>
10014190:	2300      	movs	r3, #0
10014192:	2500      	movs	r5, #0
10014194:	e5bb      	b.n	10013d0e <__aeabi_dsub+0x196>
10014196:	464c      	mov	r4, r9
10014198:	003e      	movs	r6, r7
1001419a:	3c20      	subs	r4, #32
1001419c:	40e6      	lsrs	r6, r4
1001419e:	464c      	mov	r4, r9
100141a0:	46b4      	mov	ip, r6
100141a2:	2c20      	cmp	r4, #32
100141a4:	d031      	beq.n	1001420a <__aeabi_dsub+0x692>
100141a6:	2440      	movs	r4, #64	; 0x40
100141a8:	464e      	mov	r6, r9
100141aa:	1ba6      	subs	r6, r4, r6
100141ac:	40b7      	lsls	r7, r6
100141ae:	433d      	orrs	r5, r7
100141b0:	1e6c      	subs	r4, r5, #1
100141b2:	41a5      	sbcs	r5, r4
100141b4:	4664      	mov	r4, ip
100141b6:	432c      	orrs	r4, r5
100141b8:	2700      	movs	r7, #0
100141ba:	1b0d      	subs	r5, r1, r4
100141bc:	e6e7      	b.n	10013f8e <__aeabi_dsub+0x416>
100141be:	2280      	movs	r2, #128	; 0x80
100141c0:	2300      	movs	r3, #0
100141c2:	0312      	lsls	r2, r2, #12
100141c4:	4c14      	ldr	r4, [pc, #80]	; (10014218 <__aeabi_dsub+0x6a0>)
100141c6:	2500      	movs	r5, #0
100141c8:	e5a1      	b.n	10013d0e <__aeabi_dsub+0x196>
100141ca:	433d      	orrs	r5, r7
100141cc:	1e6f      	subs	r7, r5, #1
100141ce:	41bd      	sbcs	r5, r7
100141d0:	2700      	movs	r7, #0
100141d2:	b2ed      	uxtb	r5, r5
100141d4:	e760      	b.n	10014098 <__aeabi_dsub+0x520>
100141d6:	0007      	movs	r7, r0
100141d8:	000d      	movs	r5, r1
100141da:	4c0f      	ldr	r4, [pc, #60]	; (10014218 <__aeabi_dsub+0x6a0>)
100141dc:	e4f8      	b.n	10013bd0 <__aeabi_dsub+0x58>
100141de:	0007      	movs	r7, r0
100141e0:	000d      	movs	r5, r1
100141e2:	e4f5      	b.n	10013bd0 <__aeabi_dsub+0x58>
100141e4:	464e      	mov	r6, r9
100141e6:	003c      	movs	r4, r7
100141e8:	3e20      	subs	r6, #32
100141ea:	40f4      	lsrs	r4, r6
100141ec:	46a0      	mov	r8, r4
100141ee:	464c      	mov	r4, r9
100141f0:	2c20      	cmp	r4, #32
100141f2:	d00e      	beq.n	10014212 <__aeabi_dsub+0x69a>
100141f4:	2440      	movs	r4, #64	; 0x40
100141f6:	464e      	mov	r6, r9
100141f8:	1ba4      	subs	r4, r4, r6
100141fa:	40a7      	lsls	r7, r4
100141fc:	433d      	orrs	r5, r7
100141fe:	1e6f      	subs	r7, r5, #1
10014200:	41bd      	sbcs	r5, r7
10014202:	4644      	mov	r4, r8
10014204:	2700      	movs	r7, #0
10014206:	4325      	orrs	r5, r4
10014208:	e746      	b.n	10014098 <__aeabi_dsub+0x520>
1001420a:	2700      	movs	r7, #0
1001420c:	e7cf      	b.n	100141ae <__aeabi_dsub+0x636>
1001420e:	000d      	movs	r5, r1
10014210:	e573      	b.n	10013cfa <__aeabi_dsub+0x182>
10014212:	2700      	movs	r7, #0
10014214:	e7f2      	b.n	100141fc <__aeabi_dsub+0x684>
10014216:	46c0      	nop			; (mov r8, r8)
10014218:	000007ff 	.word	0x000007ff
1001421c:	ff7fffff 	.word	0xff7fffff

10014220 <__aeabi_d2iz>:
10014220:	030b      	lsls	r3, r1, #12
10014222:	b530      	push	{r4, r5, lr}
10014224:	4d13      	ldr	r5, [pc, #76]	; (10014274 <__aeabi_d2iz+0x54>)
10014226:	0b1a      	lsrs	r2, r3, #12
10014228:	004b      	lsls	r3, r1, #1
1001422a:	0d5b      	lsrs	r3, r3, #21
1001422c:	0fc9      	lsrs	r1, r1, #31
1001422e:	2400      	movs	r4, #0
10014230:	42ab      	cmp	r3, r5
10014232:	dd11      	ble.n	10014258 <__aeabi_d2iz+0x38>
10014234:	4c10      	ldr	r4, [pc, #64]	; (10014278 <__aeabi_d2iz+0x58>)
10014236:	42a3      	cmp	r3, r4
10014238:	dc10      	bgt.n	1001425c <__aeabi_d2iz+0x3c>
1001423a:	2480      	movs	r4, #128	; 0x80
1001423c:	0364      	lsls	r4, r4, #13
1001423e:	4322      	orrs	r2, r4
10014240:	4c0e      	ldr	r4, [pc, #56]	; (1001427c <__aeabi_d2iz+0x5c>)
10014242:	1ae4      	subs	r4, r4, r3
10014244:	2c1f      	cmp	r4, #31
10014246:	dd0c      	ble.n	10014262 <__aeabi_d2iz+0x42>
10014248:	480d      	ldr	r0, [pc, #52]	; (10014280 <__aeabi_d2iz+0x60>)
1001424a:	1ac3      	subs	r3, r0, r3
1001424c:	40da      	lsrs	r2, r3
1001424e:	0013      	movs	r3, r2
10014250:	425c      	negs	r4, r3
10014252:	2900      	cmp	r1, #0
10014254:	d100      	bne.n	10014258 <__aeabi_d2iz+0x38>
10014256:	001c      	movs	r4, r3
10014258:	0020      	movs	r0, r4
1001425a:	bd30      	pop	{r4, r5, pc}
1001425c:	4b09      	ldr	r3, [pc, #36]	; (10014284 <__aeabi_d2iz+0x64>)
1001425e:	18cc      	adds	r4, r1, r3
10014260:	e7fa      	b.n	10014258 <__aeabi_d2iz+0x38>
10014262:	40e0      	lsrs	r0, r4
10014264:	4c08      	ldr	r4, [pc, #32]	; (10014288 <__aeabi_d2iz+0x68>)
10014266:	46a4      	mov	ip, r4
10014268:	4463      	add	r3, ip
1001426a:	409a      	lsls	r2, r3
1001426c:	0013      	movs	r3, r2
1001426e:	4303      	orrs	r3, r0
10014270:	e7ee      	b.n	10014250 <__aeabi_d2iz+0x30>
10014272:	46c0      	nop			; (mov r8, r8)
10014274:	000003fe 	.word	0x000003fe
10014278:	0000041d 	.word	0x0000041d
1001427c:	00000433 	.word	0x00000433
10014280:	00000413 	.word	0x00000413
10014284:	7fffffff 	.word	0x7fffffff
10014288:	fffffbed 	.word	0xfffffbed

1001428c <__aeabi_ui2d>:
1001428c:	b570      	push	{r4, r5, r6, lr}
1001428e:	1e05      	subs	r5, r0, #0
10014290:	d028      	beq.n	100142e4 <__aeabi_ui2d+0x58>
10014292:	f000 f833 	bl	100142fc <__clzsi2>
10014296:	4b15      	ldr	r3, [pc, #84]	; (100142ec <__aeabi_ui2d+0x60>)
10014298:	4a15      	ldr	r2, [pc, #84]	; (100142f0 <__aeabi_ui2d+0x64>)
1001429a:	1a1b      	subs	r3, r3, r0
1001429c:	1ad2      	subs	r2, r2, r3
1001429e:	2a1f      	cmp	r2, #31
100142a0:	dd16      	ble.n	100142d0 <__aeabi_ui2d+0x44>
100142a2:	002c      	movs	r4, r5
100142a4:	4a13      	ldr	r2, [pc, #76]	; (100142f4 <__aeabi_ui2d+0x68>)
100142a6:	2500      	movs	r5, #0
100142a8:	1ad2      	subs	r2, r2, r3
100142aa:	4094      	lsls	r4, r2
100142ac:	055a      	lsls	r2, r3, #21
100142ae:	0324      	lsls	r4, r4, #12
100142b0:	0b24      	lsrs	r4, r4, #12
100142b2:	0d52      	lsrs	r2, r2, #21
100142b4:	2100      	movs	r1, #0
100142b6:	0324      	lsls	r4, r4, #12
100142b8:	0d0b      	lsrs	r3, r1, #20
100142ba:	0b24      	lsrs	r4, r4, #12
100142bc:	051b      	lsls	r3, r3, #20
100142be:	4323      	orrs	r3, r4
100142c0:	4c0d      	ldr	r4, [pc, #52]	; (100142f8 <__aeabi_ui2d+0x6c>)
100142c2:	0512      	lsls	r2, r2, #20
100142c4:	4023      	ands	r3, r4
100142c6:	4313      	orrs	r3, r2
100142c8:	005b      	lsls	r3, r3, #1
100142ca:	0028      	movs	r0, r5
100142cc:	0859      	lsrs	r1, r3, #1
100142ce:	bd70      	pop	{r4, r5, r6, pc}
100142d0:	210b      	movs	r1, #11
100142d2:	002c      	movs	r4, r5
100142d4:	1a08      	subs	r0, r1, r0
100142d6:	40c4      	lsrs	r4, r0
100142d8:	4095      	lsls	r5, r2
100142da:	0324      	lsls	r4, r4, #12
100142dc:	055a      	lsls	r2, r3, #21
100142de:	0b24      	lsrs	r4, r4, #12
100142e0:	0d52      	lsrs	r2, r2, #21
100142e2:	e7e7      	b.n	100142b4 <__aeabi_ui2d+0x28>
100142e4:	2200      	movs	r2, #0
100142e6:	2400      	movs	r4, #0
100142e8:	e7e4      	b.n	100142b4 <__aeabi_ui2d+0x28>
100142ea:	46c0      	nop			; (mov r8, r8)
100142ec:	0000041e 	.word	0x0000041e
100142f0:	00000433 	.word	0x00000433
100142f4:	00000413 	.word	0x00000413
100142f8:	800fffff 	.word	0x800fffff

100142fc <__clzsi2>:
100142fc:	211c      	movs	r1, #28
100142fe:	2301      	movs	r3, #1
10014300:	041b      	lsls	r3, r3, #16
10014302:	4298      	cmp	r0, r3
10014304:	d301      	bcc.n	1001430a <__clzsi2+0xe>
10014306:	0c00      	lsrs	r0, r0, #16
10014308:	3910      	subs	r1, #16
1001430a:	0a1b      	lsrs	r3, r3, #8
1001430c:	4298      	cmp	r0, r3
1001430e:	d301      	bcc.n	10014314 <__clzsi2+0x18>
10014310:	0a00      	lsrs	r0, r0, #8
10014312:	3908      	subs	r1, #8
10014314:	091b      	lsrs	r3, r3, #4
10014316:	4298      	cmp	r0, r3
10014318:	d301      	bcc.n	1001431e <__clzsi2+0x22>
1001431a:	0900      	lsrs	r0, r0, #4
1001431c:	3904      	subs	r1, #4
1001431e:	a202      	add	r2, pc, #8	; (adr r2, 10014328 <__clzsi2+0x2c>)
10014320:	5c10      	ldrb	r0, [r2, r0]
10014322:	1840      	adds	r0, r0, r1
10014324:	4770      	bx	lr
10014326:	46c0      	nop			; (mov r8, r8)
10014328:	02020304 	.word	0x02020304
1001432c:	01010101 	.word	0x01010101
	...

10014338 <__libc_init_array>:
10014338:	4b0e      	ldr	r3, [pc, #56]	; (10014374 <__libc_init_array+0x3c>)
1001433a:	b570      	push	{r4, r5, r6, lr}
1001433c:	2500      	movs	r5, #0
1001433e:	001e      	movs	r6, r3
10014340:	4c0d      	ldr	r4, [pc, #52]	; (10014378 <__libc_init_array+0x40>)
10014342:	1ae4      	subs	r4, r4, r3
10014344:	10a4      	asrs	r4, r4, #2
10014346:	42a5      	cmp	r5, r4
10014348:	d004      	beq.n	10014354 <__libc_init_array+0x1c>
1001434a:	00ab      	lsls	r3, r5, #2
1001434c:	58f3      	ldr	r3, [r6, r3]
1001434e:	4798      	blx	r3
10014350:	3501      	adds	r5, #1
10014352:	e7f8      	b.n	10014346 <__libc_init_array+0xe>
10014354:	f002 fc7c 	bl	10016c50 <_init>
10014358:	4b08      	ldr	r3, [pc, #32]	; (1001437c <__libc_init_array+0x44>)
1001435a:	2500      	movs	r5, #0
1001435c:	001e      	movs	r6, r3
1001435e:	4c08      	ldr	r4, [pc, #32]	; (10014380 <__libc_init_array+0x48>)
10014360:	1ae4      	subs	r4, r4, r3
10014362:	10a4      	asrs	r4, r4, #2
10014364:	42a5      	cmp	r5, r4
10014366:	d004      	beq.n	10014372 <__libc_init_array+0x3a>
10014368:	00ab      	lsls	r3, r5, #2
1001436a:	58f3      	ldr	r3, [r6, r3]
1001436c:	4798      	blx	r3
1001436e:	3501      	adds	r5, #1
10014370:	e7f8      	b.n	10014364 <__libc_init_array+0x2c>
10014372:	bd70      	pop	{r4, r5, r6, pc}
10014374:	10016c5c 	.word	0x10016c5c
10014378:	10016c5c 	.word	0x10016c5c
1001437c:	10016c5c 	.word	0x10016c5c
10014380:	10016c60 	.word	0x10016c60

10014384 <malloc>:
10014384:	b510      	push	{r4, lr}
10014386:	4b03      	ldr	r3, [pc, #12]	; (10014394 <malloc+0x10>)
10014388:	0001      	movs	r1, r0
1001438a:	6818      	ldr	r0, [r3, #0]
1001438c:	f000 f86a 	bl	10014464 <_malloc_r>
10014390:	bd10      	pop	{r4, pc}
10014392:	46c0      	nop			; (mov r8, r8)
10014394:	10016d18 	.word	0x10016d18

10014398 <memcmp>:
10014398:	b530      	push	{r4, r5, lr}
1001439a:	2400      	movs	r4, #0
1001439c:	42a2      	cmp	r2, r4
1001439e:	d008      	beq.n	100143b2 <memcmp+0x1a>
100143a0:	5d03      	ldrb	r3, [r0, r4]
100143a2:	1c65      	adds	r5, r4, #1
100143a4:	5d0c      	ldrb	r4, [r1, r4]
100143a6:	42a3      	cmp	r3, r4
100143a8:	d001      	beq.n	100143ae <memcmp+0x16>
100143aa:	1b18      	subs	r0, r3, r4
100143ac:	e002      	b.n	100143b4 <memcmp+0x1c>
100143ae:	002c      	movs	r4, r5
100143b0:	e7f4      	b.n	1001439c <memcmp+0x4>
100143b2:	2000      	movs	r0, #0
100143b4:	bd30      	pop	{r4, r5, pc}

100143b6 <memcpy>:
100143b6:	2300      	movs	r3, #0
100143b8:	b510      	push	{r4, lr}
100143ba:	429a      	cmp	r2, r3
100143bc:	d003      	beq.n	100143c6 <memcpy+0x10>
100143be:	5ccc      	ldrb	r4, [r1, r3]
100143c0:	54c4      	strb	r4, [r0, r3]
100143c2:	3301      	adds	r3, #1
100143c4:	e7f9      	b.n	100143ba <memcpy+0x4>
100143c6:	bd10      	pop	{r4, pc}

100143c8 <memset>:
100143c8:	0003      	movs	r3, r0
100143ca:	1882      	adds	r2, r0, r2
100143cc:	4293      	cmp	r3, r2
100143ce:	d002      	beq.n	100143d6 <memset+0xe>
100143d0:	7019      	strb	r1, [r3, #0]
100143d2:	3301      	adds	r3, #1
100143d4:	e7fa      	b.n	100143cc <memset+0x4>
100143d6:	4770      	bx	lr

100143d8 <_free_r>:
100143d8:	b530      	push	{r4, r5, lr}
100143da:	2900      	cmp	r1, #0
100143dc:	d03e      	beq.n	1001445c <_free_r+0x84>
100143de:	3904      	subs	r1, #4
100143e0:	680b      	ldr	r3, [r1, #0]
100143e2:	2b00      	cmp	r3, #0
100143e4:	da00      	bge.n	100143e8 <_free_r+0x10>
100143e6:	18c9      	adds	r1, r1, r3
100143e8:	4a1d      	ldr	r2, [pc, #116]	; (10014460 <_free_r+0x88>)
100143ea:	6813      	ldr	r3, [r2, #0]
100143ec:	0014      	movs	r4, r2
100143ee:	2b00      	cmp	r3, #0
100143f0:	d102      	bne.n	100143f8 <_free_r+0x20>
100143f2:	604b      	str	r3, [r1, #4]
100143f4:	6011      	str	r1, [r2, #0]
100143f6:	e031      	b.n	1001445c <_free_r+0x84>
100143f8:	428b      	cmp	r3, r1
100143fa:	d90d      	bls.n	10014418 <_free_r+0x40>
100143fc:	680a      	ldr	r2, [r1, #0]
100143fe:	1888      	adds	r0, r1, r2
10014400:	4283      	cmp	r3, r0
10014402:	d103      	bne.n	1001440c <_free_r+0x34>
10014404:	6818      	ldr	r0, [r3, #0]
10014406:	685b      	ldr	r3, [r3, #4]
10014408:	1882      	adds	r2, r0, r2
1001440a:	600a      	str	r2, [r1, #0]
1001440c:	604b      	str	r3, [r1, #4]
1001440e:	6021      	str	r1, [r4, #0]
10014410:	e024      	b.n	1001445c <_free_r+0x84>
10014412:	428a      	cmp	r2, r1
10014414:	d803      	bhi.n	1001441e <_free_r+0x46>
10014416:	0013      	movs	r3, r2
10014418:	685a      	ldr	r2, [r3, #4]
1001441a:	2a00      	cmp	r2, #0
1001441c:	d1f9      	bne.n	10014412 <_free_r+0x3a>
1001441e:	681d      	ldr	r5, [r3, #0]
10014420:	195c      	adds	r4, r3, r5
10014422:	428c      	cmp	r4, r1
10014424:	d10b      	bne.n	1001443e <_free_r+0x66>
10014426:	6809      	ldr	r1, [r1, #0]
10014428:	1869      	adds	r1, r5, r1
1001442a:	1858      	adds	r0, r3, r1
1001442c:	6019      	str	r1, [r3, #0]
1001442e:	4282      	cmp	r2, r0
10014430:	d114      	bne.n	1001445c <_free_r+0x84>
10014432:	6810      	ldr	r0, [r2, #0]
10014434:	6852      	ldr	r2, [r2, #4]
10014436:	1841      	adds	r1, r0, r1
10014438:	6019      	str	r1, [r3, #0]
1001443a:	605a      	str	r2, [r3, #4]
1001443c:	e00e      	b.n	1001445c <_free_r+0x84>
1001443e:	428c      	cmp	r4, r1
10014440:	d902      	bls.n	10014448 <_free_r+0x70>
10014442:	230c      	movs	r3, #12
10014444:	6003      	str	r3, [r0, #0]
10014446:	e009      	b.n	1001445c <_free_r+0x84>
10014448:	6808      	ldr	r0, [r1, #0]
1001444a:	180c      	adds	r4, r1, r0
1001444c:	42a2      	cmp	r2, r4
1001444e:	d103      	bne.n	10014458 <_free_r+0x80>
10014450:	6814      	ldr	r4, [r2, #0]
10014452:	6852      	ldr	r2, [r2, #4]
10014454:	1820      	adds	r0, r4, r0
10014456:	6008      	str	r0, [r1, #0]
10014458:	604a      	str	r2, [r1, #4]
1001445a:	6059      	str	r1, [r3, #4]
1001445c:	bd30      	pop	{r4, r5, pc}
1001445e:	46c0      	nop			; (mov r8, r8)
10014460:	100187ec 	.word	0x100187ec

10014464 <_malloc_r>:
10014464:	2303      	movs	r3, #3
10014466:	b570      	push	{r4, r5, r6, lr}
10014468:	1ccd      	adds	r5, r1, #3
1001446a:	439d      	bics	r5, r3
1001446c:	3508      	adds	r5, #8
1001446e:	0006      	movs	r6, r0
10014470:	2d0c      	cmp	r5, #12
10014472:	d201      	bcs.n	10014478 <_malloc_r+0x14>
10014474:	250c      	movs	r5, #12
10014476:	e005      	b.n	10014484 <_malloc_r+0x20>
10014478:	2d00      	cmp	r5, #0
1001447a:	da03      	bge.n	10014484 <_malloc_r+0x20>
1001447c:	230c      	movs	r3, #12
1001447e:	2000      	movs	r0, #0
10014480:	6033      	str	r3, [r6, #0]
10014482:	e040      	b.n	10014506 <_malloc_r+0xa2>
10014484:	42a9      	cmp	r1, r5
10014486:	d8f9      	bhi.n	1001447c <_malloc_r+0x18>
10014488:	4b1f      	ldr	r3, [pc, #124]	; (10014508 <_malloc_r+0xa4>)
1001448a:	681c      	ldr	r4, [r3, #0]
1001448c:	001a      	movs	r2, r3
1001448e:	0021      	movs	r1, r4
10014490:	2900      	cmp	r1, #0
10014492:	d013      	beq.n	100144bc <_malloc_r+0x58>
10014494:	680b      	ldr	r3, [r1, #0]
10014496:	1b5b      	subs	r3, r3, r5
10014498:	d40d      	bmi.n	100144b6 <_malloc_r+0x52>
1001449a:	2b0b      	cmp	r3, #11
1001449c:	d902      	bls.n	100144a4 <_malloc_r+0x40>
1001449e:	600b      	str	r3, [r1, #0]
100144a0:	18cc      	adds	r4, r1, r3
100144a2:	e01e      	b.n	100144e2 <_malloc_r+0x7e>
100144a4:	428c      	cmp	r4, r1
100144a6:	d102      	bne.n	100144ae <_malloc_r+0x4a>
100144a8:	6863      	ldr	r3, [r4, #4]
100144aa:	6013      	str	r3, [r2, #0]
100144ac:	e01a      	b.n	100144e4 <_malloc_r+0x80>
100144ae:	684b      	ldr	r3, [r1, #4]
100144b0:	6063      	str	r3, [r4, #4]
100144b2:	000c      	movs	r4, r1
100144b4:	e016      	b.n	100144e4 <_malloc_r+0x80>
100144b6:	000c      	movs	r4, r1
100144b8:	6849      	ldr	r1, [r1, #4]
100144ba:	e7e9      	b.n	10014490 <_malloc_r+0x2c>
100144bc:	4c13      	ldr	r4, [pc, #76]	; (1001450c <_malloc_r+0xa8>)
100144be:	6823      	ldr	r3, [r4, #0]
100144c0:	2b00      	cmp	r3, #0
100144c2:	d103      	bne.n	100144cc <_malloc_r+0x68>
100144c4:	0030      	movs	r0, r6
100144c6:	f000 f8f9 	bl	100146bc <_sbrk_r>
100144ca:	6020      	str	r0, [r4, #0]
100144cc:	0029      	movs	r1, r5
100144ce:	0030      	movs	r0, r6
100144d0:	f000 f8f4 	bl	100146bc <_sbrk_r>
100144d4:	1c43      	adds	r3, r0, #1
100144d6:	d0d1      	beq.n	1001447c <_malloc_r+0x18>
100144d8:	2303      	movs	r3, #3
100144da:	1cc4      	adds	r4, r0, #3
100144dc:	439c      	bics	r4, r3
100144de:	42a0      	cmp	r0, r4
100144e0:	d10a      	bne.n	100144f8 <_malloc_r+0x94>
100144e2:	6025      	str	r5, [r4, #0]
100144e4:	0020      	movs	r0, r4
100144e6:	2207      	movs	r2, #7
100144e8:	300b      	adds	r0, #11
100144ea:	1d23      	adds	r3, r4, #4
100144ec:	4390      	bics	r0, r2
100144ee:	1ac3      	subs	r3, r0, r3
100144f0:	d009      	beq.n	10014506 <_malloc_r+0xa2>
100144f2:	425a      	negs	r2, r3
100144f4:	50e2      	str	r2, [r4, r3]
100144f6:	e006      	b.n	10014506 <_malloc_r+0xa2>
100144f8:	1a21      	subs	r1, r4, r0
100144fa:	0030      	movs	r0, r6
100144fc:	f000 f8de 	bl	100146bc <_sbrk_r>
10014500:	1c43      	adds	r3, r0, #1
10014502:	d1ee      	bne.n	100144e2 <_malloc_r+0x7e>
10014504:	e7ba      	b.n	1001447c <_malloc_r+0x18>
10014506:	bd70      	pop	{r4, r5, r6, pc}
10014508:	100187ec 	.word	0x100187ec
1001450c:	100187e8 	.word	0x100187e8

10014510 <iprintf>:
10014510:	b40f      	push	{r0, r1, r2, r3}
10014512:	4b0b      	ldr	r3, [pc, #44]	; (10014540 <iprintf+0x30>)
10014514:	b513      	push	{r0, r1, r4, lr}
10014516:	681c      	ldr	r4, [r3, #0]
10014518:	2c00      	cmp	r4, #0
1001451a:	d005      	beq.n	10014528 <iprintf+0x18>
1001451c:	69a3      	ldr	r3, [r4, #24]
1001451e:	2b00      	cmp	r3, #0
10014520:	d102      	bne.n	10014528 <iprintf+0x18>
10014522:	0020      	movs	r0, r4
10014524:	f000 fb58 	bl	10014bd8 <__sinit>
10014528:	ab05      	add	r3, sp, #20
1001452a:	9a04      	ldr	r2, [sp, #16]
1001452c:	68a1      	ldr	r1, [r4, #8]
1001452e:	0020      	movs	r0, r4
10014530:	9301      	str	r3, [sp, #4]
10014532:	f000 fc71 	bl	10014e18 <_vfiprintf_r>
10014536:	bc16      	pop	{r1, r2, r4}
10014538:	bc08      	pop	{r3}
1001453a:	b004      	add	sp, #16
1001453c:	4718      	bx	r3
1001453e:	46c0      	nop			; (mov r8, r8)
10014540:	10016d18 	.word	0x10016d18

10014544 <putchar>:
10014544:	4b08      	ldr	r3, [pc, #32]	; (10014568 <putchar+0x24>)
10014546:	b570      	push	{r4, r5, r6, lr}
10014548:	681c      	ldr	r4, [r3, #0]
1001454a:	0005      	movs	r5, r0
1001454c:	2c00      	cmp	r4, #0
1001454e:	d005      	beq.n	1001455c <putchar+0x18>
10014550:	69a3      	ldr	r3, [r4, #24]
10014552:	2b00      	cmp	r3, #0
10014554:	d102      	bne.n	1001455c <putchar+0x18>
10014556:	0020      	movs	r0, r4
10014558:	f000 fb3e 	bl	10014bd8 <__sinit>
1001455c:	0029      	movs	r1, r5
1001455e:	68a2      	ldr	r2, [r4, #8]
10014560:	0020      	movs	r0, r4
10014562:	f000 ff05 	bl	10015370 <_putc_r>
10014566:	bd70      	pop	{r4, r5, r6, pc}
10014568:	10016d18 	.word	0x10016d18

1001456c <_puts_r>:
1001456c:	b570      	push	{r4, r5, r6, lr}
1001456e:	0005      	movs	r5, r0
10014570:	000e      	movs	r6, r1
10014572:	2800      	cmp	r0, #0
10014574:	d004      	beq.n	10014580 <_puts_r+0x14>
10014576:	6983      	ldr	r3, [r0, #24]
10014578:	2b00      	cmp	r3, #0
1001457a:	d101      	bne.n	10014580 <_puts_r+0x14>
1001457c:	f000 fb2c 	bl	10014bd8 <__sinit>
10014580:	69ab      	ldr	r3, [r5, #24]
10014582:	68ac      	ldr	r4, [r5, #8]
10014584:	2b00      	cmp	r3, #0
10014586:	d102      	bne.n	1001458e <_puts_r+0x22>
10014588:	0028      	movs	r0, r5
1001458a:	f000 fb25 	bl	10014bd8 <__sinit>
1001458e:	4b25      	ldr	r3, [pc, #148]	; (10014624 <_puts_r+0xb8>)
10014590:	429c      	cmp	r4, r3
10014592:	d101      	bne.n	10014598 <_puts_r+0x2c>
10014594:	686c      	ldr	r4, [r5, #4]
10014596:	e008      	b.n	100145aa <_puts_r+0x3e>
10014598:	4b23      	ldr	r3, [pc, #140]	; (10014628 <_puts_r+0xbc>)
1001459a:	429c      	cmp	r4, r3
1001459c:	d101      	bne.n	100145a2 <_puts_r+0x36>
1001459e:	68ac      	ldr	r4, [r5, #8]
100145a0:	e003      	b.n	100145aa <_puts_r+0x3e>
100145a2:	4b22      	ldr	r3, [pc, #136]	; (1001462c <_puts_r+0xc0>)
100145a4:	429c      	cmp	r4, r3
100145a6:	d100      	bne.n	100145aa <_puts_r+0x3e>
100145a8:	68ec      	ldr	r4, [r5, #12]
100145aa:	89a3      	ldrh	r3, [r4, #12]
100145ac:	071b      	lsls	r3, r3, #28
100145ae:	d502      	bpl.n	100145b6 <_puts_r+0x4a>
100145b0:	6923      	ldr	r3, [r4, #16]
100145b2:	2b00      	cmp	r3, #0
100145b4:	d111      	bne.n	100145da <_puts_r+0x6e>
100145b6:	0021      	movs	r1, r4
100145b8:	0028      	movs	r0, r5
100145ba:	f000 f9a3 	bl	10014904 <__swsetup_r>
100145be:	2800      	cmp	r0, #0
100145c0:	d00b      	beq.n	100145da <_puts_r+0x6e>
100145c2:	2001      	movs	r0, #1
100145c4:	4240      	negs	r0, r0
100145c6:	e02b      	b.n	10014620 <_puts_r+0xb4>
100145c8:	3b01      	subs	r3, #1
100145ca:	3601      	adds	r6, #1
100145cc:	60a3      	str	r3, [r4, #8]
100145ce:	2b00      	cmp	r3, #0
100145d0:	db08      	blt.n	100145e4 <_puts_r+0x78>
100145d2:	6823      	ldr	r3, [r4, #0]
100145d4:	1c5a      	adds	r2, r3, #1
100145d6:	6022      	str	r2, [r4, #0]
100145d8:	7019      	strb	r1, [r3, #0]
100145da:	7831      	ldrb	r1, [r6, #0]
100145dc:	68a3      	ldr	r3, [r4, #8]
100145de:	2900      	cmp	r1, #0
100145e0:	d1f2      	bne.n	100145c8 <_puts_r+0x5c>
100145e2:	e00b      	b.n	100145fc <_puts_r+0x90>
100145e4:	69a2      	ldr	r2, [r4, #24]
100145e6:	4293      	cmp	r3, r2
100145e8:	db01      	blt.n	100145ee <_puts_r+0x82>
100145ea:	290a      	cmp	r1, #10
100145ec:	d1f1      	bne.n	100145d2 <_puts_r+0x66>
100145ee:	0022      	movs	r2, r4
100145f0:	0028      	movs	r0, r5
100145f2:	f000 f92f 	bl	10014854 <__swbuf_r>
100145f6:	1c43      	adds	r3, r0, #1
100145f8:	d1ef      	bne.n	100145da <_puts_r+0x6e>
100145fa:	e7e2      	b.n	100145c2 <_puts_r+0x56>
100145fc:	3b01      	subs	r3, #1
100145fe:	60a3      	str	r3, [r4, #8]
10014600:	2b00      	cmp	r3, #0
10014602:	da08      	bge.n	10014616 <_puts_r+0xaa>
10014604:	0022      	movs	r2, r4
10014606:	310a      	adds	r1, #10
10014608:	0028      	movs	r0, r5
1001460a:	f000 f923 	bl	10014854 <__swbuf_r>
1001460e:	1c43      	adds	r3, r0, #1
10014610:	d0d7      	beq.n	100145c2 <_puts_r+0x56>
10014612:	200a      	movs	r0, #10
10014614:	e004      	b.n	10014620 <_puts_r+0xb4>
10014616:	200a      	movs	r0, #10
10014618:	6823      	ldr	r3, [r4, #0]
1001461a:	1c5a      	adds	r2, r3, #1
1001461c:	6022      	str	r2, [r4, #0]
1001461e:	7018      	strb	r0, [r3, #0]
10014620:	bd70      	pop	{r4, r5, r6, pc}
10014622:	46c0      	nop			; (mov r8, r8)
10014624:	10016bbc 	.word	0x10016bbc
10014628:	10016bdc 	.word	0x10016bdc
1001462c:	10016bfc 	.word	0x10016bfc

10014630 <puts>:
10014630:	b510      	push	{r4, lr}
10014632:	4b03      	ldr	r3, [pc, #12]	; (10014640 <puts+0x10>)
10014634:	0001      	movs	r1, r0
10014636:	6818      	ldr	r0, [r3, #0]
10014638:	f7ff ff98 	bl	1001456c <_puts_r>
1001463c:	bd10      	pop	{r4, pc}
1001463e:	46c0      	nop			; (mov r8, r8)
10014640:	10016d18 	.word	0x10016d18

10014644 <rand>:
10014644:	4b15      	ldr	r3, [pc, #84]	; (1001469c <rand+0x58>)
10014646:	b510      	push	{r4, lr}
10014648:	681c      	ldr	r4, [r3, #0]
1001464a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1001464c:	2b00      	cmp	r3, #0
1001464e:	d115      	bne.n	1001467c <rand+0x38>
10014650:	2018      	movs	r0, #24
10014652:	f7ff fe97 	bl	10014384 <malloc>
10014656:	4b12      	ldr	r3, [pc, #72]	; (100146a0 <rand+0x5c>)
10014658:	63a0      	str	r0, [r4, #56]	; 0x38
1001465a:	8003      	strh	r3, [r0, #0]
1001465c:	4b11      	ldr	r3, [pc, #68]	; (100146a4 <rand+0x60>)
1001465e:	2201      	movs	r2, #1
10014660:	8043      	strh	r3, [r0, #2]
10014662:	4b11      	ldr	r3, [pc, #68]	; (100146a8 <rand+0x64>)
10014664:	8083      	strh	r3, [r0, #4]
10014666:	4b11      	ldr	r3, [pc, #68]	; (100146ac <rand+0x68>)
10014668:	80c3      	strh	r3, [r0, #6]
1001466a:	4b11      	ldr	r3, [pc, #68]	; (100146b0 <rand+0x6c>)
1001466c:	8103      	strh	r3, [r0, #8]
1001466e:	2305      	movs	r3, #5
10014670:	8143      	strh	r3, [r0, #10]
10014672:	3306      	adds	r3, #6
10014674:	8183      	strh	r3, [r0, #12]
10014676:	2300      	movs	r3, #0
10014678:	6102      	str	r2, [r0, #16]
1001467a:	6143      	str	r3, [r0, #20]
1001467c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001467e:	4a0d      	ldr	r2, [pc, #52]	; (100146b4 <rand+0x70>)
10014680:	6920      	ldr	r0, [r4, #16]
10014682:	6961      	ldr	r1, [r4, #20]
10014684:	4b0c      	ldr	r3, [pc, #48]	; (100146b8 <rand+0x74>)
10014686:	f7fe f9c9 	bl	10012a1c <__aeabi_lmul>
1001468a:	2201      	movs	r2, #1
1001468c:	2300      	movs	r3, #0
1001468e:	1880      	adds	r0, r0, r2
10014690:	4159      	adcs	r1, r3
10014692:	6120      	str	r0, [r4, #16]
10014694:	6161      	str	r1, [r4, #20]
10014696:	0048      	lsls	r0, r1, #1
10014698:	0840      	lsrs	r0, r0, #1
1001469a:	bd10      	pop	{r4, pc}
1001469c:	10016d18 	.word	0x10016d18
100146a0:	0000330e 	.word	0x0000330e
100146a4:	ffffabcd 	.word	0xffffabcd
100146a8:	00001234 	.word	0x00001234
100146ac:	ffffe66d 	.word	0xffffe66d
100146b0:	ffffdeec 	.word	0xffffdeec
100146b4:	4c957f2d 	.word	0x4c957f2d
100146b8:	5851f42d 	.word	0x5851f42d

100146bc <_sbrk_r>:
100146bc:	2300      	movs	r3, #0
100146be:	b570      	push	{r4, r5, r6, lr}
100146c0:	4c06      	ldr	r4, [pc, #24]	; (100146dc <_sbrk_r+0x20>)
100146c2:	0005      	movs	r5, r0
100146c4:	0008      	movs	r0, r1
100146c6:	6023      	str	r3, [r4, #0]
100146c8:	f7f3 fedc 	bl	10008484 <_sbrk>
100146cc:	1c43      	adds	r3, r0, #1
100146ce:	d103      	bne.n	100146d8 <_sbrk_r+0x1c>
100146d0:	6823      	ldr	r3, [r4, #0]
100146d2:	2b00      	cmp	r3, #0
100146d4:	d000      	beq.n	100146d8 <_sbrk_r+0x1c>
100146d6:	602b      	str	r3, [r5, #0]
100146d8:	bd70      	pop	{r4, r5, r6, pc}
100146da:	46c0      	nop			; (mov r8, r8)
100146dc:	10019bc0 	.word	0x10019bc0

100146e0 <setbuf>:
100146e0:	424a      	negs	r2, r1
100146e2:	414a      	adcs	r2, r1
100146e4:	2380      	movs	r3, #128	; 0x80
100146e6:	b510      	push	{r4, lr}
100146e8:	0052      	lsls	r2, r2, #1
100146ea:	00db      	lsls	r3, r3, #3
100146ec:	f000 f802 	bl	100146f4 <setvbuf>
100146f0:	bd10      	pop	{r4, pc}
	...

100146f4 <setvbuf>:
100146f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100146f6:	001d      	movs	r5, r3
100146f8:	4b51      	ldr	r3, [pc, #324]	; (10014840 <setvbuf+0x14c>)
100146fa:	b085      	sub	sp, #20
100146fc:	681e      	ldr	r6, [r3, #0]
100146fe:	0004      	movs	r4, r0
10014700:	000f      	movs	r7, r1
10014702:	9200      	str	r2, [sp, #0]
10014704:	2e00      	cmp	r6, #0
10014706:	d005      	beq.n	10014714 <setvbuf+0x20>
10014708:	69b3      	ldr	r3, [r6, #24]
1001470a:	2b00      	cmp	r3, #0
1001470c:	d102      	bne.n	10014714 <setvbuf+0x20>
1001470e:	0030      	movs	r0, r6
10014710:	f000 fa62 	bl	10014bd8 <__sinit>
10014714:	4b4b      	ldr	r3, [pc, #300]	; (10014844 <setvbuf+0x150>)
10014716:	429c      	cmp	r4, r3
10014718:	d101      	bne.n	1001471e <setvbuf+0x2a>
1001471a:	6874      	ldr	r4, [r6, #4]
1001471c:	e008      	b.n	10014730 <setvbuf+0x3c>
1001471e:	4b4a      	ldr	r3, [pc, #296]	; (10014848 <setvbuf+0x154>)
10014720:	429c      	cmp	r4, r3
10014722:	d101      	bne.n	10014728 <setvbuf+0x34>
10014724:	68b4      	ldr	r4, [r6, #8]
10014726:	e003      	b.n	10014730 <setvbuf+0x3c>
10014728:	4b48      	ldr	r3, [pc, #288]	; (1001484c <setvbuf+0x158>)
1001472a:	429c      	cmp	r4, r3
1001472c:	d100      	bne.n	10014730 <setvbuf+0x3c>
1001472e:	68f4      	ldr	r4, [r6, #12]
10014730:	9b00      	ldr	r3, [sp, #0]
10014732:	2b02      	cmp	r3, #2
10014734:	d005      	beq.n	10014742 <setvbuf+0x4e>
10014736:	2b01      	cmp	r3, #1
10014738:	d900      	bls.n	1001473c <setvbuf+0x48>
1001473a:	e07c      	b.n	10014836 <setvbuf+0x142>
1001473c:	2d00      	cmp	r5, #0
1001473e:	da00      	bge.n	10014742 <setvbuf+0x4e>
10014740:	e079      	b.n	10014836 <setvbuf+0x142>
10014742:	0021      	movs	r1, r4
10014744:	0030      	movs	r0, r6
10014746:	f000 f9d9 	bl	10014afc <_fflush_r>
1001474a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001474c:	2900      	cmp	r1, #0
1001474e:	d008      	beq.n	10014762 <setvbuf+0x6e>
10014750:	0023      	movs	r3, r4
10014752:	3344      	adds	r3, #68	; 0x44
10014754:	4299      	cmp	r1, r3
10014756:	d002      	beq.n	1001475e <setvbuf+0x6a>
10014758:	0030      	movs	r0, r6
1001475a:	f7ff fe3d 	bl	100143d8 <_free_r>
1001475e:	2300      	movs	r3, #0
10014760:	6363      	str	r3, [r4, #52]	; 0x34
10014762:	2300      	movs	r3, #0
10014764:	61a3      	str	r3, [r4, #24]
10014766:	6063      	str	r3, [r4, #4]
10014768:	89a3      	ldrh	r3, [r4, #12]
1001476a:	061b      	lsls	r3, r3, #24
1001476c:	d503      	bpl.n	10014776 <setvbuf+0x82>
1001476e:	6921      	ldr	r1, [r4, #16]
10014770:	0030      	movs	r0, r6
10014772:	f7ff fe31 	bl	100143d8 <_free_r>
10014776:	89a2      	ldrh	r2, [r4, #12]
10014778:	4b35      	ldr	r3, [pc, #212]	; (10014850 <setvbuf+0x15c>)
1001477a:	4013      	ands	r3, r2
1001477c:	81a3      	strh	r3, [r4, #12]
1001477e:	9b00      	ldr	r3, [sp, #0]
10014780:	2b02      	cmp	r3, #2
10014782:	d021      	beq.n	100147c8 <setvbuf+0xd4>
10014784:	ab03      	add	r3, sp, #12
10014786:	aa02      	add	r2, sp, #8
10014788:	0021      	movs	r1, r4
1001478a:	0030      	movs	r0, r6
1001478c:	f000 fab8 	bl	10014d00 <__swhatbuf_r>
10014790:	89a3      	ldrh	r3, [r4, #12]
10014792:	4318      	orrs	r0, r3
10014794:	81a0      	strh	r0, [r4, #12]
10014796:	2d00      	cmp	r5, #0
10014798:	d101      	bne.n	1001479e <setvbuf+0xaa>
1001479a:	9d02      	ldr	r5, [sp, #8]
1001479c:	e001      	b.n	100147a2 <setvbuf+0xae>
1001479e:	2f00      	cmp	r7, #0
100147a0:	d125      	bne.n	100147ee <setvbuf+0xfa>
100147a2:	0028      	movs	r0, r5
100147a4:	f7ff fdee 	bl	10014384 <malloc>
100147a8:	9501      	str	r5, [sp, #4]
100147aa:	1e07      	subs	r7, r0, #0
100147ac:	d11a      	bne.n	100147e4 <setvbuf+0xf0>
100147ae:	9b02      	ldr	r3, [sp, #8]
100147b0:	9301      	str	r3, [sp, #4]
100147b2:	42ab      	cmp	r3, r5
100147b4:	d102      	bne.n	100147bc <setvbuf+0xc8>
100147b6:	2001      	movs	r0, #1
100147b8:	4240      	negs	r0, r0
100147ba:	e006      	b.n	100147ca <setvbuf+0xd6>
100147bc:	9801      	ldr	r0, [sp, #4]
100147be:	f7ff fde1 	bl	10014384 <malloc>
100147c2:	1e07      	subs	r7, r0, #0
100147c4:	d10e      	bne.n	100147e4 <setvbuf+0xf0>
100147c6:	e7f6      	b.n	100147b6 <setvbuf+0xc2>
100147c8:	2000      	movs	r0, #0
100147ca:	2202      	movs	r2, #2
100147cc:	89a3      	ldrh	r3, [r4, #12]
100147ce:	4313      	orrs	r3, r2
100147d0:	81a3      	strh	r3, [r4, #12]
100147d2:	2300      	movs	r3, #0
100147d4:	60a3      	str	r3, [r4, #8]
100147d6:	0023      	movs	r3, r4
100147d8:	3347      	adds	r3, #71	; 0x47
100147da:	6023      	str	r3, [r4, #0]
100147dc:	6123      	str	r3, [r4, #16]
100147de:	2301      	movs	r3, #1
100147e0:	6163      	str	r3, [r4, #20]
100147e2:	e02a      	b.n	1001483a <setvbuf+0x146>
100147e4:	2280      	movs	r2, #128	; 0x80
100147e6:	89a3      	ldrh	r3, [r4, #12]
100147e8:	9d01      	ldr	r5, [sp, #4]
100147ea:	4313      	orrs	r3, r2
100147ec:	81a3      	strh	r3, [r4, #12]
100147ee:	69b3      	ldr	r3, [r6, #24]
100147f0:	2b00      	cmp	r3, #0
100147f2:	d102      	bne.n	100147fa <setvbuf+0x106>
100147f4:	0030      	movs	r0, r6
100147f6:	f000 f9ef 	bl	10014bd8 <__sinit>
100147fa:	9b00      	ldr	r3, [sp, #0]
100147fc:	2b01      	cmp	r3, #1
100147fe:	d103      	bne.n	10014808 <setvbuf+0x114>
10014800:	89a3      	ldrh	r3, [r4, #12]
10014802:	9a00      	ldr	r2, [sp, #0]
10014804:	431a      	orrs	r2, r3
10014806:	81a2      	strh	r2, [r4, #12]
10014808:	2308      	movs	r3, #8
1001480a:	89a2      	ldrh	r2, [r4, #12]
1001480c:	6027      	str	r7, [r4, #0]
1001480e:	4013      	ands	r3, r2
10014810:	6127      	str	r7, [r4, #16]
10014812:	6165      	str	r5, [r4, #20]
10014814:	1e18      	subs	r0, r3, #0
10014816:	d00c      	beq.n	10014832 <setvbuf+0x13e>
10014818:	2301      	movs	r3, #1
1001481a:	401a      	ands	r2, r3
1001481c:	2300      	movs	r3, #0
1001481e:	1e10      	subs	r0, r2, #0
10014820:	4298      	cmp	r0, r3
10014822:	d004      	beq.n	1001482e <setvbuf+0x13a>
10014824:	426d      	negs	r5, r5
10014826:	60a3      	str	r3, [r4, #8]
10014828:	61a5      	str	r5, [r4, #24]
1001482a:	0018      	movs	r0, r3
1001482c:	e005      	b.n	1001483a <setvbuf+0x146>
1001482e:	60a5      	str	r5, [r4, #8]
10014830:	e003      	b.n	1001483a <setvbuf+0x146>
10014832:	60a3      	str	r3, [r4, #8]
10014834:	e001      	b.n	1001483a <setvbuf+0x146>
10014836:	2001      	movs	r0, #1
10014838:	4240      	negs	r0, r0
1001483a:	b005      	add	sp, #20
1001483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001483e:	46c0      	nop			; (mov r8, r8)
10014840:	10016d18 	.word	0x10016d18
10014844:	10016bbc 	.word	0x10016bbc
10014848:	10016bdc 	.word	0x10016bdc
1001484c:	10016bfc 	.word	0x10016bfc
10014850:	fffff35c 	.word	0xfffff35c

10014854 <__swbuf_r>:
10014854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014856:	0005      	movs	r5, r0
10014858:	000f      	movs	r7, r1
1001485a:	0014      	movs	r4, r2
1001485c:	2800      	cmp	r0, #0
1001485e:	d004      	beq.n	1001486a <__swbuf_r+0x16>
10014860:	6983      	ldr	r3, [r0, #24]
10014862:	2b00      	cmp	r3, #0
10014864:	d101      	bne.n	1001486a <__swbuf_r+0x16>
10014866:	f000 f9b7 	bl	10014bd8 <__sinit>
1001486a:	4b23      	ldr	r3, [pc, #140]	; (100148f8 <__swbuf_r+0xa4>)
1001486c:	429c      	cmp	r4, r3
1001486e:	d101      	bne.n	10014874 <__swbuf_r+0x20>
10014870:	686c      	ldr	r4, [r5, #4]
10014872:	e008      	b.n	10014886 <__swbuf_r+0x32>
10014874:	4b21      	ldr	r3, [pc, #132]	; (100148fc <__swbuf_r+0xa8>)
10014876:	429c      	cmp	r4, r3
10014878:	d101      	bne.n	1001487e <__swbuf_r+0x2a>
1001487a:	68ac      	ldr	r4, [r5, #8]
1001487c:	e003      	b.n	10014886 <__swbuf_r+0x32>
1001487e:	4b20      	ldr	r3, [pc, #128]	; (10014900 <__swbuf_r+0xac>)
10014880:	429c      	cmp	r4, r3
10014882:	d100      	bne.n	10014886 <__swbuf_r+0x32>
10014884:	68ec      	ldr	r4, [r5, #12]
10014886:	69a3      	ldr	r3, [r4, #24]
10014888:	60a3      	str	r3, [r4, #8]
1001488a:	89a3      	ldrh	r3, [r4, #12]
1001488c:	071b      	lsls	r3, r3, #28
1001488e:	d50a      	bpl.n	100148a6 <__swbuf_r+0x52>
10014890:	6923      	ldr	r3, [r4, #16]
10014892:	2b00      	cmp	r3, #0
10014894:	d007      	beq.n	100148a6 <__swbuf_r+0x52>
10014896:	6823      	ldr	r3, [r4, #0]
10014898:	6922      	ldr	r2, [r4, #16]
1001489a:	b2fe      	uxtb	r6, r7
1001489c:	1a98      	subs	r0, r3, r2
1001489e:	6963      	ldr	r3, [r4, #20]
100148a0:	4298      	cmp	r0, r3
100148a2:	db0f      	blt.n	100148c4 <__swbuf_r+0x70>
100148a4:	e008      	b.n	100148b8 <__swbuf_r+0x64>
100148a6:	0021      	movs	r1, r4
100148a8:	0028      	movs	r0, r5
100148aa:	f000 f82b 	bl	10014904 <__swsetup_r>
100148ae:	2800      	cmp	r0, #0
100148b0:	d0f1      	beq.n	10014896 <__swbuf_r+0x42>
100148b2:	2001      	movs	r0, #1
100148b4:	4240      	negs	r0, r0
100148b6:	e01d      	b.n	100148f4 <__swbuf_r+0xa0>
100148b8:	0021      	movs	r1, r4
100148ba:	0028      	movs	r0, r5
100148bc:	f000 f91e 	bl	10014afc <_fflush_r>
100148c0:	2800      	cmp	r0, #0
100148c2:	d1f6      	bne.n	100148b2 <__swbuf_r+0x5e>
100148c4:	68a3      	ldr	r3, [r4, #8]
100148c6:	3001      	adds	r0, #1
100148c8:	3b01      	subs	r3, #1
100148ca:	60a3      	str	r3, [r4, #8]
100148cc:	6823      	ldr	r3, [r4, #0]
100148ce:	1c5a      	adds	r2, r3, #1
100148d0:	6022      	str	r2, [r4, #0]
100148d2:	701f      	strb	r7, [r3, #0]
100148d4:	6963      	ldr	r3, [r4, #20]
100148d6:	4298      	cmp	r0, r3
100148d8:	d005      	beq.n	100148e6 <__swbuf_r+0x92>
100148da:	89a3      	ldrh	r3, [r4, #12]
100148dc:	0030      	movs	r0, r6
100148de:	07db      	lsls	r3, r3, #31
100148e0:	d508      	bpl.n	100148f4 <__swbuf_r+0xa0>
100148e2:	2e0a      	cmp	r6, #10
100148e4:	d106      	bne.n	100148f4 <__swbuf_r+0xa0>
100148e6:	0021      	movs	r1, r4
100148e8:	0028      	movs	r0, r5
100148ea:	f000 f907 	bl	10014afc <_fflush_r>
100148ee:	2800      	cmp	r0, #0
100148f0:	d1df      	bne.n	100148b2 <__swbuf_r+0x5e>
100148f2:	0030      	movs	r0, r6
100148f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100148f6:	46c0      	nop			; (mov r8, r8)
100148f8:	10016bbc 	.word	0x10016bbc
100148fc:	10016bdc 	.word	0x10016bdc
10014900:	10016bfc 	.word	0x10016bfc

10014904 <__swsetup_r>:
10014904:	4b36      	ldr	r3, [pc, #216]	; (100149e0 <__swsetup_r+0xdc>)
10014906:	b570      	push	{r4, r5, r6, lr}
10014908:	681d      	ldr	r5, [r3, #0]
1001490a:	0006      	movs	r6, r0
1001490c:	000c      	movs	r4, r1
1001490e:	2d00      	cmp	r5, #0
10014910:	d005      	beq.n	1001491e <__swsetup_r+0x1a>
10014912:	69ab      	ldr	r3, [r5, #24]
10014914:	2b00      	cmp	r3, #0
10014916:	d102      	bne.n	1001491e <__swsetup_r+0x1a>
10014918:	0028      	movs	r0, r5
1001491a:	f000 f95d 	bl	10014bd8 <__sinit>
1001491e:	4b31      	ldr	r3, [pc, #196]	; (100149e4 <__swsetup_r+0xe0>)
10014920:	429c      	cmp	r4, r3
10014922:	d101      	bne.n	10014928 <__swsetup_r+0x24>
10014924:	686c      	ldr	r4, [r5, #4]
10014926:	e008      	b.n	1001493a <__swsetup_r+0x36>
10014928:	4b2f      	ldr	r3, [pc, #188]	; (100149e8 <__swsetup_r+0xe4>)
1001492a:	429c      	cmp	r4, r3
1001492c:	d101      	bne.n	10014932 <__swsetup_r+0x2e>
1001492e:	68ac      	ldr	r4, [r5, #8]
10014930:	e003      	b.n	1001493a <__swsetup_r+0x36>
10014932:	4b2e      	ldr	r3, [pc, #184]	; (100149ec <__swsetup_r+0xe8>)
10014934:	429c      	cmp	r4, r3
10014936:	d100      	bne.n	1001493a <__swsetup_r+0x36>
10014938:	68ec      	ldr	r4, [r5, #12]
1001493a:	220c      	movs	r2, #12
1001493c:	5ea3      	ldrsh	r3, [r4, r2]
1001493e:	b29a      	uxth	r2, r3
10014940:	0711      	lsls	r1, r2, #28
10014942:	d423      	bmi.n	1001498c <__swsetup_r+0x88>
10014944:	06d1      	lsls	r1, r2, #27
10014946:	d407      	bmi.n	10014958 <__swsetup_r+0x54>
10014948:	2209      	movs	r2, #9
1001494a:	2001      	movs	r0, #1
1001494c:	6032      	str	r2, [r6, #0]
1001494e:	3237      	adds	r2, #55	; 0x37
10014950:	4313      	orrs	r3, r2
10014952:	81a3      	strh	r3, [r4, #12]
10014954:	4240      	negs	r0, r0
10014956:	e042      	b.n	100149de <__swsetup_r+0xda>
10014958:	0753      	lsls	r3, r2, #29
1001495a:	d513      	bpl.n	10014984 <__swsetup_r+0x80>
1001495c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001495e:	2900      	cmp	r1, #0
10014960:	d008      	beq.n	10014974 <__swsetup_r+0x70>
10014962:	0023      	movs	r3, r4
10014964:	3344      	adds	r3, #68	; 0x44
10014966:	4299      	cmp	r1, r3
10014968:	d002      	beq.n	10014970 <__swsetup_r+0x6c>
1001496a:	0030      	movs	r0, r6
1001496c:	f7ff fd34 	bl	100143d8 <_free_r>
10014970:	2300      	movs	r3, #0
10014972:	6363      	str	r3, [r4, #52]	; 0x34
10014974:	2224      	movs	r2, #36	; 0x24
10014976:	89a3      	ldrh	r3, [r4, #12]
10014978:	4393      	bics	r3, r2
1001497a:	81a3      	strh	r3, [r4, #12]
1001497c:	2300      	movs	r3, #0
1001497e:	6063      	str	r3, [r4, #4]
10014980:	6923      	ldr	r3, [r4, #16]
10014982:	6023      	str	r3, [r4, #0]
10014984:	2208      	movs	r2, #8
10014986:	89a3      	ldrh	r3, [r4, #12]
10014988:	4313      	orrs	r3, r2
1001498a:	81a3      	strh	r3, [r4, #12]
1001498c:	6923      	ldr	r3, [r4, #16]
1001498e:	2b00      	cmp	r3, #0
10014990:	d10b      	bne.n	100149aa <__swsetup_r+0xa6>
10014992:	23a0      	movs	r3, #160	; 0xa0
10014994:	89a2      	ldrh	r2, [r4, #12]
10014996:	009b      	lsls	r3, r3, #2
10014998:	4013      	ands	r3, r2
1001499a:	2280      	movs	r2, #128	; 0x80
1001499c:	0092      	lsls	r2, r2, #2
1001499e:	4293      	cmp	r3, r2
100149a0:	d003      	beq.n	100149aa <__swsetup_r+0xa6>
100149a2:	0021      	movs	r1, r4
100149a4:	0030      	movs	r0, r6
100149a6:	f000 f9d1 	bl	10014d4c <__smakebuf_r>
100149aa:	2301      	movs	r3, #1
100149ac:	89a2      	ldrh	r2, [r4, #12]
100149ae:	4013      	ands	r3, r2
100149b0:	d005      	beq.n	100149be <__swsetup_r+0xba>
100149b2:	2300      	movs	r3, #0
100149b4:	60a3      	str	r3, [r4, #8]
100149b6:	6963      	ldr	r3, [r4, #20]
100149b8:	425b      	negs	r3, r3
100149ba:	61a3      	str	r3, [r4, #24]
100149bc:	e003      	b.n	100149c6 <__swsetup_r+0xc2>
100149be:	0792      	lsls	r2, r2, #30
100149c0:	d400      	bmi.n	100149c4 <__swsetup_r+0xc0>
100149c2:	6963      	ldr	r3, [r4, #20]
100149c4:	60a3      	str	r3, [r4, #8]
100149c6:	2000      	movs	r0, #0
100149c8:	6923      	ldr	r3, [r4, #16]
100149ca:	4283      	cmp	r3, r0
100149cc:	d107      	bne.n	100149de <__swsetup_r+0xda>
100149ce:	220c      	movs	r2, #12
100149d0:	5ea3      	ldrsh	r3, [r4, r2]
100149d2:	061a      	lsls	r2, r3, #24
100149d4:	d503      	bpl.n	100149de <__swsetup_r+0xda>
100149d6:	2240      	movs	r2, #64	; 0x40
100149d8:	4313      	orrs	r3, r2
100149da:	81a3      	strh	r3, [r4, #12]
100149dc:	3801      	subs	r0, #1
100149de:	bd70      	pop	{r4, r5, r6, pc}
100149e0:	10016d18 	.word	0x10016d18
100149e4:	10016bbc 	.word	0x10016bbc
100149e8:	10016bdc 	.word	0x10016bdc
100149ec:	10016bfc 	.word	0x10016bfc

100149f0 <__sflush_r>:
100149f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100149f2:	898a      	ldrh	r2, [r1, #12]
100149f4:	0005      	movs	r5, r0
100149f6:	000c      	movs	r4, r1
100149f8:	0713      	lsls	r3, r2, #28
100149fa:	d45a      	bmi.n	10014ab2 <__sflush_r+0xc2>
100149fc:	684b      	ldr	r3, [r1, #4]
100149fe:	2b00      	cmp	r3, #0
10014a00:	dc02      	bgt.n	10014a08 <__sflush_r+0x18>
10014a02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10014a04:	2b00      	cmp	r3, #0
10014a06:	dd19      	ble.n	10014a3c <__sflush_r+0x4c>
10014a08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014a0a:	2f00      	cmp	r7, #0
10014a0c:	d016      	beq.n	10014a3c <__sflush_r+0x4c>
10014a0e:	2300      	movs	r3, #0
10014a10:	682e      	ldr	r6, [r5, #0]
10014a12:	602b      	str	r3, [r5, #0]
10014a14:	2380      	movs	r3, #128	; 0x80
10014a16:	015b      	lsls	r3, r3, #5
10014a18:	401a      	ands	r2, r3
10014a1a:	d001      	beq.n	10014a20 <__sflush_r+0x30>
10014a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10014a1e:	e014      	b.n	10014a4a <__sflush_r+0x5a>
10014a20:	2301      	movs	r3, #1
10014a22:	6a21      	ldr	r1, [r4, #32]
10014a24:	0028      	movs	r0, r5
10014a26:	47b8      	blx	r7
10014a28:	1c43      	adds	r3, r0, #1
10014a2a:	d10e      	bne.n	10014a4a <__sflush_r+0x5a>
10014a2c:	682b      	ldr	r3, [r5, #0]
10014a2e:	2b00      	cmp	r3, #0
10014a30:	d00b      	beq.n	10014a4a <__sflush_r+0x5a>
10014a32:	2b1d      	cmp	r3, #29
10014a34:	d001      	beq.n	10014a3a <__sflush_r+0x4a>
10014a36:	2b16      	cmp	r3, #22
10014a38:	d102      	bne.n	10014a40 <__sflush_r+0x50>
10014a3a:	602e      	str	r6, [r5, #0]
10014a3c:	2000      	movs	r0, #0
10014a3e:	e05a      	b.n	10014af6 <__sflush_r+0x106>
10014a40:	2240      	movs	r2, #64	; 0x40
10014a42:	89a3      	ldrh	r3, [r4, #12]
10014a44:	4313      	orrs	r3, r2
10014a46:	81a3      	strh	r3, [r4, #12]
10014a48:	e055      	b.n	10014af6 <__sflush_r+0x106>
10014a4a:	89a3      	ldrh	r3, [r4, #12]
10014a4c:	075b      	lsls	r3, r3, #29
10014a4e:	d506      	bpl.n	10014a5e <__sflush_r+0x6e>
10014a50:	6863      	ldr	r3, [r4, #4]
10014a52:	1ac0      	subs	r0, r0, r3
10014a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
10014a56:	2b00      	cmp	r3, #0
10014a58:	d001      	beq.n	10014a5e <__sflush_r+0x6e>
10014a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10014a5c:	1ac0      	subs	r0, r0, r3
10014a5e:	2300      	movs	r3, #0
10014a60:	0002      	movs	r2, r0
10014a62:	6a21      	ldr	r1, [r4, #32]
10014a64:	0028      	movs	r0, r5
10014a66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014a68:	47b8      	blx	r7
10014a6a:	89a3      	ldrh	r3, [r4, #12]
10014a6c:	1c42      	adds	r2, r0, #1
10014a6e:	d106      	bne.n	10014a7e <__sflush_r+0x8e>
10014a70:	6829      	ldr	r1, [r5, #0]
10014a72:	291d      	cmp	r1, #29
10014a74:	d83a      	bhi.n	10014aec <__sflush_r+0xfc>
10014a76:	4a20      	ldr	r2, [pc, #128]	; (10014af8 <__sflush_r+0x108>)
10014a78:	40ca      	lsrs	r2, r1
10014a7a:	07d2      	lsls	r2, r2, #31
10014a7c:	d536      	bpl.n	10014aec <__sflush_r+0xfc>
10014a7e:	2200      	movs	r2, #0
10014a80:	6062      	str	r2, [r4, #4]
10014a82:	6922      	ldr	r2, [r4, #16]
10014a84:	6022      	str	r2, [r4, #0]
10014a86:	04db      	lsls	r3, r3, #19
10014a88:	d505      	bpl.n	10014a96 <__sflush_r+0xa6>
10014a8a:	1c43      	adds	r3, r0, #1
10014a8c:	d102      	bne.n	10014a94 <__sflush_r+0xa4>
10014a8e:	682b      	ldr	r3, [r5, #0]
10014a90:	2b00      	cmp	r3, #0
10014a92:	d100      	bne.n	10014a96 <__sflush_r+0xa6>
10014a94:	6560      	str	r0, [r4, #84]	; 0x54
10014a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014a98:	602e      	str	r6, [r5, #0]
10014a9a:	2900      	cmp	r1, #0
10014a9c:	d0ce      	beq.n	10014a3c <__sflush_r+0x4c>
10014a9e:	0023      	movs	r3, r4
10014aa0:	3344      	adds	r3, #68	; 0x44
10014aa2:	4299      	cmp	r1, r3
10014aa4:	d002      	beq.n	10014aac <__sflush_r+0xbc>
10014aa6:	0028      	movs	r0, r5
10014aa8:	f7ff fc96 	bl	100143d8 <_free_r>
10014aac:	2000      	movs	r0, #0
10014aae:	6360      	str	r0, [r4, #52]	; 0x34
10014ab0:	e021      	b.n	10014af6 <__sflush_r+0x106>
10014ab2:	690f      	ldr	r7, [r1, #16]
10014ab4:	2f00      	cmp	r7, #0
10014ab6:	d0c1      	beq.n	10014a3c <__sflush_r+0x4c>
10014ab8:	680b      	ldr	r3, [r1, #0]
10014aba:	600f      	str	r7, [r1, #0]
10014abc:	1bdb      	subs	r3, r3, r7
10014abe:	9301      	str	r3, [sp, #4]
10014ac0:	2300      	movs	r3, #0
10014ac2:	0792      	lsls	r2, r2, #30
10014ac4:	d100      	bne.n	10014ac8 <__sflush_r+0xd8>
10014ac6:	694b      	ldr	r3, [r1, #20]
10014ac8:	60a3      	str	r3, [r4, #8]
10014aca:	e003      	b.n	10014ad4 <__sflush_r+0xe4>
10014acc:	9b01      	ldr	r3, [sp, #4]
10014ace:	183f      	adds	r7, r7, r0
10014ad0:	1a1b      	subs	r3, r3, r0
10014ad2:	9301      	str	r3, [sp, #4]
10014ad4:	9b01      	ldr	r3, [sp, #4]
10014ad6:	2b00      	cmp	r3, #0
10014ad8:	ddb0      	ble.n	10014a3c <__sflush_r+0x4c>
10014ada:	9b01      	ldr	r3, [sp, #4]
10014adc:	003a      	movs	r2, r7
10014ade:	6a21      	ldr	r1, [r4, #32]
10014ae0:	0028      	movs	r0, r5
10014ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10014ae4:	47b0      	blx	r6
10014ae6:	2800      	cmp	r0, #0
10014ae8:	dcf0      	bgt.n	10014acc <__sflush_r+0xdc>
10014aea:	89a3      	ldrh	r3, [r4, #12]
10014aec:	2240      	movs	r2, #64	; 0x40
10014aee:	2001      	movs	r0, #1
10014af0:	4313      	orrs	r3, r2
10014af2:	81a3      	strh	r3, [r4, #12]
10014af4:	4240      	negs	r0, r0
10014af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014af8:	20400001 	.word	0x20400001

10014afc <_fflush_r>:
10014afc:	690b      	ldr	r3, [r1, #16]
10014afe:	b570      	push	{r4, r5, r6, lr}
10014b00:	0005      	movs	r5, r0
10014b02:	000c      	movs	r4, r1
10014b04:	2b00      	cmp	r3, #0
10014b06:	d101      	bne.n	10014b0c <_fflush_r+0x10>
10014b08:	2000      	movs	r0, #0
10014b0a:	e01c      	b.n	10014b46 <_fflush_r+0x4a>
10014b0c:	2800      	cmp	r0, #0
10014b0e:	d004      	beq.n	10014b1a <_fflush_r+0x1e>
10014b10:	6983      	ldr	r3, [r0, #24]
10014b12:	2b00      	cmp	r3, #0
10014b14:	d101      	bne.n	10014b1a <_fflush_r+0x1e>
10014b16:	f000 f85f 	bl	10014bd8 <__sinit>
10014b1a:	4b0b      	ldr	r3, [pc, #44]	; (10014b48 <_fflush_r+0x4c>)
10014b1c:	429c      	cmp	r4, r3
10014b1e:	d101      	bne.n	10014b24 <_fflush_r+0x28>
10014b20:	686c      	ldr	r4, [r5, #4]
10014b22:	e008      	b.n	10014b36 <_fflush_r+0x3a>
10014b24:	4b09      	ldr	r3, [pc, #36]	; (10014b4c <_fflush_r+0x50>)
10014b26:	429c      	cmp	r4, r3
10014b28:	d101      	bne.n	10014b2e <_fflush_r+0x32>
10014b2a:	68ac      	ldr	r4, [r5, #8]
10014b2c:	e003      	b.n	10014b36 <_fflush_r+0x3a>
10014b2e:	4b08      	ldr	r3, [pc, #32]	; (10014b50 <_fflush_r+0x54>)
10014b30:	429c      	cmp	r4, r3
10014b32:	d100      	bne.n	10014b36 <_fflush_r+0x3a>
10014b34:	68ec      	ldr	r4, [r5, #12]
10014b36:	220c      	movs	r2, #12
10014b38:	5ea3      	ldrsh	r3, [r4, r2]
10014b3a:	2b00      	cmp	r3, #0
10014b3c:	d0e4      	beq.n	10014b08 <_fflush_r+0xc>
10014b3e:	0021      	movs	r1, r4
10014b40:	0028      	movs	r0, r5
10014b42:	f7ff ff55 	bl	100149f0 <__sflush_r>
10014b46:	bd70      	pop	{r4, r5, r6, pc}
10014b48:	10016bbc 	.word	0x10016bbc
10014b4c:	10016bdc 	.word	0x10016bdc
10014b50:	10016bfc 	.word	0x10016bfc

10014b54 <_cleanup_r>:
10014b54:	b510      	push	{r4, lr}
10014b56:	4902      	ldr	r1, [pc, #8]	; (10014b60 <_cleanup_r+0xc>)
10014b58:	f000 f8b0 	bl	10014cbc <_fwalk_reent>
10014b5c:	bd10      	pop	{r4, pc}
10014b5e:	46c0      	nop			; (mov r8, r8)
10014b60:	10014afd 	.word	0x10014afd

10014b64 <std.isra.0>:
10014b64:	2300      	movs	r3, #0
10014b66:	b510      	push	{r4, lr}
10014b68:	0004      	movs	r4, r0
10014b6a:	6003      	str	r3, [r0, #0]
10014b6c:	6043      	str	r3, [r0, #4]
10014b6e:	6083      	str	r3, [r0, #8]
10014b70:	8181      	strh	r1, [r0, #12]
10014b72:	6643      	str	r3, [r0, #100]	; 0x64
10014b74:	81c2      	strh	r2, [r0, #14]
10014b76:	6103      	str	r3, [r0, #16]
10014b78:	6143      	str	r3, [r0, #20]
10014b7a:	6183      	str	r3, [r0, #24]
10014b7c:	0019      	movs	r1, r3
10014b7e:	2208      	movs	r2, #8
10014b80:	305c      	adds	r0, #92	; 0x5c
10014b82:	f7ff fc21 	bl	100143c8 <memset>
10014b86:	4b05      	ldr	r3, [pc, #20]	; (10014b9c <std.isra.0+0x38>)
10014b88:	6224      	str	r4, [r4, #32]
10014b8a:	6263      	str	r3, [r4, #36]	; 0x24
10014b8c:	4b04      	ldr	r3, [pc, #16]	; (10014ba0 <std.isra.0+0x3c>)
10014b8e:	62a3      	str	r3, [r4, #40]	; 0x28
10014b90:	4b04      	ldr	r3, [pc, #16]	; (10014ba4 <std.isra.0+0x40>)
10014b92:	62e3      	str	r3, [r4, #44]	; 0x2c
10014b94:	4b04      	ldr	r3, [pc, #16]	; (10014ba8 <std.isra.0+0x44>)
10014b96:	6323      	str	r3, [r4, #48]	; 0x30
10014b98:	bd10      	pop	{r4, pc}
10014b9a:	46c0      	nop			; (mov r8, r8)
10014b9c:	100153dd 	.word	0x100153dd
10014ba0:	10015405 	.word	0x10015405
10014ba4:	1001543d 	.word	0x1001543d
10014ba8:	10015469 	.word	0x10015469

10014bac <__sfmoreglue>:
10014bac:	b570      	push	{r4, r5, r6, lr}
10014bae:	2568      	movs	r5, #104	; 0x68
10014bb0:	1e4b      	subs	r3, r1, #1
10014bb2:	435d      	muls	r5, r3
10014bb4:	000e      	movs	r6, r1
10014bb6:	0029      	movs	r1, r5
10014bb8:	3174      	adds	r1, #116	; 0x74
10014bba:	f7ff fc53 	bl	10014464 <_malloc_r>
10014bbe:	1e04      	subs	r4, r0, #0
10014bc0:	d008      	beq.n	10014bd4 <__sfmoreglue+0x28>
10014bc2:	2100      	movs	r1, #0
10014bc4:	002a      	movs	r2, r5
10014bc6:	6001      	str	r1, [r0, #0]
10014bc8:	6046      	str	r6, [r0, #4]
10014bca:	300c      	adds	r0, #12
10014bcc:	60a0      	str	r0, [r4, #8]
10014bce:	3268      	adds	r2, #104	; 0x68
10014bd0:	f7ff fbfa 	bl	100143c8 <memset>
10014bd4:	0020      	movs	r0, r4
10014bd6:	bd70      	pop	{r4, r5, r6, pc}

10014bd8 <__sinit>:
10014bd8:	6983      	ldr	r3, [r0, #24]
10014bda:	b513      	push	{r0, r1, r4, lr}
10014bdc:	0004      	movs	r4, r0
10014bde:	2b00      	cmp	r3, #0
10014be0:	d128      	bne.n	10014c34 <__sinit+0x5c>
10014be2:	6483      	str	r3, [r0, #72]	; 0x48
10014be4:	64c3      	str	r3, [r0, #76]	; 0x4c
10014be6:	6503      	str	r3, [r0, #80]	; 0x50
10014be8:	4b13      	ldr	r3, [pc, #76]	; (10014c38 <__sinit+0x60>)
10014bea:	4a14      	ldr	r2, [pc, #80]	; (10014c3c <__sinit+0x64>)
10014bec:	681b      	ldr	r3, [r3, #0]
10014bee:	6282      	str	r2, [r0, #40]	; 0x28
10014bf0:	9301      	str	r3, [sp, #4]
10014bf2:	4298      	cmp	r0, r3
10014bf4:	d101      	bne.n	10014bfa <__sinit+0x22>
10014bf6:	2301      	movs	r3, #1
10014bf8:	6183      	str	r3, [r0, #24]
10014bfa:	0020      	movs	r0, r4
10014bfc:	f000 f820 	bl	10014c40 <__sfp>
10014c00:	6060      	str	r0, [r4, #4]
10014c02:	0020      	movs	r0, r4
10014c04:	f000 f81c 	bl	10014c40 <__sfp>
10014c08:	60a0      	str	r0, [r4, #8]
10014c0a:	0020      	movs	r0, r4
10014c0c:	f000 f818 	bl	10014c40 <__sfp>
10014c10:	2200      	movs	r2, #0
10014c12:	60e0      	str	r0, [r4, #12]
10014c14:	2104      	movs	r1, #4
10014c16:	6860      	ldr	r0, [r4, #4]
10014c18:	f7ff ffa4 	bl	10014b64 <std.isra.0>
10014c1c:	2201      	movs	r2, #1
10014c1e:	2109      	movs	r1, #9
10014c20:	68a0      	ldr	r0, [r4, #8]
10014c22:	f7ff ff9f 	bl	10014b64 <std.isra.0>
10014c26:	2202      	movs	r2, #2
10014c28:	2112      	movs	r1, #18
10014c2a:	68e0      	ldr	r0, [r4, #12]
10014c2c:	f7ff ff9a 	bl	10014b64 <std.isra.0>
10014c30:	2301      	movs	r3, #1
10014c32:	61a3      	str	r3, [r4, #24]
10014c34:	bd13      	pop	{r0, r1, r4, pc}
10014c36:	46c0      	nop			; (mov r8, r8)
10014c38:	10016bb8 	.word	0x10016bb8
10014c3c:	10014b55 	.word	0x10014b55

10014c40 <__sfp>:
10014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014c42:	4b1d      	ldr	r3, [pc, #116]	; (10014cb8 <__sfp+0x78>)
10014c44:	0006      	movs	r6, r0
10014c46:	681d      	ldr	r5, [r3, #0]
10014c48:	69ab      	ldr	r3, [r5, #24]
10014c4a:	2b00      	cmp	r3, #0
10014c4c:	d102      	bne.n	10014c54 <__sfp+0x14>
10014c4e:	0028      	movs	r0, r5
10014c50:	f7ff ffc2 	bl	10014bd8 <__sinit>
10014c54:	3548      	adds	r5, #72	; 0x48
10014c56:	68ac      	ldr	r4, [r5, #8]
10014c58:	686b      	ldr	r3, [r5, #4]
10014c5a:	3b01      	subs	r3, #1
10014c5c:	d405      	bmi.n	10014c6a <__sfp+0x2a>
10014c5e:	220c      	movs	r2, #12
10014c60:	5ea7      	ldrsh	r7, [r4, r2]
10014c62:	2f00      	cmp	r7, #0
10014c64:	d010      	beq.n	10014c88 <__sfp+0x48>
10014c66:	3468      	adds	r4, #104	; 0x68
10014c68:	e7f7      	b.n	10014c5a <__sfp+0x1a>
10014c6a:	682b      	ldr	r3, [r5, #0]
10014c6c:	2b00      	cmp	r3, #0
10014c6e:	d001      	beq.n	10014c74 <__sfp+0x34>
10014c70:	682d      	ldr	r5, [r5, #0]
10014c72:	e7f0      	b.n	10014c56 <__sfp+0x16>
10014c74:	2104      	movs	r1, #4
10014c76:	0030      	movs	r0, r6
10014c78:	f7ff ff98 	bl	10014bac <__sfmoreglue>
10014c7c:	6028      	str	r0, [r5, #0]
10014c7e:	2800      	cmp	r0, #0
10014c80:	d1f6      	bne.n	10014c70 <__sfp+0x30>
10014c82:	230c      	movs	r3, #12
10014c84:	6033      	str	r3, [r6, #0]
10014c86:	e016      	b.n	10014cb6 <__sfp+0x76>
10014c88:	2301      	movs	r3, #1
10014c8a:	0020      	movs	r0, r4
10014c8c:	425b      	negs	r3, r3
10014c8e:	81e3      	strh	r3, [r4, #14]
10014c90:	3302      	adds	r3, #2
10014c92:	81a3      	strh	r3, [r4, #12]
10014c94:	6667      	str	r7, [r4, #100]	; 0x64
10014c96:	6027      	str	r7, [r4, #0]
10014c98:	60a7      	str	r7, [r4, #8]
10014c9a:	6067      	str	r7, [r4, #4]
10014c9c:	6127      	str	r7, [r4, #16]
10014c9e:	6167      	str	r7, [r4, #20]
10014ca0:	61a7      	str	r7, [r4, #24]
10014ca2:	305c      	adds	r0, #92	; 0x5c
10014ca4:	2208      	movs	r2, #8
10014ca6:	0039      	movs	r1, r7
10014ca8:	f7ff fb8e 	bl	100143c8 <memset>
10014cac:	0020      	movs	r0, r4
10014cae:	6367      	str	r7, [r4, #52]	; 0x34
10014cb0:	63a7      	str	r7, [r4, #56]	; 0x38
10014cb2:	64a7      	str	r7, [r4, #72]	; 0x48
10014cb4:	64e7      	str	r7, [r4, #76]	; 0x4c
10014cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014cb8:	10016bb8 	.word	0x10016bb8

10014cbc <_fwalk_reent>:
10014cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014cbe:	0004      	movs	r4, r0
10014cc0:	0007      	movs	r7, r0
10014cc2:	2600      	movs	r6, #0
10014cc4:	9101      	str	r1, [sp, #4]
10014cc6:	3448      	adds	r4, #72	; 0x48
10014cc8:	2c00      	cmp	r4, #0
10014cca:	d016      	beq.n	10014cfa <_fwalk_reent+0x3e>
10014ccc:	6863      	ldr	r3, [r4, #4]
10014cce:	68a5      	ldr	r5, [r4, #8]
10014cd0:	9300      	str	r3, [sp, #0]
10014cd2:	9b00      	ldr	r3, [sp, #0]
10014cd4:	3b01      	subs	r3, #1
10014cd6:	9300      	str	r3, [sp, #0]
10014cd8:	d40d      	bmi.n	10014cf6 <_fwalk_reent+0x3a>
10014cda:	89ab      	ldrh	r3, [r5, #12]
10014cdc:	2b01      	cmp	r3, #1
10014cde:	d908      	bls.n	10014cf2 <_fwalk_reent+0x36>
10014ce0:	220e      	movs	r2, #14
10014ce2:	5eab      	ldrsh	r3, [r5, r2]
10014ce4:	3301      	adds	r3, #1
10014ce6:	d004      	beq.n	10014cf2 <_fwalk_reent+0x36>
10014ce8:	0029      	movs	r1, r5
10014cea:	0038      	movs	r0, r7
10014cec:	9b01      	ldr	r3, [sp, #4]
10014cee:	4798      	blx	r3
10014cf0:	4306      	orrs	r6, r0
10014cf2:	3568      	adds	r5, #104	; 0x68
10014cf4:	e7ed      	b.n	10014cd2 <_fwalk_reent+0x16>
10014cf6:	6824      	ldr	r4, [r4, #0]
10014cf8:	e7e6      	b.n	10014cc8 <_fwalk_reent+0xc>
10014cfa:	0030      	movs	r0, r6
10014cfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10014d00 <__swhatbuf_r>:
10014d00:	b570      	push	{r4, r5, r6, lr}
10014d02:	000e      	movs	r6, r1
10014d04:	001d      	movs	r5, r3
10014d06:	230e      	movs	r3, #14
10014d08:	5ec9      	ldrsh	r1, [r1, r3]
10014d0a:	b090      	sub	sp, #64	; 0x40
10014d0c:	0014      	movs	r4, r2
10014d0e:	2900      	cmp	r1, #0
10014d10:	da06      	bge.n	10014d20 <__swhatbuf_r+0x20>
10014d12:	2300      	movs	r3, #0
10014d14:	602b      	str	r3, [r5, #0]
10014d16:	89b3      	ldrh	r3, [r6, #12]
10014d18:	061b      	lsls	r3, r3, #24
10014d1a:	d50f      	bpl.n	10014d3c <__swhatbuf_r+0x3c>
10014d1c:	2340      	movs	r3, #64	; 0x40
10014d1e:	e00f      	b.n	10014d40 <__swhatbuf_r+0x40>
10014d20:	aa01      	add	r2, sp, #4
10014d22:	f000 fbcd 	bl	100154c0 <_fstat_r>
10014d26:	2800      	cmp	r0, #0
10014d28:	dbf3      	blt.n	10014d12 <__swhatbuf_r+0x12>
10014d2a:	23f0      	movs	r3, #240	; 0xf0
10014d2c:	9a02      	ldr	r2, [sp, #8]
10014d2e:	021b      	lsls	r3, r3, #8
10014d30:	4013      	ands	r3, r2
10014d32:	4a05      	ldr	r2, [pc, #20]	; (10014d48 <__swhatbuf_r+0x48>)
10014d34:	189b      	adds	r3, r3, r2
10014d36:	425a      	negs	r2, r3
10014d38:	4153      	adcs	r3, r2
10014d3a:	602b      	str	r3, [r5, #0]
10014d3c:	2380      	movs	r3, #128	; 0x80
10014d3e:	00db      	lsls	r3, r3, #3
10014d40:	2000      	movs	r0, #0
10014d42:	6023      	str	r3, [r4, #0]
10014d44:	b010      	add	sp, #64	; 0x40
10014d46:	bd70      	pop	{r4, r5, r6, pc}
10014d48:	ffffe000 	.word	0xffffe000

10014d4c <__smakebuf_r>:
10014d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014d4e:	2602      	movs	r6, #2
10014d50:	898b      	ldrh	r3, [r1, #12]
10014d52:	0005      	movs	r5, r0
10014d54:	000c      	movs	r4, r1
10014d56:	4233      	tst	r3, r6
10014d58:	d110      	bne.n	10014d7c <__smakebuf_r+0x30>
10014d5a:	ab01      	add	r3, sp, #4
10014d5c:	466a      	mov	r2, sp
10014d5e:	f7ff ffcf 	bl	10014d00 <__swhatbuf_r>
10014d62:	9900      	ldr	r1, [sp, #0]
10014d64:	0007      	movs	r7, r0
10014d66:	0028      	movs	r0, r5
10014d68:	f7ff fb7c 	bl	10014464 <_malloc_r>
10014d6c:	2800      	cmp	r0, #0
10014d6e:	d10c      	bne.n	10014d8a <__smakebuf_r+0x3e>
10014d70:	220c      	movs	r2, #12
10014d72:	5ea3      	ldrsh	r3, [r4, r2]
10014d74:	059a      	lsls	r2, r3, #22
10014d76:	d423      	bmi.n	10014dc0 <__smakebuf_r+0x74>
10014d78:	4333      	orrs	r3, r6
10014d7a:	81a3      	strh	r3, [r4, #12]
10014d7c:	0023      	movs	r3, r4
10014d7e:	3347      	adds	r3, #71	; 0x47
10014d80:	6023      	str	r3, [r4, #0]
10014d82:	6123      	str	r3, [r4, #16]
10014d84:	2301      	movs	r3, #1
10014d86:	6163      	str	r3, [r4, #20]
10014d88:	e01a      	b.n	10014dc0 <__smakebuf_r+0x74>
10014d8a:	2280      	movs	r2, #128	; 0x80
10014d8c:	4b0d      	ldr	r3, [pc, #52]	; (10014dc4 <__smakebuf_r+0x78>)
10014d8e:	62ab      	str	r3, [r5, #40]	; 0x28
10014d90:	89a3      	ldrh	r3, [r4, #12]
10014d92:	6020      	str	r0, [r4, #0]
10014d94:	4313      	orrs	r3, r2
10014d96:	81a3      	strh	r3, [r4, #12]
10014d98:	9b00      	ldr	r3, [sp, #0]
10014d9a:	6120      	str	r0, [r4, #16]
10014d9c:	6163      	str	r3, [r4, #20]
10014d9e:	9b01      	ldr	r3, [sp, #4]
10014da0:	2b00      	cmp	r3, #0
10014da2:	d00a      	beq.n	10014dba <__smakebuf_r+0x6e>
10014da4:	230e      	movs	r3, #14
10014da6:	5ee1      	ldrsh	r1, [r4, r3]
10014da8:	0028      	movs	r0, r5
10014daa:	f000 fb9b 	bl	100154e4 <_isatty_r>
10014dae:	2800      	cmp	r0, #0
10014db0:	d003      	beq.n	10014dba <__smakebuf_r+0x6e>
10014db2:	2201      	movs	r2, #1
10014db4:	89a3      	ldrh	r3, [r4, #12]
10014db6:	4313      	orrs	r3, r2
10014db8:	81a3      	strh	r3, [r4, #12]
10014dba:	89a3      	ldrh	r3, [r4, #12]
10014dbc:	431f      	orrs	r7, r3
10014dbe:	81a7      	strh	r7, [r4, #12]
10014dc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10014dc2:	46c0      	nop			; (mov r8, r8)
10014dc4:	10014b55 	.word	0x10014b55

10014dc8 <__sfputc_r>:
10014dc8:	6893      	ldr	r3, [r2, #8]
10014dca:	b510      	push	{r4, lr}
10014dcc:	3b01      	subs	r3, #1
10014dce:	6093      	str	r3, [r2, #8]
10014dd0:	2b00      	cmp	r3, #0
10014dd2:	da05      	bge.n	10014de0 <__sfputc_r+0x18>
10014dd4:	6994      	ldr	r4, [r2, #24]
10014dd6:	42a3      	cmp	r3, r4
10014dd8:	db08      	blt.n	10014dec <__sfputc_r+0x24>
10014dda:	b2cb      	uxtb	r3, r1
10014ddc:	2b0a      	cmp	r3, #10
10014dde:	d005      	beq.n	10014dec <__sfputc_r+0x24>
10014de0:	6813      	ldr	r3, [r2, #0]
10014de2:	1c58      	adds	r0, r3, #1
10014de4:	6010      	str	r0, [r2, #0]
10014de6:	7019      	strb	r1, [r3, #0]
10014de8:	b2c8      	uxtb	r0, r1
10014dea:	e001      	b.n	10014df0 <__sfputc_r+0x28>
10014dec:	f7ff fd32 	bl	10014854 <__swbuf_r>
10014df0:	bd10      	pop	{r4, pc}

10014df2 <__sfputs_r>:
10014df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014df4:	0006      	movs	r6, r0
10014df6:	000f      	movs	r7, r1
10014df8:	0014      	movs	r4, r2
10014dfa:	18d5      	adds	r5, r2, r3
10014dfc:	42ac      	cmp	r4, r5
10014dfe:	d008      	beq.n	10014e12 <__sfputs_r+0x20>
10014e00:	7821      	ldrb	r1, [r4, #0]
10014e02:	003a      	movs	r2, r7
10014e04:	0030      	movs	r0, r6
10014e06:	f7ff ffdf 	bl	10014dc8 <__sfputc_r>
10014e0a:	3401      	adds	r4, #1
10014e0c:	1c43      	adds	r3, r0, #1
10014e0e:	d1f5      	bne.n	10014dfc <__sfputs_r+0xa>
10014e10:	e000      	b.n	10014e14 <__sfputs_r+0x22>
10014e12:	2000      	movs	r0, #0
10014e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10014e18 <_vfiprintf_r>:
10014e18:	b5f0      	push	{r4, r5, r6, r7, lr}
10014e1a:	b09f      	sub	sp, #124	; 0x7c
10014e1c:	0006      	movs	r6, r0
10014e1e:	000f      	movs	r7, r1
10014e20:	9202      	str	r2, [sp, #8]
10014e22:	9305      	str	r3, [sp, #20]
10014e24:	2800      	cmp	r0, #0
10014e26:	d004      	beq.n	10014e32 <_vfiprintf_r+0x1a>
10014e28:	6983      	ldr	r3, [r0, #24]
10014e2a:	2b00      	cmp	r3, #0
10014e2c:	d101      	bne.n	10014e32 <_vfiprintf_r+0x1a>
10014e2e:	f7ff fed3 	bl	10014bd8 <__sinit>
10014e32:	4b7f      	ldr	r3, [pc, #508]	; (10015030 <_vfiprintf_r+0x218>)
10014e34:	429f      	cmp	r7, r3
10014e36:	d101      	bne.n	10014e3c <_vfiprintf_r+0x24>
10014e38:	6877      	ldr	r7, [r6, #4]
10014e3a:	e008      	b.n	10014e4e <_vfiprintf_r+0x36>
10014e3c:	4b7d      	ldr	r3, [pc, #500]	; (10015034 <_vfiprintf_r+0x21c>)
10014e3e:	429f      	cmp	r7, r3
10014e40:	d101      	bne.n	10014e46 <_vfiprintf_r+0x2e>
10014e42:	68b7      	ldr	r7, [r6, #8]
10014e44:	e003      	b.n	10014e4e <_vfiprintf_r+0x36>
10014e46:	4b7c      	ldr	r3, [pc, #496]	; (10015038 <_vfiprintf_r+0x220>)
10014e48:	429f      	cmp	r7, r3
10014e4a:	d100      	bne.n	10014e4e <_vfiprintf_r+0x36>
10014e4c:	68f7      	ldr	r7, [r6, #12]
10014e4e:	89bb      	ldrh	r3, [r7, #12]
10014e50:	071b      	lsls	r3, r3, #28
10014e52:	d50a      	bpl.n	10014e6a <_vfiprintf_r+0x52>
10014e54:	693b      	ldr	r3, [r7, #16]
10014e56:	2b00      	cmp	r3, #0
10014e58:	d007      	beq.n	10014e6a <_vfiprintf_r+0x52>
10014e5a:	2300      	movs	r3, #0
10014e5c:	ad06      	add	r5, sp, #24
10014e5e:	616b      	str	r3, [r5, #20]
10014e60:	3320      	adds	r3, #32
10014e62:	766b      	strb	r3, [r5, #25]
10014e64:	3310      	adds	r3, #16
10014e66:	76ab      	strb	r3, [r5, #26]
10014e68:	e03d      	b.n	10014ee6 <_vfiprintf_r+0xce>
10014e6a:	0039      	movs	r1, r7
10014e6c:	0030      	movs	r0, r6
10014e6e:	f7ff fd49 	bl	10014904 <__swsetup_r>
10014e72:	2800      	cmp	r0, #0
10014e74:	d0f1      	beq.n	10014e5a <_vfiprintf_r+0x42>
10014e76:	2001      	movs	r0, #1
10014e78:	4240      	negs	r0, r0
10014e7a:	e0d6      	b.n	1001502a <_vfiprintf_r+0x212>
10014e7c:	9a05      	ldr	r2, [sp, #20]
10014e7e:	1d11      	adds	r1, r2, #4
10014e80:	6812      	ldr	r2, [r2, #0]
10014e82:	9105      	str	r1, [sp, #20]
10014e84:	2a00      	cmp	r2, #0
10014e86:	da00      	bge.n	10014e8a <_vfiprintf_r+0x72>
10014e88:	e07f      	b.n	10014f8a <_vfiprintf_r+0x172>
10014e8a:	9209      	str	r2, [sp, #36]	; 0x24
10014e8c:	3401      	adds	r4, #1
10014e8e:	7823      	ldrb	r3, [r4, #0]
10014e90:	2b2e      	cmp	r3, #46	; 0x2e
10014e92:	d100      	bne.n	10014e96 <_vfiprintf_r+0x7e>
10014e94:	e08d      	b.n	10014fb2 <_vfiprintf_r+0x19a>
10014e96:	7821      	ldrb	r1, [r4, #0]
10014e98:	2203      	movs	r2, #3
10014e9a:	4868      	ldr	r0, [pc, #416]	; (1001503c <_vfiprintf_r+0x224>)
10014e9c:	f000 fb48 	bl	10015530 <memchr>
10014ea0:	2800      	cmp	r0, #0
10014ea2:	d007      	beq.n	10014eb4 <_vfiprintf_r+0x9c>
10014ea4:	4b65      	ldr	r3, [pc, #404]	; (1001503c <_vfiprintf_r+0x224>)
10014ea6:	682a      	ldr	r2, [r5, #0]
10014ea8:	1ac0      	subs	r0, r0, r3
10014eaa:	2340      	movs	r3, #64	; 0x40
10014eac:	4083      	lsls	r3, r0
10014eae:	4313      	orrs	r3, r2
10014eb0:	602b      	str	r3, [r5, #0]
10014eb2:	3401      	adds	r4, #1
10014eb4:	7821      	ldrb	r1, [r4, #0]
10014eb6:	1c63      	adds	r3, r4, #1
10014eb8:	2206      	movs	r2, #6
10014eba:	4861      	ldr	r0, [pc, #388]	; (10015040 <_vfiprintf_r+0x228>)
10014ebc:	9302      	str	r3, [sp, #8]
10014ebe:	7629      	strb	r1, [r5, #24]
10014ec0:	f000 fb36 	bl	10015530 <memchr>
10014ec4:	2800      	cmp	r0, #0
10014ec6:	d100      	bne.n	10014eca <_vfiprintf_r+0xb2>
10014ec8:	e09d      	b.n	10015006 <_vfiprintf_r+0x1ee>
10014eca:	4b5e      	ldr	r3, [pc, #376]	; (10015044 <_vfiprintf_r+0x22c>)
10014ecc:	2b00      	cmp	r3, #0
10014ece:	d000      	beq.n	10014ed2 <_vfiprintf_r+0xba>
10014ed0:	e090      	b.n	10014ff4 <_vfiprintf_r+0x1dc>
10014ed2:	2207      	movs	r2, #7
10014ed4:	9b05      	ldr	r3, [sp, #20]
10014ed6:	3307      	adds	r3, #7
10014ed8:	4393      	bics	r3, r2
10014eda:	3308      	adds	r3, #8
10014edc:	9305      	str	r3, [sp, #20]
10014ede:	696b      	ldr	r3, [r5, #20]
10014ee0:	9a03      	ldr	r2, [sp, #12]
10014ee2:	189b      	adds	r3, r3, r2
10014ee4:	616b      	str	r3, [r5, #20]
10014ee6:	9c02      	ldr	r4, [sp, #8]
10014ee8:	7823      	ldrb	r3, [r4, #0]
10014eea:	2b00      	cmp	r3, #0
10014eec:	d104      	bne.n	10014ef8 <_vfiprintf_r+0xe0>
10014eee:	9b02      	ldr	r3, [sp, #8]
10014ef0:	1ae3      	subs	r3, r4, r3
10014ef2:	9304      	str	r3, [sp, #16]
10014ef4:	d012      	beq.n	10014f1c <_vfiprintf_r+0x104>
10014ef6:	e003      	b.n	10014f00 <_vfiprintf_r+0xe8>
10014ef8:	2b25      	cmp	r3, #37	; 0x25
10014efa:	d0f8      	beq.n	10014eee <_vfiprintf_r+0xd6>
10014efc:	3401      	adds	r4, #1
10014efe:	e7f3      	b.n	10014ee8 <_vfiprintf_r+0xd0>
10014f00:	9b04      	ldr	r3, [sp, #16]
10014f02:	9a02      	ldr	r2, [sp, #8]
10014f04:	0039      	movs	r1, r7
10014f06:	0030      	movs	r0, r6
10014f08:	f7ff ff73 	bl	10014df2 <__sfputs_r>
10014f0c:	1c43      	adds	r3, r0, #1
10014f0e:	d100      	bne.n	10014f12 <_vfiprintf_r+0xfa>
10014f10:	e086      	b.n	10015020 <_vfiprintf_r+0x208>
10014f12:	696a      	ldr	r2, [r5, #20]
10014f14:	9b04      	ldr	r3, [sp, #16]
10014f16:	4694      	mov	ip, r2
10014f18:	4463      	add	r3, ip
10014f1a:	616b      	str	r3, [r5, #20]
10014f1c:	7823      	ldrb	r3, [r4, #0]
10014f1e:	2b00      	cmp	r3, #0
10014f20:	d07e      	beq.n	10015020 <_vfiprintf_r+0x208>
10014f22:	2201      	movs	r2, #1
10014f24:	2300      	movs	r3, #0
10014f26:	4252      	negs	r2, r2
10014f28:	606a      	str	r2, [r5, #4]
10014f2a:	a902      	add	r1, sp, #8
10014f2c:	3254      	adds	r2, #84	; 0x54
10014f2e:	1852      	adds	r2, r2, r1
10014f30:	3401      	adds	r4, #1
10014f32:	602b      	str	r3, [r5, #0]
10014f34:	60eb      	str	r3, [r5, #12]
10014f36:	60ab      	str	r3, [r5, #8]
10014f38:	7013      	strb	r3, [r2, #0]
10014f3a:	65ab      	str	r3, [r5, #88]	; 0x58
10014f3c:	7821      	ldrb	r1, [r4, #0]
10014f3e:	2205      	movs	r2, #5
10014f40:	4841      	ldr	r0, [pc, #260]	; (10015048 <_vfiprintf_r+0x230>)
10014f42:	f000 faf5 	bl	10015530 <memchr>
10014f46:	2800      	cmp	r0, #0
10014f48:	d008      	beq.n	10014f5c <_vfiprintf_r+0x144>
10014f4a:	4b3f      	ldr	r3, [pc, #252]	; (10015048 <_vfiprintf_r+0x230>)
10014f4c:	682a      	ldr	r2, [r5, #0]
10014f4e:	1ac0      	subs	r0, r0, r3
10014f50:	2301      	movs	r3, #1
10014f52:	4083      	lsls	r3, r0
10014f54:	4313      	orrs	r3, r2
10014f56:	602b      	str	r3, [r5, #0]
10014f58:	3401      	adds	r4, #1
10014f5a:	e7ef      	b.n	10014f3c <_vfiprintf_r+0x124>
10014f5c:	682b      	ldr	r3, [r5, #0]
10014f5e:	06da      	lsls	r2, r3, #27
10014f60:	d504      	bpl.n	10014f6c <_vfiprintf_r+0x154>
10014f62:	2253      	movs	r2, #83	; 0x53
10014f64:	2120      	movs	r1, #32
10014f66:	a802      	add	r0, sp, #8
10014f68:	1812      	adds	r2, r2, r0
10014f6a:	7011      	strb	r1, [r2, #0]
10014f6c:	071a      	lsls	r2, r3, #28
10014f6e:	d504      	bpl.n	10014f7a <_vfiprintf_r+0x162>
10014f70:	2253      	movs	r2, #83	; 0x53
10014f72:	212b      	movs	r1, #43	; 0x2b
10014f74:	a802      	add	r0, sp, #8
10014f76:	1812      	adds	r2, r2, r0
10014f78:	7011      	strb	r1, [r2, #0]
10014f7a:	7822      	ldrb	r2, [r4, #0]
10014f7c:	2a2a      	cmp	r2, #42	; 0x2a
10014f7e:	d100      	bne.n	10014f82 <_vfiprintf_r+0x16a>
10014f80:	e77c      	b.n	10014e7c <_vfiprintf_r+0x64>
10014f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
10014f84:	2000      	movs	r0, #0
10014f86:	210a      	movs	r1, #10
10014f88:	e005      	b.n	10014f96 <_vfiprintf_r+0x17e>
10014f8a:	4252      	negs	r2, r2
10014f8c:	60ea      	str	r2, [r5, #12]
10014f8e:	2202      	movs	r2, #2
10014f90:	4313      	orrs	r3, r2
10014f92:	602b      	str	r3, [r5, #0]
10014f94:	e77a      	b.n	10014e8c <_vfiprintf_r+0x74>
10014f96:	7822      	ldrb	r2, [r4, #0]
10014f98:	3a30      	subs	r2, #48	; 0x30
10014f9a:	2a09      	cmp	r2, #9
10014f9c:	d804      	bhi.n	10014fa8 <_vfiprintf_r+0x190>
10014f9e:	434b      	muls	r3, r1
10014fa0:	3401      	adds	r4, #1
10014fa2:	189b      	adds	r3, r3, r2
10014fa4:	2001      	movs	r0, #1
10014fa6:	e7f6      	b.n	10014f96 <_vfiprintf_r+0x17e>
10014fa8:	2800      	cmp	r0, #0
10014faa:	d100      	bne.n	10014fae <_vfiprintf_r+0x196>
10014fac:	e76f      	b.n	10014e8e <_vfiprintf_r+0x76>
10014fae:	9309      	str	r3, [sp, #36]	; 0x24
10014fb0:	e76d      	b.n	10014e8e <_vfiprintf_r+0x76>
10014fb2:	7863      	ldrb	r3, [r4, #1]
10014fb4:	2b2a      	cmp	r3, #42	; 0x2a
10014fb6:	d10a      	bne.n	10014fce <_vfiprintf_r+0x1b6>
10014fb8:	9b05      	ldr	r3, [sp, #20]
10014fba:	3402      	adds	r4, #2
10014fbc:	1d1a      	adds	r2, r3, #4
10014fbe:	681b      	ldr	r3, [r3, #0]
10014fc0:	9205      	str	r2, [sp, #20]
10014fc2:	2b00      	cmp	r3, #0
10014fc4:	da01      	bge.n	10014fca <_vfiprintf_r+0x1b2>
10014fc6:	2301      	movs	r3, #1
10014fc8:	425b      	negs	r3, r3
10014fca:	9307      	str	r3, [sp, #28]
10014fcc:	e763      	b.n	10014e96 <_vfiprintf_r+0x7e>
10014fce:	2300      	movs	r3, #0
10014fd0:	200a      	movs	r0, #10
10014fd2:	001a      	movs	r2, r3
10014fd4:	3401      	adds	r4, #1
10014fd6:	606b      	str	r3, [r5, #4]
10014fd8:	7821      	ldrb	r1, [r4, #0]
10014fda:	3930      	subs	r1, #48	; 0x30
10014fdc:	2909      	cmp	r1, #9
10014fde:	d804      	bhi.n	10014fea <_vfiprintf_r+0x1d2>
10014fe0:	4342      	muls	r2, r0
10014fe2:	3401      	adds	r4, #1
10014fe4:	1852      	adds	r2, r2, r1
10014fe6:	2301      	movs	r3, #1
10014fe8:	e7f6      	b.n	10014fd8 <_vfiprintf_r+0x1c0>
10014fea:	2b00      	cmp	r3, #0
10014fec:	d100      	bne.n	10014ff0 <_vfiprintf_r+0x1d8>
10014fee:	e752      	b.n	10014e96 <_vfiprintf_r+0x7e>
10014ff0:	9207      	str	r2, [sp, #28]
10014ff2:	e750      	b.n	10014e96 <_vfiprintf_r+0x7e>
10014ff4:	ab05      	add	r3, sp, #20
10014ff6:	9300      	str	r3, [sp, #0]
10014ff8:	003a      	movs	r2, r7
10014ffa:	4b14      	ldr	r3, [pc, #80]	; (1001504c <_vfiprintf_r+0x234>)
10014ffc:	0029      	movs	r1, r5
10014ffe:	0030      	movs	r0, r6
10015000:	e000      	b.n	10015004 <_vfiprintf_r+0x1ec>
10015002:	bf00      	nop
10015004:	e007      	b.n	10015016 <_vfiprintf_r+0x1fe>
10015006:	ab05      	add	r3, sp, #20
10015008:	9300      	str	r3, [sp, #0]
1001500a:	003a      	movs	r2, r7
1001500c:	4b0f      	ldr	r3, [pc, #60]	; (1001504c <_vfiprintf_r+0x234>)
1001500e:	0029      	movs	r1, r5
10015010:	0030      	movs	r0, r6
10015012:	f000 f88b 	bl	1001512c <_printf_i>
10015016:	9003      	str	r0, [sp, #12]
10015018:	9b03      	ldr	r3, [sp, #12]
1001501a:	3301      	adds	r3, #1
1001501c:	d000      	beq.n	10015020 <_vfiprintf_r+0x208>
1001501e:	e75e      	b.n	10014ede <_vfiprintf_r+0xc6>
10015020:	89bb      	ldrh	r3, [r7, #12]
10015022:	065b      	lsls	r3, r3, #25
10015024:	d500      	bpl.n	10015028 <_vfiprintf_r+0x210>
10015026:	e726      	b.n	10014e76 <_vfiprintf_r+0x5e>
10015028:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001502a:	b01f      	add	sp, #124	; 0x7c
1001502c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001502e:	46c0      	nop			; (mov r8, r8)
10015030:	10016bbc 	.word	0x10016bbc
10015034:	10016bdc 	.word	0x10016bdc
10015038:	10016bfc 	.word	0x10016bfc
1001503c:	10016c22 	.word	0x10016c22
10015040:	10016c26 	.word	0x10016c26
10015044:	00000000 	.word	0x00000000
10015048:	10016c1c 	.word	0x10016c1c
1001504c:	10014df3 	.word	0x10014df3

10015050 <_printf_common>:
10015050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015052:	0017      	movs	r7, r2
10015054:	9301      	str	r3, [sp, #4]
10015056:	688a      	ldr	r2, [r1, #8]
10015058:	690b      	ldr	r3, [r1, #16]
1001505a:	9000      	str	r0, [sp, #0]
1001505c:	000c      	movs	r4, r1
1001505e:	4293      	cmp	r3, r2
10015060:	da00      	bge.n	10015064 <_printf_common+0x14>
10015062:	0013      	movs	r3, r2
10015064:	0022      	movs	r2, r4
10015066:	603b      	str	r3, [r7, #0]
10015068:	3243      	adds	r2, #67	; 0x43
1001506a:	7812      	ldrb	r2, [r2, #0]
1001506c:	2a00      	cmp	r2, #0
1001506e:	d001      	beq.n	10015074 <_printf_common+0x24>
10015070:	3301      	adds	r3, #1
10015072:	603b      	str	r3, [r7, #0]
10015074:	6823      	ldr	r3, [r4, #0]
10015076:	069b      	lsls	r3, r3, #26
10015078:	d502      	bpl.n	10015080 <_printf_common+0x30>
1001507a:	683b      	ldr	r3, [r7, #0]
1001507c:	3302      	adds	r3, #2
1001507e:	603b      	str	r3, [r7, #0]
10015080:	2506      	movs	r5, #6
10015082:	6823      	ldr	r3, [r4, #0]
10015084:	401d      	ands	r5, r3
10015086:	d01e      	beq.n	100150c6 <_printf_common+0x76>
10015088:	0023      	movs	r3, r4
1001508a:	3343      	adds	r3, #67	; 0x43
1001508c:	781b      	ldrb	r3, [r3, #0]
1001508e:	1e5a      	subs	r2, r3, #1
10015090:	4193      	sbcs	r3, r2
10015092:	6822      	ldr	r2, [r4, #0]
10015094:	0692      	lsls	r2, r2, #26
10015096:	d51c      	bpl.n	100150d2 <_printf_common+0x82>
10015098:	2030      	movs	r0, #48	; 0x30
1001509a:	18e1      	adds	r1, r4, r3
1001509c:	3143      	adds	r1, #67	; 0x43
1001509e:	7008      	strb	r0, [r1, #0]
100150a0:	0021      	movs	r1, r4
100150a2:	1c5a      	adds	r2, r3, #1
100150a4:	3145      	adds	r1, #69	; 0x45
100150a6:	7809      	ldrb	r1, [r1, #0]
100150a8:	18a2      	adds	r2, r4, r2
100150aa:	3243      	adds	r2, #67	; 0x43
100150ac:	3302      	adds	r3, #2
100150ae:	7011      	strb	r1, [r2, #0]
100150b0:	e00f      	b.n	100150d2 <_printf_common+0x82>
100150b2:	0022      	movs	r2, r4
100150b4:	2301      	movs	r3, #1
100150b6:	3219      	adds	r2, #25
100150b8:	9901      	ldr	r1, [sp, #4]
100150ba:	9800      	ldr	r0, [sp, #0]
100150bc:	9e08      	ldr	r6, [sp, #32]
100150be:	47b0      	blx	r6
100150c0:	1c43      	adds	r3, r0, #1
100150c2:	d00e      	beq.n	100150e2 <_printf_common+0x92>
100150c4:	3501      	adds	r5, #1
100150c6:	68e3      	ldr	r3, [r4, #12]
100150c8:	683a      	ldr	r2, [r7, #0]
100150ca:	1a9b      	subs	r3, r3, r2
100150cc:	429d      	cmp	r5, r3
100150ce:	dbf0      	blt.n	100150b2 <_printf_common+0x62>
100150d0:	e7da      	b.n	10015088 <_printf_common+0x38>
100150d2:	0022      	movs	r2, r4
100150d4:	9901      	ldr	r1, [sp, #4]
100150d6:	3243      	adds	r2, #67	; 0x43
100150d8:	9800      	ldr	r0, [sp, #0]
100150da:	9d08      	ldr	r5, [sp, #32]
100150dc:	47a8      	blx	r5
100150de:	1c43      	adds	r3, r0, #1
100150e0:	d102      	bne.n	100150e8 <_printf_common+0x98>
100150e2:	2001      	movs	r0, #1
100150e4:	4240      	negs	r0, r0
100150e6:	e020      	b.n	1001512a <_printf_common+0xda>
100150e8:	2306      	movs	r3, #6
100150ea:	6820      	ldr	r0, [r4, #0]
100150ec:	68e1      	ldr	r1, [r4, #12]
100150ee:	683a      	ldr	r2, [r7, #0]
100150f0:	4003      	ands	r3, r0
100150f2:	2500      	movs	r5, #0
100150f4:	2b04      	cmp	r3, #4
100150f6:	d103      	bne.n	10015100 <_printf_common+0xb0>
100150f8:	1a8d      	subs	r5, r1, r2
100150fa:	43eb      	mvns	r3, r5
100150fc:	17db      	asrs	r3, r3, #31
100150fe:	401d      	ands	r5, r3
10015100:	68a3      	ldr	r3, [r4, #8]
10015102:	6922      	ldr	r2, [r4, #16]
10015104:	4293      	cmp	r3, r2
10015106:	dd01      	ble.n	1001510c <_printf_common+0xbc>
10015108:	1a9b      	subs	r3, r3, r2
1001510a:	18ed      	adds	r5, r5, r3
1001510c:	2700      	movs	r7, #0
1001510e:	42bd      	cmp	r5, r7
10015110:	d00a      	beq.n	10015128 <_printf_common+0xd8>
10015112:	0022      	movs	r2, r4
10015114:	2301      	movs	r3, #1
10015116:	321a      	adds	r2, #26
10015118:	9901      	ldr	r1, [sp, #4]
1001511a:	9800      	ldr	r0, [sp, #0]
1001511c:	9e08      	ldr	r6, [sp, #32]
1001511e:	47b0      	blx	r6
10015120:	1c43      	adds	r3, r0, #1
10015122:	d0de      	beq.n	100150e2 <_printf_common+0x92>
10015124:	3701      	adds	r7, #1
10015126:	e7f2      	b.n	1001510e <_printf_common+0xbe>
10015128:	2000      	movs	r0, #0
1001512a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001512c <_printf_i>:
1001512c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001512e:	b08b      	sub	sp, #44	; 0x2c
10015130:	9206      	str	r2, [sp, #24]
10015132:	000a      	movs	r2, r1
10015134:	3243      	adds	r2, #67	; 0x43
10015136:	9307      	str	r3, [sp, #28]
10015138:	9005      	str	r0, [sp, #20]
1001513a:	9204      	str	r2, [sp, #16]
1001513c:	7e0a      	ldrb	r2, [r1, #24]
1001513e:	000c      	movs	r4, r1
10015140:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015142:	2a6e      	cmp	r2, #110	; 0x6e
10015144:	d100      	bne.n	10015148 <_printf_i+0x1c>
10015146:	e0ab      	b.n	100152a0 <_printf_i+0x174>
10015148:	d811      	bhi.n	1001516e <_printf_i+0x42>
1001514a:	2a63      	cmp	r2, #99	; 0x63
1001514c:	d022      	beq.n	10015194 <_printf_i+0x68>
1001514e:	d809      	bhi.n	10015164 <_printf_i+0x38>
10015150:	2a00      	cmp	r2, #0
10015152:	d100      	bne.n	10015156 <_printf_i+0x2a>
10015154:	e0b5      	b.n	100152c2 <_printf_i+0x196>
10015156:	2a58      	cmp	r2, #88	; 0x58
10015158:	d000      	beq.n	1001515c <_printf_i+0x30>
1001515a:	e0c5      	b.n	100152e8 <_printf_i+0x1bc>
1001515c:	3145      	adds	r1, #69	; 0x45
1001515e:	700a      	strb	r2, [r1, #0]
10015160:	4a81      	ldr	r2, [pc, #516]	; (10015368 <_printf_i+0x23c>)
10015162:	e04f      	b.n	10015204 <_printf_i+0xd8>
10015164:	2a64      	cmp	r2, #100	; 0x64
10015166:	d01d      	beq.n	100151a4 <_printf_i+0x78>
10015168:	2a69      	cmp	r2, #105	; 0x69
1001516a:	d01b      	beq.n	100151a4 <_printf_i+0x78>
1001516c:	e0bc      	b.n	100152e8 <_printf_i+0x1bc>
1001516e:	2a73      	cmp	r2, #115	; 0x73
10015170:	d100      	bne.n	10015174 <_printf_i+0x48>
10015172:	e0aa      	b.n	100152ca <_printf_i+0x19e>
10015174:	d809      	bhi.n	1001518a <_printf_i+0x5e>
10015176:	2a6f      	cmp	r2, #111	; 0x6f
10015178:	d029      	beq.n	100151ce <_printf_i+0xa2>
1001517a:	2a70      	cmp	r2, #112	; 0x70
1001517c:	d000      	beq.n	10015180 <_printf_i+0x54>
1001517e:	e0b3      	b.n	100152e8 <_printf_i+0x1bc>
10015180:	2220      	movs	r2, #32
10015182:	6809      	ldr	r1, [r1, #0]
10015184:	430a      	orrs	r2, r1
10015186:	6022      	str	r2, [r4, #0]
10015188:	e037      	b.n	100151fa <_printf_i+0xce>
1001518a:	2a75      	cmp	r2, #117	; 0x75
1001518c:	d01f      	beq.n	100151ce <_printf_i+0xa2>
1001518e:	2a78      	cmp	r2, #120	; 0x78
10015190:	d033      	beq.n	100151fa <_printf_i+0xce>
10015192:	e0a9      	b.n	100152e8 <_printf_i+0x1bc>
10015194:	000e      	movs	r6, r1
10015196:	681a      	ldr	r2, [r3, #0]
10015198:	3642      	adds	r6, #66	; 0x42
1001519a:	1d11      	adds	r1, r2, #4
1001519c:	6019      	str	r1, [r3, #0]
1001519e:	6813      	ldr	r3, [r2, #0]
100151a0:	7033      	strb	r3, [r6, #0]
100151a2:	e0a4      	b.n	100152ee <_printf_i+0x1c2>
100151a4:	6821      	ldr	r1, [r4, #0]
100151a6:	681a      	ldr	r2, [r3, #0]
100151a8:	0608      	lsls	r0, r1, #24
100151aa:	d406      	bmi.n	100151ba <_printf_i+0x8e>
100151ac:	0649      	lsls	r1, r1, #25
100151ae:	d504      	bpl.n	100151ba <_printf_i+0x8e>
100151b0:	1d11      	adds	r1, r2, #4
100151b2:	6019      	str	r1, [r3, #0]
100151b4:	2300      	movs	r3, #0
100151b6:	5ed5      	ldrsh	r5, [r2, r3]
100151b8:	e002      	b.n	100151c0 <_printf_i+0x94>
100151ba:	1d11      	adds	r1, r2, #4
100151bc:	6019      	str	r1, [r3, #0]
100151be:	6815      	ldr	r5, [r2, #0]
100151c0:	2d00      	cmp	r5, #0
100151c2:	da3b      	bge.n	1001523c <_printf_i+0x110>
100151c4:	232d      	movs	r3, #45	; 0x2d
100151c6:	9a04      	ldr	r2, [sp, #16]
100151c8:	426d      	negs	r5, r5
100151ca:	7013      	strb	r3, [r2, #0]
100151cc:	e036      	b.n	1001523c <_printf_i+0x110>
100151ce:	6821      	ldr	r1, [r4, #0]
100151d0:	681a      	ldr	r2, [r3, #0]
100151d2:	0608      	lsls	r0, r1, #24
100151d4:	d406      	bmi.n	100151e4 <_printf_i+0xb8>
100151d6:	0649      	lsls	r1, r1, #25
100151d8:	d504      	bpl.n	100151e4 <_printf_i+0xb8>
100151da:	6815      	ldr	r5, [r2, #0]
100151dc:	1d11      	adds	r1, r2, #4
100151de:	6019      	str	r1, [r3, #0]
100151e0:	b2ad      	uxth	r5, r5
100151e2:	e002      	b.n	100151ea <_printf_i+0xbe>
100151e4:	1d11      	adds	r1, r2, #4
100151e6:	6019      	str	r1, [r3, #0]
100151e8:	6815      	ldr	r5, [r2, #0]
100151ea:	4b5f      	ldr	r3, [pc, #380]	; (10015368 <_printf_i+0x23c>)
100151ec:	7e22      	ldrb	r2, [r4, #24]
100151ee:	9303      	str	r3, [sp, #12]
100151f0:	2708      	movs	r7, #8
100151f2:	2a6f      	cmp	r2, #111	; 0x6f
100151f4:	d01d      	beq.n	10015232 <_printf_i+0x106>
100151f6:	270a      	movs	r7, #10
100151f8:	e01b      	b.n	10015232 <_printf_i+0x106>
100151fa:	0022      	movs	r2, r4
100151fc:	2178      	movs	r1, #120	; 0x78
100151fe:	3245      	adds	r2, #69	; 0x45
10015200:	7011      	strb	r1, [r2, #0]
10015202:	4a5a      	ldr	r2, [pc, #360]	; (1001536c <_printf_i+0x240>)
10015204:	6819      	ldr	r1, [r3, #0]
10015206:	9203      	str	r2, [sp, #12]
10015208:	1d08      	adds	r0, r1, #4
1001520a:	6822      	ldr	r2, [r4, #0]
1001520c:	6018      	str	r0, [r3, #0]
1001520e:	680d      	ldr	r5, [r1, #0]
10015210:	0610      	lsls	r0, r2, #24
10015212:	d402      	bmi.n	1001521a <_printf_i+0xee>
10015214:	0650      	lsls	r0, r2, #25
10015216:	d500      	bpl.n	1001521a <_printf_i+0xee>
10015218:	b2ad      	uxth	r5, r5
1001521a:	07d3      	lsls	r3, r2, #31
1001521c:	d502      	bpl.n	10015224 <_printf_i+0xf8>
1001521e:	2320      	movs	r3, #32
10015220:	431a      	orrs	r2, r3
10015222:	6022      	str	r2, [r4, #0]
10015224:	2710      	movs	r7, #16
10015226:	2d00      	cmp	r5, #0
10015228:	d103      	bne.n	10015232 <_printf_i+0x106>
1001522a:	2320      	movs	r3, #32
1001522c:	6822      	ldr	r2, [r4, #0]
1001522e:	439a      	bics	r2, r3
10015230:	6022      	str	r2, [r4, #0]
10015232:	0023      	movs	r3, r4
10015234:	2200      	movs	r2, #0
10015236:	3343      	adds	r3, #67	; 0x43
10015238:	701a      	strb	r2, [r3, #0]
1001523a:	e002      	b.n	10015242 <_printf_i+0x116>
1001523c:	270a      	movs	r7, #10
1001523e:	4b4a      	ldr	r3, [pc, #296]	; (10015368 <_printf_i+0x23c>)
10015240:	9303      	str	r3, [sp, #12]
10015242:	6863      	ldr	r3, [r4, #4]
10015244:	60a3      	str	r3, [r4, #8]
10015246:	2b00      	cmp	r3, #0
10015248:	db09      	blt.n	1001525e <_printf_i+0x132>
1001524a:	2204      	movs	r2, #4
1001524c:	6821      	ldr	r1, [r4, #0]
1001524e:	4391      	bics	r1, r2
10015250:	6021      	str	r1, [r4, #0]
10015252:	2d00      	cmp	r5, #0
10015254:	d105      	bne.n	10015262 <_printf_i+0x136>
10015256:	9e04      	ldr	r6, [sp, #16]
10015258:	2b00      	cmp	r3, #0
1001525a:	d011      	beq.n	10015280 <_printf_i+0x154>
1001525c:	e07b      	b.n	10015356 <_printf_i+0x22a>
1001525e:	2d00      	cmp	r5, #0
10015260:	d079      	beq.n	10015356 <_printf_i+0x22a>
10015262:	9e04      	ldr	r6, [sp, #16]
10015264:	0028      	movs	r0, r5
10015266:	0039      	movs	r1, r7
10015268:	f7fd fa70 	bl	1001274c <__aeabi_uidivmod>
1001526c:	9b03      	ldr	r3, [sp, #12]
1001526e:	3e01      	subs	r6, #1
10015270:	5c5b      	ldrb	r3, [r3, r1]
10015272:	0028      	movs	r0, r5
10015274:	7033      	strb	r3, [r6, #0]
10015276:	0039      	movs	r1, r7
10015278:	f7fd f9e2 	bl	10012640 <__aeabi_uidiv>
1001527c:	1e05      	subs	r5, r0, #0
1001527e:	d1f1      	bne.n	10015264 <_printf_i+0x138>
10015280:	2f08      	cmp	r7, #8
10015282:	d109      	bne.n	10015298 <_printf_i+0x16c>
10015284:	6823      	ldr	r3, [r4, #0]
10015286:	07db      	lsls	r3, r3, #31
10015288:	d506      	bpl.n	10015298 <_printf_i+0x16c>
1001528a:	6863      	ldr	r3, [r4, #4]
1001528c:	6922      	ldr	r2, [r4, #16]
1001528e:	4293      	cmp	r3, r2
10015290:	dc02      	bgt.n	10015298 <_printf_i+0x16c>
10015292:	2330      	movs	r3, #48	; 0x30
10015294:	3e01      	subs	r6, #1
10015296:	7033      	strb	r3, [r6, #0]
10015298:	9b04      	ldr	r3, [sp, #16]
1001529a:	1b9b      	subs	r3, r3, r6
1001529c:	6123      	str	r3, [r4, #16]
1001529e:	e02b      	b.n	100152f8 <_printf_i+0x1cc>
100152a0:	6809      	ldr	r1, [r1, #0]
100152a2:	681a      	ldr	r2, [r3, #0]
100152a4:	0608      	lsls	r0, r1, #24
100152a6:	d407      	bmi.n	100152b8 <_printf_i+0x18c>
100152a8:	0649      	lsls	r1, r1, #25
100152aa:	d505      	bpl.n	100152b8 <_printf_i+0x18c>
100152ac:	1d11      	adds	r1, r2, #4
100152ae:	6019      	str	r1, [r3, #0]
100152b0:	6813      	ldr	r3, [r2, #0]
100152b2:	8aa2      	ldrh	r2, [r4, #20]
100152b4:	801a      	strh	r2, [r3, #0]
100152b6:	e004      	b.n	100152c2 <_printf_i+0x196>
100152b8:	1d11      	adds	r1, r2, #4
100152ba:	6019      	str	r1, [r3, #0]
100152bc:	6813      	ldr	r3, [r2, #0]
100152be:	6962      	ldr	r2, [r4, #20]
100152c0:	601a      	str	r2, [r3, #0]
100152c2:	2300      	movs	r3, #0
100152c4:	9e04      	ldr	r6, [sp, #16]
100152c6:	6123      	str	r3, [r4, #16]
100152c8:	e016      	b.n	100152f8 <_printf_i+0x1cc>
100152ca:	681a      	ldr	r2, [r3, #0]
100152cc:	1d11      	adds	r1, r2, #4
100152ce:	6019      	str	r1, [r3, #0]
100152d0:	6816      	ldr	r6, [r2, #0]
100152d2:	2100      	movs	r1, #0
100152d4:	6862      	ldr	r2, [r4, #4]
100152d6:	0030      	movs	r0, r6
100152d8:	f000 f92a 	bl	10015530 <memchr>
100152dc:	2800      	cmp	r0, #0
100152de:	d001      	beq.n	100152e4 <_printf_i+0x1b8>
100152e0:	1b80      	subs	r0, r0, r6
100152e2:	6060      	str	r0, [r4, #4]
100152e4:	6863      	ldr	r3, [r4, #4]
100152e6:	e003      	b.n	100152f0 <_printf_i+0x1c4>
100152e8:	0026      	movs	r6, r4
100152ea:	3642      	adds	r6, #66	; 0x42
100152ec:	7032      	strb	r2, [r6, #0]
100152ee:	2301      	movs	r3, #1
100152f0:	6123      	str	r3, [r4, #16]
100152f2:	2300      	movs	r3, #0
100152f4:	9a04      	ldr	r2, [sp, #16]
100152f6:	7013      	strb	r3, [r2, #0]
100152f8:	9b07      	ldr	r3, [sp, #28]
100152fa:	aa09      	add	r2, sp, #36	; 0x24
100152fc:	9300      	str	r3, [sp, #0]
100152fe:	0021      	movs	r1, r4
10015300:	9b06      	ldr	r3, [sp, #24]
10015302:	9805      	ldr	r0, [sp, #20]
10015304:	f7ff fea4 	bl	10015050 <_printf_common>
10015308:	1c43      	adds	r3, r0, #1
1001530a:	d102      	bne.n	10015312 <_printf_i+0x1e6>
1001530c:	2001      	movs	r0, #1
1001530e:	4240      	negs	r0, r0
10015310:	e027      	b.n	10015362 <_printf_i+0x236>
10015312:	6923      	ldr	r3, [r4, #16]
10015314:	0032      	movs	r2, r6
10015316:	9906      	ldr	r1, [sp, #24]
10015318:	9805      	ldr	r0, [sp, #20]
1001531a:	9d07      	ldr	r5, [sp, #28]
1001531c:	47a8      	blx	r5
1001531e:	1c43      	adds	r3, r0, #1
10015320:	d0f4      	beq.n	1001530c <_printf_i+0x1e0>
10015322:	6823      	ldr	r3, [r4, #0]
10015324:	2500      	movs	r5, #0
10015326:	079b      	lsls	r3, r3, #30
10015328:	d40f      	bmi.n	1001534a <_printf_i+0x21e>
1001532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001532c:	68e0      	ldr	r0, [r4, #12]
1001532e:	4298      	cmp	r0, r3
10015330:	da17      	bge.n	10015362 <_printf_i+0x236>
10015332:	0018      	movs	r0, r3
10015334:	e015      	b.n	10015362 <_printf_i+0x236>
10015336:	0022      	movs	r2, r4
10015338:	2301      	movs	r3, #1
1001533a:	3219      	adds	r2, #25
1001533c:	9906      	ldr	r1, [sp, #24]
1001533e:	9805      	ldr	r0, [sp, #20]
10015340:	9e07      	ldr	r6, [sp, #28]
10015342:	47b0      	blx	r6
10015344:	1c43      	adds	r3, r0, #1
10015346:	d0e1      	beq.n	1001530c <_printf_i+0x1e0>
10015348:	3501      	adds	r5, #1
1001534a:	68e3      	ldr	r3, [r4, #12]
1001534c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001534e:	1a9b      	subs	r3, r3, r2
10015350:	429d      	cmp	r5, r3
10015352:	dbf0      	blt.n	10015336 <_printf_i+0x20a>
10015354:	e7e9      	b.n	1001532a <_printf_i+0x1fe>
10015356:	0026      	movs	r6, r4
10015358:	9b03      	ldr	r3, [sp, #12]
1001535a:	3642      	adds	r6, #66	; 0x42
1001535c:	781b      	ldrb	r3, [r3, #0]
1001535e:	7033      	strb	r3, [r6, #0]
10015360:	e78e      	b.n	10015280 <_printf_i+0x154>
10015362:	b00b      	add	sp, #44	; 0x2c
10015364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015366:	46c0      	nop			; (mov r8, r8)
10015368:	10016c2d 	.word	0x10016c2d
1001536c:	10016c3e 	.word	0x10016c3e

10015370 <_putc_r>:
10015370:	b570      	push	{r4, r5, r6, lr}
10015372:	0006      	movs	r6, r0
10015374:	000d      	movs	r5, r1
10015376:	0014      	movs	r4, r2
10015378:	2800      	cmp	r0, #0
1001537a:	d004      	beq.n	10015386 <_putc_r+0x16>
1001537c:	6983      	ldr	r3, [r0, #24]
1001537e:	2b00      	cmp	r3, #0
10015380:	d101      	bne.n	10015386 <_putc_r+0x16>
10015382:	f7ff fc29 	bl	10014bd8 <__sinit>
10015386:	4b12      	ldr	r3, [pc, #72]	; (100153d0 <_putc_r+0x60>)
10015388:	429c      	cmp	r4, r3
1001538a:	d101      	bne.n	10015390 <_putc_r+0x20>
1001538c:	6874      	ldr	r4, [r6, #4]
1001538e:	e008      	b.n	100153a2 <_putc_r+0x32>
10015390:	4b10      	ldr	r3, [pc, #64]	; (100153d4 <_putc_r+0x64>)
10015392:	429c      	cmp	r4, r3
10015394:	d101      	bne.n	1001539a <_putc_r+0x2a>
10015396:	68b4      	ldr	r4, [r6, #8]
10015398:	e003      	b.n	100153a2 <_putc_r+0x32>
1001539a:	4b0f      	ldr	r3, [pc, #60]	; (100153d8 <_putc_r+0x68>)
1001539c:	429c      	cmp	r4, r3
1001539e:	d100      	bne.n	100153a2 <_putc_r+0x32>
100153a0:	68f4      	ldr	r4, [r6, #12]
100153a2:	68a3      	ldr	r3, [r4, #8]
100153a4:	3b01      	subs	r3, #1
100153a6:	60a3      	str	r3, [r4, #8]
100153a8:	2b00      	cmp	r3, #0
100153aa:	da05      	bge.n	100153b8 <_putc_r+0x48>
100153ac:	69a2      	ldr	r2, [r4, #24]
100153ae:	4293      	cmp	r3, r2
100153b0:	db08      	blt.n	100153c4 <_putc_r+0x54>
100153b2:	b2eb      	uxtb	r3, r5
100153b4:	2b0a      	cmp	r3, #10
100153b6:	d005      	beq.n	100153c4 <_putc_r+0x54>
100153b8:	6823      	ldr	r3, [r4, #0]
100153ba:	b2e8      	uxtb	r0, r5
100153bc:	1c5a      	adds	r2, r3, #1
100153be:	6022      	str	r2, [r4, #0]
100153c0:	701d      	strb	r5, [r3, #0]
100153c2:	e004      	b.n	100153ce <_putc_r+0x5e>
100153c4:	0022      	movs	r2, r4
100153c6:	0029      	movs	r1, r5
100153c8:	0030      	movs	r0, r6
100153ca:	f7ff fa43 	bl	10014854 <__swbuf_r>
100153ce:	bd70      	pop	{r4, r5, r6, pc}
100153d0:	10016bbc 	.word	0x10016bbc
100153d4:	10016bdc 	.word	0x10016bdc
100153d8:	10016bfc 	.word	0x10016bfc

100153dc <__sread>:
100153dc:	b570      	push	{r4, r5, r6, lr}
100153de:	000c      	movs	r4, r1
100153e0:	250e      	movs	r5, #14
100153e2:	5f49      	ldrsh	r1, [r1, r5]
100153e4:	f000 f8b0 	bl	10015548 <_read_r>
100153e8:	2800      	cmp	r0, #0
100153ea:	db03      	blt.n	100153f4 <__sread+0x18>
100153ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
100153ee:	181b      	adds	r3, r3, r0
100153f0:	6563      	str	r3, [r4, #84]	; 0x54
100153f2:	e003      	b.n	100153fc <__sread+0x20>
100153f4:	89a2      	ldrh	r2, [r4, #12]
100153f6:	4b02      	ldr	r3, [pc, #8]	; (10015400 <__sread+0x24>)
100153f8:	4013      	ands	r3, r2
100153fa:	81a3      	strh	r3, [r4, #12]
100153fc:	bd70      	pop	{r4, r5, r6, pc}
100153fe:	46c0      	nop			; (mov r8, r8)
10015400:	ffffefff 	.word	0xffffefff

10015404 <__swrite>:
10015404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015406:	001f      	movs	r7, r3
10015408:	898b      	ldrh	r3, [r1, #12]
1001540a:	0005      	movs	r5, r0
1001540c:	000c      	movs	r4, r1
1001540e:	0016      	movs	r6, r2
10015410:	05db      	lsls	r3, r3, #23
10015412:	d505      	bpl.n	10015420 <__swrite+0x1c>
10015414:	230e      	movs	r3, #14
10015416:	5ec9      	ldrsh	r1, [r1, r3]
10015418:	2200      	movs	r2, #0
1001541a:	2302      	movs	r3, #2
1001541c:	f000 f874 	bl	10015508 <_lseek_r>
10015420:	89a2      	ldrh	r2, [r4, #12]
10015422:	4b05      	ldr	r3, [pc, #20]	; (10015438 <__swrite+0x34>)
10015424:	0028      	movs	r0, r5
10015426:	4013      	ands	r3, r2
10015428:	81a3      	strh	r3, [r4, #12]
1001542a:	0032      	movs	r2, r6
1001542c:	230e      	movs	r3, #14
1001542e:	5ee1      	ldrsh	r1, [r4, r3]
10015430:	003b      	movs	r3, r7
10015432:	f000 f81f 	bl	10015474 <_write_r>
10015436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015438:	ffffefff 	.word	0xffffefff

1001543c <__sseek>:
1001543c:	b570      	push	{r4, r5, r6, lr}
1001543e:	000c      	movs	r4, r1
10015440:	250e      	movs	r5, #14
10015442:	5f49      	ldrsh	r1, [r1, r5]
10015444:	f000 f860 	bl	10015508 <_lseek_r>
10015448:	89a3      	ldrh	r3, [r4, #12]
1001544a:	1c42      	adds	r2, r0, #1
1001544c:	d103      	bne.n	10015456 <__sseek+0x1a>
1001544e:	4a05      	ldr	r2, [pc, #20]	; (10015464 <__sseek+0x28>)
10015450:	4013      	ands	r3, r2
10015452:	81a3      	strh	r3, [r4, #12]
10015454:	e004      	b.n	10015460 <__sseek+0x24>
10015456:	2280      	movs	r2, #128	; 0x80
10015458:	0152      	lsls	r2, r2, #5
1001545a:	4313      	orrs	r3, r2
1001545c:	81a3      	strh	r3, [r4, #12]
1001545e:	6560      	str	r0, [r4, #84]	; 0x54
10015460:	bd70      	pop	{r4, r5, r6, pc}
10015462:	46c0      	nop			; (mov r8, r8)
10015464:	ffffefff 	.word	0xffffefff

10015468 <__sclose>:
10015468:	b510      	push	{r4, lr}
1001546a:	230e      	movs	r3, #14
1001546c:	5ec9      	ldrsh	r1, [r1, r3]
1001546e:	f000 f815 	bl	1001549c <_close_r>
10015472:	bd10      	pop	{r4, pc}

10015474 <_write_r>:
10015474:	b570      	push	{r4, r5, r6, lr}
10015476:	0005      	movs	r5, r0
10015478:	0008      	movs	r0, r1
1001547a:	0011      	movs	r1, r2
1001547c:	2200      	movs	r2, #0
1001547e:	4c06      	ldr	r4, [pc, #24]	; (10015498 <_write_r+0x24>)
10015480:	6022      	str	r2, [r4, #0]
10015482:	001a      	movs	r2, r3
10015484:	f7f7 fe78 	bl	1000d178 <_write>
10015488:	1c43      	adds	r3, r0, #1
1001548a:	d103      	bne.n	10015494 <_write_r+0x20>
1001548c:	6823      	ldr	r3, [r4, #0]
1001548e:	2b00      	cmp	r3, #0
10015490:	d000      	beq.n	10015494 <_write_r+0x20>
10015492:	602b      	str	r3, [r5, #0]
10015494:	bd70      	pop	{r4, r5, r6, pc}
10015496:	46c0      	nop			; (mov r8, r8)
10015498:	10019bc0 	.word	0x10019bc0

1001549c <_close_r>:
1001549c:	2300      	movs	r3, #0
1001549e:	b570      	push	{r4, r5, r6, lr}
100154a0:	4c06      	ldr	r4, [pc, #24]	; (100154bc <_close_r+0x20>)
100154a2:	0005      	movs	r5, r0
100154a4:	0008      	movs	r0, r1
100154a6:	6023      	str	r3, [r4, #0]
100154a8:	f7f2 fffe 	bl	100084a8 <_close>
100154ac:	1c43      	adds	r3, r0, #1
100154ae:	d103      	bne.n	100154b8 <_close_r+0x1c>
100154b0:	6823      	ldr	r3, [r4, #0]
100154b2:	2b00      	cmp	r3, #0
100154b4:	d000      	beq.n	100154b8 <_close_r+0x1c>
100154b6:	602b      	str	r3, [r5, #0]
100154b8:	bd70      	pop	{r4, r5, r6, pc}
100154ba:	46c0      	nop			; (mov r8, r8)
100154bc:	10019bc0 	.word	0x10019bc0

100154c0 <_fstat_r>:
100154c0:	2300      	movs	r3, #0
100154c2:	b570      	push	{r4, r5, r6, lr}
100154c4:	4c06      	ldr	r4, [pc, #24]	; (100154e0 <_fstat_r+0x20>)
100154c6:	0005      	movs	r5, r0
100154c8:	0008      	movs	r0, r1
100154ca:	0011      	movs	r1, r2
100154cc:	6023      	str	r3, [r4, #0]
100154ce:	f7f2 ffef 	bl	100084b0 <_fstat>
100154d2:	1c43      	adds	r3, r0, #1
100154d4:	d103      	bne.n	100154de <_fstat_r+0x1e>
100154d6:	6823      	ldr	r3, [r4, #0]
100154d8:	2b00      	cmp	r3, #0
100154da:	d000      	beq.n	100154de <_fstat_r+0x1e>
100154dc:	602b      	str	r3, [r5, #0]
100154de:	bd70      	pop	{r4, r5, r6, pc}
100154e0:	10019bc0 	.word	0x10019bc0

100154e4 <_isatty_r>:
100154e4:	2300      	movs	r3, #0
100154e6:	b570      	push	{r4, r5, r6, lr}
100154e8:	4c06      	ldr	r4, [pc, #24]	; (10015504 <_isatty_r+0x20>)
100154ea:	0005      	movs	r5, r0
100154ec:	0008      	movs	r0, r1
100154ee:	6023      	str	r3, [r4, #0]
100154f0:	f7f2 ffe4 	bl	100084bc <_isatty>
100154f4:	1c43      	adds	r3, r0, #1
100154f6:	d103      	bne.n	10015500 <_isatty_r+0x1c>
100154f8:	6823      	ldr	r3, [r4, #0]
100154fa:	2b00      	cmp	r3, #0
100154fc:	d000      	beq.n	10015500 <_isatty_r+0x1c>
100154fe:	602b      	str	r3, [r5, #0]
10015500:	bd70      	pop	{r4, r5, r6, pc}
10015502:	46c0      	nop			; (mov r8, r8)
10015504:	10019bc0 	.word	0x10019bc0

10015508 <_lseek_r>:
10015508:	b570      	push	{r4, r5, r6, lr}
1001550a:	0005      	movs	r5, r0
1001550c:	0008      	movs	r0, r1
1001550e:	0011      	movs	r1, r2
10015510:	2200      	movs	r2, #0
10015512:	4c06      	ldr	r4, [pc, #24]	; (1001552c <_lseek_r+0x24>)
10015514:	6022      	str	r2, [r4, #0]
10015516:	001a      	movs	r2, r3
10015518:	f7f2 ffd2 	bl	100084c0 <_lseek>
1001551c:	1c43      	adds	r3, r0, #1
1001551e:	d103      	bne.n	10015528 <_lseek_r+0x20>
10015520:	6823      	ldr	r3, [r4, #0]
10015522:	2b00      	cmp	r3, #0
10015524:	d000      	beq.n	10015528 <_lseek_r+0x20>
10015526:	602b      	str	r3, [r5, #0]
10015528:	bd70      	pop	{r4, r5, r6, pc}
1001552a:	46c0      	nop			; (mov r8, r8)
1001552c:	10019bc0 	.word	0x10019bc0

10015530 <memchr>:
10015530:	b2c9      	uxtb	r1, r1
10015532:	1882      	adds	r2, r0, r2
10015534:	4290      	cmp	r0, r2
10015536:	d004      	beq.n	10015542 <memchr+0x12>
10015538:	7803      	ldrb	r3, [r0, #0]
1001553a:	428b      	cmp	r3, r1
1001553c:	d002      	beq.n	10015544 <memchr+0x14>
1001553e:	3001      	adds	r0, #1
10015540:	e7f8      	b.n	10015534 <memchr+0x4>
10015542:	2000      	movs	r0, #0
10015544:	4770      	bx	lr
	...

10015548 <_read_r>:
10015548:	b570      	push	{r4, r5, r6, lr}
1001554a:	0005      	movs	r5, r0
1001554c:	0008      	movs	r0, r1
1001554e:	0011      	movs	r1, r2
10015550:	2200      	movs	r2, #0
10015552:	4c06      	ldr	r4, [pc, #24]	; (1001556c <_read_r+0x24>)
10015554:	6022      	str	r2, [r4, #0]
10015556:	001a      	movs	r2, r3
10015558:	f7f7 fdee 	bl	1000d138 <_read>
1001555c:	1c43      	adds	r3, r0, #1
1001555e:	d103      	bne.n	10015568 <_read_r+0x20>
10015560:	6823      	ldr	r3, [r4, #0]
10015562:	2b00      	cmp	r3, #0
10015564:	d000      	beq.n	10015568 <_read_r+0x20>
10015566:	602b      	str	r3, [r5, #0]
10015568:	bd70      	pop	{r4, r5, r6, pc}
1001556a:	46c0      	nop			; (mov r8, r8)
1001556c:	10019bc0 	.word	0x10019bc0
10015570:	00000d0a 	.word	0x00000d0a
10015574:	000003e8 	.word	0x000003e8

10015578 <test>:
10015578:	00000083 00004000 00000200 00c800c8     .....@..........
10015588:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10015598:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100155a8:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
100155b8:	5220706f 73646165 00000000 706d6153     op Reads....Samp
100155c8:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100155d8:	666f206c 74657366 74616420 57482061     l offset data HW
100155e8:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100155f8:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10015608:	6f727947 66666f20 20746573 61746164     Gyro offset data
10015618:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10015628:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10015638:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10015648:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10015658:	6e756f66 00002e64 72617453 676e6974     found...Starting
10015668:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10015678:	72746552 69766569 4220676e 65736169     Retrieving Biase
10015688:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10015698:	65736169 72452073 20726f72 6f70202d     iases Error - po
100156a8:	62697373 4920656c 65204332 726f7272     ssible I2C error
100156b8:	00000000 72746552 69766569 5320676e     ....Retrieving S
100156c8:	69422054 73657361 00000000 72746552     T Biases....Retr
100156d8:	69766569 5320676e 69422054 73657361     ieving ST Biases
100156e8:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100156f8:	32492065 72652043 00726f72 64616552     e I2C error.Read
10015708:	20676e69 2050544f 69676552 72657473     ing OTP Register
10015718:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10015728:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10015738:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10015748:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10015758:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10015768:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10015778:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10015788:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10015798:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100157a8:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100157b8:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100157c8:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100157d8:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100157e8:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100157f8:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10015808:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10015818:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10015828:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10015838:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10015848:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10015858:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10015868:	6c207361 20737365 6e616874 2e372520     as less than %7.
10015878:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10015888:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10015898:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100158a8:	6553206c 5420666c 20747365 75736552     l Self Test Resu
100158b8:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
100158c8:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
100158d8:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100158e8:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100158f8:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10015908:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10015918:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10015928:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10015938:	253a7369 72672064 65746165 68742072     is:%d greater th
10015948:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10015958:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10015968:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10015978:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10015988:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10015998:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100159a8:	65542066 52207473 6c757365 203a7374     f Test Results: 
100159b8:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
100159c8:	73655420 65522074 746c7573 25203a73      Test Results: %
100159d8:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
100159e8:	00000000                                ....

100159ec <hw>:
100159ec:	04000069 01410080 01000000 00001333     i.....A.....3...

100159fc <reg>:
100159fc:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10015a0c:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10015a1c:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10015a2c:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10015a3c:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10015a4c:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10015a5c:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10015a6c:	b691a38b 00dab4da 6e6f6420 00002165     ........ done!..
10015a7c:	3a4f2f54 46464f20 00000000 736d735b     T/O: OFF....[sms
10015a8c:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10015a9c:	00000000 3a4f2f54 30303520 736d2030     ....T/O: 5000 ms
10015aac:	00000000 736d735b 656c625f 6961705f     ....[sms_ble_pai
10015abc:	5f646572 005d6e66 6c696146 74206465     red_fn].Failed t
10015acc:	6e69206f 61697469 657a696c 55504d20     o initialize MPU
10015adc:	00000000 2055504d 74696e69 696c6169     ....MPU initiali
10015aec:	0064657a 736d735b 656c625f 7664615f     zed.[sms_ble_adv
10015afc:	69747265 095d6573 65766441 73697472     ertise].Advertis
10015b0c:	6e656d65 61642074 73206174 66207465     ement data set f
10015b1c:	656c6961 00002164 736d735b 7265735f     ailed!..[sms_ser
10015b2c:	65636976 7664615f 69747265 095d6573     vice_advertise].
10015b3c:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10015b4c:	74732074 20747261 6c696166 203a6465     t start failed: 
10015b5c:	73616572 30206e6f 00782578 20642520     reason 0x%x. %d 
10015b6c:	454e4f47 0000203f 3a4f2f54 6d303220     GONE? ..T/O: 20m
10015b7c:	00000073 49544f4e 41434946 4e4f4954     s...NOTIFICATION
10015b8c:	52524520 2121524f 00000000               ERROR!!....

10015b98 <sms_ble_gap_cb>:
	...
10015ba4:	10009cf9 00000000 10009d11 10009e75     ............u...
	...
10015bbc:	10009d65 10009b61 00000000 00000000     e...a...........
	...

10015be4 <sms_ble_gatt_server_cb>:
10015be4:	10009b7d 10009bf1 00000000 00000000     }...............
	...
10015c0c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015c1c:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10015c2c:	656c6968 74657320 676e6974 20707520     hile setting up 
10015c3c:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10015c4c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10015c5c:	6c626f72 77206d65 656c6968 74657320     roblem while set
10015c6c:	676e6974 20707520 74747562 00316e6f     ting up button1.
10015c7c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015c8c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10015c9c:	656c6968 74657320 676e6974 20707520     hile setting up 
10015cac:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10015cbc:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10015ccc:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10015cdc:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10015cec:	736d735b 7475625f 5f6e6f74 69666564     [sms_button_defi
10015cfc:	735f656e 69767265 5d736563 72655309     ne_services].Ser
10015d0c:	65636976 65642073 696e6966 6620676e     vices defining f
10015d1c:	656c6961 72202c64 6f736165 7830206e     ailed, reason 0x
10015d2c:	00007825 626f7250 206d656c 6c696877     %x..Problem whil
10015d3c:	65732065 6e697474 70672067 70206f69     e setting gpio p
10015d4c:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10015d5c:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10015d6c:	6d656c62 69687720 7320656c 69747465     blem while setti
10015d7c:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10015d8c:	00006e69 736d735b 75706d5f 6665645f     in..[sms_mpu_def
10015d9c:	5f656e69 76726573 73656369 6553095d     ine_services].Se
10015dac:	63697672 64207365 6e696665 20676e69     rvices defining 
10015dbc:	6c696166 202c6465 73616572 30206e6f     failed, reason 0
10015dcc:	00782578 736d735b 6572705f 72757373     x%x.[sms_pressur
10015ddc:	65645f65 656e6966 7265735f 65636976     e_define_service
10015dec:	53095d73 69767265 20736563 69666564     s].Services defi
10015dfc:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10015e0c:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10015e1c:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
10015e2c:	43090909 646c756f 2074276e 74696e69     ...Couldn't init
10015e3c:	696c6169 4d20657a 00005550 736d735b     ialize MPU..[sms
10015e4c:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
10015e5c:	49090909 2074696e 656e6f64 00000021     ...Init done!...
10015e6c:	736d735b 6e65735f 73726f73 6977735f     [sms_sensors_swi
10015e7c:	5d686374 4d090909 6e205550 6520746f     tch]...MPU not e
10015e8c:	6c62616e 00006465 736d735b 6e65735f     nabled..[sms_sen
10015e9c:	73726f73 6977735f 5d686374 45090909     sors_switch]...E
10015eac:	6c62616e 20676e69 73657270 65727573     nabling pressure
10015ebc:	00000000 736d735b 6e65735f 73726f73     ....[sms_sensors
10015ecc:	6977735f 5d686374 50090909 73736572     _switch]...Press
10015edc:	20657275 20746f6e 62616e65 0064656c     ure not enabled.
10015eec:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10015efc:	005d6e66 736d735b 6175645f 6d69746c     fn].[sms_dualtim
10015f0c:	5f327265 005d6e66 1000c158 1000c166     er2_fn].X...f...
10015f1c:	1000c174 1000c182 1000c190 1000c19e     t...............
10015f2c:	1000c1ac 1000c1bc 1000c1cc 1000c1dc     ................
10015f3c:	1000c1ec 1000c1fc 1000c20c 1000c21c     ................
10015f4c:	1000c22c 1000c23c 1000c24c 1000c25c     ,...<...L...\...
10015f5c:	1000c26c 1000c27c 1000c28c 1000c29c     l...|...........
10015f6c:	1000c2ac 1000c2bc 1000c2cc 1000c2dc     ................
10015f7c:	1000c2ec 1000c2fc 1000c30a 1000c318     ................
10015f8c:	1000c326 1000c334 1000c342 1000c350     &...4...B...P...
10015f9c:	1000c35e 1000c36c 1000c37c 1000c38c     ^...l...|.......
10015fac:	1000c39c 1000c3ac 1000c3bc 1000c3cc     ................
10015fbc:	1000c3dc 1000c3ec 1000c3fc 1000c40c     ................
10015fcc:	1000c41c 1000c42c 1000c43c 1000c44c     ....,...<...L...
10015fdc:	1000c45c 1000c46c 1000c47a 1000c488     \...l...z.......
10015fec:	1000c4b4 1000c4c2 1000c4d0 1000c4de     ................
10015ffc:	1000c4ec 1000c4fa 1000c508 1000c516     ................
1001600c:	1000c524 1000c532 1000c540 1000c54e     $...2...@...N...
1001601c:	1000c55c 1000c56a 1000c578 1000c586     \...j...x.......
1001602c:	1000c594 1000c5a2 1000c5b0 1000c5be     ................
1001603c:	1000c5cc 1000c5da 1000c5e8 1000c5f6     ................
1001604c:	1000c604 1000c612 1000c620 1000c62e     ........ .......
1001605c:	1000c63c 1000c64a 1000c658 1000c666     <...J...X...f...
1001606c:	1000c674 1000c682 1000c690 1000c69e     t...............
1001607c:	1000c6ac 1000c6ba 1000c6c8 1000c6d6     ................
1001608c:	1000c6e4 1000c6f2 1000c700 1000c70e     ................
1001609c:	1000c71c 1000c72a 1000c738 1000c746     ....*...8...F...
100160ac:	1000c754 1000c762 1000c770 1000c77e     T...b...p...~...
100160bc:	1000c78c 1000c79a 1000c834 1000c85c     ........4...\...
100160cc:	1000c884 1000c8ac 1000caec 1000c8dc     ................
100160dc:	1000c8f4 1000c96c 1000c984 1000c90c     ....l...........
100160ec:	1000c924 1000c93c 1000c954 1000c99c     $...<...T.......
100160fc:	1000cc60 1000cc60 1000cc60 1000cc60     `...`...`...`...
1001610c:	1000cc60 1000cc60 1000cc60 1000cc60     `...`...`...`...
1001611c:	1000ca44 1000ca5c 1000ca74 1000cb02     D...\...t.......
1001612c:	1000c9cc 1000cc60 1000cc60 1000cc60     ....`...`...`...
1001613c:	1000cc60 1000cc60 1000cc60 1000ca8c     `...`...`.......
1001614c:	1000caa4 1000cabc 1000cad4 1000cc60     ............`...
1001615c:	1000cc18 1000cc30 1000cc60 1000cc60     ....0...`...`...
1001616c:	1000cb2e 1000cb44 1000cb5a 1000cb70     ....D...Z...p...
1001617c:	1000cc60 1000cc60 1000cc60 1000cc60     `...`...`...`...
1001618c:	1000cc60 1000cc60 1000cc60 1000cc60     `...`...`...`...
1001619c:	1000c820 1000c848 1000c870 1000c898      ...H...p.......
100161ac:	1000c8c4 1000c9b4 1000c9e4 1000c9fc     ................
100161bc:	1000ca14 1000ca2c 1000cb18 1000cb86     ....,...........
100161cc:	1000cc00 1000cc48 1000d2b0 1000d2b2     ....H...........
100161dc:	1000d298 1000d298 1000d298 1000d2b0     ................
100161ec:	1000d298 1000d298 1000daf6 1000db6a     ............j...
100161fc:	1000dade 1000db70 1000dae4 1000daea     ....p...........
1001620c:	1000daf0 1000e190 1000e190 1000e190     ................
1001621c:	1000e190 1000e190 1000e190 1000e190     ................
1001622c:	1000e190 1000e190 1000e190 1000e190     ................
1001623c:	1000e190 1000e190 1000e190 1000e190     ................
1001624c:	1000e190 1000e190 1000e190 1000e190     ................
1001625c:	1000e1ae 1000e1ae 1000e1ae 1000e1ae     ................
1001626c:	1000e1ae 1000e1ae 1000e1ae 1000e1ae     ................
1001627c:	1000e1ae 1000e1ae 1000e1d0 1000e1d0     ................
1001628c:	1000e1d0 1000e1d0 1000e1d0 1000e1d0     ................
1001629c:	1000e1d0 1000e1d0 1000e1d0 1000e1d0     ................
100162ac:	1000e1f2 1000e1f2 1000e1f2 1000e1f2     ................
100162bc:	1000e1f2 1000e1f2 1000e20c 1000e20c     ................
100162cc:	1000e20c 1000e20c 1000e20c 1000e20c     ................
100162dc:	1000e20c 1000e20c 1000e20c 1000e226     ............&...
100162ec:	1000e226 1000e248 1000e248 1000e262     &...H...H...b...
100162fc:	1000e248 34333231 00003635 efcdab00     H...123456......
1001630c:	00efcdab                                ....

10016310 <ble_mgr_gatt_server_handle>:
	...
10016328:	1000d1cd 1000d231 1000d1d1 00000000     ....1...........
10016338:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10016348:	00000000 65766441 73697472 20676e69     ....Advertising 
10016358:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10016368:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10016378:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10016388:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10016398:	69766544 64206563 6f637369 63656e6e     Device disconnec
100163a8:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100163b8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100163c8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100163d8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100163e8:	6c706d6f 64657465 63757320 73736563     ompleted success
100163f8:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10016408:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10016418:	74707972 206e6f69 6f666e69 00000000     ryption info....
10016428:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10016438:	7320666f 206e6163 69766564 72206563     of scan device r
10016448:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10016458:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10016468:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10016478:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10016488:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10016498:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100164a8:	46207473 656c6961 00000064 72696150     st Failed...Pair
100164b8:	20676e69 636f7270 72756465 6f632065     ing procedure co
100164c8:	656c706d 20646574 63637573 66737365     mpleted successf
100164d8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100164e8:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100164f8:	726f7473 68742065 61702065 6e697269     store the pairin
10016508:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10016518:	4e206e6f 7320746f 74726174 00006465     on Not started..
10016528:	76616c53 65532065 69727563 52207974     Slave Security R
10016538:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10016548:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10016558:	71655220 74736575 41202d20 65687475      Request - Authe
10016568:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10016578:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10016588:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10016598:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100165a8:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100165b8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100165c8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100165d8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100165e8:	206e6f28 6568746f 65442072 65636976     (on other Device
100165f8:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10016608:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10016618:	74616546 20657275 20746f4e 70707573     Feature Not supp
10016628:	6574726f 00000064 65746e45 20646572     orted...Entered 
10016638:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10016648:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10016658:	7020666f 20726565 69766564 69206563     of peer device i
10016668:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10016678:	00000000 61656c50 75206573 6961706e     ....Please unpai
10016688:	68742072 65642065 65636976 6f726620     r the device fro
10016698:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100166a8:	656c6962 65732029 6e697474 6d207367     bile) settings m
100166b8:	20756e65 20646e61 72617473 61702074     enu and start pa
100166c8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100166d8:	69747079 52206e6f 65757165 52207473     yption Request R
100166e8:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
100166f8:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10016708:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10016718:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10016728:	09095d74 61656c50 63206573 6b636568     t]..Please check
10016738:	65687420 776f7020 61207265 6320646e      the power and c
10016748:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10016758:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10016768:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10016778:	6e206563 20656d61 20746573 6c696166     ce name set fail
10016788:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
10016798:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100167a8:	73736572 74656720 69616620 0064656c     ress get failed.
100167b8:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100167c8:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100167d8:	20656369 666e6f63 72756769 6f697461     ice configuratio
100167e8:	6166206e 64656c69 00000000 656c625b     n failed....[ble
100167f8:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016808:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10016818:	72646441 20737365 6c696166 00006465     Address failed..
10016828:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10016838:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10016848:	65732065 69727563 72207974 65757165     e security reque
10016858:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10016868:	65746365 6f742064 65657020 65642072     ected to peer de
10016878:	65636976 74697720 64612068 73657264     vice with addres
10016888:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10016898:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100168a8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100168b8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100168c8:	61522067 6d6f646e 64646120 73736572     g Random address
100168d8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
100168e8:	626d756e 6f207265 6f632066 63656e6e     number of connec
100168f8:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10016908:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10016918:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10016928:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10016938:	53202d20 75746174 25203a73 00000064      - Status: %d...
10016948:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10016958:	73697472 6e656d65 61642074 73206174     rtisement data s
10016968:	66207465 656c6961 00000064              et failed...

10016974 <ble_mgr_gap_handle>:
10016974:	1000d1c9 1000d3ad 1000d1e1 1000d209     ................
10016984:	00000000 1000de59 1000d261 1000d1dd     ....Y...a.......
10016994:	1000d54d 1000d42d 1000d74d 1000d565     M...-...M...e...
100169a4:	1000d89d 1000d9e1 1000d2e9 1000e095     ................
	...
100169c0:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
100169d0:	316e7442 746e6920 202e2e2e 00000000     Btn1 int... ....
100169e0:	73657250 6e692073 25282074 2e2e2964     Press int (%d)..
100169f0:	0000202e 656d6954 69203172 2e2e746e     . ..Timer1 int..
10016a00:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10016a10:	0000202e 2055504d 646e6573 20676e69     . ..MPU sending 
10016a20:	2f642528 2e296425 00202e2e 73756c66     (%d/%d)... .flus
10016a30:	676e6968 00000021 73657250 65732073     hing!...Press se
10016a40:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10016a50:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10016a60:	6e657645 65672074 69742074 756f656d     Event get timeou
10016a70:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
10016a80:	72727563 00006465 656d7441 6f43206c     curred..Atmel Co
10016a90:	022e7072                                         rp.

10016a93 <CSWTCH.45>:
10016a93:	00100402                                         ...

10016a96 <CSWTCH.47>:
10016a96:	03010300 03030303 03030303 02020303              ...............

10016aa5 <client_conf_uuid>:
10016aa5:	29042902                                         .)

10016aa7 <presentation_format_uuid>:
10016aa7:	29012904                                         .)

10016aa9 <user_desc_uuid>:
10016aa9:	29032901                                         .)

10016aab <server_conf_uuid>:
10016aab:	29002903                                         .)

10016aad <extended_props_uuid>:
10016aad:	28022900                                         .)

10016aaf <include_uuid>:
10016aaf:	28032802                                         .(

10016ab1 <char_uuid>:
10016ab1:	32002803 5610012c 1410012b ec10012c     .(.2,..V+...,...
10016ac1:	1410012b e010012c 1410012b ec10012c     +...,...+...,...
10016ad1:	5610012b 5610012b e010012b ec10012b     +..V+..V+...+...
10016ae1:	9810012b 9810012c 9810012c 1a10012c     +...,...,...,...
10016af1:	5610012c 5610012b 0010012b ea10012c     ,..V+..V+...,...
10016b01:	0010012b e010012c 0010012b ea10012c     +...,...+...,...
10016b11:	5610012b 5610012b e010012b ea10012b     +..V+..V+...+...
10016b21:	9810012b 9810012c 9810012c a410012c     +...,...,...,...
10016b31:	9010012c ee10012f ee10012e ec10012e     ,.../...........
10016b41:	8210012e 8210012f 7810012f ec10012f     ..../.../..x/...
10016b51:	8210012e 7810012f 8210012f ec10012f     ..../..x/.../...
10016b61:	8810012e 8810012f 8810012f 1210012f     ..../.../.../...
10016b71:	74100130 34100138 34100137 32100137     0..t8..47..47..2
10016b81:	4c100137 4c100138 3e100138 32100138     7..L8..L8..>8..2
10016b91:	4c100137 3e100138 4c100138 32100138     7..L8..>8..L8..2
10016ba1:	54100137 54100138 54100138 54100138     7..T8..T8..T8..T
10016bb1:	4310013a b8000000                                :..C...

10016bb8 <_global_impure_ptr>:
10016bb8:	10016cb8                                .l..

10016bbc <__sf_fake_stdin>:
	...

10016bdc <__sf_fake_stdout>:
	...

10016bfc <__sf_fake_stderr>:
	...
10016c1c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10016c2c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10016c3c:	31300046 35343332 39383736 64636261     F.0123456789abcd
10016c4c:	00006665                                ef..

10016c50 <_init>:
10016c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016c52:	46c0      	nop			; (mov r8, r8)
10016c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016c56:	bc08      	pop	{r3}
10016c58:	469e      	mov	lr, r3
10016c5a:	4770      	bx	lr

10016c5c <__init_array_start>:
10016c5c:	100080b1 	.word	0x100080b1

10016c60 <_fini>:
10016c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016c62:	46c0      	nop			; (mov r8, r8)
10016c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
10016c66:	bc08      	pop	{r3}
10016c68:	469e      	mov	lr, r3
10016c6a:	4770      	bx	lr

10016c6c <__fini_array_start>:
10016c6c:	10008089 	.word	0x10008089
