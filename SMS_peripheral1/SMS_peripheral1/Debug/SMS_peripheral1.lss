
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010fa8  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  10018fa8  10018fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f24  10019050  10019050  00019050  2**2
                  ALLOC
  3 .stack        00000804  1001bf74  1001bf74  00019050  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00019078  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004c12c  00000000  00000000  0001912c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000529e  00000000  00000000  00065258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a5d6  00000000  00000000  0006a4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  00074acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  0007560c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c388  00000000  00000000  0007610c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016039  00000000  00000000  00082494  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014181a  00000000  00000000  000984cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002eb0  00000000  00000000  001d9ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018fa8 	.word	0x10018fa8
10008068:	10018fa8 	.word	0x10018fa8
1000806c:	10019050 	.word	0x10019050
10008070:	1001bf74 	.word	0x1001bf74
10008074:	10019050 	.word	0x10019050
10008078:	10018fac 	.word	0x10018fac
1000807c:	10019054 	.word	0x10019054
10008080:	1001222d 	.word	0x1001222d
10008084:	1000daf5 	.word	0x1000daf5

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10019050 	.word	0x10019050
100080a8:	00000000 	.word	0x00000000
100080ac:	10018fa8 	.word	0x10018fa8

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10019054 	.word	0x10019054
100080dc:	10018fa8 	.word	0x10018fa8
100080e0:	10018fa8 	.word	0x10018fa8
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	1001906c 	.word	0x1001906c

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	1001906c 	.word	0x1001906c

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	1001906c 	.word	0x1001906c

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000b6e1 	.word	0x1000b6e1

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b279 	.word	0x1000b279
10008388:	40003400 	.word	0x40003400
1000838c:	1000a801 	.word	0x1000a801

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10019070 	.word	0x10019070
1000841c:	1001c778 	.word	0x1001c778

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
1000843c:	b510      	push	{r4, lr}
1000843e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008440:	4809      	ldr	r0, [pc, #36]	; (10008468 <sms_ble_pair_request_fn+0x2c>)
10008442:	4b0a      	ldr	r3, [pc, #40]	; (1000846c <sms_ble_pair_request_fn+0x30>)
10008444:	4798      	blx	r3
10008446:	4b0a      	ldr	r3, [pc, #40]	; (10008470 <sms_ble_pair_request_fn+0x34>)
10008448:	781a      	ldrb	r2, [r3, #0]
1000844a:	b2d2      	uxtb	r2, r2
1000844c:	4b09      	ldr	r3, [pc, #36]	; (10008474 <sms_ble_pair_request_fn+0x38>)
1000844e:	781b      	ldrb	r3, [r3, #0]
10008450:	b2db      	uxtb	r3, r3
10008452:	4909      	ldr	r1, [pc, #36]	; (10008478 <sms_ble_pair_request_fn+0x3c>)
10008454:	7808      	ldrb	r0, [r1, #0]
10008456:	4909      	ldr	r1, [pc, #36]	; (1000847c <sms_ble_pair_request_fn+0x40>)
10008458:	7b49      	ldrb	r1, [r1, #13]
1000845a:	9000      	str	r0, [sp, #0]
1000845c:	4808      	ldr	r0, [pc, #32]	; (10008480 <sms_ble_pair_request_fn+0x44>)
1000845e:	4c09      	ldr	r4, [pc, #36]	; (10008484 <sms_ble_pair_request_fn+0x48>)
10008460:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008462:	2000      	movs	r0, #0
10008464:	b002      	add	sp, #8
10008466:	bd10      	pop	{r4, pc}
10008468:	10017434 	.word	0x10017434
1000846c:	10012e11 	.word	0x10012e11
10008470:	1001abf0 	.word	0x1001abf0
10008474:	1001ab14 	.word	0x1001ab14
10008478:	1001ad2f 	.word	0x1001ad2f
1000847c:	1001ac0c 	.word	0x1001ac0c
10008480:	10017438 	.word	0x10017438
10008484:	10012cf1 	.word	0x10012cf1

10008488 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008488:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000848a:	4811      	ldr	r0, [pc, #68]	; (100084d0 <sms_ble_notification_confirmed_fn+0x48>)
1000848c:	4d11      	ldr	r5, [pc, #68]	; (100084d4 <sms_ble_notification_confirmed_fn+0x4c>)
1000848e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008490:	4c11      	ldr	r4, [pc, #68]	; (100084d8 <sms_ble_notification_confirmed_fn+0x50>)
10008492:	7863      	ldrb	r3, [r4, #1]
10008494:	3b01      	subs	r3, #1
10008496:	b2db      	uxtb	r3, r3
10008498:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000849a:	4810      	ldr	r0, [pc, #64]	; (100084dc <sms_ble_notification_confirmed_fn+0x54>)
1000849c:	4b10      	ldr	r3, [pc, #64]	; (100084e0 <sms_ble_notification_confirmed_fn+0x58>)
1000849e:	4798      	blx	r3
100084a0:	4810      	ldr	r0, [pc, #64]	; (100084e4 <sms_ble_notification_confirmed_fn+0x5c>)
100084a2:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
100084a4:	2201      	movs	r2, #1
100084a6:	4252      	negs	r2, r2
100084a8:	4b0f      	ldr	r3, [pc, #60]	; (100084e8 <sms_ble_notification_confirmed_fn+0x60>)
100084aa:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084ac:	2001      	movs	r0, #1
100084ae:	4b0f      	ldr	r3, [pc, #60]	; (100084ec <sms_ble_notification_confirmed_fn+0x64>)
100084b0:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100084b2:	2200      	movs	r2, #0
100084b4:	4b0e      	ldr	r3, [pc, #56]	; (100084f0 <sms_ble_notification_confirmed_fn+0x68>)
100084b6:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100084b8:	2322      	movs	r3, #34	; 0x22
100084ba:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100084bc:	4b0d      	ldr	r3, [pc, #52]	; (100084f4 <sms_ble_notification_confirmed_fn+0x6c>)
100084be:	781b      	ldrb	r3, [r3, #0]
100084c0:	2b00      	cmp	r3, #0
100084c2:	d102      	bne.n	100084ca <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
100084c4:	3201      	adds	r2, #1
100084c6:	4b0c      	ldr	r3, [pc, #48]	; (100084f8 <sms_ble_notification_confirmed_fn+0x70>)
100084c8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
100084ca:	2000      	movs	r0, #0
100084cc:	bd70      	pop	{r4, r5, r6, pc}
100084ce:	46c0      	nop			; (mov r8, r8)
100084d0:	10017488 	.word	0x10017488
100084d4:	10012cf1 	.word	0x10012cf1
100084d8:	1001abf0 	.word	0x1001abf0
100084dc:	10017434 	.word	0x10017434
100084e0:	10012e11 	.word	0x10012e11
100084e4:	10017490 	.word	0x10017490
100084e8:	1001abe8 	.word	0x1001abe8
100084ec:	10009eed 	.word	0x10009eed
100084f0:	1001ad2f 	.word	0x1001ad2f
100084f4:	1001ab14 	.word	0x1001ab14
100084f8:	1001abed 	.word	0x1001abed

100084fc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084fc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084fe:	2001      	movs	r0, #1
10008500:	4b08      	ldr	r3, [pc, #32]	; (10008524 <sms_ble_indication_confirmed_fn+0x28>)
10008502:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008504:	2200      	movs	r2, #0
10008506:	4b08      	ldr	r3, [pc, #32]	; (10008528 <sms_ble_indication_confirmed_fn+0x2c>)
10008508:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
1000850a:	3222      	adds	r2, #34	; 0x22
1000850c:	4b07      	ldr	r3, [pc, #28]	; (1000852c <sms_ble_indication_confirmed_fn+0x30>)
1000850e:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008510:	4b07      	ldr	r3, [pc, #28]	; (10008530 <sms_ble_indication_confirmed_fn+0x34>)
10008512:	781b      	ldrb	r3, [r3, #0]
10008514:	2b00      	cmp	r3, #0
10008516:	d102      	bne.n	1000851e <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10008518:	3a21      	subs	r2, #33	; 0x21
1000851a:	4b06      	ldr	r3, [pc, #24]	; (10008534 <sms_ble_indication_confirmed_fn+0x38>)
1000851c:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
1000851e:	2000      	movs	r0, #0
10008520:	bd10      	pop	{r4, pc}
10008522:	46c0      	nop			; (mov r8, r8)
10008524:	10009eed 	.word	0x10009eed
10008528:	1001ad2f 	.word	0x1001ad2f
1000852c:	1001abf0 	.word	0x1001abf0
10008530:	1001ab14 	.word	0x1001ab14
10008534:	1001abed 	.word	0x1001abed

10008538 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008538:	2300      	movs	r3, #0
1000853a:	4a02      	ldr	r2, [pc, #8]	; (10008544 <sms_ble_init_variables+0xc>)
1000853c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000853e:	4a02      	ldr	r2, [pc, #8]	; (10008548 <sms_ble_init_variables+0x10>)
10008540:	8013      	strh	r3, [r2, #0]
}
10008542:	4770      	bx	lr
10008544:	1001abf0 	.word	0x1001abf0
10008548:	1001ad74 	.word	0x1001ad74

1000854c <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
1000854c:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
1000854e:	482c      	ldr	r0, [pc, #176]	; (10008600 <sms_ble_power_down+0xb4>)
10008550:	4b2c      	ldr	r3, [pc, #176]	; (10008604 <sms_ble_power_down+0xb8>)
10008552:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008554:	4b2c      	ldr	r3, [pc, #176]	; (10008608 <sms_ble_power_down+0xbc>)
10008556:	781b      	ldrb	r3, [r3, #0]
10008558:	2b00      	cmp	r3, #0
1000855a:	d105      	bne.n	10008568 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
1000855c:	2201      	movs	r2, #1
1000855e:	4b2b      	ldr	r3, [pc, #172]	; (1000860c <sms_ble_power_down+0xc0>)
10008560:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008562:	4b2b      	ldr	r3, [pc, #172]	; (10008610 <sms_ble_power_down+0xc4>)
10008564:	4798      	blx	r3
10008566:	e049      	b.n	100085fc <sms_ble_power_down+0xb0>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008568:	4b27      	ldr	r3, [pc, #156]	; (10008608 <sms_ble_power_down+0xbc>)
1000856a:	781b      	ldrb	r3, [r3, #0]
1000856c:	b2db      	uxtb	r3, r3
1000856e:	2b21      	cmp	r3, #33	; 0x21
10008570:	d030      	beq.n	100085d4 <sms_ble_power_down+0x88>
10008572:	d802      	bhi.n	1000857a <sms_ble_power_down+0x2e>
10008574:	2b20      	cmp	r3, #32
10008576:	d005      	beq.n	10008584 <sms_ble_power_down+0x38>
10008578:	e037      	b.n	100085ea <sms_ble_power_down+0x9e>
1000857a:	2b22      	cmp	r3, #34	; 0x22
1000857c:	d017      	beq.n	100085ae <sms_ble_power_down+0x62>
1000857e:	2b23      	cmp	r3, #35	; 0x23
10008580:	d01b      	beq.n	100085ba <sms_ble_power_down+0x6e>
10008582:	e032      	b.n	100085ea <sms_ble_power_down+0x9e>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10008584:	4823      	ldr	r0, [pc, #140]	; (10008614 <sms_ble_power_down+0xc8>)
10008586:	4b24      	ldr	r3, [pc, #144]	; (10008618 <sms_ble_power_down+0xcc>)
10008588:	4798      	blx	r3
1000858a:	4824      	ldr	r0, [pc, #144]	; (1000861c <sms_ble_power_down+0xd0>)
1000858c:	4b24      	ldr	r3, [pc, #144]	; (10008620 <sms_ble_power_down+0xd4>)
1000858e:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008590:	4b24      	ldr	r3, [pc, #144]	; (10008624 <sms_ble_power_down+0xd8>)
10008592:	4798      	blx	r3
10008594:	2800      	cmp	r0, #0
10008596:	d003      	beq.n	100085a0 <sms_ble_power_down+0x54>
				DBG_LOG_CONT_DEV("failed!!!");
10008598:	4823      	ldr	r0, [pc, #140]	; (10008628 <sms_ble_power_down+0xdc>)
1000859a:	4b21      	ldr	r3, [pc, #132]	; (10008620 <sms_ble_power_down+0xd4>)
1000859c:	4798      	blx	r3
1000859e:	e024      	b.n	100085ea <sms_ble_power_down+0x9e>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
100085a0:	4822      	ldr	r0, [pc, #136]	; (1000862c <sms_ble_power_down+0xe0>)
100085a2:	4b1f      	ldr	r3, [pc, #124]	; (10008620 <sms_ble_power_down+0xd4>)
100085a4:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085a6:	2211      	movs	r2, #17
100085a8:	4b17      	ldr	r3, [pc, #92]	; (10008608 <sms_ble_power_down+0xbc>)
100085aa:	701a      	strb	r2, [r3, #0]
100085ac:	e01d      	b.n	100085ea <sms_ble_power_down+0x9e>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
100085ae:	4819      	ldr	r0, [pc, #100]	; (10008614 <sms_ble_power_down+0xc8>)
100085b0:	4b19      	ldr	r3, [pc, #100]	; (10008618 <sms_ble_power_down+0xcc>)
100085b2:	4798      	blx	r3
100085b4:	481e      	ldr	r0, [pc, #120]	; (10008630 <sms_ble_power_down+0xe4>)
100085b6:	4b1a      	ldr	r3, [pc, #104]	; (10008620 <sms_ble_power_down+0xd4>)
100085b8:	4798      	blx	r3
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
100085ba:	4816      	ldr	r0, [pc, #88]	; (10008614 <sms_ble_power_down+0xc8>)
100085bc:	4b16      	ldr	r3, [pc, #88]	; (10008618 <sms_ble_power_down+0xcc>)
100085be:	4798      	blx	r3
100085c0:	481c      	ldr	r0, [pc, #112]	; (10008634 <sms_ble_power_down+0xe8>)
100085c2:	4b17      	ldr	r3, [pc, #92]	; (10008620 <sms_ble_power_down+0xd4>)
100085c4:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
100085c6:	2100      	movs	r1, #0
100085c8:	232b      	movs	r3, #43	; 0x2b
100085ca:	4a1b      	ldr	r2, [pc, #108]	; (10008638 <sms_ble_power_down+0xec>)
100085cc:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
100085ce:	2000      	movs	r0, #0
100085d0:	4b1a      	ldr	r3, [pc, #104]	; (1000863c <sms_ble_power_down+0xf0>)
100085d2:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
100085d4:	480f      	ldr	r0, [pc, #60]	; (10008614 <sms_ble_power_down+0xc8>)
100085d6:	4b10      	ldr	r3, [pc, #64]	; (10008618 <sms_ble_power_down+0xcc>)
100085d8:	4798      	blx	r3
100085da:	4819      	ldr	r0, [pc, #100]	; (10008640 <sms_ble_power_down+0xf4>)
100085dc:	4b10      	ldr	r3, [pc, #64]	; (10008620 <sms_ble_power_down+0xd4>)
100085de:	4798      	blx	r3
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
100085e0:	4b18      	ldr	r3, [pc, #96]	; (10008644 <sms_ble_power_down+0xf8>)
100085e2:	8818      	ldrh	r0, [r3, #0]
100085e4:	2113      	movs	r1, #19
100085e6:	4b18      	ldr	r3, [pc, #96]	; (10008648 <sms_ble_power_down+0xfc>)
100085e8:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085ea:	2211      	movs	r2, #17
100085ec:	4b06      	ldr	r3, [pc, #24]	; (10008608 <sms_ble_power_down+0xbc>)
100085ee:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100085f0:	3a0e      	subs	r2, #14
100085f2:	4b16      	ldr	r3, [pc, #88]	; (1000864c <sms_ble_power_down+0x100>)
100085f4:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
100085f6:	2016      	movs	r0, #22
100085f8:	4b15      	ldr	r3, [pc, #84]	; (10008650 <sms_ble_power_down+0x104>)
100085fa:	4798      	blx	r3
	}
}
100085fc:	bd10      	pop	{r4, pc}
100085fe:	46c0      	nop			; (mov r8, r8)
10008600:	1001749c 	.word	0x1001749c
10008604:	10008c01 	.word	0x10008c01
10008608:	1001abf0 	.word	0x1001abf0
1000860c:	1001abed 	.word	0x1001abed
10008610:	1000d8a1 	.word	0x1000d8a1
10008614:	10017434 	.word	0x10017434
10008618:	10012e11 	.word	0x10012e11
1000861c:	100174b4 	.word	0x100174b4
10008620:	10012cf1 	.word	0x10012cf1
10008624:	1000ea1d 	.word	0x1000ea1d
10008628:	10017508 	.word	0x10017508
1000862c:	10017514 	.word	0x10017514
10008630:	1001751c 	.word	0x1001751c
10008634:	10017574 	.word	0x10017574
10008638:	1001ac94 	.word	0x1001ac94
1000863c:	10009c21 	.word	0x10009c21
10008640:	100175a0 	.word	0x100175a0
10008644:	1001abf2 	.word	0x1001abf2
10008648:	1000ea49 	.word	0x1000ea49
1000864c:	1001ad2f 	.word	0x1001ad2f
10008650:	1000995d 	.word	0x1000995d

10008654 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008654:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008656:	2211      	movs	r2, #17
10008658:	4b05      	ldr	r3, [pc, #20]	; (10008670 <sms_ble_adv_report_fn+0x1c>)
1000865a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000865c:	4805      	ldr	r0, [pc, #20]	; (10008674 <sms_ble_adv_report_fn+0x20>)
1000865e:	4b06      	ldr	r3, [pc, #24]	; (10008678 <sms_ble_adv_report_fn+0x24>)
10008660:	4798      	blx	r3
10008662:	4806      	ldr	r0, [pc, #24]	; (1000867c <sms_ble_adv_report_fn+0x28>)
10008664:	4b06      	ldr	r3, [pc, #24]	; (10008680 <sms_ble_adv_report_fn+0x2c>)
10008666:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10008668:	4b06      	ldr	r3, [pc, #24]	; (10008684 <sms_ble_adv_report_fn+0x30>)
1000866a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000866c:	2000      	movs	r0, #0
1000866e:	bd10      	pop	{r4, pc}
10008670:	1001abf0 	.word	0x1001abf0
10008674:	10017434 	.word	0x10017434
10008678:	10012e11 	.word	0x10012e11
1000867c:	100175d8 	.word	0x100175d8
10008680:	10012cf1 	.word	0x10012cf1
10008684:	1000854d 	.word	0x1000854d

10008688 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008688:	b570      	push	{r4, r5, r6, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
1000868a:	4b0f      	ldr	r3, [pc, #60]	; (100086c8 <sms_ble_connected_fn+0x40>)
1000868c:	781b      	ldrb	r3, [r3, #0]
1000868e:	2b20      	cmp	r3, #32
10008690:	d115      	bne.n	100086be <sms_ble_connected_fn+0x36>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008692:	8902      	ldrh	r2, [r0, #8]
10008694:	4b0d      	ldr	r3, [pc, #52]	; (100086cc <sms_ble_connected_fn+0x44>)
10008696:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10008698:	2221      	movs	r2, #33	; 0x21
1000869a:	4b0b      	ldr	r3, [pc, #44]	; (100086c8 <sms_ble_connected_fn+0x40>)
1000869c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000869e:	4e0c      	ldr	r6, [pc, #48]	; (100086d0 <sms_ble_connected_fn+0x48>)
100086a0:	0030      	movs	r0, r6
100086a2:	4d0c      	ldr	r5, [pc, #48]	; (100086d4 <sms_ble_connected_fn+0x4c>)
100086a4:	47a8      	blx	r5
100086a6:	480c      	ldr	r0, [pc, #48]	; (100086d8 <sms_ble_connected_fn+0x50>)
100086a8:	4c0c      	ldr	r4, [pc, #48]	; (100086dc <sms_ble_connected_fn+0x54>)
100086aa:	47a0      	blx	r4
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
100086ac:	0030      	movs	r0, r6
100086ae:	47a8      	blx	r5
100086b0:	480b      	ldr	r0, [pc, #44]	; (100086e0 <sms_ble_connected_fn+0x58>)
100086b2:	47a0      	blx	r4
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
100086b4:	22fa      	movs	r2, #250	; 0xfa
100086b6:	0052      	lsls	r2, r2, #1
100086b8:	4b0a      	ldr	r3, [pc, #40]	; (100086e4 <sms_ble_connected_fn+0x5c>)
100086ba:	601a      	str	r2, [r3, #0]
100086bc:	e001      	b.n	100086c2 <sms_ble_connected_fn+0x3a>
    }
    else {
        sms_ble_power_down();
100086be:	4b0a      	ldr	r3, [pc, #40]	; (100086e8 <sms_ble_connected_fn+0x60>)
100086c0:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
100086c2:	2000      	movs	r0, #0
100086c4:	bd70      	pop	{r4, r5, r6, pc}
100086c6:	46c0      	nop			; (mov r8, r8)
100086c8:	1001abf0 	.word	0x1001abf0
100086cc:	1001ad22 	.word	0x1001ad22
100086d0:	10017434 	.word	0x10017434
100086d4:	10012e11 	.word	0x10012e11
100086d8:	1001760c 	.word	0x1001760c
100086dc:	10012cf1 	.word	0x10012cf1
100086e0:	1001763c 	.word	0x1001763c
100086e4:	1001abe8 	.word	0x1001abe8
100086e8:	1000854d 	.word	0x1000854d

100086ec <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
100086ec:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
100086ee:	4b0e      	ldr	r3, [pc, #56]	; (10008728 <sms_ble_paired_fn+0x3c>)
100086f0:	781b      	ldrb	r3, [r3, #0]
100086f2:	2b21      	cmp	r3, #33	; 0x21
100086f4:	d114      	bne.n	10008720 <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
100086f6:	2222      	movs	r2, #34	; 0x22
100086f8:	4b0b      	ldr	r3, [pc, #44]	; (10008728 <sms_ble_paired_fn+0x3c>)
100086fa:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
100086fc:	480b      	ldr	r0, [pc, #44]	; (1000872c <sms_ble_paired_fn+0x40>)
100086fe:	4b0c      	ldr	r3, [pc, #48]	; (10008730 <sms_ble_paired_fn+0x44>)
10008700:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008702:	2101      	movs	r1, #1
10008704:	2001      	movs	r0, #1
10008706:	4b0b      	ldr	r3, [pc, #44]	; (10008734 <sms_ble_paired_fn+0x48>)
10008708:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
1000870a:	480b      	ldr	r0, [pc, #44]	; (10008738 <sms_ble_paired_fn+0x4c>)
1000870c:	4b0b      	ldr	r3, [pc, #44]	; (1000873c <sms_ble_paired_fn+0x50>)
1000870e:	4798      	blx	r3
10008710:	480b      	ldr	r0, [pc, #44]	; (10008740 <sms_ble_paired_fn+0x54>)
10008712:	4b0c      	ldr	r3, [pc, #48]	; (10008744 <sms_ble_paired_fn+0x58>)
10008714:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008716:	2201      	movs	r2, #1
10008718:	4252      	negs	r2, r2
1000871a:	4b0b      	ldr	r3, [pc, #44]	; (10008748 <sms_ble_paired_fn+0x5c>)
1000871c:	601a      	str	r2, [r3, #0]
1000871e:	e001      	b.n	10008724 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
10008720:	4b0a      	ldr	r3, [pc, #40]	; (1000874c <sms_ble_paired_fn+0x60>)
10008722:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008724:	2000      	movs	r0, #0
10008726:	bd10      	pop	{r4, pc}
10008728:	1001abf0 	.word	0x1001abf0
1000872c:	1001764c 	.word	0x1001764c
10008730:	10008c01 	.word	0x10008c01
10008734:	10009cad 	.word	0x10009cad
10008738:	10017434 	.word	0x10017434
1000873c:	10012e11 	.word	0x10012e11
10008740:	10017490 	.word	0x10017490
10008744:	10012cf1 	.word	0x10012cf1
10008748:	1001abe8 	.word	0x1001abe8
1000874c:	1000854d 	.word	0x1000854d

10008750 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008750:	b510      	push	{r4, lr}
10008752:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008754:	2220      	movs	r2, #32
10008756:	4b17      	ldr	r3, [pc, #92]	; (100087b4 <sms_ble_advertise+0x64>)
10008758:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000875a:	4b17      	ldr	r3, [pc, #92]	; (100087b8 <sms_ble_advertise+0x68>)
1000875c:	4798      	blx	r3
1000875e:	1e04      	subs	r4, r0, #0
10008760:	d007      	beq.n	10008772 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008762:	4816      	ldr	r0, [pc, #88]	; (100087bc <sms_ble_advertise+0x6c>)
10008764:	4b16      	ldr	r3, [pc, #88]	; (100087c0 <sms_ble_advertise+0x70>)
10008766:	4798      	blx	r3
10008768:	4816      	ldr	r0, [pc, #88]	; (100087c4 <sms_ble_advertise+0x74>)
1000876a:	4b17      	ldr	r3, [pc, #92]	; (100087c8 <sms_ble_advertise+0x78>)
1000876c:	4798      	blx	r3
		return status;
1000876e:	0020      	movs	r0, r4
10008770:	e01e      	b.n	100087b0 <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008772:	2300      	movs	r3, #0
10008774:	9302      	str	r3, [sp, #8]
10008776:	4b15      	ldr	r3, [pc, #84]	; (100087cc <sms_ble_advertise+0x7c>)
10008778:	9301      	str	r3, [sp, #4]
1000877a:	23c8      	movs	r3, #200	; 0xc8
1000877c:	00db      	lsls	r3, r3, #3
1000877e:	9300      	str	r3, [sp, #0]
10008780:	2300      	movs	r3, #0
10008782:	2200      	movs	r2, #0
10008784:	2101      	movs	r1, #1
10008786:	2000      	movs	r0, #0
10008788:	4c11      	ldr	r4, [pc, #68]	; (100087d0 <sms_ble_advertise+0x80>)
1000878a:	47a0      	blx	r4
1000878c:	1e04      	subs	r4, r0, #0
1000878e:	d107      	bne.n	100087a0 <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10008790:	480a      	ldr	r0, [pc, #40]	; (100087bc <sms_ble_advertise+0x6c>)
10008792:	4b0b      	ldr	r3, [pc, #44]	; (100087c0 <sms_ble_advertise+0x70>)
10008794:	4798      	blx	r3
10008796:	480f      	ldr	r0, [pc, #60]	; (100087d4 <sms_ble_advertise+0x84>)
10008798:	4b0b      	ldr	r3, [pc, #44]	; (100087c8 <sms_ble_advertise+0x78>)
1000879a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000879c:	2000      	movs	r0, #0
1000879e:	e007      	b.n	100087b0 <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100087a0:	4806      	ldr	r0, [pc, #24]	; (100087bc <sms_ble_advertise+0x6c>)
100087a2:	4b07      	ldr	r3, [pc, #28]	; (100087c0 <sms_ble_advertise+0x70>)
100087a4:	4798      	blx	r3
100087a6:	0021      	movs	r1, r4
100087a8:	480b      	ldr	r0, [pc, #44]	; (100087d8 <sms_ble_advertise+0x88>)
100087aa:	4b07      	ldr	r3, [pc, #28]	; (100087c8 <sms_ble_advertise+0x78>)
100087ac:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100087ae:	20e2      	movs	r0, #226	; 0xe2
}
100087b0:	b004      	add	sp, #16
100087b2:	bd10      	pop	{r4, pc}
100087b4:	1001abf0 	.word	0x1001abf0
100087b8:	1000cee9 	.word	0x1000cee9
100087bc:	10017434 	.word	0x10017434
100087c0:	10012e11 	.word	0x10012e11
100087c4:	10017660 	.word	0x10017660
100087c8:	10012cf1 	.word	0x10012cf1
100087cc:	0000028f 	.word	0x0000028f
100087d0:	1000e8e1 	.word	0x1000e8e1
100087d4:	10017694 	.word	0x10017694
100087d8:	100176c4 	.word	0x100176c4

100087dc <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
100087dc:	b530      	push	{r4, r5, lr}
100087de:	b083      	sub	sp, #12
100087e0:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
100087e2:	4b1c      	ldr	r3, [pc, #112]	; (10008854 <sms_ble_disconnected_fn+0x78>)
100087e4:	781b      	ldrb	r3, [r3, #0]
100087e6:	2b22      	cmp	r3, #34	; 0x22
100087e8:	d10a      	bne.n	10008800 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
100087ea:	2100      	movs	r1, #0
100087ec:	3309      	adds	r3, #9
100087ee:	4a1a      	ldr	r2, [pc, #104]	; (10008858 <sms_ble_disconnected_fn+0x7c>)
100087f0:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
100087f2:	2000      	movs	r0, #0
100087f4:	4b19      	ldr	r3, [pc, #100]	; (1000885c <sms_ble_disconnected_fn+0x80>)
100087f6:	4798      	blx	r3
        sms_sensors_switch(false, false);
100087f8:	2100      	movs	r1, #0
100087fa:	2000      	movs	r0, #0
100087fc:	4b18      	ldr	r3, [pc, #96]	; (10008860 <sms_ble_disconnected_fn+0x84>)
100087fe:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008800:	4c14      	ldr	r4, [pc, #80]	; (10008854 <sms_ble_disconnected_fn+0x78>)
10008802:	2311      	movs	r3, #17
10008804:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008806:	4817      	ldr	r0, [pc, #92]	; (10008864 <sms_ble_disconnected_fn+0x88>)
10008808:	4b17      	ldr	r3, [pc, #92]	; (10008868 <sms_ble_disconnected_fn+0x8c>)
1000880a:	4798      	blx	r3
1000880c:	7822      	ldrb	r2, [r4, #0]
1000880e:	b2d2      	uxtb	r2, r2
10008810:	4b16      	ldr	r3, [pc, #88]	; (1000886c <sms_ble_disconnected_fn+0x90>)
10008812:	781b      	ldrb	r3, [r3, #0]
10008814:	b2db      	uxtb	r3, r3
10008816:	4916      	ldr	r1, [pc, #88]	; (10008870 <sms_ble_disconnected_fn+0x94>)
10008818:	7808      	ldrb	r0, [r1, #0]
1000881a:	4916      	ldr	r1, [pc, #88]	; (10008874 <sms_ble_disconnected_fn+0x98>)
1000881c:	7b49      	ldrb	r1, [r1, #13]
1000881e:	9000      	str	r0, [sp, #0]
10008820:	4815      	ldr	r0, [pc, #84]	; (10008878 <sms_ble_disconnected_fn+0x9c>)
10008822:	4c16      	ldr	r4, [pc, #88]	; (1000887c <sms_ble_disconnected_fn+0xa0>)
10008824:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008826:	78ab      	ldrb	r3, [r5, #2]
10008828:	2b1a      	cmp	r3, #26
1000882a:	d00b      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
1000882c:	b2da      	uxtb	r2, r3
1000882e:	2a1a      	cmp	r2, #26
10008830:	d804      	bhi.n	1000883c <sms_ble_disconnected_fn+0x60>
10008832:	2b05      	cmp	r3, #5
10008834:	d006      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
10008836:	2b08      	cmp	r3, #8
10008838:	d107      	bne.n	1000884a <sms_ble_disconnected_fn+0x6e>
1000883a:	e003      	b.n	10008844 <sms_ble_disconnected_fn+0x68>
1000883c:	2b29      	cmp	r3, #41	; 0x29
1000883e:	d001      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
10008840:	2b3b      	cmp	r3, #59	; 0x3b
10008842:	d102      	bne.n	1000884a <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008844:	4b0e      	ldr	r3, [pc, #56]	; (10008880 <sms_ble_disconnected_fn+0xa4>)
10008846:	4798      	blx	r3
        break;
10008848:	e001      	b.n	1000884e <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000884a:	4b0e      	ldr	r3, [pc, #56]	; (10008884 <sms_ble_disconnected_fn+0xa8>)
1000884c:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000884e:	2000      	movs	r0, #0
10008850:	b003      	add	sp, #12
10008852:	bd30      	pop	{r4, r5, pc}
10008854:	1001abf0 	.word	0x1001abf0
10008858:	1001ac94 	.word	0x1001ac94
1000885c:	10009c21 	.word	0x10009c21
10008860:	10009cad 	.word	0x10009cad
10008864:	10017434 	.word	0x10017434
10008868:	10012e11 	.word	0x10012e11
1000886c:	1001ab14 	.word	0x1001ab14
10008870:	1001ad2f 	.word	0x1001ad2f
10008874:	1001ac0c 	.word	0x1001ac0c
10008878:	10017708 	.word	0x10017708
1000887c:	10012cf1 	.word	0x10012cf1
10008880:	10008751 	.word	0x10008751
10008884:	1000854d 	.word	0x1000854d

10008888 <sms_ble_primary_service_define>:
	}
    return status;
}

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008888:	b510      	push	{r4, lr}
1000888a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000888c:	0001      	movs	r1, r0
1000888e:	3112      	adds	r1, #18
10008890:	2301      	movs	r3, #1
10008892:	9301      	str	r3, [sp, #4]
10008894:	0003      	movs	r3, r0
10008896:	3314      	adds	r3, #20
10008898:	9300      	str	r3, [sp, #0]
1000889a:	2300      	movs	r3, #0
1000889c:	2200      	movs	r2, #0
1000889e:	4c02      	ldr	r4, [pc, #8]	; (100088a8 <sms_ble_primary_service_define+0x20>)
100088a0:	47a0      	blx	r4
}
100088a2:	b002      	add	sp, #8
100088a4:	bd10      	pop	{r4, pc}
100088a6:	46c0      	nop			; (mov r8, r8)
100088a8:	1000f1a5 	.word	0x1000f1a5

100088ac <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100088ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100088ae:	464f      	mov	r7, r9
100088b0:	4646      	mov	r6, r8
100088b2:	b4c0      	push	{r6, r7}
100088b4:	b083      	sub	sp, #12
100088b6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100088b8:	2801      	cmp	r0, #1
100088ba:	d010      	beq.n	100088de <sms_ble_service_init+0x32>
100088bc:	2800      	cmp	r0, #0
100088be:	d002      	beq.n	100088c6 <sms_ble_service_init+0x1a>
100088c0:	2802      	cmp	r0, #2
100088c2:	d019      	beq.n	100088f8 <sms_ble_service_init+0x4c>
100088c4:	e025      	b.n	10008912 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100088c6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100088c8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100088ca:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100088cc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100088ce:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100088d0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100088d2:	221c      	movs	r2, #28
100088d4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100088d6:	3a1b      	subs	r2, #27
100088d8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100088da:	4691      	mov	r9, r2
100088dc:	e023      	b.n	10008926 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100088de:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
100088e0:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
100088e2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
100088e4:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
100088e6:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
100088e8:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
100088ea:	221c      	movs	r2, #28
100088ec:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
100088ee:	3a14      	subs	r2, #20
100088f0:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
100088f2:	3a06      	subs	r2, #6
100088f4:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
100088f6:	e016      	b.n	10008926 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
100088f8:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
100088fa:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
100088fc:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
100088fe:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008900:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008902:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008904:	221c      	movs	r2, #28
10008906:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008908:	3a08      	subs	r2, #8
1000890a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000890c:	3a11      	subs	r2, #17
1000890e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008910:	e009      	b.n	10008926 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008912:	2300      	movs	r3, #0
10008914:	2400      	movs	r4, #0
10008916:	2500      	movs	r5, #0
10008918:	2600      	movs	r6, #0
1000891a:	2700      	movs	r7, #0
1000891c:	2000      	movs	r0, #0
1000891e:	2200      	movs	r2, #0
10008920:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008922:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008924:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008926:	464a      	mov	r2, r9
10008928:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000892a:	2202      	movs	r2, #2
1000892c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000892e:	4642      	mov	r2, r8
10008930:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008932:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008934:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008936:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008938:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000893a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000893c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000893e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008940:	2300      	movs	r3, #0
10008942:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008944:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008946:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008948:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000894a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000894c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000894e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008950:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008952:	2412      	movs	r4, #18
10008954:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008956:	4662      	mov	r2, ip
10008958:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000895a:	466a      	mov	r2, sp
1000895c:	8892      	ldrh	r2, [r2, #4]
1000895e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008960:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008962:	2011      	movs	r0, #17
10008964:	2234      	movs	r2, #52	; 0x34
10008966:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008968:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000896a:	2200      	movs	r2, #0
1000896c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000896e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008970:	3033      	adds	r0, #51	; 0x33
10008972:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008974:	3001      	adds	r0, #1
10008976:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008978:	3001      	adds	r0, #1
1000897a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000897c:	2248      	movs	r2, #72	; 0x48
1000897e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008980:	3202      	adds	r2, #2
10008982:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008984:	3202      	adds	r2, #2
10008986:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008988:	640b      	str	r3, [r1, #64]	; 0x40
1000898a:	b003      	add	sp, #12
1000898c:	bc0c      	pop	{r2, r3}
1000898e:	4690      	mov	r8, r2
10008990:	4699      	mov	r9, r3
10008992:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008994 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008994:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008996:	4b05      	ldr	r3, [pc, #20]	; (100089ac <sms_button_bt0_callback+0x18>)
10008998:	2201      	movs	r2, #1
1000899a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000899c:	7858      	ldrb	r0, [r3, #1]
1000899e:	2300      	movs	r3, #0
100089a0:	2200      	movs	r2, #0
100089a2:	2102      	movs	r1, #2
100089a4:	4c02      	ldr	r4, [pc, #8]	; (100089b0 <sms_button_bt0_callback+0x1c>)
100089a6:	47a0      	blx	r4
}
100089a8:	bd10      	pop	{r4, pc}
100089aa:	46c0      	nop			; (mov r8, r8)
100089ac:	1001ac0c 	.word	0x1001ac0c
100089b0:	1000d5d5 	.word	0x1000d5d5

100089b4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100089b4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100089b6:	4b05      	ldr	r3, [pc, #20]	; (100089cc <sms_button_bt1_callback+0x18>)
100089b8:	2201      	movs	r2, #1
100089ba:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100089bc:	79d8      	ldrb	r0, [r3, #7]
100089be:	2300      	movs	r3, #0
100089c0:	2200      	movs	r2, #0
100089c2:	2102      	movs	r1, #2
100089c4:	4c02      	ldr	r4, [pc, #8]	; (100089d0 <sms_button_bt1_callback+0x1c>)
100089c6:	47a0      	blx	r4
}
100089c8:	bd10      	pop	{r4, pc}
100089ca:	46c0      	nop			; (mov r8, r8)
100089cc:	1001ac0c 	.word	0x1001ac0c
100089d0:	1000d5d5 	.word	0x1000d5d5

100089d4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100089d4:	4b08      	ldr	r3, [pc, #32]	; (100089f8 <sms_button_init_variables+0x24>)
100089d6:	2200      	movs	r2, #0
100089d8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
100089da:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
100089dc:	211f      	movs	r1, #31
100089de:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
100089e0:	391e      	subs	r1, #30
100089e2:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
100089e4:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
100089e6:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
100089e8:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
100089ea:	201d      	movs	r0, #29
100089ec:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
100089ee:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
100089f0:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
100089f2:	72da      	strb	r2, [r3, #11]
}
100089f4:	4770      	bx	lr
100089f6:	46c0      	nop			; (mov r8, r8)
100089f8:	1001ac0c 	.word	0x1001ac0c

100089fc <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
100089fc:	b510      	push	{r4, lr}
100089fe:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a00:	ac01      	add	r4, sp, #4
10008a02:	0020      	movs	r0, r4
10008a04:	4b20      	ldr	r3, [pc, #128]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a06:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a08:	2300      	movs	r3, #0
10008a0a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a0c:	3302      	adds	r3, #2
10008a0e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a10:	3b01      	subs	r3, #1
10008a12:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a14:	4b1d      	ldr	r3, [pc, #116]	; (10008a8c <sms_button_gpio_init+0x90>)
10008a16:	7858      	ldrb	r0, [r3, #1]
10008a18:	0021      	movs	r1, r4
10008a1a:	4b1d      	ldr	r3, [pc, #116]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a1c:	4798      	blx	r3
10008a1e:	2800      	cmp	r0, #0
10008a20:	d005      	beq.n	10008a2e <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008a22:	481c      	ldr	r0, [pc, #112]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a24:	4b1c      	ldr	r3, [pc, #112]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a26:	4798      	blx	r3
10008a28:	481c      	ldr	r0, [pc, #112]	; (10008a9c <sms_button_gpio_init+0xa0>)
10008a2a:	4b1d      	ldr	r3, [pc, #116]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a2c:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a2e:	ac01      	add	r4, sp, #4
10008a30:	0020      	movs	r0, r4
10008a32:	4b15      	ldr	r3, [pc, #84]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a34:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a36:	2300      	movs	r3, #0
10008a38:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a3a:	3302      	adds	r3, #2
10008a3c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a3e:	3b01      	subs	r3, #1
10008a40:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a42:	4b12      	ldr	r3, [pc, #72]	; (10008a8c <sms_button_gpio_init+0x90>)
10008a44:	79d8      	ldrb	r0, [r3, #7]
10008a46:	0021      	movs	r1, r4
10008a48:	4b11      	ldr	r3, [pc, #68]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a4a:	4798      	blx	r3
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d005      	beq.n	10008a5c <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008a50:	4810      	ldr	r0, [pc, #64]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a52:	4b11      	ldr	r3, [pc, #68]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a54:	4798      	blx	r3
10008a56:	4813      	ldr	r0, [pc, #76]	; (10008aa4 <sms_button_gpio_init+0xa8>)
10008a58:	4b11      	ldr	r3, [pc, #68]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a5a:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008a5c:	ac01      	add	r4, sp, #4
10008a5e:	0020      	movs	r0, r4
10008a60:	4b09      	ldr	r3, [pc, #36]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a62:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a64:	2300      	movs	r3, #0
10008a66:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008a68:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008a6a:	0021      	movs	r1, r4
10008a6c:	2017      	movs	r0, #23
10008a6e:	4b08      	ldr	r3, [pc, #32]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a70:	4798      	blx	r3
10008a72:	2800      	cmp	r0, #0
10008a74:	d005      	beq.n	10008a82 <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008a76:	4807      	ldr	r0, [pc, #28]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a78:	4b07      	ldr	r3, [pc, #28]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a7a:	4798      	blx	r3
10008a7c:	480a      	ldr	r0, [pc, #40]	; (10008aa8 <sms_button_gpio_init+0xac>)
10008a7e:	4b08      	ldr	r3, [pc, #32]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a80:	4798      	blx	r3
    }
}
10008a82:	b002      	add	sp, #8
10008a84:	bd10      	pop	{r4, pc}
10008a86:	46c0      	nop			; (mov r8, r8)
10008a88:	1000a5ad 	.word	0x1000a5ad
10008a8c:	1001ac0c 	.word	0x1001ac0c
10008a90:	1000a5bd 	.word	0x1000a5bd
10008a94:	10017434 	.word	0x10017434
10008a98:	10012e11 	.word	0x10012e11
10008a9c:	10017814 	.word	0x10017814
10008aa0:	10012cf1 	.word	0x10012cf1
10008aa4:	1001784c 	.word	0x1001784c
10008aa8:	10017884 	.word	0x10017884

10008aac <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008aac:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008aae:	4d05      	ldr	r5, [pc, #20]	; (10008ac4 <sms_button_register_callbacks+0x18>)
10008ab0:	7868      	ldrb	r0, [r5, #1]
10008ab2:	2202      	movs	r2, #2
10008ab4:	4904      	ldr	r1, [pc, #16]	; (10008ac8 <sms_button_register_callbacks+0x1c>)
10008ab6:	4c05      	ldr	r4, [pc, #20]	; (10008acc <sms_button_register_callbacks+0x20>)
10008ab8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008aba:	79e8      	ldrb	r0, [r5, #7]
10008abc:	2202      	movs	r2, #2
10008abe:	4904      	ldr	r1, [pc, #16]	; (10008ad0 <sms_button_register_callbacks+0x24>)
10008ac0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008ac2:	bd70      	pop	{r4, r5, r6, pc}
10008ac4:	1001ac0c 	.word	0x1001ac0c
10008ac8:	10008995 	.word	0x10008995
10008acc:	1000a94d 	.word	0x1000a94d
10008ad0:	100089b5 	.word	0x100089b5

10008ad4 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008ad4:	b510      	push	{r4, lr}
10008ad6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008ad8:	2800      	cmp	r0, #0
10008ada:	d104      	bne.n	10008ae6 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008adc:	4b0c      	ldr	r3, [pc, #48]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008ade:	7858      	ldrb	r0, [r3, #1]
10008ae0:	4b0c      	ldr	r3, [pc, #48]	; (10008b14 <sms_button_toggle_callback+0x40>)
10008ae2:	4798      	blx	r3
10008ae4:	e005      	b.n	10008af2 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008ae6:	2801      	cmp	r0, #1
10008ae8:	d103      	bne.n	10008af2 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008aea:	4b09      	ldr	r3, [pc, #36]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008aec:	7858      	ldrb	r0, [r3, #1]
10008aee:	4b0a      	ldr	r3, [pc, #40]	; (10008b18 <sms_button_toggle_callback+0x44>)
10008af0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008af2:	2c00      	cmp	r4, #0
10008af4:	d104      	bne.n	10008b00 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008af6:	4b06      	ldr	r3, [pc, #24]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008af8:	79d8      	ldrb	r0, [r3, #7]
10008afa:	4b06      	ldr	r3, [pc, #24]	; (10008b14 <sms_button_toggle_callback+0x40>)
10008afc:	4798      	blx	r3
10008afe:	e005      	b.n	10008b0c <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008b00:	2c01      	cmp	r4, #1
10008b02:	d103      	bne.n	10008b0c <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008b04:	4b02      	ldr	r3, [pc, #8]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008b06:	79d8      	ldrb	r0, [r3, #7]
10008b08:	4b03      	ldr	r3, [pc, #12]	; (10008b18 <sms_button_toggle_callback+0x44>)
10008b0a:	4798      	blx	r3
    }
}
10008b0c:	bd10      	pop	{r4, pc}
10008b0e:	46c0      	nop			; (mov r8, r8)
10008b10:	1001ac0c 	.word	0x1001ac0c
10008b14:	1000aa1d 	.word	0x1000aa1d
10008b18:	1000aa79 	.word	0x1000aa79

10008b1c <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008b1c:	b510      	push	{r4, lr}
10008b1e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008b20:	466b      	mov	r3, sp
10008b22:	1dda      	adds	r2, r3, #7
10008b24:	2300      	movs	r3, #0
10008b26:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008b28:	4c0d      	ldr	r4, [pc, #52]	; (10008b60 <sms_button_define_services+0x44>)
10008b2a:	0021      	movs	r1, r4
10008b2c:	2000      	movs	r0, #0
10008b2e:	4b0d      	ldr	r3, [pc, #52]	; (10008b64 <sms_button_define_services+0x48>)
10008b30:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008b32:	0020      	movs	r0, r4
10008b34:	4b0c      	ldr	r3, [pc, #48]	; (10008b68 <sms_button_define_services+0x4c>)
10008b36:	4798      	blx	r3
10008b38:	1e04      	subs	r4, r0, #0
10008b3a:	d007      	beq.n	10008b4c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008b3c:	480b      	ldr	r0, [pc, #44]	; (10008b6c <sms_button_define_services+0x50>)
10008b3e:	4b0c      	ldr	r3, [pc, #48]	; (10008b70 <sms_button_define_services+0x54>)
10008b40:	4798      	blx	r3
10008b42:	0021      	movs	r1, r4
10008b44:	480b      	ldr	r0, [pc, #44]	; (10008b74 <sms_button_define_services+0x58>)
10008b46:	4b0c      	ldr	r3, [pc, #48]	; (10008b78 <sms_button_define_services+0x5c>)
10008b48:	4798      	blx	r3
10008b4a:	e007      	b.n	10008b5c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008b4c:	4807      	ldr	r0, [pc, #28]	; (10008b6c <sms_button_define_services+0x50>)
10008b4e:	4b08      	ldr	r3, [pc, #32]	; (10008b70 <sms_button_define_services+0x54>)
10008b50:	4798      	blx	r3
10008b52:	4b0a      	ldr	r3, [pc, #40]	; (10008b7c <sms_button_define_services+0x60>)
10008b54:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008b56:	480a      	ldr	r0, [pc, #40]	; (10008b80 <sms_button_define_services+0x64>)
10008b58:	4b07      	ldr	r3, [pc, #28]	; (10008b78 <sms_button_define_services+0x5c>)
10008b5a:	4798      	blx	r3
    }
10008b5c:	b002      	add	sp, #8
10008b5e:	bd10      	pop	{r4, pc}
10008b60:	1001ac1c 	.word	0x1001ac1c
10008b64:	100088ad 	.word	0x100088ad
10008b68:	10008889 	.word	0x10008889
10008b6c:	10017434 	.word	0x10017434
10008b70:	10012e11 	.word	0x10012e11
10008b74:	1001796c 	.word	0x1001796c
10008b78:	10012cf1 	.word	0x10012cf1
10008b7c:	1001ac0c 	.word	0x1001ac0c
10008b80:	100179b0 	.word	0x100179b0

10008b84 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008b84:	b510      	push	{r4, lr}
10008b86:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008b88:	ac01      	add	r4, sp, #4
10008b8a:	0020      	movs	r0, r4
10008b8c:	4b15      	ldr	r3, [pc, #84]	; (10008be4 <sms_monitor_configure_gpio+0x60>)
10008b8e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008b90:	2301      	movs	r3, #1
10008b92:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008b94:	0021      	movs	r1, r4
10008b96:	200e      	movs	r0, #14
10008b98:	4b13      	ldr	r3, [pc, #76]	; (10008be8 <sms_monitor_configure_gpio+0x64>)
10008b9a:	4798      	blx	r3
10008b9c:	2800      	cmp	r0, #0
10008b9e:	d005      	beq.n	10008bac <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008ba0:	4812      	ldr	r0, [pc, #72]	; (10008bec <sms_monitor_configure_gpio+0x68>)
10008ba2:	4b13      	ldr	r3, [pc, #76]	; (10008bf0 <sms_monitor_configure_gpio+0x6c>)
10008ba4:	4798      	blx	r3
10008ba6:	4813      	ldr	r0, [pc, #76]	; (10008bf4 <sms_monitor_configure_gpio+0x70>)
10008ba8:	4b13      	ldr	r3, [pc, #76]	; (10008bf8 <sms_monitor_configure_gpio+0x74>)
10008baa:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008bac:	2100      	movs	r1, #0
10008bae:	200e      	movs	r0, #14
10008bb0:	4b12      	ldr	r3, [pc, #72]	; (10008bfc <sms_monitor_configure_gpio+0x78>)
10008bb2:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008bb4:	ac01      	add	r4, sp, #4
10008bb6:	0020      	movs	r0, r4
10008bb8:	4b0a      	ldr	r3, [pc, #40]	; (10008be4 <sms_monitor_configure_gpio+0x60>)
10008bba:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008bbc:	2301      	movs	r3, #1
10008bbe:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008bc0:	0021      	movs	r1, r4
10008bc2:	200f      	movs	r0, #15
10008bc4:	4b08      	ldr	r3, [pc, #32]	; (10008be8 <sms_monitor_configure_gpio+0x64>)
10008bc6:	4798      	blx	r3
10008bc8:	2800      	cmp	r0, #0
10008bca:	d005      	beq.n	10008bd8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008bcc:	4807      	ldr	r0, [pc, #28]	; (10008bec <sms_monitor_configure_gpio+0x68>)
10008bce:	4b08      	ldr	r3, [pc, #32]	; (10008bf0 <sms_monitor_configure_gpio+0x6c>)
10008bd0:	4798      	blx	r3
10008bd2:	4808      	ldr	r0, [pc, #32]	; (10008bf4 <sms_monitor_configure_gpio+0x70>)
10008bd4:	4b08      	ldr	r3, [pc, #32]	; (10008bf8 <sms_monitor_configure_gpio+0x74>)
10008bd6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008bd8:	2100      	movs	r1, #0
10008bda:	200f      	movs	r0, #15
10008bdc:	4b07      	ldr	r3, [pc, #28]	; (10008bfc <sms_monitor_configure_gpio+0x78>)
10008bde:	4798      	blx	r3
}
10008be0:	b002      	add	sp, #8
10008be2:	bd10      	pop	{r4, pc}
10008be4:	1000a5ad 	.word	0x1000a5ad
10008be8:	1000a5bd 	.word	0x1000a5bd
10008bec:	10017434 	.word	0x10017434
10008bf0:	10012e11 	.word	0x10012e11
10008bf4:	100179f8 	.word	0x100179f8
10008bf8:	10012cf1 	.word	0x10012cf1
10008bfc:	1000a775 	.word	0x1000a775

10008c00 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008c00:	b570      	push	{r4, r5, r6, lr}
10008c02:	b084      	sub	sp, #16
10008c04:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008c06:	480c      	ldr	r0, [pc, #48]	; (10008c38 <sms_monitor_get_states+0x38>)
10008c08:	4b0c      	ldr	r3, [pc, #48]	; (10008c3c <sms_monitor_get_states+0x3c>)
10008c0a:	4798      	blx	r3
10008c0c:	4b0c      	ldr	r3, [pc, #48]	; (10008c40 <sms_monitor_get_states+0x40>)
10008c0e:	7819      	ldrb	r1, [r3, #0]
10008c10:	4b0c      	ldr	r3, [pc, #48]	; (10008c44 <sms_monitor_get_states+0x44>)
10008c12:	7818      	ldrb	r0, [r3, #0]
10008c14:	4b0c      	ldr	r3, [pc, #48]	; (10008c48 <sms_monitor_get_states+0x48>)
10008c16:	781d      	ldrb	r5, [r3, #0]
10008c18:	4b0c      	ldr	r3, [pc, #48]	; (10008c4c <sms_monitor_get_states+0x4c>)
10008c1a:	781e      	ldrb	r6, [r3, #0]
10008c1c:	4a0c      	ldr	r2, [pc, #48]	; (10008c50 <sms_monitor_get_states+0x50>)
10008c1e:	7b53      	ldrb	r3, [r2, #13]
10008c20:	7b12      	ldrb	r2, [r2, #12]
10008c22:	9603      	str	r6, [sp, #12]
10008c24:	9502      	str	r5, [sp, #8]
10008c26:	9001      	str	r0, [sp, #4]
10008c28:	9100      	str	r1, [sp, #0]
10008c2a:	0021      	movs	r1, r4
10008c2c:	4809      	ldr	r0, [pc, #36]	; (10008c54 <sms_monitor_get_states+0x54>)
10008c2e:	4c0a      	ldr	r4, [pc, #40]	; (10008c58 <sms_monitor_get_states+0x58>)
10008c30:	47a0      	blx	r4
}
10008c32:	b004      	add	sp, #16
10008c34:	bd70      	pop	{r4, r5, r6, pc}
10008c36:	46c0      	nop			; (mov r8, r8)
10008c38:	10017434 	.word	0x10017434
10008c3c:	10012e11 	.word	0x10012e11
10008c40:	1001abf0 	.word	0x1001abf0
10008c44:	1001ab14 	.word	0x1001ab14
10008c48:	1001ad2f 	.word	0x1001ad2f
10008c4c:	1001abec 	.word	0x1001abec
10008c50:	1001ac0c 	.word	0x1001ac0c
10008c54:	10017a18 	.word	0x10017a18
10008c58:	10012cf1 	.word	0x10012cf1

10008c5c <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008c5c:	b530      	push	{r4, r5, lr}
10008c5e:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008c60:	2010      	movs	r0, #16
10008c62:	4c14      	ldr	r4, [pc, #80]	; (10008cb4 <sms_i2c_master_configure+0x58>)
10008c64:	47a0      	blx	r4
10008c66:	4b14      	ldr	r3, [pc, #80]	; (10008cb8 <sms_i2c_master_configure+0x5c>)
10008c68:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008c6a:	2010      	movs	r0, #16
10008c6c:	47a0      	blx	r4
10008c6e:	4b13      	ldr	r3, [pc, #76]	; (10008cbc <sms_i2c_master_configure+0x60>)
10008c70:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008c72:	ac01      	add	r4, sp, #4
10008c74:	0020      	movs	r0, r4
10008c76:	4b12      	ldr	r3, [pc, #72]	; (10008cc0 <sms_i2c_master_configure+0x64>)
10008c78:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008c7a:	2303      	movs	r3, #3
10008c7c:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008c7e:	331b      	adds	r3, #27
10008c80:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008c82:	3b16      	subs	r3, #22
10008c84:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008c86:	3301      	adds	r3, #1
10008c88:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008c8a:	3b07      	subs	r3, #7
10008c8c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008c8e:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008c90:	4d0c      	ldr	r5, [pc, #48]	; (10008cc4 <sms_i2c_master_configure+0x68>)
10008c92:	4c0d      	ldr	r4, [pc, #52]	; (10008cc8 <sms_i2c_master_configure+0x6c>)
10008c94:	aa01      	add	r2, sp, #4
10008c96:	490d      	ldr	r1, [pc, #52]	; (10008ccc <sms_i2c_master_configure+0x70>)
10008c98:	0028      	movs	r0, r5
10008c9a:	47a0      	blx	r4
10008c9c:	2800      	cmp	r0, #0
10008c9e:	d1f9      	bne.n	10008c94 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008ca0:	4b08      	ldr	r3, [pc, #32]	; (10008cc4 <sms_i2c_master_configure+0x68>)
10008ca2:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008ca4:	2128      	movs	r1, #40	; 0x28
10008ca6:	5c53      	ldrb	r3, [r2, r1]
10008ca8:	07db      	lsls	r3, r3, #31
10008caa:	d4fc      	bmi.n	10008ca6 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008cac:	2301      	movs	r3, #1
10008cae:	7513      	strb	r3, [r2, #20]
}
10008cb0:	b007      	add	sp, #28
10008cb2:	bd30      	pop	{r4, r5, pc}
10008cb4:	10012279 	.word	0x10012279
10008cb8:	1001ad38 	.word	0x1001ad38
10008cbc:	1001ad18 	.word	0x1001ad18
10008cc0:	10008305 	.word	0x10008305
10008cc4:	1001ad24 	.word	0x1001ad24
10008cc8:	1000831d 	.word	0x1000831d
10008ccc:	40003000 	.word	0x40003000

10008cd0 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008cd2:	4c12      	ldr	r4, [pc, #72]	; (10008d1c <sms_i2c_master_write+0x4c>)
10008cd4:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008cd6:	1c50      	adds	r0, r2, #1
10008cd8:	b2c0      	uxtb	r0, r0
10008cda:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008cdc:	6860      	ldr	r0, [r4, #4]
10008cde:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008ce0:	2a00      	cmp	r2, #0
10008ce2:	d00e      	beq.n	10008d02 <sms_i2c_master_write+0x32>
10008ce4:	2000      	movs	r0, #0
10008ce6:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008ce8:	5c18      	ldrb	r0, [r3, r0]
10008cea:	6865      	ldr	r5, [r4, #4]
10008cec:	5468      	strb	r0, [r5, r1]
10008cee:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008cf0:	b2c9      	uxtb	r1, r1
10008cf2:	428a      	cmp	r2, r1
10008cf4:	d8f7      	bhi.n	10008ce6 <sms_i2c_master_write+0x16>
10008cf6:	e004      	b.n	10008d02 <sms_i2c_master_write+0x32>
10008cf8:	3c01      	subs	r4, #1
10008cfa:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008cfc:	2c00      	cmp	r4, #0
10008cfe:	d104      	bne.n	10008d0a <sms_i2c_master_write+0x3a>
10008d00:	e009      	b.n	10008d16 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008d02:	4c07      	ldr	r4, [pc, #28]	; (10008d20 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d04:	4e05      	ldr	r6, [pc, #20]	; (10008d1c <sms_i2c_master_write+0x4c>)
10008d06:	4d07      	ldr	r5, [pc, #28]	; (10008d24 <sms_i2c_master_write+0x54>)
10008d08:	4f07      	ldr	r7, [pc, #28]	; (10008d28 <sms_i2c_master_write+0x58>)
10008d0a:	0031      	movs	r1, r6
10008d0c:	0028      	movs	r0, r5
10008d0e:	47b8      	blx	r7
10008d10:	2800      	cmp	r0, #0
10008d12:	d1f1      	bne.n	10008cf8 <sms_i2c_master_write+0x28>
10008d14:	e001      	b.n	10008d1a <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008d16:	2001      	movs	r0, #1
10008d18:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008d1c:	1001ad38 	.word	0x1001ad38
10008d20:	000003e9 	.word	0x000003e9
10008d24:	1001ad24 	.word	0x1001ad24
10008d28:	100083b5 	.word	0x100083b5

10008d2c <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008d2e:	4647      	mov	r7, r8
10008d30:	b480      	push	{r7}
10008d32:	0017      	movs	r7, r2
10008d34:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008d36:	b280      	uxth	r0, r0
10008d38:	4b1d      	ldr	r3, [pc, #116]	; (10008db0 <sms_i2c_master_read+0x84>)
10008d3a:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008d3c:	2201      	movs	r2, #1
10008d3e:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008d40:	685b      	ldr	r3, [r3, #4]
10008d42:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008d44:	4b1b      	ldr	r3, [pc, #108]	; (10008db4 <sms_i2c_master_read+0x88>)
10008d46:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008d48:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d4a:	4c1b      	ldr	r4, [pc, #108]	; (10008db8 <sms_i2c_master_read+0x8c>)
10008d4c:	4e18      	ldr	r6, [pc, #96]	; (10008db0 <sms_i2c_master_read+0x84>)
10008d4e:	4d1b      	ldr	r5, [pc, #108]	; (10008dbc <sms_i2c_master_read+0x90>)
10008d50:	e003      	b.n	10008d5a <sms_i2c_master_read+0x2e>
10008d52:	3c01      	subs	r4, #1
10008d54:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008d56:	2c00      	cmp	r4, #0
10008d58:	d01f      	beq.n	10008d9a <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d5a:	0031      	movs	r1, r6
10008d5c:	4818      	ldr	r0, [pc, #96]	; (10008dc0 <sms_i2c_master_read+0x94>)
10008d5e:	47a8      	blx	r5
10008d60:	2800      	cmp	r0, #0
10008d62:	d1f6      	bne.n	10008d52 <sms_i2c_master_read+0x26>
10008d64:	4e14      	ldr	r6, [pc, #80]	; (10008db8 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008d66:	4d13      	ldr	r5, [pc, #76]	; (10008db4 <sms_i2c_master_read+0x88>)
10008d68:	4c16      	ldr	r4, [pc, #88]	; (10008dc4 <sms_i2c_master_read+0x98>)
10008d6a:	e003      	b.n	10008d74 <sms_i2c_master_read+0x48>
10008d6c:	3e01      	subs	r6, #1
10008d6e:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008d70:	2e00      	cmp	r6, #0
10008d72:	d015      	beq.n	10008da0 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008d74:	0029      	movs	r1, r5
10008d76:	4812      	ldr	r0, [pc, #72]	; (10008dc0 <sms_i2c_master_read+0x94>)
10008d78:	47a0      	blx	r4
10008d7a:	2800      	cmp	r0, #0
10008d7c:	d1f6      	bne.n	10008d6c <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008d7e:	2f00      	cmp	r7, #0
10008d80:	d011      	beq.n	10008da6 <sms_i2c_master_read+0x7a>
10008d82:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008d84:	490b      	ldr	r1, [pc, #44]	; (10008db4 <sms_i2c_master_read+0x88>)
10008d86:	684a      	ldr	r2, [r1, #4]
10008d88:	5cd2      	ldrb	r2, [r2, r3]
10008d8a:	4640      	mov	r0, r8
10008d8c:	54c2      	strb	r2, [r0, r3]
10008d8e:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008d90:	b2da      	uxtb	r2, r3
10008d92:	4297      	cmp	r7, r2
10008d94:	d8f7      	bhi.n	10008d86 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008d96:	2000      	movs	r0, #0
10008d98:	e006      	b.n	10008da8 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008d9a:	2001      	movs	r0, #1
10008d9c:	4240      	negs	r0, r0
10008d9e:	e003      	b.n	10008da8 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008da0:	2001      	movs	r0, #1
10008da2:	4240      	negs	r0, r0
10008da4:	e000      	b.n	10008da8 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008da6:	2000      	movs	r0, #0
10008da8:	bc04      	pop	{r2}
10008daa:	4690      	mov	r8, r2
10008dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008dae:	46c0      	nop			; (mov r8, r8)
10008db0:	1001ad38 	.word	0x1001ad38
10008db4:	1001ad18 	.word	0x1001ad18
10008db8:	000003e9 	.word	0x000003e9
10008dbc:	100083d9 	.word	0x100083d9
10008dc0:	1001ad24 	.word	0x1001ad24
10008dc4:	10008391 	.word	0x10008391

10008dc8 <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008dc8:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
10008dca:	2344      	movs	r3, #68	; 0x44
10008dcc:	4a06      	ldr	r2, [pc, #24]	; (10008de8 <sms_mpu_interrupt_callback+0x20>)
10008dce:	5cd3      	ldrb	r3, [r2, r3]
10008dd0:	2b00      	cmp	r3, #0
10008dd2:	d008      	beq.n	10008de6 <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
10008dd4:	2101      	movs	r1, #1
10008dd6:	2345      	movs	r3, #69	; 0x45
10008dd8:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008dda:	2300      	movs	r3, #0
10008ddc:	2200      	movs	r2, #0
10008dde:	3101      	adds	r1, #1
10008de0:	201e      	movs	r0, #30
10008de2:	4c02      	ldr	r4, [pc, #8]	; (10008dec <sms_mpu_interrupt_callback+0x24>)
10008de4:	47a0      	blx	r4
	}
}
10008de6:	bd10      	pop	{r4, pc}
10008de8:	1001ab18 	.word	0x1001ab18
10008dec:	1000d5d5 	.word	0x1000d5d5

10008df0 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
10008df0:	b510      	push	{r4, lr}
10008df2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008df4:	ac01      	add	r4, sp, #4
10008df6:	0020      	movs	r0, r4
10008df8:	4b0a      	ldr	r3, [pc, #40]	; (10008e24 <sms_mpu_configure_gpio+0x34>)
10008dfa:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008dfc:	2300      	movs	r3, #0
10008dfe:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008e00:	3302      	adds	r3, #2
10008e02:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008e04:	3b01      	subs	r3, #1
10008e06:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008e08:	0021      	movs	r1, r4
10008e0a:	201e      	movs	r0, #30
10008e0c:	4b06      	ldr	r3, [pc, #24]	; (10008e28 <sms_mpu_configure_gpio+0x38>)
10008e0e:	4798      	blx	r3
10008e10:	2800      	cmp	r0, #0
10008e12:	d005      	beq.n	10008e20 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008e14:	4805      	ldr	r0, [pc, #20]	; (10008e2c <sms_mpu_configure_gpio+0x3c>)
10008e16:	4b06      	ldr	r3, [pc, #24]	; (10008e30 <sms_mpu_configure_gpio+0x40>)
10008e18:	4798      	blx	r3
10008e1a:	4806      	ldr	r0, [pc, #24]	; (10008e34 <sms_mpu_configure_gpio+0x44>)
10008e1c:	4b06      	ldr	r3, [pc, #24]	; (10008e38 <sms_mpu_configure_gpio+0x48>)
10008e1e:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10008e20:	b002      	add	sp, #8
10008e22:	bd10      	pop	{r4, pc}
10008e24:	1000a5ad 	.word	0x1000a5ad
10008e28:	1000a5bd 	.word	0x1000a5bd
10008e2c:	10017434 	.word	0x10017434
10008e30:	10012e11 	.word	0x10012e11
10008e34:	10017a58 	.word	0x10017a58
10008e38:	10012cf1 	.word	0x10012cf1

10008e3c <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10008e3c:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10008e3e:	2202      	movs	r2, #2
10008e40:	4902      	ldr	r1, [pc, #8]	; (10008e4c <sms_mpu_register_callbacks+0x10>)
10008e42:	201e      	movs	r0, #30
10008e44:	4b02      	ldr	r3, [pc, #8]	; (10008e50 <sms_mpu_register_callbacks+0x14>)
10008e46:	4798      	blx	r3
}
10008e48:	bd10      	pop	{r4, pc}
10008e4a:	46c0      	nop			; (mov r8, r8)
10008e4c:	10008dc9 	.word	0x10008dc9
10008e50:	1000a94d 	.word	0x1000a94d

10008e54 <sms_mpu_define_services>:
	
    return 0;
}

void sms_mpu_define_services(void)
{
10008e54:	b510      	push	{r4, lr}
10008e56:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e58:	466b      	mov	r3, sp
10008e5a:	1dda      	adds	r2, r3, #7
10008e5c:	2300      	movs	r3, #0
10008e5e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
10008e60:	4c0e      	ldr	r4, [pc, #56]	; (10008e9c <sms_mpu_define_services+0x48>)
10008e62:	0021      	movs	r1, r4
10008e64:	2002      	movs	r0, #2
10008e66:	4b0e      	ldr	r3, [pc, #56]	; (10008ea0 <sms_mpu_define_services+0x4c>)
10008e68:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
10008e6a:	0020      	movs	r0, r4
10008e6c:	4b0d      	ldr	r3, [pc, #52]	; (10008ea4 <sms_mpu_define_services+0x50>)
10008e6e:	4798      	blx	r3
10008e70:	1e04      	subs	r4, r0, #0
10008e72:	d007      	beq.n	10008e84 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10008e74:	480c      	ldr	r0, [pc, #48]	; (10008ea8 <sms_mpu_define_services+0x54>)
10008e76:	4b0d      	ldr	r3, [pc, #52]	; (10008eac <sms_mpu_define_services+0x58>)
10008e78:	4798      	blx	r3
10008e7a:	0021      	movs	r1, r4
10008e7c:	480c      	ldr	r0, [pc, #48]	; (10008eb0 <sms_mpu_define_services+0x5c>)
10008e7e:	4b0d      	ldr	r3, [pc, #52]	; (10008eb4 <sms_mpu_define_services+0x60>)
10008e80:	4798      	blx	r3
10008e82:	e008      	b.n	10008e96 <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
10008e84:	4808      	ldr	r0, [pc, #32]	; (10008ea8 <sms_mpu_define_services+0x54>)
10008e86:	4b09      	ldr	r3, [pc, #36]	; (10008eac <sms_mpu_define_services+0x58>)
10008e88:	4798      	blx	r3
10008e8a:	2386      	movs	r3, #134	; 0x86
10008e8c:	4a0a      	ldr	r2, [pc, #40]	; (10008eb8 <sms_mpu_define_services+0x64>)
10008e8e:	5ad1      	ldrh	r1, [r2, r3]
10008e90:	480a      	ldr	r0, [pc, #40]	; (10008ebc <sms_mpu_define_services+0x68>)
10008e92:	4b08      	ldr	r3, [pc, #32]	; (10008eb4 <sms_mpu_define_services+0x60>)
10008e94:	4798      	blx	r3
    }
}
10008e96:	b002      	add	sp, #8
10008e98:	bd10      	pop	{r4, pc}
10008e9a:	46c0      	nop			; (mov r8, r8)
10008e9c:	1001ab8c 	.word	0x1001ab8c
10008ea0:	100088ad 	.word	0x100088ad
10008ea4:	10008889 	.word	0x10008889
10008ea8:	10017434 	.word	0x10017434
10008eac:	10012e11 	.word	0x10012e11
10008eb0:	10017a98 	.word	0x10017a98
10008eb4:	10012cf1 	.word	0x10012cf1
10008eb8:	1001ab18 	.word	0x1001ab18
10008ebc:	10017ad8 	.word	0x10017ad8

10008ec0 <writeByte>:
	}

}

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10008ec0:	b510      	push	{r4, lr}
10008ec2:	b082      	sub	sp, #8
10008ec4:	466b      	mov	r3, sp
10008ec6:	3307      	adds	r3, #7
10008ec8:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10008eca:	2201      	movs	r2, #1
10008ecc:	4c01      	ldr	r4, [pc, #4]	; (10008ed4 <writeByte+0x14>)
10008ece:	47a0      	blx	r4
}
10008ed0:	b002      	add	sp, #8
10008ed2:	bd10      	pop	{r4, pc}
10008ed4:	10008cd1 	.word	0x10008cd1

10008ed8 <sms_mpu_calibrate>:
	}
	return retVal;
}

void sms_mpu_calibrate(float *dest1, float *dest2)
{
10008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
10008eda:	465f      	mov	r7, fp
10008edc:	4656      	mov	r6, sl
10008ede:	464d      	mov	r5, r9
10008ee0:	4644      	mov	r4, r8
10008ee2:	b4f0      	push	{r4, r5, r6, r7}
10008ee4:	b093      	sub	sp, #76	; 0x4c
10008ee6:	9007      	str	r0, [sp, #28]
10008ee8:	9109      	str	r1, [sp, #36]	; 0x24
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10008eea:	2280      	movs	r2, #128	; 0x80
10008eec:	216b      	movs	r1, #107	; 0x6b
10008eee:	2069      	movs	r0, #105	; 0x69
10008ef0:	4ce2      	ldr	r4, [pc, #904]	; (1000927c <sms_mpu_calibrate+0x3a4>)
10008ef2:	47a0      	blx	r4
	delay_ms(100);
10008ef4:	2064      	movs	r0, #100	; 0x64
10008ef6:	4de2      	ldr	r5, [pc, #904]	; (10009280 <sms_mpu_calibrate+0x3a8>)
10008ef8:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10008efa:	2201      	movs	r2, #1
10008efc:	216b      	movs	r1, #107	; 0x6b
10008efe:	2069      	movs	r0, #105	; 0x69
10008f00:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10008f02:	2200      	movs	r2, #0
10008f04:	216c      	movs	r1, #108	; 0x6c
10008f06:	2069      	movs	r0, #105	; 0x69
10008f08:	47a0      	blx	r4
	delay_ms(200);
10008f0a:	20c8      	movs	r0, #200	; 0xc8
10008f0c:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10008f0e:	2200      	movs	r2, #0
10008f10:	2138      	movs	r1, #56	; 0x38
10008f12:	2069      	movs	r0, #105	; 0x69
10008f14:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10008f16:	2200      	movs	r2, #0
10008f18:	2123      	movs	r1, #35	; 0x23
10008f1a:	2069      	movs	r0, #105	; 0x69
10008f1c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10008f1e:	2200      	movs	r2, #0
10008f20:	216b      	movs	r1, #107	; 0x6b
10008f22:	2069      	movs	r0, #105	; 0x69
10008f24:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10008f26:	2200      	movs	r2, #0
10008f28:	2124      	movs	r1, #36	; 0x24
10008f2a:	2069      	movs	r0, #105	; 0x69
10008f2c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10008f2e:	2200      	movs	r2, #0
10008f30:	216a      	movs	r1, #106	; 0x6a
10008f32:	2069      	movs	r0, #105	; 0x69
10008f34:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10008f36:	220c      	movs	r2, #12
10008f38:	216a      	movs	r1, #106	; 0x6a
10008f3a:	2069      	movs	r0, #105	; 0x69
10008f3c:	47a0      	blx	r4
	delay_ms(15);
10008f3e:	200f      	movs	r0, #15
10008f40:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10008f42:	2201      	movs	r2, #1
10008f44:	211a      	movs	r1, #26
10008f46:	2069      	movs	r0, #105	; 0x69
10008f48:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10008f4a:	2200      	movs	r2, #0
10008f4c:	2119      	movs	r1, #25
10008f4e:	2069      	movs	r0, #105	; 0x69
10008f50:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10008f52:	2200      	movs	r2, #0
10008f54:	211b      	movs	r1, #27
10008f56:	2069      	movs	r0, #105	; 0x69
10008f58:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10008f5a:	2200      	movs	r2, #0
10008f5c:	211c      	movs	r1, #28
10008f5e:	2069      	movs	r0, #105	; 0x69
10008f60:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10008f62:	2240      	movs	r2, #64	; 0x40
10008f64:	216a      	movs	r1, #106	; 0x6a
10008f66:	2069      	movs	r0, #105	; 0x69
10008f68:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10008f6a:	2278      	movs	r2, #120	; 0x78
10008f6c:	2123      	movs	r1, #35	; 0x23
10008f6e:	2069      	movs	r0, #105	; 0x69
10008f70:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10008f72:	2028      	movs	r0, #40	; 0x28
10008f74:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10008f76:	2200      	movs	r2, #0
10008f78:	2123      	movs	r1, #35	; 0x23
10008f7a:	2069      	movs	r0, #105	; 0x69
10008f7c:	47a0      	blx	r4
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008f7e:	ac0f      	add	r4, sp, #60	; 0x3c
10008f80:	0023      	movs	r3, r4
10008f82:	2202      	movs	r2, #2
10008f84:	2172      	movs	r1, #114	; 0x72
10008f86:	2069      	movs	r0, #105	; 0x69
10008f88:	4dbe      	ldr	r5, [pc, #760]	; (10009284 <sms_mpu_calibrate+0x3ac>)
10008f8a:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10008f8c:	7820      	ldrb	r0, [r4, #0]
10008f8e:	0200      	lsls	r0, r0, #8
10008f90:	7863      	ldrb	r3, [r4, #1]
10008f92:	4318      	orrs	r0, r3
10008f94:	210c      	movs	r1, #12
10008f96:	4bbc      	ldr	r3, [pc, #752]	; (10009288 <sms_mpu_calibrate+0x3b0>)
10008f98:	4798      	blx	r3
10008f9a:	b283      	uxth	r3, r0
10008f9c:	9306      	str	r3, [sp, #24]
	
	for (ii = 0; ii < packet_count; ii++) {
10008f9e:	2b00      	cmp	r3, #0
10008fa0:	d042      	beq.n	10009028 <sms_mpu_calibrate+0x150>
10008fa2:	2300      	movs	r3, #0
10008fa4:	4698      	mov	r8, r3
10008fa6:	2700      	movs	r7, #0
10008fa8:	469b      	mov	fp, r3
10008faa:	469a      	mov	sl, r3
10008fac:	4699      	mov	r9, r3
10008fae:	2500      	movs	r5, #0
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10008fb0:	ac0f      	add	r4, sp, #60	; 0x3c
10008fb2:	9304      	str	r3, [sp, #16]
10008fb4:	0023      	movs	r3, r4
10008fb6:	220c      	movs	r2, #12
10008fb8:	2174      	movs	r1, #116	; 0x74
10008fba:	2069      	movs	r0, #105	; 0x69
10008fbc:	4eb1      	ldr	r6, [pc, #708]	; (10009284 <sms_mpu_calibrate+0x3ac>)
10008fbe:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10008fc0:	7823      	ldrb	r3, [r4, #0]
10008fc2:	021b      	lsls	r3, r3, #8
10008fc4:	7862      	ldrb	r2, [r4, #1]
10008fc6:	4313      	orrs	r3, r2
10008fc8:	b21b      	sxth	r3, r3
10008fca:	9a04      	ldr	r2, [sp, #16]
10008fcc:	4694      	mov	ip, r2
10008fce:	449c      	add	ip, r3
10008fd0:	4663      	mov	r3, ip
10008fd2:	9304      	str	r3, [sp, #16]
		accel_bias[1] += (int32_t) accel_temp[1];
10008fd4:	78a3      	ldrb	r3, [r4, #2]
10008fd6:	021b      	lsls	r3, r3, #8
10008fd8:	78e2      	ldrb	r2, [r4, #3]
10008fda:	4313      	orrs	r3, r2
10008fdc:	b21b      	sxth	r3, r3
10008fde:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10008fe0:	7923      	ldrb	r3, [r4, #4]
10008fe2:	021b      	lsls	r3, r3, #8
10008fe4:	7962      	ldrb	r2, [r4, #5]
10008fe6:	4313      	orrs	r3, r2
10008fe8:	b21b      	sxth	r3, r3
10008fea:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10008fec:	79a3      	ldrb	r3, [r4, #6]
10008fee:	021b      	lsls	r3, r3, #8
10008ff0:	79e2      	ldrb	r2, [r4, #7]
10008ff2:	4313      	orrs	r3, r2
10008ff4:	b21b      	sxth	r3, r3
10008ff6:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10008ff8:	7a23      	ldrb	r3, [r4, #8]
10008ffa:	021b      	lsls	r3, r3, #8
10008ffc:	7a62      	ldrb	r2, [r4, #9]
10008ffe:	4313      	orrs	r3, r2
10009000:	b21b      	sxth	r3, r3
10009002:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009004:	7aa3      	ldrb	r3, [r4, #10]
10009006:	021b      	lsls	r3, r3, #8
10009008:	7ae2      	ldrb	r2, [r4, #11]
1000900a:	4313      	orrs	r3, r2
1000900c:	b21b      	sxth	r3, r3
1000900e:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009010:	3501      	adds	r5, #1
10009012:	b2ad      	uxth	r5, r5
10009014:	9b06      	ldr	r3, [sp, #24]
10009016:	42ab      	cmp	r3, r5
10009018:	d1cc      	bne.n	10008fb4 <sms_mpu_calibrate+0xdc>
1000901a:	4653      	mov	r3, sl
1000901c:	46ba      	mov	sl, r7
1000901e:	465a      	mov	r2, fp
10009020:	46e3      	mov	fp, ip
10009022:	0016      	movs	r6, r2
10009024:	001f      	movs	r7, r3
10009026:	e006      	b.n	10009036 <sms_mpu_calibrate+0x15e>

void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009028:	2300      	movs	r3, #0
1000902a:	4698      	mov	r8, r3
1000902c:	2700      	movs	r7, #0
1000902e:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009030:	469b      	mov	fp, r3
10009032:	469a      	mov	sl, r3
10009034:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009036:	4c95      	ldr	r4, [pc, #596]	; (1000928c <sms_mpu_calibrate+0x3b4>)
10009038:	9906      	ldr	r1, [sp, #24]
1000903a:	4658      	mov	r0, fp
1000903c:	47a0      	blx	r4
1000903e:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009040:	9b06      	ldr	r3, [sp, #24]
10009042:	469b      	mov	fp, r3
10009044:	0019      	movs	r1, r3
10009046:	4650      	mov	r0, sl
10009048:	47a0      	blx	r4
1000904a:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
1000904c:	4659      	mov	r1, fp
1000904e:	4648      	mov	r0, r9
10009050:	47a0      	blx	r4
10009052:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009054:	4659      	mov	r1, fp
10009056:	4640      	mov	r0, r8
10009058:	47a0      	blx	r4
1000905a:	9004      	str	r0, [sp, #16]
	gyro_bias[1]  /= (int32_t) packet_count;
1000905c:	4659      	mov	r1, fp
1000905e:	0038      	movs	r0, r7
10009060:	47a0      	blx	r4
10009062:	9006      	str	r0, [sp, #24]
	gyro_bias[2]  /= (int32_t) packet_count;
10009064:	4659      	mov	r1, fp
10009066:	0030      	movs	r0, r6
10009068:	47a0      	blx	r4
1000906a:	9008      	str	r0, [sp, #32]
	
	if(accel_bias[2] > 0L) {
1000906c:	464b      	mov	r3, r9
1000906e:	2b00      	cmp	r3, #0
10009070:	dd03      	ble.n	1000907a <sms_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009072:	4b87      	ldr	r3, [pc, #540]	; (10009290 <sms_mpu_calibrate+0x3b8>)
10009074:	444b      	add	r3, r9
10009076:	469b      	mov	fp, r3
10009078:	e003      	b.n	10009082 <sms_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
1000907a:	2380      	movs	r3, #128	; 0x80
1000907c:	01db      	lsls	r3, r3, #7
1000907e:	444b      	add	r3, r9
10009080:	469b      	mov	fp, r3
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009082:	9b04      	ldr	r3, [sp, #16]
10009084:	4259      	negs	r1, r3
10009086:	17ca      	asrs	r2, r1, #31
10009088:	2303      	movs	r3, #3
1000908a:	401a      	ands	r2, r3
1000908c:	1852      	adds	r2, r2, r1
1000908e:	1091      	asrs	r1, r2, #2
10009090:	1292      	asrs	r2, r2, #10
10009092:	b2d2      	uxtb	r2, r2
10009094:	ac0f      	add	r4, sp, #60	; 0x3c
10009096:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009098:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
1000909a:	9906      	ldr	r1, [sp, #24]
1000909c:	4248      	negs	r0, r1
1000909e:	17c1      	asrs	r1, r0, #31
100090a0:	4019      	ands	r1, r3
100090a2:	1809      	adds	r1, r1, r0
100090a4:	1088      	asrs	r0, r1, #2
100090a6:	1289      	asrs	r1, r1, #10
100090a8:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100090aa:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100090ac:	9e08      	ldr	r6, [sp, #32]
100090ae:	4271      	negs	r1, r6
100090b0:	17c8      	asrs	r0, r1, #31
100090b2:	4003      	ands	r3, r0
100090b4:	185b      	adds	r3, r3, r1
100090b6:	1099      	asrs	r1, r3, #2
100090b8:	129b      	asrs	r3, r3, #10
100090ba:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100090bc:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100090be:	2113      	movs	r1, #19
100090c0:	2069      	movs	r0, #105	; 0x69
100090c2:	4e6e      	ldr	r6, [pc, #440]	; (1000927c <sms_mpu_calibrate+0x3a4>)
100090c4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
100090c6:	7862      	ldrb	r2, [r4, #1]
100090c8:	2114      	movs	r1, #20
100090ca:	2069      	movs	r0, #105	; 0x69
100090cc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
100090ce:	78a2      	ldrb	r2, [r4, #2]
100090d0:	2115      	movs	r1, #21
100090d2:	2069      	movs	r0, #105	; 0x69
100090d4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
100090d6:	78e2      	ldrb	r2, [r4, #3]
100090d8:	2116      	movs	r1, #22
100090da:	2069      	movs	r0, #105	; 0x69
100090dc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
100090de:	7922      	ldrb	r2, [r4, #4]
100090e0:	2117      	movs	r1, #23
100090e2:	2069      	movs	r0, #105	; 0x69
100090e4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
100090e6:	7962      	ldrb	r2, [r4, #5]
100090e8:	2118      	movs	r1, #24
100090ea:	2069      	movs	r0, #105	; 0x69
100090ec:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
100090ee:	4f69      	ldr	r7, [pc, #420]	; (10009294 <sms_mpu_calibrate+0x3bc>)
100090f0:	9804      	ldr	r0, [sp, #16]
100090f2:	47b8      	blx	r7
100090f4:	4e68      	ldr	r6, [pc, #416]	; (10009298 <sms_mpu_calibrate+0x3c0>)
100090f6:	4969      	ldr	r1, [pc, #420]	; (1000929c <sms_mpu_calibrate+0x3c4>)
100090f8:	47b0      	blx	r6
100090fa:	9b07      	ldr	r3, [sp, #28]
100090fc:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
100090fe:	9806      	ldr	r0, [sp, #24]
10009100:	47b8      	blx	r7
10009102:	4966      	ldr	r1, [pc, #408]	; (1000929c <sms_mpu_calibrate+0x3c4>)
10009104:	47b0      	blx	r6
10009106:	9b07      	ldr	r3, [sp, #28]
10009108:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
1000910a:	9808      	ldr	r0, [sp, #32]
1000910c:	47b8      	blx	r7
1000910e:	4963      	ldr	r1, [pc, #396]	; (1000929c <sms_mpu_calibrate+0x3c4>)
10009110:	47b0      	blx	r6
10009112:	9b07      	ldr	r3, [sp, #28]
10009114:	6098      	str	r0, [r3, #8]
	DBG_LOG("x-Sensitivity = %d", gyrosensitivity);
10009116:	4862      	ldr	r0, [pc, #392]	; (100092a0 <sms_mpu_calibrate+0x3c8>)
10009118:	4e62      	ldr	r6, [pc, #392]	; (100092a4 <sms_mpu_calibrate+0x3cc>)
1000911a:	47b0      	blx	r6
1000911c:	2183      	movs	r1, #131	; 0x83
1000911e:	4862      	ldr	r0, [pc, #392]	; (100092a8 <sms_mpu_calibrate+0x3d0>)
10009120:	4f62      	ldr	r7, [pc, #392]	; (100092ac <sms_mpu_calibrate+0x3d4>)
10009122:	47b8      	blx	r7
	DBG_LOG("x-gyro_bias = %d", gyro_bias[0]);
10009124:	485e      	ldr	r0, [pc, #376]	; (100092a0 <sms_mpu_calibrate+0x3c8>)
10009126:	47b0      	blx	r6
10009128:	9904      	ldr	r1, [sp, #16]
1000912a:	4861      	ldr	r0, [pc, #388]	; (100092b0 <sms_mpu_calibrate+0x3d8>)
1000912c:	47b8      	blx	r7
	DBG_LOG("dest1: %f, %f, %f", dest1[0], dest1[1], dest1[2]);
1000912e:	485c      	ldr	r0, [pc, #368]	; (100092a0 <sms_mpu_calibrate+0x3c8>)
10009130:	47b0      	blx	r6
10009132:	4a60      	ldr	r2, [pc, #384]	; (100092b4 <sms_mpu_calibrate+0x3dc>)
10009134:	4691      	mov	r9, r2
10009136:	9b07      	ldr	r3, [sp, #28]
10009138:	6818      	ldr	r0, [r3, #0]
1000913a:	4790      	blx	r2
1000913c:	9004      	str	r0, [sp, #16]
1000913e:	9105      	str	r1, [sp, #20]
10009140:	9b07      	ldr	r3, [sp, #28]
10009142:	6898      	ldr	r0, [r3, #8]
10009144:	47c8      	blx	r9
10009146:	9002      	str	r0, [sp, #8]
10009148:	9103      	str	r1, [sp, #12]
1000914a:	9b07      	ldr	r3, [sp, #28]
1000914c:	6858      	ldr	r0, [r3, #4]
1000914e:	47c8      	blx	r9
10009150:	9000      	str	r0, [sp, #0]
10009152:	9101      	str	r1, [sp, #4]
10009154:	9a04      	ldr	r2, [sp, #16]
10009156:	9b05      	ldr	r3, [sp, #20]
10009158:	4857      	ldr	r0, [pc, #348]	; (100092b8 <sms_mpu_calibrate+0x3e0>)
1000915a:	47b8      	blx	r7
	DBG_LOG("Floating point: %e", 3.1415287);
1000915c:	4850      	ldr	r0, [pc, #320]	; (100092a0 <sms_mpu_calibrate+0x3c8>)
1000915e:	47b0      	blx	r6
10009160:	4a56      	ldr	r2, [pc, #344]	; (100092bc <sms_mpu_calibrate+0x3e4>)
10009162:	4b57      	ldr	r3, [pc, #348]	; (100092c0 <sms_mpu_calibrate+0x3e8>)
10009164:	4857      	ldr	r0, [pc, #348]	; (100092c4 <sms_mpu_calibrate+0x3ec>)
10009166:	47b8      	blx	r7
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009168:	0023      	movs	r3, r4
1000916a:	2202      	movs	r2, #2
1000916c:	2177      	movs	r1, #119	; 0x77
1000916e:	2069      	movs	r0, #105	; 0x69
10009170:	4e44      	ldr	r6, [pc, #272]	; (10009284 <sms_mpu_calibrate+0x3ac>)
10009172:	46b0      	mov	r8, r6
10009174:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009176:	7827      	ldrb	r7, [r4, #0]
10009178:	023f      	lsls	r7, r7, #8
1000917a:	7863      	ldrb	r3, [r4, #1]
1000917c:	431f      	orrs	r7, r3
1000917e:	970c      	str	r7, [sp, #48]	; 0x30
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009180:	0023      	movs	r3, r4
10009182:	2202      	movs	r2, #2
10009184:	217a      	movs	r1, #122	; 0x7a
10009186:	2069      	movs	r0, #105	; 0x69
10009188:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
1000918a:	7826      	ldrb	r6, [r4, #0]
1000918c:	0236      	lsls	r6, r6, #8
1000918e:	7863      	ldrb	r3, [r4, #1]
10009190:	431e      	orrs	r6, r3
10009192:	960d      	str	r6, [sp, #52]	; 0x34
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009194:	0023      	movs	r3, r4
10009196:	2202      	movs	r2, #2
10009198:	217d      	movs	r1, #125	; 0x7d
1000919a:	2069      	movs	r0, #105	; 0x69
1000919c:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
1000919e:	7823      	ldrb	r3, [r4, #0]
100091a0:	021b      	lsls	r3, r3, #8
100091a2:	7861      	ldrb	r1, [r4, #1]
100091a4:	4319      	orrs	r1, r3
100091a6:	910e      	str	r1, [sp, #56]	; 0x38
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
100091a8:	ab0b      	add	r3, sp, #44	; 0x2c
100091aa:	2200      	movs	r2, #0
100091ac:	701a      	strb	r2, [r3, #0]
100091ae:	705a      	strb	r2, [r3, #1]
100091b0:	709a      	strb	r2, [r3, #2]
100091b2:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
100091b4:	2401      	movs	r4, #1
100091b6:	009a      	lsls	r2, r3, #2
100091b8:	a80c      	add	r0, sp, #48	; 0x30
100091ba:	5812      	ldr	r2, [r2, r0]
100091bc:	4222      	tst	r2, r4
100091be:	d001      	beq.n	100091c4 <sms_mpu_calibrate+0x2ec>
100091c0:	aa0b      	add	r2, sp, #44	; 0x2c
100091c2:	549c      	strb	r4, [r3, r2]
100091c4:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
100091c6:	2b03      	cmp	r3, #3
100091c8:	d1f5      	bne.n	100091b6 <sms_mpu_calibrate+0x2de>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
100091ca:	17ea      	asrs	r2, r5, #31
100091cc:	3304      	adds	r3, #4
100091ce:	401a      	ands	r2, r3
100091d0:	1952      	adds	r2, r2, r5
100091d2:	10d2      	asrs	r2, r2, #3
100091d4:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
100091d6:	4652      	mov	r2, sl
100091d8:	17d0      	asrs	r0, r2, #31
100091da:	4018      	ands	r0, r3
100091dc:	4450      	add	r0, sl
100091de:	10c0      	asrs	r0, r0, #3
100091e0:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
100091e2:	465a      	mov	r2, fp
100091e4:	17d2      	asrs	r2, r2, #31
100091e6:	4013      	ands	r3, r2
100091e8:	445b      	add	r3, fp
100091ea:	10da      	asrs	r2, r3, #3
100091ec:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
100091ee:	123a      	asrs	r2, r7, #8
100091f0:	b2d2      	uxtb	r2, r2
100091f2:	ac0f      	add	r4, sp, #60	; 0x3c
100091f4:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100091f6:	a90b      	add	r1, sp, #44	; 0x2c
100091f8:	7808      	ldrb	r0, [r1, #0]
100091fa:	4307      	orrs	r7, r0
100091fc:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100091fe:	1230      	asrs	r0, r6, #8
10009200:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009202:	7848      	ldrb	r0, [r1, #1]
10009204:	4306      	orrs	r6, r0
10009206:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009208:	1218      	asrs	r0, r3, #8
1000920a:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000920c:	7889      	ldrb	r1, [r1, #2]
1000920e:	430b      	orrs	r3, r1
10009210:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009212:	2177      	movs	r1, #119	; 0x77
10009214:	2069      	movs	r0, #105	; 0x69
10009216:	4e19      	ldr	r6, [pc, #100]	; (1000927c <sms_mpu_calibrate+0x3a4>)
10009218:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
1000921a:	7862      	ldrb	r2, [r4, #1]
1000921c:	2178      	movs	r1, #120	; 0x78
1000921e:	2069      	movs	r0, #105	; 0x69
10009220:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009222:	78a2      	ldrb	r2, [r4, #2]
10009224:	217a      	movs	r1, #122	; 0x7a
10009226:	2069      	movs	r0, #105	; 0x69
10009228:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
1000922a:	78e2      	ldrb	r2, [r4, #3]
1000922c:	217b      	movs	r1, #123	; 0x7b
1000922e:	2069      	movs	r0, #105	; 0x69
10009230:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009232:	7922      	ldrb	r2, [r4, #4]
10009234:	217d      	movs	r1, #125	; 0x7d
10009236:	2069      	movs	r0, #105	; 0x69
10009238:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
1000923a:	7962      	ldrb	r2, [r4, #5]
1000923c:	217e      	movs	r1, #126	; 0x7e
1000923e:	2069      	movs	r0, #105	; 0x69
10009240:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009242:	4e14      	ldr	r6, [pc, #80]	; (10009294 <sms_mpu_calibrate+0x3bc>)
10009244:	0028      	movs	r0, r5
10009246:	47b0      	blx	r6
10009248:	4c1f      	ldr	r4, [pc, #124]	; (100092c8 <sms_mpu_calibrate+0x3f0>)
1000924a:	21e2      	movs	r1, #226	; 0xe2
1000924c:	0589      	lsls	r1, r1, #22
1000924e:	47a0      	blx	r4
10009250:	9d09      	ldr	r5, [sp, #36]	; 0x24
10009252:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009254:	4650      	mov	r0, sl
10009256:	47b0      	blx	r6
10009258:	21e2      	movs	r1, #226	; 0xe2
1000925a:	0589      	lsls	r1, r1, #22
1000925c:	47a0      	blx	r4
1000925e:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009260:	4658      	mov	r0, fp
10009262:	47b0      	blx	r6
10009264:	21e2      	movs	r1, #226	; 0xe2
10009266:	0589      	lsls	r1, r1, #22
10009268:	47a0      	blx	r4
1000926a:	60a8      	str	r0, [r5, #8]
	//DBG_LOG("accelsensitivity")
}
1000926c:	b013      	add	sp, #76	; 0x4c
1000926e:	bc3c      	pop	{r2, r3, r4, r5}
10009270:	4690      	mov	r8, r2
10009272:	4699      	mov	r9, r3
10009274:	46a2      	mov	sl, r4
10009276:	46ab      	mov	fp, r5
10009278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000927a:	46c0      	nop			; (mov r8, r8)
1000927c:	10008ec1 	.word	0x10008ec1
10009280:	10009f19 	.word	0x10009f19
10009284:	10008d2d 	.word	0x10008d2d
10009288:	10014cf9 	.word	0x10014cf9
1000928c:	10014e0d 	.word	0x10014e0d
10009290:	ffffc000 	.word	0xffffc000
10009294:	10015551 	.word	0x10015551
10009298:	100150f5 	.word	0x100150f5
1000929c:	43030000 	.word	0x43030000
100092a0:	10017434 	.word	0x10017434
100092a4:	10012e11 	.word	0x10012e11
100092a8:	10017b18 	.word	0x10017b18
100092ac:	10012cf1 	.word	0x10012cf1
100092b0:	10017b2c 	.word	0x10017b2c
100092b4:	10017239 	.word	0x10017239
100092b8:	10017b40 	.word	0x10017b40
100092bc:	cc8f902b 	.word	0xcc8f902b
100092c0:	400921d9 	.word	0x400921d9
100092c4:	10017b54 	.word	0x10017b54
100092c8:	10015329 	.word	0x10015329

100092cc <sms_mpu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}

void sms_mpu_comp_initialize(float *destination)
{
100092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100092ce:	465f      	mov	r7, fp
100092d0:	4656      	mov	r6, sl
100092d2:	464d      	mov	r5, r9
100092d4:	4644      	mov	r4, r8
100092d6:	b4f0      	push	{r4, r5, r6, r7}
100092d8:	b083      	sub	sp, #12
100092da:	0007      	movs	r7, r0
	uint8_t m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
	uint8_t m_mode = 0x02;	// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
100092dc:	2200      	movs	r2, #0
100092de:	210a      	movs	r1, #10
100092e0:	200c      	movs	r0, #12
100092e2:	4d2b      	ldr	r5, [pc, #172]	; (10009390 <sms_mpu_comp_initialize+0xc4>)
100092e4:	47a8      	blx	r5
	delay_ms(10);
100092e6:	200a      	movs	r0, #10
100092e8:	4b2a      	ldr	r3, [pc, #168]	; (10009394 <sms_mpu_comp_initialize+0xc8>)
100092ea:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
100092ec:	220f      	movs	r2, #15
100092ee:	210a      	movs	r1, #10
100092f0:	200c      	movs	r0, #12
100092f2:	47a8      	blx	r5
	delay_ms(10);
100092f4:	200a      	movs	r0, #10
100092f6:	4b27      	ldr	r3, [pc, #156]	; (10009394 <sms_mpu_comp_initialize+0xc8>)
100092f8:	4798      	blx	r3
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100092fa:	ae01      	add	r6, sp, #4
100092fc:	0033      	movs	r3, r6
100092fe:	2203      	movs	r2, #3
10009300:	2110      	movs	r1, #16
10009302:	200c      	movs	r0, #12
10009304:	4c24      	ldr	r4, [pc, #144]	; (10009398 <sms_mpu_comp_initialize+0xcc>)
10009306:	47a0      	blx	r4
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009308:	7830      	ldrb	r0, [r6, #0]
1000930a:	3880      	subs	r0, #128	; 0x80
1000930c:	4b23      	ldr	r3, [pc, #140]	; (1000939c <sms_mpu_comp_initialize+0xd0>)
1000930e:	469b      	mov	fp, r3
10009310:	4798      	blx	r3
10009312:	4b23      	ldr	r3, [pc, #140]	; (100093a0 <sms_mpu_comp_initialize+0xd4>)
10009314:	469a      	mov	sl, r3
10009316:	4798      	blx	r3
10009318:	4b22      	ldr	r3, [pc, #136]	; (100093a4 <sms_mpu_comp_initialize+0xd8>)
1000931a:	4699      	mov	r9, r3
1000931c:	2200      	movs	r2, #0
1000931e:	4b22      	ldr	r3, [pc, #136]	; (100093a8 <sms_mpu_comp_initialize+0xdc>)
10009320:	47c8      	blx	r9
10009322:	4b22      	ldr	r3, [pc, #136]	; (100093ac <sms_mpu_comp_initialize+0xe0>)
10009324:	4698      	mov	r8, r3
10009326:	2200      	movs	r2, #0
10009328:	4b21      	ldr	r3, [pc, #132]	; (100093b0 <sms_mpu_comp_initialize+0xe4>)
1000932a:	47c0      	blx	r8
1000932c:	4b21      	ldr	r3, [pc, #132]	; (100093b4 <sms_mpu_comp_initialize+0xe8>)
1000932e:	4798      	blx	r3
10009330:	6038      	str	r0, [r7, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009332:	7870      	ldrb	r0, [r6, #1]
10009334:	3880      	subs	r0, #128	; 0x80
10009336:	47d8      	blx	fp
10009338:	47d0      	blx	sl
1000933a:	2200      	movs	r2, #0
1000933c:	4b1a      	ldr	r3, [pc, #104]	; (100093a8 <sms_mpu_comp_initialize+0xdc>)
1000933e:	47c8      	blx	r9
10009340:	2200      	movs	r2, #0
10009342:	4b1b      	ldr	r3, [pc, #108]	; (100093b0 <sms_mpu_comp_initialize+0xe4>)
10009344:	47c0      	blx	r8
10009346:	4b1b      	ldr	r3, [pc, #108]	; (100093b4 <sms_mpu_comp_initialize+0xe8>)
10009348:	4798      	blx	r3
1000934a:	6078      	str	r0, [r7, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
1000934c:	78b0      	ldrb	r0, [r6, #2]
1000934e:	3880      	subs	r0, #128	; 0x80
10009350:	47d8      	blx	fp
10009352:	47d0      	blx	sl
10009354:	2200      	movs	r2, #0
10009356:	4b14      	ldr	r3, [pc, #80]	; (100093a8 <sms_mpu_comp_initialize+0xdc>)
10009358:	47c8      	blx	r9
1000935a:	2200      	movs	r2, #0
1000935c:	4b14      	ldr	r3, [pc, #80]	; (100093b0 <sms_mpu_comp_initialize+0xe4>)
1000935e:	47c0      	blx	r8
10009360:	4b14      	ldr	r3, [pc, #80]	; (100093b4 <sms_mpu_comp_initialize+0xe8>)
10009362:	4798      	blx	r3
10009364:	60b8      	str	r0, [r7, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009366:	2200      	movs	r2, #0
10009368:	210a      	movs	r1, #10
1000936a:	200c      	movs	r0, #12
1000936c:	47a8      	blx	r5
	delay_ms(10);
1000936e:	200a      	movs	r0, #10
10009370:	4b08      	ldr	r3, [pc, #32]	; (10009394 <sms_mpu_comp_initialize+0xc8>)
10009372:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, m_scale << 4 | m_mode); // Set magnetometer data resolution and sample ODR
10009374:	2212      	movs	r2, #18
10009376:	210a      	movs	r1, #10
10009378:	200c      	movs	r0, #12
1000937a:	47a8      	blx	r5
	delay_ms(10);
1000937c:	200a      	movs	r0, #10
1000937e:	4b05      	ldr	r3, [pc, #20]	; (10009394 <sms_mpu_comp_initialize+0xc8>)
10009380:	4798      	blx	r3
}
10009382:	b003      	add	sp, #12
10009384:	bc3c      	pop	{r2, r3, r4, r5}
10009386:	4690      	mov	r8, r2
10009388:	4699      	mov	r9, r3
1000938a:	46a2      	mov	sl, r4
1000938c:	46ab      	mov	fp, r5
1000938e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009390:	10008ec1 	.word	0x10008ec1
10009394:	10009f19 	.word	0x10009f19
10009398:	10008d2d 	.word	0x10008d2d
1000939c:	10015551 	.word	0x10015551
100093a0:	10017239 	.word	0x10017239
100093a4:	100164fd 	.word	0x100164fd
100093a8:	3f700000 	.word	0x3f700000
100093ac:	1001565d 	.word	0x1001565d
100093b0:	3ff00000 	.word	0x3ff00000
100093b4:	100172e1 	.word	0x100172e1

100093b8 <readByte>:
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
100093b8:	b530      	push	{r4, r5, lr}
100093ba:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
100093bc:	ac01      	add	r4, sp, #4
100093be:	0023      	movs	r3, r4
100093c0:	2201      	movs	r2, #1
100093c2:	4d02      	ldr	r5, [pc, #8]	; (100093cc <readByte+0x14>)
100093c4:	47a8      	blx	r5
	return data[0];
100093c6:	7820      	ldrb	r0, [r4, #0]
}
100093c8:	b003      	add	sp, #12
100093ca:	bd30      	pop	{r4, r5, pc}
100093cc:	10008d2d 	.word	0x10008d2d

100093d0 <sms_mpu_comp_check>:
	}
	return retVal;
}

int sms_mpu_comp_check(void)
{
100093d0:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
100093d2:	2100      	movs	r1, #0
100093d4:	200c      	movs	r0, #12
100093d6:	4b07      	ldr	r3, [pc, #28]	; (100093f4 <sms_mpu_comp_check+0x24>)
100093d8:	4798      	blx	r3
	if(d == 0x48) {
100093da:	2848      	cmp	r0, #72	; 0x48
100093dc:	d107      	bne.n	100093ee <sms_mpu_comp_check+0x1e>
		DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
100093de:	4806      	ldr	r0, [pc, #24]	; (100093f8 <sms_mpu_comp_check+0x28>)
100093e0:	4b06      	ldr	r3, [pc, #24]	; (100093fc <sms_mpu_comp_check+0x2c>)
100093e2:	4798      	blx	r3
100093e4:	4806      	ldr	r0, [pc, #24]	; (10009400 <sms_mpu_comp_check+0x30>)
100093e6:	4b07      	ldr	r3, [pc, #28]	; (10009404 <sms_mpu_comp_check+0x34>)
100093e8:	4798      	blx	r3
		retVal = 0;
100093ea:	2000      	movs	r0, #0
100093ec:	e001      	b.n	100093f2 <sms_mpu_comp_check+0x22>
	return retVal;
}

int sms_mpu_comp_check(void)
{
	int retVal = -1;
100093ee:	2001      	movs	r0, #1
100093f0:	4240      	negs	r0, r0
	if(d == 0x48) {
		DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
}
100093f2:	bd10      	pop	{r4, pc}
100093f4:	100093b9 	.word	0x100093b9
100093f8:	10017434 	.word	0x10017434
100093fc:	10012e11 	.word	0x10012e11
10009400:	10017b68 	.word	0x10017b68
10009404:	10012cf1 	.word	0x10012cf1

10009408 <sms_mpu_initialize>:
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
	//DBG_LOG("accelsensitivity")
}

void sms_mpu_initialize(void)
{
10009408:	b570      	push	{r4, r5, r6, lr}
	// Initialize variables
	q[0] = 1.0;
1000940a:	4a25      	ldr	r2, [pc, #148]	; (100094a0 <sms_mpu_initialize+0x98>)
1000940c:	23fe      	movs	r3, #254	; 0xfe
1000940e:	059b      	lsls	r3, r3, #22
10009410:	6013      	str	r3, [r2, #0]
	q[1] = 0.0;
10009412:	2300      	movs	r3, #0
10009414:	6053      	str	r3, [r2, #4]
	q[2] = 0.0;
10009416:	6093      	str	r3, [r2, #8]
	q[3] = 0.0;
10009418:	60d3      	str	r3, [r2, #12]
	eInt[0] = 0.0;
1000941a:	4a22      	ldr	r2, [pc, #136]	; (100094a4 <sms_mpu_initialize+0x9c>)
1000941c:	6013      	str	r3, [r2, #0]
	eInt[1] = 0.0;
1000941e:	6053      	str	r3, [r2, #4]
	eInt[2] = 0.0;
10009420:	6093      	str	r3, [r2, #8]
	uint8_t a_scale = AFS_2G;
	uint8_t g_scale = GFS_250DPS;

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009422:	2200      	movs	r2, #0
10009424:	216b      	movs	r1, #107	; 0x6b
10009426:	2069      	movs	r0, #105	; 0x69
10009428:	4c1f      	ldr	r4, [pc, #124]	; (100094a8 <sms_mpu_initialize+0xa0>)
1000942a:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
1000942c:	2064      	movs	r0, #100	; 0x64
1000942e:	4d1f      	ldr	r5, [pc, #124]	; (100094ac <sms_mpu_initialize+0xa4>)
10009430:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009432:	2201      	movs	r2, #1
10009434:	216b      	movs	r1, #107	; 0x6b
10009436:	2069      	movs	r0, #105	; 0x69
10009438:	47a0      	blx	r4
	delay_ms(200);
1000943a:	20c8      	movs	r0, #200	; 0xc8
1000943c:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x06);		// gyro bandwidth = 10 Hz
1000943e:	2206      	movs	r2, #6
10009440:	211a      	movs	r1, #26
10009442:	2069      	movs	r0, #105	; 0x69
10009444:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x08);  	// Use a 111 Hz rate; a rate consistent with the filter update rate
10009446:	2208      	movs	r2, #8
10009448:	2119      	movs	r1, #25
1000944a:	2069      	movs	r0, #105	; 0x69
1000944c:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
1000944e:	211b      	movs	r1, #27
10009450:	2069      	movs	r0, #105	; 0x69
10009452:	4e17      	ldr	r6, [pc, #92]	; (100094b0 <sms_mpu_initialize+0xa8>)
10009454:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (g_scale << 3); // Set full scale range for the gyro
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009456:	23e5      	movs	r3, #229	; 0xe5
10009458:	0002      	movs	r2, r0
1000945a:	401a      	ands	r2, r3
1000945c:	211b      	movs	r1, #27
1000945e:	2069      	movs	r0, #105	; 0x69
10009460:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009462:	211c      	movs	r1, #28
10009464:	2069      	movs	r0, #105	; 0x69
10009466:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (a_scale << 3); // Set full scale range for the accelerometer
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009468:	23e7      	movs	r3, #231	; 0xe7
1000946a:	0002      	movs	r2, r0
1000946c:	401a      	ands	r2, r3
1000946e:	211c      	movs	r1, #28
10009470:	2069      	movs	r0, #105	; 0x69
10009472:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009474:	211d      	movs	r1, #29
10009476:	2069      	movs	r0, #105	; 0x69
10009478:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
1000947a:	23f0      	movs	r3, #240	; 0xf0
1000947c:	0002      	movs	r2, r0
1000947e:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x06;  // Set accelerometer rate to 1 kHz and bandwidth to 10 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009480:	3bea      	subs	r3, #234	; 0xea
10009482:	431a      	orrs	r2, r3
10009484:	211d      	movs	r1, #29
10009486:	2069      	movs	r0, #105	; 0x69
10009488:	47a0      	blx	r4

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
1000948a:	2222      	movs	r2, #34	; 0x22
1000948c:	2137      	movs	r1, #55	; 0x37
1000948e:	2069      	movs	r0, #105	; 0x69
10009490:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009492:	2201      	movs	r2, #1
10009494:	2138      	movs	r1, #56	; 0x38
10009496:	2069      	movs	r0, #105	; 0x69
10009498:	47a0      	blx	r4
	delay_ms(100);
1000949a:	2064      	movs	r0, #100	; 0x64
1000949c:	47a8      	blx	r5
}
1000949e:	bd70      	pop	{r4, r5, r6, pc}
100094a0:	1001ad58 	.word	0x1001ad58
100094a4:	1001ac00 	.word	0x1001ac00
100094a8:	10008ec1 	.word	0x10008ec1
100094ac:	10009f19 	.word	0x10009f19
100094b0:	100093b9 	.word	0x100093b9

100094b4 <sms_mpu_selftest>:
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}

void sms_mpu_selftest(float *destination)
{
100094b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100094b6:	465f      	mov	r7, fp
100094b8:	4656      	mov	r6, sl
100094ba:	464d      	mov	r5, r9
100094bc:	4644      	mov	r4, r8
100094be:	b4f0      	push	{r4, r5, r6, r7}
100094c0:	b09d      	sub	sp, #116	; 0x74
100094c2:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
100094c4:	2206      	movs	r2, #6
100094c6:	2100      	movs	r1, #0
100094c8:	a81a      	add	r0, sp, #104	; 0x68
100094ca:	4ce0      	ldr	r4, [pc, #896]	; (1000984c <sms_mpu_selftest+0x398>)
100094cc:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
100094ce:	220c      	movs	r2, #12
100094d0:	2100      	movs	r1, #0
100094d2:	a817      	add	r0, sp, #92	; 0x5c
100094d4:	47a0      	blx	r4
100094d6:	220c      	movs	r2, #12
100094d8:	2100      	movs	r1, #0
100094da:	a814      	add	r0, sp, #80	; 0x50
100094dc:	47a0      	blx	r4
100094de:	220c      	movs	r2, #12
100094e0:	2100      	movs	r1, #0
100094e2:	a811      	add	r0, sp, #68	; 0x44
100094e4:	47a0      	blx	r4
100094e6:	220c      	movs	r2, #12
100094e8:	2100      	movs	r1, #0
100094ea:	a80e      	add	r0, sp, #56	; 0x38
100094ec:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
100094ee:	2200      	movs	r2, #0
100094f0:	2119      	movs	r1, #25
100094f2:	2069      	movs	r0, #105	; 0x69
100094f4:	4cd6      	ldr	r4, [pc, #856]	; (10009850 <sms_mpu_selftest+0x39c>)
100094f6:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
100094f8:	2202      	movs	r2, #2
100094fa:	211a      	movs	r1, #26
100094fc:	2069      	movs	r0, #105	; 0x69
100094fe:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009500:	2200      	movs	r2, #0
10009502:	211b      	movs	r1, #27
10009504:	2069      	movs	r0, #105	; 0x69
10009506:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009508:	2202      	movs	r2, #2
1000950a:	211d      	movs	r1, #29
1000950c:	2069      	movs	r0, #105	; 0x69
1000950e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009510:	2200      	movs	r2, #0
10009512:	211c      	movs	r1, #28
10009514:	2069      	movs	r0, #105	; 0x69
10009516:	47a0      	blx	r4
10009518:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000951a:	ac1a      	add	r4, sp, #104	; 0x68
1000951c:	4ecd      	ldr	r6, [pc, #820]	; (10009854 <sms_mpu_selftest+0x3a0>)
1000951e:	0023      	movs	r3, r4
10009520:	2206      	movs	r2, #6
10009522:	213b      	movs	r1, #59	; 0x3b
10009524:	2069      	movs	r0, #105	; 0x69
10009526:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009528:	7823      	ldrb	r3, [r4, #0]
1000952a:	021b      	lsls	r3, r3, #8
1000952c:	7862      	ldrb	r2, [r4, #1]
1000952e:	4313      	orrs	r3, r2
10009530:	b21b      	sxth	r3, r3
10009532:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009534:	4694      	mov	ip, r2
10009536:	4463      	add	r3, ip
10009538:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000953a:	78a3      	ldrb	r3, [r4, #2]
1000953c:	021b      	lsls	r3, r3, #8
1000953e:	78e2      	ldrb	r2, [r4, #3]
10009540:	4313      	orrs	r3, r2
10009542:	b21b      	sxth	r3, r3
10009544:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009546:	9200      	str	r2, [sp, #0]
10009548:	4694      	mov	ip, r2
1000954a:	4463      	add	r3, ip
1000954c:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000954e:	7923      	ldrb	r3, [r4, #4]
10009550:	021b      	lsls	r3, r3, #8
10009552:	7962      	ldrb	r2, [r4, #5]
10009554:	4313      	orrs	r3, r2
10009556:	b21b      	sxth	r3, r3
10009558:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000955a:	9200      	str	r2, [sp, #0]
1000955c:	4694      	mov	ip, r2
1000955e:	4463      	add	r3, ip
10009560:	9316      	str	r3, [sp, #88]	; 0x58
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009562:	0023      	movs	r3, r4
10009564:	2206      	movs	r2, #6
10009566:	2143      	movs	r1, #67	; 0x43
10009568:	2069      	movs	r0, #105	; 0x69
1000956a:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000956c:	7823      	ldrb	r3, [r4, #0]
1000956e:	021b      	lsls	r3, r3, #8
10009570:	7862      	ldrb	r2, [r4, #1]
10009572:	4313      	orrs	r3, r2
10009574:	b21b      	sxth	r3, r3
10009576:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009578:	4694      	mov	ip, r2
1000957a:	4463      	add	r3, ip
1000957c:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000957e:	78a3      	ldrb	r3, [r4, #2]
10009580:	021b      	lsls	r3, r3, #8
10009582:	78e2      	ldrb	r2, [r4, #3]
10009584:	4313      	orrs	r3, r2
10009586:	b21b      	sxth	r3, r3
10009588:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000958a:	9200      	str	r2, [sp, #0]
1000958c:	4694      	mov	ip, r2
1000958e:	4463      	add	r3, ip
10009590:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009592:	7923      	ldrb	r3, [r4, #4]
10009594:	021b      	lsls	r3, r3, #8
10009596:	7962      	ldrb	r2, [r4, #5]
10009598:	4313      	orrs	r3, r2
1000959a:	b21b      	sxth	r3, r3
1000959c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000959e:	9200      	str	r2, [sp, #0]
100095a0:	4694      	mov	ip, r2
100095a2:	4463      	add	r3, ip
100095a4:	9319      	str	r3, [sp, #100]	; 0x64
100095a6:	3d01      	subs	r5, #1
100095a8:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
100095aa:	2d00      	cmp	r5, #0
100095ac:	d1b7      	bne.n	1000951e <sms_mpu_selftest+0x6a>
100095ae:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
100095b0:	4ea9      	ldr	r6, [pc, #676]	; (10009858 <sms_mpu_selftest+0x3a4>)
100095b2:	ad14      	add	r5, sp, #80	; 0x50
100095b4:	21c8      	movs	r1, #200	; 0xc8
100095b6:	5960      	ldr	r0, [r4, r5]
100095b8:	47b0      	blx	r6
100095ba:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
100095bc:	ad17      	add	r5, sp, #92	; 0x5c
100095be:	21c8      	movs	r1, #200	; 0xc8
100095c0:	5960      	ldr	r0, [r4, r5]
100095c2:	47b0      	blx	r6
100095c4:	5160      	str	r0, [r4, r5]
100095c6:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
100095c8:	2c0c      	cmp	r4, #12
100095ca:	d1f2      	bne.n	100095b2 <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
100095cc:	22e0      	movs	r2, #224	; 0xe0
100095ce:	211c      	movs	r1, #28
100095d0:	2069      	movs	r0, #105	; 0x69
100095d2:	4c9f      	ldr	r4, [pc, #636]	; (10009850 <sms_mpu_selftest+0x39c>)
100095d4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
100095d6:	22e0      	movs	r2, #224	; 0xe0
100095d8:	211c      	movs	r1, #28
100095da:	2069      	movs	r0, #105	; 0x69
100095dc:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100095de:	2019      	movs	r0, #25
100095e0:	4b9e      	ldr	r3, [pc, #632]	; (1000985c <sms_mpu_selftest+0x3a8>)
100095e2:	4798      	blx	r3
100095e4:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100095e6:	ac1a      	add	r4, sp, #104	; 0x68
100095e8:	4e9a      	ldr	r6, [pc, #616]	; (10009854 <sms_mpu_selftest+0x3a0>)
100095ea:	0023      	movs	r3, r4
100095ec:	2206      	movs	r2, #6
100095ee:	213b      	movs	r1, #59	; 0x3b
100095f0:	2069      	movs	r0, #105	; 0x69
100095f2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100095f4:	7823      	ldrb	r3, [r4, #0]
100095f6:	021b      	lsls	r3, r3, #8
100095f8:	7862      	ldrb	r2, [r4, #1]
100095fa:	4313      	orrs	r3, r2
100095fc:	b21b      	sxth	r3, r3
100095fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009600:	4694      	mov	ip, r2
10009602:	4463      	add	r3, ip
10009604:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009606:	78a3      	ldrb	r3, [r4, #2]
10009608:	021b      	lsls	r3, r3, #8
1000960a:	78e2      	ldrb	r2, [r4, #3]
1000960c:	4313      	orrs	r3, r2
1000960e:	b21b      	sxth	r3, r3
10009610:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009612:	9200      	str	r2, [sp, #0]
10009614:	4694      	mov	ip, r2
10009616:	4463      	add	r3, ip
10009618:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000961a:	7923      	ldrb	r3, [r4, #4]
1000961c:	021b      	lsls	r3, r3, #8
1000961e:	7962      	ldrb	r2, [r4, #5]
10009620:	4313      	orrs	r3, r2
10009622:	b21b      	sxth	r3, r3
10009624:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009626:	9200      	str	r2, [sp, #0]
10009628:	4694      	mov	ip, r2
1000962a:	4463      	add	r3, ip
1000962c:	9313      	str	r3, [sp, #76]	; 0x4c
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000962e:	0023      	movs	r3, r4
10009630:	2206      	movs	r2, #6
10009632:	2143      	movs	r1, #67	; 0x43
10009634:	2069      	movs	r0, #105	; 0x69
10009636:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009638:	7823      	ldrb	r3, [r4, #0]
1000963a:	021b      	lsls	r3, r3, #8
1000963c:	7862      	ldrb	r2, [r4, #1]
1000963e:	4313      	orrs	r3, r2
10009640:	b21b      	sxth	r3, r3
10009642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009644:	4694      	mov	ip, r2
10009646:	4463      	add	r3, ip
10009648:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000964a:	78a3      	ldrb	r3, [r4, #2]
1000964c:	021b      	lsls	r3, r3, #8
1000964e:	78e2      	ldrb	r2, [r4, #3]
10009650:	4313      	orrs	r3, r2
10009652:	b21b      	sxth	r3, r3
10009654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009656:	9200      	str	r2, [sp, #0]
10009658:	4694      	mov	ip, r2
1000965a:	4463      	add	r3, ip
1000965c:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000965e:	7923      	ldrb	r3, [r4, #4]
10009660:	021b      	lsls	r3, r3, #8
10009662:	7962      	ldrb	r2, [r4, #5]
10009664:	4313      	orrs	r3, r2
10009666:	b21b      	sxth	r3, r3
10009668:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000966a:	9200      	str	r2, [sp, #0]
1000966c:	4694      	mov	ip, r2
1000966e:	4463      	add	r3, ip
10009670:	9310      	str	r3, [sp, #64]	; 0x40
10009672:	3d01      	subs	r5, #1
10009674:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009676:	2d00      	cmp	r5, #0
10009678:	d1b7      	bne.n	100095ea <sms_mpu_selftest+0x136>
1000967a:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
1000967c:	4e76      	ldr	r6, [pc, #472]	; (10009858 <sms_mpu_selftest+0x3a4>)
1000967e:	ad11      	add	r5, sp, #68	; 0x44
10009680:	21c8      	movs	r1, #200	; 0xc8
10009682:	5960      	ldr	r0, [r4, r5]
10009684:	47b0      	blx	r6
10009686:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009688:	ad0e      	add	r5, sp, #56	; 0x38
1000968a:	21c8      	movs	r1, #200	; 0xc8
1000968c:	5960      	ldr	r0, [r4, r5]
1000968e:	47b0      	blx	r6
10009690:	5160      	str	r0, [r4, r5]
10009692:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009694:	2c0c      	cmp	r4, #12
10009696:	d1f2      	bne.n	1000967e <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009698:	2200      	movs	r2, #0
1000969a:	211c      	movs	r1, #28
1000969c:	2069      	movs	r0, #105	; 0x69
1000969e:	4c6c      	ldr	r4, [pc, #432]	; (10009850 <sms_mpu_selftest+0x39c>)
100096a0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
100096a2:	2200      	movs	r2, #0
100096a4:	211b      	movs	r1, #27
100096a6:	2069      	movs	r0, #105	; 0x69
100096a8:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100096aa:	2019      	movs	r0, #25
100096ac:	4b6b      	ldr	r3, [pc, #428]	; (1000985c <sms_mpu_selftest+0x3a8>)
100096ae:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
100096b0:	210d      	movs	r1, #13
100096b2:	2069      	movs	r0, #105	; 0x69
100096b4:	4d6a      	ldr	r5, [pc, #424]	; (10009860 <sms_mpu_selftest+0x3ac>)
100096b6:	47a8      	blx	r5
100096b8:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
100096ba:	210e      	movs	r1, #14
100096bc:	2069      	movs	r0, #105	; 0x69
100096be:	47a8      	blx	r5
100096c0:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
100096c2:	210f      	movs	r1, #15
100096c4:	2069      	movs	r0, #105	; 0x69
100096c6:	47a8      	blx	r5
100096c8:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
100096ca:	2100      	movs	r1, #0
100096cc:	2069      	movs	r0, #105	; 0x69
100096ce:	47a8      	blx	r5
100096d0:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
100096d2:	2101      	movs	r1, #1
100096d4:	2069      	movs	r0, #105	; 0x69
100096d6:	47a8      	blx	r5
100096d8:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
100096da:	2102      	movs	r1, #2
100096dc:	2069      	movs	r0, #105	; 0x69
100096de:	47a8      	blx	r5
100096e0:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
100096e2:	4b60      	ldr	r3, [pc, #384]	; (10009864 <sms_mpu_selftest+0x3b0>)
100096e4:	469a      	mov	sl, r3
100096e6:	0020      	movs	r0, r4
100096e8:	4798      	blx	r3
100096ea:	4b5f      	ldr	r3, [pc, #380]	; (10009868 <sms_mpu_selftest+0x3b4>)
100096ec:	4699      	mov	r9, r3
100096ee:	4798      	blx	r3
100096f0:	4e5e      	ldr	r6, [pc, #376]	; (1000986c <sms_mpu_selftest+0x3b8>)
100096f2:	2200      	movs	r2, #0
100096f4:	4b5e      	ldr	r3, [pc, #376]	; (10009870 <sms_mpu_selftest+0x3bc>)
100096f6:	47b0      	blx	r6
100096f8:	0002      	movs	r2, r0
100096fa:	000b      	movs	r3, r1
100096fc:	485d      	ldr	r0, [pc, #372]	; (10009874 <sms_mpu_selftest+0x3c0>)
100096fe:	495e      	ldr	r1, [pc, #376]	; (10009878 <sms_mpu_selftest+0x3c4>)
10009700:	4f5e      	ldr	r7, [pc, #376]	; (1000987c <sms_mpu_selftest+0x3c8>)
10009702:	47b8      	blx	r7
10009704:	4d5e      	ldr	r5, [pc, #376]	; (10009880 <sms_mpu_selftest+0x3cc>)
10009706:	2200      	movs	r2, #0
10009708:	4b5e      	ldr	r3, [pc, #376]	; (10009884 <sms_mpu_selftest+0x3d0>)
1000970a:	47a8      	blx	r5
1000970c:	4c5e      	ldr	r4, [pc, #376]	; (10009888 <sms_mpu_selftest+0x3d4>)
1000970e:	47a0      	blx	r4
10009710:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009712:	9800      	ldr	r0, [sp, #0]
10009714:	47d0      	blx	sl
10009716:	47c8      	blx	r9
10009718:	2200      	movs	r2, #0
1000971a:	4b55      	ldr	r3, [pc, #340]	; (10009870 <sms_mpu_selftest+0x3bc>)
1000971c:	47b0      	blx	r6
1000971e:	0002      	movs	r2, r0
10009720:	000b      	movs	r3, r1
10009722:	4854      	ldr	r0, [pc, #336]	; (10009874 <sms_mpu_selftest+0x3c0>)
10009724:	4954      	ldr	r1, [pc, #336]	; (10009878 <sms_mpu_selftest+0x3c4>)
10009726:	47b8      	blx	r7
10009728:	2200      	movs	r2, #0
1000972a:	4b56      	ldr	r3, [pc, #344]	; (10009884 <sms_mpu_selftest+0x3d0>)
1000972c:	47a8      	blx	r5
1000972e:	47a0      	blx	r4
10009730:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009732:	9804      	ldr	r0, [sp, #16]
10009734:	47d0      	blx	sl
10009736:	47c8      	blx	r9
10009738:	2200      	movs	r2, #0
1000973a:	4b4d      	ldr	r3, [pc, #308]	; (10009870 <sms_mpu_selftest+0x3bc>)
1000973c:	47b0      	blx	r6
1000973e:	0002      	movs	r2, r0
10009740:	000b      	movs	r3, r1
10009742:	484c      	ldr	r0, [pc, #304]	; (10009874 <sms_mpu_selftest+0x3c0>)
10009744:	494c      	ldr	r1, [pc, #304]	; (10009878 <sms_mpu_selftest+0x3c4>)
10009746:	47b8      	blx	r7
10009748:	2200      	movs	r2, #0
1000974a:	4b4e      	ldr	r3, [pc, #312]	; (10009884 <sms_mpu_selftest+0x3d0>)
1000974c:	47a8      	blx	r5
1000974e:	47a0      	blx	r4
10009750:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009752:	9805      	ldr	r0, [sp, #20]
10009754:	47d0      	blx	sl
10009756:	47c8      	blx	r9
10009758:	2200      	movs	r2, #0
1000975a:	4b45      	ldr	r3, [pc, #276]	; (10009870 <sms_mpu_selftest+0x3bc>)
1000975c:	47b0      	blx	r6
1000975e:	0002      	movs	r2, r0
10009760:	000b      	movs	r3, r1
10009762:	4844      	ldr	r0, [pc, #272]	; (10009874 <sms_mpu_selftest+0x3c0>)
10009764:	4944      	ldr	r1, [pc, #272]	; (10009878 <sms_mpu_selftest+0x3c4>)
10009766:	47b8      	blx	r7
10009768:	2200      	movs	r2, #0
1000976a:	4b46      	ldr	r3, [pc, #280]	; (10009884 <sms_mpu_selftest+0x3d0>)
1000976c:	47a8      	blx	r5
1000976e:	47a0      	blx	r4
10009770:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009772:	9806      	ldr	r0, [sp, #24]
10009774:	47d0      	blx	sl
10009776:	47c8      	blx	r9
10009778:	2200      	movs	r2, #0
1000977a:	4b3d      	ldr	r3, [pc, #244]	; (10009870 <sms_mpu_selftest+0x3bc>)
1000977c:	47b0      	blx	r6
1000977e:	0002      	movs	r2, r0
10009780:	000b      	movs	r3, r1
10009782:	483c      	ldr	r0, [pc, #240]	; (10009874 <sms_mpu_selftest+0x3c0>)
10009784:	493c      	ldr	r1, [pc, #240]	; (10009878 <sms_mpu_selftest+0x3c4>)
10009786:	47b8      	blx	r7
10009788:	2200      	movs	r2, #0
1000978a:	4b3e      	ldr	r3, [pc, #248]	; (10009884 <sms_mpu_selftest+0x3d0>)
1000978c:	47a8      	blx	r5
1000978e:	47a0      	blx	r4
10009790:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009792:	9807      	ldr	r0, [sp, #28]
10009794:	47d0      	blx	sl
10009796:	47c8      	blx	r9
10009798:	2200      	movs	r2, #0
1000979a:	4b35      	ldr	r3, [pc, #212]	; (10009870 <sms_mpu_selftest+0x3bc>)
1000979c:	47b0      	blx	r6
1000979e:	0002      	movs	r2, r0
100097a0:	000b      	movs	r3, r1
100097a2:	4834      	ldr	r0, [pc, #208]	; (10009874 <sms_mpu_selftest+0x3c0>)
100097a4:	4934      	ldr	r1, [pc, #208]	; (10009878 <sms_mpu_selftest+0x3c4>)
100097a6:	47b8      	blx	r7
100097a8:	2200      	movs	r2, #0
100097aa:	4b36      	ldr	r3, [pc, #216]	; (10009884 <sms_mpu_selftest+0x3d0>)
100097ac:	47a8      	blx	r5
100097ae:	47a0      	blx	r4
100097b0:	900d      	str	r0, [sp, #52]	; 0x34
100097b2:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
100097b4:	4b35      	ldr	r3, [pc, #212]	; (1000988c <sms_mpu_selftest+0x3d8>)
100097b6:	4699      	mov	r9, r3
100097b8:	4d2b      	ldr	r5, [pc, #172]	; (10009868 <sms_mpu_selftest+0x3b4>)
100097ba:	4b31      	ldr	r3, [pc, #196]	; (10009880 <sms_mpu_selftest+0x3cc>)
100097bc:	4698      	mov	r8, r3
100097be:	4b34      	ldr	r3, [pc, #208]	; (10009890 <sms_mpu_selftest+0x3dc>)
100097c0:	469a      	mov	sl, r3
100097c2:	4f2a      	ldr	r7, [pc, #168]	; (1000986c <sms_mpu_selftest+0x3b8>)
100097c4:	4e30      	ldr	r6, [pc, #192]	; (10009888 <sms_mpu_selftest+0x3d4>)
100097c6:	ab11      	add	r3, sp, #68	; 0x44
100097c8:	58e3      	ldr	r3, [r4, r3]
100097ca:	aa14      	add	r2, sp, #80	; 0x50
100097cc:	58a0      	ldr	r0, [r4, r2]
100097ce:	1a18      	subs	r0, r3, r0
100097d0:	47c8      	blx	r9
100097d2:	47a8      	blx	r5
100097d4:	2200      	movs	r2, #0
100097d6:	4b2f      	ldr	r3, [pc, #188]	; (10009894 <sms_mpu_selftest+0x3e0>)
100097d8:	47c0      	blx	r8
100097da:	9000      	str	r0, [sp, #0]
100097dc:	9101      	str	r1, [sp, #4]
100097de:	ab08      	add	r3, sp, #32
100097e0:	58e0      	ldr	r0, [r4, r3]
100097e2:	47a8      	blx	r5
100097e4:	0002      	movs	r2, r0
100097e6:	000b      	movs	r3, r1
100097e8:	9800      	ldr	r0, [sp, #0]
100097ea:	9901      	ldr	r1, [sp, #4]
100097ec:	47d0      	blx	sl
100097ee:	2200      	movs	r2, #0
100097f0:	4b28      	ldr	r3, [pc, #160]	; (10009894 <sms_mpu_selftest+0x3e0>)
100097f2:	47b8      	blx	r7
100097f4:	47b0      	blx	r6
100097f6:	9b03      	ldr	r3, [sp, #12]
100097f8:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
100097fa:	469b      	mov	fp, r3
100097fc:	44a3      	add	fp, r4
100097fe:	ab0e      	add	r3, sp, #56	; 0x38
10009800:	58e3      	ldr	r3, [r4, r3]
10009802:	aa17      	add	r2, sp, #92	; 0x5c
10009804:	58a0      	ldr	r0, [r4, r2]
10009806:	1a18      	subs	r0, r3, r0
10009808:	47c8      	blx	r9
1000980a:	47a8      	blx	r5
1000980c:	2200      	movs	r2, #0
1000980e:	4b21      	ldr	r3, [pc, #132]	; (10009894 <sms_mpu_selftest+0x3e0>)
10009810:	47c0      	blx	r8
10009812:	9000      	str	r0, [sp, #0]
10009814:	9101      	str	r1, [sp, #4]
10009816:	0023      	movs	r3, r4
10009818:	aa08      	add	r2, sp, #32
1000981a:	4694      	mov	ip, r2
1000981c:	4463      	add	r3, ip
1000981e:	68d8      	ldr	r0, [r3, #12]
10009820:	47a8      	blx	r5
10009822:	0002      	movs	r2, r0
10009824:	000b      	movs	r3, r1
10009826:	9800      	ldr	r0, [sp, #0]
10009828:	9901      	ldr	r1, [sp, #4]
1000982a:	47d0      	blx	sl
1000982c:	2200      	movs	r2, #0
1000982e:	4b19      	ldr	r3, [pc, #100]	; (10009894 <sms_mpu_selftest+0x3e0>)
10009830:	47b8      	blx	r7
10009832:	47b0      	blx	r6
10009834:	465b      	mov	r3, fp
10009836:	60d8      	str	r0, [r3, #12]
10009838:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000983a:	2c0c      	cmp	r4, #12
1000983c:	d1c3      	bne.n	100097c6 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000983e:	b01d      	add	sp, #116	; 0x74
10009840:	bc3c      	pop	{r2, r3, r4, r5}
10009842:	4690      	mov	r8, r2
10009844:	4699      	mov	r9, r3
10009846:	46a2      	mov	sl, r4
10009848:	46ab      	mov	fp, r5
1000984a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000984c:	100122bd 	.word	0x100122bd
10009850:	10008ec1 	.word	0x10008ec1
10009854:	10008d2d 	.word	0x10008d2d
10009858:	10014e0d 	.word	0x10014e0d
1000985c:	10009f19 	.word	0x10009f19
10009860:	100093b9 	.word	0x100093b9
10009864:	100155e1 	.word	0x100155e1
10009868:	10017239 	.word	0x10017239
1000986c:	100169f1 	.word	0x100169f1
10009870:	3ff00000 	.word	0x3ff00000
10009874:	c28f5c29 	.word	0xc28f5c29
10009878:	3ff028f5 	.word	0x3ff028f5
1000987c:	10011001 	.word	0x10011001
10009880:	100164fd 	.word	0x100164fd
10009884:	40a47800 	.word	0x40a47800
10009888:	100172e1 	.word	0x100172e1
1000988c:	10015551 	.word	0x10015551
10009890:	10015cb5 	.word	0x10015cb5
10009894:	40590000 	.word	0x40590000

10009898 <sms_mpu_check>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
10009898:	b570      	push	{r4, r5, r6, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000989a:	2175      	movs	r1, #117	; 0x75
1000989c:	2069      	movs	r0, #105	; 0x69
1000989e:	4b0b      	ldr	r3, [pc, #44]	; (100098cc <sms_mpu_check+0x34>)
100098a0:	4798      	blx	r3
	if(c == 0x71) {
100098a2:	2871      	cmp	r0, #113	; 0x71
100098a4:	d10f      	bne.n	100098c6 <sms_mpu_check+0x2e>
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
100098a6:	4e0a      	ldr	r6, [pc, #40]	; (100098d0 <sms_mpu_check+0x38>)
100098a8:	0030      	movs	r0, r6
100098aa:	4d0a      	ldr	r5, [pc, #40]	; (100098d4 <sms_mpu_check+0x3c>)
100098ac:	47a8      	blx	r5
100098ae:	480a      	ldr	r0, [pc, #40]	; (100098d8 <sms_mpu_check+0x40>)
100098b0:	4c0a      	ldr	r4, [pc, #40]	; (100098dc <sms_mpu_check+0x44>)
100098b2:	47a0      	blx	r4
		sms_mpu_selftest(mpu_device.hal.self_test);
100098b4:	480a      	ldr	r0, [pc, #40]	; (100098e0 <sms_mpu_check+0x48>)
100098b6:	4b0b      	ldr	r3, [pc, #44]	; (100098e4 <sms_mpu_check+0x4c>)
100098b8:	4798      	blx	r3
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
100098ba:	0030      	movs	r0, r6
100098bc:	47a8      	blx	r5
100098be:	480a      	ldr	r0, [pc, #40]	; (100098e8 <sms_mpu_check+0x50>)
100098c0:	47a0      	blx	r4
		retVal = 0;
100098c2:	2000      	movs	r0, #0
100098c4:	e001      	b.n	100098ca <sms_mpu_check+0x32>
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
	int retVal = -1;
100098c6:	2001      	movs	r0, #1
100098c8:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.hal.self_test);
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
100098ca:	bd70      	pop	{r4, r5, r6, pc}
100098cc:	100093b9 	.word	0x100093b9
100098d0:	10017434 	.word	0x10017434
100098d4:	10012e11 	.word	0x10012e11
100098d8:	10017b94 	.word	0x10017b94
100098dc:	10012cf1 	.word	0x10012cf1
100098e0:	1001ab1c 	.word	0x1001ab1c
100098e4:	100094b5 	.word	0x100094b5
100098e8:	10017bbc 	.word	0x10017bbc

100098ec <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
100098ec:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
100098ee:	2100      	movs	r1, #0
100098f0:	4b01      	ldr	r3, [pc, #4]	; (100098f8 <sms_led_switch_on+0xc>)
100098f2:	4798      	blx	r3
}
100098f4:	bd10      	pop	{r4, pc}
100098f6:	46c0      	nop			; (mov r8, r8)
100098f8:	1000a775 	.word	0x1000a775

100098fc <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
100098fc:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
100098fe:	2101      	movs	r1, #1
10009900:	4b01      	ldr	r3, [pc, #4]	; (10009908 <sms_led_switch_off+0xc>)
10009902:	4798      	blx	r3
}
10009904:	bd10      	pop	{r4, pc}
10009906:	46c0      	nop			; (mov r8, r8)
10009908:	1000a775 	.word	0x1000a775

1000990c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000990c:	b510      	push	{r4, lr}
1000990e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009910:	ac01      	add	r4, sp, #4
10009912:	0020      	movs	r0, r4
10009914:	4b0a      	ldr	r3, [pc, #40]	; (10009940 <sms_led_gpio_init+0x34>)
10009916:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009918:	2301      	movs	r3, #1
1000991a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000991c:	0021      	movs	r1, r4
1000991e:	2016      	movs	r0, #22
10009920:	4b08      	ldr	r3, [pc, #32]	; (10009944 <sms_led_gpio_init+0x38>)
10009922:	4798      	blx	r3
10009924:	2800      	cmp	r0, #0
10009926:	d005      	beq.n	10009934 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009928:	4807      	ldr	r0, [pc, #28]	; (10009948 <sms_led_gpio_init+0x3c>)
1000992a:	4b08      	ldr	r3, [pc, #32]	; (1000994c <sms_led_gpio_init+0x40>)
1000992c:	4798      	blx	r3
1000992e:	4808      	ldr	r0, [pc, #32]	; (10009950 <sms_led_gpio_init+0x44>)
10009930:	4b08      	ldr	r3, [pc, #32]	; (10009954 <sms_led_gpio_init+0x48>)
10009932:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10009934:	2016      	movs	r0, #22
10009936:	4b08      	ldr	r3, [pc, #32]	; (10009958 <sms_led_gpio_init+0x4c>)
10009938:	4798      	blx	r3
}
1000993a:	b002      	add	sp, #8
1000993c:	bd10      	pop	{r4, pc}
1000993e:	46c0      	nop			; (mov r8, r8)
10009940:	1000a5ad 	.word	0x1000a5ad
10009944:	1000a5bd 	.word	0x1000a5bd
10009948:	10017434 	.word	0x10017434
1000994c:	10012e11 	.word	0x10012e11
10009950:	10017be8 	.word	0x10017be8
10009954:	10012cf1 	.word	0x10012cf1
10009958:	100098fd 	.word	0x100098fd

1000995c <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000995c:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000995e:	4b0c      	ldr	r3, [pc, #48]	; (10009990 <sms_led_blink_start+0x34>)
10009960:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10009962:	2200      	movs	r2, #0
10009964:	4b0b      	ldr	r3, [pc, #44]	; (10009994 <sms_led_blink_start+0x38>)
10009966:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009968:	4b0b      	ldr	r3, [pc, #44]	; (10009998 <sms_led_blink_start+0x3c>)
1000996a:	781b      	ldrb	r3, [r3, #0]
1000996c:	b2db      	uxtb	r3, r3
1000996e:	2b02      	cmp	r3, #2
10009970:	d002      	beq.n	10009978 <sms_led_blink_start+0x1c>
10009972:	2b03      	cmp	r3, #3
10009974:	d002      	beq.n	1000997c <sms_led_blink_start+0x20>
10009976:	e004      	b.n	10009982 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009978:	2164      	movs	r1, #100	; 0x64
1000997a:	e003      	b.n	10009984 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000997c:	21c8      	movs	r1, #200	; 0xc8
1000997e:	0049      	lsls	r1, r1, #1
        break;
10009980:	e000      	b.n	10009984 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10009982:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009984:	2201      	movs	r2, #1
10009986:	2001      	movs	r0, #1
10009988:	4b04      	ldr	r3, [pc, #16]	; (1000999c <sms_led_blink_start+0x40>)
1000998a:	4798      	blx	r3
}
1000998c:	bd10      	pop	{r4, pc}
1000998e:	46c0      	nop			; (mov r8, r8)
10009990:	100098ed 	.word	0x100098ed
10009994:	1001ad7c 	.word	0x1001ad7c
10009998:	1001ad2f 	.word	0x1001ad2f
1000999c:	10009e8d 	.word	0x10009e8d

100099a0 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
100099a0:	4b06      	ldr	r3, [pc, #24]	; (100099bc <sms_pressure_init_variables+0x1c>)
100099a2:	2200      	movs	r2, #0
100099a4:	2125      	movs	r1, #37	; 0x25
100099a6:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
100099a8:	3106      	adds	r1, #6
100099aa:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
100099ac:	3901      	subs	r1, #1
100099ae:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
100099b0:	3902      	subs	r1, #2
100099b2:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
100099b4:	3101      	adds	r1, #1
100099b6:	545a      	strb	r2, [r3, r1]
}
100099b8:	4770      	bx	lr
100099ba:	46c0      	nop			; (mov r8, r8)
100099bc:	1001ac94 	.word	0x1001ac94

100099c0 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
100099c0:	b510      	push	{r4, lr}
100099c2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
100099c4:	4a05      	ldr	r2, [pc, #20]	; (100099dc <sms_pressure_ms58_reset+0x1c>)
100099c6:	231e      	movs	r3, #30
100099c8:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
100099ca:	3b1d      	subs	r3, #29
100099cc:	9300      	str	r3, [sp, #0]
100099ce:	4b04      	ldr	r3, [pc, #16]	; (100099e0 <sms_pressure_ms58_reset+0x20>)
100099d0:	4904      	ldr	r1, [pc, #16]	; (100099e4 <sms_pressure_ms58_reset+0x24>)
100099d2:	4805      	ldr	r0, [pc, #20]	; (100099e8 <sms_pressure_ms58_reset+0x28>)
100099d4:	4c05      	ldr	r4, [pc, #20]	; (100099ec <sms_pressure_ms58_reset+0x2c>)
100099d6:	47a0      	blx	r4
}
100099d8:	b002      	add	sp, #8
100099da:	bd10      	pop	{r4, pc}
100099dc:	1001ac84 	.word	0x1001ac84
100099e0:	1001ac70 	.word	0x1001ac70
100099e4:	1001ad34 	.word	0x1001ad34
100099e8:	1001ad40 	.word	0x1001ad40
100099ec:	10009d5d 	.word	0x10009d5d

100099f0 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
100099f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100099f2:	4657      	mov	r7, sl
100099f4:	b480      	push	{r7}
100099f6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
100099f8:	4d37      	ldr	r5, [pc, #220]	; (10009ad8 <sms_pressure_ms58_read_prom+0xe8>)
100099fa:	23a2      	movs	r3, #162	; 0xa2
100099fc:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
100099fe:	2300      	movs	r3, #0
10009a00:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
10009a02:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a04:	4c35      	ldr	r4, [pc, #212]	; (10009adc <sms_pressure_ms58_read_prom+0xec>)
10009a06:	3303      	adds	r3, #3
10009a08:	469a      	mov	sl, r3
10009a0a:	9300      	str	r3, [sp, #0]
10009a0c:	0023      	movs	r3, r4
10009a0e:	002a      	movs	r2, r5
10009a10:	4933      	ldr	r1, [pc, #204]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009a12:	4834      	ldr	r0, [pc, #208]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009a14:	4f34      	ldr	r7, [pc, #208]	; (10009ae8 <sms_pressure_ms58_read_prom+0xf8>)
10009a16:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009a18:	4e34      	ldr	r6, [pc, #208]	; (10009aec <sms_pressure_ms58_read_prom+0xfc>)
10009a1a:	7863      	ldrb	r3, [r4, #1]
10009a1c:	021b      	lsls	r3, r3, #8
10009a1e:	78a2      	ldrb	r2, [r4, #2]
10009a20:	4313      	orrs	r3, r2
10009a22:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009a24:	23a4      	movs	r3, #164	; 0xa4
10009a26:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a28:	4653      	mov	r3, sl
10009a2a:	9300      	str	r3, [sp, #0]
10009a2c:	0023      	movs	r3, r4
10009a2e:	002a      	movs	r2, r5
10009a30:	492b      	ldr	r1, [pc, #172]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009a32:	482c      	ldr	r0, [pc, #176]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009a34:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009a36:	7863      	ldrb	r3, [r4, #1]
10009a38:	021b      	lsls	r3, r3, #8
10009a3a:	78a2      	ldrb	r2, [r4, #2]
10009a3c:	4313      	orrs	r3, r2
10009a3e:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009a40:	23a6      	movs	r3, #166	; 0xa6
10009a42:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a44:	4653      	mov	r3, sl
10009a46:	9300      	str	r3, [sp, #0]
10009a48:	0023      	movs	r3, r4
10009a4a:	002a      	movs	r2, r5
10009a4c:	4924      	ldr	r1, [pc, #144]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009a4e:	4825      	ldr	r0, [pc, #148]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009a50:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009a52:	7863      	ldrb	r3, [r4, #1]
10009a54:	021b      	lsls	r3, r3, #8
10009a56:	78a2      	ldrb	r2, [r4, #2]
10009a58:	4313      	orrs	r3, r2
10009a5a:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009a5c:	23a8      	movs	r3, #168	; 0xa8
10009a5e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a60:	4653      	mov	r3, sl
10009a62:	9300      	str	r3, [sp, #0]
10009a64:	0023      	movs	r3, r4
10009a66:	002a      	movs	r2, r5
10009a68:	491d      	ldr	r1, [pc, #116]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009a6a:	481e      	ldr	r0, [pc, #120]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009a6c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009a6e:	7863      	ldrb	r3, [r4, #1]
10009a70:	021b      	lsls	r3, r3, #8
10009a72:	78a2      	ldrb	r2, [r4, #2]
10009a74:	4313      	orrs	r3, r2
10009a76:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009a78:	23aa      	movs	r3, #170	; 0xaa
10009a7a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a7c:	4653      	mov	r3, sl
10009a7e:	9300      	str	r3, [sp, #0]
10009a80:	0023      	movs	r3, r4
10009a82:	002a      	movs	r2, r5
10009a84:	4916      	ldr	r1, [pc, #88]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009a86:	4817      	ldr	r0, [pc, #92]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009a88:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009a8a:	7863      	ldrb	r3, [r4, #1]
10009a8c:	021b      	lsls	r3, r3, #8
10009a8e:	78a2      	ldrb	r2, [r4, #2]
10009a90:	4313      	orrs	r3, r2
10009a92:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009a94:	23ac      	movs	r3, #172	; 0xac
10009a96:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009a98:	4653      	mov	r3, sl
10009a9a:	9300      	str	r3, [sp, #0]
10009a9c:	0023      	movs	r3, r4
10009a9e:	002a      	movs	r2, r5
10009aa0:	490f      	ldr	r1, [pc, #60]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009aa2:	4810      	ldr	r0, [pc, #64]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009aa4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009aa6:	7863      	ldrb	r3, [r4, #1]
10009aa8:	021b      	lsls	r3, r3, #8
10009aaa:	78a2      	ldrb	r2, [r4, #2]
10009aac:	4313      	orrs	r3, r2
10009aae:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009ab0:	23ae      	movs	r3, #174	; 0xae
10009ab2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009ab4:	4653      	mov	r3, sl
10009ab6:	9300      	str	r3, [sp, #0]
10009ab8:	0023      	movs	r3, r4
10009aba:	002a      	movs	r2, r5
10009abc:	4908      	ldr	r1, [pc, #32]	; (10009ae0 <sms_pressure_ms58_read_prom+0xf0>)
10009abe:	4809      	ldr	r0, [pc, #36]	; (10009ae4 <sms_pressure_ms58_read_prom+0xf4>)
10009ac0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009ac2:	7863      	ldrb	r3, [r4, #1]
10009ac4:	021b      	lsls	r3, r3, #8
10009ac6:	78a2      	ldrb	r2, [r4, #2]
10009ac8:	4313      	orrs	r3, r2
10009aca:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
10009acc:	2000      	movs	r0, #0
10009ace:	b002      	add	sp, #8
10009ad0:	bc04      	pop	{r2}
10009ad2:	4692      	mov	sl, r2
10009ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ad6:	46c0      	nop			; (mov r8, r8)
10009ad8:	1001ac84 	.word	0x1001ac84
10009adc:	1001ac70 	.word	0x1001ac70
10009ae0:	1001ad34 	.word	0x1001ad34
10009ae4:	1001ad40 	.word	0x1001ad40
10009ae8:	10009d5d 	.word	0x10009d5d
10009aec:	1001ac94 	.word	0x1001ac94

10009af0 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009af0:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
10009af2:	4b0a      	ldr	r3, [pc, #40]	; (10009b1c <sms_pressure_init+0x2c>)
10009af4:	4798      	blx	r3
10009af6:	2800      	cmp	r0, #0
10009af8:	d10d      	bne.n	10009b16 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
10009afa:	4b09      	ldr	r3, [pc, #36]	; (10009b20 <sms_pressure_init+0x30>)
10009afc:	2201      	movs	r2, #1
10009afe:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009b00:	2402      	movs	r4, #2
10009b02:	2125      	movs	r1, #37	; 0x25
10009b04:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
10009b06:	3103      	adds	r1, #3
10009b08:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
10009b0a:	2200      	movs	r2, #0
10009b0c:	3101      	adds	r1, #1
10009b0e:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009b10:	3101      	adds	r1, #1
10009b12:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
10009b14:	e000      	b.n	10009b18 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
10009b16:	2010      	movs	r0, #16
}
10009b18:	bd10      	pop	{r4, pc}
10009b1a:	46c0      	nop			; (mov r8, r8)
10009b1c:	100099f1 	.word	0x100099f1
10009b20:	1001ac94 	.word	0x1001ac94

10009b24 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
10009b24:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009b26:	4817      	ldr	r0, [pc, #92]	; (10009b84 <sms_pressure_startup+0x60>)
10009b28:	4b17      	ldr	r3, [pc, #92]	; (10009b88 <sms_pressure_startup+0x64>)
10009b2a:	4798      	blx	r3
10009b2c:	4817      	ldr	r0, [pc, #92]	; (10009b8c <sms_pressure_startup+0x68>)
10009b2e:	4b18      	ldr	r3, [pc, #96]	; (10009b90 <sms_pressure_startup+0x6c>)
10009b30:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
10009b32:	2101      	movs	r1, #1
10009b34:	2001      	movs	r0, #1
10009b36:	4b17      	ldr	r3, [pc, #92]	; (10009b94 <sms_pressure_startup+0x70>)
10009b38:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009b3a:	2101      	movs	r1, #1
10009b3c:	2325      	movs	r3, #37	; 0x25
10009b3e:	4a16      	ldr	r2, [pc, #88]	; (10009b98 <sms_pressure_startup+0x74>)
10009b40:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
10009b42:	4b16      	ldr	r3, [pc, #88]	; (10009b9c <sms_pressure_startup+0x78>)
10009b44:	4798      	blx	r3
    delay_ms(3);
10009b46:	2003      	movs	r0, #3
10009b48:	4b15      	ldr	r3, [pc, #84]	; (10009ba0 <sms_pressure_startup+0x7c>)
10009b4a:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
10009b4c:	4b15      	ldr	r3, [pc, #84]	; (10009ba4 <sms_pressure_startup+0x80>)
10009b4e:	4798      	blx	r3
10009b50:	2800      	cmp	r0, #0
10009b52:	d006      	beq.n	10009b62 <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
10009b54:	480b      	ldr	r0, [pc, #44]	; (10009b84 <sms_pressure_startup+0x60>)
10009b56:	4b0c      	ldr	r3, [pc, #48]	; (10009b88 <sms_pressure_startup+0x64>)
10009b58:	4798      	blx	r3
10009b5a:	4813      	ldr	r0, [pc, #76]	; (10009ba8 <sms_pressure_startup+0x84>)
10009b5c:	4b0c      	ldr	r3, [pc, #48]	; (10009b90 <sms_pressure_startup+0x6c>)
10009b5e:	4798      	blx	r3
10009b60:	e7fe      	b.n	10009b60 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
10009b62:	4b0d      	ldr	r3, [pc, #52]	; (10009b98 <sms_pressure_startup+0x74>)
10009b64:	2102      	movs	r1, #2
10009b66:	2225      	movs	r2, #37	; 0x25
10009b68:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
10009b6a:	2401      	movs	r4, #1
10009b6c:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
10009b6e:	3a1e      	subs	r2, #30
10009b70:	4b0e      	ldr	r3, [pc, #56]	; (10009bac <sms_pressure_startup+0x88>)
10009b72:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009b74:	3901      	subs	r1, #1
10009b76:	2001      	movs	r0, #1
10009b78:	4b0d      	ldr	r3, [pc, #52]	; (10009bb0 <sms_pressure_startup+0x8c>)
10009b7a:	4798      	blx	r3
    
    ulp_ready = true;
10009b7c:	4b0d      	ldr	r3, [pc, #52]	; (10009bb4 <sms_pressure_startup+0x90>)
10009b7e:	701c      	strb	r4, [r3, #0]
}
10009b80:	bd10      	pop	{r4, pc}
10009b82:	46c0      	nop			; (mov r8, r8)
10009b84:	10017434 	.word	0x10017434
10009b88:	10012e11 	.word	0x10012e11
10009b8c:	10017c5c 	.word	0x10017c5c
10009b90:	10012cf1 	.word	0x10012cf1
10009b94:	10008ad5 	.word	0x10008ad5
10009b98:	1001ac94 	.word	0x1001ac94
10009b9c:	100099c1 	.word	0x100099c1
10009ba0:	10009f19 	.word	0x10009f19
10009ba4:	10009af1 	.word	0x10009af1
10009ba8:	10017c90 	.word	0x10017c90
10009bac:	1001abec 	.word	0x1001abec
10009bb0:	10009c21 	.word	0x10009c21
10009bb4:	1001abed 	.word	0x1001abed

10009bb8 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
10009bb8:	b510      	push	{r4, lr}
10009bba:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009bbc:	466b      	mov	r3, sp
10009bbe:	1dda      	adds	r2, r3, #7
10009bc0:	2300      	movs	r3, #0
10009bc2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009bc4:	4c0d      	ldr	r4, [pc, #52]	; (10009bfc <sms_pressure_define_services+0x44>)
10009bc6:	0021      	movs	r1, r4
10009bc8:	2001      	movs	r0, #1
10009bca:	4b0d      	ldr	r3, [pc, #52]	; (10009c00 <sms_pressure_define_services+0x48>)
10009bcc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009bce:	0020      	movs	r0, r4
10009bd0:	4b0c      	ldr	r3, [pc, #48]	; (10009c04 <sms_pressure_define_services+0x4c>)
10009bd2:	4798      	blx	r3
10009bd4:	1e04      	subs	r4, r0, #0
10009bd6:	d007      	beq.n	10009be8 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009bd8:	480b      	ldr	r0, [pc, #44]	; (10009c08 <sms_pressure_define_services+0x50>)
10009bda:	4b0c      	ldr	r3, [pc, #48]	; (10009c0c <sms_pressure_define_services+0x54>)
10009bdc:	4798      	blx	r3
10009bde:	0021      	movs	r1, r4
10009be0:	480b      	ldr	r0, [pc, #44]	; (10009c10 <sms_pressure_define_services+0x58>)
10009be2:	4b0c      	ldr	r3, [pc, #48]	; (10009c14 <sms_pressure_define_services+0x5c>)
10009be4:	4798      	blx	r3
10009be6:	e007      	b.n	10009bf8 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009be8:	4807      	ldr	r0, [pc, #28]	; (10009c08 <sms_pressure_define_services+0x50>)
10009bea:	4b08      	ldr	r3, [pc, #32]	; (10009c0c <sms_pressure_define_services+0x54>)
10009bec:	4798      	blx	r3
10009bee:	4b0a      	ldr	r3, [pc, #40]	; (10009c18 <sms_pressure_define_services+0x60>)
10009bf0:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009bf2:	480a      	ldr	r0, [pc, #40]	; (10009c1c <sms_pressure_define_services+0x64>)
10009bf4:	4b07      	ldr	r3, [pc, #28]	; (10009c14 <sms_pressure_define_services+0x5c>)
10009bf6:	4798      	blx	r3
    }
10009bf8:	b002      	add	sp, #8
10009bfa:	bd10      	pop	{r4, pc}
10009bfc:	1001acc0 	.word	0x1001acc0
10009c00:	100088ad 	.word	0x100088ad
10009c04:	10008889 	.word	0x10008889
10009c08:	10017434 	.word	0x10017434
10009c0c:	10012e11 	.word	0x10012e11
10009c10:	10017d48 	.word	0x10017d48
10009c14:	10012cf1 	.word	0x10012cf1
10009c18:	1001ac94 	.word	0x1001ac94
10009c1c:	10017d90 	.word	0x10017d90

10009c20 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009c20:	b510      	push	{r4, lr}
10009c22:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009c24:	2800      	cmp	r0, #0
10009c26:	d007      	beq.n	10009c38 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
10009c28:	2102      	movs	r1, #2
10009c2a:	2371      	movs	r3, #113	; 0x71
10009c2c:	4a15      	ldr	r2, [pc, #84]	; (10009c84 <sms_sensors_interrupt_toggle+0x64>)
10009c2e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009c30:	201e      	movs	r0, #30
10009c32:	4b15      	ldr	r3, [pc, #84]	; (10009c88 <sms_sensors_interrupt_toggle+0x68>)
10009c34:	4798      	blx	r3
10009c36:	e006      	b.n	10009c46 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
10009c38:	2100      	movs	r1, #0
10009c3a:	2371      	movs	r3, #113	; 0x71
10009c3c:	4a11      	ldr	r2, [pc, #68]	; (10009c84 <sms_sensors_interrupt_toggle+0x64>)
10009c3e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009c40:	201e      	movs	r0, #30
10009c42:	4b12      	ldr	r3, [pc, #72]	; (10009c8c <sms_sensors_interrupt_toggle+0x6c>)
10009c44:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009c46:	2c00      	cmp	r4, #0
10009c48:	d010      	beq.n	10009c6c <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
10009c4a:	4b11      	ldr	r3, [pc, #68]	; (10009c90 <sms_sensors_interrupt_toggle+0x70>)
10009c4c:	2103      	movs	r1, #3
10009c4e:	2225      	movs	r2, #37	; 0x25
10009c50:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009c52:	3901      	subs	r1, #1
10009c54:	3206      	adds	r2, #6
10009c56:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
10009c58:	2100      	movs	r1, #0
10009c5a:	480e      	ldr	r0, [pc, #56]	; (10009c94 <sms_sensors_interrupt_toggle+0x74>)
10009c5c:	4b0e      	ldr	r3, [pc, #56]	; (10009c98 <sms_sensors_interrupt_toggle+0x78>)
10009c5e:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009c60:	4b0e      	ldr	r3, [pc, #56]	; (10009c9c <sms_sensors_interrupt_toggle+0x7c>)
10009c62:	4798      	blx	r3
        sensors_active = true;
10009c64:	2201      	movs	r2, #1
10009c66:	4b0e      	ldr	r3, [pc, #56]	; (10009ca0 <sms_sensors_interrupt_toggle+0x80>)
10009c68:	701a      	strb	r2, [r3, #0]
10009c6a:	e00a      	b.n	10009c82 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
10009c6c:	2102      	movs	r1, #2
10009c6e:	2325      	movs	r3, #37	; 0x25
10009c70:	4a07      	ldr	r2, [pc, #28]	; (10009c90 <sms_sensors_interrupt_toggle+0x70>)
10009c72:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009c74:	4b0b      	ldr	r3, [pc, #44]	; (10009ca4 <sms_sensors_interrupt_toggle+0x84>)
10009c76:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
10009c78:	4b0b      	ldr	r3, [pc, #44]	; (10009ca8 <sms_sensors_interrupt_toggle+0x88>)
10009c7a:	4798      	blx	r3
        sensors_active = false;
10009c7c:	2200      	movs	r2, #0
10009c7e:	4b08      	ldr	r3, [pc, #32]	; (10009ca0 <sms_sensors_interrupt_toggle+0x80>)
10009c80:	701a      	strb	r2, [r3, #0]
    }
}
10009c82:	bd10      	pop	{r4, pc}
10009c84:	1001ab18 	.word	0x1001ab18
10009c88:	1000aa1d 	.word	0x1000aa1d
10009c8c:	1000aa79 	.word	0x1000aa79
10009c90:	1001ac94 	.word	0x1001ac94
10009c94:	000003d5 	.word	0x000003d5
10009c98:	10009dc1 	.word	0x10009dc1
10009c9c:	10009df5 	.word	0x10009df5
10009ca0:	1001ad20 	.word	0x1001ad20
10009ca4:	10009de9 	.word	0x10009de9
10009ca8:	10009e15 	.word	0x10009e15

10009cac <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009cac:	b510      	push	{r4, lr}
10009cae:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009cb0:	2800      	cmp	r0, #0
10009cb2:	d103      	bne.n	10009cbc <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009cb4:	2100      	movs	r1, #0
10009cb6:	3006      	adds	r0, #6
10009cb8:	4b07      	ldr	r3, [pc, #28]	; (10009cd8 <sms_sensors_switch+0x2c>)
10009cba:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009cbc:	2c00      	cmp	r4, #0
10009cbe:	d006      	beq.n	10009cce <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009cc0:	2101      	movs	r1, #1
10009cc2:	2325      	movs	r3, #37	; 0x25
10009cc4:	4a05      	ldr	r2, [pc, #20]	; (10009cdc <sms_sensors_switch+0x30>)
10009cc6:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
10009cc8:	4b05      	ldr	r3, [pc, #20]	; (10009ce0 <sms_sensors_switch+0x34>)
10009cca:	4798      	blx	r3
10009ccc:	e003      	b.n	10009cd6 <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009cce:	2100      	movs	r1, #0
10009cd0:	2007      	movs	r0, #7
10009cd2:	4b01      	ldr	r3, [pc, #4]	; (10009cd8 <sms_sensors_switch+0x2c>)
10009cd4:	4798      	blx	r3
    }
}
10009cd6:	bd10      	pop	{r4, pc}
10009cd8:	1000a775 	.word	0x1000a775
10009cdc:	1001ac94 	.word	0x1001ac94
10009ce0:	10009b25 	.word	0x10009b25

10009ce4 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009ce4:	b530      	push	{r4, r5, lr}
10009ce6:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009ce8:	ac01      	add	r4, sp, #4
10009cea:	0020      	movs	r0, r4
10009cec:	4b13      	ldr	r3, [pc, #76]	; (10009d3c <sms_spi_master_configure+0x58>)
10009cee:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009cf0:	2310      	movs	r3, #16
10009cf2:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009cf4:	0021      	movs	r1, r4
10009cf6:	4812      	ldr	r0, [pc, #72]	; (10009d40 <sms_spi_master_configure+0x5c>)
10009cf8:	4b12      	ldr	r3, [pc, #72]	; (10009d44 <sms_spi_master_configure+0x60>)
10009cfa:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009cfc:	ac02      	add	r4, sp, #8
10009cfe:	0020      	movs	r0, r4
10009d00:	4b11      	ldr	r3, [pc, #68]	; (10009d48 <sms_spi_master_configure+0x64>)
10009d02:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009d04:	2368      	movs	r3, #104	; 0x68
10009d06:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009d08:	2300      	movs	r3, #0
10009d0a:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009d0c:	3311      	adds	r3, #17
10009d0e:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009d10:	3b0d      	subs	r3, #13
10009d12:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009d14:	2213      	movs	r2, #19
10009d16:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009d18:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009d1a:	3a14      	subs	r2, #20
10009d1c:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009d1e:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009d20:	3213      	adds	r2, #19
10009d22:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009d24:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009d26:	4d09      	ldr	r5, [pc, #36]	; (10009d4c <sms_spi_master_configure+0x68>)
10009d28:	0022      	movs	r2, r4
10009d2a:	4909      	ldr	r1, [pc, #36]	; (10009d50 <sms_spi_master_configure+0x6c>)
10009d2c:	0028      	movs	r0, r5
10009d2e:	4b09      	ldr	r3, [pc, #36]	; (10009d54 <sms_spi_master_configure+0x70>)
10009d30:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009d32:	0028      	movs	r0, r5
10009d34:	4b08      	ldr	r3, [pc, #32]	; (10009d58 <sms_spi_master_configure+0x74>)
10009d36:	4798      	blx	r3
}
10009d38:	b00d      	add	sp, #52	; 0x34
10009d3a:	bd30      	pop	{r4, r5, pc}
10009d3c:	10009f45 	.word	0x10009f45
10009d40:	1001ad34 	.word	0x1001ad34
10009d44:	10009f7d 	.word	0x10009f7d
10009d48:	10009f51 	.word	0x10009f51
10009d4c:	1001ad40 	.word	0x1001ad40
10009d50:	40007000 	.word	0x40007000
10009d54:	1000a04d 	.word	0x1000a04d
10009d58:	10009fbd 	.word	0x10009fbd

10009d5c <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d5e:	b083      	sub	sp, #12
10009d60:	0004      	movs	r4, r0
10009d62:	000d      	movs	r5, r1
10009d64:	9200      	str	r2, [sp, #0]
10009d66:	9301      	str	r3, [sp, #4]
10009d68:	ab08      	add	r3, sp, #32
10009d6a:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009d6c:	2201      	movs	r2, #1
10009d6e:	4f08      	ldr	r7, [pc, #32]	; (10009d90 <sms_spi_master_transceive+0x34>)
10009d70:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009d72:	0033      	movs	r3, r6
10009d74:	9a01      	ldr	r2, [sp, #4]
10009d76:	9900      	ldr	r1, [sp, #0]
10009d78:	0020      	movs	r0, r4
10009d7a:	4e06      	ldr	r6, [pc, #24]	; (10009d94 <sms_spi_master_transceive+0x38>)
10009d7c:	47b0      	blx	r6
10009d7e:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009d80:	2200      	movs	r2, #0
10009d82:	0029      	movs	r1, r5
10009d84:	0020      	movs	r0, r4
10009d86:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009d88:	0030      	movs	r0, r6
10009d8a:	b003      	add	sp, #12
10009d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d8e:	46c0      	nop			; (mov r8, r8)
10009d90:	1000a235 	.word	0x1000a235
10009d94:	1000a1b1 	.word	0x1000a1b1

10009d98 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
10009d98:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
10009d9a:	2328      	movs	r3, #40	; 0x28
10009d9c:	4a06      	ldr	r2, [pc, #24]	; (10009db8 <sms_timer_aon_callback+0x20>)
10009d9e:	5cd3      	ldrb	r3, [r2, r3]
10009da0:	2b00      	cmp	r3, #0
10009da2:	d008      	beq.n	10009db6 <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009da4:	2101      	movs	r1, #1
10009da6:	2329      	movs	r3, #41	; 0x29
10009da8:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
10009daa:	2300      	movs	r3, #0
10009dac:	2200      	movs	r2, #0
10009dae:	3102      	adds	r1, #2
10009db0:	2042      	movs	r0, #66	; 0x42
10009db2:	4c02      	ldr	r4, [pc, #8]	; (10009dbc <sms_timer_aon_callback+0x24>)
10009db4:	47a0      	blx	r4
	}
}
10009db6:	bd10      	pop	{r4, pc}
10009db8:	1001ac94 	.word	0x1001ac94
10009dbc:	1000d5d5 	.word	0x1000d5d5

10009dc0 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009dc0:	b530      	push	{r4, r5, lr}
10009dc2:	b083      	sub	sp, #12
10009dc4:	0004      	movs	r4, r0
10009dc6:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009dc8:	4668      	mov	r0, sp
10009dca:	4b05      	ldr	r3, [pc, #20]	; (10009de0 <sms_timer_aon_init+0x20>)
10009dcc:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009dce:	466b      	mov	r3, sp
10009dd0:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
10009dd2:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
10009dd4:	4668      	mov	r0, sp
10009dd6:	4b03      	ldr	r3, [pc, #12]	; (10009de4 <sms_timer_aon_init+0x24>)
10009dd8:	4798      	blx	r3
}
10009dda:	b003      	add	sp, #12
10009ddc:	bd30      	pop	{r4, r5, pc}
10009dde:	46c0      	nop			; (mov r8, r8)
10009de0:	100080e9 	.word	0x100080e9
10009de4:	1000815d 	.word	0x1000815d

10009de8 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009de8:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009dea:	4b01      	ldr	r3, [pc, #4]	; (10009df0 <sms_timer_aon_disable+0x8>)
10009dec:	4798      	blx	r3
}
10009dee:	bd10      	pop	{r4, pc}
10009df0:	100080f9 	.word	0x100080f9

10009df4 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
10009df4:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
10009df6:	4804      	ldr	r0, [pc, #16]	; (10009e08 <sms_timer_aon_register_callback+0x14>)
10009df8:	4b04      	ldr	r3, [pc, #16]	; (10009e0c <sms_timer_aon_register_callback+0x18>)
10009dfa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009dfc:	2280      	movs	r2, #128	; 0x80
10009dfe:	0512      	lsls	r2, r2, #20
10009e00:	4b03      	ldr	r3, [pc, #12]	; (10009e10 <sms_timer_aon_register_callback+0x1c>)
10009e02:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009e04:	bd10      	pop	{r4, pc}
10009e06:	46c0      	nop			; (mov r8, r8)
10009e08:	10009d99 	.word	0x10009d99
10009e0c:	10008145 	.word	0x10008145
10009e10:	e000e100 	.word	0xe000e100

10009e14 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
10009e14:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
10009e16:	4b04      	ldr	r3, [pc, #16]	; (10009e28 <sms_timer_aon_unregister_callback+0x14>)
10009e18:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009e1a:	2180      	movs	r1, #128	; 0x80
10009e1c:	0509      	lsls	r1, r1, #20
10009e1e:	2380      	movs	r3, #128	; 0x80
10009e20:	4a02      	ldr	r2, [pc, #8]	; (10009e2c <sms_timer_aon_unregister_callback+0x18>)
10009e22:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009e24:	bd10      	pop	{r4, pc}
10009e26:	46c0      	nop			; (mov r8, r8)
10009e28:	10008151 	.word	0x10008151
10009e2c:	e000e100 	.word	0xe000e100

10009e30 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009e30:	b510      	push	{r4, lr}
10009e32:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009e34:	ac01      	add	r4, sp, #4
10009e36:	0020      	movs	r0, r4
10009e38:	4b09      	ldr	r3, [pc, #36]	; (10009e60 <sms_dualtimer_init+0x30>)
10009e3a:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009e3c:	4b09      	ldr	r3, [pc, #36]	; (10009e64 <sms_dualtimer_init+0x34>)
10009e3e:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009e40:	2300      	movs	r3, #0
10009e42:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
10009e44:	4a08      	ldr	r2, [pc, #32]	; (10009e68 <sms_dualtimer_init+0x38>)
10009e46:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009e48:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009e4a:	0020      	movs	r0, r4
10009e4c:	4b07      	ldr	r3, [pc, #28]	; (10009e6c <sms_dualtimer_init+0x3c>)
10009e4e:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009e50:	2000      	movs	r0, #0
10009e52:	4c07      	ldr	r4, [pc, #28]	; (10009e70 <sms_dualtimer_init+0x40>)
10009e54:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009e56:	2001      	movs	r0, #1
10009e58:	47a0      	blx	r4
}
10009e5a:	b008      	add	sp, #32
10009e5c:	bd10      	pop	{r4, pc}
10009e5e:	46c0      	nop			; (mov r8, r8)
10009e60:	1000a299 	.word	0x1000a299
10009e64:	018cba80 	.word	0x018cba80
10009e68:	00006590 	.word	0x00006590
10009e6c:	1000a341 	.word	0x1000a341
10009e70:	1000a31d 	.word	0x1000a31d

10009e74 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009e74:	b510      	push	{r4, lr}
10009e76:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009e78:	4b02      	ldr	r3, [pc, #8]	; (10009e84 <sms_dualtimer_register_callback+0x10>)
10009e7a:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009e7c:	0020      	movs	r0, r4
10009e7e:	4b02      	ldr	r3, [pc, #8]	; (10009e88 <sms_dualtimer_register_callback+0x14>)
10009e80:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
10009e82:	bd10      	pop	{r4, pc}
10009e84:	1000a445 	.word	0x1000a445
10009e88:	1000a31d 	.word	0x1000a31d

10009e8c <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009e8c:	b510      	push	{r4, lr}
10009e8e:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
10009e90:	2801      	cmp	r0, #1
10009e92:	d006      	beq.n	10009ea2 <sms_dualtimer_start+0x16>
10009e94:	2800      	cmp	r0, #0
10009e96:	d002      	beq.n	10009e9e <sms_dualtimer_start+0x12>
10009e98:	2802      	cmp	r0, #2
10009e9a:	d004      	beq.n	10009ea6 <sms_dualtimer_start+0x1a>
10009e9c:	e005      	b.n	10009eaa <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
10009e9e:	221a      	movs	r2, #26
10009ea0:	e004      	b.n	10009eac <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
10009ea2:	4a0c      	ldr	r2, [pc, #48]	; (10009ed4 <sms_dualtimer_start+0x48>)
        break;
10009ea4:	e002      	b.n	10009eac <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009ea6:	4a0c      	ldr	r2, [pc, #48]	; (10009ed8 <sms_dualtimer_start+0x4c>)
        break;
10009ea8:	e000      	b.n	10009eac <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009eaa:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009eac:	2900      	cmp	r1, #0
10009eae:	d101      	bne.n	10009eb4 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
10009eb0:	21fa      	movs	r1, #250	; 0xfa
10009eb2:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009eb4:	2000      	movs	r0, #0
10009eb6:	4b09      	ldr	r3, [pc, #36]	; (10009edc <sms_dualtimer_start+0x50>)
10009eb8:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009eba:	434a      	muls	r2, r1
10009ebc:	2100      	movs	r1, #0
10009ebe:	0020      	movs	r0, r4
10009ec0:	4b07      	ldr	r3, [pc, #28]	; (10009ee0 <sms_dualtimer_start+0x54>)
10009ec2:	4798      	blx	r3
    dualtimer_enable(tmr);
10009ec4:	0020      	movs	r0, r4
10009ec6:	4b07      	ldr	r3, [pc, #28]	; (10009ee4 <sms_dualtimer_start+0x58>)
10009ec8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009eca:	2280      	movs	r2, #128	; 0x80
10009ecc:	01d2      	lsls	r2, r2, #7
10009ece:	4b06      	ldr	r3, [pc, #24]	; (10009ee8 <sms_dualtimer_start+0x5c>)
10009ed0:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
10009ed2:	bd10      	pop	{r4, pc}
10009ed4:	00006590 	.word	0x00006590
10009ed8:	018cba80 	.word	0x018cba80
10009edc:	1001abed 	.word	0x1001abed
10009ee0:	1000a2d1 	.word	0x1000a2d1
10009ee4:	1000a2f9 	.word	0x1000a2f9
10009ee8:	e000e100 	.word	0xe000e100

10009eec <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
10009eec:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
10009eee:	4b01      	ldr	r3, [pc, #4]	; (10009ef4 <sms_dualtimer_stop+0x8>)
10009ef0:	4798      	blx	r3
}
10009ef2:	bd10      	pop	{r4, pc}
10009ef4:	1000a31d 	.word	0x1000a31d

10009ef8 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
10009ef8:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
10009efa:	2201      	movs	r2, #1
10009efc:	4b04      	ldr	r3, [pc, #16]	; (10009f10 <sms_dualtimer1_cb+0x18>)
10009efe:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009f00:	2300      	movs	r3, #0
10009f02:	2200      	movs	r2, #0
10009f04:	2101      	movs	r1, #1
10009f06:	2040      	movs	r0, #64	; 0x40
10009f08:	4c02      	ldr	r4, [pc, #8]	; (10009f14 <sms_dualtimer1_cb+0x1c>)
10009f0a:	47a0      	blx	r4
}
10009f0c:	bd10      	pop	{r4, pc}
10009f0e:	46c0      	nop			; (mov r8, r8)
10009f10:	1001ac80 	.word	0x1001ac80
10009f14:	1000d5d5 	.word	0x1000d5d5

10009f18 <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
10009f18:	b510      	push	{r4, lr}
10009f1a:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009f1c:	2201      	movs	r2, #1
10009f1e:	2001      	movs	r0, #1
10009f20:	4b05      	ldr	r3, [pc, #20]	; (10009f38 <delay_ms+0x20>)
10009f22:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
10009f24:	4c05      	ldr	r4, [pc, #20]	; (10009f3c <delay_ms+0x24>)
10009f26:	2001      	movs	r0, #1
10009f28:	47a0      	blx	r4
10009f2a:	2800      	cmp	r0, #0
10009f2c:	d1fb      	bne.n	10009f26 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009f2e:	3001      	adds	r0, #1
10009f30:	4b03      	ldr	r3, [pc, #12]	; (10009f40 <delay_ms+0x28>)
10009f32:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10009f34:	bd10      	pop	{r4, pc}
10009f36:	46c0      	nop			; (mov r8, r8)
10009f38:	10009e8d 	.word	0x10009e8d
10009f3c:	1000a2bd 	.word	0x1000a2bd
10009f40:	1000a31d 	.word	0x1000a31d

10009f44 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10009f44:	230c      	movs	r3, #12
10009f46:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10009f48:	2300      	movs	r3, #0
10009f4a:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10009f4c:	7083      	strb	r3, [r0, #2]
}
10009f4e:	4770      	bx	lr

10009f50 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10009f50:	2301      	movs	r3, #1
10009f52:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10009f54:	2300      	movs	r3, #0
10009f56:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
10009f58:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
10009f5a:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10009f5c:	3381      	adds	r3, #129	; 0x81
10009f5e:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10009f60:	3b77      	subs	r3, #119	; 0x77
10009f62:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10009f64:	3301      	adds	r3, #1
10009f66:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
10009f68:	3301      	adds	r3, #1
10009f6a:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10009f6c:	3301      	adds	r3, #1
10009f6e:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10009f70:	3b0b      	subs	r3, #11
10009f72:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10009f74:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
10009f76:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
10009f78:	6243      	str	r3, [r0, #36]	; 0x24
};
10009f7a:	4770      	bx	lr

10009f7c <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10009f7c:	b530      	push	{r4, r5, lr}
10009f7e:	b083      	sub	sp, #12
10009f80:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10009f82:	780b      	ldrb	r3, [r1, #0]
10009f84:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10009f86:	784b      	ldrb	r3, [r1, #1]
10009f88:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
10009f8a:	788b      	ldrb	r3, [r1, #2]
10009f8c:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009f8e:	ad01      	add	r5, sp, #4
10009f90:	0028      	movs	r0, r5
10009f92:	4b07      	ldr	r3, [pc, #28]	; (10009fb0 <spi_attach_slave+0x34>)
10009f94:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009f96:	2301      	movs	r3, #1
10009f98:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
10009f9a:	7820      	ldrb	r0, [r4, #0]
10009f9c:	0029      	movs	r1, r5
10009f9e:	4b05      	ldr	r3, [pc, #20]	; (10009fb4 <spi_attach_slave+0x38>)
10009fa0:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10009fa2:	7820      	ldrb	r0, [r4, #0]
10009fa4:	2101      	movs	r1, #1
10009fa6:	4b04      	ldr	r3, [pc, #16]	; (10009fb8 <spi_attach_slave+0x3c>)
10009fa8:	4798      	blx	r3
}
10009faa:	b003      	add	sp, #12
10009fac:	bd30      	pop	{r4, r5, pc}
10009fae:	46c0      	nop			; (mov r8, r8)
10009fb0:	1000a5ad 	.word	0x1000a5ad
10009fb4:	1000a5bd 	.word	0x1000a5bd
10009fb8:	1000a775 	.word	0x1000a775

10009fbc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10009fbc:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10009fbe:	2201      	movs	r2, #1
10009fc0:	761a      	strb	r2, [r3, #24]
}
10009fc2:	4770      	bx	lr

10009fc4 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10009fc4:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009fc6:	2300      	movs	r3, #0
10009fc8:	6802      	ldr	r2, [r0, #0]
10009fca:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009fcc:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10009fce:	4a0d      	ldr	r2, [pc, #52]	; (1000a004 <spi_disable+0x40>)
10009fd0:	4293      	cmp	r3, r2
10009fd2:	d109      	bne.n	10009fe8 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10009fd4:	2041      	movs	r0, #65	; 0x41
10009fd6:	4c0c      	ldr	r4, [pc, #48]	; (1000a008 <spi_disable+0x44>)
10009fd8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10009fda:	2026      	movs	r0, #38	; 0x26
10009fdc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10009fde:	2038      	movs	r0, #56	; 0x38
10009fe0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10009fe2:	2001      	movs	r0, #1
10009fe4:	47a0      	blx	r4
10009fe6:	e00b      	b.n	1000a000 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10009fe8:	4a08      	ldr	r2, [pc, #32]	; (1000a00c <spi_disable+0x48>)
10009fea:	4293      	cmp	r3, r2
10009fec:	d108      	bne.n	1000a000 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10009fee:	2042      	movs	r0, #66	; 0x42
10009ff0:	4c05      	ldr	r4, [pc, #20]	; (1000a008 <spi_disable+0x44>)
10009ff2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10009ff4:	2027      	movs	r0, #39	; 0x27
10009ff6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10009ff8:	2039      	movs	r0, #57	; 0x39
10009ffa:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009ffc:	2002      	movs	r0, #2
10009ffe:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a000:	bd10      	pop	{r4, pc}
1000a002:	46c0      	nop			; (mov r8, r8)
1000a004:	40006000 	.word	0x40006000
1000a008:	1000af0d 	.word	0x1000af0d
1000a00c:	40007000 	.word	0x40007000

1000a010 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a010:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a012:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a014:	4b09      	ldr	r3, [pc, #36]	; (1000a03c <spi_reset+0x2c>)
1000a016:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a018:	4b09      	ldr	r3, [pc, #36]	; (1000a040 <spi_reset+0x30>)
1000a01a:	429c      	cmp	r4, r3
1000a01c:	d105      	bne.n	1000a02a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a01e:	2001      	movs	r0, #1
1000a020:	4c08      	ldr	r4, [pc, #32]	; (1000a044 <spi_reset+0x34>)
1000a022:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a024:	2038      	movs	r0, #56	; 0x38
1000a026:	47a0      	blx	r4
1000a028:	e007      	b.n	1000a03a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a02a:	4b07      	ldr	r3, [pc, #28]	; (1000a048 <spi_reset+0x38>)
1000a02c:	429c      	cmp	r4, r3
1000a02e:	d104      	bne.n	1000a03a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a030:	2002      	movs	r0, #2
1000a032:	4c04      	ldr	r4, [pc, #16]	; (1000a044 <spi_reset+0x34>)
1000a034:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a036:	2039      	movs	r0, #57	; 0x39
1000a038:	47a0      	blx	r4
	}
}
1000a03a:	bd10      	pop	{r4, pc}
1000a03c:	10009fc5 	.word	0x10009fc5
1000a040:	40006000 	.word	0x40006000
1000a044:	1000b279 	.word	0x1000b279
1000a048:	40007000 	.word	0x40007000

1000a04c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a04e:	465f      	mov	r7, fp
1000a050:	4646      	mov	r6, r8
1000a052:	b4c0      	push	{r6, r7}
1000a054:	b083      	sub	sp, #12
1000a056:	0006      	movs	r6, r0
1000a058:	4688      	mov	r8, r1
1000a05a:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a05c:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a05e:	7e0b      	ldrb	r3, [r1, #24]
1000a060:	07db      	lsls	r3, r3, #31
1000a062:	d501      	bpl.n	1000a068 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a064:	2300      	movs	r3, #0
1000a066:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a068:	0030      	movs	r0, r6
1000a06a:	4b4a      	ldr	r3, [pc, #296]	; (1000a194 <spi_init+0x148>)
1000a06c:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a06e:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a070:	4a49      	ldr	r2, [pc, #292]	; (1000a198 <spi_init+0x14c>)
1000a072:	4293      	cmp	r3, r2
1000a074:	d109      	bne.n	1000a08a <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a076:	2041      	movs	r0, #65	; 0x41
1000a078:	4c48      	ldr	r4, [pc, #288]	; (1000a19c <spi_init+0x150>)
1000a07a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a07c:	2026      	movs	r0, #38	; 0x26
1000a07e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a080:	2038      	movs	r0, #56	; 0x38
1000a082:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a084:	2001      	movs	r0, #1
1000a086:	47a0      	blx	r4
1000a088:	e00b      	b.n	1000a0a2 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a08a:	4a45      	ldr	r2, [pc, #276]	; (1000a1a0 <spi_init+0x154>)
1000a08c:	4293      	cmp	r3, r2
1000a08e:	d108      	bne.n	1000a0a2 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a090:	2042      	movs	r0, #66	; 0x42
1000a092:	4c42      	ldr	r4, [pc, #264]	; (1000a19c <spi_init+0x150>)
1000a094:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a096:	2027      	movs	r0, #39	; 0x27
1000a098:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a09a:	2039      	movs	r0, #57	; 0x39
1000a09c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a09e:	2002      	movs	r0, #2
1000a0a0:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a0a2:	a801      	add	r0, sp, #4
1000a0a4:	4b3f      	ldr	r3, [pc, #252]	; (1000a1a4 <spi_init+0x158>)
1000a0a6:	4798      	blx	r3
1000a0a8:	002c      	movs	r4, r5
1000a0aa:	3408      	adds	r4, #8
1000a0ac:	2318      	movs	r3, #24
1000a0ae:	469b      	mov	fp, r3
1000a0b0:	44ab      	add	fp, r5
1000a0b2:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a0b4:	6820      	ldr	r0, [r4, #0]
1000a0b6:	1c43      	adds	r3, r0, #1
1000a0b8:	d011      	beq.n	1000a0de <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a0ba:	782b      	ldrb	r3, [r5, #0]
1000a0bc:	2b01      	cmp	r3, #1
1000a0be:	d102      	bne.n	1000a0c6 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a0c0:	466a      	mov	r2, sp
1000a0c2:	7113      	strb	r3, [r2, #4]
1000a0c4:	e003      	b.n	1000a0ce <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a0c6:	2b00      	cmp	r3, #0
1000a0c8:	d101      	bne.n	1000a0ce <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a0ca:	466a      	mov	r2, sp
1000a0cc:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a0ce:	b2c0      	uxtb	r0, r0
1000a0d0:	a901      	add	r1, sp, #4
1000a0d2:	4b35      	ldr	r3, [pc, #212]	; (1000a1a8 <spi_init+0x15c>)
1000a0d4:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a0d6:	8a39      	ldrh	r1, [r7, #16]
1000a0d8:	7838      	ldrb	r0, [r7, #0]
1000a0da:	4b34      	ldr	r3, [pc, #208]	; (1000a1ac <spi_init+0x160>)
1000a0dc:	4798      	blx	r3
1000a0de:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a0e0:	455c      	cmp	r4, fp
1000a0e2:	d1e6      	bne.n	1000a0b2 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a0e4:	78eb      	ldrb	r3, [r5, #3]
1000a0e6:	4642      	mov	r2, r8
1000a0e8:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a0ea:	782b      	ldrb	r3, [r5, #0]
1000a0ec:	2b01      	cmp	r3, #1
1000a0ee:	d100      	bne.n	1000a0f2 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a0f0:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a0f2:	782b      	ldrb	r3, [r5, #0]
1000a0f4:	2b00      	cmp	r3, #0
1000a0f6:	d101      	bne.n	1000a0fc <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a0f8:	4642      	mov	r2, r8
1000a0fa:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a0fc:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a0fe:	782a      	ldrb	r2, [r5, #0]
1000a100:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a102:	782a      	ldrb	r2, [r5, #0]
1000a104:	2a01      	cmp	r2, #1
1000a106:	d101      	bne.n	1000a10c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a108:	792a      	ldrb	r2, [r5, #4]
1000a10a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a10c:	786a      	ldrb	r2, [r5, #1]
1000a10e:	2a04      	cmp	r2, #4
1000a110:	d104      	bne.n	1000a11c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a112:	2124      	movs	r1, #36	; 0x24
1000a114:	5c58      	ldrb	r0, [r3, r1]
1000a116:	4302      	orrs	r2, r0
1000a118:	545a      	strb	r2, [r3, r1]
1000a11a:	e004      	b.n	1000a126 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a11c:	2124      	movs	r1, #36	; 0x24
1000a11e:	5c5a      	ldrb	r2, [r3, r1]
1000a120:	2004      	movs	r0, #4
1000a122:	4382      	bics	r2, r0
1000a124:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a126:	78aa      	ldrb	r2, [r5, #2]
1000a128:	2a01      	cmp	r2, #1
1000a12a:	d01a      	beq.n	1000a162 <spi_init+0x116>
1000a12c:	2a00      	cmp	r2, #0
1000a12e:	d004      	beq.n	1000a13a <spi_init+0xee>
1000a130:	2a02      	cmp	r2, #2
1000a132:	d00c      	beq.n	1000a14e <spi_init+0x102>
1000a134:	2a03      	cmp	r2, #3
1000a136:	d01e      	beq.n	1000a176 <spi_init+0x12a>
1000a138:	e026      	b.n	1000a188 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a13a:	2224      	movs	r2, #36	; 0x24
1000a13c:	5c99      	ldrb	r1, [r3, r2]
1000a13e:	2002      	movs	r0, #2
1000a140:	4381      	bics	r1, r0
1000a142:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a144:	5c99      	ldrb	r1, [r3, r2]
1000a146:	3801      	subs	r0, #1
1000a148:	4381      	bics	r1, r0
1000a14a:	5499      	strb	r1, [r3, r2]
1000a14c:	e01c      	b.n	1000a188 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a14e:	2224      	movs	r2, #36	; 0x24
1000a150:	5c98      	ldrb	r0, [r3, r2]
1000a152:	2102      	movs	r1, #2
1000a154:	4301      	orrs	r1, r0
1000a156:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a158:	5c99      	ldrb	r1, [r3, r2]
1000a15a:	2001      	movs	r0, #1
1000a15c:	4381      	bics	r1, r0
1000a15e:	5499      	strb	r1, [r3, r2]
1000a160:	e012      	b.n	1000a188 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a162:	2224      	movs	r2, #36	; 0x24
1000a164:	5c99      	ldrb	r1, [r3, r2]
1000a166:	2002      	movs	r0, #2
1000a168:	4381      	bics	r1, r0
1000a16a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a16c:	5c98      	ldrb	r0, [r3, r2]
1000a16e:	2101      	movs	r1, #1
1000a170:	4301      	orrs	r1, r0
1000a172:	5499      	strb	r1, [r3, r2]
1000a174:	e008      	b.n	1000a188 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a176:	2224      	movs	r2, #36	; 0x24
1000a178:	5c98      	ldrb	r0, [r3, r2]
1000a17a:	2102      	movs	r1, #2
1000a17c:	4301      	orrs	r1, r0
1000a17e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a180:	5c98      	ldrb	r0, [r3, r2]
1000a182:	2101      	movs	r1, #1
1000a184:	4301      	orrs	r1, r0
1000a186:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a188:	2000      	movs	r0, #0
1000a18a:	b003      	add	sp, #12
1000a18c:	bc0c      	pop	{r2, r3}
1000a18e:	4690      	mov	r8, r2
1000a190:	469b      	mov	fp, r3
1000a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a194:	1000a011 	.word	0x1000a011
1000a198:	40006000 	.word	0x40006000
1000a19c:	1000abb1 	.word	0x1000abb1
1000a1a0:	40007000 	.word	0x40007000
1000a1a4:	1000a5ad 	.word	0x1000a5ad
1000a1a8:	1000a5bd 	.word	0x1000a5bd
1000a1ac:	1000a801 	.word	0x1000a801

1000a1b0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1b2:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a1b4:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a1b6:	2600      	movs	r6, #0
1000a1b8:	466d      	mov	r5, sp
1000a1ba:	71ee      	strb	r6, [r5, #7]
1000a1bc:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a1be:	2c00      	cmp	r4, #0
1000a1c0:	d034      	beq.n	1000a22c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a1c2:	2900      	cmp	r1, #0
1000a1c4:	d104      	bne.n	1000a1d0 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a1c6:	0029      	movs	r1, r5
1000a1c8:	7980      	ldrb	r0, [r0, #6]
1000a1ca:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a1cc:	2701      	movs	r7, #1
1000a1ce:	e00b      	b.n	1000a1e8 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a1d0:	2a00      	cmp	r2, #0
1000a1d2:	d005      	beq.n	1000a1e0 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a1d4:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a1d6:	2b00      	cmp	r3, #0
1000a1d8:	d029      	beq.n	1000a22e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a1da:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a1dc:	2700      	movs	r7, #0
1000a1de:	e003      	b.n	1000a1e8 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a1e0:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a1e2:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a1e4:	466a      	mov	r2, sp
1000a1e6:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a1e8:	2528      	movs	r5, #40	; 0x28
1000a1ea:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a1ec:	07c0      	lsls	r0, r0, #31
1000a1ee:	d4fc      	bmi.n	1000a1ea <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a1f0:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a1f2:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a1f4:	2b00      	cmp	r3, #0
1000a1f6:	d014      	beq.n	1000a222 <spi_transceive_buffer_wait+0x72>
1000a1f8:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a1fa:	4278      	negs	r0, r7
1000a1fc:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a1fe:	4270      	negs	r0, r6
1000a200:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a202:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a204:	07c0      	lsls	r0, r0, #31
1000a206:	d5fc      	bpl.n	1000a202 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a208:	7808      	ldrb	r0, [r1, #0]
1000a20a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a20c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a20e:	07c0      	lsls	r0, r0, #31
1000a210:	d5fc      	bpl.n	1000a20c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a212:	7920      	ldrb	r0, [r4, #4]
1000a214:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a216:	3501      	adds	r5, #1
1000a218:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a21a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a21c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a21e:	42ab      	cmp	r3, r5
1000a220:	d1ef      	bne.n	1000a202 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a222:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a224:	06db      	lsls	r3, r3, #27
1000a226:	d5fc      	bpl.n	1000a222 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a228:	2000      	movs	r0, #0
1000a22a:	e000      	b.n	1000a22e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a22c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a22e:	b003      	add	sp, #12
1000a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a232:	46c0      	nop			; (mov r8, r8)

1000a234 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a234:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a236:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a238:	2a00      	cmp	r2, #0
1000a23a:	d003      	beq.n	1000a244 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a23c:	2100      	movs	r1, #0
1000a23e:	4b04      	ldr	r3, [pc, #16]	; (1000a250 <spi_select_slave+0x1c>)
1000a240:	4798      	blx	r3
1000a242:	e002      	b.n	1000a24a <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a244:	2101      	movs	r1, #1
1000a246:	4b02      	ldr	r3, [pc, #8]	; (1000a250 <spi_select_slave+0x1c>)
1000a248:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a24a:	2000      	movs	r0, #0
1000a24c:	bd10      	pop	{r4, pc}
1000a24e:	46c0      	nop			; (mov r8, r8)
1000a250:	1000a775 	.word	0x1000a775

1000a254 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a254:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a256:	4b0d      	ldr	r3, [pc, #52]	; (1000a28c <dualtimer_isr_handler+0x38>)
1000a258:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a25a:	2b00      	cmp	r3, #0
1000a25c:	d007      	beq.n	1000a26e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a25e:	2201      	movs	r2, #1
1000a260:	4b0a      	ldr	r3, [pc, #40]	; (1000a28c <dualtimer_isr_handler+0x38>)
1000a262:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a264:	4b0a      	ldr	r3, [pc, #40]	; (1000a290 <dualtimer_isr_handler+0x3c>)
1000a266:	681b      	ldr	r3, [r3, #0]
1000a268:	2b00      	cmp	r3, #0
1000a26a:	d000      	beq.n	1000a26e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a26c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a26e:	2334      	movs	r3, #52	; 0x34
1000a270:	4a06      	ldr	r2, [pc, #24]	; (1000a28c <dualtimer_isr_handler+0x38>)
1000a272:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a274:	2b00      	cmp	r3, #0
1000a276:	d007      	beq.n	1000a288 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a278:	2101      	movs	r1, #1
1000a27a:	232c      	movs	r3, #44	; 0x2c
1000a27c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a27e:	4b05      	ldr	r3, [pc, #20]	; (1000a294 <dualtimer_isr_handler+0x40>)
1000a280:	681b      	ldr	r3, [r3, #0]
1000a282:	2b00      	cmp	r3, #0
1000a284:	d000      	beq.n	1000a288 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a286:	4798      	blx	r3
	}
}
1000a288:	bd10      	pop	{r4, pc}
1000a28a:	46c0      	nop			; (mov r8, r8)
1000a28c:	40001000 	.word	0x40001000
1000a290:	10019074 	.word	0x10019074
1000a294:	10019078 	.word	0x10019078

1000a298 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a298:	2301      	movs	r3, #1
1000a29a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a29c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a29e:	2202      	movs	r2, #2
1000a2a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a2a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a2a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a2a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a2a8:	2200      	movs	r2, #0
1000a2aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a2ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a2ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a2b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a2b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a2b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a2b6:	7602      	strb	r2, [r0, #24]
}
1000a2b8:	4770      	bx	lr
1000a2ba:	46c0      	nop			; (mov r8, r8)

1000a2bc <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a2bc:	2800      	cmp	r0, #0
1000a2be:	d102      	bne.n	1000a2c6 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a2c0:	4b02      	ldr	r3, [pc, #8]	; (1000a2cc <dualtimer_get_value+0x10>)
1000a2c2:	6858      	ldr	r0, [r3, #4]
1000a2c4:	e001      	b.n	1000a2ca <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a2c6:	4b01      	ldr	r3, [pc, #4]	; (1000a2cc <dualtimer_get_value+0x10>)
1000a2c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a2ca:	4770      	bx	lr
1000a2cc:	40001000 	.word	0x40001000

1000a2d0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a2d0:	2800      	cmp	r0, #0
1000a2d2:	d107      	bne.n	1000a2e4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a2d4:	2900      	cmp	r1, #0
1000a2d6:	d102      	bne.n	1000a2de <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a2d8:	4b06      	ldr	r3, [pc, #24]	; (1000a2f4 <dualtimer_set_counter+0x24>)
1000a2da:	601a      	str	r2, [r3, #0]
1000a2dc:	e009      	b.n	1000a2f2 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a2de:	4b05      	ldr	r3, [pc, #20]	; (1000a2f4 <dualtimer_set_counter+0x24>)
1000a2e0:	619a      	str	r2, [r3, #24]
1000a2e2:	e006      	b.n	1000a2f2 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a2e4:	2900      	cmp	r1, #0
1000a2e6:	d102      	bne.n	1000a2ee <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a2e8:	4b02      	ldr	r3, [pc, #8]	; (1000a2f4 <dualtimer_set_counter+0x24>)
1000a2ea:	621a      	str	r2, [r3, #32]
1000a2ec:	e001      	b.n	1000a2f2 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a2ee:	4b01      	ldr	r3, [pc, #4]	; (1000a2f4 <dualtimer_set_counter+0x24>)
1000a2f0:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a2f2:	4770      	bx	lr
1000a2f4:	40001000 	.word	0x40001000

1000a2f8 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a2f8:	2800      	cmp	r0, #0
1000a2fa:	d105      	bne.n	1000a308 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a2fc:	4a06      	ldr	r2, [pc, #24]	; (1000a318 <dualtimer_enable+0x20>)
1000a2fe:	7a11      	ldrb	r1, [r2, #8]
1000a300:	2380      	movs	r3, #128	; 0x80
1000a302:	430b      	orrs	r3, r1
1000a304:	7213      	strb	r3, [r2, #8]
1000a306:	e005      	b.n	1000a314 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a308:	4903      	ldr	r1, [pc, #12]	; (1000a318 <dualtimer_enable+0x20>)
1000a30a:	2228      	movs	r2, #40	; 0x28
1000a30c:	5c88      	ldrb	r0, [r1, r2]
1000a30e:	2380      	movs	r3, #128	; 0x80
1000a310:	4303      	orrs	r3, r0
1000a312:	548b      	strb	r3, [r1, r2]
	}
}
1000a314:	4770      	bx	lr
1000a316:	46c0      	nop			; (mov r8, r8)
1000a318:	40001000 	.word	0x40001000

1000a31c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a31c:	2800      	cmp	r0, #0
1000a31e:	d105      	bne.n	1000a32c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a320:	4a06      	ldr	r2, [pc, #24]	; (1000a33c <dualtimer_disable+0x20>)
1000a322:	7a11      	ldrb	r1, [r2, #8]
1000a324:	237f      	movs	r3, #127	; 0x7f
1000a326:	400b      	ands	r3, r1
1000a328:	7213      	strb	r3, [r2, #8]
1000a32a:	e005      	b.n	1000a338 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a32c:	4903      	ldr	r1, [pc, #12]	; (1000a33c <dualtimer_disable+0x20>)
1000a32e:	2228      	movs	r2, #40	; 0x28
1000a330:	5c88      	ldrb	r0, [r1, r2]
1000a332:	237f      	movs	r3, #127	; 0x7f
1000a334:	4003      	ands	r3, r0
1000a336:	548b      	strb	r3, [r1, r2]
	}
}
1000a338:	4770      	bx	lr
1000a33a:	46c0      	nop			; (mov r8, r8)
1000a33c:	40001000 	.word	0x40001000

1000a340 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a340:	b570      	push	{r4, r5, r6, lr}
1000a342:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a344:	2004      	movs	r0, #4
1000a346:	4b39      	ldr	r3, [pc, #228]	; (1000a42c <dualtimer_init+0xec>)
1000a348:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a34a:	7823      	ldrb	r3, [r4, #0]
1000a34c:	2b00      	cmp	r3, #0
1000a34e:	d102      	bne.n	1000a356 <dualtimer_init+0x16>
1000a350:	7b23      	ldrb	r3, [r4, #12]
1000a352:	2b00      	cmp	r3, #0
1000a354:	d065      	beq.n	1000a422 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a356:	4936      	ldr	r1, [pc, #216]	; (1000a430 <dualtimer_init+0xf0>)
1000a358:	68ca      	ldr	r2, [r1, #12]
1000a35a:	2320      	movs	r3, #32
1000a35c:	4313      	orrs	r3, r2
1000a35e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a360:	7e22      	ldrb	r2, [r4, #24]
1000a362:	698b      	ldr	r3, [r1, #24]
1000a364:	2003      	movs	r0, #3
1000a366:	4002      	ands	r2, r0
1000a368:	0112      	lsls	r2, r2, #4
1000a36a:	302d      	adds	r0, #45	; 0x2d
1000a36c:	4383      	bics	r3, r0
1000a36e:	4313      	orrs	r3, r2
1000a370:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a372:	7823      	ldrb	r3, [r4, #0]
1000a374:	2b00      	cmp	r3, #0
1000a376:	d026      	beq.n	1000a3c6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a378:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a37a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a37c:	2b00      	cmp	r3, #0
1000a37e:	d003      	beq.n	1000a388 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a380:	3b02      	subs	r3, #2
1000a382:	425d      	negs	r5, r3
1000a384:	415d      	adcs	r5, r3
1000a386:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a388:	78a2      	ldrb	r2, [r4, #2]
1000a38a:	0052      	lsls	r2, r2, #1
1000a38c:	2502      	movs	r5, #2
1000a38e:	402a      	ands	r2, r5
1000a390:	78e3      	ldrb	r3, [r4, #3]
1000a392:	009b      	lsls	r3, r3, #2
1000a394:	350a      	adds	r5, #10
1000a396:	402b      	ands	r3, r5
1000a398:	431a      	orrs	r2, r3
1000a39a:	0015      	movs	r5, r2
1000a39c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a39e:	7923      	ldrb	r3, [r4, #4]
1000a3a0:	2b00      	cmp	r3, #0
1000a3a2:	d001      	beq.n	1000a3a8 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a3a4:	2320      	movs	r3, #32
1000a3a6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a3a8:	4b22      	ldr	r3, [pc, #136]	; (1000a434 <dualtimer_init+0xf4>)
1000a3aa:	68a2      	ldr	r2, [r4, #8]
1000a3ac:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a3ae:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a3b0:	491f      	ldr	r1, [pc, #124]	; (1000a430 <dualtimer_init+0xf0>)
1000a3b2:	22c4      	movs	r2, #196	; 0xc4
1000a3b4:	0052      	lsls	r2, r2, #1
1000a3b6:	5c88      	ldrb	r0, [r1, r2]
1000a3b8:	2301      	movs	r3, #1
1000a3ba:	4303      	orrs	r3, r0
1000a3bc:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a3be:	2000      	movs	r0, #0
1000a3c0:	4b1d      	ldr	r3, [pc, #116]	; (1000a438 <dualtimer_init+0xf8>)
1000a3c2:	4798      	blx	r3
1000a3c4:	e000      	b.n	1000a3c8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a3c6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a3c8:	7b23      	ldrb	r3, [r4, #12]
1000a3ca:	2b00      	cmp	r3, #0
1000a3cc:	d029      	beq.n	1000a422 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a3ce:	7b63      	ldrb	r3, [r4, #13]
1000a3d0:	2b00      	cmp	r3, #0
1000a3d2:	d005      	beq.n	1000a3e0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a3d4:	2b01      	cmp	r3, #1
1000a3d6:	d005      	beq.n	1000a3e4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a3d8:	2b02      	cmp	r3, #2
1000a3da:	d104      	bne.n	1000a3e6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a3dc:	2540      	movs	r5, #64	; 0x40
1000a3de:	e002      	b.n	1000a3e6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a3e0:	2501      	movs	r5, #1
1000a3e2:	e000      	b.n	1000a3e6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a3e4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a3e6:	7ba3      	ldrb	r3, [r4, #14]
1000a3e8:	005b      	lsls	r3, r3, #1
1000a3ea:	2102      	movs	r1, #2
1000a3ec:	4019      	ands	r1, r3
1000a3ee:	7be2      	ldrb	r2, [r4, #15]
1000a3f0:	0092      	lsls	r2, r2, #2
1000a3f2:	230c      	movs	r3, #12
1000a3f4:	4013      	ands	r3, r2
1000a3f6:	430b      	orrs	r3, r1
1000a3f8:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a3fa:	7c23      	ldrb	r3, [r4, #16]
1000a3fc:	2b00      	cmp	r3, #0
1000a3fe:	d001      	beq.n	1000a404 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a400:	2320      	movs	r3, #32
1000a402:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a404:	6962      	ldr	r2, [r4, #20]
1000a406:	4b0b      	ldr	r3, [pc, #44]	; (1000a434 <dualtimer_init+0xf4>)
1000a408:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a40a:	2228      	movs	r2, #40	; 0x28
1000a40c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a40e:	4908      	ldr	r1, [pc, #32]	; (1000a430 <dualtimer_init+0xf0>)
1000a410:	3261      	adds	r2, #97	; 0x61
1000a412:	32ff      	adds	r2, #255	; 0xff
1000a414:	5c88      	ldrb	r0, [r1, r2]
1000a416:	2302      	movs	r3, #2
1000a418:	4303      	orrs	r3, r0
1000a41a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a41c:	2001      	movs	r0, #1
1000a41e:	4b06      	ldr	r3, [pc, #24]	; (1000a438 <dualtimer_init+0xf8>)
1000a420:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a422:	4906      	ldr	r1, [pc, #24]	; (1000a43c <dualtimer_init+0xfc>)
1000a424:	201e      	movs	r0, #30
1000a426:	4b06      	ldr	r3, [pc, #24]	; (1000a440 <dualtimer_init+0x100>)
1000a428:	4798      	blx	r3
}
1000a42a:	bd70      	pop	{r4, r5, r6, pc}
1000a42c:	1000b279 	.word	0x1000b279
1000a430:	4000b000 	.word	0x4000b000
1000a434:	40001000 	.word	0x40001000
1000a438:	1000a2f9 	.word	0x1000a2f9
1000a43c:	1000a255 	.word	0x1000a255
1000a440:	1000b6e1 	.word	0x1000b6e1

1000a444 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a444:	2800      	cmp	r0, #0
1000a446:	d102      	bne.n	1000a44e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a448:	4b02      	ldr	r3, [pc, #8]	; (1000a454 <dualtimer_register_callback+0x10>)
1000a44a:	6019      	str	r1, [r3, #0]
1000a44c:	e001      	b.n	1000a452 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a44e:	4b02      	ldr	r3, [pc, #8]	; (1000a458 <dualtimer_register_callback+0x14>)
1000a450:	6019      	str	r1, [r3, #0]
	}
}
1000a452:	4770      	bx	lr
1000a454:	10019074 	.word	0x10019074
1000a458:	10019078 	.word	0x10019078

1000a45c <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a45c:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a45e:	4b16      	ldr	r3, [pc, #88]	; (1000a4b8 <gpio_port0_isr_handler+0x5c>)
1000a460:	681d      	ldr	r5, [r3, #0]
1000a462:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a464:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a466:	07cb      	lsls	r3, r1, #31
1000a468:	d407      	bmi.n	1000a47a <gpio_port0_isr_handler+0x1e>
1000a46a:	2301      	movs	r3, #1
1000a46c:	2401      	movs	r4, #1
1000a46e:	0018      	movs	r0, r3
1000a470:	0022      	movs	r2, r4
1000a472:	409a      	lsls	r2, r3
1000a474:	4211      	tst	r1, r2
1000a476:	d014      	beq.n	1000a4a2 <gpio_port0_isr_handler+0x46>
1000a478:	e001      	b.n	1000a47e <gpio_port0_isr_handler+0x22>
1000a47a:	2201      	movs	r2, #1
1000a47c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a47e:	b292      	uxth	r2, r2
1000a480:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a482:	2346      	movs	r3, #70	; 0x46
1000a484:	4a0c      	ldr	r2, [pc, #48]	; (1000a4b8 <gpio_port0_isr_handler+0x5c>)
1000a486:	5ad3      	ldrh	r3, [r2, r3]
1000a488:	4103      	asrs	r3, r0
1000a48a:	07db      	lsls	r3, r3, #31
1000a48c:	d50c      	bpl.n	1000a4a8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a48e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a490:	5ad3      	ldrh	r3, [r2, r3]
1000a492:	4103      	asrs	r3, r0
1000a494:	07db      	lsls	r3, r3, #31
1000a496:	d507      	bpl.n	1000a4a8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a498:	0080      	lsls	r0, r0, #2
1000a49a:	1810      	adds	r0, r2, r0
1000a49c:	6843      	ldr	r3, [r0, #4]
1000a49e:	4798      	blx	r3
1000a4a0:	e002      	b.n	1000a4a8 <gpio_port0_isr_handler+0x4c>
1000a4a2:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a4a4:	2b10      	cmp	r3, #16
1000a4a6:	d1e2      	bne.n	1000a46e <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a4a8:	2180      	movs	r1, #128	; 0x80
1000a4aa:	0409      	lsls	r1, r1, #16
1000a4ac:	23c0      	movs	r3, #192	; 0xc0
1000a4ae:	005b      	lsls	r3, r3, #1
1000a4b0:	4a02      	ldr	r2, [pc, #8]	; (1000a4bc <gpio_port0_isr_handler+0x60>)
1000a4b2:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a4b4:	bd70      	pop	{r4, r5, r6, pc}
1000a4b6:	46c0      	nop			; (mov r8, r8)
1000a4b8:	1001ad80 	.word	0x1001ad80
1000a4bc:	e000e100 	.word	0xe000e100

1000a4c0 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a4c2:	4b18      	ldr	r3, [pc, #96]	; (1000a524 <gpio_port1_isr_handler+0x64>)
1000a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a4c6:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a4c8:	b2b6      	uxth	r6, r6
1000a4ca:	0037      	movs	r7, r6
1000a4cc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a4ce:	0b76      	lsrs	r6, r6, #13
1000a4d0:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a4d2:	4d14      	ldr	r5, [pc, #80]	; (1000a524 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a4d4:	2e00      	cmp	r6, #0
1000a4d6:	d001      	beq.n	1000a4dc <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a4d8:	4b13      	ldr	r3, [pc, #76]	; (1000a528 <gpio_port1_isr_handler+0x68>)
1000a4da:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a4dc:	0022      	movs	r2, r4
1000a4de:	2301      	movs	r3, #1
1000a4e0:	40a3      	lsls	r3, r4
1000a4e2:	421f      	tst	r7, r3
1000a4e4:	d013      	beq.n	1000a50e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a4e6:	b29b      	uxth	r3, r3
1000a4e8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a4ea:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a4ec:	238e      	movs	r3, #142	; 0x8e
1000a4ee:	5aeb      	ldrh	r3, [r5, r3]
1000a4f0:	4123      	asrs	r3, r4
1000a4f2:	07db      	lsls	r3, r3, #31
1000a4f4:	d50b      	bpl.n	1000a50e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a4f6:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a4f8:	490a      	ldr	r1, [pc, #40]	; (1000a524 <gpio_port1_isr_handler+0x64>)
1000a4fa:	5acb      	ldrh	r3, [r1, r3]
1000a4fc:	4123      	asrs	r3, r4
1000a4fe:	07db      	lsls	r3, r3, #31
1000a500:	d505      	bpl.n	1000a50e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a502:	3212      	adds	r2, #18
1000a504:	0092      	lsls	r2, r2, #2
1000a506:	188a      	adds	r2, r1, r2
1000a508:	6853      	ldr	r3, [r2, #4]
1000a50a:	4798      	blx	r3
				break;
1000a50c:	e002      	b.n	1000a514 <gpio_port1_isr_handler+0x54>
1000a50e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a510:	2c10      	cmp	r4, #16
1000a512:	d1df      	bne.n	1000a4d4 <gpio_port1_isr_handler+0x14>
1000a514:	2180      	movs	r1, #128	; 0x80
1000a516:	0449      	lsls	r1, r1, #17
1000a518:	23c0      	movs	r3, #192	; 0xc0
1000a51a:	005b      	lsls	r3, r3, #1
1000a51c:	4a03      	ldr	r2, [pc, #12]	; (1000a52c <gpio_port1_isr_handler+0x6c>)
1000a51e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a522:	46c0      	nop			; (mov r8, r8)
1000a524:	1001ad80 	.word	0x1001ad80
1000a528:	0001bc51 	.word	0x0001bc51
1000a52c:	e000e100 	.word	0xe000e100

1000a530 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a530:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a532:	2390      	movs	r3, #144	; 0x90
1000a534:	4a1b      	ldr	r2, [pc, #108]	; (1000a5a4 <gpio_port2_isr_handler+0x74>)
1000a536:	58d2      	ldr	r2, [r2, r3]
1000a538:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a53a:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a53c:	04d9      	lsls	r1, r3, #19
1000a53e:	d414      	bmi.n	1000a56a <gpio_port2_isr_handler+0x3a>
1000a540:	0499      	lsls	r1, r3, #18
1000a542:	d40a      	bmi.n	1000a55a <gpio_port2_isr_handler+0x2a>
1000a544:	0459      	lsls	r1, r3, #17
1000a546:	d40c      	bmi.n	1000a562 <gpio_port2_isr_handler+0x32>
1000a548:	0bdb      	lsrs	r3, r3, #15
1000a54a:	03db      	lsls	r3, r3, #15
1000a54c:	b29b      	uxth	r3, r3
1000a54e:	2b00      	cmp	r3, #0
1000a550:	d020      	beq.n	1000a594 <gpio_port2_isr_handler+0x64>
1000a552:	2380      	movs	r3, #128	; 0x80
1000a554:	021b      	lsls	r3, r3, #8
1000a556:	210f      	movs	r1, #15
1000a558:	e00a      	b.n	1000a570 <gpio_port2_isr_handler+0x40>
1000a55a:	2380      	movs	r3, #128	; 0x80
1000a55c:	019b      	lsls	r3, r3, #6
1000a55e:	210d      	movs	r1, #13
1000a560:	e006      	b.n	1000a570 <gpio_port2_isr_handler+0x40>
1000a562:	2380      	movs	r3, #128	; 0x80
1000a564:	01db      	lsls	r3, r3, #7
1000a566:	210e      	movs	r1, #14
1000a568:	e002      	b.n	1000a570 <gpio_port2_isr_handler+0x40>
1000a56a:	2380      	movs	r3, #128	; 0x80
1000a56c:	015b      	lsls	r3, r3, #5
1000a56e:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a570:	b29b      	uxth	r3, r3
1000a572:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a574:	23d6      	movs	r3, #214	; 0xd6
1000a576:	4a0b      	ldr	r2, [pc, #44]	; (1000a5a4 <gpio_port2_isr_handler+0x74>)
1000a578:	5ad3      	ldrh	r3, [r2, r3]
1000a57a:	410b      	asrs	r3, r1
1000a57c:	07db      	lsls	r3, r3, #31
1000a57e:	d509      	bpl.n	1000a594 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a580:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a582:	5ad3      	ldrh	r3, [r2, r3]
1000a584:	410b      	asrs	r3, r1
1000a586:	07db      	lsls	r3, r3, #31
1000a588:	d504      	bpl.n	1000a594 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a58a:	3124      	adds	r1, #36	; 0x24
1000a58c:	0089      	lsls	r1, r1, #2
1000a58e:	1851      	adds	r1, r2, r1
1000a590:	684b      	ldr	r3, [r1, #4]
1000a592:	4798      	blx	r3
1000a594:	2180      	movs	r1, #128	; 0x80
1000a596:	0489      	lsls	r1, r1, #18
1000a598:	23c0      	movs	r3, #192	; 0xc0
1000a59a:	005b      	lsls	r3, r3, #1
1000a59c:	4a02      	ldr	r2, [pc, #8]	; (1000a5a8 <gpio_port2_isr_handler+0x78>)
1000a59e:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a5a0:	bd10      	pop	{r4, pc}
1000a5a2:	46c0      	nop			; (mov r8, r8)
1000a5a4:	1001ad80 	.word	0x1001ad80
1000a5a8:	e000e100 	.word	0xe000e100

1000a5ac <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a5ac:	2300      	movs	r3, #0
1000a5ae:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a5b0:	2201      	movs	r2, #1
1000a5b2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a5b4:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a5b6:	70c3      	strb	r3, [r0, #3]
}
1000a5b8:	4770      	bx	lr
1000a5ba:	46c0      	nop			; (mov r8, r8)

1000a5bc <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a5bc:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a5be:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a5c0:	2801      	cmp	r0, #1
1000a5c2:	d800      	bhi.n	1000a5c6 <gpio_pin_set_config+0xa>
1000a5c4:	e0c8      	b.n	1000a758 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a5c6:	2807      	cmp	r0, #7
1000a5c8:	d809      	bhi.n	1000a5de <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a5ca:	4d64      	ldr	r5, [pc, #400]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a5cc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a5ce:	3b10      	subs	r3, #16
1000a5d0:	4003      	ands	r3, r0
1000a5d2:	009b      	lsls	r3, r3, #2
1000a5d4:	2407      	movs	r4, #7
1000a5d6:	409c      	lsls	r4, r3
1000a5d8:	43a2      	bics	r2, r4
1000a5da:	646a      	str	r2, [r5, #68]	; 0x44
1000a5dc:	e029      	b.n	1000a632 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a5de:	280f      	cmp	r0, #15
1000a5e0:	d809      	bhi.n	1000a5f6 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a5e2:	4d5e      	ldr	r5, [pc, #376]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a5e4:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a5e6:	2307      	movs	r3, #7
1000a5e8:	4003      	ands	r3, r0
1000a5ea:	009b      	lsls	r3, r3, #2
1000a5ec:	2407      	movs	r4, #7
1000a5ee:	409c      	lsls	r4, r3
1000a5f0:	43a2      	bics	r2, r4
1000a5f2:	64aa      	str	r2, [r5, #72]	; 0x48
1000a5f4:	e01d      	b.n	1000a632 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a5f6:	2817      	cmp	r0, #23
1000a5f8:	d809      	bhi.n	1000a60e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a5fa:	4d58      	ldr	r5, [pc, #352]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a5fc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a5fe:	2307      	movs	r3, #7
1000a600:	4003      	ands	r3, r0
1000a602:	009b      	lsls	r3, r3, #2
1000a604:	2407      	movs	r4, #7
1000a606:	409c      	lsls	r4, r3
1000a608:	43a2      	bics	r2, r4
1000a60a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a60c:	e011      	b.n	1000a632 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a60e:	0003      	movs	r3, r0
1000a610:	3b2c      	subs	r3, #44	; 0x2c
1000a612:	2b03      	cmp	r3, #3
1000a614:	d80d      	bhi.n	1000a632 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a616:	4d52      	ldr	r5, [pc, #328]	; (1000a760 <gpio_pin_set_config+0x1a4>)
1000a618:	2482      	movs	r4, #130	; 0x82
1000a61a:	00e4      	lsls	r4, r4, #3
1000a61c:	5d2a      	ldrb	r2, [r5, r4]
1000a61e:	0712      	lsls	r2, r2, #28
1000a620:	2601      	movs	r6, #1
1000a622:	409e      	lsls	r6, r3
1000a624:	0f12      	lsrs	r2, r2, #28
1000a626:	5d2b      	ldrb	r3, [r5, r4]
1000a628:	43b2      	bics	r2, r6
1000a62a:	260f      	movs	r6, #15
1000a62c:	43b3      	bics	r3, r6
1000a62e:	4313      	orrs	r3, r2
1000a630:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a632:	0003      	movs	r3, r0
1000a634:	3b1d      	subs	r3, #29
1000a636:	2b02      	cmp	r3, #2
1000a638:	d829      	bhi.n	1000a68e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a63a:	784b      	ldrb	r3, [r1, #1]
1000a63c:	2b01      	cmp	r3, #1
1000a63e:	d108      	bne.n	1000a652 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a640:	4d47      	ldr	r5, [pc, #284]	; (1000a760 <gpio_pin_set_config+0x1a4>)
1000a642:	7d2b      	ldrb	r3, [r5, #20]
1000a644:	241f      	movs	r4, #31
1000a646:	1a24      	subs	r4, r4, r0
1000a648:	2201      	movs	r2, #1
1000a64a:	40a2      	lsls	r2, r4
1000a64c:	4393      	bics	r3, r2
1000a64e:	752b      	strb	r3, [r5, #20]
1000a650:	e008      	b.n	1000a664 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a652:	4c43      	ldr	r4, [pc, #268]	; (1000a760 <gpio_pin_set_config+0x1a4>)
1000a654:	7d25      	ldrb	r5, [r4, #20]
1000a656:	221f      	movs	r2, #31
1000a658:	1a12      	subs	r2, r2, r0
1000a65a:	2301      	movs	r3, #1
1000a65c:	4093      	lsls	r3, r2
1000a65e:	432b      	orrs	r3, r5
1000a660:	b2db      	uxtb	r3, r3
1000a662:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a664:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a666:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a668:	2a00      	cmp	r2, #0
1000a66a:	d075      	beq.n	1000a758 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a66c:	493c      	ldr	r1, [pc, #240]	; (1000a760 <gpio_pin_set_config+0x1a4>)
1000a66e:	880c      	ldrh	r4, [r1, #0]
1000a670:	221f      	movs	r2, #31
1000a672:	1a10      	subs	r0, r2, r0
1000a674:	0080      	lsls	r0, r0, #2
1000a676:	3301      	adds	r3, #1
1000a678:	4083      	lsls	r3, r0
1000a67a:	4323      	orrs	r3, r4
1000a67c:	b29b      	uxth	r3, r3
1000a67e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a680:	4a38      	ldr	r2, [pc, #224]	; (1000a764 <gpio_pin_set_config+0x1a8>)
1000a682:	7811      	ldrb	r1, [r2, #0]
1000a684:	2302      	movs	r3, #2
1000a686:	430b      	orrs	r3, r1
1000a688:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a68a:	2300      	movs	r3, #0
1000a68c:	e064      	b.n	1000a758 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a68e:	780a      	ldrb	r2, [r1, #0]
1000a690:	2a00      	cmp	r2, #0
1000a692:	d140      	bne.n	1000a716 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a694:	280f      	cmp	r0, #15
1000a696:	d808      	bhi.n	1000a6aa <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a698:	2301      	movs	r3, #1
1000a69a:	4083      	lsls	r3, r0
1000a69c:	b29b      	uxth	r3, r3
1000a69e:	4a32      	ldr	r2, [pc, #200]	; (1000a768 <gpio_pin_set_config+0x1ac>)
1000a6a0:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a6a2:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a6a4:	281f      	cmp	r0, #31
1000a6a6:	d857      	bhi.n	1000a758 <gpio_pin_set_config+0x19c>
1000a6a8:	e012      	b.n	1000a6d0 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a6aa:	281f      	cmp	r0, #31
1000a6ac:	d807      	bhi.n	1000a6be <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a6ae:	220f      	movs	r2, #15
1000a6b0:	4002      	ands	r2, r0
1000a6b2:	2301      	movs	r3, #1
1000a6b4:	4093      	lsls	r3, r2
1000a6b6:	b29b      	uxth	r3, r3
1000a6b8:	4a2c      	ldr	r2, [pc, #176]	; (1000a76c <gpio_pin_set_config+0x1b0>)
1000a6ba:	8293      	strh	r3, [r2, #20]
1000a6bc:	e008      	b.n	1000a6d0 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a6be:	230f      	movs	r3, #15
1000a6c0:	4018      	ands	r0, r3
1000a6c2:	3b0e      	subs	r3, #14
1000a6c4:	4083      	lsls	r3, r0
1000a6c6:	b29b      	uxth	r3, r3
1000a6c8:	4a29      	ldr	r2, [pc, #164]	; (1000a770 <gpio_pin_set_config+0x1b4>)
1000a6ca:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a6cc:	2300      	movs	r3, #0
1000a6ce:	e043      	b.n	1000a758 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a6d0:	784b      	ldrb	r3, [r1, #1]
1000a6d2:	2b01      	cmp	r3, #1
1000a6d4:	d00c      	beq.n	1000a6f0 <gpio_pin_set_config+0x134>
1000a6d6:	2b00      	cmp	r3, #0
1000a6d8:	d002      	beq.n	1000a6e0 <gpio_pin_set_config+0x124>
1000a6da:	2b02      	cmp	r3, #2
1000a6dc:	d010      	beq.n	1000a700 <gpio_pin_set_config+0x144>
1000a6de:	e03a      	b.n	1000a756 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a6e0:	491e      	ldr	r1, [pc, #120]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a6e2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a6e4:	2301      	movs	r3, #1
1000a6e6:	4083      	lsls	r3, r0
1000a6e8:	4313      	orrs	r3, r2
1000a6ea:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a6ec:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a6ee:	e033      	b.n	1000a758 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a6f0:	491a      	ldr	r1, [pc, #104]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a6f2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a6f4:	2201      	movs	r2, #1
1000a6f6:	4082      	lsls	r2, r0
1000a6f8:	4393      	bics	r3, r2
1000a6fa:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a6fc:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a6fe:	e02b      	b.n	1000a758 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a700:	4b16      	ldr	r3, [pc, #88]	; (1000a75c <gpio_pin_set_config+0x1a0>)
1000a702:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a704:	2201      	movs	r2, #1
1000a706:	4082      	lsls	r2, r0
1000a708:	4311      	orrs	r1, r2
1000a70a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a70c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a70e:	4391      	bics	r1, r2
1000a710:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a712:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a714:	e020      	b.n	1000a758 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a716:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a718:	2a01      	cmp	r2, #1
1000a71a:	d11d      	bne.n	1000a758 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a71c:	280f      	cmp	r0, #15
1000a71e:	d806      	bhi.n	1000a72e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a720:	3301      	adds	r3, #1
1000a722:	4083      	lsls	r3, r0
1000a724:	b29b      	uxth	r3, r3
1000a726:	4a10      	ldr	r2, [pc, #64]	; (1000a768 <gpio_pin_set_config+0x1ac>)
1000a728:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a72a:	2300      	movs	r3, #0
1000a72c:	e014      	b.n	1000a758 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a72e:	281f      	cmp	r0, #31
1000a730:	d808      	bhi.n	1000a744 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a732:	230f      	movs	r3, #15
1000a734:	4018      	ands	r0, r3
1000a736:	3b0e      	subs	r3, #14
1000a738:	4083      	lsls	r3, r0
1000a73a:	b29b      	uxth	r3, r3
1000a73c:	4a0b      	ldr	r2, [pc, #44]	; (1000a76c <gpio_pin_set_config+0x1b0>)
1000a73e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a740:	2300      	movs	r3, #0
1000a742:	e009      	b.n	1000a758 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a744:	230f      	movs	r3, #15
1000a746:	4018      	ands	r0, r3
1000a748:	3b0e      	subs	r3, #14
1000a74a:	4083      	lsls	r3, r0
1000a74c:	b29b      	uxth	r3, r3
1000a74e:	4a08      	ldr	r2, [pc, #32]	; (1000a770 <gpio_pin_set_config+0x1b4>)
1000a750:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a752:	2300      	movs	r3, #0
1000a754:	e000      	b.n	1000a758 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a756:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a758:	0018      	movs	r0, r3
1000a75a:	bd70      	pop	{r4, r5, r6, pc}
1000a75c:	4000b000 	.word	0x4000b000
1000a760:	4000f000 	.word	0x4000f000
1000a764:	4000e000 	.word	0x4000e000
1000a768:	40010000 	.word	0x40010000
1000a76c:	40011000 	.word	0x40011000
1000a770:	40013000 	.word	0x40013000

1000a774 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a774:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a776:	280f      	cmp	r0, #15
1000a778:	d810      	bhi.n	1000a79c <gpio_pin_set_output_level+0x28>
		if(level) {
1000a77a:	2900      	cmp	r1, #0
1000a77c:	d007      	beq.n	1000a78e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a77e:	4a1d      	ldr	r2, [pc, #116]	; (1000a7f4 <gpio_pin_set_output_level+0x80>)
1000a780:	8891      	ldrh	r1, [r2, #4]
1000a782:	2301      	movs	r3, #1
1000a784:	4083      	lsls	r3, r0
1000a786:	430b      	orrs	r3, r1
1000a788:	b29b      	uxth	r3, r3
1000a78a:	8093      	strh	r3, [r2, #4]
1000a78c:	e031      	b.n	1000a7f2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a78e:	4919      	ldr	r1, [pc, #100]	; (1000a7f4 <gpio_pin_set_output_level+0x80>)
1000a790:	888b      	ldrh	r3, [r1, #4]
1000a792:	2201      	movs	r2, #1
1000a794:	4082      	lsls	r2, r0
1000a796:	4393      	bics	r3, r2
1000a798:	808b      	strh	r3, [r1, #4]
1000a79a:	e02a      	b.n	1000a7f2 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a79c:	281f      	cmp	r0, #31
1000a79e:	d814      	bhi.n	1000a7ca <gpio_pin_set_output_level+0x56>
		if(level) {
1000a7a0:	2900      	cmp	r1, #0
1000a7a2:	d009      	beq.n	1000a7b8 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a7a4:	4914      	ldr	r1, [pc, #80]	; (1000a7f8 <gpio_pin_set_output_level+0x84>)
1000a7a6:	888c      	ldrh	r4, [r1, #4]
1000a7a8:	220f      	movs	r2, #15
1000a7aa:	4010      	ands	r0, r2
1000a7ac:	2301      	movs	r3, #1
1000a7ae:	4083      	lsls	r3, r0
1000a7b0:	4323      	orrs	r3, r4
1000a7b2:	b29b      	uxth	r3, r3
1000a7b4:	808b      	strh	r3, [r1, #4]
1000a7b6:	e01c      	b.n	1000a7f2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a7b8:	490f      	ldr	r1, [pc, #60]	; (1000a7f8 <gpio_pin_set_output_level+0x84>)
1000a7ba:	888b      	ldrh	r3, [r1, #4]
1000a7bc:	220f      	movs	r2, #15
1000a7be:	4010      	ands	r0, r2
1000a7c0:	3a0e      	subs	r2, #14
1000a7c2:	4082      	lsls	r2, r0
1000a7c4:	4393      	bics	r3, r2
1000a7c6:	808b      	strh	r3, [r1, #4]
1000a7c8:	e013      	b.n	1000a7f2 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a7ca:	2900      	cmp	r1, #0
1000a7cc:	d009      	beq.n	1000a7e2 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a7ce:	490b      	ldr	r1, [pc, #44]	; (1000a7fc <gpio_pin_set_output_level+0x88>)
1000a7d0:	888c      	ldrh	r4, [r1, #4]
1000a7d2:	220f      	movs	r2, #15
1000a7d4:	4010      	ands	r0, r2
1000a7d6:	2301      	movs	r3, #1
1000a7d8:	4083      	lsls	r3, r0
1000a7da:	4323      	orrs	r3, r4
1000a7dc:	b29b      	uxth	r3, r3
1000a7de:	808b      	strh	r3, [r1, #4]
1000a7e0:	e007      	b.n	1000a7f2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a7e2:	4906      	ldr	r1, [pc, #24]	; (1000a7fc <gpio_pin_set_output_level+0x88>)
1000a7e4:	888b      	ldrh	r3, [r1, #4]
1000a7e6:	220f      	movs	r2, #15
1000a7e8:	4010      	ands	r0, r2
1000a7ea:	3a0e      	subs	r2, #14
1000a7ec:	4082      	lsls	r2, r0
1000a7ee:	4393      	bics	r3, r2
1000a7f0:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a7f2:	bd10      	pop	{r4, pc}
1000a7f4:	40010000 	.word	0x40010000
1000a7f8:	40011000 	.word	0x40011000
1000a7fc:	40013000 	.word	0x40013000

1000a800 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a800:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a802:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a804:	23ff      	movs	r3, #255	; 0xff
1000a806:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a808:	2807      	cmp	r0, #7
1000a80a:	d833      	bhi.n	1000a874 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a80c:	4a4e      	ldr	r2, [pc, #312]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a80e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a810:	3bf8      	subs	r3, #248	; 0xf8
1000a812:	4003      	ands	r3, r0
1000a814:	009b      	lsls	r3, r3, #2
1000a816:	2607      	movs	r6, #7
1000a818:	409e      	lsls	r6, r3
1000a81a:	43b4      	bics	r4, r6
1000a81c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a81e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a820:	000e      	movs	r6, r1
1000a822:	409e      	lsls	r6, r3
1000a824:	0033      	movs	r3, r6
1000a826:	4323      	orrs	r3, r4
1000a828:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a82a:	2901      	cmp	r1, #1
1000a82c:	d000      	beq.n	1000a830 <gpio_pinmux_cofiguration+0x30>
1000a82e:	e08a      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a830:	2803      	cmp	r0, #3
1000a832:	d80f      	bhi.n	1000a854 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a834:	0011      	movs	r1, r2
1000a836:	22d0      	movs	r2, #208	; 0xd0
1000a838:	0052      	lsls	r2, r2, #1
1000a83a:	588c      	ldr	r4, [r1, r2]
1000a83c:	2303      	movs	r3, #3
1000a83e:	4018      	ands	r0, r3
1000a840:	00c0      	lsls	r0, r0, #3
1000a842:	333c      	adds	r3, #60	; 0x3c
1000a844:	4083      	lsls	r3, r0
1000a846:	439c      	bics	r4, r3
1000a848:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a84a:	588b      	ldr	r3, [r1, r2]
1000a84c:	4085      	lsls	r5, r0
1000a84e:	431d      	orrs	r5, r3
1000a850:	508d      	str	r5, [r1, r2]
1000a852:	e078      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a854:	493c      	ldr	r1, [pc, #240]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a856:	22d2      	movs	r2, #210	; 0xd2
1000a858:	0052      	lsls	r2, r2, #1
1000a85a:	588c      	ldr	r4, [r1, r2]
1000a85c:	2303      	movs	r3, #3
1000a85e:	4018      	ands	r0, r3
1000a860:	00c0      	lsls	r0, r0, #3
1000a862:	333c      	adds	r3, #60	; 0x3c
1000a864:	4083      	lsls	r3, r0
1000a866:	439c      	bics	r4, r3
1000a868:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a86a:	588b      	ldr	r3, [r1, r2]
1000a86c:	4085      	lsls	r5, r0
1000a86e:	431d      	orrs	r5, r3
1000a870:	508d      	str	r5, [r1, r2]
1000a872:	e068      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a874:	280f      	cmp	r0, #15
1000a876:	d832      	bhi.n	1000a8de <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a878:	4a33      	ldr	r2, [pc, #204]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a87a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a87c:	2307      	movs	r3, #7
1000a87e:	4003      	ands	r3, r0
1000a880:	009b      	lsls	r3, r3, #2
1000a882:	2607      	movs	r6, #7
1000a884:	409e      	lsls	r6, r3
1000a886:	43b4      	bics	r4, r6
1000a888:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a88a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a88c:	000e      	movs	r6, r1
1000a88e:	409e      	lsls	r6, r3
1000a890:	0033      	movs	r3, r6
1000a892:	4323      	orrs	r3, r4
1000a894:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a896:	2901      	cmp	r1, #1
1000a898:	d155      	bne.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a89a:	280b      	cmp	r0, #11
1000a89c:	d80f      	bhi.n	1000a8be <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a89e:	0011      	movs	r1, r2
1000a8a0:	22d4      	movs	r2, #212	; 0xd4
1000a8a2:	0052      	lsls	r2, r2, #1
1000a8a4:	588c      	ldr	r4, [r1, r2]
1000a8a6:	2303      	movs	r3, #3
1000a8a8:	4018      	ands	r0, r3
1000a8aa:	00c0      	lsls	r0, r0, #3
1000a8ac:	333c      	adds	r3, #60	; 0x3c
1000a8ae:	4083      	lsls	r3, r0
1000a8b0:	439c      	bics	r4, r3
1000a8b2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a8b4:	588b      	ldr	r3, [r1, r2]
1000a8b6:	4085      	lsls	r5, r0
1000a8b8:	431d      	orrs	r5, r3
1000a8ba:	508d      	str	r5, [r1, r2]
1000a8bc:	e043      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a8be:	4922      	ldr	r1, [pc, #136]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a8c0:	22d6      	movs	r2, #214	; 0xd6
1000a8c2:	0052      	lsls	r2, r2, #1
1000a8c4:	588c      	ldr	r4, [r1, r2]
1000a8c6:	2303      	movs	r3, #3
1000a8c8:	4018      	ands	r0, r3
1000a8ca:	00c0      	lsls	r0, r0, #3
1000a8cc:	333c      	adds	r3, #60	; 0x3c
1000a8ce:	4083      	lsls	r3, r0
1000a8d0:	439c      	bics	r4, r3
1000a8d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a8d4:	588b      	ldr	r3, [r1, r2]
1000a8d6:	4085      	lsls	r5, r0
1000a8d8:	431d      	orrs	r5, r3
1000a8da:	508d      	str	r5, [r1, r2]
1000a8dc:	e033      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a8de:	2817      	cmp	r0, #23
1000a8e0:	d831      	bhi.n	1000a946 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a8e2:	4a19      	ldr	r2, [pc, #100]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a8e4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a8e6:	2307      	movs	r3, #7
1000a8e8:	4003      	ands	r3, r0
1000a8ea:	009b      	lsls	r3, r3, #2
1000a8ec:	2607      	movs	r6, #7
1000a8ee:	409e      	lsls	r6, r3
1000a8f0:	43b4      	bics	r4, r6
1000a8f2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a8f4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a8f6:	000e      	movs	r6, r1
1000a8f8:	409e      	lsls	r6, r3
1000a8fa:	0033      	movs	r3, r6
1000a8fc:	4323      	orrs	r3, r4
1000a8fe:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a900:	2901      	cmp	r1, #1
1000a902:	d120      	bne.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a904:	2813      	cmp	r0, #19
1000a906:	d80f      	bhi.n	1000a928 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a908:	0011      	movs	r1, r2
1000a90a:	22d8      	movs	r2, #216	; 0xd8
1000a90c:	0052      	lsls	r2, r2, #1
1000a90e:	588c      	ldr	r4, [r1, r2]
1000a910:	2303      	movs	r3, #3
1000a912:	4018      	ands	r0, r3
1000a914:	00c0      	lsls	r0, r0, #3
1000a916:	333c      	adds	r3, #60	; 0x3c
1000a918:	4083      	lsls	r3, r0
1000a91a:	439c      	bics	r4, r3
1000a91c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a91e:	588b      	ldr	r3, [r1, r2]
1000a920:	4085      	lsls	r5, r0
1000a922:	431d      	orrs	r5, r3
1000a924:	508d      	str	r5, [r1, r2]
1000a926:	e00e      	b.n	1000a946 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a928:	4a07      	ldr	r2, [pc, #28]	; (1000a948 <gpio_pinmux_cofiguration+0x148>)
1000a92a:	23da      	movs	r3, #218	; 0xda
1000a92c:	005b      	lsls	r3, r3, #1
1000a92e:	58d1      	ldr	r1, [r2, r3]
1000a930:	2403      	movs	r4, #3
1000a932:	4020      	ands	r0, r4
1000a934:	00c0      	lsls	r0, r0, #3
1000a936:	343c      	adds	r4, #60	; 0x3c
1000a938:	4084      	lsls	r4, r0
1000a93a:	43a1      	bics	r1, r4
1000a93c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a93e:	58d1      	ldr	r1, [r2, r3]
1000a940:	4085      	lsls	r5, r0
1000a942:	430d      	orrs	r5, r1
1000a944:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a946:	bd70      	pop	{r4, r5, r6, pc}
1000a948:	4000b000 	.word	0x4000b000

1000a94c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a94e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a950:	280f      	cmp	r0, #15
1000a952:	d904      	bls.n	1000a95e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a954:	241f      	movs	r4, #31
1000a956:	4284      	cmp	r4, r0
1000a958:	415b      	adcs	r3, r3
1000a95a:	3c1d      	subs	r4, #29
1000a95c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a95e:	2a01      	cmp	r2, #1
1000a960:	d016      	beq.n	1000a990 <gpio_register_callback+0x44>
1000a962:	2a00      	cmp	r2, #0
1000a964:	d004      	beq.n	1000a970 <gpio_register_callback+0x24>
1000a966:	2a02      	cmp	r2, #2
1000a968:	d022      	beq.n	1000a9b0 <gpio_register_callback+0x64>
1000a96a:	2a03      	cmp	r2, #3
1000a96c:	d030      	beq.n	1000a9d0 <gpio_register_callback+0x84>
1000a96e:	e03e      	b.n	1000a9ee <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a970:	4e29      	ldr	r6, [pc, #164]	; (1000aa18 <gpio_register_callback+0xcc>)
1000a972:	00dc      	lsls	r4, r3, #3
1000a974:	18e2      	adds	r2, r4, r3
1000a976:	00d2      	lsls	r2, r2, #3
1000a978:	5997      	ldr	r7, [r2, r6]
1000a97a:	250f      	movs	r5, #15
1000a97c:	4005      	ands	r5, r0
1000a97e:	2201      	movs	r2, #1
1000a980:	40aa      	lsls	r2, r5
1000a982:	b292      	uxth	r2, r2
1000a984:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a986:	18e4      	adds	r4, r4, r3
1000a988:	00e4      	lsls	r4, r4, #3
1000a98a:	59a4      	ldr	r4, [r4, r6]
1000a98c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a98e:	e02e      	b.n	1000a9ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a990:	4e21      	ldr	r6, [pc, #132]	; (1000aa18 <gpio_register_callback+0xcc>)
1000a992:	00dc      	lsls	r4, r3, #3
1000a994:	18e2      	adds	r2, r4, r3
1000a996:	00d2      	lsls	r2, r2, #3
1000a998:	5997      	ldr	r7, [r2, r6]
1000a99a:	250f      	movs	r5, #15
1000a99c:	4005      	ands	r5, r0
1000a99e:	2201      	movs	r2, #1
1000a9a0:	40aa      	lsls	r2, r5
1000a9a2:	b292      	uxth	r2, r2
1000a9a4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a9a6:	18e4      	adds	r4, r4, r3
1000a9a8:	00e4      	lsls	r4, r4, #3
1000a9aa:	59a4      	ldr	r4, [r4, r6]
1000a9ac:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a9ae:	e01e      	b.n	1000a9ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a9b0:	4e19      	ldr	r6, [pc, #100]	; (1000aa18 <gpio_register_callback+0xcc>)
1000a9b2:	00dc      	lsls	r4, r3, #3
1000a9b4:	18e2      	adds	r2, r4, r3
1000a9b6:	00d2      	lsls	r2, r2, #3
1000a9b8:	5997      	ldr	r7, [r2, r6]
1000a9ba:	250f      	movs	r5, #15
1000a9bc:	4005      	ands	r5, r0
1000a9be:	2201      	movs	r2, #1
1000a9c0:	40aa      	lsls	r2, r5
1000a9c2:	b292      	uxth	r2, r2
1000a9c4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a9c6:	18e4      	adds	r4, r4, r3
1000a9c8:	00e4      	lsls	r4, r4, #3
1000a9ca:	59a4      	ldr	r4, [r4, r6]
1000a9cc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a9ce:	e00e      	b.n	1000a9ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a9d0:	4e11      	ldr	r6, [pc, #68]	; (1000aa18 <gpio_register_callback+0xcc>)
1000a9d2:	00dc      	lsls	r4, r3, #3
1000a9d4:	18e2      	adds	r2, r4, r3
1000a9d6:	00d2      	lsls	r2, r2, #3
1000a9d8:	5997      	ldr	r7, [r2, r6]
1000a9da:	250f      	movs	r5, #15
1000a9dc:	4005      	ands	r5, r0
1000a9de:	2201      	movs	r2, #1
1000a9e0:	40aa      	lsls	r2, r5
1000a9e2:	b292      	uxth	r2, r2
1000a9e4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a9e6:	18e4      	adds	r4, r4, r3
1000a9e8:	00e4      	lsls	r4, r4, #3
1000a9ea:	59a4      	ldr	r4, [r4, r6]
1000a9ec:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a9ee:	220f      	movs	r2, #15
1000a9f0:	4010      	ands	r0, r2
1000a9f2:	4c09      	ldr	r4, [pc, #36]	; (1000aa18 <gpio_register_callback+0xcc>)
1000a9f4:	00dd      	lsls	r5, r3, #3
1000a9f6:	18ea      	adds	r2, r5, r3
1000a9f8:	0052      	lsls	r2, r2, #1
1000a9fa:	1812      	adds	r2, r2, r0
1000a9fc:	0092      	lsls	r2, r2, #2
1000a9fe:	18a2      	adds	r2, r4, r2
1000aa00:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000aa02:	18ea      	adds	r2, r5, r3
1000aa04:	00d2      	lsls	r2, r2, #3
1000aa06:	18a2      	adds	r2, r4, r2
1000aa08:	3244      	adds	r2, #68	; 0x44
1000aa0a:	2101      	movs	r1, #1
1000aa0c:	4081      	lsls	r1, r0
1000aa0e:	8813      	ldrh	r3, [r2, #0]
1000aa10:	430b      	orrs	r3, r1
1000aa12:	8013      	strh	r3, [r2, #0]
}
1000aa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa16:	46c0      	nop			; (mov r8, r8)
1000aa18:	1001ad80 	.word	0x1001ad80

1000aa1c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000aa1c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000aa1e:	280f      	cmp	r0, #15
1000aa20:	d805      	bhi.n	1000aa2e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aa22:	2280      	movs	r2, #128	; 0x80
1000aa24:	0412      	lsls	r2, r2, #16
1000aa26:	4b12      	ldr	r3, [pc, #72]	; (1000aa70 <gpio_enable_callback+0x54>)
1000aa28:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000aa2a:	2200      	movs	r2, #0
1000aa2c:	e00c      	b.n	1000aa48 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000aa2e:	281f      	cmp	r0, #31
1000aa30:	d805      	bhi.n	1000aa3e <gpio_enable_callback+0x22>
1000aa32:	2280      	movs	r2, #128	; 0x80
1000aa34:	0452      	lsls	r2, r2, #17
1000aa36:	4b0e      	ldr	r3, [pc, #56]	; (1000aa70 <gpio_enable_callback+0x54>)
1000aa38:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000aa3a:	2201      	movs	r2, #1
1000aa3c:	e004      	b.n	1000aa48 <gpio_enable_callback+0x2c>
1000aa3e:	2280      	movs	r2, #128	; 0x80
1000aa40:	0492      	lsls	r2, r2, #18
1000aa42:	4b0b      	ldr	r3, [pc, #44]	; (1000aa70 <gpio_enable_callback+0x54>)
1000aa44:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000aa46:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000aa48:	230f      	movs	r3, #15
1000aa4a:	4018      	ands	r0, r3
1000aa4c:	2101      	movs	r1, #1
1000aa4e:	4081      	lsls	r1, r0
1000aa50:	4c08      	ldr	r4, [pc, #32]	; (1000aa74 <gpio_enable_callback+0x58>)
1000aa52:	00d5      	lsls	r5, r2, #3
1000aa54:	18ab      	adds	r3, r5, r2
1000aa56:	00db      	lsls	r3, r3, #3
1000aa58:	18e3      	adds	r3, r4, r3
1000aa5a:	3346      	adds	r3, #70	; 0x46
1000aa5c:	8818      	ldrh	r0, [r3, #0]
1000aa5e:	4308      	orrs	r0, r1
1000aa60:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000aa62:	18aa      	adds	r2, r5, r2
1000aa64:	00d2      	lsls	r2, r2, #3
1000aa66:	5913      	ldr	r3, [r2, r4]
1000aa68:	b289      	uxth	r1, r1
1000aa6a:	8419      	strh	r1, [r3, #32]
}
1000aa6c:	bd30      	pop	{r4, r5, pc}
1000aa6e:	46c0      	nop			; (mov r8, r8)
1000aa70:	e000e100 	.word	0xe000e100
1000aa74:	1001ad80 	.word	0x1001ad80

1000aa78 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000aa78:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000aa7a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000aa7c:	280f      	cmp	r0, #15
1000aa7e:	d904      	bls.n	1000aa8a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000aa80:	221f      	movs	r2, #31
1000aa82:	4282      	cmp	r2, r0
1000aa84:	415b      	adcs	r3, r3
1000aa86:	3a1d      	subs	r2, #29
1000aa88:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000aa8a:	220f      	movs	r2, #15
1000aa8c:	4010      	ands	r0, r2
1000aa8e:	2101      	movs	r1, #1
1000aa90:	4081      	lsls	r1, r0
1000aa92:	4c07      	ldr	r4, [pc, #28]	; (1000aab0 <gpio_disable_callback+0x38>)
1000aa94:	00dd      	lsls	r5, r3, #3
1000aa96:	18ea      	adds	r2, r5, r3
1000aa98:	00d2      	lsls	r2, r2, #3
1000aa9a:	18a2      	adds	r2, r4, r2
1000aa9c:	3246      	adds	r2, #70	; 0x46
1000aa9e:	8810      	ldrh	r0, [r2, #0]
1000aaa0:	4388      	bics	r0, r1
1000aaa2:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000aaa4:	18eb      	adds	r3, r5, r3
1000aaa6:	00db      	lsls	r3, r3, #3
1000aaa8:	591b      	ldr	r3, [r3, r4]
1000aaaa:	b289      	uxth	r1, r1
1000aaac:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000aaae:	bd30      	pop	{r4, r5, pc}
1000aab0:	1001ad80 	.word	0x1001ad80

1000aab4 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000aab4:	b510      	push	{r4, lr}
1000aab6:	4a11      	ldr	r2, [pc, #68]	; (1000aafc <gpio_init+0x48>)
1000aab8:	0010      	movs	r0, r2
1000aaba:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000aabc:	2100      	movs	r1, #0
1000aabe:	e007      	b.n	1000aad0 <gpio_init+0x1c>
1000aac0:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000aac2:	4293      	cmp	r3, r2
1000aac4:	d1fc      	bne.n	1000aac0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000aac6:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000aac8:	8011      	strh	r1, [r2, #0]
1000aaca:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000aacc:	4282      	cmp	r2, r0
1000aace:	d002      	beq.n	1000aad6 <gpio_init+0x22>
1000aad0:	0013      	movs	r3, r2
1000aad2:	3b40      	subs	r3, #64	; 0x40
1000aad4:	e7f4      	b.n	1000aac0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000aad6:	4b0a      	ldr	r3, [pc, #40]	; (1000ab00 <gpio_init+0x4c>)
1000aad8:	4a0a      	ldr	r2, [pc, #40]	; (1000ab04 <gpio_init+0x50>)
1000aada:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000aadc:	4a0a      	ldr	r2, [pc, #40]	; (1000ab08 <gpio_init+0x54>)
1000aade:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000aae0:	490a      	ldr	r1, [pc, #40]	; (1000ab0c <gpio_init+0x58>)
1000aae2:	2290      	movs	r2, #144	; 0x90
1000aae4:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000aae6:	490a      	ldr	r1, [pc, #40]	; (1000ab10 <gpio_init+0x5c>)
1000aae8:	2027      	movs	r0, #39	; 0x27
1000aaea:	4c0a      	ldr	r4, [pc, #40]	; (1000ab14 <gpio_init+0x60>)
1000aaec:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000aaee:	490a      	ldr	r1, [pc, #40]	; (1000ab18 <gpio_init+0x64>)
1000aaf0:	2028      	movs	r0, #40	; 0x28
1000aaf2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000aaf4:	4909      	ldr	r1, [pc, #36]	; (1000ab1c <gpio_init+0x68>)
1000aaf6:	2029      	movs	r0, #41	; 0x29
1000aaf8:	47a0      	blx	r4
}
1000aafa:	bd10      	pop	{r4, pc}
1000aafc:	1001adc4 	.word	0x1001adc4
1000ab00:	1001ad80 	.word	0x1001ad80
1000ab04:	40010000 	.word	0x40010000
1000ab08:	40011000 	.word	0x40011000
1000ab0c:	40013000 	.word	0x40013000
1000ab10:	1000a45d 	.word	0x1000a45d
1000ab14:	1000b6e1 	.word	0x1000b6e1
1000ab18:	1000a4c1 	.word	0x1000a4c1
1000ab1c:	1000a531 	.word	0x1000a531

1000ab20 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000ab20:	2801      	cmp	r0, #1
1000ab22:	d00d      	beq.n	1000ab40 <system_clock_config+0x20>
1000ab24:	2800      	cmp	r0, #0
1000ab26:	d002      	beq.n	1000ab2e <system_clock_config+0xe>
1000ab28:	2802      	cmp	r0, #2
1000ab2a:	d01c      	beq.n	1000ab66 <system_clock_config+0x46>
1000ab2c:	e02e      	b.n	1000ab8c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ab2e:	4a18      	ldr	r2, [pc, #96]	; (1000ab90 <system_clock_config+0x70>)
1000ab30:	6990      	ldr	r0, [r2, #24]
1000ab32:	230c      	movs	r3, #12
1000ab34:	4303      	orrs	r3, r0
1000ab36:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000ab38:	4a16      	ldr	r2, [pc, #88]	; (1000ab94 <system_clock_config+0x74>)
1000ab3a:	4b17      	ldr	r3, [pc, #92]	; (1000ab98 <system_clock_config+0x78>)
1000ab3c:	601a      	str	r2, [r3, #0]
			break;
1000ab3e:	e01a      	b.n	1000ab76 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ab40:	4b13      	ldr	r3, [pc, #76]	; (1000ab90 <system_clock_config+0x70>)
1000ab42:	6998      	ldr	r0, [r3, #24]
1000ab44:	2208      	movs	r2, #8
1000ab46:	4302      	orrs	r2, r0
1000ab48:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ab4a:	699a      	ldr	r2, [r3, #24]
1000ab4c:	2004      	movs	r0, #4
1000ab4e:	4382      	bics	r2, r0
1000ab50:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000ab52:	4a12      	ldr	r2, [pc, #72]	; (1000ab9c <system_clock_config+0x7c>)
1000ab54:	6853      	ldr	r3, [r2, #4]
1000ab56:	2080      	movs	r0, #128	; 0x80
1000ab58:	0300      	lsls	r0, r0, #12
1000ab5a:	4303      	orrs	r3, r0
1000ab5c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000ab5e:	4a10      	ldr	r2, [pc, #64]	; (1000aba0 <system_clock_config+0x80>)
1000ab60:	4b0d      	ldr	r3, [pc, #52]	; (1000ab98 <system_clock_config+0x78>)
1000ab62:	601a      	str	r2, [r3, #0]
			break;
1000ab64:	e007      	b.n	1000ab76 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ab66:	4a0a      	ldr	r2, [pc, #40]	; (1000ab90 <system_clock_config+0x70>)
1000ab68:	6993      	ldr	r3, [r2, #24]
1000ab6a:	200c      	movs	r0, #12
1000ab6c:	4383      	bics	r3, r0
1000ab6e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000ab70:	4a08      	ldr	r2, [pc, #32]	; (1000ab94 <system_clock_config+0x74>)
1000ab72:	4b09      	ldr	r3, [pc, #36]	; (1000ab98 <system_clock_config+0x78>)
1000ab74:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ab76:	4b06      	ldr	r3, [pc, #24]	; (1000ab90 <system_clock_config+0x70>)
1000ab78:	699a      	ldr	r2, [r3, #24]
1000ab7a:	2003      	movs	r0, #3
1000ab7c:	4382      	bics	r2, r0
1000ab7e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ab80:	699a      	ldr	r2, [r3, #24]
1000ab82:	4001      	ands	r1, r0
1000ab84:	4311      	orrs	r1, r2
1000ab86:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000ab88:	2000      	movs	r0, #0
1000ab8a:	e000      	b.n	1000ab8e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000ab8c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000ab8e:	4770      	bx	lr
1000ab90:	4000b000 	.word	0x4000b000
1000ab94:	018cba80 	.word	0x018cba80
1000ab98:	1001ae58 	.word	0x1001ae58
1000ab9c:	4000f000 	.word	0x4000f000
1000aba0:	001e8480 	.word	0x001e8480

1000aba4 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000aba4:	4b01      	ldr	r3, [pc, #4]	; (1000abac <system_clock_get_value+0x8>)
1000aba6:	6818      	ldr	r0, [r3, #0]
}
1000aba8:	4770      	bx	lr
1000abaa:	46c0      	nop			; (mov r8, r8)
1000abac:	1001ae58 	.word	0x1001ae58

1000abb0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000abb0:	b500      	push	{lr}
	switch (peripheral) {
1000abb2:	2835      	cmp	r0, #53	; 0x35
1000abb4:	d900      	bls.n	1000abb8 <system_clock_peripheral_enable+0x8>
1000abb6:	e1a2      	b.n	1000aefe <system_clock_peripheral_enable+0x34e>
1000abb8:	0080      	lsls	r0, r0, #2
1000abba:	4bd2      	ldr	r3, [pc, #840]	; (1000af04 <system_clock_peripheral_enable+0x354>)
1000abbc:	581b      	ldr	r3, [r3, r0]
1000abbe:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abc0:	4ad1      	ldr	r2, [pc, #836]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000abc2:	68d1      	ldr	r1, [r2, #12]
1000abc4:	2302      	movs	r3, #2
1000abc6:	430b      	orrs	r3, r1
1000abc8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abca:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000abcc:	e198      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abce:	4ace      	ldr	r2, [pc, #824]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000abd0:	68d1      	ldr	r1, [r2, #12]
1000abd2:	2304      	movs	r3, #4
1000abd4:	430b      	orrs	r3, r1
1000abd6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000abda:	e191      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abdc:	4aca      	ldr	r2, [pc, #808]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000abde:	68d1      	ldr	r1, [r2, #12]
1000abe0:	2308      	movs	r3, #8
1000abe2:	430b      	orrs	r3, r1
1000abe4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abe6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000abe8:	e18a      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abea:	4ac7      	ldr	r2, [pc, #796]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000abec:	68d1      	ldr	r1, [r2, #12]
1000abee:	2310      	movs	r3, #16
1000abf0:	430b      	orrs	r3, r1
1000abf2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000abf6:	e183      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abf8:	4ac3      	ldr	r2, [pc, #780]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000abfa:	68d1      	ldr	r1, [r2, #12]
1000abfc:	2320      	movs	r3, #32
1000abfe:	430b      	orrs	r3, r1
1000ac00:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000ac04:	e17c      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac06:	4ac0      	ldr	r2, [pc, #768]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac08:	68d1      	ldr	r1, [r2, #12]
1000ac0a:	2380      	movs	r3, #128	; 0x80
1000ac0c:	430b      	orrs	r3, r1
1000ac0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ac12:	e175      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac14:	4abc      	ldr	r2, [pc, #752]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac16:	68d3      	ldr	r3, [r2, #12]
1000ac18:	2180      	movs	r1, #128	; 0x80
1000ac1a:	0049      	lsls	r1, r1, #1
1000ac1c:	430b      	orrs	r3, r1
1000ac1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ac22:	e16d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac24:	4ab8      	ldr	r2, [pc, #736]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac26:	68d3      	ldr	r3, [r2, #12]
1000ac28:	2180      	movs	r1, #128	; 0x80
1000ac2a:	0109      	lsls	r1, r1, #4
1000ac2c:	430b      	orrs	r3, r1
1000ac2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000ac32:	e165      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac34:	4ab4      	ldr	r2, [pc, #720]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac36:	68d3      	ldr	r3, [r2, #12]
1000ac38:	2180      	movs	r1, #128	; 0x80
1000ac3a:	0149      	lsls	r1, r1, #5
1000ac3c:	430b      	orrs	r3, r1
1000ac3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ac42:	e15d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac44:	4ab0      	ldr	r2, [pc, #704]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac46:	68d3      	ldr	r3, [r2, #12]
1000ac48:	2180      	movs	r1, #128	; 0x80
1000ac4a:	0189      	lsls	r1, r1, #6
1000ac4c:	430b      	orrs	r3, r1
1000ac4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ac52:	e155      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac54:	4aac      	ldr	r2, [pc, #688]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac56:	68d3      	ldr	r3, [r2, #12]
1000ac58:	2180      	movs	r1, #128	; 0x80
1000ac5a:	01c9      	lsls	r1, r1, #7
1000ac5c:	430b      	orrs	r3, r1
1000ac5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ac62:	e14d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac64:	4aa8      	ldr	r2, [pc, #672]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac66:	68d3      	ldr	r3, [r2, #12]
1000ac68:	2180      	movs	r1, #128	; 0x80
1000ac6a:	0209      	lsls	r1, r1, #8
1000ac6c:	430b      	orrs	r3, r1
1000ac6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000ac72:	e145      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac74:	4aa4      	ldr	r2, [pc, #656]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac76:	68d3      	ldr	r3, [r2, #12]
1000ac78:	2180      	movs	r1, #128	; 0x80
1000ac7a:	0249      	lsls	r1, r1, #9
1000ac7c:	430b      	orrs	r3, r1
1000ac7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000ac82:	e13d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac84:	4aa0      	ldr	r2, [pc, #640]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac86:	68d3      	ldr	r3, [r2, #12]
1000ac88:	2180      	movs	r1, #128	; 0x80
1000ac8a:	0289      	lsls	r1, r1, #10
1000ac8c:	430b      	orrs	r3, r1
1000ac8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000ac92:	e135      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ac94:	4a9c      	ldr	r2, [pc, #624]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ac96:	68d3      	ldr	r3, [r2, #12]
1000ac98:	2180      	movs	r1, #128	; 0x80
1000ac9a:	02c9      	lsls	r1, r1, #11
1000ac9c:	430b      	orrs	r3, r1
1000ac9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aca0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000aca2:	e12d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aca4:	4a98      	ldr	r2, [pc, #608]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aca6:	68d3      	ldr	r3, [r2, #12]
1000aca8:	2180      	movs	r1, #128	; 0x80
1000acaa:	0309      	lsls	r1, r1, #12
1000acac:	430b      	orrs	r3, r1
1000acae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000acb2:	e125      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000acb4:	4a94      	ldr	r2, [pc, #592]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000acb6:	68d3      	ldr	r3, [r2, #12]
1000acb8:	2180      	movs	r1, #128	; 0x80
1000acba:	0349      	lsls	r1, r1, #13
1000acbc:	430b      	orrs	r3, r1
1000acbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000acc2:	e11d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000acc4:	4a90      	ldr	r2, [pc, #576]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000acc6:	68d3      	ldr	r3, [r2, #12]
1000acc8:	2180      	movs	r1, #128	; 0x80
1000acca:	0389      	lsls	r1, r1, #14
1000accc:	430b      	orrs	r3, r1
1000acce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000acd2:	e115      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000acd4:	4a8c      	ldr	r2, [pc, #560]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000acd6:	68d3      	ldr	r3, [r2, #12]
1000acd8:	2180      	movs	r1, #128	; 0x80
1000acda:	03c9      	lsls	r1, r1, #15
1000acdc:	430b      	orrs	r3, r1
1000acde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ace0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ace2:	e10d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ace4:	4a88      	ldr	r2, [pc, #544]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ace6:	68d3      	ldr	r3, [r2, #12]
1000ace8:	2180      	movs	r1, #128	; 0x80
1000acea:	0409      	lsls	r1, r1, #16
1000acec:	430b      	orrs	r3, r1
1000acee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000acf2:	e105      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000acf4:	4a84      	ldr	r2, [pc, #528]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000acf6:	68d3      	ldr	r3, [r2, #12]
1000acf8:	2180      	movs	r1, #128	; 0x80
1000acfa:	0449      	lsls	r1, r1, #17
1000acfc:	430b      	orrs	r3, r1
1000acfe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ad02:	e0fd      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad04:	4a80      	ldr	r2, [pc, #512]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad06:	68d3      	ldr	r3, [r2, #12]
1000ad08:	2180      	movs	r1, #128	; 0x80
1000ad0a:	0489      	lsls	r1, r1, #18
1000ad0c:	430b      	orrs	r3, r1
1000ad0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ad12:	e0f5      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad14:	4a7c      	ldr	r2, [pc, #496]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad16:	68d3      	ldr	r3, [r2, #12]
1000ad18:	2180      	movs	r1, #128	; 0x80
1000ad1a:	04c9      	lsls	r1, r1, #19
1000ad1c:	430b      	orrs	r3, r1
1000ad1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ad22:	e0ed      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad24:	4a78      	ldr	r2, [pc, #480]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad26:	68d3      	ldr	r3, [r2, #12]
1000ad28:	2180      	movs	r1, #128	; 0x80
1000ad2a:	0509      	lsls	r1, r1, #20
1000ad2c:	430b      	orrs	r3, r1
1000ad2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ad32:	e0e5      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad34:	4a74      	ldr	r2, [pc, #464]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad36:	68d3      	ldr	r3, [r2, #12]
1000ad38:	2180      	movs	r1, #128	; 0x80
1000ad3a:	0549      	lsls	r1, r1, #21
1000ad3c:	430b      	orrs	r3, r1
1000ad3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ad42:	e0dd      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad44:	4a70      	ldr	r2, [pc, #448]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad46:	68d3      	ldr	r3, [r2, #12]
1000ad48:	2180      	movs	r1, #128	; 0x80
1000ad4a:	0589      	lsls	r1, r1, #22
1000ad4c:	430b      	orrs	r3, r1
1000ad4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ad52:	e0d5      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ad54:	4a6c      	ldr	r2, [pc, #432]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad56:	68d3      	ldr	r3, [r2, #12]
1000ad58:	2180      	movs	r1, #128	; 0x80
1000ad5a:	05c9      	lsls	r1, r1, #23
1000ad5c:	430b      	orrs	r3, r1
1000ad5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ad62:	e0cd      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad64:	4a68      	ldr	r2, [pc, #416]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad66:	6911      	ldr	r1, [r2, #16]
1000ad68:	2301      	movs	r3, #1
1000ad6a:	430b      	orrs	r3, r1
1000ad6c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad6e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ad70:	e0c6      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad72:	4a65      	ldr	r2, [pc, #404]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad74:	6911      	ldr	r1, [r2, #16]
1000ad76:	2302      	movs	r3, #2
1000ad78:	430b      	orrs	r3, r1
1000ad7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ad7e:	e0bf      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad80:	4a61      	ldr	r2, [pc, #388]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad82:	6911      	ldr	r1, [r2, #16]
1000ad84:	2304      	movs	r3, #4
1000ad86:	430b      	orrs	r3, r1
1000ad88:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad8a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000ad8c:	e0b8      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad8e:	4a5e      	ldr	r2, [pc, #376]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad90:	6911      	ldr	r1, [r2, #16]
1000ad92:	2308      	movs	r3, #8
1000ad94:	430b      	orrs	r3, r1
1000ad96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ad9a:	e0b1      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad9c:	4a5a      	ldr	r2, [pc, #360]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ad9e:	6911      	ldr	r1, [r2, #16]
1000ada0:	2310      	movs	r3, #16
1000ada2:	430b      	orrs	r3, r1
1000ada4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ada8:	e0aa      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000adaa:	4a57      	ldr	r2, [pc, #348]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000adac:	6911      	ldr	r1, [r2, #16]
1000adae:	2320      	movs	r3, #32
1000adb0:	430b      	orrs	r3, r1
1000adb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000adb6:	e0a3      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000adb8:	4a53      	ldr	r2, [pc, #332]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000adba:	6911      	ldr	r1, [r2, #16]
1000adbc:	2340      	movs	r3, #64	; 0x40
1000adbe:	430b      	orrs	r3, r1
1000adc0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adc2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000adc4:	e09c      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000adc6:	4a50      	ldr	r2, [pc, #320]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000adc8:	6911      	ldr	r1, [r2, #16]
1000adca:	2380      	movs	r3, #128	; 0x80
1000adcc:	430b      	orrs	r3, r1
1000adce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000add0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000add2:	e095      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000add4:	4a4c      	ldr	r2, [pc, #304]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000add6:	6913      	ldr	r3, [r2, #16]
1000add8:	2180      	movs	r1, #128	; 0x80
1000adda:	0049      	lsls	r1, r1, #1
1000addc:	430b      	orrs	r3, r1
1000adde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ade0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000ade2:	e08d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ade4:	4a48      	ldr	r2, [pc, #288]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ade6:	6913      	ldr	r3, [r2, #16]
1000ade8:	2180      	movs	r1, #128	; 0x80
1000adea:	0089      	lsls	r1, r1, #2
1000adec:	430b      	orrs	r3, r1
1000adee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000adf2:	e085      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000adf4:	4a44      	ldr	r2, [pc, #272]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000adf6:	6913      	ldr	r3, [r2, #16]
1000adf8:	2180      	movs	r1, #128	; 0x80
1000adfa:	00c9      	lsls	r1, r1, #3
1000adfc:	430b      	orrs	r3, r1
1000adfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ae02:	e07d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae04:	4a40      	ldr	r2, [pc, #256]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae06:	6913      	ldr	r3, [r2, #16]
1000ae08:	2180      	movs	r1, #128	; 0x80
1000ae0a:	0109      	lsls	r1, r1, #4
1000ae0c:	430b      	orrs	r3, r1
1000ae0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ae12:	e075      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae14:	4a3c      	ldr	r2, [pc, #240]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae16:	6913      	ldr	r3, [r2, #16]
1000ae18:	2180      	movs	r1, #128	; 0x80
1000ae1a:	0149      	lsls	r1, r1, #5
1000ae1c:	430b      	orrs	r3, r1
1000ae1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ae22:	e06d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae24:	4a38      	ldr	r2, [pc, #224]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae26:	6913      	ldr	r3, [r2, #16]
1000ae28:	2180      	movs	r1, #128	; 0x80
1000ae2a:	0189      	lsls	r1, r1, #6
1000ae2c:	430b      	orrs	r3, r1
1000ae2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ae32:	e065      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae34:	4a34      	ldr	r2, [pc, #208]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae36:	6913      	ldr	r3, [r2, #16]
1000ae38:	2180      	movs	r1, #128	; 0x80
1000ae3a:	01c9      	lsls	r1, r1, #7
1000ae3c:	430b      	orrs	r3, r1
1000ae3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ae42:	e05d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae44:	4a30      	ldr	r2, [pc, #192]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae46:	6913      	ldr	r3, [r2, #16]
1000ae48:	2180      	movs	r1, #128	; 0x80
1000ae4a:	0209      	lsls	r1, r1, #8
1000ae4c:	430b      	orrs	r3, r1
1000ae4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ae52:	e055      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae54:	4a2c      	ldr	r2, [pc, #176]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae56:	6913      	ldr	r3, [r2, #16]
1000ae58:	2180      	movs	r1, #128	; 0x80
1000ae5a:	0249      	lsls	r1, r1, #9
1000ae5c:	430b      	orrs	r3, r1
1000ae5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ae62:	e04d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae64:	4a28      	ldr	r2, [pc, #160]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae66:	6913      	ldr	r3, [r2, #16]
1000ae68:	2180      	movs	r1, #128	; 0x80
1000ae6a:	0289      	lsls	r1, r1, #10
1000ae6c:	430b      	orrs	r3, r1
1000ae6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ae72:	e045      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae74:	4a24      	ldr	r2, [pc, #144]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae76:	6913      	ldr	r3, [r2, #16]
1000ae78:	2180      	movs	r1, #128	; 0x80
1000ae7a:	02c9      	lsls	r1, r1, #11
1000ae7c:	430b      	orrs	r3, r1
1000ae7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ae82:	e03d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae84:	4a20      	ldr	r2, [pc, #128]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae86:	6913      	ldr	r3, [r2, #16]
1000ae88:	2180      	movs	r1, #128	; 0x80
1000ae8a:	0309      	lsls	r1, r1, #12
1000ae8c:	430b      	orrs	r3, r1
1000ae8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ae92:	e035      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ae94:	4a1c      	ldr	r2, [pc, #112]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000ae96:	6913      	ldr	r3, [r2, #16]
1000ae98:	2180      	movs	r1, #128	; 0x80
1000ae9a:	0349      	lsls	r1, r1, #13
1000ae9c:	430b      	orrs	r3, r1
1000ae9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000aea2:	e02d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aea4:	4a18      	ldr	r2, [pc, #96]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aea6:	6913      	ldr	r3, [r2, #16]
1000aea8:	2180      	movs	r1, #128	; 0x80
1000aeaa:	0389      	lsls	r1, r1, #14
1000aeac:	430b      	orrs	r3, r1
1000aeae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000aeb2:	e025      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aeb4:	4a14      	ldr	r2, [pc, #80]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aeb6:	6913      	ldr	r3, [r2, #16]
1000aeb8:	2180      	movs	r1, #128	; 0x80
1000aeba:	03c9      	lsls	r1, r1, #15
1000aebc:	430b      	orrs	r3, r1
1000aebe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aec0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000aec2:	e01d      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aec4:	4a10      	ldr	r2, [pc, #64]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aec6:	6913      	ldr	r3, [r2, #16]
1000aec8:	2180      	movs	r1, #128	; 0x80
1000aeca:	0409      	lsls	r1, r1, #16
1000aecc:	430b      	orrs	r3, r1
1000aece:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aed0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000aed2:	e015      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000aed4:	4a0c      	ldr	r2, [pc, #48]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aed6:	7d11      	ldrb	r1, [r2, #20]
1000aed8:	2301      	movs	r3, #1
1000aeda:	430b      	orrs	r3, r1
1000aedc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aede:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000aee0:	e00e      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000aee2:	4a09      	ldr	r2, [pc, #36]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aee4:	7d11      	ldrb	r1, [r2, #20]
1000aee6:	2302      	movs	r3, #2
1000aee8:	430b      	orrs	r3, r1
1000aeea:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000aeee:	e007      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000aef0:	4a05      	ldr	r2, [pc, #20]	; (1000af08 <system_clock_peripheral_enable+0x358>)
1000aef2:	7d11      	ldrb	r1, [r2, #20]
1000aef4:	2304      	movs	r3, #4
1000aef6:	430b      	orrs	r3, r1
1000aef8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aefa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000aefc:	e000      	b.n	1000af00 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000aefe:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000af00:	bd00      	pop	{pc}
1000af02:	46c0      	nop			; (mov r8, r8)
1000af04:	10017ddc 	.word	0x10017ddc
1000af08:	4000b000 	.word	0x4000b000

1000af0c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000af0c:	b500      	push	{lr}
	switch (peripheral) {
1000af0e:	2835      	cmp	r0, #53	; 0x35
1000af10:	d900      	bls.n	1000af14 <system_clock_peripheral_disable+0x8>
1000af12:	e17d      	b.n	1000b210 <system_clock_peripheral_disable+0x304>
1000af14:	0080      	lsls	r0, r0, #2
1000af16:	4bbf      	ldr	r3, [pc, #764]	; (1000b214 <system_clock_peripheral_disable+0x308>)
1000af18:	581b      	ldr	r3, [r3, r0]
1000af1a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af1c:	4abe      	ldr	r2, [pc, #760]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af1e:	68d3      	ldr	r3, [r2, #12]
1000af20:	2102      	movs	r1, #2
1000af22:	438b      	bics	r3, r1
1000af24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af26:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000af28:	e173      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af2a:	4abb      	ldr	r2, [pc, #748]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af2c:	68d3      	ldr	r3, [r2, #12]
1000af2e:	2104      	movs	r1, #4
1000af30:	438b      	bics	r3, r1
1000af32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000af36:	e16c      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af38:	4ab7      	ldr	r2, [pc, #732]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af3a:	68d3      	ldr	r3, [r2, #12]
1000af3c:	2108      	movs	r1, #8
1000af3e:	438b      	bics	r3, r1
1000af40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000af44:	e165      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af46:	4ab4      	ldr	r2, [pc, #720]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af48:	68d3      	ldr	r3, [r2, #12]
1000af4a:	2110      	movs	r1, #16
1000af4c:	438b      	bics	r3, r1
1000af4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000af52:	e15e      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af54:	4ab0      	ldr	r2, [pc, #704]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af56:	68d3      	ldr	r3, [r2, #12]
1000af58:	2120      	movs	r1, #32
1000af5a:	438b      	bics	r3, r1
1000af5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000af60:	e157      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af62:	4aad      	ldr	r2, [pc, #692]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af64:	68d3      	ldr	r3, [r2, #12]
1000af66:	2180      	movs	r1, #128	; 0x80
1000af68:	438b      	bics	r3, r1
1000af6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000af6e:	e150      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af70:	4aa9      	ldr	r2, [pc, #676]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af72:	68d1      	ldr	r1, [r2, #12]
1000af74:	4ba9      	ldr	r3, [pc, #676]	; (1000b21c <system_clock_peripheral_disable+0x310>)
1000af76:	400b      	ands	r3, r1
1000af78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000af7c:	e149      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af7e:	4aa6      	ldr	r2, [pc, #664]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af80:	68d1      	ldr	r1, [r2, #12]
1000af82:	4ba7      	ldr	r3, [pc, #668]	; (1000b220 <system_clock_peripheral_disable+0x314>)
1000af84:	400b      	ands	r3, r1
1000af86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000af8a:	e142      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af8c:	4aa2      	ldr	r2, [pc, #648]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af8e:	68d1      	ldr	r1, [r2, #12]
1000af90:	4ba4      	ldr	r3, [pc, #656]	; (1000b224 <system_clock_peripheral_disable+0x318>)
1000af92:	400b      	ands	r3, r1
1000af94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000af98:	e13b      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000af9a:	4a9f      	ldr	r2, [pc, #636]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000af9c:	68d1      	ldr	r1, [r2, #12]
1000af9e:	4ba2      	ldr	r3, [pc, #648]	; (1000b228 <system_clock_peripheral_disable+0x31c>)
1000afa0:	400b      	ands	r3, r1
1000afa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000afa6:	e134      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afa8:	4a9b      	ldr	r2, [pc, #620]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000afaa:	68d1      	ldr	r1, [r2, #12]
1000afac:	4b9f      	ldr	r3, [pc, #636]	; (1000b22c <system_clock_peripheral_disable+0x320>)
1000afae:	400b      	ands	r3, r1
1000afb0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000afb4:	e12d      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afb6:	4a98      	ldr	r2, [pc, #608]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000afb8:	68d1      	ldr	r1, [r2, #12]
1000afba:	4b9d      	ldr	r3, [pc, #628]	; (1000b230 <system_clock_peripheral_disable+0x324>)
1000afbc:	400b      	ands	r3, r1
1000afbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000afc2:	e126      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afc4:	4a94      	ldr	r2, [pc, #592]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000afc6:	68d1      	ldr	r1, [r2, #12]
1000afc8:	4b9a      	ldr	r3, [pc, #616]	; (1000b234 <system_clock_peripheral_disable+0x328>)
1000afca:	400b      	ands	r3, r1
1000afcc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000afd0:	e11f      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afd2:	4a91      	ldr	r2, [pc, #580]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000afd4:	68d1      	ldr	r1, [r2, #12]
1000afd6:	4b98      	ldr	r3, [pc, #608]	; (1000b238 <system_clock_peripheral_disable+0x32c>)
1000afd8:	400b      	ands	r3, r1
1000afda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000afde:	e118      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afe0:	4a8d      	ldr	r2, [pc, #564]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000afe2:	68d1      	ldr	r1, [r2, #12]
1000afe4:	4b95      	ldr	r3, [pc, #596]	; (1000b23c <system_clock_peripheral_disable+0x330>)
1000afe6:	400b      	ands	r3, r1
1000afe8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000afec:	e111      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000afee:	4a8a      	ldr	r2, [pc, #552]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000aff0:	68d1      	ldr	r1, [r2, #12]
1000aff2:	4b93      	ldr	r3, [pc, #588]	; (1000b240 <system_clock_peripheral_disable+0x334>)
1000aff4:	400b      	ands	r3, r1
1000aff6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000affa:	e10a      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000affc:	4a86      	ldr	r2, [pc, #536]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000affe:	68d1      	ldr	r1, [r2, #12]
1000b000:	4b90      	ldr	r3, [pc, #576]	; (1000b244 <system_clock_peripheral_disable+0x338>)
1000b002:	400b      	ands	r3, r1
1000b004:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b006:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b008:	e103      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b00a:	4a83      	ldr	r2, [pc, #524]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b00c:	68d1      	ldr	r1, [r2, #12]
1000b00e:	4b8e      	ldr	r3, [pc, #568]	; (1000b248 <system_clock_peripheral_disable+0x33c>)
1000b010:	400b      	ands	r3, r1
1000b012:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b014:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b016:	e0fc      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b018:	4a7f      	ldr	r2, [pc, #508]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b01a:	68d1      	ldr	r1, [r2, #12]
1000b01c:	4b8b      	ldr	r3, [pc, #556]	; (1000b24c <system_clock_peripheral_disable+0x340>)
1000b01e:	400b      	ands	r3, r1
1000b020:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b022:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b024:	e0f5      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b026:	4a7c      	ldr	r2, [pc, #496]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b028:	68d1      	ldr	r1, [r2, #12]
1000b02a:	4b89      	ldr	r3, [pc, #548]	; (1000b250 <system_clock_peripheral_disable+0x344>)
1000b02c:	400b      	ands	r3, r1
1000b02e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b030:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b032:	e0ee      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b034:	4a78      	ldr	r2, [pc, #480]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b036:	68d1      	ldr	r1, [r2, #12]
1000b038:	4b86      	ldr	r3, [pc, #536]	; (1000b254 <system_clock_peripheral_disable+0x348>)
1000b03a:	400b      	ands	r3, r1
1000b03c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b03e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b040:	e0e7      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b042:	4a75      	ldr	r2, [pc, #468]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b044:	68d1      	ldr	r1, [r2, #12]
1000b046:	4b84      	ldr	r3, [pc, #528]	; (1000b258 <system_clock_peripheral_disable+0x34c>)
1000b048:	400b      	ands	r3, r1
1000b04a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b04c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b04e:	e0e0      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b050:	4a71      	ldr	r2, [pc, #452]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b052:	68d1      	ldr	r1, [r2, #12]
1000b054:	4b81      	ldr	r3, [pc, #516]	; (1000b25c <system_clock_peripheral_disable+0x350>)
1000b056:	400b      	ands	r3, r1
1000b058:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b05a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b05c:	e0d9      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b05e:	4a6e      	ldr	r2, [pc, #440]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b060:	68d1      	ldr	r1, [r2, #12]
1000b062:	4b7f      	ldr	r3, [pc, #508]	; (1000b260 <system_clock_peripheral_disable+0x354>)
1000b064:	400b      	ands	r3, r1
1000b066:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b068:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b06a:	e0d2      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b06c:	4a6a      	ldr	r2, [pc, #424]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b06e:	68d1      	ldr	r1, [r2, #12]
1000b070:	4b7c      	ldr	r3, [pc, #496]	; (1000b264 <system_clock_peripheral_disable+0x358>)
1000b072:	400b      	ands	r3, r1
1000b074:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b076:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b078:	e0cb      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b07a:	4a67      	ldr	r2, [pc, #412]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b07c:	68d1      	ldr	r1, [r2, #12]
1000b07e:	4b7a      	ldr	r3, [pc, #488]	; (1000b268 <system_clock_peripheral_disable+0x35c>)
1000b080:	400b      	ands	r3, r1
1000b082:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b084:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b086:	e0c4      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b088:	4a63      	ldr	r2, [pc, #396]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b08a:	68d1      	ldr	r1, [r2, #12]
1000b08c:	4b77      	ldr	r3, [pc, #476]	; (1000b26c <system_clock_peripheral_disable+0x360>)
1000b08e:	400b      	ands	r3, r1
1000b090:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b092:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b094:	e0bd      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b096:	4a60      	ldr	r2, [pc, #384]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b098:	6913      	ldr	r3, [r2, #16]
1000b09a:	2101      	movs	r1, #1
1000b09c:	438b      	bics	r3, r1
1000b09e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b0a2:	e0b6      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0a4:	4a5c      	ldr	r2, [pc, #368]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0a6:	6913      	ldr	r3, [r2, #16]
1000b0a8:	2102      	movs	r1, #2
1000b0aa:	438b      	bics	r3, r1
1000b0ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b0b0:	e0af      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0b2:	4a59      	ldr	r2, [pc, #356]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0b4:	6913      	ldr	r3, [r2, #16]
1000b0b6:	2104      	movs	r1, #4
1000b0b8:	438b      	bics	r3, r1
1000b0ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b0be:	e0a8      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0c0:	4a55      	ldr	r2, [pc, #340]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0c2:	6913      	ldr	r3, [r2, #16]
1000b0c4:	2108      	movs	r1, #8
1000b0c6:	438b      	bics	r3, r1
1000b0c8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b0cc:	e0a1      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0ce:	4a52      	ldr	r2, [pc, #328]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0d0:	6913      	ldr	r3, [r2, #16]
1000b0d2:	2110      	movs	r1, #16
1000b0d4:	438b      	bics	r3, r1
1000b0d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b0da:	e09a      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0dc:	4a4e      	ldr	r2, [pc, #312]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0de:	6913      	ldr	r3, [r2, #16]
1000b0e0:	2120      	movs	r1, #32
1000b0e2:	438b      	bics	r3, r1
1000b0e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b0e8:	e093      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0ea:	4a4b      	ldr	r2, [pc, #300]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0ec:	6913      	ldr	r3, [r2, #16]
1000b0ee:	2140      	movs	r1, #64	; 0x40
1000b0f0:	438b      	bics	r3, r1
1000b0f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b0f6:	e08c      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b0f8:	4a47      	ldr	r2, [pc, #284]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b0fa:	6913      	ldr	r3, [r2, #16]
1000b0fc:	2180      	movs	r1, #128	; 0x80
1000b0fe:	438b      	bics	r3, r1
1000b100:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b102:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b104:	e085      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b106:	4a44      	ldr	r2, [pc, #272]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b108:	6911      	ldr	r1, [r2, #16]
1000b10a:	4b44      	ldr	r3, [pc, #272]	; (1000b21c <system_clock_peripheral_disable+0x310>)
1000b10c:	400b      	ands	r3, r1
1000b10e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b110:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b112:	e07e      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b114:	4a40      	ldr	r2, [pc, #256]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b116:	6911      	ldr	r1, [r2, #16]
1000b118:	4b55      	ldr	r3, [pc, #340]	; (1000b270 <system_clock_peripheral_disable+0x364>)
1000b11a:	400b      	ands	r3, r1
1000b11c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b11e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b120:	e077      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b122:	4a3d      	ldr	r2, [pc, #244]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b124:	6911      	ldr	r1, [r2, #16]
1000b126:	4b53      	ldr	r3, [pc, #332]	; (1000b274 <system_clock_peripheral_disable+0x368>)
1000b128:	400b      	ands	r3, r1
1000b12a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b12c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b12e:	e070      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b130:	4a39      	ldr	r2, [pc, #228]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b132:	6911      	ldr	r1, [r2, #16]
1000b134:	4b3a      	ldr	r3, [pc, #232]	; (1000b220 <system_clock_peripheral_disable+0x314>)
1000b136:	400b      	ands	r3, r1
1000b138:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b13a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b13c:	e069      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b13e:	4a36      	ldr	r2, [pc, #216]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b140:	6911      	ldr	r1, [r2, #16]
1000b142:	4b38      	ldr	r3, [pc, #224]	; (1000b224 <system_clock_peripheral_disable+0x318>)
1000b144:	400b      	ands	r3, r1
1000b146:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b148:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b14a:	e062      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b14c:	4a32      	ldr	r2, [pc, #200]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b14e:	6911      	ldr	r1, [r2, #16]
1000b150:	4b35      	ldr	r3, [pc, #212]	; (1000b228 <system_clock_peripheral_disable+0x31c>)
1000b152:	400b      	ands	r3, r1
1000b154:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b156:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b158:	e05b      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b15a:	4a2f      	ldr	r2, [pc, #188]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b15c:	6911      	ldr	r1, [r2, #16]
1000b15e:	4b33      	ldr	r3, [pc, #204]	; (1000b22c <system_clock_peripheral_disable+0x320>)
1000b160:	400b      	ands	r3, r1
1000b162:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b164:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b166:	e054      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b168:	4a2b      	ldr	r2, [pc, #172]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b16a:	6911      	ldr	r1, [r2, #16]
1000b16c:	4b30      	ldr	r3, [pc, #192]	; (1000b230 <system_clock_peripheral_disable+0x324>)
1000b16e:	400b      	ands	r3, r1
1000b170:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b172:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b174:	e04d      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b176:	4a28      	ldr	r2, [pc, #160]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b178:	6911      	ldr	r1, [r2, #16]
1000b17a:	4b2e      	ldr	r3, [pc, #184]	; (1000b234 <system_clock_peripheral_disable+0x328>)
1000b17c:	400b      	ands	r3, r1
1000b17e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b180:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b182:	e046      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b184:	4a24      	ldr	r2, [pc, #144]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b186:	6911      	ldr	r1, [r2, #16]
1000b188:	4b2b      	ldr	r3, [pc, #172]	; (1000b238 <system_clock_peripheral_disable+0x32c>)
1000b18a:	400b      	ands	r3, r1
1000b18c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b18e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b190:	e03f      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b192:	4a21      	ldr	r2, [pc, #132]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b194:	6911      	ldr	r1, [r2, #16]
1000b196:	4b29      	ldr	r3, [pc, #164]	; (1000b23c <system_clock_peripheral_disable+0x330>)
1000b198:	400b      	ands	r3, r1
1000b19a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b19c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b19e:	e038      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b1a0:	4a1d      	ldr	r2, [pc, #116]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1a2:	6911      	ldr	r1, [r2, #16]
1000b1a4:	4b26      	ldr	r3, [pc, #152]	; (1000b240 <system_clock_peripheral_disable+0x334>)
1000b1a6:	400b      	ands	r3, r1
1000b1a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b1ac:	e031      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b1ae:	4a1a      	ldr	r2, [pc, #104]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1b0:	6911      	ldr	r1, [r2, #16]
1000b1b2:	4b24      	ldr	r3, [pc, #144]	; (1000b244 <system_clock_peripheral_disable+0x338>)
1000b1b4:	400b      	ands	r3, r1
1000b1b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b1ba:	e02a      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b1bc:	4a16      	ldr	r2, [pc, #88]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1be:	6911      	ldr	r1, [r2, #16]
1000b1c0:	4b21      	ldr	r3, [pc, #132]	; (1000b248 <system_clock_peripheral_disable+0x33c>)
1000b1c2:	400b      	ands	r3, r1
1000b1c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b1c8:	e023      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b1ca:	4a13      	ldr	r2, [pc, #76]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1cc:	6911      	ldr	r1, [r2, #16]
1000b1ce:	4b1f      	ldr	r3, [pc, #124]	; (1000b24c <system_clock_peripheral_disable+0x340>)
1000b1d0:	400b      	ands	r3, r1
1000b1d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b1d6:	e01c      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b1d8:	4a0f      	ldr	r2, [pc, #60]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1da:	6911      	ldr	r1, [r2, #16]
1000b1dc:	4b1c      	ldr	r3, [pc, #112]	; (1000b250 <system_clock_peripheral_disable+0x344>)
1000b1de:	400b      	ands	r3, r1
1000b1e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b1e4:	e015      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b1e6:	4a0c      	ldr	r2, [pc, #48]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1e8:	7d13      	ldrb	r3, [r2, #20]
1000b1ea:	2101      	movs	r1, #1
1000b1ec:	438b      	bics	r3, r1
1000b1ee:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b1f2:	e00e      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b1f4:	4a08      	ldr	r2, [pc, #32]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b1f6:	7d13      	ldrb	r3, [r2, #20]
1000b1f8:	2102      	movs	r1, #2
1000b1fa:	438b      	bics	r3, r1
1000b1fc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b200:	e007      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b202:	4a05      	ldr	r2, [pc, #20]	; (1000b218 <system_clock_peripheral_disable+0x30c>)
1000b204:	7d13      	ldrb	r3, [r2, #20]
1000b206:	2104      	movs	r1, #4
1000b208:	438b      	bics	r3, r1
1000b20a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b20c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b20e:	e000      	b.n	1000b212 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b210:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b212:	bd00      	pop	{pc}
1000b214:	10017eb4 	.word	0x10017eb4
1000b218:	4000b000 	.word	0x4000b000
1000b21c:	fffffeff 	.word	0xfffffeff
1000b220:	fffff7ff 	.word	0xfffff7ff
1000b224:	ffffefff 	.word	0xffffefff
1000b228:	ffffdfff 	.word	0xffffdfff
1000b22c:	ffffbfff 	.word	0xffffbfff
1000b230:	ffff7fff 	.word	0xffff7fff
1000b234:	fffeffff 	.word	0xfffeffff
1000b238:	fffdffff 	.word	0xfffdffff
1000b23c:	fffbffff 	.word	0xfffbffff
1000b240:	fff7ffff 	.word	0xfff7ffff
1000b244:	ffefffff 	.word	0xffefffff
1000b248:	ffdfffff 	.word	0xffdfffff
1000b24c:	ffbfffff 	.word	0xffbfffff
1000b250:	ff7fffff 	.word	0xff7fffff
1000b254:	feffffff 	.word	0xfeffffff
1000b258:	fdffffff 	.word	0xfdffffff
1000b25c:	fbffffff 	.word	0xfbffffff
1000b260:	f7ffffff 	.word	0xf7ffffff
1000b264:	efffffff 	.word	0xefffffff
1000b268:	dfffffff 	.word	0xdfffffff
1000b26c:	bfffffff 	.word	0xbfffffff
1000b270:	fffffdff 	.word	0xfffffdff
1000b274:	fffffbff 	.word	0xfffffbff

1000b278 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b278:	b500      	push	{lr}
	switch (peripheral) {
1000b27a:	2843      	cmp	r0, #67	; 0x43
1000b27c:	d900      	bls.n	1000b280 <system_peripheral_reset+0x8>
1000b27e:	e223      	b.n	1000b6c8 <system_peripheral_reset+0x450>
1000b280:	0080      	lsls	r0, r0, #2
1000b282:	4be0      	ldr	r3, [pc, #896]	; (1000b604 <system_peripheral_reset+0x38c>)
1000b284:	581b      	ldr	r3, [r3, r0]
1000b286:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b288:	4bdf      	ldr	r3, [pc, #892]	; (1000b608 <system_peripheral_reset+0x390>)
1000b28a:	6859      	ldr	r1, [r3, #4]
1000b28c:	2202      	movs	r2, #2
1000b28e:	4391      	bics	r1, r2
1000b290:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b292:	6859      	ldr	r1, [r3, #4]
1000b294:	430a      	orrs	r2, r1
1000b296:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b298:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b29a:	e216      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b29c:	4bda      	ldr	r3, [pc, #872]	; (1000b608 <system_peripheral_reset+0x390>)
1000b29e:	6859      	ldr	r1, [r3, #4]
1000b2a0:	2204      	movs	r2, #4
1000b2a2:	4391      	bics	r1, r2
1000b2a4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2a6:	6859      	ldr	r1, [r3, #4]
1000b2a8:	430a      	orrs	r2, r1
1000b2aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b2ae:	e20c      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2b0:	4bd5      	ldr	r3, [pc, #852]	; (1000b608 <system_peripheral_reset+0x390>)
1000b2b2:	6859      	ldr	r1, [r3, #4]
1000b2b4:	2208      	movs	r2, #8
1000b2b6:	4391      	bics	r1, r2
1000b2b8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2ba:	6859      	ldr	r1, [r3, #4]
1000b2bc:	430a      	orrs	r2, r1
1000b2be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2c0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b2c2:	e202      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2c4:	4bd0      	ldr	r3, [pc, #832]	; (1000b608 <system_peripheral_reset+0x390>)
1000b2c6:	6859      	ldr	r1, [r3, #4]
1000b2c8:	2210      	movs	r2, #16
1000b2ca:	4391      	bics	r1, r2
1000b2cc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2ce:	6859      	ldr	r1, [r3, #4]
1000b2d0:	430a      	orrs	r2, r1
1000b2d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b2d6:	e1f8      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2d8:	4bcb      	ldr	r3, [pc, #812]	; (1000b608 <system_peripheral_reset+0x390>)
1000b2da:	6859      	ldr	r1, [r3, #4]
1000b2dc:	2220      	movs	r2, #32
1000b2de:	4391      	bics	r1, r2
1000b2e0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2e2:	6859      	ldr	r1, [r3, #4]
1000b2e4:	430a      	orrs	r2, r1
1000b2e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b2ea:	e1ee      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2ec:	4bc6      	ldr	r3, [pc, #792]	; (1000b608 <system_peripheral_reset+0x390>)
1000b2ee:	6859      	ldr	r1, [r3, #4]
1000b2f0:	2240      	movs	r2, #64	; 0x40
1000b2f2:	4391      	bics	r1, r2
1000b2f4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2f6:	6859      	ldr	r1, [r3, #4]
1000b2f8:	430a      	orrs	r2, r1
1000b2fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b2fe:	e1e4      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b300:	4bc1      	ldr	r3, [pc, #772]	; (1000b608 <system_peripheral_reset+0x390>)
1000b302:	6859      	ldr	r1, [r3, #4]
1000b304:	2280      	movs	r2, #128	; 0x80
1000b306:	4391      	bics	r1, r2
1000b308:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b30a:	6859      	ldr	r1, [r3, #4]
1000b30c:	430a      	orrs	r2, r1
1000b30e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b310:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b312:	e1da      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b314:	4bbc      	ldr	r3, [pc, #752]	; (1000b608 <system_peripheral_reset+0x390>)
1000b316:	6859      	ldr	r1, [r3, #4]
1000b318:	4abc      	ldr	r2, [pc, #752]	; (1000b60c <system_peripheral_reset+0x394>)
1000b31a:	400a      	ands	r2, r1
1000b31c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b31e:	685a      	ldr	r2, [r3, #4]
1000b320:	2180      	movs	r1, #128	; 0x80
1000b322:	0049      	lsls	r1, r1, #1
1000b324:	430a      	orrs	r2, r1
1000b326:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b328:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b32a:	e1ce      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b32c:	4bb6      	ldr	r3, [pc, #728]	; (1000b608 <system_peripheral_reset+0x390>)
1000b32e:	6859      	ldr	r1, [r3, #4]
1000b330:	4ab7      	ldr	r2, [pc, #732]	; (1000b610 <system_peripheral_reset+0x398>)
1000b332:	400a      	ands	r2, r1
1000b334:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b336:	685a      	ldr	r2, [r3, #4]
1000b338:	2180      	movs	r1, #128	; 0x80
1000b33a:	0089      	lsls	r1, r1, #2
1000b33c:	430a      	orrs	r2, r1
1000b33e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b340:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b342:	e1c2      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b344:	4bb0      	ldr	r3, [pc, #704]	; (1000b608 <system_peripheral_reset+0x390>)
1000b346:	6859      	ldr	r1, [r3, #4]
1000b348:	4ab2      	ldr	r2, [pc, #712]	; (1000b614 <system_peripheral_reset+0x39c>)
1000b34a:	400a      	ands	r2, r1
1000b34c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b34e:	685a      	ldr	r2, [r3, #4]
1000b350:	2180      	movs	r1, #128	; 0x80
1000b352:	00c9      	lsls	r1, r1, #3
1000b354:	430a      	orrs	r2, r1
1000b356:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b358:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b35a:	e1b6      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b35c:	4baa      	ldr	r3, [pc, #680]	; (1000b608 <system_peripheral_reset+0x390>)
1000b35e:	6859      	ldr	r1, [r3, #4]
1000b360:	4aad      	ldr	r2, [pc, #692]	; (1000b618 <system_peripheral_reset+0x3a0>)
1000b362:	400a      	ands	r2, r1
1000b364:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b366:	685a      	ldr	r2, [r3, #4]
1000b368:	2180      	movs	r1, #128	; 0x80
1000b36a:	0109      	lsls	r1, r1, #4
1000b36c:	430a      	orrs	r2, r1
1000b36e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b370:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b372:	e1aa      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b374:	4ba4      	ldr	r3, [pc, #656]	; (1000b608 <system_peripheral_reset+0x390>)
1000b376:	6859      	ldr	r1, [r3, #4]
1000b378:	4aa8      	ldr	r2, [pc, #672]	; (1000b61c <system_peripheral_reset+0x3a4>)
1000b37a:	400a      	ands	r2, r1
1000b37c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b37e:	685a      	ldr	r2, [r3, #4]
1000b380:	2180      	movs	r1, #128	; 0x80
1000b382:	0149      	lsls	r1, r1, #5
1000b384:	430a      	orrs	r2, r1
1000b386:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b388:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b38a:	e19e      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b38c:	4b9e      	ldr	r3, [pc, #632]	; (1000b608 <system_peripheral_reset+0x390>)
1000b38e:	6859      	ldr	r1, [r3, #4]
1000b390:	4aa3      	ldr	r2, [pc, #652]	; (1000b620 <system_peripheral_reset+0x3a8>)
1000b392:	400a      	ands	r2, r1
1000b394:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b396:	685a      	ldr	r2, [r3, #4]
1000b398:	2180      	movs	r1, #128	; 0x80
1000b39a:	0189      	lsls	r1, r1, #6
1000b39c:	430a      	orrs	r2, r1
1000b39e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b3a2:	e192      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b3a4:	4b98      	ldr	r3, [pc, #608]	; (1000b608 <system_peripheral_reset+0x390>)
1000b3a6:	6859      	ldr	r1, [r3, #4]
1000b3a8:	4a9e      	ldr	r2, [pc, #632]	; (1000b624 <system_peripheral_reset+0x3ac>)
1000b3aa:	400a      	ands	r2, r1
1000b3ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b3ae:	685a      	ldr	r2, [r3, #4]
1000b3b0:	2180      	movs	r1, #128	; 0x80
1000b3b2:	01c9      	lsls	r1, r1, #7
1000b3b4:	430a      	orrs	r2, r1
1000b3b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3b8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b3ba:	e186      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b3bc:	4b92      	ldr	r3, [pc, #584]	; (1000b608 <system_peripheral_reset+0x390>)
1000b3be:	6859      	ldr	r1, [r3, #4]
1000b3c0:	4a99      	ldr	r2, [pc, #612]	; (1000b628 <system_peripheral_reset+0x3b0>)
1000b3c2:	400a      	ands	r2, r1
1000b3c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b3c6:	685a      	ldr	r2, [r3, #4]
1000b3c8:	2180      	movs	r1, #128	; 0x80
1000b3ca:	0209      	lsls	r1, r1, #8
1000b3cc:	430a      	orrs	r2, r1
1000b3ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b3d2:	e17a      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b3d4:	4b8c      	ldr	r3, [pc, #560]	; (1000b608 <system_peripheral_reset+0x390>)
1000b3d6:	6859      	ldr	r1, [r3, #4]
1000b3d8:	4a94      	ldr	r2, [pc, #592]	; (1000b62c <system_peripheral_reset+0x3b4>)
1000b3da:	400a      	ands	r2, r1
1000b3dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b3de:	685a      	ldr	r2, [r3, #4]
1000b3e0:	2180      	movs	r1, #128	; 0x80
1000b3e2:	0249      	lsls	r1, r1, #9
1000b3e4:	430a      	orrs	r2, r1
1000b3e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b3ea:	e16e      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b3ec:	4b86      	ldr	r3, [pc, #536]	; (1000b608 <system_peripheral_reset+0x390>)
1000b3ee:	6859      	ldr	r1, [r3, #4]
1000b3f0:	4a8f      	ldr	r2, [pc, #572]	; (1000b630 <system_peripheral_reset+0x3b8>)
1000b3f2:	400a      	ands	r2, r1
1000b3f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b3f6:	685a      	ldr	r2, [r3, #4]
1000b3f8:	2180      	movs	r1, #128	; 0x80
1000b3fa:	0289      	lsls	r1, r1, #10
1000b3fc:	430a      	orrs	r2, r1
1000b3fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b400:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b402:	e162      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b404:	4b80      	ldr	r3, [pc, #512]	; (1000b608 <system_peripheral_reset+0x390>)
1000b406:	6859      	ldr	r1, [r3, #4]
1000b408:	4a8a      	ldr	r2, [pc, #552]	; (1000b634 <system_peripheral_reset+0x3bc>)
1000b40a:	400a      	ands	r2, r1
1000b40c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b40e:	685a      	ldr	r2, [r3, #4]
1000b410:	2180      	movs	r1, #128	; 0x80
1000b412:	02c9      	lsls	r1, r1, #11
1000b414:	430a      	orrs	r2, r1
1000b416:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b418:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b41a:	e156      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b41c:	4b7a      	ldr	r3, [pc, #488]	; (1000b608 <system_peripheral_reset+0x390>)
1000b41e:	6859      	ldr	r1, [r3, #4]
1000b420:	4a85      	ldr	r2, [pc, #532]	; (1000b638 <system_peripheral_reset+0x3c0>)
1000b422:	400a      	ands	r2, r1
1000b424:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b426:	685a      	ldr	r2, [r3, #4]
1000b428:	2180      	movs	r1, #128	; 0x80
1000b42a:	0309      	lsls	r1, r1, #12
1000b42c:	430a      	orrs	r2, r1
1000b42e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b430:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b432:	e14a      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b434:	4b74      	ldr	r3, [pc, #464]	; (1000b608 <system_peripheral_reset+0x390>)
1000b436:	6859      	ldr	r1, [r3, #4]
1000b438:	4a80      	ldr	r2, [pc, #512]	; (1000b63c <system_peripheral_reset+0x3c4>)
1000b43a:	400a      	ands	r2, r1
1000b43c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b43e:	685a      	ldr	r2, [r3, #4]
1000b440:	2180      	movs	r1, #128	; 0x80
1000b442:	0349      	lsls	r1, r1, #13
1000b444:	430a      	orrs	r2, r1
1000b446:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b448:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b44a:	e13e      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b44c:	4b6e      	ldr	r3, [pc, #440]	; (1000b608 <system_peripheral_reset+0x390>)
1000b44e:	6859      	ldr	r1, [r3, #4]
1000b450:	4a7b      	ldr	r2, [pc, #492]	; (1000b640 <system_peripheral_reset+0x3c8>)
1000b452:	400a      	ands	r2, r1
1000b454:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b456:	685a      	ldr	r2, [r3, #4]
1000b458:	2180      	movs	r1, #128	; 0x80
1000b45a:	0389      	lsls	r1, r1, #14
1000b45c:	430a      	orrs	r2, r1
1000b45e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b460:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b462:	e132      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b464:	4b68      	ldr	r3, [pc, #416]	; (1000b608 <system_peripheral_reset+0x390>)
1000b466:	6859      	ldr	r1, [r3, #4]
1000b468:	4a76      	ldr	r2, [pc, #472]	; (1000b644 <system_peripheral_reset+0x3cc>)
1000b46a:	400a      	ands	r2, r1
1000b46c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b46e:	685a      	ldr	r2, [r3, #4]
1000b470:	2180      	movs	r1, #128	; 0x80
1000b472:	03c9      	lsls	r1, r1, #15
1000b474:	430a      	orrs	r2, r1
1000b476:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b478:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b47a:	e126      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b47c:	4b62      	ldr	r3, [pc, #392]	; (1000b608 <system_peripheral_reset+0x390>)
1000b47e:	6859      	ldr	r1, [r3, #4]
1000b480:	4a71      	ldr	r2, [pc, #452]	; (1000b648 <system_peripheral_reset+0x3d0>)
1000b482:	400a      	ands	r2, r1
1000b484:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b486:	685a      	ldr	r2, [r3, #4]
1000b488:	2180      	movs	r1, #128	; 0x80
1000b48a:	0409      	lsls	r1, r1, #16
1000b48c:	430a      	orrs	r2, r1
1000b48e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b490:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b492:	e11a      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b494:	4b5c      	ldr	r3, [pc, #368]	; (1000b608 <system_peripheral_reset+0x390>)
1000b496:	6859      	ldr	r1, [r3, #4]
1000b498:	4a6c      	ldr	r2, [pc, #432]	; (1000b64c <system_peripheral_reset+0x3d4>)
1000b49a:	400a      	ands	r2, r1
1000b49c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b49e:	685a      	ldr	r2, [r3, #4]
1000b4a0:	2180      	movs	r1, #128	; 0x80
1000b4a2:	0449      	lsls	r1, r1, #17
1000b4a4:	430a      	orrs	r2, r1
1000b4a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4a8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b4aa:	e10e      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4ac:	4b56      	ldr	r3, [pc, #344]	; (1000b608 <system_peripheral_reset+0x390>)
1000b4ae:	6859      	ldr	r1, [r3, #4]
1000b4b0:	4a67      	ldr	r2, [pc, #412]	; (1000b650 <system_peripheral_reset+0x3d8>)
1000b4b2:	400a      	ands	r2, r1
1000b4b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4b6:	685a      	ldr	r2, [r3, #4]
1000b4b8:	2180      	movs	r1, #128	; 0x80
1000b4ba:	0489      	lsls	r1, r1, #18
1000b4bc:	430a      	orrs	r2, r1
1000b4be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4c0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b4c2:	e102      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4c4:	4b50      	ldr	r3, [pc, #320]	; (1000b608 <system_peripheral_reset+0x390>)
1000b4c6:	6859      	ldr	r1, [r3, #4]
1000b4c8:	4a62      	ldr	r2, [pc, #392]	; (1000b654 <system_peripheral_reset+0x3dc>)
1000b4ca:	400a      	ands	r2, r1
1000b4cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4ce:	685a      	ldr	r2, [r3, #4]
1000b4d0:	2180      	movs	r1, #128	; 0x80
1000b4d2:	04c9      	lsls	r1, r1, #19
1000b4d4:	430a      	orrs	r2, r1
1000b4d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b4da:	e0f6      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4dc:	4b4a      	ldr	r3, [pc, #296]	; (1000b608 <system_peripheral_reset+0x390>)
1000b4de:	6859      	ldr	r1, [r3, #4]
1000b4e0:	4a5d      	ldr	r2, [pc, #372]	; (1000b658 <system_peripheral_reset+0x3e0>)
1000b4e2:	400a      	ands	r2, r1
1000b4e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4e6:	685a      	ldr	r2, [r3, #4]
1000b4e8:	2180      	movs	r1, #128	; 0x80
1000b4ea:	0509      	lsls	r1, r1, #20
1000b4ec:	430a      	orrs	r2, r1
1000b4ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4f0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b4f2:	e0ea      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4f4:	4b44      	ldr	r3, [pc, #272]	; (1000b608 <system_peripheral_reset+0x390>)
1000b4f6:	6859      	ldr	r1, [r3, #4]
1000b4f8:	4a58      	ldr	r2, [pc, #352]	; (1000b65c <system_peripheral_reset+0x3e4>)
1000b4fa:	400a      	ands	r2, r1
1000b4fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4fe:	685a      	ldr	r2, [r3, #4]
1000b500:	2180      	movs	r1, #128	; 0x80
1000b502:	0549      	lsls	r1, r1, #21
1000b504:	430a      	orrs	r2, r1
1000b506:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b508:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b50a:	e0de      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b50c:	4b3e      	ldr	r3, [pc, #248]	; (1000b608 <system_peripheral_reset+0x390>)
1000b50e:	6859      	ldr	r1, [r3, #4]
1000b510:	4a53      	ldr	r2, [pc, #332]	; (1000b660 <system_peripheral_reset+0x3e8>)
1000b512:	400a      	ands	r2, r1
1000b514:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b516:	685a      	ldr	r2, [r3, #4]
1000b518:	2180      	movs	r1, #128	; 0x80
1000b51a:	0589      	lsls	r1, r1, #22
1000b51c:	430a      	orrs	r2, r1
1000b51e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b520:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b522:	e0d2      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b524:	4b38      	ldr	r3, [pc, #224]	; (1000b608 <system_peripheral_reset+0x390>)
1000b526:	6859      	ldr	r1, [r3, #4]
1000b528:	4a4e      	ldr	r2, [pc, #312]	; (1000b664 <system_peripheral_reset+0x3ec>)
1000b52a:	400a      	ands	r2, r1
1000b52c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b52e:	685a      	ldr	r2, [r3, #4]
1000b530:	2180      	movs	r1, #128	; 0x80
1000b532:	05c9      	lsls	r1, r1, #23
1000b534:	430a      	orrs	r2, r1
1000b536:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b538:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b53a:	e0c6      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b53c:	4a32      	ldr	r2, [pc, #200]	; (1000b608 <system_peripheral_reset+0x390>)
1000b53e:	6853      	ldr	r3, [r2, #4]
1000b540:	005b      	lsls	r3, r3, #1
1000b542:	085b      	lsrs	r3, r3, #1
1000b544:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b546:	6853      	ldr	r3, [r2, #4]
1000b548:	2180      	movs	r1, #128	; 0x80
1000b54a:	0609      	lsls	r1, r1, #24
1000b54c:	430b      	orrs	r3, r1
1000b54e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b550:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b552:	e0ba      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b554:	4b2c      	ldr	r3, [pc, #176]	; (1000b608 <system_peripheral_reset+0x390>)
1000b556:	891a      	ldrh	r2, [r3, #8]
1000b558:	2101      	movs	r1, #1
1000b55a:	438a      	bics	r2, r1
1000b55c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b55e:	8919      	ldrh	r1, [r3, #8]
1000b560:	2201      	movs	r2, #1
1000b562:	430a      	orrs	r2, r1
1000b564:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b566:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b568:	e0af      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b56a:	4b27      	ldr	r3, [pc, #156]	; (1000b608 <system_peripheral_reset+0x390>)
1000b56c:	891a      	ldrh	r2, [r3, #8]
1000b56e:	2102      	movs	r1, #2
1000b570:	438a      	bics	r2, r1
1000b572:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b574:	8919      	ldrh	r1, [r3, #8]
1000b576:	2202      	movs	r2, #2
1000b578:	430a      	orrs	r2, r1
1000b57a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b57c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b57e:	e0a4      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b580:	4b21      	ldr	r3, [pc, #132]	; (1000b608 <system_peripheral_reset+0x390>)
1000b582:	891a      	ldrh	r2, [r3, #8]
1000b584:	2104      	movs	r1, #4
1000b586:	438a      	bics	r2, r1
1000b588:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b58a:	8919      	ldrh	r1, [r3, #8]
1000b58c:	2204      	movs	r2, #4
1000b58e:	430a      	orrs	r2, r1
1000b590:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b592:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b594:	e099      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b596:	4b1c      	ldr	r3, [pc, #112]	; (1000b608 <system_peripheral_reset+0x390>)
1000b598:	891a      	ldrh	r2, [r3, #8]
1000b59a:	2108      	movs	r1, #8
1000b59c:	438a      	bics	r2, r1
1000b59e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b5a0:	8919      	ldrh	r1, [r3, #8]
1000b5a2:	2208      	movs	r2, #8
1000b5a4:	430a      	orrs	r2, r1
1000b5a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5a8:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b5aa:	e08e      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b5ac:	4b16      	ldr	r3, [pc, #88]	; (1000b608 <system_peripheral_reset+0x390>)
1000b5ae:	891a      	ldrh	r2, [r3, #8]
1000b5b0:	2110      	movs	r1, #16
1000b5b2:	438a      	bics	r2, r1
1000b5b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b5b6:	8919      	ldrh	r1, [r3, #8]
1000b5b8:	2210      	movs	r2, #16
1000b5ba:	430a      	orrs	r2, r1
1000b5bc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5be:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b5c0:	e083      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b5c2:	4b11      	ldr	r3, [pc, #68]	; (1000b608 <system_peripheral_reset+0x390>)
1000b5c4:	891a      	ldrh	r2, [r3, #8]
1000b5c6:	2120      	movs	r1, #32
1000b5c8:	438a      	bics	r2, r1
1000b5ca:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b5cc:	8919      	ldrh	r1, [r3, #8]
1000b5ce:	2220      	movs	r2, #32
1000b5d0:	430a      	orrs	r2, r1
1000b5d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5d4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b5d6:	e078      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b5d8:	4b0b      	ldr	r3, [pc, #44]	; (1000b608 <system_peripheral_reset+0x390>)
1000b5da:	891a      	ldrh	r2, [r3, #8]
1000b5dc:	2140      	movs	r1, #64	; 0x40
1000b5de:	438a      	bics	r2, r1
1000b5e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b5e2:	8919      	ldrh	r1, [r3, #8]
1000b5e4:	2240      	movs	r2, #64	; 0x40
1000b5e6:	430a      	orrs	r2, r1
1000b5e8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5ea:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b5ec:	e06d      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b5ee:	4b06      	ldr	r3, [pc, #24]	; (1000b608 <system_peripheral_reset+0x390>)
1000b5f0:	891a      	ldrh	r2, [r3, #8]
1000b5f2:	2180      	movs	r1, #128	; 0x80
1000b5f4:	438a      	bics	r2, r1
1000b5f6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b5f8:	8919      	ldrh	r1, [r3, #8]
1000b5fa:	2280      	movs	r2, #128	; 0x80
1000b5fc:	430a      	orrs	r2, r1
1000b5fe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b600:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b602:	e062      	b.n	1000b6ca <system_peripheral_reset+0x452>
1000b604:	10017f8c 	.word	0x10017f8c
1000b608:	4000b000 	.word	0x4000b000
1000b60c:	fffffeff 	.word	0xfffffeff
1000b610:	fffffdff 	.word	0xfffffdff
1000b614:	fffffbff 	.word	0xfffffbff
1000b618:	fffff7ff 	.word	0xfffff7ff
1000b61c:	ffffefff 	.word	0xffffefff
1000b620:	ffffdfff 	.word	0xffffdfff
1000b624:	ffffbfff 	.word	0xffffbfff
1000b628:	ffff7fff 	.word	0xffff7fff
1000b62c:	fffeffff 	.word	0xfffeffff
1000b630:	fffdffff 	.word	0xfffdffff
1000b634:	fffbffff 	.word	0xfffbffff
1000b638:	fff7ffff 	.word	0xfff7ffff
1000b63c:	ffefffff 	.word	0xffefffff
1000b640:	ffdfffff 	.word	0xffdfffff
1000b644:	ffbfffff 	.word	0xffbfffff
1000b648:	ff7fffff 	.word	0xff7fffff
1000b64c:	feffffff 	.word	0xfeffffff
1000b650:	fdffffff 	.word	0xfdffffff
1000b654:	fbffffff 	.word	0xfbffffff
1000b658:	f7ffffff 	.word	0xf7ffffff
1000b65c:	efffffff 	.word	0xefffffff
1000b660:	dfffffff 	.word	0xdfffffff
1000b664:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b668:	4b18      	ldr	r3, [pc, #96]	; (1000b6cc <system_peripheral_reset+0x454>)
1000b66a:	8919      	ldrh	r1, [r3, #8]
1000b66c:	4a18      	ldr	r2, [pc, #96]	; (1000b6d0 <system_peripheral_reset+0x458>)
1000b66e:	400a      	ands	r2, r1
1000b670:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b672:	8919      	ldrh	r1, [r3, #8]
1000b674:	2280      	movs	r2, #128	; 0x80
1000b676:	0052      	lsls	r2, r2, #1
1000b678:	430a      	orrs	r2, r1
1000b67a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b67c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b67e:	e024      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b680:	4b12      	ldr	r3, [pc, #72]	; (1000b6cc <system_peripheral_reset+0x454>)
1000b682:	8919      	ldrh	r1, [r3, #8]
1000b684:	4a13      	ldr	r2, [pc, #76]	; (1000b6d4 <system_peripheral_reset+0x45c>)
1000b686:	400a      	ands	r2, r1
1000b688:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b68a:	8919      	ldrh	r1, [r3, #8]
1000b68c:	2280      	movs	r2, #128	; 0x80
1000b68e:	0092      	lsls	r2, r2, #2
1000b690:	430a      	orrs	r2, r1
1000b692:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b694:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b696:	e018      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b698:	4b0c      	ldr	r3, [pc, #48]	; (1000b6cc <system_peripheral_reset+0x454>)
1000b69a:	8919      	ldrh	r1, [r3, #8]
1000b69c:	4a0e      	ldr	r2, [pc, #56]	; (1000b6d8 <system_peripheral_reset+0x460>)
1000b69e:	400a      	ands	r2, r1
1000b6a0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b6a2:	8919      	ldrh	r1, [r3, #8]
1000b6a4:	2280      	movs	r2, #128	; 0x80
1000b6a6:	00d2      	lsls	r2, r2, #3
1000b6a8:	430a      	orrs	r2, r1
1000b6aa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6ac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b6ae:	e00c      	b.n	1000b6ca <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b6b0:	4b06      	ldr	r3, [pc, #24]	; (1000b6cc <system_peripheral_reset+0x454>)
1000b6b2:	8919      	ldrh	r1, [r3, #8]
1000b6b4:	4a09      	ldr	r2, [pc, #36]	; (1000b6dc <system_peripheral_reset+0x464>)
1000b6b6:	400a      	ands	r2, r1
1000b6b8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b6ba:	8919      	ldrh	r1, [r3, #8]
1000b6bc:	2280      	movs	r2, #128	; 0x80
1000b6be:	0112      	lsls	r2, r2, #4
1000b6c0:	430a      	orrs	r2, r1
1000b6c2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6c4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b6c6:	e000      	b.n	1000b6ca <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b6c8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b6ca:	bd00      	pop	{pc}
1000b6cc:	4000b000 	.word	0x4000b000
1000b6d0:	fffffeff 	.word	0xfffffeff
1000b6d4:	fffffdff 	.word	0xfffffdff
1000b6d8:	fffffbff 	.word	0xfffffbff
1000b6dc:	fffff7ff 	.word	0xfffff7ff

1000b6e0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b6e0:	2380      	movs	r3, #128	; 0x80
1000b6e2:	04db      	lsls	r3, r3, #19
1000b6e4:	469c      	mov	ip, r3
1000b6e6:	4460      	add	r0, ip
1000b6e8:	0080      	lsls	r0, r0, #2
1000b6ea:	6001      	str	r1, [r0, #0]
}
1000b6ec:	4770      	bx	lr
1000b6ee:	46c0      	nop			; (mov r8, r8)

1000b6f0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b6f0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b6f2:	4b20      	ldr	r3, [pc, #128]	; (1000b774 <uart_rx0_isr_handler+0x84>)
1000b6f4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b6f6:	6823      	ldr	r3, [r4, #0]
1000b6f8:	7d1d      	ldrb	r5, [r3, #20]
1000b6fa:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b6fc:	066a      	lsls	r2, r5, #25
1000b6fe:	d513      	bpl.n	1000b728 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b700:	211e      	movs	r1, #30
1000b702:	2222      	movs	r2, #34	; 0x22
1000b704:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b706:	7e1a      	ldrb	r2, [r3, #24]
1000b708:	3123      	adds	r1, #35	; 0x23
1000b70a:	438a      	bics	r2, r1
1000b70c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b70e:	2321      	movs	r3, #33	; 0x21
1000b710:	5ce3      	ldrb	r3, [r4, r3]
1000b712:	071b      	lsls	r3, r3, #28
1000b714:	d506      	bpl.n	1000b724 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b716:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b718:	5ce3      	ldrb	r3, [r4, r3]
1000b71a:	071b      	lsls	r3, r3, #28
1000b71c:	d502      	bpl.n	1000b724 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b71e:	0020      	movs	r0, r4
1000b720:	6923      	ldr	r3, [r4, #16]
1000b722:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b724:	6823      	ldr	r3, [r4, #0]
1000b726:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b728:	07eb      	lsls	r3, r5, #31
1000b72a:	d522      	bpl.n	1000b772 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b72c:	6823      	ldr	r3, [r4, #0]
1000b72e:	7c1b      	ldrb	r3, [r3, #16]
1000b730:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b732:	6962      	ldr	r2, [r4, #20]
1000b734:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b736:	6963      	ldr	r3, [r4, #20]
1000b738:	3301      	adds	r3, #1
1000b73a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b73c:	8ba3      	ldrh	r3, [r4, #28]
1000b73e:	3b01      	subs	r3, #1
1000b740:	b29b      	uxth	r3, r3
1000b742:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b744:	8ba3      	ldrh	r3, [r4, #28]
1000b746:	b29b      	uxth	r3, r3
1000b748:	2b00      	cmp	r3, #0
1000b74a:	d112      	bne.n	1000b772 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b74c:	3321      	adds	r3, #33	; 0x21
1000b74e:	5ce3      	ldrb	r3, [r4, r3]
1000b750:	075b      	lsls	r3, r3, #29
1000b752:	d50e      	bpl.n	1000b772 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b754:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b756:	5ce3      	ldrb	r3, [r4, r3]
1000b758:	075b      	lsls	r3, r3, #29
1000b75a:	d50a      	bpl.n	1000b772 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b75c:	2200      	movs	r2, #0
1000b75e:	2322      	movs	r3, #34	; 0x22
1000b760:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b762:	6822      	ldr	r2, [r4, #0]
1000b764:	7e13      	ldrb	r3, [r2, #24]
1000b766:	2101      	movs	r1, #1
1000b768:	438b      	bics	r3, r1
1000b76a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b76c:	68e3      	ldr	r3, [r4, #12]
1000b76e:	0020      	movs	r0, r4
1000b770:	4798      	blx	r3
			}
		}
	}
}
1000b772:	bd70      	pop	{r4, r5, r6, pc}
1000b774:	1001ae5c 	.word	0x1001ae5c

1000b778 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b778:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b77a:	4b21      	ldr	r3, [pc, #132]	; (1000b800 <uart_tx0_isr_handler+0x88>)
1000b77c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b77e:	6823      	ldr	r3, [r4, #0]
1000b780:	791d      	ldrb	r5, [r3, #4]
1000b782:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b784:	07ea      	lsls	r2, r5, #31
1000b786:	d517      	bpl.n	1000b7b8 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b788:	69a2      	ldr	r2, [r4, #24]
1000b78a:	7811      	ldrb	r1, [r2, #0]
1000b78c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b78e:	3201      	adds	r2, #1
1000b790:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b792:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b794:	8be3      	ldrh	r3, [r4, #30]
1000b796:	3b01      	subs	r3, #1
1000b798:	b29b      	uxth	r3, r3
1000b79a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b79c:	8be3      	ldrh	r3, [r4, #30]
1000b79e:	b29b      	uxth	r3, r3
1000b7a0:	2b00      	cmp	r3, #0
1000b7a2:	d109      	bne.n	1000b7b8 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b7a4:	6822      	ldr	r2, [r4, #0]
1000b7a6:	7a13      	ldrb	r3, [r2, #8]
1000b7a8:	2101      	movs	r1, #1
1000b7aa:	438b      	bics	r3, r1
1000b7ac:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b7ae:	6822      	ldr	r2, [r4, #0]
1000b7b0:	7a11      	ldrb	r1, [r2, #8]
1000b7b2:	2310      	movs	r3, #16
1000b7b4:	430b      	orrs	r3, r1
1000b7b6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b7b8:	06eb      	lsls	r3, r5, #27
1000b7ba:	d512      	bpl.n	1000b7e2 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b7bc:	2321      	movs	r3, #33	; 0x21
1000b7be:	5ce3      	ldrb	r3, [r4, r3]
1000b7c0:	07db      	lsls	r3, r3, #31
1000b7c2:	d50e      	bpl.n	1000b7e2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b7c4:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b7c6:	5ce3      	ldrb	r3, [r4, r3]
1000b7c8:	07db      	lsls	r3, r3, #31
1000b7ca:	d50a      	bpl.n	1000b7e2 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b7cc:	2200      	movs	r2, #0
1000b7ce:	2322      	movs	r3, #34	; 0x22
1000b7d0:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b7d2:	6822      	ldr	r2, [r4, #0]
1000b7d4:	7a13      	ldrb	r3, [r2, #8]
1000b7d6:	2110      	movs	r1, #16
1000b7d8:	438b      	bics	r3, r1
1000b7da:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b7dc:	0020      	movs	r0, r4
1000b7de:	6863      	ldr	r3, [r4, #4]
1000b7e0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b7e2:	06ab      	lsls	r3, r5, #26
1000b7e4:	d50a      	bpl.n	1000b7fc <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b7e6:	2321      	movs	r3, #33	; 0x21
1000b7e8:	5ce3      	ldrb	r3, [r4, r3]
1000b7ea:	079b      	lsls	r3, r3, #30
1000b7ec:	d506      	bpl.n	1000b7fc <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b7ee:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b7f0:	5ce3      	ldrb	r3, [r4, r3]
1000b7f2:	079b      	lsls	r3, r3, #30
1000b7f4:	d502      	bpl.n	1000b7fc <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b7f6:	68a3      	ldr	r3, [r4, #8]
1000b7f8:	0020      	movs	r0, r4
1000b7fa:	4798      	blx	r3
		}

	}
}
1000b7fc:	bd70      	pop	{r4, r5, r6, pc}
1000b7fe:	46c0      	nop			; (mov r8, r8)
1000b800:	1001ae5c 	.word	0x1001ae5c

1000b804 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b804:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b806:	4b20      	ldr	r3, [pc, #128]	; (1000b888 <uart_rx1_isr_handler+0x84>)
1000b808:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b80a:	6823      	ldr	r3, [r4, #0]
1000b80c:	7d1d      	ldrb	r5, [r3, #20]
1000b80e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b810:	066a      	lsls	r2, r5, #25
1000b812:	d513      	bpl.n	1000b83c <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b814:	211e      	movs	r1, #30
1000b816:	2222      	movs	r2, #34	; 0x22
1000b818:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b81a:	7e1a      	ldrb	r2, [r3, #24]
1000b81c:	3123      	adds	r1, #35	; 0x23
1000b81e:	438a      	bics	r2, r1
1000b820:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b822:	2321      	movs	r3, #33	; 0x21
1000b824:	5ce3      	ldrb	r3, [r4, r3]
1000b826:	071b      	lsls	r3, r3, #28
1000b828:	d506      	bpl.n	1000b838 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b82a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b82c:	5ce3      	ldrb	r3, [r4, r3]
1000b82e:	071b      	lsls	r3, r3, #28
1000b830:	d502      	bpl.n	1000b838 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b832:	0020      	movs	r0, r4
1000b834:	6923      	ldr	r3, [r4, #16]
1000b836:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b838:	6823      	ldr	r3, [r4, #0]
1000b83a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b83c:	07eb      	lsls	r3, r5, #31
1000b83e:	d522      	bpl.n	1000b886 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b840:	6823      	ldr	r3, [r4, #0]
1000b842:	7c1b      	ldrb	r3, [r3, #16]
1000b844:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b846:	6962      	ldr	r2, [r4, #20]
1000b848:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b84a:	6963      	ldr	r3, [r4, #20]
1000b84c:	3301      	adds	r3, #1
1000b84e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b850:	8ba3      	ldrh	r3, [r4, #28]
1000b852:	3b01      	subs	r3, #1
1000b854:	b29b      	uxth	r3, r3
1000b856:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b858:	8ba3      	ldrh	r3, [r4, #28]
1000b85a:	b29b      	uxth	r3, r3
1000b85c:	2b00      	cmp	r3, #0
1000b85e:	d112      	bne.n	1000b886 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b860:	3321      	adds	r3, #33	; 0x21
1000b862:	5ce3      	ldrb	r3, [r4, r3]
1000b864:	075b      	lsls	r3, r3, #29
1000b866:	d50e      	bpl.n	1000b886 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b868:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b86a:	5ce3      	ldrb	r3, [r4, r3]
1000b86c:	075b      	lsls	r3, r3, #29
1000b86e:	d50a      	bpl.n	1000b886 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b870:	2200      	movs	r2, #0
1000b872:	2322      	movs	r3, #34	; 0x22
1000b874:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b876:	6822      	ldr	r2, [r4, #0]
1000b878:	7e13      	ldrb	r3, [r2, #24]
1000b87a:	2101      	movs	r1, #1
1000b87c:	438b      	bics	r3, r1
1000b87e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b880:	68e3      	ldr	r3, [r4, #12]
1000b882:	0020      	movs	r0, r4
1000b884:	4798      	blx	r3
			}
		}
	}
}
1000b886:	bd70      	pop	{r4, r5, r6, pc}
1000b888:	1001ae5c 	.word	0x1001ae5c

1000b88c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b88c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b88e:	4b21      	ldr	r3, [pc, #132]	; (1000b914 <uart_tx1_isr_handler+0x88>)
1000b890:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b892:	6823      	ldr	r3, [r4, #0]
1000b894:	791d      	ldrb	r5, [r3, #4]
1000b896:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b898:	07ea      	lsls	r2, r5, #31
1000b89a:	d517      	bpl.n	1000b8cc <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b89c:	69a2      	ldr	r2, [r4, #24]
1000b89e:	7811      	ldrb	r1, [r2, #0]
1000b8a0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b8a2:	3201      	adds	r2, #1
1000b8a4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b8a6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b8a8:	8be3      	ldrh	r3, [r4, #30]
1000b8aa:	3b01      	subs	r3, #1
1000b8ac:	b29b      	uxth	r3, r3
1000b8ae:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b8b0:	8be3      	ldrh	r3, [r4, #30]
1000b8b2:	b29b      	uxth	r3, r3
1000b8b4:	2b00      	cmp	r3, #0
1000b8b6:	d109      	bne.n	1000b8cc <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b8b8:	6822      	ldr	r2, [r4, #0]
1000b8ba:	7a13      	ldrb	r3, [r2, #8]
1000b8bc:	2101      	movs	r1, #1
1000b8be:	438b      	bics	r3, r1
1000b8c0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b8c2:	6822      	ldr	r2, [r4, #0]
1000b8c4:	7a11      	ldrb	r1, [r2, #8]
1000b8c6:	2310      	movs	r3, #16
1000b8c8:	430b      	orrs	r3, r1
1000b8ca:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b8cc:	06eb      	lsls	r3, r5, #27
1000b8ce:	d512      	bpl.n	1000b8f6 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b8d0:	2321      	movs	r3, #33	; 0x21
1000b8d2:	5ce3      	ldrb	r3, [r4, r3]
1000b8d4:	07db      	lsls	r3, r3, #31
1000b8d6:	d50e      	bpl.n	1000b8f6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b8d8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b8da:	5ce3      	ldrb	r3, [r4, r3]
1000b8dc:	07db      	lsls	r3, r3, #31
1000b8de:	d50a      	bpl.n	1000b8f6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b8e0:	2200      	movs	r2, #0
1000b8e2:	2322      	movs	r3, #34	; 0x22
1000b8e4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b8e6:	6822      	ldr	r2, [r4, #0]
1000b8e8:	7a13      	ldrb	r3, [r2, #8]
1000b8ea:	2110      	movs	r1, #16
1000b8ec:	438b      	bics	r3, r1
1000b8ee:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b8f0:	0020      	movs	r0, r4
1000b8f2:	6863      	ldr	r3, [r4, #4]
1000b8f4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b8f6:	06ab      	lsls	r3, r5, #26
1000b8f8:	d50a      	bpl.n	1000b910 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b8fa:	2321      	movs	r3, #33	; 0x21
1000b8fc:	5ce3      	ldrb	r3, [r4, r3]
1000b8fe:	079b      	lsls	r3, r3, #30
1000b900:	d506      	bpl.n	1000b910 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b902:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b904:	5ce3      	ldrb	r3, [r4, r3]
1000b906:	079b      	lsls	r3, r3, #30
1000b908:	d502      	bpl.n	1000b910 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b90a:	68a3      	ldr	r3, [r4, #8]
1000b90c:	0020      	movs	r0, r4
1000b90e:	4798      	blx	r3
		}

	}
}
1000b910:	bd70      	pop	{r4, r5, r6, pc}
1000b912:	46c0      	nop			; (mov r8, r8)
1000b914:	1001ae5c 	.word	0x1001ae5c

1000b918 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b918:	23e1      	movs	r3, #225	; 0xe1
1000b91a:	025b      	lsls	r3, r3, #9
1000b91c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b91e:	2300      	movs	r3, #0
1000b920:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b922:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b924:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b926:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b928:	3302      	adds	r3, #2
1000b92a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b92c:	2203      	movs	r2, #3
1000b92e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b930:	3201      	adds	r2, #1
1000b932:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b934:	3201      	adds	r2, #1
1000b936:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b938:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b93a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b93c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b93e:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b940:	4770      	bx	lr
1000b942:	46c0      	nop			; (mov r8, r8)

1000b944 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b946:	464f      	mov	r7, r9
1000b948:	4646      	mov	r6, r8
1000b94a:	b4c0      	push	{r6, r7}
1000b94c:	0005      	movs	r5, r0
1000b94e:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b950:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b952:	2300      	movs	r3, #0
1000b954:	6043      	str	r3, [r0, #4]
1000b956:	6083      	str	r3, [r0, #8]
1000b958:	60c3      	str	r3, [r0, #12]
1000b95a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b95c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b95e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b960:	2200      	movs	r2, #0
1000b962:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b964:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b966:	3320      	adds	r3, #32
1000b968:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b96a:	3301      	adds	r3, #1
1000b96c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b96e:	3301      	adds	r3, #1
1000b970:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b972:	4b55      	ldr	r3, [pc, #340]	; (1000bac8 <uart_init+0x184>)
1000b974:	4299      	cmp	r1, r3
1000b976:	d118      	bne.n	1000b9aa <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b978:	2009      	movs	r0, #9
1000b97a:	4c54      	ldr	r4, [pc, #336]	; (1000bacc <uart_init+0x188>)
1000b97c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b97e:	200a      	movs	r0, #10
1000b980:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b982:	2009      	movs	r0, #9
1000b984:	4c52      	ldr	r4, [pc, #328]	; (1000bad0 <uart_init+0x18c>)
1000b986:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b988:	200a      	movs	r0, #10
1000b98a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b98c:	4b51      	ldr	r3, [pc, #324]	; (1000bad4 <uart_init+0x190>)
1000b98e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b990:	4951      	ldr	r1, [pc, #324]	; (1000bad8 <uart_init+0x194>)
1000b992:	2010      	movs	r0, #16
1000b994:	4c51      	ldr	r4, [pc, #324]	; (1000badc <uart_init+0x198>)
1000b996:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b998:	4951      	ldr	r1, [pc, #324]	; (1000bae0 <uart_init+0x19c>)
1000b99a:	2011      	movs	r0, #17
1000b99c:	47a0      	blx	r4
1000b99e:	4b51      	ldr	r3, [pc, #324]	; (1000bae4 <uart_init+0x1a0>)
1000b9a0:	2201      	movs	r2, #1
1000b9a2:	601a      	str	r2, [r3, #0]
1000b9a4:	3201      	adds	r2, #1
1000b9a6:	601a      	str	r2, [r3, #0]
1000b9a8:	e01a      	b.n	1000b9e0 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b9aa:	4b4f      	ldr	r3, [pc, #316]	; (1000bae8 <uart_init+0x1a4>)
1000b9ac:	4299      	cmp	r1, r3
1000b9ae:	d117      	bne.n	1000b9e0 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b9b0:	200b      	movs	r0, #11
1000b9b2:	4c46      	ldr	r4, [pc, #280]	; (1000bacc <uart_init+0x188>)
1000b9b4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b9b6:	200c      	movs	r0, #12
1000b9b8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b9ba:	200b      	movs	r0, #11
1000b9bc:	4c44      	ldr	r4, [pc, #272]	; (1000bad0 <uart_init+0x18c>)
1000b9be:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b9c0:	200c      	movs	r0, #12
1000b9c2:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b9c4:	4b43      	ldr	r3, [pc, #268]	; (1000bad4 <uart_init+0x190>)
1000b9c6:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b9c8:	4948      	ldr	r1, [pc, #288]	; (1000baec <uart_init+0x1a8>)
1000b9ca:	2012      	movs	r0, #18
1000b9cc:	4c43      	ldr	r4, [pc, #268]	; (1000badc <uart_init+0x198>)
1000b9ce:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b9d0:	4947      	ldr	r1, [pc, #284]	; (1000baf0 <uart_init+0x1ac>)
1000b9d2:	2013      	movs	r0, #19
1000b9d4:	47a0      	blx	r4
1000b9d6:	4b43      	ldr	r3, [pc, #268]	; (1000bae4 <uart_init+0x1a0>)
1000b9d8:	2204      	movs	r2, #4
1000b9da:	601a      	str	r2, [r3, #0]
1000b9dc:	3204      	adds	r2, #4
1000b9de:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b9e0:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b9e2:	2204      	movs	r2, #4
1000b9e4:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b9e6:	2b00      	cmp	r3, #0
1000b9e8:	d152      	bne.n	1000ba90 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b9ea:	3302      	adds	r3, #2
1000b9ec:	4698      	mov	r8, r3
1000b9ee:	e04f      	b.n	1000ba90 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b9f0:	8a31      	ldrh	r1, [r6, #16]
1000b9f2:	ce01      	ldmia	r6!, {r0}
1000b9f4:	b2c0      	uxtb	r0, r0
1000b9f6:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b9f8:	3401      	adds	r4, #1
1000b9fa:	b2e4      	uxtb	r4, r4
1000b9fc:	4544      	cmp	r4, r8
1000b9fe:	d3f7      	bcc.n	1000b9f0 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ba00:	682b      	ldr	r3, [r5, #0]
1000ba02:	7d1a      	ldrb	r2, [r3, #20]
1000ba04:	07d2      	lsls	r2, r2, #31
1000ba06:	d504      	bpl.n	1000ba12 <uart_init+0xce>
1000ba08:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000ba0a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ba0c:	7d1a      	ldrb	r2, [r3, #20]
1000ba0e:	420a      	tst	r2, r1
1000ba10:	d1fb      	bne.n	1000ba0a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000ba12:	2100      	movs	r1, #0
1000ba14:	2220      	movs	r2, #32
1000ba16:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000ba18:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000ba1a:	1e59      	subs	r1, r3, #1
1000ba1c:	418b      	sbcs	r3, r1
1000ba1e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000ba20:	793b      	ldrb	r3, [r7, #4]
1000ba22:	797a      	ldrb	r2, [r7, #5]
1000ba24:	4313      	orrs	r3, r2
1000ba26:	430b      	orrs	r3, r1
	switch(config->parity) {
1000ba28:	79ba      	ldrb	r2, [r7, #6]
1000ba2a:	2a02      	cmp	r2, #2
1000ba2c:	d00d      	beq.n	1000ba4a <uart_init+0x106>
1000ba2e:	b2d1      	uxtb	r1, r2
1000ba30:	2902      	cmp	r1, #2
1000ba32:	d802      	bhi.n	1000ba3a <uart_init+0xf6>
1000ba34:	2a01      	cmp	r2, #1
1000ba36:	d005      	beq.n	1000ba44 <uart_init+0x100>
1000ba38:	e00f      	b.n	1000ba5a <uart_init+0x116>
1000ba3a:	2a03      	cmp	r2, #3
1000ba3c:	d008      	beq.n	1000ba50 <uart_init+0x10c>
1000ba3e:	2a04      	cmp	r2, #4
1000ba40:	d009      	beq.n	1000ba56 <uart_init+0x112>
1000ba42:	e00a      	b.n	1000ba5a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000ba44:	2202      	movs	r2, #2
1000ba46:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000ba48:	e007      	b.n	1000ba5a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000ba4a:	2206      	movs	r2, #6
1000ba4c:	4313      	orrs	r3, r2
			break;
1000ba4e:	e004      	b.n	1000ba5a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000ba50:	220a      	movs	r2, #10
1000ba52:	4313      	orrs	r3, r2
			break;
1000ba54:	e001      	b.n	1000ba5a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000ba56:	220e      	movs	r2, #14
1000ba58:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000ba5a:	2220      	movs	r2, #32
1000ba5c:	6829      	ldr	r1, [r5, #0]
1000ba5e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000ba60:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000ba62:	4b24      	ldr	r3, [pc, #144]	; (1000baf4 <uart_init+0x1b0>)
1000ba64:	4798      	blx	r3
1000ba66:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000ba68:	0031      	movs	r1, r6
1000ba6a:	4b23      	ldr	r3, [pc, #140]	; (1000baf8 <uart_init+0x1b4>)
1000ba6c:	4798      	blx	r3
1000ba6e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000ba70:	0400      	lsls	r0, r0, #16
1000ba72:	0c00      	lsrs	r0, r0, #16
1000ba74:	4370      	muls	r0, r6
1000ba76:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000ba78:	0931      	lsrs	r1, r6, #4
1000ba7a:	4288      	cmp	r0, r1
1000ba7c:	d906      	bls.n	1000ba8c <uart_init+0x148>
1000ba7e:	2300      	movs	r3, #0
		i++;
1000ba80:	3301      	adds	r3, #1
1000ba82:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000ba84:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000ba86:	4288      	cmp	r0, r1
1000ba88:	d8fa      	bhi.n	1000ba80 <uart_init+0x13c>
1000ba8a:	e007      	b.n	1000ba9c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000ba8c:	2300      	movs	r3, #0
1000ba8e:	e005      	b.n	1000ba9c <uart_init+0x158>
1000ba90:	003e      	movs	r6, r7
1000ba92:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000ba94:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ba96:	4b19      	ldr	r3, [pc, #100]	; (1000bafc <uart_init+0x1b8>)
1000ba98:	4699      	mov	r9, r3
1000ba9a:	e7a9      	b.n	1000b9f0 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000ba9c:	2100      	movs	r1, #0
1000ba9e:	2028      	movs	r0, #40	; 0x28
1000baa0:	682c      	ldr	r4, [r5, #0]
1000baa2:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000baa4:	3301      	adds	r3, #1
1000baa6:	071b      	lsls	r3, r3, #28
1000baa8:	0f5b      	lsrs	r3, r3, #29
1000baaa:	00d2      	lsls	r2, r2, #3
1000baac:	4313      	orrs	r3, r2
1000baae:	b29b      	uxth	r3, r3
1000bab0:	682a      	ldr	r2, [r5, #0]
1000bab2:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bab4:	682b      	ldr	r3, [r5, #0]
1000bab6:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bab8:	682b      	ldr	r3, [r5, #0]
1000baba:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000babc:	2000      	movs	r0, #0
1000babe:	bc0c      	pop	{r2, r3}
1000bac0:	4690      	mov	r8, r2
1000bac2:	4699      	mov	r9, r3
1000bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bac6:	46c0      	nop			; (mov r8, r8)
1000bac8:	40004000 	.word	0x40004000
1000bacc:	1000b279 	.word	0x1000b279
1000bad0:	1000abb1 	.word	0x1000abb1
1000bad4:	1001ae5c 	.word	0x1001ae5c
1000bad8:	1000b6f1 	.word	0x1000b6f1
1000badc:	1000b6e1 	.word	0x1000b6e1
1000bae0:	1000b779 	.word	0x1000b779
1000bae4:	e000e100 	.word	0xe000e100
1000bae8:	40005000 	.word	0x40005000
1000baec:	1000b805 	.word	0x1000b805
1000baf0:	1000b88d 	.word	0x1000b88d
1000baf4:	1000aba5 	.word	0x1000aba5
1000baf8:	10014cf9 	.word	0x10014cf9
1000bafc:	1000a801 	.word	0x1000a801

1000bb00 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bb00:	6802      	ldr	r2, [r0, #0]
1000bb02:	2001      	movs	r0, #1
1000bb04:	7913      	ldrb	r3, [r2, #4]
1000bb06:	4203      	tst	r3, r0
1000bb08:	d0fc      	beq.n	1000bb04 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000bb0a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000bb0c:	2000      	movs	r0, #0
1000bb0e:	4770      	bx	lr

1000bb10 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000bb10:	6802      	ldr	r2, [r0, #0]
1000bb12:	2001      	movs	r0, #1
1000bb14:	7d13      	ldrb	r3, [r2, #20]
1000bb16:	4203      	tst	r3, r0
1000bb18:	d0fc      	beq.n	1000bb14 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bb1a:	7c13      	ldrb	r3, [r2, #16]
1000bb1c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bb1e:	2000      	movs	r0, #0
1000bb20:	4770      	bx	lr
1000bb22:	46c0      	nop			; (mov r8, r8)

1000bb24 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bb24:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bb26:	2a00      	cmp	r2, #0
1000bb28:	d00d      	beq.n	1000bb46 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bb2a:	330b      	adds	r3, #11
1000bb2c:	5cc3      	ldrb	r3, [r0, r3]
1000bb2e:	b2db      	uxtb	r3, r3
1000bb30:	2b05      	cmp	r3, #5
1000bb32:	d008      	beq.n	1000bb46 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bb34:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bb36:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bb38:	2205      	movs	r2, #5
1000bb3a:	2322      	movs	r3, #34	; 0x22
1000bb3c:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bb3e:	6803      	ldr	r3, [r0, #0]
1000bb40:	3a04      	subs	r2, #4
1000bb42:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000bb44:	2300      	movs	r3, #0
}
1000bb46:	0018      	movs	r0, r3
1000bb48:	4770      	bx	lr
1000bb4a:	46c0      	nop			; (mov r8, r8)

1000bb4c <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000bb4c:	0093      	lsls	r3, r2, #2
1000bb4e:	18c3      	adds	r3, r0, r3
1000bb50:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000bb52:	2120      	movs	r1, #32
1000bb54:	2301      	movs	r3, #1
1000bb56:	4093      	lsls	r3, r2
1000bb58:	5c42      	ldrb	r2, [r0, r1]
1000bb5a:	4313      	orrs	r3, r2
1000bb5c:	5443      	strb	r3, [r0, r1]
}
1000bb5e:	4770      	bx	lr

1000bb60 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bb60:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000bb62:	2221      	movs	r2, #33	; 0x21
1000bb64:	2301      	movs	r3, #1
1000bb66:	408b      	lsls	r3, r1
1000bb68:	5c84      	ldrb	r4, [r0, r2]
1000bb6a:	4323      	orrs	r3, r4
1000bb6c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000bb6e:	2901      	cmp	r1, #1
1000bb70:	d104      	bne.n	1000bb7c <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bb72:	6802      	ldr	r2, [r0, #0]
1000bb74:	7a11      	ldrb	r1, [r2, #8]
1000bb76:	2320      	movs	r3, #32
1000bb78:	430b      	orrs	r3, r1
1000bb7a:	7213      	strb	r3, [r2, #8]
	}
}
1000bb7c:	bd10      	pop	{r4, pc}
1000bb7e:	46c0      	nop			; (mov r8, r8)

1000bb80 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bb80:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bb82:	2201      	movs	r2, #1
1000bb84:	408a      	lsls	r2, r1
1000bb86:	2421      	movs	r4, #33	; 0x21
1000bb88:	5d03      	ldrb	r3, [r0, r4]
1000bb8a:	4393      	bics	r3, r2
1000bb8c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000bb8e:	2901      	cmp	r1, #1
1000bb90:	d104      	bne.n	1000bb9c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bb92:	6802      	ldr	r2, [r0, #0]
1000bb94:	7a13      	ldrb	r3, [r2, #8]
1000bb96:	311f      	adds	r1, #31
1000bb98:	438b      	bics	r3, r1
1000bb9a:	7213      	strb	r3, [r2, #8]
	}

}
1000bb9c:	bd10      	pop	{r4, pc}
1000bb9e:	46c0      	nop			; (mov r8, r8)

1000bba0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bba2:	4647      	mov	r7, r8
1000bba4:	b480      	push	{r7}
1000bba6:	000c      	movs	r4, r1
1000bba8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000bbaa:	2800      	cmp	r0, #0
1000bbac:	d10d      	bne.n	1000bbca <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000bbae:	2a00      	cmp	r2, #0
1000bbb0:	dd0e      	ble.n	1000bbd0 <_read+0x30>
1000bbb2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000bbb4:	4e08      	ldr	r6, [pc, #32]	; (1000bbd8 <_read+0x38>)
1000bbb6:	4d09      	ldr	r5, [pc, #36]	; (1000bbdc <_read+0x3c>)
1000bbb8:	6830      	ldr	r0, [r6, #0]
1000bbba:	0021      	movs	r1, r4
1000bbbc:	682b      	ldr	r3, [r5, #0]
1000bbbe:	4798      	blx	r3
		ptr++;
1000bbc0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000bbc2:	42a7      	cmp	r7, r4
1000bbc4:	d1f8      	bne.n	1000bbb8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000bbc6:	4640      	mov	r0, r8
1000bbc8:	e003      	b.n	1000bbd2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000bbca:	2001      	movs	r0, #1
1000bbcc:	4240      	negs	r0, r0
1000bbce:	e000      	b.n	1000bbd2 <_read+0x32>
	}

	for (; len > 0; --len) {
1000bbd0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000bbd2:	bc04      	pop	{r2}
1000bbd4:	4690      	mov	r8, r2
1000bbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbd8:	1001ae6c 	.word	0x1001ae6c
1000bbdc:	1001ae64 	.word	0x1001ae64

1000bbe0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000bbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bbe2:	4647      	mov	r7, r8
1000bbe4:	b480      	push	{r7}
1000bbe6:	000e      	movs	r6, r1
1000bbe8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000bbea:	3801      	subs	r0, #1
1000bbec:	2802      	cmp	r0, #2
1000bbee:	d811      	bhi.n	1000bc14 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000bbf0:	2a00      	cmp	r2, #0
1000bbf2:	d012      	beq.n	1000bc1a <_write+0x3a>
1000bbf4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000bbf6:	4b0c      	ldr	r3, [pc, #48]	; (1000bc28 <_write+0x48>)
1000bbf8:	4698      	mov	r8, r3
1000bbfa:	4f0c      	ldr	r7, [pc, #48]	; (1000bc2c <_write+0x4c>)
1000bbfc:	4643      	mov	r3, r8
1000bbfe:	6818      	ldr	r0, [r3, #0]
1000bc00:	5d31      	ldrb	r1, [r6, r4]
1000bc02:	683b      	ldr	r3, [r7, #0]
1000bc04:	4798      	blx	r3
1000bc06:	2800      	cmp	r0, #0
1000bc08:	db09      	blt.n	1000bc1e <_write+0x3e>
			return -1;
		}
		++nChars;
1000bc0a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000bc0c:	42a5      	cmp	r5, r4
1000bc0e:	d1f5      	bne.n	1000bbfc <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000bc10:	0020      	movs	r0, r4
1000bc12:	e006      	b.n	1000bc22 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000bc14:	2001      	movs	r0, #1
1000bc16:	4240      	negs	r0, r0
1000bc18:	e003      	b.n	1000bc22 <_write+0x42>
	}

	for (; len != 0; --len) {
1000bc1a:	2000      	movs	r0, #0
1000bc1c:	e001      	b.n	1000bc22 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000bc1e:	2001      	movs	r0, #1
1000bc20:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000bc22:	bc04      	pop	{r2}
1000bc24:	4690      	mov	r8, r2
1000bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc28:	1001ae6c 	.word	0x1001ae6c
1000bc2c:	1001ae68 	.word	0x1001ae68

1000bc30 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000bc30:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000bc32:	4804      	ldr	r0, [pc, #16]	; (1000bc44 <ble_undefined_event_handler+0x14>)
1000bc34:	4b04      	ldr	r3, [pc, #16]	; (1000bc48 <ble_undefined_event_handler+0x18>)
1000bc36:	4798      	blx	r3
1000bc38:	4804      	ldr	r0, [pc, #16]	; (1000bc4c <ble_undefined_event_handler+0x1c>)
1000bc3a:	4b05      	ldr	r3, [pc, #20]	; (1000bc50 <ble_undefined_event_handler+0x20>)
1000bc3c:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000bc3e:	2000      	movs	r0, #0
1000bc40:	bd10      	pop	{r4, pc}
1000bc42:	46c0      	nop			; (mov r8, r8)
1000bc44:	10017434 	.word	0x10017434
1000bc48:	10012e11 	.word	0x10012e11
1000bc4c:	10018110 	.word	0x10018110
1000bc50:	10012cf1 	.word	0x10012cf1

1000bc54 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000bc54:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000bc56:	7800      	ldrb	r0, [r0, #0]
1000bc58:	2800      	cmp	r0, #0
1000bc5a:	d006      	beq.n	1000bc6a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000bc5c:	4803      	ldr	r0, [pc, #12]	; (1000bc6c <ble_scan_report_handler+0x18>)
1000bc5e:	4b04      	ldr	r3, [pc, #16]	; (1000bc70 <ble_scan_report_handler+0x1c>)
1000bc60:	4798      	blx	r3
1000bc62:	4804      	ldr	r0, [pc, #16]	; (1000bc74 <ble_scan_report_handler+0x20>)
1000bc64:	4b04      	ldr	r3, [pc, #16]	; (1000bc78 <ble_scan_report_handler+0x24>)
1000bc66:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000bc68:	20e2      	movs	r0, #226	; 0xe2
}
1000bc6a:	bd10      	pop	{r4, pc}
1000bc6c:	10017434 	.word	0x10017434
1000bc70:	10012e11 	.word	0x10012e11
1000bc74:	1001812c 	.word	0x1001812c
1000bc78:	10012cf1 	.word	0x10012cf1

1000bc7c <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000bc7c:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000bc7e:	7800      	ldrb	r0, [r0, #0]
1000bc80:	2800      	cmp	r0, #0
1000bc82:	d006      	beq.n	1000bc92 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000bc84:	4803      	ldr	r0, [pc, #12]	; (1000bc94 <ble_adv_report_handler+0x18>)
1000bc86:	4b04      	ldr	r3, [pc, #16]	; (1000bc98 <ble_adv_report_handler+0x1c>)
1000bc88:	4798      	blx	r3
1000bc8a:	4804      	ldr	r0, [pc, #16]	; (1000bc9c <ble_adv_report_handler+0x20>)
1000bc8c:	4b04      	ldr	r3, [pc, #16]	; (1000bca0 <ble_adv_report_handler+0x24>)
1000bc8e:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000bc90:	20e2      	movs	r0, #226	; 0xe2
}
1000bc92:	bd10      	pop	{r4, pc}
1000bc94:	10017434 	.word	0x10017434
1000bc98:	10012e11 	.word	0x10012e11
1000bc9c:	10018140 	.word	0x10018140
1000bca0:	10012cf1 	.word	0x10012cf1

1000bca4 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000bca4:	b510      	push	{r4, lr}
1000bca6:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000bca8:	4804      	ldr	r0, [pc, #16]	; (1000bcbc <ble_mtu_changed_indication_handler+0x18>)
1000bcaa:	4b05      	ldr	r3, [pc, #20]	; (1000bcc0 <ble_mtu_changed_indication_handler+0x1c>)
1000bcac:	4798      	blx	r3
1000bcae:	8862      	ldrh	r2, [r4, #2]
1000bcb0:	8821      	ldrh	r1, [r4, #0]
1000bcb2:	4804      	ldr	r0, [pc, #16]	; (1000bcc4 <ble_mtu_changed_indication_handler+0x20>)
1000bcb4:	4b04      	ldr	r3, [pc, #16]	; (1000bcc8 <ble_mtu_changed_indication_handler+0x24>)
1000bcb6:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000bcb8:	2000      	movs	r0, #0
1000bcba:	bd10      	pop	{r4, pc}
1000bcbc:	10017434 	.word	0x10017434
1000bcc0:	10012e11 	.word	0x10012e11
1000bcc4:	10018154 	.word	0x10018154
1000bcc8:	10012cf1 	.word	0x10012cf1

1000bccc <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000bccc:	b570      	push	{r4, r5, r6, lr}
1000bcce:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bcd0:	78c5      	ldrb	r5, [r0, #3]
1000bcd2:	2d00      	cmp	r5, #0
1000bcd4:	d108      	bne.n	1000bce8 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000bcd6:	480a      	ldr	r0, [pc, #40]	; (1000bd00 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bcd8:	4b0a      	ldr	r3, [pc, #40]	; (1000bd04 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bcda:	4798      	blx	r3
1000bcdc:	78a2      	ldrb	r2, [r4, #2]
1000bcde:	8821      	ldrh	r1, [r4, #0]
1000bce0:	4809      	ldr	r0, [pc, #36]	; (1000bd08 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000bce2:	4b0a      	ldr	r3, [pc, #40]	; (1000bd0c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bce4:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bce6:	e008      	b.n	1000bcfa <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000bce8:	4805      	ldr	r0, [pc, #20]	; (1000bd00 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bcea:	4b06      	ldr	r3, [pc, #24]	; (1000bd04 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bcec:	4798      	blx	r3
1000bcee:	78a2      	ldrb	r2, [r4, #2]
1000bcf0:	8821      	ldrh	r1, [r4, #0]
1000bcf2:	4807      	ldr	r0, [pc, #28]	; (1000bd10 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000bcf4:	4b05      	ldr	r3, [pc, #20]	; (1000bd0c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bcf6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bcf8:	25e2      	movs	r5, #226	; 0xe2
}
1000bcfa:	0028      	movs	r0, r5
1000bcfc:	bd70      	pop	{r4, r5, r6, pc}
1000bcfe:	46c0      	nop			; (mov r8, r8)
1000bd00:	10017434 	.word	0x10017434
1000bd04:	10012e11 	.word	0x10012e11
1000bd08:	1001818c 	.word	0x1001818c
1000bd0c:	10012cf1 	.word	0x10012cf1
1000bd10:	100181bc 	.word	0x100181bc

1000bd14 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000bd14:	b570      	push	{r4, r5, r6, lr}
1000bd16:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bd18:	78c5      	ldrb	r5, [r0, #3]
1000bd1a:	2d00      	cmp	r5, #0
1000bd1c:	d108      	bne.n	1000bd30 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000bd1e:	480a      	ldr	r0, [pc, #40]	; (1000bd48 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bd20:	4b0a      	ldr	r3, [pc, #40]	; (1000bd4c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bd22:	4798      	blx	r3
1000bd24:	78a2      	ldrb	r2, [r4, #2]
1000bd26:	8821      	ldrh	r1, [r4, #0]
1000bd28:	4809      	ldr	r0, [pc, #36]	; (1000bd50 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000bd2a:	4b0a      	ldr	r3, [pc, #40]	; (1000bd54 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bd2c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bd2e:	e008      	b.n	1000bd42 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000bd30:	4805      	ldr	r0, [pc, #20]	; (1000bd48 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bd32:	4b06      	ldr	r3, [pc, #24]	; (1000bd4c <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bd34:	4798      	blx	r3
1000bd36:	78a2      	ldrb	r2, [r4, #2]
1000bd38:	8821      	ldrh	r1, [r4, #0]
1000bd3a:	4807      	ldr	r0, [pc, #28]	; (1000bd58 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000bd3c:	4b05      	ldr	r3, [pc, #20]	; (1000bd54 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bd3e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bd40:	25e2      	movs	r5, #226	; 0xe2
}
1000bd42:	0028      	movs	r0, r5
1000bd44:	bd70      	pop	{r4, r5, r6, pc}
1000bd46:	46c0      	nop			; (mov r8, r8)
1000bd48:	10017434 	.word	0x10017434
1000bd4c:	10012e11 	.word	0x10012e11
1000bd50:	100181f4 	.word	0x100181f4
1000bd54:	10012cf1 	.word	0x10012cf1
1000bd58:	10018230 	.word	0x10018230

1000bd5c <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bd5e:	0006      	movs	r6, r0
1000bd60:	4c1d      	ldr	r4, [pc, #116]	; (1000bdd8 <ble_disconnected_state_handler+0x7c>)
1000bd62:	239b      	movs	r3, #155	; 0x9b
1000bd64:	009b      	lsls	r3, r3, #2
1000bd66:	18e7      	adds	r7, r4, r3
1000bd68:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bd6a:	0023      	movs	r3, r4
1000bd6c:	3b56      	subs	r3, #86	; 0x56
1000bd6e:	881a      	ldrh	r2, [r3, #0]
1000bd70:	8833      	ldrh	r3, [r6, #0]
1000bd72:	429a      	cmp	r2, r3
1000bd74:	d122      	bne.n	1000bdbc <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bd76:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bd78:	2b05      	cmp	r3, #5
1000bd7a:	d001      	beq.n	1000bd80 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bd7c:	2b08      	cmp	r3, #8
1000bd7e:	d102      	bne.n	1000bd86 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000bd80:	2301      	movs	r3, #1
1000bd82:	702b      	strb	r3, [r5, #0]
1000bd84:	e01a      	b.n	1000bdbc <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000bd86:	2b07      	cmp	r3, #7
1000bd88:	d80f      	bhi.n	1000bdaa <ble_disconnected_state_handler+0x4e>
1000bd8a:	009b      	lsls	r3, r3, #2
1000bd8c:	4a13      	ldr	r2, [pc, #76]	; (1000bddc <ble_disconnected_state_handler+0x80>)
1000bd8e:	58d3      	ldr	r3, [r2, r3]
1000bd90:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bd92:	2300      	movs	r3, #0
1000bd94:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000bd96:	4b12      	ldr	r3, [pc, #72]	; (1000bde0 <ble_disconnected_state_handler+0x84>)
1000bd98:	781b      	ldrb	r3, [r3, #0]
1000bd9a:	2b00      	cmp	r3, #0
1000bd9c:	d00e      	beq.n	1000bdbc <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000bd9e:	4a10      	ldr	r2, [pc, #64]	; (1000bde0 <ble_disconnected_state_handler+0x84>)
1000bda0:	7813      	ldrb	r3, [r2, #0]
1000bda2:	3b01      	subs	r3, #1
1000bda4:	b2db      	uxtb	r3, r3
1000bda6:	7013      	strb	r3, [r2, #0]
1000bda8:	e008      	b.n	1000bdbc <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000bdaa:	480e      	ldr	r0, [pc, #56]	; (1000bde4 <ble_disconnected_state_handler+0x88>)
1000bdac:	4b0e      	ldr	r3, [pc, #56]	; (1000bde8 <ble_disconnected_state_handler+0x8c>)
1000bdae:	4798      	blx	r3
1000bdb0:	7829      	ldrb	r1, [r5, #0]
1000bdb2:	480e      	ldr	r0, [pc, #56]	; (1000bdec <ble_disconnected_state_handler+0x90>)
1000bdb4:	4b0e      	ldr	r3, [pc, #56]	; (1000bdf0 <ble_disconnected_state_handler+0x94>)
1000bdb6:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bdb8:	2300      	movs	r3, #0
1000bdba:	702b      	strb	r3, [r5, #0]
1000bdbc:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bdbe:	42bc      	cmp	r4, r7
1000bdc0:	d1d2      	bne.n	1000bd68 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000bdc2:	4808      	ldr	r0, [pc, #32]	; (1000bde4 <ble_disconnected_state_handler+0x88>)
1000bdc4:	4b08      	ldr	r3, [pc, #32]	; (1000bde8 <ble_disconnected_state_handler+0x8c>)
1000bdc6:	4798      	blx	r3
1000bdc8:	8832      	ldrh	r2, [r6, #0]
1000bdca:	78b1      	ldrb	r1, [r6, #2]
1000bdcc:	4809      	ldr	r0, [pc, #36]	; (1000bdf4 <ble_disconnected_state_handler+0x98>)
1000bdce:	4b08      	ldr	r3, [pc, #32]	; (1000bdf0 <ble_disconnected_state_handler+0x94>)
1000bdd0:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000bdd2:	2000      	movs	r0, #0
1000bdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bdd6:	46c0      	nop			; (mov r8, r8)
1000bdd8:	1001aee6 	.word	0x1001aee6
1000bddc:	1001809c 	.word	0x1001809c
1000bde0:	1001b0f4 	.word	0x1001b0f4
1000bde4:	10017434 	.word	0x10017434
1000bde8:	10012e11 	.word	0x10012e11
1000bdec:	1001826c 	.word	0x1001826c
1000bdf0:	10012cf1 	.word	0x10012cf1
1000bdf4:	10018284 	.word	0x10018284

1000bdf8 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000bdf8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000bdfa:	4804      	ldr	r0, [pc, #16]	; (1000be0c <ble_conn_param_update+0x14>)
1000bdfc:	4b04      	ldr	r3, [pc, #16]	; (1000be10 <ble_conn_param_update+0x18>)
1000bdfe:	4798      	blx	r3
1000be00:	4804      	ldr	r0, [pc, #16]	; (1000be14 <ble_conn_param_update+0x1c>)
1000be02:	4b05      	ldr	r3, [pc, #20]	; (1000be18 <ble_conn_param_update+0x20>)
1000be04:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000be06:	2000      	movs	r0, #0
1000be08:	bd10      	pop	{r4, pc}
1000be0a:	46c0      	nop			; (mov r8, r8)
1000be0c:	10017434 	.word	0x10017434
1000be10:	10012e11 	.word	0x10012e11
1000be14:	100182b4 	.word	0x100182b4
1000be18:	10012cf1 	.word	0x10012cf1

1000be1c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000be1e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000be20:	8801      	ldrh	r1, [r0, #0]
1000be22:	4b28      	ldr	r3, [pc, #160]	; (1000bec4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be24:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000be26:	891a      	ldrh	r2, [r3, #8]
1000be28:	428a      	cmp	r2, r1
1000be2a:	d104      	bne.n	1000be36 <ble_encryption_status_change_handler+0x1a>
1000be2c:	001a      	movs	r2, r3
1000be2e:	325e      	adds	r2, #94	; 0x5e
1000be30:	7812      	ldrb	r2, [r2, #0]
1000be32:	2a06      	cmp	r2, #6
1000be34:	d02e      	beq.n	1000be94 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be36:	3401      	adds	r4, #1
1000be38:	b2e4      	uxtb	r4, r4
1000be3a:	337c      	adds	r3, #124	; 0x7c
1000be3c:	2c05      	cmp	r4, #5
1000be3e:	d1f2      	bne.n	1000be26 <ble_encryption_status_change_handler+0xa>
1000be40:	e039      	b.n	1000beb6 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000be42:	4920      	ldr	r1, [pc, #128]	; (1000bec4 <ble_encryption_status_change_handler+0xa8>)
1000be44:	0163      	lsls	r3, r4, #5
1000be46:	1b1a      	subs	r2, r3, r4
1000be48:	0092      	lsls	r2, r2, #2
1000be4a:	188a      	adds	r2, r1, r2
1000be4c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000be4e:	0014      	movs	r4, r2
1000be50:	345e      	adds	r4, #94	; 0x5e
1000be52:	2307      	movs	r3, #7
1000be54:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000be56:	481c      	ldr	r0, [pc, #112]	; (1000bec8 <ble_encryption_status_change_handler+0xac>)
1000be58:	4b1c      	ldr	r3, [pc, #112]	; (1000becc <ble_encryption_status_change_handler+0xb0>)
1000be5a:	4798      	blx	r3
1000be5c:	481c      	ldr	r0, [pc, #112]	; (1000bed0 <ble_encryption_status_change_handler+0xb4>)
1000be5e:	4b1d      	ldr	r3, [pc, #116]	; (1000bed4 <ble_encryption_status_change_handler+0xb8>)
1000be60:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000be62:	25e2      	movs	r5, #226	; 0xe2
1000be64:	e02b      	b.n	1000bebe <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000be66:	4818      	ldr	r0, [pc, #96]	; (1000bec8 <ble_encryption_status_change_handler+0xac>)
1000be68:	4b18      	ldr	r3, [pc, #96]	; (1000becc <ble_encryption_status_change_handler+0xb0>)
1000be6a:	4798      	blx	r3
1000be6c:	481a      	ldr	r0, [pc, #104]	; (1000bed8 <ble_encryption_status_change_handler+0xbc>)
1000be6e:	4b19      	ldr	r3, [pc, #100]	; (1000bed4 <ble_encryption_status_change_handler+0xb8>)
1000be70:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000be72:	4914      	ldr	r1, [pc, #80]	; (1000bec4 <ble_encryption_status_change_handler+0xa8>)
1000be74:	0163      	lsls	r3, r4, #5
1000be76:	1b1a      	subs	r2, r3, r4
1000be78:	0092      	lsls	r2, r2, #2
1000be7a:	188a      	adds	r2, r1, r2
1000be7c:	0010      	movs	r0, r2
1000be7e:	305e      	adds	r0, #94	; 0x5e
1000be80:	2708      	movs	r7, #8
1000be82:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000be84:	78f0      	ldrb	r0, [r6, #3]
1000be86:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000be88:	78b2      	ldrb	r2, [r6, #2]
1000be8a:	1b1c      	subs	r4, r3, r4
1000be8c:	00a4      	lsls	r4, r4, #2
1000be8e:	190c      	adds	r4, r1, r4
1000be90:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000be92:	e014      	b.n	1000bebe <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000be94:	78b5      	ldrb	r5, [r6, #2]
1000be96:	2d00      	cmp	r5, #0
1000be98:	d0e5      	beq.n	1000be66 <ble_encryption_status_change_handler+0x4a>
1000be9a:	e7d2      	b.n	1000be42 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000be9c:	4e0a      	ldr	r6, [pc, #40]	; (1000bec8 <ble_encryption_status_change_handler+0xac>)
1000be9e:	0030      	movs	r0, r6
1000bea0:	4d0a      	ldr	r5, [pc, #40]	; (1000becc <ble_encryption_status_change_handler+0xb0>)
1000bea2:	47a8      	blx	r5
1000bea4:	480c      	ldr	r0, [pc, #48]	; (1000bed8 <ble_encryption_status_change_handler+0xbc>)
1000bea6:	4c0b      	ldr	r4, [pc, #44]	; (1000bed4 <ble_encryption_status_change_handler+0xb8>)
1000bea8:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000beaa:	0030      	movs	r0, r6
1000beac:	47a8      	blx	r5
1000beae:	480b      	ldr	r0, [pc, #44]	; (1000bedc <ble_encryption_status_change_handler+0xc0>)
1000beb0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000beb2:	25e2      	movs	r5, #226	; 0xe2
1000beb4:	e003      	b.n	1000bebe <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000beb6:	78b5      	ldrb	r5, [r6, #2]
1000beb8:	2d00      	cmp	r5, #0
1000beba:	d1c2      	bne.n	1000be42 <ble_encryption_status_change_handler+0x26>
1000bebc:	e7ee      	b.n	1000be9c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000bebe:	0028      	movs	r0, r5
1000bec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bec2:	46c0      	nop			; (mov r8, r8)
1000bec4:	1001ae88 	.word	0x1001ae88
1000bec8:	10017434 	.word	0x10017434
1000becc:	10012e11 	.word	0x10012e11
1000bed0:	100182d0 	.word	0x100182d0
1000bed4:	10012cf1 	.word	0x10012cf1
1000bed8:	100182e4 	.word	0x100182e4
1000bedc:	10018308 	.word	0x10018308

1000bee0 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000bee0:	b530      	push	{r4, r5, lr}
1000bee2:	b085      	sub	sp, #20
1000bee4:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000bee6:	4b1f      	ldr	r3, [pc, #124]	; (1000bf64 <ble_scan_info_handler+0x84>)
1000bee8:	781b      	ldrb	r3, [r3, #0]
1000beea:	b2db      	uxtb	r3, r3
1000beec:	2b13      	cmp	r3, #19
1000beee:	d824      	bhi.n	1000bf3a <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000bef0:	4d1c      	ldr	r5, [pc, #112]	; (1000bf64 <ble_scan_info_handler+0x84>)
1000bef2:	782b      	ldrb	r3, [r5, #0]
1000bef4:	b2db      	uxtb	r3, r3
1000bef6:	0098      	lsls	r0, r3, #2
1000bef8:	18c0      	adds	r0, r0, r3
1000befa:	00c0      	lsls	r0, r0, #3
1000befc:	18c3      	adds	r3, r0, r3
1000befe:	481a      	ldr	r0, [pc, #104]	; (1000bf68 <ble_scan_info_handler+0x88>)
1000bf00:	1818      	adds	r0, r3, r0
1000bf02:	2229      	movs	r2, #41	; 0x29
1000bf04:	0021      	movs	r1, r4
1000bf06:	4b19      	ldr	r3, [pc, #100]	; (1000bf6c <ble_scan_info_handler+0x8c>)
1000bf08:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bf0a:	4819      	ldr	r0, [pc, #100]	; (1000bf70 <ble_scan_info_handler+0x90>)
1000bf0c:	4b19      	ldr	r3, [pc, #100]	; (1000bf74 <ble_scan_info_handler+0x94>)
1000bf0e:	4798      	blx	r3
1000bf10:	7829      	ldrb	r1, [r5, #0]
1000bf12:	b2c9      	uxtb	r1, r1
1000bf14:	79a3      	ldrb	r3, [r4, #6]
1000bf16:	79e2      	ldrb	r2, [r4, #7]
1000bf18:	78a0      	ldrb	r0, [r4, #2]
1000bf1a:	9003      	str	r0, [sp, #12]
1000bf1c:	78e0      	ldrb	r0, [r4, #3]
1000bf1e:	9002      	str	r0, [sp, #8]
1000bf20:	7920      	ldrb	r0, [r4, #4]
1000bf22:	9001      	str	r0, [sp, #4]
1000bf24:	7960      	ldrb	r0, [r4, #5]
1000bf26:	9000      	str	r0, [sp, #0]
1000bf28:	4813      	ldr	r0, [pc, #76]	; (1000bf78 <ble_scan_info_handler+0x98>)
1000bf2a:	4c14      	ldr	r4, [pc, #80]	; (1000bf7c <ble_scan_info_handler+0x9c>)
1000bf2c:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000bf2e:	782b      	ldrb	r3, [r5, #0]
1000bf30:	3301      	adds	r3, #1
1000bf32:	b2db      	uxtb	r3, r3
1000bf34:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000bf36:	2300      	movs	r3, #0
1000bf38:	e011      	b.n	1000bf5e <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000bf3a:	480d      	ldr	r0, [pc, #52]	; (1000bf70 <ble_scan_info_handler+0x90>)
1000bf3c:	4b0d      	ldr	r3, [pc, #52]	; (1000bf74 <ble_scan_info_handler+0x94>)
1000bf3e:	4798      	blx	r3
1000bf40:	480f      	ldr	r0, [pc, #60]	; (1000bf80 <ble_scan_info_handler+0xa0>)
1000bf42:	4b0e      	ldr	r3, [pc, #56]	; (1000bf7c <ble_scan_info_handler+0x9c>)
1000bf44:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bf46:	4b0f      	ldr	r3, [pc, #60]	; (1000bf84 <ble_scan_info_handler+0xa4>)
1000bf48:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bf4a:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bf4c:	2800      	cmp	r0, #0
1000bf4e:	d006      	beq.n	1000bf5e <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000bf50:	4807      	ldr	r0, [pc, #28]	; (1000bf70 <ble_scan_info_handler+0x90>)
1000bf52:	4b08      	ldr	r3, [pc, #32]	; (1000bf74 <ble_scan_info_handler+0x94>)
1000bf54:	4798      	blx	r3
1000bf56:	480c      	ldr	r0, [pc, #48]	; (1000bf88 <ble_scan_info_handler+0xa8>)
1000bf58:	4b08      	ldr	r3, [pc, #32]	; (1000bf7c <ble_scan_info_handler+0x9c>)
1000bf5a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bf5c:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000bf5e:	0018      	movs	r0, r3
1000bf60:	b005      	add	sp, #20
1000bf62:	bd30      	pop	{r4, r5, pc}
1000bf64:	10019960 	.word	0x10019960
1000bf68:	1001b16c 	.word	0x1001b16c
1000bf6c:	100122ab 	.word	0x100122ab
1000bf70:	10017434 	.word	0x10017434
1000bf74:	10012e11 	.word	0x10012e11
1000bf78:	10018330 	.word	0x10018330
1000bf7c:	10012cf1 	.word	0x10012cf1
1000bf80:	1001836c 	.word	0x1001836c
1000bf84:	1000ea29 	.word	0x1000ea29
1000bf88:	100183a4 	.word	0x100183a4

1000bf8c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000bf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf8e:	465f      	mov	r7, fp
1000bf90:	4656      	mov	r6, sl
1000bf92:	464d      	mov	r5, r9
1000bf94:	4644      	mov	r4, r8
1000bf96:	b4f0      	push	{r4, r5, r6, r7}
1000bf98:	b083      	sub	sp, #12
1000bf9a:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bf9c:	8841      	ldrh	r1, [r0, #2]
1000bf9e:	4b59      	ldr	r3, [pc, #356]	; (1000c104 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfa0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bfa2:	891a      	ldrh	r2, [r3, #8]
1000bfa4:	428a      	cmp	r2, r1
1000bfa6:	d105      	bne.n	1000bfb4 <ble_pair_done_handler+0x28>
1000bfa8:	001a      	movs	r2, r3
1000bfaa:	325e      	adds	r2, #94	; 0x5e
1000bfac:	7812      	ldrb	r2, [r2, #0]
1000bfae:	2a03      	cmp	r2, #3
1000bfb0:	d100      	bne.n	1000bfb4 <ble_pair_done_handler+0x28>
1000bfb2:	e09a      	b.n	1000c0ea <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfb4:	3401      	adds	r4, #1
1000bfb6:	b2e4      	uxtb	r4, r4
1000bfb8:	337c      	adds	r3, #124	; 0x7c
1000bfba:	2c05      	cmp	r4, #5
1000bfbc:	d1f1      	bne.n	1000bfa2 <ble_pair_done_handler+0x16>
1000bfbe:	e057      	b.n	1000c070 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000bfc0:	7821      	ldrb	r1, [r4, #0]
1000bfc2:	0030      	movs	r0, r6
1000bfc4:	47b8      	blx	r7
1000bfc6:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000bfc8:	454c      	cmp	r4, r9
1000bfca:	d1f9      	bne.n	1000bfc0 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000bfcc:	484e      	ldr	r0, [pc, #312]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000bfce:	4b4f      	ldr	r3, [pc, #316]	; (1000c10c <ble_pair_done_handler+0x180>)
1000bfd0:	4798      	blx	r3
1000bfd2:	484f      	ldr	r0, [pc, #316]	; (1000c110 <ble_pair_done_handler+0x184>)
1000bfd4:	4b4f      	ldr	r3, [pc, #316]	; (1000c114 <ble_pair_done_handler+0x188>)
1000bfd6:	4798      	blx	r3
1000bfd8:	002e      	movs	r6, r5
1000bfda:	3622      	adds	r6, #34	; 0x22
1000bfdc:	002c      	movs	r4, r5
1000bfde:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000bfe0:	4f4c      	ldr	r7, [pc, #304]	; (1000c114 <ble_pair_done_handler+0x188>)
1000bfe2:	7831      	ldrb	r1, [r6, #0]
1000bfe4:	484c      	ldr	r0, [pc, #304]	; (1000c118 <ble_pair_done_handler+0x18c>)
1000bfe6:	47b8      	blx	r7
1000bfe8:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000bfea:	42a6      	cmp	r6, r4
1000bfec:	d1f9      	bne.n	1000bfe2 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000bfee:	4846      	ldr	r0, [pc, #280]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000bff0:	4b46      	ldr	r3, [pc, #280]	; (1000c10c <ble_pair_done_handler+0x180>)
1000bff2:	4798      	blx	r3
1000bff4:	4849      	ldr	r0, [pc, #292]	; (1000c11c <ble_pair_done_handler+0x190>)
1000bff6:	4b47      	ldr	r3, [pc, #284]	; (1000c114 <ble_pair_done_handler+0x188>)
1000bff8:	4798      	blx	r3
1000bffa:	3542      	adds	r5, #66	; 0x42
1000bffc:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000bffe:	4e46      	ldr	r6, [pc, #280]	; (1000c118 <ble_pair_done_handler+0x18c>)
1000c000:	4d44      	ldr	r5, [pc, #272]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c002:	7821      	ldrb	r1, [r4, #0]
1000c004:	0030      	movs	r0, r6
1000c006:	47a8      	blx	r5
1000c008:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c00a:	42bc      	cmp	r4, r7
1000c00c:	d1f9      	bne.n	1000c002 <ble_pair_done_handler+0x76>
1000c00e:	e071      	b.n	1000c0f4 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c010:	0163      	lsls	r3, r4, #5
1000c012:	1b1c      	subs	r4, r3, r4
1000c014:	00a4      	lsls	r4, r4, #2
1000c016:	4b3b      	ldr	r3, [pc, #236]	; (1000c104 <ble_pair_done_handler+0x178>)
1000c018:	191c      	adds	r4, r3, r4
1000c01a:	345e      	adds	r4, #94	; 0x5e
1000c01c:	7823      	ldrb	r3, [r4, #0]
1000c01e:	2b01      	cmp	r3, #1
1000c020:	d915      	bls.n	1000c04e <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c022:	4839      	ldr	r0, [pc, #228]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000c024:	4b39      	ldr	r3, [pc, #228]	; (1000c10c <ble_pair_done_handler+0x180>)
1000c026:	4798      	blx	r3
1000c028:	483d      	ldr	r0, [pc, #244]	; (1000c120 <ble_pair_done_handler+0x194>)
1000c02a:	4b3a      	ldr	r3, [pc, #232]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c02c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c02e:	8868      	ldrh	r0, [r5, #2]
1000c030:	2113      	movs	r1, #19
1000c032:	4b3c      	ldr	r3, [pc, #240]	; (1000c124 <ble_pair_done_handler+0x198>)
1000c034:	4798      	blx	r3
1000c036:	9001      	str	r0, [sp, #4]
1000c038:	2800      	cmp	r0, #0
1000c03a:	d05b      	beq.n	1000c0f4 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c03c:	4832      	ldr	r0, [pc, #200]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000c03e:	4b33      	ldr	r3, [pc, #204]	; (1000c10c <ble_pair_done_handler+0x180>)
1000c040:	4798      	blx	r3
1000c042:	4839      	ldr	r0, [pc, #228]	; (1000c128 <ble_pair_done_handler+0x19c>)
1000c044:	4b33      	ldr	r3, [pc, #204]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c046:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c048:	23e2      	movs	r3, #226	; 0xe2
1000c04a:	9301      	str	r3, [sp, #4]
1000c04c:	e052      	b.n	1000c0f4 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c04e:	2300      	movs	r3, #0
1000c050:	9301      	str	r3, [sp, #4]
1000c052:	e04f      	b.n	1000c0f4 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c054:	4e2c      	ldr	r6, [pc, #176]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000c056:	0030      	movs	r0, r6
1000c058:	4d2c      	ldr	r5, [pc, #176]	; (1000c10c <ble_pair_done_handler+0x180>)
1000c05a:	47a8      	blx	r5
1000c05c:	4833      	ldr	r0, [pc, #204]	; (1000c12c <ble_pair_done_handler+0x1a0>)
1000c05e:	4c2d      	ldr	r4, [pc, #180]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c060:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c062:	0030      	movs	r0, r6
1000c064:	47a8      	blx	r5
1000c066:	4832      	ldr	r0, [pc, #200]	; (1000c130 <ble_pair_done_handler+0x1a4>)
1000c068:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c06a:	23e2      	movs	r3, #226	; 0xe2
1000c06c:	9301      	str	r3, [sp, #4]
1000c06e:	e041      	b.n	1000c0f4 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c070:	792b      	ldrb	r3, [r5, #4]
1000c072:	2b00      	cmp	r3, #0
1000c074:	d1cc      	bne.n	1000c010 <ble_pair_done_handler+0x84>
1000c076:	e7ed      	b.n	1000c054 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c078:	4823      	ldr	r0, [pc, #140]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000c07a:	4b24      	ldr	r3, [pc, #144]	; (1000c10c <ble_pair_done_handler+0x180>)
1000c07c:	469b      	mov	fp, r3
1000c07e:	4798      	blx	r3
1000c080:	482a      	ldr	r0, [pc, #168]	; (1000c12c <ble_pair_done_handler+0x1a0>)
1000c082:	4b24      	ldr	r3, [pc, #144]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c084:	469a      	mov	sl, r3
1000c086:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c088:	782a      	ldrb	r2, [r5, #0]
1000c08a:	4b1e      	ldr	r3, [pc, #120]	; (1000c104 <ble_pair_done_handler+0x178>)
1000c08c:	4698      	mov	r8, r3
1000c08e:	0167      	lsls	r7, r4, #5
1000c090:	1b3b      	subs	r3, r7, r4
1000c092:	009b      	lsls	r3, r3, #2
1000c094:	4443      	add	r3, r8
1000c096:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c098:	792a      	ldrb	r2, [r5, #4]
1000c09a:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c09c:	335e      	adds	r3, #94	; 0x5e
1000c09e:	2205      	movs	r2, #5
1000c0a0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c0a2:	1b38      	subs	r0, r7, r4
1000c0a4:	0080      	lsls	r0, r0, #2
1000c0a6:	4440      	add	r0, r8
1000c0a8:	3036      	adds	r0, #54	; 0x36
1000c0aa:	320b      	adds	r2, #11
1000c0ac:	0029      	movs	r1, r5
1000c0ae:	3122      	adds	r1, #34	; 0x22
1000c0b0:	4b20      	ldr	r3, [pc, #128]	; (1000c134 <ble_pair_done_handler+0x1a8>)
1000c0b2:	4699      	mov	r9, r3
1000c0b4:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c0b6:	1b38      	subs	r0, r7, r4
1000c0b8:	0080      	lsls	r0, r0, #2
1000c0ba:	4440      	add	r0, r8
1000c0bc:	3046      	adds	r0, #70	; 0x46
1000c0be:	2217      	movs	r2, #23
1000c0c0:	0029      	movs	r1, r5
1000c0c2:	3132      	adds	r1, #50	; 0x32
1000c0c4:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c0c6:	1b38      	subs	r0, r7, r4
1000c0c8:	0080      	lsls	r0, r0, #2
1000c0ca:	4440      	add	r0, r8
1000c0cc:	301a      	adds	r0, #26
1000c0ce:	1dac      	adds	r4, r5, #6
1000c0d0:	221c      	movs	r2, #28
1000c0d2:	0021      	movs	r1, r4
1000c0d4:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c0d6:	480c      	ldr	r0, [pc, #48]	; (1000c108 <ble_pair_done_handler+0x17c>)
1000c0d8:	47d8      	blx	fp
1000c0da:	4817      	ldr	r0, [pc, #92]	; (1000c138 <ble_pair_done_handler+0x1ac>)
1000c0dc:	47d0      	blx	sl
1000c0de:	2316      	movs	r3, #22
1000c0e0:	4699      	mov	r9, r3
1000c0e2:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c0e4:	4e0c      	ldr	r6, [pc, #48]	; (1000c118 <ble_pair_done_handler+0x18c>)
1000c0e6:	4f0b      	ldr	r7, [pc, #44]	; (1000c114 <ble_pair_done_handler+0x188>)
1000c0e8:	e76a      	b.n	1000bfc0 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c0ea:	792b      	ldrb	r3, [r5, #4]
1000c0ec:	9301      	str	r3, [sp, #4]
1000c0ee:	2b00      	cmp	r3, #0
1000c0f0:	d0c2      	beq.n	1000c078 <ble_pair_done_handler+0xec>
1000c0f2:	e78d      	b.n	1000c010 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c0f4:	9801      	ldr	r0, [sp, #4]
1000c0f6:	b003      	add	sp, #12
1000c0f8:	bc3c      	pop	{r2, r3, r4, r5}
1000c0fa:	4690      	mov	r8, r2
1000c0fc:	4699      	mov	r9, r3
1000c0fe:	46a2      	mov	sl, r4
1000c100:	46ab      	mov	fp, r5
1000c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c104:	1001ae88 	.word	0x1001ae88
1000c108:	10017434 	.word	0x10017434
1000c10c:	10012e11 	.word	0x10012e11
1000c110:	100183c8 	.word	0x100183c8
1000c114:	10012cf1 	.word	0x10012cf1
1000c118:	100183bc 	.word	0x100183bc
1000c11c:	100183d0 	.word	0x100183d0
1000c120:	100183d8 	.word	0x100183d8
1000c124:	1000ea49 	.word	0x1000ea49
1000c128:	100183f8 	.word	0x100183f8
1000c12c:	10018414 	.word	0x10018414
1000c130:	10018440 	.word	0x10018440
1000c134:	100122ab 	.word	0x100122ab
1000c138:	10018470 	.word	0x10018470

1000c13c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c13c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c13e:	8800      	ldrh	r0, [r0, #0]
1000c140:	2378      	movs	r3, #120	; 0x78
1000c142:	2201      	movs	r2, #1
1000c144:	2101      	movs	r1, #1
1000c146:	4c02      	ldr	r4, [pc, #8]	; (1000c150 <ble_conn_param_update_req+0x14>)
1000c148:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c14a:	2000      	movs	r0, #0
1000c14c:	bd10      	pop	{r4, pc}
1000c14e:	46c0      	nop			; (mov r8, r8)
1000c150:	1000ea69 	.word	0x1000ea69

1000c154 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c154:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c156:	4657      	mov	r7, sl
1000c158:	464e      	mov	r6, r9
1000c15a:	4645      	mov	r5, r8
1000c15c:	b4e0      	push	{r5, r6, r7}
1000c15e:	b084      	sub	sp, #16
1000c160:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c162:	2209      	movs	r2, #9
1000c164:	2100      	movs	r1, #0
1000c166:	a801      	add	r0, sp, #4
1000c168:	4b6a      	ldr	r3, [pc, #424]	; (1000c314 <ble_slave_security_request_handler+0x1c0>)
1000c16a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c16c:	8825      	ldrh	r5, [r4, #0]
1000c16e:	496a      	ldr	r1, [pc, #424]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c170:	000a      	movs	r2, r1
1000c172:	2300      	movs	r3, #0
1000c174:	8910      	ldrh	r0, [r2, #8]
1000c176:	42a8      	cmp	r0, r5
1000c178:	d116      	bne.n	1000c1a8 <ble_slave_security_request_handler+0x54>
1000c17a:	0010      	movs	r0, r2
1000c17c:	305e      	adds	r0, #94	; 0x5e
1000c17e:	7800      	ldrb	r0, [r0, #0]
1000c180:	2802      	cmp	r0, #2
1000c182:	d111      	bne.n	1000c1a8 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c184:	4864      	ldr	r0, [pc, #400]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c186:	015a      	lsls	r2, r3, #5
1000c188:	1ad6      	subs	r6, r2, r3
1000c18a:	00b6      	lsls	r6, r6, #2
1000c18c:	1986      	adds	r6, r0, r6
1000c18e:	365e      	adds	r6, #94	; 0x5e
1000c190:	2206      	movs	r2, #6
1000c192:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c194:	32f9      	adds	r2, #249	; 0xf9
1000c196:	4013      	ands	r3, r2
1000c198:	015a      	lsls	r2, r3, #5
1000c19a:	1ad2      	subs	r2, r2, r3
1000c19c:	0092      	lsls	r2, r2, #2
1000c19e:	1882      	adds	r2, r0, r2
1000c1a0:	7d12      	ldrb	r2, [r2, #20]
1000c1a2:	07d0      	lsls	r0, r2, #31
1000c1a4:	d405      	bmi.n	1000c1b2 <ble_slave_security_request_handler+0x5e>
1000c1a6:	e01b      	b.n	1000c1e0 <ble_slave_security_request_handler+0x8c>
1000c1a8:	3301      	adds	r3, #1
1000c1aa:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1ac:	2b05      	cmp	r3, #5
1000c1ae:	d1e1      	bne.n	1000c174 <ble_slave_security_request_handler+0x20>
1000c1b0:	e01e      	b.n	1000c1f0 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c1b2:	78e0      	ldrb	r0, [r4, #3]
1000c1b4:	2800      	cmp	r0, #0
1000c1b6:	d013      	beq.n	1000c1e0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c1b8:	0159      	lsls	r1, r3, #5
1000c1ba:	1ac9      	subs	r1, r1, r3
1000c1bc:	008b      	lsls	r3, r1, #2
1000c1be:	4956      	ldr	r1, [pc, #344]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c1c0:	18c9      	adds	r1, r1, r3
1000c1c2:	311a      	adds	r1, #26
1000c1c4:	8820      	ldrh	r0, [r4, #0]
1000c1c6:	4b55      	ldr	r3, [pc, #340]	; (1000c31c <ble_slave_security_request_handler+0x1c8>)
1000c1c8:	4798      	blx	r3
1000c1ca:	2800      	cmp	r0, #0
1000c1cc:	d100      	bne.n	1000c1d0 <ble_slave_security_request_handler+0x7c>
1000c1ce:	e09b      	b.n	1000c308 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c1d0:	4853      	ldr	r0, [pc, #332]	; (1000c320 <ble_slave_security_request_handler+0x1cc>)
1000c1d2:	4b54      	ldr	r3, [pc, #336]	; (1000c324 <ble_slave_security_request_handler+0x1d0>)
1000c1d4:	4798      	blx	r3
1000c1d6:	4854      	ldr	r0, [pc, #336]	; (1000c328 <ble_slave_security_request_handler+0x1d4>)
1000c1d8:	4b54      	ldr	r3, [pc, #336]	; (1000c32c <ble_slave_security_request_handler+0x1d8>)
1000c1da:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c1dc:	20e2      	movs	r0, #226	; 0xe2
1000c1de:	e093      	b.n	1000c308 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c1e0:	015a      	lsls	r2, r3, #5
1000c1e2:	1ad3      	subs	r3, r2, r3
1000c1e4:	009b      	lsls	r3, r3, #2
1000c1e6:	4a4c      	ldr	r2, [pc, #304]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c1e8:	18d3      	adds	r3, r2, r3
1000c1ea:	335e      	adds	r3, #94	; 0x5e
1000c1ec:	2202      	movs	r2, #2
1000c1ee:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c1f0:	8825      	ldrh	r5, [r4, #0]
1000c1f2:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1f4:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c1f6:	0016      	movs	r6, r2
1000c1f8:	8908      	ldrh	r0, [r1, #8]
1000c1fa:	42a8      	cmp	r0, r5
1000c1fc:	d10d      	bne.n	1000c21a <ble_slave_security_request_handler+0xc6>
1000c1fe:	0008      	movs	r0, r1
1000c200:	305e      	adds	r0, #94	; 0x5e
1000c202:	7800      	ldrb	r0, [r0, #0]
1000c204:	2802      	cmp	r0, #2
1000c206:	d108      	bne.n	1000c21a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c208:	0152      	lsls	r2, r2, #5
1000c20a:	1b92      	subs	r2, r2, r6
1000c20c:	0096      	lsls	r6, r2, #2
1000c20e:	4a42      	ldr	r2, [pc, #264]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c210:	1992      	adds	r2, r2, r6
1000c212:	325e      	adds	r2, #94	; 0x5e
1000c214:	2103      	movs	r1, #3
1000c216:	7011      	strb	r1, [r2, #0]
			break;
1000c218:	e005      	b.n	1000c226 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c21a:	3301      	adds	r3, #1
1000c21c:	b2db      	uxtb	r3, r3
1000c21e:	3201      	adds	r2, #1
1000c220:	317c      	adds	r1, #124	; 0x7c
1000c222:	2b05      	cmp	r3, #5
1000c224:	d1e7      	bne.n	1000c1f6 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c226:	aa01      	add	r2, sp, #4
1000c228:	78e1      	ldrb	r1, [r4, #3]
1000c22a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c22c:	2101      	movs	r1, #1
1000c22e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c230:	3103      	adds	r1, #3
1000c232:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c234:	001f      	movs	r7, r3
1000c236:	015a      	lsls	r2, r3, #5
1000c238:	1ad2      	subs	r2, r2, r3
1000c23a:	0092      	lsls	r2, r2, #2
1000c23c:	4936      	ldr	r1, [pc, #216]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c23e:	5c52      	ldrb	r2, [r2, r1]
1000c240:	2a02      	cmp	r2, #2
1000c242:	d104      	bne.n	1000c24e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c244:	aa01      	add	r2, sp, #4
1000c246:	2103      	movs	r1, #3
1000c248:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c24a:	71d1      	strb	r1, [r2, #7]
1000c24c:	e003      	b.n	1000c256 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c24e:	aa01      	add	r2, sp, #4
1000c250:	2101      	movs	r1, #1
1000c252:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c254:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c256:	aa01      	add	r2, sp, #4
1000c258:	2110      	movs	r1, #16
1000c25a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c25c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c25e:	017a      	lsls	r2, r7, #5
1000c260:	1bd2      	subs	r2, r2, r7
1000c262:	0092      	lsls	r2, r2, #2
1000c264:	492c      	ldr	r1, [pc, #176]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c266:	188a      	adds	r2, r1, r2
1000c268:	7e12      	ldrb	r2, [r2, #24]
1000c26a:	2a40      	cmp	r2, #64	; 0x40
1000c26c:	d134      	bne.n	1000c2d8 <ble_slave_security_request_handler+0x184>
1000c26e:	015a      	lsls	r2, r3, #5
1000c270:	1ad3      	subs	r3, r2, r3
1000c272:	009b      	lsls	r3, r3, #2
1000c274:	469a      	mov	sl, r3
1000c276:	001e      	movs	r6, r3
1000c278:	3660      	adds	r6, #96	; 0x60
1000c27a:	1876      	adds	r6, r6, r1
1000c27c:	4655      	mov	r5, sl
1000c27e:	3568      	adds	r5, #104	; 0x68
1000c280:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c282:	4b2b      	ldr	r3, [pc, #172]	; (1000c330 <ble_slave_security_request_handler+0x1dc>)
1000c284:	4699      	mov	r9, r3
1000c286:	230f      	movs	r3, #15
1000c288:	4698      	mov	r8, r3
1000c28a:	47c8      	blx	r9
1000c28c:	4643      	mov	r3, r8
1000c28e:	4018      	ands	r0, r3
1000c290:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c292:	47c8      	blx	r9
1000c294:	4643      	mov	r3, r8
1000c296:	4018      	ands	r0, r3
1000c298:	74b0      	strb	r0, [r6, #18]
1000c29a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c29c:	42ae      	cmp	r6, r5
1000c29e:	d1f4      	bne.n	1000c28a <ble_slave_security_request_handler+0x136>
1000c2a0:	4656      	mov	r6, sl
1000c2a2:	3670      	adds	r6, #112	; 0x70
1000c2a4:	4a1c      	ldr	r2, [pc, #112]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c2a6:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c2a8:	4b21      	ldr	r3, [pc, #132]	; (1000c330 <ble_slave_security_request_handler+0x1dc>)
1000c2aa:	4699      	mov	r9, r3
1000c2ac:	230f      	movs	r3, #15
1000c2ae:	4698      	mov	r8, r3
1000c2b0:	47c8      	blx	r9
1000c2b2:	4643      	mov	r3, r8
1000c2b4:	4018      	ands	r0, r3
1000c2b6:	7028      	strb	r0, [r5, #0]
1000c2b8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c2ba:	42b5      	cmp	r5, r6
1000c2bc:	d1f8      	bne.n	1000c2b0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c2be:	4b1c      	ldr	r3, [pc, #112]	; (1000c330 <ble_slave_security_request_handler+0x1dc>)
1000c2c0:	4798      	blx	r3
1000c2c2:	017b      	lsls	r3, r7, #5
1000c2c4:	1bdb      	subs	r3, r3, r7
1000c2c6:	009b      	lsls	r3, r3, #2
1000c2c8:	4a13      	ldr	r2, [pc, #76]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c2ca:	18d3      	adds	r3, r2, r3
1000c2cc:	001a      	movs	r2, r3
1000c2ce:	3270      	adds	r2, #112	; 0x70
1000c2d0:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c2d2:	337a      	adds	r3, #122	; 0x7a
1000c2d4:	2210      	movs	r2, #16
1000c2d6:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c2d8:	017a      	lsls	r2, r7, #5
1000c2da:	1bd7      	subs	r7, r2, r7
1000c2dc:	00bf      	lsls	r7, r7, #2
1000c2de:	3760      	adds	r7, #96	; 0x60
1000c2e0:	4a0d      	ldr	r2, [pc, #52]	; (1000c318 <ble_slave_security_request_handler+0x1c4>)
1000c2e2:	18ba      	adds	r2, r7, r2
1000c2e4:	8820      	ldrh	r0, [r4, #0]
1000c2e6:	2300      	movs	r3, #0
1000c2e8:	a901      	add	r1, sp, #4
1000c2ea:	4c12      	ldr	r4, [pc, #72]	; (1000c334 <ble_slave_security_request_handler+0x1e0>)
1000c2ec:	47a0      	blx	r4
1000c2ee:	2800      	cmp	r0, #0
1000c2f0:	d00a      	beq.n	1000c308 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c2f2:	ab01      	add	r3, sp, #4
1000c2f4:	2200      	movs	r2, #0
1000c2f6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c2f8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c2fa:	4809      	ldr	r0, [pc, #36]	; (1000c320 <ble_slave_security_request_handler+0x1cc>)
1000c2fc:	4b09      	ldr	r3, [pc, #36]	; (1000c324 <ble_slave_security_request_handler+0x1d0>)
1000c2fe:	4798      	blx	r3
1000c300:	480d      	ldr	r0, [pc, #52]	; (1000c338 <ble_slave_security_request_handler+0x1e4>)
1000c302:	4b0a      	ldr	r3, [pc, #40]	; (1000c32c <ble_slave_security_request_handler+0x1d8>)
1000c304:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c306:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c308:	b004      	add	sp, #16
1000c30a:	bc1c      	pop	{r2, r3, r4}
1000c30c:	4690      	mov	r8, r2
1000c30e:	4699      	mov	r9, r3
1000c310:	46a2      	mov	sl, r4
1000c312:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c314:	100122bd 	.word	0x100122bd
1000c318:	1001ae88 	.word	0x1001ae88
1000c31c:	1000f5b9 	.word	0x1000f5b9
1000c320:	10017434 	.word	0x10017434
1000c324:	10012e11 	.word	0x10012e11
1000c328:	10018478 	.word	0x10018478
1000c32c:	10012cf1 	.word	0x10012cf1
1000c330:	10012e25 	.word	0x10012e25
1000c334:	1000f3cd 	.word	0x1000f3cd
1000c338:	10018490 	.word	0x10018490

1000c33c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c33e:	465f      	mov	r7, fp
1000c340:	4656      	mov	r6, sl
1000c342:	464d      	mov	r5, r9
1000c344:	4644      	mov	r4, r8
1000c346:	b4f0      	push	{r4, r5, r6, r7}
1000c348:	b085      	sub	sp, #20
1000c34a:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c34c:	8804      	ldrh	r4, [r0, #0]
1000c34e:	4a54      	ldr	r2, [pc, #336]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c350:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c352:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c354:	8910      	ldrh	r0, [r2, #8]
1000c356:	42a0      	cmp	r0, r4
1000c358:	d10d      	bne.n	1000c376 <ble_pair_request_handler+0x3a>
1000c35a:	0010      	movs	r0, r2
1000c35c:	305e      	adds	r0, #94	; 0x5e
1000c35e:	7800      	ldrb	r0, [r0, #0]
1000c360:	2802      	cmp	r0, #2
1000c362:	d108      	bne.n	1000c376 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c364:	014a      	lsls	r2, r1, #5
1000c366:	1a52      	subs	r2, r2, r1
1000c368:	0095      	lsls	r5, r2, #2
1000c36a:	4a4d      	ldr	r2, [pc, #308]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c36c:	1952      	adds	r2, r2, r5
1000c36e:	325e      	adds	r2, #94	; 0x5e
1000c370:	2103      	movs	r1, #3
1000c372:	7011      	strb	r1, [r2, #0]
			break;
1000c374:	e005      	b.n	1000c382 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c376:	3301      	adds	r3, #1
1000c378:	b2db      	uxtb	r3, r3
1000c37a:	3101      	adds	r1, #1
1000c37c:	327c      	adds	r2, #124	; 0x7c
1000c37e:	2b05      	cmp	r3, #5
1000c380:	d1e8      	bne.n	1000c354 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c382:	aa01      	add	r2, sp, #4
1000c384:	2100      	movs	r1, #0
1000c386:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c388:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c38a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c38c:	2003      	movs	r0, #3
1000c38e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c390:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c392:	001e      	movs	r6, r3
1000c394:	015a      	lsls	r2, r3, #5
1000c396:	1ad2      	subs	r2, r2, r3
1000c398:	0092      	lsls	r2, r2, #2
1000c39a:	4941      	ldr	r1, [pc, #260]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c39c:	5c52      	ldrb	r2, [r2, r1]
1000c39e:	2a02      	cmp	r2, #2
1000c3a0:	d104      	bne.n	1000c3ac <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c3a2:	aa01      	add	r2, sp, #4
1000c3a4:	2103      	movs	r1, #3
1000c3a6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c3a8:	71d1      	strb	r1, [r2, #7]
1000c3aa:	e003      	b.n	1000c3b4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c3ac:	aa01      	add	r2, sp, #4
1000c3ae:	2101      	movs	r1, #1
1000c3b0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c3b2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c3b4:	aa01      	add	r2, sp, #4
1000c3b6:	2110      	movs	r1, #16
1000c3b8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c3ba:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c3bc:	0172      	lsls	r2, r6, #5
1000c3be:	1b92      	subs	r2, r2, r6
1000c3c0:	0092      	lsls	r2, r2, #2
1000c3c2:	4937      	ldr	r1, [pc, #220]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c3c4:	188a      	adds	r2, r1, r2
1000c3c6:	7e12      	ldrb	r2, [r2, #24]
1000c3c8:	2a40      	cmp	r2, #64	; 0x40
1000c3ca:	d142      	bne.n	1000c452 <ble_pair_request_handler+0x116>
1000c3cc:	015f      	lsls	r7, r3, #5
1000c3ce:	1afb      	subs	r3, r7, r3
1000c3d0:	009b      	lsls	r3, r3, #2
1000c3d2:	469b      	mov	fp, r3
1000c3d4:	001c      	movs	r4, r3
1000c3d6:	3460      	adds	r4, #96	; 0x60
1000c3d8:	1864      	adds	r4, r4, r1
1000c3da:	465d      	mov	r5, fp
1000c3dc:	3568      	adds	r5, #104	; 0x68
1000c3de:	186d      	adds	r5, r5, r1
1000c3e0:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c3e2:	4b30      	ldr	r3, [pc, #192]	; (1000c4a4 <ble_pair_request_handler+0x168>)
1000c3e4:	469a      	mov	sl, r3
1000c3e6:	230f      	movs	r3, #15
1000c3e8:	4699      	mov	r9, r3
1000c3ea:	47d0      	blx	sl
1000c3ec:	464b      	mov	r3, r9
1000c3ee:	4018      	ands	r0, r3
1000c3f0:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c3f2:	47d0      	blx	sl
1000c3f4:	464b      	mov	r3, r9
1000c3f6:	4018      	ands	r0, r3
1000c3f8:	74b8      	strb	r0, [r7, #18]
1000c3fa:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c3fc:	42af      	cmp	r7, r5
1000c3fe:	d1f4      	bne.n	1000c3ea <ble_pair_request_handler+0xae>
1000c400:	465b      	mov	r3, fp
1000c402:	3370      	adds	r3, #112	; 0x70
1000c404:	4f26      	ldr	r7, [pc, #152]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c406:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c408:	4b26      	ldr	r3, [pc, #152]	; (1000c4a4 <ble_pair_request_handler+0x168>)
1000c40a:	469a      	mov	sl, r3
1000c40c:	230f      	movs	r3, #15
1000c40e:	4699      	mov	r9, r3
1000c410:	47d0      	blx	sl
1000c412:	464b      	mov	r3, r9
1000c414:	4018      	ands	r0, r3
1000c416:	7028      	strb	r0, [r5, #0]
1000c418:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c41a:	42bd      	cmp	r5, r7
1000c41c:	d1f8      	bne.n	1000c410 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c41e:	4822      	ldr	r0, [pc, #136]	; (1000c4a8 <ble_pair_request_handler+0x16c>)
1000c420:	4b22      	ldr	r3, [pc, #136]	; (1000c4ac <ble_pair_request_handler+0x170>)
1000c422:	4798      	blx	r3
1000c424:	4822      	ldr	r0, [pc, #136]	; (1000c4b0 <ble_pair_request_handler+0x174>)
1000c426:	4b23      	ldr	r3, [pc, #140]	; (1000c4b4 <ble_pair_request_handler+0x178>)
1000c428:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c42a:	4d22      	ldr	r5, [pc, #136]	; (1000c4b4 <ble_pair_request_handler+0x178>)
1000c42c:	7821      	ldrb	r1, [r4, #0]
1000c42e:	4822      	ldr	r0, [pc, #136]	; (1000c4b8 <ble_pair_request_handler+0x17c>)
1000c430:	47a8      	blx	r5
1000c432:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c434:	42bc      	cmp	r4, r7
1000c436:	d1f9      	bne.n	1000c42c <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c438:	4b1a      	ldr	r3, [pc, #104]	; (1000c4a4 <ble_pair_request_handler+0x168>)
1000c43a:	4798      	blx	r3
1000c43c:	0173      	lsls	r3, r6, #5
1000c43e:	1b9b      	subs	r3, r3, r6
1000c440:	009b      	lsls	r3, r3, #2
1000c442:	4a17      	ldr	r2, [pc, #92]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c444:	18d3      	adds	r3, r2, r3
1000c446:	001a      	movs	r2, r3
1000c448:	3270      	adds	r2, #112	; 0x70
1000c44a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c44c:	337a      	adds	r3, #122	; 0x7a
1000c44e:	2210      	movs	r2, #16
1000c450:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c452:	4815      	ldr	r0, [pc, #84]	; (1000c4a8 <ble_pair_request_handler+0x16c>)
1000c454:	4b15      	ldr	r3, [pc, #84]	; (1000c4ac <ble_pair_request_handler+0x170>)
1000c456:	4798      	blx	r3
1000c458:	4818      	ldr	r0, [pc, #96]	; (1000c4bc <ble_pair_request_handler+0x180>)
1000c45a:	4b16      	ldr	r3, [pc, #88]	; (1000c4b4 <ble_pair_request_handler+0x178>)
1000c45c:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c45e:	0173      	lsls	r3, r6, #5
1000c460:	1b9b      	subs	r3, r3, r6
1000c462:	009b      	lsls	r3, r3, #2
1000c464:	3360      	adds	r3, #96	; 0x60
1000c466:	4a0e      	ldr	r2, [pc, #56]	; (1000c4a0 <ble_pair_request_handler+0x164>)
1000c468:	189a      	adds	r2, r3, r2
1000c46a:	4643      	mov	r3, r8
1000c46c:	8818      	ldrh	r0, [r3, #0]
1000c46e:	2300      	movs	r3, #0
1000c470:	a901      	add	r1, sp, #4
1000c472:	4c13      	ldr	r4, [pc, #76]	; (1000c4c0 <ble_pair_request_handler+0x184>)
1000c474:	47a0      	blx	r4
1000c476:	2800      	cmp	r0, #0
1000c478:	d00a      	beq.n	1000c490 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c47a:	ab01      	add	r3, sp, #4
1000c47c:	2200      	movs	r2, #0
1000c47e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c480:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c482:	4809      	ldr	r0, [pc, #36]	; (1000c4a8 <ble_pair_request_handler+0x16c>)
1000c484:	4b09      	ldr	r3, [pc, #36]	; (1000c4ac <ble_pair_request_handler+0x170>)
1000c486:	4798      	blx	r3
1000c488:	480e      	ldr	r0, [pc, #56]	; (1000c4c4 <ble_pair_request_handler+0x188>)
1000c48a:	4b0a      	ldr	r3, [pc, #40]	; (1000c4b4 <ble_pair_request_handler+0x178>)
1000c48c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c48e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c490:	b005      	add	sp, #20
1000c492:	bc3c      	pop	{r2, r3, r4, r5}
1000c494:	4690      	mov	r8, r2
1000c496:	4699      	mov	r9, r3
1000c498:	46a2      	mov	sl, r4
1000c49a:	46ab      	mov	fp, r5
1000c49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c49e:	46c0      	nop			; (mov r8, r8)
1000c4a0:	1001ae88 	.word	0x1001ae88
1000c4a4:	10012e25 	.word	0x10012e25
1000c4a8:	10017434 	.word	0x10017434
1000c4ac:	10012e11 	.word	0x10012e11
1000c4b0:	100184bc 	.word	0x100184bc
1000c4b4:	10012cf1 	.word	0x10012cf1
1000c4b8:	100184cc 	.word	0x100184cc
1000c4bc:	100184d4 	.word	0x100184d4
1000c4c0:	1000f3cd 	.word	0x1000f3cd
1000c4c4:	100184f0 	.word	0x100184f0

1000c4c8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4ca:	b085      	sub	sp, #20
1000c4cc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c4ce:	2206      	movs	r2, #6
1000c4d0:	493d      	ldr	r1, [pc, #244]	; (1000c5c8 <ble_pair_key_request_handler+0x100>)
1000c4d2:	a802      	add	r0, sp, #8
1000c4d4:	4e3d      	ldr	r6, [pc, #244]	; (1000c5cc <ble_pair_key_request_handler+0x104>)
1000c4d6:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c4d8:	ac01      	add	r4, sp, #4
1000c4da:	2204      	movs	r2, #4
1000c4dc:	0029      	movs	r1, r5
1000c4de:	0020      	movs	r0, r4
1000c4e0:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c4e2:	78e3      	ldrb	r3, [r4, #3]
1000c4e4:	2b00      	cmp	r3, #0
1000c4e6:	d162      	bne.n	1000c5ae <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c4e8:	4839      	ldr	r0, [pc, #228]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c4ea:	4b3a      	ldr	r3, [pc, #232]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c4ec:	4798      	blx	r3
1000c4ee:	483a      	ldr	r0, [pc, #232]	; (1000c5d8 <ble_pair_key_request_handler+0x110>)
1000c4f0:	4b3a      	ldr	r3, [pc, #232]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c4f2:	4798      	blx	r3
1000c4f4:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c4f6:	4c3a      	ldr	r4, [pc, #232]	; (1000c5e0 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c4f8:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c4fa:	201e      	movs	r0, #30
1000c4fc:	47a0      	blx	r4
1000c4fe:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c500:	2b00      	cmp	r3, #0
1000c502:	d11a      	bne.n	1000c53a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c504:	4f32      	ldr	r7, [pc, #200]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c506:	0038      	movs	r0, r7
1000c508:	4e32      	ldr	r6, [pc, #200]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c50a:	47b0      	blx	r6
1000c50c:	4835      	ldr	r0, [pc, #212]	; (1000c5e4 <ble_pair_key_request_handler+0x11c>)
1000c50e:	4c33      	ldr	r4, [pc, #204]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c510:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c512:	0038      	movs	r0, r7
1000c514:	47b0      	blx	r6
1000c516:	4834      	ldr	r0, [pc, #208]	; (1000c5e8 <ble_pair_key_request_handler+0x120>)
1000c518:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c51a:	8828      	ldrh	r0, [r5, #0]
1000c51c:	2113      	movs	r1, #19
1000c51e:	4b33      	ldr	r3, [pc, #204]	; (1000c5ec <ble_pair_key_request_handler+0x124>)
1000c520:	4798      	blx	r3
1000c522:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c524:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c526:	2b00      	cmp	r3, #0
1000c528:	d04c      	beq.n	1000c5c4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c52a:	4829      	ldr	r0, [pc, #164]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c52c:	4b29      	ldr	r3, [pc, #164]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c52e:	4798      	blx	r3
1000c530:	482f      	ldr	r0, [pc, #188]	; (1000c5f0 <ble_pair_key_request_handler+0x128>)
1000c532:	4b2a      	ldr	r3, [pc, #168]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c534:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c536:	20e2      	movs	r0, #226	; 0xe2
1000c538:	e044      	b.n	1000c5c4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c53a:	001a      	movs	r2, r3
1000c53c:	3a30      	subs	r2, #48	; 0x30
1000c53e:	2a09      	cmp	r2, #9
1000c540:	d8db      	bhi.n	1000c4fa <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c542:	aa02      	add	r2, sp, #8
1000c544:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c546:	4038      	ands	r0, r7
1000c548:	4b2a      	ldr	r3, [pc, #168]	; (1000c5f4 <ble_pair_key_request_handler+0x12c>)
1000c54a:	4798      	blx	r3
1000c54c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c54e:	2e06      	cmp	r6, #6
1000c550:	d026      	beq.n	1000c5a0 <ble_pair_key_request_handler+0xd8>
1000c552:	e7d2      	b.n	1000c4fa <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c554:	481e      	ldr	r0, [pc, #120]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c556:	4b1f      	ldr	r3, [pc, #124]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c558:	4798      	blx	r3
1000c55a:	4827      	ldr	r0, [pc, #156]	; (1000c5f8 <ble_pair_key_request_handler+0x130>)
1000c55c:	4b1f      	ldr	r3, [pc, #124]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c55e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c560:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c562:	4e24      	ldr	r6, [pc, #144]	; (1000c5f4 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c564:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c566:	5ce0      	ldrb	r0, [r4, r3]
1000c568:	47b0      	blx	r6
1000c56a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c56c:	2c06      	cmp	r4, #6
1000c56e:	d1f9      	bne.n	1000c564 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c570:	ab01      	add	r3, sp, #4
1000c572:	7899      	ldrb	r1, [r3, #2]
1000c574:	8828      	ldrh	r0, [r5, #0]
1000c576:	aa02      	add	r2, sp, #8
1000c578:	4b20      	ldr	r3, [pc, #128]	; (1000c5fc <ble_pair_key_request_handler+0x134>)
1000c57a:	4798      	blx	r3
1000c57c:	2800      	cmp	r0, #0
1000c57e:	d021      	beq.n	1000c5c4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c580:	4813      	ldr	r0, [pc, #76]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c582:	4b14      	ldr	r3, [pc, #80]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c584:	4798      	blx	r3
1000c586:	481e      	ldr	r0, [pc, #120]	; (1000c600 <ble_pair_key_request_handler+0x138>)
1000c588:	4b14      	ldr	r3, [pc, #80]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c58a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c58c:	2000      	movs	r0, #0
1000c58e:	e019      	b.n	1000c5c4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c590:	480f      	ldr	r0, [pc, #60]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c592:	4b10      	ldr	r3, [pc, #64]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c594:	4798      	blx	r3
1000c596:	481b      	ldr	r0, [pc, #108]	; (1000c604 <ble_pair_key_request_handler+0x13c>)
1000c598:	4b10      	ldr	r3, [pc, #64]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c59a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c59c:	2000      	movs	r0, #0
1000c59e:	e011      	b.n	1000c5c4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c5a0:	480b      	ldr	r0, [pc, #44]	; (1000c5d0 <ble_pair_key_request_handler+0x108>)
1000c5a2:	4b0c      	ldr	r3, [pc, #48]	; (1000c5d4 <ble_pair_key_request_handler+0x10c>)
1000c5a4:	4798      	blx	r3
1000c5a6:	4818      	ldr	r0, [pc, #96]	; (1000c608 <ble_pair_key_request_handler+0x140>)
1000c5a8:	4b0c      	ldr	r3, [pc, #48]	; (1000c5dc <ble_pair_key_request_handler+0x114>)
1000c5aa:	4798      	blx	r3
1000c5ac:	e7d8      	b.n	1000c560 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c5ae:	ab01      	add	r3, sp, #4
1000c5b0:	885a      	ldrh	r2, [r3, #2]
1000c5b2:	2380      	movs	r3, #128	; 0x80
1000c5b4:	005b      	lsls	r3, r3, #1
1000c5b6:	429a      	cmp	r2, r3
1000c5b8:	d0cc      	beq.n	1000c554 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c5ba:	ab01      	add	r3, sp, #4
1000c5bc:	789b      	ldrb	r3, [r3, #2]
1000c5be:	2b01      	cmp	r3, #1
1000c5c0:	d0e6      	beq.n	1000c590 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c5c2:	2000      	movs	r0, #0
}
1000c5c4:	b005      	add	sp, #20
1000c5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5c8:	100180d8 	.word	0x100180d8
1000c5cc:	100122ab 	.word	0x100122ab
1000c5d0:	10017434 	.word	0x10017434
1000c5d4:	10012e11 	.word	0x10012e11
1000c5d8:	10018518 	.word	0x10018518
1000c5dc:	10012cf1 	.word	0x10012cf1
1000c5e0:	1000d129 	.word	0x1000d129
1000c5e4:	10018540 	.word	0x10018540
1000c5e8:	1001854c 	.word	0x1001854c
1000c5ec:	1000ea49 	.word	0x1000ea49
1000c5f0:	100183f8 	.word	0x100183f8
1000c5f4:	10012d25 	.word	0x10012d25
1000c5f8:	10018560 	.word	0x10018560
1000c5fc:	1000f4fd 	.word	0x1000f4fd
1000c600:	10018598 	.word	0x10018598
1000c604:	100185b0 	.word	0x100185b0
1000c608:	100185cc 	.word	0x100185cc

1000c60c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c60e:	465f      	mov	r7, fp
1000c610:	4656      	mov	r6, sl
1000c612:	464d      	mov	r5, r9
1000c614:	b4e0      	push	{r5, r6, r7}
1000c616:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c618:	8800      	ldrh	r0, [r0, #0]
1000c61a:	4b49      	ldr	r3, [pc, #292]	; (1000c740 <ble_encryption_request_handler+0x134>)
1000c61c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c61e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c620:	8919      	ldrh	r1, [r3, #8]
1000c622:	4281      	cmp	r1, r0
1000c624:	d137      	bne.n	1000c696 <ble_encryption_request_handler+0x8a>
1000c626:	0019      	movs	r1, r3
1000c628:	315e      	adds	r1, #94	; 0x5e
1000c62a:	7809      	ldrb	r1, [r1, #0]
1000c62c:	2901      	cmp	r1, #1
1000c62e:	d932      	bls.n	1000c696 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c630:	4f43      	ldr	r7, [pc, #268]	; (1000c740 <ble_encryption_request_handler+0x134>)
1000c632:	0153      	lsls	r3, r2, #5
1000c634:	1a9d      	subs	r5, r3, r2
1000c636:	00ad      	lsls	r5, r5, #2
1000c638:	197d      	adds	r5, r7, r5
1000c63a:	355e      	adds	r5, #94	; 0x5e
1000c63c:	2306      	movs	r3, #6
1000c63e:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000c640:	4840      	ldr	r0, [pc, #256]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c642:	4b41      	ldr	r3, [pc, #260]	; (1000c748 <ble_encryption_request_handler+0x13c>)
1000c644:	469a      	mov	sl, r3
1000c646:	4798      	blx	r3
1000c648:	8831      	ldrh	r1, [r6, #0]
1000c64a:	4840      	ldr	r0, [pc, #256]	; (1000c74c <ble_encryption_request_handler+0x140>)
1000c64c:	4b40      	ldr	r3, [pc, #256]	; (1000c750 <ble_encryption_request_handler+0x144>)
1000c64e:	4699      	mov	r9, r3
1000c650:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000c652:	483c      	ldr	r0, [pc, #240]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c654:	47d0      	blx	sl
1000c656:	0163      	lsls	r3, r4, #5
1000c658:	1b1b      	subs	r3, r3, r4
1000c65a:	009b      	lsls	r3, r3, #2
1000c65c:	18ff      	adds	r7, r7, r3
1000c65e:	2370      	movs	r3, #112	; 0x70
1000c660:	469b      	mov	fp, r3
1000c662:	44bb      	add	fp, r7
1000c664:	465b      	mov	r3, fp
1000c666:	8819      	ldrh	r1, [r3, #0]
1000c668:	483a      	ldr	r0, [pc, #232]	; (1000c754 <ble_encryption_request_handler+0x148>)
1000c66a:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000c66c:	4835      	ldr	r0, [pc, #212]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c66e:	47d0      	blx	sl
1000c670:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000c672:	4839      	ldr	r0, [pc, #228]	; (1000c758 <ble_encryption_request_handler+0x14c>)
1000c674:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000c676:	4833      	ldr	r0, [pc, #204]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c678:	47d0      	blx	sl
1000c67a:	8871      	ldrh	r1, [r6, #2]
1000c67c:	4837      	ldr	r0, [pc, #220]	; (1000c75c <ble_encryption_request_handler+0x150>)
1000c67e:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000c680:	4830      	ldr	r0, [pc, #192]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c682:	47d0      	blx	sl
1000c684:	0021      	movs	r1, r4
1000c686:	4836      	ldr	r0, [pc, #216]	; (1000c760 <ble_encryption_request_handler+0x154>)
1000c688:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c68a:	465b      	mov	r3, fp
1000c68c:	881a      	ldrh	r2, [r3, #0]
1000c68e:	8873      	ldrh	r3, [r6, #2]
1000c690:	429a      	cmp	r2, r3
1000c692:	d12a      	bne.n	1000c6ea <ble_encryption_request_handler+0xde>
1000c694:	e006      	b.n	1000c6a4 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c696:	3401      	adds	r4, #1
1000c698:	b2e4      	uxtb	r4, r4
1000c69a:	3201      	adds	r2, #1
1000c69c:	337c      	adds	r3, #124	; 0x7c
1000c69e:	2c05      	cmp	r4, #5
1000c6a0:	d1be      	bne.n	1000c620 <ble_encryption_request_handler+0x14>
1000c6a2:	e022      	b.n	1000c6ea <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c6a4:	0161      	lsls	r1, r4, #5
1000c6a6:	1b09      	subs	r1, r1, r4
1000c6a8:	0089      	lsls	r1, r1, #2
1000c6aa:	4b25      	ldr	r3, [pc, #148]	; (1000c740 <ble_encryption_request_handler+0x134>)
1000c6ac:	1859      	adds	r1, r3, r1
1000c6ae:	3172      	adds	r1, #114	; 0x72
1000c6b0:	1d30      	adds	r0, r6, #4
1000c6b2:	2208      	movs	r2, #8
1000c6b4:	4b2b      	ldr	r3, [pc, #172]	; (1000c764 <ble_encryption_request_handler+0x158>)
1000c6b6:	4798      	blx	r3
1000c6b8:	2800      	cmp	r0, #0
1000c6ba:	d116      	bne.n	1000c6ea <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000c6bc:	4821      	ldr	r0, [pc, #132]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c6be:	4b22      	ldr	r3, [pc, #136]	; (1000c748 <ble_encryption_request_handler+0x13c>)
1000c6c0:	4798      	blx	r3
1000c6c2:	4829      	ldr	r0, [pc, #164]	; (1000c768 <ble_encryption_request_handler+0x15c>)
1000c6c4:	4b22      	ldr	r3, [pc, #136]	; (1000c750 <ble_encryption_request_handler+0x144>)
1000c6c6:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c6c8:	0162      	lsls	r2, r4, #5
1000c6ca:	1b13      	subs	r3, r2, r4
1000c6cc:	009b      	lsls	r3, r3, #2
1000c6ce:	3360      	adds	r3, #96	; 0x60
1000c6d0:	491b      	ldr	r1, [pc, #108]	; (1000c740 <ble_encryption_request_handler+0x134>)
1000c6d2:	185b      	adds	r3, r3, r1
1000c6d4:	1b12      	subs	r2, r2, r4
1000c6d6:	0092      	lsls	r2, r2, #2
1000c6d8:	188a      	adds	r2, r1, r2
1000c6da:	7d11      	ldrb	r1, [r2, #20]
1000c6dc:	8830      	ldrh	r0, [r6, #0]
1000c6de:	2201      	movs	r2, #1
1000c6e0:	4c22      	ldr	r4, [pc, #136]	; (1000c76c <ble_encryption_request_handler+0x160>)
1000c6e2:	47a0      	blx	r4
1000c6e4:	1e04      	subs	r4, r0, #0
1000c6e6:	d01e      	beq.n	1000c726 <ble_encryption_request_handler+0x11a>
1000c6e8:	e015      	b.n	1000c716 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c6ea:	4f16      	ldr	r7, [pc, #88]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c6ec:	0038      	movs	r0, r7
1000c6ee:	4e16      	ldr	r6, [pc, #88]	; (1000c748 <ble_encryption_request_handler+0x13c>)
1000c6f0:	47b0      	blx	r6
1000c6f2:	481f      	ldr	r0, [pc, #124]	; (1000c770 <ble_encryption_request_handler+0x164>)
1000c6f4:	4d16      	ldr	r5, [pc, #88]	; (1000c750 <ble_encryption_request_handler+0x144>)
1000c6f6:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c6f8:	0038      	movs	r0, r7
1000c6fa:	47b0      	blx	r6
1000c6fc:	481d      	ldr	r0, [pc, #116]	; (1000c774 <ble_encryption_request_handler+0x168>)
1000c6fe:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c700:	0163      	lsls	r3, r4, #5
1000c702:	1b1c      	subs	r4, r3, r4
1000c704:	00a4      	lsls	r4, r4, #2
1000c706:	4b0e      	ldr	r3, [pc, #56]	; (1000c740 <ble_encryption_request_handler+0x134>)
1000c708:	191c      	adds	r4, r3, r4
1000c70a:	8920      	ldrh	r0, [r4, #8]
1000c70c:	2105      	movs	r1, #5
1000c70e:	4b1a      	ldr	r3, [pc, #104]	; (1000c778 <ble_encryption_request_handler+0x16c>)
1000c710:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c712:	24e2      	movs	r4, #226	; 0xe2
1000c714:	e00d      	b.n	1000c732 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c716:	480b      	ldr	r0, [pc, #44]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c718:	4b0b      	ldr	r3, [pc, #44]	; (1000c748 <ble_encryption_request_handler+0x13c>)
1000c71a:	4798      	blx	r3
1000c71c:	4817      	ldr	r0, [pc, #92]	; (1000c77c <ble_encryption_request_handler+0x170>)
1000c71e:	4b0c      	ldr	r3, [pc, #48]	; (1000c750 <ble_encryption_request_handler+0x144>)
1000c720:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c722:	2400      	movs	r4, #0
1000c724:	e005      	b.n	1000c732 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000c726:	4807      	ldr	r0, [pc, #28]	; (1000c744 <ble_encryption_request_handler+0x138>)
1000c728:	4b07      	ldr	r3, [pc, #28]	; (1000c748 <ble_encryption_request_handler+0x13c>)
1000c72a:	4798      	blx	r3
1000c72c:	4814      	ldr	r0, [pc, #80]	; (1000c780 <ble_encryption_request_handler+0x174>)
1000c72e:	4b08      	ldr	r3, [pc, #32]	; (1000c750 <ble_encryption_request_handler+0x144>)
1000c730:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000c732:	0020      	movs	r0, r4
1000c734:	bc1c      	pop	{r2, r3, r4}
1000c736:	4691      	mov	r9, r2
1000c738:	469a      	mov	sl, r3
1000c73a:	46a3      	mov	fp, r4
1000c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c73e:	46c0      	nop			; (mov r8, r8)
1000c740:	1001ae88 	.word	0x1001ae88
1000c744:	10017434 	.word	0x10017434
1000c748:	10012e11 	.word	0x10012e11
1000c74c:	100185e0 	.word	0x100185e0
1000c750:	10012cf1 	.word	0x10012cf1
1000c754:	1001860c 	.word	0x1001860c
1000c758:	10018620 	.word	0x10018620
1000c75c:	10018634 	.word	0x10018634
1000c760:	10018644 	.word	0x10018644
1000c764:	1001228d 	.word	0x1001228d
1000c768:	10018654 	.word	0x10018654
1000c76c:	1000f631 	.word	0x1000f631
1000c770:	10018668 	.word	0x10018668
1000c774:	100186a0 	.word	0x100186a0
1000c778:	1000ea49 	.word	0x1000ea49
1000c77c:	100186f8 	.word	0x100186f8
1000c780:	10018718 	.word	0x10018718

1000c784 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000c784:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000c786:	2a00      	cmp	r2, #0
1000c788:	d047      	beq.n	1000c81a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000c78a:	2906      	cmp	r1, #6
1000c78c:	d847      	bhi.n	1000c81e <ble_mgr_events_callback_handler+0x9a>
1000c78e:	0089      	lsls	r1, r1, #2
1000c790:	4b28      	ldr	r3, [pc, #160]	; (1000c834 <ble_mgr_events_callback_handler+0xb0>)
1000c792:	585b      	ldr	r3, [r3, r1]
1000c794:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000c796:	4b28      	ldr	r3, [pc, #160]	; (1000c838 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000c798:	2405      	movs	r4, #5
1000c79a:	e00a      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000c79c:	4b27      	ldr	r3, [pc, #156]	; (1000c83c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000c79e:	2401      	movs	r4, #1
			}
			break;
1000c7a0:	e007      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000c7a2:	4b27      	ldr	r3, [pc, #156]	; (1000c840 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000c7a4:	2405      	movs	r4, #5
			}
			break;
1000c7a6:	e004      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000c7a8:	4b26      	ldr	r3, [pc, #152]	; (1000c844 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000c7aa:	2401      	movs	r4, #1
			}
			break;
1000c7ac:	e001      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000c7ae:	4b26      	ldr	r3, [pc, #152]	; (1000c848 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000c7b0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000c7b2:	2800      	cmp	r0, #0
1000c7b4:	d116      	bne.n	1000c7e4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c7b6:	6819      	ldr	r1, [r3, #0]
1000c7b8:	2900      	cmp	r1, #0
1000c7ba:	d10b      	bne.n	1000c7d4 <ble_mgr_events_callback_handler+0x50>
1000c7bc:	e006      	b.n	1000c7cc <ble_mgr_events_callback_handler+0x48>
1000c7be:	001d      	movs	r5, r3
1000c7c0:	3304      	adds	r3, #4
1000c7c2:	1f18      	subs	r0, r3, #4
1000c7c4:	6800      	ldr	r0, [r0, #0]
1000c7c6:	2800      	cmp	r0, #0
1000c7c8:	d106      	bne.n	1000c7d8 <ble_mgr_events_callback_handler+0x54>
1000c7ca:	e000      	b.n	1000c7ce <ble_mgr_events_callback_handler+0x4a>
1000c7cc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000c7ce:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000c7d0:	2101      	movs	r1, #1
						break;
1000c7d2:	e02c      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
1000c7d4:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c7d6:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c7d8:	3101      	adds	r1, #1
1000c7da:	b2c9      	uxtb	r1, r1
1000c7dc:	42a1      	cmp	r1, r4
1000c7de:	d3ee      	bcc.n	1000c7be <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c7e0:	2100      	movs	r1, #0
1000c7e2:	e024      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
1000c7e4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000c7e6:	2801      	cmp	r0, #1
1000c7e8:	d121      	bne.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c7ea:	6819      	ldr	r1, [r3, #0]
1000c7ec:	428a      	cmp	r2, r1
1000c7ee:	d10c      	bne.n	1000c80a <ble_mgr_events_callback_handler+0x86>
1000c7f0:	e006      	b.n	1000c800 <ble_mgr_events_callback_handler+0x7c>
1000c7f2:	001d      	movs	r5, r3
1000c7f4:	3304      	adds	r3, #4
1000c7f6:	1f18      	subs	r0, r3, #4
1000c7f8:	6800      	ldr	r0, [r0, #0]
1000c7fa:	4282      	cmp	r2, r0
1000c7fc:	d107      	bne.n	1000c80e <ble_mgr_events_callback_handler+0x8a>
1000c7fe:	e000      	b.n	1000c802 <ble_mgr_events_callback_handler+0x7e>
1000c800:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000c802:	2300      	movs	r3, #0
1000c804:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000c806:	2101      	movs	r1, #1
						break;
1000c808:	e011      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
1000c80a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c80c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c80e:	3101      	adds	r1, #1
1000c810:	b2c9      	uxtb	r1, r1
1000c812:	42a1      	cmp	r1, r4
1000c814:	d3ed      	bcc.n	1000c7f2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c816:	2100      	movs	r1, #0
1000c818:	e009      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000c81a:	2100      	movs	r1, #0
1000c81c:	e007      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000c81e:	2100      	movs	r1, #0
1000c820:	e005      	b.n	1000c82e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000c822:	4b0a      	ldr	r3, [pc, #40]	; (1000c84c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000c824:	2405      	movs	r4, #5
1000c826:	e7c4      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000c828:	4b09      	ldr	r3, [pc, #36]	; (1000c850 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000c82a:	2401      	movs	r4, #1
1000c82c:	e7c1      	b.n	1000c7b2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000c82e:	0008      	movs	r0, r1
1000c830:	bd30      	pop	{r4, r5, pc}
1000c832:	46c0      	nop			; (mov r8, r8)
1000c834:	100180bc 	.word	0x100180bc
1000c838:	1001ae74 	.word	0x1001ae74
1000c83c:	1001ae70 	.word	0x1001ae70
1000c840:	1001b0f8 	.word	0x1001b0f8
1000c844:	1001b6ac 	.word	0x1001b6ac
1000c848:	1001b10c 	.word	0x1001b10c
1000c84c:	1001b120 	.word	0x1001b120
1000c850:	1001b168 	.word	0x1001b168

1000c854 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000c854:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c856:	465f      	mov	r7, fp
1000c858:	4656      	mov	r6, sl
1000c85a:	464d      	mov	r5, r9
1000c85c:	4644      	mov	r4, r8
1000c85e:	b4f0      	push	{r4, r5, r6, r7}
1000c860:	b091      	sub	sp, #68	; 0x44
1000c862:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000c864:	2400      	movs	r4, #0
1000c866:	4b7e      	ldr	r3, [pc, #504]	; (1000ca60 <ble_device_init+0x20c>)
1000c868:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c86a:	2207      	movs	r2, #7
1000c86c:	2100      	movs	r1, #0
1000c86e:	487d      	ldr	r0, [pc, #500]	; (1000ca64 <ble_device_init+0x210>)
1000c870:	4e7d      	ldr	r6, [pc, #500]	; (1000ca68 <ble_device_init+0x214>)
1000c872:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000c874:	2212      	movs	r2, #18
1000c876:	2100      	movs	r1, #0
1000c878:	487c      	ldr	r0, [pc, #496]	; (1000ca6c <ble_device_init+0x218>)
1000c87a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000c87c:	4a7c      	ldr	r2, [pc, #496]	; (1000ca70 <ble_device_init+0x21c>)
1000c87e:	2100      	movs	r1, #0
1000c880:	487c      	ldr	r0, [pc, #496]	; (1000ca74 <ble_device_init+0x220>)
1000c882:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000c884:	4b7c      	ldr	r3, [pc, #496]	; (1000ca78 <ble_device_init+0x224>)
1000c886:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000c888:	22cd      	movs	r2, #205	; 0xcd
1000c88a:	0092      	lsls	r2, r2, #2
1000c88c:	2100      	movs	r1, #0
1000c88e:	487b      	ldr	r0, [pc, #492]	; (1000ca7c <ble_device_init+0x228>)
1000c890:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000c892:	4b7b      	ldr	r3, [pc, #492]	; (1000ca80 <ble_device_init+0x22c>)
1000c894:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000c896:	2283      	movs	r2, #131	; 0x83
1000c898:	0092      	lsls	r2, r2, #2
1000c89a:	2100      	movs	r1, #0
1000c89c:	4879      	ldr	r0, [pc, #484]	; (1000ca84 <ble_device_init+0x230>)
1000c89e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000c8a0:	4b79      	ldr	r3, [pc, #484]	; (1000ca88 <ble_device_init+0x234>)
1000c8a2:	469b      	mov	fp, r3
1000c8a4:	2380      	movs	r3, #128	; 0x80
1000c8a6:	00db      	lsls	r3, r3, #3
1000c8a8:	469a      	mov	sl, r3
1000c8aa:	001a      	movs	r2, r3
1000c8ac:	2100      	movs	r1, #0
1000c8ae:	4658      	mov	r0, fp
1000c8b0:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000c8b2:	4b76      	ldr	r3, [pc, #472]	; (1000ca8c <ble_device_init+0x238>)
1000c8b4:	4699      	mov	r9, r3
1000c8b6:	2380      	movs	r3, #128	; 0x80
1000c8b8:	015b      	lsls	r3, r3, #5
1000c8ba:	4698      	mov	r8, r3
1000c8bc:	001a      	movs	r2, r3
1000c8be:	2100      	movs	r1, #0
1000c8c0:	4648      	mov	r0, r9
1000c8c2:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c8c4:	4f72      	ldr	r7, [pc, #456]	; (1000ca90 <ble_device_init+0x23c>)
1000c8c6:	221c      	movs	r2, #28
1000c8c8:	2100      	movs	r1, #0
1000c8ca:	0038      	movs	r0, r7
1000c8cc:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c8ce:	465b      	mov	r3, fp
1000c8d0:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c8d2:	4653      	mov	r3, sl
1000c8d4:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c8d6:	464b      	mov	r3, r9
1000c8d8:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c8da:	4643      	mov	r3, r8
1000c8dc:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c8de:	4b6d      	ldr	r3, [pc, #436]	; (1000ca94 <ble_device_init+0x240>)
1000c8e0:	601c      	str	r4, [r3, #0]
1000c8e2:	605c      	str	r4, [r3, #4]
1000c8e4:	609c      	str	r4, [r3, #8]
1000c8e6:	60dc      	str	r4, [r3, #12]
1000c8e8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c8ea:	4b6b      	ldr	r3, [pc, #428]	; (1000ca98 <ble_device_init+0x244>)
1000c8ec:	601c      	str	r4, [r3, #0]
1000c8ee:	605c      	str	r4, [r3, #4]
1000c8f0:	609c      	str	r4, [r3, #8]
1000c8f2:	60dc      	str	r4, [r3, #12]
1000c8f4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c8f6:	4b69      	ldr	r3, [pc, #420]	; (1000ca9c <ble_device_init+0x248>)
1000c8f8:	601c      	str	r4, [r3, #0]
1000c8fa:	605c      	str	r4, [r3, #4]
1000c8fc:	609c      	str	r4, [r3, #8]
1000c8fe:	60dc      	str	r4, [r3, #12]
1000c900:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c902:	4b67      	ldr	r3, [pc, #412]	; (1000caa0 <ble_device_init+0x24c>)
1000c904:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c906:	4b67      	ldr	r3, [pc, #412]	; (1000caa4 <ble_device_init+0x250>)
1000c908:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c90a:	4b67      	ldr	r3, [pc, #412]	; (1000caa8 <ble_device_init+0x254>)
1000c90c:	601c      	str	r4, [r3, #0]
1000c90e:	605c      	str	r4, [r3, #4]
1000c910:	609c      	str	r4, [r3, #8]
1000c912:	60dc      	str	r4, [r3, #12]
1000c914:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c916:	4b65      	ldr	r3, [pc, #404]	; (1000caac <ble_device_init+0x258>)
1000c918:	601c      	str	r4, [r3, #0]
1000c91a:	4c65      	ldr	r4, [pc, #404]	; (1000cab0 <ble_device_init+0x25c>)
1000c91c:	239b      	movs	r3, #155	; 0x9b
1000c91e:	009b      	lsls	r3, r3, #2
1000c920:	4698      	mov	r8, r3
1000c922:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c924:	4f50      	ldr	r7, [pc, #320]	; (1000ca68 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c926:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c928:	227c      	movs	r2, #124	; 0x7c
1000c92a:	2100      	movs	r1, #0
1000c92c:	0020      	movs	r0, r4
1000c92e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c930:	0023      	movs	r3, r4
1000c932:	335e      	adds	r3, #94	; 0x5e
1000c934:	2200      	movs	r2, #0
1000c936:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c938:	7626      	strb	r6, [r4, #24]
1000c93a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c93c:	45a0      	cmp	r8, r4
1000c93e:	d1f3      	bne.n	1000c928 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c940:	4b5c      	ldr	r3, [pc, #368]	; (1000cab4 <ble_device_init+0x260>)
1000c942:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c944:	4c52      	ldr	r4, [pc, #328]	; (1000ca90 <ble_device_init+0x23c>)
1000c946:	4b4a      	ldr	r3, [pc, #296]	; (1000ca70 <ble_device_init+0x21c>)
1000c948:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c94a:	4b4a      	ldr	r3, [pc, #296]	; (1000ca74 <ble_device_init+0x220>)
1000c94c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000c94e:	485a      	ldr	r0, [pc, #360]	; (1000cab8 <ble_device_init+0x264>)
1000c950:	4b5a      	ldr	r3, [pc, #360]	; (1000cabc <ble_device_init+0x268>)
1000c952:	4798      	blx	r3
1000c954:	485a      	ldr	r0, [pc, #360]	; (1000cac0 <ble_device_init+0x26c>)
1000c956:	4b5b      	ldr	r3, [pc, #364]	; (1000cac4 <ble_device_init+0x270>)
1000c958:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c95a:	0020      	movs	r0, r4
1000c95c:	4b5a      	ldr	r3, [pc, #360]	; (1000cac8 <ble_device_init+0x274>)
1000c95e:	4798      	blx	r3
1000c960:	2800      	cmp	r0, #0
1000c962:	d00b      	beq.n	1000c97c <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c964:	4e54      	ldr	r6, [pc, #336]	; (1000cab8 <ble_device_init+0x264>)
1000c966:	0030      	movs	r0, r6
1000c968:	4d54      	ldr	r5, [pc, #336]	; (1000cabc <ble_device_init+0x268>)
1000c96a:	47a8      	blx	r5
1000c96c:	4857      	ldr	r0, [pc, #348]	; (1000cacc <ble_device_init+0x278>)
1000c96e:	4c55      	ldr	r4, [pc, #340]	; (1000cac4 <ble_device_init+0x270>)
1000c970:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c972:	0030      	movs	r0, r6
1000c974:	47a8      	blx	r5
1000c976:	4856      	ldr	r0, [pc, #344]	; (1000cad0 <ble_device_init+0x27c>)
1000c978:	47a0      	blx	r4
1000c97a:	e7fe      	b.n	1000c97a <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c97c:	4a55      	ldr	r2, [pc, #340]	; (1000cad4 <ble_device_init+0x280>)
1000c97e:	2100      	movs	r1, #0
1000c980:	2000      	movs	r0, #0
1000c982:	4c55      	ldr	r4, [pc, #340]	; (1000cad8 <ble_device_init+0x284>)
1000c984:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c986:	4a55      	ldr	r2, [pc, #340]	; (1000cadc <ble_device_init+0x288>)
1000c988:	2102      	movs	r1, #2
1000c98a:	2000      	movs	r0, #0
1000c98c:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c98e:	2109      	movs	r1, #9
1000c990:	4853      	ldr	r0, [pc, #332]	; (1000cae0 <ble_device_init+0x28c>)
1000c992:	4b54      	ldr	r3, [pc, #336]	; (1000cae4 <ble_device_init+0x290>)
1000c994:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c996:	2800      	cmp	r0, #0
1000c998:	d005      	beq.n	1000c9a6 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000c99a:	4847      	ldr	r0, [pc, #284]	; (1000cab8 <ble_device_init+0x264>)
1000c99c:	4b47      	ldr	r3, [pc, #284]	; (1000cabc <ble_device_init+0x268>)
1000c99e:	4798      	blx	r3
1000c9a0:	4851      	ldr	r0, [pc, #324]	; (1000cae8 <ble_device_init+0x294>)
1000c9a2:	4b48      	ldr	r3, [pc, #288]	; (1000cac4 <ble_device_init+0x270>)
1000c9a4:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c9a6:	2207      	movs	r2, #7
1000c9a8:	4950      	ldr	r1, [pc, #320]	; (1000caec <ble_device_init+0x298>)
1000c9aa:	3108      	adds	r1, #8
1000c9ac:	a804      	add	r0, sp, #16
1000c9ae:	4b50      	ldr	r3, [pc, #320]	; (1000caf0 <ble_device_init+0x29c>)
1000c9b0:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c9b2:	2226      	movs	r2, #38	; 0x26
1000c9b4:	2100      	movs	r1, #0
1000c9b6:	a806      	add	r0, sp, #24
1000c9b8:	4b2b      	ldr	r3, [pc, #172]	; (1000ca68 <ble_device_init+0x214>)
1000c9ba:	4798      	blx	r3
	
	if (addr == NULL)
1000c9bc:	2d00      	cmp	r5, #0
1000c9be:	d10c      	bne.n	1000c9da <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c9c0:	a804      	add	r0, sp, #16
1000c9c2:	4b4c      	ldr	r3, [pc, #304]	; (1000caf4 <ble_device_init+0x2a0>)
1000c9c4:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c9c6:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c9c8:	2800      	cmp	r0, #0
1000c9ca:	d006      	beq.n	1000c9da <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c9cc:	483a      	ldr	r0, [pc, #232]	; (1000cab8 <ble_device_init+0x264>)
1000c9ce:	4b3b      	ldr	r3, [pc, #236]	; (1000cabc <ble_device_init+0x268>)
1000c9d0:	4798      	blx	r3
1000c9d2:	4849      	ldr	r0, [pc, #292]	; (1000caf8 <ble_device_init+0x2a4>)
1000c9d4:	4b3b      	ldr	r3, [pc, #236]	; (1000cac4 <ble_device_init+0x270>)
1000c9d6:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c9d8:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000c9da:	4837      	ldr	r0, [pc, #220]	; (1000cab8 <ble_device_init+0x264>)
1000c9dc:	4b37      	ldr	r3, [pc, #220]	; (1000cabc <ble_device_init+0x268>)
1000c9de:	4798      	blx	r3
1000c9e0:	792b      	ldrb	r3, [r5, #4]
1000c9e2:	796a      	ldrb	r2, [r5, #5]
1000c9e4:	79a9      	ldrb	r1, [r5, #6]
1000c9e6:	7828      	ldrb	r0, [r5, #0]
1000c9e8:	9003      	str	r0, [sp, #12]
1000c9ea:	7868      	ldrb	r0, [r5, #1]
1000c9ec:	9002      	str	r0, [sp, #8]
1000c9ee:	78a8      	ldrb	r0, [r5, #2]
1000c9f0:	9001      	str	r0, [sp, #4]
1000c9f2:	78e8      	ldrb	r0, [r5, #3]
1000c9f4:	9000      	str	r0, [sp, #0]
1000c9f6:	4841      	ldr	r0, [pc, #260]	; (1000cafc <ble_device_init+0x2a8>)
1000c9f8:	4c32      	ldr	r4, [pc, #200]	; (1000cac4 <ble_device_init+0x270>)
1000c9fa:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c9fc:	ac06      	add	r4, sp, #24
1000c9fe:	230a      	movs	r3, #10
1000ca00:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ca02:	4b3f      	ldr	r3, [pc, #252]	; (1000cb00 <ble_device_init+0x2ac>)
1000ca04:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000ca06:	2207      	movs	r2, #7
1000ca08:	0029      	movs	r1, r5
1000ca0a:	a807      	add	r0, sp, #28
1000ca0c:	4b38      	ldr	r3, [pc, #224]	; (1000caf0 <ble_device_init+0x29c>)
1000ca0e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000ca10:	2300      	movs	r3, #0
1000ca12:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000ca14:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000ca16:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000ca18:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000ca1a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ca1c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ca1e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000ca20:	2380      	movs	r3, #128	; 0x80
1000ca22:	009b      	lsls	r3, r3, #2
1000ca24:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000ca26:	0020      	movs	r0, r4
1000ca28:	4b36      	ldr	r3, [pc, #216]	; (1000cb04 <ble_device_init+0x2b0>)
1000ca2a:	4798      	blx	r3
1000ca2c:	2800      	cmp	r0, #0
1000ca2e:	d005      	beq.n	1000ca3c <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000ca30:	4821      	ldr	r0, [pc, #132]	; (1000cab8 <ble_device_init+0x264>)
1000ca32:	4b22      	ldr	r3, [pc, #136]	; (1000cabc <ble_device_init+0x268>)
1000ca34:	4798      	blx	r3
1000ca36:	4834      	ldr	r0, [pc, #208]	; (1000cb08 <ble_device_init+0x2b4>)
1000ca38:	4b22      	ldr	r3, [pc, #136]	; (1000cac4 <ble_device_init+0x270>)
1000ca3a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000ca3c:	0028      	movs	r0, r5
1000ca3e:	4b33      	ldr	r3, [pc, #204]	; (1000cb0c <ble_device_init+0x2b8>)
1000ca40:	4798      	blx	r3
1000ca42:	2800      	cmp	r0, #0
1000ca44:	d005      	beq.n	1000ca52 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000ca46:	481c      	ldr	r0, [pc, #112]	; (1000cab8 <ble_device_init+0x264>)
1000ca48:	4b1c      	ldr	r3, [pc, #112]	; (1000cabc <ble_device_init+0x268>)
1000ca4a:	4798      	blx	r3
1000ca4c:	4830      	ldr	r0, [pc, #192]	; (1000cb10 <ble_device_init+0x2bc>)
1000ca4e:	4b1d      	ldr	r3, [pc, #116]	; (1000cac4 <ble_device_init+0x270>)
1000ca50:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000ca52:	b011      	add	sp, #68	; 0x44
1000ca54:	bc3c      	pop	{r2, r3, r4, r5}
1000ca56:	4690      	mov	r8, r2
1000ca58:	4699      	mov	r9, r3
1000ca5a:	46a2      	mov	sl, r4
1000ca5c:	46ab      	mov	fp, r5
1000ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca60:	1001995c 	.word	0x1001995c
1000ca64:	10019964 	.word	0x10019964
1000ca68:	100122bd 	.word	0x100122bd
1000ca6c:	1001b134 	.word	0x1001b134
1000ca70:	000004e2 	.word	0x000004e2
1000ca74:	1001947c 	.word	0x1001947c
1000ca78:	10019960 	.word	0x10019960
1000ca7c:	1001b16c 	.word	0x1001b16c
1000ca80:	1001b164 	.word	0x1001b164
1000ca84:	1001b4a0 	.word	0x1001b4a0
1000ca88:	1001907c 	.word	0x1001907c
1000ca8c:	1001996c 	.word	0x1001996c
1000ca90:	1001b148 	.word	0x1001b148
1000ca94:	1001b10c 	.word	0x1001b10c
1000ca98:	1001b120 	.word	0x1001b120
1000ca9c:	1001ae74 	.word	0x1001ae74
1000caa0:	1001b168 	.word	0x1001b168
1000caa4:	1001ae70 	.word	0x1001ae70
1000caa8:	1001b0f8 	.word	0x1001b0f8
1000caac:	1001b6ac 	.word	0x1001b6ac
1000cab0:	1001ae88 	.word	0x1001ae88
1000cab4:	1001b0f4 	.word	0x1001b0f4
1000cab8:	10017434 	.word	0x10017434
1000cabc:	10012e11 	.word	0x10012e11
1000cac0:	10018734 	.word	0x10018734
1000cac4:	10012cf1 	.word	0x10012cf1
1000cac8:	1000e655 	.word	0x1000e655
1000cacc:	10018758 	.word	0x10018758
1000cad0:	10018784 	.word	0x10018784
1000cad4:	10018b30 	.word	0x10018b30
1000cad8:	1000c785 	.word	0x1000c785
1000cadc:	100180e8 	.word	0x100180e8
1000cae0:	100187cc 	.word	0x100187cc
1000cae4:	1000e56d 	.word	0x1000e56d
1000cae8:	100187d8 	.word	0x100187d8
1000caec:	100180d8 	.word	0x100180d8
1000caf0:	100122ab 	.word	0x100122ab
1000caf4:	1000e5a1 	.word	0x1000e5a1
1000caf8:	100187f0 	.word	0x100187f0
1000cafc:	1001881c 	.word	0x1001881c
1000cb00:	00003a98 	.word	0x00003a98
1000cb04:	1000e5c5 	.word	0x1000e5c5
1000cb08:	1001886c 	.word	0x1001886c
1000cb0c:	1000e809 	.word	0x1000e809
1000cb10:	100188a8 	.word	0x100188a8

1000cb14 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cb14:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cb16:	2200      	movs	r2, #0
1000cb18:	2100      	movs	r1, #0
1000cb1a:	4b0a      	ldr	r3, [pc, #40]	; (1000cb44 <ble_send_slave_sec_request+0x30>)
1000cb1c:	4798      	blx	r3
1000cb1e:	1e04      	subs	r4, r0, #0
1000cb20:	d106      	bne.n	1000cb30 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000cb22:	4809      	ldr	r0, [pc, #36]	; (1000cb48 <ble_send_slave_sec_request+0x34>)
1000cb24:	4b09      	ldr	r3, [pc, #36]	; (1000cb4c <ble_send_slave_sec_request+0x38>)
1000cb26:	4798      	blx	r3
1000cb28:	4809      	ldr	r0, [pc, #36]	; (1000cb50 <ble_send_slave_sec_request+0x3c>)
1000cb2a:	4b0a      	ldr	r3, [pc, #40]	; (1000cb54 <ble_send_slave_sec_request+0x40>)
1000cb2c:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000cb2e:	e006      	b.n	1000cb3e <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000cb30:	4805      	ldr	r0, [pc, #20]	; (1000cb48 <ble_send_slave_sec_request+0x34>)
1000cb32:	4b06      	ldr	r3, [pc, #24]	; (1000cb4c <ble_send_slave_sec_request+0x38>)
1000cb34:	4798      	blx	r3
1000cb36:	4808      	ldr	r0, [pc, #32]	; (1000cb58 <ble_send_slave_sec_request+0x44>)
1000cb38:	4b06      	ldr	r3, [pc, #24]	; (1000cb54 <ble_send_slave_sec_request+0x40>)
1000cb3a:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cb3c:	24e2      	movs	r4, #226	; 0xe2
}
1000cb3e:	0020      	movs	r0, r4
1000cb40:	bd10      	pop	{r4, pc}
1000cb42:	46c0      	nop			; (mov r8, r8)
1000cb44:	1000f579 	.word	0x1000f579
1000cb48:	10017434 	.word	0x10017434
1000cb4c:	10012e11 	.word	0x10012e11
1000cb50:	100188f8 	.word	0x100188f8
1000cb54:	10012cf1 	.word	0x10012cf1
1000cb58:	1001891c 	.word	0x1001891c

1000cb5c <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb5e:	465f      	mov	r7, fp
1000cb60:	464e      	mov	r6, r9
1000cb62:	4645      	mov	r5, r8
1000cb64:	b4e0      	push	{r5, r6, r7}
1000cb66:	b09a      	sub	sp, #104	; 0x68
1000cb68:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000cb6a:	7a86      	ldrb	r6, [r0, #10]
1000cb6c:	2e00      	cmp	r6, #0
1000cb6e:	d000      	beq.n	1000cb72 <ble_connected_state_handler+0x16>
1000cb70:	e0cc      	b.n	1000cd0c <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000cb72:	4878      	ldr	r0, [pc, #480]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000cb74:	4f78      	ldr	r7, [pc, #480]	; (1000cd58 <ble_connected_state_handler+0x1fc>)
1000cb76:	47b8      	blx	r7
1000cb78:	792b      	ldrb	r3, [r5, #4]
1000cb7a:	796a      	ldrb	r2, [r5, #5]
1000cb7c:	79a9      	ldrb	r1, [r5, #6]
1000cb7e:	7868      	ldrb	r0, [r5, #1]
1000cb80:	9002      	str	r0, [sp, #8]
1000cb82:	78a8      	ldrb	r0, [r5, #2]
1000cb84:	9001      	str	r0, [sp, #4]
1000cb86:	78e8      	ldrb	r0, [r5, #3]
1000cb88:	9000      	str	r0, [sp, #0]
1000cb8a:	4874      	ldr	r0, [pc, #464]	; (1000cd5c <ble_connected_state_handler+0x200>)
1000cb8c:	4c74      	ldr	r4, [pc, #464]	; (1000cd60 <ble_connected_state_handler+0x204>)
1000cb8e:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000cb90:	4870      	ldr	r0, [pc, #448]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000cb92:	47b8      	blx	r7
1000cb94:	8929      	ldrh	r1, [r5, #8]
1000cb96:	4873      	ldr	r0, [pc, #460]	; (1000cd64 <ble_connected_state_handler+0x208>)
1000cb98:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000cb9a:	2212      	movs	r2, #18
1000cb9c:	0029      	movs	r1, r5
1000cb9e:	4872      	ldr	r0, [pc, #456]	; (1000cd68 <ble_connected_state_handler+0x20c>)
1000cba0:	4b72      	ldr	r3, [pc, #456]	; (1000cd6c <ble_connected_state_handler+0x210>)
1000cba2:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cba4:	9504      	str	r5, [sp, #16]
1000cba6:	2207      	movs	r2, #7
1000cba8:	0029      	movs	r1, r5
1000cbaa:	4871      	ldr	r0, [pc, #452]	; (1000cd70 <ble_connected_state_handler+0x214>)
1000cbac:	4b71      	ldr	r3, [pc, #452]	; (1000cd74 <ble_connected_state_handler+0x218>)
1000cbae:	4798      	blx	r3
1000cbb0:	2800      	cmp	r0, #0
1000cbb2:	d100      	bne.n	1000cbb6 <ble_connected_state_handler+0x5a>
1000cbb4:	e0b3      	b.n	1000cd1e <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000cbb6:	782b      	ldrb	r3, [r5, #0]
1000cbb8:	2b02      	cmp	r3, #2
1000cbba:	d000      	beq.n	1000cbbe <ble_connected_state_handler+0x62>
1000cbbc:	e0af      	b.n	1000cd1e <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000cbbe:	2250      	movs	r2, #80	; 0x50
1000cbc0:	2100      	movs	r1, #0
1000cbc2:	a806      	add	r0, sp, #24
1000cbc4:	4b6c      	ldr	r3, [pc, #432]	; (1000cd78 <ble_connected_state_handler+0x21c>)
1000cbc6:	4798      	blx	r3
1000cbc8:	4f6c      	ldr	r7, [pc, #432]	; (1000cd7c <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000cbca:	2300      	movs	r3, #0
1000cbcc:	e00b      	b.n	1000cbe6 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000cbce:	1c59      	adds	r1, r3, #1
1000cbd0:	7814      	ldrb	r4, [r2, #0]
1000cbd2:	a806      	add	r0, sp, #24
1000cbd4:	54c4      	strb	r4, [r0, r3]
1000cbd6:	3201      	adds	r2, #1
1000cbd8:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000cbda:	42b3      	cmp	r3, r6
1000cbdc:	d1f7      	bne.n	1000cbce <ble_connected_state_handler+0x72>
1000cbde:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000cbe0:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000cbe2:	2b50      	cmp	r3, #80	; 0x50
1000cbe4:	d004      	beq.n	1000cbf0 <ble_connected_state_handler+0x94>
1000cbe6:	001e      	movs	r6, r3
1000cbe8:	3610      	adds	r6, #16
1000cbea:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cbec:	003a      	movs	r2, r7
1000cbee:	e7ee      	b.n	1000cbce <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000cbf0:	aa06      	add	r2, sp, #24
1000cbf2:	0029      	movs	r1, r5
1000cbf4:	2005      	movs	r0, #5
1000cbf6:	4b62      	ldr	r3, [pc, #392]	; (1000cd80 <ble_connected_state_handler+0x224>)
1000cbf8:	4798      	blx	r3
1000cbfa:	1e06      	subs	r6, r0, #0
1000cbfc:	d106      	bne.n	1000cc0c <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000cbfe:	4855      	ldr	r0, [pc, #340]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000cc00:	4b55      	ldr	r3, [pc, #340]	; (1000cd58 <ble_connected_state_handler+0x1fc>)
1000cc02:	4798      	blx	r3
1000cc04:	485f      	ldr	r0, [pc, #380]	; (1000cd84 <ble_connected_state_handler+0x228>)
1000cc06:	4b56      	ldr	r3, [pc, #344]	; (1000cd60 <ble_connected_state_handler+0x204>)
1000cc08:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000cc0a:	e09c      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000cc0c:	4851      	ldr	r0, [pc, #324]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000cc0e:	4b52      	ldr	r3, [pc, #328]	; (1000cd58 <ble_connected_state_handler+0x1fc>)
1000cc10:	4798      	blx	r3
1000cc12:	485d      	ldr	r0, [pc, #372]	; (1000cd88 <ble_connected_state_handler+0x22c>)
1000cc14:	4b52      	ldr	r3, [pc, #328]	; (1000cd60 <ble_connected_state_handler+0x204>)
1000cc16:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000cc18:	26e2      	movs	r6, #226	; 0xe2
1000cc1a:	e094      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
1000cc1c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cc1e:	9405      	str	r4, [sp, #20]
1000cc20:	2207      	movs	r2, #7
1000cc22:	9904      	ldr	r1, [sp, #16]
1000cc24:	4648      	mov	r0, r9
1000cc26:	47d8      	blx	fp
1000cc28:	2800      	cmp	r0, #0
1000cc2a:	d109      	bne.n	1000cc40 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cc2c:	9a05      	ldr	r2, [sp, #20]
1000cc2e:	0153      	lsls	r3, r2, #5
1000cc30:	1a9b      	subs	r3, r3, r2
1000cc32:	009a      	lsls	r2, r3, #2
1000cc34:	4b55      	ldr	r3, [pc, #340]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000cc36:	189b      	adds	r3, r3, r2
1000cc38:	335e      	adds	r3, #94	; 0x5e
1000cc3a:	2202      	movs	r2, #2
1000cc3c:	701a      	strb	r2, [r3, #0]
1000cc3e:	e02b      	b.n	1000cc98 <ble_connected_state_handler+0x13c>
1000cc40:	3401      	adds	r4, #1
1000cc42:	237c      	movs	r3, #124	; 0x7c
1000cc44:	469c      	mov	ip, r3
1000cc46:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc48:	2c05      	cmp	r4, #5
1000cc4a:	d1e7      	bne.n	1000cc1c <ble_connected_state_handler+0xc0>
1000cc4c:	e072      	b.n	1000cd34 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cc4e:	001c      	movs	r4, r3
1000cc50:	7811      	ldrb	r1, [r2, #0]
1000cc52:	2900      	cmp	r1, #0
1000cc54:	d11a      	bne.n	1000cc8c <ble_connected_state_handler+0x130>
1000cc56:	e001      	b.n	1000cc5c <ble_connected_state_handler+0x100>
1000cc58:	2400      	movs	r4, #0
1000cc5a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000cc5c:	0163      	lsls	r3, r4, #5
1000cc5e:	4699      	mov	r9, r3
1000cc60:	1b18      	subs	r0, r3, r4
1000cc62:	0080      	lsls	r0, r0, #2
1000cc64:	4b49      	ldr	r3, [pc, #292]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000cc66:	4698      	mov	r8, r3
1000cc68:	4440      	add	r0, r8
1000cc6a:	2212      	movs	r2, #18
1000cc6c:	0029      	movs	r1, r5
1000cc6e:	4b3f      	ldr	r3, [pc, #252]	; (1000cd6c <ble_connected_state_handler+0x210>)
1000cc70:	4798      	blx	r3
						ble_device_count++;
1000cc72:	4a47      	ldr	r2, [pc, #284]	; (1000cd90 <ble_connected_state_handler+0x234>)
1000cc74:	7813      	ldrb	r3, [r2, #0]
1000cc76:	3301      	adds	r3, #1
1000cc78:	b2db      	uxtb	r3, r3
1000cc7a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cc7c:	464b      	mov	r3, r9
1000cc7e:	1b1b      	subs	r3, r3, r4
1000cc80:	009b      	lsls	r3, r3, #2
1000cc82:	4443      	add	r3, r8
1000cc84:	335e      	adds	r3, #94	; 0x5e
1000cc86:	2202      	movs	r2, #2
1000cc88:	701a      	strb	r2, [r3, #0]
						break;
1000cc8a:	e005      	b.n	1000cc98 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc8c:	1c79      	adds	r1, r7, #1
1000cc8e:	b2cf      	uxtb	r7, r1
1000cc90:	3301      	adds	r3, #1
1000cc92:	327c      	adds	r2, #124	; 0x7c
1000cc94:	2f05      	cmp	r7, #5
1000cc96:	d1da      	bne.n	1000cc4e <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cc98:	2207      	movs	r2, #7
1000cc9a:	0029      	movs	r1, r5
1000cc9c:	4834      	ldr	r0, [pc, #208]	; (1000cd70 <ble_connected_state_handler+0x214>)
1000cc9e:	4b35      	ldr	r3, [pc, #212]	; (1000cd74 <ble_connected_state_handler+0x218>)
1000cca0:	4798      	blx	r3
1000cca2:	2800      	cmp	r0, #0
1000cca4:	d10c      	bne.n	1000ccc0 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000cca6:	017b      	lsls	r3, r7, #5
1000cca8:	1bdb      	subs	r3, r3, r7
1000ccaa:	009b      	lsls	r3, r3, #2
1000ccac:	4a37      	ldr	r2, [pc, #220]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000ccae:	18d3      	adds	r3, r2, r3
1000ccb0:	2205      	movs	r2, #5
1000ccb2:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ccb4:	3202      	adds	r2, #2
1000ccb6:	2100      	movs	r1, #0
1000ccb8:	482d      	ldr	r0, [pc, #180]	; (1000cd70 <ble_connected_state_handler+0x214>)
1000ccba:	4b2f      	ldr	r3, [pc, #188]	; (1000cd78 <ble_connected_state_handler+0x21c>)
1000ccbc:	4798      	blx	r3
1000ccbe:	e042      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ccc0:	4b32      	ldr	r3, [pc, #200]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000ccc2:	4698      	mov	r8, r3
1000ccc4:	017c      	lsls	r4, r7, #5
1000ccc6:	1be3      	subs	r3, r4, r7
1000ccc8:	009b      	lsls	r3, r3, #2
1000ccca:	4443      	add	r3, r8
1000cccc:	220a      	movs	r2, #10
1000ccce:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ccd0:	3a03      	subs	r2, #3
1000ccd2:	2100      	movs	r1, #0
1000ccd4:	4826      	ldr	r0, [pc, #152]	; (1000cd70 <ble_connected_state_handler+0x214>)
1000ccd6:	4b28      	ldr	r3, [pc, #160]	; (1000cd78 <ble_connected_state_handler+0x21c>)
1000ccd8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ccda:	1be4      	subs	r4, r4, r7
1000ccdc:	00a4      	lsls	r4, r4, #2
1000ccde:	4444      	add	r4, r8
1000cce0:	7ca3      	ldrb	r3, [r4, #18]
1000cce2:	2b0a      	cmp	r3, #10
1000cce4:	d12f      	bne.n	1000cd46 <ble_connected_state_handler+0x1ea>
1000cce6:	e00d      	b.n	1000cd04 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000cce8:	481a      	ldr	r0, [pc, #104]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000ccea:	4b1b      	ldr	r3, [pc, #108]	; (1000cd58 <ble_connected_state_handler+0x1fc>)
1000ccec:	4798      	blx	r3
1000ccee:	4b28      	ldr	r3, [pc, #160]	; (1000cd90 <ble_connected_state_handler+0x234>)
1000ccf0:	7819      	ldrb	r1, [r3, #0]
1000ccf2:	b2c9      	uxtb	r1, r1
1000ccf4:	4827      	ldr	r0, [pc, #156]	; (1000cd94 <ble_connected_state_handler+0x238>)
1000ccf6:	4b1a      	ldr	r3, [pc, #104]	; (1000cd60 <ble_connected_state_handler+0x204>)
1000ccf8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000ccfa:	8928      	ldrh	r0, [r5, #8]
1000ccfc:	2113      	movs	r1, #19
1000ccfe:	4b26      	ldr	r3, [pc, #152]	; (1000cd98 <ble_connected_state_handler+0x23c>)
1000cd00:	4798      	blx	r3
1000cd02:	e020      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000cd04:	8928      	ldrh	r0, [r5, #8]
1000cd06:	4b25      	ldr	r3, [pc, #148]	; (1000cd9c <ble_connected_state_handler+0x240>)
1000cd08:	4798      	blx	r3
1000cd0a:	e01c      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000cd0c:	4811      	ldr	r0, [pc, #68]	; (1000cd54 <ble_connected_state_handler+0x1f8>)
1000cd0e:	4b12      	ldr	r3, [pc, #72]	; (1000cd58 <ble_connected_state_handler+0x1fc>)
1000cd10:	4798      	blx	r3
1000cd12:	7aa9      	ldrb	r1, [r5, #10]
1000cd14:	4822      	ldr	r0, [pc, #136]	; (1000cda0 <ble_connected_state_handler+0x244>)
1000cd16:	4b12      	ldr	r3, [pc, #72]	; (1000cd60 <ble_connected_state_handler+0x204>)
1000cd18:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000cd1a:	2600      	movs	r6, #0
1000cd1c:	e013      	b.n	1000cd46 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000cd1e:	4b1c      	ldr	r3, [pc, #112]	; (1000cd90 <ble_connected_state_handler+0x234>)
1000cd20:	781b      	ldrb	r3, [r3, #0]
1000cd22:	b2db      	uxtb	r3, r3
1000cd24:	2b04      	cmp	r3, #4
1000cd26:	d8df      	bhi.n	1000cce8 <ble_connected_state_handler+0x18c>
1000cd28:	4b18      	ldr	r3, [pc, #96]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000cd2a:	4699      	mov	r9, r3
1000cd2c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cd2e:	4b11      	ldr	r3, [pc, #68]	; (1000cd74 <ble_connected_state_handler+0x218>)
1000cd30:	469b      	mov	fp, r3
1000cd32:	e773      	b.n	1000cc1c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cd34:	235e      	movs	r3, #94	; 0x5e
1000cd36:	4a15      	ldr	r2, [pc, #84]	; (1000cd8c <ble_connected_state_handler+0x230>)
1000cd38:	5cd3      	ldrb	r3, [r2, r3]
1000cd3a:	2b00      	cmp	r3, #0
1000cd3c:	d08c      	beq.n	1000cc58 <ble_connected_state_handler+0xfc>
1000cd3e:	4a19      	ldr	r2, [pc, #100]	; (1000cda4 <ble_connected_state_handler+0x248>)
1000cd40:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cd42:	2701      	movs	r7, #1
1000cd44:	e783      	b.n	1000cc4e <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000cd46:	0030      	movs	r0, r6
1000cd48:	b01a      	add	sp, #104	; 0x68
1000cd4a:	bc1c      	pop	{r2, r3, r4}
1000cd4c:	4690      	mov	r8, r2
1000cd4e:	4699      	mov	r9, r3
1000cd50:	46a3      	mov	fp, r4
1000cd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd54:	10017434 	.word	0x10017434
1000cd58:	10012e11 	.word	0x10012e11
1000cd5c:	1001893c 	.word	0x1001893c
1000cd60:	10012cf1 	.word	0x10012cf1
1000cd64:	10018980 	.word	0x10018980
1000cd68:	1001b134 	.word	0x1001b134
1000cd6c:	100122ab 	.word	0x100122ab
1000cd70:	10019964 	.word	0x10019964
1000cd74:	1001228d 	.word	0x1001228d
1000cd78:	100122bd 	.word	0x100122bd
1000cd7c:	1001aece 	.word	0x1001aece
1000cd80:	1000ea75 	.word	0x1000ea75
1000cd84:	10018998 	.word	0x10018998
1000cd88:	100189bc 	.word	0x100189bc
1000cd8c:	1001ae88 	.word	0x1001ae88
1000cd90:	1001b0f4 	.word	0x1001b0f4
1000cd94:	100189e0 	.word	0x100189e0
1000cd98:	1000ea49 	.word	0x1000ea49
1000cd9c:	1000cb15 	.word	0x1000cb15
1000cda0:	10018a1c 	.word	0x10018a1c
1000cda4:	1001af62 	.word	0x1001af62

1000cda8 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdaa:	4647      	mov	r7, r8
1000cdac:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000cdae:	7803      	ldrb	r3, [r0, #0]
1000cdb0:	2b00      	cmp	r3, #0
1000cdb2:	d152      	bne.n	1000ce5a <ble_resolv_rand_addr_handler+0xb2>
1000cdb4:	4d3e      	ldr	r5, [pc, #248]	; (1000ceb0 <ble_resolv_rand_addr_handler+0x108>)
1000cdb6:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000cdb8:	1c46      	adds	r6, r0, #1
1000cdba:	4f3e      	ldr	r7, [pc, #248]	; (1000ceb4 <ble_resolv_rand_addr_handler+0x10c>)
1000cdbc:	2210      	movs	r2, #16
1000cdbe:	0029      	movs	r1, r5
1000cdc0:	0030      	movs	r0, r6
1000cdc2:	47b8      	blx	r7
1000cdc4:	2800      	cmp	r0, #0
1000cdc6:	d031      	beq.n	1000ce2c <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdc8:	3401      	adds	r4, #1
1000cdca:	b2e4      	uxtb	r4, r4
1000cdcc:	357c      	adds	r5, #124	; 0x7c
1000cdce:	2c05      	cmp	r4, #5
1000cdd0:	d1f4      	bne.n	1000cdbc <ble_resolv_rand_addr_handler+0x14>
1000cdd2:	e042      	b.n	1000ce5a <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cdd4:	001d      	movs	r5, r3
1000cdd6:	7811      	ldrb	r1, [r2, #0]
1000cdd8:	2900      	cmp	r1, #0
1000cdda:	d11b      	bne.n	1000ce14 <ble_resolv_rand_addr_handler+0x6c>
1000cddc:	e001      	b.n	1000cde2 <ble_resolv_rand_addr_handler+0x3a>
1000cdde:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cde0:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000cde2:	4b35      	ldr	r3, [pc, #212]	; (1000ceb8 <ble_resolv_rand_addr_handler+0x110>)
1000cde4:	4698      	mov	r8, r3
1000cde6:	016e      	lsls	r6, r5, #5
1000cde8:	1b77      	subs	r7, r6, r5
1000cdea:	00bf      	lsls	r7, r7, #2
1000cdec:	4447      	add	r7, r8
1000cdee:	2212      	movs	r2, #18
1000cdf0:	4932      	ldr	r1, [pc, #200]	; (1000cebc <ble_resolv_rand_addr_handler+0x114>)
1000cdf2:	0038      	movs	r0, r7
1000cdf4:	4b32      	ldr	r3, [pc, #200]	; (1000cec0 <ble_resolv_rand_addr_handler+0x118>)
1000cdf6:	4798      	blx	r3
				ble_device_count++;
1000cdf8:	4a32      	ldr	r2, [pc, #200]	; (1000cec4 <ble_resolv_rand_addr_handler+0x11c>)
1000cdfa:	7813      	ldrb	r3, [r2, #0]
1000cdfc:	3301      	adds	r3, #1
1000cdfe:	b2db      	uxtb	r3, r3
1000ce00:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ce02:	375e      	adds	r7, #94	; 0x5e
1000ce04:	2302      	movs	r3, #2
1000ce06:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ce08:	1b75      	subs	r5, r6, r5
1000ce0a:	00ad      	lsls	r5, r5, #2
1000ce0c:	4445      	add	r5, r8
1000ce0e:	3308      	adds	r3, #8
1000ce10:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000ce12:	e031      	b.n	1000ce78 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ce14:	3401      	adds	r4, #1
1000ce16:	b2e4      	uxtb	r4, r4
1000ce18:	3301      	adds	r3, #1
1000ce1a:	327c      	adds	r2, #124	; 0x7c
1000ce1c:	2c05      	cmp	r4, #5
1000ce1e:	d1d9      	bne.n	1000cdd4 <ble_resolv_rand_addr_handler+0x2c>
1000ce20:	e03a      	b.n	1000ce98 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ce22:	4b26      	ldr	r3, [pc, #152]	; (1000cebc <ble_resolv_rand_addr_handler+0x114>)
1000ce24:	8918      	ldrh	r0, [r3, #8]
1000ce26:	4b28      	ldr	r3, [pc, #160]	; (1000cec8 <ble_resolv_rand_addr_handler+0x120>)
1000ce28:	4798      	blx	r3
1000ce2a:	e03c      	b.n	1000cea6 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000ce2c:	4827      	ldr	r0, [pc, #156]	; (1000cecc <ble_resolv_rand_addr_handler+0x124>)
1000ce2e:	4b28      	ldr	r3, [pc, #160]	; (1000ced0 <ble_resolv_rand_addr_handler+0x128>)
1000ce30:	4798      	blx	r3
1000ce32:	4828      	ldr	r0, [pc, #160]	; (1000ced4 <ble_resolv_rand_addr_handler+0x12c>)
1000ce34:	4b28      	ldr	r3, [pc, #160]	; (1000ced8 <ble_resolv_rand_addr_handler+0x130>)
1000ce36:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ce38:	481f      	ldr	r0, [pc, #124]	; (1000ceb8 <ble_resolv_rand_addr_handler+0x110>)
1000ce3a:	0163      	lsls	r3, r4, #5
1000ce3c:	1b1a      	subs	r2, r3, r4
1000ce3e:	0092      	lsls	r2, r2, #2
1000ce40:	1882      	adds	r2, r0, r2
1000ce42:	0011      	movs	r1, r2
1000ce44:	315e      	adds	r1, #94	; 0x5e
1000ce46:	2502      	movs	r5, #2
1000ce48:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ce4a:	210a      	movs	r1, #10
1000ce4c:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ce4e:	0010      	movs	r0, r2
1000ce50:	2212      	movs	r2, #18
1000ce52:	491a      	ldr	r1, [pc, #104]	; (1000cebc <ble_resolv_rand_addr_handler+0x114>)
1000ce54:	4b1a      	ldr	r3, [pc, #104]	; (1000cec0 <ble_resolv_rand_addr_handler+0x118>)
1000ce56:	4798      	blx	r3
1000ce58:	e00e      	b.n	1000ce78 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000ce5a:	481c      	ldr	r0, [pc, #112]	; (1000cecc <ble_resolv_rand_addr_handler+0x124>)
1000ce5c:	4b1c      	ldr	r3, [pc, #112]	; (1000ced0 <ble_resolv_rand_addr_handler+0x128>)
1000ce5e:	4798      	blx	r3
1000ce60:	481e      	ldr	r0, [pc, #120]	; (1000cedc <ble_resolv_rand_addr_handler+0x134>)
1000ce62:	4b1d      	ldr	r3, [pc, #116]	; (1000ced8 <ble_resolv_rand_addr_handler+0x130>)
1000ce64:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ce66:	235e      	movs	r3, #94	; 0x5e
1000ce68:	4a13      	ldr	r2, [pc, #76]	; (1000ceb8 <ble_resolv_rand_addr_handler+0x110>)
1000ce6a:	5cd3      	ldrb	r3, [r2, r3]
1000ce6c:	2b00      	cmp	r3, #0
1000ce6e:	d0b6      	beq.n	1000cdde <ble_resolv_rand_addr_handler+0x36>
1000ce70:	4a1b      	ldr	r2, [pc, #108]	; (1000cee0 <ble_resolv_rand_addr_handler+0x138>)
1000ce72:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ce74:	2401      	movs	r4, #1
1000ce76:	e7ad      	b.n	1000cdd4 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000ce78:	4814      	ldr	r0, [pc, #80]	; (1000cecc <ble_resolv_rand_addr_handler+0x124>)
1000ce7a:	4b15      	ldr	r3, [pc, #84]	; (1000ced0 <ble_resolv_rand_addr_handler+0x128>)
1000ce7c:	4798      	blx	r3
1000ce7e:	0021      	movs	r1, r4
1000ce80:	4818      	ldr	r0, [pc, #96]	; (1000cee4 <ble_resolv_rand_addr_handler+0x13c>)
1000ce82:	4b15      	ldr	r3, [pc, #84]	; (1000ced8 <ble_resolv_rand_addr_handler+0x130>)
1000ce84:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ce86:	0163      	lsls	r3, r4, #5
1000ce88:	1b1c      	subs	r4, r3, r4
1000ce8a:	00a4      	lsls	r4, r4, #2
1000ce8c:	4b0a      	ldr	r3, [pc, #40]	; (1000ceb8 <ble_resolv_rand_addr_handler+0x110>)
1000ce8e:	191c      	adds	r4, r3, r4
1000ce90:	7ca3      	ldrb	r3, [r4, #18]
1000ce92:	2b0a      	cmp	r3, #10
1000ce94:	d107      	bne.n	1000cea6 <ble_resolv_rand_addr_handler+0xfe>
1000ce96:	e7c4      	b.n	1000ce22 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000ce98:	480c      	ldr	r0, [pc, #48]	; (1000cecc <ble_resolv_rand_addr_handler+0x124>)
1000ce9a:	4b0d      	ldr	r3, [pc, #52]	; (1000ced0 <ble_resolv_rand_addr_handler+0x128>)
1000ce9c:	4798      	blx	r3
1000ce9e:	2105      	movs	r1, #5
1000cea0:	4810      	ldr	r0, [pc, #64]	; (1000cee4 <ble_resolv_rand_addr_handler+0x13c>)
1000cea2:	4b0d      	ldr	r3, [pc, #52]	; (1000ced8 <ble_resolv_rand_addr_handler+0x130>)
1000cea4:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000cea6:	2000      	movs	r0, #0
1000cea8:	bc04      	pop	{r2}
1000ceaa:	4690      	mov	r8, r2
1000ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ceae:	46c0      	nop			; (mov r8, r8)
1000ceb0:	1001aece 	.word	0x1001aece
1000ceb4:	1001228d 	.word	0x1001228d
1000ceb8:	1001ae88 	.word	0x1001ae88
1000cebc:	1001b134 	.word	0x1001b134
1000cec0:	100122ab 	.word	0x100122ab
1000cec4:	1001b0f4 	.word	0x1001b0f4
1000cec8:	1000cb15 	.word	0x1000cb15
1000cecc:	10017434 	.word	0x10017434
1000ced0:	10012e11 	.word	0x10012e11
1000ced4:	10018a44 	.word	0x10018a44
1000ced8:	10012cf1 	.word	0x10012cf1
1000cedc:	10018a5c 	.word	0x10018a5c
1000cee0:	1001af62 	.word	0x1001af62
1000cee4:	10018a78 	.word	0x10018a78

1000cee8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000cee8:	b510      	push	{r4, lr}
1000ceea:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ceec:	ac08      	add	r4, sp, #32
1000ceee:	2203      	movs	r2, #3
1000cef0:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000cef2:	2302      	movs	r3, #2
1000cef4:	70a3      	strb	r3, [r4, #2]
1000cef6:	3316      	adds	r3, #22
1000cef8:	70e3      	strb	r3, [r4, #3]
1000cefa:	7122      	strb	r2, [r4, #4]
1000cefc:	7163      	strb	r3, [r4, #5]
1000cefe:	3201      	adds	r2, #1
1000cf00:	71a2      	strb	r2, [r4, #6]
1000cf02:	71e3      	strb	r3, [r4, #7]
1000cf04:	320b      	adds	r2, #11
1000cf06:	7222      	strb	r2, [r4, #8]
1000cf08:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000cf0a:	3b0f      	subs	r3, #15
1000cf0c:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000cf0e:	3a05      	subs	r2, #5
1000cf10:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000cf12:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000cf14:	aa0b      	add	r2, sp, #44	; 0x2c
1000cf16:	4b16      	ldr	r3, [pc, #88]	; (1000cf70 <ble_advertisement_data_set+0x88>)
1000cf18:	cb03      	ldmia	r3!, {r0, r1}
1000cf1a:	c203      	stmia	r2!, {r0, r1}
1000cf1c:	781b      	ldrb	r3, [r3, #0]
1000cf1e:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000cf20:	2300      	movs	r3, #0
1000cf22:	466a      	mov	r2, sp
1000cf24:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000cf26:	3315      	adds	r3, #21
1000cf28:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000cf2a:	4812      	ldr	r0, [pc, #72]	; (1000cf74 <ble_advertisement_data_set+0x8c>)
1000cf2c:	4b12      	ldr	r3, [pc, #72]	; (1000cf78 <ble_advertisement_data_set+0x90>)
1000cf2e:	4798      	blx	r3
1000cf30:	4812      	ldr	r0, [pc, #72]	; (1000cf7c <ble_advertisement_data_set+0x94>)
1000cf32:	4b13      	ldr	r3, [pc, #76]	; (1000cf80 <ble_advertisement_data_set+0x98>)
1000cf34:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000cf36:	2307      	movs	r3, #7
1000cf38:	466a      	mov	r2, sp
1000cf3a:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000cf3c:	33f8      	adds	r3, #248	; 0xf8
1000cf3e:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000cf40:	2206      	movs	r2, #6
1000cf42:	4910      	ldr	r1, [pc, #64]	; (1000cf84 <ble_advertisement_data_set+0x9c>)
1000cf44:	466b      	mov	r3, sp
1000cf46:	1c98      	adds	r0, r3, #2
1000cf48:	4b0f      	ldr	r3, [pc, #60]	; (1000cf88 <ble_advertisement_data_set+0xa0>)
1000cf4a:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000cf4c:	2308      	movs	r3, #8
1000cf4e:	466a      	mov	r2, sp
1000cf50:	2115      	movs	r1, #21
1000cf52:	0020      	movs	r0, r4
1000cf54:	4c0d      	ldr	r4, [pc, #52]	; (1000cf8c <ble_advertisement_data_set+0xa4>)
1000cf56:	47a0      	blx	r4
1000cf58:	2800      	cmp	r0, #0
1000cf5a:	d005      	beq.n	1000cf68 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000cf5c:	4805      	ldr	r0, [pc, #20]	; (1000cf74 <ble_advertisement_data_set+0x8c>)
1000cf5e:	4b06      	ldr	r3, [pc, #24]	; (1000cf78 <ble_advertisement_data_set+0x90>)
1000cf60:	4798      	blx	r3
1000cf62:	480b      	ldr	r0, [pc, #44]	; (1000cf90 <ble_advertisement_data_set+0xa8>)
1000cf64:	4b06      	ldr	r3, [pc, #24]	; (1000cf80 <ble_advertisement_data_set+0x98>)
1000cf66:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000cf68:	2000      	movs	r0, #0
1000cf6a:	b010      	add	sp, #64	; 0x40
1000cf6c:	bd10      	pop	{r4, pc}
1000cf6e:	46c0      	nop			; (mov r8, r8)
1000cf70:	100187cc 	.word	0x100187cc
1000cf74:	10017434 	.word	0x10017434
1000cf78:	10012e11 	.word	0x10012e11
1000cf7c:	10018ad0 	.word	0x10018ad0
1000cf80:	10012cf1 	.word	0x10012cf1
1000cf84:	10018b04 	.word	0x10018b04
1000cf88:	100122ab 	.word	0x100122ab
1000cf8c:	1000e85d 	.word	0x1000e85d
1000cf90:	10018b0c 	.word	0x10018b0c

1000cf94 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000cf94:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000cf96:	4b0e      	ldr	r3, [pc, #56]	; (1000cfd0 <uart_read_complete_callback+0x3c>)
1000cf98:	781b      	ldrb	r3, [r3, #0]
1000cf9a:	2b01      	cmp	r3, #1
1000cf9c:	d10b      	bne.n	1000cfb6 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000cf9e:	2202      	movs	r2, #2
1000cfa0:	4b0b      	ldr	r3, [pc, #44]	; (1000cfd0 <uart_read_complete_callback+0x3c>)
1000cfa2:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000cfa4:	4b0b      	ldr	r3, [pc, #44]	; (1000cfd4 <uart_read_complete_callback+0x40>)
1000cfa6:	681b      	ldr	r3, [r3, #0]
1000cfa8:	2b00      	cmp	r3, #0
1000cfaa:	d110      	bne.n	1000cfce <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000cfac:	2102      	movs	r1, #2
1000cfae:	480a      	ldr	r0, [pc, #40]	; (1000cfd8 <uart_read_complete_callback+0x44>)
1000cfb0:	4b0a      	ldr	r3, [pc, #40]	; (1000cfdc <uart_read_complete_callback+0x48>)
1000cfb2:	4798      	blx	r3
1000cfb4:	e00b      	b.n	1000cfce <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000cfb6:	4b07      	ldr	r3, [pc, #28]	; (1000cfd4 <uart_read_complete_callback+0x40>)
1000cfb8:	681b      	ldr	r3, [r3, #0]
1000cfba:	2b00      	cmp	r3, #0
1000cfbc:	d007      	beq.n	1000cfce <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000cfbe:	4c08      	ldr	r4, [pc, #32]	; (1000cfe0 <uart_read_complete_callback+0x4c>)
1000cfc0:	7820      	ldrb	r0, [r4, #0]
1000cfc2:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000cfc4:	2201      	movs	r2, #1
1000cfc6:	0021      	movs	r1, r4
1000cfc8:	4803      	ldr	r0, [pc, #12]	; (1000cfd8 <uart_read_complete_callback+0x44>)
1000cfca:	4b06      	ldr	r3, [pc, #24]	; (1000cfe4 <uart_read_complete_callback+0x50>)
1000cfcc:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000cfce:	bd10      	pop	{r4, pc}
1000cfd0:	1001a970 	.word	0x1001a970
1000cfd4:	1001a978 	.word	0x1001a978
1000cfd8:	1001b6b0 	.word	0x1001b6b0
1000cfdc:	1000bb81 	.word	0x1000bb81
1000cfe0:	1001a974 	.word	0x1001a974
1000cfe4:	1000bb25 	.word	0x1000bb25

1000cfe8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000cfe8:	b570      	push	{r4, r5, r6, lr}
1000cfea:	0006      	movs	r6, r0
1000cfec:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000cfee:	4c03      	ldr	r4, [pc, #12]	; (1000cffc <usart_serial_getchar+0x14>)
1000cff0:	0029      	movs	r1, r5
1000cff2:	0030      	movs	r0, r6
1000cff4:	47a0      	blx	r4
1000cff6:	2800      	cmp	r0, #0
1000cff8:	d1fa      	bne.n	1000cff0 <usart_serial_getchar+0x8>
}
1000cffa:	bd70      	pop	{r4, r5, r6, pc}
1000cffc:	1000bb11 	.word	0x1000bb11

1000d000 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d000:	b570      	push	{r4, r5, r6, lr}
1000d002:	0006      	movs	r6, r0
1000d004:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d006:	4c03      	ldr	r4, [pc, #12]	; (1000d014 <usart_serial_putchar+0x14>)
1000d008:	0029      	movs	r1, r5
1000d00a:	0030      	movs	r0, r6
1000d00c:	47a0      	blx	r4
1000d00e:	2800      	cmp	r0, #0
1000d010:	d1fa      	bne.n	1000d008 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d012:	bd70      	pop	{r4, r5, r6, pc}
1000d014:	1000bb01 	.word	0x1000bb01

1000d018 <serial_console_init>:

void serial_console_init(void)
{
1000d018:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d01a:	2100      	movs	r1, #0
1000d01c:	2000      	movs	r0, #0
1000d01e:	4b19      	ldr	r3, [pc, #100]	; (1000d084 <serial_console_init+0x6c>)
1000d020:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d022:	4c19      	ldr	r4, [pc, #100]	; (1000d088 <serial_console_init+0x70>)
1000d024:	0020      	movs	r0, r4
1000d026:	4b19      	ldr	r3, [pc, #100]	; (1000d08c <serial_console_init+0x74>)
1000d028:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d02a:	23e1      	movs	r3, #225	; 0xe1
1000d02c:	025b      	lsls	r3, r3, #9
1000d02e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d030:	2302      	movs	r3, #2
1000d032:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d034:	2203      	movs	r2, #3
1000d036:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d038:	3201      	adds	r2, #1
1000d03a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d03c:	3201      	adds	r2, #1
1000d03e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d040:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d042:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d044:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d046:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d048:	4d11      	ldr	r5, [pc, #68]	; (1000d090 <serial_console_init+0x78>)
1000d04a:	4b12      	ldr	r3, [pc, #72]	; (1000d094 <serial_console_init+0x7c>)
1000d04c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d04e:	4a12      	ldr	r2, [pc, #72]	; (1000d098 <serial_console_init+0x80>)
1000d050:	4b12      	ldr	r3, [pc, #72]	; (1000d09c <serial_console_init+0x84>)
1000d052:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d054:	4a12      	ldr	r2, [pc, #72]	; (1000d0a0 <serial_console_init+0x88>)
1000d056:	4b13      	ldr	r3, [pc, #76]	; (1000d0a4 <serial_console_init+0x8c>)
1000d058:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d05a:	0022      	movs	r2, r4
1000d05c:	4912      	ldr	r1, [pc, #72]	; (1000d0a8 <serial_console_init+0x90>)
1000d05e:	0028      	movs	r0, r5
1000d060:	4b12      	ldr	r3, [pc, #72]	; (1000d0ac <serial_console_init+0x94>)
1000d062:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d064:	4e12      	ldr	r6, [pc, #72]	; (1000d0b0 <serial_console_init+0x98>)
1000d066:	6833      	ldr	r3, [r6, #0]
1000d068:	6898      	ldr	r0, [r3, #8]
1000d06a:	2100      	movs	r1, #0
1000d06c:	4c11      	ldr	r4, [pc, #68]	; (1000d0b4 <serial_console_init+0x9c>)
1000d06e:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d070:	6833      	ldr	r3, [r6, #0]
1000d072:	6858      	ldr	r0, [r3, #4]
1000d074:	2100      	movs	r1, #0
1000d076:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d078:	2202      	movs	r2, #2
1000d07a:	490f      	ldr	r1, [pc, #60]	; (1000d0b8 <serial_console_init+0xa0>)
1000d07c:	0028      	movs	r0, r5
1000d07e:	4b0f      	ldr	r3, [pc, #60]	; (1000d0bc <serial_console_init+0xa4>)
1000d080:	4798      	blx	r3
}
1000d082:	bd70      	pop	{r4, r5, r6, pc}
1000d084:	1000ab21 	.word	0x1000ab21
1000d088:	1001b6d4 	.word	0x1001b6d4
1000d08c:	1000b919 	.word	0x1000b919
1000d090:	1001b6b0 	.word	0x1001b6b0
1000d094:	1001ae6c 	.word	0x1001ae6c
1000d098:	1000d001 	.word	0x1000d001
1000d09c:	1001ae68 	.word	0x1001ae68
1000d0a0:	1000cfe9 	.word	0x1000cfe9
1000d0a4:	1001ae64 	.word	0x1001ae64
1000d0a8:	40004000 	.word	0x40004000
1000d0ac:	1000b945 	.word	0x1000b945
1000d0b0:	10019014 	.word	0x10019014
1000d0b4:	10012ec1 	.word	0x10012ec1
1000d0b8:	1000cf95 	.word	0x1000cf95
1000d0bc:	1000bb4d 	.word	0x1000bb4d

1000d0c0 <_time_start>:

void _time_start(unsigned int sec)
{
1000d0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0c2:	b083      	sub	sp, #12
1000d0c4:	0005      	movs	r5, r0
	system_clock_get_value();
1000d0c6:	4c0d      	ldr	r4, [pc, #52]	; (1000d0fc <_time_start+0x3c>)
1000d0c8:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d0ca:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d0cc:	4f0c      	ldr	r7, [pc, #48]	; (1000d100 <_time_start+0x40>)
1000d0ce:	47b8      	blx	r7
1000d0d0:	4e0c      	ldr	r6, [pc, #48]	; (1000d104 <_time_start+0x44>)
1000d0d2:	4a0d      	ldr	r2, [pc, #52]	; (1000d108 <_time_start+0x48>)
1000d0d4:	4b0d      	ldr	r3, [pc, #52]	; (1000d10c <_time_start+0x4c>)
1000d0d6:	47b0      	blx	r6
1000d0d8:	9000      	str	r0, [sp, #0]
1000d0da:	9101      	str	r1, [sp, #4]
1000d0dc:	20fa      	movs	r0, #250	; 0xfa
1000d0de:	0080      	lsls	r0, r0, #2
1000d0e0:	4368      	muls	r0, r5
1000d0e2:	47b8      	blx	r7
1000d0e4:	0002      	movs	r2, r0
1000d0e6:	000b      	movs	r3, r1
1000d0e8:	9800      	ldr	r0, [sp, #0]
1000d0ea:	9901      	ldr	r1, [sp, #4]
1000d0ec:	47b0      	blx	r6
1000d0ee:	4b08      	ldr	r3, [pc, #32]	; (1000d110 <_time_start+0x50>)
1000d0f0:	4798      	blx	r3
1000d0f2:	4b08      	ldr	r3, [pc, #32]	; (1000d114 <_time_start+0x54>)
1000d0f4:	6018      	str	r0, [r3, #0]
}
1000d0f6:	b003      	add	sp, #12
1000d0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0fa:	46c0      	nop			; (mov r8, r8)
1000d0fc:	1000aba5 	.word	0x1000aba5
1000d100:	100171c9 	.word	0x100171c9
1000d104:	100164fd 	.word	0x100164fd
1000d108:	19feaec7 	.word	0x19feaec7
1000d10c:	3f09d8ef 	.word	0x3f09d8ef
1000d110:	100150b9 	.word	0x100150b9
1000d114:	1001a96c 	.word	0x1001a96c

1000d118 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d118:	4b02      	ldr	r3, [pc, #8]	; (1000d124 <_time_done+0xc>)
1000d11a:	681a      	ldr	r2, [r3, #0]
1000d11c:	1e50      	subs	r0, r2, #1
1000d11e:	6018      	str	r0, [r3, #0]
}
1000d120:	4770      	bx	lr
1000d122:	46c0      	nop			; (mov r8, r8)
1000d124:	1001a96c 	.word	0x1001a96c

1000d128 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d128:	b570      	push	{r4, r5, r6, lr}
1000d12a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d12c:	2201      	movs	r2, #1
1000d12e:	4b11      	ldr	r3, [pc, #68]	; (1000d174 <getchar_b11_timeout+0x4c>)
1000d130:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d132:	4b11      	ldr	r3, [pc, #68]	; (1000d178 <getchar_b11_timeout+0x50>)
1000d134:	681b      	ldr	r3, [r3, #0]
1000d136:	2b00      	cmp	r3, #0
1000d138:	d103      	bne.n	1000d142 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d13a:	2102      	movs	r1, #2
1000d13c:	480f      	ldr	r0, [pc, #60]	; (1000d17c <getchar_b11_timeout+0x54>)
1000d13e:	4b10      	ldr	r3, [pc, #64]	; (1000d180 <getchar_b11_timeout+0x58>)
1000d140:	4798      	blx	r3

	_time_start(sec);
1000d142:	0020      	movs	r0, r4
1000d144:	4b0f      	ldr	r3, [pc, #60]	; (1000d184 <getchar_b11_timeout+0x5c>)
1000d146:	4798      	blx	r3
	
	string_input[0] = 0;
1000d148:	490f      	ldr	r1, [pc, #60]	; (1000d188 <getchar_b11_timeout+0x60>)
1000d14a:	2300      	movs	r3, #0
1000d14c:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d14e:	2201      	movs	r2, #1
1000d150:	480a      	ldr	r0, [pc, #40]	; (1000d17c <getchar_b11_timeout+0x54>)
1000d152:	4b0e      	ldr	r3, [pc, #56]	; (1000d18c <getchar_b11_timeout+0x64>)
1000d154:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d156:	4c07      	ldr	r4, [pc, #28]	; (1000d174 <getchar_b11_timeout+0x4c>)
1000d158:	4d0d      	ldr	r5, [pc, #52]	; (1000d190 <getchar_b11_timeout+0x68>)
1000d15a:	7823      	ldrb	r3, [r4, #0]
1000d15c:	2b02      	cmp	r3, #2
1000d15e:	d002      	beq.n	1000d166 <getchar_b11_timeout+0x3e>
1000d160:	47a8      	blx	r5
1000d162:	2800      	cmp	r0, #0
1000d164:	d1f9      	bne.n	1000d15a <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d166:	2200      	movs	r2, #0
1000d168:	4b02      	ldr	r3, [pc, #8]	; (1000d174 <getchar_b11_timeout+0x4c>)
1000d16a:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d16c:	4b06      	ldr	r3, [pc, #24]	; (1000d188 <getchar_b11_timeout+0x60>)
1000d16e:	7818      	ldrb	r0, [r3, #0]
}
1000d170:	bd70      	pop	{r4, r5, r6, pc}
1000d172:	46c0      	nop			; (mov r8, r8)
1000d174:	1001a970 	.word	0x1001a970
1000d178:	1001a978 	.word	0x1001a978
1000d17c:	1001b6b0 	.word	0x1001b6b0
1000d180:	1000bb61 	.word	0x1000bb61
1000d184:	1000d0c1 	.word	0x1000d0c1
1000d188:	1001a974 	.word	0x1001a974
1000d18c:	1000bb25 	.word	0x1000bb25
1000d190:	1000d119 	.word	0x1000d119

1000d194 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d194:	4b02      	ldr	r3, [pc, #8]	; (1000d1a0 <platform_event_free+0xc>)
1000d196:	681a      	ldr	r2, [r3, #0]
1000d198:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d19a:	6018      	str	r0, [r3, #0]
}
1000d19c:	4770      	bx	lr
1000d19e:	46c0      	nop			; (mov r8, r8)
1000d1a0:	1001a980 	.word	0x1001a980

1000d1a4 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d1a4:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d1a6:	4b0b      	ldr	r3, [pc, #44]	; (1000d1d4 <platform_event_post+0x30>)
1000d1a8:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d1aa:	2c00      	cmp	r4, #0
1000d1ac:	d011      	beq.n	1000d1d2 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d1ae:	6825      	ldr	r5, [r4, #0]
1000d1b0:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d1b2:	2300      	movs	r3, #0
1000d1b4:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d1b6:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d1b8:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d1ba:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d1bc:	4b06      	ldr	r3, [pc, #24]	; (1000d1d8 <platform_event_post+0x34>)
1000d1be:	681a      	ldr	r2, [r3, #0]
1000d1c0:	2a00      	cmp	r2, #0
1000d1c2:	d102      	bne.n	1000d1ca <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d1c4:	601c      	str	r4, [r3, #0]
1000d1c6:	e004      	b.n	1000d1d2 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d1c8:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d1ca:	6813      	ldr	r3, [r2, #0]
1000d1cc:	2b00      	cmp	r3, #0
1000d1ce:	d1fb      	bne.n	1000d1c8 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d1d0:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d1d2:	bd30      	pop	{r4, r5, pc}
1000d1d4:	1001a980 	.word	0x1001a980
1000d1d8:	1001a97c 	.word	0x1001a97c

1000d1dc <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d1dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d1de:	2300      	movs	r3, #0
1000d1e0:	4a06      	ldr	r2, [pc, #24]	; (1000d1fc <platform_event_init+0x20>)
1000d1e2:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d1e4:	4a06      	ldr	r2, [pc, #24]	; (1000d200 <platform_event_init+0x24>)
1000d1e6:	6013      	str	r3, [r2, #0]
1000d1e8:	4c06      	ldr	r4, [pc, #24]	; (1000d204 <platform_event_init+0x28>)
1000d1ea:	0026      	movs	r6, r4
1000d1ec:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d1ee:	4d06      	ldr	r5, [pc, #24]	; (1000d208 <platform_event_init+0x2c>)
1000d1f0:	0020      	movs	r0, r4
1000d1f2:	47a8      	blx	r5
1000d1f4:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d1f6:	42b4      	cmp	r4, r6
1000d1f8:	d1fa      	bne.n	1000d1f0 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d1fa:	bd70      	pop	{r4, r5, r6, pc}
1000d1fc:	1001a980 	.word	0x1001a980
1000d200:	1001a97c 	.word	0x1001a97c
1000d204:	1001a984 	.word	0x1001a984
1000d208:	1000d195 	.word	0x1000d195

1000d20c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d20c:	b570      	push	{r4, r5, r6, lr}
1000d20e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d210:	4b13      	ldr	r3, [pc, #76]	; (1000d260 <at_ke_msg_send+0x54>)
1000d212:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d214:	4b13      	ldr	r3, [pc, #76]	; (1000d264 <at_ke_msg_send+0x58>)
1000d216:	681b      	ldr	r3, [r3, #0]
1000d218:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d21a:	2c0c      	cmp	r4, #12
1000d21c:	d01f      	beq.n	1000d25e <at_ke_msg_send+0x52>
1000d21e:	3c0c      	subs	r4, #12
1000d220:	88e3      	ldrh	r3, [r4, #6]
1000d222:	2b05      	cmp	r3, #5
1000d224:	d01b      	beq.n	1000d25e <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d226:	07eb      	lsls	r3, r5, #31
1000d228:	d414      	bmi.n	1000d254 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d22a:	4b0f      	ldr	r3, [pc, #60]	; (1000d268 <at_ke_msg_send+0x5c>)
1000d22c:	681b      	ldr	r3, [r3, #0]
1000d22e:	2002      	movs	r0, #2
1000d230:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d232:	4b0e      	ldr	r3, [pc, #56]	; (1000d26c <at_ke_msg_send+0x60>)
1000d234:	681b      	ldr	r3, [r3, #0]
1000d236:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d238:	4c0d      	ldr	r4, [pc, #52]	; (1000d270 <at_ke_msg_send+0x64>)
1000d23a:	2003      	movs	r0, #3
1000d23c:	6823      	ldr	r3, [r4, #0]
1000d23e:	4798      	blx	r3
1000d240:	2800      	cmp	r0, #0
1000d242:	d1fa      	bne.n	1000d23a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d244:	4b0b      	ldr	r3, [pc, #44]	; (1000d274 <at_ke_msg_send+0x68>)
1000d246:	681b      	ldr	r3, [r3, #0]
1000d248:	3002      	adds	r0, #2
1000d24a:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d24c:	2201      	movs	r2, #1
1000d24e:	4b0a      	ldr	r3, [pc, #40]	; (1000d278 <at_ke_msg_send+0x6c>)
1000d250:	601a      	str	r2, [r3, #0]
1000d252:	e004      	b.n	1000d25e <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d254:	4b09      	ldr	r3, [pc, #36]	; (1000d27c <at_ke_msg_send+0x70>)
1000d256:	6818      	ldr	r0, [r3, #0]
1000d258:	4b09      	ldr	r3, [pc, #36]	; (1000d280 <at_ke_msg_send+0x74>)
1000d25a:	681b      	ldr	r3, [r3, #0]
1000d25c:	4798      	blx	r3
		}
	}
}
1000d25e:	bd70      	pop	{r4, r5, r6, pc}
1000d260:	4000b1ec 	.word	0x4000b1ec
1000d264:	1001aa2c 	.word	0x1001aa2c
1000d268:	1001aa24 	.word	0x1001aa24
1000d26c:	1001aa38 	.word	0x1001aa38
1000d270:	1001aa0c 	.word	0x1001aa0c
1000d274:	1001aa14 	.word	0x1001aa14
1000d278:	4000b020 	.word	0x4000b020
1000d27c:	1001aa18 	.word	0x1001aa18
1000d280:	1001aa08 	.word	0x1001aa08

1000d284 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d284:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d286:	4b06      	ldr	r3, [pc, #24]	; (1000d2a0 <samb11_plf_resume_callback+0x1c>)
1000d288:	4a06      	ldr	r2, [pc, #24]	; (1000d2a4 <samb11_plf_resume_callback+0x20>)
1000d28a:	6819      	ldr	r1, [r3, #0]
1000d28c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d28e:	685a      	ldr	r2, [r3, #4]
1000d290:	4b05      	ldr	r3, [pc, #20]	; (1000d2a8 <samb11_plf_resume_callback+0x24>)
1000d292:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d294:	4b05      	ldr	r3, [pc, #20]	; (1000d2ac <samb11_plf_resume_callback+0x28>)
1000d296:	681b      	ldr	r3, [r3, #0]
1000d298:	2b00      	cmp	r3, #0
1000d29a:	d000      	beq.n	1000d29e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d29c:	4798      	blx	r3
	}
}
1000d29e:	bd10      	pop	{r4, pc}
1000d2a0:	1001b6fc 	.word	0x1001b6fc
1000d2a4:	4000b00c 	.word	0x4000b00c
1000d2a8:	4000b010 	.word	0x4000b010
1000d2ac:	1001b9d8 	.word	0x1001b9d8

1000d2b0 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d2b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d2b2:	2232      	movs	r2, #50	; 0x32
1000d2b4:	2100      	movs	r1, #0
1000d2b6:	480d      	ldr	r0, [pc, #52]	; (1000d2ec <init_port_list+0x3c>)
1000d2b8:	4b0d      	ldr	r3, [pc, #52]	; (1000d2f0 <init_port_list+0x40>)
1000d2ba:	4798      	blx	r3
1000d2bc:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d2be:	480b      	ldr	r0, [pc, #44]	; (1000d2ec <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d2c0:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d2c2:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d2c4:	004a      	lsls	r2, r1, #1
1000d2c6:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d2c8:	1882      	adds	r2, r0, r2
1000d2ca:	7853      	ldrb	r3, [r2, #1]
1000d2cc:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d2ce:	b2db      	uxtb	r3, r3
1000d2d0:	43a3      	bics	r3, r4
1000d2d2:	7053      	strb	r3, [r2, #1]
1000d2d4:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d2d6:	2919      	cmp	r1, #25
1000d2d8:	d1f4      	bne.n	1000d2c4 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d2da:	4b04      	ldr	r3, [pc, #16]	; (1000d2ec <init_port_list+0x3c>)
1000d2dc:	785a      	ldrb	r2, [r3, #1]
1000d2de:	3918      	subs	r1, #24
1000d2e0:	438a      	bics	r2, r1
1000d2e2:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d2e4:	78da      	ldrb	r2, [r3, #3]
1000d2e6:	438a      	bics	r2, r1
1000d2e8:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d2ea:	bd70      	pop	{r4, r5, r6, pc}
1000d2ec:	1001b718 	.word	0x1001b718
1000d2f0:	100122bd 	.word	0x100122bd

1000d2f4 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d2f4:	4a06      	ldr	r2, [pc, #24]	; (1000d310 <init_clock+0x1c>)
1000d2f6:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d2f8:	4b06      	ldr	r3, [pc, #24]	; (1000d314 <init_clock+0x20>)
1000d2fa:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d2fc:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d2fe:	4a06      	ldr	r2, [pc, #24]	; (1000d318 <init_clock+0x24>)
1000d300:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d302:	4906      	ldr	r1, [pc, #24]	; (1000d31c <init_clock+0x28>)
1000d304:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d306:	4b06      	ldr	r3, [pc, #24]	; (1000d320 <init_clock+0x2c>)
1000d308:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d30a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d30c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d30e:	4770      	bx	lr
1000d310:	4000b00c 	.word	0x4000b00c
1000d314:	fffe0fd3 	.word	0xfffe0fd3
1000d318:	1001b6fc 	.word	0x1001b6fc
1000d31c:	4000b010 	.word	0x4000b010
1000d320:	ffffe7c0 	.word	0xffffe7c0

1000d324 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d324:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d326:	4657      	mov	r7, sl
1000d328:	464e      	mov	r6, r9
1000d32a:	4645      	mov	r5, r8
1000d32c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d32e:	4b4f      	ldr	r3, [pc, #316]	; (1000d46c <platform_driver_init+0x148>)
1000d330:	781b      	ldrb	r3, [r3, #0]
1000d332:	2b00      	cmp	r3, #0
1000d334:	d004      	beq.n	1000d340 <platform_driver_init+0x1c>
1000d336:	4b4d      	ldr	r3, [pc, #308]	; (1000d46c <platform_driver_init+0x148>)
1000d338:	781b      	ldrb	r3, [r3, #0]
1000d33a:	2b01      	cmp	r3, #1
1000d33c:	d100      	bne.n	1000d340 <platform_driver_init+0x1c>
1000d33e:	e08c      	b.n	1000d45a <platform_driver_init+0x136>
		init_port_list();
1000d340:	4b4b      	ldr	r3, [pc, #300]	; (1000d470 <platform_driver_init+0x14c>)
1000d342:	4798      	blx	r3
		init_clock();
1000d344:	4b4b      	ldr	r3, [pc, #300]	; (1000d474 <platform_driver_init+0x150>)
1000d346:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d348:	2300      	movs	r3, #0
1000d34a:	4698      	mov	r8, r3
1000d34c:	4b4a      	ldr	r3, [pc, #296]	; (1000d478 <platform_driver_init+0x154>)
1000d34e:	4642      	mov	r2, r8
1000d350:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d352:	4c4a      	ldr	r4, [pc, #296]	; (1000d47c <platform_driver_init+0x158>)
1000d354:	2380      	movs	r3, #128	; 0x80
1000d356:	2280      	movs	r2, #128	; 0x80
1000d358:	0412      	lsls	r2, r2, #16
1000d35a:	4692      	mov	sl, r2
1000d35c:	50e2      	str	r2, [r4, r3]
1000d35e:	2280      	movs	r2, #128	; 0x80
1000d360:	0452      	lsls	r2, r2, #17
1000d362:	4691      	mov	r9, r2
1000d364:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d366:	4d46      	ldr	r5, [pc, #280]	; (1000d480 <platform_driver_init+0x15c>)
1000d368:	4b46      	ldr	r3, [pc, #280]	; (1000d484 <platform_driver_init+0x160>)
1000d36a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d36c:	4b46      	ldr	r3, [pc, #280]	; (1000d488 <platform_driver_init+0x164>)
1000d36e:	4a47      	ldr	r2, [pc, #284]	; (1000d48c <platform_driver_init+0x168>)
1000d370:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d372:	4947      	ldr	r1, [pc, #284]	; (1000d490 <platform_driver_init+0x16c>)
1000d374:	4a47      	ldr	r2, [pc, #284]	; (1000d494 <platform_driver_init+0x170>)
1000d376:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d378:	4a47      	ldr	r2, [pc, #284]	; (1000d498 <platform_driver_init+0x174>)
1000d37a:	6811      	ldr	r1, [r2, #0]
1000d37c:	4a47      	ldr	r2, [pc, #284]	; (1000d49c <platform_driver_init+0x178>)
1000d37e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d380:	4a47      	ldr	r2, [pc, #284]	; (1000d4a0 <platform_driver_init+0x17c>)
1000d382:	6811      	ldr	r1, [r2, #0]
1000d384:	4a47      	ldr	r2, [pc, #284]	; (1000d4a4 <platform_driver_init+0x180>)
1000d386:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d388:	4947      	ldr	r1, [pc, #284]	; (1000d4a8 <platform_driver_init+0x184>)
1000d38a:	4a48      	ldr	r2, [pc, #288]	; (1000d4ac <platform_driver_init+0x188>)
1000d38c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d38e:	4948      	ldr	r1, [pc, #288]	; (1000d4b0 <platform_driver_init+0x18c>)
1000d390:	4a48      	ldr	r2, [pc, #288]	; (1000d4b4 <platform_driver_init+0x190>)
1000d392:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d394:	4f48      	ldr	r7, [pc, #288]	; (1000d4b8 <platform_driver_init+0x194>)
1000d396:	4a49      	ldr	r2, [pc, #292]	; (1000d4bc <platform_driver_init+0x198>)
1000d398:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d39a:	4949      	ldr	r1, [pc, #292]	; (1000d4c0 <platform_driver_init+0x19c>)
1000d39c:	4a49      	ldr	r2, [pc, #292]	; (1000d4c4 <platform_driver_init+0x1a0>)
1000d39e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d3a0:	4949      	ldr	r1, [pc, #292]	; (1000d4c8 <platform_driver_init+0x1a4>)
1000d3a2:	4a4a      	ldr	r2, [pc, #296]	; (1000d4cc <platform_driver_init+0x1a8>)
1000d3a4:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d3a6:	4e4a      	ldr	r6, [pc, #296]	; (1000d4d0 <platform_driver_init+0x1ac>)
1000d3a8:	4a4a      	ldr	r2, [pc, #296]	; (1000d4d4 <platform_driver_init+0x1b0>)
1000d3aa:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d3ac:	494a      	ldr	r1, [pc, #296]	; (1000d4d8 <platform_driver_init+0x1b4>)
1000d3ae:	4a4b      	ldr	r2, [pc, #300]	; (1000d4dc <platform_driver_init+0x1b8>)
1000d3b0:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d3b2:	494b      	ldr	r1, [pc, #300]	; (1000d4e0 <platform_driver_init+0x1bc>)
1000d3b4:	4a4b      	ldr	r2, [pc, #300]	; (1000d4e4 <platform_driver_init+0x1c0>)
1000d3b6:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d3b8:	494b      	ldr	r1, [pc, #300]	; (1000d4e8 <platform_driver_init+0x1c4>)
1000d3ba:	4a4c      	ldr	r2, [pc, #304]	; (1000d4ec <platform_driver_init+0x1c8>)
1000d3bc:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d3be:	494c      	ldr	r1, [pc, #304]	; (1000d4f0 <platform_driver_init+0x1cc>)
1000d3c0:	4a4c      	ldr	r2, [pc, #304]	; (1000d4f4 <platform_driver_init+0x1d0>)
1000d3c2:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d3c4:	494c      	ldr	r1, [pc, #304]	; (1000d4f8 <platform_driver_init+0x1d4>)
1000d3c6:	4a4d      	ldr	r2, [pc, #308]	; (1000d4fc <platform_driver_init+0x1d8>)
1000d3c8:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d3ca:	2028      	movs	r0, #40	; 0x28
1000d3cc:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d3ce:	494c      	ldr	r1, [pc, #304]	; (1000d500 <platform_driver_init+0x1dc>)
1000d3d0:	2028      	movs	r0, #40	; 0x28
1000d3d2:	682b      	ldr	r3, [r5, #0]
1000d3d4:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d3d6:	682b      	ldr	r3, [r5, #0]
1000d3d8:	494a      	ldr	r1, [pc, #296]	; (1000d504 <platform_driver_init+0x1e0>)
1000d3da:	2027      	movs	r0, #39	; 0x27
1000d3dc:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d3de:	4b4a      	ldr	r3, [pc, #296]	; (1000d508 <platform_driver_init+0x1e4>)
1000d3e0:	681a      	ldr	r2, [r3, #0]
1000d3e2:	4b4a      	ldr	r3, [pc, #296]	; (1000d50c <platform_driver_init+0x1e8>)
1000d3e4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d3e6:	4a4a      	ldr	r2, [pc, #296]	; (1000d510 <platform_driver_init+0x1ec>)
1000d3e8:	4b4a      	ldr	r3, [pc, #296]	; (1000d514 <platform_driver_init+0x1f0>)
1000d3ea:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d3ec:	4a4a      	ldr	r2, [pc, #296]	; (1000d518 <platform_driver_init+0x1f4>)
1000d3ee:	4b4b      	ldr	r3, [pc, #300]	; (1000d51c <platform_driver_init+0x1f8>)
1000d3f0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d3f2:	4a4b      	ldr	r2, [pc, #300]	; (1000d520 <platform_driver_init+0x1fc>)
1000d3f4:	4b4b      	ldr	r3, [pc, #300]	; (1000d524 <platform_driver_init+0x200>)
1000d3f6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d3f8:	4a4b      	ldr	r2, [pc, #300]	; (1000d528 <platform_driver_init+0x204>)
1000d3fa:	4b4c      	ldr	r3, [pc, #304]	; (1000d52c <platform_driver_init+0x208>)
1000d3fc:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d3fe:	4a4c      	ldr	r2, [pc, #304]	; (1000d530 <platform_driver_init+0x20c>)
1000d400:	4b4c      	ldr	r3, [pc, #304]	; (1000d534 <platform_driver_init+0x210>)
1000d402:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d404:	4a4c      	ldr	r2, [pc, #304]	; (1000d538 <platform_driver_init+0x214>)
1000d406:	4b4d      	ldr	r3, [pc, #308]	; (1000d53c <platform_driver_init+0x218>)
1000d408:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d40a:	4a4d      	ldr	r2, [pc, #308]	; (1000d540 <platform_driver_init+0x21c>)
1000d40c:	4b4d      	ldr	r3, [pc, #308]	; (1000d544 <platform_driver_init+0x220>)
1000d40e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d410:	22a0      	movs	r2, #160	; 0xa0
1000d412:	0092      	lsls	r2, r2, #2
1000d414:	2100      	movs	r1, #0
1000d416:	484c      	ldr	r0, [pc, #304]	; (1000d548 <platform_driver_init+0x224>)
1000d418:	4b4c      	ldr	r3, [pc, #304]	; (1000d54c <platform_driver_init+0x228>)
1000d41a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d41c:	2280      	movs	r2, #128	; 0x80
1000d41e:	0092      	lsls	r2, r2, #2
1000d420:	4b4b      	ldr	r3, [pc, #300]	; (1000d550 <platform_driver_init+0x22c>)
1000d422:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d424:	4b4b      	ldr	r3, [pc, #300]	; (1000d554 <platform_driver_init+0x230>)
1000d426:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d428:	4653      	mov	r3, sl
1000d42a:	6023      	str	r3, [r4, #0]
1000d42c:	464b      	mov	r3, r9
1000d42e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d430:	4b49      	ldr	r3, [pc, #292]	; (1000d558 <platform_driver_init+0x234>)
1000d432:	4642      	mov	r2, r8
1000d434:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d436:	683b      	ldr	r3, [r7, #0]
1000d438:	4a48      	ldr	r2, [pc, #288]	; (1000d55c <platform_driver_init+0x238>)
1000d43a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d43c:	6833      	ldr	r3, [r6, #0]
1000d43e:	4a48      	ldr	r2, [pc, #288]	; (1000d560 <platform_driver_init+0x23c>)
1000d440:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d442:	2000      	movs	r0, #0
1000d444:	4c47      	ldr	r4, [pc, #284]	; (1000d564 <platform_driver_init+0x240>)
1000d446:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d448:	2001      	movs	r0, #1
1000d44a:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d44c:	2002      	movs	r0, #2
1000d44e:	47a0      	blx	r4
		platform_initialized = 1;
1000d450:	2201      	movs	r2, #1
1000d452:	4b06      	ldr	r3, [pc, #24]	; (1000d46c <platform_driver_init+0x148>)
1000d454:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d456:	2000      	movs	r0, #0
1000d458:	e003      	b.n	1000d462 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d45a:	2201      	movs	r2, #1
1000d45c:	4b03      	ldr	r3, [pc, #12]	; (1000d46c <platform_driver_init+0x148>)
1000d45e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d460:	2001      	movs	r0, #1
	}
	return status;
}
1000d462:	bc1c      	pop	{r2, r3, r4}
1000d464:	4690      	mov	r8, r2
1000d466:	4699      	mov	r9, r3
1000d468:	46a2      	mov	sl, r4
1000d46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d46c:	1001aa10 	.word	0x1001aa10
1000d470:	1000d2b1 	.word	0x1000d2b1
1000d474:	1000d2f5 	.word	0x1000d2f5
1000d478:	1001aa30 	.word	0x1001aa30
1000d47c:	e000e100 	.word	0xe000e100
1000d480:	1001b9cc 	.word	0x1001b9cc
1000d484:	000007d7 	.word	0x000007d7
1000d488:	000007bd 	.word	0x000007bd
1000d48c:	1001b708 	.word	0x1001b708
1000d490:	0001bc51 	.word	0x0001bc51
1000d494:	1001b9d0 	.word	0x1001b9d0
1000d498:	100400bc 	.word	0x100400bc
1000d49c:	1001aa04 	.word	0x1001aa04
1000d4a0:	100400b8 	.word	0x100400b8
1000d4a4:	1001aa00 	.word	0x1001aa00
1000d4a8:	0001b99f 	.word	0x0001b99f
1000d4ac:	1001b704 	.word	0x1001b704
1000d4b0:	0001b9db 	.word	0x0001b9db
1000d4b4:	1001b710 	.word	0x1001b710
1000d4b8:	1001b9e0 	.word	0x1001b9e0
1000d4bc:	1004003c 	.word	0x1004003c
1000d4c0:	10041fc0 	.word	0x10041fc0
1000d4c4:	1001b714 	.word	0x1001b714
1000d4c8:	10041fc4 	.word	0x10041fc4
1000d4cc:	1001b9dc 	.word	0x1001b9dc
1000d4d0:	1001b9d4 	.word	0x1001b9d4
1000d4d4:	10041fd4 	.word	0x10041fd4
1000d4d8:	10041fd8 	.word	0x10041fd8
1000d4dc:	1001b70c 	.word	0x1001b70c
1000d4e0:	0001cbe9 	.word	0x0001cbe9
1000d4e4:	1001aa24 	.word	0x1001aa24
1000d4e8:	0001cd8f 	.word	0x0001cd8f
1000d4ec:	1001aa14 	.word	0x1001aa14
1000d4f0:	0001cea3 	.word	0x0001cea3
1000d4f4:	1001aa38 	.word	0x1001aa38
1000d4f8:	0001cbcf 	.word	0x0001cbcf
1000d4fc:	1001aa0c 	.word	0x1001aa0c
1000d500:	1000d9ad 	.word	0x1000d9ad
1000d504:	1000d941 	.word	0x1000d941
1000d508:	100400e4 	.word	0x100400e4
1000d50c:	1001aa2c 	.word	0x1001aa2c
1000d510:	00019fe9 	.word	0x00019fe9
1000d514:	1001aa3c 	.word	0x1001aa3c
1000d518:	0001dbdd 	.word	0x0001dbdd
1000d51c:	1001aa08 	.word	0x1001aa08
1000d520:	0001dc5b 	.word	0x0001dc5b
1000d524:	1001aa1c 	.word	0x1001aa1c
1000d528:	100405ec 	.word	0x100405ec
1000d52c:	1001aa18 	.word	0x1001aa18
1000d530:	0001d5e3 	.word	0x0001d5e3
1000d534:	1001aa28 	.word	0x1001aa28
1000d538:	10040c20 	.word	0x10040c20
1000d53c:	1001aa40 	.word	0x1001aa40
1000d540:	00019f09 	.word	0x00019f09
1000d544:	1001a9fc 	.word	0x1001a9fc
1000d548:	1001b74c 	.word	0x1001b74c
1000d54c:	100122bd 	.word	0x100122bd
1000d550:	1001b9e4 	.word	0x1001b9e4
1000d554:	1000d1dd 	.word	0x1000d1dd
1000d558:	1001b9d8 	.word	0x1001b9d8
1000d55c:	1000d285 	.word	0x1000d285
1000d560:	1000da09 	.word	0x1000da09
1000d564:	1000d9f1 	.word	0x1000d9f1

1000d568 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d568:	4b04      	ldr	r3, [pc, #16]	; (1000d57c <platform_register_ble_msg_handler+0x14>)
1000d56a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d56c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d56e:	2a01      	cmp	r2, #1
1000d570:	d102      	bne.n	1000d578 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d572:	4b03      	ldr	r3, [pc, #12]	; (1000d580 <platform_register_ble_msg_handler+0x18>)
1000d574:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d576:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d578:	0018      	movs	r0, r3
1000d57a:	4770      	bx	lr
1000d57c:	1001aa10 	.word	0x1001aa10
1000d580:	1001aa30 	.word	0x1001aa30

1000d584 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d584:	b570      	push	{r4, r5, r6, lr}
1000d586:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d588:	4b0e      	ldr	r3, [pc, #56]	; (1000d5c4 <platform_interface_send+0x40>)
1000d58a:	681b      	ldr	r3, [r3, #0]
1000d58c:	2b00      	cmp	r3, #0
1000d58e:	d002      	beq.n	1000d596 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d590:	8840      	ldrh	r0, [r0, #2]
1000d592:	4798      	blx	r3
1000d594:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d596:	88e3      	ldrh	r3, [r4, #6]
1000d598:	88a2      	ldrh	r2, [r4, #4]
1000d59a:	8861      	ldrh	r1, [r4, #2]
1000d59c:	8820      	ldrh	r0, [r4, #0]
1000d59e:	4d0a      	ldr	r5, [pc, #40]	; (1000d5c8 <platform_interface_send+0x44>)
1000d5a0:	682d      	ldr	r5, [r5, #0]
1000d5a2:	47a8      	blx	r5
1000d5a4:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d5a6:	88e2      	ldrh	r2, [r4, #6]
1000d5a8:	2a00      	cmp	r2, #0
1000d5aa:	d102      	bne.n	1000d5b2 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d5ac:	4b07      	ldr	r3, [pc, #28]	; (1000d5cc <platform_interface_send+0x48>)
1000d5ae:	4798      	blx	r3
1000d5b0:	e006      	b.n	1000d5c0 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d5b2:	0021      	movs	r1, r4
1000d5b4:	3108      	adds	r1, #8
1000d5b6:	4b06      	ldr	r3, [pc, #24]	; (1000d5d0 <platform_interface_send+0x4c>)
1000d5b8:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d5ba:	0028      	movs	r0, r5
1000d5bc:	4b03      	ldr	r3, [pc, #12]	; (1000d5cc <platform_interface_send+0x48>)
1000d5be:	4798      	blx	r3
	}
}
1000d5c0:	bd70      	pop	{r4, r5, r6, pc}
1000d5c2:	46c0      	nop			; (mov r8, r8)
1000d5c4:	1001aa04 	.word	0x1001aa04
1000d5c8:	1001aa3c 	.word	0x1001aa3c
1000d5cc:	1000d20d 	.word	0x1000d20d
1000d5d0:	100122ab 	.word	0x100122ab

1000d5d4 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d5d4:	b570      	push	{r4, r5, r6, lr}
1000d5d6:	0015      	movs	r5, r2
1000d5d8:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d5da:	020a      	lsls	r2, r1, #8
1000d5dc:	4302      	orrs	r2, r0
1000d5de:	4b0a      	ldr	r3, [pc, #40]	; (1000d608 <send_plf_int_msg_ind+0x34>)
1000d5e0:	681e      	ldr	r6, [r3, #0]
1000d5e2:	0023      	movs	r3, r4
1000d5e4:	2105      	movs	r1, #5
1000d5e6:	20a0      	movs	r0, #160	; 0xa0
1000d5e8:	00c0      	lsls	r0, r0, #3
1000d5ea:	47b0      	blx	r6
1000d5ec:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d5ee:	d00a      	beq.n	1000d606 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d5f0:	2c00      	cmp	r4, #0
1000d5f2:	d005      	beq.n	1000d600 <send_plf_int_msg_ind+0x2c>
1000d5f4:	2d00      	cmp	r5, #0
1000d5f6:	d003      	beq.n	1000d600 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d5f8:	0022      	movs	r2, r4
1000d5fa:	0029      	movs	r1, r5
1000d5fc:	4b03      	ldr	r3, [pc, #12]	; (1000d60c <send_plf_int_msg_ind+0x38>)
1000d5fe:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d600:	0030      	movs	r0, r6
1000d602:	4b03      	ldr	r3, [pc, #12]	; (1000d610 <send_plf_int_msg_ind+0x3c>)
1000d604:	4798      	blx	r3
	}
}
1000d606:	bd70      	pop	{r4, r5, r6, pc}
1000d608:	1001aa3c 	.word	0x1001aa3c
1000d60c:	100122ab 	.word	0x100122ab
1000d610:	1000d20d 	.word	0x1000d20d

1000d614 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d614:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d616:	465f      	mov	r7, fp
1000d618:	4656      	mov	r6, sl
1000d61a:	464d      	mov	r5, r9
1000d61c:	4644      	mov	r4, r8
1000d61e:	b4f0      	push	{r4, r5, r6, r7}
1000d620:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d622:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d624:	2300      	movs	r3, #0
1000d626:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d628:	1ce3      	adds	r3, r4, #3
1000d62a:	d81c      	bhi.n	1000d666 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d62c:	220d      	movs	r2, #13
1000d62e:	2100      	movs	r1, #0
1000d630:	a802      	add	r0, sp, #8
1000d632:	4b82      	ldr	r3, [pc, #520]	; (1000d83c <platform_event_wait+0x228>)
1000d634:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d636:	2333      	movs	r3, #51	; 0x33
1000d638:	aa02      	add	r2, sp, #8
1000d63a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d63c:	3b30      	subs	r3, #48	; 0x30
1000d63e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d640:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d642:	3302      	adds	r3, #2
1000d644:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d646:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d648:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d64a:	0a23      	lsrs	r3, r4, #8
1000d64c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d64e:	0c23      	lsrs	r3, r4, #16
1000d650:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d652:	0e24      	lsrs	r4, r4, #24
1000d654:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d656:	2301      	movs	r3, #1
1000d658:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d65a:	210d      	movs	r1, #13
1000d65c:	0010      	movs	r0, r2
1000d65e:	4b78      	ldr	r3, [pc, #480]	; (1000d840 <platform_event_wait+0x22c>)
1000d660:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d662:	2301      	movs	r3, #1
1000d664:	4699      	mov	r9, r3
1000d666:	2400      	movs	r4, #0
1000d668:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d66a:	4f76      	ldr	r7, [pc, #472]	; (1000d844 <platform_event_wait+0x230>)
1000d66c:	4e76      	ldr	r6, [pc, #472]	; (1000d848 <platform_event_wait+0x234>)
1000d66e:	4977      	ldr	r1, [pc, #476]	; (1000d84c <platform_event_wait+0x238>)
1000d670:	6838      	ldr	r0, [r7, #0]
1000d672:	6833      	ldr	r3, [r6, #0]
1000d674:	4798      	blx	r3
1000d676:	2800      	cmp	r0, #0
1000d678:	d000      	beq.n	1000d67c <platform_event_wait+0x68>
1000d67a:	e088      	b.n	1000d78e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d67c:	4b73      	ldr	r3, [pc, #460]	; (1000d84c <platform_event_wait+0x238>)
1000d67e:	681c      	ldr	r4, [r3, #0]
1000d680:	88a3      	ldrh	r3, [r4, #4]
1000d682:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d684:	23cd      	movs	r3, #205	; 0xcd
1000d686:	009b      	lsls	r3, r3, #2
1000d688:	459a      	cmp	sl, r3
1000d68a:	d100      	bne.n	1000d68e <platform_event_wait+0x7a>
1000d68c:	e0c7      	b.n	1000d81e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d68e:	8923      	ldrh	r3, [r4, #8]
1000d690:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d692:	8963      	ldrh	r3, [r4, #10]
1000d694:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d696:	464b      	mov	r3, r9
1000d698:	2b00      	cmp	r3, #0
1000d69a:	d011      	beq.n	1000d6c0 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d69c:	220d      	movs	r2, #13
1000d69e:	2100      	movs	r1, #0
1000d6a0:	a802      	add	r0, sp, #8
1000d6a2:	4b66      	ldr	r3, [pc, #408]	; (1000d83c <platform_event_wait+0x228>)
1000d6a4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d6a6:	2333      	movs	r3, #51	; 0x33
1000d6a8:	aa02      	add	r2, sp, #8
1000d6aa:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d6ac:	3b30      	subs	r3, #48	; 0x30
1000d6ae:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d6b0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d6b2:	3302      	adds	r3, #2
1000d6b4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d6b6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d6b8:	210d      	movs	r1, #13
1000d6ba:	0010      	movs	r0, r2
1000d6bc:	4b60      	ldr	r3, [pc, #384]	; (1000d840 <platform_event_wait+0x22c>)
1000d6be:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d6c0:	23a0      	movs	r3, #160	; 0xa0
1000d6c2:	00db      	lsls	r3, r3, #3
1000d6c4:	459a      	cmp	sl, r3
1000d6c6:	d121      	bne.n	1000d70c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d6c8:	4b61      	ldr	r3, [pc, #388]	; (1000d850 <platform_event_wait+0x23c>)
1000d6ca:	881b      	ldrh	r3, [r3, #0]
1000d6cc:	4443      	add	r3, r8
1000d6ce:	22a0      	movs	r2, #160	; 0xa0
1000d6d0:	0092      	lsls	r2, r2, #2
1000d6d2:	4293      	cmp	r3, r2
1000d6d4:	dd02      	ble.n	1000d6dc <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d6d6:	3a80      	subs	r2, #128	; 0x80
1000d6d8:	4b5d      	ldr	r3, [pc, #372]	; (1000d850 <platform_event_wait+0x23c>)
1000d6da:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d6dc:	4b5c      	ldr	r3, [pc, #368]	; (1000d850 <platform_event_wait+0x23c>)
1000d6de:	469a      	mov	sl, r3
1000d6e0:	881d      	ldrh	r5, [r3, #0]
1000d6e2:	4b5c      	ldr	r3, [pc, #368]	; (1000d854 <platform_event_wait+0x240>)
1000d6e4:	18ed      	adds	r5, r5, r3
1000d6e6:	0021      	movs	r1, r4
1000d6e8:	310c      	adds	r1, #12
1000d6ea:	4642      	mov	r2, r8
1000d6ec:	0028      	movs	r0, r5
1000d6ee:	4b5a      	ldr	r3, [pc, #360]	; (1000d858 <platform_event_wait+0x244>)
1000d6f0:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d6f2:	4642      	mov	r2, r8
1000d6f4:	0029      	movs	r1, r5
1000d6f6:	4658      	mov	r0, fp
1000d6f8:	4b58      	ldr	r3, [pc, #352]	; (1000d85c <platform_event_wait+0x248>)
1000d6fa:	4798      	blx	r3
				plf_event_buff_index += len;
1000d6fc:	4653      	mov	r3, sl
1000d6fe:	881b      	ldrh	r3, [r3, #0]
1000d700:	4443      	add	r3, r8
1000d702:	4652      	mov	r2, sl
1000d704:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d706:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d708:	2502      	movs	r5, #2
1000d70a:	e03a      	b.n	1000d782 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d70c:	4b54      	ldr	r3, [pc, #336]	; (1000d860 <platform_event_wait+0x24c>)
1000d70e:	681b      	ldr	r3, [r3, #0]
1000d710:	2b00      	cmp	r3, #0
1000d712:	d032      	beq.n	1000d77a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d714:	4b4d      	ldr	r3, [pc, #308]	; (1000d84c <platform_event_wait+0x238>)
1000d716:	681a      	ldr	r2, [r3, #0]
1000d718:	8893      	ldrh	r3, [r2, #4]
1000d71a:	21cd      	movs	r1, #205	; 0xcd
1000d71c:	0089      	lsls	r1, r1, #2
1000d71e:	428b      	cmp	r3, r1
1000d720:	d104      	bne.n	1000d72c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d722:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d724:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d726:	2b00      	cmp	r3, #0
1000d728:	d02b      	beq.n	1000d782 <platform_event_wait+0x16e>
1000d72a:	e028      	b.n	1000d77e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d72c:	4c4d      	ldr	r4, [pc, #308]	; (1000d864 <platform_event_wait+0x250>)
1000d72e:	4d49      	ldr	r5, [pc, #292]	; (1000d854 <platform_event_wait+0x240>)
1000d730:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d732:	702b      	strb	r3, [r5, #0]
1000d734:	0a1b      	lsrs	r3, r3, #8
1000d736:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d738:	8910      	ldrh	r0, [r2, #8]
1000d73a:	4b4b      	ldr	r3, [pc, #300]	; (1000d868 <platform_event_wait+0x254>)
1000d73c:	681b      	ldr	r3, [r3, #0]
1000d73e:	4798      	blx	r3
1000d740:	7128      	strb	r0, [r5, #4]
1000d742:	0a00      	lsrs	r0, r0, #8
1000d744:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d746:	6820      	ldr	r0, [r4, #0]
1000d748:	4b40      	ldr	r3, [pc, #256]	; (1000d84c <platform_event_wait+0x238>)
1000d74a:	681a      	ldr	r2, [r3, #0]
1000d74c:	88d2      	ldrh	r2, [r2, #6]
1000d74e:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d750:	681d      	ldr	r5, [r3, #0]
1000d752:	896b      	ldrh	r3, [r5, #10]
1000d754:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d756:	3008      	adds	r0, #8
1000d758:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d75a:	896a      	ldrh	r2, [r5, #10]
1000d75c:	2a00      	cmp	r2, #0
1000d75e:	d003      	beq.n	1000d768 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d760:	0029      	movs	r1, r5
1000d762:	310c      	adds	r1, #12
1000d764:	4b3c      	ldr	r3, [pc, #240]	; (1000d858 <platform_event_wait+0x244>)
1000d766:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d768:	8969      	ldrh	r1, [r5, #10]
1000d76a:	3108      	adds	r1, #8
1000d76c:	4b3c      	ldr	r3, [pc, #240]	; (1000d860 <platform_event_wait+0x24c>)
1000d76e:	681b      	ldr	r3, [r3, #0]
1000d770:	4838      	ldr	r0, [pc, #224]	; (1000d854 <platform_event_wait+0x240>)
1000d772:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d774:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d776:	2503      	movs	r5, #3
1000d778:	e003      	b.n	1000d782 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d77a:	2400      	movs	r4, #0
1000d77c:	e001      	b.n	1000d782 <platform_event_wait+0x16e>
1000d77e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000d780:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000d782:	4b32      	ldr	r3, [pc, #200]	; (1000d84c <platform_event_wait+0x238>)
1000d784:	6818      	ldr	r0, [r3, #0]
1000d786:	4b39      	ldr	r3, [pc, #228]	; (1000d86c <platform_event_wait+0x258>)
1000d788:	681b      	ldr	r3, [r3, #0]
1000d78a:	4798      	blx	r3
1000d78c:	e000      	b.n	1000d790 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000d78e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000d790:	2c00      	cmp	r4, #0
1000d792:	d000      	beq.n	1000d796 <platform_event_wait+0x182>
1000d794:	e76b      	b.n	1000d66e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000d796:	464b      	mov	r3, r9
1000d798:	2b00      	cmp	r3, #0
1000d79a:	d046      	beq.n	1000d82a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000d79c:	4b29      	ldr	r3, [pc, #164]	; (1000d844 <platform_event_wait+0x230>)
1000d79e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000d7a0:	2e00      	cmp	r6, #0
1000d7a2:	d104      	bne.n	1000d7ae <platform_event_wait+0x19a>
1000d7a4:	2300      	movs	r3, #0
1000d7a6:	6a1c      	ldr	r4, [r3, #32]
1000d7a8:	2c00      	cmp	r4, #0
1000d7aa:	d131      	bne.n	1000d810 <platform_event_wait+0x1fc>
1000d7ac:	e03d      	b.n	1000d82a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000d7ae:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000d7b0:	2314      	movs	r3, #20
1000d7b2:	469c      	mov	ip, r3
1000d7b4:	44b4      	add	ip, r6
1000d7b6:	4663      	mov	r3, ip
1000d7b8:	4660      	mov	r0, ip
1000d7ba:	9300      	str	r3, [sp, #0]
1000d7bc:	4b2c      	ldr	r3, [pc, #176]	; (1000d870 <platform_event_wait+0x25c>)
1000d7be:	681b      	ldr	r3, [r3, #0]
1000d7c0:	4798      	blx	r3
	while(NULL != current)
1000d7c2:	2c00      	cmp	r4, #0
1000d7c4:	d01f      	beq.n	1000d806 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000d7c6:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d7c8:	23cd      	movs	r3, #205	; 0xcd
1000d7ca:	009b      	lsls	r3, r3, #2
1000d7cc:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000d7ce:	4b27      	ldr	r3, [pc, #156]	; (1000d86c <platform_event_wait+0x258>)
1000d7d0:	469a      	mov	sl, r3
1000d7d2:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d7d4:	6803      	ldr	r3, [r0, #0]
1000d7d6:	889b      	ldrh	r3, [r3, #4]
1000d7d8:	4543      	cmp	r3, r8
1000d7da:	d110      	bne.n	1000d7fe <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000d7dc:	2f00      	cmp	r7, #0
1000d7de:	d006      	beq.n	1000d7ee <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000d7e0:	6883      	ldr	r3, [r0, #8]
1000d7e2:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000d7e4:	4653      	mov	r3, sl
1000d7e6:	681b      	ldr	r3, [r3, #0]
1000d7e8:	4798      	blx	r3
				current = prev->pstrNext;
1000d7ea:	68b8      	ldr	r0, [r7, #8]
1000d7ec:	e009      	b.n	1000d802 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000d7ee:	6883      	ldr	r3, [r0, #8]
1000d7f0:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000d7f2:	4b1e      	ldr	r3, [pc, #120]	; (1000d86c <platform_event_wait+0x258>)
1000d7f4:	681b      	ldr	r3, [r3, #0]
1000d7f6:	9301      	str	r3, [sp, #4]
1000d7f8:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000d7fa:	6a30      	ldr	r0, [r6, #32]
1000d7fc:	e001      	b.n	1000d802 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000d7fe:	0007      	movs	r7, r0
1000d800:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000d802:	2800      	cmp	r0, #0
1000d804:	d1e6      	bne.n	1000d7d4 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000d806:	4b1b      	ldr	r3, [pc, #108]	; (1000d874 <platform_event_wait+0x260>)
1000d808:	681b      	ldr	r3, [r3, #0]
1000d80a:	9800      	ldr	r0, [sp, #0]
1000d80c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d80e:	e00c      	b.n	1000d82a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d810:	2314      	movs	r3, #20
1000d812:	9300      	str	r3, [sp, #0]
1000d814:	4b16      	ldr	r3, [pc, #88]	; (1000d870 <platform_event_wait+0x25c>)
1000d816:	681b      	ldr	r3, [r3, #0]
1000d818:	2014      	movs	r0, #20
1000d81a:	4798      	blx	r3
1000d81c:	e7d3      	b.n	1000d7c6 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d81e:	4b10      	ldr	r3, [pc, #64]	; (1000d860 <platform_event_wait+0x24c>)
1000d820:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d822:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d824:	2b00      	cmp	r3, #0
1000d826:	d0ac      	beq.n	1000d782 <platform_event_wait+0x16e>
1000d828:	e77b      	b.n	1000d722 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d82a:	0028      	movs	r0, r5
1000d82c:	b007      	add	sp, #28
1000d82e:	bc3c      	pop	{r2, r3, r4, r5}
1000d830:	4690      	mov	r8, r2
1000d832:	4699      	mov	r9, r3
1000d834:	46a2      	mov	sl, r4
1000d836:	46ab      	mov	fp, r5
1000d838:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d83a:	46c0      	nop			; (mov r8, r8)
1000d83c:	100122bd 	.word	0x100122bd
1000d840:	1000d585 	.word	0x1000d585
1000d844:	1001aa40 	.word	0x1001aa40
1000d848:	1001aa28 	.word	0x1001aa28
1000d84c:	1001aa34 	.word	0x1001aa34
1000d850:	1001b9e4 	.word	0x1001b9e4
1000d854:	1001b74c 	.word	0x1001b74c
1000d858:	100122ab 	.word	0x100122ab
1000d85c:	1000d1a5 	.word	0x1000d1a5
1000d860:	1001aa30 	.word	0x1001aa30
1000d864:	1001aa20 	.word	0x1001aa20
1000d868:	1001aa00 	.word	0x1001aa00
1000d86c:	1001a9fc 	.word	0x1001a9fc
1000d870:	1001aa1c 	.word	0x1001aa1c
1000d874:	1001aa08 	.word	0x1001aa08

1000d878 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d878:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d87a:	4b03      	ldr	r3, [pc, #12]	; (1000d888 <acquire_sleep_lock+0x10>)
1000d87c:	681b      	ldr	r3, [r3, #0]
1000d87e:	2080      	movs	r0, #128	; 0x80
1000d880:	0200      	lsls	r0, r0, #8
1000d882:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d884:	2008      	movs	r0, #8
1000d886:	bd10      	pop	{r4, pc}
1000d888:	1001b704 	.word	0x1001b704

1000d88c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d88c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d88e:	4b03      	ldr	r3, [pc, #12]	; (1000d89c <release_message_lock+0x10>)
1000d890:	681b      	ldr	r3, [r3, #0]
1000d892:	2080      	movs	r0, #128	; 0x80
1000d894:	01c0      	lsls	r0, r0, #7
1000d896:	4798      	blx	r3
	return status;
}
1000d898:	2000      	movs	r0, #0
1000d89a:	bd10      	pop	{r4, pc}
1000d89c:	1001b710 	.word	0x1001b710

1000d8a0 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d8a0:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d8a2:	4c05      	ldr	r4, [pc, #20]	; (1000d8b8 <release_sleep_lock+0x18>)
1000d8a4:	2080      	movs	r0, #128	; 0x80
1000d8a6:	01c0      	lsls	r0, r0, #7
1000d8a8:	6823      	ldr	r3, [r4, #0]
1000d8aa:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d8ac:	6823      	ldr	r3, [r4, #0]
1000d8ae:	2080      	movs	r0, #128	; 0x80
1000d8b0:	0200      	lsls	r0, r0, #8
1000d8b2:	4798      	blx	r3
	return status;
}
1000d8b4:	2000      	movs	r0, #0
1000d8b6:	bd10      	pop	{r4, pc}
1000d8b8:	1001b710 	.word	0x1001b710

1000d8bc <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d8bc:	2800      	cmp	r0, #0
1000d8be:	d003      	beq.n	1000d8c8 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d8c0:	4b02      	ldr	r3, [pc, #8]	; (1000d8cc <register_resume_callback+0x10>)
1000d8c2:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d8c4:	2000      	movs	r0, #0
1000d8c6:	e000      	b.n	1000d8ca <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d8c8:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d8ca:	4770      	bx	lr
1000d8cc:	1001b9d8 	.word	0x1001b9d8

1000d8d0 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d8d0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d8d2:	4a18      	ldr	r2, [pc, #96]	; (1000d934 <gpio1_combined_isr_handler+0x64>)
1000d8d4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d8d6:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d8d8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d8da:	2180      	movs	r1, #128	; 0x80
1000d8dc:	0209      	lsls	r1, r1, #8
1000d8de:	4301      	orrs	r1, r0
1000d8e0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d8e2:	0010      	movs	r0, r2
1000d8e4:	4d14      	ldr	r5, [pc, #80]	; (1000d938 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d8e6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d8e8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d8ea:	05db      	lsls	r3, r3, #23
1000d8ec:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d8ee:	d011      	beq.n	1000d914 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d8f0:	b2db      	uxtb	r3, r3
1000d8f2:	4259      	negs	r1, r3
1000d8f4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d8f6:	2b01      	cmp	r3, #1
1000d8f8:	d006      	beq.n	1000d908 <gpio1_combined_isr_handler+0x38>
1000d8fa:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d8fc:	085b      	lsrs	r3, r3, #1
				index++;
1000d8fe:	3101      	adds	r1, #1
1000d900:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d902:	2b01      	cmp	r3, #1
1000d904:	d1fa      	bne.n	1000d8fc <gpio1_combined_isr_handler+0x2c>
1000d906:	e000      	b.n	1000d90a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d908:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d90a:	0023      	movs	r3, r4
1000d90c:	408b      	lsls	r3, r1
1000d90e:	b29b      	uxth	r3, r3
1000d910:	8703      	strh	r3, [r0, #56]	; 0x38
1000d912:	e003      	b.n	1000d91c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d914:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d916:	432b      	orrs	r3, r5
1000d918:	b29b      	uxth	r3, r3
1000d91a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d91c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d91e:	05db      	lsls	r3, r3, #23
1000d920:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d922:	d1e2      	bne.n	1000d8ea <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d924:	2180      	movs	r1, #128	; 0x80
1000d926:	0049      	lsls	r1, r1, #1
1000d928:	3381      	adds	r3, #129	; 0x81
1000d92a:	33ff      	adds	r3, #255	; 0xff
1000d92c:	4a03      	ldr	r2, [pc, #12]	; (1000d93c <gpio1_combined_isr_handler+0x6c>)
1000d92e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d930:	bd30      	pop	{r4, r5, pc}
1000d932:	46c0      	nop			; (mov r8, r8)
1000d934:	40011000 	.word	0x40011000
1000d938:	ffff8000 	.word	0xffff8000
1000d93c:	e000e100 	.word	0xe000e100

1000d940 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d940:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d942:	4a17      	ldr	r2, [pc, #92]	; (1000d9a0 <gpio0_combined_isr_handler+0x60>)
1000d944:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d946:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d948:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d94a:	2180      	movs	r1, #128	; 0x80
1000d94c:	0209      	lsls	r1, r1, #8
1000d94e:	4301      	orrs	r1, r0
1000d950:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d952:	0010      	movs	r0, r2
1000d954:	4d13      	ldr	r5, [pc, #76]	; (1000d9a4 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d956:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d958:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d95a:	05db      	lsls	r3, r3, #23
1000d95c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d95e:	d011      	beq.n	1000d984 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d960:	b2db      	uxtb	r3, r3
1000d962:	4259      	negs	r1, r3
1000d964:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d966:	2b01      	cmp	r3, #1
1000d968:	d006      	beq.n	1000d978 <gpio0_combined_isr_handler+0x38>
1000d96a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d96c:	085b      	lsrs	r3, r3, #1
				index++;
1000d96e:	3101      	adds	r1, #1
1000d970:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d972:	2b01      	cmp	r3, #1
1000d974:	d1fa      	bne.n	1000d96c <gpio0_combined_isr_handler+0x2c>
1000d976:	e000      	b.n	1000d97a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d978:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d97a:	0023      	movs	r3, r4
1000d97c:	408b      	lsls	r3, r1
1000d97e:	b29b      	uxth	r3, r3
1000d980:	8703      	strh	r3, [r0, #56]	; 0x38
1000d982:	e003      	b.n	1000d98c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d984:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d986:	432b      	orrs	r3, r5
1000d988:	b29b      	uxth	r3, r3
1000d98a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d98c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d98e:	05db      	lsls	r3, r3, #23
1000d990:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d992:	d1e2      	bne.n	1000d95a <gpio0_combined_isr_handler+0x1a>
1000d994:	2180      	movs	r1, #128	; 0x80
1000d996:	3381      	adds	r3, #129	; 0x81
1000d998:	33ff      	adds	r3, #255	; 0xff
1000d99a:	4a03      	ldr	r2, [pc, #12]	; (1000d9a8 <gpio0_combined_isr_handler+0x68>)
1000d99c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d99e:	bd30      	pop	{r4, r5, pc}
1000d9a0:	40010000 	.word	0x40010000
1000d9a4:	ffff8000 	.word	0xffff8000
1000d9a8:	e000e100 	.word	0xe000e100

1000d9ac <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d9ac:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d9ae:	4b0c      	ldr	r3, [pc, #48]	; (1000d9e0 <PORT1_COMB_Handler+0x34>)
1000d9b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d9b2:	0b5b      	lsrs	r3, r3, #13
1000d9b4:	d010      	beq.n	1000d9d8 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d9b6:	4b0b      	ldr	r3, [pc, #44]	; (1000d9e4 <PORT1_COMB_Handler+0x38>)
1000d9b8:	681b      	ldr	r3, [r3, #0]
1000d9ba:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d9bc:	4a08      	ldr	r2, [pc, #32]	; (1000d9e0 <PORT1_COMB_Handler+0x34>)
1000d9be:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d9c0:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d9c2:	0b5b      	lsrs	r3, r3, #13
1000d9c4:	035b      	lsls	r3, r3, #13
1000d9c6:	430b      	orrs	r3, r1
1000d9c8:	8713      	strh	r3, [r2, #56]	; 0x38
1000d9ca:	2180      	movs	r1, #128	; 0x80
1000d9cc:	0049      	lsls	r1, r1, #1
1000d9ce:	23c0      	movs	r3, #192	; 0xc0
1000d9d0:	005b      	lsls	r3, r3, #1
1000d9d2:	4a05      	ldr	r2, [pc, #20]	; (1000d9e8 <PORT1_COMB_Handler+0x3c>)
1000d9d4:	50d1      	str	r1, [r2, r3]
1000d9d6:	e001      	b.n	1000d9dc <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d9d8:	4b04      	ldr	r3, [pc, #16]	; (1000d9ec <PORT1_COMB_Handler+0x40>)
1000d9da:	4798      	blx	r3
	}
}
1000d9dc:	bd10      	pop	{r4, pc}
1000d9de:	46c0      	nop			; (mov r8, r8)
1000d9e0:	40011000 	.word	0x40011000
1000d9e4:	1001b9d0 	.word	0x1001b9d0
1000d9e8:	e000e100 	.word	0xe000e100
1000d9ec:	1000d8d1 	.word	0x1000d8d1

1000d9f0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d9f0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d9f2:	2802      	cmp	r0, #2
1000d9f4:	d804      	bhi.n	1000da00 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d9f6:	0080      	lsls	r0, r0, #2
1000d9f8:	2200      	movs	r2, #0
1000d9fa:	4b02      	ldr	r3, [pc, #8]	; (1000da04 <wakeup_int_unregister_callback+0x14>)
1000d9fc:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d9fe:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000da00:	0018      	movs	r0, r3
1000da02:	4770      	bx	lr
1000da04:	1001b9e8 	.word	0x1001b9e8

1000da08 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000da08:	b510      	push	{r4, lr}
1000da0a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000da0c:	7803      	ldrb	r3, [r0, #0]
1000da0e:	2b01      	cmp	r3, #1
1000da10:	d108      	bne.n	1000da24 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000da12:	4b11      	ldr	r3, [pc, #68]	; (1000da58 <wakeup_active_event_callback+0x50>)
1000da14:	681b      	ldr	r3, [r3, #0]
1000da16:	2b00      	cmp	r3, #0
1000da18:	d000      	beq.n	1000da1c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000da1a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000da1c:	23ff      	movs	r3, #255	; 0xff
1000da1e:	6822      	ldr	r2, [r4, #0]
1000da20:	439a      	bics	r2, r3
1000da22:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000da24:	7863      	ldrb	r3, [r4, #1]
1000da26:	2b01      	cmp	r3, #1
1000da28:	d108      	bne.n	1000da3c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000da2a:	4b0b      	ldr	r3, [pc, #44]	; (1000da58 <wakeup_active_event_callback+0x50>)
1000da2c:	685b      	ldr	r3, [r3, #4]
1000da2e:	2b00      	cmp	r3, #0
1000da30:	d000      	beq.n	1000da34 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000da32:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000da34:	4b09      	ldr	r3, [pc, #36]	; (1000da5c <wakeup_active_event_callback+0x54>)
1000da36:	6822      	ldr	r2, [r4, #0]
1000da38:	4013      	ands	r3, r2
1000da3a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000da3c:	78a3      	ldrb	r3, [r4, #2]
1000da3e:	2b01      	cmp	r3, #1
1000da40:	d108      	bne.n	1000da54 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000da42:	4b05      	ldr	r3, [pc, #20]	; (1000da58 <wakeup_active_event_callback+0x50>)
1000da44:	689b      	ldr	r3, [r3, #8]
1000da46:	2b00      	cmp	r3, #0
1000da48:	d000      	beq.n	1000da4c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000da4a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000da4c:	4b04      	ldr	r3, [pc, #16]	; (1000da60 <wakeup_active_event_callback+0x58>)
1000da4e:	6822      	ldr	r2, [r4, #0]
1000da50:	4013      	ands	r3, r2
1000da52:	6023      	str	r3, [r4, #0]
	}
}
1000da54:	bd10      	pop	{r4, pc}
1000da56:	46c0      	nop			; (mov r8, r8)
1000da58:	1001b9e8 	.word	0x1001b9e8
1000da5c:	ffff00ff 	.word	0xffff00ff
1000da60:	ff00ffff 	.word	0xff00ffff

1000da64 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000da64:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000da66:	4b08      	ldr	r3, [pc, #32]	; (1000da88 <resume_cb+0x24>)
1000da68:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000da6a:	4b08      	ldr	r3, [pc, #32]	; (1000da8c <resume_cb+0x28>)
1000da6c:	4798      	blx	r3
	sms_dualtimer_init();
1000da6e:	4b08      	ldr	r3, [pc, #32]	; (1000da90 <resume_cb+0x2c>)
1000da70:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000da72:	4b08      	ldr	r3, [pc, #32]	; (1000da94 <resume_cb+0x30>)
1000da74:	4798      	blx	r3
	sms_led_gpio_init();
1000da76:	4b08      	ldr	r3, [pc, #32]	; (1000da98 <resume_cb+0x34>)
1000da78:	4798      	blx	r3
	sms_spi_master_configure();
1000da7a:	4b08      	ldr	r3, [pc, #32]	; (1000da9c <resume_cb+0x38>)
1000da7c:	4798      	blx	r3
	sms_i2c_master_configure();
1000da7e:	4b08      	ldr	r3, [pc, #32]	; (1000daa0 <resume_cb+0x3c>)
1000da80:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000da82:	4b08      	ldr	r3, [pc, #32]	; (1000daa4 <resume_cb+0x40>)
1000da84:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000da86:	bd10      	pop	{r4, pc}
1000da88:	1000d2b1 	.word	0x1000d2b1
1000da8c:	1000d019 	.word	0x1000d019
1000da90:	10009e31 	.word	0x10009e31
1000da94:	100089fd 	.word	0x100089fd
1000da98:	1000990d 	.word	0x1000990d
1000da9c:	10009ce5 	.word	0x10009ce5
1000daa0:	10008c5d 	.word	0x10008c5d
1000daa4:	10008b85 	.word	0x10008b85

1000daa8 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000daa8:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000daaa:	2300      	movs	r3, #0
1000daac:	4a09      	ldr	r2, [pc, #36]	; (1000dad4 <sms_init_variables+0x2c>)
1000daae:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000dab0:	4a09      	ldr	r2, [pc, #36]	; (1000dad8 <sms_init_variables+0x30>)
1000dab2:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000dab4:	2101      	movs	r1, #1
1000dab6:	4a09      	ldr	r2, [pc, #36]	; (1000dadc <sms_init_variables+0x34>)
1000dab8:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000daba:	4a09      	ldr	r2, [pc, #36]	; (1000dae0 <sms_init_variables+0x38>)
1000dabc:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000dabe:	2201      	movs	r2, #1
1000dac0:	4252      	negs	r2, r2
1000dac2:	4b08      	ldr	r3, [pc, #32]	; (1000dae4 <sms_init_variables+0x3c>)
1000dac4:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000dac6:	4b08      	ldr	r3, [pc, #32]	; (1000dae8 <sms_init_variables+0x40>)
1000dac8:	4798      	blx	r3
	sms_button_init_variables();
1000daca:	4b08      	ldr	r3, [pc, #32]	; (1000daec <sms_init_variables+0x44>)
1000dacc:	4798      	blx	r3
	sms_pressure_init_variables();
1000dace:	4b08      	ldr	r3, [pc, #32]	; (1000daf0 <sms_init_variables+0x48>)
1000dad0:	4798      	blx	r3
}
1000dad2:	bd10      	pop	{r4, pc}
1000dad4:	1001ab14 	.word	0x1001ab14
1000dad8:	1001ad2f 	.word	0x1001ad2f
1000dadc:	1001abec 	.word	0x1001abec
1000dae0:	1001abed 	.word	0x1001abed
1000dae4:	1001abe8 	.word	0x1001abe8
1000dae8:	10008539 	.word	0x10008539
1000daec:	100089d5 	.word	0x100089d5
1000daf0:	100099a1 	.word	0x100099a1

1000daf4 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000daf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000daf6:	b08d      	sub	sp, #52	; 0x34
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000daf8:	2210      	movs	r2, #16
1000dafa:	4b4e      	ldr	r3, [pc, #312]	; (1000dc34 <main+0x140>)
1000dafc:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000dafe:	4b4e      	ldr	r3, [pc, #312]	; (1000dc38 <main+0x144>)
1000db00:	4798      	blx	r3
	gpio_init(); // GPIO
1000db02:	4b4e      	ldr	r3, [pc, #312]	; (1000dc3c <main+0x148>)
1000db04:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000db06:	4b4e      	ldr	r3, [pc, #312]	; (1000dc40 <main+0x14c>)
1000db08:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000db0a:	4b4e      	ldr	r3, [pc, #312]	; (1000dc44 <main+0x150>)
1000db0c:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000db0e:	4b4e      	ldr	r3, [pc, #312]	; (1000dc48 <main+0x154>)
1000db10:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000db12:	4b4e      	ldr	r3, [pc, #312]	; (1000dc4c <main+0x158>)
1000db14:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000db16:	4b4e      	ldr	r3, [pc, #312]	; (1000dc50 <main+0x15c>)
1000db18:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000db1a:	4b4e      	ldr	r3, [pc, #312]	; (1000dc54 <main+0x160>)
1000db1c:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000db1e:	4b4e      	ldr	r3, [pc, #312]	; (1000dc58 <main+0x164>)
1000db20:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000db22:	4b4e      	ldr	r3, [pc, #312]	; (1000dc5c <main+0x168>)
1000db24:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000db26:	4b4e      	ldr	r3, [pc, #312]	; (1000dc60 <main+0x16c>)
1000db28:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000db2a:	4b4e      	ldr	r3, [pc, #312]	; (1000dc64 <main+0x170>)
1000db2c:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000db2e:	2000      	movs	r0, #0
1000db30:	4b4d      	ldr	r3, [pc, #308]	; (1000dc68 <main+0x174>)
1000db32:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000db34:	4b4d      	ldr	r3, [pc, #308]	; (1000dc6c <main+0x178>)
1000db36:	4798      	blx	r3
	sms_pressure_define_services();
1000db38:	4b4d      	ldr	r3, [pc, #308]	; (1000dc70 <main+0x17c>)
1000db3a:	4798      	blx	r3
	sms_mpu_define_services();
1000db3c:	4b4d      	ldr	r3, [pc, #308]	; (1000dc74 <main+0x180>)
1000db3e:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000db40:	484d      	ldr	r0, [pc, #308]	; (1000dc78 <main+0x184>)
1000db42:	4b4e      	ldr	r3, [pc, #312]	; (1000dc7c <main+0x188>)
1000db44:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000db46:	494e      	ldr	r1, [pc, #312]	; (1000dc80 <main+0x18c>)
1000db48:	2000      	movs	r0, #0
1000db4a:	4b4e      	ldr	r3, [pc, #312]	; (1000dc84 <main+0x190>)
1000db4c:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000db4e:	4b4e      	ldr	r3, [pc, #312]	; (1000dc88 <main+0x194>)
1000db50:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000db52:	4b4e      	ldr	r3, [pc, #312]	; (1000dc8c <main+0x198>)
1000db54:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000db56:	4a4e      	ldr	r2, [pc, #312]	; (1000dc90 <main+0x19c>)
1000db58:	2100      	movs	r1, #0
1000db5a:	2000      	movs	r0, #0
1000db5c:	4c4d      	ldr	r4, [pc, #308]	; (1000dc94 <main+0x1a0>)
1000db5e:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000db60:	4a4d      	ldr	r2, [pc, #308]	; (1000dc98 <main+0x1a4>)
1000db62:	2102      	movs	r1, #2
1000db64:	2000      	movs	r0, #0
1000db66:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000db68:	2100      	movs	r1, #0
1000db6a:	2000      	movs	r0, #0
1000db6c:	4b4b      	ldr	r3, [pc, #300]	; (1000dc9c <main+0x1a8>)
1000db6e:	4798      	blx	r3

	if(sms_mpu_check()) {
1000db70:	4b4b      	ldr	r3, [pc, #300]	; (1000dca0 <main+0x1ac>)
1000db72:	4798      	blx	r3
1000db74:	2800      	cmp	r0, #0
1000db76:	d005      	beq.n	1000db84 <main+0x90>
		DBG_LOG("MPU not here...");
1000db78:	484a      	ldr	r0, [pc, #296]	; (1000dca4 <main+0x1b0>)
1000db7a:	4b4b      	ldr	r3, [pc, #300]	; (1000dca8 <main+0x1b4>)
1000db7c:	4798      	blx	r3
1000db7e:	484b      	ldr	r0, [pc, #300]	; (1000dcac <main+0x1b8>)
1000db80:	4b4b      	ldr	r3, [pc, #300]	; (1000dcb0 <main+0x1bc>)
1000db82:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.gyro_bias, mpu_device.accel_bias);
1000db84:	4c4b      	ldr	r4, [pc, #300]	; (1000dcb4 <main+0x1c0>)
1000db86:	0020      	movs	r0, r4
1000db88:	380c      	subs	r0, #12
1000db8a:	0021      	movs	r1, r4
1000db8c:	4b4a      	ldr	r3, [pc, #296]	; (1000dcb8 <main+0x1c4>)
1000db8e:	4798      	blx	r3
	
	sms_mpu_initialize();
1000db90:	4b4a      	ldr	r3, [pc, #296]	; (1000dcbc <main+0x1c8>)
1000db92:	4798      	blx	r3
	DBG_LOG("MPU-9250 initialized...");
1000db94:	4e43      	ldr	r6, [pc, #268]	; (1000dca4 <main+0x1b0>)
1000db96:	0030      	movs	r0, r6
1000db98:	4d43      	ldr	r5, [pc, #268]	; (1000dca8 <main+0x1b4>)
1000db9a:	47a8      	blx	r5
1000db9c:	4848      	ldr	r0, [pc, #288]	; (1000dcc0 <main+0x1cc>)
1000db9e:	4f44      	ldr	r7, [pc, #272]	; (1000dcb0 <main+0x1bc>)
1000dba0:	47b8      	blx	r7
	DBG_LOG("Bias values:\n\rgyroX %d, gyroY %d, gyroZ %d\n\raccelX %d, accelY %d, accelZ %d", mpu_device.gyro_bias[0], mpu_device.gyro_bias[1], mpu_device.gyro_bias[2], mpu_device.accel_bias[0], mpu_device.accel_bias[1], mpu_device.accel_bias[2]);
1000dba2:	0030      	movs	r0, r6
1000dba4:	47a8      	blx	r5
1000dba6:	3c54      	subs	r4, #84	; 0x54
1000dba8:	4d46      	ldr	r5, [pc, #280]	; (1000dcc4 <main+0x1d0>)
1000dbaa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000dbac:	47a8      	blx	r5
1000dbae:	900a      	str	r0, [sp, #40]	; 0x28
1000dbb0:	910b      	str	r1, [sp, #44]	; 0x2c
1000dbb2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
1000dbb4:	47a8      	blx	r5
1000dbb6:	9008      	str	r0, [sp, #32]
1000dbb8:	9109      	str	r1, [sp, #36]	; 0x24
1000dbba:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000dbbc:	47a8      	blx	r5
1000dbbe:	9006      	str	r0, [sp, #24]
1000dbc0:	9107      	str	r1, [sp, #28]
1000dbc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000dbc4:	47a8      	blx	r5
1000dbc6:	9004      	str	r0, [sp, #16]
1000dbc8:	9105      	str	r1, [sp, #20]
1000dbca:	6d20      	ldr	r0, [r4, #80]	; 0x50
1000dbcc:	47a8      	blx	r5
1000dbce:	9002      	str	r0, [sp, #8]
1000dbd0:	9103      	str	r1, [sp, #12]
1000dbd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
1000dbd4:	47a8      	blx	r5
1000dbd6:	9000      	str	r0, [sp, #0]
1000dbd8:	9101      	str	r1, [sp, #4]
1000dbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000dbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000dbde:	483a      	ldr	r0, [pc, #232]	; (1000dcc8 <main+0x1d4>)
1000dbe0:	47b8      	blx	r7
	
	if(sms_mpu_comp_check()) {
1000dbe2:	4b3a      	ldr	r3, [pc, #232]	; (1000dccc <main+0x1d8>)
1000dbe4:	4798      	blx	r3
1000dbe6:	2800      	cmp	r0, #0
1000dbe8:	d005      	beq.n	1000dbf6 <main+0x102>
		DBG_LOG("Compass not here...");
1000dbea:	482e      	ldr	r0, [pc, #184]	; (1000dca4 <main+0x1b0>)
1000dbec:	4b2e      	ldr	r3, [pc, #184]	; (1000dca8 <main+0x1b4>)
1000dbee:	4798      	blx	r3
1000dbf0:	4837      	ldr	r0, [pc, #220]	; (1000dcd0 <main+0x1dc>)
1000dbf2:	4b2f      	ldr	r3, [pc, #188]	; (1000dcb0 <main+0x1bc>)
1000dbf4:	4798      	blx	r3
	}
	
	sms_mpu_comp_initialize(mpu_device.mag_calibration);
1000dbf6:	4c37      	ldr	r4, [pc, #220]	; (1000dcd4 <main+0x1e0>)
1000dbf8:	0020      	movs	r0, r4
1000dbfa:	4b37      	ldr	r3, [pc, #220]	; (1000dcd8 <main+0x1e4>)
1000dbfc:	4798      	blx	r3
	DBG_LOG("Compass initialized...");
1000dbfe:	4e29      	ldr	r6, [pc, #164]	; (1000dca4 <main+0x1b0>)
1000dc00:	0030      	movs	r0, r6
1000dc02:	4d29      	ldr	r5, [pc, #164]	; (1000dca8 <main+0x1b4>)
1000dc04:	47a8      	blx	r5
1000dc06:	4835      	ldr	r0, [pc, #212]	; (1000dcdc <main+0x1e8>)
1000dc08:	4f29      	ldr	r7, [pc, #164]	; (1000dcb0 <main+0x1bc>)
1000dc0a:	47b8      	blx	r7
	DBG_LOG("Calibration values: x %d, y %d, z %d", mpu_device.mag_calibration[0], mpu_device.mag_calibration[1], mpu_device.mag_calibration[2]);
1000dc0c:	0030      	movs	r0, r6
1000dc0e:	47a8      	blx	r5
1000dc10:	4d2c      	ldr	r5, [pc, #176]	; (1000dcc4 <main+0x1d0>)
1000dc12:	6820      	ldr	r0, [r4, #0]
1000dc14:	47a8      	blx	r5
1000dc16:	900a      	str	r0, [sp, #40]	; 0x28
1000dc18:	910b      	str	r1, [sp, #44]	; 0x2c
1000dc1a:	68a0      	ldr	r0, [r4, #8]
1000dc1c:	47a8      	blx	r5
1000dc1e:	9002      	str	r0, [sp, #8]
1000dc20:	9103      	str	r1, [sp, #12]
1000dc22:	6860      	ldr	r0, [r4, #4]
1000dc24:	47a8      	blx	r5
1000dc26:	9000      	str	r0, [sp, #0]
1000dc28:	9101      	str	r1, [sp, #4]
1000dc2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000dc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000dc2e:	482c      	ldr	r0, [pc, #176]	; (1000dce0 <main+0x1ec>)
1000dc30:	47b8      	blx	r7
1000dc32:	e7fe      	b.n	1000dc32 <main+0x13e>
1000dc34:	1001abf0 	.word	0x1001abf0
1000dc38:	1000d325 	.word	0x1000d325
1000dc3c:	1000aab5 	.word	0x1000aab5
1000dc40:	1000d019 	.word	0x1000d019
1000dc44:	1000d879 	.word	0x1000d879
1000dc48:	1000daa9 	.word	0x1000daa9
1000dc4c:	10009e31 	.word	0x10009e31
1000dc50:	100089fd 	.word	0x100089fd
1000dc54:	1000990d 	.word	0x1000990d
1000dc58:	10008c5d 	.word	0x10008c5d
1000dc5c:	10009ce5 	.word	0x10009ce5
1000dc60:	10008df1 	.word	0x10008df1
1000dc64:	10008b85 	.word	0x10008b85
1000dc68:	1000c855 	.word	0x1000c855
1000dc6c:	10008b1d 	.word	0x10008b1d
1000dc70:	10009bb9 	.word	0x10009bb9
1000dc74:	10008e55 	.word	0x10008e55
1000dc78:	1000da65 	.word	0x1000da65
1000dc7c:	1000d8bd 	.word	0x1000d8bd
1000dc80:	10009ef9 	.word	0x10009ef9
1000dc84:	10009e75 	.word	0x10009e75
1000dc88:	10008aad 	.word	0x10008aad
1000dc8c:	10008e3d 	.word	0x10008e3d
1000dc90:	100177a0 	.word	0x100177a0
1000dc94:	1000c785 	.word	0x1000c785
1000dc98:	100177ec 	.word	0x100177ec
1000dc9c:	10008ad5 	.word	0x10008ad5
1000dca0:	10009899 	.word	0x10009899
1000dca4:	10017434 	.word	0x10017434
1000dca8:	10012e11 	.word	0x10012e11
1000dcac:	10018b7c 	.word	0x10018b7c
1000dcb0:	10012cf1 	.word	0x10012cf1
1000dcb4:	1001ab6c 	.word	0x1001ab6c
1000dcb8:	10008ed9 	.word	0x10008ed9
1000dcbc:	10009409 	.word	0x10009409
1000dcc0:	10018b8c 	.word	0x10018b8c
1000dcc4:	10017239 	.word	0x10017239
1000dcc8:	10018ba4 	.word	0x10018ba4
1000dccc:	100093d1 	.word	0x100093d1
1000dcd0:	10018bf0 	.word	0x10018bf0
1000dcd4:	1001ab78 	.word	0x1001ab78
1000dcd8:	100092cd 	.word	0x100092cd
1000dcdc:	10018c04 	.word	0x10018c04
1000dce0:	10018c1c 	.word	0x10018c1c

1000dce4 <internal_event_post>:
1000dce4:	b570      	push	{r4, r5, r6, lr}
1000dce6:	4d12      	ldr	r5, [pc, #72]	; (1000dd30 <internal_event_post+0x4c>)
1000dce8:	682c      	ldr	r4, [r5, #0]
1000dcea:	2c00      	cmp	r4, #0
1000dcec:	d014      	beq.n	1000dd18 <internal_event_post+0x34>
1000dcee:	6826      	ldr	r6, [r4, #0]
1000dcf0:	60e2      	str	r2, [r4, #12]
1000dcf2:	602e      	str	r6, [r5, #0]
1000dcf4:	2500      	movs	r5, #0
1000dcf6:	4a0f      	ldr	r2, [pc, #60]	; (1000dd34 <internal_event_post+0x50>)
1000dcf8:	8123      	strh	r3, [r4, #8]
1000dcfa:	6813      	ldr	r3, [r2, #0]
1000dcfc:	6025      	str	r5, [r4, #0]
1000dcfe:	80a0      	strh	r0, [r4, #4]
1000dd00:	80e1      	strh	r1, [r4, #6]
1000dd02:	42ab      	cmp	r3, r5
1000dd04:	d101      	bne.n	1000dd0a <internal_event_post+0x26>
1000dd06:	6014      	str	r4, [r2, #0]
1000dd08:	e011      	b.n	1000dd2e <internal_event_post+0x4a>
1000dd0a:	681a      	ldr	r2, [r3, #0]
1000dd0c:	2a00      	cmp	r2, #0
1000dd0e:	d001      	beq.n	1000dd14 <internal_event_post+0x30>
1000dd10:	1c13      	adds	r3, r2, #0
1000dd12:	e7fa      	b.n	1000dd0a <internal_event_post+0x26>
1000dd14:	601c      	str	r4, [r3, #0]
1000dd16:	e00a      	b.n	1000dd2e <internal_event_post+0x4a>
1000dd18:	b2c4      	uxtb	r4, r0
1000dd1a:	2c00      	cmp	r4, #0
1000dd1c:	d107      	bne.n	1000dd2e <internal_event_post+0x4a>
1000dd1e:	4c06      	ldr	r4, [pc, #24]	; (1000dd38 <internal_event_post+0x54>)
1000dd20:	60e2      	str	r2, [r4, #12]
1000dd22:	2201      	movs	r2, #1
1000dd24:	8123      	strh	r3, [r4, #8]
1000dd26:	4b05      	ldr	r3, [pc, #20]	; (1000dd3c <internal_event_post+0x58>)
1000dd28:	80a0      	strh	r0, [r4, #4]
1000dd2a:	80e1      	strh	r1, [r4, #6]
1000dd2c:	701a      	strb	r2, [r3, #0]
1000dd2e:	bd70      	pop	{r4, r5, r6, pc}
1000dd30:	1001aa5c 	.word	0x1001aa5c
1000dd34:	1001aa58 	.word	0x1001aa58
1000dd38:	1001aa44 	.word	0x1001aa44
1000dd3c:	1001aa54 	.word	0x1001aa54

1000dd40 <internal_event_init>:
1000dd40:	b510      	push	{r4, lr}
1000dd42:	4b08      	ldr	r3, [pc, #32]	; (1000dd64 <internal_event_init+0x24>)
1000dd44:	0900      	lsrs	r0, r0, #4
1000dd46:	0100      	lsls	r0, r0, #4
1000dd48:	681a      	ldr	r2, [r3, #0]
1000dd4a:	1808      	adds	r0, r1, r0
1000dd4c:	4281      	cmp	r1, r0
1000dd4e:	d003      	beq.n	1000dd58 <internal_event_init+0x18>
1000dd50:	600a      	str	r2, [r1, #0]
1000dd52:	1c0a      	adds	r2, r1, #0
1000dd54:	3110      	adds	r1, #16
1000dd56:	e7f9      	b.n	1000dd4c <internal_event_init+0xc>
1000dd58:	601a      	str	r2, [r3, #0]
1000dd5a:	2200      	movs	r2, #0
1000dd5c:	4b02      	ldr	r3, [pc, #8]	; (1000dd68 <internal_event_init+0x28>)
1000dd5e:	601a      	str	r2, [r3, #0]
1000dd60:	bd10      	pop	{r4, pc}
1000dd62:	46c0      	nop			; (mov r8, r8)
1000dd64:	1001aa5c 	.word	0x1001aa5c
1000dd68:	1001aa58 	.word	0x1001aa58

1000dd6c <special_events_handler>:
1000dd6c:	b538      	push	{r3, r4, r5, lr}
1000dd6e:	4c1b      	ldr	r4, [pc, #108]	; (1000dddc <special_events_handler+0x70>)
1000dd70:	1c03      	adds	r3, r0, #0
1000dd72:	8825      	ldrh	r5, [r4, #0]
1000dd74:	1c08      	adds	r0, r1, #0
1000dd76:	1c21      	adds	r1, r4, #0
1000dd78:	429d      	cmp	r5, r3
1000dd7a:	d107      	bne.n	1000dd8c <special_events_handler+0x20>
1000dd7c:	88a5      	ldrh	r5, [r4, #4]
1000dd7e:	4285      	cmp	r5, r0
1000dd80:	d104      	bne.n	1000dd8c <special_events_handler+0x20>
1000dd82:	2301      	movs	r3, #1
1000dd84:	425b      	negs	r3, r3
1000dd86:	8023      	strh	r3, [r4, #0]
1000dd88:	60a2      	str	r2, [r4, #8]
1000dd8a:	e009      	b.n	1000dda0 <special_events_handler+0x34>
1000dd8c:	884c      	ldrh	r4, [r1, #2]
1000dd8e:	429c      	cmp	r4, r3
1000dd90:	d10a      	bne.n	1000dda8 <special_events_handler+0x3c>
1000dd92:	888c      	ldrh	r4, [r1, #4]
1000dd94:	4284      	cmp	r4, r0
1000dd96:	d107      	bne.n	1000dda8 <special_events_handler+0x3c>
1000dd98:	2301      	movs	r3, #1
1000dd9a:	425b      	negs	r3, r3
1000dd9c:	804b      	strh	r3, [r1, #2]
1000dd9e:	608a      	str	r2, [r1, #8]
1000dda0:	4b0f      	ldr	r3, [pc, #60]	; (1000dde0 <special_events_handler+0x74>)
1000dda2:	4798      	blx	r3
1000dda4:	2001      	movs	r0, #1
1000dda6:	e017      	b.n	1000ddd8 <special_events_handler+0x6c>
1000dda8:	490e      	ldr	r1, [pc, #56]	; (1000dde4 <special_events_handler+0x78>)
1000ddaa:	428b      	cmp	r3, r1
1000ddac:	d00e      	beq.n	1000ddcc <special_events_handler+0x60>
1000ddae:	490e      	ldr	r1, [pc, #56]	; (1000dde8 <special_events_handler+0x7c>)
1000ddb0:	428b      	cmp	r3, r1
1000ddb2:	d007      	beq.n	1000ddc4 <special_events_handler+0x58>
1000ddb4:	490d      	ldr	r1, [pc, #52]	; (1000ddec <special_events_handler+0x80>)
1000ddb6:	2000      	movs	r0, #0
1000ddb8:	428b      	cmp	r3, r1
1000ddba:	d10d      	bne.n	1000ddd8 <special_events_handler+0x6c>
1000ddbc:	1c10      	adds	r0, r2, #0
1000ddbe:	4b0c      	ldr	r3, [pc, #48]	; (1000ddf0 <special_events_handler+0x84>)
1000ddc0:	4798      	blx	r3
1000ddc2:	e7ef      	b.n	1000dda4 <special_events_handler+0x38>
1000ddc4:	1c11      	adds	r1, r2, #0
1000ddc6:	4b0b      	ldr	r3, [pc, #44]	; (1000ddf4 <special_events_handler+0x88>)
1000ddc8:	2200      	movs	r2, #0
1000ddca:	e002      	b.n	1000ddd2 <special_events_handler+0x66>
1000ddcc:	1c11      	adds	r1, r2, #0
1000ddce:	2200      	movs	r2, #0
1000ddd0:	4b09      	ldr	r3, [pc, #36]	; (1000ddf8 <special_events_handler+0x8c>)
1000ddd2:	4798      	blx	r3
1000ddd4:	4243      	negs	r3, r0
1000ddd6:	4158      	adcs	r0, r3
1000ddd8:	bd38      	pop	{r3, r4, r5, pc}
1000ddda:	46c0      	nop			; (mov r8, r8)
1000dddc:	1001b9f4 	.word	0x1001b9f4
1000dde0:	1000f755 	.word	0x1000f755
1000dde4:	00000e13 	.word	0x00000e13
1000dde8:	00000e15 	.word	0x00000e15
1000ddec:	00000e01 	.word	0x00000e01
1000ddf0:	1000fac5 	.word	0x1000fac5
1000ddf4:	1000fc85 	.word	0x1000fc85
1000ddf8:	1000fd5d 	.word	0x1000fd5d

1000ddfc <at_ble_event_get>:
1000ddfc:	2300      	movs	r3, #0
1000ddfe:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de00:	b087      	sub	sp, #28
1000de02:	9204      	str	r2, [sp, #16]
1000de04:	7003      	strb	r3, [r0, #0]
1000de06:	9b04      	ldr	r3, [sp, #16]
1000de08:	9003      	str	r0, [sp, #12]
1000de0a:	3b01      	subs	r3, #1
1000de0c:	1c0d      	adds	r5, r1, #0
1000de0e:	9305      	str	r3, [sp, #20]
1000de10:	3303      	adds	r3, #3
1000de12:	d802      	bhi.n	1000de1a <at_ble_event_get+0x1e>
1000de14:	9804      	ldr	r0, [sp, #16]
1000de16:	4bae      	ldr	r3, [pc, #696]	; (1000e0d0 <at_ble_event_get+0x2d4>)
1000de18:	4798      	blx	r3
1000de1a:	9b05      	ldr	r3, [sp, #20]
1000de1c:	4cad      	ldr	r4, [pc, #692]	; (1000e0d4 <at_ble_event_get+0x2d8>)
1000de1e:	3303      	adds	r3, #3
1000de20:	d902      	bls.n	1000de28 <at_ble_event_get+0x2c>
1000de22:	2300      	movs	r3, #0
1000de24:	9302      	str	r3, [sp, #8]
1000de26:	e015      	b.n	1000de54 <at_ble_event_get+0x58>
1000de28:	2300      	movs	r3, #0
1000de2a:	9302      	str	r3, [sp, #8]
1000de2c:	6823      	ldr	r3, [r4, #0]
1000de2e:	2b00      	cmp	r3, #0
1000de30:	d113      	bne.n	1000de5a <at_ble_event_get+0x5e>
1000de32:	9b02      	ldr	r3, [sp, #8]
1000de34:	2bd0      	cmp	r3, #208	; 0xd0
1000de36:	d100      	bne.n	1000de3a <at_ble_event_get+0x3e>
1000de38:	e2da      	b.n	1000e3f0 <at_ble_event_get+0x5f4>
1000de3a:	9804      	ldr	r0, [sp, #16]
1000de3c:	4ba6      	ldr	r3, [pc, #664]	; (1000e0d8 <at_ble_event_get+0x2dc>)
1000de3e:	4798      	blx	r3
1000de40:	9002      	str	r0, [sp, #8]
1000de42:	2802      	cmp	r0, #2
1000de44:	d1f2      	bne.n	1000de2c <at_ble_event_get+0x30>
1000de46:	e03f      	b.n	1000dec8 <at_ble_event_get+0xcc>
1000de48:	9804      	ldr	r0, [sp, #16]
1000de4a:	4ba3      	ldr	r3, [pc, #652]	; (1000e0d8 <at_ble_event_get+0x2dc>)
1000de4c:	4798      	blx	r3
1000de4e:	9002      	str	r0, [sp, #8]
1000de50:	2802      	cmp	r0, #2
1000de52:	d039      	beq.n	1000dec8 <at_ble_event_get+0xcc>
1000de54:	6823      	ldr	r3, [r4, #0]
1000de56:	2b00      	cmp	r3, #0
1000de58:	d0f6      	beq.n	1000de48 <at_ble_event_get+0x4c>
1000de5a:	9b02      	ldr	r3, [sp, #8]
1000de5c:	2bd0      	cmp	r3, #208	; 0xd0
1000de5e:	d100      	bne.n	1000de62 <at_ble_event_get+0x66>
1000de60:	e2c6      	b.n	1000e3f0 <at_ble_event_get+0x5f4>
1000de62:	9b02      	ldr	r3, [sp, #8]
1000de64:	3b03      	subs	r3, #3
1000de66:	1e5a      	subs	r2, r3, #1
1000de68:	4193      	sbcs	r3, r2
1000de6a:	9a02      	ldr	r2, [sp, #8]
1000de6c:	425b      	negs	r3, r3
1000de6e:	401a      	ands	r2, r3
1000de70:	6823      	ldr	r3, [r4, #0]
1000de72:	9202      	str	r2, [sp, #8]
1000de74:	2b00      	cmp	r3, #0
1000de76:	d100      	bne.n	1000de7a <at_ble_event_get+0x7e>
1000de78:	e2c2      	b.n	1000e400 <at_ble_event_get+0x604>
1000de7a:	681a      	ldr	r2, [r3, #0]
1000de7c:	68de      	ldr	r6, [r3, #12]
1000de7e:	6022      	str	r2, [r4, #0]
1000de80:	88da      	ldrh	r2, [r3, #6]
1000de82:	9201      	str	r2, [sp, #4]
1000de84:	4a95      	ldr	r2, [pc, #596]	; (1000e0dc <at_ble_event_get+0x2e0>)
1000de86:	889c      	ldrh	r4, [r3, #4]
1000de88:	6811      	ldr	r1, [r2, #0]
1000de8a:	6013      	str	r3, [r2, #0]
1000de8c:	6019      	str	r1, [r3, #0]
1000de8e:	4b94      	ldr	r3, [pc, #592]	; (1000e0e0 <at_ble_event_get+0x2e4>)
1000de90:	781b      	ldrb	r3, [r3, #0]
1000de92:	2b01      	cmp	r3, #1
1000de94:	d10f      	bne.n	1000deb6 <at_ble_event_get+0xba>
1000de96:	4b93      	ldr	r3, [pc, #588]	; (1000e0e4 <at_ble_event_get+0x2e8>)
1000de98:	4a92      	ldr	r2, [pc, #584]	; (1000e0e4 <at_ble_event_get+0x2e8>)
1000de9a:	8898      	ldrh	r0, [r3, #4]
1000de9c:	88d9      	ldrh	r1, [r3, #6]
1000de9e:	68d2      	ldr	r2, [r2, #12]
1000dea0:	891b      	ldrh	r3, [r3, #8]
1000dea2:	4f91      	ldr	r7, [pc, #580]	; (1000e0e8 <at_ble_event_get+0x2ec>)
1000dea4:	47b8      	blx	r7
1000dea6:	2210      	movs	r2, #16
1000dea8:	4b90      	ldr	r3, [pc, #576]	; (1000e0ec <at_ble_event_get+0x2f0>)
1000deaa:	488e      	ldr	r0, [pc, #568]	; (1000e0e4 <at_ble_event_get+0x2e8>)
1000deac:	2100      	movs	r1, #0
1000deae:	4798      	blx	r3
1000deb0:	2300      	movs	r3, #0
1000deb2:	4a8b      	ldr	r2, [pc, #556]	; (1000e0e0 <at_ble_event_get+0x2e4>)
1000deb4:	7013      	strb	r3, [r2, #0]
1000deb6:	9b02      	ldr	r3, [sp, #8]
1000deb8:	2b00      	cmp	r3, #0
1000deba:	d114      	bne.n	1000dee6 <at_ble_event_get+0xea>
1000debc:	4b8c      	ldr	r3, [pc, #560]	; (1000e0f0 <at_ble_event_get+0x2f4>)
1000debe:	429c      	cmp	r4, r3
1000dec0:	d009      	beq.n	1000ded6 <at_ble_event_get+0xda>
1000dec2:	4b8c      	ldr	r3, [pc, #560]	; (1000e0f4 <at_ble_event_get+0x2f8>)
1000dec4:	429c      	cmp	r4, r3
1000dec6:	d127      	bne.n	1000df18 <at_ble_event_get+0x11c>
1000dec8:	233a      	movs	r3, #58	; 0x3a
1000deca:	9a03      	ldr	r2, [sp, #12]
1000decc:	7013      	strb	r3, [r2, #0]
1000dece:	2300      	movs	r3, #0
1000ded0:	9302      	str	r3, [sp, #8]
1000ded2:	1c1d      	adds	r5, r3, #0
1000ded4:	e007      	b.n	1000dee6 <at_ble_event_get+0xea>
1000ded6:	9b01      	ldr	r3, [sp, #4]
1000ded8:	42a3      	cmp	r3, r4
1000deda:	d000      	beq.n	1000dede <at_ble_event_get+0xe2>
1000dedc:	e28a      	b.n	1000e3f4 <at_ble_event_get+0x5f8>
1000dede:	2338      	movs	r3, #56	; 0x38
1000dee0:	9a03      	ldr	r2, [sp, #12]
1000dee2:	7013      	strb	r3, [r2, #0]
1000dee4:	602e      	str	r6, [r5, #0]
1000dee6:	9b03      	ldr	r3, [sp, #12]
1000dee8:	781b      	ldrb	r3, [r3, #0]
1000deea:	2b3b      	cmp	r3, #59	; 0x3b
1000deec:	d101      	bne.n	1000def2 <at_ble_event_get+0xf6>
1000deee:	4b82      	ldr	r3, [pc, #520]	; (1000e0f8 <at_ble_event_get+0x2fc>)
1000def0:	4798      	blx	r3
1000def2:	9b03      	ldr	r3, [sp, #12]
1000def4:	781b      	ldrb	r3, [r3, #0]
1000def6:	2b3b      	cmp	r3, #59	; 0x3b
1000def8:	d003      	beq.n	1000df02 <at_ble_event_get+0x106>
1000defa:	9b05      	ldr	r3, [sp, #20]
1000defc:	3303      	adds	r3, #3
1000defe:	d904      	bls.n	1000df0a <at_ble_event_get+0x10e>
1000df00:	e283      	b.n	1000e40a <at_ble_event_get+0x60e>
1000df02:	9b02      	ldr	r3, [sp, #8]
1000df04:	2b00      	cmp	r3, #0
1000df06:	d088      	beq.n	1000de1a <at_ble_event_get+0x1e>
1000df08:	e7f7      	b.n	1000defa <at_ble_event_get+0xfe>
1000df0a:	9b02      	ldr	r3, [sp, #8]
1000df0c:	2bd0      	cmp	r3, #208	; 0xd0
1000df0e:	d100      	bne.n	1000df12 <at_ble_event_get+0x116>
1000df10:	e27b      	b.n	1000e40a <at_ble_event_get+0x60e>
1000df12:	4b7a      	ldr	r3, [pc, #488]	; (1000e0fc <at_ble_event_get+0x300>)
1000df14:	4798      	blx	r3
1000df16:	e278      	b.n	1000e40a <at_ble_event_get+0x60e>
1000df18:	9b01      	ldr	r3, [sp, #4]
1000df1a:	2bbb      	cmp	r3, #187	; 0xbb
1000df1c:	d125      	bne.n	1000df6a <at_ble_event_get+0x16e>
1000df1e:	2cbb      	cmp	r4, #187	; 0xbb
1000df20:	d123      	bne.n	1000df6a <at_ble_event_get+0x16e>
1000df22:	466b      	mov	r3, sp
1000df24:	891b      	ldrh	r3, [r3, #8]
1000df26:	80ab      	strh	r3, [r5, #4]
1000df28:	78b3      	ldrb	r3, [r6, #2]
1000df2a:	7872      	ldrb	r2, [r6, #1]
1000df2c:	78f0      	ldrb	r0, [r6, #3]
1000df2e:	021b      	lsls	r3, r3, #8
1000df30:	4313      	orrs	r3, r2
1000df32:	7971      	ldrb	r1, [r6, #5]
1000df34:	7932      	ldrb	r2, [r6, #4]
1000df36:	70a8      	strb	r0, [r5, #2]
1000df38:	4871      	ldr	r0, [pc, #452]	; (1000e100 <at_ble_event_get+0x304>)
1000df3a:	802b      	strh	r3, [r5, #0]
1000df3c:	4283      	cmp	r3, r0
1000df3e:	d806      	bhi.n	1000df4e <at_ble_event_get+0x152>
1000df40:	4a70      	ldr	r2, [pc, #448]	; (1000e104 <at_ble_event_get+0x308>)
1000df42:	4293      	cmp	r3, r2
1000df44:	d20b      	bcs.n	1000df5e <at_ble_event_get+0x162>
1000df46:	4a70      	ldr	r2, [pc, #448]	; (1000e108 <at_ble_event_get+0x30c>)
1000df48:	4293      	cmp	r3, r2
1000df4a:	d008      	beq.n	1000df5e <at_ble_event_get+0x162>
1000df4c:	e009      	b.n	1000df62 <at_ble_event_get+0x166>
1000df4e:	486f      	ldr	r0, [pc, #444]	; (1000e10c <at_ble_event_get+0x310>)
1000df50:	4283      	cmp	r3, r0
1000df52:	d106      	bne.n	1000df62 <at_ble_event_get+0x166>
1000df54:	020b      	lsls	r3, r1, #8
1000df56:	4313      	orrs	r3, r2
1000df58:	80ab      	strh	r3, [r5, #4]
1000df5a:	2337      	movs	r3, #55	; 0x37
1000df5c:	e002      	b.n	1000df64 <at_ble_event_get+0x168>
1000df5e:	2336      	movs	r3, #54	; 0x36
1000df60:	e000      	b.n	1000df64 <at_ble_event_get+0x168>
1000df62:	2300      	movs	r3, #0
1000df64:	9a03      	ldr	r2, [sp, #12]
1000df66:	7013      	strb	r3, [r2, #0]
1000df68:	e7bd      	b.n	1000dee6 <at_ble_event_get+0xea>
1000df6a:	4b69      	ldr	r3, [pc, #420]	; (1000e110 <at_ble_event_get+0x314>)
1000df6c:	429c      	cmp	r4, r3
1000df6e:	d100      	bne.n	1000df72 <at_ble_event_get+0x176>
1000df70:	e144      	b.n	1000e1fc <at_ble_event_get+0x400>
1000df72:	d865      	bhi.n	1000e040 <at_ble_event_get+0x244>
1000df74:	4b67      	ldr	r3, [pc, #412]	; (1000e114 <at_ble_event_get+0x318>)
1000df76:	429c      	cmp	r4, r3
1000df78:	d100      	bne.n	1000df7c <at_ble_event_get+0x180>
1000df7a:	e1d5      	b.n	1000e328 <at_ble_event_get+0x52c>
1000df7c:	d82f      	bhi.n	1000dfde <at_ble_event_get+0x1e2>
1000df7e:	4b66      	ldr	r3, [pc, #408]	; (1000e118 <at_ble_event_get+0x31c>)
1000df80:	429c      	cmp	r4, r3
1000df82:	d100      	bne.n	1000df86 <at_ble_event_get+0x18a>
1000df84:	e1e0      	b.n	1000e348 <at_ble_event_get+0x54c>
1000df86:	d813      	bhi.n	1000dfb0 <at_ble_event_get+0x1b4>
1000df88:	4b64      	ldr	r3, [pc, #400]	; (1000e11c <at_ble_event_get+0x320>)
1000df8a:	429c      	cmp	r4, r3
1000df8c:	d100      	bne.n	1000df90 <at_ble_event_get+0x194>
1000df8e:	e1a3      	b.n	1000e2d8 <at_ble_event_get+0x4dc>
1000df90:	d804      	bhi.n	1000df9c <at_ble_event_get+0x1a0>
1000df92:	2638      	movs	r6, #56	; 0x38
1000df94:	42b4      	cmp	r4, r6
1000df96:	d100      	bne.n	1000df9a <at_ble_event_get+0x19e>
1000df98:	e225      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000df9a:	e117      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000df9c:	4b60      	ldr	r3, [pc, #384]	; (1000e120 <at_ble_event_get+0x324>)
1000df9e:	429c      	cmp	r4, r3
1000dfa0:	d100      	bne.n	1000dfa4 <at_ble_event_get+0x1a8>
1000dfa2:	e19f      	b.n	1000e2e4 <at_ble_event_get+0x4e8>
1000dfa4:	33fe      	adds	r3, #254	; 0xfe
1000dfa6:	33ff      	adds	r3, #255	; 0xff
1000dfa8:	429c      	cmp	r4, r3
1000dfaa:	d100      	bne.n	1000dfae <at_ble_event_get+0x1b2>
1000dfac:	e1d3      	b.n	1000e356 <at_ble_event_get+0x55a>
1000dfae:	e10d      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000dfb0:	4b5c      	ldr	r3, [pc, #368]	; (1000e124 <at_ble_event_get+0x328>)
1000dfb2:	429c      	cmp	r4, r3
1000dfb4:	d100      	bne.n	1000dfb8 <at_ble_event_get+0x1bc>
1000dfb6:	e1a9      	b.n	1000e30c <at_ble_event_get+0x510>
1000dfb8:	d808      	bhi.n	1000dfcc <at_ble_event_get+0x1d0>
1000dfba:	4b5b      	ldr	r3, [pc, #364]	; (1000e128 <at_ble_event_get+0x32c>)
1000dfbc:	429c      	cmp	r4, r3
1000dfbe:	d100      	bne.n	1000dfc2 <at_ble_event_get+0x1c6>
1000dfc0:	e196      	b.n	1000e2f0 <at_ble_event_get+0x4f4>
1000dfc2:	4b5a      	ldr	r3, [pc, #360]	; (1000e12c <at_ble_event_get+0x330>)
1000dfc4:	429c      	cmp	r4, r3
1000dfc6:	d100      	bne.n	1000dfca <at_ble_event_get+0x1ce>
1000dfc8:	e199      	b.n	1000e2fe <at_ble_event_get+0x502>
1000dfca:	e0ff      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000dfcc:	4b58      	ldr	r3, [pc, #352]	; (1000e130 <at_ble_event_get+0x334>)
1000dfce:	429c      	cmp	r4, r3
1000dfd0:	d100      	bne.n	1000dfd4 <at_ble_event_get+0x1d8>
1000dfd2:	e1a2      	b.n	1000e31a <at_ble_event_get+0x51e>
1000dfd4:	4b57      	ldr	r3, [pc, #348]	; (1000e134 <at_ble_event_get+0x338>)
1000dfd6:	429c      	cmp	r4, r3
1000dfd8:	d100      	bne.n	1000dfdc <at_ble_event_get+0x1e0>
1000dfda:	e1d4      	b.n	1000e386 <at_ble_event_get+0x58a>
1000dfdc:	e0f6      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000dfde:	4b56      	ldr	r3, [pc, #344]	; (1000e138 <at_ble_event_get+0x33c>)
1000dfe0:	429c      	cmp	r4, r3
1000dfe2:	d100      	bne.n	1000dfe6 <at_ble_event_get+0x1ea>
1000dfe4:	e1c8      	b.n	1000e378 <at_ble_event_get+0x57c>
1000dfe6:	d812      	bhi.n	1000e00e <at_ble_event_get+0x212>
1000dfe8:	4b54      	ldr	r3, [pc, #336]	; (1000e13c <at_ble_event_get+0x340>)
1000dfea:	429c      	cmp	r4, r3
1000dfec:	d100      	bne.n	1000dff0 <at_ble_event_get+0x1f4>
1000dfee:	e1d1      	b.n	1000e394 <at_ble_event_get+0x598>
1000dff0:	d804      	bhi.n	1000dffc <at_ble_event_get+0x200>
1000dff2:	4b53      	ldr	r3, [pc, #332]	; (1000e140 <at_ble_event_get+0x344>)
1000dff4:	429c      	cmp	r4, r3
1000dff6:	d100      	bne.n	1000dffa <at_ble_event_get+0x1fe>
1000dff8:	e19b      	b.n	1000e332 <at_ble_event_get+0x536>
1000dffa:	e0e7      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000dffc:	4b51      	ldr	r3, [pc, #324]	; (1000e144 <at_ble_event_get+0x348>)
1000dffe:	429c      	cmp	r4, r3
1000e000:	d100      	bne.n	1000e004 <at_ble_event_get+0x208>
1000e002:	e1ad      	b.n	1000e360 <at_ble_event_get+0x564>
1000e004:	4b50      	ldr	r3, [pc, #320]	; (1000e148 <at_ble_event_get+0x34c>)
1000e006:	429c      	cmp	r4, r3
1000e008:	d100      	bne.n	1000e00c <at_ble_event_get+0x210>
1000e00a:	e1b0      	b.n	1000e36e <at_ble_event_get+0x572>
1000e00c:	e0de      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e00e:	4b4f      	ldr	r3, [pc, #316]	; (1000e14c <at_ble_event_get+0x350>)
1000e010:	429c      	cmp	r4, r3
1000e012:	d100      	bne.n	1000e016 <at_ble_event_get+0x21a>
1000e014:	e0e0      	b.n	1000e1d8 <at_ble_event_get+0x3dc>
1000e016:	d809      	bhi.n	1000e02c <at_ble_event_get+0x230>
1000e018:	3b08      	subs	r3, #8
1000e01a:	429c      	cmp	r4, r3
1000e01c:	d100      	bne.n	1000e020 <at_ble_event_get+0x224>
1000e01e:	e0d7      	b.n	1000e1d0 <at_ble_event_get+0x3d4>
1000e020:	4b4b      	ldr	r3, [pc, #300]	; (1000e150 <at_ble_event_get+0x354>)
1000e022:	2639      	movs	r6, #57	; 0x39
1000e024:	429c      	cmp	r4, r3
1000e026:	d100      	bne.n	1000e02a <at_ble_event_get+0x22e>
1000e028:	e1dd      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e02a:	e0cf      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e02c:	23d1      	movs	r3, #209	; 0xd1
1000e02e:	011b      	lsls	r3, r3, #4
1000e030:	429c      	cmp	r4, r3
1000e032:	d100      	bne.n	1000e036 <at_ble_event_get+0x23a>
1000e034:	e0d6      	b.n	1000e1e4 <at_ble_event_get+0x3e8>
1000e036:	4b47      	ldr	r3, [pc, #284]	; (1000e154 <at_ble_event_get+0x358>)
1000e038:	429c      	cmp	r4, r3
1000e03a:	d100      	bne.n	1000e03e <at_ble_event_get+0x242>
1000e03c:	e0d8      	b.n	1000e1f0 <at_ble_event_get+0x3f4>
1000e03e:	e0c5      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e040:	4b45      	ldr	r3, [pc, #276]	; (1000e158 <at_ble_event_get+0x35c>)
1000e042:	429c      	cmp	r4, r3
1000e044:	d100      	bne.n	1000e048 <at_ble_event_get+0x24c>
1000e046:	e117      	b.n	1000e278 <at_ble_event_get+0x47c>
1000e048:	d82e      	bhi.n	1000e0a8 <at_ble_event_get+0x2ac>
1000e04a:	4b44      	ldr	r3, [pc, #272]	; (1000e15c <at_ble_event_get+0x360>)
1000e04c:	429c      	cmp	r4, r3
1000e04e:	d100      	bne.n	1000e052 <at_ble_event_get+0x256>
1000e050:	e13d      	b.n	1000e2ce <at_ble_event_get+0x4d2>
1000e052:	d812      	bhi.n	1000e07a <at_ble_event_get+0x27e>
1000e054:	4b42      	ldr	r3, [pc, #264]	; (1000e160 <at_ble_event_get+0x364>)
1000e056:	429c      	cmp	r4, r3
1000e058:	d100      	bne.n	1000e05c <at_ble_event_get+0x260>
1000e05a:	e0e8      	b.n	1000e22e <at_ble_event_get+0x432>
1000e05c:	d804      	bhi.n	1000e068 <at_ble_event_get+0x26c>
1000e05e:	3b03      	subs	r3, #3
1000e060:	429c      	cmp	r4, r3
1000e062:	d100      	bne.n	1000e066 <at_ble_event_get+0x26a>
1000e064:	e0d0      	b.n	1000e208 <at_ble_event_get+0x40c>
1000e066:	e0b1      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e068:	4b3e      	ldr	r3, [pc, #248]	; (1000e164 <at_ble_event_get+0x368>)
1000e06a:	429c      	cmp	r4, r3
1000e06c:	d100      	bne.n	1000e070 <at_ble_event_get+0x274>
1000e06e:	e0d0      	b.n	1000e212 <at_ble_event_get+0x416>
1000e070:	4b3d      	ldr	r3, [pc, #244]	; (1000e168 <at_ble_event_get+0x36c>)
1000e072:	429c      	cmp	r4, r3
1000e074:	d100      	bne.n	1000e078 <at_ble_event_get+0x27c>
1000e076:	e0f9      	b.n	1000e26c <at_ble_event_get+0x470>
1000e078:	e0a8      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e07a:	4b3c      	ldr	r3, [pc, #240]	; (1000e16c <at_ble_event_get+0x370>)
1000e07c:	429c      	cmp	r4, r3
1000e07e:	d100      	bne.n	1000e082 <at_ble_event_get+0x286>
1000e080:	e0db      	b.n	1000e23a <at_ble_event_get+0x43e>
1000e082:	d808      	bhi.n	1000e096 <at_ble_event_get+0x29a>
1000e084:	4b3a      	ldr	r3, [pc, #232]	; (1000e170 <at_ble_event_get+0x374>)
1000e086:	429c      	cmp	r4, r3
1000e088:	d100      	bne.n	1000e08c <at_ble_event_get+0x290>
1000e08a:	e11b      	b.n	1000e2c4 <at_ble_event_get+0x4c8>
1000e08c:	4b39      	ldr	r3, [pc, #228]	; (1000e174 <at_ble_event_get+0x378>)
1000e08e:	429c      	cmp	r4, r3
1000e090:	d100      	bne.n	1000e094 <at_ble_event_get+0x298>
1000e092:	e0d8      	b.n	1000e246 <at_ble_event_get+0x44a>
1000e094:	e09a      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e096:	4b38      	ldr	r3, [pc, #224]	; (1000e178 <at_ble_event_get+0x37c>)
1000e098:	429c      	cmp	r4, r3
1000e09a:	d100      	bne.n	1000e09e <at_ble_event_get+0x2a2>
1000e09c:	e0d8      	b.n	1000e250 <at_ble_event_get+0x454>
1000e09e:	4b37      	ldr	r3, [pc, #220]	; (1000e17c <at_ble_event_get+0x380>)
1000e0a0:	429c      	cmp	r4, r3
1000e0a2:	d100      	bne.n	1000e0a6 <at_ble_event_get+0x2aa>
1000e0a4:	e0db      	b.n	1000e25e <at_ble_event_get+0x462>
1000e0a6:	e091      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e0a8:	4b35      	ldr	r3, [pc, #212]	; (1000e180 <at_ble_event_get+0x384>)
1000e0aa:	429c      	cmp	r4, r3
1000e0ac:	d100      	bne.n	1000e0b0 <at_ble_event_get+0x2b4>
1000e0ae:	e0f7      	b.n	1000e2a0 <at_ble_event_get+0x4a4>
1000e0b0:	d876      	bhi.n	1000e1a0 <at_ble_event_get+0x3a4>
1000e0b2:	4b34      	ldr	r3, [pc, #208]	; (1000e184 <at_ble_event_get+0x388>)
1000e0b4:	429c      	cmp	r4, r3
1000e0b6:	d100      	bne.n	1000e0ba <at_ble_event_get+0x2be>
1000e0b8:	e0f8      	b.n	1000e2ac <at_ble_event_get+0x4b0>
1000e0ba:	d869      	bhi.n	1000e190 <at_ble_event_get+0x394>
1000e0bc:	4b32      	ldr	r3, [pc, #200]	; (1000e188 <at_ble_event_get+0x38c>)
1000e0be:	429c      	cmp	r4, r3
1000e0c0:	d100      	bne.n	1000e0c4 <at_ble_event_get+0x2c8>
1000e0c2:	e0e0      	b.n	1000e286 <at_ble_event_get+0x48a>
1000e0c4:	4b31      	ldr	r3, [pc, #196]	; (1000e18c <at_ble_event_get+0x390>)
1000e0c6:	429c      	cmp	r4, r3
1000e0c8:	d100      	bne.n	1000e0cc <at_ble_event_get+0x2d0>
1000e0ca:	e0a9      	b.n	1000e220 <at_ble_event_get+0x424>
1000e0cc:	e07e      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e0ce:	46c0      	nop			; (mov r8, r8)
1000e0d0:	1000f78d 	.word	0x1000f78d
1000e0d4:	1001aa58 	.word	0x1001aa58
1000e0d8:	1000d615 	.word	0x1000d615
1000e0dc:	1001aa5c 	.word	0x1001aa5c
1000e0e0:	1001aa54 	.word	0x1001aa54
1000e0e4:	1001aa44 	.word	0x1001aa44
1000e0e8:	1000dce5 	.word	0x1000dce5
1000e0ec:	100122bd 	.word	0x100122bd
1000e0f0:	0000ffff 	.word	0x0000ffff
1000e0f4:	0000fffe 	.word	0x0000fffe
1000e0f8:	1000d88d 	.word	0x1000d88d
1000e0fc:	1000f78f 	.word	0x1000f78f
1000e100:	0000201e 	.word	0x0000201e
1000e104:	0000201d 	.word	0x0000201d
1000e108:	00000c03 	.word	0x00000c03
1000e10c:	0000201f 	.word	0x0000201f
1000e110:	00000d1c 	.word	0x00000d1c
1000e114:	00000c0c 	.word	0x00000c0c
1000e118:	00000c02 	.word	0x00000c02
1000e11c:	00000a02 	.word	0x00000a02
1000e120:	00000a03 	.word	0x00000a03
1000e124:	00000c06 	.word	0x00000c06
1000e128:	00000c04 	.word	0x00000c04
1000e12c:	00000c05 	.word	0x00000c05
1000e130:	00000c07 	.word	0x00000c07
1000e134:	00000c09 	.word	0x00000c09
1000e138:	00000c17 	.word	0x00000c17
1000e13c:	00000c12 	.word	0x00000c12
1000e140:	00000c0d 	.word	0x00000c0d
1000e144:	00000c13 	.word	0x00000c13
1000e148:	00000c15 	.word	0x00000c15
1000e14c:	00000d08 	.word	0x00000d08
1000e150:	00000d01 	.word	0x00000d01
1000e154:	00000d15 	.word	0x00000d15
1000e158:	00000e1b 	.word	0x00000e1b
1000e15c:	00000e0f 	.word	0x00000e0f
1000e160:	00000e03 	.word	0x00000e03
1000e164:	00000e06 	.word	0x00000e06
1000e168:	00000e0a 	.word	0x00000e0a
1000e16c:	00000e15 	.word	0x00000e15
1000e170:	00000e11 	.word	0x00000e11
1000e174:	00000e13 	.word	0x00000e13
1000e178:	00000e17 	.word	0x00000e17
1000e17c:	00000e19 	.word	0x00000e19
1000e180:	00000e27 	.word	0x00000e27
1000e184:	00000e21 	.word	0x00000e21
1000e188:	00000e1c 	.word	0x00000e1c
1000e18c:	00000e1d 	.word	0x00000e1d
1000e190:	4b9f      	ldr	r3, [pc, #636]	; (1000e410 <at_ble_event_get+0x614>)
1000e192:	429c      	cmp	r4, r3
1000e194:	d07e      	beq.n	1000e294 <at_ble_event_get+0x498>
1000e196:	4b9f      	ldr	r3, [pc, #636]	; (1000e414 <at_ble_event_get+0x618>)
1000e198:	429c      	cmp	r4, r3
1000e19a:	d100      	bne.n	1000e19e <at_ble_event_get+0x3a2>
1000e19c:	e08c      	b.n	1000e2b8 <at_ble_event_get+0x4bc>
1000e19e:	e015      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e1a0:	4b9d      	ldr	r3, [pc, #628]	; (1000e418 <at_ble_event_get+0x61c>)
1000e1a2:	429c      	cmp	r4, r3
1000e1a4:	d100      	bne.n	1000e1a8 <at_ble_event_get+0x3ac>
1000e1a6:	e10a      	b.n	1000e3be <at_ble_event_get+0x5c2>
1000e1a8:	d808      	bhi.n	1000e1bc <at_ble_event_get+0x3c0>
1000e1aa:	4b9c      	ldr	r3, [pc, #624]	; (1000e41c <at_ble_event_get+0x620>)
1000e1ac:	429c      	cmp	r4, r3
1000e1ae:	d100      	bne.n	1000e1b2 <at_ble_event_get+0x3b6>
1000e1b0:	e0f7      	b.n	1000e3a2 <at_ble_event_get+0x5a6>
1000e1b2:	4b9b      	ldr	r3, [pc, #620]	; (1000e420 <at_ble_event_get+0x624>)
1000e1b4:	429c      	cmp	r4, r3
1000e1b6:	d100      	bne.n	1000e1ba <at_ble_event_get+0x3be>
1000e1b8:	e0fa      	b.n	1000e3b0 <at_ble_event_get+0x5b4>
1000e1ba:	e007      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e1bc:	4b99      	ldr	r3, [pc, #612]	; (1000e424 <at_ble_event_get+0x628>)
1000e1be:	429c      	cmp	r4, r3
1000e1c0:	d100      	bne.n	1000e1c4 <at_ble_event_get+0x3c8>
1000e1c2:	e103      	b.n	1000e3cc <at_ble_event_get+0x5d0>
1000e1c4:	4b98      	ldr	r3, [pc, #608]	; (1000e428 <at_ble_event_get+0x62c>)
1000e1c6:	429c      	cmp	r4, r3
1000e1c8:	d100      	bne.n	1000e1cc <at_ble_event_get+0x3d0>
1000e1ca:	e106      	b.n	1000e3da <at_ble_event_get+0x5de>
1000e1cc:	2600      	movs	r6, #0
1000e1ce:	e10a      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e1d0:	1c30      	adds	r0, r6, #0
1000e1d2:	1c29      	adds	r1, r5, #0
1000e1d4:	4b95      	ldr	r3, [pc, #596]	; (1000e42c <at_ble_event_get+0x630>)
1000e1d6:	e014      	b.n	1000e202 <at_ble_event_get+0x406>
1000e1d8:	1c30      	adds	r0, r6, #0
1000e1da:	1c29      	adds	r1, r5, #0
1000e1dc:	4b94      	ldr	r3, [pc, #592]	; (1000e430 <at_ble_event_get+0x634>)
1000e1de:	4798      	blx	r3
1000e1e0:	2604      	movs	r6, #4
1000e1e2:	e100      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e1e4:	1c30      	adds	r0, r6, #0
1000e1e6:	1c29      	adds	r1, r5, #0
1000e1e8:	4b92      	ldr	r3, [pc, #584]	; (1000e434 <at_ble_event_get+0x638>)
1000e1ea:	4798      	blx	r3
1000e1ec:	2601      	movs	r6, #1
1000e1ee:	e0fa      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e1f0:	1c30      	adds	r0, r6, #0
1000e1f2:	1c29      	adds	r1, r5, #0
1000e1f4:	4b90      	ldr	r3, [pc, #576]	; (1000e438 <at_ble_event_get+0x63c>)
1000e1f6:	4798      	blx	r3
1000e1f8:	260f      	movs	r6, #15
1000e1fa:	e0f4      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e1fc:	1c30      	adds	r0, r6, #0
1000e1fe:	1c29      	adds	r1, r5, #0
1000e200:	4b8e      	ldr	r3, [pc, #568]	; (1000e43c <at_ble_event_get+0x640>)
1000e202:	4798      	blx	r3
1000e204:	1c06      	adds	r6, r0, #0
1000e206:	e0ee      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e208:	9801      	ldr	r0, [sp, #4]
1000e20a:	1c31      	adds	r1, r6, #0
1000e20c:	1c2a      	adds	r2, r5, #0
1000e20e:	4b8c      	ldr	r3, [pc, #560]	; (1000e440 <at_ble_event_get+0x644>)
1000e210:	e017      	b.n	1000e242 <at_ble_event_get+0x446>
1000e212:	1c31      	adds	r1, r6, #0
1000e214:	9801      	ldr	r0, [sp, #4]
1000e216:	1c2a      	adds	r2, r5, #0
1000e218:	4b8a      	ldr	r3, [pc, #552]	; (1000e444 <at_ble_event_get+0x648>)
1000e21a:	4798      	blx	r3
1000e21c:	2611      	movs	r6, #17
1000e21e:	e0e2      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e220:	1c31      	adds	r1, r6, #0
1000e222:	9801      	ldr	r0, [sp, #4]
1000e224:	1c2a      	adds	r2, r5, #0
1000e226:	4b88      	ldr	r3, [pc, #544]	; (1000e448 <at_ble_event_get+0x64c>)
1000e228:	4798      	blx	r3
1000e22a:	2612      	movs	r6, #18
1000e22c:	e0db      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e22e:	1c30      	adds	r0, r6, #0
1000e230:	1c29      	adds	r1, r5, #0
1000e232:	4b86      	ldr	r3, [pc, #536]	; (1000e44c <at_ble_event_get+0x650>)
1000e234:	4798      	blx	r3
1000e236:	2606      	movs	r6, #6
1000e238:	e0d5      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e23a:	1c31      	adds	r1, r6, #0
1000e23c:	1c2a      	adds	r2, r5, #0
1000e23e:	9801      	ldr	r0, [sp, #4]
1000e240:	4b83      	ldr	r3, [pc, #524]	; (1000e450 <at_ble_event_get+0x654>)
1000e242:	4798      	blx	r3
1000e244:	e7de      	b.n	1000e204 <at_ble_event_get+0x408>
1000e246:	9801      	ldr	r0, [sp, #4]
1000e248:	1c31      	adds	r1, r6, #0
1000e24a:	1c2a      	adds	r2, r5, #0
1000e24c:	4b81      	ldr	r3, [pc, #516]	; (1000e454 <at_ble_event_get+0x658>)
1000e24e:	e7f8      	b.n	1000e242 <at_ble_event_get+0x446>
1000e250:	1c31      	adds	r1, r6, #0
1000e252:	9801      	ldr	r0, [sp, #4]
1000e254:	1c2a      	adds	r2, r5, #0
1000e256:	4b80      	ldr	r3, [pc, #512]	; (1000e458 <at_ble_event_get+0x65c>)
1000e258:	4798      	blx	r3
1000e25a:	260d      	movs	r6, #13
1000e25c:	e0c3      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e25e:	1c31      	adds	r1, r6, #0
1000e260:	9801      	ldr	r0, [sp, #4]
1000e262:	1c2a      	adds	r2, r5, #0
1000e264:	4b7d      	ldr	r3, [pc, #500]	; (1000e45c <at_ble_event_get+0x660>)
1000e266:	4798      	blx	r3
1000e268:	260e      	movs	r6, #14
1000e26a:	e0bc      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e26c:	9801      	ldr	r0, [sp, #4]
1000e26e:	1c31      	adds	r1, r6, #0
1000e270:	1c2a      	adds	r2, r5, #0
1000e272:	4b7b      	ldr	r3, [pc, #492]	; (1000e460 <at_ble_event_get+0x664>)
1000e274:	4798      	blx	r3
1000e276:	e084      	b.n	1000e382 <at_ble_event_get+0x586>
1000e278:	1c31      	adds	r1, r6, #0
1000e27a:	9801      	ldr	r0, [sp, #4]
1000e27c:	1c2a      	adds	r2, r5, #0
1000e27e:	4b79      	ldr	r3, [pc, #484]	; (1000e464 <at_ble_event_get+0x668>)
1000e280:	4798      	blx	r3
1000e282:	260b      	movs	r6, #11
1000e284:	e0af      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e286:	1c31      	adds	r1, r6, #0
1000e288:	9801      	ldr	r0, [sp, #4]
1000e28a:	1c2a      	adds	r2, r5, #0
1000e28c:	4b76      	ldr	r3, [pc, #472]	; (1000e468 <at_ble_event_get+0x66c>)
1000e28e:	4798      	blx	r3
1000e290:	2610      	movs	r6, #16
1000e292:	e0a8      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e294:	1c30      	adds	r0, r6, #0
1000e296:	1c29      	adds	r1, r5, #0
1000e298:	4b74      	ldr	r3, [pc, #464]	; (1000e46c <at_ble_event_get+0x670>)
1000e29a:	4798      	blx	r3
1000e29c:	2628      	movs	r6, #40	; 0x28
1000e29e:	e0a2      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2a0:	1c30      	adds	r0, r6, #0
1000e2a2:	1c29      	adds	r1, r5, #0
1000e2a4:	4b72      	ldr	r3, [pc, #456]	; (1000e470 <at_ble_event_get+0x674>)
1000e2a6:	4798      	blx	r3
1000e2a8:	2629      	movs	r6, #41	; 0x29
1000e2aa:	e09c      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2ac:	1c30      	adds	r0, r6, #0
1000e2ae:	1c29      	adds	r1, r5, #0
1000e2b0:	4b70      	ldr	r3, [pc, #448]	; (1000e474 <at_ble_event_get+0x678>)
1000e2b2:	4798      	blx	r3
1000e2b4:	2627      	movs	r6, #39	; 0x27
1000e2b6:	e096      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2b8:	1c30      	adds	r0, r6, #0
1000e2ba:	1c29      	adds	r1, r5, #0
1000e2bc:	4b6e      	ldr	r3, [pc, #440]	; (1000e478 <at_ble_event_get+0x67c>)
1000e2be:	4798      	blx	r3
1000e2c0:	262a      	movs	r6, #42	; 0x2a
1000e2c2:	e090      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2c4:	9801      	ldr	r0, [sp, #4]
1000e2c6:	1c31      	adds	r1, r6, #0
1000e2c8:	1c2a      	adds	r2, r5, #0
1000e2ca:	4b6c      	ldr	r3, [pc, #432]	; (1000e47c <at_ble_event_get+0x680>)
1000e2cc:	e7b9      	b.n	1000e242 <at_ble_event_get+0x446>
1000e2ce:	9801      	ldr	r0, [sp, #4]
1000e2d0:	1c31      	adds	r1, r6, #0
1000e2d2:	1c2a      	adds	r2, r5, #0
1000e2d4:	4b6a      	ldr	r3, [pc, #424]	; (1000e480 <at_ble_event_get+0x684>)
1000e2d6:	e7b4      	b.n	1000e242 <at_ble_event_get+0x446>
1000e2d8:	1c30      	adds	r0, r6, #0
1000e2da:	1c29      	adds	r1, r5, #0
1000e2dc:	4b69      	ldr	r3, [pc, #420]	; (1000e484 <at_ble_event_get+0x688>)
1000e2de:	4798      	blx	r3
1000e2e0:	262b      	movs	r6, #43	; 0x2b
1000e2e2:	e080      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2e4:	1c30      	adds	r0, r6, #0
1000e2e6:	1c29      	adds	r1, r5, #0
1000e2e8:	4b67      	ldr	r3, [pc, #412]	; (1000e488 <at_ble_event_get+0x68c>)
1000e2ea:	4798      	blx	r3
1000e2ec:	262c      	movs	r6, #44	; 0x2c
1000e2ee:	e07a      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2f0:	1c31      	adds	r1, r6, #0
1000e2f2:	9801      	ldr	r0, [sp, #4]
1000e2f4:	1c2a      	adds	r2, r5, #0
1000e2f6:	4b65      	ldr	r3, [pc, #404]	; (1000e48c <at_ble_event_get+0x690>)
1000e2f8:	4798      	blx	r3
1000e2fa:	2613      	movs	r6, #19
1000e2fc:	e073      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e2fe:	1c31      	adds	r1, r6, #0
1000e300:	9801      	ldr	r0, [sp, #4]
1000e302:	1c2a      	adds	r2, r5, #0
1000e304:	4b62      	ldr	r3, [pc, #392]	; (1000e490 <at_ble_event_get+0x694>)
1000e306:	4798      	blx	r3
1000e308:	2614      	movs	r6, #20
1000e30a:	e06c      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e30c:	1c31      	adds	r1, r6, #0
1000e30e:	9801      	ldr	r0, [sp, #4]
1000e310:	1c2a      	adds	r2, r5, #0
1000e312:	4b60      	ldr	r3, [pc, #384]	; (1000e494 <at_ble_event_get+0x698>)
1000e314:	4798      	blx	r3
1000e316:	2615      	movs	r6, #21
1000e318:	e065      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e31a:	1c31      	adds	r1, r6, #0
1000e31c:	9801      	ldr	r0, [sp, #4]
1000e31e:	1c2a      	adds	r2, r5, #0
1000e320:	4b5d      	ldr	r3, [pc, #372]	; (1000e498 <at_ble_event_get+0x69c>)
1000e322:	4798      	blx	r3
1000e324:	2616      	movs	r6, #22
1000e326:	e05e      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e328:	9801      	ldr	r0, [sp, #4]
1000e32a:	1c31      	adds	r1, r6, #0
1000e32c:	1c2a      	adds	r2, r5, #0
1000e32e:	4b5b      	ldr	r3, [pc, #364]	; (1000e49c <at_ble_event_get+0x6a0>)
1000e330:	e787      	b.n	1000e242 <at_ble_event_get+0x446>
1000e332:	1c31      	adds	r1, r6, #0
1000e334:	9801      	ldr	r0, [sp, #4]
1000e336:	1c2a      	adds	r2, r5, #0
1000e338:	4b58      	ldr	r3, [pc, #352]	; (1000e49c <at_ble_event_get+0x6a0>)
1000e33a:	4798      	blx	r3
1000e33c:	88a9      	ldrh	r1, [r5, #4]
1000e33e:	1c06      	adds	r6, r0, #0
1000e340:	4b57      	ldr	r3, [pc, #348]	; (1000e4a0 <at_ble_event_get+0x6a4>)
1000e342:	8828      	ldrh	r0, [r5, #0]
1000e344:	4798      	blx	r3
1000e346:	e04e      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e348:	1c31      	adds	r1, r6, #0
1000e34a:	9801      	ldr	r0, [sp, #4]
1000e34c:	1c2a      	adds	r2, r5, #0
1000e34e:	4b55      	ldr	r3, [pc, #340]	; (1000e4a4 <at_ble_event_get+0x6a8>)
1000e350:	4798      	blx	r3
1000e352:	2623      	movs	r6, #35	; 0x23
1000e354:	e047      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e356:	9801      	ldr	r0, [sp, #4]
1000e358:	1c31      	adds	r1, r6, #0
1000e35a:	1c2a      	adds	r2, r5, #0
1000e35c:	4b52      	ldr	r3, [pc, #328]	; (1000e4a8 <at_ble_event_get+0x6ac>)
1000e35e:	e770      	b.n	1000e242 <at_ble_event_get+0x446>
1000e360:	9b01      	ldr	r3, [sp, #4]
1000e362:	1c30      	adds	r0, r6, #0
1000e364:	0a1f      	lsrs	r7, r3, #8
1000e366:	802f      	strh	r7, [r5, #0]
1000e368:	1c29      	adds	r1, r5, #0
1000e36a:	4b50      	ldr	r3, [pc, #320]	; (1000e4ac <at_ble_event_get+0x6b0>)
1000e36c:	e749      	b.n	1000e202 <at_ble_event_get+0x406>
1000e36e:	9801      	ldr	r0, [sp, #4]
1000e370:	1c31      	adds	r1, r6, #0
1000e372:	1c2a      	adds	r2, r5, #0
1000e374:	4b4e      	ldr	r3, [pc, #312]	; (1000e4b0 <at_ble_event_get+0x6b4>)
1000e376:	e764      	b.n	1000e242 <at_ble_event_get+0x446>
1000e378:	1c30      	adds	r0, r6, #0
1000e37a:	1c29      	adds	r1, r5, #0
1000e37c:	9a01      	ldr	r2, [sp, #4]
1000e37e:	4b4d      	ldr	r3, [pc, #308]	; (1000e4b4 <at_ble_event_get+0x6b8>)
1000e380:	4798      	blx	r3
1000e382:	263b      	movs	r6, #59	; 0x3b
1000e384:	e02f      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e386:	1c31      	adds	r1, r6, #0
1000e388:	9801      	ldr	r0, [sp, #4]
1000e38a:	1c2a      	adds	r2, r5, #0
1000e38c:	4b4a      	ldr	r3, [pc, #296]	; (1000e4b8 <at_ble_event_get+0x6bc>)
1000e38e:	4798      	blx	r3
1000e390:	2618      	movs	r6, #24
1000e392:	e028      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e394:	1c31      	adds	r1, r6, #0
1000e396:	9801      	ldr	r0, [sp, #4]
1000e398:	1c2a      	adds	r2, r5, #0
1000e39a:	4b48      	ldr	r3, [pc, #288]	; (1000e4bc <at_ble_event_get+0x6c0>)
1000e39c:	4798      	blx	r3
1000e39e:	2620      	movs	r6, #32
1000e3a0:	e021      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e3a2:	1c31      	adds	r1, r6, #0
1000e3a4:	9801      	ldr	r0, [sp, #4]
1000e3a6:	1c2a      	adds	r2, r5, #0
1000e3a8:	4b45      	ldr	r3, [pc, #276]	; (1000e4c0 <at_ble_event_get+0x6c4>)
1000e3aa:	4798      	blx	r3
1000e3ac:	2633      	movs	r6, #51	; 0x33
1000e3ae:	e01a      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e3b0:	1c31      	adds	r1, r6, #0
1000e3b2:	9801      	ldr	r0, [sp, #4]
1000e3b4:	1c2a      	adds	r2, r5, #0
1000e3b6:	4b43      	ldr	r3, [pc, #268]	; (1000e4c4 <at_ble_event_get+0x6c8>)
1000e3b8:	4798      	blx	r3
1000e3ba:	2630      	movs	r6, #48	; 0x30
1000e3bc:	e013      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e3be:	1c31      	adds	r1, r6, #0
1000e3c0:	9801      	ldr	r0, [sp, #4]
1000e3c2:	1c2a      	adds	r2, r5, #0
1000e3c4:	4b40      	ldr	r3, [pc, #256]	; (1000e4c8 <at_ble_event_get+0x6cc>)
1000e3c6:	4798      	blx	r3
1000e3c8:	2634      	movs	r6, #52	; 0x34
1000e3ca:	e00c      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e3cc:	1c31      	adds	r1, r6, #0
1000e3ce:	9801      	ldr	r0, [sp, #4]
1000e3d0:	1c2a      	adds	r2, r5, #0
1000e3d2:	4b3e      	ldr	r3, [pc, #248]	; (1000e4cc <at_ble_event_get+0x6d0>)
1000e3d4:	4798      	blx	r3
1000e3d6:	2635      	movs	r6, #53	; 0x35
1000e3d8:	e005      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e3da:	1c31      	adds	r1, r6, #0
1000e3dc:	9801      	ldr	r0, [sp, #4]
1000e3de:	1c2a      	adds	r2, r5, #0
1000e3e0:	4b3b      	ldr	r3, [pc, #236]	; (1000e4d0 <at_ble_event_get+0x6d4>)
1000e3e2:	4798      	blx	r3
1000e3e4:	2632      	movs	r6, #50	; 0x32
1000e3e6:	9b03      	ldr	r3, [sp, #12]
1000e3e8:	701e      	strb	r6, [r3, #0]
1000e3ea:	2300      	movs	r3, #0
1000e3ec:	9302      	str	r3, [sp, #8]
1000e3ee:	e57a      	b.n	1000dee6 <at_ble_event_get+0xea>
1000e3f0:	23d0      	movs	r3, #208	; 0xd0
1000e3f2:	e7fb      	b.n	1000e3ec <at_ble_event_get+0x5f0>
1000e3f4:	9b01      	ldr	r3, [sp, #4]
1000e3f6:	9e02      	ldr	r6, [sp, #8]
1000e3f8:	2bbb      	cmp	r3, #187	; 0xbb
1000e3fa:	d000      	beq.n	1000e3fe <at_ble_event_get+0x602>
1000e3fc:	e6e6      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e3fe:	e7f2      	b.n	1000e3e6 <at_ble_event_get+0x5ea>
1000e400:	9b02      	ldr	r3, [sp, #8]
1000e402:	2b00      	cmp	r3, #0
1000e404:	d000      	beq.n	1000e408 <at_ble_event_get+0x60c>
1000e406:	e56e      	b.n	1000dee6 <at_ble_event_get+0xea>
1000e408:	e6e0      	b.n	1000e1cc <at_ble_event_get+0x3d0>
1000e40a:	9802      	ldr	r0, [sp, #8]
1000e40c:	b007      	add	sp, #28
1000e40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e410:	00000e22 	.word	0x00000e22
1000e414:	00000e25 	.word	0x00000e25
1000e418:	00001b05 	.word	0x00001b05
1000e41c:	00001b01 	.word	0x00001b01
1000e420:	00001b03 	.word	0x00001b03
1000e424:	00001b06 	.word	0x00001b06
1000e428:	00001b08 	.word	0x00001b08
1000e42c:	100105b9 	.word	0x100105b9
1000e430:	1001059d 	.word	0x1001059d
1000e434:	10010839 	.word	0x10010839
1000e438:	10010929 	.word	0x10010929
1000e43c:	1001094d 	.word	0x1001094d
1000e440:	1000f931 	.word	0x1000f931
1000e444:	100101b1 	.word	0x100101b1
1000e448:	1001022d 	.word	0x1001022d
1000e44c:	1000fbe9 	.word	0x1000fbe9
1000e450:	1000fc85 	.word	0x1000fc85
1000e454:	1000fd5d 	.word	0x1000fd5d
1000e458:	1000ffe5 	.word	0x1000ffe5
1000e45c:	10010085 	.word	0x10010085
1000e460:	1001013d 	.word	0x1001013d
1000e464:	10010165 	.word	0x10010165
1000e468:	1001017b 	.word	0x1001017b
1000e46c:	10010245 	.word	0x10010245
1000e470:	10010273 	.word	0x10010273
1000e474:	10010289 	.word	0x10010289
1000e478:	100102b3 	.word	0x100102b3
1000e47c:	100100e1 	.word	0x100100e1
1000e480:	1001010b 	.word	0x1001010b
1000e484:	1000f371 	.word	0x1000f371
1000e488:	1000f39d 	.word	0x1000f39d
1000e48c:	10010af5 	.word	0x10010af5
1000e490:	10010b31 	.word	0x10010b31
1000e494:	10010b79 	.word	0x10010b79
1000e498:	10010bbd 	.word	0x10010bbd
1000e49c:	10010bf1 	.word	0x10010bf1
1000e4a0:	10010ab5 	.word	0x10010ab5
1000e4a4:	10010cbd 	.word	0x10010cbd
1000e4a8:	10010c45 	.word	0x10010c45
1000e4ac:	1000f2c9 	.word	0x1000f2c9
1000e4b0:	1000f335 	.word	0x1000f335
1000e4b4:	1000f2f9 	.word	0x1000f2f9
1000e4b8:	10010ccd 	.word	0x10010ccd
1000e4bc:	10010d0d 	.word	0x10010d0d
1000e4c0:	10010fd5 	.word	0x10010fd5
1000e4c4:	10010fdf 	.word	0x10010fdf
1000e4c8:	10010fe5 	.word	0x10010fe5
1000e4cc:	10010feb 	.word	0x10010feb
1000e4d0:	10010ff7 	.word	0x10010ff7

1000e4d4 <internal_event_flush>:
1000e4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4d6:	490e      	ldr	r1, [pc, #56]	; (1000e510 <internal_event_flush+0x3c>)
1000e4d8:	2400      	movs	r4, #0
1000e4da:	680b      	ldr	r3, [r1, #0]
1000e4dc:	1c0f      	adds	r7, r1, #0
1000e4de:	1c1e      	adds	r6, r3, #0
1000e4e0:	4a0c      	ldr	r2, [pc, #48]	; (1000e514 <internal_event_flush+0x40>)
1000e4e2:	6815      	ldr	r5, [r2, #0]
1000e4e4:	9201      	str	r2, [sp, #4]
1000e4e6:	2b00      	cmp	r3, #0
1000e4e8:	d00e      	beq.n	1000e508 <internal_event_flush+0x34>
1000e4ea:	889a      	ldrh	r2, [r3, #4]
1000e4ec:	6819      	ldr	r1, [r3, #0]
1000e4ee:	4282      	cmp	r2, r0
1000e4f0:	d107      	bne.n	1000e502 <internal_event_flush+0x2e>
1000e4f2:	2c00      	cmp	r4, #0
1000e4f4:	d001      	beq.n	1000e4fa <internal_event_flush+0x26>
1000e4f6:	6021      	str	r1, [r4, #0]
1000e4f8:	e000      	b.n	1000e4fc <internal_event_flush+0x28>
1000e4fa:	1c0e      	adds	r6, r1, #0
1000e4fc:	601d      	str	r5, [r3, #0]
1000e4fe:	1c1d      	adds	r5, r3, #0
1000e500:	1c23      	adds	r3, r4, #0
1000e502:	1c1c      	adds	r4, r3, #0
1000e504:	1c0b      	adds	r3, r1, #0
1000e506:	e7ee      	b.n	1000e4e6 <internal_event_flush+0x12>
1000e508:	9b01      	ldr	r3, [sp, #4]
1000e50a:	603e      	str	r6, [r7, #0]
1000e50c:	601d      	str	r5, [r3, #0]
1000e50e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e510:	1001aa58 	.word	0x1001aa58
1000e514:	1001aa5c 	.word	0x1001aa5c

1000e518 <internal_conn_flush>:
1000e518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e51a:	4a12      	ldr	r2, [pc, #72]	; (1000e564 <internal_conn_flush+0x4c>)
1000e51c:	9000      	str	r0, [sp, #0]
1000e51e:	6813      	ldr	r3, [r2, #0]
1000e520:	4811      	ldr	r0, [pc, #68]	; (1000e568 <internal_conn_flush+0x50>)
1000e522:	1c1f      	adds	r7, r3, #0
1000e524:	2100      	movs	r1, #0
1000e526:	4684      	mov	ip, r0
1000e528:	6804      	ldr	r4, [r0, #0]
1000e52a:	9201      	str	r2, [sp, #4]
1000e52c:	2b00      	cmp	r3, #0
1000e52e:	d014      	beq.n	1000e55a <internal_conn_flush+0x42>
1000e530:	88d8      	ldrh	r0, [r3, #6]
1000e532:	9a00      	ldr	r2, [sp, #0]
1000e534:	681d      	ldr	r5, [r3, #0]
1000e536:	0a06      	lsrs	r6, r0, #8
1000e538:	4296      	cmp	r6, r2
1000e53a:	d10b      	bne.n	1000e554 <internal_conn_flush+0x3c>
1000e53c:	26fd      	movs	r6, #253	; 0xfd
1000e53e:	4006      	ands	r6, r0
1000e540:	2e0c      	cmp	r6, #12
1000e542:	d107      	bne.n	1000e554 <internal_conn_flush+0x3c>
1000e544:	2900      	cmp	r1, #0
1000e546:	d001      	beq.n	1000e54c <internal_conn_flush+0x34>
1000e548:	600d      	str	r5, [r1, #0]
1000e54a:	e000      	b.n	1000e54e <internal_conn_flush+0x36>
1000e54c:	1c2f      	adds	r7, r5, #0
1000e54e:	601c      	str	r4, [r3, #0]
1000e550:	1c1c      	adds	r4, r3, #0
1000e552:	1c0b      	adds	r3, r1, #0
1000e554:	1c19      	adds	r1, r3, #0
1000e556:	1c2b      	adds	r3, r5, #0
1000e558:	e7e8      	b.n	1000e52c <internal_conn_flush+0x14>
1000e55a:	9b01      	ldr	r3, [sp, #4]
1000e55c:	601f      	str	r7, [r3, #0]
1000e55e:	4663      	mov	r3, ip
1000e560:	601c      	str	r4, [r3, #0]
1000e562:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e564:	1001aa58 	.word	0x1001aa58
1000e568:	1001aa5c 	.word	0x1001aa5c

1000e56c <at_ble_device_name_set>:
1000e56c:	b530      	push	{r4, r5, lr}
1000e56e:	23cf      	movs	r3, #207	; 0xcf
1000e570:	2800      	cmp	r0, #0
1000e572:	d010      	beq.n	1000e596 <at_ble_device_name_set+0x2a>
1000e574:	1e4a      	subs	r2, r1, #1
1000e576:	2a1f      	cmp	r2, #31
1000e578:	d80d      	bhi.n	1000e596 <at_ble_device_name_set+0x2a>
1000e57a:	4a08      	ldr	r2, [pc, #32]	; (1000e59c <at_ble_device_name_set+0x30>)
1000e57c:	1c13      	adds	r3, r2, #0
1000e57e:	33aa      	adds	r3, #170	; 0xaa
1000e580:	8019      	strh	r1, [r3, #0]
1000e582:	2300      	movs	r3, #0
1000e584:	1c1c      	adds	r4, r3, #0
1000e586:	5cc5      	ldrb	r5, [r0, r3]
1000e588:	34ac      	adds	r4, #172	; 0xac
1000e58a:	3301      	adds	r3, #1
1000e58c:	5515      	strb	r5, [r2, r4]
1000e58e:	b2dc      	uxtb	r4, r3
1000e590:	428c      	cmp	r4, r1
1000e592:	d3f7      	bcc.n	1000e584 <at_ble_device_name_set+0x18>
1000e594:	2300      	movs	r3, #0
1000e596:	1c18      	adds	r0, r3, #0
1000e598:	bd30      	pop	{r4, r5, pc}
1000e59a:	46c0      	nop			; (mov r8, r8)
1000e59c:	1001ba92 	.word	0x1001ba92

1000e5a0 <at_ble_addr_get>:
1000e5a0:	b510      	push	{r4, lr}
1000e5a2:	1c04      	adds	r4, r0, #0
1000e5a4:	20cf      	movs	r0, #207	; 0xcf
1000e5a6:	2c00      	cmp	r4, #0
1000e5a8:	d006      	beq.n	1000e5b8 <at_ble_addr_get+0x18>
1000e5aa:	4b04      	ldr	r3, [pc, #16]	; (1000e5bc <at_ble_addr_get+0x1c>)
1000e5ac:	38ce      	subs	r0, #206	; 0xce
1000e5ae:	1c21      	adds	r1, r4, #0
1000e5b0:	4798      	blx	r3
1000e5b2:	4b03      	ldr	r3, [pc, #12]	; (1000e5c0 <at_ble_addr_get+0x20>)
1000e5b4:	791b      	ldrb	r3, [r3, #4]
1000e5b6:	7023      	strb	r3, [r4, #0]
1000e5b8:	bd10      	pop	{r4, pc}
1000e5ba:	46c0      	nop			; (mov r8, r8)
1000e5bc:	1001044d 	.word	0x1001044d
1000e5c0:	1001ba92 	.word	0x1001ba92

1000e5c4 <at_ble_set_dev_config>:
1000e5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5c6:	7906      	ldrb	r6, [r0, #4]
1000e5c8:	b089      	sub	sp, #36	; 0x24
1000e5ca:	25cf      	movs	r5, #207	; 0xcf
1000e5cc:	2e03      	cmp	r6, #3
1000e5ce:	d838      	bhi.n	1000e642 <at_ble_set_dev_config+0x7e>
1000e5d0:	7803      	ldrb	r3, [r0, #0]
1000e5d2:	3511      	adds	r5, #17
1000e5d4:	2b0f      	cmp	r3, #15
1000e5d6:	d834      	bhi.n	1000e642 <at_ble_set_dev_config+0x7e>
1000e5d8:	2380      	movs	r3, #128	; 0x80
1000e5da:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e5dc:	3d11      	subs	r5, #17
1000e5de:	009b      	lsls	r3, r3, #2
1000e5e0:	429f      	cmp	r7, r3
1000e5e2:	d82e      	bhi.n	1000e642 <at_ble_set_dev_config+0x7e>
1000e5e4:	7fc5      	ldrb	r5, [r0, #31]
1000e5e6:	7f83      	ldrb	r3, [r0, #30]
1000e5e8:	01ad      	lsls	r5, r5, #6
1000e5ea:	015b      	lsls	r3, r3, #5
1000e5ec:	431d      	orrs	r5, r3
1000e5ee:	7ec3      	ldrb	r3, [r0, #27]
1000e5f0:	431d      	orrs	r5, r3
1000e5f2:	7f43      	ldrb	r3, [r0, #29]
1000e5f4:	011b      	lsls	r3, r3, #4
1000e5f6:	431d      	orrs	r5, r3
1000e5f8:	7f03      	ldrb	r3, [r0, #28]
1000e5fa:	009b      	lsls	r3, r3, #2
1000e5fc:	431d      	orrs	r5, r3
1000e5fe:	4b12      	ldr	r3, [pc, #72]	; (1000e648 <at_ble_set_dev_config+0x84>)
1000e600:	b2ed      	uxtb	r5, r5
1000e602:	711e      	strb	r6, [r3, #4]
1000e604:	7903      	ldrb	r3, [r0, #4]
1000e606:	3b02      	subs	r3, #2
1000e608:	2b01      	cmp	r3, #1
1000e60a:	d801      	bhi.n	1000e610 <at_ble_set_dev_config+0x4c>
1000e60c:	2302      	movs	r3, #2
1000e60e:	7103      	strb	r3, [r0, #4]
1000e610:	1c04      	adds	r4, r0, #0
1000e612:	1c23      	adds	r3, r4, #0
1000e614:	330b      	adds	r3, #11
1000e616:	8861      	ldrh	r1, [r4, #2]
1000e618:	9307      	str	r3, [sp, #28]
1000e61a:	7923      	ldrb	r3, [r4, #4]
1000e61c:	7800      	ldrb	r0, [r0, #0]
1000e61e:	9300      	str	r3, [sp, #0]
1000e620:	9501      	str	r5, [sp, #4]
1000e622:	8c25      	ldrh	r5, [r4, #32]
1000e624:	1d62      	adds	r2, r4, #5
1000e626:	9502      	str	r5, [sp, #8]
1000e628:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e62a:	9b07      	ldr	r3, [sp, #28]
1000e62c:	9503      	str	r5, [sp, #12]
1000e62e:	9704      	str	r7, [sp, #16]
1000e630:	4d06      	ldr	r5, [pc, #24]	; (1000e64c <at_ble_set_dev_config+0x88>)
1000e632:	47a8      	blx	r5
1000e634:	7126      	strb	r6, [r4, #4]
1000e636:	1c05      	adds	r5, r0, #0
1000e638:	1c21      	adds	r1, r4, #0
1000e63a:	4803      	ldr	r0, [pc, #12]	; (1000e648 <at_ble_set_dev_config+0x84>)
1000e63c:	2226      	movs	r2, #38	; 0x26
1000e63e:	4b04      	ldr	r3, [pc, #16]	; (1000e650 <at_ble_set_dev_config+0x8c>)
1000e640:	4798      	blx	r3
1000e642:	1c28      	adds	r0, r5, #0
1000e644:	b009      	add	sp, #36	; 0x24
1000e646:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e648:	1001ba92 	.word	0x1001ba92
1000e64c:	10010345 	.word	0x10010345
1000e650:	100122ab 	.word	0x100122ab

1000e654 <at_ble_init>:
1000e654:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e656:	b087      	sub	sp, #28
1000e658:	af03      	add	r7, sp, #12
1000e65a:	4954      	ldr	r1, [pc, #336]	; (1000e7ac <at_ble_init+0x158>)
1000e65c:	220b      	movs	r2, #11
1000e65e:	4b54      	ldr	r3, [pc, #336]	; (1000e7b0 <at_ble_init+0x15c>)
1000e660:	1c04      	adds	r4, r0, #0
1000e662:	1c38      	adds	r0, r7, #0
1000e664:	4798      	blx	r3
1000e666:	2205      	movs	r2, #5
1000e668:	4b52      	ldr	r3, [pc, #328]	; (1000e7b4 <at_ble_init+0x160>)
1000e66a:	2640      	movs	r6, #64	; 0x40
1000e66c:	801a      	strh	r2, [r3, #0]
1000e66e:	2300      	movs	r3, #0
1000e670:	4a51      	ldr	r2, [pc, #324]	; (1000e7b8 <at_ble_init+0x164>)
1000e672:	6013      	str	r3, [r2, #0]
1000e674:	4a51      	ldr	r2, [pc, #324]	; (1000e7bc <at_ble_init+0x168>)
1000e676:	7013      	strb	r3, [r2, #0]
1000e678:	4a51      	ldr	r2, [pc, #324]	; (1000e7c0 <at_ble_init+0x16c>)
1000e67a:	7013      	strb	r3, [r2, #0]
1000e67c:	4b51      	ldr	r3, [pc, #324]	; (1000e7c4 <at_ble_init+0x170>)
1000e67e:	4798      	blx	r3
1000e680:	4b51      	ldr	r3, [pc, #324]	; (1000e7c8 <at_ble_init+0x174>)
1000e682:	4798      	blx	r3
1000e684:	4b51      	ldr	r3, [pc, #324]	; (1000e7cc <at_ble_init+0x178>)
1000e686:	4798      	blx	r3
1000e688:	4b51      	ldr	r3, [pc, #324]	; (1000e7d0 <at_ble_init+0x17c>)
1000e68a:	4798      	blx	r3
1000e68c:	2c00      	cmp	r4, #0
1000e68e:	d100      	bne.n	1000e692 <at_ble_init+0x3e>
1000e690:	e089      	b.n	1000e7a6 <at_ble_init+0x152>
1000e692:	68a3      	ldr	r3, [r4, #8]
1000e694:	2b00      	cmp	r3, #0
1000e696:	d100      	bne.n	1000e69a <at_ble_init+0x46>
1000e698:	e085      	b.n	1000e7a6 <at_ble_init+0x152>
1000e69a:	6923      	ldr	r3, [r4, #16]
1000e69c:	2b00      	cmp	r3, #0
1000e69e:	d100      	bne.n	1000e6a2 <at_ble_init+0x4e>
1000e6a0:	e081      	b.n	1000e7a6 <at_ble_init+0x152>
1000e6a2:	6820      	ldr	r0, [r4, #0]
1000e6a4:	2800      	cmp	r0, #0
1000e6a6:	d102      	bne.n	1000e6ae <at_ble_init+0x5a>
1000e6a8:	6863      	ldr	r3, [r4, #4]
1000e6aa:	2b00      	cmp	r3, #0
1000e6ac:	d17b      	bne.n	1000e7a6 <at_ble_init+0x152>
1000e6ae:	4b49      	ldr	r3, [pc, #292]	; (1000e7d4 <at_ble_init+0x180>)
1000e6b0:	6861      	ldr	r1, [r4, #4]
1000e6b2:	4798      	blx	r3
1000e6b4:	4b48      	ldr	r3, [pc, #288]	; (1000e7d8 <at_ble_init+0x184>)
1000e6b6:	4798      	blx	r3
1000e6b8:	2801      	cmp	r0, #1
1000e6ba:	d901      	bls.n	1000e6c0 <at_ble_init+0x6c>
1000e6bc:	26e2      	movs	r6, #226	; 0xe2
1000e6be:	e072      	b.n	1000e7a6 <at_ble_init+0x152>
1000e6c0:	4846      	ldr	r0, [pc, #280]	; (1000e7dc <at_ble_init+0x188>)
1000e6c2:	4b47      	ldr	r3, [pc, #284]	; (1000e7e0 <at_ble_init+0x18c>)
1000e6c4:	4798      	blx	r3
1000e6c6:	2800      	cmp	r0, #0
1000e6c8:	d1f8      	bne.n	1000e6bc <at_ble_init+0x68>
1000e6ca:	1c20      	adds	r0, r4, #0
1000e6cc:	4b45      	ldr	r3, [pc, #276]	; (1000e7e4 <at_ble_init+0x190>)
1000e6ce:	4798      	blx	r3
1000e6d0:	68e0      	ldr	r0, [r4, #12]
1000e6d2:	68a1      	ldr	r1, [r4, #8]
1000e6d4:	4b44      	ldr	r3, [pc, #272]	; (1000e7e8 <at_ble_init+0x194>)
1000e6d6:	4798      	blx	r3
1000e6d8:	466b      	mov	r3, sp
1000e6da:	2201      	movs	r2, #1
1000e6dc:	1cdc      	adds	r4, r3, #3
1000e6de:	1c20      	adds	r0, r4, #0
1000e6e0:	a901      	add	r1, sp, #4
1000e6e2:	4252      	negs	r2, r2
1000e6e4:	4b41      	ldr	r3, [pc, #260]	; (1000e7ec <at_ble_init+0x198>)
1000e6e6:	4798      	blx	r3
1000e6e8:	2800      	cmp	r0, #0
1000e6ea:	d102      	bne.n	1000e6f2 <at_ble_init+0x9e>
1000e6ec:	7823      	ldrb	r3, [r4, #0]
1000e6ee:	2b39      	cmp	r3, #57	; 0x39
1000e6f0:	d1f2      	bne.n	1000e6d8 <at_ble_init+0x84>
1000e6f2:	4b3f      	ldr	r3, [pc, #252]	; (1000e7f0 <at_ble_init+0x19c>)
1000e6f4:	4798      	blx	r3
1000e6f6:	1e06      	subs	r6, r0, #0
1000e6f8:	d155      	bne.n	1000e7a6 <at_ble_init+0x152>
1000e6fa:	1c03      	adds	r3, r0, #0
1000e6fc:	2101      	movs	r1, #1
1000e6fe:	4a3d      	ldr	r2, [pc, #244]	; (1000e7f4 <at_ble_init+0x1a0>)
1000e700:	4249      	negs	r1, r1
1000e702:	189a      	adds	r2, r3, r2
1000e704:	3312      	adds	r3, #18
1000e706:	8151      	strh	r1, [r2, #10]
1000e708:	2b90      	cmp	r3, #144	; 0x90
1000e70a:	d1f7      	bne.n	1000e6fc <at_ble_init+0xa8>
1000e70c:	4c3a      	ldr	r4, [pc, #232]	; (1000e7f8 <at_ble_init+0x1a4>)
1000e70e:	3b81      	subs	r3, #129	; 0x81
1000e710:	7023      	strb	r3, [r4, #0]
1000e712:	4b3a      	ldr	r3, [pc, #232]	; (1000e7fc <at_ble_init+0x1a8>)
1000e714:	4a3a      	ldr	r2, [pc, #232]	; (1000e800 <at_ble_init+0x1ac>)
1000e716:	8063      	strh	r3, [r4, #2]
1000e718:	2300      	movs	r3, #0
1000e71a:	7123      	strb	r3, [r4, #4]
1000e71c:	3301      	adds	r3, #1
1000e71e:	1e58      	subs	r0, r3, #1
1000e720:	0119      	lsls	r1, r3, #4
1000e722:	4301      	orrs	r1, r0
1000e724:	3302      	adds	r3, #2
1000e726:	7011      	strb	r1, [r2, #0]
1000e728:	3201      	adds	r2, #1
1000e72a:	2b21      	cmp	r3, #33	; 0x21
1000e72c:	d1f7      	bne.n	1000e71e <at_ble_init+0xca>
1000e72e:	33e0      	adds	r3, #224	; 0xe0
1000e730:	33ff      	adds	r3, #255	; 0xff
1000e732:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e734:	1c23      	adds	r3, r4, #0
1000e736:	2500      	movs	r5, #0
1000e738:	3373      	adds	r3, #115	; 0x73
1000e73a:	701d      	strb	r5, [r3, #0]
1000e73c:	1c23      	adds	r3, r4, #0
1000e73e:	3372      	adds	r3, #114	; 0x72
1000e740:	701d      	strb	r5, [r3, #0]
1000e742:	1c23      	adds	r3, r4, #0
1000e744:	3376      	adds	r3, #118	; 0x76
1000e746:	701d      	strb	r5, [r3, #0]
1000e748:	1c23      	adds	r3, r4, #0
1000e74a:	33cc      	adds	r3, #204	; 0xcc
1000e74c:	801d      	strh	r5, [r3, #0]
1000e74e:	1c22      	adds	r2, r4, #0
1000e750:	23a0      	movs	r3, #160	; 0xa0
1000e752:	32d0      	adds	r2, #208	; 0xd0
1000e754:	005b      	lsls	r3, r3, #1
1000e756:	8013      	strh	r3, [r2, #0]
1000e758:	1c22      	adds	r2, r4, #0
1000e75a:	32ce      	adds	r2, #206	; 0xce
1000e75c:	8013      	strh	r3, [r2, #0]
1000e75e:	1c23      	adds	r3, r4, #0
1000e760:	33d2      	adds	r3, #210	; 0xd2
1000e762:	801d      	strh	r5, [r3, #0]
1000e764:	22fa      	movs	r2, #250	; 0xfa
1000e766:	1c23      	adds	r3, r4, #0
1000e768:	0052      	lsls	r2, r2, #1
1000e76a:	33d4      	adds	r3, #212	; 0xd4
1000e76c:	801a      	strh	r2, [r3, #0]
1000e76e:	1c23      	adds	r3, r4, #0
1000e770:	33d6      	adds	r3, #214	; 0xd6
1000e772:	701d      	strb	r5, [r3, #0]
1000e774:	1c20      	adds	r0, r4, #0
1000e776:	4b23      	ldr	r3, [pc, #140]	; (1000e804 <at_ble_init+0x1b0>)
1000e778:	76e5      	strb	r5, [r4, #27]
1000e77a:	7725      	strb	r5, [r4, #28]
1000e77c:	7765      	strb	r5, [r4, #29]
1000e77e:	77a5      	strb	r5, [r4, #30]
1000e780:	77e5      	strb	r5, [r4, #31]
1000e782:	8425      	strh	r5, [r4, #32]
1000e784:	8465      	strh	r5, [r4, #34]	; 0x22
1000e786:	4798      	blx	r3
1000e788:	1c23      	adds	r3, r4, #0
1000e78a:	2207      	movs	r2, #7
1000e78c:	3374      	adds	r3, #116	; 0x74
1000e78e:	701a      	strb	r2, [r3, #0]
1000e790:	1c23      	adds	r3, r4, #0
1000e792:	3204      	adds	r2, #4
1000e794:	33aa      	adds	r3, #170	; 0xaa
1000e796:	801a      	strh	r2, [r3, #0]
1000e798:	1c2b      	adds	r3, r5, #0
1000e79a:	5d7a      	ldrb	r2, [r7, r5]
1000e79c:	33ac      	adds	r3, #172	; 0xac
1000e79e:	3501      	adds	r5, #1
1000e7a0:	54e2      	strb	r2, [r4, r3]
1000e7a2:	2d0b      	cmp	r5, #11
1000e7a4:	d1f8      	bne.n	1000e798 <at_ble_init+0x144>
1000e7a6:	1c30      	adds	r0, r6, #0
1000e7a8:	b007      	add	sp, #28
1000e7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7ac:	10018c41 	.word	0x10018c41
1000e7b0:	100122ab 	.word	0x100122ab
1000e7b4:	1001ba00 	.word	0x1001ba00
1000e7b8:	1001ab08 	.word	0x1001ab08
1000e7bc:	1001aa68 	.word	0x1001aa68
1000e7c0:	10018fa8 	.word	0x10018fa8
1000e7c4:	10010d1d 	.word	0x10010d1d
1000e7c8:	1000eac5 	.word	0x1000eac5
1000e7cc:	1000f125 	.word	0x1000f125
1000e7d0:	1000f365 	.word	0x1000f365
1000e7d4:	1000f161 	.word	0x1000f161
1000e7d8:	1000d325 	.word	0x1000d325
1000e7dc:	1000f665 	.word	0x1000f665
1000e7e0:	1000d569 	.word	0x1000d569
1000e7e4:	1000f70d 	.word	0x1000f70d
1000e7e8:	1000dd41 	.word	0x1000dd41
1000e7ec:	1000ddfd 	.word	0x1000ddfd
1000e7f0:	100102d5 	.word	0x100102d5
1000e7f4:	1001ba02 	.word	0x1001ba02
1000e7f8:	1001ba92 	.word	0x1001ba92
1000e7fc:	00003a98 	.word	0x00003a98
1000e800:	1001ba9d 	.word	0x1001ba9d
1000e804:	1000e5c5 	.word	0x1000e5c5

1000e808 <at_ble_addr_set>:
1000e808:	b538      	push	{r3, r4, r5, lr}
1000e80a:	1c45      	adds	r5, r0, #1
1000e80c:	1c03      	adds	r3, r0, #0
1000e80e:	20cf      	movs	r0, #207	; 0xcf
1000e810:	2d00      	cmp	r5, #0
1000e812:	d018      	beq.n	1000e846 <at_ble_addr_set+0x3e>
1000e814:	781a      	ldrb	r2, [r3, #0]
1000e816:	2a03      	cmp	r2, #3
1000e818:	d815      	bhi.n	1000e846 <at_ble_addr_set+0x3e>
1000e81a:	2a01      	cmp	r2, #1
1000e81c:	d102      	bne.n	1000e824 <at_ble_addr_set+0x1c>
1000e81e:	785a      	ldrb	r2, [r3, #1]
1000e820:	2a00      	cmp	r2, #0
1000e822:	d010      	beq.n	1000e846 <at_ble_addr_set+0x3e>
1000e824:	1c1c      	adds	r4, r3, #0
1000e826:	1c29      	adds	r1, r5, #0
1000e828:	2206      	movs	r2, #6
1000e82a:	4b07      	ldr	r3, [pc, #28]	; (1000e848 <at_ble_addr_set+0x40>)
1000e82c:	4807      	ldr	r0, [pc, #28]	; (1000e84c <at_ble_addr_set+0x44>)
1000e82e:	4798      	blx	r3
1000e830:	7823      	ldrb	r3, [r4, #0]
1000e832:	4807      	ldr	r0, [pc, #28]	; (1000e850 <at_ble_addr_set+0x48>)
1000e834:	7103      	strb	r3, [r0, #4]
1000e836:	4b07      	ldr	r3, [pc, #28]	; (1000e854 <at_ble_addr_set+0x4c>)
1000e838:	4798      	blx	r3
1000e83a:	7823      	ldrb	r3, [r4, #0]
1000e83c:	2b00      	cmp	r3, #0
1000e83e:	d102      	bne.n	1000e846 <at_ble_addr_set+0x3e>
1000e840:	1c28      	adds	r0, r5, #0
1000e842:	4b05      	ldr	r3, [pc, #20]	; (1000e858 <at_ble_addr_set+0x50>)
1000e844:	4798      	blx	r3
1000e846:	bd38      	pop	{r3, r4, r5, pc}
1000e848:	100122ab 	.word	0x100122ab
1000e84c:	1001ba97 	.word	0x1001ba97
1000e850:	1001ba92 	.word	0x1001ba92
1000e854:	1000e5c5 	.word	0x1000e5c5
1000e858:	1000f791 	.word	0x1000f791

1000e85c <at_ble_adv_data_set>:
1000e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e85e:	4684      	mov	ip, r0
1000e860:	1c0f      	adds	r7, r1, #0
1000e862:	1c16      	adds	r6, r2, #0
1000e864:	1c1c      	adds	r4, r3, #0
1000e866:	2800      	cmp	r0, #0
1000e868:	d102      	bne.n	1000e870 <at_ble_adv_data_set+0x14>
1000e86a:	20e2      	movs	r0, #226	; 0xe2
1000e86c:	2a00      	cmp	r2, #0
1000e86e:	d02b      	beq.n	1000e8c8 <at_ble_adv_data_set+0x6c>
1000e870:	20cf      	movs	r0, #207	; 0xcf
1000e872:	2f1f      	cmp	r7, #31
1000e874:	d828      	bhi.n	1000e8c8 <at_ble_adv_data_set+0x6c>
1000e876:	2c1f      	cmp	r4, #31
1000e878:	d826      	bhi.n	1000e8c8 <at_ble_adv_data_set+0x6c>
1000e87a:	4663      	mov	r3, ip
1000e87c:	2b00      	cmp	r3, #0
1000e87e:	d00e      	beq.n	1000e89e <at_ble_adv_data_set+0x42>
1000e880:	4812      	ldr	r0, [pc, #72]	; (1000e8cc <at_ble_adv_data_set+0x70>)
1000e882:	4d13      	ldr	r5, [pc, #76]	; (1000e8d0 <at_ble_adv_data_set+0x74>)
1000e884:	2f00      	cmp	r7, #0
1000e886:	d104      	bne.n	1000e892 <at_ble_adv_data_set+0x36>
1000e888:	1c39      	adds	r1, r7, #0
1000e88a:	221f      	movs	r2, #31
1000e88c:	4b11      	ldr	r3, [pc, #68]	; (1000e8d4 <at_ble_adv_data_set+0x78>)
1000e88e:	4798      	blx	r3
1000e890:	e003      	b.n	1000e89a <at_ble_adv_data_set+0x3e>
1000e892:	4661      	mov	r1, ip
1000e894:	1c3a      	adds	r2, r7, #0
1000e896:	4b10      	ldr	r3, [pc, #64]	; (1000e8d8 <at_ble_adv_data_set+0x7c>)
1000e898:	4798      	blx	r3
1000e89a:	3572      	adds	r5, #114	; 0x72
1000e89c:	702f      	strb	r7, [r5, #0]
1000e89e:	1e30      	subs	r0, r6, #0
1000e8a0:	d012      	beq.n	1000e8c8 <at_ble_adv_data_set+0x6c>
1000e8a2:	4d0b      	ldr	r5, [pc, #44]	; (1000e8d0 <at_ble_adv_data_set+0x74>)
1000e8a4:	480d      	ldr	r0, [pc, #52]	; (1000e8dc <at_ble_adv_data_set+0x80>)
1000e8a6:	2c00      	cmp	r4, #0
1000e8a8:	d107      	bne.n	1000e8ba <at_ble_adv_data_set+0x5e>
1000e8aa:	1c21      	adds	r1, r4, #0
1000e8ac:	221f      	movs	r2, #31
1000e8ae:	4b09      	ldr	r3, [pc, #36]	; (1000e8d4 <at_ble_adv_data_set+0x78>)
1000e8b0:	3573      	adds	r5, #115	; 0x73
1000e8b2:	4798      	blx	r3
1000e8b4:	702c      	strb	r4, [r5, #0]
1000e8b6:	1c20      	adds	r0, r4, #0
1000e8b8:	e006      	b.n	1000e8c8 <at_ble_adv_data_set+0x6c>
1000e8ba:	1c31      	adds	r1, r6, #0
1000e8bc:	1c22      	adds	r2, r4, #0
1000e8be:	4b06      	ldr	r3, [pc, #24]	; (1000e8d8 <at_ble_adv_data_set+0x7c>)
1000e8c0:	4798      	blx	r3
1000e8c2:	2000      	movs	r0, #0
1000e8c4:	3573      	adds	r5, #115	; 0x73
1000e8c6:	702c      	strb	r4, [r5, #0]
1000e8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e8ca:	46c0      	nop			; (mov r8, r8)
1000e8cc:	1001bac6 	.word	0x1001bac6
1000e8d0:	1001ba92 	.word	0x1001ba92
1000e8d4:	100122bd 	.word	0x100122bd
1000e8d8:	100122ab 	.word	0x100122ab
1000e8dc:	1001bae5 	.word	0x1001bae5

1000e8e0 <at_ble_adv_start>:
1000e8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e8e2:	b091      	sub	sp, #68	; 0x44
1000e8e4:	1c1f      	adds	r7, r3, #0
1000e8e6:	ab16      	add	r3, sp, #88	; 0x58
1000e8e8:	881d      	ldrh	r5, [r3, #0]
1000e8ea:	ab17      	add	r3, sp, #92	; 0x5c
1000e8ec:	881b      	ldrh	r3, [r3, #0]
1000e8ee:	910d      	str	r1, [sp, #52]	; 0x34
1000e8f0:	930e      	str	r3, [sp, #56]	; 0x38
1000e8f2:	ab18      	add	r3, sp, #96	; 0x60
1000e8f4:	781b      	ldrb	r3, [r3, #0]
1000e8f6:	1c04      	adds	r4, r0, #0
1000e8f8:	930f      	str	r3, [sp, #60]	; 0x3c
1000e8fa:	4b42      	ldr	r3, [pc, #264]	; (1000ea04 <at_ble_adv_start+0x124>)
1000e8fc:	1c16      	adds	r6, r2, #0
1000e8fe:	3373      	adds	r3, #115	; 0x73
1000e900:	781b      	ldrb	r3, [r3, #0]
1000e902:	20cf      	movs	r0, #207	; 0xcf
1000e904:	930c      	str	r3, [sp, #48]	; 0x30
1000e906:	2c01      	cmp	r4, #1
1000e908:	d103      	bne.n	1000e912 <at_ble_adv_start+0x32>
1000e90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e90c:	2b00      	cmp	r3, #0
1000e90e:	d176      	bne.n	1000e9fe <at_ble_adv_start+0x11e>
1000e910:	e024      	b.n	1000e95c <at_ble_adv_start+0x7c>
1000e912:	2c04      	cmp	r4, #4
1000e914:	d873      	bhi.n	1000e9fe <at_ble_adv_start+0x11e>
1000e916:	2380      	movs	r3, #128	; 0x80
1000e918:	01db      	lsls	r3, r3, #7
1000e91a:	429d      	cmp	r5, r3
1000e91c:	d86f      	bhi.n	1000e9fe <at_ble_adv_start+0x11e>
1000e91e:	2c00      	cmp	r4, #0
1000e920:	d102      	bne.n	1000e928 <at_ble_adv_start+0x48>
1000e922:	2d1f      	cmp	r5, #31
1000e924:	d96b      	bls.n	1000e9fe <at_ble_adv_start+0x11e>
1000e926:	e003      	b.n	1000e930 <at_ble_adv_start+0x50>
1000e928:	2d9f      	cmp	r5, #159	; 0x9f
1000e92a:	d801      	bhi.n	1000e930 <at_ble_adv_start+0x50>
1000e92c:	2c01      	cmp	r4, #1
1000e92e:	d166      	bne.n	1000e9fe <at_ble_adv_start+0x11e>
1000e930:	2f00      	cmp	r7, #0
1000e932:	d009      	beq.n	1000e948 <at_ble_adv_start+0x68>
1000e934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e936:	20cf      	movs	r0, #207	; 0xcf
1000e938:	3b01      	subs	r3, #1
1000e93a:	2b01      	cmp	r3, #1
1000e93c:	d95f      	bls.n	1000e9fe <at_ble_adv_start+0x11e>
1000e93e:	2c01      	cmp	r4, #1
1000e940:	d102      	bne.n	1000e948 <at_ble_adv_start+0x68>
1000e942:	2d00      	cmp	r5, #0
1000e944:	d100      	bne.n	1000e948 <at_ble_adv_start+0x68>
1000e946:	3520      	adds	r5, #32
1000e948:	4b2f      	ldr	r3, [pc, #188]	; (1000ea08 <at_ble_adv_start+0x128>)
1000e94a:	4798      	blx	r3
1000e94c:	1c01      	adds	r1, r0, #0
1000e94e:	2e00      	cmp	r6, #0
1000e950:	d043      	beq.n	1000e9da <at_ble_adv_start+0xfa>
1000e952:	7833      	ldrb	r3, [r6, #0]
1000e954:	1e60      	subs	r0, r4, #1
1000e956:	2b00      	cmp	r3, #0
1000e958:	d109      	bne.n	1000e96e <at_ble_adv_start+0x8e>
1000e95a:	e03b      	b.n	1000e9d4 <at_ble_adv_start+0xf4>
1000e95c:	2380      	movs	r3, #128	; 0x80
1000e95e:	01db      	lsls	r3, r3, #7
1000e960:	429d      	cmp	r5, r3
1000e962:	d84c      	bhi.n	1000e9fe <at_ble_adv_start+0x11e>
1000e964:	2e00      	cmp	r6, #0
1000e966:	d04a      	beq.n	1000e9fe <at_ble_adv_start+0x11e>
1000e968:	2f00      	cmp	r7, #0
1000e96a:	d1e3      	bne.n	1000e934 <at_ble_adv_start+0x54>
1000e96c:	e02b      	b.n	1000e9c6 <at_ble_adv_start+0xe6>
1000e96e:	2301      	movs	r3, #1
1000e970:	2803      	cmp	r0, #3
1000e972:	d93a      	bls.n	1000e9ea <at_ble_adv_start+0x10a>
1000e974:	200d      	movs	r0, #13
1000e976:	1c72      	adds	r2, r6, #1
1000e978:	e002      	b.n	1000e980 <at_ble_adv_start+0xa0>
1000e97a:	200e      	movs	r0, #14
1000e97c:	1e32      	subs	r2, r6, #0
1000e97e:	d1fa      	bne.n	1000e976 <at_ble_adv_start+0x96>
1000e980:	4c20      	ldr	r4, [pc, #128]	; (1000ea04 <at_ble_adv_start+0x124>)
1000e982:	3474      	adds	r4, #116	; 0x74
1000e984:	7826      	ldrb	r6, [r4, #0]
1000e986:	2407      	movs	r4, #7
1000e988:	2e00      	cmp	r6, #0
1000e98a:	d000      	beq.n	1000e98e <at_ble_adv_start+0xae>
1000e98c:	1c34      	adds	r4, r6, #0
1000e98e:	9200      	str	r2, [sp, #0]
1000e990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e992:	9403      	str	r4, [sp, #12]
1000e994:	9204      	str	r2, [sp, #16]
1000e996:	4a1b      	ldr	r2, [pc, #108]	; (1000ea04 <at_ble_adv_start+0x124>)
1000e998:	9501      	str	r5, [sp, #4]
1000e99a:	9502      	str	r5, [sp, #8]
1000e99c:	9705      	str	r7, [sp, #20]
1000e99e:	3272      	adds	r2, #114	; 0x72
1000e9a0:	7812      	ldrb	r2, [r2, #0]
1000e9a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e9a4:	9206      	str	r2, [sp, #24]
1000e9a6:	4a19      	ldr	r2, [pc, #100]	; (1000ea0c <at_ble_adv_start+0x12c>)
1000e9a8:	9207      	str	r2, [sp, #28]
1000e9aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e9ac:	9208      	str	r2, [sp, #32]
1000e9ae:	4a18      	ldr	r2, [pc, #96]	; (1000ea10 <at_ble_adv_start+0x130>)
1000e9b0:	9209      	str	r2, [sp, #36]	; 0x24
1000e9b2:	2264      	movs	r2, #100	; 0x64
1000e9b4:	4362      	muls	r2, r4
1000e9b6:	b292      	uxth	r2, r2
1000e9b8:	920a      	str	r2, [sp, #40]	; 0x28
1000e9ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e9bc:	4c15      	ldr	r4, [pc, #84]	; (1000ea14 <at_ble_adv_start+0x134>)
1000e9be:	920b      	str	r2, [sp, #44]	; 0x2c
1000e9c0:	4a15      	ldr	r2, [pc, #84]	; (1000ea18 <at_ble_adv_start+0x138>)
1000e9c2:	47a0      	blx	r4
1000e9c4:	e01b      	b.n	1000e9fe <at_ble_adv_start+0x11e>
1000e9c6:	2d00      	cmp	r5, #0
1000e9c8:	d1be      	bne.n	1000e948 <at_ble_adv_start+0x68>
1000e9ca:	4b0f      	ldr	r3, [pc, #60]	; (1000ea08 <at_ble_adv_start+0x128>)
1000e9cc:	4798      	blx	r3
1000e9ce:	2520      	movs	r5, #32
1000e9d0:	1c01      	adds	r1, r0, #0
1000e9d2:	e7be      	b.n	1000e952 <at_ble_adv_start+0x72>
1000e9d4:	2803      	cmp	r0, #3
1000e9d6:	d8cd      	bhi.n	1000e974 <at_ble_adv_start+0x94>
1000e9d8:	e006      	b.n	1000e9e8 <at_ble_adv_start+0x108>
1000e9da:	1e60      	subs	r0, r4, #1
1000e9dc:	2803      	cmp	r0, #3
1000e9de:	d903      	bls.n	1000e9e8 <at_ble_adv_start+0x108>
1000e9e0:	1c33      	adds	r3, r6, #0
1000e9e2:	200d      	movs	r0, #13
1000e9e4:	1c32      	adds	r2, r6, #0
1000e9e6:	e7cb      	b.n	1000e980 <at_ble_adv_start+0xa0>
1000e9e8:	2300      	movs	r3, #0
1000e9ea:	f006 f971 	bl	10014cd0 <__gnu_thumb1_case_sqi>
1000e9ee:	06c6      	.short	0x06c6
1000e9f0:	0204      	.short	0x0204
1000e9f2:	200f      	movs	r0, #15
1000e9f4:	e7c2      	b.n	1000e97c <at_ble_adv_start+0x9c>
1000e9f6:	2200      	movs	r2, #0
1000e9f8:	920c      	str	r2, [sp, #48]	; 0x30
1000e9fa:	200c      	movs	r0, #12
1000e9fc:	e7be      	b.n	1000e97c <at_ble_adv_start+0x9c>
1000e9fe:	b011      	add	sp, #68	; 0x44
1000ea00:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea02:	46c0      	nop			; (mov r8, r8)
1000ea04:	1001ba92 	.word	0x1001ba92
1000ea08:	10010821 	.word	0x10010821
1000ea0c:	1001bac6 	.word	0x1001bac6
1000ea10:	1001bae5 	.word	0x1001bae5
1000ea14:	10010701 	.word	0x10010701
1000ea18:	00003a98 	.word	0x00003a98

1000ea1c <at_ble_adv_stop>:
1000ea1c:	b508      	push	{r3, lr}
1000ea1e:	4b01      	ldr	r3, [pc, #4]	; (1000ea24 <at_ble_adv_stop+0x8>)
1000ea20:	4798      	blx	r3
1000ea22:	bd08      	pop	{r3, pc}
1000ea24:	1001052d 	.word	0x1001052d

1000ea28 <at_ble_scan_stop>:
1000ea28:	b510      	push	{r4, lr}
1000ea2a:	4b05      	ldr	r3, [pc, #20]	; (1000ea40 <at_ble_scan_stop+0x18>)
1000ea2c:	4798      	blx	r3
1000ea2e:	1e04      	subs	r4, r0, #0
1000ea30:	d103      	bne.n	1000ea3a <at_ble_scan_stop+0x12>
1000ea32:	20d1      	movs	r0, #209	; 0xd1
1000ea34:	4b03      	ldr	r3, [pc, #12]	; (1000ea44 <at_ble_scan_stop+0x1c>)
1000ea36:	0100      	lsls	r0, r0, #4
1000ea38:	4798      	blx	r3
1000ea3a:	1c20      	adds	r0, r4, #0
1000ea3c:	bd10      	pop	{r4, pc}
1000ea3e:	46c0      	nop			; (mov r8, r8)
1000ea40:	1001052d 	.word	0x1001052d
1000ea44:	1000e4d5 	.word	0x1000e4d5

1000ea48 <at_ble_disconnect>:
1000ea48:	b538      	push	{r3, r4, r5, lr}
1000ea4a:	1c04      	adds	r4, r0, #0
1000ea4c:	4b04      	ldr	r3, [pc, #16]	; (1000ea60 <at_ble_disconnect+0x18>)
1000ea4e:	1c08      	adds	r0, r1, #0
1000ea50:	1c21      	adds	r1, r4, #0
1000ea52:	4798      	blx	r3
1000ea54:	1c05      	adds	r5, r0, #0
1000ea56:	4b03      	ldr	r3, [pc, #12]	; (1000ea64 <at_ble_disconnect+0x1c>)
1000ea58:	1c20      	adds	r0, r4, #0
1000ea5a:	4798      	blx	r3
1000ea5c:	1c28      	adds	r0, r5, #0
1000ea5e:	bd38      	pop	{r3, r4, r5, pc}
1000ea60:	1000fba5 	.word	0x1000fba5
1000ea64:	1000e519 	.word	0x1000e519

1000ea68 <at_ble_conn_update_reply>:
1000ea68:	b510      	push	{r4, lr}
1000ea6a:	4c01      	ldr	r4, [pc, #4]	; (1000ea70 <at_ble_conn_update_reply+0x8>)
1000ea6c:	47a0      	blx	r4
1000ea6e:	bd10      	pop	{r4, pc}
1000ea70:	10010095 	.word	0x10010095

1000ea74 <at_ble_random_address_resolve>:
1000ea74:	b510      	push	{r4, lr}
1000ea76:	23cf      	movs	r3, #207	; 0xcf
1000ea78:	2800      	cmp	r0, #0
1000ea7a:	d00a      	beq.n	1000ea92 <at_ble_random_address_resolve+0x1e>
1000ea7c:	2900      	cmp	r1, #0
1000ea7e:	d008      	beq.n	1000ea92 <at_ble_random_address_resolve+0x1e>
1000ea80:	2a00      	cmp	r2, #0
1000ea82:	d006      	beq.n	1000ea92 <at_ble_random_address_resolve+0x1e>
1000ea84:	780c      	ldrb	r4, [r1, #0]
1000ea86:	2c02      	cmp	r4, #2
1000ea88:	d103      	bne.n	1000ea92 <at_ble_random_address_resolve+0x1e>
1000ea8a:	4b03      	ldr	r3, [pc, #12]	; (1000ea98 <at_ble_random_address_resolve+0x24>)
1000ea8c:	3101      	adds	r1, #1
1000ea8e:	4798      	blx	r3
1000ea90:	2300      	movs	r3, #0
1000ea92:	1c18      	adds	r0, r3, #0
1000ea94:	bd10      	pop	{r4, pc}
1000ea96:	46c0      	nop			; (mov r8, r8)
1000ea98:	100108c1 	.word	0x100108c1

1000ea9c <at_ble_uuid_type2len>:
1000ea9c:	23cf      	movs	r3, #207	; 0xcf
1000ea9e:	2802      	cmp	r0, #2
1000eaa0:	d801      	bhi.n	1000eaa6 <at_ble_uuid_type2len+0xa>
1000eaa2:	4b02      	ldr	r3, [pc, #8]	; (1000eaac <at_ble_uuid_type2len+0x10>)
1000eaa4:	5c1b      	ldrb	r3, [r3, r0]
1000eaa6:	1c18      	adds	r0, r3, #0
1000eaa8:	4770      	bx	lr
1000eaaa:	46c0      	nop			; (mov r8, r8)
1000eaac:	10018c4c 	.word	0x10018c4c

1000eab0 <at_ble_uuid_len2type>:
1000eab0:	1e83      	subs	r3, r0, #2
1000eab2:	b2db      	uxtb	r3, r3
1000eab4:	2003      	movs	r0, #3
1000eab6:	2b0e      	cmp	r3, #14
1000eab8:	d801      	bhi.n	1000eabe <at_ble_uuid_len2type+0xe>
1000eaba:	4a01      	ldr	r2, [pc, #4]	; (1000eac0 <at_ble_uuid_len2type+0x10>)
1000eabc:	5cd0      	ldrb	r0, [r2, r3]
1000eabe:	4770      	bx	lr
1000eac0:	10018c4f 	.word	0x10018c4f

1000eac4 <init_gatt_client_module>:
1000eac4:	2200      	movs	r2, #0
1000eac6:	4b01      	ldr	r3, [pc, #4]	; (1000eacc <init_gatt_client_module+0x8>)
1000eac8:	801a      	strh	r2, [r3, #0]
1000eaca:	4770      	bx	lr
1000eacc:	1001aa60 	.word	0x1001aa60

1000ead0 <db_searchATT>:
1000ead0:	b570      	push	{r4, r5, r6, lr}
1000ead2:	1c05      	adds	r5, r0, #0
1000ead4:	2400      	movs	r4, #0
1000ead6:	4b0c      	ldr	r3, [pc, #48]	; (1000eb08 <db_searchATT+0x38>)
1000ead8:	6819      	ldr	r1, [r3, #0]
1000eada:	4b0c      	ldr	r3, [pc, #48]	; (1000eb0c <db_searchATT+0x3c>)
1000eadc:	681e      	ldr	r6, [r3, #0]
1000eade:	428c      	cmp	r4, r1
1000eae0:	dc10      	bgt.n	1000eb04 <db_searchATT+0x34>
1000eae2:	200c      	movs	r0, #12
1000eae4:	1863      	adds	r3, r4, r1
1000eae6:	0fda      	lsrs	r2, r3, #31
1000eae8:	18d3      	adds	r3, r2, r3
1000eaea:	1c02      	adds	r2, r0, #0
1000eaec:	105b      	asrs	r3, r3, #1
1000eaee:	435a      	muls	r2, r3
1000eaf0:	18b0      	adds	r0, r6, r2
1000eaf2:	8802      	ldrh	r2, [r0, #0]
1000eaf4:	42aa      	cmp	r2, r5
1000eaf6:	d201      	bcs.n	1000eafc <db_searchATT+0x2c>
1000eaf8:	1e59      	subs	r1, r3, #1
1000eafa:	e7f0      	b.n	1000eade <db_searchATT+0xe>
1000eafc:	42aa      	cmp	r2, r5
1000eafe:	d902      	bls.n	1000eb06 <db_searchATT+0x36>
1000eb00:	1c5c      	adds	r4, r3, #1
1000eb02:	e7ec      	b.n	1000eade <db_searchATT+0xe>
1000eb04:	2000      	movs	r0, #0
1000eb06:	bd70      	pop	{r4, r5, r6, pc}
1000eb08:	1001aa74 	.word	0x1001aa74
1000eb0c:	1001aa6c 	.word	0x1001aa6c

1000eb10 <att_permissions>:
1000eb10:	b530      	push	{r4, r5, lr}
1000eb12:	2403      	movs	r4, #3
1000eb14:	1c05      	adds	r5, r0, #0
1000eb16:	2301      	movs	r3, #1
1000eb18:	4025      	ands	r5, r4
1000eb1a:	42a5      	cmp	r5, r4
1000eb1c:	d009      	beq.n	1000eb32 <att_permissions+0x22>
1000eb1e:	1c23      	adds	r3, r4, #0
1000eb20:	1924      	adds	r4, r4, r4
1000eb22:	4220      	tst	r0, r4
1000eb24:	d105      	bne.n	1000eb32 <att_permissions+0x22>
1000eb26:	3b02      	subs	r3, #2
1000eb28:	4218      	tst	r0, r3
1000eb2a:	d102      	bne.n	1000eb32 <att_permissions+0x22>
1000eb2c:	1e4b      	subs	r3, r1, #1
1000eb2e:	4199      	sbcs	r1, r3
1000eb30:	b28b      	uxth	r3, r1
1000eb32:	2130      	movs	r1, #48	; 0x30
1000eb34:	4001      	ands	r1, r0
1000eb36:	2930      	cmp	r1, #48	; 0x30
1000eb38:	d007      	beq.n	1000eb4a <att_permissions+0x3a>
1000eb3a:	0641      	lsls	r1, r0, #25
1000eb3c:	d401      	bmi.n	1000eb42 <att_permissions+0x32>
1000eb3e:	0681      	lsls	r1, r0, #26
1000eb40:	d501      	bpl.n	1000eb46 <att_permissions+0x36>
1000eb42:	4807      	ldr	r0, [pc, #28]	; (1000eb60 <att_permissions+0x50>)
1000eb44:	e009      	b.n	1000eb5a <att_permissions+0x4a>
1000eb46:	06c1      	lsls	r1, r0, #27
1000eb48:	d501      	bpl.n	1000eb4e <att_permissions+0x3e>
1000eb4a:	4806      	ldr	r0, [pc, #24]	; (1000eb64 <att_permissions+0x54>)
1000eb4c:	e005      	b.n	1000eb5a <att_permissions+0x4a>
1000eb4e:	2a00      	cmp	r2, #0
1000eb50:	d001      	beq.n	1000eb56 <att_permissions+0x46>
1000eb52:	2204      	movs	r2, #4
1000eb54:	4313      	orrs	r3, r2
1000eb56:	2080      	movs	r0, #128	; 0x80
1000eb58:	0180      	lsls	r0, r0, #6
1000eb5a:	4318      	orrs	r0, r3
1000eb5c:	bd30      	pop	{r4, r5, pc}
1000eb5e:	46c0      	nop			; (mov r8, r8)
1000eb60:	0000200c 	.word	0x0000200c
1000eb64:	00002004 	.word	0x00002004

1000eb68 <char_permissions>:
1000eb68:	b530      	push	{r4, r5, lr}
1000eb6a:	2300      	movs	r3, #0
1000eb6c:	0784      	lsls	r4, r0, #30
1000eb6e:	d503      	bpl.n	1000eb78 <char_permissions+0x10>
1000eb70:	3301      	adds	r3, #1
1000eb72:	4219      	tst	r1, r3
1000eb74:	d100      	bne.n	1000eb78 <char_permissions+0x10>
1000eb76:	3302      	adds	r3, #2
1000eb78:	0704      	lsls	r4, r0, #28
1000eb7a:	d508      	bpl.n	1000eb8e <char_permissions+0x26>
1000eb7c:	06cc      	lsls	r4, r1, #27
1000eb7e:	d501      	bpl.n	1000eb84 <char_permissions+0x1c>
1000eb80:	2404      	movs	r4, #4
1000eb82:	e000      	b.n	1000eb86 <char_permissions+0x1e>
1000eb84:	240c      	movs	r4, #12
1000eb86:	4323      	orrs	r3, r4
1000eb88:	2480      	movs	r4, #128	; 0x80
1000eb8a:	01a4      	lsls	r4, r4, #6
1000eb8c:	4323      	orrs	r3, r4
1000eb8e:	0684      	lsls	r4, r0, #26
1000eb90:	d506      	bpl.n	1000eba0 <char_permissions+0x38>
1000eb92:	2406      	movs	r4, #6
1000eb94:	4221      	tst	r1, r4
1000eb96:	d101      	bne.n	1000eb9c <char_permissions+0x34>
1000eb98:	340a      	adds	r4, #10
1000eb9a:	e000      	b.n	1000eb9e <char_permissions+0x36>
1000eb9c:	2430      	movs	r4, #48	; 0x30
1000eb9e:	4323      	orrs	r3, r4
1000eba0:	06c4      	lsls	r4, r0, #27
1000eba2:	d506      	bpl.n	1000ebb2 <char_permissions+0x4a>
1000eba4:	2406      	movs	r4, #6
1000eba6:	4221      	tst	r1, r4
1000eba8:	d101      	bne.n	1000ebae <char_permissions+0x46>
1000ebaa:	343a      	adds	r4, #58	; 0x3a
1000ebac:	e000      	b.n	1000ebb0 <char_permissions+0x48>
1000ebae:	24c0      	movs	r4, #192	; 0xc0
1000ebb0:	4323      	orrs	r3, r4
1000ebb2:	2480      	movs	r4, #128	; 0x80
1000ebb4:	0064      	lsls	r4, r4, #1
1000ebb6:	4220      	tst	r0, r4
1000ebb8:	d000      	beq.n	1000ebbc <char_permissions+0x54>
1000ebba:	4323      	orrs	r3, r4
1000ebbc:	07c4      	lsls	r4, r0, #31
1000ebbe:	d502      	bpl.n	1000ebc6 <char_permissions+0x5e>
1000ebc0:	2480      	movs	r4, #128	; 0x80
1000ebc2:	00a4      	lsls	r4, r4, #2
1000ebc4:	4323      	orrs	r3, r4
1000ebc6:	2404      	movs	r4, #4
1000ebc8:	4220      	tst	r0, r4
1000ebca:	d006      	beq.n	1000ebda <char_permissions+0x72>
1000ebcc:	06cd      	lsls	r5, r1, #27
1000ebce:	d400      	bmi.n	1000ebd2 <char_permissions+0x6a>
1000ebd0:	240c      	movs	r4, #12
1000ebd2:	4323      	orrs	r3, r4
1000ebd4:	2480      	movs	r4, #128	; 0x80
1000ebd6:	0124      	lsls	r4, r4, #4
1000ebd8:	4323      	orrs	r3, r4
1000ebda:	0644      	lsls	r4, r0, #25
1000ebdc:	d501      	bpl.n	1000ebe2 <char_permissions+0x7a>
1000ebde:	4c08      	ldr	r4, [pc, #32]	; (1000ec00 <char_permissions+0x98>)
1000ebe0:	4323      	orrs	r3, r4
1000ebe2:	0600      	lsls	r0, r0, #24
1000ebe4:	d507      	bpl.n	1000ebf6 <char_permissions+0x8e>
1000ebe6:	2004      	movs	r0, #4
1000ebe8:	06c9      	lsls	r1, r1, #27
1000ebea:	d400      	bmi.n	1000ebee <char_permissions+0x86>
1000ebec:	200c      	movs	r0, #12
1000ebee:	4303      	orrs	r3, r0
1000ebf0:	2084      	movs	r0, #132	; 0x84
1000ebf2:	0180      	lsls	r0, r0, #6
1000ebf4:	4303      	orrs	r3, r0
1000ebf6:	0390      	lsls	r0, r2, #14
1000ebf8:	4303      	orrs	r3, r0
1000ebfa:	b298      	uxth	r0, r3
1000ebfc:	bd30      	pop	{r4, r5, pc}
1000ebfe:	46c0      	nop			; (mov r8, r8)
1000ec00:	00001004 	.word	0x00001004

1000ec04 <presentation_format_define>:
1000ec04:	b507      	push	{r0, r1, r2, lr}
1000ec06:	466a      	mov	r2, sp
1000ec08:	780b      	ldrb	r3, [r1, #0]
1000ec0a:	7013      	strb	r3, [r2, #0]
1000ec0c:	784b      	ldrb	r3, [r1, #1]
1000ec0e:	7053      	strb	r3, [r2, #1]
1000ec10:	884b      	ldrh	r3, [r1, #2]
1000ec12:	7093      	strb	r3, [r2, #2]
1000ec14:	0a1b      	lsrs	r3, r3, #8
1000ec16:	70d3      	strb	r3, [r2, #3]
1000ec18:	790b      	ldrb	r3, [r1, #4]
1000ec1a:	7113      	strb	r3, [r2, #4]
1000ec1c:	88cb      	ldrh	r3, [r1, #6]
1000ec1e:	2107      	movs	r1, #7
1000ec20:	7153      	strb	r3, [r2, #5]
1000ec22:	0a1b      	lsrs	r3, r3, #8
1000ec24:	7193      	strb	r3, [r2, #6]
1000ec26:	4b01      	ldr	r3, [pc, #4]	; (1000ec2c <presentation_format_define+0x28>)
1000ec28:	4798      	blx	r3
1000ec2a:	bd0e      	pop	{r1, r2, r3, pc}
1000ec2c:	10010ead 	.word	0x10010ead

1000ec30 <db_addATT>:
1000ec30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec32:	4c29      	ldr	r4, [pc, #164]	; (1000ecd8 <db_addATT+0xa8>)
1000ec34:	1c1d      	adds	r5, r3, #0
1000ec36:	6823      	ldr	r3, [r4, #0]
1000ec38:	9001      	str	r0, [sp, #4]
1000ec3a:	26d3      	movs	r6, #211	; 0xd3
1000ec3c:	2b00      	cmp	r3, #0
1000ec3e:	d048      	beq.n	1000ecd2 <db_addATT+0xa2>
1000ec40:	1c1e      	adds	r6, r3, #0
1000ec42:	3e0c      	subs	r6, #12
1000ec44:	6026      	str	r6, [r4, #0]
1000ec46:	2900      	cmp	r1, #0
1000ec48:	d005      	beq.n	1000ec56 <db_addATT+0x26>
1000ec4a:	4f24      	ldr	r7, [pc, #144]	; (1000ecdc <db_addATT+0xac>)
1000ec4c:	46bc      	mov	ip, r7
1000ec4e:	4660      	mov	r0, ip
1000ec50:	683f      	ldr	r7, [r7, #0]
1000ec52:	18bf      	adds	r7, r7, r2
1000ec54:	6007      	str	r7, [r0, #0]
1000ec56:	4821      	ldr	r0, [pc, #132]	; (1000ecdc <db_addATT+0xac>)
1000ec58:	6807      	ldr	r7, [r0, #0]
1000ec5a:	4684      	mov	ip, r0
1000ec5c:	42be      	cmp	r6, r7
1000ec5e:	d932      	bls.n	1000ecc6 <db_addATT+0x96>
1000ec60:	4668      	mov	r0, sp
1000ec62:	8880      	ldrh	r0, [r0, #4]
1000ec64:	3b0c      	subs	r3, #12
1000ec66:	8018      	strh	r0, [r3, #0]
1000ec68:	6823      	ldr	r3, [r4, #0]
1000ec6a:	2900      	cmp	r1, #0
1000ec6c:	d009      	beq.n	1000ec82 <db_addATT+0x52>
1000ec6e:	2a00      	cmp	r2, #0
1000ec70:	d007      	beq.n	1000ec82 <db_addATT+0x52>
1000ec72:	4660      	mov	r0, ip
1000ec74:	6800      	ldr	r0, [r0, #0]
1000ec76:	809a      	strh	r2, [r3, #4]
1000ec78:	1a80      	subs	r0, r0, r2
1000ec7a:	6098      	str	r0, [r3, #8]
1000ec7c:	4b18      	ldr	r3, [pc, #96]	; (1000ece0 <db_addATT+0xb0>)
1000ec7e:	4798      	blx	r3
1000ec80:	e002      	b.n	1000ec88 <db_addATT+0x58>
1000ec82:	2100      	movs	r1, #0
1000ec84:	809a      	strh	r2, [r3, #4]
1000ec86:	6099      	str	r1, [r3, #8]
1000ec88:	2300      	movs	r3, #0
1000ec8a:	6822      	ldr	r2, [r4, #0]
1000ec8c:	7093      	strb	r3, [r2, #2]
1000ec8e:	3303      	adds	r3, #3
1000ec90:	402b      	ands	r3, r5
1000ec92:	2b03      	cmp	r3, #3
1000ec94:	d001      	beq.n	1000ec9a <db_addATT+0x6a>
1000ec96:	076b      	lsls	r3, r5, #29
1000ec98:	d504      	bpl.n	1000eca4 <db_addATT+0x74>
1000ec9a:	2101      	movs	r1, #1
1000ec9c:	6822      	ldr	r2, [r4, #0]
1000ec9e:	7893      	ldrb	r3, [r2, #2]
1000eca0:	430b      	orrs	r3, r1
1000eca2:	7093      	strb	r3, [r2, #2]
1000eca4:	2330      	movs	r3, #48	; 0x30
1000eca6:	402b      	ands	r3, r5
1000eca8:	2b30      	cmp	r3, #48	; 0x30
1000ecaa:	d001      	beq.n	1000ecb0 <db_addATT+0x80>
1000ecac:	066b      	lsls	r3, r5, #25
1000ecae:	d504      	bpl.n	1000ecba <db_addATT+0x8a>
1000ecb0:	2102      	movs	r1, #2
1000ecb2:	6822      	ldr	r2, [r4, #0]
1000ecb4:	7893      	ldrb	r3, [r2, #2]
1000ecb6:	430b      	orrs	r3, r1
1000ecb8:	7093      	strb	r3, [r2, #2]
1000ecba:	4a0a      	ldr	r2, [pc, #40]	; (1000ece4 <db_addATT+0xb4>)
1000ecbc:	2600      	movs	r6, #0
1000ecbe:	6813      	ldr	r3, [r2, #0]
1000ecc0:	3301      	adds	r3, #1
1000ecc2:	6013      	str	r3, [r2, #0]
1000ecc4:	e005      	b.n	1000ecd2 <db_addATT+0xa2>
1000ecc6:	6023      	str	r3, [r4, #0]
1000ecc8:	2611      	movs	r6, #17
1000ecca:	2900      	cmp	r1, #0
1000eccc:	d001      	beq.n	1000ecd2 <db_addATT+0xa2>
1000ecce:	1aba      	subs	r2, r7, r2
1000ecd0:	6002      	str	r2, [r0, #0]
1000ecd2:	1c30      	adds	r0, r6, #0
1000ecd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ecd6:	46c0      	nop			; (mov r8, r8)
1000ecd8:	1001aa6c 	.word	0x1001aa6c
1000ecdc:	1001aa70 	.word	0x1001aa70
1000ece0:	100122ab 	.word	0x100122ab
1000ece4:	1001aa74 	.word	0x1001aa74

1000ece8 <user_description_define>:
1000ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ecea:	1c05      	adds	r5, r0, #0
1000ecec:	20cf      	movs	r0, #207	; 0xcf
1000ecee:	2a00      	cmp	r2, #0
1000ecf0:	d01c      	beq.n	1000ed2c <user_description_define+0x44>
1000ecf2:	1c14      	adds	r4, r2, #0
1000ecf4:	2203      	movs	r2, #3
1000ecf6:	1c1e      	adds	r6, r3, #0
1000ecf8:	400a      	ands	r2, r1
1000ecfa:	1c0b      	adds	r3, r1, #0
1000ecfc:	3a03      	subs	r2, #3
1000ecfe:	4251      	negs	r1, r2
1000ed00:	4151      	adcs	r1, r2
1000ed02:	075a      	lsls	r2, r3, #29
1000ed04:	0fd2      	lsrs	r2, r2, #31
1000ed06:	430a      	orrs	r2, r1
1000ed08:	03d2      	lsls	r2, r2, #15
1000ed0a:	4f09      	ldr	r7, [pc, #36]	; (1000ed30 <user_description_define+0x48>)
1000ed0c:	1c28      	adds	r0, r5, #0
1000ed0e:	2a00      	cmp	r2, #0
1000ed10:	d003      	beq.n	1000ed1a <user_description_define+0x32>
1000ed12:	1c21      	adds	r1, r4, #0
1000ed14:	1c32      	adds	r2, r6, #0
1000ed16:	47b8      	blx	r7
1000ed18:	e008      	b.n	1000ed2c <user_description_define+0x44>
1000ed1a:	1c11      	adds	r1, r2, #0
1000ed1c:	47b8      	blx	r7
1000ed1e:	2800      	cmp	r0, #0
1000ed20:	d104      	bne.n	1000ed2c <user_description_define+0x44>
1000ed22:	1c28      	adds	r0, r5, #0
1000ed24:	1c31      	adds	r1, r6, #0
1000ed26:	1c22      	adds	r2, r4, #0
1000ed28:	4b02      	ldr	r3, [pc, #8]	; (1000ed34 <user_description_define+0x4c>)
1000ed2a:	4798      	blx	r3
1000ed2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ed2e:	46c0      	nop			; (mov r8, r8)
1000ed30:	1000ec31 	.word	0x1000ec31
1000ed34:	10010ead 	.word	0x10010ead

1000ed38 <at_ble_read_authorize_reply.part.1>:
1000ed38:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ed3a:	4b09      	ldr	r3, [pc, #36]	; (1000ed60 <at_ble_read_authorize_reply.part.1+0x28>)
1000ed3c:	1c05      	adds	r5, r0, #0
1000ed3e:	1c08      	adds	r0, r1, #0
1000ed40:	1c0c      	adds	r4, r1, #0
1000ed42:	4798      	blx	r3
1000ed44:	2800      	cmp	r0, #0
1000ed46:	d009      	beq.n	1000ed5c <at_ble_read_authorize_reply.part.1+0x24>
1000ed48:	6882      	ldr	r2, [r0, #8]
1000ed4a:	2a00      	cmp	r2, #0
1000ed4c:	d006      	beq.n	1000ed5c <at_ble_read_authorize_reply.part.1+0x24>
1000ed4e:	8883      	ldrh	r3, [r0, #4]
1000ed50:	1c29      	adds	r1, r5, #0
1000ed52:	9200      	str	r2, [sp, #0]
1000ed54:	1c20      	adds	r0, r4, #0
1000ed56:	2200      	movs	r2, #0
1000ed58:	4c02      	ldr	r4, [pc, #8]	; (1000ed64 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ed5a:	47a0      	blx	r4
1000ed5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ed5e:	46c0      	nop			; (mov r8, r8)
1000ed60:	1000ead1 	.word	0x1000ead1
1000ed64:	100109bd 	.word	0x100109bd

1000ed68 <internal_at_ble_service_define>:
1000ed68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed6a:	b08b      	sub	sp, #44	; 0x2c
1000ed6c:	9306      	str	r3, [sp, #24]
1000ed6e:	ab10      	add	r3, sp, #64	; 0x40
1000ed70:	9202      	str	r2, [sp, #8]
1000ed72:	cb04      	ldmia	r3!, {r2}
1000ed74:	1c05      	adds	r5, r0, #0
1000ed76:	881b      	ldrh	r3, [r3, #0]
1000ed78:	9105      	str	r1, [sp, #20]
1000ed7a:	9303      	str	r3, [sp, #12]
1000ed7c:	ab12      	add	r3, sp, #72	; 0x48
1000ed7e:	781b      	ldrb	r3, [r3, #0]
1000ed80:	20cf      	movs	r0, #207	; 0xcf
1000ed82:	9304      	str	r3, [sp, #16]
1000ed84:	2d00      	cmp	r5, #0
1000ed86:	d100      	bne.n	1000ed8a <internal_at_ble_service_define+0x22>
1000ed88:	e1ca      	b.n	1000f120 <internal_at_ble_service_define+0x3b8>
1000ed8a:	2900      	cmp	r1, #0
1000ed8c:	d100      	bne.n	1000ed90 <internal_at_ble_service_define+0x28>
1000ed8e:	e1c7      	b.n	1000f120 <internal_at_ble_service_define+0x3b8>
1000ed90:	2a00      	cmp	r2, #0
1000ed92:	d100      	bne.n	1000ed96 <internal_at_ble_service_define+0x2e>
1000ed94:	e1c4      	b.n	1000f120 <internal_at_ble_service_define+0x3b8>
1000ed96:	9b03      	ldr	r3, [sp, #12]
1000ed98:	2b00      	cmp	r3, #0
1000ed9a:	d100      	bne.n	1000ed9e <internal_at_ble_service_define+0x36>
1000ed9c:	e1c0      	b.n	1000f120 <internal_at_ble_service_define+0x3b8>
1000ed9e:	4bc9      	ldr	r3, [pc, #804]	; (1000f0c4 <internal_at_ble_service_define+0x35c>)
1000eda0:	3004      	adds	r0, #4
1000eda2:	681e      	ldr	r6, [r3, #0]
1000eda4:	2e00      	cmp	r6, #0
1000eda6:	d100      	bne.n	1000edaa <internal_at_ble_service_define+0x42>
1000eda8:	e1ba      	b.n	1000f120 <internal_at_ble_service_define+0x3b8>
1000edaa:	2400      	movs	r4, #0
1000edac:	4bc6      	ldr	r3, [pc, #792]	; (1000f0c8 <internal_at_ble_service_define+0x360>)
1000edae:	8034      	strh	r4, [r6, #0]
1000edb0:	881b      	ldrh	r3, [r3, #0]
1000edb2:	1db7      	adds	r7, r6, #6
1000edb4:	1c21      	adds	r1, r4, #0
1000edb6:	2210      	movs	r2, #16
1000edb8:	8073      	strh	r3, [r6, #2]
1000edba:	1c38      	adds	r0, r7, #0
1000edbc:	4bc3      	ldr	r3, [pc, #780]	; (1000f0cc <internal_at_ble_service_define+0x364>)
1000edbe:	4798      	blx	r3
1000edc0:	7828      	ldrb	r0, [r5, #0]
1000edc2:	4bc3      	ldr	r3, [pc, #780]	; (1000f0d0 <internal_at_ble_service_define+0x368>)
1000edc4:	4798      	blx	r3
1000edc6:	1c69      	adds	r1, r5, #1
1000edc8:	1c02      	adds	r2, r0, #0
1000edca:	4bc2      	ldr	r3, [pc, #776]	; (1000f0d4 <internal_at_ble_service_define+0x36c>)
1000edcc:	1c38      	adds	r0, r7, #0
1000edce:	4798      	blx	r3
1000edd0:	2204      	movs	r2, #4
1000edd2:	782b      	ldrb	r3, [r5, #0]
1000edd4:	9d02      	ldr	r5, [sp, #8]
1000edd6:	011b      	lsls	r3, r3, #4
1000edd8:	4313      	orrs	r3, r2
1000edda:	9a04      	ldr	r2, [sp, #16]
1000eddc:	7174      	strb	r4, [r6, #5]
1000edde:	0192      	lsls	r2, r2, #6
1000ede0:	4313      	orrs	r3, r2
1000ede2:	7133      	strb	r3, [r6, #4]
1000ede4:	2316      	movs	r3, #22
1000ede6:	9a06      	ldr	r2, [sp, #24]
1000ede8:	3512      	adds	r5, #18
1000edea:	4353      	muls	r3, r2
1000edec:	9a02      	ldr	r2, [sp, #8]
1000edee:	3312      	adds	r3, #18
1000edf0:	18d7      	adds	r7, r2, r3
1000edf2:	42bd      	cmp	r5, r7
1000edf4:	d00f      	beq.n	1000ee16 <internal_at_ble_service_define+0xae>
1000edf6:	4bb8      	ldr	r3, [pc, #736]	; (1000f0d8 <internal_at_ble_service_define+0x370>)
1000edf8:	8829      	ldrh	r1, [r5, #0]
1000edfa:	9300      	str	r3, [sp, #0]
1000edfc:	230e      	movs	r3, #14
1000edfe:	aa06      	add	r2, sp, #24
1000ee00:	189b      	adds	r3, r3, r2
1000ee02:	9301      	str	r3, [sp, #4]
1000ee04:	4cb5      	ldr	r4, [pc, #724]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ee06:	1c30      	adds	r0, r6, #0
1000ee08:	2201      	movs	r2, #1
1000ee0a:	2302      	movs	r3, #2
1000ee0c:	47a0      	blx	r4
1000ee0e:	3516      	adds	r5, #22
1000ee10:	1e04      	subs	r4, r0, #0
1000ee12:	d0ee      	beq.n	1000edf2 <internal_at_ble_service_define+0x8a>
1000ee14:	e183      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ee16:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ee18:	2300      	movs	r3, #0
1000ee1a:	3714      	adds	r7, #20
1000ee1c:	1c3d      	adds	r5, r7, #0
1000ee1e:	9302      	str	r3, [sp, #8]
1000ee20:	9b02      	ldr	r3, [sp, #8]
1000ee22:	9a03      	ldr	r2, [sp, #12]
1000ee24:	4293      	cmp	r3, r2
1000ee26:	db00      	blt.n	1000ee2a <internal_at_ble_service_define+0xc2>
1000ee28:	e0bf      	b.n	1000efaa <internal_at_ble_service_define+0x242>
1000ee2a:	4bad      	ldr	r3, [pc, #692]	; (1000f0e0 <internal_at_ble_service_define+0x378>)
1000ee2c:	aa06      	add	r2, sp, #24
1000ee2e:	9300      	str	r3, [sp, #0]
1000ee30:	230e      	movs	r3, #14
1000ee32:	189b      	adds	r3, r3, r2
1000ee34:	9301      	str	r3, [sp, #4]
1000ee36:	4ca9      	ldr	r4, [pc, #676]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ee38:	1c30      	adds	r0, r6, #0
1000ee3a:	2104      	movs	r1, #4
1000ee3c:	2201      	movs	r2, #1
1000ee3e:	2302      	movs	r3, #2
1000ee40:	47a0      	blx	r4
1000ee42:	1e04      	subs	r4, r0, #0
1000ee44:	d000      	beq.n	1000ee48 <internal_at_ble_service_define+0xe0>
1000ee46:	e16a      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ee48:	1c2b      	adds	r3, r5, #0
1000ee4a:	3b12      	subs	r3, #18
1000ee4c:	7b2c      	ldrb	r4, [r5, #12]
1000ee4e:	781b      	ldrb	r3, [r3, #0]
1000ee50:	1c21      	adds	r1, r4, #0
1000ee52:	1c1a      	adds	r2, r3, #0
1000ee54:	9304      	str	r3, [sp, #16]
1000ee56:	8828      	ldrh	r0, [r5, #0]
1000ee58:	4ba2      	ldr	r3, [pc, #648]	; (1000f0e4 <internal_at_ble_service_define+0x37c>)
1000ee5a:	4798      	blx	r3
1000ee5c:	2303      	movs	r3, #3
1000ee5e:	4023      	ands	r3, r4
1000ee60:	3b03      	subs	r3, #3
1000ee62:	4259      	negs	r1, r3
1000ee64:	4159      	adcs	r1, r3
1000ee66:	2301      	movs	r3, #1
1000ee68:	08a4      	lsrs	r4, r4, #2
1000ee6a:	401c      	ands	r4, r3
1000ee6c:	430c      	orrs	r4, r1
1000ee6e:	896b      	ldrh	r3, [r5, #10]
1000ee70:	03e4      	lsls	r4, r4, #15
1000ee72:	431c      	orrs	r4, r3
1000ee74:	9007      	str	r0, [sp, #28]
1000ee76:	4b96      	ldr	r3, [pc, #600]	; (1000f0d0 <internal_at_ble_service_define+0x368>)
1000ee78:	9804      	ldr	r0, [sp, #16]
1000ee7a:	4798      	blx	r3
1000ee7c:	1c2a      	adds	r2, r5, #0
1000ee7e:	3a11      	subs	r2, #17
1000ee80:	9200      	str	r2, [sp, #0]
1000ee82:	3a03      	subs	r2, #3
1000ee84:	1c03      	adds	r3, r0, #0
1000ee86:	9201      	str	r2, [sp, #4]
1000ee88:	1c21      	adds	r1, r4, #0
1000ee8a:	1c30      	adds	r0, r6, #0
1000ee8c:	4c93      	ldr	r4, [pc, #588]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ee8e:	9a07      	ldr	r2, [sp, #28]
1000ee90:	47a0      	blx	r4
1000ee92:	1e04      	subs	r4, r0, #0
1000ee94:	d000      	beq.n	1000ee98 <internal_at_ble_service_define+0x130>
1000ee96:	e142      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ee98:	22c0      	movs	r2, #192	; 0xc0
1000ee9a:	882b      	ldrh	r3, [r5, #0]
1000ee9c:	0052      	lsls	r2, r2, #1
1000ee9e:	4213      	tst	r3, r2
1000eea0:	d104      	bne.n	1000eeac <internal_at_ble_service_define+0x144>
1000eea2:	8aab      	ldrh	r3, [r5, #20]
1000eea4:	9304      	str	r3, [sp, #16]
1000eea6:	2b00      	cmp	r3, #0
1000eea8:	d116      	bne.n	1000eed8 <internal_at_ble_service_define+0x170>
1000eeaa:	e03a      	b.n	1000ef22 <internal_at_ble_service_define+0x1ba>
1000eeac:	2201      	movs	r2, #1
1000eeae:	09d9      	lsrs	r1, r3, #7
1000eeb0:	4011      	ands	r1, r2
1000eeb2:	05db      	lsls	r3, r3, #23
1000eeb4:	d501      	bpl.n	1000eeba <internal_at_ble_service_define+0x152>
1000eeb6:	2302      	movs	r3, #2
1000eeb8:	4319      	orrs	r1, r3
1000eeba:	4b8b      	ldr	r3, [pc, #556]	; (1000f0e8 <internal_at_ble_service_define+0x380>)
1000eebc:	aa06      	add	r2, sp, #24
1000eebe:	9300      	str	r3, [sp, #0]
1000eec0:	230e      	movs	r3, #14
1000eec2:	189b      	adds	r3, r3, r2
1000eec4:	9301      	str	r3, [sp, #4]
1000eec6:	4c85      	ldr	r4, [pc, #532]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000eec8:	0209      	lsls	r1, r1, #8
1000eeca:	1c30      	adds	r0, r6, #0
1000eecc:	2201      	movs	r2, #1
1000eece:	2302      	movs	r3, #2
1000eed0:	47a0      	blx	r4
1000eed2:	1e04      	subs	r4, r0, #0
1000eed4:	d0e5      	beq.n	1000eea2 <internal_at_ble_service_define+0x13a>
1000eed6:	e122      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000eed8:	2380      	movs	r3, #128	; 0x80
1000eeda:	882a      	ldrh	r2, [r5, #0]
1000eedc:	7f2c      	ldrb	r4, [r5, #28]
1000eede:	005b      	lsls	r3, r3, #1
1000eee0:	401a      	ands	r2, r3
1000eee2:	1c20      	adds	r0, r4, #0
1000eee4:	2101      	movs	r1, #1
1000eee6:	2a00      	cmp	r2, #0
1000eee8:	d000      	beq.n	1000eeec <internal_at_ble_service_define+0x184>
1000eeea:	1c0a      	adds	r2, r1, #0
1000eeec:	4b7f      	ldr	r3, [pc, #508]	; (1000f0ec <internal_at_ble_service_define+0x384>)
1000eeee:	4798      	blx	r3
1000eef0:	2203      	movs	r2, #3
1000eef2:	4022      	ands	r2, r4
1000eef4:	3a03      	subs	r2, #3
1000eef6:	4251      	negs	r1, r2
1000eef8:	4151      	adcs	r1, r2
1000eefa:	4b7d      	ldr	r3, [pc, #500]	; (1000f0f0 <internal_at_ble_service_define+0x388>)
1000eefc:	1c0a      	adds	r2, r1, #0
1000eefe:	9300      	str	r3, [sp, #0]
1000ef00:	1c2b      	adds	r3, r5, #0
1000ef02:	0764      	lsls	r4, r4, #29
1000ef04:	0fe4      	lsrs	r4, r4, #31
1000ef06:	4322      	orrs	r2, r4
1000ef08:	03d2      	lsls	r2, r2, #15
1000ef0a:	4310      	orrs	r0, r2
1000ef0c:	3320      	adds	r3, #32
1000ef0e:	b282      	uxth	r2, r0
1000ef10:	9301      	str	r3, [sp, #4]
1000ef12:	4c72      	ldr	r4, [pc, #456]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ef14:	1c30      	adds	r0, r6, #0
1000ef16:	9904      	ldr	r1, [sp, #16]
1000ef18:	2302      	movs	r3, #2
1000ef1a:	47a0      	blx	r4
1000ef1c:	1e04      	subs	r4, r0, #0
1000ef1e:	d000      	beq.n	1000ef22 <internal_at_ble_service_define+0x1ba>
1000ef20:	e0fd      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ef22:	2101      	movs	r1, #1
1000ef24:	882b      	ldrh	r3, [r5, #0]
1000ef26:	420b      	tst	r3, r1
1000ef28:	d011      	beq.n	1000ef4e <internal_at_ble_service_define+0x1e6>
1000ef2a:	7fa8      	ldrb	r0, [r5, #30]
1000ef2c:	4b6f      	ldr	r3, [pc, #444]	; (1000f0ec <internal_at_ble_service_define+0x384>)
1000ef2e:	2200      	movs	r2, #0
1000ef30:	4798      	blx	r3
1000ef32:	4b70      	ldr	r3, [pc, #448]	; (1000f0f4 <internal_at_ble_service_define+0x38c>)
1000ef34:	1c02      	adds	r2, r0, #0
1000ef36:	9300      	str	r3, [sp, #0]
1000ef38:	1c2b      	adds	r3, r5, #0
1000ef3a:	3324      	adds	r3, #36	; 0x24
1000ef3c:	9301      	str	r3, [sp, #4]
1000ef3e:	4c67      	ldr	r4, [pc, #412]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ef40:	1c30      	adds	r0, r6, #0
1000ef42:	496d      	ldr	r1, [pc, #436]	; (1000f0f8 <internal_at_ble_service_define+0x390>)
1000ef44:	2302      	movs	r3, #2
1000ef46:	47a0      	blx	r4
1000ef48:	1e04      	subs	r4, r0, #0
1000ef4a:	d000      	beq.n	1000ef4e <internal_at_ble_service_define+0x1e6>
1000ef4c:	e0e7      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ef4e:	2330      	movs	r3, #48	; 0x30
1000ef50:	882a      	ldrh	r2, [r5, #0]
1000ef52:	421a      	tst	r2, r3
1000ef54:	d012      	beq.n	1000ef7c <internal_at_ble_service_define+0x214>
1000ef56:	2101      	movs	r1, #1
1000ef58:	7f68      	ldrb	r0, [r5, #29]
1000ef5a:	1c0a      	adds	r2, r1, #0
1000ef5c:	4b63      	ldr	r3, [pc, #396]	; (1000f0ec <internal_at_ble_service_define+0x384>)
1000ef5e:	4798      	blx	r3
1000ef60:	4b66      	ldr	r3, [pc, #408]	; (1000f0fc <internal_at_ble_service_define+0x394>)
1000ef62:	1c02      	adds	r2, r0, #0
1000ef64:	9300      	str	r3, [sp, #0]
1000ef66:	1c2b      	adds	r3, r5, #0
1000ef68:	3322      	adds	r3, #34	; 0x22
1000ef6a:	9301      	str	r3, [sp, #4]
1000ef6c:	4c5b      	ldr	r4, [pc, #364]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ef6e:	1c30      	adds	r0, r6, #0
1000ef70:	4961      	ldr	r1, [pc, #388]	; (1000f0f8 <internal_at_ble_service_define+0x390>)
1000ef72:	2302      	movs	r3, #2
1000ef74:	47a0      	blx	r4
1000ef76:	1e04      	subs	r4, r0, #0
1000ef78:	d000      	beq.n	1000ef7c <internal_at_ble_service_define+0x214>
1000ef7a:	e0d0      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000ef7c:	69ab      	ldr	r3, [r5, #24]
1000ef7e:	2b00      	cmp	r3, #0
1000ef80:	d00e      	beq.n	1000efa0 <internal_at_ble_service_define+0x238>
1000ef82:	4b5f      	ldr	r3, [pc, #380]	; (1000f100 <internal_at_ble_service_define+0x398>)
1000ef84:	aa06      	add	r2, sp, #24
1000ef86:	9300      	str	r3, [sp, #0]
1000ef88:	230e      	movs	r3, #14
1000ef8a:	189b      	adds	r3, r3, r2
1000ef8c:	9301      	str	r3, [sp, #4]
1000ef8e:	4c53      	ldr	r4, [pc, #332]	; (1000f0dc <internal_at_ble_service_define+0x374>)
1000ef90:	1c30      	adds	r0, r6, #0
1000ef92:	2107      	movs	r1, #7
1000ef94:	2201      	movs	r2, #1
1000ef96:	2302      	movs	r3, #2
1000ef98:	47a0      	blx	r4
1000ef9a:	1e04      	subs	r4, r0, #0
1000ef9c:	d000      	beq.n	1000efa0 <internal_at_ble_service_define+0x238>
1000ef9e:	e0be      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000efa0:	9b02      	ldr	r3, [sp, #8]
1000efa2:	353c      	adds	r5, #60	; 0x3c
1000efa4:	3301      	adds	r3, #1
1000efa6:	9302      	str	r3, [sp, #8]
1000efa8:	e73a      	b.n	1000ee20 <internal_at_ble_service_define+0xb8>
1000efaa:	1c30      	adds	r0, r6, #0
1000efac:	4b55      	ldr	r3, [pc, #340]	; (1000f104 <internal_at_ble_service_define+0x39c>)
1000efae:	4798      	blx	r3
1000efb0:	1e04      	subs	r4, r0, #0
1000efb2:	d000      	beq.n	1000efb6 <internal_at_ble_service_define+0x24e>
1000efb4:	e0b3      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000efb6:	8833      	ldrh	r3, [r6, #0]
1000efb8:	9a05      	ldr	r2, [sp, #20]
1000efba:	8013      	strh	r3, [r2, #0]
1000efbc:	8836      	ldrh	r6, [r6, #0]
1000efbe:	9b06      	ldr	r3, [sp, #24]
1000efc0:	9a03      	ldr	r2, [sp, #12]
1000efc2:	18f6      	adds	r6, r6, r3
1000efc4:	b2b3      	uxth	r3, r6
1000efc6:	9302      	str	r3, [sp, #8]
1000efc8:	233c      	movs	r3, #60	; 0x3c
1000efca:	4353      	muls	r3, r2
1000efcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000efce:	3314      	adds	r3, #20
1000efd0:	18d3      	adds	r3, r2, r3
1000efd2:	9304      	str	r3, [sp, #16]
1000efd4:	9b04      	ldr	r3, [sp, #16]
1000efd6:	429f      	cmp	r7, r3
1000efd8:	d100      	bne.n	1000efdc <internal_at_ble_service_define+0x274>
1000efda:	e0a0      	b.n	1000f11e <internal_at_ble_service_define+0x3b6>
1000efdc:	9b02      	ldr	r3, [sp, #8]
1000efde:	1c9d      	adds	r5, r3, #2
1000efe0:	1c3b      	adds	r3, r7, #0
1000efe2:	b2ad      	uxth	r5, r5
1000efe4:	3b14      	subs	r3, #20
1000efe6:	801d      	strh	r5, [r3, #0]
1000efe8:	9303      	str	r3, [sp, #12]
1000efea:	893b      	ldrh	r3, [r7, #8]
1000efec:	2b00      	cmp	r3, #0
1000efee:	d108      	bne.n	1000f002 <internal_at_ble_service_define+0x29a>
1000eff0:	23c0      	movs	r3, #192	; 0xc0
1000eff2:	883a      	ldrh	r2, [r7, #0]
1000eff4:	005b      	lsls	r3, r3, #1
1000eff6:	421a      	tst	r2, r3
1000eff8:	d026      	beq.n	1000f048 <internal_at_ble_service_define+0x2e0>
1000effa:	9e02      	ldr	r6, [sp, #8]
1000effc:	3603      	adds	r6, #3
1000effe:	b2b5      	uxth	r5, r6
1000f000:	e022      	b.n	1000f048 <internal_at_ble_service_define+0x2e0>
1000f002:	2103      	movs	r1, #3
1000f004:	7b3b      	ldrb	r3, [r7, #12]
1000f006:	4019      	ands	r1, r3
1000f008:	3903      	subs	r1, #3
1000f00a:	424a      	negs	r2, r1
1000f00c:	414a      	adcs	r2, r1
1000f00e:	0759      	lsls	r1, r3, #29
1000f010:	0fc9      	lsrs	r1, r1, #31
1000f012:	4311      	orrs	r1, r2
1000f014:	03c9      	lsls	r1, r1, #15
1000f016:	897a      	ldrh	r2, [r7, #10]
1000f018:	2900      	cmp	r1, #0
1000f01a:	d007      	beq.n	1000f02c <internal_at_ble_service_define+0x2c4>
1000f01c:	6879      	ldr	r1, [r7, #4]
1000f01e:	2900      	cmp	r1, #0
1000f020:	d100      	bne.n	1000f024 <internal_at_ble_service_define+0x2bc>
1000f022:	4939      	ldr	r1, [pc, #228]	; (1000f108 <internal_at_ble_service_define+0x3a0>)
1000f024:	1c28      	adds	r0, r5, #0
1000f026:	4e39      	ldr	r6, [pc, #228]	; (1000f10c <internal_at_ble_service_define+0x3a4>)
1000f028:	47b0      	blx	r6
1000f02a:	e00a      	b.n	1000f042 <internal_at_ble_service_define+0x2da>
1000f02c:	1c28      	adds	r0, r5, #0
1000f02e:	4e37      	ldr	r6, [pc, #220]	; (1000f10c <internal_at_ble_service_define+0x3a4>)
1000f030:	47b0      	blx	r6
1000f032:	2800      	cmp	r0, #0
1000f034:	d172      	bne.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f036:	9b03      	ldr	r3, [sp, #12]
1000f038:	8939      	ldrh	r1, [r7, #8]
1000f03a:	8818      	ldrh	r0, [r3, #0]
1000f03c:	687a      	ldr	r2, [r7, #4]
1000f03e:	4b34      	ldr	r3, [pc, #208]	; (1000f110 <internal_at_ble_service_define+0x3a8>)
1000f040:	4798      	blx	r3
1000f042:	2800      	cmp	r0, #0
1000f044:	d0d4      	beq.n	1000eff0 <internal_at_ble_service_define+0x288>
1000f046:	e069      	b.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f048:	8abb      	ldrh	r3, [r7, #20]
1000f04a:	2b00      	cmp	r3, #0
1000f04c:	d00a      	beq.n	1000f064 <internal_at_ble_service_define+0x2fc>
1000f04e:	3501      	adds	r5, #1
1000f050:	b2ad      	uxth	r5, r5
1000f052:	843d      	strh	r5, [r7, #32]
1000f054:	7f39      	ldrb	r1, [r7, #28]
1000f056:	8afb      	ldrh	r3, [r7, #22]
1000f058:	1c28      	adds	r0, r5, #0
1000f05a:	693a      	ldr	r2, [r7, #16]
1000f05c:	4e2d      	ldr	r6, [pc, #180]	; (1000f114 <internal_at_ble_service_define+0x3ac>)
1000f05e:	47b0      	blx	r6
1000f060:	2800      	cmp	r0, #0
1000f062:	d15b      	bne.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f064:	883b      	ldrh	r3, [r7, #0]
1000f066:	07db      	lsls	r3, r3, #31
1000f068:	d50d      	bpl.n	1000f086 <internal_at_ble_service_define+0x31e>
1000f06a:	2200      	movs	r2, #0
1000f06c:	3501      	adds	r5, #1
1000f06e:	b2ad      	uxth	r5, r5
1000f070:	a909      	add	r1, sp, #36	; 0x24
1000f072:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f074:	7fbb      	ldrb	r3, [r7, #30]
1000f076:	1c28      	adds	r0, r5, #0
1000f078:	700a      	strb	r2, [r1, #0]
1000f07a:	704a      	strb	r2, [r1, #1]
1000f07c:	4e23      	ldr	r6, [pc, #140]	; (1000f10c <internal_at_ble_service_define+0x3a4>)
1000f07e:	3202      	adds	r2, #2
1000f080:	47b0      	blx	r6
1000f082:	2800      	cmp	r0, #0
1000f084:	d14a      	bne.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f086:	2330      	movs	r3, #48	; 0x30
1000f088:	883a      	ldrh	r2, [r7, #0]
1000f08a:	421a      	tst	r2, r3
1000f08c:	d00d      	beq.n	1000f0aa <internal_at_ble_service_define+0x342>
1000f08e:	2200      	movs	r2, #0
1000f090:	3501      	adds	r5, #1
1000f092:	b2ad      	uxth	r5, r5
1000f094:	a909      	add	r1, sp, #36	; 0x24
1000f096:	847d      	strh	r5, [r7, #34]	; 0x22
1000f098:	7f7b      	ldrb	r3, [r7, #29]
1000f09a:	1c28      	adds	r0, r5, #0
1000f09c:	700a      	strb	r2, [r1, #0]
1000f09e:	704a      	strb	r2, [r1, #1]
1000f0a0:	4e1a      	ldr	r6, [pc, #104]	; (1000f10c <internal_at_ble_service_define+0x3a4>)
1000f0a2:	3202      	adds	r2, #2
1000f0a4:	47b0      	blx	r6
1000f0a6:	2800      	cmp	r0, #0
1000f0a8:	d138      	bne.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f0aa:	69b9      	ldr	r1, [r7, #24]
1000f0ac:	2900      	cmp	r1, #0
1000f0ae:	d006      	beq.n	1000f0be <internal_at_ble_service_define+0x356>
1000f0b0:	3501      	adds	r5, #1
1000f0b2:	b2ad      	uxth	r5, r5
1000f0b4:	1c28      	adds	r0, r5, #0
1000f0b6:	4b18      	ldr	r3, [pc, #96]	; (1000f118 <internal_at_ble_service_define+0x3b0>)
1000f0b8:	4798      	blx	r3
1000f0ba:	2800      	cmp	r0, #0
1000f0bc:	d12e      	bne.n	1000f11c <internal_at_ble_service_define+0x3b4>
1000f0be:	373c      	adds	r7, #60	; 0x3c
1000f0c0:	9502      	str	r5, [sp, #8]
1000f0c2:	e787      	b.n	1000efd4 <internal_at_ble_service_define+0x26c>
1000f0c4:	1001aa7c 	.word	0x1001aa7c
1000f0c8:	1001ba00 	.word	0x1001ba00
1000f0cc:	100122bd 	.word	0x100122bd
1000f0d0:	1000ea9d 	.word	0x1000ea9d
1000f0d4:	100122ab 	.word	0x100122ab
1000f0d8:	10018c68 	.word	0x10018c68
1000f0dc:	10010e3d 	.word	0x10010e3d
1000f0e0:	10018c6a 	.word	0x10018c6a
1000f0e4:	1000eb69 	.word	0x1000eb69
1000f0e8:	10018c66 	.word	0x10018c66
1000f0ec:	1000eb11 	.word	0x1000eb11
1000f0f0:	10018c62 	.word	0x10018c62
1000f0f4:	10018c64 	.word	0x10018c64
1000f0f8:	00008002 	.word	0x00008002
1000f0fc:	10018c5e 	.word	0x10018c5e
1000f100:	10018c60 	.word	0x10018c60
1000f104:	10010d31 	.word	0x10010d31
1000f108:	1001aa68 	.word	0x1001aa68
1000f10c:	1000ec31 	.word	0x1000ec31
1000f110:	10010ead 	.word	0x10010ead
1000f114:	1000ece9 	.word	0x1000ece9
1000f118:	1000ec05 	.word	0x1000ec05
1000f11c:	1c04      	adds	r4, r0, #0
1000f11e:	1c20      	adds	r0, r4, #0
1000f120:	b00b      	add	sp, #44	; 0x2c
1000f122:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f124 <initi_gatt_server_module>:
1000f124:	2300      	movs	r3, #0
1000f126:	4a07      	ldr	r2, [pc, #28]	; (1000f144 <initi_gatt_server_module+0x20>)
1000f128:	7013      	strb	r3, [r2, #0]
1000f12a:	4a07      	ldr	r2, [pc, #28]	; (1000f148 <initi_gatt_server_module+0x24>)
1000f12c:	6013      	str	r3, [r2, #0]
1000f12e:	4a07      	ldr	r2, [pc, #28]	; (1000f14c <initi_gatt_server_module+0x28>)
1000f130:	6013      	str	r3, [r2, #0]
1000f132:	4a07      	ldr	r2, [pc, #28]	; (1000f150 <initi_gatt_server_module+0x2c>)
1000f134:	6013      	str	r3, [r2, #0]
1000f136:	4a07      	ldr	r2, [pc, #28]	; (1000f154 <initi_gatt_server_module+0x30>)
1000f138:	6013      	str	r3, [r2, #0]
1000f13a:	4a07      	ldr	r2, [pc, #28]	; (1000f158 <initi_gatt_server_module+0x34>)
1000f13c:	6013      	str	r3, [r2, #0]
1000f13e:	4a07      	ldr	r2, [pc, #28]	; (1000f15c <initi_gatt_server_module+0x38>)
1000f140:	6013      	str	r3, [r2, #0]
1000f142:	4770      	bx	lr
1000f144:	1001aa68 	.word	0x1001aa68
1000f148:	1001aa78 	.word	0x1001aa78
1000f14c:	1001aa74 	.word	0x1001aa74
1000f150:	1001aa64 	.word	0x1001aa64
1000f154:	1001aa70 	.word	0x1001aa70
1000f158:	1001aa6c 	.word	0x1001aa6c
1000f15c:	1001aa7c 	.word	0x1001aa7c

1000f160 <db_init>:
1000f160:	4b0a      	ldr	r3, [pc, #40]	; (1000f18c <db_init+0x2c>)
1000f162:	4a0b      	ldr	r2, [pc, #44]	; (1000f190 <db_init+0x30>)
1000f164:	6018      	str	r0, [r3, #0]
1000f166:	084b      	lsrs	r3, r1, #1
1000f168:	6013      	str	r3, [r2, #0]
1000f16a:	4a0a      	ldr	r2, [pc, #40]	; (1000f194 <db_init+0x34>)
1000f16c:	18c3      	adds	r3, r0, r3
1000f16e:	6013      	str	r3, [r2, #0]
1000f170:	4a09      	ldr	r2, [pc, #36]	; (1000f198 <db_init+0x38>)
1000f172:	1841      	adds	r1, r0, r1
1000f174:	6013      	str	r3, [r2, #0]
1000f176:	2303      	movs	r3, #3
1000f178:	2200      	movs	r2, #0
1000f17a:	3103      	adds	r1, #3
1000f17c:	4399      	bics	r1, r3
1000f17e:	4b07      	ldr	r3, [pc, #28]	; (1000f19c <db_init+0x3c>)
1000f180:	3904      	subs	r1, #4
1000f182:	6019      	str	r1, [r3, #0]
1000f184:	4b06      	ldr	r3, [pc, #24]	; (1000f1a0 <db_init+0x40>)
1000f186:	601a      	str	r2, [r3, #0]
1000f188:	4770      	bx	lr
1000f18a:	46c0      	nop			; (mov r8, r8)
1000f18c:	1001aa7c 	.word	0x1001aa7c
1000f190:	1001aa78 	.word	0x1001aa78
1000f194:	1001aa64 	.word	0x1001aa64
1000f198:	1001aa70 	.word	0x1001aa70
1000f19c:	1001aa6c 	.word	0x1001aa6c
1000f1a0:	1001aa74 	.word	0x1001aa74

1000f1a4 <at_ble_primary_service_define>:
1000f1a4:	b530      	push	{r4, r5, lr}
1000f1a6:	b085      	sub	sp, #20
1000f1a8:	ac08      	add	r4, sp, #32
1000f1aa:	cc20      	ldmia	r4!, {r5}
1000f1ac:	8824      	ldrh	r4, [r4, #0]
1000f1ae:	9500      	str	r5, [sp, #0]
1000f1b0:	9401      	str	r4, [sp, #4]
1000f1b2:	2401      	movs	r4, #1
1000f1b4:	9402      	str	r4, [sp, #8]
1000f1b6:	4c02      	ldr	r4, [pc, #8]	; (1000f1c0 <at_ble_primary_service_define+0x1c>)
1000f1b8:	47a0      	blx	r4
1000f1ba:	b005      	add	sp, #20
1000f1bc:	bd30      	pop	{r4, r5, pc}
1000f1be:	46c0      	nop			; (mov r8, r8)
1000f1c0:	1000ed69 	.word	0x1000ed69

1000f1c4 <at_ble_characteristic_value_set>:
1000f1c4:	b570      	push	{r4, r5, r6, lr}
1000f1c6:	4b0b      	ldr	r3, [pc, #44]	; (1000f1f4 <at_ble_characteristic_value_set+0x30>)
1000f1c8:	1c06      	adds	r6, r0, #0
1000f1ca:	1c0c      	adds	r4, r1, #0
1000f1cc:	1c15      	adds	r5, r2, #0
1000f1ce:	4798      	blx	r3
1000f1d0:	2800      	cmp	r0, #0
1000f1d2:	d008      	beq.n	1000f1e6 <at_ble_characteristic_value_set+0x22>
1000f1d4:	6880      	ldr	r0, [r0, #8]
1000f1d6:	2800      	cmp	r0, #0
1000f1d8:	d005      	beq.n	1000f1e6 <at_ble_characteristic_value_set+0x22>
1000f1da:	1c21      	adds	r1, r4, #0
1000f1dc:	1c2a      	adds	r2, r5, #0
1000f1de:	4b06      	ldr	r3, [pc, #24]	; (1000f1f8 <at_ble_characteristic_value_set+0x34>)
1000f1e0:	4798      	blx	r3
1000f1e2:	2000      	movs	r0, #0
1000f1e4:	e004      	b.n	1000f1f0 <at_ble_characteristic_value_set+0x2c>
1000f1e6:	1c30      	adds	r0, r6, #0
1000f1e8:	1c29      	adds	r1, r5, #0
1000f1ea:	1c22      	adds	r2, r4, #0
1000f1ec:	4b03      	ldr	r3, [pc, #12]	; (1000f1fc <at_ble_characteristic_value_set+0x38>)
1000f1ee:	4798      	blx	r3
1000f1f0:	bd70      	pop	{r4, r5, r6, pc}
1000f1f2:	46c0      	nop			; (mov r8, r8)
1000f1f4:	1000ead1 	.word	0x1000ead1
1000f1f8:	100122ab 	.word	0x100122ab
1000f1fc:	10010ead 	.word	0x10010ead

1000f200 <at_ble_characteristic_value_get>:
1000f200:	b570      	push	{r4, r5, r6, lr}
1000f202:	4b0c      	ldr	r3, [pc, #48]	; (1000f234 <at_ble_characteristic_value_get+0x34>)
1000f204:	1c06      	adds	r6, r0, #0
1000f206:	1c0c      	adds	r4, r1, #0
1000f208:	1c15      	adds	r5, r2, #0
1000f20a:	4798      	blx	r3
1000f20c:	2800      	cmp	r0, #0
1000f20e:	d00b      	beq.n	1000f228 <at_ble_characteristic_value_get+0x28>
1000f210:	6883      	ldr	r3, [r0, #8]
1000f212:	2b00      	cmp	r3, #0
1000f214:	d008      	beq.n	1000f228 <at_ble_characteristic_value_get+0x28>
1000f216:	8883      	ldrh	r3, [r0, #4]
1000f218:	802b      	strh	r3, [r5, #0]
1000f21a:	8882      	ldrh	r2, [r0, #4]
1000f21c:	6881      	ldr	r1, [r0, #8]
1000f21e:	4b06      	ldr	r3, [pc, #24]	; (1000f238 <at_ble_characteristic_value_get+0x38>)
1000f220:	1c20      	adds	r0, r4, #0
1000f222:	4798      	blx	r3
1000f224:	2000      	movs	r0, #0
1000f226:	e004      	b.n	1000f232 <at_ble_characteristic_value_get+0x32>
1000f228:	1c30      	adds	r0, r6, #0
1000f22a:	1c29      	adds	r1, r5, #0
1000f22c:	1c22      	adds	r2, r4, #0
1000f22e:	4b03      	ldr	r3, [pc, #12]	; (1000f23c <at_ble_characteristic_value_get+0x3c>)
1000f230:	4798      	blx	r3
1000f232:	bd70      	pop	{r4, r5, r6, pc}
1000f234:	1000ead1 	.word	0x1000ead1
1000f238:	100122ab 	.word	0x100122ab
1000f23c:	10010f39 	.word	0x10010f39

1000f240 <at_ble_write_authorize_reply>:
1000f240:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f242:	b085      	sub	sp, #20
1000f244:	1c04      	adds	r4, r0, #0
1000f246:	9101      	str	r1, [sp, #4]
1000f248:	2900      	cmp	r1, #0
1000f24a:	d128      	bne.n	1000f29e <at_ble_write_authorize_reply+0x5e>
1000f24c:	8843      	ldrh	r3, [r0, #2]
1000f24e:	1c27      	adds	r7, r4, #0
1000f250:	9300      	str	r3, [sp, #0]
1000f252:	1c18      	adds	r0, r3, #0
1000f254:	4b16      	ldr	r3, [pc, #88]	; (1000f2b0 <at_ble_write_authorize_reply+0x70>)
1000f256:	4798      	blx	r3
1000f258:	3708      	adds	r7, #8
1000f25a:	2800      	cmp	r0, #0
1000f25c:	d009      	beq.n	1000f272 <at_ble_write_authorize_reply+0x32>
1000f25e:	6880      	ldr	r0, [r0, #8]
1000f260:	2800      	cmp	r0, #0
1000f262:	d006      	beq.n	1000f272 <at_ble_write_authorize_reply+0x32>
1000f264:	88a3      	ldrh	r3, [r4, #4]
1000f266:	88e2      	ldrh	r2, [r4, #6]
1000f268:	18c0      	adds	r0, r0, r3
1000f26a:	1c39      	adds	r1, r7, #0
1000f26c:	4b11      	ldr	r3, [pc, #68]	; (1000f2b4 <at_ble_write_authorize_reply+0x74>)
1000f26e:	4798      	blx	r3
1000f270:	e015      	b.n	1000f29e <at_ble_write_authorize_reply+0x5e>
1000f272:	ab02      	add	r3, sp, #8
1000f274:	1d9e      	adds	r6, r3, #6
1000f276:	2300      	movs	r3, #0
1000f278:	4d0f      	ldr	r5, [pc, #60]	; (1000f2b8 <at_ble_write_authorize_reply+0x78>)
1000f27a:	8033      	strh	r3, [r6, #0]
1000f27c:	6829      	ldr	r1, [r5, #0]
1000f27e:	1c32      	adds	r2, r6, #0
1000f280:	4b0e      	ldr	r3, [pc, #56]	; (1000f2bc <at_ble_write_authorize_reply+0x7c>)
1000f282:	9800      	ldr	r0, [sp, #0]
1000f284:	4798      	blx	r3
1000f286:	682b      	ldr	r3, [r5, #0]
1000f288:	88a0      	ldrh	r0, [r4, #4]
1000f28a:	88e2      	ldrh	r2, [r4, #6]
1000f28c:	1818      	adds	r0, r3, r0
1000f28e:	1c39      	adds	r1, r7, #0
1000f290:	4b08      	ldr	r3, [pc, #32]	; (1000f2b4 <at_ble_write_authorize_reply+0x74>)
1000f292:	4798      	blx	r3
1000f294:	8860      	ldrh	r0, [r4, #2]
1000f296:	8832      	ldrh	r2, [r6, #0]
1000f298:	6829      	ldr	r1, [r5, #0]
1000f29a:	4b09      	ldr	r3, [pc, #36]	; (1000f2c0 <at_ble_write_authorize_reply+0x80>)
1000f29c:	4798      	blx	r3
1000f29e:	8860      	ldrh	r0, [r4, #2]
1000f2a0:	8821      	ldrh	r1, [r4, #0]
1000f2a2:	9a01      	ldr	r2, [sp, #4]
1000f2a4:	4b07      	ldr	r3, [pc, #28]	; (1000f2c4 <at_ble_write_authorize_reply+0x84>)
1000f2a6:	4798      	blx	r3
1000f2a8:	2000      	movs	r0, #0
1000f2aa:	b005      	add	sp, #20
1000f2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2ae:	46c0      	nop			; (mov r8, r8)
1000f2b0:	1000ead1 	.word	0x1000ead1
1000f2b4:	100122ab 	.word	0x100122ab
1000f2b8:	10018fac 	.word	0x10018fac
1000f2bc:	1000f201 	.word	0x1000f201
1000f2c0:	1000f1c5 	.word	0x1000f1c5
1000f2c4:	10010a29 	.word	0x10010a29

1000f2c8 <gatts_handle_read_req>:
1000f2c8:	b538      	push	{r3, r4, r5, lr}
1000f2ca:	1c0c      	adds	r4, r1, #0
1000f2cc:	4b07      	ldr	r3, [pc, #28]	; (1000f2ec <gatts_handle_read_req+0x24>)
1000f2ce:	4798      	blx	r3
1000f2d0:	8865      	ldrh	r5, [r4, #2]
1000f2d2:	4b07      	ldr	r3, [pc, #28]	; (1000f2f0 <gatts_handle_read_req+0x28>)
1000f2d4:	1c28      	adds	r0, r5, #0
1000f2d6:	4798      	blx	r3
1000f2d8:	7883      	ldrb	r3, [r0, #2]
1000f2da:	2026      	movs	r0, #38	; 0x26
1000f2dc:	07db      	lsls	r3, r3, #31
1000f2de:	d404      	bmi.n	1000f2ea <gatts_handle_read_req+0x22>
1000f2e0:	8820      	ldrh	r0, [r4, #0]
1000f2e2:	1c29      	adds	r1, r5, #0
1000f2e4:	4b03      	ldr	r3, [pc, #12]	; (1000f2f4 <gatts_handle_read_req+0x2c>)
1000f2e6:	4798      	blx	r3
1000f2e8:	203b      	movs	r0, #59	; 0x3b
1000f2ea:	bd38      	pop	{r3, r4, r5, pc}
1000f2ec:	1001096d 	.word	0x1001096d
1000f2f0:	1000ead1 	.word	0x1000ead1
1000f2f4:	1000ed39 	.word	0x1000ed39

1000f2f8 <gatts_handle_att_info_req>:
1000f2f8:	b538      	push	{r3, r4, r5, lr}
1000f2fa:	1c0d      	adds	r5, r1, #0
1000f2fc:	4b0a      	ldr	r3, [pc, #40]	; (1000f328 <gatts_handle_att_info_req+0x30>)
1000f2fe:	1c14      	adds	r4, r2, #0
1000f300:	4798      	blx	r3
1000f302:	882d      	ldrh	r5, [r5, #0]
1000f304:	4b09      	ldr	r3, [pc, #36]	; (1000f32c <gatts_handle_att_info_req+0x34>)
1000f306:	1c28      	adds	r0, r5, #0
1000f308:	4798      	blx	r3
1000f30a:	0a22      	lsrs	r2, r4, #8
1000f30c:	1c03      	adds	r3, r0, #0
1000f30e:	4c08      	ldr	r4, [pc, #32]	; (1000f330 <gatts_handle_att_info_req+0x38>)
1000f310:	b291      	uxth	r1, r2
1000f312:	2800      	cmp	r0, #0
1000f314:	d003      	beq.n	1000f31e <gatts_handle_att_info_req+0x26>
1000f316:	8882      	ldrh	r2, [r0, #4]
1000f318:	2300      	movs	r3, #0
1000f31a:	1c28      	adds	r0, r5, #0
1000f31c:	e001      	b.n	1000f322 <gatts_handle_att_info_req+0x2a>
1000f31e:	1c28      	adds	r0, r5, #0
1000f320:	2201      	movs	r2, #1
1000f322:	47a0      	blx	r4
1000f324:	203b      	movs	r0, #59	; 0x3b
1000f326:	bd38      	pop	{r3, r4, r5, pc}
1000f328:	100109b1 	.word	0x100109b1
1000f32c:	1000ead1 	.word	0x1000ead1
1000f330:	10010a6d 	.word	0x10010a6d

1000f334 <gatts_handle_write_req>:
1000f334:	b510      	push	{r4, lr}
1000f336:	1c14      	adds	r4, r2, #0
1000f338:	4b07      	ldr	r3, [pc, #28]	; (1000f358 <gatts_handle_write_req+0x24>)
1000f33a:	4798      	blx	r3
1000f33c:	4b07      	ldr	r3, [pc, #28]	; (1000f35c <gatts_handle_write_req+0x28>)
1000f33e:	8860      	ldrh	r0, [r4, #2]
1000f340:	4798      	blx	r3
1000f342:	2302      	movs	r3, #2
1000f344:	7881      	ldrb	r1, [r0, #2]
1000f346:	2022      	movs	r0, #34	; 0x22
1000f348:	4019      	ands	r1, r3
1000f34a:	d103      	bne.n	1000f354 <gatts_handle_write_req+0x20>
1000f34c:	1c20      	adds	r0, r4, #0
1000f34e:	4b04      	ldr	r3, [pc, #16]	; (1000f360 <gatts_handle_write_req+0x2c>)
1000f350:	4798      	blx	r3
1000f352:	201f      	movs	r0, #31
1000f354:	bd10      	pop	{r4, pc}
1000f356:	46c0      	nop			; (mov r8, r8)
1000f358:	10010979 	.word	0x10010979
1000f35c:	1000ead1 	.word	0x1000ead1
1000f360:	1000f241 	.word	0x1000f241

1000f364 <init_l2cc_task_module>:
1000f364:	220a      	movs	r2, #10
1000f366:	4b01      	ldr	r3, [pc, #4]	; (1000f36c <init_l2cc_task_module+0x8>)
1000f368:	701a      	strb	r2, [r3, #0]
1000f36a:	4770      	bx	lr
1000f36c:	10018fa8 	.word	0x10018fa8

1000f370 <l2cc_data_send_rsp_handler>:
1000f370:	b510      	push	{r4, lr}
1000f372:	7802      	ldrb	r2, [r0, #0]
1000f374:	700a      	strb	r2, [r1, #0]
1000f376:	7883      	ldrb	r3, [r0, #2]
1000f378:	7844      	ldrb	r4, [r0, #1]
1000f37a:	021b      	lsls	r3, r3, #8
1000f37c:	4323      	orrs	r3, r4
1000f37e:	804b      	strh	r3, [r1, #2]
1000f380:	7903      	ldrb	r3, [r0, #4]
1000f382:	78c0      	ldrb	r0, [r0, #3]
1000f384:	021b      	lsls	r3, r3, #8
1000f386:	4303      	orrs	r3, r0
1000f388:	808b      	strh	r3, [r1, #4]
1000f38a:	2a00      	cmp	r2, #0
1000f38c:	d103      	bne.n	1000f396 <l2cc_data_send_rsp_handler+0x26>
1000f38e:	4a02      	ldr	r2, [pc, #8]	; (1000f398 <l2cc_data_send_rsp_handler+0x28>)
1000f390:	7813      	ldrb	r3, [r2, #0]
1000f392:	3301      	adds	r3, #1
1000f394:	7013      	strb	r3, [r2, #0]
1000f396:	bd10      	pop	{r4, pc}
1000f398:	10018fa8 	.word	0x10018fa8

1000f39c <l2cc_data_received_handler>:
1000f39c:	b508      	push	{r3, lr}
1000f39e:	1c03      	adds	r3, r0, #0
1000f3a0:	7842      	ldrb	r2, [r0, #1]
1000f3a2:	7800      	ldrb	r0, [r0, #0]
1000f3a4:	0212      	lsls	r2, r2, #8
1000f3a6:	4302      	orrs	r2, r0
1000f3a8:	800a      	strh	r2, [r1, #0]
1000f3aa:	78da      	ldrb	r2, [r3, #3]
1000f3ac:	7898      	ldrb	r0, [r3, #2]
1000f3ae:	0212      	lsls	r2, r2, #8
1000f3b0:	4302      	orrs	r2, r0
1000f3b2:	804a      	strh	r2, [r1, #2]
1000f3b4:	795a      	ldrb	r2, [r3, #5]
1000f3b6:	7918      	ldrb	r0, [r3, #4]
1000f3b8:	0212      	lsls	r2, r2, #8
1000f3ba:	4302      	orrs	r2, r0
1000f3bc:	808a      	strh	r2, [r1, #4]
1000f3be:	1d88      	adds	r0, r1, #6
1000f3c0:	1d99      	adds	r1, r3, #6
1000f3c2:	4b01      	ldr	r3, [pc, #4]	; (1000f3c8 <l2cc_data_received_handler+0x2c>)
1000f3c4:	4798      	blx	r3
1000f3c6:	bd08      	pop	{r3, pc}
1000f3c8:	100122ab 	.word	0x100122ab

1000f3cc <at_ble_authenticate>:
1000f3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3ce:	1c0c      	adds	r4, r1, #0
1000f3d0:	211f      	movs	r1, #31
1000f3d2:	b08b      	sub	sp, #44	; 0x2c
1000f3d4:	9307      	str	r3, [sp, #28]
1000f3d6:	ab02      	add	r3, sp, #8
1000f3d8:	18c9      	adds	r1, r1, r3
1000f3da:	230f      	movs	r3, #15
1000f3dc:	700b      	strb	r3, [r1, #0]
1000f3de:	4b40      	ldr	r3, [pc, #256]	; (1000f4e0 <at_ble_authenticate+0x114>)
1000f3e0:	1c05      	adds	r5, r0, #0
1000f3e2:	1c16      	adds	r6, r2, #0
1000f3e4:	4798      	blx	r3
1000f3e6:	1c07      	adds	r7, r0, #0
1000f3e8:	2001      	movs	r0, #1
1000f3ea:	2f07      	cmp	r7, #7
1000f3ec:	d875      	bhi.n	1000f4da <at_ble_authenticate+0x10e>
1000f3ee:	2c00      	cmp	r4, #0
1000f3f0:	d113      	bne.n	1000f41a <at_ble_authenticate+0x4e>
1000f3f2:	2312      	movs	r3, #18
1000f3f4:	435f      	muls	r7, r3
1000f3f6:	4b3b      	ldr	r3, [pc, #236]	; (1000f4e4 <at_ble_authenticate+0x118>)
1000f3f8:	5cfb      	ldrb	r3, [r7, r3]
1000f3fa:	4283      	cmp	r3, r0
1000f3fc:	d001      	beq.n	1000f402 <at_ble_authenticate+0x36>
1000f3fe:	20cf      	movs	r0, #207	; 0xcf
1000f400:	e06b      	b.n	1000f4da <at_ble_authenticate+0x10e>
1000f402:	9504      	str	r5, [sp, #16]
1000f404:	9400      	str	r4, [sp, #0]
1000f406:	9401      	str	r4, [sp, #4]
1000f408:	9402      	str	r4, [sp, #8]
1000f40a:	9403      	str	r4, [sp, #12]
1000f40c:	1c20      	adds	r0, r4, #0
1000f40e:	1c21      	adds	r1, r4, #0
1000f410:	1c22      	adds	r2, r4, #0
1000f412:	1c23      	adds	r3, r4, #0
1000f414:	4d34      	ldr	r5, [pc, #208]	; (1000f4e8 <at_ble_authenticate+0x11c>)
1000f416:	47a8      	blx	r5
1000f418:	e05e      	b.n	1000f4d8 <at_ble_authenticate+0x10c>
1000f41a:	7922      	ldrb	r2, [r4, #4]
1000f41c:	2a06      	cmp	r2, #6
1000f41e:	d9ee      	bls.n	1000f3fe <at_ble_authenticate+0x32>
1000f420:	7963      	ldrb	r3, [r4, #5]
1000f422:	2b10      	cmp	r3, #16
1000f424:	d8eb      	bhi.n	1000f3fe <at_ble_authenticate+0x32>
1000f426:	429a      	cmp	r2, r3
1000f428:	d8e9      	bhi.n	1000f3fe <at_ble_authenticate+0x32>
1000f42a:	7a23      	ldrb	r3, [r4, #8]
1000f42c:	2b04      	cmp	r3, #4
1000f42e:	d8e6      	bhi.n	1000f3fe <at_ble_authenticate+0x32>
1000f430:	79a3      	ldrb	r3, [r4, #6]
1000f432:	2b07      	cmp	r3, #7
1000f434:	d8e3      	bhi.n	1000f3fe <at_ble_authenticate+0x32>
1000f436:	79e3      	ldrb	r3, [r4, #7]
1000f438:	2b07      	cmp	r3, #7
1000f43a:	d8e0      	bhi.n	1000f3fe <at_ble_authenticate+0x32>
1000f43c:	78a3      	ldrb	r3, [r4, #2]
1000f43e:	2b00      	cmp	r3, #0
1000f440:	d006      	beq.n	1000f450 <at_ble_authenticate+0x84>
1000f442:	2e00      	cmp	r6, #0
1000f444:	d0db      	beq.n	1000f3fe <at_ble_authenticate+0x32>
1000f446:	4829      	ldr	r0, [pc, #164]	; (1000f4ec <at_ble_authenticate+0x120>)
1000f448:	1c31      	adds	r1, r6, #0
1000f44a:	221c      	movs	r2, #28
1000f44c:	4b28      	ldr	r3, [pc, #160]	; (1000f4f0 <at_ble_authenticate+0x124>)
1000f44e:	4798      	blx	r3
1000f450:	9b07      	ldr	r3, [sp, #28]
1000f452:	2b00      	cmp	r3, #0
1000f454:	d005      	beq.n	1000f462 <at_ble_authenticate+0x96>
1000f456:	4827      	ldr	r0, [pc, #156]	; (1000f4f4 <at_ble_authenticate+0x128>)
1000f458:	1c19      	adds	r1, r3, #0
1000f45a:	309a      	adds	r0, #154	; 0x9a
1000f45c:	2210      	movs	r2, #16
1000f45e:	4b24      	ldr	r3, [pc, #144]	; (1000f4f0 <at_ble_authenticate+0x124>)
1000f460:	4798      	blx	r3
1000f462:	7863      	ldrb	r3, [r4, #1]
1000f464:	78a2      	ldrb	r2, [r4, #2]
1000f466:	009b      	lsls	r3, r3, #2
1000f468:	4313      	orrs	r3, r2
1000f46a:	2212      	movs	r2, #18
1000f46c:	4357      	muls	r7, r2
1000f46e:	4a1d      	ldr	r2, [pc, #116]	; (1000f4e4 <at_ble_authenticate+0x118>)
1000f470:	b2db      	uxtb	r3, r3
1000f472:	5cba      	ldrb	r2, [r7, r2]
1000f474:	2a00      	cmp	r2, #0
1000f476:	d116      	bne.n	1000f4a6 <at_ble_authenticate+0xda>
1000f478:	79a0      	ldrb	r0, [r4, #6]
1000f47a:	0742      	lsls	r2, r0, #29
1000f47c:	d502      	bpl.n	1000f484 <at_ble_authenticate+0xb8>
1000f47e:	9a07      	ldr	r2, [sp, #28]
1000f480:	2a00      	cmp	r2, #0
1000f482:	d0bc      	beq.n	1000f3fe <at_ble_authenticate+0x32>
1000f484:	07c2      	lsls	r2, r0, #31
1000f486:	d501      	bpl.n	1000f48c <at_ble_authenticate+0xc0>
1000f488:	2e00      	cmp	r6, #0
1000f48a:	d0b8      	beq.n	1000f3fe <at_ble_authenticate+0x32>
1000f48c:	7966      	ldrb	r6, [r4, #5]
1000f48e:	7821      	ldrb	r1, [r4, #0]
1000f490:	78e2      	ldrb	r2, [r4, #3]
1000f492:	9600      	str	r6, [sp, #0]
1000f494:	9001      	str	r0, [sp, #4]
1000f496:	79e0      	ldrb	r0, [r4, #7]
1000f498:	9002      	str	r0, [sp, #8]
1000f49a:	7a20      	ldrb	r0, [r4, #8]
1000f49c:	4c16      	ldr	r4, [pc, #88]	; (1000f4f8 <at_ble_authenticate+0x12c>)
1000f49e:	9003      	str	r0, [sp, #12]
1000f4a0:	1c28      	adds	r0, r5, #0
1000f4a2:	47a0      	blx	r4
1000f4a4:	e018      	b.n	1000f4d8 <at_ble_authenticate+0x10c>
1000f4a6:	2a01      	cmp	r2, #1
1000f4a8:	d1a9      	bne.n	1000f3fe <at_ble_authenticate+0x32>
1000f4aa:	79e0      	ldrb	r0, [r4, #7]
1000f4ac:	0742      	lsls	r2, r0, #29
1000f4ae:	d502      	bpl.n	1000f4b6 <at_ble_authenticate+0xea>
1000f4b0:	9a07      	ldr	r2, [sp, #28]
1000f4b2:	2a00      	cmp	r2, #0
1000f4b4:	d0a3      	beq.n	1000f3fe <at_ble_authenticate+0x32>
1000f4b6:	07c2      	lsls	r2, r0, #31
1000f4b8:	d501      	bpl.n	1000f4be <at_ble_authenticate+0xf2>
1000f4ba:	2e00      	cmp	r6, #0
1000f4bc:	d09f      	beq.n	1000f3fe <at_ble_authenticate+0x32>
1000f4be:	7966      	ldrb	r6, [r4, #5]
1000f4c0:	7821      	ldrb	r1, [r4, #0]
1000f4c2:	78e2      	ldrb	r2, [r4, #3]
1000f4c4:	9600      	str	r6, [sp, #0]
1000f4c6:	79a6      	ldrb	r6, [r4, #6]
1000f4c8:	9002      	str	r0, [sp, #8]
1000f4ca:	9601      	str	r6, [sp, #4]
1000f4cc:	7a20      	ldrb	r0, [r4, #8]
1000f4ce:	9504      	str	r5, [sp, #16]
1000f4d0:	9003      	str	r0, [sp, #12]
1000f4d2:	4c05      	ldr	r4, [pc, #20]	; (1000f4e8 <at_ble_authenticate+0x11c>)
1000f4d4:	2001      	movs	r0, #1
1000f4d6:	47a0      	blx	r4
1000f4d8:	2000      	movs	r0, #0
1000f4da:	b00b      	add	sp, #44	; 0x2c
1000f4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f4de:	46c0      	nop			; (mov r8, r8)
1000f4e0:	1000f8cd 	.word	0x1000f8cd
1000f4e4:	1001ba02 	.word	0x1001ba02
1000f4e8:	1000fe3d 	.word	0x1000fe3d
1000f4ec:	1001bb10 	.word	0x1001bb10
1000f4f0:	100122ab 	.word	0x100122ab
1000f4f4:	1001ba92 	.word	0x1001ba92
1000f4f8:	1000fc1d 	.word	0x1000fc1d

1000f4fc <at_ble_pair_key_reply>:
1000f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4fe:	b085      	sub	sp, #20
1000f500:	1c05      	adds	r5, r0, #0
1000f502:	1c0c      	adds	r4, r1, #0
1000f504:	1c16      	adds	r6, r2, #0
1000f506:	2100      	movs	r1, #0
1000f508:	4668      	mov	r0, sp
1000f50a:	2210      	movs	r2, #16
1000f50c:	4b18      	ldr	r3, [pc, #96]	; (1000f570 <at_ble_pair_key_reply+0x74>)
1000f50e:	4798      	blx	r3
1000f510:	2101      	movs	r1, #1
1000f512:	2e00      	cmp	r6, #0
1000f514:	d101      	bne.n	1000f51a <at_ble_pair_key_reply+0x1e>
1000f516:	1c31      	adds	r1, r6, #0
1000f518:	466e      	mov	r6, sp
1000f51a:	2c00      	cmp	r4, #0
1000f51c:	d116      	bne.n	1000f54c <at_ble_pair_key_reply+0x50>
1000f51e:	2701      	movs	r7, #1
1000f520:	1c23      	adds	r3, r4, #0
1000f522:	1d70      	adds	r0, r6, #5
1000f524:	3e01      	subs	r6, #1
1000f526:	7802      	ldrb	r2, [r0, #0]
1000f528:	3801      	subs	r0, #1
1000f52a:	3a30      	subs	r2, #48	; 0x30
1000f52c:	437a      	muls	r2, r7
1000f52e:	189b      	adds	r3, r3, r2
1000f530:	220a      	movs	r2, #10
1000f532:	4357      	muls	r7, r2
1000f534:	42b0      	cmp	r0, r6
1000f536:	d1f6      	bne.n	1000f526 <at_ble_pair_key_reply+0x2a>
1000f538:	466a      	mov	r2, sp
1000f53a:	4668      	mov	r0, sp
1000f53c:	7013      	strb	r3, [r2, #0]
1000f53e:	0a1a      	lsrs	r2, r3, #8
1000f540:	7042      	strb	r2, [r0, #1]
1000f542:	0c1a      	lsrs	r2, r3, #16
1000f544:	0e1b      	lsrs	r3, r3, #24
1000f546:	7082      	strb	r2, [r0, #2]
1000f548:	70c3      	strb	r3, [r0, #3]
1000f54a:	e009      	b.n	1000f560 <at_ble_pair_key_reply+0x64>
1000f54c:	20cf      	movs	r0, #207	; 0xcf
1000f54e:	2c01      	cmp	r4, #1
1000f550:	d10c      	bne.n	1000f56c <at_ble_pair_key_reply+0x70>
1000f552:	2300      	movs	r3, #0
1000f554:	4668      	mov	r0, sp
1000f556:	5cf2      	ldrb	r2, [r6, r3]
1000f558:	54c2      	strb	r2, [r0, r3]
1000f55a:	3301      	adds	r3, #1
1000f55c:	2b10      	cmp	r3, #16
1000f55e:	d1f9      	bne.n	1000f554 <at_ble_pair_key_reply+0x58>
1000f560:	2004      	movs	r0, #4
1000f562:	466a      	mov	r2, sp
1000f564:	1c2b      	adds	r3, r5, #0
1000f566:	4c03      	ldr	r4, [pc, #12]	; (1000f574 <at_ble_pair_key_reply+0x78>)
1000f568:	47a0      	blx	r4
1000f56a:	2000      	movs	r0, #0
1000f56c:	b005      	add	sp, #20
1000f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f570:	100122bd 	.word	0x100122bd
1000f574:	1000feb9 	.word	0x1000feb9

1000f578 <at_ble_send_slave_sec_request>:
1000f578:	b570      	push	{r4, r5, r6, lr}
1000f57a:	4b0c      	ldr	r3, [pc, #48]	; (1000f5ac <at_ble_send_slave_sec_request+0x34>)
1000f57c:	1c0e      	adds	r6, r1, #0
1000f57e:	2100      	movs	r1, #0
1000f580:	1c05      	adds	r5, r0, #0
1000f582:	1c14      	adds	r4, r2, #0
1000f584:	4798      	blx	r3
1000f586:	2301      	movs	r3, #1
1000f588:	2807      	cmp	r0, #7
1000f58a:	d80d      	bhi.n	1000f5a8 <at_ble_send_slave_sec_request+0x30>
1000f58c:	3311      	adds	r3, #17
1000f58e:	4358      	muls	r0, r3
1000f590:	4b07      	ldr	r3, [pc, #28]	; (1000f5b0 <at_ble_send_slave_sec_request+0x38>)
1000f592:	5cc2      	ldrb	r2, [r0, r3]
1000f594:	23e0      	movs	r3, #224	; 0xe0
1000f596:	2a01      	cmp	r2, #1
1000f598:	d106      	bne.n	1000f5a8 <at_ble_send_slave_sec_request+0x30>
1000f59a:	00b1      	lsls	r1, r6, #2
1000f59c:	430c      	orrs	r4, r1
1000f59e:	4b05      	ldr	r3, [pc, #20]	; (1000f5b4 <at_ble_send_slave_sec_request+0x3c>)
1000f5a0:	b2e1      	uxtb	r1, r4
1000f5a2:	1c28      	adds	r0, r5, #0
1000f5a4:	4798      	blx	r3
1000f5a6:	2300      	movs	r3, #0
1000f5a8:	1c18      	adds	r0, r3, #0
1000f5aa:	bd70      	pop	{r4, r5, r6, pc}
1000f5ac:	1000f8cd 	.word	0x1000f8cd
1000f5b0:	1001ba02 	.word	0x1001ba02
1000f5b4:	1000ff09 	.word	0x1000ff09

1000f5b8 <at_ble_encryption_start>:
1000f5b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5ba:	23cf      	movs	r3, #207	; 0xcf
1000f5bc:	2900      	cmp	r1, #0
1000f5be:	d02b      	beq.n	1000f618 <at_ble_encryption_start+0x60>
1000f5c0:	2a05      	cmp	r2, #5
1000f5c2:	d829      	bhi.n	1000f618 <at_ble_encryption_start+0x60>
1000f5c4:	2701      	movs	r7, #1
1000f5c6:	1c3d      	adds	r5, r7, #0
1000f5c8:	2433      	movs	r4, #51	; 0x33
1000f5ca:	4095      	lsls	r5, r2
1000f5cc:	4225      	tst	r5, r4
1000f5ce:	d023      	beq.n	1000f618 <at_ble_encryption_start+0x60>
1000f5d0:	7e8c      	ldrb	r4, [r1, #26]
1000f5d2:	3c07      	subs	r4, #7
1000f5d4:	2c09      	cmp	r4, #9
1000f5d6:	d81f      	bhi.n	1000f618 <at_ble_encryption_start+0x60>
1000f5d8:	4b10      	ldr	r3, [pc, #64]	; (1000f61c <at_ble_encryption_start+0x64>)
1000f5da:	1c0c      	adds	r4, r1, #0
1000f5dc:	2100      	movs	r1, #0
1000f5de:	1c15      	adds	r5, r2, #0
1000f5e0:	1c06      	adds	r6, r0, #0
1000f5e2:	4798      	blx	r3
1000f5e4:	1c3b      	adds	r3, r7, #0
1000f5e6:	2807      	cmp	r0, #7
1000f5e8:	d816      	bhi.n	1000f618 <at_ble_encryption_start+0x60>
1000f5ea:	2312      	movs	r3, #18
1000f5ec:	4358      	muls	r0, r3
1000f5ee:	4b0c      	ldr	r3, [pc, #48]	; (1000f620 <at_ble_encryption_start+0x68>)
1000f5f0:	5cc7      	ldrb	r7, [r0, r3]
1000f5f2:	23e0      	movs	r3, #224	; 0xe0
1000f5f4:	2f00      	cmp	r7, #0
1000f5f6:	d10f      	bne.n	1000f618 <at_ble_encryption_start+0x60>
1000f5f8:	1c21      	adds	r1, r4, #0
1000f5fa:	221c      	movs	r2, #28
1000f5fc:	4b09      	ldr	r3, [pc, #36]	; (1000f624 <at_ble_encryption_start+0x6c>)
1000f5fe:	480a      	ldr	r0, [pc, #40]	; (1000f628 <at_ble_encryption_start+0x70>)
1000f600:	4798      	blx	r3
1000f602:	1c23      	adds	r3, r4, #0
1000f604:	7ea1      	ldrb	r1, [r4, #26]
1000f606:	8a22      	ldrh	r2, [r4, #16]
1000f608:	3312      	adds	r3, #18
1000f60a:	9100      	str	r1, [sp, #0]
1000f60c:	9501      	str	r5, [sp, #4]
1000f60e:	1c21      	adds	r1, r4, #0
1000f610:	1c30      	adds	r0, r6, #0
1000f612:	4c06      	ldr	r4, [pc, #24]	; (1000f62c <at_ble_encryption_start+0x74>)
1000f614:	47a0      	blx	r4
1000f616:	1c3b      	adds	r3, r7, #0
1000f618:	1c18      	adds	r0, r3, #0
1000f61a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f61c:	1000f8cd 	.word	0x1000f8cd
1000f620:	1001ba02 	.word	0x1001ba02
1000f624:	100122ab 	.word	0x100122ab
1000f628:	1001bb10 	.word	0x1001bb10
1000f62c:	1000ff49 	.word	0x1000ff49

1000f630 <at_ble_encryption_request_reply>:
1000f630:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f632:	24cf      	movs	r4, #207	; 0xcf
1000f634:	2b00      	cmp	r3, #0
1000f636:	d011      	beq.n	1000f65c <at_ble_encryption_request_reply+0x2c>
1000f638:	2a00      	cmp	r2, #0
1000f63a:	d00a      	beq.n	1000f652 <at_ble_encryption_request_reply+0x22>
1000f63c:	2905      	cmp	r1, #5
1000f63e:	d80d      	bhi.n	1000f65c <at_ble_encryption_request_reply+0x2c>
1000f640:	2501      	movs	r5, #1
1000f642:	2633      	movs	r6, #51	; 0x33
1000f644:	408d      	lsls	r5, r1
1000f646:	4235      	tst	r5, r6
1000f648:	d008      	beq.n	1000f65c <at_ble_encryption_request_reply+0x2c>
1000f64a:	7e9d      	ldrb	r5, [r3, #26]
1000f64c:	3d07      	subs	r5, #7
1000f64e:	2d09      	cmp	r5, #9
1000f650:	d804      	bhi.n	1000f65c <at_ble_encryption_request_reply+0x2c>
1000f652:	7e9c      	ldrb	r4, [r3, #26]
1000f654:	9400      	str	r4, [sp, #0]
1000f656:	4c02      	ldr	r4, [pc, #8]	; (1000f660 <at_ble_encryption_request_reply+0x30>)
1000f658:	47a0      	blx	r4
1000f65a:	2400      	movs	r4, #0
1000f65c:	1c20      	adds	r0, r4, #0
1000f65e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f660:	10010005 	.word	0x10010005

1000f664 <rx_callback>:
1000f664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f666:	8883      	ldrh	r3, [r0, #4]
1000f668:	1c01      	adds	r1, r0, #0
1000f66a:	9301      	str	r3, [sp, #4]
1000f66c:	88c5      	ldrh	r5, [r0, #6]
1000f66e:	8806      	ldrh	r6, [r0, #0]
1000f670:	2d00      	cmp	r5, #0
1000f672:	d10f      	bne.n	1000f694 <rx_callback+0x30>
1000f674:	1c19      	adds	r1, r3, #0
1000f676:	1c30      	adds	r0, r6, #0
1000f678:	4b19      	ldr	r3, [pc, #100]	; (1000f6e0 <rx_callback+0x7c>)
1000f67a:	1c2a      	adds	r2, r5, #0
1000f67c:	4798      	blx	r3
1000f67e:	1e03      	subs	r3, r0, #0
1000f680:	d105      	bne.n	1000f68e <rx_callback+0x2a>
1000f682:	1c30      	adds	r0, r6, #0
1000f684:	9901      	ldr	r1, [sp, #4]
1000f686:	1c1a      	adds	r2, r3, #0
1000f688:	4c16      	ldr	r4, [pc, #88]	; (1000f6e4 <rx_callback+0x80>)
1000f68a:	47a0      	blx	r4
1000f68c:	e027      	b.n	1000f6de <rx_callback+0x7a>
1000f68e:	4b16      	ldr	r3, [pc, #88]	; (1000f6e8 <rx_callback+0x84>)
1000f690:	4798      	blx	r3
1000f692:	e024      	b.n	1000f6de <rx_callback+0x7a>
1000f694:	4c15      	ldr	r4, [pc, #84]	; (1000f6ec <rx_callback+0x88>)
1000f696:	4a16      	ldr	r2, [pc, #88]	; (1000f6f0 <rx_callback+0x8c>)
1000f698:	6823      	ldr	r3, [r4, #0]
1000f69a:	6812      	ldr	r2, [r2, #0]
1000f69c:	18eb      	adds	r3, r5, r3
1000f69e:	4293      	cmp	r3, r2
1000f6a0:	d901      	bls.n	1000f6a6 <rx_callback+0x42>
1000f6a2:	2300      	movs	r3, #0
1000f6a4:	6023      	str	r3, [r4, #0]
1000f6a6:	4f13      	ldr	r7, [pc, #76]	; (1000f6f4 <rx_callback+0x90>)
1000f6a8:	6822      	ldr	r2, [r4, #0]
1000f6aa:	683b      	ldr	r3, [r7, #0]
1000f6ac:	3108      	adds	r1, #8
1000f6ae:	1898      	adds	r0, r3, r2
1000f6b0:	1c2a      	adds	r2, r5, #0
1000f6b2:	4b11      	ldr	r3, [pc, #68]	; (1000f6f8 <rx_callback+0x94>)
1000f6b4:	4798      	blx	r3
1000f6b6:	683b      	ldr	r3, [r7, #0]
1000f6b8:	6822      	ldr	r2, [r4, #0]
1000f6ba:	1c30      	adds	r0, r6, #0
1000f6bc:	189a      	adds	r2, r3, r2
1000f6be:	9901      	ldr	r1, [sp, #4]
1000f6c0:	4b07      	ldr	r3, [pc, #28]	; (1000f6e0 <rx_callback+0x7c>)
1000f6c2:	4798      	blx	r3
1000f6c4:	2800      	cmp	r0, #0
1000f6c6:	d1e2      	bne.n	1000f68e <rx_callback+0x2a>
1000f6c8:	6823      	ldr	r3, [r4, #0]
1000f6ca:	683a      	ldr	r2, [r7, #0]
1000f6cc:	1c30      	adds	r0, r6, #0
1000f6ce:	18d2      	adds	r2, r2, r3
1000f6d0:	9901      	ldr	r1, [sp, #4]
1000f6d2:	1c2b      	adds	r3, r5, #0
1000f6d4:	4e03      	ldr	r6, [pc, #12]	; (1000f6e4 <rx_callback+0x80>)
1000f6d6:	47b0      	blx	r6
1000f6d8:	6823      	ldr	r3, [r4, #0]
1000f6da:	18ed      	adds	r5, r5, r3
1000f6dc:	6025      	str	r5, [r4, #0]
1000f6de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f6e0:	1000dd6d 	.word	0x1000dd6d
1000f6e4:	1000dce5 	.word	0x1000dce5
1000f6e8:	1000d88d 	.word	0x1000d88d
1000f6ec:	1001bb6c 	.word	0x1001bb6c
1000f6f0:	1001aa84 	.word	0x1001aa84
1000f6f4:	1001aa80 	.word	0x1001aa80
1000f6f8:	100122ab 	.word	0x100122ab

1000f6fc <interface_send>:
1000f6fc:	b508      	push	{r3, lr}
1000f6fe:	4b02      	ldr	r3, [pc, #8]	; (1000f708 <interface_send+0xc>)
1000f700:	4798      	blx	r3
1000f702:	2000      	movs	r0, #0
1000f704:	bd08      	pop	{r3, pc}
1000f706:	46c0      	nop			; (mov r8, r8)
1000f708:	1000d585 	.word	0x1000d585

1000f70c <interface_init>:
1000f70c:	2280      	movs	r2, #128	; 0x80
1000f70e:	b510      	push	{r4, lr}
1000f710:	2100      	movs	r1, #0
1000f712:	1c04      	adds	r4, r0, #0
1000f714:	0092      	lsls	r2, r2, #2
1000f716:	4b08      	ldr	r3, [pc, #32]	; (1000f738 <interface_init+0x2c>)
1000f718:	4808      	ldr	r0, [pc, #32]	; (1000f73c <interface_init+0x30>)
1000f71a:	4798      	blx	r3
1000f71c:	2200      	movs	r2, #0
1000f71e:	4b08      	ldr	r3, [pc, #32]	; (1000f740 <interface_init+0x34>)
1000f720:	601a      	str	r2, [r3, #0]
1000f722:	4a08      	ldr	r2, [pc, #32]	; (1000f744 <interface_init+0x38>)
1000f724:	4b08      	ldr	r3, [pc, #32]	; (1000f748 <interface_init+0x3c>)
1000f726:	601a      	str	r2, [r3, #0]
1000f728:	4b08      	ldr	r3, [pc, #32]	; (1000f74c <interface_init+0x40>)
1000f72a:	6922      	ldr	r2, [r4, #16]
1000f72c:	601a      	str	r2, [r3, #0]
1000f72e:	6962      	ldr	r2, [r4, #20]
1000f730:	4b07      	ldr	r3, [pc, #28]	; (1000f750 <interface_init+0x44>)
1000f732:	601a      	str	r2, [r3, #0]
1000f734:	bd10      	pop	{r4, pc}
1000f736:	46c0      	nop			; (mov r8, r8)
1000f738:	100122bd 	.word	0x100122bd
1000f73c:	1001bd70 	.word	0x1001bd70
1000f740:	1001bb6c 	.word	0x1001bb6c
1000f744:	1001bb70 	.word	0x1001bb70
1000f748:	10018fac 	.word	0x10018fac
1000f74c:	1001aa80 	.word	0x1001aa80
1000f750:	1001aa84 	.word	0x1001aa84

1000f754 <platform_cmd_cmpl_signal>:
1000f754:	2201      	movs	r2, #1
1000f756:	4b01      	ldr	r3, [pc, #4]	; (1000f75c <platform_cmd_cmpl_signal+0x8>)
1000f758:	601a      	str	r2, [r3, #0]
1000f75a:	4770      	bx	lr
1000f75c:	1001aa88 	.word	0x1001aa88

1000f760 <platform_cmd_cmpl_wait>:
1000f760:	b510      	push	{r4, lr}
1000f762:	1c04      	adds	r4, r0, #0
1000f764:	4b07      	ldr	r3, [pc, #28]	; (1000f784 <platform_cmd_cmpl_wait+0x24>)
1000f766:	681a      	ldr	r2, [r3, #0]
1000f768:	2a01      	cmp	r2, #1
1000f76a:	d003      	beq.n	1000f774 <platform_cmd_cmpl_wait+0x14>
1000f76c:	4b06      	ldr	r3, [pc, #24]	; (1000f788 <platform_cmd_cmpl_wait+0x28>)
1000f76e:	2000      	movs	r0, #0
1000f770:	4798      	blx	r3
1000f772:	e7f7      	b.n	1000f764 <platform_cmd_cmpl_wait+0x4>
1000f774:	6819      	ldr	r1, [r3, #0]
1000f776:	2901      	cmp	r1, #1
1000f778:	d102      	bne.n	1000f780 <platform_cmd_cmpl_wait+0x20>
1000f77a:	2200      	movs	r2, #0
1000f77c:	601a      	str	r2, [r3, #0]
1000f77e:	e000      	b.n	1000f782 <platform_cmd_cmpl_wait+0x22>
1000f780:	7022      	strb	r2, [r4, #0]
1000f782:	bd10      	pop	{r4, pc}
1000f784:	1001aa88 	.word	0x1001aa88
1000f788:	1000d615 	.word	0x1000d615

1000f78c <start_timer>:
1000f78c:	4770      	bx	lr

1000f78e <stop_timer>:
1000f78e:	4770      	bx	lr

1000f790 <dbg_le_set_bd_addr_req_handler>:
1000f790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f792:	466b      	mov	r3, sp
1000f794:	1dde      	adds	r6, r3, #7
1000f796:	2300      	movs	r3, #0
1000f798:	7033      	strb	r3, [r6, #0]
1000f79a:	230f      	movs	r3, #15
1000f79c:	4c13      	ldr	r4, [pc, #76]	; (1000f7ec <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f79e:	2703      	movs	r7, #3
1000f7a0:	7023      	strb	r3, [r4, #0]
1000f7a2:	2300      	movs	r3, #0
1000f7a4:	70e3      	strb	r3, [r4, #3]
1000f7a6:	4b12      	ldr	r3, [pc, #72]	; (1000f7f0 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f7a8:	1c01      	adds	r1, r0, #0
1000f7aa:	881a      	ldrh	r2, [r3, #0]
1000f7ac:	881b      	ldrh	r3, [r3, #0]
1000f7ae:	7122      	strb	r2, [r4, #4]
1000f7b0:	0a1b      	lsrs	r3, r3, #8
1000f7b2:	2206      	movs	r2, #6
1000f7b4:	7163      	strb	r3, [r4, #5]
1000f7b6:	480f      	ldr	r0, [pc, #60]	; (1000f7f4 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f7b8:	4b0f      	ldr	r3, [pc, #60]	; (1000f7f8 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f7ba:	7067      	strb	r7, [r4, #1]
1000f7bc:	70a7      	strb	r7, [r4, #2]
1000f7be:	4798      	blx	r3
1000f7c0:	4d0e      	ldr	r5, [pc, #56]	; (1000f7fc <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f7c2:	4b0f      	ldr	r3, [pc, #60]	; (1000f800 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f7c4:	210e      	movs	r1, #14
1000f7c6:	802b      	strh	r3, [r5, #0]
1000f7c8:	2306      	movs	r3, #6
1000f7ca:	71a3      	strb	r3, [r4, #6]
1000f7cc:	2300      	movs	r3, #0
1000f7ce:	1c20      	adds	r0, r4, #0
1000f7d0:	71e3      	strb	r3, [r4, #7]
1000f7d2:	4b0c      	ldr	r3, [pc, #48]	; (1000f804 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f7d4:	80af      	strh	r7, [r5, #4]
1000f7d6:	4798      	blx	r3
1000f7d8:	1c30      	adds	r0, r6, #0
1000f7da:	4b0b      	ldr	r3, [pc, #44]	; (1000f808 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f7dc:	4798      	blx	r3
1000f7de:	7833      	ldrb	r3, [r6, #0]
1000f7e0:	20e2      	movs	r0, #226	; 0xe2
1000f7e2:	2b00      	cmp	r3, #0
1000f7e4:	d101      	bne.n	1000f7ea <dbg_le_set_bd_addr_req_handler+0x5a>
1000f7e6:	68ab      	ldr	r3, [r5, #8]
1000f7e8:	7818      	ldrb	r0, [r3, #0]
1000f7ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f7ec:	1001bd70 	.word	0x1001bd70
1000f7f0:	1001ba00 	.word	0x1001ba00
1000f7f4:	1001bd78 	.word	0x1001bd78
1000f7f8:	100122ab 	.word	0x100122ab
1000f7fc:	1001b9f4 	.word	0x1001b9f4
1000f800:	00000329 	.word	0x00000329
1000f804:	1000f6fd 	.word	0x1000f6fd
1000f808:	1000f761 	.word	0x1000f761

1000f80c <gapc_get_dev_info_cfm.constprop.1>:
1000f80c:	b538      	push	{r3, r4, r5, lr}
1000f80e:	230b      	movs	r3, #11
1000f810:	4c27      	ldr	r4, [pc, #156]	; (1000f8b0 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f812:	7023      	strb	r3, [r4, #0]
1000f814:	3303      	adds	r3, #3
1000f816:	7063      	strb	r3, [r4, #1]
1000f818:	3329      	adds	r3, #41	; 0x29
1000f81a:	70a3      	strb	r3, [r4, #2]
1000f81c:	4b25      	ldr	r3, [pc, #148]	; (1000f8b4 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f81e:	70e1      	strb	r1, [r4, #3]
1000f820:	881a      	ldrh	r2, [r3, #0]
1000f822:	881b      	ldrh	r3, [r3, #0]
1000f824:	7122      	strb	r2, [r4, #4]
1000f826:	0a1b      	lsrs	r3, r3, #8
1000f828:	7163      	strb	r3, [r4, #5]
1000f82a:	2300      	movs	r3, #0
1000f82c:	7220      	strb	r0, [r4, #8]
1000f82e:	7263      	strb	r3, [r4, #9]
1000f830:	2801      	cmp	r0, #1
1000f832:	d02b      	beq.n	1000f88c <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f834:	4298      	cmp	r0, r3
1000f836:	d01b      	beq.n	1000f870 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f838:	2802      	cmp	r0, #2
1000f83a:	d12f      	bne.n	1000f89c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f83c:	4b1e      	ldr	r3, [pc, #120]	; (1000f8b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f83e:	2112      	movs	r1, #18
1000f840:	1c1a      	adds	r2, r3, #0
1000f842:	32ce      	adds	r2, #206	; 0xce
1000f844:	8812      	ldrh	r2, [r2, #0]
1000f846:	72a2      	strb	r2, [r4, #10]
1000f848:	0a12      	lsrs	r2, r2, #8
1000f84a:	72e2      	strb	r2, [r4, #11]
1000f84c:	1c1a      	adds	r2, r3, #0
1000f84e:	32d0      	adds	r2, #208	; 0xd0
1000f850:	8812      	ldrh	r2, [r2, #0]
1000f852:	7322      	strb	r2, [r4, #12]
1000f854:	0a12      	lsrs	r2, r2, #8
1000f856:	7362      	strb	r2, [r4, #13]
1000f858:	1c1a      	adds	r2, r3, #0
1000f85a:	32d2      	adds	r2, #210	; 0xd2
1000f85c:	8812      	ldrh	r2, [r2, #0]
1000f85e:	33d4      	adds	r3, #212	; 0xd4
1000f860:	73a2      	strb	r2, [r4, #14]
1000f862:	0a12      	lsrs	r2, r2, #8
1000f864:	73e2      	strb	r2, [r4, #15]
1000f866:	881b      	ldrh	r3, [r3, #0]
1000f868:	7423      	strb	r3, [r4, #16]
1000f86a:	0a1b      	lsrs	r3, r3, #8
1000f86c:	7463      	strb	r3, [r4, #17]
1000f86e:	e016      	b.n	1000f89e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f870:	4b11      	ldr	r3, [pc, #68]	; (1000f8b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f872:	4912      	ldr	r1, [pc, #72]	; (1000f8bc <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f874:	33aa      	adds	r3, #170	; 0xaa
1000f876:	881d      	ldrh	r5, [r3, #0]
1000f878:	4811      	ldr	r0, [pc, #68]	; (1000f8c0 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f87a:	0a2b      	lsrs	r3, r5, #8
1000f87c:	72a5      	strb	r5, [r4, #10]
1000f87e:	72e3      	strb	r3, [r4, #11]
1000f880:	1c2a      	adds	r2, r5, #0
1000f882:	4b10      	ldr	r3, [pc, #64]	; (1000f8c4 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f884:	350c      	adds	r5, #12
1000f886:	4798      	blx	r3
1000f888:	b2a9      	uxth	r1, r5
1000f88a:	e008      	b.n	1000f89e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f88c:	4b0a      	ldr	r3, [pc, #40]	; (1000f8b8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f88e:	210c      	movs	r1, #12
1000f890:	33cc      	adds	r3, #204	; 0xcc
1000f892:	881b      	ldrh	r3, [r3, #0]
1000f894:	72a3      	strb	r3, [r4, #10]
1000f896:	0a1b      	lsrs	r3, r3, #8
1000f898:	72e3      	strb	r3, [r4, #11]
1000f89a:	e000      	b.n	1000f89e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f89c:	210a      	movs	r1, #10
1000f89e:	1c0b      	adds	r3, r1, #0
1000f8a0:	3b08      	subs	r3, #8
1000f8a2:	71a3      	strb	r3, [r4, #6]
1000f8a4:	121b      	asrs	r3, r3, #8
1000f8a6:	71e3      	strb	r3, [r4, #7]
1000f8a8:	1c20      	adds	r0, r4, #0
1000f8aa:	4b07      	ldr	r3, [pc, #28]	; (1000f8c8 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f8ac:	4798      	blx	r3
1000f8ae:	bd38      	pop	{r3, r4, r5, pc}
1000f8b0:	1001bd70 	.word	0x1001bd70
1000f8b4:	1001ba00 	.word	0x1001ba00
1000f8b8:	1001ba92 	.word	0x1001ba92
1000f8bc:	1001bb3e 	.word	0x1001bb3e
1000f8c0:	1001bd7c 	.word	0x1001bd7c
1000f8c4:	100122ab 	.word	0x100122ab
1000f8c8:	1000f6fd 	.word	0x1000f6fd

1000f8cc <check_ConnData_idx_role>:
1000f8cc:	4b0c      	ldr	r3, [pc, #48]	; (1000f900 <check_ConnData_idx_role+0x34>)
1000f8ce:	b570      	push	{r4, r5, r6, lr}
1000f8d0:	1c04      	adds	r4, r0, #0
1000f8d2:	2008      	movs	r0, #8
1000f8d4:	429c      	cmp	r4, r3
1000f8d6:	d011      	beq.n	1000f8fc <check_ConnData_idx_role+0x30>
1000f8d8:	2300      	movs	r3, #0
1000f8da:	2212      	movs	r2, #18
1000f8dc:	435a      	muls	r2, r3
1000f8de:	4d09      	ldr	r5, [pc, #36]	; (1000f904 <check_ConnData_idx_role+0x38>)
1000f8e0:	b2d8      	uxtb	r0, r3
1000f8e2:	1956      	adds	r6, r2, r5
1000f8e4:	8976      	ldrh	r6, [r6, #10]
1000f8e6:	42a6      	cmp	r6, r4
1000f8e8:	d104      	bne.n	1000f8f4 <check_ConnData_idx_role+0x28>
1000f8ea:	2900      	cmp	r1, #0
1000f8ec:	d006      	beq.n	1000f8fc <check_ConnData_idx_role+0x30>
1000f8ee:	5d53      	ldrb	r3, [r2, r5]
1000f8f0:	700b      	strb	r3, [r1, #0]
1000f8f2:	e003      	b.n	1000f8fc <check_ConnData_idx_role+0x30>
1000f8f4:	3301      	adds	r3, #1
1000f8f6:	2b08      	cmp	r3, #8
1000f8f8:	d1ef      	bne.n	1000f8da <check_ConnData_idx_role+0xe>
1000f8fa:	1c18      	adds	r0, r3, #0
1000f8fc:	bd70      	pop	{r4, r5, r6, pc}
1000f8fe:	46c0      	nop			; (mov r8, r8)
1000f900:	0000ffff 	.word	0x0000ffff
1000f904:	1001ba02 	.word	0x1001ba02

1000f908 <check_ConnData_emptyEntry>:
1000f908:	2300      	movs	r3, #0
1000f90a:	2212      	movs	r2, #18
1000f90c:	435a      	muls	r2, r3
1000f90e:	4906      	ldr	r1, [pc, #24]	; (1000f928 <check_ConnData_emptyEntry+0x20>)
1000f910:	b2d8      	uxtb	r0, r3
1000f912:	1852      	adds	r2, r2, r1
1000f914:	8951      	ldrh	r1, [r2, #10]
1000f916:	4a05      	ldr	r2, [pc, #20]	; (1000f92c <check_ConnData_emptyEntry+0x24>)
1000f918:	4291      	cmp	r1, r2
1000f91a:	d003      	beq.n	1000f924 <check_ConnData_emptyEntry+0x1c>
1000f91c:	3301      	adds	r3, #1
1000f91e:	2b08      	cmp	r3, #8
1000f920:	d1f3      	bne.n	1000f90a <check_ConnData_emptyEntry+0x2>
1000f922:	1c18      	adds	r0, r3, #0
1000f924:	4770      	bx	lr
1000f926:	46c0      	nop			; (mov r8, r8)
1000f928:	1001ba02 	.word	0x1001ba02
1000f92c:	0000ffff 	.word	0x0000ffff

1000f930 <gapc_cmp_evt>:
1000f930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f932:	780b      	ldrb	r3, [r1, #0]
1000f934:	1c05      	adds	r5, r0, #0
1000f936:	1e58      	subs	r0, r3, #1
1000f938:	784e      	ldrb	r6, [r1, #1]
1000f93a:	280f      	cmp	r0, #15
1000f93c:	d85a      	bhi.n	1000f9f4 <gapc_cmp_evt+0xc4>
1000f93e:	1c14      	adds	r4, r2, #0
1000f940:	f005 f9d0 	bl	10014ce4 <__gnu_thumb1_case_uqi>
1000f944:	5858440a 	.word	0x5858440a
1000f948:	4b584444 	.word	0x4b584444
1000f94c:	0825122d 	.word	0x0825122d
1000f950:	3e395858 	.word	0x3e395858
1000f954:	203b      	movs	r0, #59	; 0x3b
1000f956:	e04e      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f958:	203b      	movs	r0, #59	; 0x3b
1000f95a:	2e00      	cmp	r6, #0
1000f95c:	d04b      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f95e:	0a2d      	lsrs	r5, r5, #8
1000f960:	8015      	strh	r5, [r2, #0]
1000f962:	7096      	strb	r6, [r2, #2]
1000f964:	3835      	subs	r0, #53	; 0x35
1000f966:	e046      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f968:	466b      	mov	r3, sp
1000f96a:	1ddf      	adds	r7, r3, #7
1000f96c:	2301      	movs	r3, #1
1000f96e:	0a2d      	lsrs	r5, r5, #8
1000f970:	703b      	strb	r3, [r7, #0]
1000f972:	1c28      	adds	r0, r5, #0
1000f974:	1c39      	adds	r1, r7, #0
1000f976:	4b20      	ldr	r3, [pc, #128]	; (1000f9f8 <gapc_cmp_evt+0xc8>)
1000f978:	4798      	blx	r3
1000f97a:	2807      	cmp	r0, #7
1000f97c:	d803      	bhi.n	1000f986 <gapc_cmp_evt+0x56>
1000f97e:	783b      	ldrb	r3, [r7, #0]
1000f980:	203b      	movs	r0, #59	; 0x3b
1000f982:	2b00      	cmp	r3, #0
1000f984:	d037      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f986:	8065      	strh	r5, [r4, #2]
1000f988:	7126      	strb	r6, [r4, #4]
1000f98a:	2009      	movs	r0, #9
1000f98c:	e033      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f98e:	203b      	movs	r0, #59	; 0x3b
1000f990:	2e00      	cmp	r6, #0
1000f992:	d030      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f994:	0a2d      	lsrs	r5, r5, #8
1000f996:	8015      	strh	r5, [r2, #0]
1000f998:	7096      	strb	r6, [r2, #2]
1000f99a:	382d      	subs	r0, #45	; 0x2d
1000f99c:	e02b      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f99e:	203b      	movs	r0, #59	; 0x3b
1000f9a0:	2e00      	cmp	r6, #0
1000f9a2:	d028      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9a4:	2300      	movs	r3, #0
1000f9a6:	0a2d      	lsrs	r5, r5, #8
1000f9a8:	8015      	strh	r5, [r2, #0]
1000f9aa:	7096      	strb	r6, [r2, #2]
1000f9ac:	8093      	strh	r3, [r2, #4]
1000f9ae:	80d3      	strh	r3, [r2, #6]
1000f9b0:	8113      	strh	r3, [r2, #8]
1000f9b2:	3834      	subs	r0, #52	; 0x34
1000f9b4:	e01f      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9b6:	203b      	movs	r0, #59	; 0x3b
1000f9b8:	2e00      	cmp	r6, #0
1000f9ba:	d01c      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9bc:	7216      	strb	r6, [r2, #8]
1000f9be:	e003      	b.n	1000f9c8 <gapc_cmp_evt+0x98>
1000f9c0:	203b      	movs	r0, #59	; 0x3b
1000f9c2:	2e00      	cmp	r6, #0
1000f9c4:	d017      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9c6:	7116      	strb	r6, [r2, #4]
1000f9c8:	3812      	subs	r0, #18
1000f9ca:	e014      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9cc:	203b      	movs	r0, #59	; 0x3b
1000f9ce:	2e00      	cmp	r6, #0
1000f9d0:	d011      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9d2:	7093      	strb	r3, [r2, #2]
1000f9d4:	70d6      	strb	r6, [r2, #3]
1000f9d6:	382a      	subs	r0, #42	; 0x2a
1000f9d8:	e00d      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9da:	203b      	movs	r0, #59	; 0x3b
1000f9dc:	2e00      	cmp	r6, #0
1000f9de:	d00a      	beq.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9e0:	0a2d      	lsrs	r5, r5, #8
1000f9e2:	7016      	strb	r6, [r2, #0]
1000f9e4:	8055      	strh	r5, [r2, #2]
1000f9e6:	1d10      	adds	r0, r2, #4
1000f9e8:	2100      	movs	r1, #0
1000f9ea:	2205      	movs	r2, #5
1000f9ec:	4b03      	ldr	r3, [pc, #12]	; (1000f9fc <gapc_cmp_evt+0xcc>)
1000f9ee:	4798      	blx	r3
1000f9f0:	2012      	movs	r0, #18
1000f9f2:	e000      	b.n	1000f9f6 <gapc_cmp_evt+0xc6>
1000f9f4:	2000      	movs	r0, #0
1000f9f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f9f8:	1000f8cd 	.word	0x1000f8cd
1000f9fc:	100122bd 	.word	0x100122bd

1000fa00 <gapc_connection_cfm_handler>:
1000fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa02:	b085      	sub	sp, #20
1000fa04:	1c1d      	adds	r5, r3, #0
1000fa06:	ab0a      	add	r3, sp, #40	; 0x28
1000fa08:	781b      	ldrb	r3, [r3, #0]
1000fa0a:	9201      	str	r2, [sp, #4]
1000fa0c:	9302      	str	r3, [sp, #8]
1000fa0e:	ab0b      	add	r3, sp, #44	; 0x2c
1000fa10:	781b      	ldrb	r3, [r3, #0]
1000fa12:	1c07      	adds	r7, r0, #0
1000fa14:	9303      	str	r3, [sp, #12]
1000fa16:	ab0c      	add	r3, sp, #48	; 0x30
1000fa18:	881a      	ldrh	r2, [r3, #0]
1000fa1a:	2302      	movs	r3, #2
1000fa1c:	1c0e      	adds	r6, r1, #0
1000fa1e:	4c23      	ldr	r4, [pc, #140]	; (1000faac <gapc_connection_cfm_handler+0xac>)
1000fa20:	1c39      	adds	r1, r7, #0
1000fa22:	7023      	strb	r3, [r4, #0]
1000fa24:	330c      	adds	r3, #12
1000fa26:	7063      	strb	r3, [r4, #1]
1000fa28:	70a3      	strb	r3, [r4, #2]
1000fa2a:	4b21      	ldr	r3, [pc, #132]	; (1000fab0 <gapc_connection_cfm_handler+0xb0>)
1000fa2c:	70e2      	strb	r2, [r4, #3]
1000fa2e:	881a      	ldrh	r2, [r3, #0]
1000fa30:	881b      	ldrh	r3, [r3, #0]
1000fa32:	7122      	strb	r2, [r4, #4]
1000fa34:	0a1b      	lsrs	r3, r3, #8
1000fa36:	4f1f      	ldr	r7, [pc, #124]	; (1000fab4 <gapc_connection_cfm_handler+0xb4>)
1000fa38:	2210      	movs	r2, #16
1000fa3a:	481f      	ldr	r0, [pc, #124]	; (1000fab8 <gapc_connection_cfm_handler+0xb8>)
1000fa3c:	7163      	strb	r3, [r4, #5]
1000fa3e:	47b8      	blx	r7
1000fa40:	0a33      	lsrs	r3, r6, #8
1000fa42:	7626      	strb	r6, [r4, #24]
1000fa44:	7663      	strb	r3, [r4, #25]
1000fa46:	9901      	ldr	r1, [sp, #4]
1000fa48:	0c33      	lsrs	r3, r6, #16
1000fa4a:	2210      	movs	r2, #16
1000fa4c:	0e36      	lsrs	r6, r6, #24
1000fa4e:	481b      	ldr	r0, [pc, #108]	; (1000fabc <gapc_connection_cfm_handler+0xbc>)
1000fa50:	76a3      	strb	r3, [r4, #26]
1000fa52:	76e6      	strb	r6, [r4, #27]
1000fa54:	47b8      	blx	r7
1000fa56:	1c23      	adds	r3, r4, #0
1000fa58:	332c      	adds	r3, #44	; 0x2c
1000fa5a:	701d      	strb	r5, [r3, #0]
1000fa5c:	1c23      	adds	r3, r4, #0
1000fa5e:	0a2a      	lsrs	r2, r5, #8
1000fa60:	332d      	adds	r3, #45	; 0x2d
1000fa62:	701a      	strb	r2, [r3, #0]
1000fa64:	1c23      	adds	r3, r4, #0
1000fa66:	0c2a      	lsrs	r2, r5, #16
1000fa68:	332e      	adds	r3, #46	; 0x2e
1000fa6a:	701a      	strb	r2, [r3, #0]
1000fa6c:	1c23      	adds	r3, r4, #0
1000fa6e:	0e2d      	lsrs	r5, r5, #24
1000fa70:	332f      	adds	r3, #47	; 0x2f
1000fa72:	466a      	mov	r2, sp
1000fa74:	701d      	strb	r5, [r3, #0]
1000fa76:	1c23      	adds	r3, r4, #0
1000fa78:	7a12      	ldrb	r2, [r2, #8]
1000fa7a:	3330      	adds	r3, #48	; 0x30
1000fa7c:	701a      	strb	r2, [r3, #0]
1000fa7e:	1c23      	adds	r3, r4, #0
1000fa80:	2500      	movs	r5, #0
1000fa82:	3331      	adds	r3, #49	; 0x31
1000fa84:	466a      	mov	r2, sp
1000fa86:	701d      	strb	r5, [r3, #0]
1000fa88:	1c23      	adds	r3, r4, #0
1000fa8a:	7b12      	ldrb	r2, [r2, #12]
1000fa8c:	3332      	adds	r3, #50	; 0x32
1000fa8e:	701a      	strb	r2, [r3, #0]
1000fa90:	1c23      	adds	r3, r4, #0
1000fa92:	3333      	adds	r3, #51	; 0x33
1000fa94:	701d      	strb	r5, [r3, #0]
1000fa96:	232c      	movs	r3, #44	; 0x2c
1000fa98:	1c20      	adds	r0, r4, #0
1000fa9a:	71a3      	strb	r3, [r4, #6]
1000fa9c:	2134      	movs	r1, #52	; 0x34
1000fa9e:	4b08      	ldr	r3, [pc, #32]	; (1000fac0 <gapc_connection_cfm_handler+0xc0>)
1000faa0:	71e5      	strb	r5, [r4, #7]
1000faa2:	4798      	blx	r3
1000faa4:	1c28      	adds	r0, r5, #0
1000faa6:	b005      	add	sp, #20
1000faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000faaa:	46c0      	nop			; (mov r8, r8)
1000faac:	1001bd70 	.word	0x1001bd70
1000fab0:	1001ba00 	.word	0x1001ba00
1000fab4:	100122ab 	.word	0x100122ab
1000fab8:	1001bd78 	.word	0x1001bd78
1000fabc:	1001bd8c 	.word	0x1001bd8c
1000fac0:	1000f6fd 	.word	0x1000f6fd

1000fac4 <gapc_con_req_ind>:
1000fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fac6:	7845      	ldrb	r5, [r0, #1]
1000fac8:	7803      	ldrb	r3, [r0, #0]
1000faca:	4c30      	ldr	r4, [pc, #192]	; (1000fb8c <gapc_con_req_ind+0xc8>)
1000facc:	022d      	lsls	r5, r5, #8
1000face:	431d      	orrs	r5, r3
1000fad0:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000fad2:	78c3      	ldrb	r3, [r0, #3]
1000fad4:	7882      	ldrb	r2, [r0, #2]
1000fad6:	b08b      	sub	sp, #44	; 0x2c
1000fad8:	021b      	lsls	r3, r3, #8
1000fada:	431a      	orrs	r2, r3
1000fadc:	466b      	mov	r3, sp
1000fade:	9205      	str	r2, [sp, #20]
1000fae0:	8a9b      	ldrh	r3, [r3, #20]
1000fae2:	2120      	movs	r1, #32
1000fae4:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000fae6:	7943      	ldrb	r3, [r0, #5]
1000fae8:	7902      	ldrb	r2, [r0, #4]
1000faea:	021b      	lsls	r3, r3, #8
1000faec:	431a      	orrs	r2, r3
1000faee:	466b      	mov	r3, sp
1000faf0:	9206      	str	r2, [sp, #24]
1000faf2:	8b1b      	ldrh	r3, [r3, #24]
1000faf4:	1c06      	adds	r6, r0, #0
1000faf6:	8623      	strh	r3, [r4, #48]	; 0x30
1000faf8:	79c3      	ldrb	r3, [r0, #7]
1000fafa:	7982      	ldrb	r2, [r0, #6]
1000fafc:	021b      	lsls	r3, r3, #8
1000fafe:	431a      	orrs	r2, r3
1000fb00:	466b      	mov	r3, sp
1000fb02:	9207      	str	r2, [sp, #28]
1000fb04:	466a      	mov	r2, sp
1000fb06:	8b9b      	ldrh	r3, [r3, #28]
1000fb08:	1852      	adds	r2, r2, r1
1000fb0a:	8663      	strh	r3, [r4, #50]	; 0x32
1000fb0c:	7a43      	ldrb	r3, [r0, #9]
1000fb0e:	1c01      	adds	r1, r0, #0
1000fb10:	9308      	str	r3, [sp, #32]
1000fb12:	1c23      	adds	r3, r4, #0
1000fb14:	7812      	ldrb	r2, [r2, #0]
1000fb16:	3377      	adds	r3, #119	; 0x77
1000fb18:	3478      	adds	r4, #120	; 0x78
1000fb1a:	701a      	strb	r2, [r3, #0]
1000fb1c:	310a      	adds	r1, #10
1000fb1e:	2206      	movs	r2, #6
1000fb20:	4b1b      	ldr	r3, [pc, #108]	; (1000fb90 <gapc_con_req_ind+0xcc>)
1000fb22:	1c20      	adds	r0, r4, #0
1000fb24:	4798      	blx	r3
1000fb26:	7c33      	ldrb	r3, [r6, #16]
1000fb28:	9309      	str	r3, [sp, #36]	; 0x24
1000fb2a:	4b1a      	ldr	r3, [pc, #104]	; (1000fb94 <gapc_con_req_ind+0xd0>)
1000fb2c:	4798      	blx	r3
1000fb2e:	4e1a      	ldr	r6, [pc, #104]	; (1000fb98 <gapc_con_req_ind+0xd4>)
1000fb30:	1e07      	subs	r7, r0, #0
1000fb32:	2f07      	cmp	r7, #7
1000fb34:	d81b      	bhi.n	1000fb6e <gapc_con_req_ind+0xaa>
1000fb36:	2312      	movs	r3, #18
1000fb38:	4343      	muls	r3, r0
1000fb3a:	18f0      	adds	r0, r6, r3
1000fb3c:	8145      	strh	r5, [r0, #10]
1000fb3e:	4669      	mov	r1, sp
1000fb40:	2524      	movs	r5, #36	; 0x24
1000fb42:	1949      	adds	r1, r1, r5
1000fb44:	7809      	ldrb	r1, [r1, #0]
1000fb46:	2206      	movs	r2, #6
1000fb48:	54f1      	strb	r1, [r6, r3]
1000fb4a:	2120      	movs	r1, #32
1000fb4c:	466b      	mov	r3, sp
1000fb4e:	185b      	adds	r3, r3, r1
1000fb50:	781b      	ldrb	r3, [r3, #0]
1000fb52:	1c21      	adds	r1, r4, #0
1000fb54:	7043      	strb	r3, [r0, #1]
1000fb56:	466b      	mov	r3, sp
1000fb58:	8a9b      	ldrh	r3, [r3, #20]
1000fb5a:	3002      	adds	r0, #2
1000fb5c:	8143      	strh	r3, [r0, #10]
1000fb5e:	466b      	mov	r3, sp
1000fb60:	8b1b      	ldrh	r3, [r3, #24]
1000fb62:	8183      	strh	r3, [r0, #12]
1000fb64:	466b      	mov	r3, sp
1000fb66:	8b9b      	ldrh	r3, [r3, #28]
1000fb68:	81c3      	strh	r3, [r0, #14]
1000fb6a:	4b09      	ldr	r3, [pc, #36]	; (1000fb90 <gapc_con_req_ind+0xcc>)
1000fb6c:	4798      	blx	r3
1000fb6e:	2112      	movs	r1, #18
1000fb70:	2300      	movs	r3, #0
1000fb72:	434f      	muls	r7, r1
1000fb74:	9300      	str	r3, [sp, #0]
1000fb76:	9301      	str	r3, [sp, #4]
1000fb78:	19f6      	adds	r6, r6, r7
1000fb7a:	8971      	ldrh	r1, [r6, #10]
1000fb7c:	4a07      	ldr	r2, [pc, #28]	; (1000fb9c <gapc_con_req_ind+0xd8>)
1000fb7e:	9102      	str	r1, [sp, #8]
1000fb80:	1c10      	adds	r0, r2, #0
1000fb82:	1c19      	adds	r1, r3, #0
1000fb84:	4c06      	ldr	r4, [pc, #24]	; (1000fba0 <gapc_con_req_ind+0xdc>)
1000fb86:	47a0      	blx	r4
1000fb88:	b00b      	add	sp, #44	; 0x2c
1000fb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb8c:	1001ba92 	.word	0x1001ba92
1000fb90:	100122ab 	.word	0x100122ab
1000fb94:	1000f909 	.word	0x1000f909
1000fb98:	1001ba02 	.word	0x1001ba02
1000fb9c:	1001aa8c 	.word	0x1001aa8c
1000fba0:	1000fa01 	.word	0x1000fa01

1000fba4 <gapc_disconnect_cmd_handler>:
1000fba4:	2204      	movs	r2, #4
1000fba6:	b510      	push	{r4, lr}
1000fba8:	4b0c      	ldr	r3, [pc, #48]	; (1000fbdc <gapc_disconnect_cmd_handler+0x38>)
1000fbaa:	2400      	movs	r4, #0
1000fbac:	701a      	strb	r2, [r3, #0]
1000fbae:	320a      	adds	r2, #10
1000fbb0:	705a      	strb	r2, [r3, #1]
1000fbb2:	709a      	strb	r2, [r3, #2]
1000fbb4:	4a0a      	ldr	r2, [pc, #40]	; (1000fbe0 <gapc_disconnect_cmd_handler+0x3c>)
1000fbb6:	70d9      	strb	r1, [r3, #3]
1000fbb8:	8811      	ldrh	r1, [r2, #0]
1000fbba:	8812      	ldrh	r2, [r2, #0]
1000fbbc:	7119      	strb	r1, [r3, #4]
1000fbbe:	0a12      	lsrs	r2, r2, #8
1000fbc0:	715a      	strb	r2, [r3, #5]
1000fbc2:	2201      	movs	r2, #1
1000fbc4:	721a      	strb	r2, [r3, #8]
1000fbc6:	1892      	adds	r2, r2, r2
1000fbc8:	7258      	strb	r0, [r3, #9]
1000fbca:	719a      	strb	r2, [r3, #6]
1000fbcc:	71dc      	strb	r4, [r3, #7]
1000fbce:	1c18      	adds	r0, r3, #0
1000fbd0:	210a      	movs	r1, #10
1000fbd2:	4b04      	ldr	r3, [pc, #16]	; (1000fbe4 <gapc_disconnect_cmd_handler+0x40>)
1000fbd4:	4798      	blx	r3
1000fbd6:	1c20      	adds	r0, r4, #0
1000fbd8:	bd10      	pop	{r4, pc}
1000fbda:	46c0      	nop			; (mov r8, r8)
1000fbdc:	1001bd70 	.word	0x1001bd70
1000fbe0:	1001ba00 	.word	0x1001ba00
1000fbe4:	1000f6fd 	.word	0x1000f6fd

1000fbe8 <gapc_disconnect_ind>:
1000fbe8:	1c02      	adds	r2, r0, #0
1000fbea:	b508      	push	{r3, lr}
1000fbec:	7843      	ldrb	r3, [r0, #1]
1000fbee:	7800      	ldrb	r0, [r0, #0]
1000fbf0:	021b      	lsls	r3, r3, #8
1000fbf2:	4318      	orrs	r0, r3
1000fbf4:	8008      	strh	r0, [r1, #0]
1000fbf6:	7893      	ldrb	r3, [r2, #2]
1000fbf8:	708b      	strb	r3, [r1, #2]
1000fbfa:	2100      	movs	r1, #0
1000fbfc:	4b05      	ldr	r3, [pc, #20]	; (1000fc14 <gapc_disconnect_ind+0x2c>)
1000fbfe:	4798      	blx	r3
1000fc00:	2807      	cmp	r0, #7
1000fc02:	d806      	bhi.n	1000fc12 <gapc_disconnect_ind+0x2a>
1000fc04:	2312      	movs	r3, #18
1000fc06:	4358      	muls	r0, r3
1000fc08:	4b03      	ldr	r3, [pc, #12]	; (1000fc18 <gapc_disconnect_ind+0x30>)
1000fc0a:	1818      	adds	r0, r3, r0
1000fc0c:	2301      	movs	r3, #1
1000fc0e:	425b      	negs	r3, r3
1000fc10:	8143      	strh	r3, [r0, #10]
1000fc12:	bd08      	pop	{r3, pc}
1000fc14:	1000f8cd 	.word	0x1000f8cd
1000fc18:	1001ba02 	.word	0x1001ba02

1000fc1c <gapc_bond_cmd_handler>:
1000fc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fc1e:	9300      	str	r3, [sp, #0]
1000fc20:	2312      	movs	r3, #18
1000fc22:	1c04      	adds	r4, r0, #0
1000fc24:	a808      	add	r0, sp, #32
1000fc26:	7807      	ldrb	r7, [r0, #0]
1000fc28:	a809      	add	r0, sp, #36	; 0x24
1000fc2a:	7806      	ldrb	r6, [r0, #0]
1000fc2c:	a80a      	add	r0, sp, #40	; 0x28
1000fc2e:	7805      	ldrb	r5, [r0, #0]
1000fc30:	a80b      	add	r0, sp, #44	; 0x2c
1000fc32:	7800      	ldrb	r0, [r0, #0]
1000fc34:	9001      	str	r0, [sp, #4]
1000fc36:	4810      	ldr	r0, [pc, #64]	; (1000fc78 <gapc_bond_cmd_handler+0x5c>)
1000fc38:	7003      	strb	r3, [r0, #0]
1000fc3a:	230e      	movs	r3, #14
1000fc3c:	70c4      	strb	r4, [r0, #3]
1000fc3e:	4c0f      	ldr	r4, [pc, #60]	; (1000fc7c <gapc_bond_cmd_handler+0x60>)
1000fc40:	7043      	strb	r3, [r0, #1]
1000fc42:	7083      	strb	r3, [r0, #2]
1000fc44:	8823      	ldrh	r3, [r4, #0]
1000fc46:	8824      	ldrh	r4, [r4, #0]
1000fc48:	7103      	strb	r3, [r0, #4]
1000fc4a:	466b      	mov	r3, sp
1000fc4c:	781b      	ldrb	r3, [r3, #0]
1000fc4e:	0a24      	lsrs	r4, r4, #8
1000fc50:	72c3      	strb	r3, [r0, #11]
1000fc52:	466b      	mov	r3, sp
1000fc54:	791b      	ldrb	r3, [r3, #4]
1000fc56:	7144      	strb	r4, [r0, #5]
1000fc58:	73c3      	strb	r3, [r0, #15]
1000fc5a:	2308      	movs	r3, #8
1000fc5c:	7183      	strb	r3, [r0, #6]
1000fc5e:	2300      	movs	r3, #0
1000fc60:	240a      	movs	r4, #10
1000fc62:	7241      	strb	r1, [r0, #9]
1000fc64:	71c3      	strb	r3, [r0, #7]
1000fc66:	2110      	movs	r1, #16
1000fc68:	4b05      	ldr	r3, [pc, #20]	; (1000fc80 <gapc_bond_cmd_handler+0x64>)
1000fc6a:	7307      	strb	r7, [r0, #12]
1000fc6c:	7346      	strb	r6, [r0, #13]
1000fc6e:	7385      	strb	r5, [r0, #14]
1000fc70:	7204      	strb	r4, [r0, #8]
1000fc72:	7282      	strb	r2, [r0, #10]
1000fc74:	4798      	blx	r3
1000fc76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fc78:	1001bd70 	.word	0x1001bd70
1000fc7c:	1001ba00 	.word	0x1001ba00
1000fc80:	1000f6fd 	.word	0x1000f6fd

1000fc84 <gapc_bond_ind>:
1000fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fc86:	780e      	ldrb	r6, [r1, #0]
1000fc88:	1c03      	adds	r3, r0, #0
1000fc8a:	1eb0      	subs	r0, r6, #2
1000fc8c:	2805      	cmp	r0, #5
1000fc8e:	d85d      	bhi.n	1000fd4c <gapc_bond_ind+0xc8>
1000fc90:	1c15      	adds	r5, r2, #0
1000fc92:	1c0c      	adds	r4, r1, #0
1000fc94:	f005 f826 	bl	10014ce4 <__gnu_thumb1_case_uqi>
1000fc98:	2f5a030d 	.word	0x2f5a030d
1000fc9c:	4740      	.short	0x4740
1000fc9e:	2009      	movs	r0, #9
1000fca0:	2a00      	cmp	r2, #0
1000fca2:	d054      	beq.n	1000fd4e <gapc_bond_ind+0xca>
1000fca4:	0a1b      	lsrs	r3, r3, #8
1000fca6:	8053      	strh	r3, [r2, #2]
1000fca8:	788b      	ldrb	r3, [r1, #2]
1000fcaa:	4829      	ldr	r0, [pc, #164]	; (1000fd50 <gapc_bond_ind+0xcc>)
1000fcac:	7113      	strb	r3, [r2, #4]
1000fcae:	2100      	movs	r1, #0
1000fcb0:	e01c      	b.n	1000fcec <gapc_bond_ind+0x68>
1000fcb2:	2009      	movs	r0, #9
1000fcb4:	2a00      	cmp	r2, #0
1000fcb6:	d04a      	beq.n	1000fd4e <gapc_bond_ind+0xca>
1000fcb8:	4c25      	ldr	r4, [pc, #148]	; (1000fd50 <gapc_bond_ind+0xcc>)
1000fcba:	0a1b      	lsrs	r3, r3, #8
1000fcbc:	8053      	strh	r3, [r2, #2]
1000fcbe:	788b      	ldrb	r3, [r1, #2]
1000fcc0:	2700      	movs	r7, #0
1000fcc2:	1c10      	adds	r0, r2, #0
1000fcc4:	1c21      	adds	r1, r4, #0
1000fcc6:	7013      	strb	r3, [r2, #0]
1000fcc8:	4e22      	ldr	r6, [pc, #136]	; (1000fd54 <gapc_bond_ind+0xd0>)
1000fcca:	7117      	strb	r7, [r2, #4]
1000fccc:	312e      	adds	r1, #46	; 0x2e
1000fcce:	2217      	movs	r2, #23
1000fcd0:	3032      	adds	r0, #50	; 0x32
1000fcd2:	47b0      	blx	r6
1000fcd4:	1c28      	adds	r0, r5, #0
1000fcd6:	1c21      	adds	r1, r4, #0
1000fcd8:	2210      	movs	r2, #16
1000fcda:	311e      	adds	r1, #30
1000fcdc:	3022      	adds	r0, #34	; 0x22
1000fcde:	47b0      	blx	r6
1000fce0:	1ca1      	adds	r1, r4, #2
1000fce2:	1da8      	adds	r0, r5, #6
1000fce4:	221c      	movs	r2, #28
1000fce6:	47b0      	blx	r6
1000fce8:	1c20      	adds	r0, r4, #0
1000fcea:	1c39      	adds	r1, r7, #0
1000fcec:	2246      	movs	r2, #70	; 0x46
1000fcee:	4b1a      	ldr	r3, [pc, #104]	; (1000fd58 <gapc_bond_ind+0xd4>)
1000fcf0:	4798      	blx	r3
1000fcf2:	2009      	movs	r0, #9
1000fcf4:	e02b      	b.n	1000fd4e <gapc_bond_ind+0xca>
1000fcf6:	4d16      	ldr	r5, [pc, #88]	; (1000fd50 <gapc_bond_ind+0xcc>)
1000fcf8:	3102      	adds	r1, #2
1000fcfa:	1c28      	adds	r0, r5, #0
1000fcfc:	2210      	movs	r2, #16
1000fcfe:	4e15      	ldr	r6, [pc, #84]	; (1000fd54 <gapc_bond_ind+0xd0>)
1000fd00:	302e      	adds	r0, #46	; 0x2e
1000fd02:	47b0      	blx	r6
1000fd04:	1c28      	adds	r0, r5, #0
1000fd06:	1c21      	adds	r1, r4, #0
1000fd08:	303f      	adds	r0, #63	; 0x3f
1000fd0a:	3112      	adds	r1, #18
1000fd0c:	2206      	movs	r2, #6
1000fd0e:	47b0      	blx	r6
1000fd10:	7e23      	ldrb	r3, [r4, #24]
1000fd12:	353e      	adds	r5, #62	; 0x3e
1000fd14:	702b      	strb	r3, [r5, #0]
1000fd16:	e019      	b.n	1000fd4c <gapc_bond_ind+0xc8>
1000fd18:	480d      	ldr	r0, [pc, #52]	; (1000fd50 <gapc_bond_ind+0xcc>)
1000fd1a:	3102      	adds	r1, #2
1000fd1c:	2210      	movs	r2, #16
1000fd1e:	4b0d      	ldr	r3, [pc, #52]	; (1000fd54 <gapc_bond_ind+0xd0>)
1000fd20:	301e      	adds	r0, #30
1000fd22:	4798      	blx	r3
1000fd24:	e012      	b.n	1000fd4c <gapc_bond_ind+0xc8>
1000fd26:	4d0a      	ldr	r5, [pc, #40]	; (1000fd50 <gapc_bond_ind+0xcc>)
1000fd28:	3102      	adds	r1, #2
1000fd2a:	2210      	movs	r2, #16
1000fd2c:	4e09      	ldr	r6, [pc, #36]	; (1000fd54 <gapc_bond_ind+0xd0>)
1000fd2e:	1ca8      	adds	r0, r5, #2
1000fd30:	47b0      	blx	r6
1000fd32:	1c28      	adds	r0, r5, #0
1000fd34:	1c21      	adds	r1, r4, #0
1000fd36:	7ce3      	ldrb	r3, [r4, #19]
1000fd38:	7ca2      	ldrb	r2, [r4, #18]
1000fd3a:	021b      	lsls	r3, r3, #8
1000fd3c:	4313      	orrs	r3, r2
1000fd3e:	3014      	adds	r0, #20
1000fd40:	3114      	adds	r1, #20
1000fd42:	2208      	movs	r2, #8
1000fd44:	826b      	strh	r3, [r5, #18]
1000fd46:	47b0      	blx	r6
1000fd48:	7f23      	ldrb	r3, [r4, #28]
1000fd4a:	772b      	strb	r3, [r5, #28]
1000fd4c:	2000      	movs	r0, #0
1000fd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fd50:	1001aabc 	.word	0x1001aabc
1000fd54:	100122ab 	.word	0x100122ab
1000fd58:	100122bd 	.word	0x100122bd

1000fd5c <gapc_bond_req_ind>:
1000fd5c:	b570      	push	{r4, r5, r6, lr}
1000fd5e:	780c      	ldrb	r4, [r1, #0]
1000fd60:	1c03      	adds	r3, r0, #0
1000fd62:	7849      	ldrb	r1, [r1, #1]
1000fd64:	2c07      	cmp	r4, #7
1000fd66:	d85c      	bhi.n	1000fe22 <gapc_bond_req_ind+0xc6>
1000fd68:	1c20      	adds	r0, r4, #0
1000fd6a:	f004 ffbb 	bl	10014ce4 <__gnu_thumb1_case_uqi>
1000fd6e:	5a04      	.short	0x5a04
1000fd70:	5a0b5a5a 	.word	0x5a0b5a5a
1000fd74:	1f1f      	.short	0x1f1f
1000fd76:	200a      	movs	r0, #10
1000fd78:	2a00      	cmp	r2, #0
1000fd7a:	d053      	beq.n	1000fe24 <gapc_bond_req_ind+0xc8>
1000fd7c:	0a1b      	lsrs	r3, r3, #8
1000fd7e:	8013      	strh	r3, [r2, #0]
1000fd80:	7091      	strb	r1, [r2, #2]
1000fd82:	e04f      	b.n	1000fe24 <gapc_bond_req_ind+0xc8>
1000fd84:	2a00      	cmp	r2, #0
1000fd86:	d00b      	beq.n	1000fda0 <gapc_bond_req_ind+0x44>
1000fd88:	0a1b      	lsrs	r3, r3, #8
1000fd8a:	8013      	strh	r3, [r2, #0]
1000fd8c:	2900      	cmp	r1, #0
1000fd8e:	d102      	bne.n	1000fd96 <gapc_bond_req_ind+0x3a>
1000fd90:	2301      	movs	r3, #1
1000fd92:	7093      	strb	r3, [r2, #2]
1000fd94:	e004      	b.n	1000fda0 <gapc_bond_req_ind+0x44>
1000fd96:	2300      	movs	r3, #0
1000fd98:	7093      	strb	r3, [r2, #2]
1000fd9a:	2902      	cmp	r1, #2
1000fd9c:	d102      	bne.n	1000fda4 <gapc_bond_req_ind+0x48>
1000fd9e:	70d3      	strb	r3, [r2, #3]
1000fda0:	200c      	movs	r0, #12
1000fda2:	e03f      	b.n	1000fe24 <gapc_bond_req_ind+0xc8>
1000fda4:	2901      	cmp	r1, #1
1000fda6:	d1fb      	bne.n	1000fda0 <gapc_bond_req_ind+0x44>
1000fda8:	70d1      	strb	r1, [r2, #3]
1000fdaa:	e7f9      	b.n	1000fda0 <gapc_bond_req_ind+0x44>
1000fdac:	2214      	movs	r2, #20
1000fdae:	481e      	ldr	r0, [pc, #120]	; (1000fe28 <gapc_bond_req_ind+0xcc>)
1000fdb0:	0a1b      	lsrs	r3, r3, #8
1000fdb2:	70c3      	strb	r3, [r0, #3]
1000fdb4:	4b1d      	ldr	r3, [pc, #116]	; (1000fe2c <gapc_bond_req_ind+0xd0>)
1000fdb6:	7002      	strb	r2, [r0, #0]
1000fdb8:	3a06      	subs	r2, #6
1000fdba:	7042      	strb	r2, [r0, #1]
1000fdbc:	7082      	strb	r2, [r0, #2]
1000fdbe:	881a      	ldrh	r2, [r3, #0]
1000fdc0:	881b      	ldrh	r3, [r3, #0]
1000fdc2:	4e1b      	ldr	r6, [pc, #108]	; (1000fe30 <gapc_bond_req_ind+0xd4>)
1000fdc4:	0a1b      	lsrs	r3, r3, #8
1000fdc6:	7143      	strb	r3, [r0, #5]
1000fdc8:	2301      	movs	r3, #1
1000fdca:	7102      	strb	r2, [r0, #4]
1000fdcc:	7204      	strb	r4, [r0, #8]
1000fdce:	7243      	strb	r3, [r0, #9]
1000fdd0:	1c05      	adds	r5, r0, #0
1000fdd2:	1c31      	adds	r1, r6, #0
1000fdd4:	300a      	adds	r0, #10
1000fdd6:	2c07      	cmp	r4, #7
1000fdd8:	d116      	bne.n	1000fe08 <gapc_bond_req_ind+0xac>
1000fdda:	317e      	adds	r1, #126	; 0x7e
1000fddc:	2210      	movs	r2, #16
1000fdde:	4c15      	ldr	r4, [pc, #84]	; (1000fe34 <gapc_bond_req_ind+0xd8>)
1000fde0:	47a0      	blx	r4
1000fde2:	1c33      	adds	r3, r6, #0
1000fde4:	1c31      	adds	r1, r6, #0
1000fde6:	1c28      	adds	r0, r5, #0
1000fde8:	338e      	adds	r3, #142	; 0x8e
1000fdea:	881b      	ldrh	r3, [r3, #0]
1000fdec:	3190      	adds	r1, #144	; 0x90
1000fdee:	76ab      	strb	r3, [r5, #26]
1000fdf0:	2208      	movs	r2, #8
1000fdf2:	0a1b      	lsrs	r3, r3, #8
1000fdf4:	301c      	adds	r0, #28
1000fdf6:	76eb      	strb	r3, [r5, #27]
1000fdf8:	47a0      	blx	r4
1000fdfa:	1c31      	adds	r1, r6, #0
1000fdfc:	3198      	adds	r1, #152	; 0x98
1000fdfe:	780a      	ldrb	r2, [r1, #0]
1000fe00:	1d6b      	adds	r3, r5, #5
1000fe02:	77da      	strb	r2, [r3, #31]
1000fe04:	2125      	movs	r1, #37	; 0x25
1000fe06:	e004      	b.n	1000fe12 <gapc_bond_req_ind+0xb6>
1000fe08:	319a      	adds	r1, #154	; 0x9a
1000fe0a:	2210      	movs	r2, #16
1000fe0c:	4b09      	ldr	r3, [pc, #36]	; (1000fe34 <gapc_bond_req_ind+0xd8>)
1000fe0e:	4798      	blx	r3
1000fe10:	211a      	movs	r1, #26
1000fe12:	1c0b      	adds	r3, r1, #0
1000fe14:	2400      	movs	r4, #0
1000fe16:	3b08      	subs	r3, #8
1000fe18:	71ab      	strb	r3, [r5, #6]
1000fe1a:	1c28      	adds	r0, r5, #0
1000fe1c:	4b06      	ldr	r3, [pc, #24]	; (1000fe38 <gapc_bond_req_ind+0xdc>)
1000fe1e:	71ec      	strb	r4, [r5, #7]
1000fe20:	4798      	blx	r3
1000fe22:	2000      	movs	r0, #0
1000fe24:	bd70      	pop	{r4, r5, r6, pc}
1000fe26:	46c0      	nop			; (mov r8, r8)
1000fe28:	1001bd70 	.word	0x1001bd70
1000fe2c:	1001ba00 	.word	0x1001ba00
1000fe30:	1001ba92 	.word	0x1001ba92
1000fe34:	100122ab 	.word	0x100122ab
1000fe38:	1000f6fd 	.word	0x1000f6fd

1000fe3c <gapc_bond_cfm_handler_pair_resp>:
1000fe3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe3e:	b085      	sub	sp, #20
1000fe40:	1c07      	adds	r7, r0, #0
1000fe42:	a80a      	add	r0, sp, #40	; 0x28
1000fe44:	7806      	ldrb	r6, [r0, #0]
1000fe46:	a80b      	add	r0, sp, #44	; 0x2c
1000fe48:	7805      	ldrb	r5, [r0, #0]
1000fe4a:	a80c      	add	r0, sp, #48	; 0x30
1000fe4c:	7800      	ldrb	r0, [r0, #0]
1000fe4e:	2414      	movs	r4, #20
1000fe50:	9002      	str	r0, [sp, #8]
1000fe52:	a80d      	add	r0, sp, #52	; 0x34
1000fe54:	7800      	ldrb	r0, [r0, #0]
1000fe56:	9301      	str	r3, [sp, #4]
1000fe58:	9003      	str	r0, [sp, #12]
1000fe5a:	a80e      	add	r0, sp, #56	; 0x38
1000fe5c:	8800      	ldrh	r0, [r0, #0]
1000fe5e:	4684      	mov	ip, r0
1000fe60:	4812      	ldr	r0, [pc, #72]	; (1000feac <gapc_bond_cfm_handler_pair_resp+0x70>)
1000fe62:	7004      	strb	r4, [r0, #0]
1000fe64:	3c06      	subs	r4, #6
1000fe66:	7044      	strb	r4, [r0, #1]
1000fe68:	7084      	strb	r4, [r0, #2]
1000fe6a:	4664      	mov	r4, ip
1000fe6c:	70c4      	strb	r4, [r0, #3]
1000fe6e:	4c10      	ldr	r4, [pc, #64]	; (1000feb0 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000fe70:	7247      	strb	r7, [r0, #9]
1000fe72:	8823      	ldrh	r3, [r4, #0]
1000fe74:	8824      	ldrh	r4, [r4, #0]
1000fe76:	7103      	strb	r3, [r0, #4]
1000fe78:	466b      	mov	r3, sp
1000fe7a:	791b      	ldrb	r3, [r3, #4]
1000fe7c:	0a24      	lsrs	r4, r4, #8
1000fe7e:	7303      	strb	r3, [r0, #12]
1000fe80:	466b      	mov	r3, sp
1000fe82:	7a1b      	ldrb	r3, [r3, #8]
1000fe84:	7144      	strb	r4, [r0, #5]
1000fe86:	73c3      	strb	r3, [r0, #15]
1000fe88:	466b      	mov	r3, sp
1000fe8a:	7b1b      	ldrb	r3, [r3, #12]
1000fe8c:	2401      	movs	r4, #1
1000fe8e:	7403      	strb	r3, [r0, #16]
1000fe90:	2309      	movs	r3, #9
1000fe92:	7183      	strb	r3, [r0, #6]
1000fe94:	2300      	movs	r3, #0
1000fe96:	7204      	strb	r4, [r0, #8]
1000fe98:	7281      	strb	r1, [r0, #10]
1000fe9a:	72c2      	strb	r2, [r0, #11]
1000fe9c:	7346      	strb	r6, [r0, #13]
1000fe9e:	7385      	strb	r5, [r0, #14]
1000fea0:	71c3      	strb	r3, [r0, #7]
1000fea2:	2111      	movs	r1, #17
1000fea4:	4b03      	ldr	r3, [pc, #12]	; (1000feb4 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000fea6:	4798      	blx	r3
1000fea8:	b005      	add	sp, #20
1000feaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000feac:	1001bd70 	.word	0x1001bd70
1000feb0:	1001ba00 	.word	0x1001ba00
1000feb4:	1000f6fd 	.word	0x1000f6fd

1000feb8 <gapc_bond_cfm_handler_key_exch>:
1000feb8:	b538      	push	{r3, r4, r5, lr}
1000feba:	2514      	movs	r5, #20
1000febc:	4c0d      	ldr	r4, [pc, #52]	; (1000fef4 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000febe:	70e3      	strb	r3, [r4, #3]
1000fec0:	4b0d      	ldr	r3, [pc, #52]	; (1000fef8 <gapc_bond_cfm_handler_key_exch+0x40>)
1000fec2:	7025      	strb	r5, [r4, #0]
1000fec4:	3d06      	subs	r5, #6
1000fec6:	7065      	strb	r5, [r4, #1]
1000fec8:	70a5      	strb	r5, [r4, #2]
1000feca:	881d      	ldrh	r5, [r3, #0]
1000fecc:	881b      	ldrh	r3, [r3, #0]
1000fece:	7220      	strb	r0, [r4, #8]
1000fed0:	0a1b      	lsrs	r3, r3, #8
1000fed2:	7163      	strb	r3, [r4, #5]
1000fed4:	7261      	strb	r1, [r4, #9]
1000fed6:	4b09      	ldr	r3, [pc, #36]	; (1000fefc <gapc_bond_cfm_handler_key_exch+0x44>)
1000fed8:	1c11      	adds	r1, r2, #0
1000feda:	4809      	ldr	r0, [pc, #36]	; (1000ff00 <gapc_bond_cfm_handler_key_exch+0x48>)
1000fedc:	2210      	movs	r2, #16
1000fede:	7125      	strb	r5, [r4, #4]
1000fee0:	4798      	blx	r3
1000fee2:	2312      	movs	r3, #18
1000fee4:	71a3      	strb	r3, [r4, #6]
1000fee6:	2300      	movs	r3, #0
1000fee8:	1c20      	adds	r0, r4, #0
1000feea:	71e3      	strb	r3, [r4, #7]
1000feec:	211a      	movs	r1, #26
1000feee:	4b05      	ldr	r3, [pc, #20]	; (1000ff04 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000fef0:	4798      	blx	r3
1000fef2:	bd38      	pop	{r3, r4, r5, pc}
1000fef4:	1001bd70 	.word	0x1001bd70
1000fef8:	1001ba00 	.word	0x1001ba00
1000fefc:	100122ab 	.word	0x100122ab
1000ff00:	1001bd7a 	.word	0x1001bd7a
1000ff04:	1000f6fd 	.word	0x1000f6fd

1000ff08 <gapc_security_cmd_handler>:
1000ff08:	221a      	movs	r2, #26
1000ff0a:	b508      	push	{r3, lr}
1000ff0c:	4b0b      	ldr	r3, [pc, #44]	; (1000ff3c <gapc_security_cmd_handler+0x34>)
1000ff0e:	701a      	strb	r2, [r3, #0]
1000ff10:	3a0c      	subs	r2, #12
1000ff12:	705a      	strb	r2, [r3, #1]
1000ff14:	709a      	strb	r2, [r3, #2]
1000ff16:	4a0a      	ldr	r2, [pc, #40]	; (1000ff40 <gapc_security_cmd_handler+0x38>)
1000ff18:	70d8      	strb	r0, [r3, #3]
1000ff1a:	8810      	ldrh	r0, [r2, #0]
1000ff1c:	8812      	ldrh	r2, [r2, #0]
1000ff1e:	7118      	strb	r0, [r3, #4]
1000ff20:	0a12      	lsrs	r2, r2, #8
1000ff22:	715a      	strb	r2, [r3, #5]
1000ff24:	220c      	movs	r2, #12
1000ff26:	721a      	strb	r2, [r3, #8]
1000ff28:	3a0a      	subs	r2, #10
1000ff2a:	719a      	strb	r2, [r3, #6]
1000ff2c:	2200      	movs	r2, #0
1000ff2e:	7259      	strb	r1, [r3, #9]
1000ff30:	71da      	strb	r2, [r3, #7]
1000ff32:	1c18      	adds	r0, r3, #0
1000ff34:	210a      	movs	r1, #10
1000ff36:	4b03      	ldr	r3, [pc, #12]	; (1000ff44 <gapc_security_cmd_handler+0x3c>)
1000ff38:	4798      	blx	r3
1000ff3a:	bd08      	pop	{r3, pc}
1000ff3c:	1001bd70 	.word	0x1001bd70
1000ff40:	1001ba00 	.word	0x1001ba00
1000ff44:	1000f6fd 	.word	0x1000f6fd

1000ff48 <gapc_encrypt_cmd_handler>:
1000ff48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff4a:	2500      	movs	r5, #0
1000ff4c:	b089      	sub	sp, #36	; 0x24
1000ff4e:	9306      	str	r3, [sp, #24]
1000ff50:	ab0e      	add	r3, sp, #56	; 0x38
1000ff52:	781b      	ldrb	r3, [r3, #0]
1000ff54:	1c17      	adds	r7, r2, #0
1000ff56:	9307      	str	r3, [sp, #28]
1000ff58:	ab0f      	add	r3, sp, #60	; 0x3c
1000ff5a:	781b      	ldrb	r3, [r3, #0]
1000ff5c:	4a19      	ldr	r2, [pc, #100]	; (1000ffc4 <gapc_encrypt_cmd_handler+0x7c>)
1000ff5e:	1c06      	adds	r6, r0, #0
1000ff60:	9105      	str	r1, [sp, #20]
1000ff62:	9300      	str	r3, [sp, #0]
1000ff64:	9002      	str	r0, [sp, #8]
1000ff66:	1c29      	adds	r1, r5, #0
1000ff68:	1c2b      	adds	r3, r5, #0
1000ff6a:	9501      	str	r5, [sp, #4]
1000ff6c:	1c10      	adds	r0, r2, #0
1000ff6e:	4c16      	ldr	r4, [pc, #88]	; (1000ffc8 <gapc_encrypt_cmd_handler+0x80>)
1000ff70:	47a0      	blx	r4
1000ff72:	2316      	movs	r3, #22
1000ff74:	4c15      	ldr	r4, [pc, #84]	; (1000ffcc <gapc_encrypt_cmd_handler+0x84>)
1000ff76:	9905      	ldr	r1, [sp, #20]
1000ff78:	7023      	strb	r3, [r4, #0]
1000ff7a:	3b08      	subs	r3, #8
1000ff7c:	7063      	strb	r3, [r4, #1]
1000ff7e:	70a3      	strb	r3, [r4, #2]
1000ff80:	4b13      	ldr	r3, [pc, #76]	; (1000ffd0 <gapc_encrypt_cmd_handler+0x88>)
1000ff82:	70e6      	strb	r6, [r4, #3]
1000ff84:	881a      	ldrh	r2, [r3, #0]
1000ff86:	881b      	ldrh	r3, [r3, #0]
1000ff88:	7122      	strb	r2, [r4, #4]
1000ff8a:	0a1b      	lsrs	r3, r3, #8
1000ff8c:	7163      	strb	r3, [r4, #5]
1000ff8e:	230b      	movs	r3, #11
1000ff90:	4e10      	ldr	r6, [pc, #64]	; (1000ffd4 <gapc_encrypt_cmd_handler+0x8c>)
1000ff92:	2210      	movs	r2, #16
1000ff94:	4810      	ldr	r0, [pc, #64]	; (1000ffd8 <gapc_encrypt_cmd_handler+0x90>)
1000ff96:	7223      	strb	r3, [r4, #8]
1000ff98:	7265      	strb	r5, [r4, #9]
1000ff9a:	47b0      	blx	r6
1000ff9c:	0a3b      	lsrs	r3, r7, #8
1000ff9e:	9906      	ldr	r1, [sp, #24]
1000ffa0:	2208      	movs	r2, #8
1000ffa2:	480e      	ldr	r0, [pc, #56]	; (1000ffdc <gapc_encrypt_cmd_handler+0x94>)
1000ffa4:	76e3      	strb	r3, [r4, #27]
1000ffa6:	76a7      	strb	r7, [r4, #26]
1000ffa8:	47b0      	blx	r6
1000ffaa:	466a      	mov	r2, sp
1000ffac:	7f12      	ldrb	r2, [r2, #28]
1000ffae:	1d63      	adds	r3, r4, #5
1000ffb0:	77da      	strb	r2, [r3, #31]
1000ffb2:	231d      	movs	r3, #29
1000ffb4:	1c20      	adds	r0, r4, #0
1000ffb6:	71a3      	strb	r3, [r4, #6]
1000ffb8:	2125      	movs	r1, #37	; 0x25
1000ffba:	4b09      	ldr	r3, [pc, #36]	; (1000ffe0 <gapc_encrypt_cmd_handler+0x98>)
1000ffbc:	71e5      	strb	r5, [r4, #7]
1000ffbe:	4798      	blx	r3
1000ffc0:	b009      	add	sp, #36	; 0x24
1000ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ffc4:	1001aa9c 	.word	0x1001aa9c
1000ffc8:	1000fa01 	.word	0x1000fa01
1000ffcc:	1001bd70 	.word	0x1001bd70
1000ffd0:	1001ba00 	.word	0x1001ba00
1000ffd4:	100122ab 	.word	0x100122ab
1000ffd8:	1001bd7a 	.word	0x1001bd7a
1000ffdc:	1001bd8c 	.word	0x1001bd8c
1000ffe0:	1000f6fd 	.word	0x1000f6fd

1000ffe4 <gapc_encrypt_req_ind>:
1000ffe4:	b508      	push	{r3, lr}
1000ffe6:	0a00      	lsrs	r0, r0, #8
1000ffe8:	8010      	strh	r0, [r2, #0]
1000ffea:	784b      	ldrb	r3, [r1, #1]
1000ffec:	7808      	ldrb	r0, [r1, #0]
1000ffee:	021b      	lsls	r3, r3, #8
1000fff0:	4303      	orrs	r3, r0
1000fff2:	8053      	strh	r3, [r2, #2]
1000fff4:	1d10      	adds	r0, r2, #4
1000fff6:	3102      	adds	r1, #2
1000fff8:	2208      	movs	r2, #8
1000fffa:	4b01      	ldr	r3, [pc, #4]	; (10010000 <gapc_encrypt_req_ind+0x1c>)
1000fffc:	4798      	blx	r3
1000fffe:	bd08      	pop	{r3, pc}
10010000:	100122ab 	.word	0x100122ab

10010004 <gapc_encrypt_cfm_handler>:
10010004:	b5f0      	push	{r4, r5, r6, r7, lr}
10010006:	2500      	movs	r5, #0
10010008:	b087      	sub	sp, #28
1001000a:	9304      	str	r3, [sp, #16]
1001000c:	ab0c      	add	r3, sp, #48	; 0x30
1001000e:	781b      	ldrb	r3, [r3, #0]
10010010:	1c17      	adds	r7, r2, #0
10010012:	4a15      	ldr	r2, [pc, #84]	; (10010068 <gapc_encrypt_cfm_handler+0x64>)
10010014:	1c06      	adds	r6, r0, #0
10010016:	9305      	str	r3, [sp, #20]
10010018:	9100      	str	r1, [sp, #0]
1001001a:	9002      	str	r0, [sp, #8]
1001001c:	1c29      	adds	r1, r5, #0
1001001e:	1c2b      	adds	r3, r5, #0
10010020:	9501      	str	r5, [sp, #4]
10010022:	1c10      	adds	r0, r2, #0
10010024:	4c11      	ldr	r4, [pc, #68]	; (1001006c <gapc_encrypt_cfm_handler+0x68>)
10010026:	47a0      	blx	r4
10010028:	2318      	movs	r3, #24
1001002a:	4c11      	ldr	r4, [pc, #68]	; (10010070 <gapc_encrypt_cfm_handler+0x6c>)
1001002c:	9904      	ldr	r1, [sp, #16]
1001002e:	7023      	strb	r3, [r4, #0]
10010030:	3b0a      	subs	r3, #10
10010032:	7063      	strb	r3, [r4, #1]
10010034:	70a3      	strb	r3, [r4, #2]
10010036:	4b0f      	ldr	r3, [pc, #60]	; (10010074 <gapc_encrypt_cfm_handler+0x70>)
10010038:	480f      	ldr	r0, [pc, #60]	; (10010078 <gapc_encrypt_cfm_handler+0x74>)
1001003a:	881a      	ldrh	r2, [r3, #0]
1001003c:	881b      	ldrh	r3, [r3, #0]
1001003e:	7122      	strb	r2, [r4, #4]
10010040:	0a1b      	lsrs	r3, r3, #8
10010042:	7163      	strb	r3, [r4, #5]
10010044:	2210      	movs	r2, #16
10010046:	4b0d      	ldr	r3, [pc, #52]	; (1001007c <gapc_encrypt_cfm_handler+0x78>)
10010048:	70e6      	strb	r6, [r4, #3]
1001004a:	7227      	strb	r7, [r4, #8]
1001004c:	4798      	blx	r3
1001004e:	466b      	mov	r3, sp
10010050:	7d1b      	ldrb	r3, [r3, #20]
10010052:	1c20      	adds	r0, r4, #0
10010054:	7663      	strb	r3, [r4, #25]
10010056:	2312      	movs	r3, #18
10010058:	211a      	movs	r1, #26
1001005a:	71a3      	strb	r3, [r4, #6]
1001005c:	4b08      	ldr	r3, [pc, #32]	; (10010080 <gapc_encrypt_cfm_handler+0x7c>)
1001005e:	71e5      	strb	r5, [r4, #7]
10010060:	4798      	blx	r3
10010062:	b007      	add	sp, #28
10010064:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010066:	46c0      	nop			; (mov r8, r8)
10010068:	1001aaac 	.word	0x1001aaac
1001006c:	1000fa01 	.word	0x1000fa01
10010070:	1001bd70 	.word	0x1001bd70
10010074:	1001ba00 	.word	0x1001ba00
10010078:	1001bd79 	.word	0x1001bd79
1001007c:	100122ab 	.word	0x100122ab
10010080:	1000f6fd 	.word	0x1000f6fd

10010084 <gapc_encrypt_ind>:
10010084:	780b      	ldrb	r3, [r1, #0]
10010086:	0a00      	lsrs	r0, r0, #8
10010088:	70d3      	strb	r3, [r2, #3]
1001008a:	2300      	movs	r3, #0
1001008c:	8010      	strh	r0, [r2, #0]
1001008e:	7093      	strb	r3, [r2, #2]
10010090:	4770      	bx	lr
	...

10010094 <gapc_param_update_cfm_handler>:
10010094:	b538      	push	{r3, r4, r5, lr}
10010096:	2410      	movs	r4, #16
10010098:	1c05      	adds	r5, r0, #0
1001009a:	480e      	ldr	r0, [pc, #56]	; (100100d4 <gapc_param_update_cfm_handler+0x40>)
1001009c:	7004      	strb	r4, [r0, #0]
1001009e:	3c02      	subs	r4, #2
100100a0:	7044      	strb	r4, [r0, #1]
100100a2:	7084      	strb	r4, [r0, #2]
100100a4:	4c0c      	ldr	r4, [pc, #48]	; (100100d8 <gapc_param_update_cfm_handler+0x44>)
100100a6:	70c5      	strb	r5, [r0, #3]
100100a8:	8825      	ldrh	r5, [r4, #0]
100100aa:	8824      	ldrh	r4, [r4, #0]
100100ac:	72c3      	strb	r3, [r0, #11]
100100ae:	0a1b      	lsrs	r3, r3, #8
100100b0:	0a24      	lsrs	r4, r4, #8
100100b2:	7303      	strb	r3, [r0, #12]
100100b4:	2305      	movs	r3, #5
100100b6:	7144      	strb	r4, [r0, #5]
100100b8:	2400      	movs	r4, #0
100100ba:	7201      	strb	r1, [r0, #8]
100100bc:	7242      	strb	r2, [r0, #9]
100100be:	7183      	strb	r3, [r0, #6]
100100c0:	0a12      	lsrs	r2, r2, #8
100100c2:	210d      	movs	r1, #13
100100c4:	4b05      	ldr	r3, [pc, #20]	; (100100dc <gapc_param_update_cfm_handler+0x48>)
100100c6:	7105      	strb	r5, [r0, #4]
100100c8:	7282      	strb	r2, [r0, #10]
100100ca:	71c4      	strb	r4, [r0, #7]
100100cc:	4798      	blx	r3
100100ce:	1c20      	adds	r0, r4, #0
100100d0:	bd38      	pop	{r3, r4, r5, pc}
100100d2:	46c0      	nop			; (mov r8, r8)
100100d4:	1001bd70 	.word	0x1001bd70
100100d8:	1001ba00 	.word	0x1001ba00
100100dc:	1000f6fd 	.word	0x1000f6fd

100100e0 <gapc_param_updated_ind>:
100100e0:	2300      	movs	r3, #0
100100e2:	0a00      	lsrs	r0, r0, #8
100100e4:	8010      	strh	r0, [r2, #0]
100100e6:	7093      	strb	r3, [r2, #2]
100100e8:	784b      	ldrb	r3, [r1, #1]
100100ea:	7808      	ldrb	r0, [r1, #0]
100100ec:	021b      	lsls	r3, r3, #8
100100ee:	4303      	orrs	r3, r0
100100f0:	8093      	strh	r3, [r2, #4]
100100f2:	78cb      	ldrb	r3, [r1, #3]
100100f4:	7888      	ldrb	r0, [r1, #2]
100100f6:	021b      	lsls	r3, r3, #8
100100f8:	4303      	orrs	r3, r0
100100fa:	80d3      	strh	r3, [r2, #6]
100100fc:	794b      	ldrb	r3, [r1, #5]
100100fe:	7909      	ldrb	r1, [r1, #4]
10010100:	021b      	lsls	r3, r3, #8
10010102:	430b      	orrs	r3, r1
10010104:	2007      	movs	r0, #7
10010106:	8113      	strh	r3, [r2, #8]
10010108:	4770      	bx	lr

1001010a <gapc_param_updated_req_ind>:
1001010a:	0a00      	lsrs	r0, r0, #8
1001010c:	8010      	strh	r0, [r2, #0]
1001010e:	784b      	ldrb	r3, [r1, #1]
10010110:	7808      	ldrb	r0, [r1, #0]
10010112:	021b      	lsls	r3, r3, #8
10010114:	4303      	orrs	r3, r0
10010116:	8053      	strh	r3, [r2, #2]
10010118:	78cb      	ldrb	r3, [r1, #3]
1001011a:	7888      	ldrb	r0, [r1, #2]
1001011c:	021b      	lsls	r3, r3, #8
1001011e:	4303      	orrs	r3, r0
10010120:	8093      	strh	r3, [r2, #4]
10010122:	794b      	ldrb	r3, [r1, #5]
10010124:	7908      	ldrb	r0, [r1, #4]
10010126:	021b      	lsls	r3, r3, #8
10010128:	4303      	orrs	r3, r0
1001012a:	80d3      	strh	r3, [r2, #6]
1001012c:	79cb      	ldrb	r3, [r1, #7]
1001012e:	7989      	ldrb	r1, [r1, #6]
10010130:	021b      	lsls	r3, r3, #8
10010132:	430b      	orrs	r3, r1
10010134:	2008      	movs	r0, #8
10010136:	8113      	strh	r3, [r2, #8]
10010138:	4770      	bx	lr
	...

1001013c <gapc_dev_info_req_ind_handler>:
1001013c:	b508      	push	{r3, lr}
1001013e:	1c0b      	adds	r3, r1, #0
10010140:	0a01      	lsrs	r1, r0, #8
10010142:	8011      	strh	r1, [r2, #0]
10010144:	7818      	ldrb	r0, [r3, #0]
10010146:	7090      	strb	r0, [r2, #2]
10010148:	2800      	cmp	r0, #0
1001014a:	d104      	bne.n	10010156 <gapc_dev_info_req_ind_handler+0x1a>
1001014c:	4b03      	ldr	r3, [pc, #12]	; (1001015c <gapc_dev_info_req_ind_handler+0x20>)
1001014e:	33aa      	adds	r3, #170	; 0xaa
10010150:	881b      	ldrh	r3, [r3, #0]
10010152:	2b00      	cmp	r3, #0
10010154:	d001      	beq.n	1001015a <gapc_dev_info_req_ind_handler+0x1e>
10010156:	4b02      	ldr	r3, [pc, #8]	; (10010160 <gapc_dev_info_req_ind_handler+0x24>)
10010158:	4798      	blx	r3
1001015a:	bd08      	pop	{r3, pc}
1001015c:	1001ba92 	.word	0x1001ba92
10010160:	1000f80d 	.word	0x1000f80d

10010164 <gapc_sec_req_ind>:
10010164:	0a00      	lsrs	r0, r0, #8
10010166:	8010      	strh	r0, [r2, #0]
10010168:	7809      	ldrb	r1, [r1, #0]
1001016a:	2301      	movs	r3, #1
1001016c:	1c08      	adds	r0, r1, #0
1001016e:	0889      	lsrs	r1, r1, #2
10010170:	4018      	ands	r0, r3
10010172:	400b      	ands	r3, r1
10010174:	70d0      	strb	r0, [r2, #3]
10010176:	7113      	strb	r3, [r2, #4]
10010178:	4770      	bx	lr

1001017a <gapc_sign_counter_ind_handler>:
1001017a:	0a00      	lsrs	r0, r0, #8
1001017c:	8010      	strh	r0, [r2, #0]
1001017e:	784b      	ldrb	r3, [r1, #1]
10010180:	0218      	lsls	r0, r3, #8
10010182:	788b      	ldrb	r3, [r1, #2]
10010184:	041b      	lsls	r3, r3, #16
10010186:	4303      	orrs	r3, r0
10010188:	7808      	ldrb	r0, [r1, #0]
1001018a:	4303      	orrs	r3, r0
1001018c:	78c8      	ldrb	r0, [r1, #3]
1001018e:	0600      	lsls	r0, r0, #24
10010190:	4303      	orrs	r3, r0
10010192:	6053      	str	r3, [r2, #4]
10010194:	794b      	ldrb	r3, [r1, #5]
10010196:	0218      	lsls	r0, r3, #8
10010198:	798b      	ldrb	r3, [r1, #6]
1001019a:	041b      	lsls	r3, r3, #16
1001019c:	4303      	orrs	r3, r0
1001019e:	7908      	ldrb	r0, [r1, #4]
100101a0:	79c9      	ldrb	r1, [r1, #7]
100101a2:	4303      	orrs	r3, r0
100101a4:	0609      	lsls	r1, r1, #24
100101a6:	430b      	orrs	r3, r1
100101a8:	2000      	movs	r0, #0
100101aa:	6093      	str	r3, [r2, #8]
100101ac:	4770      	bx	lr
	...

100101b0 <gapc_peer_att_info_ind_handler>:
100101b0:	b510      	push	{r4, lr}
100101b2:	0a00      	lsrs	r0, r0, #8
100101b4:	8010      	strh	r0, [r2, #0]
100101b6:	7808      	ldrb	r0, [r1, #0]
100101b8:	7090      	strb	r0, [r2, #2]
100101ba:	788b      	ldrb	r3, [r1, #2]
100101bc:	784c      	ldrb	r4, [r1, #1]
100101be:	021b      	lsls	r3, r3, #8
100101c0:	4323      	orrs	r3, r4
100101c2:	8093      	strh	r3, [r2, #4]
100101c4:	2801      	cmp	r0, #1
100101c6:	d027      	beq.n	10010218 <gapc_peer_att_info_ind_handler+0x68>
100101c8:	2800      	cmp	r0, #0
100101ca:	d017      	beq.n	100101fc <gapc_peer_att_info_ind_handler+0x4c>
100101cc:	2802      	cmp	r0, #2
100101ce:	d12a      	bne.n	10010226 <gapc_peer_att_info_ind_handler+0x76>
100101d0:	790b      	ldrb	r3, [r1, #4]
100101d2:	78c8      	ldrb	r0, [r1, #3]
100101d4:	021b      	lsls	r3, r3, #8
100101d6:	4303      	orrs	r3, r0
100101d8:	8113      	strh	r3, [r2, #8]
100101da:	798b      	ldrb	r3, [r1, #6]
100101dc:	7948      	ldrb	r0, [r1, #5]
100101de:	021b      	lsls	r3, r3, #8
100101e0:	4303      	orrs	r3, r0
100101e2:	80d3      	strh	r3, [r2, #6]
100101e4:	7a0b      	ldrb	r3, [r1, #8]
100101e6:	79c8      	ldrb	r0, [r1, #7]
100101e8:	021b      	lsls	r3, r3, #8
100101ea:	4303      	orrs	r3, r0
100101ec:	8193      	strh	r3, [r2, #12]
100101ee:	7a8b      	ldrb	r3, [r1, #10]
100101f0:	7a49      	ldrb	r1, [r1, #9]
100101f2:	021b      	lsls	r3, r3, #8
100101f4:	430b      	orrs	r3, r1
100101f6:	8153      	strh	r3, [r2, #10]
100101f8:	2306      	movs	r3, #6
100101fa:	e013      	b.n	10010224 <gapc_peer_att_info_ind_handler+0x74>
100101fc:	1c14      	adds	r4, r2, #0
100101fe:	1c20      	adds	r0, r4, #0
10010200:	790a      	ldrb	r2, [r1, #4]
10010202:	78cb      	ldrb	r3, [r1, #3]
10010204:	0212      	lsls	r2, r2, #8
10010206:	431a      	orrs	r2, r3
10010208:	80e2      	strh	r2, [r4, #6]
1001020a:	4b07      	ldr	r3, [pc, #28]	; (10010228 <gapc_peer_att_info_ind_handler+0x78>)
1001020c:	3008      	adds	r0, #8
1001020e:	3105      	adds	r1, #5
10010210:	4798      	blx	r3
10010212:	2302      	movs	r3, #2
10010214:	70a3      	strb	r3, [r4, #2]
10010216:	e006      	b.n	10010226 <gapc_peer_att_info_ind_handler+0x76>
10010218:	790b      	ldrb	r3, [r1, #4]
1001021a:	78c9      	ldrb	r1, [r1, #3]
1001021c:	021b      	lsls	r3, r3, #8
1001021e:	430b      	orrs	r3, r1
10010220:	80d3      	strh	r3, [r2, #6]
10010222:	2305      	movs	r3, #5
10010224:	7093      	strb	r3, [r2, #2]
10010226:	bd10      	pop	{r4, pc}
10010228:	100122ab 	.word	0x100122ab

1001022c <gapc_con_channel_map_ind_handler>:
1001022c:	b508      	push	{r3, lr}
1001022e:	2300      	movs	r3, #0
10010230:	0a00      	lsrs	r0, r0, #8
10010232:	7013      	strb	r3, [r2, #0]
10010234:	8050      	strh	r0, [r2, #2]
10010236:	4b02      	ldr	r3, [pc, #8]	; (10010240 <gapc_con_channel_map_ind_handler+0x14>)
10010238:	1d10      	adds	r0, r2, #4
1001023a:	2205      	movs	r2, #5
1001023c:	4798      	blx	r3
1001023e:	bd08      	pop	{r3, pc}
10010240:	100122ab 	.word	0x100122ab

10010244 <gapc_lecb_connected>:
10010244:	7843      	ldrb	r3, [r0, #1]
10010246:	7802      	ldrb	r2, [r0, #0]
10010248:	021b      	lsls	r3, r3, #8
1001024a:	4313      	orrs	r3, r2
1001024c:	800b      	strh	r3, [r1, #0]
1001024e:	78c3      	ldrb	r3, [r0, #3]
10010250:	7882      	ldrb	r2, [r0, #2]
10010252:	021b      	lsls	r3, r3, #8
10010254:	4313      	orrs	r3, r2
10010256:	804b      	strh	r3, [r1, #2]
10010258:	7943      	ldrb	r3, [r0, #5]
1001025a:	7902      	ldrb	r2, [r0, #4]
1001025c:	021b      	lsls	r3, r3, #8
1001025e:	4313      	orrs	r3, r2
10010260:	808b      	strh	r3, [r1, #4]
10010262:	79c3      	ldrb	r3, [r0, #7]
10010264:	7982      	ldrb	r2, [r0, #6]
10010266:	021b      	lsls	r3, r3, #8
10010268:	4313      	orrs	r3, r2
1001026a:	80cb      	strh	r3, [r1, #6]
1001026c:	2300      	movs	r3, #0
1001026e:	720b      	strb	r3, [r1, #8]
10010270:	4770      	bx	lr

10010272 <gapc_lecb_disconnected>:
10010272:	7843      	ldrb	r3, [r0, #1]
10010274:	7802      	ldrb	r2, [r0, #0]
10010276:	021b      	lsls	r3, r3, #8
10010278:	4313      	orrs	r3, r2
1001027a:	800b      	strh	r3, [r1, #0]
1001027c:	78c3      	ldrb	r3, [r0, #3]
1001027e:	7882      	ldrb	r2, [r0, #2]
10010280:	021b      	lsls	r3, r3, #8
10010282:	4313      	orrs	r3, r2
10010284:	804b      	strh	r3, [r1, #2]
10010286:	4770      	bx	lr

10010288 <gapc_lecb_connect_req_ind>:
10010288:	7843      	ldrb	r3, [r0, #1]
1001028a:	7802      	ldrb	r2, [r0, #0]
1001028c:	021b      	lsls	r3, r3, #8
1001028e:	4313      	orrs	r3, r2
10010290:	800b      	strh	r3, [r1, #0]
10010292:	78c3      	ldrb	r3, [r0, #3]
10010294:	7882      	ldrb	r2, [r0, #2]
10010296:	021b      	lsls	r3, r3, #8
10010298:	4313      	orrs	r3, r2
1001029a:	804b      	strh	r3, [r1, #2]
1001029c:	7943      	ldrb	r3, [r0, #5]
1001029e:	7902      	ldrb	r2, [r0, #4]
100102a0:	021b      	lsls	r3, r3, #8
100102a2:	4313      	orrs	r3, r2
100102a4:	808b      	strh	r3, [r1, #4]
100102a6:	79c3      	ldrb	r3, [r0, #7]
100102a8:	7982      	ldrb	r2, [r0, #6]
100102aa:	021b      	lsls	r3, r3, #8
100102ac:	4313      	orrs	r3, r2
100102ae:	80cb      	strh	r3, [r1, #6]
100102b0:	4770      	bx	lr

100102b2 <gapc_lecb_add_credit_resp_handler>:
100102b2:	7843      	ldrb	r3, [r0, #1]
100102b4:	7802      	ldrb	r2, [r0, #0]
100102b6:	021b      	lsls	r3, r3, #8
100102b8:	4313      	orrs	r3, r2
100102ba:	800b      	strh	r3, [r1, #0]
100102bc:	78c3      	ldrb	r3, [r0, #3]
100102be:	7882      	ldrb	r2, [r0, #2]
100102c0:	021b      	lsls	r3, r3, #8
100102c2:	4313      	orrs	r3, r2
100102c4:	804b      	strh	r3, [r1, #2]
100102c6:	7943      	ldrb	r3, [r0, #5]
100102c8:	7902      	ldrb	r2, [r0, #4]
100102ca:	021b      	lsls	r3, r3, #8
100102cc:	4313      	orrs	r3, r2
100102ce:	808b      	strh	r3, [r1, #4]
100102d0:	4770      	bx	lr
	...

100102d4 <gapm_reset_req_handler>:
100102d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100102d6:	466b      	mov	r3, sp
100102d8:	4915      	ldr	r1, [pc, #84]	; (10010330 <gapm_reset_req_handler+0x5c>)
100102da:	4816      	ldr	r0, [pc, #88]	; (10010334 <gapm_reset_req_handler+0x60>)
100102dc:	880c      	ldrh	r4, [r1, #0]
100102de:	8809      	ldrh	r1, [r1, #0]
100102e0:	1ddd      	adds	r5, r3, #7
100102e2:	0a09      	lsrs	r1, r1, #8
100102e4:	2300      	movs	r3, #0
100102e6:	2202      	movs	r2, #2
100102e8:	7141      	strb	r1, [r0, #5]
100102ea:	26d0      	movs	r6, #208	; 0xd0
100102ec:	2101      	movs	r1, #1
100102ee:	7104      	strb	r4, [r0, #4]
100102f0:	4c11      	ldr	r4, [pc, #68]	; (10010338 <gapm_reset_req_handler+0x64>)
100102f2:	702b      	strb	r3, [r5, #0]
100102f4:	7002      	strb	r2, [r0, #0]
100102f6:	70c3      	strb	r3, [r0, #3]
100102f8:	320b      	adds	r2, #11
100102fa:	7201      	strb	r1, [r0, #8]
100102fc:	7181      	strb	r1, [r0, #6]
100102fe:	71c3      	strb	r3, [r0, #7]
10010300:	3108      	adds	r1, #8
10010302:	4b0e      	ldr	r3, [pc, #56]	; (1001033c <gapm_reset_req_handler+0x68>)
10010304:	0136      	lsls	r6, r6, #4
10010306:	7042      	strb	r2, [r0, #1]
10010308:	7082      	strb	r2, [r0, #2]
1001030a:	80a2      	strh	r2, [r4, #4]
1001030c:	8026      	strh	r6, [r4, #0]
1001030e:	4798      	blx	r3
10010310:	1c28      	adds	r0, r5, #0
10010312:	4b0b      	ldr	r3, [pc, #44]	; (10010340 <gapm_reset_req_handler+0x6c>)
10010314:	4798      	blx	r3
10010316:	782b      	ldrb	r3, [r5, #0]
10010318:	20e2      	movs	r0, #226	; 0xe2
1001031a:	2b00      	cmp	r3, #0
1001031c:	d106      	bne.n	1001032c <gapm_reset_req_handler+0x58>
1001031e:	68a3      	ldr	r3, [r4, #8]
10010320:	20e2      	movs	r0, #226	; 0xe2
10010322:	781a      	ldrb	r2, [r3, #0]
10010324:	785b      	ldrb	r3, [r3, #1]
10010326:	2a01      	cmp	r2, #1
10010328:	d100      	bne.n	1001032c <gapm_reset_req_handler+0x58>
1001032a:	1c18      	adds	r0, r3, #0
1001032c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001032e:	46c0      	nop			; (mov r8, r8)
10010330:	1001ba00 	.word	0x1001ba00
10010334:	1001bd70 	.word	0x1001bd70
10010338:	1001b9f4 	.word	0x1001b9f4
1001033c:	1000f6fd 	.word	0x1000f6fd
10010340:	1000f761 	.word	0x1000f761

10010344 <gapm_set_dev_config_cmd_handler>:
10010344:	b5f0      	push	{r4, r5, r6, r7, lr}
10010346:	b089      	sub	sp, #36	; 0x24
10010348:	9303      	str	r3, [sp, #12]
1001034a:	ab0e      	add	r3, sp, #56	; 0x38
1001034c:	781b      	ldrb	r3, [r3, #0]
1001034e:	4c37      	ldr	r4, [pc, #220]	; (1001042c <gapm_set_dev_config_cmd_handler+0xe8>)
10010350:	9304      	str	r3, [sp, #16]
10010352:	ab0f      	add	r3, sp, #60	; 0x3c
10010354:	781b      	ldrb	r3, [r3, #0]
10010356:	270d      	movs	r7, #13
10010358:	9305      	str	r3, [sp, #20]
1001035a:	ab10      	add	r3, sp, #64	; 0x40
1001035c:	881b      	ldrh	r3, [r3, #0]
1001035e:	72a1      	strb	r1, [r4, #10]
10010360:	9300      	str	r3, [sp, #0]
10010362:	ab11      	add	r3, sp, #68	; 0x44
10010364:	881b      	ldrh	r3, [r3, #0]
10010366:	0a09      	lsrs	r1, r1, #8
10010368:	9301      	str	r3, [sp, #4]
1001036a:	ab12      	add	r3, sp, #72	; 0x48
1001036c:	881b      	ldrh	r3, [r3, #0]
1001036e:	7260      	strb	r0, [r4, #9]
10010370:	9302      	str	r3, [sp, #8]
10010372:	ab06      	add	r3, sp, #24
10010374:	1dde      	adds	r6, r3, #7
10010376:	2300      	movs	r3, #0
10010378:	7033      	strb	r3, [r6, #0]
1001037a:	2304      	movs	r3, #4
1001037c:	7023      	strb	r3, [r4, #0]
1001037e:	2300      	movs	r3, #0
10010380:	70e3      	strb	r3, [r4, #3]
10010382:	4b2b      	ldr	r3, [pc, #172]	; (10010430 <gapm_set_dev_config_cmd_handler+0xec>)
10010384:	72e1      	strb	r1, [r4, #11]
10010386:	881d      	ldrh	r5, [r3, #0]
10010388:	881b      	ldrh	r3, [r3, #0]
1001038a:	1c11      	adds	r1, r2, #0
1001038c:	0a1b      	lsrs	r3, r3, #8
1001038e:	7163      	strb	r3, [r4, #5]
10010390:	2303      	movs	r3, #3
10010392:	7125      	strb	r5, [r4, #4]
10010394:	2206      	movs	r2, #6
10010396:	4d27      	ldr	r5, [pc, #156]	; (10010434 <gapm_set_dev_config_cmd_handler+0xf0>)
10010398:	4827      	ldr	r0, [pc, #156]	; (10010438 <gapm_set_dev_config_cmd_handler+0xf4>)
1001039a:	7223      	strb	r3, [r4, #8]
1001039c:	7067      	strb	r7, [r4, #1]
1001039e:	70a7      	strb	r7, [r4, #2]
100103a0:	47a8      	blx	r5
100103a2:	9903      	ldr	r1, [sp, #12]
100103a4:	2210      	movs	r2, #16
100103a6:	4825      	ldr	r0, [pc, #148]	; (1001043c <gapm_set_dev_config_cmd_handler+0xf8>)
100103a8:	47a8      	blx	r5
100103aa:	466a      	mov	r2, sp
100103ac:	7c12      	ldrb	r2, [r2, #16]
100103ae:	1ce3      	adds	r3, r4, #3
100103b0:	77da      	strb	r2, [r3, #31]
100103b2:	466a      	mov	r2, sp
100103b4:	7d12      	ldrb	r2, [r2, #20]
100103b6:	1d23      	adds	r3, r4, #4
100103b8:	77da      	strb	r2, [r3, #31]
100103ba:	466a      	mov	r2, sp
100103bc:	7812      	ldrb	r2, [r2, #0]
100103be:	1d63      	adds	r3, r4, #5
100103c0:	77da      	strb	r2, [r3, #31]
100103c2:	9b00      	ldr	r3, [sp, #0]
100103c4:	1da2      	adds	r2, r4, #6
100103c6:	0a1b      	lsrs	r3, r3, #8
100103c8:	77d3      	strb	r3, [r2, #31]
100103ca:	466a      	mov	r2, sp
100103cc:	7912      	ldrb	r2, [r2, #4]
100103ce:	1de3      	adds	r3, r4, #7
100103d0:	77da      	strb	r2, [r3, #31]
100103d2:	1c22      	adds	r2, r4, #0
100103d4:	9b01      	ldr	r3, [sp, #4]
100103d6:	3208      	adds	r2, #8
100103d8:	0a1b      	lsrs	r3, r3, #8
100103da:	77d3      	strb	r3, [r2, #31]
100103dc:	466a      	mov	r2, sp
100103de:	1c23      	adds	r3, r4, #0
100103e0:	7a12      	ldrb	r2, [r2, #8]
100103e2:	3328      	adds	r3, #40	; 0x28
100103e4:	701a      	strb	r2, [r3, #0]
100103e6:	1c22      	adds	r2, r4, #0
100103e8:	9b02      	ldr	r3, [sp, #8]
100103ea:	3229      	adds	r2, #41	; 0x29
100103ec:	0a1b      	lsrs	r3, r3, #8
100103ee:	7013      	strb	r3, [r2, #0]
100103f0:	23d0      	movs	r3, #208	; 0xd0
100103f2:	4d13      	ldr	r5, [pc, #76]	; (10010440 <gapm_set_dev_config_cmd_handler+0xfc>)
100103f4:	011b      	lsls	r3, r3, #4
100103f6:	802b      	strh	r3, [r5, #0]
100103f8:	2322      	movs	r3, #34	; 0x22
100103fa:	71a3      	strb	r3, [r4, #6]
100103fc:	2300      	movs	r3, #0
100103fe:	212a      	movs	r1, #42	; 0x2a
10010400:	71e3      	strb	r3, [r4, #7]
10010402:	1c20      	adds	r0, r4, #0
10010404:	4b0f      	ldr	r3, [pc, #60]	; (10010444 <gapm_set_dev_config_cmd_handler+0x100>)
10010406:	80af      	strh	r7, [r5, #4]
10010408:	4798      	blx	r3
1001040a:	1c30      	adds	r0, r6, #0
1001040c:	4b0e      	ldr	r3, [pc, #56]	; (10010448 <gapm_set_dev_config_cmd_handler+0x104>)
1001040e:	4798      	blx	r3
10010410:	7833      	ldrb	r3, [r6, #0]
10010412:	20e2      	movs	r0, #226	; 0xe2
10010414:	2b00      	cmp	r3, #0
10010416:	d106      	bne.n	10010426 <gapm_set_dev_config_cmd_handler+0xe2>
10010418:	68ab      	ldr	r3, [r5, #8]
1001041a:	20e2      	movs	r0, #226	; 0xe2
1001041c:	781a      	ldrb	r2, [r3, #0]
1001041e:	785b      	ldrb	r3, [r3, #1]
10010420:	2a03      	cmp	r2, #3
10010422:	d100      	bne.n	10010426 <gapm_set_dev_config_cmd_handler+0xe2>
10010424:	1c18      	adds	r0, r3, #0
10010426:	b009      	add	sp, #36	; 0x24
10010428:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001042a:	46c0      	nop			; (mov r8, r8)
1001042c:	1001bd70 	.word	0x1001bd70
10010430:	1001ba00 	.word	0x1001ba00
10010434:	100122ab 	.word	0x100122ab
10010438:	1001bd7c 	.word	0x1001bd7c
1001043c:	1001bd82 	.word	0x1001bd82
10010440:	1001b9f4 	.word	0x1001b9f4
10010444:	1000f6fd 	.word	0x1000f6fd
10010448:	1000f761 	.word	0x1000f761

1001044c <gapm_get_dev_config_cmd_handler>:
1001044c:	4684      	mov	ip, r0
1001044e:	4663      	mov	r3, ip
10010450:	b5f0      	push	{r4, r5, r6, r7, lr}
10010452:	b085      	sub	sp, #20
10010454:	9100      	str	r1, [sp, #0]
10010456:	20cf      	movs	r0, #207	; 0xcf
10010458:	2b01      	cmp	r3, #1
1001045a:	d854      	bhi.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
1001045c:	2900      	cmp	r1, #0
1001045e:	d052      	beq.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
10010460:	2200      	movs	r2, #0
10010462:	492a      	ldr	r1, [pc, #168]	; (1001050c <gapm_get_dev_config_cmd_handler+0xc0>)
10010464:	ab02      	add	r3, sp, #8
10010466:	880c      	ldrh	r4, [r1, #0]
10010468:	8809      	ldrh	r1, [r1, #0]
1001046a:	1d9f      	adds	r7, r3, #6
1001046c:	719a      	strb	r2, [r3, #6]
1001046e:	4b28      	ldr	r3, [pc, #160]	; (10010510 <gapm_get_dev_config_cmd_handler+0xc4>)
10010470:	0a09      	lsrs	r1, r1, #8
10010472:	250d      	movs	r5, #13
10010474:	2606      	movs	r6, #6
10010476:	7159      	strb	r1, [r3, #5]
10010478:	4661      	mov	r1, ip
1001047a:	701e      	strb	r6, [r3, #0]
1001047c:	705d      	strb	r5, [r3, #1]
1001047e:	709d      	strb	r5, [r3, #2]
10010480:	70da      	strb	r2, [r3, #3]
10010482:	711c      	strb	r4, [r3, #4]
10010484:	2901      	cmp	r1, #1
10010486:	d13e      	bne.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
10010488:	21d0      	movs	r1, #208	; 0xd0
1001048a:	4c22      	ldr	r4, [pc, #136]	; (10010514 <gapm_get_dev_config_cmd_handler+0xc8>)
1001048c:	0109      	lsls	r1, r1, #4
1001048e:	8061      	strh	r1, [r4, #2]
10010490:	4921      	ldr	r1, [pc, #132]	; (10010518 <gapm_get_dev_config_cmd_handler+0xcc>)
10010492:	71da      	strb	r2, [r3, #7]
10010494:	8021      	strh	r1, [r4, #0]
10010496:	4661      	mov	r1, ip
10010498:	721e      	strb	r6, [r3, #8]
1001049a:	7199      	strb	r1, [r3, #6]
1001049c:	1c18      	adds	r0, r3, #0
1001049e:	2109      	movs	r1, #9
100104a0:	4b1e      	ldr	r3, [pc, #120]	; (1001051c <gapm_get_dev_config_cmd_handler+0xd0>)
100104a2:	80a5      	strh	r5, [r4, #4]
100104a4:	4798      	blx	r3
100104a6:	1c38      	adds	r0, r7, #0
100104a8:	4b1d      	ldr	r3, [pc, #116]	; (10010520 <gapm_get_dev_config_cmd_handler+0xd4>)
100104aa:	4798      	blx	r3
100104ac:	783b      	ldrb	r3, [r7, #0]
100104ae:	20e2      	movs	r0, #226	; 0xe2
100104b0:	9301      	str	r3, [sp, #4]
100104b2:	2b00      	cmp	r3, #0
100104b4:	d127      	bne.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
100104b6:	8821      	ldrh	r1, [r4, #0]
100104b8:	4a1a      	ldr	r2, [pc, #104]	; (10010524 <gapm_get_dev_config_cmd_handler+0xd8>)
100104ba:	68a7      	ldr	r7, [r4, #8]
100104bc:	3b01      	subs	r3, #1
100104be:	4291      	cmp	r1, r2
100104c0:	d001      	beq.n	100104c6 <gapm_get_dev_config_cmd_handler+0x7a>
100104c2:	8023      	strh	r3, [r4, #0]
100104c4:	e01a      	b.n	100104fc <gapm_get_dev_config_cmd_handler+0xb0>
100104c6:	8063      	strh	r3, [r4, #2]
100104c8:	9b00      	ldr	r3, [sp, #0]
100104ca:	1c39      	adds	r1, r7, #0
100104cc:	1c58      	adds	r0, r3, #1
100104ce:	1c32      	adds	r2, r6, #0
100104d0:	4b15      	ldr	r3, [pc, #84]	; (10010528 <gapm_get_dev_config_cmd_handler+0xdc>)
100104d2:	4798      	blx	r3
100104d4:	79bb      	ldrb	r3, [r7, #6]
100104d6:	9a00      	ldr	r2, [sp, #0]
100104d8:	7013      	strb	r3, [r2, #0]
100104da:	23d0      	movs	r3, #208	; 0xd0
100104dc:	011b      	lsls	r3, r3, #4
100104de:	8023      	strh	r3, [r4, #0]
100104e0:	ab02      	add	r3, sp, #8
100104e2:	80a5      	strh	r5, [r4, #4]
100104e4:	1ddd      	adds	r5, r3, #7
100104e6:	466b      	mov	r3, sp
100104e8:	791b      	ldrb	r3, [r3, #4]
100104ea:	1c28      	adds	r0, r5, #0
100104ec:	702b      	strb	r3, [r5, #0]
100104ee:	4b0c      	ldr	r3, [pc, #48]	; (10010520 <gapm_get_dev_config_cmd_handler+0xd4>)
100104f0:	4798      	blx	r3
100104f2:	782b      	ldrb	r3, [r5, #0]
100104f4:	20d0      	movs	r0, #208	; 0xd0
100104f6:	2b00      	cmp	r3, #0
100104f8:	d105      	bne.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
100104fa:	68a7      	ldr	r7, [r4, #8]
100104fc:	783b      	ldrb	r3, [r7, #0]
100104fe:	7878      	ldrb	r0, [r7, #1]
10010500:	2b06      	cmp	r3, #6
10010502:	d000      	beq.n	10010506 <gapm_get_dev_config_cmd_handler+0xba>
10010504:	20e2      	movs	r0, #226	; 0xe2
10010506:	b005      	add	sp, #20
10010508:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001050a:	46c0      	nop			; (mov r8, r8)
1001050c:	1001ba00 	.word	0x1001ba00
10010510:	1001bd70 	.word	0x1001bd70
10010514:	1001b9f4 	.word	0x1001b9f4
10010518:	00000d08 	.word	0x00000d08
1001051c:	1000f6fd 	.word	0x1000f6fd
10010520:	1000f761 	.word	0x1000f761
10010524:	0000ffff 	.word	0x0000ffff
10010528:	100122ab 	.word	0x100122ab

1001052c <gapm_cancel_cmd_handler>:
1001052c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001052e:	4916      	ldr	r1, [pc, #88]	; (10010588 <gapm_cancel_cmd_handler+0x5c>)
10010530:	4816      	ldr	r0, [pc, #88]	; (1001058c <gapm_cancel_cmd_handler+0x60>)
10010532:	880c      	ldrh	r4, [r1, #0]
10010534:	8809      	ldrh	r1, [r1, #0]
10010536:	466b      	mov	r3, sp
10010538:	0a09      	lsrs	r1, r1, #8
1001053a:	7141      	strb	r1, [r0, #5]
1001053c:	2102      	movs	r1, #2
1001053e:	2203      	movs	r2, #3
10010540:	7201      	strb	r1, [r0, #8]
10010542:	21d0      	movs	r1, #208	; 0xd0
10010544:	1ddd      	adds	r5, r3, #7
10010546:	2300      	movs	r3, #0
10010548:	7104      	strb	r4, [r0, #4]
1001054a:	4c11      	ldr	r4, [pc, #68]	; (10010590 <gapm_cancel_cmd_handler+0x64>)
1001054c:	7002      	strb	r2, [r0, #0]
1001054e:	0109      	lsls	r1, r1, #4
10010550:	320a      	adds	r2, #10
10010552:	702b      	strb	r3, [r5, #0]
10010554:	7042      	strb	r2, [r0, #1]
10010556:	7082      	strb	r2, [r0, #2]
10010558:	70c3      	strb	r3, [r0, #3]
1001055a:	8021      	strh	r1, [r4, #0]
1001055c:	80a2      	strh	r2, [r4, #4]
1001055e:	71c3      	strb	r3, [r0, #7]
10010560:	3a0c      	subs	r2, #12
10010562:	2109      	movs	r1, #9
10010564:	4b0b      	ldr	r3, [pc, #44]	; (10010594 <gapm_cancel_cmd_handler+0x68>)
10010566:	7182      	strb	r2, [r0, #6]
10010568:	4798      	blx	r3
1001056a:	1c28      	adds	r0, r5, #0
1001056c:	4b0a      	ldr	r3, [pc, #40]	; (10010598 <gapm_cancel_cmd_handler+0x6c>)
1001056e:	4798      	blx	r3
10010570:	7828      	ldrb	r0, [r5, #0]
10010572:	2800      	cmp	r0, #0
10010574:	d001      	beq.n	1001057a <gapm_cancel_cmd_handler+0x4e>
10010576:	20e2      	movs	r0, #226	; 0xe2
10010578:	e004      	b.n	10010584 <gapm_cancel_cmd_handler+0x58>
1001057a:	68a3      	ldr	r3, [r4, #8]
1001057c:	785b      	ldrb	r3, [r3, #1]
1001057e:	2b44      	cmp	r3, #68	; 0x44
10010580:	d000      	beq.n	10010584 <gapm_cancel_cmd_handler+0x58>
10010582:	1c18      	adds	r0, r3, #0
10010584:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010586:	46c0      	nop			; (mov r8, r8)
10010588:	1001ba00 	.word	0x1001ba00
1001058c:	1001bd70 	.word	0x1001bd70
10010590:	1001b9f4 	.word	0x1001b9f4
10010594:	1000f6fd 	.word	0x1000f6fd
10010598:	1000f761 	.word	0x1000f761

1001059c <gapm_dev_bdaddr_ind_handler>:
1001059c:	b538      	push	{r3, r4, r5, lr}
1001059e:	1c05      	adds	r5, r0, #0
100105a0:	1c0c      	adds	r4, r1, #0
100105a2:	1c48      	adds	r0, r1, #1
100105a4:	2206      	movs	r2, #6
100105a6:	1c29      	adds	r1, r5, #0
100105a8:	4b02      	ldr	r3, [pc, #8]	; (100105b4 <gapm_dev_bdaddr_ind_handler+0x18>)
100105aa:	4798      	blx	r3
100105ac:	79ab      	ldrb	r3, [r5, #6]
100105ae:	2000      	movs	r0, #0
100105b0:	7023      	strb	r3, [r4, #0]
100105b2:	bd38      	pop	{r3, r4, r5, pc}
100105b4:	100122ab 	.word	0x100122ab

100105b8 <gapm_cmp_evt>:
100105b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100105ba:	7803      	ldrb	r3, [r0, #0]
100105bc:	7845      	ldrb	r5, [r0, #1]
100105be:	3b0c      	subs	r3, #12
100105c0:	1e18      	subs	r0, r3, #0
100105c2:	280b      	cmp	r0, #11
100105c4:	d900      	bls.n	100105c8 <gapm_cmp_evt+0x10>
100105c6:	e08d      	b.n	100106e4 <gapm_cmp_evt+0x12c>
100105c8:	1c0c      	adds	r4, r1, #0
100105ca:	f004 fb8b 	bl	10014ce4 <__gnu_thumb1_case_uqi>
100105ce:	1952      	.short	0x1952
100105d0:	068b1919 	.word	0x068b1919
100105d4:	8b595906 	.word	0x8b595906
100105d8:	0d8b      	.short	0x0d8b
100105da:	2300      	movs	r3, #0
100105dc:	2d45      	cmp	r5, #69	; 0x45
100105de:	d000      	beq.n	100105e2 <gapm_cmp_evt+0x2a>
100105e0:	1c2b      	adds	r3, r5, #0
100105e2:	7023      	strb	r3, [r4, #0]
100105e4:	2002      	movs	r0, #2
100105e6:	e07e      	b.n	100106e6 <gapm_cmp_evt+0x12e>
100105e8:	203b      	movs	r0, #59	; 0x3b
100105ea:	2d00      	cmp	r5, #0
100105ec:	d100      	bne.n	100105f0 <gapm_cmp_evt+0x38>
100105ee:	e07a      	b.n	100106e6 <gapm_cmp_evt+0x12e>
100105f0:	700d      	strb	r5, [r1, #0]
100105f2:	1c48      	adds	r0, r1, #1
100105f4:	2210      	movs	r2, #16
100105f6:	2100      	movs	r1, #0
100105f8:	4b3b      	ldr	r3, [pc, #236]	; (100106e8 <gapm_cmp_evt+0x130>)
100105fa:	4798      	blx	r3
100105fc:	200f      	movs	r0, #15
100105fe:	e072      	b.n	100106e6 <gapm_cmp_evt+0x12e>
10010600:	2d00      	cmp	r5, #0
10010602:	d134      	bne.n	1001066e <gapm_cmp_evt+0xb6>
10010604:	4b39      	ldr	r3, [pc, #228]	; (100106ec <gapm_cmp_evt+0x134>)
10010606:	4798      	blx	r3
10010608:	1e43      	subs	r3, r0, #1
1001060a:	b2db      	uxtb	r3, r3
1001060c:	1c28      	adds	r0, r5, #0
1001060e:	2b06      	cmp	r3, #6
10010610:	d869      	bhi.n	100106e6 <gapm_cmp_evt+0x12e>
10010612:	466b      	mov	r3, sp
10010614:	4e36      	ldr	r6, [pc, #216]	; (100106f0 <gapm_cmp_evt+0x138>)
10010616:	1dd9      	adds	r1, r3, #7
10010618:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001061a:	4b36      	ldr	r3, [pc, #216]	; (100106f4 <gapm_cmp_evt+0x13c>)
1001061c:	4798      	blx	r3
1001061e:	2312      	movs	r3, #18
10010620:	4358      	muls	r0, r3
10010622:	4935      	ldr	r1, [pc, #212]	; (100106f8 <gapm_cmp_evt+0x140>)
10010624:	1809      	adds	r1, r1, r0
10010626:	1c0b      	adds	r3, r1, #0
10010628:	894a      	ldrh	r2, [r1, #10]
1001062a:	3308      	adds	r3, #8
1001062c:	8122      	strh	r2, [r4, #8]
1001062e:	784f      	ldrb	r7, [r1, #1]
10010630:	72a5      	strb	r5, [r4, #10]
10010632:	7027      	strb	r7, [r4, #0]
10010634:	898a      	ldrh	r2, [r1, #12]
10010636:	1c60      	adds	r0, r4, #1
10010638:	81a2      	strh	r2, [r4, #12]
1001063a:	88db      	ldrh	r3, [r3, #6]
1001063c:	3102      	adds	r1, #2
1001063e:	81e3      	strh	r3, [r4, #14]
10010640:	89cb      	ldrh	r3, [r1, #14]
10010642:	2206      	movs	r2, #6
10010644:	8223      	strh	r3, [r4, #16]
10010646:	4b2d      	ldr	r3, [pc, #180]	; (100106fc <gapm_cmp_evt+0x144>)
10010648:	4798      	blx	r3
1001064a:	2f00      	cmp	r7, #0
1001064c:	d00a      	beq.n	10010664 <gapm_cmp_evt+0xac>
1001064e:	79a3      	ldrb	r3, [r4, #6]
10010650:	223f      	movs	r2, #63	; 0x3f
10010652:	1c19      	adds	r1, r3, #0
10010654:	3501      	adds	r5, #1
10010656:	4391      	bics	r1, r2
10010658:	29c0      	cmp	r1, #192	; 0xc0
1001065a:	d003      	beq.n	10010664 <gapm_cmp_evt+0xac>
1001065c:	065b      	lsls	r3, r3, #25
1001065e:	0fdb      	lsrs	r3, r3, #31
10010660:	3502      	adds	r5, #2
10010662:	1aed      	subs	r5, r5, r3
10010664:	2301      	movs	r3, #1
10010666:	425b      	negs	r3, r3
10010668:	7025      	strb	r5, [r4, #0]
1001066a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001066c:	e038      	b.n	100106e0 <gapm_cmp_evt+0x128>
1001066e:	700d      	strb	r5, [r1, #0]
10010670:	e004      	b.n	1001067c <gapm_cmp_evt+0xc4>
10010672:	2300      	movs	r3, #0
10010674:	2d45      	cmp	r5, #69	; 0x45
10010676:	d000      	beq.n	1001067a <gapm_cmp_evt+0xc2>
10010678:	1c2b      	adds	r3, r5, #0
1001067a:	7023      	strb	r3, [r4, #0]
1001067c:	2003      	movs	r0, #3
1001067e:	e032      	b.n	100106e6 <gapm_cmp_evt+0x12e>
10010680:	4e1b      	ldr	r6, [pc, #108]	; (100106f0 <gapm_cmp_evt+0x138>)
10010682:	2100      	movs	r1, #0
10010684:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010686:	4b1b      	ldr	r3, [pc, #108]	; (100106f4 <gapm_cmp_evt+0x13c>)
10010688:	4798      	blx	r3
1001068a:	2807      	cmp	r0, #7
1001068c:	d818      	bhi.n	100106c0 <gapm_cmp_evt+0x108>
1001068e:	2301      	movs	r3, #1
10010690:	425b      	negs	r3, r3
10010692:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010694:	3313      	adds	r3, #19
10010696:	4358      	muls	r0, r3
10010698:	4917      	ldr	r1, [pc, #92]	; (100106f8 <gapm_cmp_evt+0x140>)
1001069a:	1809      	adds	r1, r1, r0
1001069c:	1c0b      	adds	r3, r1, #0
1001069e:	894a      	ldrh	r2, [r1, #10]
100106a0:	3308      	adds	r3, #8
100106a2:	8122      	strh	r2, [r4, #8]
100106a4:	784a      	ldrb	r2, [r1, #1]
100106a6:	72a5      	strb	r5, [r4, #10]
100106a8:	7022      	strb	r2, [r4, #0]
100106aa:	898a      	ldrh	r2, [r1, #12]
100106ac:	1c60      	adds	r0, r4, #1
100106ae:	81a2      	strh	r2, [r4, #12]
100106b0:	88db      	ldrh	r3, [r3, #6]
100106b2:	3102      	adds	r1, #2
100106b4:	81e3      	strh	r3, [r4, #14]
100106b6:	89cb      	ldrh	r3, [r1, #14]
100106b8:	2206      	movs	r2, #6
100106ba:	8223      	strh	r3, [r4, #16]
100106bc:	4b0f      	ldr	r3, [pc, #60]	; (100106fc <gapm_cmp_evt+0x144>)
100106be:	4798      	blx	r3
100106c0:	2200      	movs	r2, #0
100106c2:	7823      	ldrb	r3, [r4, #0]
100106c4:	4293      	cmp	r3, r2
100106c6:	d00a      	beq.n	100106de <gapm_cmp_evt+0x126>
100106c8:	79a3      	ldrb	r3, [r4, #6]
100106ca:	323f      	adds	r2, #63	; 0x3f
100106cc:	1c19      	adds	r1, r3, #0
100106ce:	4391      	bics	r1, r2
100106d0:	3a3e      	subs	r2, #62	; 0x3e
100106d2:	29c0      	cmp	r1, #192	; 0xc0
100106d4:	d003      	beq.n	100106de <gapm_cmp_evt+0x126>
100106d6:	065b      	lsls	r3, r3, #25
100106d8:	0fdb      	lsrs	r3, r3, #31
100106da:	3202      	adds	r2, #2
100106dc:	1ad2      	subs	r2, r2, r3
100106de:	7022      	strb	r2, [r4, #0]
100106e0:	2005      	movs	r0, #5
100106e2:	e000      	b.n	100106e6 <gapm_cmp_evt+0x12e>
100106e4:	2000      	movs	r0, #0
100106e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100106e8:	100122bd 	.word	0x100122bd
100106ec:	1000f909 	.word	0x1000f909
100106f0:	1001ba92 	.word	0x1001ba92
100106f4:	1000f8cd 	.word	0x1000f8cd
100106f8:	1001ba02 	.word	0x1001ba02
100106fc:	100122ab 	.word	0x100122ab

10010700 <gapm_start_adv_cmd_handler>:
10010700:	b5f0      	push	{r4, r5, r6, r7, lr}
10010702:	b089      	sub	sp, #36	; 0x24
10010704:	9303      	str	r3, [sp, #12]
10010706:	ab0e      	add	r3, sp, #56	; 0x38
10010708:	9102      	str	r1, [sp, #8]
1001070a:	cb02      	ldmia	r3!, {r1}
1001070c:	aa08      	add	r2, sp, #32
1001070e:	881b      	ldrh	r3, [r3, #0]
10010710:	4e3c      	ldr	r6, [pc, #240]	; (10010804 <gapm_start_adv_cmd_handler+0x104>)
10010712:	9300      	str	r3, [sp, #0]
10010714:	ab10      	add	r3, sp, #64	; 0x40
10010716:	881b      	ldrh	r3, [r3, #0]
10010718:	240d      	movs	r4, #13
1001071a:	469c      	mov	ip, r3
1001071c:	ab11      	add	r3, sp, #68	; 0x44
1001071e:	781b      	ldrb	r3, [r3, #0]
10010720:	9304      	str	r3, [sp, #16]
10010722:	ab12      	add	r3, sp, #72	; 0x48
10010724:	781b      	ldrb	r3, [r3, #0]
10010726:	9305      	str	r3, [sp, #20]
10010728:	ab13      	add	r3, sp, #76	; 0x4c
1001072a:	781b      	ldrb	r3, [r3, #0]
1001072c:	9306      	str	r3, [sp, #24]
1001072e:	ab14      	add	r3, sp, #80	; 0x50
10010730:	781b      	ldrb	r3, [r3, #0]
10010732:	9301      	str	r3, [sp, #4]
10010734:	2319      	movs	r3, #25
10010736:	189b      	adds	r3, r3, r2
10010738:	7fdd      	ldrb	r5, [r3, #31]
1001073a:	ab18      	add	r3, sp, #96	; 0x60
1001073c:	881f      	ldrh	r7, [r3, #0]
1001073e:	ab19      	add	r3, sp, #100	; 0x64
10010740:	781b      	ldrb	r3, [r3, #0]
10010742:	8832      	ldrh	r2, [r6, #0]
10010744:	9307      	str	r3, [sp, #28]
10010746:	4b30      	ldr	r3, [pc, #192]	; (10010808 <gapm_start_adv_cmd_handler+0x108>)
10010748:	8836      	ldrh	r6, [r6, #0]
1001074a:	711a      	strb	r2, [r3, #4]
1001074c:	466a      	mov	r2, sp
1001074e:	7a12      	ldrb	r2, [r2, #8]
10010750:	701c      	strb	r4, [r3, #0]
10010752:	705c      	strb	r4, [r3, #1]
10010754:	709c      	strb	r4, [r3, #2]
10010756:	725a      	strb	r2, [r3, #9]
10010758:	2400      	movs	r4, #0
1001075a:	466a      	mov	r2, sp
1001075c:	0a36      	lsrs	r6, r6, #8
1001075e:	70dc      	strb	r4, [r3, #3]
10010760:	7218      	strb	r0, [r3, #8]
10010762:	729c      	strb	r4, [r3, #10]
10010764:	715e      	strb	r6, [r3, #5]
10010766:	72dc      	strb	r4, [r3, #11]
10010768:	7812      	ldrb	r2, [r2, #0]
1001076a:	380e      	subs	r0, #14
1001076c:	731a      	strb	r2, [r3, #12]
1001076e:	9a00      	ldr	r2, [sp, #0]
10010770:	0a14      	lsrs	r4, r2, #8
10010772:	4662      	mov	r2, ip
10010774:	739a      	strb	r2, [r3, #14]
10010776:	4662      	mov	r2, ip
10010778:	735c      	strb	r4, [r3, #13]
1001077a:	0a14      	lsrs	r4, r2, #8
1001077c:	466a      	mov	r2, sp
1001077e:	7c12      	ldrb	r2, [r2, #16]
10010780:	73dc      	strb	r4, [r3, #15]
10010782:	741a      	strb	r2, [r3, #16]
10010784:	1c1c      	adds	r4, r3, #0
10010786:	2801      	cmp	r0, #1
10010788:	d809      	bhi.n	1001079e <gapm_start_adv_cmd_handler+0x9e>
1001078a:	2900      	cmp	r1, #0
1001078c:	d003      	beq.n	10010796 <gapm_start_adv_cmd_handler+0x96>
1001078e:	481f      	ldr	r0, [pc, #124]	; (1001080c <gapm_start_adv_cmd_handler+0x10c>)
10010790:	2206      	movs	r2, #6
10010792:	4b1f      	ldr	r3, [pc, #124]	; (10010810 <gapm_start_adv_cmd_handler+0x110>)
10010794:	4798      	blx	r3
10010796:	466b      	mov	r3, sp
10010798:	7b1b      	ldrb	r3, [r3, #12]
1001079a:	75e3      	strb	r3, [r4, #23]
1001079c:	e014      	b.n	100107c8 <gapm_start_adv_cmd_handler+0xc8>
1001079e:	466b      	mov	r3, sp
100107a0:	7d1b      	ldrb	r3, [r3, #20]
100107a2:	9915      	ldr	r1, [sp, #84]	; 0x54
100107a4:	7463      	strb	r3, [r4, #17]
100107a6:	466b      	mov	r3, sp
100107a8:	7e1b      	ldrb	r3, [r3, #24]
100107aa:	9a01      	ldr	r2, [sp, #4]
100107ac:	74a3      	strb	r3, [r4, #18]
100107ae:	466b      	mov	r3, sp
100107b0:	791b      	ldrb	r3, [r3, #4]
100107b2:	4818      	ldr	r0, [pc, #96]	; (10010814 <gapm_start_adv_cmd_handler+0x114>)
100107b4:	4e16      	ldr	r6, [pc, #88]	; (10010810 <gapm_start_adv_cmd_handler+0x110>)
100107b6:	74e3      	strb	r3, [r4, #19]
100107b8:	47b0      	blx	r6
100107ba:	1c23      	adds	r3, r4, #0
100107bc:	4816      	ldr	r0, [pc, #88]	; (10010818 <gapm_start_adv_cmd_handler+0x118>)
100107be:	3330      	adds	r3, #48	; 0x30
100107c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
100107c2:	1c2a      	adds	r2, r5, #0
100107c4:	701d      	strb	r5, [r3, #0]
100107c6:	47b0      	blx	r6
100107c8:	1c22      	adds	r2, r4, #0
100107ca:	23a5      	movs	r3, #165	; 0xa5
100107cc:	3250      	adds	r2, #80	; 0x50
100107ce:	7013      	strb	r3, [r2, #0]
100107d0:	1c22      	adds	r2, r4, #0
100107d2:	3251      	adds	r2, #81	; 0x51
100107d4:	7013      	strb	r3, [r2, #0]
100107d6:	1c23      	adds	r3, r4, #0
100107d8:	1c22      	adds	r2, r4, #0
100107da:	3352      	adds	r3, #82	; 0x52
100107dc:	701f      	strb	r7, [r3, #0]
100107de:	3253      	adds	r2, #83	; 0x53
100107e0:	0a3b      	lsrs	r3, r7, #8
100107e2:	7013      	strb	r3, [r2, #0]
100107e4:	466a      	mov	r2, sp
100107e6:	1c23      	adds	r3, r4, #0
100107e8:	7f12      	ldrb	r2, [r2, #28]
100107ea:	3354      	adds	r3, #84	; 0x54
100107ec:	701a      	strb	r2, [r3, #0]
100107ee:	234d      	movs	r3, #77	; 0x4d
100107f0:	2500      	movs	r5, #0
100107f2:	71a3      	strb	r3, [r4, #6]
100107f4:	1c20      	adds	r0, r4, #0
100107f6:	2155      	movs	r1, #85	; 0x55
100107f8:	4b08      	ldr	r3, [pc, #32]	; (1001081c <gapm_start_adv_cmd_handler+0x11c>)
100107fa:	71e5      	strb	r5, [r4, #7]
100107fc:	4798      	blx	r3
100107fe:	1c28      	adds	r0, r5, #0
10010800:	b009      	add	sp, #36	; 0x24
10010802:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010804:	1001ba00 	.word	0x1001ba00
10010808:	1001bd70 	.word	0x1001bd70
1001080c:	1001bd81 	.word	0x1001bd81
10010810:	100122ab 	.word	0x100122ab
10010814:	1001bd84 	.word	0x1001bd84
10010818:	1001bda1 	.word	0x1001bda1
1001081c:	1000f6fd 	.word	0x1000f6fd

10010820 <get_gap_local_addr_type>:
10010820:	4b04      	ldr	r3, [pc, #16]	; (10010834 <get_gap_local_addr_type+0x14>)
10010822:	2001      	movs	r0, #1
10010824:	791b      	ldrb	r3, [r3, #4]
10010826:	2b02      	cmp	r3, #2
10010828:	d003      	beq.n	10010832 <get_gap_local_addr_type+0x12>
1001082a:	3b03      	subs	r3, #3
1001082c:	4258      	negs	r0, r3
1001082e:	4158      	adcs	r0, r3
10010830:	0040      	lsls	r0, r0, #1
10010832:	4770      	bx	lr
10010834:	1001ba92 	.word	0x1001ba92

10010838 <gapm_adv_report_evt_handler>:
10010838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001083a:	7843      	ldrb	r3, [r0, #1]
1001083c:	1c05      	adds	r5, r0, #0
1001083e:	9301      	str	r3, [sp, #4]
10010840:	466b      	mov	r3, sp
10010842:	1c0c      	adds	r4, r1, #0
10010844:	791b      	ldrb	r3, [r3, #4]
10010846:	7806      	ldrb	r6, [r0, #0]
10010848:	2206      	movs	r2, #6
1001084a:	704b      	strb	r3, [r1, #1]
1001084c:	1c88      	adds	r0, r1, #2
1001084e:	4f1b      	ldr	r7, [pc, #108]	; (100108bc <gapm_adv_report_evt_handler+0x84>)
10010850:	1ca9      	adds	r1, r5, #2
10010852:	47b8      	blx	r7
10010854:	1c20      	adds	r0, r4, #0
10010856:	1c29      	adds	r1, r5, #0
10010858:	7a2a      	ldrb	r2, [r5, #8]
1001085a:	3008      	adds	r0, #8
1001085c:	77c2      	strb	r2, [r0, #31]
1001085e:	3109      	adds	r1, #9
10010860:	3528      	adds	r5, #40	; 0x28
10010862:	47b8      	blx	r7
10010864:	782b      	ldrb	r3, [r5, #0]
10010866:	b25a      	sxtb	r2, r3
10010868:	2a00      	cmp	r2, #0
1001086a:	da01      	bge.n	10010870 <gapm_adv_report_evt_handler+0x38>
1001086c:	3301      	adds	r3, #1
1001086e:	b2db      	uxtb	r3, r3
10010870:	1c22      	adds	r2, r4, #0
10010872:	3228      	adds	r2, #40	; 0x28
10010874:	7013      	strb	r3, [r2, #0]
10010876:	2200      	movs	r2, #0
10010878:	9b01      	ldr	r3, [sp, #4]
1001087a:	4293      	cmp	r3, r2
1001087c:	d00a      	beq.n	10010894 <gapm_adv_report_evt_handler+0x5c>
1001087e:	79e3      	ldrb	r3, [r4, #7]
10010880:	323f      	adds	r2, #63	; 0x3f
10010882:	1c19      	adds	r1, r3, #0
10010884:	4391      	bics	r1, r2
10010886:	3a3e      	subs	r2, #62	; 0x3e
10010888:	29c0      	cmp	r1, #192	; 0xc0
1001088a:	d003      	beq.n	10010894 <gapm_adv_report_evt_handler+0x5c>
1001088c:	065b      	lsls	r3, r3, #25
1001088e:	0fdb      	lsrs	r3, r3, #31
10010890:	3202      	adds	r2, #2
10010892:	1ad2      	subs	r2, r2, r3
10010894:	7062      	strb	r2, [r4, #1]
10010896:	2e04      	cmp	r6, #4
10010898:	d80f      	bhi.n	100108ba <gapm_adv_report_evt_handler+0x82>
1001089a:	1c30      	adds	r0, r6, #0
1001089c:	f004 fa22 	bl	10014ce4 <__gnu_thumb1_case_uqi>
100108a0:	09070503 	.word	0x09070503
100108a4:	0b          	.byte	0x0b
100108a5:	00          	.byte	0x00
100108a6:	2300      	movs	r3, #0
100108a8:	e006      	b.n	100108b8 <gapm_adv_report_evt_handler+0x80>
100108aa:	2301      	movs	r3, #1
100108ac:	e004      	b.n	100108b8 <gapm_adv_report_evt_handler+0x80>
100108ae:	2302      	movs	r3, #2
100108b0:	e002      	b.n	100108b8 <gapm_adv_report_evt_handler+0x80>
100108b2:	2303      	movs	r3, #3
100108b4:	e000      	b.n	100108b8 <gapm_adv_report_evt_handler+0x80>
100108b6:	2305      	movs	r3, #5
100108b8:	7023      	strb	r3, [r4, #0]
100108ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100108bc:	100122ab 	.word	0x100122ab

100108c0 <gapm_resolv_addr_cmd_handler>:
100108c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100108c2:	2314      	movs	r3, #20
100108c4:	4c12      	ldr	r4, [pc, #72]	; (10010910 <gapm_resolv_addr_cmd_handler+0x50>)
100108c6:	1c17      	adds	r7, r2, #0
100108c8:	7023      	strb	r3, [r4, #0]
100108ca:	3b07      	subs	r3, #7
100108cc:	7063      	strb	r3, [r4, #1]
100108ce:	70a3      	strb	r3, [r4, #2]
100108d0:	2300      	movs	r3, #0
100108d2:	70e3      	strb	r3, [r4, #3]
100108d4:	4b0f      	ldr	r3, [pc, #60]	; (10010914 <gapm_resolv_addr_cmd_handler+0x54>)
100108d6:	1c05      	adds	r5, r0, #0
100108d8:	881a      	ldrh	r2, [r3, #0]
100108da:	881b      	ldrh	r3, [r3, #0]
100108dc:	4e0e      	ldr	r6, [pc, #56]	; (10010918 <gapm_resolv_addr_cmd_handler+0x58>)
100108de:	0a1b      	lsrs	r3, r3, #8
100108e0:	7163      	strb	r3, [r4, #5]
100108e2:	2317      	movs	r3, #23
100108e4:	012d      	lsls	r5, r5, #4
100108e6:	7122      	strb	r2, [r4, #4]
100108e8:	7260      	strb	r0, [r4, #9]
100108ea:	2206      	movs	r2, #6
100108ec:	480b      	ldr	r0, [pc, #44]	; (1001091c <gapm_resolv_addr_cmd_handler+0x5c>)
100108ee:	7223      	strb	r3, [r4, #8]
100108f0:	47b0      	blx	r6
100108f2:	1c39      	adds	r1, r7, #0
100108f4:	1c2a      	adds	r2, r5, #0
100108f6:	480a      	ldr	r0, [pc, #40]	; (10010920 <gapm_resolv_addr_cmd_handler+0x60>)
100108f8:	47b0      	blx	r6
100108fa:	1c29      	adds	r1, r5, #0
100108fc:	3110      	adds	r1, #16
100108fe:	1c0b      	adds	r3, r1, #0
10010900:	3b08      	subs	r3, #8
10010902:	71a3      	strb	r3, [r4, #6]
10010904:	121b      	asrs	r3, r3, #8
10010906:	71e3      	strb	r3, [r4, #7]
10010908:	1c20      	adds	r0, r4, #0
1001090a:	4b06      	ldr	r3, [pc, #24]	; (10010924 <gapm_resolv_addr_cmd_handler+0x64>)
1001090c:	4798      	blx	r3
1001090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010910:	1001bd70 	.word	0x1001bd70
10010914:	1001ba00 	.word	0x1001ba00
10010918:	100122ab 	.word	0x100122ab
1001091c:	1001bd7a 	.word	0x1001bd7a
10010920:	1001bd80 	.word	0x1001bd80
10010924:	1000f6fd 	.word	0x1000f6fd

10010928 <gapm_addr_solved_ind_handler>:
10010928:	b570      	push	{r4, r5, r6, lr}
1001092a:	1c04      	adds	r4, r0, #0
1001092c:	1c08      	adds	r0, r1, #0
1001092e:	1c0d      	adds	r5, r1, #0
10010930:	4e05      	ldr	r6, [pc, #20]	; (10010948 <gapm_addr_solved_ind_handler+0x20>)
10010932:	1c21      	adds	r1, r4, #0
10010934:	2206      	movs	r2, #6
10010936:	3011      	adds	r0, #17
10010938:	47b0      	blx	r6
1001093a:	1c68      	adds	r0, r5, #1
1001093c:	1da1      	adds	r1, r4, #6
1001093e:	2210      	movs	r2, #16
10010940:	47b0      	blx	r6
10010942:	2300      	movs	r3, #0
10010944:	702b      	strb	r3, [r5, #0]
10010946:	bd70      	pop	{r4, r5, r6, pc}
10010948:	100122ab 	.word	0x100122ab

1001094c <gapm_profile_added_ind_handler>:
1001094c:	b510      	push	{r4, lr}
1001094e:	7843      	ldrb	r3, [r0, #1]
10010950:	7902      	ldrb	r2, [r0, #4]
10010952:	7944      	ldrb	r4, [r0, #5]
10010954:	7800      	ldrb	r0, [r0, #0]
10010956:	021b      	lsls	r3, r3, #8
10010958:	4303      	orrs	r3, r0
1001095a:	2b1b      	cmp	r3, #27
1001095c:	d104      	bne.n	10010968 <gapm_profile_added_ind_handler+0x1c>
1001095e:	2300      	movs	r3, #0
10010960:	700b      	strb	r3, [r1, #0]
10010962:	0223      	lsls	r3, r4, #8
10010964:	4313      	orrs	r3, r2
10010966:	804b      	strh	r3, [r1, #2]
10010968:	203b      	movs	r0, #59	; 0x3b
1001096a:	bd10      	pop	{r4, pc}

1001096c <gattc_read_req_ind_parser>:
1001096c:	7843      	ldrb	r3, [r0, #1]
1001096e:	7802      	ldrb	r2, [r0, #0]
10010970:	021b      	lsls	r3, r3, #8
10010972:	4313      	orrs	r3, r2
10010974:	804b      	strh	r3, [r1, #2]
10010976:	4770      	bx	lr

10010978 <gattc_write_req_ind_parser>:
10010978:	b508      	push	{r3, lr}
1001097a:	1c13      	adds	r3, r2, #0
1001097c:	0a00      	lsrs	r0, r0, #8
1001097e:	8010      	strh	r0, [r2, #0]
10010980:	784a      	ldrb	r2, [r1, #1]
10010982:	7808      	ldrb	r0, [r1, #0]
10010984:	0212      	lsls	r2, r2, #8
10010986:	4302      	orrs	r2, r0
10010988:	805a      	strh	r2, [r3, #2]
1001098a:	78ca      	ldrb	r2, [r1, #3]
1001098c:	7888      	ldrb	r0, [r1, #2]
1001098e:	0212      	lsls	r2, r2, #8
10010990:	4302      	orrs	r2, r0
10010992:	809a      	strh	r2, [r3, #4]
10010994:	794a      	ldrb	r2, [r1, #5]
10010996:	7908      	ldrb	r0, [r1, #4]
10010998:	0212      	lsls	r2, r2, #8
1001099a:	4302      	orrs	r2, r0
1001099c:	80da      	strh	r2, [r3, #6]
1001099e:	3308      	adds	r3, #8
100109a0:	1c18      	adds	r0, r3, #0
100109a2:	3106      	adds	r1, #6
100109a4:	4b01      	ldr	r3, [pc, #4]	; (100109ac <gattc_write_req_ind_parser+0x34>)
100109a6:	4798      	blx	r3
100109a8:	bd08      	pop	{r3, pc}
100109aa:	46c0      	nop			; (mov r8, r8)
100109ac:	100122ab 	.word	0x100122ab

100109b0 <gattc_att_info_req_parser>:
100109b0:	7843      	ldrb	r3, [r0, #1]
100109b2:	7802      	ldrb	r2, [r0, #0]
100109b4:	021b      	lsls	r3, r3, #8
100109b6:	4313      	orrs	r3, r2
100109b8:	800b      	strh	r3, [r1, #0]
100109ba:	4770      	bx	lr

100109bc <gattc_read_cfm>:
100109bc:	b538      	push	{r3, r4, r5, lr}
100109be:	2514      	movs	r5, #20
100109c0:	1c1c      	adds	r4, r3, #0
100109c2:	4b14      	ldr	r3, [pc, #80]	; (10010a14 <gattc_read_cfm+0x58>)
100109c4:	70d9      	strb	r1, [r3, #3]
100109c6:	4914      	ldr	r1, [pc, #80]	; (10010a18 <gattc_read_cfm+0x5c>)
100109c8:	701d      	strb	r5, [r3, #0]
100109ca:	3d08      	subs	r5, #8
100109cc:	705d      	strb	r5, [r3, #1]
100109ce:	709d      	strb	r5, [r3, #2]
100109d0:	880d      	ldrh	r5, [r1, #0]
100109d2:	8809      	ldrh	r1, [r1, #0]
100109d4:	7218      	strb	r0, [r3, #8]
100109d6:	0a09      	lsrs	r1, r1, #8
100109d8:	7159      	strb	r1, [r3, #5]
100109da:	0a00      	lsrs	r0, r0, #8
100109dc:	0a21      	lsrs	r1, r4, #8
100109de:	711d      	strb	r5, [r3, #4]
100109e0:	7258      	strb	r0, [r3, #9]
100109e2:	729c      	strb	r4, [r3, #10]
100109e4:	72d9      	strb	r1, [r3, #11]
100109e6:	731a      	strb	r2, [r3, #12]
100109e8:	1c1d      	adds	r5, r3, #0
100109ea:	2c00      	cmp	r4, #0
100109ec:	d007      	beq.n	100109fe <gattc_read_cfm+0x42>
100109ee:	9904      	ldr	r1, [sp, #16]
100109f0:	1c22      	adds	r2, r4, #0
100109f2:	480a      	ldr	r0, [pc, #40]	; (10010a1c <gattc_read_cfm+0x60>)
100109f4:	4b0a      	ldr	r3, [pc, #40]	; (10010a20 <gattc_read_cfm+0x64>)
100109f6:	340d      	adds	r4, #13
100109f8:	4798      	blx	r3
100109fa:	b2a1      	uxth	r1, r4
100109fc:	e001      	b.n	10010a02 <gattc_read_cfm+0x46>
100109fe:	210e      	movs	r1, #14
10010a00:	735c      	strb	r4, [r3, #13]
10010a02:	1c0b      	adds	r3, r1, #0
10010a04:	3b08      	subs	r3, #8
10010a06:	71ab      	strb	r3, [r5, #6]
10010a08:	121b      	asrs	r3, r3, #8
10010a0a:	71eb      	strb	r3, [r5, #7]
10010a0c:	1c28      	adds	r0, r5, #0
10010a0e:	4b05      	ldr	r3, [pc, #20]	; (10010a24 <gattc_read_cfm+0x68>)
10010a10:	4798      	blx	r3
10010a12:	bd38      	pop	{r3, r4, r5, pc}
10010a14:	1001bd70 	.word	0x1001bd70
10010a18:	1001ba00 	.word	0x1001ba00
10010a1c:	1001bd7d 	.word	0x1001bd7d
10010a20:	100122ab 	.word	0x100122ab
10010a24:	1000f6fd 	.word	0x1000f6fd

10010a28 <gattc_write_cfm>:
10010a28:	4b0d      	ldr	r3, [pc, #52]	; (10010a60 <gattc_write_cfm+0x38>)
10010a2a:	b510      	push	{r4, lr}
10010a2c:	729a      	strb	r2, [r3, #10]
10010a2e:	2203      	movs	r2, #3
10010a30:	2416      	movs	r4, #22
10010a32:	719a      	strb	r2, [r3, #6]
10010a34:	2200      	movs	r2, #0
10010a36:	70d9      	strb	r1, [r3, #3]
10010a38:	490a      	ldr	r1, [pc, #40]	; (10010a64 <gattc_write_cfm+0x3c>)
10010a3a:	701c      	strb	r4, [r3, #0]
10010a3c:	3c0a      	subs	r4, #10
10010a3e:	705c      	strb	r4, [r3, #1]
10010a40:	709c      	strb	r4, [r3, #2]
10010a42:	880c      	ldrh	r4, [r1, #0]
10010a44:	8809      	ldrh	r1, [r1, #0]
10010a46:	7218      	strb	r0, [r3, #8]
10010a48:	0a09      	lsrs	r1, r1, #8
10010a4a:	0a00      	lsrs	r0, r0, #8
10010a4c:	711c      	strb	r4, [r3, #4]
10010a4e:	7159      	strb	r1, [r3, #5]
10010a50:	7258      	strb	r0, [r3, #9]
10010a52:	71da      	strb	r2, [r3, #7]
10010a54:	1c18      	adds	r0, r3, #0
10010a56:	210b      	movs	r1, #11
10010a58:	4b03      	ldr	r3, [pc, #12]	; (10010a68 <gattc_write_cfm+0x40>)
10010a5a:	4798      	blx	r3
10010a5c:	bd10      	pop	{r4, pc}
10010a5e:	46c0      	nop			; (mov r8, r8)
10010a60:	1001bd70 	.word	0x1001bd70
10010a64:	1001ba00 	.word	0x1001ba00
10010a68:	1000f6fd 	.word	0x1000f6fd

10010a6c <gattc_att_info_cfm>:
10010a6c:	b538      	push	{r3, r4, r5, lr}
10010a6e:	4c0e      	ldr	r4, [pc, #56]	; (10010aa8 <gattc_att_info_cfm+0x3c>)
10010a70:	2518      	movs	r5, #24
10010a72:	7323      	strb	r3, [r4, #12]
10010a74:	2305      	movs	r3, #5
10010a76:	71a3      	strb	r3, [r4, #6]
10010a78:	2300      	movs	r3, #0
10010a7a:	70e1      	strb	r1, [r4, #3]
10010a7c:	490b      	ldr	r1, [pc, #44]	; (10010aac <gattc_att_info_cfm+0x40>)
10010a7e:	7025      	strb	r5, [r4, #0]
10010a80:	3d0c      	subs	r5, #12
10010a82:	7065      	strb	r5, [r4, #1]
10010a84:	70a5      	strb	r5, [r4, #2]
10010a86:	880d      	ldrh	r5, [r1, #0]
10010a88:	8809      	ldrh	r1, [r1, #0]
10010a8a:	7220      	strb	r0, [r4, #8]
10010a8c:	0a09      	lsrs	r1, r1, #8
10010a8e:	0a00      	lsrs	r0, r0, #8
10010a90:	7161      	strb	r1, [r4, #5]
10010a92:	7260      	strb	r0, [r4, #9]
10010a94:	72a2      	strb	r2, [r4, #10]
10010a96:	71e3      	strb	r3, [r4, #7]
10010a98:	0a12      	lsrs	r2, r2, #8
10010a9a:	1c20      	adds	r0, r4, #0
10010a9c:	210d      	movs	r1, #13
10010a9e:	4b04      	ldr	r3, [pc, #16]	; (10010ab0 <gattc_att_info_cfm+0x44>)
10010aa0:	7125      	strb	r5, [r4, #4]
10010aa2:	72e2      	strb	r2, [r4, #11]
10010aa4:	4798      	blx	r3
10010aa6:	bd38      	pop	{r3, r4, r5, pc}
10010aa8:	1001bd70 	.word	0x1001bd70
10010aac:	1001ba00 	.word	0x1001ba00
10010ab0:	1000f6fd 	.word	0x1000f6fd

10010ab4 <gattc_event_cfm_handler>:
10010ab4:	220e      	movs	r2, #14
10010ab6:	b508      	push	{r3, lr}
10010ab8:	4b0b      	ldr	r3, [pc, #44]	; (10010ae8 <gattc_event_cfm_handler+0x34>)
10010aba:	701a      	strb	r2, [r3, #0]
10010abc:	3a02      	subs	r2, #2
10010abe:	705a      	strb	r2, [r3, #1]
10010ac0:	709a      	strb	r2, [r3, #2]
10010ac2:	4a0a      	ldr	r2, [pc, #40]	; (10010aec <gattc_event_cfm_handler+0x38>)
10010ac4:	70d8      	strb	r0, [r3, #3]
10010ac6:	8810      	ldrh	r0, [r2, #0]
10010ac8:	8812      	ldrh	r2, [r2, #0]
10010aca:	7219      	strb	r1, [r3, #8]
10010acc:	0a12      	lsrs	r2, r2, #8
10010ace:	715a      	strb	r2, [r3, #5]
10010ad0:	2202      	movs	r2, #2
10010ad2:	719a      	strb	r2, [r3, #6]
10010ad4:	2200      	movs	r2, #0
10010ad6:	0a09      	lsrs	r1, r1, #8
10010ad8:	7118      	strb	r0, [r3, #4]
10010ada:	7259      	strb	r1, [r3, #9]
10010adc:	71da      	strb	r2, [r3, #7]
10010ade:	1c18      	adds	r0, r3, #0
10010ae0:	210a      	movs	r1, #10
10010ae2:	4b03      	ldr	r3, [pc, #12]	; (10010af0 <gattc_event_cfm_handler+0x3c>)
10010ae4:	4798      	blx	r3
10010ae6:	bd08      	pop	{r3, pc}
10010ae8:	1001bd70 	.word	0x1001bd70
10010aec:	1001ba00 	.word	0x1001ba00
10010af0:	1000f6fd 	.word	0x1000f6fd

10010af4 <gattc_disc_svc_ind_parser>:
10010af4:	b570      	push	{r4, r5, r6, lr}
10010af6:	1c15      	adds	r5, r2, #0
10010af8:	0a00      	lsrs	r0, r0, #8
10010afa:	8010      	strh	r0, [r2, #0]
10010afc:	784b      	ldrb	r3, [r1, #1]
10010afe:	780a      	ldrb	r2, [r1, #0]
10010b00:	021b      	lsls	r3, r3, #8
10010b02:	4313      	orrs	r3, r2
10010b04:	806b      	strh	r3, [r5, #2]
10010b06:	78cb      	ldrb	r3, [r1, #3]
10010b08:	788a      	ldrb	r2, [r1, #2]
10010b0a:	021b      	lsls	r3, r3, #8
10010b0c:	4313      	orrs	r3, r2
10010b0e:	80ab      	strh	r3, [r5, #4]
10010b10:	790e      	ldrb	r6, [r1, #4]
10010b12:	4b05      	ldr	r3, [pc, #20]	; (10010b28 <gattc_disc_svc_ind_parser+0x34>)
10010b14:	1c30      	adds	r0, r6, #0
10010b16:	1c0c      	adds	r4, r1, #0
10010b18:	4798      	blx	r3
10010b1a:	1c32      	adds	r2, r6, #0
10010b1c:	71a8      	strb	r0, [r5, #6]
10010b1e:	1d61      	adds	r1, r4, #5
10010b20:	1de8      	adds	r0, r5, #7
10010b22:	4b02      	ldr	r3, [pc, #8]	; (10010b2c <gattc_disc_svc_ind_parser+0x38>)
10010b24:	4798      	blx	r3
10010b26:	bd70      	pop	{r4, r5, r6, pc}
10010b28:	1000eab1 	.word	0x1000eab1
10010b2c:	100122ab 	.word	0x100122ab

10010b30 <gattc_disc_svc_incl_ind_parser>:
10010b30:	b570      	push	{r4, r5, r6, lr}
10010b32:	1c15      	adds	r5, r2, #0
10010b34:	0a00      	lsrs	r0, r0, #8
10010b36:	8010      	strh	r0, [r2, #0]
10010b38:	784b      	ldrb	r3, [r1, #1]
10010b3a:	780a      	ldrb	r2, [r1, #0]
10010b3c:	021b      	lsls	r3, r3, #8
10010b3e:	4313      	orrs	r3, r2
10010b40:	806b      	strh	r3, [r5, #2]
10010b42:	78cb      	ldrb	r3, [r1, #3]
10010b44:	788a      	ldrb	r2, [r1, #2]
10010b46:	021b      	lsls	r3, r3, #8
10010b48:	4313      	orrs	r3, r2
10010b4a:	80ab      	strh	r3, [r5, #4]
10010b4c:	794b      	ldrb	r3, [r1, #5]
10010b4e:	790a      	ldrb	r2, [r1, #4]
10010b50:	021b      	lsls	r3, r3, #8
10010b52:	4313      	orrs	r3, r2
10010b54:	80eb      	strh	r3, [r5, #6]
10010b56:	798e      	ldrb	r6, [r1, #6]
10010b58:	4b05      	ldr	r3, [pc, #20]	; (10010b70 <gattc_disc_svc_incl_ind_parser+0x40>)
10010b5a:	1c30      	adds	r0, r6, #0
10010b5c:	1c0c      	adds	r4, r1, #0
10010b5e:	4798      	blx	r3
10010b60:	7228      	strb	r0, [r5, #8]
10010b62:	1c28      	adds	r0, r5, #0
10010b64:	1c32      	adds	r2, r6, #0
10010b66:	1de1      	adds	r1, r4, #7
10010b68:	4b02      	ldr	r3, [pc, #8]	; (10010b74 <gattc_disc_svc_incl_ind_parser+0x44>)
10010b6a:	3009      	adds	r0, #9
10010b6c:	4798      	blx	r3
10010b6e:	bd70      	pop	{r4, r5, r6, pc}
10010b70:	1000eab1 	.word	0x1000eab1
10010b74:	100122ab 	.word	0x100122ab

10010b78 <gattc_disc_char_ind_parser>:
10010b78:	b570      	push	{r4, r5, r6, lr}
10010b7a:	1c15      	adds	r5, r2, #0
10010b7c:	0a00      	lsrs	r0, r0, #8
10010b7e:	8010      	strh	r0, [r2, #0]
10010b80:	784b      	ldrb	r3, [r1, #1]
10010b82:	780a      	ldrb	r2, [r1, #0]
10010b84:	021b      	lsls	r3, r3, #8
10010b86:	4313      	orrs	r3, r2
10010b88:	806b      	strh	r3, [r5, #2]
10010b8a:	78cb      	ldrb	r3, [r1, #3]
10010b8c:	788a      	ldrb	r2, [r1, #2]
10010b8e:	021b      	lsls	r3, r3, #8
10010b90:	4313      	orrs	r3, r2
10010b92:	80ab      	strh	r3, [r5, #4]
10010b94:	790b      	ldrb	r3, [r1, #4]
10010b96:	1c0c      	adds	r4, r1, #0
10010b98:	71ab      	strb	r3, [r5, #6]
10010b9a:	794e      	ldrb	r6, [r1, #5]
10010b9c:	4b05      	ldr	r3, [pc, #20]	; (10010bb4 <gattc_disc_char_ind_parser+0x3c>)
10010b9e:	1c30      	adds	r0, r6, #0
10010ba0:	4798      	blx	r3
10010ba2:	71e8      	strb	r0, [r5, #7]
10010ba4:	1c28      	adds	r0, r5, #0
10010ba6:	1c32      	adds	r2, r6, #0
10010ba8:	1da1      	adds	r1, r4, #6
10010baa:	4b03      	ldr	r3, [pc, #12]	; (10010bb8 <gattc_disc_char_ind_parser+0x40>)
10010bac:	3008      	adds	r0, #8
10010bae:	4798      	blx	r3
10010bb0:	bd70      	pop	{r4, r5, r6, pc}
10010bb2:	46c0      	nop			; (mov r8, r8)
10010bb4:	1000eab1 	.word	0x1000eab1
10010bb8:	100122ab 	.word	0x100122ab

10010bbc <gattc_disc_char_desc_ind_parser>:
10010bbc:	b570      	push	{r4, r5, r6, lr}
10010bbe:	1c15      	adds	r5, r2, #0
10010bc0:	0a00      	lsrs	r0, r0, #8
10010bc2:	8010      	strh	r0, [r2, #0]
10010bc4:	784b      	ldrb	r3, [r1, #1]
10010bc6:	780a      	ldrb	r2, [r1, #0]
10010bc8:	021b      	lsls	r3, r3, #8
10010bca:	4313      	orrs	r3, r2
10010bcc:	806b      	strh	r3, [r5, #2]
10010bce:	788e      	ldrb	r6, [r1, #2]
10010bd0:	4b05      	ldr	r3, [pc, #20]	; (10010be8 <gattc_disc_char_desc_ind_parser+0x2c>)
10010bd2:	1c30      	adds	r0, r6, #0
10010bd4:	1c0c      	adds	r4, r1, #0
10010bd6:	4798      	blx	r3
10010bd8:	1c32      	adds	r2, r6, #0
10010bda:	7128      	strb	r0, [r5, #4]
10010bdc:	1ce1      	adds	r1, r4, #3
10010bde:	1d68      	adds	r0, r5, #5
10010be0:	4b02      	ldr	r3, [pc, #8]	; (10010bec <gattc_disc_char_desc_ind_parser+0x30>)
10010be2:	4798      	blx	r3
10010be4:	bd70      	pop	{r4, r5, r6, pc}
10010be6:	46c0      	nop			; (mov r8, r8)
10010be8:	1000eab1 	.word	0x1000eab1
10010bec:	100122ab 	.word	0x100122ab

10010bf0 <gattc_event_ind_and_notification_parser>:
10010bf0:	b510      	push	{r4, lr}
10010bf2:	780c      	ldrb	r4, [r1, #0]
10010bf4:	1c13      	adds	r3, r2, #0
10010bf6:	2c12      	cmp	r4, #18
10010bf8:	d10e      	bne.n	10010c18 <gattc_event_ind_and_notification_parser+0x28>
10010bfa:	0a00      	lsrs	r0, r0, #8
10010bfc:	8010      	strh	r0, [r2, #0]
10010bfe:	788a      	ldrb	r2, [r1, #2]
10010c00:	709a      	strb	r2, [r3, #2]
10010c02:	7948      	ldrb	r0, [r1, #5]
10010c04:	790c      	ldrb	r4, [r1, #4]
10010c06:	0200      	lsls	r0, r0, #8
10010c08:	4320      	orrs	r0, r4
10010c0a:	8098      	strh	r0, [r3, #4]
10010c0c:	3106      	adds	r1, #6
10010c0e:	1d98      	adds	r0, r3, #6
10010c10:	4b0b      	ldr	r3, [pc, #44]	; (10010c40 <gattc_event_ind_and_notification_parser+0x50>)
10010c12:	4798      	blx	r3
10010c14:	221b      	movs	r2, #27
10010c16:	e010      	b.n	10010c3a <gattc_event_ind_and_notification_parser+0x4a>
10010c18:	2200      	movs	r2, #0
10010c1a:	2c13      	cmp	r4, #19
10010c1c:	d10d      	bne.n	10010c3a <gattc_event_ind_and_notification_parser+0x4a>
10010c1e:	0a00      	lsrs	r0, r0, #8
10010c20:	8018      	strh	r0, [r3, #0]
10010c22:	788a      	ldrb	r2, [r1, #2]
10010c24:	709a      	strb	r2, [r3, #2]
10010c26:	7908      	ldrb	r0, [r1, #4]
10010c28:	78cc      	ldrb	r4, [r1, #3]
10010c2a:	0200      	lsls	r0, r0, #8
10010c2c:	4320      	orrs	r0, r4
10010c2e:	8098      	strh	r0, [r3, #4]
10010c30:	3106      	adds	r1, #6
10010c32:	1d98      	adds	r0, r3, #6
10010c34:	4b02      	ldr	r3, [pc, #8]	; (10010c40 <gattc_event_ind_and_notification_parser+0x50>)
10010c36:	4798      	blx	r3
10010c38:	221c      	movs	r2, #28
10010c3a:	1c10      	adds	r0, r2, #0
10010c3c:	bd10      	pop	{r4, pc}
10010c3e:	46c0      	nop			; (mov r8, r8)
10010c40:	100122ab 	.word	0x100122ab

10010c44 <gattc_complete_evt_handler>:
10010c44:	b500      	push	{lr}
10010c46:	0a00      	lsrs	r0, r0, #8
10010c48:	8010      	strh	r0, [r2, #0]
10010c4a:	7808      	ldrb	r0, [r1, #0]
10010c4c:	7090      	strb	r0, [r2, #2]
10010c4e:	784b      	ldrb	r3, [r1, #1]
10010c50:	3801      	subs	r0, #1
10010c52:	70d3      	strb	r3, [r2, #3]
10010c54:	2813      	cmp	r0, #19
10010c56:	d82c      	bhi.n	10010cb2 <gattc_complete_evt_handler+0x6e>
10010c58:	f004 f844 	bl	10014ce4 <__gnu_thumb1_case_uqi>
10010c5c:	0a0a0a0c 	.word	0x0a0a0a0c
10010c60:	210a0a0a 	.word	0x210a0a0a
10010c64:	111f2121 	.word	0x111f2121
10010c68:	2b111111 	.word	0x2b111111
10010c6c:	2919132b 	.word	0x2919132b
10010c70:	2017      	movs	r0, #23
10010c72:	e01f      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c74:	2024      	movs	r0, #36	; 0x24
10010c76:	2b00      	cmp	r3, #0
10010c78:	d11c      	bne.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c7a:	3017      	adds	r0, #23
10010c7c:	e01a      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c7e:	2025      	movs	r0, #37	; 0x25
10010c80:	e018      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c82:	4a0d      	ldr	r2, [pc, #52]	; (10010cb8 <gattc_complete_evt_handler+0x74>)
10010c84:	201d      	movs	r0, #29
10010c86:	6813      	ldr	r3, [r2, #0]
10010c88:	3b01      	subs	r3, #1
10010c8a:	6013      	str	r3, [r2, #0]
10010c8c:	e012      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c8e:	4a0a      	ldr	r2, [pc, #40]	; (10010cb8 <gattc_complete_evt_handler+0x74>)
10010c90:	201e      	movs	r0, #30
10010c92:	6813      	ldr	r3, [r2, #0]
10010c94:	3b01      	subs	r3, #1
10010c96:	6013      	str	r3, [r2, #0]
10010c98:	e00c      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c9a:	2019      	movs	r0, #25
10010c9c:	e00a      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010c9e:	203b      	movs	r0, #59	; 0x3b
10010ca0:	2b00      	cmp	r3, #0
10010ca2:	d007      	beq.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010ca4:	2182      	movs	r1, #130	; 0x82
10010ca6:	0089      	lsls	r1, r1, #2
10010ca8:	5453      	strb	r3, [r2, r1]
10010caa:	3823      	subs	r0, #35	; 0x23
10010cac:	e002      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010cae:	2021      	movs	r0, #33	; 0x21
10010cb0:	e000      	b.n	10010cb4 <gattc_complete_evt_handler+0x70>
10010cb2:	2000      	movs	r0, #0
10010cb4:	bd00      	pop	{pc}
10010cb6:	46c0      	nop			; (mov r8, r8)
10010cb8:	1001ab08 	.word	0x1001ab08

10010cbc <gattc_event_mtu_changed_ind_parser>:
10010cbc:	0a00      	lsrs	r0, r0, #8
10010cbe:	8010      	strh	r0, [r2, #0]
10010cc0:	784b      	ldrb	r3, [r1, #1]
10010cc2:	7809      	ldrb	r1, [r1, #0]
10010cc4:	021b      	lsls	r3, r3, #8
10010cc6:	430b      	orrs	r3, r1
10010cc8:	8053      	strh	r3, [r2, #2]
10010cca:	4770      	bx	lr

10010ccc <gattc_read_ind_parser>:
10010ccc:	0a00      	lsrs	r0, r0, #8
10010cce:	b508      	push	{r3, lr}
10010cd0:	8010      	strh	r0, [r2, #0]
10010cd2:	1c13      	adds	r3, r2, #0
10010cd4:	2282      	movs	r2, #130	; 0x82
10010cd6:	2000      	movs	r0, #0
10010cd8:	0092      	lsls	r2, r2, #2
10010cda:	5498      	strb	r0, [r3, r2]
10010cdc:	784a      	ldrb	r2, [r1, #1]
10010cde:	7808      	ldrb	r0, [r1, #0]
10010ce0:	0212      	lsls	r2, r2, #8
10010ce2:	4302      	orrs	r2, r0
10010ce4:	805a      	strh	r2, [r3, #2]
10010ce6:	78ca      	ldrb	r2, [r1, #3]
10010ce8:	7888      	ldrb	r0, [r1, #2]
10010cea:	0212      	lsls	r2, r2, #8
10010cec:	4302      	orrs	r2, r0
10010cee:	80da      	strh	r2, [r3, #6]
10010cf0:	794a      	ldrb	r2, [r1, #5]
10010cf2:	7908      	ldrb	r0, [r1, #4]
10010cf4:	0212      	lsls	r2, r2, #8
10010cf6:	4302      	orrs	r2, r0
10010cf8:	809a      	strh	r2, [r3, #4]
10010cfa:	3308      	adds	r3, #8
10010cfc:	1c18      	adds	r0, r3, #0
10010cfe:	3106      	adds	r1, #6
10010d00:	4b01      	ldr	r3, [pc, #4]	; (10010d08 <gattc_read_ind_parser+0x3c>)
10010d02:	4798      	blx	r3
10010d04:	bd08      	pop	{r3, pc}
10010d06:	46c0      	nop			; (mov r8, r8)
10010d08:	100122ab 	.word	0x100122ab

10010d0c <gattc_svc_changed_cfg_ind_parser>:
10010d0c:	0a00      	lsrs	r0, r0, #8
10010d0e:	8010      	strh	r0, [r2, #0]
10010d10:	784b      	ldrb	r3, [r1, #1]
10010d12:	7809      	ldrb	r1, [r1, #0]
10010d14:	021b      	lsls	r3, r3, #8
10010d16:	430b      	orrs	r3, r1
10010d18:	8053      	strh	r3, [r2, #2]
10010d1a:	4770      	bx	lr

10010d1c <init_gattc_task_module>:
10010d1c:	2300      	movs	r3, #0
10010d1e:	4a02      	ldr	r2, [pc, #8]	; (10010d28 <init_gattc_task_module+0xc>)
10010d20:	8013      	strh	r3, [r2, #0]
10010d22:	4a02      	ldr	r2, [pc, #8]	; (10010d2c <init_gattc_task_module+0x10>)
10010d24:	8013      	strh	r3, [r2, #0]
10010d26:	4770      	bx	lr
10010d28:	1001ab02 	.word	0x1001ab02
10010d2c:	1001ab04 	.word	0x1001ab04

10010d30 <gattm_add_svc_req_handler>:
10010d30:	2200      	movs	r2, #0
10010d32:	210b      	movs	r1, #11
10010d34:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d36:	1c04      	adds	r4, r0, #0
10010d38:	7943      	ldrb	r3, [r0, #5]
10010d3a:	b085      	sub	sp, #20
10010d3c:	9301      	str	r3, [sp, #4]
10010d3e:	ab02      	add	r3, sp, #8
10010d40:	71da      	strb	r2, [r3, #7]
10010d42:	4b37      	ldr	r3, [pc, #220]	; (10010e20 <gattm_add_svc_req_handler+0xf0>)
10010d44:	7059      	strb	r1, [r3, #1]
10010d46:	7099      	strb	r1, [r3, #2]
10010d48:	4936      	ldr	r1, [pc, #216]	; (10010e24 <gattm_add_svc_req_handler+0xf4>)
10010d4a:	701a      	strb	r2, [r3, #0]
10010d4c:	8808      	ldrh	r0, [r1, #0]
10010d4e:	8809      	ldrh	r1, [r1, #0]
10010d50:	70da      	strb	r2, [r3, #3]
10010d52:	0a09      	lsrs	r1, r1, #8
10010d54:	7118      	strb	r0, [r3, #4]
10010d56:	7159      	strb	r1, [r3, #5]
10010d58:	8821      	ldrh	r1, [r4, #0]
10010d5a:	7219      	strb	r1, [r3, #8]
10010d5c:	8821      	ldrh	r1, [r4, #0]
10010d5e:	0a09      	lsrs	r1, r1, #8
10010d60:	7259      	strb	r1, [r3, #9]
10010d62:	8861      	ldrh	r1, [r4, #2]
10010d64:	7299      	strb	r1, [r3, #10]
10010d66:	8861      	ldrh	r1, [r4, #2]
10010d68:	0a09      	lsrs	r1, r1, #8
10010d6a:	72d9      	strb	r1, [r3, #11]
10010d6c:	7921      	ldrb	r1, [r4, #4]
10010d6e:	7319      	strb	r1, [r3, #12]
10010d70:	4669      	mov	r1, sp
10010d72:	7909      	ldrb	r1, [r1, #4]
10010d74:	7359      	strb	r1, [r3, #13]
10010d76:	18a1      	adds	r1, r4, r2
10010d78:	7988      	ldrb	r0, [r1, #6]
10010d7a:	1899      	adds	r1, r3, r2
10010d7c:	3201      	adds	r2, #1
10010d7e:	7388      	strb	r0, [r1, #14]
10010d80:	2a10      	cmp	r2, #16
10010d82:	d1f8      	bne.n	10010d76 <gattm_add_svc_req_handler+0x46>
10010d84:	1c27      	adds	r7, r4, #0
10010d86:	2300      	movs	r3, #0
10010d88:	251e      	movs	r5, #30
10010d8a:	3716      	adds	r7, #22
10010d8c:	9300      	str	r3, [sp, #0]
10010d8e:	9b00      	ldr	r3, [sp, #0]
10010d90:	9a01      	ldr	r2, [sp, #4]
10010d92:	4e23      	ldr	r6, [pc, #140]	; (10010e20 <gattm_add_svc_req_handler+0xf0>)
10010d94:	4293      	cmp	r3, r2
10010d96:	da21      	bge.n	10010ddc <gattm_add_svc_req_handler+0xac>
10010d98:	1c39      	adds	r1, r7, #0
10010d9a:	1970      	adds	r0, r6, r5
10010d9c:	2210      	movs	r2, #16
10010d9e:	4b22      	ldr	r3, [pc, #136]	; (10010e28 <gattm_add_svc_req_handler+0xf8>)
10010da0:	4798      	blx	r3
10010da2:	1c2b      	adds	r3, r5, #0
10010da4:	8a3a      	ldrh	r2, [r7, #16]
10010da6:	3310      	adds	r3, #16
10010da8:	b29b      	uxth	r3, r3
10010daa:	54f2      	strb	r2, [r6, r3]
10010dac:	1c2b      	adds	r3, r5, #0
10010dae:	8a3a      	ldrh	r2, [r7, #16]
10010db0:	3311      	adds	r3, #17
10010db2:	b29b      	uxth	r3, r3
10010db4:	0a12      	lsrs	r2, r2, #8
10010db6:	54f2      	strb	r2, [r6, r3]
10010db8:	1c2a      	adds	r2, r5, #0
10010dba:	1c2b      	adds	r3, r5, #0
10010dbc:	8a79      	ldrh	r1, [r7, #18]
10010dbe:	3212      	adds	r2, #18
10010dc0:	b292      	uxth	r2, r2
10010dc2:	54b1      	strb	r1, [r6, r2]
10010dc4:	8a7a      	ldrh	r2, [r7, #18]
10010dc6:	3313      	adds	r3, #19
10010dc8:	b29b      	uxth	r3, r3
10010dca:	0a12      	lsrs	r2, r2, #8
10010dcc:	54f2      	strb	r2, [r6, r3]
10010dce:	9b00      	ldr	r3, [sp, #0]
10010dd0:	3514      	adds	r5, #20
10010dd2:	3301      	adds	r3, #1
10010dd4:	b2ad      	uxth	r5, r5
10010dd6:	9300      	str	r3, [sp, #0]
10010dd8:	3714      	adds	r7, #20
10010dda:	e7d8      	b.n	10010d8e <gattm_add_svc_req_handler+0x5e>
10010ddc:	2114      	movs	r1, #20
10010dde:	4d13      	ldr	r5, [pc, #76]	; (10010e2c <gattm_add_svc_req_handler+0xfc>)
10010de0:	4b13      	ldr	r3, [pc, #76]	; (10010e30 <gattm_add_svc_req_handler+0x100>)
10010de2:	4351      	muls	r1, r2
10010de4:	802b      	strh	r3, [r5, #0]
10010de6:	230b      	movs	r3, #11
10010de8:	311e      	adds	r1, #30
10010dea:	80ab      	strh	r3, [r5, #4]
10010dec:	1c0b      	adds	r3, r1, #0
10010dee:	3b08      	subs	r3, #8
10010df0:	71b3      	strb	r3, [r6, #6]
10010df2:	121b      	asrs	r3, r3, #8
10010df4:	71f3      	strb	r3, [r6, #7]
10010df6:	1c30      	adds	r0, r6, #0
10010df8:	4b0e      	ldr	r3, [pc, #56]	; (10010e34 <gattm_add_svc_req_handler+0x104>)
10010dfa:	4798      	blx	r3
10010dfc:	ab02      	add	r3, sp, #8
10010dfe:	1dde      	adds	r6, r3, #7
10010e00:	1c30      	adds	r0, r6, #0
10010e02:	4b0d      	ldr	r3, [pc, #52]	; (10010e38 <gattm_add_svc_req_handler+0x108>)
10010e04:	4798      	blx	r3
10010e06:	7833      	ldrb	r3, [r6, #0]
10010e08:	20e2      	movs	r0, #226	; 0xe2
10010e0a:	2b00      	cmp	r3, #0
10010e0c:	d106      	bne.n	10010e1c <gattm_add_svc_req_handler+0xec>
10010e0e:	68aa      	ldr	r2, [r5, #8]
10010e10:	7853      	ldrb	r3, [r2, #1]
10010e12:	7811      	ldrb	r1, [r2, #0]
10010e14:	021b      	lsls	r3, r3, #8
10010e16:	430b      	orrs	r3, r1
10010e18:	8023      	strh	r3, [r4, #0]
10010e1a:	7890      	ldrb	r0, [r2, #2]
10010e1c:	b005      	add	sp, #20
10010e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e20:	1001bd70 	.word	0x1001bd70
10010e24:	1001ba00 	.word	0x1001ba00
10010e28:	100122ab 	.word	0x100122ab
10010e2c:	1001b9f4 	.word	0x1001b9f4
10010e30:	00000b01 	.word	0x00000b01
10010e34:	1000f6fd 	.word	0x1000f6fd
10010e38:	1000f761 	.word	0x1000f761

10010e3c <gattm_add_attribute_req_handler>:
10010e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010e3e:	1c1f      	adds	r7, r3, #0
10010e40:	4b16      	ldr	r3, [pc, #88]	; (10010e9c <gattm_add_attribute_req_handler+0x60>)
10010e42:	9100      	str	r1, [sp, #0]
10010e44:	9201      	str	r2, [sp, #4]
10010e46:	1c05      	adds	r5, r0, #0
10010e48:	7946      	ldrb	r6, [r0, #5]
10010e4a:	6818      	ldr	r0, [r3, #0]
10010e4c:	2114      	movs	r1, #20
10010e4e:	4b14      	ldr	r3, [pc, #80]	; (10010ea0 <gattm_add_attribute_req_handler+0x64>)
10010e50:	382a      	subs	r0, #42	; 0x2a
10010e52:	4798      	blx	r3
10010e54:	2311      	movs	r3, #17
10010e56:	4286      	cmp	r6, r0
10010e58:	d21e      	bcs.n	10010e98 <gattm_add_attribute_req_handler+0x5c>
10010e5a:	2414      	movs	r4, #20
10010e5c:	4366      	muls	r6, r4
10010e5e:	19a8      	adds	r0, r5, r6
10010e60:	2100      	movs	r1, #0
10010e62:	2210      	movs	r2, #16
10010e64:	4b0f      	ldr	r3, [pc, #60]	; (10010ea4 <gattm_add_attribute_req_handler+0x68>)
10010e66:	3016      	adds	r0, #22
10010e68:	4798      	blx	r3
10010e6a:	7968      	ldrb	r0, [r5, #5]
10010e6c:	1c3a      	adds	r2, r7, #0
10010e6e:	4360      	muls	r0, r4
10010e70:	1828      	adds	r0, r5, r0
10010e72:	4b0d      	ldr	r3, [pc, #52]	; (10010ea8 <gattm_add_attribute_req_handler+0x6c>)
10010e74:	3016      	adds	r0, #22
10010e76:	9908      	ldr	r1, [sp, #32]
10010e78:	4798      	blx	r3
10010e7a:	466a      	mov	r2, sp
10010e7c:	796b      	ldrb	r3, [r5, #5]
10010e7e:	8812      	ldrh	r2, [r2, #0]
10010e80:	435c      	muls	r4, r3
10010e82:	192c      	adds	r4, r5, r4
10010e84:	8522      	strh	r2, [r4, #40]	; 0x28
10010e86:	466a      	mov	r2, sp
10010e88:	8892      	ldrh	r2, [r2, #4]
10010e8a:	84e2      	strh	r2, [r4, #38]	; 0x26
10010e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010e8e:	8013      	strh	r3, [r2, #0]
10010e90:	796b      	ldrb	r3, [r5, #5]
10010e92:	3301      	adds	r3, #1
10010e94:	716b      	strb	r3, [r5, #5]
10010e96:	2300      	movs	r3, #0
10010e98:	1c18      	adds	r0, r3, #0
10010e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010e9c:	1001aa78 	.word	0x1001aa78
10010ea0:	10014cf9 	.word	0x10014cf9
10010ea4:	100122bd 	.word	0x100122bd
10010ea8:	100122ab 	.word	0x100122ab

10010eac <gattm_att_set_value_req_handler>:
10010eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010eae:	466b      	mov	r3, sp
10010eb0:	1dde      	adds	r6, r3, #7
10010eb2:	2300      	movs	r3, #0
10010eb4:	1c0d      	adds	r5, r1, #0
10010eb6:	210c      	movs	r1, #12
10010eb8:	270b      	movs	r7, #11
10010eba:	4c17      	ldr	r4, [pc, #92]	; (10010f18 <gattm_att_set_value_req_handler+0x6c>)
10010ebc:	7033      	strb	r3, [r6, #0]
10010ebe:	70e3      	strb	r3, [r4, #3]
10010ec0:	4b16      	ldr	r3, [pc, #88]	; (10010f1c <gattm_att_set_value_req_handler+0x70>)
10010ec2:	7021      	strb	r1, [r4, #0]
10010ec4:	8819      	ldrh	r1, [r3, #0]
10010ec6:	881b      	ldrh	r3, [r3, #0]
10010ec8:	7220      	strb	r0, [r4, #8]
10010eca:	0a1b      	lsrs	r3, r3, #8
10010ecc:	7163      	strb	r3, [r4, #5]
10010ece:	0a00      	lsrs	r0, r0, #8
10010ed0:	0a2b      	lsrs	r3, r5, #8
10010ed2:	7121      	strb	r1, [r4, #4]
10010ed4:	7260      	strb	r0, [r4, #9]
10010ed6:	1c11      	adds	r1, r2, #0
10010ed8:	72a5      	strb	r5, [r4, #10]
10010eda:	1c2a      	adds	r2, r5, #0
10010edc:	72e3      	strb	r3, [r4, #11]
10010ede:	350c      	adds	r5, #12
10010ee0:	4b0f      	ldr	r3, [pc, #60]	; (10010f20 <gattm_att_set_value_req_handler+0x74>)
10010ee2:	4810      	ldr	r0, [pc, #64]	; (10010f24 <gattm_att_set_value_req_handler+0x78>)
10010ee4:	7067      	strb	r7, [r4, #1]
10010ee6:	70a7      	strb	r7, [r4, #2]
10010ee8:	4798      	blx	r3
10010eea:	b2a9      	uxth	r1, r5
10010eec:	4b0e      	ldr	r3, [pc, #56]	; (10010f28 <gattm_att_set_value_req_handler+0x7c>)
10010eee:	4d0f      	ldr	r5, [pc, #60]	; (10010f2c <gattm_att_set_value_req_handler+0x80>)
10010ef0:	1c20      	adds	r0, r4, #0
10010ef2:	802b      	strh	r3, [r5, #0]
10010ef4:	1c0b      	adds	r3, r1, #0
10010ef6:	3b08      	subs	r3, #8
10010ef8:	71a3      	strb	r3, [r4, #6]
10010efa:	121b      	asrs	r3, r3, #8
10010efc:	71e3      	strb	r3, [r4, #7]
10010efe:	4b0c      	ldr	r3, [pc, #48]	; (10010f30 <gattm_att_set_value_req_handler+0x84>)
10010f00:	80af      	strh	r7, [r5, #4]
10010f02:	4798      	blx	r3
10010f04:	1c30      	adds	r0, r6, #0
10010f06:	4b0b      	ldr	r3, [pc, #44]	; (10010f34 <gattm_att_set_value_req_handler+0x88>)
10010f08:	4798      	blx	r3
10010f0a:	7833      	ldrb	r3, [r6, #0]
10010f0c:	20e2      	movs	r0, #226	; 0xe2
10010f0e:	2b00      	cmp	r3, #0
10010f10:	d101      	bne.n	10010f16 <gattm_att_set_value_req_handler+0x6a>
10010f12:	68ab      	ldr	r3, [r5, #8]
10010f14:	7898      	ldrb	r0, [r3, #2]
10010f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010f18:	1001bd70 	.word	0x1001bd70
10010f1c:	1001ba00 	.word	0x1001ba00
10010f20:	100122ab 	.word	0x100122ab
10010f24:	1001bd7c 	.word	0x1001bd7c
10010f28:	00000b0d 	.word	0x00000b0d
10010f2c:	1001b9f4 	.word	0x1001b9f4
10010f30:	1000f6fd 	.word	0x1000f6fd
10010f34:	1000f761 	.word	0x1000f761

10010f38 <gattm_att_get_value_req_handler>:
10010f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f3a:	b085      	sub	sp, #20
10010f3c:	9201      	str	r2, [sp, #4]
10010f3e:	220a      	movs	r2, #10
10010f40:	1c04      	adds	r4, r0, #0
10010f42:	481d      	ldr	r0, [pc, #116]	; (10010fb8 <gattm_att_get_value_req_handler+0x80>)
10010f44:	ab02      	add	r3, sp, #8
10010f46:	1dde      	adds	r6, r3, #7
10010f48:	7002      	strb	r2, [r0, #0]
10010f4a:	2300      	movs	r3, #0
10010f4c:	220b      	movs	r2, #11
10010f4e:	4d1b      	ldr	r5, [pc, #108]	; (10010fbc <gattm_att_get_value_req_handler+0x84>)
10010f50:	1c0f      	adds	r7, r1, #0
10010f52:	8829      	ldrh	r1, [r5, #0]
10010f54:	882d      	ldrh	r5, [r5, #0]
10010f56:	7101      	strb	r1, [r0, #4]
10010f58:	0a2d      	lsrs	r5, r5, #8
10010f5a:	7145      	strb	r5, [r0, #5]
10010f5c:	0a25      	lsrs	r5, r4, #8
10010f5e:	7245      	strb	r5, [r0, #9]
10010f60:	4917      	ldr	r1, [pc, #92]	; (10010fc0 <gattm_att_get_value_req_handler+0x88>)
10010f62:	4d18      	ldr	r5, [pc, #96]	; (10010fc4 <gattm_att_get_value_req_handler+0x8c>)
10010f64:	7033      	strb	r3, [r6, #0]
10010f66:	7042      	strb	r2, [r0, #1]
10010f68:	7082      	strb	r2, [r0, #2]
10010f6a:	70c3      	strb	r3, [r0, #3]
10010f6c:	8029      	strh	r1, [r5, #0]
10010f6e:	80aa      	strh	r2, [r5, #4]
10010f70:	71c3      	strb	r3, [r0, #7]
10010f72:	3a09      	subs	r2, #9
10010f74:	210a      	movs	r1, #10
10010f76:	4b14      	ldr	r3, [pc, #80]	; (10010fc8 <gattm_att_get_value_req_handler+0x90>)
10010f78:	7182      	strb	r2, [r0, #6]
10010f7a:	7204      	strb	r4, [r0, #8]
10010f7c:	4798      	blx	r3
10010f7e:	1c30      	adds	r0, r6, #0
10010f80:	4b12      	ldr	r3, [pc, #72]	; (10010fcc <gattm_att_get_value_req_handler+0x94>)
10010f82:	4798      	blx	r3
10010f84:	7833      	ldrb	r3, [r6, #0]
10010f86:	20e2      	movs	r0, #226	; 0xe2
10010f88:	2b00      	cmp	r3, #0
10010f8a:	d112      	bne.n	10010fb2 <gattm_att_get_value_req_handler+0x7a>
10010f8c:	68a9      	ldr	r1, [r5, #8]
10010f8e:	9801      	ldr	r0, [sp, #4]
10010f90:	784d      	ldrb	r5, [r1, #1]
10010f92:	780b      	ldrb	r3, [r1, #0]
10010f94:	78ca      	ldrb	r2, [r1, #3]
10010f96:	022d      	lsls	r5, r5, #8
10010f98:	431d      	orrs	r5, r3
10010f9a:	788b      	ldrb	r3, [r1, #2]
10010f9c:	0212      	lsls	r2, r2, #8
10010f9e:	431a      	orrs	r2, r3
10010fa0:	803a      	strh	r2, [r7, #0]
10010fa2:	790e      	ldrb	r6, [r1, #4]
10010fa4:	4b0a      	ldr	r3, [pc, #40]	; (10010fd0 <gattm_att_get_value_req_handler+0x98>)
10010fa6:	3105      	adds	r1, #5
10010fa8:	4798      	blx	r3
10010faa:	20e2      	movs	r0, #226	; 0xe2
10010fac:	42ac      	cmp	r4, r5
10010fae:	d100      	bne.n	10010fb2 <gattm_att_get_value_req_handler+0x7a>
10010fb0:	1c30      	adds	r0, r6, #0
10010fb2:	b005      	add	sp, #20
10010fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010fb6:	46c0      	nop			; (mov r8, r8)
10010fb8:	1001bd70 	.word	0x1001bd70
10010fbc:	1001ba00 	.word	0x1001ba00
10010fc0:	00000b0b 	.word	0x00000b0b
10010fc4:	1001b9f4 	.word	0x1001b9f4
10010fc8:	1000f6fd 	.word	0x1000f6fd
10010fcc:	1000f761 	.word	0x1000f761
10010fd0:	100122ab 	.word	0x100122ab

10010fd4 <htpt_enable_rsp_handler>:
10010fd4:	780b      	ldrb	r3, [r1, #0]
10010fd6:	7013      	strb	r3, [r2, #0]
10010fd8:	784b      	ldrb	r3, [r1, #1]
10010fda:	7053      	strb	r3, [r2, #1]
10010fdc:	4770      	bx	lr

10010fde <htpt_temp_send_rsp_handler>:
10010fde:	780b      	ldrb	r3, [r1, #0]
10010fe0:	7013      	strb	r3, [r2, #0]
10010fe2:	4770      	bx	lr

10010fe4 <htpt_meas_intv_upd_rsp_handler>:
10010fe4:	780b      	ldrb	r3, [r1, #0]
10010fe6:	7013      	strb	r3, [r2, #0]
10010fe8:	4770      	bx	lr

10010fea <htpt_meas_intv_chg_req_ind_handler>:
10010fea:	78cb      	ldrb	r3, [r1, #3]
10010fec:	7889      	ldrb	r1, [r1, #2]
10010fee:	021b      	lsls	r3, r3, #8
10010ff0:	430b      	orrs	r3, r1
10010ff2:	8013      	strh	r3, [r2, #0]
10010ff4:	4770      	bx	lr

10010ff6 <htpt_cfg_indntf_ind_handler>:
10010ff6:	780b      	ldrb	r3, [r1, #0]
10010ff8:	7013      	strb	r3, [r2, #0]
10010ffa:	784b      	ldrb	r3, [r1, #1]
10010ffc:	7053      	strb	r3, [r2, #1]
10010ffe:	4770      	bx	lr

10011000 <pow>:
10011000:	b5f0      	push	{r4, r5, r6, r7, lr}
10011002:	465f      	mov	r7, fp
10011004:	464d      	mov	r5, r9
10011006:	4656      	mov	r6, sl
10011008:	4644      	mov	r4, r8
1001100a:	b4f0      	push	{r4, r5, r6, r7}
1001100c:	b091      	sub	sp, #68	; 0x44
1001100e:	001f      	movs	r7, r3
10011010:	0004      	movs	r4, r0
10011012:	000d      	movs	r5, r1
10011014:	0016      	movs	r6, r2
10011016:	f000 f9af 	bl	10011378 <__ieee754_pow>
1001101a:	4bcf      	ldr	r3, [pc, #828]	; (10011358 <pow+0x358>)
1001101c:	9002      	str	r0, [sp, #8]
1001101e:	9103      	str	r1, [sp, #12]
10011020:	469b      	mov	fp, r3
10011022:	781b      	ldrb	r3, [r3, #0]
10011024:	b25b      	sxtb	r3, r3
10011026:	4699      	mov	r9, r3
10011028:	3301      	adds	r3, #1
1001102a:	d04f      	beq.n	100110cc <pow+0xcc>
1001102c:	0032      	movs	r2, r6
1001102e:	003b      	movs	r3, r7
10011030:	0030      	movs	r0, r6
10011032:	0039      	movs	r1, r7
10011034:	f006 f830 	bl	10017098 <__aeabi_dcmpun>
10011038:	9000      	str	r0, [sp, #0]
1001103a:	2800      	cmp	r0, #0
1001103c:	d146      	bne.n	100110cc <pow+0xcc>
1001103e:	0022      	movs	r2, r4
10011040:	002b      	movs	r3, r5
10011042:	0020      	movs	r0, r4
10011044:	0029      	movs	r1, r5
10011046:	f006 f827 	bl	10017098 <__aeabi_dcmpun>
1001104a:	2200      	movs	r2, #0
1001104c:	4682      	mov	sl, r0
1001104e:	2800      	cmp	r0, #0
10011050:	d134      	bne.n	100110bc <pow+0xbc>
10011052:	2300      	movs	r3, #0
10011054:	0020      	movs	r0, r4
10011056:	0029      	movs	r1, r5
10011058:	f003 ffd4 	bl	10015004 <__aeabi_dcmpeq>
1001105c:	2800      	cmp	r0, #0
1001105e:	d03a      	beq.n	100110d6 <pow+0xd6>
10011060:	2200      	movs	r2, #0
10011062:	2300      	movs	r3, #0
10011064:	0030      	movs	r0, r6
10011066:	0039      	movs	r1, r7
10011068:	f003 ffcc 	bl	10015004 <__aeabi_dcmpeq>
1001106c:	9005      	str	r0, [sp, #20]
1001106e:	2800      	cmp	r0, #0
10011070:	d100      	bne.n	10011074 <pow+0x74>
10011072:	e074      	b.n	1001115e <pow+0x15e>
10011074:	ab06      	add	r3, sp, #24
10011076:	4698      	mov	r8, r3
10011078:	2301      	movs	r3, #1
1001107a:	4642      	mov	r2, r8
1001107c:	9306      	str	r3, [sp, #24]
1001107e:	4bb7      	ldr	r3, [pc, #732]	; (1001135c <pow+0x35c>)
10011080:	6053      	str	r3, [r2, #4]
10011082:	4643      	mov	r3, r8
10011084:	4652      	mov	r2, sl
10011086:	609c      	str	r4, [r3, #8]
10011088:	60dd      	str	r5, [r3, #12]
1001108a:	621a      	str	r2, [r3, #32]
1001108c:	611e      	str	r6, [r3, #16]
1001108e:	615f      	str	r7, [r3, #20]
10011090:	4642      	mov	r2, r8
10011092:	2300      	movs	r3, #0
10011094:	2400      	movs	r4, #0
10011096:	6193      	str	r3, [r2, #24]
10011098:	61d4      	str	r4, [r2, #28]
1001109a:	464b      	mov	r3, r9
1001109c:	2b00      	cmp	r3, #0
1001109e:	d100      	bne.n	100110a2 <pow+0xa2>
100110a0:	e094      	b.n	100111cc <pow+0x1cc>
100110a2:	2300      	movs	r3, #0
100110a4:	4cae      	ldr	r4, [pc, #696]	; (10011360 <pow+0x360>)
100110a6:	9300      	str	r3, [sp, #0]
100110a8:	9401      	str	r4, [sp, #4]
100110aa:	9800      	ldr	r0, [sp, #0]
100110ac:	9901      	ldr	r1, [sp, #4]
100110ae:	b011      	add	sp, #68	; 0x44
100110b0:	bc3c      	pop	{r2, r3, r4, r5}
100110b2:	4690      	mov	r8, r2
100110b4:	4699      	mov	r9, r3
100110b6:	46a2      	mov	sl, r4
100110b8:	46ab      	mov	fp, r5
100110ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110bc:	2300      	movs	r3, #0
100110be:	0030      	movs	r0, r6
100110c0:	0039      	movs	r1, r7
100110c2:	f003 ff9f 	bl	10015004 <__aeabi_dcmpeq>
100110c6:	2800      	cmp	r0, #0
100110c8:	d000      	beq.n	100110cc <pow+0xcc>
100110ca:	e0eb      	b.n	100112a4 <pow+0x2a4>
100110cc:	9b02      	ldr	r3, [sp, #8]
100110ce:	9c03      	ldr	r4, [sp, #12]
100110d0:	9300      	str	r3, [sp, #0]
100110d2:	9401      	str	r4, [sp, #4]
100110d4:	e7e9      	b.n	100110aa <pow+0xaa>
100110d6:	9802      	ldr	r0, [sp, #8]
100110d8:	9903      	ldr	r1, [sp, #12]
100110da:	f000 ff7d 	bl	10011fd8 <finite>
100110de:	4681      	mov	r9, r0
100110e0:	2800      	cmp	r0, #0
100110e2:	d100      	bne.n	100110e6 <pow+0xe6>
100110e4:	e086      	b.n	100111f4 <pow+0x1f4>
100110e6:	9802      	ldr	r0, [sp, #8]
100110e8:	9903      	ldr	r1, [sp, #12]
100110ea:	2200      	movs	r2, #0
100110ec:	2300      	movs	r3, #0
100110ee:	f003 ff89 	bl	10015004 <__aeabi_dcmpeq>
100110f2:	2800      	cmp	r0, #0
100110f4:	d0ea      	beq.n	100110cc <pow+0xcc>
100110f6:	0020      	movs	r0, r4
100110f8:	0029      	movs	r1, r5
100110fa:	f000 ff6d 	bl	10011fd8 <finite>
100110fe:	9a02      	ldr	r2, [sp, #8]
10011100:	9b03      	ldr	r3, [sp, #12]
10011102:	9200      	str	r2, [sp, #0]
10011104:	9301      	str	r3, [sp, #4]
10011106:	2800      	cmp	r0, #0
10011108:	d0cf      	beq.n	100110aa <pow+0xaa>
1001110a:	0030      	movs	r0, r6
1001110c:	0039      	movs	r1, r7
1001110e:	f000 ff63 	bl	10011fd8 <finite>
10011112:	9a02      	ldr	r2, [sp, #8]
10011114:	9b03      	ldr	r3, [sp, #12]
10011116:	9200      	str	r2, [sp, #0]
10011118:	9301      	str	r3, [sp, #4]
1001111a:	2800      	cmp	r0, #0
1001111c:	d0c5      	beq.n	100110aa <pow+0xaa>
1001111e:	ab06      	add	r3, sp, #24
10011120:	4698      	mov	r8, r3
10011122:	2304      	movs	r3, #4
10011124:	4642      	mov	r2, r8
10011126:	9306      	str	r3, [sp, #24]
10011128:	4b8c      	ldr	r3, [pc, #560]	; (1001135c <pow+0x35c>)
1001112a:	6094      	str	r4, [r2, #8]
1001112c:	60d5      	str	r5, [r2, #12]
1001112e:	6053      	str	r3, [r2, #4]
10011130:	2300      	movs	r3, #0
10011132:	2400      	movs	r4, #0
10011134:	6213      	str	r3, [r2, #32]
10011136:	2300      	movs	r3, #0
10011138:	6193      	str	r3, [r2, #24]
1001113a:	61d4      	str	r4, [r2, #28]
1001113c:	465b      	mov	r3, fp
1001113e:	781b      	ldrb	r3, [r3, #0]
10011140:	6116      	str	r6, [r2, #16]
10011142:	6157      	str	r7, [r2, #20]
10011144:	b25b      	sxtb	r3, r3
10011146:	2b02      	cmp	r3, #2
10011148:	d004      	beq.n	10011154 <pow+0x154>
1001114a:	4640      	mov	r0, r8
1001114c:	f000 ff4e 	bl	10011fec <matherr>
10011150:	2800      	cmp	r0, #0
10011152:	d140      	bne.n	100111d6 <pow+0x1d6>
10011154:	f001 f864 	bl	10012220 <__errno>
10011158:	2322      	movs	r3, #34	; 0x22
1001115a:	6003      	str	r3, [r0, #0]
1001115c:	e03b      	b.n	100111d6 <pow+0x1d6>
1001115e:	0030      	movs	r0, r6
10011160:	0039      	movs	r1, r7
10011162:	f000 ff39 	bl	10011fd8 <finite>
10011166:	9a02      	ldr	r2, [sp, #8]
10011168:	9b03      	ldr	r3, [sp, #12]
1001116a:	9200      	str	r2, [sp, #0]
1001116c:	9301      	str	r3, [sp, #4]
1001116e:	2800      	cmp	r0, #0
10011170:	d09b      	beq.n	100110aa <pow+0xaa>
10011172:	2200      	movs	r2, #0
10011174:	2300      	movs	r3, #0
10011176:	0030      	movs	r0, r6
10011178:	0039      	movs	r1, r7
1001117a:	f003 ff49 	bl	10015010 <__aeabi_dcmplt>
1001117e:	2800      	cmp	r0, #0
10011180:	d100      	bne.n	10011184 <pow+0x184>
10011182:	e792      	b.n	100110aa <pow+0xaa>
10011184:	ab06      	add	r3, sp, #24
10011186:	4698      	mov	r8, r3
10011188:	2301      	movs	r3, #1
1001118a:	4642      	mov	r2, r8
1001118c:	9306      	str	r3, [sp, #24]
1001118e:	4b73      	ldr	r3, [pc, #460]	; (1001135c <pow+0x35c>)
10011190:	6053      	str	r3, [r2, #4]
10011192:	4643      	mov	r3, r8
10011194:	9a05      	ldr	r2, [sp, #20]
10011196:	609c      	str	r4, [r3, #8]
10011198:	60dd      	str	r5, [r3, #12]
1001119a:	621a      	str	r2, [r3, #32]
1001119c:	611e      	str	r6, [r3, #16]
1001119e:	615f      	str	r7, [r3, #20]
100111a0:	465b      	mov	r3, fp
100111a2:	781b      	ldrb	r3, [r3, #0]
100111a4:	b25b      	sxtb	r3, r3
100111a6:	2b00      	cmp	r3, #0
100111a8:	d00b      	beq.n	100111c2 <pow+0x1c2>
100111aa:	2000      	movs	r0, #0
100111ac:	4642      	mov	r2, r8
100111ae:	496d      	ldr	r1, [pc, #436]	; (10011364 <pow+0x364>)
100111b0:	6190      	str	r0, [r2, #24]
100111b2:	61d1      	str	r1, [r2, #28]
100111b4:	2b02      	cmp	r3, #2
100111b6:	d109      	bne.n	100111cc <pow+0x1cc>
100111b8:	f001 f832 	bl	10012220 <__errno>
100111bc:	2321      	movs	r3, #33	; 0x21
100111be:	6003      	str	r3, [r0, #0]
100111c0:	e009      	b.n	100111d6 <pow+0x1d6>
100111c2:	4642      	mov	r2, r8
100111c4:	2300      	movs	r3, #0
100111c6:	2400      	movs	r4, #0
100111c8:	6193      	str	r3, [r2, #24]
100111ca:	61d4      	str	r4, [r2, #28]
100111cc:	4640      	mov	r0, r8
100111ce:	f000 ff0d 	bl	10011fec <matherr>
100111d2:	2800      	cmp	r0, #0
100111d4:	d0f0      	beq.n	100111b8 <pow+0x1b8>
100111d6:	4643      	mov	r3, r8
100111d8:	6a1b      	ldr	r3, [r3, #32]
100111da:	2b00      	cmp	r3, #0
100111dc:	d004      	beq.n	100111e8 <pow+0x1e8>
100111de:	f001 f81f 	bl	10012220 <__errno>
100111e2:	4643      	mov	r3, r8
100111e4:	6a1b      	ldr	r3, [r3, #32]
100111e6:	6003      	str	r3, [r0, #0]
100111e8:	4643      	mov	r3, r8
100111ea:	69dc      	ldr	r4, [r3, #28]
100111ec:	699b      	ldr	r3, [r3, #24]
100111ee:	9300      	str	r3, [sp, #0]
100111f0:	9401      	str	r4, [sp, #4]
100111f2:	e75a      	b.n	100110aa <pow+0xaa>
100111f4:	0020      	movs	r0, r4
100111f6:	0029      	movs	r1, r5
100111f8:	f000 feee 	bl	10011fd8 <finite>
100111fc:	2800      	cmp	r0, #0
100111fe:	d100      	bne.n	10011202 <pow+0x202>
10011200:	e771      	b.n	100110e6 <pow+0xe6>
10011202:	0030      	movs	r0, r6
10011204:	0039      	movs	r1, r7
10011206:	f000 fee7 	bl	10011fd8 <finite>
1001120a:	2800      	cmp	r0, #0
1001120c:	d100      	bne.n	10011210 <pow+0x210>
1001120e:	e76a      	b.n	100110e6 <pow+0xe6>
10011210:	9802      	ldr	r0, [sp, #8]
10011212:	9903      	ldr	r1, [sp, #12]
10011214:	000b      	movs	r3, r1
10011216:	0002      	movs	r2, r0
10011218:	f005 ff3e 	bl	10017098 <__aeabi_dcmpun>
1001121c:	ab06      	add	r3, sp, #24
1001121e:	4698      	mov	r8, r3
10011220:	2800      	cmp	r0, #0
10011222:	d17a      	bne.n	1001131a <pow+0x31a>
10011224:	2303      	movs	r3, #3
10011226:	4642      	mov	r2, r8
10011228:	9306      	str	r3, [sp, #24]
1001122a:	4b4c      	ldr	r3, [pc, #304]	; (1001135c <pow+0x35c>)
1001122c:	6210      	str	r0, [r2, #32]
1001122e:	6053      	str	r3, [r2, #4]
10011230:	465b      	mov	r3, fp
10011232:	781b      	ldrb	r3, [r3, #0]
10011234:	6094      	str	r4, [r2, #8]
10011236:	60d5      	str	r5, [r2, #12]
10011238:	b25b      	sxtb	r3, r3
1001123a:	6116      	str	r6, [r2, #16]
1001123c:	6157      	str	r7, [r2, #20]
1001123e:	4699      	mov	r9, r3
10011240:	2b00      	cmp	r3, #0
10011242:	d148      	bne.n	100112d6 <pow+0x2d6>
10011244:	22e0      	movs	r2, #224	; 0xe0
10011246:	4641      	mov	r1, r8
10011248:	4b47      	ldr	r3, [pc, #284]	; (10011368 <pow+0x368>)
1001124a:	0612      	lsls	r2, r2, #24
1001124c:	618a      	str	r2, [r1, #24]
1001124e:	61cb      	str	r3, [r1, #28]
10011250:	0020      	movs	r0, r4
10011252:	2200      	movs	r2, #0
10011254:	2300      	movs	r3, #0
10011256:	0029      	movs	r1, r5
10011258:	f003 feda 	bl	10015010 <__aeabi_dcmplt>
1001125c:	2800      	cmp	r0, #0
1001125e:	d100      	bne.n	10011262 <pow+0x262>
10011260:	e773      	b.n	1001114a <pow+0x14a>
10011262:	2200      	movs	r2, #0
10011264:	4b41      	ldr	r3, [pc, #260]	; (1001136c <pow+0x36c>)
10011266:	0030      	movs	r0, r6
10011268:	0039      	movs	r1, r7
1001126a:	f005 f947 	bl	100164fc <__aeabi_dmul>
1001126e:	0004      	movs	r4, r0
10011270:	000d      	movs	r5, r1
10011272:	f000 fec3 	bl	10011ffc <rint>
10011276:	0002      	movs	r2, r0
10011278:	000b      	movs	r3, r1
1001127a:	0020      	movs	r0, r4
1001127c:	0029      	movs	r1, r5
1001127e:	f003 fec1 	bl	10015004 <__aeabi_dcmpeq>
10011282:	2800      	cmp	r0, #0
10011284:	d105      	bne.n	10011292 <pow+0x292>
10011286:	22e0      	movs	r2, #224	; 0xe0
10011288:	4b39      	ldr	r3, [pc, #228]	; (10011370 <pow+0x370>)
1001128a:	0612      	lsls	r2, r2, #24
1001128c:	4641      	mov	r1, r8
1001128e:	618a      	str	r2, [r1, #24]
10011290:	61cb      	str	r3, [r1, #28]
10011292:	465b      	mov	r3, fp
10011294:	781b      	ldrb	r3, [r3, #0]
10011296:	b25b      	sxtb	r3, r3
10011298:	4699      	mov	r9, r3
1001129a:	464b      	mov	r3, r9
1001129c:	2b02      	cmp	r3, #2
1001129e:	d000      	beq.n	100112a2 <pow+0x2a2>
100112a0:	e753      	b.n	1001114a <pow+0x14a>
100112a2:	e757      	b.n	10011154 <pow+0x154>
100112a4:	ab06      	add	r3, sp, #24
100112a6:	4698      	mov	r8, r3
100112a8:	2301      	movs	r3, #1
100112aa:	4642      	mov	r2, r8
100112ac:	9306      	str	r3, [sp, #24]
100112ae:	4b2b      	ldr	r3, [pc, #172]	; (1001135c <pow+0x35c>)
100112b0:	6053      	str	r3, [r2, #4]
100112b2:	4643      	mov	r3, r8
100112b4:	609c      	str	r4, [r3, #8]
100112b6:	60dd      	str	r5, [r3, #12]
100112b8:	2400      	movs	r4, #0
100112ba:	9a00      	ldr	r2, [sp, #0]
100112bc:	4d28      	ldr	r5, [pc, #160]	; (10011360 <pow+0x360>)
100112be:	621a      	str	r2, [r3, #32]
100112c0:	611e      	str	r6, [r3, #16]
100112c2:	615f      	str	r7, [r3, #20]
100112c4:	619c      	str	r4, [r3, #24]
100112c6:	61dd      	str	r5, [r3, #28]
100112c8:	464b      	mov	r3, r9
100112ca:	9400      	str	r4, [sp, #0]
100112cc:	9501      	str	r5, [sp, #4]
100112ce:	2b02      	cmp	r3, #2
100112d0:	d000      	beq.n	100112d4 <pow+0x2d4>
100112d2:	e77b      	b.n	100111cc <pow+0x1cc>
100112d4:	e6e9      	b.n	100110aa <pow+0xaa>
100112d6:	2200      	movs	r2, #0
100112d8:	4641      	mov	r1, r8
100112da:	4b26      	ldr	r3, [pc, #152]	; (10011374 <pow+0x374>)
100112dc:	0020      	movs	r0, r4
100112de:	618a      	str	r2, [r1, #24]
100112e0:	61cb      	str	r3, [r1, #28]
100112e2:	2200      	movs	r2, #0
100112e4:	2300      	movs	r3, #0
100112e6:	0029      	movs	r1, r5
100112e8:	f003 fe92 	bl	10015010 <__aeabi_dcmplt>
100112ec:	2800      	cmp	r0, #0
100112ee:	d0d4      	beq.n	1001129a <pow+0x29a>
100112f0:	2200      	movs	r2, #0
100112f2:	4b1e      	ldr	r3, [pc, #120]	; (1001136c <pow+0x36c>)
100112f4:	0030      	movs	r0, r6
100112f6:	0039      	movs	r1, r7
100112f8:	f005 f900 	bl	100164fc <__aeabi_dmul>
100112fc:	0004      	movs	r4, r0
100112fe:	000d      	movs	r5, r1
10011300:	f000 fe7c 	bl	10011ffc <rint>
10011304:	0002      	movs	r2, r0
10011306:	000b      	movs	r3, r1
10011308:	0020      	movs	r0, r4
1001130a:	0029      	movs	r1, r5
1001130c:	f003 fe7a 	bl	10015004 <__aeabi_dcmpeq>
10011310:	2800      	cmp	r0, #0
10011312:	d1be      	bne.n	10011292 <pow+0x292>
10011314:	2200      	movs	r2, #0
10011316:	4b13      	ldr	r3, [pc, #76]	; (10011364 <pow+0x364>)
10011318:	e7b8      	b.n	1001128c <pow+0x28c>
1001131a:	2301      	movs	r3, #1
1001131c:	4642      	mov	r2, r8
1001131e:	9306      	str	r3, [sp, #24]
10011320:	4b0e      	ldr	r3, [pc, #56]	; (1001135c <pow+0x35c>)
10011322:	6053      	str	r3, [r2, #4]
10011324:	4643      	mov	r3, r8
10011326:	464a      	mov	r2, r9
10011328:	609c      	str	r4, [r3, #8]
1001132a:	60dd      	str	r5, [r3, #12]
1001132c:	621a      	str	r2, [r3, #32]
1001132e:	611e      	str	r6, [r3, #16]
10011330:	615f      	str	r7, [r3, #20]
10011332:	2400      	movs	r4, #0
10011334:	465b      	mov	r3, fp
10011336:	571c      	ldrsb	r4, [r3, r4]
10011338:	2c00      	cmp	r4, #0
1001133a:	d100      	bne.n	1001133e <pow+0x33e>
1001133c:	e741      	b.n	100111c2 <pow+0x1c2>
1001133e:	2300      	movs	r3, #0
10011340:	2200      	movs	r2, #0
10011342:	0019      	movs	r1, r3
10011344:	0010      	movs	r0, r2
10011346:	f004 fcb5 	bl	10015cb4 <__aeabi_ddiv>
1001134a:	4643      	mov	r3, r8
1001134c:	6198      	str	r0, [r3, #24]
1001134e:	61d9      	str	r1, [r3, #28]
10011350:	2c02      	cmp	r4, #2
10011352:	d100      	bne.n	10011356 <pow+0x356>
10011354:	e730      	b.n	100111b8 <pow+0x1b8>
10011356:	e739      	b.n	100111cc <pow+0x1cc>
10011358:	10018fb0 	.word	0x10018fb0
1001135c:	10018c6c 	.word	0x10018c6c
10011360:	3ff00000 	.word	0x3ff00000
10011364:	fff00000 	.word	0xfff00000
10011368:	47efffff 	.word	0x47efffff
1001136c:	3fe00000 	.word	0x3fe00000
10011370:	c7efffff 	.word	0xc7efffff
10011374:	7ff00000 	.word	0x7ff00000

10011378 <__ieee754_pow>:
10011378:	b5f0      	push	{r4, r5, r6, r7, lr}
1001137a:	4656      	mov	r6, sl
1001137c:	464d      	mov	r5, r9
1001137e:	4644      	mov	r4, r8
10011380:	465f      	mov	r7, fp
10011382:	b4f0      	push	{r4, r5, r6, r7}
10011384:	001c      	movs	r4, r3
10011386:	0013      	movs	r3, r2
10011388:	0067      	lsls	r7, r4, #1
1001138a:	b091      	sub	sp, #68	; 0x44
1001138c:	087f      	lsrs	r7, r7, #1
1001138e:	9300      	str	r3, [sp, #0]
10011390:	9401      	str	r4, [sp, #4]
10011392:	0006      	movs	r6, r0
10011394:	000d      	movs	r5, r1
10011396:	4680      	mov	r8, r0
10011398:	4689      	mov	r9, r1
1001139a:	46a2      	mov	sl, r4
1001139c:	433b      	orrs	r3, r7
1001139e:	d032      	beq.n	10011406 <__ieee754_pow+0x8e>
100113a0:	4b6e      	ldr	r3, [pc, #440]	; (1001155c <__ieee754_pow+0x1e4>)
100113a2:	006c      	lsls	r4, r5, #1
100113a4:	0864      	lsrs	r4, r4, #1
100113a6:	429c      	cmp	r4, r3
100113a8:	dc29      	bgt.n	100113fe <__ieee754_pow+0x86>
100113aa:	d026      	beq.n	100113fa <__ieee754_pow+0x82>
100113ac:	429f      	cmp	r7, r3
100113ae:	dc26      	bgt.n	100113fe <__ieee754_pow+0x86>
100113b0:	4b6a      	ldr	r3, [pc, #424]	; (1001155c <__ieee754_pow+0x1e4>)
100113b2:	429f      	cmp	r7, r3
100113b4:	d100      	bne.n	100113b8 <__ieee754_pow+0x40>
100113b6:	e089      	b.n	100114cc <__ieee754_pow+0x154>
100113b8:	2300      	movs	r3, #0
100113ba:	469b      	mov	fp, r3
100113bc:	464b      	mov	r3, r9
100113be:	2b00      	cmp	r3, #0
100113c0:	da00      	bge.n	100113c4 <__ieee754_pow+0x4c>
100113c2:	e087      	b.n	100114d4 <__ieee754_pow+0x15c>
100113c4:	2a00      	cmp	r2, #0
100113c6:	d12f      	bne.n	10011428 <__ieee754_pow+0xb0>
100113c8:	4b64      	ldr	r3, [pc, #400]	; (1001155c <__ieee754_pow+0x1e4>)
100113ca:	429f      	cmp	r7, r3
100113cc:	d100      	bne.n	100113d0 <__ieee754_pow+0x58>
100113ce:	e09f      	b.n	10011510 <__ieee754_pow+0x198>
100113d0:	4b63      	ldr	r3, [pc, #396]	; (10011560 <__ieee754_pow+0x1e8>)
100113d2:	429f      	cmp	r7, r3
100113d4:	d05d      	beq.n	10011492 <__ieee754_pow+0x11a>
100113d6:	2380      	movs	r3, #128	; 0x80
100113d8:	05db      	lsls	r3, r3, #23
100113da:	459a      	cmp	sl, r3
100113dc:	d101      	bne.n	100113e2 <__ieee754_pow+0x6a>
100113de:	f000 fbc1 	bl	10011b64 <__ieee754_pow+0x7ec>
100113e2:	4b60      	ldr	r3, [pc, #384]	; (10011564 <__ieee754_pow+0x1ec>)
100113e4:	459a      	cmp	sl, r3
100113e6:	d11f      	bne.n	10011428 <__ieee754_pow+0xb0>
100113e8:	464b      	mov	r3, r9
100113ea:	2b00      	cmp	r3, #0
100113ec:	db1c      	blt.n	10011428 <__ieee754_pow+0xb0>
100113ee:	0030      	movs	r0, r6
100113f0:	0029      	movs	r1, r5
100113f2:	f000 fcf7 	bl	10011de4 <__ieee754_sqrt>
100113f6:	0006      	movs	r6, r0
100113f8:	e007      	b.n	1001140a <__ieee754_pow+0x92>
100113fa:	2800      	cmp	r0, #0
100113fc:	d00d      	beq.n	1001141a <__ieee754_pow+0xa2>
100113fe:	4b5a      	ldr	r3, [pc, #360]	; (10011568 <__ieee754_pow+0x1f0>)
10011400:	18e0      	adds	r0, r4, r3
10011402:	4330      	orrs	r0, r6
10011404:	d10b      	bne.n	1001141e <__ieee754_pow+0xa6>
10011406:	2600      	movs	r6, #0
10011408:	4955      	ldr	r1, [pc, #340]	; (10011560 <__ieee754_pow+0x1e8>)
1001140a:	0030      	movs	r0, r6
1001140c:	b011      	add	sp, #68	; 0x44
1001140e:	bc3c      	pop	{r2, r3, r4, r5}
10011410:	4690      	mov	r8, r2
10011412:	4699      	mov	r9, r3
10011414:	46a2      	mov	sl, r4
10011416:	46ab      	mov	fp, r5
10011418:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001141a:	42a7      	cmp	r7, r4
1001141c:	ddc8      	ble.n	100113b0 <__ieee754_pow+0x38>
1001141e:	4853      	ldr	r0, [pc, #332]	; (1001156c <__ieee754_pow+0x1f4>)
10011420:	f000 fde6 	bl	10011ff0 <nan>
10011424:	0006      	movs	r6, r0
10011426:	e7f0      	b.n	1001140a <__ieee754_pow+0x92>
10011428:	0030      	movs	r0, r6
1001142a:	0029      	movs	r1, r5
1001142c:	f000 fdd0 	bl	10011fd0 <fabs>
10011430:	4643      	mov	r3, r8
10011432:	2b00      	cmp	r3, #0
10011434:	d01d      	beq.n	10011472 <__ieee754_pow+0xfa>
10011436:	0feb      	lsrs	r3, r5, #31
10011438:	3b01      	subs	r3, #1
1001143a:	4698      	mov	r8, r3
1001143c:	465b      	mov	r3, fp
1001143e:	4642      	mov	r2, r8
10011440:	4313      	orrs	r3, r2
10011442:	d079      	beq.n	10011538 <__ieee754_pow+0x1c0>
10011444:	4b4a      	ldr	r3, [pc, #296]	; (10011570 <__ieee754_pow+0x1f8>)
10011446:	429f      	cmp	r7, r3
10011448:	dc00      	bgt.n	1001144c <__ieee754_pow+0xd4>
1001144a:	e09f      	b.n	1001158c <__ieee754_pow+0x214>
1001144c:	4b49      	ldr	r3, [pc, #292]	; (10011574 <__ieee754_pow+0x1fc>)
1001144e:	429f      	cmp	r7, r3
10011450:	dc01      	bgt.n	10011456 <__ieee754_pow+0xde>
10011452:	f000 fbce 	bl	10011bf2 <__ieee754_pow+0x87a>
10011456:	4b48      	ldr	r3, [pc, #288]	; (10011578 <__ieee754_pow+0x200>)
10011458:	429c      	cmp	r4, r3
1001145a:	dd79      	ble.n	10011550 <__ieee754_pow+0x1d8>
1001145c:	4653      	mov	r3, sl
1001145e:	2b00      	cmp	r3, #0
10011460:	dd79      	ble.n	10011556 <__ieee754_pow+0x1de>
10011462:	4a46      	ldr	r2, [pc, #280]	; (1001157c <__ieee754_pow+0x204>)
10011464:	4b46      	ldr	r3, [pc, #280]	; (10011580 <__ieee754_pow+0x208>)
10011466:	0010      	movs	r0, r2
10011468:	0019      	movs	r1, r3
1001146a:	f005 f847 	bl	100164fc <__aeabi_dmul>
1001146e:	0006      	movs	r6, r0
10011470:	e7cb      	b.n	1001140a <__ieee754_pow+0x92>
10011472:	2c00      	cmp	r4, #0
10011474:	d004      	beq.n	10011480 <__ieee754_pow+0x108>
10011476:	4a3a      	ldr	r2, [pc, #232]	; (10011560 <__ieee754_pow+0x1e8>)
10011478:	00ab      	lsls	r3, r5, #2
1001147a:	089b      	lsrs	r3, r3, #2
1001147c:	4293      	cmp	r3, r2
1001147e:	d1da      	bne.n	10011436 <__ieee754_pow+0xbe>
10011480:	4653      	mov	r3, sl
10011482:	2b00      	cmp	r3, #0
10011484:	da00      	bge.n	10011488 <__ieee754_pow+0x110>
10011486:	e3ad      	b.n	10011be4 <__ieee754_pow+0x86c>
10011488:	464b      	mov	r3, r9
1001148a:	2b00      	cmp	r3, #0
1001148c:	db0d      	blt.n	100114aa <__ieee754_pow+0x132>
1001148e:	0006      	movs	r6, r0
10011490:	e7bb      	b.n	1001140a <__ieee754_pow+0x92>
10011492:	4653      	mov	r3, sl
10011494:	0029      	movs	r1, r5
10011496:	2b00      	cmp	r3, #0
10011498:	dab7      	bge.n	1001140a <__ieee754_pow+0x92>
1001149a:	0032      	movs	r2, r6
1001149c:	002b      	movs	r3, r5
1001149e:	2000      	movs	r0, #0
100114a0:	492f      	ldr	r1, [pc, #188]	; (10011560 <__ieee754_pow+0x1e8>)
100114a2:	f004 fc07 	bl	10015cb4 <__aeabi_ddiv>
100114a6:	0006      	movs	r6, r0
100114a8:	e7af      	b.n	1001140a <__ieee754_pow+0x92>
100114aa:	4b2f      	ldr	r3, [pc, #188]	; (10011568 <__ieee754_pow+0x1f0>)
100114ac:	469c      	mov	ip, r3
100114ae:	465b      	mov	r3, fp
100114b0:	4464      	add	r4, ip
100114b2:	431c      	orrs	r4, r3
100114b4:	d101      	bne.n	100114ba <__ieee754_pow+0x142>
100114b6:	f000 fc2b 	bl	10011d10 <__ieee754_pow+0x998>
100114ba:	465b      	mov	r3, fp
100114bc:	0006      	movs	r6, r0
100114be:	2b01      	cmp	r3, #1
100114c0:	d1a3      	bne.n	1001140a <__ieee754_pow+0x92>
100114c2:	2380      	movs	r3, #128	; 0x80
100114c4:	061b      	lsls	r3, r3, #24
100114c6:	469c      	mov	ip, r3
100114c8:	4461      	add	r1, ip
100114ca:	e79e      	b.n	1001140a <__ieee754_pow+0x92>
100114cc:	2a00      	cmp	r2, #0
100114ce:	d100      	bne.n	100114d2 <__ieee754_pow+0x15a>
100114d0:	e772      	b.n	100113b8 <__ieee754_pow+0x40>
100114d2:	e794      	b.n	100113fe <__ieee754_pow+0x86>
100114d4:	4b2b      	ldr	r3, [pc, #172]	; (10011584 <__ieee754_pow+0x20c>)
100114d6:	429f      	cmp	r7, r3
100114d8:	dc2b      	bgt.n	10011532 <__ieee754_pow+0x1ba>
100114da:	4b27      	ldr	r3, [pc, #156]	; (10011578 <__ieee754_pow+0x200>)
100114dc:	429f      	cmp	r7, r3
100114de:	dc00      	bgt.n	100114e2 <__ieee754_pow+0x16a>
100114e0:	e770      	b.n	100113c4 <__ieee754_pow+0x4c>
100114e2:	4929      	ldr	r1, [pc, #164]	; (10011588 <__ieee754_pow+0x210>)
100114e4:	153b      	asrs	r3, r7, #20
100114e6:	468c      	mov	ip, r1
100114e8:	4463      	add	r3, ip
100114ea:	2b14      	cmp	r3, #20
100114ec:	dc01      	bgt.n	100114f2 <__ieee754_pow+0x17a>
100114ee:	f000 fbf2 	bl	10011cd6 <__ieee754_pow+0x95e>
100114f2:	2134      	movs	r1, #52	; 0x34
100114f4:	1acb      	subs	r3, r1, r3
100114f6:	9900      	ldr	r1, [sp, #0]
100114f8:	40d9      	lsrs	r1, r3
100114fa:	0008      	movs	r0, r1
100114fc:	4098      	lsls	r0, r3
100114fe:	4282      	cmp	r2, r0
10011500:	d000      	beq.n	10011504 <__ieee754_pow+0x18c>
10011502:	e75f      	b.n	100113c4 <__ieee754_pow+0x4c>
10011504:	2301      	movs	r3, #1
10011506:	4019      	ands	r1, r3
10011508:	3301      	adds	r3, #1
1001150a:	1a5b      	subs	r3, r3, r1
1001150c:	469b      	mov	fp, r3
1001150e:	e759      	b.n	100113c4 <__ieee754_pow+0x4c>
10011510:	4b15      	ldr	r3, [pc, #84]	; (10011568 <__ieee754_pow+0x1f0>)
10011512:	18e0      	adds	r0, r4, r3
10011514:	4306      	orrs	r6, r0
10011516:	d100      	bne.n	1001151a <__ieee754_pow+0x1a2>
10011518:	e775      	b.n	10011406 <__ieee754_pow+0x8e>
1001151a:	4b17      	ldr	r3, [pc, #92]	; (10011578 <__ieee754_pow+0x200>)
1001151c:	429c      	cmp	r4, r3
1001151e:	dc00      	bgt.n	10011522 <__ieee754_pow+0x1aa>
10011520:	e351      	b.n	10011bc6 <__ieee754_pow+0x84e>
10011522:	4653      	mov	r3, sl
10011524:	2b00      	cmp	r3, #0
10011526:	db16      	blt.n	10011556 <__ieee754_pow+0x1de>
10011528:	9b00      	ldr	r3, [sp, #0]
1001152a:	9c01      	ldr	r4, [sp, #4]
1001152c:	001e      	movs	r6, r3
1001152e:	0021      	movs	r1, r4
10011530:	e76b      	b.n	1001140a <__ieee754_pow+0x92>
10011532:	2302      	movs	r3, #2
10011534:	469b      	mov	fp, r3
10011536:	e745      	b.n	100113c4 <__ieee754_pow+0x4c>
10011538:	0032      	movs	r2, r6
1001153a:	002b      	movs	r3, r5
1001153c:	0030      	movs	r0, r6
1001153e:	0029      	movs	r1, r5
10011540:	f005 fa56 	bl	100169f0 <__aeabi_dsub>
10011544:	0002      	movs	r2, r0
10011546:	000b      	movs	r3, r1
10011548:	f004 fbb4 	bl	10015cb4 <__aeabi_ddiv>
1001154c:	0006      	movs	r6, r0
1001154e:	e75c      	b.n	1001140a <__ieee754_pow+0x92>
10011550:	4653      	mov	r3, sl
10011552:	2b00      	cmp	r3, #0
10011554:	db85      	blt.n	10011462 <__ieee754_pow+0xea>
10011556:	2600      	movs	r6, #0
10011558:	2100      	movs	r1, #0
1001155a:	e756      	b.n	1001140a <__ieee754_pow+0x92>
1001155c:	7ff00000 	.word	0x7ff00000
10011560:	3ff00000 	.word	0x3ff00000
10011564:	3fe00000 	.word	0x3fe00000
10011568:	c0100000 	.word	0xc0100000
1001156c:	100183c4 	.word	0x100183c4
10011570:	41e00000 	.word	0x41e00000
10011574:	43f00000 	.word	0x43f00000
10011578:	3fefffff 	.word	0x3fefffff
1001157c:	8800759c 	.word	0x8800759c
10011580:	7e37e43c 	.word	0x7e37e43c
10011584:	433fffff 	.word	0x433fffff
10011588:	fffffc01 	.word	0xfffffc01
1001158c:	4be8      	ldr	r3, [pc, #928]	; (10011930 <__ieee754_pow+0x5b8>)
1001158e:	2200      	movs	r2, #0
10011590:	429c      	cmp	r4, r3
10011592:	dc06      	bgt.n	100115a2 <__ieee754_pow+0x22a>
10011594:	2200      	movs	r2, #0
10011596:	4be7      	ldr	r3, [pc, #924]	; (10011934 <__ieee754_pow+0x5bc>)
10011598:	f004 ffb0 	bl	100164fc <__aeabi_dmul>
1001159c:	2235      	movs	r2, #53	; 0x35
1001159e:	000c      	movs	r4, r1
100115a0:	4252      	negs	r2, r2
100115a2:	4de5      	ldr	r5, [pc, #916]	; (10011938 <__ieee754_pow+0x5c0>)
100115a4:	1523      	asrs	r3, r4, #20
100115a6:	46ac      	mov	ip, r5
100115a8:	4463      	add	r3, ip
100115aa:	4699      	mov	r9, r3
100115ac:	0324      	lsls	r4, r4, #12
100115ae:	4de3      	ldr	r5, [pc, #908]	; (1001193c <__ieee754_pow+0x5c4>)
100115b0:	4be3      	ldr	r3, [pc, #908]	; (10011940 <__ieee754_pow+0x5c8>)
100115b2:	0b24      	lsrs	r4, r4, #12
100115b4:	4491      	add	r9, r2
100115b6:	4325      	orrs	r5, r4
100115b8:	429c      	cmp	r4, r3
100115ba:	dd09      	ble.n	100115d0 <__ieee754_pow+0x258>
100115bc:	4be1      	ldr	r3, [pc, #900]	; (10011944 <__ieee754_pow+0x5cc>)
100115be:	429c      	cmp	r4, r3
100115c0:	dc00      	bgt.n	100115c4 <__ieee754_pow+0x24c>
100115c2:	e3a9      	b.n	10011d18 <__ieee754_pow+0x9a0>
100115c4:	2301      	movs	r3, #1
100115c6:	469c      	mov	ip, r3
100115c8:	4bdf      	ldr	r3, [pc, #892]	; (10011948 <__ieee754_pow+0x5d0>)
100115ca:	44e1      	add	r9, ip
100115cc:	469c      	mov	ip, r3
100115ce:	4465      	add	r5, ip
100115d0:	2300      	movs	r3, #0
100115d2:	2400      	movs	r4, #0
100115d4:	2200      	movs	r2, #0
100115d6:	9308      	str	r3, [sp, #32]
100115d8:	9409      	str	r4, [sp, #36]	; 0x24
100115da:	930c      	str	r3, [sp, #48]	; 0x30
100115dc:	940d      	str	r4, [sp, #52]	; 0x34
100115de:	2400      	movs	r4, #0
100115e0:	4bd6      	ldr	r3, [pc, #856]	; (1001193c <__ieee754_pow+0x5c4>)
100115e2:	9206      	str	r2, [sp, #24]
100115e4:	9307      	str	r3, [sp, #28]
100115e6:	9a06      	ldr	r2, [sp, #24]
100115e8:	9b07      	ldr	r3, [sp, #28]
100115ea:	0029      	movs	r1, r5
100115ec:	900a      	str	r0, [sp, #40]	; 0x28
100115ee:	910b      	str	r1, [sp, #44]	; 0x2c
100115f0:	f005 f9fe 	bl	100169f0 <__aeabi_dsub>
100115f4:	9a06      	ldr	r2, [sp, #24]
100115f6:	9b07      	ldr	r3, [sp, #28]
100115f8:	0006      	movs	r6, r0
100115fa:	000f      	movs	r7, r1
100115fc:	980a      	ldr	r0, [sp, #40]	; 0x28
100115fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011600:	f004 f82c 	bl	1001565c <__aeabi_dadd>
10011604:	0002      	movs	r2, r0
10011606:	000b      	movs	r3, r1
10011608:	2000      	movs	r0, #0
1001160a:	49cc      	ldr	r1, [pc, #816]	; (1001193c <__ieee754_pow+0x5c4>)
1001160c:	f004 fb52 	bl	10015cb4 <__aeabi_ddiv>
10011610:	000a      	movs	r2, r1
10011612:	0001      	movs	r1, r0
10011614:	0013      	movs	r3, r2
10011616:	910e      	str	r1, [sp, #56]	; 0x38
10011618:	920f      	str	r2, [sp, #60]	; 0x3c
1001161a:	0002      	movs	r2, r0
1001161c:	0039      	movs	r1, r7
1001161e:	0030      	movs	r0, r6
10011620:	f004 ff6c 	bl	100164fc <__aeabi_dmul>
10011624:	000a      	movs	r2, r1
10011626:	0001      	movs	r1, r0
10011628:	2080      	movs	r0, #128	; 0x80
1001162a:	9104      	str	r1, [sp, #16]
1001162c:	9205      	str	r2, [sp, #20]
1001162e:	0013      	movs	r3, r2
10011630:	2200      	movs	r2, #0
10011632:	2180      	movs	r1, #128	; 0x80
10011634:	0300      	lsls	r0, r0, #12
10011636:	4684      	mov	ip, r0
10011638:	9202      	str	r2, [sp, #8]
1001163a:	9303      	str	r3, [sp, #12]
1001163c:	2200      	movs	r2, #0
1001163e:	0589      	lsls	r1, r1, #22
10011640:	106d      	asrs	r5, r5, #1
10011642:	430d      	orrs	r5, r1
10011644:	4465      	add	r5, ip
10011646:	192b      	adds	r3, r5, r4
10011648:	9802      	ldr	r0, [sp, #8]
1001164a:	9903      	ldr	r1, [sp, #12]
1001164c:	0014      	movs	r4, r2
1001164e:	001d      	movs	r5, r3
10011650:	f004 ff54 	bl	100164fc <__aeabi_dmul>
10011654:	0002      	movs	r2, r0
10011656:	000b      	movs	r3, r1
10011658:	0030      	movs	r0, r6
1001165a:	0039      	movs	r1, r7
1001165c:	f005 f9c8 	bl	100169f0 <__aeabi_dsub>
10011660:	9a06      	ldr	r2, [sp, #24]
10011662:	9b07      	ldr	r3, [sp, #28]
10011664:	0006      	movs	r6, r0
10011666:	000f      	movs	r7, r1
10011668:	0020      	movs	r0, r4
1001166a:	0029      	movs	r1, r5
1001166c:	f005 f9c0 	bl	100169f0 <__aeabi_dsub>
10011670:	0002      	movs	r2, r0
10011672:	000b      	movs	r3, r1
10011674:	980a      	ldr	r0, [sp, #40]	; 0x28
10011676:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011678:	f005 f9ba 	bl	100169f0 <__aeabi_dsub>
1001167c:	9a02      	ldr	r2, [sp, #8]
1001167e:	9b03      	ldr	r3, [sp, #12]
10011680:	f004 ff3c 	bl	100164fc <__aeabi_dmul>
10011684:	0002      	movs	r2, r0
10011686:	000b      	movs	r3, r1
10011688:	0030      	movs	r0, r6
1001168a:	0039      	movs	r1, r7
1001168c:	f005 f9b0 	bl	100169f0 <__aeabi_dsub>
10011690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011694:	f004 ff32 	bl	100164fc <__aeabi_dmul>
10011698:	9d04      	ldr	r5, [sp, #16]
1001169a:	9e05      	ldr	r6, [sp, #20]
1001169c:	9006      	str	r0, [sp, #24]
1001169e:	9107      	str	r1, [sp, #28]
100116a0:	002a      	movs	r2, r5
100116a2:	0033      	movs	r3, r6
100116a4:	0028      	movs	r0, r5
100116a6:	0031      	movs	r1, r6
100116a8:	f004 ff28 	bl	100164fc <__aeabi_dmul>
100116ac:	0006      	movs	r6, r0
100116ae:	000f      	movs	r7, r1
100116b0:	4aa6      	ldr	r2, [pc, #664]	; (1001194c <__ieee754_pow+0x5d4>)
100116b2:	4ba7      	ldr	r3, [pc, #668]	; (10011950 <__ieee754_pow+0x5d8>)
100116b4:	f004 ff22 	bl	100164fc <__aeabi_dmul>
100116b8:	4aa6      	ldr	r2, [pc, #664]	; (10011954 <__ieee754_pow+0x5dc>)
100116ba:	4ba7      	ldr	r3, [pc, #668]	; (10011958 <__ieee754_pow+0x5e0>)
100116bc:	f003 ffce 	bl	1001565c <__aeabi_dadd>
100116c0:	0032      	movs	r2, r6
100116c2:	003b      	movs	r3, r7
100116c4:	f004 ff1a 	bl	100164fc <__aeabi_dmul>
100116c8:	4aa4      	ldr	r2, [pc, #656]	; (1001195c <__ieee754_pow+0x5e4>)
100116ca:	4ba5      	ldr	r3, [pc, #660]	; (10011960 <__ieee754_pow+0x5e8>)
100116cc:	f003 ffc6 	bl	1001565c <__aeabi_dadd>
100116d0:	0032      	movs	r2, r6
100116d2:	003b      	movs	r3, r7
100116d4:	f004 ff12 	bl	100164fc <__aeabi_dmul>
100116d8:	4aa2      	ldr	r2, [pc, #648]	; (10011964 <__ieee754_pow+0x5ec>)
100116da:	4ba3      	ldr	r3, [pc, #652]	; (10011968 <__ieee754_pow+0x5f0>)
100116dc:	f003 ffbe 	bl	1001565c <__aeabi_dadd>
100116e0:	0032      	movs	r2, r6
100116e2:	003b      	movs	r3, r7
100116e4:	f004 ff0a 	bl	100164fc <__aeabi_dmul>
100116e8:	4aa0      	ldr	r2, [pc, #640]	; (1001196c <__ieee754_pow+0x5f4>)
100116ea:	4ba1      	ldr	r3, [pc, #644]	; (10011970 <__ieee754_pow+0x5f8>)
100116ec:	f003 ffb6 	bl	1001565c <__aeabi_dadd>
100116f0:	0032      	movs	r2, r6
100116f2:	003b      	movs	r3, r7
100116f4:	f004 ff02 	bl	100164fc <__aeabi_dmul>
100116f8:	4a9e      	ldr	r2, [pc, #632]	; (10011974 <__ieee754_pow+0x5fc>)
100116fa:	4b9f      	ldr	r3, [pc, #636]	; (10011978 <__ieee754_pow+0x600>)
100116fc:	f003 ffae 	bl	1001565c <__aeabi_dadd>
10011700:	0032      	movs	r2, r6
10011702:	0004      	movs	r4, r0
10011704:	000d      	movs	r5, r1
10011706:	003b      	movs	r3, r7
10011708:	0030      	movs	r0, r6
1001170a:	0039      	movs	r1, r7
1001170c:	f004 fef6 	bl	100164fc <__aeabi_dmul>
10011710:	0002      	movs	r2, r0
10011712:	000b      	movs	r3, r1
10011714:	0020      	movs	r0, r4
10011716:	0029      	movs	r1, r5
10011718:	f004 fef0 	bl	100164fc <__aeabi_dmul>
1001171c:	9e02      	ldr	r6, [sp, #8]
1001171e:	9f03      	ldr	r7, [sp, #12]
10011720:	0004      	movs	r4, r0
10011722:	000d      	movs	r5, r1
10011724:	9804      	ldr	r0, [sp, #16]
10011726:	9905      	ldr	r1, [sp, #20]
10011728:	0032      	movs	r2, r6
1001172a:	003b      	movs	r3, r7
1001172c:	f003 ff96 	bl	1001565c <__aeabi_dadd>
10011730:	9a06      	ldr	r2, [sp, #24]
10011732:	9b07      	ldr	r3, [sp, #28]
10011734:	f004 fee2 	bl	100164fc <__aeabi_dmul>
10011738:	0022      	movs	r2, r4
1001173a:	002b      	movs	r3, r5
1001173c:	f003 ff8e 	bl	1001565c <__aeabi_dadd>
10011740:	0032      	movs	r2, r6
10011742:	900a      	str	r0, [sp, #40]	; 0x28
10011744:	910b      	str	r1, [sp, #44]	; 0x2c
10011746:	003b      	movs	r3, r7
10011748:	0030      	movs	r0, r6
1001174a:	0039      	movs	r1, r7
1001174c:	9602      	str	r6, [sp, #8]
1001174e:	9703      	str	r7, [sp, #12]
10011750:	f004 fed4 	bl	100164fc <__aeabi_dmul>
10011754:	2200      	movs	r2, #0
10011756:	4b89      	ldr	r3, [pc, #548]	; (1001197c <__ieee754_pow+0x604>)
10011758:	0004      	movs	r4, r0
1001175a:	000d      	movs	r5, r1
1001175c:	f003 ff7e 	bl	1001565c <__aeabi_dadd>
10011760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011764:	f003 ff7a 	bl	1001565c <__aeabi_dadd>
10011768:	2600      	movs	r6, #0
1001176a:	000f      	movs	r7, r1
1001176c:	0032      	movs	r2, r6
1001176e:	000b      	movs	r3, r1
10011770:	9802      	ldr	r0, [sp, #8]
10011772:	9903      	ldr	r1, [sp, #12]
10011774:	f004 fec2 	bl	100164fc <__aeabi_dmul>
10011778:	2200      	movs	r2, #0
1001177a:	9002      	str	r0, [sp, #8]
1001177c:	9103      	str	r1, [sp, #12]
1001177e:	4b7f      	ldr	r3, [pc, #508]	; (1001197c <__ieee754_pow+0x604>)
10011780:	0030      	movs	r0, r6
10011782:	0039      	movs	r1, r7
10011784:	f005 f934 	bl	100169f0 <__aeabi_dsub>
10011788:	0022      	movs	r2, r4
1001178a:	002b      	movs	r3, r5
1001178c:	f005 f930 	bl	100169f0 <__aeabi_dsub>
10011790:	0002      	movs	r2, r0
10011792:	000b      	movs	r3, r1
10011794:	980a      	ldr	r0, [sp, #40]	; 0x28
10011796:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011798:	f005 f92a 	bl	100169f0 <__aeabi_dsub>
1001179c:	9a04      	ldr	r2, [sp, #16]
1001179e:	9b05      	ldr	r3, [sp, #20]
100117a0:	f004 feac 	bl	100164fc <__aeabi_dmul>
100117a4:	0032      	movs	r2, r6
100117a6:	0004      	movs	r4, r0
100117a8:	000d      	movs	r5, r1
100117aa:	9806      	ldr	r0, [sp, #24]
100117ac:	9907      	ldr	r1, [sp, #28]
100117ae:	003b      	movs	r3, r7
100117b0:	f004 fea4 	bl	100164fc <__aeabi_dmul>
100117b4:	0002      	movs	r2, r0
100117b6:	000b      	movs	r3, r1
100117b8:	0020      	movs	r0, r4
100117ba:	0029      	movs	r1, r5
100117bc:	f003 ff4e 	bl	1001565c <__aeabi_dadd>
100117c0:	0004      	movs	r4, r0
100117c2:	000d      	movs	r5, r1
100117c4:	0002      	movs	r2, r0
100117c6:	000b      	movs	r3, r1
100117c8:	9802      	ldr	r0, [sp, #8]
100117ca:	9903      	ldr	r1, [sp, #12]
100117cc:	f003 ff46 	bl	1001565c <__aeabi_dadd>
100117d0:	2600      	movs	r6, #0
100117d2:	22e0      	movs	r2, #224	; 0xe0
100117d4:	4b6a      	ldr	r3, [pc, #424]	; (10011980 <__ieee754_pow+0x608>)
100117d6:	0612      	lsls	r2, r2, #24
100117d8:	0030      	movs	r0, r6
100117da:	000f      	movs	r7, r1
100117dc:	f004 fe8e 	bl	100164fc <__aeabi_dmul>
100117e0:	9a02      	ldr	r2, [sp, #8]
100117e2:	9b03      	ldr	r3, [sp, #12]
100117e4:	9004      	str	r0, [sp, #16]
100117e6:	9105      	str	r1, [sp, #20]
100117e8:	0030      	movs	r0, r6
100117ea:	0039      	movs	r1, r7
100117ec:	f005 f900 	bl	100169f0 <__aeabi_dsub>
100117f0:	0002      	movs	r2, r0
100117f2:	000b      	movs	r3, r1
100117f4:	0020      	movs	r0, r4
100117f6:	0029      	movs	r1, r5
100117f8:	f005 f8fa 	bl	100169f0 <__aeabi_dsub>
100117fc:	4a61      	ldr	r2, [pc, #388]	; (10011984 <__ieee754_pow+0x60c>)
100117fe:	4b60      	ldr	r3, [pc, #384]	; (10011980 <__ieee754_pow+0x608>)
10011800:	f004 fe7c 	bl	100164fc <__aeabi_dmul>
10011804:	4a60      	ldr	r2, [pc, #384]	; (10011988 <__ieee754_pow+0x610>)
10011806:	0004      	movs	r4, r0
10011808:	000d      	movs	r5, r1
1001180a:	4b60      	ldr	r3, [pc, #384]	; (1001198c <__ieee754_pow+0x614>)
1001180c:	0030      	movs	r0, r6
1001180e:	0039      	movs	r1, r7
10011810:	f004 fe74 	bl	100164fc <__aeabi_dmul>
10011814:	0002      	movs	r2, r0
10011816:	000b      	movs	r3, r1
10011818:	0020      	movs	r0, r4
1001181a:	0029      	movs	r1, r5
1001181c:	f003 ff1e 	bl	1001565c <__aeabi_dadd>
10011820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10011824:	f003 ff1a 	bl	1001565c <__aeabi_dadd>
10011828:	0006      	movs	r6, r0
1001182a:	4648      	mov	r0, r9
1001182c:	000f      	movs	r7, r1
1001182e:	f005 fc89 	bl	10017144 <__aeabi_i2d>
10011832:	0004      	movs	r4, r0
10011834:	000d      	movs	r5, r1
10011836:	9804      	ldr	r0, [sp, #16]
10011838:	9905      	ldr	r1, [sp, #20]
1001183a:	0032      	movs	r2, r6
1001183c:	003b      	movs	r3, r7
1001183e:	f003 ff0d 	bl	1001565c <__aeabi_dadd>
10011842:	9a08      	ldr	r2, [sp, #32]
10011844:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011846:	f003 ff09 	bl	1001565c <__aeabi_dadd>
1001184a:	0022      	movs	r2, r4
1001184c:	002b      	movs	r3, r5
1001184e:	f003 ff05 	bl	1001565c <__aeabi_dadd>
10011852:	2000      	movs	r0, #0
10011854:	0022      	movs	r2, r4
10011856:	002b      	movs	r3, r5
10011858:	9002      	str	r0, [sp, #8]
1001185a:	9103      	str	r1, [sp, #12]
1001185c:	f005 f8c8 	bl	100169f0 <__aeabi_dsub>
10011860:	9a08      	ldr	r2, [sp, #32]
10011862:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011864:	f005 f8c4 	bl	100169f0 <__aeabi_dsub>
10011868:	9a04      	ldr	r2, [sp, #16]
1001186a:	9b05      	ldr	r3, [sp, #20]
1001186c:	f005 f8c0 	bl	100169f0 <__aeabi_dsub>
10011870:	0002      	movs	r2, r0
10011872:	000b      	movs	r3, r1
10011874:	0030      	movs	r0, r6
10011876:	0039      	movs	r1, r7
10011878:	f005 f8ba 	bl	100169f0 <__aeabi_dsub>
1001187c:	9004      	str	r0, [sp, #16]
1001187e:	9105      	str	r1, [sp, #20]
10011880:	465b      	mov	r3, fp
10011882:	4642      	mov	r2, r8
10011884:	3b01      	subs	r3, #1
10011886:	4313      	orrs	r3, r2
10011888:	d100      	bne.n	1001188c <__ieee754_pow+0x514>
1001188a:	e197      	b.n	10011bbc <__ieee754_pow+0x844>
1001188c:	2300      	movs	r3, #0
1001188e:	4c2b      	ldr	r4, [pc, #172]	; (1001193c <__ieee754_pow+0x5c4>)
10011890:	9306      	str	r3, [sp, #24]
10011892:	9407      	str	r4, [sp, #28]
10011894:	9800      	ldr	r0, [sp, #0]
10011896:	9901      	ldr	r1, [sp, #4]
10011898:	2600      	movs	r6, #0
1001189a:	000b      	movs	r3, r1
1001189c:	0032      	movs	r2, r6
1001189e:	000f      	movs	r7, r1
100118a0:	f005 f8a6 	bl	100169f0 <__aeabi_dsub>
100118a4:	9a02      	ldr	r2, [sp, #8]
100118a6:	9b03      	ldr	r3, [sp, #12]
100118a8:	f004 fe28 	bl	100164fc <__aeabi_dmul>
100118ac:	9a00      	ldr	r2, [sp, #0]
100118ae:	9b01      	ldr	r3, [sp, #4]
100118b0:	0004      	movs	r4, r0
100118b2:	000d      	movs	r5, r1
100118b4:	9804      	ldr	r0, [sp, #16]
100118b6:	9905      	ldr	r1, [sp, #20]
100118b8:	f004 fe20 	bl	100164fc <__aeabi_dmul>
100118bc:	0002      	movs	r2, r0
100118be:	000b      	movs	r3, r1
100118c0:	0020      	movs	r0, r4
100118c2:	0029      	movs	r1, r5
100118c4:	f003 feca 	bl	1001565c <__aeabi_dadd>
100118c8:	0004      	movs	r4, r0
100118ca:	000d      	movs	r5, r1
100118cc:	9802      	ldr	r0, [sp, #8]
100118ce:	9903      	ldr	r1, [sp, #12]
100118d0:	003b      	movs	r3, r7
100118d2:	0032      	movs	r2, r6
100118d4:	9404      	str	r4, [sp, #16]
100118d6:	9505      	str	r5, [sp, #20]
100118d8:	f004 fe10 	bl	100164fc <__aeabi_dmul>
100118dc:	9000      	str	r0, [sp, #0]
100118de:	9101      	str	r1, [sp, #4]
100118e0:	000b      	movs	r3, r1
100118e2:	0002      	movs	r2, r0
100118e4:	0029      	movs	r1, r5
100118e6:	0020      	movs	r0, r4
100118e8:	f003 feb8 	bl	1001565c <__aeabi_dadd>
100118ec:	4b28      	ldr	r3, [pc, #160]	; (10011990 <__ieee754_pow+0x618>)
100118ee:	4681      	mov	r9, r0
100118f0:	1e0f      	subs	r7, r1, #0
100118f2:	468a      	mov	sl, r1
100118f4:	429f      	cmp	r7, r3
100118f6:	dc00      	bgt.n	100118fa <__ieee754_pow+0x582>
100118f8:	e13c      	b.n	10011b74 <__ieee754_pow+0x7fc>
100118fa:	4b26      	ldr	r3, [pc, #152]	; (10011994 <__ieee754_pow+0x61c>)
100118fc:	18cb      	adds	r3, r1, r3
100118fe:	4303      	orrs	r3, r0
10011900:	d000      	beq.n	10011904 <__ieee754_pow+0x58c>
10011902:	e1db      	b.n	10011cbc <__ieee754_pow+0x944>
10011904:	9804      	ldr	r0, [sp, #16]
10011906:	9905      	ldr	r1, [sp, #20]
10011908:	4a23      	ldr	r2, [pc, #140]	; (10011998 <__ieee754_pow+0x620>)
1001190a:	4b24      	ldr	r3, [pc, #144]	; (1001199c <__ieee754_pow+0x624>)
1001190c:	f003 fea6 	bl	1001565c <__aeabi_dadd>
10011910:	9a00      	ldr	r2, [sp, #0]
10011912:	9b01      	ldr	r3, [sp, #4]
10011914:	0004      	movs	r4, r0
10011916:	000d      	movs	r5, r1
10011918:	4648      	mov	r0, r9
1001191a:	0039      	movs	r1, r7
1001191c:	f005 f868 	bl	100169f0 <__aeabi_dsub>
10011920:	0002      	movs	r2, r0
10011922:	000b      	movs	r3, r1
10011924:	0020      	movs	r0, r4
10011926:	0029      	movs	r1, r5
10011928:	f003 fb86 	bl	10015038 <__aeabi_dcmpgt>
1001192c:	003e      	movs	r6, r7
1001192e:	e037      	b.n	100119a0 <__ieee754_pow+0x628>
10011930:	000fffff 	.word	0x000fffff
10011934:	43400000 	.word	0x43400000
10011938:	fffffc01 	.word	0xfffffc01
1001193c:	3ff00000 	.word	0x3ff00000
10011940:	0003988e 	.word	0x0003988e
10011944:	000bb679 	.word	0x000bb679
10011948:	fff00000 	.word	0xfff00000
1001194c:	4a454eef 	.word	0x4a454eef
10011950:	3fca7e28 	.word	0x3fca7e28
10011954:	93c9db65 	.word	0x93c9db65
10011958:	3fcd864a 	.word	0x3fcd864a
1001195c:	a91d4101 	.word	0xa91d4101
10011960:	3fd17460 	.word	0x3fd17460
10011964:	518f264d 	.word	0x518f264d
10011968:	3fd55555 	.word	0x3fd55555
1001196c:	db6fabff 	.word	0xdb6fabff
10011970:	3fdb6db6 	.word	0x3fdb6db6
10011974:	33333303 	.word	0x33333303
10011978:	3fe33333 	.word	0x3fe33333
1001197c:	40080000 	.word	0x40080000
10011980:	3feec709 	.word	0x3feec709
10011984:	dc3a03fd 	.word	0xdc3a03fd
10011988:	145b01f5 	.word	0x145b01f5
1001198c:	be3e2fe0 	.word	0xbe3e2fe0
10011990:	408fffff 	.word	0x408fffff
10011994:	bf700000 	.word	0xbf700000
10011998:	652b82fe 	.word	0x652b82fe
1001199c:	3c971547 	.word	0x3c971547
100119a0:	2800      	cmp	r0, #0
100119a2:	d000      	beq.n	100119a6 <__ieee754_pow+0x62e>
100119a4:	e18a      	b.n	10011cbc <__ieee754_pow+0x944>
100119a6:	2280      	movs	r2, #128	; 0x80
100119a8:	4be7      	ldr	r3, [pc, #924]	; (10011d48 <__ieee754_pow+0x9d0>)
100119aa:	0352      	lsls	r2, r2, #13
100119ac:	469c      	mov	ip, r3
100119ae:	0013      	movs	r3, r2
100119b0:	1536      	asrs	r6, r6, #20
100119b2:	4466      	add	r6, ip
100119b4:	4133      	asrs	r3, r6
100119b6:	49e5      	ldr	r1, [pc, #916]	; (10011d4c <__ieee754_pow+0x9d4>)
100119b8:	19db      	adds	r3, r3, r7
100119ba:	005e      	lsls	r6, r3, #1
100119bc:	001c      	movs	r4, r3
100119be:	031b      	lsls	r3, r3, #12
100119c0:	468c      	mov	ip, r1
100119c2:	0b1b      	lsrs	r3, r3, #12
100119c4:	4313      	orrs	r3, r2
100119c6:	2214      	movs	r2, #20
100119c8:	0d76      	lsrs	r6, r6, #21
100119ca:	4fe1      	ldr	r7, [pc, #900]	; (10011d50 <__ieee754_pow+0x9d8>)
100119cc:	4466      	add	r6, ip
100119ce:	4137      	asrs	r7, r6
100119d0:	1b96      	subs	r6, r2, r6
100119d2:	4133      	asrs	r3, r6
100119d4:	4698      	mov	r8, r3
100119d6:	4653      	mov	r3, sl
100119d8:	43bc      	bics	r4, r7
100119da:	2000      	movs	r0, #0
100119dc:	0021      	movs	r1, r4
100119de:	2b00      	cmp	r3, #0
100119e0:	da00      	bge.n	100119e4 <__ieee754_pow+0x66c>
100119e2:	e1a9      	b.n	10011d38 <__ieee754_pow+0x9c0>
100119e4:	0002      	movs	r2, r0
100119e6:	000b      	movs	r3, r1
100119e8:	9800      	ldr	r0, [sp, #0]
100119ea:	9901      	ldr	r1, [sp, #4]
100119ec:	f005 f800 	bl	100169f0 <__aeabi_dsub>
100119f0:	000b      	movs	r3, r1
100119f2:	9000      	str	r0, [sp, #0]
100119f4:	9101      	str	r1, [sp, #4]
100119f6:	0002      	movs	r2, r0
100119f8:	9804      	ldr	r0, [sp, #16]
100119fa:	9905      	ldr	r1, [sp, #20]
100119fc:	f003 fe2e 	bl	1001565c <__aeabi_dadd>
10011a00:	4643      	mov	r3, r8
10011a02:	051b      	lsls	r3, r3, #20
10011a04:	4699      	mov	r9, r3
10011a06:	2000      	movs	r0, #0
10011a08:	2200      	movs	r2, #0
10011a0a:	4bd2      	ldr	r3, [pc, #840]	; (10011d54 <__ieee754_pow+0x9dc>)
10011a0c:	0006      	movs	r6, r0
10011a0e:	000f      	movs	r7, r1
10011a10:	f004 fd74 	bl	100164fc <__aeabi_dmul>
10011a14:	9a00      	ldr	r2, [sp, #0]
10011a16:	9b01      	ldr	r3, [sp, #4]
10011a18:	9002      	str	r0, [sp, #8]
10011a1a:	9103      	str	r1, [sp, #12]
10011a1c:	0030      	movs	r0, r6
10011a1e:	0039      	movs	r1, r7
10011a20:	f004 ffe6 	bl	100169f0 <__aeabi_dsub>
10011a24:	0002      	movs	r2, r0
10011a26:	000b      	movs	r3, r1
10011a28:	9804      	ldr	r0, [sp, #16]
10011a2a:	9905      	ldr	r1, [sp, #20]
10011a2c:	f004 ffe0 	bl	100169f0 <__aeabi_dsub>
10011a30:	4ac9      	ldr	r2, [pc, #804]	; (10011d58 <__ieee754_pow+0x9e0>)
10011a32:	4bca      	ldr	r3, [pc, #808]	; (10011d5c <__ieee754_pow+0x9e4>)
10011a34:	f004 fd62 	bl	100164fc <__aeabi_dmul>
10011a38:	4ac9      	ldr	r2, [pc, #804]	; (10011d60 <__ieee754_pow+0x9e8>)
10011a3a:	0004      	movs	r4, r0
10011a3c:	000d      	movs	r5, r1
10011a3e:	4bc9      	ldr	r3, [pc, #804]	; (10011d64 <__ieee754_pow+0x9ec>)
10011a40:	0030      	movs	r0, r6
10011a42:	0039      	movs	r1, r7
10011a44:	f004 fd5a 	bl	100164fc <__aeabi_dmul>
10011a48:	0002      	movs	r2, r0
10011a4a:	000b      	movs	r3, r1
10011a4c:	0020      	movs	r0, r4
10011a4e:	0029      	movs	r1, r5
10011a50:	f003 fe04 	bl	1001565c <__aeabi_dadd>
10011a54:	0004      	movs	r4, r0
10011a56:	000d      	movs	r5, r1
10011a58:	0002      	movs	r2, r0
10011a5a:	000b      	movs	r3, r1
10011a5c:	9802      	ldr	r0, [sp, #8]
10011a5e:	9903      	ldr	r1, [sp, #12]
10011a60:	f003 fdfc 	bl	1001565c <__aeabi_dadd>
10011a64:	9a02      	ldr	r2, [sp, #8]
10011a66:	9b03      	ldr	r3, [sp, #12]
10011a68:	0006      	movs	r6, r0
10011a6a:	000f      	movs	r7, r1
10011a6c:	f004 ffc0 	bl	100169f0 <__aeabi_dsub>
10011a70:	0002      	movs	r2, r0
10011a72:	000b      	movs	r3, r1
10011a74:	0020      	movs	r0, r4
10011a76:	0029      	movs	r1, r5
10011a78:	f004 ffba 	bl	100169f0 <__aeabi_dsub>
10011a7c:	0032      	movs	r2, r6
10011a7e:	9000      	str	r0, [sp, #0]
10011a80:	9101      	str	r1, [sp, #4]
10011a82:	003b      	movs	r3, r7
10011a84:	0030      	movs	r0, r6
10011a86:	0039      	movs	r1, r7
10011a88:	f004 fd38 	bl	100164fc <__aeabi_dmul>
10011a8c:	0004      	movs	r4, r0
10011a8e:	000d      	movs	r5, r1
10011a90:	4ab5      	ldr	r2, [pc, #724]	; (10011d68 <__ieee754_pow+0x9f0>)
10011a92:	4bb6      	ldr	r3, [pc, #728]	; (10011d6c <__ieee754_pow+0x9f4>)
10011a94:	f004 fd32 	bl	100164fc <__aeabi_dmul>
10011a98:	4ab5      	ldr	r2, [pc, #724]	; (10011d70 <__ieee754_pow+0x9f8>)
10011a9a:	4bb6      	ldr	r3, [pc, #728]	; (10011d74 <__ieee754_pow+0x9fc>)
10011a9c:	f004 ffa8 	bl	100169f0 <__aeabi_dsub>
10011aa0:	0022      	movs	r2, r4
10011aa2:	002b      	movs	r3, r5
10011aa4:	f004 fd2a 	bl	100164fc <__aeabi_dmul>
10011aa8:	4ab3      	ldr	r2, [pc, #716]	; (10011d78 <__ieee754_pow+0xa00>)
10011aaa:	4bb4      	ldr	r3, [pc, #720]	; (10011d7c <__ieee754_pow+0xa04>)
10011aac:	f003 fdd6 	bl	1001565c <__aeabi_dadd>
10011ab0:	0022      	movs	r2, r4
10011ab2:	002b      	movs	r3, r5
10011ab4:	f004 fd22 	bl	100164fc <__aeabi_dmul>
10011ab8:	4ab1      	ldr	r2, [pc, #708]	; (10011d80 <__ieee754_pow+0xa08>)
10011aba:	4bb2      	ldr	r3, [pc, #712]	; (10011d84 <__ieee754_pow+0xa0c>)
10011abc:	f004 ff98 	bl	100169f0 <__aeabi_dsub>
10011ac0:	0022      	movs	r2, r4
10011ac2:	002b      	movs	r3, r5
10011ac4:	f004 fd1a 	bl	100164fc <__aeabi_dmul>
10011ac8:	4aaf      	ldr	r2, [pc, #700]	; (10011d88 <__ieee754_pow+0xa10>)
10011aca:	4bb0      	ldr	r3, [pc, #704]	; (10011d8c <__ieee754_pow+0xa14>)
10011acc:	f003 fdc6 	bl	1001565c <__aeabi_dadd>
10011ad0:	0022      	movs	r2, r4
10011ad2:	002b      	movs	r3, r5
10011ad4:	f004 fd12 	bl	100164fc <__aeabi_dmul>
10011ad8:	0002      	movs	r2, r0
10011ada:	000b      	movs	r3, r1
10011adc:	0030      	movs	r0, r6
10011ade:	0039      	movs	r1, r7
10011ae0:	f004 ff86 	bl	100169f0 <__aeabi_dsub>
10011ae4:	0004      	movs	r4, r0
10011ae6:	000d      	movs	r5, r1
10011ae8:	0002      	movs	r2, r0
10011aea:	000b      	movs	r3, r1
10011aec:	0030      	movs	r0, r6
10011aee:	0039      	movs	r1, r7
10011af0:	f004 fd04 	bl	100164fc <__aeabi_dmul>
10011af4:	2380      	movs	r3, #128	; 0x80
10011af6:	9002      	str	r0, [sp, #8]
10011af8:	9103      	str	r1, [sp, #12]
10011afa:	2200      	movs	r2, #0
10011afc:	05db      	lsls	r3, r3, #23
10011afe:	0020      	movs	r0, r4
10011b00:	0029      	movs	r1, r5
10011b02:	f004 ff75 	bl	100169f0 <__aeabi_dsub>
10011b06:	0002      	movs	r2, r0
10011b08:	000b      	movs	r3, r1
10011b0a:	9802      	ldr	r0, [sp, #8]
10011b0c:	9903      	ldr	r1, [sp, #12]
10011b0e:	f004 f8d1 	bl	10015cb4 <__aeabi_ddiv>
10011b12:	9a00      	ldr	r2, [sp, #0]
10011b14:	9b01      	ldr	r3, [sp, #4]
10011b16:	0004      	movs	r4, r0
10011b18:	000d      	movs	r5, r1
10011b1a:	0030      	movs	r0, r6
10011b1c:	0039      	movs	r1, r7
10011b1e:	f004 fced 	bl	100164fc <__aeabi_dmul>
10011b22:	9a00      	ldr	r2, [sp, #0]
10011b24:	9b01      	ldr	r3, [sp, #4]
10011b26:	f003 fd99 	bl	1001565c <__aeabi_dadd>
10011b2a:	0002      	movs	r2, r0
10011b2c:	000b      	movs	r3, r1
10011b2e:	0020      	movs	r0, r4
10011b30:	0029      	movs	r1, r5
10011b32:	f004 ff5d 	bl	100169f0 <__aeabi_dsub>
10011b36:	0032      	movs	r2, r6
10011b38:	003b      	movs	r3, r7
10011b3a:	f004 ff59 	bl	100169f0 <__aeabi_dsub>
10011b3e:	0002      	movs	r2, r0
10011b40:	000b      	movs	r3, r1
10011b42:	2000      	movs	r0, #0
10011b44:	4992      	ldr	r1, [pc, #584]	; (10011d90 <__ieee754_pow+0xa18>)
10011b46:	f004 ff53 	bl	100169f0 <__aeabi_dsub>
10011b4a:	464b      	mov	r3, r9
10011b4c:	185b      	adds	r3, r3, r1
10011b4e:	151a      	asrs	r2, r3, #20
10011b50:	2a00      	cmp	r2, #0
10011b52:	dc00      	bgt.n	10011b56 <__ieee754_pow+0x7de>
10011b54:	e0f4      	b.n	10011d40 <__ieee754_pow+0x9c8>
10011b56:	0019      	movs	r1, r3
10011b58:	9a06      	ldr	r2, [sp, #24]
10011b5a:	9b07      	ldr	r3, [sp, #28]
10011b5c:	f004 fcce 	bl	100164fc <__aeabi_dmul>
10011b60:	0006      	movs	r6, r0
10011b62:	e452      	b.n	1001140a <__ieee754_pow+0x92>
10011b64:	0032      	movs	r2, r6
10011b66:	0030      	movs	r0, r6
10011b68:	002b      	movs	r3, r5
10011b6a:	0029      	movs	r1, r5
10011b6c:	f004 fcc6 	bl	100164fc <__aeabi_dmul>
10011b70:	0006      	movs	r6, r0
10011b72:	e44a      	b.n	1001140a <__ieee754_pow+0x92>
10011b74:	4b87      	ldr	r3, [pc, #540]	; (10011d94 <__ieee754_pow+0xa1c>)
10011b76:	004e      	lsls	r6, r1, #1
10011b78:	0876      	lsrs	r6, r6, #1
10011b7a:	429e      	cmp	r6, r3
10011b7c:	dc00      	bgt.n	10011b80 <__ieee754_pow+0x808>
10011b7e:	e0bf      	b.n	10011d00 <__ieee754_pow+0x988>
10011b80:	4b85      	ldr	r3, [pc, #532]	; (10011d98 <__ieee754_pow+0xa20>)
10011b82:	18cb      	adds	r3, r1, r3
10011b84:	4303      	orrs	r3, r0
10011b86:	d10c      	bne.n	10011ba2 <__ieee754_pow+0x82a>
10011b88:	9a00      	ldr	r2, [sp, #0]
10011b8a:	9b01      	ldr	r3, [sp, #4]
10011b8c:	f004 ff30 	bl	100169f0 <__aeabi_dsub>
10011b90:	0002      	movs	r2, r0
10011b92:	000b      	movs	r3, r1
10011b94:	9804      	ldr	r0, [sp, #16]
10011b96:	9905      	ldr	r1, [sp, #20]
10011b98:	f003 fa44 	bl	10015024 <__aeabi_dcmple>
10011b9c:	2800      	cmp	r0, #0
10011b9e:	d100      	bne.n	10011ba2 <__ieee754_pow+0x82a>
10011ba0:	e701      	b.n	100119a6 <__ieee754_pow+0x62e>
10011ba2:	9806      	ldr	r0, [sp, #24]
10011ba4:	9907      	ldr	r1, [sp, #28]
10011ba6:	4a7d      	ldr	r2, [pc, #500]	; (10011d9c <__ieee754_pow+0xa24>)
10011ba8:	4b7d      	ldr	r3, [pc, #500]	; (10011da0 <__ieee754_pow+0xa28>)
10011baa:	f004 fca7 	bl	100164fc <__aeabi_dmul>
10011bae:	4a7b      	ldr	r2, [pc, #492]	; (10011d9c <__ieee754_pow+0xa24>)
10011bb0:	4b7b      	ldr	r3, [pc, #492]	; (10011da0 <__ieee754_pow+0xa28>)
10011bb2:	f004 fca3 	bl	100164fc <__aeabi_dmul>
10011bb6:	0006      	movs	r6, r0
10011bb8:	f7ff fc27 	bl	1001140a <__ieee754_pow+0x92>
10011bbc:	2300      	movs	r3, #0
10011bbe:	4c79      	ldr	r4, [pc, #484]	; (10011da4 <__ieee754_pow+0xa2c>)
10011bc0:	9306      	str	r3, [sp, #24]
10011bc2:	9407      	str	r4, [sp, #28]
10011bc4:	e666      	b.n	10011894 <__ieee754_pow+0x51c>
10011bc6:	4653      	mov	r3, sl
10011bc8:	2b00      	cmp	r3, #0
10011bca:	db00      	blt.n	10011bce <__ieee754_pow+0x856>
10011bcc:	e4c3      	b.n	10011556 <__ieee754_pow+0x1de>
10011bce:	9b00      	ldr	r3, [sp, #0]
10011bd0:	9c01      	ldr	r4, [sp, #4]
10011bd2:	2280      	movs	r2, #128	; 0x80
10011bd4:	0612      	lsls	r2, r2, #24
10011bd6:	001e      	movs	r6, r3
10011bd8:	4694      	mov	ip, r2
10011bda:	0023      	movs	r3, r4
10011bdc:	4463      	add	r3, ip
10011bde:	0019      	movs	r1, r3
10011be0:	f7ff fc13 	bl	1001140a <__ieee754_pow+0x92>
10011be4:	0002      	movs	r2, r0
10011be6:	000b      	movs	r3, r1
10011be8:	2000      	movs	r0, #0
10011bea:	4969      	ldr	r1, [pc, #420]	; (10011d90 <__ieee754_pow+0xa18>)
10011bec:	f004 f862 	bl	10015cb4 <__aeabi_ddiv>
10011bf0:	e44a      	b.n	10011488 <__ieee754_pow+0x110>
10011bf2:	4b6d      	ldr	r3, [pc, #436]	; (10011da8 <__ieee754_pow+0xa30>)
10011bf4:	429c      	cmp	r4, r3
10011bf6:	dc00      	bgt.n	10011bfa <__ieee754_pow+0x882>
10011bf8:	e4aa      	b.n	10011550 <__ieee754_pow+0x1d8>
10011bfa:	4b65      	ldr	r3, [pc, #404]	; (10011d90 <__ieee754_pow+0xa18>)
10011bfc:	429c      	cmp	r4, r3
10011bfe:	dd01      	ble.n	10011c04 <__ieee754_pow+0x88c>
10011c00:	f7ff fc2c 	bl	1001145c <__ieee754_pow+0xe4>
10011c04:	2200      	movs	r2, #0
10011c06:	4b62      	ldr	r3, [pc, #392]	; (10011d90 <__ieee754_pow+0xa18>)
10011c08:	f004 fef2 	bl	100169f0 <__aeabi_dsub>
10011c0c:	22c0      	movs	r2, #192	; 0xc0
10011c0e:	4b67      	ldr	r3, [pc, #412]	; (10011dac <__ieee754_pow+0xa34>)
10011c10:	05d2      	lsls	r2, r2, #23
10011c12:	0004      	movs	r4, r0
10011c14:	000d      	movs	r5, r1
10011c16:	f004 fc71 	bl	100164fc <__aeabi_dmul>
10011c1a:	4a65      	ldr	r2, [pc, #404]	; (10011db0 <__ieee754_pow+0xa38>)
10011c1c:	0006      	movs	r6, r0
10011c1e:	000f      	movs	r7, r1
10011c20:	4b64      	ldr	r3, [pc, #400]	; (10011db4 <__ieee754_pow+0xa3c>)
10011c22:	0020      	movs	r0, r4
10011c24:	0029      	movs	r1, r5
10011c26:	f004 fc69 	bl	100164fc <__aeabi_dmul>
10011c2a:	2200      	movs	r2, #0
10011c2c:	9002      	str	r0, [sp, #8]
10011c2e:	9103      	str	r1, [sp, #12]
10011c30:	4b61      	ldr	r3, [pc, #388]	; (10011db8 <__ieee754_pow+0xa40>)
10011c32:	0020      	movs	r0, r4
10011c34:	0029      	movs	r1, r5
10011c36:	f004 fc61 	bl	100164fc <__aeabi_dmul>
10011c3a:	0002      	movs	r2, r0
10011c3c:	000b      	movs	r3, r1
10011c3e:	485f      	ldr	r0, [pc, #380]	; (10011dbc <__ieee754_pow+0xa44>)
10011c40:	495f      	ldr	r1, [pc, #380]	; (10011dc0 <__ieee754_pow+0xa48>)
10011c42:	f004 fed5 	bl	100169f0 <__aeabi_dsub>
10011c46:	0022      	movs	r2, r4
10011c48:	002b      	movs	r3, r5
10011c4a:	f004 fc57 	bl	100164fc <__aeabi_dmul>
10011c4e:	0002      	movs	r2, r0
10011c50:	000b      	movs	r3, r1
10011c52:	2000      	movs	r0, #0
10011c54:	495b      	ldr	r1, [pc, #364]	; (10011dc4 <__ieee754_pow+0xa4c>)
10011c56:	f004 fecb 	bl	100169f0 <__aeabi_dsub>
10011c5a:	0022      	movs	r2, r4
10011c5c:	9004      	str	r0, [sp, #16]
10011c5e:	9105      	str	r1, [sp, #20]
10011c60:	002b      	movs	r3, r5
10011c62:	0020      	movs	r0, r4
10011c64:	0029      	movs	r1, r5
10011c66:	f004 fc49 	bl	100164fc <__aeabi_dmul>
10011c6a:	0002      	movs	r2, r0
10011c6c:	000b      	movs	r3, r1
10011c6e:	9804      	ldr	r0, [sp, #16]
10011c70:	9905      	ldr	r1, [sp, #20]
10011c72:	f004 fc43 	bl	100164fc <__aeabi_dmul>
10011c76:	4a54      	ldr	r2, [pc, #336]	; (10011dc8 <__ieee754_pow+0xa50>)
10011c78:	4b4c      	ldr	r3, [pc, #304]	; (10011dac <__ieee754_pow+0xa34>)
10011c7a:	f004 fc3f 	bl	100164fc <__aeabi_dmul>
10011c7e:	0002      	movs	r2, r0
10011c80:	000b      	movs	r3, r1
10011c82:	9802      	ldr	r0, [sp, #8]
10011c84:	9903      	ldr	r1, [sp, #12]
10011c86:	f004 feb3 	bl	100169f0 <__aeabi_dsub>
10011c8a:	0002      	movs	r2, r0
10011c8c:	000b      	movs	r3, r1
10011c8e:	0004      	movs	r4, r0
10011c90:	000d      	movs	r5, r1
10011c92:	0030      	movs	r0, r6
10011c94:	0039      	movs	r1, r7
10011c96:	f003 fce1 	bl	1001565c <__aeabi_dadd>
10011c9a:	2200      	movs	r2, #0
10011c9c:	0010      	movs	r0, r2
10011c9e:	003b      	movs	r3, r7
10011ca0:	0032      	movs	r2, r6
10011ca2:	9002      	str	r0, [sp, #8]
10011ca4:	9103      	str	r1, [sp, #12]
10011ca6:	f004 fea3 	bl	100169f0 <__aeabi_dsub>
10011caa:	0002      	movs	r2, r0
10011cac:	000b      	movs	r3, r1
10011cae:	0020      	movs	r0, r4
10011cb0:	0029      	movs	r1, r5
10011cb2:	f004 fe9d 	bl	100169f0 <__aeabi_dsub>
10011cb6:	9004      	str	r0, [sp, #16]
10011cb8:	9105      	str	r1, [sp, #20]
10011cba:	e5e1      	b.n	10011880 <__ieee754_pow+0x508>
10011cbc:	4a43      	ldr	r2, [pc, #268]	; (10011dcc <__ieee754_pow+0xa54>)
10011cbe:	4b44      	ldr	r3, [pc, #272]	; (10011dd0 <__ieee754_pow+0xa58>)
10011cc0:	9806      	ldr	r0, [sp, #24]
10011cc2:	9907      	ldr	r1, [sp, #28]
10011cc4:	f004 fc1a 	bl	100164fc <__aeabi_dmul>
10011cc8:	4a40      	ldr	r2, [pc, #256]	; (10011dcc <__ieee754_pow+0xa54>)
10011cca:	4b41      	ldr	r3, [pc, #260]	; (10011dd0 <__ieee754_pow+0xa58>)
10011ccc:	f004 fc16 	bl	100164fc <__aeabi_dmul>
10011cd0:	0006      	movs	r6, r0
10011cd2:	f7ff fb9a 	bl	1001140a <__ieee754_pow+0x92>
10011cd6:	2a00      	cmp	r2, #0
10011cd8:	d001      	beq.n	10011cde <__ieee754_pow+0x966>
10011cda:	f7ff fba5 	bl	10011428 <__ieee754_pow+0xb0>
10011cde:	3214      	adds	r2, #20
10011ce0:	1ad3      	subs	r3, r2, r3
10011ce2:	003a      	movs	r2, r7
10011ce4:	411a      	asrs	r2, r3
10011ce6:	0011      	movs	r1, r2
10011ce8:	4099      	lsls	r1, r3
10011cea:	428f      	cmp	r7, r1
10011cec:	d001      	beq.n	10011cf2 <__ieee754_pow+0x97a>
10011cee:	f7ff fb6f 	bl	100113d0 <__ieee754_pow+0x58>
10011cf2:	2301      	movs	r3, #1
10011cf4:	4013      	ands	r3, r2
10011cf6:	2202      	movs	r2, #2
10011cf8:	1ad3      	subs	r3, r2, r3
10011cfa:	469b      	mov	fp, r3
10011cfc:	f7ff fb68 	bl	100113d0 <__ieee754_pow+0x58>
10011d00:	4b30      	ldr	r3, [pc, #192]	; (10011dc4 <__ieee754_pow+0xa4c>)
10011d02:	429e      	cmp	r6, r3
10011d04:	dd00      	ble.n	10011d08 <__ieee754_pow+0x990>
10011d06:	e64e      	b.n	100119a6 <__ieee754_pow+0x62e>
10011d08:	2300      	movs	r3, #0
10011d0a:	4699      	mov	r9, r3
10011d0c:	4698      	mov	r8, r3
10011d0e:	e67a      	b.n	10011a06 <__ieee754_pow+0x68e>
10011d10:	0002      	movs	r2, r0
10011d12:	000b      	movs	r3, r1
10011d14:	f7ff fc14 	bl	10011540 <__ieee754_pow+0x1c8>
10011d18:	2380      	movs	r3, #128	; 0x80
10011d1a:	4c2e      	ldr	r4, [pc, #184]	; (10011dd4 <__ieee754_pow+0xa5c>)
10011d1c:	05db      	lsls	r3, r3, #23
10011d1e:	9308      	str	r3, [sp, #32]
10011d20:	9409      	str	r4, [sp, #36]	; 0x24
10011d22:	4b2d      	ldr	r3, [pc, #180]	; (10011dd8 <__ieee754_pow+0xa60>)
10011d24:	4c2d      	ldr	r4, [pc, #180]	; (10011ddc <__ieee754_pow+0xa64>)
10011d26:	2200      	movs	r2, #0
10011d28:	930c      	str	r3, [sp, #48]	; 0x30
10011d2a:	940d      	str	r4, [sp, #52]	; 0x34
10011d2c:	2480      	movs	r4, #128	; 0x80
10011d2e:	4b2c      	ldr	r3, [pc, #176]	; (10011de0 <__ieee754_pow+0xa68>)
10011d30:	02e4      	lsls	r4, r4, #11
10011d32:	9206      	str	r2, [sp, #24]
10011d34:	9307      	str	r3, [sp, #28]
10011d36:	e456      	b.n	100115e6 <__ieee754_pow+0x26e>
10011d38:	4643      	mov	r3, r8
10011d3a:	425b      	negs	r3, r3
10011d3c:	4698      	mov	r8, r3
10011d3e:	e651      	b.n	100119e4 <__ieee754_pow+0x66c>
10011d40:	4642      	mov	r2, r8
10011d42:	f000 f9fd 	bl	10012140 <scalbn>
10011d46:	e707      	b.n	10011b58 <__ieee754_pow+0x7e0>
10011d48:	fffffc02 	.word	0xfffffc02
10011d4c:	fffffc01 	.word	0xfffffc01
10011d50:	000fffff 	.word	0x000fffff
10011d54:	3fe62e43 	.word	0x3fe62e43
10011d58:	fefa39ef 	.word	0xfefa39ef
10011d5c:	3fe62e42 	.word	0x3fe62e42
10011d60:	0ca86c39 	.word	0x0ca86c39
10011d64:	be205c61 	.word	0xbe205c61
10011d68:	72bea4d0 	.word	0x72bea4d0
10011d6c:	3e663769 	.word	0x3e663769
10011d70:	c5d26bf1 	.word	0xc5d26bf1
10011d74:	3ebbbd41 	.word	0x3ebbbd41
10011d78:	af25de2c 	.word	0xaf25de2c
10011d7c:	3f11566a 	.word	0x3f11566a
10011d80:	16bebd93 	.word	0x16bebd93
10011d84:	3f66c16c 	.word	0x3f66c16c
10011d88:	5555553e 	.word	0x5555553e
10011d8c:	3fc55555 	.word	0x3fc55555
10011d90:	3ff00000 	.word	0x3ff00000
10011d94:	4090cbff 	.word	0x4090cbff
10011d98:	3f6f3400 	.word	0x3f6f3400
10011d9c:	c2f8f359 	.word	0xc2f8f359
10011da0:	01a56e1f 	.word	0x01a56e1f
10011da4:	bff00000 	.word	0xbff00000
10011da8:	3feffffe 	.word	0x3feffffe
10011dac:	3ff71547 	.word	0x3ff71547
10011db0:	f85ddf44 	.word	0xf85ddf44
10011db4:	3e54ae0b 	.word	0x3e54ae0b
10011db8:	3fd00000 	.word	0x3fd00000
10011dbc:	55555555 	.word	0x55555555
10011dc0:	3fd55555 	.word	0x3fd55555
10011dc4:	3fe00000 	.word	0x3fe00000
10011dc8:	652b82fe 	.word	0x652b82fe
10011dcc:	8800759c 	.word	0x8800759c
10011dd0:	7e37e43c 	.word	0x7e37e43c
10011dd4:	3fe2b803 	.word	0x3fe2b803
10011dd8:	43cfd006 	.word	0x43cfd006
10011ddc:	3e4cfdeb 	.word	0x3e4cfdeb
10011de0:	3ff80000 	.word	0x3ff80000

10011de4 <__ieee754_sqrt>:
10011de4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011de6:	4656      	mov	r6, sl
10011de8:	464d      	mov	r5, r9
10011dea:	4644      	mov	r4, r8
10011dec:	465f      	mov	r7, fp
10011dee:	4b75      	ldr	r3, [pc, #468]	; (10011fc4 <__ieee754_sqrt+0x1e0>)
10011df0:	b4f0      	push	{r4, r5, r6, r7}
10011df2:	000a      	movs	r2, r1
10011df4:	000d      	movs	r5, r1
10011df6:	0019      	movs	r1, r3
10011df8:	b083      	sub	sp, #12
10011dfa:	0006      	movs	r6, r0
10011dfc:	0004      	movs	r4, r0
10011dfe:	4029      	ands	r1, r5
10011e00:	4299      	cmp	r1, r3
10011e02:	d100      	bne.n	10011e06 <__ieee754_sqrt+0x22>
10011e04:	e0ba      	b.n	10011f7c <__ieee754_sqrt+0x198>
10011e06:	2d00      	cmp	r5, #0
10011e08:	dc00      	bgt.n	10011e0c <__ieee754_sqrt+0x28>
10011e0a:	e094      	b.n	10011f36 <__ieee754_sqrt+0x152>
10011e0c:	152d      	asrs	r5, r5, #20
10011e0e:	d100      	bne.n	10011e12 <__ieee754_sqrt+0x2e>
10011e10:	e0a3      	b.n	10011f5a <__ieee754_sqrt+0x176>
10011e12:	4b6d      	ldr	r3, [pc, #436]	; (10011fc8 <__ieee754_sqrt+0x1e4>)
10011e14:	0312      	lsls	r2, r2, #12
10011e16:	469c      	mov	ip, r3
10011e18:	2380      	movs	r3, #128	; 0x80
10011e1a:	0b12      	lsrs	r2, r2, #12
10011e1c:	035b      	lsls	r3, r3, #13
10011e1e:	4465      	add	r5, ip
10011e20:	431a      	orrs	r2, r3
10011e22:	07eb      	lsls	r3, r5, #31
10011e24:	d500      	bpl.n	10011e28 <__ieee754_sqrt+0x44>
10011e26:	e081      	b.n	10011f2c <__ieee754_sqrt+0x148>
10011e28:	106b      	asrs	r3, r5, #1
10011e2a:	4698      	mov	r8, r3
10011e2c:	0fe3      	lsrs	r3, r4, #31
10011e2e:	189b      	adds	r3, r3, r2
10011e30:	189b      	adds	r3, r3, r2
10011e32:	2280      	movs	r2, #128	; 0x80
10011e34:	2116      	movs	r1, #22
10011e36:	2600      	movs	r6, #0
10011e38:	2700      	movs	r7, #0
10011e3a:	0064      	lsls	r4, r4, #1
10011e3c:	0392      	lsls	r2, r2, #14
10011e3e:	18b8      	adds	r0, r7, r2
10011e40:	4298      	cmp	r0, r3
10011e42:	dc02      	bgt.n	10011e4a <__ieee754_sqrt+0x66>
10011e44:	1887      	adds	r7, r0, r2
10011e46:	1a1b      	subs	r3, r3, r0
10011e48:	18b6      	adds	r6, r6, r2
10011e4a:	0fe0      	lsrs	r0, r4, #31
10011e4c:	005b      	lsls	r3, r3, #1
10011e4e:	3901      	subs	r1, #1
10011e50:	181b      	adds	r3, r3, r0
10011e52:	0064      	lsls	r4, r4, #1
10011e54:	0852      	lsrs	r2, r2, #1
10011e56:	2900      	cmp	r1, #0
10011e58:	d1f1      	bne.n	10011e3e <__ieee754_sqrt+0x5a>
10011e5a:	2200      	movs	r2, #0
10011e5c:	9201      	str	r2, [sp, #4]
10011e5e:	4694      	mov	ip, r2
10011e60:	2280      	movs	r2, #128	; 0x80
10011e62:	0612      	lsls	r2, r2, #24
10011e64:	2020      	movs	r0, #32
10011e66:	4691      	mov	r9, r2
10011e68:	e009      	b.n	10011e7e <__ieee754_sqrt+0x9a>
10011e6a:	429f      	cmp	r7, r3
10011e6c:	d041      	beq.n	10011ef2 <__ieee754_sqrt+0x10e>
10011e6e:	0fe1      	lsrs	r1, r4, #31
10011e70:	18c9      	adds	r1, r1, r3
10011e72:	3801      	subs	r0, #1
10011e74:	18cb      	adds	r3, r1, r3
10011e76:	0064      	lsls	r4, r4, #1
10011e78:	0852      	lsrs	r2, r2, #1
10011e7a:	2800      	cmp	r0, #0
10011e7c:	d01e      	beq.n	10011ebc <__ieee754_sqrt+0xd8>
10011e7e:	4661      	mov	r1, ip
10011e80:	1851      	adds	r1, r2, r1
10011e82:	429f      	cmp	r7, r3
10011e84:	daf1      	bge.n	10011e6a <__ieee754_sqrt+0x86>
10011e86:	188d      	adds	r5, r1, r2
10011e88:	46ac      	mov	ip, r5
10011e8a:	0fcd      	lsrs	r5, r1, #31
10011e8c:	07ed      	lsls	r5, r5, #31
10011e8e:	46ba      	mov	sl, r7
10011e90:	454d      	cmp	r5, r9
10011e92:	d039      	beq.n	10011f08 <__ieee754_sqrt+0x124>
10011e94:	1bdb      	subs	r3, r3, r7
10011e96:	428c      	cmp	r4, r1
10011e98:	41bf      	sbcs	r7, r7
10011e9a:	427f      	negs	r7, r7
10011e9c:	1bdb      	subs	r3, r3, r7
10011e9e:	1a64      	subs	r4, r4, r1
10011ea0:	9901      	ldr	r1, [sp, #4]
10011ea2:	3801      	subs	r0, #1
10011ea4:	468b      	mov	fp, r1
10011ea6:	4493      	add	fp, r2
10011ea8:	4659      	mov	r1, fp
10011eaa:	9101      	str	r1, [sp, #4]
10011eac:	0fe1      	lsrs	r1, r4, #31
10011eae:	18c9      	adds	r1, r1, r3
10011eb0:	4657      	mov	r7, sl
10011eb2:	18cb      	adds	r3, r1, r3
10011eb4:	0064      	lsls	r4, r4, #1
10011eb6:	0852      	lsrs	r2, r2, #1
10011eb8:	2800      	cmp	r0, #0
10011eba:	d1e0      	bne.n	10011e7e <__ieee754_sqrt+0x9a>
10011ebc:	4323      	orrs	r3, r4
10011ebe:	d12b      	bne.n	10011f18 <__ieee754_sqrt+0x134>
10011ec0:	9b01      	ldr	r3, [sp, #4]
10011ec2:	085b      	lsrs	r3, r3, #1
10011ec4:	4941      	ldr	r1, [pc, #260]	; (10011fcc <__ieee754_sqrt+0x1e8>)
10011ec6:	1072      	asrs	r2, r6, #1
10011ec8:	468c      	mov	ip, r1
10011eca:	4462      	add	r2, ip
10011ecc:	07f1      	lsls	r1, r6, #31
10011ece:	d502      	bpl.n	10011ed6 <__ieee754_sqrt+0xf2>
10011ed0:	2180      	movs	r1, #128	; 0x80
10011ed2:	0609      	lsls	r1, r1, #24
10011ed4:	430b      	orrs	r3, r1
10011ed6:	4641      	mov	r1, r8
10011ed8:	0509      	lsls	r1, r1, #20
10011eda:	188d      	adds	r5, r1, r2
10011edc:	001e      	movs	r6, r3
10011ede:	002f      	movs	r7, r5
10011ee0:	0030      	movs	r0, r6
10011ee2:	0039      	movs	r1, r7
10011ee4:	b003      	add	sp, #12
10011ee6:	bc3c      	pop	{r2, r3, r4, r5}
10011ee8:	4690      	mov	r8, r2
10011eea:	4699      	mov	r9, r3
10011eec:	46a2      	mov	sl, r4
10011eee:	46ab      	mov	fp, r5
10011ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ef2:	42a1      	cmp	r1, r4
10011ef4:	d80e      	bhi.n	10011f14 <__ieee754_sqrt+0x130>
10011ef6:	188d      	adds	r5, r1, r2
10011ef8:	46ac      	mov	ip, r5
10011efa:	0fcd      	lsrs	r5, r1, #31
10011efc:	07ed      	lsls	r5, r5, #31
10011efe:	454d      	cmp	r5, r9
10011f00:	d048      	beq.n	10011f94 <__ieee754_sqrt+0x1b0>
10011f02:	469a      	mov	sl, r3
10011f04:	2300      	movs	r3, #0
10011f06:	e7ca      	b.n	10011e9e <__ieee754_sqrt+0xba>
10011f08:	4665      	mov	r5, ip
10011f0a:	2d00      	cmp	r5, #0
10011f0c:	dbc2      	blt.n	10011e94 <__ieee754_sqrt+0xb0>
10011f0e:	1c7d      	adds	r5, r7, #1
10011f10:	46aa      	mov	sl, r5
10011f12:	e7bf      	b.n	10011e94 <__ieee754_sqrt+0xb0>
10011f14:	003b      	movs	r3, r7
10011f16:	e7aa      	b.n	10011e6e <__ieee754_sqrt+0x8a>
10011f18:	9b01      	ldr	r3, [sp, #4]
10011f1a:	3301      	adds	r3, #1
10011f1c:	d03e      	beq.n	10011f9c <__ieee754_sqrt+0x1b8>
10011f1e:	9a01      	ldr	r2, [sp, #4]
10011f20:	2301      	movs	r3, #1
10011f22:	4694      	mov	ip, r2
10011f24:	4013      	ands	r3, r2
10011f26:	4463      	add	r3, ip
10011f28:	085b      	lsrs	r3, r3, #1
10011f2a:	e7cb      	b.n	10011ec4 <__ieee754_sqrt+0xe0>
10011f2c:	0fe3      	lsrs	r3, r4, #31
10011f2e:	0052      	lsls	r2, r2, #1
10011f30:	189a      	adds	r2, r3, r2
10011f32:	0064      	lsls	r4, r4, #1
10011f34:	e778      	b.n	10011e28 <__ieee754_sqrt+0x44>
10011f36:	006b      	lsls	r3, r5, #1
10011f38:	085b      	lsrs	r3, r3, #1
10011f3a:	4303      	orrs	r3, r0
10011f3c:	002f      	movs	r7, r5
10011f3e:	2b00      	cmp	r3, #0
10011f40:	d0ce      	beq.n	10011ee0 <__ieee754_sqrt+0xfc>
10011f42:	2500      	movs	r5, #0
10011f44:	2a00      	cmp	r2, #0
10011f46:	d131      	bne.n	10011fac <__ieee754_sqrt+0x1c8>
10011f48:	0ae2      	lsrs	r2, r4, #11
10011f4a:	3d15      	subs	r5, #21
10011f4c:	0564      	lsls	r4, r4, #21
10011f4e:	2a00      	cmp	r2, #0
10011f50:	d0fa      	beq.n	10011f48 <__ieee754_sqrt+0x164>
10011f52:	2380      	movs	r3, #128	; 0x80
10011f54:	035b      	lsls	r3, r3, #13
10011f56:	421a      	tst	r2, r3
10011f58:	d123      	bne.n	10011fa2 <__ieee754_sqrt+0x1be>
10011f5a:	2080      	movs	r0, #128	; 0x80
10011f5c:	2300      	movs	r3, #0
10011f5e:	0340      	lsls	r0, r0, #13
10011f60:	e000      	b.n	10011f64 <__ieee754_sqrt+0x180>
10011f62:	000b      	movs	r3, r1
10011f64:	0052      	lsls	r2, r2, #1
10011f66:	1c59      	adds	r1, r3, #1
10011f68:	4202      	tst	r2, r0
10011f6a:	d0fa      	beq.n	10011f62 <__ieee754_sqrt+0x17e>
10011f6c:	2020      	movs	r0, #32
10011f6e:	1a40      	subs	r0, r0, r1
10011f70:	1aed      	subs	r5, r5, r3
10011f72:	0023      	movs	r3, r4
10011f74:	40c3      	lsrs	r3, r0
10011f76:	408c      	lsls	r4, r1
10011f78:	431a      	orrs	r2, r3
10011f7a:	e74a      	b.n	10011e12 <__ieee754_sqrt+0x2e>
10011f7c:	0002      	movs	r2, r0
10011f7e:	002b      	movs	r3, r5
10011f80:	0029      	movs	r1, r5
10011f82:	f004 fabb 	bl	100164fc <__aeabi_dmul>
10011f86:	0032      	movs	r2, r6
10011f88:	002b      	movs	r3, r5
10011f8a:	f003 fb67 	bl	1001565c <__aeabi_dadd>
10011f8e:	0006      	movs	r6, r0
10011f90:	000f      	movs	r7, r1
10011f92:	e7a5      	b.n	10011ee0 <__ieee754_sqrt+0xfc>
10011f94:	4665      	mov	r5, ip
10011f96:	2d00      	cmp	r5, #0
10011f98:	dab9      	bge.n	10011f0e <__ieee754_sqrt+0x12a>
10011f9a:	e7b2      	b.n	10011f02 <__ieee754_sqrt+0x11e>
10011f9c:	3601      	adds	r6, #1
10011f9e:	2300      	movs	r3, #0
10011fa0:	e790      	b.n	10011ec4 <__ieee754_sqrt+0xe0>
10011fa2:	2301      	movs	r3, #1
10011fa4:	2020      	movs	r0, #32
10011fa6:	425b      	negs	r3, r3
10011fa8:	2100      	movs	r1, #0
10011faa:	e7e1      	b.n	10011f70 <__ieee754_sqrt+0x18c>
10011fac:	003b      	movs	r3, r7
10011fae:	0002      	movs	r2, r0
10011fb0:	0039      	movs	r1, r7
10011fb2:	f004 fd1d 	bl	100169f0 <__aeabi_dsub>
10011fb6:	0002      	movs	r2, r0
10011fb8:	000b      	movs	r3, r1
10011fba:	f003 fe7b 	bl	10015cb4 <__aeabi_ddiv>
10011fbe:	0006      	movs	r6, r0
10011fc0:	000f      	movs	r7, r1
10011fc2:	e78d      	b.n	10011ee0 <__ieee754_sqrt+0xfc>
10011fc4:	7ff00000 	.word	0x7ff00000
10011fc8:	fffffc01 	.word	0xfffffc01
10011fcc:	3fe00000 	.word	0x3fe00000

10011fd0 <fabs>:
10011fd0:	0049      	lsls	r1, r1, #1
10011fd2:	084b      	lsrs	r3, r1, #1
10011fd4:	0019      	movs	r1, r3
10011fd6:	4770      	bx	lr

10011fd8 <finite>:
10011fd8:	4b03      	ldr	r3, [pc, #12]	; (10011fe8 <finite+0x10>)
10011fda:	0048      	lsls	r0, r1, #1
10011fdc:	469c      	mov	ip, r3
10011fde:	0840      	lsrs	r0, r0, #1
10011fe0:	4460      	add	r0, ip
10011fe2:	0fc0      	lsrs	r0, r0, #31
10011fe4:	4770      	bx	lr
10011fe6:	46c0      	nop			; (mov r8, r8)
10011fe8:	80100000 	.word	0x80100000

10011fec <matherr>:
10011fec:	2000      	movs	r0, #0
10011fee:	4770      	bx	lr

10011ff0 <nan>:
10011ff0:	2000      	movs	r0, #0
10011ff2:	4901      	ldr	r1, [pc, #4]	; (10011ff8 <nan+0x8>)
10011ff4:	4770      	bx	lr
10011ff6:	46c0      	nop			; (mov r8, r8)
10011ff8:	7ff80000 	.word	0x7ff80000

10011ffc <rint>:
10011ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ffe:	4647      	mov	r7, r8
10012000:	b480      	push	{r7}
10012002:	0fcb      	lsrs	r3, r1, #31
10012004:	4698      	mov	r8, r3
10012006:	4c4a      	ldr	r4, [pc, #296]	; (10012130 <rint+0x134>)
10012008:	004b      	lsls	r3, r1, #1
1001200a:	0d5b      	lsrs	r3, r3, #21
1001200c:	191e      	adds	r6, r3, r4
1001200e:	b082      	sub	sp, #8
10012010:	0007      	movs	r7, r0
10012012:	000a      	movs	r2, r1
10012014:	2e13      	cmp	r6, #19
10012016:	dc35      	bgt.n	10012084 <rint+0x88>
10012018:	2e00      	cmp	r6, #0
1001201a:	db57      	blt.n	100120cc <rint+0xd0>
1001201c:	4b45      	ldr	r3, [pc, #276]	; (10012134 <rint+0x138>)
1001201e:	0004      	movs	r4, r0
10012020:	4133      	asrs	r3, r6
10012022:	001f      	movs	r7, r3
10012024:	400f      	ands	r7, r1
10012026:	4307      	orrs	r7, r0
10012028:	000d      	movs	r5, r1
1001202a:	2f00      	cmp	r7, #0
1001202c:	d024      	beq.n	10012078 <rint+0x7c>
1001202e:	085b      	lsrs	r3, r3, #1
10012030:	001c      	movs	r4, r3
10012032:	400c      	ands	r4, r1
10012034:	4320      	orrs	r0, r4
10012036:	2700      	movs	r7, #0
10012038:	2800      	cmp	r0, #0
1001203a:	d007      	beq.n	1001204c <rint+0x50>
1001203c:	2e13      	cmp	r6, #19
1001203e:	d100      	bne.n	10012042 <rint+0x46>
10012040:	e072      	b.n	10012128 <rint+0x12c>
10012042:	2280      	movs	r2, #128	; 0x80
10012044:	02d2      	lsls	r2, r2, #11
10012046:	4132      	asrs	r2, r6
10012048:	4399      	bics	r1, r3
1001204a:	430a      	orrs	r2, r1
1001204c:	4643      	mov	r3, r8
1001204e:	00de      	lsls	r6, r3, #3
10012050:	4b39      	ldr	r3, [pc, #228]	; (10012138 <rint+0x13c>)
10012052:	0011      	movs	r1, r2
10012054:	199e      	adds	r6, r3, r6
10012056:	6834      	ldr	r4, [r6, #0]
10012058:	6875      	ldr	r5, [r6, #4]
1001205a:	0038      	movs	r0, r7
1001205c:	0022      	movs	r2, r4
1001205e:	002b      	movs	r3, r5
10012060:	f003 fafc 	bl	1001565c <__aeabi_dadd>
10012064:	9000      	str	r0, [sp, #0]
10012066:	9101      	str	r1, [sp, #4]
10012068:	9800      	ldr	r0, [sp, #0]
1001206a:	9901      	ldr	r1, [sp, #4]
1001206c:	0022      	movs	r2, r4
1001206e:	002b      	movs	r3, r5
10012070:	f004 fcbe 	bl	100169f0 <__aeabi_dsub>
10012074:	0004      	movs	r4, r0
10012076:	000d      	movs	r5, r1
10012078:	0020      	movs	r0, r4
1001207a:	0029      	movs	r1, r5
1001207c:	b002      	add	sp, #8
1001207e:	bc04      	pop	{r2}
10012080:	4690      	mov	r8, r2
10012082:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012084:	2e33      	cmp	r6, #51	; 0x33
10012086:	dd0c      	ble.n	100120a2 <rint+0xa6>
10012088:	2380      	movs	r3, #128	; 0x80
1001208a:	0004      	movs	r4, r0
1001208c:	000d      	movs	r5, r1
1001208e:	00db      	lsls	r3, r3, #3
10012090:	429e      	cmp	r6, r3
10012092:	d1f1      	bne.n	10012078 <rint+0x7c>
10012094:	0002      	movs	r2, r0
10012096:	000b      	movs	r3, r1
10012098:	f003 fae0 	bl	1001565c <__aeabi_dadd>
1001209c:	0004      	movs	r4, r0
1001209e:	000d      	movs	r5, r1
100120a0:	e7ea      	b.n	10012078 <rint+0x7c>
100120a2:	4c26      	ldr	r4, [pc, #152]	; (1001213c <rint+0x140>)
100120a4:	000d      	movs	r5, r1
100120a6:	46a4      	mov	ip, r4
100120a8:	2401      	movs	r4, #1
100120aa:	4463      	add	r3, ip
100120ac:	4264      	negs	r4, r4
100120ae:	40dc      	lsrs	r4, r3
100120b0:	46a4      	mov	ip, r4
100120b2:	4661      	mov	r1, ip
100120b4:	0004      	movs	r4, r0
100120b6:	4201      	tst	r1, r0
100120b8:	d0de      	beq.n	10012078 <rint+0x7c>
100120ba:	0849      	lsrs	r1, r1, #1
100120bc:	4201      	tst	r1, r0
100120be:	d0c5      	beq.n	1001204c <rint+0x50>
100120c0:	2780      	movs	r7, #128	; 0x80
100120c2:	05ff      	lsls	r7, r7, #23
100120c4:	411f      	asrs	r7, r3
100120c6:	4388      	bics	r0, r1
100120c8:	4307      	orrs	r7, r0
100120ca:	e7bf      	b.n	1001204c <rint+0x50>
100120cc:	004b      	lsls	r3, r1, #1
100120ce:	085b      	lsrs	r3, r3, #1
100120d0:	4303      	orrs	r3, r0
100120d2:	0004      	movs	r4, r0
100120d4:	000d      	movs	r5, r1
100120d6:	2b00      	cmp	r3, #0
100120d8:	d0ce      	beq.n	10012078 <rint+0x7c>
100120da:	030b      	lsls	r3, r1, #12
100120dc:	0b1b      	lsrs	r3, r3, #12
100120de:	4303      	orrs	r3, r0
100120e0:	425a      	negs	r2, r3
100120e2:	4313      	orrs	r3, r2
100120e4:	2280      	movs	r2, #128	; 0x80
100120e6:	0b1b      	lsrs	r3, r3, #12
100120e8:	0312      	lsls	r2, r2, #12
100120ea:	4013      	ands	r3, r2
100120ec:	0c4a      	lsrs	r2, r1, #17
100120ee:	0452      	lsls	r2, r2, #17
100120f0:	4313      	orrs	r3, r2
100120f2:	0019      	movs	r1, r3
100120f4:	4643      	mov	r3, r8
100120f6:	4a10      	ldr	r2, [pc, #64]	; (10012138 <rint+0x13c>)
100120f8:	00db      	lsls	r3, r3, #3
100120fa:	18d3      	adds	r3, r2, r3
100120fc:	681c      	ldr	r4, [r3, #0]
100120fe:	685d      	ldr	r5, [r3, #4]
10012100:	0022      	movs	r2, r4
10012102:	002b      	movs	r3, r5
10012104:	f003 faaa 	bl	1001565c <__aeabi_dadd>
10012108:	9000      	str	r0, [sp, #0]
1001210a:	9101      	str	r1, [sp, #4]
1001210c:	9800      	ldr	r0, [sp, #0]
1001210e:	9901      	ldr	r1, [sp, #4]
10012110:	0022      	movs	r2, r4
10012112:	002b      	movs	r3, r5
10012114:	f004 fc6c 	bl	100169f0 <__aeabi_dsub>
10012118:	4642      	mov	r2, r8
1001211a:	004b      	lsls	r3, r1, #1
1001211c:	085b      	lsrs	r3, r3, #1
1001211e:	07d6      	lsls	r6, r2, #31
10012120:	4333      	orrs	r3, r6
10012122:	0004      	movs	r4, r0
10012124:	001d      	movs	r5, r3
10012126:	e7a7      	b.n	10012078 <rint+0x7c>
10012128:	2780      	movs	r7, #128	; 0x80
1001212a:	063f      	lsls	r7, r7, #24
1001212c:	e789      	b.n	10012042 <rint+0x46>
1001212e:	46c0      	nop			; (mov r8, r8)
10012130:	fffffc01 	.word	0xfffffc01
10012134:	000fffff 	.word	0x000fffff
10012138:	10018c70 	.word	0x10018c70
1001213c:	fffffbed 	.word	0xfffffbed

10012140 <scalbn>:
10012140:	004b      	lsls	r3, r1, #1
10012142:	b570      	push	{r4, r5, r6, lr}
10012144:	0d5b      	lsrs	r3, r3, #21
10012146:	0014      	movs	r4, r2
10012148:	000a      	movs	r2, r1
1001214a:	2b00      	cmp	r3, #0
1001214c:	d11a      	bne.n	10012184 <scalbn+0x44>
1001214e:	004b      	lsls	r3, r1, #1
10012150:	085b      	lsrs	r3, r3, #1
10012152:	4303      	orrs	r3, r0
10012154:	d015      	beq.n	10012182 <scalbn+0x42>
10012156:	2200      	movs	r2, #0
10012158:	4b22      	ldr	r3, [pc, #136]	; (100121e4 <scalbn+0xa4>)
1001215a:	f004 f9cf 	bl	100164fc <__aeabi_dmul>
1001215e:	4b22      	ldr	r3, [pc, #136]	; (100121e8 <scalbn+0xa8>)
10012160:	000a      	movs	r2, r1
10012162:	429c      	cmp	r4, r3
10012164:	db22      	blt.n	100121ac <scalbn+0x6c>
10012166:	004b      	lsls	r3, r1, #1
10012168:	0d5b      	lsrs	r3, r3, #21
1001216a:	3b36      	subs	r3, #54	; 0x36
1001216c:	4d1f      	ldr	r5, [pc, #124]	; (100121ec <scalbn+0xac>)
1001216e:	18e3      	adds	r3, r4, r3
10012170:	42ab      	cmp	r3, r5
10012172:	dc20      	bgt.n	100121b6 <scalbn+0x76>
10012174:	2b00      	cmp	r3, #0
10012176:	dd0d      	ble.n	10012194 <scalbn+0x54>
10012178:	4c1d      	ldr	r4, [pc, #116]	; (100121f0 <scalbn+0xb0>)
1001217a:	051b      	lsls	r3, r3, #20
1001217c:	4022      	ands	r2, r4
1001217e:	431a      	orrs	r2, r3
10012180:	0011      	movs	r1, r2
10012182:	bd70      	pop	{r4, r5, r6, pc}
10012184:	4d1b      	ldr	r5, [pc, #108]	; (100121f4 <scalbn+0xb4>)
10012186:	42ab      	cmp	r3, r5
10012188:	d1f0      	bne.n	1001216c <scalbn+0x2c>
1001218a:	0002      	movs	r2, r0
1001218c:	000b      	movs	r3, r1
1001218e:	f003 fa65 	bl	1001565c <__aeabi_dadd>
10012192:	e7f6      	b.n	10012182 <scalbn+0x42>
10012194:	001d      	movs	r5, r3
10012196:	3535      	adds	r5, #53	; 0x35
10012198:	da18      	bge.n	100121cc <scalbn+0x8c>
1001219a:	4b17      	ldr	r3, [pc, #92]	; (100121f8 <scalbn+0xb8>)
1001219c:	0002      	movs	r2, r0
1001219e:	429c      	cmp	r4, r3
100121a0:	dc0a      	bgt.n	100121b8 <scalbn+0x78>
100121a2:	000b      	movs	r3, r1
100121a4:	4815      	ldr	r0, [pc, #84]	; (100121fc <scalbn+0xbc>)
100121a6:	4916      	ldr	r1, [pc, #88]	; (10012200 <scalbn+0xc0>)
100121a8:	f000 f832 	bl	10012210 <copysign>
100121ac:	4a13      	ldr	r2, [pc, #76]	; (100121fc <scalbn+0xbc>)
100121ae:	4b14      	ldr	r3, [pc, #80]	; (10012200 <scalbn+0xc0>)
100121b0:	f004 f9a4 	bl	100164fc <__aeabi_dmul>
100121b4:	e7e5      	b.n	10012182 <scalbn+0x42>
100121b6:	0002      	movs	r2, r0
100121b8:	000b      	movs	r3, r1
100121ba:	4812      	ldr	r0, [pc, #72]	; (10012204 <scalbn+0xc4>)
100121bc:	4912      	ldr	r1, [pc, #72]	; (10012208 <scalbn+0xc8>)
100121be:	f000 f827 	bl	10012210 <copysign>
100121c2:	4a10      	ldr	r2, [pc, #64]	; (10012204 <scalbn+0xc4>)
100121c4:	4b10      	ldr	r3, [pc, #64]	; (10012208 <scalbn+0xc8>)
100121c6:	f004 f999 	bl	100164fc <__aeabi_dmul>
100121ca:	e7da      	b.n	10012182 <scalbn+0x42>
100121cc:	4c08      	ldr	r4, [pc, #32]	; (100121f0 <scalbn+0xb0>)
100121ce:	3336      	adds	r3, #54	; 0x36
100121d0:	4022      	ands	r2, r4
100121d2:	051b      	lsls	r3, r3, #20
100121d4:	4313      	orrs	r3, r2
100121d6:	0019      	movs	r1, r3
100121d8:	2200      	movs	r2, #0
100121da:	4b0c      	ldr	r3, [pc, #48]	; (1001220c <scalbn+0xcc>)
100121dc:	f004 f98e 	bl	100164fc <__aeabi_dmul>
100121e0:	e7cf      	b.n	10012182 <scalbn+0x42>
100121e2:	46c0      	nop			; (mov r8, r8)
100121e4:	43500000 	.word	0x43500000
100121e8:	ffff3cb0 	.word	0xffff3cb0
100121ec:	000007fe 	.word	0x000007fe
100121f0:	800fffff 	.word	0x800fffff
100121f4:	000007ff 	.word	0x000007ff
100121f8:	0000c350 	.word	0x0000c350
100121fc:	c2f8f359 	.word	0xc2f8f359
10012200:	01a56e1f 	.word	0x01a56e1f
10012204:	8800759c 	.word	0x8800759c
10012208:	7e37e43c 	.word	0x7e37e43c
1001220c:	3c900000 	.word	0x3c900000

10012210 <copysign>:
10012210:	b530      	push	{r4, r5, lr}
10012212:	004a      	lsls	r2, r1, #1
10012214:	0fdb      	lsrs	r3, r3, #31
10012216:	07db      	lsls	r3, r3, #31
10012218:	0852      	lsrs	r2, r2, #1
1001221a:	431a      	orrs	r2, r3
1001221c:	0011      	movs	r1, r2
1001221e:	bd30      	pop	{r4, r5, pc}

10012220 <__errno>:
10012220:	4b01      	ldr	r3, [pc, #4]	; (10012228 <__errno+0x8>)
10012222:	6818      	ldr	r0, [r3, #0]
10012224:	4770      	bx	lr
10012226:	46c0      	nop			; (mov r8, r8)
10012228:	10019014 	.word	0x10019014

1001222c <__libc_init_array>:
1001222c:	4b0e      	ldr	r3, [pc, #56]	; (10012268 <__libc_init_array+0x3c>)
1001222e:	b570      	push	{r4, r5, r6, lr}
10012230:	2500      	movs	r5, #0
10012232:	001e      	movs	r6, r3
10012234:	4c0d      	ldr	r4, [pc, #52]	; (1001226c <__libc_init_array+0x40>)
10012236:	1ae4      	subs	r4, r4, r3
10012238:	10a4      	asrs	r4, r4, #2
1001223a:	42a5      	cmp	r5, r4
1001223c:	d004      	beq.n	10012248 <__libc_init_array+0x1c>
1001223e:	00ab      	lsls	r3, r5, #2
10012240:	58f3      	ldr	r3, [r6, r3]
10012242:	4798      	blx	r3
10012244:	3501      	adds	r5, #1
10012246:	e7f8      	b.n	1001223a <__libc_init_array+0xe>
10012248:	f006 fe9e 	bl	10018f88 <_init>
1001224c:	4b08      	ldr	r3, [pc, #32]	; (10012270 <__libc_init_array+0x44>)
1001224e:	2500      	movs	r5, #0
10012250:	001e      	movs	r6, r3
10012252:	4c08      	ldr	r4, [pc, #32]	; (10012274 <__libc_init_array+0x48>)
10012254:	1ae4      	subs	r4, r4, r3
10012256:	10a4      	asrs	r4, r4, #2
10012258:	42a5      	cmp	r5, r4
1001225a:	d004      	beq.n	10012266 <__libc_init_array+0x3a>
1001225c:	00ab      	lsls	r3, r5, #2
1001225e:	58f3      	ldr	r3, [r6, r3]
10012260:	4798      	blx	r3
10012262:	3501      	adds	r5, #1
10012264:	e7f8      	b.n	10012258 <__libc_init_array+0x2c>
10012266:	bd70      	pop	{r4, r5, r6, pc}
10012268:	10018f94 	.word	0x10018f94
1001226c:	10018f94 	.word	0x10018f94
10012270:	10018f94 	.word	0x10018f94
10012274:	10018f98 	.word	0x10018f98

10012278 <malloc>:
10012278:	b510      	push	{r4, lr}
1001227a:	4b03      	ldr	r3, [pc, #12]	; (10012288 <malloc+0x10>)
1001227c:	0001      	movs	r1, r0
1001227e:	6818      	ldr	r0, [r3, #0]
10012280:	f000 f86a 	bl	10012358 <_malloc_r>
10012284:	bd10      	pop	{r4, pc}
10012286:	46c0      	nop			; (mov r8, r8)
10012288:	10019014 	.word	0x10019014

1001228c <memcmp>:
1001228c:	b530      	push	{r4, r5, lr}
1001228e:	2400      	movs	r4, #0
10012290:	42a2      	cmp	r2, r4
10012292:	d008      	beq.n	100122a6 <memcmp+0x1a>
10012294:	5d03      	ldrb	r3, [r0, r4]
10012296:	1c65      	adds	r5, r4, #1
10012298:	5d0c      	ldrb	r4, [r1, r4]
1001229a:	42a3      	cmp	r3, r4
1001229c:	d001      	beq.n	100122a2 <memcmp+0x16>
1001229e:	1b18      	subs	r0, r3, r4
100122a0:	e002      	b.n	100122a8 <memcmp+0x1c>
100122a2:	002c      	movs	r4, r5
100122a4:	e7f4      	b.n	10012290 <memcmp+0x4>
100122a6:	2000      	movs	r0, #0
100122a8:	bd30      	pop	{r4, r5, pc}

100122aa <memcpy>:
100122aa:	2300      	movs	r3, #0
100122ac:	b510      	push	{r4, lr}
100122ae:	429a      	cmp	r2, r3
100122b0:	d003      	beq.n	100122ba <memcpy+0x10>
100122b2:	5ccc      	ldrb	r4, [r1, r3]
100122b4:	54c4      	strb	r4, [r0, r3]
100122b6:	3301      	adds	r3, #1
100122b8:	e7f9      	b.n	100122ae <memcpy+0x4>
100122ba:	bd10      	pop	{r4, pc}

100122bc <memset>:
100122bc:	0003      	movs	r3, r0
100122be:	1882      	adds	r2, r0, r2
100122c0:	4293      	cmp	r3, r2
100122c2:	d002      	beq.n	100122ca <memset+0xe>
100122c4:	7019      	strb	r1, [r3, #0]
100122c6:	3301      	adds	r3, #1
100122c8:	e7fa      	b.n	100122c0 <memset+0x4>
100122ca:	4770      	bx	lr

100122cc <_free_r>:
100122cc:	b530      	push	{r4, r5, lr}
100122ce:	2900      	cmp	r1, #0
100122d0:	d03e      	beq.n	10012350 <_free_r+0x84>
100122d2:	3904      	subs	r1, #4
100122d4:	680b      	ldr	r3, [r1, #0]
100122d6:	2b00      	cmp	r3, #0
100122d8:	da00      	bge.n	100122dc <_free_r+0x10>
100122da:	18c9      	adds	r1, r1, r3
100122dc:	4a1d      	ldr	r2, [pc, #116]	; (10012354 <_free_r+0x88>)
100122de:	6813      	ldr	r3, [r2, #0]
100122e0:	0014      	movs	r4, r2
100122e2:	2b00      	cmp	r3, #0
100122e4:	d102      	bne.n	100122ec <_free_r+0x20>
100122e6:	604b      	str	r3, [r1, #4]
100122e8:	6011      	str	r1, [r2, #0]
100122ea:	e031      	b.n	10012350 <_free_r+0x84>
100122ec:	428b      	cmp	r3, r1
100122ee:	d90d      	bls.n	1001230c <_free_r+0x40>
100122f0:	680a      	ldr	r2, [r1, #0]
100122f2:	1888      	adds	r0, r1, r2
100122f4:	4283      	cmp	r3, r0
100122f6:	d103      	bne.n	10012300 <_free_r+0x34>
100122f8:	6818      	ldr	r0, [r3, #0]
100122fa:	685b      	ldr	r3, [r3, #4]
100122fc:	1882      	adds	r2, r0, r2
100122fe:	600a      	str	r2, [r1, #0]
10012300:	604b      	str	r3, [r1, #4]
10012302:	6021      	str	r1, [r4, #0]
10012304:	e024      	b.n	10012350 <_free_r+0x84>
10012306:	428a      	cmp	r2, r1
10012308:	d803      	bhi.n	10012312 <_free_r+0x46>
1001230a:	0013      	movs	r3, r2
1001230c:	685a      	ldr	r2, [r3, #4]
1001230e:	2a00      	cmp	r2, #0
10012310:	d1f9      	bne.n	10012306 <_free_r+0x3a>
10012312:	681d      	ldr	r5, [r3, #0]
10012314:	195c      	adds	r4, r3, r5
10012316:	428c      	cmp	r4, r1
10012318:	d10b      	bne.n	10012332 <_free_r+0x66>
1001231a:	6809      	ldr	r1, [r1, #0]
1001231c:	1869      	adds	r1, r5, r1
1001231e:	1858      	adds	r0, r3, r1
10012320:	6019      	str	r1, [r3, #0]
10012322:	4282      	cmp	r2, r0
10012324:	d114      	bne.n	10012350 <_free_r+0x84>
10012326:	6810      	ldr	r0, [r2, #0]
10012328:	6852      	ldr	r2, [r2, #4]
1001232a:	1841      	adds	r1, r0, r1
1001232c:	6019      	str	r1, [r3, #0]
1001232e:	605a      	str	r2, [r3, #4]
10012330:	e00e      	b.n	10012350 <_free_r+0x84>
10012332:	428c      	cmp	r4, r1
10012334:	d902      	bls.n	1001233c <_free_r+0x70>
10012336:	230c      	movs	r3, #12
10012338:	6003      	str	r3, [r0, #0]
1001233a:	e009      	b.n	10012350 <_free_r+0x84>
1001233c:	6808      	ldr	r0, [r1, #0]
1001233e:	180c      	adds	r4, r1, r0
10012340:	42a2      	cmp	r2, r4
10012342:	d103      	bne.n	1001234c <_free_r+0x80>
10012344:	6814      	ldr	r4, [r2, #0]
10012346:	6852      	ldr	r2, [r2, #4]
10012348:	1820      	adds	r0, r4, r0
1001234a:	6008      	str	r0, [r1, #0]
1001234c:	604a      	str	r2, [r1, #4]
1001234e:	6059      	str	r1, [r3, #4]
10012350:	bd30      	pop	{r4, r5, pc}
10012352:	46c0      	nop			; (mov r8, r8)
10012354:	1001ab10 	.word	0x1001ab10

10012358 <_malloc_r>:
10012358:	2303      	movs	r3, #3
1001235a:	b570      	push	{r4, r5, r6, lr}
1001235c:	1ccd      	adds	r5, r1, #3
1001235e:	439d      	bics	r5, r3
10012360:	3508      	adds	r5, #8
10012362:	0006      	movs	r6, r0
10012364:	2d0c      	cmp	r5, #12
10012366:	d201      	bcs.n	1001236c <_malloc_r+0x14>
10012368:	250c      	movs	r5, #12
1001236a:	e005      	b.n	10012378 <_malloc_r+0x20>
1001236c:	2d00      	cmp	r5, #0
1001236e:	da03      	bge.n	10012378 <_malloc_r+0x20>
10012370:	230c      	movs	r3, #12
10012372:	2000      	movs	r0, #0
10012374:	6033      	str	r3, [r6, #0]
10012376:	e040      	b.n	100123fa <_malloc_r+0xa2>
10012378:	42a9      	cmp	r1, r5
1001237a:	d8f9      	bhi.n	10012370 <_malloc_r+0x18>
1001237c:	4b1f      	ldr	r3, [pc, #124]	; (100123fc <_malloc_r+0xa4>)
1001237e:	681c      	ldr	r4, [r3, #0]
10012380:	001a      	movs	r2, r3
10012382:	0021      	movs	r1, r4
10012384:	2900      	cmp	r1, #0
10012386:	d013      	beq.n	100123b0 <_malloc_r+0x58>
10012388:	680b      	ldr	r3, [r1, #0]
1001238a:	1b5b      	subs	r3, r3, r5
1001238c:	d40d      	bmi.n	100123aa <_malloc_r+0x52>
1001238e:	2b0b      	cmp	r3, #11
10012390:	d902      	bls.n	10012398 <_malloc_r+0x40>
10012392:	600b      	str	r3, [r1, #0]
10012394:	18cc      	adds	r4, r1, r3
10012396:	e01e      	b.n	100123d6 <_malloc_r+0x7e>
10012398:	428c      	cmp	r4, r1
1001239a:	d102      	bne.n	100123a2 <_malloc_r+0x4a>
1001239c:	6863      	ldr	r3, [r4, #4]
1001239e:	6013      	str	r3, [r2, #0]
100123a0:	e01a      	b.n	100123d8 <_malloc_r+0x80>
100123a2:	684b      	ldr	r3, [r1, #4]
100123a4:	6063      	str	r3, [r4, #4]
100123a6:	000c      	movs	r4, r1
100123a8:	e016      	b.n	100123d8 <_malloc_r+0x80>
100123aa:	000c      	movs	r4, r1
100123ac:	6849      	ldr	r1, [r1, #4]
100123ae:	e7e9      	b.n	10012384 <_malloc_r+0x2c>
100123b0:	4c13      	ldr	r4, [pc, #76]	; (10012400 <_malloc_r+0xa8>)
100123b2:	6823      	ldr	r3, [r4, #0]
100123b4:	2b00      	cmp	r3, #0
100123b6:	d103      	bne.n	100123c0 <_malloc_r+0x68>
100123b8:	0030      	movs	r0, r6
100123ba:	f000 fd6f 	bl	10012e9c <_sbrk_r>
100123be:	6020      	str	r0, [r4, #0]
100123c0:	0029      	movs	r1, r5
100123c2:	0030      	movs	r0, r6
100123c4:	f000 fd6a 	bl	10012e9c <_sbrk_r>
100123c8:	1c43      	adds	r3, r0, #1
100123ca:	d0d1      	beq.n	10012370 <_malloc_r+0x18>
100123cc:	2303      	movs	r3, #3
100123ce:	1cc4      	adds	r4, r0, #3
100123d0:	439c      	bics	r4, r3
100123d2:	42a0      	cmp	r0, r4
100123d4:	d10a      	bne.n	100123ec <_malloc_r+0x94>
100123d6:	6025      	str	r5, [r4, #0]
100123d8:	0020      	movs	r0, r4
100123da:	2207      	movs	r2, #7
100123dc:	300b      	adds	r0, #11
100123de:	1d23      	adds	r3, r4, #4
100123e0:	4390      	bics	r0, r2
100123e2:	1ac3      	subs	r3, r0, r3
100123e4:	d009      	beq.n	100123fa <_malloc_r+0xa2>
100123e6:	425a      	negs	r2, r3
100123e8:	50e2      	str	r2, [r4, r3]
100123ea:	e006      	b.n	100123fa <_malloc_r+0xa2>
100123ec:	1a21      	subs	r1, r4, r0
100123ee:	0030      	movs	r0, r6
100123f0:	f000 fd54 	bl	10012e9c <_sbrk_r>
100123f4:	1c43      	adds	r3, r0, #1
100123f6:	d1ee      	bne.n	100123d6 <_malloc_r+0x7e>
100123f8:	e7ba      	b.n	10012370 <_malloc_r+0x18>
100123fa:	bd70      	pop	{r4, r5, r6, pc}
100123fc:	1001ab10 	.word	0x1001ab10
10012400:	1001ab0c 	.word	0x1001ab0c

10012404 <__cvt>:
10012404:	b5f0      	push	{r4, r5, r6, r7, lr}
10012406:	b08b      	sub	sp, #44	; 0x2c
10012408:	0014      	movs	r4, r2
1001240a:	1e1d      	subs	r5, r3, #0
1001240c:	9912      	ldr	r1, [sp, #72]	; 0x48
1001240e:	da06      	bge.n	1001241e <__cvt+0x1a>
10012410:	2480      	movs	r4, #128	; 0x80
10012412:	0624      	lsls	r4, r4, #24
10012414:	191b      	adds	r3, r3, r4
10012416:	001d      	movs	r5, r3
10012418:	0014      	movs	r4, r2
1001241a:	232d      	movs	r3, #45	; 0x2d
1001241c:	e000      	b.n	10012420 <__cvt+0x1c>
1001241e:	2300      	movs	r3, #0
10012420:	700b      	strb	r3, [r1, #0]
10012422:	2320      	movs	r3, #32
10012424:	9e14      	ldr	r6, [sp, #80]	; 0x50
10012426:	2203      	movs	r2, #3
10012428:	439e      	bics	r6, r3
1001242a:	2e46      	cmp	r6, #70	; 0x46
1001242c:	d007      	beq.n	1001243e <__cvt+0x3a>
1001242e:	0033      	movs	r3, r6
10012430:	3b45      	subs	r3, #69	; 0x45
10012432:	4259      	negs	r1, r3
10012434:	414b      	adcs	r3, r1
10012436:	9910      	ldr	r1, [sp, #64]	; 0x40
10012438:	3a01      	subs	r2, #1
1001243a:	18cb      	adds	r3, r1, r3
1001243c:	9310      	str	r3, [sp, #64]	; 0x40
1001243e:	ab09      	add	r3, sp, #36	; 0x24
10012440:	9304      	str	r3, [sp, #16]
10012442:	ab08      	add	r3, sp, #32
10012444:	9303      	str	r3, [sp, #12]
10012446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012448:	9200      	str	r2, [sp, #0]
1001244a:	9302      	str	r3, [sp, #8]
1001244c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001244e:	0022      	movs	r2, r4
10012450:	9301      	str	r3, [sp, #4]
10012452:	002b      	movs	r3, r5
10012454:	f000 ff4a 	bl	100132ec <_dtoa_r>
10012458:	0007      	movs	r7, r0
1001245a:	2e47      	cmp	r6, #71	; 0x47
1001245c:	d102      	bne.n	10012464 <__cvt+0x60>
1001245e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012460:	07db      	lsls	r3, r3, #31
10012462:	d52d      	bpl.n	100124c0 <__cvt+0xbc>
10012464:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012466:	18fb      	adds	r3, r7, r3
10012468:	9307      	str	r3, [sp, #28]
1001246a:	2e46      	cmp	r6, #70	; 0x46
1001246c:	d114      	bne.n	10012498 <__cvt+0x94>
1001246e:	783b      	ldrb	r3, [r7, #0]
10012470:	2b30      	cmp	r3, #48	; 0x30
10012472:	d10c      	bne.n	1001248e <__cvt+0x8a>
10012474:	2200      	movs	r2, #0
10012476:	2300      	movs	r3, #0
10012478:	0020      	movs	r0, r4
1001247a:	0029      	movs	r1, r5
1001247c:	f002 fdc2 	bl	10015004 <__aeabi_dcmpeq>
10012480:	2800      	cmp	r0, #0
10012482:	d104      	bne.n	1001248e <__cvt+0x8a>
10012484:	2301      	movs	r3, #1
10012486:	9a10      	ldr	r2, [sp, #64]	; 0x40
10012488:	1a9b      	subs	r3, r3, r2
1001248a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1001248c:	6013      	str	r3, [r2, #0]
1001248e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012490:	9a07      	ldr	r2, [sp, #28]
10012492:	681b      	ldr	r3, [r3, #0]
10012494:	18d3      	adds	r3, r2, r3
10012496:	9307      	str	r3, [sp, #28]
10012498:	2200      	movs	r2, #0
1001249a:	2300      	movs	r3, #0
1001249c:	0020      	movs	r0, r4
1001249e:	0029      	movs	r1, r5
100124a0:	f002 fdb0 	bl	10015004 <__aeabi_dcmpeq>
100124a4:	2230      	movs	r2, #48	; 0x30
100124a6:	2800      	cmp	r0, #0
100124a8:	d002      	beq.n	100124b0 <__cvt+0xac>
100124aa:	9b07      	ldr	r3, [sp, #28]
100124ac:	9309      	str	r3, [sp, #36]	; 0x24
100124ae:	e007      	b.n	100124c0 <__cvt+0xbc>
100124b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100124b2:	9907      	ldr	r1, [sp, #28]
100124b4:	4299      	cmp	r1, r3
100124b6:	d903      	bls.n	100124c0 <__cvt+0xbc>
100124b8:	1c59      	adds	r1, r3, #1
100124ba:	9109      	str	r1, [sp, #36]	; 0x24
100124bc:	701a      	strb	r2, [r3, #0]
100124be:	e7f7      	b.n	100124b0 <__cvt+0xac>
100124c0:	0038      	movs	r0, r7
100124c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100124c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
100124c6:	1bdb      	subs	r3, r3, r7
100124c8:	6013      	str	r3, [r2, #0]
100124ca:	b00b      	add	sp, #44	; 0x2c
100124cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100124ce <__exponent>:
100124ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124d0:	232b      	movs	r3, #43	; 0x2b
100124d2:	0007      	movs	r7, r0
100124d4:	000c      	movs	r4, r1
100124d6:	7002      	strb	r2, [r0, #0]
100124d8:	1c86      	adds	r6, r0, #2
100124da:	2900      	cmp	r1, #0
100124dc:	da01      	bge.n	100124e2 <__exponent+0x14>
100124de:	232d      	movs	r3, #45	; 0x2d
100124e0:	424c      	negs	r4, r1
100124e2:	707b      	strb	r3, [r7, #1]
100124e4:	2c09      	cmp	r4, #9
100124e6:	dd1c      	ble.n	10012522 <__exponent+0x54>
100124e8:	466b      	mov	r3, sp
100124ea:	1ddd      	adds	r5, r3, #7
100124ec:	0020      	movs	r0, r4
100124ee:	210a      	movs	r1, #10
100124f0:	f002 fd72 	bl	10014fd8 <__aeabi_idivmod>
100124f4:	3d01      	subs	r5, #1
100124f6:	3130      	adds	r1, #48	; 0x30
100124f8:	7029      	strb	r1, [r5, #0]
100124fa:	0020      	movs	r0, r4
100124fc:	210a      	movs	r1, #10
100124fe:	f002 fc85 	bl	10014e0c <__aeabi_idiv>
10012502:	1e04      	subs	r4, r0, #0
10012504:	2c09      	cmp	r4, #9
10012506:	dcf1      	bgt.n	100124ec <__exponent+0x1e>
10012508:	3d01      	subs	r5, #1
1001250a:	3430      	adds	r4, #48	; 0x30
1001250c:	702c      	strb	r4, [r5, #0]
1001250e:	466b      	mov	r3, sp
10012510:	3307      	adds	r3, #7
10012512:	0030      	movs	r0, r6
10012514:	42ab      	cmp	r3, r5
10012516:	d909      	bls.n	1001252c <__exponent+0x5e>
10012518:	782b      	ldrb	r3, [r5, #0]
1001251a:	3501      	adds	r5, #1
1001251c:	7033      	strb	r3, [r6, #0]
1001251e:	3601      	adds	r6, #1
10012520:	e7f5      	b.n	1001250e <__exponent+0x40>
10012522:	2330      	movs	r3, #48	; 0x30
10012524:	18e4      	adds	r4, r4, r3
10012526:	7033      	strb	r3, [r6, #0]
10012528:	1cb0      	adds	r0, r6, #2
1001252a:	7074      	strb	r4, [r6, #1]
1001252c:	1bc0      	subs	r0, r0, r7
1001252e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012530 <_printf_float>:
10012530:	b5f0      	push	{r4, r5, r6, r7, lr}
10012532:	b095      	sub	sp, #84	; 0x54
10012534:	000c      	movs	r4, r1
10012536:	920a      	str	r2, [sp, #40]	; 0x28
10012538:	930b      	str	r3, [sp, #44]	; 0x2c
1001253a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
1001253c:	9009      	str	r0, [sp, #36]	; 0x24
1001253e:	f001 fe23 	bl	10014188 <_localeconv_r>
10012542:	6803      	ldr	r3, [r0, #0]
10012544:	0018      	movs	r0, r3
10012546:	930d      	str	r3, [sp, #52]	; 0x34
10012548:	f000 fd74 	bl	10013034 <strlen>
1001254c:	2300      	movs	r3, #0
1001254e:	9312      	str	r3, [sp, #72]	; 0x48
10012550:	6823      	ldr	r3, [r4, #0]
10012552:	900e      	str	r0, [sp, #56]	; 0x38
10012554:	930c      	str	r3, [sp, #48]	; 0x30
10012556:	990c      	ldr	r1, [sp, #48]	; 0x30
10012558:	7e27      	ldrb	r7, [r4, #24]
1001255a:	682b      	ldr	r3, [r5, #0]
1001255c:	2207      	movs	r2, #7
1001255e:	05c9      	lsls	r1, r1, #23
10012560:	d501      	bpl.n	10012566 <_printf_float+0x36>
10012562:	189b      	adds	r3, r3, r2
10012564:	e000      	b.n	10012568 <_printf_float+0x38>
10012566:	3307      	adds	r3, #7
10012568:	4393      	bics	r3, r2
1001256a:	001a      	movs	r2, r3
1001256c:	3208      	adds	r2, #8
1001256e:	602a      	str	r2, [r5, #0]
10012570:	681a      	ldr	r2, [r3, #0]
10012572:	685b      	ldr	r3, [r3, #4]
10012574:	64a2      	str	r2, [r4, #72]	; 0x48
10012576:	64e3      	str	r3, [r4, #76]	; 0x4c
10012578:	2201      	movs	r2, #1
1001257a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
1001257c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
1001257e:	006b      	lsls	r3, r5, #1
10012580:	085b      	lsrs	r3, r3, #1
10012582:	930f      	str	r3, [sp, #60]	; 0x3c
10012584:	4252      	negs	r2, r2
10012586:	4bc0      	ldr	r3, [pc, #768]	; (10012888 <_printf_float+0x358>)
10012588:	0030      	movs	r0, r6
1001258a:	990f      	ldr	r1, [sp, #60]	; 0x3c
1001258c:	f004 fd84 	bl	10017098 <__aeabi_dcmpun>
10012590:	2800      	cmp	r0, #0
10012592:	d119      	bne.n	100125c8 <_printf_float+0x98>
10012594:	2201      	movs	r2, #1
10012596:	4bbc      	ldr	r3, [pc, #752]	; (10012888 <_printf_float+0x358>)
10012598:	4252      	negs	r2, r2
1001259a:	0030      	movs	r0, r6
1001259c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1001259e:	f002 fd41 	bl	10015024 <__aeabi_dcmple>
100125a2:	2800      	cmp	r0, #0
100125a4:	d110      	bne.n	100125c8 <_printf_float+0x98>
100125a6:	2200      	movs	r2, #0
100125a8:	2300      	movs	r3, #0
100125aa:	0030      	movs	r0, r6
100125ac:	0029      	movs	r1, r5
100125ae:	f002 fd2f 	bl	10015010 <__aeabi_dcmplt>
100125b2:	2800      	cmp	r0, #0
100125b4:	d003      	beq.n	100125be <_printf_float+0x8e>
100125b6:	0023      	movs	r3, r4
100125b8:	222d      	movs	r2, #45	; 0x2d
100125ba:	3343      	adds	r3, #67	; 0x43
100125bc:	701a      	strb	r2, [r3, #0]
100125be:	4db3      	ldr	r5, [pc, #716]	; (1001288c <_printf_float+0x35c>)
100125c0:	2f47      	cmp	r7, #71	; 0x47
100125c2:	d80e      	bhi.n	100125e2 <_printf_float+0xb2>
100125c4:	4db2      	ldr	r5, [pc, #712]	; (10012890 <_printf_float+0x360>)
100125c6:	e00c      	b.n	100125e2 <_printf_float+0xb2>
100125c8:	0032      	movs	r2, r6
100125ca:	002b      	movs	r3, r5
100125cc:	0030      	movs	r0, r6
100125ce:	0029      	movs	r1, r5
100125d0:	f004 fd62 	bl	10017098 <__aeabi_dcmpun>
100125d4:	2800      	cmp	r0, #0
100125d6:	d100      	bne.n	100125da <_printf_float+0xaa>
100125d8:	e19a      	b.n	10012910 <_printf_float+0x3e0>
100125da:	4dae      	ldr	r5, [pc, #696]	; (10012894 <_printf_float+0x364>)
100125dc:	2f47      	cmp	r7, #71	; 0x47
100125de:	d800      	bhi.n	100125e2 <_printf_float+0xb2>
100125e0:	4dad      	ldr	r5, [pc, #692]	; (10012898 <_printf_float+0x368>)
100125e2:	2303      	movs	r3, #3
100125e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100125e6:	6123      	str	r3, [r4, #16]
100125e8:	3301      	adds	r3, #1
100125ea:	439a      	bics	r2, r3
100125ec:	6022      	str	r2, [r4, #0]
100125ee:	2600      	movs	r6, #0
100125f0:	e042      	b.n	10012678 <_printf_float+0x148>
100125f2:	2f67      	cmp	r7, #103	; 0x67
100125f4:	d100      	bne.n	100125f8 <_printf_float+0xc8>
100125f6:	e193      	b.n	10012920 <_printf_float+0x3f0>
100125f8:	2f47      	cmp	r7, #71	; 0x47
100125fa:	d100      	bne.n	100125fe <_printf_float+0xce>
100125fc:	e190      	b.n	10012920 <_printf_float+0x3f0>
100125fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012600:	2100      	movs	r1, #0
10012602:	4313      	orrs	r3, r2
10012604:	aa12      	add	r2, sp, #72	; 0x48
10012606:	9205      	str	r2, [sp, #20]
10012608:	aa11      	add	r2, sp, #68	; 0x44
1001260a:	9203      	str	r2, [sp, #12]
1001260c:	2223      	movs	r2, #35	; 0x23
1001260e:	6023      	str	r3, [r4, #0]
10012610:	9106      	str	r1, [sp, #24]
10012612:	9301      	str	r3, [sp, #4]
10012614:	a908      	add	r1, sp, #32
10012616:	6863      	ldr	r3, [r4, #4]
10012618:	1852      	adds	r2, r2, r1
1001261a:	9202      	str	r2, [sp, #8]
1001261c:	9300      	str	r3, [sp, #0]
1001261e:	0032      	movs	r2, r6
10012620:	002b      	movs	r3, r5
10012622:	9704      	str	r7, [sp, #16]
10012624:	9809      	ldr	r0, [sp, #36]	; 0x24
10012626:	f7ff feed 	bl	10012404 <__cvt>
1001262a:	2320      	movs	r3, #32
1001262c:	003a      	movs	r2, r7
1001262e:	0005      	movs	r5, r0
10012630:	439a      	bics	r2, r3
10012632:	2a47      	cmp	r2, #71	; 0x47
10012634:	d100      	bne.n	10012638 <_printf_float+0x108>
10012636:	e18e      	b.n	10012956 <_printf_float+0x426>
10012638:	9911      	ldr	r1, [sp, #68]	; 0x44
1001263a:	2f65      	cmp	r7, #101	; 0x65
1001263c:	d900      	bls.n	10012640 <_printf_float+0x110>
1001263e:	e196      	b.n	1001296e <_printf_float+0x43e>
10012640:	0020      	movs	r0, r4
10012642:	3901      	subs	r1, #1
10012644:	003a      	movs	r2, r7
10012646:	3050      	adds	r0, #80	; 0x50
10012648:	9111      	str	r1, [sp, #68]	; 0x44
1001264a:	f7ff ff40 	bl	100124ce <__exponent>
1001264e:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012650:	0006      	movs	r6, r0
10012652:	1883      	adds	r3, r0, r2
10012654:	6123      	str	r3, [r4, #16]
10012656:	2a01      	cmp	r2, #1
10012658:	dd00      	ble.n	1001265c <_printf_float+0x12c>
1001265a:	e185      	b.n	10012968 <_printf_float+0x438>
1001265c:	6822      	ldr	r2, [r4, #0]
1001265e:	07d2      	lsls	r2, r2, #31
10012660:	d500      	bpl.n	10012664 <_printf_float+0x134>
10012662:	e181      	b.n	10012968 <_printf_float+0x438>
10012664:	2323      	movs	r3, #35	; 0x23
10012666:	aa08      	add	r2, sp, #32
10012668:	189b      	adds	r3, r3, r2
1001266a:	781b      	ldrb	r3, [r3, #0]
1001266c:	2b00      	cmp	r3, #0
1001266e:	d003      	beq.n	10012678 <_printf_float+0x148>
10012670:	0023      	movs	r3, r4
10012672:	222d      	movs	r2, #45	; 0x2d
10012674:	3343      	adds	r3, #67	; 0x43
10012676:	701a      	strb	r2, [r3, #0]
10012678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1001267a:	aa13      	add	r2, sp, #76	; 0x4c
1001267c:	9300      	str	r3, [sp, #0]
1001267e:	0021      	movs	r1, r4
10012680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012682:	9809      	ldr	r0, [sp, #36]	; 0x24
10012684:	f000 f9a4 	bl	100129d0 <_printf_common>
10012688:	1c43      	adds	r3, r0, #1
1001268a:	d102      	bne.n	10012692 <_printf_float+0x162>
1001268c:	2001      	movs	r0, #1
1001268e:	4240      	negs	r0, r0
10012690:	e19b      	b.n	100129ca <_printf_float+0x49a>
10012692:	6822      	ldr	r2, [r4, #0]
10012694:	0553      	lsls	r3, r2, #21
10012696:	d401      	bmi.n	1001269c <_printf_float+0x16c>
10012698:	6923      	ldr	r3, [r4, #16]
1001269a:	e064      	b.n	10012766 <_printf_float+0x236>
1001269c:	2f65      	cmp	r7, #101	; 0x65
1001269e:	d800      	bhi.n	100126a2 <_printf_float+0x172>
100126a0:	e0cc      	b.n	1001283c <_printf_float+0x30c>
100126a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
100126a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
100126a6:	2200      	movs	r2, #0
100126a8:	2300      	movs	r3, #0
100126aa:	f002 fcab 	bl	10015004 <__aeabi_dcmpeq>
100126ae:	2800      	cmp	r0, #0
100126b0:	d02c      	beq.n	1001270c <_printf_float+0x1dc>
100126b2:	2301      	movs	r3, #1
100126b4:	4a79      	ldr	r2, [pc, #484]	; (1001289c <_printf_float+0x36c>)
100126b6:	990a      	ldr	r1, [sp, #40]	; 0x28
100126b8:	9809      	ldr	r0, [sp, #36]	; 0x24
100126ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100126bc:	47a8      	blx	r5
100126be:	1c43      	adds	r3, r0, #1
100126c0:	d0e4      	beq.n	1001268c <_printf_float+0x15c>
100126c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
100126c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
100126c6:	4293      	cmp	r3, r2
100126c8:	db08      	blt.n	100126dc <_printf_float+0x1ac>
100126ca:	6823      	ldr	r3, [r4, #0]
100126cc:	07db      	lsls	r3, r3, #31
100126ce:	d405      	bmi.n	100126dc <_printf_float+0x1ac>
100126d0:	6823      	ldr	r3, [r4, #0]
100126d2:	2500      	movs	r5, #0
100126d4:	079b      	lsls	r3, r3, #30
100126d6:	d500      	bpl.n	100126da <_printf_float+0x1aa>
100126d8:	e10f      	b.n	100128fa <_printf_float+0x3ca>
100126da:	e113      	b.n	10012904 <_printf_float+0x3d4>
100126dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100126de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100126e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100126e2:	990a      	ldr	r1, [sp, #40]	; 0x28
100126e4:	9809      	ldr	r0, [sp, #36]	; 0x24
100126e6:	47a8      	blx	r5
100126e8:	2500      	movs	r5, #0
100126ea:	1c43      	adds	r3, r0, #1
100126ec:	d0ce      	beq.n	1001268c <_printf_float+0x15c>
100126ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
100126f0:	3b01      	subs	r3, #1
100126f2:	429d      	cmp	r5, r3
100126f4:	daec      	bge.n	100126d0 <_printf_float+0x1a0>
100126f6:	0022      	movs	r2, r4
100126f8:	2301      	movs	r3, #1
100126fa:	321a      	adds	r2, #26
100126fc:	990a      	ldr	r1, [sp, #40]	; 0x28
100126fe:	9809      	ldr	r0, [sp, #36]	; 0x24
10012700:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
10012702:	47b0      	blx	r6
10012704:	1c43      	adds	r3, r0, #1
10012706:	d0c1      	beq.n	1001268c <_printf_float+0x15c>
10012708:	3501      	adds	r5, #1
1001270a:	e7f0      	b.n	100126ee <_printf_float+0x1be>
1001270c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1001270e:	2b00      	cmp	r3, #0
10012710:	dc2b      	bgt.n	1001276a <_printf_float+0x23a>
10012712:	2301      	movs	r3, #1
10012714:	4a61      	ldr	r2, [pc, #388]	; (1001289c <_printf_float+0x36c>)
10012716:	990a      	ldr	r1, [sp, #40]	; 0x28
10012718:	9809      	ldr	r0, [sp, #36]	; 0x24
1001271a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1001271c:	47b0      	blx	r6
1001271e:	1c43      	adds	r3, r0, #1
10012720:	d0b4      	beq.n	1001268c <_printf_float+0x15c>
10012722:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012724:	2b00      	cmp	r3, #0
10012726:	d105      	bne.n	10012734 <_printf_float+0x204>
10012728:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001272a:	2b00      	cmp	r3, #0
1001272c:	d102      	bne.n	10012734 <_printf_float+0x204>
1001272e:	6823      	ldr	r3, [r4, #0]
10012730:	07db      	lsls	r3, r3, #31
10012732:	d5cd      	bpl.n	100126d0 <_printf_float+0x1a0>
10012734:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
10012736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001273a:	990a      	ldr	r1, [sp, #40]	; 0x28
1001273c:	9809      	ldr	r0, [sp, #36]	; 0x24
1001273e:	47b0      	blx	r6
10012740:	2600      	movs	r6, #0
10012742:	1c43      	adds	r3, r0, #1
10012744:	d0a2      	beq.n	1001268c <_printf_float+0x15c>
10012746:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012748:	425b      	negs	r3, r3
1001274a:	429e      	cmp	r6, r3
1001274c:	da0a      	bge.n	10012764 <_printf_float+0x234>
1001274e:	0022      	movs	r2, r4
10012750:	2301      	movs	r3, #1
10012752:	321a      	adds	r2, #26
10012754:	990a      	ldr	r1, [sp, #40]	; 0x28
10012756:	9809      	ldr	r0, [sp, #36]	; 0x24
10012758:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001275a:	47b8      	blx	r7
1001275c:	1c43      	adds	r3, r0, #1
1001275e:	d095      	beq.n	1001268c <_printf_float+0x15c>
10012760:	3601      	adds	r6, #1
10012762:	e7f0      	b.n	10012746 <_printf_float+0x216>
10012764:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012766:	002a      	movs	r2, r5
10012768:	e0ac      	b.n	100128c4 <_printf_float+0x394>
1001276a:	6da3      	ldr	r3, [r4, #88]	; 0x58
1001276c:	9e12      	ldr	r6, [sp, #72]	; 0x48
1001276e:	429e      	cmp	r6, r3
10012770:	dd00      	ble.n	10012774 <_printf_float+0x244>
10012772:	001e      	movs	r6, r3
10012774:	2e00      	cmp	r6, #0
10012776:	dc05      	bgt.n	10012784 <_printf_float+0x254>
10012778:	2300      	movs	r3, #0
1001277a:	930c      	str	r3, [sp, #48]	; 0x30
1001277c:	43f3      	mvns	r3, r6
1001277e:	17db      	asrs	r3, r3, #31
10012780:	930f      	str	r3, [sp, #60]	; 0x3c
10012782:	e015      	b.n	100127b0 <_printf_float+0x280>
10012784:	0033      	movs	r3, r6
10012786:	002a      	movs	r2, r5
10012788:	990a      	ldr	r1, [sp, #40]	; 0x28
1001278a:	9809      	ldr	r0, [sp, #36]	; 0x24
1001278c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001278e:	47b8      	blx	r7
10012790:	1c43      	adds	r3, r0, #1
10012792:	d1f1      	bne.n	10012778 <_printf_float+0x248>
10012794:	e77a      	b.n	1001268c <_printf_float+0x15c>
10012796:	0022      	movs	r2, r4
10012798:	2301      	movs	r3, #1
1001279a:	321a      	adds	r2, #26
1001279c:	990a      	ldr	r1, [sp, #40]	; 0x28
1001279e:	9809      	ldr	r0, [sp, #36]	; 0x24
100127a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100127a2:	47b8      	blx	r7
100127a4:	1c43      	adds	r3, r0, #1
100127a6:	d100      	bne.n	100127aa <_printf_float+0x27a>
100127a8:	e770      	b.n	1001268c <_printf_float+0x15c>
100127aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100127ac:	3301      	adds	r3, #1
100127ae:	930c      	str	r3, [sp, #48]	; 0x30
100127b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100127b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
100127b4:	990c      	ldr	r1, [sp, #48]	; 0x30
100127b6:	4033      	ands	r3, r6
100127b8:	1ad3      	subs	r3, r2, r3
100127ba:	4299      	cmp	r1, r3
100127bc:	dbeb      	blt.n	10012796 <_printf_float+0x266>
100127be:	18ae      	adds	r6, r5, r2
100127c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
100127c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
100127c4:	4293      	cmp	r3, r2
100127c6:	db0d      	blt.n	100127e4 <_printf_float+0x2b4>
100127c8:	6823      	ldr	r3, [r4, #0]
100127ca:	07db      	lsls	r3, r3, #31
100127cc:	d40a      	bmi.n	100127e4 <_printf_float+0x2b4>
100127ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
100127d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
100127d2:	18ed      	adds	r5, r5, r3
100127d4:	1bad      	subs	r5, r5, r6
100127d6:	1a9b      	subs	r3, r3, r2
100127d8:	429d      	cmp	r5, r3
100127da:	dd00      	ble.n	100127de <_printf_float+0x2ae>
100127dc:	001d      	movs	r5, r3
100127de:	2d00      	cmp	r5, #0
100127e0:	dc09      	bgt.n	100127f6 <_printf_float+0x2c6>
100127e2:	e011      	b.n	10012808 <_printf_float+0x2d8>
100127e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100127e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100127e8:	990a      	ldr	r1, [sp, #40]	; 0x28
100127ea:	9809      	ldr	r0, [sp, #36]	; 0x24
100127ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100127ee:	47b8      	blx	r7
100127f0:	1c43      	adds	r3, r0, #1
100127f2:	d1ec      	bne.n	100127ce <_printf_float+0x29e>
100127f4:	e74a      	b.n	1001268c <_printf_float+0x15c>
100127f6:	002b      	movs	r3, r5
100127f8:	0032      	movs	r2, r6
100127fa:	990a      	ldr	r1, [sp, #40]	; 0x28
100127fc:	9809      	ldr	r0, [sp, #36]	; 0x24
100127fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
10012800:	47b0      	blx	r6
10012802:	1c43      	adds	r3, r0, #1
10012804:	d100      	bne.n	10012808 <_printf_float+0x2d8>
10012806:	e741      	b.n	1001268c <_printf_float+0x15c>
10012808:	43ef      	mvns	r7, r5
1001280a:	17fb      	asrs	r3, r7, #31
1001280c:	2600      	movs	r6, #0
1001280e:	930c      	str	r3, [sp, #48]	; 0x30
10012810:	e00a      	b.n	10012828 <_printf_float+0x2f8>
10012812:	0022      	movs	r2, r4
10012814:	2301      	movs	r3, #1
10012816:	321a      	adds	r2, #26
10012818:	990a      	ldr	r1, [sp, #40]	; 0x28
1001281a:	9809      	ldr	r0, [sp, #36]	; 0x24
1001281c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001281e:	47b8      	blx	r7
10012820:	1c43      	adds	r3, r0, #1
10012822:	d100      	bne.n	10012826 <_printf_float+0x2f6>
10012824:	e732      	b.n	1001268c <_printf_float+0x15c>
10012826:	3601      	adds	r6, #1
10012828:	9a11      	ldr	r2, [sp, #68]	; 0x44
1001282a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001282c:	990c      	ldr	r1, [sp, #48]	; 0x30
1001282e:	1a9b      	subs	r3, r3, r2
10012830:	002a      	movs	r2, r5
10012832:	400a      	ands	r2, r1
10012834:	1a9b      	subs	r3, r3, r2
10012836:	429e      	cmp	r6, r3
10012838:	dbeb      	blt.n	10012812 <_printf_float+0x2e2>
1001283a:	e749      	b.n	100126d0 <_printf_float+0x1a0>
1001283c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001283e:	2b01      	cmp	r3, #1
10012840:	dc02      	bgt.n	10012848 <_printf_float+0x318>
10012842:	2301      	movs	r3, #1
10012844:	421a      	tst	r2, r3
10012846:	d045      	beq.n	100128d4 <_printf_float+0x3a4>
10012848:	2301      	movs	r3, #1
1001284a:	002a      	movs	r2, r5
1001284c:	990a      	ldr	r1, [sp, #40]	; 0x28
1001284e:	9809      	ldr	r0, [sp, #36]	; 0x24
10012850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10012852:	47b8      	blx	r7
10012854:	1c43      	adds	r3, r0, #1
10012856:	d100      	bne.n	1001285a <_printf_float+0x32a>
10012858:	e718      	b.n	1001268c <_printf_float+0x15c>
1001285a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1001285c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1001285e:	990a      	ldr	r1, [sp, #40]	; 0x28
10012860:	9809      	ldr	r0, [sp, #36]	; 0x24
10012862:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10012864:	47b8      	blx	r7
10012866:	1c43      	adds	r3, r0, #1
10012868:	d100      	bne.n	1001286c <_printf_float+0x33c>
1001286a:	e70f      	b.n	1001268c <_printf_float+0x15c>
1001286c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1001286e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10012870:	2200      	movs	r2, #0
10012872:	2300      	movs	r3, #0
10012874:	f002 fbc6 	bl	10015004 <__aeabi_dcmpeq>
10012878:	2800      	cmp	r0, #0
1001287a:	d001      	beq.n	10012880 <_printf_float+0x350>
1001287c:	2500      	movs	r5, #0
1001287e:	e01a      	b.n	100128b6 <_printf_float+0x386>
10012880:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012882:	1c6a      	adds	r2, r5, #1
10012884:	3b01      	subs	r3, #1
10012886:	e026      	b.n	100128d6 <_printf_float+0x3a6>
10012888:	7fefffff 	.word	0x7fefffff
1001288c:	10018c8c 	.word	0x10018c8c
10012890:	10018c88 	.word	0x10018c88
10012894:	10018c94 	.word	0x10018c94
10012898:	10018c90 	.word	0x10018c90
1001289c:	10018c98 	.word	0x10018c98
100128a0:	0022      	movs	r2, r4
100128a2:	2301      	movs	r3, #1
100128a4:	321a      	adds	r2, #26
100128a6:	990a      	ldr	r1, [sp, #40]	; 0x28
100128a8:	9809      	ldr	r0, [sp, #36]	; 0x24
100128aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
100128ac:	47b8      	blx	r7
100128ae:	1c43      	adds	r3, r0, #1
100128b0:	d100      	bne.n	100128b4 <_printf_float+0x384>
100128b2:	e6eb      	b.n	1001268c <_printf_float+0x15c>
100128b4:	3501      	adds	r5, #1
100128b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
100128b8:	3b01      	subs	r3, #1
100128ba:	429d      	cmp	r5, r3
100128bc:	dbf0      	blt.n	100128a0 <_printf_float+0x370>
100128be:	0022      	movs	r2, r4
100128c0:	0033      	movs	r3, r6
100128c2:	3250      	adds	r2, #80	; 0x50
100128c4:	990a      	ldr	r1, [sp, #40]	; 0x28
100128c6:	9809      	ldr	r0, [sp, #36]	; 0x24
100128c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100128ca:	47a8      	blx	r5
100128cc:	1c43      	adds	r3, r0, #1
100128ce:	d000      	beq.n	100128d2 <_printf_float+0x3a2>
100128d0:	e6fe      	b.n	100126d0 <_printf_float+0x1a0>
100128d2:	e6db      	b.n	1001268c <_printf_float+0x15c>
100128d4:	002a      	movs	r2, r5
100128d6:	990a      	ldr	r1, [sp, #40]	; 0x28
100128d8:	9809      	ldr	r0, [sp, #36]	; 0x24
100128da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100128dc:	47a8      	blx	r5
100128de:	1c43      	adds	r3, r0, #1
100128e0:	d1ed      	bne.n	100128be <_printf_float+0x38e>
100128e2:	e6d3      	b.n	1001268c <_printf_float+0x15c>
100128e4:	0022      	movs	r2, r4
100128e6:	2301      	movs	r3, #1
100128e8:	3219      	adds	r2, #25
100128ea:	990a      	ldr	r1, [sp, #40]	; 0x28
100128ec:	9809      	ldr	r0, [sp, #36]	; 0x24
100128ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100128f0:	47b0      	blx	r6
100128f2:	1c43      	adds	r3, r0, #1
100128f4:	d100      	bne.n	100128f8 <_printf_float+0x3c8>
100128f6:	e6c9      	b.n	1001268c <_printf_float+0x15c>
100128f8:	3501      	adds	r5, #1
100128fa:	68e3      	ldr	r3, [r4, #12]
100128fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100128fe:	1a9b      	subs	r3, r3, r2
10012900:	429d      	cmp	r5, r3
10012902:	dbef      	blt.n	100128e4 <_printf_float+0x3b4>
10012904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012906:	68e0      	ldr	r0, [r4, #12]
10012908:	4298      	cmp	r0, r3
1001290a:	da5e      	bge.n	100129ca <_printf_float+0x49a>
1001290c:	0018      	movs	r0, r3
1001290e:	e05c      	b.n	100129ca <_printf_float+0x49a>
10012910:	2380      	movs	r3, #128	; 0x80
10012912:	6862      	ldr	r2, [r4, #4]
10012914:	00db      	lsls	r3, r3, #3
10012916:	1c51      	adds	r1, r2, #1
10012918:	d000      	beq.n	1001291c <_printf_float+0x3ec>
1001291a:	e66a      	b.n	100125f2 <_printf_float+0xc2>
1001291c:	3207      	adds	r2, #7
1001291e:	e002      	b.n	10012926 <_printf_float+0x3f6>
10012920:	2a00      	cmp	r2, #0
10012922:	d102      	bne.n	1001292a <_printf_float+0x3fa>
10012924:	2201      	movs	r2, #1
10012926:	6062      	str	r2, [r4, #4]
10012928:	e669      	b.n	100125fe <_printf_float+0xce>
1001292a:	990c      	ldr	r1, [sp, #48]	; 0x30
1001292c:	a808      	add	r0, sp, #32
1001292e:	430b      	orrs	r3, r1
10012930:	2100      	movs	r1, #0
10012932:	9106      	str	r1, [sp, #24]
10012934:	a912      	add	r1, sp, #72	; 0x48
10012936:	9105      	str	r1, [sp, #20]
10012938:	a911      	add	r1, sp, #68	; 0x44
1001293a:	9103      	str	r1, [sp, #12]
1001293c:	2123      	movs	r1, #35	; 0x23
1001293e:	1809      	adds	r1, r1, r0
10012940:	6023      	str	r3, [r4, #0]
10012942:	9301      	str	r3, [sp, #4]
10012944:	9200      	str	r2, [sp, #0]
10012946:	002b      	movs	r3, r5
10012948:	9704      	str	r7, [sp, #16]
1001294a:	9102      	str	r1, [sp, #8]
1001294c:	0032      	movs	r2, r6
1001294e:	9809      	ldr	r0, [sp, #36]	; 0x24
10012950:	f7ff fd58 	bl	10012404 <__cvt>
10012954:	0005      	movs	r5, r0
10012956:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012958:	1cda      	adds	r2, r3, #3
1001295a:	db02      	blt.n	10012962 <_printf_float+0x432>
1001295c:	6862      	ldr	r2, [r4, #4]
1001295e:	4293      	cmp	r3, r2
10012960:	dd1c      	ble.n	1001299c <_printf_float+0x46c>
10012962:	3f02      	subs	r7, #2
10012964:	b2ff      	uxtb	r7, r7
10012966:	e667      	b.n	10012638 <_printf_float+0x108>
10012968:	3301      	adds	r3, #1
1001296a:	6123      	str	r3, [r4, #16]
1001296c:	e67a      	b.n	10012664 <_printf_float+0x134>
1001296e:	2f66      	cmp	r7, #102	; 0x66
10012970:	d115      	bne.n	1001299e <_printf_float+0x46e>
10012972:	6863      	ldr	r3, [r4, #4]
10012974:	2900      	cmp	r1, #0
10012976:	dd09      	ble.n	1001298c <_printf_float+0x45c>
10012978:	6121      	str	r1, [r4, #16]
1001297a:	2b00      	cmp	r3, #0
1001297c:	d102      	bne.n	10012984 <_printf_float+0x454>
1001297e:	6822      	ldr	r2, [r4, #0]
10012980:	07d2      	lsls	r2, r2, #31
10012982:	d51e      	bpl.n	100129c2 <_printf_float+0x492>
10012984:	3301      	adds	r3, #1
10012986:	1859      	adds	r1, r3, r1
10012988:	6121      	str	r1, [r4, #16]
1001298a:	e01a      	b.n	100129c2 <_printf_float+0x492>
1001298c:	2b00      	cmp	r3, #0
1001298e:	d103      	bne.n	10012998 <_printf_float+0x468>
10012990:	2201      	movs	r2, #1
10012992:	6821      	ldr	r1, [r4, #0]
10012994:	4211      	tst	r1, r2
10012996:	d013      	beq.n	100129c0 <_printf_float+0x490>
10012998:	1c9a      	adds	r2, r3, #2
1001299a:	e011      	b.n	100129c0 <_printf_float+0x490>
1001299c:	2767      	movs	r7, #103	; 0x67
1001299e:	9b11      	ldr	r3, [sp, #68]	; 0x44
100129a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100129a2:	4293      	cmp	r3, r2
100129a4:	db06      	blt.n	100129b4 <_printf_float+0x484>
100129a6:	6822      	ldr	r2, [r4, #0]
100129a8:	6123      	str	r3, [r4, #16]
100129aa:	07d2      	lsls	r2, r2, #31
100129ac:	d509      	bpl.n	100129c2 <_printf_float+0x492>
100129ae:	3301      	adds	r3, #1
100129b0:	6123      	str	r3, [r4, #16]
100129b2:	e006      	b.n	100129c2 <_printf_float+0x492>
100129b4:	2101      	movs	r1, #1
100129b6:	2b00      	cmp	r3, #0
100129b8:	dc01      	bgt.n	100129be <_printf_float+0x48e>
100129ba:	1849      	adds	r1, r1, r1
100129bc:	1ac9      	subs	r1, r1, r3
100129be:	188a      	adds	r2, r1, r2
100129c0:	6122      	str	r2, [r4, #16]
100129c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
100129c4:	2600      	movs	r6, #0
100129c6:	65a3      	str	r3, [r4, #88]	; 0x58
100129c8:	e64c      	b.n	10012664 <_printf_float+0x134>
100129ca:	b015      	add	sp, #84	; 0x54
100129cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129ce:	46c0      	nop			; (mov r8, r8)

100129d0 <_printf_common>:
100129d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100129d2:	0017      	movs	r7, r2
100129d4:	9301      	str	r3, [sp, #4]
100129d6:	688a      	ldr	r2, [r1, #8]
100129d8:	690b      	ldr	r3, [r1, #16]
100129da:	9000      	str	r0, [sp, #0]
100129dc:	000c      	movs	r4, r1
100129de:	4293      	cmp	r3, r2
100129e0:	da00      	bge.n	100129e4 <_printf_common+0x14>
100129e2:	0013      	movs	r3, r2
100129e4:	0022      	movs	r2, r4
100129e6:	603b      	str	r3, [r7, #0]
100129e8:	3243      	adds	r2, #67	; 0x43
100129ea:	7812      	ldrb	r2, [r2, #0]
100129ec:	2a00      	cmp	r2, #0
100129ee:	d001      	beq.n	100129f4 <_printf_common+0x24>
100129f0:	3301      	adds	r3, #1
100129f2:	603b      	str	r3, [r7, #0]
100129f4:	6823      	ldr	r3, [r4, #0]
100129f6:	069b      	lsls	r3, r3, #26
100129f8:	d502      	bpl.n	10012a00 <_printf_common+0x30>
100129fa:	683b      	ldr	r3, [r7, #0]
100129fc:	3302      	adds	r3, #2
100129fe:	603b      	str	r3, [r7, #0]
10012a00:	2506      	movs	r5, #6
10012a02:	6823      	ldr	r3, [r4, #0]
10012a04:	401d      	ands	r5, r3
10012a06:	d01e      	beq.n	10012a46 <_printf_common+0x76>
10012a08:	0023      	movs	r3, r4
10012a0a:	3343      	adds	r3, #67	; 0x43
10012a0c:	781b      	ldrb	r3, [r3, #0]
10012a0e:	1e5a      	subs	r2, r3, #1
10012a10:	4193      	sbcs	r3, r2
10012a12:	6822      	ldr	r2, [r4, #0]
10012a14:	0692      	lsls	r2, r2, #26
10012a16:	d51c      	bpl.n	10012a52 <_printf_common+0x82>
10012a18:	2030      	movs	r0, #48	; 0x30
10012a1a:	18e1      	adds	r1, r4, r3
10012a1c:	3143      	adds	r1, #67	; 0x43
10012a1e:	7008      	strb	r0, [r1, #0]
10012a20:	0021      	movs	r1, r4
10012a22:	1c5a      	adds	r2, r3, #1
10012a24:	3145      	adds	r1, #69	; 0x45
10012a26:	7809      	ldrb	r1, [r1, #0]
10012a28:	18a2      	adds	r2, r4, r2
10012a2a:	3243      	adds	r2, #67	; 0x43
10012a2c:	3302      	adds	r3, #2
10012a2e:	7011      	strb	r1, [r2, #0]
10012a30:	e00f      	b.n	10012a52 <_printf_common+0x82>
10012a32:	0022      	movs	r2, r4
10012a34:	2301      	movs	r3, #1
10012a36:	3219      	adds	r2, #25
10012a38:	9901      	ldr	r1, [sp, #4]
10012a3a:	9800      	ldr	r0, [sp, #0]
10012a3c:	9e08      	ldr	r6, [sp, #32]
10012a3e:	47b0      	blx	r6
10012a40:	1c43      	adds	r3, r0, #1
10012a42:	d00e      	beq.n	10012a62 <_printf_common+0x92>
10012a44:	3501      	adds	r5, #1
10012a46:	68e3      	ldr	r3, [r4, #12]
10012a48:	683a      	ldr	r2, [r7, #0]
10012a4a:	1a9b      	subs	r3, r3, r2
10012a4c:	429d      	cmp	r5, r3
10012a4e:	dbf0      	blt.n	10012a32 <_printf_common+0x62>
10012a50:	e7da      	b.n	10012a08 <_printf_common+0x38>
10012a52:	0022      	movs	r2, r4
10012a54:	9901      	ldr	r1, [sp, #4]
10012a56:	3243      	adds	r2, #67	; 0x43
10012a58:	9800      	ldr	r0, [sp, #0]
10012a5a:	9d08      	ldr	r5, [sp, #32]
10012a5c:	47a8      	blx	r5
10012a5e:	1c43      	adds	r3, r0, #1
10012a60:	d102      	bne.n	10012a68 <_printf_common+0x98>
10012a62:	2001      	movs	r0, #1
10012a64:	4240      	negs	r0, r0
10012a66:	e020      	b.n	10012aaa <_printf_common+0xda>
10012a68:	2306      	movs	r3, #6
10012a6a:	6820      	ldr	r0, [r4, #0]
10012a6c:	68e1      	ldr	r1, [r4, #12]
10012a6e:	683a      	ldr	r2, [r7, #0]
10012a70:	4003      	ands	r3, r0
10012a72:	2500      	movs	r5, #0
10012a74:	2b04      	cmp	r3, #4
10012a76:	d103      	bne.n	10012a80 <_printf_common+0xb0>
10012a78:	1a8d      	subs	r5, r1, r2
10012a7a:	43eb      	mvns	r3, r5
10012a7c:	17db      	asrs	r3, r3, #31
10012a7e:	401d      	ands	r5, r3
10012a80:	68a3      	ldr	r3, [r4, #8]
10012a82:	6922      	ldr	r2, [r4, #16]
10012a84:	4293      	cmp	r3, r2
10012a86:	dd01      	ble.n	10012a8c <_printf_common+0xbc>
10012a88:	1a9b      	subs	r3, r3, r2
10012a8a:	18ed      	adds	r5, r5, r3
10012a8c:	2700      	movs	r7, #0
10012a8e:	42bd      	cmp	r5, r7
10012a90:	d00a      	beq.n	10012aa8 <_printf_common+0xd8>
10012a92:	0022      	movs	r2, r4
10012a94:	2301      	movs	r3, #1
10012a96:	321a      	adds	r2, #26
10012a98:	9901      	ldr	r1, [sp, #4]
10012a9a:	9800      	ldr	r0, [sp, #0]
10012a9c:	9e08      	ldr	r6, [sp, #32]
10012a9e:	47b0      	blx	r6
10012aa0:	1c43      	adds	r3, r0, #1
10012aa2:	d0de      	beq.n	10012a62 <_printf_common+0x92>
10012aa4:	3701      	adds	r7, #1
10012aa6:	e7f2      	b.n	10012a8e <_printf_common+0xbe>
10012aa8:	2000      	movs	r0, #0
10012aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012aac <_printf_i>:
10012aac:	b5f0      	push	{r4, r5, r6, r7, lr}
10012aae:	b08b      	sub	sp, #44	; 0x2c
10012ab0:	9206      	str	r2, [sp, #24]
10012ab2:	000a      	movs	r2, r1
10012ab4:	3243      	adds	r2, #67	; 0x43
10012ab6:	9307      	str	r3, [sp, #28]
10012ab8:	9005      	str	r0, [sp, #20]
10012aba:	9204      	str	r2, [sp, #16]
10012abc:	7e0a      	ldrb	r2, [r1, #24]
10012abe:	000c      	movs	r4, r1
10012ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012ac2:	2a6e      	cmp	r2, #110	; 0x6e
10012ac4:	d100      	bne.n	10012ac8 <_printf_i+0x1c>
10012ac6:	e0ab      	b.n	10012c20 <_printf_i+0x174>
10012ac8:	d811      	bhi.n	10012aee <_printf_i+0x42>
10012aca:	2a63      	cmp	r2, #99	; 0x63
10012acc:	d022      	beq.n	10012b14 <_printf_i+0x68>
10012ace:	d809      	bhi.n	10012ae4 <_printf_i+0x38>
10012ad0:	2a00      	cmp	r2, #0
10012ad2:	d100      	bne.n	10012ad6 <_printf_i+0x2a>
10012ad4:	e0b5      	b.n	10012c42 <_printf_i+0x196>
10012ad6:	2a58      	cmp	r2, #88	; 0x58
10012ad8:	d000      	beq.n	10012adc <_printf_i+0x30>
10012ada:	e0c5      	b.n	10012c68 <_printf_i+0x1bc>
10012adc:	3145      	adds	r1, #69	; 0x45
10012ade:	700a      	strb	r2, [r1, #0]
10012ae0:	4a81      	ldr	r2, [pc, #516]	; (10012ce8 <_printf_i+0x23c>)
10012ae2:	e04f      	b.n	10012b84 <_printf_i+0xd8>
10012ae4:	2a64      	cmp	r2, #100	; 0x64
10012ae6:	d01d      	beq.n	10012b24 <_printf_i+0x78>
10012ae8:	2a69      	cmp	r2, #105	; 0x69
10012aea:	d01b      	beq.n	10012b24 <_printf_i+0x78>
10012aec:	e0bc      	b.n	10012c68 <_printf_i+0x1bc>
10012aee:	2a73      	cmp	r2, #115	; 0x73
10012af0:	d100      	bne.n	10012af4 <_printf_i+0x48>
10012af2:	e0aa      	b.n	10012c4a <_printf_i+0x19e>
10012af4:	d809      	bhi.n	10012b0a <_printf_i+0x5e>
10012af6:	2a6f      	cmp	r2, #111	; 0x6f
10012af8:	d029      	beq.n	10012b4e <_printf_i+0xa2>
10012afa:	2a70      	cmp	r2, #112	; 0x70
10012afc:	d000      	beq.n	10012b00 <_printf_i+0x54>
10012afe:	e0b3      	b.n	10012c68 <_printf_i+0x1bc>
10012b00:	2220      	movs	r2, #32
10012b02:	6809      	ldr	r1, [r1, #0]
10012b04:	430a      	orrs	r2, r1
10012b06:	6022      	str	r2, [r4, #0]
10012b08:	e037      	b.n	10012b7a <_printf_i+0xce>
10012b0a:	2a75      	cmp	r2, #117	; 0x75
10012b0c:	d01f      	beq.n	10012b4e <_printf_i+0xa2>
10012b0e:	2a78      	cmp	r2, #120	; 0x78
10012b10:	d033      	beq.n	10012b7a <_printf_i+0xce>
10012b12:	e0a9      	b.n	10012c68 <_printf_i+0x1bc>
10012b14:	000e      	movs	r6, r1
10012b16:	681a      	ldr	r2, [r3, #0]
10012b18:	3642      	adds	r6, #66	; 0x42
10012b1a:	1d11      	adds	r1, r2, #4
10012b1c:	6019      	str	r1, [r3, #0]
10012b1e:	6813      	ldr	r3, [r2, #0]
10012b20:	7033      	strb	r3, [r6, #0]
10012b22:	e0a4      	b.n	10012c6e <_printf_i+0x1c2>
10012b24:	6821      	ldr	r1, [r4, #0]
10012b26:	681a      	ldr	r2, [r3, #0]
10012b28:	0608      	lsls	r0, r1, #24
10012b2a:	d406      	bmi.n	10012b3a <_printf_i+0x8e>
10012b2c:	0649      	lsls	r1, r1, #25
10012b2e:	d504      	bpl.n	10012b3a <_printf_i+0x8e>
10012b30:	1d11      	adds	r1, r2, #4
10012b32:	6019      	str	r1, [r3, #0]
10012b34:	2300      	movs	r3, #0
10012b36:	5ed5      	ldrsh	r5, [r2, r3]
10012b38:	e002      	b.n	10012b40 <_printf_i+0x94>
10012b3a:	1d11      	adds	r1, r2, #4
10012b3c:	6019      	str	r1, [r3, #0]
10012b3e:	6815      	ldr	r5, [r2, #0]
10012b40:	2d00      	cmp	r5, #0
10012b42:	da3b      	bge.n	10012bbc <_printf_i+0x110>
10012b44:	232d      	movs	r3, #45	; 0x2d
10012b46:	9a04      	ldr	r2, [sp, #16]
10012b48:	426d      	negs	r5, r5
10012b4a:	7013      	strb	r3, [r2, #0]
10012b4c:	e036      	b.n	10012bbc <_printf_i+0x110>
10012b4e:	6821      	ldr	r1, [r4, #0]
10012b50:	681a      	ldr	r2, [r3, #0]
10012b52:	0608      	lsls	r0, r1, #24
10012b54:	d406      	bmi.n	10012b64 <_printf_i+0xb8>
10012b56:	0649      	lsls	r1, r1, #25
10012b58:	d504      	bpl.n	10012b64 <_printf_i+0xb8>
10012b5a:	6815      	ldr	r5, [r2, #0]
10012b5c:	1d11      	adds	r1, r2, #4
10012b5e:	6019      	str	r1, [r3, #0]
10012b60:	b2ad      	uxth	r5, r5
10012b62:	e002      	b.n	10012b6a <_printf_i+0xbe>
10012b64:	1d11      	adds	r1, r2, #4
10012b66:	6019      	str	r1, [r3, #0]
10012b68:	6815      	ldr	r5, [r2, #0]
10012b6a:	4b5f      	ldr	r3, [pc, #380]	; (10012ce8 <_printf_i+0x23c>)
10012b6c:	7e22      	ldrb	r2, [r4, #24]
10012b6e:	9303      	str	r3, [sp, #12]
10012b70:	2708      	movs	r7, #8
10012b72:	2a6f      	cmp	r2, #111	; 0x6f
10012b74:	d01d      	beq.n	10012bb2 <_printf_i+0x106>
10012b76:	270a      	movs	r7, #10
10012b78:	e01b      	b.n	10012bb2 <_printf_i+0x106>
10012b7a:	0022      	movs	r2, r4
10012b7c:	2178      	movs	r1, #120	; 0x78
10012b7e:	3245      	adds	r2, #69	; 0x45
10012b80:	7011      	strb	r1, [r2, #0]
10012b82:	4a5a      	ldr	r2, [pc, #360]	; (10012cec <_printf_i+0x240>)
10012b84:	6819      	ldr	r1, [r3, #0]
10012b86:	9203      	str	r2, [sp, #12]
10012b88:	1d08      	adds	r0, r1, #4
10012b8a:	6822      	ldr	r2, [r4, #0]
10012b8c:	6018      	str	r0, [r3, #0]
10012b8e:	680d      	ldr	r5, [r1, #0]
10012b90:	0610      	lsls	r0, r2, #24
10012b92:	d402      	bmi.n	10012b9a <_printf_i+0xee>
10012b94:	0650      	lsls	r0, r2, #25
10012b96:	d500      	bpl.n	10012b9a <_printf_i+0xee>
10012b98:	b2ad      	uxth	r5, r5
10012b9a:	07d3      	lsls	r3, r2, #31
10012b9c:	d502      	bpl.n	10012ba4 <_printf_i+0xf8>
10012b9e:	2320      	movs	r3, #32
10012ba0:	431a      	orrs	r2, r3
10012ba2:	6022      	str	r2, [r4, #0]
10012ba4:	2710      	movs	r7, #16
10012ba6:	2d00      	cmp	r5, #0
10012ba8:	d103      	bne.n	10012bb2 <_printf_i+0x106>
10012baa:	2320      	movs	r3, #32
10012bac:	6822      	ldr	r2, [r4, #0]
10012bae:	439a      	bics	r2, r3
10012bb0:	6022      	str	r2, [r4, #0]
10012bb2:	0023      	movs	r3, r4
10012bb4:	2200      	movs	r2, #0
10012bb6:	3343      	adds	r3, #67	; 0x43
10012bb8:	701a      	strb	r2, [r3, #0]
10012bba:	e002      	b.n	10012bc2 <_printf_i+0x116>
10012bbc:	270a      	movs	r7, #10
10012bbe:	4b4a      	ldr	r3, [pc, #296]	; (10012ce8 <_printf_i+0x23c>)
10012bc0:	9303      	str	r3, [sp, #12]
10012bc2:	6863      	ldr	r3, [r4, #4]
10012bc4:	60a3      	str	r3, [r4, #8]
10012bc6:	2b00      	cmp	r3, #0
10012bc8:	db09      	blt.n	10012bde <_printf_i+0x132>
10012bca:	2204      	movs	r2, #4
10012bcc:	6821      	ldr	r1, [r4, #0]
10012bce:	4391      	bics	r1, r2
10012bd0:	6021      	str	r1, [r4, #0]
10012bd2:	2d00      	cmp	r5, #0
10012bd4:	d105      	bne.n	10012be2 <_printf_i+0x136>
10012bd6:	9e04      	ldr	r6, [sp, #16]
10012bd8:	2b00      	cmp	r3, #0
10012bda:	d011      	beq.n	10012c00 <_printf_i+0x154>
10012bdc:	e07b      	b.n	10012cd6 <_printf_i+0x22a>
10012bde:	2d00      	cmp	r5, #0
10012be0:	d079      	beq.n	10012cd6 <_printf_i+0x22a>
10012be2:	9e04      	ldr	r6, [sp, #16]
10012be4:	0028      	movs	r0, r5
10012be6:	0039      	movs	r1, r7
10012be8:	f002 f90c 	bl	10014e04 <__aeabi_uidivmod>
10012bec:	9b03      	ldr	r3, [sp, #12]
10012bee:	3e01      	subs	r6, #1
10012bf0:	5c5b      	ldrb	r3, [r3, r1]
10012bf2:	0028      	movs	r0, r5
10012bf4:	7033      	strb	r3, [r6, #0]
10012bf6:	0039      	movs	r1, r7
10012bf8:	f002 f87e 	bl	10014cf8 <__aeabi_uidiv>
10012bfc:	1e05      	subs	r5, r0, #0
10012bfe:	d1f1      	bne.n	10012be4 <_printf_i+0x138>
10012c00:	2f08      	cmp	r7, #8
10012c02:	d109      	bne.n	10012c18 <_printf_i+0x16c>
10012c04:	6823      	ldr	r3, [r4, #0]
10012c06:	07db      	lsls	r3, r3, #31
10012c08:	d506      	bpl.n	10012c18 <_printf_i+0x16c>
10012c0a:	6863      	ldr	r3, [r4, #4]
10012c0c:	6922      	ldr	r2, [r4, #16]
10012c0e:	4293      	cmp	r3, r2
10012c10:	dc02      	bgt.n	10012c18 <_printf_i+0x16c>
10012c12:	2330      	movs	r3, #48	; 0x30
10012c14:	3e01      	subs	r6, #1
10012c16:	7033      	strb	r3, [r6, #0]
10012c18:	9b04      	ldr	r3, [sp, #16]
10012c1a:	1b9b      	subs	r3, r3, r6
10012c1c:	6123      	str	r3, [r4, #16]
10012c1e:	e02b      	b.n	10012c78 <_printf_i+0x1cc>
10012c20:	6809      	ldr	r1, [r1, #0]
10012c22:	681a      	ldr	r2, [r3, #0]
10012c24:	0608      	lsls	r0, r1, #24
10012c26:	d407      	bmi.n	10012c38 <_printf_i+0x18c>
10012c28:	0649      	lsls	r1, r1, #25
10012c2a:	d505      	bpl.n	10012c38 <_printf_i+0x18c>
10012c2c:	1d11      	adds	r1, r2, #4
10012c2e:	6019      	str	r1, [r3, #0]
10012c30:	6813      	ldr	r3, [r2, #0]
10012c32:	8aa2      	ldrh	r2, [r4, #20]
10012c34:	801a      	strh	r2, [r3, #0]
10012c36:	e004      	b.n	10012c42 <_printf_i+0x196>
10012c38:	1d11      	adds	r1, r2, #4
10012c3a:	6019      	str	r1, [r3, #0]
10012c3c:	6813      	ldr	r3, [r2, #0]
10012c3e:	6962      	ldr	r2, [r4, #20]
10012c40:	601a      	str	r2, [r3, #0]
10012c42:	2300      	movs	r3, #0
10012c44:	9e04      	ldr	r6, [sp, #16]
10012c46:	6123      	str	r3, [r4, #16]
10012c48:	e016      	b.n	10012c78 <_printf_i+0x1cc>
10012c4a:	681a      	ldr	r2, [r3, #0]
10012c4c:	1d11      	adds	r1, r2, #4
10012c4e:	6019      	str	r1, [r3, #0]
10012c50:	6816      	ldr	r6, [r2, #0]
10012c52:	2100      	movs	r1, #0
10012c54:	6862      	ldr	r2, [r4, #4]
10012c56:	0030      	movs	r0, r6
10012c58:	f001 fafe 	bl	10014258 <memchr>
10012c5c:	2800      	cmp	r0, #0
10012c5e:	d001      	beq.n	10012c64 <_printf_i+0x1b8>
10012c60:	1b80      	subs	r0, r0, r6
10012c62:	6060      	str	r0, [r4, #4]
10012c64:	6863      	ldr	r3, [r4, #4]
10012c66:	e003      	b.n	10012c70 <_printf_i+0x1c4>
10012c68:	0026      	movs	r6, r4
10012c6a:	3642      	adds	r6, #66	; 0x42
10012c6c:	7032      	strb	r2, [r6, #0]
10012c6e:	2301      	movs	r3, #1
10012c70:	6123      	str	r3, [r4, #16]
10012c72:	2300      	movs	r3, #0
10012c74:	9a04      	ldr	r2, [sp, #16]
10012c76:	7013      	strb	r3, [r2, #0]
10012c78:	9b07      	ldr	r3, [sp, #28]
10012c7a:	aa09      	add	r2, sp, #36	; 0x24
10012c7c:	9300      	str	r3, [sp, #0]
10012c7e:	0021      	movs	r1, r4
10012c80:	9b06      	ldr	r3, [sp, #24]
10012c82:	9805      	ldr	r0, [sp, #20]
10012c84:	f7ff fea4 	bl	100129d0 <_printf_common>
10012c88:	1c43      	adds	r3, r0, #1
10012c8a:	d102      	bne.n	10012c92 <_printf_i+0x1e6>
10012c8c:	2001      	movs	r0, #1
10012c8e:	4240      	negs	r0, r0
10012c90:	e027      	b.n	10012ce2 <_printf_i+0x236>
10012c92:	6923      	ldr	r3, [r4, #16]
10012c94:	0032      	movs	r2, r6
10012c96:	9906      	ldr	r1, [sp, #24]
10012c98:	9805      	ldr	r0, [sp, #20]
10012c9a:	9d07      	ldr	r5, [sp, #28]
10012c9c:	47a8      	blx	r5
10012c9e:	1c43      	adds	r3, r0, #1
10012ca0:	d0f4      	beq.n	10012c8c <_printf_i+0x1e0>
10012ca2:	6823      	ldr	r3, [r4, #0]
10012ca4:	2500      	movs	r5, #0
10012ca6:	079b      	lsls	r3, r3, #30
10012ca8:	d40f      	bmi.n	10012cca <_printf_i+0x21e>
10012caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012cac:	68e0      	ldr	r0, [r4, #12]
10012cae:	4298      	cmp	r0, r3
10012cb0:	da17      	bge.n	10012ce2 <_printf_i+0x236>
10012cb2:	0018      	movs	r0, r3
10012cb4:	e015      	b.n	10012ce2 <_printf_i+0x236>
10012cb6:	0022      	movs	r2, r4
10012cb8:	2301      	movs	r3, #1
10012cba:	3219      	adds	r2, #25
10012cbc:	9906      	ldr	r1, [sp, #24]
10012cbe:	9805      	ldr	r0, [sp, #20]
10012cc0:	9e07      	ldr	r6, [sp, #28]
10012cc2:	47b0      	blx	r6
10012cc4:	1c43      	adds	r3, r0, #1
10012cc6:	d0e1      	beq.n	10012c8c <_printf_i+0x1e0>
10012cc8:	3501      	adds	r5, #1
10012cca:	68e3      	ldr	r3, [r4, #12]
10012ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012cce:	1a9b      	subs	r3, r3, r2
10012cd0:	429d      	cmp	r5, r3
10012cd2:	dbf0      	blt.n	10012cb6 <_printf_i+0x20a>
10012cd4:	e7e9      	b.n	10012caa <_printf_i+0x1fe>
10012cd6:	0026      	movs	r6, r4
10012cd8:	9b03      	ldr	r3, [sp, #12]
10012cda:	3642      	adds	r6, #66	; 0x42
10012cdc:	781b      	ldrb	r3, [r3, #0]
10012cde:	7033      	strb	r3, [r6, #0]
10012ce0:	e78e      	b.n	10012c00 <_printf_i+0x154>
10012ce2:	b00b      	add	sp, #44	; 0x2c
10012ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012ce6:	46c0      	nop			; (mov r8, r8)
10012ce8:	10018c9a 	.word	0x10018c9a
10012cec:	10018cab 	.word	0x10018cab

10012cf0 <iprintf>:
10012cf0:	b40f      	push	{r0, r1, r2, r3}
10012cf2:	4b0b      	ldr	r3, [pc, #44]	; (10012d20 <iprintf+0x30>)
10012cf4:	b513      	push	{r0, r1, r4, lr}
10012cf6:	681c      	ldr	r4, [r3, #0]
10012cf8:	2c00      	cmp	r4, #0
10012cfa:	d005      	beq.n	10012d08 <iprintf+0x18>
10012cfc:	69a3      	ldr	r3, [r4, #24]
10012cfe:	2b00      	cmp	r3, #0
10012d00:	d102      	bne.n	10012d08 <iprintf+0x18>
10012d02:	0020      	movs	r0, r4
10012d04:	f001 f9ac 	bl	10014060 <__sinit>
10012d08:	ab05      	add	r3, sp, #20
10012d0a:	9a04      	ldr	r2, [sp, #16]
10012d0c:	68a1      	ldr	r1, [r4, #8]
10012d0e:	0020      	movs	r0, r4
10012d10:	9301      	str	r3, [sp, #4]
10012d12:	f001 fdcd 	bl	100148b0 <_vfiprintf_r>
10012d16:	bc16      	pop	{r1, r2, r4}
10012d18:	bc08      	pop	{r3}
10012d1a:	b004      	add	sp, #16
10012d1c:	4718      	bx	r3
10012d1e:	46c0      	nop			; (mov r8, r8)
10012d20:	10019014 	.word	0x10019014

10012d24 <putchar>:
10012d24:	4b08      	ldr	r3, [pc, #32]	; (10012d48 <putchar+0x24>)
10012d26:	b570      	push	{r4, r5, r6, lr}
10012d28:	681c      	ldr	r4, [r3, #0]
10012d2a:	0005      	movs	r5, r0
10012d2c:	2c00      	cmp	r4, #0
10012d2e:	d005      	beq.n	10012d3c <putchar+0x18>
10012d30:	69a3      	ldr	r3, [r4, #24]
10012d32:	2b00      	cmp	r3, #0
10012d34:	d102      	bne.n	10012d3c <putchar+0x18>
10012d36:	0020      	movs	r0, r4
10012d38:	f001 f992 	bl	10014060 <__sinit>
10012d3c:	0029      	movs	r1, r5
10012d3e:	68a2      	ldr	r2, [r4, #8]
10012d40:	0020      	movs	r0, r4
10012d42:	f001 fed1 	bl	10014ae8 <_putc_r>
10012d46:	bd70      	pop	{r4, r5, r6, pc}
10012d48:	10019014 	.word	0x10019014

10012d4c <_puts_r>:
10012d4c:	b570      	push	{r4, r5, r6, lr}
10012d4e:	0005      	movs	r5, r0
10012d50:	000e      	movs	r6, r1
10012d52:	2800      	cmp	r0, #0
10012d54:	d004      	beq.n	10012d60 <_puts_r+0x14>
10012d56:	6983      	ldr	r3, [r0, #24]
10012d58:	2b00      	cmp	r3, #0
10012d5a:	d101      	bne.n	10012d60 <_puts_r+0x14>
10012d5c:	f001 f980 	bl	10014060 <__sinit>
10012d60:	69ab      	ldr	r3, [r5, #24]
10012d62:	68ac      	ldr	r4, [r5, #8]
10012d64:	2b00      	cmp	r3, #0
10012d66:	d102      	bne.n	10012d6e <_puts_r+0x22>
10012d68:	0028      	movs	r0, r5
10012d6a:	f001 f979 	bl	10014060 <__sinit>
10012d6e:	4b25      	ldr	r3, [pc, #148]	; (10012e04 <_puts_r+0xb8>)
10012d70:	429c      	cmp	r4, r3
10012d72:	d101      	bne.n	10012d78 <_puts_r+0x2c>
10012d74:	686c      	ldr	r4, [r5, #4]
10012d76:	e008      	b.n	10012d8a <_puts_r+0x3e>
10012d78:	4b23      	ldr	r3, [pc, #140]	; (10012e08 <_puts_r+0xbc>)
10012d7a:	429c      	cmp	r4, r3
10012d7c:	d101      	bne.n	10012d82 <_puts_r+0x36>
10012d7e:	68ac      	ldr	r4, [r5, #8]
10012d80:	e003      	b.n	10012d8a <_puts_r+0x3e>
10012d82:	4b22      	ldr	r3, [pc, #136]	; (10012e0c <_puts_r+0xc0>)
10012d84:	429c      	cmp	r4, r3
10012d86:	d100      	bne.n	10012d8a <_puts_r+0x3e>
10012d88:	68ec      	ldr	r4, [r5, #12]
10012d8a:	89a3      	ldrh	r3, [r4, #12]
10012d8c:	071b      	lsls	r3, r3, #28
10012d8e:	d502      	bpl.n	10012d96 <_puts_r+0x4a>
10012d90:	6923      	ldr	r3, [r4, #16]
10012d92:	2b00      	cmp	r3, #0
10012d94:	d111      	bne.n	10012dba <_puts_r+0x6e>
10012d96:	0021      	movs	r1, r4
10012d98:	0028      	movs	r0, r5
10012d9a:	f000 f9ab 	bl	100130f4 <__swsetup_r>
10012d9e:	2800      	cmp	r0, #0
10012da0:	d00b      	beq.n	10012dba <_puts_r+0x6e>
10012da2:	2001      	movs	r0, #1
10012da4:	4240      	negs	r0, r0
10012da6:	e02b      	b.n	10012e00 <_puts_r+0xb4>
10012da8:	3b01      	subs	r3, #1
10012daa:	3601      	adds	r6, #1
10012dac:	60a3      	str	r3, [r4, #8]
10012dae:	2b00      	cmp	r3, #0
10012db0:	db08      	blt.n	10012dc4 <_puts_r+0x78>
10012db2:	6823      	ldr	r3, [r4, #0]
10012db4:	1c5a      	adds	r2, r3, #1
10012db6:	6022      	str	r2, [r4, #0]
10012db8:	7019      	strb	r1, [r3, #0]
10012dba:	7831      	ldrb	r1, [r6, #0]
10012dbc:	68a3      	ldr	r3, [r4, #8]
10012dbe:	2900      	cmp	r1, #0
10012dc0:	d1f2      	bne.n	10012da8 <_puts_r+0x5c>
10012dc2:	e00b      	b.n	10012ddc <_puts_r+0x90>
10012dc4:	69a2      	ldr	r2, [r4, #24]
10012dc6:	4293      	cmp	r3, r2
10012dc8:	db01      	blt.n	10012dce <_puts_r+0x82>
10012dca:	290a      	cmp	r1, #10
10012dcc:	d1f1      	bne.n	10012db2 <_puts_r+0x66>
10012dce:	0022      	movs	r2, r4
10012dd0:	0028      	movs	r0, r5
10012dd2:	f000 f937 	bl	10013044 <__swbuf_r>
10012dd6:	1c43      	adds	r3, r0, #1
10012dd8:	d1ef      	bne.n	10012dba <_puts_r+0x6e>
10012dda:	e7e2      	b.n	10012da2 <_puts_r+0x56>
10012ddc:	3b01      	subs	r3, #1
10012dde:	60a3      	str	r3, [r4, #8]
10012de0:	2b00      	cmp	r3, #0
10012de2:	da08      	bge.n	10012df6 <_puts_r+0xaa>
10012de4:	0022      	movs	r2, r4
10012de6:	310a      	adds	r1, #10
10012de8:	0028      	movs	r0, r5
10012dea:	f000 f92b 	bl	10013044 <__swbuf_r>
10012dee:	1c43      	adds	r3, r0, #1
10012df0:	d0d7      	beq.n	10012da2 <_puts_r+0x56>
10012df2:	200a      	movs	r0, #10
10012df4:	e004      	b.n	10012e00 <_puts_r+0xb4>
10012df6:	200a      	movs	r0, #10
10012df8:	6823      	ldr	r3, [r4, #0]
10012dfa:	1c5a      	adds	r2, r3, #1
10012dfc:	6022      	str	r2, [r4, #0]
10012dfe:	7018      	strb	r0, [r3, #0]
10012e00:	bd70      	pop	{r4, r5, r6, pc}
10012e02:	46c0      	nop			; (mov r8, r8)
10012e04:	10018ccc 	.word	0x10018ccc
10012e08:	10018cec 	.word	0x10018cec
10012e0c:	10018d0c 	.word	0x10018d0c

10012e10 <puts>:
10012e10:	b510      	push	{r4, lr}
10012e12:	4b03      	ldr	r3, [pc, #12]	; (10012e20 <puts+0x10>)
10012e14:	0001      	movs	r1, r0
10012e16:	6818      	ldr	r0, [r3, #0]
10012e18:	f7ff ff98 	bl	10012d4c <_puts_r>
10012e1c:	bd10      	pop	{r4, pc}
10012e1e:	46c0      	nop			; (mov r8, r8)
10012e20:	10019014 	.word	0x10019014

10012e24 <rand>:
10012e24:	4b15      	ldr	r3, [pc, #84]	; (10012e7c <rand+0x58>)
10012e26:	b510      	push	{r4, lr}
10012e28:	681c      	ldr	r4, [r3, #0]
10012e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10012e2c:	2b00      	cmp	r3, #0
10012e2e:	d115      	bne.n	10012e5c <rand+0x38>
10012e30:	2018      	movs	r0, #24
10012e32:	f7ff fa21 	bl	10012278 <malloc>
10012e36:	4b12      	ldr	r3, [pc, #72]	; (10012e80 <rand+0x5c>)
10012e38:	63a0      	str	r0, [r4, #56]	; 0x38
10012e3a:	8003      	strh	r3, [r0, #0]
10012e3c:	4b11      	ldr	r3, [pc, #68]	; (10012e84 <rand+0x60>)
10012e3e:	2201      	movs	r2, #1
10012e40:	8043      	strh	r3, [r0, #2]
10012e42:	4b11      	ldr	r3, [pc, #68]	; (10012e88 <rand+0x64>)
10012e44:	8083      	strh	r3, [r0, #4]
10012e46:	4b11      	ldr	r3, [pc, #68]	; (10012e8c <rand+0x68>)
10012e48:	80c3      	strh	r3, [r0, #6]
10012e4a:	4b11      	ldr	r3, [pc, #68]	; (10012e90 <rand+0x6c>)
10012e4c:	8103      	strh	r3, [r0, #8]
10012e4e:	2305      	movs	r3, #5
10012e50:	8143      	strh	r3, [r0, #10]
10012e52:	3306      	adds	r3, #6
10012e54:	8183      	strh	r3, [r0, #12]
10012e56:	2300      	movs	r3, #0
10012e58:	6102      	str	r2, [r0, #16]
10012e5a:	6143      	str	r3, [r0, #20]
10012e5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10012e5e:	4a0d      	ldr	r2, [pc, #52]	; (10012e94 <rand+0x70>)
10012e60:	6920      	ldr	r0, [r4, #16]
10012e62:	6961      	ldr	r1, [r4, #20]
10012e64:	4b0c      	ldr	r3, [pc, #48]	; (10012e98 <rand+0x74>)
10012e66:	f002 f8fb 	bl	10015060 <__aeabi_lmul>
10012e6a:	2201      	movs	r2, #1
10012e6c:	2300      	movs	r3, #0
10012e6e:	1880      	adds	r0, r0, r2
10012e70:	4159      	adcs	r1, r3
10012e72:	6120      	str	r0, [r4, #16]
10012e74:	6161      	str	r1, [r4, #20]
10012e76:	0048      	lsls	r0, r1, #1
10012e78:	0840      	lsrs	r0, r0, #1
10012e7a:	bd10      	pop	{r4, pc}
10012e7c:	10019014 	.word	0x10019014
10012e80:	0000330e 	.word	0x0000330e
10012e84:	ffffabcd 	.word	0xffffabcd
10012e88:	00001234 	.word	0x00001234
10012e8c:	ffffe66d 	.word	0xffffe66d
10012e90:	ffffdeec 	.word	0xffffdeec
10012e94:	4c957f2d 	.word	0x4c957f2d
10012e98:	5851f42d 	.word	0x5851f42d

10012e9c <_sbrk_r>:
10012e9c:	2300      	movs	r3, #0
10012e9e:	b570      	push	{r4, r5, r6, lr}
10012ea0:	4c06      	ldr	r4, [pc, #24]	; (10012ebc <_sbrk_r+0x20>)
10012ea2:	0005      	movs	r5, r0
10012ea4:	0008      	movs	r0, r1
10012ea6:	6023      	str	r3, [r4, #0]
10012ea8:	f7f5 faa8 	bl	100083fc <_sbrk>
10012eac:	1c43      	adds	r3, r0, #1
10012eae:	d103      	bne.n	10012eb8 <_sbrk_r+0x1c>
10012eb0:	6823      	ldr	r3, [r4, #0]
10012eb2:	2b00      	cmp	r3, #0
10012eb4:	d000      	beq.n	10012eb8 <_sbrk_r+0x1c>
10012eb6:	602b      	str	r3, [r5, #0]
10012eb8:	bd70      	pop	{r4, r5, r6, pc}
10012eba:	46c0      	nop			; (mov r8, r8)
10012ebc:	1001bf70 	.word	0x1001bf70

10012ec0 <setbuf>:
10012ec0:	424a      	negs	r2, r1
10012ec2:	414a      	adcs	r2, r1
10012ec4:	2380      	movs	r3, #128	; 0x80
10012ec6:	b510      	push	{r4, lr}
10012ec8:	0052      	lsls	r2, r2, #1
10012eca:	00db      	lsls	r3, r3, #3
10012ecc:	f000 f802 	bl	10012ed4 <setvbuf>
10012ed0:	bd10      	pop	{r4, pc}
	...

10012ed4 <setvbuf>:
10012ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ed6:	001d      	movs	r5, r3
10012ed8:	4b51      	ldr	r3, [pc, #324]	; (10013020 <setvbuf+0x14c>)
10012eda:	b085      	sub	sp, #20
10012edc:	681e      	ldr	r6, [r3, #0]
10012ede:	0004      	movs	r4, r0
10012ee0:	000f      	movs	r7, r1
10012ee2:	9200      	str	r2, [sp, #0]
10012ee4:	2e00      	cmp	r6, #0
10012ee6:	d005      	beq.n	10012ef4 <setvbuf+0x20>
10012ee8:	69b3      	ldr	r3, [r6, #24]
10012eea:	2b00      	cmp	r3, #0
10012eec:	d102      	bne.n	10012ef4 <setvbuf+0x20>
10012eee:	0030      	movs	r0, r6
10012ef0:	f001 f8b6 	bl	10014060 <__sinit>
10012ef4:	4b4b      	ldr	r3, [pc, #300]	; (10013024 <setvbuf+0x150>)
10012ef6:	429c      	cmp	r4, r3
10012ef8:	d101      	bne.n	10012efe <setvbuf+0x2a>
10012efa:	6874      	ldr	r4, [r6, #4]
10012efc:	e008      	b.n	10012f10 <setvbuf+0x3c>
10012efe:	4b4a      	ldr	r3, [pc, #296]	; (10013028 <setvbuf+0x154>)
10012f00:	429c      	cmp	r4, r3
10012f02:	d101      	bne.n	10012f08 <setvbuf+0x34>
10012f04:	68b4      	ldr	r4, [r6, #8]
10012f06:	e003      	b.n	10012f10 <setvbuf+0x3c>
10012f08:	4b48      	ldr	r3, [pc, #288]	; (1001302c <setvbuf+0x158>)
10012f0a:	429c      	cmp	r4, r3
10012f0c:	d100      	bne.n	10012f10 <setvbuf+0x3c>
10012f0e:	68f4      	ldr	r4, [r6, #12]
10012f10:	9b00      	ldr	r3, [sp, #0]
10012f12:	2b02      	cmp	r3, #2
10012f14:	d005      	beq.n	10012f22 <setvbuf+0x4e>
10012f16:	2b01      	cmp	r3, #1
10012f18:	d900      	bls.n	10012f1c <setvbuf+0x48>
10012f1a:	e07c      	b.n	10013016 <setvbuf+0x142>
10012f1c:	2d00      	cmp	r5, #0
10012f1e:	da00      	bge.n	10012f22 <setvbuf+0x4e>
10012f20:	e079      	b.n	10013016 <setvbuf+0x142>
10012f22:	0021      	movs	r1, r4
10012f24:	0030      	movs	r0, r6
10012f26:	f001 f82d 	bl	10013f84 <_fflush_r>
10012f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012f2c:	2900      	cmp	r1, #0
10012f2e:	d008      	beq.n	10012f42 <setvbuf+0x6e>
10012f30:	0023      	movs	r3, r4
10012f32:	3344      	adds	r3, #68	; 0x44
10012f34:	4299      	cmp	r1, r3
10012f36:	d002      	beq.n	10012f3e <setvbuf+0x6a>
10012f38:	0030      	movs	r0, r6
10012f3a:	f7ff f9c7 	bl	100122cc <_free_r>
10012f3e:	2300      	movs	r3, #0
10012f40:	6363      	str	r3, [r4, #52]	; 0x34
10012f42:	2300      	movs	r3, #0
10012f44:	61a3      	str	r3, [r4, #24]
10012f46:	6063      	str	r3, [r4, #4]
10012f48:	89a3      	ldrh	r3, [r4, #12]
10012f4a:	061b      	lsls	r3, r3, #24
10012f4c:	d503      	bpl.n	10012f56 <setvbuf+0x82>
10012f4e:	6921      	ldr	r1, [r4, #16]
10012f50:	0030      	movs	r0, r6
10012f52:	f7ff f9bb 	bl	100122cc <_free_r>
10012f56:	89a2      	ldrh	r2, [r4, #12]
10012f58:	4b35      	ldr	r3, [pc, #212]	; (10013030 <setvbuf+0x15c>)
10012f5a:	4013      	ands	r3, r2
10012f5c:	81a3      	strh	r3, [r4, #12]
10012f5e:	9b00      	ldr	r3, [sp, #0]
10012f60:	2b02      	cmp	r3, #2
10012f62:	d021      	beq.n	10012fa8 <setvbuf+0xd4>
10012f64:	ab03      	add	r3, sp, #12
10012f66:	aa02      	add	r2, sp, #8
10012f68:	0021      	movs	r1, r4
10012f6a:	0030      	movs	r0, r6
10012f6c:	f001 f910 	bl	10014190 <__swhatbuf_r>
10012f70:	89a3      	ldrh	r3, [r4, #12]
10012f72:	4318      	orrs	r0, r3
10012f74:	81a0      	strh	r0, [r4, #12]
10012f76:	2d00      	cmp	r5, #0
10012f78:	d101      	bne.n	10012f7e <setvbuf+0xaa>
10012f7a:	9d02      	ldr	r5, [sp, #8]
10012f7c:	e001      	b.n	10012f82 <setvbuf+0xae>
10012f7e:	2f00      	cmp	r7, #0
10012f80:	d125      	bne.n	10012fce <setvbuf+0xfa>
10012f82:	0028      	movs	r0, r5
10012f84:	f7ff f978 	bl	10012278 <malloc>
10012f88:	9501      	str	r5, [sp, #4]
10012f8a:	1e07      	subs	r7, r0, #0
10012f8c:	d11a      	bne.n	10012fc4 <setvbuf+0xf0>
10012f8e:	9b02      	ldr	r3, [sp, #8]
10012f90:	9301      	str	r3, [sp, #4]
10012f92:	42ab      	cmp	r3, r5
10012f94:	d102      	bne.n	10012f9c <setvbuf+0xc8>
10012f96:	2001      	movs	r0, #1
10012f98:	4240      	negs	r0, r0
10012f9a:	e006      	b.n	10012faa <setvbuf+0xd6>
10012f9c:	9801      	ldr	r0, [sp, #4]
10012f9e:	f7ff f96b 	bl	10012278 <malloc>
10012fa2:	1e07      	subs	r7, r0, #0
10012fa4:	d10e      	bne.n	10012fc4 <setvbuf+0xf0>
10012fa6:	e7f6      	b.n	10012f96 <setvbuf+0xc2>
10012fa8:	2000      	movs	r0, #0
10012faa:	2202      	movs	r2, #2
10012fac:	89a3      	ldrh	r3, [r4, #12]
10012fae:	4313      	orrs	r3, r2
10012fb0:	81a3      	strh	r3, [r4, #12]
10012fb2:	2300      	movs	r3, #0
10012fb4:	60a3      	str	r3, [r4, #8]
10012fb6:	0023      	movs	r3, r4
10012fb8:	3347      	adds	r3, #71	; 0x47
10012fba:	6023      	str	r3, [r4, #0]
10012fbc:	6123      	str	r3, [r4, #16]
10012fbe:	2301      	movs	r3, #1
10012fc0:	6163      	str	r3, [r4, #20]
10012fc2:	e02a      	b.n	1001301a <setvbuf+0x146>
10012fc4:	2280      	movs	r2, #128	; 0x80
10012fc6:	89a3      	ldrh	r3, [r4, #12]
10012fc8:	9d01      	ldr	r5, [sp, #4]
10012fca:	4313      	orrs	r3, r2
10012fcc:	81a3      	strh	r3, [r4, #12]
10012fce:	69b3      	ldr	r3, [r6, #24]
10012fd0:	2b00      	cmp	r3, #0
10012fd2:	d102      	bne.n	10012fda <setvbuf+0x106>
10012fd4:	0030      	movs	r0, r6
10012fd6:	f001 f843 	bl	10014060 <__sinit>
10012fda:	9b00      	ldr	r3, [sp, #0]
10012fdc:	2b01      	cmp	r3, #1
10012fde:	d103      	bne.n	10012fe8 <setvbuf+0x114>
10012fe0:	89a3      	ldrh	r3, [r4, #12]
10012fe2:	9a00      	ldr	r2, [sp, #0]
10012fe4:	431a      	orrs	r2, r3
10012fe6:	81a2      	strh	r2, [r4, #12]
10012fe8:	2308      	movs	r3, #8
10012fea:	89a2      	ldrh	r2, [r4, #12]
10012fec:	6027      	str	r7, [r4, #0]
10012fee:	4013      	ands	r3, r2
10012ff0:	6127      	str	r7, [r4, #16]
10012ff2:	6165      	str	r5, [r4, #20]
10012ff4:	1e18      	subs	r0, r3, #0
10012ff6:	d00c      	beq.n	10013012 <setvbuf+0x13e>
10012ff8:	2301      	movs	r3, #1
10012ffa:	401a      	ands	r2, r3
10012ffc:	2300      	movs	r3, #0
10012ffe:	1e10      	subs	r0, r2, #0
10013000:	4298      	cmp	r0, r3
10013002:	d004      	beq.n	1001300e <setvbuf+0x13a>
10013004:	426d      	negs	r5, r5
10013006:	60a3      	str	r3, [r4, #8]
10013008:	61a5      	str	r5, [r4, #24]
1001300a:	0018      	movs	r0, r3
1001300c:	e005      	b.n	1001301a <setvbuf+0x146>
1001300e:	60a5      	str	r5, [r4, #8]
10013010:	e003      	b.n	1001301a <setvbuf+0x146>
10013012:	60a3      	str	r3, [r4, #8]
10013014:	e001      	b.n	1001301a <setvbuf+0x146>
10013016:	2001      	movs	r0, #1
10013018:	4240      	negs	r0, r0
1001301a:	b005      	add	sp, #20
1001301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001301e:	46c0      	nop			; (mov r8, r8)
10013020:	10019014 	.word	0x10019014
10013024:	10018ccc 	.word	0x10018ccc
10013028:	10018cec 	.word	0x10018cec
1001302c:	10018d0c 	.word	0x10018d0c
10013030:	fffff35c 	.word	0xfffff35c

10013034 <strlen>:
10013034:	2300      	movs	r3, #0
10013036:	5cc2      	ldrb	r2, [r0, r3]
10013038:	3301      	adds	r3, #1
1001303a:	2a00      	cmp	r2, #0
1001303c:	d1fb      	bne.n	10013036 <strlen+0x2>
1001303e:	1e58      	subs	r0, r3, #1
10013040:	4770      	bx	lr
	...

10013044 <__swbuf_r>:
10013044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013046:	0005      	movs	r5, r0
10013048:	000f      	movs	r7, r1
1001304a:	0014      	movs	r4, r2
1001304c:	2800      	cmp	r0, #0
1001304e:	d004      	beq.n	1001305a <__swbuf_r+0x16>
10013050:	6983      	ldr	r3, [r0, #24]
10013052:	2b00      	cmp	r3, #0
10013054:	d101      	bne.n	1001305a <__swbuf_r+0x16>
10013056:	f001 f803 	bl	10014060 <__sinit>
1001305a:	4b23      	ldr	r3, [pc, #140]	; (100130e8 <__swbuf_r+0xa4>)
1001305c:	429c      	cmp	r4, r3
1001305e:	d101      	bne.n	10013064 <__swbuf_r+0x20>
10013060:	686c      	ldr	r4, [r5, #4]
10013062:	e008      	b.n	10013076 <__swbuf_r+0x32>
10013064:	4b21      	ldr	r3, [pc, #132]	; (100130ec <__swbuf_r+0xa8>)
10013066:	429c      	cmp	r4, r3
10013068:	d101      	bne.n	1001306e <__swbuf_r+0x2a>
1001306a:	68ac      	ldr	r4, [r5, #8]
1001306c:	e003      	b.n	10013076 <__swbuf_r+0x32>
1001306e:	4b20      	ldr	r3, [pc, #128]	; (100130f0 <__swbuf_r+0xac>)
10013070:	429c      	cmp	r4, r3
10013072:	d100      	bne.n	10013076 <__swbuf_r+0x32>
10013074:	68ec      	ldr	r4, [r5, #12]
10013076:	69a3      	ldr	r3, [r4, #24]
10013078:	60a3      	str	r3, [r4, #8]
1001307a:	89a3      	ldrh	r3, [r4, #12]
1001307c:	071b      	lsls	r3, r3, #28
1001307e:	d50a      	bpl.n	10013096 <__swbuf_r+0x52>
10013080:	6923      	ldr	r3, [r4, #16]
10013082:	2b00      	cmp	r3, #0
10013084:	d007      	beq.n	10013096 <__swbuf_r+0x52>
10013086:	6823      	ldr	r3, [r4, #0]
10013088:	6922      	ldr	r2, [r4, #16]
1001308a:	b2fe      	uxtb	r6, r7
1001308c:	1a98      	subs	r0, r3, r2
1001308e:	6963      	ldr	r3, [r4, #20]
10013090:	4298      	cmp	r0, r3
10013092:	db0f      	blt.n	100130b4 <__swbuf_r+0x70>
10013094:	e008      	b.n	100130a8 <__swbuf_r+0x64>
10013096:	0021      	movs	r1, r4
10013098:	0028      	movs	r0, r5
1001309a:	f000 f82b 	bl	100130f4 <__swsetup_r>
1001309e:	2800      	cmp	r0, #0
100130a0:	d0f1      	beq.n	10013086 <__swbuf_r+0x42>
100130a2:	2001      	movs	r0, #1
100130a4:	4240      	negs	r0, r0
100130a6:	e01d      	b.n	100130e4 <__swbuf_r+0xa0>
100130a8:	0021      	movs	r1, r4
100130aa:	0028      	movs	r0, r5
100130ac:	f000 ff6a 	bl	10013f84 <_fflush_r>
100130b0:	2800      	cmp	r0, #0
100130b2:	d1f6      	bne.n	100130a2 <__swbuf_r+0x5e>
100130b4:	68a3      	ldr	r3, [r4, #8]
100130b6:	3001      	adds	r0, #1
100130b8:	3b01      	subs	r3, #1
100130ba:	60a3      	str	r3, [r4, #8]
100130bc:	6823      	ldr	r3, [r4, #0]
100130be:	1c5a      	adds	r2, r3, #1
100130c0:	6022      	str	r2, [r4, #0]
100130c2:	701f      	strb	r7, [r3, #0]
100130c4:	6963      	ldr	r3, [r4, #20]
100130c6:	4298      	cmp	r0, r3
100130c8:	d005      	beq.n	100130d6 <__swbuf_r+0x92>
100130ca:	89a3      	ldrh	r3, [r4, #12]
100130cc:	0030      	movs	r0, r6
100130ce:	07db      	lsls	r3, r3, #31
100130d0:	d508      	bpl.n	100130e4 <__swbuf_r+0xa0>
100130d2:	2e0a      	cmp	r6, #10
100130d4:	d106      	bne.n	100130e4 <__swbuf_r+0xa0>
100130d6:	0021      	movs	r1, r4
100130d8:	0028      	movs	r0, r5
100130da:	f000 ff53 	bl	10013f84 <_fflush_r>
100130de:	2800      	cmp	r0, #0
100130e0:	d1df      	bne.n	100130a2 <__swbuf_r+0x5e>
100130e2:	0030      	movs	r0, r6
100130e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100130e6:	46c0      	nop			; (mov r8, r8)
100130e8:	10018ccc 	.word	0x10018ccc
100130ec:	10018cec 	.word	0x10018cec
100130f0:	10018d0c 	.word	0x10018d0c

100130f4 <__swsetup_r>:
100130f4:	4b36      	ldr	r3, [pc, #216]	; (100131d0 <__swsetup_r+0xdc>)
100130f6:	b570      	push	{r4, r5, r6, lr}
100130f8:	681d      	ldr	r5, [r3, #0]
100130fa:	0006      	movs	r6, r0
100130fc:	000c      	movs	r4, r1
100130fe:	2d00      	cmp	r5, #0
10013100:	d005      	beq.n	1001310e <__swsetup_r+0x1a>
10013102:	69ab      	ldr	r3, [r5, #24]
10013104:	2b00      	cmp	r3, #0
10013106:	d102      	bne.n	1001310e <__swsetup_r+0x1a>
10013108:	0028      	movs	r0, r5
1001310a:	f000 ffa9 	bl	10014060 <__sinit>
1001310e:	4b31      	ldr	r3, [pc, #196]	; (100131d4 <__swsetup_r+0xe0>)
10013110:	429c      	cmp	r4, r3
10013112:	d101      	bne.n	10013118 <__swsetup_r+0x24>
10013114:	686c      	ldr	r4, [r5, #4]
10013116:	e008      	b.n	1001312a <__swsetup_r+0x36>
10013118:	4b2f      	ldr	r3, [pc, #188]	; (100131d8 <__swsetup_r+0xe4>)
1001311a:	429c      	cmp	r4, r3
1001311c:	d101      	bne.n	10013122 <__swsetup_r+0x2e>
1001311e:	68ac      	ldr	r4, [r5, #8]
10013120:	e003      	b.n	1001312a <__swsetup_r+0x36>
10013122:	4b2e      	ldr	r3, [pc, #184]	; (100131dc <__swsetup_r+0xe8>)
10013124:	429c      	cmp	r4, r3
10013126:	d100      	bne.n	1001312a <__swsetup_r+0x36>
10013128:	68ec      	ldr	r4, [r5, #12]
1001312a:	220c      	movs	r2, #12
1001312c:	5ea3      	ldrsh	r3, [r4, r2]
1001312e:	b29a      	uxth	r2, r3
10013130:	0711      	lsls	r1, r2, #28
10013132:	d423      	bmi.n	1001317c <__swsetup_r+0x88>
10013134:	06d1      	lsls	r1, r2, #27
10013136:	d407      	bmi.n	10013148 <__swsetup_r+0x54>
10013138:	2209      	movs	r2, #9
1001313a:	2001      	movs	r0, #1
1001313c:	6032      	str	r2, [r6, #0]
1001313e:	3237      	adds	r2, #55	; 0x37
10013140:	4313      	orrs	r3, r2
10013142:	81a3      	strh	r3, [r4, #12]
10013144:	4240      	negs	r0, r0
10013146:	e042      	b.n	100131ce <__swsetup_r+0xda>
10013148:	0753      	lsls	r3, r2, #29
1001314a:	d513      	bpl.n	10013174 <__swsetup_r+0x80>
1001314c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001314e:	2900      	cmp	r1, #0
10013150:	d008      	beq.n	10013164 <__swsetup_r+0x70>
10013152:	0023      	movs	r3, r4
10013154:	3344      	adds	r3, #68	; 0x44
10013156:	4299      	cmp	r1, r3
10013158:	d002      	beq.n	10013160 <__swsetup_r+0x6c>
1001315a:	0030      	movs	r0, r6
1001315c:	f7ff f8b6 	bl	100122cc <_free_r>
10013160:	2300      	movs	r3, #0
10013162:	6363      	str	r3, [r4, #52]	; 0x34
10013164:	2224      	movs	r2, #36	; 0x24
10013166:	89a3      	ldrh	r3, [r4, #12]
10013168:	4393      	bics	r3, r2
1001316a:	81a3      	strh	r3, [r4, #12]
1001316c:	2300      	movs	r3, #0
1001316e:	6063      	str	r3, [r4, #4]
10013170:	6923      	ldr	r3, [r4, #16]
10013172:	6023      	str	r3, [r4, #0]
10013174:	2208      	movs	r2, #8
10013176:	89a3      	ldrh	r3, [r4, #12]
10013178:	4313      	orrs	r3, r2
1001317a:	81a3      	strh	r3, [r4, #12]
1001317c:	6923      	ldr	r3, [r4, #16]
1001317e:	2b00      	cmp	r3, #0
10013180:	d10b      	bne.n	1001319a <__swsetup_r+0xa6>
10013182:	23a0      	movs	r3, #160	; 0xa0
10013184:	89a2      	ldrh	r2, [r4, #12]
10013186:	009b      	lsls	r3, r3, #2
10013188:	4013      	ands	r3, r2
1001318a:	2280      	movs	r2, #128	; 0x80
1001318c:	0092      	lsls	r2, r2, #2
1001318e:	4293      	cmp	r3, r2
10013190:	d003      	beq.n	1001319a <__swsetup_r+0xa6>
10013192:	0021      	movs	r1, r4
10013194:	0030      	movs	r0, r6
10013196:	f001 f821 	bl	100141dc <__smakebuf_r>
1001319a:	2301      	movs	r3, #1
1001319c:	89a2      	ldrh	r2, [r4, #12]
1001319e:	4013      	ands	r3, r2
100131a0:	d005      	beq.n	100131ae <__swsetup_r+0xba>
100131a2:	2300      	movs	r3, #0
100131a4:	60a3      	str	r3, [r4, #8]
100131a6:	6963      	ldr	r3, [r4, #20]
100131a8:	425b      	negs	r3, r3
100131aa:	61a3      	str	r3, [r4, #24]
100131ac:	e003      	b.n	100131b6 <__swsetup_r+0xc2>
100131ae:	0792      	lsls	r2, r2, #30
100131b0:	d400      	bmi.n	100131b4 <__swsetup_r+0xc0>
100131b2:	6963      	ldr	r3, [r4, #20]
100131b4:	60a3      	str	r3, [r4, #8]
100131b6:	2000      	movs	r0, #0
100131b8:	6923      	ldr	r3, [r4, #16]
100131ba:	4283      	cmp	r3, r0
100131bc:	d107      	bne.n	100131ce <__swsetup_r+0xda>
100131be:	220c      	movs	r2, #12
100131c0:	5ea3      	ldrsh	r3, [r4, r2]
100131c2:	061a      	lsls	r2, r3, #24
100131c4:	d503      	bpl.n	100131ce <__swsetup_r+0xda>
100131c6:	2240      	movs	r2, #64	; 0x40
100131c8:	4313      	orrs	r3, r2
100131ca:	81a3      	strh	r3, [r4, #12]
100131cc:	3801      	subs	r0, #1
100131ce:	bd70      	pop	{r4, r5, r6, pc}
100131d0:	10019014 	.word	0x10019014
100131d4:	10018ccc 	.word	0x10018ccc
100131d8:	10018cec 	.word	0x10018cec
100131dc:	10018d0c 	.word	0x10018d0c

100131e0 <quorem>:
100131e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100131e2:	6903      	ldr	r3, [r0, #16]
100131e4:	690c      	ldr	r4, [r1, #16]
100131e6:	b089      	sub	sp, #36	; 0x24
100131e8:	0007      	movs	r7, r0
100131ea:	9105      	str	r1, [sp, #20]
100131ec:	2600      	movs	r6, #0
100131ee:	429c      	cmp	r4, r3
100131f0:	dc79      	bgt.n	100132e6 <quorem+0x106>
100131f2:	000b      	movs	r3, r1
100131f4:	3c01      	subs	r4, #1
100131f6:	3314      	adds	r3, #20
100131f8:	00a5      	lsls	r5, r4, #2
100131fa:	9303      	str	r3, [sp, #12]
100131fc:	195b      	adds	r3, r3, r5
100131fe:	9304      	str	r3, [sp, #16]
10013200:	0003      	movs	r3, r0
10013202:	3314      	adds	r3, #20
10013204:	9302      	str	r3, [sp, #8]
10013206:	195d      	adds	r5, r3, r5
10013208:	9b04      	ldr	r3, [sp, #16]
1001320a:	6828      	ldr	r0, [r5, #0]
1001320c:	681b      	ldr	r3, [r3, #0]
1001320e:	1c59      	adds	r1, r3, #1
10013210:	9301      	str	r3, [sp, #4]
10013212:	f001 fd71 	bl	10014cf8 <__aeabi_uidiv>
10013216:	9001      	str	r0, [sp, #4]
10013218:	42b0      	cmp	r0, r6
1001321a:	d033      	beq.n	10013284 <quorem+0xa4>
1001321c:	9b03      	ldr	r3, [sp, #12]
1001321e:	9802      	ldr	r0, [sp, #8]
10013220:	469c      	mov	ip, r3
10013222:	9606      	str	r6, [sp, #24]
10013224:	4663      	mov	r3, ip
10013226:	cb04      	ldmia	r3!, {r2}
10013228:	469c      	mov	ip, r3
1001322a:	9b01      	ldr	r3, [sp, #4]
1001322c:	b291      	uxth	r1, r2
1001322e:	4359      	muls	r1, r3
10013230:	0c12      	lsrs	r2, r2, #16
10013232:	435a      	muls	r2, r3
10013234:	1989      	adds	r1, r1, r6
10013236:	0c0b      	lsrs	r3, r1, #16
10013238:	18d3      	adds	r3, r2, r3
1001323a:	9307      	str	r3, [sp, #28]
1001323c:	9a06      	ldr	r2, [sp, #24]
1001323e:	0c1e      	lsrs	r6, r3, #16
10013240:	8803      	ldrh	r3, [r0, #0]
10013242:	b289      	uxth	r1, r1
10013244:	189b      	adds	r3, r3, r2
10013246:	6802      	ldr	r2, [r0, #0]
10013248:	1a5b      	subs	r3, r3, r1
1001324a:	0c11      	lsrs	r1, r2, #16
1001324c:	466a      	mov	r2, sp
1001324e:	8b92      	ldrh	r2, [r2, #28]
10013250:	1a8a      	subs	r2, r1, r2
10013252:	1419      	asrs	r1, r3, #16
10013254:	1852      	adds	r2, r2, r1
10013256:	1411      	asrs	r1, r2, #16
10013258:	b29b      	uxth	r3, r3
1001325a:	0412      	lsls	r2, r2, #16
1001325c:	4313      	orrs	r3, r2
1001325e:	c008      	stmia	r0!, {r3}
10013260:	9b04      	ldr	r3, [sp, #16]
10013262:	9106      	str	r1, [sp, #24]
10013264:	4563      	cmp	r3, ip
10013266:	d2dd      	bcs.n	10013224 <quorem+0x44>
10013268:	682b      	ldr	r3, [r5, #0]
1001326a:	2b00      	cmp	r3, #0
1001326c:	d10a      	bne.n	10013284 <quorem+0xa4>
1001326e:	9b02      	ldr	r3, [sp, #8]
10013270:	3d04      	subs	r5, #4
10013272:	42ab      	cmp	r3, r5
10013274:	d301      	bcc.n	1001327a <quorem+0x9a>
10013276:	613c      	str	r4, [r7, #16]
10013278:	e004      	b.n	10013284 <quorem+0xa4>
1001327a:	682b      	ldr	r3, [r5, #0]
1001327c:	2b00      	cmp	r3, #0
1001327e:	d1fa      	bne.n	10013276 <quorem+0x96>
10013280:	3c01      	subs	r4, #1
10013282:	e7f4      	b.n	1001326e <quorem+0x8e>
10013284:	9905      	ldr	r1, [sp, #20]
10013286:	0038      	movs	r0, r7
10013288:	f001 fa02 	bl	10014690 <__mcmp>
1001328c:	2800      	cmp	r0, #0
1001328e:	db29      	blt.n	100132e4 <quorem+0x104>
10013290:	2000      	movs	r0, #0
10013292:	9b01      	ldr	r3, [sp, #4]
10013294:	9902      	ldr	r1, [sp, #8]
10013296:	3301      	adds	r3, #1
10013298:	9a03      	ldr	r2, [sp, #12]
1001329a:	9301      	str	r3, [sp, #4]
1001329c:	ca40      	ldmia	r2!, {r6}
1001329e:	880b      	ldrh	r3, [r1, #0]
100132a0:	1818      	adds	r0, r3, r0
100132a2:	b2b3      	uxth	r3, r6
100132a4:	1ac3      	subs	r3, r0, r3
100132a6:	6808      	ldr	r0, [r1, #0]
100132a8:	0c36      	lsrs	r6, r6, #16
100132aa:	0c00      	lsrs	r0, r0, #16
100132ac:	1b80      	subs	r0, r0, r6
100132ae:	141d      	asrs	r5, r3, #16
100132b0:	1945      	adds	r5, r0, r5
100132b2:	1428      	asrs	r0, r5, #16
100132b4:	b29b      	uxth	r3, r3
100132b6:	042d      	lsls	r5, r5, #16
100132b8:	432b      	orrs	r3, r5
100132ba:	c108      	stmia	r1!, {r3}
100132bc:	9b04      	ldr	r3, [sp, #16]
100132be:	4293      	cmp	r3, r2
100132c0:	d2ec      	bcs.n	1001329c <quorem+0xbc>
100132c2:	9a02      	ldr	r2, [sp, #8]
100132c4:	00a3      	lsls	r3, r4, #2
100132c6:	18d3      	adds	r3, r2, r3
100132c8:	681a      	ldr	r2, [r3, #0]
100132ca:	2a00      	cmp	r2, #0
100132cc:	d10a      	bne.n	100132e4 <quorem+0x104>
100132ce:	9a02      	ldr	r2, [sp, #8]
100132d0:	3b04      	subs	r3, #4
100132d2:	429a      	cmp	r2, r3
100132d4:	d301      	bcc.n	100132da <quorem+0xfa>
100132d6:	613c      	str	r4, [r7, #16]
100132d8:	e004      	b.n	100132e4 <quorem+0x104>
100132da:	681a      	ldr	r2, [r3, #0]
100132dc:	2a00      	cmp	r2, #0
100132de:	d1fa      	bne.n	100132d6 <quorem+0xf6>
100132e0:	3c01      	subs	r4, #1
100132e2:	e7f4      	b.n	100132ce <quorem+0xee>
100132e4:	9e01      	ldr	r6, [sp, #4]
100132e6:	0030      	movs	r0, r6
100132e8:	b009      	add	sp, #36	; 0x24
100132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

100132ec <_dtoa_r>:
100132ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100132ee:	0016      	movs	r6, r2
100132f0:	001f      	movs	r7, r3
100132f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
100132f4:	b09d      	sub	sp, #116	; 0x74
100132f6:	9004      	str	r0, [sp, #16]
100132f8:	9d25      	ldr	r5, [sp, #148]	; 0x94
100132fa:	9606      	str	r6, [sp, #24]
100132fc:	9707      	str	r7, [sp, #28]
100132fe:	2c00      	cmp	r4, #0
10013300:	d108      	bne.n	10013314 <_dtoa_r+0x28>
10013302:	2010      	movs	r0, #16
10013304:	f7fe ffb8 	bl	10012278 <malloc>
10013308:	9b04      	ldr	r3, [sp, #16]
1001330a:	6258      	str	r0, [r3, #36]	; 0x24
1001330c:	6044      	str	r4, [r0, #4]
1001330e:	6084      	str	r4, [r0, #8]
10013310:	6004      	str	r4, [r0, #0]
10013312:	60c4      	str	r4, [r0, #12]
10013314:	9b04      	ldr	r3, [sp, #16]
10013316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10013318:	6819      	ldr	r1, [r3, #0]
1001331a:	2900      	cmp	r1, #0
1001331c:	d00b      	beq.n	10013336 <_dtoa_r+0x4a>
1001331e:	685a      	ldr	r2, [r3, #4]
10013320:	2301      	movs	r3, #1
10013322:	4093      	lsls	r3, r2
10013324:	604a      	str	r2, [r1, #4]
10013326:	608b      	str	r3, [r1, #8]
10013328:	9804      	ldr	r0, [sp, #16]
1001332a:	f000 ffd8 	bl	100142de <_Bfree>
1001332e:	2200      	movs	r2, #0
10013330:	9b04      	ldr	r3, [sp, #16]
10013332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10013334:	601a      	str	r2, [r3, #0]
10013336:	9b07      	ldr	r3, [sp, #28]
10013338:	2b00      	cmp	r3, #0
1001333a:	da05      	bge.n	10013348 <_dtoa_r+0x5c>
1001333c:	2301      	movs	r3, #1
1001333e:	602b      	str	r3, [r5, #0]
10013340:	007b      	lsls	r3, r7, #1
10013342:	085b      	lsrs	r3, r3, #1
10013344:	9307      	str	r3, [sp, #28]
10013346:	e001      	b.n	1001334c <_dtoa_r+0x60>
10013348:	2300      	movs	r3, #0
1001334a:	602b      	str	r3, [r5, #0]
1001334c:	9c07      	ldr	r4, [sp, #28]
1001334e:	4bc8      	ldr	r3, [pc, #800]	; (10013670 <_dtoa_r+0x384>)
10013350:	0022      	movs	r2, r4
10013352:	9319      	str	r3, [sp, #100]	; 0x64
10013354:	401a      	ands	r2, r3
10013356:	429a      	cmp	r2, r3
10013358:	d119      	bne.n	1001338e <_dtoa_r+0xa2>
1001335a:	4bc6      	ldr	r3, [pc, #792]	; (10013674 <_dtoa_r+0x388>)
1001335c:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001335e:	6013      	str	r3, [r2, #0]
10013360:	9a06      	ldr	r2, [sp, #24]
10013362:	4bc5      	ldr	r3, [pc, #788]	; (10013678 <_dtoa_r+0x38c>)
10013364:	2a00      	cmp	r2, #0
10013366:	d102      	bne.n	1001336e <_dtoa_r+0x82>
10013368:	0324      	lsls	r4, r4, #12
1001336a:	d100      	bne.n	1001336e <_dtoa_r+0x82>
1001336c:	4bc3      	ldr	r3, [pc, #780]	; (1001367c <_dtoa_r+0x390>)
1001336e:	9a26      	ldr	r2, [sp, #152]	; 0x98
10013370:	0018      	movs	r0, r3
10013372:	2a00      	cmp	r2, #0
10013374:	d101      	bne.n	1001337a <_dtoa_r+0x8e>
10013376:	f000 fd7d 	bl	10013e74 <_dtoa_r+0xb88>
1001337a:	78d9      	ldrb	r1, [r3, #3]
1001337c:	1cda      	adds	r2, r3, #3
1001337e:	2900      	cmp	r1, #0
10013380:	d000      	beq.n	10013384 <_dtoa_r+0x98>
10013382:	3205      	adds	r2, #5
10013384:	9926      	ldr	r1, [sp, #152]	; 0x98
10013386:	0018      	movs	r0, r3
10013388:	600a      	str	r2, [r1, #0]
1001338a:	f000 fd73 	bl	10013e74 <_dtoa_r+0xb88>
1001338e:	9e06      	ldr	r6, [sp, #24]
10013390:	9f07      	ldr	r7, [sp, #28]
10013392:	2200      	movs	r2, #0
10013394:	2300      	movs	r3, #0
10013396:	0030      	movs	r0, r6
10013398:	0039      	movs	r1, r7
1001339a:	f001 fe33 	bl	10015004 <__aeabi_dcmpeq>
1001339e:	1e05      	subs	r5, r0, #0
100133a0:	d00e      	beq.n	100133c0 <_dtoa_r+0xd4>
100133a2:	2301      	movs	r3, #1
100133a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
100133a6:	6013      	str	r3, [r2, #0]
100133a8:	4bb5      	ldr	r3, [pc, #724]	; (10013680 <_dtoa_r+0x394>)
100133aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
100133ac:	0018      	movs	r0, r3
100133ae:	2a00      	cmp	r2, #0
100133b0:	d101      	bne.n	100133b6 <_dtoa_r+0xca>
100133b2:	f000 fd5f 	bl	10013e74 <_dtoa_r+0xb88>
100133b6:	4ab3      	ldr	r2, [pc, #716]	; (10013684 <_dtoa_r+0x398>)
100133b8:	9926      	ldr	r1, [sp, #152]	; 0x98
100133ba:	600a      	str	r2, [r1, #0]
100133bc:	f000 fd5a 	bl	10013e74 <_dtoa_r+0xb88>
100133c0:	ab1a      	add	r3, sp, #104	; 0x68
100133c2:	9301      	str	r3, [sp, #4]
100133c4:	ab1b      	add	r3, sp, #108	; 0x6c
100133c6:	9300      	str	r3, [sp, #0]
100133c8:	0032      	movs	r2, r6
100133ca:	003b      	movs	r3, r7
100133cc:	9804      	ldr	r0, [sp, #16]
100133ce:	f001 f9e5 	bl	1001479c <__d2b>
100133d2:	0063      	lsls	r3, r4, #1
100133d4:	9005      	str	r0, [sp, #20]
100133d6:	0d5b      	lsrs	r3, r3, #21
100133d8:	d009      	beq.n	100133ee <_dtoa_r+0x102>
100133da:	033a      	lsls	r2, r7, #12
100133dc:	4caa      	ldr	r4, [pc, #680]	; (10013688 <_dtoa_r+0x39c>)
100133de:	0b12      	lsrs	r2, r2, #12
100133e0:	4314      	orrs	r4, r2
100133e2:	4aaa      	ldr	r2, [pc, #680]	; (1001368c <_dtoa_r+0x3a0>)
100133e4:	0030      	movs	r0, r6
100133e6:	0021      	movs	r1, r4
100133e8:	189e      	adds	r6, r3, r2
100133ea:	9517      	str	r5, [sp, #92]	; 0x5c
100133ec:	e01a      	b.n	10013424 <_dtoa_r+0x138>
100133ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
100133f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
100133f2:	189e      	adds	r6, r3, r2
100133f4:	4ba6      	ldr	r3, [pc, #664]	; (10013690 <_dtoa_r+0x3a4>)
100133f6:	18f3      	adds	r3, r6, r3
100133f8:	2b20      	cmp	r3, #32
100133fa:	dd08      	ble.n	1001340e <_dtoa_r+0x122>
100133fc:	4aa5      	ldr	r2, [pc, #660]	; (10013694 <_dtoa_r+0x3a8>)
100133fe:	9806      	ldr	r0, [sp, #24]
10013400:	18b2      	adds	r2, r6, r2
10013402:	40d0      	lsrs	r0, r2
10013404:	2240      	movs	r2, #64	; 0x40
10013406:	1ad3      	subs	r3, r2, r3
10013408:	409c      	lsls	r4, r3
1001340a:	4320      	orrs	r0, r4
1001340c:	e003      	b.n	10013416 <_dtoa_r+0x12a>
1001340e:	2220      	movs	r2, #32
10013410:	9806      	ldr	r0, [sp, #24]
10013412:	1ad3      	subs	r3, r2, r3
10013414:	4098      	lsls	r0, r3
10013416:	f003 fed7 	bl	100171c8 <__aeabi_ui2d>
1001341a:	2301      	movs	r3, #1
1001341c:	4c9e      	ldr	r4, [pc, #632]	; (10013698 <_dtoa_r+0x3ac>)
1001341e:	3e01      	subs	r6, #1
10013420:	1909      	adds	r1, r1, r4
10013422:	9317      	str	r3, [sp, #92]	; 0x5c
10013424:	2200      	movs	r2, #0
10013426:	4b9d      	ldr	r3, [pc, #628]	; (1001369c <_dtoa_r+0x3b0>)
10013428:	f003 fae2 	bl	100169f0 <__aeabi_dsub>
1001342c:	4a9c      	ldr	r2, [pc, #624]	; (100136a0 <_dtoa_r+0x3b4>)
1001342e:	4b9d      	ldr	r3, [pc, #628]	; (100136a4 <_dtoa_r+0x3b8>)
10013430:	f003 f864 	bl	100164fc <__aeabi_dmul>
10013434:	4a9c      	ldr	r2, [pc, #624]	; (100136a8 <_dtoa_r+0x3bc>)
10013436:	4b9d      	ldr	r3, [pc, #628]	; (100136ac <_dtoa_r+0x3c0>)
10013438:	f002 f910 	bl	1001565c <__aeabi_dadd>
1001343c:	0004      	movs	r4, r0
1001343e:	0030      	movs	r0, r6
10013440:	000d      	movs	r5, r1
10013442:	f003 fe7f 	bl	10017144 <__aeabi_i2d>
10013446:	4a9a      	ldr	r2, [pc, #616]	; (100136b0 <_dtoa_r+0x3c4>)
10013448:	4b9a      	ldr	r3, [pc, #616]	; (100136b4 <_dtoa_r+0x3c8>)
1001344a:	f003 f857 	bl	100164fc <__aeabi_dmul>
1001344e:	0002      	movs	r2, r0
10013450:	000b      	movs	r3, r1
10013452:	0020      	movs	r0, r4
10013454:	0029      	movs	r1, r5
10013456:	f002 f901 	bl	1001565c <__aeabi_dadd>
1001345a:	0004      	movs	r4, r0
1001345c:	000d      	movs	r5, r1
1001345e:	f003 fe3b 	bl	100170d8 <__aeabi_d2iz>
10013462:	2200      	movs	r2, #0
10013464:	9003      	str	r0, [sp, #12]
10013466:	2300      	movs	r3, #0
10013468:	0020      	movs	r0, r4
1001346a:	0029      	movs	r1, r5
1001346c:	f001 fdd0 	bl	10015010 <__aeabi_dcmplt>
10013470:	2800      	cmp	r0, #0
10013472:	d00d      	beq.n	10013490 <_dtoa_r+0x1a4>
10013474:	9803      	ldr	r0, [sp, #12]
10013476:	f003 fe65 	bl	10017144 <__aeabi_i2d>
1001347a:	0002      	movs	r2, r0
1001347c:	000b      	movs	r3, r1
1001347e:	0020      	movs	r0, r4
10013480:	0029      	movs	r1, r5
10013482:	f001 fdbf 	bl	10015004 <__aeabi_dcmpeq>
10013486:	4243      	negs	r3, r0
10013488:	4143      	adcs	r3, r0
1001348a:	9a03      	ldr	r2, [sp, #12]
1001348c:	1ad3      	subs	r3, r2, r3
1001348e:	9303      	str	r3, [sp, #12]
10013490:	2301      	movs	r3, #1
10013492:	9316      	str	r3, [sp, #88]	; 0x58
10013494:	9b03      	ldr	r3, [sp, #12]
10013496:	2b16      	cmp	r3, #22
10013498:	d811      	bhi.n	100134be <_dtoa_r+0x1d2>
1001349a:	4987      	ldr	r1, [pc, #540]	; (100136b8 <_dtoa_r+0x3cc>)
1001349c:	00db      	lsls	r3, r3, #3
1001349e:	18c9      	adds	r1, r1, r3
100134a0:	6808      	ldr	r0, [r1, #0]
100134a2:	6849      	ldr	r1, [r1, #4]
100134a4:	9a06      	ldr	r2, [sp, #24]
100134a6:	9b07      	ldr	r3, [sp, #28]
100134a8:	f001 fdc6 	bl	10015038 <__aeabi_dcmpgt>
100134ac:	2800      	cmp	r0, #0
100134ae:	d005      	beq.n	100134bc <_dtoa_r+0x1d0>
100134b0:	9b03      	ldr	r3, [sp, #12]
100134b2:	3b01      	subs	r3, #1
100134b4:	9303      	str	r3, [sp, #12]
100134b6:	2300      	movs	r3, #0
100134b8:	9316      	str	r3, [sp, #88]	; 0x58
100134ba:	e000      	b.n	100134be <_dtoa_r+0x1d2>
100134bc:	9016      	str	r0, [sp, #88]	; 0x58
100134be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
100134c0:	1b9e      	subs	r6, r3, r6
100134c2:	2300      	movs	r3, #0
100134c4:	930b      	str	r3, [sp, #44]	; 0x2c
100134c6:	3e01      	subs	r6, #1
100134c8:	960c      	str	r6, [sp, #48]	; 0x30
100134ca:	d504      	bpl.n	100134d6 <_dtoa_r+0x1ea>
100134cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100134ce:	425b      	negs	r3, r3
100134d0:	930b      	str	r3, [sp, #44]	; 0x2c
100134d2:	2300      	movs	r3, #0
100134d4:	930c      	str	r3, [sp, #48]	; 0x30
100134d6:	9b03      	ldr	r3, [sp, #12]
100134d8:	2b00      	cmp	r3, #0
100134da:	db08      	blt.n	100134ee <_dtoa_r+0x202>
100134dc:	9a03      	ldr	r2, [sp, #12]
100134de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100134e0:	4694      	mov	ip, r2
100134e2:	4463      	add	r3, ip
100134e4:	930c      	str	r3, [sp, #48]	; 0x30
100134e6:	2300      	movs	r3, #0
100134e8:	9211      	str	r2, [sp, #68]	; 0x44
100134ea:	9308      	str	r3, [sp, #32]
100134ec:	e007      	b.n	100134fe <_dtoa_r+0x212>
100134ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100134f0:	9a03      	ldr	r2, [sp, #12]
100134f2:	1a9b      	subs	r3, r3, r2
100134f4:	930b      	str	r3, [sp, #44]	; 0x2c
100134f6:	4253      	negs	r3, r2
100134f8:	9308      	str	r3, [sp, #32]
100134fa:	2300      	movs	r3, #0
100134fc:	9311      	str	r3, [sp, #68]	; 0x44
100134fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013500:	2501      	movs	r5, #1
10013502:	2b09      	cmp	r3, #9
10013504:	d825      	bhi.n	10013552 <_dtoa_r+0x266>
10013506:	2b05      	cmp	r3, #5
10013508:	dd02      	ble.n	10013510 <_dtoa_r+0x224>
1001350a:	2500      	movs	r5, #0
1001350c:	3b04      	subs	r3, #4
1001350e:	9322      	str	r3, [sp, #136]	; 0x88
10013510:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013512:	1e98      	subs	r0, r3, #2
10013514:	2803      	cmp	r0, #3
10013516:	d824      	bhi.n	10013562 <_dtoa_r+0x276>
10013518:	f001 fbe4 	bl	10014ce4 <__gnu_thumb1_case_uqi>
1001351c:	04020e06 	.word	0x04020e06
10013520:	2301      	movs	r3, #1
10013522:	e002      	b.n	1001352a <_dtoa_r+0x23e>
10013524:	2301      	movs	r3, #1
10013526:	e008      	b.n	1001353a <_dtoa_r+0x24e>
10013528:	2300      	movs	r3, #0
1001352a:	9310      	str	r3, [sp, #64]	; 0x40
1001352c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1001352e:	2b00      	cmp	r3, #0
10013530:	dd20      	ble.n	10013574 <_dtoa_r+0x288>
10013532:	001f      	movs	r7, r3
10013534:	930a      	str	r3, [sp, #40]	; 0x28
10013536:	e021      	b.n	1001357c <_dtoa_r+0x290>
10013538:	2300      	movs	r3, #0
1001353a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1001353c:	9310      	str	r3, [sp, #64]	; 0x40
1001353e:	9b03      	ldr	r3, [sp, #12]
10013540:	189f      	adds	r7, r3, r2
10013542:	1c7b      	adds	r3, r7, #1
10013544:	930a      	str	r3, [sp, #40]	; 0x28
10013546:	2301      	movs	r3, #1
10013548:	18fa      	adds	r2, r7, r3
1001354a:	2a00      	cmp	r2, #0
1001354c:	dd16      	ble.n	1001357c <_dtoa_r+0x290>
1001354e:	0013      	movs	r3, r2
10013550:	e014      	b.n	1001357c <_dtoa_r+0x290>
10013552:	2701      	movs	r7, #1
10013554:	2300      	movs	r3, #0
10013556:	427f      	negs	r7, r7
10013558:	9322      	str	r3, [sp, #136]	; 0x88
1001355a:	9510      	str	r5, [sp, #64]	; 0x40
1001355c:	970a      	str	r7, [sp, #40]	; 0x28
1001355e:	3312      	adds	r3, #18
10013560:	e005      	b.n	1001356e <_dtoa_r+0x282>
10013562:	2701      	movs	r7, #1
10013564:	2301      	movs	r3, #1
10013566:	427f      	negs	r7, r7
10013568:	9310      	str	r3, [sp, #64]	; 0x40
1001356a:	970a      	str	r7, [sp, #40]	; 0x28
1001356c:	3311      	adds	r3, #17
1001356e:	2200      	movs	r2, #0
10013570:	9223      	str	r2, [sp, #140]	; 0x8c
10013572:	e003      	b.n	1001357c <_dtoa_r+0x290>
10013574:	2701      	movs	r7, #1
10013576:	003b      	movs	r3, r7
10013578:	970a      	str	r7, [sp, #40]	; 0x28
1001357a:	9723      	str	r7, [sp, #140]	; 0x8c
1001357c:	9a04      	ldr	r2, [sp, #16]
1001357e:	6a54      	ldr	r4, [r2, #36]	; 0x24
10013580:	2200      	movs	r2, #0
10013582:	6062      	str	r2, [r4, #4]
10013584:	3204      	adds	r2, #4
10013586:	0011      	movs	r1, r2
10013588:	3114      	adds	r1, #20
1001358a:	4299      	cmp	r1, r3
1001358c:	d804      	bhi.n	10013598 <_dtoa_r+0x2ac>
1001358e:	6861      	ldr	r1, [r4, #4]
10013590:	0052      	lsls	r2, r2, #1
10013592:	3101      	adds	r1, #1
10013594:	6061      	str	r1, [r4, #4]
10013596:	e7f6      	b.n	10013586 <_dtoa_r+0x29a>
10013598:	6861      	ldr	r1, [r4, #4]
1001359a:	9804      	ldr	r0, [sp, #16]
1001359c:	f000 fe67 	bl	1001426e <_Balloc>
100135a0:	9b04      	ldr	r3, [sp, #16]
100135a2:	6020      	str	r0, [r4, #0]
100135a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100135a6:	681b      	ldr	r3, [r3, #0]
100135a8:	930d      	str	r3, [sp, #52]	; 0x34
100135aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100135ac:	2b0e      	cmp	r3, #14
100135ae:	d900      	bls.n	100135b2 <_dtoa_r+0x2c6>
100135b0:	e181      	b.n	100138b6 <_dtoa_r+0x5ca>
100135b2:	2d00      	cmp	r5, #0
100135b4:	d100      	bne.n	100135b8 <_dtoa_r+0x2cc>
100135b6:	e17e      	b.n	100138b6 <_dtoa_r+0x5ca>
100135b8:	9b06      	ldr	r3, [sp, #24]
100135ba:	9c07      	ldr	r4, [sp, #28]
100135bc:	9314      	str	r3, [sp, #80]	; 0x50
100135be:	9415      	str	r4, [sp, #84]	; 0x54
100135c0:	9b03      	ldr	r3, [sp, #12]
100135c2:	2b00      	cmp	r3, #0
100135c4:	dd31      	ble.n	1001362a <_dtoa_r+0x33e>
100135c6:	220f      	movs	r2, #15
100135c8:	493b      	ldr	r1, [pc, #236]	; (100136b8 <_dtoa_r+0x3cc>)
100135ca:	4013      	ands	r3, r2
100135cc:	00db      	lsls	r3, r3, #3
100135ce:	18cb      	adds	r3, r1, r3
100135d0:	685c      	ldr	r4, [r3, #4]
100135d2:	681b      	ldr	r3, [r3, #0]
100135d4:	930e      	str	r3, [sp, #56]	; 0x38
100135d6:	940f      	str	r4, [sp, #60]	; 0x3c
100135d8:	9b03      	ldr	r3, [sp, #12]
100135da:	2402      	movs	r4, #2
100135dc:	111d      	asrs	r5, r3, #4
100135de:	06eb      	lsls	r3, r5, #27
100135e0:	d50a      	bpl.n	100135f8 <_dtoa_r+0x30c>
100135e2:	9814      	ldr	r0, [sp, #80]	; 0x50
100135e4:	9915      	ldr	r1, [sp, #84]	; 0x54
100135e6:	4b35      	ldr	r3, [pc, #212]	; (100136bc <_dtoa_r+0x3d0>)
100135e8:	4015      	ands	r5, r2
100135ea:	6a1a      	ldr	r2, [r3, #32]
100135ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100135ee:	f002 fb61 	bl	10015cb4 <__aeabi_ddiv>
100135f2:	9006      	str	r0, [sp, #24]
100135f4:	9107      	str	r1, [sp, #28]
100135f6:	3401      	adds	r4, #1
100135f8:	4e30      	ldr	r6, [pc, #192]	; (100136bc <_dtoa_r+0x3d0>)
100135fa:	2d00      	cmp	r5, #0
100135fc:	d00e      	beq.n	1001361c <_dtoa_r+0x330>
100135fe:	2301      	movs	r3, #1
10013600:	421d      	tst	r5, r3
10013602:	d008      	beq.n	10013616 <_dtoa_r+0x32a>
10013604:	980e      	ldr	r0, [sp, #56]	; 0x38
10013606:	990f      	ldr	r1, [sp, #60]	; 0x3c
10013608:	18e4      	adds	r4, r4, r3
1001360a:	6832      	ldr	r2, [r6, #0]
1001360c:	6873      	ldr	r3, [r6, #4]
1001360e:	f002 ff75 	bl	100164fc <__aeabi_dmul>
10013612:	900e      	str	r0, [sp, #56]	; 0x38
10013614:	910f      	str	r1, [sp, #60]	; 0x3c
10013616:	106d      	asrs	r5, r5, #1
10013618:	3608      	adds	r6, #8
1001361a:	e7ee      	b.n	100135fa <_dtoa_r+0x30e>
1001361c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1001361e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10013620:	9806      	ldr	r0, [sp, #24]
10013622:	9907      	ldr	r1, [sp, #28]
10013624:	f002 fb46 	bl	10015cb4 <__aeabi_ddiv>
10013628:	e04c      	b.n	100136c4 <_dtoa_r+0x3d8>
1001362a:	9b03      	ldr	r3, [sp, #12]
1001362c:	2402      	movs	r4, #2
1001362e:	425d      	negs	r5, r3
10013630:	2d00      	cmp	r5, #0
10013632:	d049      	beq.n	100136c8 <_dtoa_r+0x3dc>
10013634:	9814      	ldr	r0, [sp, #80]	; 0x50
10013636:	9915      	ldr	r1, [sp, #84]	; 0x54
10013638:	230f      	movs	r3, #15
1001363a:	4a1f      	ldr	r2, [pc, #124]	; (100136b8 <_dtoa_r+0x3cc>)
1001363c:	402b      	ands	r3, r5
1001363e:	00db      	lsls	r3, r3, #3
10013640:	18d3      	adds	r3, r2, r3
10013642:	681a      	ldr	r2, [r3, #0]
10013644:	685b      	ldr	r3, [r3, #4]
10013646:	f002 ff59 	bl	100164fc <__aeabi_dmul>
1001364a:	2300      	movs	r3, #0
1001364c:	9006      	str	r0, [sp, #24]
1001364e:	9107      	str	r1, [sp, #28]
10013650:	4e1a      	ldr	r6, [pc, #104]	; (100136bc <_dtoa_r+0x3d0>)
10013652:	112d      	asrs	r5, r5, #4
10013654:	2d00      	cmp	r5, #0
10013656:	d033      	beq.n	100136c0 <_dtoa_r+0x3d4>
10013658:	2201      	movs	r2, #1
1001365a:	4215      	tst	r5, r2
1001365c:	d005      	beq.n	1001366a <_dtoa_r+0x37e>
1001365e:	18a4      	adds	r4, r4, r2
10013660:	6832      	ldr	r2, [r6, #0]
10013662:	6873      	ldr	r3, [r6, #4]
10013664:	f002 ff4a 	bl	100164fc <__aeabi_dmul>
10013668:	2301      	movs	r3, #1
1001366a:	106d      	asrs	r5, r5, #1
1001366c:	3608      	adds	r6, #8
1001366e:	e7f1      	b.n	10013654 <_dtoa_r+0x368>
10013670:	7ff00000 	.word	0x7ff00000
10013674:	0000270f 	.word	0x0000270f
10013678:	10018cc5 	.word	0x10018cc5
1001367c:	10018cbc 	.word	0x10018cbc
10013680:	10018c98 	.word	0x10018c98
10013684:	10018c99 	.word	0x10018c99
10013688:	3ff00000 	.word	0x3ff00000
1001368c:	fffffc01 	.word	0xfffffc01
10013690:	00000432 	.word	0x00000432
10013694:	00000412 	.word	0x00000412
10013698:	fe100000 	.word	0xfe100000
1001369c:	3ff80000 	.word	0x3ff80000
100136a0:	636f4361 	.word	0x636f4361
100136a4:	3fd287a7 	.word	0x3fd287a7
100136a8:	8b60c8b3 	.word	0x8b60c8b3
100136ac:	3fc68a28 	.word	0x3fc68a28
100136b0:	509f79fb 	.word	0x509f79fb
100136b4:	3fd34413 	.word	0x3fd34413
100136b8:	10018d38 	.word	0x10018d38
100136bc:	10018e00 	.word	0x10018e00
100136c0:	2b00      	cmp	r3, #0
100136c2:	d001      	beq.n	100136c8 <_dtoa_r+0x3dc>
100136c4:	9006      	str	r0, [sp, #24]
100136c6:	9107      	str	r1, [sp, #28]
100136c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
100136ca:	2b00      	cmp	r3, #0
100136cc:	d01d      	beq.n	1001370a <_dtoa_r+0x41e>
100136ce:	9d06      	ldr	r5, [sp, #24]
100136d0:	9e07      	ldr	r6, [sp, #28]
100136d2:	2200      	movs	r2, #0
100136d4:	4bc7      	ldr	r3, [pc, #796]	; (100139f4 <_dtoa_r+0x708>)
100136d6:	0028      	movs	r0, r5
100136d8:	0031      	movs	r1, r6
100136da:	f001 fc99 	bl	10015010 <__aeabi_dcmplt>
100136de:	2800      	cmp	r0, #0
100136e0:	d013      	beq.n	1001370a <_dtoa_r+0x41e>
100136e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100136e4:	2b00      	cmp	r3, #0
100136e6:	d010      	beq.n	1001370a <_dtoa_r+0x41e>
100136e8:	2f00      	cmp	r7, #0
100136ea:	dc00      	bgt.n	100136ee <_dtoa_r+0x402>
100136ec:	e0df      	b.n	100138ae <_dtoa_r+0x5c2>
100136ee:	9b03      	ldr	r3, [sp, #12]
100136f0:	0031      	movs	r1, r6
100136f2:	3b01      	subs	r3, #1
100136f4:	930e      	str	r3, [sp, #56]	; 0x38
100136f6:	2200      	movs	r2, #0
100136f8:	4bbf      	ldr	r3, [pc, #764]	; (100139f8 <_dtoa_r+0x70c>)
100136fa:	0028      	movs	r0, r5
100136fc:	f002 fefe 	bl	100164fc <__aeabi_dmul>
10013700:	3401      	adds	r4, #1
10013702:	9006      	str	r0, [sp, #24]
10013704:	9107      	str	r1, [sp, #28]
10013706:	003e      	movs	r6, r7
10013708:	e002      	b.n	10013710 <_dtoa_r+0x424>
1001370a:	9b03      	ldr	r3, [sp, #12]
1001370c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1001370e:	930e      	str	r3, [sp, #56]	; 0x38
10013710:	0020      	movs	r0, r4
10013712:	f003 fd17 	bl	10017144 <__aeabi_i2d>
10013716:	9a06      	ldr	r2, [sp, #24]
10013718:	9b07      	ldr	r3, [sp, #28]
1001371a:	f002 feef 	bl	100164fc <__aeabi_dmul>
1001371e:	2200      	movs	r2, #0
10013720:	4bb6      	ldr	r3, [pc, #728]	; (100139fc <_dtoa_r+0x710>)
10013722:	f001 ff9b 	bl	1001565c <__aeabi_dadd>
10013726:	4ab6      	ldr	r2, [pc, #728]	; (10013a00 <_dtoa_r+0x714>)
10013728:	9012      	str	r0, [sp, #72]	; 0x48
1001372a:	9113      	str	r1, [sp, #76]	; 0x4c
1001372c:	9c12      	ldr	r4, [sp, #72]	; 0x48
1001372e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
10013730:	4694      	mov	ip, r2
10013732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10013734:	4463      	add	r3, ip
10013736:	9318      	str	r3, [sp, #96]	; 0x60
10013738:	001d      	movs	r5, r3
1001373a:	2e00      	cmp	r6, #0
1001373c:	d11c      	bne.n	10013778 <_dtoa_r+0x48c>
1001373e:	9806      	ldr	r0, [sp, #24]
10013740:	9907      	ldr	r1, [sp, #28]
10013742:	2200      	movs	r2, #0
10013744:	4baf      	ldr	r3, [pc, #700]	; (10013a04 <_dtoa_r+0x718>)
10013746:	f003 f953 	bl	100169f0 <__aeabi_dsub>
1001374a:	0022      	movs	r2, r4
1001374c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1001374e:	9006      	str	r0, [sp, #24]
10013750:	9107      	str	r1, [sp, #28]
10013752:	f001 fc71 	bl	10015038 <__aeabi_dcmpgt>
10013756:	2800      	cmp	r0, #0
10013758:	d000      	beq.n	1001375c <_dtoa_r+0x470>
1001375a:	e254      	b.n	10013c06 <_dtoa_r+0x91a>
1001375c:	48aa      	ldr	r0, [pc, #680]	; (10013a08 <_dtoa_r+0x71c>)
1001375e:	9913      	ldr	r1, [sp, #76]	; 0x4c
10013760:	4684      	mov	ip, r0
10013762:	4461      	add	r1, ip
10013764:	000b      	movs	r3, r1
10013766:	9806      	ldr	r0, [sp, #24]
10013768:	9907      	ldr	r1, [sp, #28]
1001376a:	0022      	movs	r2, r4
1001376c:	f001 fc50 	bl	10015010 <__aeabi_dcmplt>
10013770:	2800      	cmp	r0, #0
10013772:	d000      	beq.n	10013776 <_dtoa_r+0x48a>
10013774:	e23d      	b.n	10013bf2 <_dtoa_r+0x906>
10013776:	e09a      	b.n	100138ae <_dtoa_r+0x5c2>
10013778:	9a10      	ldr	r2, [sp, #64]	; 0x40
1001377a:	1e73      	subs	r3, r6, #1
1001377c:	49a3      	ldr	r1, [pc, #652]	; (10013a0c <_dtoa_r+0x720>)
1001377e:	00db      	lsls	r3, r3, #3
10013780:	2a00      	cmp	r2, #0
10013782:	d049      	beq.n	10013818 <_dtoa_r+0x52c>
10013784:	18cb      	adds	r3, r1, r3
10013786:	681a      	ldr	r2, [r3, #0]
10013788:	685b      	ldr	r3, [r3, #4]
1001378a:	2000      	movs	r0, #0
1001378c:	49a0      	ldr	r1, [pc, #640]	; (10013a10 <_dtoa_r+0x724>)
1001378e:	f002 fa91 	bl	10015cb4 <__aeabi_ddiv>
10013792:	002b      	movs	r3, r5
10013794:	0022      	movs	r2, r4
10013796:	f003 f92b 	bl	100169f0 <__aeabi_dsub>
1001379a:	9012      	str	r0, [sp, #72]	; 0x48
1001379c:	9113      	str	r1, [sp, #76]	; 0x4c
1001379e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100137a0:	9806      	ldr	r0, [sp, #24]
100137a2:	9907      	ldr	r1, [sp, #28]
100137a4:	f003 fc98 	bl	100170d8 <__aeabi_d2iz>
100137a8:	0004      	movs	r4, r0
100137aa:	f003 fccb 	bl	10017144 <__aeabi_i2d>
100137ae:	0002      	movs	r2, r0
100137b0:	000b      	movs	r3, r1
100137b2:	9806      	ldr	r0, [sp, #24]
100137b4:	9907      	ldr	r1, [sp, #28]
100137b6:	f003 f91b 	bl	100169f0 <__aeabi_dsub>
100137ba:	3501      	adds	r5, #1
100137bc:	1e6b      	subs	r3, r5, #1
100137be:	3430      	adds	r4, #48	; 0x30
100137c0:	701c      	strb	r4, [r3, #0]
100137c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
100137c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100137c6:	9006      	str	r0, [sp, #24]
100137c8:	9107      	str	r1, [sp, #28]
100137ca:	f001 fc21 	bl	10015010 <__aeabi_dcmplt>
100137ce:	2800      	cmp	r0, #0
100137d0:	d000      	beq.n	100137d4 <_dtoa_r+0x4e8>
100137d2:	e32e      	b.n	10013e32 <_dtoa_r+0xb46>
100137d4:	9a06      	ldr	r2, [sp, #24]
100137d6:	9b07      	ldr	r3, [sp, #28]
100137d8:	2000      	movs	r0, #0
100137da:	4986      	ldr	r1, [pc, #536]	; (100139f4 <_dtoa_r+0x708>)
100137dc:	f003 f908 	bl	100169f0 <__aeabi_dsub>
100137e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100137e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100137e4:	f001 fc14 	bl	10015010 <__aeabi_dcmplt>
100137e8:	2800      	cmp	r0, #0
100137ea:	d000      	beq.n	100137ee <_dtoa_r+0x502>
100137ec:	e0c7      	b.n	1001397e <_dtoa_r+0x692>
100137ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100137f0:	1aeb      	subs	r3, r5, r3
100137f2:	42b3      	cmp	r3, r6
100137f4:	da5b      	bge.n	100138ae <_dtoa_r+0x5c2>
100137f6:	9812      	ldr	r0, [sp, #72]	; 0x48
100137f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
100137fa:	2200      	movs	r2, #0
100137fc:	4b7e      	ldr	r3, [pc, #504]	; (100139f8 <_dtoa_r+0x70c>)
100137fe:	f002 fe7d 	bl	100164fc <__aeabi_dmul>
10013802:	2200      	movs	r2, #0
10013804:	9012      	str	r0, [sp, #72]	; 0x48
10013806:	9113      	str	r1, [sp, #76]	; 0x4c
10013808:	9806      	ldr	r0, [sp, #24]
1001380a:	9907      	ldr	r1, [sp, #28]
1001380c:	4b7a      	ldr	r3, [pc, #488]	; (100139f8 <_dtoa_r+0x70c>)
1001380e:	f002 fe75 	bl	100164fc <__aeabi_dmul>
10013812:	9006      	str	r0, [sp, #24]
10013814:	9107      	str	r1, [sp, #28]
10013816:	e7c3      	b.n	100137a0 <_dtoa_r+0x4b4>
10013818:	18c9      	adds	r1, r1, r3
1001381a:	0022      	movs	r2, r4
1001381c:	6808      	ldr	r0, [r1, #0]
1001381e:	6849      	ldr	r1, [r1, #4]
10013820:	002b      	movs	r3, r5
10013822:	f002 fe6b 	bl	100164fc <__aeabi_dmul>
10013826:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10013828:	9012      	str	r0, [sp, #72]	; 0x48
1001382a:	9113      	str	r1, [sp, #76]	; 0x4c
1001382c:	19a5      	adds	r5, r4, r6
1001382e:	9806      	ldr	r0, [sp, #24]
10013830:	9907      	ldr	r1, [sp, #28]
10013832:	f003 fc51 	bl	100170d8 <__aeabi_d2iz>
10013836:	0006      	movs	r6, r0
10013838:	f003 fc84 	bl	10017144 <__aeabi_i2d>
1001383c:	0002      	movs	r2, r0
1001383e:	000b      	movs	r3, r1
10013840:	9806      	ldr	r0, [sp, #24]
10013842:	9907      	ldr	r1, [sp, #28]
10013844:	f003 f8d4 	bl	100169f0 <__aeabi_dsub>
10013848:	3630      	adds	r6, #48	; 0x30
1001384a:	7026      	strb	r6, [r4, #0]
1001384c:	3401      	adds	r4, #1
1001384e:	9006      	str	r0, [sp, #24]
10013850:	9107      	str	r1, [sp, #28]
10013852:	2200      	movs	r2, #0
10013854:	42a5      	cmp	r5, r4
10013856:	d122      	bne.n	1001389e <_dtoa_r+0x5b2>
10013858:	4b6d      	ldr	r3, [pc, #436]	; (10013a10 <_dtoa_r+0x724>)
1001385a:	9812      	ldr	r0, [sp, #72]	; 0x48
1001385c:	9913      	ldr	r1, [sp, #76]	; 0x4c
1001385e:	f001 fefd 	bl	1001565c <__aeabi_dadd>
10013862:	0002      	movs	r2, r0
10013864:	000b      	movs	r3, r1
10013866:	9806      	ldr	r0, [sp, #24]
10013868:	9907      	ldr	r1, [sp, #28]
1001386a:	f001 fbe5 	bl	10015038 <__aeabi_dcmpgt>
1001386e:	2800      	cmp	r0, #0
10013870:	d000      	beq.n	10013874 <_dtoa_r+0x588>
10013872:	e084      	b.n	1001397e <_dtoa_r+0x692>
10013874:	9a12      	ldr	r2, [sp, #72]	; 0x48
10013876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10013878:	2000      	movs	r0, #0
1001387a:	4965      	ldr	r1, [pc, #404]	; (10013a10 <_dtoa_r+0x724>)
1001387c:	f003 f8b8 	bl	100169f0 <__aeabi_dsub>
10013880:	0002      	movs	r2, r0
10013882:	000b      	movs	r3, r1
10013884:	9806      	ldr	r0, [sp, #24]
10013886:	9907      	ldr	r1, [sp, #28]
10013888:	f001 fbc2 	bl	10015010 <__aeabi_dcmplt>
1001388c:	2800      	cmp	r0, #0
1001388e:	d00e      	beq.n	100138ae <_dtoa_r+0x5c2>
10013890:	1e6b      	subs	r3, r5, #1
10013892:	781a      	ldrb	r2, [r3, #0]
10013894:	2a30      	cmp	r2, #48	; 0x30
10013896:	d000      	beq.n	1001389a <_dtoa_r+0x5ae>
10013898:	e2cb      	b.n	10013e32 <_dtoa_r+0xb46>
1001389a:	001d      	movs	r5, r3
1001389c:	e7f8      	b.n	10013890 <_dtoa_r+0x5a4>
1001389e:	9806      	ldr	r0, [sp, #24]
100138a0:	9907      	ldr	r1, [sp, #28]
100138a2:	4b55      	ldr	r3, [pc, #340]	; (100139f8 <_dtoa_r+0x70c>)
100138a4:	f002 fe2a 	bl	100164fc <__aeabi_dmul>
100138a8:	9006      	str	r0, [sp, #24]
100138aa:	9107      	str	r1, [sp, #28]
100138ac:	e7bf      	b.n	1001382e <_dtoa_r+0x542>
100138ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
100138b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
100138b2:	9306      	str	r3, [sp, #24]
100138b4:	9407      	str	r4, [sp, #28]
100138b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
100138b8:	2b00      	cmp	r3, #0
100138ba:	da00      	bge.n	100138be <_dtoa_r+0x5d2>
100138bc:	e081      	b.n	100139c2 <_dtoa_r+0x6d6>
100138be:	9a03      	ldr	r2, [sp, #12]
100138c0:	2a0e      	cmp	r2, #14
100138c2:	dd00      	ble.n	100138c6 <_dtoa_r+0x5da>
100138c4:	e07d      	b.n	100139c2 <_dtoa_r+0x6d6>
100138c6:	00d3      	lsls	r3, r2, #3
100138c8:	4a50      	ldr	r2, [pc, #320]	; (10013a0c <_dtoa_r+0x720>)
100138ca:	18d3      	adds	r3, r2, r3
100138cc:	685c      	ldr	r4, [r3, #4]
100138ce:	681b      	ldr	r3, [r3, #0]
100138d0:	9308      	str	r3, [sp, #32]
100138d2:	9409      	str	r4, [sp, #36]	; 0x24
100138d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100138d6:	2b00      	cmp	r3, #0
100138d8:	da15      	bge.n	10013906 <_dtoa_r+0x61a>
100138da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100138dc:	2b00      	cmp	r3, #0
100138de:	dc12      	bgt.n	10013906 <_dtoa_r+0x61a>
100138e0:	d000      	beq.n	100138e4 <_dtoa_r+0x5f8>
100138e2:	e188      	b.n	10013bf6 <_dtoa_r+0x90a>
100138e4:	9808      	ldr	r0, [sp, #32]
100138e6:	9909      	ldr	r1, [sp, #36]	; 0x24
100138e8:	2200      	movs	r2, #0
100138ea:	4b46      	ldr	r3, [pc, #280]	; (10013a04 <_dtoa_r+0x718>)
100138ec:	f002 fe06 	bl	100164fc <__aeabi_dmul>
100138f0:	9a06      	ldr	r2, [sp, #24]
100138f2:	9b07      	ldr	r3, [sp, #28]
100138f4:	f001 fbaa 	bl	1001504c <__aeabi_dcmpge>
100138f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100138fa:	9308      	str	r3, [sp, #32]
100138fc:	001e      	movs	r6, r3
100138fe:	2800      	cmp	r0, #0
10013900:	d000      	beq.n	10013904 <_dtoa_r+0x618>
10013902:	e17b      	b.n	10013bfc <_dtoa_r+0x910>
10013904:	e182      	b.n	10013c0c <_dtoa_r+0x920>
10013906:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10013908:	9e06      	ldr	r6, [sp, #24]
1001390a:	9f07      	ldr	r7, [sp, #28]
1001390c:	9a08      	ldr	r2, [sp, #32]
1001390e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013910:	0030      	movs	r0, r6
10013912:	0039      	movs	r1, r7
10013914:	f002 f9ce 	bl	10015cb4 <__aeabi_ddiv>
10013918:	f003 fbde 	bl	100170d8 <__aeabi_d2iz>
1001391c:	0004      	movs	r4, r0
1001391e:	f003 fc11 	bl	10017144 <__aeabi_i2d>
10013922:	9a08      	ldr	r2, [sp, #32]
10013924:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013926:	f002 fde9 	bl	100164fc <__aeabi_dmul>
1001392a:	0002      	movs	r2, r0
1001392c:	000b      	movs	r3, r1
1001392e:	0030      	movs	r0, r6
10013930:	0039      	movs	r1, r7
10013932:	f003 f85d 	bl	100169f0 <__aeabi_dsub>
10013936:	0022      	movs	r2, r4
10013938:	3501      	adds	r5, #1
1001393a:	1e6b      	subs	r3, r5, #1
1001393c:	3230      	adds	r2, #48	; 0x30
1001393e:	701a      	strb	r2, [r3, #0]
10013940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10013944:	1aeb      	subs	r3, r5, r3
10013946:	429a      	cmp	r2, r3
10013948:	d12e      	bne.n	100139a8 <_dtoa_r+0x6bc>
1001394a:	0002      	movs	r2, r0
1001394c:	000b      	movs	r3, r1
1001394e:	f001 fe85 	bl	1001565c <__aeabi_dadd>
10013952:	0006      	movs	r6, r0
10013954:	000f      	movs	r7, r1
10013956:	0002      	movs	r2, r0
10013958:	000b      	movs	r3, r1
1001395a:	9808      	ldr	r0, [sp, #32]
1001395c:	9909      	ldr	r1, [sp, #36]	; 0x24
1001395e:	f001 fb57 	bl	10015010 <__aeabi_dcmplt>
10013962:	2800      	cmp	r0, #0
10013964:	d10f      	bne.n	10013986 <_dtoa_r+0x69a>
10013966:	9808      	ldr	r0, [sp, #32]
10013968:	9909      	ldr	r1, [sp, #36]	; 0x24
1001396a:	0032      	movs	r2, r6
1001396c:	003b      	movs	r3, r7
1001396e:	f001 fb49 	bl	10015004 <__aeabi_dcmpeq>
10013972:	2800      	cmp	r0, #0
10013974:	d100      	bne.n	10013978 <_dtoa_r+0x68c>
10013976:	e25e      	b.n	10013e36 <_dtoa_r+0xb4a>
10013978:	07e3      	lsls	r3, r4, #31
1001397a:	d404      	bmi.n	10013986 <_dtoa_r+0x69a>
1001397c:	e25b      	b.n	10013e36 <_dtoa_r+0xb4a>
1001397e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013980:	9303      	str	r3, [sp, #12]
10013982:	e000      	b.n	10013986 <_dtoa_r+0x69a>
10013984:	001d      	movs	r5, r3
10013986:	1e6b      	subs	r3, r5, #1
10013988:	781a      	ldrb	r2, [r3, #0]
1001398a:	2a39      	cmp	r2, #57	; 0x39
1001398c:	d108      	bne.n	100139a0 <_dtoa_r+0x6b4>
1001398e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10013990:	429a      	cmp	r2, r3
10013992:	d1f7      	bne.n	10013984 <_dtoa_r+0x698>
10013994:	9a03      	ldr	r2, [sp, #12]
10013996:	990d      	ldr	r1, [sp, #52]	; 0x34
10013998:	3201      	adds	r2, #1
1001399a:	9203      	str	r2, [sp, #12]
1001399c:	2230      	movs	r2, #48	; 0x30
1001399e:	700a      	strb	r2, [r1, #0]
100139a0:	781a      	ldrb	r2, [r3, #0]
100139a2:	3201      	adds	r2, #1
100139a4:	701a      	strb	r2, [r3, #0]
100139a6:	e246      	b.n	10013e36 <_dtoa_r+0xb4a>
100139a8:	2200      	movs	r2, #0
100139aa:	4b13      	ldr	r3, [pc, #76]	; (100139f8 <_dtoa_r+0x70c>)
100139ac:	f002 fda6 	bl	100164fc <__aeabi_dmul>
100139b0:	2200      	movs	r2, #0
100139b2:	2300      	movs	r3, #0
100139b4:	0006      	movs	r6, r0
100139b6:	000f      	movs	r7, r1
100139b8:	f001 fb24 	bl	10015004 <__aeabi_dcmpeq>
100139bc:	2800      	cmp	r0, #0
100139be:	d0a5      	beq.n	1001390c <_dtoa_r+0x620>
100139c0:	e239      	b.n	10013e36 <_dtoa_r+0xb4a>
100139c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
100139c4:	2a00      	cmp	r2, #0
100139c6:	d044      	beq.n	10013a52 <_dtoa_r+0x766>
100139c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
100139ca:	2a01      	cmp	r2, #1
100139cc:	dc0b      	bgt.n	100139e6 <_dtoa_r+0x6fa>
100139ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
100139d0:	2a00      	cmp	r2, #0
100139d2:	d002      	beq.n	100139da <_dtoa_r+0x6ee>
100139d4:	4a0f      	ldr	r2, [pc, #60]	; (10013a14 <_dtoa_r+0x728>)
100139d6:	189b      	adds	r3, r3, r2
100139d8:	e002      	b.n	100139e0 <_dtoa_r+0x6f4>
100139da:	2336      	movs	r3, #54	; 0x36
100139dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
100139de:	1a9b      	subs	r3, r3, r2
100139e0:	9d08      	ldr	r5, [sp, #32]
100139e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100139e4:	e029      	b.n	10013a3a <_dtoa_r+0x74e>
100139e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100139e8:	1e5d      	subs	r5, r3, #1
100139ea:	9b08      	ldr	r3, [sp, #32]
100139ec:	42ab      	cmp	r3, r5
100139ee:	db13      	blt.n	10013a18 <_dtoa_r+0x72c>
100139f0:	1b5d      	subs	r5, r3, r5
100139f2:	e018      	b.n	10013a26 <_dtoa_r+0x73a>
100139f4:	3ff00000 	.word	0x3ff00000
100139f8:	40240000 	.word	0x40240000
100139fc:	401c0000 	.word	0x401c0000
10013a00:	fcc00000 	.word	0xfcc00000
10013a04:	40140000 	.word	0x40140000
10013a08:	7cc00000 	.word	0x7cc00000
10013a0c:	10018d38 	.word	0x10018d38
10013a10:	3fe00000 	.word	0x3fe00000
10013a14:	00000433 	.word	0x00000433
10013a18:	9b08      	ldr	r3, [sp, #32]
10013a1a:	9508      	str	r5, [sp, #32]
10013a1c:	1aea      	subs	r2, r5, r3
10013a1e:	2500      	movs	r5, #0
10013a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
10013a22:	189b      	adds	r3, r3, r2
10013a24:	9311      	str	r3, [sp, #68]	; 0x44
10013a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013a28:	2b00      	cmp	r3, #0
10013a2a:	da04      	bge.n	10013a36 <_dtoa_r+0x74a>
10013a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10013a30:	1a9c      	subs	r4, r3, r2
10013a32:	2300      	movs	r3, #0
10013a34:	e001      	b.n	10013a3a <_dtoa_r+0x74e>
10013a36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10013a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10013a3c:	2101      	movs	r1, #1
10013a3e:	18d2      	adds	r2, r2, r3
10013a40:	920b      	str	r2, [sp, #44]	; 0x2c
10013a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10013a44:	9804      	ldr	r0, [sp, #16]
10013a46:	18d3      	adds	r3, r2, r3
10013a48:	930c      	str	r3, [sp, #48]	; 0x30
10013a4a:	f000 fce8 	bl	1001441e <__i2b>
10013a4e:	0006      	movs	r6, r0
10013a50:	e002      	b.n	10013a58 <_dtoa_r+0x76c>
10013a52:	9d08      	ldr	r5, [sp, #32]
10013a54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10013a56:	9e10      	ldr	r6, [sp, #64]	; 0x40
10013a58:	2c00      	cmp	r4, #0
10013a5a:	d00e      	beq.n	10013a7a <_dtoa_r+0x78e>
10013a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013a5e:	2b00      	cmp	r3, #0
10013a60:	dd0b      	ble.n	10013a7a <_dtoa_r+0x78e>
10013a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10013a64:	1e23      	subs	r3, r4, #0
10013a66:	4293      	cmp	r3, r2
10013a68:	dd00      	ble.n	10013a6c <_dtoa_r+0x780>
10013a6a:	0013      	movs	r3, r2
10013a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10013a6e:	1ae4      	subs	r4, r4, r3
10013a70:	1ad2      	subs	r2, r2, r3
10013a72:	920b      	str	r2, [sp, #44]	; 0x2c
10013a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10013a76:	1ad3      	subs	r3, r2, r3
10013a78:	930c      	str	r3, [sp, #48]	; 0x30
10013a7a:	9b08      	ldr	r3, [sp, #32]
10013a7c:	2b00      	cmp	r3, #0
10013a7e:	dd20      	ble.n	10013ac2 <_dtoa_r+0x7d6>
10013a80:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013a82:	2b00      	cmp	r3, #0
10013a84:	d017      	beq.n	10013ab6 <_dtoa_r+0x7ca>
10013a86:	2d00      	cmp	r5, #0
10013a88:	d011      	beq.n	10013aae <_dtoa_r+0x7c2>
10013a8a:	0031      	movs	r1, r6
10013a8c:	002a      	movs	r2, r5
10013a8e:	9804      	ldr	r0, [sp, #16]
10013a90:	f000 fd58 	bl	10014544 <__pow5mult>
10013a94:	9a05      	ldr	r2, [sp, #20]
10013a96:	0001      	movs	r1, r0
10013a98:	0006      	movs	r6, r0
10013a9a:	9804      	ldr	r0, [sp, #16]
10013a9c:	f000 fcc8 	bl	10014430 <__multiply>
10013aa0:	9905      	ldr	r1, [sp, #20]
10013aa2:	900e      	str	r0, [sp, #56]	; 0x38
10013aa4:	9804      	ldr	r0, [sp, #16]
10013aa6:	f000 fc1a 	bl	100142de <_Bfree>
10013aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013aac:	9305      	str	r3, [sp, #20]
10013aae:	9b08      	ldr	r3, [sp, #32]
10013ab0:	1b5a      	subs	r2, r3, r5
10013ab2:	d006      	beq.n	10013ac2 <_dtoa_r+0x7d6>
10013ab4:	e000      	b.n	10013ab8 <_dtoa_r+0x7cc>
10013ab6:	9a08      	ldr	r2, [sp, #32]
10013ab8:	9905      	ldr	r1, [sp, #20]
10013aba:	9804      	ldr	r0, [sp, #16]
10013abc:	f000 fd42 	bl	10014544 <__pow5mult>
10013ac0:	9005      	str	r0, [sp, #20]
10013ac2:	2101      	movs	r1, #1
10013ac4:	9804      	ldr	r0, [sp, #16]
10013ac6:	f000 fcaa 	bl	1001441e <__i2b>
10013aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
10013acc:	9008      	str	r0, [sp, #32]
10013ace:	2b00      	cmp	r3, #0
10013ad0:	d100      	bne.n	10013ad4 <_dtoa_r+0x7e8>
10013ad2:	e1c0      	b.n	10013e56 <_dtoa_r+0xb6a>
10013ad4:	001a      	movs	r2, r3
10013ad6:	0001      	movs	r1, r0
10013ad8:	9804      	ldr	r0, [sp, #16]
10013ada:	f000 fd33 	bl	10014544 <__pow5mult>
10013ade:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013ae0:	9008      	str	r0, [sp, #32]
10013ae2:	2b01      	cmp	r3, #1
10013ae4:	dc17      	bgt.n	10013b16 <_dtoa_r+0x82a>
10013ae6:	2500      	movs	r5, #0
10013ae8:	9b06      	ldr	r3, [sp, #24]
10013aea:	42ab      	cmp	r3, r5
10013aec:	d10e      	bne.n	10013b0c <_dtoa_r+0x820>
10013aee:	9b07      	ldr	r3, [sp, #28]
10013af0:	031b      	lsls	r3, r3, #12
10013af2:	42ab      	cmp	r3, r5
10013af4:	d10a      	bne.n	10013b0c <_dtoa_r+0x820>
10013af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
10013af8:	9a07      	ldr	r2, [sp, #28]
10013afa:	4213      	tst	r3, r2
10013afc:	d006      	beq.n	10013b0c <_dtoa_r+0x820>
10013afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013b00:	3501      	adds	r5, #1
10013b02:	3301      	adds	r3, #1
10013b04:	930b      	str	r3, [sp, #44]	; 0x2c
10013b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013b08:	3301      	adds	r3, #1
10013b0a:	930c      	str	r3, [sp, #48]	; 0x30
10013b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
10013b0e:	2001      	movs	r0, #1
10013b10:	2b00      	cmp	r3, #0
10013b12:	d00d      	beq.n	10013b30 <_dtoa_r+0x844>
10013b14:	e000      	b.n	10013b18 <_dtoa_r+0x82c>
10013b16:	2500      	movs	r5, #0
10013b18:	9b08      	ldr	r3, [sp, #32]
10013b1a:	9a08      	ldr	r2, [sp, #32]
10013b1c:	691b      	ldr	r3, [r3, #16]
10013b1e:	930e      	str	r3, [sp, #56]	; 0x38
10013b20:	3303      	adds	r3, #3
10013b22:	009b      	lsls	r3, r3, #2
10013b24:	18d3      	adds	r3, r2, r3
10013b26:	6858      	ldr	r0, [r3, #4]
10013b28:	f000 fc2f 	bl	1001438a <__hi0bits>
10013b2c:	2320      	movs	r3, #32
10013b2e:	1a18      	subs	r0, r3, r0
10013b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013b32:	18c0      	adds	r0, r0, r3
10013b34:	231f      	movs	r3, #31
10013b36:	4018      	ands	r0, r3
10013b38:	d009      	beq.n	10013b4e <_dtoa_r+0x862>
10013b3a:	3301      	adds	r3, #1
10013b3c:	1a1b      	subs	r3, r3, r0
10013b3e:	2b04      	cmp	r3, #4
10013b40:	dd02      	ble.n	10013b48 <_dtoa_r+0x85c>
10013b42:	231c      	movs	r3, #28
10013b44:	1a18      	subs	r0, r3, r0
10013b46:	e003      	b.n	10013b50 <_dtoa_r+0x864>
10013b48:	2b04      	cmp	r3, #4
10013b4a:	d008      	beq.n	10013b5e <_dtoa_r+0x872>
10013b4c:	0018      	movs	r0, r3
10013b4e:	301c      	adds	r0, #28
10013b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013b52:	1824      	adds	r4, r4, r0
10013b54:	181b      	adds	r3, r3, r0
10013b56:	930b      	str	r3, [sp, #44]	; 0x2c
10013b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013b5a:	181b      	adds	r3, r3, r0
10013b5c:	930c      	str	r3, [sp, #48]	; 0x30
10013b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013b60:	2b00      	cmp	r3, #0
10013b62:	dd05      	ble.n	10013b70 <_dtoa_r+0x884>
10013b64:	001a      	movs	r2, r3
10013b66:	9905      	ldr	r1, [sp, #20]
10013b68:	9804      	ldr	r0, [sp, #16]
10013b6a:	f000 fd3f 	bl	100145ec <__lshift>
10013b6e:	9005      	str	r0, [sp, #20]
10013b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013b72:	2b00      	cmp	r3, #0
10013b74:	dd05      	ble.n	10013b82 <_dtoa_r+0x896>
10013b76:	001a      	movs	r2, r3
10013b78:	9908      	ldr	r1, [sp, #32]
10013b7a:	9804      	ldr	r0, [sp, #16]
10013b7c:	f000 fd36 	bl	100145ec <__lshift>
10013b80:	9008      	str	r0, [sp, #32]
10013b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
10013b84:	2b00      	cmp	r3, #0
10013b86:	d01d      	beq.n	10013bc4 <_dtoa_r+0x8d8>
10013b88:	9908      	ldr	r1, [sp, #32]
10013b8a:	9805      	ldr	r0, [sp, #20]
10013b8c:	f000 fd80 	bl	10014690 <__mcmp>
10013b90:	2800      	cmp	r0, #0
10013b92:	da17      	bge.n	10013bc4 <_dtoa_r+0x8d8>
10013b94:	9b03      	ldr	r3, [sp, #12]
10013b96:	220a      	movs	r2, #10
10013b98:	3b01      	subs	r3, #1
10013b9a:	9303      	str	r3, [sp, #12]
10013b9c:	9905      	ldr	r1, [sp, #20]
10013b9e:	2300      	movs	r3, #0
10013ba0:	9804      	ldr	r0, [sp, #16]
10013ba2:	f000 fbb5 	bl	10014310 <__multadd>
10013ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013ba8:	9005      	str	r0, [sp, #20]
10013baa:	2b00      	cmp	r3, #0
10013bac:	d100      	bne.n	10013bb0 <_dtoa_r+0x8c4>
10013bae:	e159      	b.n	10013e64 <_dtoa_r+0xb78>
10013bb0:	0031      	movs	r1, r6
10013bb2:	2300      	movs	r3, #0
10013bb4:	220a      	movs	r2, #10
10013bb6:	9804      	ldr	r0, [sp, #16]
10013bb8:	f000 fbaa 	bl	10014310 <__multadd>
10013bbc:	0006      	movs	r6, r0
10013bbe:	2f00      	cmp	r7, #0
10013bc0:	dc37      	bgt.n	10013c32 <_dtoa_r+0x946>
10013bc2:	e033      	b.n	10013c2c <_dtoa_r+0x940>
10013bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013bc6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
10013bc8:	2b00      	cmp	r3, #0
10013bca:	dc2a      	bgt.n	10013c22 <_dtoa_r+0x936>
10013bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013bce:	2b02      	cmp	r3, #2
10013bd0:	dd27      	ble.n	10013c22 <_dtoa_r+0x936>
10013bd2:	2f00      	cmp	r7, #0
10013bd4:	d112      	bne.n	10013bfc <_dtoa_r+0x910>
10013bd6:	9908      	ldr	r1, [sp, #32]
10013bd8:	003b      	movs	r3, r7
10013bda:	2205      	movs	r2, #5
10013bdc:	9804      	ldr	r0, [sp, #16]
10013bde:	f000 fb97 	bl	10014310 <__multadd>
10013be2:	9008      	str	r0, [sp, #32]
10013be4:	0001      	movs	r1, r0
10013be6:	9805      	ldr	r0, [sp, #20]
10013be8:	f000 fd52 	bl	10014690 <__mcmp>
10013bec:	2800      	cmp	r0, #0
10013bee:	dc0d      	bgt.n	10013c0c <_dtoa_r+0x920>
10013bf0:	e004      	b.n	10013bfc <_dtoa_r+0x910>
10013bf2:	9608      	str	r6, [sp, #32]
10013bf4:	e002      	b.n	10013bfc <_dtoa_r+0x910>
10013bf6:	2300      	movs	r3, #0
10013bf8:	001e      	movs	r6, r3
10013bfa:	9308      	str	r3, [sp, #32]
10013bfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10013bfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10013c00:	43db      	mvns	r3, r3
10013c02:	9303      	str	r3, [sp, #12]
10013c04:	e00a      	b.n	10013c1c <_dtoa_r+0x930>
10013c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013c08:	9608      	str	r6, [sp, #32]
10013c0a:	9303      	str	r3, [sp, #12]
10013c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10013c10:	1c5d      	adds	r5, r3, #1
10013c12:	2331      	movs	r3, #49	; 0x31
10013c14:	7013      	strb	r3, [r2, #0]
10013c16:	9b03      	ldr	r3, [sp, #12]
10013c18:	3301      	adds	r3, #1
10013c1a:	9303      	str	r3, [sp, #12]
10013c1c:	960a      	str	r6, [sp, #40]	; 0x28
10013c1e:	2600      	movs	r6, #0
10013c20:	e0f3      	b.n	10013e0a <_dtoa_r+0xb1e>
10013c22:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013c24:	2b00      	cmp	r3, #0
10013c26:	d104      	bne.n	10013c32 <_dtoa_r+0x946>
10013c28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10013c2a:	e0b5      	b.n	10013d98 <_dtoa_r+0xaac>
10013c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013c2e:	2b02      	cmp	r3, #2
10013c30:	dccf      	bgt.n	10013bd2 <_dtoa_r+0x8e6>
10013c32:	2c00      	cmp	r4, #0
10013c34:	dd05      	ble.n	10013c42 <_dtoa_r+0x956>
10013c36:	0031      	movs	r1, r6
10013c38:	0022      	movs	r2, r4
10013c3a:	9804      	ldr	r0, [sp, #16]
10013c3c:	f000 fcd6 	bl	100145ec <__lshift>
10013c40:	0006      	movs	r6, r0
10013c42:	960a      	str	r6, [sp, #40]	; 0x28
10013c44:	2d00      	cmp	r5, #0
10013c46:	d012      	beq.n	10013c6e <_dtoa_r+0x982>
10013c48:	6871      	ldr	r1, [r6, #4]
10013c4a:	9804      	ldr	r0, [sp, #16]
10013c4c:	f000 fb0f 	bl	1001426e <_Balloc>
10013c50:	0031      	movs	r1, r6
10013c52:	0004      	movs	r4, r0
10013c54:	6933      	ldr	r3, [r6, #16]
10013c56:	310c      	adds	r1, #12
10013c58:	1c9a      	adds	r2, r3, #2
10013c5a:	0092      	lsls	r2, r2, #2
10013c5c:	300c      	adds	r0, #12
10013c5e:	f7fe fb24 	bl	100122aa <memcpy>
10013c62:	2201      	movs	r2, #1
10013c64:	0021      	movs	r1, r4
10013c66:	9804      	ldr	r0, [sp, #16]
10013c68:	f000 fcc0 	bl	100145ec <__lshift>
10013c6c:	900a      	str	r0, [sp, #40]	; 0x28
10013c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013c70:	1e7d      	subs	r5, r7, #1
10013c72:	930b      	str	r3, [sp, #44]	; 0x2c
10013c74:	195b      	adds	r3, r3, r5
10013c76:	930e      	str	r3, [sp, #56]	; 0x38
10013c78:	9908      	ldr	r1, [sp, #32]
10013c7a:	9805      	ldr	r0, [sp, #20]
10013c7c:	f7ff fab0 	bl	100131e0 <quorem>
10013c80:	0031      	movs	r1, r6
10013c82:	9010      	str	r0, [sp, #64]	; 0x40
10013c84:	0004      	movs	r4, r0
10013c86:	9805      	ldr	r0, [sp, #20]
10013c88:	f000 fd02 	bl	10014690 <__mcmp>
10013c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10013c8e:	0005      	movs	r5, r0
10013c90:	9908      	ldr	r1, [sp, #32]
10013c92:	9804      	ldr	r0, [sp, #16]
10013c94:	f000 fd17 	bl	100146c6 <__mdiff>
10013c98:	2301      	movs	r3, #1
10013c9a:	930c      	str	r3, [sp, #48]	; 0x30
10013c9c:	68c3      	ldr	r3, [r0, #12]
10013c9e:	3430      	adds	r4, #48	; 0x30
10013ca0:	0007      	movs	r7, r0
10013ca2:	2b00      	cmp	r3, #0
10013ca4:	d104      	bne.n	10013cb0 <_dtoa_r+0x9c4>
10013ca6:	0001      	movs	r1, r0
10013ca8:	9805      	ldr	r0, [sp, #20]
10013caa:	f000 fcf1 	bl	10014690 <__mcmp>
10013cae:	900c      	str	r0, [sp, #48]	; 0x30
10013cb0:	0039      	movs	r1, r7
10013cb2:	9804      	ldr	r0, [sp, #16]
10013cb4:	f000 fb13 	bl	100142de <_Bfree>
10013cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013cba:	9a22      	ldr	r2, [sp, #136]	; 0x88
10013cbc:	4313      	orrs	r3, r2
10013cbe:	d108      	bne.n	10013cd2 <_dtoa_r+0x9e6>
10013cc0:	9a06      	ldr	r2, [sp, #24]
10013cc2:	3301      	adds	r3, #1
10013cc4:	4213      	tst	r3, r2
10013cc6:	d104      	bne.n	10013cd2 <_dtoa_r+0x9e6>
10013cc8:	2c39      	cmp	r4, #57	; 0x39
10013cca:	d02a      	beq.n	10013d22 <_dtoa_r+0xa36>
10013ccc:	2d00      	cmp	r5, #0
10013cce:	dc1c      	bgt.n	10013d0a <_dtoa_r+0xa1e>
10013cd0:	e01d      	b.n	10013d0e <_dtoa_r+0xa22>
10013cd2:	2d00      	cmp	r5, #0
10013cd4:	db06      	blt.n	10013ce4 <_dtoa_r+0x9f8>
10013cd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013cd8:	431d      	orrs	r5, r3
10013cda:	d11b      	bne.n	10013d14 <_dtoa_r+0xa28>
10013cdc:	2301      	movs	r3, #1
10013cde:	9a06      	ldr	r2, [sp, #24]
10013ce0:	4213      	tst	r3, r2
10013ce2:	d117      	bne.n	10013d14 <_dtoa_r+0xa28>
10013ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013ce6:	2b00      	cmp	r3, #0
10013ce8:	dd11      	ble.n	10013d0e <_dtoa_r+0xa22>
10013cea:	9905      	ldr	r1, [sp, #20]
10013cec:	2201      	movs	r2, #1
10013cee:	9804      	ldr	r0, [sp, #16]
10013cf0:	f000 fc7c 	bl	100145ec <__lshift>
10013cf4:	9908      	ldr	r1, [sp, #32]
10013cf6:	9005      	str	r0, [sp, #20]
10013cf8:	f000 fcca 	bl	10014690 <__mcmp>
10013cfc:	2800      	cmp	r0, #0
10013cfe:	dc02      	bgt.n	10013d06 <_dtoa_r+0xa1a>
10013d00:	d105      	bne.n	10013d0e <_dtoa_r+0xa22>
10013d02:	07e3      	lsls	r3, r4, #31
10013d04:	d503      	bpl.n	10013d0e <_dtoa_r+0xa22>
10013d06:	2c39      	cmp	r4, #57	; 0x39
10013d08:	d00b      	beq.n	10013d22 <_dtoa_r+0xa36>
10013d0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
10013d0c:	3431      	adds	r4, #49	; 0x31
10013d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013d10:	1c5d      	adds	r5, r3, #1
10013d12:	e00f      	b.n	10013d34 <_dtoa_r+0xa48>
10013d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013d16:	1c5f      	adds	r7, r3, #1
10013d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10013d1a:	2b00      	cmp	r3, #0
10013d1c:	dd0c      	ble.n	10013d38 <_dtoa_r+0xa4c>
10013d1e:	2c39      	cmp	r4, #57	; 0x39
10013d20:	d105      	bne.n	10013d2e <_dtoa_r+0xa42>
10013d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10013d26:	1c5d      	adds	r5, r3, #1
10013d28:	2339      	movs	r3, #57	; 0x39
10013d2a:	7013      	strb	r3, [r2, #0]
10013d2c:	e057      	b.n	10013dde <_dtoa_r+0xaf2>
10013d2e:	003d      	movs	r5, r7
10013d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013d32:	3401      	adds	r4, #1
10013d34:	701c      	strb	r4, [r3, #0]
10013d36:	e068      	b.n	10013e0a <_dtoa_r+0xb1e>
10013d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10013d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10013d3c:	003d      	movs	r5, r7
10013d3e:	701c      	strb	r4, [r3, #0]
10013d40:	4293      	cmp	r3, r2
10013d42:	d03c      	beq.n	10013dbe <_dtoa_r+0xad2>
10013d44:	2300      	movs	r3, #0
10013d46:	220a      	movs	r2, #10
10013d48:	9905      	ldr	r1, [sp, #20]
10013d4a:	9804      	ldr	r0, [sp, #16]
10013d4c:	f000 fae0 	bl	10014310 <__multadd>
10013d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013d52:	9005      	str	r0, [sp, #20]
10013d54:	429e      	cmp	r6, r3
10013d56:	d108      	bne.n	10013d6a <_dtoa_r+0xa7e>
10013d58:	0031      	movs	r1, r6
10013d5a:	2300      	movs	r3, #0
10013d5c:	220a      	movs	r2, #10
10013d5e:	9804      	ldr	r0, [sp, #16]
10013d60:	f000 fad6 	bl	10014310 <__multadd>
10013d64:	0006      	movs	r6, r0
10013d66:	900a      	str	r0, [sp, #40]	; 0x28
10013d68:	e00d      	b.n	10013d86 <_dtoa_r+0xa9a>
10013d6a:	0031      	movs	r1, r6
10013d6c:	2300      	movs	r3, #0
10013d6e:	220a      	movs	r2, #10
10013d70:	9804      	ldr	r0, [sp, #16]
10013d72:	f000 facd 	bl	10014310 <__multadd>
10013d76:	2300      	movs	r3, #0
10013d78:	0006      	movs	r6, r0
10013d7a:	220a      	movs	r2, #10
10013d7c:	990a      	ldr	r1, [sp, #40]	; 0x28
10013d7e:	9804      	ldr	r0, [sp, #16]
10013d80:	f000 fac6 	bl	10014310 <__multadd>
10013d84:	900a      	str	r0, [sp, #40]	; 0x28
10013d86:	970b      	str	r7, [sp, #44]	; 0x2c
10013d88:	e776      	b.n	10013c78 <_dtoa_r+0x98c>
10013d8a:	2300      	movs	r3, #0
10013d8c:	220a      	movs	r2, #10
10013d8e:	9905      	ldr	r1, [sp, #20]
10013d90:	9804      	ldr	r0, [sp, #16]
10013d92:	f000 fabd 	bl	10014310 <__multadd>
10013d96:	9005      	str	r0, [sp, #20]
10013d98:	9908      	ldr	r1, [sp, #32]
10013d9a:	9805      	ldr	r0, [sp, #20]
10013d9c:	f7ff fa20 	bl	100131e0 <quorem>
10013da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013da2:	3030      	adds	r0, #48	; 0x30
10013da4:	7028      	strb	r0, [r5, #0]
10013da6:	3501      	adds	r5, #1
10013da8:	0004      	movs	r4, r0
10013daa:	1aeb      	subs	r3, r5, r3
10013dac:	42bb      	cmp	r3, r7
10013dae:	dbec      	blt.n	10013d8a <_dtoa_r+0xa9e>
10013db0:	1e3d      	subs	r5, r7, #0
10013db2:	dc00      	bgt.n	10013db6 <_dtoa_r+0xaca>
10013db4:	2501      	movs	r5, #1
10013db6:	960a      	str	r6, [sp, #40]	; 0x28
10013db8:	2600      	movs	r6, #0
10013dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10013dbc:	195d      	adds	r5, r3, r5
10013dbe:	9905      	ldr	r1, [sp, #20]
10013dc0:	2201      	movs	r2, #1
10013dc2:	9804      	ldr	r0, [sp, #16]
10013dc4:	f000 fc12 	bl	100145ec <__lshift>
10013dc8:	9908      	ldr	r1, [sp, #32]
10013dca:	9005      	str	r0, [sp, #20]
10013dcc:	f000 fc60 	bl	10014690 <__mcmp>
10013dd0:	2800      	cmp	r0, #0
10013dd2:	dc04      	bgt.n	10013dde <_dtoa_r+0xaf2>
10013dd4:	d113      	bne.n	10013dfe <_dtoa_r+0xb12>
10013dd6:	07e3      	lsls	r3, r4, #31
10013dd8:	d401      	bmi.n	10013dde <_dtoa_r+0xaf2>
10013dda:	e010      	b.n	10013dfe <_dtoa_r+0xb12>
10013ddc:	001d      	movs	r5, r3
10013dde:	1e6b      	subs	r3, r5, #1
10013de0:	781a      	ldrb	r2, [r3, #0]
10013de2:	2a39      	cmp	r2, #57	; 0x39
10013de4:	d108      	bne.n	10013df8 <_dtoa_r+0xb0c>
10013de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10013de8:	429a      	cmp	r2, r3
10013dea:	d1f7      	bne.n	10013ddc <_dtoa_r+0xaf0>
10013dec:	9b03      	ldr	r3, [sp, #12]
10013dee:	3301      	adds	r3, #1
10013df0:	9303      	str	r3, [sp, #12]
10013df2:	2331      	movs	r3, #49	; 0x31
10013df4:	7013      	strb	r3, [r2, #0]
10013df6:	e008      	b.n	10013e0a <_dtoa_r+0xb1e>
10013df8:	3201      	adds	r2, #1
10013dfa:	701a      	strb	r2, [r3, #0]
10013dfc:	e005      	b.n	10013e0a <_dtoa_r+0xb1e>
10013dfe:	1e6b      	subs	r3, r5, #1
10013e00:	781a      	ldrb	r2, [r3, #0]
10013e02:	2a30      	cmp	r2, #48	; 0x30
10013e04:	d101      	bne.n	10013e0a <_dtoa_r+0xb1e>
10013e06:	001d      	movs	r5, r3
10013e08:	e7f9      	b.n	10013dfe <_dtoa_r+0xb12>
10013e0a:	9908      	ldr	r1, [sp, #32]
10013e0c:	9804      	ldr	r0, [sp, #16]
10013e0e:	f000 fa66 	bl	100142de <_Bfree>
10013e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013e14:	2b00      	cmp	r3, #0
10013e16:	d00e      	beq.n	10013e36 <_dtoa_r+0xb4a>
10013e18:	2e00      	cmp	r6, #0
10013e1a:	d005      	beq.n	10013e28 <_dtoa_r+0xb3c>
10013e1c:	429e      	cmp	r6, r3
10013e1e:	d003      	beq.n	10013e28 <_dtoa_r+0xb3c>
10013e20:	0031      	movs	r1, r6
10013e22:	9804      	ldr	r0, [sp, #16]
10013e24:	f000 fa5b 	bl	100142de <_Bfree>
10013e28:	990a      	ldr	r1, [sp, #40]	; 0x28
10013e2a:	9804      	ldr	r0, [sp, #16]
10013e2c:	f000 fa57 	bl	100142de <_Bfree>
10013e30:	e001      	b.n	10013e36 <_dtoa_r+0xb4a>
10013e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013e34:	9303      	str	r3, [sp, #12]
10013e36:	9804      	ldr	r0, [sp, #16]
10013e38:	9905      	ldr	r1, [sp, #20]
10013e3a:	f000 fa50 	bl	100142de <_Bfree>
10013e3e:	2300      	movs	r3, #0
10013e40:	702b      	strb	r3, [r5, #0]
10013e42:	9b03      	ldr	r3, [sp, #12]
10013e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
10013e46:	3301      	adds	r3, #1
10013e48:	6013      	str	r3, [r2, #0]
10013e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
10013e4c:	980d      	ldr	r0, [sp, #52]	; 0x34
10013e4e:	2b00      	cmp	r3, #0
10013e50:	d010      	beq.n	10013e74 <_dtoa_r+0xb88>
10013e52:	601d      	str	r5, [r3, #0]
10013e54:	e00e      	b.n	10013e74 <_dtoa_r+0xb88>
10013e56:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013e58:	2b01      	cmp	r3, #1
10013e5a:	dc00      	bgt.n	10013e5e <_dtoa_r+0xb72>
10013e5c:	e643      	b.n	10013ae6 <_dtoa_r+0x7fa>
10013e5e:	9d11      	ldr	r5, [sp, #68]	; 0x44
10013e60:	2001      	movs	r0, #1
10013e62:	e665      	b.n	10013b30 <_dtoa_r+0x844>
10013e64:	2f00      	cmp	r7, #0
10013e66:	dd00      	ble.n	10013e6a <_dtoa_r+0xb7e>
10013e68:	e6de      	b.n	10013c28 <_dtoa_r+0x93c>
10013e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
10013e6c:	2b02      	cmp	r3, #2
10013e6e:	dc00      	bgt.n	10013e72 <_dtoa_r+0xb86>
10013e70:	e6da      	b.n	10013c28 <_dtoa_r+0x93c>
10013e72:	e6ae      	b.n	10013bd2 <_dtoa_r+0x8e6>
10013e74:	b01d      	add	sp, #116	; 0x74
10013e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

10013e78 <__sflush_r>:
10013e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10013e7a:	898a      	ldrh	r2, [r1, #12]
10013e7c:	0005      	movs	r5, r0
10013e7e:	000c      	movs	r4, r1
10013e80:	0713      	lsls	r3, r2, #28
10013e82:	d45a      	bmi.n	10013f3a <__sflush_r+0xc2>
10013e84:	684b      	ldr	r3, [r1, #4]
10013e86:	2b00      	cmp	r3, #0
10013e88:	dc02      	bgt.n	10013e90 <__sflush_r+0x18>
10013e8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10013e8c:	2b00      	cmp	r3, #0
10013e8e:	dd19      	ble.n	10013ec4 <__sflush_r+0x4c>
10013e90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10013e92:	2f00      	cmp	r7, #0
10013e94:	d016      	beq.n	10013ec4 <__sflush_r+0x4c>
10013e96:	2300      	movs	r3, #0
10013e98:	682e      	ldr	r6, [r5, #0]
10013e9a:	602b      	str	r3, [r5, #0]
10013e9c:	2380      	movs	r3, #128	; 0x80
10013e9e:	015b      	lsls	r3, r3, #5
10013ea0:	401a      	ands	r2, r3
10013ea2:	d001      	beq.n	10013ea8 <__sflush_r+0x30>
10013ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
10013ea6:	e014      	b.n	10013ed2 <__sflush_r+0x5a>
10013ea8:	2301      	movs	r3, #1
10013eaa:	6a21      	ldr	r1, [r4, #32]
10013eac:	0028      	movs	r0, r5
10013eae:	47b8      	blx	r7
10013eb0:	1c43      	adds	r3, r0, #1
10013eb2:	d10e      	bne.n	10013ed2 <__sflush_r+0x5a>
10013eb4:	682b      	ldr	r3, [r5, #0]
10013eb6:	2b00      	cmp	r3, #0
10013eb8:	d00b      	beq.n	10013ed2 <__sflush_r+0x5a>
10013eba:	2b1d      	cmp	r3, #29
10013ebc:	d001      	beq.n	10013ec2 <__sflush_r+0x4a>
10013ebe:	2b16      	cmp	r3, #22
10013ec0:	d102      	bne.n	10013ec8 <__sflush_r+0x50>
10013ec2:	602e      	str	r6, [r5, #0]
10013ec4:	2000      	movs	r0, #0
10013ec6:	e05a      	b.n	10013f7e <__sflush_r+0x106>
10013ec8:	2240      	movs	r2, #64	; 0x40
10013eca:	89a3      	ldrh	r3, [r4, #12]
10013ecc:	4313      	orrs	r3, r2
10013ece:	81a3      	strh	r3, [r4, #12]
10013ed0:	e055      	b.n	10013f7e <__sflush_r+0x106>
10013ed2:	89a3      	ldrh	r3, [r4, #12]
10013ed4:	075b      	lsls	r3, r3, #29
10013ed6:	d506      	bpl.n	10013ee6 <__sflush_r+0x6e>
10013ed8:	6863      	ldr	r3, [r4, #4]
10013eda:	1ac0      	subs	r0, r0, r3
10013edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
10013ede:	2b00      	cmp	r3, #0
10013ee0:	d001      	beq.n	10013ee6 <__sflush_r+0x6e>
10013ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
10013ee4:	1ac0      	subs	r0, r0, r3
10013ee6:	2300      	movs	r3, #0
10013ee8:	0002      	movs	r2, r0
10013eea:	6a21      	ldr	r1, [r4, #32]
10013eec:	0028      	movs	r0, r5
10013eee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10013ef0:	47b8      	blx	r7
10013ef2:	89a3      	ldrh	r3, [r4, #12]
10013ef4:	1c42      	adds	r2, r0, #1
10013ef6:	d106      	bne.n	10013f06 <__sflush_r+0x8e>
10013ef8:	6829      	ldr	r1, [r5, #0]
10013efa:	291d      	cmp	r1, #29
10013efc:	d83a      	bhi.n	10013f74 <__sflush_r+0xfc>
10013efe:	4a20      	ldr	r2, [pc, #128]	; (10013f80 <__sflush_r+0x108>)
10013f00:	40ca      	lsrs	r2, r1
10013f02:	07d2      	lsls	r2, r2, #31
10013f04:	d536      	bpl.n	10013f74 <__sflush_r+0xfc>
10013f06:	2200      	movs	r2, #0
10013f08:	6062      	str	r2, [r4, #4]
10013f0a:	6922      	ldr	r2, [r4, #16]
10013f0c:	6022      	str	r2, [r4, #0]
10013f0e:	04db      	lsls	r3, r3, #19
10013f10:	d505      	bpl.n	10013f1e <__sflush_r+0xa6>
10013f12:	1c43      	adds	r3, r0, #1
10013f14:	d102      	bne.n	10013f1c <__sflush_r+0xa4>
10013f16:	682b      	ldr	r3, [r5, #0]
10013f18:	2b00      	cmp	r3, #0
10013f1a:	d100      	bne.n	10013f1e <__sflush_r+0xa6>
10013f1c:	6560      	str	r0, [r4, #84]	; 0x54
10013f1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10013f20:	602e      	str	r6, [r5, #0]
10013f22:	2900      	cmp	r1, #0
10013f24:	d0ce      	beq.n	10013ec4 <__sflush_r+0x4c>
10013f26:	0023      	movs	r3, r4
10013f28:	3344      	adds	r3, #68	; 0x44
10013f2a:	4299      	cmp	r1, r3
10013f2c:	d002      	beq.n	10013f34 <__sflush_r+0xbc>
10013f2e:	0028      	movs	r0, r5
10013f30:	f7fe f9cc 	bl	100122cc <_free_r>
10013f34:	2000      	movs	r0, #0
10013f36:	6360      	str	r0, [r4, #52]	; 0x34
10013f38:	e021      	b.n	10013f7e <__sflush_r+0x106>
10013f3a:	690f      	ldr	r7, [r1, #16]
10013f3c:	2f00      	cmp	r7, #0
10013f3e:	d0c1      	beq.n	10013ec4 <__sflush_r+0x4c>
10013f40:	680b      	ldr	r3, [r1, #0]
10013f42:	600f      	str	r7, [r1, #0]
10013f44:	1bdb      	subs	r3, r3, r7
10013f46:	9301      	str	r3, [sp, #4]
10013f48:	2300      	movs	r3, #0
10013f4a:	0792      	lsls	r2, r2, #30
10013f4c:	d100      	bne.n	10013f50 <__sflush_r+0xd8>
10013f4e:	694b      	ldr	r3, [r1, #20]
10013f50:	60a3      	str	r3, [r4, #8]
10013f52:	e003      	b.n	10013f5c <__sflush_r+0xe4>
10013f54:	9b01      	ldr	r3, [sp, #4]
10013f56:	183f      	adds	r7, r7, r0
10013f58:	1a1b      	subs	r3, r3, r0
10013f5a:	9301      	str	r3, [sp, #4]
10013f5c:	9b01      	ldr	r3, [sp, #4]
10013f5e:	2b00      	cmp	r3, #0
10013f60:	ddb0      	ble.n	10013ec4 <__sflush_r+0x4c>
10013f62:	9b01      	ldr	r3, [sp, #4]
10013f64:	003a      	movs	r2, r7
10013f66:	6a21      	ldr	r1, [r4, #32]
10013f68:	0028      	movs	r0, r5
10013f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10013f6c:	47b0      	blx	r6
10013f6e:	2800      	cmp	r0, #0
10013f70:	dcf0      	bgt.n	10013f54 <__sflush_r+0xdc>
10013f72:	89a3      	ldrh	r3, [r4, #12]
10013f74:	2240      	movs	r2, #64	; 0x40
10013f76:	2001      	movs	r0, #1
10013f78:	4313      	orrs	r3, r2
10013f7a:	81a3      	strh	r3, [r4, #12]
10013f7c:	4240      	negs	r0, r0
10013f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10013f80:	20400001 	.word	0x20400001

10013f84 <_fflush_r>:
10013f84:	690b      	ldr	r3, [r1, #16]
10013f86:	b570      	push	{r4, r5, r6, lr}
10013f88:	0005      	movs	r5, r0
10013f8a:	000c      	movs	r4, r1
10013f8c:	2b00      	cmp	r3, #0
10013f8e:	d101      	bne.n	10013f94 <_fflush_r+0x10>
10013f90:	2000      	movs	r0, #0
10013f92:	e01c      	b.n	10013fce <_fflush_r+0x4a>
10013f94:	2800      	cmp	r0, #0
10013f96:	d004      	beq.n	10013fa2 <_fflush_r+0x1e>
10013f98:	6983      	ldr	r3, [r0, #24]
10013f9a:	2b00      	cmp	r3, #0
10013f9c:	d101      	bne.n	10013fa2 <_fflush_r+0x1e>
10013f9e:	f000 f85f 	bl	10014060 <__sinit>
10013fa2:	4b0b      	ldr	r3, [pc, #44]	; (10013fd0 <_fflush_r+0x4c>)
10013fa4:	429c      	cmp	r4, r3
10013fa6:	d101      	bne.n	10013fac <_fflush_r+0x28>
10013fa8:	686c      	ldr	r4, [r5, #4]
10013faa:	e008      	b.n	10013fbe <_fflush_r+0x3a>
10013fac:	4b09      	ldr	r3, [pc, #36]	; (10013fd4 <_fflush_r+0x50>)
10013fae:	429c      	cmp	r4, r3
10013fb0:	d101      	bne.n	10013fb6 <_fflush_r+0x32>
10013fb2:	68ac      	ldr	r4, [r5, #8]
10013fb4:	e003      	b.n	10013fbe <_fflush_r+0x3a>
10013fb6:	4b08      	ldr	r3, [pc, #32]	; (10013fd8 <_fflush_r+0x54>)
10013fb8:	429c      	cmp	r4, r3
10013fba:	d100      	bne.n	10013fbe <_fflush_r+0x3a>
10013fbc:	68ec      	ldr	r4, [r5, #12]
10013fbe:	220c      	movs	r2, #12
10013fc0:	5ea3      	ldrsh	r3, [r4, r2]
10013fc2:	2b00      	cmp	r3, #0
10013fc4:	d0e4      	beq.n	10013f90 <_fflush_r+0xc>
10013fc6:	0021      	movs	r1, r4
10013fc8:	0028      	movs	r0, r5
10013fca:	f7ff ff55 	bl	10013e78 <__sflush_r>
10013fce:	bd70      	pop	{r4, r5, r6, pc}
10013fd0:	10018ccc 	.word	0x10018ccc
10013fd4:	10018cec 	.word	0x10018cec
10013fd8:	10018d0c 	.word	0x10018d0c

10013fdc <_cleanup_r>:
10013fdc:	b510      	push	{r4, lr}
10013fde:	4902      	ldr	r1, [pc, #8]	; (10013fe8 <_cleanup_r+0xc>)
10013fe0:	f000 f8b0 	bl	10014144 <_fwalk_reent>
10013fe4:	bd10      	pop	{r4, pc}
10013fe6:	46c0      	nop			; (mov r8, r8)
10013fe8:	10013f85 	.word	0x10013f85

10013fec <std.isra.0>:
10013fec:	2300      	movs	r3, #0
10013fee:	b510      	push	{r4, lr}
10013ff0:	0004      	movs	r4, r0
10013ff2:	6003      	str	r3, [r0, #0]
10013ff4:	6043      	str	r3, [r0, #4]
10013ff6:	6083      	str	r3, [r0, #8]
10013ff8:	8181      	strh	r1, [r0, #12]
10013ffa:	6643      	str	r3, [r0, #100]	; 0x64
10013ffc:	81c2      	strh	r2, [r0, #14]
10013ffe:	6103      	str	r3, [r0, #16]
10014000:	6143      	str	r3, [r0, #20]
10014002:	6183      	str	r3, [r0, #24]
10014004:	0019      	movs	r1, r3
10014006:	2208      	movs	r2, #8
10014008:	305c      	adds	r0, #92	; 0x5c
1001400a:	f7fe f957 	bl	100122bc <memset>
1001400e:	4b05      	ldr	r3, [pc, #20]	; (10014024 <std.isra.0+0x38>)
10014010:	6224      	str	r4, [r4, #32]
10014012:	6263      	str	r3, [r4, #36]	; 0x24
10014014:	4b04      	ldr	r3, [pc, #16]	; (10014028 <std.isra.0+0x3c>)
10014016:	62a3      	str	r3, [r4, #40]	; 0x28
10014018:	4b04      	ldr	r3, [pc, #16]	; (1001402c <std.isra.0+0x40>)
1001401a:	62e3      	str	r3, [r4, #44]	; 0x2c
1001401c:	4b04      	ldr	r3, [pc, #16]	; (10014030 <std.isra.0+0x44>)
1001401e:	6323      	str	r3, [r4, #48]	; 0x30
10014020:	bd10      	pop	{r4, pc}
10014022:	46c0      	nop			; (mov r8, r8)
10014024:	10014b55 	.word	0x10014b55
10014028:	10014b7d 	.word	0x10014b7d
1001402c:	10014bb5 	.word	0x10014bb5
10014030:	10014be1 	.word	0x10014be1

10014034 <__sfmoreglue>:
10014034:	b570      	push	{r4, r5, r6, lr}
10014036:	2568      	movs	r5, #104	; 0x68
10014038:	1e4b      	subs	r3, r1, #1
1001403a:	435d      	muls	r5, r3
1001403c:	000e      	movs	r6, r1
1001403e:	0029      	movs	r1, r5
10014040:	3174      	adds	r1, #116	; 0x74
10014042:	f7fe f989 	bl	10012358 <_malloc_r>
10014046:	1e04      	subs	r4, r0, #0
10014048:	d008      	beq.n	1001405c <__sfmoreglue+0x28>
1001404a:	2100      	movs	r1, #0
1001404c:	002a      	movs	r2, r5
1001404e:	6001      	str	r1, [r0, #0]
10014050:	6046      	str	r6, [r0, #4]
10014052:	300c      	adds	r0, #12
10014054:	60a0      	str	r0, [r4, #8]
10014056:	3268      	adds	r2, #104	; 0x68
10014058:	f7fe f930 	bl	100122bc <memset>
1001405c:	0020      	movs	r0, r4
1001405e:	bd70      	pop	{r4, r5, r6, pc}

10014060 <__sinit>:
10014060:	6983      	ldr	r3, [r0, #24]
10014062:	b513      	push	{r0, r1, r4, lr}
10014064:	0004      	movs	r4, r0
10014066:	2b00      	cmp	r3, #0
10014068:	d128      	bne.n	100140bc <__sinit+0x5c>
1001406a:	6483      	str	r3, [r0, #72]	; 0x48
1001406c:	64c3      	str	r3, [r0, #76]	; 0x4c
1001406e:	6503      	str	r3, [r0, #80]	; 0x50
10014070:	4b13      	ldr	r3, [pc, #76]	; (100140c0 <__sinit+0x60>)
10014072:	4a14      	ldr	r2, [pc, #80]	; (100140c4 <__sinit+0x64>)
10014074:	681b      	ldr	r3, [r3, #0]
10014076:	6282      	str	r2, [r0, #40]	; 0x28
10014078:	9301      	str	r3, [sp, #4]
1001407a:	4298      	cmp	r0, r3
1001407c:	d101      	bne.n	10014082 <__sinit+0x22>
1001407e:	2301      	movs	r3, #1
10014080:	6183      	str	r3, [r0, #24]
10014082:	0020      	movs	r0, r4
10014084:	f000 f820 	bl	100140c8 <__sfp>
10014088:	6060      	str	r0, [r4, #4]
1001408a:	0020      	movs	r0, r4
1001408c:	f000 f81c 	bl	100140c8 <__sfp>
10014090:	60a0      	str	r0, [r4, #8]
10014092:	0020      	movs	r0, r4
10014094:	f000 f818 	bl	100140c8 <__sfp>
10014098:	2200      	movs	r2, #0
1001409a:	60e0      	str	r0, [r4, #12]
1001409c:	2104      	movs	r1, #4
1001409e:	6860      	ldr	r0, [r4, #4]
100140a0:	f7ff ffa4 	bl	10013fec <std.isra.0>
100140a4:	2201      	movs	r2, #1
100140a6:	2109      	movs	r1, #9
100140a8:	68a0      	ldr	r0, [r4, #8]
100140aa:	f7ff ff9f 	bl	10013fec <std.isra.0>
100140ae:	2202      	movs	r2, #2
100140b0:	2112      	movs	r1, #18
100140b2:	68e0      	ldr	r0, [r4, #12]
100140b4:	f7ff ff9a 	bl	10013fec <std.isra.0>
100140b8:	2301      	movs	r3, #1
100140ba:	61a3      	str	r3, [r4, #24]
100140bc:	bd13      	pop	{r0, r1, r4, pc}
100140be:	46c0      	nop			; (mov r8, r8)
100140c0:	10018c84 	.word	0x10018c84
100140c4:	10013fdd 	.word	0x10013fdd

100140c8 <__sfp>:
100140c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100140ca:	4b1d      	ldr	r3, [pc, #116]	; (10014140 <__sfp+0x78>)
100140cc:	0006      	movs	r6, r0
100140ce:	681d      	ldr	r5, [r3, #0]
100140d0:	69ab      	ldr	r3, [r5, #24]
100140d2:	2b00      	cmp	r3, #0
100140d4:	d102      	bne.n	100140dc <__sfp+0x14>
100140d6:	0028      	movs	r0, r5
100140d8:	f7ff ffc2 	bl	10014060 <__sinit>
100140dc:	3548      	adds	r5, #72	; 0x48
100140de:	68ac      	ldr	r4, [r5, #8]
100140e0:	686b      	ldr	r3, [r5, #4]
100140e2:	3b01      	subs	r3, #1
100140e4:	d405      	bmi.n	100140f2 <__sfp+0x2a>
100140e6:	220c      	movs	r2, #12
100140e8:	5ea7      	ldrsh	r7, [r4, r2]
100140ea:	2f00      	cmp	r7, #0
100140ec:	d010      	beq.n	10014110 <__sfp+0x48>
100140ee:	3468      	adds	r4, #104	; 0x68
100140f0:	e7f7      	b.n	100140e2 <__sfp+0x1a>
100140f2:	682b      	ldr	r3, [r5, #0]
100140f4:	2b00      	cmp	r3, #0
100140f6:	d001      	beq.n	100140fc <__sfp+0x34>
100140f8:	682d      	ldr	r5, [r5, #0]
100140fa:	e7f0      	b.n	100140de <__sfp+0x16>
100140fc:	2104      	movs	r1, #4
100140fe:	0030      	movs	r0, r6
10014100:	f7ff ff98 	bl	10014034 <__sfmoreglue>
10014104:	6028      	str	r0, [r5, #0]
10014106:	2800      	cmp	r0, #0
10014108:	d1f6      	bne.n	100140f8 <__sfp+0x30>
1001410a:	230c      	movs	r3, #12
1001410c:	6033      	str	r3, [r6, #0]
1001410e:	e016      	b.n	1001413e <__sfp+0x76>
10014110:	2301      	movs	r3, #1
10014112:	0020      	movs	r0, r4
10014114:	425b      	negs	r3, r3
10014116:	81e3      	strh	r3, [r4, #14]
10014118:	3302      	adds	r3, #2
1001411a:	81a3      	strh	r3, [r4, #12]
1001411c:	6667      	str	r7, [r4, #100]	; 0x64
1001411e:	6027      	str	r7, [r4, #0]
10014120:	60a7      	str	r7, [r4, #8]
10014122:	6067      	str	r7, [r4, #4]
10014124:	6127      	str	r7, [r4, #16]
10014126:	6167      	str	r7, [r4, #20]
10014128:	61a7      	str	r7, [r4, #24]
1001412a:	305c      	adds	r0, #92	; 0x5c
1001412c:	2208      	movs	r2, #8
1001412e:	0039      	movs	r1, r7
10014130:	f7fe f8c4 	bl	100122bc <memset>
10014134:	0020      	movs	r0, r4
10014136:	6367      	str	r7, [r4, #52]	; 0x34
10014138:	63a7      	str	r7, [r4, #56]	; 0x38
1001413a:	64a7      	str	r7, [r4, #72]	; 0x48
1001413c:	64e7      	str	r7, [r4, #76]	; 0x4c
1001413e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014140:	10018c84 	.word	0x10018c84

10014144 <_fwalk_reent>:
10014144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014146:	0004      	movs	r4, r0
10014148:	0007      	movs	r7, r0
1001414a:	2600      	movs	r6, #0
1001414c:	9101      	str	r1, [sp, #4]
1001414e:	3448      	adds	r4, #72	; 0x48
10014150:	2c00      	cmp	r4, #0
10014152:	d016      	beq.n	10014182 <_fwalk_reent+0x3e>
10014154:	6863      	ldr	r3, [r4, #4]
10014156:	68a5      	ldr	r5, [r4, #8]
10014158:	9300      	str	r3, [sp, #0]
1001415a:	9b00      	ldr	r3, [sp, #0]
1001415c:	3b01      	subs	r3, #1
1001415e:	9300      	str	r3, [sp, #0]
10014160:	d40d      	bmi.n	1001417e <_fwalk_reent+0x3a>
10014162:	89ab      	ldrh	r3, [r5, #12]
10014164:	2b01      	cmp	r3, #1
10014166:	d908      	bls.n	1001417a <_fwalk_reent+0x36>
10014168:	220e      	movs	r2, #14
1001416a:	5eab      	ldrsh	r3, [r5, r2]
1001416c:	3301      	adds	r3, #1
1001416e:	d004      	beq.n	1001417a <_fwalk_reent+0x36>
10014170:	0029      	movs	r1, r5
10014172:	0038      	movs	r0, r7
10014174:	9b01      	ldr	r3, [sp, #4]
10014176:	4798      	blx	r3
10014178:	4306      	orrs	r6, r0
1001417a:	3568      	adds	r5, #104	; 0x68
1001417c:	e7ed      	b.n	1001415a <_fwalk_reent+0x16>
1001417e:	6824      	ldr	r4, [r4, #0]
10014180:	e7e6      	b.n	10014150 <_fwalk_reent+0xc>
10014182:	0030      	movs	r0, r6
10014184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10014188 <_localeconv_r>:
10014188:	4800      	ldr	r0, [pc, #0]	; (1001418c <_localeconv_r+0x4>)
1001418a:	4770      	bx	lr
1001418c:	10019018 	.word	0x10019018

10014190 <__swhatbuf_r>:
10014190:	b570      	push	{r4, r5, r6, lr}
10014192:	000e      	movs	r6, r1
10014194:	001d      	movs	r5, r3
10014196:	230e      	movs	r3, #14
10014198:	5ec9      	ldrsh	r1, [r1, r3]
1001419a:	b090      	sub	sp, #64	; 0x40
1001419c:	0014      	movs	r4, r2
1001419e:	2900      	cmp	r1, #0
100141a0:	da06      	bge.n	100141b0 <__swhatbuf_r+0x20>
100141a2:	2300      	movs	r3, #0
100141a4:	602b      	str	r3, [r5, #0]
100141a6:	89b3      	ldrh	r3, [r6, #12]
100141a8:	061b      	lsls	r3, r3, #24
100141aa:	d50f      	bpl.n	100141cc <__swhatbuf_r+0x3c>
100141ac:	2340      	movs	r3, #64	; 0x40
100141ae:	e00f      	b.n	100141d0 <__swhatbuf_r+0x40>
100141b0:	aa01      	add	r2, sp, #4
100141b2:	f000 fd41 	bl	10014c38 <_fstat_r>
100141b6:	2800      	cmp	r0, #0
100141b8:	dbf3      	blt.n	100141a2 <__swhatbuf_r+0x12>
100141ba:	23f0      	movs	r3, #240	; 0xf0
100141bc:	9a02      	ldr	r2, [sp, #8]
100141be:	021b      	lsls	r3, r3, #8
100141c0:	4013      	ands	r3, r2
100141c2:	4a05      	ldr	r2, [pc, #20]	; (100141d8 <__swhatbuf_r+0x48>)
100141c4:	189b      	adds	r3, r3, r2
100141c6:	425a      	negs	r2, r3
100141c8:	4153      	adcs	r3, r2
100141ca:	602b      	str	r3, [r5, #0]
100141cc:	2380      	movs	r3, #128	; 0x80
100141ce:	00db      	lsls	r3, r3, #3
100141d0:	2000      	movs	r0, #0
100141d2:	6023      	str	r3, [r4, #0]
100141d4:	b010      	add	sp, #64	; 0x40
100141d6:	bd70      	pop	{r4, r5, r6, pc}
100141d8:	ffffe000 	.word	0xffffe000

100141dc <__smakebuf_r>:
100141dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100141de:	2602      	movs	r6, #2
100141e0:	898b      	ldrh	r3, [r1, #12]
100141e2:	0005      	movs	r5, r0
100141e4:	000c      	movs	r4, r1
100141e6:	4233      	tst	r3, r6
100141e8:	d110      	bne.n	1001420c <__smakebuf_r+0x30>
100141ea:	ab01      	add	r3, sp, #4
100141ec:	466a      	mov	r2, sp
100141ee:	f7ff ffcf 	bl	10014190 <__swhatbuf_r>
100141f2:	9900      	ldr	r1, [sp, #0]
100141f4:	0007      	movs	r7, r0
100141f6:	0028      	movs	r0, r5
100141f8:	f7fe f8ae 	bl	10012358 <_malloc_r>
100141fc:	2800      	cmp	r0, #0
100141fe:	d10c      	bne.n	1001421a <__smakebuf_r+0x3e>
10014200:	220c      	movs	r2, #12
10014202:	5ea3      	ldrsh	r3, [r4, r2]
10014204:	059a      	lsls	r2, r3, #22
10014206:	d423      	bmi.n	10014250 <__smakebuf_r+0x74>
10014208:	4333      	orrs	r3, r6
1001420a:	81a3      	strh	r3, [r4, #12]
1001420c:	0023      	movs	r3, r4
1001420e:	3347      	adds	r3, #71	; 0x47
10014210:	6023      	str	r3, [r4, #0]
10014212:	6123      	str	r3, [r4, #16]
10014214:	2301      	movs	r3, #1
10014216:	6163      	str	r3, [r4, #20]
10014218:	e01a      	b.n	10014250 <__smakebuf_r+0x74>
1001421a:	2280      	movs	r2, #128	; 0x80
1001421c:	4b0d      	ldr	r3, [pc, #52]	; (10014254 <__smakebuf_r+0x78>)
1001421e:	62ab      	str	r3, [r5, #40]	; 0x28
10014220:	89a3      	ldrh	r3, [r4, #12]
10014222:	6020      	str	r0, [r4, #0]
10014224:	4313      	orrs	r3, r2
10014226:	81a3      	strh	r3, [r4, #12]
10014228:	9b00      	ldr	r3, [sp, #0]
1001422a:	6120      	str	r0, [r4, #16]
1001422c:	6163      	str	r3, [r4, #20]
1001422e:	9b01      	ldr	r3, [sp, #4]
10014230:	2b00      	cmp	r3, #0
10014232:	d00a      	beq.n	1001424a <__smakebuf_r+0x6e>
10014234:	230e      	movs	r3, #14
10014236:	5ee1      	ldrsh	r1, [r4, r3]
10014238:	0028      	movs	r0, r5
1001423a:	f000 fd0f 	bl	10014c5c <_isatty_r>
1001423e:	2800      	cmp	r0, #0
10014240:	d003      	beq.n	1001424a <__smakebuf_r+0x6e>
10014242:	2201      	movs	r2, #1
10014244:	89a3      	ldrh	r3, [r4, #12]
10014246:	4313      	orrs	r3, r2
10014248:	81a3      	strh	r3, [r4, #12]
1001424a:	89a3      	ldrh	r3, [r4, #12]
1001424c:	431f      	orrs	r7, r3
1001424e:	81a7      	strh	r7, [r4, #12]
10014250:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10014252:	46c0      	nop			; (mov r8, r8)
10014254:	10013fdd 	.word	0x10013fdd

10014258 <memchr>:
10014258:	b2c9      	uxtb	r1, r1
1001425a:	1882      	adds	r2, r0, r2
1001425c:	4290      	cmp	r0, r2
1001425e:	d004      	beq.n	1001426a <memchr+0x12>
10014260:	7803      	ldrb	r3, [r0, #0]
10014262:	428b      	cmp	r3, r1
10014264:	d002      	beq.n	1001426c <memchr+0x14>
10014266:	3001      	adds	r0, #1
10014268:	e7f8      	b.n	1001425c <memchr+0x4>
1001426a:	2000      	movs	r0, #0
1001426c:	4770      	bx	lr

1001426e <_Balloc>:
1001426e:	b570      	push	{r4, r5, r6, lr}
10014270:	6a46      	ldr	r6, [r0, #36]	; 0x24
10014272:	0004      	movs	r4, r0
10014274:	000d      	movs	r5, r1
10014276:	2e00      	cmp	r6, #0
10014278:	d107      	bne.n	1001428a <_Balloc+0x1c>
1001427a:	2010      	movs	r0, #16
1001427c:	f7fd fffc 	bl	10012278 <malloc>
10014280:	6260      	str	r0, [r4, #36]	; 0x24
10014282:	6046      	str	r6, [r0, #4]
10014284:	6086      	str	r6, [r0, #8]
10014286:	6006      	str	r6, [r0, #0]
10014288:	60c6      	str	r6, [r0, #12]
1001428a:	6a66      	ldr	r6, [r4, #36]	; 0x24
1001428c:	68f3      	ldr	r3, [r6, #12]
1001428e:	2b00      	cmp	r3, #0
10014290:	d009      	beq.n	100142a6 <_Balloc+0x38>
10014292:	6a63      	ldr	r3, [r4, #36]	; 0x24
10014294:	00aa      	lsls	r2, r5, #2
10014296:	68db      	ldr	r3, [r3, #12]
10014298:	189b      	adds	r3, r3, r2
1001429a:	6818      	ldr	r0, [r3, #0]
1001429c:	2800      	cmp	r0, #0
1001429e:	d00e      	beq.n	100142be <_Balloc+0x50>
100142a0:	6802      	ldr	r2, [r0, #0]
100142a2:	601a      	str	r2, [r3, #0]
100142a4:	e017      	b.n	100142d6 <_Balloc+0x68>
100142a6:	2221      	movs	r2, #33	; 0x21
100142a8:	2104      	movs	r1, #4
100142aa:	0020      	movs	r0, r4
100142ac:	f000 faca 	bl	10014844 <_calloc_r>
100142b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
100142b2:	60f0      	str	r0, [r6, #12]
100142b4:	68db      	ldr	r3, [r3, #12]
100142b6:	2b00      	cmp	r3, #0
100142b8:	d1eb      	bne.n	10014292 <_Balloc+0x24>
100142ba:	2000      	movs	r0, #0
100142bc:	e00e      	b.n	100142dc <_Balloc+0x6e>
100142be:	2101      	movs	r1, #1
100142c0:	000e      	movs	r6, r1
100142c2:	40ae      	lsls	r6, r5
100142c4:	1d72      	adds	r2, r6, #5
100142c6:	0092      	lsls	r2, r2, #2
100142c8:	0020      	movs	r0, r4
100142ca:	f000 fabb 	bl	10014844 <_calloc_r>
100142ce:	2800      	cmp	r0, #0
100142d0:	d0f3      	beq.n	100142ba <_Balloc+0x4c>
100142d2:	6045      	str	r5, [r0, #4]
100142d4:	6086      	str	r6, [r0, #8]
100142d6:	2300      	movs	r3, #0
100142d8:	6103      	str	r3, [r0, #16]
100142da:	60c3      	str	r3, [r0, #12]
100142dc:	bd70      	pop	{r4, r5, r6, pc}

100142de <_Bfree>:
100142de:	b570      	push	{r4, r5, r6, lr}
100142e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
100142e2:	0006      	movs	r6, r0
100142e4:	000c      	movs	r4, r1
100142e6:	2d00      	cmp	r5, #0
100142e8:	d107      	bne.n	100142fa <_Bfree+0x1c>
100142ea:	2010      	movs	r0, #16
100142ec:	f7fd ffc4 	bl	10012278 <malloc>
100142f0:	6270      	str	r0, [r6, #36]	; 0x24
100142f2:	6045      	str	r5, [r0, #4]
100142f4:	6085      	str	r5, [r0, #8]
100142f6:	6005      	str	r5, [r0, #0]
100142f8:	60c5      	str	r5, [r0, #12]
100142fa:	2c00      	cmp	r4, #0
100142fc:	d007      	beq.n	1001430e <_Bfree+0x30>
100142fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
10014300:	6863      	ldr	r3, [r4, #4]
10014302:	68d2      	ldr	r2, [r2, #12]
10014304:	009b      	lsls	r3, r3, #2
10014306:	18d3      	adds	r3, r2, r3
10014308:	681a      	ldr	r2, [r3, #0]
1001430a:	6022      	str	r2, [r4, #0]
1001430c:	601c      	str	r4, [r3, #0]
1001430e:	bd70      	pop	{r4, r5, r6, pc}

10014310 <__multadd>:
10014310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014312:	0007      	movs	r7, r0
10014314:	0008      	movs	r0, r1
10014316:	000c      	movs	r4, r1
10014318:	690d      	ldr	r5, [r1, #16]
1001431a:	001e      	movs	r6, r3
1001431c:	2100      	movs	r1, #0
1001431e:	9201      	str	r2, [sp, #4]
10014320:	3014      	adds	r0, #20
10014322:	9a01      	ldr	r2, [sp, #4]
10014324:	8803      	ldrh	r3, [r0, #0]
10014326:	3101      	adds	r1, #1
10014328:	4353      	muls	r3, r2
1001432a:	199b      	adds	r3, r3, r6
1001432c:	6806      	ldr	r6, [r0, #0]
1001432e:	0c36      	lsrs	r6, r6, #16
10014330:	4356      	muls	r6, r2
10014332:	0c1a      	lsrs	r2, r3, #16
10014334:	4694      	mov	ip, r2
10014336:	44b4      	add	ip, r6
10014338:	4662      	mov	r2, ip
1001433a:	0c16      	lsrs	r6, r2, #16
1001433c:	0412      	lsls	r2, r2, #16
1001433e:	4694      	mov	ip, r2
10014340:	b29b      	uxth	r3, r3
10014342:	4463      	add	r3, ip
10014344:	c008      	stmia	r0!, {r3}
10014346:	428d      	cmp	r5, r1
10014348:	dceb      	bgt.n	10014322 <__multadd+0x12>
1001434a:	2e00      	cmp	r6, #0
1001434c:	d01b      	beq.n	10014386 <__multadd+0x76>
1001434e:	68a3      	ldr	r3, [r4, #8]
10014350:	429d      	cmp	r5, r3
10014352:	db12      	blt.n	1001437a <__multadd+0x6a>
10014354:	6863      	ldr	r3, [r4, #4]
10014356:	0038      	movs	r0, r7
10014358:	1c59      	adds	r1, r3, #1
1001435a:	f7ff ff88 	bl	1001426e <_Balloc>
1001435e:	0021      	movs	r1, r4
10014360:	6923      	ldr	r3, [r4, #16]
10014362:	9001      	str	r0, [sp, #4]
10014364:	1c9a      	adds	r2, r3, #2
10014366:	0092      	lsls	r2, r2, #2
10014368:	310c      	adds	r1, #12
1001436a:	300c      	adds	r0, #12
1001436c:	f7fd ff9d 	bl	100122aa <memcpy>
10014370:	0021      	movs	r1, r4
10014372:	0038      	movs	r0, r7
10014374:	f7ff ffb3 	bl	100142de <_Bfree>
10014378:	9c01      	ldr	r4, [sp, #4]
1001437a:	1d2b      	adds	r3, r5, #4
1001437c:	009b      	lsls	r3, r3, #2
1001437e:	18e3      	adds	r3, r4, r3
10014380:	3501      	adds	r5, #1
10014382:	605e      	str	r6, [r3, #4]
10014384:	6125      	str	r5, [r4, #16]
10014386:	0020      	movs	r0, r4
10014388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001438a <__hi0bits>:
1001438a:	2200      	movs	r2, #0
1001438c:	0003      	movs	r3, r0
1001438e:	0c01      	lsrs	r1, r0, #16
10014390:	4291      	cmp	r1, r2
10014392:	d101      	bne.n	10014398 <__hi0bits+0xe>
10014394:	0403      	lsls	r3, r0, #16
10014396:	3210      	adds	r2, #16
10014398:	0e19      	lsrs	r1, r3, #24
1001439a:	d101      	bne.n	100143a0 <__hi0bits+0x16>
1001439c:	3208      	adds	r2, #8
1001439e:	021b      	lsls	r3, r3, #8
100143a0:	0f19      	lsrs	r1, r3, #28
100143a2:	d101      	bne.n	100143a8 <__hi0bits+0x1e>
100143a4:	3204      	adds	r2, #4
100143a6:	011b      	lsls	r3, r3, #4
100143a8:	0f99      	lsrs	r1, r3, #30
100143aa:	d101      	bne.n	100143b0 <__hi0bits+0x26>
100143ac:	3202      	adds	r2, #2
100143ae:	009b      	lsls	r3, r3, #2
100143b0:	0010      	movs	r0, r2
100143b2:	2b00      	cmp	r3, #0
100143b4:	db03      	blt.n	100143be <__hi0bits+0x34>
100143b6:	2020      	movs	r0, #32
100143b8:	005b      	lsls	r3, r3, #1
100143ba:	d500      	bpl.n	100143be <__hi0bits+0x34>
100143bc:	1c50      	adds	r0, r2, #1
100143be:	4770      	bx	lr

100143c0 <__lo0bits>:
100143c0:	2207      	movs	r2, #7
100143c2:	6803      	ldr	r3, [r0, #0]
100143c4:	b510      	push	{r4, lr}
100143c6:	0001      	movs	r1, r0
100143c8:	401a      	ands	r2, r3
100143ca:	d00c      	beq.n	100143e6 <__lo0bits+0x26>
100143cc:	2401      	movs	r4, #1
100143ce:	2000      	movs	r0, #0
100143d0:	4223      	tst	r3, r4
100143d2:	d123      	bne.n	1001441c <__lo0bits+0x5c>
100143d4:	2202      	movs	r2, #2
100143d6:	4213      	tst	r3, r2
100143d8:	d003      	beq.n	100143e2 <__lo0bits+0x22>
100143da:	40e3      	lsrs	r3, r4
100143dc:	0020      	movs	r0, r4
100143de:	600b      	str	r3, [r1, #0]
100143e0:	e01c      	b.n	1001441c <__lo0bits+0x5c>
100143e2:	089b      	lsrs	r3, r3, #2
100143e4:	e018      	b.n	10014418 <__lo0bits+0x58>
100143e6:	b298      	uxth	r0, r3
100143e8:	2800      	cmp	r0, #0
100143ea:	d101      	bne.n	100143f0 <__lo0bits+0x30>
100143ec:	2210      	movs	r2, #16
100143ee:	0c1b      	lsrs	r3, r3, #16
100143f0:	b2d8      	uxtb	r0, r3
100143f2:	2800      	cmp	r0, #0
100143f4:	d101      	bne.n	100143fa <__lo0bits+0x3a>
100143f6:	3208      	adds	r2, #8
100143f8:	0a1b      	lsrs	r3, r3, #8
100143fa:	0718      	lsls	r0, r3, #28
100143fc:	d101      	bne.n	10014402 <__lo0bits+0x42>
100143fe:	3204      	adds	r2, #4
10014400:	091b      	lsrs	r3, r3, #4
10014402:	0798      	lsls	r0, r3, #30
10014404:	d101      	bne.n	1001440a <__lo0bits+0x4a>
10014406:	3202      	adds	r2, #2
10014408:	089b      	lsrs	r3, r3, #2
1001440a:	07d8      	lsls	r0, r3, #31
1001440c:	d404      	bmi.n	10014418 <__lo0bits+0x58>
1001440e:	085b      	lsrs	r3, r3, #1
10014410:	2020      	movs	r0, #32
10014412:	2b00      	cmp	r3, #0
10014414:	d002      	beq.n	1001441c <__lo0bits+0x5c>
10014416:	3201      	adds	r2, #1
10014418:	0010      	movs	r0, r2
1001441a:	600b      	str	r3, [r1, #0]
1001441c:	bd10      	pop	{r4, pc}

1001441e <__i2b>:
1001441e:	b510      	push	{r4, lr}
10014420:	000c      	movs	r4, r1
10014422:	2101      	movs	r1, #1
10014424:	f7ff ff23 	bl	1001426e <_Balloc>
10014428:	2301      	movs	r3, #1
1001442a:	6144      	str	r4, [r0, #20]
1001442c:	6103      	str	r3, [r0, #16]
1001442e:	bd10      	pop	{r4, pc}

10014430 <__multiply>:
10014430:	b5f0      	push	{r4, r5, r6, r7, lr}
10014432:	690b      	ldr	r3, [r1, #16]
10014434:	0014      	movs	r4, r2
10014436:	6912      	ldr	r2, [r2, #16]
10014438:	b089      	sub	sp, #36	; 0x24
1001443a:	000d      	movs	r5, r1
1001443c:	4293      	cmp	r3, r2
1001443e:	da01      	bge.n	10014444 <__multiply+0x14>
10014440:	0025      	movs	r5, r4
10014442:	000c      	movs	r4, r1
10014444:	692f      	ldr	r7, [r5, #16]
10014446:	6926      	ldr	r6, [r4, #16]
10014448:	68aa      	ldr	r2, [r5, #8]
1001444a:	19bb      	adds	r3, r7, r6
1001444c:	6869      	ldr	r1, [r5, #4]
1001444e:	9301      	str	r3, [sp, #4]
10014450:	4293      	cmp	r3, r2
10014452:	dd00      	ble.n	10014456 <__multiply+0x26>
10014454:	3101      	adds	r1, #1
10014456:	f7ff ff0a 	bl	1001426e <_Balloc>
1001445a:	0002      	movs	r2, r0
1001445c:	19bb      	adds	r3, r7, r6
1001445e:	3214      	adds	r2, #20
10014460:	009b      	lsls	r3, r3, #2
10014462:	18d3      	adds	r3, r2, r3
10014464:	469c      	mov	ip, r3
10014466:	2100      	movs	r1, #0
10014468:	0013      	movs	r3, r2
1001446a:	9002      	str	r0, [sp, #8]
1001446c:	4563      	cmp	r3, ip
1001446e:	d201      	bcs.n	10014474 <__multiply+0x44>
10014470:	c302      	stmia	r3!, {r1}
10014472:	e7fb      	b.n	1001446c <__multiply+0x3c>
10014474:	3514      	adds	r5, #20
10014476:	00bf      	lsls	r7, r7, #2
10014478:	19eb      	adds	r3, r5, r7
1001447a:	3414      	adds	r4, #20
1001447c:	00b6      	lsls	r6, r6, #2
1001447e:	9305      	str	r3, [sp, #20]
10014480:	19a3      	adds	r3, r4, r6
10014482:	9503      	str	r5, [sp, #12]
10014484:	9307      	str	r3, [sp, #28]
10014486:	9b07      	ldr	r3, [sp, #28]
10014488:	429c      	cmp	r4, r3
1001448a:	d251      	bcs.n	10014530 <__multiply+0x100>
1001448c:	8820      	ldrh	r0, [r4, #0]
1001448e:	2800      	cmp	r0, #0
10014490:	d01e      	beq.n	100144d0 <__multiply+0xa0>
10014492:	0015      	movs	r5, r2
10014494:	2600      	movs	r6, #0
10014496:	9f03      	ldr	r7, [sp, #12]
10014498:	cf08      	ldmia	r7!, {r3}
1001449a:	9506      	str	r5, [sp, #24]
1001449c:	9304      	str	r3, [sp, #16]
1001449e:	466b      	mov	r3, sp
100144a0:	8a1b      	ldrh	r3, [r3, #16]
100144a2:	4343      	muls	r3, r0
100144a4:	0019      	movs	r1, r3
100144a6:	882b      	ldrh	r3, [r5, #0]
100144a8:	18cb      	adds	r3, r1, r3
100144aa:	9904      	ldr	r1, [sp, #16]
100144ac:	199b      	adds	r3, r3, r6
100144ae:	0c09      	lsrs	r1, r1, #16
100144b0:	4341      	muls	r1, r0
100144b2:	682e      	ldr	r6, [r5, #0]
100144b4:	0c36      	lsrs	r6, r6, #16
100144b6:	1989      	adds	r1, r1, r6
100144b8:	0c1e      	lsrs	r6, r3, #16
100144ba:	1989      	adds	r1, r1, r6
100144bc:	0c0e      	lsrs	r6, r1, #16
100144be:	b29b      	uxth	r3, r3
100144c0:	0409      	lsls	r1, r1, #16
100144c2:	430b      	orrs	r3, r1
100144c4:	c508      	stmia	r5!, {r3}
100144c6:	9b05      	ldr	r3, [sp, #20]
100144c8:	42bb      	cmp	r3, r7
100144ca:	d8e5      	bhi.n	10014498 <__multiply+0x68>
100144cc:	9b06      	ldr	r3, [sp, #24]
100144ce:	605e      	str	r6, [r3, #4]
100144d0:	6823      	ldr	r3, [r4, #0]
100144d2:	0c1d      	lsrs	r5, r3, #16
100144d4:	d01f      	beq.n	10014516 <__multiply+0xe6>
100144d6:	2100      	movs	r1, #0
100144d8:	0010      	movs	r0, r2
100144da:	6813      	ldr	r3, [r2, #0]
100144dc:	9f03      	ldr	r7, [sp, #12]
100144de:	9104      	str	r1, [sp, #16]
100144e0:	883e      	ldrh	r6, [r7, #0]
100144e2:	6801      	ldr	r1, [r0, #0]
100144e4:	436e      	muls	r6, r5
100144e6:	0c09      	lsrs	r1, r1, #16
100144e8:	1871      	adds	r1, r6, r1
100144ea:	9e04      	ldr	r6, [sp, #16]
100144ec:	b29b      	uxth	r3, r3
100144ee:	1989      	adds	r1, r1, r6
100144f0:	040e      	lsls	r6, r1, #16
100144f2:	4333      	orrs	r3, r6
100144f4:	6003      	str	r3, [r0, #0]
100144f6:	cf08      	ldmia	r7!, {r3}
100144f8:	8886      	ldrh	r6, [r0, #4]
100144fa:	0c1b      	lsrs	r3, r3, #16
100144fc:	436b      	muls	r3, r5
100144fe:	0c09      	lsrs	r1, r1, #16
10014500:	199b      	adds	r3, r3, r6
10014502:	185b      	adds	r3, r3, r1
10014504:	0c19      	lsrs	r1, r3, #16
10014506:	9104      	str	r1, [sp, #16]
10014508:	9905      	ldr	r1, [sp, #20]
1001450a:	9006      	str	r0, [sp, #24]
1001450c:	3004      	adds	r0, #4
1001450e:	42b9      	cmp	r1, r7
10014510:	d8e6      	bhi.n	100144e0 <__multiply+0xb0>
10014512:	9906      	ldr	r1, [sp, #24]
10014514:	604b      	str	r3, [r1, #4]
10014516:	3404      	adds	r4, #4
10014518:	3204      	adds	r2, #4
1001451a:	e7b4      	b.n	10014486 <__multiply+0x56>
1001451c:	2304      	movs	r3, #4
1001451e:	425b      	negs	r3, r3
10014520:	449c      	add	ip, r3
10014522:	4663      	mov	r3, ip
10014524:	681b      	ldr	r3, [r3, #0]
10014526:	2b00      	cmp	r3, #0
10014528:	d105      	bne.n	10014536 <__multiply+0x106>
1001452a:	9b01      	ldr	r3, [sp, #4]
1001452c:	3b01      	subs	r3, #1
1001452e:	9301      	str	r3, [sp, #4]
10014530:	9b01      	ldr	r3, [sp, #4]
10014532:	2b00      	cmp	r3, #0
10014534:	dcf2      	bgt.n	1001451c <__multiply+0xec>
10014536:	9b02      	ldr	r3, [sp, #8]
10014538:	9a01      	ldr	r2, [sp, #4]
1001453a:	0018      	movs	r0, r3
1001453c:	611a      	str	r2, [r3, #16]
1001453e:	b009      	add	sp, #36	; 0x24
10014540:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10014544 <__pow5mult>:
10014544:	2303      	movs	r3, #3
10014546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014548:	4013      	ands	r3, r2
1001454a:	0005      	movs	r5, r0
1001454c:	000e      	movs	r6, r1
1001454e:	0014      	movs	r4, r2
10014550:	2b00      	cmp	r3, #0
10014552:	d008      	beq.n	10014566 <__pow5mult+0x22>
10014554:	4923      	ldr	r1, [pc, #140]	; (100145e4 <__pow5mult+0xa0>)
10014556:	3b01      	subs	r3, #1
10014558:	009a      	lsls	r2, r3, #2
1001455a:	5852      	ldr	r2, [r2, r1]
1001455c:	2300      	movs	r3, #0
1001455e:	0031      	movs	r1, r6
10014560:	f7ff fed6 	bl	10014310 <__multadd>
10014564:	0006      	movs	r6, r0
10014566:	10a3      	asrs	r3, r4, #2
10014568:	9301      	str	r3, [sp, #4]
1001456a:	d038      	beq.n	100145de <__pow5mult+0x9a>
1001456c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
1001456e:	2c00      	cmp	r4, #0
10014570:	d107      	bne.n	10014582 <__pow5mult+0x3e>
10014572:	2010      	movs	r0, #16
10014574:	f7fd fe80 	bl	10012278 <malloc>
10014578:	6268      	str	r0, [r5, #36]	; 0x24
1001457a:	6044      	str	r4, [r0, #4]
1001457c:	6084      	str	r4, [r0, #8]
1001457e:	6004      	str	r4, [r0, #0]
10014580:	60c4      	str	r4, [r0, #12]
10014582:	6a6f      	ldr	r7, [r5, #36]	; 0x24
10014584:	68bc      	ldr	r4, [r7, #8]
10014586:	2c00      	cmp	r4, #0
10014588:	d110      	bne.n	100145ac <__pow5mult+0x68>
1001458a:	4917      	ldr	r1, [pc, #92]	; (100145e8 <__pow5mult+0xa4>)
1001458c:	0028      	movs	r0, r5
1001458e:	f7ff ff46 	bl	1001441e <__i2b>
10014592:	2300      	movs	r3, #0
10014594:	60b8      	str	r0, [r7, #8]
10014596:	0004      	movs	r4, r0
10014598:	6003      	str	r3, [r0, #0]
1001459a:	e007      	b.n	100145ac <__pow5mult+0x68>
1001459c:	9b01      	ldr	r3, [sp, #4]
1001459e:	105b      	asrs	r3, r3, #1
100145a0:	9301      	str	r3, [sp, #4]
100145a2:	d01c      	beq.n	100145de <__pow5mult+0x9a>
100145a4:	6820      	ldr	r0, [r4, #0]
100145a6:	2800      	cmp	r0, #0
100145a8:	d010      	beq.n	100145cc <__pow5mult+0x88>
100145aa:	0004      	movs	r4, r0
100145ac:	2201      	movs	r2, #1
100145ae:	9b01      	ldr	r3, [sp, #4]
100145b0:	4213      	tst	r3, r2
100145b2:	d0f3      	beq.n	1001459c <__pow5mult+0x58>
100145b4:	0031      	movs	r1, r6
100145b6:	0022      	movs	r2, r4
100145b8:	0028      	movs	r0, r5
100145ba:	f7ff ff39 	bl	10014430 <__multiply>
100145be:	0007      	movs	r7, r0
100145c0:	0031      	movs	r1, r6
100145c2:	0028      	movs	r0, r5
100145c4:	f7ff fe8b 	bl	100142de <_Bfree>
100145c8:	003e      	movs	r6, r7
100145ca:	e7e7      	b.n	1001459c <__pow5mult+0x58>
100145cc:	0022      	movs	r2, r4
100145ce:	0021      	movs	r1, r4
100145d0:	0028      	movs	r0, r5
100145d2:	f7ff ff2d 	bl	10014430 <__multiply>
100145d6:	2300      	movs	r3, #0
100145d8:	6020      	str	r0, [r4, #0]
100145da:	6003      	str	r3, [r0, #0]
100145dc:	e7e5      	b.n	100145aa <__pow5mult+0x66>
100145de:	0030      	movs	r0, r6
100145e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100145e2:	46c0      	nop			; (mov r8, r8)
100145e4:	10018e28 	.word	0x10018e28
100145e8:	00000271 	.word	0x00000271

100145ec <__lshift>:
100145ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100145ee:	000c      	movs	r4, r1
100145f0:	0017      	movs	r7, r2
100145f2:	6923      	ldr	r3, [r4, #16]
100145f4:	1155      	asrs	r5, r2, #5
100145f6:	b085      	sub	sp, #20
100145f8:	18eb      	adds	r3, r5, r3
100145fa:	9301      	str	r3, [sp, #4]
100145fc:	3301      	adds	r3, #1
100145fe:	9300      	str	r3, [sp, #0]
10014600:	6849      	ldr	r1, [r1, #4]
10014602:	68a3      	ldr	r3, [r4, #8]
10014604:	9002      	str	r0, [sp, #8]
10014606:	9a00      	ldr	r2, [sp, #0]
10014608:	4293      	cmp	r3, r2
1001460a:	da02      	bge.n	10014612 <__lshift+0x26>
1001460c:	3101      	adds	r1, #1
1001460e:	005b      	lsls	r3, r3, #1
10014610:	e7f9      	b.n	10014606 <__lshift+0x1a>
10014612:	9802      	ldr	r0, [sp, #8]
10014614:	f7ff fe2b 	bl	1001426e <_Balloc>
10014618:	2300      	movs	r3, #0
1001461a:	0002      	movs	r2, r0
1001461c:	0006      	movs	r6, r0
1001461e:	0019      	movs	r1, r3
10014620:	3214      	adds	r2, #20
10014622:	42ab      	cmp	r3, r5
10014624:	da03      	bge.n	1001462e <__lshift+0x42>
10014626:	0098      	lsls	r0, r3, #2
10014628:	5011      	str	r1, [r2, r0]
1001462a:	3301      	adds	r3, #1
1001462c:	e7f9      	b.n	10014622 <__lshift+0x36>
1001462e:	43eb      	mvns	r3, r5
10014630:	17db      	asrs	r3, r3, #31
10014632:	401d      	ands	r5, r3
10014634:	0023      	movs	r3, r4
10014636:	00ad      	lsls	r5, r5, #2
10014638:	1955      	adds	r5, r2, r5
1001463a:	6922      	ldr	r2, [r4, #16]
1001463c:	3314      	adds	r3, #20
1001463e:	0092      	lsls	r2, r2, #2
10014640:	189a      	adds	r2, r3, r2
10014642:	4694      	mov	ip, r2
10014644:	221f      	movs	r2, #31
10014646:	4017      	ands	r7, r2
10014648:	d014      	beq.n	10014674 <__lshift+0x88>
1001464a:	3201      	adds	r2, #1
1001464c:	1bd2      	subs	r2, r2, r7
1001464e:	9203      	str	r2, [sp, #12]
10014650:	2200      	movs	r2, #0
10014652:	6819      	ldr	r1, [r3, #0]
10014654:	0028      	movs	r0, r5
10014656:	40b9      	lsls	r1, r7
10014658:	430a      	orrs	r2, r1
1001465a:	c504      	stmia	r5!, {r2}
1001465c:	cb04      	ldmia	r3!, {r2}
1001465e:	9903      	ldr	r1, [sp, #12]
10014660:	40ca      	lsrs	r2, r1
10014662:	459c      	cmp	ip, r3
10014664:	d8f5      	bhi.n	10014652 <__lshift+0x66>
10014666:	6042      	str	r2, [r0, #4]
10014668:	2a00      	cmp	r2, #0
1001466a:	d007      	beq.n	1001467c <__lshift+0x90>
1001466c:	9b01      	ldr	r3, [sp, #4]
1001466e:	3302      	adds	r3, #2
10014670:	9300      	str	r3, [sp, #0]
10014672:	e003      	b.n	1001467c <__lshift+0x90>
10014674:	cb04      	ldmia	r3!, {r2}
10014676:	c504      	stmia	r5!, {r2}
10014678:	459c      	cmp	ip, r3
1001467a:	d8fb      	bhi.n	10014674 <__lshift+0x88>
1001467c:	9b00      	ldr	r3, [sp, #0]
1001467e:	9802      	ldr	r0, [sp, #8]
10014680:	3b01      	subs	r3, #1
10014682:	6133      	str	r3, [r6, #16]
10014684:	0021      	movs	r1, r4
10014686:	f7ff fe2a 	bl	100142de <_Bfree>
1001468a:	0030      	movs	r0, r6
1001468c:	b005      	add	sp, #20
1001468e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10014690 <__mcmp>:
10014690:	6903      	ldr	r3, [r0, #16]
10014692:	690a      	ldr	r2, [r1, #16]
10014694:	b510      	push	{r4, lr}
10014696:	1a9b      	subs	r3, r3, r2
10014698:	0004      	movs	r4, r0
1001469a:	1e18      	subs	r0, r3, #0
1001469c:	d112      	bne.n	100146c4 <__mcmp+0x34>
1001469e:	0093      	lsls	r3, r2, #2
100146a0:	3414      	adds	r4, #20
100146a2:	3114      	adds	r1, #20
100146a4:	18e2      	adds	r2, r4, r3
100146a6:	18c9      	adds	r1, r1, r3
100146a8:	3a04      	subs	r2, #4
100146aa:	3904      	subs	r1, #4
100146ac:	6813      	ldr	r3, [r2, #0]
100146ae:	6808      	ldr	r0, [r1, #0]
100146b0:	4283      	cmp	r3, r0
100146b2:	d004      	beq.n	100146be <__mcmp+0x2e>
100146b4:	4283      	cmp	r3, r0
100146b6:	419b      	sbcs	r3, r3
100146b8:	2001      	movs	r0, #1
100146ba:	4318      	orrs	r0, r3
100146bc:	e002      	b.n	100146c4 <__mcmp+0x34>
100146be:	4294      	cmp	r4, r2
100146c0:	d3f2      	bcc.n	100146a8 <__mcmp+0x18>
100146c2:	2000      	movs	r0, #0
100146c4:	bd10      	pop	{r4, pc}

100146c6 <__mdiff>:
100146c6:	b5f0      	push	{r4, r5, r6, r7, lr}
100146c8:	000c      	movs	r4, r1
100146ca:	b085      	sub	sp, #20
100146cc:	0007      	movs	r7, r0
100146ce:	0011      	movs	r1, r2
100146d0:	0020      	movs	r0, r4
100146d2:	0015      	movs	r5, r2
100146d4:	f7ff ffdc 	bl	10014690 <__mcmp>
100146d8:	1e06      	subs	r6, r0, #0
100146da:	d107      	bne.n	100146ec <__mdiff+0x26>
100146dc:	0001      	movs	r1, r0
100146de:	0038      	movs	r0, r7
100146e0:	f7ff fdc5 	bl	1001426e <_Balloc>
100146e4:	2301      	movs	r3, #1
100146e6:	6146      	str	r6, [r0, #20]
100146e8:	6103      	str	r3, [r0, #16]
100146ea:	e055      	b.n	10014798 <__mdiff+0xd2>
100146ec:	2300      	movs	r3, #0
100146ee:	9301      	str	r3, [sp, #4]
100146f0:	4298      	cmp	r0, r3
100146f2:	da04      	bge.n	100146fe <__mdiff+0x38>
100146f4:	0023      	movs	r3, r4
100146f6:	002c      	movs	r4, r5
100146f8:	001d      	movs	r5, r3
100146fa:	2301      	movs	r3, #1
100146fc:	9301      	str	r3, [sp, #4]
100146fe:	6861      	ldr	r1, [r4, #4]
10014700:	0038      	movs	r0, r7
10014702:	f7ff fdb4 	bl	1001426e <_Balloc>
10014706:	9b01      	ldr	r3, [sp, #4]
10014708:	6926      	ldr	r6, [r4, #16]
1001470a:	002f      	movs	r7, r5
1001470c:	60c3      	str	r3, [r0, #12]
1001470e:	3414      	adds	r4, #20
10014710:	00b3      	lsls	r3, r6, #2
10014712:	18e3      	adds	r3, r4, r3
10014714:	0002      	movs	r2, r0
10014716:	9302      	str	r3, [sp, #8]
10014718:	692b      	ldr	r3, [r5, #16]
1001471a:	2500      	movs	r5, #0
1001471c:	3714      	adds	r7, #20
1001471e:	009b      	lsls	r3, r3, #2
10014720:	18fb      	adds	r3, r7, r3
10014722:	9303      	str	r3, [sp, #12]
10014724:	3214      	adds	r2, #20
10014726:	cc08      	ldmia	r4!, {r3}
10014728:	4669      	mov	r1, sp
1001472a:	469c      	mov	ip, r3
1001472c:	cf08      	ldmia	r7!, {r3}
1001472e:	3204      	adds	r2, #4
10014730:	9300      	str	r3, [sp, #0]
10014732:	4663      	mov	r3, ip
10014734:	808b      	strh	r3, [r1, #4]
10014736:	888b      	ldrh	r3, [r1, #4]
10014738:	195d      	adds	r5, r3, r5
1001473a:	9b00      	ldr	r3, [sp, #0]
1001473c:	b29b      	uxth	r3, r3
1001473e:	1aeb      	subs	r3, r5, r3
10014740:	4665      	mov	r5, ip
10014742:	9301      	str	r3, [sp, #4]
10014744:	9b00      	ldr	r3, [sp, #0]
10014746:	0c2d      	lsrs	r5, r5, #16
10014748:	0c19      	lsrs	r1, r3, #16
1001474a:	9b01      	ldr	r3, [sp, #4]
1001474c:	1a69      	subs	r1, r5, r1
1001474e:	141d      	asrs	r5, r3, #16
10014750:	1f13      	subs	r3, r2, #4
10014752:	469c      	mov	ip, r3
10014754:	466b      	mov	r3, sp
10014756:	1949      	adds	r1, r1, r5
10014758:	889b      	ldrh	r3, [r3, #4]
1001475a:	140d      	asrs	r5, r1, #16
1001475c:	0409      	lsls	r1, r1, #16
1001475e:	430b      	orrs	r3, r1
10014760:	4661      	mov	r1, ip
10014762:	600b      	str	r3, [r1, #0]
10014764:	9b03      	ldr	r3, [sp, #12]
10014766:	42bb      	cmp	r3, r7
10014768:	d8dd      	bhi.n	10014726 <__mdiff+0x60>
1001476a:	9902      	ldr	r1, [sp, #8]
1001476c:	0013      	movs	r3, r2
1001476e:	428c      	cmp	r4, r1
10014770:	d20b      	bcs.n	1001478a <__mdiff+0xc4>
10014772:	cc02      	ldmia	r4!, {r1}
10014774:	b28b      	uxth	r3, r1
10014776:	195b      	adds	r3, r3, r5
10014778:	141d      	asrs	r5, r3, #16
1001477a:	0c09      	lsrs	r1, r1, #16
1001477c:	1949      	adds	r1, r1, r5
1001477e:	140d      	asrs	r5, r1, #16
10014780:	b29b      	uxth	r3, r3
10014782:	0409      	lsls	r1, r1, #16
10014784:	430b      	orrs	r3, r1
10014786:	c208      	stmia	r2!, {r3}
10014788:	e7ef      	b.n	1001476a <__mdiff+0xa4>
1001478a:	3b04      	subs	r3, #4
1001478c:	681a      	ldr	r2, [r3, #0]
1001478e:	2a00      	cmp	r2, #0
10014790:	d101      	bne.n	10014796 <__mdiff+0xd0>
10014792:	3e01      	subs	r6, #1
10014794:	e7f9      	b.n	1001478a <__mdiff+0xc4>
10014796:	6106      	str	r6, [r0, #16]
10014798:	b005      	add	sp, #20
1001479a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001479c <__d2b>:
1001479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001479e:	001d      	movs	r5, r3
100147a0:	2101      	movs	r1, #1
100147a2:	9f08      	ldr	r7, [sp, #32]
100147a4:	0014      	movs	r4, r2
100147a6:	f7ff fd62 	bl	1001426e <_Balloc>
100147aa:	032b      	lsls	r3, r5, #12
100147ac:	006d      	lsls	r5, r5, #1
100147ae:	0006      	movs	r6, r0
100147b0:	0b1b      	lsrs	r3, r3, #12
100147b2:	0d6d      	lsrs	r5, r5, #21
100147b4:	d002      	beq.n	100147bc <__d2b+0x20>
100147b6:	2280      	movs	r2, #128	; 0x80
100147b8:	0352      	lsls	r2, r2, #13
100147ba:	4313      	orrs	r3, r2
100147bc:	9301      	str	r3, [sp, #4]
100147be:	2c00      	cmp	r4, #0
100147c0:	d018      	beq.n	100147f4 <__d2b+0x58>
100147c2:	4668      	mov	r0, sp
100147c4:	9400      	str	r4, [sp, #0]
100147c6:	f7ff fdfb 	bl	100143c0 <__lo0bits>
100147ca:	9c00      	ldr	r4, [sp, #0]
100147cc:	2800      	cmp	r0, #0
100147ce:	d009      	beq.n	100147e4 <__d2b+0x48>
100147d0:	9b01      	ldr	r3, [sp, #4]
100147d2:	2120      	movs	r1, #32
100147d4:	001a      	movs	r2, r3
100147d6:	1a09      	subs	r1, r1, r0
100147d8:	408a      	lsls	r2, r1
100147da:	40c3      	lsrs	r3, r0
100147dc:	4322      	orrs	r2, r4
100147de:	6172      	str	r2, [r6, #20]
100147e0:	9301      	str	r3, [sp, #4]
100147e2:	e000      	b.n	100147e6 <__d2b+0x4a>
100147e4:	6174      	str	r4, [r6, #20]
100147e6:	9c01      	ldr	r4, [sp, #4]
100147e8:	61b4      	str	r4, [r6, #24]
100147ea:	1e63      	subs	r3, r4, #1
100147ec:	419c      	sbcs	r4, r3
100147ee:	3401      	adds	r4, #1
100147f0:	6134      	str	r4, [r6, #16]
100147f2:	e007      	b.n	10014804 <__d2b+0x68>
100147f4:	a801      	add	r0, sp, #4
100147f6:	f7ff fde3 	bl	100143c0 <__lo0bits>
100147fa:	2401      	movs	r4, #1
100147fc:	9b01      	ldr	r3, [sp, #4]
100147fe:	6134      	str	r4, [r6, #16]
10014800:	6173      	str	r3, [r6, #20]
10014802:	3020      	adds	r0, #32
10014804:	2d00      	cmp	r5, #0
10014806:	d006      	beq.n	10014816 <__d2b+0x7a>
10014808:	4b0b      	ldr	r3, [pc, #44]	; (10014838 <__d2b+0x9c>)
1001480a:	18ed      	adds	r5, r5, r3
1001480c:	2335      	movs	r3, #53	; 0x35
1001480e:	182d      	adds	r5, r5, r0
10014810:	603d      	str	r5, [r7, #0]
10014812:	1a18      	subs	r0, r3, r0
10014814:	e00b      	b.n	1001482e <__d2b+0x92>
10014816:	4b09      	ldr	r3, [pc, #36]	; (1001483c <__d2b+0xa0>)
10014818:	18c0      	adds	r0, r0, r3
1001481a:	4b09      	ldr	r3, [pc, #36]	; (10014840 <__d2b+0xa4>)
1001481c:	6038      	str	r0, [r7, #0]
1001481e:	18e3      	adds	r3, r4, r3
10014820:	009b      	lsls	r3, r3, #2
10014822:	18f3      	adds	r3, r6, r3
10014824:	6958      	ldr	r0, [r3, #20]
10014826:	f7ff fdb0 	bl	1001438a <__hi0bits>
1001482a:	0164      	lsls	r4, r4, #5
1001482c:	1a20      	subs	r0, r4, r0
1001482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10014830:	6018      	str	r0, [r3, #0]
10014832:	0030      	movs	r0, r6
10014834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014836:	46c0      	nop			; (mov r8, r8)
10014838:	fffffbcd 	.word	0xfffffbcd
1001483c:	fffffbce 	.word	0xfffffbce
10014840:	3fffffff 	.word	0x3fffffff

10014844 <_calloc_r>:
10014844:	434a      	muls	r2, r1
10014846:	b570      	push	{r4, r5, r6, lr}
10014848:	0011      	movs	r1, r2
1001484a:	0014      	movs	r4, r2
1001484c:	f7fd fd84 	bl	10012358 <_malloc_r>
10014850:	1e05      	subs	r5, r0, #0
10014852:	d003      	beq.n	1001485c <_calloc_r+0x18>
10014854:	0022      	movs	r2, r4
10014856:	2100      	movs	r1, #0
10014858:	f7fd fd30 	bl	100122bc <memset>
1001485c:	0028      	movs	r0, r5
1001485e:	bd70      	pop	{r4, r5, r6, pc}

10014860 <__sfputc_r>:
10014860:	6893      	ldr	r3, [r2, #8]
10014862:	b510      	push	{r4, lr}
10014864:	3b01      	subs	r3, #1
10014866:	6093      	str	r3, [r2, #8]
10014868:	2b00      	cmp	r3, #0
1001486a:	da05      	bge.n	10014878 <__sfputc_r+0x18>
1001486c:	6994      	ldr	r4, [r2, #24]
1001486e:	42a3      	cmp	r3, r4
10014870:	db08      	blt.n	10014884 <__sfputc_r+0x24>
10014872:	b2cb      	uxtb	r3, r1
10014874:	2b0a      	cmp	r3, #10
10014876:	d005      	beq.n	10014884 <__sfputc_r+0x24>
10014878:	6813      	ldr	r3, [r2, #0]
1001487a:	1c58      	adds	r0, r3, #1
1001487c:	6010      	str	r0, [r2, #0]
1001487e:	7019      	strb	r1, [r3, #0]
10014880:	b2c8      	uxtb	r0, r1
10014882:	e001      	b.n	10014888 <__sfputc_r+0x28>
10014884:	f7fe fbde 	bl	10013044 <__swbuf_r>
10014888:	bd10      	pop	{r4, pc}

1001488a <__sfputs_r>:
1001488a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001488c:	0006      	movs	r6, r0
1001488e:	000f      	movs	r7, r1
10014890:	0014      	movs	r4, r2
10014892:	18d5      	adds	r5, r2, r3
10014894:	42ac      	cmp	r4, r5
10014896:	d008      	beq.n	100148aa <__sfputs_r+0x20>
10014898:	7821      	ldrb	r1, [r4, #0]
1001489a:	003a      	movs	r2, r7
1001489c:	0030      	movs	r0, r6
1001489e:	f7ff ffdf 	bl	10014860 <__sfputc_r>
100148a2:	3401      	adds	r4, #1
100148a4:	1c43      	adds	r3, r0, #1
100148a6:	d1f5      	bne.n	10014894 <__sfputs_r+0xa>
100148a8:	e000      	b.n	100148ac <__sfputs_r+0x22>
100148aa:	2000      	movs	r0, #0
100148ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100148b0 <_vfiprintf_r>:
100148b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100148b2:	b09f      	sub	sp, #124	; 0x7c
100148b4:	0006      	movs	r6, r0
100148b6:	000f      	movs	r7, r1
100148b8:	9202      	str	r2, [sp, #8]
100148ba:	9305      	str	r3, [sp, #20]
100148bc:	2800      	cmp	r0, #0
100148be:	d004      	beq.n	100148ca <_vfiprintf_r+0x1a>
100148c0:	6983      	ldr	r3, [r0, #24]
100148c2:	2b00      	cmp	r3, #0
100148c4:	d101      	bne.n	100148ca <_vfiprintf_r+0x1a>
100148c6:	f7ff fbcb 	bl	10014060 <__sinit>
100148ca:	4b7f      	ldr	r3, [pc, #508]	; (10014ac8 <_vfiprintf_r+0x218>)
100148cc:	429f      	cmp	r7, r3
100148ce:	d101      	bne.n	100148d4 <_vfiprintf_r+0x24>
100148d0:	6877      	ldr	r7, [r6, #4]
100148d2:	e008      	b.n	100148e6 <_vfiprintf_r+0x36>
100148d4:	4b7d      	ldr	r3, [pc, #500]	; (10014acc <_vfiprintf_r+0x21c>)
100148d6:	429f      	cmp	r7, r3
100148d8:	d101      	bne.n	100148de <_vfiprintf_r+0x2e>
100148da:	68b7      	ldr	r7, [r6, #8]
100148dc:	e003      	b.n	100148e6 <_vfiprintf_r+0x36>
100148de:	4b7c      	ldr	r3, [pc, #496]	; (10014ad0 <_vfiprintf_r+0x220>)
100148e0:	429f      	cmp	r7, r3
100148e2:	d100      	bne.n	100148e6 <_vfiprintf_r+0x36>
100148e4:	68f7      	ldr	r7, [r6, #12]
100148e6:	89bb      	ldrh	r3, [r7, #12]
100148e8:	071b      	lsls	r3, r3, #28
100148ea:	d50a      	bpl.n	10014902 <_vfiprintf_r+0x52>
100148ec:	693b      	ldr	r3, [r7, #16]
100148ee:	2b00      	cmp	r3, #0
100148f0:	d007      	beq.n	10014902 <_vfiprintf_r+0x52>
100148f2:	2300      	movs	r3, #0
100148f4:	ad06      	add	r5, sp, #24
100148f6:	616b      	str	r3, [r5, #20]
100148f8:	3320      	adds	r3, #32
100148fa:	766b      	strb	r3, [r5, #25]
100148fc:	3310      	adds	r3, #16
100148fe:	76ab      	strb	r3, [r5, #26]
10014900:	e03d      	b.n	1001497e <_vfiprintf_r+0xce>
10014902:	0039      	movs	r1, r7
10014904:	0030      	movs	r0, r6
10014906:	f7fe fbf5 	bl	100130f4 <__swsetup_r>
1001490a:	2800      	cmp	r0, #0
1001490c:	d0f1      	beq.n	100148f2 <_vfiprintf_r+0x42>
1001490e:	2001      	movs	r0, #1
10014910:	4240      	negs	r0, r0
10014912:	e0d6      	b.n	10014ac2 <_vfiprintf_r+0x212>
10014914:	9a05      	ldr	r2, [sp, #20]
10014916:	1d11      	adds	r1, r2, #4
10014918:	6812      	ldr	r2, [r2, #0]
1001491a:	9105      	str	r1, [sp, #20]
1001491c:	2a00      	cmp	r2, #0
1001491e:	da00      	bge.n	10014922 <_vfiprintf_r+0x72>
10014920:	e07f      	b.n	10014a22 <_vfiprintf_r+0x172>
10014922:	9209      	str	r2, [sp, #36]	; 0x24
10014924:	3401      	adds	r4, #1
10014926:	7823      	ldrb	r3, [r4, #0]
10014928:	2b2e      	cmp	r3, #46	; 0x2e
1001492a:	d100      	bne.n	1001492e <_vfiprintf_r+0x7e>
1001492c:	e08d      	b.n	10014a4a <_vfiprintf_r+0x19a>
1001492e:	7821      	ldrb	r1, [r4, #0]
10014930:	2203      	movs	r2, #3
10014932:	4868      	ldr	r0, [pc, #416]	; (10014ad4 <_vfiprintf_r+0x224>)
10014934:	f7ff fc90 	bl	10014258 <memchr>
10014938:	2800      	cmp	r0, #0
1001493a:	d007      	beq.n	1001494c <_vfiprintf_r+0x9c>
1001493c:	4b65      	ldr	r3, [pc, #404]	; (10014ad4 <_vfiprintf_r+0x224>)
1001493e:	682a      	ldr	r2, [r5, #0]
10014940:	1ac0      	subs	r0, r0, r3
10014942:	2340      	movs	r3, #64	; 0x40
10014944:	4083      	lsls	r3, r0
10014946:	4313      	orrs	r3, r2
10014948:	602b      	str	r3, [r5, #0]
1001494a:	3401      	adds	r4, #1
1001494c:	7821      	ldrb	r1, [r4, #0]
1001494e:	1c63      	adds	r3, r4, #1
10014950:	2206      	movs	r2, #6
10014952:	4861      	ldr	r0, [pc, #388]	; (10014ad8 <_vfiprintf_r+0x228>)
10014954:	9302      	str	r3, [sp, #8]
10014956:	7629      	strb	r1, [r5, #24]
10014958:	f7ff fc7e 	bl	10014258 <memchr>
1001495c:	2800      	cmp	r0, #0
1001495e:	d100      	bne.n	10014962 <_vfiprintf_r+0xb2>
10014960:	e09d      	b.n	10014a9e <_vfiprintf_r+0x1ee>
10014962:	4b5e      	ldr	r3, [pc, #376]	; (10014adc <_vfiprintf_r+0x22c>)
10014964:	2b00      	cmp	r3, #0
10014966:	d000      	beq.n	1001496a <_vfiprintf_r+0xba>
10014968:	e090      	b.n	10014a8c <_vfiprintf_r+0x1dc>
1001496a:	2207      	movs	r2, #7
1001496c:	9b05      	ldr	r3, [sp, #20]
1001496e:	3307      	adds	r3, #7
10014970:	4393      	bics	r3, r2
10014972:	3308      	adds	r3, #8
10014974:	9305      	str	r3, [sp, #20]
10014976:	696b      	ldr	r3, [r5, #20]
10014978:	9a03      	ldr	r2, [sp, #12]
1001497a:	189b      	adds	r3, r3, r2
1001497c:	616b      	str	r3, [r5, #20]
1001497e:	9c02      	ldr	r4, [sp, #8]
10014980:	7823      	ldrb	r3, [r4, #0]
10014982:	2b00      	cmp	r3, #0
10014984:	d104      	bne.n	10014990 <_vfiprintf_r+0xe0>
10014986:	9b02      	ldr	r3, [sp, #8]
10014988:	1ae3      	subs	r3, r4, r3
1001498a:	9304      	str	r3, [sp, #16]
1001498c:	d012      	beq.n	100149b4 <_vfiprintf_r+0x104>
1001498e:	e003      	b.n	10014998 <_vfiprintf_r+0xe8>
10014990:	2b25      	cmp	r3, #37	; 0x25
10014992:	d0f8      	beq.n	10014986 <_vfiprintf_r+0xd6>
10014994:	3401      	adds	r4, #1
10014996:	e7f3      	b.n	10014980 <_vfiprintf_r+0xd0>
10014998:	9b04      	ldr	r3, [sp, #16]
1001499a:	9a02      	ldr	r2, [sp, #8]
1001499c:	0039      	movs	r1, r7
1001499e:	0030      	movs	r0, r6
100149a0:	f7ff ff73 	bl	1001488a <__sfputs_r>
100149a4:	1c43      	adds	r3, r0, #1
100149a6:	d100      	bne.n	100149aa <_vfiprintf_r+0xfa>
100149a8:	e086      	b.n	10014ab8 <_vfiprintf_r+0x208>
100149aa:	696a      	ldr	r2, [r5, #20]
100149ac:	9b04      	ldr	r3, [sp, #16]
100149ae:	4694      	mov	ip, r2
100149b0:	4463      	add	r3, ip
100149b2:	616b      	str	r3, [r5, #20]
100149b4:	7823      	ldrb	r3, [r4, #0]
100149b6:	2b00      	cmp	r3, #0
100149b8:	d07e      	beq.n	10014ab8 <_vfiprintf_r+0x208>
100149ba:	2201      	movs	r2, #1
100149bc:	2300      	movs	r3, #0
100149be:	4252      	negs	r2, r2
100149c0:	606a      	str	r2, [r5, #4]
100149c2:	a902      	add	r1, sp, #8
100149c4:	3254      	adds	r2, #84	; 0x54
100149c6:	1852      	adds	r2, r2, r1
100149c8:	3401      	adds	r4, #1
100149ca:	602b      	str	r3, [r5, #0]
100149cc:	60eb      	str	r3, [r5, #12]
100149ce:	60ab      	str	r3, [r5, #8]
100149d0:	7013      	strb	r3, [r2, #0]
100149d2:	65ab      	str	r3, [r5, #88]	; 0x58
100149d4:	7821      	ldrb	r1, [r4, #0]
100149d6:	2205      	movs	r2, #5
100149d8:	4841      	ldr	r0, [pc, #260]	; (10014ae0 <_vfiprintf_r+0x230>)
100149da:	f7ff fc3d 	bl	10014258 <memchr>
100149de:	2800      	cmp	r0, #0
100149e0:	d008      	beq.n	100149f4 <_vfiprintf_r+0x144>
100149e2:	4b3f      	ldr	r3, [pc, #252]	; (10014ae0 <_vfiprintf_r+0x230>)
100149e4:	682a      	ldr	r2, [r5, #0]
100149e6:	1ac0      	subs	r0, r0, r3
100149e8:	2301      	movs	r3, #1
100149ea:	4083      	lsls	r3, r0
100149ec:	4313      	orrs	r3, r2
100149ee:	602b      	str	r3, [r5, #0]
100149f0:	3401      	adds	r4, #1
100149f2:	e7ef      	b.n	100149d4 <_vfiprintf_r+0x124>
100149f4:	682b      	ldr	r3, [r5, #0]
100149f6:	06da      	lsls	r2, r3, #27
100149f8:	d504      	bpl.n	10014a04 <_vfiprintf_r+0x154>
100149fa:	2253      	movs	r2, #83	; 0x53
100149fc:	2120      	movs	r1, #32
100149fe:	a802      	add	r0, sp, #8
10014a00:	1812      	adds	r2, r2, r0
10014a02:	7011      	strb	r1, [r2, #0]
10014a04:	071a      	lsls	r2, r3, #28
10014a06:	d504      	bpl.n	10014a12 <_vfiprintf_r+0x162>
10014a08:	2253      	movs	r2, #83	; 0x53
10014a0a:	212b      	movs	r1, #43	; 0x2b
10014a0c:	a802      	add	r0, sp, #8
10014a0e:	1812      	adds	r2, r2, r0
10014a10:	7011      	strb	r1, [r2, #0]
10014a12:	7822      	ldrb	r2, [r4, #0]
10014a14:	2a2a      	cmp	r2, #42	; 0x2a
10014a16:	d100      	bne.n	10014a1a <_vfiprintf_r+0x16a>
10014a18:	e77c      	b.n	10014914 <_vfiprintf_r+0x64>
10014a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10014a1c:	2000      	movs	r0, #0
10014a1e:	210a      	movs	r1, #10
10014a20:	e005      	b.n	10014a2e <_vfiprintf_r+0x17e>
10014a22:	4252      	negs	r2, r2
10014a24:	60ea      	str	r2, [r5, #12]
10014a26:	2202      	movs	r2, #2
10014a28:	4313      	orrs	r3, r2
10014a2a:	602b      	str	r3, [r5, #0]
10014a2c:	e77a      	b.n	10014924 <_vfiprintf_r+0x74>
10014a2e:	7822      	ldrb	r2, [r4, #0]
10014a30:	3a30      	subs	r2, #48	; 0x30
10014a32:	2a09      	cmp	r2, #9
10014a34:	d804      	bhi.n	10014a40 <_vfiprintf_r+0x190>
10014a36:	434b      	muls	r3, r1
10014a38:	3401      	adds	r4, #1
10014a3a:	189b      	adds	r3, r3, r2
10014a3c:	2001      	movs	r0, #1
10014a3e:	e7f6      	b.n	10014a2e <_vfiprintf_r+0x17e>
10014a40:	2800      	cmp	r0, #0
10014a42:	d100      	bne.n	10014a46 <_vfiprintf_r+0x196>
10014a44:	e76f      	b.n	10014926 <_vfiprintf_r+0x76>
10014a46:	9309      	str	r3, [sp, #36]	; 0x24
10014a48:	e76d      	b.n	10014926 <_vfiprintf_r+0x76>
10014a4a:	7863      	ldrb	r3, [r4, #1]
10014a4c:	2b2a      	cmp	r3, #42	; 0x2a
10014a4e:	d10a      	bne.n	10014a66 <_vfiprintf_r+0x1b6>
10014a50:	9b05      	ldr	r3, [sp, #20]
10014a52:	3402      	adds	r4, #2
10014a54:	1d1a      	adds	r2, r3, #4
10014a56:	681b      	ldr	r3, [r3, #0]
10014a58:	9205      	str	r2, [sp, #20]
10014a5a:	2b00      	cmp	r3, #0
10014a5c:	da01      	bge.n	10014a62 <_vfiprintf_r+0x1b2>
10014a5e:	2301      	movs	r3, #1
10014a60:	425b      	negs	r3, r3
10014a62:	9307      	str	r3, [sp, #28]
10014a64:	e763      	b.n	1001492e <_vfiprintf_r+0x7e>
10014a66:	2300      	movs	r3, #0
10014a68:	200a      	movs	r0, #10
10014a6a:	001a      	movs	r2, r3
10014a6c:	3401      	adds	r4, #1
10014a6e:	606b      	str	r3, [r5, #4]
10014a70:	7821      	ldrb	r1, [r4, #0]
10014a72:	3930      	subs	r1, #48	; 0x30
10014a74:	2909      	cmp	r1, #9
10014a76:	d804      	bhi.n	10014a82 <_vfiprintf_r+0x1d2>
10014a78:	4342      	muls	r2, r0
10014a7a:	3401      	adds	r4, #1
10014a7c:	1852      	adds	r2, r2, r1
10014a7e:	2301      	movs	r3, #1
10014a80:	e7f6      	b.n	10014a70 <_vfiprintf_r+0x1c0>
10014a82:	2b00      	cmp	r3, #0
10014a84:	d100      	bne.n	10014a88 <_vfiprintf_r+0x1d8>
10014a86:	e752      	b.n	1001492e <_vfiprintf_r+0x7e>
10014a88:	9207      	str	r2, [sp, #28]
10014a8a:	e750      	b.n	1001492e <_vfiprintf_r+0x7e>
10014a8c:	ab05      	add	r3, sp, #20
10014a8e:	9300      	str	r3, [sp, #0]
10014a90:	003a      	movs	r2, r7
10014a92:	4b14      	ldr	r3, [pc, #80]	; (10014ae4 <_vfiprintf_r+0x234>)
10014a94:	0029      	movs	r1, r5
10014a96:	0030      	movs	r0, r6
10014a98:	f7fd fd4a 	bl	10012530 <_printf_float>
10014a9c:	e007      	b.n	10014aae <_vfiprintf_r+0x1fe>
10014a9e:	ab05      	add	r3, sp, #20
10014aa0:	9300      	str	r3, [sp, #0]
10014aa2:	003a      	movs	r2, r7
10014aa4:	4b0f      	ldr	r3, [pc, #60]	; (10014ae4 <_vfiprintf_r+0x234>)
10014aa6:	0029      	movs	r1, r5
10014aa8:	0030      	movs	r0, r6
10014aaa:	f7fd ffff 	bl	10012aac <_printf_i>
10014aae:	9003      	str	r0, [sp, #12]
10014ab0:	9b03      	ldr	r3, [sp, #12]
10014ab2:	3301      	adds	r3, #1
10014ab4:	d000      	beq.n	10014ab8 <_vfiprintf_r+0x208>
10014ab6:	e75e      	b.n	10014976 <_vfiprintf_r+0xc6>
10014ab8:	89bb      	ldrh	r3, [r7, #12]
10014aba:	065b      	lsls	r3, r3, #25
10014abc:	d500      	bpl.n	10014ac0 <_vfiprintf_r+0x210>
10014abe:	e726      	b.n	1001490e <_vfiprintf_r+0x5e>
10014ac0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10014ac2:	b01f      	add	sp, #124	; 0x7c
10014ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014ac6:	46c0      	nop			; (mov r8, r8)
10014ac8:	10018ccc 	.word	0x10018ccc
10014acc:	10018cec 	.word	0x10018cec
10014ad0:	10018d0c 	.word	0x10018d0c
10014ad4:	10018e3a 	.word	0x10018e3a
10014ad8:	10018e3e 	.word	0x10018e3e
10014adc:	10012531 	.word	0x10012531
10014ae0:	10018e34 	.word	0x10018e34
10014ae4:	1001488b 	.word	0x1001488b

10014ae8 <_putc_r>:
10014ae8:	b570      	push	{r4, r5, r6, lr}
10014aea:	0006      	movs	r6, r0
10014aec:	000d      	movs	r5, r1
10014aee:	0014      	movs	r4, r2
10014af0:	2800      	cmp	r0, #0
10014af2:	d004      	beq.n	10014afe <_putc_r+0x16>
10014af4:	6983      	ldr	r3, [r0, #24]
10014af6:	2b00      	cmp	r3, #0
10014af8:	d101      	bne.n	10014afe <_putc_r+0x16>
10014afa:	f7ff fab1 	bl	10014060 <__sinit>
10014afe:	4b12      	ldr	r3, [pc, #72]	; (10014b48 <_putc_r+0x60>)
10014b00:	429c      	cmp	r4, r3
10014b02:	d101      	bne.n	10014b08 <_putc_r+0x20>
10014b04:	6874      	ldr	r4, [r6, #4]
10014b06:	e008      	b.n	10014b1a <_putc_r+0x32>
10014b08:	4b10      	ldr	r3, [pc, #64]	; (10014b4c <_putc_r+0x64>)
10014b0a:	429c      	cmp	r4, r3
10014b0c:	d101      	bne.n	10014b12 <_putc_r+0x2a>
10014b0e:	68b4      	ldr	r4, [r6, #8]
10014b10:	e003      	b.n	10014b1a <_putc_r+0x32>
10014b12:	4b0f      	ldr	r3, [pc, #60]	; (10014b50 <_putc_r+0x68>)
10014b14:	429c      	cmp	r4, r3
10014b16:	d100      	bne.n	10014b1a <_putc_r+0x32>
10014b18:	68f4      	ldr	r4, [r6, #12]
10014b1a:	68a3      	ldr	r3, [r4, #8]
10014b1c:	3b01      	subs	r3, #1
10014b1e:	60a3      	str	r3, [r4, #8]
10014b20:	2b00      	cmp	r3, #0
10014b22:	da05      	bge.n	10014b30 <_putc_r+0x48>
10014b24:	69a2      	ldr	r2, [r4, #24]
10014b26:	4293      	cmp	r3, r2
10014b28:	db08      	blt.n	10014b3c <_putc_r+0x54>
10014b2a:	b2eb      	uxtb	r3, r5
10014b2c:	2b0a      	cmp	r3, #10
10014b2e:	d005      	beq.n	10014b3c <_putc_r+0x54>
10014b30:	6823      	ldr	r3, [r4, #0]
10014b32:	b2e8      	uxtb	r0, r5
10014b34:	1c5a      	adds	r2, r3, #1
10014b36:	6022      	str	r2, [r4, #0]
10014b38:	701d      	strb	r5, [r3, #0]
10014b3a:	e004      	b.n	10014b46 <_putc_r+0x5e>
10014b3c:	0022      	movs	r2, r4
10014b3e:	0029      	movs	r1, r5
10014b40:	0030      	movs	r0, r6
10014b42:	f7fe fa7f 	bl	10013044 <__swbuf_r>
10014b46:	bd70      	pop	{r4, r5, r6, pc}
10014b48:	10018ccc 	.word	0x10018ccc
10014b4c:	10018cec 	.word	0x10018cec
10014b50:	10018d0c 	.word	0x10018d0c

10014b54 <__sread>:
10014b54:	b570      	push	{r4, r5, r6, lr}
10014b56:	000c      	movs	r4, r1
10014b58:	250e      	movs	r5, #14
10014b5a:	5f49      	ldrsh	r1, [r1, r5]
10014b5c:	f000 f8a4 	bl	10014ca8 <_read_r>
10014b60:	2800      	cmp	r0, #0
10014b62:	db03      	blt.n	10014b6c <__sread+0x18>
10014b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
10014b66:	181b      	adds	r3, r3, r0
10014b68:	6563      	str	r3, [r4, #84]	; 0x54
10014b6a:	e003      	b.n	10014b74 <__sread+0x20>
10014b6c:	89a2      	ldrh	r2, [r4, #12]
10014b6e:	4b02      	ldr	r3, [pc, #8]	; (10014b78 <__sread+0x24>)
10014b70:	4013      	ands	r3, r2
10014b72:	81a3      	strh	r3, [r4, #12]
10014b74:	bd70      	pop	{r4, r5, r6, pc}
10014b76:	46c0      	nop			; (mov r8, r8)
10014b78:	ffffefff 	.word	0xffffefff

10014b7c <__swrite>:
10014b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014b7e:	001f      	movs	r7, r3
10014b80:	898b      	ldrh	r3, [r1, #12]
10014b82:	0005      	movs	r5, r0
10014b84:	000c      	movs	r4, r1
10014b86:	0016      	movs	r6, r2
10014b88:	05db      	lsls	r3, r3, #23
10014b8a:	d505      	bpl.n	10014b98 <__swrite+0x1c>
10014b8c:	230e      	movs	r3, #14
10014b8e:	5ec9      	ldrsh	r1, [r1, r3]
10014b90:	2200      	movs	r2, #0
10014b92:	2302      	movs	r3, #2
10014b94:	f000 f874 	bl	10014c80 <_lseek_r>
10014b98:	89a2      	ldrh	r2, [r4, #12]
10014b9a:	4b05      	ldr	r3, [pc, #20]	; (10014bb0 <__swrite+0x34>)
10014b9c:	0028      	movs	r0, r5
10014b9e:	4013      	ands	r3, r2
10014ba0:	81a3      	strh	r3, [r4, #12]
10014ba2:	0032      	movs	r2, r6
10014ba4:	230e      	movs	r3, #14
10014ba6:	5ee1      	ldrsh	r1, [r4, r3]
10014ba8:	003b      	movs	r3, r7
10014baa:	f000 f81f 	bl	10014bec <_write_r>
10014bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014bb0:	ffffefff 	.word	0xffffefff

10014bb4 <__sseek>:
10014bb4:	b570      	push	{r4, r5, r6, lr}
10014bb6:	000c      	movs	r4, r1
10014bb8:	250e      	movs	r5, #14
10014bba:	5f49      	ldrsh	r1, [r1, r5]
10014bbc:	f000 f860 	bl	10014c80 <_lseek_r>
10014bc0:	89a3      	ldrh	r3, [r4, #12]
10014bc2:	1c42      	adds	r2, r0, #1
10014bc4:	d103      	bne.n	10014bce <__sseek+0x1a>
10014bc6:	4a05      	ldr	r2, [pc, #20]	; (10014bdc <__sseek+0x28>)
10014bc8:	4013      	ands	r3, r2
10014bca:	81a3      	strh	r3, [r4, #12]
10014bcc:	e004      	b.n	10014bd8 <__sseek+0x24>
10014bce:	2280      	movs	r2, #128	; 0x80
10014bd0:	0152      	lsls	r2, r2, #5
10014bd2:	4313      	orrs	r3, r2
10014bd4:	81a3      	strh	r3, [r4, #12]
10014bd6:	6560      	str	r0, [r4, #84]	; 0x54
10014bd8:	bd70      	pop	{r4, r5, r6, pc}
10014bda:	46c0      	nop			; (mov r8, r8)
10014bdc:	ffffefff 	.word	0xffffefff

10014be0 <__sclose>:
10014be0:	b510      	push	{r4, lr}
10014be2:	230e      	movs	r3, #14
10014be4:	5ec9      	ldrsh	r1, [r1, r3]
10014be6:	f000 f815 	bl	10014c14 <_close_r>
10014bea:	bd10      	pop	{r4, pc}

10014bec <_write_r>:
10014bec:	b570      	push	{r4, r5, r6, lr}
10014bee:	0005      	movs	r5, r0
10014bf0:	0008      	movs	r0, r1
10014bf2:	0011      	movs	r1, r2
10014bf4:	2200      	movs	r2, #0
10014bf6:	4c06      	ldr	r4, [pc, #24]	; (10014c10 <_write_r+0x24>)
10014bf8:	6022      	str	r2, [r4, #0]
10014bfa:	001a      	movs	r2, r3
10014bfc:	f7f6 fff0 	bl	1000bbe0 <_write>
10014c00:	1c43      	adds	r3, r0, #1
10014c02:	d103      	bne.n	10014c0c <_write_r+0x20>
10014c04:	6823      	ldr	r3, [r4, #0]
10014c06:	2b00      	cmp	r3, #0
10014c08:	d000      	beq.n	10014c0c <_write_r+0x20>
10014c0a:	602b      	str	r3, [r5, #0]
10014c0c:	bd70      	pop	{r4, r5, r6, pc}
10014c0e:	46c0      	nop			; (mov r8, r8)
10014c10:	1001bf70 	.word	0x1001bf70

10014c14 <_close_r>:
10014c14:	2300      	movs	r3, #0
10014c16:	b570      	push	{r4, r5, r6, lr}
10014c18:	4c06      	ldr	r4, [pc, #24]	; (10014c34 <_close_r+0x20>)
10014c1a:	0005      	movs	r5, r0
10014c1c:	0008      	movs	r0, r1
10014c1e:	6023      	str	r3, [r4, #0]
10014c20:	f7f3 fbfe 	bl	10008420 <_close>
10014c24:	1c43      	adds	r3, r0, #1
10014c26:	d103      	bne.n	10014c30 <_close_r+0x1c>
10014c28:	6823      	ldr	r3, [r4, #0]
10014c2a:	2b00      	cmp	r3, #0
10014c2c:	d000      	beq.n	10014c30 <_close_r+0x1c>
10014c2e:	602b      	str	r3, [r5, #0]
10014c30:	bd70      	pop	{r4, r5, r6, pc}
10014c32:	46c0      	nop			; (mov r8, r8)
10014c34:	1001bf70 	.word	0x1001bf70

10014c38 <_fstat_r>:
10014c38:	2300      	movs	r3, #0
10014c3a:	b570      	push	{r4, r5, r6, lr}
10014c3c:	4c06      	ldr	r4, [pc, #24]	; (10014c58 <_fstat_r+0x20>)
10014c3e:	0005      	movs	r5, r0
10014c40:	0008      	movs	r0, r1
10014c42:	0011      	movs	r1, r2
10014c44:	6023      	str	r3, [r4, #0]
10014c46:	f7f3 fbef 	bl	10008428 <_fstat>
10014c4a:	1c43      	adds	r3, r0, #1
10014c4c:	d103      	bne.n	10014c56 <_fstat_r+0x1e>
10014c4e:	6823      	ldr	r3, [r4, #0]
10014c50:	2b00      	cmp	r3, #0
10014c52:	d000      	beq.n	10014c56 <_fstat_r+0x1e>
10014c54:	602b      	str	r3, [r5, #0]
10014c56:	bd70      	pop	{r4, r5, r6, pc}
10014c58:	1001bf70 	.word	0x1001bf70

10014c5c <_isatty_r>:
10014c5c:	2300      	movs	r3, #0
10014c5e:	b570      	push	{r4, r5, r6, lr}
10014c60:	4c06      	ldr	r4, [pc, #24]	; (10014c7c <_isatty_r+0x20>)
10014c62:	0005      	movs	r5, r0
10014c64:	0008      	movs	r0, r1
10014c66:	6023      	str	r3, [r4, #0]
10014c68:	f7f3 fbe4 	bl	10008434 <_isatty>
10014c6c:	1c43      	adds	r3, r0, #1
10014c6e:	d103      	bne.n	10014c78 <_isatty_r+0x1c>
10014c70:	6823      	ldr	r3, [r4, #0]
10014c72:	2b00      	cmp	r3, #0
10014c74:	d000      	beq.n	10014c78 <_isatty_r+0x1c>
10014c76:	602b      	str	r3, [r5, #0]
10014c78:	bd70      	pop	{r4, r5, r6, pc}
10014c7a:	46c0      	nop			; (mov r8, r8)
10014c7c:	1001bf70 	.word	0x1001bf70

10014c80 <_lseek_r>:
10014c80:	b570      	push	{r4, r5, r6, lr}
10014c82:	0005      	movs	r5, r0
10014c84:	0008      	movs	r0, r1
10014c86:	0011      	movs	r1, r2
10014c88:	2200      	movs	r2, #0
10014c8a:	4c06      	ldr	r4, [pc, #24]	; (10014ca4 <_lseek_r+0x24>)
10014c8c:	6022      	str	r2, [r4, #0]
10014c8e:	001a      	movs	r2, r3
10014c90:	f7f3 fbd2 	bl	10008438 <_lseek>
10014c94:	1c43      	adds	r3, r0, #1
10014c96:	d103      	bne.n	10014ca0 <_lseek_r+0x20>
10014c98:	6823      	ldr	r3, [r4, #0]
10014c9a:	2b00      	cmp	r3, #0
10014c9c:	d000      	beq.n	10014ca0 <_lseek_r+0x20>
10014c9e:	602b      	str	r3, [r5, #0]
10014ca0:	bd70      	pop	{r4, r5, r6, pc}
10014ca2:	46c0      	nop			; (mov r8, r8)
10014ca4:	1001bf70 	.word	0x1001bf70

10014ca8 <_read_r>:
10014ca8:	b570      	push	{r4, r5, r6, lr}
10014caa:	0005      	movs	r5, r0
10014cac:	0008      	movs	r0, r1
10014cae:	0011      	movs	r1, r2
10014cb0:	2200      	movs	r2, #0
10014cb2:	4c06      	ldr	r4, [pc, #24]	; (10014ccc <_read_r+0x24>)
10014cb4:	6022      	str	r2, [r4, #0]
10014cb6:	001a      	movs	r2, r3
10014cb8:	f7f6 ff72 	bl	1000bba0 <_read>
10014cbc:	1c43      	adds	r3, r0, #1
10014cbe:	d103      	bne.n	10014cc8 <_read_r+0x20>
10014cc0:	6823      	ldr	r3, [r4, #0]
10014cc2:	2b00      	cmp	r3, #0
10014cc4:	d000      	beq.n	10014cc8 <_read_r+0x20>
10014cc6:	602b      	str	r3, [r5, #0]
10014cc8:	bd70      	pop	{r4, r5, r6, pc}
10014cca:	46c0      	nop			; (mov r8, r8)
10014ccc:	1001bf70 	.word	0x1001bf70

10014cd0 <__gnu_thumb1_case_sqi>:
10014cd0:	b402      	push	{r1}
10014cd2:	4671      	mov	r1, lr
10014cd4:	0849      	lsrs	r1, r1, #1
10014cd6:	0049      	lsls	r1, r1, #1
10014cd8:	5609      	ldrsb	r1, [r1, r0]
10014cda:	0049      	lsls	r1, r1, #1
10014cdc:	448e      	add	lr, r1
10014cde:	bc02      	pop	{r1}
10014ce0:	4770      	bx	lr
10014ce2:	46c0      	nop			; (mov r8, r8)

10014ce4 <__gnu_thumb1_case_uqi>:
10014ce4:	b402      	push	{r1}
10014ce6:	4671      	mov	r1, lr
10014ce8:	0849      	lsrs	r1, r1, #1
10014cea:	0049      	lsls	r1, r1, #1
10014cec:	5c09      	ldrb	r1, [r1, r0]
10014cee:	0049      	lsls	r1, r1, #1
10014cf0:	448e      	add	lr, r1
10014cf2:	bc02      	pop	{r1}
10014cf4:	4770      	bx	lr
10014cf6:	46c0      	nop			; (mov r8, r8)

10014cf8 <__aeabi_uidiv>:
10014cf8:	2200      	movs	r2, #0
10014cfa:	0843      	lsrs	r3, r0, #1
10014cfc:	428b      	cmp	r3, r1
10014cfe:	d374      	bcc.n	10014dea <__aeabi_uidiv+0xf2>
10014d00:	0903      	lsrs	r3, r0, #4
10014d02:	428b      	cmp	r3, r1
10014d04:	d35f      	bcc.n	10014dc6 <__aeabi_uidiv+0xce>
10014d06:	0a03      	lsrs	r3, r0, #8
10014d08:	428b      	cmp	r3, r1
10014d0a:	d344      	bcc.n	10014d96 <__aeabi_uidiv+0x9e>
10014d0c:	0b03      	lsrs	r3, r0, #12
10014d0e:	428b      	cmp	r3, r1
10014d10:	d328      	bcc.n	10014d64 <__aeabi_uidiv+0x6c>
10014d12:	0c03      	lsrs	r3, r0, #16
10014d14:	428b      	cmp	r3, r1
10014d16:	d30d      	bcc.n	10014d34 <__aeabi_uidiv+0x3c>
10014d18:	22ff      	movs	r2, #255	; 0xff
10014d1a:	0209      	lsls	r1, r1, #8
10014d1c:	ba12      	rev	r2, r2
10014d1e:	0c03      	lsrs	r3, r0, #16
10014d20:	428b      	cmp	r3, r1
10014d22:	d302      	bcc.n	10014d2a <__aeabi_uidiv+0x32>
10014d24:	1212      	asrs	r2, r2, #8
10014d26:	0209      	lsls	r1, r1, #8
10014d28:	d065      	beq.n	10014df6 <__aeabi_uidiv+0xfe>
10014d2a:	0b03      	lsrs	r3, r0, #12
10014d2c:	428b      	cmp	r3, r1
10014d2e:	d319      	bcc.n	10014d64 <__aeabi_uidiv+0x6c>
10014d30:	e000      	b.n	10014d34 <__aeabi_uidiv+0x3c>
10014d32:	0a09      	lsrs	r1, r1, #8
10014d34:	0bc3      	lsrs	r3, r0, #15
10014d36:	428b      	cmp	r3, r1
10014d38:	d301      	bcc.n	10014d3e <__aeabi_uidiv+0x46>
10014d3a:	03cb      	lsls	r3, r1, #15
10014d3c:	1ac0      	subs	r0, r0, r3
10014d3e:	4152      	adcs	r2, r2
10014d40:	0b83      	lsrs	r3, r0, #14
10014d42:	428b      	cmp	r3, r1
10014d44:	d301      	bcc.n	10014d4a <__aeabi_uidiv+0x52>
10014d46:	038b      	lsls	r3, r1, #14
10014d48:	1ac0      	subs	r0, r0, r3
10014d4a:	4152      	adcs	r2, r2
10014d4c:	0b43      	lsrs	r3, r0, #13
10014d4e:	428b      	cmp	r3, r1
10014d50:	d301      	bcc.n	10014d56 <__aeabi_uidiv+0x5e>
10014d52:	034b      	lsls	r3, r1, #13
10014d54:	1ac0      	subs	r0, r0, r3
10014d56:	4152      	adcs	r2, r2
10014d58:	0b03      	lsrs	r3, r0, #12
10014d5a:	428b      	cmp	r3, r1
10014d5c:	d301      	bcc.n	10014d62 <__aeabi_uidiv+0x6a>
10014d5e:	030b      	lsls	r3, r1, #12
10014d60:	1ac0      	subs	r0, r0, r3
10014d62:	4152      	adcs	r2, r2
10014d64:	0ac3      	lsrs	r3, r0, #11
10014d66:	428b      	cmp	r3, r1
10014d68:	d301      	bcc.n	10014d6e <__aeabi_uidiv+0x76>
10014d6a:	02cb      	lsls	r3, r1, #11
10014d6c:	1ac0      	subs	r0, r0, r3
10014d6e:	4152      	adcs	r2, r2
10014d70:	0a83      	lsrs	r3, r0, #10
10014d72:	428b      	cmp	r3, r1
10014d74:	d301      	bcc.n	10014d7a <__aeabi_uidiv+0x82>
10014d76:	028b      	lsls	r3, r1, #10
10014d78:	1ac0      	subs	r0, r0, r3
10014d7a:	4152      	adcs	r2, r2
10014d7c:	0a43      	lsrs	r3, r0, #9
10014d7e:	428b      	cmp	r3, r1
10014d80:	d301      	bcc.n	10014d86 <__aeabi_uidiv+0x8e>
10014d82:	024b      	lsls	r3, r1, #9
10014d84:	1ac0      	subs	r0, r0, r3
10014d86:	4152      	adcs	r2, r2
10014d88:	0a03      	lsrs	r3, r0, #8
10014d8a:	428b      	cmp	r3, r1
10014d8c:	d301      	bcc.n	10014d92 <__aeabi_uidiv+0x9a>
10014d8e:	020b      	lsls	r3, r1, #8
10014d90:	1ac0      	subs	r0, r0, r3
10014d92:	4152      	adcs	r2, r2
10014d94:	d2cd      	bcs.n	10014d32 <__aeabi_uidiv+0x3a>
10014d96:	09c3      	lsrs	r3, r0, #7
10014d98:	428b      	cmp	r3, r1
10014d9a:	d301      	bcc.n	10014da0 <__aeabi_uidiv+0xa8>
10014d9c:	01cb      	lsls	r3, r1, #7
10014d9e:	1ac0      	subs	r0, r0, r3
10014da0:	4152      	adcs	r2, r2
10014da2:	0983      	lsrs	r3, r0, #6
10014da4:	428b      	cmp	r3, r1
10014da6:	d301      	bcc.n	10014dac <__aeabi_uidiv+0xb4>
10014da8:	018b      	lsls	r3, r1, #6
10014daa:	1ac0      	subs	r0, r0, r3
10014dac:	4152      	adcs	r2, r2
10014dae:	0943      	lsrs	r3, r0, #5
10014db0:	428b      	cmp	r3, r1
10014db2:	d301      	bcc.n	10014db8 <__aeabi_uidiv+0xc0>
10014db4:	014b      	lsls	r3, r1, #5
10014db6:	1ac0      	subs	r0, r0, r3
10014db8:	4152      	adcs	r2, r2
10014dba:	0903      	lsrs	r3, r0, #4
10014dbc:	428b      	cmp	r3, r1
10014dbe:	d301      	bcc.n	10014dc4 <__aeabi_uidiv+0xcc>
10014dc0:	010b      	lsls	r3, r1, #4
10014dc2:	1ac0      	subs	r0, r0, r3
10014dc4:	4152      	adcs	r2, r2
10014dc6:	08c3      	lsrs	r3, r0, #3
10014dc8:	428b      	cmp	r3, r1
10014dca:	d301      	bcc.n	10014dd0 <__aeabi_uidiv+0xd8>
10014dcc:	00cb      	lsls	r3, r1, #3
10014dce:	1ac0      	subs	r0, r0, r3
10014dd0:	4152      	adcs	r2, r2
10014dd2:	0883      	lsrs	r3, r0, #2
10014dd4:	428b      	cmp	r3, r1
10014dd6:	d301      	bcc.n	10014ddc <__aeabi_uidiv+0xe4>
10014dd8:	008b      	lsls	r3, r1, #2
10014dda:	1ac0      	subs	r0, r0, r3
10014ddc:	4152      	adcs	r2, r2
10014dde:	0843      	lsrs	r3, r0, #1
10014de0:	428b      	cmp	r3, r1
10014de2:	d301      	bcc.n	10014de8 <__aeabi_uidiv+0xf0>
10014de4:	004b      	lsls	r3, r1, #1
10014de6:	1ac0      	subs	r0, r0, r3
10014de8:	4152      	adcs	r2, r2
10014dea:	1a41      	subs	r1, r0, r1
10014dec:	d200      	bcs.n	10014df0 <__aeabi_uidiv+0xf8>
10014dee:	4601      	mov	r1, r0
10014df0:	4152      	adcs	r2, r2
10014df2:	4610      	mov	r0, r2
10014df4:	4770      	bx	lr
10014df6:	e7ff      	b.n	10014df8 <__aeabi_uidiv+0x100>
10014df8:	b501      	push	{r0, lr}
10014dfa:	2000      	movs	r0, #0
10014dfc:	f000 f8f0 	bl	10014fe0 <__aeabi_idiv0>
10014e00:	bd02      	pop	{r1, pc}
10014e02:	46c0      	nop			; (mov r8, r8)

10014e04 <__aeabi_uidivmod>:
10014e04:	2900      	cmp	r1, #0
10014e06:	d0f7      	beq.n	10014df8 <__aeabi_uidiv+0x100>
10014e08:	e776      	b.n	10014cf8 <__aeabi_uidiv>
10014e0a:	4770      	bx	lr

10014e0c <__aeabi_idiv>:
10014e0c:	4603      	mov	r3, r0
10014e0e:	430b      	orrs	r3, r1
10014e10:	d47f      	bmi.n	10014f12 <__aeabi_idiv+0x106>
10014e12:	2200      	movs	r2, #0
10014e14:	0843      	lsrs	r3, r0, #1
10014e16:	428b      	cmp	r3, r1
10014e18:	d374      	bcc.n	10014f04 <__aeabi_idiv+0xf8>
10014e1a:	0903      	lsrs	r3, r0, #4
10014e1c:	428b      	cmp	r3, r1
10014e1e:	d35f      	bcc.n	10014ee0 <__aeabi_idiv+0xd4>
10014e20:	0a03      	lsrs	r3, r0, #8
10014e22:	428b      	cmp	r3, r1
10014e24:	d344      	bcc.n	10014eb0 <__aeabi_idiv+0xa4>
10014e26:	0b03      	lsrs	r3, r0, #12
10014e28:	428b      	cmp	r3, r1
10014e2a:	d328      	bcc.n	10014e7e <__aeabi_idiv+0x72>
10014e2c:	0c03      	lsrs	r3, r0, #16
10014e2e:	428b      	cmp	r3, r1
10014e30:	d30d      	bcc.n	10014e4e <__aeabi_idiv+0x42>
10014e32:	22ff      	movs	r2, #255	; 0xff
10014e34:	0209      	lsls	r1, r1, #8
10014e36:	ba12      	rev	r2, r2
10014e38:	0c03      	lsrs	r3, r0, #16
10014e3a:	428b      	cmp	r3, r1
10014e3c:	d302      	bcc.n	10014e44 <__aeabi_idiv+0x38>
10014e3e:	1212      	asrs	r2, r2, #8
10014e40:	0209      	lsls	r1, r1, #8
10014e42:	d065      	beq.n	10014f10 <__aeabi_idiv+0x104>
10014e44:	0b03      	lsrs	r3, r0, #12
10014e46:	428b      	cmp	r3, r1
10014e48:	d319      	bcc.n	10014e7e <__aeabi_idiv+0x72>
10014e4a:	e000      	b.n	10014e4e <__aeabi_idiv+0x42>
10014e4c:	0a09      	lsrs	r1, r1, #8
10014e4e:	0bc3      	lsrs	r3, r0, #15
10014e50:	428b      	cmp	r3, r1
10014e52:	d301      	bcc.n	10014e58 <__aeabi_idiv+0x4c>
10014e54:	03cb      	lsls	r3, r1, #15
10014e56:	1ac0      	subs	r0, r0, r3
10014e58:	4152      	adcs	r2, r2
10014e5a:	0b83      	lsrs	r3, r0, #14
10014e5c:	428b      	cmp	r3, r1
10014e5e:	d301      	bcc.n	10014e64 <__aeabi_idiv+0x58>
10014e60:	038b      	lsls	r3, r1, #14
10014e62:	1ac0      	subs	r0, r0, r3
10014e64:	4152      	adcs	r2, r2
10014e66:	0b43      	lsrs	r3, r0, #13
10014e68:	428b      	cmp	r3, r1
10014e6a:	d301      	bcc.n	10014e70 <__aeabi_idiv+0x64>
10014e6c:	034b      	lsls	r3, r1, #13
10014e6e:	1ac0      	subs	r0, r0, r3
10014e70:	4152      	adcs	r2, r2
10014e72:	0b03      	lsrs	r3, r0, #12
10014e74:	428b      	cmp	r3, r1
10014e76:	d301      	bcc.n	10014e7c <__aeabi_idiv+0x70>
10014e78:	030b      	lsls	r3, r1, #12
10014e7a:	1ac0      	subs	r0, r0, r3
10014e7c:	4152      	adcs	r2, r2
10014e7e:	0ac3      	lsrs	r3, r0, #11
10014e80:	428b      	cmp	r3, r1
10014e82:	d301      	bcc.n	10014e88 <__aeabi_idiv+0x7c>
10014e84:	02cb      	lsls	r3, r1, #11
10014e86:	1ac0      	subs	r0, r0, r3
10014e88:	4152      	adcs	r2, r2
10014e8a:	0a83      	lsrs	r3, r0, #10
10014e8c:	428b      	cmp	r3, r1
10014e8e:	d301      	bcc.n	10014e94 <__aeabi_idiv+0x88>
10014e90:	028b      	lsls	r3, r1, #10
10014e92:	1ac0      	subs	r0, r0, r3
10014e94:	4152      	adcs	r2, r2
10014e96:	0a43      	lsrs	r3, r0, #9
10014e98:	428b      	cmp	r3, r1
10014e9a:	d301      	bcc.n	10014ea0 <__aeabi_idiv+0x94>
10014e9c:	024b      	lsls	r3, r1, #9
10014e9e:	1ac0      	subs	r0, r0, r3
10014ea0:	4152      	adcs	r2, r2
10014ea2:	0a03      	lsrs	r3, r0, #8
10014ea4:	428b      	cmp	r3, r1
10014ea6:	d301      	bcc.n	10014eac <__aeabi_idiv+0xa0>
10014ea8:	020b      	lsls	r3, r1, #8
10014eaa:	1ac0      	subs	r0, r0, r3
10014eac:	4152      	adcs	r2, r2
10014eae:	d2cd      	bcs.n	10014e4c <__aeabi_idiv+0x40>
10014eb0:	09c3      	lsrs	r3, r0, #7
10014eb2:	428b      	cmp	r3, r1
10014eb4:	d301      	bcc.n	10014eba <__aeabi_idiv+0xae>
10014eb6:	01cb      	lsls	r3, r1, #7
10014eb8:	1ac0      	subs	r0, r0, r3
10014eba:	4152      	adcs	r2, r2
10014ebc:	0983      	lsrs	r3, r0, #6
10014ebe:	428b      	cmp	r3, r1
10014ec0:	d301      	bcc.n	10014ec6 <__aeabi_idiv+0xba>
10014ec2:	018b      	lsls	r3, r1, #6
10014ec4:	1ac0      	subs	r0, r0, r3
10014ec6:	4152      	adcs	r2, r2
10014ec8:	0943      	lsrs	r3, r0, #5
10014eca:	428b      	cmp	r3, r1
10014ecc:	d301      	bcc.n	10014ed2 <__aeabi_idiv+0xc6>
10014ece:	014b      	lsls	r3, r1, #5
10014ed0:	1ac0      	subs	r0, r0, r3
10014ed2:	4152      	adcs	r2, r2
10014ed4:	0903      	lsrs	r3, r0, #4
10014ed6:	428b      	cmp	r3, r1
10014ed8:	d301      	bcc.n	10014ede <__aeabi_idiv+0xd2>
10014eda:	010b      	lsls	r3, r1, #4
10014edc:	1ac0      	subs	r0, r0, r3
10014ede:	4152      	adcs	r2, r2
10014ee0:	08c3      	lsrs	r3, r0, #3
10014ee2:	428b      	cmp	r3, r1
10014ee4:	d301      	bcc.n	10014eea <__aeabi_idiv+0xde>
10014ee6:	00cb      	lsls	r3, r1, #3
10014ee8:	1ac0      	subs	r0, r0, r3
10014eea:	4152      	adcs	r2, r2
10014eec:	0883      	lsrs	r3, r0, #2
10014eee:	428b      	cmp	r3, r1
10014ef0:	d301      	bcc.n	10014ef6 <__aeabi_idiv+0xea>
10014ef2:	008b      	lsls	r3, r1, #2
10014ef4:	1ac0      	subs	r0, r0, r3
10014ef6:	4152      	adcs	r2, r2
10014ef8:	0843      	lsrs	r3, r0, #1
10014efa:	428b      	cmp	r3, r1
10014efc:	d301      	bcc.n	10014f02 <__aeabi_idiv+0xf6>
10014efe:	004b      	lsls	r3, r1, #1
10014f00:	1ac0      	subs	r0, r0, r3
10014f02:	4152      	adcs	r2, r2
10014f04:	1a41      	subs	r1, r0, r1
10014f06:	d200      	bcs.n	10014f0a <__aeabi_idiv+0xfe>
10014f08:	4601      	mov	r1, r0
10014f0a:	4152      	adcs	r2, r2
10014f0c:	4610      	mov	r0, r2
10014f0e:	4770      	bx	lr
10014f10:	e05d      	b.n	10014fce <__aeabi_idiv+0x1c2>
10014f12:	0fca      	lsrs	r2, r1, #31
10014f14:	d000      	beq.n	10014f18 <__aeabi_idiv+0x10c>
10014f16:	4249      	negs	r1, r1
10014f18:	1003      	asrs	r3, r0, #32
10014f1a:	d300      	bcc.n	10014f1e <__aeabi_idiv+0x112>
10014f1c:	4240      	negs	r0, r0
10014f1e:	4053      	eors	r3, r2
10014f20:	2200      	movs	r2, #0
10014f22:	469c      	mov	ip, r3
10014f24:	0903      	lsrs	r3, r0, #4
10014f26:	428b      	cmp	r3, r1
10014f28:	d32d      	bcc.n	10014f86 <__aeabi_idiv+0x17a>
10014f2a:	0a03      	lsrs	r3, r0, #8
10014f2c:	428b      	cmp	r3, r1
10014f2e:	d312      	bcc.n	10014f56 <__aeabi_idiv+0x14a>
10014f30:	22fc      	movs	r2, #252	; 0xfc
10014f32:	0189      	lsls	r1, r1, #6
10014f34:	ba12      	rev	r2, r2
10014f36:	0a03      	lsrs	r3, r0, #8
10014f38:	428b      	cmp	r3, r1
10014f3a:	d30c      	bcc.n	10014f56 <__aeabi_idiv+0x14a>
10014f3c:	0189      	lsls	r1, r1, #6
10014f3e:	1192      	asrs	r2, r2, #6
10014f40:	428b      	cmp	r3, r1
10014f42:	d308      	bcc.n	10014f56 <__aeabi_idiv+0x14a>
10014f44:	0189      	lsls	r1, r1, #6
10014f46:	1192      	asrs	r2, r2, #6
10014f48:	428b      	cmp	r3, r1
10014f4a:	d304      	bcc.n	10014f56 <__aeabi_idiv+0x14a>
10014f4c:	0189      	lsls	r1, r1, #6
10014f4e:	d03a      	beq.n	10014fc6 <__aeabi_idiv+0x1ba>
10014f50:	1192      	asrs	r2, r2, #6
10014f52:	e000      	b.n	10014f56 <__aeabi_idiv+0x14a>
10014f54:	0989      	lsrs	r1, r1, #6
10014f56:	09c3      	lsrs	r3, r0, #7
10014f58:	428b      	cmp	r3, r1
10014f5a:	d301      	bcc.n	10014f60 <__aeabi_idiv+0x154>
10014f5c:	01cb      	lsls	r3, r1, #7
10014f5e:	1ac0      	subs	r0, r0, r3
10014f60:	4152      	adcs	r2, r2
10014f62:	0983      	lsrs	r3, r0, #6
10014f64:	428b      	cmp	r3, r1
10014f66:	d301      	bcc.n	10014f6c <__aeabi_idiv+0x160>
10014f68:	018b      	lsls	r3, r1, #6
10014f6a:	1ac0      	subs	r0, r0, r3
10014f6c:	4152      	adcs	r2, r2
10014f6e:	0943      	lsrs	r3, r0, #5
10014f70:	428b      	cmp	r3, r1
10014f72:	d301      	bcc.n	10014f78 <__aeabi_idiv+0x16c>
10014f74:	014b      	lsls	r3, r1, #5
10014f76:	1ac0      	subs	r0, r0, r3
10014f78:	4152      	adcs	r2, r2
10014f7a:	0903      	lsrs	r3, r0, #4
10014f7c:	428b      	cmp	r3, r1
10014f7e:	d301      	bcc.n	10014f84 <__aeabi_idiv+0x178>
10014f80:	010b      	lsls	r3, r1, #4
10014f82:	1ac0      	subs	r0, r0, r3
10014f84:	4152      	adcs	r2, r2
10014f86:	08c3      	lsrs	r3, r0, #3
10014f88:	428b      	cmp	r3, r1
10014f8a:	d301      	bcc.n	10014f90 <__aeabi_idiv+0x184>
10014f8c:	00cb      	lsls	r3, r1, #3
10014f8e:	1ac0      	subs	r0, r0, r3
10014f90:	4152      	adcs	r2, r2
10014f92:	0883      	lsrs	r3, r0, #2
10014f94:	428b      	cmp	r3, r1
10014f96:	d301      	bcc.n	10014f9c <__aeabi_idiv+0x190>
10014f98:	008b      	lsls	r3, r1, #2
10014f9a:	1ac0      	subs	r0, r0, r3
10014f9c:	4152      	adcs	r2, r2
10014f9e:	d2d9      	bcs.n	10014f54 <__aeabi_idiv+0x148>
10014fa0:	0843      	lsrs	r3, r0, #1
10014fa2:	428b      	cmp	r3, r1
10014fa4:	d301      	bcc.n	10014faa <__aeabi_idiv+0x19e>
10014fa6:	004b      	lsls	r3, r1, #1
10014fa8:	1ac0      	subs	r0, r0, r3
10014faa:	4152      	adcs	r2, r2
10014fac:	1a41      	subs	r1, r0, r1
10014fae:	d200      	bcs.n	10014fb2 <__aeabi_idiv+0x1a6>
10014fb0:	4601      	mov	r1, r0
10014fb2:	4663      	mov	r3, ip
10014fb4:	4152      	adcs	r2, r2
10014fb6:	105b      	asrs	r3, r3, #1
10014fb8:	4610      	mov	r0, r2
10014fba:	d301      	bcc.n	10014fc0 <__aeabi_idiv+0x1b4>
10014fbc:	4240      	negs	r0, r0
10014fbe:	2b00      	cmp	r3, #0
10014fc0:	d500      	bpl.n	10014fc4 <__aeabi_idiv+0x1b8>
10014fc2:	4249      	negs	r1, r1
10014fc4:	4770      	bx	lr
10014fc6:	4663      	mov	r3, ip
10014fc8:	105b      	asrs	r3, r3, #1
10014fca:	d300      	bcc.n	10014fce <__aeabi_idiv+0x1c2>
10014fcc:	4240      	negs	r0, r0
10014fce:	b501      	push	{r0, lr}
10014fd0:	2000      	movs	r0, #0
10014fd2:	f000 f805 	bl	10014fe0 <__aeabi_idiv0>
10014fd6:	bd02      	pop	{r1, pc}

10014fd8 <__aeabi_idivmod>:
10014fd8:	2900      	cmp	r1, #0
10014fda:	d0f8      	beq.n	10014fce <__aeabi_idiv+0x1c2>
10014fdc:	e716      	b.n	10014e0c <__aeabi_idiv>
10014fde:	4770      	bx	lr

10014fe0 <__aeabi_idiv0>:
10014fe0:	4770      	bx	lr
10014fe2:	46c0      	nop			; (mov r8, r8)

10014fe4 <__aeabi_cdrcmple>:
10014fe4:	4684      	mov	ip, r0
10014fe6:	1c10      	adds	r0, r2, #0
10014fe8:	4662      	mov	r2, ip
10014fea:	468c      	mov	ip, r1
10014fec:	1c19      	adds	r1, r3, #0
10014fee:	4663      	mov	r3, ip
10014ff0:	e000      	b.n	10014ff4 <__aeabi_cdcmpeq>
10014ff2:	46c0      	nop			; (mov r8, r8)

10014ff4 <__aeabi_cdcmpeq>:
10014ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10014ff6:	f001 fa17 	bl	10016428 <__ledf2>
10014ffa:	2800      	cmp	r0, #0
10014ffc:	d401      	bmi.n	10015002 <__aeabi_cdcmpeq+0xe>
10014ffe:	2100      	movs	r1, #0
10015000:	42c8      	cmn	r0, r1
10015002:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015004 <__aeabi_dcmpeq>:
10015004:	b510      	push	{r4, lr}
10015006:	f001 f96b 	bl	100162e0 <__eqdf2>
1001500a:	4240      	negs	r0, r0
1001500c:	3001      	adds	r0, #1
1001500e:	bd10      	pop	{r4, pc}

10015010 <__aeabi_dcmplt>:
10015010:	b510      	push	{r4, lr}
10015012:	f001 fa09 	bl	10016428 <__ledf2>
10015016:	2800      	cmp	r0, #0
10015018:	db01      	blt.n	1001501e <__aeabi_dcmplt+0xe>
1001501a:	2000      	movs	r0, #0
1001501c:	bd10      	pop	{r4, pc}
1001501e:	2001      	movs	r0, #1
10015020:	bd10      	pop	{r4, pc}
10015022:	46c0      	nop			; (mov r8, r8)

10015024 <__aeabi_dcmple>:
10015024:	b510      	push	{r4, lr}
10015026:	f001 f9ff 	bl	10016428 <__ledf2>
1001502a:	2800      	cmp	r0, #0
1001502c:	dd01      	ble.n	10015032 <__aeabi_dcmple+0xe>
1001502e:	2000      	movs	r0, #0
10015030:	bd10      	pop	{r4, pc}
10015032:	2001      	movs	r0, #1
10015034:	bd10      	pop	{r4, pc}
10015036:	46c0      	nop			; (mov r8, r8)

10015038 <__aeabi_dcmpgt>:
10015038:	b510      	push	{r4, lr}
1001503a:	f001 f991 	bl	10016360 <__gedf2>
1001503e:	2800      	cmp	r0, #0
10015040:	dc01      	bgt.n	10015046 <__aeabi_dcmpgt+0xe>
10015042:	2000      	movs	r0, #0
10015044:	bd10      	pop	{r4, pc}
10015046:	2001      	movs	r0, #1
10015048:	bd10      	pop	{r4, pc}
1001504a:	46c0      	nop			; (mov r8, r8)

1001504c <__aeabi_dcmpge>:
1001504c:	b510      	push	{r4, lr}
1001504e:	f001 f987 	bl	10016360 <__gedf2>
10015052:	2800      	cmp	r0, #0
10015054:	da01      	bge.n	1001505a <__aeabi_dcmpge+0xe>
10015056:	2000      	movs	r0, #0
10015058:	bd10      	pop	{r4, pc}
1001505a:	2001      	movs	r0, #1
1001505c:	bd10      	pop	{r4, pc}
1001505e:	46c0      	nop			; (mov r8, r8)

10015060 <__aeabi_lmul>:
10015060:	b5f0      	push	{r4, r5, r6, r7, lr}
10015062:	464f      	mov	r7, r9
10015064:	4646      	mov	r6, r8
10015066:	b4c0      	push	{r6, r7}
10015068:	0416      	lsls	r6, r2, #16
1001506a:	0c36      	lsrs	r6, r6, #16
1001506c:	4699      	mov	r9, r3
1001506e:	0033      	movs	r3, r6
10015070:	0405      	lsls	r5, r0, #16
10015072:	0c2c      	lsrs	r4, r5, #16
10015074:	0c07      	lsrs	r7, r0, #16
10015076:	0c15      	lsrs	r5, r2, #16
10015078:	4363      	muls	r3, r4
1001507a:	437e      	muls	r6, r7
1001507c:	436f      	muls	r7, r5
1001507e:	4365      	muls	r5, r4
10015080:	0c1c      	lsrs	r4, r3, #16
10015082:	19ad      	adds	r5, r5, r6
10015084:	1964      	adds	r4, r4, r5
10015086:	469c      	mov	ip, r3
10015088:	42a6      	cmp	r6, r4
1001508a:	d903      	bls.n	10015094 <__aeabi_lmul+0x34>
1001508c:	2380      	movs	r3, #128	; 0x80
1001508e:	025b      	lsls	r3, r3, #9
10015090:	4698      	mov	r8, r3
10015092:	4447      	add	r7, r8
10015094:	4663      	mov	r3, ip
10015096:	0c25      	lsrs	r5, r4, #16
10015098:	19ef      	adds	r7, r5, r7
1001509a:	041d      	lsls	r5, r3, #16
1001509c:	464b      	mov	r3, r9
1001509e:	434a      	muls	r2, r1
100150a0:	4343      	muls	r3, r0
100150a2:	0c2d      	lsrs	r5, r5, #16
100150a4:	0424      	lsls	r4, r4, #16
100150a6:	1964      	adds	r4, r4, r5
100150a8:	1899      	adds	r1, r3, r2
100150aa:	19c9      	adds	r1, r1, r7
100150ac:	0020      	movs	r0, r4
100150ae:	bc0c      	pop	{r2, r3}
100150b0:	4690      	mov	r8, r2
100150b2:	4699      	mov	r9, r3
100150b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100150b6:	46c0      	nop			; (mov r8, r8)

100150b8 <__aeabi_d2uiz>:
100150b8:	b570      	push	{r4, r5, r6, lr}
100150ba:	2200      	movs	r2, #0
100150bc:	4b0c      	ldr	r3, [pc, #48]	; (100150f0 <__aeabi_d2uiz+0x38>)
100150be:	0004      	movs	r4, r0
100150c0:	000d      	movs	r5, r1
100150c2:	f7ff ffc3 	bl	1001504c <__aeabi_dcmpge>
100150c6:	2800      	cmp	r0, #0
100150c8:	d104      	bne.n	100150d4 <__aeabi_d2uiz+0x1c>
100150ca:	0020      	movs	r0, r4
100150cc:	0029      	movs	r1, r5
100150ce:	f002 f803 	bl	100170d8 <__aeabi_d2iz>
100150d2:	bd70      	pop	{r4, r5, r6, pc}
100150d4:	4b06      	ldr	r3, [pc, #24]	; (100150f0 <__aeabi_d2uiz+0x38>)
100150d6:	2200      	movs	r2, #0
100150d8:	0020      	movs	r0, r4
100150da:	0029      	movs	r1, r5
100150dc:	f001 fc88 	bl	100169f0 <__aeabi_dsub>
100150e0:	f001 fffa 	bl	100170d8 <__aeabi_d2iz>
100150e4:	2380      	movs	r3, #128	; 0x80
100150e6:	061b      	lsls	r3, r3, #24
100150e8:	469c      	mov	ip, r3
100150ea:	4460      	add	r0, ip
100150ec:	e7f1      	b.n	100150d2 <__aeabi_d2uiz+0x1a>
100150ee:	46c0      	nop			; (mov r8, r8)
100150f0:	41e00000 	.word	0x41e00000

100150f4 <__aeabi_fdiv>:
100150f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100150f6:	4656      	mov	r6, sl
100150f8:	4644      	mov	r4, r8
100150fa:	465f      	mov	r7, fp
100150fc:	464d      	mov	r5, r9
100150fe:	b4f0      	push	{r4, r5, r6, r7}
10015100:	0244      	lsls	r4, r0, #9
10015102:	0046      	lsls	r6, r0, #1
10015104:	0fc7      	lsrs	r7, r0, #31
10015106:	b083      	sub	sp, #12
10015108:	4688      	mov	r8, r1
1001510a:	0a65      	lsrs	r5, r4, #9
1001510c:	0e36      	lsrs	r6, r6, #24
1001510e:	46ba      	mov	sl, r7
10015110:	d03d      	beq.n	1001518e <__aeabi_fdiv+0x9a>
10015112:	2eff      	cmp	r6, #255	; 0xff
10015114:	d022      	beq.n	1001515c <__aeabi_fdiv+0x68>
10015116:	2300      	movs	r3, #0
10015118:	00ec      	lsls	r4, r5, #3
1001511a:	2580      	movs	r5, #128	; 0x80
1001511c:	4699      	mov	r9, r3
1001511e:	469b      	mov	fp, r3
10015120:	04ed      	lsls	r5, r5, #19
10015122:	4325      	orrs	r5, r4
10015124:	3e7f      	subs	r6, #127	; 0x7f
10015126:	4643      	mov	r3, r8
10015128:	025c      	lsls	r4, r3, #9
1001512a:	0058      	lsls	r0, r3, #1
1001512c:	0fdb      	lsrs	r3, r3, #31
1001512e:	0a64      	lsrs	r4, r4, #9
10015130:	0e00      	lsrs	r0, r0, #24
10015132:	4698      	mov	r8, r3
10015134:	d036      	beq.n	100151a4 <__aeabi_fdiv+0xb0>
10015136:	28ff      	cmp	r0, #255	; 0xff
10015138:	d030      	beq.n	1001519c <__aeabi_fdiv+0xa8>
1001513a:	2380      	movs	r3, #128	; 0x80
1001513c:	2100      	movs	r1, #0
1001513e:	00e4      	lsls	r4, r4, #3
10015140:	04db      	lsls	r3, r3, #19
10015142:	431c      	orrs	r4, r3
10015144:	387f      	subs	r0, #127	; 0x7f
10015146:	1a30      	subs	r0, r6, r0
10015148:	9001      	str	r0, [sp, #4]
1001514a:	4648      	mov	r0, r9
1001514c:	4642      	mov	r2, r8
1001514e:	4308      	orrs	r0, r1
10015150:	4e72      	ldr	r6, [pc, #456]	; (1001531c <__aeabi_fdiv+0x228>)
10015152:	0080      	lsls	r0, r0, #2
10015154:	5830      	ldr	r0, [r6, r0]
10015156:	407a      	eors	r2, r7
10015158:	0013      	movs	r3, r2
1001515a:	4687      	mov	pc, r0
1001515c:	2d00      	cmp	r5, #0
1001515e:	d144      	bne.n	100151ea <__aeabi_fdiv+0xf6>
10015160:	2308      	movs	r3, #8
10015162:	4699      	mov	r9, r3
10015164:	3b06      	subs	r3, #6
10015166:	469b      	mov	fp, r3
10015168:	e7dd      	b.n	10015126 <__aeabi_fdiv+0x32>
1001516a:	2201      	movs	r2, #1
1001516c:	20ff      	movs	r0, #255	; 0xff
1001516e:	2400      	movs	r4, #0
10015170:	401a      	ands	r2, r3
10015172:	0264      	lsls	r4, r4, #9
10015174:	05c3      	lsls	r3, r0, #23
10015176:	0a64      	lsrs	r4, r4, #9
10015178:	07d2      	lsls	r2, r2, #31
1001517a:	431c      	orrs	r4, r3
1001517c:	4314      	orrs	r4, r2
1001517e:	0020      	movs	r0, r4
10015180:	b003      	add	sp, #12
10015182:	bc3c      	pop	{r2, r3, r4, r5}
10015184:	4690      	mov	r8, r2
10015186:	4699      	mov	r9, r3
10015188:	46a2      	mov	sl, r4
1001518a:	46ab      	mov	fp, r5
1001518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001518e:	2d00      	cmp	r5, #0
10015190:	d120      	bne.n	100151d4 <__aeabi_fdiv+0xe0>
10015192:	2304      	movs	r3, #4
10015194:	4699      	mov	r9, r3
10015196:	3b03      	subs	r3, #3
10015198:	469b      	mov	fp, r3
1001519a:	e7c4      	b.n	10015126 <__aeabi_fdiv+0x32>
1001519c:	2c00      	cmp	r4, #0
1001519e:	d117      	bne.n	100151d0 <__aeabi_fdiv+0xdc>
100151a0:	2102      	movs	r1, #2
100151a2:	e002      	b.n	100151aa <__aeabi_fdiv+0xb6>
100151a4:	2c00      	cmp	r4, #0
100151a6:	d10a      	bne.n	100151be <__aeabi_fdiv+0xca>
100151a8:	2101      	movs	r1, #1
100151aa:	1a32      	subs	r2, r6, r0
100151ac:	9201      	str	r2, [sp, #4]
100151ae:	464a      	mov	r2, r9
100151b0:	4643      	mov	r3, r8
100151b2:	430a      	orrs	r2, r1
100151b4:	485a      	ldr	r0, [pc, #360]	; (10015320 <__aeabi_fdiv+0x22c>)
100151b6:	0092      	lsls	r2, r2, #2
100151b8:	5882      	ldr	r2, [r0, r2]
100151ba:	407b      	eors	r3, r7
100151bc:	4697      	mov	pc, r2
100151be:	0020      	movs	r0, r4
100151c0:	f002 f91a 	bl	100173f8 <__clzsi2>
100151c4:	1f43      	subs	r3, r0, #5
100151c6:	3076      	adds	r0, #118	; 0x76
100151c8:	409c      	lsls	r4, r3
100151ca:	4240      	negs	r0, r0
100151cc:	2100      	movs	r1, #0
100151ce:	e7ba      	b.n	10015146 <__aeabi_fdiv+0x52>
100151d0:	2103      	movs	r1, #3
100151d2:	e7b8      	b.n	10015146 <__aeabi_fdiv+0x52>
100151d4:	0028      	movs	r0, r5
100151d6:	f002 f90f 	bl	100173f8 <__clzsi2>
100151da:	1f43      	subs	r3, r0, #5
100151dc:	409d      	lsls	r5, r3
100151de:	2300      	movs	r3, #0
100151e0:	3076      	adds	r0, #118	; 0x76
100151e2:	4246      	negs	r6, r0
100151e4:	4699      	mov	r9, r3
100151e6:	469b      	mov	fp, r3
100151e8:	e79d      	b.n	10015126 <__aeabi_fdiv+0x32>
100151ea:	230c      	movs	r3, #12
100151ec:	4699      	mov	r9, r3
100151ee:	3b09      	subs	r3, #9
100151f0:	469b      	mov	fp, r3
100151f2:	e798      	b.n	10015126 <__aeabi_fdiv+0x32>
100151f4:	2480      	movs	r4, #128	; 0x80
100151f6:	2200      	movs	r2, #0
100151f8:	03e4      	lsls	r4, r4, #15
100151fa:	20ff      	movs	r0, #255	; 0xff
100151fc:	e7b9      	b.n	10015172 <__aeabi_fdiv+0x7e>
100151fe:	2400      	movs	r4, #0
10015200:	46c2      	mov	sl, r8
10015202:	468b      	mov	fp, r1
10015204:	465a      	mov	r2, fp
10015206:	4653      	mov	r3, sl
10015208:	2a02      	cmp	r2, #2
1001520a:	d0ae      	beq.n	1001516a <__aeabi_fdiv+0x76>
1001520c:	2a03      	cmp	r2, #3
1001520e:	d07d      	beq.n	1001530c <__aeabi_fdiv+0x218>
10015210:	2a01      	cmp	r2, #1
10015212:	d131      	bne.n	10015278 <__aeabi_fdiv+0x184>
10015214:	2201      	movs	r2, #1
10015216:	2000      	movs	r0, #0
10015218:	401a      	ands	r2, r3
1001521a:	2400      	movs	r4, #0
1001521c:	e7a9      	b.n	10015172 <__aeabi_fdiv+0x7e>
1001521e:	2201      	movs	r2, #1
10015220:	1a10      	subs	r0, r2, r0
10015222:	281b      	cmp	r0, #27
10015224:	dd56      	ble.n	100152d4 <__aeabi_fdiv+0x1e0>
10015226:	401a      	ands	r2, r3
10015228:	2000      	movs	r0, #0
1001522a:	2400      	movs	r4, #0
1001522c:	e7a1      	b.n	10015172 <__aeabi_fdiv+0x7e>
1001522e:	2380      	movs	r3, #128	; 0x80
10015230:	03db      	lsls	r3, r3, #15
10015232:	421d      	tst	r5, r3
10015234:	d14b      	bne.n	100152ce <__aeabi_fdiv+0x1da>
10015236:	2380      	movs	r3, #128	; 0x80
10015238:	03db      	lsls	r3, r3, #15
1001523a:	432b      	orrs	r3, r5
1001523c:	025c      	lsls	r4, r3, #9
1001523e:	0a64      	lsrs	r4, r4, #9
10015240:	003a      	movs	r2, r7
10015242:	20ff      	movs	r0, #255	; 0xff
10015244:	e795      	b.n	10015172 <__aeabi_fdiv+0x7e>
10015246:	016d      	lsls	r5, r5, #5
10015248:	0160      	lsls	r0, r4, #5
1001524a:	4285      	cmp	r5, r0
1001524c:	d230      	bcs.n	100152b0 <__aeabi_fdiv+0x1bc>
1001524e:	9a01      	ldr	r2, [sp, #4]
10015250:	2400      	movs	r4, #0
10015252:	3a01      	subs	r2, #1
10015254:	9201      	str	r2, [sp, #4]
10015256:	221b      	movs	r2, #27
10015258:	2701      	movs	r7, #1
1001525a:	0029      	movs	r1, r5
1001525c:	0064      	lsls	r4, r4, #1
1001525e:	006d      	lsls	r5, r5, #1
10015260:	2900      	cmp	r1, #0
10015262:	db01      	blt.n	10015268 <__aeabi_fdiv+0x174>
10015264:	42a8      	cmp	r0, r5
10015266:	d801      	bhi.n	1001526c <__aeabi_fdiv+0x178>
10015268:	1a2d      	subs	r5, r5, r0
1001526a:	433c      	orrs	r4, r7
1001526c:	3a01      	subs	r2, #1
1001526e:	2a00      	cmp	r2, #0
10015270:	d1f3      	bne.n	1001525a <__aeabi_fdiv+0x166>
10015272:	1e6a      	subs	r2, r5, #1
10015274:	4195      	sbcs	r5, r2
10015276:	432c      	orrs	r4, r5
10015278:	9801      	ldr	r0, [sp, #4]
1001527a:	307f      	adds	r0, #127	; 0x7f
1001527c:	2800      	cmp	r0, #0
1001527e:	ddce      	ble.n	1001521e <__aeabi_fdiv+0x12a>
10015280:	0762      	lsls	r2, r4, #29
10015282:	d004      	beq.n	1001528e <__aeabi_fdiv+0x19a>
10015284:	220f      	movs	r2, #15
10015286:	4022      	ands	r2, r4
10015288:	2a04      	cmp	r2, #4
1001528a:	d000      	beq.n	1001528e <__aeabi_fdiv+0x19a>
1001528c:	3404      	adds	r4, #4
1001528e:	0122      	lsls	r2, r4, #4
10015290:	d503      	bpl.n	1001529a <__aeabi_fdiv+0x1a6>
10015292:	4a24      	ldr	r2, [pc, #144]	; (10015324 <__aeabi_fdiv+0x230>)
10015294:	9801      	ldr	r0, [sp, #4]
10015296:	4014      	ands	r4, r2
10015298:	3080      	adds	r0, #128	; 0x80
1001529a:	28fe      	cmp	r0, #254	; 0xfe
1001529c:	dd00      	ble.n	100152a0 <__aeabi_fdiv+0x1ac>
1001529e:	e764      	b.n	1001516a <__aeabi_fdiv+0x76>
100152a0:	2201      	movs	r2, #1
100152a2:	01a4      	lsls	r4, r4, #6
100152a4:	0a64      	lsrs	r4, r4, #9
100152a6:	b2c0      	uxtb	r0, r0
100152a8:	401a      	ands	r2, r3
100152aa:	e762      	b.n	10015172 <__aeabi_fdiv+0x7e>
100152ac:	002c      	movs	r4, r5
100152ae:	e7a9      	b.n	10015204 <__aeabi_fdiv+0x110>
100152b0:	1a2d      	subs	r5, r5, r0
100152b2:	221a      	movs	r2, #26
100152b4:	2401      	movs	r4, #1
100152b6:	e7cf      	b.n	10015258 <__aeabi_fdiv+0x164>
100152b8:	026b      	lsls	r3, r5, #9
100152ba:	d5bc      	bpl.n	10015236 <__aeabi_fdiv+0x142>
100152bc:	2400      	movs	r4, #0
100152be:	2380      	movs	r3, #128	; 0x80
100152c0:	03db      	lsls	r3, r3, #15
100152c2:	431c      	orrs	r4, r3
100152c4:	0264      	lsls	r4, r4, #9
100152c6:	0a64      	lsrs	r4, r4, #9
100152c8:	4642      	mov	r2, r8
100152ca:	20ff      	movs	r0, #255	; 0xff
100152cc:	e751      	b.n	10015172 <__aeabi_fdiv+0x7e>
100152ce:	421c      	tst	r4, r3
100152d0:	d1b3      	bne.n	1001523a <__aeabi_fdiv+0x146>
100152d2:	e7f4      	b.n	100152be <__aeabi_fdiv+0x1ca>
100152d4:	0021      	movs	r1, r4
100152d6:	2220      	movs	r2, #32
100152d8:	40c1      	lsrs	r1, r0
100152da:	1a10      	subs	r0, r2, r0
100152dc:	4084      	lsls	r4, r0
100152de:	1e62      	subs	r2, r4, #1
100152e0:	4194      	sbcs	r4, r2
100152e2:	430c      	orrs	r4, r1
100152e4:	0762      	lsls	r2, r4, #29
100152e6:	d004      	beq.n	100152f2 <__aeabi_fdiv+0x1fe>
100152e8:	220f      	movs	r2, #15
100152ea:	4022      	ands	r2, r4
100152ec:	2a04      	cmp	r2, #4
100152ee:	d000      	beq.n	100152f2 <__aeabi_fdiv+0x1fe>
100152f0:	3404      	adds	r4, #4
100152f2:	0162      	lsls	r2, r4, #5
100152f4:	d504      	bpl.n	10015300 <__aeabi_fdiv+0x20c>
100152f6:	2201      	movs	r2, #1
100152f8:	2001      	movs	r0, #1
100152fa:	401a      	ands	r2, r3
100152fc:	2400      	movs	r4, #0
100152fe:	e738      	b.n	10015172 <__aeabi_fdiv+0x7e>
10015300:	2201      	movs	r2, #1
10015302:	01a4      	lsls	r4, r4, #6
10015304:	0a64      	lsrs	r4, r4, #9
10015306:	401a      	ands	r2, r3
10015308:	2000      	movs	r0, #0
1001530a:	e732      	b.n	10015172 <__aeabi_fdiv+0x7e>
1001530c:	2380      	movs	r3, #128	; 0x80
1001530e:	03db      	lsls	r3, r3, #15
10015310:	431c      	orrs	r4, r3
10015312:	0264      	lsls	r4, r4, #9
10015314:	0a64      	lsrs	r4, r4, #9
10015316:	4652      	mov	r2, sl
10015318:	20ff      	movs	r0, #255	; 0xff
1001531a:	e72a      	b.n	10015172 <__aeabi_fdiv+0x7e>
1001531c:	10018e48 	.word	0x10018e48
10015320:	10018e88 	.word	0x10018e88
10015324:	f7ffffff 	.word	0xf7ffffff

10015328 <__aeabi_fmul>:
10015328:	b5f0      	push	{r4, r5, r6, r7, lr}
1001532a:	4657      	mov	r7, sl
1001532c:	464e      	mov	r6, r9
1001532e:	4645      	mov	r5, r8
10015330:	0043      	lsls	r3, r0, #1
10015332:	b4e0      	push	{r5, r6, r7}
10015334:	0246      	lsls	r6, r0, #9
10015336:	4688      	mov	r8, r1
10015338:	0a76      	lsrs	r6, r6, #9
1001533a:	0e1f      	lsrs	r7, r3, #24
1001533c:	0fc4      	lsrs	r4, r0, #31
1001533e:	2f00      	cmp	r7, #0
10015340:	d047      	beq.n	100153d2 <__aeabi_fmul+0xaa>
10015342:	2fff      	cmp	r7, #255	; 0xff
10015344:	d025      	beq.n	10015392 <__aeabi_fmul+0x6a>
10015346:	2300      	movs	r3, #0
10015348:	2580      	movs	r5, #128	; 0x80
1001534a:	469a      	mov	sl, r3
1001534c:	4699      	mov	r9, r3
1001534e:	00f6      	lsls	r6, r6, #3
10015350:	04ed      	lsls	r5, r5, #19
10015352:	432e      	orrs	r6, r5
10015354:	3f7f      	subs	r7, #127	; 0x7f
10015356:	4643      	mov	r3, r8
10015358:	4642      	mov	r2, r8
1001535a:	025d      	lsls	r5, r3, #9
1001535c:	0fd2      	lsrs	r2, r2, #31
1001535e:	005b      	lsls	r3, r3, #1
10015360:	0a6d      	lsrs	r5, r5, #9
10015362:	0e1b      	lsrs	r3, r3, #24
10015364:	4690      	mov	r8, r2
10015366:	d040      	beq.n	100153ea <__aeabi_fmul+0xc2>
10015368:	2bff      	cmp	r3, #255	; 0xff
1001536a:	d039      	beq.n	100153e0 <__aeabi_fmul+0xb8>
1001536c:	2280      	movs	r2, #128	; 0x80
1001536e:	2000      	movs	r0, #0
10015370:	00ed      	lsls	r5, r5, #3
10015372:	04d2      	lsls	r2, r2, #19
10015374:	4315      	orrs	r5, r2
10015376:	3b7f      	subs	r3, #127	; 0x7f
10015378:	18fb      	adds	r3, r7, r3
1001537a:	4642      	mov	r2, r8
1001537c:	4657      	mov	r7, sl
1001537e:	1c59      	adds	r1, r3, #1
10015380:	4062      	eors	r2, r4
10015382:	468c      	mov	ip, r1
10015384:	4307      	orrs	r7, r0
10015386:	2f0f      	cmp	r7, #15
10015388:	d85c      	bhi.n	10015444 <__aeabi_fmul+0x11c>
1001538a:	496f      	ldr	r1, [pc, #444]	; (10015548 <__aeabi_fmul+0x220>)
1001538c:	00bf      	lsls	r7, r7, #2
1001538e:	59c9      	ldr	r1, [r1, r7]
10015390:	468f      	mov	pc, r1
10015392:	2e00      	cmp	r6, #0
10015394:	d145      	bne.n	10015422 <__aeabi_fmul+0xfa>
10015396:	2308      	movs	r3, #8
10015398:	469a      	mov	sl, r3
1001539a:	3b06      	subs	r3, #6
1001539c:	4699      	mov	r9, r3
1001539e:	e7da      	b.n	10015356 <__aeabi_fmul+0x2e>
100153a0:	4642      	mov	r2, r8
100153a2:	2802      	cmp	r0, #2
100153a4:	d02d      	beq.n	10015402 <__aeabi_fmul+0xda>
100153a6:	2803      	cmp	r0, #3
100153a8:	d100      	bne.n	100153ac <__aeabi_fmul+0x84>
100153aa:	e0c3      	b.n	10015534 <__aeabi_fmul+0x20c>
100153ac:	2801      	cmp	r0, #1
100153ae:	d000      	beq.n	100153b2 <__aeabi_fmul+0x8a>
100153b0:	e0a2      	b.n	100154f8 <__aeabi_fmul+0x1d0>
100153b2:	2500      	movs	r5, #0
100153b4:	2600      	movs	r6, #0
100153b6:	4002      	ands	r2, r0
100153b8:	b2d4      	uxtb	r4, r2
100153ba:	0276      	lsls	r6, r6, #9
100153bc:	05ed      	lsls	r5, r5, #23
100153be:	0a76      	lsrs	r6, r6, #9
100153c0:	432e      	orrs	r6, r5
100153c2:	07e4      	lsls	r4, r4, #31
100153c4:	4326      	orrs	r6, r4
100153c6:	0030      	movs	r0, r6
100153c8:	bc1c      	pop	{r2, r3, r4}
100153ca:	4690      	mov	r8, r2
100153cc:	4699      	mov	r9, r3
100153ce:	46a2      	mov	sl, r4
100153d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100153d2:	2e00      	cmp	r6, #0
100153d4:	d11a      	bne.n	1001540c <__aeabi_fmul+0xe4>
100153d6:	2304      	movs	r3, #4
100153d8:	469a      	mov	sl, r3
100153da:	3b03      	subs	r3, #3
100153dc:	4699      	mov	r9, r3
100153de:	e7ba      	b.n	10015356 <__aeabi_fmul+0x2e>
100153e0:	002a      	movs	r2, r5
100153e2:	1e51      	subs	r1, r2, #1
100153e4:	418a      	sbcs	r2, r1
100153e6:	1c90      	adds	r0, r2, #2
100153e8:	e7c6      	b.n	10015378 <__aeabi_fmul+0x50>
100153ea:	2001      	movs	r0, #1
100153ec:	2d00      	cmp	r5, #0
100153ee:	d0c3      	beq.n	10015378 <__aeabi_fmul+0x50>
100153f0:	0028      	movs	r0, r5
100153f2:	f002 f801 	bl	100173f8 <__clzsi2>
100153f6:	1f43      	subs	r3, r0, #5
100153f8:	3076      	adds	r0, #118	; 0x76
100153fa:	409d      	lsls	r5, r3
100153fc:	4243      	negs	r3, r0
100153fe:	2000      	movs	r0, #0
10015400:	e7ba      	b.n	10015378 <__aeabi_fmul+0x50>
10015402:	2401      	movs	r4, #1
10015404:	25ff      	movs	r5, #255	; 0xff
10015406:	4014      	ands	r4, r2
10015408:	2600      	movs	r6, #0
1001540a:	e7d6      	b.n	100153ba <__aeabi_fmul+0x92>
1001540c:	0030      	movs	r0, r6
1001540e:	f001 fff3 	bl	100173f8 <__clzsi2>
10015412:	1f43      	subs	r3, r0, #5
10015414:	409e      	lsls	r6, r3
10015416:	2300      	movs	r3, #0
10015418:	3076      	adds	r0, #118	; 0x76
1001541a:	4247      	negs	r7, r0
1001541c:	469a      	mov	sl, r3
1001541e:	4699      	mov	r9, r3
10015420:	e799      	b.n	10015356 <__aeabi_fmul+0x2e>
10015422:	230c      	movs	r3, #12
10015424:	469a      	mov	sl, r3
10015426:	3b09      	subs	r3, #9
10015428:	4699      	mov	r9, r3
1001542a:	e794      	b.n	10015356 <__aeabi_fmul+0x2e>
1001542c:	2680      	movs	r6, #128	; 0x80
1001542e:	2400      	movs	r4, #0
10015430:	03f6      	lsls	r6, r6, #15
10015432:	25ff      	movs	r5, #255	; 0xff
10015434:	e7c1      	b.n	100153ba <__aeabi_fmul+0x92>
10015436:	0035      	movs	r5, r6
10015438:	4648      	mov	r0, r9
1001543a:	e7b2      	b.n	100153a2 <__aeabi_fmul+0x7a>
1001543c:	0035      	movs	r5, r6
1001543e:	0022      	movs	r2, r4
10015440:	4648      	mov	r0, r9
10015442:	e7ae      	b.n	100153a2 <__aeabi_fmul+0x7a>
10015444:	0429      	lsls	r1, r5, #16
10015446:	0c09      	lsrs	r1, r1, #16
10015448:	0008      	movs	r0, r1
1001544a:	0c37      	lsrs	r7, r6, #16
1001544c:	0436      	lsls	r6, r6, #16
1001544e:	0c36      	lsrs	r6, r6, #16
10015450:	0c2c      	lsrs	r4, r5, #16
10015452:	4379      	muls	r1, r7
10015454:	4370      	muls	r0, r6
10015456:	4367      	muls	r7, r4
10015458:	4374      	muls	r4, r6
1001545a:	0c06      	lsrs	r6, r0, #16
1001545c:	1864      	adds	r4, r4, r1
1001545e:	1936      	adds	r6, r6, r4
10015460:	42b1      	cmp	r1, r6
10015462:	d903      	bls.n	1001546c <__aeabi_fmul+0x144>
10015464:	2180      	movs	r1, #128	; 0x80
10015466:	0249      	lsls	r1, r1, #9
10015468:	4688      	mov	r8, r1
1001546a:	4447      	add	r7, r8
1001546c:	0400      	lsls	r0, r0, #16
1001546e:	0c00      	lsrs	r0, r0, #16
10015470:	0431      	lsls	r1, r6, #16
10015472:	1809      	adds	r1, r1, r0
10015474:	018d      	lsls	r5, r1, #6
10015476:	1e68      	subs	r0, r5, #1
10015478:	4185      	sbcs	r5, r0
1001547a:	0e89      	lsrs	r1, r1, #26
1001547c:	4329      	orrs	r1, r5
1001547e:	0c35      	lsrs	r5, r6, #16
10015480:	19ed      	adds	r5, r5, r7
10015482:	01ad      	lsls	r5, r5, #6
10015484:	430d      	orrs	r5, r1
10015486:	0129      	lsls	r1, r5, #4
10015488:	d504      	bpl.n	10015494 <__aeabi_fmul+0x16c>
1001548a:	2301      	movs	r3, #1
1001548c:	0869      	lsrs	r1, r5, #1
1001548e:	401d      	ands	r5, r3
10015490:	4663      	mov	r3, ip
10015492:	430d      	orrs	r5, r1
10015494:	0019      	movs	r1, r3
10015496:	317f      	adds	r1, #127	; 0x7f
10015498:	2900      	cmp	r1, #0
1001549a:	dd25      	ble.n	100154e8 <__aeabi_fmul+0x1c0>
1001549c:	0768      	lsls	r0, r5, #29
1001549e:	d004      	beq.n	100154aa <__aeabi_fmul+0x182>
100154a0:	200f      	movs	r0, #15
100154a2:	4028      	ands	r0, r5
100154a4:	2804      	cmp	r0, #4
100154a6:	d000      	beq.n	100154aa <__aeabi_fmul+0x182>
100154a8:	3504      	adds	r5, #4
100154aa:	0128      	lsls	r0, r5, #4
100154ac:	d503      	bpl.n	100154b6 <__aeabi_fmul+0x18e>
100154ae:	4927      	ldr	r1, [pc, #156]	; (1001554c <__aeabi_fmul+0x224>)
100154b0:	3380      	adds	r3, #128	; 0x80
100154b2:	400d      	ands	r5, r1
100154b4:	0019      	movs	r1, r3
100154b6:	29fe      	cmp	r1, #254	; 0xfe
100154b8:	dca3      	bgt.n	10015402 <__aeabi_fmul+0xda>
100154ba:	2401      	movs	r4, #1
100154bc:	01ad      	lsls	r5, r5, #6
100154be:	0a6e      	lsrs	r6, r5, #9
100154c0:	4014      	ands	r4, r2
100154c2:	b2cd      	uxtb	r5, r1
100154c4:	e779      	b.n	100153ba <__aeabi_fmul+0x92>
100154c6:	2080      	movs	r0, #128	; 0x80
100154c8:	03c0      	lsls	r0, r0, #15
100154ca:	4206      	tst	r6, r0
100154cc:	d007      	beq.n	100154de <__aeabi_fmul+0x1b6>
100154ce:	4205      	tst	r5, r0
100154d0:	d105      	bne.n	100154de <__aeabi_fmul+0x1b6>
100154d2:	4328      	orrs	r0, r5
100154d4:	0246      	lsls	r6, r0, #9
100154d6:	0a76      	lsrs	r6, r6, #9
100154d8:	4644      	mov	r4, r8
100154da:	25ff      	movs	r5, #255	; 0xff
100154dc:	e76d      	b.n	100153ba <__aeabi_fmul+0x92>
100154de:	4306      	orrs	r6, r0
100154e0:	0276      	lsls	r6, r6, #9
100154e2:	0a76      	lsrs	r6, r6, #9
100154e4:	25ff      	movs	r5, #255	; 0xff
100154e6:	e768      	b.n	100153ba <__aeabi_fmul+0x92>
100154e8:	2401      	movs	r4, #1
100154ea:	1a61      	subs	r1, r4, r1
100154ec:	291b      	cmp	r1, #27
100154ee:	dd05      	ble.n	100154fc <__aeabi_fmul+0x1d4>
100154f0:	4014      	ands	r4, r2
100154f2:	2500      	movs	r5, #0
100154f4:	2600      	movs	r6, #0
100154f6:	e760      	b.n	100153ba <__aeabi_fmul+0x92>
100154f8:	4663      	mov	r3, ip
100154fa:	e7cb      	b.n	10015494 <__aeabi_fmul+0x16c>
100154fc:	002e      	movs	r6, r5
100154fe:	2320      	movs	r3, #32
10015500:	40ce      	lsrs	r6, r1
10015502:	1a59      	subs	r1, r3, r1
10015504:	408d      	lsls	r5, r1
10015506:	1e6b      	subs	r3, r5, #1
10015508:	419d      	sbcs	r5, r3
1001550a:	432e      	orrs	r6, r5
1001550c:	0773      	lsls	r3, r6, #29
1001550e:	d004      	beq.n	1001551a <__aeabi_fmul+0x1f2>
10015510:	230f      	movs	r3, #15
10015512:	4033      	ands	r3, r6
10015514:	2b04      	cmp	r3, #4
10015516:	d000      	beq.n	1001551a <__aeabi_fmul+0x1f2>
10015518:	3604      	adds	r6, #4
1001551a:	0173      	lsls	r3, r6, #5
1001551c:	d504      	bpl.n	10015528 <__aeabi_fmul+0x200>
1001551e:	2401      	movs	r4, #1
10015520:	2501      	movs	r5, #1
10015522:	4014      	ands	r4, r2
10015524:	2600      	movs	r6, #0
10015526:	e748      	b.n	100153ba <__aeabi_fmul+0x92>
10015528:	2401      	movs	r4, #1
1001552a:	01b6      	lsls	r6, r6, #6
1001552c:	0a76      	lsrs	r6, r6, #9
1001552e:	4014      	ands	r4, r2
10015530:	2500      	movs	r5, #0
10015532:	e742      	b.n	100153ba <__aeabi_fmul+0x92>
10015534:	2680      	movs	r6, #128	; 0x80
10015536:	2401      	movs	r4, #1
10015538:	03f6      	lsls	r6, r6, #15
1001553a:	432e      	orrs	r6, r5
1001553c:	0276      	lsls	r6, r6, #9
1001553e:	0a76      	lsrs	r6, r6, #9
10015540:	4014      	ands	r4, r2
10015542:	25ff      	movs	r5, #255	; 0xff
10015544:	e739      	b.n	100153ba <__aeabi_fmul+0x92>
10015546:	46c0      	nop			; (mov r8, r8)
10015548:	10018ec8 	.word	0x10018ec8
1001554c:	f7ffffff 	.word	0xf7ffffff

10015550 <__aeabi_i2f>:
10015550:	b570      	push	{r4, r5, r6, lr}
10015552:	2800      	cmp	r0, #0
10015554:	d030      	beq.n	100155b8 <__aeabi_i2f+0x68>
10015556:	17c3      	asrs	r3, r0, #31
10015558:	18c5      	adds	r5, r0, r3
1001555a:	405d      	eors	r5, r3
1001555c:	0fc4      	lsrs	r4, r0, #31
1001555e:	0028      	movs	r0, r5
10015560:	f001 ff4a 	bl	100173f8 <__clzsi2>
10015564:	239e      	movs	r3, #158	; 0x9e
10015566:	1a1b      	subs	r3, r3, r0
10015568:	2b96      	cmp	r3, #150	; 0x96
1001556a:	dc0d      	bgt.n	10015588 <__aeabi_i2f+0x38>
1001556c:	2296      	movs	r2, #150	; 0x96
1001556e:	1ad2      	subs	r2, r2, r3
10015570:	4095      	lsls	r5, r2
10015572:	026a      	lsls	r2, r5, #9
10015574:	0a52      	lsrs	r2, r2, #9
10015576:	b2d8      	uxtb	r0, r3
10015578:	0252      	lsls	r2, r2, #9
1001557a:	05c0      	lsls	r0, r0, #23
1001557c:	0a52      	lsrs	r2, r2, #9
1001557e:	07e4      	lsls	r4, r4, #31
10015580:	4302      	orrs	r2, r0
10015582:	4322      	orrs	r2, r4
10015584:	0010      	movs	r0, r2
10015586:	bd70      	pop	{r4, r5, r6, pc}
10015588:	2b99      	cmp	r3, #153	; 0x99
1001558a:	dc19      	bgt.n	100155c0 <__aeabi_i2f+0x70>
1001558c:	2299      	movs	r2, #153	; 0x99
1001558e:	1ad2      	subs	r2, r2, r3
10015590:	4095      	lsls	r5, r2
10015592:	4a12      	ldr	r2, [pc, #72]	; (100155dc <__aeabi_i2f+0x8c>)
10015594:	402a      	ands	r2, r5
10015596:	0769      	lsls	r1, r5, #29
10015598:	d004      	beq.n	100155a4 <__aeabi_i2f+0x54>
1001559a:	210f      	movs	r1, #15
1001559c:	400d      	ands	r5, r1
1001559e:	2d04      	cmp	r5, #4
100155a0:	d000      	beq.n	100155a4 <__aeabi_i2f+0x54>
100155a2:	3204      	adds	r2, #4
100155a4:	0151      	lsls	r1, r2, #5
100155a6:	d503      	bpl.n	100155b0 <__aeabi_i2f+0x60>
100155a8:	4b0c      	ldr	r3, [pc, #48]	; (100155dc <__aeabi_i2f+0x8c>)
100155aa:	401a      	ands	r2, r3
100155ac:	239f      	movs	r3, #159	; 0x9f
100155ae:	1a1b      	subs	r3, r3, r0
100155b0:	0192      	lsls	r2, r2, #6
100155b2:	0a52      	lsrs	r2, r2, #9
100155b4:	b2d8      	uxtb	r0, r3
100155b6:	e7df      	b.n	10015578 <__aeabi_i2f+0x28>
100155b8:	2400      	movs	r4, #0
100155ba:	2000      	movs	r0, #0
100155bc:	2200      	movs	r2, #0
100155be:	e7db      	b.n	10015578 <__aeabi_i2f+0x28>
100155c0:	2205      	movs	r2, #5
100155c2:	002e      	movs	r6, r5
100155c4:	1a12      	subs	r2, r2, r0
100155c6:	21b9      	movs	r1, #185	; 0xb9
100155c8:	40d6      	lsrs	r6, r2
100155ca:	002a      	movs	r2, r5
100155cc:	1ac9      	subs	r1, r1, r3
100155ce:	408a      	lsls	r2, r1
100155d0:	1e55      	subs	r5, r2, #1
100155d2:	41aa      	sbcs	r2, r5
100155d4:	0035      	movs	r5, r6
100155d6:	4315      	orrs	r5, r2
100155d8:	e7db      	b.n	10015592 <__aeabi_i2f+0x42>
100155da:	46c0      	nop			; (mov r8, r8)
100155dc:	fbffffff 	.word	0xfbffffff

100155e0 <__aeabi_ui2f>:
100155e0:	b570      	push	{r4, r5, r6, lr}
100155e2:	1e04      	subs	r4, r0, #0
100155e4:	d028      	beq.n	10015638 <__aeabi_ui2f+0x58>
100155e6:	f001 ff07 	bl	100173f8 <__clzsi2>
100155ea:	239e      	movs	r3, #158	; 0x9e
100155ec:	1a1b      	subs	r3, r3, r0
100155ee:	2b96      	cmp	r3, #150	; 0x96
100155f0:	dc0a      	bgt.n	10015608 <__aeabi_ui2f+0x28>
100155f2:	2296      	movs	r2, #150	; 0x96
100155f4:	1ad2      	subs	r2, r2, r3
100155f6:	4094      	lsls	r4, r2
100155f8:	0262      	lsls	r2, r4, #9
100155fa:	0a52      	lsrs	r2, r2, #9
100155fc:	b2d8      	uxtb	r0, r3
100155fe:	0252      	lsls	r2, r2, #9
10015600:	0a52      	lsrs	r2, r2, #9
10015602:	05c0      	lsls	r0, r0, #23
10015604:	4310      	orrs	r0, r2
10015606:	bd70      	pop	{r4, r5, r6, pc}
10015608:	2b99      	cmp	r3, #153	; 0x99
1001560a:	dc18      	bgt.n	1001563e <__aeabi_ui2f+0x5e>
1001560c:	2299      	movs	r2, #153	; 0x99
1001560e:	1ad2      	subs	r2, r2, r3
10015610:	4094      	lsls	r4, r2
10015612:	4a11      	ldr	r2, [pc, #68]	; (10015658 <__aeabi_ui2f+0x78>)
10015614:	4022      	ands	r2, r4
10015616:	0761      	lsls	r1, r4, #29
10015618:	d004      	beq.n	10015624 <__aeabi_ui2f+0x44>
1001561a:	210f      	movs	r1, #15
1001561c:	400c      	ands	r4, r1
1001561e:	2c04      	cmp	r4, #4
10015620:	d000      	beq.n	10015624 <__aeabi_ui2f+0x44>
10015622:	3204      	adds	r2, #4
10015624:	0151      	lsls	r1, r2, #5
10015626:	d503      	bpl.n	10015630 <__aeabi_ui2f+0x50>
10015628:	4b0b      	ldr	r3, [pc, #44]	; (10015658 <__aeabi_ui2f+0x78>)
1001562a:	401a      	ands	r2, r3
1001562c:	239f      	movs	r3, #159	; 0x9f
1001562e:	1a1b      	subs	r3, r3, r0
10015630:	0192      	lsls	r2, r2, #6
10015632:	0a52      	lsrs	r2, r2, #9
10015634:	b2d8      	uxtb	r0, r3
10015636:	e7e2      	b.n	100155fe <__aeabi_ui2f+0x1e>
10015638:	2000      	movs	r0, #0
1001563a:	2200      	movs	r2, #0
1001563c:	e7df      	b.n	100155fe <__aeabi_ui2f+0x1e>
1001563e:	2205      	movs	r2, #5
10015640:	0025      	movs	r5, r4
10015642:	1a12      	subs	r2, r2, r0
10015644:	21b9      	movs	r1, #185	; 0xb9
10015646:	40d5      	lsrs	r5, r2
10015648:	0022      	movs	r2, r4
1001564a:	1ac9      	subs	r1, r1, r3
1001564c:	408a      	lsls	r2, r1
1001564e:	1e54      	subs	r4, r2, #1
10015650:	41a2      	sbcs	r2, r4
10015652:	002c      	movs	r4, r5
10015654:	4314      	orrs	r4, r2
10015656:	e7dc      	b.n	10015612 <__aeabi_ui2f+0x32>
10015658:	fbffffff 	.word	0xfbffffff

1001565c <__aeabi_dadd>:
1001565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001565e:	4656      	mov	r6, sl
10015660:	465f      	mov	r7, fp
10015662:	464d      	mov	r5, r9
10015664:	4644      	mov	r4, r8
10015666:	b4f0      	push	{r4, r5, r6, r7}
10015668:	000f      	movs	r7, r1
1001566a:	0ffd      	lsrs	r5, r7, #31
1001566c:	46aa      	mov	sl, r5
1001566e:	0309      	lsls	r1, r1, #12
10015670:	007c      	lsls	r4, r7, #1
10015672:	002e      	movs	r6, r5
10015674:	005f      	lsls	r7, r3, #1
10015676:	0f45      	lsrs	r5, r0, #29
10015678:	0a49      	lsrs	r1, r1, #9
1001567a:	0d7f      	lsrs	r7, r7, #21
1001567c:	4329      	orrs	r1, r5
1001567e:	00c5      	lsls	r5, r0, #3
10015680:	0318      	lsls	r0, r3, #12
10015682:	46bc      	mov	ip, r7
10015684:	0a40      	lsrs	r0, r0, #9
10015686:	0f57      	lsrs	r7, r2, #29
10015688:	0d64      	lsrs	r4, r4, #21
1001568a:	0fdb      	lsrs	r3, r3, #31
1001568c:	4338      	orrs	r0, r7
1001568e:	00d2      	lsls	r2, r2, #3
10015690:	459a      	cmp	sl, r3
10015692:	d100      	bne.n	10015696 <__aeabi_dadd+0x3a>
10015694:	e0aa      	b.n	100157ec <__aeabi_dadd+0x190>
10015696:	4666      	mov	r6, ip
10015698:	1ba6      	subs	r6, r4, r6
1001569a:	2e00      	cmp	r6, #0
1001569c:	dc00      	bgt.n	100156a0 <__aeabi_dadd+0x44>
1001569e:	e0ff      	b.n	100158a0 <__aeabi_dadd+0x244>
100156a0:	4663      	mov	r3, ip
100156a2:	2b00      	cmp	r3, #0
100156a4:	d139      	bne.n	1001571a <__aeabi_dadd+0xbe>
100156a6:	0003      	movs	r3, r0
100156a8:	4313      	orrs	r3, r2
100156aa:	d000      	beq.n	100156ae <__aeabi_dadd+0x52>
100156ac:	e0d9      	b.n	10015862 <__aeabi_dadd+0x206>
100156ae:	076b      	lsls	r3, r5, #29
100156b0:	d009      	beq.n	100156c6 <__aeabi_dadd+0x6a>
100156b2:	230f      	movs	r3, #15
100156b4:	402b      	ands	r3, r5
100156b6:	2b04      	cmp	r3, #4
100156b8:	d005      	beq.n	100156c6 <__aeabi_dadd+0x6a>
100156ba:	1d2b      	adds	r3, r5, #4
100156bc:	42ab      	cmp	r3, r5
100156be:	41ad      	sbcs	r5, r5
100156c0:	426d      	negs	r5, r5
100156c2:	1949      	adds	r1, r1, r5
100156c4:	001d      	movs	r5, r3
100156c6:	020b      	lsls	r3, r1, #8
100156c8:	d400      	bmi.n	100156cc <__aeabi_dadd+0x70>
100156ca:	e082      	b.n	100157d2 <__aeabi_dadd+0x176>
100156cc:	4bca      	ldr	r3, [pc, #808]	; (100159f8 <__aeabi_dadd+0x39c>)
100156ce:	3401      	adds	r4, #1
100156d0:	429c      	cmp	r4, r3
100156d2:	d100      	bne.n	100156d6 <__aeabi_dadd+0x7a>
100156d4:	e0fe      	b.n	100158d4 <__aeabi_dadd+0x278>
100156d6:	000a      	movs	r2, r1
100156d8:	4656      	mov	r6, sl
100156da:	4bc8      	ldr	r3, [pc, #800]	; (100159fc <__aeabi_dadd+0x3a0>)
100156dc:	08ed      	lsrs	r5, r5, #3
100156de:	401a      	ands	r2, r3
100156e0:	0750      	lsls	r0, r2, #29
100156e2:	0564      	lsls	r4, r4, #21
100156e4:	0252      	lsls	r2, r2, #9
100156e6:	4305      	orrs	r5, r0
100156e8:	0b12      	lsrs	r2, r2, #12
100156ea:	0d64      	lsrs	r4, r4, #21
100156ec:	2100      	movs	r1, #0
100156ee:	0312      	lsls	r2, r2, #12
100156f0:	0d0b      	lsrs	r3, r1, #20
100156f2:	051b      	lsls	r3, r3, #20
100156f4:	0564      	lsls	r4, r4, #21
100156f6:	0b12      	lsrs	r2, r2, #12
100156f8:	431a      	orrs	r2, r3
100156fa:	0863      	lsrs	r3, r4, #1
100156fc:	4cc0      	ldr	r4, [pc, #768]	; (10015a00 <__aeabi_dadd+0x3a4>)
100156fe:	07f6      	lsls	r6, r6, #31
10015700:	4014      	ands	r4, r2
10015702:	431c      	orrs	r4, r3
10015704:	0064      	lsls	r4, r4, #1
10015706:	0864      	lsrs	r4, r4, #1
10015708:	4334      	orrs	r4, r6
1001570a:	0028      	movs	r0, r5
1001570c:	0021      	movs	r1, r4
1001570e:	bc3c      	pop	{r2, r3, r4, r5}
10015710:	4690      	mov	r8, r2
10015712:	4699      	mov	r9, r3
10015714:	46a2      	mov	sl, r4
10015716:	46ab      	mov	fp, r5
10015718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001571a:	4bb7      	ldr	r3, [pc, #732]	; (100159f8 <__aeabi_dadd+0x39c>)
1001571c:	429c      	cmp	r4, r3
1001571e:	d0c6      	beq.n	100156ae <__aeabi_dadd+0x52>
10015720:	2380      	movs	r3, #128	; 0x80
10015722:	041b      	lsls	r3, r3, #16
10015724:	4318      	orrs	r0, r3
10015726:	2e38      	cmp	r6, #56	; 0x38
10015728:	dd00      	ble.n	1001572c <__aeabi_dadd+0xd0>
1001572a:	e0eb      	b.n	10015904 <__aeabi_dadd+0x2a8>
1001572c:	2e1f      	cmp	r6, #31
1001572e:	dd00      	ble.n	10015732 <__aeabi_dadd+0xd6>
10015730:	e11e      	b.n	10015970 <__aeabi_dadd+0x314>
10015732:	2320      	movs	r3, #32
10015734:	1b9b      	subs	r3, r3, r6
10015736:	469c      	mov	ip, r3
10015738:	0003      	movs	r3, r0
1001573a:	4667      	mov	r7, ip
1001573c:	40bb      	lsls	r3, r7
1001573e:	4698      	mov	r8, r3
10015740:	0013      	movs	r3, r2
10015742:	4647      	mov	r7, r8
10015744:	40f3      	lsrs	r3, r6
10015746:	433b      	orrs	r3, r7
10015748:	4667      	mov	r7, ip
1001574a:	40ba      	lsls	r2, r7
1001574c:	1e57      	subs	r7, r2, #1
1001574e:	41ba      	sbcs	r2, r7
10015750:	4313      	orrs	r3, r2
10015752:	0002      	movs	r2, r0
10015754:	40f2      	lsrs	r2, r6
10015756:	1aeb      	subs	r3, r5, r3
10015758:	429d      	cmp	r5, r3
1001575a:	41b6      	sbcs	r6, r6
1001575c:	001d      	movs	r5, r3
1001575e:	1a8a      	subs	r2, r1, r2
10015760:	4276      	negs	r6, r6
10015762:	1b91      	subs	r1, r2, r6
10015764:	020b      	lsls	r3, r1, #8
10015766:	d531      	bpl.n	100157cc <__aeabi_dadd+0x170>
10015768:	024a      	lsls	r2, r1, #9
1001576a:	0a56      	lsrs	r6, r2, #9
1001576c:	2e00      	cmp	r6, #0
1001576e:	d100      	bne.n	10015772 <__aeabi_dadd+0x116>
10015770:	e0b4      	b.n	100158dc <__aeabi_dadd+0x280>
10015772:	0030      	movs	r0, r6
10015774:	f001 fe40 	bl	100173f8 <__clzsi2>
10015778:	0003      	movs	r3, r0
1001577a:	3b08      	subs	r3, #8
1001577c:	2b1f      	cmp	r3, #31
1001577e:	dd00      	ble.n	10015782 <__aeabi_dadd+0x126>
10015780:	e0b5      	b.n	100158ee <__aeabi_dadd+0x292>
10015782:	2220      	movs	r2, #32
10015784:	0029      	movs	r1, r5
10015786:	1ad2      	subs	r2, r2, r3
10015788:	40d1      	lsrs	r1, r2
1001578a:	409e      	lsls	r6, r3
1001578c:	000a      	movs	r2, r1
1001578e:	409d      	lsls	r5, r3
10015790:	4332      	orrs	r2, r6
10015792:	429c      	cmp	r4, r3
10015794:	dd00      	ble.n	10015798 <__aeabi_dadd+0x13c>
10015796:	e0b1      	b.n	100158fc <__aeabi_dadd+0x2a0>
10015798:	1b1c      	subs	r4, r3, r4
1001579a:	1c63      	adds	r3, r4, #1
1001579c:	2b1f      	cmp	r3, #31
1001579e:	dd00      	ble.n	100157a2 <__aeabi_dadd+0x146>
100157a0:	e0d5      	b.n	1001594e <__aeabi_dadd+0x2f2>
100157a2:	2120      	movs	r1, #32
100157a4:	0014      	movs	r4, r2
100157a6:	0028      	movs	r0, r5
100157a8:	1ac9      	subs	r1, r1, r3
100157aa:	408c      	lsls	r4, r1
100157ac:	40d8      	lsrs	r0, r3
100157ae:	408d      	lsls	r5, r1
100157b0:	4304      	orrs	r4, r0
100157b2:	40da      	lsrs	r2, r3
100157b4:	1e68      	subs	r0, r5, #1
100157b6:	4185      	sbcs	r5, r0
100157b8:	0011      	movs	r1, r2
100157ba:	4325      	orrs	r5, r4
100157bc:	2400      	movs	r4, #0
100157be:	e776      	b.n	100156ae <__aeabi_dadd+0x52>
100157c0:	4641      	mov	r1, r8
100157c2:	4331      	orrs	r1, r6
100157c4:	d100      	bne.n	100157c8 <__aeabi_dadd+0x16c>
100157c6:	e234      	b.n	10015c32 <__aeabi_dadd+0x5d6>
100157c8:	0031      	movs	r1, r6
100157ca:	4645      	mov	r5, r8
100157cc:	076b      	lsls	r3, r5, #29
100157ce:	d000      	beq.n	100157d2 <__aeabi_dadd+0x176>
100157d0:	e76f      	b.n	100156b2 <__aeabi_dadd+0x56>
100157d2:	4656      	mov	r6, sl
100157d4:	0748      	lsls	r0, r1, #29
100157d6:	08ed      	lsrs	r5, r5, #3
100157d8:	08c9      	lsrs	r1, r1, #3
100157da:	4305      	orrs	r5, r0
100157dc:	4b86      	ldr	r3, [pc, #536]	; (100159f8 <__aeabi_dadd+0x39c>)
100157de:	429c      	cmp	r4, r3
100157e0:	d035      	beq.n	1001584e <__aeabi_dadd+0x1f2>
100157e2:	030a      	lsls	r2, r1, #12
100157e4:	0564      	lsls	r4, r4, #21
100157e6:	0b12      	lsrs	r2, r2, #12
100157e8:	0d64      	lsrs	r4, r4, #21
100157ea:	e77f      	b.n	100156ec <__aeabi_dadd+0x90>
100157ec:	4663      	mov	r3, ip
100157ee:	1ae3      	subs	r3, r4, r3
100157f0:	469b      	mov	fp, r3
100157f2:	2b00      	cmp	r3, #0
100157f4:	dc00      	bgt.n	100157f8 <__aeabi_dadd+0x19c>
100157f6:	e08b      	b.n	10015910 <__aeabi_dadd+0x2b4>
100157f8:	4667      	mov	r7, ip
100157fa:	2f00      	cmp	r7, #0
100157fc:	d03c      	beq.n	10015878 <__aeabi_dadd+0x21c>
100157fe:	4f7e      	ldr	r7, [pc, #504]	; (100159f8 <__aeabi_dadd+0x39c>)
10015800:	42bc      	cmp	r4, r7
10015802:	d100      	bne.n	10015806 <__aeabi_dadd+0x1aa>
10015804:	e753      	b.n	100156ae <__aeabi_dadd+0x52>
10015806:	2780      	movs	r7, #128	; 0x80
10015808:	043f      	lsls	r7, r7, #16
1001580a:	4338      	orrs	r0, r7
1001580c:	465b      	mov	r3, fp
1001580e:	2b38      	cmp	r3, #56	; 0x38
10015810:	dc00      	bgt.n	10015814 <__aeabi_dadd+0x1b8>
10015812:	e0f7      	b.n	10015a04 <__aeabi_dadd+0x3a8>
10015814:	4302      	orrs	r2, r0
10015816:	1e50      	subs	r0, r2, #1
10015818:	4182      	sbcs	r2, r0
1001581a:	2000      	movs	r0, #0
1001581c:	b2d2      	uxtb	r2, r2
1001581e:	1953      	adds	r3, r2, r5
10015820:	1842      	adds	r2, r0, r1
10015822:	42ab      	cmp	r3, r5
10015824:	4189      	sbcs	r1, r1
10015826:	001d      	movs	r5, r3
10015828:	4249      	negs	r1, r1
1001582a:	1889      	adds	r1, r1, r2
1001582c:	020b      	lsls	r3, r1, #8
1001582e:	d5cd      	bpl.n	100157cc <__aeabi_dadd+0x170>
10015830:	4b71      	ldr	r3, [pc, #452]	; (100159f8 <__aeabi_dadd+0x39c>)
10015832:	3401      	adds	r4, #1
10015834:	429c      	cmp	r4, r3
10015836:	d100      	bne.n	1001583a <__aeabi_dadd+0x1de>
10015838:	e13d      	b.n	10015ab6 <__aeabi_dadd+0x45a>
1001583a:	2001      	movs	r0, #1
1001583c:	4a6f      	ldr	r2, [pc, #444]	; (100159fc <__aeabi_dadd+0x3a0>)
1001583e:	086b      	lsrs	r3, r5, #1
10015840:	400a      	ands	r2, r1
10015842:	4028      	ands	r0, r5
10015844:	4318      	orrs	r0, r3
10015846:	07d5      	lsls	r5, r2, #31
10015848:	4305      	orrs	r5, r0
1001584a:	0851      	lsrs	r1, r2, #1
1001584c:	e72f      	b.n	100156ae <__aeabi_dadd+0x52>
1001584e:	002b      	movs	r3, r5
10015850:	430b      	orrs	r3, r1
10015852:	d100      	bne.n	10015856 <__aeabi_dadd+0x1fa>
10015854:	e1cb      	b.n	10015bee <__aeabi_dadd+0x592>
10015856:	2380      	movs	r3, #128	; 0x80
10015858:	031b      	lsls	r3, r3, #12
1001585a:	430b      	orrs	r3, r1
1001585c:	031a      	lsls	r2, r3, #12
1001585e:	0b12      	lsrs	r2, r2, #12
10015860:	e744      	b.n	100156ec <__aeabi_dadd+0x90>
10015862:	3e01      	subs	r6, #1
10015864:	2e00      	cmp	r6, #0
10015866:	d16d      	bne.n	10015944 <__aeabi_dadd+0x2e8>
10015868:	1aae      	subs	r6, r5, r2
1001586a:	42b5      	cmp	r5, r6
1001586c:	419b      	sbcs	r3, r3
1001586e:	1a09      	subs	r1, r1, r0
10015870:	425b      	negs	r3, r3
10015872:	1ac9      	subs	r1, r1, r3
10015874:	0035      	movs	r5, r6
10015876:	e775      	b.n	10015764 <__aeabi_dadd+0x108>
10015878:	0007      	movs	r7, r0
1001587a:	4317      	orrs	r7, r2
1001587c:	d100      	bne.n	10015880 <__aeabi_dadd+0x224>
1001587e:	e716      	b.n	100156ae <__aeabi_dadd+0x52>
10015880:	2301      	movs	r3, #1
10015882:	425b      	negs	r3, r3
10015884:	469c      	mov	ip, r3
10015886:	44e3      	add	fp, ip
10015888:	465b      	mov	r3, fp
1001588a:	2b00      	cmp	r3, #0
1001588c:	d000      	beq.n	10015890 <__aeabi_dadd+0x234>
1001588e:	e0e0      	b.n	10015a52 <__aeabi_dadd+0x3f6>
10015890:	18aa      	adds	r2, r5, r2
10015892:	42aa      	cmp	r2, r5
10015894:	419b      	sbcs	r3, r3
10015896:	1809      	adds	r1, r1, r0
10015898:	425b      	negs	r3, r3
1001589a:	1859      	adds	r1, r3, r1
1001589c:	0015      	movs	r5, r2
1001589e:	e7c5      	b.n	1001582c <__aeabi_dadd+0x1d0>
100158a0:	2e00      	cmp	r6, #0
100158a2:	d175      	bne.n	10015990 <__aeabi_dadd+0x334>
100158a4:	1c66      	adds	r6, r4, #1
100158a6:	0576      	lsls	r6, r6, #21
100158a8:	0d76      	lsrs	r6, r6, #21
100158aa:	2e01      	cmp	r6, #1
100158ac:	dc00      	bgt.n	100158b0 <__aeabi_dadd+0x254>
100158ae:	e0f3      	b.n	10015a98 <__aeabi_dadd+0x43c>
100158b0:	1aae      	subs	r6, r5, r2
100158b2:	46b0      	mov	r8, r6
100158b4:	4545      	cmp	r5, r8
100158b6:	41bf      	sbcs	r7, r7
100158b8:	1a0e      	subs	r6, r1, r0
100158ba:	427f      	negs	r7, r7
100158bc:	1bf6      	subs	r6, r6, r7
100158be:	0237      	lsls	r7, r6, #8
100158c0:	d400      	bmi.n	100158c4 <__aeabi_dadd+0x268>
100158c2:	e08f      	b.n	100159e4 <__aeabi_dadd+0x388>
100158c4:	1b55      	subs	r5, r2, r5
100158c6:	42aa      	cmp	r2, r5
100158c8:	41b6      	sbcs	r6, r6
100158ca:	1a41      	subs	r1, r0, r1
100158cc:	4276      	negs	r6, r6
100158ce:	1b8e      	subs	r6, r1, r6
100158d0:	469a      	mov	sl, r3
100158d2:	e74b      	b.n	1001576c <__aeabi_dadd+0x110>
100158d4:	4656      	mov	r6, sl
100158d6:	2200      	movs	r2, #0
100158d8:	2500      	movs	r5, #0
100158da:	e707      	b.n	100156ec <__aeabi_dadd+0x90>
100158dc:	0028      	movs	r0, r5
100158de:	f001 fd8b 	bl	100173f8 <__clzsi2>
100158e2:	3020      	adds	r0, #32
100158e4:	0003      	movs	r3, r0
100158e6:	3b08      	subs	r3, #8
100158e8:	2b1f      	cmp	r3, #31
100158ea:	dc00      	bgt.n	100158ee <__aeabi_dadd+0x292>
100158ec:	e749      	b.n	10015782 <__aeabi_dadd+0x126>
100158ee:	002a      	movs	r2, r5
100158f0:	3828      	subs	r0, #40	; 0x28
100158f2:	4082      	lsls	r2, r0
100158f4:	2500      	movs	r5, #0
100158f6:	429c      	cmp	r4, r3
100158f8:	dc00      	bgt.n	100158fc <__aeabi_dadd+0x2a0>
100158fa:	e74d      	b.n	10015798 <__aeabi_dadd+0x13c>
100158fc:	493f      	ldr	r1, [pc, #252]	; (100159fc <__aeabi_dadd+0x3a0>)
100158fe:	1ae4      	subs	r4, r4, r3
10015900:	4011      	ands	r1, r2
10015902:	e6d4      	b.n	100156ae <__aeabi_dadd+0x52>
10015904:	4302      	orrs	r2, r0
10015906:	1e50      	subs	r0, r2, #1
10015908:	4182      	sbcs	r2, r0
1001590a:	b2d3      	uxtb	r3, r2
1001590c:	2200      	movs	r2, #0
1001590e:	e722      	b.n	10015756 <__aeabi_dadd+0xfa>
10015910:	2b00      	cmp	r3, #0
10015912:	d000      	beq.n	10015916 <__aeabi_dadd+0x2ba>
10015914:	e0f3      	b.n	10015afe <__aeabi_dadd+0x4a2>
10015916:	1c63      	adds	r3, r4, #1
10015918:	469c      	mov	ip, r3
1001591a:	055b      	lsls	r3, r3, #21
1001591c:	0d5b      	lsrs	r3, r3, #21
1001591e:	2b01      	cmp	r3, #1
10015920:	dc00      	bgt.n	10015924 <__aeabi_dadd+0x2c8>
10015922:	e09f      	b.n	10015a64 <__aeabi_dadd+0x408>
10015924:	4b34      	ldr	r3, [pc, #208]	; (100159f8 <__aeabi_dadd+0x39c>)
10015926:	459c      	cmp	ip, r3
10015928:	d100      	bne.n	1001592c <__aeabi_dadd+0x2d0>
1001592a:	e0c3      	b.n	10015ab4 <__aeabi_dadd+0x458>
1001592c:	18aa      	adds	r2, r5, r2
1001592e:	1809      	adds	r1, r1, r0
10015930:	42aa      	cmp	r2, r5
10015932:	4180      	sbcs	r0, r0
10015934:	4240      	negs	r0, r0
10015936:	1841      	adds	r1, r0, r1
10015938:	07cd      	lsls	r5, r1, #31
1001593a:	0852      	lsrs	r2, r2, #1
1001593c:	4315      	orrs	r5, r2
1001593e:	0849      	lsrs	r1, r1, #1
10015940:	4664      	mov	r4, ip
10015942:	e6b4      	b.n	100156ae <__aeabi_dadd+0x52>
10015944:	4b2c      	ldr	r3, [pc, #176]	; (100159f8 <__aeabi_dadd+0x39c>)
10015946:	429c      	cmp	r4, r3
10015948:	d000      	beq.n	1001594c <__aeabi_dadd+0x2f0>
1001594a:	e6ec      	b.n	10015726 <__aeabi_dadd+0xca>
1001594c:	e6af      	b.n	100156ae <__aeabi_dadd+0x52>
1001594e:	0011      	movs	r1, r2
10015950:	3c1f      	subs	r4, #31
10015952:	40e1      	lsrs	r1, r4
10015954:	000c      	movs	r4, r1
10015956:	2b20      	cmp	r3, #32
10015958:	d100      	bne.n	1001595c <__aeabi_dadd+0x300>
1001595a:	e07f      	b.n	10015a5c <__aeabi_dadd+0x400>
1001595c:	2140      	movs	r1, #64	; 0x40
1001595e:	1acb      	subs	r3, r1, r3
10015960:	409a      	lsls	r2, r3
10015962:	4315      	orrs	r5, r2
10015964:	1e6a      	subs	r2, r5, #1
10015966:	4195      	sbcs	r5, r2
10015968:	2100      	movs	r1, #0
1001596a:	4325      	orrs	r5, r4
1001596c:	2400      	movs	r4, #0
1001596e:	e72d      	b.n	100157cc <__aeabi_dadd+0x170>
10015970:	0033      	movs	r3, r6
10015972:	0007      	movs	r7, r0
10015974:	3b20      	subs	r3, #32
10015976:	40df      	lsrs	r7, r3
10015978:	003b      	movs	r3, r7
1001597a:	2e20      	cmp	r6, #32
1001597c:	d070      	beq.n	10015a60 <__aeabi_dadd+0x404>
1001597e:	2740      	movs	r7, #64	; 0x40
10015980:	1bbe      	subs	r6, r7, r6
10015982:	40b0      	lsls	r0, r6
10015984:	4302      	orrs	r2, r0
10015986:	1e50      	subs	r0, r2, #1
10015988:	4182      	sbcs	r2, r0
1001598a:	4313      	orrs	r3, r2
1001598c:	2200      	movs	r2, #0
1001598e:	e6e2      	b.n	10015756 <__aeabi_dadd+0xfa>
10015990:	2c00      	cmp	r4, #0
10015992:	d04f      	beq.n	10015a34 <__aeabi_dadd+0x3d8>
10015994:	4c18      	ldr	r4, [pc, #96]	; (100159f8 <__aeabi_dadd+0x39c>)
10015996:	45a4      	cmp	ip, r4
10015998:	d100      	bne.n	1001599c <__aeabi_dadd+0x340>
1001599a:	e0ab      	b.n	10015af4 <__aeabi_dadd+0x498>
1001599c:	2480      	movs	r4, #128	; 0x80
1001599e:	0424      	lsls	r4, r4, #16
100159a0:	4276      	negs	r6, r6
100159a2:	4321      	orrs	r1, r4
100159a4:	2e38      	cmp	r6, #56	; 0x38
100159a6:	dd00      	ble.n	100159aa <__aeabi_dadd+0x34e>
100159a8:	e0df      	b.n	10015b6a <__aeabi_dadd+0x50e>
100159aa:	2e1f      	cmp	r6, #31
100159ac:	dd00      	ble.n	100159b0 <__aeabi_dadd+0x354>
100159ae:	e143      	b.n	10015c38 <__aeabi_dadd+0x5dc>
100159b0:	2720      	movs	r7, #32
100159b2:	1bbc      	subs	r4, r7, r6
100159b4:	46a1      	mov	r9, r4
100159b6:	000c      	movs	r4, r1
100159b8:	464f      	mov	r7, r9
100159ba:	40bc      	lsls	r4, r7
100159bc:	46a0      	mov	r8, r4
100159be:	002c      	movs	r4, r5
100159c0:	4647      	mov	r7, r8
100159c2:	40f4      	lsrs	r4, r6
100159c4:	433c      	orrs	r4, r7
100159c6:	464f      	mov	r7, r9
100159c8:	40bd      	lsls	r5, r7
100159ca:	1e6f      	subs	r7, r5, #1
100159cc:	41bd      	sbcs	r5, r7
100159ce:	40f1      	lsrs	r1, r6
100159d0:	432c      	orrs	r4, r5
100159d2:	1b15      	subs	r5, r2, r4
100159d4:	42aa      	cmp	r2, r5
100159d6:	4192      	sbcs	r2, r2
100159d8:	1a41      	subs	r1, r0, r1
100159da:	4252      	negs	r2, r2
100159dc:	1a89      	subs	r1, r1, r2
100159de:	4664      	mov	r4, ip
100159e0:	469a      	mov	sl, r3
100159e2:	e6bf      	b.n	10015764 <__aeabi_dadd+0x108>
100159e4:	4641      	mov	r1, r8
100159e6:	4645      	mov	r5, r8
100159e8:	4331      	orrs	r1, r6
100159ea:	d000      	beq.n	100159ee <__aeabi_dadd+0x392>
100159ec:	e6be      	b.n	1001576c <__aeabi_dadd+0x110>
100159ee:	2600      	movs	r6, #0
100159f0:	2400      	movs	r4, #0
100159f2:	2500      	movs	r5, #0
100159f4:	e6f2      	b.n	100157dc <__aeabi_dadd+0x180>
100159f6:	46c0      	nop			; (mov r8, r8)
100159f8:	000007ff 	.word	0x000007ff
100159fc:	ff7fffff 	.word	0xff7fffff
10015a00:	800fffff 	.word	0x800fffff
10015a04:	2b1f      	cmp	r3, #31
10015a06:	dc59      	bgt.n	10015abc <__aeabi_dadd+0x460>
10015a08:	2720      	movs	r7, #32
10015a0a:	1aff      	subs	r7, r7, r3
10015a0c:	46bc      	mov	ip, r7
10015a0e:	0007      	movs	r7, r0
10015a10:	4663      	mov	r3, ip
10015a12:	409f      	lsls	r7, r3
10015a14:	465b      	mov	r3, fp
10015a16:	46b9      	mov	r9, r7
10015a18:	0017      	movs	r7, r2
10015a1a:	40df      	lsrs	r7, r3
10015a1c:	46b8      	mov	r8, r7
10015a1e:	464f      	mov	r7, r9
10015a20:	4643      	mov	r3, r8
10015a22:	431f      	orrs	r7, r3
10015a24:	4663      	mov	r3, ip
10015a26:	409a      	lsls	r2, r3
10015a28:	1e53      	subs	r3, r2, #1
10015a2a:	419a      	sbcs	r2, r3
10015a2c:	465b      	mov	r3, fp
10015a2e:	433a      	orrs	r2, r7
10015a30:	40d8      	lsrs	r0, r3
10015a32:	e6f4      	b.n	1001581e <__aeabi_dadd+0x1c2>
10015a34:	000c      	movs	r4, r1
10015a36:	432c      	orrs	r4, r5
10015a38:	d05c      	beq.n	10015af4 <__aeabi_dadd+0x498>
10015a3a:	43f6      	mvns	r6, r6
10015a3c:	2e00      	cmp	r6, #0
10015a3e:	d155      	bne.n	10015aec <__aeabi_dadd+0x490>
10015a40:	1b55      	subs	r5, r2, r5
10015a42:	42aa      	cmp	r2, r5
10015a44:	41a4      	sbcs	r4, r4
10015a46:	1a41      	subs	r1, r0, r1
10015a48:	4264      	negs	r4, r4
10015a4a:	1b09      	subs	r1, r1, r4
10015a4c:	469a      	mov	sl, r3
10015a4e:	4664      	mov	r4, ip
10015a50:	e688      	b.n	10015764 <__aeabi_dadd+0x108>
10015a52:	4f96      	ldr	r7, [pc, #600]	; (10015cac <__aeabi_dadd+0x650>)
10015a54:	42bc      	cmp	r4, r7
10015a56:	d000      	beq.n	10015a5a <__aeabi_dadd+0x3fe>
10015a58:	e6d8      	b.n	1001580c <__aeabi_dadd+0x1b0>
10015a5a:	e628      	b.n	100156ae <__aeabi_dadd+0x52>
10015a5c:	2200      	movs	r2, #0
10015a5e:	e780      	b.n	10015962 <__aeabi_dadd+0x306>
10015a60:	2000      	movs	r0, #0
10015a62:	e78f      	b.n	10015984 <__aeabi_dadd+0x328>
10015a64:	000b      	movs	r3, r1
10015a66:	432b      	orrs	r3, r5
10015a68:	2c00      	cmp	r4, #0
10015a6a:	d000      	beq.n	10015a6e <__aeabi_dadd+0x412>
10015a6c:	e0c2      	b.n	10015bf4 <__aeabi_dadd+0x598>
10015a6e:	2b00      	cmp	r3, #0
10015a70:	d100      	bne.n	10015a74 <__aeabi_dadd+0x418>
10015a72:	e101      	b.n	10015c78 <__aeabi_dadd+0x61c>
10015a74:	0003      	movs	r3, r0
10015a76:	4313      	orrs	r3, r2
10015a78:	d100      	bne.n	10015a7c <__aeabi_dadd+0x420>
10015a7a:	e618      	b.n	100156ae <__aeabi_dadd+0x52>
10015a7c:	18ab      	adds	r3, r5, r2
10015a7e:	42ab      	cmp	r3, r5
10015a80:	41b6      	sbcs	r6, r6
10015a82:	1809      	adds	r1, r1, r0
10015a84:	4276      	negs	r6, r6
10015a86:	1871      	adds	r1, r6, r1
10015a88:	020a      	lsls	r2, r1, #8
10015a8a:	d400      	bmi.n	10015a8e <__aeabi_dadd+0x432>
10015a8c:	e109      	b.n	10015ca2 <__aeabi_dadd+0x646>
10015a8e:	4a88      	ldr	r2, [pc, #544]	; (10015cb0 <__aeabi_dadd+0x654>)
10015a90:	001d      	movs	r5, r3
10015a92:	4011      	ands	r1, r2
10015a94:	4664      	mov	r4, ip
10015a96:	e60a      	b.n	100156ae <__aeabi_dadd+0x52>
10015a98:	2c00      	cmp	r4, #0
10015a9a:	d15b      	bne.n	10015b54 <__aeabi_dadd+0x4f8>
10015a9c:	000e      	movs	r6, r1
10015a9e:	432e      	orrs	r6, r5
10015aa0:	d000      	beq.n	10015aa4 <__aeabi_dadd+0x448>
10015aa2:	e08a      	b.n	10015bba <__aeabi_dadd+0x55e>
10015aa4:	0001      	movs	r1, r0
10015aa6:	4311      	orrs	r1, r2
10015aa8:	d100      	bne.n	10015aac <__aeabi_dadd+0x450>
10015aaa:	e0c2      	b.n	10015c32 <__aeabi_dadd+0x5d6>
10015aac:	0001      	movs	r1, r0
10015aae:	0015      	movs	r5, r2
10015ab0:	469a      	mov	sl, r3
10015ab2:	e5fc      	b.n	100156ae <__aeabi_dadd+0x52>
10015ab4:	4664      	mov	r4, ip
10015ab6:	2100      	movs	r1, #0
10015ab8:	2500      	movs	r5, #0
10015aba:	e68f      	b.n	100157dc <__aeabi_dadd+0x180>
10015abc:	2320      	movs	r3, #32
10015abe:	425b      	negs	r3, r3
10015ac0:	469c      	mov	ip, r3
10015ac2:	44dc      	add	ip, fp
10015ac4:	4663      	mov	r3, ip
10015ac6:	0007      	movs	r7, r0
10015ac8:	40df      	lsrs	r7, r3
10015aca:	465b      	mov	r3, fp
10015acc:	46bc      	mov	ip, r7
10015ace:	2b20      	cmp	r3, #32
10015ad0:	d100      	bne.n	10015ad4 <__aeabi_dadd+0x478>
10015ad2:	e0ac      	b.n	10015c2e <__aeabi_dadd+0x5d2>
10015ad4:	2340      	movs	r3, #64	; 0x40
10015ad6:	465f      	mov	r7, fp
10015ad8:	1bdb      	subs	r3, r3, r7
10015ada:	4098      	lsls	r0, r3
10015adc:	4302      	orrs	r2, r0
10015ade:	1e50      	subs	r0, r2, #1
10015ae0:	4182      	sbcs	r2, r0
10015ae2:	4663      	mov	r3, ip
10015ae4:	4313      	orrs	r3, r2
10015ae6:	001a      	movs	r2, r3
10015ae8:	2000      	movs	r0, #0
10015aea:	e698      	b.n	1001581e <__aeabi_dadd+0x1c2>
10015aec:	4c6f      	ldr	r4, [pc, #444]	; (10015cac <__aeabi_dadd+0x650>)
10015aee:	45a4      	cmp	ip, r4
10015af0:	d000      	beq.n	10015af4 <__aeabi_dadd+0x498>
10015af2:	e757      	b.n	100159a4 <__aeabi_dadd+0x348>
10015af4:	0001      	movs	r1, r0
10015af6:	0015      	movs	r5, r2
10015af8:	4664      	mov	r4, ip
10015afa:	469a      	mov	sl, r3
10015afc:	e5d7      	b.n	100156ae <__aeabi_dadd+0x52>
10015afe:	2c00      	cmp	r4, #0
10015b00:	d139      	bne.n	10015b76 <__aeabi_dadd+0x51a>
10015b02:	000c      	movs	r4, r1
10015b04:	432c      	orrs	r4, r5
10015b06:	d06e      	beq.n	10015be6 <__aeabi_dadd+0x58a>
10015b08:	43db      	mvns	r3, r3
10015b0a:	2b00      	cmp	r3, #0
10015b0c:	d01a      	beq.n	10015b44 <__aeabi_dadd+0x4e8>
10015b0e:	4c67      	ldr	r4, [pc, #412]	; (10015cac <__aeabi_dadd+0x650>)
10015b10:	45a4      	cmp	ip, r4
10015b12:	d068      	beq.n	10015be6 <__aeabi_dadd+0x58a>
10015b14:	2b38      	cmp	r3, #56	; 0x38
10015b16:	dd00      	ble.n	10015b1a <__aeabi_dadd+0x4be>
10015b18:	e0a4      	b.n	10015c64 <__aeabi_dadd+0x608>
10015b1a:	2b1f      	cmp	r3, #31
10015b1c:	dd00      	ble.n	10015b20 <__aeabi_dadd+0x4c4>
10015b1e:	e0ae      	b.n	10015c7e <__aeabi_dadd+0x622>
10015b20:	2420      	movs	r4, #32
10015b22:	000f      	movs	r7, r1
10015b24:	1ae4      	subs	r4, r4, r3
10015b26:	40a7      	lsls	r7, r4
10015b28:	46b9      	mov	r9, r7
10015b2a:	002f      	movs	r7, r5
10015b2c:	40df      	lsrs	r7, r3
10015b2e:	46b8      	mov	r8, r7
10015b30:	46a3      	mov	fp, r4
10015b32:	464f      	mov	r7, r9
10015b34:	4644      	mov	r4, r8
10015b36:	4327      	orrs	r7, r4
10015b38:	465c      	mov	r4, fp
10015b3a:	40a5      	lsls	r5, r4
10015b3c:	1e6c      	subs	r4, r5, #1
10015b3e:	41a5      	sbcs	r5, r4
10015b40:	40d9      	lsrs	r1, r3
10015b42:	433d      	orrs	r5, r7
10015b44:	18ad      	adds	r5, r5, r2
10015b46:	4295      	cmp	r5, r2
10015b48:	419b      	sbcs	r3, r3
10015b4a:	1809      	adds	r1, r1, r0
10015b4c:	425b      	negs	r3, r3
10015b4e:	1859      	adds	r1, r3, r1
10015b50:	4664      	mov	r4, ip
10015b52:	e66b      	b.n	1001582c <__aeabi_dadd+0x1d0>
10015b54:	000c      	movs	r4, r1
10015b56:	432c      	orrs	r4, r5
10015b58:	d115      	bne.n	10015b86 <__aeabi_dadd+0x52a>
10015b5a:	0001      	movs	r1, r0
10015b5c:	4311      	orrs	r1, r2
10015b5e:	d07b      	beq.n	10015c58 <__aeabi_dadd+0x5fc>
10015b60:	0001      	movs	r1, r0
10015b62:	0015      	movs	r5, r2
10015b64:	469a      	mov	sl, r3
10015b66:	4c51      	ldr	r4, [pc, #324]	; (10015cac <__aeabi_dadd+0x650>)
10015b68:	e5a1      	b.n	100156ae <__aeabi_dadd+0x52>
10015b6a:	430d      	orrs	r5, r1
10015b6c:	1e69      	subs	r1, r5, #1
10015b6e:	418d      	sbcs	r5, r1
10015b70:	2100      	movs	r1, #0
10015b72:	b2ec      	uxtb	r4, r5
10015b74:	e72d      	b.n	100159d2 <__aeabi_dadd+0x376>
10015b76:	4c4d      	ldr	r4, [pc, #308]	; (10015cac <__aeabi_dadd+0x650>)
10015b78:	45a4      	cmp	ip, r4
10015b7a:	d034      	beq.n	10015be6 <__aeabi_dadd+0x58a>
10015b7c:	2480      	movs	r4, #128	; 0x80
10015b7e:	0424      	lsls	r4, r4, #16
10015b80:	425b      	negs	r3, r3
10015b82:	4321      	orrs	r1, r4
10015b84:	e7c6      	b.n	10015b14 <__aeabi_dadd+0x4b8>
10015b86:	0004      	movs	r4, r0
10015b88:	4314      	orrs	r4, r2
10015b8a:	d04e      	beq.n	10015c2a <__aeabi_dadd+0x5ce>
10015b8c:	08ed      	lsrs	r5, r5, #3
10015b8e:	074c      	lsls	r4, r1, #29
10015b90:	432c      	orrs	r4, r5
10015b92:	2580      	movs	r5, #128	; 0x80
10015b94:	08c9      	lsrs	r1, r1, #3
10015b96:	032d      	lsls	r5, r5, #12
10015b98:	4229      	tst	r1, r5
10015b9a:	d008      	beq.n	10015bae <__aeabi_dadd+0x552>
10015b9c:	08c6      	lsrs	r6, r0, #3
10015b9e:	422e      	tst	r6, r5
10015ba0:	d105      	bne.n	10015bae <__aeabi_dadd+0x552>
10015ba2:	08d2      	lsrs	r2, r2, #3
10015ba4:	0741      	lsls	r1, r0, #29
10015ba6:	4311      	orrs	r1, r2
10015ba8:	000c      	movs	r4, r1
10015baa:	469a      	mov	sl, r3
10015bac:	0031      	movs	r1, r6
10015bae:	0f62      	lsrs	r2, r4, #29
10015bb0:	00c9      	lsls	r1, r1, #3
10015bb2:	00e5      	lsls	r5, r4, #3
10015bb4:	4311      	orrs	r1, r2
10015bb6:	4c3d      	ldr	r4, [pc, #244]	; (10015cac <__aeabi_dadd+0x650>)
10015bb8:	e579      	b.n	100156ae <__aeabi_dadd+0x52>
10015bba:	0006      	movs	r6, r0
10015bbc:	4316      	orrs	r6, r2
10015bbe:	d100      	bne.n	10015bc2 <__aeabi_dadd+0x566>
10015bc0:	e575      	b.n	100156ae <__aeabi_dadd+0x52>
10015bc2:	1aae      	subs	r6, r5, r2
10015bc4:	46b0      	mov	r8, r6
10015bc6:	4545      	cmp	r5, r8
10015bc8:	41bf      	sbcs	r7, r7
10015bca:	1a0e      	subs	r6, r1, r0
10015bcc:	427f      	negs	r7, r7
10015bce:	1bf6      	subs	r6, r6, r7
10015bd0:	0237      	lsls	r7, r6, #8
10015bd2:	d400      	bmi.n	10015bd6 <__aeabi_dadd+0x57a>
10015bd4:	e5f4      	b.n	100157c0 <__aeabi_dadd+0x164>
10015bd6:	1b55      	subs	r5, r2, r5
10015bd8:	42aa      	cmp	r2, r5
10015bda:	41b6      	sbcs	r6, r6
10015bdc:	1a41      	subs	r1, r0, r1
10015bde:	4276      	negs	r6, r6
10015be0:	1b89      	subs	r1, r1, r6
10015be2:	469a      	mov	sl, r3
10015be4:	e563      	b.n	100156ae <__aeabi_dadd+0x52>
10015be6:	0001      	movs	r1, r0
10015be8:	0015      	movs	r5, r2
10015bea:	4664      	mov	r4, ip
10015bec:	e55f      	b.n	100156ae <__aeabi_dadd+0x52>
10015bee:	2200      	movs	r2, #0
10015bf0:	2500      	movs	r5, #0
10015bf2:	e57b      	b.n	100156ec <__aeabi_dadd+0x90>
10015bf4:	2b00      	cmp	r3, #0
10015bf6:	d03b      	beq.n	10015c70 <__aeabi_dadd+0x614>
10015bf8:	0003      	movs	r3, r0
10015bfa:	4313      	orrs	r3, r2
10015bfc:	d015      	beq.n	10015c2a <__aeabi_dadd+0x5ce>
10015bfe:	08ed      	lsrs	r5, r5, #3
10015c00:	074b      	lsls	r3, r1, #29
10015c02:	432b      	orrs	r3, r5
10015c04:	2580      	movs	r5, #128	; 0x80
10015c06:	08c9      	lsrs	r1, r1, #3
10015c08:	032d      	lsls	r5, r5, #12
10015c0a:	4229      	tst	r1, r5
10015c0c:	d007      	beq.n	10015c1e <__aeabi_dadd+0x5c2>
10015c0e:	08c4      	lsrs	r4, r0, #3
10015c10:	422c      	tst	r4, r5
10015c12:	d104      	bne.n	10015c1e <__aeabi_dadd+0x5c2>
10015c14:	0741      	lsls	r1, r0, #29
10015c16:	000b      	movs	r3, r1
10015c18:	0021      	movs	r1, r4
10015c1a:	08d2      	lsrs	r2, r2, #3
10015c1c:	4313      	orrs	r3, r2
10015c1e:	00c9      	lsls	r1, r1, #3
10015c20:	0f5a      	lsrs	r2, r3, #29
10015c22:	4311      	orrs	r1, r2
10015c24:	00dd      	lsls	r5, r3, #3
10015c26:	4c21      	ldr	r4, [pc, #132]	; (10015cac <__aeabi_dadd+0x650>)
10015c28:	e541      	b.n	100156ae <__aeabi_dadd+0x52>
10015c2a:	4c20      	ldr	r4, [pc, #128]	; (10015cac <__aeabi_dadd+0x650>)
10015c2c:	e53f      	b.n	100156ae <__aeabi_dadd+0x52>
10015c2e:	2000      	movs	r0, #0
10015c30:	e754      	b.n	10015adc <__aeabi_dadd+0x480>
10015c32:	2600      	movs	r6, #0
10015c34:	2500      	movs	r5, #0
10015c36:	e5d1      	b.n	100157dc <__aeabi_dadd+0x180>
10015c38:	0034      	movs	r4, r6
10015c3a:	000f      	movs	r7, r1
10015c3c:	3c20      	subs	r4, #32
10015c3e:	40e7      	lsrs	r7, r4
10015c40:	003c      	movs	r4, r7
10015c42:	2e20      	cmp	r6, #32
10015c44:	d02b      	beq.n	10015c9e <__aeabi_dadd+0x642>
10015c46:	2740      	movs	r7, #64	; 0x40
10015c48:	1bbe      	subs	r6, r7, r6
10015c4a:	40b1      	lsls	r1, r6
10015c4c:	430d      	orrs	r5, r1
10015c4e:	1e69      	subs	r1, r5, #1
10015c50:	418d      	sbcs	r5, r1
10015c52:	2100      	movs	r1, #0
10015c54:	432c      	orrs	r4, r5
10015c56:	e6bc      	b.n	100159d2 <__aeabi_dadd+0x376>
10015c58:	2180      	movs	r1, #128	; 0x80
10015c5a:	2600      	movs	r6, #0
10015c5c:	0309      	lsls	r1, r1, #12
10015c5e:	4c13      	ldr	r4, [pc, #76]	; (10015cac <__aeabi_dadd+0x650>)
10015c60:	2500      	movs	r5, #0
10015c62:	e5bb      	b.n	100157dc <__aeabi_dadd+0x180>
10015c64:	430d      	orrs	r5, r1
10015c66:	1e69      	subs	r1, r5, #1
10015c68:	418d      	sbcs	r5, r1
10015c6a:	2100      	movs	r1, #0
10015c6c:	b2ed      	uxtb	r5, r5
10015c6e:	e769      	b.n	10015b44 <__aeabi_dadd+0x4e8>
10015c70:	0001      	movs	r1, r0
10015c72:	0015      	movs	r5, r2
10015c74:	4c0d      	ldr	r4, [pc, #52]	; (10015cac <__aeabi_dadd+0x650>)
10015c76:	e51a      	b.n	100156ae <__aeabi_dadd+0x52>
10015c78:	0001      	movs	r1, r0
10015c7a:	0015      	movs	r5, r2
10015c7c:	e517      	b.n	100156ae <__aeabi_dadd+0x52>
10015c7e:	001c      	movs	r4, r3
10015c80:	000f      	movs	r7, r1
10015c82:	3c20      	subs	r4, #32
10015c84:	40e7      	lsrs	r7, r4
10015c86:	003c      	movs	r4, r7
10015c88:	2b20      	cmp	r3, #32
10015c8a:	d00c      	beq.n	10015ca6 <__aeabi_dadd+0x64a>
10015c8c:	2740      	movs	r7, #64	; 0x40
10015c8e:	1afb      	subs	r3, r7, r3
10015c90:	4099      	lsls	r1, r3
10015c92:	430d      	orrs	r5, r1
10015c94:	1e69      	subs	r1, r5, #1
10015c96:	418d      	sbcs	r5, r1
10015c98:	2100      	movs	r1, #0
10015c9a:	4325      	orrs	r5, r4
10015c9c:	e752      	b.n	10015b44 <__aeabi_dadd+0x4e8>
10015c9e:	2100      	movs	r1, #0
10015ca0:	e7d4      	b.n	10015c4c <__aeabi_dadd+0x5f0>
10015ca2:	001d      	movs	r5, r3
10015ca4:	e592      	b.n	100157cc <__aeabi_dadd+0x170>
10015ca6:	2100      	movs	r1, #0
10015ca8:	e7f3      	b.n	10015c92 <__aeabi_dadd+0x636>
10015caa:	46c0      	nop			; (mov r8, r8)
10015cac:	000007ff 	.word	0x000007ff
10015cb0:	ff7fffff 	.word	0xff7fffff

10015cb4 <__aeabi_ddiv>:
10015cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10015cb6:	4656      	mov	r6, sl
10015cb8:	464d      	mov	r5, r9
10015cba:	4644      	mov	r4, r8
10015cbc:	465f      	mov	r7, fp
10015cbe:	b4f0      	push	{r4, r5, r6, r7}
10015cc0:	001d      	movs	r5, r3
10015cc2:	030e      	lsls	r6, r1, #12
10015cc4:	004c      	lsls	r4, r1, #1
10015cc6:	0fcb      	lsrs	r3, r1, #31
10015cc8:	b087      	sub	sp, #28
10015cca:	0007      	movs	r7, r0
10015ccc:	4692      	mov	sl, r2
10015cce:	4681      	mov	r9, r0
10015cd0:	0b36      	lsrs	r6, r6, #12
10015cd2:	0d64      	lsrs	r4, r4, #21
10015cd4:	4698      	mov	r8, r3
10015cd6:	d06a      	beq.n	10015dae <__aeabi_ddiv+0xfa>
10015cd8:	4b6d      	ldr	r3, [pc, #436]	; (10015e90 <__aeabi_ddiv+0x1dc>)
10015cda:	429c      	cmp	r4, r3
10015cdc:	d035      	beq.n	10015d4a <__aeabi_ddiv+0x96>
10015cde:	2280      	movs	r2, #128	; 0x80
10015ce0:	0f43      	lsrs	r3, r0, #29
10015ce2:	0412      	lsls	r2, r2, #16
10015ce4:	4313      	orrs	r3, r2
10015ce6:	00f6      	lsls	r6, r6, #3
10015ce8:	431e      	orrs	r6, r3
10015cea:	00c3      	lsls	r3, r0, #3
10015cec:	4699      	mov	r9, r3
10015cee:	4b69      	ldr	r3, [pc, #420]	; (10015e94 <__aeabi_ddiv+0x1e0>)
10015cf0:	2700      	movs	r7, #0
10015cf2:	469c      	mov	ip, r3
10015cf4:	2300      	movs	r3, #0
10015cf6:	4464      	add	r4, ip
10015cf8:	9302      	str	r3, [sp, #8]
10015cfa:	032b      	lsls	r3, r5, #12
10015cfc:	0068      	lsls	r0, r5, #1
10015cfe:	0b1b      	lsrs	r3, r3, #12
10015d00:	0fed      	lsrs	r5, r5, #31
10015d02:	4651      	mov	r1, sl
10015d04:	469b      	mov	fp, r3
10015d06:	0d40      	lsrs	r0, r0, #21
10015d08:	9500      	str	r5, [sp, #0]
10015d0a:	d100      	bne.n	10015d0e <__aeabi_ddiv+0x5a>
10015d0c:	e078      	b.n	10015e00 <__aeabi_ddiv+0x14c>
10015d0e:	4b60      	ldr	r3, [pc, #384]	; (10015e90 <__aeabi_ddiv+0x1dc>)
10015d10:	4298      	cmp	r0, r3
10015d12:	d06c      	beq.n	10015dee <__aeabi_ddiv+0x13a>
10015d14:	465b      	mov	r3, fp
10015d16:	00da      	lsls	r2, r3, #3
10015d18:	0f4b      	lsrs	r3, r1, #29
10015d1a:	2180      	movs	r1, #128	; 0x80
10015d1c:	0409      	lsls	r1, r1, #16
10015d1e:	430b      	orrs	r3, r1
10015d20:	4313      	orrs	r3, r2
10015d22:	469b      	mov	fp, r3
10015d24:	4653      	mov	r3, sl
10015d26:	00d9      	lsls	r1, r3, #3
10015d28:	4b5a      	ldr	r3, [pc, #360]	; (10015e94 <__aeabi_ddiv+0x1e0>)
10015d2a:	469c      	mov	ip, r3
10015d2c:	2300      	movs	r3, #0
10015d2e:	4460      	add	r0, ip
10015d30:	4642      	mov	r2, r8
10015d32:	1a20      	subs	r0, r4, r0
10015d34:	406a      	eors	r2, r5
10015d36:	4692      	mov	sl, r2
10015d38:	9001      	str	r0, [sp, #4]
10015d3a:	431f      	orrs	r7, r3
10015d3c:	2f0f      	cmp	r7, #15
10015d3e:	d900      	bls.n	10015d42 <__aeabi_ddiv+0x8e>
10015d40:	e0b0      	b.n	10015ea4 <__aeabi_ddiv+0x1f0>
10015d42:	4855      	ldr	r0, [pc, #340]	; (10015e98 <__aeabi_ddiv+0x1e4>)
10015d44:	00bf      	lsls	r7, r7, #2
10015d46:	59c0      	ldr	r0, [r0, r7]
10015d48:	4687      	mov	pc, r0
10015d4a:	4337      	orrs	r7, r6
10015d4c:	d000      	beq.n	10015d50 <__aeabi_ddiv+0x9c>
10015d4e:	e088      	b.n	10015e62 <__aeabi_ddiv+0x1ae>
10015d50:	2300      	movs	r3, #0
10015d52:	4699      	mov	r9, r3
10015d54:	3302      	adds	r3, #2
10015d56:	2708      	movs	r7, #8
10015d58:	2600      	movs	r6, #0
10015d5a:	9302      	str	r3, [sp, #8]
10015d5c:	e7cd      	b.n	10015cfa <__aeabi_ddiv+0x46>
10015d5e:	4643      	mov	r3, r8
10015d60:	46b3      	mov	fp, r6
10015d62:	4649      	mov	r1, r9
10015d64:	9300      	str	r3, [sp, #0]
10015d66:	9b02      	ldr	r3, [sp, #8]
10015d68:	9a00      	ldr	r2, [sp, #0]
10015d6a:	4692      	mov	sl, r2
10015d6c:	2b02      	cmp	r3, #2
10015d6e:	d000      	beq.n	10015d72 <__aeabi_ddiv+0xbe>
10015d70:	e1bf      	b.n	100160f2 <__aeabi_ddiv+0x43e>
10015d72:	2100      	movs	r1, #0
10015d74:	4653      	mov	r3, sl
10015d76:	2201      	movs	r2, #1
10015d78:	2600      	movs	r6, #0
10015d7a:	4689      	mov	r9, r1
10015d7c:	401a      	ands	r2, r3
10015d7e:	4b44      	ldr	r3, [pc, #272]	; (10015e90 <__aeabi_ddiv+0x1dc>)
10015d80:	2100      	movs	r1, #0
10015d82:	0336      	lsls	r6, r6, #12
10015d84:	0d0c      	lsrs	r4, r1, #20
10015d86:	0524      	lsls	r4, r4, #20
10015d88:	0b36      	lsrs	r6, r6, #12
10015d8a:	4326      	orrs	r6, r4
10015d8c:	4c43      	ldr	r4, [pc, #268]	; (10015e9c <__aeabi_ddiv+0x1e8>)
10015d8e:	051b      	lsls	r3, r3, #20
10015d90:	4026      	ands	r6, r4
10015d92:	431e      	orrs	r6, r3
10015d94:	0076      	lsls	r6, r6, #1
10015d96:	07d2      	lsls	r2, r2, #31
10015d98:	0876      	lsrs	r6, r6, #1
10015d9a:	4316      	orrs	r6, r2
10015d9c:	4648      	mov	r0, r9
10015d9e:	0031      	movs	r1, r6
10015da0:	b007      	add	sp, #28
10015da2:	bc3c      	pop	{r2, r3, r4, r5}
10015da4:	4690      	mov	r8, r2
10015da6:	4699      	mov	r9, r3
10015da8:	46a2      	mov	sl, r4
10015daa:	46ab      	mov	fp, r5
10015dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015dae:	0033      	movs	r3, r6
10015db0:	4303      	orrs	r3, r0
10015db2:	d04f      	beq.n	10015e54 <__aeabi_ddiv+0x1a0>
10015db4:	2e00      	cmp	r6, #0
10015db6:	d100      	bne.n	10015dba <__aeabi_ddiv+0x106>
10015db8:	e1bc      	b.n	10016134 <__aeabi_ddiv+0x480>
10015dba:	0030      	movs	r0, r6
10015dbc:	f001 fb1c 	bl	100173f8 <__clzsi2>
10015dc0:	0003      	movs	r3, r0
10015dc2:	3b0b      	subs	r3, #11
10015dc4:	2b1c      	cmp	r3, #28
10015dc6:	dd00      	ble.n	10015dca <__aeabi_ddiv+0x116>
10015dc8:	e1ad      	b.n	10016126 <__aeabi_ddiv+0x472>
10015dca:	221d      	movs	r2, #29
10015dcc:	0001      	movs	r1, r0
10015dce:	1ad3      	subs	r3, r2, r3
10015dd0:	3908      	subs	r1, #8
10015dd2:	003a      	movs	r2, r7
10015dd4:	408f      	lsls	r7, r1
10015dd6:	408e      	lsls	r6, r1
10015dd8:	40da      	lsrs	r2, r3
10015dda:	46b9      	mov	r9, r7
10015ddc:	4316      	orrs	r6, r2
10015dde:	4b30      	ldr	r3, [pc, #192]	; (10015ea0 <__aeabi_ddiv+0x1ec>)
10015de0:	2700      	movs	r7, #0
10015de2:	469c      	mov	ip, r3
10015de4:	2300      	movs	r3, #0
10015de6:	4460      	add	r0, ip
10015de8:	4244      	negs	r4, r0
10015dea:	9302      	str	r3, [sp, #8]
10015dec:	e785      	b.n	10015cfa <__aeabi_ddiv+0x46>
10015dee:	4653      	mov	r3, sl
10015df0:	465a      	mov	r2, fp
10015df2:	4313      	orrs	r3, r2
10015df4:	d12c      	bne.n	10015e50 <__aeabi_ddiv+0x19c>
10015df6:	2300      	movs	r3, #0
10015df8:	2100      	movs	r1, #0
10015dfa:	469b      	mov	fp, r3
10015dfc:	3302      	adds	r3, #2
10015dfe:	e797      	b.n	10015d30 <__aeabi_ddiv+0x7c>
10015e00:	430b      	orrs	r3, r1
10015e02:	d020      	beq.n	10015e46 <__aeabi_ddiv+0x192>
10015e04:	465b      	mov	r3, fp
10015e06:	2b00      	cmp	r3, #0
10015e08:	d100      	bne.n	10015e0c <__aeabi_ddiv+0x158>
10015e0a:	e19e      	b.n	1001614a <__aeabi_ddiv+0x496>
10015e0c:	4658      	mov	r0, fp
10015e0e:	f001 faf3 	bl	100173f8 <__clzsi2>
10015e12:	0003      	movs	r3, r0
10015e14:	3b0b      	subs	r3, #11
10015e16:	2b1c      	cmp	r3, #28
10015e18:	dd00      	ble.n	10015e1c <__aeabi_ddiv+0x168>
10015e1a:	e18f      	b.n	1001613c <__aeabi_ddiv+0x488>
10015e1c:	0002      	movs	r2, r0
10015e1e:	4659      	mov	r1, fp
10015e20:	3a08      	subs	r2, #8
10015e22:	4091      	lsls	r1, r2
10015e24:	468b      	mov	fp, r1
10015e26:	211d      	movs	r1, #29
10015e28:	1acb      	subs	r3, r1, r3
10015e2a:	4651      	mov	r1, sl
10015e2c:	40d9      	lsrs	r1, r3
10015e2e:	000b      	movs	r3, r1
10015e30:	4659      	mov	r1, fp
10015e32:	430b      	orrs	r3, r1
10015e34:	4651      	mov	r1, sl
10015e36:	469b      	mov	fp, r3
10015e38:	4091      	lsls	r1, r2
10015e3a:	4b19      	ldr	r3, [pc, #100]	; (10015ea0 <__aeabi_ddiv+0x1ec>)
10015e3c:	469c      	mov	ip, r3
10015e3e:	4460      	add	r0, ip
10015e40:	4240      	negs	r0, r0
10015e42:	2300      	movs	r3, #0
10015e44:	e774      	b.n	10015d30 <__aeabi_ddiv+0x7c>
10015e46:	2300      	movs	r3, #0
10015e48:	2100      	movs	r1, #0
10015e4a:	469b      	mov	fp, r3
10015e4c:	3301      	adds	r3, #1
10015e4e:	e76f      	b.n	10015d30 <__aeabi_ddiv+0x7c>
10015e50:	2303      	movs	r3, #3
10015e52:	e76d      	b.n	10015d30 <__aeabi_ddiv+0x7c>
10015e54:	2300      	movs	r3, #0
10015e56:	4699      	mov	r9, r3
10015e58:	3301      	adds	r3, #1
10015e5a:	2704      	movs	r7, #4
10015e5c:	2600      	movs	r6, #0
10015e5e:	9302      	str	r3, [sp, #8]
10015e60:	e74b      	b.n	10015cfa <__aeabi_ddiv+0x46>
10015e62:	2303      	movs	r3, #3
10015e64:	270c      	movs	r7, #12
10015e66:	9302      	str	r3, [sp, #8]
10015e68:	e747      	b.n	10015cfa <__aeabi_ddiv+0x46>
10015e6a:	2201      	movs	r2, #1
10015e6c:	1ad5      	subs	r5, r2, r3
10015e6e:	2d38      	cmp	r5, #56	; 0x38
10015e70:	dc00      	bgt.n	10015e74 <__aeabi_ddiv+0x1c0>
10015e72:	e1b0      	b.n	100161d6 <__aeabi_ddiv+0x522>
10015e74:	4653      	mov	r3, sl
10015e76:	401a      	ands	r2, r3
10015e78:	2100      	movs	r1, #0
10015e7a:	2300      	movs	r3, #0
10015e7c:	2600      	movs	r6, #0
10015e7e:	4689      	mov	r9, r1
10015e80:	e77e      	b.n	10015d80 <__aeabi_ddiv+0xcc>
10015e82:	2300      	movs	r3, #0
10015e84:	2680      	movs	r6, #128	; 0x80
10015e86:	4699      	mov	r9, r3
10015e88:	2200      	movs	r2, #0
10015e8a:	0336      	lsls	r6, r6, #12
10015e8c:	4b00      	ldr	r3, [pc, #0]	; (10015e90 <__aeabi_ddiv+0x1dc>)
10015e8e:	e777      	b.n	10015d80 <__aeabi_ddiv+0xcc>
10015e90:	000007ff 	.word	0x000007ff
10015e94:	fffffc01 	.word	0xfffffc01
10015e98:	10018f08 	.word	0x10018f08
10015e9c:	800fffff 	.word	0x800fffff
10015ea0:	000003f3 	.word	0x000003f3
10015ea4:	455e      	cmp	r6, fp
10015ea6:	d900      	bls.n	10015eaa <__aeabi_ddiv+0x1f6>
10015ea8:	e172      	b.n	10016190 <__aeabi_ddiv+0x4dc>
10015eaa:	d100      	bne.n	10015eae <__aeabi_ddiv+0x1fa>
10015eac:	e16d      	b.n	1001618a <__aeabi_ddiv+0x4d6>
10015eae:	9b01      	ldr	r3, [sp, #4]
10015eb0:	464d      	mov	r5, r9
10015eb2:	3b01      	subs	r3, #1
10015eb4:	9301      	str	r3, [sp, #4]
10015eb6:	2300      	movs	r3, #0
10015eb8:	0034      	movs	r4, r6
10015eba:	9302      	str	r3, [sp, #8]
10015ebc:	465b      	mov	r3, fp
10015ebe:	021e      	lsls	r6, r3, #8
10015ec0:	0e0b      	lsrs	r3, r1, #24
10015ec2:	431e      	orrs	r6, r3
10015ec4:	020b      	lsls	r3, r1, #8
10015ec6:	9303      	str	r3, [sp, #12]
10015ec8:	0c33      	lsrs	r3, r6, #16
10015eca:	4699      	mov	r9, r3
10015ecc:	0433      	lsls	r3, r6, #16
10015ece:	0c1b      	lsrs	r3, r3, #16
10015ed0:	4649      	mov	r1, r9
10015ed2:	0020      	movs	r0, r4
10015ed4:	9300      	str	r3, [sp, #0]
10015ed6:	f7fe ff0f 	bl	10014cf8 <__aeabi_uidiv>
10015eda:	9b00      	ldr	r3, [sp, #0]
10015edc:	0037      	movs	r7, r6
10015ede:	4343      	muls	r3, r0
10015ee0:	0006      	movs	r6, r0
10015ee2:	4649      	mov	r1, r9
10015ee4:	0020      	movs	r0, r4
10015ee6:	4698      	mov	r8, r3
10015ee8:	f7fe ff8c 	bl	10014e04 <__aeabi_uidivmod>
10015eec:	0c2c      	lsrs	r4, r5, #16
10015eee:	0409      	lsls	r1, r1, #16
10015ef0:	430c      	orrs	r4, r1
10015ef2:	45a0      	cmp	r8, r4
10015ef4:	d909      	bls.n	10015f0a <__aeabi_ddiv+0x256>
10015ef6:	19e4      	adds	r4, r4, r7
10015ef8:	1e73      	subs	r3, r6, #1
10015efa:	42a7      	cmp	r7, r4
10015efc:	d900      	bls.n	10015f00 <__aeabi_ddiv+0x24c>
10015efe:	e15c      	b.n	100161ba <__aeabi_ddiv+0x506>
10015f00:	45a0      	cmp	r8, r4
10015f02:	d800      	bhi.n	10015f06 <__aeabi_ddiv+0x252>
10015f04:	e159      	b.n	100161ba <__aeabi_ddiv+0x506>
10015f06:	3e02      	subs	r6, #2
10015f08:	19e4      	adds	r4, r4, r7
10015f0a:	4643      	mov	r3, r8
10015f0c:	1ae4      	subs	r4, r4, r3
10015f0e:	4649      	mov	r1, r9
10015f10:	0020      	movs	r0, r4
10015f12:	f7fe fef1 	bl	10014cf8 <__aeabi_uidiv>
10015f16:	0003      	movs	r3, r0
10015f18:	9a00      	ldr	r2, [sp, #0]
10015f1a:	4680      	mov	r8, r0
10015f1c:	4353      	muls	r3, r2
10015f1e:	4649      	mov	r1, r9
10015f20:	0020      	movs	r0, r4
10015f22:	469b      	mov	fp, r3
10015f24:	f7fe ff6e 	bl	10014e04 <__aeabi_uidivmod>
10015f28:	042a      	lsls	r2, r5, #16
10015f2a:	0409      	lsls	r1, r1, #16
10015f2c:	0c12      	lsrs	r2, r2, #16
10015f2e:	430a      	orrs	r2, r1
10015f30:	4593      	cmp	fp, r2
10015f32:	d90d      	bls.n	10015f50 <__aeabi_ddiv+0x29c>
10015f34:	4643      	mov	r3, r8
10015f36:	19d2      	adds	r2, r2, r7
10015f38:	3b01      	subs	r3, #1
10015f3a:	4297      	cmp	r7, r2
10015f3c:	d900      	bls.n	10015f40 <__aeabi_ddiv+0x28c>
10015f3e:	e13a      	b.n	100161b6 <__aeabi_ddiv+0x502>
10015f40:	4593      	cmp	fp, r2
10015f42:	d800      	bhi.n	10015f46 <__aeabi_ddiv+0x292>
10015f44:	e137      	b.n	100161b6 <__aeabi_ddiv+0x502>
10015f46:	2302      	movs	r3, #2
10015f48:	425b      	negs	r3, r3
10015f4a:	469c      	mov	ip, r3
10015f4c:	19d2      	adds	r2, r2, r7
10015f4e:	44e0      	add	r8, ip
10015f50:	465b      	mov	r3, fp
10015f52:	1ad2      	subs	r2, r2, r3
10015f54:	4643      	mov	r3, r8
10015f56:	0436      	lsls	r6, r6, #16
10015f58:	4333      	orrs	r3, r6
10015f5a:	469b      	mov	fp, r3
10015f5c:	9903      	ldr	r1, [sp, #12]
10015f5e:	0c18      	lsrs	r0, r3, #16
10015f60:	0c0b      	lsrs	r3, r1, #16
10015f62:	001d      	movs	r5, r3
10015f64:	9305      	str	r3, [sp, #20]
10015f66:	0409      	lsls	r1, r1, #16
10015f68:	465b      	mov	r3, fp
10015f6a:	0c09      	lsrs	r1, r1, #16
10015f6c:	000c      	movs	r4, r1
10015f6e:	041b      	lsls	r3, r3, #16
10015f70:	0c1b      	lsrs	r3, r3, #16
10015f72:	4344      	muls	r4, r0
10015f74:	9104      	str	r1, [sp, #16]
10015f76:	4359      	muls	r1, r3
10015f78:	436b      	muls	r3, r5
10015f7a:	4368      	muls	r0, r5
10015f7c:	191b      	adds	r3, r3, r4
10015f7e:	0c0d      	lsrs	r5, r1, #16
10015f80:	18eb      	adds	r3, r5, r3
10015f82:	429c      	cmp	r4, r3
10015f84:	d903      	bls.n	10015f8e <__aeabi_ddiv+0x2da>
10015f86:	2480      	movs	r4, #128	; 0x80
10015f88:	0264      	lsls	r4, r4, #9
10015f8a:	46a4      	mov	ip, r4
10015f8c:	4460      	add	r0, ip
10015f8e:	0c1c      	lsrs	r4, r3, #16
10015f90:	0409      	lsls	r1, r1, #16
10015f92:	041b      	lsls	r3, r3, #16
10015f94:	0c09      	lsrs	r1, r1, #16
10015f96:	1820      	adds	r0, r4, r0
10015f98:	185d      	adds	r5, r3, r1
10015f9a:	4282      	cmp	r2, r0
10015f9c:	d200      	bcs.n	10015fa0 <__aeabi_ddiv+0x2ec>
10015f9e:	e0de      	b.n	1001615e <__aeabi_ddiv+0x4aa>
10015fa0:	d100      	bne.n	10015fa4 <__aeabi_ddiv+0x2f0>
10015fa2:	e0d7      	b.n	10016154 <__aeabi_ddiv+0x4a0>
10015fa4:	1a16      	subs	r6, r2, r0
10015fa6:	9b02      	ldr	r3, [sp, #8]
10015fa8:	469c      	mov	ip, r3
10015faa:	1b5d      	subs	r5, r3, r5
10015fac:	45ac      	cmp	ip, r5
10015fae:	419b      	sbcs	r3, r3
10015fb0:	425b      	negs	r3, r3
10015fb2:	1af6      	subs	r6, r6, r3
10015fb4:	42b7      	cmp	r7, r6
10015fb6:	d100      	bne.n	10015fba <__aeabi_ddiv+0x306>
10015fb8:	e106      	b.n	100161c8 <__aeabi_ddiv+0x514>
10015fba:	4649      	mov	r1, r9
10015fbc:	0030      	movs	r0, r6
10015fbe:	f7fe fe9b 	bl	10014cf8 <__aeabi_uidiv>
10015fc2:	9b00      	ldr	r3, [sp, #0]
10015fc4:	0004      	movs	r4, r0
10015fc6:	4343      	muls	r3, r0
10015fc8:	4649      	mov	r1, r9
10015fca:	0030      	movs	r0, r6
10015fcc:	4698      	mov	r8, r3
10015fce:	f7fe ff19 	bl	10014e04 <__aeabi_uidivmod>
10015fd2:	0c2e      	lsrs	r6, r5, #16
10015fd4:	0409      	lsls	r1, r1, #16
10015fd6:	430e      	orrs	r6, r1
10015fd8:	45b0      	cmp	r8, r6
10015fda:	d909      	bls.n	10015ff0 <__aeabi_ddiv+0x33c>
10015fdc:	19f6      	adds	r6, r6, r7
10015fde:	1e63      	subs	r3, r4, #1
10015fe0:	42b7      	cmp	r7, r6
10015fe2:	d900      	bls.n	10015fe6 <__aeabi_ddiv+0x332>
10015fe4:	e0f3      	b.n	100161ce <__aeabi_ddiv+0x51a>
10015fe6:	45b0      	cmp	r8, r6
10015fe8:	d800      	bhi.n	10015fec <__aeabi_ddiv+0x338>
10015fea:	e0f0      	b.n	100161ce <__aeabi_ddiv+0x51a>
10015fec:	3c02      	subs	r4, #2
10015fee:	19f6      	adds	r6, r6, r7
10015ff0:	4643      	mov	r3, r8
10015ff2:	1af3      	subs	r3, r6, r3
10015ff4:	4649      	mov	r1, r9
10015ff6:	0018      	movs	r0, r3
10015ff8:	9302      	str	r3, [sp, #8]
10015ffa:	f7fe fe7d 	bl	10014cf8 <__aeabi_uidiv>
10015ffe:	9b00      	ldr	r3, [sp, #0]
10016000:	0006      	movs	r6, r0
10016002:	4343      	muls	r3, r0
10016004:	4649      	mov	r1, r9
10016006:	9802      	ldr	r0, [sp, #8]
10016008:	4698      	mov	r8, r3
1001600a:	f7fe fefb 	bl	10014e04 <__aeabi_uidivmod>
1001600e:	042d      	lsls	r5, r5, #16
10016010:	0409      	lsls	r1, r1, #16
10016012:	0c2d      	lsrs	r5, r5, #16
10016014:	430d      	orrs	r5, r1
10016016:	45a8      	cmp	r8, r5
10016018:	d909      	bls.n	1001602e <__aeabi_ddiv+0x37a>
1001601a:	19ed      	adds	r5, r5, r7
1001601c:	1e73      	subs	r3, r6, #1
1001601e:	42af      	cmp	r7, r5
10016020:	d900      	bls.n	10016024 <__aeabi_ddiv+0x370>
10016022:	e0d6      	b.n	100161d2 <__aeabi_ddiv+0x51e>
10016024:	45a8      	cmp	r8, r5
10016026:	d800      	bhi.n	1001602a <__aeabi_ddiv+0x376>
10016028:	e0d3      	b.n	100161d2 <__aeabi_ddiv+0x51e>
1001602a:	3e02      	subs	r6, #2
1001602c:	19ed      	adds	r5, r5, r7
1001602e:	0424      	lsls	r4, r4, #16
10016030:	0021      	movs	r1, r4
10016032:	4643      	mov	r3, r8
10016034:	4331      	orrs	r1, r6
10016036:	9e04      	ldr	r6, [sp, #16]
10016038:	9a05      	ldr	r2, [sp, #20]
1001603a:	0030      	movs	r0, r6
1001603c:	1aed      	subs	r5, r5, r3
1001603e:	040b      	lsls	r3, r1, #16
10016040:	0c0c      	lsrs	r4, r1, #16
10016042:	0c1b      	lsrs	r3, r3, #16
10016044:	4358      	muls	r0, r3
10016046:	4366      	muls	r6, r4
10016048:	4353      	muls	r3, r2
1001604a:	4354      	muls	r4, r2
1001604c:	199a      	adds	r2, r3, r6
1001604e:	0c03      	lsrs	r3, r0, #16
10016050:	189b      	adds	r3, r3, r2
10016052:	429e      	cmp	r6, r3
10016054:	d903      	bls.n	1001605e <__aeabi_ddiv+0x3aa>
10016056:	2280      	movs	r2, #128	; 0x80
10016058:	0252      	lsls	r2, r2, #9
1001605a:	4694      	mov	ip, r2
1001605c:	4464      	add	r4, ip
1001605e:	0c1a      	lsrs	r2, r3, #16
10016060:	0400      	lsls	r0, r0, #16
10016062:	041b      	lsls	r3, r3, #16
10016064:	0c00      	lsrs	r0, r0, #16
10016066:	1914      	adds	r4, r2, r4
10016068:	181b      	adds	r3, r3, r0
1001606a:	42a5      	cmp	r5, r4
1001606c:	d350      	bcc.n	10016110 <__aeabi_ddiv+0x45c>
1001606e:	d04d      	beq.n	1001610c <__aeabi_ddiv+0x458>
10016070:	2301      	movs	r3, #1
10016072:	4319      	orrs	r1, r3
10016074:	4a96      	ldr	r2, [pc, #600]	; (100162d0 <__aeabi_ddiv+0x61c>)
10016076:	9b01      	ldr	r3, [sp, #4]
10016078:	4694      	mov	ip, r2
1001607a:	4463      	add	r3, ip
1001607c:	2b00      	cmp	r3, #0
1001607e:	dc00      	bgt.n	10016082 <__aeabi_ddiv+0x3ce>
10016080:	e6f3      	b.n	10015e6a <__aeabi_ddiv+0x1b6>
10016082:	074a      	lsls	r2, r1, #29
10016084:	d009      	beq.n	1001609a <__aeabi_ddiv+0x3e6>
10016086:	220f      	movs	r2, #15
10016088:	400a      	ands	r2, r1
1001608a:	2a04      	cmp	r2, #4
1001608c:	d005      	beq.n	1001609a <__aeabi_ddiv+0x3e6>
1001608e:	1d0a      	adds	r2, r1, #4
10016090:	428a      	cmp	r2, r1
10016092:	4189      	sbcs	r1, r1
10016094:	4249      	negs	r1, r1
10016096:	448b      	add	fp, r1
10016098:	0011      	movs	r1, r2
1001609a:	465a      	mov	r2, fp
1001609c:	01d2      	lsls	r2, r2, #7
1001609e:	d508      	bpl.n	100160b2 <__aeabi_ddiv+0x3fe>
100160a0:	465a      	mov	r2, fp
100160a2:	4b8c      	ldr	r3, [pc, #560]	; (100162d4 <__aeabi_ddiv+0x620>)
100160a4:	401a      	ands	r2, r3
100160a6:	4693      	mov	fp, r2
100160a8:	2280      	movs	r2, #128	; 0x80
100160aa:	00d2      	lsls	r2, r2, #3
100160ac:	4694      	mov	ip, r2
100160ae:	9b01      	ldr	r3, [sp, #4]
100160b0:	4463      	add	r3, ip
100160b2:	4a89      	ldr	r2, [pc, #548]	; (100162d8 <__aeabi_ddiv+0x624>)
100160b4:	4293      	cmp	r3, r2
100160b6:	dd00      	ble.n	100160ba <__aeabi_ddiv+0x406>
100160b8:	e65b      	b.n	10015d72 <__aeabi_ddiv+0xbe>
100160ba:	465a      	mov	r2, fp
100160bc:	08c9      	lsrs	r1, r1, #3
100160be:	0750      	lsls	r0, r2, #29
100160c0:	4308      	orrs	r0, r1
100160c2:	0256      	lsls	r6, r2, #9
100160c4:	4651      	mov	r1, sl
100160c6:	2201      	movs	r2, #1
100160c8:	055b      	lsls	r3, r3, #21
100160ca:	4681      	mov	r9, r0
100160cc:	0b36      	lsrs	r6, r6, #12
100160ce:	0d5b      	lsrs	r3, r3, #21
100160d0:	400a      	ands	r2, r1
100160d2:	e655      	b.n	10015d80 <__aeabi_ddiv+0xcc>
100160d4:	2380      	movs	r3, #128	; 0x80
100160d6:	031b      	lsls	r3, r3, #12
100160d8:	421e      	tst	r6, r3
100160da:	d011      	beq.n	10016100 <__aeabi_ddiv+0x44c>
100160dc:	465a      	mov	r2, fp
100160de:	421a      	tst	r2, r3
100160e0:	d10e      	bne.n	10016100 <__aeabi_ddiv+0x44c>
100160e2:	465e      	mov	r6, fp
100160e4:	431e      	orrs	r6, r3
100160e6:	0336      	lsls	r6, r6, #12
100160e8:	0b36      	lsrs	r6, r6, #12
100160ea:	002a      	movs	r2, r5
100160ec:	4689      	mov	r9, r1
100160ee:	4b7b      	ldr	r3, [pc, #492]	; (100162dc <__aeabi_ddiv+0x628>)
100160f0:	e646      	b.n	10015d80 <__aeabi_ddiv+0xcc>
100160f2:	2b03      	cmp	r3, #3
100160f4:	d100      	bne.n	100160f8 <__aeabi_ddiv+0x444>
100160f6:	e0e1      	b.n	100162bc <__aeabi_ddiv+0x608>
100160f8:	2b01      	cmp	r3, #1
100160fa:	d1bb      	bne.n	10016074 <__aeabi_ddiv+0x3c0>
100160fc:	401a      	ands	r2, r3
100160fe:	e6bb      	b.n	10015e78 <__aeabi_ddiv+0x1c4>
10016100:	431e      	orrs	r6, r3
10016102:	0336      	lsls	r6, r6, #12
10016104:	0b36      	lsrs	r6, r6, #12
10016106:	4642      	mov	r2, r8
10016108:	4b74      	ldr	r3, [pc, #464]	; (100162dc <__aeabi_ddiv+0x628>)
1001610a:	e639      	b.n	10015d80 <__aeabi_ddiv+0xcc>
1001610c:	2b00      	cmp	r3, #0
1001610e:	d0b1      	beq.n	10016074 <__aeabi_ddiv+0x3c0>
10016110:	197d      	adds	r5, r7, r5
10016112:	1e4a      	subs	r2, r1, #1
10016114:	42af      	cmp	r7, r5
10016116:	d952      	bls.n	100161be <__aeabi_ddiv+0x50a>
10016118:	0011      	movs	r1, r2
1001611a:	42a5      	cmp	r5, r4
1001611c:	d1a8      	bne.n	10016070 <__aeabi_ddiv+0x3bc>
1001611e:	9a03      	ldr	r2, [sp, #12]
10016120:	429a      	cmp	r2, r3
10016122:	d1a5      	bne.n	10016070 <__aeabi_ddiv+0x3bc>
10016124:	e7a6      	b.n	10016074 <__aeabi_ddiv+0x3c0>
10016126:	0003      	movs	r3, r0
10016128:	003e      	movs	r6, r7
1001612a:	3b28      	subs	r3, #40	; 0x28
1001612c:	409e      	lsls	r6, r3
1001612e:	2300      	movs	r3, #0
10016130:	4699      	mov	r9, r3
10016132:	e654      	b.n	10015dde <__aeabi_ddiv+0x12a>
10016134:	f001 f960 	bl	100173f8 <__clzsi2>
10016138:	3020      	adds	r0, #32
1001613a:	e641      	b.n	10015dc0 <__aeabi_ddiv+0x10c>
1001613c:	0003      	movs	r3, r0
1001613e:	4652      	mov	r2, sl
10016140:	3b28      	subs	r3, #40	; 0x28
10016142:	409a      	lsls	r2, r3
10016144:	2100      	movs	r1, #0
10016146:	4693      	mov	fp, r2
10016148:	e677      	b.n	10015e3a <__aeabi_ddiv+0x186>
1001614a:	4650      	mov	r0, sl
1001614c:	f001 f954 	bl	100173f8 <__clzsi2>
10016150:	3020      	adds	r0, #32
10016152:	e65e      	b.n	10015e12 <__aeabi_ddiv+0x15e>
10016154:	9b02      	ldr	r3, [sp, #8]
10016156:	2600      	movs	r6, #0
10016158:	42ab      	cmp	r3, r5
1001615a:	d300      	bcc.n	1001615e <__aeabi_ddiv+0x4aa>
1001615c:	e723      	b.n	10015fa6 <__aeabi_ddiv+0x2f2>
1001615e:	9e03      	ldr	r6, [sp, #12]
10016160:	9902      	ldr	r1, [sp, #8]
10016162:	46b4      	mov	ip, r6
10016164:	4461      	add	r1, ip
10016166:	4688      	mov	r8, r1
10016168:	45b0      	cmp	r8, r6
1001616a:	41b6      	sbcs	r6, r6
1001616c:	465b      	mov	r3, fp
1001616e:	4276      	negs	r6, r6
10016170:	19f6      	adds	r6, r6, r7
10016172:	18b2      	adds	r2, r6, r2
10016174:	3b01      	subs	r3, #1
10016176:	9102      	str	r1, [sp, #8]
10016178:	4297      	cmp	r7, r2
1001617a:	d213      	bcs.n	100161a4 <__aeabi_ddiv+0x4f0>
1001617c:	4290      	cmp	r0, r2
1001617e:	d84f      	bhi.n	10016220 <__aeabi_ddiv+0x56c>
10016180:	d100      	bne.n	10016184 <__aeabi_ddiv+0x4d0>
10016182:	e08e      	b.n	100162a2 <__aeabi_ddiv+0x5ee>
10016184:	1a16      	subs	r6, r2, r0
10016186:	469b      	mov	fp, r3
10016188:	e70d      	b.n	10015fa6 <__aeabi_ddiv+0x2f2>
1001618a:	4589      	cmp	r9, r1
1001618c:	d200      	bcs.n	10016190 <__aeabi_ddiv+0x4dc>
1001618e:	e68e      	b.n	10015eae <__aeabi_ddiv+0x1fa>
10016190:	0874      	lsrs	r4, r6, #1
10016192:	464b      	mov	r3, r9
10016194:	07f6      	lsls	r6, r6, #31
10016196:	0035      	movs	r5, r6
10016198:	085b      	lsrs	r3, r3, #1
1001619a:	431d      	orrs	r5, r3
1001619c:	464b      	mov	r3, r9
1001619e:	07db      	lsls	r3, r3, #31
100161a0:	9302      	str	r3, [sp, #8]
100161a2:	e68b      	b.n	10015ebc <__aeabi_ddiv+0x208>
100161a4:	4297      	cmp	r7, r2
100161a6:	d1ed      	bne.n	10016184 <__aeabi_ddiv+0x4d0>
100161a8:	9903      	ldr	r1, [sp, #12]
100161aa:	9c02      	ldr	r4, [sp, #8]
100161ac:	42a1      	cmp	r1, r4
100161ae:	d9e5      	bls.n	1001617c <__aeabi_ddiv+0x4c8>
100161b0:	1a3e      	subs	r6, r7, r0
100161b2:	469b      	mov	fp, r3
100161b4:	e6f7      	b.n	10015fa6 <__aeabi_ddiv+0x2f2>
100161b6:	4698      	mov	r8, r3
100161b8:	e6ca      	b.n	10015f50 <__aeabi_ddiv+0x29c>
100161ba:	001e      	movs	r6, r3
100161bc:	e6a5      	b.n	10015f0a <__aeabi_ddiv+0x256>
100161be:	42ac      	cmp	r4, r5
100161c0:	d83e      	bhi.n	10016240 <__aeabi_ddiv+0x58c>
100161c2:	d074      	beq.n	100162ae <__aeabi_ddiv+0x5fa>
100161c4:	0011      	movs	r1, r2
100161c6:	e753      	b.n	10016070 <__aeabi_ddiv+0x3bc>
100161c8:	2101      	movs	r1, #1
100161ca:	4249      	negs	r1, r1
100161cc:	e752      	b.n	10016074 <__aeabi_ddiv+0x3c0>
100161ce:	001c      	movs	r4, r3
100161d0:	e70e      	b.n	10015ff0 <__aeabi_ddiv+0x33c>
100161d2:	001e      	movs	r6, r3
100161d4:	e72b      	b.n	1001602e <__aeabi_ddiv+0x37a>
100161d6:	2d1f      	cmp	r5, #31
100161d8:	dc3c      	bgt.n	10016254 <__aeabi_ddiv+0x5a0>
100161da:	2320      	movs	r3, #32
100161dc:	000a      	movs	r2, r1
100161de:	4658      	mov	r0, fp
100161e0:	1b5b      	subs	r3, r3, r5
100161e2:	4098      	lsls	r0, r3
100161e4:	40ea      	lsrs	r2, r5
100161e6:	4099      	lsls	r1, r3
100161e8:	4302      	orrs	r2, r0
100161ea:	1e48      	subs	r0, r1, #1
100161ec:	4181      	sbcs	r1, r0
100161ee:	465e      	mov	r6, fp
100161f0:	4311      	orrs	r1, r2
100161f2:	40ee      	lsrs	r6, r5
100161f4:	074b      	lsls	r3, r1, #29
100161f6:	d009      	beq.n	1001620c <__aeabi_ddiv+0x558>
100161f8:	230f      	movs	r3, #15
100161fa:	400b      	ands	r3, r1
100161fc:	2b04      	cmp	r3, #4
100161fe:	d005      	beq.n	1001620c <__aeabi_ddiv+0x558>
10016200:	000b      	movs	r3, r1
10016202:	1d19      	adds	r1, r3, #4
10016204:	4299      	cmp	r1, r3
10016206:	419b      	sbcs	r3, r3
10016208:	425b      	negs	r3, r3
1001620a:	18f6      	adds	r6, r6, r3
1001620c:	0233      	lsls	r3, r6, #8
1001620e:	d53c      	bpl.n	1001628a <__aeabi_ddiv+0x5d6>
10016210:	4653      	mov	r3, sl
10016212:	2201      	movs	r2, #1
10016214:	2100      	movs	r1, #0
10016216:	401a      	ands	r2, r3
10016218:	2600      	movs	r6, #0
1001621a:	2301      	movs	r3, #1
1001621c:	4689      	mov	r9, r1
1001621e:	e5af      	b.n	10015d80 <__aeabi_ddiv+0xcc>
10016220:	2302      	movs	r3, #2
10016222:	425b      	negs	r3, r3
10016224:	469c      	mov	ip, r3
10016226:	9c03      	ldr	r4, [sp, #12]
10016228:	44e3      	add	fp, ip
1001622a:	46a4      	mov	ip, r4
1001622c:	9b02      	ldr	r3, [sp, #8]
1001622e:	4463      	add	r3, ip
10016230:	4698      	mov	r8, r3
10016232:	45a0      	cmp	r8, r4
10016234:	41b6      	sbcs	r6, r6
10016236:	4276      	negs	r6, r6
10016238:	19f6      	adds	r6, r6, r7
1001623a:	9302      	str	r3, [sp, #8]
1001623c:	18b2      	adds	r2, r6, r2
1001623e:	e6b1      	b.n	10015fa4 <__aeabi_ddiv+0x2f0>
10016240:	9803      	ldr	r0, [sp, #12]
10016242:	1e8a      	subs	r2, r1, #2
10016244:	0041      	lsls	r1, r0, #1
10016246:	4281      	cmp	r1, r0
10016248:	41b6      	sbcs	r6, r6
1001624a:	4276      	negs	r6, r6
1001624c:	19f6      	adds	r6, r6, r7
1001624e:	19ad      	adds	r5, r5, r6
10016250:	9103      	str	r1, [sp, #12]
10016252:	e761      	b.n	10016118 <__aeabi_ddiv+0x464>
10016254:	221f      	movs	r2, #31
10016256:	4252      	negs	r2, r2
10016258:	1ad3      	subs	r3, r2, r3
1001625a:	465a      	mov	r2, fp
1001625c:	40da      	lsrs	r2, r3
1001625e:	0013      	movs	r3, r2
10016260:	2d20      	cmp	r5, #32
10016262:	d029      	beq.n	100162b8 <__aeabi_ddiv+0x604>
10016264:	2240      	movs	r2, #64	; 0x40
10016266:	4658      	mov	r0, fp
10016268:	1b55      	subs	r5, r2, r5
1001626a:	40a8      	lsls	r0, r5
1001626c:	4301      	orrs	r1, r0
1001626e:	1e48      	subs	r0, r1, #1
10016270:	4181      	sbcs	r1, r0
10016272:	2007      	movs	r0, #7
10016274:	430b      	orrs	r3, r1
10016276:	4018      	ands	r0, r3
10016278:	2600      	movs	r6, #0
1001627a:	2800      	cmp	r0, #0
1001627c:	d009      	beq.n	10016292 <__aeabi_ddiv+0x5de>
1001627e:	220f      	movs	r2, #15
10016280:	2600      	movs	r6, #0
10016282:	401a      	ands	r2, r3
10016284:	0019      	movs	r1, r3
10016286:	2a04      	cmp	r2, #4
10016288:	d1bb      	bne.n	10016202 <__aeabi_ddiv+0x54e>
1001628a:	000b      	movs	r3, r1
1001628c:	0770      	lsls	r0, r6, #29
1001628e:	0276      	lsls	r6, r6, #9
10016290:	0b36      	lsrs	r6, r6, #12
10016292:	08db      	lsrs	r3, r3, #3
10016294:	4303      	orrs	r3, r0
10016296:	4699      	mov	r9, r3
10016298:	2201      	movs	r2, #1
1001629a:	4653      	mov	r3, sl
1001629c:	401a      	ands	r2, r3
1001629e:	2300      	movs	r3, #0
100162a0:	e56e      	b.n	10015d80 <__aeabi_ddiv+0xcc>
100162a2:	9902      	ldr	r1, [sp, #8]
100162a4:	428d      	cmp	r5, r1
100162a6:	d8bb      	bhi.n	10016220 <__aeabi_ddiv+0x56c>
100162a8:	469b      	mov	fp, r3
100162aa:	2600      	movs	r6, #0
100162ac:	e67b      	b.n	10015fa6 <__aeabi_ddiv+0x2f2>
100162ae:	9803      	ldr	r0, [sp, #12]
100162b0:	4298      	cmp	r0, r3
100162b2:	d3c5      	bcc.n	10016240 <__aeabi_ddiv+0x58c>
100162b4:	0011      	movs	r1, r2
100162b6:	e732      	b.n	1001611e <__aeabi_ddiv+0x46a>
100162b8:	2000      	movs	r0, #0
100162ba:	e7d7      	b.n	1001626c <__aeabi_ddiv+0x5b8>
100162bc:	2680      	movs	r6, #128	; 0x80
100162be:	465b      	mov	r3, fp
100162c0:	0336      	lsls	r6, r6, #12
100162c2:	431e      	orrs	r6, r3
100162c4:	0336      	lsls	r6, r6, #12
100162c6:	0b36      	lsrs	r6, r6, #12
100162c8:	9a00      	ldr	r2, [sp, #0]
100162ca:	4689      	mov	r9, r1
100162cc:	4b03      	ldr	r3, [pc, #12]	; (100162dc <__aeabi_ddiv+0x628>)
100162ce:	e557      	b.n	10015d80 <__aeabi_ddiv+0xcc>
100162d0:	000003ff 	.word	0x000003ff
100162d4:	feffffff 	.word	0xfeffffff
100162d8:	000007fe 	.word	0x000007fe
100162dc:	000007ff 	.word	0x000007ff

100162e0 <__eqdf2>:
100162e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100162e2:	465f      	mov	r7, fp
100162e4:	4656      	mov	r6, sl
100162e6:	464d      	mov	r5, r9
100162e8:	4644      	mov	r4, r8
100162ea:	b4f0      	push	{r4, r5, r6, r7}
100162ec:	031f      	lsls	r7, r3, #12
100162ee:	005c      	lsls	r4, r3, #1
100162f0:	0fdb      	lsrs	r3, r3, #31
100162f2:	469a      	mov	sl, r3
100162f4:	4b19      	ldr	r3, [pc, #100]	; (1001635c <__eqdf2+0x7c>)
100162f6:	030e      	lsls	r6, r1, #12
100162f8:	004d      	lsls	r5, r1, #1
100162fa:	0fc9      	lsrs	r1, r1, #31
100162fc:	4680      	mov	r8, r0
100162fe:	0b36      	lsrs	r6, r6, #12
10016300:	0d6d      	lsrs	r5, r5, #21
10016302:	468b      	mov	fp, r1
10016304:	4691      	mov	r9, r2
10016306:	0b3f      	lsrs	r7, r7, #12
10016308:	0d64      	lsrs	r4, r4, #21
1001630a:	429d      	cmp	r5, r3
1001630c:	d019      	beq.n	10016342 <__eqdf2+0x62>
1001630e:	4b13      	ldr	r3, [pc, #76]	; (1001635c <__eqdf2+0x7c>)
10016310:	429c      	cmp	r4, r3
10016312:	d01b      	beq.n	1001634c <__eqdf2+0x6c>
10016314:	2301      	movs	r3, #1
10016316:	42a5      	cmp	r5, r4
10016318:	d006      	beq.n	10016328 <__eqdf2+0x48>
1001631a:	0018      	movs	r0, r3
1001631c:	bc3c      	pop	{r2, r3, r4, r5}
1001631e:	4690      	mov	r8, r2
10016320:	4699      	mov	r9, r3
10016322:	46a2      	mov	sl, r4
10016324:	46ab      	mov	fp, r5
10016326:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016328:	42be      	cmp	r6, r7
1001632a:	d1f6      	bne.n	1001631a <__eqdf2+0x3a>
1001632c:	45c8      	cmp	r8, r9
1001632e:	d1f4      	bne.n	1001631a <__eqdf2+0x3a>
10016330:	45d3      	cmp	fp, sl
10016332:	d010      	beq.n	10016356 <__eqdf2+0x76>
10016334:	2d00      	cmp	r5, #0
10016336:	d1f0      	bne.n	1001631a <__eqdf2+0x3a>
10016338:	4330      	orrs	r0, r6
1001633a:	0003      	movs	r3, r0
1001633c:	1e5a      	subs	r2, r3, #1
1001633e:	4193      	sbcs	r3, r2
10016340:	e7eb      	b.n	1001631a <__eqdf2+0x3a>
10016342:	0031      	movs	r1, r6
10016344:	2301      	movs	r3, #1
10016346:	4301      	orrs	r1, r0
10016348:	d1e7      	bne.n	1001631a <__eqdf2+0x3a>
1001634a:	e7e0      	b.n	1001630e <__eqdf2+0x2e>
1001634c:	433a      	orrs	r2, r7
1001634e:	2301      	movs	r3, #1
10016350:	2a00      	cmp	r2, #0
10016352:	d1e2      	bne.n	1001631a <__eqdf2+0x3a>
10016354:	e7de      	b.n	10016314 <__eqdf2+0x34>
10016356:	2300      	movs	r3, #0
10016358:	e7df      	b.n	1001631a <__eqdf2+0x3a>
1001635a:	46c0      	nop			; (mov r8, r8)
1001635c:	000007ff 	.word	0x000007ff

10016360 <__gedf2>:
10016360:	b5f0      	push	{r4, r5, r6, r7, lr}
10016362:	465f      	mov	r7, fp
10016364:	4644      	mov	r4, r8
10016366:	4656      	mov	r6, sl
10016368:	464d      	mov	r5, r9
1001636a:	b4f0      	push	{r4, r5, r6, r7}
1001636c:	031f      	lsls	r7, r3, #12
1001636e:	0b3c      	lsrs	r4, r7, #12
10016370:	4f2c      	ldr	r7, [pc, #176]	; (10016424 <__gedf2+0xc4>)
10016372:	030e      	lsls	r6, r1, #12
10016374:	004d      	lsls	r5, r1, #1
10016376:	46a3      	mov	fp, r4
10016378:	005c      	lsls	r4, r3, #1
1001637a:	4684      	mov	ip, r0
1001637c:	0b36      	lsrs	r6, r6, #12
1001637e:	0d6d      	lsrs	r5, r5, #21
10016380:	0fc9      	lsrs	r1, r1, #31
10016382:	4690      	mov	r8, r2
10016384:	0d64      	lsrs	r4, r4, #21
10016386:	0fdb      	lsrs	r3, r3, #31
10016388:	42bd      	cmp	r5, r7
1001638a:	d02b      	beq.n	100163e4 <__gedf2+0x84>
1001638c:	4f25      	ldr	r7, [pc, #148]	; (10016424 <__gedf2+0xc4>)
1001638e:	42bc      	cmp	r4, r7
10016390:	d02e      	beq.n	100163f0 <__gedf2+0x90>
10016392:	2d00      	cmp	r5, #0
10016394:	d10e      	bne.n	100163b4 <__gedf2+0x54>
10016396:	4330      	orrs	r0, r6
10016398:	0007      	movs	r7, r0
1001639a:	4681      	mov	r9, r0
1001639c:	4278      	negs	r0, r7
1001639e:	4178      	adcs	r0, r7
100163a0:	2c00      	cmp	r4, #0
100163a2:	d117      	bne.n	100163d4 <__gedf2+0x74>
100163a4:	465f      	mov	r7, fp
100163a6:	433a      	orrs	r2, r7
100163a8:	d114      	bne.n	100163d4 <__gedf2+0x74>
100163aa:	464b      	mov	r3, r9
100163ac:	2000      	movs	r0, #0
100163ae:	2b00      	cmp	r3, #0
100163b0:	d00a      	beq.n	100163c8 <__gedf2+0x68>
100163b2:	e006      	b.n	100163c2 <__gedf2+0x62>
100163b4:	2c00      	cmp	r4, #0
100163b6:	d102      	bne.n	100163be <__gedf2+0x5e>
100163b8:	4658      	mov	r0, fp
100163ba:	4302      	orrs	r2, r0
100163bc:	d001      	beq.n	100163c2 <__gedf2+0x62>
100163be:	4299      	cmp	r1, r3
100163c0:	d01a      	beq.n	100163f8 <__gedf2+0x98>
100163c2:	2301      	movs	r3, #1
100163c4:	4248      	negs	r0, r1
100163c6:	4318      	orrs	r0, r3
100163c8:	bc3c      	pop	{r2, r3, r4, r5}
100163ca:	4690      	mov	r8, r2
100163cc:	4699      	mov	r9, r3
100163ce:	46a2      	mov	sl, r4
100163d0:	46ab      	mov	fp, r5
100163d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100163d4:	2800      	cmp	r0, #0
100163d6:	d0f2      	beq.n	100163be <__gedf2+0x5e>
100163d8:	4258      	negs	r0, r3
100163da:	4158      	adcs	r0, r3
100163dc:	2201      	movs	r2, #1
100163de:	4240      	negs	r0, r0
100163e0:	4310      	orrs	r0, r2
100163e2:	e7f1      	b.n	100163c8 <__gedf2+0x68>
100163e4:	0037      	movs	r7, r6
100163e6:	4307      	orrs	r7, r0
100163e8:	d0d0      	beq.n	1001638c <__gedf2+0x2c>
100163ea:	2002      	movs	r0, #2
100163ec:	4240      	negs	r0, r0
100163ee:	e7eb      	b.n	100163c8 <__gedf2+0x68>
100163f0:	465f      	mov	r7, fp
100163f2:	4317      	orrs	r7, r2
100163f4:	d0cd      	beq.n	10016392 <__gedf2+0x32>
100163f6:	e7f8      	b.n	100163ea <__gedf2+0x8a>
100163f8:	42a5      	cmp	r5, r4
100163fa:	dce2      	bgt.n	100163c2 <__gedf2+0x62>
100163fc:	db05      	blt.n	1001640a <__gedf2+0xaa>
100163fe:	455e      	cmp	r6, fp
10016400:	d8df      	bhi.n	100163c2 <__gedf2+0x62>
10016402:	d008      	beq.n	10016416 <__gedf2+0xb6>
10016404:	2000      	movs	r0, #0
10016406:	455e      	cmp	r6, fp
10016408:	d2de      	bcs.n	100163c8 <__gedf2+0x68>
1001640a:	4248      	negs	r0, r1
1001640c:	4148      	adcs	r0, r1
1001640e:	2301      	movs	r3, #1
10016410:	4240      	negs	r0, r0
10016412:	4318      	orrs	r0, r3
10016414:	e7d8      	b.n	100163c8 <__gedf2+0x68>
10016416:	45c4      	cmp	ip, r8
10016418:	d8d3      	bhi.n	100163c2 <__gedf2+0x62>
1001641a:	2000      	movs	r0, #0
1001641c:	45c4      	cmp	ip, r8
1001641e:	d3f4      	bcc.n	1001640a <__gedf2+0xaa>
10016420:	e7d2      	b.n	100163c8 <__gedf2+0x68>
10016422:	46c0      	nop			; (mov r8, r8)
10016424:	000007ff 	.word	0x000007ff

10016428 <__ledf2>:
10016428:	b5f0      	push	{r4, r5, r6, r7, lr}
1001642a:	465f      	mov	r7, fp
1001642c:	464d      	mov	r5, r9
1001642e:	4644      	mov	r4, r8
10016430:	4656      	mov	r6, sl
10016432:	b4f0      	push	{r4, r5, r6, r7}
10016434:	031c      	lsls	r4, r3, #12
10016436:	0b24      	lsrs	r4, r4, #12
10016438:	46a4      	mov	ip, r4
1001643a:	4c2f      	ldr	r4, [pc, #188]	; (100164f8 <__ledf2+0xd0>)
1001643c:	030f      	lsls	r7, r1, #12
1001643e:	004d      	lsls	r5, r1, #1
10016440:	005e      	lsls	r6, r3, #1
10016442:	0fc9      	lsrs	r1, r1, #31
10016444:	4680      	mov	r8, r0
10016446:	0b3f      	lsrs	r7, r7, #12
10016448:	0d6d      	lsrs	r5, r5, #21
1001644a:	468b      	mov	fp, r1
1001644c:	4691      	mov	r9, r2
1001644e:	0d76      	lsrs	r6, r6, #21
10016450:	0fdb      	lsrs	r3, r3, #31
10016452:	42a5      	cmp	r5, r4
10016454:	d020      	beq.n	10016498 <__ledf2+0x70>
10016456:	4c28      	ldr	r4, [pc, #160]	; (100164f8 <__ledf2+0xd0>)
10016458:	42a6      	cmp	r6, r4
1001645a:	d022      	beq.n	100164a2 <__ledf2+0x7a>
1001645c:	2d00      	cmp	r5, #0
1001645e:	d112      	bne.n	10016486 <__ledf2+0x5e>
10016460:	4338      	orrs	r0, r7
10016462:	4244      	negs	r4, r0
10016464:	4144      	adcs	r4, r0
10016466:	2e00      	cmp	r6, #0
10016468:	d020      	beq.n	100164ac <__ledf2+0x84>
1001646a:	2c00      	cmp	r4, #0
1001646c:	d00d      	beq.n	1001648a <__ledf2+0x62>
1001646e:	425c      	negs	r4, r3
10016470:	4163      	adcs	r3, r4
10016472:	2401      	movs	r4, #1
10016474:	425b      	negs	r3, r3
10016476:	431c      	orrs	r4, r3
10016478:	0020      	movs	r0, r4
1001647a:	bc3c      	pop	{r2, r3, r4, r5}
1001647c:	4690      	mov	r8, r2
1001647e:	4699      	mov	r9, r3
10016480:	46a2      	mov	sl, r4
10016482:	46ab      	mov	fp, r5
10016484:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016486:	2e00      	cmp	r6, #0
10016488:	d017      	beq.n	100164ba <__ledf2+0x92>
1001648a:	455b      	cmp	r3, fp
1001648c:	d019      	beq.n	100164c2 <__ledf2+0x9a>
1001648e:	465b      	mov	r3, fp
10016490:	425c      	negs	r4, r3
10016492:	2301      	movs	r3, #1
10016494:	431c      	orrs	r4, r3
10016496:	e7ef      	b.n	10016478 <__ledf2+0x50>
10016498:	0039      	movs	r1, r7
1001649a:	2402      	movs	r4, #2
1001649c:	4301      	orrs	r1, r0
1001649e:	d1eb      	bne.n	10016478 <__ledf2+0x50>
100164a0:	e7d9      	b.n	10016456 <__ledf2+0x2e>
100164a2:	4661      	mov	r1, ip
100164a4:	2402      	movs	r4, #2
100164a6:	4311      	orrs	r1, r2
100164a8:	d1e6      	bne.n	10016478 <__ledf2+0x50>
100164aa:	e7d7      	b.n	1001645c <__ledf2+0x34>
100164ac:	4661      	mov	r1, ip
100164ae:	430a      	orrs	r2, r1
100164b0:	d1db      	bne.n	1001646a <__ledf2+0x42>
100164b2:	2400      	movs	r4, #0
100164b4:	2800      	cmp	r0, #0
100164b6:	d0df      	beq.n	10016478 <__ledf2+0x50>
100164b8:	e7e9      	b.n	1001648e <__ledf2+0x66>
100164ba:	4661      	mov	r1, ip
100164bc:	430a      	orrs	r2, r1
100164be:	d1e4      	bne.n	1001648a <__ledf2+0x62>
100164c0:	e7e5      	b.n	1001648e <__ledf2+0x66>
100164c2:	42b5      	cmp	r5, r6
100164c4:	dd03      	ble.n	100164ce <__ledf2+0xa6>
100164c6:	2201      	movs	r2, #1
100164c8:	425c      	negs	r4, r3
100164ca:	4314      	orrs	r4, r2
100164cc:	e7d4      	b.n	10016478 <__ledf2+0x50>
100164ce:	42b5      	cmp	r5, r6
100164d0:	dbcd      	blt.n	1001646e <__ledf2+0x46>
100164d2:	4567      	cmp	r7, ip
100164d4:	d8db      	bhi.n	1001648e <__ledf2+0x66>
100164d6:	d009      	beq.n	100164ec <__ledf2+0xc4>
100164d8:	2400      	movs	r4, #0
100164da:	4567      	cmp	r7, ip
100164dc:	d2cc      	bcs.n	10016478 <__ledf2+0x50>
100164de:	4659      	mov	r1, fp
100164e0:	424c      	negs	r4, r1
100164e2:	4161      	adcs	r1, r4
100164e4:	2401      	movs	r4, #1
100164e6:	4249      	negs	r1, r1
100164e8:	430c      	orrs	r4, r1
100164ea:	e7c5      	b.n	10016478 <__ledf2+0x50>
100164ec:	45c8      	cmp	r8, r9
100164ee:	d8ce      	bhi.n	1001648e <__ledf2+0x66>
100164f0:	2400      	movs	r4, #0
100164f2:	45c8      	cmp	r8, r9
100164f4:	d3f3      	bcc.n	100164de <__ledf2+0xb6>
100164f6:	e7bf      	b.n	10016478 <__ledf2+0x50>
100164f8:	000007ff 	.word	0x000007ff

100164fc <__aeabi_dmul>:
100164fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100164fe:	465f      	mov	r7, fp
10016500:	4656      	mov	r6, sl
10016502:	464d      	mov	r5, r9
10016504:	4644      	mov	r4, r8
10016506:	b4f0      	push	{r4, r5, r6, r7}
10016508:	030d      	lsls	r5, r1, #12
1001650a:	4699      	mov	r9, r3
1001650c:	004e      	lsls	r6, r1, #1
1001650e:	0b2b      	lsrs	r3, r5, #12
10016510:	b087      	sub	sp, #28
10016512:	0007      	movs	r7, r0
10016514:	4692      	mov	sl, r2
10016516:	4680      	mov	r8, r0
10016518:	469b      	mov	fp, r3
1001651a:	0d76      	lsrs	r6, r6, #21
1001651c:	0fcc      	lsrs	r4, r1, #31
1001651e:	2e00      	cmp	r6, #0
10016520:	d069      	beq.n	100165f6 <__aeabi_dmul+0xfa>
10016522:	4b6d      	ldr	r3, [pc, #436]	; (100166d8 <__aeabi_dmul+0x1dc>)
10016524:	429e      	cmp	r6, r3
10016526:	d035      	beq.n	10016594 <__aeabi_dmul+0x98>
10016528:	465b      	mov	r3, fp
1001652a:	2280      	movs	r2, #128	; 0x80
1001652c:	00dd      	lsls	r5, r3, #3
1001652e:	0412      	lsls	r2, r2, #16
10016530:	0f43      	lsrs	r3, r0, #29
10016532:	4313      	orrs	r3, r2
10016534:	432b      	orrs	r3, r5
10016536:	469b      	mov	fp, r3
10016538:	00c3      	lsls	r3, r0, #3
1001653a:	4698      	mov	r8, r3
1001653c:	4b67      	ldr	r3, [pc, #412]	; (100166dc <__aeabi_dmul+0x1e0>)
1001653e:	2700      	movs	r7, #0
10016540:	469c      	mov	ip, r3
10016542:	2300      	movs	r3, #0
10016544:	4466      	add	r6, ip
10016546:	9301      	str	r3, [sp, #4]
10016548:	464a      	mov	r2, r9
1001654a:	0315      	lsls	r5, r2, #12
1001654c:	0050      	lsls	r0, r2, #1
1001654e:	0fd2      	lsrs	r2, r2, #31
10016550:	4653      	mov	r3, sl
10016552:	0b2d      	lsrs	r5, r5, #12
10016554:	0d40      	lsrs	r0, r0, #21
10016556:	4691      	mov	r9, r2
10016558:	d100      	bne.n	1001655c <__aeabi_dmul+0x60>
1001655a:	e076      	b.n	1001664a <__aeabi_dmul+0x14e>
1001655c:	4a5e      	ldr	r2, [pc, #376]	; (100166d8 <__aeabi_dmul+0x1dc>)
1001655e:	4290      	cmp	r0, r2
10016560:	d06c      	beq.n	1001663c <__aeabi_dmul+0x140>
10016562:	2280      	movs	r2, #128	; 0x80
10016564:	0f5b      	lsrs	r3, r3, #29
10016566:	0412      	lsls	r2, r2, #16
10016568:	4313      	orrs	r3, r2
1001656a:	4a5c      	ldr	r2, [pc, #368]	; (100166dc <__aeabi_dmul+0x1e0>)
1001656c:	00ed      	lsls	r5, r5, #3
1001656e:	4694      	mov	ip, r2
10016570:	431d      	orrs	r5, r3
10016572:	4653      	mov	r3, sl
10016574:	2200      	movs	r2, #0
10016576:	00db      	lsls	r3, r3, #3
10016578:	4460      	add	r0, ip
1001657a:	4649      	mov	r1, r9
1001657c:	1836      	adds	r6, r6, r0
1001657e:	1c70      	adds	r0, r6, #1
10016580:	4061      	eors	r1, r4
10016582:	9002      	str	r0, [sp, #8]
10016584:	4317      	orrs	r7, r2
10016586:	2f0f      	cmp	r7, #15
10016588:	d900      	bls.n	1001658c <__aeabi_dmul+0x90>
1001658a:	e0af      	b.n	100166ec <__aeabi_dmul+0x1f0>
1001658c:	4854      	ldr	r0, [pc, #336]	; (100166e0 <__aeabi_dmul+0x1e4>)
1001658e:	00bf      	lsls	r7, r7, #2
10016590:	59c7      	ldr	r7, [r0, r7]
10016592:	46bf      	mov	pc, r7
10016594:	465b      	mov	r3, fp
10016596:	431f      	orrs	r7, r3
10016598:	d000      	beq.n	1001659c <__aeabi_dmul+0xa0>
1001659a:	e088      	b.n	100166ae <__aeabi_dmul+0x1b2>
1001659c:	2300      	movs	r3, #0
1001659e:	469b      	mov	fp, r3
100165a0:	4698      	mov	r8, r3
100165a2:	3302      	adds	r3, #2
100165a4:	2708      	movs	r7, #8
100165a6:	9301      	str	r3, [sp, #4]
100165a8:	e7ce      	b.n	10016548 <__aeabi_dmul+0x4c>
100165aa:	4649      	mov	r1, r9
100165ac:	2a02      	cmp	r2, #2
100165ae:	d06a      	beq.n	10016686 <__aeabi_dmul+0x18a>
100165b0:	2a03      	cmp	r2, #3
100165b2:	d100      	bne.n	100165b6 <__aeabi_dmul+0xba>
100165b4:	e209      	b.n	100169ca <__aeabi_dmul+0x4ce>
100165b6:	2a01      	cmp	r2, #1
100165b8:	d000      	beq.n	100165bc <__aeabi_dmul+0xc0>
100165ba:	e1bb      	b.n	10016934 <__aeabi_dmul+0x438>
100165bc:	4011      	ands	r1, r2
100165be:	2200      	movs	r2, #0
100165c0:	2300      	movs	r3, #0
100165c2:	2500      	movs	r5, #0
100165c4:	4690      	mov	r8, r2
100165c6:	b2cc      	uxtb	r4, r1
100165c8:	2100      	movs	r1, #0
100165ca:	032d      	lsls	r5, r5, #12
100165cc:	0d0a      	lsrs	r2, r1, #20
100165ce:	0512      	lsls	r2, r2, #20
100165d0:	0b2d      	lsrs	r5, r5, #12
100165d2:	4315      	orrs	r5, r2
100165d4:	4a43      	ldr	r2, [pc, #268]	; (100166e4 <__aeabi_dmul+0x1e8>)
100165d6:	051b      	lsls	r3, r3, #20
100165d8:	4015      	ands	r5, r2
100165da:	431d      	orrs	r5, r3
100165dc:	006d      	lsls	r5, r5, #1
100165de:	07e4      	lsls	r4, r4, #31
100165e0:	086d      	lsrs	r5, r5, #1
100165e2:	4325      	orrs	r5, r4
100165e4:	4640      	mov	r0, r8
100165e6:	0029      	movs	r1, r5
100165e8:	b007      	add	sp, #28
100165ea:	bc3c      	pop	{r2, r3, r4, r5}
100165ec:	4690      	mov	r8, r2
100165ee:	4699      	mov	r9, r3
100165f0:	46a2      	mov	sl, r4
100165f2:	46ab      	mov	fp, r5
100165f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100165f6:	4303      	orrs	r3, r0
100165f8:	d052      	beq.n	100166a0 <__aeabi_dmul+0x1a4>
100165fa:	465b      	mov	r3, fp
100165fc:	2b00      	cmp	r3, #0
100165fe:	d100      	bne.n	10016602 <__aeabi_dmul+0x106>
10016600:	e18a      	b.n	10016918 <__aeabi_dmul+0x41c>
10016602:	4658      	mov	r0, fp
10016604:	f000 fef8 	bl	100173f8 <__clzsi2>
10016608:	0003      	movs	r3, r0
1001660a:	3b0b      	subs	r3, #11
1001660c:	2b1c      	cmp	r3, #28
1001660e:	dd00      	ble.n	10016612 <__aeabi_dmul+0x116>
10016610:	e17b      	b.n	1001690a <__aeabi_dmul+0x40e>
10016612:	221d      	movs	r2, #29
10016614:	1ad3      	subs	r3, r2, r3
10016616:	003a      	movs	r2, r7
10016618:	0001      	movs	r1, r0
1001661a:	465d      	mov	r5, fp
1001661c:	40da      	lsrs	r2, r3
1001661e:	3908      	subs	r1, #8
10016620:	408d      	lsls	r5, r1
10016622:	0013      	movs	r3, r2
10016624:	408f      	lsls	r7, r1
10016626:	432b      	orrs	r3, r5
10016628:	469b      	mov	fp, r3
1001662a:	46b8      	mov	r8, r7
1001662c:	4b2e      	ldr	r3, [pc, #184]	; (100166e8 <__aeabi_dmul+0x1ec>)
1001662e:	2700      	movs	r7, #0
10016630:	469c      	mov	ip, r3
10016632:	2300      	movs	r3, #0
10016634:	4460      	add	r0, ip
10016636:	4246      	negs	r6, r0
10016638:	9301      	str	r3, [sp, #4]
1001663a:	e785      	b.n	10016548 <__aeabi_dmul+0x4c>
1001663c:	4652      	mov	r2, sl
1001663e:	432a      	orrs	r2, r5
10016640:	d12c      	bne.n	1001669c <__aeabi_dmul+0x1a0>
10016642:	2500      	movs	r5, #0
10016644:	2300      	movs	r3, #0
10016646:	2202      	movs	r2, #2
10016648:	e797      	b.n	1001657a <__aeabi_dmul+0x7e>
1001664a:	4652      	mov	r2, sl
1001664c:	432a      	orrs	r2, r5
1001664e:	d021      	beq.n	10016694 <__aeabi_dmul+0x198>
10016650:	2d00      	cmp	r5, #0
10016652:	d100      	bne.n	10016656 <__aeabi_dmul+0x15a>
10016654:	e154      	b.n	10016900 <__aeabi_dmul+0x404>
10016656:	0028      	movs	r0, r5
10016658:	f000 fece 	bl	100173f8 <__clzsi2>
1001665c:	0003      	movs	r3, r0
1001665e:	3b0b      	subs	r3, #11
10016660:	2b1c      	cmp	r3, #28
10016662:	dd00      	ble.n	10016666 <__aeabi_dmul+0x16a>
10016664:	e146      	b.n	100168f4 <__aeabi_dmul+0x3f8>
10016666:	211d      	movs	r1, #29
10016668:	1acb      	subs	r3, r1, r3
1001666a:	4651      	mov	r1, sl
1001666c:	0002      	movs	r2, r0
1001666e:	40d9      	lsrs	r1, r3
10016670:	4653      	mov	r3, sl
10016672:	3a08      	subs	r2, #8
10016674:	4095      	lsls	r5, r2
10016676:	4093      	lsls	r3, r2
10016678:	430d      	orrs	r5, r1
1001667a:	4a1b      	ldr	r2, [pc, #108]	; (100166e8 <__aeabi_dmul+0x1ec>)
1001667c:	4694      	mov	ip, r2
1001667e:	4460      	add	r0, ip
10016680:	4240      	negs	r0, r0
10016682:	2200      	movs	r2, #0
10016684:	e779      	b.n	1001657a <__aeabi_dmul+0x7e>
10016686:	2401      	movs	r4, #1
10016688:	2200      	movs	r2, #0
1001668a:	400c      	ands	r4, r1
1001668c:	4b12      	ldr	r3, [pc, #72]	; (100166d8 <__aeabi_dmul+0x1dc>)
1001668e:	2500      	movs	r5, #0
10016690:	4690      	mov	r8, r2
10016692:	e799      	b.n	100165c8 <__aeabi_dmul+0xcc>
10016694:	2500      	movs	r5, #0
10016696:	2300      	movs	r3, #0
10016698:	2201      	movs	r2, #1
1001669a:	e76e      	b.n	1001657a <__aeabi_dmul+0x7e>
1001669c:	2203      	movs	r2, #3
1001669e:	e76c      	b.n	1001657a <__aeabi_dmul+0x7e>
100166a0:	2300      	movs	r3, #0
100166a2:	469b      	mov	fp, r3
100166a4:	4698      	mov	r8, r3
100166a6:	3301      	adds	r3, #1
100166a8:	2704      	movs	r7, #4
100166aa:	9301      	str	r3, [sp, #4]
100166ac:	e74c      	b.n	10016548 <__aeabi_dmul+0x4c>
100166ae:	2303      	movs	r3, #3
100166b0:	270c      	movs	r7, #12
100166b2:	9301      	str	r3, [sp, #4]
100166b4:	e748      	b.n	10016548 <__aeabi_dmul+0x4c>
100166b6:	2300      	movs	r3, #0
100166b8:	2580      	movs	r5, #128	; 0x80
100166ba:	4698      	mov	r8, r3
100166bc:	2400      	movs	r4, #0
100166be:	032d      	lsls	r5, r5, #12
100166c0:	4b05      	ldr	r3, [pc, #20]	; (100166d8 <__aeabi_dmul+0x1dc>)
100166c2:	e781      	b.n	100165c8 <__aeabi_dmul+0xcc>
100166c4:	465d      	mov	r5, fp
100166c6:	4643      	mov	r3, r8
100166c8:	9a01      	ldr	r2, [sp, #4]
100166ca:	e76f      	b.n	100165ac <__aeabi_dmul+0xb0>
100166cc:	465d      	mov	r5, fp
100166ce:	4643      	mov	r3, r8
100166d0:	0021      	movs	r1, r4
100166d2:	9a01      	ldr	r2, [sp, #4]
100166d4:	e76a      	b.n	100165ac <__aeabi_dmul+0xb0>
100166d6:	46c0      	nop			; (mov r8, r8)
100166d8:	000007ff 	.word	0x000007ff
100166dc:	fffffc01 	.word	0xfffffc01
100166e0:	10018f48 	.word	0x10018f48
100166e4:	800fffff 	.word	0x800fffff
100166e8:	000003f3 	.word	0x000003f3
100166ec:	4642      	mov	r2, r8
100166ee:	0c12      	lsrs	r2, r2, #16
100166f0:	4691      	mov	r9, r2
100166f2:	0c1a      	lsrs	r2, r3, #16
100166f4:	4694      	mov	ip, r2
100166f6:	4642      	mov	r2, r8
100166f8:	0417      	lsls	r7, r2, #16
100166fa:	464a      	mov	r2, r9
100166fc:	041b      	lsls	r3, r3, #16
100166fe:	0c1b      	lsrs	r3, r3, #16
10016700:	435a      	muls	r2, r3
10016702:	4660      	mov	r0, ip
10016704:	4690      	mov	r8, r2
10016706:	464a      	mov	r2, r9
10016708:	4342      	muls	r2, r0
1001670a:	0010      	movs	r0, r2
1001670c:	9203      	str	r2, [sp, #12]
1001670e:	4662      	mov	r2, ip
10016710:	001c      	movs	r4, r3
10016712:	0c3f      	lsrs	r7, r7, #16
10016714:	437a      	muls	r2, r7
10016716:	437c      	muls	r4, r7
10016718:	4442      	add	r2, r8
1001671a:	9201      	str	r2, [sp, #4]
1001671c:	0c22      	lsrs	r2, r4, #16
1001671e:	4692      	mov	sl, r2
10016720:	9a01      	ldr	r2, [sp, #4]
10016722:	4452      	add	r2, sl
10016724:	4590      	cmp	r8, r2
10016726:	d906      	bls.n	10016736 <__aeabi_dmul+0x23a>
10016728:	4682      	mov	sl, r0
1001672a:	2080      	movs	r0, #128	; 0x80
1001672c:	0240      	lsls	r0, r0, #9
1001672e:	4680      	mov	r8, r0
10016730:	44c2      	add	sl, r8
10016732:	4650      	mov	r0, sl
10016734:	9003      	str	r0, [sp, #12]
10016736:	0c10      	lsrs	r0, r2, #16
10016738:	9004      	str	r0, [sp, #16]
1001673a:	4648      	mov	r0, r9
1001673c:	0424      	lsls	r4, r4, #16
1001673e:	0c24      	lsrs	r4, r4, #16
10016740:	0412      	lsls	r2, r2, #16
10016742:	1912      	adds	r2, r2, r4
10016744:	9205      	str	r2, [sp, #20]
10016746:	0c2a      	lsrs	r2, r5, #16
10016748:	042d      	lsls	r5, r5, #16
1001674a:	0c2d      	lsrs	r5, r5, #16
1001674c:	4368      	muls	r0, r5
1001674e:	002c      	movs	r4, r5
10016750:	4682      	mov	sl, r0
10016752:	4648      	mov	r0, r9
10016754:	437c      	muls	r4, r7
10016756:	4350      	muls	r0, r2
10016758:	4681      	mov	r9, r0
1001675a:	0c20      	lsrs	r0, r4, #16
1001675c:	4680      	mov	r8, r0
1001675e:	4357      	muls	r7, r2
10016760:	4457      	add	r7, sl
10016762:	4447      	add	r7, r8
10016764:	45ba      	cmp	sl, r7
10016766:	d903      	bls.n	10016770 <__aeabi_dmul+0x274>
10016768:	2080      	movs	r0, #128	; 0x80
1001676a:	0240      	lsls	r0, r0, #9
1001676c:	4680      	mov	r8, r0
1001676e:	44c1      	add	r9, r8
10016770:	0c38      	lsrs	r0, r7, #16
10016772:	043f      	lsls	r7, r7, #16
10016774:	46b8      	mov	r8, r7
10016776:	4448      	add	r0, r9
10016778:	0424      	lsls	r4, r4, #16
1001677a:	0c24      	lsrs	r4, r4, #16
1001677c:	9001      	str	r0, [sp, #4]
1001677e:	9804      	ldr	r0, [sp, #16]
10016780:	44a0      	add	r8, r4
10016782:	4440      	add	r0, r8
10016784:	9004      	str	r0, [sp, #16]
10016786:	4658      	mov	r0, fp
10016788:	0c00      	lsrs	r0, r0, #16
1001678a:	4681      	mov	r9, r0
1001678c:	4658      	mov	r0, fp
1001678e:	0404      	lsls	r4, r0, #16
10016790:	0c20      	lsrs	r0, r4, #16
10016792:	4682      	mov	sl, r0
10016794:	0007      	movs	r7, r0
10016796:	4648      	mov	r0, r9
10016798:	435f      	muls	r7, r3
1001679a:	464c      	mov	r4, r9
1001679c:	4343      	muls	r3, r0
1001679e:	4660      	mov	r0, ip
100167a0:	4360      	muls	r0, r4
100167a2:	4664      	mov	r4, ip
100167a4:	4683      	mov	fp, r0
100167a6:	4650      	mov	r0, sl
100167a8:	4344      	muls	r4, r0
100167aa:	0c38      	lsrs	r0, r7, #16
100167ac:	4684      	mov	ip, r0
100167ae:	18e4      	adds	r4, r4, r3
100167b0:	4464      	add	r4, ip
100167b2:	42a3      	cmp	r3, r4
100167b4:	d903      	bls.n	100167be <__aeabi_dmul+0x2c2>
100167b6:	2380      	movs	r3, #128	; 0x80
100167b8:	025b      	lsls	r3, r3, #9
100167ba:	469c      	mov	ip, r3
100167bc:	44e3      	add	fp, ip
100167be:	4648      	mov	r0, r9
100167c0:	043f      	lsls	r7, r7, #16
100167c2:	0c23      	lsrs	r3, r4, #16
100167c4:	0c3f      	lsrs	r7, r7, #16
100167c6:	0424      	lsls	r4, r4, #16
100167c8:	19e4      	adds	r4, r4, r7
100167ca:	4657      	mov	r7, sl
100167cc:	4368      	muls	r0, r5
100167ce:	436f      	muls	r7, r5
100167d0:	4684      	mov	ip, r0
100167d2:	464d      	mov	r5, r9
100167d4:	4650      	mov	r0, sl
100167d6:	4355      	muls	r5, r2
100167d8:	4342      	muls	r2, r0
100167da:	0c38      	lsrs	r0, r7, #16
100167dc:	4681      	mov	r9, r0
100167de:	4462      	add	r2, ip
100167e0:	444a      	add	r2, r9
100167e2:	445b      	add	r3, fp
100167e4:	4594      	cmp	ip, r2
100167e6:	d903      	bls.n	100167f0 <__aeabi_dmul+0x2f4>
100167e8:	2080      	movs	r0, #128	; 0x80
100167ea:	0240      	lsls	r0, r0, #9
100167ec:	4684      	mov	ip, r0
100167ee:	4465      	add	r5, ip
100167f0:	9803      	ldr	r0, [sp, #12]
100167f2:	043f      	lsls	r7, r7, #16
100167f4:	4683      	mov	fp, r0
100167f6:	9804      	ldr	r0, [sp, #16]
100167f8:	0c3f      	lsrs	r7, r7, #16
100167fa:	4684      	mov	ip, r0
100167fc:	44e3      	add	fp, ip
100167fe:	45c3      	cmp	fp, r8
10016800:	4180      	sbcs	r0, r0
10016802:	4240      	negs	r0, r0
10016804:	4682      	mov	sl, r0
10016806:	0410      	lsls	r0, r2, #16
10016808:	4684      	mov	ip, r0
1001680a:	9801      	ldr	r0, [sp, #4]
1001680c:	4467      	add	r7, ip
1001680e:	4684      	mov	ip, r0
10016810:	4467      	add	r7, ip
10016812:	44a3      	add	fp, r4
10016814:	46bc      	mov	ip, r7
10016816:	45a3      	cmp	fp, r4
10016818:	41a4      	sbcs	r4, r4
1001681a:	4699      	mov	r9, r3
1001681c:	44d4      	add	ip, sl
1001681e:	4264      	negs	r4, r4
10016820:	4287      	cmp	r7, r0
10016822:	41bf      	sbcs	r7, r7
10016824:	45d4      	cmp	ip, sl
10016826:	4180      	sbcs	r0, r0
10016828:	44e1      	add	r9, ip
1001682a:	46a0      	mov	r8, r4
1001682c:	4599      	cmp	r9, r3
1001682e:	419b      	sbcs	r3, r3
10016830:	427f      	negs	r7, r7
10016832:	4240      	negs	r0, r0
10016834:	44c8      	add	r8, r9
10016836:	4307      	orrs	r7, r0
10016838:	0c12      	lsrs	r2, r2, #16
1001683a:	18ba      	adds	r2, r7, r2
1001683c:	45a0      	cmp	r8, r4
1001683e:	41a4      	sbcs	r4, r4
10016840:	425f      	negs	r7, r3
10016842:	003b      	movs	r3, r7
10016844:	4264      	negs	r4, r4
10016846:	4323      	orrs	r3, r4
10016848:	18d7      	adds	r7, r2, r3
1001684a:	4643      	mov	r3, r8
1001684c:	197d      	adds	r5, r7, r5
1001684e:	0ddb      	lsrs	r3, r3, #23
10016850:	026d      	lsls	r5, r5, #9
10016852:	431d      	orrs	r5, r3
10016854:	465b      	mov	r3, fp
10016856:	025a      	lsls	r2, r3, #9
10016858:	9b05      	ldr	r3, [sp, #20]
1001685a:	431a      	orrs	r2, r3
1001685c:	1e53      	subs	r3, r2, #1
1001685e:	419a      	sbcs	r2, r3
10016860:	465b      	mov	r3, fp
10016862:	0ddb      	lsrs	r3, r3, #23
10016864:	431a      	orrs	r2, r3
10016866:	4643      	mov	r3, r8
10016868:	025b      	lsls	r3, r3, #9
1001686a:	4313      	orrs	r3, r2
1001686c:	01ea      	lsls	r2, r5, #7
1001686e:	d507      	bpl.n	10016880 <__aeabi_dmul+0x384>
10016870:	2201      	movs	r2, #1
10016872:	085c      	lsrs	r4, r3, #1
10016874:	4013      	ands	r3, r2
10016876:	4323      	orrs	r3, r4
10016878:	07ea      	lsls	r2, r5, #31
1001687a:	9e02      	ldr	r6, [sp, #8]
1001687c:	4313      	orrs	r3, r2
1001687e:	086d      	lsrs	r5, r5, #1
10016880:	4a57      	ldr	r2, [pc, #348]	; (100169e0 <__aeabi_dmul+0x4e4>)
10016882:	18b2      	adds	r2, r6, r2
10016884:	2a00      	cmp	r2, #0
10016886:	dd4b      	ble.n	10016920 <__aeabi_dmul+0x424>
10016888:	0758      	lsls	r0, r3, #29
1001688a:	d009      	beq.n	100168a0 <__aeabi_dmul+0x3a4>
1001688c:	200f      	movs	r0, #15
1001688e:	4018      	ands	r0, r3
10016890:	2804      	cmp	r0, #4
10016892:	d005      	beq.n	100168a0 <__aeabi_dmul+0x3a4>
10016894:	1d18      	adds	r0, r3, #4
10016896:	4298      	cmp	r0, r3
10016898:	419b      	sbcs	r3, r3
1001689a:	425b      	negs	r3, r3
1001689c:	18ed      	adds	r5, r5, r3
1001689e:	0003      	movs	r3, r0
100168a0:	01e8      	lsls	r0, r5, #7
100168a2:	d504      	bpl.n	100168ae <__aeabi_dmul+0x3b2>
100168a4:	4a4f      	ldr	r2, [pc, #316]	; (100169e4 <__aeabi_dmul+0x4e8>)
100168a6:	4015      	ands	r5, r2
100168a8:	2280      	movs	r2, #128	; 0x80
100168aa:	00d2      	lsls	r2, r2, #3
100168ac:	18b2      	adds	r2, r6, r2
100168ae:	484e      	ldr	r0, [pc, #312]	; (100169e8 <__aeabi_dmul+0x4ec>)
100168b0:	4282      	cmp	r2, r0
100168b2:	dd00      	ble.n	100168b6 <__aeabi_dmul+0x3ba>
100168b4:	e6e7      	b.n	10016686 <__aeabi_dmul+0x18a>
100168b6:	2401      	movs	r4, #1
100168b8:	08db      	lsrs	r3, r3, #3
100168ba:	0768      	lsls	r0, r5, #29
100168bc:	4318      	orrs	r0, r3
100168be:	026d      	lsls	r5, r5, #9
100168c0:	0553      	lsls	r3, r2, #21
100168c2:	4680      	mov	r8, r0
100168c4:	0b2d      	lsrs	r5, r5, #12
100168c6:	0d5b      	lsrs	r3, r3, #21
100168c8:	400c      	ands	r4, r1
100168ca:	e67d      	b.n	100165c8 <__aeabi_dmul+0xcc>
100168cc:	2280      	movs	r2, #128	; 0x80
100168ce:	4659      	mov	r1, fp
100168d0:	0312      	lsls	r2, r2, #12
100168d2:	4211      	tst	r1, r2
100168d4:	d008      	beq.n	100168e8 <__aeabi_dmul+0x3ec>
100168d6:	4215      	tst	r5, r2
100168d8:	d106      	bne.n	100168e8 <__aeabi_dmul+0x3ec>
100168da:	4315      	orrs	r5, r2
100168dc:	032d      	lsls	r5, r5, #12
100168de:	4698      	mov	r8, r3
100168e0:	0b2d      	lsrs	r5, r5, #12
100168e2:	464c      	mov	r4, r9
100168e4:	4b41      	ldr	r3, [pc, #260]	; (100169ec <__aeabi_dmul+0x4f0>)
100168e6:	e66f      	b.n	100165c8 <__aeabi_dmul+0xcc>
100168e8:	465d      	mov	r5, fp
100168ea:	4315      	orrs	r5, r2
100168ec:	032d      	lsls	r5, r5, #12
100168ee:	0b2d      	lsrs	r5, r5, #12
100168f0:	4b3e      	ldr	r3, [pc, #248]	; (100169ec <__aeabi_dmul+0x4f0>)
100168f2:	e669      	b.n	100165c8 <__aeabi_dmul+0xcc>
100168f4:	0003      	movs	r3, r0
100168f6:	4655      	mov	r5, sl
100168f8:	3b28      	subs	r3, #40	; 0x28
100168fa:	409d      	lsls	r5, r3
100168fc:	2300      	movs	r3, #0
100168fe:	e6bc      	b.n	1001667a <__aeabi_dmul+0x17e>
10016900:	4650      	mov	r0, sl
10016902:	f000 fd79 	bl	100173f8 <__clzsi2>
10016906:	3020      	adds	r0, #32
10016908:	e6a8      	b.n	1001665c <__aeabi_dmul+0x160>
1001690a:	0003      	movs	r3, r0
1001690c:	3b28      	subs	r3, #40	; 0x28
1001690e:	409f      	lsls	r7, r3
10016910:	2300      	movs	r3, #0
10016912:	46bb      	mov	fp, r7
10016914:	4698      	mov	r8, r3
10016916:	e689      	b.n	1001662c <__aeabi_dmul+0x130>
10016918:	f000 fd6e 	bl	100173f8 <__clzsi2>
1001691c:	3020      	adds	r0, #32
1001691e:	e673      	b.n	10016608 <__aeabi_dmul+0x10c>
10016920:	2401      	movs	r4, #1
10016922:	1aa6      	subs	r6, r4, r2
10016924:	2e38      	cmp	r6, #56	; 0x38
10016926:	dd07      	ble.n	10016938 <__aeabi_dmul+0x43c>
10016928:	2200      	movs	r2, #0
1001692a:	400c      	ands	r4, r1
1001692c:	2300      	movs	r3, #0
1001692e:	2500      	movs	r5, #0
10016930:	4690      	mov	r8, r2
10016932:	e649      	b.n	100165c8 <__aeabi_dmul+0xcc>
10016934:	9e02      	ldr	r6, [sp, #8]
10016936:	e7a3      	b.n	10016880 <__aeabi_dmul+0x384>
10016938:	2e1f      	cmp	r6, #31
1001693a:	dc20      	bgt.n	1001697e <__aeabi_dmul+0x482>
1001693c:	2220      	movs	r2, #32
1001693e:	002c      	movs	r4, r5
10016940:	0018      	movs	r0, r3
10016942:	1b92      	subs	r2, r2, r6
10016944:	40f0      	lsrs	r0, r6
10016946:	4094      	lsls	r4, r2
10016948:	4093      	lsls	r3, r2
1001694a:	4304      	orrs	r4, r0
1001694c:	1e58      	subs	r0, r3, #1
1001694e:	4183      	sbcs	r3, r0
10016950:	431c      	orrs	r4, r3
10016952:	40f5      	lsrs	r5, r6
10016954:	0763      	lsls	r3, r4, #29
10016956:	d009      	beq.n	1001696c <__aeabi_dmul+0x470>
10016958:	230f      	movs	r3, #15
1001695a:	4023      	ands	r3, r4
1001695c:	2b04      	cmp	r3, #4
1001695e:	d005      	beq.n	1001696c <__aeabi_dmul+0x470>
10016960:	0023      	movs	r3, r4
10016962:	1d1c      	adds	r4, r3, #4
10016964:	429c      	cmp	r4, r3
10016966:	4192      	sbcs	r2, r2
10016968:	4252      	negs	r2, r2
1001696a:	18ad      	adds	r5, r5, r2
1001696c:	022b      	lsls	r3, r5, #8
1001696e:	d51f      	bpl.n	100169b0 <__aeabi_dmul+0x4b4>
10016970:	2401      	movs	r4, #1
10016972:	2200      	movs	r2, #0
10016974:	400c      	ands	r4, r1
10016976:	2301      	movs	r3, #1
10016978:	2500      	movs	r5, #0
1001697a:	4690      	mov	r8, r2
1001697c:	e624      	b.n	100165c8 <__aeabi_dmul+0xcc>
1001697e:	201f      	movs	r0, #31
10016980:	002c      	movs	r4, r5
10016982:	4240      	negs	r0, r0
10016984:	1a82      	subs	r2, r0, r2
10016986:	40d4      	lsrs	r4, r2
10016988:	2e20      	cmp	r6, #32
1001698a:	d01c      	beq.n	100169c6 <__aeabi_dmul+0x4ca>
1001698c:	2240      	movs	r2, #64	; 0x40
1001698e:	1b96      	subs	r6, r2, r6
10016990:	40b5      	lsls	r5, r6
10016992:	432b      	orrs	r3, r5
10016994:	1e58      	subs	r0, r3, #1
10016996:	4183      	sbcs	r3, r0
10016998:	2007      	movs	r0, #7
1001699a:	4323      	orrs	r3, r4
1001699c:	4018      	ands	r0, r3
1001699e:	2500      	movs	r5, #0
100169a0:	2800      	cmp	r0, #0
100169a2:	d009      	beq.n	100169b8 <__aeabi_dmul+0x4bc>
100169a4:	220f      	movs	r2, #15
100169a6:	2500      	movs	r5, #0
100169a8:	401a      	ands	r2, r3
100169aa:	001c      	movs	r4, r3
100169ac:	2a04      	cmp	r2, #4
100169ae:	d1d8      	bne.n	10016962 <__aeabi_dmul+0x466>
100169b0:	0023      	movs	r3, r4
100169b2:	0768      	lsls	r0, r5, #29
100169b4:	026d      	lsls	r5, r5, #9
100169b6:	0b2d      	lsrs	r5, r5, #12
100169b8:	2401      	movs	r4, #1
100169ba:	08db      	lsrs	r3, r3, #3
100169bc:	4303      	orrs	r3, r0
100169be:	4698      	mov	r8, r3
100169c0:	400c      	ands	r4, r1
100169c2:	2300      	movs	r3, #0
100169c4:	e600      	b.n	100165c8 <__aeabi_dmul+0xcc>
100169c6:	2500      	movs	r5, #0
100169c8:	e7e3      	b.n	10016992 <__aeabi_dmul+0x496>
100169ca:	2280      	movs	r2, #128	; 0x80
100169cc:	2401      	movs	r4, #1
100169ce:	0312      	lsls	r2, r2, #12
100169d0:	4315      	orrs	r5, r2
100169d2:	032d      	lsls	r5, r5, #12
100169d4:	4698      	mov	r8, r3
100169d6:	0b2d      	lsrs	r5, r5, #12
100169d8:	400c      	ands	r4, r1
100169da:	4b04      	ldr	r3, [pc, #16]	; (100169ec <__aeabi_dmul+0x4f0>)
100169dc:	e5f4      	b.n	100165c8 <__aeabi_dmul+0xcc>
100169de:	46c0      	nop			; (mov r8, r8)
100169e0:	000003ff 	.word	0x000003ff
100169e4:	feffffff 	.word	0xfeffffff
100169e8:	000007fe 	.word	0x000007fe
100169ec:	000007ff 	.word	0x000007ff

100169f0 <__aeabi_dsub>:
100169f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100169f2:	4657      	mov	r7, sl
100169f4:	464e      	mov	r6, r9
100169f6:	4645      	mov	r5, r8
100169f8:	b4e0      	push	{r5, r6, r7}
100169fa:	000e      	movs	r6, r1
100169fc:	0011      	movs	r1, r2
100169fe:	0ff2      	lsrs	r2, r6, #31
10016a00:	4692      	mov	sl, r2
10016a02:	00c5      	lsls	r5, r0, #3
10016a04:	0f42      	lsrs	r2, r0, #29
10016a06:	0318      	lsls	r0, r3, #12
10016a08:	0337      	lsls	r7, r6, #12
10016a0a:	0074      	lsls	r4, r6, #1
10016a0c:	0a40      	lsrs	r0, r0, #9
10016a0e:	0f4e      	lsrs	r6, r1, #29
10016a10:	0a7f      	lsrs	r7, r7, #9
10016a12:	4330      	orrs	r0, r6
10016a14:	4ecf      	ldr	r6, [pc, #828]	; (10016d54 <__aeabi_dsub+0x364>)
10016a16:	4317      	orrs	r7, r2
10016a18:	005a      	lsls	r2, r3, #1
10016a1a:	0d64      	lsrs	r4, r4, #21
10016a1c:	0d52      	lsrs	r2, r2, #21
10016a1e:	0fdb      	lsrs	r3, r3, #31
10016a20:	00c9      	lsls	r1, r1, #3
10016a22:	42b2      	cmp	r2, r6
10016a24:	d100      	bne.n	10016a28 <__aeabi_dsub+0x38>
10016a26:	e0e5      	b.n	10016bf4 <__aeabi_dsub+0x204>
10016a28:	2601      	movs	r6, #1
10016a2a:	4073      	eors	r3, r6
10016a2c:	1aa6      	subs	r6, r4, r2
10016a2e:	46b4      	mov	ip, r6
10016a30:	4553      	cmp	r3, sl
10016a32:	d100      	bne.n	10016a36 <__aeabi_dsub+0x46>
10016a34:	e0af      	b.n	10016b96 <__aeabi_dsub+0x1a6>
10016a36:	2e00      	cmp	r6, #0
10016a38:	dc00      	bgt.n	10016a3c <__aeabi_dsub+0x4c>
10016a3a:	e10d      	b.n	10016c58 <__aeabi_dsub+0x268>
10016a3c:	2a00      	cmp	r2, #0
10016a3e:	d13a      	bne.n	10016ab6 <__aeabi_dsub+0xc6>
10016a40:	0003      	movs	r3, r0
10016a42:	430b      	orrs	r3, r1
10016a44:	d000      	beq.n	10016a48 <__aeabi_dsub+0x58>
10016a46:	e0e4      	b.n	10016c12 <__aeabi_dsub+0x222>
10016a48:	076b      	lsls	r3, r5, #29
10016a4a:	d009      	beq.n	10016a60 <__aeabi_dsub+0x70>
10016a4c:	230f      	movs	r3, #15
10016a4e:	402b      	ands	r3, r5
10016a50:	2b04      	cmp	r3, #4
10016a52:	d005      	beq.n	10016a60 <__aeabi_dsub+0x70>
10016a54:	1d2b      	adds	r3, r5, #4
10016a56:	42ab      	cmp	r3, r5
10016a58:	41ad      	sbcs	r5, r5
10016a5a:	426d      	negs	r5, r5
10016a5c:	197f      	adds	r7, r7, r5
10016a5e:	001d      	movs	r5, r3
10016a60:	023b      	lsls	r3, r7, #8
10016a62:	d400      	bmi.n	10016a66 <__aeabi_dsub+0x76>
10016a64:	e088      	b.n	10016b78 <__aeabi_dsub+0x188>
10016a66:	4bbb      	ldr	r3, [pc, #748]	; (10016d54 <__aeabi_dsub+0x364>)
10016a68:	3401      	adds	r4, #1
10016a6a:	429c      	cmp	r4, r3
10016a6c:	d100      	bne.n	10016a70 <__aeabi_dsub+0x80>
10016a6e:	e110      	b.n	10016c92 <__aeabi_dsub+0x2a2>
10016a70:	003a      	movs	r2, r7
10016a72:	4bb9      	ldr	r3, [pc, #740]	; (10016d58 <__aeabi_dsub+0x368>)
10016a74:	4651      	mov	r1, sl
10016a76:	401a      	ands	r2, r3
10016a78:	2301      	movs	r3, #1
10016a7a:	0750      	lsls	r0, r2, #29
10016a7c:	08ed      	lsrs	r5, r5, #3
10016a7e:	0252      	lsls	r2, r2, #9
10016a80:	0564      	lsls	r4, r4, #21
10016a82:	4305      	orrs	r5, r0
10016a84:	0b12      	lsrs	r2, r2, #12
10016a86:	0d64      	lsrs	r4, r4, #21
10016a88:	400b      	ands	r3, r1
10016a8a:	2100      	movs	r1, #0
10016a8c:	0028      	movs	r0, r5
10016a8e:	0312      	lsls	r2, r2, #12
10016a90:	0d0d      	lsrs	r5, r1, #20
10016a92:	0b12      	lsrs	r2, r2, #12
10016a94:	0564      	lsls	r4, r4, #21
10016a96:	052d      	lsls	r5, r5, #20
10016a98:	4315      	orrs	r5, r2
10016a9a:	0862      	lsrs	r2, r4, #1
10016a9c:	4caf      	ldr	r4, [pc, #700]	; (10016d5c <__aeabi_dsub+0x36c>)
10016a9e:	07db      	lsls	r3, r3, #31
10016aa0:	402c      	ands	r4, r5
10016aa2:	4314      	orrs	r4, r2
10016aa4:	0064      	lsls	r4, r4, #1
10016aa6:	0864      	lsrs	r4, r4, #1
10016aa8:	431c      	orrs	r4, r3
10016aaa:	0021      	movs	r1, r4
10016aac:	bc1c      	pop	{r2, r3, r4}
10016aae:	4690      	mov	r8, r2
10016ab0:	4699      	mov	r9, r3
10016ab2:	46a2      	mov	sl, r4
10016ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016ab6:	4ba7      	ldr	r3, [pc, #668]	; (10016d54 <__aeabi_dsub+0x364>)
10016ab8:	429c      	cmp	r4, r3
10016aba:	d0c5      	beq.n	10016a48 <__aeabi_dsub+0x58>
10016abc:	2380      	movs	r3, #128	; 0x80
10016abe:	041b      	lsls	r3, r3, #16
10016ac0:	4318      	orrs	r0, r3
10016ac2:	4663      	mov	r3, ip
10016ac4:	2b38      	cmp	r3, #56	; 0x38
10016ac6:	dd00      	ble.n	10016aca <__aeabi_dsub+0xda>
10016ac8:	e0fd      	b.n	10016cc6 <__aeabi_dsub+0x2d6>
10016aca:	2b1f      	cmp	r3, #31
10016acc:	dd00      	ble.n	10016ad0 <__aeabi_dsub+0xe0>
10016ace:	e130      	b.n	10016d32 <__aeabi_dsub+0x342>
10016ad0:	4662      	mov	r2, ip
10016ad2:	2320      	movs	r3, #32
10016ad4:	1a9b      	subs	r3, r3, r2
10016ad6:	0002      	movs	r2, r0
10016ad8:	409a      	lsls	r2, r3
10016ada:	4666      	mov	r6, ip
10016adc:	4690      	mov	r8, r2
10016ade:	000a      	movs	r2, r1
10016ae0:	4099      	lsls	r1, r3
10016ae2:	40f2      	lsrs	r2, r6
10016ae4:	4646      	mov	r6, r8
10016ae6:	1e4b      	subs	r3, r1, #1
10016ae8:	4199      	sbcs	r1, r3
10016aea:	4332      	orrs	r2, r6
10016aec:	4311      	orrs	r1, r2
10016aee:	4663      	mov	r3, ip
10016af0:	0002      	movs	r2, r0
10016af2:	40da      	lsrs	r2, r3
10016af4:	1a69      	subs	r1, r5, r1
10016af6:	428d      	cmp	r5, r1
10016af8:	419b      	sbcs	r3, r3
10016afa:	000d      	movs	r5, r1
10016afc:	1aba      	subs	r2, r7, r2
10016afe:	425b      	negs	r3, r3
10016b00:	1ad7      	subs	r7, r2, r3
10016b02:	023b      	lsls	r3, r7, #8
10016b04:	d535      	bpl.n	10016b72 <__aeabi_dsub+0x182>
10016b06:	027a      	lsls	r2, r7, #9
10016b08:	0a53      	lsrs	r3, r2, #9
10016b0a:	4698      	mov	r8, r3
10016b0c:	4643      	mov	r3, r8
10016b0e:	2b00      	cmp	r3, #0
10016b10:	d100      	bne.n	10016b14 <__aeabi_dsub+0x124>
10016b12:	e0c4      	b.n	10016c9e <__aeabi_dsub+0x2ae>
10016b14:	4640      	mov	r0, r8
10016b16:	f000 fc6f 	bl	100173f8 <__clzsi2>
10016b1a:	0003      	movs	r3, r0
10016b1c:	3b08      	subs	r3, #8
10016b1e:	2b1f      	cmp	r3, #31
10016b20:	dd00      	ble.n	10016b24 <__aeabi_dsub+0x134>
10016b22:	e0c5      	b.n	10016cb0 <__aeabi_dsub+0x2c0>
10016b24:	2220      	movs	r2, #32
10016b26:	0029      	movs	r1, r5
10016b28:	1ad2      	subs	r2, r2, r3
10016b2a:	4647      	mov	r7, r8
10016b2c:	40d1      	lsrs	r1, r2
10016b2e:	409f      	lsls	r7, r3
10016b30:	000a      	movs	r2, r1
10016b32:	409d      	lsls	r5, r3
10016b34:	433a      	orrs	r2, r7
10016b36:	429c      	cmp	r4, r3
10016b38:	dd00      	ble.n	10016b3c <__aeabi_dsub+0x14c>
10016b3a:	e0c0      	b.n	10016cbe <__aeabi_dsub+0x2ce>
10016b3c:	1b1c      	subs	r4, r3, r4
10016b3e:	1c63      	adds	r3, r4, #1
10016b40:	2b1f      	cmp	r3, #31
10016b42:	dd00      	ble.n	10016b46 <__aeabi_dsub+0x156>
10016b44:	e0e4      	b.n	10016d10 <__aeabi_dsub+0x320>
10016b46:	2120      	movs	r1, #32
10016b48:	0014      	movs	r4, r2
10016b4a:	0028      	movs	r0, r5
10016b4c:	1ac9      	subs	r1, r1, r3
10016b4e:	40d8      	lsrs	r0, r3
10016b50:	408c      	lsls	r4, r1
10016b52:	408d      	lsls	r5, r1
10016b54:	4304      	orrs	r4, r0
10016b56:	40da      	lsrs	r2, r3
10016b58:	1e68      	subs	r0, r5, #1
10016b5a:	4185      	sbcs	r5, r0
10016b5c:	0017      	movs	r7, r2
10016b5e:	4325      	orrs	r5, r4
10016b60:	2400      	movs	r4, #0
10016b62:	e771      	b.n	10016a48 <__aeabi_dsub+0x58>
10016b64:	4642      	mov	r2, r8
10016b66:	4663      	mov	r3, ip
10016b68:	431a      	orrs	r2, r3
10016b6a:	d100      	bne.n	10016b6e <__aeabi_dsub+0x17e>
10016b6c:	e24c      	b.n	10017008 <__aeabi_dsub+0x618>
10016b6e:	4667      	mov	r7, ip
10016b70:	4645      	mov	r5, r8
10016b72:	076b      	lsls	r3, r5, #29
10016b74:	d000      	beq.n	10016b78 <__aeabi_dsub+0x188>
10016b76:	e769      	b.n	10016a4c <__aeabi_dsub+0x5c>
10016b78:	2301      	movs	r3, #1
10016b7a:	4651      	mov	r1, sl
10016b7c:	0778      	lsls	r0, r7, #29
10016b7e:	08ed      	lsrs	r5, r5, #3
10016b80:	08fa      	lsrs	r2, r7, #3
10016b82:	400b      	ands	r3, r1
10016b84:	4305      	orrs	r5, r0
10016b86:	4973      	ldr	r1, [pc, #460]	; (10016d54 <__aeabi_dsub+0x364>)
10016b88:	428c      	cmp	r4, r1
10016b8a:	d038      	beq.n	10016bfe <__aeabi_dsub+0x20e>
10016b8c:	0312      	lsls	r2, r2, #12
10016b8e:	0564      	lsls	r4, r4, #21
10016b90:	0b12      	lsrs	r2, r2, #12
10016b92:	0d64      	lsrs	r4, r4, #21
10016b94:	e779      	b.n	10016a8a <__aeabi_dsub+0x9a>
10016b96:	2e00      	cmp	r6, #0
10016b98:	dc00      	bgt.n	10016b9c <__aeabi_dsub+0x1ac>
10016b9a:	e09a      	b.n	10016cd2 <__aeabi_dsub+0x2e2>
10016b9c:	2a00      	cmp	r2, #0
10016b9e:	d047      	beq.n	10016c30 <__aeabi_dsub+0x240>
10016ba0:	4a6c      	ldr	r2, [pc, #432]	; (10016d54 <__aeabi_dsub+0x364>)
10016ba2:	4294      	cmp	r4, r2
10016ba4:	d100      	bne.n	10016ba8 <__aeabi_dsub+0x1b8>
10016ba6:	e74f      	b.n	10016a48 <__aeabi_dsub+0x58>
10016ba8:	2280      	movs	r2, #128	; 0x80
10016baa:	0412      	lsls	r2, r2, #16
10016bac:	4310      	orrs	r0, r2
10016bae:	4662      	mov	r2, ip
10016bb0:	2a38      	cmp	r2, #56	; 0x38
10016bb2:	dc00      	bgt.n	10016bb6 <__aeabi_dsub+0x1c6>
10016bb4:	e108      	b.n	10016dc8 <__aeabi_dsub+0x3d8>
10016bb6:	4301      	orrs	r1, r0
10016bb8:	1e48      	subs	r0, r1, #1
10016bba:	4181      	sbcs	r1, r0
10016bbc:	2200      	movs	r2, #0
10016bbe:	b2c9      	uxtb	r1, r1
10016bc0:	1949      	adds	r1, r1, r5
10016bc2:	19d2      	adds	r2, r2, r7
10016bc4:	42a9      	cmp	r1, r5
10016bc6:	41bf      	sbcs	r7, r7
10016bc8:	000d      	movs	r5, r1
10016bca:	427f      	negs	r7, r7
10016bcc:	18bf      	adds	r7, r7, r2
10016bce:	023a      	lsls	r2, r7, #8
10016bd0:	d400      	bmi.n	10016bd4 <__aeabi_dsub+0x1e4>
10016bd2:	e142      	b.n	10016e5a <__aeabi_dsub+0x46a>
10016bd4:	4a5f      	ldr	r2, [pc, #380]	; (10016d54 <__aeabi_dsub+0x364>)
10016bd6:	3401      	adds	r4, #1
10016bd8:	4294      	cmp	r4, r2
10016bda:	d100      	bne.n	10016bde <__aeabi_dsub+0x1ee>
10016bdc:	e14e      	b.n	10016e7c <__aeabi_dsub+0x48c>
10016bde:	2001      	movs	r0, #1
10016be0:	4a5d      	ldr	r2, [pc, #372]	; (10016d58 <__aeabi_dsub+0x368>)
10016be2:	0869      	lsrs	r1, r5, #1
10016be4:	403a      	ands	r2, r7
10016be6:	4028      	ands	r0, r5
10016be8:	4308      	orrs	r0, r1
10016bea:	07d5      	lsls	r5, r2, #31
10016bec:	4305      	orrs	r5, r0
10016bee:	0857      	lsrs	r7, r2, #1
10016bf0:	469a      	mov	sl, r3
10016bf2:	e729      	b.n	10016a48 <__aeabi_dsub+0x58>
10016bf4:	0006      	movs	r6, r0
10016bf6:	430e      	orrs	r6, r1
10016bf8:	d000      	beq.n	10016bfc <__aeabi_dsub+0x20c>
10016bfa:	e717      	b.n	10016a2c <__aeabi_dsub+0x3c>
10016bfc:	e714      	b.n	10016a28 <__aeabi_dsub+0x38>
10016bfe:	0029      	movs	r1, r5
10016c00:	4311      	orrs	r1, r2
10016c02:	d100      	bne.n	10016c06 <__aeabi_dsub+0x216>
10016c04:	e1f9      	b.n	10016ffa <__aeabi_dsub+0x60a>
10016c06:	2180      	movs	r1, #128	; 0x80
10016c08:	0309      	lsls	r1, r1, #12
10016c0a:	430a      	orrs	r2, r1
10016c0c:	0312      	lsls	r2, r2, #12
10016c0e:	0b12      	lsrs	r2, r2, #12
10016c10:	e73b      	b.n	10016a8a <__aeabi_dsub+0x9a>
10016c12:	2301      	movs	r3, #1
10016c14:	425b      	negs	r3, r3
10016c16:	4698      	mov	r8, r3
10016c18:	44c4      	add	ip, r8
10016c1a:	4663      	mov	r3, ip
10016c1c:	2b00      	cmp	r3, #0
10016c1e:	d172      	bne.n	10016d06 <__aeabi_dsub+0x316>
10016c20:	1a69      	subs	r1, r5, r1
10016c22:	428d      	cmp	r5, r1
10016c24:	419b      	sbcs	r3, r3
10016c26:	1a3f      	subs	r7, r7, r0
10016c28:	425b      	negs	r3, r3
10016c2a:	1aff      	subs	r7, r7, r3
10016c2c:	000d      	movs	r5, r1
10016c2e:	e768      	b.n	10016b02 <__aeabi_dsub+0x112>
10016c30:	0002      	movs	r2, r0
10016c32:	430a      	orrs	r2, r1
10016c34:	d100      	bne.n	10016c38 <__aeabi_dsub+0x248>
10016c36:	e707      	b.n	10016a48 <__aeabi_dsub+0x58>
10016c38:	2201      	movs	r2, #1
10016c3a:	4252      	negs	r2, r2
10016c3c:	4690      	mov	r8, r2
10016c3e:	44c4      	add	ip, r8
10016c40:	4662      	mov	r2, ip
10016c42:	2a00      	cmp	r2, #0
10016c44:	d000      	beq.n	10016c48 <__aeabi_dsub+0x258>
10016c46:	e0e6      	b.n	10016e16 <__aeabi_dsub+0x426>
10016c48:	1869      	adds	r1, r5, r1
10016c4a:	42a9      	cmp	r1, r5
10016c4c:	41b6      	sbcs	r6, r6
10016c4e:	183f      	adds	r7, r7, r0
10016c50:	4276      	negs	r6, r6
10016c52:	19f7      	adds	r7, r6, r7
10016c54:	000d      	movs	r5, r1
10016c56:	e7ba      	b.n	10016bce <__aeabi_dsub+0x1de>
10016c58:	2e00      	cmp	r6, #0
10016c5a:	d000      	beq.n	10016c5e <__aeabi_dsub+0x26e>
10016c5c:	e080      	b.n	10016d60 <__aeabi_dsub+0x370>
10016c5e:	1c62      	adds	r2, r4, #1
10016c60:	0552      	lsls	r2, r2, #21
10016c62:	0d52      	lsrs	r2, r2, #21
10016c64:	2a01      	cmp	r2, #1
10016c66:	dc00      	bgt.n	10016c6a <__aeabi_dsub+0x27a>
10016c68:	e0f9      	b.n	10016e5e <__aeabi_dsub+0x46e>
10016c6a:	1a6a      	subs	r2, r5, r1
10016c6c:	4691      	mov	r9, r2
10016c6e:	454d      	cmp	r5, r9
10016c70:	41b6      	sbcs	r6, r6
10016c72:	1a3a      	subs	r2, r7, r0
10016c74:	4276      	negs	r6, r6
10016c76:	1b92      	subs	r2, r2, r6
10016c78:	4690      	mov	r8, r2
10016c7a:	0212      	lsls	r2, r2, #8
10016c7c:	d400      	bmi.n	10016c80 <__aeabi_dsub+0x290>
10016c7e:	e099      	b.n	10016db4 <__aeabi_dsub+0x3c4>
10016c80:	1b4d      	subs	r5, r1, r5
10016c82:	42a9      	cmp	r1, r5
10016c84:	4189      	sbcs	r1, r1
10016c86:	1bc7      	subs	r7, r0, r7
10016c88:	4249      	negs	r1, r1
10016c8a:	1a7a      	subs	r2, r7, r1
10016c8c:	4690      	mov	r8, r2
10016c8e:	469a      	mov	sl, r3
10016c90:	e73c      	b.n	10016b0c <__aeabi_dsub+0x11c>
10016c92:	4652      	mov	r2, sl
10016c94:	2301      	movs	r3, #1
10016c96:	2500      	movs	r5, #0
10016c98:	4013      	ands	r3, r2
10016c9a:	2200      	movs	r2, #0
10016c9c:	e6f5      	b.n	10016a8a <__aeabi_dsub+0x9a>
10016c9e:	0028      	movs	r0, r5
10016ca0:	f000 fbaa 	bl	100173f8 <__clzsi2>
10016ca4:	3020      	adds	r0, #32
10016ca6:	0003      	movs	r3, r0
10016ca8:	3b08      	subs	r3, #8
10016caa:	2b1f      	cmp	r3, #31
10016cac:	dc00      	bgt.n	10016cb0 <__aeabi_dsub+0x2c0>
10016cae:	e739      	b.n	10016b24 <__aeabi_dsub+0x134>
10016cb0:	002a      	movs	r2, r5
10016cb2:	3828      	subs	r0, #40	; 0x28
10016cb4:	4082      	lsls	r2, r0
10016cb6:	2500      	movs	r5, #0
10016cb8:	429c      	cmp	r4, r3
10016cba:	dc00      	bgt.n	10016cbe <__aeabi_dsub+0x2ce>
10016cbc:	e73e      	b.n	10016b3c <__aeabi_dsub+0x14c>
10016cbe:	4f26      	ldr	r7, [pc, #152]	; (10016d58 <__aeabi_dsub+0x368>)
10016cc0:	1ae4      	subs	r4, r4, r3
10016cc2:	4017      	ands	r7, r2
10016cc4:	e6c0      	b.n	10016a48 <__aeabi_dsub+0x58>
10016cc6:	4301      	orrs	r1, r0
10016cc8:	1e48      	subs	r0, r1, #1
10016cca:	4181      	sbcs	r1, r0
10016ccc:	2200      	movs	r2, #0
10016cce:	b2c9      	uxtb	r1, r1
10016cd0:	e710      	b.n	10016af4 <__aeabi_dsub+0x104>
10016cd2:	2e00      	cmp	r6, #0
10016cd4:	d000      	beq.n	10016cd8 <__aeabi_dsub+0x2e8>
10016cd6:	e0f1      	b.n	10016ebc <__aeabi_dsub+0x4cc>
10016cd8:	1c62      	adds	r2, r4, #1
10016cda:	4694      	mov	ip, r2
10016cdc:	0552      	lsls	r2, r2, #21
10016cde:	0d52      	lsrs	r2, r2, #21
10016ce0:	2a01      	cmp	r2, #1
10016ce2:	dc00      	bgt.n	10016ce6 <__aeabi_dsub+0x2f6>
10016ce4:	e0a0      	b.n	10016e28 <__aeabi_dsub+0x438>
10016ce6:	4a1b      	ldr	r2, [pc, #108]	; (10016d54 <__aeabi_dsub+0x364>)
10016ce8:	4594      	cmp	ip, r2
10016cea:	d100      	bne.n	10016cee <__aeabi_dsub+0x2fe>
10016cec:	e0c5      	b.n	10016e7a <__aeabi_dsub+0x48a>
10016cee:	1869      	adds	r1, r5, r1
10016cf0:	42a9      	cmp	r1, r5
10016cf2:	4192      	sbcs	r2, r2
10016cf4:	183f      	adds	r7, r7, r0
10016cf6:	4252      	negs	r2, r2
10016cf8:	19d2      	adds	r2, r2, r7
10016cfa:	0849      	lsrs	r1, r1, #1
10016cfc:	07d5      	lsls	r5, r2, #31
10016cfe:	430d      	orrs	r5, r1
10016d00:	0857      	lsrs	r7, r2, #1
10016d02:	4664      	mov	r4, ip
10016d04:	e6a0      	b.n	10016a48 <__aeabi_dsub+0x58>
10016d06:	4b13      	ldr	r3, [pc, #76]	; (10016d54 <__aeabi_dsub+0x364>)
10016d08:	429c      	cmp	r4, r3
10016d0a:	d000      	beq.n	10016d0e <__aeabi_dsub+0x31e>
10016d0c:	e6d9      	b.n	10016ac2 <__aeabi_dsub+0xd2>
10016d0e:	e69b      	b.n	10016a48 <__aeabi_dsub+0x58>
10016d10:	0011      	movs	r1, r2
10016d12:	3c1f      	subs	r4, #31
10016d14:	40e1      	lsrs	r1, r4
10016d16:	000c      	movs	r4, r1
10016d18:	2b20      	cmp	r3, #32
10016d1a:	d100      	bne.n	10016d1e <__aeabi_dsub+0x32e>
10016d1c:	e080      	b.n	10016e20 <__aeabi_dsub+0x430>
10016d1e:	2140      	movs	r1, #64	; 0x40
10016d20:	1acb      	subs	r3, r1, r3
10016d22:	409a      	lsls	r2, r3
10016d24:	4315      	orrs	r5, r2
10016d26:	1e6a      	subs	r2, r5, #1
10016d28:	4195      	sbcs	r5, r2
10016d2a:	2700      	movs	r7, #0
10016d2c:	4325      	orrs	r5, r4
10016d2e:	2400      	movs	r4, #0
10016d30:	e71f      	b.n	10016b72 <__aeabi_dsub+0x182>
10016d32:	4663      	mov	r3, ip
10016d34:	0002      	movs	r2, r0
10016d36:	3b20      	subs	r3, #32
10016d38:	40da      	lsrs	r2, r3
10016d3a:	4663      	mov	r3, ip
10016d3c:	2b20      	cmp	r3, #32
10016d3e:	d071      	beq.n	10016e24 <__aeabi_dsub+0x434>
10016d40:	2340      	movs	r3, #64	; 0x40
10016d42:	4666      	mov	r6, ip
10016d44:	1b9b      	subs	r3, r3, r6
10016d46:	4098      	lsls	r0, r3
10016d48:	4301      	orrs	r1, r0
10016d4a:	1e48      	subs	r0, r1, #1
10016d4c:	4181      	sbcs	r1, r0
10016d4e:	4311      	orrs	r1, r2
10016d50:	2200      	movs	r2, #0
10016d52:	e6cf      	b.n	10016af4 <__aeabi_dsub+0x104>
10016d54:	000007ff 	.word	0x000007ff
10016d58:	ff7fffff 	.word	0xff7fffff
10016d5c:	800fffff 	.word	0x800fffff
10016d60:	2c00      	cmp	r4, #0
10016d62:	d048      	beq.n	10016df6 <__aeabi_dsub+0x406>
10016d64:	4cca      	ldr	r4, [pc, #808]	; (10017090 <__aeabi_dsub+0x6a0>)
10016d66:	42a2      	cmp	r2, r4
10016d68:	d100      	bne.n	10016d6c <__aeabi_dsub+0x37c>
10016d6a:	e0a2      	b.n	10016eb2 <__aeabi_dsub+0x4c2>
10016d6c:	4274      	negs	r4, r6
10016d6e:	46a1      	mov	r9, r4
10016d70:	2480      	movs	r4, #128	; 0x80
10016d72:	0424      	lsls	r4, r4, #16
10016d74:	4327      	orrs	r7, r4
10016d76:	464c      	mov	r4, r9
10016d78:	2c38      	cmp	r4, #56	; 0x38
10016d7a:	dd00      	ble.n	10016d7e <__aeabi_dsub+0x38e>
10016d7c:	e0db      	b.n	10016f36 <__aeabi_dsub+0x546>
10016d7e:	2c1f      	cmp	r4, #31
10016d80:	dd00      	ble.n	10016d84 <__aeabi_dsub+0x394>
10016d82:	e144      	b.n	1001700e <__aeabi_dsub+0x61e>
10016d84:	464e      	mov	r6, r9
10016d86:	2420      	movs	r4, #32
10016d88:	1ba4      	subs	r4, r4, r6
10016d8a:	003e      	movs	r6, r7
10016d8c:	40a6      	lsls	r6, r4
10016d8e:	46a2      	mov	sl, r4
10016d90:	46b0      	mov	r8, r6
10016d92:	464c      	mov	r4, r9
10016d94:	002e      	movs	r6, r5
10016d96:	40e6      	lsrs	r6, r4
10016d98:	46b4      	mov	ip, r6
10016d9a:	4646      	mov	r6, r8
10016d9c:	4664      	mov	r4, ip
10016d9e:	4326      	orrs	r6, r4
10016da0:	4654      	mov	r4, sl
10016da2:	40a5      	lsls	r5, r4
10016da4:	1e6c      	subs	r4, r5, #1
10016da6:	41a5      	sbcs	r5, r4
10016da8:	0034      	movs	r4, r6
10016daa:	432c      	orrs	r4, r5
10016dac:	464d      	mov	r5, r9
10016dae:	40ef      	lsrs	r7, r5
10016db0:	1b0d      	subs	r5, r1, r4
10016db2:	e028      	b.n	10016e06 <__aeabi_dsub+0x416>
10016db4:	464a      	mov	r2, r9
10016db6:	4643      	mov	r3, r8
10016db8:	464d      	mov	r5, r9
10016dba:	431a      	orrs	r2, r3
10016dbc:	d000      	beq.n	10016dc0 <__aeabi_dsub+0x3d0>
10016dbe:	e6a5      	b.n	10016b0c <__aeabi_dsub+0x11c>
10016dc0:	2300      	movs	r3, #0
10016dc2:	2400      	movs	r4, #0
10016dc4:	2500      	movs	r5, #0
10016dc6:	e6de      	b.n	10016b86 <__aeabi_dsub+0x196>
10016dc8:	2a1f      	cmp	r2, #31
10016dca:	dc5a      	bgt.n	10016e82 <__aeabi_dsub+0x492>
10016dcc:	4666      	mov	r6, ip
10016dce:	2220      	movs	r2, #32
10016dd0:	1b92      	subs	r2, r2, r6
10016dd2:	0006      	movs	r6, r0
10016dd4:	4096      	lsls	r6, r2
10016dd6:	4691      	mov	r9, r2
10016dd8:	46b0      	mov	r8, r6
10016dda:	4662      	mov	r2, ip
10016ddc:	000e      	movs	r6, r1
10016dde:	40d6      	lsrs	r6, r2
10016de0:	4642      	mov	r2, r8
10016de2:	4316      	orrs	r6, r2
10016de4:	464a      	mov	r2, r9
10016de6:	4091      	lsls	r1, r2
10016de8:	1e4a      	subs	r2, r1, #1
10016dea:	4191      	sbcs	r1, r2
10016dec:	0002      	movs	r2, r0
10016dee:	4660      	mov	r0, ip
10016df0:	4331      	orrs	r1, r6
10016df2:	40c2      	lsrs	r2, r0
10016df4:	e6e4      	b.n	10016bc0 <__aeabi_dsub+0x1d0>
10016df6:	003c      	movs	r4, r7
10016df8:	432c      	orrs	r4, r5
10016dfa:	d05a      	beq.n	10016eb2 <__aeabi_dsub+0x4c2>
10016dfc:	43f4      	mvns	r4, r6
10016dfe:	46a1      	mov	r9, r4
10016e00:	2c00      	cmp	r4, #0
10016e02:	d152      	bne.n	10016eaa <__aeabi_dsub+0x4ba>
10016e04:	1b4d      	subs	r5, r1, r5
10016e06:	42a9      	cmp	r1, r5
10016e08:	4189      	sbcs	r1, r1
10016e0a:	1bc7      	subs	r7, r0, r7
10016e0c:	4249      	negs	r1, r1
10016e0e:	1a7f      	subs	r7, r7, r1
10016e10:	0014      	movs	r4, r2
10016e12:	469a      	mov	sl, r3
10016e14:	e675      	b.n	10016b02 <__aeabi_dsub+0x112>
10016e16:	4a9e      	ldr	r2, [pc, #632]	; (10017090 <__aeabi_dsub+0x6a0>)
10016e18:	4294      	cmp	r4, r2
10016e1a:	d000      	beq.n	10016e1e <__aeabi_dsub+0x42e>
10016e1c:	e6c7      	b.n	10016bae <__aeabi_dsub+0x1be>
10016e1e:	e613      	b.n	10016a48 <__aeabi_dsub+0x58>
10016e20:	2200      	movs	r2, #0
10016e22:	e77f      	b.n	10016d24 <__aeabi_dsub+0x334>
10016e24:	2000      	movs	r0, #0
10016e26:	e78f      	b.n	10016d48 <__aeabi_dsub+0x358>
10016e28:	2c00      	cmp	r4, #0
10016e2a:	d000      	beq.n	10016e2e <__aeabi_dsub+0x43e>
10016e2c:	e0c8      	b.n	10016fc0 <__aeabi_dsub+0x5d0>
10016e2e:	003b      	movs	r3, r7
10016e30:	432b      	orrs	r3, r5
10016e32:	d100      	bne.n	10016e36 <__aeabi_dsub+0x446>
10016e34:	e10f      	b.n	10017056 <__aeabi_dsub+0x666>
10016e36:	0003      	movs	r3, r0
10016e38:	430b      	orrs	r3, r1
10016e3a:	d100      	bne.n	10016e3e <__aeabi_dsub+0x44e>
10016e3c:	e604      	b.n	10016a48 <__aeabi_dsub+0x58>
10016e3e:	1869      	adds	r1, r5, r1
10016e40:	42a9      	cmp	r1, r5
10016e42:	419b      	sbcs	r3, r3
10016e44:	183f      	adds	r7, r7, r0
10016e46:	425b      	negs	r3, r3
10016e48:	19df      	adds	r7, r3, r7
10016e4a:	023b      	lsls	r3, r7, #8
10016e4c:	d400      	bmi.n	10016e50 <__aeabi_dsub+0x460>
10016e4e:	e11a      	b.n	10017086 <__aeabi_dsub+0x696>
10016e50:	4b90      	ldr	r3, [pc, #576]	; (10017094 <__aeabi_dsub+0x6a4>)
10016e52:	000d      	movs	r5, r1
10016e54:	401f      	ands	r7, r3
10016e56:	4664      	mov	r4, ip
10016e58:	e5f6      	b.n	10016a48 <__aeabi_dsub+0x58>
10016e5a:	469a      	mov	sl, r3
10016e5c:	e689      	b.n	10016b72 <__aeabi_dsub+0x182>
10016e5e:	003a      	movs	r2, r7
10016e60:	432a      	orrs	r2, r5
10016e62:	2c00      	cmp	r4, #0
10016e64:	d15c      	bne.n	10016f20 <__aeabi_dsub+0x530>
10016e66:	2a00      	cmp	r2, #0
10016e68:	d175      	bne.n	10016f56 <__aeabi_dsub+0x566>
10016e6a:	0002      	movs	r2, r0
10016e6c:	430a      	orrs	r2, r1
10016e6e:	d100      	bne.n	10016e72 <__aeabi_dsub+0x482>
10016e70:	e0ca      	b.n	10017008 <__aeabi_dsub+0x618>
10016e72:	0007      	movs	r7, r0
10016e74:	000d      	movs	r5, r1
10016e76:	469a      	mov	sl, r3
10016e78:	e5e6      	b.n	10016a48 <__aeabi_dsub+0x58>
10016e7a:	4664      	mov	r4, ip
10016e7c:	2200      	movs	r2, #0
10016e7e:	2500      	movs	r5, #0
10016e80:	e681      	b.n	10016b86 <__aeabi_dsub+0x196>
10016e82:	4662      	mov	r2, ip
10016e84:	0006      	movs	r6, r0
10016e86:	3a20      	subs	r2, #32
10016e88:	40d6      	lsrs	r6, r2
10016e8a:	4662      	mov	r2, ip
10016e8c:	46b0      	mov	r8, r6
10016e8e:	2a20      	cmp	r2, #32
10016e90:	d100      	bne.n	10016e94 <__aeabi_dsub+0x4a4>
10016e92:	e0b7      	b.n	10017004 <__aeabi_dsub+0x614>
10016e94:	2240      	movs	r2, #64	; 0x40
10016e96:	4666      	mov	r6, ip
10016e98:	1b92      	subs	r2, r2, r6
10016e9a:	4090      	lsls	r0, r2
10016e9c:	4301      	orrs	r1, r0
10016e9e:	4642      	mov	r2, r8
10016ea0:	1e48      	subs	r0, r1, #1
10016ea2:	4181      	sbcs	r1, r0
10016ea4:	4311      	orrs	r1, r2
10016ea6:	2200      	movs	r2, #0
10016ea8:	e68a      	b.n	10016bc0 <__aeabi_dsub+0x1d0>
10016eaa:	4c79      	ldr	r4, [pc, #484]	; (10017090 <__aeabi_dsub+0x6a0>)
10016eac:	42a2      	cmp	r2, r4
10016eae:	d000      	beq.n	10016eb2 <__aeabi_dsub+0x4c2>
10016eb0:	e761      	b.n	10016d76 <__aeabi_dsub+0x386>
10016eb2:	0007      	movs	r7, r0
10016eb4:	000d      	movs	r5, r1
10016eb6:	0014      	movs	r4, r2
10016eb8:	469a      	mov	sl, r3
10016eba:	e5c5      	b.n	10016a48 <__aeabi_dsub+0x58>
10016ebc:	2c00      	cmp	r4, #0
10016ebe:	d141      	bne.n	10016f44 <__aeabi_dsub+0x554>
10016ec0:	003c      	movs	r4, r7
10016ec2:	432c      	orrs	r4, r5
10016ec4:	d078      	beq.n	10016fb8 <__aeabi_dsub+0x5c8>
10016ec6:	43f4      	mvns	r4, r6
10016ec8:	46a1      	mov	r9, r4
10016eca:	2c00      	cmp	r4, #0
10016ecc:	d020      	beq.n	10016f10 <__aeabi_dsub+0x520>
10016ece:	4c70      	ldr	r4, [pc, #448]	; (10017090 <__aeabi_dsub+0x6a0>)
10016ed0:	42a2      	cmp	r2, r4
10016ed2:	d071      	beq.n	10016fb8 <__aeabi_dsub+0x5c8>
10016ed4:	464c      	mov	r4, r9
10016ed6:	2c38      	cmp	r4, #56	; 0x38
10016ed8:	dd00      	ble.n	10016edc <__aeabi_dsub+0x4ec>
10016eda:	e0b2      	b.n	10017042 <__aeabi_dsub+0x652>
10016edc:	2c1f      	cmp	r4, #31
10016ede:	dd00      	ble.n	10016ee2 <__aeabi_dsub+0x4f2>
10016ee0:	e0bc      	b.n	1001705c <__aeabi_dsub+0x66c>
10016ee2:	2620      	movs	r6, #32
10016ee4:	1b34      	subs	r4, r6, r4
10016ee6:	46a2      	mov	sl, r4
10016ee8:	003c      	movs	r4, r7
10016eea:	4656      	mov	r6, sl
10016eec:	40b4      	lsls	r4, r6
10016eee:	464e      	mov	r6, r9
10016ef0:	46a0      	mov	r8, r4
10016ef2:	002c      	movs	r4, r5
10016ef4:	40f4      	lsrs	r4, r6
10016ef6:	46a4      	mov	ip, r4
10016ef8:	4644      	mov	r4, r8
10016efa:	4666      	mov	r6, ip
10016efc:	4334      	orrs	r4, r6
10016efe:	46a4      	mov	ip, r4
10016f00:	4654      	mov	r4, sl
10016f02:	40a5      	lsls	r5, r4
10016f04:	4664      	mov	r4, ip
10016f06:	1e6e      	subs	r6, r5, #1
10016f08:	41b5      	sbcs	r5, r6
10016f0a:	4325      	orrs	r5, r4
10016f0c:	464c      	mov	r4, r9
10016f0e:	40e7      	lsrs	r7, r4
10016f10:	186d      	adds	r5, r5, r1
10016f12:	428d      	cmp	r5, r1
10016f14:	4189      	sbcs	r1, r1
10016f16:	183f      	adds	r7, r7, r0
10016f18:	4249      	negs	r1, r1
10016f1a:	19cf      	adds	r7, r1, r7
10016f1c:	0014      	movs	r4, r2
10016f1e:	e656      	b.n	10016bce <__aeabi_dsub+0x1de>
10016f20:	2a00      	cmp	r2, #0
10016f22:	d12f      	bne.n	10016f84 <__aeabi_dsub+0x594>
10016f24:	0002      	movs	r2, r0
10016f26:	430a      	orrs	r2, r1
10016f28:	d100      	bne.n	10016f2c <__aeabi_dsub+0x53c>
10016f2a:	e084      	b.n	10017036 <__aeabi_dsub+0x646>
10016f2c:	0007      	movs	r7, r0
10016f2e:	000d      	movs	r5, r1
10016f30:	469a      	mov	sl, r3
10016f32:	4c57      	ldr	r4, [pc, #348]	; (10017090 <__aeabi_dsub+0x6a0>)
10016f34:	e588      	b.n	10016a48 <__aeabi_dsub+0x58>
10016f36:	433d      	orrs	r5, r7
10016f38:	1e6f      	subs	r7, r5, #1
10016f3a:	41bd      	sbcs	r5, r7
10016f3c:	b2ec      	uxtb	r4, r5
10016f3e:	2700      	movs	r7, #0
10016f40:	1b0d      	subs	r5, r1, r4
10016f42:	e760      	b.n	10016e06 <__aeabi_dsub+0x416>
10016f44:	4c52      	ldr	r4, [pc, #328]	; (10017090 <__aeabi_dsub+0x6a0>)
10016f46:	42a2      	cmp	r2, r4
10016f48:	d036      	beq.n	10016fb8 <__aeabi_dsub+0x5c8>
10016f4a:	4274      	negs	r4, r6
10016f4c:	2680      	movs	r6, #128	; 0x80
10016f4e:	0436      	lsls	r6, r6, #16
10016f50:	46a1      	mov	r9, r4
10016f52:	4337      	orrs	r7, r6
10016f54:	e7be      	b.n	10016ed4 <__aeabi_dsub+0x4e4>
10016f56:	0002      	movs	r2, r0
10016f58:	430a      	orrs	r2, r1
10016f5a:	d100      	bne.n	10016f5e <__aeabi_dsub+0x56e>
10016f5c:	e574      	b.n	10016a48 <__aeabi_dsub+0x58>
10016f5e:	1a6a      	subs	r2, r5, r1
10016f60:	4690      	mov	r8, r2
10016f62:	4545      	cmp	r5, r8
10016f64:	41b6      	sbcs	r6, r6
10016f66:	1a3a      	subs	r2, r7, r0
10016f68:	4276      	negs	r6, r6
10016f6a:	1b92      	subs	r2, r2, r6
10016f6c:	4694      	mov	ip, r2
10016f6e:	0212      	lsls	r2, r2, #8
10016f70:	d400      	bmi.n	10016f74 <__aeabi_dsub+0x584>
10016f72:	e5f7      	b.n	10016b64 <__aeabi_dsub+0x174>
10016f74:	1b4d      	subs	r5, r1, r5
10016f76:	42a9      	cmp	r1, r5
10016f78:	4189      	sbcs	r1, r1
10016f7a:	1bc7      	subs	r7, r0, r7
10016f7c:	4249      	negs	r1, r1
10016f7e:	1a7f      	subs	r7, r7, r1
10016f80:	469a      	mov	sl, r3
10016f82:	e561      	b.n	10016a48 <__aeabi_dsub+0x58>
10016f84:	0002      	movs	r2, r0
10016f86:	430a      	orrs	r2, r1
10016f88:	d03a      	beq.n	10017000 <__aeabi_dsub+0x610>
10016f8a:	08ed      	lsrs	r5, r5, #3
10016f8c:	077c      	lsls	r4, r7, #29
10016f8e:	432c      	orrs	r4, r5
10016f90:	2580      	movs	r5, #128	; 0x80
10016f92:	08fa      	lsrs	r2, r7, #3
10016f94:	032d      	lsls	r5, r5, #12
10016f96:	422a      	tst	r2, r5
10016f98:	d008      	beq.n	10016fac <__aeabi_dsub+0x5bc>
10016f9a:	08c7      	lsrs	r7, r0, #3
10016f9c:	422f      	tst	r7, r5
10016f9e:	d105      	bne.n	10016fac <__aeabi_dsub+0x5bc>
10016fa0:	0745      	lsls	r5, r0, #29
10016fa2:	002c      	movs	r4, r5
10016fa4:	003a      	movs	r2, r7
10016fa6:	469a      	mov	sl, r3
10016fa8:	08c9      	lsrs	r1, r1, #3
10016faa:	430c      	orrs	r4, r1
10016fac:	0f67      	lsrs	r7, r4, #29
10016fae:	00d2      	lsls	r2, r2, #3
10016fb0:	00e5      	lsls	r5, r4, #3
10016fb2:	4317      	orrs	r7, r2
10016fb4:	4c36      	ldr	r4, [pc, #216]	; (10017090 <__aeabi_dsub+0x6a0>)
10016fb6:	e547      	b.n	10016a48 <__aeabi_dsub+0x58>
10016fb8:	0007      	movs	r7, r0
10016fba:	000d      	movs	r5, r1
10016fbc:	0014      	movs	r4, r2
10016fbe:	e543      	b.n	10016a48 <__aeabi_dsub+0x58>
10016fc0:	003a      	movs	r2, r7
10016fc2:	432a      	orrs	r2, r5
10016fc4:	d043      	beq.n	1001704e <__aeabi_dsub+0x65e>
10016fc6:	0002      	movs	r2, r0
10016fc8:	430a      	orrs	r2, r1
10016fca:	d019      	beq.n	10017000 <__aeabi_dsub+0x610>
10016fcc:	08ed      	lsrs	r5, r5, #3
10016fce:	077c      	lsls	r4, r7, #29
10016fd0:	432c      	orrs	r4, r5
10016fd2:	2580      	movs	r5, #128	; 0x80
10016fd4:	08fa      	lsrs	r2, r7, #3
10016fd6:	032d      	lsls	r5, r5, #12
10016fd8:	422a      	tst	r2, r5
10016fda:	d007      	beq.n	10016fec <__aeabi_dsub+0x5fc>
10016fdc:	08c6      	lsrs	r6, r0, #3
10016fde:	422e      	tst	r6, r5
10016fe0:	d104      	bne.n	10016fec <__aeabi_dsub+0x5fc>
10016fe2:	0747      	lsls	r7, r0, #29
10016fe4:	003c      	movs	r4, r7
10016fe6:	0032      	movs	r2, r6
10016fe8:	08c9      	lsrs	r1, r1, #3
10016fea:	430c      	orrs	r4, r1
10016fec:	00d7      	lsls	r7, r2, #3
10016fee:	0f62      	lsrs	r2, r4, #29
10016ff0:	00e5      	lsls	r5, r4, #3
10016ff2:	4317      	orrs	r7, r2
10016ff4:	469a      	mov	sl, r3
10016ff6:	4c26      	ldr	r4, [pc, #152]	; (10017090 <__aeabi_dsub+0x6a0>)
10016ff8:	e526      	b.n	10016a48 <__aeabi_dsub+0x58>
10016ffa:	2200      	movs	r2, #0
10016ffc:	2500      	movs	r5, #0
10016ffe:	e544      	b.n	10016a8a <__aeabi_dsub+0x9a>
10017000:	4c23      	ldr	r4, [pc, #140]	; (10017090 <__aeabi_dsub+0x6a0>)
10017002:	e521      	b.n	10016a48 <__aeabi_dsub+0x58>
10017004:	2000      	movs	r0, #0
10017006:	e749      	b.n	10016e9c <__aeabi_dsub+0x4ac>
10017008:	2300      	movs	r3, #0
1001700a:	2500      	movs	r5, #0
1001700c:	e5bb      	b.n	10016b86 <__aeabi_dsub+0x196>
1001700e:	464c      	mov	r4, r9
10017010:	003e      	movs	r6, r7
10017012:	3c20      	subs	r4, #32
10017014:	40e6      	lsrs	r6, r4
10017016:	464c      	mov	r4, r9
10017018:	46b4      	mov	ip, r6
1001701a:	2c20      	cmp	r4, #32
1001701c:	d031      	beq.n	10017082 <__aeabi_dsub+0x692>
1001701e:	2440      	movs	r4, #64	; 0x40
10017020:	464e      	mov	r6, r9
10017022:	1ba6      	subs	r6, r4, r6
10017024:	40b7      	lsls	r7, r6
10017026:	433d      	orrs	r5, r7
10017028:	1e6c      	subs	r4, r5, #1
1001702a:	41a5      	sbcs	r5, r4
1001702c:	4664      	mov	r4, ip
1001702e:	432c      	orrs	r4, r5
10017030:	2700      	movs	r7, #0
10017032:	1b0d      	subs	r5, r1, r4
10017034:	e6e7      	b.n	10016e06 <__aeabi_dsub+0x416>
10017036:	2280      	movs	r2, #128	; 0x80
10017038:	2300      	movs	r3, #0
1001703a:	0312      	lsls	r2, r2, #12
1001703c:	4c14      	ldr	r4, [pc, #80]	; (10017090 <__aeabi_dsub+0x6a0>)
1001703e:	2500      	movs	r5, #0
10017040:	e5a1      	b.n	10016b86 <__aeabi_dsub+0x196>
10017042:	433d      	orrs	r5, r7
10017044:	1e6f      	subs	r7, r5, #1
10017046:	41bd      	sbcs	r5, r7
10017048:	2700      	movs	r7, #0
1001704a:	b2ed      	uxtb	r5, r5
1001704c:	e760      	b.n	10016f10 <__aeabi_dsub+0x520>
1001704e:	0007      	movs	r7, r0
10017050:	000d      	movs	r5, r1
10017052:	4c0f      	ldr	r4, [pc, #60]	; (10017090 <__aeabi_dsub+0x6a0>)
10017054:	e4f8      	b.n	10016a48 <__aeabi_dsub+0x58>
10017056:	0007      	movs	r7, r0
10017058:	000d      	movs	r5, r1
1001705a:	e4f5      	b.n	10016a48 <__aeabi_dsub+0x58>
1001705c:	464e      	mov	r6, r9
1001705e:	003c      	movs	r4, r7
10017060:	3e20      	subs	r6, #32
10017062:	40f4      	lsrs	r4, r6
10017064:	46a0      	mov	r8, r4
10017066:	464c      	mov	r4, r9
10017068:	2c20      	cmp	r4, #32
1001706a:	d00e      	beq.n	1001708a <__aeabi_dsub+0x69a>
1001706c:	2440      	movs	r4, #64	; 0x40
1001706e:	464e      	mov	r6, r9
10017070:	1ba4      	subs	r4, r4, r6
10017072:	40a7      	lsls	r7, r4
10017074:	433d      	orrs	r5, r7
10017076:	1e6f      	subs	r7, r5, #1
10017078:	41bd      	sbcs	r5, r7
1001707a:	4644      	mov	r4, r8
1001707c:	2700      	movs	r7, #0
1001707e:	4325      	orrs	r5, r4
10017080:	e746      	b.n	10016f10 <__aeabi_dsub+0x520>
10017082:	2700      	movs	r7, #0
10017084:	e7cf      	b.n	10017026 <__aeabi_dsub+0x636>
10017086:	000d      	movs	r5, r1
10017088:	e573      	b.n	10016b72 <__aeabi_dsub+0x182>
1001708a:	2700      	movs	r7, #0
1001708c:	e7f2      	b.n	10017074 <__aeabi_dsub+0x684>
1001708e:	46c0      	nop			; (mov r8, r8)
10017090:	000007ff 	.word	0x000007ff
10017094:	ff7fffff 	.word	0xff7fffff

10017098 <__aeabi_dcmpun>:
10017098:	b570      	push	{r4, r5, r6, lr}
1001709a:	4e0e      	ldr	r6, [pc, #56]	; (100170d4 <__aeabi_dcmpun+0x3c>)
1001709c:	030c      	lsls	r4, r1, #12
1001709e:	031d      	lsls	r5, r3, #12
100170a0:	0049      	lsls	r1, r1, #1
100170a2:	005b      	lsls	r3, r3, #1
100170a4:	0b24      	lsrs	r4, r4, #12
100170a6:	0d49      	lsrs	r1, r1, #21
100170a8:	0b2d      	lsrs	r5, r5, #12
100170aa:	0d5b      	lsrs	r3, r3, #21
100170ac:	42b1      	cmp	r1, r6
100170ae:	d004      	beq.n	100170ba <__aeabi_dcmpun+0x22>
100170b0:	4908      	ldr	r1, [pc, #32]	; (100170d4 <__aeabi_dcmpun+0x3c>)
100170b2:	2000      	movs	r0, #0
100170b4:	428b      	cmp	r3, r1
100170b6:	d008      	beq.n	100170ca <__aeabi_dcmpun+0x32>
100170b8:	bd70      	pop	{r4, r5, r6, pc}
100170ba:	4304      	orrs	r4, r0
100170bc:	2001      	movs	r0, #1
100170be:	2c00      	cmp	r4, #0
100170c0:	d1fa      	bne.n	100170b8 <__aeabi_dcmpun+0x20>
100170c2:	4904      	ldr	r1, [pc, #16]	; (100170d4 <__aeabi_dcmpun+0x3c>)
100170c4:	2000      	movs	r0, #0
100170c6:	428b      	cmp	r3, r1
100170c8:	d1f6      	bne.n	100170b8 <__aeabi_dcmpun+0x20>
100170ca:	4315      	orrs	r5, r2
100170cc:	0028      	movs	r0, r5
100170ce:	1e45      	subs	r5, r0, #1
100170d0:	41a8      	sbcs	r0, r5
100170d2:	e7f1      	b.n	100170b8 <__aeabi_dcmpun+0x20>
100170d4:	000007ff 	.word	0x000007ff

100170d8 <__aeabi_d2iz>:
100170d8:	030b      	lsls	r3, r1, #12
100170da:	b530      	push	{r4, r5, lr}
100170dc:	4d13      	ldr	r5, [pc, #76]	; (1001712c <__aeabi_d2iz+0x54>)
100170de:	0b1a      	lsrs	r2, r3, #12
100170e0:	004b      	lsls	r3, r1, #1
100170e2:	0d5b      	lsrs	r3, r3, #21
100170e4:	0fc9      	lsrs	r1, r1, #31
100170e6:	2400      	movs	r4, #0
100170e8:	42ab      	cmp	r3, r5
100170ea:	dd11      	ble.n	10017110 <__aeabi_d2iz+0x38>
100170ec:	4c10      	ldr	r4, [pc, #64]	; (10017130 <__aeabi_d2iz+0x58>)
100170ee:	42a3      	cmp	r3, r4
100170f0:	dc10      	bgt.n	10017114 <__aeabi_d2iz+0x3c>
100170f2:	2480      	movs	r4, #128	; 0x80
100170f4:	0364      	lsls	r4, r4, #13
100170f6:	4322      	orrs	r2, r4
100170f8:	4c0e      	ldr	r4, [pc, #56]	; (10017134 <__aeabi_d2iz+0x5c>)
100170fa:	1ae4      	subs	r4, r4, r3
100170fc:	2c1f      	cmp	r4, #31
100170fe:	dd0c      	ble.n	1001711a <__aeabi_d2iz+0x42>
10017100:	480d      	ldr	r0, [pc, #52]	; (10017138 <__aeabi_d2iz+0x60>)
10017102:	1ac3      	subs	r3, r0, r3
10017104:	40da      	lsrs	r2, r3
10017106:	0013      	movs	r3, r2
10017108:	425c      	negs	r4, r3
1001710a:	2900      	cmp	r1, #0
1001710c:	d100      	bne.n	10017110 <__aeabi_d2iz+0x38>
1001710e:	001c      	movs	r4, r3
10017110:	0020      	movs	r0, r4
10017112:	bd30      	pop	{r4, r5, pc}
10017114:	4b09      	ldr	r3, [pc, #36]	; (1001713c <__aeabi_d2iz+0x64>)
10017116:	18cc      	adds	r4, r1, r3
10017118:	e7fa      	b.n	10017110 <__aeabi_d2iz+0x38>
1001711a:	40e0      	lsrs	r0, r4
1001711c:	4c08      	ldr	r4, [pc, #32]	; (10017140 <__aeabi_d2iz+0x68>)
1001711e:	46a4      	mov	ip, r4
10017120:	4463      	add	r3, ip
10017122:	409a      	lsls	r2, r3
10017124:	0013      	movs	r3, r2
10017126:	4303      	orrs	r3, r0
10017128:	e7ee      	b.n	10017108 <__aeabi_d2iz+0x30>
1001712a:	46c0      	nop			; (mov r8, r8)
1001712c:	000003fe 	.word	0x000003fe
10017130:	0000041d 	.word	0x0000041d
10017134:	00000433 	.word	0x00000433
10017138:	00000413 	.word	0x00000413
1001713c:	7fffffff 	.word	0x7fffffff
10017140:	fffffbed 	.word	0xfffffbed

10017144 <__aeabi_i2d>:
10017144:	b570      	push	{r4, r5, r6, lr}
10017146:	2800      	cmp	r0, #0
10017148:	d030      	beq.n	100171ac <__aeabi_i2d+0x68>
1001714a:	17c3      	asrs	r3, r0, #31
1001714c:	18c4      	adds	r4, r0, r3
1001714e:	405c      	eors	r4, r3
10017150:	0fc5      	lsrs	r5, r0, #31
10017152:	0020      	movs	r0, r4
10017154:	f000 f950 	bl	100173f8 <__clzsi2>
10017158:	4b17      	ldr	r3, [pc, #92]	; (100171b8 <__aeabi_i2d+0x74>)
1001715a:	4a18      	ldr	r2, [pc, #96]	; (100171bc <__aeabi_i2d+0x78>)
1001715c:	1a1b      	subs	r3, r3, r0
1001715e:	1ad2      	subs	r2, r2, r3
10017160:	2a1f      	cmp	r2, #31
10017162:	dd18      	ble.n	10017196 <__aeabi_i2d+0x52>
10017164:	4a16      	ldr	r2, [pc, #88]	; (100171c0 <__aeabi_i2d+0x7c>)
10017166:	1ad2      	subs	r2, r2, r3
10017168:	4094      	lsls	r4, r2
1001716a:	2200      	movs	r2, #0
1001716c:	0324      	lsls	r4, r4, #12
1001716e:	055b      	lsls	r3, r3, #21
10017170:	0b24      	lsrs	r4, r4, #12
10017172:	0d5b      	lsrs	r3, r3, #21
10017174:	2100      	movs	r1, #0
10017176:	0010      	movs	r0, r2
10017178:	0324      	lsls	r4, r4, #12
1001717a:	0d0a      	lsrs	r2, r1, #20
1001717c:	0512      	lsls	r2, r2, #20
1001717e:	0b24      	lsrs	r4, r4, #12
10017180:	4314      	orrs	r4, r2
10017182:	4a10      	ldr	r2, [pc, #64]	; (100171c4 <__aeabi_i2d+0x80>)
10017184:	051b      	lsls	r3, r3, #20
10017186:	4014      	ands	r4, r2
10017188:	431c      	orrs	r4, r3
1001718a:	0064      	lsls	r4, r4, #1
1001718c:	07ed      	lsls	r5, r5, #31
1001718e:	0864      	lsrs	r4, r4, #1
10017190:	432c      	orrs	r4, r5
10017192:	0021      	movs	r1, r4
10017194:	bd70      	pop	{r4, r5, r6, pc}
10017196:	0021      	movs	r1, r4
10017198:	4091      	lsls	r1, r2
1001719a:	000a      	movs	r2, r1
1001719c:	210b      	movs	r1, #11
1001719e:	1a08      	subs	r0, r1, r0
100171a0:	40c4      	lsrs	r4, r0
100171a2:	055b      	lsls	r3, r3, #21
100171a4:	0324      	lsls	r4, r4, #12
100171a6:	0b24      	lsrs	r4, r4, #12
100171a8:	0d5b      	lsrs	r3, r3, #21
100171aa:	e7e3      	b.n	10017174 <__aeabi_i2d+0x30>
100171ac:	2500      	movs	r5, #0
100171ae:	2300      	movs	r3, #0
100171b0:	2400      	movs	r4, #0
100171b2:	2200      	movs	r2, #0
100171b4:	e7de      	b.n	10017174 <__aeabi_i2d+0x30>
100171b6:	46c0      	nop			; (mov r8, r8)
100171b8:	0000041e 	.word	0x0000041e
100171bc:	00000433 	.word	0x00000433
100171c0:	00000413 	.word	0x00000413
100171c4:	800fffff 	.word	0x800fffff

100171c8 <__aeabi_ui2d>:
100171c8:	b570      	push	{r4, r5, r6, lr}
100171ca:	1e05      	subs	r5, r0, #0
100171cc:	d028      	beq.n	10017220 <__aeabi_ui2d+0x58>
100171ce:	f000 f913 	bl	100173f8 <__clzsi2>
100171d2:	4b15      	ldr	r3, [pc, #84]	; (10017228 <__aeabi_ui2d+0x60>)
100171d4:	4a15      	ldr	r2, [pc, #84]	; (1001722c <__aeabi_ui2d+0x64>)
100171d6:	1a1b      	subs	r3, r3, r0
100171d8:	1ad2      	subs	r2, r2, r3
100171da:	2a1f      	cmp	r2, #31
100171dc:	dd16      	ble.n	1001720c <__aeabi_ui2d+0x44>
100171de:	002c      	movs	r4, r5
100171e0:	4a13      	ldr	r2, [pc, #76]	; (10017230 <__aeabi_ui2d+0x68>)
100171e2:	2500      	movs	r5, #0
100171e4:	1ad2      	subs	r2, r2, r3
100171e6:	4094      	lsls	r4, r2
100171e8:	055a      	lsls	r2, r3, #21
100171ea:	0324      	lsls	r4, r4, #12
100171ec:	0b24      	lsrs	r4, r4, #12
100171ee:	0d52      	lsrs	r2, r2, #21
100171f0:	2100      	movs	r1, #0
100171f2:	0324      	lsls	r4, r4, #12
100171f4:	0d0b      	lsrs	r3, r1, #20
100171f6:	0b24      	lsrs	r4, r4, #12
100171f8:	051b      	lsls	r3, r3, #20
100171fa:	4323      	orrs	r3, r4
100171fc:	4c0d      	ldr	r4, [pc, #52]	; (10017234 <__aeabi_ui2d+0x6c>)
100171fe:	0512      	lsls	r2, r2, #20
10017200:	4023      	ands	r3, r4
10017202:	4313      	orrs	r3, r2
10017204:	005b      	lsls	r3, r3, #1
10017206:	0028      	movs	r0, r5
10017208:	0859      	lsrs	r1, r3, #1
1001720a:	bd70      	pop	{r4, r5, r6, pc}
1001720c:	210b      	movs	r1, #11
1001720e:	002c      	movs	r4, r5
10017210:	1a08      	subs	r0, r1, r0
10017212:	40c4      	lsrs	r4, r0
10017214:	4095      	lsls	r5, r2
10017216:	0324      	lsls	r4, r4, #12
10017218:	055a      	lsls	r2, r3, #21
1001721a:	0b24      	lsrs	r4, r4, #12
1001721c:	0d52      	lsrs	r2, r2, #21
1001721e:	e7e7      	b.n	100171f0 <__aeabi_ui2d+0x28>
10017220:	2200      	movs	r2, #0
10017222:	2400      	movs	r4, #0
10017224:	e7e4      	b.n	100171f0 <__aeabi_ui2d+0x28>
10017226:	46c0      	nop			; (mov r8, r8)
10017228:	0000041e 	.word	0x0000041e
1001722c:	00000433 	.word	0x00000433
10017230:	00000413 	.word	0x00000413
10017234:	800fffff 	.word	0x800fffff

10017238 <__aeabi_f2d>:
10017238:	0042      	lsls	r2, r0, #1
1001723a:	0e12      	lsrs	r2, r2, #24
1001723c:	1c51      	adds	r1, r2, #1
1001723e:	0243      	lsls	r3, r0, #9
10017240:	b2c9      	uxtb	r1, r1
10017242:	b570      	push	{r4, r5, r6, lr}
10017244:	0a5d      	lsrs	r5, r3, #9
10017246:	0fc4      	lsrs	r4, r0, #31
10017248:	2901      	cmp	r1, #1
1001724a:	dd15      	ble.n	10017278 <__aeabi_f2d+0x40>
1001724c:	21e0      	movs	r1, #224	; 0xe0
1001724e:	0089      	lsls	r1, r1, #2
10017250:	468c      	mov	ip, r1
10017252:	076d      	lsls	r5, r5, #29
10017254:	0b1b      	lsrs	r3, r3, #12
10017256:	4462      	add	r2, ip
10017258:	2100      	movs	r1, #0
1001725a:	0028      	movs	r0, r5
1001725c:	0d0d      	lsrs	r5, r1, #20
1001725e:	052d      	lsls	r5, r5, #20
10017260:	432b      	orrs	r3, r5
10017262:	4d1c      	ldr	r5, [pc, #112]	; (100172d4 <__aeabi_f2d+0x9c>)
10017264:	0552      	lsls	r2, r2, #21
10017266:	402b      	ands	r3, r5
10017268:	0852      	lsrs	r2, r2, #1
1001726a:	4313      	orrs	r3, r2
1001726c:	005b      	lsls	r3, r3, #1
1001726e:	07e4      	lsls	r4, r4, #31
10017270:	085b      	lsrs	r3, r3, #1
10017272:	4323      	orrs	r3, r4
10017274:	0019      	movs	r1, r3
10017276:	bd70      	pop	{r4, r5, r6, pc}
10017278:	2a00      	cmp	r2, #0
1001727a:	d115      	bne.n	100172a8 <__aeabi_f2d+0x70>
1001727c:	2d00      	cmp	r5, #0
1001727e:	d01f      	beq.n	100172c0 <__aeabi_f2d+0x88>
10017280:	0028      	movs	r0, r5
10017282:	f000 f8b9 	bl	100173f8 <__clzsi2>
10017286:	280a      	cmp	r0, #10
10017288:	dc1d      	bgt.n	100172c6 <__aeabi_f2d+0x8e>
1001728a:	230b      	movs	r3, #11
1001728c:	002a      	movs	r2, r5
1001728e:	1a1b      	subs	r3, r3, r0
10017290:	40da      	lsrs	r2, r3
10017292:	0013      	movs	r3, r2
10017294:	0002      	movs	r2, r0
10017296:	3215      	adds	r2, #21
10017298:	4095      	lsls	r5, r2
1001729a:	4a0f      	ldr	r2, [pc, #60]	; (100172d8 <__aeabi_f2d+0xa0>)
1001729c:	031b      	lsls	r3, r3, #12
1001729e:	1a12      	subs	r2, r2, r0
100172a0:	0552      	lsls	r2, r2, #21
100172a2:	0b1b      	lsrs	r3, r3, #12
100172a4:	0d52      	lsrs	r2, r2, #21
100172a6:	e7d7      	b.n	10017258 <__aeabi_f2d+0x20>
100172a8:	2d00      	cmp	r5, #0
100172aa:	d006      	beq.n	100172ba <__aeabi_f2d+0x82>
100172ac:	2280      	movs	r2, #128	; 0x80
100172ae:	0b1b      	lsrs	r3, r3, #12
100172b0:	0312      	lsls	r2, r2, #12
100172b2:	4313      	orrs	r3, r2
100172b4:	076d      	lsls	r5, r5, #29
100172b6:	4a09      	ldr	r2, [pc, #36]	; (100172dc <__aeabi_f2d+0xa4>)
100172b8:	e7ce      	b.n	10017258 <__aeabi_f2d+0x20>
100172ba:	4a08      	ldr	r2, [pc, #32]	; (100172dc <__aeabi_f2d+0xa4>)
100172bc:	2300      	movs	r3, #0
100172be:	e7cb      	b.n	10017258 <__aeabi_f2d+0x20>
100172c0:	2200      	movs	r2, #0
100172c2:	2300      	movs	r3, #0
100172c4:	e7c8      	b.n	10017258 <__aeabi_f2d+0x20>
100172c6:	0003      	movs	r3, r0
100172c8:	3b0b      	subs	r3, #11
100172ca:	409d      	lsls	r5, r3
100172cc:	002b      	movs	r3, r5
100172ce:	2500      	movs	r5, #0
100172d0:	e7e3      	b.n	1001729a <__aeabi_f2d+0x62>
100172d2:	46c0      	nop			; (mov r8, r8)
100172d4:	800fffff 	.word	0x800fffff
100172d8:	00000389 	.word	0x00000389
100172dc:	000007ff 	.word	0x000007ff

100172e0 <__aeabi_d2f>:
100172e0:	004b      	lsls	r3, r1, #1
100172e2:	b570      	push	{r4, r5, r6, lr}
100172e4:	0d5e      	lsrs	r6, r3, #21
100172e6:	030c      	lsls	r4, r1, #12
100172e8:	1c75      	adds	r5, r6, #1
100172ea:	0a64      	lsrs	r4, r4, #9
100172ec:	0f42      	lsrs	r2, r0, #29
100172ee:	056d      	lsls	r5, r5, #21
100172f0:	4322      	orrs	r2, r4
100172f2:	0fc9      	lsrs	r1, r1, #31
100172f4:	00c4      	lsls	r4, r0, #3
100172f6:	0d6d      	lsrs	r5, r5, #21
100172f8:	2d01      	cmp	r5, #1
100172fa:	dd2a      	ble.n	10017352 <__aeabi_d2f+0x72>
100172fc:	4b3b      	ldr	r3, [pc, #236]	; (100173ec <__aeabi_d2f+0x10c>)
100172fe:	18f3      	adds	r3, r6, r3
10017300:	2bfe      	cmp	r3, #254	; 0xfe
10017302:	dc1a      	bgt.n	1001733a <__aeabi_d2f+0x5a>
10017304:	2b00      	cmp	r3, #0
10017306:	dd42      	ble.n	1001738e <__aeabi_d2f+0xae>
10017308:	0180      	lsls	r0, r0, #6
1001730a:	1e45      	subs	r5, r0, #1
1001730c:	41a8      	sbcs	r0, r5
1001730e:	00d2      	lsls	r2, r2, #3
10017310:	4310      	orrs	r0, r2
10017312:	0f62      	lsrs	r2, r4, #29
10017314:	4302      	orrs	r2, r0
10017316:	0750      	lsls	r0, r2, #29
10017318:	d004      	beq.n	10017324 <__aeabi_d2f+0x44>
1001731a:	200f      	movs	r0, #15
1001731c:	4010      	ands	r0, r2
1001731e:	2804      	cmp	r0, #4
10017320:	d000      	beq.n	10017324 <__aeabi_d2f+0x44>
10017322:	3204      	adds	r2, #4
10017324:	2080      	movs	r0, #128	; 0x80
10017326:	04c0      	lsls	r0, r0, #19
10017328:	4010      	ands	r0, r2
1001732a:	d021      	beq.n	10017370 <__aeabi_d2f+0x90>
1001732c:	3301      	adds	r3, #1
1001732e:	2bff      	cmp	r3, #255	; 0xff
10017330:	d003      	beq.n	1001733a <__aeabi_d2f+0x5a>
10017332:	0192      	lsls	r2, r2, #6
10017334:	0a52      	lsrs	r2, r2, #9
10017336:	b2db      	uxtb	r3, r3
10017338:	e001      	b.n	1001733e <__aeabi_d2f+0x5e>
1001733a:	23ff      	movs	r3, #255	; 0xff
1001733c:	2200      	movs	r2, #0
1001733e:	0252      	lsls	r2, r2, #9
10017340:	0a52      	lsrs	r2, r2, #9
10017342:	05db      	lsls	r3, r3, #23
10017344:	4313      	orrs	r3, r2
10017346:	005b      	lsls	r3, r3, #1
10017348:	07c9      	lsls	r1, r1, #31
1001734a:	085b      	lsrs	r3, r3, #1
1001734c:	430b      	orrs	r3, r1
1001734e:	0018      	movs	r0, r3
10017350:	bd70      	pop	{r4, r5, r6, pc}
10017352:	2e00      	cmp	r6, #0
10017354:	d007      	beq.n	10017366 <__aeabi_d2f+0x86>
10017356:	4314      	orrs	r4, r2
10017358:	d0ef      	beq.n	1001733a <__aeabi_d2f+0x5a>
1001735a:	2080      	movs	r0, #128	; 0x80
1001735c:	00d2      	lsls	r2, r2, #3
1001735e:	0480      	lsls	r0, r0, #18
10017360:	4302      	orrs	r2, r0
10017362:	23ff      	movs	r3, #255	; 0xff
10017364:	e7d7      	b.n	10017316 <__aeabi_d2f+0x36>
10017366:	4322      	orrs	r2, r4
10017368:	2300      	movs	r3, #0
1001736a:	2a00      	cmp	r2, #0
1001736c:	d003      	beq.n	10017376 <__aeabi_d2f+0x96>
1001736e:	2205      	movs	r2, #5
10017370:	08d2      	lsrs	r2, r2, #3
10017372:	2bff      	cmp	r3, #255	; 0xff
10017374:	d003      	beq.n	1001737e <__aeabi_d2f+0x9e>
10017376:	0252      	lsls	r2, r2, #9
10017378:	0a52      	lsrs	r2, r2, #9
1001737a:	b2db      	uxtb	r3, r3
1001737c:	e7df      	b.n	1001733e <__aeabi_d2f+0x5e>
1001737e:	2a00      	cmp	r2, #0
10017380:	d032      	beq.n	100173e8 <__aeabi_d2f+0x108>
10017382:	2080      	movs	r0, #128	; 0x80
10017384:	03c0      	lsls	r0, r0, #15
10017386:	4302      	orrs	r2, r0
10017388:	0252      	lsls	r2, r2, #9
1001738a:	0a52      	lsrs	r2, r2, #9
1001738c:	e7d7      	b.n	1001733e <__aeabi_d2f+0x5e>
1001738e:	0018      	movs	r0, r3
10017390:	3017      	adds	r0, #23
10017392:	db14      	blt.n	100173be <__aeabi_d2f+0xde>
10017394:	2080      	movs	r0, #128	; 0x80
10017396:	0400      	lsls	r0, r0, #16
10017398:	4302      	orrs	r2, r0
1001739a:	201e      	movs	r0, #30
1001739c:	1ac0      	subs	r0, r0, r3
1001739e:	281f      	cmp	r0, #31
100173a0:	dc0f      	bgt.n	100173c2 <__aeabi_d2f+0xe2>
100173a2:	0025      	movs	r5, r4
100173a4:	4b12      	ldr	r3, [pc, #72]	; (100173f0 <__aeabi_d2f+0x110>)
100173a6:	18f3      	adds	r3, r6, r3
100173a8:	409d      	lsls	r5, r3
100173aa:	1e6e      	subs	r6, r5, #1
100173ac:	41b5      	sbcs	r5, r6
100173ae:	409a      	lsls	r2, r3
100173b0:	002b      	movs	r3, r5
100173b2:	4313      	orrs	r3, r2
100173b4:	0022      	movs	r2, r4
100173b6:	40c2      	lsrs	r2, r0
100173b8:	431a      	orrs	r2, r3
100173ba:	2300      	movs	r3, #0
100173bc:	e7ab      	b.n	10017316 <__aeabi_d2f+0x36>
100173be:	2300      	movs	r3, #0
100173c0:	e7d5      	b.n	1001736e <__aeabi_d2f+0x8e>
100173c2:	2502      	movs	r5, #2
100173c4:	426d      	negs	r5, r5
100173c6:	1aeb      	subs	r3, r5, r3
100173c8:	0015      	movs	r5, r2
100173ca:	40dd      	lsrs	r5, r3
100173cc:	2820      	cmp	r0, #32
100173ce:	d009      	beq.n	100173e4 <__aeabi_d2f+0x104>
100173d0:	4b08      	ldr	r3, [pc, #32]	; (100173f4 <__aeabi_d2f+0x114>)
100173d2:	18f3      	adds	r3, r6, r3
100173d4:	409a      	lsls	r2, r3
100173d6:	4314      	orrs	r4, r2
100173d8:	1e62      	subs	r2, r4, #1
100173da:	4194      	sbcs	r4, r2
100173dc:	0022      	movs	r2, r4
100173de:	2300      	movs	r3, #0
100173e0:	432a      	orrs	r2, r5
100173e2:	e798      	b.n	10017316 <__aeabi_d2f+0x36>
100173e4:	2200      	movs	r2, #0
100173e6:	e7f6      	b.n	100173d6 <__aeabi_d2f+0xf6>
100173e8:	2200      	movs	r2, #0
100173ea:	e7a8      	b.n	1001733e <__aeabi_d2f+0x5e>
100173ec:	fffffc80 	.word	0xfffffc80
100173f0:	fffffc82 	.word	0xfffffc82
100173f4:	fffffca2 	.word	0xfffffca2

100173f8 <__clzsi2>:
100173f8:	211c      	movs	r1, #28
100173fa:	2301      	movs	r3, #1
100173fc:	041b      	lsls	r3, r3, #16
100173fe:	4298      	cmp	r0, r3
10017400:	d301      	bcc.n	10017406 <__clzsi2+0xe>
10017402:	0c00      	lsrs	r0, r0, #16
10017404:	3910      	subs	r1, #16
10017406:	0a1b      	lsrs	r3, r3, #8
10017408:	4298      	cmp	r0, r3
1001740a:	d301      	bcc.n	10017410 <__clzsi2+0x18>
1001740c:	0a00      	lsrs	r0, r0, #8
1001740e:	3908      	subs	r1, #8
10017410:	091b      	lsrs	r3, r3, #4
10017412:	4298      	cmp	r0, r3
10017414:	d301      	bcc.n	1001741a <__clzsi2+0x22>
10017416:	0900      	lsrs	r0, r0, #4
10017418:	3904      	subs	r1, #4
1001741a:	a202      	add	r2, pc, #8	; (adr r2, 10017424 <__clzsi2+0x2c>)
1001741c:	5c10      	ldrb	r0, [r2, r0]
1001741e:	1840      	adds	r0, r0, r1
10017420:	4770      	bx	lr
10017422:	46c0      	nop			; (mov r8, r8)
10017424:	02020304 	.word	0x02020304
10017428:	01010101 	.word	0x01010101
	...
10017434:	0000000d 	.word	0x0000000d
10017438:	736d735b 	.word	0x736d735b
1001743c:	656c625f 	.word	0x656c625f
10017440:	6961705f 	.word	0x6961705f
10017444:	65725f72 	.word	0x65725f72
10017448:	73657571 	.word	0x73657571
1001744c:	6e665f74 	.word	0x6e665f74
10017450:	6150095d 	.word	0x6150095d
10017454:	6e697269 	.word	0x6e697269
10017458:	65722067 	.word	0x65722067
1001745c:	73657571 	.word	0x73657571
10017460:	2e2e2e74 	.word	0x2e2e2e74
10017464:	656e4220 	.word	0x656e4220
10017468:	64252077 	.word	0x64252077
1001746c:	4c42202c 	.word	0x4c42202c
10017470:	78302045 	.word	0x78302045
10017474:	78323025 	.word	0x78323025
10017478:	3154202c 	.word	0x3154202c
1001747c:	2c642520 	.word	0x2c642520
10017480:	20325420 	.word	0x20325420
10017484:	00006425 	.word	0x00006425
10017488:	6e6f6420 	.word	0x6e6f6420
1001748c:	00002165 	.word	0x00002165
10017490:	3a4f2f54 	.word	0x3a4f2f54
10017494:	46464f20 	.word	0x46464f20
10017498:	00000000 	.word	0x00000000
1001749c:	736d735b 	.word	0x736d735b
100174a0:	656c625f 	.word	0x656c625f
100174a4:	776f705f 	.word	0x776f705f
100174a8:	645f7265 	.word	0x645f7265
100174ac:	5d6e776f 	.word	0x5d6e776f
100174b0:	00000000 	.word	0x00000000
100174b4:	736d735b 	.word	0x736d735b
100174b8:	656c625f 	.word	0x656c625f
100174bc:	776f705f 	.word	0x776f705f
100174c0:	645f7265 	.word	0x645f7265
100174c4:	5d6e776f 	.word	0x5d6e776f
100174c8:	6f745309 	.word	0x6f745309
100174cc:	6e697070 	.word	0x6e697070
100174d0:	6f632067 	.word	0x6f632067
100174d4:	6e616d6d 	.word	0x6e616d6d
100174d8:	65722064 	.word	0x65722064
100174dc:	76696563 	.word	0x76696563
100174e0:	64206465 	.word	0x64206465
100174e4:	6e697275 	.word	0x6e697275
100174e8:	64612067 	.word	0x64612067
100174ec:	74726576 	.word	0x74726576
100174f0:	6d657369 	.word	0x6d657369
100174f4:	2e746e65 	.word	0x2e746e65
100174f8:	6f745320 	.word	0x6f745320
100174fc:	6e697070 	.word	0x6e697070
10017500:	2e2e2e67 	.word	0x2e2e2e67
10017504:	00000020 	.word	0x00000020
10017508:	6c696166 	.word	0x6c696166
1001750c:	21216465 	.word	0x21216465
10017510:	00000021 	.word	0x00000021
10017514:	656e6f64 	.word	0x656e6f64
10017518:	00000021 	.word	0x00000021
1001751c:	736d735b 	.word	0x736d735b
10017520:	656c625f 	.word	0x656c625f
10017524:	776f705f 	.word	0x776f705f
10017528:	645f7265 	.word	0x645f7265
1001752c:	5d6e776f 	.word	0x5d6e776f
10017530:	65440909 	.word	0x65440909
10017534:	65636976 	.word	0x65636976
10017538:	69617020 	.word	0x69617020
1001753c:	2e646572 	.word	0x2e646572
10017540:	64202e2e 	.word	0x64202e2e
10017544:	62617369 	.word	0x62617369
10017548:	676e696c 	.word	0x676e696c
1001754c:	746e6920 	.word	0x746e6920
10017550:	75727265 	.word	0x75727265
10017554:	20737470 	.word	0x20737470
10017558:	77732026 	.word	0x77732026
1001755c:	68637469 	.word	0x68637469
10017560:	20676e69 	.word	0x20676e69
10017564:	6e776f64 	.word	0x6e776f64
10017568:	6e657320 	.word	0x6e657320
1001756c:	73726f73 	.word	0x73726f73
10017570:	00000000 	.word	0x00000000
10017574:	736d735b 	.word	0x736d735b
10017578:	656c625f 	.word	0x656c625f
1001757c:	776f705f 	.word	0x776f705f
10017580:	645f7265 	.word	0x645f7265
10017584:	5d6e776f 	.word	0x5d6e776f
10017588:	75430909 	.word	0x75430909
1001758c:	6e657272 	.word	0x6e657272
10017590:	20796c74 	.word	0x20796c74
10017594:	69646e69 	.word	0x69646e69
10017598:	69746163 	.word	0x69746163
1001759c:	0000676e 	.word	0x0000676e
100175a0:	736d735b 	.word	0x736d735b
100175a4:	656c625f 	.word	0x656c625f
100175a8:	776f705f 	.word	0x776f705f
100175ac:	645f7265 	.word	0x645f7265
100175b0:	5d6e776f 	.word	0x5d6e776f
100175b4:	65440909 	.word	0x65440909
100175b8:	65636976 	.word	0x65636976
100175bc:	6e6f6320 	.word	0x6e6f6320
100175c0:	7463656e 	.word	0x7463656e
100175c4:	2e2e6465 	.word	0x2e2e6465
100175c8:	6964202e 	.word	0x6964202e
100175cc:	6e6f6373 	.word	0x6e6f6373
100175d0:	7463656e 	.word	0x7463656e
100175d4:	00676e69 	.word	0x00676e69
100175d8:	736d735b 	.word	0x736d735b
100175dc:	656c625f 	.word	0x656c625f
100175e0:	7664615f 	.word	0x7664615f
100175e4:	7065725f 	.word	0x7065725f
100175e8:	5f74726f 	.word	0x5f74726f
100175ec:	095d6e66 	.word	0x095d6e66
100175f0:	65766441 	.word	0x65766441
100175f4:	73697472 	.word	0x73697472
100175f8:	6e656d65 	.word	0x6e656d65
100175fc:	69742074 	.word	0x69742074
10017600:	756f656d 	.word	0x756f656d
10017604:	2e2e2e74 	.word	0x2e2e2e74
10017608:	00000000 	.word	0x00000000
1001760c:	736d735b 	.word	0x736d735b
10017610:	656c625f 	.word	0x656c625f
10017614:	6e6f635f 	.word	0x6e6f635f
10017618:	7463656e 	.word	0x7463656e
1001761c:	665f6465 	.word	0x665f6465
10017620:	09095d6e 	.word	0x09095d6e
10017624:	69766544 	.word	0x69766544
10017628:	20736563 	.word	0x20736563
1001762c:	6e6e6f63 	.word	0x6e6e6f63
10017630:	65746365 	.word	0x65746365
10017634:	2e2e2e64 	.word	0x2e2e2e64
10017638:	00000000 	.word	0x00000000
1001763c:	3a4f2f54 	.word	0x3a4f2f54
10017640:	30303520 	.word	0x30303520
10017644:	736d2030 	.word	0x736d2030
10017648:	00000000 	.word	0x00000000
1001764c:	736d735b 	.word	0x736d735b
10017650:	656c625f 	.word	0x656c625f
10017654:	6961705f 	.word	0x6961705f
10017658:	5f646572 	.word	0x5f646572
1001765c:	005d6e66 	.word	0x005d6e66
10017660:	736d735b 	.word	0x736d735b
10017664:	656c625f 	.word	0x656c625f
10017668:	7664615f 	.word	0x7664615f
1001766c:	69747265 	.word	0x69747265
10017670:	095d6573 	.word	0x095d6573
10017674:	65766441 	.word	0x65766441
10017678:	73697472 	.word	0x73697472
1001767c:	6e656d65 	.word	0x6e656d65
10017680:	61642074 	.word	0x61642074
10017684:	73206174 	.word	0x73206174
10017688:	66207465 	.word	0x66207465
1001768c:	656c6961 	.word	0x656c6961
10017690:	00002164 	.word	0x00002164
10017694:	736d735b 	.word	0x736d735b
10017698:	656c625f 	.word	0x656c625f
1001769c:	7664615f 	.word	0x7664615f
100176a0:	69747265 	.word	0x69747265
100176a4:	095d6573 	.word	0x095d6573
100176a8:	454c4209 	.word	0x454c4209
100176ac:	61745320 	.word	0x61745320
100176b0:	64657472 	.word	0x64657472
100176b4:	76644120 	.word	0x76644120
100176b8:	69747265 	.word	0x69747265
100176bc:	656d6573 	.word	0x656d6573
100176c0:	0000746e 	.word	0x0000746e
100176c4:	736d735b 	.word	0x736d735b
100176c8:	7265735f 	.word	0x7265735f
100176cc:	65636976 	.word	0x65636976
100176d0:	7664615f 	.word	0x7664615f
100176d4:	69747265 	.word	0x69747265
100176d8:	095d6573 	.word	0x095d6573
100176dc:	20454c42 	.word	0x20454c42
100176e0:	65766441 	.word	0x65766441
100176e4:	73697472 	.word	0x73697472
100176e8:	6e656d65 	.word	0x6e656d65
100176ec:	74732074 	.word	0x74732074
100176f0:	20747261 	.word	0x20747261
100176f4:	6c696166 	.word	0x6c696166
100176f8:	203a6465 	.word	0x203a6465
100176fc:	73616572 	.word	0x73616572
10017700:	30206e6f 	.word	0x30206e6f
10017704:	00782578 	.word	0x00782578
10017708:	736d735b 	.word	0x736d735b
1001770c:	656c625f 	.word	0x656c625f
10017710:	7369645f 	.word	0x7369645f
10017714:	6e6e6f63 	.word	0x6e6e6f63
10017718:	65746365 	.word	0x65746365
1001771c:	6e665f64 	.word	0x6e665f64
10017720:	6550095d 	.word	0x6550095d
10017724:	64207265 	.word	0x64207265
10017728:	6f637369 	.word	0x6f637369
1001772c:	63656e6e 	.word	0x63656e6e
10017730:	2e646574 	.word	0x2e646574
10017734:	42202e2e 	.word	0x42202e2e
10017738:	2077656e 	.word	0x2077656e
1001773c:	202c6425 	.word	0x202c6425
10017740:	20454c42 	.word	0x20454c42
10017744:	30257830 	.word	0x30257830
10017748:	202c7832 	.word	0x202c7832
1001774c:	25203154 	.word	0x25203154
10017750:	54202c64 	.word	0x54202c64
10017754:	64252032 	.word	0x64252032
10017758:	00000000 	.word	0x00000000
1001775c:	54455320 	.word	0x54455320
10017760:	00002021 	.word	0x00002021
10017764:	20642520 	.word	0x20642520
10017768:	454e4f47 	.word	0x454e4f47
1001776c:	0000203f 	.word	0x0000203f
10017770:	3a4f2f54 	.word	0x3a4f2f54
10017774:	6d303220 	.word	0x6d303220
10017778:	00000073 	.word	0x00000073
1001777c:	49544f4e 	.word	0x49544f4e
10017780:	41434946 	.word	0x41434946
10017784:	4e4f4954 	.word	0x4e4f4954
10017788:	52524520 	.word	0x52524520
1001778c:	2121524f 	.word	0x2121524f
10017790:	00000000 	.word	0x00000000
10017794:	544f4e20 	.word	0x544f4e20
10017798:	74657320 	.word	0x74657320
1001779c:	0000203f 	.word	0x0000203f

100177a0 <sms_ble_gap_cb>:
	...
100177ac:	10008655 00000000 10008689 100087dd     U...............
	...
100177c4:	100086ed 1000843d 00000000 00000000     ....=...........
	...

100177ec <sms_ble_gatt_server_cb>:
100177ec:	10008489 100084fd 00000000 00000000     ................
	...
10017814:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017824:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10017834:	656c6968 74657320 676e6974 20707520     hile setting up 
10017844:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10017854:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10017864:	6c626f72 77206d65 656c6968 74657320     roblem while set
10017874:	676e6974 20707520 74747562 00316e6f     ting up button1.
10017884:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017894:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
100178a4:	656c6968 74657320 676e6974 20707520     hile setting up 
100178b4:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
100178c4:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
100178d4:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
100178e4:	74747542 73206e6f 65746174 6425203a     Button state: %d
100178f4:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10017904:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10017914:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10017924:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10017934:	73752074 73206465 65746174 2e2e2e73     t used states...
10017944:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10017954:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10017964:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10017974:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10017984:	5d736563 72655309 65636976 65642073     ces].Services de
10017994:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100179a4:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
100179b4:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
100179c4:	69767265 5d736563 72655309 65636976     ervices].Service
100179d4:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
100179e4:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
100179f4:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10017a04:	65732065 6e697474 70672067 70206f69     e setting gpio p
10017a14:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10017a24:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10017a34:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10017a44:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10017a54:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
10017a64:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10017a74:	6d656c62 69687720 7320656c 69747465     blem while setti
10017a84:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10017a94:	00006e69 736d735b 75706d5f 6665645f     in..[sms_mpu_def
10017aa4:	5f656e69 76726573 73656369 6553095d     ine_services].Se
10017ab4:	63697672 64207365 6e696665 20676e69     rvices defining 
10017ac4:	6c696166 202c6465 73616572 30206e6f     failed, reason 0
10017ad4:	00782578 736d735b 75706d5f 6665645f     x%x.[sms_mpu_def
10017ae4:	5f656e69 76726573 73656369 6553095d     ine_services].Se
10017af4:	63697672 64207365 6e696665 202c6465     rvices defined, 
10017b04:	20534d53 2055504d 646e6168 203a656c     SMS MPU handle: 
10017b14:	00006425 65532d78 7469736e 74697669     %d..x-Sensitivit
10017b24:	203d2079 00006425 79672d78 625f6f72     y = %d..x-gyro_b
10017b34:	20736169 6425203d 00000000 74736564     ias = %d....dest
10017b44:	25203a31 25202c66 25202c66 00000066     1: %f, %f, %f...
10017b54:	616f6c46 676e6974 696f7020 203a746e     Floating point: 
10017b64:	00006525 736d735b 75706d5f 6d6f635f     %e..[sms_mpu_com
10017b74:	68635f70 5d6b6365 4b410909 33363938     p_check]..AK8963
10017b84:	20736920 696c6e6f 2e2e656e 0000002e      is online......
10017b94:	736d735b 75706d5f 6568635f 095d6b63     [sms_mpu_check].
10017ba4:	55504d09 3532392d 73692030 6c6e6f20     .MPU-9250 is onl
10017bb4:	2e656e69 00002e2e 736d735b 75706d5f     ine.....[sms_mpu
10017bc4:	6568635f 095d6b63 55504d09 3532392d     _check]..MPU-925
10017bd4:	65732030 742d666c 20747365 73736170     0 self-test pass
10017be4:	00006465 736d735b 64656c5f 6970675f     ed..[sms_led_gpi
10017bf4:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
10017c04:	6c696877 65732065 6e697474 70752067     while setting up
10017c14:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
10017c24:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
10017c34:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10017c44:	20656c69 74746573 20676e69 56207075     ile setting up V
10017c54:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10017c64:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10017c74:	72617453 676e6974 65727020 72757373     Starting pressur
10017c84:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10017c94:	6572705f 72757373 74735f65 75747261     _pressure_startu
10017ca4:	09095d70 69614609 2064656c 69206f74     p]...Failed to i
10017cb4:	6974696e 7a696c61 72702065 75737365     nitialize pressu
10017cc4:	64206572 63697665 00000065 736d735b     re device...[sms
10017cd4:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
10017ce4:	75636c61 6574616c 6574205d 7265706d     alculate] temper
10017cf4:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
10017d04:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
10017d14:	6572705f 72757373 736d5f65 705f3835     _pressure_ms58_p
10017d24:	5f6c6c6f 61746164 7270205d 656c626f     oll_data] proble
10017d34:	6572206d 6e696461 736d2067 64203835     m reading ms58 d
10017d44:	00617461 736d735b 6572705f 72757373     ata.[sms_pressur
10017d54:	65645f65 656e6966 7265735f 65636976     e_define_service
10017d64:	53095d73 69767265 20736563 69666564     s].Services defi
10017d74:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10017d84:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10017d94:	6572705f 72757373 65645f65 656e6966     _pressure_define
10017da4:	7265735f 65636976 53095d73 69767265     _services].Servi
10017db4:	20736563 69666564 2c64656e 534d5320     ces defined, SMS
10017dc4:	65727020 72757373 61682065 656c646e      pressure handle
10017dd4:	6425203a 00000000 1000abc0 1000abce     : %d............
10017de4:	1000abdc 1000abea 1000abf8 1000ac06     ................
10017df4:	1000ac14 1000ac24 1000ac34 1000ac44     ....$...4...D...
10017e04:	1000ac54 1000ac64 1000ac74 1000ac84     T...d...t.......
10017e14:	1000ac94 1000aca4 1000acb4 1000acc4     ................
10017e24:	1000acd4 1000ace4 1000acf4 1000ad04     ................
10017e34:	1000ad14 1000ad24 1000ad34 1000ad44     ....$...4...D...
10017e44:	1000ad54 1000ad64 1000ad72 1000ad80     T...d...r.......
10017e54:	1000ad8e 1000ad9c 1000adaa 1000adb8     ................
10017e64:	1000adc6 1000add4 1000ade4 1000adf4     ................
10017e74:	1000ae04 1000ae14 1000ae24 1000ae34     ........$...4...
10017e84:	1000ae44 1000ae54 1000ae64 1000ae74     D...T...d...t...
10017e94:	1000ae84 1000ae94 1000aea4 1000aeb4     ................
10017ea4:	1000aec4 1000aed4 1000aee2 1000aef0     ................
10017eb4:	1000af1c 1000af2a 1000af38 1000af46     ....*...8...F...
10017ec4:	1000af54 1000af62 1000af70 1000af7e     T...b...p...~...
10017ed4:	1000af8c 1000af9a 1000afa8 1000afb6     ................
10017ee4:	1000afc4 1000afd2 1000afe0 1000afee     ................
10017ef4:	1000affc 1000b00a 1000b018 1000b026     ............&...
10017f04:	1000b034 1000b042 1000b050 1000b05e     4...B...P...^...
10017f14:	1000b06c 1000b07a 1000b088 1000b096     l...z...........
10017f24:	1000b0a4 1000b0b2 1000b0c0 1000b0ce     ................
10017f34:	1000b0dc 1000b0ea 1000b0f8 1000b106     ................
10017f44:	1000b114 1000b122 1000b130 1000b13e     ...."...0...>...
10017f54:	1000b14c 1000b15a 1000b168 1000b176     L...Z...h...v...
10017f64:	1000b184 1000b192 1000b1a0 1000b1ae     ................
10017f74:	1000b1bc 1000b1ca 1000b1d8 1000b1e6     ................
10017f84:	1000b1f4 1000b202 1000b29c 1000b2c4     ................
10017f94:	1000b2ec 1000b314 1000b554 1000b344     ........T...D...
10017fa4:	1000b35c 1000b3d4 1000b3ec 1000b374     \...........t...
10017fb4:	1000b38c 1000b3a4 1000b3bc 1000b404     ................
10017fc4:	1000b6c8 1000b6c8 1000b6c8 1000b6c8     ................
10017fd4:	1000b6c8 1000b6c8 1000b6c8 1000b6c8     ................
10017fe4:	1000b4ac 1000b4c4 1000b4dc 1000b56a     ............j...
10017ff4:	1000b434 1000b6c8 1000b6c8 1000b6c8     4...............
10018004:	1000b6c8 1000b6c8 1000b6c8 1000b4f4     ................
10018014:	1000b50c 1000b524 1000b53c 1000b6c8     ....$...<.......
10018024:	1000b680 1000b698 1000b6c8 1000b6c8     ................
10018034:	1000b596 1000b5ac 1000b5c2 1000b5d8     ................
10018044:	1000b6c8 1000b6c8 1000b6c8 1000b6c8     ................
10018054:	1000b6c8 1000b6c8 1000b6c8 1000b6c8     ................
10018064:	1000b288 1000b2b0 1000b2d8 1000b300     ................
10018074:	1000b32c 1000b41c 1000b44c 1000b464     ,.......L...d...
10018084:	1000b47c 1000b494 1000b580 1000b5ee     |...............
10018094:	1000b668 1000b6b0 1000bdaa 1000bdbc     h...............
100180a4:	1000bd92 1000bd92 1000bd92 1000bdaa     ................
100180b4:	1000bd92 1000bd92 1000c7ae 1000c822     ............"...
100180c4:	1000c796 1000c828 1000c79c 1000c7a2     ....(...........
100180d4:	1000c7a8 34333231 00003635 efcdab00     ....123456......
100180e4:	00efcdab                                ....

100180e8 <ble_mgr_gatt_server_handle>:
	...
10018100:	1000bca5 1000bccd 1000bd15 00000000     ................
10018110:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10018120:	65636552 64657669 00000000 6e616353     Received....Scan
10018130:	676e696e 61662020 64656c69 00000000     ning  failed....
10018140:	65766441 73697472 20676e69 6c696166     Advertising fail
10018150:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10018160:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10018170:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10018180:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10018190:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
100181a0:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100181b0:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
100181c0:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100181d0:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100181e0:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100181f0:	00000064 72616843 69725720 43206574     d...Char Write C
10018200:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10018210:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10018220:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10018230:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10018240:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10018250:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10018260:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10018270:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10018280:	00000000 69766544 64206563 6f637369     ....Device disco
10018290:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
100182a0:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100182b0:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
100182c0:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100182d0:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100182e0:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100182f0:	6c706d6f 64657465 63757320 73736563     ompleted success
10018300:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10018310:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10018320:	74707972 206e6f69 6f666e69 00000000     ryption info....
10018330:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10018340:	64612064 73657264 255b2073 20205d64     d address [%d]  
10018350:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10018360:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10018370:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10018380:	206e6163 69766564 72206563 68636165     can device reach
10018390:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
100183a0:	00006e61 6c696146 74206465 7473206f     an..Failed to st
100183b0:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
100183c0:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100183d0:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100183e0:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100183f0:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10018400:	52207463 65757165 46207473 656c6961     ct Request Faile
10018410:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10018420:	72756465 6f632065 656c706d 20646574     edure completed 
10018430:	63637573 66737365 796c6c75 00000000     successfully....
10018440:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10018450:	646e756f 206f7420 726f7473 68742065     ound to store th
10018460:	61702065 6e697269 6e692067 00006f66     e pairing info..
10018470:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10018480:	4e206e6f 7320746f 74726174 00006465     on Not started..
10018490:	76616c53 65532065 69727563 52207974     Slave Security R
100184a0:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100184b0:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
100184c0:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100184d0:	00205832 646e6553 20676e69 72696170     2X .Sending pair
100184e0:	20676e69 70736572 65736e6f 00000000     ing response....
100184f0:	72696150 71655220 74736575 41202d20     Pair Request - A
10018500:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10018510:	64656c69 00000000 65746e45 68742072     iled....Enter th
10018520:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10018530:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10018540:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10018550:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10018560:	61656c50 45206573 7265746e 65687420     Please Enter the
10018570:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10018580:	65646f63 206e6f28 6568746f 65442072     code(on other De
10018590:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
100185a0:	70657220 6620796c 656c6961 00000064      reply failed...
100185b0:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
100185c0:	70707573 6574726f 00000064 65746e45     supported...Ente
100185d0:	20646572 73736150 646f632d 00003a65     red Pass-code:..
100185e0:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
100185f0:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10018600:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10018610:	76656420 20656369 76696465 00782520      device ediv %x.
10018620:	72656570 76656420 20656369 76696465     peer device ediv
10018630:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10018640:	00782520 20656854 65646e69 73692078      %x.The index is
10018650:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10018660:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10018670:	6f666e69 74616d72 206e6f69 7020666f     information of p
10018680:	20726565 69766564 69206563 6f6e2073     eer device is no
10018690:	76612074 616c6961 2e656c62 00000000     t available.....
100186a0:	61656c50 75206573 6961706e 68742072     Please unpair th
100186b0:	65642065 65636976 6f726620 6570206d     e device from pe
100186c0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100186d0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
100186e0:	20646e61 72617473 61702074 6e697269     and start pairin
100186f0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10018700:	52206e6f 65757165 52207473 796c7065     on Request Reply
10018710:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10018720:	52206e6f 65757165 52207473 796c7065     on Request Reply
10018730:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10018740:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10018750:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10018760:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10018770:	7a696c61 6f697461 6166206e 64656c69     alization failed
10018780:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10018790:	61656c50 63206573 6b636568 65687420     Please check the
100187a0:	776f7020 61207265 6320646e 656e6e6f      power and conne
100187b0:	6f697463 202f206e 64726168 65726177     ction / hardware
100187c0:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
100187d0:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
100187e0:	20656d61 20746573 6c696166 00006465     ame set failed..
100187f0:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10018800:	5d676966 44420909 64646120 73736572     fig]..BD address
10018810:	74656720 69616620 0064656c 656c625b      get failed.[ble
10018820:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018830:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10018840:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10018850:	25583230 2c583230 64644120 73736572     02X%02X, Address
10018860:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10018870:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018880:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10018890:	666e6f63 72756769 6f697461 6166206e     configuration fa
100188a0:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
100188b0:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
100188c0:	454c4220 76654420 20656369 72646441      BLE Device Addr
100188d0:	20737365 6c696166 00006465 6e616353     ess failed..Scan
100188e0:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
100188f0:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10018900:	69727563 72207974 65757165 73207473     curity request s
10018910:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10018920:	65732065 69727563 72207974 65757165     e security reque
10018930:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10018940:	65746365 6f742064 65657020 65642072     ected to peer de
10018950:	65636976 74697720 64612068 73657264     vice with addres
10018960:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10018970:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10018980:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10018990:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100189a0:	61522067 6d6f646e 64646120 73736572     g Random address
100189b0:	63757320 73736563 00002a2a 6f736552      success**..Reso
100189c0:	6e69766c 61522067 6d6f646e 64646120     lving Random add
100189d0:	73736572 69616620 2a64656c 0000002a     ress failed**...
100189e0:	2078614d 626d756e 6f207265 6f632066     Max number of co
100189f0:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10018a00:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10018a10:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10018a20:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10018a30:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10018a40:	00000064 23232323 23232323 65442323     d...##########De
10018a50:	65636976 756f4620 0000646e 23232323     vice Found..####
10018a60:	23232323 65442323 65636976 746f4e20     ######Device Not
10018a70:	756f4620 0000646e 69766544 69206563      Found..Device i
10018a80:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10018a90:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10018aa0:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10018ab0:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10018ac0:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10018ad0:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018ae0:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018af0:	69666963 61642063 65206174 6c62616e     cific data enabl
10018b00:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
10018b10:	65766441 73697472 6e656d65 61642074     Advertisement da
10018b20:	73206174 66207465 656c6961 00000064     ta set failed...

10018b30 <ble_mgr_gap_handle>:
10018b30:	1000bc31 1000bee1 1000bc55 1000bc7d     1.......U...}...
10018b40:	00000000 1000cb5d 1000bd5d 1000bdf9     ....]...].......
10018b50:	1000c13d 1000bf8d 1000c33d 1000c155     =.......=...U...
10018b60:	1000c4c9 1000c60d 1000be1d 1000cda9     ................
	...
10018b7c:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
10018b8c:	2d55504d 30353239 696e6920 6c616974     MPU-9250 initial
10018b9c:	64657a69 002e2e2e 73616942 6c617620     ized....Bias val
10018bac:	3a736575 79670d0a 20586f72 202c6425     ues:..gyroX %d, 
10018bbc:	6f727967 64252059 7967202c 205a6f72     gyroY %d, gyroZ 
10018bcc:	0d0a6425 65636361 2520586c 61202c64     %d..accelX %d, a
10018bdc:	6c656363 64252059 6361202c 5a6c6563     ccelY %d, accelZ
10018bec:	00642520 706d6f43 20737361 20746f6e      %d.Compass not 
10018bfc:	65726568 002e2e2e 706d6f43 20737361     here....Compass 
10018c0c:	74696e69 696c6169 2e64657a 00002e2e     initialized.....
10018c1c:	696c6143 74617262 206e6f69 756c6176     Calibration valu
10018c2c:	203a7365 64252078 2079202c 202c6425     es: x %d, y %d, 
10018c3c:	6425207a 6d744100 43206c65 2e70726f     z %d.Atmel Corp.

10018c4c <CSWTCH.45>:
10018c4c:	00100402                                         ...

10018c4f <CSWTCH.47>:
10018c4f:	03010300 03030303 03030303 02020303              ...............

10018c5e <client_conf_uuid>:
10018c5e:	29042902                                         .)

10018c60 <presentation_format_uuid>:
10018c60:	29012904                                         .)

10018c62 <user_desc_uuid>:
10018c62:	29032901                                         .)

10018c64 <server_conf_uuid>:
10018c64:	29002903                                         .)

10018c66 <extended_props_uuid>:
10018c66:	28022900                                         .)

10018c68 <include_uuid>:
10018c68:	28032802                                         .(

10018c6a <char_uuid>:
10018c6a:	6f702803 00000077                                .(pow.

10018c70 <TWO52>:
10018c70:	00000000 43300000 00000000 c3300000     ......0C......0.
10018c80:	00000043                                C...

10018c84 <_global_impure_ptr>:
10018c84:	10018fb4 00464e49 00666e69 004e414e     ....INF.inf.NAN.
10018c94:	006e616e 31300030 35343332 39383736     nan.0.0123456789
10018ca4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
10018cb4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
10018cc4:	4e614e00 00000000                       .NaN....

10018ccc <__sf_fake_stdin>:
	...

10018cec <__sf_fake_stdout>:
	...

10018d0c <__sf_fake_stderr>:
	...
10018d2c:	49534f50 002e0058 00000000              POSIX.......

10018d38 <__mprec_tens>:
10018d38:	00000000 3ff00000 00000000 40240000     .......?......$@
10018d48:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
10018d58:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
10018d68:	00000000 412e8480 00000000 416312d0     .......A......cA
10018d78:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10018d88:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10018d98:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10018da8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10018db8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10018dc8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10018dd8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10018de8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10018df8:	79d99db4 44ea7843                       ...yCx.D

10018e00 <__mprec_bigtens>:
10018e00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10018e10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10018e20:	7f73bf3c 75154fdd                       <.s..O.u

10018e28 <p05.5385>:
10018e28:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
10018e38:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
10018e48:	10015246 1001516a 10015228 10015200     FR..jQ..(R...R..
10018e58:	10015228 100151f4 10015228 10015200     (R...Q..(R...R..
10018e68:	1001516a 1001516a 100151f4 10015200     jQ..jQ...Q...R..
10018e78:	100152ac 100152ac 100152ac 1001522e     .R...R...R...R..
10018e88:	1001516a 1001516a 10015214 100151fe     jQ..jQ...R...Q..
10018e98:	10015214 100151f4 10015214 100151fe     .R...Q...R...Q..
10018ea8:	1001516a 1001516a 100151f4 100151fe     jQ..jQ...Q...Q..
10018eb8:	100152ac 100152ac 100152ac 100152b8     .R...R...R...R..
10018ec8:	10015444 100153a2 100153a2 100153a0     DT...S...S...S..
10018ed8:	10015436 10015436 1001542c 100153a0     6T..6T..,T...S..
10018ee8:	10015436 1001542c 10015436 100153a0     6T..,T..6T...S..
10018ef8:	1001543c 1001543c 1001543c 100154c6     <T..<T..<T...T..
10018f08:	10015ea4 10015d72 10015e78 10015d68     .^..r]..x^..h]..
10018f18:	10015e78 10015e82 10015e78 10015d68     x^...^..x^..h]..
10018f28:	10015d72 10015d72 10015e82 10015d68     r]..r]...^..h]..
10018f38:	10015d5e 10015d5e 10015d5e 100160d4     ^]..^]..^]...`..
10018f48:	100166ec 100165ac 100165ac 100165aa     .f...e...e...e..
10018f58:	100166c4 100166c4 100166b6 100165aa     .f...f...f...e..
10018f68:	100166c4 100166b6 100166c4 100165aa     .f...f...f...e..
10018f78:	100166cc 100166cc 100166cc 100168cc     .f...f...f...h..

10018f88 <_init>:
10018f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018f8a:	46c0      	nop			; (mov r8, r8)
10018f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018f8e:	bc08      	pop	{r3}
10018f90:	469e      	mov	lr, r3
10018f92:	4770      	bx	lr

10018f94 <__init_array_start>:
10018f94:	100080b1 	.word	0x100080b1

10018f98 <_fini>:
10018f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018f9a:	46c0      	nop			; (mov r8, r8)
10018f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018f9e:	bc08      	pop	{r3}
10018fa0:	469e      	mov	lr, r3
10018fa2:	4770      	bx	lr

10018fa4 <__fini_array_start>:
10018fa4:	10008089 	.word	0x10008089
