
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001043c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  1001843c  1001843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ea0  100184e8  100184e8  000184e8  2**2
                  ALLOC
  3 .stack        00001800  1001b388  1001b388  000184e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000184e8  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018510  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004e53f  00000000  00000000  000185c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000563a  00000000  00000000  00066b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b7d0  00000000  00000000  0006c13d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d50  00000000  00000000  0007790d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd8  00000000  00000000  0007865d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028603  00000000  00000000  00079435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017e26  00000000  00000000  000a1a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014707d  00000000  00000000  000b985e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f88  00000000  00000000  002008dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001843c 	.word	0x1001843c
10008068:	1001843c 	.word	0x1001843c
1000806c:	100184e8 	.word	0x100184e8
10008070:	1001b388 	.word	0x1001b388
10008074:	100184e8 	.word	0x100184e8
10008078:	10018440 	.word	0x10018440
1000807c:	100184ec 	.word	0x100184ec
10008080:	10015059 	.word	0x10015059
10008084:	1000f805 	.word	0x1000f805

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100184e8 	.word	0x100184e8
100080a8:	00000000 	.word	0x00000000
100080ac:	1001843c 	.word	0x1001843c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100184ec 	.word	0x100184ec
100080dc:	1001843c 	.word	0x1001843c
100080e0:	1001843c 	.word	0x1001843c
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c66d 	.word	0x1000c66d
10008114:	10012fe5 	.word	0x10012fe5
10008118:	10018440 	.word	0x10018440
1000811c:	000f4240 	.word	0x000f4240
10008120:	1001843c 	.word	0x1001843c
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10018440 	.word	0x10018440
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	10018504 	.word	0x10018504

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	10018504 	.word	0x10018504

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	10018504 	.word	0x10018504

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000d1a9 	.word	0x1000d1a9

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000cd41 	.word	0x1000cd41
100083ec:	40003400 	.word	0x40003400
100083f0:	1000c2c9 	.word	0x1000c2c9

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	10018444 	.word	0x10018444
10008500:	1000aab1 	.word	0x1000aab1

10008504 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008504:	b5f0      	push	{r4, r5, r6, r7, lr}
10008506:	b085      	sub	sp, #20
10008508:	0007      	movs	r7, r0
1000850a:	000e      	movs	r6, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000850c:	4b21      	ldr	r3, [pc, #132]	; (10008594 <mpu_get_temperature+0x90>)
1000850e:	7a9b      	ldrb	r3, [r3, #10]
10008510:	2b00      	cmp	r3, #0
10008512:	d035      	beq.n	10008580 <mpu_get_temperature+0x7c>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008514:	4b1f      	ldr	r3, [pc, #124]	; (10008594 <mpu_get_temperature+0x90>)
10008516:	681a      	ldr	r2, [r3, #0]
10008518:	7c11      	ldrb	r1, [r2, #16]
1000851a:	685b      	ldr	r3, [r3, #4]
1000851c:	7818      	ldrb	r0, [r3, #0]
1000851e:	ab03      	add	r3, sp, #12
10008520:	2202      	movs	r2, #2
10008522:	4c1d      	ldr	r4, [pc, #116]	; (10008598 <mpu_get_temperature+0x94>)
10008524:	47a0      	blx	r4
10008526:	9001      	str	r0, [sp, #4]
10008528:	2800      	cmp	r0, #0
1000852a:	d12d      	bne.n	10008588 <mpu_get_temperature+0x84>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000852c:	ab03      	add	r3, sp, #12
1000852e:	781c      	ldrb	r4, [r3, #0]
10008530:	0224      	lsls	r4, r4, #8
10008532:	785b      	ldrb	r3, [r3, #1]
10008534:	431c      	orrs	r4, r3
10008536:	b224      	sxth	r4, r4
    if (timestamp)
10008538:	2e00      	cmp	r6, #0
1000853a:	d002      	beq.n	10008542 <mpu_get_temperature+0x3e>
        get_ms(timestamp);
1000853c:	0030      	movs	r0, r6
1000853e:	4b17      	ldr	r3, [pc, #92]	; (1000859c <mpu_get_temperature+0x98>)
10008540:	4798      	blx	r3

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
10008542:	4b14      	ldr	r3, [pc, #80]	; (10008594 <mpu_get_temperature+0x90>)
10008544:	685d      	ldr	r5, [r3, #4]
10008546:	4e16      	ldr	r6, [pc, #88]	; (100085a0 <mpu_get_temperature+0x9c>)
10008548:	0020      	movs	r0, r4
1000854a:	47b0      	blx	r6
1000854c:	1c04      	adds	r4, r0, #0
1000854e:	2308      	movs	r3, #8
10008550:	5ee8      	ldrsh	r0, [r5, r3]
10008552:	47b0      	blx	r6
10008554:	1c01      	adds	r1, r0, #0
10008556:	1c20      	adds	r0, r4, #0
10008558:	4b12      	ldr	r3, [pc, #72]	; (100085a4 <mpu_get_temperature+0xa0>)
1000855a:	4798      	blx	r3
1000855c:	1c04      	adds	r4, r0, #0
1000855e:	88e8      	ldrh	r0, [r5, #6]
10008560:	47b0      	blx	r6
10008562:	1c01      	adds	r1, r0, #0
10008564:	1c20      	adds	r0, r4, #0
10008566:	4b10      	ldr	r3, [pc, #64]	; (100085a8 <mpu_get_temperature+0xa4>)
10008568:	4798      	blx	r3
1000856a:	4910      	ldr	r1, [pc, #64]	; (100085ac <mpu_get_temperature+0xa8>)
1000856c:	4b10      	ldr	r3, [pc, #64]	; (100085b0 <mpu_get_temperature+0xac>)
1000856e:	4798      	blx	r3
10008570:	218f      	movs	r1, #143	; 0x8f
10008572:	05c9      	lsls	r1, r1, #23
10008574:	4b0f      	ldr	r3, [pc, #60]	; (100085b4 <mpu_get_temperature+0xb0>)
10008576:	4798      	blx	r3
10008578:	4b0f      	ldr	r3, [pc, #60]	; (100085b8 <mpu_get_temperature+0xb4>)
1000857a:	4798      	blx	r3
1000857c:	6038      	str	r0, [r7, #0]
    return 0;
1000857e:	e006      	b.n	1000858e <mpu_get_temperature+0x8a>
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
10008580:	2301      	movs	r3, #1
10008582:	425b      	negs	r3, r3
10008584:	9301      	str	r3, [sp, #4]
10008586:	e002      	b.n	1000858e <mpu_get_temperature+0x8a>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
10008588:	2301      	movs	r3, #1
1000858a:	425b      	negs	r3, r3
1000858c:	9301      	str	r3, [sp, #4]
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
1000858e:	9801      	ldr	r0, [sp, #4]
10008590:	b005      	add	sp, #20
10008592:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008594:	10018444 	.word	0x10018444
10008598:	1000ab0d 	.word	0x1000ab0d
1000859c:	1000b40d 	.word	0x1000b40d
100085a0:	1001407d 	.word	0x1001407d
100085a4:	10013d2d 	.word	0x10013d2d
100085a8:	10013771 	.word	0x10013771
100085ac:	420c0000 	.word	0x420c0000
100085b0:	10013485 	.word	0x10013485
100085b4:	10013b05 	.word	0x10013b05
100085b8:	10014039 	.word	0x10014039

100085bc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
100085bc:	b510      	push	{r4, lr}
100085be:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085c0:	4b79      	ldr	r3, [pc, #484]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085c2:	7a9b      	ldrb	r3, [r3, #10]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d100      	bne.n	100085ca <mpu_reset_fifo+0xe>
100085c8:	e0ce      	b.n	10008768 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100085ca:	466b      	mov	r3, sp
100085cc:	3307      	adds	r3, #7
100085ce:	2200      	movs	r2, #0
100085d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d2:	4a75      	ldr	r2, [pc, #468]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085d4:	6811      	ldr	r1, [r2, #0]
100085d6:	7c49      	ldrb	r1, [r1, #17]
100085d8:	6852      	ldr	r2, [r2, #4]
100085da:	7810      	ldrb	r0, [r2, #0]
100085dc:	2201      	movs	r2, #1
100085de:	4c73      	ldr	r4, [pc, #460]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085e0:	47a0      	blx	r4
100085e2:	2800      	cmp	r0, #0
100085e4:	d000      	beq.n	100085e8 <mpu_reset_fifo+0x2c>
100085e6:	e0c2      	b.n	1000876e <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085e8:	4b6f      	ldr	r3, [pc, #444]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100085ea:	681a      	ldr	r2, [r3, #0]
100085ec:	7951      	ldrb	r1, [r2, #5]
100085ee:	685b      	ldr	r3, [r3, #4]
100085f0:	7818      	ldrb	r0, [r3, #0]
100085f2:	466b      	mov	r3, sp
100085f4:	3307      	adds	r3, #7
100085f6:	2201      	movs	r2, #1
100085f8:	4c6c      	ldr	r4, [pc, #432]	; (100087ac <mpu_reset_fifo+0x1f0>)
100085fa:	47a0      	blx	r4
100085fc:	2800      	cmp	r0, #0
100085fe:	d000      	beq.n	10008602 <mpu_reset_fifo+0x46>
10008600:	e0b8      	b.n	10008774 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008602:	4b69      	ldr	r3, [pc, #420]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008604:	681a      	ldr	r2, [r3, #0]
10008606:	7911      	ldrb	r1, [r2, #4]
10008608:	685b      	ldr	r3, [r3, #4]
1000860a:	7818      	ldrb	r0, [r3, #0]
1000860c:	466b      	mov	r3, sp
1000860e:	3307      	adds	r3, #7
10008610:	2201      	movs	r2, #1
10008612:	4c66      	ldr	r4, [pc, #408]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	2800      	cmp	r0, #0
10008618:	d000      	beq.n	1000861c <mpu_reset_fifo+0x60>
1000861a:	e0ae      	b.n	1000877a <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
1000861c:	2324      	movs	r3, #36	; 0x24
1000861e:	4a62      	ldr	r2, [pc, #392]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008620:	5cd3      	ldrb	r3, [r2, r3]
10008622:	2b00      	cmp	r3, #0
10008624:	d04f      	beq.n	100086c6 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008626:	466b      	mov	r3, sp
10008628:	3307      	adds	r3, #7
1000862a:	220c      	movs	r2, #12
1000862c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000862e:	4a5e      	ldr	r2, [pc, #376]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008630:	6811      	ldr	r1, [r2, #0]
10008632:	7909      	ldrb	r1, [r1, #4]
10008634:	6852      	ldr	r2, [r2, #4]
10008636:	7810      	ldrb	r0, [r2, #0]
10008638:	2201      	movs	r2, #1
1000863a:	4c5c      	ldr	r4, [pc, #368]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000863c:	47a0      	blx	r4
1000863e:	2800      	cmp	r0, #0
10008640:	d000      	beq.n	10008644 <mpu_reset_fifo+0x88>
10008642:	e09d      	b.n	10008780 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008644:	3032      	adds	r0, #50	; 0x32
10008646:	4b5a      	ldr	r3, [pc, #360]	; (100087b0 <mpu_reset_fifo+0x1f4>)
10008648:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000864a:	22c0      	movs	r2, #192	; 0xc0
1000864c:	466b      	mov	r3, sp
1000864e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008650:	4b55      	ldr	r3, [pc, #340]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008652:	7a9b      	ldrb	r3, [r3, #10]
10008654:	07db      	lsls	r3, r3, #31
10008656:	d502      	bpl.n	1000865e <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
10008658:	3220      	adds	r2, #32
1000865a:	466b      	mov	r3, sp
1000865c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000865e:	4b52      	ldr	r3, [pc, #328]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008660:	681a      	ldr	r2, [r3, #0]
10008662:	7911      	ldrb	r1, [r2, #4]
10008664:	685b      	ldr	r3, [r3, #4]
10008666:	7818      	ldrb	r0, [r3, #0]
10008668:	466b      	mov	r3, sp
1000866a:	3307      	adds	r3, #7
1000866c:	2201      	movs	r2, #1
1000866e:	4c4f      	ldr	r4, [pc, #316]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008670:	47a0      	blx	r4
10008672:	2800      	cmp	r0, #0
10008674:	d000      	beq.n	10008678 <mpu_reset_fifo+0xbc>
10008676:	e086      	b.n	10008786 <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008678:	4b4b      	ldr	r3, [pc, #300]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000867a:	7c5b      	ldrb	r3, [r3, #17]
1000867c:	2b00      	cmp	r3, #0
1000867e:	d003      	beq.n	10008688 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008680:	2202      	movs	r2, #2
10008682:	466b      	mov	r3, sp
10008684:	71da      	strb	r2, [r3, #7]
10008686:	e002      	b.n	1000868e <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008688:	2200      	movs	r2, #0
1000868a:	466b      	mov	r3, sp
1000868c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000868e:	4b46      	ldr	r3, [pc, #280]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008690:	681a      	ldr	r2, [r3, #0]
10008692:	7c51      	ldrb	r1, [r2, #17]
10008694:	685b      	ldr	r3, [r3, #4]
10008696:	7818      	ldrb	r0, [r3, #0]
10008698:	466b      	mov	r3, sp
1000869a:	3307      	adds	r3, #7
1000869c:	2201      	movs	r2, #1
1000869e:	4c43      	ldr	r4, [pc, #268]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086a0:	47a0      	blx	r4
100086a2:	2800      	cmp	r0, #0
100086a4:	d172      	bne.n	1000878c <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100086a6:	466b      	mov	r3, sp
100086a8:	3307      	adds	r3, #7
100086aa:	2200      	movs	r2, #0
100086ac:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100086ae:	4a3e      	ldr	r2, [pc, #248]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086b0:	6811      	ldr	r1, [r2, #0]
100086b2:	7949      	ldrb	r1, [r1, #5]
100086b4:	6852      	ldr	r2, [r2, #4]
100086b6:	7810      	ldrb	r0, [r2, #0]
100086b8:	2201      	movs	r2, #1
100086ba:	4c3c      	ldr	r4, [pc, #240]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086bc:	47a0      	blx	r4
100086be:	1e43      	subs	r3, r0, #1
100086c0:	4198      	sbcs	r0, r3
100086c2:	4240      	negs	r0, r0
100086c4:	e06d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100086c6:	466b      	mov	r3, sp
100086c8:	3307      	adds	r3, #7
100086ca:	2204      	movs	r2, #4
100086cc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100086ce:	4a36      	ldr	r2, [pc, #216]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086d0:	6811      	ldr	r1, [r2, #0]
100086d2:	7909      	ldrb	r1, [r1, #4]
100086d4:	6852      	ldr	r2, [r2, #4]
100086d6:	7810      	ldrb	r0, [r2, #0]
100086d8:	2201      	movs	r2, #1
100086da:	4c34      	ldr	r4, [pc, #208]	; (100087ac <mpu_reset_fifo+0x1f0>)
100086dc:	47a0      	blx	r4
100086de:	2800      	cmp	r0, #0
100086e0:	d157      	bne.n	10008792 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100086e2:	4b31      	ldr	r3, [pc, #196]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086e4:	7c9b      	ldrb	r3, [r3, #18]
100086e6:	2b00      	cmp	r3, #0
100086e8:	d103      	bne.n	100086f2 <mpu_reset_fifo+0x136>
100086ea:	4b2f      	ldr	r3, [pc, #188]	; (100087a8 <mpu_reset_fifo+0x1ec>)
100086ec:	7a9b      	ldrb	r3, [r3, #10]
100086ee:	07db      	lsls	r3, r3, #31
100086f0:	d403      	bmi.n	100086fa <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
100086f2:	2240      	movs	r2, #64	; 0x40
100086f4:	466b      	mov	r3, sp
100086f6:	71da      	strb	r2, [r3, #7]
100086f8:	e002      	b.n	10008700 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100086fa:	2260      	movs	r2, #96	; 0x60
100086fc:	466b      	mov	r3, sp
100086fe:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008700:	4b29      	ldr	r3, [pc, #164]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008702:	681a      	ldr	r2, [r3, #0]
10008704:	7911      	ldrb	r1, [r2, #4]
10008706:	685b      	ldr	r3, [r3, #4]
10008708:	7818      	ldrb	r0, [r3, #0]
1000870a:	466b      	mov	r3, sp
1000870c:	3307      	adds	r3, #7
1000870e:	2201      	movs	r2, #1
10008710:	4c26      	ldr	r4, [pc, #152]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008712:	47a0      	blx	r4
10008714:	2800      	cmp	r0, #0
10008716:	d13f      	bne.n	10008798 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008718:	3032      	adds	r0, #50	; 0x32
1000871a:	4b25      	ldr	r3, [pc, #148]	; (100087b0 <mpu_reset_fifo+0x1f4>)
1000871c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000871e:	4b22      	ldr	r3, [pc, #136]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008720:	7c5b      	ldrb	r3, [r3, #17]
10008722:	2b00      	cmp	r3, #0
10008724:	d003      	beq.n	1000872e <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
10008726:	2201      	movs	r2, #1
10008728:	466b      	mov	r3, sp
1000872a:	71da      	strb	r2, [r3, #7]
1000872c:	e002      	b.n	10008734 <mpu_reset_fifo+0x178>
        else
            data = 0;
1000872e:	2200      	movs	r2, #0
10008730:	466b      	mov	r3, sp
10008732:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008734:	4b1c      	ldr	r3, [pc, #112]	; (100087a8 <mpu_reset_fifo+0x1ec>)
10008736:	681a      	ldr	r2, [r3, #0]
10008738:	7c51      	ldrb	r1, [r2, #17]
1000873a:	685b      	ldr	r3, [r3, #4]
1000873c:	7818      	ldrb	r0, [r3, #0]
1000873e:	466b      	mov	r3, sp
10008740:	3307      	adds	r3, #7
10008742:	2201      	movs	r2, #1
10008744:	4c19      	ldr	r4, [pc, #100]	; (100087ac <mpu_reset_fifo+0x1f0>)
10008746:	47a0      	blx	r4
10008748:	2800      	cmp	r0, #0
1000874a:	d128      	bne.n	1000879e <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000874c:	4a16      	ldr	r2, [pc, #88]	; (100087a8 <mpu_reset_fifo+0x1ec>)
1000874e:	0013      	movs	r3, r2
10008750:	3310      	adds	r3, #16
10008752:	6811      	ldr	r1, [r2, #0]
10008754:	7949      	ldrb	r1, [r1, #5]
10008756:	6852      	ldr	r2, [r2, #4]
10008758:	7810      	ldrb	r0, [r2, #0]
1000875a:	2201      	movs	r2, #1
1000875c:	4c13      	ldr	r4, [pc, #76]	; (100087ac <mpu_reset_fifo+0x1f0>)
1000875e:	47a0      	blx	r4
10008760:	1e43      	subs	r3, r0, #1
10008762:	4198      	sbcs	r0, r3
10008764:	4240      	negs	r0, r0
10008766:	e01c      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008768:	2001      	movs	r0, #1
1000876a:	4240      	negs	r0, r0
1000876c:	e019      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000876e:	2001      	movs	r0, #1
10008770:	4240      	negs	r0, r0
10008772:	e016      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
10008774:	2001      	movs	r0, #1
10008776:	4240      	negs	r0, r0
10008778:	e013      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
1000877a:	2001      	movs	r0, #1
1000877c:	4240      	negs	r0, r0
1000877e:	e010      	b.n	100087a2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e00d      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e00a      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
10008790:	e007      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008792:	2001      	movs	r0, #1
10008794:	4240      	negs	r0, r0
10008796:	e004      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008798:	2001      	movs	r0, #1
1000879a:	4240      	negs	r0, r0
1000879c:	e001      	b.n	100087a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
1000879e:	2001      	movs	r0, #1
100087a0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100087a2:	b002      	add	sp, #8
100087a4:	bd10      	pop	{r4, pc}
100087a6:	46c0      	nop			; (mov r8, r8)
100087a8:	10018444 	.word	0x10018444
100087ac:	1000aab1 	.word	0x1000aab1
100087b0:	10008129 	.word	0x10008129

100087b4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100087b4:	b510      	push	{r4, lr}
100087b6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087b8:	4b24      	ldr	r3, [pc, #144]	; (1000884c <mpu_set_gyro_fsr+0x98>)
100087ba:	7a9b      	ldrb	r3, [r3, #10]
100087bc:	2b00      	cmp	r3, #0
100087be:	d03b      	beq.n	10008838 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100087c0:	23fa      	movs	r3, #250	; 0xfa
100087c2:	005b      	lsls	r3, r3, #1
100087c4:	4298      	cmp	r0, r3
100087c6:	d010      	beq.n	100087ea <mpu_set_gyro_fsr+0x36>
100087c8:	d802      	bhi.n	100087d0 <mpu_set_gyro_fsr+0x1c>
100087ca:	28fa      	cmp	r0, #250	; 0xfa
100087cc:	d009      	beq.n	100087e2 <mpu_set_gyro_fsr+0x2e>
100087ce:	e036      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
100087d0:	23fa      	movs	r3, #250	; 0xfa
100087d2:	009b      	lsls	r3, r3, #2
100087d4:	4298      	cmp	r0, r3
100087d6:	d00c      	beq.n	100087f2 <mpu_set_gyro_fsr+0x3e>
100087d8:	23fa      	movs	r3, #250	; 0xfa
100087da:	00db      	lsls	r3, r3, #3
100087dc:	4298      	cmp	r0, r3
100087de:	d00c      	beq.n	100087fa <mpu_set_gyro_fsr+0x46>
100087e0:	e02d      	b.n	1000883e <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
100087e2:	2200      	movs	r2, #0
100087e4:	466b      	mov	r3, sp
100087e6:	71da      	strb	r2, [r3, #7]
        break;
100087e8:	e00a      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
100087ea:	2208      	movs	r2, #8
100087ec:	466b      	mov	r3, sp
100087ee:	71da      	strb	r2, [r3, #7]
        break;
100087f0:	e006      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
100087f2:	2210      	movs	r2, #16
100087f4:	466b      	mov	r3, sp
100087f6:	71da      	strb	r2, [r3, #7]
        break;
100087f8:	e002      	b.n	10008800 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
100087fa:	2218      	movs	r2, #24
100087fc:	466b      	mov	r3, sp
100087fe:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008800:	466b      	mov	r3, sp
10008802:	3307      	adds	r3, #7
10008804:	781b      	ldrb	r3, [r3, #0]
10008806:	4a11      	ldr	r2, [pc, #68]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008808:	7a12      	ldrb	r2, [r2, #8]
1000880a:	08db      	lsrs	r3, r3, #3
        return 0;
1000880c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000880e:	429a      	cmp	r2, r3
10008810:	d01a      	beq.n	10008848 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008812:	4b0e      	ldr	r3, [pc, #56]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008814:	681a      	ldr	r2, [r3, #0]
10008816:	7991      	ldrb	r1, [r2, #6]
10008818:	685b      	ldr	r3, [r3, #4]
1000881a:	7818      	ldrb	r0, [r3, #0]
1000881c:	466b      	mov	r3, sp
1000881e:	3307      	adds	r3, #7
10008820:	2201      	movs	r2, #1
10008822:	4c0b      	ldr	r4, [pc, #44]	; (10008850 <mpu_set_gyro_fsr+0x9c>)
10008824:	47a0      	blx	r4
10008826:	2800      	cmp	r0, #0
10008828:	d10c      	bne.n	10008844 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000882a:	466b      	mov	r3, sp
1000882c:	3307      	adds	r3, #7
1000882e:	781b      	ldrb	r3, [r3, #0]
10008830:	08db      	lsrs	r3, r3, #3
10008832:	4a06      	ldr	r2, [pc, #24]	; (1000884c <mpu_set_gyro_fsr+0x98>)
10008834:	7213      	strb	r3, [r2, #8]
    return 0;
10008836:	e007      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008838:	2001      	movs	r0, #1
1000883a:	4240      	negs	r0, r0
1000883c:	e004      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
1000883e:	2001      	movs	r0, #1
10008840:	4240      	negs	r0, r0
10008842:	e001      	b.n	10008848 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008844:	2001      	movs	r0, #1
10008846:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008848:	b002      	add	sp, #8
1000884a:	bd10      	pop	{r4, pc}
1000884c:	10018444 	.word	0x10018444
10008850:	1000aab1 	.word	0x1000aab1

10008854 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008854:	4b11      	ldr	r3, [pc, #68]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008856:	7a5b      	ldrb	r3, [r3, #9]
10008858:	2b01      	cmp	r3, #1
1000885a:	d009      	beq.n	10008870 <mpu_get_accel_fsr+0x1c>
1000885c:	2b00      	cmp	r3, #0
1000885e:	d004      	beq.n	1000886a <mpu_get_accel_fsr+0x16>
10008860:	2b02      	cmp	r3, #2
10008862:	d008      	beq.n	10008876 <mpu_get_accel_fsr+0x22>
10008864:	2b03      	cmp	r3, #3
10008866:	d009      	beq.n	1000887c <mpu_get_accel_fsr+0x28>
10008868:	e014      	b.n	10008894 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000886a:	2302      	movs	r3, #2
1000886c:	7003      	strb	r3, [r0, #0]
        break;
1000886e:	e007      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008870:	2304      	movs	r3, #4
10008872:	7003      	strb	r3, [r0, #0]
        break;
10008874:	e004      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
10008876:	2308      	movs	r3, #8
10008878:	7003      	strb	r3, [r0, #0]
        break;
1000887a:	e001      	b.n	10008880 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
1000887c:	2310      	movs	r3, #16
1000887e:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008880:	4b06      	ldr	r3, [pc, #24]	; (1000889c <mpu_get_accel_fsr+0x48>)
10008882:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008884:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008886:	2a00      	cmp	r2, #0
10008888:	d006      	beq.n	10008898 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
1000888a:	7803      	ldrb	r3, [r0, #0]
1000888c:	005b      	lsls	r3, r3, #1
1000888e:	7003      	strb	r3, [r0, #0]
    return 0;
10008890:	2300      	movs	r3, #0
10008892:	e001      	b.n	10008898 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008894:	2301      	movs	r3, #1
10008896:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
10008898:	0018      	movs	r0, r3
1000889a:	4770      	bx	lr
1000889c:	10018444 	.word	0x10018444

100088a0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100088a0:	b510      	push	{r4, lr}
100088a2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100088a4:	4b21      	ldr	r3, [pc, #132]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088a6:	7a9b      	ldrb	r3, [r3, #10]
100088a8:	2b00      	cmp	r3, #0
100088aa:	d035      	beq.n	10008918 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100088ac:	2804      	cmp	r0, #4
100088ae:	d00c      	beq.n	100088ca <mpu_set_accel_fsr+0x2a>
100088b0:	d802      	bhi.n	100088b8 <mpu_set_accel_fsr+0x18>
100088b2:	2802      	cmp	r0, #2
100088b4:	d005      	beq.n	100088c2 <mpu_set_accel_fsr+0x22>
100088b6:	e032      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
100088b8:	2808      	cmp	r0, #8
100088ba:	d00a      	beq.n	100088d2 <mpu_set_accel_fsr+0x32>
100088bc:	2810      	cmp	r0, #16
100088be:	d00c      	beq.n	100088da <mpu_set_accel_fsr+0x3a>
100088c0:	e02d      	b.n	1000891e <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100088c2:	2200      	movs	r2, #0
100088c4:	466b      	mov	r3, sp
100088c6:	71da      	strb	r2, [r3, #7]
        break;
100088c8:	e00a      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100088ca:	2208      	movs	r2, #8
100088cc:	466b      	mov	r3, sp
100088ce:	71da      	strb	r2, [r3, #7]
        break;
100088d0:	e006      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100088d2:	2210      	movs	r2, #16
100088d4:	466b      	mov	r3, sp
100088d6:	71da      	strb	r2, [r3, #7]
        break;
100088d8:	e002      	b.n	100088e0 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100088da:	2218      	movs	r2, #24
100088dc:	466b      	mov	r3, sp
100088de:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088e0:	466b      	mov	r3, sp
100088e2:	3307      	adds	r3, #7
100088e4:	781b      	ldrb	r3, [r3, #0]
100088e6:	4a11      	ldr	r2, [pc, #68]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088e8:	7a52      	ldrb	r2, [r2, #9]
100088ea:	08db      	lsrs	r3, r3, #3
        return 0;
100088ec:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100088ee:	429a      	cmp	r2, r3
100088f0:	d01a      	beq.n	10008928 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100088f2:	4b0e      	ldr	r3, [pc, #56]	; (1000892c <mpu_set_accel_fsr+0x8c>)
100088f4:	681a      	ldr	r2, [r3, #0]
100088f6:	79d1      	ldrb	r1, [r2, #7]
100088f8:	685b      	ldr	r3, [r3, #4]
100088fa:	7818      	ldrb	r0, [r3, #0]
100088fc:	466b      	mov	r3, sp
100088fe:	3307      	adds	r3, #7
10008900:	2201      	movs	r2, #1
10008902:	4c0b      	ldr	r4, [pc, #44]	; (10008930 <mpu_set_accel_fsr+0x90>)
10008904:	47a0      	blx	r4
10008906:	2800      	cmp	r0, #0
10008908:	d10c      	bne.n	10008924 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000890a:	466b      	mov	r3, sp
1000890c:	3307      	adds	r3, #7
1000890e:	781b      	ldrb	r3, [r3, #0]
10008910:	08db      	lsrs	r3, r3, #3
10008912:	4a06      	ldr	r2, [pc, #24]	; (1000892c <mpu_set_accel_fsr+0x8c>)
10008914:	7253      	strb	r3, [r2, #9]
    return 0;
10008916:	e007      	b.n	10008928 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008918:	2001      	movs	r0, #1
1000891a:	4240      	negs	r0, r0
1000891c:	e004      	b.n	10008928 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000891e:	2001      	movs	r0, #1
10008920:	4240      	negs	r0, r0
10008922:	e001      	b.n	10008928 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008924:	2001      	movs	r0, #1
10008926:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008928:	b002      	add	sp, #8
1000892a:	bd10      	pop	{r4, pc}
1000892c:	10018444 	.word	0x10018444
10008930:	1000aab1 	.word	0x1000aab1

10008934 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008934:	b510      	push	{r4, lr}
10008936:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008938:	4b2b      	ldr	r3, [pc, #172]	; (100089e8 <mpu_set_lpf+0xb4>)
1000893a:	7a9b      	ldrb	r3, [r3, #10]
1000893c:	2b00      	cmp	r3, #0
1000893e:	d049      	beq.n	100089d4 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008940:	28bb      	cmp	r0, #187	; 0xbb
10008942:	d903      	bls.n	1000894c <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008944:	2201      	movs	r2, #1
10008946:	466b      	mov	r3, sp
10008948:	71da      	strb	r2, [r3, #7]
1000894a:	e01a      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
1000894c:	2861      	cmp	r0, #97	; 0x61
1000894e:	d903      	bls.n	10008958 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008950:	2202      	movs	r2, #2
10008952:	466b      	mov	r3, sp
10008954:	71da      	strb	r2, [r3, #7]
10008956:	e014      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008958:	2829      	cmp	r0, #41	; 0x29
1000895a:	d903      	bls.n	10008964 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
1000895c:	2203      	movs	r2, #3
1000895e:	466b      	mov	r3, sp
10008960:	71da      	strb	r2, [r3, #7]
10008962:	e00e      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008964:	2813      	cmp	r0, #19
10008966:	d903      	bls.n	10008970 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008968:	2204      	movs	r2, #4
1000896a:	466b      	mov	r3, sp
1000896c:	71da      	strb	r2, [r3, #7]
1000896e:	e008      	b.n	10008982 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008970:	2809      	cmp	r0, #9
10008972:	d903      	bls.n	1000897c <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008974:	2205      	movs	r2, #5
10008976:	466b      	mov	r3, sp
10008978:	71da      	strb	r2, [r3, #7]
1000897a:	e002      	b.n	10008982 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
1000897c:	2206      	movs	r2, #6
1000897e:	466b      	mov	r3, sp
10008980:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
10008982:	4b19      	ldr	r3, [pc, #100]	; (100089e8 <mpu_set_lpf+0xb4>)
10008984:	7ada      	ldrb	r2, [r3, #11]
10008986:	466b      	mov	r3, sp
10008988:	3307      	adds	r3, #7
1000898a:	781b      	ldrb	r3, [r3, #0]
        return 0;
1000898c:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000898e:	429a      	cmp	r2, r3
10008990:	d028      	beq.n	100089e4 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008992:	4b15      	ldr	r3, [pc, #84]	; (100089e8 <mpu_set_lpf+0xb4>)
10008994:	681a      	ldr	r2, [r3, #0]
10008996:	7891      	ldrb	r1, [r2, #2]
10008998:	685b      	ldr	r3, [r3, #4]
1000899a:	7818      	ldrb	r0, [r3, #0]
1000899c:	466b      	mov	r3, sp
1000899e:	3307      	adds	r3, #7
100089a0:	2201      	movs	r2, #1
100089a2:	4c12      	ldr	r4, [pc, #72]	; (100089ec <mpu_set_lpf+0xb8>)
100089a4:	47a0      	blx	r4
100089a6:	2800      	cmp	r0, #0
100089a8:	d117      	bne.n	100089da <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100089aa:	466b      	mov	r3, sp
100089ac:	3307      	adds	r3, #7
100089ae:	7819      	ldrb	r1, [r3, #0]
100089b0:	2240      	movs	r2, #64	; 0x40
100089b2:	430a      	orrs	r2, r1
100089b4:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100089b6:	4a0c      	ldr	r2, [pc, #48]	; (100089e8 <mpu_set_lpf+0xb4>)
100089b8:	6811      	ldr	r1, [r2, #0]
100089ba:	7a09      	ldrb	r1, [r1, #8]
100089bc:	6852      	ldr	r2, [r2, #4]
100089be:	7810      	ldrb	r0, [r2, #0]
100089c0:	2201      	movs	r2, #1
100089c2:	4c0a      	ldr	r4, [pc, #40]	; (100089ec <mpu_set_lpf+0xb8>)
100089c4:	47a0      	blx	r4
100089c6:	2800      	cmp	r0, #0
100089c8:	d10a      	bne.n	100089e0 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100089ca:	466b      	mov	r3, sp
100089cc:	79da      	ldrb	r2, [r3, #7]
100089ce:	4b06      	ldr	r3, [pc, #24]	; (100089e8 <mpu_set_lpf+0xb4>)
100089d0:	72da      	strb	r2, [r3, #11]
    return 0;
100089d2:	e007      	b.n	100089e4 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100089d4:	2001      	movs	r0, #1
100089d6:	4240      	negs	r0, r0
100089d8:	e004      	b.n	100089e4 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100089da:	2001      	movs	r0, #1
100089dc:	4240      	negs	r0, r0
100089de:	e001      	b.n	100089e4 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100089e0:	2001      	movs	r0, #1
100089e2:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100089e4:	b002      	add	sp, #8
100089e6:	bd10      	pop	{r4, pc}
100089e8:	10018444 	.word	0x10018444
100089ec:	1000aab1 	.word	0x1000aab1

100089f0 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100089f0:	2324      	movs	r3, #36	; 0x24
100089f2:	4a05      	ldr	r2, [pc, #20]	; (10008a08 <mpu_get_sample_rate+0x18>)
100089f4:	5cd3      	ldrb	r3, [r2, r3]
100089f6:	2b00      	cmp	r3, #0
100089f8:	d103      	bne.n	10008a02 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100089fa:	89d3      	ldrh	r3, [r2, #14]
100089fc:	8003      	strh	r3, [r0, #0]
    return 0;
100089fe:	2000      	movs	r0, #0
10008a00:	e001      	b.n	10008a06 <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008a02:	2001      	movs	r0, #1
10008a04:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008a06:	4770      	bx	lr
10008a08:	10018444 	.word	0x10018444

10008a0c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008a0c:	b530      	push	{r4, r5, lr}
10008a0e:	b083      	sub	sp, #12
10008a10:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008a12:	d020      	beq.n	10008a56 <mpu_set_compass_sample_rate+0x4a>
10008a14:	4b17      	ldr	r3, [pc, #92]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a16:	89d8      	ldrh	r0, [r3, #14]
10008a18:	4281      	cmp	r1, r0
10008a1a:	d81f      	bhi.n	10008a5c <mpu_set_compass_sample_rate+0x50>
10008a1c:	2964      	cmp	r1, #100	; 0x64
10008a1e:	d820      	bhi.n	10008a62 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008a20:	466b      	mov	r3, sp
10008a22:	1ddc      	adds	r4, r3, #7
10008a24:	4b14      	ldr	r3, [pc, #80]	; (10008a78 <mpu_set_compass_sample_rate+0x6c>)
10008a26:	4798      	blx	r3
10008a28:	3801      	subs	r0, #1
10008a2a:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008a2c:	4b11      	ldr	r3, [pc, #68]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a2e:	2224      	movs	r2, #36	; 0x24
10008a30:	6819      	ldr	r1, [r3, #0]
10008a32:	5c89      	ldrb	r1, [r1, r2]
10008a34:	685b      	ldr	r3, [r3, #4]
10008a36:	7818      	ldrb	r0, [r3, #0]
10008a38:	0023      	movs	r3, r4
10008a3a:	3a23      	subs	r2, #35	; 0x23
10008a3c:	4c0f      	ldr	r4, [pc, #60]	; (10008a7c <mpu_set_compass_sample_rate+0x70>)
10008a3e:	47a0      	blx	r4
10008a40:	1e04      	subs	r4, r0, #0
10008a42:	d111      	bne.n	10008a68 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008a44:	4d0b      	ldr	r5, [pc, #44]	; (10008a74 <mpu_set_compass_sample_rate+0x68>)
10008a46:	89e8      	ldrh	r0, [r5, #14]
10008a48:	466b      	mov	r3, sp
10008a4a:	79d9      	ldrb	r1, [r3, #7]
10008a4c:	3101      	adds	r1, #1
10008a4e:	4b0c      	ldr	r3, [pc, #48]	; (10008a80 <mpu_set_compass_sample_rate+0x74>)
10008a50:	4798      	blx	r3
10008a52:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008a54:	e00a      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008a56:	2401      	movs	r4, #1
10008a58:	4264      	negs	r4, r4
10008a5a:	e007      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a5c:	2401      	movs	r4, #1
10008a5e:	4264      	negs	r4, r4
10008a60:	e004      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>
10008a62:	2401      	movs	r4, #1
10008a64:	4264      	negs	r4, r4
10008a66:	e001      	b.n	10008a6c <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008a68:	2401      	movs	r4, #1
10008a6a:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008a6c:	0020      	movs	r0, r4
10008a6e:	b003      	add	sp, #12
10008a70:	bd30      	pop	{r4, r5, pc}
10008a72:	46c0      	nop			; (mov r8, r8)
10008a74:	10018444 	.word	0x10018444
10008a78:	10012fe5 	.word	0x10012fe5
10008a7c:	1000aab1 	.word	0x1000aab1
10008a80:	100130f9 	.word	0x100130f9

10008a84 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008a84:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a86:	2324      	movs	r3, #36	; 0x24
10008a88:	4a16      	ldr	r2, [pc, #88]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008a8a:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008a8c:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008a8e:	2b00      	cmp	r3, #0
10008a90:	d126      	bne.n	10008ae0 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008a92:	7a94      	ldrb	r4, [r2, #10]
10008a94:	2c00      	cmp	r4, #0
10008a96:	d015      	beq.n	10008ac4 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008a98:	2301      	movs	r3, #1
10008a9a:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008a9c:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008a9e:	4004      	ands	r4, r0
10008aa0:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008aa2:	1b04      	subs	r4, r0, r4
10008aa4:	1e63      	subs	r3, r4, #1
10008aa6:	419c      	sbcs	r4, r3
10008aa8:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008aaa:	2800      	cmp	r0, #0
10008aac:	d10d      	bne.n	10008aca <mpu_configure_fifo+0x46>
10008aae:	7d13      	ldrb	r3, [r2, #20]
10008ab0:	2b00      	cmp	r3, #0
10008ab2:	d112      	bne.n	10008ada <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008ab4:	4b0c      	ldr	r3, [pc, #48]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ab6:	4798      	blx	r3
10008ab8:	e012      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008aba:	4b0a      	ldr	r3, [pc, #40]	; (10008ae4 <mpu_configure_fifo+0x60>)
10008abc:	741d      	strb	r5, [r3, #16]
                return -1;
10008abe:	2401      	movs	r4, #1
10008ac0:	4264      	negs	r4, r4
10008ac2:	e00d      	b.n	10008ae0 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008ac4:	2401      	movs	r4, #1
10008ac6:	4264      	negs	r4, r4
10008ac8:	e00a      	b.n	10008ae0 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008aca:	2001      	movs	r0, #1
10008acc:	4b06      	ldr	r3, [pc, #24]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ace:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008ad0:	4b06      	ldr	r3, [pc, #24]	; (10008aec <mpu_configure_fifo+0x68>)
10008ad2:	4798      	blx	r3
10008ad4:	2800      	cmp	r0, #0
10008ad6:	d003      	beq.n	10008ae0 <mpu_configure_fifo+0x5c>
10008ad8:	e7ef      	b.n	10008aba <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008ada:	2001      	movs	r0, #1
10008adc:	4b02      	ldr	r3, [pc, #8]	; (10008ae8 <mpu_configure_fifo+0x64>)
10008ade:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008ae0:	0020      	movs	r0, r4
10008ae2:	bd70      	pop	{r4, r5, r6, pc}
10008ae4:	10018444 	.word	0x10018444
10008ae8:	10008461 	.word	0x10008461
10008aec:	100085bd 	.word	0x100085bd

10008af0 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008af2:	464f      	mov	r7, r9
10008af4:	b480      	push	{r7}
10008af6:	b088      	sub	sp, #32
10008af8:	9001      	str	r0, [sp, #4]
10008afa:	9103      	str	r1, [sp, #12]
10008afc:	9202      	str	r2, [sp, #8]
10008afe:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008b00:	2324      	movs	r3, #36	; 0x24
10008b02:	4a69      	ldr	r2, [pc, #420]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b04:	5cd3      	ldrb	r3, [r2, r3]
10008b06:	2b00      	cmp	r3, #0
10008b08:	d000      	beq.n	10008b0c <mpu_read_fifo+0x1c>
10008b0a:	e0b6      	b.n	10008c7a <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008b0c:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008b0e:	7a93      	ldrb	r3, [r2, #10]
10008b10:	2b00      	cmp	r3, #0
10008b12:	d100      	bne.n	10008b16 <mpu_read_fifo+0x26>
10008b14:	e0b4      	b.n	10008c80 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008b16:	7c13      	ldrb	r3, [r2, #16]
10008b18:	2b00      	cmp	r3, #0
10008b1a:	d100      	bne.n	10008b1e <mpu_read_fifo+0x2e>
10008b1c:	e0b3      	b.n	10008c86 <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008b1e:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008b20:	0fd2      	lsrs	r2, r2, #31
10008b22:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008b24:	069a      	lsls	r2, r3, #26
10008b26:	d501      	bpl.n	10008b2c <mpu_read_fifo+0x3c>
        packet_size += 2;
10008b28:	1caa      	adds	r2, r5, #2
10008b2a:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008b2c:	06da      	lsls	r2, r3, #27
10008b2e:	d501      	bpl.n	10008b34 <mpu_read_fifo+0x44>
        packet_size += 2;
10008b30:	1caa      	adds	r2, r5, #2
10008b32:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008b34:	071b      	lsls	r3, r3, #28
10008b36:	d501      	bpl.n	10008b3c <mpu_read_fifo+0x4c>
        packet_size += 6;
10008b38:	1dab      	adds	r3, r5, #6
10008b3a:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008b3c:	4b5a      	ldr	r3, [pc, #360]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b3e:	681a      	ldr	r2, [r3, #0]
10008b40:	7b11      	ldrb	r1, [r2, #12]
10008b42:	685b      	ldr	r3, [r3, #4]
10008b44:	7818      	ldrb	r0, [r3, #0]
10008b46:	ab05      	add	r3, sp, #20
10008b48:	2202      	movs	r2, #2
10008b4a:	4c58      	ldr	r4, [pc, #352]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b4c:	47a0      	blx	r4
10008b4e:	1e04      	subs	r4, r0, #0
10008b50:	d000      	beq.n	10008b54 <mpu_read_fifo+0x64>
10008b52:	e09b      	b.n	10008c8c <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008b54:	aa05      	add	r2, sp, #20
10008b56:	7813      	ldrb	r3, [r2, #0]
10008b58:	021b      	lsls	r3, r3, #8
10008b5a:	7852      	ldrb	r2, [r2, #1]
10008b5c:	431a      	orrs	r2, r3
10008b5e:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008b60:	b2af      	uxth	r7, r5
10008b62:	42ba      	cmp	r2, r7
10008b64:	d200      	bcs.n	10008b68 <mpu_read_fifo+0x78>
10008b66:	e099      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008b68:	4b4f      	ldr	r3, [pc, #316]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b6a:	685a      	ldr	r2, [r3, #4]
10008b6c:	8853      	ldrh	r3, [r2, #2]
10008b6e:	085b      	lsrs	r3, r3, #1
10008b70:	4599      	cmp	r9, r3
10008b72:	d913      	bls.n	10008b9c <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008b74:	4b4c      	ldr	r3, [pc, #304]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008b76:	681b      	ldr	r3, [r3, #0]
10008b78:	7cd9      	ldrb	r1, [r3, #19]
10008b7a:	7810      	ldrb	r0, [r2, #0]
10008b7c:	ab05      	add	r3, sp, #20
10008b7e:	2201      	movs	r2, #1
10008b80:	4c4a      	ldr	r4, [pc, #296]	; (10008cac <mpu_read_fifo+0x1bc>)
10008b82:	47a0      	blx	r4
10008b84:	2800      	cmp	r0, #0
10008b86:	d000      	beq.n	10008b8a <mpu_read_fifo+0x9a>
10008b88:	e083      	b.n	10008c92 <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008b8a:	ab05      	add	r3, sp, #20
10008b8c:	781b      	ldrb	r3, [r3, #0]
10008b8e:	06db      	lsls	r3, r3, #27
10008b90:	d504      	bpl.n	10008b9c <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008b92:	4b47      	ldr	r3, [pc, #284]	; (10008cb0 <mpu_read_fifo+0x1c0>)
10008b94:	4798      	blx	r3
            return -2;
10008b96:	2402      	movs	r4, #2
10008b98:	4264      	negs	r4, r4
10008b9a:	e07f      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008b9c:	9802      	ldr	r0, [sp, #8]
10008b9e:	4b45      	ldr	r3, [pc, #276]	; (10008cb4 <mpu_read_fifo+0x1c4>)
10008ba0:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008ba2:	4b41      	ldr	r3, [pc, #260]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008ba4:	681a      	ldr	r2, [r3, #0]
10008ba6:	7b51      	ldrb	r1, [r2, #13]
10008ba8:	685b      	ldr	r3, [r3, #4]
10008baa:	7818      	ldrb	r0, [r3, #0]
10008bac:	ab05      	add	r3, sp, #20
10008bae:	002a      	movs	r2, r5
10008bb0:	4c3e      	ldr	r4, [pc, #248]	; (10008cac <mpu_read_fifo+0x1bc>)
10008bb2:	47a0      	blx	r4
10008bb4:	1e04      	subs	r4, r0, #0
10008bb6:	d16f      	bne.n	10008c98 <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008bb8:	0029      	movs	r1, r5
10008bba:	4648      	mov	r0, r9
10008bbc:	4b3e      	ldr	r3, [pc, #248]	; (10008cb8 <mpu_read_fifo+0x1c8>)
10008bbe:	4798      	blx	r3
10008bc0:	3801      	subs	r0, #1
10008bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bc4:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008bc6:	2300      	movs	r3, #0
10008bc8:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bca:	2d00      	cmp	r5, #0
10008bcc:	d01a      	beq.n	10008c04 <mpu_read_fifo+0x114>
10008bce:	4b36      	ldr	r3, [pc, #216]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008bd0:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008bd2:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008bd4:	0712      	lsls	r2, r2, #28
10008bd6:	d515      	bpl.n	10008c04 <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008bd8:	ab05      	add	r3, sp, #20
10008bda:	781a      	ldrb	r2, [r3, #0]
10008bdc:	0212      	lsls	r2, r2, #8
10008bde:	7859      	ldrb	r1, [r3, #1]
10008be0:	430a      	orrs	r2, r1
10008be2:	9803      	ldr	r0, [sp, #12]
10008be4:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008be6:	789a      	ldrb	r2, [r3, #2]
10008be8:	0212      	lsls	r2, r2, #8
10008bea:	78d9      	ldrb	r1, [r3, #3]
10008bec:	430a      	orrs	r2, r1
10008bee:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008bf0:	791a      	ldrb	r2, [r3, #4]
10008bf2:	0212      	lsls	r2, r2, #8
10008bf4:	795b      	ldrb	r3, [r3, #5]
10008bf6:	4313      	orrs	r3, r2
10008bf8:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008bfa:	7832      	ldrb	r2, [r6, #0]
10008bfc:	2308      	movs	r3, #8
10008bfe:	4313      	orrs	r3, r2
10008c00:	7033      	strb	r3, [r6, #0]
        index += 6;
10008c02:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008c04:	42bb      	cmp	r3, r7
10008c06:	d049      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c08:	4a27      	ldr	r2, [pc, #156]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c0a:	7c12      	ldrb	r2, [r2, #16]
10008c0c:	0652      	lsls	r2, r2, #25
10008c0e:	d50f      	bpl.n	10008c30 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008c10:	a905      	add	r1, sp, #20
10008c12:	5cca      	ldrb	r2, [r1, r3]
10008c14:	0212      	lsls	r2, r2, #8
10008c16:	18c9      	adds	r1, r1, r3
10008c18:	7849      	ldrb	r1, [r1, #1]
10008c1a:	430a      	orrs	r2, r1
10008c1c:	9901      	ldr	r1, [sp, #4]
10008c1e:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008c20:	7831      	ldrb	r1, [r6, #0]
10008c22:	2240      	movs	r2, #64	; 0x40
10008c24:	430a      	orrs	r2, r1
10008c26:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c28:	3302      	adds	r3, #2
10008c2a:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008c2c:	429f      	cmp	r7, r3
10008c2e:	d035      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c30:	4a1d      	ldr	r2, [pc, #116]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c32:	7c12      	ldrb	r2, [r2, #16]
10008c34:	0692      	lsls	r2, r2, #26
10008c36:	d50f      	bpl.n	10008c58 <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008c38:	a905      	add	r1, sp, #20
10008c3a:	5cca      	ldrb	r2, [r1, r3]
10008c3c:	0212      	lsls	r2, r2, #8
10008c3e:	18c9      	adds	r1, r1, r3
10008c40:	7849      	ldrb	r1, [r1, #1]
10008c42:	430a      	orrs	r2, r1
10008c44:	9901      	ldr	r1, [sp, #4]
10008c46:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008c48:	7831      	ldrb	r1, [r6, #0]
10008c4a:	2220      	movs	r2, #32
10008c4c:	430a      	orrs	r2, r1
10008c4e:	7032      	strb	r2, [r6, #0]
        index += 2;
10008c50:	3302      	adds	r3, #2
10008c52:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008c54:	429f      	cmp	r7, r3
10008c56:	d021      	beq.n	10008c9c <mpu_read_fifo+0x1ac>
10008c58:	4a13      	ldr	r2, [pc, #76]	; (10008ca8 <mpu_read_fifo+0x1b8>)
10008c5a:	7c12      	ldrb	r2, [r2, #16]
10008c5c:	06d2      	lsls	r2, r2, #27
10008c5e:	d51d      	bpl.n	10008c9c <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008c60:	a905      	add	r1, sp, #20
10008c62:	5cca      	ldrb	r2, [r1, r3]
10008c64:	0212      	lsls	r2, r2, #8
10008c66:	18cb      	adds	r3, r1, r3
10008c68:	785b      	ldrb	r3, [r3, #1]
10008c6a:	4313      	orrs	r3, r2
10008c6c:	9a01      	ldr	r2, [sp, #4]
10008c6e:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008c70:	7832      	ldrb	r2, [r6, #0]
10008c72:	2310      	movs	r3, #16
10008c74:	4313      	orrs	r3, r2
10008c76:	7033      	strb	r3, [r6, #0]
10008c78:	e010      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008c7a:	2401      	movs	r4, #1
10008c7c:	4264      	negs	r4, r4
10008c7e:	e00d      	b.n	10008c9c <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008c80:	2401      	movs	r4, #1
10008c82:	4264      	negs	r4, r4
10008c84:	e00a      	b.n	10008c9c <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008c86:	2401      	movs	r4, #1
10008c88:	4264      	negs	r4, r4
10008c8a:	e007      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008c8c:	2401      	movs	r4, #1
10008c8e:	4264      	negs	r4, r4
10008c90:	e004      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008c92:	2401      	movs	r4, #1
10008c94:	4264      	negs	r4, r4
10008c96:	e001      	b.n	10008c9c <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008c98:	2401      	movs	r4, #1
10008c9a:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008c9c:	0020      	movs	r0, r4
10008c9e:	b008      	add	sp, #32
10008ca0:	bc04      	pop	{r2}
10008ca2:	4691      	mov	r9, r2
10008ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ca6:	46c0      	nop			; (mov r8, r8)
10008ca8:	10018444 	.word	0x10018444
10008cac:	1000ab0d 	.word	0x1000ab0d
10008cb0:	100085bd 	.word	0x100085bd
10008cb4:	1000b40d 	.word	0x1000b40d
10008cb8:	100130f9 	.word	0x100130f9

10008cbc <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008cbc:	b530      	push	{r4, r5, lr}
10008cbe:	b083      	sub	sp, #12
10008cc0:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008cc2:	4b59      	ldr	r3, [pc, #356]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cc4:	7c9b      	ldrb	r3, [r3, #18]
10008cc6:	4283      	cmp	r3, r0
10008cc8:	d100      	bne.n	10008ccc <mpu_set_bypass+0x10>
10008cca:	e097      	b.n	10008dfc <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008ccc:	2800      	cmp	r0, #0
10008cce:	d042      	beq.n	10008d56 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cd0:	4b55      	ldr	r3, [pc, #340]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cd2:	681a      	ldr	r2, [r3, #0]
10008cd4:	7911      	ldrb	r1, [r2, #4]
10008cd6:	685b      	ldr	r3, [r3, #4]
10008cd8:	7818      	ldrb	r0, [r3, #0]
10008cda:	466b      	mov	r3, sp
10008cdc:	3307      	adds	r3, #7
10008cde:	2201      	movs	r2, #1
10008ce0:	4d52      	ldr	r5, [pc, #328]	; (10008e2c <mpu_set_bypass+0x170>)
10008ce2:	47a8      	blx	r5
10008ce4:	2800      	cmp	r0, #0
10008ce6:	d000      	beq.n	10008cea <mpu_set_bypass+0x2e>
10008ce8:	e08a      	b.n	10008e00 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008cea:	466b      	mov	r3, sp
10008cec:	3307      	adds	r3, #7
10008cee:	781a      	ldrb	r2, [r3, #0]
10008cf0:	2120      	movs	r1, #32
10008cf2:	438a      	bics	r2, r1
10008cf4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cf6:	4a4c      	ldr	r2, [pc, #304]	; (10008e28 <mpu_set_bypass+0x16c>)
10008cf8:	6811      	ldr	r1, [r2, #0]
10008cfa:	7909      	ldrb	r1, [r1, #4]
10008cfc:	6852      	ldr	r2, [r2, #4]
10008cfe:	7810      	ldrb	r0, [r2, #0]
10008d00:	2201      	movs	r2, #1
10008d02:	4d4b      	ldr	r5, [pc, #300]	; (10008e30 <mpu_set_bypass+0x174>)
10008d04:	47a8      	blx	r5
10008d06:	2800      	cmp	r0, #0
10008d08:	d17d      	bne.n	10008e06 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008d0a:	3003      	adds	r0, #3
10008d0c:	4b49      	ldr	r3, [pc, #292]	; (10008e34 <mpu_set_bypass+0x178>)
10008d0e:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008d10:	2202      	movs	r2, #2
10008d12:	466b      	mov	r3, sp
10008d14:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008d16:	2322      	movs	r3, #34	; 0x22
10008d18:	4a43      	ldr	r2, [pc, #268]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d1a:	5cd3      	ldrb	r3, [r2, r3]
10008d1c:	2b00      	cmp	r3, #0
10008d1e:	d002      	beq.n	10008d26 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008d20:	2282      	movs	r2, #130	; 0x82
10008d22:	466b      	mov	r3, sp
10008d24:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d26:	2323      	movs	r3, #35	; 0x23
10008d28:	4a3f      	ldr	r2, [pc, #252]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d2a:	5cd3      	ldrb	r3, [r2, r3]
10008d2c:	2b00      	cmp	r3, #0
10008d2e:	d005      	beq.n	10008d3c <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d30:	466b      	mov	r3, sp
10008d32:	1dda      	adds	r2, r3, #7
10008d34:	79d9      	ldrb	r1, [r3, #7]
10008d36:	2330      	movs	r3, #48	; 0x30
10008d38:	430b      	orrs	r3, r1
10008d3a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d3c:	4b3a      	ldr	r3, [pc, #232]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d3e:	681a      	ldr	r2, [r3, #0]
10008d40:	7dd1      	ldrb	r1, [r2, #23]
10008d42:	685b      	ldr	r3, [r3, #4]
10008d44:	7818      	ldrb	r0, [r3, #0]
10008d46:	466b      	mov	r3, sp
10008d48:	3307      	adds	r3, #7
10008d4a:	2201      	movs	r2, #1
10008d4c:	4d38      	ldr	r5, [pc, #224]	; (10008e30 <mpu_set_bypass+0x174>)
10008d4e:	47a8      	blx	r5
10008d50:	2800      	cmp	r0, #0
10008d52:	d04f      	beq.n	10008df4 <mpu_set_bypass+0x138>
10008d54:	e05a      	b.n	10008e0c <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d56:	4b34      	ldr	r3, [pc, #208]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d58:	681a      	ldr	r2, [r3, #0]
10008d5a:	7911      	ldrb	r1, [r2, #4]
10008d5c:	685b      	ldr	r3, [r3, #4]
10008d5e:	7818      	ldrb	r0, [r3, #0]
10008d60:	466b      	mov	r3, sp
10008d62:	3307      	adds	r3, #7
10008d64:	2201      	movs	r2, #1
10008d66:	4d31      	ldr	r5, [pc, #196]	; (10008e2c <mpu_set_bypass+0x170>)
10008d68:	47a8      	blx	r5
10008d6a:	2800      	cmp	r0, #0
10008d6c:	d151      	bne.n	10008e12 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008d6e:	4b2e      	ldr	r3, [pc, #184]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d70:	7a9b      	ldrb	r3, [r3, #10]
10008d72:	07db      	lsls	r3, r3, #31
10008d74:	d506      	bpl.n	10008d84 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008d76:	466b      	mov	r3, sp
10008d78:	1dda      	adds	r2, r3, #7
10008d7a:	79d9      	ldrb	r1, [r3, #7]
10008d7c:	2320      	movs	r3, #32
10008d7e:	430b      	orrs	r3, r1
10008d80:	7013      	strb	r3, [r2, #0]
10008d82:	e005      	b.n	10008d90 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008d84:	466b      	mov	r3, sp
10008d86:	1dda      	adds	r2, r3, #7
10008d88:	79db      	ldrb	r3, [r3, #7]
10008d8a:	2120      	movs	r1, #32
10008d8c:	438b      	bics	r3, r1
10008d8e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008d90:	4b25      	ldr	r3, [pc, #148]	; (10008e28 <mpu_set_bypass+0x16c>)
10008d92:	681a      	ldr	r2, [r3, #0]
10008d94:	7911      	ldrb	r1, [r2, #4]
10008d96:	685b      	ldr	r3, [r3, #4]
10008d98:	7818      	ldrb	r0, [r3, #0]
10008d9a:	466b      	mov	r3, sp
10008d9c:	3307      	adds	r3, #7
10008d9e:	2201      	movs	r2, #1
10008da0:	4d23      	ldr	r5, [pc, #140]	; (10008e30 <mpu_set_bypass+0x174>)
10008da2:	47a8      	blx	r5
10008da4:	2800      	cmp	r0, #0
10008da6:	d137      	bne.n	10008e18 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008da8:	3003      	adds	r0, #3
10008daa:	4b22      	ldr	r3, [pc, #136]	; (10008e34 <mpu_set_bypass+0x178>)
10008dac:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008dae:	2322      	movs	r3, #34	; 0x22
10008db0:	4a1d      	ldr	r2, [pc, #116]	; (10008e28 <mpu_set_bypass+0x16c>)
10008db2:	5cd3      	ldrb	r3, [r2, r3]
10008db4:	2b00      	cmp	r3, #0
10008db6:	d003      	beq.n	10008dc0 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008db8:	2280      	movs	r2, #128	; 0x80
10008dba:	466b      	mov	r3, sp
10008dbc:	71da      	strb	r2, [r3, #7]
10008dbe:	e002      	b.n	10008dc6 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008dc0:	2200      	movs	r2, #0
10008dc2:	466b      	mov	r3, sp
10008dc4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008dc6:	2323      	movs	r3, #35	; 0x23
10008dc8:	4a17      	ldr	r2, [pc, #92]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dca:	5cd3      	ldrb	r3, [r2, r3]
10008dcc:	2b00      	cmp	r3, #0
10008dce:	d005      	beq.n	10008ddc <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008dd0:	466b      	mov	r3, sp
10008dd2:	1dda      	adds	r2, r3, #7
10008dd4:	79d9      	ldrb	r1, [r3, #7]
10008dd6:	2330      	movs	r3, #48	; 0x30
10008dd8:	430b      	orrs	r3, r1
10008dda:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ddc:	4b12      	ldr	r3, [pc, #72]	; (10008e28 <mpu_set_bypass+0x16c>)
10008dde:	681a      	ldr	r2, [r3, #0]
10008de0:	7dd1      	ldrb	r1, [r2, #23]
10008de2:	685b      	ldr	r3, [r3, #4]
10008de4:	7818      	ldrb	r0, [r3, #0]
10008de6:	466b      	mov	r3, sp
10008de8:	3307      	adds	r3, #7
10008dea:	2201      	movs	r2, #1
10008dec:	4d10      	ldr	r5, [pc, #64]	; (10008e30 <mpu_set_bypass+0x174>)
10008dee:	47a8      	blx	r5
10008df0:	2800      	cmp	r0, #0
10008df2:	d114      	bne.n	10008e1e <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008df4:	4b0c      	ldr	r3, [pc, #48]	; (10008e28 <mpu_set_bypass+0x16c>)
10008df6:	749c      	strb	r4, [r3, #18]
    return 0;
10008df8:	2000      	movs	r0, #0
10008dfa:	e012      	b.n	10008e22 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008dfc:	2000      	movs	r0, #0
10008dfe:	e010      	b.n	10008e22 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e00:	2001      	movs	r0, #1
10008e02:	4240      	negs	r0, r0
10008e04:	e00d      	b.n	10008e22 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e06:	2001      	movs	r0, #1
10008e08:	4240      	negs	r0, r0
10008e0a:	e00a      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e0c:	2001      	movs	r0, #1
10008e0e:	4240      	negs	r0, r0
10008e10:	e007      	b.n	10008e22 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e12:	2001      	movs	r0, #1
10008e14:	4240      	negs	r0, r0
10008e16:	e004      	b.n	10008e22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008e18:	2001      	movs	r0, #1
10008e1a:	4240      	negs	r0, r0
10008e1c:	e001      	b.n	10008e22 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008e1e:	2001      	movs	r0, #1
10008e20:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008e22:	b003      	add	sp, #12
10008e24:	bd30      	pop	{r4, r5, pc}
10008e26:	46c0      	nop			; (mov r8, r8)
10008e28:	10018444 	.word	0x10018444
10008e2c:	1000ab0d 	.word	0x1000ab0d
10008e30:	1000aab1 	.word	0x1000aab1
10008e34:	10008129 	.word	0x10008129

10008e38 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008e38:	b530      	push	{r4, r5, lr}
10008e3a:	b083      	sub	sp, #12
10008e3c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008e3e:	2323      	movs	r3, #35	; 0x23
10008e40:	4a1c      	ldr	r2, [pc, #112]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e42:	5cd3      	ldrb	r3, [r2, r3]
10008e44:	4283      	cmp	r3, r0
10008e46:	d02e      	beq.n	10008ea6 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008e48:	2800      	cmp	r0, #0
10008e4a:	d003      	beq.n	10008e54 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008e4c:	2230      	movs	r2, #48	; 0x30
10008e4e:	466b      	mov	r3, sp
10008e50:	71da      	strb	r2, [r3, #7]
10008e52:	e002      	b.n	10008e5a <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008e54:	2200      	movs	r2, #0
10008e56:	466b      	mov	r3, sp
10008e58:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008e5a:	4b16      	ldr	r3, [pc, #88]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e5c:	7c9b      	ldrb	r3, [r3, #18]
10008e5e:	2b00      	cmp	r3, #0
10008e60:	d005      	beq.n	10008e6e <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008e62:	466b      	mov	r3, sp
10008e64:	1dda      	adds	r2, r3, #7
10008e66:	79d9      	ldrb	r1, [r3, #7]
10008e68:	2302      	movs	r3, #2
10008e6a:	430b      	orrs	r3, r1
10008e6c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008e6e:	2322      	movs	r3, #34	; 0x22
10008e70:	4a10      	ldr	r2, [pc, #64]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e72:	5cd3      	ldrb	r3, [r2, r3]
10008e74:	2b00      	cmp	r3, #0
10008e76:	d006      	beq.n	10008e86 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008e78:	466b      	mov	r3, sp
10008e7a:	1dda      	adds	r2, r3, #7
10008e7c:	79db      	ldrb	r3, [r3, #7]
10008e7e:	2180      	movs	r1, #128	; 0x80
10008e80:	4249      	negs	r1, r1
10008e82:	430b      	orrs	r3, r1
10008e84:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008e86:	4b0b      	ldr	r3, [pc, #44]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008e88:	681a      	ldr	r2, [r3, #0]
10008e8a:	7dd1      	ldrb	r1, [r2, #23]
10008e8c:	685b      	ldr	r3, [r3, #4]
10008e8e:	7818      	ldrb	r0, [r3, #0]
10008e90:	466b      	mov	r3, sp
10008e92:	3307      	adds	r3, #7
10008e94:	2201      	movs	r2, #1
10008e96:	4d08      	ldr	r5, [pc, #32]	; (10008eb8 <mpu_set_int_latched+0x80>)
10008e98:	47a8      	blx	r5
10008e9a:	2800      	cmp	r0, #0
10008e9c:	d105      	bne.n	10008eaa <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008e9e:	2323      	movs	r3, #35	; 0x23
10008ea0:	4a04      	ldr	r2, [pc, #16]	; (10008eb4 <mpu_set_int_latched+0x7c>)
10008ea2:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ea4:	e003      	b.n	10008eae <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008ea6:	2000      	movs	r0, #0
10008ea8:	e001      	b.n	10008eae <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008eaa:	2001      	movs	r0, #1
10008eac:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008eae:	b003      	add	sp, #12
10008eb0:	bd30      	pop	{r4, r5, pc}
10008eb2:	46c0      	nop			; (mov r8, r8)
10008eb4:	10018444 	.word	0x10018444
10008eb8:	1000aab1 	.word	0x1000aab1

10008ebc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008ebc:	b510      	push	{r4, lr}
10008ebe:	b082      	sub	sp, #8
10008ec0:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008ec2:	2c28      	cmp	r4, #40	; 0x28
10008ec4:	d878      	bhi.n	10008fb8 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008ec6:	2800      	cmp	r0, #0
10008ec8:	d115      	bne.n	10008ef6 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008eca:	2000      	movs	r0, #0
10008ecc:	4b44      	ldr	r3, [pc, #272]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008ece:	4798      	blx	r3
        tmp[0] = 0;
10008ed0:	ab01      	add	r3, sp, #4
10008ed2:	2200      	movs	r2, #0
10008ed4:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008ed6:	3207      	adds	r2, #7
10008ed8:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008eda:	4a42      	ldr	r2, [pc, #264]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008edc:	6811      	ldr	r1, [r2, #0]
10008ede:	7d49      	ldrb	r1, [r1, #21]
10008ee0:	6852      	ldr	r2, [r2, #4]
10008ee2:	7810      	ldrb	r0, [r2, #0]
10008ee4:	2202      	movs	r2, #2
10008ee6:	4c40      	ldr	r4, [pc, #256]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008ee8:	47a0      	blx	r4
10008eea:	1e04      	subs	r4, r0, #0
10008eec:	d167      	bne.n	10008fbe <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008eee:	2200      	movs	r2, #0
10008ef0:	4b3c      	ldr	r3, [pc, #240]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008ef2:	751a      	strb	r2, [r3, #20]
        return 0;
10008ef4:	e071      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ef6:	2001      	movs	r0, #1
10008ef8:	4b39      	ldr	r3, [pc, #228]	; (10008fe0 <mpu_lp_accel_mode+0x124>)
10008efa:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008efc:	2c01      	cmp	r4, #1
10008efe:	d103      	bne.n	10008f08 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008f00:	2202      	movs	r2, #2
10008f02:	ab01      	add	r3, sp, #4
10008f04:	701a      	strb	r2, [r3, #0]
10008f06:	e01a      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008f08:	2c02      	cmp	r4, #2
10008f0a:	d103      	bne.n	10008f14 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008f0c:	2203      	movs	r2, #3
10008f0e:	ab01      	add	r3, sp, #4
10008f10:	701a      	strb	r2, [r3, #0]
10008f12:	e014      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008f14:	2c05      	cmp	r4, #5
10008f16:	d803      	bhi.n	10008f20 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008f18:	2204      	movs	r2, #4
10008f1a:	ab01      	add	r3, sp, #4
10008f1c:	701a      	strb	r2, [r3, #0]
10008f1e:	e00e      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008f20:	2c0a      	cmp	r4, #10
10008f22:	d803      	bhi.n	10008f2c <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008f24:	2205      	movs	r2, #5
10008f26:	ab01      	add	r3, sp, #4
10008f28:	701a      	strb	r2, [r3, #0]
10008f2a:	e008      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008f2c:	2c14      	cmp	r4, #20
10008f2e:	d803      	bhi.n	10008f38 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008f30:	2206      	movs	r2, #6
10008f32:	ab01      	add	r3, sp, #4
10008f34:	701a      	strb	r2, [r3, #0]
10008f36:	e002      	b.n	10008f3e <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008f38:	2207      	movs	r2, #7
10008f3a:	ab01      	add	r3, sp, #4
10008f3c:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008f3e:	4b29      	ldr	r3, [pc, #164]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f40:	681a      	ldr	r2, [r3, #0]
10008f42:	7a51      	ldrb	r1, [r2, #9]
10008f44:	685b      	ldr	r3, [r3, #4]
10008f46:	7818      	ldrb	r0, [r3, #0]
10008f48:	ab01      	add	r3, sp, #4
10008f4a:	2201      	movs	r2, #1
10008f4c:	4c26      	ldr	r4, [pc, #152]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f4e:	47a0      	blx	r4
10008f50:	2800      	cmp	r0, #0
10008f52:	d137      	bne.n	10008fc4 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f54:	4b23      	ldr	r3, [pc, #140]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f56:	681a      	ldr	r2, [r3, #0]
10008f58:	7a11      	ldrb	r1, [r2, #8]
10008f5a:	685b      	ldr	r3, [r3, #4]
10008f5c:	7818      	ldrb	r0, [r3, #0]
10008f5e:	ab01      	add	r3, sp, #4
10008f60:	2201      	movs	r2, #1
10008f62:	4c22      	ldr	r4, [pc, #136]	; (10008fec <mpu_lp_accel_mode+0x130>)
10008f64:	47a0      	blx	r4
10008f66:	2800      	cmp	r0, #0
10008f68:	d12f      	bne.n	10008fca <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008f6a:	ab01      	add	r3, sp, #4
10008f6c:	7819      	ldrb	r1, [r3, #0]
10008f6e:	2208      	movs	r2, #8
10008f70:	430a      	orrs	r2, r1
10008f72:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008f74:	4a1b      	ldr	r2, [pc, #108]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f76:	6811      	ldr	r1, [r2, #0]
10008f78:	7a09      	ldrb	r1, [r1, #8]
10008f7a:	6852      	ldr	r2, [r2, #4]
10008f7c:	7810      	ldrb	r0, [r2, #0]
10008f7e:	2201      	movs	r2, #1
10008f80:	4c19      	ldr	r4, [pc, #100]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f82:	47a0      	blx	r4
10008f84:	2800      	cmp	r0, #0
10008f86:	d123      	bne.n	10008fd0 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008f88:	ab01      	add	r3, sp, #4
10008f8a:	2220      	movs	r2, #32
10008f8c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008f8e:	4a15      	ldr	r2, [pc, #84]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008f90:	6811      	ldr	r1, [r2, #0]
10008f92:	7d49      	ldrb	r1, [r1, #21]
10008f94:	6852      	ldr	r2, [r2, #4]
10008f96:	7810      	ldrb	r0, [r2, #0]
10008f98:	2201      	movs	r2, #1
10008f9a:	4c13      	ldr	r4, [pc, #76]	; (10008fe8 <mpu_lp_accel_mode+0x12c>)
10008f9c:	47a0      	blx	r4
10008f9e:	1e04      	subs	r4, r0, #0
10008fa0:	d119      	bne.n	10008fd6 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008fa2:	4b10      	ldr	r3, [pc, #64]	; (10008fe4 <mpu_lp_accel_mode+0x128>)
10008fa4:	2208      	movs	r2, #8
10008fa6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008fa8:	2200      	movs	r2, #0
10008faa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008fac:	3201      	adds	r2, #1
10008fae:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008fb0:	2000      	movs	r0, #0
10008fb2:	4b0f      	ldr	r3, [pc, #60]	; (10008ff0 <mpu_lp_accel_mode+0x134>)
10008fb4:	4798      	blx	r3

    return 0;
10008fb6:	e010      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008fb8:	2401      	movs	r4, #1
10008fba:	4264      	negs	r4, r4
10008fbc:	e00d      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008fbe:	2401      	movs	r4, #1
10008fc0:	4264      	negs	r4, r4
10008fc2:	e00a      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008fc4:	2401      	movs	r4, #1
10008fc6:	4264      	negs	r4, r4
10008fc8:	e007      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008fca:	2401      	movs	r4, #1
10008fcc:	4264      	negs	r4, r4
10008fce:	e004      	b.n	10008fda <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008fd0:	2401      	movs	r4, #1
10008fd2:	4264      	negs	r4, r4
10008fd4:	e001      	b.n	10008fda <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008fd6:	2401      	movs	r4, #1
10008fd8:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008fda:	0020      	movs	r0, r4
10008fdc:	b002      	add	sp, #8
10008fde:	bd10      	pop	{r4, pc}
10008fe0:	10008e39 	.word	0x10008e39
10008fe4:	10018444 	.word	0x10018444
10008fe8:	1000aab1 	.word	0x1000aab1
10008fec:	1000ab0d 	.word	0x1000ab0d
10008ff0:	10008a85 	.word	0x10008a85

10008ff4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008ff4:	b530      	push	{r4, r5, lr}
10008ff6:	b083      	sub	sp, #12
10008ff8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008ffa:	4b2c      	ldr	r3, [pc, #176]	; (100090ac <mpu_set_sample_rate+0xb8>)
10008ffc:	7a9b      	ldrb	r3, [r3, #10]
10008ffe:	2b00      	cmp	r3, #0
10009000:	d048      	beq.n	10009094 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10009002:	2324      	movs	r3, #36	; 0x24
10009004:	4a29      	ldr	r2, [pc, #164]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009006:	5cd3      	ldrb	r3, [r2, r3]
10009008:	2b00      	cmp	r3, #0
1000900a:	d146      	bne.n	1000909a <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
1000900c:	7d13      	ldrb	r3, [r2, #20]
1000900e:	2b00      	cmp	r3, #0
10009010:	d00a      	beq.n	10009028 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10009012:	1e43      	subs	r3, r0, #1
10009014:	b29b      	uxth	r3, r3
10009016:	2b27      	cmp	r3, #39	; 0x27
10009018:	d803      	bhi.n	10009022 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
1000901a:	4b25      	ldr	r3, [pc, #148]	; (100090b0 <mpu_set_sample_rate+0xbc>)
1000901c:	4798      	blx	r3
                return 0;
1000901e:	2400      	movs	r4, #0
10009020:	e040      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009022:	2000      	movs	r0, #0
10009024:	4b22      	ldr	r3, [pc, #136]	; (100090b0 <mpu_set_sample_rate+0xbc>)
10009026:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10009028:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
1000902a:	2c03      	cmp	r4, #3
1000902c:	d907      	bls.n	1000903e <mpu_set_sample_rate+0x4a>
1000902e:	1c21      	adds	r1, r4, #0
10009030:	23fa      	movs	r3, #250	; 0xfa
10009032:	009b      	lsls	r3, r3, #2
10009034:	429c      	cmp	r4, r3
10009036:	d901      	bls.n	1000903c <mpu_set_sample_rate+0x48>
10009038:	4b1e      	ldr	r3, [pc, #120]	; (100090b4 <mpu_set_sample_rate+0xc0>)
1000903a:	8819      	ldrh	r1, [r3, #0]
1000903c:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
1000903e:	466b      	mov	r3, sp
10009040:	1ddc      	adds	r4, r3, #7
10009042:	20fa      	movs	r0, #250	; 0xfa
10009044:	0080      	lsls	r0, r0, #2
10009046:	4b1c      	ldr	r3, [pc, #112]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009048:	4798      	blx	r3
1000904a:	3801      	subs	r0, #1
1000904c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
1000904e:	4b17      	ldr	r3, [pc, #92]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009050:	681a      	ldr	r2, [r3, #0]
10009052:	7851      	ldrb	r1, [r2, #1]
10009054:	685b      	ldr	r3, [r3, #4]
10009056:	7818      	ldrb	r0, [r3, #0]
10009058:	0023      	movs	r3, r4
1000905a:	2201      	movs	r2, #1
1000905c:	4c17      	ldr	r4, [pc, #92]	; (100090bc <mpu_set_sample_rate+0xc8>)
1000905e:	47a0      	blx	r4
10009060:	1e04      	subs	r4, r0, #0
10009062:	d11d      	bne.n	100090a0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10009064:	4d11      	ldr	r5, [pc, #68]	; (100090ac <mpu_set_sample_rate+0xb8>)
10009066:	466b      	mov	r3, sp
10009068:	79d9      	ldrb	r1, [r3, #7]
1000906a:	3101      	adds	r1, #1
1000906c:	20fa      	movs	r0, #250	; 0xfa
1000906e:	0080      	lsls	r0, r0, #2
10009070:	4b11      	ldr	r3, [pc, #68]	; (100090b8 <mpu_set_sample_rate+0xc4>)
10009072:	4798      	blx	r3
10009074:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10009076:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10009078:	1c18      	adds	r0, r3, #0
1000907a:	b29b      	uxth	r3, r3
1000907c:	2b64      	cmp	r3, #100	; 0x64
1000907e:	d900      	bls.n	10009082 <mpu_set_sample_rate+0x8e>
10009080:	2064      	movs	r0, #100	; 0x64
10009082:	b280      	uxth	r0, r0
10009084:	4b0e      	ldr	r3, [pc, #56]	; (100090c0 <mpu_set_sample_rate+0xcc>)
10009086:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10009088:	4b08      	ldr	r3, [pc, #32]	; (100090ac <mpu_set_sample_rate+0xb8>)
1000908a:	89d8      	ldrh	r0, [r3, #14]
1000908c:	0840      	lsrs	r0, r0, #1
1000908e:	4b0d      	ldr	r3, [pc, #52]	; (100090c4 <mpu_set_sample_rate+0xd0>)
10009090:	4798      	blx	r3
        return 0;
10009092:	e007      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10009094:	2401      	movs	r4, #1
10009096:	4264      	negs	r4, r4
10009098:	e004      	b.n	100090a4 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
1000909a:	2401      	movs	r4, #1
1000909c:	4264      	negs	r4, r4
1000909e:	e001      	b.n	100090a4 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
100090a0:	2401      	movs	r4, #1
100090a2:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
100090a4:	0020      	movs	r0, r4
100090a6:	b003      	add	sp, #12
100090a8:	bd30      	pop	{r4, r5, pc}
100090aa:	46c0      	nop			; (mov r8, r8)
100090ac:	10018444 	.word	0x10018444
100090b0:	10008ebd 	.word	0x10008ebd
100090b4:	10016290 	.word	0x10016290
100090b8:	100130f9 	.word	0x100130f9
100090bc:	1000aab1 	.word	0x1000aab1
100090c0:	10008a0d 	.word	0x10008a0d
100090c4:	10008935 	.word	0x10008935

100090c8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100090c8:	b530      	push	{r4, r5, lr}
100090ca:	b083      	sub	sp, #12
100090cc:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100090ce:	2370      	movs	r3, #112	; 0x70
100090d0:	4203      	tst	r3, r0
100090d2:	d003      	beq.n	100090dc <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
100090d4:	2201      	movs	r2, #1
100090d6:	466b      	mov	r3, sp
100090d8:	71da      	strb	r2, [r3, #7]
100090da:	e015      	b.n	10009108 <mpu_set_sensors+0x40>
    else if (sensors)
100090dc:	2800      	cmp	r0, #0
100090de:	d003      	beq.n	100090e8 <mpu_set_sensors+0x20>
        data = 0;
100090e0:	2200      	movs	r2, #0
100090e2:	466b      	mov	r3, sp
100090e4:	71da      	strb	r2, [r3, #7]
100090e6:	e00f      	b.n	10009108 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
100090e8:	466b      	mov	r3, sp
100090ea:	3307      	adds	r3, #7
100090ec:	2240      	movs	r2, #64	; 0x40
100090ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
100090f0:	4a6a      	ldr	r2, [pc, #424]	; (1000929c <mpu_set_sensors+0x1d4>)
100090f2:	6811      	ldr	r1, [r2, #0]
100090f4:	7d49      	ldrb	r1, [r1, #21]
100090f6:	6852      	ldr	r2, [r2, #4]
100090f8:	7810      	ldrb	r0, [r2, #0]
100090fa:	2201      	movs	r2, #1
100090fc:	4d68      	ldr	r5, [pc, #416]	; (100092a0 <mpu_set_sensors+0x1d8>)
100090fe:	47a8      	blx	r5
10009100:	2800      	cmp	r0, #0
10009102:	d100      	bne.n	10009106 <mpu_set_sensors+0x3e>
10009104:	e0b2      	b.n	1000926c <mpu_set_sensors+0x1a4>
10009106:	e00b      	b.n	10009120 <mpu_set_sensors+0x58>
10009108:	4b64      	ldr	r3, [pc, #400]	; (1000929c <mpu_set_sensors+0x1d4>)
1000910a:	681a      	ldr	r2, [r3, #0]
1000910c:	7d51      	ldrb	r1, [r2, #21]
1000910e:	685b      	ldr	r3, [r3, #4]
10009110:	7818      	ldrb	r0, [r3, #0]
10009112:	466b      	mov	r3, sp
10009114:	3307      	adds	r3, #7
10009116:	2201      	movs	r2, #1
10009118:	4d61      	ldr	r5, [pc, #388]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000911a:	47a8      	blx	r5
1000911c:	2800      	cmp	r0, #0
1000911e:	d005      	beq.n	1000912c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009120:	2200      	movs	r2, #0
10009122:	4b5e      	ldr	r3, [pc, #376]	; (1000929c <mpu_set_sensors+0x1d4>)
10009124:	729a      	strb	r2, [r3, #10]
        return -1;
10009126:	2501      	movs	r5, #1
10009128:	426d      	negs	r5, r5
1000912a:	e0b4      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000912c:	466b      	mov	r3, sp
1000912e:	1dda      	adds	r2, r3, #7
10009130:	79db      	ldrb	r3, [r3, #7]
10009132:	2140      	movs	r1, #64	; 0x40
10009134:	438b      	bics	r3, r1
10009136:	4959      	ldr	r1, [pc, #356]	; (1000929c <mpu_set_sensors+0x1d4>)
10009138:	730b      	strb	r3, [r1, #12]

    data = 0;
1000913a:	2300      	movs	r3, #0
1000913c:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
1000913e:	0663      	lsls	r3, r4, #25
10009140:	d402      	bmi.n	10009148 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10009142:	2204      	movs	r2, #4
10009144:	466b      	mov	r3, sp
10009146:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10009148:	06a3      	lsls	r3, r4, #26
1000914a:	d405      	bmi.n	10009158 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
1000914c:	466b      	mov	r3, sp
1000914e:	1dda      	adds	r2, r3, #7
10009150:	79d9      	ldrb	r1, [r3, #7]
10009152:	2302      	movs	r3, #2
10009154:	430b      	orrs	r3, r1
10009156:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10009158:	06e3      	lsls	r3, r4, #27
1000915a:	d405      	bmi.n	10009168 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
1000915c:	466b      	mov	r3, sp
1000915e:	1dda      	adds	r2, r3, #7
10009160:	79d9      	ldrb	r1, [r3, #7]
10009162:	2301      	movs	r3, #1
10009164:	430b      	orrs	r3, r1
10009166:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009168:	0723      	lsls	r3, r4, #28
1000916a:	d405      	bmi.n	10009178 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
1000916c:	466b      	mov	r3, sp
1000916e:	1dda      	adds	r2, r3, #7
10009170:	79d9      	ldrb	r1, [r3, #7]
10009172:	2338      	movs	r3, #56	; 0x38
10009174:	430b      	orrs	r3, r1
10009176:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10009178:	4b48      	ldr	r3, [pc, #288]	; (1000929c <mpu_set_sensors+0x1d4>)
1000917a:	681a      	ldr	r2, [r3, #0]
1000917c:	7d91      	ldrb	r1, [r2, #22]
1000917e:	685b      	ldr	r3, [r3, #4]
10009180:	7818      	ldrb	r0, [r3, #0]
10009182:	466b      	mov	r3, sp
10009184:	3307      	adds	r3, #7
10009186:	2201      	movs	r2, #1
10009188:	4d45      	ldr	r5, [pc, #276]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000918a:	47a8      	blx	r5
1000918c:	2800      	cmp	r0, #0
1000918e:	d005      	beq.n	1000919c <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10009190:	2200      	movs	r2, #0
10009192:	4b42      	ldr	r3, [pc, #264]	; (1000929c <mpu_set_sensors+0x1d4>)
10009194:	729a      	strb	r2, [r3, #10]
        return -1;
10009196:	2501      	movs	r5, #1
10009198:	426d      	negs	r5, r5
1000919a:	e07c      	b.n	10009296 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1000919c:	2308      	movs	r3, #8
1000919e:	0022      	movs	r2, r4
100091a0:	439a      	bics	r2, r3
100091a2:	d06b      	beq.n	1000927c <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100091a4:	2000      	movs	r0, #0
100091a6:	4b3f      	ldr	r3, [pc, #252]	; (100092a4 <mpu_set_sensors+0x1dc>)
100091a8:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091aa:	4b3c      	ldr	r3, [pc, #240]	; (1000929c <mpu_set_sensors+0x1d4>)
100091ac:	681a      	ldr	r2, [r3, #0]
100091ae:	7911      	ldrb	r1, [r2, #4]
100091b0:	685b      	ldr	r3, [r3, #4]
100091b2:	7818      	ldrb	r0, [r3, #0]
100091b4:	466b      	mov	r3, sp
100091b6:	3306      	adds	r3, #6
100091b8:	2201      	movs	r2, #1
100091ba:	4d3b      	ldr	r5, [pc, #236]	; (100092a8 <mpu_set_sensors+0x1e0>)
100091bc:	47a8      	blx	r5
100091be:	2800      	cmp	r0, #0
100091c0:	d148      	bne.n	10009254 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
100091c2:	07e3      	lsls	r3, r4, #31
100091c4:	d509      	bpl.n	100091da <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
100091c6:	2211      	movs	r2, #17
100091c8:	466b      	mov	r3, sp
100091ca:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
100091cc:	466b      	mov	r3, sp
100091ce:	1d9a      	adds	r2, r3, #6
100091d0:	7999      	ldrb	r1, [r3, #6]
100091d2:	2320      	movs	r3, #32
100091d4:	430b      	orrs	r3, r1
100091d6:	7013      	strb	r3, [r2, #0]
100091d8:	e008      	b.n	100091ec <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
100091da:	2210      	movs	r2, #16
100091dc:	466b      	mov	r3, sp
100091de:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
100091e0:	466b      	mov	r3, sp
100091e2:	1d9a      	adds	r2, r3, #6
100091e4:	799b      	ldrb	r3, [r3, #6]
100091e6:	2120      	movs	r1, #32
100091e8:	438b      	bics	r3, r1
100091ea:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
100091ec:	2324      	movs	r3, #36	; 0x24
100091ee:	4a2b      	ldr	r2, [pc, #172]	; (1000929c <mpu_set_sensors+0x1d4>)
100091f0:	5cd3      	ldrb	r3, [r2, r3]
100091f2:	2b00      	cmp	r3, #0
100091f4:	d007      	beq.n	10009206 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
100091f6:	466b      	mov	r3, sp
100091f8:	1d9a      	adds	r2, r3, #6
100091fa:	799b      	ldrb	r3, [r3, #6]
100091fc:	2180      	movs	r1, #128	; 0x80
100091fe:	4249      	negs	r1, r1
10009200:	430b      	orrs	r3, r1
10009202:	7013      	strb	r3, [r2, #0]
10009204:	e005      	b.n	10009212 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10009206:	466b      	mov	r3, sp
10009208:	1d9a      	adds	r2, r3, #6
1000920a:	799b      	ldrb	r3, [r3, #6]
1000920c:	217f      	movs	r1, #127	; 0x7f
1000920e:	400b      	ands	r3, r1
10009210:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10009212:	4b22      	ldr	r3, [pc, #136]	; (1000929c <mpu_set_sensors+0x1d4>)
10009214:	2226      	movs	r2, #38	; 0x26
10009216:	6819      	ldr	r1, [r3, #0]
10009218:	5c89      	ldrb	r1, [r1, r2]
1000921a:	685b      	ldr	r3, [r3, #4]
1000921c:	7818      	ldrb	r0, [r3, #0]
1000921e:	466b      	mov	r3, sp
10009220:	3307      	adds	r3, #7
10009222:	3a25      	subs	r2, #37	; 0x25
10009224:	4d1e      	ldr	r5, [pc, #120]	; (100092a0 <mpu_set_sensors+0x1d8>)
10009226:	47a8      	blx	r5
10009228:	2800      	cmp	r0, #0
1000922a:	d116      	bne.n	1000925a <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000922c:	4b1b      	ldr	r3, [pc, #108]	; (1000929c <mpu_set_sensors+0x1d4>)
1000922e:	681a      	ldr	r2, [r3, #0]
10009230:	7911      	ldrb	r1, [r2, #4]
10009232:	685b      	ldr	r3, [r3, #4]
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	466b      	mov	r3, sp
10009238:	3306      	adds	r3, #6
1000923a:	2201      	movs	r2, #1
1000923c:	4d18      	ldr	r5, [pc, #96]	; (100092a0 <mpu_set_sensors+0x1d8>)
1000923e:	47a8      	blx	r5
10009240:	1e05      	subs	r5, r0, #0
10009242:	d10d      	bne.n	10009260 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10009244:	4b15      	ldr	r3, [pc, #84]	; (1000929c <mpu_set_sensors+0x1d4>)
10009246:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009248:	2200      	movs	r2, #0
1000924a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
1000924c:	2032      	movs	r0, #50	; 0x32
1000924e:	4b17      	ldr	r3, [pc, #92]	; (100092ac <mpu_set_sensors+0x1e4>)
10009250:	4798      	blx	r3
    return 0;
10009252:	e020      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009254:	2501      	movs	r5, #1
10009256:	426d      	negs	r5, r5
10009258:	e01d      	b.n	10009296 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
1000925a:	2501      	movs	r5, #1
1000925c:	426d      	negs	r5, r5
1000925e:	e01a      	b.n	10009296 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009260:	2501      	movs	r5, #1
10009262:	426d      	negs	r5, r5
10009264:	e017      	b.n	10009296 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009266:	2501      	movs	r5, #1
10009268:	426d      	negs	r5, r5
1000926a:	e014      	b.n	10009296 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000926c:	466b      	mov	r3, sp
1000926e:	3307      	adds	r3, #7
10009270:	781b      	ldrb	r3, [r3, #0]
10009272:	2240      	movs	r2, #64	; 0x40
10009274:	4393      	bics	r3, r2
10009276:	4a09      	ldr	r2, [pc, #36]	; (1000929c <mpu_set_sensors+0x1d4>)
10009278:	7313      	strb	r3, [r2, #12]
1000927a:	e762      	b.n	10009142 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
1000927c:	4b07      	ldr	r3, [pc, #28]	; (1000929c <mpu_set_sensors+0x1d4>)
1000927e:	681a      	ldr	r2, [r3, #0]
10009280:	7911      	ldrb	r1, [r2, #4]
10009282:	685b      	ldr	r3, [r3, #4]
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	466b      	mov	r3, sp
10009288:	3306      	adds	r3, #6
1000928a:	2201      	movs	r2, #1
1000928c:	4d06      	ldr	r5, [pc, #24]	; (100092a8 <mpu_set_sensors+0x1e0>)
1000928e:	47a8      	blx	r5
10009290:	2800      	cmp	r0, #0
10009292:	d0a2      	beq.n	100091da <mpu_set_sensors+0x112>
10009294:	e7e7      	b.n	10009266 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10009296:	0028      	movs	r0, r5
10009298:	b003      	add	sp, #12
1000929a:	bd30      	pop	{r4, r5, pc}
1000929c:	10018444 	.word	0x10018444
100092a0:	1000aab1 	.word	0x1000aab1
100092a4:	10008e39 	.word	0x10008e39
100092a8:	1000ab0d 	.word	0x1000ab0d
100092ac:	10008129 	.word	0x10008129

100092b0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100092b0:	b530      	push	{r4, r5, lr}
100092b2:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100092b4:	ab02      	add	r3, sp, #8
100092b6:	2280      	movs	r2, #128	; 0x80
100092b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092ba:	4ab9      	ldr	r2, [pc, #740]	; (100095a0 <mpu_init+0x2f0>)
100092bc:	6811      	ldr	r1, [r2, #0]
100092be:	7d49      	ldrb	r1, [r1, #21]
100092c0:	6852      	ldr	r2, [r2, #4]
100092c2:	7810      	ldrb	r0, [r2, #0]
100092c4:	2201      	movs	r2, #1
100092c6:	4cb7      	ldr	r4, [pc, #732]	; (100095a4 <mpu_init+0x2f4>)
100092c8:	47a0      	blx	r4
100092ca:	2800      	cmp	r0, #0
100092cc:	d000      	beq.n	100092d0 <mpu_init+0x20>
100092ce:	e149      	b.n	10009564 <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
100092d0:	3064      	adds	r0, #100	; 0x64
100092d2:	4bb5      	ldr	r3, [pc, #724]	; (100095a8 <mpu_init+0x2f8>)
100092d4:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100092d6:	ab02      	add	r3, sp, #8
100092d8:	2200      	movs	r2, #0
100092da:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100092dc:	4ab0      	ldr	r2, [pc, #704]	; (100095a0 <mpu_init+0x2f0>)
100092de:	6811      	ldr	r1, [r2, #0]
100092e0:	7d49      	ldrb	r1, [r1, #21]
100092e2:	6852      	ldr	r2, [r2, #4]
100092e4:	7810      	ldrb	r0, [r2, #0]
100092e6:	2201      	movs	r2, #1
100092e8:	4cae      	ldr	r4, [pc, #696]	; (100095a4 <mpu_init+0x2f4>)
100092ea:	47a0      	blx	r4
100092ec:	2800      	cmp	r0, #0
100092ee:	d000      	beq.n	100092f2 <mpu_init+0x42>
100092f0:	e13b      	b.n	1000956a <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
100092f2:	4aab      	ldr	r2, [pc, #684]	; (100095a0 <mpu_init+0x2f0>)
100092f4:	2300      	movs	r3, #0
100092f6:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100092f8:	ab02      	add	r3, sp, #8
100092fa:	2140      	movs	r1, #64	; 0x40
100092fc:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100092fe:	6811      	ldr	r1, [r2, #0]
10009300:	7a09      	ldrb	r1, [r1, #8]
10009302:	6852      	ldr	r2, [r2, #4]
10009304:	7810      	ldrb	r0, [r2, #0]
10009306:	2201      	movs	r2, #1
10009308:	4ca6      	ldr	r4, [pc, #664]	; (100095a4 <mpu_init+0x2f4>)
1000930a:	47a0      	blx	r4
1000930c:	2800      	cmp	r0, #0
1000930e:	d000      	beq.n	10009312 <mpu_init+0x62>
10009310:	e12e      	b.n	10009570 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009312:	4ca3      	ldr	r4, [pc, #652]	; (100095a0 <mpu_init+0x2f0>)
10009314:	23ff      	movs	r3, #255	; 0xff
10009316:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009318:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
1000931a:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
1000931c:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000931e:	2201      	movs	r2, #1
10009320:	4252      	negs	r2, r2
10009322:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009324:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009326:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009328:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000932a:	3bfe      	subs	r3, #254	; 0xfe
1000932c:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000932e:	2500      	movs	r5, #0
10009330:	3321      	adds	r3, #33	; 0x21
10009332:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009334:	3301      	adds	r3, #1
10009336:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009338:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
1000933a:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000933c:	0020      	movs	r0, r4
1000933e:	3016      	adds	r0, #22
10009340:	320d      	adds	r2, #13
10009342:	2100      	movs	r1, #0
10009344:	4b99      	ldr	r3, [pc, #612]	; (100095ac <mpu_init+0x2fc>)
10009346:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009348:	2324      	movs	r3, #36	; 0x24
1000934a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000934c:	3301      	adds	r3, #1
1000934e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009350:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10009352:	20fa      	movs	r0, #250	; 0xfa
10009354:	00c0      	lsls	r0, r0, #3
10009356:	4b96      	ldr	r3, [pc, #600]	; (100095b0 <mpu_init+0x300>)
10009358:	4798      	blx	r3
1000935a:	2800      	cmp	r0, #0
1000935c:	d000      	beq.n	10009360 <mpu_init+0xb0>
1000935e:	e10a      	b.n	10009576 <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
10009360:	3002      	adds	r0, #2
10009362:	4b94      	ldr	r3, [pc, #592]	; (100095b4 <mpu_init+0x304>)
10009364:	4798      	blx	r3
10009366:	2800      	cmp	r0, #0
10009368:	d000      	beq.n	1000936c <mpu_init+0xbc>
1000936a:	e107      	b.n	1000957c <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
1000936c:	302a      	adds	r0, #42	; 0x2a
1000936e:	4b92      	ldr	r3, [pc, #584]	; (100095b8 <mpu_init+0x308>)
10009370:	4798      	blx	r3
10009372:	2800      	cmp	r0, #0
10009374:	d000      	beq.n	10009378 <mpu_init+0xc8>
10009376:	e104      	b.n	10009582 <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
10009378:	3032      	adds	r0, #50	; 0x32
1000937a:	4b90      	ldr	r3, [pc, #576]	; (100095bc <mpu_init+0x30c>)
1000937c:	4798      	blx	r3
1000937e:	2800      	cmp	r0, #0
10009380:	d000      	beq.n	10009384 <mpu_init+0xd4>
10009382:	e101      	b.n	10009588 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
10009384:	4b8e      	ldr	r3, [pc, #568]	; (100095c0 <mpu_init+0x310>)
10009386:	4798      	blx	r3
10009388:	2800      	cmp	r0, #0
1000938a:	d000      	beq.n	1000938e <mpu_init+0xde>
1000938c:	e0ff      	b.n	1000958e <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000938e:	3001      	adds	r0, #1
10009390:	4b8c      	ldr	r3, [pc, #560]	; (100095c4 <mpu_init+0x314>)
10009392:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009394:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009396:	4d8c      	ldr	r5, [pc, #560]	; (100095c8 <mpu_init+0x318>)
10009398:	ab01      	add	r3, sp, #4
1000939a:	2201      	movs	r2, #1
1000939c:	2100      	movs	r1, #0
1000939e:	0020      	movs	r0, r4
100093a0:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100093a2:	2800      	cmp	r0, #0
100093a4:	d103      	bne.n	100093ae <mpu_init+0xfe>
100093a6:	466b      	mov	r3, sp
100093a8:	791b      	ldrb	r3, [r3, #4]
100093aa:	2b48      	cmp	r3, #72	; 0x48
100093ac:	d004      	beq.n	100093b8 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100093ae:	3401      	adds	r4, #1
100093b0:	b2e4      	uxtb	r4, r4
100093b2:	2c10      	cmp	r4, #16
100093b4:	d1f0      	bne.n	10009398 <mpu_init+0xe8>
100093b6:	e001      	b.n	100093bc <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100093b8:	2c0f      	cmp	r4, #15
100093ba:	d905      	bls.n	100093c8 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100093bc:	4883      	ldr	r0, [pc, #524]	; (100095cc <mpu_init+0x31c>)
100093be:	4c84      	ldr	r4, [pc, #528]	; (100095d0 <mpu_init+0x320>)
100093c0:	47a0      	blx	r4
100093c2:	4884      	ldr	r0, [pc, #528]	; (100095d4 <mpu_init+0x324>)
100093c4:	47a0      	blx	r4
100093c6:	e0c4      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100093c8:	232a      	movs	r3, #42	; 0x2a
100093ca:	4a75      	ldr	r2, [pc, #468]	; (100095a0 <mpu_init+0x2f0>)
100093cc:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100093ce:	ab01      	add	r3, sp, #4
100093d0:	2210      	movs	r2, #16
100093d2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093d4:	3a0f      	subs	r2, #15
100093d6:	210a      	movs	r1, #10
100093d8:	0020      	movs	r0, r4
100093da:	4c72      	ldr	r4, [pc, #456]	; (100095a4 <mpu_init+0x2f4>)
100093dc:	47a0      	blx	r4
100093de:	2800      	cmp	r0, #0
100093e0:	d000      	beq.n	100093e4 <mpu_init+0x134>
100093e2:	e0b6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
100093e4:	3001      	adds	r0, #1
100093e6:	4b70      	ldr	r3, [pc, #448]	; (100095a8 <mpu_init+0x2f8>)
100093e8:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
100093ea:	ab01      	add	r3, sp, #4
100093ec:	221f      	movs	r2, #31
100093ee:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100093f0:	320b      	adds	r2, #11
100093f2:	496b      	ldr	r1, [pc, #428]	; (100095a0 <mpu_init+0x2f0>)
100093f4:	5c88      	ldrb	r0, [r1, r2]
100093f6:	3a29      	subs	r2, #41	; 0x29
100093f8:	210a      	movs	r1, #10
100093fa:	4c6a      	ldr	r4, [pc, #424]	; (100095a4 <mpu_init+0x2f4>)
100093fc:	47a0      	blx	r4
100093fe:	2800      	cmp	r0, #0
10009400:	d000      	beq.n	10009404 <mpu_init+0x154>
10009402:	e0a6      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009404:	3001      	adds	r0, #1
10009406:	4b68      	ldr	r3, [pc, #416]	; (100095a8 <mpu_init+0x2f8>)
10009408:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000940a:	232a      	movs	r3, #42	; 0x2a
1000940c:	4a64      	ldr	r2, [pc, #400]	; (100095a0 <mpu_init+0x2f0>)
1000940e:	5cd0      	ldrb	r0, [r2, r3]
10009410:	ab01      	add	r3, sp, #4
10009412:	2203      	movs	r2, #3
10009414:	2110      	movs	r1, #16
10009416:	4c6c      	ldr	r4, [pc, #432]	; (100095c8 <mpu_init+0x318>)
10009418:	47a0      	blx	r4
1000941a:	2800      	cmp	r0, #0
1000941c:	d000      	beq.n	10009420 <mpu_init+0x170>
1000941e:	e098      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009420:	4a5f      	ldr	r2, [pc, #380]	; (100095a0 <mpu_init+0x2f0>)
10009422:	ab01      	add	r3, sp, #4
10009424:	7819      	ldrb	r1, [r3, #0]
10009426:	3180      	adds	r1, #128	; 0x80
10009428:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000942a:	7859      	ldrb	r1, [r3, #1]
1000942c:	3180      	adds	r1, #128	; 0x80
1000942e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009430:	7899      	ldrb	r1, [r3, #2]
10009432:	3180      	adds	r1, #128	; 0x80
10009434:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009436:	2110      	movs	r1, #16
10009438:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000943a:	311a      	adds	r1, #26
1000943c:	5c50      	ldrb	r0, [r2, r1]
1000943e:	2201      	movs	r2, #1
10009440:	3920      	subs	r1, #32
10009442:	4c58      	ldr	r4, [pc, #352]	; (100095a4 <mpu_init+0x2f4>)
10009444:	47a0      	blx	r4
10009446:	2800      	cmp	r0, #0
10009448:	d000      	beq.n	1000944c <mpu_init+0x19c>
1000944a:	e082      	b.n	10009552 <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000944c:	3001      	adds	r0, #1
1000944e:	4b56      	ldr	r3, [pc, #344]	; (100095a8 <mpu_init+0x2f8>)
10009450:	4798      	blx	r3

    mpu_set_bypass(0);
10009452:	2000      	movs	r0, #0
10009454:	4b5b      	ldr	r3, [pc, #364]	; (100095c4 <mpu_init+0x314>)
10009456:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009458:	ab01      	add	r3, sp, #4
1000945a:	2240      	movs	r2, #64	; 0x40
1000945c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
1000945e:	4a50      	ldr	r2, [pc, #320]	; (100095a0 <mpu_init+0x2f0>)
10009460:	6811      	ldr	r1, [r2, #0]
10009462:	7e89      	ldrb	r1, [r1, #26]
10009464:	6852      	ldr	r2, [r2, #4]
10009466:	7810      	ldrb	r0, [r2, #0]
10009468:	2201      	movs	r2, #1
1000946a:	4c4e      	ldr	r4, [pc, #312]	; (100095a4 <mpu_init+0x2f4>)
1000946c:	47a0      	blx	r4
1000946e:	2800      	cmp	r0, #0
10009470:	d16f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009472:	ab01      	add	r3, sp, #4
10009474:	4a4a      	ldr	r2, [pc, #296]	; (100095a0 <mpu_init+0x2f0>)
10009476:	212a      	movs	r1, #42	; 0x2a
10009478:	5c51      	ldrb	r1, [r2, r1]
1000947a:	3880      	subs	r0, #128	; 0x80
1000947c:	4301      	orrs	r1, r0
1000947e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009480:	6811      	ldr	r1, [r2, #0]
10009482:	7f89      	ldrb	r1, [r1, #30]
10009484:	6852      	ldr	r2, [r2, #4]
10009486:	7810      	ldrb	r0, [r2, #0]
10009488:	2201      	movs	r2, #1
1000948a:	4c46      	ldr	r4, [pc, #280]	; (100095a4 <mpu_init+0x2f4>)
1000948c:	47a0      	blx	r4
1000948e:	2800      	cmp	r0, #0
10009490:	d15f      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009492:	ab01      	add	r3, sp, #4
10009494:	2202      	movs	r2, #2
10009496:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009498:	4a41      	ldr	r2, [pc, #260]	; (100095a0 <mpu_init+0x2f0>)
1000949a:	6811      	ldr	r1, [r2, #0]
1000949c:	7fc9      	ldrb	r1, [r1, #31]
1000949e:	6852      	ldr	r2, [r2, #4]
100094a0:	7810      	ldrb	r0, [r2, #0]
100094a2:	2201      	movs	r2, #1
100094a4:	4c3f      	ldr	r4, [pc, #252]	; (100095a4 <mpu_init+0x2f4>)
100094a6:	47a0      	blx	r4
100094a8:	2800      	cmp	r0, #0
100094aa:	d152      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100094ac:	ab01      	add	r3, sp, #4
100094ae:	2288      	movs	r2, #136	; 0x88
100094b0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100094b2:	4a3b      	ldr	r2, [pc, #236]	; (100095a0 <mpu_init+0x2f0>)
100094b4:	2120      	movs	r1, #32
100094b6:	6810      	ldr	r0, [r2, #0]
100094b8:	5c41      	ldrb	r1, [r0, r1]
100094ba:	6852      	ldr	r2, [r2, #4]
100094bc:	7810      	ldrb	r0, [r2, #0]
100094be:	2201      	movs	r2, #1
100094c0:	4c38      	ldr	r4, [pc, #224]	; (100095a4 <mpu_init+0x2f4>)
100094c2:	47a0      	blx	r4
100094c4:	2800      	cmp	r0, #0
100094c6:	d144      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100094c8:	ab01      	add	r3, sp, #4
100094ca:	4a35      	ldr	r2, [pc, #212]	; (100095a0 <mpu_init+0x2f0>)
100094cc:	212a      	movs	r1, #42	; 0x2a
100094ce:	5c51      	ldrb	r1, [r2, r1]
100094d0:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100094d2:	2121      	movs	r1, #33	; 0x21
100094d4:	6810      	ldr	r0, [r2, #0]
100094d6:	5c41      	ldrb	r1, [r0, r1]
100094d8:	6852      	ldr	r2, [r2, #4]
100094da:	7810      	ldrb	r0, [r2, #0]
100094dc:	2201      	movs	r2, #1
100094de:	4c31      	ldr	r4, [pc, #196]	; (100095a4 <mpu_init+0x2f4>)
100094e0:	47a0      	blx	r4
100094e2:	2800      	cmp	r0, #0
100094e4:	d135      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100094e6:	ab01      	add	r3, sp, #4
100094e8:	220a      	movs	r2, #10
100094ea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100094ec:	4a2c      	ldr	r2, [pc, #176]	; (100095a0 <mpu_init+0x2f0>)
100094ee:	2122      	movs	r1, #34	; 0x22
100094f0:	6810      	ldr	r0, [r2, #0]
100094f2:	5c41      	ldrb	r1, [r0, r1]
100094f4:	6852      	ldr	r2, [r2, #4]
100094f6:	7810      	ldrb	r0, [r2, #0]
100094f8:	2201      	movs	r2, #1
100094fa:	4c2a      	ldr	r4, [pc, #168]	; (100095a4 <mpu_init+0x2f4>)
100094fc:	47a0      	blx	r4
100094fe:	2800      	cmp	r0, #0
10009500:	d127      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009502:	ab01      	add	r3, sp, #4
10009504:	2281      	movs	r2, #129	; 0x81
10009506:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009508:	4a25      	ldr	r2, [pc, #148]	; (100095a0 <mpu_init+0x2f0>)
1000950a:	2123      	movs	r1, #35	; 0x23
1000950c:	6810      	ldr	r0, [r2, #0]
1000950e:	5c41      	ldrb	r1, [r0, r1]
10009510:	6852      	ldr	r2, [r2, #4]
10009512:	7810      	ldrb	r0, [r2, #0]
10009514:	2201      	movs	r2, #1
10009516:	4c23      	ldr	r4, [pc, #140]	; (100095a4 <mpu_init+0x2f4>)
10009518:	47a0      	blx	r4
1000951a:	2800      	cmp	r0, #0
1000951c:	d119      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000951e:	ab01      	add	r3, sp, #4
10009520:	2211      	movs	r2, #17
10009522:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009524:	4a1e      	ldr	r2, [pc, #120]	; (100095a0 <mpu_init+0x2f0>)
10009526:	2126      	movs	r1, #38	; 0x26
10009528:	6810      	ldr	r0, [r2, #0]
1000952a:	5c41      	ldrb	r1, [r0, r1]
1000952c:	6852      	ldr	r2, [r2, #4]
1000952e:	7810      	ldrb	r0, [r2, #0]
10009530:	2201      	movs	r2, #1
10009532:	4c1c      	ldr	r4, [pc, #112]	; (100095a4 <mpu_init+0x2f4>)
10009534:	47a0      	blx	r4
10009536:	2800      	cmp	r0, #0
10009538:	d10b      	bne.n	10009552 <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000953a:	ab01      	add	r3, sp, #4
1000953c:	2203      	movs	r2, #3
1000953e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009540:	4a17      	ldr	r2, [pc, #92]	; (100095a0 <mpu_init+0x2f0>)
10009542:	2127      	movs	r1, #39	; 0x27
10009544:	6810      	ldr	r0, [r2, #0]
10009546:	5c41      	ldrb	r1, [r0, r1]
10009548:	6852      	ldr	r2, [r2, #4]
1000954a:	7810      	ldrb	r0, [r2, #0]
1000954c:	2201      	movs	r2, #1
1000954e:	4c15      	ldr	r4, [pc, #84]	; (100095a4 <mpu_init+0x2f4>)
10009550:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009552:	200a      	movs	r0, #10
10009554:	4b20      	ldr	r3, [pc, #128]	; (100095d8 <mpu_init+0x328>)
10009556:	4798      	blx	r3
10009558:	1e04      	subs	r4, r0, #0
1000955a:	d11b      	bne.n	10009594 <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000955c:	2000      	movs	r0, #0
1000955e:	4b1f      	ldr	r3, [pc, #124]	; (100095dc <mpu_init+0x32c>)
10009560:	4798      	blx	r3
    return 0;
10009562:	e019      	b.n	10009598 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009564:	2401      	movs	r4, #1
10009566:	4264      	negs	r4, r4
10009568:	e016      	b.n	10009598 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000956a:	2401      	movs	r4, #1
1000956c:	4264      	negs	r4, r4
1000956e:	e013      	b.n	10009598 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009570:	2401      	movs	r4, #1
10009572:	4264      	negs	r4, r4
10009574:	e010      	b.n	10009598 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
10009576:	2401      	movs	r4, #1
10009578:	4264      	negs	r4, r4
1000957a:	e00d      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
1000957c:	2401      	movs	r4, #1
1000957e:	4264      	negs	r4, r4
10009580:	e00a      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
10009582:	2401      	movs	r4, #1
10009584:	4264      	negs	r4, r4
10009586:	e007      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
10009588:	2401      	movs	r4, #1
1000958a:	4264      	negs	r4, r4
1000958c:	e004      	b.n	10009598 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
1000958e:	2401      	movs	r4, #1
10009590:	4264      	negs	r4, r4
10009592:	e001      	b.n	10009598 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
10009594:	2401      	movs	r4, #1
10009596:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009598:	0020      	movs	r0, r4
1000959a:	b005      	add	sp, #20
1000959c:	bd30      	pop	{r4, r5, pc}
1000959e:	46c0      	nop			; (mov r8, r8)
100095a0:	10018444 	.word	0x10018444
100095a4:	1000aab1 	.word	0x1000aab1
100095a8:	10008129 	.word	0x10008129
100095ac:	100150e9 	.word	0x100150e9
100095b0:	100087b5 	.word	0x100087b5
100095b4:	100088a1 	.word	0x100088a1
100095b8:	10008935 	.word	0x10008935
100095bc:	10008ff5 	.word	0x10008ff5
100095c0:	10008a85 	.word	0x10008a85
100095c4:	10008cbd 	.word	0x10008cbd
100095c8:	1000ab0d 	.word	0x1000ab0d
100095cc:	100164f8 	.word	0x100164f8
100095d0:	10015351 	.word	0x10015351
100095d4:	10016368 	.word	0x10016368
100095d8:	10008a0d 	.word	0x10008a0d
100095dc:	100090c9 	.word	0x100090c9

100095e0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100095e0:	b570      	push	{r4, r5, r6, lr}
100095e2:	b082      	sub	sp, #8
100095e4:	000c      	movs	r4, r1
100095e6:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100095e8:	d025      	beq.n	10009636 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100095ea:	4b19      	ldr	r3, [pc, #100]	; (10009650 <mpu_write_mem+0x70>)
100095ec:	7a9b      	ldrb	r3, [r3, #10]
100095ee:	2b00      	cmp	r3, #0
100095f0:	d024      	beq.n	1000963c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100095f2:	ab01      	add	r3, sp, #4
100095f4:	0a02      	lsrs	r2, r0, #8
100095f6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100095f8:	b2c0      	uxtb	r0, r0
100095fa:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100095fc:	4b14      	ldr	r3, [pc, #80]	; (10009650 <mpu_write_mem+0x70>)
100095fe:	685b      	ldr	r3, [r3, #4]
10009600:	1840      	adds	r0, r0, r1
10009602:	895a      	ldrh	r2, [r3, #10]
10009604:	4290      	cmp	r0, r2
10009606:	dc1c      	bgt.n	10009642 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009608:	4a11      	ldr	r2, [pc, #68]	; (10009650 <mpu_write_mem+0x70>)
1000960a:	6812      	ldr	r2, [r2, #0]
1000960c:	7ed1      	ldrb	r1, [r2, #27]
1000960e:	7818      	ldrb	r0, [r3, #0]
10009610:	ab01      	add	r3, sp, #4
10009612:	2202      	movs	r2, #2
10009614:	4e0f      	ldr	r6, [pc, #60]	; (10009654 <mpu_write_mem+0x74>)
10009616:	47b0      	blx	r6
10009618:	2800      	cmp	r0, #0
1000961a:	d115      	bne.n	10009648 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000961c:	b2e2      	uxtb	r2, r4
1000961e:	4b0c      	ldr	r3, [pc, #48]	; (10009650 <mpu_write_mem+0x70>)
10009620:	6819      	ldr	r1, [r3, #0]
10009622:	7e09      	ldrb	r1, [r1, #24]
10009624:	685b      	ldr	r3, [r3, #4]
10009626:	7818      	ldrb	r0, [r3, #0]
10009628:	002b      	movs	r3, r5
1000962a:	4c0a      	ldr	r4, [pc, #40]	; (10009654 <mpu_write_mem+0x74>)
1000962c:	47a0      	blx	r4
1000962e:	1e43      	subs	r3, r0, #1
10009630:	4198      	sbcs	r0, r3
10009632:	4240      	negs	r0, r0
10009634:	e00a      	b.n	1000964c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009636:	2001      	movs	r0, #1
10009638:	4240      	negs	r0, r0
1000963a:	e007      	b.n	1000964c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000963c:	2001      	movs	r0, #1
1000963e:	4240      	negs	r0, r0
10009640:	e004      	b.n	1000964c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009642:	2001      	movs	r0, #1
10009644:	4240      	negs	r0, r0
10009646:	e001      	b.n	1000964c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009648:	2001      	movs	r0, #1
1000964a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000964c:	b002      	add	sp, #8
1000964e:	bd70      	pop	{r4, r5, r6, pc}
10009650:	10018444 	.word	0x10018444
10009654:	1000aab1 	.word	0x1000aab1

10009658 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009658:	b570      	push	{r4, r5, r6, lr}
1000965a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000965c:	2324      	movs	r3, #36	; 0x24
1000965e:	4a21      	ldr	r2, [pc, #132]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009660:	5cd3      	ldrb	r3, [r2, r3]
10009662:	4283      	cmp	r3, r0
10009664:	d037      	beq.n	100096d6 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009666:	2800      	cmp	r0, #0
10009668:	d020      	beq.n	100096ac <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000966a:	2325      	movs	r3, #37	; 0x25
1000966c:	5cd3      	ldrb	r3, [r2, r3]
1000966e:	2b00      	cmp	r3, #0
10009670:	d033      	beq.n	100096da <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009672:	2000      	movs	r0, #0
10009674:	4d1c      	ldr	r5, [pc, #112]	; (100096e8 <mpu_set_dmp_state+0x90>)
10009676:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009678:	2000      	movs	r0, #0
1000967a:	4b1c      	ldr	r3, [pc, #112]	; (100096ec <mpu_set_dmp_state+0x94>)
1000967c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000967e:	4c19      	ldr	r4, [pc, #100]	; (100096e4 <mpu_set_dmp_state+0x8c>)
10009680:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009682:	4b1b      	ldr	r3, [pc, #108]	; (100096f0 <mpu_set_dmp_state+0x98>)
10009684:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009686:	466b      	mov	r3, sp
10009688:	3307      	adds	r3, #7
1000968a:	2200      	movs	r2, #0
1000968c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000968e:	6862      	ldr	r2, [r4, #4]
10009690:	7810      	ldrb	r0, [r2, #0]
10009692:	2201      	movs	r2, #1
10009694:	2123      	movs	r1, #35	; 0x23
10009696:	4e17      	ldr	r6, [pc, #92]	; (100096f4 <mpu_set_dmp_state+0x9c>)
10009698:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000969a:	2201      	movs	r2, #1
1000969c:	2324      	movs	r3, #36	; 0x24
1000969e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100096a0:	2001      	movs	r0, #1
100096a2:	47a8      	blx	r5
        mpu_reset_fifo();
100096a4:	4b14      	ldr	r3, [pc, #80]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096a6:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100096a8:	2000      	movs	r0, #0
100096aa:	e018      	b.n	100096de <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100096ac:	2000      	movs	r0, #0
100096ae:	4b0e      	ldr	r3, [pc, #56]	; (100096e8 <mpu_set_dmp_state+0x90>)
100096b0:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100096b2:	466b      	mov	r3, sp
100096b4:	3307      	adds	r3, #7
100096b6:	4c0b      	ldr	r4, [pc, #44]	; (100096e4 <mpu_set_dmp_state+0x8c>)
100096b8:	7c22      	ldrb	r2, [r4, #16]
100096ba:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100096bc:	6862      	ldr	r2, [r4, #4]
100096be:	7810      	ldrb	r0, [r2, #0]
100096c0:	2201      	movs	r2, #1
100096c2:	2123      	movs	r1, #35	; 0x23
100096c4:	4d0b      	ldr	r5, [pc, #44]	; (100096f4 <mpu_set_dmp_state+0x9c>)
100096c6:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
100096c8:	2200      	movs	r2, #0
100096ca:	2324      	movs	r3, #36	; 0x24
100096cc:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
100096ce:	4b0a      	ldr	r3, [pc, #40]	; (100096f8 <mpu_set_dmp_state+0xa0>)
100096d0:	4798      	blx	r3
    }
    return 0;
100096d2:	2000      	movs	r0, #0
100096d4:	e003      	b.n	100096de <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100096d6:	2000      	movs	r0, #0
100096d8:	e001      	b.n	100096de <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100096da:	2001      	movs	r0, #1
100096dc:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
100096de:	b002      	add	sp, #8
100096e0:	bd70      	pop	{r4, r5, r6, pc}
100096e2:	46c0      	nop			; (mov r8, r8)
100096e4:	10018444 	.word	0x10018444
100096e8:	10008461 	.word	0x10008461
100096ec:	10008cbd 	.word	0x10008cbd
100096f0:	10008ff5 	.word	0x10008ff5
100096f4:	1000aab1 	.word	0x1000aab1
100096f8:	100085bd 	.word	0x100085bd

100096fc <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100096fe:	b085      	sub	sp, #20
10009700:	0006      	movs	r6, r0
10009702:	000d      	movs	r5, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009704:	4b29      	ldr	r3, [pc, #164]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009706:	7a9b      	ldrb	r3, [r3, #10]
10009708:	07db      	lsls	r3, r3, #31
1000970a:	d540      	bpl.n	1000978e <mpu_get_compass_reg+0x92>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
1000970c:	4b27      	ldr	r3, [pc, #156]	; (100097ac <mpu_get_compass_reg+0xb0>)
1000970e:	2228      	movs	r2, #40	; 0x28
10009710:	6819      	ldr	r1, [r3, #0]
10009712:	5c89      	ldrb	r1, [r1, r2]
10009714:	685b      	ldr	r3, [r3, #4]
10009716:	7818      	ldrb	r0, [r3, #0]
10009718:	ab01      	add	r3, sp, #4
1000971a:	3a20      	subs	r2, #32
1000971c:	4c24      	ldr	r4, [pc, #144]	; (100097b0 <mpu_get_compass_reg+0xb4>)
1000971e:	47a0      	blx	r4
10009720:	1e04      	subs	r4, r0, #0
10009722:	d137      	bne.n	10009794 <mpu_get_compass_reg+0x98>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009724:	ab01      	add	r3, sp, #4
10009726:	781b      	ldrb	r3, [r3, #0]
10009728:	2203      	movs	r2, #3
1000972a:	4013      	ands	r3, r2
1000972c:	2b01      	cmp	r3, #1
1000972e:	d134      	bne.n	1000979a <mpu_get_compass_reg+0x9e>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009730:	ab01      	add	r3, sp, #4
10009732:	79db      	ldrb	r3, [r3, #7]
10009734:	2b7f      	cmp	r3, #127	; 0x7f
10009736:	d833      	bhi.n	100097a0 <mpu_get_compass_reg+0xa4>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
10009738:	a801      	add	r0, sp, #4
1000973a:	7881      	ldrb	r1, [r0, #2]
1000973c:	0209      	lsls	r1, r1, #8
1000973e:	7843      	ldrb	r3, [r0, #1]
10009740:	4319      	orrs	r1, r3
10009742:	b209      	sxth	r1, r1
10009744:	8031      	strh	r1, [r6, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
10009746:	7902      	ldrb	r2, [r0, #4]
10009748:	0212      	lsls	r2, r2, #8
1000974a:	78c3      	ldrb	r3, [r0, #3]
1000974c:	431a      	orrs	r2, r3
1000974e:	b212      	sxth	r2, r2
10009750:	8072      	strh	r2, [r6, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009752:	7983      	ldrb	r3, [r0, #6]
10009754:	021b      	lsls	r3, r3, #8
10009756:	7940      	ldrb	r0, [r0, #5]
10009758:	4303      	orrs	r3, r0
1000975a:	b21b      	sxth	r3, r3
1000975c:	469c      	mov	ip, r3
1000975e:	80b3      	strh	r3, [r6, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
10009760:	4812      	ldr	r0, [pc, #72]	; (100097ac <mpu_get_compass_reg+0xb0>)
10009762:	232c      	movs	r3, #44	; 0x2c
10009764:	5ec7      	ldrsh	r7, [r0, r3]
10009766:	4379      	muls	r1, r7
10009768:	1209      	asrs	r1, r1, #8
1000976a:	8031      	strh	r1, [r6, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
1000976c:	232e      	movs	r3, #46	; 0x2e
1000976e:	5ec1      	ldrsh	r1, [r0, r3]
10009770:	434a      	muls	r2, r1
10009772:	1212      	asrs	r2, r2, #8
10009774:	8072      	strh	r2, [r6, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
10009776:	2330      	movs	r3, #48	; 0x30
10009778:	5ec2      	ldrsh	r2, [r0, r3]
1000977a:	4663      	mov	r3, ip
1000977c:	4353      	muls	r3, r2
1000977e:	121b      	asrs	r3, r3, #8
10009780:	80b3      	strh	r3, [r6, #4]

    if (timestamp)
10009782:	2d00      	cmp	r5, #0
10009784:	d00e      	beq.n	100097a4 <mpu_get_compass_reg+0xa8>
        get_ms(timestamp);
10009786:	0028      	movs	r0, r5
10009788:	4b0a      	ldr	r3, [pc, #40]	; (100097b4 <mpu_get_compass_reg+0xb8>)
1000978a:	4798      	blx	r3
1000978c:	e00a      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
1000978e:	2401      	movs	r4, #1
10009790:	4264      	negs	r4, r4
10009792:	e007      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
        return -1;
10009794:	2401      	movs	r4, #1
10009796:	4264      	negs	r4, r4
10009798:	e004      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
1000979a:	2402      	movs	r4, #2
1000979c:	4264      	negs	r4, r4
1000979e:	e001      	b.n	100097a4 <mpu_get_compass_reg+0xa8>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100097a0:	2403      	movs	r4, #3
100097a2:	4264      	negs	r4, r4
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100097a4:	0020      	movs	r0, r4
100097a6:	b005      	add	sp, #20
100097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097aa:	46c0      	nop			; (mov r8, r8)
100097ac:	10018444 	.word	0x10018444
100097b0:	1000ab0d 	.word	0x1000ab0d
100097b4:	1000b40d 	.word	0x1000b40d

100097b8 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100097b8:	4b02      	ldr	r3, [pc, #8]	; (100097c4 <mpu_get_compass_fsr+0xc>)
100097ba:	685b      	ldr	r3, [r3, #4]
100097bc:	899b      	ldrh	r3, [r3, #12]
100097be:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100097c0:	2000      	movs	r0, #0
100097c2:	4770      	bx	lr
100097c4:	10018444 	.word	0x10018444

100097c8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100097c8:	b510      	push	{r4, lr}
100097ca:	b086      	sub	sp, #24
100097cc:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100097ce:	220c      	movs	r2, #12
100097d0:	4915      	ldr	r1, [pc, #84]	; (10009828 <dmp_set_fifo_rate+0x60>)
100097d2:	3110      	adds	r1, #16
100097d4:	a803      	add	r0, sp, #12
100097d6:	4b15      	ldr	r3, [pc, #84]	; (1000982c <dmp_set_fifo_rate+0x64>)
100097d8:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100097da:	2cc8      	cmp	r4, #200	; 0xc8
100097dc:	d819      	bhi.n	10009812 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100097de:	0021      	movs	r1, r4
100097e0:	20c8      	movs	r0, #200	; 0xc8
100097e2:	4b13      	ldr	r3, [pc, #76]	; (10009830 <dmp_set_fifo_rate+0x68>)
100097e4:	4798      	blx	r3
100097e6:	3801      	subs	r0, #1
100097e8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100097ea:	aa01      	add	r2, sp, #4
100097ec:	0a03      	lsrs	r3, r0, #8
100097ee:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
100097f0:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100097f2:	2102      	movs	r1, #2
100097f4:	480f      	ldr	r0, [pc, #60]	; (10009834 <dmp_set_fifo_rate+0x6c>)
100097f6:	4b10      	ldr	r3, [pc, #64]	; (10009838 <dmp_set_fifo_rate+0x70>)
100097f8:	4798      	blx	r3
100097fa:	2800      	cmp	r0, #0
100097fc:	d10c      	bne.n	10009818 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100097fe:	aa03      	add	r2, sp, #12
10009800:	210c      	movs	r1, #12
10009802:	480e      	ldr	r0, [pc, #56]	; (1000983c <dmp_set_fifo_rate+0x74>)
10009804:	4b0c      	ldr	r3, [pc, #48]	; (10009838 <dmp_set_fifo_rate+0x70>)
10009806:	4798      	blx	r3
10009808:	2800      	cmp	r0, #0
1000980a:	d108      	bne.n	1000981e <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
1000980c:	4b0c      	ldr	r3, [pc, #48]	; (10009840 <dmp_set_fifo_rate+0x78>)
1000980e:	819c      	strh	r4, [r3, #12]
    return 0;
10009810:	e007      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009812:	2001      	movs	r0, #1
10009814:	4240      	negs	r0, r0
10009816:	e004      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
10009818:	2001      	movs	r0, #1
1000981a:	4240      	negs	r0, r0
1000981c:	e001      	b.n	10009822 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
1000981e:	2001      	movs	r0, #1
10009820:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009822:	b006      	add	sp, #24
10009824:	bd10      	pop	{r4, pc}
10009826:	46c0      	nop			; (mov r8, r8)
10009828:	10016744 	.word	0x10016744
1000982c:	100150d7 	.word	0x100150d7
10009830:	100130f9 	.word	0x100130f9
10009834:	00000216 	.word	0x00000216
10009838:	100095e1 	.word	0x100095e1
1000983c:	00000ac1 	.word	0x00000ac1
10009840:	10018508 	.word	0x10018508

10009844 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009844:	b5f0      	push	{r4, r5, r6, r7, lr}
10009846:	4647      	mov	r7, r8
10009848:	b480      	push	{r7}
1000984a:	b082      	sub	sp, #8
1000984c:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000984e:	0743      	lsls	r3, r0, #29
10009850:	d100      	bne.n	10009854 <dmp_set_tap_thresh+0x10>
10009852:	e09c      	b.n	1000998e <dmp_set_tap_thresh+0x14a>
10009854:	23c8      	movs	r3, #200	; 0xc8
10009856:	00db      	lsls	r3, r3, #3
10009858:	4299      	cmp	r1, r3
1000985a:	d900      	bls.n	1000985e <dmp_set_tap_thresh+0x1a>
1000985c:	e09a      	b.n	10009994 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000985e:	0008      	movs	r0, r1
10009860:	4b58      	ldr	r3, [pc, #352]	; (100099c4 <dmp_set_tap_thresh+0x180>)
10009862:	4798      	blx	r3
10009864:	4958      	ldr	r1, [pc, #352]	; (100099c8 <dmp_set_tap_thresh+0x184>)
10009866:	4b59      	ldr	r3, [pc, #356]	; (100099cc <dmp_set_tap_thresh+0x188>)
10009868:	4798      	blx	r3
1000986a:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000986c:	466b      	mov	r3, sp
1000986e:	1cdd      	adds	r5, r3, #3
10009870:	0028      	movs	r0, r5
10009872:	4b57      	ldr	r3, [pc, #348]	; (100099d0 <dmp_set_tap_thresh+0x18c>)
10009874:	4798      	blx	r3
    switch (accel_fsr) {
10009876:	782b      	ldrb	r3, [r5, #0]
10009878:	2b04      	cmp	r3, #4
1000987a:	d019      	beq.n	100098b0 <dmp_set_tap_thresh+0x6c>
1000987c:	b2da      	uxtb	r2, r3
1000987e:	2a04      	cmp	r2, #4
10009880:	d802      	bhi.n	10009888 <dmp_set_tap_thresh+0x44>
10009882:	2b02      	cmp	r3, #2
10009884:	d005      	beq.n	10009892 <dmp_set_tap_thresh+0x4e>
10009886:	e088      	b.n	1000999a <dmp_set_tap_thresh+0x156>
10009888:	2b08      	cmp	r3, #8
1000988a:	d020      	beq.n	100098ce <dmp_set_tap_thresh+0x8a>
1000988c:	2b10      	cmp	r3, #16
1000988e:	d02d      	beq.n	100098ec <dmp_set_tap_thresh+0xa8>
10009890:	e083      	b.n	1000999a <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009892:	4b50      	ldr	r3, [pc, #320]	; (100099d4 <dmp_set_tap_thresh+0x190>)
10009894:	4698      	mov	r8, r3
10009896:	218d      	movs	r1, #141	; 0x8d
10009898:	05c9      	lsls	r1, r1, #23
1000989a:	1c30      	adds	r0, r6, #0
1000989c:	4798      	blx	r3
1000989e:	4f4e      	ldr	r7, [pc, #312]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098a0:	47b8      	blx	r7
100098a2:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100098a4:	494d      	ldr	r1, [pc, #308]	; (100099dc <dmp_set_tap_thresh+0x198>)
100098a6:	1c30      	adds	r0, r6, #0
100098a8:	47c0      	blx	r8
100098aa:	47b8      	blx	r7
100098ac:	b280      	uxth	r0, r0
        break;
100098ae:	e02b      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100098b0:	4b48      	ldr	r3, [pc, #288]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098b2:	4698      	mov	r8, r3
100098b4:	218c      	movs	r1, #140	; 0x8c
100098b6:	05c9      	lsls	r1, r1, #23
100098b8:	1c30      	adds	r0, r6, #0
100098ba:	4798      	blx	r3
100098bc:	4f46      	ldr	r7, [pc, #280]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098be:	47b8      	blx	r7
100098c0:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
100098c2:	4947      	ldr	r1, [pc, #284]	; (100099e0 <dmp_set_tap_thresh+0x19c>)
100098c4:	1c30      	adds	r0, r6, #0
100098c6:	47c0      	blx	r8
100098c8:	47b8      	blx	r7
100098ca:	b280      	uxth	r0, r0
        break;
100098cc:	e01c      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100098ce:	4b41      	ldr	r3, [pc, #260]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098d0:	4698      	mov	r8, r3
100098d2:	218b      	movs	r1, #139	; 0x8b
100098d4:	05c9      	lsls	r1, r1, #23
100098d6:	1c30      	adds	r0, r6, #0
100098d8:	4798      	blx	r3
100098da:	4f3f      	ldr	r7, [pc, #252]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098dc:	47b8      	blx	r7
100098de:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
100098e0:	4940      	ldr	r1, [pc, #256]	; (100099e4 <dmp_set_tap_thresh+0x1a0>)
100098e2:	1c30      	adds	r0, r6, #0
100098e4:	47c0      	blx	r8
100098e6:	47b8      	blx	r7
100098e8:	b280      	uxth	r0, r0
        break;
100098ea:	e00d      	b.n	10009908 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100098ec:	4b39      	ldr	r3, [pc, #228]	; (100099d4 <dmp_set_tap_thresh+0x190>)
100098ee:	4698      	mov	r8, r3
100098f0:	218a      	movs	r1, #138	; 0x8a
100098f2:	05c9      	lsls	r1, r1, #23
100098f4:	1c30      	adds	r0, r6, #0
100098f6:	4798      	blx	r3
100098f8:	4f37      	ldr	r7, [pc, #220]	; (100099d8 <dmp_set_tap_thresh+0x194>)
100098fa:	47b8      	blx	r7
100098fc:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100098fe:	493a      	ldr	r1, [pc, #232]	; (100099e8 <dmp_set_tap_thresh+0x1a4>)
10009900:	1c30      	adds	r0, r6, #0
10009902:	47c0      	blx	r8
10009904:	47b8      	blx	r7
10009906:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009908:	ab01      	add	r3, sp, #4
1000990a:	0a2a      	lsrs	r2, r5, #8
1000990c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000990e:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009910:	0a02      	lsrs	r2, r0, #8
10009912:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009914:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
10009916:	07e3      	lsls	r3, r4, #31
10009918:	d510      	bpl.n	1000993c <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000991a:	aa01      	add	r2, sp, #4
1000991c:	2102      	movs	r1, #2
1000991e:	20ea      	movs	r0, #234	; 0xea
10009920:	0040      	lsls	r0, r0, #1
10009922:	4b32      	ldr	r3, [pc, #200]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009924:	4798      	blx	r3
10009926:	2800      	cmp	r0, #0
10009928:	d13a      	bne.n	100099a0 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000992a:	466b      	mov	r3, sp
1000992c:	1d9a      	adds	r2, r3, #6
1000992e:	2102      	movs	r1, #2
10009930:	3025      	adds	r0, #37	; 0x25
10009932:	30ff      	adds	r0, #255	; 0xff
10009934:	4b2d      	ldr	r3, [pc, #180]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009936:	4798      	blx	r3
10009938:	2800      	cmp	r0, #0
1000993a:	d134      	bne.n	100099a6 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
1000993c:	07a3      	lsls	r3, r4, #30
1000993e:	d510      	bpl.n	10009962 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009940:	aa01      	add	r2, sp, #4
10009942:	2102      	movs	r1, #2
10009944:	20ec      	movs	r0, #236	; 0xec
10009946:	0040      	lsls	r0, r0, #1
10009948:	4b28      	ldr	r3, [pc, #160]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000994a:	4798      	blx	r3
1000994c:	2800      	cmp	r0, #0
1000994e:	d12d      	bne.n	100099ac <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009950:	466b      	mov	r3, sp
10009952:	1d9a      	adds	r2, r3, #6
10009954:	2102      	movs	r1, #2
10009956:	3029      	adds	r0, #41	; 0x29
10009958:	30ff      	adds	r0, #255	; 0xff
1000995a:	4b24      	ldr	r3, [pc, #144]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
1000995c:	4798      	blx	r3
1000995e:	2800      	cmp	r0, #0
10009960:	d127      	bne.n	100099b2 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009962:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009964:	0763      	lsls	r3, r4, #29
10009966:	d529      	bpl.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009968:	aa01      	add	r2, sp, #4
1000996a:	2102      	movs	r1, #2
1000996c:	30dd      	adds	r0, #221	; 0xdd
1000996e:	30ff      	adds	r0, #255	; 0xff
10009970:	4b1e      	ldr	r3, [pc, #120]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009972:	4798      	blx	r3
10009974:	2800      	cmp	r0, #0
10009976:	d11f      	bne.n	100099b8 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009978:	466b      	mov	r3, sp
1000997a:	1d9a      	adds	r2, r3, #6
1000997c:	2102      	movs	r1, #2
1000997e:	302d      	adds	r0, #45	; 0x2d
10009980:	30ff      	adds	r0, #255	; 0xff
10009982:	4b1a      	ldr	r3, [pc, #104]	; (100099ec <dmp_set_tap_thresh+0x1a8>)
10009984:	4798      	blx	r3
10009986:	1e43      	subs	r3, r0, #1
10009988:	4198      	sbcs	r0, r3
1000998a:	4240      	negs	r0, r0
1000998c:	e016      	b.n	100099bc <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000998e:	2001      	movs	r0, #1
10009990:	4240      	negs	r0, r0
10009992:	e013      	b.n	100099bc <dmp_set_tap_thresh+0x178>
10009994:	2001      	movs	r0, #1
10009996:	4240      	negs	r0, r0
10009998:	e010      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000999a:	2001      	movs	r0, #1
1000999c:	4240      	negs	r0, r0
1000999e:	e00d      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100099a0:	2001      	movs	r0, #1
100099a2:	4240      	negs	r0, r0
100099a4:	e00a      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100099a6:	2001      	movs	r0, #1
100099a8:	4240      	negs	r0, r0
100099aa:	e007      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100099ac:	2001      	movs	r0, #1
100099ae:	4240      	negs	r0, r0
100099b0:	e004      	b.n	100099bc <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100099b2:	2001      	movs	r0, #1
100099b4:	4240      	negs	r0, r0
100099b6:	e001      	b.n	100099bc <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100099b8:	2001      	movs	r0, #1
100099ba:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100099bc:	b002      	add	sp, #8
100099be:	bc04      	pop	{r2}
100099c0:	4690      	mov	r8, r2
100099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099c4:	1001410d 	.word	0x1001410d
100099c8:	43480000 	.word	0x43480000
100099cc:	10013771 	.word	0x10013771
100099d0:	10008855 	.word	0x10008855
100099d4:	10013b05 	.word	0x10013b05
100099d8:	10013419 	.word	0x10013419
100099dc:	46400000 	.word	0x46400000
100099e0:	45c00000 	.word	0x45c00000
100099e4:	45400000 	.word	0x45400000
100099e8:	44c00000 	.word	0x44c00000
100099ec:	100095e1 	.word	0x100095e1

100099f0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100099f0:	b500      	push	{lr}
100099f2:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100099f4:	07c3      	lsls	r3, r0, #31
100099f6:	d403      	bmi.n	10009a00 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100099f8:	2200      	movs	r2, #0
100099fa:	466b      	mov	r3, sp
100099fc:	71da      	strb	r2, [r3, #7]
100099fe:	e002      	b.n	10009a06 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009a00:	2230      	movs	r2, #48	; 0x30
10009a02:	466b      	mov	r3, sp
10009a04:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009a06:	0783      	lsls	r3, r0, #30
10009a08:	d505      	bpl.n	10009a16 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009a0a:	466b      	mov	r3, sp
10009a0c:	1dda      	adds	r2, r3, #7
10009a0e:	79d9      	ldrb	r1, [r3, #7]
10009a10:	230c      	movs	r3, #12
10009a12:	430b      	orrs	r3, r1
10009a14:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009a16:	0743      	lsls	r3, r0, #29
10009a18:	d505      	bpl.n	10009a26 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
10009a1a:	466b      	mov	r3, sp
10009a1c:	1dda      	adds	r2, r3, #7
10009a1e:	79d9      	ldrb	r1, [r3, #7]
10009a20:	2303      	movs	r3, #3
10009a22:	430b      	orrs	r3, r1
10009a24:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
10009a26:	466b      	mov	r3, sp
10009a28:	1dda      	adds	r2, r3, #7
10009a2a:	2101      	movs	r1, #1
10009a2c:	20a4      	movs	r0, #164	; 0xa4
10009a2e:	0040      	lsls	r0, r0, #1
10009a30:	4b01      	ldr	r3, [pc, #4]	; (10009a38 <dmp_set_tap_axes+0x48>)
10009a32:	4798      	blx	r3
}
10009a34:	b003      	add	sp, #12
10009a36:	bd00      	pop	{pc}
10009a38:	100095e1 	.word	0x100095e1

10009a3c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009a3c:	b500      	push	{lr}
10009a3e:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009a40:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009a42:	2800      	cmp	r0, #0
10009a44:	d004      	beq.n	10009a50 <dmp_set_tap_count+0x14>
10009a46:	1c03      	adds	r3, r0, #0
10009a48:	2804      	cmp	r0, #4
10009a4a:	d900      	bls.n	10009a4e <dmp_set_tap_count+0x12>
10009a4c:	2304      	movs	r3, #4
10009a4e:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009a50:	466a      	mov	r2, sp
10009a52:	3207      	adds	r2, #7
10009a54:	3b01      	subs	r3, #1
10009a56:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009a58:	2101      	movs	r1, #1
10009a5a:	2050      	movs	r0, #80	; 0x50
10009a5c:	30ff      	adds	r0, #255	; 0xff
10009a5e:	4b02      	ldr	r3, [pc, #8]	; (10009a68 <dmp_set_tap_count+0x2c>)
10009a60:	4798      	blx	r3
}
10009a62:	b003      	add	sp, #12
10009a64:	bd00      	pop	{pc}
10009a66:	46c0      	nop			; (mov r8, r8)
10009a68:	100095e1 	.word	0x100095e1

10009a6c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009a6c:	b500      	push	{lr}
10009a6e:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a70:	2105      	movs	r1, #5
10009a72:	4b07      	ldr	r3, [pc, #28]	; (10009a90 <dmp_set_tap_time+0x24>)
10009a74:	4798      	blx	r3
10009a76:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009a78:	aa01      	add	r2, sp, #4
10009a7a:	0a03      	lsrs	r3, r0, #8
10009a7c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009a7e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009a80:	2102      	movs	r1, #2
10009a82:	20ef      	movs	r0, #239	; 0xef
10009a84:	0040      	lsls	r0, r0, #1
10009a86:	4b03      	ldr	r3, [pc, #12]	; (10009a94 <dmp_set_tap_time+0x28>)
10009a88:	4798      	blx	r3
}
10009a8a:	b003      	add	sp, #12
10009a8c:	bd00      	pop	{pc}
10009a8e:	46c0      	nop			; (mov r8, r8)
10009a90:	10012fe5 	.word	0x10012fe5
10009a94:	100095e1 	.word	0x100095e1

10009a98 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009a98:	b500      	push	{lr}
10009a9a:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009a9c:	2105      	movs	r1, #5
10009a9e:	4b07      	ldr	r3, [pc, #28]	; (10009abc <dmp_set_tap_time_multi+0x24>)
10009aa0:	4798      	blx	r3
10009aa2:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009aa4:	aa01      	add	r2, sp, #4
10009aa6:	0a03      	lsrs	r3, r0, #8
10009aa8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009aaa:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009aac:	2102      	movs	r1, #2
10009aae:	20ed      	movs	r0, #237	; 0xed
10009ab0:	0040      	lsls	r0, r0, #1
10009ab2:	4b03      	ldr	r3, [pc, #12]	; (10009ac0 <dmp_set_tap_time_multi+0x28>)
10009ab4:	4798      	blx	r3
}
10009ab6:	b003      	add	sp, #12
10009ab8:	bd00      	pop	{pc}
10009aba:	46c0      	nop			; (mov r8, r8)
10009abc:	10012fe5 	.word	0x10012fe5
10009ac0:	100095e1 	.word	0x100095e1

10009ac4 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009ac4:	b510      	push	{r4, lr}
10009ac6:	b082      	sub	sp, #8
10009ac8:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009aca:	21fa      	movs	r1, #250	; 0xfa
10009acc:	0089      	lsls	r1, r1, #2
10009ace:	4b09      	ldr	r3, [pc, #36]	; (10009af4 <dmp_set_shake_reject_thresh+0x30>)
10009ad0:	4798      	blx	r3
10009ad2:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009ad4:	aa01      	add	r2, sp, #4
10009ad6:	1603      	asrs	r3, r0, #24
10009ad8:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009ada:	1403      	asrs	r3, r0, #16
10009adc:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009ade:	1203      	asrs	r3, r0, #8
10009ae0:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009ae2:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009ae4:	2104      	movs	r1, #4
10009ae6:	20ae      	movs	r0, #174	; 0xae
10009ae8:	0040      	lsls	r0, r0, #1
10009aea:	4b03      	ldr	r3, [pc, #12]	; (10009af8 <dmp_set_shake_reject_thresh+0x34>)
10009aec:	4798      	blx	r3
}
10009aee:	b002      	add	sp, #8
10009af0:	bd10      	pop	{r4, pc}
10009af2:	46c0      	nop			; (mov r8, r8)
10009af4:	100130f9 	.word	0x100130f9
10009af8:	100095e1 	.word	0x100095e1

10009afc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009afc:	b500      	push	{lr}
10009afe:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b00:	2105      	movs	r1, #5
10009b02:	4b07      	ldr	r3, [pc, #28]	; (10009b20 <dmp_set_shake_reject_time+0x24>)
10009b04:	4798      	blx	r3
10009b06:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b08:	aa01      	add	r2, sp, #4
10009b0a:	0a03      	lsrs	r3, r0, #8
10009b0c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b0e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009b10:	2102      	movs	r1, #2
10009b12:	20ad      	movs	r0, #173	; 0xad
10009b14:	0040      	lsls	r0, r0, #1
10009b16:	4b03      	ldr	r3, [pc, #12]	; (10009b24 <dmp_set_shake_reject_time+0x28>)
10009b18:	4798      	blx	r3
}
10009b1a:	b003      	add	sp, #12
10009b1c:	bd00      	pop	{pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	10012fe5 	.word	0x10012fe5
10009b24:	100095e1 	.word	0x100095e1

10009b28 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009b28:	b500      	push	{lr}
10009b2a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009b2c:	2105      	movs	r1, #5
10009b2e:	4b07      	ldr	r3, [pc, #28]	; (10009b4c <dmp_set_shake_reject_timeout+0x24>)
10009b30:	4798      	blx	r3
10009b32:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009b34:	aa01      	add	r2, sp, #4
10009b36:	0a03      	lsrs	r3, r0, #8
10009b38:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009b3a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009b3c:	2102      	movs	r1, #2
10009b3e:	20ac      	movs	r0, #172	; 0xac
10009b40:	0040      	lsls	r0, r0, #1
10009b42:	4b03      	ldr	r3, [pc, #12]	; (10009b50 <dmp_set_shake_reject_timeout+0x28>)
10009b44:	4798      	blx	r3
}
10009b46:	b003      	add	sp, #12
10009b48:	bd00      	pop	{pc}
10009b4a:	46c0      	nop			; (mov r8, r8)
10009b4c:	10012fe5 	.word	0x10012fe5
10009b50:	100095e1 	.word	0x100095e1

10009b54 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009b54:	b500      	push	{lr}
10009b56:	b085      	sub	sp, #20
    if (enable) {
10009b58:	2800      	cmp	r0, #0
10009b5a:	d00c      	beq.n	10009b76 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009b5c:	2209      	movs	r2, #9
10009b5e:	490d      	ldr	r1, [pc, #52]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b60:	311c      	adds	r1, #28
10009b62:	a801      	add	r0, sp, #4
10009b64:	4b0c      	ldr	r3, [pc, #48]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b66:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	2109      	movs	r1, #9
10009b6c:	2097      	movs	r0, #151	; 0x97
10009b6e:	00c0      	lsls	r0, r0, #3
10009b70:	4b0a      	ldr	r3, [pc, #40]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b72:	4798      	blx	r3
10009b74:	e00b      	b.n	10009b8e <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009b76:	2209      	movs	r2, #9
10009b78:	4906      	ldr	r1, [pc, #24]	; (10009b94 <dmp_enable_gyro_cal+0x40>)
10009b7a:	3128      	adds	r1, #40	; 0x28
10009b7c:	a801      	add	r0, sp, #4
10009b7e:	4b06      	ldr	r3, [pc, #24]	; (10009b98 <dmp_enable_gyro_cal+0x44>)
10009b80:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009b82:	aa01      	add	r2, sp, #4
10009b84:	2109      	movs	r1, #9
10009b86:	2097      	movs	r0, #151	; 0x97
10009b88:	00c0      	lsls	r0, r0, #3
10009b8a:	4b04      	ldr	r3, [pc, #16]	; (10009b9c <dmp_enable_gyro_cal+0x48>)
10009b8c:	4798      	blx	r3
    }
}
10009b8e:	b005      	add	sp, #20
10009b90:	bd00      	pop	{pc}
10009b92:	46c0      	nop			; (mov r8, r8)
10009b94:	10016744 	.word	0x10016744
10009b98:	100150d7 	.word	0x100150d7
10009b9c:	100095e1 	.word	0x100095e1

10009ba0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009ba0:	b500      	push	{lr}
10009ba2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009ba4:	2800      	cmp	r0, #0
10009ba6:	d009      	beq.n	10009bbc <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009ba8:	ab01      	add	r3, sp, #4
10009baa:	22c0      	movs	r2, #192	; 0xc0
10009bac:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009bae:	3202      	adds	r2, #2
10009bb0:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009bb2:	3202      	adds	r2, #2
10009bb4:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009bb6:	3202      	adds	r2, #2
10009bb8:	70da      	strb	r2, [r3, #3]
10009bba:	e001      	b.n	10009bc0 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009bbc:	4b05      	ldr	r3, [pc, #20]	; (10009bd4 <dmp_enable_lp_quat+0x34>)
10009bbe:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009bc0:	aa01      	add	r2, sp, #4
10009bc2:	2104      	movs	r1, #4
10009bc4:	4804      	ldr	r0, [pc, #16]	; (10009bd8 <dmp_enable_lp_quat+0x38>)
10009bc6:	4b05      	ldr	r3, [pc, #20]	; (10009bdc <dmp_enable_lp_quat+0x3c>)
10009bc8:	4798      	blx	r3

    return mpu_reset_fifo();
10009bca:	4b05      	ldr	r3, [pc, #20]	; (10009be0 <dmp_enable_lp_quat+0x40>)
10009bcc:	4798      	blx	r3
}
10009bce:	b003      	add	sp, #12
10009bd0:	bd00      	pop	{pc}
10009bd2:	46c0      	nop			; (mov r8, r8)
10009bd4:	8b8b8b8b 	.word	0x8b8b8b8b
10009bd8:	00000a98 	.word	0x00000a98
10009bdc:	100095e1 	.word	0x100095e1
10009be0:	100085bd 	.word	0x100085bd

10009be4 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009be4:	b500      	push	{lr}
10009be6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009be8:	2800      	cmp	r0, #0
10009bea:	d009      	beq.n	10009c00 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009bec:	ab01      	add	r3, sp, #4
10009bee:	2220      	movs	r2, #32
10009bf0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009bf2:	3208      	adds	r2, #8
10009bf4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009bf6:	3208      	adds	r2, #8
10009bf8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009bfa:	3208      	adds	r2, #8
10009bfc:	70da      	strb	r2, [r3, #3]
10009bfe:	e001      	b.n	10009c04 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009c00:	4b05      	ldr	r3, [pc, #20]	; (10009c18 <dmp_enable_6x_lp_quat+0x34>)
10009c02:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009c04:	aa01      	add	r2, sp, #4
10009c06:	2104      	movs	r1, #4
10009c08:	4804      	ldr	r0, [pc, #16]	; (10009c1c <dmp_enable_6x_lp_quat+0x38>)
10009c0a:	4b05      	ldr	r3, [pc, #20]	; (10009c20 <dmp_enable_6x_lp_quat+0x3c>)
10009c0c:	4798      	blx	r3

    return mpu_reset_fifo();
10009c0e:	4b05      	ldr	r3, [pc, #20]	; (10009c24 <dmp_enable_6x_lp_quat+0x40>)
10009c10:	4798      	blx	r3
}
10009c12:	b003      	add	sp, #12
10009c14:	bd00      	pop	{pc}
10009c16:	46c0      	nop			; (mov r8, r8)
10009c18:	a3a3a3a3 	.word	0xa3a3a3a3
10009c1c:	00000a9e 	.word	0x00000a9e
10009c20:	100095e1 	.word	0x100095e1
10009c24:	100085bd 	.word	0x100085bd

10009c28 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c2a:	b085      	sub	sp, #20
10009c2c:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009c2e:	ad01      	add	r5, sp, #4
10009c30:	2302      	movs	r3, #2
10009c32:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009c34:	33c8      	adds	r3, #200	; 0xc8
10009c36:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009c38:	3319      	adds	r3, #25
10009c3a:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009c3c:	3bda      	subs	r3, #218	; 0xda
10009c3e:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009c40:	002a      	movs	r2, r5
10009c42:	2104      	movs	r1, #4
10009c44:	2068      	movs	r0, #104	; 0x68
10009c46:	4b6a      	ldr	r3, [pc, #424]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009c48:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009c4a:	23a3      	movs	r3, #163	; 0xa3
10009c4c:	702b      	strb	r3, [r5, #0]
10009c4e:	2740      	movs	r7, #64	; 0x40
10009c50:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009c52:	d007      	beq.n	10009c64 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009c54:	ab01      	add	r3, sp, #4
10009c56:	22c0      	movs	r2, #192	; 0xc0
10009c58:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009c5a:	3208      	adds	r2, #8
10009c5c:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009c5e:	3a06      	subs	r2, #6
10009c60:	70da      	strb	r2, [r3, #3]
10009c62:	e004      	b.n	10009c6e <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009c64:	ab01      	add	r3, sp, #4
10009c66:	22a3      	movs	r2, #163	; 0xa3
10009c68:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009c6a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009c6c:	70da      	strb	r2, [r3, #3]
10009c6e:	25c0      	movs	r5, #192	; 0xc0
10009c70:	006d      	lsls	r5, r5, #1
10009c72:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009c74:	d007      	beq.n	10009c86 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009c76:	ab01      	add	r3, sp, #4
10009c78:	22c4      	movs	r2, #196	; 0xc4
10009c7a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009c7c:	3208      	adds	r2, #8
10009c7e:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009c80:	3a06      	subs	r2, #6
10009c82:	719a      	strb	r2, [r3, #6]
10009c84:	e004      	b.n	10009c90 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009c86:	ab01      	add	r3, sp, #4
10009c88:	22a3      	movs	r2, #163	; 0xa3
10009c8a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009c8c:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009c8e:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009c90:	aa01      	add	r2, sp, #4
10009c92:	23a3      	movs	r3, #163	; 0xa3
10009c94:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009c96:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009c98:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009c9a:	210a      	movs	r1, #10
10009c9c:	4855      	ldr	r0, [pc, #340]	; (10009df4 <dmp_enable_feature+0x1cc>)
10009c9e:	4b54      	ldr	r3, [pc, #336]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009ca0:	4798      	blx	r3
10009ca2:	2603      	movs	r6, #3
10009ca4:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009ca6:	d003      	beq.n	10009cb0 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009ca8:	2220      	movs	r2, #32
10009caa:	ab01      	add	r3, sp, #4
10009cac:	701a      	strb	r2, [r3, #0]
10009cae:	e002      	b.n	10009cb6 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009cb0:	22d8      	movs	r2, #216	; 0xd8
10009cb2:	ab01      	add	r3, sp, #4
10009cb4:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009cb6:	aa01      	add	r2, sp, #4
10009cb8:	2101      	movs	r1, #1
10009cba:	484f      	ldr	r0, [pc, #316]	; (10009df8 <dmp_enable_feature+0x1d0>)
10009cbc:	4b4c      	ldr	r3, [pc, #304]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009cbe:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009cc0:	06a3      	lsls	r3, r4, #26
10009cc2:	d503      	bpl.n	10009ccc <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009cc4:	2001      	movs	r0, #1
10009cc6:	4b4d      	ldr	r3, [pc, #308]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cc8:	4798      	blx	r3
10009cca:	e002      	b.n	10009cd2 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009ccc:	2000      	movs	r0, #0
10009cce:	4b4b      	ldr	r3, [pc, #300]	; (10009dfc <dmp_enable_feature+0x1d4>)
10009cd0:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009cd2:	2d00      	cmp	r5, #0
10009cd4:	d019      	beq.n	10009d0a <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009cd6:	05e3      	lsls	r3, r4, #23
10009cd8:	d509      	bpl.n	10009cee <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009cda:	ab01      	add	r3, sp, #4
10009cdc:	22b2      	movs	r2, #178	; 0xb2
10009cde:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009ce0:	3a27      	subs	r2, #39	; 0x27
10009ce2:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009ce4:	322b      	adds	r2, #43	; 0x2b
10009ce6:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009ce8:	3a1b      	subs	r2, #27
10009cea:	70da      	strb	r2, [r3, #3]
10009cec:	e008      	b.n	10009d00 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009cee:	ab01      	add	r3, sp, #4
10009cf0:	22b0      	movs	r2, #176	; 0xb0
10009cf2:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009cf4:	3a30      	subs	r2, #48	; 0x30
10009cf6:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009cf8:	3234      	adds	r2, #52	; 0x34
10009cfa:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009cfc:	3a24      	subs	r2, #36	; 0x24
10009cfe:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009d00:	aa01      	add	r2, sp, #4
10009d02:	2104      	movs	r1, #4
10009d04:	483e      	ldr	r0, [pc, #248]	; (10009e00 <dmp_enable_feature+0x1d8>)
10009d06:	4b3a      	ldr	r3, [pc, #232]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d08:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009d0a:	07e3      	lsls	r3, r4, #31
10009d0c:	d523      	bpl.n	10009d56 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009d0e:	aa01      	add	r2, sp, #4
10009d10:	23f8      	movs	r3, #248	; 0xf8
10009d12:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d14:	2101      	movs	r1, #1
10009d16:	208b      	movs	r0, #139	; 0x8b
10009d18:	0100      	lsls	r0, r0, #4
10009d1a:	4b35      	ldr	r3, [pc, #212]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d1c:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009d1e:	21fa      	movs	r1, #250	; 0xfa
10009d20:	2007      	movs	r0, #7
10009d22:	4b38      	ldr	r3, [pc, #224]	; (10009e04 <dmp_enable_feature+0x1dc>)
10009d24:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009d26:	2007      	movs	r0, #7
10009d28:	4b37      	ldr	r3, [pc, #220]	; (10009e08 <dmp_enable_feature+0x1e0>)
10009d2a:	4798      	blx	r3
        dmp_set_tap_count(1);
10009d2c:	2001      	movs	r0, #1
10009d2e:	4b37      	ldr	r3, [pc, #220]	; (10009e0c <dmp_enable_feature+0x1e4>)
10009d30:	4798      	blx	r3
        dmp_set_tap_time(100);
10009d32:	2064      	movs	r0, #100	; 0x64
10009d34:	4b36      	ldr	r3, [pc, #216]	; (10009e10 <dmp_enable_feature+0x1e8>)
10009d36:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009d38:	20fa      	movs	r0, #250	; 0xfa
10009d3a:	0040      	lsls	r0, r0, #1
10009d3c:	4b35      	ldr	r3, [pc, #212]	; (10009e14 <dmp_enable_feature+0x1ec>)
10009d3e:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009d40:	21c8      	movs	r1, #200	; 0xc8
10009d42:	4835      	ldr	r0, [pc, #212]	; (10009e18 <dmp_enable_feature+0x1f0>)
10009d44:	4b35      	ldr	r3, [pc, #212]	; (10009e1c <dmp_enable_feature+0x1f4>)
10009d46:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009d48:	2028      	movs	r0, #40	; 0x28
10009d4a:	4b35      	ldr	r3, [pc, #212]	; (10009e20 <dmp_enable_feature+0x1f8>)
10009d4c:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009d4e:	200a      	movs	r0, #10
10009d50:	4b34      	ldr	r3, [pc, #208]	; (10009e24 <dmp_enable_feature+0x1fc>)
10009d52:	4798      	blx	r3
10009d54:	e007      	b.n	10009d66 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009d56:	aa01      	add	r2, sp, #4
10009d58:	23d8      	movs	r3, #216	; 0xd8
10009d5a:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009d5c:	2101      	movs	r1, #1
10009d5e:	208b      	movs	r0, #139	; 0x8b
10009d60:	0100      	lsls	r0, r0, #4
10009d62:	4b23      	ldr	r3, [pc, #140]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d64:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009d66:	07a3      	lsls	r3, r4, #30
10009d68:	d503      	bpl.n	10009d72 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009d6a:	22d9      	movs	r2, #217	; 0xd9
10009d6c:	ab01      	add	r3, sp, #4
10009d6e:	701a      	strb	r2, [r3, #0]
10009d70:	e002      	b.n	10009d78 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009d72:	22d8      	movs	r2, #216	; 0xd8
10009d74:	ab01      	add	r3, sp, #4
10009d76:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009d78:	aa01      	add	r2, sp, #4
10009d7a:	2101      	movs	r1, #1
10009d7c:	482a      	ldr	r0, [pc, #168]	; (10009e28 <dmp_enable_feature+0x200>)
10009d7e:	4b1c      	ldr	r3, [pc, #112]	; (10009df0 <dmp_enable_feature+0x1c8>)
10009d80:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009d82:	0763      	lsls	r3, r4, #29
10009d84:	d503      	bpl.n	10009d8e <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009d86:	2001      	movs	r0, #1
10009d88:	4b28      	ldr	r3, [pc, #160]	; (10009e2c <dmp_enable_feature+0x204>)
10009d8a:	4798      	blx	r3
10009d8c:	e002      	b.n	10009d94 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009d8e:	2000      	movs	r0, #0
10009d90:	4b26      	ldr	r3, [pc, #152]	; (10009e2c <dmp_enable_feature+0x204>)
10009d92:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009d94:	06e3      	lsls	r3, r4, #27
10009d96:	d503      	bpl.n	10009da0 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009d98:	2001      	movs	r0, #1
10009d9a:	4b25      	ldr	r3, [pc, #148]	; (10009e30 <dmp_enable_feature+0x208>)
10009d9c:	4798      	blx	r3
10009d9e:	e002      	b.n	10009da6 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009da0:	2000      	movs	r0, #0
10009da2:	4b23      	ldr	r3, [pc, #140]	; (10009e30 <dmp_enable_feature+0x208>)
10009da4:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009da6:	2308      	movs	r3, #8
10009da8:	4323      	orrs	r3, r4
10009daa:	4a22      	ldr	r2, [pc, #136]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dac:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009dae:	4b22      	ldr	r3, [pc, #136]	; (10009e38 <dmp_enable_feature+0x210>)
10009db0:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009db2:	2f00      	cmp	r7, #0
10009db4:	d103      	bne.n	10009dbe <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009db6:	2200      	movs	r2, #0
10009db8:	4b1e      	ldr	r3, [pc, #120]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dba:	739a      	strb	r2, [r3, #14]
10009dbc:	e002      	b.n	10009dc4 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009dbe:	2206      	movs	r2, #6
10009dc0:	4b1c      	ldr	r3, [pc, #112]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dc2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009dc4:	2d00      	cmp	r5, #0
10009dc6:	d003      	beq.n	10009dd0 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009dc8:	4a1a      	ldr	r2, [pc, #104]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dca:	7b93      	ldrb	r3, [r2, #14]
10009dcc:	3306      	adds	r3, #6
10009dce:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009dd0:	2314      	movs	r3, #20
10009dd2:	4223      	tst	r3, r4
10009dd4:	d003      	beq.n	10009dde <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009dd6:	4a17      	ldr	r2, [pc, #92]	; (10009e34 <dmp_enable_feature+0x20c>)
10009dd8:	7b93      	ldrb	r3, [r2, #14]
10009dda:	3310      	adds	r3, #16
10009ddc:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009dde:	2e00      	cmp	r6, #0
10009de0:	d003      	beq.n	10009dea <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009de2:	4a14      	ldr	r2, [pc, #80]	; (10009e34 <dmp_enable_feature+0x20c>)
10009de4:	7b93      	ldrb	r3, [r2, #14]
10009de6:	3304      	adds	r3, #4
10009de8:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009dea:	2000      	movs	r0, #0
10009dec:	b005      	add	sp, #20
10009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009df0:	100095e1 	.word	0x100095e1
10009df4:	00000aa7 	.word	0x00000aa7
10009df8:	00000ab6 	.word	0x00000ab6
10009dfc:	10009b55 	.word	0x10009b55
10009e00:	00000aa2 	.word	0x00000aa2
10009e04:	10009845 	.word	0x10009845
10009e08:	100099f1 	.word	0x100099f1
10009e0c:	10009a3d 	.word	0x10009a3d
10009e10:	10009a6d 	.word	0x10009a6d
10009e14:	10009a99 	.word	0x10009a99
10009e18:	02cae309 	.word	0x02cae309
10009e1c:	10009ac5 	.word	0x10009ac5
10009e20:	10009afd 	.word	0x10009afd
10009e24:	10009b29 	.word	0x10009b29
10009e28:	0000073d 	.word	0x0000073d
10009e2c:	10009ba1 	.word	0x10009ba1
10009e30:	10009be5 	.word	0x10009be5
10009e34:	10018508 	.word	0x10018508
10009e38:	100085bd 	.word	0x100085bd

10009e3c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009e3c:	b510      	push	{r4, lr}
10009e3e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009e40:	4809      	ldr	r0, [pc, #36]	; (10009e68 <sms_ble_pair_request_fn+0x2c>)
10009e42:	4b0a      	ldr	r3, [pc, #40]	; (10009e6c <sms_ble_pair_request_fn+0x30>)
10009e44:	4798      	blx	r3
10009e46:	4b0a      	ldr	r3, [pc, #40]	; (10009e70 <sms_ble_pair_request_fn+0x34>)
10009e48:	781a      	ldrb	r2, [r3, #0]
10009e4a:	b2d2      	uxtb	r2, r2
10009e4c:	4b09      	ldr	r3, [pc, #36]	; (10009e74 <sms_ble_pair_request_fn+0x38>)
10009e4e:	781b      	ldrb	r3, [r3, #0]
10009e50:	b2db      	uxtb	r3, r3
10009e52:	4909      	ldr	r1, [pc, #36]	; (10009e78 <sms_ble_pair_request_fn+0x3c>)
10009e54:	7808      	ldrb	r0, [r1, #0]
10009e56:	4909      	ldr	r1, [pc, #36]	; (10009e7c <sms_ble_pair_request_fn+0x40>)
10009e58:	7849      	ldrb	r1, [r1, #1]
10009e5a:	9000      	str	r0, [sp, #0]
10009e5c:	4808      	ldr	r0, [pc, #32]	; (10009e80 <sms_ble_pair_request_fn+0x44>)
10009e5e:	4c09      	ldr	r4, [pc, #36]	; (10009e84 <sms_ble_pair_request_fn+0x48>)
10009e60:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009e62:	2000      	movs	r0, #0
10009e64:	b002      	add	sp, #8
10009e66:	bd10      	pop	{r4, pc}
10009e68:	100164f8 	.word	0x100164f8
10009e6c:	10015351 	.word	0x10015351
10009e70:	1001a16c 	.word	0x1001a16c
10009e74:	10019fc0 	.word	0x10019fc0
10009e78:	1001a16d 	.word	0x1001a16d
10009e7c:	1001a05c 	.word	0x1001a05c
10009e80:	10016790 	.word	0x10016790
10009e84:	10015231 	.word	0x10015231

10009e88 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009e88:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009e8a:	2001      	movs	r0, #1
10009e8c:	4b0c      	ldr	r3, [pc, #48]	; (10009ec0 <sms_ble_notification_confirmed_fn+0x38>)
10009e8e:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009e90:	2200      	movs	r2, #0
10009e92:	4b0c      	ldr	r3, [pc, #48]	; (10009ec4 <sms_ble_notification_confirmed_fn+0x3c>)
10009e94:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009e96:	3222      	adds	r2, #34	; 0x22
10009e98:	4b0b      	ldr	r3, [pc, #44]	; (10009ec8 <sms_ble_notification_confirmed_fn+0x40>)
10009e9a:	701a      	strb	r2, [r3, #0]
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
10009e9c:	480b      	ldr	r0, [pc, #44]	; (10009ecc <sms_ble_notification_confirmed_fn+0x44>)
10009e9e:	4b0c      	ldr	r3, [pc, #48]	; (10009ed0 <sms_ble_notification_confirmed_fn+0x48>)
10009ea0:	4798      	blx	r3
10009ea2:	4c0c      	ldr	r4, [pc, #48]	; (10009ed4 <sms_ble_notification_confirmed_fn+0x4c>)
10009ea4:	7821      	ldrb	r1, [r4, #0]
10009ea6:	b2c9      	uxtb	r1, r1
10009ea8:	480b      	ldr	r0, [pc, #44]	; (10009ed8 <sms_ble_notification_confirmed_fn+0x50>)
10009eaa:	4b0c      	ldr	r3, [pc, #48]	; (10009edc <sms_ble_notification_confirmed_fn+0x54>)
10009eac:	4798      	blx	r3
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009eae:	7823      	ldrb	r3, [r4, #0]
10009eb0:	2b00      	cmp	r3, #0
10009eb2:	d102      	bne.n	10009eba <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
10009eb4:	2201      	movs	r2, #1
10009eb6:	4b0a      	ldr	r3, [pc, #40]	; (10009ee0 <sms_ble_notification_confirmed_fn+0x58>)
10009eb8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009eba:	2000      	movs	r0, #0
10009ebc:	bd10      	pop	{r4, pc}
10009ebe:	46c0      	nop			; (mov r8, r8)
10009ec0:	1000b4c5 	.word	0x1000b4c5
10009ec4:	1001a16d 	.word	0x1001a16d
10009ec8:	1001a16c 	.word	0x1001a16c
10009ecc:	100164f8 	.word	0x100164f8
10009ed0:	10015351 	.word	0x10015351
10009ed4:	10019fc0 	.word	0x10019fc0
10009ed8:	100167e0 	.word	0x100167e0
10009edc:	10015231 	.word	0x10015231
10009ee0:	1001a055 	.word	0x1001a055

10009ee4 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ee4:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ee6:	2001      	movs	r0, #1
10009ee8:	4b08      	ldr	r3, [pc, #32]	; (10009f0c <sms_ble_indication_confirmed_fn+0x28>)
10009eea:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009eec:	2200      	movs	r2, #0
10009eee:	4b08      	ldr	r3, [pc, #32]	; (10009f10 <sms_ble_indication_confirmed_fn+0x2c>)
10009ef0:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009ef2:	3222      	adds	r2, #34	; 0x22
10009ef4:	4b07      	ldr	r3, [pc, #28]	; (10009f14 <sms_ble_indication_confirmed_fn+0x30>)
10009ef6:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009ef8:	4b07      	ldr	r3, [pc, #28]	; (10009f18 <sms_ble_indication_confirmed_fn+0x34>)
10009efa:	781b      	ldrb	r3, [r3, #0]
10009efc:	2b00      	cmp	r3, #0
10009efe:	d102      	bne.n	10009f06 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009f00:	3a21      	subs	r2, #33	; 0x21
10009f02:	4b06      	ldr	r3, [pc, #24]	; (10009f1c <sms_ble_indication_confirmed_fn+0x38>)
10009f04:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009f06:	2000      	movs	r0, #0
10009f08:	bd10      	pop	{r4, pc}
10009f0a:	46c0      	nop			; (mov r8, r8)
10009f0c:	1000b4c5 	.word	0x1000b4c5
10009f10:	1001a16d 	.word	0x1001a16d
10009f14:	1001a16c 	.word	0x1001a16c
10009f18:	10019fc0 	.word	0x10019fc0
10009f1c:	1001a055 	.word	0x1001a055

10009f20 <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009f20:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009f22:	2202      	movs	r2, #2
10009f24:	4b02      	ldr	r3, [pc, #8]	; (10009f30 <sms_ble_startup+0x10>)
10009f26:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009f28:	2016      	movs	r0, #22
10009f2a:	4b02      	ldr	r3, [pc, #8]	; (10009f34 <sms_ble_startup+0x14>)
10009f2c:	4798      	blx	r3
}
10009f2e:	bd10      	pop	{r4, pc}
10009f30:	1001a16d 	.word	0x1001a16d
10009f34:	1000ae69 	.word	0x1000ae69

10009f38 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009f38:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009f3a:	482c      	ldr	r0, [pc, #176]	; (10009fec <sms_ble_power_down+0xb4>)
10009f3c:	4b2c      	ldr	r3, [pc, #176]	; (10009ff0 <sms_ble_power_down+0xb8>)
10009f3e:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009f40:	4b2c      	ldr	r3, [pc, #176]	; (10009ff4 <sms_ble_power_down+0xbc>)
10009f42:	781b      	ldrb	r3, [r3, #0]
10009f44:	2b00      	cmp	r3, #0
10009f46:	d105      	bne.n	10009f54 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009f48:	2201      	movs	r2, #1
10009f4a:	4b2b      	ldr	r3, [pc, #172]	; (10009ff8 <sms_ble_power_down+0xc0>)
10009f4c:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009f4e:	4b2b      	ldr	r3, [pc, #172]	; (10009ffc <sms_ble_power_down+0xc4>)
10009f50:	4798      	blx	r3
10009f52:	e049      	b.n	10009fe8 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009f54:	4b27      	ldr	r3, [pc, #156]	; (10009ff4 <sms_ble_power_down+0xbc>)
10009f56:	781b      	ldrb	r3, [r3, #0]
10009f58:	b2db      	uxtb	r3, r3
10009f5a:	2b21      	cmp	r3, #33	; 0x21
10009f5c:	d030      	beq.n	10009fc0 <sms_ble_power_down+0x88>
10009f5e:	d802      	bhi.n	10009f66 <sms_ble_power_down+0x2e>
10009f60:	2b20      	cmp	r3, #32
10009f62:	d005      	beq.n	10009f70 <sms_ble_power_down+0x38>
10009f64:	e037      	b.n	10009fd6 <sms_ble_power_down+0x9e>
10009f66:	2b22      	cmp	r3, #34	; 0x22
10009f68:	d017      	beq.n	10009f9a <sms_ble_power_down+0x62>
10009f6a:	2b23      	cmp	r3, #35	; 0x23
10009f6c:	d01b      	beq.n	10009fa6 <sms_ble_power_down+0x6e>
10009f6e:	e032      	b.n	10009fd6 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009f70:	4823      	ldr	r0, [pc, #140]	; (1000a000 <sms_ble_power_down+0xc8>)
10009f72:	4b24      	ldr	r3, [pc, #144]	; (1000a004 <sms_ble_power_down+0xcc>)
10009f74:	4798      	blx	r3
10009f76:	4824      	ldr	r0, [pc, #144]	; (1000a008 <sms_ble_power_down+0xd0>)
10009f78:	4b24      	ldr	r3, [pc, #144]	; (1000a00c <sms_ble_power_down+0xd4>)
10009f7a:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009f7c:	4b24      	ldr	r3, [pc, #144]	; (1000a010 <sms_ble_power_down+0xd8>)
10009f7e:	4798      	blx	r3
10009f80:	2800      	cmp	r0, #0
10009f82:	d003      	beq.n	10009f8c <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009f84:	4823      	ldr	r0, [pc, #140]	; (1000a014 <sms_ble_power_down+0xdc>)
10009f86:	4b21      	ldr	r3, [pc, #132]	; (1000a00c <sms_ble_power_down+0xd4>)
10009f88:	4798      	blx	r3
10009f8a:	e024      	b.n	10009fd6 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009f8c:	4822      	ldr	r0, [pc, #136]	; (1000a018 <sms_ble_power_down+0xe0>)
10009f8e:	4b1f      	ldr	r3, [pc, #124]	; (1000a00c <sms_ble_power_down+0xd4>)
10009f90:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009f92:	2211      	movs	r2, #17
10009f94:	4b17      	ldr	r3, [pc, #92]	; (10009ff4 <sms_ble_power_down+0xbc>)
10009f96:	701a      	strb	r2, [r3, #0]
10009f98:	e01d      	b.n	10009fd6 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009f9a:	4819      	ldr	r0, [pc, #100]	; (1000a000 <sms_ble_power_down+0xc8>)
10009f9c:	4b19      	ldr	r3, [pc, #100]	; (1000a004 <sms_ble_power_down+0xcc>)
10009f9e:	4798      	blx	r3
10009fa0:	481e      	ldr	r0, [pc, #120]	; (1000a01c <sms_ble_power_down+0xe4>)
10009fa2:	4b1a      	ldr	r3, [pc, #104]	; (1000a00c <sms_ble_power_down+0xd4>)
10009fa4:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009fa6:	4816      	ldr	r0, [pc, #88]	; (1000a000 <sms_ble_power_down+0xc8>)
10009fa8:	4b16      	ldr	r3, [pc, #88]	; (1000a004 <sms_ble_power_down+0xcc>)
10009faa:	4798      	blx	r3
10009fac:	481c      	ldr	r0, [pc, #112]	; (1000a020 <sms_ble_power_down+0xe8>)
10009fae:	4b17      	ldr	r3, [pc, #92]	; (1000a00c <sms_ble_power_down+0xd4>)
10009fb0:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009fb2:	2100      	movs	r1, #0
10009fb4:	2328      	movs	r3, #40	; 0x28
10009fb6:	4a1b      	ldr	r2, [pc, #108]	; (1000a024 <sms_ble_power_down+0xec>)
10009fb8:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009fba:	2000      	movs	r0, #0
10009fbc:	4b1a      	ldr	r3, [pc, #104]	; (1000a028 <sms_ble_power_down+0xf0>)
10009fbe:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009fc0:	480f      	ldr	r0, [pc, #60]	; (1000a000 <sms_ble_power_down+0xc8>)
10009fc2:	4b10      	ldr	r3, [pc, #64]	; (1000a004 <sms_ble_power_down+0xcc>)
10009fc4:	4798      	blx	r3
10009fc6:	4819      	ldr	r0, [pc, #100]	; (1000a02c <sms_ble_power_down+0xf4>)
10009fc8:	4b10      	ldr	r3, [pc, #64]	; (1000a00c <sms_ble_power_down+0xd4>)
10009fca:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009fcc:	4b18      	ldr	r3, [pc, #96]	; (1000a030 <sms_ble_power_down+0xf8>)
10009fce:	8818      	ldrh	r0, [r3, #0]
10009fd0:	2113      	movs	r1, #19
10009fd2:	4b18      	ldr	r3, [pc, #96]	; (1000a034 <sms_ble_power_down+0xfc>)
10009fd4:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009fd6:	2211      	movs	r2, #17
10009fd8:	4b06      	ldr	r3, [pc, #24]	; (10009ff4 <sms_ble_power_down+0xbc>)
10009fda:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009fdc:	3a0e      	subs	r2, #14
10009fde:	4b16      	ldr	r3, [pc, #88]	; (1000a038 <sms_ble_power_down+0x100>)
10009fe0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009fe2:	2016      	movs	r0, #22
10009fe4:	4b15      	ldr	r3, [pc, #84]	; (1000a03c <sms_ble_power_down+0x104>)
10009fe6:	4798      	blx	r3
    }
}
10009fe8:	bd10      	pop	{r4, pc}
10009fea:	46c0      	nop			; (mov r8, r8)
10009fec:	100167f8 	.word	0x100167f8
10009ff0:	1000a915 	.word	0x1000a915
10009ff4:	1001a16c 	.word	0x1001a16c
10009ff8:	1001a055 	.word	0x1001a055
10009ffc:	1000f571 	.word	0x1000f571
1000a000:	100164f8 	.word	0x100164f8
1000a004:	10015351 	.word	0x10015351
1000a008:	10016810 	.word	0x10016810
1000a00c:	10015231 	.word	0x10015231
1000a010:	100108ed 	.word	0x100108ed
1000a014:	10016864 	.word	0x10016864
1000a018:	10016870 	.word	0x10016870
1000a01c:	10016878 	.word	0x10016878
1000a020:	100168d0 	.word	0x100168d0
1000a024:	1001a0d0 	.word	0x1001a0d0
1000a028:	1000a971 	.word	0x1000a971
1000a02c:	100168fc 	.word	0x100168fc
1000a030:	1001a056 	.word	0x1001a056
1000a034:	10010919 	.word	0x10010919
1000a038:	1001a16d 	.word	0x1001a16d
1000a03c:	1000ae69 	.word	0x1000ae69

1000a040 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000a040:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a042:	2211      	movs	r2, #17
1000a044:	4b05      	ldr	r3, [pc, #20]	; (1000a05c <sms_ble_adv_report_fn+0x1c>)
1000a046:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000a048:	4805      	ldr	r0, [pc, #20]	; (1000a060 <sms_ble_adv_report_fn+0x20>)
1000a04a:	4b06      	ldr	r3, [pc, #24]	; (1000a064 <sms_ble_adv_report_fn+0x24>)
1000a04c:	4798      	blx	r3
1000a04e:	4806      	ldr	r0, [pc, #24]	; (1000a068 <sms_ble_adv_report_fn+0x28>)
1000a050:	4b06      	ldr	r3, [pc, #24]	; (1000a06c <sms_ble_adv_report_fn+0x2c>)
1000a052:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000a054:	4b06      	ldr	r3, [pc, #24]	; (1000a070 <sms_ble_adv_report_fn+0x30>)
1000a056:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000a058:	2000      	movs	r0, #0
1000a05a:	bd10      	pop	{r4, pc}
1000a05c:	1001a16c 	.word	0x1001a16c
1000a060:	100164f8 	.word	0x100164f8
1000a064:	10015351 	.word	0x10015351
1000a068:	10016934 	.word	0x10016934
1000a06c:	10015231 	.word	0x10015231
1000a070:	10009f39 	.word	0x10009f39

1000a074 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000a074:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000a076:	4b0a      	ldr	r3, [pc, #40]	; (1000a0a0 <sms_ble_connected_fn+0x2c>)
1000a078:	781b      	ldrb	r3, [r3, #0]
1000a07a:	2b20      	cmp	r3, #32
1000a07c:	d10c      	bne.n	1000a098 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
1000a07e:	8902      	ldrh	r2, [r0, #8]
1000a080:	4b08      	ldr	r3, [pc, #32]	; (1000a0a4 <sms_ble_connected_fn+0x30>)
1000a082:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000a084:	2221      	movs	r2, #33	; 0x21
1000a086:	4b06      	ldr	r3, [pc, #24]	; (1000a0a0 <sms_ble_connected_fn+0x2c>)
1000a088:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000a08a:	4807      	ldr	r0, [pc, #28]	; (1000a0a8 <sms_ble_connected_fn+0x34>)
1000a08c:	4b07      	ldr	r3, [pc, #28]	; (1000a0ac <sms_ble_connected_fn+0x38>)
1000a08e:	4798      	blx	r3
1000a090:	4807      	ldr	r0, [pc, #28]	; (1000a0b0 <sms_ble_connected_fn+0x3c>)
1000a092:	4b08      	ldr	r3, [pc, #32]	; (1000a0b4 <sms_ble_connected_fn+0x40>)
1000a094:	4798      	blx	r3
1000a096:	e001      	b.n	1000a09c <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000a098:	4b07      	ldr	r3, [pc, #28]	; (1000a0b8 <sms_ble_connected_fn+0x44>)
1000a09a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000a09c:	2000      	movs	r0, #0
1000a09e:	bd10      	pop	{r4, pc}
1000a0a0:	1001a16c 	.word	0x1001a16c
1000a0a4:	1001a162 	.word	0x1001a162
1000a0a8:	100164f8 	.word	0x100164f8
1000a0ac:	10015351 	.word	0x10015351
1000a0b0:	10016968 	.word	0x10016968
1000a0b4:	10015231 	.word	0x10015231
1000a0b8:	10009f39 	.word	0x10009f39

1000a0bc <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
1000a0bc:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
1000a0be:	4b09      	ldr	r3, [pc, #36]	; (1000a0e4 <sms_ble_paired_fn+0x28>)
1000a0c0:	781b      	ldrb	r3, [r3, #0]
1000a0c2:	2b21      	cmp	r3, #33	; 0x21
1000a0c4:	d10a      	bne.n	1000a0dc <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000a0c6:	2222      	movs	r2, #34	; 0x22
1000a0c8:	4b06      	ldr	r3, [pc, #24]	; (1000a0e4 <sms_ble_paired_fn+0x28>)
1000a0ca:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
1000a0cc:	4806      	ldr	r0, [pc, #24]	; (1000a0e8 <sms_ble_paired_fn+0x2c>)
1000a0ce:	4b07      	ldr	r3, [pc, #28]	; (1000a0ec <sms_ble_paired_fn+0x30>)
1000a0d0:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
1000a0d2:	2101      	movs	r1, #1
1000a0d4:	2001      	movs	r0, #1
1000a0d6:	4b06      	ldr	r3, [pc, #24]	; (1000a0f0 <sms_ble_paired_fn+0x34>)
1000a0d8:	4798      	blx	r3
1000a0da:	e001      	b.n	1000a0e0 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
1000a0dc:	4b05      	ldr	r3, [pc, #20]	; (1000a0f4 <sms_ble_paired_fn+0x38>)
1000a0de:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
1000a0e0:	2000      	movs	r0, #0
1000a0e2:	bd10      	pop	{r4, pc}
1000a0e4:	1001a16c 	.word	0x1001a16c
1000a0e8:	10016998 	.word	0x10016998
1000a0ec:	1000a915 	.word	0x1000a915
1000a0f0:	1000a9fd 	.word	0x1000a9fd
1000a0f4:	10009f39 	.word	0x10009f39

1000a0f8 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000a0f8:	b510      	push	{r4, lr}
1000a0fa:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
1000a0fc:	2220      	movs	r2, #32
1000a0fe:	4b17      	ldr	r3, [pc, #92]	; (1000a15c <sms_ble_advertise+0x64>)
1000a100:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000a102:	4b17      	ldr	r3, [pc, #92]	; (1000a160 <sms_ble_advertise+0x68>)
1000a104:	4798      	blx	r3
1000a106:	1e04      	subs	r4, r0, #0
1000a108:	d007      	beq.n	1000a11a <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000a10a:	4816      	ldr	r0, [pc, #88]	; (1000a164 <sms_ble_advertise+0x6c>)
1000a10c:	4b16      	ldr	r3, [pc, #88]	; (1000a168 <sms_ble_advertise+0x70>)
1000a10e:	4798      	blx	r3
1000a110:	4816      	ldr	r0, [pc, #88]	; (1000a16c <sms_ble_advertise+0x74>)
1000a112:	4b17      	ldr	r3, [pc, #92]	; (1000a170 <sms_ble_advertise+0x78>)
1000a114:	4798      	blx	r3
        return status;
1000a116:	0020      	movs	r0, r4
1000a118:	e01e      	b.n	1000a158 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000a11a:	2300      	movs	r3, #0
1000a11c:	9302      	str	r3, [sp, #8]
1000a11e:	4b15      	ldr	r3, [pc, #84]	; (1000a174 <sms_ble_advertise+0x7c>)
1000a120:	9301      	str	r3, [sp, #4]
1000a122:	23c8      	movs	r3, #200	; 0xc8
1000a124:	00db      	lsls	r3, r3, #3
1000a126:	9300      	str	r3, [sp, #0]
1000a128:	2300      	movs	r3, #0
1000a12a:	2200      	movs	r2, #0
1000a12c:	2101      	movs	r1, #1
1000a12e:	2000      	movs	r0, #0
1000a130:	4c11      	ldr	r4, [pc, #68]	; (1000a178 <sms_ble_advertise+0x80>)
1000a132:	47a0      	blx	r4
1000a134:	1e04      	subs	r4, r0, #0
1000a136:	d107      	bne.n	1000a148 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000a138:	480a      	ldr	r0, [pc, #40]	; (1000a164 <sms_ble_advertise+0x6c>)
1000a13a:	4b0b      	ldr	r3, [pc, #44]	; (1000a168 <sms_ble_advertise+0x70>)
1000a13c:	4798      	blx	r3
1000a13e:	480f      	ldr	r0, [pc, #60]	; (1000a17c <sms_ble_advertise+0x84>)
1000a140:	4b0b      	ldr	r3, [pc, #44]	; (1000a170 <sms_ble_advertise+0x78>)
1000a142:	4798      	blx	r3
        return AT_BLE_SUCCESS;
1000a144:	2000      	movs	r0, #0
1000a146:	e007      	b.n	1000a158 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000a148:	4806      	ldr	r0, [pc, #24]	; (1000a164 <sms_ble_advertise+0x6c>)
1000a14a:	4b07      	ldr	r3, [pc, #28]	; (1000a168 <sms_ble_advertise+0x70>)
1000a14c:	4798      	blx	r3
1000a14e:	0021      	movs	r1, r4
1000a150:	480b      	ldr	r0, [pc, #44]	; (1000a180 <sms_ble_advertise+0x88>)
1000a152:	4b07      	ldr	r3, [pc, #28]	; (1000a170 <sms_ble_advertise+0x78>)
1000a154:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000a156:	20e2      	movs	r0, #226	; 0xe2
}
1000a158:	b004      	add	sp, #16
1000a15a:	bd10      	pop	{r4, pc}
1000a15c:	1001a16c 	.word	0x1001a16c
1000a160:	1000ebad 	.word	0x1000ebad
1000a164:	100164f8 	.word	0x100164f8
1000a168:	10015351 	.word	0x10015351
1000a16c:	100169ac 	.word	0x100169ac
1000a170:	10015231 	.word	0x10015231
1000a174:	0000028f 	.word	0x0000028f
1000a178:	100107b1 	.word	0x100107b1
1000a17c:	100169e0 	.word	0x100169e0
1000a180:	10016a10 	.word	0x10016a10

1000a184 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a184:	b530      	push	{r4, r5, lr}
1000a186:	b083      	sub	sp, #12
1000a188:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a18a:	4b1c      	ldr	r3, [pc, #112]	; (1000a1fc <sms_ble_disconnected_fn+0x78>)
1000a18c:	781b      	ldrb	r3, [r3, #0]
1000a18e:	2b22      	cmp	r3, #34	; 0x22
1000a190:	d10a      	bne.n	1000a1a8 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a192:	2100      	movs	r1, #0
1000a194:	3306      	adds	r3, #6
1000a196:	4a1a      	ldr	r2, [pc, #104]	; (1000a200 <sms_ble_disconnected_fn+0x7c>)
1000a198:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a19a:	2000      	movs	r0, #0
1000a19c:	4b19      	ldr	r3, [pc, #100]	; (1000a204 <sms_ble_disconnected_fn+0x80>)
1000a19e:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a1a0:	2100      	movs	r1, #0
1000a1a2:	2000      	movs	r0, #0
1000a1a4:	4b18      	ldr	r3, [pc, #96]	; (1000a208 <sms_ble_disconnected_fn+0x84>)
1000a1a6:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a1a8:	4c14      	ldr	r4, [pc, #80]	; (1000a1fc <sms_ble_disconnected_fn+0x78>)
1000a1aa:	2311      	movs	r3, #17
1000a1ac:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a1ae:	4817      	ldr	r0, [pc, #92]	; (1000a20c <sms_ble_disconnected_fn+0x88>)
1000a1b0:	4b17      	ldr	r3, [pc, #92]	; (1000a210 <sms_ble_disconnected_fn+0x8c>)
1000a1b2:	4798      	blx	r3
1000a1b4:	7822      	ldrb	r2, [r4, #0]
1000a1b6:	b2d2      	uxtb	r2, r2
1000a1b8:	4b16      	ldr	r3, [pc, #88]	; (1000a214 <sms_ble_disconnected_fn+0x90>)
1000a1ba:	781b      	ldrb	r3, [r3, #0]
1000a1bc:	b2db      	uxtb	r3, r3
1000a1be:	4916      	ldr	r1, [pc, #88]	; (1000a218 <sms_ble_disconnected_fn+0x94>)
1000a1c0:	7808      	ldrb	r0, [r1, #0]
1000a1c2:	4916      	ldr	r1, [pc, #88]	; (1000a21c <sms_ble_disconnected_fn+0x98>)
1000a1c4:	7849      	ldrb	r1, [r1, #1]
1000a1c6:	9000      	str	r0, [sp, #0]
1000a1c8:	4815      	ldr	r0, [pc, #84]	; (1000a220 <sms_ble_disconnected_fn+0x9c>)
1000a1ca:	4c16      	ldr	r4, [pc, #88]	; (1000a224 <sms_ble_disconnected_fn+0xa0>)
1000a1cc:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a1ce:	78ab      	ldrb	r3, [r5, #2]
1000a1d0:	2b1a      	cmp	r3, #26
1000a1d2:	d00b      	beq.n	1000a1ec <sms_ble_disconnected_fn+0x68>
1000a1d4:	b2da      	uxtb	r2, r3
1000a1d6:	2a1a      	cmp	r2, #26
1000a1d8:	d804      	bhi.n	1000a1e4 <sms_ble_disconnected_fn+0x60>
1000a1da:	2b05      	cmp	r3, #5
1000a1dc:	d006      	beq.n	1000a1ec <sms_ble_disconnected_fn+0x68>
1000a1de:	2b08      	cmp	r3, #8
1000a1e0:	d107      	bne.n	1000a1f2 <sms_ble_disconnected_fn+0x6e>
1000a1e2:	e003      	b.n	1000a1ec <sms_ble_disconnected_fn+0x68>
1000a1e4:	2b29      	cmp	r3, #41	; 0x29
1000a1e6:	d001      	beq.n	1000a1ec <sms_ble_disconnected_fn+0x68>
1000a1e8:	2b3b      	cmp	r3, #59	; 0x3b
1000a1ea:	d102      	bne.n	1000a1f2 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a1ec:	4b0e      	ldr	r3, [pc, #56]	; (1000a228 <sms_ble_disconnected_fn+0xa4>)
1000a1ee:	4798      	blx	r3
        break;
1000a1f0:	e001      	b.n	1000a1f6 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a1f2:	4b0e      	ldr	r3, [pc, #56]	; (1000a22c <sms_ble_disconnected_fn+0xa8>)
1000a1f4:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a1f6:	2000      	movs	r0, #0
1000a1f8:	b003      	add	sp, #12
1000a1fa:	bd30      	pop	{r4, r5, pc}
1000a1fc:	1001a16c 	.word	0x1001a16c
1000a200:	1001a0d0 	.word	0x1001a0d0
1000a204:	1000a971 	.word	0x1000a971
1000a208:	1000a9fd 	.word	0x1000a9fd
1000a20c:	100164f8 	.word	0x100164f8
1000a210:	10015351 	.word	0x10015351
1000a214:	10019fc0 	.word	0x10019fc0
1000a218:	1001a16d 	.word	0x1001a16d
1000a21c:	1001a05c 	.word	0x1001a05c
1000a220:	10016a54 	.word	0x10016a54
1000a224:	10015231 	.word	0x10015231
1000a228:	1000a0f9 	.word	0x1000a0f9
1000a22c:	10009f39 	.word	0x10009f39

1000a230 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a230:	b570      	push	{r4, r5, r6, lr}
1000a232:	b086      	sub	sp, #24
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a234:	2223      	movs	r2, #35	; 0x23
1000a236:	4b36      	ldr	r3, [pc, #216]	; (1000a310 <sms_ble_send_characteristic+0xe0>)
1000a238:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a23a:	4a36      	ldr	r2, [pc, #216]	; (1000a314 <sms_ble_send_characteristic+0xe4>)
1000a23c:	8813      	ldrh	r3, [r2, #0]
1000a23e:	3301      	adds	r3, #1
1000a240:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a242:	2801      	cmp	r0, #1
1000a244:	d013      	beq.n	1000a26e <sms_ble_send_characteristic+0x3e>
1000a246:	2800      	cmp	r0, #0
1000a248:	d002      	beq.n	1000a250 <sms_ble_send_characteristic+0x20>
1000a24a:	2802      	cmp	r0, #2
1000a24c:	d020      	beq.n	1000a290 <sms_ble_send_characteristic+0x60>
1000a24e:	e035      	b.n	1000a2bc <sms_ble_send_characteristic+0x8c>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a250:	4b31      	ldr	r3, [pc, #196]	; (1000a318 <sms_ble_send_characteristic+0xe8>)
1000a252:	78da      	ldrb	r2, [r3, #3]
1000a254:	2300      	movs	r3, #0
1000a256:	2a7e      	cmp	r2, #126	; 0x7e
1000a258:	d801      	bhi.n	1000a25e <sms_ble_send_characteristic+0x2e>
1000a25a:	3201      	adds	r2, #1
1000a25c:	b2d3      	uxtb	r3, r2
1000a25e:	4a2e      	ldr	r2, [pc, #184]	; (1000a318 <sms_ble_send_characteristic+0xe8>)
1000a260:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a262:	aa01      	add	r2, sp, #4
1000a264:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a266:	4b2d      	ldr	r3, [pc, #180]	; (1000a31c <sms_ble_send_characteristic+0xec>)
1000a268:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a26a:	2201      	movs	r2, #1
        break;
1000a26c:	e028      	b.n	1000a2c0 <sms_ble_send_characteristic+0x90>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a26e:	4b2c      	ldr	r3, [pc, #176]	; (1000a320 <sms_ble_send_characteristic+0xf0>)
1000a270:	78db      	ldrb	r3, [r3, #3]
1000a272:	2bff      	cmp	r3, #255	; 0xff
1000a274:	d002      	beq.n	1000a27c <sms_ble_send_characteristic+0x4c>
1000a276:	3301      	adds	r3, #1
1000a278:	b2db      	uxtb	r3, r3
1000a27a:	e000      	b.n	1000a27e <sms_ble_send_characteristic+0x4e>
1000a27c:	2300      	movs	r3, #0
1000a27e:	4a28      	ldr	r2, [pc, #160]	; (1000a320 <sms_ble_send_characteristic+0xf0>)
1000a280:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a282:	3b80      	subs	r3, #128	; 0x80
1000a284:	aa01      	add	r2, sp, #4
1000a286:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a288:	4b24      	ldr	r3, [pc, #144]	; (1000a31c <sms_ble_send_characteristic+0xec>)
1000a28a:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a28c:	2201      	movs	r2, #1
        break;
1000a28e:	e017      	b.n	1000a2c0 <sms_ble_send_characteristic+0x90>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.ms58_device.temperature & 0xff);
1000a290:	4a24      	ldr	r2, [pc, #144]	; (1000a324 <sms_ble_send_characteristic+0xf4>)
1000a292:	6a13      	ldr	r3, [r2, #32]
1000a294:	a901      	add	r1, sp, #4
1000a296:	700b      	strb	r3, [r1, #0]
        send_val[1] = (uint8_t)((pressure_device.ms58_device.temperature >> 8) & 0xff);
1000a298:	1218      	asrs	r0, r3, #8
1000a29a:	7048      	strb	r0, [r1, #1]
        send_val[2] = (uint8_t)((pressure_device.ms58_device.temperature >> 16) & 0xff);
1000a29c:	1418      	asrs	r0, r3, #16
1000a29e:	7088      	strb	r0, [r1, #2]
        send_val[3] = (uint8_t)((pressure_device.ms58_device.temperature >> 24) & 0xff);
1000a2a0:	161b      	asrs	r3, r3, #24
1000a2a2:	70cb      	strb	r3, [r1, #3]
        send_val[4] = (uint8_t)(pressure_device.ms58_device.pressure & 0xff);
1000a2a4:	69d3      	ldr	r3, [r2, #28]
1000a2a6:	710b      	strb	r3, [r1, #4]
        send_val[5] = (uint8_t)((pressure_device.ms58_device.pressure >> 8) & 0xff);
1000a2a8:	1218      	asrs	r0, r3, #8
1000a2aa:	7148      	strb	r0, [r1, #5]
        send_val[6] = (uint8_t)((pressure_device.ms58_device.pressure >> 16) & 0xff);
1000a2ac:	1418      	asrs	r0, r3, #16
1000a2ae:	7188      	strb	r0, [r1, #6]
        send_val[7] = (uint8_t)((pressure_device.ms58_device.pressure >> 24) & 0xff);
1000a2b0:	161b      	asrs	r3, r3, #24
1000a2b2:	71cb      	strb	r3, [r1, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a2b4:	2340      	movs	r3, #64	; 0x40
1000a2b6:	5ad5      	ldrh	r5, [r2, r3]
        length = 8;
1000a2b8:	2208      	movs	r2, #8
        break;
1000a2ba:	e001      	b.n	1000a2c0 <sms_ble_send_characteristic+0x90>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a2bc:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a2be:	2500      	movs	r5, #0
        
        case BLE_CHAR_MPU:
        break;
    }
    
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a2c0:	b292      	uxth	r2, r2
1000a2c2:	a901      	add	r1, sp, #4
1000a2c4:	0028      	movs	r0, r5
1000a2c6:	4b18      	ldr	r3, [pc, #96]	; (1000a328 <sms_ble_send_characteristic+0xf8>)
1000a2c8:	4798      	blx	r3
1000a2ca:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a2cc:	d11d      	bne.n	1000a30a <sms_ble_send_characteristic+0xda>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a2ce:	4b11      	ldr	r3, [pc, #68]	; (1000a314 <sms_ble_send_characteristic+0xe4>)
1000a2d0:	8819      	ldrh	r1, [r3, #0]
1000a2d2:	4816      	ldr	r0, [pc, #88]	; (1000a32c <sms_ble_send_characteristic+0xfc>)
1000a2d4:	4b16      	ldr	r3, [pc, #88]	; (1000a330 <sms_ble_send_characteristic+0x100>)
1000a2d6:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a2d8:	2101      	movs	r1, #1
1000a2da:	2002      	movs	r0, #2
1000a2dc:	4e15      	ldr	r6, [pc, #84]	; (1000a334 <sms_ble_send_characteristic+0x104>)
1000a2de:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
1000a2e0:	2200      	movs	r2, #0
1000a2e2:	4b15      	ldr	r3, [pc, #84]	; (1000a338 <sms_ble_send_characteristic+0x108>)
1000a2e4:	701a      	strb	r2, [r3, #0]
        status = at_ble_indication_send(sms_connection_handle, val_handle);
1000a2e6:	4b15      	ldr	r3, [pc, #84]	; (1000a33c <sms_ble_send_characteristic+0x10c>)
1000a2e8:	8818      	ldrh	r0, [r3, #0]
1000a2ea:	0029      	movs	r1, r5
1000a2ec:	4b14      	ldr	r3, [pc, #80]	; (1000a340 <sms_ble_send_characteristic+0x110>)
1000a2ee:	4798      	blx	r3
1000a2f0:	0004      	movs	r4, r0
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a2f2:	2100      	movs	r1, #0
1000a2f4:	2002      	movs	r0, #2
1000a2f6:	47b0      	blx	r6
        //register int n41 asm("sp");
        //register int n42 asm("lr");
        //register int n43 asm("r15");
        //printf("\r\n\@ sending: sp 0x%x, lr 0x%x", n41, n42);
        
        if(status == AT_BLE_SUCCESS) {
1000a2f8:	2c00      	cmp	r4, #0
1000a2fa:	d106      	bne.n	1000a30a <sms_ble_send_characteristic+0xda>
            timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000a2fc:	2201      	movs	r2, #1
1000a2fe:	4b11      	ldr	r3, [pc, #68]	; (1000a344 <sms_ble_send_characteristic+0x114>)
1000a300:	701a      	strb	r2, [r3, #0]
            sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000a302:	2164      	movs	r1, #100	; 0x64
1000a304:	2001      	movs	r0, #1
1000a306:	4b10      	ldr	r3, [pc, #64]	; (1000a348 <sms_ble_send_characteristic+0x118>)
1000a308:	4798      	blx	r3
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a30a:	0020      	movs	r0, r4
1000a30c:	b006      	add	sp, #24
1000a30e:	bd70      	pop	{r4, r5, r6, pc}
1000a310:	1001a16c 	.word	0x1001a16c
1000a314:	1001a188 	.word	0x1001a188
1000a318:	10019fbc 	.word	0x10019fbc
1000a31c:	1001a05c 	.word	0x1001a05c
1000a320:	1001a058 	.word	0x1001a058
1000a324:	1001a0d0 	.word	0x1001a0d0
1000a328:	10011095 	.word	0x10011095
1000a32c:	10016aa8 	.word	0x10016aa8
1000a330:	10015231 	.word	0x10015231
1000a334:	1000c23d 	.word	0x1000c23d
1000a338:	1001a161 	.word	0x1001a161
1000a33c:	1001a056 	.word	0x1001a056
1000a340:	10011235 	.word	0x10011235
1000a344:	1001a16d 	.word	0x1001a16d
1000a348:	1000b465 	.word	0x1000b465

1000a34c <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a34c:	b510      	push	{r4, lr}
1000a34e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a350:	0001      	movs	r1, r0
1000a352:	3112      	adds	r1, #18
1000a354:	2301      	movs	r3, #1
1000a356:	9301      	str	r3, [sp, #4]
1000a358:	0003      	movs	r3, r0
1000a35a:	3314      	adds	r3, #20
1000a35c:	9300      	str	r3, [sp, #0]
1000a35e:	2300      	movs	r3, #0
1000a360:	2200      	movs	r2, #0
1000a362:	4c02      	ldr	r4, [pc, #8]	; (1000a36c <sms_ble_primary_service_define+0x20>)
1000a364:	47a0      	blx	r4
}
1000a366:	b002      	add	sp, #8
1000a368:	bd10      	pop	{r4, pc}
1000a36a:	46c0      	nop			; (mov r8, r8)
1000a36c:	10011075 	.word	0x10011075

1000a370 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a370:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a372:	464f      	mov	r7, r9
1000a374:	4646      	mov	r6, r8
1000a376:	b4c0      	push	{r6, r7}
1000a378:	b083      	sub	sp, #12
1000a37a:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a37c:	2801      	cmp	r0, #1
1000a37e:	d010      	beq.n	1000a3a2 <sms_ble_service_init+0x32>
1000a380:	2800      	cmp	r0, #0
1000a382:	d002      	beq.n	1000a38a <sms_ble_service_init+0x1a>
1000a384:	2802      	cmp	r0, #2
1000a386:	d019      	beq.n	1000a3bc <sms_ble_service_init+0x4c>
1000a388:	e023      	b.n	1000a3d2 <sms_ble_service_init+0x62>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a38a:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a38c:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a38e:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a390:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a392:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a394:	231c      	movs	r3, #28
1000a396:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a398:	333b      	adds	r3, #59	; 0x3b
1000a39a:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
1000a39c:	3b56      	subs	r3, #86	; 0x56
1000a39e:	9301      	str	r3, [sp, #4]
1000a3a0:	e020      	b.n	1000a3e4 <sms_ble_service_init+0x74>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000a3a2:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000a3a4:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000a3a6:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a3a8:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a3aa:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a3ac:	231c      	movs	r3, #28
1000a3ae:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a3b0:	333b      	adds	r3, #59	; 0x3b
1000a3b2:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000a3b4:	3b4f      	subs	r3, #79	; 0x4f
1000a3b6:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a3b8:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
1000a3ba:	e013      	b.n	1000a3e4 <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a3bc:	2400      	movs	r4, #0
1000a3be:	2500      	movs	r5, #0
1000a3c0:	2600      	movs	r6, #0
1000a3c2:	2700      	movs	r7, #0
1000a3c4:	2000      	movs	r0, #0
1000a3c6:	2300      	movs	r3, #0
1000a3c8:	4698      	mov	r8, r3
1000a3ca:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a3cc:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_IMU:
        handle = 3;
1000a3ce:	3303      	adds	r3, #3
        break;
1000a3d0:	e008      	b.n	1000a3e4 <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a3d2:	2400      	movs	r4, #0
1000a3d4:	2500      	movs	r5, #0
1000a3d6:	2600      	movs	r6, #0
1000a3d8:	2700      	movs	r7, #0
1000a3da:	2000      	movs	r0, #0
1000a3dc:	2300      	movs	r3, #0
1000a3de:	4698      	mov	r8, r3
1000a3e0:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a3e2:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a3e4:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a3e6:	2302      	movs	r3, #2
1000a3e8:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a3ea:	2300      	movs	r3, #0
1000a3ec:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a3ee:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a3f0:	464a      	mov	r2, r9
1000a3f2:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a3f4:	4642      	mov	r2, r8
1000a3f6:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a3f8:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a3fa:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a3fc:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a3fe:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a400:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a402:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a404:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a406:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a408:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a40a:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a40c:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a40e:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
1000a410:	2422      	movs	r4, #34	; 0x22
1000a412:	850c      	strh	r4, [r1, #40]	; 0x28
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
    #   endif
    service->serv_chars.init_value = value; // value
1000a414:	4662      	mov	r2, ip
1000a416:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a418:	466a      	mov	r2, sp
1000a41a:	8892      	ldrh	r2, [r2, #4]
1000a41c:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a41e:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a420:	2011      	movs	r0, #17
1000a422:	2234      	movs	r2, #52	; 0x34
1000a424:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a426:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a428:	2200      	movs	r2, #0
1000a42a:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a42c:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a42e:	3033      	adds	r0, #51	; 0x33
1000a430:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a432:	3001      	adds	r0, #1
1000a434:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a436:	3001      	adds	r0, #1
1000a438:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a43a:	2248      	movs	r2, #72	; 0x48
1000a43c:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a43e:	3202      	adds	r2, #2
1000a440:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a442:	3202      	adds	r2, #2
1000a444:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a446:	640b      	str	r3, [r1, #64]	; 0x40
1000a448:	b003      	add	sp, #12
1000a44a:	bc0c      	pop	{r2, r3}
1000a44c:	4690      	mov	r8, r2
1000a44e:	4699      	mov	r9, r3
1000a450:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a452:	46c0      	nop			; (mov r8, r8)

1000a454 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a454:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
1000a456:	2201      	movs	r2, #1
1000a458:	4b04      	ldr	r3, [pc, #16]	; (1000a46c <sms_button_bt0_callback+0x18>)
1000a45a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a45c:	4b04      	ldr	r3, [pc, #16]	; (1000a470 <sms_button_bt0_callback+0x1c>)
1000a45e:	7858      	ldrb	r0, [r3, #1]
1000a460:	2300      	movs	r3, #0
1000a462:	2200      	movs	r2, #0
1000a464:	2102      	movs	r1, #2
1000a466:	4c03      	ldr	r4, [pc, #12]	; (1000a474 <sms_button_bt0_callback+0x20>)
1000a468:	47a0      	blx	r4
}
1000a46a:	bd10      	pop	{r4, pc}
1000a46c:	1001a154 	.word	0x1001a154
1000a470:	10019fbc 	.word	0x10019fbc
1000a474:	1000f2a5 	.word	0x1000f2a5

1000a478 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a478:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
1000a47a:	2202      	movs	r2, #2
1000a47c:	4b04      	ldr	r3, [pc, #16]	; (1000a490 <sms_button_bt1_callback+0x18>)
1000a47e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a480:	4b04      	ldr	r3, [pc, #16]	; (1000a494 <sms_button_bt1_callback+0x1c>)
1000a482:	7858      	ldrb	r0, [r3, #1]
1000a484:	2300      	movs	r3, #0
1000a486:	2200      	movs	r2, #0
1000a488:	2102      	movs	r1, #2
1000a48a:	4c03      	ldr	r4, [pc, #12]	; (1000a498 <sms_button_bt1_callback+0x20>)
1000a48c:	47a0      	blx	r4
}
1000a48e:	bd10      	pop	{r4, pc}
1000a490:	1001a154 	.word	0x1001a154
1000a494:	1001a058 	.word	0x1001a058
1000a498:	1000f2a5 	.word	0x1000f2a5

1000a49c <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a49c:	b510      	push	{r4, lr}
1000a49e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a4a0:	ac01      	add	r4, sp, #4
1000a4a2:	0020      	movs	r0, r4
1000a4a4:	4b20      	ldr	r3, [pc, #128]	; (1000a528 <sms_button_configure_gpio+0x8c>)
1000a4a6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a4a8:	2300      	movs	r3, #0
1000a4aa:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a4ac:	3302      	adds	r3, #2
1000a4ae:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a4b0:	3b01      	subs	r3, #1
1000a4b2:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a4b4:	4b1d      	ldr	r3, [pc, #116]	; (1000a52c <sms_button_configure_gpio+0x90>)
1000a4b6:	7858      	ldrb	r0, [r3, #1]
1000a4b8:	0021      	movs	r1, r4
1000a4ba:	4b1d      	ldr	r3, [pc, #116]	; (1000a530 <sms_button_configure_gpio+0x94>)
1000a4bc:	4798      	blx	r3
1000a4be:	2800      	cmp	r0, #0
1000a4c0:	d005      	beq.n	1000a4ce <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a4c2:	481c      	ldr	r0, [pc, #112]	; (1000a534 <sms_button_configure_gpio+0x98>)
1000a4c4:	4b1c      	ldr	r3, [pc, #112]	; (1000a538 <sms_button_configure_gpio+0x9c>)
1000a4c6:	4798      	blx	r3
1000a4c8:	481c      	ldr	r0, [pc, #112]	; (1000a53c <sms_button_configure_gpio+0xa0>)
1000a4ca:	4b1d      	ldr	r3, [pc, #116]	; (1000a540 <sms_button_configure_gpio+0xa4>)
1000a4cc:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a4ce:	ac01      	add	r4, sp, #4
1000a4d0:	0020      	movs	r0, r4
1000a4d2:	4b15      	ldr	r3, [pc, #84]	; (1000a528 <sms_button_configure_gpio+0x8c>)
1000a4d4:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a4d6:	2300      	movs	r3, #0
1000a4d8:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a4da:	3302      	adds	r3, #2
1000a4dc:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a4de:	3b01      	subs	r3, #1
1000a4e0:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a4e2:	4b18      	ldr	r3, [pc, #96]	; (1000a544 <sms_button_configure_gpio+0xa8>)
1000a4e4:	7858      	ldrb	r0, [r3, #1]
1000a4e6:	0021      	movs	r1, r4
1000a4e8:	4b11      	ldr	r3, [pc, #68]	; (1000a530 <sms_button_configure_gpio+0x94>)
1000a4ea:	4798      	blx	r3
1000a4ec:	2800      	cmp	r0, #0
1000a4ee:	d005      	beq.n	1000a4fc <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a4f0:	4810      	ldr	r0, [pc, #64]	; (1000a534 <sms_button_configure_gpio+0x98>)
1000a4f2:	4b11      	ldr	r3, [pc, #68]	; (1000a538 <sms_button_configure_gpio+0x9c>)
1000a4f4:	4798      	blx	r3
1000a4f6:	4814      	ldr	r0, [pc, #80]	; (1000a548 <sms_button_configure_gpio+0xac>)
1000a4f8:	4b11      	ldr	r3, [pc, #68]	; (1000a540 <sms_button_configure_gpio+0xa4>)
1000a4fa:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a4fc:	ac01      	add	r4, sp, #4
1000a4fe:	0020      	movs	r0, r4
1000a500:	4b09      	ldr	r3, [pc, #36]	; (1000a528 <sms_button_configure_gpio+0x8c>)
1000a502:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a504:	2300      	movs	r3, #0
1000a506:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a508:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a50a:	0021      	movs	r1, r4
1000a50c:	2017      	movs	r0, #23
1000a50e:	4b08      	ldr	r3, [pc, #32]	; (1000a530 <sms_button_configure_gpio+0x94>)
1000a510:	4798      	blx	r3
1000a512:	2800      	cmp	r0, #0
1000a514:	d005      	beq.n	1000a522 <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a516:	4807      	ldr	r0, [pc, #28]	; (1000a534 <sms_button_configure_gpio+0x98>)
1000a518:	4b07      	ldr	r3, [pc, #28]	; (1000a538 <sms_button_configure_gpio+0x9c>)
1000a51a:	4798      	blx	r3
1000a51c:	480b      	ldr	r0, [pc, #44]	; (1000a54c <sms_button_configure_gpio+0xb0>)
1000a51e:	4b08      	ldr	r3, [pc, #32]	; (1000a540 <sms_button_configure_gpio+0xa4>)
1000a520:	4798      	blx	r3
    }
}
1000a522:	b002      	add	sp, #8
1000a524:	bd10      	pop	{r4, pc}
1000a526:	46c0      	nop			; (mov r8, r8)
1000a528:	1000bfd5 	.word	0x1000bfd5
1000a52c:	10019fbc 	.word	0x10019fbc
1000a530:	1000bfe5 	.word	0x1000bfe5
1000a534:	100164f8 	.word	0x100164f8
1000a538:	10015351 	.word	0x10015351
1000a53c:	10016b28 	.word	0x10016b28
1000a540:	10015231 	.word	0x10015231
1000a544:	1001a058 	.word	0x1001a058
1000a548:	10016b60 	.word	0x10016b60
1000a54c:	10016b98 	.word	0x10016b98

1000a550 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a550:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a552:	4b06      	ldr	r3, [pc, #24]	; (1000a56c <sms_button_register_callbacks+0x1c>)
1000a554:	7858      	ldrb	r0, [r3, #1]
1000a556:	2202      	movs	r2, #2
1000a558:	4905      	ldr	r1, [pc, #20]	; (1000a570 <sms_button_register_callbacks+0x20>)
1000a55a:	4c06      	ldr	r4, [pc, #24]	; (1000a574 <sms_button_register_callbacks+0x24>)
1000a55c:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a55e:	4b06      	ldr	r3, [pc, #24]	; (1000a578 <sms_button_register_callbacks+0x28>)
1000a560:	7858      	ldrb	r0, [r3, #1]
1000a562:	2202      	movs	r2, #2
1000a564:	4905      	ldr	r1, [pc, #20]	; (1000a57c <sms_button_register_callbacks+0x2c>)
1000a566:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a568:	bd10      	pop	{r4, pc}
1000a56a:	46c0      	nop			; (mov r8, r8)
1000a56c:	10019fbc 	.word	0x10019fbc
1000a570:	1000a455 	.word	0x1000a455
1000a574:	1000c415 	.word	0x1000c415
1000a578:	1001a058 	.word	0x1001a058
1000a57c:	1000a479 	.word	0x1000a479

1000a580 <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a580:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a582:	201f      	movs	r0, #31
1000a584:	4d0c      	ldr	r5, [pc, #48]	; (1000a5b8 <sms_button_get_state+0x38>)
1000a586:	47a8      	blx	r5
1000a588:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a58a:	201d      	movs	r0, #29
1000a58c:	47a8      	blx	r5
1000a58e:	0005      	movs	r5, r0
1000a590:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a592:	480a      	ldr	r0, [pc, #40]	; (1000a5bc <sms_button_get_state+0x3c>)
1000a594:	4b0a      	ldr	r3, [pc, #40]	; (1000a5c0 <sms_button_get_state+0x40>)
1000a596:	4798      	blx	r3
1000a598:	0022      	movs	r2, r4
1000a59a:	0029      	movs	r1, r5
1000a59c:	4809      	ldr	r0, [pc, #36]	; (1000a5c4 <sms_button_get_state+0x44>)
1000a59e:	4b0a      	ldr	r3, [pc, #40]	; (1000a5c8 <sms_button_get_state+0x48>)
1000a5a0:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a5a2:	2c00      	cmp	r4, #0
1000a5a4:	d004      	beq.n	1000a5b0 <sms_button_get_state+0x30>
1000a5a6:	2003      	movs	r0, #3
1000a5a8:	2d00      	cmp	r5, #0
1000a5aa:	d104      	bne.n	1000a5b6 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a5ac:	3802      	subs	r0, #2
1000a5ae:	e002      	b.n	1000a5b6 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a5b0:	1e70      	subs	r0, r6, #1
1000a5b2:	4186      	sbcs	r6, r0
1000a5b4:	0070      	lsls	r0, r6, #1
}
1000a5b6:	bd70      	pop	{r4, r5, r6, pc}
1000a5b8:	1000c19d 	.word	0x1000c19d
1000a5bc:	100164f8 	.word	0x100164f8
1000a5c0:	10015351 	.word	0x10015351
1000a5c4:	10016be0 	.word	0x10016be0
1000a5c8:	10015231 	.word	0x10015231

1000a5cc <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a5cc:	b570      	push	{r4, r5, r6, lr}
1000a5ce:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a5d0:	4c78      	ldr	r4, [pc, #480]	; (1000a7b4 <sms_button_fn+0x1e8>)
1000a5d2:	7863      	ldrb	r3, [r4, #1]
1000a5d4:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a5d6:	4b78      	ldr	r3, [pc, #480]	; (1000a7b8 <sms_button_fn+0x1ec>)
1000a5d8:	4798      	blx	r3
1000a5da:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a5dc:	2d00      	cmp	r5, #0
1000a5de:	d103      	bne.n	1000a5e8 <sms_button_fn+0x1c>
1000a5e0:	4876      	ldr	r0, [pc, #472]	; (1000a7bc <sms_button_fn+0x1f0>)
1000a5e2:	4b77      	ldr	r3, [pc, #476]	; (1000a7c0 <sms_button_fn+0x1f4>)
1000a5e4:	4798      	blx	r3
1000a5e6:	e005      	b.n	1000a5f4 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a5e8:	2d01      	cmp	r5, #1
1000a5ea:	d000      	beq.n	1000a5ee <sms_button_fn+0x22>
1000a5ec:	e0d4      	b.n	1000a798 <sms_button_fn+0x1cc>
1000a5ee:	4875      	ldr	r0, [pc, #468]	; (1000a7c4 <sms_button_fn+0x1f8>)
1000a5f0:	4b73      	ldr	r3, [pc, #460]	; (1000a7c0 <sms_button_fn+0x1f4>)
1000a5f2:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a5f4:	4b6f      	ldr	r3, [pc, #444]	; (1000a7b4 <sms_button_fn+0x1e8>)
1000a5f6:	785b      	ldrb	r3, [r3, #1]
1000a5f8:	2b01      	cmp	r3, #1
1000a5fa:	d008      	beq.n	1000a60e <sms_button_fn+0x42>
1000a5fc:	2b00      	cmp	r3, #0
1000a5fe:	d100      	bne.n	1000a602 <sms_button_fn+0x36>
1000a600:	e0c5      	b.n	1000a78e <sms_button_fn+0x1c2>
1000a602:	2b02      	cmp	r3, #2
1000a604:	d04b      	beq.n	1000a69e <sms_button_fn+0xd2>
1000a606:	2b03      	cmp	r3, #3
1000a608:	d100      	bne.n	1000a60c <sms_button_fn+0x40>
1000a60a:	e08f      	b.n	1000a72c <sms_button_fn+0x160>
1000a60c:	e0c7      	b.n	1000a79e <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a60e:	4b6e      	ldr	r3, [pc, #440]	; (1000a7c8 <sms_button_fn+0x1fc>)
1000a610:	781b      	ldrb	r3, [r3, #0]
1000a612:	b2db      	uxtb	r3, r3
1000a614:	2b00      	cmp	r3, #0
1000a616:	d003      	beq.n	1000a620 <sms_button_fn+0x54>
1000a618:	3b22      	subs	r3, #34	; 0x22
1000a61a:	2b01      	cmp	r3, #1
1000a61c:	d836      	bhi.n	1000a68c <sms_button_fn+0xc0>
1000a61e:	e00e      	b.n	1000a63e <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a620:	2201      	movs	r2, #1
1000a622:	4b6a      	ldr	r3, [pc, #424]	; (1000a7cc <sms_button_fn+0x200>)
1000a624:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a626:	2300      	movs	r3, #0
1000a628:	4a69      	ldr	r2, [pc, #420]	; (1000a7d0 <sms_button_fn+0x204>)
1000a62a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a62c:	4a69      	ldr	r2, [pc, #420]	; (1000a7d4 <sms_button_fn+0x208>)
1000a62e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a630:	2200      	movs	r2, #0
1000a632:	21fa      	movs	r1, #250	; 0xfa
1000a634:	2001      	movs	r0, #1
1000a636:	4b68      	ldr	r3, [pc, #416]	; (1000a7d8 <sms_button_fn+0x20c>)
1000a638:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a63a:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a63c:	e0b9      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a63e:	2328      	movs	r3, #40	; 0x28
1000a640:	4a66      	ldr	r2, [pc, #408]	; (1000a7dc <sms_button_fn+0x210>)
1000a642:	5cd3      	ldrb	r3, [r2, r3]
1000a644:	2b01      	cmp	r3, #1
1000a646:	d109      	bne.n	1000a65c <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a648:	4865      	ldr	r0, [pc, #404]	; (1000a7e0 <sms_button_fn+0x214>)
1000a64a:	4b66      	ldr	r3, [pc, #408]	; (1000a7e4 <sms_button_fn+0x218>)
1000a64c:	4798      	blx	r3
1000a64e:	4866      	ldr	r0, [pc, #408]	; (1000a7e8 <sms_button_fn+0x21c>)
1000a650:	4b66      	ldr	r3, [pc, #408]	; (1000a7ec <sms_button_fn+0x220>)
1000a652:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a654:	2101      	movs	r1, #1
1000a656:	2000      	movs	r0, #0
1000a658:	4b65      	ldr	r3, [pc, #404]	; (1000a7f0 <sms_button_fn+0x224>)
1000a65a:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a65c:	2300      	movs	r3, #0
1000a65e:	4a5b      	ldr	r2, [pc, #364]	; (1000a7cc <sms_button_fn+0x200>)
1000a660:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a662:	4a5b      	ldr	r2, [pc, #364]	; (1000a7d0 <sms_button_fn+0x204>)
1000a664:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a666:	4b63      	ldr	r3, [pc, #396]	; (1000a7f4 <sms_button_fn+0x228>)
1000a668:	781b      	ldrb	r3, [r3, #0]
1000a66a:	42ab      	cmp	r3, r5
1000a66c:	d104      	bne.n	1000a678 <sms_button_fn+0xac>
1000a66e:	2000      	movs	r0, #0
1000a670:	4b61      	ldr	r3, [pc, #388]	; (1000a7f8 <sms_button_fn+0x22c>)
1000a672:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a674:	2000      	movs	r0, #0
1000a676:	e09c      	b.n	1000a7b2 <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a678:	4b60      	ldr	r3, [pc, #384]	; (1000a7fc <sms_button_fn+0x230>)
1000a67a:	781b      	ldrb	r3, [r3, #0]
1000a67c:	42ab      	cmp	r3, r5
1000a67e:	d000      	beq.n	1000a682 <sms_button_fn+0xb6>
1000a680:	e08f      	b.n	1000a7a2 <sms_button_fn+0x1d6>
1000a682:	2001      	movs	r0, #1
1000a684:	4b5c      	ldr	r3, [pc, #368]	; (1000a7f8 <sms_button_fn+0x22c>)
1000a686:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a688:	2000      	movs	r0, #0
1000a68a:	e092      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a68c:	4854      	ldr	r0, [pc, #336]	; (1000a7e0 <sms_button_fn+0x214>)
1000a68e:	4b55      	ldr	r3, [pc, #340]	; (1000a7e4 <sms_button_fn+0x218>)
1000a690:	4798      	blx	r3
1000a692:	485b      	ldr	r0, [pc, #364]	; (1000a800 <sms_button_fn+0x234>)
1000a694:	4b55      	ldr	r3, [pc, #340]	; (1000a7ec <sms_button_fn+0x220>)
1000a696:	4798      	blx	r3
            return -1;
1000a698:	2001      	movs	r0, #1
1000a69a:	4240      	negs	r0, r0
1000a69c:	e089      	b.n	1000a7b2 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a69e:	4b4a      	ldr	r3, [pc, #296]	; (1000a7c8 <sms_button_fn+0x1fc>)
1000a6a0:	781b      	ldrb	r3, [r3, #0]
1000a6a2:	b2db      	uxtb	r3, r3
1000a6a4:	2b22      	cmp	r3, #34	; 0x22
1000a6a6:	d012      	beq.n	1000a6ce <sms_button_fn+0x102>
1000a6a8:	2b23      	cmp	r3, #35	; 0x23
1000a6aa:	d036      	beq.n	1000a71a <sms_button_fn+0x14e>
1000a6ac:	2b00      	cmp	r3, #0
1000a6ae:	d17b      	bne.n	1000a7a8 <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a6b0:	2201      	movs	r2, #1
1000a6b2:	4b46      	ldr	r3, [pc, #280]	; (1000a7cc <sms_button_fn+0x200>)
1000a6b4:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6b6:	2300      	movs	r3, #0
1000a6b8:	4a45      	ldr	r2, [pc, #276]	; (1000a7d0 <sms_button_fn+0x204>)
1000a6ba:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a6bc:	4a45      	ldr	r2, [pc, #276]	; (1000a7d4 <sms_button_fn+0x208>)
1000a6be:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a6c0:	2200      	movs	r2, #0
1000a6c2:	21fa      	movs	r1, #250	; 0xfa
1000a6c4:	2001      	movs	r0, #1
1000a6c6:	4b44      	ldr	r3, [pc, #272]	; (1000a7d8 <sms_button_fn+0x20c>)
1000a6c8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a6ca:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a6cc:	e071      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a6ce:	2328      	movs	r3, #40	; 0x28
1000a6d0:	4a42      	ldr	r2, [pc, #264]	; (1000a7dc <sms_button_fn+0x210>)
1000a6d2:	5cd3      	ldrb	r3, [r2, r3]
1000a6d4:	2b01      	cmp	r3, #1
1000a6d6:	d109      	bne.n	1000a6ec <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a6d8:	4841      	ldr	r0, [pc, #260]	; (1000a7e0 <sms_button_fn+0x214>)
1000a6da:	4b42      	ldr	r3, [pc, #264]	; (1000a7e4 <sms_button_fn+0x218>)
1000a6dc:	4798      	blx	r3
1000a6de:	4849      	ldr	r0, [pc, #292]	; (1000a804 <sms_button_fn+0x238>)
1000a6e0:	4b42      	ldr	r3, [pc, #264]	; (1000a7ec <sms_button_fn+0x220>)
1000a6e2:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a6e4:	2101      	movs	r1, #1
1000a6e6:	2000      	movs	r0, #0
1000a6e8:	4b41      	ldr	r3, [pc, #260]	; (1000a7f0 <sms_button_fn+0x224>)
1000a6ea:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a6ec:	2300      	movs	r3, #0
1000a6ee:	4a37      	ldr	r2, [pc, #220]	; (1000a7cc <sms_button_fn+0x200>)
1000a6f0:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a6f2:	4a37      	ldr	r2, [pc, #220]	; (1000a7d0 <sms_button_fn+0x204>)
1000a6f4:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a6f6:	4b3f      	ldr	r3, [pc, #252]	; (1000a7f4 <sms_button_fn+0x228>)
1000a6f8:	781b      	ldrb	r3, [r3, #0]
1000a6fa:	42ab      	cmp	r3, r5
1000a6fc:	d104      	bne.n	1000a708 <sms_button_fn+0x13c>
1000a6fe:	2000      	movs	r0, #0
1000a700:	4b3d      	ldr	r3, [pc, #244]	; (1000a7f8 <sms_button_fn+0x22c>)
1000a702:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a704:	2000      	movs	r0, #0
1000a706:	e054      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a708:	4b3c      	ldr	r3, [pc, #240]	; (1000a7fc <sms_button_fn+0x230>)
1000a70a:	781b      	ldrb	r3, [r3, #0]
1000a70c:	42ab      	cmp	r3, r5
1000a70e:	d14e      	bne.n	1000a7ae <sms_button_fn+0x1e2>
1000a710:	2001      	movs	r0, #1
1000a712:	4b39      	ldr	r3, [pc, #228]	; (1000a7f8 <sms_button_fn+0x22c>)
1000a714:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a716:	2000      	movs	r0, #0
1000a718:	e04b      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a71a:	4831      	ldr	r0, [pc, #196]	; (1000a7e0 <sms_button_fn+0x214>)
1000a71c:	4b31      	ldr	r3, [pc, #196]	; (1000a7e4 <sms_button_fn+0x218>)
1000a71e:	4798      	blx	r3
1000a720:	4839      	ldr	r0, [pc, #228]	; (1000a808 <sms_button_fn+0x23c>)
1000a722:	4b32      	ldr	r3, [pc, #200]	; (1000a7ec <sms_button_fn+0x220>)
1000a724:	4798      	blx	r3
            return -1;
1000a726:	2001      	movs	r0, #1
1000a728:	4240      	negs	r0, r0
1000a72a:	e042      	b.n	1000a7b2 <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a72c:	4b26      	ldr	r3, [pc, #152]	; (1000a7c8 <sms_button_fn+0x1fc>)
1000a72e:	781b      	ldrb	r3, [r3, #0]
1000a730:	2b00      	cmp	r3, #0
1000a732:	d108      	bne.n	1000a746 <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a734:	4a25      	ldr	r2, [pc, #148]	; (1000a7cc <sms_button_fn+0x200>)
1000a736:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a738:	4a25      	ldr	r2, [pc, #148]	; (1000a7d0 <sms_button_fn+0x204>)
1000a73a:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a73c:	2201      	movs	r2, #1
1000a73e:	4b33      	ldr	r3, [pc, #204]	; (1000a80c <sms_button_fn+0x240>)
1000a740:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a742:	2000      	movs	r0, #0
1000a744:	e035      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a746:	4b20      	ldr	r3, [pc, #128]	; (1000a7c8 <sms_button_fn+0x1fc>)
1000a748:	781b      	ldrb	r3, [r3, #0]
1000a74a:	2b22      	cmp	r3, #34	; 0x22
1000a74c:	d003      	beq.n	1000a756 <sms_button_fn+0x18a>
1000a74e:	4b1e      	ldr	r3, [pc, #120]	; (1000a7c8 <sms_button_fn+0x1fc>)
1000a750:	781b      	ldrb	r3, [r3, #0]
1000a752:	2b23      	cmp	r3, #35	; 0x23
1000a754:	d104      	bne.n	1000a760 <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a756:	2101      	movs	r1, #1
1000a758:	2328      	movs	r3, #40	; 0x28
1000a75a:	4a20      	ldr	r2, [pc, #128]	; (1000a7dc <sms_button_fn+0x210>)
1000a75c:	54d1      	strb	r1, [r2, r3]
1000a75e:	e003      	b.n	1000a768 <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a760:	2100      	movs	r1, #0
1000a762:	2328      	movs	r3, #40	; 0x28
1000a764:	4a1d      	ldr	r2, [pc, #116]	; (1000a7dc <sms_button_fn+0x210>)
1000a766:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a768:	2100      	movs	r1, #0
1000a76a:	2000      	movs	r0, #0
1000a76c:	4b20      	ldr	r3, [pc, #128]	; (1000a7f0 <sms_button_fn+0x224>)
1000a76e:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a770:	2203      	movs	r2, #3
1000a772:	4b16      	ldr	r3, [pc, #88]	; (1000a7cc <sms_button_fn+0x200>)
1000a774:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a776:	2300      	movs	r3, #0
1000a778:	4a15      	ldr	r2, [pc, #84]	; (1000a7d0 <sms_button_fn+0x204>)
1000a77a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a77c:	4a15      	ldr	r2, [pc, #84]	; (1000a7d4 <sms_button_fn+0x208>)
1000a77e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a780:	2200      	movs	r2, #0
1000a782:	21fa      	movs	r1, #250	; 0xfa
1000a784:	2001      	movs	r0, #1
1000a786:	4b14      	ldr	r3, [pc, #80]	; (1000a7d8 <sms_button_fn+0x20c>)
1000a788:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a78a:	2000      	movs	r0, #0
1000a78c:	e011      	b.n	1000a7b2 <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a78e:	2201      	movs	r2, #1
1000a790:	4b1e      	ldr	r3, [pc, #120]	; (1000a80c <sms_button_fn+0x240>)
1000a792:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a794:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a796:	e00c      	b.n	1000a7b2 <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a798:	2001      	movs	r0, #1
1000a79a:	4240      	negs	r0, r0
1000a79c:	e009      	b.n	1000a7b2 <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a79e:	2000      	movs	r0, #0
1000a7a0:	e007      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a7a2:	2001      	movs	r0, #1
1000a7a4:	4240      	negs	r0, r0
1000a7a6:	e004      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a7a8:	2001      	movs	r0, #1
1000a7aa:	4240      	negs	r0, r0
1000a7ac:	e001      	b.n	1000a7b2 <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a7ae:	2001      	movs	r0, #1
1000a7b0:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a7b2:	bd70      	pop	{r4, r5, r6, pc}
1000a7b4:	1001a05c 	.word	0x1001a05c
1000a7b8:	1000a581 	.word	0x1000a581
1000a7bc:	10016c0c 	.word	0x10016c0c
1000a7c0:	1000a915 	.word	0x1000a915
1000a7c4:	10016c20 	.word	0x10016c20
1000a7c8:	1001a16c 	.word	0x1001a16c
1000a7cc:	10019fc0 	.word	0x10019fc0
1000a7d0:	1001a16d 	.word	0x1001a16d
1000a7d4:	1001a18a 	.word	0x1001a18a
1000a7d8:	1000b465 	.word	0x1000b465
1000a7dc:	1001a0d0 	.word	0x1001a0d0
1000a7e0:	100164f8 	.word	0x100164f8
1000a7e4:	10015351 	.word	0x10015351
1000a7e8:	10016c34 	.word	0x10016c34
1000a7ec:	10015231 	.word	0x10015231
1000a7f0:	1000a971 	.word	0x1000a971
1000a7f4:	10019fbc 	.word	0x10019fbc
1000a7f8:	1000a231 	.word	0x1000a231
1000a7fc:	1001a058 	.word	0x1001a058
1000a800:	10016c5c 	.word	0x10016c5c
1000a804:	10016c84 	.word	0x10016c84
1000a808:	10016cac 	.word	0x10016cac
1000a80c:	1001a055 	.word	0x1001a055

1000a810 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a810:	b510      	push	{r4, lr}
1000a812:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a814:	2800      	cmp	r0, #0
1000a816:	d104      	bne.n	1000a822 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a818:	4b0c      	ldr	r3, [pc, #48]	; (1000a84c <sms_button_toggle_interrupt+0x3c>)
1000a81a:	7858      	ldrb	r0, [r3, #1]
1000a81c:	4b0c      	ldr	r3, [pc, #48]	; (1000a850 <sms_button_toggle_interrupt+0x40>)
1000a81e:	4798      	blx	r3
1000a820:	e005      	b.n	1000a82e <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a822:	2801      	cmp	r0, #1
1000a824:	d103      	bne.n	1000a82e <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a826:	4b09      	ldr	r3, [pc, #36]	; (1000a84c <sms_button_toggle_interrupt+0x3c>)
1000a828:	7858      	ldrb	r0, [r3, #1]
1000a82a:	4b0a      	ldr	r3, [pc, #40]	; (1000a854 <sms_button_toggle_interrupt+0x44>)
1000a82c:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a82e:	2c00      	cmp	r4, #0
1000a830:	d104      	bne.n	1000a83c <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a832:	4b09      	ldr	r3, [pc, #36]	; (1000a858 <sms_button_toggle_interrupt+0x48>)
1000a834:	7858      	ldrb	r0, [r3, #1]
1000a836:	4b06      	ldr	r3, [pc, #24]	; (1000a850 <sms_button_toggle_interrupt+0x40>)
1000a838:	4798      	blx	r3
1000a83a:	e005      	b.n	1000a848 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a83c:	2c01      	cmp	r4, #1
1000a83e:	d103      	bne.n	1000a848 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a840:	4b05      	ldr	r3, [pc, #20]	; (1000a858 <sms_button_toggle_interrupt+0x48>)
1000a842:	7858      	ldrb	r0, [r3, #1]
1000a844:	4b03      	ldr	r3, [pc, #12]	; (1000a854 <sms_button_toggle_interrupt+0x44>)
1000a846:	4798      	blx	r3
    }
}
1000a848:	bd10      	pop	{r4, pc}
1000a84a:	46c0      	nop			; (mov r8, r8)
1000a84c:	10019fbc 	.word	0x10019fbc
1000a850:	1000c4e5 	.word	0x1000c4e5
1000a854:	1000c541 	.word	0x1000c541
1000a858:	1001a058 	.word	0x1001a058

1000a85c <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a85c:	b510      	push	{r4, lr}
1000a85e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a860:	466b      	mov	r3, sp
1000a862:	1dda      	adds	r2, r3, #7
1000a864:	2300      	movs	r3, #0
1000a866:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a868:	4c0d      	ldr	r4, [pc, #52]	; (1000a8a0 <sms_button_define_services+0x44>)
1000a86a:	0021      	movs	r1, r4
1000a86c:	2000      	movs	r0, #0
1000a86e:	4b0d      	ldr	r3, [pc, #52]	; (1000a8a4 <sms_button_define_services+0x48>)
1000a870:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a872:	0020      	movs	r0, r4
1000a874:	4b0c      	ldr	r3, [pc, #48]	; (1000a8a8 <sms_button_define_services+0x4c>)
1000a876:	4798      	blx	r3
1000a878:	1e04      	subs	r4, r0, #0
1000a87a:	d007      	beq.n	1000a88c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a87c:	480b      	ldr	r0, [pc, #44]	; (1000a8ac <sms_button_define_services+0x50>)
1000a87e:	4b0c      	ldr	r3, [pc, #48]	; (1000a8b0 <sms_button_define_services+0x54>)
1000a880:	4798      	blx	r3
1000a882:	0021      	movs	r1, r4
1000a884:	480b      	ldr	r0, [pc, #44]	; (1000a8b4 <sms_button_define_services+0x58>)
1000a886:	4b0c      	ldr	r3, [pc, #48]	; (1000a8b8 <sms_button_define_services+0x5c>)
1000a888:	4798      	blx	r3
1000a88a:	e007      	b.n	1000a89c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a88c:	4807      	ldr	r0, [pc, #28]	; (1000a8ac <sms_button_define_services+0x50>)
1000a88e:	4b08      	ldr	r3, [pc, #32]	; (1000a8b0 <sms_button_define_services+0x54>)
1000a890:	4798      	blx	r3
1000a892:	4b0a      	ldr	r3, [pc, #40]	; (1000a8bc <sms_button_define_services+0x60>)
1000a894:	8ad9      	ldrh	r1, [r3, #22]
1000a896:	480a      	ldr	r0, [pc, #40]	; (1000a8c0 <sms_button_define_services+0x64>)
1000a898:	4b07      	ldr	r3, [pc, #28]	; (1000a8b8 <sms_button_define_services+0x5c>)
1000a89a:	4798      	blx	r3
    }
1000a89c:	b002      	add	sp, #8
1000a89e:	bd10      	pop	{r4, pc}
1000a8a0:	1001a060 	.word	0x1001a060
1000a8a4:	1000a371 	.word	0x1000a371
1000a8a8:	1000a34d 	.word	0x1000a34d
1000a8ac:	100164f8 	.word	0x100164f8
1000a8b0:	10015351 	.word	0x10015351
1000a8b4:	10016cd0 	.word	0x10016cd0
1000a8b8:	10015231 	.word	0x10015231
1000a8bc:	1001a05c 	.word	0x1001a05c
1000a8c0:	10016d14 	.word	0x10016d14

1000a8c4 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a8c4:	b510      	push	{r4, lr}
1000a8c6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a8c8:	ac01      	add	r4, sp, #4
1000a8ca:	0020      	movs	r0, r4
1000a8cc:	4b0a      	ldr	r3, [pc, #40]	; (1000a8f8 <sms_monitor_configure_gpio+0x34>)
1000a8ce:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a8d0:	2301      	movs	r3, #1
1000a8d2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a8d4:	0021      	movs	r1, r4
1000a8d6:	2002      	movs	r0, #2
1000a8d8:	4b08      	ldr	r3, [pc, #32]	; (1000a8fc <sms_monitor_configure_gpio+0x38>)
1000a8da:	4798      	blx	r3
1000a8dc:	2800      	cmp	r0, #0
1000a8de:	d005      	beq.n	1000a8ec <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a8e0:	4807      	ldr	r0, [pc, #28]	; (1000a900 <sms_monitor_configure_gpio+0x3c>)
1000a8e2:	4b08      	ldr	r3, [pc, #32]	; (1000a904 <sms_monitor_configure_gpio+0x40>)
1000a8e4:	4798      	blx	r3
1000a8e6:	4808      	ldr	r0, [pc, #32]	; (1000a908 <sms_monitor_configure_gpio+0x44>)
1000a8e8:	4b08      	ldr	r3, [pc, #32]	; (1000a90c <sms_monitor_configure_gpio+0x48>)
1000a8ea:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a8ec:	2100      	movs	r1, #0
1000a8ee:	2002      	movs	r0, #2
1000a8f0:	4b07      	ldr	r3, [pc, #28]	; (1000a910 <sms_monitor_configure_gpio+0x4c>)
1000a8f2:	4798      	blx	r3
}
1000a8f4:	b002      	add	sp, #8
1000a8f6:	bd10      	pop	{r4, pc}
1000a8f8:	1000bfd5 	.word	0x1000bfd5
1000a8fc:	1000bfe5 	.word	0x1000bfe5
1000a900:	100164f8 	.word	0x100164f8
1000a904:	10015351 	.word	0x10015351
1000a908:	10016d5c 	.word	0x10016d5c
1000a90c:	10015231 	.word	0x10015231
1000a910:	1000c23d 	.word	0x1000c23d

1000a914 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a914:	b570      	push	{r4, r5, r6, lr}
1000a916:	b084      	sub	sp, #16
1000a918:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a91a:	480c      	ldr	r0, [pc, #48]	; (1000a94c <sms_monitor_get_states+0x38>)
1000a91c:	4b0c      	ldr	r3, [pc, #48]	; (1000a950 <sms_monitor_get_states+0x3c>)
1000a91e:	4798      	blx	r3
1000a920:	4b0c      	ldr	r3, [pc, #48]	; (1000a954 <sms_monitor_get_states+0x40>)
1000a922:	7819      	ldrb	r1, [r3, #0]
1000a924:	4b0c      	ldr	r3, [pc, #48]	; (1000a958 <sms_monitor_get_states+0x44>)
1000a926:	7818      	ldrb	r0, [r3, #0]
1000a928:	4b0c      	ldr	r3, [pc, #48]	; (1000a95c <sms_monitor_get_states+0x48>)
1000a92a:	781d      	ldrb	r5, [r3, #0]
1000a92c:	4b0c      	ldr	r3, [pc, #48]	; (1000a960 <sms_monitor_get_states+0x4c>)
1000a92e:	781e      	ldrb	r6, [r3, #0]
1000a930:	4a0c      	ldr	r2, [pc, #48]	; (1000a964 <sms_monitor_get_states+0x50>)
1000a932:	7853      	ldrb	r3, [r2, #1]
1000a934:	7812      	ldrb	r2, [r2, #0]
1000a936:	9603      	str	r6, [sp, #12]
1000a938:	9502      	str	r5, [sp, #8]
1000a93a:	9001      	str	r0, [sp, #4]
1000a93c:	9100      	str	r1, [sp, #0]
1000a93e:	0021      	movs	r1, r4
1000a940:	4809      	ldr	r0, [pc, #36]	; (1000a968 <sms_monitor_get_states+0x54>)
1000a942:	4c0a      	ldr	r4, [pc, #40]	; (1000a96c <sms_monitor_get_states+0x58>)
1000a944:	47a0      	blx	r4
}
1000a946:	b004      	add	sp, #16
1000a948:	bd70      	pop	{r4, r5, r6, pc}
1000a94a:	46c0      	nop			; (mov r8, r8)
1000a94c:	100164f8 	.word	0x100164f8
1000a950:	10015351 	.word	0x10015351
1000a954:	1001a16c 	.word	0x1001a16c
1000a958:	10019fc0 	.word	0x10019fc0
1000a95c:	1001a16d 	.word	0x1001a16d
1000a960:	1001a054 	.word	0x1001a054
1000a964:	1001a05c 	.word	0x1001a05c
1000a968:	10016d7c 	.word	0x10016d7c
1000a96c:	10015231 	.word	0x10015231

1000a970 <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a970:	b510      	push	{r4, lr}
1000a972:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a974:	2800      	cmp	r0, #0
1000a976:	d007      	beq.n	1000a988 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000a978:	2102      	movs	r1, #2
1000a97a:	2330      	movs	r3, #48	; 0x30
1000a97c:	4a15      	ldr	r2, [pc, #84]	; (1000a9d4 <sms_sensors_interrupt_toggle+0x64>)
1000a97e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000a980:	201e      	movs	r0, #30
1000a982:	4b15      	ldr	r3, [pc, #84]	; (1000a9d8 <sms_sensors_interrupt_toggle+0x68>)
1000a984:	4798      	blx	r3
1000a986:	e006      	b.n	1000a996 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000a988:	2100      	movs	r1, #0
1000a98a:	2330      	movs	r3, #48	; 0x30
1000a98c:	4a11      	ldr	r2, [pc, #68]	; (1000a9d4 <sms_sensors_interrupt_toggle+0x64>)
1000a98e:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000a990:	201e      	movs	r0, #30
1000a992:	4b12      	ldr	r3, [pc, #72]	; (1000a9dc <sms_sensors_interrupt_toggle+0x6c>)
1000a994:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000a996:	2c00      	cmp	r4, #0
1000a998:	d010      	beq.n	1000a9bc <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000a99a:	4b11      	ldr	r3, [pc, #68]	; (1000a9e0 <sms_sensors_interrupt_toggle+0x70>)
1000a99c:	2103      	movs	r1, #3
1000a99e:	2225      	movs	r2, #37	; 0x25
1000a9a0:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000a9a2:	3901      	subs	r1, #1
1000a9a4:	3203      	adds	r2, #3
1000a9a6:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a9a8:	2100      	movs	r1, #0
1000a9aa:	480e      	ldr	r0, [pc, #56]	; (1000a9e4 <sms_sensors_interrupt_toggle+0x74>)
1000a9ac:	4b0e      	ldr	r3, [pc, #56]	; (1000a9e8 <sms_sensors_interrupt_toggle+0x78>)
1000a9ae:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a9b0:	4b0e      	ldr	r3, [pc, #56]	; (1000a9ec <sms_sensors_interrupt_toggle+0x7c>)
1000a9b2:	4798      	blx	r3
        sensors_active = true;
1000a9b4:	2201      	movs	r2, #1
1000a9b6:	4b0e      	ldr	r3, [pc, #56]	; (1000a9f0 <sms_sensors_interrupt_toggle+0x80>)
1000a9b8:	701a      	strb	r2, [r3, #0]
1000a9ba:	e00a      	b.n	1000a9d2 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000a9bc:	2102      	movs	r1, #2
1000a9be:	2325      	movs	r3, #37	; 0x25
1000a9c0:	4a07      	ldr	r2, [pc, #28]	; (1000a9e0 <sms_sensors_interrupt_toggle+0x70>)
1000a9c2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000a9c4:	4b0b      	ldr	r3, [pc, #44]	; (1000a9f4 <sms_sensors_interrupt_toggle+0x84>)
1000a9c6:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000a9c8:	4b0b      	ldr	r3, [pc, #44]	; (1000a9f8 <sms_sensors_interrupt_toggle+0x88>)
1000a9ca:	4798      	blx	r3
        sensors_active = false;
1000a9cc:	2200      	movs	r2, #0
1000a9ce:	4b08      	ldr	r3, [pc, #32]	; (1000a9f0 <sms_sensors_interrupt_toggle+0x80>)
1000a9d0:	701a      	strb	r2, [r3, #0]
    }
}
1000a9d2:	bd10      	pop	{r4, pc}
1000a9d4:	10019fc4 	.word	0x10019fc4
1000a9d8:	1000c4e5 	.word	0x1000c4e5
1000a9dc:	1000c541 	.word	0x1000c541
1000a9e0:	1001a0d0 	.word	0x1001a0d0
1000a9e4:	00000cc6 	.word	0x00000cc6
1000a9e8:	1000b39d 	.word	0x1000b39d
1000a9ec:	1000b3d1 	.word	0x1000b3d1
1000a9f0:	1001a160 	.word	0x1001a160
1000a9f4:	1000b3c5 	.word	0x1000b3c5
1000a9f8:	1000b3f1 	.word	0x1000b3f1

1000a9fc <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a9fc:	b510      	push	{r4, lr}
1000a9fe:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aa00:	2800      	cmp	r0, #0
1000aa02:	d001      	beq.n	1000aa08 <sms_sensors_switch+0xc>
        sms_mpu_initialize();
1000aa04:	4b09      	ldr	r3, [pc, #36]	; (1000aa2c <sms_sensors_switch+0x30>)
1000aa06:	4798      	blx	r3
    else {
        //gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
    }
    
    /* Pressure */
    if(press_en) {                
1000aa08:	2c00      	cmp	r4, #0
1000aa0a:	d009      	beq.n	1000aa20 <sms_sensors_switch+0x24>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000aa0c:	4b08      	ldr	r3, [pc, #32]	; (1000aa30 <sms_sensors_switch+0x34>)
1000aa0e:	2101      	movs	r1, #1
1000aa10:	2225      	movs	r2, #37	; 0x25
1000aa12:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
1000aa14:	2200      	movs	r2, #0
1000aa16:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
1000aa18:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000aa1a:	4b06      	ldr	r3, [pc, #24]	; (1000aa34 <sms_sensors_switch+0x38>)
1000aa1c:	4798      	blx	r3
1000aa1e:	e003      	b.n	1000aa28 <sms_sensors_switch+0x2c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000aa20:	2100      	movs	r1, #0
1000aa22:	2007      	movs	r0, #7
1000aa24:	4b04      	ldr	r3, [pc, #16]	; (1000aa38 <sms_sensors_switch+0x3c>)
1000aa26:	4798      	blx	r3
    }
}
1000aa28:	bd10      	pop	{r4, pc}
1000aa2a:	46c0      	nop			; (mov r8, r8)
1000aa2c:	1000ac61 	.word	0x1000ac61
1000aa30:	1001a0d0 	.word	0x1001a0d0
1000aa34:	1000aedd 	.word	0x1000aedd
1000aa38:	1000c23d 	.word	0x1000c23d

1000aa3c <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000aa3c:	b530      	push	{r4, r5, lr}
1000aa3e:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa40:	2010      	movs	r0, #16
1000aa42:	4c14      	ldr	r4, [pc, #80]	; (1000aa94 <sms_i2c_master_configure+0x58>)
1000aa44:	47a0      	blx	r4
1000aa46:	4b14      	ldr	r3, [pc, #80]	; (1000aa98 <sms_i2c_master_configure+0x5c>)
1000aa48:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000aa4a:	2010      	movs	r0, #16
1000aa4c:	47a0      	blx	r4
1000aa4e:	4b13      	ldr	r3, [pc, #76]	; (1000aa9c <sms_i2c_master_configure+0x60>)
1000aa50:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000aa52:	ac01      	add	r4, sp, #4
1000aa54:	0020      	movs	r0, r4
1000aa56:	4b12      	ldr	r3, [pc, #72]	; (1000aaa0 <sms_i2c_master_configure+0x64>)
1000aa58:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000aa5a:	2300      	movs	r3, #0
1000aa5c:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000aa5e:	3341      	adds	r3, #65	; 0x41
1000aa60:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000aa62:	3b33      	subs	r3, #51	; 0x33
1000aa64:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000aa66:	3301      	adds	r3, #1
1000aa68:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000aa6a:	3b0b      	subs	r3, #11
1000aa6c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000aa6e:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000aa70:	4d0c      	ldr	r5, [pc, #48]	; (1000aaa4 <sms_i2c_master_configure+0x68>)
1000aa72:	4c0d      	ldr	r4, [pc, #52]	; (1000aaa8 <sms_i2c_master_configure+0x6c>)
1000aa74:	aa01      	add	r2, sp, #4
1000aa76:	490d      	ldr	r1, [pc, #52]	; (1000aaac <sms_i2c_master_configure+0x70>)
1000aa78:	0028      	movs	r0, r5
1000aa7a:	47a0      	blx	r4
1000aa7c:	2800      	cmp	r0, #0
1000aa7e:	d1f9      	bne.n	1000aa74 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000aa80:	4b08      	ldr	r3, [pc, #32]	; (1000aaa4 <sms_i2c_master_configure+0x68>)
1000aa82:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000aa84:	2128      	movs	r1, #40	; 0x28
1000aa86:	5c53      	ldrb	r3, [r2, r1]
1000aa88:	07db      	lsls	r3, r3, #31
1000aa8a:	d4fc      	bmi.n	1000aa86 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000aa8c:	2301      	movs	r3, #1
1000aa8e:	7513      	strb	r3, [r2, #20]
}
1000aa90:	b007      	add	sp, #28
1000aa92:	bd30      	pop	{r4, r5, pc}
1000aa94:	100150a5 	.word	0x100150a5
1000aa98:	1001a174 	.word	0x1001a174
1000aa9c:	1001a158 	.word	0x1001a158
1000aaa0:	10008369 	.word	0x10008369
1000aaa4:	1001a164 	.word	0x1001a164
1000aaa8:	10008381 	.word	0x10008381
1000aaac:	40003400 	.word	0x40003400

1000aab0 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000aab2:	4c12      	ldr	r4, [pc, #72]	; (1000aafc <sms_i2c_master_write+0x4c>)
1000aab4:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000aab6:	1c50      	adds	r0, r2, #1
1000aab8:	b2c0      	uxtb	r0, r0
1000aaba:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000aabc:	6860      	ldr	r0, [r4, #4]
1000aabe:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000aac0:	2a00      	cmp	r2, #0
1000aac2:	d00e      	beq.n	1000aae2 <sms_i2c_master_write+0x32>
1000aac4:	2000      	movs	r0, #0
1000aac6:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000aac8:	5c18      	ldrb	r0, [r3, r0]
1000aaca:	6865      	ldr	r5, [r4, #4]
1000aacc:	5468      	strb	r0, [r5, r1]
1000aace:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aad0:	b2c9      	uxtb	r1, r1
1000aad2:	428a      	cmp	r2, r1
1000aad4:	d8f7      	bhi.n	1000aac6 <sms_i2c_master_write+0x16>
1000aad6:	e004      	b.n	1000aae2 <sms_i2c_master_write+0x32>
1000aad8:	3c01      	subs	r4, #1
1000aada:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000aadc:	2c00      	cmp	r4, #0
1000aade:	d104      	bne.n	1000aaea <sms_i2c_master_write+0x3a>
1000aae0:	e009      	b.n	1000aaf6 <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000aae2:	4c07      	ldr	r4, [pc, #28]	; (1000ab00 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000aae4:	4e05      	ldr	r6, [pc, #20]	; (1000aafc <sms_i2c_master_write+0x4c>)
1000aae6:	4d07      	ldr	r5, [pc, #28]	; (1000ab04 <sms_i2c_master_write+0x54>)
1000aae8:	4f07      	ldr	r7, [pc, #28]	; (1000ab08 <sms_i2c_master_write+0x58>)
1000aaea:	0031      	movs	r1, r6
1000aaec:	0028      	movs	r0, r5
1000aaee:	47b8      	blx	r7
1000aaf0:	2800      	cmp	r0, #0
1000aaf2:	d1f1      	bne.n	1000aad8 <sms_i2c_master_write+0x28>
1000aaf4:	e001      	b.n	1000aafa <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aaf6:	2001      	movs	r0, #1
1000aaf8:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aafc:	1001a174 	.word	0x1001a174
1000ab00:	000003e9 	.word	0x000003e9
1000ab04:	1001a164 	.word	0x1001a164
1000ab08:	10008419 	.word	0x10008419

1000ab0c <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab0e:	4647      	mov	r7, r8
1000ab10:	b480      	push	{r7}
1000ab12:	0017      	movs	r7, r2
1000ab14:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000ab16:	b280      	uxth	r0, r0
1000ab18:	4b1d      	ldr	r3, [pc, #116]	; (1000ab90 <sms_i2c_master_read+0x84>)
1000ab1a:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000ab1c:	2201      	movs	r2, #1
1000ab1e:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000ab20:	685b      	ldr	r3, [r3, #4]
1000ab22:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000ab24:	4b1b      	ldr	r3, [pc, #108]	; (1000ab94 <sms_i2c_master_read+0x88>)
1000ab26:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000ab28:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab2a:	4c1b      	ldr	r4, [pc, #108]	; (1000ab98 <sms_i2c_master_read+0x8c>)
1000ab2c:	4e18      	ldr	r6, [pc, #96]	; (1000ab90 <sms_i2c_master_read+0x84>)
1000ab2e:	4d1b      	ldr	r5, [pc, #108]	; (1000ab9c <sms_i2c_master_read+0x90>)
1000ab30:	e003      	b.n	1000ab3a <sms_i2c_master_read+0x2e>
1000ab32:	3c01      	subs	r4, #1
1000ab34:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000ab36:	2c00      	cmp	r4, #0
1000ab38:	d01f      	beq.n	1000ab7a <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000ab3a:	0031      	movs	r1, r6
1000ab3c:	4818      	ldr	r0, [pc, #96]	; (1000aba0 <sms_i2c_master_read+0x94>)
1000ab3e:	47a8      	blx	r5
1000ab40:	2800      	cmp	r0, #0
1000ab42:	d1f6      	bne.n	1000ab32 <sms_i2c_master_read+0x26>
1000ab44:	4e14      	ldr	r6, [pc, #80]	; (1000ab98 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ab46:	4d13      	ldr	r5, [pc, #76]	; (1000ab94 <sms_i2c_master_read+0x88>)
1000ab48:	4c16      	ldr	r4, [pc, #88]	; (1000aba4 <sms_i2c_master_read+0x98>)
1000ab4a:	e003      	b.n	1000ab54 <sms_i2c_master_read+0x48>
1000ab4c:	3e01      	subs	r6, #1
1000ab4e:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000ab50:	2e00      	cmp	r6, #0
1000ab52:	d015      	beq.n	1000ab80 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000ab54:	0029      	movs	r1, r5
1000ab56:	4812      	ldr	r0, [pc, #72]	; (1000aba0 <sms_i2c_master_read+0x94>)
1000ab58:	47a0      	blx	r4
1000ab5a:	2800      	cmp	r0, #0
1000ab5c:	d1f6      	bne.n	1000ab4c <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ab5e:	2f00      	cmp	r7, #0
1000ab60:	d011      	beq.n	1000ab86 <sms_i2c_master_read+0x7a>
1000ab62:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000ab64:	490b      	ldr	r1, [pc, #44]	; (1000ab94 <sms_i2c_master_read+0x88>)
1000ab66:	684a      	ldr	r2, [r1, #4]
1000ab68:	5cd2      	ldrb	r2, [r2, r3]
1000ab6a:	4640      	mov	r0, r8
1000ab6c:	54c2      	strb	r2, [r0, r3]
1000ab6e:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000ab70:	b2da      	uxtb	r2, r3
1000ab72:	4297      	cmp	r7, r2
1000ab74:	d8f7      	bhi.n	1000ab66 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ab76:	2000      	movs	r0, #0
1000ab78:	e006      	b.n	1000ab88 <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab7a:	2001      	movs	r0, #1
1000ab7c:	4240      	negs	r0, r0
1000ab7e:	e003      	b.n	1000ab88 <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000ab80:	2001      	movs	r0, #1
1000ab82:	4240      	negs	r0, r0
1000ab84:	e000      	b.n	1000ab88 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000ab86:	2000      	movs	r0, #0
1000ab88:	bc04      	pop	{r2}
1000ab8a:	4690      	mov	r8, r2
1000ab8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab8e:	46c0      	nop			; (mov r8, r8)
1000ab90:	1001a174 	.word	0x1001a174
1000ab94:	1001a158 	.word	0x1001a158
1000ab98:	000003e9 	.word	0x000003e9
1000ab9c:	1000843d 	.word	0x1000843d
1000aba0:	1001a164 	.word	0x1001a164
1000aba4:	100083f5 	.word	0x100083f5

1000aba8 <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000aba8:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
1000abaa:	2203      	movs	r2, #3
1000abac:	4b04      	ldr	r3, [pc, #16]	; (1000abc0 <sms_mpu_interrupt_callback+0x18>)
1000abae:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000abb0:	2300      	movs	r3, #0
1000abb2:	2200      	movs	r2, #0
1000abb4:	2102      	movs	r1, #2
1000abb6:	201e      	movs	r0, #30
1000abb8:	4c02      	ldr	r4, [pc, #8]	; (1000abc4 <sms_mpu_interrupt_callback+0x1c>)
1000abba:	47a0      	blx	r4
}
1000abbc:	bd10      	pop	{r4, pc}
1000abbe:	46c0      	nop			; (mov r8, r8)
1000abc0:	1001a154 	.word	0x1001a154
1000abc4:	1000f2a5 	.word	0x1000f2a5

1000abc8 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000abc8:	b510      	push	{r4, lr}
1000abca:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000abcc:	ac01      	add	r4, sp, #4
1000abce:	0020      	movs	r0, r4
1000abd0:	4b15      	ldr	r3, [pc, #84]	; (1000ac28 <sms_mpu_configure_gpio+0x60>)
1000abd2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000abd4:	2300      	movs	r3, #0
1000abd6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000abd8:	3302      	adds	r3, #2
1000abda:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000abdc:	3b01      	subs	r3, #1
1000abde:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000abe0:	0021      	movs	r1, r4
1000abe2:	201e      	movs	r0, #30
1000abe4:	4b11      	ldr	r3, [pc, #68]	; (1000ac2c <sms_mpu_configure_gpio+0x64>)
1000abe6:	4798      	blx	r3
1000abe8:	2800      	cmp	r0, #0
1000abea:	d005      	beq.n	1000abf8 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000abec:	4810      	ldr	r0, [pc, #64]	; (1000ac30 <sms_mpu_configure_gpio+0x68>)
1000abee:	4b11      	ldr	r3, [pc, #68]	; (1000ac34 <sms_mpu_configure_gpio+0x6c>)
1000abf0:	4798      	blx	r3
1000abf2:	4811      	ldr	r0, [pc, #68]	; (1000ac38 <sms_mpu_configure_gpio+0x70>)
1000abf4:	4b11      	ldr	r3, [pc, #68]	; (1000ac3c <sms_mpu_configure_gpio+0x74>)
1000abf6:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000abf8:	ac01      	add	r4, sp, #4
1000abfa:	0020      	movs	r0, r4
1000abfc:	4b0a      	ldr	r3, [pc, #40]	; (1000ac28 <sms_mpu_configure_gpio+0x60>)
1000abfe:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ac00:	2301      	movs	r3, #1
1000ac02:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac04:	0021      	movs	r1, r4
1000ac06:	2006      	movs	r0, #6
1000ac08:	4b08      	ldr	r3, [pc, #32]	; (1000ac2c <sms_mpu_configure_gpio+0x64>)
1000ac0a:	4798      	blx	r3
1000ac0c:	2800      	cmp	r0, #0
1000ac0e:	d105      	bne.n	1000ac1c <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU VCC pin");
1000ac10:	4807      	ldr	r0, [pc, #28]	; (1000ac30 <sms_mpu_configure_gpio+0x68>)
1000ac12:	4b08      	ldr	r3, [pc, #32]	; (1000ac34 <sms_mpu_configure_gpio+0x6c>)
1000ac14:	4798      	blx	r3
1000ac16:	480a      	ldr	r0, [pc, #40]	; (1000ac40 <sms_mpu_configure_gpio+0x78>)
1000ac18:	4b08      	ldr	r3, [pc, #32]	; (1000ac3c <sms_mpu_configure_gpio+0x74>)
1000ac1a:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000ac1c:	2101      	movs	r1, #1
1000ac1e:	2006      	movs	r0, #6
1000ac20:	4b08      	ldr	r3, [pc, #32]	; (1000ac44 <sms_mpu_configure_gpio+0x7c>)
1000ac22:	4798      	blx	r3
}
1000ac24:	b002      	add	sp, #8
1000ac26:	bd10      	pop	{r4, pc}
1000ac28:	1000bfd5 	.word	0x1000bfd5
1000ac2c:	1000bfe5 	.word	0x1000bfe5
1000ac30:	100164f8 	.word	0x100164f8
1000ac34:	10015351 	.word	0x10015351
1000ac38:	10016dbc 	.word	0x10016dbc
1000ac3c:	10015231 	.word	0x10015231
1000ac40:	10016dfc 	.word	0x10016dfc
1000ac44:	1000c23d 	.word	0x1000c23d

1000ac48 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000ac48:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000ac4a:	2202      	movs	r2, #2
1000ac4c:	4902      	ldr	r1, [pc, #8]	; (1000ac58 <sms_mpu_register_callbacks+0x10>)
1000ac4e:	201e      	movs	r0, #30
1000ac50:	4b02      	ldr	r3, [pc, #8]	; (1000ac5c <sms_mpu_register_callbacks+0x14>)
1000ac52:	4798      	blx	r3
}
1000ac54:	bd10      	pop	{r4, pc}
1000ac56:	46c0      	nop			; (mov r8, r8)
1000ac58:	1000aba9 	.word	0x1000aba9
1000ac5c:	1000c415 	.word	0x1000c415

1000ac60 <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000ac60:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000ac62:	4825      	ldr	r0, [pc, #148]	; (1000acf8 <sms_mpu_initialize+0x98>)
1000ac64:	4b25      	ldr	r3, [pc, #148]	; (1000acfc <sms_mpu_initialize+0x9c>)
1000ac66:	4798      	blx	r3
1000ac68:	4825      	ldr	r0, [pc, #148]	; (1000ad00 <sms_mpu_initialize+0xa0>)
1000ac6a:	4b26      	ldr	r3, [pc, #152]	; (1000ad04 <sms_mpu_initialize+0xa4>)
1000ac6c:	4798      	blx	r3
    res = mpu_init(NULL);
1000ac6e:	2000      	movs	r0, #0
1000ac70:	4b25      	ldr	r3, [pc, #148]	; (1000ad08 <sms_mpu_initialize+0xa8>)
1000ac72:	4798      	blx	r3
    if(res) {
1000ac74:	2800      	cmp	r0, #0
1000ac76:	d005      	beq.n	1000ac84 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ac78:	4824      	ldr	r0, [pc, #144]	; (1000ad0c <sms_mpu_initialize+0xac>)
1000ac7a:	4b22      	ldr	r3, [pc, #136]	; (1000ad04 <sms_mpu_initialize+0xa4>)
1000ac7c:	4798      	blx	r3
        return -1;
1000ac7e:	2001      	movs	r0, #1
1000ac80:	4240      	negs	r0, r0
1000ac82:	e037      	b.n	1000acf4 <sms_mpu_initialize+0x94>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ac84:	481c      	ldr	r0, [pc, #112]	; (1000acf8 <sms_mpu_initialize+0x98>)
1000ac86:	4b1d      	ldr	r3, [pc, #116]	; (1000acfc <sms_mpu_initialize+0x9c>)
1000ac88:	4798      	blx	r3
1000ac8a:	4821      	ldr	r0, [pc, #132]	; (1000ad10 <sms_mpu_initialize+0xb0>)
1000ac8c:	4b1d      	ldr	r3, [pc, #116]	; (1000ad04 <sms_mpu_initialize+0xa4>)
1000ac8e:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ac90:	2079      	movs	r0, #121	; 0x79
1000ac92:	4b20      	ldr	r3, [pc, #128]	; (1000ad14 <sms_mpu_initialize+0xb4>)
1000ac94:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ac96:	2078      	movs	r0, #120	; 0x78
1000ac98:	4b1f      	ldr	r3, [pc, #124]	; (1000ad18 <sms_mpu_initialize+0xb8>)
1000ac9a:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ac9c:	200a      	movs	r0, #10
1000ac9e:	4b1f      	ldr	r3, [pc, #124]	; (1000ad1c <sms_mpu_initialize+0xbc>)
1000aca0:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000aca2:	2001      	movs	r0, #1
1000aca4:	4b1e      	ldr	r3, [pc, #120]	; (1000ad20 <sms_mpu_initialize+0xc0>)
1000aca6:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000aca8:	4d1e      	ldr	r5, [pc, #120]	; (1000ad24 <sms_mpu_initialize+0xc4>)
1000acaa:	0028      	movs	r0, r5
1000acac:	4b1e      	ldr	r3, [pc, #120]	; (1000ad28 <sms_mpu_initialize+0xc8>)
1000acae:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000acb0:	1f68      	subs	r0, r5, #5
1000acb2:	4b1e      	ldr	r3, [pc, #120]	; (1000ad2c <sms_mpu_initialize+0xcc>)
1000acb4:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000acb6:	1ea8      	subs	r0, r5, #2
1000acb8:	4b1d      	ldr	r3, [pc, #116]	; (1000ad30 <sms_mpu_initialize+0xd0>)
1000acba:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000acbc:	002c      	movs	r4, r5
1000acbe:	2307      	movs	r3, #7
1000acc0:	76eb      	strb	r3, [r5, #27]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000acc2:	20f0      	movs	r0, #240	; 0xf0
1000acc4:	0040      	lsls	r0, r0, #1
1000acc6:	83e8      	strh	r0, [r5, #30]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000acc8:	3c0a      	subs	r4, #10
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000acca:	4b1a      	ldr	r3, [pc, #104]	; (1000ad34 <sms_mpu_initialize+0xd4>)
1000accc:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000acce:	200a      	movs	r0, #10
1000acd0:	4b19      	ldr	r3, [pc, #100]	; (1000ad38 <sms_mpu_initialize+0xd8>)
1000acd2:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000acd4:	2001      	movs	r0, #1
1000acd6:	4b19      	ldr	r3, [pc, #100]	; (1000ad3c <sms_mpu_initialize+0xdc>)
1000acd8:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000acda:	2201      	movs	r2, #1
1000acdc:	2326      	movs	r3, #38	; 0x26
1000acde:	54e2      	strb	r2, [r4, r3]
    mpu_device.temp_cnt = 0;
1000ace0:	2300      	movs	r3, #0
1000ace2:	322c      	adds	r2, #44	; 0x2c
1000ace4:	54a3      	strb	r3, [r4, r2]
    mpu_device.compass_cnt = 0;
1000ace6:	3a01      	subs	r2, #1
1000ace8:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_compass = false;
1000acea:	3202      	adds	r2, #2
1000acec:	54a3      	strb	r3, [r4, r2]
    mpu_device.new_temp = false;
1000acee:	3201      	adds	r2, #1
1000acf0:	54a3      	strb	r3, [r4, r2]
    
    return 0;
1000acf2:	2000      	movs	r0, #0
}
1000acf4:	bd70      	pop	{r4, r5, r6, pc}
1000acf6:	46c0      	nop			; (mov r8, r8)
1000acf8:	100164f8 	.word	0x100164f8
1000acfc:	10015351 	.word	0x10015351
1000ad00:	10016e3c 	.word	0x10016e3c
1000ad04:	10015231 	.word	0x10015231
1000ad08:	100092b1 	.word	0x100092b1
1000ad0c:	10016e50 	.word	0x10016e50
1000ad10:	10016e5c 	.word	0x10016e5c
1000ad14:	100090c9 	.word	0x100090c9
1000ad18:	10008a85 	.word	0x10008a85
1000ad1c:	10008ff5 	.word	0x10008ff5
1000ad20:	10008a0d 	.word	0x10008a0d
1000ad24:	10019fce 	.word	0x10019fce
1000ad28:	100089f1 	.word	0x100089f1
1000ad2c:	10008855 	.word	0x10008855
1000ad30:	100097b9 	.word	0x100097b9
1000ad34:	10009c29 	.word	0x10009c29
1000ad38:	100097c9 	.word	0x100097c9
1000ad3c:	10009659 	.word	0x10009659

1000ad40 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000ad40:	b530      	push	{r4, r5, lr}
1000ad42:	b085      	sub	sp, #20
    short sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    
    mpu_device.hal.new_data = 0;
1000ad44:	4c1e      	ldr	r4, [pc, #120]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ad46:	2200      	movs	r2, #0
1000ad48:	2324      	movs	r3, #36	; 0x24
1000ad4a:	54e2      	strb	r2, [r4, r3]
    
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000ad4c:	0021      	movs	r1, r4
1000ad4e:	3112      	adds	r1, #18
1000ad50:	0020      	movs	r0, r4
1000ad52:	300c      	adds	r0, #12
1000ad54:	3b17      	subs	r3, #23
1000ad56:	446b      	add	r3, sp
1000ad58:	9300      	str	r3, [sp, #0]
1000ad5a:	230e      	movs	r3, #14
1000ad5c:	446b      	add	r3, sp
1000ad5e:	aa02      	add	r2, sp, #8
1000ad60:	4d18      	ldr	r5, [pc, #96]	; (1000adc4 <sms_mpu_poll_data+0x84>)
1000ad62:	47a8      	blx	r5
    
    //if(more) {
        //mpu_device.hal.new_data = 1;
    //}
    
    if(mpu_device.temp_cnt++ > SMS_MPU_TEMP_MULTIPLIER) {
1000ad64:	232d      	movs	r3, #45	; 0x2d
1000ad66:	5ce3      	ldrb	r3, [r4, r3]
1000ad68:	2b0a      	cmp	r3, #10
1000ad6a:	d804      	bhi.n	1000ad76 <sms_mpu_poll_data+0x36>
1000ad6c:	3301      	adds	r3, #1
1000ad6e:	222d      	movs	r2, #45	; 0x2d
1000ad70:	4913      	ldr	r1, [pc, #76]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ad72:	548b      	strb	r3, [r1, r2]
1000ad74:	e00b      	b.n	1000ad8e <sms_mpu_poll_data+0x4e>
        mpu_device.temp_cnt = 0;
1000ad76:	4c12      	ldr	r4, [pc, #72]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ad78:	2200      	movs	r2, #0
1000ad7a:	232d      	movs	r3, #45	; 0x2d
1000ad7c:	54e2      	strb	r2, [r4, r3]
        mpu_get_temperature(&mpu_device.hal.temperature, &sensor_timestamp);
1000ad7e:	0020      	movs	r0, r4
1000ad80:	3020      	adds	r0, #32
1000ad82:	a902      	add	r1, sp, #8
1000ad84:	4b10      	ldr	r3, [pc, #64]	; (1000adc8 <sms_mpu_poll_data+0x88>)
1000ad86:	4798      	blx	r3
        mpu_device.new_temp = true;
1000ad88:	2201      	movs	r2, #1
1000ad8a:	232f      	movs	r3, #47	; 0x2f
1000ad8c:	54e2      	strb	r2, [r4, r3]
    }
    
    if(mpu_device.compass_cnt++ > SMS_MPU_COMPASS_MULTIPLIER) {
1000ad8e:	232c      	movs	r3, #44	; 0x2c
1000ad90:	4a0b      	ldr	r2, [pc, #44]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ad92:	5cd3      	ldrb	r3, [r2, r3]
1000ad94:	2b0a      	cmp	r3, #10
1000ad96:	d804      	bhi.n	1000ada2 <sms_mpu_poll_data+0x62>
1000ad98:	3301      	adds	r3, #1
1000ad9a:	222c      	movs	r2, #44	; 0x2c
1000ad9c:	4908      	ldr	r1, [pc, #32]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ad9e:	548b      	strb	r3, [r1, r2]
1000ada0:	e00b      	b.n	1000adba <sms_mpu_poll_data+0x7a>
        mpu_device.compass_cnt = 0;
1000ada2:	4c07      	ldr	r4, [pc, #28]	; (1000adc0 <sms_mpu_poll_data+0x80>)
1000ada4:	2200      	movs	r2, #0
1000ada6:	232c      	movs	r3, #44	; 0x2c
1000ada8:	54e2      	strb	r2, [r4, r3]
        mpu_get_compass_reg(&mpu_device.hal.compass, &sensor_timestamp);
1000adaa:	0020      	movs	r0, r4
1000adac:	3018      	adds	r0, #24
1000adae:	a902      	add	r1, sp, #8
1000adb0:	4b06      	ldr	r3, [pc, #24]	; (1000adcc <sms_mpu_poll_data+0x8c>)
1000adb2:	4798      	blx	r3
        mpu_device.new_compass = true;   
1000adb4:	2201      	movs	r2, #1
1000adb6:	232e      	movs	r3, #46	; 0x2e
1000adb8:	54e2      	strb	r2, [r4, r3]
    //}
    //gpio_enable_callback(SMS_IMU_INTERRUPT_PIN);


    return 0;
}
1000adba:	2000      	movs	r0, #0
1000adbc:	b005      	add	sp, #20
1000adbe:	bd30      	pop	{r4, r5, pc}
1000adc0:	10019fc4 	.word	0x10019fc4
1000adc4:	10008af1 	.word	0x10008af1
1000adc8:	10008505 	.word	0x10008505
1000adcc:	100096fd 	.word	0x100096fd

1000add0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000add0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000add2:	2100      	movs	r1, #0
1000add4:	4b01      	ldr	r3, [pc, #4]	; (1000addc <sms_led_switch_on+0xc>)
1000add6:	4798      	blx	r3
}
1000add8:	bd10      	pop	{r4, pc}
1000adda:	46c0      	nop			; (mov r8, r8)
1000addc:	1000c23d 	.word	0x1000c23d

1000ade0 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ade0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ade2:	2101      	movs	r1, #1
1000ade4:	4b01      	ldr	r3, [pc, #4]	; (1000adec <sms_led_switch_off+0xc>)
1000ade6:	4798      	blx	r3
}
1000ade8:	bd10      	pop	{r4, pc}
1000adea:	46c0      	nop			; (mov r8, r8)
1000adec:	1000c23d 	.word	0x1000c23d

1000adf0 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000adf0:	b510      	push	{r4, lr}
1000adf2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000adf4:	ac01      	add	r4, sp, #4
1000adf6:	0020      	movs	r0, r4
1000adf8:	4b0a      	ldr	r3, [pc, #40]	; (1000ae24 <sms_led_gpio_init+0x34>)
1000adfa:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000adfc:	2301      	movs	r3, #1
1000adfe:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000ae00:	0021      	movs	r1, r4
1000ae02:	2016      	movs	r0, #22
1000ae04:	4b08      	ldr	r3, [pc, #32]	; (1000ae28 <sms_led_gpio_init+0x38>)
1000ae06:	4798      	blx	r3
1000ae08:	2800      	cmp	r0, #0
1000ae0a:	d005      	beq.n	1000ae18 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000ae0c:	4807      	ldr	r0, [pc, #28]	; (1000ae2c <sms_led_gpio_init+0x3c>)
1000ae0e:	4b08      	ldr	r3, [pc, #32]	; (1000ae30 <sms_led_gpio_init+0x40>)
1000ae10:	4798      	blx	r3
1000ae12:	4808      	ldr	r0, [pc, #32]	; (1000ae34 <sms_led_gpio_init+0x44>)
1000ae14:	4b08      	ldr	r3, [pc, #32]	; (1000ae38 <sms_led_gpio_init+0x48>)
1000ae16:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000ae18:	2016      	movs	r0, #22
1000ae1a:	4b08      	ldr	r3, [pc, #32]	; (1000ae3c <sms_led_gpio_init+0x4c>)
1000ae1c:	4798      	blx	r3
}
1000ae1e:	b002      	add	sp, #8
1000ae20:	bd10      	pop	{r4, pc}
1000ae22:	46c0      	nop			; (mov r8, r8)
1000ae24:	1000bfd5 	.word	0x1000bfd5
1000ae28:	1000bfe5 	.word	0x1000bfe5
1000ae2c:	100164f8 	.word	0x100164f8
1000ae30:	10015351 	.word	0x10015351
1000ae34:	10016e70 	.word	0x10016e70
1000ae38:	10015231 	.word	0x10015231
1000ae3c:	1000ade1 	.word	0x1000ade1

1000ae40 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000ae40:	b510      	push	{r4, lr}
1000ae42:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000ae44:	4b05      	ldr	r3, [pc, #20]	; (1000ae5c <sms_led_toggle+0x1c>)
1000ae46:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000ae48:	2800      	cmp	r0, #0
1000ae4a:	d103      	bne.n	1000ae54 <sms_led_toggle+0x14>
1000ae4c:	0020      	movs	r0, r4
1000ae4e:	4b04      	ldr	r3, [pc, #16]	; (1000ae60 <sms_led_toggle+0x20>)
1000ae50:	4798      	blx	r3
1000ae52:	e002      	b.n	1000ae5a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000ae54:	0020      	movs	r0, r4
1000ae56:	4b03      	ldr	r3, [pc, #12]	; (1000ae64 <sms_led_toggle+0x24>)
1000ae58:	4798      	blx	r3
}
1000ae5a:	bd10      	pop	{r4, pc}
1000ae5c:	1000c1ed 	.word	0x1000c1ed
1000ae60:	1000ade1 	.word	0x1000ade1
1000ae64:	1000add1 	.word	0x1000add1

1000ae68 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000ae68:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000ae6a:	4b0c      	ldr	r3, [pc, #48]	; (1000ae9c <sms_led_blink_start+0x34>)
1000ae6c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000ae6e:	2200      	movs	r2, #0
1000ae70:	4b0b      	ldr	r3, [pc, #44]	; (1000aea0 <sms_led_blink_start+0x38>)
1000ae72:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000ae74:	4b0b      	ldr	r3, [pc, #44]	; (1000aea4 <sms_led_blink_start+0x3c>)
1000ae76:	781b      	ldrb	r3, [r3, #0]
1000ae78:	b2db      	uxtb	r3, r3
1000ae7a:	2b02      	cmp	r3, #2
1000ae7c:	d002      	beq.n	1000ae84 <sms_led_blink_start+0x1c>
1000ae7e:	2b03      	cmp	r3, #3
1000ae80:	d002      	beq.n	1000ae88 <sms_led_blink_start+0x20>
1000ae82:	e004      	b.n	1000ae8e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000ae84:	2164      	movs	r1, #100	; 0x64
1000ae86:	e003      	b.n	1000ae90 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000ae88:	21c8      	movs	r1, #200	; 0xc8
1000ae8a:	0049      	lsls	r1, r1, #1
        break;
1000ae8c:	e000      	b.n	1000ae90 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000ae8e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000ae90:	2201      	movs	r2, #1
1000ae92:	2001      	movs	r0, #1
1000ae94:	4b04      	ldr	r3, [pc, #16]	; (1000aea8 <sms_led_blink_start+0x40>)
1000ae96:	4798      	blx	r3
}
1000ae98:	bd10      	pop	{r4, pc}
1000ae9a:	46c0      	nop			; (mov r8, r8)
1000ae9c:	1000add1 	.word	0x1000add1
1000aea0:	1001a190 	.word	0x1001a190
1000aea4:	1001a16d 	.word	0x1001a16d
1000aea8:	1000b465 	.word	0x1000b465

1000aeac <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000aeac:	b510      	push	{r4, lr}
1000aeae:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000aeb0:	4a05      	ldr	r2, [pc, #20]	; (1000aec8 <sms_pressure_ms58_reset+0x1c>)
1000aeb2:	231e      	movs	r3, #30
1000aeb4:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000aeb6:	3b1d      	subs	r3, #29
1000aeb8:	9300      	str	r3, [sp, #0]
1000aeba:	4b04      	ldr	r3, [pc, #16]	; (1000aecc <sms_pressure_ms58_reset+0x20>)
1000aebc:	4904      	ldr	r1, [pc, #16]	; (1000aed0 <sms_pressure_ms58_reset+0x24>)
1000aebe:	4805      	ldr	r0, [pc, #20]	; (1000aed4 <sms_pressure_ms58_reset+0x28>)
1000aec0:	4c05      	ldr	r4, [pc, #20]	; (1000aed8 <sms_pressure_ms58_reset+0x2c>)
1000aec2:	47a0      	blx	r4
}
1000aec4:	b002      	add	sp, #8
1000aec6:	bd10      	pop	{r4, pc}
1000aec8:	1001a0c0 	.word	0x1001a0c0
1000aecc:	1001a0b0 	.word	0x1001a0b0
1000aed0:	1001a170 	.word	0x1001a170
1000aed4:	1001a17c 	.word	0x1001a17c
1000aed8:	1000b341 	.word	0x1000b341

1000aedc <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000aedc:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000aede:	480d      	ldr	r0, [pc, #52]	; (1000af14 <sms_pressure_startup+0x38>)
1000aee0:	4b0d      	ldr	r3, [pc, #52]	; (1000af18 <sms_pressure_startup+0x3c>)
1000aee2:	4798      	blx	r3
1000aee4:	480d      	ldr	r0, [pc, #52]	; (1000af1c <sms_pressure_startup+0x40>)
1000aee6:	4b0e      	ldr	r3, [pc, #56]	; (1000af20 <sms_pressure_startup+0x44>)
1000aee8:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000aeea:	2101      	movs	r1, #1
1000aeec:	2001      	movs	r0, #1
1000aeee:	4b0d      	ldr	r3, [pc, #52]	; (1000af24 <sms_pressure_startup+0x48>)
1000aef0:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000aef2:	4b0d      	ldr	r3, [pc, #52]	; (1000af28 <sms_pressure_startup+0x4c>)
1000aef4:	2101      	movs	r1, #1
1000aef6:	2225      	movs	r2, #37	; 0x25
1000aef8:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
1000aefa:	2200      	movs	r2, #0
1000aefc:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000aefe:	4b0b      	ldr	r3, [pc, #44]	; (1000af2c <sms_pressure_startup+0x50>)
1000af00:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000af02:	2202      	movs	r2, #2
1000af04:	4b0a      	ldr	r3, [pc, #40]	; (1000af30 <sms_pressure_startup+0x54>)
1000af06:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000af08:	2200      	movs	r2, #0
1000af0a:	2103      	movs	r1, #3
1000af0c:	2001      	movs	r0, #1
1000af0e:	4b09      	ldr	r3, [pc, #36]	; (1000af34 <sms_pressure_startup+0x58>)
1000af10:	4798      	blx	r3
}
1000af12:	bd10      	pop	{r4, pc}
1000af14:	100164f8 	.word	0x100164f8
1000af18:	10015351 	.word	0x10015351
1000af1c:	10016ee4 	.word	0x10016ee4
1000af20:	10015231 	.word	0x10015231
1000af24:	1000a811 	.word	0x1000a811
1000af28:	1001a0d0 	.word	0x1001a0d0
1000af2c:	1000aead 	.word	0x1000aead
1000af30:	10019fc0 	.word	0x10019fc0
1000af34:	1000b465 	.word	0x1000b465

1000af38 <sms_pressure_ms58_read_prom>:
    spi_wdata[0] = MS58_RESET;
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000af38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af3a:	4657      	mov	r7, sl
1000af3c:	b480      	push	{r7}
1000af3e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000af40:	4d37      	ldr	r5, [pc, #220]	; (1000b020 <sms_pressure_ms58_read_prom+0xe8>)
1000af42:	23a2      	movs	r3, #162	; 0xa2
1000af44:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000af46:	2300      	movs	r3, #0
1000af48:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000af4a:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af4c:	4c35      	ldr	r4, [pc, #212]	; (1000b024 <sms_pressure_ms58_read_prom+0xec>)
1000af4e:	3303      	adds	r3, #3
1000af50:	469a      	mov	sl, r3
1000af52:	9300      	str	r3, [sp, #0]
1000af54:	0023      	movs	r3, r4
1000af56:	002a      	movs	r2, r5
1000af58:	4933      	ldr	r1, [pc, #204]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000af5a:	4834      	ldr	r0, [pc, #208]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000af5c:	4f34      	ldr	r7, [pc, #208]	; (1000b030 <sms_pressure_ms58_read_prom+0xf8>)
1000af5e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af60:	4e34      	ldr	r6, [pc, #208]	; (1000b034 <sms_pressure_ms58_read_prom+0xfc>)
1000af62:	7863      	ldrb	r3, [r4, #1]
1000af64:	021b      	lsls	r3, r3, #8
1000af66:	78a2      	ldrb	r2, [r4, #2]
1000af68:	4313      	orrs	r3, r2
1000af6a:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000af6c:	23a4      	movs	r3, #164	; 0xa4
1000af6e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af70:	4653      	mov	r3, sl
1000af72:	9300      	str	r3, [sp, #0]
1000af74:	0023      	movs	r3, r4
1000af76:	002a      	movs	r2, r5
1000af78:	492b      	ldr	r1, [pc, #172]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000af7a:	482c      	ldr	r0, [pc, #176]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000af7c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af7e:	7863      	ldrb	r3, [r4, #1]
1000af80:	021b      	lsls	r3, r3, #8
1000af82:	78a2      	ldrb	r2, [r4, #2]
1000af84:	4313      	orrs	r3, r2
1000af86:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000af88:	23a6      	movs	r3, #166	; 0xa6
1000af8a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000af8c:	4653      	mov	r3, sl
1000af8e:	9300      	str	r3, [sp, #0]
1000af90:	0023      	movs	r3, r4
1000af92:	002a      	movs	r2, r5
1000af94:	4924      	ldr	r1, [pc, #144]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000af96:	4825      	ldr	r0, [pc, #148]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000af98:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000af9a:	7863      	ldrb	r3, [r4, #1]
1000af9c:	021b      	lsls	r3, r3, #8
1000af9e:	78a2      	ldrb	r2, [r4, #2]
1000afa0:	4313      	orrs	r3, r2
1000afa2:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000afa4:	23a8      	movs	r3, #168	; 0xa8
1000afa6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afa8:	4653      	mov	r3, sl
1000afaa:	9300      	str	r3, [sp, #0]
1000afac:	0023      	movs	r3, r4
1000afae:	002a      	movs	r2, r5
1000afb0:	491d      	ldr	r1, [pc, #116]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000afb2:	481e      	ldr	r0, [pc, #120]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000afb4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afb6:	7863      	ldrb	r3, [r4, #1]
1000afb8:	021b      	lsls	r3, r3, #8
1000afba:	78a2      	ldrb	r2, [r4, #2]
1000afbc:	4313      	orrs	r3, r2
1000afbe:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000afc0:	23aa      	movs	r3, #170	; 0xaa
1000afc2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afc4:	4653      	mov	r3, sl
1000afc6:	9300      	str	r3, [sp, #0]
1000afc8:	0023      	movs	r3, r4
1000afca:	002a      	movs	r2, r5
1000afcc:	4916      	ldr	r1, [pc, #88]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000afce:	4817      	ldr	r0, [pc, #92]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000afd0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afd2:	7863      	ldrb	r3, [r4, #1]
1000afd4:	021b      	lsls	r3, r3, #8
1000afd6:	78a2      	ldrb	r2, [r4, #2]
1000afd8:	4313      	orrs	r3, r2
1000afda:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000afdc:	23ac      	movs	r3, #172	; 0xac
1000afde:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000afe0:	4653      	mov	r3, sl
1000afe2:	9300      	str	r3, [sp, #0]
1000afe4:	0023      	movs	r3, r4
1000afe6:	002a      	movs	r2, r5
1000afe8:	490f      	ldr	r1, [pc, #60]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000afea:	4810      	ldr	r0, [pc, #64]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000afec:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000afee:	7863      	ldrb	r3, [r4, #1]
1000aff0:	021b      	lsls	r3, r3, #8
1000aff2:	78a2      	ldrb	r2, [r4, #2]
1000aff4:	4313      	orrs	r3, r2
1000aff6:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000aff8:	23ae      	movs	r3, #174	; 0xae
1000affa:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000affc:	4653      	mov	r3, sl
1000affe:	9300      	str	r3, [sp, #0]
1000b000:	0023      	movs	r3, r4
1000b002:	002a      	movs	r2, r5
1000b004:	4908      	ldr	r1, [pc, #32]	; (1000b028 <sms_pressure_ms58_read_prom+0xf0>)
1000b006:	4809      	ldr	r0, [pc, #36]	; (1000b02c <sms_pressure_ms58_read_prom+0xf4>)
1000b008:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000b00a:	7863      	ldrb	r3, [r4, #1]
1000b00c:	021b      	lsls	r3, r3, #8
1000b00e:	78a2      	ldrb	r2, [r4, #2]
1000b010:	4313      	orrs	r3, r2
1000b012:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000b014:	2000      	movs	r0, #0
1000b016:	b002      	add	sp, #8
1000b018:	bc04      	pop	{r2}
1000b01a:	4692      	mov	sl, r2
1000b01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b01e:	46c0      	nop			; (mov r8, r8)
1000b020:	1001a0c0 	.word	0x1001a0c0
1000b024:	1001a0b0 	.word	0x1001a0b0
1000b028:	1001a170 	.word	0x1001a170
1000b02c:	1001a17c 	.word	0x1001a17c
1000b030:	1000b341 	.word	0x1000b341
1000b034:	1001a0d0 	.word	0x1001a0d0

1000b038 <sms_pressure_init>:
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
}

enum status_code sms_pressure_init(void)
{
1000b038:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000b03a:	4b06      	ldr	r3, [pc, #24]	; (1000b054 <sms_pressure_init+0x1c>)
1000b03c:	4798      	blx	r3
1000b03e:	2800      	cmp	r0, #0
1000b040:	d106      	bne.n	1000b050 <sms_pressure_init+0x18>
        pressure_device.ms58_device.init_ok = true;
1000b042:	4b05      	ldr	r3, [pc, #20]	; (1000b058 <sms_pressure_init+0x20>)
1000b044:	2201      	movs	r2, #1
1000b046:	709a      	strb	r2, [r3, #2]
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b048:	2102      	movs	r1, #2
1000b04a:	3224      	adds	r2, #36	; 0x24
1000b04c:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000b04e:	e000      	b.n	1000b052 <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000b050:	2010      	movs	r0, #16
}
1000b052:	bd10      	pop	{r4, pc}
1000b054:	1000af39 	.word	0x1000af39
1000b058:	1001a0d0 	.word	0x1001a0d0

1000b05c <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b05e:	4657      	mov	r7, sl
1000b060:	464e      	mov	r6, r9
1000b062:	b4c0      	push	{r6, r7}
1000b064:	b083      	sub	sp, #12
    switch(pressure_device.ms58_device.current_state) {
1000b066:	2325      	movs	r3, #37	; 0x25
1000b068:	4a2c      	ldr	r2, [pc, #176]	; (1000b11c <sms_pressure_ms58_read_data+0xc0>)
1000b06a:	5cd3      	ldrb	r3, [r2, r3]
1000b06c:	2b03      	cmp	r3, #3
1000b06e:	d002      	beq.n	1000b076 <sms_pressure_ms58_read_data+0x1a>
1000b070:	2b04      	cmp	r3, #4
1000b072:	d025      	beq.n	1000b0c0 <sms_pressure_ms58_read_data+0x64>
1000b074:	e04b      	b.n	1000b10e <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b076:	4c2a      	ldr	r4, [pc, #168]	; (1000b120 <sms_pressure_ms58_read_data+0xc4>)
1000b078:	2300      	movs	r3, #0
1000b07a:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b07c:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b07e:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b080:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b082:	4d28      	ldr	r5, [pc, #160]	; (1000b124 <sms_pressure_ms58_read_data+0xc8>)
1000b084:	2704      	movs	r7, #4
1000b086:	9700      	str	r7, [sp, #0]
1000b088:	002b      	movs	r3, r5
1000b08a:	0022      	movs	r2, r4
1000b08c:	4926      	ldr	r1, [pc, #152]	; (1000b128 <sms_pressure_ms58_read_data+0xcc>)
1000b08e:	4827      	ldr	r0, [pc, #156]	; (1000b12c <sms_pressure_ms58_read_data+0xd0>)
1000b090:	4e27      	ldr	r6, [pc, #156]	; (1000b130 <sms_pressure_ms58_read_data+0xd4>)
1000b092:	46b2      	mov	sl, r6
1000b094:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b096:	4e21      	ldr	r6, [pc, #132]	; (1000b11c <sms_pressure_ms58_read_data+0xc0>)
1000b098:	786b      	ldrb	r3, [r5, #1]
1000b09a:	041a      	lsls	r2, r3, #16
1000b09c:	78ab      	ldrb	r3, [r5, #2]
1000b09e:	021b      	lsls	r3, r3, #8
1000b0a0:	4313      	orrs	r3, r2
1000b0a2:	78ea      	ldrb	r2, [r5, #3]
1000b0a4:	4313      	orrs	r3, r2
1000b0a6:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000b0a8:	2352      	movs	r3, #82	; 0x52
1000b0aa:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b0ac:	3b51      	subs	r3, #81	; 0x51
1000b0ae:	9300      	str	r3, [sp, #0]
1000b0b0:	002b      	movs	r3, r5
1000b0b2:	0022      	movs	r2, r4
1000b0b4:	491c      	ldr	r1, [pc, #112]	; (1000b128 <sms_pressure_ms58_read_data+0xcc>)
1000b0b6:	481d      	ldr	r0, [pc, #116]	; (1000b12c <sms_pressure_ms58_read_data+0xd0>)
1000b0b8:	47d0      	blx	sl
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_TEMPERATURE;
1000b0ba:	2325      	movs	r3, #37	; 0x25
1000b0bc:	54f7      	strb	r7, [r6, r3]
        break;
1000b0be:	e026      	b.n	1000b10e <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000b0c0:	4c17      	ldr	r4, [pc, #92]	; (1000b120 <sms_pressure_ms58_read_data+0xc4>)
1000b0c2:	2300      	movs	r3, #0
1000b0c4:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000b0c6:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000b0c8:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000b0ca:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000b0cc:	4d15      	ldr	r5, [pc, #84]	; (1000b124 <sms_pressure_ms58_read_data+0xc8>)
1000b0ce:	3304      	adds	r3, #4
1000b0d0:	9300      	str	r3, [sp, #0]
1000b0d2:	002b      	movs	r3, r5
1000b0d4:	0022      	movs	r2, r4
1000b0d6:	4914      	ldr	r1, [pc, #80]	; (1000b128 <sms_pressure_ms58_read_data+0xcc>)
1000b0d8:	4814      	ldr	r0, [pc, #80]	; (1000b12c <sms_pressure_ms58_read_data+0xd0>)
1000b0da:	4e15      	ldr	r6, [pc, #84]	; (1000b130 <sms_pressure_ms58_read_data+0xd4>)
1000b0dc:	46b1      	mov	r9, r6
1000b0de:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000b0e0:	4e0e      	ldr	r6, [pc, #56]	; (1000b11c <sms_pressure_ms58_read_data+0xc0>)
1000b0e2:	786b      	ldrb	r3, [r5, #1]
1000b0e4:	041a      	lsls	r2, r3, #16
1000b0e6:	78ab      	ldrb	r3, [r5, #2]
1000b0e8:	021b      	lsls	r3, r3, #8
1000b0ea:	4313      	orrs	r3, r2
1000b0ec:	78ea      	ldrb	r2, [r5, #3]
1000b0ee:	4313      	orrs	r3, r2
1000b0f0:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000b0f2:	2342      	movs	r3, #66	; 0x42
1000b0f4:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000b0f6:	2701      	movs	r7, #1
1000b0f8:	9700      	str	r7, [sp, #0]
1000b0fa:	002b      	movs	r3, r5
1000b0fc:	0022      	movs	r2, r4
1000b0fe:	490a      	ldr	r1, [pc, #40]	; (1000b128 <sms_pressure_ms58_read_data+0xcc>)
1000b100:	480a      	ldr	r0, [pc, #40]	; (1000b12c <sms_pressure_ms58_read_data+0xd0>)
1000b102:	47c8      	blx	r9
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000b104:	2203      	movs	r2, #3
1000b106:	2325      	movs	r3, #37	; 0x25
1000b108:	54f2      	strb	r2, [r6, r3]
        pressure_device.ms58_device.data_complete = true;
1000b10a:	3b01      	subs	r3, #1
1000b10c:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000b10e:	2000      	movs	r0, #0
1000b110:	b003      	add	sp, #12
1000b112:	bc0c      	pop	{r2, r3}
1000b114:	4691      	mov	r9, r2
1000b116:	469a      	mov	sl, r3
1000b118:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b11a:	46c0      	nop			; (mov r8, r8)
1000b11c:	1001a0d0 	.word	0x1001a0d0
1000b120:	1001a0c0 	.word	0x1001a0c0
1000b124:	1001a0b0 	.word	0x1001a0b0
1000b128:	1001a170 	.word	0x1001a170
1000b12c:	1001a17c 	.word	0x1001a17c
1000b130:	1000b341 	.word	0x1000b341

1000b134 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000b134:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b136:	464f      	mov	r7, r9
1000b138:	b480      	push	{r7}
1000b13a:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.ms58_device.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] - tv1);
1000b13c:	4d26      	ldr	r5, [pc, #152]	; (1000b1d8 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.ms58_device.prom_values[6] * (int64_t)deltaT);
1000b13e:	89ec      	ldrh	r4, [r5, #14]
1000b140:	0224      	lsls	r4, r4, #8
1000b142:	69ab      	ldr	r3, [r5, #24]
1000b144:	1b1c      	subs	r4, r3, r4
1000b146:	17e3      	asrs	r3, r4, #31
1000b148:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.ms58_device.temperature = (int32_t)(tv2 + 2000);
1000b14a:	8a28      	ldrh	r0, [r5, #16]
1000b14c:	4a23      	ldr	r2, [pc, #140]	; (1000b1dc <sms_pressure_ms58_calculate+0xa8>)
1000b14e:	4691      	mov	r9, r2
1000b150:	0022      	movs	r2, r4
1000b152:	2100      	movs	r1, #0
1000b154:	47c8      	blx	r9
1000b156:	0249      	lsls	r1, r1, #9
1000b158:	0dc0      	lsrs	r0, r0, #23
1000b15a:	4308      	orrs	r0, r1
1000b15c:	23fa      	movs	r3, #250	; 0xfa
1000b15e:	00db      	lsls	r3, r3, #3
1000b160:	469c      	mov	ip, r3
1000b162:	4460      	add	r0, ip
1000b164:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.ms58_device.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000b166:	89a8      	ldrh	r0, [r5, #12]
1000b168:	0022      	movs	r2, r4
1000b16a:	9601      	str	r6, [sp, #4]
1000b16c:	0033      	movs	r3, r6
1000b16e:	2100      	movs	r1, #0
1000b170:	47c8      	blx	r9
1000b172:	064e      	lsls	r6, r1, #25
1000b174:	09c2      	lsrs	r2, r0, #7
1000b176:	4332      	orrs	r2, r6
1000b178:	11cb      	asrs	r3, r1, #7
1000b17a:	892e      	ldrh	r6, [r5, #8]
1000b17c:	2100      	movs	r1, #0
1000b17e:	0430      	lsls	r0, r6, #16
1000b180:	1812      	adds	r2, r2, r0
1000b182:	414b      	adcs	r3, r1
1000b184:	0016      	movs	r6, r2
1000b186:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000b188:	8968      	ldrh	r0, [r5, #10]
1000b18a:	0022      	movs	r2, r4
1000b18c:	9b01      	ldr	r3, [sp, #4]
1000b18e:	2100      	movs	r1, #0
1000b190:	47c8      	blx	r9
1000b192:	060c      	lsls	r4, r1, #24
1000b194:	0a02      	lsrs	r2, r0, #8
1000b196:	4322      	orrs	r2, r4
1000b198:	120b      	asrs	r3, r1, #8
1000b19a:	88ec      	ldrh	r4, [r5, #6]
1000b19c:	2100      	movs	r1, #0
1000b19e:	03e0      	lsls	r0, r4, #15
1000b1a0:	1880      	adds	r0, r0, r2
1000b1a2:	4159      	adcs	r1, r3
1000b1a4:	696a      	ldr	r2, [r5, #20]
1000b1a6:	2300      	movs	r3, #0
1000b1a8:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.ms58_device.pressure = (int32_t)(tv2 >> 15);
1000b1aa:	02cc      	lsls	r4, r1, #11
1000b1ac:	0d42      	lsrs	r2, r0, #21
1000b1ae:	4322      	orrs	r2, r4
1000b1b0:	154b      	asrs	r3, r1, #21
1000b1b2:	1b92      	subs	r2, r2, r6
1000b1b4:	41bb      	sbcs	r3, r7
1000b1b6:	0011      	movs	r1, r2
1000b1b8:	045b      	lsls	r3, r3, #17
1000b1ba:	0bca      	lsrs	r2, r1, #15
1000b1bc:	431a      	orrs	r2, r3
1000b1be:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
1000b1c0:	4807      	ldr	r0, [pc, #28]	; (1000b1e0 <sms_pressure_ms58_calculate+0xac>)
1000b1c2:	4b08      	ldr	r3, [pc, #32]	; (1000b1e4 <sms_pressure_ms58_calculate+0xb0>)
1000b1c4:	4798      	blx	r3
1000b1c6:	69ea      	ldr	r2, [r5, #28]
1000b1c8:	6a29      	ldr	r1, [r5, #32]
1000b1ca:	4807      	ldr	r0, [pc, #28]	; (1000b1e8 <sms_pressure_ms58_calculate+0xb4>)
1000b1cc:	4b07      	ldr	r3, [pc, #28]	; (1000b1ec <sms_pressure_ms58_calculate+0xb8>)
1000b1ce:	4798      	blx	r3
}
1000b1d0:	b002      	add	sp, #8
1000b1d2:	bc04      	pop	{r2}
1000b1d4:	4691      	mov	r9, r2
1000b1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1d8:	1001a0d0 	.word	0x1001a0d0
1000b1dc:	100133c1 	.word	0x100133c1
1000b1e0:	100164f8 	.word	0x100164f8
1000b1e4:	10015351 	.word	0x10015351
1000b1e8:	10016f18 	.word	0x10016f18
1000b1ec:	10015231 	.word	0x10015231

1000b1f0 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b1f0:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b1f2:	4b11      	ldr	r3, [pc, #68]	; (1000b238 <sms_pressure_poll_data+0x48>)
1000b1f4:	781b      	ldrb	r3, [r3, #0]
1000b1f6:	2b22      	cmp	r3, #34	; 0x22
1000b1f8:	d11d      	bne.n	1000b236 <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000b1fa:	4810      	ldr	r0, [pc, #64]	; (1000b23c <sms_pressure_poll_data+0x4c>)
1000b1fc:	4b10      	ldr	r3, [pc, #64]	; (1000b240 <sms_pressure_poll_data+0x50>)
1000b1fe:	4798      	blx	r3
1000b200:	4810      	ldr	r0, [pc, #64]	; (1000b244 <sms_pressure_poll_data+0x54>)
1000b202:	4b11      	ldr	r3, [pc, #68]	; (1000b248 <sms_pressure_poll_data+0x58>)
1000b204:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b206:	4b11      	ldr	r3, [pc, #68]	; (1000b24c <sms_pressure_poll_data+0x5c>)
1000b208:	4798      	blx	r3
1000b20a:	2800      	cmp	r0, #0
1000b20c:	d006      	beq.n	1000b21c <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b20e:	480b      	ldr	r0, [pc, #44]	; (1000b23c <sms_pressure_poll_data+0x4c>)
1000b210:	4b0b      	ldr	r3, [pc, #44]	; (1000b240 <sms_pressure_poll_data+0x50>)
1000b212:	4798      	blx	r3
1000b214:	480e      	ldr	r0, [pc, #56]	; (1000b250 <sms_pressure_poll_data+0x60>)
1000b216:	4b0c      	ldr	r3, [pc, #48]	; (1000b248 <sms_pressure_poll_data+0x58>)
1000b218:	4798      	blx	r3
1000b21a:	e00c      	b.n	1000b236 <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(pressure_device.ms58_device.data_complete) {
1000b21c:	2324      	movs	r3, #36	; 0x24
1000b21e:	4a0d      	ldr	r2, [pc, #52]	; (1000b254 <sms_pressure_poll_data+0x64>)
1000b220:	5cd3      	ldrb	r3, [r2, r3]
1000b222:	2b00      	cmp	r3, #0
1000b224:	d007      	beq.n	1000b236 <sms_pressure_poll_data+0x46>
                pressure_device.ms58_device.data_complete = false;
1000b226:	2100      	movs	r1, #0
1000b228:	2324      	movs	r3, #36	; 0x24
1000b22a:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000b22c:	4b0a      	ldr	r3, [pc, #40]	; (1000b258 <sms_pressure_poll_data+0x68>)
1000b22e:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000b230:	2002      	movs	r0, #2
1000b232:	4b0a      	ldr	r3, [pc, #40]	; (1000b25c <sms_pressure_poll_data+0x6c>)
1000b234:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b236:	bd10      	pop	{r4, pc}
1000b238:	1001a16c 	.word	0x1001a16c
1000b23c:	100164f8 	.word	0x100164f8
1000b240:	10015351 	.word	0x10015351
1000b244:	10016f58 	.word	0x10016f58
1000b248:	10015231 	.word	0x10015231
1000b24c:	1000b05d 	.word	0x1000b05d
1000b250:	10016f88 	.word	0x10016f88
1000b254:	1001a0d0 	.word	0x1001a0d0
1000b258:	1000b135 	.word	0x1000b135
1000b25c:	1000a231 	.word	0x1000a231

1000b260 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
1000b260:	b510      	push	{r4, lr}
1000b262:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b264:	466b      	mov	r3, sp
1000b266:	1dda      	adds	r2, r3, #7
1000b268:	2300      	movs	r3, #0
1000b26a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b26c:	4c0d      	ldr	r4, [pc, #52]	; (1000b2a4 <sms_pressure_define_services+0x44>)
1000b26e:	0021      	movs	r1, r4
1000b270:	2001      	movs	r0, #1
1000b272:	4b0d      	ldr	r3, [pc, #52]	; (1000b2a8 <sms_pressure_define_services+0x48>)
1000b274:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b276:	0020      	movs	r0, r4
1000b278:	4b0c      	ldr	r3, [pc, #48]	; (1000b2ac <sms_pressure_define_services+0x4c>)
1000b27a:	4798      	blx	r3
1000b27c:	1e04      	subs	r4, r0, #0
1000b27e:	d007      	beq.n	1000b290 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b280:	480b      	ldr	r0, [pc, #44]	; (1000b2b0 <sms_pressure_define_services+0x50>)
1000b282:	4b0c      	ldr	r3, [pc, #48]	; (1000b2b4 <sms_pressure_define_services+0x54>)
1000b284:	4798      	blx	r3
1000b286:	0021      	movs	r1, r4
1000b288:	480b      	ldr	r0, [pc, #44]	; (1000b2b8 <sms_pressure_define_services+0x58>)
1000b28a:	4b0c      	ldr	r3, [pc, #48]	; (1000b2bc <sms_pressure_define_services+0x5c>)
1000b28c:	4798      	blx	r3
1000b28e:	e007      	b.n	1000b2a0 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b290:	4807      	ldr	r0, [pc, #28]	; (1000b2b0 <sms_pressure_define_services+0x50>)
1000b292:	4b08      	ldr	r3, [pc, #32]	; (1000b2b4 <sms_pressure_define_services+0x54>)
1000b294:	4798      	blx	r3
1000b296:	4b0a      	ldr	r3, [pc, #40]	; (1000b2c0 <sms_pressure_define_services+0x60>)
1000b298:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b29a:	480a      	ldr	r0, [pc, #40]	; (1000b2c4 <sms_pressure_define_services+0x64>)
1000b29c:	4b07      	ldr	r3, [pc, #28]	; (1000b2bc <sms_pressure_define_services+0x5c>)
1000b29e:	4798      	blx	r3
    }
1000b2a0:	b002      	add	sp, #8
1000b2a2:	bd10      	pop	{r4, pc}
1000b2a4:	1001a0fc 	.word	0x1001a0fc
1000b2a8:	1000a371 	.word	0x1000a371
1000b2ac:	1000a34d 	.word	0x1000a34d
1000b2b0:	100164f8 	.word	0x100164f8
1000b2b4:	10015351 	.word	0x10015351
1000b2b8:	10016fc0 	.word	0x10016fc0
1000b2bc:	10015231 	.word	0x10015231
1000b2c0:	1001a0d0 	.word	0x1001a0d0
1000b2c4:	10017008 	.word	0x10017008

1000b2c8 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b2c8:	b530      	push	{r4, r5, lr}
1000b2ca:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b2cc:	ac01      	add	r4, sp, #4
1000b2ce:	0020      	movs	r0, r4
1000b2d0:	4b13      	ldr	r3, [pc, #76]	; (1000b320 <sms_spi_master_configure+0x58>)
1000b2d2:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b2d4:	2310      	movs	r3, #16
1000b2d6:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b2d8:	0021      	movs	r1, r4
1000b2da:	4812      	ldr	r0, [pc, #72]	; (1000b324 <sms_spi_master_configure+0x5c>)
1000b2dc:	4b12      	ldr	r3, [pc, #72]	; (1000b328 <sms_spi_master_configure+0x60>)
1000b2de:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b2e0:	ac02      	add	r4, sp, #8
1000b2e2:	0020      	movs	r0, r4
1000b2e4:	4b11      	ldr	r3, [pc, #68]	; (1000b32c <sms_spi_master_configure+0x64>)
1000b2e6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b2e8:	2368      	movs	r3, #104	; 0x68
1000b2ea:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b2ec:	2300      	movs	r3, #0
1000b2ee:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b2f0:	3311      	adds	r3, #17
1000b2f2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b2f4:	3b0d      	subs	r3, #13
1000b2f6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b2f8:	2213      	movs	r2, #19
1000b2fa:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b2fc:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b2fe:	3a14      	subs	r2, #20
1000b300:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b302:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b304:	3213      	adds	r2, #19
1000b306:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b308:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b30a:	4d09      	ldr	r5, [pc, #36]	; (1000b330 <sms_spi_master_configure+0x68>)
1000b30c:	0022      	movs	r2, r4
1000b30e:	4909      	ldr	r1, [pc, #36]	; (1000b334 <sms_spi_master_configure+0x6c>)
1000b310:	0028      	movs	r0, r5
1000b312:	4b09      	ldr	r3, [pc, #36]	; (1000b338 <sms_spi_master_configure+0x70>)
1000b314:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b316:	0028      	movs	r0, r5
1000b318:	4b08      	ldr	r3, [pc, #32]	; (1000b33c <sms_spi_master_configure+0x74>)
1000b31a:	4798      	blx	r3
}
1000b31c:	b00d      	add	sp, #52	; 0x34
1000b31e:	bd30      	pop	{r4, r5, pc}
1000b320:	1000b981 	.word	0x1000b981
1000b324:	1001a170 	.word	0x1001a170
1000b328:	1000b9b9 	.word	0x1000b9b9
1000b32c:	1000b98d 	.word	0x1000b98d
1000b330:	1001a17c 	.word	0x1001a17c
1000b334:	40007000 	.word	0x40007000
1000b338:	1000ba89 	.word	0x1000ba89
1000b33c:	1000b9f9 	.word	0x1000b9f9

1000b340 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b340:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b342:	b083      	sub	sp, #12
1000b344:	0004      	movs	r4, r0
1000b346:	000d      	movs	r5, r1
1000b348:	9200      	str	r2, [sp, #0]
1000b34a:	9301      	str	r3, [sp, #4]
1000b34c:	ab08      	add	r3, sp, #32
1000b34e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b350:	2201      	movs	r2, #1
1000b352:	4f08      	ldr	r7, [pc, #32]	; (1000b374 <sms_spi_master_transceive+0x34>)
1000b354:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b356:	0033      	movs	r3, r6
1000b358:	9a01      	ldr	r2, [sp, #4]
1000b35a:	9900      	ldr	r1, [sp, #0]
1000b35c:	0020      	movs	r0, r4
1000b35e:	4e06      	ldr	r6, [pc, #24]	; (1000b378 <sms_spi_master_transceive+0x38>)
1000b360:	47b0      	blx	r6
1000b362:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b364:	2200      	movs	r2, #0
1000b366:	0029      	movs	r1, r5
1000b368:	0020      	movs	r0, r4
1000b36a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b36c:	0030      	movs	r0, r6
1000b36e:	b003      	add	sp, #12
1000b370:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b372:	46c0      	nop			; (mov r8, r8)
1000b374:	1000bc71 	.word	0x1000bc71
1000b378:	1000bbed 	.word	0x1000bbed

1000b37c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b37c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000b37e:	2204      	movs	r2, #4
1000b380:	4b04      	ldr	r3, [pc, #16]	; (1000b394 <sms_timer_aon_callback+0x18>)
1000b382:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b384:	2300      	movs	r3, #0
1000b386:	2200      	movs	r2, #0
1000b388:	2103      	movs	r1, #3
1000b38a:	2042      	movs	r0, #66	; 0x42
1000b38c:	4c02      	ldr	r4, [pc, #8]	; (1000b398 <sms_timer_aon_callback+0x1c>)
1000b38e:	47a0      	blx	r4
}
1000b390:	bd10      	pop	{r4, pc}
1000b392:	46c0      	nop			; (mov r8, r8)
1000b394:	1001a154 	.word	0x1001a154
1000b398:	1000f2a5 	.word	0x1000f2a5

1000b39c <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b39c:	b530      	push	{r4, r5, lr}
1000b39e:	b083      	sub	sp, #12
1000b3a0:	0004      	movs	r4, r0
1000b3a2:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b3a4:	4668      	mov	r0, sp
1000b3a6:	4b05      	ldr	r3, [pc, #20]	; (1000b3bc <sms_timer_aon_init+0x20>)
1000b3a8:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b3aa:	466b      	mov	r3, sp
1000b3ac:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b3ae:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b3b0:	4668      	mov	r0, sp
1000b3b2:	4b03      	ldr	r3, [pc, #12]	; (1000b3c0 <sms_timer_aon_init+0x24>)
1000b3b4:	4798      	blx	r3
}
1000b3b6:	b003      	add	sp, #12
1000b3b8:	bd30      	pop	{r4, r5, pc}
1000b3ba:	46c0      	nop			; (mov r8, r8)
1000b3bc:	10008155 	.word	0x10008155
1000b3c0:	100081c9 	.word	0x100081c9

1000b3c4 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b3c4:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b3c6:	4b01      	ldr	r3, [pc, #4]	; (1000b3cc <sms_timer_aon_disable+0x8>)
1000b3c8:	4798      	blx	r3
}
1000b3ca:	bd10      	pop	{r4, pc}
1000b3cc:	10008165 	.word	0x10008165

1000b3d0 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b3d0:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b3d2:	4804      	ldr	r0, [pc, #16]	; (1000b3e4 <sms_timer_aon_register_callback+0x14>)
1000b3d4:	4b04      	ldr	r3, [pc, #16]	; (1000b3e8 <sms_timer_aon_register_callback+0x18>)
1000b3d6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b3d8:	2280      	movs	r2, #128	; 0x80
1000b3da:	0512      	lsls	r2, r2, #20
1000b3dc:	4b03      	ldr	r3, [pc, #12]	; (1000b3ec <sms_timer_aon_register_callback+0x1c>)
1000b3de:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b3e0:	bd10      	pop	{r4, pc}
1000b3e2:	46c0      	nop			; (mov r8, r8)
1000b3e4:	1000b37d 	.word	0x1000b37d
1000b3e8:	100081b1 	.word	0x100081b1
1000b3ec:	e000e100 	.word	0xe000e100

1000b3f0 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b3f0:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b3f2:	4b04      	ldr	r3, [pc, #16]	; (1000b404 <sms_timer_aon_unregister_callback+0x14>)
1000b3f4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b3f6:	2180      	movs	r1, #128	; 0x80
1000b3f8:	0509      	lsls	r1, r1, #20
1000b3fa:	2380      	movs	r3, #128	; 0x80
1000b3fc:	4a02      	ldr	r2, [pc, #8]	; (1000b408 <sms_timer_aon_unregister_callback+0x18>)
1000b3fe:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b400:	bd10      	pop	{r4, pc}
1000b402:	46c0      	nop			; (mov r8, r8)
1000b404:	100081bd 	.word	0x100081bd
1000b408:	e000e100 	.word	0xe000e100

1000b40c <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b40c:	4770      	bx	lr
1000b40e:	46c0      	nop			; (mov r8, r8)

1000b410 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b410:	b510      	push	{r4, lr}
1000b412:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b414:	ac01      	add	r4, sp, #4
1000b416:	0020      	movs	r0, r4
1000b418:	4b08      	ldr	r3, [pc, #32]	; (1000b43c <sms_dualtimer_init+0x2c>)
1000b41a:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b41c:	4a08      	ldr	r2, [pc, #32]	; (1000b440 <sms_dualtimer_init+0x30>)
1000b41e:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b420:	2300      	movs	r3, #0
1000b422:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b424:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b426:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b428:	0020      	movs	r0, r4
1000b42a:	4b06      	ldr	r3, [pc, #24]	; (1000b444 <sms_dualtimer_init+0x34>)
1000b42c:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b42e:	2000      	movs	r0, #0
1000b430:	4c05      	ldr	r4, [pc, #20]	; (1000b448 <sms_dualtimer_init+0x38>)
1000b432:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b434:	2001      	movs	r0, #1
1000b436:	47a0      	blx	r4
}
1000b438:	b008      	add	sp, #32
1000b43a:	bd10      	pop	{r4, pc}
1000b43c:	1000bcd5 	.word	0x1000bcd5
1000b440:	018cba80 	.word	0x018cba80
1000b444:	1000bd69 	.word	0x1000bd69
1000b448:	1000bd45 	.word	0x1000bd45

1000b44c <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b44c:	b510      	push	{r4, lr}
1000b44e:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b450:	4b02      	ldr	r3, [pc, #8]	; (1000b45c <sms_dualtimer_register_callback+0x10>)
1000b452:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b454:	0020      	movs	r0, r4
1000b456:	4b02      	ldr	r3, [pc, #8]	; (1000b460 <sms_dualtimer_register_callback+0x14>)
1000b458:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b45a:	bd10      	pop	{r4, pc}
1000b45c:	1000be6d 	.word	0x1000be6d
1000b460:	1000bd45 	.word	0x1000bd45

1000b464 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b464:	b510      	push	{r4, lr}
1000b466:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b468:	2801      	cmp	r0, #1
1000b46a:	d006      	beq.n	1000b47a <sms_dualtimer_start+0x16>
1000b46c:	2800      	cmp	r0, #0
1000b46e:	d002      	beq.n	1000b476 <sms_dualtimer_start+0x12>
1000b470:	2802      	cmp	r0, #2
1000b472:	d004      	beq.n	1000b47e <sms_dualtimer_start+0x1a>
1000b474:	e005      	b.n	1000b482 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b476:	221a      	movs	r2, #26
1000b478:	e004      	b.n	1000b484 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b47a:	4a0c      	ldr	r2, [pc, #48]	; (1000b4ac <sms_dualtimer_start+0x48>)
        break;
1000b47c:	e002      	b.n	1000b484 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b47e:	4a0c      	ldr	r2, [pc, #48]	; (1000b4b0 <sms_dualtimer_start+0x4c>)
        break;
1000b480:	e000      	b.n	1000b484 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b482:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b484:	2900      	cmp	r1, #0
1000b486:	d101      	bne.n	1000b48c <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b488:	21fa      	movs	r1, #250	; 0xfa
1000b48a:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b48c:	2000      	movs	r0, #0
1000b48e:	4b09      	ldr	r3, [pc, #36]	; (1000b4b4 <sms_dualtimer_start+0x50>)
1000b490:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b492:	434a      	muls	r2, r1
1000b494:	2100      	movs	r1, #0
1000b496:	0020      	movs	r0, r4
1000b498:	4b07      	ldr	r3, [pc, #28]	; (1000b4b8 <sms_dualtimer_start+0x54>)
1000b49a:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b49c:	0020      	movs	r0, r4
1000b49e:	4b07      	ldr	r3, [pc, #28]	; (1000b4bc <sms_dualtimer_start+0x58>)
1000b4a0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b4a2:	2280      	movs	r2, #128	; 0x80
1000b4a4:	01d2      	lsls	r2, r2, #7
1000b4a6:	4b06      	ldr	r3, [pc, #24]	; (1000b4c0 <sms_dualtimer_start+0x5c>)
1000b4a8:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b4aa:	bd10      	pop	{r4, pc}
1000b4ac:	00006590 	.word	0x00006590
1000b4b0:	018cba80 	.word	0x018cba80
1000b4b4:	1001a055 	.word	0x1001a055
1000b4b8:	1000bcf9 	.word	0x1000bcf9
1000b4bc:	1000bd21 	.word	0x1000bd21
1000b4c0:	e000e100 	.word	0xe000e100

1000b4c4 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b4c4:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b4c6:	4b01      	ldr	r3, [pc, #4]	; (1000b4cc <sms_dualtimer_stop+0x8>)
1000b4c8:	4798      	blx	r3
}
1000b4ca:	bd10      	pop	{r4, pc}
1000b4cc:	1000bd45 	.word	0x1000bd45

1000b4d0 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b4d0:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b4d2:	2205      	movs	r2, #5
1000b4d4:	4b04      	ldr	r3, [pc, #16]	; (1000b4e8 <sms_dualtimer1_cb+0x18>)
1000b4d6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b4d8:	2300      	movs	r3, #0
1000b4da:	2200      	movs	r2, #0
1000b4dc:	2101      	movs	r1, #1
1000b4de:	2040      	movs	r0, #64	; 0x40
1000b4e0:	4c02      	ldr	r4, [pc, #8]	; (1000b4ec <sms_dualtimer1_cb+0x1c>)
1000b4e2:	47a0      	blx	r4
}
1000b4e4:	bd10      	pop	{r4, pc}
1000b4e6:	46c0      	nop			; (mov r8, r8)
1000b4e8:	1001a154 	.word	0x1001a154
1000b4ec:	1000f2a5 	.word	0x1000f2a5

1000b4f0 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b4f0:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b4f2:	2206      	movs	r2, #6
1000b4f4:	4b04      	ldr	r3, [pc, #16]	; (1000b508 <sms_dualtimer2_cb+0x18>)
1000b4f6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b4f8:	2300      	movs	r3, #0
1000b4fa:	2200      	movs	r2, #0
1000b4fc:	2101      	movs	r1, #1
1000b4fe:	2041      	movs	r0, #65	; 0x41
1000b500:	4c02      	ldr	r4, [pc, #8]	; (1000b50c <sms_dualtimer2_cb+0x1c>)
1000b502:	47a0      	blx	r4
}
1000b504:	bd10      	pop	{r4, pc}
1000b506:	46c0      	nop			; (mov r8, r8)
1000b508:	1001a154 	.word	0x1001a154
1000b50c:	1000f2a5 	.word	0x1000f2a5

1000b510 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b510:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b512:	4ba7      	ldr	r3, [pc, #668]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b514:	781b      	ldrb	r3, [r3, #0]
1000b516:	b2db      	uxtb	r3, r3
1000b518:	2b02      	cmp	r3, #2
1000b51a:	d006      	beq.n	1000b52a <sms_dualtimer1_fn+0x1a>
1000b51c:	2b03      	cmp	r3, #3
1000b51e:	d100      	bne.n	1000b522 <sms_dualtimer1_fn+0x12>
1000b520:	e103      	b.n	1000b72a <sms_dualtimer1_fn+0x21a>
1000b522:	2b01      	cmp	r3, #1
1000b524:	d000      	beq.n	1000b528 <sms_dualtimer1_fn+0x18>
1000b526:	e13a      	b.n	1000b79e <sms_dualtimer1_fn+0x28e>
1000b528:	e051      	b.n	1000b5ce <sms_dualtimer1_fn+0xbe>
        /* Timer1 mode = MS58_RESET */
        case TIMER1_MODE_MS58_RESET:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b52a:	2200      	movs	r2, #0
1000b52c:	4ba0      	ldr	r3, [pc, #640]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b52e:	701a      	strb	r2, [r3, #0]
            pressure_device.ms58_device.reset_done = true;
1000b530:	4ba0      	ldr	r3, [pc, #640]	; (1000b7b4 <sms_dualtimer1_fn+0x2a4>)
1000b532:	2101      	movs	r1, #1
1000b534:	7059      	strb	r1, [r3, #1]
            pressure_device.ms58_device.init_retry = 0;
1000b536:	3125      	adds	r1, #37	; 0x25
1000b538:	545a      	strb	r2, [r3, r1]
            if(sms_pressure_init() != STATUS_OK) {
1000b53a:	4b9f      	ldr	r3, [pc, #636]	; (1000b7b8 <sms_dualtimer1_fn+0x2a8>)
1000b53c:	4798      	blx	r3
1000b53e:	2800      	cmp	r0, #0
1000b540:	d02b      	beq.n	1000b59a <sms_dualtimer1_fn+0x8a>
                DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to init ms58 device");
1000b542:	489e      	ldr	r0, [pc, #632]	; (1000b7bc <sms_dualtimer1_fn+0x2ac>)
1000b544:	4b9e      	ldr	r3, [pc, #632]	; (1000b7c0 <sms_dualtimer1_fn+0x2b0>)
1000b546:	4798      	blx	r3
1000b548:	489e      	ldr	r0, [pc, #632]	; (1000b7c4 <sms_dualtimer1_fn+0x2b4>)
1000b54a:	4b9f      	ldr	r3, [pc, #636]	; (1000b7c8 <sms_dualtimer1_fn+0x2b8>)
1000b54c:	4798      	blx	r3
                pressure_device.ms58_device.init_retry++;
1000b54e:	4999      	ldr	r1, [pc, #612]	; (1000b7b4 <sms_dualtimer1_fn+0x2a4>)
1000b550:	2226      	movs	r2, #38	; 0x26
1000b552:	5c8b      	ldrb	r3, [r1, r2]
1000b554:	3301      	adds	r3, #1
1000b556:	b2db      	uxtb	r3, r3
1000b558:	548b      	strb	r3, [r1, r2]
                if(pressure_device.ms58_device.init_retry >= MS58_INIT_RETRY_MAX) {
1000b55a:	2b03      	cmp	r3, #3
1000b55c:	d914      	bls.n	1000b588 <sms_dualtimer1_fn+0x78>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to initialize pressure sensor. Working mode = BUTTON_SOLO");
1000b55e:	4897      	ldr	r0, [pc, #604]	; (1000b7bc <sms_dualtimer1_fn+0x2ac>)
1000b560:	4b97      	ldr	r3, [pc, #604]	; (1000b7c0 <sms_dualtimer1_fn+0x2b0>)
1000b562:	4798      	blx	r3
1000b564:	4899      	ldr	r0, [pc, #612]	; (1000b7cc <sms_dualtimer1_fn+0x2bc>)
1000b566:	4b98      	ldr	r3, [pc, #608]	; (1000b7c8 <sms_dualtimer1_fn+0x2b8>)
1000b568:	4798      	blx	r3
                    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000b56a:	2100      	movs	r1, #0
1000b56c:	2325      	movs	r3, #37	; 0x25
1000b56e:	4a91      	ldr	r2, [pc, #580]	; (1000b7b4 <sms_dualtimer1_fn+0x2a4>)
1000b570:	54d1      	strb	r1, [r2, r3]
                    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000b572:	2201      	movs	r2, #1
1000b574:	4b96      	ldr	r3, [pc, #600]	; (1000b7d0 <sms_dualtimer1_fn+0x2c0>)
1000b576:	701a      	strb	r2, [r3, #0]
                    // Init IMU device...
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b578:	4b96      	ldr	r3, [pc, #600]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b57a:	781b      	ldrb	r3, [r3, #0]
1000b57c:	2b00      	cmp	r3, #0
1000b57e:	d000      	beq.n	1000b582 <sms_dualtimer1_fn+0x72>
1000b580:	e114      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b582:	4b95      	ldr	r3, [pc, #596]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b584:	701a      	strb	r2, [r3, #0]
1000b586:	e111      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    }                        
                }
                else {
                    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000b588:	2202      	movs	r2, #2
1000b58a:	4b89      	ldr	r3, [pc, #548]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b58c:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000b58e:	2200      	movs	r2, #0
1000b590:	2103      	movs	r1, #3
1000b592:	2001      	movs	r0, #1
1000b594:	4b91      	ldr	r3, [pc, #580]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b596:	4798      	blx	r3
1000b598:	e108      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b59a:	2102      	movs	r1, #2
1000b59c:	2325      	movs	r3, #37	; 0x25
1000b59e:	4a85      	ldr	r2, [pc, #532]	; (1000b7b4 <sms_dualtimer1_fn+0x2a4>)
1000b5a0:	54d1      	strb	r1, [r2, r3]
                sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000b5a2:	2205      	movs	r2, #5
1000b5a4:	4b8a      	ldr	r3, [pc, #552]	; (1000b7d0 <sms_dualtimer1_fn+0x2c0>)
1000b5a6:	701a      	strb	r2, [r3, #0]
                //DBG_LOG_DEV("[sms_dualtimer1_fn]\tPressure sensor initialized. Working mode = BUTTON_PRESSURE");
                DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (MS58 reset)...");
1000b5a8:	4884      	ldr	r0, [pc, #528]	; (1000b7bc <sms_dualtimer1_fn+0x2ac>)
1000b5aa:	4b85      	ldr	r3, [pc, #532]	; (1000b7c0 <sms_dualtimer1_fn+0x2b0>)
1000b5ac:	4798      	blx	r3
1000b5ae:	488c      	ldr	r0, [pc, #560]	; (1000b7e0 <sms_dualtimer1_fn+0x2d0>)
1000b5b0:	4b85      	ldr	r3, [pc, #532]	; (1000b7c8 <sms_dualtimer1_fn+0x2b8>)
1000b5b2:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000b5b4:	2101      	movs	r1, #1
1000b5b6:	2000      	movs	r0, #0
1000b5b8:	4b8a      	ldr	r3, [pc, #552]	; (1000b7e4 <sms_dualtimer1_fn+0x2d4>)
1000b5ba:	4798      	blx	r3
                // Init IMU device...
                //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b5bc:	4b85      	ldr	r3, [pc, #532]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b5be:	781b      	ldrb	r3, [r3, #0]
1000b5c0:	2b00      	cmp	r3, #0
1000b5c2:	d000      	beq.n	1000b5c6 <sms_dualtimer1_fn+0xb6>
1000b5c4:	e0f2      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    //release_sleep_lock();
                    ulp_ready = true;
1000b5c6:	2201      	movs	r2, #1
1000b5c8:	4b83      	ldr	r3, [pc, #524]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b5ca:	701a      	strb	r2, [r3, #0]
1000b5cc:	e0ee      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
        }
        
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b5ce:	2200      	movs	r2, #0
1000b5d0:	4b77      	ldr	r3, [pc, #476]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b5d2:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b5d4:	4c84      	ldr	r4, [pc, #528]	; (1000b7e8 <sms_dualtimer1_fn+0x2d8>)
1000b5d6:	7863      	ldrb	r3, [r4, #1]
1000b5d8:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b5da:	4b84      	ldr	r3, [pc, #528]	; (1000b7ec <sms_dualtimer1_fn+0x2dc>)
1000b5dc:	4798      	blx	r3
1000b5de:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b5e0:	4883      	ldr	r0, [pc, #524]	; (1000b7f0 <sms_dualtimer1_fn+0x2e0>)
1000b5e2:	4b84      	ldr	r3, [pc, #528]	; (1000b7f4 <sms_dualtimer1_fn+0x2e4>)
1000b5e4:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b5e6:	7823      	ldrb	r3, [r4, #0]
1000b5e8:	2b01      	cmp	r3, #1
1000b5ea:	d002      	beq.n	1000b5f2 <sms_dualtimer1_fn+0xe2>
1000b5ec:	2b02      	cmp	r3, #2
1000b5ee:	d04c      	beq.n	1000b68a <sms_dualtimer1_fn+0x17a>
1000b5f0:	e093      	b.n	1000b71a <sms_dualtimer1_fn+0x20a>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b5f2:	4b7d      	ldr	r3, [pc, #500]	; (1000b7e8 <sms_dualtimer1_fn+0x2d8>)
1000b5f4:	785b      	ldrb	r3, [r3, #1]
1000b5f6:	2b01      	cmp	r3, #1
1000b5f8:	d002      	beq.n	1000b600 <sms_dualtimer1_fn+0xf0>
1000b5fa:	2b02      	cmp	r3, #2
1000b5fc:	d023      	beq.n	1000b646 <sms_dualtimer1_fn+0x136>
1000b5fe:	e03b      	b.n	1000b678 <sms_dualtimer1_fn+0x168>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b600:	4b7d      	ldr	r3, [pc, #500]	; (1000b7f8 <sms_dualtimer1_fn+0x2e8>)
1000b602:	781b      	ldrb	r3, [r3, #0]
1000b604:	2b00      	cmp	r3, #0
1000b606:	d115      	bne.n	1000b634 <sms_dualtimer1_fn+0x124>
                        sms_btn_cnt++;
1000b608:	4a7c      	ldr	r2, [pc, #496]	; (1000b7fc <sms_dualtimer1_fn+0x2ec>)
1000b60a:	7813      	ldrb	r3, [r2, #0]
1000b60c:	3301      	adds	r3, #1
1000b60e:	b2db      	uxtb	r3, r3
1000b610:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b612:	2b0f      	cmp	r3, #15
1000b614:	d905      	bls.n	1000b622 <sms_dualtimer1_fn+0x112>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b616:	2200      	movs	r2, #0
1000b618:	4b65      	ldr	r3, [pc, #404]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b61a:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b61c:	4b78      	ldr	r3, [pc, #480]	; (1000b800 <sms_dualtimer1_fn+0x2f0>)
1000b61e:	4798      	blx	r3
1000b620:	e0c4      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b622:	2201      	movs	r2, #1
1000b624:	4b62      	ldr	r3, [pc, #392]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b626:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b628:	2200      	movs	r2, #0
1000b62a:	21fa      	movs	r1, #250	; 0xfa
1000b62c:	2001      	movs	r0, #1
1000b62e:	4b6b      	ldr	r3, [pc, #428]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b630:	4798      	blx	r3
1000b632:	e0bb      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b634:	4b67      	ldr	r3, [pc, #412]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b636:	781b      	ldrb	r3, [r3, #0]
1000b638:	2b00      	cmp	r3, #0
1000b63a:	d000      	beq.n	1000b63e <sms_dualtimer1_fn+0x12e>
1000b63c:	e0b6      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b63e:	2201      	movs	r2, #1
1000b640:	4b65      	ldr	r3, [pc, #404]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b642:	701a      	strb	r2, [r3, #0]
1000b644:	e0b2      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b646:	4b6c      	ldr	r3, [pc, #432]	; (1000b7f8 <sms_dualtimer1_fn+0x2e8>)
1000b648:	781b      	ldrb	r3, [r3, #0]
1000b64a:	2b00      	cmp	r3, #0
1000b64c:	d10b      	bne.n	1000b666 <sms_dualtimer1_fn+0x156>
                        sms_btn_cnt = 0;
1000b64e:	2200      	movs	r2, #0
1000b650:	4b6a      	ldr	r3, [pc, #424]	; (1000b7fc <sms_dualtimer1_fn+0x2ec>)
1000b652:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b654:	3201      	adds	r2, #1
1000b656:	4b56      	ldr	r3, [pc, #344]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b658:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b65a:	2200      	movs	r2, #0
1000b65c:	2164      	movs	r1, #100	; 0x64
1000b65e:	2001      	movs	r0, #1
1000b660:	4b5e      	ldr	r3, [pc, #376]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b662:	4798      	blx	r3
1000b664:	e0a2      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b666:	4b5b      	ldr	r3, [pc, #364]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b668:	781b      	ldrb	r3, [r3, #0]
1000b66a:	2b00      	cmp	r3, #0
1000b66c:	d000      	beq.n	1000b670 <sms_dualtimer1_fn+0x160>
1000b66e:	e09d      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b670:	2201      	movs	r2, #1
1000b672:	4b59      	ldr	r3, [pc, #356]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b674:	701a      	strb	r2, [r3, #0]
1000b676:	e099      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b678:	4b56      	ldr	r3, [pc, #344]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b67a:	781b      	ldrb	r3, [r3, #0]
1000b67c:	2b00      	cmp	r3, #0
1000b67e:	d000      	beq.n	1000b682 <sms_dualtimer1_fn+0x172>
1000b680:	e094      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b682:	2201      	movs	r2, #1
1000b684:	4b54      	ldr	r3, [pc, #336]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b686:	701a      	strb	r2, [r3, #0]
1000b688:	e090      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b68a:	4b57      	ldr	r3, [pc, #348]	; (1000b7e8 <sms_dualtimer1_fn+0x2d8>)
1000b68c:	785b      	ldrb	r3, [r3, #1]
1000b68e:	2b01      	cmp	r3, #1
1000b690:	d023      	beq.n	1000b6da <sms_dualtimer1_fn+0x1ca>
1000b692:	2b02      	cmp	r3, #2
1000b694:	d139      	bne.n	1000b70a <sms_dualtimer1_fn+0x1fa>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b696:	4b58      	ldr	r3, [pc, #352]	; (1000b7f8 <sms_dualtimer1_fn+0x2e8>)
1000b698:	781b      	ldrb	r3, [r3, #0]
1000b69a:	2b00      	cmp	r3, #0
1000b69c:	d115      	bne.n	1000b6ca <sms_dualtimer1_fn+0x1ba>
                        sms_btn_cnt++;
1000b69e:	4a57      	ldr	r2, [pc, #348]	; (1000b7fc <sms_dualtimer1_fn+0x2ec>)
1000b6a0:	7813      	ldrb	r3, [r2, #0]
1000b6a2:	3301      	adds	r3, #1
1000b6a4:	b2db      	uxtb	r3, r3
1000b6a6:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b6a8:	2b0f      	cmp	r3, #15
1000b6aa:	d905      	bls.n	1000b6b8 <sms_dualtimer1_fn+0x1a8>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b6ac:	2200      	movs	r2, #0
1000b6ae:	4b40      	ldr	r3, [pc, #256]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b6b0:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b6b2:	4b53      	ldr	r3, [pc, #332]	; (1000b800 <sms_dualtimer1_fn+0x2f0>)
1000b6b4:	4798      	blx	r3
1000b6b6:	e079      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b6b8:	2201      	movs	r2, #1
1000b6ba:	4b3d      	ldr	r3, [pc, #244]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b6bc:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b6be:	2200      	movs	r2, #0
1000b6c0:	21fa      	movs	r1, #250	; 0xfa
1000b6c2:	2001      	movs	r0, #1
1000b6c4:	4b45      	ldr	r3, [pc, #276]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b6c6:	4798      	blx	r3
1000b6c8:	e070      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b6ca:	4b42      	ldr	r3, [pc, #264]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b6cc:	781b      	ldrb	r3, [r3, #0]
1000b6ce:	2b00      	cmp	r3, #0
1000b6d0:	d16c      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b6d2:	2201      	movs	r2, #1
1000b6d4:	4b40      	ldr	r3, [pc, #256]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b6d6:	701a      	strb	r2, [r3, #0]
1000b6d8:	e068      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b6da:	4b47      	ldr	r3, [pc, #284]	; (1000b7f8 <sms_dualtimer1_fn+0x2e8>)
1000b6dc:	781b      	ldrb	r3, [r3, #0]
1000b6de:	2b00      	cmp	r3, #0
1000b6e0:	d10b      	bne.n	1000b6fa <sms_dualtimer1_fn+0x1ea>
                        sms_btn_cnt = 0;
1000b6e2:	2200      	movs	r2, #0
1000b6e4:	4b45      	ldr	r3, [pc, #276]	; (1000b7fc <sms_dualtimer1_fn+0x2ec>)
1000b6e6:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b6e8:	3201      	adds	r2, #1
1000b6ea:	4b31      	ldr	r3, [pc, #196]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b6ec:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b6ee:	2200      	movs	r2, #0
1000b6f0:	2164      	movs	r1, #100	; 0x64
1000b6f2:	2001      	movs	r0, #1
1000b6f4:	4b39      	ldr	r3, [pc, #228]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b6f6:	4798      	blx	r3
1000b6f8:	e058      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b6fa:	4b36      	ldr	r3, [pc, #216]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b6fc:	781b      	ldrb	r3, [r3, #0]
1000b6fe:	2b00      	cmp	r3, #0
1000b700:	d154      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b702:	2201      	movs	r2, #1
1000b704:	4b34      	ldr	r3, [pc, #208]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b706:	701a      	strb	r2, [r3, #0]
1000b708:	e050      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b70a:	4b32      	ldr	r3, [pc, #200]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b70c:	781b      	ldrb	r3, [r3, #0]
1000b70e:	2b00      	cmp	r3, #0
1000b710:	d14c      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b712:	2201      	movs	r2, #1
1000b714:	4b30      	ldr	r3, [pc, #192]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b716:	701a      	strb	r2, [r3, #0]
1000b718:	e048      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b71a:	4b2e      	ldr	r3, [pc, #184]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b71c:	781b      	ldrb	r3, [r3, #0]
1000b71e:	2b00      	cmp	r3, #0
1000b720:	d144      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b722:	2201      	movs	r2, #1
1000b724:	4b2c      	ldr	r3, [pc, #176]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b726:	701a      	strb	r2, [r3, #0]
1000b728:	e040      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b72a:	4c2f      	ldr	r4, [pc, #188]	; (1000b7e8 <sms_dualtimer1_fn+0x2d8>)
1000b72c:	7863      	ldrb	r3, [r4, #1]
1000b72e:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b730:	4b2e      	ldr	r3, [pc, #184]	; (1000b7ec <sms_dualtimer1_fn+0x2dc>)
1000b732:	4798      	blx	r3
1000b734:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b736:	482e      	ldr	r0, [pc, #184]	; (1000b7f0 <sms_dualtimer1_fn+0x2e0>)
1000b738:	4b2e      	ldr	r3, [pc, #184]	; (1000b7f4 <sms_dualtimer1_fn+0x2e4>)
1000b73a:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b73c:	8822      	ldrh	r2, [r4, #0]
1000b73e:	4b31      	ldr	r3, [pc, #196]	; (1000b804 <sms_dualtimer1_fn+0x2f4>)
1000b740:	429a      	cmp	r2, r3
1000b742:	d112      	bne.n	1000b76a <sms_dualtimer1_fn+0x25a>
                sms_btn_cnt++;
1000b744:	4a2d      	ldr	r2, [pc, #180]	; (1000b7fc <sms_dualtimer1_fn+0x2ec>)
1000b746:	7813      	ldrb	r3, [r2, #0]
1000b748:	3301      	adds	r3, #1
1000b74a:	b2db      	uxtb	r3, r3
1000b74c:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b74e:	2b09      	cmp	r3, #9
1000b750:	d902      	bls.n	1000b758 <sms_dualtimer1_fn+0x248>
                    sms_ble_power_down();
1000b752:	4b2d      	ldr	r3, [pc, #180]	; (1000b808 <sms_dualtimer1_fn+0x2f8>)
1000b754:	4798      	blx	r3
1000b756:	e029      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b758:	2203      	movs	r2, #3
1000b75a:	4b15      	ldr	r3, [pc, #84]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b75c:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b75e:	2200      	movs	r2, #0
1000b760:	21fa      	movs	r1, #250	; 0xfa
1000b762:	2001      	movs	r0, #1
1000b764:	4b1d      	ldr	r3, [pc, #116]	; (1000b7dc <sms_dualtimer1_fn+0x2cc>)
1000b766:	4798      	blx	r3
1000b768:	e020      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b76a:	2328      	movs	r3, #40	; 0x28
1000b76c:	4a11      	ldr	r2, [pc, #68]	; (1000b7b4 <sms_dualtimer1_fn+0x2a4>)
1000b76e:	5cd3      	ldrb	r3, [r2, r3]
1000b770:	2b01      	cmp	r3, #1
1000b772:	d109      	bne.n	1000b788 <sms_dualtimer1_fn+0x278>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b774:	4811      	ldr	r0, [pc, #68]	; (1000b7bc <sms_dualtimer1_fn+0x2ac>)
1000b776:	4b12      	ldr	r3, [pc, #72]	; (1000b7c0 <sms_dualtimer1_fn+0x2b0>)
1000b778:	4798      	blx	r3
1000b77a:	4824      	ldr	r0, [pc, #144]	; (1000b80c <sms_dualtimer1_fn+0x2fc>)
1000b77c:	4b12      	ldr	r3, [pc, #72]	; (1000b7c8 <sms_dualtimer1_fn+0x2b8>)
1000b77e:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b780:	2101      	movs	r1, #1
1000b782:	2000      	movs	r0, #0
1000b784:	4b17      	ldr	r3, [pc, #92]	; (1000b7e4 <sms_dualtimer1_fn+0x2d4>)
1000b786:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b788:	2200      	movs	r2, #0
1000b78a:	4b09      	ldr	r3, [pc, #36]	; (1000b7b0 <sms_dualtimer1_fn+0x2a0>)
1000b78c:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b78e:	4b11      	ldr	r3, [pc, #68]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b790:	781b      	ldrb	r3, [r3, #0]
1000b792:	2b00      	cmp	r3, #0
1000b794:	d10a      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
                    ulp_ready = true;
1000b796:	3201      	adds	r2, #1
1000b798:	4b0f      	ldr	r3, [pc, #60]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b79a:	701a      	strb	r2, [r3, #0]
1000b79c:	e006      	b.n	1000b7ac <sms_dualtimer1_fn+0x29c>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b79e:	4b0d      	ldr	r3, [pc, #52]	; (1000b7d4 <sms_dualtimer1_fn+0x2c4>)
1000b7a0:	781b      	ldrb	r3, [r3, #0]
1000b7a2:	2b00      	cmp	r3, #0
1000b7a4:	d102      	bne.n	1000b7ac <sms_dualtimer1_fn+0x29c>
            //release_sleep_lock();
            ulp_ready = true;
1000b7a6:	2201      	movs	r2, #1
1000b7a8:	4b0b      	ldr	r3, [pc, #44]	; (1000b7d8 <sms_dualtimer1_fn+0x2c8>)
1000b7aa:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b7ac:	bd10      	pop	{r4, pc}
1000b7ae:	46c0      	nop			; (mov r8, r8)
1000b7b0:	10019fc0 	.word	0x10019fc0
1000b7b4:	1001a0d0 	.word	0x1001a0d0
1000b7b8:	1000b039 	.word	0x1000b039
1000b7bc:	100164f8 	.word	0x100164f8
1000b7c0:	10015351 	.word	0x10015351
1000b7c4:	10017054 	.word	0x10017054
1000b7c8:	10015231 	.word	0x10015231
1000b7cc:	10017084 	.word	0x10017084
1000b7d0:	1001a054 	.word	0x1001a054
1000b7d4:	1001a16d 	.word	0x1001a16d
1000b7d8:	1001a055 	.word	0x1001a055
1000b7dc:	1000b465 	.word	0x1000b465
1000b7e0:	100170dc 	.word	0x100170dc
1000b7e4:	1000a971 	.word	0x1000a971
1000b7e8:	1001a05c 	.word	0x1001a05c
1000b7ec:	1000a581 	.word	0x1000a581
1000b7f0:	10017114 	.word	0x10017114
1000b7f4:	1000a915 	.word	0x1000a915
1000b7f8:	1001a16c 	.word	0x1001a16c
1000b7fc:	1001a18a 	.word	0x1001a18a
1000b800:	10009f21 	.word	0x10009f21
1000b804:	00000303 	.word	0x00000303
1000b808:	10009f39 	.word	0x10009f39
1000b80c:	10017128 	.word	0x10017128

1000b810 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b810:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b812:	4846      	ldr	r0, [pc, #280]	; (1000b92c <sms_dualtimer2_fn+0x11c>)
1000b814:	4b46      	ldr	r3, [pc, #280]	; (1000b930 <sms_dualtimer2_fn+0x120>)
1000b816:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b818:	4b46      	ldr	r3, [pc, #280]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b81a:	781b      	ldrb	r3, [r3, #0]
1000b81c:	b2db      	uxtb	r3, r3
1000b81e:	2b02      	cmp	r3, #2
1000b820:	d02f      	beq.n	1000b882 <sms_dualtimer2_fn+0x72>
1000b822:	2b03      	cmp	r3, #3
1000b824:	d054      	beq.n	1000b8d0 <sms_dualtimer2_fn+0xc0>
1000b826:	2b01      	cmp	r3, #1
1000b828:	d17f      	bne.n	1000b92a <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b82a:	2200      	movs	r2, #0
1000b82c:	4b41      	ldr	r3, [pc, #260]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b82e:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b830:	4b41      	ldr	r3, [pc, #260]	; (1000b938 <sms_dualtimer2_fn+0x128>)
1000b832:	781b      	ldrb	r3, [r3, #0]
1000b834:	2b22      	cmp	r3, #34	; 0x22
1000b836:	d107      	bne.n	1000b848 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b838:	4b40      	ldr	r3, [pc, #256]	; (1000b93c <sms_dualtimer2_fn+0x12c>)
1000b83a:	781b      	ldrb	r3, [r3, #0]
1000b83c:	2b00      	cmp	r3, #0
1000b83e:	d174      	bne.n	1000b92a <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b840:	3201      	adds	r2, #1
1000b842:	4b3f      	ldr	r3, [pc, #252]	; (1000b940 <sms_dualtimer2_fn+0x130>)
1000b844:	701a      	strb	r2, [r3, #0]
1000b846:	e070      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b848:	4a3e      	ldr	r2, [pc, #248]	; (1000b944 <sms_dualtimer2_fn+0x134>)
1000b84a:	7813      	ldrb	r3, [r2, #0]
1000b84c:	3301      	adds	r3, #1
1000b84e:	b2db      	uxtb	r3, r3
1000b850:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b852:	2b00      	cmp	r3, #0
1000b854:	d009      	beq.n	1000b86a <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b856:	483c      	ldr	r0, [pc, #240]	; (1000b948 <sms_dualtimer2_fn+0x138>)
1000b858:	4b3c      	ldr	r3, [pc, #240]	; (1000b94c <sms_dualtimer2_fn+0x13c>)
1000b85a:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b85c:	2200      	movs	r2, #0
1000b85e:	4b35      	ldr	r3, [pc, #212]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b860:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b862:	3222      	adds	r2, #34	; 0x22
1000b864:	4b34      	ldr	r3, [pc, #208]	; (1000b938 <sms_dualtimer2_fn+0x128>)
1000b866:	701a      	strb	r2, [r3, #0]
1000b868:	e05f      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b86a:	2100      	movs	r1, #0
1000b86c:	4838      	ldr	r0, [pc, #224]	; (1000b950 <sms_dualtimer2_fn+0x140>)
1000b86e:	4b37      	ldr	r3, [pc, #220]	; (1000b94c <sms_dualtimer2_fn+0x13c>)
1000b870:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b872:	2201      	movs	r2, #1
1000b874:	4b2f      	ldr	r3, [pc, #188]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b876:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b878:	2164      	movs	r1, #100	; 0x64
1000b87a:	2001      	movs	r0, #1
1000b87c:	4b35      	ldr	r3, [pc, #212]	; (1000b954 <sms_dualtimer2_fn+0x144>)
1000b87e:	4798      	blx	r3
1000b880:	e053      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b882:	4835      	ldr	r0, [pc, #212]	; (1000b958 <sms_dualtimer2_fn+0x148>)
1000b884:	4b35      	ldr	r3, [pc, #212]	; (1000b95c <sms_dualtimer2_fn+0x14c>)
1000b886:	4798      	blx	r3
1000b888:	4835      	ldr	r0, [pc, #212]	; (1000b960 <sms_dualtimer2_fn+0x150>)
1000b88a:	4b30      	ldr	r3, [pc, #192]	; (1000b94c <sms_dualtimer2_fn+0x13c>)
1000b88c:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b88e:	2200      	movs	r2, #0
1000b890:	4b28      	ldr	r3, [pc, #160]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b892:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b894:	4a33      	ldr	r2, [pc, #204]	; (1000b964 <sms_dualtimer2_fn+0x154>)
1000b896:	7813      	ldrb	r3, [r2, #0]
1000b898:	3301      	adds	r3, #1
1000b89a:	b2db      	uxtb	r3, r3
1000b89c:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b89e:	7813      	ldrb	r3, [r2, #0]
1000b8a0:	b2db      	uxtb	r3, r3
1000b8a2:	2b07      	cmp	r3, #7
1000b8a4:	d908      	bls.n	1000b8b8 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b8a6:	2016      	movs	r0, #22
1000b8a8:	4b2f      	ldr	r3, [pc, #188]	; (1000b968 <sms_dualtimer2_fn+0x158>)
1000b8aa:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b8ac:	4b2f      	ldr	r3, [pc, #188]	; (1000b96c <sms_dualtimer2_fn+0x15c>)
1000b8ae:	4798      	blx	r3
            ulp_ready = true;
1000b8b0:	2201      	movs	r2, #1
1000b8b2:	4b23      	ldr	r3, [pc, #140]	; (1000b940 <sms_dualtimer2_fn+0x130>)
1000b8b4:	701a      	strb	r2, [r3, #0]
1000b8b6:	e038      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b8b8:	2016      	movs	r0, #22
1000b8ba:	4b2d      	ldr	r3, [pc, #180]	; (1000b970 <sms_dualtimer2_fn+0x160>)
1000b8bc:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b8be:	2202      	movs	r2, #2
1000b8c0:	4b1c      	ldr	r3, [pc, #112]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b8c2:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b8c4:	3a01      	subs	r2, #1
1000b8c6:	2164      	movs	r1, #100	; 0x64
1000b8c8:	2001      	movs	r0, #1
1000b8ca:	4b22      	ldr	r3, [pc, #136]	; (1000b954 <sms_dualtimer2_fn+0x144>)
1000b8cc:	4798      	blx	r3
1000b8ce:	e02c      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b8d0:	4821      	ldr	r0, [pc, #132]	; (1000b958 <sms_dualtimer2_fn+0x148>)
1000b8d2:	4b22      	ldr	r3, [pc, #136]	; (1000b95c <sms_dualtimer2_fn+0x14c>)
1000b8d4:	4798      	blx	r3
1000b8d6:	4827      	ldr	r0, [pc, #156]	; (1000b974 <sms_dualtimer2_fn+0x164>)
1000b8d8:	4b1c      	ldr	r3, [pc, #112]	; (1000b94c <sms_dualtimer2_fn+0x13c>)
1000b8da:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b8dc:	2200      	movs	r2, #0
1000b8de:	4b15      	ldr	r3, [pc, #84]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b8e0:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b8e2:	4a20      	ldr	r2, [pc, #128]	; (1000b964 <sms_dualtimer2_fn+0x154>)
1000b8e4:	7813      	ldrb	r3, [r2, #0]
1000b8e6:	3301      	adds	r3, #1
1000b8e8:	b2db      	uxtb	r3, r3
1000b8ea:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b8ec:	7813      	ldrb	r3, [r2, #0]
1000b8ee:	b2db      	uxtb	r3, r3
1000b8f0:	2b03      	cmp	r3, #3
1000b8f2:	d90e      	bls.n	1000b912 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b8f4:	2016      	movs	r0, #22
1000b8f6:	4b1c      	ldr	r3, [pc, #112]	; (1000b968 <sms_dualtimer2_fn+0x158>)
1000b8f8:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b8fa:	4817      	ldr	r0, [pc, #92]	; (1000b958 <sms_dualtimer2_fn+0x148>)
1000b8fc:	4b17      	ldr	r3, [pc, #92]	; (1000b95c <sms_dualtimer2_fn+0x14c>)
1000b8fe:	4798      	blx	r3
1000b900:	481d      	ldr	r0, [pc, #116]	; (1000b978 <sms_dualtimer2_fn+0x168>)
1000b902:	4b12      	ldr	r3, [pc, #72]	; (1000b94c <sms_dualtimer2_fn+0x13c>)
1000b904:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b906:	4b1d      	ldr	r3, [pc, #116]	; (1000b97c <sms_dualtimer2_fn+0x16c>)
1000b908:	4798      	blx	r3
            ulp_ready = true;
1000b90a:	2201      	movs	r2, #1
1000b90c:	4b0c      	ldr	r3, [pc, #48]	; (1000b940 <sms_dualtimer2_fn+0x130>)
1000b90e:	701a      	strb	r2, [r3, #0]
1000b910:	e00b      	b.n	1000b92a <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b912:	2016      	movs	r0, #22
1000b914:	4b16      	ldr	r3, [pc, #88]	; (1000b970 <sms_dualtimer2_fn+0x160>)
1000b916:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b918:	2203      	movs	r2, #3
1000b91a:	4b06      	ldr	r3, [pc, #24]	; (1000b934 <sms_dualtimer2_fn+0x124>)
1000b91c:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b91e:	3a02      	subs	r2, #2
1000b920:	21c8      	movs	r1, #200	; 0xc8
1000b922:	0049      	lsls	r1, r1, #1
1000b924:	2001      	movs	r0, #1
1000b926:	4b0b      	ldr	r3, [pc, #44]	; (1000b954 <sms_dualtimer2_fn+0x144>)
1000b928:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b92a:	bd10      	pop	{r4, pc}
1000b92c:	10017164 	.word	0x10017164
1000b930:	1000a915 	.word	0x1000a915
1000b934:	1001a16d 	.word	0x1001a16d
1000b938:	1001a16c 	.word	0x1001a16c
1000b93c:	10019fc0 	.word	0x10019fc0
1000b940:	1001a055 	.word	0x1001a055
1000b944:	1001a161 	.word	0x1001a161
1000b948:	10017178 	.word	0x10017178
1000b94c:	10015231 	.word	0x10015231
1000b950:	10017188 	.word	0x10017188
1000b954:	1000b465 	.word	0x1000b465
1000b958:	100164f8 	.word	0x100164f8
1000b95c:	10015351 	.word	0x10015351
1000b960:	100171a4 	.word	0x100171a4
1000b964:	1001a190 	.word	0x1001a190
1000b968:	1000ade1 	.word	0x1000ade1
1000b96c:	1000a0f9 	.word	0x1000a0f9
1000b970:	1000ae41 	.word	0x1000ae41
1000b974:	100171d0 	.word	0x100171d0
1000b978:	100171fc 	.word	0x100171fc
1000b97c:	1000f795 	.word	0x1000f795

1000b980 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b980:	230c      	movs	r3, #12
1000b982:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b984:	2300      	movs	r3, #0
1000b986:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b988:	7083      	strb	r3, [r0, #2]
}
1000b98a:	4770      	bx	lr

1000b98c <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b98c:	2301      	movs	r3, #1
1000b98e:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b990:	2300      	movs	r3, #0
1000b992:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b994:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b996:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b998:	3381      	adds	r3, #129	; 0x81
1000b99a:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b99c:	3b77      	subs	r3, #119	; 0x77
1000b99e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b9a0:	3301      	adds	r3, #1
1000b9a2:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b9a4:	3301      	adds	r3, #1
1000b9a6:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b9a8:	3301      	adds	r3, #1
1000b9aa:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b9ac:	3b0b      	subs	r3, #11
1000b9ae:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b9b0:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b9b2:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b9b4:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b9b6:	4770      	bx	lr

1000b9b8 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b9b8:	b530      	push	{r4, r5, lr}
1000b9ba:	b083      	sub	sp, #12
1000b9bc:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b9be:	780b      	ldrb	r3, [r1, #0]
1000b9c0:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b9c2:	784b      	ldrb	r3, [r1, #1]
1000b9c4:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b9c6:	788b      	ldrb	r3, [r1, #2]
1000b9c8:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b9ca:	ad01      	add	r5, sp, #4
1000b9cc:	0028      	movs	r0, r5
1000b9ce:	4b07      	ldr	r3, [pc, #28]	; (1000b9ec <spi_attach_slave+0x34>)
1000b9d0:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b9d2:	2301      	movs	r3, #1
1000b9d4:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b9d6:	7820      	ldrb	r0, [r4, #0]
1000b9d8:	0029      	movs	r1, r5
1000b9da:	4b05      	ldr	r3, [pc, #20]	; (1000b9f0 <spi_attach_slave+0x38>)
1000b9dc:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b9de:	7820      	ldrb	r0, [r4, #0]
1000b9e0:	2101      	movs	r1, #1
1000b9e2:	4b04      	ldr	r3, [pc, #16]	; (1000b9f4 <spi_attach_slave+0x3c>)
1000b9e4:	4798      	blx	r3
}
1000b9e6:	b003      	add	sp, #12
1000b9e8:	bd30      	pop	{r4, r5, pc}
1000b9ea:	46c0      	nop			; (mov r8, r8)
1000b9ec:	1000bfd5 	.word	0x1000bfd5
1000b9f0:	1000bfe5 	.word	0x1000bfe5
1000b9f4:	1000c23d 	.word	0x1000c23d

1000b9f8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b9f8:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b9fa:	2201      	movs	r2, #1
1000b9fc:	761a      	strb	r2, [r3, #24]
}
1000b9fe:	4770      	bx	lr

1000ba00 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000ba00:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000ba02:	2300      	movs	r3, #0
1000ba04:	6802      	ldr	r2, [r0, #0]
1000ba06:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000ba08:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000ba0a:	4a0d      	ldr	r2, [pc, #52]	; (1000ba40 <spi_disable+0x40>)
1000ba0c:	4293      	cmp	r3, r2
1000ba0e:	d109      	bne.n	1000ba24 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000ba10:	2041      	movs	r0, #65	; 0x41
1000ba12:	4c0c      	ldr	r4, [pc, #48]	; (1000ba44 <spi_disable+0x44>)
1000ba14:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000ba16:	2026      	movs	r0, #38	; 0x26
1000ba18:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000ba1a:	2038      	movs	r0, #56	; 0x38
1000ba1c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000ba1e:	2001      	movs	r0, #1
1000ba20:	47a0      	blx	r4
1000ba22:	e00b      	b.n	1000ba3c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000ba24:	4a08      	ldr	r2, [pc, #32]	; (1000ba48 <spi_disable+0x48>)
1000ba26:	4293      	cmp	r3, r2
1000ba28:	d108      	bne.n	1000ba3c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000ba2a:	2042      	movs	r0, #66	; 0x42
1000ba2c:	4c05      	ldr	r4, [pc, #20]	; (1000ba44 <spi_disable+0x44>)
1000ba2e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000ba30:	2027      	movs	r0, #39	; 0x27
1000ba32:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000ba34:	2039      	movs	r0, #57	; 0x39
1000ba36:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000ba38:	2002      	movs	r0, #2
1000ba3a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000ba3c:	bd10      	pop	{r4, pc}
1000ba3e:	46c0      	nop			; (mov r8, r8)
1000ba40:	40006000 	.word	0x40006000
1000ba44:	1000c9d5 	.word	0x1000c9d5
1000ba48:	40007000 	.word	0x40007000

1000ba4c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000ba4c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000ba4e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000ba50:	4b09      	ldr	r3, [pc, #36]	; (1000ba78 <spi_reset+0x2c>)
1000ba52:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000ba54:	4b09      	ldr	r3, [pc, #36]	; (1000ba7c <spi_reset+0x30>)
1000ba56:	429c      	cmp	r4, r3
1000ba58:	d105      	bne.n	1000ba66 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000ba5a:	2001      	movs	r0, #1
1000ba5c:	4c08      	ldr	r4, [pc, #32]	; (1000ba80 <spi_reset+0x34>)
1000ba5e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000ba60:	2038      	movs	r0, #56	; 0x38
1000ba62:	47a0      	blx	r4
1000ba64:	e007      	b.n	1000ba76 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000ba66:	4b07      	ldr	r3, [pc, #28]	; (1000ba84 <spi_reset+0x38>)
1000ba68:	429c      	cmp	r4, r3
1000ba6a:	d104      	bne.n	1000ba76 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000ba6c:	2002      	movs	r0, #2
1000ba6e:	4c04      	ldr	r4, [pc, #16]	; (1000ba80 <spi_reset+0x34>)
1000ba70:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000ba72:	2039      	movs	r0, #57	; 0x39
1000ba74:	47a0      	blx	r4
	}
}
1000ba76:	bd10      	pop	{r4, pc}
1000ba78:	1000ba01 	.word	0x1000ba01
1000ba7c:	40006000 	.word	0x40006000
1000ba80:	1000cd41 	.word	0x1000cd41
1000ba84:	40007000 	.word	0x40007000

1000ba88 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba8a:	465f      	mov	r7, fp
1000ba8c:	4646      	mov	r6, r8
1000ba8e:	b4c0      	push	{r6, r7}
1000ba90:	b083      	sub	sp, #12
1000ba92:	0006      	movs	r6, r0
1000ba94:	4688      	mov	r8, r1
1000ba96:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000ba98:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000ba9a:	7e0b      	ldrb	r3, [r1, #24]
1000ba9c:	07db      	lsls	r3, r3, #31
1000ba9e:	d501      	bpl.n	1000baa4 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000baa0:	2300      	movs	r3, #0
1000baa2:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000baa4:	0030      	movs	r0, r6
1000baa6:	4b4a      	ldr	r3, [pc, #296]	; (1000bbd0 <spi_init+0x148>)
1000baa8:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000baaa:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000baac:	4a49      	ldr	r2, [pc, #292]	; (1000bbd4 <spi_init+0x14c>)
1000baae:	4293      	cmp	r3, r2
1000bab0:	d109      	bne.n	1000bac6 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000bab2:	2041      	movs	r0, #65	; 0x41
1000bab4:	4c48      	ldr	r4, [pc, #288]	; (1000bbd8 <spi_init+0x150>)
1000bab6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000bab8:	2026      	movs	r0, #38	; 0x26
1000baba:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000babc:	2038      	movs	r0, #56	; 0x38
1000babe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000bac0:	2001      	movs	r0, #1
1000bac2:	47a0      	blx	r4
1000bac4:	e00b      	b.n	1000bade <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000bac6:	4a45      	ldr	r2, [pc, #276]	; (1000bbdc <spi_init+0x154>)
1000bac8:	4293      	cmp	r3, r2
1000baca:	d108      	bne.n	1000bade <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000bacc:	2042      	movs	r0, #66	; 0x42
1000bace:	4c42      	ldr	r4, [pc, #264]	; (1000bbd8 <spi_init+0x150>)
1000bad0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000bad2:	2027      	movs	r0, #39	; 0x27
1000bad4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000bad6:	2039      	movs	r0, #57	; 0x39
1000bad8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000bada:	2002      	movs	r0, #2
1000badc:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000bade:	a801      	add	r0, sp, #4
1000bae0:	4b3f      	ldr	r3, [pc, #252]	; (1000bbe0 <spi_init+0x158>)
1000bae2:	4798      	blx	r3
1000bae4:	002c      	movs	r4, r5
1000bae6:	3408      	adds	r4, #8
1000bae8:	2318      	movs	r3, #24
1000baea:	469b      	mov	fp, r3
1000baec:	44ab      	add	fp, r5
1000baee:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000baf0:	6820      	ldr	r0, [r4, #0]
1000baf2:	1c43      	adds	r3, r0, #1
1000baf4:	d011      	beq.n	1000bb1a <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000baf6:	782b      	ldrb	r3, [r5, #0]
1000baf8:	2b01      	cmp	r3, #1
1000bafa:	d102      	bne.n	1000bb02 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000bafc:	466a      	mov	r2, sp
1000bafe:	7113      	strb	r3, [r2, #4]
1000bb00:	e003      	b.n	1000bb0a <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000bb02:	2b00      	cmp	r3, #0
1000bb04:	d101      	bne.n	1000bb0a <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000bb06:	466a      	mov	r2, sp
1000bb08:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000bb0a:	b2c0      	uxtb	r0, r0
1000bb0c:	a901      	add	r1, sp, #4
1000bb0e:	4b35      	ldr	r3, [pc, #212]	; (1000bbe4 <spi_init+0x15c>)
1000bb10:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000bb12:	8a39      	ldrh	r1, [r7, #16]
1000bb14:	7838      	ldrb	r0, [r7, #0]
1000bb16:	4b34      	ldr	r3, [pc, #208]	; (1000bbe8 <spi_init+0x160>)
1000bb18:	4798      	blx	r3
1000bb1a:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000bb1c:	455c      	cmp	r4, fp
1000bb1e:	d1e6      	bne.n	1000baee <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bb20:	78eb      	ldrb	r3, [r5, #3]
1000bb22:	4642      	mov	r2, r8
1000bb24:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000bb26:	782b      	ldrb	r3, [r5, #0]
1000bb28:	2b01      	cmp	r3, #1
1000bb2a:	d100      	bne.n	1000bb2e <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000bb2c:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000bb2e:	782b      	ldrb	r3, [r5, #0]
1000bb30:	2b00      	cmp	r3, #0
1000bb32:	d101      	bne.n	1000bb38 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000bb34:	4642      	mov	r2, r8
1000bb36:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000bb38:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000bb3a:	782a      	ldrb	r2, [r5, #0]
1000bb3c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000bb3e:	782a      	ldrb	r2, [r5, #0]
1000bb40:	2a01      	cmp	r2, #1
1000bb42:	d101      	bne.n	1000bb48 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000bb44:	792a      	ldrb	r2, [r5, #4]
1000bb46:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000bb48:	786a      	ldrb	r2, [r5, #1]
1000bb4a:	2a04      	cmp	r2, #4
1000bb4c:	d104      	bne.n	1000bb58 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000bb4e:	2124      	movs	r1, #36	; 0x24
1000bb50:	5c58      	ldrb	r0, [r3, r1]
1000bb52:	4302      	orrs	r2, r0
1000bb54:	545a      	strb	r2, [r3, r1]
1000bb56:	e004      	b.n	1000bb62 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000bb58:	2124      	movs	r1, #36	; 0x24
1000bb5a:	5c5a      	ldrb	r2, [r3, r1]
1000bb5c:	2004      	movs	r0, #4
1000bb5e:	4382      	bics	r2, r0
1000bb60:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000bb62:	78aa      	ldrb	r2, [r5, #2]
1000bb64:	2a01      	cmp	r2, #1
1000bb66:	d01a      	beq.n	1000bb9e <spi_init+0x116>
1000bb68:	2a00      	cmp	r2, #0
1000bb6a:	d004      	beq.n	1000bb76 <spi_init+0xee>
1000bb6c:	2a02      	cmp	r2, #2
1000bb6e:	d00c      	beq.n	1000bb8a <spi_init+0x102>
1000bb70:	2a03      	cmp	r2, #3
1000bb72:	d01e      	beq.n	1000bbb2 <spi_init+0x12a>
1000bb74:	e026      	b.n	1000bbc4 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bb76:	2224      	movs	r2, #36	; 0x24
1000bb78:	5c99      	ldrb	r1, [r3, r2]
1000bb7a:	2002      	movs	r0, #2
1000bb7c:	4381      	bics	r1, r0
1000bb7e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bb80:	5c99      	ldrb	r1, [r3, r2]
1000bb82:	3801      	subs	r0, #1
1000bb84:	4381      	bics	r1, r0
1000bb86:	5499      	strb	r1, [r3, r2]
1000bb88:	e01c      	b.n	1000bbc4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bb8a:	2224      	movs	r2, #36	; 0x24
1000bb8c:	5c98      	ldrb	r0, [r3, r2]
1000bb8e:	2102      	movs	r1, #2
1000bb90:	4301      	orrs	r1, r0
1000bb92:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000bb94:	5c99      	ldrb	r1, [r3, r2]
1000bb96:	2001      	movs	r0, #1
1000bb98:	4381      	bics	r1, r0
1000bb9a:	5499      	strb	r1, [r3, r2]
1000bb9c:	e012      	b.n	1000bbc4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000bb9e:	2224      	movs	r2, #36	; 0x24
1000bba0:	5c99      	ldrb	r1, [r3, r2]
1000bba2:	2002      	movs	r0, #2
1000bba4:	4381      	bics	r1, r0
1000bba6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bba8:	5c98      	ldrb	r0, [r3, r2]
1000bbaa:	2101      	movs	r1, #1
1000bbac:	4301      	orrs	r1, r0
1000bbae:	5499      	strb	r1, [r3, r2]
1000bbb0:	e008      	b.n	1000bbc4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000bbb2:	2224      	movs	r2, #36	; 0x24
1000bbb4:	5c98      	ldrb	r0, [r3, r2]
1000bbb6:	2102      	movs	r1, #2
1000bbb8:	4301      	orrs	r1, r0
1000bbba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000bbbc:	5c98      	ldrb	r0, [r3, r2]
1000bbbe:	2101      	movs	r1, #1
1000bbc0:	4301      	orrs	r1, r0
1000bbc2:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000bbc4:	2000      	movs	r0, #0
1000bbc6:	b003      	add	sp, #12
1000bbc8:	bc0c      	pop	{r2, r3}
1000bbca:	4690      	mov	r8, r2
1000bbcc:	469b      	mov	fp, r3
1000bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbd0:	1000ba4d 	.word	0x1000ba4d
1000bbd4:	40006000 	.word	0x40006000
1000bbd8:	1000c679 	.word	0x1000c679
1000bbdc:	40007000 	.word	0x40007000
1000bbe0:	1000bfd5 	.word	0x1000bfd5
1000bbe4:	1000bfe5 	.word	0x1000bfe5
1000bbe8:	1000c2c9 	.word	0x1000c2c9

1000bbec <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bbee:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000bbf0:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000bbf2:	2600      	movs	r6, #0
1000bbf4:	466d      	mov	r5, sp
1000bbf6:	71ee      	strb	r6, [r5, #7]
1000bbf8:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000bbfa:	2c00      	cmp	r4, #0
1000bbfc:	d034      	beq.n	1000bc68 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000bbfe:	2900      	cmp	r1, #0
1000bc00:	d104      	bne.n	1000bc0c <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000bc02:	0029      	movs	r1, r5
1000bc04:	7980      	ldrb	r0, [r0, #6]
1000bc06:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000bc08:	2701      	movs	r7, #1
1000bc0a:	e00b      	b.n	1000bc24 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000bc0c:	2a00      	cmp	r2, #0
1000bc0e:	d005      	beq.n	1000bc1c <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bc10:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000bc12:	2b00      	cmp	r3, #0
1000bc14:	d029      	beq.n	1000bc6a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000bc16:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bc18:	2700      	movs	r7, #0
1000bc1a:	e003      	b.n	1000bc24 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000bc1c:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000bc1e:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000bc20:	466a      	mov	r2, sp
1000bc22:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000bc24:	2528      	movs	r5, #40	; 0x28
1000bc26:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000bc28:	07c0      	lsls	r0, r0, #31
1000bc2a:	d4fc      	bmi.n	1000bc26 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000bc2c:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000bc2e:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000bc30:	2b00      	cmp	r3, #0
1000bc32:	d014      	beq.n	1000bc5e <spi_transceive_buffer_wait+0x72>
1000bc34:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000bc36:	4278      	negs	r0, r7
1000bc38:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000bc3a:	4270      	negs	r0, r6
1000bc3c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000bc3e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000bc40:	07c0      	lsls	r0, r0, #31
1000bc42:	d5fc      	bpl.n	1000bc3e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000bc44:	7808      	ldrb	r0, [r1, #0]
1000bc46:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000bc48:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000bc4a:	07c0      	lsls	r0, r0, #31
1000bc4c:	d5fc      	bpl.n	1000bc48 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000bc4e:	7920      	ldrb	r0, [r4, #4]
1000bc50:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000bc52:	3501      	adds	r5, #1
1000bc54:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000bc56:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000bc58:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000bc5a:	42ab      	cmp	r3, r5
1000bc5c:	d1ef      	bne.n	1000bc3e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000bc5e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000bc60:	06db      	lsls	r3, r3, #27
1000bc62:	d5fc      	bpl.n	1000bc5e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000bc64:	2000      	movs	r0, #0
1000bc66:	e000      	b.n	1000bc6a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000bc68:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000bc6a:	b003      	add	sp, #12
1000bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc6e:	46c0      	nop			; (mov r8, r8)

1000bc70 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000bc70:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000bc72:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000bc74:	2a00      	cmp	r2, #0
1000bc76:	d003      	beq.n	1000bc80 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000bc78:	2100      	movs	r1, #0
1000bc7a:	4b04      	ldr	r3, [pc, #16]	; (1000bc8c <spi_select_slave+0x1c>)
1000bc7c:	4798      	blx	r3
1000bc7e:	e002      	b.n	1000bc86 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000bc80:	2101      	movs	r1, #1
1000bc82:	4b02      	ldr	r3, [pc, #8]	; (1000bc8c <spi_select_slave+0x1c>)
1000bc84:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000bc86:	2000      	movs	r0, #0
1000bc88:	bd10      	pop	{r4, pc}
1000bc8a:	46c0      	nop			; (mov r8, r8)
1000bc8c:	1000c23d 	.word	0x1000c23d

1000bc90 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000bc90:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000bc92:	4b0d      	ldr	r3, [pc, #52]	; (1000bcc8 <dualtimer_isr_handler+0x38>)
1000bc94:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000bc96:	2b00      	cmp	r3, #0
1000bc98:	d007      	beq.n	1000bcaa <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000bc9a:	2201      	movs	r2, #1
1000bc9c:	4b0a      	ldr	r3, [pc, #40]	; (1000bcc8 <dualtimer_isr_handler+0x38>)
1000bc9e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000bca0:	4b0a      	ldr	r3, [pc, #40]	; (1000bccc <dualtimer_isr_handler+0x3c>)
1000bca2:	681b      	ldr	r3, [r3, #0]
1000bca4:	2b00      	cmp	r3, #0
1000bca6:	d000      	beq.n	1000bcaa <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000bca8:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000bcaa:	2334      	movs	r3, #52	; 0x34
1000bcac:	4a06      	ldr	r2, [pc, #24]	; (1000bcc8 <dualtimer_isr_handler+0x38>)
1000bcae:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000bcb0:	2b00      	cmp	r3, #0
1000bcb2:	d007      	beq.n	1000bcc4 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000bcb4:	2101      	movs	r1, #1
1000bcb6:	232c      	movs	r3, #44	; 0x2c
1000bcb8:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000bcba:	4b05      	ldr	r3, [pc, #20]	; (1000bcd0 <dualtimer_isr_handler+0x40>)
1000bcbc:	681b      	ldr	r3, [r3, #0]
1000bcbe:	2b00      	cmp	r3, #0
1000bcc0:	d000      	beq.n	1000bcc4 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000bcc2:	4798      	blx	r3
	}
}
1000bcc4:	bd10      	pop	{r4, pc}
1000bcc6:	46c0      	nop			; (mov r8, r8)
1000bcc8:	40001000 	.word	0x40001000
1000bccc:	10018518 	.word	0x10018518
1000bcd0:	1001851c 	.word	0x1001851c

1000bcd4 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000bcd4:	2301      	movs	r3, #1
1000bcd6:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000bcd8:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bcda:	2202      	movs	r2, #2
1000bcdc:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bcde:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bce0:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bce2:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bce4:	2200      	movs	r2, #0
1000bce6:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bce8:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000bcea:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000bcec:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000bcee:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000bcf0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000bcf2:	7602      	strb	r2, [r0, #24]
}
1000bcf4:	4770      	bx	lr
1000bcf6:	46c0      	nop			; (mov r8, r8)

1000bcf8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000bcf8:	2800      	cmp	r0, #0
1000bcfa:	d107      	bne.n	1000bd0c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bcfc:	2900      	cmp	r1, #0
1000bcfe:	d102      	bne.n	1000bd06 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000bd00:	4b06      	ldr	r3, [pc, #24]	; (1000bd1c <dualtimer_set_counter+0x24>)
1000bd02:	601a      	str	r2, [r3, #0]
1000bd04:	e009      	b.n	1000bd1a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000bd06:	4b05      	ldr	r3, [pc, #20]	; (1000bd1c <dualtimer_set_counter+0x24>)
1000bd08:	619a      	str	r2, [r3, #24]
1000bd0a:	e006      	b.n	1000bd1a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bd0c:	2900      	cmp	r1, #0
1000bd0e:	d102      	bne.n	1000bd16 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000bd10:	4b02      	ldr	r3, [pc, #8]	; (1000bd1c <dualtimer_set_counter+0x24>)
1000bd12:	621a      	str	r2, [r3, #32]
1000bd14:	e001      	b.n	1000bd1a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000bd16:	4b01      	ldr	r3, [pc, #4]	; (1000bd1c <dualtimer_set_counter+0x24>)
1000bd18:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000bd1a:	4770      	bx	lr
1000bd1c:	40001000 	.word	0x40001000

1000bd20 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bd20:	2800      	cmp	r0, #0
1000bd22:	d105      	bne.n	1000bd30 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bd24:	4a06      	ldr	r2, [pc, #24]	; (1000bd40 <dualtimer_enable+0x20>)
1000bd26:	7a11      	ldrb	r1, [r2, #8]
1000bd28:	2380      	movs	r3, #128	; 0x80
1000bd2a:	430b      	orrs	r3, r1
1000bd2c:	7213      	strb	r3, [r2, #8]
1000bd2e:	e005      	b.n	1000bd3c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bd30:	4903      	ldr	r1, [pc, #12]	; (1000bd40 <dualtimer_enable+0x20>)
1000bd32:	2228      	movs	r2, #40	; 0x28
1000bd34:	5c88      	ldrb	r0, [r1, r2]
1000bd36:	2380      	movs	r3, #128	; 0x80
1000bd38:	4303      	orrs	r3, r0
1000bd3a:	548b      	strb	r3, [r1, r2]
	}
}
1000bd3c:	4770      	bx	lr
1000bd3e:	46c0      	nop			; (mov r8, r8)
1000bd40:	40001000 	.word	0x40001000

1000bd44 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bd44:	2800      	cmp	r0, #0
1000bd46:	d105      	bne.n	1000bd54 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bd48:	4a06      	ldr	r2, [pc, #24]	; (1000bd64 <dualtimer_disable+0x20>)
1000bd4a:	7a11      	ldrb	r1, [r2, #8]
1000bd4c:	237f      	movs	r3, #127	; 0x7f
1000bd4e:	400b      	ands	r3, r1
1000bd50:	7213      	strb	r3, [r2, #8]
1000bd52:	e005      	b.n	1000bd60 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bd54:	4903      	ldr	r1, [pc, #12]	; (1000bd64 <dualtimer_disable+0x20>)
1000bd56:	2228      	movs	r2, #40	; 0x28
1000bd58:	5c88      	ldrb	r0, [r1, r2]
1000bd5a:	237f      	movs	r3, #127	; 0x7f
1000bd5c:	4003      	ands	r3, r0
1000bd5e:	548b      	strb	r3, [r1, r2]
	}
}
1000bd60:	4770      	bx	lr
1000bd62:	46c0      	nop			; (mov r8, r8)
1000bd64:	40001000 	.word	0x40001000

1000bd68 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000bd68:	b570      	push	{r4, r5, r6, lr}
1000bd6a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000bd6c:	2004      	movs	r0, #4
1000bd6e:	4b39      	ldr	r3, [pc, #228]	; (1000be54 <dualtimer_init+0xec>)
1000bd70:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000bd72:	7823      	ldrb	r3, [r4, #0]
1000bd74:	2b00      	cmp	r3, #0
1000bd76:	d102      	bne.n	1000bd7e <dualtimer_init+0x16>
1000bd78:	7b23      	ldrb	r3, [r4, #12]
1000bd7a:	2b00      	cmp	r3, #0
1000bd7c:	d065      	beq.n	1000be4a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000bd7e:	4936      	ldr	r1, [pc, #216]	; (1000be58 <dualtimer_init+0xf0>)
1000bd80:	68ca      	ldr	r2, [r1, #12]
1000bd82:	2320      	movs	r3, #32
1000bd84:	4313      	orrs	r3, r2
1000bd86:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000bd88:	7e22      	ldrb	r2, [r4, #24]
1000bd8a:	698b      	ldr	r3, [r1, #24]
1000bd8c:	2003      	movs	r0, #3
1000bd8e:	4002      	ands	r2, r0
1000bd90:	0112      	lsls	r2, r2, #4
1000bd92:	302d      	adds	r0, #45	; 0x2d
1000bd94:	4383      	bics	r3, r0
1000bd96:	4313      	orrs	r3, r2
1000bd98:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bd9a:	7823      	ldrb	r3, [r4, #0]
1000bd9c:	2b00      	cmp	r3, #0
1000bd9e:	d026      	beq.n	1000bdee <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bda0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000bda2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bda4:	2b00      	cmp	r3, #0
1000bda6:	d003      	beq.n	1000bdb0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bda8:	3b02      	subs	r3, #2
1000bdaa:	425d      	negs	r5, r3
1000bdac:	415d      	adcs	r5, r3
1000bdae:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bdb0:	78a2      	ldrb	r2, [r4, #2]
1000bdb2:	0052      	lsls	r2, r2, #1
1000bdb4:	2502      	movs	r5, #2
1000bdb6:	402a      	ands	r2, r5
1000bdb8:	78e3      	ldrb	r3, [r4, #3]
1000bdba:	009b      	lsls	r3, r3, #2
1000bdbc:	350a      	adds	r5, #10
1000bdbe:	402b      	ands	r3, r5
1000bdc0:	431a      	orrs	r2, r3
1000bdc2:	0015      	movs	r5, r2
1000bdc4:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000bdc6:	7923      	ldrb	r3, [r4, #4]
1000bdc8:	2b00      	cmp	r3, #0
1000bdca:	d001      	beq.n	1000bdd0 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bdcc:	2320      	movs	r3, #32
1000bdce:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bdd0:	4b22      	ldr	r3, [pc, #136]	; (1000be5c <dualtimer_init+0xf4>)
1000bdd2:	68a2      	ldr	r2, [r4, #8]
1000bdd4:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bdd6:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bdd8:	491f      	ldr	r1, [pc, #124]	; (1000be58 <dualtimer_init+0xf0>)
1000bdda:	22c4      	movs	r2, #196	; 0xc4
1000bddc:	0052      	lsls	r2, r2, #1
1000bdde:	5c88      	ldrb	r0, [r1, r2]
1000bde0:	2301      	movs	r3, #1
1000bde2:	4303      	orrs	r3, r0
1000bde4:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bde6:	2000      	movs	r0, #0
1000bde8:	4b1d      	ldr	r3, [pc, #116]	; (1000be60 <dualtimer_init+0xf8>)
1000bdea:	4798      	blx	r3
1000bdec:	e000      	b.n	1000bdf0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bdee:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bdf0:	7b23      	ldrb	r3, [r4, #12]
1000bdf2:	2b00      	cmp	r3, #0
1000bdf4:	d029      	beq.n	1000be4a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bdf6:	7b63      	ldrb	r3, [r4, #13]
1000bdf8:	2b00      	cmp	r3, #0
1000bdfa:	d005      	beq.n	1000be08 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bdfc:	2b01      	cmp	r3, #1
1000bdfe:	d005      	beq.n	1000be0c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000be00:	2b02      	cmp	r3, #2
1000be02:	d104      	bne.n	1000be0e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000be04:	2540      	movs	r5, #64	; 0x40
1000be06:	e002      	b.n	1000be0e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000be08:	2501      	movs	r5, #1
1000be0a:	e000      	b.n	1000be0e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000be0c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000be0e:	7ba3      	ldrb	r3, [r4, #14]
1000be10:	005b      	lsls	r3, r3, #1
1000be12:	2102      	movs	r1, #2
1000be14:	4019      	ands	r1, r3
1000be16:	7be2      	ldrb	r2, [r4, #15]
1000be18:	0092      	lsls	r2, r2, #2
1000be1a:	230c      	movs	r3, #12
1000be1c:	4013      	ands	r3, r2
1000be1e:	430b      	orrs	r3, r1
1000be20:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000be22:	7c23      	ldrb	r3, [r4, #16]
1000be24:	2b00      	cmp	r3, #0
1000be26:	d001      	beq.n	1000be2c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000be28:	2320      	movs	r3, #32
1000be2a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000be2c:	6962      	ldr	r2, [r4, #20]
1000be2e:	4b0b      	ldr	r3, [pc, #44]	; (1000be5c <dualtimer_init+0xf4>)
1000be30:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000be32:	2228      	movs	r2, #40	; 0x28
1000be34:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000be36:	4908      	ldr	r1, [pc, #32]	; (1000be58 <dualtimer_init+0xf0>)
1000be38:	3261      	adds	r2, #97	; 0x61
1000be3a:	32ff      	adds	r2, #255	; 0xff
1000be3c:	5c88      	ldrb	r0, [r1, r2]
1000be3e:	2302      	movs	r3, #2
1000be40:	4303      	orrs	r3, r0
1000be42:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000be44:	2001      	movs	r0, #1
1000be46:	4b06      	ldr	r3, [pc, #24]	; (1000be60 <dualtimer_init+0xf8>)
1000be48:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000be4a:	4906      	ldr	r1, [pc, #24]	; (1000be64 <dualtimer_init+0xfc>)
1000be4c:	201e      	movs	r0, #30
1000be4e:	4b06      	ldr	r3, [pc, #24]	; (1000be68 <dualtimer_init+0x100>)
1000be50:	4798      	blx	r3
}
1000be52:	bd70      	pop	{r4, r5, r6, pc}
1000be54:	1000cd41 	.word	0x1000cd41
1000be58:	4000b000 	.word	0x4000b000
1000be5c:	40001000 	.word	0x40001000
1000be60:	1000bd21 	.word	0x1000bd21
1000be64:	1000bc91 	.word	0x1000bc91
1000be68:	1000d1a9 	.word	0x1000d1a9

1000be6c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000be6c:	2800      	cmp	r0, #0
1000be6e:	d102      	bne.n	1000be76 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000be70:	4b02      	ldr	r3, [pc, #8]	; (1000be7c <dualtimer_register_callback+0x10>)
1000be72:	6019      	str	r1, [r3, #0]
1000be74:	e001      	b.n	1000be7a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000be76:	4b02      	ldr	r3, [pc, #8]	; (1000be80 <dualtimer_register_callback+0x14>)
1000be78:	6019      	str	r1, [r3, #0]
	}
}
1000be7a:	4770      	bx	lr
1000be7c:	10018518 	.word	0x10018518
1000be80:	1001851c 	.word	0x1001851c

1000be84 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000be84:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000be86:	4b16      	ldr	r3, [pc, #88]	; (1000bee0 <gpio_port0_isr_handler+0x5c>)
1000be88:	681d      	ldr	r5, [r3, #0]
1000be8a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000be8c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000be8e:	07cb      	lsls	r3, r1, #31
1000be90:	d407      	bmi.n	1000bea2 <gpio_port0_isr_handler+0x1e>
1000be92:	2301      	movs	r3, #1
1000be94:	2401      	movs	r4, #1
1000be96:	0018      	movs	r0, r3
1000be98:	0022      	movs	r2, r4
1000be9a:	409a      	lsls	r2, r3
1000be9c:	4211      	tst	r1, r2
1000be9e:	d014      	beq.n	1000beca <gpio_port0_isr_handler+0x46>
1000bea0:	e001      	b.n	1000bea6 <gpio_port0_isr_handler+0x22>
1000bea2:	2201      	movs	r2, #1
1000bea4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bea6:	b292      	uxth	r2, r2
1000bea8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000beaa:	2346      	movs	r3, #70	; 0x46
1000beac:	4a0c      	ldr	r2, [pc, #48]	; (1000bee0 <gpio_port0_isr_handler+0x5c>)
1000beae:	5ad3      	ldrh	r3, [r2, r3]
1000beb0:	4103      	asrs	r3, r0
1000beb2:	07db      	lsls	r3, r3, #31
1000beb4:	d50c      	bpl.n	1000bed0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000beb6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000beb8:	5ad3      	ldrh	r3, [r2, r3]
1000beba:	4103      	asrs	r3, r0
1000bebc:	07db      	lsls	r3, r3, #31
1000bebe:	d507      	bpl.n	1000bed0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bec0:	0080      	lsls	r0, r0, #2
1000bec2:	1810      	adds	r0, r2, r0
1000bec4:	6843      	ldr	r3, [r0, #4]
1000bec6:	4798      	blx	r3
1000bec8:	e002      	b.n	1000bed0 <gpio_port0_isr_handler+0x4c>
1000beca:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000becc:	2b10      	cmp	r3, #16
1000bece:	d1e2      	bne.n	1000be96 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bed0:	2180      	movs	r1, #128	; 0x80
1000bed2:	0409      	lsls	r1, r1, #16
1000bed4:	23c0      	movs	r3, #192	; 0xc0
1000bed6:	005b      	lsls	r3, r3, #1
1000bed8:	4a02      	ldr	r2, [pc, #8]	; (1000bee4 <gpio_port0_isr_handler+0x60>)
1000beda:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bedc:	bd70      	pop	{r4, r5, r6, pc}
1000bede:	46c0      	nop			; (mov r8, r8)
1000bee0:	1001a194 	.word	0x1001a194
1000bee4:	e000e100 	.word	0xe000e100

1000bee8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000beea:	4b18      	ldr	r3, [pc, #96]	; (1000bf4c <gpio_port1_isr_handler+0x64>)
1000beec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000beee:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bef0:	b2b6      	uxth	r6, r6
1000bef2:	0037      	movs	r7, r6
1000bef4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bef6:	0b76      	lsrs	r6, r6, #13
1000bef8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000befa:	4d14      	ldr	r5, [pc, #80]	; (1000bf4c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000befc:	2e00      	cmp	r6, #0
1000befe:	d001      	beq.n	1000bf04 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bf00:	4b13      	ldr	r3, [pc, #76]	; (1000bf50 <gpio_port1_isr_handler+0x68>)
1000bf02:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bf04:	0022      	movs	r2, r4
1000bf06:	2301      	movs	r3, #1
1000bf08:	40a3      	lsls	r3, r4
1000bf0a:	421f      	tst	r7, r3
1000bf0c:	d013      	beq.n	1000bf36 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bf0e:	b29b      	uxth	r3, r3
1000bf10:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bf12:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bf14:	238e      	movs	r3, #142	; 0x8e
1000bf16:	5aeb      	ldrh	r3, [r5, r3]
1000bf18:	4123      	asrs	r3, r4
1000bf1a:	07db      	lsls	r3, r3, #31
1000bf1c:	d50b      	bpl.n	1000bf36 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bf1e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bf20:	490a      	ldr	r1, [pc, #40]	; (1000bf4c <gpio_port1_isr_handler+0x64>)
1000bf22:	5acb      	ldrh	r3, [r1, r3]
1000bf24:	4123      	asrs	r3, r4
1000bf26:	07db      	lsls	r3, r3, #31
1000bf28:	d505      	bpl.n	1000bf36 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bf2a:	3212      	adds	r2, #18
1000bf2c:	0092      	lsls	r2, r2, #2
1000bf2e:	188a      	adds	r2, r1, r2
1000bf30:	6853      	ldr	r3, [r2, #4]
1000bf32:	4798      	blx	r3
				break;
1000bf34:	e002      	b.n	1000bf3c <gpio_port1_isr_handler+0x54>
1000bf36:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bf38:	2c10      	cmp	r4, #16
1000bf3a:	d1df      	bne.n	1000befc <gpio_port1_isr_handler+0x14>
1000bf3c:	2180      	movs	r1, #128	; 0x80
1000bf3e:	0449      	lsls	r1, r1, #17
1000bf40:	23c0      	movs	r3, #192	; 0xc0
1000bf42:	005b      	lsls	r3, r3, #1
1000bf44:	4a03      	ldr	r2, [pc, #12]	; (1000bf54 <gpio_port1_isr_handler+0x6c>)
1000bf46:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bf4a:	46c0      	nop			; (mov r8, r8)
1000bf4c:	1001a194 	.word	0x1001a194
1000bf50:	0001bc51 	.word	0x0001bc51
1000bf54:	e000e100 	.word	0xe000e100

1000bf58 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bf58:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bf5a:	2390      	movs	r3, #144	; 0x90
1000bf5c:	4a1b      	ldr	r2, [pc, #108]	; (1000bfcc <gpio_port2_isr_handler+0x74>)
1000bf5e:	58d2      	ldr	r2, [r2, r3]
1000bf60:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bf62:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bf64:	04d9      	lsls	r1, r3, #19
1000bf66:	d414      	bmi.n	1000bf92 <gpio_port2_isr_handler+0x3a>
1000bf68:	0499      	lsls	r1, r3, #18
1000bf6a:	d40a      	bmi.n	1000bf82 <gpio_port2_isr_handler+0x2a>
1000bf6c:	0459      	lsls	r1, r3, #17
1000bf6e:	d40c      	bmi.n	1000bf8a <gpio_port2_isr_handler+0x32>
1000bf70:	0bdb      	lsrs	r3, r3, #15
1000bf72:	03db      	lsls	r3, r3, #15
1000bf74:	b29b      	uxth	r3, r3
1000bf76:	2b00      	cmp	r3, #0
1000bf78:	d020      	beq.n	1000bfbc <gpio_port2_isr_handler+0x64>
1000bf7a:	2380      	movs	r3, #128	; 0x80
1000bf7c:	021b      	lsls	r3, r3, #8
1000bf7e:	210f      	movs	r1, #15
1000bf80:	e00a      	b.n	1000bf98 <gpio_port2_isr_handler+0x40>
1000bf82:	2380      	movs	r3, #128	; 0x80
1000bf84:	019b      	lsls	r3, r3, #6
1000bf86:	210d      	movs	r1, #13
1000bf88:	e006      	b.n	1000bf98 <gpio_port2_isr_handler+0x40>
1000bf8a:	2380      	movs	r3, #128	; 0x80
1000bf8c:	01db      	lsls	r3, r3, #7
1000bf8e:	210e      	movs	r1, #14
1000bf90:	e002      	b.n	1000bf98 <gpio_port2_isr_handler+0x40>
1000bf92:	2380      	movs	r3, #128	; 0x80
1000bf94:	015b      	lsls	r3, r3, #5
1000bf96:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bf98:	b29b      	uxth	r3, r3
1000bf9a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bf9c:	23d6      	movs	r3, #214	; 0xd6
1000bf9e:	4a0b      	ldr	r2, [pc, #44]	; (1000bfcc <gpio_port2_isr_handler+0x74>)
1000bfa0:	5ad3      	ldrh	r3, [r2, r3]
1000bfa2:	410b      	asrs	r3, r1
1000bfa4:	07db      	lsls	r3, r3, #31
1000bfa6:	d509      	bpl.n	1000bfbc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bfa8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bfaa:	5ad3      	ldrh	r3, [r2, r3]
1000bfac:	410b      	asrs	r3, r1
1000bfae:	07db      	lsls	r3, r3, #31
1000bfb0:	d504      	bpl.n	1000bfbc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bfb2:	3124      	adds	r1, #36	; 0x24
1000bfb4:	0089      	lsls	r1, r1, #2
1000bfb6:	1851      	adds	r1, r2, r1
1000bfb8:	684b      	ldr	r3, [r1, #4]
1000bfba:	4798      	blx	r3
1000bfbc:	2180      	movs	r1, #128	; 0x80
1000bfbe:	0489      	lsls	r1, r1, #18
1000bfc0:	23c0      	movs	r3, #192	; 0xc0
1000bfc2:	005b      	lsls	r3, r3, #1
1000bfc4:	4a02      	ldr	r2, [pc, #8]	; (1000bfd0 <gpio_port2_isr_handler+0x78>)
1000bfc6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bfc8:	bd10      	pop	{r4, pc}
1000bfca:	46c0      	nop			; (mov r8, r8)
1000bfcc:	1001a194 	.word	0x1001a194
1000bfd0:	e000e100 	.word	0xe000e100

1000bfd4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bfd4:	2300      	movs	r3, #0
1000bfd6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bfd8:	2201      	movs	r2, #1
1000bfda:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bfdc:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bfde:	70c3      	strb	r3, [r0, #3]
}
1000bfe0:	4770      	bx	lr
1000bfe2:	46c0      	nop			; (mov r8, r8)

1000bfe4 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bfe4:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bfe6:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bfe8:	2801      	cmp	r0, #1
1000bfea:	d800      	bhi.n	1000bfee <gpio_pin_set_config+0xa>
1000bfec:	e0c8      	b.n	1000c180 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bfee:	2807      	cmp	r0, #7
1000bff0:	d809      	bhi.n	1000c006 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bff2:	4d64      	ldr	r5, [pc, #400]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000bff4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bff6:	3b10      	subs	r3, #16
1000bff8:	4003      	ands	r3, r0
1000bffa:	009b      	lsls	r3, r3, #2
1000bffc:	2407      	movs	r4, #7
1000bffe:	409c      	lsls	r4, r3
1000c000:	43a2      	bics	r2, r4
1000c002:	646a      	str	r2, [r5, #68]	; 0x44
1000c004:	e029      	b.n	1000c05a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000c006:	280f      	cmp	r0, #15
1000c008:	d809      	bhi.n	1000c01e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c00a:	4d5e      	ldr	r5, [pc, #376]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000c00c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000c00e:	2307      	movs	r3, #7
1000c010:	4003      	ands	r3, r0
1000c012:	009b      	lsls	r3, r3, #2
1000c014:	2407      	movs	r4, #7
1000c016:	409c      	lsls	r4, r3
1000c018:	43a2      	bics	r2, r4
1000c01a:	64aa      	str	r2, [r5, #72]	; 0x48
1000c01c:	e01d      	b.n	1000c05a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000c01e:	2817      	cmp	r0, #23
1000c020:	d809      	bhi.n	1000c036 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c022:	4d58      	ldr	r5, [pc, #352]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000c024:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000c026:	2307      	movs	r3, #7
1000c028:	4003      	ands	r3, r0
1000c02a:	009b      	lsls	r3, r3, #2
1000c02c:	2407      	movs	r4, #7
1000c02e:	409c      	lsls	r4, r3
1000c030:	43a2      	bics	r2, r4
1000c032:	64ea      	str	r2, [r5, #76]	; 0x4c
1000c034:	e011      	b.n	1000c05a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000c036:	0003      	movs	r3, r0
1000c038:	3b2c      	subs	r3, #44	; 0x2c
1000c03a:	2b03      	cmp	r3, #3
1000c03c:	d80d      	bhi.n	1000c05a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000c03e:	4d52      	ldr	r5, [pc, #328]	; (1000c188 <gpio_pin_set_config+0x1a4>)
1000c040:	2482      	movs	r4, #130	; 0x82
1000c042:	00e4      	lsls	r4, r4, #3
1000c044:	5d2a      	ldrb	r2, [r5, r4]
1000c046:	0712      	lsls	r2, r2, #28
1000c048:	2601      	movs	r6, #1
1000c04a:	409e      	lsls	r6, r3
1000c04c:	0f12      	lsrs	r2, r2, #28
1000c04e:	5d2b      	ldrb	r3, [r5, r4]
1000c050:	43b2      	bics	r2, r6
1000c052:	260f      	movs	r6, #15
1000c054:	43b3      	bics	r3, r6
1000c056:	4313      	orrs	r3, r2
1000c058:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000c05a:	0003      	movs	r3, r0
1000c05c:	3b1d      	subs	r3, #29
1000c05e:	2b02      	cmp	r3, #2
1000c060:	d829      	bhi.n	1000c0b6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000c062:	784b      	ldrb	r3, [r1, #1]
1000c064:	2b01      	cmp	r3, #1
1000c066:	d108      	bne.n	1000c07a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000c068:	4d47      	ldr	r5, [pc, #284]	; (1000c188 <gpio_pin_set_config+0x1a4>)
1000c06a:	7d2b      	ldrb	r3, [r5, #20]
1000c06c:	241f      	movs	r4, #31
1000c06e:	1a24      	subs	r4, r4, r0
1000c070:	2201      	movs	r2, #1
1000c072:	40a2      	lsls	r2, r4
1000c074:	4393      	bics	r3, r2
1000c076:	752b      	strb	r3, [r5, #20]
1000c078:	e008      	b.n	1000c08c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000c07a:	4c43      	ldr	r4, [pc, #268]	; (1000c188 <gpio_pin_set_config+0x1a4>)
1000c07c:	7d25      	ldrb	r5, [r4, #20]
1000c07e:	221f      	movs	r2, #31
1000c080:	1a12      	subs	r2, r2, r0
1000c082:	2301      	movs	r3, #1
1000c084:	4093      	lsls	r3, r2
1000c086:	432b      	orrs	r3, r5
1000c088:	b2db      	uxtb	r3, r3
1000c08a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000c08c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c08e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000c090:	2a00      	cmp	r2, #0
1000c092:	d075      	beq.n	1000c180 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000c094:	493c      	ldr	r1, [pc, #240]	; (1000c188 <gpio_pin_set_config+0x1a4>)
1000c096:	880c      	ldrh	r4, [r1, #0]
1000c098:	221f      	movs	r2, #31
1000c09a:	1a10      	subs	r0, r2, r0
1000c09c:	0080      	lsls	r0, r0, #2
1000c09e:	3301      	adds	r3, #1
1000c0a0:	4083      	lsls	r3, r0
1000c0a2:	4323      	orrs	r3, r4
1000c0a4:	b29b      	uxth	r3, r3
1000c0a6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000c0a8:	4a38      	ldr	r2, [pc, #224]	; (1000c18c <gpio_pin_set_config+0x1a8>)
1000c0aa:	7811      	ldrb	r1, [r2, #0]
1000c0ac:	2302      	movs	r3, #2
1000c0ae:	430b      	orrs	r3, r1
1000c0b0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c0b2:	2300      	movs	r3, #0
1000c0b4:	e064      	b.n	1000c180 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000c0b6:	780a      	ldrb	r2, [r1, #0]
1000c0b8:	2a00      	cmp	r2, #0
1000c0ba:	d140      	bne.n	1000c13e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000c0bc:	280f      	cmp	r0, #15
1000c0be:	d808      	bhi.n	1000c0d2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000c0c0:	2301      	movs	r3, #1
1000c0c2:	4083      	lsls	r3, r0
1000c0c4:	b29b      	uxth	r3, r3
1000c0c6:	4a32      	ldr	r2, [pc, #200]	; (1000c190 <gpio_pin_set_config+0x1ac>)
1000c0c8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c0ca:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000c0cc:	281f      	cmp	r0, #31
1000c0ce:	d857      	bhi.n	1000c180 <gpio_pin_set_config+0x19c>
1000c0d0:	e012      	b.n	1000c0f8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000c0d2:	281f      	cmp	r0, #31
1000c0d4:	d807      	bhi.n	1000c0e6 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c0d6:	220f      	movs	r2, #15
1000c0d8:	4002      	ands	r2, r0
1000c0da:	2301      	movs	r3, #1
1000c0dc:	4093      	lsls	r3, r2
1000c0de:	b29b      	uxth	r3, r3
1000c0e0:	4a2c      	ldr	r2, [pc, #176]	; (1000c194 <gpio_pin_set_config+0x1b0>)
1000c0e2:	8293      	strh	r3, [r2, #20]
1000c0e4:	e008      	b.n	1000c0f8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000c0e6:	230f      	movs	r3, #15
1000c0e8:	4018      	ands	r0, r3
1000c0ea:	3b0e      	subs	r3, #14
1000c0ec:	4083      	lsls	r3, r0
1000c0ee:	b29b      	uxth	r3, r3
1000c0f0:	4a29      	ldr	r2, [pc, #164]	; (1000c198 <gpio_pin_set_config+0x1b4>)
1000c0f2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c0f4:	2300      	movs	r3, #0
1000c0f6:	e043      	b.n	1000c180 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000c0f8:	784b      	ldrb	r3, [r1, #1]
1000c0fa:	2b01      	cmp	r3, #1
1000c0fc:	d00c      	beq.n	1000c118 <gpio_pin_set_config+0x134>
1000c0fe:	2b00      	cmp	r3, #0
1000c100:	d002      	beq.n	1000c108 <gpio_pin_set_config+0x124>
1000c102:	2b02      	cmp	r3, #2
1000c104:	d010      	beq.n	1000c128 <gpio_pin_set_config+0x144>
1000c106:	e03a      	b.n	1000c17e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000c108:	491e      	ldr	r1, [pc, #120]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000c10a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000c10c:	2301      	movs	r3, #1
1000c10e:	4083      	lsls	r3, r0
1000c110:	4313      	orrs	r3, r2
1000c112:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c114:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000c116:	e033      	b.n	1000c180 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c118:	491a      	ldr	r1, [pc, #104]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000c11a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000c11c:	2201      	movs	r2, #1
1000c11e:	4082      	lsls	r2, r0
1000c120:	4393      	bics	r3, r2
1000c122:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c124:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c126:	e02b      	b.n	1000c180 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000c128:	4b16      	ldr	r3, [pc, #88]	; (1000c184 <gpio_pin_set_config+0x1a0>)
1000c12a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000c12c:	2201      	movs	r2, #1
1000c12e:	4082      	lsls	r2, r0
1000c130:	4311      	orrs	r1, r2
1000c132:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000c134:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000c136:	4391      	bics	r1, r2
1000c138:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c13a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000c13c:	e020      	b.n	1000c180 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c13e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000c140:	2a01      	cmp	r2, #1
1000c142:	d11d      	bne.n	1000c180 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000c144:	280f      	cmp	r0, #15
1000c146:	d806      	bhi.n	1000c156 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000c148:	3301      	adds	r3, #1
1000c14a:	4083      	lsls	r3, r0
1000c14c:	b29b      	uxth	r3, r3
1000c14e:	4a10      	ldr	r2, [pc, #64]	; (1000c190 <gpio_pin_set_config+0x1ac>)
1000c150:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c152:	2300      	movs	r3, #0
1000c154:	e014      	b.n	1000c180 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000c156:	281f      	cmp	r0, #31
1000c158:	d808      	bhi.n	1000c16c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c15a:	230f      	movs	r3, #15
1000c15c:	4018      	ands	r0, r3
1000c15e:	3b0e      	subs	r3, #14
1000c160:	4083      	lsls	r3, r0
1000c162:	b29b      	uxth	r3, r3
1000c164:	4a0b      	ldr	r2, [pc, #44]	; (1000c194 <gpio_pin_set_config+0x1b0>)
1000c166:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c168:	2300      	movs	r3, #0
1000c16a:	e009      	b.n	1000c180 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000c16c:	230f      	movs	r3, #15
1000c16e:	4018      	ands	r0, r3
1000c170:	3b0e      	subs	r3, #14
1000c172:	4083      	lsls	r3, r0
1000c174:	b29b      	uxth	r3, r3
1000c176:	4a08      	ldr	r2, [pc, #32]	; (1000c198 <gpio_pin_set_config+0x1b4>)
1000c178:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000c17a:	2300      	movs	r3, #0
1000c17c:	e000      	b.n	1000c180 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000c17e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000c180:	0018      	movs	r0, r3
1000c182:	bd70      	pop	{r4, r5, r6, pc}
1000c184:	4000b000 	.word	0x4000b000
1000c188:	4000f000 	.word	0x4000f000
1000c18c:	4000e000 	.word	0x4000e000
1000c190:	40010000 	.word	0x40010000
1000c194:	40011000 	.word	0x40011000
1000c198:	40013000 	.word	0x40013000

1000c19c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c19c:	280f      	cmp	r0, #15
1000c19e:	d806      	bhi.n	1000c1ae <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000c1a0:	4b0f      	ldr	r3, [pc, #60]	; (1000c1e0 <gpio_pin_get_input_level+0x44>)
1000c1a2:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000c1a4:	2301      	movs	r3, #1
1000c1a6:	4083      	lsls	r3, r0
1000c1a8:	0018      	movs	r0, r3
1000c1aa:	4008      	ands	r0, r1
1000c1ac:	e014      	b.n	1000c1d8 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000c1ae:	281f      	cmp	r0, #31
1000c1b0:	d809      	bhi.n	1000c1c6 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000c1b2:	4b0c      	ldr	r3, [pc, #48]	; (1000c1e4 <gpio_pin_get_input_level+0x48>)
1000c1b4:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c1b6:	230f      	movs	r3, #15
1000c1b8:	4003      	ands	r3, r0
1000c1ba:	001a      	movs	r2, r3
1000c1bc:	2301      	movs	r3, #1
1000c1be:	4093      	lsls	r3, r2
1000c1c0:	0018      	movs	r0, r3
1000c1c2:	4008      	ands	r0, r1
1000c1c4:	e008      	b.n	1000c1d8 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000c1c6:	4b08      	ldr	r3, [pc, #32]	; (1000c1e8 <gpio_pin_get_input_level+0x4c>)
1000c1c8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000c1ca:	230f      	movs	r3, #15
1000c1cc:	4003      	ands	r3, r0
1000c1ce:	001a      	movs	r2, r3
1000c1d0:	2301      	movs	r3, #1
1000c1d2:	4093      	lsls	r3, r2
1000c1d4:	0018      	movs	r0, r3
1000c1d6:	4008      	ands	r0, r1
	}

	return regval;
1000c1d8:	1e43      	subs	r3, r0, #1
1000c1da:	4198      	sbcs	r0, r3
1000c1dc:	b2c0      	uxtb	r0, r0
}
1000c1de:	4770      	bx	lr
1000c1e0:	40010000 	.word	0x40010000
1000c1e4:	40011000 	.word	0x40011000
1000c1e8:	40013000 	.word	0x40013000

1000c1ec <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c1ec:	280f      	cmp	r0, #15
1000c1ee:	d806      	bhi.n	1000c1fe <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c1f0:	4b0f      	ldr	r3, [pc, #60]	; (1000c230 <gpio_pin_get_output_level+0x44>)
1000c1f2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c1f4:	2301      	movs	r3, #1
1000c1f6:	4083      	lsls	r3, r0
1000c1f8:	0018      	movs	r0, r3
1000c1fa:	4008      	ands	r0, r1
1000c1fc:	e014      	b.n	1000c228 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c1fe:	281f      	cmp	r0, #31
1000c200:	d809      	bhi.n	1000c216 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c202:	4b0c      	ldr	r3, [pc, #48]	; (1000c234 <gpio_pin_get_output_level+0x48>)
1000c204:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c206:	230f      	movs	r3, #15
1000c208:	4003      	ands	r3, r0
1000c20a:	001a      	movs	r2, r3
1000c20c:	2301      	movs	r3, #1
1000c20e:	4093      	lsls	r3, r2
1000c210:	0018      	movs	r0, r3
1000c212:	4008      	ands	r0, r1
1000c214:	e008      	b.n	1000c228 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c216:	4b08      	ldr	r3, [pc, #32]	; (1000c238 <gpio_pin_get_output_level+0x4c>)
1000c218:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c21a:	230f      	movs	r3, #15
1000c21c:	4003      	ands	r3, r0
1000c21e:	001a      	movs	r2, r3
1000c220:	2301      	movs	r3, #1
1000c222:	4093      	lsls	r3, r2
1000c224:	0018      	movs	r0, r3
1000c226:	4008      	ands	r0, r1
	}

	return regval;
1000c228:	1e43      	subs	r3, r0, #1
1000c22a:	4198      	sbcs	r0, r3
1000c22c:	b2c0      	uxtb	r0, r0
}
1000c22e:	4770      	bx	lr
1000c230:	40010000 	.word	0x40010000
1000c234:	40011000 	.word	0x40011000
1000c238:	40013000 	.word	0x40013000

1000c23c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c23c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c23e:	280f      	cmp	r0, #15
1000c240:	d810      	bhi.n	1000c264 <gpio_pin_set_output_level+0x28>
		if(level) {
1000c242:	2900      	cmp	r1, #0
1000c244:	d007      	beq.n	1000c256 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c246:	4a1d      	ldr	r2, [pc, #116]	; (1000c2bc <gpio_pin_set_output_level+0x80>)
1000c248:	8891      	ldrh	r1, [r2, #4]
1000c24a:	2301      	movs	r3, #1
1000c24c:	4083      	lsls	r3, r0
1000c24e:	430b      	orrs	r3, r1
1000c250:	b29b      	uxth	r3, r3
1000c252:	8093      	strh	r3, [r2, #4]
1000c254:	e031      	b.n	1000c2ba <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c256:	4919      	ldr	r1, [pc, #100]	; (1000c2bc <gpio_pin_set_output_level+0x80>)
1000c258:	888b      	ldrh	r3, [r1, #4]
1000c25a:	2201      	movs	r2, #1
1000c25c:	4082      	lsls	r2, r0
1000c25e:	4393      	bics	r3, r2
1000c260:	808b      	strh	r3, [r1, #4]
1000c262:	e02a      	b.n	1000c2ba <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c264:	281f      	cmp	r0, #31
1000c266:	d814      	bhi.n	1000c292 <gpio_pin_set_output_level+0x56>
		if(level) {
1000c268:	2900      	cmp	r1, #0
1000c26a:	d009      	beq.n	1000c280 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c26c:	4914      	ldr	r1, [pc, #80]	; (1000c2c0 <gpio_pin_set_output_level+0x84>)
1000c26e:	888c      	ldrh	r4, [r1, #4]
1000c270:	220f      	movs	r2, #15
1000c272:	4010      	ands	r0, r2
1000c274:	2301      	movs	r3, #1
1000c276:	4083      	lsls	r3, r0
1000c278:	4323      	orrs	r3, r4
1000c27a:	b29b      	uxth	r3, r3
1000c27c:	808b      	strh	r3, [r1, #4]
1000c27e:	e01c      	b.n	1000c2ba <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c280:	490f      	ldr	r1, [pc, #60]	; (1000c2c0 <gpio_pin_set_output_level+0x84>)
1000c282:	888b      	ldrh	r3, [r1, #4]
1000c284:	220f      	movs	r2, #15
1000c286:	4010      	ands	r0, r2
1000c288:	3a0e      	subs	r2, #14
1000c28a:	4082      	lsls	r2, r0
1000c28c:	4393      	bics	r3, r2
1000c28e:	808b      	strh	r3, [r1, #4]
1000c290:	e013      	b.n	1000c2ba <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c292:	2900      	cmp	r1, #0
1000c294:	d009      	beq.n	1000c2aa <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c296:	490b      	ldr	r1, [pc, #44]	; (1000c2c4 <gpio_pin_set_output_level+0x88>)
1000c298:	888c      	ldrh	r4, [r1, #4]
1000c29a:	220f      	movs	r2, #15
1000c29c:	4010      	ands	r0, r2
1000c29e:	2301      	movs	r3, #1
1000c2a0:	4083      	lsls	r3, r0
1000c2a2:	4323      	orrs	r3, r4
1000c2a4:	b29b      	uxth	r3, r3
1000c2a6:	808b      	strh	r3, [r1, #4]
1000c2a8:	e007      	b.n	1000c2ba <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c2aa:	4906      	ldr	r1, [pc, #24]	; (1000c2c4 <gpio_pin_set_output_level+0x88>)
1000c2ac:	888b      	ldrh	r3, [r1, #4]
1000c2ae:	220f      	movs	r2, #15
1000c2b0:	4010      	ands	r0, r2
1000c2b2:	3a0e      	subs	r2, #14
1000c2b4:	4082      	lsls	r2, r0
1000c2b6:	4393      	bics	r3, r2
1000c2b8:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c2ba:	bd10      	pop	{r4, pc}
1000c2bc:	40010000 	.word	0x40010000
1000c2c0:	40011000 	.word	0x40011000
1000c2c4:	40013000 	.word	0x40013000

1000c2c8 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c2c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c2ca:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c2cc:	23ff      	movs	r3, #255	; 0xff
1000c2ce:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c2d0:	2807      	cmp	r0, #7
1000c2d2:	d833      	bhi.n	1000c33c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c2d4:	4a4e      	ldr	r2, [pc, #312]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c2d6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c2d8:	3bf8      	subs	r3, #248	; 0xf8
1000c2da:	4003      	ands	r3, r0
1000c2dc:	009b      	lsls	r3, r3, #2
1000c2de:	2607      	movs	r6, #7
1000c2e0:	409e      	lsls	r6, r3
1000c2e2:	43b4      	bics	r4, r6
1000c2e4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c2e6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c2e8:	000e      	movs	r6, r1
1000c2ea:	409e      	lsls	r6, r3
1000c2ec:	0033      	movs	r3, r6
1000c2ee:	4323      	orrs	r3, r4
1000c2f0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c2f2:	2901      	cmp	r1, #1
1000c2f4:	d000      	beq.n	1000c2f8 <gpio_pinmux_cofiguration+0x30>
1000c2f6:	e08a      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c2f8:	2803      	cmp	r0, #3
1000c2fa:	d80f      	bhi.n	1000c31c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c2fc:	0011      	movs	r1, r2
1000c2fe:	22d0      	movs	r2, #208	; 0xd0
1000c300:	0052      	lsls	r2, r2, #1
1000c302:	588c      	ldr	r4, [r1, r2]
1000c304:	2303      	movs	r3, #3
1000c306:	4018      	ands	r0, r3
1000c308:	00c0      	lsls	r0, r0, #3
1000c30a:	333c      	adds	r3, #60	; 0x3c
1000c30c:	4083      	lsls	r3, r0
1000c30e:	439c      	bics	r4, r3
1000c310:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c312:	588b      	ldr	r3, [r1, r2]
1000c314:	4085      	lsls	r5, r0
1000c316:	431d      	orrs	r5, r3
1000c318:	508d      	str	r5, [r1, r2]
1000c31a:	e078      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c31c:	493c      	ldr	r1, [pc, #240]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c31e:	22d2      	movs	r2, #210	; 0xd2
1000c320:	0052      	lsls	r2, r2, #1
1000c322:	588c      	ldr	r4, [r1, r2]
1000c324:	2303      	movs	r3, #3
1000c326:	4018      	ands	r0, r3
1000c328:	00c0      	lsls	r0, r0, #3
1000c32a:	333c      	adds	r3, #60	; 0x3c
1000c32c:	4083      	lsls	r3, r0
1000c32e:	439c      	bics	r4, r3
1000c330:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c332:	588b      	ldr	r3, [r1, r2]
1000c334:	4085      	lsls	r5, r0
1000c336:	431d      	orrs	r5, r3
1000c338:	508d      	str	r5, [r1, r2]
1000c33a:	e068      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c33c:	280f      	cmp	r0, #15
1000c33e:	d832      	bhi.n	1000c3a6 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c340:	4a33      	ldr	r2, [pc, #204]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c342:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c344:	2307      	movs	r3, #7
1000c346:	4003      	ands	r3, r0
1000c348:	009b      	lsls	r3, r3, #2
1000c34a:	2607      	movs	r6, #7
1000c34c:	409e      	lsls	r6, r3
1000c34e:	43b4      	bics	r4, r6
1000c350:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c352:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c354:	000e      	movs	r6, r1
1000c356:	409e      	lsls	r6, r3
1000c358:	0033      	movs	r3, r6
1000c35a:	4323      	orrs	r3, r4
1000c35c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c35e:	2901      	cmp	r1, #1
1000c360:	d155      	bne.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c362:	280b      	cmp	r0, #11
1000c364:	d80f      	bhi.n	1000c386 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c366:	0011      	movs	r1, r2
1000c368:	22d4      	movs	r2, #212	; 0xd4
1000c36a:	0052      	lsls	r2, r2, #1
1000c36c:	588c      	ldr	r4, [r1, r2]
1000c36e:	2303      	movs	r3, #3
1000c370:	4018      	ands	r0, r3
1000c372:	00c0      	lsls	r0, r0, #3
1000c374:	333c      	adds	r3, #60	; 0x3c
1000c376:	4083      	lsls	r3, r0
1000c378:	439c      	bics	r4, r3
1000c37a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c37c:	588b      	ldr	r3, [r1, r2]
1000c37e:	4085      	lsls	r5, r0
1000c380:	431d      	orrs	r5, r3
1000c382:	508d      	str	r5, [r1, r2]
1000c384:	e043      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c386:	4922      	ldr	r1, [pc, #136]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c388:	22d6      	movs	r2, #214	; 0xd6
1000c38a:	0052      	lsls	r2, r2, #1
1000c38c:	588c      	ldr	r4, [r1, r2]
1000c38e:	2303      	movs	r3, #3
1000c390:	4018      	ands	r0, r3
1000c392:	00c0      	lsls	r0, r0, #3
1000c394:	333c      	adds	r3, #60	; 0x3c
1000c396:	4083      	lsls	r3, r0
1000c398:	439c      	bics	r4, r3
1000c39a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c39c:	588b      	ldr	r3, [r1, r2]
1000c39e:	4085      	lsls	r5, r0
1000c3a0:	431d      	orrs	r5, r3
1000c3a2:	508d      	str	r5, [r1, r2]
1000c3a4:	e033      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c3a6:	2817      	cmp	r0, #23
1000c3a8:	d831      	bhi.n	1000c40e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c3aa:	4a19      	ldr	r2, [pc, #100]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c3ac:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c3ae:	2307      	movs	r3, #7
1000c3b0:	4003      	ands	r3, r0
1000c3b2:	009b      	lsls	r3, r3, #2
1000c3b4:	2607      	movs	r6, #7
1000c3b6:	409e      	lsls	r6, r3
1000c3b8:	43b4      	bics	r4, r6
1000c3ba:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c3bc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c3be:	000e      	movs	r6, r1
1000c3c0:	409e      	lsls	r6, r3
1000c3c2:	0033      	movs	r3, r6
1000c3c4:	4323      	orrs	r3, r4
1000c3c6:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c3c8:	2901      	cmp	r1, #1
1000c3ca:	d120      	bne.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c3cc:	2813      	cmp	r0, #19
1000c3ce:	d80f      	bhi.n	1000c3f0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c3d0:	0011      	movs	r1, r2
1000c3d2:	22d8      	movs	r2, #216	; 0xd8
1000c3d4:	0052      	lsls	r2, r2, #1
1000c3d6:	588c      	ldr	r4, [r1, r2]
1000c3d8:	2303      	movs	r3, #3
1000c3da:	4018      	ands	r0, r3
1000c3dc:	00c0      	lsls	r0, r0, #3
1000c3de:	333c      	adds	r3, #60	; 0x3c
1000c3e0:	4083      	lsls	r3, r0
1000c3e2:	439c      	bics	r4, r3
1000c3e4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c3e6:	588b      	ldr	r3, [r1, r2]
1000c3e8:	4085      	lsls	r5, r0
1000c3ea:	431d      	orrs	r5, r3
1000c3ec:	508d      	str	r5, [r1, r2]
1000c3ee:	e00e      	b.n	1000c40e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c3f0:	4a07      	ldr	r2, [pc, #28]	; (1000c410 <gpio_pinmux_cofiguration+0x148>)
1000c3f2:	23da      	movs	r3, #218	; 0xda
1000c3f4:	005b      	lsls	r3, r3, #1
1000c3f6:	58d1      	ldr	r1, [r2, r3]
1000c3f8:	2403      	movs	r4, #3
1000c3fa:	4020      	ands	r0, r4
1000c3fc:	00c0      	lsls	r0, r0, #3
1000c3fe:	343c      	adds	r4, #60	; 0x3c
1000c400:	4084      	lsls	r4, r0
1000c402:	43a1      	bics	r1, r4
1000c404:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c406:	58d1      	ldr	r1, [r2, r3]
1000c408:	4085      	lsls	r5, r0
1000c40a:	430d      	orrs	r5, r1
1000c40c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c40e:	bd70      	pop	{r4, r5, r6, pc}
1000c410:	4000b000 	.word	0x4000b000

1000c414 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c414:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c416:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c418:	280f      	cmp	r0, #15
1000c41a:	d904      	bls.n	1000c426 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c41c:	241f      	movs	r4, #31
1000c41e:	4284      	cmp	r4, r0
1000c420:	415b      	adcs	r3, r3
1000c422:	3c1d      	subs	r4, #29
1000c424:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c426:	2a01      	cmp	r2, #1
1000c428:	d016      	beq.n	1000c458 <gpio_register_callback+0x44>
1000c42a:	2a00      	cmp	r2, #0
1000c42c:	d004      	beq.n	1000c438 <gpio_register_callback+0x24>
1000c42e:	2a02      	cmp	r2, #2
1000c430:	d022      	beq.n	1000c478 <gpio_register_callback+0x64>
1000c432:	2a03      	cmp	r2, #3
1000c434:	d030      	beq.n	1000c498 <gpio_register_callback+0x84>
1000c436:	e03e      	b.n	1000c4b6 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c438:	4e29      	ldr	r6, [pc, #164]	; (1000c4e0 <gpio_register_callback+0xcc>)
1000c43a:	00dc      	lsls	r4, r3, #3
1000c43c:	18e2      	adds	r2, r4, r3
1000c43e:	00d2      	lsls	r2, r2, #3
1000c440:	5997      	ldr	r7, [r2, r6]
1000c442:	250f      	movs	r5, #15
1000c444:	4005      	ands	r5, r0
1000c446:	2201      	movs	r2, #1
1000c448:	40aa      	lsls	r2, r5
1000c44a:	b292      	uxth	r2, r2
1000c44c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c44e:	18e4      	adds	r4, r4, r3
1000c450:	00e4      	lsls	r4, r4, #3
1000c452:	59a4      	ldr	r4, [r4, r6]
1000c454:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c456:	e02e      	b.n	1000c4b6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c458:	4e21      	ldr	r6, [pc, #132]	; (1000c4e0 <gpio_register_callback+0xcc>)
1000c45a:	00dc      	lsls	r4, r3, #3
1000c45c:	18e2      	adds	r2, r4, r3
1000c45e:	00d2      	lsls	r2, r2, #3
1000c460:	5997      	ldr	r7, [r2, r6]
1000c462:	250f      	movs	r5, #15
1000c464:	4005      	ands	r5, r0
1000c466:	2201      	movs	r2, #1
1000c468:	40aa      	lsls	r2, r5
1000c46a:	b292      	uxth	r2, r2
1000c46c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c46e:	18e4      	adds	r4, r4, r3
1000c470:	00e4      	lsls	r4, r4, #3
1000c472:	59a4      	ldr	r4, [r4, r6]
1000c474:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c476:	e01e      	b.n	1000c4b6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c478:	4e19      	ldr	r6, [pc, #100]	; (1000c4e0 <gpio_register_callback+0xcc>)
1000c47a:	00dc      	lsls	r4, r3, #3
1000c47c:	18e2      	adds	r2, r4, r3
1000c47e:	00d2      	lsls	r2, r2, #3
1000c480:	5997      	ldr	r7, [r2, r6]
1000c482:	250f      	movs	r5, #15
1000c484:	4005      	ands	r5, r0
1000c486:	2201      	movs	r2, #1
1000c488:	40aa      	lsls	r2, r5
1000c48a:	b292      	uxth	r2, r2
1000c48c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c48e:	18e4      	adds	r4, r4, r3
1000c490:	00e4      	lsls	r4, r4, #3
1000c492:	59a4      	ldr	r4, [r4, r6]
1000c494:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c496:	e00e      	b.n	1000c4b6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c498:	4e11      	ldr	r6, [pc, #68]	; (1000c4e0 <gpio_register_callback+0xcc>)
1000c49a:	00dc      	lsls	r4, r3, #3
1000c49c:	18e2      	adds	r2, r4, r3
1000c49e:	00d2      	lsls	r2, r2, #3
1000c4a0:	5997      	ldr	r7, [r2, r6]
1000c4a2:	250f      	movs	r5, #15
1000c4a4:	4005      	ands	r5, r0
1000c4a6:	2201      	movs	r2, #1
1000c4a8:	40aa      	lsls	r2, r5
1000c4aa:	b292      	uxth	r2, r2
1000c4ac:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c4ae:	18e4      	adds	r4, r4, r3
1000c4b0:	00e4      	lsls	r4, r4, #3
1000c4b2:	59a4      	ldr	r4, [r4, r6]
1000c4b4:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c4b6:	220f      	movs	r2, #15
1000c4b8:	4010      	ands	r0, r2
1000c4ba:	4c09      	ldr	r4, [pc, #36]	; (1000c4e0 <gpio_register_callback+0xcc>)
1000c4bc:	00dd      	lsls	r5, r3, #3
1000c4be:	18ea      	adds	r2, r5, r3
1000c4c0:	0052      	lsls	r2, r2, #1
1000c4c2:	1812      	adds	r2, r2, r0
1000c4c4:	0092      	lsls	r2, r2, #2
1000c4c6:	18a2      	adds	r2, r4, r2
1000c4c8:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c4ca:	18ea      	adds	r2, r5, r3
1000c4cc:	00d2      	lsls	r2, r2, #3
1000c4ce:	18a2      	adds	r2, r4, r2
1000c4d0:	3244      	adds	r2, #68	; 0x44
1000c4d2:	2101      	movs	r1, #1
1000c4d4:	4081      	lsls	r1, r0
1000c4d6:	8813      	ldrh	r3, [r2, #0]
1000c4d8:	430b      	orrs	r3, r1
1000c4da:	8013      	strh	r3, [r2, #0]
}
1000c4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c4de:	46c0      	nop			; (mov r8, r8)
1000c4e0:	1001a194 	.word	0x1001a194

1000c4e4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c4e4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c4e6:	280f      	cmp	r0, #15
1000c4e8:	d805      	bhi.n	1000c4f6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c4ea:	2280      	movs	r2, #128	; 0x80
1000c4ec:	0412      	lsls	r2, r2, #16
1000c4ee:	4b12      	ldr	r3, [pc, #72]	; (1000c538 <gpio_enable_callback+0x54>)
1000c4f0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c4f2:	2200      	movs	r2, #0
1000c4f4:	e00c      	b.n	1000c510 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c4f6:	281f      	cmp	r0, #31
1000c4f8:	d805      	bhi.n	1000c506 <gpio_enable_callback+0x22>
1000c4fa:	2280      	movs	r2, #128	; 0x80
1000c4fc:	0452      	lsls	r2, r2, #17
1000c4fe:	4b0e      	ldr	r3, [pc, #56]	; (1000c538 <gpio_enable_callback+0x54>)
1000c500:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c502:	2201      	movs	r2, #1
1000c504:	e004      	b.n	1000c510 <gpio_enable_callback+0x2c>
1000c506:	2280      	movs	r2, #128	; 0x80
1000c508:	0492      	lsls	r2, r2, #18
1000c50a:	4b0b      	ldr	r3, [pc, #44]	; (1000c538 <gpio_enable_callback+0x54>)
1000c50c:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c50e:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c510:	230f      	movs	r3, #15
1000c512:	4018      	ands	r0, r3
1000c514:	2101      	movs	r1, #1
1000c516:	4081      	lsls	r1, r0
1000c518:	4c08      	ldr	r4, [pc, #32]	; (1000c53c <gpio_enable_callback+0x58>)
1000c51a:	00d5      	lsls	r5, r2, #3
1000c51c:	18ab      	adds	r3, r5, r2
1000c51e:	00db      	lsls	r3, r3, #3
1000c520:	18e3      	adds	r3, r4, r3
1000c522:	3346      	adds	r3, #70	; 0x46
1000c524:	8818      	ldrh	r0, [r3, #0]
1000c526:	4308      	orrs	r0, r1
1000c528:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c52a:	18aa      	adds	r2, r5, r2
1000c52c:	00d2      	lsls	r2, r2, #3
1000c52e:	5913      	ldr	r3, [r2, r4]
1000c530:	b289      	uxth	r1, r1
1000c532:	8419      	strh	r1, [r3, #32]
}
1000c534:	bd30      	pop	{r4, r5, pc}
1000c536:	46c0      	nop			; (mov r8, r8)
1000c538:	e000e100 	.word	0xe000e100
1000c53c:	1001a194 	.word	0x1001a194

1000c540 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c540:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c542:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c544:	280f      	cmp	r0, #15
1000c546:	d904      	bls.n	1000c552 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c548:	221f      	movs	r2, #31
1000c54a:	4282      	cmp	r2, r0
1000c54c:	415b      	adcs	r3, r3
1000c54e:	3a1d      	subs	r2, #29
1000c550:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c552:	220f      	movs	r2, #15
1000c554:	4010      	ands	r0, r2
1000c556:	2101      	movs	r1, #1
1000c558:	4081      	lsls	r1, r0
1000c55a:	4c07      	ldr	r4, [pc, #28]	; (1000c578 <gpio_disable_callback+0x38>)
1000c55c:	00dd      	lsls	r5, r3, #3
1000c55e:	18ea      	adds	r2, r5, r3
1000c560:	00d2      	lsls	r2, r2, #3
1000c562:	18a2      	adds	r2, r4, r2
1000c564:	3246      	adds	r2, #70	; 0x46
1000c566:	8810      	ldrh	r0, [r2, #0]
1000c568:	4388      	bics	r0, r1
1000c56a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c56c:	18eb      	adds	r3, r5, r3
1000c56e:	00db      	lsls	r3, r3, #3
1000c570:	591b      	ldr	r3, [r3, r4]
1000c572:	b289      	uxth	r1, r1
1000c574:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c576:	bd30      	pop	{r4, r5, pc}
1000c578:	1001a194 	.word	0x1001a194

1000c57c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c57c:	b510      	push	{r4, lr}
1000c57e:	4a11      	ldr	r2, [pc, #68]	; (1000c5c4 <gpio_init+0x48>)
1000c580:	0010      	movs	r0, r2
1000c582:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c584:	2100      	movs	r1, #0
1000c586:	e007      	b.n	1000c598 <gpio_init+0x1c>
1000c588:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c58a:	4293      	cmp	r3, r2
1000c58c:	d1fc      	bne.n	1000c588 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c58e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c590:	8011      	strh	r1, [r2, #0]
1000c592:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c594:	4282      	cmp	r2, r0
1000c596:	d002      	beq.n	1000c59e <gpio_init+0x22>
1000c598:	0013      	movs	r3, r2
1000c59a:	3b40      	subs	r3, #64	; 0x40
1000c59c:	e7f4      	b.n	1000c588 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c59e:	4b0a      	ldr	r3, [pc, #40]	; (1000c5c8 <gpio_init+0x4c>)
1000c5a0:	4a0a      	ldr	r2, [pc, #40]	; (1000c5cc <gpio_init+0x50>)
1000c5a2:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c5a4:	4a0a      	ldr	r2, [pc, #40]	; (1000c5d0 <gpio_init+0x54>)
1000c5a6:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c5a8:	490a      	ldr	r1, [pc, #40]	; (1000c5d4 <gpio_init+0x58>)
1000c5aa:	2290      	movs	r2, #144	; 0x90
1000c5ac:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c5ae:	490a      	ldr	r1, [pc, #40]	; (1000c5d8 <gpio_init+0x5c>)
1000c5b0:	2027      	movs	r0, #39	; 0x27
1000c5b2:	4c0a      	ldr	r4, [pc, #40]	; (1000c5dc <gpio_init+0x60>)
1000c5b4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c5b6:	490a      	ldr	r1, [pc, #40]	; (1000c5e0 <gpio_init+0x64>)
1000c5b8:	2028      	movs	r0, #40	; 0x28
1000c5ba:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c5bc:	4909      	ldr	r1, [pc, #36]	; (1000c5e4 <gpio_init+0x68>)
1000c5be:	2029      	movs	r0, #41	; 0x29
1000c5c0:	47a0      	blx	r4
}
1000c5c2:	bd10      	pop	{r4, pc}
1000c5c4:	1001a1d8 	.word	0x1001a1d8
1000c5c8:	1001a194 	.word	0x1001a194
1000c5cc:	40010000 	.word	0x40010000
1000c5d0:	40011000 	.word	0x40011000
1000c5d4:	40013000 	.word	0x40013000
1000c5d8:	1000be85 	.word	0x1000be85
1000c5dc:	1000d1a9 	.word	0x1000d1a9
1000c5e0:	1000bee9 	.word	0x1000bee9
1000c5e4:	1000bf59 	.word	0x1000bf59

1000c5e8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c5e8:	2801      	cmp	r0, #1
1000c5ea:	d00d      	beq.n	1000c608 <system_clock_config+0x20>
1000c5ec:	2800      	cmp	r0, #0
1000c5ee:	d002      	beq.n	1000c5f6 <system_clock_config+0xe>
1000c5f0:	2802      	cmp	r0, #2
1000c5f2:	d01c      	beq.n	1000c62e <system_clock_config+0x46>
1000c5f4:	e02e      	b.n	1000c654 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c5f6:	4a18      	ldr	r2, [pc, #96]	; (1000c658 <system_clock_config+0x70>)
1000c5f8:	6990      	ldr	r0, [r2, #24]
1000c5fa:	230c      	movs	r3, #12
1000c5fc:	4303      	orrs	r3, r0
1000c5fe:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c600:	4a16      	ldr	r2, [pc, #88]	; (1000c65c <system_clock_config+0x74>)
1000c602:	4b17      	ldr	r3, [pc, #92]	; (1000c660 <system_clock_config+0x78>)
1000c604:	601a      	str	r2, [r3, #0]
			break;
1000c606:	e01a      	b.n	1000c63e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c608:	4b13      	ldr	r3, [pc, #76]	; (1000c658 <system_clock_config+0x70>)
1000c60a:	6998      	ldr	r0, [r3, #24]
1000c60c:	2208      	movs	r2, #8
1000c60e:	4302      	orrs	r2, r0
1000c610:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c612:	699a      	ldr	r2, [r3, #24]
1000c614:	2004      	movs	r0, #4
1000c616:	4382      	bics	r2, r0
1000c618:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c61a:	4a12      	ldr	r2, [pc, #72]	; (1000c664 <system_clock_config+0x7c>)
1000c61c:	6853      	ldr	r3, [r2, #4]
1000c61e:	2080      	movs	r0, #128	; 0x80
1000c620:	0300      	lsls	r0, r0, #12
1000c622:	4303      	orrs	r3, r0
1000c624:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c626:	4a10      	ldr	r2, [pc, #64]	; (1000c668 <system_clock_config+0x80>)
1000c628:	4b0d      	ldr	r3, [pc, #52]	; (1000c660 <system_clock_config+0x78>)
1000c62a:	601a      	str	r2, [r3, #0]
			break;
1000c62c:	e007      	b.n	1000c63e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c62e:	4a0a      	ldr	r2, [pc, #40]	; (1000c658 <system_clock_config+0x70>)
1000c630:	6993      	ldr	r3, [r2, #24]
1000c632:	200c      	movs	r0, #12
1000c634:	4383      	bics	r3, r0
1000c636:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c638:	4a08      	ldr	r2, [pc, #32]	; (1000c65c <system_clock_config+0x74>)
1000c63a:	4b09      	ldr	r3, [pc, #36]	; (1000c660 <system_clock_config+0x78>)
1000c63c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c63e:	4b06      	ldr	r3, [pc, #24]	; (1000c658 <system_clock_config+0x70>)
1000c640:	699a      	ldr	r2, [r3, #24]
1000c642:	2003      	movs	r0, #3
1000c644:	4382      	bics	r2, r0
1000c646:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c648:	699a      	ldr	r2, [r3, #24]
1000c64a:	4001      	ands	r1, r0
1000c64c:	4311      	orrs	r1, r2
1000c64e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c650:	2000      	movs	r0, #0
1000c652:	e000      	b.n	1000c656 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c654:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c656:	4770      	bx	lr
1000c658:	4000b000 	.word	0x4000b000
1000c65c:	018cba80 	.word	0x018cba80
1000c660:	1001a26c 	.word	0x1001a26c
1000c664:	4000f000 	.word	0x4000f000
1000c668:	001e8480 	.word	0x001e8480

1000c66c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c66c:	4b01      	ldr	r3, [pc, #4]	; (1000c674 <system_clock_get_value+0x8>)
1000c66e:	6818      	ldr	r0, [r3, #0]
}
1000c670:	4770      	bx	lr
1000c672:	46c0      	nop			; (mov r8, r8)
1000c674:	1001a26c 	.word	0x1001a26c

1000c678 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c678:	b500      	push	{lr}
	switch (peripheral) {
1000c67a:	2835      	cmp	r0, #53	; 0x35
1000c67c:	d900      	bls.n	1000c680 <system_clock_peripheral_enable+0x8>
1000c67e:	e1a2      	b.n	1000c9c6 <system_clock_peripheral_enable+0x34e>
1000c680:	0080      	lsls	r0, r0, #2
1000c682:	4bd2      	ldr	r3, [pc, #840]	; (1000c9cc <system_clock_peripheral_enable+0x354>)
1000c684:	581b      	ldr	r3, [r3, r0]
1000c686:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c688:	4ad1      	ldr	r2, [pc, #836]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c68a:	68d1      	ldr	r1, [r2, #12]
1000c68c:	2302      	movs	r3, #2
1000c68e:	430b      	orrs	r3, r1
1000c690:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c692:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c694:	e198      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c696:	4ace      	ldr	r2, [pc, #824]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c698:	68d1      	ldr	r1, [r2, #12]
1000c69a:	2304      	movs	r3, #4
1000c69c:	430b      	orrs	r3, r1
1000c69e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c6a2:	e191      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6a4:	4aca      	ldr	r2, [pc, #808]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6a6:	68d1      	ldr	r1, [r2, #12]
1000c6a8:	2308      	movs	r3, #8
1000c6aa:	430b      	orrs	r3, r1
1000c6ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c6b0:	e18a      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6b2:	4ac7      	ldr	r2, [pc, #796]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6b4:	68d1      	ldr	r1, [r2, #12]
1000c6b6:	2310      	movs	r3, #16
1000c6b8:	430b      	orrs	r3, r1
1000c6ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c6be:	e183      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6c0:	4ac3      	ldr	r2, [pc, #780]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6c2:	68d1      	ldr	r1, [r2, #12]
1000c6c4:	2320      	movs	r3, #32
1000c6c6:	430b      	orrs	r3, r1
1000c6c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c6cc:	e17c      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6ce:	4ac0      	ldr	r2, [pc, #768]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6d0:	68d1      	ldr	r1, [r2, #12]
1000c6d2:	2380      	movs	r3, #128	; 0x80
1000c6d4:	430b      	orrs	r3, r1
1000c6d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c6da:	e175      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6dc:	4abc      	ldr	r2, [pc, #752]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6de:	68d3      	ldr	r3, [r2, #12]
1000c6e0:	2180      	movs	r1, #128	; 0x80
1000c6e2:	0049      	lsls	r1, r1, #1
1000c6e4:	430b      	orrs	r3, r1
1000c6e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c6ea:	e16d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6ec:	4ab8      	ldr	r2, [pc, #736]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6ee:	68d3      	ldr	r3, [r2, #12]
1000c6f0:	2180      	movs	r1, #128	; 0x80
1000c6f2:	0109      	lsls	r1, r1, #4
1000c6f4:	430b      	orrs	r3, r1
1000c6f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c6fa:	e165      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6fc:	4ab4      	ldr	r2, [pc, #720]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c6fe:	68d3      	ldr	r3, [r2, #12]
1000c700:	2180      	movs	r1, #128	; 0x80
1000c702:	0149      	lsls	r1, r1, #5
1000c704:	430b      	orrs	r3, r1
1000c706:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c70a:	e15d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c70c:	4ab0      	ldr	r2, [pc, #704]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c70e:	68d3      	ldr	r3, [r2, #12]
1000c710:	2180      	movs	r1, #128	; 0x80
1000c712:	0189      	lsls	r1, r1, #6
1000c714:	430b      	orrs	r3, r1
1000c716:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c718:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c71a:	e155      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c71c:	4aac      	ldr	r2, [pc, #688]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c71e:	68d3      	ldr	r3, [r2, #12]
1000c720:	2180      	movs	r1, #128	; 0x80
1000c722:	01c9      	lsls	r1, r1, #7
1000c724:	430b      	orrs	r3, r1
1000c726:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c72a:	e14d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c72c:	4aa8      	ldr	r2, [pc, #672]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c72e:	68d3      	ldr	r3, [r2, #12]
1000c730:	2180      	movs	r1, #128	; 0x80
1000c732:	0209      	lsls	r1, r1, #8
1000c734:	430b      	orrs	r3, r1
1000c736:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c738:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c73a:	e145      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c73c:	4aa4      	ldr	r2, [pc, #656]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c73e:	68d3      	ldr	r3, [r2, #12]
1000c740:	2180      	movs	r1, #128	; 0x80
1000c742:	0249      	lsls	r1, r1, #9
1000c744:	430b      	orrs	r3, r1
1000c746:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c748:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c74a:	e13d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c74c:	4aa0      	ldr	r2, [pc, #640]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c74e:	68d3      	ldr	r3, [r2, #12]
1000c750:	2180      	movs	r1, #128	; 0x80
1000c752:	0289      	lsls	r1, r1, #10
1000c754:	430b      	orrs	r3, r1
1000c756:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c758:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c75a:	e135      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c75c:	4a9c      	ldr	r2, [pc, #624]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c75e:	68d3      	ldr	r3, [r2, #12]
1000c760:	2180      	movs	r1, #128	; 0x80
1000c762:	02c9      	lsls	r1, r1, #11
1000c764:	430b      	orrs	r3, r1
1000c766:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c768:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c76a:	e12d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c76c:	4a98      	ldr	r2, [pc, #608]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c76e:	68d3      	ldr	r3, [r2, #12]
1000c770:	2180      	movs	r1, #128	; 0x80
1000c772:	0309      	lsls	r1, r1, #12
1000c774:	430b      	orrs	r3, r1
1000c776:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c77a:	e125      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c77c:	4a94      	ldr	r2, [pc, #592]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c77e:	68d3      	ldr	r3, [r2, #12]
1000c780:	2180      	movs	r1, #128	; 0x80
1000c782:	0349      	lsls	r1, r1, #13
1000c784:	430b      	orrs	r3, r1
1000c786:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c78a:	e11d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c78c:	4a90      	ldr	r2, [pc, #576]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c78e:	68d3      	ldr	r3, [r2, #12]
1000c790:	2180      	movs	r1, #128	; 0x80
1000c792:	0389      	lsls	r1, r1, #14
1000c794:	430b      	orrs	r3, r1
1000c796:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c79a:	e115      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c79c:	4a8c      	ldr	r2, [pc, #560]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c79e:	68d3      	ldr	r3, [r2, #12]
1000c7a0:	2180      	movs	r1, #128	; 0x80
1000c7a2:	03c9      	lsls	r1, r1, #15
1000c7a4:	430b      	orrs	r3, r1
1000c7a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c7aa:	e10d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7ac:	4a88      	ldr	r2, [pc, #544]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7ae:	68d3      	ldr	r3, [r2, #12]
1000c7b0:	2180      	movs	r1, #128	; 0x80
1000c7b2:	0409      	lsls	r1, r1, #16
1000c7b4:	430b      	orrs	r3, r1
1000c7b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c7ba:	e105      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7bc:	4a84      	ldr	r2, [pc, #528]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7be:	68d3      	ldr	r3, [r2, #12]
1000c7c0:	2180      	movs	r1, #128	; 0x80
1000c7c2:	0449      	lsls	r1, r1, #17
1000c7c4:	430b      	orrs	r3, r1
1000c7c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c7ca:	e0fd      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7cc:	4a80      	ldr	r2, [pc, #512]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7ce:	68d3      	ldr	r3, [r2, #12]
1000c7d0:	2180      	movs	r1, #128	; 0x80
1000c7d2:	0489      	lsls	r1, r1, #18
1000c7d4:	430b      	orrs	r3, r1
1000c7d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c7da:	e0f5      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7dc:	4a7c      	ldr	r2, [pc, #496]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7de:	68d3      	ldr	r3, [r2, #12]
1000c7e0:	2180      	movs	r1, #128	; 0x80
1000c7e2:	04c9      	lsls	r1, r1, #19
1000c7e4:	430b      	orrs	r3, r1
1000c7e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c7ea:	e0ed      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7ec:	4a78      	ldr	r2, [pc, #480]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7ee:	68d3      	ldr	r3, [r2, #12]
1000c7f0:	2180      	movs	r1, #128	; 0x80
1000c7f2:	0509      	lsls	r1, r1, #20
1000c7f4:	430b      	orrs	r3, r1
1000c7f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c7fa:	e0e5      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c7fc:	4a74      	ldr	r2, [pc, #464]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c7fe:	68d3      	ldr	r3, [r2, #12]
1000c800:	2180      	movs	r1, #128	; 0x80
1000c802:	0549      	lsls	r1, r1, #21
1000c804:	430b      	orrs	r3, r1
1000c806:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c80a:	e0dd      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c80c:	4a70      	ldr	r2, [pc, #448]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c80e:	68d3      	ldr	r3, [r2, #12]
1000c810:	2180      	movs	r1, #128	; 0x80
1000c812:	0589      	lsls	r1, r1, #22
1000c814:	430b      	orrs	r3, r1
1000c816:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c81a:	e0d5      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c81c:	4a6c      	ldr	r2, [pc, #432]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c81e:	68d3      	ldr	r3, [r2, #12]
1000c820:	2180      	movs	r1, #128	; 0x80
1000c822:	05c9      	lsls	r1, r1, #23
1000c824:	430b      	orrs	r3, r1
1000c826:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c82a:	e0cd      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c82c:	4a68      	ldr	r2, [pc, #416]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c82e:	6911      	ldr	r1, [r2, #16]
1000c830:	2301      	movs	r3, #1
1000c832:	430b      	orrs	r3, r1
1000c834:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c836:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c838:	e0c6      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c83a:	4a65      	ldr	r2, [pc, #404]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c83c:	6911      	ldr	r1, [r2, #16]
1000c83e:	2302      	movs	r3, #2
1000c840:	430b      	orrs	r3, r1
1000c842:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c844:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c846:	e0bf      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c848:	4a61      	ldr	r2, [pc, #388]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c84a:	6911      	ldr	r1, [r2, #16]
1000c84c:	2304      	movs	r3, #4
1000c84e:	430b      	orrs	r3, r1
1000c850:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c852:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c854:	e0b8      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c856:	4a5e      	ldr	r2, [pc, #376]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c858:	6911      	ldr	r1, [r2, #16]
1000c85a:	2308      	movs	r3, #8
1000c85c:	430b      	orrs	r3, r1
1000c85e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c860:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c862:	e0b1      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c864:	4a5a      	ldr	r2, [pc, #360]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c866:	6911      	ldr	r1, [r2, #16]
1000c868:	2310      	movs	r3, #16
1000c86a:	430b      	orrs	r3, r1
1000c86c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c86e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c870:	e0aa      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c872:	4a57      	ldr	r2, [pc, #348]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c874:	6911      	ldr	r1, [r2, #16]
1000c876:	2320      	movs	r3, #32
1000c878:	430b      	orrs	r3, r1
1000c87a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c87c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c87e:	e0a3      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c880:	4a53      	ldr	r2, [pc, #332]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c882:	6911      	ldr	r1, [r2, #16]
1000c884:	2340      	movs	r3, #64	; 0x40
1000c886:	430b      	orrs	r3, r1
1000c888:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c88a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c88c:	e09c      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c88e:	4a50      	ldr	r2, [pc, #320]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c890:	6911      	ldr	r1, [r2, #16]
1000c892:	2380      	movs	r3, #128	; 0x80
1000c894:	430b      	orrs	r3, r1
1000c896:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c89a:	e095      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c89c:	4a4c      	ldr	r2, [pc, #304]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c89e:	6913      	ldr	r3, [r2, #16]
1000c8a0:	2180      	movs	r1, #128	; 0x80
1000c8a2:	0049      	lsls	r1, r1, #1
1000c8a4:	430b      	orrs	r3, r1
1000c8a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c8aa:	e08d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8ac:	4a48      	ldr	r2, [pc, #288]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8ae:	6913      	ldr	r3, [r2, #16]
1000c8b0:	2180      	movs	r1, #128	; 0x80
1000c8b2:	0089      	lsls	r1, r1, #2
1000c8b4:	430b      	orrs	r3, r1
1000c8b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c8ba:	e085      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8bc:	4a44      	ldr	r2, [pc, #272]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8be:	6913      	ldr	r3, [r2, #16]
1000c8c0:	2180      	movs	r1, #128	; 0x80
1000c8c2:	00c9      	lsls	r1, r1, #3
1000c8c4:	430b      	orrs	r3, r1
1000c8c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c8ca:	e07d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8cc:	4a40      	ldr	r2, [pc, #256]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8ce:	6913      	ldr	r3, [r2, #16]
1000c8d0:	2180      	movs	r1, #128	; 0x80
1000c8d2:	0109      	lsls	r1, r1, #4
1000c8d4:	430b      	orrs	r3, r1
1000c8d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c8da:	e075      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8dc:	4a3c      	ldr	r2, [pc, #240]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8de:	6913      	ldr	r3, [r2, #16]
1000c8e0:	2180      	movs	r1, #128	; 0x80
1000c8e2:	0149      	lsls	r1, r1, #5
1000c8e4:	430b      	orrs	r3, r1
1000c8e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c8ea:	e06d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8ec:	4a38      	ldr	r2, [pc, #224]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8ee:	6913      	ldr	r3, [r2, #16]
1000c8f0:	2180      	movs	r1, #128	; 0x80
1000c8f2:	0189      	lsls	r1, r1, #6
1000c8f4:	430b      	orrs	r3, r1
1000c8f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c8fa:	e065      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c8fc:	4a34      	ldr	r2, [pc, #208]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c8fe:	6913      	ldr	r3, [r2, #16]
1000c900:	2180      	movs	r1, #128	; 0x80
1000c902:	01c9      	lsls	r1, r1, #7
1000c904:	430b      	orrs	r3, r1
1000c906:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c908:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c90a:	e05d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c90c:	4a30      	ldr	r2, [pc, #192]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c90e:	6913      	ldr	r3, [r2, #16]
1000c910:	2180      	movs	r1, #128	; 0x80
1000c912:	0209      	lsls	r1, r1, #8
1000c914:	430b      	orrs	r3, r1
1000c916:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c91a:	e055      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c91c:	4a2c      	ldr	r2, [pc, #176]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c91e:	6913      	ldr	r3, [r2, #16]
1000c920:	2180      	movs	r1, #128	; 0x80
1000c922:	0249      	lsls	r1, r1, #9
1000c924:	430b      	orrs	r3, r1
1000c926:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c928:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c92a:	e04d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c92c:	4a28      	ldr	r2, [pc, #160]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c92e:	6913      	ldr	r3, [r2, #16]
1000c930:	2180      	movs	r1, #128	; 0x80
1000c932:	0289      	lsls	r1, r1, #10
1000c934:	430b      	orrs	r3, r1
1000c936:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c93a:	e045      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c93c:	4a24      	ldr	r2, [pc, #144]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c93e:	6913      	ldr	r3, [r2, #16]
1000c940:	2180      	movs	r1, #128	; 0x80
1000c942:	02c9      	lsls	r1, r1, #11
1000c944:	430b      	orrs	r3, r1
1000c946:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c948:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c94a:	e03d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c94c:	4a20      	ldr	r2, [pc, #128]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c94e:	6913      	ldr	r3, [r2, #16]
1000c950:	2180      	movs	r1, #128	; 0x80
1000c952:	0309      	lsls	r1, r1, #12
1000c954:	430b      	orrs	r3, r1
1000c956:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c958:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c95a:	e035      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c95c:	4a1c      	ldr	r2, [pc, #112]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c95e:	6913      	ldr	r3, [r2, #16]
1000c960:	2180      	movs	r1, #128	; 0x80
1000c962:	0349      	lsls	r1, r1, #13
1000c964:	430b      	orrs	r3, r1
1000c966:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c968:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c96a:	e02d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c96c:	4a18      	ldr	r2, [pc, #96]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c96e:	6913      	ldr	r3, [r2, #16]
1000c970:	2180      	movs	r1, #128	; 0x80
1000c972:	0389      	lsls	r1, r1, #14
1000c974:	430b      	orrs	r3, r1
1000c976:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c978:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c97a:	e025      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c97c:	4a14      	ldr	r2, [pc, #80]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c97e:	6913      	ldr	r3, [r2, #16]
1000c980:	2180      	movs	r1, #128	; 0x80
1000c982:	03c9      	lsls	r1, r1, #15
1000c984:	430b      	orrs	r3, r1
1000c986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c98a:	e01d      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c98c:	4a10      	ldr	r2, [pc, #64]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c98e:	6913      	ldr	r3, [r2, #16]
1000c990:	2180      	movs	r1, #128	; 0x80
1000c992:	0409      	lsls	r1, r1, #16
1000c994:	430b      	orrs	r3, r1
1000c996:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c99a:	e015      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c99c:	4a0c      	ldr	r2, [pc, #48]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c99e:	7d11      	ldrb	r1, [r2, #20]
1000c9a0:	2301      	movs	r3, #1
1000c9a2:	430b      	orrs	r3, r1
1000c9a4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c9a8:	e00e      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c9aa:	4a09      	ldr	r2, [pc, #36]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c9ac:	7d11      	ldrb	r1, [r2, #20]
1000c9ae:	2302      	movs	r3, #2
1000c9b0:	430b      	orrs	r3, r1
1000c9b2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c9b6:	e007      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c9b8:	4a05      	ldr	r2, [pc, #20]	; (1000c9d0 <system_clock_peripheral_enable+0x358>)
1000c9ba:	7d11      	ldrb	r1, [r2, #20]
1000c9bc:	2304      	movs	r3, #4
1000c9be:	430b      	orrs	r3, r1
1000c9c0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c9c4:	e000      	b.n	1000c9c8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c9c6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c9c8:	bd00      	pop	{pc}
1000c9ca:	46c0      	nop			; (mov r8, r8)
1000c9cc:	10017224 	.word	0x10017224
1000c9d0:	4000b000 	.word	0x4000b000

1000c9d4 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c9d4:	b500      	push	{lr}
	switch (peripheral) {
1000c9d6:	2835      	cmp	r0, #53	; 0x35
1000c9d8:	d900      	bls.n	1000c9dc <system_clock_peripheral_disable+0x8>
1000c9da:	e17d      	b.n	1000ccd8 <system_clock_peripheral_disable+0x304>
1000c9dc:	0080      	lsls	r0, r0, #2
1000c9de:	4bbf      	ldr	r3, [pc, #764]	; (1000ccdc <system_clock_peripheral_disable+0x308>)
1000c9e0:	581b      	ldr	r3, [r3, r0]
1000c9e2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c9e4:	4abe      	ldr	r2, [pc, #760]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000c9e6:	68d3      	ldr	r3, [r2, #12]
1000c9e8:	2102      	movs	r1, #2
1000c9ea:	438b      	bics	r3, r1
1000c9ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ee:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c9f0:	e173      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c9f2:	4abb      	ldr	r2, [pc, #748]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000c9f4:	68d3      	ldr	r3, [r2, #12]
1000c9f6:	2104      	movs	r1, #4
1000c9f8:	438b      	bics	r3, r1
1000c9fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c9fe:	e16c      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca00:	4ab7      	ldr	r2, [pc, #732]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca02:	68d3      	ldr	r3, [r2, #12]
1000ca04:	2108      	movs	r1, #8
1000ca06:	438b      	bics	r3, r1
1000ca08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000ca0c:	e165      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca0e:	4ab4      	ldr	r2, [pc, #720]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca10:	68d3      	ldr	r3, [r2, #12]
1000ca12:	2110      	movs	r1, #16
1000ca14:	438b      	bics	r3, r1
1000ca16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000ca1a:	e15e      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca1c:	4ab0      	ldr	r2, [pc, #704]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca1e:	68d3      	ldr	r3, [r2, #12]
1000ca20:	2120      	movs	r1, #32
1000ca22:	438b      	bics	r3, r1
1000ca24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000ca28:	e157      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca2a:	4aad      	ldr	r2, [pc, #692]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca2c:	68d3      	ldr	r3, [r2, #12]
1000ca2e:	2180      	movs	r1, #128	; 0x80
1000ca30:	438b      	bics	r3, r1
1000ca32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ca36:	e150      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca38:	4aa9      	ldr	r2, [pc, #676]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca3a:	68d1      	ldr	r1, [r2, #12]
1000ca3c:	4ba9      	ldr	r3, [pc, #676]	; (1000cce4 <system_clock_peripheral_disable+0x310>)
1000ca3e:	400b      	ands	r3, r1
1000ca40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ca44:	e149      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca46:	4aa6      	ldr	r2, [pc, #664]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca48:	68d1      	ldr	r1, [r2, #12]
1000ca4a:	4ba7      	ldr	r3, [pc, #668]	; (1000cce8 <system_clock_peripheral_disable+0x314>)
1000ca4c:	400b      	ands	r3, r1
1000ca4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000ca52:	e142      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca54:	4aa2      	ldr	r2, [pc, #648]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca56:	68d1      	ldr	r1, [r2, #12]
1000ca58:	4ba4      	ldr	r3, [pc, #656]	; (1000ccec <system_clock_peripheral_disable+0x318>)
1000ca5a:	400b      	ands	r3, r1
1000ca5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ca60:	e13b      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca62:	4a9f      	ldr	r2, [pc, #636]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca64:	68d1      	ldr	r1, [r2, #12]
1000ca66:	4ba2      	ldr	r3, [pc, #648]	; (1000ccf0 <system_clock_peripheral_disable+0x31c>)
1000ca68:	400b      	ands	r3, r1
1000ca6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ca6e:	e134      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca70:	4a9b      	ldr	r2, [pc, #620]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca72:	68d1      	ldr	r1, [r2, #12]
1000ca74:	4b9f      	ldr	r3, [pc, #636]	; (1000ccf4 <system_clock_peripheral_disable+0x320>)
1000ca76:	400b      	ands	r3, r1
1000ca78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ca7c:	e12d      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca7e:	4a98      	ldr	r2, [pc, #608]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca80:	68d1      	ldr	r1, [r2, #12]
1000ca82:	4b9d      	ldr	r3, [pc, #628]	; (1000ccf8 <system_clock_peripheral_disable+0x324>)
1000ca84:	400b      	ands	r3, r1
1000ca86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000ca8a:	e126      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca8c:	4a94      	ldr	r2, [pc, #592]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca8e:	68d1      	ldr	r1, [r2, #12]
1000ca90:	4b9a      	ldr	r3, [pc, #616]	; (1000ccfc <system_clock_peripheral_disable+0x328>)
1000ca92:	400b      	ands	r3, r1
1000ca94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000ca98:	e11f      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ca9a:	4a91      	ldr	r2, [pc, #580]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ca9c:	68d1      	ldr	r1, [r2, #12]
1000ca9e:	4b98      	ldr	r3, [pc, #608]	; (1000cd00 <system_clock_peripheral_disable+0x32c>)
1000caa0:	400b      	ands	r3, r1
1000caa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000caa6:	e118      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000caa8:	4a8d      	ldr	r2, [pc, #564]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000caaa:	68d1      	ldr	r1, [r2, #12]
1000caac:	4b95      	ldr	r3, [pc, #596]	; (1000cd04 <system_clock_peripheral_disable+0x330>)
1000caae:	400b      	ands	r3, r1
1000cab0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000cab4:	e111      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cab6:	4a8a      	ldr	r2, [pc, #552]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cab8:	68d1      	ldr	r1, [r2, #12]
1000caba:	4b93      	ldr	r3, [pc, #588]	; (1000cd08 <system_clock_peripheral_disable+0x334>)
1000cabc:	400b      	ands	r3, r1
1000cabe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000cac2:	e10a      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cac4:	4a86      	ldr	r2, [pc, #536]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cac6:	68d1      	ldr	r1, [r2, #12]
1000cac8:	4b90      	ldr	r3, [pc, #576]	; (1000cd0c <system_clock_peripheral_disable+0x338>)
1000caca:	400b      	ands	r3, r1
1000cacc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cace:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000cad0:	e103      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cad2:	4a83      	ldr	r2, [pc, #524]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cad4:	68d1      	ldr	r1, [r2, #12]
1000cad6:	4b8e      	ldr	r3, [pc, #568]	; (1000cd10 <system_clock_peripheral_disable+0x33c>)
1000cad8:	400b      	ands	r3, r1
1000cada:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cadc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000cade:	e0fc      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cae0:	4a7f      	ldr	r2, [pc, #508]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cae2:	68d1      	ldr	r1, [r2, #12]
1000cae4:	4b8b      	ldr	r3, [pc, #556]	; (1000cd14 <system_clock_peripheral_disable+0x340>)
1000cae6:	400b      	ands	r3, r1
1000cae8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000caec:	e0f5      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000caee:	4a7c      	ldr	r2, [pc, #496]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000caf0:	68d1      	ldr	r1, [r2, #12]
1000caf2:	4b89      	ldr	r3, [pc, #548]	; (1000cd18 <system_clock_peripheral_disable+0x344>)
1000caf4:	400b      	ands	r3, r1
1000caf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000cafa:	e0ee      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cafc:	4a78      	ldr	r2, [pc, #480]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cafe:	68d1      	ldr	r1, [r2, #12]
1000cb00:	4b86      	ldr	r3, [pc, #536]	; (1000cd1c <system_clock_peripheral_disable+0x348>)
1000cb02:	400b      	ands	r3, r1
1000cb04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000cb08:	e0e7      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb0a:	4a75      	ldr	r2, [pc, #468]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb0c:	68d1      	ldr	r1, [r2, #12]
1000cb0e:	4b84      	ldr	r3, [pc, #528]	; (1000cd20 <system_clock_peripheral_disable+0x34c>)
1000cb10:	400b      	ands	r3, r1
1000cb12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000cb16:	e0e0      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb18:	4a71      	ldr	r2, [pc, #452]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb1a:	68d1      	ldr	r1, [r2, #12]
1000cb1c:	4b81      	ldr	r3, [pc, #516]	; (1000cd24 <system_clock_peripheral_disable+0x350>)
1000cb1e:	400b      	ands	r3, r1
1000cb20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000cb24:	e0d9      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb26:	4a6e      	ldr	r2, [pc, #440]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb28:	68d1      	ldr	r1, [r2, #12]
1000cb2a:	4b7f      	ldr	r3, [pc, #508]	; (1000cd28 <system_clock_peripheral_disable+0x354>)
1000cb2c:	400b      	ands	r3, r1
1000cb2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000cb32:	e0d2      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb34:	4a6a      	ldr	r2, [pc, #424]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb36:	68d1      	ldr	r1, [r2, #12]
1000cb38:	4b7c      	ldr	r3, [pc, #496]	; (1000cd2c <system_clock_peripheral_disable+0x358>)
1000cb3a:	400b      	ands	r3, r1
1000cb3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000cb40:	e0cb      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb42:	4a67      	ldr	r2, [pc, #412]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb44:	68d1      	ldr	r1, [r2, #12]
1000cb46:	4b7a      	ldr	r3, [pc, #488]	; (1000cd30 <system_clock_peripheral_disable+0x35c>)
1000cb48:	400b      	ands	r3, r1
1000cb4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000cb4e:	e0c4      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000cb50:	4a63      	ldr	r2, [pc, #396]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb52:	68d1      	ldr	r1, [r2, #12]
1000cb54:	4b77      	ldr	r3, [pc, #476]	; (1000cd34 <system_clock_peripheral_disable+0x360>)
1000cb56:	400b      	ands	r3, r1
1000cb58:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000cb5c:	e0bd      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cb5e:	4a60      	ldr	r2, [pc, #384]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb60:	6913      	ldr	r3, [r2, #16]
1000cb62:	2101      	movs	r1, #1
1000cb64:	438b      	bics	r3, r1
1000cb66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000cb6a:	e0b6      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cb6c:	4a5c      	ldr	r2, [pc, #368]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb6e:	6913      	ldr	r3, [r2, #16]
1000cb70:	2102      	movs	r1, #2
1000cb72:	438b      	bics	r3, r1
1000cb74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000cb78:	e0af      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cb7a:	4a59      	ldr	r2, [pc, #356]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb7c:	6913      	ldr	r3, [r2, #16]
1000cb7e:	2104      	movs	r1, #4
1000cb80:	438b      	bics	r3, r1
1000cb82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000cb86:	e0a8      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cb88:	4a55      	ldr	r2, [pc, #340]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb8a:	6913      	ldr	r3, [r2, #16]
1000cb8c:	2108      	movs	r1, #8
1000cb8e:	438b      	bics	r3, r1
1000cb90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000cb94:	e0a1      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cb96:	4a52      	ldr	r2, [pc, #328]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cb98:	6913      	ldr	r3, [r2, #16]
1000cb9a:	2110      	movs	r1, #16
1000cb9c:	438b      	bics	r3, r1
1000cb9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000cba2:	e09a      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cba4:	4a4e      	ldr	r2, [pc, #312]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cba6:	6913      	ldr	r3, [r2, #16]
1000cba8:	2120      	movs	r1, #32
1000cbaa:	438b      	bics	r3, r1
1000cbac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000cbb0:	e093      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbb2:	4a4b      	ldr	r2, [pc, #300]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbb4:	6913      	ldr	r3, [r2, #16]
1000cbb6:	2140      	movs	r1, #64	; 0x40
1000cbb8:	438b      	bics	r3, r1
1000cbba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000cbbe:	e08c      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbc0:	4a47      	ldr	r2, [pc, #284]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbc2:	6913      	ldr	r3, [r2, #16]
1000cbc4:	2180      	movs	r1, #128	; 0x80
1000cbc6:	438b      	bics	r3, r1
1000cbc8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000cbcc:	e085      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbce:	4a44      	ldr	r2, [pc, #272]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbd0:	6911      	ldr	r1, [r2, #16]
1000cbd2:	4b44      	ldr	r3, [pc, #272]	; (1000cce4 <system_clock_peripheral_disable+0x310>)
1000cbd4:	400b      	ands	r3, r1
1000cbd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000cbda:	e07e      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbdc:	4a40      	ldr	r2, [pc, #256]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbde:	6911      	ldr	r1, [r2, #16]
1000cbe0:	4b55      	ldr	r3, [pc, #340]	; (1000cd38 <system_clock_peripheral_disable+0x364>)
1000cbe2:	400b      	ands	r3, r1
1000cbe4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000cbe8:	e077      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbea:	4a3d      	ldr	r2, [pc, #244]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbec:	6911      	ldr	r1, [r2, #16]
1000cbee:	4b53      	ldr	r3, [pc, #332]	; (1000cd3c <system_clock_peripheral_disable+0x368>)
1000cbf0:	400b      	ands	r3, r1
1000cbf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000cbf6:	e070      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cbf8:	4a39      	ldr	r2, [pc, #228]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cbfa:	6911      	ldr	r1, [r2, #16]
1000cbfc:	4b3a      	ldr	r3, [pc, #232]	; (1000cce8 <system_clock_peripheral_disable+0x314>)
1000cbfe:	400b      	ands	r3, r1
1000cc00:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000cc04:	e069      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc06:	4a36      	ldr	r2, [pc, #216]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc08:	6911      	ldr	r1, [r2, #16]
1000cc0a:	4b38      	ldr	r3, [pc, #224]	; (1000ccec <system_clock_peripheral_disable+0x318>)
1000cc0c:	400b      	ands	r3, r1
1000cc0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000cc12:	e062      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc14:	4a32      	ldr	r2, [pc, #200]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc16:	6911      	ldr	r1, [r2, #16]
1000cc18:	4b35      	ldr	r3, [pc, #212]	; (1000ccf0 <system_clock_peripheral_disable+0x31c>)
1000cc1a:	400b      	ands	r3, r1
1000cc1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000cc20:	e05b      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc22:	4a2f      	ldr	r2, [pc, #188]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc24:	6911      	ldr	r1, [r2, #16]
1000cc26:	4b33      	ldr	r3, [pc, #204]	; (1000ccf4 <system_clock_peripheral_disable+0x320>)
1000cc28:	400b      	ands	r3, r1
1000cc2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000cc2e:	e054      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc30:	4a2b      	ldr	r2, [pc, #172]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc32:	6911      	ldr	r1, [r2, #16]
1000cc34:	4b30      	ldr	r3, [pc, #192]	; (1000ccf8 <system_clock_peripheral_disable+0x324>)
1000cc36:	400b      	ands	r3, r1
1000cc38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000cc3c:	e04d      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc3e:	4a28      	ldr	r2, [pc, #160]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc40:	6911      	ldr	r1, [r2, #16]
1000cc42:	4b2e      	ldr	r3, [pc, #184]	; (1000ccfc <system_clock_peripheral_disable+0x328>)
1000cc44:	400b      	ands	r3, r1
1000cc46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000cc4a:	e046      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc4c:	4a24      	ldr	r2, [pc, #144]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc4e:	6911      	ldr	r1, [r2, #16]
1000cc50:	4b2b      	ldr	r3, [pc, #172]	; (1000cd00 <system_clock_peripheral_disable+0x32c>)
1000cc52:	400b      	ands	r3, r1
1000cc54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000cc58:	e03f      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc5a:	4a21      	ldr	r2, [pc, #132]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc5c:	6911      	ldr	r1, [r2, #16]
1000cc5e:	4b29      	ldr	r3, [pc, #164]	; (1000cd04 <system_clock_peripheral_disable+0x330>)
1000cc60:	400b      	ands	r3, r1
1000cc62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000cc66:	e038      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc68:	4a1d      	ldr	r2, [pc, #116]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc6a:	6911      	ldr	r1, [r2, #16]
1000cc6c:	4b26      	ldr	r3, [pc, #152]	; (1000cd08 <system_clock_peripheral_disable+0x334>)
1000cc6e:	400b      	ands	r3, r1
1000cc70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000cc74:	e031      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc76:	4a1a      	ldr	r2, [pc, #104]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc78:	6911      	ldr	r1, [r2, #16]
1000cc7a:	4b24      	ldr	r3, [pc, #144]	; (1000cd0c <system_clock_peripheral_disable+0x338>)
1000cc7c:	400b      	ands	r3, r1
1000cc7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000cc82:	e02a      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc84:	4a16      	ldr	r2, [pc, #88]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc86:	6911      	ldr	r1, [r2, #16]
1000cc88:	4b21      	ldr	r3, [pc, #132]	; (1000cd10 <system_clock_peripheral_disable+0x33c>)
1000cc8a:	400b      	ands	r3, r1
1000cc8c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cc90:	e023      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cc92:	4a13      	ldr	r2, [pc, #76]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cc94:	6911      	ldr	r1, [r2, #16]
1000cc96:	4b1f      	ldr	r3, [pc, #124]	; (1000cd14 <system_clock_peripheral_disable+0x340>)
1000cc98:	400b      	ands	r3, r1
1000cc9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cc9e:	e01c      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cca0:	4a0f      	ldr	r2, [pc, #60]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cca2:	6911      	ldr	r1, [r2, #16]
1000cca4:	4b1c      	ldr	r3, [pc, #112]	; (1000cd18 <system_clock_peripheral_disable+0x344>)
1000cca6:	400b      	ands	r3, r1
1000cca8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ccac:	e015      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ccae:	4a0c      	ldr	r2, [pc, #48]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ccb0:	7d13      	ldrb	r3, [r2, #20]
1000ccb2:	2101      	movs	r1, #1
1000ccb4:	438b      	bics	r3, r1
1000ccb6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ccba:	e00e      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ccbc:	4a08      	ldr	r2, [pc, #32]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000ccbe:	7d13      	ldrb	r3, [r2, #20]
1000ccc0:	2102      	movs	r1, #2
1000ccc2:	438b      	bics	r3, r1
1000ccc4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ccc8:	e007      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ccca:	4a05      	ldr	r2, [pc, #20]	; (1000cce0 <system_clock_peripheral_disable+0x30c>)
1000cccc:	7d13      	ldrb	r3, [r2, #20]
1000ccce:	2104      	movs	r1, #4
1000ccd0:	438b      	bics	r3, r1
1000ccd2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ccd6:	e000      	b.n	1000ccda <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ccd8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ccda:	bd00      	pop	{pc}
1000ccdc:	100172fc 	.word	0x100172fc
1000cce0:	4000b000 	.word	0x4000b000
1000cce4:	fffffeff 	.word	0xfffffeff
1000cce8:	fffff7ff 	.word	0xfffff7ff
1000ccec:	ffffefff 	.word	0xffffefff
1000ccf0:	ffffdfff 	.word	0xffffdfff
1000ccf4:	ffffbfff 	.word	0xffffbfff
1000ccf8:	ffff7fff 	.word	0xffff7fff
1000ccfc:	fffeffff 	.word	0xfffeffff
1000cd00:	fffdffff 	.word	0xfffdffff
1000cd04:	fffbffff 	.word	0xfffbffff
1000cd08:	fff7ffff 	.word	0xfff7ffff
1000cd0c:	ffefffff 	.word	0xffefffff
1000cd10:	ffdfffff 	.word	0xffdfffff
1000cd14:	ffbfffff 	.word	0xffbfffff
1000cd18:	ff7fffff 	.word	0xff7fffff
1000cd1c:	feffffff 	.word	0xfeffffff
1000cd20:	fdffffff 	.word	0xfdffffff
1000cd24:	fbffffff 	.word	0xfbffffff
1000cd28:	f7ffffff 	.word	0xf7ffffff
1000cd2c:	efffffff 	.word	0xefffffff
1000cd30:	dfffffff 	.word	0xdfffffff
1000cd34:	bfffffff 	.word	0xbfffffff
1000cd38:	fffffdff 	.word	0xfffffdff
1000cd3c:	fffffbff 	.word	0xfffffbff

1000cd40 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000cd40:	b500      	push	{lr}
	switch (peripheral) {
1000cd42:	2843      	cmp	r0, #67	; 0x43
1000cd44:	d900      	bls.n	1000cd48 <system_peripheral_reset+0x8>
1000cd46:	e223      	b.n	1000d190 <system_peripheral_reset+0x450>
1000cd48:	0080      	lsls	r0, r0, #2
1000cd4a:	4be0      	ldr	r3, [pc, #896]	; (1000d0cc <system_peripheral_reset+0x38c>)
1000cd4c:	581b      	ldr	r3, [r3, r0]
1000cd4e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd50:	4bdf      	ldr	r3, [pc, #892]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cd52:	6859      	ldr	r1, [r3, #4]
1000cd54:	2202      	movs	r2, #2
1000cd56:	4391      	bics	r1, r2
1000cd58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd5a:	6859      	ldr	r1, [r3, #4]
1000cd5c:	430a      	orrs	r2, r1
1000cd5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd60:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000cd62:	e216      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd64:	4bda      	ldr	r3, [pc, #872]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cd66:	6859      	ldr	r1, [r3, #4]
1000cd68:	2204      	movs	r2, #4
1000cd6a:	4391      	bics	r1, r2
1000cd6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd6e:	6859      	ldr	r1, [r3, #4]
1000cd70:	430a      	orrs	r2, r1
1000cd72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000cd76:	e20c      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd78:	4bd5      	ldr	r3, [pc, #852]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cd7a:	6859      	ldr	r1, [r3, #4]
1000cd7c:	2208      	movs	r2, #8
1000cd7e:	4391      	bics	r1, r2
1000cd80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd82:	6859      	ldr	r1, [r3, #4]
1000cd84:	430a      	orrs	r2, r1
1000cd86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd88:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000cd8a:	e202      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd8c:	4bd0      	ldr	r3, [pc, #832]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cd8e:	6859      	ldr	r1, [r3, #4]
1000cd90:	2210      	movs	r2, #16
1000cd92:	4391      	bics	r1, r2
1000cd94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd96:	6859      	ldr	r1, [r3, #4]
1000cd98:	430a      	orrs	r2, r1
1000cd9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000cd9e:	e1f8      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cda0:	4bcb      	ldr	r3, [pc, #812]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cda2:	6859      	ldr	r1, [r3, #4]
1000cda4:	2220      	movs	r2, #32
1000cda6:	4391      	bics	r1, r2
1000cda8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdaa:	6859      	ldr	r1, [r3, #4]
1000cdac:	430a      	orrs	r2, r1
1000cdae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000cdb2:	e1ee      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdb4:	4bc6      	ldr	r3, [pc, #792]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cdb6:	6859      	ldr	r1, [r3, #4]
1000cdb8:	2240      	movs	r2, #64	; 0x40
1000cdba:	4391      	bics	r1, r2
1000cdbc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdbe:	6859      	ldr	r1, [r3, #4]
1000cdc0:	430a      	orrs	r2, r1
1000cdc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdc4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000cdc6:	e1e4      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdc8:	4bc1      	ldr	r3, [pc, #772]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cdca:	6859      	ldr	r1, [r3, #4]
1000cdcc:	2280      	movs	r2, #128	; 0x80
1000cdce:	4391      	bics	r1, r2
1000cdd0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdd2:	6859      	ldr	r1, [r3, #4]
1000cdd4:	430a      	orrs	r2, r1
1000cdd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cdda:	e1da      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cddc:	4bbc      	ldr	r3, [pc, #752]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cdde:	6859      	ldr	r1, [r3, #4]
1000cde0:	4abc      	ldr	r2, [pc, #752]	; (1000d0d4 <system_peripheral_reset+0x394>)
1000cde2:	400a      	ands	r2, r1
1000cde4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cde6:	685a      	ldr	r2, [r3, #4]
1000cde8:	2180      	movs	r1, #128	; 0x80
1000cdea:	0049      	lsls	r1, r1, #1
1000cdec:	430a      	orrs	r2, r1
1000cdee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdf0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cdf2:	e1ce      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdf4:	4bb6      	ldr	r3, [pc, #728]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cdf6:	6859      	ldr	r1, [r3, #4]
1000cdf8:	4ab7      	ldr	r2, [pc, #732]	; (1000d0d8 <system_peripheral_reset+0x398>)
1000cdfa:	400a      	ands	r2, r1
1000cdfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdfe:	685a      	ldr	r2, [r3, #4]
1000ce00:	2180      	movs	r1, #128	; 0x80
1000ce02:	0089      	lsls	r1, r1, #2
1000ce04:	430a      	orrs	r2, r1
1000ce06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce08:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000ce0a:	e1c2      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce0c:	4bb0      	ldr	r3, [pc, #704]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce0e:	6859      	ldr	r1, [r3, #4]
1000ce10:	4ab2      	ldr	r2, [pc, #712]	; (1000d0dc <system_peripheral_reset+0x39c>)
1000ce12:	400a      	ands	r2, r1
1000ce14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce16:	685a      	ldr	r2, [r3, #4]
1000ce18:	2180      	movs	r1, #128	; 0x80
1000ce1a:	00c9      	lsls	r1, r1, #3
1000ce1c:	430a      	orrs	r2, r1
1000ce1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce20:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000ce22:	e1b6      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce24:	4baa      	ldr	r3, [pc, #680]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce26:	6859      	ldr	r1, [r3, #4]
1000ce28:	4aad      	ldr	r2, [pc, #692]	; (1000d0e0 <system_peripheral_reset+0x3a0>)
1000ce2a:	400a      	ands	r2, r1
1000ce2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce2e:	685a      	ldr	r2, [r3, #4]
1000ce30:	2180      	movs	r1, #128	; 0x80
1000ce32:	0109      	lsls	r1, r1, #4
1000ce34:	430a      	orrs	r2, r1
1000ce36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce38:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000ce3a:	e1aa      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce3c:	4ba4      	ldr	r3, [pc, #656]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce3e:	6859      	ldr	r1, [r3, #4]
1000ce40:	4aa8      	ldr	r2, [pc, #672]	; (1000d0e4 <system_peripheral_reset+0x3a4>)
1000ce42:	400a      	ands	r2, r1
1000ce44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce46:	685a      	ldr	r2, [r3, #4]
1000ce48:	2180      	movs	r1, #128	; 0x80
1000ce4a:	0149      	lsls	r1, r1, #5
1000ce4c:	430a      	orrs	r2, r1
1000ce4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce50:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000ce52:	e19e      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce54:	4b9e      	ldr	r3, [pc, #632]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce56:	6859      	ldr	r1, [r3, #4]
1000ce58:	4aa3      	ldr	r2, [pc, #652]	; (1000d0e8 <system_peripheral_reset+0x3a8>)
1000ce5a:	400a      	ands	r2, r1
1000ce5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce5e:	685a      	ldr	r2, [r3, #4]
1000ce60:	2180      	movs	r1, #128	; 0x80
1000ce62:	0189      	lsls	r1, r1, #6
1000ce64:	430a      	orrs	r2, r1
1000ce66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce68:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000ce6a:	e192      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce6c:	4b98      	ldr	r3, [pc, #608]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce6e:	6859      	ldr	r1, [r3, #4]
1000ce70:	4a9e      	ldr	r2, [pc, #632]	; (1000d0ec <system_peripheral_reset+0x3ac>)
1000ce72:	400a      	ands	r2, r1
1000ce74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce76:	685a      	ldr	r2, [r3, #4]
1000ce78:	2180      	movs	r1, #128	; 0x80
1000ce7a:	01c9      	lsls	r1, r1, #7
1000ce7c:	430a      	orrs	r2, r1
1000ce7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce80:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000ce82:	e186      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce84:	4b92      	ldr	r3, [pc, #584]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce86:	6859      	ldr	r1, [r3, #4]
1000ce88:	4a99      	ldr	r2, [pc, #612]	; (1000d0f0 <system_peripheral_reset+0x3b0>)
1000ce8a:	400a      	ands	r2, r1
1000ce8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce8e:	685a      	ldr	r2, [r3, #4]
1000ce90:	2180      	movs	r1, #128	; 0x80
1000ce92:	0209      	lsls	r1, r1, #8
1000ce94:	430a      	orrs	r2, r1
1000ce96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce98:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000ce9a:	e17a      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce9c:	4b8c      	ldr	r3, [pc, #560]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ce9e:	6859      	ldr	r1, [r3, #4]
1000cea0:	4a94      	ldr	r2, [pc, #592]	; (1000d0f4 <system_peripheral_reset+0x3b4>)
1000cea2:	400a      	ands	r2, r1
1000cea4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cea6:	685a      	ldr	r2, [r3, #4]
1000cea8:	2180      	movs	r1, #128	; 0x80
1000ceaa:	0249      	lsls	r1, r1, #9
1000ceac:	430a      	orrs	r2, r1
1000ceae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ceb0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000ceb2:	e16e      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ceb4:	4b86      	ldr	r3, [pc, #536]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000ceb6:	6859      	ldr	r1, [r3, #4]
1000ceb8:	4a8f      	ldr	r2, [pc, #572]	; (1000d0f8 <system_peripheral_reset+0x3b8>)
1000ceba:	400a      	ands	r2, r1
1000cebc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cebe:	685a      	ldr	r2, [r3, #4]
1000cec0:	2180      	movs	r1, #128	; 0x80
1000cec2:	0289      	lsls	r1, r1, #10
1000cec4:	430a      	orrs	r2, r1
1000cec6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cec8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ceca:	e162      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cecc:	4b80      	ldr	r3, [pc, #512]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cece:	6859      	ldr	r1, [r3, #4]
1000ced0:	4a8a      	ldr	r2, [pc, #552]	; (1000d0fc <system_peripheral_reset+0x3bc>)
1000ced2:	400a      	ands	r2, r1
1000ced4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ced6:	685a      	ldr	r2, [r3, #4]
1000ced8:	2180      	movs	r1, #128	; 0x80
1000ceda:	02c9      	lsls	r1, r1, #11
1000cedc:	430a      	orrs	r2, r1
1000cede:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cee0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cee2:	e156      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cee4:	4b7a      	ldr	r3, [pc, #488]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cee6:	6859      	ldr	r1, [r3, #4]
1000cee8:	4a85      	ldr	r2, [pc, #532]	; (1000d100 <system_peripheral_reset+0x3c0>)
1000ceea:	400a      	ands	r2, r1
1000ceec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ceee:	685a      	ldr	r2, [r3, #4]
1000cef0:	2180      	movs	r1, #128	; 0x80
1000cef2:	0309      	lsls	r1, r1, #12
1000cef4:	430a      	orrs	r2, r1
1000cef6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cef8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cefa:	e14a      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cefc:	4b74      	ldr	r3, [pc, #464]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cefe:	6859      	ldr	r1, [r3, #4]
1000cf00:	4a80      	ldr	r2, [pc, #512]	; (1000d104 <system_peripheral_reset+0x3c4>)
1000cf02:	400a      	ands	r2, r1
1000cf04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf06:	685a      	ldr	r2, [r3, #4]
1000cf08:	2180      	movs	r1, #128	; 0x80
1000cf0a:	0349      	lsls	r1, r1, #13
1000cf0c:	430a      	orrs	r2, r1
1000cf0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf10:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cf12:	e13e      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf14:	4b6e      	ldr	r3, [pc, #440]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf16:	6859      	ldr	r1, [r3, #4]
1000cf18:	4a7b      	ldr	r2, [pc, #492]	; (1000d108 <system_peripheral_reset+0x3c8>)
1000cf1a:	400a      	ands	r2, r1
1000cf1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf1e:	685a      	ldr	r2, [r3, #4]
1000cf20:	2180      	movs	r1, #128	; 0x80
1000cf22:	0389      	lsls	r1, r1, #14
1000cf24:	430a      	orrs	r2, r1
1000cf26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf28:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cf2a:	e132      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf2c:	4b68      	ldr	r3, [pc, #416]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf2e:	6859      	ldr	r1, [r3, #4]
1000cf30:	4a76      	ldr	r2, [pc, #472]	; (1000d10c <system_peripheral_reset+0x3cc>)
1000cf32:	400a      	ands	r2, r1
1000cf34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf36:	685a      	ldr	r2, [r3, #4]
1000cf38:	2180      	movs	r1, #128	; 0x80
1000cf3a:	03c9      	lsls	r1, r1, #15
1000cf3c:	430a      	orrs	r2, r1
1000cf3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf40:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cf42:	e126      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf44:	4b62      	ldr	r3, [pc, #392]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf46:	6859      	ldr	r1, [r3, #4]
1000cf48:	4a71      	ldr	r2, [pc, #452]	; (1000d110 <system_peripheral_reset+0x3d0>)
1000cf4a:	400a      	ands	r2, r1
1000cf4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf4e:	685a      	ldr	r2, [r3, #4]
1000cf50:	2180      	movs	r1, #128	; 0x80
1000cf52:	0409      	lsls	r1, r1, #16
1000cf54:	430a      	orrs	r2, r1
1000cf56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf58:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cf5a:	e11a      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf5c:	4b5c      	ldr	r3, [pc, #368]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf5e:	6859      	ldr	r1, [r3, #4]
1000cf60:	4a6c      	ldr	r2, [pc, #432]	; (1000d114 <system_peripheral_reset+0x3d4>)
1000cf62:	400a      	ands	r2, r1
1000cf64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf66:	685a      	ldr	r2, [r3, #4]
1000cf68:	2180      	movs	r1, #128	; 0x80
1000cf6a:	0449      	lsls	r1, r1, #17
1000cf6c:	430a      	orrs	r2, r1
1000cf6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf70:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cf72:	e10e      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf74:	4b56      	ldr	r3, [pc, #344]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf76:	6859      	ldr	r1, [r3, #4]
1000cf78:	4a67      	ldr	r2, [pc, #412]	; (1000d118 <system_peripheral_reset+0x3d8>)
1000cf7a:	400a      	ands	r2, r1
1000cf7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf7e:	685a      	ldr	r2, [r3, #4]
1000cf80:	2180      	movs	r1, #128	; 0x80
1000cf82:	0489      	lsls	r1, r1, #18
1000cf84:	430a      	orrs	r2, r1
1000cf86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf88:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cf8a:	e102      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cf8c:	4b50      	ldr	r3, [pc, #320]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cf8e:	6859      	ldr	r1, [r3, #4]
1000cf90:	4a62      	ldr	r2, [pc, #392]	; (1000d11c <system_peripheral_reset+0x3dc>)
1000cf92:	400a      	ands	r2, r1
1000cf94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cf96:	685a      	ldr	r2, [r3, #4]
1000cf98:	2180      	movs	r1, #128	; 0x80
1000cf9a:	04c9      	lsls	r1, r1, #19
1000cf9c:	430a      	orrs	r2, r1
1000cf9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfa0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cfa2:	e0f6      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfa4:	4b4a      	ldr	r3, [pc, #296]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cfa6:	6859      	ldr	r1, [r3, #4]
1000cfa8:	4a5d      	ldr	r2, [pc, #372]	; (1000d120 <system_peripheral_reset+0x3e0>)
1000cfaa:	400a      	ands	r2, r1
1000cfac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfae:	685a      	ldr	r2, [r3, #4]
1000cfb0:	2180      	movs	r1, #128	; 0x80
1000cfb2:	0509      	lsls	r1, r1, #20
1000cfb4:	430a      	orrs	r2, r1
1000cfb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfb8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cfba:	e0ea      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfbc:	4b44      	ldr	r3, [pc, #272]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cfbe:	6859      	ldr	r1, [r3, #4]
1000cfc0:	4a58      	ldr	r2, [pc, #352]	; (1000d124 <system_peripheral_reset+0x3e4>)
1000cfc2:	400a      	ands	r2, r1
1000cfc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfc6:	685a      	ldr	r2, [r3, #4]
1000cfc8:	2180      	movs	r1, #128	; 0x80
1000cfca:	0549      	lsls	r1, r1, #21
1000cfcc:	430a      	orrs	r2, r1
1000cfce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfd0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000cfd2:	e0de      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfd4:	4b3e      	ldr	r3, [pc, #248]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cfd6:	6859      	ldr	r1, [r3, #4]
1000cfd8:	4a53      	ldr	r2, [pc, #332]	; (1000d128 <system_peripheral_reset+0x3e8>)
1000cfda:	400a      	ands	r2, r1
1000cfdc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cfde:	685a      	ldr	r2, [r3, #4]
1000cfe0:	2180      	movs	r1, #128	; 0x80
1000cfe2:	0589      	lsls	r1, r1, #22
1000cfe4:	430a      	orrs	r2, r1
1000cfe6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfe8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000cfea:	e0d2      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cfec:	4b38      	ldr	r3, [pc, #224]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000cfee:	6859      	ldr	r1, [r3, #4]
1000cff0:	4a4e      	ldr	r2, [pc, #312]	; (1000d12c <system_peripheral_reset+0x3ec>)
1000cff2:	400a      	ands	r2, r1
1000cff4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cff6:	685a      	ldr	r2, [r3, #4]
1000cff8:	2180      	movs	r1, #128	; 0x80
1000cffa:	05c9      	lsls	r1, r1, #23
1000cffc:	430a      	orrs	r2, r1
1000cffe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d000:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d002:	e0c6      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d004:	4a32      	ldr	r2, [pc, #200]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d006:	6853      	ldr	r3, [r2, #4]
1000d008:	005b      	lsls	r3, r3, #1
1000d00a:	085b      	lsrs	r3, r3, #1
1000d00c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d00e:	6853      	ldr	r3, [r2, #4]
1000d010:	2180      	movs	r1, #128	; 0x80
1000d012:	0609      	lsls	r1, r1, #24
1000d014:	430b      	orrs	r3, r1
1000d016:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d018:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d01a:	e0ba      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d01c:	4b2c      	ldr	r3, [pc, #176]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d01e:	891a      	ldrh	r2, [r3, #8]
1000d020:	2101      	movs	r1, #1
1000d022:	438a      	bics	r2, r1
1000d024:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d026:	8919      	ldrh	r1, [r3, #8]
1000d028:	2201      	movs	r2, #1
1000d02a:	430a      	orrs	r2, r1
1000d02c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d02e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d030:	e0af      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d032:	4b27      	ldr	r3, [pc, #156]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d034:	891a      	ldrh	r2, [r3, #8]
1000d036:	2102      	movs	r1, #2
1000d038:	438a      	bics	r2, r1
1000d03a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d03c:	8919      	ldrh	r1, [r3, #8]
1000d03e:	2202      	movs	r2, #2
1000d040:	430a      	orrs	r2, r1
1000d042:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d044:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d046:	e0a4      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d048:	4b21      	ldr	r3, [pc, #132]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d04a:	891a      	ldrh	r2, [r3, #8]
1000d04c:	2104      	movs	r1, #4
1000d04e:	438a      	bics	r2, r1
1000d050:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d052:	8919      	ldrh	r1, [r3, #8]
1000d054:	2204      	movs	r2, #4
1000d056:	430a      	orrs	r2, r1
1000d058:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d05a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d05c:	e099      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d05e:	4b1c      	ldr	r3, [pc, #112]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d060:	891a      	ldrh	r2, [r3, #8]
1000d062:	2108      	movs	r1, #8
1000d064:	438a      	bics	r2, r1
1000d066:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d068:	8919      	ldrh	r1, [r3, #8]
1000d06a:	2208      	movs	r2, #8
1000d06c:	430a      	orrs	r2, r1
1000d06e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d070:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d072:	e08e      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d074:	4b16      	ldr	r3, [pc, #88]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d076:	891a      	ldrh	r2, [r3, #8]
1000d078:	2110      	movs	r1, #16
1000d07a:	438a      	bics	r2, r1
1000d07c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d07e:	8919      	ldrh	r1, [r3, #8]
1000d080:	2210      	movs	r2, #16
1000d082:	430a      	orrs	r2, r1
1000d084:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d086:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d088:	e083      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d08a:	4b11      	ldr	r3, [pc, #68]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d08c:	891a      	ldrh	r2, [r3, #8]
1000d08e:	2120      	movs	r1, #32
1000d090:	438a      	bics	r2, r1
1000d092:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d094:	8919      	ldrh	r1, [r3, #8]
1000d096:	2220      	movs	r2, #32
1000d098:	430a      	orrs	r2, r1
1000d09a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d09c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d09e:	e078      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d0a0:	4b0b      	ldr	r3, [pc, #44]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d0a2:	891a      	ldrh	r2, [r3, #8]
1000d0a4:	2140      	movs	r1, #64	; 0x40
1000d0a6:	438a      	bics	r2, r1
1000d0a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d0aa:	8919      	ldrh	r1, [r3, #8]
1000d0ac:	2240      	movs	r2, #64	; 0x40
1000d0ae:	430a      	orrs	r2, r1
1000d0b0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0b2:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d0b4:	e06d      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d0b6:	4b06      	ldr	r3, [pc, #24]	; (1000d0d0 <system_peripheral_reset+0x390>)
1000d0b8:	891a      	ldrh	r2, [r3, #8]
1000d0ba:	2180      	movs	r1, #128	; 0x80
1000d0bc:	438a      	bics	r2, r1
1000d0be:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d0c0:	8919      	ldrh	r1, [r3, #8]
1000d0c2:	2280      	movs	r2, #128	; 0x80
1000d0c4:	430a      	orrs	r2, r1
1000d0c6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d0c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d0ca:	e062      	b.n	1000d192 <system_peripheral_reset+0x452>
1000d0cc:	100173d4 	.word	0x100173d4
1000d0d0:	4000b000 	.word	0x4000b000
1000d0d4:	fffffeff 	.word	0xfffffeff
1000d0d8:	fffffdff 	.word	0xfffffdff
1000d0dc:	fffffbff 	.word	0xfffffbff
1000d0e0:	fffff7ff 	.word	0xfffff7ff
1000d0e4:	ffffefff 	.word	0xffffefff
1000d0e8:	ffffdfff 	.word	0xffffdfff
1000d0ec:	ffffbfff 	.word	0xffffbfff
1000d0f0:	ffff7fff 	.word	0xffff7fff
1000d0f4:	fffeffff 	.word	0xfffeffff
1000d0f8:	fffdffff 	.word	0xfffdffff
1000d0fc:	fffbffff 	.word	0xfffbffff
1000d100:	fff7ffff 	.word	0xfff7ffff
1000d104:	ffefffff 	.word	0xffefffff
1000d108:	ffdfffff 	.word	0xffdfffff
1000d10c:	ffbfffff 	.word	0xffbfffff
1000d110:	ff7fffff 	.word	0xff7fffff
1000d114:	feffffff 	.word	0xfeffffff
1000d118:	fdffffff 	.word	0xfdffffff
1000d11c:	fbffffff 	.word	0xfbffffff
1000d120:	f7ffffff 	.word	0xf7ffffff
1000d124:	efffffff 	.word	0xefffffff
1000d128:	dfffffff 	.word	0xdfffffff
1000d12c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d130:	4b18      	ldr	r3, [pc, #96]	; (1000d194 <system_peripheral_reset+0x454>)
1000d132:	8919      	ldrh	r1, [r3, #8]
1000d134:	4a18      	ldr	r2, [pc, #96]	; (1000d198 <system_peripheral_reset+0x458>)
1000d136:	400a      	ands	r2, r1
1000d138:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d13a:	8919      	ldrh	r1, [r3, #8]
1000d13c:	2280      	movs	r2, #128	; 0x80
1000d13e:	0052      	lsls	r2, r2, #1
1000d140:	430a      	orrs	r2, r1
1000d142:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d144:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d146:	e024      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d148:	4b12      	ldr	r3, [pc, #72]	; (1000d194 <system_peripheral_reset+0x454>)
1000d14a:	8919      	ldrh	r1, [r3, #8]
1000d14c:	4a13      	ldr	r2, [pc, #76]	; (1000d19c <system_peripheral_reset+0x45c>)
1000d14e:	400a      	ands	r2, r1
1000d150:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d152:	8919      	ldrh	r1, [r3, #8]
1000d154:	2280      	movs	r2, #128	; 0x80
1000d156:	0092      	lsls	r2, r2, #2
1000d158:	430a      	orrs	r2, r1
1000d15a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d15c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d15e:	e018      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d160:	4b0c      	ldr	r3, [pc, #48]	; (1000d194 <system_peripheral_reset+0x454>)
1000d162:	8919      	ldrh	r1, [r3, #8]
1000d164:	4a0e      	ldr	r2, [pc, #56]	; (1000d1a0 <system_peripheral_reset+0x460>)
1000d166:	400a      	ands	r2, r1
1000d168:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d16a:	8919      	ldrh	r1, [r3, #8]
1000d16c:	2280      	movs	r2, #128	; 0x80
1000d16e:	00d2      	lsls	r2, r2, #3
1000d170:	430a      	orrs	r2, r1
1000d172:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d174:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d176:	e00c      	b.n	1000d192 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d178:	4b06      	ldr	r3, [pc, #24]	; (1000d194 <system_peripheral_reset+0x454>)
1000d17a:	8919      	ldrh	r1, [r3, #8]
1000d17c:	4a09      	ldr	r2, [pc, #36]	; (1000d1a4 <system_peripheral_reset+0x464>)
1000d17e:	400a      	ands	r2, r1
1000d180:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d182:	8919      	ldrh	r1, [r3, #8]
1000d184:	2280      	movs	r2, #128	; 0x80
1000d186:	0112      	lsls	r2, r2, #4
1000d188:	430a      	orrs	r2, r1
1000d18a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d18c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000d18e:	e000      	b.n	1000d192 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d190:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000d192:	bd00      	pop	{pc}
1000d194:	4000b000 	.word	0x4000b000
1000d198:	fffffeff 	.word	0xfffffeff
1000d19c:	fffffdff 	.word	0xfffffdff
1000d1a0:	fffffbff 	.word	0xfffffbff
1000d1a4:	fffff7ff 	.word	0xfffff7ff

1000d1a8 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d1a8:	2380      	movs	r3, #128	; 0x80
1000d1aa:	04db      	lsls	r3, r3, #19
1000d1ac:	469c      	mov	ip, r3
1000d1ae:	4460      	add	r0, ip
1000d1b0:	0080      	lsls	r0, r0, #2
1000d1b2:	6001      	str	r1, [r0, #0]
}
1000d1b4:	4770      	bx	lr
1000d1b6:	46c0      	nop			; (mov r8, r8)

1000d1b8 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000d1b8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d1ba:	4b20      	ldr	r3, [pc, #128]	; (1000d23c <uart_rx0_isr_handler+0x84>)
1000d1bc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d1be:	6823      	ldr	r3, [r4, #0]
1000d1c0:	7d1d      	ldrb	r5, [r3, #20]
1000d1c2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d1c4:	066a      	lsls	r2, r5, #25
1000d1c6:	d513      	bpl.n	1000d1f0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d1c8:	211e      	movs	r1, #30
1000d1ca:	2222      	movs	r2, #34	; 0x22
1000d1cc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d1ce:	7e1a      	ldrb	r2, [r3, #24]
1000d1d0:	3123      	adds	r1, #35	; 0x23
1000d1d2:	438a      	bics	r2, r1
1000d1d4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d1d6:	2321      	movs	r3, #33	; 0x21
1000d1d8:	5ce3      	ldrb	r3, [r4, r3]
1000d1da:	071b      	lsls	r3, r3, #28
1000d1dc:	d506      	bpl.n	1000d1ec <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d1de:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d1e0:	5ce3      	ldrb	r3, [r4, r3]
1000d1e2:	071b      	lsls	r3, r3, #28
1000d1e4:	d502      	bpl.n	1000d1ec <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d1e6:	0020      	movs	r0, r4
1000d1e8:	6923      	ldr	r3, [r4, #16]
1000d1ea:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d1ec:	6823      	ldr	r3, [r4, #0]
1000d1ee:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d1f0:	07eb      	lsls	r3, r5, #31
1000d1f2:	d522      	bpl.n	1000d23a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d1f4:	6823      	ldr	r3, [r4, #0]
1000d1f6:	7c1b      	ldrb	r3, [r3, #16]
1000d1f8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d1fa:	6962      	ldr	r2, [r4, #20]
1000d1fc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d1fe:	6963      	ldr	r3, [r4, #20]
1000d200:	3301      	adds	r3, #1
1000d202:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d204:	8ba3      	ldrh	r3, [r4, #28]
1000d206:	3b01      	subs	r3, #1
1000d208:	b29b      	uxth	r3, r3
1000d20a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d20c:	8ba3      	ldrh	r3, [r4, #28]
1000d20e:	b29b      	uxth	r3, r3
1000d210:	2b00      	cmp	r3, #0
1000d212:	d112      	bne.n	1000d23a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d214:	3321      	adds	r3, #33	; 0x21
1000d216:	5ce3      	ldrb	r3, [r4, r3]
1000d218:	075b      	lsls	r3, r3, #29
1000d21a:	d50e      	bpl.n	1000d23a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d21c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d21e:	5ce3      	ldrb	r3, [r4, r3]
1000d220:	075b      	lsls	r3, r3, #29
1000d222:	d50a      	bpl.n	1000d23a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d224:	2200      	movs	r2, #0
1000d226:	2322      	movs	r3, #34	; 0x22
1000d228:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d22a:	6822      	ldr	r2, [r4, #0]
1000d22c:	7e13      	ldrb	r3, [r2, #24]
1000d22e:	2101      	movs	r1, #1
1000d230:	438b      	bics	r3, r1
1000d232:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d234:	68e3      	ldr	r3, [r4, #12]
1000d236:	0020      	movs	r0, r4
1000d238:	4798      	blx	r3
			}
		}
	}
}
1000d23a:	bd70      	pop	{r4, r5, r6, pc}
1000d23c:	1001a270 	.word	0x1001a270

1000d240 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d240:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d242:	4b21      	ldr	r3, [pc, #132]	; (1000d2c8 <uart_tx0_isr_handler+0x88>)
1000d244:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d246:	6823      	ldr	r3, [r4, #0]
1000d248:	791d      	ldrb	r5, [r3, #4]
1000d24a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d24c:	07ea      	lsls	r2, r5, #31
1000d24e:	d517      	bpl.n	1000d280 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d250:	69a2      	ldr	r2, [r4, #24]
1000d252:	7811      	ldrb	r1, [r2, #0]
1000d254:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d256:	3201      	adds	r2, #1
1000d258:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d25a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d25c:	8be3      	ldrh	r3, [r4, #30]
1000d25e:	3b01      	subs	r3, #1
1000d260:	b29b      	uxth	r3, r3
1000d262:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d264:	8be3      	ldrh	r3, [r4, #30]
1000d266:	b29b      	uxth	r3, r3
1000d268:	2b00      	cmp	r3, #0
1000d26a:	d109      	bne.n	1000d280 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d26c:	6822      	ldr	r2, [r4, #0]
1000d26e:	7a13      	ldrb	r3, [r2, #8]
1000d270:	2101      	movs	r1, #1
1000d272:	438b      	bics	r3, r1
1000d274:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d276:	6822      	ldr	r2, [r4, #0]
1000d278:	7a11      	ldrb	r1, [r2, #8]
1000d27a:	2310      	movs	r3, #16
1000d27c:	430b      	orrs	r3, r1
1000d27e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d280:	06eb      	lsls	r3, r5, #27
1000d282:	d512      	bpl.n	1000d2aa <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d284:	2321      	movs	r3, #33	; 0x21
1000d286:	5ce3      	ldrb	r3, [r4, r3]
1000d288:	07db      	lsls	r3, r3, #31
1000d28a:	d50e      	bpl.n	1000d2aa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d28c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d28e:	5ce3      	ldrb	r3, [r4, r3]
1000d290:	07db      	lsls	r3, r3, #31
1000d292:	d50a      	bpl.n	1000d2aa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d294:	2200      	movs	r2, #0
1000d296:	2322      	movs	r3, #34	; 0x22
1000d298:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d29a:	6822      	ldr	r2, [r4, #0]
1000d29c:	7a13      	ldrb	r3, [r2, #8]
1000d29e:	2110      	movs	r1, #16
1000d2a0:	438b      	bics	r3, r1
1000d2a2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d2a4:	0020      	movs	r0, r4
1000d2a6:	6863      	ldr	r3, [r4, #4]
1000d2a8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d2aa:	06ab      	lsls	r3, r5, #26
1000d2ac:	d50a      	bpl.n	1000d2c4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d2ae:	2321      	movs	r3, #33	; 0x21
1000d2b0:	5ce3      	ldrb	r3, [r4, r3]
1000d2b2:	079b      	lsls	r3, r3, #30
1000d2b4:	d506      	bpl.n	1000d2c4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d2b6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d2b8:	5ce3      	ldrb	r3, [r4, r3]
1000d2ba:	079b      	lsls	r3, r3, #30
1000d2bc:	d502      	bpl.n	1000d2c4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d2be:	68a3      	ldr	r3, [r4, #8]
1000d2c0:	0020      	movs	r0, r4
1000d2c2:	4798      	blx	r3
		}

	}
}
1000d2c4:	bd70      	pop	{r4, r5, r6, pc}
1000d2c6:	46c0      	nop			; (mov r8, r8)
1000d2c8:	1001a270 	.word	0x1001a270

1000d2cc <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d2cc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d2ce:	4b20      	ldr	r3, [pc, #128]	; (1000d350 <uart_rx1_isr_handler+0x84>)
1000d2d0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d2d2:	6823      	ldr	r3, [r4, #0]
1000d2d4:	7d1d      	ldrb	r5, [r3, #20]
1000d2d6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d2d8:	066a      	lsls	r2, r5, #25
1000d2da:	d513      	bpl.n	1000d304 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d2dc:	211e      	movs	r1, #30
1000d2de:	2222      	movs	r2, #34	; 0x22
1000d2e0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d2e2:	7e1a      	ldrb	r2, [r3, #24]
1000d2e4:	3123      	adds	r1, #35	; 0x23
1000d2e6:	438a      	bics	r2, r1
1000d2e8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d2ea:	2321      	movs	r3, #33	; 0x21
1000d2ec:	5ce3      	ldrb	r3, [r4, r3]
1000d2ee:	071b      	lsls	r3, r3, #28
1000d2f0:	d506      	bpl.n	1000d300 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d2f2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d2f4:	5ce3      	ldrb	r3, [r4, r3]
1000d2f6:	071b      	lsls	r3, r3, #28
1000d2f8:	d502      	bpl.n	1000d300 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d2fa:	0020      	movs	r0, r4
1000d2fc:	6923      	ldr	r3, [r4, #16]
1000d2fe:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d300:	6823      	ldr	r3, [r4, #0]
1000d302:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d304:	07eb      	lsls	r3, r5, #31
1000d306:	d522      	bpl.n	1000d34e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d308:	6823      	ldr	r3, [r4, #0]
1000d30a:	7c1b      	ldrb	r3, [r3, #16]
1000d30c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d30e:	6962      	ldr	r2, [r4, #20]
1000d310:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d312:	6963      	ldr	r3, [r4, #20]
1000d314:	3301      	adds	r3, #1
1000d316:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d318:	8ba3      	ldrh	r3, [r4, #28]
1000d31a:	3b01      	subs	r3, #1
1000d31c:	b29b      	uxth	r3, r3
1000d31e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d320:	8ba3      	ldrh	r3, [r4, #28]
1000d322:	b29b      	uxth	r3, r3
1000d324:	2b00      	cmp	r3, #0
1000d326:	d112      	bne.n	1000d34e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d328:	3321      	adds	r3, #33	; 0x21
1000d32a:	5ce3      	ldrb	r3, [r4, r3]
1000d32c:	075b      	lsls	r3, r3, #29
1000d32e:	d50e      	bpl.n	1000d34e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d330:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d332:	5ce3      	ldrb	r3, [r4, r3]
1000d334:	075b      	lsls	r3, r3, #29
1000d336:	d50a      	bpl.n	1000d34e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d338:	2200      	movs	r2, #0
1000d33a:	2322      	movs	r3, #34	; 0x22
1000d33c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d33e:	6822      	ldr	r2, [r4, #0]
1000d340:	7e13      	ldrb	r3, [r2, #24]
1000d342:	2101      	movs	r1, #1
1000d344:	438b      	bics	r3, r1
1000d346:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d348:	68e3      	ldr	r3, [r4, #12]
1000d34a:	0020      	movs	r0, r4
1000d34c:	4798      	blx	r3
			}
		}
	}
}
1000d34e:	bd70      	pop	{r4, r5, r6, pc}
1000d350:	1001a270 	.word	0x1001a270

1000d354 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d354:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d356:	4b21      	ldr	r3, [pc, #132]	; (1000d3dc <uart_tx1_isr_handler+0x88>)
1000d358:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d35a:	6823      	ldr	r3, [r4, #0]
1000d35c:	791d      	ldrb	r5, [r3, #4]
1000d35e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d360:	07ea      	lsls	r2, r5, #31
1000d362:	d517      	bpl.n	1000d394 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d364:	69a2      	ldr	r2, [r4, #24]
1000d366:	7811      	ldrb	r1, [r2, #0]
1000d368:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d36a:	3201      	adds	r2, #1
1000d36c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d36e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d370:	8be3      	ldrh	r3, [r4, #30]
1000d372:	3b01      	subs	r3, #1
1000d374:	b29b      	uxth	r3, r3
1000d376:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d378:	8be3      	ldrh	r3, [r4, #30]
1000d37a:	b29b      	uxth	r3, r3
1000d37c:	2b00      	cmp	r3, #0
1000d37e:	d109      	bne.n	1000d394 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d380:	6822      	ldr	r2, [r4, #0]
1000d382:	7a13      	ldrb	r3, [r2, #8]
1000d384:	2101      	movs	r1, #1
1000d386:	438b      	bics	r3, r1
1000d388:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d38a:	6822      	ldr	r2, [r4, #0]
1000d38c:	7a11      	ldrb	r1, [r2, #8]
1000d38e:	2310      	movs	r3, #16
1000d390:	430b      	orrs	r3, r1
1000d392:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d394:	06eb      	lsls	r3, r5, #27
1000d396:	d512      	bpl.n	1000d3be <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d398:	2321      	movs	r3, #33	; 0x21
1000d39a:	5ce3      	ldrb	r3, [r4, r3]
1000d39c:	07db      	lsls	r3, r3, #31
1000d39e:	d50e      	bpl.n	1000d3be <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d3a0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d3a2:	5ce3      	ldrb	r3, [r4, r3]
1000d3a4:	07db      	lsls	r3, r3, #31
1000d3a6:	d50a      	bpl.n	1000d3be <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d3a8:	2200      	movs	r2, #0
1000d3aa:	2322      	movs	r3, #34	; 0x22
1000d3ac:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d3ae:	6822      	ldr	r2, [r4, #0]
1000d3b0:	7a13      	ldrb	r3, [r2, #8]
1000d3b2:	2110      	movs	r1, #16
1000d3b4:	438b      	bics	r3, r1
1000d3b6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d3b8:	0020      	movs	r0, r4
1000d3ba:	6863      	ldr	r3, [r4, #4]
1000d3bc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d3be:	06ab      	lsls	r3, r5, #26
1000d3c0:	d50a      	bpl.n	1000d3d8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3c2:	2321      	movs	r3, #33	; 0x21
1000d3c4:	5ce3      	ldrb	r3, [r4, r3]
1000d3c6:	079b      	lsls	r3, r3, #30
1000d3c8:	d506      	bpl.n	1000d3d8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d3ca:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d3cc:	5ce3      	ldrb	r3, [r4, r3]
1000d3ce:	079b      	lsls	r3, r3, #30
1000d3d0:	d502      	bpl.n	1000d3d8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d3d2:	68a3      	ldr	r3, [r4, #8]
1000d3d4:	0020      	movs	r0, r4
1000d3d6:	4798      	blx	r3
		}

	}
}
1000d3d8:	bd70      	pop	{r4, r5, r6, pc}
1000d3da:	46c0      	nop			; (mov r8, r8)
1000d3dc:	1001a270 	.word	0x1001a270

1000d3e0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d3e0:	23e1      	movs	r3, #225	; 0xe1
1000d3e2:	025b      	lsls	r3, r3, #9
1000d3e4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d3e6:	2300      	movs	r3, #0
1000d3e8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d3ea:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d3ec:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d3ee:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d3f0:	3302      	adds	r3, #2
1000d3f2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d3f4:	2203      	movs	r2, #3
1000d3f6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d3f8:	3201      	adds	r2, #1
1000d3fa:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d3fc:	3201      	adds	r2, #1
1000d3fe:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d400:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d402:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d404:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d406:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d408:	4770      	bx	lr
1000d40a:	46c0      	nop			; (mov r8, r8)

1000d40c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d40e:	464f      	mov	r7, r9
1000d410:	4646      	mov	r6, r8
1000d412:	b4c0      	push	{r6, r7}
1000d414:	0005      	movs	r5, r0
1000d416:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d418:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d41a:	2300      	movs	r3, #0
1000d41c:	6043      	str	r3, [r0, #4]
1000d41e:	6083      	str	r3, [r0, #8]
1000d420:	60c3      	str	r3, [r0, #12]
1000d422:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d424:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d426:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d428:	2200      	movs	r2, #0
1000d42a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d42c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d42e:	3320      	adds	r3, #32
1000d430:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d432:	3301      	adds	r3, #1
1000d434:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d436:	3301      	adds	r3, #1
1000d438:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d43a:	4b55      	ldr	r3, [pc, #340]	; (1000d590 <uart_init+0x184>)
1000d43c:	4299      	cmp	r1, r3
1000d43e:	d118      	bne.n	1000d472 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d440:	2009      	movs	r0, #9
1000d442:	4c54      	ldr	r4, [pc, #336]	; (1000d594 <uart_init+0x188>)
1000d444:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d446:	200a      	movs	r0, #10
1000d448:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d44a:	2009      	movs	r0, #9
1000d44c:	4c52      	ldr	r4, [pc, #328]	; (1000d598 <uart_init+0x18c>)
1000d44e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d450:	200a      	movs	r0, #10
1000d452:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d454:	4b51      	ldr	r3, [pc, #324]	; (1000d59c <uart_init+0x190>)
1000d456:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d458:	4951      	ldr	r1, [pc, #324]	; (1000d5a0 <uart_init+0x194>)
1000d45a:	2010      	movs	r0, #16
1000d45c:	4c51      	ldr	r4, [pc, #324]	; (1000d5a4 <uart_init+0x198>)
1000d45e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d460:	4951      	ldr	r1, [pc, #324]	; (1000d5a8 <uart_init+0x19c>)
1000d462:	2011      	movs	r0, #17
1000d464:	47a0      	blx	r4
1000d466:	4b51      	ldr	r3, [pc, #324]	; (1000d5ac <uart_init+0x1a0>)
1000d468:	2201      	movs	r2, #1
1000d46a:	601a      	str	r2, [r3, #0]
1000d46c:	3201      	adds	r2, #1
1000d46e:	601a      	str	r2, [r3, #0]
1000d470:	e01a      	b.n	1000d4a8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d472:	4b4f      	ldr	r3, [pc, #316]	; (1000d5b0 <uart_init+0x1a4>)
1000d474:	4299      	cmp	r1, r3
1000d476:	d117      	bne.n	1000d4a8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d478:	200b      	movs	r0, #11
1000d47a:	4c46      	ldr	r4, [pc, #280]	; (1000d594 <uart_init+0x188>)
1000d47c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d47e:	200c      	movs	r0, #12
1000d480:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d482:	200b      	movs	r0, #11
1000d484:	4c44      	ldr	r4, [pc, #272]	; (1000d598 <uart_init+0x18c>)
1000d486:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d488:	200c      	movs	r0, #12
1000d48a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d48c:	4b43      	ldr	r3, [pc, #268]	; (1000d59c <uart_init+0x190>)
1000d48e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d490:	4948      	ldr	r1, [pc, #288]	; (1000d5b4 <uart_init+0x1a8>)
1000d492:	2012      	movs	r0, #18
1000d494:	4c43      	ldr	r4, [pc, #268]	; (1000d5a4 <uart_init+0x198>)
1000d496:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d498:	4947      	ldr	r1, [pc, #284]	; (1000d5b8 <uart_init+0x1ac>)
1000d49a:	2013      	movs	r0, #19
1000d49c:	47a0      	blx	r4
1000d49e:	4b43      	ldr	r3, [pc, #268]	; (1000d5ac <uart_init+0x1a0>)
1000d4a0:	2204      	movs	r2, #4
1000d4a2:	601a      	str	r2, [r3, #0]
1000d4a4:	3204      	adds	r2, #4
1000d4a6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d4a8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d4aa:	2204      	movs	r2, #4
1000d4ac:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d4ae:	2b00      	cmp	r3, #0
1000d4b0:	d152      	bne.n	1000d558 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d4b2:	3302      	adds	r3, #2
1000d4b4:	4698      	mov	r8, r3
1000d4b6:	e04f      	b.n	1000d558 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d4b8:	8a31      	ldrh	r1, [r6, #16]
1000d4ba:	ce01      	ldmia	r6!, {r0}
1000d4bc:	b2c0      	uxtb	r0, r0
1000d4be:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d4c0:	3401      	adds	r4, #1
1000d4c2:	b2e4      	uxtb	r4, r4
1000d4c4:	4544      	cmp	r4, r8
1000d4c6:	d3f7      	bcc.n	1000d4b8 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d4c8:	682b      	ldr	r3, [r5, #0]
1000d4ca:	7d1a      	ldrb	r2, [r3, #20]
1000d4cc:	07d2      	lsls	r2, r2, #31
1000d4ce:	d504      	bpl.n	1000d4da <uart_init+0xce>
1000d4d0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d4d2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d4d4:	7d1a      	ldrb	r2, [r3, #20]
1000d4d6:	420a      	tst	r2, r1
1000d4d8:	d1fb      	bne.n	1000d4d2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d4da:	2100      	movs	r1, #0
1000d4dc:	2220      	movs	r2, #32
1000d4de:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d4e0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d4e2:	1e59      	subs	r1, r3, #1
1000d4e4:	418b      	sbcs	r3, r1
1000d4e6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d4e8:	793b      	ldrb	r3, [r7, #4]
1000d4ea:	797a      	ldrb	r2, [r7, #5]
1000d4ec:	4313      	orrs	r3, r2
1000d4ee:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d4f0:	79ba      	ldrb	r2, [r7, #6]
1000d4f2:	2a02      	cmp	r2, #2
1000d4f4:	d00d      	beq.n	1000d512 <uart_init+0x106>
1000d4f6:	b2d1      	uxtb	r1, r2
1000d4f8:	2902      	cmp	r1, #2
1000d4fa:	d802      	bhi.n	1000d502 <uart_init+0xf6>
1000d4fc:	2a01      	cmp	r2, #1
1000d4fe:	d005      	beq.n	1000d50c <uart_init+0x100>
1000d500:	e00f      	b.n	1000d522 <uart_init+0x116>
1000d502:	2a03      	cmp	r2, #3
1000d504:	d008      	beq.n	1000d518 <uart_init+0x10c>
1000d506:	2a04      	cmp	r2, #4
1000d508:	d009      	beq.n	1000d51e <uart_init+0x112>
1000d50a:	e00a      	b.n	1000d522 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d50c:	2202      	movs	r2, #2
1000d50e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d510:	e007      	b.n	1000d522 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d512:	2206      	movs	r2, #6
1000d514:	4313      	orrs	r3, r2
			break;
1000d516:	e004      	b.n	1000d522 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d518:	220a      	movs	r2, #10
1000d51a:	4313      	orrs	r3, r2
			break;
1000d51c:	e001      	b.n	1000d522 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d51e:	220e      	movs	r2, #14
1000d520:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d522:	2220      	movs	r2, #32
1000d524:	6829      	ldr	r1, [r5, #0]
1000d526:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d528:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d52a:	4b24      	ldr	r3, [pc, #144]	; (1000d5bc <uart_init+0x1b0>)
1000d52c:	4798      	blx	r3
1000d52e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d530:	0031      	movs	r1, r6
1000d532:	4b23      	ldr	r3, [pc, #140]	; (1000d5c0 <uart_init+0x1b4>)
1000d534:	4798      	blx	r3
1000d536:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d538:	0400      	lsls	r0, r0, #16
1000d53a:	0c00      	lsrs	r0, r0, #16
1000d53c:	4370      	muls	r0, r6
1000d53e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d540:	0931      	lsrs	r1, r6, #4
1000d542:	4288      	cmp	r0, r1
1000d544:	d906      	bls.n	1000d554 <uart_init+0x148>
1000d546:	2300      	movs	r3, #0
		i++;
1000d548:	3301      	adds	r3, #1
1000d54a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d54c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d54e:	4288      	cmp	r0, r1
1000d550:	d8fa      	bhi.n	1000d548 <uart_init+0x13c>
1000d552:	e007      	b.n	1000d564 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d554:	2300      	movs	r3, #0
1000d556:	e005      	b.n	1000d564 <uart_init+0x158>
1000d558:	003e      	movs	r6, r7
1000d55a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d55c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d55e:	4b19      	ldr	r3, [pc, #100]	; (1000d5c4 <uart_init+0x1b8>)
1000d560:	4699      	mov	r9, r3
1000d562:	e7a9      	b.n	1000d4b8 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d564:	2100      	movs	r1, #0
1000d566:	2028      	movs	r0, #40	; 0x28
1000d568:	682c      	ldr	r4, [r5, #0]
1000d56a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d56c:	3301      	adds	r3, #1
1000d56e:	071b      	lsls	r3, r3, #28
1000d570:	0f5b      	lsrs	r3, r3, #29
1000d572:	00d2      	lsls	r2, r2, #3
1000d574:	4313      	orrs	r3, r2
1000d576:	b29b      	uxth	r3, r3
1000d578:	682a      	ldr	r2, [r5, #0]
1000d57a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d57c:	682b      	ldr	r3, [r5, #0]
1000d57e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d580:	682b      	ldr	r3, [r5, #0]
1000d582:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d584:	2000      	movs	r0, #0
1000d586:	bc0c      	pop	{r2, r3}
1000d588:	4690      	mov	r8, r2
1000d58a:	4699      	mov	r9, r3
1000d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d58e:	46c0      	nop			; (mov r8, r8)
1000d590:	40004000 	.word	0x40004000
1000d594:	1000cd41 	.word	0x1000cd41
1000d598:	1000c679 	.word	0x1000c679
1000d59c:	1001a270 	.word	0x1001a270
1000d5a0:	1000d1b9 	.word	0x1000d1b9
1000d5a4:	1000d1a9 	.word	0x1000d1a9
1000d5a8:	1000d241 	.word	0x1000d241
1000d5ac:	e000e100 	.word	0xe000e100
1000d5b0:	40005000 	.word	0x40005000
1000d5b4:	1000d2cd 	.word	0x1000d2cd
1000d5b8:	1000d355 	.word	0x1000d355
1000d5bc:	1000c66d 	.word	0x1000c66d
1000d5c0:	10012fe5 	.word	0x10012fe5
1000d5c4:	1000c2c9 	.word	0x1000c2c9

1000d5c8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d5c8:	6802      	ldr	r2, [r0, #0]
1000d5ca:	2001      	movs	r0, #1
1000d5cc:	7913      	ldrb	r3, [r2, #4]
1000d5ce:	4203      	tst	r3, r0
1000d5d0:	d0fc      	beq.n	1000d5cc <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d5d2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d5d4:	2000      	movs	r0, #0
1000d5d6:	4770      	bx	lr

1000d5d8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d5d8:	6802      	ldr	r2, [r0, #0]
1000d5da:	2001      	movs	r0, #1
1000d5dc:	7d13      	ldrb	r3, [r2, #20]
1000d5de:	4203      	tst	r3, r0
1000d5e0:	d0fc      	beq.n	1000d5dc <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d5e2:	7c13      	ldrb	r3, [r2, #16]
1000d5e4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d5e6:	2000      	movs	r0, #0
1000d5e8:	4770      	bx	lr
1000d5ea:	46c0      	nop			; (mov r8, r8)

1000d5ec <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d5ec:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d5ee:	2a00      	cmp	r2, #0
1000d5f0:	d00d      	beq.n	1000d60e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d5f2:	330b      	adds	r3, #11
1000d5f4:	5cc3      	ldrb	r3, [r0, r3]
1000d5f6:	b2db      	uxtb	r3, r3
1000d5f8:	2b05      	cmp	r3, #5
1000d5fa:	d008      	beq.n	1000d60e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d5fc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d5fe:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d600:	2205      	movs	r2, #5
1000d602:	2322      	movs	r3, #34	; 0x22
1000d604:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d606:	6803      	ldr	r3, [r0, #0]
1000d608:	3a04      	subs	r2, #4
1000d60a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d60c:	2300      	movs	r3, #0
}
1000d60e:	0018      	movs	r0, r3
1000d610:	4770      	bx	lr
1000d612:	46c0      	nop			; (mov r8, r8)

1000d614 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d614:	0093      	lsls	r3, r2, #2
1000d616:	18c3      	adds	r3, r0, r3
1000d618:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d61a:	2120      	movs	r1, #32
1000d61c:	2301      	movs	r3, #1
1000d61e:	4093      	lsls	r3, r2
1000d620:	5c42      	ldrb	r2, [r0, r1]
1000d622:	4313      	orrs	r3, r2
1000d624:	5443      	strb	r3, [r0, r1]
}
1000d626:	4770      	bx	lr

1000d628 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d628:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d62a:	2221      	movs	r2, #33	; 0x21
1000d62c:	2301      	movs	r3, #1
1000d62e:	408b      	lsls	r3, r1
1000d630:	5c84      	ldrb	r4, [r0, r2]
1000d632:	4323      	orrs	r3, r4
1000d634:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d636:	2901      	cmp	r1, #1
1000d638:	d104      	bne.n	1000d644 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d63a:	6802      	ldr	r2, [r0, #0]
1000d63c:	7a11      	ldrb	r1, [r2, #8]
1000d63e:	2320      	movs	r3, #32
1000d640:	430b      	orrs	r3, r1
1000d642:	7213      	strb	r3, [r2, #8]
	}
}
1000d644:	bd10      	pop	{r4, pc}
1000d646:	46c0      	nop			; (mov r8, r8)

1000d648 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d648:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d64a:	2201      	movs	r2, #1
1000d64c:	408a      	lsls	r2, r1
1000d64e:	2421      	movs	r4, #33	; 0x21
1000d650:	5d03      	ldrb	r3, [r0, r4]
1000d652:	4393      	bics	r3, r2
1000d654:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d656:	2901      	cmp	r1, #1
1000d658:	d104      	bne.n	1000d664 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d65a:	6802      	ldr	r2, [r0, #0]
1000d65c:	7a13      	ldrb	r3, [r2, #8]
1000d65e:	311f      	adds	r1, #31
1000d660:	438b      	bics	r3, r1
1000d662:	7213      	strb	r3, [r2, #8]
	}

}
1000d664:	bd10      	pop	{r4, pc}
1000d666:	46c0      	nop			; (mov r8, r8)

1000d668 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d668:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d66a:	4647      	mov	r7, r8
1000d66c:	b480      	push	{r7}
1000d66e:	000c      	movs	r4, r1
1000d670:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d672:	2800      	cmp	r0, #0
1000d674:	d10d      	bne.n	1000d692 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d676:	2a00      	cmp	r2, #0
1000d678:	dd0e      	ble.n	1000d698 <_read+0x30>
1000d67a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d67c:	4e08      	ldr	r6, [pc, #32]	; (1000d6a0 <_read+0x38>)
1000d67e:	4d09      	ldr	r5, [pc, #36]	; (1000d6a4 <_read+0x3c>)
1000d680:	6830      	ldr	r0, [r6, #0]
1000d682:	0021      	movs	r1, r4
1000d684:	682b      	ldr	r3, [r5, #0]
1000d686:	4798      	blx	r3
		ptr++;
1000d688:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d68a:	42a7      	cmp	r7, r4
1000d68c:	d1f8      	bne.n	1000d680 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d68e:	4640      	mov	r0, r8
1000d690:	e003      	b.n	1000d69a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d692:	2001      	movs	r0, #1
1000d694:	4240      	negs	r0, r0
1000d696:	e000      	b.n	1000d69a <_read+0x32>
	}

	for (; len > 0; --len) {
1000d698:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d69a:	bc04      	pop	{r2}
1000d69c:	4690      	mov	r8, r2
1000d69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6a0:	1001a280 	.word	0x1001a280
1000d6a4:	1001a278 	.word	0x1001a278

1000d6a8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6aa:	4647      	mov	r7, r8
1000d6ac:	b480      	push	{r7}
1000d6ae:	000e      	movs	r6, r1
1000d6b0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d6b2:	3801      	subs	r0, #1
1000d6b4:	2802      	cmp	r0, #2
1000d6b6:	d811      	bhi.n	1000d6dc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d6b8:	2a00      	cmp	r2, #0
1000d6ba:	d012      	beq.n	1000d6e2 <_write+0x3a>
1000d6bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d6be:	4b0c      	ldr	r3, [pc, #48]	; (1000d6f0 <_write+0x48>)
1000d6c0:	4698      	mov	r8, r3
1000d6c2:	4f0c      	ldr	r7, [pc, #48]	; (1000d6f4 <_write+0x4c>)
1000d6c4:	4643      	mov	r3, r8
1000d6c6:	6818      	ldr	r0, [r3, #0]
1000d6c8:	5d31      	ldrb	r1, [r6, r4]
1000d6ca:	683b      	ldr	r3, [r7, #0]
1000d6cc:	4798      	blx	r3
1000d6ce:	2800      	cmp	r0, #0
1000d6d0:	db09      	blt.n	1000d6e6 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d6d2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d6d4:	42a5      	cmp	r5, r4
1000d6d6:	d1f5      	bne.n	1000d6c4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d6d8:	0020      	movs	r0, r4
1000d6da:	e006      	b.n	1000d6ea <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d6dc:	2001      	movs	r0, #1
1000d6de:	4240      	negs	r0, r0
1000d6e0:	e003      	b.n	1000d6ea <_write+0x42>
	}

	for (; len != 0; --len) {
1000d6e2:	2000      	movs	r0, #0
1000d6e4:	e001      	b.n	1000d6ea <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d6e6:	2001      	movs	r0, #1
1000d6e8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d6ea:	bc04      	pop	{r2}
1000d6ec:	4690      	mov	r8, r2
1000d6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6f0:	1001a280 	.word	0x1001a280
1000d6f4:	1001a27c 	.word	0x1001a27c

1000d6f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d6f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d6fa:	4a06      	ldr	r2, [pc, #24]	; (1000d714 <_sbrk+0x1c>)
1000d6fc:	6812      	ldr	r2, [r2, #0]
1000d6fe:	2a00      	cmp	r2, #0
1000d700:	d102      	bne.n	1000d708 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d702:	4905      	ldr	r1, [pc, #20]	; (1000d718 <_sbrk+0x20>)
1000d704:	4a03      	ldr	r2, [pc, #12]	; (1000d714 <_sbrk+0x1c>)
1000d706:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d708:	4a02      	ldr	r2, [pc, #8]	; (1000d714 <_sbrk+0x1c>)
1000d70a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d70c:	18c3      	adds	r3, r0, r3
1000d70e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d710:	4770      	bx	lr
1000d712:	46c0      	nop			; (mov r8, r8)
1000d714:	10018520 	.word	0x10018520
1000d718:	1001cb88 	.word	0x1001cb88

1000d71c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d71c:	2001      	movs	r0, #1
1000d71e:	4240      	negs	r0, r0
1000d720:	4770      	bx	lr
1000d722:	46c0      	nop			; (mov r8, r8)

1000d724 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d724:	2380      	movs	r3, #128	; 0x80
1000d726:	019b      	lsls	r3, r3, #6
1000d728:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d72a:	2000      	movs	r0, #0
1000d72c:	4770      	bx	lr
1000d72e:	46c0      	nop			; (mov r8, r8)

1000d730 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d730:	2001      	movs	r0, #1
1000d732:	4770      	bx	lr

1000d734 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d734:	2000      	movs	r0, #0
1000d736:	4770      	bx	lr

1000d738 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d738:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d73a:	4804      	ldr	r0, [pc, #16]	; (1000d74c <ble_undefined_event_handler+0x14>)
1000d73c:	4b04      	ldr	r3, [pc, #16]	; (1000d750 <ble_undefined_event_handler+0x18>)
1000d73e:	4798      	blx	r3
1000d740:	4804      	ldr	r0, [pc, #16]	; (1000d754 <ble_undefined_event_handler+0x1c>)
1000d742:	4b05      	ldr	r3, [pc, #20]	; (1000d758 <ble_undefined_event_handler+0x20>)
1000d744:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d746:	2000      	movs	r0, #0
1000d748:	bd10      	pop	{r4, pc}
1000d74a:	46c0      	nop			; (mov r8, r8)
1000d74c:	100164f8 	.word	0x100164f8
1000d750:	10015351 	.word	0x10015351
1000d754:	10017648 	.word	0x10017648
1000d758:	10015231 	.word	0x10015231

1000d75c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d75c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d75e:	7800      	ldrb	r0, [r0, #0]
1000d760:	2800      	cmp	r0, #0
1000d762:	d006      	beq.n	1000d772 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d764:	4803      	ldr	r0, [pc, #12]	; (1000d774 <ble_scan_report_handler+0x18>)
1000d766:	4b04      	ldr	r3, [pc, #16]	; (1000d778 <ble_scan_report_handler+0x1c>)
1000d768:	4798      	blx	r3
1000d76a:	4804      	ldr	r0, [pc, #16]	; (1000d77c <ble_scan_report_handler+0x20>)
1000d76c:	4b04      	ldr	r3, [pc, #16]	; (1000d780 <ble_scan_report_handler+0x24>)
1000d76e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d770:	20e2      	movs	r0, #226	; 0xe2
}
1000d772:	bd10      	pop	{r4, pc}
1000d774:	100164f8 	.word	0x100164f8
1000d778:	10015351 	.word	0x10015351
1000d77c:	10017664 	.word	0x10017664
1000d780:	10015231 	.word	0x10015231

1000d784 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d784:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d786:	7800      	ldrb	r0, [r0, #0]
1000d788:	2800      	cmp	r0, #0
1000d78a:	d006      	beq.n	1000d79a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d78c:	4803      	ldr	r0, [pc, #12]	; (1000d79c <ble_adv_report_handler+0x18>)
1000d78e:	4b04      	ldr	r3, [pc, #16]	; (1000d7a0 <ble_adv_report_handler+0x1c>)
1000d790:	4798      	blx	r3
1000d792:	4804      	ldr	r0, [pc, #16]	; (1000d7a4 <ble_adv_report_handler+0x20>)
1000d794:	4b04      	ldr	r3, [pc, #16]	; (1000d7a8 <ble_adv_report_handler+0x24>)
1000d796:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d798:	20e2      	movs	r0, #226	; 0xe2
}
1000d79a:	bd10      	pop	{r4, pc}
1000d79c:	100164f8 	.word	0x100164f8
1000d7a0:	10015351 	.word	0x10015351
1000d7a4:	10017678 	.word	0x10017678
1000d7a8:	10015231 	.word	0x10015231

1000d7ac <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d7ac:	b510      	push	{r4, lr}
1000d7ae:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d7b0:	4804      	ldr	r0, [pc, #16]	; (1000d7c4 <ble_mtu_changed_indication_handler+0x18>)
1000d7b2:	4b05      	ldr	r3, [pc, #20]	; (1000d7c8 <ble_mtu_changed_indication_handler+0x1c>)
1000d7b4:	4798      	blx	r3
1000d7b6:	8862      	ldrh	r2, [r4, #2]
1000d7b8:	8821      	ldrh	r1, [r4, #0]
1000d7ba:	4804      	ldr	r0, [pc, #16]	; (1000d7cc <ble_mtu_changed_indication_handler+0x20>)
1000d7bc:	4b04      	ldr	r3, [pc, #16]	; (1000d7d0 <ble_mtu_changed_indication_handler+0x24>)
1000d7be:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d7c0:	2000      	movs	r0, #0
1000d7c2:	bd10      	pop	{r4, pc}
1000d7c4:	100164f8 	.word	0x100164f8
1000d7c8:	10015351 	.word	0x10015351
1000d7cc:	1001768c 	.word	0x1001768c
1000d7d0:	10015231 	.word	0x10015231

1000d7d4 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d7d4:	b570      	push	{r4, r5, r6, lr}
1000d7d6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d7d8:	78c5      	ldrb	r5, [r0, #3]
1000d7da:	2d00      	cmp	r5, #0
1000d7dc:	d108      	bne.n	1000d7f0 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d7de:	480a      	ldr	r0, [pc, #40]	; (1000d808 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d7e0:	4b0a      	ldr	r3, [pc, #40]	; (1000d80c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d7e2:	4798      	blx	r3
1000d7e4:	78a2      	ldrb	r2, [r4, #2]
1000d7e6:	8821      	ldrh	r1, [r4, #0]
1000d7e8:	4809      	ldr	r0, [pc, #36]	; (1000d810 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d7ea:	4b0a      	ldr	r3, [pc, #40]	; (1000d814 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d7ec:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d7ee:	e008      	b.n	1000d802 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d7f0:	4805      	ldr	r0, [pc, #20]	; (1000d808 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d7f2:	4b06      	ldr	r3, [pc, #24]	; (1000d80c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d7f4:	4798      	blx	r3
1000d7f6:	78a2      	ldrb	r2, [r4, #2]
1000d7f8:	8821      	ldrh	r1, [r4, #0]
1000d7fa:	4807      	ldr	r0, [pc, #28]	; (1000d818 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d7fc:	4b05      	ldr	r3, [pc, #20]	; (1000d814 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d7fe:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d800:	25e2      	movs	r5, #226	; 0xe2
}
1000d802:	0028      	movs	r0, r5
1000d804:	bd70      	pop	{r4, r5, r6, pc}
1000d806:	46c0      	nop			; (mov r8, r8)
1000d808:	100164f8 	.word	0x100164f8
1000d80c:	10015351 	.word	0x10015351
1000d810:	100176c4 	.word	0x100176c4
1000d814:	10015231 	.word	0x10015231
1000d818:	100176f4 	.word	0x100176f4

1000d81c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d81c:	b570      	push	{r4, r5, r6, lr}
1000d81e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d820:	78c5      	ldrb	r5, [r0, #3]
1000d822:	2d00      	cmp	r5, #0
1000d824:	d108      	bne.n	1000d838 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d826:	480a      	ldr	r0, [pc, #40]	; (1000d850 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d828:	4b0a      	ldr	r3, [pc, #40]	; (1000d854 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d82a:	4798      	blx	r3
1000d82c:	78a2      	ldrb	r2, [r4, #2]
1000d82e:	8821      	ldrh	r1, [r4, #0]
1000d830:	4809      	ldr	r0, [pc, #36]	; (1000d858 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d832:	4b0a      	ldr	r3, [pc, #40]	; (1000d85c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d834:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d836:	e008      	b.n	1000d84a <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d838:	4805      	ldr	r0, [pc, #20]	; (1000d850 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d83a:	4b06      	ldr	r3, [pc, #24]	; (1000d854 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d83c:	4798      	blx	r3
1000d83e:	78a2      	ldrb	r2, [r4, #2]
1000d840:	8821      	ldrh	r1, [r4, #0]
1000d842:	4807      	ldr	r0, [pc, #28]	; (1000d860 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d844:	4b05      	ldr	r3, [pc, #20]	; (1000d85c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d846:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d848:	25e2      	movs	r5, #226	; 0xe2
}
1000d84a:	0028      	movs	r0, r5
1000d84c:	bd70      	pop	{r4, r5, r6, pc}
1000d84e:	46c0      	nop			; (mov r8, r8)
1000d850:	100164f8 	.word	0x100164f8
1000d854:	10015351 	.word	0x10015351
1000d858:	1001772c 	.word	0x1001772c
1000d85c:	10015231 	.word	0x10015231
1000d860:	10017768 	.word	0x10017768

1000d864 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d866:	0006      	movs	r6, r0
1000d868:	4c1d      	ldr	r4, [pc, #116]	; (1000d8e0 <ble_disconnected_state_handler+0x7c>)
1000d86a:	239b      	movs	r3, #155	; 0x9b
1000d86c:	009b      	lsls	r3, r3, #2
1000d86e:	18e7      	adds	r7, r4, r3
1000d870:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d872:	0023      	movs	r3, r4
1000d874:	3b56      	subs	r3, #86	; 0x56
1000d876:	881a      	ldrh	r2, [r3, #0]
1000d878:	8833      	ldrh	r3, [r6, #0]
1000d87a:	429a      	cmp	r2, r3
1000d87c:	d122      	bne.n	1000d8c4 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d87e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d880:	2b05      	cmp	r3, #5
1000d882:	d001      	beq.n	1000d888 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d884:	2b08      	cmp	r3, #8
1000d886:	d102      	bne.n	1000d88e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d888:	2301      	movs	r3, #1
1000d88a:	702b      	strb	r3, [r5, #0]
1000d88c:	e01a      	b.n	1000d8c4 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d88e:	2b07      	cmp	r3, #7
1000d890:	d80f      	bhi.n	1000d8b2 <ble_disconnected_state_handler+0x4e>
1000d892:	009b      	lsls	r3, r3, #2
1000d894:	4a13      	ldr	r2, [pc, #76]	; (1000d8e4 <ble_disconnected_state_handler+0x80>)
1000d896:	58d3      	ldr	r3, [r2, r3]
1000d898:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d89a:	2300      	movs	r3, #0
1000d89c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d89e:	4b12      	ldr	r3, [pc, #72]	; (1000d8e8 <ble_disconnected_state_handler+0x84>)
1000d8a0:	781b      	ldrb	r3, [r3, #0]
1000d8a2:	2b00      	cmp	r3, #0
1000d8a4:	d00e      	beq.n	1000d8c4 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d8a6:	4a10      	ldr	r2, [pc, #64]	; (1000d8e8 <ble_disconnected_state_handler+0x84>)
1000d8a8:	7813      	ldrb	r3, [r2, #0]
1000d8aa:	3b01      	subs	r3, #1
1000d8ac:	b2db      	uxtb	r3, r3
1000d8ae:	7013      	strb	r3, [r2, #0]
1000d8b0:	e008      	b.n	1000d8c4 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d8b2:	480e      	ldr	r0, [pc, #56]	; (1000d8ec <ble_disconnected_state_handler+0x88>)
1000d8b4:	4b0e      	ldr	r3, [pc, #56]	; (1000d8f0 <ble_disconnected_state_handler+0x8c>)
1000d8b6:	4798      	blx	r3
1000d8b8:	7829      	ldrb	r1, [r5, #0]
1000d8ba:	480e      	ldr	r0, [pc, #56]	; (1000d8f4 <ble_disconnected_state_handler+0x90>)
1000d8bc:	4b0e      	ldr	r3, [pc, #56]	; (1000d8f8 <ble_disconnected_state_handler+0x94>)
1000d8be:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d8c0:	2300      	movs	r3, #0
1000d8c2:	702b      	strb	r3, [r5, #0]
1000d8c4:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8c6:	42bc      	cmp	r4, r7
1000d8c8:	d1d2      	bne.n	1000d870 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d8ca:	4808      	ldr	r0, [pc, #32]	; (1000d8ec <ble_disconnected_state_handler+0x88>)
1000d8cc:	4b08      	ldr	r3, [pc, #32]	; (1000d8f0 <ble_disconnected_state_handler+0x8c>)
1000d8ce:	4798      	blx	r3
1000d8d0:	8832      	ldrh	r2, [r6, #0]
1000d8d2:	78b1      	ldrb	r1, [r6, #2]
1000d8d4:	4809      	ldr	r0, [pc, #36]	; (1000d8fc <ble_disconnected_state_handler+0x98>)
1000d8d6:	4b08      	ldr	r3, [pc, #32]	; (1000d8f8 <ble_disconnected_state_handler+0x94>)
1000d8d8:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d8da:	2000      	movs	r0, #0
1000d8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d8de:	46c0      	nop			; (mov r8, r8)
1000d8e0:	1001a2fa 	.word	0x1001a2fa
1000d8e4:	100174e4 	.word	0x100174e4
1000d8e8:	1001a508 	.word	0x1001a508
1000d8ec:	100164f8 	.word	0x100164f8
1000d8f0:	10015351 	.word	0x10015351
1000d8f4:	100177a4 	.word	0x100177a4
1000d8f8:	10015231 	.word	0x10015231
1000d8fc:	100177bc 	.word	0x100177bc

1000d900 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d900:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d902:	4804      	ldr	r0, [pc, #16]	; (1000d914 <ble_conn_param_update+0x14>)
1000d904:	4b04      	ldr	r3, [pc, #16]	; (1000d918 <ble_conn_param_update+0x18>)
1000d906:	4798      	blx	r3
1000d908:	4804      	ldr	r0, [pc, #16]	; (1000d91c <ble_conn_param_update+0x1c>)
1000d90a:	4b05      	ldr	r3, [pc, #20]	; (1000d920 <ble_conn_param_update+0x20>)
1000d90c:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d90e:	2000      	movs	r0, #0
1000d910:	bd10      	pop	{r4, pc}
1000d912:	46c0      	nop			; (mov r8, r8)
1000d914:	100164f8 	.word	0x100164f8
1000d918:	10015351 	.word	0x10015351
1000d91c:	100177ec 	.word	0x100177ec
1000d920:	10015231 	.word	0x10015231

1000d924 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d926:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d928:	8801      	ldrh	r1, [r0, #0]
1000d92a:	4b28      	ldr	r3, [pc, #160]	; (1000d9cc <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d92c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d92e:	891a      	ldrh	r2, [r3, #8]
1000d930:	428a      	cmp	r2, r1
1000d932:	d104      	bne.n	1000d93e <ble_encryption_status_change_handler+0x1a>
1000d934:	001a      	movs	r2, r3
1000d936:	325e      	adds	r2, #94	; 0x5e
1000d938:	7812      	ldrb	r2, [r2, #0]
1000d93a:	2a06      	cmp	r2, #6
1000d93c:	d02e      	beq.n	1000d99c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d93e:	3401      	adds	r4, #1
1000d940:	b2e4      	uxtb	r4, r4
1000d942:	337c      	adds	r3, #124	; 0x7c
1000d944:	2c05      	cmp	r4, #5
1000d946:	d1f2      	bne.n	1000d92e <ble_encryption_status_change_handler+0xa>
1000d948:	e039      	b.n	1000d9be <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d94a:	4920      	ldr	r1, [pc, #128]	; (1000d9cc <ble_encryption_status_change_handler+0xa8>)
1000d94c:	0163      	lsls	r3, r4, #5
1000d94e:	1b1a      	subs	r2, r3, r4
1000d950:	0092      	lsls	r2, r2, #2
1000d952:	188a      	adds	r2, r1, r2
1000d954:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d956:	0014      	movs	r4, r2
1000d958:	345e      	adds	r4, #94	; 0x5e
1000d95a:	2307      	movs	r3, #7
1000d95c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d95e:	481c      	ldr	r0, [pc, #112]	; (1000d9d0 <ble_encryption_status_change_handler+0xac>)
1000d960:	4b1c      	ldr	r3, [pc, #112]	; (1000d9d4 <ble_encryption_status_change_handler+0xb0>)
1000d962:	4798      	blx	r3
1000d964:	481c      	ldr	r0, [pc, #112]	; (1000d9d8 <ble_encryption_status_change_handler+0xb4>)
1000d966:	4b1d      	ldr	r3, [pc, #116]	; (1000d9dc <ble_encryption_status_change_handler+0xb8>)
1000d968:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d96a:	25e2      	movs	r5, #226	; 0xe2
1000d96c:	e02b      	b.n	1000d9c6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d96e:	4818      	ldr	r0, [pc, #96]	; (1000d9d0 <ble_encryption_status_change_handler+0xac>)
1000d970:	4b18      	ldr	r3, [pc, #96]	; (1000d9d4 <ble_encryption_status_change_handler+0xb0>)
1000d972:	4798      	blx	r3
1000d974:	481a      	ldr	r0, [pc, #104]	; (1000d9e0 <ble_encryption_status_change_handler+0xbc>)
1000d976:	4b19      	ldr	r3, [pc, #100]	; (1000d9dc <ble_encryption_status_change_handler+0xb8>)
1000d978:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d97a:	4914      	ldr	r1, [pc, #80]	; (1000d9cc <ble_encryption_status_change_handler+0xa8>)
1000d97c:	0163      	lsls	r3, r4, #5
1000d97e:	1b1a      	subs	r2, r3, r4
1000d980:	0092      	lsls	r2, r2, #2
1000d982:	188a      	adds	r2, r1, r2
1000d984:	0010      	movs	r0, r2
1000d986:	305e      	adds	r0, #94	; 0x5e
1000d988:	2708      	movs	r7, #8
1000d98a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d98c:	78f0      	ldrb	r0, [r6, #3]
1000d98e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d990:	78b2      	ldrb	r2, [r6, #2]
1000d992:	1b1c      	subs	r4, r3, r4
1000d994:	00a4      	lsls	r4, r4, #2
1000d996:	190c      	adds	r4, r1, r4
1000d998:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d99a:	e014      	b.n	1000d9c6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d99c:	78b5      	ldrb	r5, [r6, #2]
1000d99e:	2d00      	cmp	r5, #0
1000d9a0:	d0e5      	beq.n	1000d96e <ble_encryption_status_change_handler+0x4a>
1000d9a2:	e7d2      	b.n	1000d94a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d9a4:	4e0a      	ldr	r6, [pc, #40]	; (1000d9d0 <ble_encryption_status_change_handler+0xac>)
1000d9a6:	0030      	movs	r0, r6
1000d9a8:	4d0a      	ldr	r5, [pc, #40]	; (1000d9d4 <ble_encryption_status_change_handler+0xb0>)
1000d9aa:	47a8      	blx	r5
1000d9ac:	480c      	ldr	r0, [pc, #48]	; (1000d9e0 <ble_encryption_status_change_handler+0xbc>)
1000d9ae:	4c0b      	ldr	r4, [pc, #44]	; (1000d9dc <ble_encryption_status_change_handler+0xb8>)
1000d9b0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d9b2:	0030      	movs	r0, r6
1000d9b4:	47a8      	blx	r5
1000d9b6:	480b      	ldr	r0, [pc, #44]	; (1000d9e4 <ble_encryption_status_change_handler+0xc0>)
1000d9b8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d9ba:	25e2      	movs	r5, #226	; 0xe2
1000d9bc:	e003      	b.n	1000d9c6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d9be:	78b5      	ldrb	r5, [r6, #2]
1000d9c0:	2d00      	cmp	r5, #0
1000d9c2:	d1c2      	bne.n	1000d94a <ble_encryption_status_change_handler+0x26>
1000d9c4:	e7ee      	b.n	1000d9a4 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d9c6:	0028      	movs	r0, r5
1000d9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d9ca:	46c0      	nop			; (mov r8, r8)
1000d9cc:	1001a29c 	.word	0x1001a29c
1000d9d0:	100164f8 	.word	0x100164f8
1000d9d4:	10015351 	.word	0x10015351
1000d9d8:	10017808 	.word	0x10017808
1000d9dc:	10015231 	.word	0x10015231
1000d9e0:	1001781c 	.word	0x1001781c
1000d9e4:	10017840 	.word	0x10017840

1000d9e8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d9e8:	b530      	push	{r4, r5, lr}
1000d9ea:	b085      	sub	sp, #20
1000d9ec:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d9ee:	4b1f      	ldr	r3, [pc, #124]	; (1000da6c <ble_scan_info_handler+0x84>)
1000d9f0:	781b      	ldrb	r3, [r3, #0]
1000d9f2:	b2db      	uxtb	r3, r3
1000d9f4:	2b13      	cmp	r3, #19
1000d9f6:	d824      	bhi.n	1000da42 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d9f8:	4d1c      	ldr	r5, [pc, #112]	; (1000da6c <ble_scan_info_handler+0x84>)
1000d9fa:	782b      	ldrb	r3, [r5, #0]
1000d9fc:	b2db      	uxtb	r3, r3
1000d9fe:	0098      	lsls	r0, r3, #2
1000da00:	18c0      	adds	r0, r0, r3
1000da02:	00c0      	lsls	r0, r0, #3
1000da04:	18c3      	adds	r3, r0, r3
1000da06:	481a      	ldr	r0, [pc, #104]	; (1000da70 <ble_scan_info_handler+0x88>)
1000da08:	1818      	adds	r0, r3, r0
1000da0a:	2229      	movs	r2, #41	; 0x29
1000da0c:	0021      	movs	r1, r4
1000da0e:	4b19      	ldr	r3, [pc, #100]	; (1000da74 <ble_scan_info_handler+0x8c>)
1000da10:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000da12:	4819      	ldr	r0, [pc, #100]	; (1000da78 <ble_scan_info_handler+0x90>)
1000da14:	4b19      	ldr	r3, [pc, #100]	; (1000da7c <ble_scan_info_handler+0x94>)
1000da16:	4798      	blx	r3
1000da18:	7829      	ldrb	r1, [r5, #0]
1000da1a:	b2c9      	uxtb	r1, r1
1000da1c:	79a3      	ldrb	r3, [r4, #6]
1000da1e:	79e2      	ldrb	r2, [r4, #7]
1000da20:	78a0      	ldrb	r0, [r4, #2]
1000da22:	9003      	str	r0, [sp, #12]
1000da24:	78e0      	ldrb	r0, [r4, #3]
1000da26:	9002      	str	r0, [sp, #8]
1000da28:	7920      	ldrb	r0, [r4, #4]
1000da2a:	9001      	str	r0, [sp, #4]
1000da2c:	7960      	ldrb	r0, [r4, #5]
1000da2e:	9000      	str	r0, [sp, #0]
1000da30:	4813      	ldr	r0, [pc, #76]	; (1000da80 <ble_scan_info_handler+0x98>)
1000da32:	4c14      	ldr	r4, [pc, #80]	; (1000da84 <ble_scan_info_handler+0x9c>)
1000da34:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000da36:	782b      	ldrb	r3, [r5, #0]
1000da38:	3301      	adds	r3, #1
1000da3a:	b2db      	uxtb	r3, r3
1000da3c:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000da3e:	2300      	movs	r3, #0
1000da40:	e011      	b.n	1000da66 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000da42:	480d      	ldr	r0, [pc, #52]	; (1000da78 <ble_scan_info_handler+0x90>)
1000da44:	4b0d      	ldr	r3, [pc, #52]	; (1000da7c <ble_scan_info_handler+0x94>)
1000da46:	4798      	blx	r3
1000da48:	480f      	ldr	r0, [pc, #60]	; (1000da88 <ble_scan_info_handler+0xa0>)
1000da4a:	4b0e      	ldr	r3, [pc, #56]	; (1000da84 <ble_scan_info_handler+0x9c>)
1000da4c:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000da4e:	4b0f      	ldr	r3, [pc, #60]	; (1000da8c <ble_scan_info_handler+0xa4>)
1000da50:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000da52:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000da54:	2800      	cmp	r0, #0
1000da56:	d006      	beq.n	1000da66 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000da58:	4807      	ldr	r0, [pc, #28]	; (1000da78 <ble_scan_info_handler+0x90>)
1000da5a:	4b08      	ldr	r3, [pc, #32]	; (1000da7c <ble_scan_info_handler+0x94>)
1000da5c:	4798      	blx	r3
1000da5e:	480c      	ldr	r0, [pc, #48]	; (1000da90 <ble_scan_info_handler+0xa8>)
1000da60:	4b08      	ldr	r3, [pc, #32]	; (1000da84 <ble_scan_info_handler+0x9c>)
1000da62:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000da64:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000da66:	0018      	movs	r0, r3
1000da68:	b005      	add	sp, #20
1000da6a:	bd30      	pop	{r4, r5, pc}
1000da6c:	10018e08 	.word	0x10018e08
1000da70:	1001a580 	.word	0x1001a580
1000da74:	100150d7 	.word	0x100150d7
1000da78:	100164f8 	.word	0x100164f8
1000da7c:	10015351 	.word	0x10015351
1000da80:	10017868 	.word	0x10017868
1000da84:	10015231 	.word	0x10015231
1000da88:	100178a4 	.word	0x100178a4
1000da8c:	100108f9 	.word	0x100108f9
1000da90:	100178dc 	.word	0x100178dc

1000da94 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000da94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da96:	465f      	mov	r7, fp
1000da98:	4656      	mov	r6, sl
1000da9a:	464d      	mov	r5, r9
1000da9c:	4644      	mov	r4, r8
1000da9e:	b4f0      	push	{r4, r5, r6, r7}
1000daa0:	b083      	sub	sp, #12
1000daa2:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000daa4:	8841      	ldrh	r1, [r0, #2]
1000daa6:	4b59      	ldr	r3, [pc, #356]	; (1000dc0c <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000daa8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000daaa:	891a      	ldrh	r2, [r3, #8]
1000daac:	428a      	cmp	r2, r1
1000daae:	d105      	bne.n	1000dabc <ble_pair_done_handler+0x28>
1000dab0:	001a      	movs	r2, r3
1000dab2:	325e      	adds	r2, #94	; 0x5e
1000dab4:	7812      	ldrb	r2, [r2, #0]
1000dab6:	2a03      	cmp	r2, #3
1000dab8:	d100      	bne.n	1000dabc <ble_pair_done_handler+0x28>
1000daba:	e09a      	b.n	1000dbf2 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dabc:	3401      	adds	r4, #1
1000dabe:	b2e4      	uxtb	r4, r4
1000dac0:	337c      	adds	r3, #124	; 0x7c
1000dac2:	2c05      	cmp	r4, #5
1000dac4:	d1f1      	bne.n	1000daaa <ble_pair_done_handler+0x16>
1000dac6:	e057      	b.n	1000db78 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dac8:	7821      	ldrb	r1, [r4, #0]
1000daca:	0030      	movs	r0, r6
1000dacc:	47b8      	blx	r7
1000dace:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000dad0:	454c      	cmp	r4, r9
1000dad2:	d1f9      	bne.n	1000dac8 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000dad4:	484e      	ldr	r0, [pc, #312]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000dad6:	4b4f      	ldr	r3, [pc, #316]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000dad8:	4798      	blx	r3
1000dada:	484f      	ldr	r0, [pc, #316]	; (1000dc18 <ble_pair_done_handler+0x184>)
1000dadc:	4b4f      	ldr	r3, [pc, #316]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000dade:	4798      	blx	r3
1000dae0:	002e      	movs	r6, r5
1000dae2:	3622      	adds	r6, #34	; 0x22
1000dae4:	002c      	movs	r4, r5
1000dae6:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000dae8:	4f4c      	ldr	r7, [pc, #304]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000daea:	7831      	ldrb	r1, [r6, #0]
1000daec:	484c      	ldr	r0, [pc, #304]	; (1000dc20 <ble_pair_done_handler+0x18c>)
1000daee:	47b8      	blx	r7
1000daf0:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000daf2:	42a6      	cmp	r6, r4
1000daf4:	d1f9      	bne.n	1000daea <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000daf6:	4846      	ldr	r0, [pc, #280]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000daf8:	4b46      	ldr	r3, [pc, #280]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000dafa:	4798      	blx	r3
1000dafc:	4849      	ldr	r0, [pc, #292]	; (1000dc24 <ble_pair_done_handler+0x190>)
1000dafe:	4b47      	ldr	r3, [pc, #284]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db00:	4798      	blx	r3
1000db02:	3542      	adds	r5, #66	; 0x42
1000db04:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000db06:	4e46      	ldr	r6, [pc, #280]	; (1000dc20 <ble_pair_done_handler+0x18c>)
1000db08:	4d44      	ldr	r5, [pc, #272]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db0a:	7821      	ldrb	r1, [r4, #0]
1000db0c:	0030      	movs	r0, r6
1000db0e:	47a8      	blx	r5
1000db10:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000db12:	42bc      	cmp	r4, r7
1000db14:	d1f9      	bne.n	1000db0a <ble_pair_done_handler+0x76>
1000db16:	e071      	b.n	1000dbfc <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000db18:	0163      	lsls	r3, r4, #5
1000db1a:	1b1c      	subs	r4, r3, r4
1000db1c:	00a4      	lsls	r4, r4, #2
1000db1e:	4b3b      	ldr	r3, [pc, #236]	; (1000dc0c <ble_pair_done_handler+0x178>)
1000db20:	191c      	adds	r4, r3, r4
1000db22:	345e      	adds	r4, #94	; 0x5e
1000db24:	7823      	ldrb	r3, [r4, #0]
1000db26:	2b01      	cmp	r3, #1
1000db28:	d915      	bls.n	1000db56 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000db2a:	4839      	ldr	r0, [pc, #228]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000db2c:	4b39      	ldr	r3, [pc, #228]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000db2e:	4798      	blx	r3
1000db30:	483d      	ldr	r0, [pc, #244]	; (1000dc28 <ble_pair_done_handler+0x194>)
1000db32:	4b3a      	ldr	r3, [pc, #232]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db34:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000db36:	8868      	ldrh	r0, [r5, #2]
1000db38:	2113      	movs	r1, #19
1000db3a:	4b3c      	ldr	r3, [pc, #240]	; (1000dc2c <ble_pair_done_handler+0x198>)
1000db3c:	4798      	blx	r3
1000db3e:	9001      	str	r0, [sp, #4]
1000db40:	2800      	cmp	r0, #0
1000db42:	d05b      	beq.n	1000dbfc <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000db44:	4832      	ldr	r0, [pc, #200]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000db46:	4b33      	ldr	r3, [pc, #204]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000db48:	4798      	blx	r3
1000db4a:	4839      	ldr	r0, [pc, #228]	; (1000dc30 <ble_pair_done_handler+0x19c>)
1000db4c:	4b33      	ldr	r3, [pc, #204]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db4e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000db50:	23e2      	movs	r3, #226	; 0xe2
1000db52:	9301      	str	r3, [sp, #4]
1000db54:	e052      	b.n	1000dbfc <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000db56:	2300      	movs	r3, #0
1000db58:	9301      	str	r3, [sp, #4]
1000db5a:	e04f      	b.n	1000dbfc <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000db5c:	4e2c      	ldr	r6, [pc, #176]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000db5e:	0030      	movs	r0, r6
1000db60:	4d2c      	ldr	r5, [pc, #176]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000db62:	47a8      	blx	r5
1000db64:	4833      	ldr	r0, [pc, #204]	; (1000dc34 <ble_pair_done_handler+0x1a0>)
1000db66:	4c2d      	ldr	r4, [pc, #180]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db68:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000db6a:	0030      	movs	r0, r6
1000db6c:	47a8      	blx	r5
1000db6e:	4832      	ldr	r0, [pc, #200]	; (1000dc38 <ble_pair_done_handler+0x1a4>)
1000db70:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000db72:	23e2      	movs	r3, #226	; 0xe2
1000db74:	9301      	str	r3, [sp, #4]
1000db76:	e041      	b.n	1000dbfc <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000db78:	792b      	ldrb	r3, [r5, #4]
1000db7a:	2b00      	cmp	r3, #0
1000db7c:	d1cc      	bne.n	1000db18 <ble_pair_done_handler+0x84>
1000db7e:	e7ed      	b.n	1000db5c <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000db80:	4823      	ldr	r0, [pc, #140]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000db82:	4b24      	ldr	r3, [pc, #144]	; (1000dc14 <ble_pair_done_handler+0x180>)
1000db84:	469b      	mov	fp, r3
1000db86:	4798      	blx	r3
1000db88:	482a      	ldr	r0, [pc, #168]	; (1000dc34 <ble_pair_done_handler+0x1a0>)
1000db8a:	4b24      	ldr	r3, [pc, #144]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000db8c:	469a      	mov	sl, r3
1000db8e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000db90:	782a      	ldrb	r2, [r5, #0]
1000db92:	4b1e      	ldr	r3, [pc, #120]	; (1000dc0c <ble_pair_done_handler+0x178>)
1000db94:	4698      	mov	r8, r3
1000db96:	0167      	lsls	r7, r4, #5
1000db98:	1b3b      	subs	r3, r7, r4
1000db9a:	009b      	lsls	r3, r3, #2
1000db9c:	4443      	add	r3, r8
1000db9e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000dba0:	792a      	ldrb	r2, [r5, #4]
1000dba2:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000dba4:	335e      	adds	r3, #94	; 0x5e
1000dba6:	2205      	movs	r2, #5
1000dba8:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000dbaa:	1b38      	subs	r0, r7, r4
1000dbac:	0080      	lsls	r0, r0, #2
1000dbae:	4440      	add	r0, r8
1000dbb0:	3036      	adds	r0, #54	; 0x36
1000dbb2:	320b      	adds	r2, #11
1000dbb4:	0029      	movs	r1, r5
1000dbb6:	3122      	adds	r1, #34	; 0x22
1000dbb8:	4b20      	ldr	r3, [pc, #128]	; (1000dc3c <ble_pair_done_handler+0x1a8>)
1000dbba:	4699      	mov	r9, r3
1000dbbc:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000dbbe:	1b38      	subs	r0, r7, r4
1000dbc0:	0080      	lsls	r0, r0, #2
1000dbc2:	4440      	add	r0, r8
1000dbc4:	3046      	adds	r0, #70	; 0x46
1000dbc6:	2217      	movs	r2, #23
1000dbc8:	0029      	movs	r1, r5
1000dbca:	3132      	adds	r1, #50	; 0x32
1000dbcc:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000dbce:	1b38      	subs	r0, r7, r4
1000dbd0:	0080      	lsls	r0, r0, #2
1000dbd2:	4440      	add	r0, r8
1000dbd4:	301a      	adds	r0, #26
1000dbd6:	1dac      	adds	r4, r5, #6
1000dbd8:	221c      	movs	r2, #28
1000dbda:	0021      	movs	r1, r4
1000dbdc:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000dbde:	480c      	ldr	r0, [pc, #48]	; (1000dc10 <ble_pair_done_handler+0x17c>)
1000dbe0:	47d8      	blx	fp
1000dbe2:	4817      	ldr	r0, [pc, #92]	; (1000dc40 <ble_pair_done_handler+0x1ac>)
1000dbe4:	47d0      	blx	sl
1000dbe6:	2316      	movs	r3, #22
1000dbe8:	4699      	mov	r9, r3
1000dbea:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000dbec:	4e0c      	ldr	r6, [pc, #48]	; (1000dc20 <ble_pair_done_handler+0x18c>)
1000dbee:	4f0b      	ldr	r7, [pc, #44]	; (1000dc1c <ble_pair_done_handler+0x188>)
1000dbf0:	e76a      	b.n	1000dac8 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000dbf2:	792b      	ldrb	r3, [r5, #4]
1000dbf4:	9301      	str	r3, [sp, #4]
1000dbf6:	2b00      	cmp	r3, #0
1000dbf8:	d0c2      	beq.n	1000db80 <ble_pair_done_handler+0xec>
1000dbfa:	e78d      	b.n	1000db18 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000dbfc:	9801      	ldr	r0, [sp, #4]
1000dbfe:	b003      	add	sp, #12
1000dc00:	bc3c      	pop	{r2, r3, r4, r5}
1000dc02:	4690      	mov	r8, r2
1000dc04:	4699      	mov	r9, r3
1000dc06:	46a2      	mov	sl, r4
1000dc08:	46ab      	mov	fp, r5
1000dc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc0c:	1001a29c 	.word	0x1001a29c
1000dc10:	100164f8 	.word	0x100164f8
1000dc14:	10015351 	.word	0x10015351
1000dc18:	10017900 	.word	0x10017900
1000dc1c:	10015231 	.word	0x10015231
1000dc20:	100178f4 	.word	0x100178f4
1000dc24:	10017908 	.word	0x10017908
1000dc28:	10017910 	.word	0x10017910
1000dc2c:	10010919 	.word	0x10010919
1000dc30:	10017930 	.word	0x10017930
1000dc34:	1001794c 	.word	0x1001794c
1000dc38:	10017978 	.word	0x10017978
1000dc3c:	100150d7 	.word	0x100150d7
1000dc40:	100179a8 	.word	0x100179a8

1000dc44 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000dc44:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000dc46:	8800      	ldrh	r0, [r0, #0]
1000dc48:	2378      	movs	r3, #120	; 0x78
1000dc4a:	2201      	movs	r2, #1
1000dc4c:	2101      	movs	r1, #1
1000dc4e:	4c02      	ldr	r4, [pc, #8]	; (1000dc58 <ble_conn_param_update_req+0x14>)
1000dc50:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000dc52:	2000      	movs	r0, #0
1000dc54:	bd10      	pop	{r4, pc}
1000dc56:	46c0      	nop			; (mov r8, r8)
1000dc58:	10010939 	.word	0x10010939

1000dc5c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc5e:	4657      	mov	r7, sl
1000dc60:	464e      	mov	r6, r9
1000dc62:	4645      	mov	r5, r8
1000dc64:	b4e0      	push	{r5, r6, r7}
1000dc66:	b084      	sub	sp, #16
1000dc68:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000dc6a:	2209      	movs	r2, #9
1000dc6c:	2100      	movs	r1, #0
1000dc6e:	a801      	add	r0, sp, #4
1000dc70:	4b6a      	ldr	r3, [pc, #424]	; (1000de1c <ble_slave_security_request_handler+0x1c0>)
1000dc72:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dc74:	8825      	ldrh	r5, [r4, #0]
1000dc76:	496a      	ldr	r1, [pc, #424]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dc78:	000a      	movs	r2, r1
1000dc7a:	2300      	movs	r3, #0
1000dc7c:	8910      	ldrh	r0, [r2, #8]
1000dc7e:	42a8      	cmp	r0, r5
1000dc80:	d116      	bne.n	1000dcb0 <ble_slave_security_request_handler+0x54>
1000dc82:	0010      	movs	r0, r2
1000dc84:	305e      	adds	r0, #94	; 0x5e
1000dc86:	7800      	ldrb	r0, [r0, #0]
1000dc88:	2802      	cmp	r0, #2
1000dc8a:	d111      	bne.n	1000dcb0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000dc8c:	4864      	ldr	r0, [pc, #400]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dc8e:	015a      	lsls	r2, r3, #5
1000dc90:	1ad6      	subs	r6, r2, r3
1000dc92:	00b6      	lsls	r6, r6, #2
1000dc94:	1986      	adds	r6, r0, r6
1000dc96:	365e      	adds	r6, #94	; 0x5e
1000dc98:	2206      	movs	r2, #6
1000dc9a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dc9c:	32f9      	adds	r2, #249	; 0xf9
1000dc9e:	4013      	ands	r3, r2
1000dca0:	015a      	lsls	r2, r3, #5
1000dca2:	1ad2      	subs	r2, r2, r3
1000dca4:	0092      	lsls	r2, r2, #2
1000dca6:	1882      	adds	r2, r0, r2
1000dca8:	7d12      	ldrb	r2, [r2, #20]
1000dcaa:	07d0      	lsls	r0, r2, #31
1000dcac:	d405      	bmi.n	1000dcba <ble_slave_security_request_handler+0x5e>
1000dcae:	e01b      	b.n	1000dce8 <ble_slave_security_request_handler+0x8c>
1000dcb0:	3301      	adds	r3, #1
1000dcb2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dcb4:	2b05      	cmp	r3, #5
1000dcb6:	d1e1      	bne.n	1000dc7c <ble_slave_security_request_handler+0x20>
1000dcb8:	e01e      	b.n	1000dcf8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dcba:	78e0      	ldrb	r0, [r4, #3]
1000dcbc:	2800      	cmp	r0, #0
1000dcbe:	d013      	beq.n	1000dce8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000dcc0:	0159      	lsls	r1, r3, #5
1000dcc2:	1ac9      	subs	r1, r1, r3
1000dcc4:	008b      	lsls	r3, r1, #2
1000dcc6:	4956      	ldr	r1, [pc, #344]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dcc8:	18c9      	adds	r1, r1, r3
1000dcca:	311a      	adds	r1, #26
1000dccc:	8820      	ldrh	r0, [r4, #0]
1000dcce:	4b55      	ldr	r3, [pc, #340]	; (1000de24 <ble_slave_security_request_handler+0x1c8>)
1000dcd0:	4798      	blx	r3
1000dcd2:	2800      	cmp	r0, #0
1000dcd4:	d100      	bne.n	1000dcd8 <ble_slave_security_request_handler+0x7c>
1000dcd6:	e09b      	b.n	1000de10 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000dcd8:	4853      	ldr	r0, [pc, #332]	; (1000de28 <ble_slave_security_request_handler+0x1cc>)
1000dcda:	4b54      	ldr	r3, [pc, #336]	; (1000de2c <ble_slave_security_request_handler+0x1d0>)
1000dcdc:	4798      	blx	r3
1000dcde:	4854      	ldr	r0, [pc, #336]	; (1000de30 <ble_slave_security_request_handler+0x1d4>)
1000dce0:	4b54      	ldr	r3, [pc, #336]	; (1000de34 <ble_slave_security_request_handler+0x1d8>)
1000dce2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000dce4:	20e2      	movs	r0, #226	; 0xe2
1000dce6:	e093      	b.n	1000de10 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dce8:	015a      	lsls	r2, r3, #5
1000dcea:	1ad3      	subs	r3, r2, r3
1000dcec:	009b      	lsls	r3, r3, #2
1000dcee:	4a4c      	ldr	r2, [pc, #304]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dcf0:	18d3      	adds	r3, r2, r3
1000dcf2:	335e      	adds	r3, #94	; 0x5e
1000dcf4:	2202      	movs	r2, #2
1000dcf6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dcf8:	8825      	ldrh	r5, [r4, #0]
1000dcfa:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dcfc:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dcfe:	0016      	movs	r6, r2
1000dd00:	8908      	ldrh	r0, [r1, #8]
1000dd02:	42a8      	cmp	r0, r5
1000dd04:	d10d      	bne.n	1000dd22 <ble_slave_security_request_handler+0xc6>
1000dd06:	0008      	movs	r0, r1
1000dd08:	305e      	adds	r0, #94	; 0x5e
1000dd0a:	7800      	ldrb	r0, [r0, #0]
1000dd0c:	2802      	cmp	r0, #2
1000dd0e:	d108      	bne.n	1000dd22 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000dd10:	0152      	lsls	r2, r2, #5
1000dd12:	1b92      	subs	r2, r2, r6
1000dd14:	0096      	lsls	r6, r2, #2
1000dd16:	4a42      	ldr	r2, [pc, #264]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dd18:	1992      	adds	r2, r2, r6
1000dd1a:	325e      	adds	r2, #94	; 0x5e
1000dd1c:	2103      	movs	r1, #3
1000dd1e:	7011      	strb	r1, [r2, #0]
			break;
1000dd20:	e005      	b.n	1000dd2e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dd22:	3301      	adds	r3, #1
1000dd24:	b2db      	uxtb	r3, r3
1000dd26:	3201      	adds	r2, #1
1000dd28:	317c      	adds	r1, #124	; 0x7c
1000dd2a:	2b05      	cmp	r3, #5
1000dd2c:	d1e7      	bne.n	1000dcfe <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000dd2e:	aa01      	add	r2, sp, #4
1000dd30:	78e1      	ldrb	r1, [r4, #3]
1000dd32:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000dd34:	2101      	movs	r1, #1
1000dd36:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000dd38:	3103      	adds	r1, #3
1000dd3a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000dd3c:	001f      	movs	r7, r3
1000dd3e:	015a      	lsls	r2, r3, #5
1000dd40:	1ad2      	subs	r2, r2, r3
1000dd42:	0092      	lsls	r2, r2, #2
1000dd44:	4936      	ldr	r1, [pc, #216]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dd46:	5c52      	ldrb	r2, [r2, r1]
1000dd48:	2a02      	cmp	r2, #2
1000dd4a:	d104      	bne.n	1000dd56 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dd4c:	aa01      	add	r2, sp, #4
1000dd4e:	2103      	movs	r1, #3
1000dd50:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dd52:	71d1      	strb	r1, [r2, #7]
1000dd54:	e003      	b.n	1000dd5e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dd56:	aa01      	add	r2, sp, #4
1000dd58:	2101      	movs	r1, #1
1000dd5a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dd5c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000dd5e:	aa01      	add	r2, sp, #4
1000dd60:	2110      	movs	r1, #16
1000dd62:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dd64:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dd66:	017a      	lsls	r2, r7, #5
1000dd68:	1bd2      	subs	r2, r2, r7
1000dd6a:	0092      	lsls	r2, r2, #2
1000dd6c:	492c      	ldr	r1, [pc, #176]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000dd6e:	188a      	adds	r2, r1, r2
1000dd70:	7e12      	ldrb	r2, [r2, #24]
1000dd72:	2a40      	cmp	r2, #64	; 0x40
1000dd74:	d134      	bne.n	1000dde0 <ble_slave_security_request_handler+0x184>
1000dd76:	015a      	lsls	r2, r3, #5
1000dd78:	1ad3      	subs	r3, r2, r3
1000dd7a:	009b      	lsls	r3, r3, #2
1000dd7c:	469a      	mov	sl, r3
1000dd7e:	001e      	movs	r6, r3
1000dd80:	3660      	adds	r6, #96	; 0x60
1000dd82:	1876      	adds	r6, r6, r1
1000dd84:	4655      	mov	r5, sl
1000dd86:	3568      	adds	r5, #104	; 0x68
1000dd88:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dd8a:	4b2b      	ldr	r3, [pc, #172]	; (1000de38 <ble_slave_security_request_handler+0x1dc>)
1000dd8c:	4699      	mov	r9, r3
1000dd8e:	230f      	movs	r3, #15
1000dd90:	4698      	mov	r8, r3
1000dd92:	47c8      	blx	r9
1000dd94:	4643      	mov	r3, r8
1000dd96:	4018      	ands	r0, r3
1000dd98:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dd9a:	47c8      	blx	r9
1000dd9c:	4643      	mov	r3, r8
1000dd9e:	4018      	ands	r0, r3
1000dda0:	74b0      	strb	r0, [r6, #18]
1000dda2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dda4:	42ae      	cmp	r6, r5
1000dda6:	d1f4      	bne.n	1000dd92 <ble_slave_security_request_handler+0x136>
1000dda8:	4656      	mov	r6, sl
1000ddaa:	3670      	adds	r6, #112	; 0x70
1000ddac:	4a1c      	ldr	r2, [pc, #112]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000ddae:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ddb0:	4b21      	ldr	r3, [pc, #132]	; (1000de38 <ble_slave_security_request_handler+0x1dc>)
1000ddb2:	4699      	mov	r9, r3
1000ddb4:	230f      	movs	r3, #15
1000ddb6:	4698      	mov	r8, r3
1000ddb8:	47c8      	blx	r9
1000ddba:	4643      	mov	r3, r8
1000ddbc:	4018      	ands	r0, r3
1000ddbe:	7028      	strb	r0, [r5, #0]
1000ddc0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ddc2:	42b5      	cmp	r5, r6
1000ddc4:	d1f8      	bne.n	1000ddb8 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ddc6:	4b1c      	ldr	r3, [pc, #112]	; (1000de38 <ble_slave_security_request_handler+0x1dc>)
1000ddc8:	4798      	blx	r3
1000ddca:	017b      	lsls	r3, r7, #5
1000ddcc:	1bdb      	subs	r3, r3, r7
1000ddce:	009b      	lsls	r3, r3, #2
1000ddd0:	4a13      	ldr	r2, [pc, #76]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000ddd2:	18d3      	adds	r3, r2, r3
1000ddd4:	001a      	movs	r2, r3
1000ddd6:	3270      	adds	r2, #112	; 0x70
1000ddd8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ddda:	337a      	adds	r3, #122	; 0x7a
1000dddc:	2210      	movs	r2, #16
1000ddde:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dde0:	017a      	lsls	r2, r7, #5
1000dde2:	1bd7      	subs	r7, r2, r7
1000dde4:	00bf      	lsls	r7, r7, #2
1000dde6:	3760      	adds	r7, #96	; 0x60
1000dde8:	4a0d      	ldr	r2, [pc, #52]	; (1000de20 <ble_slave_security_request_handler+0x1c4>)
1000ddea:	18ba      	adds	r2, r7, r2
1000ddec:	8820      	ldrh	r0, [r4, #0]
1000ddee:	2300      	movs	r3, #0
1000ddf0:	a901      	add	r1, sp, #4
1000ddf2:	4c12      	ldr	r4, [pc, #72]	; (1000de3c <ble_slave_security_request_handler+0x1e0>)
1000ddf4:	47a0      	blx	r4
1000ddf6:	2800      	cmp	r0, #0
1000ddf8:	d00a      	beq.n	1000de10 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000ddfa:	ab01      	add	r3, sp, #4
1000ddfc:	2200      	movs	r2, #0
1000ddfe:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000de00:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000de02:	4809      	ldr	r0, [pc, #36]	; (1000de28 <ble_slave_security_request_handler+0x1cc>)
1000de04:	4b09      	ldr	r3, [pc, #36]	; (1000de2c <ble_slave_security_request_handler+0x1d0>)
1000de06:	4798      	blx	r3
1000de08:	480d      	ldr	r0, [pc, #52]	; (1000de40 <ble_slave_security_request_handler+0x1e4>)
1000de0a:	4b0a      	ldr	r3, [pc, #40]	; (1000de34 <ble_slave_security_request_handler+0x1d8>)
1000de0c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000de0e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000de10:	b004      	add	sp, #16
1000de12:	bc1c      	pop	{r2, r3, r4}
1000de14:	4690      	mov	r8, r2
1000de16:	4699      	mov	r9, r3
1000de18:	46a2      	mov	sl, r4
1000de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de1c:	100150e9 	.word	0x100150e9
1000de20:	1001a29c 	.word	0x1001a29c
1000de24:	100114fd 	.word	0x100114fd
1000de28:	100164f8 	.word	0x100164f8
1000de2c:	10015351 	.word	0x10015351
1000de30:	100179b0 	.word	0x100179b0
1000de34:	10015231 	.word	0x10015231
1000de38:	10015365 	.word	0x10015365
1000de3c:	10011311 	.word	0x10011311
1000de40:	100179c8 	.word	0x100179c8

1000de44 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000de44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de46:	465f      	mov	r7, fp
1000de48:	4656      	mov	r6, sl
1000de4a:	464d      	mov	r5, r9
1000de4c:	4644      	mov	r4, r8
1000de4e:	b4f0      	push	{r4, r5, r6, r7}
1000de50:	b085      	sub	sp, #20
1000de52:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de54:	8804      	ldrh	r4, [r0, #0]
1000de56:	4a54      	ldr	r2, [pc, #336]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000de58:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de5a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000de5c:	8910      	ldrh	r0, [r2, #8]
1000de5e:	42a0      	cmp	r0, r4
1000de60:	d10d      	bne.n	1000de7e <ble_pair_request_handler+0x3a>
1000de62:	0010      	movs	r0, r2
1000de64:	305e      	adds	r0, #94	; 0x5e
1000de66:	7800      	ldrb	r0, [r0, #0]
1000de68:	2802      	cmp	r0, #2
1000de6a:	d108      	bne.n	1000de7e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000de6c:	014a      	lsls	r2, r1, #5
1000de6e:	1a52      	subs	r2, r2, r1
1000de70:	0095      	lsls	r5, r2, #2
1000de72:	4a4d      	ldr	r2, [pc, #308]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000de74:	1952      	adds	r2, r2, r5
1000de76:	325e      	adds	r2, #94	; 0x5e
1000de78:	2103      	movs	r1, #3
1000de7a:	7011      	strb	r1, [r2, #0]
			break;
1000de7c:	e005      	b.n	1000de8a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000de7e:	3301      	adds	r3, #1
1000de80:	b2db      	uxtb	r3, r3
1000de82:	3101      	adds	r1, #1
1000de84:	327c      	adds	r2, #124	; 0x7c
1000de86:	2b05      	cmp	r3, #5
1000de88:	d1e8      	bne.n	1000de5c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000de8a:	aa01      	add	r2, sp, #4
1000de8c:	2100      	movs	r1, #0
1000de8e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000de90:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000de92:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000de94:	2003      	movs	r0, #3
1000de96:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000de98:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000de9a:	001e      	movs	r6, r3
1000de9c:	015a      	lsls	r2, r3, #5
1000de9e:	1ad2      	subs	r2, r2, r3
1000dea0:	0092      	lsls	r2, r2, #2
1000dea2:	4941      	ldr	r1, [pc, #260]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000dea4:	5c52      	ldrb	r2, [r2, r1]
1000dea6:	2a02      	cmp	r2, #2
1000dea8:	d104      	bne.n	1000deb4 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000deaa:	aa01      	add	r2, sp, #4
1000deac:	2103      	movs	r1, #3
1000deae:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000deb0:	71d1      	strb	r1, [r2, #7]
1000deb2:	e003      	b.n	1000debc <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000deb4:	aa01      	add	r2, sp, #4
1000deb6:	2101      	movs	r1, #1
1000deb8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000deba:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000debc:	aa01      	add	r2, sp, #4
1000debe:	2110      	movs	r1, #16
1000dec0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dec2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dec4:	0172      	lsls	r2, r6, #5
1000dec6:	1b92      	subs	r2, r2, r6
1000dec8:	0092      	lsls	r2, r2, #2
1000deca:	4937      	ldr	r1, [pc, #220]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000decc:	188a      	adds	r2, r1, r2
1000dece:	7e12      	ldrb	r2, [r2, #24]
1000ded0:	2a40      	cmp	r2, #64	; 0x40
1000ded2:	d142      	bne.n	1000df5a <ble_pair_request_handler+0x116>
1000ded4:	015f      	lsls	r7, r3, #5
1000ded6:	1afb      	subs	r3, r7, r3
1000ded8:	009b      	lsls	r3, r3, #2
1000deda:	469b      	mov	fp, r3
1000dedc:	001c      	movs	r4, r3
1000dede:	3460      	adds	r4, #96	; 0x60
1000dee0:	1864      	adds	r4, r4, r1
1000dee2:	465d      	mov	r5, fp
1000dee4:	3568      	adds	r5, #104	; 0x68
1000dee6:	186d      	adds	r5, r5, r1
1000dee8:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000deea:	4b30      	ldr	r3, [pc, #192]	; (1000dfac <ble_pair_request_handler+0x168>)
1000deec:	469a      	mov	sl, r3
1000deee:	230f      	movs	r3, #15
1000def0:	4699      	mov	r9, r3
1000def2:	47d0      	blx	sl
1000def4:	464b      	mov	r3, r9
1000def6:	4018      	ands	r0, r3
1000def8:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000defa:	47d0      	blx	sl
1000defc:	464b      	mov	r3, r9
1000defe:	4018      	ands	r0, r3
1000df00:	74b8      	strb	r0, [r7, #18]
1000df02:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000df04:	42af      	cmp	r7, r5
1000df06:	d1f4      	bne.n	1000def2 <ble_pair_request_handler+0xae>
1000df08:	465b      	mov	r3, fp
1000df0a:	3370      	adds	r3, #112	; 0x70
1000df0c:	4f26      	ldr	r7, [pc, #152]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000df0e:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000df10:	4b26      	ldr	r3, [pc, #152]	; (1000dfac <ble_pair_request_handler+0x168>)
1000df12:	469a      	mov	sl, r3
1000df14:	230f      	movs	r3, #15
1000df16:	4699      	mov	r9, r3
1000df18:	47d0      	blx	sl
1000df1a:	464b      	mov	r3, r9
1000df1c:	4018      	ands	r0, r3
1000df1e:	7028      	strb	r0, [r5, #0]
1000df20:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000df22:	42bd      	cmp	r5, r7
1000df24:	d1f8      	bne.n	1000df18 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000df26:	4822      	ldr	r0, [pc, #136]	; (1000dfb0 <ble_pair_request_handler+0x16c>)
1000df28:	4b22      	ldr	r3, [pc, #136]	; (1000dfb4 <ble_pair_request_handler+0x170>)
1000df2a:	4798      	blx	r3
1000df2c:	4822      	ldr	r0, [pc, #136]	; (1000dfb8 <ble_pair_request_handler+0x174>)
1000df2e:	4b23      	ldr	r3, [pc, #140]	; (1000dfbc <ble_pair_request_handler+0x178>)
1000df30:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000df32:	4d22      	ldr	r5, [pc, #136]	; (1000dfbc <ble_pair_request_handler+0x178>)
1000df34:	7821      	ldrb	r1, [r4, #0]
1000df36:	4822      	ldr	r0, [pc, #136]	; (1000dfc0 <ble_pair_request_handler+0x17c>)
1000df38:	47a8      	blx	r5
1000df3a:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000df3c:	42bc      	cmp	r4, r7
1000df3e:	d1f9      	bne.n	1000df34 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000df40:	4b1a      	ldr	r3, [pc, #104]	; (1000dfac <ble_pair_request_handler+0x168>)
1000df42:	4798      	blx	r3
1000df44:	0173      	lsls	r3, r6, #5
1000df46:	1b9b      	subs	r3, r3, r6
1000df48:	009b      	lsls	r3, r3, #2
1000df4a:	4a17      	ldr	r2, [pc, #92]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000df4c:	18d3      	adds	r3, r2, r3
1000df4e:	001a      	movs	r2, r3
1000df50:	3270      	adds	r2, #112	; 0x70
1000df52:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000df54:	337a      	adds	r3, #122	; 0x7a
1000df56:	2210      	movs	r2, #16
1000df58:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000df5a:	4815      	ldr	r0, [pc, #84]	; (1000dfb0 <ble_pair_request_handler+0x16c>)
1000df5c:	4b15      	ldr	r3, [pc, #84]	; (1000dfb4 <ble_pair_request_handler+0x170>)
1000df5e:	4798      	blx	r3
1000df60:	4818      	ldr	r0, [pc, #96]	; (1000dfc4 <ble_pair_request_handler+0x180>)
1000df62:	4b16      	ldr	r3, [pc, #88]	; (1000dfbc <ble_pair_request_handler+0x178>)
1000df64:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000df66:	0173      	lsls	r3, r6, #5
1000df68:	1b9b      	subs	r3, r3, r6
1000df6a:	009b      	lsls	r3, r3, #2
1000df6c:	3360      	adds	r3, #96	; 0x60
1000df6e:	4a0e      	ldr	r2, [pc, #56]	; (1000dfa8 <ble_pair_request_handler+0x164>)
1000df70:	189a      	adds	r2, r3, r2
1000df72:	4643      	mov	r3, r8
1000df74:	8818      	ldrh	r0, [r3, #0]
1000df76:	2300      	movs	r3, #0
1000df78:	a901      	add	r1, sp, #4
1000df7a:	4c13      	ldr	r4, [pc, #76]	; (1000dfc8 <ble_pair_request_handler+0x184>)
1000df7c:	47a0      	blx	r4
1000df7e:	2800      	cmp	r0, #0
1000df80:	d00a      	beq.n	1000df98 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000df82:	ab01      	add	r3, sp, #4
1000df84:	2200      	movs	r2, #0
1000df86:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000df88:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000df8a:	4809      	ldr	r0, [pc, #36]	; (1000dfb0 <ble_pair_request_handler+0x16c>)
1000df8c:	4b09      	ldr	r3, [pc, #36]	; (1000dfb4 <ble_pair_request_handler+0x170>)
1000df8e:	4798      	blx	r3
1000df90:	480e      	ldr	r0, [pc, #56]	; (1000dfcc <ble_pair_request_handler+0x188>)
1000df92:	4b0a      	ldr	r3, [pc, #40]	; (1000dfbc <ble_pair_request_handler+0x178>)
1000df94:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000df96:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000df98:	b005      	add	sp, #20
1000df9a:	bc3c      	pop	{r2, r3, r4, r5}
1000df9c:	4690      	mov	r8, r2
1000df9e:	4699      	mov	r9, r3
1000dfa0:	46a2      	mov	sl, r4
1000dfa2:	46ab      	mov	fp, r5
1000dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dfa6:	46c0      	nop			; (mov r8, r8)
1000dfa8:	1001a29c 	.word	0x1001a29c
1000dfac:	10015365 	.word	0x10015365
1000dfb0:	100164f8 	.word	0x100164f8
1000dfb4:	10015351 	.word	0x10015351
1000dfb8:	100179f4 	.word	0x100179f4
1000dfbc:	10015231 	.word	0x10015231
1000dfc0:	10017a04 	.word	0x10017a04
1000dfc4:	10017a0c 	.word	0x10017a0c
1000dfc8:	10011311 	.word	0x10011311
1000dfcc:	10017a28 	.word	0x10017a28

1000dfd0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000dfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfd2:	b085      	sub	sp, #20
1000dfd4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000dfd6:	2206      	movs	r2, #6
1000dfd8:	493d      	ldr	r1, [pc, #244]	; (1000e0d0 <ble_pair_key_request_handler+0x100>)
1000dfda:	a802      	add	r0, sp, #8
1000dfdc:	4e3d      	ldr	r6, [pc, #244]	; (1000e0d4 <ble_pair_key_request_handler+0x104>)
1000dfde:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000dfe0:	ac01      	add	r4, sp, #4
1000dfe2:	2204      	movs	r2, #4
1000dfe4:	0029      	movs	r1, r5
1000dfe6:	0020      	movs	r0, r4
1000dfe8:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000dfea:	78e3      	ldrb	r3, [r4, #3]
1000dfec:	2b00      	cmp	r3, #0
1000dfee:	d162      	bne.n	1000e0b6 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000dff0:	4839      	ldr	r0, [pc, #228]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000dff2:	4b3a      	ldr	r3, [pc, #232]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000dff4:	4798      	blx	r3
1000dff6:	483a      	ldr	r0, [pc, #232]	; (1000e0e0 <ble_pair_key_request_handler+0x110>)
1000dff8:	4b3a      	ldr	r3, [pc, #232]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000dffa:	4798      	blx	r3
1000dffc:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000dffe:	4c3a      	ldr	r4, [pc, #232]	; (1000e0e8 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000e000:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000e002:	201e      	movs	r0, #30
1000e004:	47a0      	blx	r4
1000e006:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000e008:	2b00      	cmp	r3, #0
1000e00a:	d11a      	bne.n	1000e042 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000e00c:	4f32      	ldr	r7, [pc, #200]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e00e:	0038      	movs	r0, r7
1000e010:	4e32      	ldr	r6, [pc, #200]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e012:	47b0      	blx	r6
1000e014:	4835      	ldr	r0, [pc, #212]	; (1000e0ec <ble_pair_key_request_handler+0x11c>)
1000e016:	4c33      	ldr	r4, [pc, #204]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e018:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000e01a:	0038      	movs	r0, r7
1000e01c:	47b0      	blx	r6
1000e01e:	4834      	ldr	r0, [pc, #208]	; (1000e0f0 <ble_pair_key_request_handler+0x120>)
1000e020:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000e022:	8828      	ldrh	r0, [r5, #0]
1000e024:	2113      	movs	r1, #19
1000e026:	4b33      	ldr	r3, [pc, #204]	; (1000e0f4 <ble_pair_key_request_handler+0x124>)
1000e028:	4798      	blx	r3
1000e02a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000e02c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000e02e:	2b00      	cmp	r3, #0
1000e030:	d04c      	beq.n	1000e0cc <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000e032:	4829      	ldr	r0, [pc, #164]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e034:	4b29      	ldr	r3, [pc, #164]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e036:	4798      	blx	r3
1000e038:	482f      	ldr	r0, [pc, #188]	; (1000e0f8 <ble_pair_key_request_handler+0x128>)
1000e03a:	4b2a      	ldr	r3, [pc, #168]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e03c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000e03e:	20e2      	movs	r0, #226	; 0xe2
1000e040:	e044      	b.n	1000e0cc <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000e042:	001a      	movs	r2, r3
1000e044:	3a30      	subs	r2, #48	; 0x30
1000e046:	2a09      	cmp	r2, #9
1000e048:	d8db      	bhi.n	1000e002 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000e04a:	aa02      	add	r2, sp, #8
1000e04c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000e04e:	4038      	ands	r0, r7
1000e050:	4b2a      	ldr	r3, [pc, #168]	; (1000e0fc <ble_pair_key_request_handler+0x12c>)
1000e052:	4798      	blx	r3
1000e054:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000e056:	2e06      	cmp	r6, #6
1000e058:	d026      	beq.n	1000e0a8 <ble_pair_key_request_handler+0xd8>
1000e05a:	e7d2      	b.n	1000e002 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000e05c:	481e      	ldr	r0, [pc, #120]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e05e:	4b1f      	ldr	r3, [pc, #124]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e060:	4798      	blx	r3
1000e062:	4827      	ldr	r0, [pc, #156]	; (1000e100 <ble_pair_key_request_handler+0x130>)
1000e064:	4b1f      	ldr	r3, [pc, #124]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e066:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000e068:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e06a:	4e24      	ldr	r6, [pc, #144]	; (1000e0fc <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000e06c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000e06e:	5ce0      	ldrb	r0, [r4, r3]
1000e070:	47b0      	blx	r6
1000e072:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000e074:	2c06      	cmp	r4, #6
1000e076:	d1f9      	bne.n	1000e06c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000e078:	ab01      	add	r3, sp, #4
1000e07a:	7899      	ldrb	r1, [r3, #2]
1000e07c:	8828      	ldrh	r0, [r5, #0]
1000e07e:	aa02      	add	r2, sp, #8
1000e080:	4b20      	ldr	r3, [pc, #128]	; (1000e104 <ble_pair_key_request_handler+0x134>)
1000e082:	4798      	blx	r3
1000e084:	2800      	cmp	r0, #0
1000e086:	d021      	beq.n	1000e0cc <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000e088:	4813      	ldr	r0, [pc, #76]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e08a:	4b14      	ldr	r3, [pc, #80]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e08c:	4798      	blx	r3
1000e08e:	481e      	ldr	r0, [pc, #120]	; (1000e108 <ble_pair_key_request_handler+0x138>)
1000e090:	4b14      	ldr	r3, [pc, #80]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e092:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e094:	2000      	movs	r0, #0
1000e096:	e019      	b.n	1000e0cc <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000e098:	480f      	ldr	r0, [pc, #60]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e09a:	4b10      	ldr	r3, [pc, #64]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e09c:	4798      	blx	r3
1000e09e:	481b      	ldr	r0, [pc, #108]	; (1000e10c <ble_pair_key_request_handler+0x13c>)
1000e0a0:	4b10      	ldr	r3, [pc, #64]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e0a2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000e0a4:	2000      	movs	r0, #0
1000e0a6:	e011      	b.n	1000e0cc <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000e0a8:	480b      	ldr	r0, [pc, #44]	; (1000e0d8 <ble_pair_key_request_handler+0x108>)
1000e0aa:	4b0c      	ldr	r3, [pc, #48]	; (1000e0dc <ble_pair_key_request_handler+0x10c>)
1000e0ac:	4798      	blx	r3
1000e0ae:	4818      	ldr	r0, [pc, #96]	; (1000e110 <ble_pair_key_request_handler+0x140>)
1000e0b0:	4b0c      	ldr	r3, [pc, #48]	; (1000e0e4 <ble_pair_key_request_handler+0x114>)
1000e0b2:	4798      	blx	r3
1000e0b4:	e7d8      	b.n	1000e068 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000e0b6:	ab01      	add	r3, sp, #4
1000e0b8:	885a      	ldrh	r2, [r3, #2]
1000e0ba:	2380      	movs	r3, #128	; 0x80
1000e0bc:	005b      	lsls	r3, r3, #1
1000e0be:	429a      	cmp	r2, r3
1000e0c0:	d0cc      	beq.n	1000e05c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000e0c2:	ab01      	add	r3, sp, #4
1000e0c4:	789b      	ldrb	r3, [r3, #2]
1000e0c6:	2b01      	cmp	r3, #1
1000e0c8:	d0e6      	beq.n	1000e098 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000e0ca:	2000      	movs	r0, #0
}
1000e0cc:	b005      	add	sp, #20
1000e0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0d0:	10017610 	.word	0x10017610
1000e0d4:	100150d7 	.word	0x100150d7
1000e0d8:	100164f8 	.word	0x100164f8
1000e0dc:	10015351 	.word	0x10015351
1000e0e0:	10017a50 	.word	0x10017a50
1000e0e4:	10015231 	.word	0x10015231
1000e0e8:	1000edf9 	.word	0x1000edf9
1000e0ec:	10017a78 	.word	0x10017a78
1000e0f0:	10017a84 	.word	0x10017a84
1000e0f4:	10010919 	.word	0x10010919
1000e0f8:	10017930 	.word	0x10017930
1000e0fc:	10015265 	.word	0x10015265
1000e100:	10017a98 	.word	0x10017a98
1000e104:	10011441 	.word	0x10011441
1000e108:	10017ad0 	.word	0x10017ad0
1000e10c:	10017ae8 	.word	0x10017ae8
1000e110:	10017b04 	.word	0x10017b04

1000e114 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000e114:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e116:	465f      	mov	r7, fp
1000e118:	4656      	mov	r6, sl
1000e11a:	464d      	mov	r5, r9
1000e11c:	b4e0      	push	{r5, r6, r7}
1000e11e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e120:	8800      	ldrh	r0, [r0, #0]
1000e122:	4b49      	ldr	r3, [pc, #292]	; (1000e248 <ble_encryption_request_handler+0x134>)
1000e124:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e126:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000e128:	8919      	ldrh	r1, [r3, #8]
1000e12a:	4281      	cmp	r1, r0
1000e12c:	d137      	bne.n	1000e19e <ble_encryption_request_handler+0x8a>
1000e12e:	0019      	movs	r1, r3
1000e130:	315e      	adds	r1, #94	; 0x5e
1000e132:	7809      	ldrb	r1, [r1, #0]
1000e134:	2901      	cmp	r1, #1
1000e136:	d932      	bls.n	1000e19e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000e138:	4f43      	ldr	r7, [pc, #268]	; (1000e248 <ble_encryption_request_handler+0x134>)
1000e13a:	0153      	lsls	r3, r2, #5
1000e13c:	1a9d      	subs	r5, r3, r2
1000e13e:	00ad      	lsls	r5, r5, #2
1000e140:	197d      	adds	r5, r7, r5
1000e142:	355e      	adds	r5, #94	; 0x5e
1000e144:	2306      	movs	r3, #6
1000e146:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000e148:	4840      	ldr	r0, [pc, #256]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e14a:	4b41      	ldr	r3, [pc, #260]	; (1000e250 <ble_encryption_request_handler+0x13c>)
1000e14c:	469a      	mov	sl, r3
1000e14e:	4798      	blx	r3
1000e150:	8831      	ldrh	r1, [r6, #0]
1000e152:	4840      	ldr	r0, [pc, #256]	; (1000e254 <ble_encryption_request_handler+0x140>)
1000e154:	4b40      	ldr	r3, [pc, #256]	; (1000e258 <ble_encryption_request_handler+0x144>)
1000e156:	4699      	mov	r9, r3
1000e158:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000e15a:	483c      	ldr	r0, [pc, #240]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e15c:	47d0      	blx	sl
1000e15e:	0163      	lsls	r3, r4, #5
1000e160:	1b1b      	subs	r3, r3, r4
1000e162:	009b      	lsls	r3, r3, #2
1000e164:	18ff      	adds	r7, r7, r3
1000e166:	2370      	movs	r3, #112	; 0x70
1000e168:	469b      	mov	fp, r3
1000e16a:	44bb      	add	fp, r7
1000e16c:	465b      	mov	r3, fp
1000e16e:	8819      	ldrh	r1, [r3, #0]
1000e170:	483a      	ldr	r0, [pc, #232]	; (1000e25c <ble_encryption_request_handler+0x148>)
1000e172:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000e174:	4835      	ldr	r0, [pc, #212]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e176:	47d0      	blx	sl
1000e178:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000e17a:	4839      	ldr	r0, [pc, #228]	; (1000e260 <ble_encryption_request_handler+0x14c>)
1000e17c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000e17e:	4833      	ldr	r0, [pc, #204]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e180:	47d0      	blx	sl
1000e182:	8871      	ldrh	r1, [r6, #2]
1000e184:	4837      	ldr	r0, [pc, #220]	; (1000e264 <ble_encryption_request_handler+0x150>)
1000e186:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000e188:	4830      	ldr	r0, [pc, #192]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e18a:	47d0      	blx	sl
1000e18c:	0021      	movs	r1, r4
1000e18e:	4836      	ldr	r0, [pc, #216]	; (1000e268 <ble_encryption_request_handler+0x154>)
1000e190:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000e192:	465b      	mov	r3, fp
1000e194:	881a      	ldrh	r2, [r3, #0]
1000e196:	8873      	ldrh	r3, [r6, #2]
1000e198:	429a      	cmp	r2, r3
1000e19a:	d12a      	bne.n	1000e1f2 <ble_encryption_request_handler+0xde>
1000e19c:	e006      	b.n	1000e1ac <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e19e:	3401      	adds	r4, #1
1000e1a0:	b2e4      	uxtb	r4, r4
1000e1a2:	3201      	adds	r2, #1
1000e1a4:	337c      	adds	r3, #124	; 0x7c
1000e1a6:	2c05      	cmp	r4, #5
1000e1a8:	d1be      	bne.n	1000e128 <ble_encryption_request_handler+0x14>
1000e1aa:	e022      	b.n	1000e1f2 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000e1ac:	0161      	lsls	r1, r4, #5
1000e1ae:	1b09      	subs	r1, r1, r4
1000e1b0:	0089      	lsls	r1, r1, #2
1000e1b2:	4b25      	ldr	r3, [pc, #148]	; (1000e248 <ble_encryption_request_handler+0x134>)
1000e1b4:	1859      	adds	r1, r3, r1
1000e1b6:	3172      	adds	r1, #114	; 0x72
1000e1b8:	1d30      	adds	r0, r6, #4
1000e1ba:	2208      	movs	r2, #8
1000e1bc:	4b2b      	ldr	r3, [pc, #172]	; (1000e26c <ble_encryption_request_handler+0x158>)
1000e1be:	4798      	blx	r3
1000e1c0:	2800      	cmp	r0, #0
1000e1c2:	d116      	bne.n	1000e1f2 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000e1c4:	4821      	ldr	r0, [pc, #132]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e1c6:	4b22      	ldr	r3, [pc, #136]	; (1000e250 <ble_encryption_request_handler+0x13c>)
1000e1c8:	4798      	blx	r3
1000e1ca:	4829      	ldr	r0, [pc, #164]	; (1000e270 <ble_encryption_request_handler+0x15c>)
1000e1cc:	4b22      	ldr	r3, [pc, #136]	; (1000e258 <ble_encryption_request_handler+0x144>)
1000e1ce:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000e1d0:	0162      	lsls	r2, r4, #5
1000e1d2:	1b13      	subs	r3, r2, r4
1000e1d4:	009b      	lsls	r3, r3, #2
1000e1d6:	3360      	adds	r3, #96	; 0x60
1000e1d8:	491b      	ldr	r1, [pc, #108]	; (1000e248 <ble_encryption_request_handler+0x134>)
1000e1da:	185b      	adds	r3, r3, r1
1000e1dc:	1b12      	subs	r2, r2, r4
1000e1de:	0092      	lsls	r2, r2, #2
1000e1e0:	188a      	adds	r2, r1, r2
1000e1e2:	7d11      	ldrb	r1, [r2, #20]
1000e1e4:	8830      	ldrh	r0, [r6, #0]
1000e1e6:	2201      	movs	r2, #1
1000e1e8:	4c22      	ldr	r4, [pc, #136]	; (1000e274 <ble_encryption_request_handler+0x160>)
1000e1ea:	47a0      	blx	r4
1000e1ec:	1e04      	subs	r4, r0, #0
1000e1ee:	d01e      	beq.n	1000e22e <ble_encryption_request_handler+0x11a>
1000e1f0:	e015      	b.n	1000e21e <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e1f2:	4f16      	ldr	r7, [pc, #88]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e1f4:	0038      	movs	r0, r7
1000e1f6:	4e16      	ldr	r6, [pc, #88]	; (1000e250 <ble_encryption_request_handler+0x13c>)
1000e1f8:	47b0      	blx	r6
1000e1fa:	481f      	ldr	r0, [pc, #124]	; (1000e278 <ble_encryption_request_handler+0x164>)
1000e1fc:	4d16      	ldr	r5, [pc, #88]	; (1000e258 <ble_encryption_request_handler+0x144>)
1000e1fe:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e200:	0038      	movs	r0, r7
1000e202:	47b0      	blx	r6
1000e204:	481d      	ldr	r0, [pc, #116]	; (1000e27c <ble_encryption_request_handler+0x168>)
1000e206:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e208:	0163      	lsls	r3, r4, #5
1000e20a:	1b1c      	subs	r4, r3, r4
1000e20c:	00a4      	lsls	r4, r4, #2
1000e20e:	4b0e      	ldr	r3, [pc, #56]	; (1000e248 <ble_encryption_request_handler+0x134>)
1000e210:	191c      	adds	r4, r3, r4
1000e212:	8920      	ldrh	r0, [r4, #8]
1000e214:	2105      	movs	r1, #5
1000e216:	4b1a      	ldr	r3, [pc, #104]	; (1000e280 <ble_encryption_request_handler+0x16c>)
1000e218:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e21a:	24e2      	movs	r4, #226	; 0xe2
1000e21c:	e00d      	b.n	1000e23a <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e21e:	480b      	ldr	r0, [pc, #44]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e220:	4b0b      	ldr	r3, [pc, #44]	; (1000e250 <ble_encryption_request_handler+0x13c>)
1000e222:	4798      	blx	r3
1000e224:	4817      	ldr	r0, [pc, #92]	; (1000e284 <ble_encryption_request_handler+0x170>)
1000e226:	4b0c      	ldr	r3, [pc, #48]	; (1000e258 <ble_encryption_request_handler+0x144>)
1000e228:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e22a:	2400      	movs	r4, #0
1000e22c:	e005      	b.n	1000e23a <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e22e:	4807      	ldr	r0, [pc, #28]	; (1000e24c <ble_encryption_request_handler+0x138>)
1000e230:	4b07      	ldr	r3, [pc, #28]	; (1000e250 <ble_encryption_request_handler+0x13c>)
1000e232:	4798      	blx	r3
1000e234:	4814      	ldr	r0, [pc, #80]	; (1000e288 <ble_encryption_request_handler+0x174>)
1000e236:	4b08      	ldr	r3, [pc, #32]	; (1000e258 <ble_encryption_request_handler+0x144>)
1000e238:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e23a:	0020      	movs	r0, r4
1000e23c:	bc1c      	pop	{r2, r3, r4}
1000e23e:	4691      	mov	r9, r2
1000e240:	469a      	mov	sl, r3
1000e242:	46a3      	mov	fp, r4
1000e244:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e246:	46c0      	nop			; (mov r8, r8)
1000e248:	1001a29c 	.word	0x1001a29c
1000e24c:	100164f8 	.word	0x100164f8
1000e250:	10015351 	.word	0x10015351
1000e254:	10017b18 	.word	0x10017b18
1000e258:	10015231 	.word	0x10015231
1000e25c:	10017b44 	.word	0x10017b44
1000e260:	10017b58 	.word	0x10017b58
1000e264:	10017b6c 	.word	0x10017b6c
1000e268:	10017b7c 	.word	0x10017b7c
1000e26c:	100150b9 	.word	0x100150b9
1000e270:	10017b8c 	.word	0x10017b8c
1000e274:	10011575 	.word	0x10011575
1000e278:	10017ba0 	.word	0x10017ba0
1000e27c:	10017bd8 	.word	0x10017bd8
1000e280:	10010919 	.word	0x10010919
1000e284:	10017c30 	.word	0x10017c30
1000e288:	10017c50 	.word	0x10017c50

1000e28c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e28c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e28e:	2a00      	cmp	r2, #0
1000e290:	d047      	beq.n	1000e322 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e292:	2906      	cmp	r1, #6
1000e294:	d847      	bhi.n	1000e326 <ble_mgr_events_callback_handler+0x9a>
1000e296:	0089      	lsls	r1, r1, #2
1000e298:	4b28      	ldr	r3, [pc, #160]	; (1000e33c <ble_mgr_events_callback_handler+0xb0>)
1000e29a:	585b      	ldr	r3, [r3, r1]
1000e29c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e29e:	4b28      	ldr	r3, [pc, #160]	; (1000e340 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e2a0:	2405      	movs	r4, #5
1000e2a2:	e00a      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e2a4:	4b27      	ldr	r3, [pc, #156]	; (1000e344 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e2a6:	2401      	movs	r4, #1
			}
			break;
1000e2a8:	e007      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e2aa:	4b27      	ldr	r3, [pc, #156]	; (1000e348 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e2ac:	2405      	movs	r4, #5
			}
			break;
1000e2ae:	e004      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e2b0:	4b26      	ldr	r3, [pc, #152]	; (1000e34c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e2b2:	2401      	movs	r4, #1
			}
			break;
1000e2b4:	e001      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e2b6:	4b26      	ldr	r3, [pc, #152]	; (1000e350 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e2b8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e2ba:	2800      	cmp	r0, #0
1000e2bc:	d116      	bne.n	1000e2ec <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e2be:	6819      	ldr	r1, [r3, #0]
1000e2c0:	2900      	cmp	r1, #0
1000e2c2:	d10b      	bne.n	1000e2dc <ble_mgr_events_callback_handler+0x50>
1000e2c4:	e006      	b.n	1000e2d4 <ble_mgr_events_callback_handler+0x48>
1000e2c6:	001d      	movs	r5, r3
1000e2c8:	3304      	adds	r3, #4
1000e2ca:	1f18      	subs	r0, r3, #4
1000e2cc:	6800      	ldr	r0, [r0, #0]
1000e2ce:	2800      	cmp	r0, #0
1000e2d0:	d106      	bne.n	1000e2e0 <ble_mgr_events_callback_handler+0x54>
1000e2d2:	e000      	b.n	1000e2d6 <ble_mgr_events_callback_handler+0x4a>
1000e2d4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e2d6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e2d8:	2101      	movs	r1, #1
						break;
1000e2da:	e02c      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
1000e2dc:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e2de:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e2e0:	3101      	adds	r1, #1
1000e2e2:	b2c9      	uxtb	r1, r1
1000e2e4:	42a1      	cmp	r1, r4
1000e2e6:	d3ee      	bcc.n	1000e2c6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e2e8:	2100      	movs	r1, #0
1000e2ea:	e024      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
1000e2ec:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e2ee:	2801      	cmp	r0, #1
1000e2f0:	d121      	bne.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e2f2:	6819      	ldr	r1, [r3, #0]
1000e2f4:	428a      	cmp	r2, r1
1000e2f6:	d10c      	bne.n	1000e312 <ble_mgr_events_callback_handler+0x86>
1000e2f8:	e006      	b.n	1000e308 <ble_mgr_events_callback_handler+0x7c>
1000e2fa:	001d      	movs	r5, r3
1000e2fc:	3304      	adds	r3, #4
1000e2fe:	1f18      	subs	r0, r3, #4
1000e300:	6800      	ldr	r0, [r0, #0]
1000e302:	4282      	cmp	r2, r0
1000e304:	d107      	bne.n	1000e316 <ble_mgr_events_callback_handler+0x8a>
1000e306:	e000      	b.n	1000e30a <ble_mgr_events_callback_handler+0x7e>
1000e308:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e30a:	2300      	movs	r3, #0
1000e30c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e30e:	2101      	movs	r1, #1
						break;
1000e310:	e011      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
1000e312:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e314:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e316:	3101      	adds	r1, #1
1000e318:	b2c9      	uxtb	r1, r1
1000e31a:	42a1      	cmp	r1, r4
1000e31c:	d3ed      	bcc.n	1000e2fa <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e31e:	2100      	movs	r1, #0
1000e320:	e009      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e322:	2100      	movs	r1, #0
1000e324:	e007      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e326:	2100      	movs	r1, #0
1000e328:	e005      	b.n	1000e336 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e32a:	4b0a      	ldr	r3, [pc, #40]	; (1000e354 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e32c:	2405      	movs	r4, #5
1000e32e:	e7c4      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e330:	4b09      	ldr	r3, [pc, #36]	; (1000e358 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e332:	2401      	movs	r4, #1
1000e334:	e7c1      	b.n	1000e2ba <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e336:	0008      	movs	r0, r1
1000e338:	bd30      	pop	{r4, r5, pc}
1000e33a:	46c0      	nop			; (mov r8, r8)
1000e33c:	10017504 	.word	0x10017504
1000e340:	1001a288 	.word	0x1001a288
1000e344:	1001a284 	.word	0x1001a284
1000e348:	1001a50c 	.word	0x1001a50c
1000e34c:	1001aac0 	.word	0x1001aac0
1000e350:	1001a520 	.word	0x1001a520
1000e354:	1001a534 	.word	0x1001a534
1000e358:	1001a57c 	.word	0x1001a57c

1000e35c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e35e:	465f      	mov	r7, fp
1000e360:	4656      	mov	r6, sl
1000e362:	464d      	mov	r5, r9
1000e364:	4644      	mov	r4, r8
1000e366:	b4f0      	push	{r4, r5, r6, r7}
1000e368:	b091      	sub	sp, #68	; 0x44
1000e36a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e36c:	2400      	movs	r4, #0
1000e36e:	4b7e      	ldr	r3, [pc, #504]	; (1000e568 <ble_device_init+0x20c>)
1000e370:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e372:	2207      	movs	r2, #7
1000e374:	2100      	movs	r1, #0
1000e376:	487d      	ldr	r0, [pc, #500]	; (1000e56c <ble_device_init+0x210>)
1000e378:	4e7d      	ldr	r6, [pc, #500]	; (1000e570 <ble_device_init+0x214>)
1000e37a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e37c:	2212      	movs	r2, #18
1000e37e:	2100      	movs	r1, #0
1000e380:	487c      	ldr	r0, [pc, #496]	; (1000e574 <ble_device_init+0x218>)
1000e382:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e384:	4a7c      	ldr	r2, [pc, #496]	; (1000e578 <ble_device_init+0x21c>)
1000e386:	2100      	movs	r1, #0
1000e388:	487c      	ldr	r0, [pc, #496]	; (1000e57c <ble_device_init+0x220>)
1000e38a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e38c:	4b7c      	ldr	r3, [pc, #496]	; (1000e580 <ble_device_init+0x224>)
1000e38e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e390:	22cd      	movs	r2, #205	; 0xcd
1000e392:	0092      	lsls	r2, r2, #2
1000e394:	2100      	movs	r1, #0
1000e396:	487b      	ldr	r0, [pc, #492]	; (1000e584 <ble_device_init+0x228>)
1000e398:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e39a:	4b7b      	ldr	r3, [pc, #492]	; (1000e588 <ble_device_init+0x22c>)
1000e39c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e39e:	2283      	movs	r2, #131	; 0x83
1000e3a0:	0092      	lsls	r2, r2, #2
1000e3a2:	2100      	movs	r1, #0
1000e3a4:	4879      	ldr	r0, [pc, #484]	; (1000e58c <ble_device_init+0x230>)
1000e3a6:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e3a8:	4b79      	ldr	r3, [pc, #484]	; (1000e590 <ble_device_init+0x234>)
1000e3aa:	469b      	mov	fp, r3
1000e3ac:	2380      	movs	r3, #128	; 0x80
1000e3ae:	00db      	lsls	r3, r3, #3
1000e3b0:	469a      	mov	sl, r3
1000e3b2:	001a      	movs	r2, r3
1000e3b4:	2100      	movs	r1, #0
1000e3b6:	4658      	mov	r0, fp
1000e3b8:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e3ba:	4b76      	ldr	r3, [pc, #472]	; (1000e594 <ble_device_init+0x238>)
1000e3bc:	4699      	mov	r9, r3
1000e3be:	2380      	movs	r3, #128	; 0x80
1000e3c0:	015b      	lsls	r3, r3, #5
1000e3c2:	4698      	mov	r8, r3
1000e3c4:	001a      	movs	r2, r3
1000e3c6:	2100      	movs	r1, #0
1000e3c8:	4648      	mov	r0, r9
1000e3ca:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e3cc:	4f72      	ldr	r7, [pc, #456]	; (1000e598 <ble_device_init+0x23c>)
1000e3ce:	221c      	movs	r2, #28
1000e3d0:	2100      	movs	r1, #0
1000e3d2:	0038      	movs	r0, r7
1000e3d4:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e3d6:	465b      	mov	r3, fp
1000e3d8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e3da:	4653      	mov	r3, sl
1000e3dc:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e3de:	464b      	mov	r3, r9
1000e3e0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e3e2:	4643      	mov	r3, r8
1000e3e4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e3e6:	4b6d      	ldr	r3, [pc, #436]	; (1000e59c <ble_device_init+0x240>)
1000e3e8:	601c      	str	r4, [r3, #0]
1000e3ea:	605c      	str	r4, [r3, #4]
1000e3ec:	609c      	str	r4, [r3, #8]
1000e3ee:	60dc      	str	r4, [r3, #12]
1000e3f0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e3f2:	4b6b      	ldr	r3, [pc, #428]	; (1000e5a0 <ble_device_init+0x244>)
1000e3f4:	601c      	str	r4, [r3, #0]
1000e3f6:	605c      	str	r4, [r3, #4]
1000e3f8:	609c      	str	r4, [r3, #8]
1000e3fa:	60dc      	str	r4, [r3, #12]
1000e3fc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e3fe:	4b69      	ldr	r3, [pc, #420]	; (1000e5a4 <ble_device_init+0x248>)
1000e400:	601c      	str	r4, [r3, #0]
1000e402:	605c      	str	r4, [r3, #4]
1000e404:	609c      	str	r4, [r3, #8]
1000e406:	60dc      	str	r4, [r3, #12]
1000e408:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e40a:	4b67      	ldr	r3, [pc, #412]	; (1000e5a8 <ble_device_init+0x24c>)
1000e40c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e40e:	4b67      	ldr	r3, [pc, #412]	; (1000e5ac <ble_device_init+0x250>)
1000e410:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e412:	4b67      	ldr	r3, [pc, #412]	; (1000e5b0 <ble_device_init+0x254>)
1000e414:	601c      	str	r4, [r3, #0]
1000e416:	605c      	str	r4, [r3, #4]
1000e418:	609c      	str	r4, [r3, #8]
1000e41a:	60dc      	str	r4, [r3, #12]
1000e41c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e41e:	4b65      	ldr	r3, [pc, #404]	; (1000e5b4 <ble_device_init+0x258>)
1000e420:	601c      	str	r4, [r3, #0]
1000e422:	4c65      	ldr	r4, [pc, #404]	; (1000e5b8 <ble_device_init+0x25c>)
1000e424:	239b      	movs	r3, #155	; 0x9b
1000e426:	009b      	lsls	r3, r3, #2
1000e428:	4698      	mov	r8, r3
1000e42a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e42c:	4f50      	ldr	r7, [pc, #320]	; (1000e570 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e42e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e430:	227c      	movs	r2, #124	; 0x7c
1000e432:	2100      	movs	r1, #0
1000e434:	0020      	movs	r0, r4
1000e436:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e438:	0023      	movs	r3, r4
1000e43a:	335e      	adds	r3, #94	; 0x5e
1000e43c:	2200      	movs	r2, #0
1000e43e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e440:	7626      	strb	r6, [r4, #24]
1000e442:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e444:	45a0      	cmp	r8, r4
1000e446:	d1f3      	bne.n	1000e430 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e448:	4b5c      	ldr	r3, [pc, #368]	; (1000e5bc <ble_device_init+0x260>)
1000e44a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e44c:	4c52      	ldr	r4, [pc, #328]	; (1000e598 <ble_device_init+0x23c>)
1000e44e:	4b4a      	ldr	r3, [pc, #296]	; (1000e578 <ble_device_init+0x21c>)
1000e450:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e452:	4b4a      	ldr	r3, [pc, #296]	; (1000e57c <ble_device_init+0x220>)
1000e454:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e456:	485a      	ldr	r0, [pc, #360]	; (1000e5c0 <ble_device_init+0x264>)
1000e458:	4b5a      	ldr	r3, [pc, #360]	; (1000e5c4 <ble_device_init+0x268>)
1000e45a:	4798      	blx	r3
1000e45c:	485a      	ldr	r0, [pc, #360]	; (1000e5c8 <ble_device_init+0x26c>)
1000e45e:	4b5b      	ldr	r3, [pc, #364]	; (1000e5cc <ble_device_init+0x270>)
1000e460:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e462:	0020      	movs	r0, r4
1000e464:	4b5a      	ldr	r3, [pc, #360]	; (1000e5d0 <ble_device_init+0x274>)
1000e466:	4798      	blx	r3
1000e468:	2800      	cmp	r0, #0
1000e46a:	d00b      	beq.n	1000e484 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e46c:	4e54      	ldr	r6, [pc, #336]	; (1000e5c0 <ble_device_init+0x264>)
1000e46e:	0030      	movs	r0, r6
1000e470:	4d54      	ldr	r5, [pc, #336]	; (1000e5c4 <ble_device_init+0x268>)
1000e472:	47a8      	blx	r5
1000e474:	4857      	ldr	r0, [pc, #348]	; (1000e5d4 <ble_device_init+0x278>)
1000e476:	4c55      	ldr	r4, [pc, #340]	; (1000e5cc <ble_device_init+0x270>)
1000e478:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e47a:	0030      	movs	r0, r6
1000e47c:	47a8      	blx	r5
1000e47e:	4856      	ldr	r0, [pc, #344]	; (1000e5d8 <ble_device_init+0x27c>)
1000e480:	47a0      	blx	r4
1000e482:	e7fe      	b.n	1000e482 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e484:	4a55      	ldr	r2, [pc, #340]	; (1000e5dc <ble_device_init+0x280>)
1000e486:	2100      	movs	r1, #0
1000e488:	2000      	movs	r0, #0
1000e48a:	4c55      	ldr	r4, [pc, #340]	; (1000e5e0 <ble_device_init+0x284>)
1000e48c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e48e:	4a55      	ldr	r2, [pc, #340]	; (1000e5e4 <ble_device_init+0x288>)
1000e490:	2102      	movs	r1, #2
1000e492:	2000      	movs	r0, #0
1000e494:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e496:	2109      	movs	r1, #9
1000e498:	4853      	ldr	r0, [pc, #332]	; (1000e5e8 <ble_device_init+0x28c>)
1000e49a:	4b54      	ldr	r3, [pc, #336]	; (1000e5ec <ble_device_init+0x290>)
1000e49c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e49e:	2800      	cmp	r0, #0
1000e4a0:	d005      	beq.n	1000e4ae <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e4a2:	4847      	ldr	r0, [pc, #284]	; (1000e5c0 <ble_device_init+0x264>)
1000e4a4:	4b47      	ldr	r3, [pc, #284]	; (1000e5c4 <ble_device_init+0x268>)
1000e4a6:	4798      	blx	r3
1000e4a8:	4851      	ldr	r0, [pc, #324]	; (1000e5f0 <ble_device_init+0x294>)
1000e4aa:	4b48      	ldr	r3, [pc, #288]	; (1000e5cc <ble_device_init+0x270>)
1000e4ac:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e4ae:	2207      	movs	r2, #7
1000e4b0:	4950      	ldr	r1, [pc, #320]	; (1000e5f4 <ble_device_init+0x298>)
1000e4b2:	3108      	adds	r1, #8
1000e4b4:	a804      	add	r0, sp, #16
1000e4b6:	4b50      	ldr	r3, [pc, #320]	; (1000e5f8 <ble_device_init+0x29c>)
1000e4b8:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e4ba:	2226      	movs	r2, #38	; 0x26
1000e4bc:	2100      	movs	r1, #0
1000e4be:	a806      	add	r0, sp, #24
1000e4c0:	4b2b      	ldr	r3, [pc, #172]	; (1000e570 <ble_device_init+0x214>)
1000e4c2:	4798      	blx	r3
	
	if (addr == NULL)
1000e4c4:	2d00      	cmp	r5, #0
1000e4c6:	d10c      	bne.n	1000e4e2 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e4c8:	a804      	add	r0, sp, #16
1000e4ca:	4b4c      	ldr	r3, [pc, #304]	; (1000e5fc <ble_device_init+0x2a0>)
1000e4cc:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e4ce:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e4d0:	2800      	cmp	r0, #0
1000e4d2:	d006      	beq.n	1000e4e2 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e4d4:	483a      	ldr	r0, [pc, #232]	; (1000e5c0 <ble_device_init+0x264>)
1000e4d6:	4b3b      	ldr	r3, [pc, #236]	; (1000e5c4 <ble_device_init+0x268>)
1000e4d8:	4798      	blx	r3
1000e4da:	4849      	ldr	r0, [pc, #292]	; (1000e600 <ble_device_init+0x2a4>)
1000e4dc:	4b3b      	ldr	r3, [pc, #236]	; (1000e5cc <ble_device_init+0x270>)
1000e4de:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e4e0:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e4e2:	4837      	ldr	r0, [pc, #220]	; (1000e5c0 <ble_device_init+0x264>)
1000e4e4:	4b37      	ldr	r3, [pc, #220]	; (1000e5c4 <ble_device_init+0x268>)
1000e4e6:	4798      	blx	r3
1000e4e8:	792b      	ldrb	r3, [r5, #4]
1000e4ea:	796a      	ldrb	r2, [r5, #5]
1000e4ec:	79a9      	ldrb	r1, [r5, #6]
1000e4ee:	7828      	ldrb	r0, [r5, #0]
1000e4f0:	9003      	str	r0, [sp, #12]
1000e4f2:	7868      	ldrb	r0, [r5, #1]
1000e4f4:	9002      	str	r0, [sp, #8]
1000e4f6:	78a8      	ldrb	r0, [r5, #2]
1000e4f8:	9001      	str	r0, [sp, #4]
1000e4fa:	78e8      	ldrb	r0, [r5, #3]
1000e4fc:	9000      	str	r0, [sp, #0]
1000e4fe:	4841      	ldr	r0, [pc, #260]	; (1000e604 <ble_device_init+0x2a8>)
1000e500:	4c32      	ldr	r4, [pc, #200]	; (1000e5cc <ble_device_init+0x270>)
1000e502:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e504:	ac06      	add	r4, sp, #24
1000e506:	230a      	movs	r3, #10
1000e508:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e50a:	4b3f      	ldr	r3, [pc, #252]	; (1000e608 <ble_device_init+0x2ac>)
1000e50c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e50e:	2207      	movs	r2, #7
1000e510:	0029      	movs	r1, r5
1000e512:	a807      	add	r0, sp, #28
1000e514:	4b38      	ldr	r3, [pc, #224]	; (1000e5f8 <ble_device_init+0x29c>)
1000e516:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e518:	2300      	movs	r3, #0
1000e51a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e51c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e51e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e520:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e522:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e524:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e526:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e528:	2380      	movs	r3, #128	; 0x80
1000e52a:	009b      	lsls	r3, r3, #2
1000e52c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e52e:	0020      	movs	r0, r4
1000e530:	4b36      	ldr	r3, [pc, #216]	; (1000e60c <ble_device_init+0x2b0>)
1000e532:	4798      	blx	r3
1000e534:	2800      	cmp	r0, #0
1000e536:	d005      	beq.n	1000e544 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e538:	4821      	ldr	r0, [pc, #132]	; (1000e5c0 <ble_device_init+0x264>)
1000e53a:	4b22      	ldr	r3, [pc, #136]	; (1000e5c4 <ble_device_init+0x268>)
1000e53c:	4798      	blx	r3
1000e53e:	4834      	ldr	r0, [pc, #208]	; (1000e610 <ble_device_init+0x2b4>)
1000e540:	4b22      	ldr	r3, [pc, #136]	; (1000e5cc <ble_device_init+0x270>)
1000e542:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e544:	0028      	movs	r0, r5
1000e546:	4b33      	ldr	r3, [pc, #204]	; (1000e614 <ble_device_init+0x2b8>)
1000e548:	4798      	blx	r3
1000e54a:	2800      	cmp	r0, #0
1000e54c:	d005      	beq.n	1000e55a <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e54e:	481c      	ldr	r0, [pc, #112]	; (1000e5c0 <ble_device_init+0x264>)
1000e550:	4b1c      	ldr	r3, [pc, #112]	; (1000e5c4 <ble_device_init+0x268>)
1000e552:	4798      	blx	r3
1000e554:	4830      	ldr	r0, [pc, #192]	; (1000e618 <ble_device_init+0x2bc>)
1000e556:	4b1d      	ldr	r3, [pc, #116]	; (1000e5cc <ble_device_init+0x270>)
1000e558:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e55a:	b011      	add	sp, #68	; 0x44
1000e55c:	bc3c      	pop	{r2, r3, r4, r5}
1000e55e:	4690      	mov	r8, r2
1000e560:	4699      	mov	r9, r3
1000e562:	46a2      	mov	sl, r4
1000e564:	46ab      	mov	fp, r5
1000e566:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e568:	10018e04 	.word	0x10018e04
1000e56c:	10018e0c 	.word	0x10018e0c
1000e570:	100150e9 	.word	0x100150e9
1000e574:	1001a548 	.word	0x1001a548
1000e578:	000004e2 	.word	0x000004e2
1000e57c:	10018924 	.word	0x10018924
1000e580:	10018e08 	.word	0x10018e08
1000e584:	1001a580 	.word	0x1001a580
1000e588:	1001a578 	.word	0x1001a578
1000e58c:	1001a8b4 	.word	0x1001a8b4
1000e590:	10018524 	.word	0x10018524
1000e594:	10018e14 	.word	0x10018e14
1000e598:	1001a55c 	.word	0x1001a55c
1000e59c:	1001a520 	.word	0x1001a520
1000e5a0:	1001a534 	.word	0x1001a534
1000e5a4:	1001a288 	.word	0x1001a288
1000e5a8:	1001a57c 	.word	0x1001a57c
1000e5ac:	1001a284 	.word	0x1001a284
1000e5b0:	1001a50c 	.word	0x1001a50c
1000e5b4:	1001aac0 	.word	0x1001aac0
1000e5b8:	1001a29c 	.word	0x1001a29c
1000e5bc:	1001a508 	.word	0x1001a508
1000e5c0:	100164f8 	.word	0x100164f8
1000e5c4:	10015351 	.word	0x10015351
1000e5c8:	10017c6c 	.word	0x10017c6c
1000e5cc:	10015231 	.word	0x10015231
1000e5d0:	10010525 	.word	0x10010525
1000e5d4:	10017c90 	.word	0x10017c90
1000e5d8:	10017cbc 	.word	0x10017cbc
1000e5dc:	1001806c 	.word	0x1001806c
1000e5e0:	1000e28d 	.word	0x1000e28d
1000e5e4:	10017620 	.word	0x10017620
1000e5e8:	10017d04 	.word	0x10017d04
1000e5ec:	1001043d 	.word	0x1001043d
1000e5f0:	10017d10 	.word	0x10017d10
1000e5f4:	10017610 	.word	0x10017610
1000e5f8:	100150d7 	.word	0x100150d7
1000e5fc:	10010471 	.word	0x10010471
1000e600:	10017d28 	.word	0x10017d28
1000e604:	10017d54 	.word	0x10017d54
1000e608:	00003a98 	.word	0x00003a98
1000e60c:	10010495 	.word	0x10010495
1000e610:	10017da4 	.word	0x10017da4
1000e614:	100106d9 	.word	0x100106d9
1000e618:	10017de0 	.word	0x10017de0

1000e61c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e61c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e61e:	2200      	movs	r2, #0
1000e620:	2100      	movs	r1, #0
1000e622:	4b0a      	ldr	r3, [pc, #40]	; (1000e64c <ble_send_slave_sec_request+0x30>)
1000e624:	4798      	blx	r3
1000e626:	1e04      	subs	r4, r0, #0
1000e628:	d106      	bne.n	1000e638 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e62a:	4809      	ldr	r0, [pc, #36]	; (1000e650 <ble_send_slave_sec_request+0x34>)
1000e62c:	4b09      	ldr	r3, [pc, #36]	; (1000e654 <ble_send_slave_sec_request+0x38>)
1000e62e:	4798      	blx	r3
1000e630:	4809      	ldr	r0, [pc, #36]	; (1000e658 <ble_send_slave_sec_request+0x3c>)
1000e632:	4b0a      	ldr	r3, [pc, #40]	; (1000e65c <ble_send_slave_sec_request+0x40>)
1000e634:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e636:	e006      	b.n	1000e646 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e638:	4805      	ldr	r0, [pc, #20]	; (1000e650 <ble_send_slave_sec_request+0x34>)
1000e63a:	4b06      	ldr	r3, [pc, #24]	; (1000e654 <ble_send_slave_sec_request+0x38>)
1000e63c:	4798      	blx	r3
1000e63e:	4808      	ldr	r0, [pc, #32]	; (1000e660 <ble_send_slave_sec_request+0x44>)
1000e640:	4b06      	ldr	r3, [pc, #24]	; (1000e65c <ble_send_slave_sec_request+0x40>)
1000e642:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e644:	24e2      	movs	r4, #226	; 0xe2
}
1000e646:	0020      	movs	r0, r4
1000e648:	bd10      	pop	{r4, pc}
1000e64a:	46c0      	nop			; (mov r8, r8)
1000e64c:	100114bd 	.word	0x100114bd
1000e650:	100164f8 	.word	0x100164f8
1000e654:	10015351 	.word	0x10015351
1000e658:	10017e30 	.word	0x10017e30
1000e65c:	10015231 	.word	0x10015231
1000e660:	10017e54 	.word	0x10017e54

1000e664 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e664:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e666:	465f      	mov	r7, fp
1000e668:	464e      	mov	r6, r9
1000e66a:	4645      	mov	r5, r8
1000e66c:	b4e0      	push	{r5, r6, r7}
1000e66e:	b09a      	sub	sp, #104	; 0x68
1000e670:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e672:	7a86      	ldrb	r6, [r0, #10]
1000e674:	2e00      	cmp	r6, #0
1000e676:	d000      	beq.n	1000e67a <ble_connected_state_handler+0x16>
1000e678:	e0cc      	b.n	1000e814 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e67a:	4878      	ldr	r0, [pc, #480]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e67c:	4f78      	ldr	r7, [pc, #480]	; (1000e860 <ble_connected_state_handler+0x1fc>)
1000e67e:	47b8      	blx	r7
1000e680:	792b      	ldrb	r3, [r5, #4]
1000e682:	796a      	ldrb	r2, [r5, #5]
1000e684:	79a9      	ldrb	r1, [r5, #6]
1000e686:	7868      	ldrb	r0, [r5, #1]
1000e688:	9002      	str	r0, [sp, #8]
1000e68a:	78a8      	ldrb	r0, [r5, #2]
1000e68c:	9001      	str	r0, [sp, #4]
1000e68e:	78e8      	ldrb	r0, [r5, #3]
1000e690:	9000      	str	r0, [sp, #0]
1000e692:	4874      	ldr	r0, [pc, #464]	; (1000e864 <ble_connected_state_handler+0x200>)
1000e694:	4c74      	ldr	r4, [pc, #464]	; (1000e868 <ble_connected_state_handler+0x204>)
1000e696:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e698:	4870      	ldr	r0, [pc, #448]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e69a:	47b8      	blx	r7
1000e69c:	8929      	ldrh	r1, [r5, #8]
1000e69e:	4873      	ldr	r0, [pc, #460]	; (1000e86c <ble_connected_state_handler+0x208>)
1000e6a0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e6a2:	2212      	movs	r2, #18
1000e6a4:	0029      	movs	r1, r5
1000e6a6:	4872      	ldr	r0, [pc, #456]	; (1000e870 <ble_connected_state_handler+0x20c>)
1000e6a8:	4b72      	ldr	r3, [pc, #456]	; (1000e874 <ble_connected_state_handler+0x210>)
1000e6aa:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e6ac:	9504      	str	r5, [sp, #16]
1000e6ae:	2207      	movs	r2, #7
1000e6b0:	0029      	movs	r1, r5
1000e6b2:	4871      	ldr	r0, [pc, #452]	; (1000e878 <ble_connected_state_handler+0x214>)
1000e6b4:	4b71      	ldr	r3, [pc, #452]	; (1000e87c <ble_connected_state_handler+0x218>)
1000e6b6:	4798      	blx	r3
1000e6b8:	2800      	cmp	r0, #0
1000e6ba:	d100      	bne.n	1000e6be <ble_connected_state_handler+0x5a>
1000e6bc:	e0b3      	b.n	1000e826 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e6be:	782b      	ldrb	r3, [r5, #0]
1000e6c0:	2b02      	cmp	r3, #2
1000e6c2:	d000      	beq.n	1000e6c6 <ble_connected_state_handler+0x62>
1000e6c4:	e0af      	b.n	1000e826 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e6c6:	2250      	movs	r2, #80	; 0x50
1000e6c8:	2100      	movs	r1, #0
1000e6ca:	a806      	add	r0, sp, #24
1000e6cc:	4b6c      	ldr	r3, [pc, #432]	; (1000e880 <ble_connected_state_handler+0x21c>)
1000e6ce:	4798      	blx	r3
1000e6d0:	4f6c      	ldr	r7, [pc, #432]	; (1000e884 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e6d2:	2300      	movs	r3, #0
1000e6d4:	e00b      	b.n	1000e6ee <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e6d6:	1c59      	adds	r1, r3, #1
1000e6d8:	7814      	ldrb	r4, [r2, #0]
1000e6da:	a806      	add	r0, sp, #24
1000e6dc:	54c4      	strb	r4, [r0, r3]
1000e6de:	3201      	adds	r2, #1
1000e6e0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e6e2:	42b3      	cmp	r3, r6
1000e6e4:	d1f7      	bne.n	1000e6d6 <ble_connected_state_handler+0x72>
1000e6e6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e6e8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e6ea:	2b50      	cmp	r3, #80	; 0x50
1000e6ec:	d004      	beq.n	1000e6f8 <ble_connected_state_handler+0x94>
1000e6ee:	001e      	movs	r6, r3
1000e6f0:	3610      	adds	r6, #16
1000e6f2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e6f4:	003a      	movs	r2, r7
1000e6f6:	e7ee      	b.n	1000e6d6 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e6f8:	aa06      	add	r2, sp, #24
1000e6fa:	0029      	movs	r1, r5
1000e6fc:	2005      	movs	r0, #5
1000e6fe:	4b62      	ldr	r3, [pc, #392]	; (1000e888 <ble_connected_state_handler+0x224>)
1000e700:	4798      	blx	r3
1000e702:	1e06      	subs	r6, r0, #0
1000e704:	d106      	bne.n	1000e714 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e706:	4855      	ldr	r0, [pc, #340]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e708:	4b55      	ldr	r3, [pc, #340]	; (1000e860 <ble_connected_state_handler+0x1fc>)
1000e70a:	4798      	blx	r3
1000e70c:	485f      	ldr	r0, [pc, #380]	; (1000e88c <ble_connected_state_handler+0x228>)
1000e70e:	4b56      	ldr	r3, [pc, #344]	; (1000e868 <ble_connected_state_handler+0x204>)
1000e710:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e712:	e09c      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e714:	4851      	ldr	r0, [pc, #324]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e716:	4b52      	ldr	r3, [pc, #328]	; (1000e860 <ble_connected_state_handler+0x1fc>)
1000e718:	4798      	blx	r3
1000e71a:	485d      	ldr	r0, [pc, #372]	; (1000e890 <ble_connected_state_handler+0x22c>)
1000e71c:	4b52      	ldr	r3, [pc, #328]	; (1000e868 <ble_connected_state_handler+0x204>)
1000e71e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e720:	26e2      	movs	r6, #226	; 0xe2
1000e722:	e094      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
1000e724:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e726:	9405      	str	r4, [sp, #20]
1000e728:	2207      	movs	r2, #7
1000e72a:	9904      	ldr	r1, [sp, #16]
1000e72c:	4648      	mov	r0, r9
1000e72e:	47d8      	blx	fp
1000e730:	2800      	cmp	r0, #0
1000e732:	d109      	bne.n	1000e748 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e734:	9a05      	ldr	r2, [sp, #20]
1000e736:	0153      	lsls	r3, r2, #5
1000e738:	1a9b      	subs	r3, r3, r2
1000e73a:	009a      	lsls	r2, r3, #2
1000e73c:	4b55      	ldr	r3, [pc, #340]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e73e:	189b      	adds	r3, r3, r2
1000e740:	335e      	adds	r3, #94	; 0x5e
1000e742:	2202      	movs	r2, #2
1000e744:	701a      	strb	r2, [r3, #0]
1000e746:	e02b      	b.n	1000e7a0 <ble_connected_state_handler+0x13c>
1000e748:	3401      	adds	r4, #1
1000e74a:	237c      	movs	r3, #124	; 0x7c
1000e74c:	469c      	mov	ip, r3
1000e74e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e750:	2c05      	cmp	r4, #5
1000e752:	d1e7      	bne.n	1000e724 <ble_connected_state_handler+0xc0>
1000e754:	e072      	b.n	1000e83c <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e756:	001c      	movs	r4, r3
1000e758:	7811      	ldrb	r1, [r2, #0]
1000e75a:	2900      	cmp	r1, #0
1000e75c:	d11a      	bne.n	1000e794 <ble_connected_state_handler+0x130>
1000e75e:	e001      	b.n	1000e764 <ble_connected_state_handler+0x100>
1000e760:	2400      	movs	r4, #0
1000e762:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e764:	0163      	lsls	r3, r4, #5
1000e766:	4699      	mov	r9, r3
1000e768:	1b18      	subs	r0, r3, r4
1000e76a:	0080      	lsls	r0, r0, #2
1000e76c:	4b49      	ldr	r3, [pc, #292]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e76e:	4698      	mov	r8, r3
1000e770:	4440      	add	r0, r8
1000e772:	2212      	movs	r2, #18
1000e774:	0029      	movs	r1, r5
1000e776:	4b3f      	ldr	r3, [pc, #252]	; (1000e874 <ble_connected_state_handler+0x210>)
1000e778:	4798      	blx	r3
						ble_device_count++;
1000e77a:	4a47      	ldr	r2, [pc, #284]	; (1000e898 <ble_connected_state_handler+0x234>)
1000e77c:	7813      	ldrb	r3, [r2, #0]
1000e77e:	3301      	adds	r3, #1
1000e780:	b2db      	uxtb	r3, r3
1000e782:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e784:	464b      	mov	r3, r9
1000e786:	1b1b      	subs	r3, r3, r4
1000e788:	009b      	lsls	r3, r3, #2
1000e78a:	4443      	add	r3, r8
1000e78c:	335e      	adds	r3, #94	; 0x5e
1000e78e:	2202      	movs	r2, #2
1000e790:	701a      	strb	r2, [r3, #0]
						break;
1000e792:	e005      	b.n	1000e7a0 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e794:	1c79      	adds	r1, r7, #1
1000e796:	b2cf      	uxtb	r7, r1
1000e798:	3301      	adds	r3, #1
1000e79a:	327c      	adds	r2, #124	; 0x7c
1000e79c:	2f05      	cmp	r7, #5
1000e79e:	d1da      	bne.n	1000e756 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e7a0:	2207      	movs	r2, #7
1000e7a2:	0029      	movs	r1, r5
1000e7a4:	4834      	ldr	r0, [pc, #208]	; (1000e878 <ble_connected_state_handler+0x214>)
1000e7a6:	4b35      	ldr	r3, [pc, #212]	; (1000e87c <ble_connected_state_handler+0x218>)
1000e7a8:	4798      	blx	r3
1000e7aa:	2800      	cmp	r0, #0
1000e7ac:	d10c      	bne.n	1000e7c8 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e7ae:	017b      	lsls	r3, r7, #5
1000e7b0:	1bdb      	subs	r3, r3, r7
1000e7b2:	009b      	lsls	r3, r3, #2
1000e7b4:	4a37      	ldr	r2, [pc, #220]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e7b6:	18d3      	adds	r3, r2, r3
1000e7b8:	2205      	movs	r2, #5
1000e7ba:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e7bc:	3202      	adds	r2, #2
1000e7be:	2100      	movs	r1, #0
1000e7c0:	482d      	ldr	r0, [pc, #180]	; (1000e878 <ble_connected_state_handler+0x214>)
1000e7c2:	4b2f      	ldr	r3, [pc, #188]	; (1000e880 <ble_connected_state_handler+0x21c>)
1000e7c4:	4798      	blx	r3
1000e7c6:	e042      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e7c8:	4b32      	ldr	r3, [pc, #200]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e7ca:	4698      	mov	r8, r3
1000e7cc:	017c      	lsls	r4, r7, #5
1000e7ce:	1be3      	subs	r3, r4, r7
1000e7d0:	009b      	lsls	r3, r3, #2
1000e7d2:	4443      	add	r3, r8
1000e7d4:	220a      	movs	r2, #10
1000e7d6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e7d8:	3a03      	subs	r2, #3
1000e7da:	2100      	movs	r1, #0
1000e7dc:	4826      	ldr	r0, [pc, #152]	; (1000e878 <ble_connected_state_handler+0x214>)
1000e7de:	4b28      	ldr	r3, [pc, #160]	; (1000e880 <ble_connected_state_handler+0x21c>)
1000e7e0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e7e2:	1be4      	subs	r4, r4, r7
1000e7e4:	00a4      	lsls	r4, r4, #2
1000e7e6:	4444      	add	r4, r8
1000e7e8:	7ca3      	ldrb	r3, [r4, #18]
1000e7ea:	2b0a      	cmp	r3, #10
1000e7ec:	d12f      	bne.n	1000e84e <ble_connected_state_handler+0x1ea>
1000e7ee:	e00d      	b.n	1000e80c <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e7f0:	481a      	ldr	r0, [pc, #104]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e7f2:	4b1b      	ldr	r3, [pc, #108]	; (1000e860 <ble_connected_state_handler+0x1fc>)
1000e7f4:	4798      	blx	r3
1000e7f6:	4b28      	ldr	r3, [pc, #160]	; (1000e898 <ble_connected_state_handler+0x234>)
1000e7f8:	7819      	ldrb	r1, [r3, #0]
1000e7fa:	b2c9      	uxtb	r1, r1
1000e7fc:	4827      	ldr	r0, [pc, #156]	; (1000e89c <ble_connected_state_handler+0x238>)
1000e7fe:	4b1a      	ldr	r3, [pc, #104]	; (1000e868 <ble_connected_state_handler+0x204>)
1000e800:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e802:	8928      	ldrh	r0, [r5, #8]
1000e804:	2113      	movs	r1, #19
1000e806:	4b26      	ldr	r3, [pc, #152]	; (1000e8a0 <ble_connected_state_handler+0x23c>)
1000e808:	4798      	blx	r3
1000e80a:	e020      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e80c:	8928      	ldrh	r0, [r5, #8]
1000e80e:	4b25      	ldr	r3, [pc, #148]	; (1000e8a4 <ble_connected_state_handler+0x240>)
1000e810:	4798      	blx	r3
1000e812:	e01c      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e814:	4811      	ldr	r0, [pc, #68]	; (1000e85c <ble_connected_state_handler+0x1f8>)
1000e816:	4b12      	ldr	r3, [pc, #72]	; (1000e860 <ble_connected_state_handler+0x1fc>)
1000e818:	4798      	blx	r3
1000e81a:	7aa9      	ldrb	r1, [r5, #10]
1000e81c:	4822      	ldr	r0, [pc, #136]	; (1000e8a8 <ble_connected_state_handler+0x244>)
1000e81e:	4b12      	ldr	r3, [pc, #72]	; (1000e868 <ble_connected_state_handler+0x204>)
1000e820:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e822:	2600      	movs	r6, #0
1000e824:	e013      	b.n	1000e84e <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e826:	4b1c      	ldr	r3, [pc, #112]	; (1000e898 <ble_connected_state_handler+0x234>)
1000e828:	781b      	ldrb	r3, [r3, #0]
1000e82a:	b2db      	uxtb	r3, r3
1000e82c:	2b04      	cmp	r3, #4
1000e82e:	d8df      	bhi.n	1000e7f0 <ble_connected_state_handler+0x18c>
1000e830:	4b18      	ldr	r3, [pc, #96]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e832:	4699      	mov	r9, r3
1000e834:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e836:	4b11      	ldr	r3, [pc, #68]	; (1000e87c <ble_connected_state_handler+0x218>)
1000e838:	469b      	mov	fp, r3
1000e83a:	e773      	b.n	1000e724 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e83c:	235e      	movs	r3, #94	; 0x5e
1000e83e:	4a15      	ldr	r2, [pc, #84]	; (1000e894 <ble_connected_state_handler+0x230>)
1000e840:	5cd3      	ldrb	r3, [r2, r3]
1000e842:	2b00      	cmp	r3, #0
1000e844:	d08c      	beq.n	1000e760 <ble_connected_state_handler+0xfc>
1000e846:	4a19      	ldr	r2, [pc, #100]	; (1000e8ac <ble_connected_state_handler+0x248>)
1000e848:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e84a:	2701      	movs	r7, #1
1000e84c:	e783      	b.n	1000e756 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e84e:	0030      	movs	r0, r6
1000e850:	b01a      	add	sp, #104	; 0x68
1000e852:	bc1c      	pop	{r2, r3, r4}
1000e854:	4690      	mov	r8, r2
1000e856:	4699      	mov	r9, r3
1000e858:	46a3      	mov	fp, r4
1000e85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e85c:	100164f8 	.word	0x100164f8
1000e860:	10015351 	.word	0x10015351
1000e864:	10017e74 	.word	0x10017e74
1000e868:	10015231 	.word	0x10015231
1000e86c:	10017eb8 	.word	0x10017eb8
1000e870:	1001a548 	.word	0x1001a548
1000e874:	100150d7 	.word	0x100150d7
1000e878:	10018e0c 	.word	0x10018e0c
1000e87c:	100150b9 	.word	0x100150b9
1000e880:	100150e9 	.word	0x100150e9
1000e884:	1001a2e2 	.word	0x1001a2e2
1000e888:	10010945 	.word	0x10010945
1000e88c:	10017ed0 	.word	0x10017ed0
1000e890:	10017ef4 	.word	0x10017ef4
1000e894:	1001a29c 	.word	0x1001a29c
1000e898:	1001a508 	.word	0x1001a508
1000e89c:	10017f18 	.word	0x10017f18
1000e8a0:	10010919 	.word	0x10010919
1000e8a4:	1000e61d 	.word	0x1000e61d
1000e8a8:	10017f54 	.word	0x10017f54
1000e8ac:	1001a376 	.word	0x1001a376

1000e8b0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e8b2:	4647      	mov	r7, r8
1000e8b4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e8b6:	7803      	ldrb	r3, [r0, #0]
1000e8b8:	2b00      	cmp	r3, #0
1000e8ba:	d152      	bne.n	1000e962 <ble_resolv_rand_addr_handler+0xb2>
1000e8bc:	4d3e      	ldr	r5, [pc, #248]	; (1000e9b8 <ble_resolv_rand_addr_handler+0x108>)
1000e8be:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e8c0:	1c46      	adds	r6, r0, #1
1000e8c2:	4f3e      	ldr	r7, [pc, #248]	; (1000e9bc <ble_resolv_rand_addr_handler+0x10c>)
1000e8c4:	2210      	movs	r2, #16
1000e8c6:	0029      	movs	r1, r5
1000e8c8:	0030      	movs	r0, r6
1000e8ca:	47b8      	blx	r7
1000e8cc:	2800      	cmp	r0, #0
1000e8ce:	d031      	beq.n	1000e934 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8d0:	3401      	adds	r4, #1
1000e8d2:	b2e4      	uxtb	r4, r4
1000e8d4:	357c      	adds	r5, #124	; 0x7c
1000e8d6:	2c05      	cmp	r4, #5
1000e8d8:	d1f4      	bne.n	1000e8c4 <ble_resolv_rand_addr_handler+0x14>
1000e8da:	e042      	b.n	1000e962 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e8dc:	001d      	movs	r5, r3
1000e8de:	7811      	ldrb	r1, [r2, #0]
1000e8e0:	2900      	cmp	r1, #0
1000e8e2:	d11b      	bne.n	1000e91c <ble_resolv_rand_addr_handler+0x6c>
1000e8e4:	e001      	b.n	1000e8ea <ble_resolv_rand_addr_handler+0x3a>
1000e8e6:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e8e8:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e8ea:	4b35      	ldr	r3, [pc, #212]	; (1000e9c0 <ble_resolv_rand_addr_handler+0x110>)
1000e8ec:	4698      	mov	r8, r3
1000e8ee:	016e      	lsls	r6, r5, #5
1000e8f0:	1b77      	subs	r7, r6, r5
1000e8f2:	00bf      	lsls	r7, r7, #2
1000e8f4:	4447      	add	r7, r8
1000e8f6:	2212      	movs	r2, #18
1000e8f8:	4932      	ldr	r1, [pc, #200]	; (1000e9c4 <ble_resolv_rand_addr_handler+0x114>)
1000e8fa:	0038      	movs	r0, r7
1000e8fc:	4b32      	ldr	r3, [pc, #200]	; (1000e9c8 <ble_resolv_rand_addr_handler+0x118>)
1000e8fe:	4798      	blx	r3
				ble_device_count++;
1000e900:	4a32      	ldr	r2, [pc, #200]	; (1000e9cc <ble_resolv_rand_addr_handler+0x11c>)
1000e902:	7813      	ldrb	r3, [r2, #0]
1000e904:	3301      	adds	r3, #1
1000e906:	b2db      	uxtb	r3, r3
1000e908:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e90a:	375e      	adds	r7, #94	; 0x5e
1000e90c:	2302      	movs	r3, #2
1000e90e:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e910:	1b75      	subs	r5, r6, r5
1000e912:	00ad      	lsls	r5, r5, #2
1000e914:	4445      	add	r5, r8
1000e916:	3308      	adds	r3, #8
1000e918:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e91a:	e031      	b.n	1000e980 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e91c:	3401      	adds	r4, #1
1000e91e:	b2e4      	uxtb	r4, r4
1000e920:	3301      	adds	r3, #1
1000e922:	327c      	adds	r2, #124	; 0x7c
1000e924:	2c05      	cmp	r4, #5
1000e926:	d1d9      	bne.n	1000e8dc <ble_resolv_rand_addr_handler+0x2c>
1000e928:	e03a      	b.n	1000e9a0 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e92a:	4b26      	ldr	r3, [pc, #152]	; (1000e9c4 <ble_resolv_rand_addr_handler+0x114>)
1000e92c:	8918      	ldrh	r0, [r3, #8]
1000e92e:	4b28      	ldr	r3, [pc, #160]	; (1000e9d0 <ble_resolv_rand_addr_handler+0x120>)
1000e930:	4798      	blx	r3
1000e932:	e03c      	b.n	1000e9ae <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e934:	4827      	ldr	r0, [pc, #156]	; (1000e9d4 <ble_resolv_rand_addr_handler+0x124>)
1000e936:	4b28      	ldr	r3, [pc, #160]	; (1000e9d8 <ble_resolv_rand_addr_handler+0x128>)
1000e938:	4798      	blx	r3
1000e93a:	4828      	ldr	r0, [pc, #160]	; (1000e9dc <ble_resolv_rand_addr_handler+0x12c>)
1000e93c:	4b28      	ldr	r3, [pc, #160]	; (1000e9e0 <ble_resolv_rand_addr_handler+0x130>)
1000e93e:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e940:	481f      	ldr	r0, [pc, #124]	; (1000e9c0 <ble_resolv_rand_addr_handler+0x110>)
1000e942:	0163      	lsls	r3, r4, #5
1000e944:	1b1a      	subs	r2, r3, r4
1000e946:	0092      	lsls	r2, r2, #2
1000e948:	1882      	adds	r2, r0, r2
1000e94a:	0011      	movs	r1, r2
1000e94c:	315e      	adds	r1, #94	; 0x5e
1000e94e:	2502      	movs	r5, #2
1000e950:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e952:	210a      	movs	r1, #10
1000e954:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e956:	0010      	movs	r0, r2
1000e958:	2212      	movs	r2, #18
1000e95a:	491a      	ldr	r1, [pc, #104]	; (1000e9c4 <ble_resolv_rand_addr_handler+0x114>)
1000e95c:	4b1a      	ldr	r3, [pc, #104]	; (1000e9c8 <ble_resolv_rand_addr_handler+0x118>)
1000e95e:	4798      	blx	r3
1000e960:	e00e      	b.n	1000e980 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000e962:	481c      	ldr	r0, [pc, #112]	; (1000e9d4 <ble_resolv_rand_addr_handler+0x124>)
1000e964:	4b1c      	ldr	r3, [pc, #112]	; (1000e9d8 <ble_resolv_rand_addr_handler+0x128>)
1000e966:	4798      	blx	r3
1000e968:	481e      	ldr	r0, [pc, #120]	; (1000e9e4 <ble_resolv_rand_addr_handler+0x134>)
1000e96a:	4b1d      	ldr	r3, [pc, #116]	; (1000e9e0 <ble_resolv_rand_addr_handler+0x130>)
1000e96c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e96e:	235e      	movs	r3, #94	; 0x5e
1000e970:	4a13      	ldr	r2, [pc, #76]	; (1000e9c0 <ble_resolv_rand_addr_handler+0x110>)
1000e972:	5cd3      	ldrb	r3, [r2, r3]
1000e974:	2b00      	cmp	r3, #0
1000e976:	d0b6      	beq.n	1000e8e6 <ble_resolv_rand_addr_handler+0x36>
1000e978:	4a1b      	ldr	r2, [pc, #108]	; (1000e9e8 <ble_resolv_rand_addr_handler+0x138>)
1000e97a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e97c:	2401      	movs	r4, #1
1000e97e:	e7ad      	b.n	1000e8dc <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e980:	4814      	ldr	r0, [pc, #80]	; (1000e9d4 <ble_resolv_rand_addr_handler+0x124>)
1000e982:	4b15      	ldr	r3, [pc, #84]	; (1000e9d8 <ble_resolv_rand_addr_handler+0x128>)
1000e984:	4798      	blx	r3
1000e986:	0021      	movs	r1, r4
1000e988:	4818      	ldr	r0, [pc, #96]	; (1000e9ec <ble_resolv_rand_addr_handler+0x13c>)
1000e98a:	4b15      	ldr	r3, [pc, #84]	; (1000e9e0 <ble_resolv_rand_addr_handler+0x130>)
1000e98c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e98e:	0163      	lsls	r3, r4, #5
1000e990:	1b1c      	subs	r4, r3, r4
1000e992:	00a4      	lsls	r4, r4, #2
1000e994:	4b0a      	ldr	r3, [pc, #40]	; (1000e9c0 <ble_resolv_rand_addr_handler+0x110>)
1000e996:	191c      	adds	r4, r3, r4
1000e998:	7ca3      	ldrb	r3, [r4, #18]
1000e99a:	2b0a      	cmp	r3, #10
1000e99c:	d107      	bne.n	1000e9ae <ble_resolv_rand_addr_handler+0xfe>
1000e99e:	e7c4      	b.n	1000e92a <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e9a0:	480c      	ldr	r0, [pc, #48]	; (1000e9d4 <ble_resolv_rand_addr_handler+0x124>)
1000e9a2:	4b0d      	ldr	r3, [pc, #52]	; (1000e9d8 <ble_resolv_rand_addr_handler+0x128>)
1000e9a4:	4798      	blx	r3
1000e9a6:	2105      	movs	r1, #5
1000e9a8:	4810      	ldr	r0, [pc, #64]	; (1000e9ec <ble_resolv_rand_addr_handler+0x13c>)
1000e9aa:	4b0d      	ldr	r3, [pc, #52]	; (1000e9e0 <ble_resolv_rand_addr_handler+0x130>)
1000e9ac:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e9ae:	2000      	movs	r0, #0
1000e9b0:	bc04      	pop	{r2}
1000e9b2:	4690      	mov	r8, r2
1000e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9b6:	46c0      	nop			; (mov r8, r8)
1000e9b8:	1001a2e2 	.word	0x1001a2e2
1000e9bc:	100150b9 	.word	0x100150b9
1000e9c0:	1001a29c 	.word	0x1001a29c
1000e9c4:	1001a548 	.word	0x1001a548
1000e9c8:	100150d7 	.word	0x100150d7
1000e9cc:	1001a508 	.word	0x1001a508
1000e9d0:	1000e61d 	.word	0x1000e61d
1000e9d4:	100164f8 	.word	0x100164f8
1000e9d8:	10015351 	.word	0x10015351
1000e9dc:	10017f7c 	.word	0x10017f7c
1000e9e0:	10015231 	.word	0x10015231
1000e9e4:	10017f94 	.word	0x10017f94
1000e9e8:	1001a376 	.word	0x1001a376
1000e9ec:	10017fb0 	.word	0x10017fb0

1000e9f0 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e9f2:	0004      	movs	r4, r0
1000e9f4:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000e9f6:	4848      	ldr	r0, [pc, #288]	; (1000eb18 <ble_event_manager+0x128>)
1000e9f8:	4b48      	ldr	r3, [pc, #288]	; (1000eb1c <ble_event_manager+0x12c>)
1000e9fa:	4798      	blx	r3
1000e9fc:	0021      	movs	r1, r4
1000e9fe:	4848      	ldr	r0, [pc, #288]	; (1000eb20 <ble_event_manager+0x130>)
1000ea00:	4b48      	ldr	r3, [pc, #288]	; (1000eb24 <ble_event_manager+0x134>)
1000ea02:	4798      	blx	r3
	switch(events)
1000ea04:	2c3b      	cmp	r4, #59	; 0x3b
1000ea06:	d879      	bhi.n	1000eafc <ble_event_manager+0x10c>
1000ea08:	00a3      	lsls	r3, r4, #2
1000ea0a:	4a47      	ldr	r2, [pc, #284]	; (1000eb28 <ble_event_manager+0x138>)
1000ea0c:	58d3      	ldr	r3, [r2, r3]
1000ea0e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea10:	00a4      	lsls	r4, r4, #2
1000ea12:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ea14:	4f45      	ldr	r7, [pc, #276]	; (1000eb2c <ble_event_manager+0x13c>)
1000ea16:	59bb      	ldr	r3, [r7, r6]
1000ea18:	2b00      	cmp	r3, #0
1000ea1a:	d004      	beq.n	1000ea26 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea1c:	591b      	ldr	r3, [r3, r4]
1000ea1e:	2b00      	cmp	r3, #0
1000ea20:	d001      	beq.n	1000ea26 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000ea22:	0028      	movs	r0, r5
1000ea24:	4798      	blx	r3
1000ea26:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ea28:	2e14      	cmp	r6, #20
1000ea2a:	d1f4      	bne.n	1000ea16 <ble_event_manager+0x26>
1000ea2c:	e072      	b.n	1000eb14 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea2e:	3c13      	subs	r4, #19
1000ea30:	b2e4      	uxtb	r4, r4
1000ea32:	00a4      	lsls	r4, r4, #2
1000ea34:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ea36:	4f3e      	ldr	r7, [pc, #248]	; (1000eb30 <ble_event_manager+0x140>)
1000ea38:	59bb      	ldr	r3, [r7, r6]
1000ea3a:	2b00      	cmp	r3, #0
1000ea3c:	d004      	beq.n	1000ea48 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea3e:	591b      	ldr	r3, [r3, r4]
1000ea40:	2b00      	cmp	r3, #0
1000ea42:	d001      	beq.n	1000ea48 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000ea44:	0028      	movs	r0, r5
1000ea46:	4798      	blx	r3
1000ea48:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ea4a:	2e14      	cmp	r6, #20
1000ea4c:	d1f4      	bne.n	1000ea38 <ble_event_manager+0x48>
1000ea4e:	e061      	b.n	1000eb14 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000ea50:	3c1d      	subs	r4, #29
1000ea52:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000ea54:	4830      	ldr	r0, [pc, #192]	; (1000eb18 <ble_event_manager+0x128>)
1000ea56:	4b31      	ldr	r3, [pc, #196]	; (1000eb1c <ble_event_manager+0x12c>)
1000ea58:	4798      	blx	r3
1000ea5a:	0021      	movs	r1, r4
1000ea5c:	4835      	ldr	r0, [pc, #212]	; (1000eb34 <ble_event_manager+0x144>)
1000ea5e:	4b31      	ldr	r3, [pc, #196]	; (1000eb24 <ble_event_manager+0x134>)
1000ea60:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea62:	00a4      	lsls	r4, r4, #2
1000ea64:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ea66:	4f34      	ldr	r7, [pc, #208]	; (1000eb38 <ble_event_manager+0x148>)
1000ea68:	59bb      	ldr	r3, [r7, r6]
1000ea6a:	2b00      	cmp	r3, #0
1000ea6c:	d004      	beq.n	1000ea78 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea6e:	591b      	ldr	r3, [r3, r4]
1000ea70:	2b00      	cmp	r3, #0
1000ea72:	d001      	beq.n	1000ea78 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000ea74:	0028      	movs	r0, r5
1000ea76:	4798      	blx	r3
1000ea78:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ea7a:	2e14      	cmp	r6, #20
1000ea7c:	d1f4      	bne.n	1000ea68 <ble_event_manager+0x78>
1000ea7e:	e049      	b.n	1000eb14 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ea80:	3c27      	subs	r4, #39	; 0x27
1000ea82:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ea84:	4b2d      	ldr	r3, [pc, #180]	; (1000eb3c <ble_event_manager+0x14c>)
1000ea86:	681b      	ldr	r3, [r3, #0]
1000ea88:	2b00      	cmp	r3, #0
1000ea8a:	d043      	beq.n	1000eb14 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ea8c:	00a4      	lsls	r4, r4, #2
1000ea8e:	58e3      	ldr	r3, [r4, r3]
1000ea90:	2b00      	cmp	r3, #0
1000ea92:	d03f      	beq.n	1000eb14 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000ea94:	0028      	movs	r0, r5
1000ea96:	4798      	blx	r3
1000ea98:	e03c      	b.n	1000eb14 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ea9a:	3c2d      	subs	r4, #45	; 0x2d
1000ea9c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ea9e:	4b28      	ldr	r3, [pc, #160]	; (1000eb40 <ble_event_manager+0x150>)
1000eaa0:	681b      	ldr	r3, [r3, #0]
1000eaa2:	2b00      	cmp	r3, #0
1000eaa4:	d036      	beq.n	1000eb14 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eaa6:	00a4      	lsls	r4, r4, #2
1000eaa8:	58e3      	ldr	r3, [r4, r3]
1000eaaa:	2b00      	cmp	r3, #0
1000eaac:	d032      	beq.n	1000eb14 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000eaae:	0028      	movs	r0, r5
1000eab0:	4798      	blx	r3
1000eab2:	e02f      	b.n	1000eb14 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eab4:	3c36      	subs	r4, #54	; 0x36
1000eab6:	b2e4      	uxtb	r4, r4
1000eab8:	00a4      	lsls	r4, r4, #2
1000eaba:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000eabc:	4f21      	ldr	r7, [pc, #132]	; (1000eb44 <ble_event_manager+0x154>)
1000eabe:	59bb      	ldr	r3, [r7, r6]
1000eac0:	2b00      	cmp	r3, #0
1000eac2:	d004      	beq.n	1000eace <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eac4:	591b      	ldr	r3, [r3, r4]
1000eac6:	2b00      	cmp	r3, #0
1000eac8:	d001      	beq.n	1000eace <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000eaca:	0028      	movs	r0, r5
1000eacc:	4798      	blx	r3
1000eace:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ead0:	2e14      	cmp	r6, #20
1000ead2:	d1f4      	bne.n	1000eabe <ble_event_manager+0xce>
1000ead4:	e01e      	b.n	1000eb14 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ead6:	3c38      	subs	r4, #56	; 0x38
1000ead8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000eada:	4b1b      	ldr	r3, [pc, #108]	; (1000eb48 <ble_event_manager+0x158>)
1000eadc:	681b      	ldr	r3, [r3, #0]
1000eade:	2b00      	cmp	r3, #0
1000eae0:	d018      	beq.n	1000eb14 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000eae2:	00a4      	lsls	r4, r4, #2
1000eae4:	58e3      	ldr	r3, [r4, r3]
1000eae6:	2b00      	cmp	r3, #0
1000eae8:	d014      	beq.n	1000eb14 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000eaea:	0028      	movs	r0, r5
1000eaec:	4798      	blx	r3
1000eaee:	e011      	b.n	1000eb14 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000eaf0:	4b16      	ldr	r3, [pc, #88]	; (1000eb4c <ble_event_manager+0x15c>)
1000eaf2:	681b      	ldr	r3, [r3, #0]
1000eaf4:	2b00      	cmp	r3, #0
1000eaf6:	d00d      	beq.n	1000eb14 <ble_event_manager+0x124>
			ble_user_event_cb();
1000eaf8:	4798      	blx	r3
1000eafa:	e00b      	b.n	1000eb14 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000eafc:	4e06      	ldr	r6, [pc, #24]	; (1000eb18 <ble_event_manager+0x128>)
1000eafe:	0030      	movs	r0, r6
1000eb00:	4d06      	ldr	r5, [pc, #24]	; (1000eb1c <ble_event_manager+0x12c>)
1000eb02:	47a8      	blx	r5
1000eb04:	0021      	movs	r1, r4
1000eb06:	4812      	ldr	r0, [pc, #72]	; (1000eb50 <ble_event_manager+0x160>)
1000eb08:	4b06      	ldr	r3, [pc, #24]	; (1000eb24 <ble_event_manager+0x134>)
1000eb0a:	4798      	blx	r3
		DBG_LOG("\r\n");
1000eb0c:	0030      	movs	r0, r6
1000eb0e:	47a8      	blx	r5
1000eb10:	0030      	movs	r0, r6
1000eb12:	47a8      	blx	r5
	}
	break;		
	}
}
1000eb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eb16:	46c0      	nop			; (mov r8, r8)
1000eb18:	100164f8 	.word	0x100164f8
1000eb1c:	10015351 	.word	0x10015351
1000eb20:	10017fc0 	.word	0x10017fc0
1000eb24:	10015231 	.word	0x10015231
1000eb28:	10017520 	.word	0x10017520
1000eb2c:	1001a520 	.word	0x1001a520
1000eb30:	1001a534 	.word	0x1001a534
1000eb34:	10017fd0 	.word	0x10017fd0
1000eb38:	1001a288 	.word	0x1001a288
1000eb3c:	1001a57c 	.word	0x1001a57c
1000eb40:	1001a284 	.word	0x1001a284
1000eb44:	1001a50c 	.word	0x1001a50c
1000eb48:	1001aac0 	.word	0x1001aac0
1000eb4c:	10018e04 	.word	0x10018e04
1000eb50:	10017fe8 	.word	0x10017fe8

1000eb54 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000eb54:	b570      	push	{r4, r5, r6, lr}
1000eb56:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000eb58:	4b0d      	ldr	r3, [pc, #52]	; (1000eb90 <ble_event_task+0x3c>)
1000eb5a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000eb5c:	2b01      	cmp	r3, #1
1000eb5e:	d101      	bne.n	1000eb64 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000eb60:	4b0c      	ldr	r3, [pc, #48]	; (1000eb94 <ble_event_task+0x40>)
1000eb62:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000eb64:	0022      	movs	r2, r4
1000eb66:	490c      	ldr	r1, [pc, #48]	; (1000eb98 <ble_event_task+0x44>)
1000eb68:	480c      	ldr	r0, [pc, #48]	; (1000eb9c <ble_event_task+0x48>)
1000eb6a:	4b0d      	ldr	r3, [pc, #52]	; (1000eba0 <ble_event_task+0x4c>)
1000eb6c:	4798      	blx	r3
1000eb6e:	0004      	movs	r4, r0
1000eb70:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000eb72:	4b07      	ldr	r3, [pc, #28]	; (1000eb90 <ble_event_task+0x3c>)
1000eb74:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000eb76:	2b01      	cmp	r3, #1
1000eb78:	d101      	bne.n	1000eb7e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000eb7a:	4b0a      	ldr	r3, [pc, #40]	; (1000eba4 <ble_event_task+0x50>)
1000eb7c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000eb7e:	2d00      	cmp	r5, #0
1000eb80:	d104      	bne.n	1000eb8c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000eb82:	4b06      	ldr	r3, [pc, #24]	; (1000eb9c <ble_event_task+0x48>)
1000eb84:	7818      	ldrb	r0, [r3, #0]
1000eb86:	4904      	ldr	r1, [pc, #16]	; (1000eb98 <ble_event_task+0x44>)
1000eb88:	4b07      	ldr	r3, [pc, #28]	; (1000eba8 <ble_event_task+0x54>)
1000eb8a:	4798      	blx	r3
    }
    
    return status;
}
1000eb8c:	0020      	movs	r0, r4
1000eb8e:	bd70      	pop	{r4, r5, r6, pc}
1000eb90:	10018e13 	.word	0x10018e13
1000eb94:	1000f571 	.word	0x1000f571
1000eb98:	1001a8b4 	.word	0x1001a8b4
1000eb9c:	1001a578 	.word	0x1001a578
1000eba0:	1000fccd 	.word	0x1000fccd
1000eba4:	1000f549 	.word	0x1000f549
1000eba8:	1000e9f1 	.word	0x1000e9f1

1000ebac <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ebac:	b530      	push	{r4, r5, lr}
1000ebae:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000ebb0:	ac08      	add	r4, sp, #32
1000ebb2:	2203      	movs	r2, #3
1000ebb4:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000ebb6:	2302      	movs	r3, #2
1000ebb8:	70a3      	strb	r3, [r4, #2]
1000ebba:	3316      	adds	r3, #22
1000ebbc:	70e3      	strb	r3, [r4, #3]
1000ebbe:	7122      	strb	r2, [r4, #4]
1000ebc0:	7163      	strb	r3, [r4, #5]
1000ebc2:	3201      	adds	r2, #1
1000ebc4:	71a2      	strb	r2, [r4, #6]
1000ebc6:	71e3      	strb	r3, [r4, #7]
1000ebc8:	320b      	adds	r2, #11
1000ebca:	7222      	strb	r2, [r4, #8]
1000ebcc:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000ebce:	2509      	movs	r5, #9
1000ebd0:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ebd2:	3b0e      	subs	r3, #14
1000ebd4:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ebd6:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ebd8:	aa0b      	add	r2, sp, #44	; 0x2c
1000ebda:	4b16      	ldr	r3, [pc, #88]	; (1000ec34 <ble_advertisement_data_set+0x88>)
1000ebdc:	cb03      	ldmia	r3!, {r0, r1}
1000ebde:	c203      	stmia	r2!, {r0, r1}
1000ebe0:	781b      	ldrb	r3, [r3, #0]
1000ebe2:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ebe4:	2300      	movs	r3, #0
1000ebe6:	466a      	mov	r2, sp
1000ebe8:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ebea:	3315      	adds	r3, #21
1000ebec:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ebee:	4812      	ldr	r0, [pc, #72]	; (1000ec38 <ble_advertisement_data_set+0x8c>)
1000ebf0:	4b12      	ldr	r3, [pc, #72]	; (1000ec3c <ble_advertisement_data_set+0x90>)
1000ebf2:	4798      	blx	r3
1000ebf4:	4812      	ldr	r0, [pc, #72]	; (1000ec40 <ble_advertisement_data_set+0x94>)
1000ebf6:	4b13      	ldr	r3, [pc, #76]	; (1000ec44 <ble_advertisement_data_set+0x98>)
1000ebf8:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ebfa:	466b      	mov	r3, sp
1000ebfc:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ebfe:	23ff      	movs	r3, #255	; 0xff
1000ec00:	466a      	mov	r2, sp
1000ec02:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ec04:	2208      	movs	r2, #8
1000ec06:	4910      	ldr	r1, [pc, #64]	; (1000ec48 <ble_advertisement_data_set+0x9c>)
1000ec08:	466b      	mov	r3, sp
1000ec0a:	1c98      	adds	r0, r3, #2
1000ec0c:	4b0f      	ldr	r3, [pc, #60]	; (1000ec4c <ble_advertisement_data_set+0xa0>)
1000ec0e:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ec10:	230a      	movs	r3, #10
1000ec12:	466a      	mov	r2, sp
1000ec14:	2115      	movs	r1, #21
1000ec16:	0020      	movs	r0, r4
1000ec18:	4c0d      	ldr	r4, [pc, #52]	; (1000ec50 <ble_advertisement_data_set+0xa4>)
1000ec1a:	47a0      	blx	r4
1000ec1c:	2800      	cmp	r0, #0
1000ec1e:	d005      	beq.n	1000ec2c <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ec20:	4805      	ldr	r0, [pc, #20]	; (1000ec38 <ble_advertisement_data_set+0x8c>)
1000ec22:	4b06      	ldr	r3, [pc, #24]	; (1000ec3c <ble_advertisement_data_set+0x90>)
1000ec24:	4798      	blx	r3
1000ec26:	480b      	ldr	r0, [pc, #44]	; (1000ec54 <ble_advertisement_data_set+0xa8>)
1000ec28:	4b06      	ldr	r3, [pc, #24]	; (1000ec44 <ble_advertisement_data_set+0x98>)
1000ec2a:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ec2c:	2000      	movs	r0, #0
1000ec2e:	b011      	add	sp, #68	; 0x44
1000ec30:	bd30      	pop	{r4, r5, pc}
1000ec32:	46c0      	nop			; (mov r8, r8)
1000ec34:	10017d04 	.word	0x10017d04
1000ec38:	100164f8 	.word	0x100164f8
1000ec3c:	10015351 	.word	0x10015351
1000ec40:	10018008 	.word	0x10018008
1000ec44:	10015231 	.word	0x10015231
1000ec48:	1001803c 	.word	0x1001803c
1000ec4c:	100150d7 	.word	0x100150d7
1000ec50:	1001072d 	.word	0x1001072d
1000ec54:	10018048 	.word	0x10018048

1000ec58 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000ec58:	4b01      	ldr	r3, [pc, #4]	; (1000ec60 <register_ble_user_event_cb+0x8>)
1000ec5a:	6018      	str	r0, [r3, #0]
}
1000ec5c:	4770      	bx	lr
1000ec5e:	46c0      	nop			; (mov r8, r8)
1000ec60:	10018e04 	.word	0x10018e04

1000ec64 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ec64:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ec66:	4b0e      	ldr	r3, [pc, #56]	; (1000eca0 <uart_read_complete_callback+0x3c>)
1000ec68:	781b      	ldrb	r3, [r3, #0]
1000ec6a:	2b01      	cmp	r3, #1
1000ec6c:	d10b      	bne.n	1000ec86 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ec6e:	2202      	movs	r2, #2
1000ec70:	4b0b      	ldr	r3, [pc, #44]	; (1000eca0 <uart_read_complete_callback+0x3c>)
1000ec72:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ec74:	4b0b      	ldr	r3, [pc, #44]	; (1000eca4 <uart_read_complete_callback+0x40>)
1000ec76:	681b      	ldr	r3, [r3, #0]
1000ec78:	2b00      	cmp	r3, #0
1000ec7a:	d110      	bne.n	1000ec9e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ec7c:	2102      	movs	r1, #2
1000ec7e:	480a      	ldr	r0, [pc, #40]	; (1000eca8 <uart_read_complete_callback+0x44>)
1000ec80:	4b0a      	ldr	r3, [pc, #40]	; (1000ecac <uart_read_complete_callback+0x48>)
1000ec82:	4798      	blx	r3
1000ec84:	e00b      	b.n	1000ec9e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ec86:	4b07      	ldr	r3, [pc, #28]	; (1000eca4 <uart_read_complete_callback+0x40>)
1000ec88:	681b      	ldr	r3, [r3, #0]
1000ec8a:	2b00      	cmp	r3, #0
1000ec8c:	d007      	beq.n	1000ec9e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ec8e:	4c08      	ldr	r4, [pc, #32]	; (1000ecb0 <uart_read_complete_callback+0x4c>)
1000ec90:	7820      	ldrb	r0, [r4, #0]
1000ec92:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ec94:	2201      	movs	r2, #1
1000ec96:	0021      	movs	r1, r4
1000ec98:	4803      	ldr	r0, [pc, #12]	; (1000eca8 <uart_read_complete_callback+0x44>)
1000ec9a:	4b06      	ldr	r3, [pc, #24]	; (1000ecb4 <uart_read_complete_callback+0x50>)
1000ec9c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ec9e:	bd10      	pop	{r4, pc}
1000eca0:	10019e18 	.word	0x10019e18
1000eca4:	10019e20 	.word	0x10019e20
1000eca8:	1001aac4 	.word	0x1001aac4
1000ecac:	1000d649 	.word	0x1000d649
1000ecb0:	10019e1c 	.word	0x10019e1c
1000ecb4:	1000d5ed 	.word	0x1000d5ed

1000ecb8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ecb8:	b570      	push	{r4, r5, r6, lr}
1000ecba:	0006      	movs	r6, r0
1000ecbc:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ecbe:	4c03      	ldr	r4, [pc, #12]	; (1000eccc <usart_serial_getchar+0x14>)
1000ecc0:	0029      	movs	r1, r5
1000ecc2:	0030      	movs	r0, r6
1000ecc4:	47a0      	blx	r4
1000ecc6:	2800      	cmp	r0, #0
1000ecc8:	d1fa      	bne.n	1000ecc0 <usart_serial_getchar+0x8>
}
1000ecca:	bd70      	pop	{r4, r5, r6, pc}
1000eccc:	1000d5d9 	.word	0x1000d5d9

1000ecd0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ecd0:	b570      	push	{r4, r5, r6, lr}
1000ecd2:	0006      	movs	r6, r0
1000ecd4:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ecd6:	4c03      	ldr	r4, [pc, #12]	; (1000ece4 <usart_serial_putchar+0x14>)
1000ecd8:	0029      	movs	r1, r5
1000ecda:	0030      	movs	r0, r6
1000ecdc:	47a0      	blx	r4
1000ecde:	2800      	cmp	r0, #0
1000ece0:	d1fa      	bne.n	1000ecd8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ece2:	bd70      	pop	{r4, r5, r6, pc}
1000ece4:	1000d5c9 	.word	0x1000d5c9

1000ece8 <serial_console_init>:

void serial_console_init(void)
{
1000ece8:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ecea:	2100      	movs	r1, #0
1000ecec:	2000      	movs	r0, #0
1000ecee:	4b19      	ldr	r3, [pc, #100]	; (1000ed54 <serial_console_init+0x6c>)
1000ecf0:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ecf2:	4c19      	ldr	r4, [pc, #100]	; (1000ed58 <serial_console_init+0x70>)
1000ecf4:	0020      	movs	r0, r4
1000ecf6:	4b19      	ldr	r3, [pc, #100]	; (1000ed5c <serial_console_init+0x74>)
1000ecf8:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ecfa:	23e1      	movs	r3, #225	; 0xe1
1000ecfc:	025b      	lsls	r3, r3, #9
1000ecfe:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ed00:	2302      	movs	r3, #2
1000ed02:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ed04:	2203      	movs	r2, #3
1000ed06:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ed08:	3201      	adds	r2, #1
1000ed0a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ed0c:	3201      	adds	r2, #1
1000ed0e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ed10:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ed12:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ed14:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ed16:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ed18:	4d11      	ldr	r5, [pc, #68]	; (1000ed60 <serial_console_init+0x78>)
1000ed1a:	4b12      	ldr	r3, [pc, #72]	; (1000ed64 <serial_console_init+0x7c>)
1000ed1c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ed1e:	4a12      	ldr	r2, [pc, #72]	; (1000ed68 <serial_console_init+0x80>)
1000ed20:	4b12      	ldr	r3, [pc, #72]	; (1000ed6c <serial_console_init+0x84>)
1000ed22:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ed24:	4a12      	ldr	r2, [pc, #72]	; (1000ed70 <serial_console_init+0x88>)
1000ed26:	4b13      	ldr	r3, [pc, #76]	; (1000ed74 <serial_console_init+0x8c>)
1000ed28:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ed2a:	0022      	movs	r2, r4
1000ed2c:	4912      	ldr	r1, [pc, #72]	; (1000ed78 <serial_console_init+0x90>)
1000ed2e:	0028      	movs	r0, r5
1000ed30:	4b12      	ldr	r3, [pc, #72]	; (1000ed7c <serial_console_init+0x94>)
1000ed32:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ed34:	4e12      	ldr	r6, [pc, #72]	; (1000ed80 <serial_console_init+0x98>)
1000ed36:	6833      	ldr	r3, [r6, #0]
1000ed38:	6898      	ldr	r0, [r3, #8]
1000ed3a:	2100      	movs	r1, #0
1000ed3c:	4c11      	ldr	r4, [pc, #68]	; (1000ed84 <serial_console_init+0x9c>)
1000ed3e:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000ed40:	6833      	ldr	r3, [r6, #0]
1000ed42:	6858      	ldr	r0, [r3, #4]
1000ed44:	2100      	movs	r1, #0
1000ed46:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000ed48:	2202      	movs	r2, #2
1000ed4a:	490f      	ldr	r1, [pc, #60]	; (1000ed88 <serial_console_init+0xa0>)
1000ed4c:	0028      	movs	r0, r5
1000ed4e:	4b0f      	ldr	r3, [pc, #60]	; (1000ed8c <serial_console_init+0xa4>)
1000ed50:	4798      	blx	r3
}
1000ed52:	bd70      	pop	{r4, r5, r6, pc}
1000ed54:	1000c5e9 	.word	0x1000c5e9
1000ed58:	1001aae8 	.word	0x1001aae8
1000ed5c:	1000d3e1 	.word	0x1000d3e1
1000ed60:	1001aac4 	.word	0x1001aac4
1000ed64:	1001a280 	.word	0x1001a280
1000ed68:	1000ecd1 	.word	0x1000ecd1
1000ed6c:	1001a27c 	.word	0x1001a27c
1000ed70:	1000ecb9 	.word	0x1000ecb9
1000ed74:	1001a278 	.word	0x1001a278
1000ed78:	40004000 	.word	0x40004000
1000ed7c:	1000d40d 	.word	0x1000d40d
1000ed80:	100184e4 	.word	0x100184e4
1000ed84:	10015401 	.word	0x10015401
1000ed88:	1000ec65 	.word	0x1000ec65
1000ed8c:	1000d615 	.word	0x1000d615

1000ed90 <_time_start>:

void _time_start(unsigned int sec)
{
1000ed90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed92:	b083      	sub	sp, #12
1000ed94:	0005      	movs	r5, r0
	system_clock_get_value();
1000ed96:	4c0d      	ldr	r4, [pc, #52]	; (1000edcc <_time_start+0x3c>)
1000ed98:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ed9a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ed9c:	4f0c      	ldr	r7, [pc, #48]	; (1000edd0 <_time_start+0x40>)
1000ed9e:	47b8      	blx	r7
1000eda0:	4e0c      	ldr	r6, [pc, #48]	; (1000edd4 <_time_start+0x44>)
1000eda2:	4a0d      	ldr	r2, [pc, #52]	; (1000edd8 <_time_start+0x48>)
1000eda4:	4b0d      	ldr	r3, [pc, #52]	; (1000eddc <_time_start+0x4c>)
1000eda6:	47b0      	blx	r6
1000eda8:	9000      	str	r0, [sp, #0]
1000edaa:	9101      	str	r1, [sp, #4]
1000edac:	20fa      	movs	r0, #250	; 0xfa
1000edae:	0080      	lsls	r0, r0, #2
1000edb0:	4368      	muls	r0, r5
1000edb2:	47b8      	blx	r7
1000edb4:	0002      	movs	r2, r0
1000edb6:	000b      	movs	r3, r1
1000edb8:	9800      	ldr	r0, [sp, #0]
1000edba:	9901      	ldr	r1, [sp, #4]
1000edbc:	47b0      	blx	r6
1000edbe:	4b08      	ldr	r3, [pc, #32]	; (1000ede0 <_time_start+0x50>)
1000edc0:	4798      	blx	r3
1000edc2:	4b08      	ldr	r3, [pc, #32]	; (1000ede4 <_time_start+0x54>)
1000edc4:	6018      	str	r0, [r3, #0]
}
1000edc6:	b003      	add	sp, #12
1000edc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000edca:	46c0      	nop			; (mov r8, r8)
1000edcc:	1000c66d 	.word	0x1000c66d
1000edd0:	10014fad 	.word	0x10014fad
1000edd4:	100143a5 	.word	0x100143a5
1000edd8:	19feaec7 	.word	0x19feaec7
1000eddc:	3f09d8ef 	.word	0x3f09d8ef
1000ede0:	10013449 	.word	0x10013449
1000ede4:	10019e14 	.word	0x10019e14

1000ede8 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ede8:	4b02      	ldr	r3, [pc, #8]	; (1000edf4 <_time_done+0xc>)
1000edea:	681a      	ldr	r2, [r3, #0]
1000edec:	1e50      	subs	r0, r2, #1
1000edee:	6018      	str	r0, [r3, #0]
}
1000edf0:	4770      	bx	lr
1000edf2:	46c0      	nop			; (mov r8, r8)
1000edf4:	10019e14 	.word	0x10019e14

1000edf8 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000edf8:	b570      	push	{r4, r5, r6, lr}
1000edfa:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000edfc:	2201      	movs	r2, #1
1000edfe:	4b11      	ldr	r3, [pc, #68]	; (1000ee44 <getchar_b11_timeout+0x4c>)
1000ee00:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ee02:	4b11      	ldr	r3, [pc, #68]	; (1000ee48 <getchar_b11_timeout+0x50>)
1000ee04:	681b      	ldr	r3, [r3, #0]
1000ee06:	2b00      	cmp	r3, #0
1000ee08:	d103      	bne.n	1000ee12 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ee0a:	2102      	movs	r1, #2
1000ee0c:	480f      	ldr	r0, [pc, #60]	; (1000ee4c <getchar_b11_timeout+0x54>)
1000ee0e:	4b10      	ldr	r3, [pc, #64]	; (1000ee50 <getchar_b11_timeout+0x58>)
1000ee10:	4798      	blx	r3

	_time_start(sec);
1000ee12:	0020      	movs	r0, r4
1000ee14:	4b0f      	ldr	r3, [pc, #60]	; (1000ee54 <getchar_b11_timeout+0x5c>)
1000ee16:	4798      	blx	r3
	
	string_input[0] = 0;
1000ee18:	490f      	ldr	r1, [pc, #60]	; (1000ee58 <getchar_b11_timeout+0x60>)
1000ee1a:	2300      	movs	r3, #0
1000ee1c:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ee1e:	2201      	movs	r2, #1
1000ee20:	480a      	ldr	r0, [pc, #40]	; (1000ee4c <getchar_b11_timeout+0x54>)
1000ee22:	4b0e      	ldr	r3, [pc, #56]	; (1000ee5c <getchar_b11_timeout+0x64>)
1000ee24:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ee26:	4c07      	ldr	r4, [pc, #28]	; (1000ee44 <getchar_b11_timeout+0x4c>)
1000ee28:	4d0d      	ldr	r5, [pc, #52]	; (1000ee60 <getchar_b11_timeout+0x68>)
1000ee2a:	7823      	ldrb	r3, [r4, #0]
1000ee2c:	2b02      	cmp	r3, #2
1000ee2e:	d002      	beq.n	1000ee36 <getchar_b11_timeout+0x3e>
1000ee30:	47a8      	blx	r5
1000ee32:	2800      	cmp	r0, #0
1000ee34:	d1f9      	bne.n	1000ee2a <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ee36:	2200      	movs	r2, #0
1000ee38:	4b02      	ldr	r3, [pc, #8]	; (1000ee44 <getchar_b11_timeout+0x4c>)
1000ee3a:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ee3c:	4b06      	ldr	r3, [pc, #24]	; (1000ee58 <getchar_b11_timeout+0x60>)
1000ee3e:	7818      	ldrb	r0, [r3, #0]
}
1000ee40:	bd70      	pop	{r4, r5, r6, pc}
1000ee42:	46c0      	nop			; (mov r8, r8)
1000ee44:	10019e18 	.word	0x10019e18
1000ee48:	10019e20 	.word	0x10019e20
1000ee4c:	1001aac4 	.word	0x1001aac4
1000ee50:	1000d629 	.word	0x1000d629
1000ee54:	1000ed91 	.word	0x1000ed91
1000ee58:	10019e1c 	.word	0x10019e1c
1000ee5c:	1000d5ed 	.word	0x1000d5ed
1000ee60:	1000ede9 	.word	0x1000ede9

1000ee64 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ee64:	4b02      	ldr	r3, [pc, #8]	; (1000ee70 <platform_event_free+0xc>)
1000ee66:	681a      	ldr	r2, [r3, #0]
1000ee68:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ee6a:	6018      	str	r0, [r3, #0]
}
1000ee6c:	4770      	bx	lr
1000ee6e:	46c0      	nop			; (mov r8, r8)
1000ee70:	10019e28 	.word	0x10019e28

1000ee74 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ee74:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ee76:	4b0b      	ldr	r3, [pc, #44]	; (1000eea4 <platform_event_post+0x30>)
1000ee78:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ee7a:	2c00      	cmp	r4, #0
1000ee7c:	d011      	beq.n	1000eea2 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ee7e:	6825      	ldr	r5, [r4, #0]
1000ee80:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ee82:	2300      	movs	r3, #0
1000ee84:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000ee86:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000ee88:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ee8a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ee8c:	4b06      	ldr	r3, [pc, #24]	; (1000eea8 <platform_event_post+0x34>)
1000ee8e:	681a      	ldr	r2, [r3, #0]
1000ee90:	2a00      	cmp	r2, #0
1000ee92:	d102      	bne.n	1000ee9a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ee94:	601c      	str	r4, [r3, #0]
1000ee96:	e004      	b.n	1000eea2 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ee98:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ee9a:	6813      	ldr	r3, [r2, #0]
1000ee9c:	2b00      	cmp	r3, #0
1000ee9e:	d1fb      	bne.n	1000ee98 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000eea0:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000eea2:	bd30      	pop	{r4, r5, pc}
1000eea4:	10019e28 	.word	0x10019e28
1000eea8:	10019e24 	.word	0x10019e24

1000eeac <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000eeac:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000eeae:	2300      	movs	r3, #0
1000eeb0:	4a06      	ldr	r2, [pc, #24]	; (1000eecc <platform_event_init+0x20>)
1000eeb2:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000eeb4:	4a06      	ldr	r2, [pc, #24]	; (1000eed0 <platform_event_init+0x24>)
1000eeb6:	6013      	str	r3, [r2, #0]
1000eeb8:	4c06      	ldr	r4, [pc, #24]	; (1000eed4 <platform_event_init+0x28>)
1000eeba:	0026      	movs	r6, r4
1000eebc:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000eebe:	4d06      	ldr	r5, [pc, #24]	; (1000eed8 <platform_event_init+0x2c>)
1000eec0:	0020      	movs	r0, r4
1000eec2:	47a8      	blx	r5
1000eec4:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000eec6:	42b4      	cmp	r4, r6
1000eec8:	d1fa      	bne.n	1000eec0 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000eeca:	bd70      	pop	{r4, r5, r6, pc}
1000eecc:	10019e28 	.word	0x10019e28
1000eed0:	10019e24 	.word	0x10019e24
1000eed4:	10019e2c 	.word	0x10019e2c
1000eed8:	1000ee65 	.word	0x1000ee65

1000eedc <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000eedc:	b570      	push	{r4, r5, r6, lr}
1000eede:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000eee0:	4b13      	ldr	r3, [pc, #76]	; (1000ef30 <at_ke_msg_send+0x54>)
1000eee2:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000eee4:	4b13      	ldr	r3, [pc, #76]	; (1000ef34 <at_ke_msg_send+0x58>)
1000eee6:	681b      	ldr	r3, [r3, #0]
1000eee8:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000eeea:	2c0c      	cmp	r4, #12
1000eeec:	d01f      	beq.n	1000ef2e <at_ke_msg_send+0x52>
1000eeee:	3c0c      	subs	r4, #12
1000eef0:	88e3      	ldrh	r3, [r4, #6]
1000eef2:	2b05      	cmp	r3, #5
1000eef4:	d01b      	beq.n	1000ef2e <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000eef6:	07eb      	lsls	r3, r5, #31
1000eef8:	d414      	bmi.n	1000ef24 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000eefa:	4b0f      	ldr	r3, [pc, #60]	; (1000ef38 <at_ke_msg_send+0x5c>)
1000eefc:	681b      	ldr	r3, [r3, #0]
1000eefe:	2002      	movs	r0, #2
1000ef00:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ef02:	4b0e      	ldr	r3, [pc, #56]	; (1000ef3c <at_ke_msg_send+0x60>)
1000ef04:	681b      	ldr	r3, [r3, #0]
1000ef06:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ef08:	4c0d      	ldr	r4, [pc, #52]	; (1000ef40 <at_ke_msg_send+0x64>)
1000ef0a:	2003      	movs	r0, #3
1000ef0c:	6823      	ldr	r3, [r4, #0]
1000ef0e:	4798      	blx	r3
1000ef10:	2800      	cmp	r0, #0
1000ef12:	d1fa      	bne.n	1000ef0a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ef14:	4b0b      	ldr	r3, [pc, #44]	; (1000ef44 <at_ke_msg_send+0x68>)
1000ef16:	681b      	ldr	r3, [r3, #0]
1000ef18:	3002      	adds	r0, #2
1000ef1a:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ef1c:	2201      	movs	r2, #1
1000ef1e:	4b0a      	ldr	r3, [pc, #40]	; (1000ef48 <at_ke_msg_send+0x6c>)
1000ef20:	601a      	str	r2, [r3, #0]
1000ef22:	e004      	b.n	1000ef2e <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ef24:	4b09      	ldr	r3, [pc, #36]	; (1000ef4c <at_ke_msg_send+0x70>)
1000ef26:	6818      	ldr	r0, [r3, #0]
1000ef28:	4b09      	ldr	r3, [pc, #36]	; (1000ef50 <at_ke_msg_send+0x74>)
1000ef2a:	681b      	ldr	r3, [r3, #0]
1000ef2c:	4798      	blx	r3
		}
	}
}
1000ef2e:	bd70      	pop	{r4, r5, r6, pc}
1000ef30:	4000b1ec 	.word	0x4000b1ec
1000ef34:	10019ed4 	.word	0x10019ed4
1000ef38:	10019ecc 	.word	0x10019ecc
1000ef3c:	10019ee0 	.word	0x10019ee0
1000ef40:	10019eb4 	.word	0x10019eb4
1000ef44:	10019ebc 	.word	0x10019ebc
1000ef48:	4000b020 	.word	0x4000b020
1000ef4c:	10019ec0 	.word	0x10019ec0
1000ef50:	10019eb0 	.word	0x10019eb0

1000ef54 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ef54:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ef56:	4b06      	ldr	r3, [pc, #24]	; (1000ef70 <samb11_plf_resume_callback+0x1c>)
1000ef58:	4a06      	ldr	r2, [pc, #24]	; (1000ef74 <samb11_plf_resume_callback+0x20>)
1000ef5a:	6819      	ldr	r1, [r3, #0]
1000ef5c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ef5e:	685a      	ldr	r2, [r3, #4]
1000ef60:	4b05      	ldr	r3, [pc, #20]	; (1000ef78 <samb11_plf_resume_callback+0x24>)
1000ef62:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ef64:	4b05      	ldr	r3, [pc, #20]	; (1000ef7c <samb11_plf_resume_callback+0x28>)
1000ef66:	681b      	ldr	r3, [r3, #0]
1000ef68:	2b00      	cmp	r3, #0
1000ef6a:	d000      	beq.n	1000ef6e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ef6c:	4798      	blx	r3
	}
}
1000ef6e:	bd10      	pop	{r4, pc}
1000ef70:	1001ab10 	.word	0x1001ab10
1000ef74:	4000b00c 	.word	0x4000b00c
1000ef78:	4000b010 	.word	0x4000b010
1000ef7c:	1001adec 	.word	0x1001adec

1000ef80 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ef80:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ef82:	2232      	movs	r2, #50	; 0x32
1000ef84:	2100      	movs	r1, #0
1000ef86:	480d      	ldr	r0, [pc, #52]	; (1000efbc <init_port_list+0x3c>)
1000ef88:	4b0d      	ldr	r3, [pc, #52]	; (1000efc0 <init_port_list+0x40>)
1000ef8a:	4798      	blx	r3
1000ef8c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ef8e:	480b      	ldr	r0, [pc, #44]	; (1000efbc <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ef90:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ef92:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ef94:	004a      	lsls	r2, r1, #1
1000ef96:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ef98:	1882      	adds	r2, r0, r2
1000ef9a:	7853      	ldrb	r3, [r2, #1]
1000ef9c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ef9e:	b2db      	uxtb	r3, r3
1000efa0:	43a3      	bics	r3, r4
1000efa2:	7053      	strb	r3, [r2, #1]
1000efa4:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000efa6:	2919      	cmp	r1, #25
1000efa8:	d1f4      	bne.n	1000ef94 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000efaa:	4b04      	ldr	r3, [pc, #16]	; (1000efbc <init_port_list+0x3c>)
1000efac:	785a      	ldrb	r2, [r3, #1]
1000efae:	3918      	subs	r1, #24
1000efb0:	438a      	bics	r2, r1
1000efb2:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000efb4:	78da      	ldrb	r2, [r3, #3]
1000efb6:	438a      	bics	r2, r1
1000efb8:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000efba:	bd70      	pop	{r4, r5, r6, pc}
1000efbc:	1001ab2c 	.word	0x1001ab2c
1000efc0:	100150e9 	.word	0x100150e9

1000efc4 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000efc4:	4a06      	ldr	r2, [pc, #24]	; (1000efe0 <init_clock+0x1c>)
1000efc6:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000efc8:	4b06      	ldr	r3, [pc, #24]	; (1000efe4 <init_clock+0x20>)
1000efca:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000efcc:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000efce:	4a06      	ldr	r2, [pc, #24]	; (1000efe8 <init_clock+0x24>)
1000efd0:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000efd2:	4906      	ldr	r1, [pc, #24]	; (1000efec <init_clock+0x28>)
1000efd4:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000efd6:	4b06      	ldr	r3, [pc, #24]	; (1000eff0 <init_clock+0x2c>)
1000efd8:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000efda:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000efdc:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000efde:	4770      	bx	lr
1000efe0:	4000b00c 	.word	0x4000b00c
1000efe4:	fffe0fd3 	.word	0xfffe0fd3
1000efe8:	1001ab10 	.word	0x1001ab10
1000efec:	4000b010 	.word	0x4000b010
1000eff0:	ffffe7c0 	.word	0xffffe7c0

1000eff4 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eff6:	4657      	mov	r7, sl
1000eff8:	464e      	mov	r6, r9
1000effa:	4645      	mov	r5, r8
1000effc:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000effe:	4b4f      	ldr	r3, [pc, #316]	; (1000f13c <platform_driver_init+0x148>)
1000f000:	781b      	ldrb	r3, [r3, #0]
1000f002:	2b00      	cmp	r3, #0
1000f004:	d004      	beq.n	1000f010 <platform_driver_init+0x1c>
1000f006:	4b4d      	ldr	r3, [pc, #308]	; (1000f13c <platform_driver_init+0x148>)
1000f008:	781b      	ldrb	r3, [r3, #0]
1000f00a:	2b01      	cmp	r3, #1
1000f00c:	d100      	bne.n	1000f010 <platform_driver_init+0x1c>
1000f00e:	e08c      	b.n	1000f12a <platform_driver_init+0x136>
		init_port_list();
1000f010:	4b4b      	ldr	r3, [pc, #300]	; (1000f140 <platform_driver_init+0x14c>)
1000f012:	4798      	blx	r3
		init_clock();
1000f014:	4b4b      	ldr	r3, [pc, #300]	; (1000f144 <platform_driver_init+0x150>)
1000f016:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000f018:	2300      	movs	r3, #0
1000f01a:	4698      	mov	r8, r3
1000f01c:	4b4a      	ldr	r3, [pc, #296]	; (1000f148 <platform_driver_init+0x154>)
1000f01e:	4642      	mov	r2, r8
1000f020:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f022:	4c4a      	ldr	r4, [pc, #296]	; (1000f14c <platform_driver_init+0x158>)
1000f024:	2380      	movs	r3, #128	; 0x80
1000f026:	2280      	movs	r2, #128	; 0x80
1000f028:	0412      	lsls	r2, r2, #16
1000f02a:	4692      	mov	sl, r2
1000f02c:	50e2      	str	r2, [r4, r3]
1000f02e:	2280      	movs	r2, #128	; 0x80
1000f030:	0452      	lsls	r2, r2, #17
1000f032:	4691      	mov	r9, r2
1000f034:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000f036:	4d46      	ldr	r5, [pc, #280]	; (1000f150 <platform_driver_init+0x15c>)
1000f038:	4b46      	ldr	r3, [pc, #280]	; (1000f154 <platform_driver_init+0x160>)
1000f03a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000f03c:	4b46      	ldr	r3, [pc, #280]	; (1000f158 <platform_driver_init+0x164>)
1000f03e:	4a47      	ldr	r2, [pc, #284]	; (1000f15c <platform_driver_init+0x168>)
1000f040:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000f042:	4947      	ldr	r1, [pc, #284]	; (1000f160 <platform_driver_init+0x16c>)
1000f044:	4a47      	ldr	r2, [pc, #284]	; (1000f164 <platform_driver_init+0x170>)
1000f046:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000f048:	4a47      	ldr	r2, [pc, #284]	; (1000f168 <platform_driver_init+0x174>)
1000f04a:	6811      	ldr	r1, [r2, #0]
1000f04c:	4a47      	ldr	r2, [pc, #284]	; (1000f16c <platform_driver_init+0x178>)
1000f04e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000f050:	4a47      	ldr	r2, [pc, #284]	; (1000f170 <platform_driver_init+0x17c>)
1000f052:	6811      	ldr	r1, [r2, #0]
1000f054:	4a47      	ldr	r2, [pc, #284]	; (1000f174 <platform_driver_init+0x180>)
1000f056:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000f058:	4947      	ldr	r1, [pc, #284]	; (1000f178 <platform_driver_init+0x184>)
1000f05a:	4a48      	ldr	r2, [pc, #288]	; (1000f17c <platform_driver_init+0x188>)
1000f05c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000f05e:	4948      	ldr	r1, [pc, #288]	; (1000f180 <platform_driver_init+0x18c>)
1000f060:	4a48      	ldr	r2, [pc, #288]	; (1000f184 <platform_driver_init+0x190>)
1000f062:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000f064:	4f48      	ldr	r7, [pc, #288]	; (1000f188 <platform_driver_init+0x194>)
1000f066:	4a49      	ldr	r2, [pc, #292]	; (1000f18c <platform_driver_init+0x198>)
1000f068:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000f06a:	4949      	ldr	r1, [pc, #292]	; (1000f190 <platform_driver_init+0x19c>)
1000f06c:	4a49      	ldr	r2, [pc, #292]	; (1000f194 <platform_driver_init+0x1a0>)
1000f06e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000f070:	4949      	ldr	r1, [pc, #292]	; (1000f198 <platform_driver_init+0x1a4>)
1000f072:	4a4a      	ldr	r2, [pc, #296]	; (1000f19c <platform_driver_init+0x1a8>)
1000f074:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000f076:	4e4a      	ldr	r6, [pc, #296]	; (1000f1a0 <platform_driver_init+0x1ac>)
1000f078:	4a4a      	ldr	r2, [pc, #296]	; (1000f1a4 <platform_driver_init+0x1b0>)
1000f07a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000f07c:	494a      	ldr	r1, [pc, #296]	; (1000f1a8 <platform_driver_init+0x1b4>)
1000f07e:	4a4b      	ldr	r2, [pc, #300]	; (1000f1ac <platform_driver_init+0x1b8>)
1000f080:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000f082:	494b      	ldr	r1, [pc, #300]	; (1000f1b0 <platform_driver_init+0x1bc>)
1000f084:	4a4b      	ldr	r2, [pc, #300]	; (1000f1b4 <platform_driver_init+0x1c0>)
1000f086:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000f088:	494b      	ldr	r1, [pc, #300]	; (1000f1b8 <platform_driver_init+0x1c4>)
1000f08a:	4a4c      	ldr	r2, [pc, #304]	; (1000f1bc <platform_driver_init+0x1c8>)
1000f08c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000f08e:	494c      	ldr	r1, [pc, #304]	; (1000f1c0 <platform_driver_init+0x1cc>)
1000f090:	4a4c      	ldr	r2, [pc, #304]	; (1000f1c4 <platform_driver_init+0x1d0>)
1000f092:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000f094:	494c      	ldr	r1, [pc, #304]	; (1000f1c8 <platform_driver_init+0x1d4>)
1000f096:	4a4d      	ldr	r2, [pc, #308]	; (1000f1cc <platform_driver_init+0x1d8>)
1000f098:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000f09a:	2028      	movs	r0, #40	; 0x28
1000f09c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000f09e:	494c      	ldr	r1, [pc, #304]	; (1000f1d0 <platform_driver_init+0x1dc>)
1000f0a0:	2028      	movs	r0, #40	; 0x28
1000f0a2:	682b      	ldr	r3, [r5, #0]
1000f0a4:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000f0a6:	682b      	ldr	r3, [r5, #0]
1000f0a8:	494a      	ldr	r1, [pc, #296]	; (1000f1d4 <platform_driver_init+0x1e0>)
1000f0aa:	2027      	movs	r0, #39	; 0x27
1000f0ac:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000f0ae:	4b4a      	ldr	r3, [pc, #296]	; (1000f1d8 <platform_driver_init+0x1e4>)
1000f0b0:	681a      	ldr	r2, [r3, #0]
1000f0b2:	4b4a      	ldr	r3, [pc, #296]	; (1000f1dc <platform_driver_init+0x1e8>)
1000f0b4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000f0b6:	4a4a      	ldr	r2, [pc, #296]	; (1000f1e0 <platform_driver_init+0x1ec>)
1000f0b8:	4b4a      	ldr	r3, [pc, #296]	; (1000f1e4 <platform_driver_init+0x1f0>)
1000f0ba:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000f0bc:	4a4a      	ldr	r2, [pc, #296]	; (1000f1e8 <platform_driver_init+0x1f4>)
1000f0be:	4b4b      	ldr	r3, [pc, #300]	; (1000f1ec <platform_driver_init+0x1f8>)
1000f0c0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000f0c2:	4a4b      	ldr	r2, [pc, #300]	; (1000f1f0 <platform_driver_init+0x1fc>)
1000f0c4:	4b4b      	ldr	r3, [pc, #300]	; (1000f1f4 <platform_driver_init+0x200>)
1000f0c6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000f0c8:	4a4b      	ldr	r2, [pc, #300]	; (1000f1f8 <platform_driver_init+0x204>)
1000f0ca:	4b4c      	ldr	r3, [pc, #304]	; (1000f1fc <platform_driver_init+0x208>)
1000f0cc:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000f0ce:	4a4c      	ldr	r2, [pc, #304]	; (1000f200 <platform_driver_init+0x20c>)
1000f0d0:	4b4c      	ldr	r3, [pc, #304]	; (1000f204 <platform_driver_init+0x210>)
1000f0d2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000f0d4:	4a4c      	ldr	r2, [pc, #304]	; (1000f208 <platform_driver_init+0x214>)
1000f0d6:	4b4d      	ldr	r3, [pc, #308]	; (1000f20c <platform_driver_init+0x218>)
1000f0d8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000f0da:	4a4d      	ldr	r2, [pc, #308]	; (1000f210 <platform_driver_init+0x21c>)
1000f0dc:	4b4d      	ldr	r3, [pc, #308]	; (1000f214 <platform_driver_init+0x220>)
1000f0de:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000f0e0:	22a0      	movs	r2, #160	; 0xa0
1000f0e2:	0092      	lsls	r2, r2, #2
1000f0e4:	2100      	movs	r1, #0
1000f0e6:	484c      	ldr	r0, [pc, #304]	; (1000f218 <platform_driver_init+0x224>)
1000f0e8:	4b4c      	ldr	r3, [pc, #304]	; (1000f21c <platform_driver_init+0x228>)
1000f0ea:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f0ec:	2280      	movs	r2, #128	; 0x80
1000f0ee:	0092      	lsls	r2, r2, #2
1000f0f0:	4b4b      	ldr	r3, [pc, #300]	; (1000f220 <platform_driver_init+0x22c>)
1000f0f2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000f0f4:	4b4b      	ldr	r3, [pc, #300]	; (1000f224 <platform_driver_init+0x230>)
1000f0f6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000f0f8:	4653      	mov	r3, sl
1000f0fa:	6023      	str	r3, [r4, #0]
1000f0fc:	464b      	mov	r3, r9
1000f0fe:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000f100:	4b49      	ldr	r3, [pc, #292]	; (1000f228 <platform_driver_init+0x234>)
1000f102:	4642      	mov	r2, r8
1000f104:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000f106:	683b      	ldr	r3, [r7, #0]
1000f108:	4a48      	ldr	r2, [pc, #288]	; (1000f22c <platform_driver_init+0x238>)
1000f10a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000f10c:	6833      	ldr	r3, [r6, #0]
1000f10e:	4a48      	ldr	r2, [pc, #288]	; (1000f230 <platform_driver_init+0x23c>)
1000f110:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000f112:	2000      	movs	r0, #0
1000f114:	4c47      	ldr	r4, [pc, #284]	; (1000f234 <platform_driver_init+0x240>)
1000f116:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000f118:	2001      	movs	r0, #1
1000f11a:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000f11c:	2002      	movs	r0, #2
1000f11e:	47a0      	blx	r4
		platform_initialized = 1;
1000f120:	2201      	movs	r2, #1
1000f122:	4b06      	ldr	r3, [pc, #24]	; (1000f13c <platform_driver_init+0x148>)
1000f124:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000f126:	2000      	movs	r0, #0
1000f128:	e003      	b.n	1000f132 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000f12a:	2201      	movs	r2, #1
1000f12c:	4b03      	ldr	r3, [pc, #12]	; (1000f13c <platform_driver_init+0x148>)
1000f12e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000f130:	2001      	movs	r0, #1
	}
	return status;
}
1000f132:	bc1c      	pop	{r2, r3, r4}
1000f134:	4690      	mov	r8, r2
1000f136:	4699      	mov	r9, r3
1000f138:	46a2      	mov	sl, r4
1000f13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f13c:	10019eb8 	.word	0x10019eb8
1000f140:	1000ef81 	.word	0x1000ef81
1000f144:	1000efc5 	.word	0x1000efc5
1000f148:	10019ed8 	.word	0x10019ed8
1000f14c:	e000e100 	.word	0xe000e100
1000f150:	1001ade0 	.word	0x1001ade0
1000f154:	000007d7 	.word	0x000007d7
1000f158:	000007bd 	.word	0x000007bd
1000f15c:	1001ab1c 	.word	0x1001ab1c
1000f160:	0001bc51 	.word	0x0001bc51
1000f164:	1001ade4 	.word	0x1001ade4
1000f168:	100400bc 	.word	0x100400bc
1000f16c:	10019eac 	.word	0x10019eac
1000f170:	100400b8 	.word	0x100400b8
1000f174:	10019ea8 	.word	0x10019ea8
1000f178:	0001b99f 	.word	0x0001b99f
1000f17c:	1001ab18 	.word	0x1001ab18
1000f180:	0001b9db 	.word	0x0001b9db
1000f184:	1001ab24 	.word	0x1001ab24
1000f188:	1001adf4 	.word	0x1001adf4
1000f18c:	1004003c 	.word	0x1004003c
1000f190:	10041fc0 	.word	0x10041fc0
1000f194:	1001ab28 	.word	0x1001ab28
1000f198:	10041fc4 	.word	0x10041fc4
1000f19c:	1001adf0 	.word	0x1001adf0
1000f1a0:	1001ade8 	.word	0x1001ade8
1000f1a4:	10041fd4 	.word	0x10041fd4
1000f1a8:	10041fd8 	.word	0x10041fd8
1000f1ac:	1001ab20 	.word	0x1001ab20
1000f1b0:	0001cbe9 	.word	0x0001cbe9
1000f1b4:	10019ecc 	.word	0x10019ecc
1000f1b8:	0001cd8f 	.word	0x0001cd8f
1000f1bc:	10019ebc 	.word	0x10019ebc
1000f1c0:	0001cea3 	.word	0x0001cea3
1000f1c4:	10019ee0 	.word	0x10019ee0
1000f1c8:	0001cbcf 	.word	0x0001cbcf
1000f1cc:	10019eb4 	.word	0x10019eb4
1000f1d0:	1000f67d 	.word	0x1000f67d
1000f1d4:	1000f611 	.word	0x1000f611
1000f1d8:	100400e4 	.word	0x100400e4
1000f1dc:	10019ed4 	.word	0x10019ed4
1000f1e0:	00019fe9 	.word	0x00019fe9
1000f1e4:	10019ee4 	.word	0x10019ee4
1000f1e8:	0001dbdd 	.word	0x0001dbdd
1000f1ec:	10019eb0 	.word	0x10019eb0
1000f1f0:	0001dc5b 	.word	0x0001dc5b
1000f1f4:	10019ec4 	.word	0x10019ec4
1000f1f8:	100405ec 	.word	0x100405ec
1000f1fc:	10019ec0 	.word	0x10019ec0
1000f200:	0001d5e3 	.word	0x0001d5e3
1000f204:	10019ed0 	.word	0x10019ed0
1000f208:	10040c20 	.word	0x10040c20
1000f20c:	10019ee8 	.word	0x10019ee8
1000f210:	00019f09 	.word	0x00019f09
1000f214:	10019ea4 	.word	0x10019ea4
1000f218:	1001ab60 	.word	0x1001ab60
1000f21c:	100150e9 	.word	0x100150e9
1000f220:	1001adf8 	.word	0x1001adf8
1000f224:	1000eead 	.word	0x1000eead
1000f228:	1001adec 	.word	0x1001adec
1000f22c:	1000ef55 	.word	0x1000ef55
1000f230:	1000f6d9 	.word	0x1000f6d9
1000f234:	1000f6c1 	.word	0x1000f6c1

1000f238 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f238:	4b04      	ldr	r3, [pc, #16]	; (1000f24c <platform_register_ble_msg_handler+0x14>)
1000f23a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f23c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f23e:	2a01      	cmp	r2, #1
1000f240:	d102      	bne.n	1000f248 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f242:	4b03      	ldr	r3, [pc, #12]	; (1000f250 <platform_register_ble_msg_handler+0x18>)
1000f244:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f246:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f248:	0018      	movs	r0, r3
1000f24a:	4770      	bx	lr
1000f24c:	10019eb8 	.word	0x10019eb8
1000f250:	10019ed8 	.word	0x10019ed8

1000f254 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f254:	b570      	push	{r4, r5, r6, lr}
1000f256:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f258:	4b0e      	ldr	r3, [pc, #56]	; (1000f294 <platform_interface_send+0x40>)
1000f25a:	681b      	ldr	r3, [r3, #0]
1000f25c:	2b00      	cmp	r3, #0
1000f25e:	d002      	beq.n	1000f266 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f260:	8840      	ldrh	r0, [r0, #2]
1000f262:	4798      	blx	r3
1000f264:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f266:	88e3      	ldrh	r3, [r4, #6]
1000f268:	88a2      	ldrh	r2, [r4, #4]
1000f26a:	8861      	ldrh	r1, [r4, #2]
1000f26c:	8820      	ldrh	r0, [r4, #0]
1000f26e:	4d0a      	ldr	r5, [pc, #40]	; (1000f298 <platform_interface_send+0x44>)
1000f270:	682d      	ldr	r5, [r5, #0]
1000f272:	47a8      	blx	r5
1000f274:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f276:	88e2      	ldrh	r2, [r4, #6]
1000f278:	2a00      	cmp	r2, #0
1000f27a:	d102      	bne.n	1000f282 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f27c:	4b07      	ldr	r3, [pc, #28]	; (1000f29c <platform_interface_send+0x48>)
1000f27e:	4798      	blx	r3
1000f280:	e006      	b.n	1000f290 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f282:	0021      	movs	r1, r4
1000f284:	3108      	adds	r1, #8
1000f286:	4b06      	ldr	r3, [pc, #24]	; (1000f2a0 <platform_interface_send+0x4c>)
1000f288:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f28a:	0028      	movs	r0, r5
1000f28c:	4b03      	ldr	r3, [pc, #12]	; (1000f29c <platform_interface_send+0x48>)
1000f28e:	4798      	blx	r3
	}
}
1000f290:	bd70      	pop	{r4, r5, r6, pc}
1000f292:	46c0      	nop			; (mov r8, r8)
1000f294:	10019eac 	.word	0x10019eac
1000f298:	10019ee4 	.word	0x10019ee4
1000f29c:	1000eedd 	.word	0x1000eedd
1000f2a0:	100150d7 	.word	0x100150d7

1000f2a4 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f2a4:	b570      	push	{r4, r5, r6, lr}
1000f2a6:	0015      	movs	r5, r2
1000f2a8:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f2aa:	020a      	lsls	r2, r1, #8
1000f2ac:	4302      	orrs	r2, r0
1000f2ae:	4b0a      	ldr	r3, [pc, #40]	; (1000f2d8 <send_plf_int_msg_ind+0x34>)
1000f2b0:	681e      	ldr	r6, [r3, #0]
1000f2b2:	0023      	movs	r3, r4
1000f2b4:	2105      	movs	r1, #5
1000f2b6:	20a0      	movs	r0, #160	; 0xa0
1000f2b8:	00c0      	lsls	r0, r0, #3
1000f2ba:	47b0      	blx	r6
1000f2bc:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f2be:	d00a      	beq.n	1000f2d6 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f2c0:	2c00      	cmp	r4, #0
1000f2c2:	d005      	beq.n	1000f2d0 <send_plf_int_msg_ind+0x2c>
1000f2c4:	2d00      	cmp	r5, #0
1000f2c6:	d003      	beq.n	1000f2d0 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f2c8:	0022      	movs	r2, r4
1000f2ca:	0029      	movs	r1, r5
1000f2cc:	4b03      	ldr	r3, [pc, #12]	; (1000f2dc <send_plf_int_msg_ind+0x38>)
1000f2ce:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f2d0:	0030      	movs	r0, r6
1000f2d2:	4b03      	ldr	r3, [pc, #12]	; (1000f2e0 <send_plf_int_msg_ind+0x3c>)
1000f2d4:	4798      	blx	r3
	}
}
1000f2d6:	bd70      	pop	{r4, r5, r6, pc}
1000f2d8:	10019ee4 	.word	0x10019ee4
1000f2dc:	100150d7 	.word	0x100150d7
1000f2e0:	1000eedd 	.word	0x1000eedd

1000f2e4 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2e6:	465f      	mov	r7, fp
1000f2e8:	4656      	mov	r6, sl
1000f2ea:	464d      	mov	r5, r9
1000f2ec:	4644      	mov	r4, r8
1000f2ee:	b4f0      	push	{r4, r5, r6, r7}
1000f2f0:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f2f2:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f2f4:	2300      	movs	r3, #0
1000f2f6:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f2f8:	1ce3      	adds	r3, r4, #3
1000f2fa:	d81c      	bhi.n	1000f336 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f2fc:	220d      	movs	r2, #13
1000f2fe:	2100      	movs	r1, #0
1000f300:	a802      	add	r0, sp, #8
1000f302:	4b82      	ldr	r3, [pc, #520]	; (1000f50c <platform_event_wait+0x228>)
1000f304:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f306:	2333      	movs	r3, #51	; 0x33
1000f308:	aa02      	add	r2, sp, #8
1000f30a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f30c:	3b30      	subs	r3, #48	; 0x30
1000f30e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f310:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f312:	3302      	adds	r3, #2
1000f314:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f316:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f318:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f31a:	0a23      	lsrs	r3, r4, #8
1000f31c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f31e:	0c23      	lsrs	r3, r4, #16
1000f320:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f322:	0e24      	lsrs	r4, r4, #24
1000f324:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f326:	2301      	movs	r3, #1
1000f328:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f32a:	210d      	movs	r1, #13
1000f32c:	0010      	movs	r0, r2
1000f32e:	4b78      	ldr	r3, [pc, #480]	; (1000f510 <platform_event_wait+0x22c>)
1000f330:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f332:	2301      	movs	r3, #1
1000f334:	4699      	mov	r9, r3
1000f336:	2400      	movs	r4, #0
1000f338:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f33a:	4f76      	ldr	r7, [pc, #472]	; (1000f514 <platform_event_wait+0x230>)
1000f33c:	4e76      	ldr	r6, [pc, #472]	; (1000f518 <platform_event_wait+0x234>)
1000f33e:	4977      	ldr	r1, [pc, #476]	; (1000f51c <platform_event_wait+0x238>)
1000f340:	6838      	ldr	r0, [r7, #0]
1000f342:	6833      	ldr	r3, [r6, #0]
1000f344:	4798      	blx	r3
1000f346:	2800      	cmp	r0, #0
1000f348:	d000      	beq.n	1000f34c <platform_event_wait+0x68>
1000f34a:	e088      	b.n	1000f45e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f34c:	4b73      	ldr	r3, [pc, #460]	; (1000f51c <platform_event_wait+0x238>)
1000f34e:	681c      	ldr	r4, [r3, #0]
1000f350:	88a3      	ldrh	r3, [r4, #4]
1000f352:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f354:	23cd      	movs	r3, #205	; 0xcd
1000f356:	009b      	lsls	r3, r3, #2
1000f358:	459a      	cmp	sl, r3
1000f35a:	d100      	bne.n	1000f35e <platform_event_wait+0x7a>
1000f35c:	e0c7      	b.n	1000f4ee <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f35e:	8923      	ldrh	r3, [r4, #8]
1000f360:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f362:	8963      	ldrh	r3, [r4, #10]
1000f364:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f366:	464b      	mov	r3, r9
1000f368:	2b00      	cmp	r3, #0
1000f36a:	d011      	beq.n	1000f390 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f36c:	220d      	movs	r2, #13
1000f36e:	2100      	movs	r1, #0
1000f370:	a802      	add	r0, sp, #8
1000f372:	4b66      	ldr	r3, [pc, #408]	; (1000f50c <platform_event_wait+0x228>)
1000f374:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f376:	2333      	movs	r3, #51	; 0x33
1000f378:	aa02      	add	r2, sp, #8
1000f37a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f37c:	3b30      	subs	r3, #48	; 0x30
1000f37e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f380:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f382:	3302      	adds	r3, #2
1000f384:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f386:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f388:	210d      	movs	r1, #13
1000f38a:	0010      	movs	r0, r2
1000f38c:	4b60      	ldr	r3, [pc, #384]	; (1000f510 <platform_event_wait+0x22c>)
1000f38e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f390:	23a0      	movs	r3, #160	; 0xa0
1000f392:	00db      	lsls	r3, r3, #3
1000f394:	459a      	cmp	sl, r3
1000f396:	d121      	bne.n	1000f3dc <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f398:	4b61      	ldr	r3, [pc, #388]	; (1000f520 <platform_event_wait+0x23c>)
1000f39a:	881b      	ldrh	r3, [r3, #0]
1000f39c:	4443      	add	r3, r8
1000f39e:	22a0      	movs	r2, #160	; 0xa0
1000f3a0:	0092      	lsls	r2, r2, #2
1000f3a2:	4293      	cmp	r3, r2
1000f3a4:	dd02      	ble.n	1000f3ac <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f3a6:	3a80      	subs	r2, #128	; 0x80
1000f3a8:	4b5d      	ldr	r3, [pc, #372]	; (1000f520 <platform_event_wait+0x23c>)
1000f3aa:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f3ac:	4b5c      	ldr	r3, [pc, #368]	; (1000f520 <platform_event_wait+0x23c>)
1000f3ae:	469a      	mov	sl, r3
1000f3b0:	881d      	ldrh	r5, [r3, #0]
1000f3b2:	4b5c      	ldr	r3, [pc, #368]	; (1000f524 <platform_event_wait+0x240>)
1000f3b4:	18ed      	adds	r5, r5, r3
1000f3b6:	0021      	movs	r1, r4
1000f3b8:	310c      	adds	r1, #12
1000f3ba:	4642      	mov	r2, r8
1000f3bc:	0028      	movs	r0, r5
1000f3be:	4b5a      	ldr	r3, [pc, #360]	; (1000f528 <platform_event_wait+0x244>)
1000f3c0:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f3c2:	4642      	mov	r2, r8
1000f3c4:	0029      	movs	r1, r5
1000f3c6:	4658      	mov	r0, fp
1000f3c8:	4b58      	ldr	r3, [pc, #352]	; (1000f52c <platform_event_wait+0x248>)
1000f3ca:	4798      	blx	r3
				plf_event_buff_index += len;
1000f3cc:	4653      	mov	r3, sl
1000f3ce:	881b      	ldrh	r3, [r3, #0]
1000f3d0:	4443      	add	r3, r8
1000f3d2:	4652      	mov	r2, sl
1000f3d4:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f3d6:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f3d8:	2502      	movs	r5, #2
1000f3da:	e03a      	b.n	1000f452 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f3dc:	4b54      	ldr	r3, [pc, #336]	; (1000f530 <platform_event_wait+0x24c>)
1000f3de:	681b      	ldr	r3, [r3, #0]
1000f3e0:	2b00      	cmp	r3, #0
1000f3e2:	d032      	beq.n	1000f44a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f3e4:	4b4d      	ldr	r3, [pc, #308]	; (1000f51c <platform_event_wait+0x238>)
1000f3e6:	681a      	ldr	r2, [r3, #0]
1000f3e8:	8893      	ldrh	r3, [r2, #4]
1000f3ea:	21cd      	movs	r1, #205	; 0xcd
1000f3ec:	0089      	lsls	r1, r1, #2
1000f3ee:	428b      	cmp	r3, r1
1000f3f0:	d104      	bne.n	1000f3fc <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f3f2:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f3f4:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f3f6:	2b00      	cmp	r3, #0
1000f3f8:	d02b      	beq.n	1000f452 <platform_event_wait+0x16e>
1000f3fa:	e028      	b.n	1000f44e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f3fc:	4c4d      	ldr	r4, [pc, #308]	; (1000f534 <platform_event_wait+0x250>)
1000f3fe:	4d49      	ldr	r5, [pc, #292]	; (1000f524 <platform_event_wait+0x240>)
1000f400:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f402:	702b      	strb	r3, [r5, #0]
1000f404:	0a1b      	lsrs	r3, r3, #8
1000f406:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f408:	8910      	ldrh	r0, [r2, #8]
1000f40a:	4b4b      	ldr	r3, [pc, #300]	; (1000f538 <platform_event_wait+0x254>)
1000f40c:	681b      	ldr	r3, [r3, #0]
1000f40e:	4798      	blx	r3
1000f410:	7128      	strb	r0, [r5, #4]
1000f412:	0a00      	lsrs	r0, r0, #8
1000f414:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f416:	6820      	ldr	r0, [r4, #0]
1000f418:	4b40      	ldr	r3, [pc, #256]	; (1000f51c <platform_event_wait+0x238>)
1000f41a:	681a      	ldr	r2, [r3, #0]
1000f41c:	88d2      	ldrh	r2, [r2, #6]
1000f41e:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f420:	681d      	ldr	r5, [r3, #0]
1000f422:	896b      	ldrh	r3, [r5, #10]
1000f424:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f426:	3008      	adds	r0, #8
1000f428:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f42a:	896a      	ldrh	r2, [r5, #10]
1000f42c:	2a00      	cmp	r2, #0
1000f42e:	d003      	beq.n	1000f438 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f430:	0029      	movs	r1, r5
1000f432:	310c      	adds	r1, #12
1000f434:	4b3c      	ldr	r3, [pc, #240]	; (1000f528 <platform_event_wait+0x244>)
1000f436:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f438:	8969      	ldrh	r1, [r5, #10]
1000f43a:	3108      	adds	r1, #8
1000f43c:	4b3c      	ldr	r3, [pc, #240]	; (1000f530 <platform_event_wait+0x24c>)
1000f43e:	681b      	ldr	r3, [r3, #0]
1000f440:	4838      	ldr	r0, [pc, #224]	; (1000f524 <platform_event_wait+0x240>)
1000f442:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f444:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f446:	2503      	movs	r5, #3
1000f448:	e003      	b.n	1000f452 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f44a:	2400      	movs	r4, #0
1000f44c:	e001      	b.n	1000f452 <platform_event_wait+0x16e>
1000f44e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f450:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f452:	4b32      	ldr	r3, [pc, #200]	; (1000f51c <platform_event_wait+0x238>)
1000f454:	6818      	ldr	r0, [r3, #0]
1000f456:	4b39      	ldr	r3, [pc, #228]	; (1000f53c <platform_event_wait+0x258>)
1000f458:	681b      	ldr	r3, [r3, #0]
1000f45a:	4798      	blx	r3
1000f45c:	e000      	b.n	1000f460 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f45e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f460:	2c00      	cmp	r4, #0
1000f462:	d000      	beq.n	1000f466 <platform_event_wait+0x182>
1000f464:	e76b      	b.n	1000f33e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f466:	464b      	mov	r3, r9
1000f468:	2b00      	cmp	r3, #0
1000f46a:	d046      	beq.n	1000f4fa <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f46c:	4b29      	ldr	r3, [pc, #164]	; (1000f514 <platform_event_wait+0x230>)
1000f46e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f470:	2e00      	cmp	r6, #0
1000f472:	d104      	bne.n	1000f47e <platform_event_wait+0x19a>
1000f474:	2300      	movs	r3, #0
1000f476:	6a1c      	ldr	r4, [r3, #32]
1000f478:	2c00      	cmp	r4, #0
1000f47a:	d131      	bne.n	1000f4e0 <platform_event_wait+0x1fc>
1000f47c:	e03d      	b.n	1000f4fa <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f47e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f480:	2314      	movs	r3, #20
1000f482:	469c      	mov	ip, r3
1000f484:	44b4      	add	ip, r6
1000f486:	4663      	mov	r3, ip
1000f488:	4660      	mov	r0, ip
1000f48a:	9300      	str	r3, [sp, #0]
1000f48c:	4b2c      	ldr	r3, [pc, #176]	; (1000f540 <platform_event_wait+0x25c>)
1000f48e:	681b      	ldr	r3, [r3, #0]
1000f490:	4798      	blx	r3
	while(NULL != current)
1000f492:	2c00      	cmp	r4, #0
1000f494:	d01f      	beq.n	1000f4d6 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f496:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f498:	23cd      	movs	r3, #205	; 0xcd
1000f49a:	009b      	lsls	r3, r3, #2
1000f49c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f49e:	4b27      	ldr	r3, [pc, #156]	; (1000f53c <platform_event_wait+0x258>)
1000f4a0:	469a      	mov	sl, r3
1000f4a2:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f4a4:	6803      	ldr	r3, [r0, #0]
1000f4a6:	889b      	ldrh	r3, [r3, #4]
1000f4a8:	4543      	cmp	r3, r8
1000f4aa:	d110      	bne.n	1000f4ce <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f4ac:	2f00      	cmp	r7, #0
1000f4ae:	d006      	beq.n	1000f4be <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f4b0:	6883      	ldr	r3, [r0, #8]
1000f4b2:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f4b4:	4653      	mov	r3, sl
1000f4b6:	681b      	ldr	r3, [r3, #0]
1000f4b8:	4798      	blx	r3
				current = prev->pstrNext;
1000f4ba:	68b8      	ldr	r0, [r7, #8]
1000f4bc:	e009      	b.n	1000f4d2 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f4be:	6883      	ldr	r3, [r0, #8]
1000f4c0:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f4c2:	4b1e      	ldr	r3, [pc, #120]	; (1000f53c <platform_event_wait+0x258>)
1000f4c4:	681b      	ldr	r3, [r3, #0]
1000f4c6:	9301      	str	r3, [sp, #4]
1000f4c8:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f4ca:	6a30      	ldr	r0, [r6, #32]
1000f4cc:	e001      	b.n	1000f4d2 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f4ce:	0007      	movs	r7, r0
1000f4d0:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f4d2:	2800      	cmp	r0, #0
1000f4d4:	d1e6      	bne.n	1000f4a4 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f4d6:	4b1b      	ldr	r3, [pc, #108]	; (1000f544 <platform_event_wait+0x260>)
1000f4d8:	681b      	ldr	r3, [r3, #0]
1000f4da:	9800      	ldr	r0, [sp, #0]
1000f4dc:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f4de:	e00c      	b.n	1000f4fa <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f4e0:	2314      	movs	r3, #20
1000f4e2:	9300      	str	r3, [sp, #0]
1000f4e4:	4b16      	ldr	r3, [pc, #88]	; (1000f540 <platform_event_wait+0x25c>)
1000f4e6:	681b      	ldr	r3, [r3, #0]
1000f4e8:	2014      	movs	r0, #20
1000f4ea:	4798      	blx	r3
1000f4ec:	e7d3      	b.n	1000f496 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f4ee:	4b10      	ldr	r3, [pc, #64]	; (1000f530 <platform_event_wait+0x24c>)
1000f4f0:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f4f2:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f4f4:	2b00      	cmp	r3, #0
1000f4f6:	d0ac      	beq.n	1000f452 <platform_event_wait+0x16e>
1000f4f8:	e77b      	b.n	1000f3f2 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f4fa:	0028      	movs	r0, r5
1000f4fc:	b007      	add	sp, #28
1000f4fe:	bc3c      	pop	{r2, r3, r4, r5}
1000f500:	4690      	mov	r8, r2
1000f502:	4699      	mov	r9, r3
1000f504:	46a2      	mov	sl, r4
1000f506:	46ab      	mov	fp, r5
1000f508:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f50a:	46c0      	nop			; (mov r8, r8)
1000f50c:	100150e9 	.word	0x100150e9
1000f510:	1000f255 	.word	0x1000f255
1000f514:	10019ee8 	.word	0x10019ee8
1000f518:	10019ed0 	.word	0x10019ed0
1000f51c:	10019edc 	.word	0x10019edc
1000f520:	1001adf8 	.word	0x1001adf8
1000f524:	1001ab60 	.word	0x1001ab60
1000f528:	100150d7 	.word	0x100150d7
1000f52c:	1000ee75 	.word	0x1000ee75
1000f530:	10019ed8 	.word	0x10019ed8
1000f534:	10019ec8 	.word	0x10019ec8
1000f538:	10019ea8 	.word	0x10019ea8
1000f53c:	10019ea4 	.word	0x10019ea4
1000f540:	10019ec4 	.word	0x10019ec4
1000f544:	10019eb0 	.word	0x10019eb0

1000f548 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f548:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f54a:	4b03      	ldr	r3, [pc, #12]	; (1000f558 <acquire_sleep_lock+0x10>)
1000f54c:	681b      	ldr	r3, [r3, #0]
1000f54e:	2080      	movs	r0, #128	; 0x80
1000f550:	0200      	lsls	r0, r0, #8
1000f552:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f554:	2008      	movs	r0, #8
1000f556:	bd10      	pop	{r4, pc}
1000f558:	1001ab18 	.word	0x1001ab18

1000f55c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f55c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f55e:	4b03      	ldr	r3, [pc, #12]	; (1000f56c <release_message_lock+0x10>)
1000f560:	681b      	ldr	r3, [r3, #0]
1000f562:	2080      	movs	r0, #128	; 0x80
1000f564:	01c0      	lsls	r0, r0, #7
1000f566:	4798      	blx	r3
	return status;
}
1000f568:	2000      	movs	r0, #0
1000f56a:	bd10      	pop	{r4, pc}
1000f56c:	1001ab24 	.word	0x1001ab24

1000f570 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f570:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f572:	4c05      	ldr	r4, [pc, #20]	; (1000f588 <release_sleep_lock+0x18>)
1000f574:	2080      	movs	r0, #128	; 0x80
1000f576:	01c0      	lsls	r0, r0, #7
1000f578:	6823      	ldr	r3, [r4, #0]
1000f57a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f57c:	6823      	ldr	r3, [r4, #0]
1000f57e:	2080      	movs	r0, #128	; 0x80
1000f580:	0200      	lsls	r0, r0, #8
1000f582:	4798      	blx	r3
	return status;
}
1000f584:	2000      	movs	r0, #0
1000f586:	bd10      	pop	{r4, pc}
1000f588:	1001ab24 	.word	0x1001ab24

1000f58c <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f58c:	2800      	cmp	r0, #0
1000f58e:	d003      	beq.n	1000f598 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f590:	4b02      	ldr	r3, [pc, #8]	; (1000f59c <register_resume_callback+0x10>)
1000f592:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f594:	2000      	movs	r0, #0
1000f596:	e000      	b.n	1000f59a <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f598:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f59a:	4770      	bx	lr
1000f59c:	1001adec 	.word	0x1001adec

1000f5a0 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f5a0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f5a2:	4a18      	ldr	r2, [pc, #96]	; (1000f604 <gpio1_combined_isr_handler+0x64>)
1000f5a4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f5a6:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f5a8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f5aa:	2180      	movs	r1, #128	; 0x80
1000f5ac:	0209      	lsls	r1, r1, #8
1000f5ae:	4301      	orrs	r1, r0
1000f5b0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f5b2:	0010      	movs	r0, r2
1000f5b4:	4d14      	ldr	r5, [pc, #80]	; (1000f608 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f5b6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f5b8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f5ba:	05db      	lsls	r3, r3, #23
1000f5bc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f5be:	d011      	beq.n	1000f5e4 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f5c0:	b2db      	uxtb	r3, r3
1000f5c2:	4259      	negs	r1, r3
1000f5c4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f5c6:	2b01      	cmp	r3, #1
1000f5c8:	d006      	beq.n	1000f5d8 <gpio1_combined_isr_handler+0x38>
1000f5ca:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f5cc:	085b      	lsrs	r3, r3, #1
				index++;
1000f5ce:	3101      	adds	r1, #1
1000f5d0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f5d2:	2b01      	cmp	r3, #1
1000f5d4:	d1fa      	bne.n	1000f5cc <gpio1_combined_isr_handler+0x2c>
1000f5d6:	e000      	b.n	1000f5da <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f5d8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f5da:	0023      	movs	r3, r4
1000f5dc:	408b      	lsls	r3, r1
1000f5de:	b29b      	uxth	r3, r3
1000f5e0:	8703      	strh	r3, [r0, #56]	; 0x38
1000f5e2:	e003      	b.n	1000f5ec <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f5e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f5e6:	432b      	orrs	r3, r5
1000f5e8:	b29b      	uxth	r3, r3
1000f5ea:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f5ec:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f5ee:	05db      	lsls	r3, r3, #23
1000f5f0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f5f2:	d1e2      	bne.n	1000f5ba <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f5f4:	2180      	movs	r1, #128	; 0x80
1000f5f6:	0049      	lsls	r1, r1, #1
1000f5f8:	3381      	adds	r3, #129	; 0x81
1000f5fa:	33ff      	adds	r3, #255	; 0xff
1000f5fc:	4a03      	ldr	r2, [pc, #12]	; (1000f60c <gpio1_combined_isr_handler+0x6c>)
1000f5fe:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f600:	bd30      	pop	{r4, r5, pc}
1000f602:	46c0      	nop			; (mov r8, r8)
1000f604:	40011000 	.word	0x40011000
1000f608:	ffff8000 	.word	0xffff8000
1000f60c:	e000e100 	.word	0xe000e100

1000f610 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f610:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f612:	4a17      	ldr	r2, [pc, #92]	; (1000f670 <gpio0_combined_isr_handler+0x60>)
1000f614:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f616:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f618:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f61a:	2180      	movs	r1, #128	; 0x80
1000f61c:	0209      	lsls	r1, r1, #8
1000f61e:	4301      	orrs	r1, r0
1000f620:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f622:	0010      	movs	r0, r2
1000f624:	4d13      	ldr	r5, [pc, #76]	; (1000f674 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f626:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f628:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f62a:	05db      	lsls	r3, r3, #23
1000f62c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f62e:	d011      	beq.n	1000f654 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f630:	b2db      	uxtb	r3, r3
1000f632:	4259      	negs	r1, r3
1000f634:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f636:	2b01      	cmp	r3, #1
1000f638:	d006      	beq.n	1000f648 <gpio0_combined_isr_handler+0x38>
1000f63a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f63c:	085b      	lsrs	r3, r3, #1
				index++;
1000f63e:	3101      	adds	r1, #1
1000f640:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f642:	2b01      	cmp	r3, #1
1000f644:	d1fa      	bne.n	1000f63c <gpio0_combined_isr_handler+0x2c>
1000f646:	e000      	b.n	1000f64a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f648:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f64a:	0023      	movs	r3, r4
1000f64c:	408b      	lsls	r3, r1
1000f64e:	b29b      	uxth	r3, r3
1000f650:	8703      	strh	r3, [r0, #56]	; 0x38
1000f652:	e003      	b.n	1000f65c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f654:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f656:	432b      	orrs	r3, r5
1000f658:	b29b      	uxth	r3, r3
1000f65a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f65c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f65e:	05db      	lsls	r3, r3, #23
1000f660:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f662:	d1e2      	bne.n	1000f62a <gpio0_combined_isr_handler+0x1a>
1000f664:	2180      	movs	r1, #128	; 0x80
1000f666:	3381      	adds	r3, #129	; 0x81
1000f668:	33ff      	adds	r3, #255	; 0xff
1000f66a:	4a03      	ldr	r2, [pc, #12]	; (1000f678 <gpio0_combined_isr_handler+0x68>)
1000f66c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f66e:	bd30      	pop	{r4, r5, pc}
1000f670:	40010000 	.word	0x40010000
1000f674:	ffff8000 	.word	0xffff8000
1000f678:	e000e100 	.word	0xe000e100

1000f67c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f67c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f67e:	4b0c      	ldr	r3, [pc, #48]	; (1000f6b0 <PORT1_COMB_Handler+0x34>)
1000f680:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f682:	0b5b      	lsrs	r3, r3, #13
1000f684:	d010      	beq.n	1000f6a8 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f686:	4b0b      	ldr	r3, [pc, #44]	; (1000f6b4 <PORT1_COMB_Handler+0x38>)
1000f688:	681b      	ldr	r3, [r3, #0]
1000f68a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f68c:	4a08      	ldr	r2, [pc, #32]	; (1000f6b0 <PORT1_COMB_Handler+0x34>)
1000f68e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f690:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f692:	0b5b      	lsrs	r3, r3, #13
1000f694:	035b      	lsls	r3, r3, #13
1000f696:	430b      	orrs	r3, r1
1000f698:	8713      	strh	r3, [r2, #56]	; 0x38
1000f69a:	2180      	movs	r1, #128	; 0x80
1000f69c:	0049      	lsls	r1, r1, #1
1000f69e:	23c0      	movs	r3, #192	; 0xc0
1000f6a0:	005b      	lsls	r3, r3, #1
1000f6a2:	4a05      	ldr	r2, [pc, #20]	; (1000f6b8 <PORT1_COMB_Handler+0x3c>)
1000f6a4:	50d1      	str	r1, [r2, r3]
1000f6a6:	e001      	b.n	1000f6ac <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f6a8:	4b04      	ldr	r3, [pc, #16]	; (1000f6bc <PORT1_COMB_Handler+0x40>)
1000f6aa:	4798      	blx	r3
	}
}
1000f6ac:	bd10      	pop	{r4, pc}
1000f6ae:	46c0      	nop			; (mov r8, r8)
1000f6b0:	40011000 	.word	0x40011000
1000f6b4:	1001ade4 	.word	0x1001ade4
1000f6b8:	e000e100 	.word	0xe000e100
1000f6bc:	1000f5a1 	.word	0x1000f5a1

1000f6c0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f6c0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f6c2:	2802      	cmp	r0, #2
1000f6c4:	d804      	bhi.n	1000f6d0 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f6c6:	0080      	lsls	r0, r0, #2
1000f6c8:	2200      	movs	r2, #0
1000f6ca:	4b02      	ldr	r3, [pc, #8]	; (1000f6d4 <wakeup_int_unregister_callback+0x14>)
1000f6cc:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f6ce:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f6d0:	0018      	movs	r0, r3
1000f6d2:	4770      	bx	lr
1000f6d4:	1001adfc 	.word	0x1001adfc

1000f6d8 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f6d8:	b510      	push	{r4, lr}
1000f6da:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f6dc:	7803      	ldrb	r3, [r0, #0]
1000f6de:	2b01      	cmp	r3, #1
1000f6e0:	d108      	bne.n	1000f6f4 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f6e2:	4b11      	ldr	r3, [pc, #68]	; (1000f728 <wakeup_active_event_callback+0x50>)
1000f6e4:	681b      	ldr	r3, [r3, #0]
1000f6e6:	2b00      	cmp	r3, #0
1000f6e8:	d000      	beq.n	1000f6ec <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f6ea:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f6ec:	23ff      	movs	r3, #255	; 0xff
1000f6ee:	6822      	ldr	r2, [r4, #0]
1000f6f0:	439a      	bics	r2, r3
1000f6f2:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f6f4:	7863      	ldrb	r3, [r4, #1]
1000f6f6:	2b01      	cmp	r3, #1
1000f6f8:	d108      	bne.n	1000f70c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f6fa:	4b0b      	ldr	r3, [pc, #44]	; (1000f728 <wakeup_active_event_callback+0x50>)
1000f6fc:	685b      	ldr	r3, [r3, #4]
1000f6fe:	2b00      	cmp	r3, #0
1000f700:	d000      	beq.n	1000f704 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f702:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f704:	4b09      	ldr	r3, [pc, #36]	; (1000f72c <wakeup_active_event_callback+0x54>)
1000f706:	6822      	ldr	r2, [r4, #0]
1000f708:	4013      	ands	r3, r2
1000f70a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f70c:	78a3      	ldrb	r3, [r4, #2]
1000f70e:	2b01      	cmp	r3, #1
1000f710:	d108      	bne.n	1000f724 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f712:	4b05      	ldr	r3, [pc, #20]	; (1000f728 <wakeup_active_event_callback+0x50>)
1000f714:	689b      	ldr	r3, [r3, #8]
1000f716:	2b00      	cmp	r3, #0
1000f718:	d000      	beq.n	1000f71c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f71a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f71c:	4b04      	ldr	r3, [pc, #16]	; (1000f730 <wakeup_active_event_callback+0x58>)
1000f71e:	6822      	ldr	r2, [r4, #0]
1000f720:	4013      	ands	r3, r2
1000f722:	6023      	str	r3, [r4, #0]
	}
}
1000f724:	bd10      	pop	{r4, pc}
1000f726:	46c0      	nop			; (mov r8, r8)
1000f728:	1001adfc 	.word	0x1001adfc
1000f72c:	ffff00ff 	.word	0xffff00ff
1000f730:	ff00ffff 	.word	0xff00ffff

1000f734 <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000f734:	2201      	movs	r2, #1
1000f736:	4b01      	ldr	r3, [pc, #4]	; (1000f73c <sms_plf_event_cb+0x8>)
1000f738:	705a      	strb	r2, [r3, #1]
}
1000f73a:	4770      	bx	lr
1000f73c:	1001a154 	.word	0x1001a154

1000f740 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f740:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f742:	4b0a      	ldr	r3, [pc, #40]	; (1000f76c <resume_cb+0x2c>)
1000f744:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f746:	4b0a      	ldr	r3, [pc, #40]	; (1000f770 <resume_cb+0x30>)
1000f748:	4798      	blx	r3
    sms_dualtimer_init();
1000f74a:	4b0a      	ldr	r3, [pc, #40]	; (1000f774 <resume_cb+0x34>)
1000f74c:	4798      	blx	r3
    delay_init();
1000f74e:	4b0a      	ldr	r3, [pc, #40]	; (1000f778 <resume_cb+0x38>)
1000f750:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f752:	4b0a      	ldr	r3, [pc, #40]	; (1000f77c <resume_cb+0x3c>)
1000f754:	4798      	blx	r3
    sms_led_gpio_init();
1000f756:	4b0a      	ldr	r3, [pc, #40]	; (1000f780 <resume_cb+0x40>)
1000f758:	4798      	blx	r3
    sms_spi_master_configure();
1000f75a:	4b0a      	ldr	r3, [pc, #40]	; (1000f784 <resume_cb+0x44>)
1000f75c:	4798      	blx	r3
    sms_i2c_master_configure();
1000f75e:	4b0a      	ldr	r3, [pc, #40]	; (1000f788 <resume_cb+0x48>)
1000f760:	4798      	blx	r3
    sms_mpu_configure_gpio();
1000f762:	4b0a      	ldr	r3, [pc, #40]	; (1000f78c <resume_cb+0x4c>)
1000f764:	4798      	blx	r3
    sms_monitor_configure_gpio();
1000f766:	4b0a      	ldr	r3, [pc, #40]	; (1000f790 <resume_cb+0x50>)
1000f768:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f76a:	bd10      	pop	{r4, pc}
1000f76c:	1000ef81 	.word	0x1000ef81
1000f770:	1000ece9 	.word	0x1000ece9
1000f774:	1000b411 	.word	0x1000b411
1000f778:	100080e9 	.word	0x100080e9
1000f77c:	1000a49d 	.word	0x1000a49d
1000f780:	1000adf1 	.word	0x1000adf1
1000f784:	1000b2c9 	.word	0x1000b2c9
1000f788:	1000aa3d 	.word	0x1000aa3d
1000f78c:	1000abc9 	.word	0x1000abc9
1000f790:	1000a8c5 	.word	0x1000a8c5

1000f794 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f794:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f796:	2300      	movs	r3, #0
1000f798:	4a10      	ldr	r2, [pc, #64]	; (1000f7dc <sms_init_variables+0x48>)
1000f79a:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f79c:	4a10      	ldr	r2, [pc, #64]	; (1000f7e0 <sms_init_variables+0x4c>)
1000f79e:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f7a0:	4810      	ldr	r0, [pc, #64]	; (1000f7e4 <sms_init_variables+0x50>)
1000f7a2:	2225      	movs	r2, #37	; 0x25
1000f7a4:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f7a6:	4a10      	ldr	r2, [pc, #64]	; (1000f7e8 <sms_init_variables+0x54>)
1000f7a8:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f7aa:	4a10      	ldr	r2, [pc, #64]	; (1000f7ec <sms_init_variables+0x58>)
1000f7ac:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f7ae:	2101      	movs	r1, #1
1000f7b0:	4a0f      	ldr	r2, [pc, #60]	; (1000f7f0 <sms_init_variables+0x5c>)
1000f7b2:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f7b4:	4a0f      	ldr	r2, [pc, #60]	; (1000f7f4 <sms_init_variables+0x60>)
1000f7b6:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f7b8:	241f      	movs	r4, #31
1000f7ba:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f7bc:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f7be:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f7c0:	2228      	movs	r2, #40	; 0x28
1000f7c2:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f7c4:	4a0c      	ldr	r2, [pc, #48]	; (1000f7f8 <sms_init_variables+0x64>)
1000f7c6:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f7c8:	4a0c      	ldr	r2, [pc, #48]	; (1000f7fc <sms_init_variables+0x68>)
1000f7ca:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f7cc:	201d      	movs	r0, #29
1000f7ce:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f7d0:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f7d2:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f7d4:	4a0a      	ldr	r2, [pc, #40]	; (1000f800 <sms_init_variables+0x6c>)
1000f7d6:	8013      	strh	r3, [r2, #0]
}
1000f7d8:	bd10      	pop	{r4, pc}
1000f7da:	46c0      	nop			; (mov r8, r8)
1000f7dc:	1001a16c 	.word	0x1001a16c
1000f7e0:	1001a05c 	.word	0x1001a05c
1000f7e4:	1001a0d0 	.word	0x1001a0d0
1000f7e8:	10019fc0 	.word	0x10019fc0
1000f7ec:	1001a16d 	.word	0x1001a16d
1000f7f0:	1001a054 	.word	0x1001a054
1000f7f4:	10019fbc 	.word	0x10019fbc
1000f7f8:	1001a055 	.word	0x1001a055
1000f7fc:	1001a058 	.word	0x1001a058
1000f800:	1001a188 	.word	0x1001a188

1000f804 <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f806:	2210      	movs	r2, #16
1000f808:	4ba6      	ldr	r3, [pc, #664]	; (1000faa4 <main+0x2a0>)
1000f80a:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f80c:	4ba6      	ldr	r3, [pc, #664]	; (1000faa8 <main+0x2a4>)
1000f80e:	4798      	blx	r3
	gpio_init(); // GPIO
1000f810:	4ba6      	ldr	r3, [pc, #664]	; (1000faac <main+0x2a8>)
1000f812:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f814:	4ba6      	ldr	r3, [pc, #664]	; (1000fab0 <main+0x2ac>)
1000f816:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f818:	4ba6      	ldr	r3, [pc, #664]	; (1000fab4 <main+0x2b0>)
1000f81a:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f81c:	4ba6      	ldr	r3, [pc, #664]	; (1000fab8 <main+0x2b4>)
1000f81e:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f820:	4ba6      	ldr	r3, [pc, #664]	; (1000fabc <main+0x2b8>)
1000f822:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f824:	4ba6      	ldr	r3, [pc, #664]	; (1000fac0 <main+0x2bc>)
1000f826:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f828:	4ba6      	ldr	r3, [pc, #664]	; (1000fac4 <main+0x2c0>)
1000f82a:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f82c:	4ba6      	ldr	r3, [pc, #664]	; (1000fac8 <main+0x2c4>)
1000f82e:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f830:	4ba6      	ldr	r3, [pc, #664]	; (1000facc <main+0x2c8>)
1000f832:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f834:	4ba6      	ldr	r3, [pc, #664]	; (1000fad0 <main+0x2cc>)
1000f836:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f838:	4ba6      	ldr	r3, [pc, #664]	; (1000fad4 <main+0x2d0>)
1000f83a:	4798      	blx	r3
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f83c:	2100      	movs	r1, #0
1000f83e:	2325      	movs	r3, #37	; 0x25
1000f840:	4aa5      	ldr	r2, [pc, #660]	; (1000fad8 <main+0x2d4>)
1000f842:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000f844:	4ba5      	ldr	r3, [pc, #660]	; (1000fadc <main+0x2d8>)
1000f846:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f848:	2000      	movs	r0, #0
1000f84a:	4ba5      	ldr	r3, [pc, #660]	; (1000fae0 <main+0x2dc>)
1000f84c:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f84e:	4ba5      	ldr	r3, [pc, #660]	; (1000fae4 <main+0x2e0>)
1000f850:	4798      	blx	r3
    sms_pressure_define_services();
1000f852:	4ba5      	ldr	r3, [pc, #660]	; (1000fae8 <main+0x2e4>)
1000f854:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f856:	48a5      	ldr	r0, [pc, #660]	; (1000faec <main+0x2e8>)
1000f858:	4ba5      	ldr	r3, [pc, #660]	; (1000faf0 <main+0x2ec>)
1000f85a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f85c:	49a5      	ldr	r1, [pc, #660]	; (1000faf4 <main+0x2f0>)
1000f85e:	2000      	movs	r0, #0
1000f860:	4ca5      	ldr	r4, [pc, #660]	; (1000faf8 <main+0x2f4>)
1000f862:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f864:	49a5      	ldr	r1, [pc, #660]	; (1000fafc <main+0x2f8>)
1000f866:	2001      	movs	r0, #1
1000f868:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f86a:	4ba5      	ldr	r3, [pc, #660]	; (1000fb00 <main+0x2fc>)
1000f86c:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f86e:	4ba5      	ldr	r3, [pc, #660]	; (1000fb04 <main+0x300>)
1000f870:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f872:	4aa5      	ldr	r2, [pc, #660]	; (1000fb08 <main+0x304>)
1000f874:	2100      	movs	r1, #0
1000f876:	2000      	movs	r0, #0
1000f878:	4ca4      	ldr	r4, [pc, #656]	; (1000fb0c <main+0x308>)
1000f87a:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f87c:	4aa4      	ldr	r2, [pc, #656]	; (1000fb10 <main+0x30c>)
1000f87e:	2102      	movs	r1, #2
1000f880:	2000      	movs	r0, #0
1000f882:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000f884:	48a3      	ldr	r0, [pc, #652]	; (1000fb14 <main+0x310>)
1000f886:	4ba4      	ldr	r3, [pc, #656]	; (1000fb18 <main+0x314>)
1000f888:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f88a:	2100      	movs	r1, #0
1000f88c:	2000      	movs	r0, #0
1000f88e:	4ba3      	ldr	r3, [pc, #652]	; (1000fb1c <main+0x318>)
1000f890:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    res = sms_mpu_initialize();
1000f892:	4ba3      	ldr	r3, [pc, #652]	; (1000fb20 <main+0x31c>)
1000f894:	4798      	blx	r3
    if(res) {
1000f896:	2800      	cmp	r0, #0
1000f898:	d006      	beq.n	1000f8a8 <main+0xa4>
        DBG_LOG("Could not initialize MPU!");
1000f89a:	48a2      	ldr	r0, [pc, #648]	; (1000fb24 <main+0x320>)
1000f89c:	4ba2      	ldr	r3, [pc, #648]	; (1000fb28 <main+0x324>)
1000f89e:	4798      	blx	r3
1000f8a0:	48a2      	ldr	r0, [pc, #648]	; (1000fb2c <main+0x328>)
1000f8a2:	4ba3      	ldr	r3, [pc, #652]	; (1000fb30 <main+0x32c>)
1000f8a4:	4798      	blx	r3
1000f8a6:	e7fe      	b.n	1000f8a6 <main+0xa2>
        while(1) {}
    }
    sms_sensors_interrupt_toggle(true, false);
1000f8a8:	2100      	movs	r1, #0
1000f8aa:	2001      	movs	r0, #1
1000f8ac:	4ba1      	ldr	r3, [pc, #644]	; (1000fb34 <main+0x330>)
1000f8ae:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f8b0:	4da1      	ldr	r5, [pc, #644]	; (1000fb38 <main+0x334>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f8b2:	4ca2      	ldr	r4, [pc, #648]	; (1000fb3c <main+0x338>)
        {
            if(ulp_active) {
1000f8b4:	4ea2      	ldr	r6, [pc, #648]	; (1000fb40 <main+0x33c>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f8b6:	2001      	movs	r0, #1
1000f8b8:	4240      	negs	r0, r0
1000f8ba:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f8bc:	7863      	ldrb	r3, [r4, #1]
1000f8be:	2b00      	cmp	r3, #0
1000f8c0:	d100      	bne.n	1000f8c4 <main+0xc0>
1000f8c2:	e0db      	b.n	1000fa7c <main+0x278>
        {
            if(ulp_active) {
1000f8c4:	7833      	ldrb	r3, [r6, #0]
1000f8c6:	2b00      	cmp	r3, #0
1000f8c8:	d009      	beq.n	1000f8de <main+0xda>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000f8ca:	4896      	ldr	r0, [pc, #600]	; (1000fb24 <main+0x320>)
1000f8cc:	4b96      	ldr	r3, [pc, #600]	; (1000fb28 <main+0x324>)
1000f8ce:	4798      	blx	r3
1000f8d0:	489c      	ldr	r0, [pc, #624]	; (1000fb44 <main+0x340>)
1000f8d2:	4f97      	ldr	r7, [pc, #604]	; (1000fb30 <main+0x32c>)
1000f8d4:	47b8      	blx	r7
                acquire_sleep_lock();
1000f8d6:	4b77      	ldr	r3, [pc, #476]	; (1000fab4 <main+0x2b0>)
1000f8d8:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000f8da:	489b      	ldr	r0, [pc, #620]	; (1000fb48 <main+0x344>)
1000f8dc:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("\r\n[main]\t\t\t\tDisabling button int...");
1000f8de:	4891      	ldr	r0, [pc, #580]	; (1000fb24 <main+0x320>)
1000f8e0:	4b91      	ldr	r3, [pc, #580]	; (1000fb28 <main+0x324>)
1000f8e2:	4798      	blx	r3
1000f8e4:	4899      	ldr	r0, [pc, #612]	; (1000fb4c <main+0x348>)
1000f8e6:	4f92      	ldr	r7, [pc, #584]	; (1000fb30 <main+0x32c>)
1000f8e8:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000f8ea:	2101      	movs	r1, #1
1000f8ec:	2001      	movs	r0, #1
1000f8ee:	4b8b      	ldr	r3, [pc, #556]	; (1000fb1c <main+0x318>)
1000f8f0:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f8f2:	4895      	ldr	r0, [pc, #596]	; (1000fb48 <main+0x344>)
1000f8f4:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000f8f6:	4b91      	ldr	r3, [pc, #580]	; (1000fb3c <main+0x338>)
1000f8f8:	781b      	ldrb	r3, [r3, #0]
1000f8fa:	b2db      	uxtb	r3, r3
1000f8fc:	2b06      	cmp	r3, #6
1000f8fe:	d900      	bls.n	1000f902 <main+0xfe>
1000f900:	e0a6      	b.n	1000fa50 <main+0x24c>
1000f902:	009b      	lsls	r3, r3, #2
1000f904:	4a92      	ldr	r2, [pc, #584]	; (1000fb50 <main+0x34c>)
1000f906:	58d3      	ldr	r3, [r2, r3]
1000f908:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("...NO SOURCE!!");
1000f90a:	4886      	ldr	r0, [pc, #536]	; (1000fb24 <main+0x320>)
1000f90c:	4b86      	ldr	r3, [pc, #536]	; (1000fb28 <main+0x324>)
1000f90e:	4798      	blx	r3
1000f910:	4890      	ldr	r0, [pc, #576]	; (1000fb54 <main+0x350>)
1000f912:	4b87      	ldr	r3, [pc, #540]	; (1000fb30 <main+0x32c>)
1000f914:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f916:	e0a1      	b.n	1000fa5c <main+0x258>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("...BTN0");
1000f918:	4882      	ldr	r0, [pc, #520]	; (1000fb24 <main+0x320>)
1000f91a:	4b83      	ldr	r3, [pc, #524]	; (1000fb28 <main+0x324>)
1000f91c:	4798      	blx	r3
1000f91e:	488e      	ldr	r0, [pc, #568]	; (1000fb58 <main+0x354>)
1000f920:	4b83      	ldr	r3, [pc, #524]	; (1000fb30 <main+0x32c>)
1000f922:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f924:	4b8d      	ldr	r3, [pc, #564]	; (1000fb5c <main+0x358>)
1000f926:	781b      	ldrb	r3, [r3, #0]
1000f928:	2b04      	cmp	r3, #4
1000f92a:	d00c      	beq.n	1000f946 <main+0x142>
1000f92c:	4b8b      	ldr	r3, [pc, #556]	; (1000fb5c <main+0x358>)
1000f92e:	781b      	ldrb	r3, [r3, #0]
1000f930:	2b07      	cmp	r3, #7
1000f932:	d008      	beq.n	1000f946 <main+0x142>
1000f934:	4b89      	ldr	r3, [pc, #548]	; (1000fb5c <main+0x358>)
1000f936:	781b      	ldrb	r3, [r3, #0]
1000f938:	2b01      	cmp	r3, #1
1000f93a:	d004      	beq.n	1000f946 <main+0x142>
1000f93c:	4b87      	ldr	r3, [pc, #540]	; (1000fb5c <main+0x358>)
1000f93e:	781b      	ldrb	r3, [r3, #0]
1000f940:	2b05      	cmp	r3, #5
1000f942:	d000      	beq.n	1000f946 <main+0x142>
1000f944:	e08a      	b.n	1000fa5c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000f946:	2000      	movs	r0, #0
1000f948:	4b85      	ldr	r3, [pc, #532]	; (1000fb60 <main+0x35c>)
1000f94a:	4798      	blx	r3
1000f94c:	2800      	cmp	r0, #0
1000f94e:	db00      	blt.n	1000f952 <main+0x14e>
1000f950:	e084      	b.n	1000fa5c <main+0x258>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f952:	4874      	ldr	r0, [pc, #464]	; (1000fb24 <main+0x320>)
1000f954:	4b74      	ldr	r3, [pc, #464]	; (1000fb28 <main+0x324>)
1000f956:	4798      	blx	r3
1000f958:	4882      	ldr	r0, [pc, #520]	; (1000fb64 <main+0x360>)
1000f95a:	4b75      	ldr	r3, [pc, #468]	; (1000fb30 <main+0x32c>)
1000f95c:	4798      	blx	r3
1000f95e:	e07d      	b.n	1000fa5c <main+0x258>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("...BTN1");
1000f960:	4870      	ldr	r0, [pc, #448]	; (1000fb24 <main+0x320>)
1000f962:	4b71      	ldr	r3, [pc, #452]	; (1000fb28 <main+0x324>)
1000f964:	4798      	blx	r3
1000f966:	4880      	ldr	r0, [pc, #512]	; (1000fb68 <main+0x364>)
1000f968:	4b71      	ldr	r3, [pc, #452]	; (1000fb30 <main+0x32c>)
1000f96a:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f96c:	4b7b      	ldr	r3, [pc, #492]	; (1000fb5c <main+0x358>)
1000f96e:	781b      	ldrb	r3, [r3, #0]
1000f970:	2b04      	cmp	r3, #4
1000f972:	d00b      	beq.n	1000f98c <main+0x188>
1000f974:	4b79      	ldr	r3, [pc, #484]	; (1000fb5c <main+0x358>)
1000f976:	781b      	ldrb	r3, [r3, #0]
1000f978:	2b07      	cmp	r3, #7
1000f97a:	d007      	beq.n	1000f98c <main+0x188>
1000f97c:	4b77      	ldr	r3, [pc, #476]	; (1000fb5c <main+0x358>)
1000f97e:	781b      	ldrb	r3, [r3, #0]
1000f980:	2b01      	cmp	r3, #1
1000f982:	d003      	beq.n	1000f98c <main+0x188>
1000f984:	4b75      	ldr	r3, [pc, #468]	; (1000fb5c <main+0x358>)
1000f986:	781b      	ldrb	r3, [r3, #0]
1000f988:	2b05      	cmp	r3, #5
1000f98a:	d167      	bne.n	1000fa5c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000f98c:	2001      	movs	r0, #1
1000f98e:	4b74      	ldr	r3, [pc, #464]	; (1000fb60 <main+0x35c>)
1000f990:	4798      	blx	r3
1000f992:	2800      	cmp	r0, #0
1000f994:	da62      	bge.n	1000fa5c <main+0x258>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f996:	4863      	ldr	r0, [pc, #396]	; (1000fb24 <main+0x320>)
1000f998:	4b63      	ldr	r3, [pc, #396]	; (1000fb28 <main+0x324>)
1000f99a:	4798      	blx	r3
1000f99c:	4871      	ldr	r0, [pc, #452]	; (1000fb64 <main+0x360>)
1000f99e:	4b64      	ldr	r3, [pc, #400]	; (1000fb30 <main+0x32c>)
1000f9a0:	4798      	blx	r3
1000f9a2:	e05b      	b.n	1000fa5c <main+0x258>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("...MPU_DRDY");
1000f9a4:	485f      	ldr	r0, [pc, #380]	; (1000fb24 <main+0x320>)
1000f9a6:	4b60      	ldr	r3, [pc, #384]	; (1000fb28 <main+0x324>)
1000f9a8:	4798      	blx	r3
1000f9aa:	4870      	ldr	r0, [pc, #448]	; (1000fb6c <main+0x368>)
1000f9ac:	4b60      	ldr	r3, [pc, #384]	; (1000fb30 <main+0x32c>)
1000f9ae:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    sms_mpu_poll_data();
1000f9b0:	4b6f      	ldr	r3, [pc, #444]	; (1000fb70 <main+0x36c>)
1000f9b2:	4798      	blx	r3
                //}                    
                break;
1000f9b4:	e052      	b.n	1000fa5c <main+0x258>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("...AON_TIMER");
1000f9b6:	485b      	ldr	r0, [pc, #364]	; (1000fb24 <main+0x320>)
1000f9b8:	4b5b      	ldr	r3, [pc, #364]	; (1000fb28 <main+0x324>)
1000f9ba:	4798      	blx	r3
1000f9bc:	486d      	ldr	r0, [pc, #436]	; (1000fb74 <main+0x370>)
1000f9be:	4b5c      	ldr	r3, [pc, #368]	; (1000fb30 <main+0x32c>)
1000f9c0:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000f9c2:	4b66      	ldr	r3, [pc, #408]	; (1000fb5c <main+0x358>)
1000f9c4:	781b      	ldrb	r3, [r3, #0]
1000f9c6:	2b05      	cmp	r3, #5
1000f9c8:	d00b      	beq.n	1000f9e2 <main+0x1de>
1000f9ca:	4b64      	ldr	r3, [pc, #400]	; (1000fb5c <main+0x358>)
1000f9cc:	781b      	ldrb	r3, [r3, #0]
1000f9ce:	2b07      	cmp	r3, #7
1000f9d0:	d007      	beq.n	1000f9e2 <main+0x1de>
1000f9d2:	4b62      	ldr	r3, [pc, #392]	; (1000fb5c <main+0x358>)
1000f9d4:	781b      	ldrb	r3, [r3, #0]
1000f9d6:	2b03      	cmp	r3, #3
1000f9d8:	d003      	beq.n	1000f9e2 <main+0x1de>
1000f9da:	4b60      	ldr	r3, [pc, #384]	; (1000fb5c <main+0x358>)
1000f9dc:	781b      	ldrb	r3, [r3, #0]
1000f9de:	2b06      	cmp	r3, #6
1000f9e0:	d13c      	bne.n	1000fa5c <main+0x258>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000f9e2:	4b30      	ldr	r3, [pc, #192]	; (1000faa4 <main+0x2a0>)
1000f9e4:	781b      	ldrb	r3, [r3, #0]
1000f9e6:	2b22      	cmp	r3, #34	; 0x22
1000f9e8:	d10a      	bne.n	1000fa00 <main+0x1fc>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000f9ea:	484e      	ldr	r0, [pc, #312]	; (1000fb24 <main+0x320>)
1000f9ec:	4b4e      	ldr	r3, [pc, #312]	; (1000fb28 <main+0x324>)
1000f9ee:	4798      	blx	r3
1000f9f0:	4861      	ldr	r0, [pc, #388]	; (1000fb78 <main+0x374>)
1000f9f2:	4f4f      	ldr	r7, [pc, #316]	; (1000fb30 <main+0x32c>)
1000f9f4:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000f9f6:	4b61      	ldr	r3, [pc, #388]	; (1000fb7c <main+0x378>)
1000f9f8:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000f9fa:	4853      	ldr	r0, [pc, #332]	; (1000fb48 <main+0x344>)
1000f9fc:	47b8      	blx	r7
1000f9fe:	e02d      	b.n	1000fa5c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000fa00:	4b28      	ldr	r3, [pc, #160]	; (1000faa4 <main+0x2a0>)
1000fa02:	781b      	ldrb	r3, [r3, #0]
1000fa04:	2b23      	cmp	r3, #35	; 0x23
1000fa06:	d106      	bne.n	1000fa16 <main+0x212>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000fa08:	4846      	ldr	r0, [pc, #280]	; (1000fb24 <main+0x320>)
1000fa0a:	4b47      	ldr	r3, [pc, #284]	; (1000fb28 <main+0x324>)
1000fa0c:	4798      	blx	r3
1000fa0e:	485c      	ldr	r0, [pc, #368]	; (1000fb80 <main+0x37c>)
1000fa10:	4b47      	ldr	r3, [pc, #284]	; (1000fb30 <main+0x32c>)
1000fa12:	4798      	blx	r3
1000fa14:	e022      	b.n	1000fa5c <main+0x258>
                    }
                    else {
                        sms_timer_aon_disable();
1000fa16:	4b5b      	ldr	r3, [pc, #364]	; (1000fb84 <main+0x380>)
1000fa18:	4798      	blx	r3
                        sms_ble_power_down();
1000fa1a:	4b5b      	ldr	r3, [pc, #364]	; (1000fb88 <main+0x384>)
1000fa1c:	4798      	blx	r3
1000fa1e:	e01d      	b.n	1000fa5c <main+0x258>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("...DUALTIMER1");
1000fa20:	4840      	ldr	r0, [pc, #256]	; (1000fb24 <main+0x320>)
1000fa22:	4b41      	ldr	r3, [pc, #260]	; (1000fb28 <main+0x324>)
1000fa24:	4798      	blx	r3
1000fa26:	4859      	ldr	r0, [pc, #356]	; (1000fb8c <main+0x388>)
1000fa28:	4b41      	ldr	r3, [pc, #260]	; (1000fb30 <main+0x32c>)
1000fa2a:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000fa2c:	2000      	movs	r0, #0
1000fa2e:	4b58      	ldr	r3, [pc, #352]	; (1000fb90 <main+0x38c>)
1000fa30:	4798      	blx	r3
                sms_dualtimer1_fn();
1000fa32:	4b58      	ldr	r3, [pc, #352]	; (1000fb94 <main+0x390>)
1000fa34:	4798      	blx	r3
                break;
1000fa36:	e011      	b.n	1000fa5c <main+0x258>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("...DUALTIMER2");
1000fa38:	483a      	ldr	r0, [pc, #232]	; (1000fb24 <main+0x320>)
1000fa3a:	4b3b      	ldr	r3, [pc, #236]	; (1000fb28 <main+0x324>)
1000fa3c:	4798      	blx	r3
1000fa3e:	4856      	ldr	r0, [pc, #344]	; (1000fb98 <main+0x394>)
1000fa40:	4b3b      	ldr	r3, [pc, #236]	; (1000fb30 <main+0x32c>)
1000fa42:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000fa44:	2001      	movs	r0, #1
1000fa46:	4b52      	ldr	r3, [pc, #328]	; (1000fb90 <main+0x38c>)
1000fa48:	4798      	blx	r3
                sms_dualtimer2_fn();
1000fa4a:	4b54      	ldr	r3, [pc, #336]	; (1000fb9c <main+0x398>)
1000fa4c:	4798      	blx	r3
                break;
1000fa4e:	e005      	b.n	1000fa5c <main+0x258>
                
                default:
                DBG_LOG_DEV("...??");
1000fa50:	4834      	ldr	r0, [pc, #208]	; (1000fb24 <main+0x320>)
1000fa52:	4b35      	ldr	r3, [pc, #212]	; (1000fb28 <main+0x324>)
1000fa54:	4798      	blx	r3
1000fa56:	4852      	ldr	r0, [pc, #328]	; (1000fba0 <main+0x39c>)
1000fa58:	4b35      	ldr	r3, [pc, #212]	; (1000fb30 <main+0x32c>)
1000fa5a:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000fa5c:	4831      	ldr	r0, [pc, #196]	; (1000fb24 <main+0x320>)
1000fa5e:	4b32      	ldr	r3, [pc, #200]	; (1000fb28 <main+0x324>)
1000fa60:	4798      	blx	r3
1000fa62:	4850      	ldr	r0, [pc, #320]	; (1000fba4 <main+0x3a0>)
1000fa64:	4f32      	ldr	r7, [pc, #200]	; (1000fb30 <main+0x32c>)
1000fa66:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000fa68:	2100      	movs	r1, #0
1000fa6a:	2000      	movs	r0, #0
1000fa6c:	4b2b      	ldr	r3, [pc, #172]	; (1000fb1c <main+0x318>)
1000fa6e:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000fa70:	4835      	ldr	r0, [pc, #212]	; (1000fb48 <main+0x344>)
1000fa72:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000fa74:	4b31      	ldr	r3, [pc, #196]	; (1000fb3c <main+0x338>)
1000fa76:	2200      	movs	r2, #0
1000fa78:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000fa7a:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000fa7c:	4b4a      	ldr	r3, [pc, #296]	; (1000fba8 <main+0x3a4>)
1000fa7e:	781b      	ldrb	r3, [r3, #0]
1000fa80:	2b00      	cmp	r3, #0
1000fa82:	d00b      	beq.n	1000fa9c <main+0x298>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000fa84:	4827      	ldr	r0, [pc, #156]	; (1000fb24 <main+0x320>)
1000fa86:	4b28      	ldr	r3, [pc, #160]	; (1000fb28 <main+0x324>)
1000fa88:	4798      	blx	r3
1000fa8a:	4848      	ldr	r0, [pc, #288]	; (1000fbac <main+0x3a8>)
1000fa8c:	4f28      	ldr	r7, [pc, #160]	; (1000fb30 <main+0x32c>)
1000fa8e:	47b8      	blx	r7
            ulp_active = true;
1000fa90:	2201      	movs	r2, #1
1000fa92:	4b2b      	ldr	r3, [pc, #172]	; (1000fb40 <main+0x33c>)
1000fa94:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000fa96:	4846      	ldr	r0, [pc, #280]	; (1000fbb0 <main+0x3ac>)
1000fa98:	47b8      	blx	r7
1000fa9a:	e70c      	b.n	1000f8b6 <main+0xb2>
        }            
        else {
            ulp_active = false;
1000fa9c:	2200      	movs	r2, #0
1000fa9e:	4b28      	ldr	r3, [pc, #160]	; (1000fb40 <main+0x33c>)
1000faa0:	701a      	strb	r2, [r3, #0]
1000faa2:	e708      	b.n	1000f8b6 <main+0xb2>
1000faa4:	1001a16c 	.word	0x1001a16c
1000faa8:	1000eff5 	.word	0x1000eff5
1000faac:	1000c57d 	.word	0x1000c57d
1000fab0:	1000ece9 	.word	0x1000ece9
1000fab4:	1000f549 	.word	0x1000f549
1000fab8:	1000f795 	.word	0x1000f795
1000fabc:	1000b411 	.word	0x1000b411
1000fac0:	100080e9 	.word	0x100080e9
1000fac4:	1000a49d 	.word	0x1000a49d
1000fac8:	1000adf1 	.word	0x1000adf1
1000facc:	1000aa3d 	.word	0x1000aa3d
1000fad0:	1000b2c9 	.word	0x1000b2c9
1000fad4:	1000abc9 	.word	0x1000abc9
1000fad8:	1001a0d0 	.word	0x1001a0d0
1000fadc:	1000a8c5 	.word	0x1000a8c5
1000fae0:	1000e35d 	.word	0x1000e35d
1000fae4:	1000a85d 	.word	0x1000a85d
1000fae8:	1000b261 	.word	0x1000b261
1000faec:	1000f741 	.word	0x1000f741
1000faf0:	1000f58d 	.word	0x1000f58d
1000faf4:	1000b4d1 	.word	0x1000b4d1
1000faf8:	1000b44d 	.word	0x1000b44d
1000fafc:	1000b4f1 	.word	0x1000b4f1
1000fb00:	1000a551 	.word	0x1000a551
1000fb04:	1000ac49 	.word	0x1000ac49
1000fb08:	10016ab4 	.word	0x10016ab4
1000fb0c:	1000e28d 	.word	0x1000e28d
1000fb10:	10016b00 	.word	0x10016b00
1000fb14:	1000f735 	.word	0x1000f735
1000fb18:	1000ec59 	.word	0x1000ec59
1000fb1c:	1000a811 	.word	0x1000a811
1000fb20:	1000ac61 	.word	0x1000ac61
1000fb24:	100164f8 	.word	0x100164f8
1000fb28:	10015351 	.word	0x10015351
1000fb2c:	100180d4 	.word	0x100180d4
1000fb30:	10015231 	.word	0x10015231
1000fb34:	1000a971 	.word	0x1000a971
1000fb38:	1000eb55 	.word	0x1000eb55
1000fb3c:	1001a154 	.word	0x1001a154
1000fb40:	1001a173 	.word	0x1001a173
1000fb44:	100180f0 	.word	0x100180f0
1000fb48:	10018108 	.word	0x10018108
1000fb4c:	10018110 	.word	0x10018110
1000fb50:	100180b8 	.word	0x100180b8
1000fb54:	10018134 	.word	0x10018134
1000fb58:	10018144 	.word	0x10018144
1000fb5c:	1001a054 	.word	0x1001a054
1000fb60:	1000a5cd 	.word	0x1000a5cd
1000fb64:	1001814c 	.word	0x1001814c
1000fb68:	10018170 	.word	0x10018170
1000fb6c:	10018178 	.word	0x10018178
1000fb70:	1000ad41 	.word	0x1000ad41
1000fb74:	10018184 	.word	0x10018184
1000fb78:	10018194 	.word	0x10018194
1000fb7c:	1000b1f1 	.word	0x1000b1f1
1000fb80:	100181b8 	.word	0x100181b8
1000fb84:	1000b3c5 	.word	0x1000b3c5
1000fb88:	10009f39 	.word	0x10009f39
1000fb8c:	100181f0 	.word	0x100181f0
1000fb90:	1000b4c5 	.word	0x1000b4c5
1000fb94:	1000b511 	.word	0x1000b511
1000fb98:	10018200 	.word	0x10018200
1000fb9c:	1000b811 	.word	0x1000b811
1000fba0:	10018210 	.word	0x10018210
1000fba4:	10018218 	.word	0x10018218
1000fba8:	1001a055 	.word	0x1001a055
1000fbac:	1001823c 	.word	0x1001823c
1000fbb0:	10018250 	.word	0x10018250

1000fbb4 <internal_event_post>:
1000fbb4:	b570      	push	{r4, r5, r6, lr}
1000fbb6:	4d12      	ldr	r5, [pc, #72]	; (1000fc00 <internal_event_post+0x4c>)
1000fbb8:	682c      	ldr	r4, [r5, #0]
1000fbba:	2c00      	cmp	r4, #0
1000fbbc:	d014      	beq.n	1000fbe8 <internal_event_post+0x34>
1000fbbe:	6826      	ldr	r6, [r4, #0]
1000fbc0:	60e2      	str	r2, [r4, #12]
1000fbc2:	602e      	str	r6, [r5, #0]
1000fbc4:	2500      	movs	r5, #0
1000fbc6:	4a0f      	ldr	r2, [pc, #60]	; (1000fc04 <internal_event_post+0x50>)
1000fbc8:	8123      	strh	r3, [r4, #8]
1000fbca:	6813      	ldr	r3, [r2, #0]
1000fbcc:	6025      	str	r5, [r4, #0]
1000fbce:	80a0      	strh	r0, [r4, #4]
1000fbd0:	80e1      	strh	r1, [r4, #6]
1000fbd2:	42ab      	cmp	r3, r5
1000fbd4:	d101      	bne.n	1000fbda <internal_event_post+0x26>
1000fbd6:	6014      	str	r4, [r2, #0]
1000fbd8:	e011      	b.n	1000fbfe <internal_event_post+0x4a>
1000fbda:	681a      	ldr	r2, [r3, #0]
1000fbdc:	2a00      	cmp	r2, #0
1000fbde:	d001      	beq.n	1000fbe4 <internal_event_post+0x30>
1000fbe0:	1c13      	adds	r3, r2, #0
1000fbe2:	e7fa      	b.n	1000fbda <internal_event_post+0x26>
1000fbe4:	601c      	str	r4, [r3, #0]
1000fbe6:	e00a      	b.n	1000fbfe <internal_event_post+0x4a>
1000fbe8:	b2c4      	uxtb	r4, r0
1000fbea:	2c00      	cmp	r4, #0
1000fbec:	d107      	bne.n	1000fbfe <internal_event_post+0x4a>
1000fbee:	4c06      	ldr	r4, [pc, #24]	; (1000fc08 <internal_event_post+0x54>)
1000fbf0:	60e2      	str	r2, [r4, #12]
1000fbf2:	2201      	movs	r2, #1
1000fbf4:	8123      	strh	r3, [r4, #8]
1000fbf6:	4b05      	ldr	r3, [pc, #20]	; (1000fc0c <internal_event_post+0x58>)
1000fbf8:	80a0      	strh	r0, [r4, #4]
1000fbfa:	80e1      	strh	r1, [r4, #6]
1000fbfc:	701a      	strb	r2, [r3, #0]
1000fbfe:	bd70      	pop	{r4, r5, r6, pc}
1000fc00:	10019f04 	.word	0x10019f04
1000fc04:	10019f00 	.word	0x10019f00
1000fc08:	10019eec 	.word	0x10019eec
1000fc0c:	10019efc 	.word	0x10019efc

1000fc10 <internal_event_init>:
1000fc10:	b510      	push	{r4, lr}
1000fc12:	4b08      	ldr	r3, [pc, #32]	; (1000fc34 <internal_event_init+0x24>)
1000fc14:	0900      	lsrs	r0, r0, #4
1000fc16:	0100      	lsls	r0, r0, #4
1000fc18:	681a      	ldr	r2, [r3, #0]
1000fc1a:	1808      	adds	r0, r1, r0
1000fc1c:	4281      	cmp	r1, r0
1000fc1e:	d003      	beq.n	1000fc28 <internal_event_init+0x18>
1000fc20:	600a      	str	r2, [r1, #0]
1000fc22:	1c0a      	adds	r2, r1, #0
1000fc24:	3110      	adds	r1, #16
1000fc26:	e7f9      	b.n	1000fc1c <internal_event_init+0xc>
1000fc28:	601a      	str	r2, [r3, #0]
1000fc2a:	2200      	movs	r2, #0
1000fc2c:	4b02      	ldr	r3, [pc, #8]	; (1000fc38 <internal_event_init+0x28>)
1000fc2e:	601a      	str	r2, [r3, #0]
1000fc30:	bd10      	pop	{r4, pc}
1000fc32:	46c0      	nop			; (mov r8, r8)
1000fc34:	10019f04 	.word	0x10019f04
1000fc38:	10019f00 	.word	0x10019f00

1000fc3c <special_events_handler>:
1000fc3c:	b538      	push	{r3, r4, r5, lr}
1000fc3e:	4c1b      	ldr	r4, [pc, #108]	; (1000fcac <special_events_handler+0x70>)
1000fc40:	1c03      	adds	r3, r0, #0
1000fc42:	8825      	ldrh	r5, [r4, #0]
1000fc44:	1c08      	adds	r0, r1, #0
1000fc46:	1c21      	adds	r1, r4, #0
1000fc48:	429d      	cmp	r5, r3
1000fc4a:	d107      	bne.n	1000fc5c <special_events_handler+0x20>
1000fc4c:	88a5      	ldrh	r5, [r4, #4]
1000fc4e:	4285      	cmp	r5, r0
1000fc50:	d104      	bne.n	1000fc5c <special_events_handler+0x20>
1000fc52:	2301      	movs	r3, #1
1000fc54:	425b      	negs	r3, r3
1000fc56:	8023      	strh	r3, [r4, #0]
1000fc58:	60a2      	str	r2, [r4, #8]
1000fc5a:	e009      	b.n	1000fc70 <special_events_handler+0x34>
1000fc5c:	884c      	ldrh	r4, [r1, #2]
1000fc5e:	429c      	cmp	r4, r3
1000fc60:	d10a      	bne.n	1000fc78 <special_events_handler+0x3c>
1000fc62:	888c      	ldrh	r4, [r1, #4]
1000fc64:	4284      	cmp	r4, r0
1000fc66:	d107      	bne.n	1000fc78 <special_events_handler+0x3c>
1000fc68:	2301      	movs	r3, #1
1000fc6a:	425b      	negs	r3, r3
1000fc6c:	804b      	strh	r3, [r1, #2]
1000fc6e:	608a      	str	r2, [r1, #8]
1000fc70:	4b0f      	ldr	r3, [pc, #60]	; (1000fcb0 <special_events_handler+0x74>)
1000fc72:	4798      	blx	r3
1000fc74:	2001      	movs	r0, #1
1000fc76:	e017      	b.n	1000fca8 <special_events_handler+0x6c>
1000fc78:	490e      	ldr	r1, [pc, #56]	; (1000fcb4 <special_events_handler+0x78>)
1000fc7a:	428b      	cmp	r3, r1
1000fc7c:	d00e      	beq.n	1000fc9c <special_events_handler+0x60>
1000fc7e:	490e      	ldr	r1, [pc, #56]	; (1000fcb8 <special_events_handler+0x7c>)
1000fc80:	428b      	cmp	r3, r1
1000fc82:	d007      	beq.n	1000fc94 <special_events_handler+0x58>
1000fc84:	490d      	ldr	r1, [pc, #52]	; (1000fcbc <special_events_handler+0x80>)
1000fc86:	2000      	movs	r0, #0
1000fc88:	428b      	cmp	r3, r1
1000fc8a:	d10d      	bne.n	1000fca8 <special_events_handler+0x6c>
1000fc8c:	1c10      	adds	r0, r2, #0
1000fc8e:	4b0c      	ldr	r3, [pc, #48]	; (1000fcc0 <special_events_handler+0x84>)
1000fc90:	4798      	blx	r3
1000fc92:	e7ef      	b.n	1000fc74 <special_events_handler+0x38>
1000fc94:	1c11      	adds	r1, r2, #0
1000fc96:	4b0b      	ldr	r3, [pc, #44]	; (1000fcc4 <special_events_handler+0x88>)
1000fc98:	2200      	movs	r2, #0
1000fc9a:	e002      	b.n	1000fca2 <special_events_handler+0x66>
1000fc9c:	1c11      	adds	r1, r2, #0
1000fc9e:	2200      	movs	r2, #0
1000fca0:	4b09      	ldr	r3, [pc, #36]	; (1000fcc8 <special_events_handler+0x8c>)
1000fca2:	4798      	blx	r3
1000fca4:	4243      	negs	r3, r0
1000fca6:	4158      	adcs	r0, r3
1000fca8:	bd38      	pop	{r3, r4, r5, pc}
1000fcaa:	46c0      	nop			; (mov r8, r8)
1000fcac:	1001ae08 	.word	0x1001ae08
1000fcb0:	10011699 	.word	0x10011699
1000fcb4:	00000e13 	.word	0x00000e13
1000fcb8:	00000e15 	.word	0x00000e15
1000fcbc:	00000e01 	.word	0x00000e01
1000fcc0:	10011a09 	.word	0x10011a09
1000fcc4:	10011bc9 	.word	0x10011bc9
1000fcc8:	10011ca1 	.word	0x10011ca1

1000fccc <at_ble_event_get>:
1000fccc:	2300      	movs	r3, #0
1000fcce:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcd0:	b087      	sub	sp, #28
1000fcd2:	9204      	str	r2, [sp, #16]
1000fcd4:	7003      	strb	r3, [r0, #0]
1000fcd6:	9b04      	ldr	r3, [sp, #16]
1000fcd8:	9003      	str	r0, [sp, #12]
1000fcda:	3b01      	subs	r3, #1
1000fcdc:	1c0d      	adds	r5, r1, #0
1000fcde:	9305      	str	r3, [sp, #20]
1000fce0:	3303      	adds	r3, #3
1000fce2:	d802      	bhi.n	1000fcea <at_ble_event_get+0x1e>
1000fce4:	9804      	ldr	r0, [sp, #16]
1000fce6:	4bae      	ldr	r3, [pc, #696]	; (1000ffa0 <at_ble_event_get+0x2d4>)
1000fce8:	4798      	blx	r3
1000fcea:	9b05      	ldr	r3, [sp, #20]
1000fcec:	4cad      	ldr	r4, [pc, #692]	; (1000ffa4 <at_ble_event_get+0x2d8>)
1000fcee:	3303      	adds	r3, #3
1000fcf0:	d902      	bls.n	1000fcf8 <at_ble_event_get+0x2c>
1000fcf2:	2300      	movs	r3, #0
1000fcf4:	9302      	str	r3, [sp, #8]
1000fcf6:	e015      	b.n	1000fd24 <at_ble_event_get+0x58>
1000fcf8:	2300      	movs	r3, #0
1000fcfa:	9302      	str	r3, [sp, #8]
1000fcfc:	6823      	ldr	r3, [r4, #0]
1000fcfe:	2b00      	cmp	r3, #0
1000fd00:	d113      	bne.n	1000fd2a <at_ble_event_get+0x5e>
1000fd02:	9b02      	ldr	r3, [sp, #8]
1000fd04:	2bd0      	cmp	r3, #208	; 0xd0
1000fd06:	d100      	bne.n	1000fd0a <at_ble_event_get+0x3e>
1000fd08:	e2da      	b.n	100102c0 <at_ble_event_get+0x5f4>
1000fd0a:	9804      	ldr	r0, [sp, #16]
1000fd0c:	4ba6      	ldr	r3, [pc, #664]	; (1000ffa8 <at_ble_event_get+0x2dc>)
1000fd0e:	4798      	blx	r3
1000fd10:	9002      	str	r0, [sp, #8]
1000fd12:	2802      	cmp	r0, #2
1000fd14:	d1f2      	bne.n	1000fcfc <at_ble_event_get+0x30>
1000fd16:	e03f      	b.n	1000fd98 <at_ble_event_get+0xcc>
1000fd18:	9804      	ldr	r0, [sp, #16]
1000fd1a:	4ba3      	ldr	r3, [pc, #652]	; (1000ffa8 <at_ble_event_get+0x2dc>)
1000fd1c:	4798      	blx	r3
1000fd1e:	9002      	str	r0, [sp, #8]
1000fd20:	2802      	cmp	r0, #2
1000fd22:	d039      	beq.n	1000fd98 <at_ble_event_get+0xcc>
1000fd24:	6823      	ldr	r3, [r4, #0]
1000fd26:	2b00      	cmp	r3, #0
1000fd28:	d0f6      	beq.n	1000fd18 <at_ble_event_get+0x4c>
1000fd2a:	9b02      	ldr	r3, [sp, #8]
1000fd2c:	2bd0      	cmp	r3, #208	; 0xd0
1000fd2e:	d100      	bne.n	1000fd32 <at_ble_event_get+0x66>
1000fd30:	e2c6      	b.n	100102c0 <at_ble_event_get+0x5f4>
1000fd32:	9b02      	ldr	r3, [sp, #8]
1000fd34:	3b03      	subs	r3, #3
1000fd36:	1e5a      	subs	r2, r3, #1
1000fd38:	4193      	sbcs	r3, r2
1000fd3a:	9a02      	ldr	r2, [sp, #8]
1000fd3c:	425b      	negs	r3, r3
1000fd3e:	401a      	ands	r2, r3
1000fd40:	6823      	ldr	r3, [r4, #0]
1000fd42:	9202      	str	r2, [sp, #8]
1000fd44:	2b00      	cmp	r3, #0
1000fd46:	d100      	bne.n	1000fd4a <at_ble_event_get+0x7e>
1000fd48:	e2c2      	b.n	100102d0 <at_ble_event_get+0x604>
1000fd4a:	681a      	ldr	r2, [r3, #0]
1000fd4c:	68de      	ldr	r6, [r3, #12]
1000fd4e:	6022      	str	r2, [r4, #0]
1000fd50:	88da      	ldrh	r2, [r3, #6]
1000fd52:	9201      	str	r2, [sp, #4]
1000fd54:	4a95      	ldr	r2, [pc, #596]	; (1000ffac <at_ble_event_get+0x2e0>)
1000fd56:	889c      	ldrh	r4, [r3, #4]
1000fd58:	6811      	ldr	r1, [r2, #0]
1000fd5a:	6013      	str	r3, [r2, #0]
1000fd5c:	6019      	str	r1, [r3, #0]
1000fd5e:	4b94      	ldr	r3, [pc, #592]	; (1000ffb0 <at_ble_event_get+0x2e4>)
1000fd60:	781b      	ldrb	r3, [r3, #0]
1000fd62:	2b01      	cmp	r3, #1
1000fd64:	d10f      	bne.n	1000fd86 <at_ble_event_get+0xba>
1000fd66:	4b93      	ldr	r3, [pc, #588]	; (1000ffb4 <at_ble_event_get+0x2e8>)
1000fd68:	4a92      	ldr	r2, [pc, #584]	; (1000ffb4 <at_ble_event_get+0x2e8>)
1000fd6a:	8898      	ldrh	r0, [r3, #4]
1000fd6c:	88d9      	ldrh	r1, [r3, #6]
1000fd6e:	68d2      	ldr	r2, [r2, #12]
1000fd70:	891b      	ldrh	r3, [r3, #8]
1000fd72:	4f91      	ldr	r7, [pc, #580]	; (1000ffb8 <at_ble_event_get+0x2ec>)
1000fd74:	47b8      	blx	r7
1000fd76:	2210      	movs	r2, #16
1000fd78:	4b90      	ldr	r3, [pc, #576]	; (1000ffbc <at_ble_event_get+0x2f0>)
1000fd7a:	488e      	ldr	r0, [pc, #568]	; (1000ffb4 <at_ble_event_get+0x2e8>)
1000fd7c:	2100      	movs	r1, #0
1000fd7e:	4798      	blx	r3
1000fd80:	2300      	movs	r3, #0
1000fd82:	4a8b      	ldr	r2, [pc, #556]	; (1000ffb0 <at_ble_event_get+0x2e4>)
1000fd84:	7013      	strb	r3, [r2, #0]
1000fd86:	9b02      	ldr	r3, [sp, #8]
1000fd88:	2b00      	cmp	r3, #0
1000fd8a:	d114      	bne.n	1000fdb6 <at_ble_event_get+0xea>
1000fd8c:	4b8c      	ldr	r3, [pc, #560]	; (1000ffc0 <at_ble_event_get+0x2f4>)
1000fd8e:	429c      	cmp	r4, r3
1000fd90:	d009      	beq.n	1000fda6 <at_ble_event_get+0xda>
1000fd92:	4b8c      	ldr	r3, [pc, #560]	; (1000ffc4 <at_ble_event_get+0x2f8>)
1000fd94:	429c      	cmp	r4, r3
1000fd96:	d127      	bne.n	1000fde8 <at_ble_event_get+0x11c>
1000fd98:	233a      	movs	r3, #58	; 0x3a
1000fd9a:	9a03      	ldr	r2, [sp, #12]
1000fd9c:	7013      	strb	r3, [r2, #0]
1000fd9e:	2300      	movs	r3, #0
1000fda0:	9302      	str	r3, [sp, #8]
1000fda2:	1c1d      	adds	r5, r3, #0
1000fda4:	e007      	b.n	1000fdb6 <at_ble_event_get+0xea>
1000fda6:	9b01      	ldr	r3, [sp, #4]
1000fda8:	42a3      	cmp	r3, r4
1000fdaa:	d000      	beq.n	1000fdae <at_ble_event_get+0xe2>
1000fdac:	e28a      	b.n	100102c4 <at_ble_event_get+0x5f8>
1000fdae:	2338      	movs	r3, #56	; 0x38
1000fdb0:	9a03      	ldr	r2, [sp, #12]
1000fdb2:	7013      	strb	r3, [r2, #0]
1000fdb4:	602e      	str	r6, [r5, #0]
1000fdb6:	9b03      	ldr	r3, [sp, #12]
1000fdb8:	781b      	ldrb	r3, [r3, #0]
1000fdba:	2b3b      	cmp	r3, #59	; 0x3b
1000fdbc:	d101      	bne.n	1000fdc2 <at_ble_event_get+0xf6>
1000fdbe:	4b82      	ldr	r3, [pc, #520]	; (1000ffc8 <at_ble_event_get+0x2fc>)
1000fdc0:	4798      	blx	r3
1000fdc2:	9b03      	ldr	r3, [sp, #12]
1000fdc4:	781b      	ldrb	r3, [r3, #0]
1000fdc6:	2b3b      	cmp	r3, #59	; 0x3b
1000fdc8:	d003      	beq.n	1000fdd2 <at_ble_event_get+0x106>
1000fdca:	9b05      	ldr	r3, [sp, #20]
1000fdcc:	3303      	adds	r3, #3
1000fdce:	d904      	bls.n	1000fdda <at_ble_event_get+0x10e>
1000fdd0:	e283      	b.n	100102da <at_ble_event_get+0x60e>
1000fdd2:	9b02      	ldr	r3, [sp, #8]
1000fdd4:	2b00      	cmp	r3, #0
1000fdd6:	d088      	beq.n	1000fcea <at_ble_event_get+0x1e>
1000fdd8:	e7f7      	b.n	1000fdca <at_ble_event_get+0xfe>
1000fdda:	9b02      	ldr	r3, [sp, #8]
1000fddc:	2bd0      	cmp	r3, #208	; 0xd0
1000fdde:	d100      	bne.n	1000fde2 <at_ble_event_get+0x116>
1000fde0:	e27b      	b.n	100102da <at_ble_event_get+0x60e>
1000fde2:	4b7a      	ldr	r3, [pc, #488]	; (1000ffcc <at_ble_event_get+0x300>)
1000fde4:	4798      	blx	r3
1000fde6:	e278      	b.n	100102da <at_ble_event_get+0x60e>
1000fde8:	9b01      	ldr	r3, [sp, #4]
1000fdea:	2bbb      	cmp	r3, #187	; 0xbb
1000fdec:	d125      	bne.n	1000fe3a <at_ble_event_get+0x16e>
1000fdee:	2cbb      	cmp	r4, #187	; 0xbb
1000fdf0:	d123      	bne.n	1000fe3a <at_ble_event_get+0x16e>
1000fdf2:	466b      	mov	r3, sp
1000fdf4:	891b      	ldrh	r3, [r3, #8]
1000fdf6:	80ab      	strh	r3, [r5, #4]
1000fdf8:	78b3      	ldrb	r3, [r6, #2]
1000fdfa:	7872      	ldrb	r2, [r6, #1]
1000fdfc:	78f0      	ldrb	r0, [r6, #3]
1000fdfe:	021b      	lsls	r3, r3, #8
1000fe00:	4313      	orrs	r3, r2
1000fe02:	7971      	ldrb	r1, [r6, #5]
1000fe04:	7932      	ldrb	r2, [r6, #4]
1000fe06:	70a8      	strb	r0, [r5, #2]
1000fe08:	4871      	ldr	r0, [pc, #452]	; (1000ffd0 <at_ble_event_get+0x304>)
1000fe0a:	802b      	strh	r3, [r5, #0]
1000fe0c:	4283      	cmp	r3, r0
1000fe0e:	d806      	bhi.n	1000fe1e <at_ble_event_get+0x152>
1000fe10:	4a70      	ldr	r2, [pc, #448]	; (1000ffd4 <at_ble_event_get+0x308>)
1000fe12:	4293      	cmp	r3, r2
1000fe14:	d20b      	bcs.n	1000fe2e <at_ble_event_get+0x162>
1000fe16:	4a70      	ldr	r2, [pc, #448]	; (1000ffd8 <at_ble_event_get+0x30c>)
1000fe18:	4293      	cmp	r3, r2
1000fe1a:	d008      	beq.n	1000fe2e <at_ble_event_get+0x162>
1000fe1c:	e009      	b.n	1000fe32 <at_ble_event_get+0x166>
1000fe1e:	486f      	ldr	r0, [pc, #444]	; (1000ffdc <at_ble_event_get+0x310>)
1000fe20:	4283      	cmp	r3, r0
1000fe22:	d106      	bne.n	1000fe32 <at_ble_event_get+0x166>
1000fe24:	020b      	lsls	r3, r1, #8
1000fe26:	4313      	orrs	r3, r2
1000fe28:	80ab      	strh	r3, [r5, #4]
1000fe2a:	2337      	movs	r3, #55	; 0x37
1000fe2c:	e002      	b.n	1000fe34 <at_ble_event_get+0x168>
1000fe2e:	2336      	movs	r3, #54	; 0x36
1000fe30:	e000      	b.n	1000fe34 <at_ble_event_get+0x168>
1000fe32:	2300      	movs	r3, #0
1000fe34:	9a03      	ldr	r2, [sp, #12]
1000fe36:	7013      	strb	r3, [r2, #0]
1000fe38:	e7bd      	b.n	1000fdb6 <at_ble_event_get+0xea>
1000fe3a:	4b69      	ldr	r3, [pc, #420]	; (1000ffe0 <at_ble_event_get+0x314>)
1000fe3c:	429c      	cmp	r4, r3
1000fe3e:	d100      	bne.n	1000fe42 <at_ble_event_get+0x176>
1000fe40:	e144      	b.n	100100cc <at_ble_event_get+0x400>
1000fe42:	d865      	bhi.n	1000ff10 <at_ble_event_get+0x244>
1000fe44:	4b67      	ldr	r3, [pc, #412]	; (1000ffe4 <at_ble_event_get+0x318>)
1000fe46:	429c      	cmp	r4, r3
1000fe48:	d100      	bne.n	1000fe4c <at_ble_event_get+0x180>
1000fe4a:	e1d5      	b.n	100101f8 <at_ble_event_get+0x52c>
1000fe4c:	d82f      	bhi.n	1000feae <at_ble_event_get+0x1e2>
1000fe4e:	4b66      	ldr	r3, [pc, #408]	; (1000ffe8 <at_ble_event_get+0x31c>)
1000fe50:	429c      	cmp	r4, r3
1000fe52:	d100      	bne.n	1000fe56 <at_ble_event_get+0x18a>
1000fe54:	e1e0      	b.n	10010218 <at_ble_event_get+0x54c>
1000fe56:	d813      	bhi.n	1000fe80 <at_ble_event_get+0x1b4>
1000fe58:	4b64      	ldr	r3, [pc, #400]	; (1000ffec <at_ble_event_get+0x320>)
1000fe5a:	429c      	cmp	r4, r3
1000fe5c:	d100      	bne.n	1000fe60 <at_ble_event_get+0x194>
1000fe5e:	e1a3      	b.n	100101a8 <at_ble_event_get+0x4dc>
1000fe60:	d804      	bhi.n	1000fe6c <at_ble_event_get+0x1a0>
1000fe62:	2638      	movs	r6, #56	; 0x38
1000fe64:	42b4      	cmp	r4, r6
1000fe66:	d100      	bne.n	1000fe6a <at_ble_event_get+0x19e>
1000fe68:	e225      	b.n	100102b6 <at_ble_event_get+0x5ea>
1000fe6a:	e117      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fe6c:	4b60      	ldr	r3, [pc, #384]	; (1000fff0 <at_ble_event_get+0x324>)
1000fe6e:	429c      	cmp	r4, r3
1000fe70:	d100      	bne.n	1000fe74 <at_ble_event_get+0x1a8>
1000fe72:	e19f      	b.n	100101b4 <at_ble_event_get+0x4e8>
1000fe74:	33fe      	adds	r3, #254	; 0xfe
1000fe76:	33ff      	adds	r3, #255	; 0xff
1000fe78:	429c      	cmp	r4, r3
1000fe7a:	d100      	bne.n	1000fe7e <at_ble_event_get+0x1b2>
1000fe7c:	e1d3      	b.n	10010226 <at_ble_event_get+0x55a>
1000fe7e:	e10d      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fe80:	4b5c      	ldr	r3, [pc, #368]	; (1000fff4 <at_ble_event_get+0x328>)
1000fe82:	429c      	cmp	r4, r3
1000fe84:	d100      	bne.n	1000fe88 <at_ble_event_get+0x1bc>
1000fe86:	e1a9      	b.n	100101dc <at_ble_event_get+0x510>
1000fe88:	d808      	bhi.n	1000fe9c <at_ble_event_get+0x1d0>
1000fe8a:	4b5b      	ldr	r3, [pc, #364]	; (1000fff8 <at_ble_event_get+0x32c>)
1000fe8c:	429c      	cmp	r4, r3
1000fe8e:	d100      	bne.n	1000fe92 <at_ble_event_get+0x1c6>
1000fe90:	e196      	b.n	100101c0 <at_ble_event_get+0x4f4>
1000fe92:	4b5a      	ldr	r3, [pc, #360]	; (1000fffc <at_ble_event_get+0x330>)
1000fe94:	429c      	cmp	r4, r3
1000fe96:	d100      	bne.n	1000fe9a <at_ble_event_get+0x1ce>
1000fe98:	e199      	b.n	100101ce <at_ble_event_get+0x502>
1000fe9a:	e0ff      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fe9c:	4b58      	ldr	r3, [pc, #352]	; (10010000 <at_ble_event_get+0x334>)
1000fe9e:	429c      	cmp	r4, r3
1000fea0:	d100      	bne.n	1000fea4 <at_ble_event_get+0x1d8>
1000fea2:	e1a2      	b.n	100101ea <at_ble_event_get+0x51e>
1000fea4:	4b57      	ldr	r3, [pc, #348]	; (10010004 <at_ble_event_get+0x338>)
1000fea6:	429c      	cmp	r4, r3
1000fea8:	d100      	bne.n	1000feac <at_ble_event_get+0x1e0>
1000feaa:	e1d4      	b.n	10010256 <at_ble_event_get+0x58a>
1000feac:	e0f6      	b.n	1001009c <at_ble_event_get+0x3d0>
1000feae:	4b56      	ldr	r3, [pc, #344]	; (10010008 <at_ble_event_get+0x33c>)
1000feb0:	429c      	cmp	r4, r3
1000feb2:	d100      	bne.n	1000feb6 <at_ble_event_get+0x1ea>
1000feb4:	e1c8      	b.n	10010248 <at_ble_event_get+0x57c>
1000feb6:	d812      	bhi.n	1000fede <at_ble_event_get+0x212>
1000feb8:	4b54      	ldr	r3, [pc, #336]	; (1001000c <at_ble_event_get+0x340>)
1000feba:	429c      	cmp	r4, r3
1000febc:	d100      	bne.n	1000fec0 <at_ble_event_get+0x1f4>
1000febe:	e1d1      	b.n	10010264 <at_ble_event_get+0x598>
1000fec0:	d804      	bhi.n	1000fecc <at_ble_event_get+0x200>
1000fec2:	4b53      	ldr	r3, [pc, #332]	; (10010010 <at_ble_event_get+0x344>)
1000fec4:	429c      	cmp	r4, r3
1000fec6:	d100      	bne.n	1000feca <at_ble_event_get+0x1fe>
1000fec8:	e19b      	b.n	10010202 <at_ble_event_get+0x536>
1000feca:	e0e7      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fecc:	4b51      	ldr	r3, [pc, #324]	; (10010014 <at_ble_event_get+0x348>)
1000fece:	429c      	cmp	r4, r3
1000fed0:	d100      	bne.n	1000fed4 <at_ble_event_get+0x208>
1000fed2:	e1ad      	b.n	10010230 <at_ble_event_get+0x564>
1000fed4:	4b50      	ldr	r3, [pc, #320]	; (10010018 <at_ble_event_get+0x34c>)
1000fed6:	429c      	cmp	r4, r3
1000fed8:	d100      	bne.n	1000fedc <at_ble_event_get+0x210>
1000feda:	e1b0      	b.n	1001023e <at_ble_event_get+0x572>
1000fedc:	e0de      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fede:	4b4f      	ldr	r3, [pc, #316]	; (1001001c <at_ble_event_get+0x350>)
1000fee0:	429c      	cmp	r4, r3
1000fee2:	d100      	bne.n	1000fee6 <at_ble_event_get+0x21a>
1000fee4:	e0e0      	b.n	100100a8 <at_ble_event_get+0x3dc>
1000fee6:	d809      	bhi.n	1000fefc <at_ble_event_get+0x230>
1000fee8:	3b08      	subs	r3, #8
1000feea:	429c      	cmp	r4, r3
1000feec:	d100      	bne.n	1000fef0 <at_ble_event_get+0x224>
1000feee:	e0d7      	b.n	100100a0 <at_ble_event_get+0x3d4>
1000fef0:	4b4b      	ldr	r3, [pc, #300]	; (10010020 <at_ble_event_get+0x354>)
1000fef2:	2639      	movs	r6, #57	; 0x39
1000fef4:	429c      	cmp	r4, r3
1000fef6:	d100      	bne.n	1000fefa <at_ble_event_get+0x22e>
1000fef8:	e1dd      	b.n	100102b6 <at_ble_event_get+0x5ea>
1000fefa:	e0cf      	b.n	1001009c <at_ble_event_get+0x3d0>
1000fefc:	23d1      	movs	r3, #209	; 0xd1
1000fefe:	011b      	lsls	r3, r3, #4
1000ff00:	429c      	cmp	r4, r3
1000ff02:	d100      	bne.n	1000ff06 <at_ble_event_get+0x23a>
1000ff04:	e0d6      	b.n	100100b4 <at_ble_event_get+0x3e8>
1000ff06:	4b47      	ldr	r3, [pc, #284]	; (10010024 <at_ble_event_get+0x358>)
1000ff08:	429c      	cmp	r4, r3
1000ff0a:	d100      	bne.n	1000ff0e <at_ble_event_get+0x242>
1000ff0c:	e0d8      	b.n	100100c0 <at_ble_event_get+0x3f4>
1000ff0e:	e0c5      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff10:	4b45      	ldr	r3, [pc, #276]	; (10010028 <at_ble_event_get+0x35c>)
1000ff12:	429c      	cmp	r4, r3
1000ff14:	d100      	bne.n	1000ff18 <at_ble_event_get+0x24c>
1000ff16:	e117      	b.n	10010148 <at_ble_event_get+0x47c>
1000ff18:	d82e      	bhi.n	1000ff78 <at_ble_event_get+0x2ac>
1000ff1a:	4b44      	ldr	r3, [pc, #272]	; (1001002c <at_ble_event_get+0x360>)
1000ff1c:	429c      	cmp	r4, r3
1000ff1e:	d100      	bne.n	1000ff22 <at_ble_event_get+0x256>
1000ff20:	e13d      	b.n	1001019e <at_ble_event_get+0x4d2>
1000ff22:	d812      	bhi.n	1000ff4a <at_ble_event_get+0x27e>
1000ff24:	4b42      	ldr	r3, [pc, #264]	; (10010030 <at_ble_event_get+0x364>)
1000ff26:	429c      	cmp	r4, r3
1000ff28:	d100      	bne.n	1000ff2c <at_ble_event_get+0x260>
1000ff2a:	e0e8      	b.n	100100fe <at_ble_event_get+0x432>
1000ff2c:	d804      	bhi.n	1000ff38 <at_ble_event_get+0x26c>
1000ff2e:	3b03      	subs	r3, #3
1000ff30:	429c      	cmp	r4, r3
1000ff32:	d100      	bne.n	1000ff36 <at_ble_event_get+0x26a>
1000ff34:	e0d0      	b.n	100100d8 <at_ble_event_get+0x40c>
1000ff36:	e0b1      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff38:	4b3e      	ldr	r3, [pc, #248]	; (10010034 <at_ble_event_get+0x368>)
1000ff3a:	429c      	cmp	r4, r3
1000ff3c:	d100      	bne.n	1000ff40 <at_ble_event_get+0x274>
1000ff3e:	e0d0      	b.n	100100e2 <at_ble_event_get+0x416>
1000ff40:	4b3d      	ldr	r3, [pc, #244]	; (10010038 <at_ble_event_get+0x36c>)
1000ff42:	429c      	cmp	r4, r3
1000ff44:	d100      	bne.n	1000ff48 <at_ble_event_get+0x27c>
1000ff46:	e0f9      	b.n	1001013c <at_ble_event_get+0x470>
1000ff48:	e0a8      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff4a:	4b3c      	ldr	r3, [pc, #240]	; (1001003c <at_ble_event_get+0x370>)
1000ff4c:	429c      	cmp	r4, r3
1000ff4e:	d100      	bne.n	1000ff52 <at_ble_event_get+0x286>
1000ff50:	e0db      	b.n	1001010a <at_ble_event_get+0x43e>
1000ff52:	d808      	bhi.n	1000ff66 <at_ble_event_get+0x29a>
1000ff54:	4b3a      	ldr	r3, [pc, #232]	; (10010040 <at_ble_event_get+0x374>)
1000ff56:	429c      	cmp	r4, r3
1000ff58:	d100      	bne.n	1000ff5c <at_ble_event_get+0x290>
1000ff5a:	e11b      	b.n	10010194 <at_ble_event_get+0x4c8>
1000ff5c:	4b39      	ldr	r3, [pc, #228]	; (10010044 <at_ble_event_get+0x378>)
1000ff5e:	429c      	cmp	r4, r3
1000ff60:	d100      	bne.n	1000ff64 <at_ble_event_get+0x298>
1000ff62:	e0d8      	b.n	10010116 <at_ble_event_get+0x44a>
1000ff64:	e09a      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff66:	4b38      	ldr	r3, [pc, #224]	; (10010048 <at_ble_event_get+0x37c>)
1000ff68:	429c      	cmp	r4, r3
1000ff6a:	d100      	bne.n	1000ff6e <at_ble_event_get+0x2a2>
1000ff6c:	e0d8      	b.n	10010120 <at_ble_event_get+0x454>
1000ff6e:	4b37      	ldr	r3, [pc, #220]	; (1001004c <at_ble_event_get+0x380>)
1000ff70:	429c      	cmp	r4, r3
1000ff72:	d100      	bne.n	1000ff76 <at_ble_event_get+0x2aa>
1000ff74:	e0db      	b.n	1001012e <at_ble_event_get+0x462>
1000ff76:	e091      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff78:	4b35      	ldr	r3, [pc, #212]	; (10010050 <at_ble_event_get+0x384>)
1000ff7a:	429c      	cmp	r4, r3
1000ff7c:	d100      	bne.n	1000ff80 <at_ble_event_get+0x2b4>
1000ff7e:	e0f7      	b.n	10010170 <at_ble_event_get+0x4a4>
1000ff80:	d876      	bhi.n	10010070 <at_ble_event_get+0x3a4>
1000ff82:	4b34      	ldr	r3, [pc, #208]	; (10010054 <at_ble_event_get+0x388>)
1000ff84:	429c      	cmp	r4, r3
1000ff86:	d100      	bne.n	1000ff8a <at_ble_event_get+0x2be>
1000ff88:	e0f8      	b.n	1001017c <at_ble_event_get+0x4b0>
1000ff8a:	d869      	bhi.n	10010060 <at_ble_event_get+0x394>
1000ff8c:	4b32      	ldr	r3, [pc, #200]	; (10010058 <at_ble_event_get+0x38c>)
1000ff8e:	429c      	cmp	r4, r3
1000ff90:	d100      	bne.n	1000ff94 <at_ble_event_get+0x2c8>
1000ff92:	e0e0      	b.n	10010156 <at_ble_event_get+0x48a>
1000ff94:	4b31      	ldr	r3, [pc, #196]	; (1001005c <at_ble_event_get+0x390>)
1000ff96:	429c      	cmp	r4, r3
1000ff98:	d100      	bne.n	1000ff9c <at_ble_event_get+0x2d0>
1000ff9a:	e0a9      	b.n	100100f0 <at_ble_event_get+0x424>
1000ff9c:	e07e      	b.n	1001009c <at_ble_event_get+0x3d0>
1000ff9e:	46c0      	nop			; (mov r8, r8)
1000ffa0:	100116d1 	.word	0x100116d1
1000ffa4:	10019f00 	.word	0x10019f00
1000ffa8:	1000f2e5 	.word	0x1000f2e5
1000ffac:	10019f04 	.word	0x10019f04
1000ffb0:	10019efc 	.word	0x10019efc
1000ffb4:	10019eec 	.word	0x10019eec
1000ffb8:	1000fbb5 	.word	0x1000fbb5
1000ffbc:	100150e9 	.word	0x100150e9
1000ffc0:	0000ffff 	.word	0x0000ffff
1000ffc4:	0000fffe 	.word	0x0000fffe
1000ffc8:	1000f55d 	.word	0x1000f55d
1000ffcc:	100116d3 	.word	0x100116d3
1000ffd0:	0000201e 	.word	0x0000201e
1000ffd4:	0000201d 	.word	0x0000201d
1000ffd8:	00000c03 	.word	0x00000c03
1000ffdc:	0000201f 	.word	0x0000201f
1000ffe0:	00000d1c 	.word	0x00000d1c
1000ffe4:	00000c0c 	.word	0x00000c0c
1000ffe8:	00000c02 	.word	0x00000c02
1000ffec:	00000a02 	.word	0x00000a02
1000fff0:	00000a03 	.word	0x00000a03
1000fff4:	00000c06 	.word	0x00000c06
1000fff8:	00000c04 	.word	0x00000c04
1000fffc:	00000c05 	.word	0x00000c05
10010000:	00000c07 	.word	0x00000c07
10010004:	00000c09 	.word	0x00000c09
10010008:	00000c17 	.word	0x00000c17
1001000c:	00000c12 	.word	0x00000c12
10010010:	00000c0d 	.word	0x00000c0d
10010014:	00000c13 	.word	0x00000c13
10010018:	00000c15 	.word	0x00000c15
1001001c:	00000d08 	.word	0x00000d08
10010020:	00000d01 	.word	0x00000d01
10010024:	00000d15 	.word	0x00000d15
10010028:	00000e1b 	.word	0x00000e1b
1001002c:	00000e0f 	.word	0x00000e0f
10010030:	00000e03 	.word	0x00000e03
10010034:	00000e06 	.word	0x00000e06
10010038:	00000e0a 	.word	0x00000e0a
1001003c:	00000e15 	.word	0x00000e15
10010040:	00000e11 	.word	0x00000e11
10010044:	00000e13 	.word	0x00000e13
10010048:	00000e17 	.word	0x00000e17
1001004c:	00000e19 	.word	0x00000e19
10010050:	00000e27 	.word	0x00000e27
10010054:	00000e21 	.word	0x00000e21
10010058:	00000e1c 	.word	0x00000e1c
1001005c:	00000e1d 	.word	0x00000e1d
10010060:	4b9f      	ldr	r3, [pc, #636]	; (100102e0 <at_ble_event_get+0x614>)
10010062:	429c      	cmp	r4, r3
10010064:	d07e      	beq.n	10010164 <at_ble_event_get+0x498>
10010066:	4b9f      	ldr	r3, [pc, #636]	; (100102e4 <at_ble_event_get+0x618>)
10010068:	429c      	cmp	r4, r3
1001006a:	d100      	bne.n	1001006e <at_ble_event_get+0x3a2>
1001006c:	e08c      	b.n	10010188 <at_ble_event_get+0x4bc>
1001006e:	e015      	b.n	1001009c <at_ble_event_get+0x3d0>
10010070:	4b9d      	ldr	r3, [pc, #628]	; (100102e8 <at_ble_event_get+0x61c>)
10010072:	429c      	cmp	r4, r3
10010074:	d100      	bne.n	10010078 <at_ble_event_get+0x3ac>
10010076:	e10a      	b.n	1001028e <at_ble_event_get+0x5c2>
10010078:	d808      	bhi.n	1001008c <at_ble_event_get+0x3c0>
1001007a:	4b9c      	ldr	r3, [pc, #624]	; (100102ec <at_ble_event_get+0x620>)
1001007c:	429c      	cmp	r4, r3
1001007e:	d100      	bne.n	10010082 <at_ble_event_get+0x3b6>
10010080:	e0f7      	b.n	10010272 <at_ble_event_get+0x5a6>
10010082:	4b9b      	ldr	r3, [pc, #620]	; (100102f0 <at_ble_event_get+0x624>)
10010084:	429c      	cmp	r4, r3
10010086:	d100      	bne.n	1001008a <at_ble_event_get+0x3be>
10010088:	e0fa      	b.n	10010280 <at_ble_event_get+0x5b4>
1001008a:	e007      	b.n	1001009c <at_ble_event_get+0x3d0>
1001008c:	4b99      	ldr	r3, [pc, #612]	; (100102f4 <at_ble_event_get+0x628>)
1001008e:	429c      	cmp	r4, r3
10010090:	d100      	bne.n	10010094 <at_ble_event_get+0x3c8>
10010092:	e103      	b.n	1001029c <at_ble_event_get+0x5d0>
10010094:	4b98      	ldr	r3, [pc, #608]	; (100102f8 <at_ble_event_get+0x62c>)
10010096:	429c      	cmp	r4, r3
10010098:	d100      	bne.n	1001009c <at_ble_event_get+0x3d0>
1001009a:	e106      	b.n	100102aa <at_ble_event_get+0x5de>
1001009c:	2600      	movs	r6, #0
1001009e:	e10a      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100a0:	1c30      	adds	r0, r6, #0
100100a2:	1c29      	adds	r1, r5, #0
100100a4:	4b95      	ldr	r3, [pc, #596]	; (100102fc <at_ble_event_get+0x630>)
100100a6:	e014      	b.n	100100d2 <at_ble_event_get+0x406>
100100a8:	1c30      	adds	r0, r6, #0
100100aa:	1c29      	adds	r1, r5, #0
100100ac:	4b94      	ldr	r3, [pc, #592]	; (10010300 <at_ble_event_get+0x634>)
100100ae:	4798      	blx	r3
100100b0:	2604      	movs	r6, #4
100100b2:	e100      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100b4:	1c30      	adds	r0, r6, #0
100100b6:	1c29      	adds	r1, r5, #0
100100b8:	4b92      	ldr	r3, [pc, #584]	; (10010304 <at_ble_event_get+0x638>)
100100ba:	4798      	blx	r3
100100bc:	2601      	movs	r6, #1
100100be:	e0fa      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100c0:	1c30      	adds	r0, r6, #0
100100c2:	1c29      	adds	r1, r5, #0
100100c4:	4b90      	ldr	r3, [pc, #576]	; (10010308 <at_ble_event_get+0x63c>)
100100c6:	4798      	blx	r3
100100c8:	260f      	movs	r6, #15
100100ca:	e0f4      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100cc:	1c30      	adds	r0, r6, #0
100100ce:	1c29      	adds	r1, r5, #0
100100d0:	4b8e      	ldr	r3, [pc, #568]	; (1001030c <at_ble_event_get+0x640>)
100100d2:	4798      	blx	r3
100100d4:	1c06      	adds	r6, r0, #0
100100d6:	e0ee      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100d8:	9801      	ldr	r0, [sp, #4]
100100da:	1c31      	adds	r1, r6, #0
100100dc:	1c2a      	adds	r2, r5, #0
100100de:	4b8c      	ldr	r3, [pc, #560]	; (10010310 <at_ble_event_get+0x644>)
100100e0:	e017      	b.n	10010112 <at_ble_event_get+0x446>
100100e2:	1c31      	adds	r1, r6, #0
100100e4:	9801      	ldr	r0, [sp, #4]
100100e6:	1c2a      	adds	r2, r5, #0
100100e8:	4b8a      	ldr	r3, [pc, #552]	; (10010314 <at_ble_event_get+0x648>)
100100ea:	4798      	blx	r3
100100ec:	2611      	movs	r6, #17
100100ee:	e0e2      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100f0:	1c31      	adds	r1, r6, #0
100100f2:	9801      	ldr	r0, [sp, #4]
100100f4:	1c2a      	adds	r2, r5, #0
100100f6:	4b88      	ldr	r3, [pc, #544]	; (10010318 <at_ble_event_get+0x64c>)
100100f8:	4798      	blx	r3
100100fa:	2612      	movs	r6, #18
100100fc:	e0db      	b.n	100102b6 <at_ble_event_get+0x5ea>
100100fe:	1c30      	adds	r0, r6, #0
10010100:	1c29      	adds	r1, r5, #0
10010102:	4b86      	ldr	r3, [pc, #536]	; (1001031c <at_ble_event_get+0x650>)
10010104:	4798      	blx	r3
10010106:	2606      	movs	r6, #6
10010108:	e0d5      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001010a:	1c31      	adds	r1, r6, #0
1001010c:	1c2a      	adds	r2, r5, #0
1001010e:	9801      	ldr	r0, [sp, #4]
10010110:	4b83      	ldr	r3, [pc, #524]	; (10010320 <at_ble_event_get+0x654>)
10010112:	4798      	blx	r3
10010114:	e7de      	b.n	100100d4 <at_ble_event_get+0x408>
10010116:	9801      	ldr	r0, [sp, #4]
10010118:	1c31      	adds	r1, r6, #0
1001011a:	1c2a      	adds	r2, r5, #0
1001011c:	4b81      	ldr	r3, [pc, #516]	; (10010324 <at_ble_event_get+0x658>)
1001011e:	e7f8      	b.n	10010112 <at_ble_event_get+0x446>
10010120:	1c31      	adds	r1, r6, #0
10010122:	9801      	ldr	r0, [sp, #4]
10010124:	1c2a      	adds	r2, r5, #0
10010126:	4b80      	ldr	r3, [pc, #512]	; (10010328 <at_ble_event_get+0x65c>)
10010128:	4798      	blx	r3
1001012a:	260d      	movs	r6, #13
1001012c:	e0c3      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001012e:	1c31      	adds	r1, r6, #0
10010130:	9801      	ldr	r0, [sp, #4]
10010132:	1c2a      	adds	r2, r5, #0
10010134:	4b7d      	ldr	r3, [pc, #500]	; (1001032c <at_ble_event_get+0x660>)
10010136:	4798      	blx	r3
10010138:	260e      	movs	r6, #14
1001013a:	e0bc      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001013c:	9801      	ldr	r0, [sp, #4]
1001013e:	1c31      	adds	r1, r6, #0
10010140:	1c2a      	adds	r2, r5, #0
10010142:	4b7b      	ldr	r3, [pc, #492]	; (10010330 <at_ble_event_get+0x664>)
10010144:	4798      	blx	r3
10010146:	e084      	b.n	10010252 <at_ble_event_get+0x586>
10010148:	1c31      	adds	r1, r6, #0
1001014a:	9801      	ldr	r0, [sp, #4]
1001014c:	1c2a      	adds	r2, r5, #0
1001014e:	4b79      	ldr	r3, [pc, #484]	; (10010334 <at_ble_event_get+0x668>)
10010150:	4798      	blx	r3
10010152:	260b      	movs	r6, #11
10010154:	e0af      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010156:	1c31      	adds	r1, r6, #0
10010158:	9801      	ldr	r0, [sp, #4]
1001015a:	1c2a      	adds	r2, r5, #0
1001015c:	4b76      	ldr	r3, [pc, #472]	; (10010338 <at_ble_event_get+0x66c>)
1001015e:	4798      	blx	r3
10010160:	2610      	movs	r6, #16
10010162:	e0a8      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010164:	1c30      	adds	r0, r6, #0
10010166:	1c29      	adds	r1, r5, #0
10010168:	4b74      	ldr	r3, [pc, #464]	; (1001033c <at_ble_event_get+0x670>)
1001016a:	4798      	blx	r3
1001016c:	2628      	movs	r6, #40	; 0x28
1001016e:	e0a2      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010170:	1c30      	adds	r0, r6, #0
10010172:	1c29      	adds	r1, r5, #0
10010174:	4b72      	ldr	r3, [pc, #456]	; (10010340 <at_ble_event_get+0x674>)
10010176:	4798      	blx	r3
10010178:	2629      	movs	r6, #41	; 0x29
1001017a:	e09c      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001017c:	1c30      	adds	r0, r6, #0
1001017e:	1c29      	adds	r1, r5, #0
10010180:	4b70      	ldr	r3, [pc, #448]	; (10010344 <at_ble_event_get+0x678>)
10010182:	4798      	blx	r3
10010184:	2627      	movs	r6, #39	; 0x27
10010186:	e096      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010188:	1c30      	adds	r0, r6, #0
1001018a:	1c29      	adds	r1, r5, #0
1001018c:	4b6e      	ldr	r3, [pc, #440]	; (10010348 <at_ble_event_get+0x67c>)
1001018e:	4798      	blx	r3
10010190:	262a      	movs	r6, #42	; 0x2a
10010192:	e090      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010194:	9801      	ldr	r0, [sp, #4]
10010196:	1c31      	adds	r1, r6, #0
10010198:	1c2a      	adds	r2, r5, #0
1001019a:	4b6c      	ldr	r3, [pc, #432]	; (1001034c <at_ble_event_get+0x680>)
1001019c:	e7b9      	b.n	10010112 <at_ble_event_get+0x446>
1001019e:	9801      	ldr	r0, [sp, #4]
100101a0:	1c31      	adds	r1, r6, #0
100101a2:	1c2a      	adds	r2, r5, #0
100101a4:	4b6a      	ldr	r3, [pc, #424]	; (10010350 <at_ble_event_get+0x684>)
100101a6:	e7b4      	b.n	10010112 <at_ble_event_get+0x446>
100101a8:	1c30      	adds	r0, r6, #0
100101aa:	1c29      	adds	r1, r5, #0
100101ac:	4b69      	ldr	r3, [pc, #420]	; (10010354 <at_ble_event_get+0x688>)
100101ae:	4798      	blx	r3
100101b0:	262b      	movs	r6, #43	; 0x2b
100101b2:	e080      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101b4:	1c30      	adds	r0, r6, #0
100101b6:	1c29      	adds	r1, r5, #0
100101b8:	4b67      	ldr	r3, [pc, #412]	; (10010358 <at_ble_event_get+0x68c>)
100101ba:	4798      	blx	r3
100101bc:	262c      	movs	r6, #44	; 0x2c
100101be:	e07a      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101c0:	1c31      	adds	r1, r6, #0
100101c2:	9801      	ldr	r0, [sp, #4]
100101c4:	1c2a      	adds	r2, r5, #0
100101c6:	4b65      	ldr	r3, [pc, #404]	; (1001035c <at_ble_event_get+0x690>)
100101c8:	4798      	blx	r3
100101ca:	2613      	movs	r6, #19
100101cc:	e073      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101ce:	1c31      	adds	r1, r6, #0
100101d0:	9801      	ldr	r0, [sp, #4]
100101d2:	1c2a      	adds	r2, r5, #0
100101d4:	4b62      	ldr	r3, [pc, #392]	; (10010360 <at_ble_event_get+0x694>)
100101d6:	4798      	blx	r3
100101d8:	2614      	movs	r6, #20
100101da:	e06c      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101dc:	1c31      	adds	r1, r6, #0
100101de:	9801      	ldr	r0, [sp, #4]
100101e0:	1c2a      	adds	r2, r5, #0
100101e2:	4b60      	ldr	r3, [pc, #384]	; (10010364 <at_ble_event_get+0x698>)
100101e4:	4798      	blx	r3
100101e6:	2615      	movs	r6, #21
100101e8:	e065      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101ea:	1c31      	adds	r1, r6, #0
100101ec:	9801      	ldr	r0, [sp, #4]
100101ee:	1c2a      	adds	r2, r5, #0
100101f0:	4b5d      	ldr	r3, [pc, #372]	; (10010368 <at_ble_event_get+0x69c>)
100101f2:	4798      	blx	r3
100101f4:	2616      	movs	r6, #22
100101f6:	e05e      	b.n	100102b6 <at_ble_event_get+0x5ea>
100101f8:	9801      	ldr	r0, [sp, #4]
100101fa:	1c31      	adds	r1, r6, #0
100101fc:	1c2a      	adds	r2, r5, #0
100101fe:	4b5b      	ldr	r3, [pc, #364]	; (1001036c <at_ble_event_get+0x6a0>)
10010200:	e787      	b.n	10010112 <at_ble_event_get+0x446>
10010202:	1c31      	adds	r1, r6, #0
10010204:	9801      	ldr	r0, [sp, #4]
10010206:	1c2a      	adds	r2, r5, #0
10010208:	4b58      	ldr	r3, [pc, #352]	; (1001036c <at_ble_event_get+0x6a0>)
1001020a:	4798      	blx	r3
1001020c:	88a9      	ldrh	r1, [r5, #4]
1001020e:	1c06      	adds	r6, r0, #0
10010210:	4b57      	ldr	r3, [pc, #348]	; (10010370 <at_ble_event_get+0x6a4>)
10010212:	8828      	ldrh	r0, [r5, #0]
10010214:	4798      	blx	r3
10010216:	e04e      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010218:	1c31      	adds	r1, r6, #0
1001021a:	9801      	ldr	r0, [sp, #4]
1001021c:	1c2a      	adds	r2, r5, #0
1001021e:	4b55      	ldr	r3, [pc, #340]	; (10010374 <at_ble_event_get+0x6a8>)
10010220:	4798      	blx	r3
10010222:	2623      	movs	r6, #35	; 0x23
10010224:	e047      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010226:	9801      	ldr	r0, [sp, #4]
10010228:	1c31      	adds	r1, r6, #0
1001022a:	1c2a      	adds	r2, r5, #0
1001022c:	4b52      	ldr	r3, [pc, #328]	; (10010378 <at_ble_event_get+0x6ac>)
1001022e:	e770      	b.n	10010112 <at_ble_event_get+0x446>
10010230:	9b01      	ldr	r3, [sp, #4]
10010232:	1c30      	adds	r0, r6, #0
10010234:	0a1f      	lsrs	r7, r3, #8
10010236:	802f      	strh	r7, [r5, #0]
10010238:	1c29      	adds	r1, r5, #0
1001023a:	4b50      	ldr	r3, [pc, #320]	; (1001037c <at_ble_event_get+0x6b0>)
1001023c:	e749      	b.n	100100d2 <at_ble_event_get+0x406>
1001023e:	9801      	ldr	r0, [sp, #4]
10010240:	1c31      	adds	r1, r6, #0
10010242:	1c2a      	adds	r2, r5, #0
10010244:	4b4e      	ldr	r3, [pc, #312]	; (10010380 <at_ble_event_get+0x6b4>)
10010246:	e764      	b.n	10010112 <at_ble_event_get+0x446>
10010248:	1c30      	adds	r0, r6, #0
1001024a:	1c29      	adds	r1, r5, #0
1001024c:	9a01      	ldr	r2, [sp, #4]
1001024e:	4b4d      	ldr	r3, [pc, #308]	; (10010384 <at_ble_event_get+0x6b8>)
10010250:	4798      	blx	r3
10010252:	263b      	movs	r6, #59	; 0x3b
10010254:	e02f      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010256:	1c31      	adds	r1, r6, #0
10010258:	9801      	ldr	r0, [sp, #4]
1001025a:	1c2a      	adds	r2, r5, #0
1001025c:	4b4a      	ldr	r3, [pc, #296]	; (10010388 <at_ble_event_get+0x6bc>)
1001025e:	4798      	blx	r3
10010260:	2618      	movs	r6, #24
10010262:	e028      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010264:	1c31      	adds	r1, r6, #0
10010266:	9801      	ldr	r0, [sp, #4]
10010268:	1c2a      	adds	r2, r5, #0
1001026a:	4b48      	ldr	r3, [pc, #288]	; (1001038c <at_ble_event_get+0x6c0>)
1001026c:	4798      	blx	r3
1001026e:	2620      	movs	r6, #32
10010270:	e021      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010272:	1c31      	adds	r1, r6, #0
10010274:	9801      	ldr	r0, [sp, #4]
10010276:	1c2a      	adds	r2, r5, #0
10010278:	4b45      	ldr	r3, [pc, #276]	; (10010390 <at_ble_event_get+0x6c4>)
1001027a:	4798      	blx	r3
1001027c:	2633      	movs	r6, #51	; 0x33
1001027e:	e01a      	b.n	100102b6 <at_ble_event_get+0x5ea>
10010280:	1c31      	adds	r1, r6, #0
10010282:	9801      	ldr	r0, [sp, #4]
10010284:	1c2a      	adds	r2, r5, #0
10010286:	4b43      	ldr	r3, [pc, #268]	; (10010394 <at_ble_event_get+0x6c8>)
10010288:	4798      	blx	r3
1001028a:	2630      	movs	r6, #48	; 0x30
1001028c:	e013      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001028e:	1c31      	adds	r1, r6, #0
10010290:	9801      	ldr	r0, [sp, #4]
10010292:	1c2a      	adds	r2, r5, #0
10010294:	4b40      	ldr	r3, [pc, #256]	; (10010398 <at_ble_event_get+0x6cc>)
10010296:	4798      	blx	r3
10010298:	2634      	movs	r6, #52	; 0x34
1001029a:	e00c      	b.n	100102b6 <at_ble_event_get+0x5ea>
1001029c:	1c31      	adds	r1, r6, #0
1001029e:	9801      	ldr	r0, [sp, #4]
100102a0:	1c2a      	adds	r2, r5, #0
100102a2:	4b3e      	ldr	r3, [pc, #248]	; (1001039c <at_ble_event_get+0x6d0>)
100102a4:	4798      	blx	r3
100102a6:	2635      	movs	r6, #53	; 0x35
100102a8:	e005      	b.n	100102b6 <at_ble_event_get+0x5ea>
100102aa:	1c31      	adds	r1, r6, #0
100102ac:	9801      	ldr	r0, [sp, #4]
100102ae:	1c2a      	adds	r2, r5, #0
100102b0:	4b3b      	ldr	r3, [pc, #236]	; (100103a0 <at_ble_event_get+0x6d4>)
100102b2:	4798      	blx	r3
100102b4:	2632      	movs	r6, #50	; 0x32
100102b6:	9b03      	ldr	r3, [sp, #12]
100102b8:	701e      	strb	r6, [r3, #0]
100102ba:	2300      	movs	r3, #0
100102bc:	9302      	str	r3, [sp, #8]
100102be:	e57a      	b.n	1000fdb6 <at_ble_event_get+0xea>
100102c0:	23d0      	movs	r3, #208	; 0xd0
100102c2:	e7fb      	b.n	100102bc <at_ble_event_get+0x5f0>
100102c4:	9b01      	ldr	r3, [sp, #4]
100102c6:	9e02      	ldr	r6, [sp, #8]
100102c8:	2bbb      	cmp	r3, #187	; 0xbb
100102ca:	d000      	beq.n	100102ce <at_ble_event_get+0x602>
100102cc:	e6e6      	b.n	1001009c <at_ble_event_get+0x3d0>
100102ce:	e7f2      	b.n	100102b6 <at_ble_event_get+0x5ea>
100102d0:	9b02      	ldr	r3, [sp, #8]
100102d2:	2b00      	cmp	r3, #0
100102d4:	d000      	beq.n	100102d8 <at_ble_event_get+0x60c>
100102d6:	e56e      	b.n	1000fdb6 <at_ble_event_get+0xea>
100102d8:	e6e0      	b.n	1001009c <at_ble_event_get+0x3d0>
100102da:	9802      	ldr	r0, [sp, #8]
100102dc:	b007      	add	sp, #28
100102de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102e0:	00000e22 	.word	0x00000e22
100102e4:	00000e25 	.word	0x00000e25
100102e8:	00001b05 	.word	0x00001b05
100102ec:	00001b01 	.word	0x00001b01
100102f0:	00001b03 	.word	0x00001b03
100102f4:	00001b06 	.word	0x00001b06
100102f8:	00001b08 	.word	0x00001b08
100102fc:	100124fd 	.word	0x100124fd
10010300:	100124e1 	.word	0x100124e1
10010304:	1001277d 	.word	0x1001277d
10010308:	1001286d 	.word	0x1001286d
1001030c:	10012891 	.word	0x10012891
10010310:	10011875 	.word	0x10011875
10010314:	100120f5 	.word	0x100120f5
10010318:	10012171 	.word	0x10012171
1001031c:	10011b2d 	.word	0x10011b2d
10010320:	10011bc9 	.word	0x10011bc9
10010324:	10011ca1 	.word	0x10011ca1
10010328:	10011f29 	.word	0x10011f29
1001032c:	10011fc9 	.word	0x10011fc9
10010330:	10012081 	.word	0x10012081
10010334:	100120a9 	.word	0x100120a9
10010338:	100120bf 	.word	0x100120bf
1001033c:	10012189 	.word	0x10012189
10010340:	100121b7 	.word	0x100121b7
10010344:	100121cd 	.word	0x100121cd
10010348:	100121f7 	.word	0x100121f7
1001034c:	10012025 	.word	0x10012025
10010350:	1001204f 	.word	0x1001204f
10010354:	100112b5 	.word	0x100112b5
10010358:	100112e1 	.word	0x100112e1
1001035c:	10012ab1 	.word	0x10012ab1
10010360:	10012aed 	.word	0x10012aed
10010364:	10012b35 	.word	0x10012b35
10010368:	10012b79 	.word	0x10012b79
1001036c:	10012bad 	.word	0x10012bad
10010370:	10012a71 	.word	0x10012a71
10010374:	10012c79 	.word	0x10012c79
10010378:	10012c01 	.word	0x10012c01
1001037c:	10011199 	.word	0x10011199
10010380:	10011205 	.word	0x10011205
10010384:	100111c9 	.word	0x100111c9
10010388:	10012c89 	.word	0x10012c89
1001038c:	10012cc9 	.word	0x10012cc9
10010390:	10012f91 	.word	0x10012f91
10010394:	10012f9b 	.word	0x10012f9b
10010398:	10012fa1 	.word	0x10012fa1
1001039c:	10012fa7 	.word	0x10012fa7
100103a0:	10012fb3 	.word	0x10012fb3

100103a4 <internal_event_flush>:
100103a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103a6:	490e      	ldr	r1, [pc, #56]	; (100103e0 <internal_event_flush+0x3c>)
100103a8:	2400      	movs	r4, #0
100103aa:	680b      	ldr	r3, [r1, #0]
100103ac:	1c0f      	adds	r7, r1, #0
100103ae:	1c1e      	adds	r6, r3, #0
100103b0:	4a0c      	ldr	r2, [pc, #48]	; (100103e4 <internal_event_flush+0x40>)
100103b2:	6815      	ldr	r5, [r2, #0]
100103b4:	9201      	str	r2, [sp, #4]
100103b6:	2b00      	cmp	r3, #0
100103b8:	d00e      	beq.n	100103d8 <internal_event_flush+0x34>
100103ba:	889a      	ldrh	r2, [r3, #4]
100103bc:	6819      	ldr	r1, [r3, #0]
100103be:	4282      	cmp	r2, r0
100103c0:	d107      	bne.n	100103d2 <internal_event_flush+0x2e>
100103c2:	2c00      	cmp	r4, #0
100103c4:	d001      	beq.n	100103ca <internal_event_flush+0x26>
100103c6:	6021      	str	r1, [r4, #0]
100103c8:	e000      	b.n	100103cc <internal_event_flush+0x28>
100103ca:	1c0e      	adds	r6, r1, #0
100103cc:	601d      	str	r5, [r3, #0]
100103ce:	1c1d      	adds	r5, r3, #0
100103d0:	1c23      	adds	r3, r4, #0
100103d2:	1c1c      	adds	r4, r3, #0
100103d4:	1c0b      	adds	r3, r1, #0
100103d6:	e7ee      	b.n	100103b6 <internal_event_flush+0x12>
100103d8:	9b01      	ldr	r3, [sp, #4]
100103da:	603e      	str	r6, [r7, #0]
100103dc:	601d      	str	r5, [r3, #0]
100103de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100103e0:	10019f00 	.word	0x10019f00
100103e4:	10019f04 	.word	0x10019f04

100103e8 <internal_conn_flush>:
100103e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103ea:	4a12      	ldr	r2, [pc, #72]	; (10010434 <internal_conn_flush+0x4c>)
100103ec:	9000      	str	r0, [sp, #0]
100103ee:	6813      	ldr	r3, [r2, #0]
100103f0:	4811      	ldr	r0, [pc, #68]	; (10010438 <internal_conn_flush+0x50>)
100103f2:	1c1f      	adds	r7, r3, #0
100103f4:	2100      	movs	r1, #0
100103f6:	4684      	mov	ip, r0
100103f8:	6804      	ldr	r4, [r0, #0]
100103fa:	9201      	str	r2, [sp, #4]
100103fc:	2b00      	cmp	r3, #0
100103fe:	d014      	beq.n	1001042a <internal_conn_flush+0x42>
10010400:	88d8      	ldrh	r0, [r3, #6]
10010402:	9a00      	ldr	r2, [sp, #0]
10010404:	681d      	ldr	r5, [r3, #0]
10010406:	0a06      	lsrs	r6, r0, #8
10010408:	4296      	cmp	r6, r2
1001040a:	d10b      	bne.n	10010424 <internal_conn_flush+0x3c>
1001040c:	26fd      	movs	r6, #253	; 0xfd
1001040e:	4006      	ands	r6, r0
10010410:	2e0c      	cmp	r6, #12
10010412:	d107      	bne.n	10010424 <internal_conn_flush+0x3c>
10010414:	2900      	cmp	r1, #0
10010416:	d001      	beq.n	1001041c <internal_conn_flush+0x34>
10010418:	600d      	str	r5, [r1, #0]
1001041a:	e000      	b.n	1001041e <internal_conn_flush+0x36>
1001041c:	1c2f      	adds	r7, r5, #0
1001041e:	601c      	str	r4, [r3, #0]
10010420:	1c1c      	adds	r4, r3, #0
10010422:	1c0b      	adds	r3, r1, #0
10010424:	1c19      	adds	r1, r3, #0
10010426:	1c2b      	adds	r3, r5, #0
10010428:	e7e8      	b.n	100103fc <internal_conn_flush+0x14>
1001042a:	9b01      	ldr	r3, [sp, #4]
1001042c:	601f      	str	r7, [r3, #0]
1001042e:	4663      	mov	r3, ip
10010430:	601c      	str	r4, [r3, #0]
10010432:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010434:	10019f00 	.word	0x10019f00
10010438:	10019f04 	.word	0x10019f04

1001043c <at_ble_device_name_set>:
1001043c:	b530      	push	{r4, r5, lr}
1001043e:	23cf      	movs	r3, #207	; 0xcf
10010440:	2800      	cmp	r0, #0
10010442:	d010      	beq.n	10010466 <at_ble_device_name_set+0x2a>
10010444:	1e4a      	subs	r2, r1, #1
10010446:	2a1f      	cmp	r2, #31
10010448:	d80d      	bhi.n	10010466 <at_ble_device_name_set+0x2a>
1001044a:	4a08      	ldr	r2, [pc, #32]	; (1001046c <at_ble_device_name_set+0x30>)
1001044c:	1c13      	adds	r3, r2, #0
1001044e:	33aa      	adds	r3, #170	; 0xaa
10010450:	8019      	strh	r1, [r3, #0]
10010452:	2300      	movs	r3, #0
10010454:	1c1c      	adds	r4, r3, #0
10010456:	5cc5      	ldrb	r5, [r0, r3]
10010458:	34ac      	adds	r4, #172	; 0xac
1001045a:	3301      	adds	r3, #1
1001045c:	5515      	strb	r5, [r2, r4]
1001045e:	b2dc      	uxtb	r4, r3
10010460:	428c      	cmp	r4, r1
10010462:	d3f7      	bcc.n	10010454 <at_ble_device_name_set+0x18>
10010464:	2300      	movs	r3, #0
10010466:	1c18      	adds	r0, r3, #0
10010468:	bd30      	pop	{r4, r5, pc}
1001046a:	46c0      	nop			; (mov r8, r8)
1001046c:	1001aea6 	.word	0x1001aea6

10010470 <at_ble_addr_get>:
10010470:	b510      	push	{r4, lr}
10010472:	1c04      	adds	r4, r0, #0
10010474:	20cf      	movs	r0, #207	; 0xcf
10010476:	2c00      	cmp	r4, #0
10010478:	d006      	beq.n	10010488 <at_ble_addr_get+0x18>
1001047a:	4b04      	ldr	r3, [pc, #16]	; (1001048c <at_ble_addr_get+0x1c>)
1001047c:	38ce      	subs	r0, #206	; 0xce
1001047e:	1c21      	adds	r1, r4, #0
10010480:	4798      	blx	r3
10010482:	4b03      	ldr	r3, [pc, #12]	; (10010490 <at_ble_addr_get+0x20>)
10010484:	791b      	ldrb	r3, [r3, #4]
10010486:	7023      	strb	r3, [r4, #0]
10010488:	bd10      	pop	{r4, pc}
1001048a:	46c0      	nop			; (mov r8, r8)
1001048c:	10012391 	.word	0x10012391
10010490:	1001aea6 	.word	0x1001aea6

10010494 <at_ble_set_dev_config>:
10010494:	b5f0      	push	{r4, r5, r6, r7, lr}
10010496:	7906      	ldrb	r6, [r0, #4]
10010498:	b089      	sub	sp, #36	; 0x24
1001049a:	25cf      	movs	r5, #207	; 0xcf
1001049c:	2e03      	cmp	r6, #3
1001049e:	d838      	bhi.n	10010512 <at_ble_set_dev_config+0x7e>
100104a0:	7803      	ldrb	r3, [r0, #0]
100104a2:	3511      	adds	r5, #17
100104a4:	2b0f      	cmp	r3, #15
100104a6:	d834      	bhi.n	10010512 <at_ble_set_dev_config+0x7e>
100104a8:	2380      	movs	r3, #128	; 0x80
100104aa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100104ac:	3d11      	subs	r5, #17
100104ae:	009b      	lsls	r3, r3, #2
100104b0:	429f      	cmp	r7, r3
100104b2:	d82e      	bhi.n	10010512 <at_ble_set_dev_config+0x7e>
100104b4:	7fc5      	ldrb	r5, [r0, #31]
100104b6:	7f83      	ldrb	r3, [r0, #30]
100104b8:	01ad      	lsls	r5, r5, #6
100104ba:	015b      	lsls	r3, r3, #5
100104bc:	431d      	orrs	r5, r3
100104be:	7ec3      	ldrb	r3, [r0, #27]
100104c0:	431d      	orrs	r5, r3
100104c2:	7f43      	ldrb	r3, [r0, #29]
100104c4:	011b      	lsls	r3, r3, #4
100104c6:	431d      	orrs	r5, r3
100104c8:	7f03      	ldrb	r3, [r0, #28]
100104ca:	009b      	lsls	r3, r3, #2
100104cc:	431d      	orrs	r5, r3
100104ce:	4b12      	ldr	r3, [pc, #72]	; (10010518 <at_ble_set_dev_config+0x84>)
100104d0:	b2ed      	uxtb	r5, r5
100104d2:	711e      	strb	r6, [r3, #4]
100104d4:	7903      	ldrb	r3, [r0, #4]
100104d6:	3b02      	subs	r3, #2
100104d8:	2b01      	cmp	r3, #1
100104da:	d801      	bhi.n	100104e0 <at_ble_set_dev_config+0x4c>
100104dc:	2302      	movs	r3, #2
100104de:	7103      	strb	r3, [r0, #4]
100104e0:	1c04      	adds	r4, r0, #0
100104e2:	1c23      	adds	r3, r4, #0
100104e4:	330b      	adds	r3, #11
100104e6:	8861      	ldrh	r1, [r4, #2]
100104e8:	9307      	str	r3, [sp, #28]
100104ea:	7923      	ldrb	r3, [r4, #4]
100104ec:	7800      	ldrb	r0, [r0, #0]
100104ee:	9300      	str	r3, [sp, #0]
100104f0:	9501      	str	r5, [sp, #4]
100104f2:	8c25      	ldrh	r5, [r4, #32]
100104f4:	1d62      	adds	r2, r4, #5
100104f6:	9502      	str	r5, [sp, #8]
100104f8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
100104fa:	9b07      	ldr	r3, [sp, #28]
100104fc:	9503      	str	r5, [sp, #12]
100104fe:	9704      	str	r7, [sp, #16]
10010500:	4d06      	ldr	r5, [pc, #24]	; (1001051c <at_ble_set_dev_config+0x88>)
10010502:	47a8      	blx	r5
10010504:	7126      	strb	r6, [r4, #4]
10010506:	1c05      	adds	r5, r0, #0
10010508:	1c21      	adds	r1, r4, #0
1001050a:	4803      	ldr	r0, [pc, #12]	; (10010518 <at_ble_set_dev_config+0x84>)
1001050c:	2226      	movs	r2, #38	; 0x26
1001050e:	4b04      	ldr	r3, [pc, #16]	; (10010520 <at_ble_set_dev_config+0x8c>)
10010510:	4798      	blx	r3
10010512:	1c28      	adds	r0, r5, #0
10010514:	b009      	add	sp, #36	; 0x24
10010516:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010518:	1001aea6 	.word	0x1001aea6
1001051c:	10012289 	.word	0x10012289
10010520:	100150d7 	.word	0x100150d7

10010524 <at_ble_init>:
10010524:	b5f0      	push	{r4, r5, r6, r7, lr}
10010526:	b087      	sub	sp, #28
10010528:	af03      	add	r7, sp, #12
1001052a:	4954      	ldr	r1, [pc, #336]	; (1001067c <at_ble_init+0x158>)
1001052c:	220b      	movs	r2, #11
1001052e:	4b54      	ldr	r3, [pc, #336]	; (10010680 <at_ble_init+0x15c>)
10010530:	1c04      	adds	r4, r0, #0
10010532:	1c38      	adds	r0, r7, #0
10010534:	4798      	blx	r3
10010536:	2205      	movs	r2, #5
10010538:	4b52      	ldr	r3, [pc, #328]	; (10010684 <at_ble_init+0x160>)
1001053a:	2640      	movs	r6, #64	; 0x40
1001053c:	801a      	strh	r2, [r3, #0]
1001053e:	2300      	movs	r3, #0
10010540:	4a51      	ldr	r2, [pc, #324]	; (10010688 <at_ble_init+0x164>)
10010542:	6013      	str	r3, [r2, #0]
10010544:	4a51      	ldr	r2, [pc, #324]	; (1001068c <at_ble_init+0x168>)
10010546:	7013      	strb	r3, [r2, #0]
10010548:	4a51      	ldr	r2, [pc, #324]	; (10010690 <at_ble_init+0x16c>)
1001054a:	7013      	strb	r3, [r2, #0]
1001054c:	4b51      	ldr	r3, [pc, #324]	; (10010694 <at_ble_init+0x170>)
1001054e:	4798      	blx	r3
10010550:	4b51      	ldr	r3, [pc, #324]	; (10010698 <at_ble_init+0x174>)
10010552:	4798      	blx	r3
10010554:	4b51      	ldr	r3, [pc, #324]	; (1001069c <at_ble_init+0x178>)
10010556:	4798      	blx	r3
10010558:	4b51      	ldr	r3, [pc, #324]	; (100106a0 <at_ble_init+0x17c>)
1001055a:	4798      	blx	r3
1001055c:	2c00      	cmp	r4, #0
1001055e:	d100      	bne.n	10010562 <at_ble_init+0x3e>
10010560:	e089      	b.n	10010676 <at_ble_init+0x152>
10010562:	68a3      	ldr	r3, [r4, #8]
10010564:	2b00      	cmp	r3, #0
10010566:	d100      	bne.n	1001056a <at_ble_init+0x46>
10010568:	e085      	b.n	10010676 <at_ble_init+0x152>
1001056a:	6923      	ldr	r3, [r4, #16]
1001056c:	2b00      	cmp	r3, #0
1001056e:	d100      	bne.n	10010572 <at_ble_init+0x4e>
10010570:	e081      	b.n	10010676 <at_ble_init+0x152>
10010572:	6820      	ldr	r0, [r4, #0]
10010574:	2800      	cmp	r0, #0
10010576:	d102      	bne.n	1001057e <at_ble_init+0x5a>
10010578:	6863      	ldr	r3, [r4, #4]
1001057a:	2b00      	cmp	r3, #0
1001057c:	d17b      	bne.n	10010676 <at_ble_init+0x152>
1001057e:	4b49      	ldr	r3, [pc, #292]	; (100106a4 <at_ble_init+0x180>)
10010580:	6861      	ldr	r1, [r4, #4]
10010582:	4798      	blx	r3
10010584:	4b48      	ldr	r3, [pc, #288]	; (100106a8 <at_ble_init+0x184>)
10010586:	4798      	blx	r3
10010588:	2801      	cmp	r0, #1
1001058a:	d901      	bls.n	10010590 <at_ble_init+0x6c>
1001058c:	26e2      	movs	r6, #226	; 0xe2
1001058e:	e072      	b.n	10010676 <at_ble_init+0x152>
10010590:	4846      	ldr	r0, [pc, #280]	; (100106ac <at_ble_init+0x188>)
10010592:	4b47      	ldr	r3, [pc, #284]	; (100106b0 <at_ble_init+0x18c>)
10010594:	4798      	blx	r3
10010596:	2800      	cmp	r0, #0
10010598:	d1f8      	bne.n	1001058c <at_ble_init+0x68>
1001059a:	1c20      	adds	r0, r4, #0
1001059c:	4b45      	ldr	r3, [pc, #276]	; (100106b4 <at_ble_init+0x190>)
1001059e:	4798      	blx	r3
100105a0:	68e0      	ldr	r0, [r4, #12]
100105a2:	68a1      	ldr	r1, [r4, #8]
100105a4:	4b44      	ldr	r3, [pc, #272]	; (100106b8 <at_ble_init+0x194>)
100105a6:	4798      	blx	r3
100105a8:	466b      	mov	r3, sp
100105aa:	2201      	movs	r2, #1
100105ac:	1cdc      	adds	r4, r3, #3
100105ae:	1c20      	adds	r0, r4, #0
100105b0:	a901      	add	r1, sp, #4
100105b2:	4252      	negs	r2, r2
100105b4:	4b41      	ldr	r3, [pc, #260]	; (100106bc <at_ble_init+0x198>)
100105b6:	4798      	blx	r3
100105b8:	2800      	cmp	r0, #0
100105ba:	d102      	bne.n	100105c2 <at_ble_init+0x9e>
100105bc:	7823      	ldrb	r3, [r4, #0]
100105be:	2b39      	cmp	r3, #57	; 0x39
100105c0:	d1f2      	bne.n	100105a8 <at_ble_init+0x84>
100105c2:	4b3f      	ldr	r3, [pc, #252]	; (100106c0 <at_ble_init+0x19c>)
100105c4:	4798      	blx	r3
100105c6:	1e06      	subs	r6, r0, #0
100105c8:	d155      	bne.n	10010676 <at_ble_init+0x152>
100105ca:	1c03      	adds	r3, r0, #0
100105cc:	2101      	movs	r1, #1
100105ce:	4a3d      	ldr	r2, [pc, #244]	; (100106c4 <at_ble_init+0x1a0>)
100105d0:	4249      	negs	r1, r1
100105d2:	189a      	adds	r2, r3, r2
100105d4:	3312      	adds	r3, #18
100105d6:	8151      	strh	r1, [r2, #10]
100105d8:	2b90      	cmp	r3, #144	; 0x90
100105da:	d1f7      	bne.n	100105cc <at_ble_init+0xa8>
100105dc:	4c3a      	ldr	r4, [pc, #232]	; (100106c8 <at_ble_init+0x1a4>)
100105de:	3b81      	subs	r3, #129	; 0x81
100105e0:	7023      	strb	r3, [r4, #0]
100105e2:	4b3a      	ldr	r3, [pc, #232]	; (100106cc <at_ble_init+0x1a8>)
100105e4:	4a3a      	ldr	r2, [pc, #232]	; (100106d0 <at_ble_init+0x1ac>)
100105e6:	8063      	strh	r3, [r4, #2]
100105e8:	2300      	movs	r3, #0
100105ea:	7123      	strb	r3, [r4, #4]
100105ec:	3301      	adds	r3, #1
100105ee:	1e58      	subs	r0, r3, #1
100105f0:	0119      	lsls	r1, r3, #4
100105f2:	4301      	orrs	r1, r0
100105f4:	3302      	adds	r3, #2
100105f6:	7011      	strb	r1, [r2, #0]
100105f8:	3201      	adds	r2, #1
100105fa:	2b21      	cmp	r3, #33	; 0x21
100105fc:	d1f7      	bne.n	100105ee <at_ble_init+0xca>
100105fe:	33e0      	adds	r3, #224	; 0xe0
10010600:	33ff      	adds	r3, #255	; 0xff
10010602:	84a3      	strh	r3, [r4, #36]	; 0x24
10010604:	1c23      	adds	r3, r4, #0
10010606:	2500      	movs	r5, #0
10010608:	3373      	adds	r3, #115	; 0x73
1001060a:	701d      	strb	r5, [r3, #0]
1001060c:	1c23      	adds	r3, r4, #0
1001060e:	3372      	adds	r3, #114	; 0x72
10010610:	701d      	strb	r5, [r3, #0]
10010612:	1c23      	adds	r3, r4, #0
10010614:	3376      	adds	r3, #118	; 0x76
10010616:	701d      	strb	r5, [r3, #0]
10010618:	1c23      	adds	r3, r4, #0
1001061a:	33cc      	adds	r3, #204	; 0xcc
1001061c:	801d      	strh	r5, [r3, #0]
1001061e:	1c22      	adds	r2, r4, #0
10010620:	23a0      	movs	r3, #160	; 0xa0
10010622:	32d0      	adds	r2, #208	; 0xd0
10010624:	005b      	lsls	r3, r3, #1
10010626:	8013      	strh	r3, [r2, #0]
10010628:	1c22      	adds	r2, r4, #0
1001062a:	32ce      	adds	r2, #206	; 0xce
1001062c:	8013      	strh	r3, [r2, #0]
1001062e:	1c23      	adds	r3, r4, #0
10010630:	33d2      	adds	r3, #210	; 0xd2
10010632:	801d      	strh	r5, [r3, #0]
10010634:	22fa      	movs	r2, #250	; 0xfa
10010636:	1c23      	adds	r3, r4, #0
10010638:	0052      	lsls	r2, r2, #1
1001063a:	33d4      	adds	r3, #212	; 0xd4
1001063c:	801a      	strh	r2, [r3, #0]
1001063e:	1c23      	adds	r3, r4, #0
10010640:	33d6      	adds	r3, #214	; 0xd6
10010642:	701d      	strb	r5, [r3, #0]
10010644:	1c20      	adds	r0, r4, #0
10010646:	4b23      	ldr	r3, [pc, #140]	; (100106d4 <at_ble_init+0x1b0>)
10010648:	76e5      	strb	r5, [r4, #27]
1001064a:	7725      	strb	r5, [r4, #28]
1001064c:	7765      	strb	r5, [r4, #29]
1001064e:	77a5      	strb	r5, [r4, #30]
10010650:	77e5      	strb	r5, [r4, #31]
10010652:	8425      	strh	r5, [r4, #32]
10010654:	8465      	strh	r5, [r4, #34]	; 0x22
10010656:	4798      	blx	r3
10010658:	1c23      	adds	r3, r4, #0
1001065a:	2207      	movs	r2, #7
1001065c:	3374      	adds	r3, #116	; 0x74
1001065e:	701a      	strb	r2, [r3, #0]
10010660:	1c23      	adds	r3, r4, #0
10010662:	3204      	adds	r2, #4
10010664:	33aa      	adds	r3, #170	; 0xaa
10010666:	801a      	strh	r2, [r3, #0]
10010668:	1c2b      	adds	r3, r5, #0
1001066a:	5d7a      	ldrb	r2, [r7, r5]
1001066c:	33ac      	adds	r3, #172	; 0xac
1001066e:	3501      	adds	r5, #1
10010670:	54e2      	strb	r2, [r4, r3]
10010672:	2d0b      	cmp	r5, #11
10010674:	d1f8      	bne.n	10010668 <at_ble_init+0x144>
10010676:	1c30      	adds	r0, r6, #0
10010678:	b007      	add	sp, #28
1001067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001067c:	10018254 	.word	0x10018254
10010680:	100150d7 	.word	0x100150d7
10010684:	1001ae14 	.word	0x1001ae14
10010688:	10019fb0 	.word	0x10019fb0
1001068c:	10019f10 	.word	0x10019f10
10010690:	1001847c 	.word	0x1001847c
10010694:	10012cd9 	.word	0x10012cd9
10010698:	10010995 	.word	0x10010995
1001069c:	10010ff5 	.word	0x10010ff5
100106a0:	100112a9 	.word	0x100112a9
100106a4:	10011031 	.word	0x10011031
100106a8:	1000eff5 	.word	0x1000eff5
100106ac:	100115a9 	.word	0x100115a9
100106b0:	1000f239 	.word	0x1000f239
100106b4:	10011651 	.word	0x10011651
100106b8:	1000fc11 	.word	0x1000fc11
100106bc:	1000fccd 	.word	0x1000fccd
100106c0:	10012219 	.word	0x10012219
100106c4:	1001ae16 	.word	0x1001ae16
100106c8:	1001aea6 	.word	0x1001aea6
100106cc:	00003a98 	.word	0x00003a98
100106d0:	1001aeb1 	.word	0x1001aeb1
100106d4:	10010495 	.word	0x10010495

100106d8 <at_ble_addr_set>:
100106d8:	b538      	push	{r3, r4, r5, lr}
100106da:	1c45      	adds	r5, r0, #1
100106dc:	1c03      	adds	r3, r0, #0
100106de:	20cf      	movs	r0, #207	; 0xcf
100106e0:	2d00      	cmp	r5, #0
100106e2:	d018      	beq.n	10010716 <at_ble_addr_set+0x3e>
100106e4:	781a      	ldrb	r2, [r3, #0]
100106e6:	2a03      	cmp	r2, #3
100106e8:	d815      	bhi.n	10010716 <at_ble_addr_set+0x3e>
100106ea:	2a01      	cmp	r2, #1
100106ec:	d102      	bne.n	100106f4 <at_ble_addr_set+0x1c>
100106ee:	785a      	ldrb	r2, [r3, #1]
100106f0:	2a00      	cmp	r2, #0
100106f2:	d010      	beq.n	10010716 <at_ble_addr_set+0x3e>
100106f4:	1c1c      	adds	r4, r3, #0
100106f6:	1c29      	adds	r1, r5, #0
100106f8:	2206      	movs	r2, #6
100106fa:	4b07      	ldr	r3, [pc, #28]	; (10010718 <at_ble_addr_set+0x40>)
100106fc:	4807      	ldr	r0, [pc, #28]	; (1001071c <at_ble_addr_set+0x44>)
100106fe:	4798      	blx	r3
10010700:	7823      	ldrb	r3, [r4, #0]
10010702:	4807      	ldr	r0, [pc, #28]	; (10010720 <at_ble_addr_set+0x48>)
10010704:	7103      	strb	r3, [r0, #4]
10010706:	4b07      	ldr	r3, [pc, #28]	; (10010724 <at_ble_addr_set+0x4c>)
10010708:	4798      	blx	r3
1001070a:	7823      	ldrb	r3, [r4, #0]
1001070c:	2b00      	cmp	r3, #0
1001070e:	d102      	bne.n	10010716 <at_ble_addr_set+0x3e>
10010710:	1c28      	adds	r0, r5, #0
10010712:	4b05      	ldr	r3, [pc, #20]	; (10010728 <at_ble_addr_set+0x50>)
10010714:	4798      	blx	r3
10010716:	bd38      	pop	{r3, r4, r5, pc}
10010718:	100150d7 	.word	0x100150d7
1001071c:	1001aeab 	.word	0x1001aeab
10010720:	1001aea6 	.word	0x1001aea6
10010724:	10010495 	.word	0x10010495
10010728:	100116d5 	.word	0x100116d5

1001072c <at_ble_adv_data_set>:
1001072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001072e:	4684      	mov	ip, r0
10010730:	1c0f      	adds	r7, r1, #0
10010732:	1c16      	adds	r6, r2, #0
10010734:	1c1c      	adds	r4, r3, #0
10010736:	2800      	cmp	r0, #0
10010738:	d102      	bne.n	10010740 <at_ble_adv_data_set+0x14>
1001073a:	20e2      	movs	r0, #226	; 0xe2
1001073c:	2a00      	cmp	r2, #0
1001073e:	d02b      	beq.n	10010798 <at_ble_adv_data_set+0x6c>
10010740:	20cf      	movs	r0, #207	; 0xcf
10010742:	2f1f      	cmp	r7, #31
10010744:	d828      	bhi.n	10010798 <at_ble_adv_data_set+0x6c>
10010746:	2c1f      	cmp	r4, #31
10010748:	d826      	bhi.n	10010798 <at_ble_adv_data_set+0x6c>
1001074a:	4663      	mov	r3, ip
1001074c:	2b00      	cmp	r3, #0
1001074e:	d00e      	beq.n	1001076e <at_ble_adv_data_set+0x42>
10010750:	4812      	ldr	r0, [pc, #72]	; (1001079c <at_ble_adv_data_set+0x70>)
10010752:	4d13      	ldr	r5, [pc, #76]	; (100107a0 <at_ble_adv_data_set+0x74>)
10010754:	2f00      	cmp	r7, #0
10010756:	d104      	bne.n	10010762 <at_ble_adv_data_set+0x36>
10010758:	1c39      	adds	r1, r7, #0
1001075a:	221f      	movs	r2, #31
1001075c:	4b11      	ldr	r3, [pc, #68]	; (100107a4 <at_ble_adv_data_set+0x78>)
1001075e:	4798      	blx	r3
10010760:	e003      	b.n	1001076a <at_ble_adv_data_set+0x3e>
10010762:	4661      	mov	r1, ip
10010764:	1c3a      	adds	r2, r7, #0
10010766:	4b10      	ldr	r3, [pc, #64]	; (100107a8 <at_ble_adv_data_set+0x7c>)
10010768:	4798      	blx	r3
1001076a:	3572      	adds	r5, #114	; 0x72
1001076c:	702f      	strb	r7, [r5, #0]
1001076e:	1e30      	subs	r0, r6, #0
10010770:	d012      	beq.n	10010798 <at_ble_adv_data_set+0x6c>
10010772:	4d0b      	ldr	r5, [pc, #44]	; (100107a0 <at_ble_adv_data_set+0x74>)
10010774:	480d      	ldr	r0, [pc, #52]	; (100107ac <at_ble_adv_data_set+0x80>)
10010776:	2c00      	cmp	r4, #0
10010778:	d107      	bne.n	1001078a <at_ble_adv_data_set+0x5e>
1001077a:	1c21      	adds	r1, r4, #0
1001077c:	221f      	movs	r2, #31
1001077e:	4b09      	ldr	r3, [pc, #36]	; (100107a4 <at_ble_adv_data_set+0x78>)
10010780:	3573      	adds	r5, #115	; 0x73
10010782:	4798      	blx	r3
10010784:	702c      	strb	r4, [r5, #0]
10010786:	1c20      	adds	r0, r4, #0
10010788:	e006      	b.n	10010798 <at_ble_adv_data_set+0x6c>
1001078a:	1c31      	adds	r1, r6, #0
1001078c:	1c22      	adds	r2, r4, #0
1001078e:	4b06      	ldr	r3, [pc, #24]	; (100107a8 <at_ble_adv_data_set+0x7c>)
10010790:	4798      	blx	r3
10010792:	2000      	movs	r0, #0
10010794:	3573      	adds	r5, #115	; 0x73
10010796:	702c      	strb	r4, [r5, #0]
10010798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001079a:	46c0      	nop			; (mov r8, r8)
1001079c:	1001aeda 	.word	0x1001aeda
100107a0:	1001aea6 	.word	0x1001aea6
100107a4:	100150e9 	.word	0x100150e9
100107a8:	100150d7 	.word	0x100150d7
100107ac:	1001aef9 	.word	0x1001aef9

100107b0 <at_ble_adv_start>:
100107b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100107b2:	b091      	sub	sp, #68	; 0x44
100107b4:	1c1f      	adds	r7, r3, #0
100107b6:	ab16      	add	r3, sp, #88	; 0x58
100107b8:	881d      	ldrh	r5, [r3, #0]
100107ba:	ab17      	add	r3, sp, #92	; 0x5c
100107bc:	881b      	ldrh	r3, [r3, #0]
100107be:	910d      	str	r1, [sp, #52]	; 0x34
100107c0:	930e      	str	r3, [sp, #56]	; 0x38
100107c2:	ab18      	add	r3, sp, #96	; 0x60
100107c4:	781b      	ldrb	r3, [r3, #0]
100107c6:	1c04      	adds	r4, r0, #0
100107c8:	930f      	str	r3, [sp, #60]	; 0x3c
100107ca:	4b42      	ldr	r3, [pc, #264]	; (100108d4 <at_ble_adv_start+0x124>)
100107cc:	1c16      	adds	r6, r2, #0
100107ce:	3373      	adds	r3, #115	; 0x73
100107d0:	781b      	ldrb	r3, [r3, #0]
100107d2:	20cf      	movs	r0, #207	; 0xcf
100107d4:	930c      	str	r3, [sp, #48]	; 0x30
100107d6:	2c01      	cmp	r4, #1
100107d8:	d103      	bne.n	100107e2 <at_ble_adv_start+0x32>
100107da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100107dc:	2b00      	cmp	r3, #0
100107de:	d176      	bne.n	100108ce <at_ble_adv_start+0x11e>
100107e0:	e024      	b.n	1001082c <at_ble_adv_start+0x7c>
100107e2:	2c04      	cmp	r4, #4
100107e4:	d873      	bhi.n	100108ce <at_ble_adv_start+0x11e>
100107e6:	2380      	movs	r3, #128	; 0x80
100107e8:	01db      	lsls	r3, r3, #7
100107ea:	429d      	cmp	r5, r3
100107ec:	d86f      	bhi.n	100108ce <at_ble_adv_start+0x11e>
100107ee:	2c00      	cmp	r4, #0
100107f0:	d102      	bne.n	100107f8 <at_ble_adv_start+0x48>
100107f2:	2d1f      	cmp	r5, #31
100107f4:	d96b      	bls.n	100108ce <at_ble_adv_start+0x11e>
100107f6:	e003      	b.n	10010800 <at_ble_adv_start+0x50>
100107f8:	2d9f      	cmp	r5, #159	; 0x9f
100107fa:	d801      	bhi.n	10010800 <at_ble_adv_start+0x50>
100107fc:	2c01      	cmp	r4, #1
100107fe:	d166      	bne.n	100108ce <at_ble_adv_start+0x11e>
10010800:	2f00      	cmp	r7, #0
10010802:	d009      	beq.n	10010818 <at_ble_adv_start+0x68>
10010804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10010806:	20cf      	movs	r0, #207	; 0xcf
10010808:	3b01      	subs	r3, #1
1001080a:	2b01      	cmp	r3, #1
1001080c:	d95f      	bls.n	100108ce <at_ble_adv_start+0x11e>
1001080e:	2c01      	cmp	r4, #1
10010810:	d102      	bne.n	10010818 <at_ble_adv_start+0x68>
10010812:	2d00      	cmp	r5, #0
10010814:	d100      	bne.n	10010818 <at_ble_adv_start+0x68>
10010816:	3520      	adds	r5, #32
10010818:	4b2f      	ldr	r3, [pc, #188]	; (100108d8 <at_ble_adv_start+0x128>)
1001081a:	4798      	blx	r3
1001081c:	1c01      	adds	r1, r0, #0
1001081e:	2e00      	cmp	r6, #0
10010820:	d043      	beq.n	100108aa <at_ble_adv_start+0xfa>
10010822:	7833      	ldrb	r3, [r6, #0]
10010824:	1e60      	subs	r0, r4, #1
10010826:	2b00      	cmp	r3, #0
10010828:	d109      	bne.n	1001083e <at_ble_adv_start+0x8e>
1001082a:	e03b      	b.n	100108a4 <at_ble_adv_start+0xf4>
1001082c:	2380      	movs	r3, #128	; 0x80
1001082e:	01db      	lsls	r3, r3, #7
10010830:	429d      	cmp	r5, r3
10010832:	d84c      	bhi.n	100108ce <at_ble_adv_start+0x11e>
10010834:	2e00      	cmp	r6, #0
10010836:	d04a      	beq.n	100108ce <at_ble_adv_start+0x11e>
10010838:	2f00      	cmp	r7, #0
1001083a:	d1e3      	bne.n	10010804 <at_ble_adv_start+0x54>
1001083c:	e02b      	b.n	10010896 <at_ble_adv_start+0xe6>
1001083e:	2301      	movs	r3, #1
10010840:	2803      	cmp	r0, #3
10010842:	d93a      	bls.n	100108ba <at_ble_adv_start+0x10a>
10010844:	200d      	movs	r0, #13
10010846:	1c72      	adds	r2, r6, #1
10010848:	e002      	b.n	10010850 <at_ble_adv_start+0xa0>
1001084a:	200e      	movs	r0, #14
1001084c:	1e32      	subs	r2, r6, #0
1001084e:	d1fa      	bne.n	10010846 <at_ble_adv_start+0x96>
10010850:	4c20      	ldr	r4, [pc, #128]	; (100108d4 <at_ble_adv_start+0x124>)
10010852:	3474      	adds	r4, #116	; 0x74
10010854:	7826      	ldrb	r6, [r4, #0]
10010856:	2407      	movs	r4, #7
10010858:	2e00      	cmp	r6, #0
1001085a:	d000      	beq.n	1001085e <at_ble_adv_start+0xae>
1001085c:	1c34      	adds	r4, r6, #0
1001085e:	9200      	str	r2, [sp, #0]
10010860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010862:	9403      	str	r4, [sp, #12]
10010864:	9204      	str	r2, [sp, #16]
10010866:	4a1b      	ldr	r2, [pc, #108]	; (100108d4 <at_ble_adv_start+0x124>)
10010868:	9501      	str	r5, [sp, #4]
1001086a:	9502      	str	r5, [sp, #8]
1001086c:	9705      	str	r7, [sp, #20]
1001086e:	3272      	adds	r2, #114	; 0x72
10010870:	7812      	ldrb	r2, [r2, #0]
10010872:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10010874:	9206      	str	r2, [sp, #24]
10010876:	4a19      	ldr	r2, [pc, #100]	; (100108dc <at_ble_adv_start+0x12c>)
10010878:	9207      	str	r2, [sp, #28]
1001087a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001087c:	9208      	str	r2, [sp, #32]
1001087e:	4a18      	ldr	r2, [pc, #96]	; (100108e0 <at_ble_adv_start+0x130>)
10010880:	9209      	str	r2, [sp, #36]	; 0x24
10010882:	2264      	movs	r2, #100	; 0x64
10010884:	4362      	muls	r2, r4
10010886:	b292      	uxth	r2, r2
10010888:	920a      	str	r2, [sp, #40]	; 0x28
1001088a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1001088c:	4c15      	ldr	r4, [pc, #84]	; (100108e4 <at_ble_adv_start+0x134>)
1001088e:	920b      	str	r2, [sp, #44]	; 0x2c
10010890:	4a15      	ldr	r2, [pc, #84]	; (100108e8 <at_ble_adv_start+0x138>)
10010892:	47a0      	blx	r4
10010894:	e01b      	b.n	100108ce <at_ble_adv_start+0x11e>
10010896:	2d00      	cmp	r5, #0
10010898:	d1be      	bne.n	10010818 <at_ble_adv_start+0x68>
1001089a:	4b0f      	ldr	r3, [pc, #60]	; (100108d8 <at_ble_adv_start+0x128>)
1001089c:	4798      	blx	r3
1001089e:	2520      	movs	r5, #32
100108a0:	1c01      	adds	r1, r0, #0
100108a2:	e7be      	b.n	10010822 <at_ble_adv_start+0x72>
100108a4:	2803      	cmp	r0, #3
100108a6:	d8cd      	bhi.n	10010844 <at_ble_adv_start+0x94>
100108a8:	e006      	b.n	100108b8 <at_ble_adv_start+0x108>
100108aa:	1e60      	subs	r0, r4, #1
100108ac:	2803      	cmp	r0, #3
100108ae:	d903      	bls.n	100108b8 <at_ble_adv_start+0x108>
100108b0:	1c33      	adds	r3, r6, #0
100108b2:	200d      	movs	r0, #13
100108b4:	1c32      	adds	r2, r6, #0
100108b6:	e7cb      	b.n	10010850 <at_ble_adv_start+0xa0>
100108b8:	2300      	movs	r3, #0
100108ba:	f002 fb7f 	bl	10012fbc <__gnu_thumb1_case_sqi>
100108be:	06c6      	.short	0x06c6
100108c0:	0204      	.short	0x0204
100108c2:	200f      	movs	r0, #15
100108c4:	e7c2      	b.n	1001084c <at_ble_adv_start+0x9c>
100108c6:	2200      	movs	r2, #0
100108c8:	920c      	str	r2, [sp, #48]	; 0x30
100108ca:	200c      	movs	r0, #12
100108cc:	e7be      	b.n	1001084c <at_ble_adv_start+0x9c>
100108ce:	b011      	add	sp, #68	; 0x44
100108d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108d2:	46c0      	nop			; (mov r8, r8)
100108d4:	1001aea6 	.word	0x1001aea6
100108d8:	10012765 	.word	0x10012765
100108dc:	1001aeda 	.word	0x1001aeda
100108e0:	1001aef9 	.word	0x1001aef9
100108e4:	10012645 	.word	0x10012645
100108e8:	00003a98 	.word	0x00003a98

100108ec <at_ble_adv_stop>:
100108ec:	b508      	push	{r3, lr}
100108ee:	4b01      	ldr	r3, [pc, #4]	; (100108f4 <at_ble_adv_stop+0x8>)
100108f0:	4798      	blx	r3
100108f2:	bd08      	pop	{r3, pc}
100108f4:	10012471 	.word	0x10012471

100108f8 <at_ble_scan_stop>:
100108f8:	b510      	push	{r4, lr}
100108fa:	4b05      	ldr	r3, [pc, #20]	; (10010910 <at_ble_scan_stop+0x18>)
100108fc:	4798      	blx	r3
100108fe:	1e04      	subs	r4, r0, #0
10010900:	d103      	bne.n	1001090a <at_ble_scan_stop+0x12>
10010902:	20d1      	movs	r0, #209	; 0xd1
10010904:	4b03      	ldr	r3, [pc, #12]	; (10010914 <at_ble_scan_stop+0x1c>)
10010906:	0100      	lsls	r0, r0, #4
10010908:	4798      	blx	r3
1001090a:	1c20      	adds	r0, r4, #0
1001090c:	bd10      	pop	{r4, pc}
1001090e:	46c0      	nop			; (mov r8, r8)
10010910:	10012471 	.word	0x10012471
10010914:	100103a5 	.word	0x100103a5

10010918 <at_ble_disconnect>:
10010918:	b538      	push	{r3, r4, r5, lr}
1001091a:	1c04      	adds	r4, r0, #0
1001091c:	4b04      	ldr	r3, [pc, #16]	; (10010930 <at_ble_disconnect+0x18>)
1001091e:	1c08      	adds	r0, r1, #0
10010920:	1c21      	adds	r1, r4, #0
10010922:	4798      	blx	r3
10010924:	1c05      	adds	r5, r0, #0
10010926:	4b03      	ldr	r3, [pc, #12]	; (10010934 <at_ble_disconnect+0x1c>)
10010928:	1c20      	adds	r0, r4, #0
1001092a:	4798      	blx	r3
1001092c:	1c28      	adds	r0, r5, #0
1001092e:	bd38      	pop	{r3, r4, r5, pc}
10010930:	10011ae9 	.word	0x10011ae9
10010934:	100103e9 	.word	0x100103e9

10010938 <at_ble_conn_update_reply>:
10010938:	b510      	push	{r4, lr}
1001093a:	4c01      	ldr	r4, [pc, #4]	; (10010940 <at_ble_conn_update_reply+0x8>)
1001093c:	47a0      	blx	r4
1001093e:	bd10      	pop	{r4, pc}
10010940:	10011fd9 	.word	0x10011fd9

10010944 <at_ble_random_address_resolve>:
10010944:	b510      	push	{r4, lr}
10010946:	23cf      	movs	r3, #207	; 0xcf
10010948:	2800      	cmp	r0, #0
1001094a:	d00a      	beq.n	10010962 <at_ble_random_address_resolve+0x1e>
1001094c:	2900      	cmp	r1, #0
1001094e:	d008      	beq.n	10010962 <at_ble_random_address_resolve+0x1e>
10010950:	2a00      	cmp	r2, #0
10010952:	d006      	beq.n	10010962 <at_ble_random_address_resolve+0x1e>
10010954:	780c      	ldrb	r4, [r1, #0]
10010956:	2c02      	cmp	r4, #2
10010958:	d103      	bne.n	10010962 <at_ble_random_address_resolve+0x1e>
1001095a:	4b03      	ldr	r3, [pc, #12]	; (10010968 <at_ble_random_address_resolve+0x24>)
1001095c:	3101      	adds	r1, #1
1001095e:	4798      	blx	r3
10010960:	2300      	movs	r3, #0
10010962:	1c18      	adds	r0, r3, #0
10010964:	bd10      	pop	{r4, pc}
10010966:	46c0      	nop			; (mov r8, r8)
10010968:	10012805 	.word	0x10012805

1001096c <at_ble_uuid_type2len>:
1001096c:	23cf      	movs	r3, #207	; 0xcf
1001096e:	2802      	cmp	r0, #2
10010970:	d801      	bhi.n	10010976 <at_ble_uuid_type2len+0xa>
10010972:	4b02      	ldr	r3, [pc, #8]	; (1001097c <at_ble_uuid_type2len+0x10>)
10010974:	5c1b      	ldrb	r3, [r3, r0]
10010976:	1c18      	adds	r0, r3, #0
10010978:	4770      	bx	lr
1001097a:	46c0      	nop			; (mov r8, r8)
1001097c:	1001825f 	.word	0x1001825f

10010980 <at_ble_uuid_len2type>:
10010980:	1e83      	subs	r3, r0, #2
10010982:	b2db      	uxtb	r3, r3
10010984:	2003      	movs	r0, #3
10010986:	2b0e      	cmp	r3, #14
10010988:	d801      	bhi.n	1001098e <at_ble_uuid_len2type+0xe>
1001098a:	4a01      	ldr	r2, [pc, #4]	; (10010990 <at_ble_uuid_len2type+0x10>)
1001098c:	5cd0      	ldrb	r0, [r2, r3]
1001098e:	4770      	bx	lr
10010990:	10018262 	.word	0x10018262

10010994 <init_gatt_client_module>:
10010994:	2200      	movs	r2, #0
10010996:	4b01      	ldr	r3, [pc, #4]	; (1001099c <init_gatt_client_module+0x8>)
10010998:	801a      	strh	r2, [r3, #0]
1001099a:	4770      	bx	lr
1001099c:	10019f08 	.word	0x10019f08

100109a0 <db_searchATT>:
100109a0:	b570      	push	{r4, r5, r6, lr}
100109a2:	1c05      	adds	r5, r0, #0
100109a4:	2400      	movs	r4, #0
100109a6:	4b0c      	ldr	r3, [pc, #48]	; (100109d8 <db_searchATT+0x38>)
100109a8:	6819      	ldr	r1, [r3, #0]
100109aa:	4b0c      	ldr	r3, [pc, #48]	; (100109dc <db_searchATT+0x3c>)
100109ac:	681e      	ldr	r6, [r3, #0]
100109ae:	428c      	cmp	r4, r1
100109b0:	dc10      	bgt.n	100109d4 <db_searchATT+0x34>
100109b2:	200c      	movs	r0, #12
100109b4:	1863      	adds	r3, r4, r1
100109b6:	0fda      	lsrs	r2, r3, #31
100109b8:	18d3      	adds	r3, r2, r3
100109ba:	1c02      	adds	r2, r0, #0
100109bc:	105b      	asrs	r3, r3, #1
100109be:	435a      	muls	r2, r3
100109c0:	18b0      	adds	r0, r6, r2
100109c2:	8802      	ldrh	r2, [r0, #0]
100109c4:	42aa      	cmp	r2, r5
100109c6:	d201      	bcs.n	100109cc <db_searchATT+0x2c>
100109c8:	1e59      	subs	r1, r3, #1
100109ca:	e7f0      	b.n	100109ae <db_searchATT+0xe>
100109cc:	42aa      	cmp	r2, r5
100109ce:	d902      	bls.n	100109d6 <db_searchATT+0x36>
100109d0:	1c5c      	adds	r4, r3, #1
100109d2:	e7ec      	b.n	100109ae <db_searchATT+0xe>
100109d4:	2000      	movs	r0, #0
100109d6:	bd70      	pop	{r4, r5, r6, pc}
100109d8:	10019f1c 	.word	0x10019f1c
100109dc:	10019f14 	.word	0x10019f14

100109e0 <att_permissions>:
100109e0:	b530      	push	{r4, r5, lr}
100109e2:	2403      	movs	r4, #3
100109e4:	1c05      	adds	r5, r0, #0
100109e6:	2301      	movs	r3, #1
100109e8:	4025      	ands	r5, r4
100109ea:	42a5      	cmp	r5, r4
100109ec:	d009      	beq.n	10010a02 <att_permissions+0x22>
100109ee:	1c23      	adds	r3, r4, #0
100109f0:	1924      	adds	r4, r4, r4
100109f2:	4220      	tst	r0, r4
100109f4:	d105      	bne.n	10010a02 <att_permissions+0x22>
100109f6:	3b02      	subs	r3, #2
100109f8:	4218      	tst	r0, r3
100109fa:	d102      	bne.n	10010a02 <att_permissions+0x22>
100109fc:	1e4b      	subs	r3, r1, #1
100109fe:	4199      	sbcs	r1, r3
10010a00:	b28b      	uxth	r3, r1
10010a02:	2130      	movs	r1, #48	; 0x30
10010a04:	4001      	ands	r1, r0
10010a06:	2930      	cmp	r1, #48	; 0x30
10010a08:	d007      	beq.n	10010a1a <att_permissions+0x3a>
10010a0a:	0641      	lsls	r1, r0, #25
10010a0c:	d401      	bmi.n	10010a12 <att_permissions+0x32>
10010a0e:	0681      	lsls	r1, r0, #26
10010a10:	d501      	bpl.n	10010a16 <att_permissions+0x36>
10010a12:	4807      	ldr	r0, [pc, #28]	; (10010a30 <att_permissions+0x50>)
10010a14:	e009      	b.n	10010a2a <att_permissions+0x4a>
10010a16:	06c1      	lsls	r1, r0, #27
10010a18:	d501      	bpl.n	10010a1e <att_permissions+0x3e>
10010a1a:	4806      	ldr	r0, [pc, #24]	; (10010a34 <att_permissions+0x54>)
10010a1c:	e005      	b.n	10010a2a <att_permissions+0x4a>
10010a1e:	2a00      	cmp	r2, #0
10010a20:	d001      	beq.n	10010a26 <att_permissions+0x46>
10010a22:	2204      	movs	r2, #4
10010a24:	4313      	orrs	r3, r2
10010a26:	2080      	movs	r0, #128	; 0x80
10010a28:	0180      	lsls	r0, r0, #6
10010a2a:	4318      	orrs	r0, r3
10010a2c:	bd30      	pop	{r4, r5, pc}
10010a2e:	46c0      	nop			; (mov r8, r8)
10010a30:	0000200c 	.word	0x0000200c
10010a34:	00002004 	.word	0x00002004

10010a38 <char_permissions>:
10010a38:	b530      	push	{r4, r5, lr}
10010a3a:	2300      	movs	r3, #0
10010a3c:	0784      	lsls	r4, r0, #30
10010a3e:	d503      	bpl.n	10010a48 <char_permissions+0x10>
10010a40:	3301      	adds	r3, #1
10010a42:	4219      	tst	r1, r3
10010a44:	d100      	bne.n	10010a48 <char_permissions+0x10>
10010a46:	3302      	adds	r3, #2
10010a48:	0704      	lsls	r4, r0, #28
10010a4a:	d508      	bpl.n	10010a5e <char_permissions+0x26>
10010a4c:	06cc      	lsls	r4, r1, #27
10010a4e:	d501      	bpl.n	10010a54 <char_permissions+0x1c>
10010a50:	2404      	movs	r4, #4
10010a52:	e000      	b.n	10010a56 <char_permissions+0x1e>
10010a54:	240c      	movs	r4, #12
10010a56:	4323      	orrs	r3, r4
10010a58:	2480      	movs	r4, #128	; 0x80
10010a5a:	01a4      	lsls	r4, r4, #6
10010a5c:	4323      	orrs	r3, r4
10010a5e:	0684      	lsls	r4, r0, #26
10010a60:	d506      	bpl.n	10010a70 <char_permissions+0x38>
10010a62:	2406      	movs	r4, #6
10010a64:	4221      	tst	r1, r4
10010a66:	d101      	bne.n	10010a6c <char_permissions+0x34>
10010a68:	340a      	adds	r4, #10
10010a6a:	e000      	b.n	10010a6e <char_permissions+0x36>
10010a6c:	2430      	movs	r4, #48	; 0x30
10010a6e:	4323      	orrs	r3, r4
10010a70:	06c4      	lsls	r4, r0, #27
10010a72:	d506      	bpl.n	10010a82 <char_permissions+0x4a>
10010a74:	2406      	movs	r4, #6
10010a76:	4221      	tst	r1, r4
10010a78:	d101      	bne.n	10010a7e <char_permissions+0x46>
10010a7a:	343a      	adds	r4, #58	; 0x3a
10010a7c:	e000      	b.n	10010a80 <char_permissions+0x48>
10010a7e:	24c0      	movs	r4, #192	; 0xc0
10010a80:	4323      	orrs	r3, r4
10010a82:	2480      	movs	r4, #128	; 0x80
10010a84:	0064      	lsls	r4, r4, #1
10010a86:	4220      	tst	r0, r4
10010a88:	d000      	beq.n	10010a8c <char_permissions+0x54>
10010a8a:	4323      	orrs	r3, r4
10010a8c:	07c4      	lsls	r4, r0, #31
10010a8e:	d502      	bpl.n	10010a96 <char_permissions+0x5e>
10010a90:	2480      	movs	r4, #128	; 0x80
10010a92:	00a4      	lsls	r4, r4, #2
10010a94:	4323      	orrs	r3, r4
10010a96:	2404      	movs	r4, #4
10010a98:	4220      	tst	r0, r4
10010a9a:	d006      	beq.n	10010aaa <char_permissions+0x72>
10010a9c:	06cd      	lsls	r5, r1, #27
10010a9e:	d400      	bmi.n	10010aa2 <char_permissions+0x6a>
10010aa0:	240c      	movs	r4, #12
10010aa2:	4323      	orrs	r3, r4
10010aa4:	2480      	movs	r4, #128	; 0x80
10010aa6:	0124      	lsls	r4, r4, #4
10010aa8:	4323      	orrs	r3, r4
10010aaa:	0644      	lsls	r4, r0, #25
10010aac:	d501      	bpl.n	10010ab2 <char_permissions+0x7a>
10010aae:	4c08      	ldr	r4, [pc, #32]	; (10010ad0 <char_permissions+0x98>)
10010ab0:	4323      	orrs	r3, r4
10010ab2:	0600      	lsls	r0, r0, #24
10010ab4:	d507      	bpl.n	10010ac6 <char_permissions+0x8e>
10010ab6:	2004      	movs	r0, #4
10010ab8:	06c9      	lsls	r1, r1, #27
10010aba:	d400      	bmi.n	10010abe <char_permissions+0x86>
10010abc:	200c      	movs	r0, #12
10010abe:	4303      	orrs	r3, r0
10010ac0:	2084      	movs	r0, #132	; 0x84
10010ac2:	0180      	lsls	r0, r0, #6
10010ac4:	4303      	orrs	r3, r0
10010ac6:	0390      	lsls	r0, r2, #14
10010ac8:	4303      	orrs	r3, r0
10010aca:	b298      	uxth	r0, r3
10010acc:	bd30      	pop	{r4, r5, pc}
10010ace:	46c0      	nop			; (mov r8, r8)
10010ad0:	00001004 	.word	0x00001004

10010ad4 <presentation_format_define>:
10010ad4:	b507      	push	{r0, r1, r2, lr}
10010ad6:	466a      	mov	r2, sp
10010ad8:	780b      	ldrb	r3, [r1, #0]
10010ada:	7013      	strb	r3, [r2, #0]
10010adc:	784b      	ldrb	r3, [r1, #1]
10010ade:	7053      	strb	r3, [r2, #1]
10010ae0:	884b      	ldrh	r3, [r1, #2]
10010ae2:	7093      	strb	r3, [r2, #2]
10010ae4:	0a1b      	lsrs	r3, r3, #8
10010ae6:	70d3      	strb	r3, [r2, #3]
10010ae8:	790b      	ldrb	r3, [r1, #4]
10010aea:	7113      	strb	r3, [r2, #4]
10010aec:	88cb      	ldrh	r3, [r1, #6]
10010aee:	2107      	movs	r1, #7
10010af0:	7153      	strb	r3, [r2, #5]
10010af2:	0a1b      	lsrs	r3, r3, #8
10010af4:	7193      	strb	r3, [r2, #6]
10010af6:	4b01      	ldr	r3, [pc, #4]	; (10010afc <presentation_format_define+0x28>)
10010af8:	4798      	blx	r3
10010afa:	bd0e      	pop	{r1, r2, r3, pc}
10010afc:	10012e69 	.word	0x10012e69

10010b00 <db_addATT>:
10010b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b02:	4c29      	ldr	r4, [pc, #164]	; (10010ba8 <db_addATT+0xa8>)
10010b04:	1c1d      	adds	r5, r3, #0
10010b06:	6823      	ldr	r3, [r4, #0]
10010b08:	9001      	str	r0, [sp, #4]
10010b0a:	26d3      	movs	r6, #211	; 0xd3
10010b0c:	2b00      	cmp	r3, #0
10010b0e:	d048      	beq.n	10010ba2 <db_addATT+0xa2>
10010b10:	1c1e      	adds	r6, r3, #0
10010b12:	3e0c      	subs	r6, #12
10010b14:	6026      	str	r6, [r4, #0]
10010b16:	2900      	cmp	r1, #0
10010b18:	d005      	beq.n	10010b26 <db_addATT+0x26>
10010b1a:	4f24      	ldr	r7, [pc, #144]	; (10010bac <db_addATT+0xac>)
10010b1c:	46bc      	mov	ip, r7
10010b1e:	4660      	mov	r0, ip
10010b20:	683f      	ldr	r7, [r7, #0]
10010b22:	18bf      	adds	r7, r7, r2
10010b24:	6007      	str	r7, [r0, #0]
10010b26:	4821      	ldr	r0, [pc, #132]	; (10010bac <db_addATT+0xac>)
10010b28:	6807      	ldr	r7, [r0, #0]
10010b2a:	4684      	mov	ip, r0
10010b2c:	42be      	cmp	r6, r7
10010b2e:	d932      	bls.n	10010b96 <db_addATT+0x96>
10010b30:	4668      	mov	r0, sp
10010b32:	8880      	ldrh	r0, [r0, #4]
10010b34:	3b0c      	subs	r3, #12
10010b36:	8018      	strh	r0, [r3, #0]
10010b38:	6823      	ldr	r3, [r4, #0]
10010b3a:	2900      	cmp	r1, #0
10010b3c:	d009      	beq.n	10010b52 <db_addATT+0x52>
10010b3e:	2a00      	cmp	r2, #0
10010b40:	d007      	beq.n	10010b52 <db_addATT+0x52>
10010b42:	4660      	mov	r0, ip
10010b44:	6800      	ldr	r0, [r0, #0]
10010b46:	809a      	strh	r2, [r3, #4]
10010b48:	1a80      	subs	r0, r0, r2
10010b4a:	6098      	str	r0, [r3, #8]
10010b4c:	4b18      	ldr	r3, [pc, #96]	; (10010bb0 <db_addATT+0xb0>)
10010b4e:	4798      	blx	r3
10010b50:	e002      	b.n	10010b58 <db_addATT+0x58>
10010b52:	2100      	movs	r1, #0
10010b54:	809a      	strh	r2, [r3, #4]
10010b56:	6099      	str	r1, [r3, #8]
10010b58:	2300      	movs	r3, #0
10010b5a:	6822      	ldr	r2, [r4, #0]
10010b5c:	7093      	strb	r3, [r2, #2]
10010b5e:	3303      	adds	r3, #3
10010b60:	402b      	ands	r3, r5
10010b62:	2b03      	cmp	r3, #3
10010b64:	d001      	beq.n	10010b6a <db_addATT+0x6a>
10010b66:	076b      	lsls	r3, r5, #29
10010b68:	d504      	bpl.n	10010b74 <db_addATT+0x74>
10010b6a:	2101      	movs	r1, #1
10010b6c:	6822      	ldr	r2, [r4, #0]
10010b6e:	7893      	ldrb	r3, [r2, #2]
10010b70:	430b      	orrs	r3, r1
10010b72:	7093      	strb	r3, [r2, #2]
10010b74:	2330      	movs	r3, #48	; 0x30
10010b76:	402b      	ands	r3, r5
10010b78:	2b30      	cmp	r3, #48	; 0x30
10010b7a:	d001      	beq.n	10010b80 <db_addATT+0x80>
10010b7c:	066b      	lsls	r3, r5, #25
10010b7e:	d504      	bpl.n	10010b8a <db_addATT+0x8a>
10010b80:	2102      	movs	r1, #2
10010b82:	6822      	ldr	r2, [r4, #0]
10010b84:	7893      	ldrb	r3, [r2, #2]
10010b86:	430b      	orrs	r3, r1
10010b88:	7093      	strb	r3, [r2, #2]
10010b8a:	4a0a      	ldr	r2, [pc, #40]	; (10010bb4 <db_addATT+0xb4>)
10010b8c:	2600      	movs	r6, #0
10010b8e:	6813      	ldr	r3, [r2, #0]
10010b90:	3301      	adds	r3, #1
10010b92:	6013      	str	r3, [r2, #0]
10010b94:	e005      	b.n	10010ba2 <db_addATT+0xa2>
10010b96:	6023      	str	r3, [r4, #0]
10010b98:	2611      	movs	r6, #17
10010b9a:	2900      	cmp	r1, #0
10010b9c:	d001      	beq.n	10010ba2 <db_addATT+0xa2>
10010b9e:	1aba      	subs	r2, r7, r2
10010ba0:	6002      	str	r2, [r0, #0]
10010ba2:	1c30      	adds	r0, r6, #0
10010ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010ba6:	46c0      	nop			; (mov r8, r8)
10010ba8:	10019f14 	.word	0x10019f14
10010bac:	10019f18 	.word	0x10019f18
10010bb0:	100150d7 	.word	0x100150d7
10010bb4:	10019f1c 	.word	0x10019f1c

10010bb8 <user_description_define>:
10010bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010bba:	1c05      	adds	r5, r0, #0
10010bbc:	20cf      	movs	r0, #207	; 0xcf
10010bbe:	2a00      	cmp	r2, #0
10010bc0:	d01c      	beq.n	10010bfc <user_description_define+0x44>
10010bc2:	1c14      	adds	r4, r2, #0
10010bc4:	2203      	movs	r2, #3
10010bc6:	1c1e      	adds	r6, r3, #0
10010bc8:	400a      	ands	r2, r1
10010bca:	1c0b      	adds	r3, r1, #0
10010bcc:	3a03      	subs	r2, #3
10010bce:	4251      	negs	r1, r2
10010bd0:	4151      	adcs	r1, r2
10010bd2:	075a      	lsls	r2, r3, #29
10010bd4:	0fd2      	lsrs	r2, r2, #31
10010bd6:	430a      	orrs	r2, r1
10010bd8:	03d2      	lsls	r2, r2, #15
10010bda:	4f09      	ldr	r7, [pc, #36]	; (10010c00 <user_description_define+0x48>)
10010bdc:	1c28      	adds	r0, r5, #0
10010bde:	2a00      	cmp	r2, #0
10010be0:	d003      	beq.n	10010bea <user_description_define+0x32>
10010be2:	1c21      	adds	r1, r4, #0
10010be4:	1c32      	adds	r2, r6, #0
10010be6:	47b8      	blx	r7
10010be8:	e008      	b.n	10010bfc <user_description_define+0x44>
10010bea:	1c11      	adds	r1, r2, #0
10010bec:	47b8      	blx	r7
10010bee:	2800      	cmp	r0, #0
10010bf0:	d104      	bne.n	10010bfc <user_description_define+0x44>
10010bf2:	1c28      	adds	r0, r5, #0
10010bf4:	1c31      	adds	r1, r6, #0
10010bf6:	1c22      	adds	r2, r4, #0
10010bf8:	4b02      	ldr	r3, [pc, #8]	; (10010c04 <user_description_define+0x4c>)
10010bfa:	4798      	blx	r3
10010bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010bfe:	46c0      	nop			; (mov r8, r8)
10010c00:	10010b01 	.word	0x10010b01
10010c04:	10012e69 	.word	0x10012e69

10010c08 <at_ble_read_authorize_reply.part.1>:
10010c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010c0a:	4b09      	ldr	r3, [pc, #36]	; (10010c30 <at_ble_read_authorize_reply.part.1+0x28>)
10010c0c:	1c05      	adds	r5, r0, #0
10010c0e:	1c08      	adds	r0, r1, #0
10010c10:	1c0c      	adds	r4, r1, #0
10010c12:	4798      	blx	r3
10010c14:	2800      	cmp	r0, #0
10010c16:	d009      	beq.n	10010c2c <at_ble_read_authorize_reply.part.1+0x24>
10010c18:	6882      	ldr	r2, [r0, #8]
10010c1a:	2a00      	cmp	r2, #0
10010c1c:	d006      	beq.n	10010c2c <at_ble_read_authorize_reply.part.1+0x24>
10010c1e:	8883      	ldrh	r3, [r0, #4]
10010c20:	1c29      	adds	r1, r5, #0
10010c22:	9200      	str	r2, [sp, #0]
10010c24:	1c20      	adds	r0, r4, #0
10010c26:	2200      	movs	r2, #0
10010c28:	4c02      	ldr	r4, [pc, #8]	; (10010c34 <at_ble_read_authorize_reply.part.1+0x2c>)
10010c2a:	47a0      	blx	r4
10010c2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010c2e:	46c0      	nop			; (mov r8, r8)
10010c30:	100109a1 	.word	0x100109a1
10010c34:	10012901 	.word	0x10012901

10010c38 <internal_at_ble_service_define>:
10010c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c3a:	b08b      	sub	sp, #44	; 0x2c
10010c3c:	9306      	str	r3, [sp, #24]
10010c3e:	ab10      	add	r3, sp, #64	; 0x40
10010c40:	9202      	str	r2, [sp, #8]
10010c42:	cb04      	ldmia	r3!, {r2}
10010c44:	1c05      	adds	r5, r0, #0
10010c46:	881b      	ldrh	r3, [r3, #0]
10010c48:	9105      	str	r1, [sp, #20]
10010c4a:	9303      	str	r3, [sp, #12]
10010c4c:	ab12      	add	r3, sp, #72	; 0x48
10010c4e:	781b      	ldrb	r3, [r3, #0]
10010c50:	20cf      	movs	r0, #207	; 0xcf
10010c52:	9304      	str	r3, [sp, #16]
10010c54:	2d00      	cmp	r5, #0
10010c56:	d100      	bne.n	10010c5a <internal_at_ble_service_define+0x22>
10010c58:	e1ca      	b.n	10010ff0 <internal_at_ble_service_define+0x3b8>
10010c5a:	2900      	cmp	r1, #0
10010c5c:	d100      	bne.n	10010c60 <internal_at_ble_service_define+0x28>
10010c5e:	e1c7      	b.n	10010ff0 <internal_at_ble_service_define+0x3b8>
10010c60:	2a00      	cmp	r2, #0
10010c62:	d100      	bne.n	10010c66 <internal_at_ble_service_define+0x2e>
10010c64:	e1c4      	b.n	10010ff0 <internal_at_ble_service_define+0x3b8>
10010c66:	9b03      	ldr	r3, [sp, #12]
10010c68:	2b00      	cmp	r3, #0
10010c6a:	d100      	bne.n	10010c6e <internal_at_ble_service_define+0x36>
10010c6c:	e1c0      	b.n	10010ff0 <internal_at_ble_service_define+0x3b8>
10010c6e:	4bc9      	ldr	r3, [pc, #804]	; (10010f94 <internal_at_ble_service_define+0x35c>)
10010c70:	3004      	adds	r0, #4
10010c72:	681e      	ldr	r6, [r3, #0]
10010c74:	2e00      	cmp	r6, #0
10010c76:	d100      	bne.n	10010c7a <internal_at_ble_service_define+0x42>
10010c78:	e1ba      	b.n	10010ff0 <internal_at_ble_service_define+0x3b8>
10010c7a:	2400      	movs	r4, #0
10010c7c:	4bc6      	ldr	r3, [pc, #792]	; (10010f98 <internal_at_ble_service_define+0x360>)
10010c7e:	8034      	strh	r4, [r6, #0]
10010c80:	881b      	ldrh	r3, [r3, #0]
10010c82:	1db7      	adds	r7, r6, #6
10010c84:	1c21      	adds	r1, r4, #0
10010c86:	2210      	movs	r2, #16
10010c88:	8073      	strh	r3, [r6, #2]
10010c8a:	1c38      	adds	r0, r7, #0
10010c8c:	4bc3      	ldr	r3, [pc, #780]	; (10010f9c <internal_at_ble_service_define+0x364>)
10010c8e:	4798      	blx	r3
10010c90:	7828      	ldrb	r0, [r5, #0]
10010c92:	4bc3      	ldr	r3, [pc, #780]	; (10010fa0 <internal_at_ble_service_define+0x368>)
10010c94:	4798      	blx	r3
10010c96:	1c69      	adds	r1, r5, #1
10010c98:	1c02      	adds	r2, r0, #0
10010c9a:	4bc2      	ldr	r3, [pc, #776]	; (10010fa4 <internal_at_ble_service_define+0x36c>)
10010c9c:	1c38      	adds	r0, r7, #0
10010c9e:	4798      	blx	r3
10010ca0:	2204      	movs	r2, #4
10010ca2:	782b      	ldrb	r3, [r5, #0]
10010ca4:	9d02      	ldr	r5, [sp, #8]
10010ca6:	011b      	lsls	r3, r3, #4
10010ca8:	4313      	orrs	r3, r2
10010caa:	9a04      	ldr	r2, [sp, #16]
10010cac:	7174      	strb	r4, [r6, #5]
10010cae:	0192      	lsls	r2, r2, #6
10010cb0:	4313      	orrs	r3, r2
10010cb2:	7133      	strb	r3, [r6, #4]
10010cb4:	2316      	movs	r3, #22
10010cb6:	9a06      	ldr	r2, [sp, #24]
10010cb8:	3512      	adds	r5, #18
10010cba:	4353      	muls	r3, r2
10010cbc:	9a02      	ldr	r2, [sp, #8]
10010cbe:	3312      	adds	r3, #18
10010cc0:	18d7      	adds	r7, r2, r3
10010cc2:	42bd      	cmp	r5, r7
10010cc4:	d00f      	beq.n	10010ce6 <internal_at_ble_service_define+0xae>
10010cc6:	4bb8      	ldr	r3, [pc, #736]	; (10010fa8 <internal_at_ble_service_define+0x370>)
10010cc8:	8829      	ldrh	r1, [r5, #0]
10010cca:	9300      	str	r3, [sp, #0]
10010ccc:	230e      	movs	r3, #14
10010cce:	aa06      	add	r2, sp, #24
10010cd0:	189b      	adds	r3, r3, r2
10010cd2:	9301      	str	r3, [sp, #4]
10010cd4:	4cb5      	ldr	r4, [pc, #724]	; (10010fac <internal_at_ble_service_define+0x374>)
10010cd6:	1c30      	adds	r0, r6, #0
10010cd8:	2201      	movs	r2, #1
10010cda:	2302      	movs	r3, #2
10010cdc:	47a0      	blx	r4
10010cde:	3516      	adds	r5, #22
10010ce0:	1e04      	subs	r4, r0, #0
10010ce2:	d0ee      	beq.n	10010cc2 <internal_at_ble_service_define+0x8a>
10010ce4:	e183      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010ce6:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010ce8:	2300      	movs	r3, #0
10010cea:	3714      	adds	r7, #20
10010cec:	1c3d      	adds	r5, r7, #0
10010cee:	9302      	str	r3, [sp, #8]
10010cf0:	9b02      	ldr	r3, [sp, #8]
10010cf2:	9a03      	ldr	r2, [sp, #12]
10010cf4:	4293      	cmp	r3, r2
10010cf6:	db00      	blt.n	10010cfa <internal_at_ble_service_define+0xc2>
10010cf8:	e0bf      	b.n	10010e7a <internal_at_ble_service_define+0x242>
10010cfa:	4bad      	ldr	r3, [pc, #692]	; (10010fb0 <internal_at_ble_service_define+0x378>)
10010cfc:	aa06      	add	r2, sp, #24
10010cfe:	9300      	str	r3, [sp, #0]
10010d00:	230e      	movs	r3, #14
10010d02:	189b      	adds	r3, r3, r2
10010d04:	9301      	str	r3, [sp, #4]
10010d06:	4ca9      	ldr	r4, [pc, #676]	; (10010fac <internal_at_ble_service_define+0x374>)
10010d08:	1c30      	adds	r0, r6, #0
10010d0a:	2104      	movs	r1, #4
10010d0c:	2201      	movs	r2, #1
10010d0e:	2302      	movs	r3, #2
10010d10:	47a0      	blx	r4
10010d12:	1e04      	subs	r4, r0, #0
10010d14:	d000      	beq.n	10010d18 <internal_at_ble_service_define+0xe0>
10010d16:	e16a      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010d18:	1c2b      	adds	r3, r5, #0
10010d1a:	3b12      	subs	r3, #18
10010d1c:	7b2c      	ldrb	r4, [r5, #12]
10010d1e:	781b      	ldrb	r3, [r3, #0]
10010d20:	1c21      	adds	r1, r4, #0
10010d22:	1c1a      	adds	r2, r3, #0
10010d24:	9304      	str	r3, [sp, #16]
10010d26:	8828      	ldrh	r0, [r5, #0]
10010d28:	4ba2      	ldr	r3, [pc, #648]	; (10010fb4 <internal_at_ble_service_define+0x37c>)
10010d2a:	4798      	blx	r3
10010d2c:	2303      	movs	r3, #3
10010d2e:	4023      	ands	r3, r4
10010d30:	3b03      	subs	r3, #3
10010d32:	4259      	negs	r1, r3
10010d34:	4159      	adcs	r1, r3
10010d36:	2301      	movs	r3, #1
10010d38:	08a4      	lsrs	r4, r4, #2
10010d3a:	401c      	ands	r4, r3
10010d3c:	430c      	orrs	r4, r1
10010d3e:	896b      	ldrh	r3, [r5, #10]
10010d40:	03e4      	lsls	r4, r4, #15
10010d42:	431c      	orrs	r4, r3
10010d44:	9007      	str	r0, [sp, #28]
10010d46:	4b96      	ldr	r3, [pc, #600]	; (10010fa0 <internal_at_ble_service_define+0x368>)
10010d48:	9804      	ldr	r0, [sp, #16]
10010d4a:	4798      	blx	r3
10010d4c:	1c2a      	adds	r2, r5, #0
10010d4e:	3a11      	subs	r2, #17
10010d50:	9200      	str	r2, [sp, #0]
10010d52:	3a03      	subs	r2, #3
10010d54:	1c03      	adds	r3, r0, #0
10010d56:	9201      	str	r2, [sp, #4]
10010d58:	1c21      	adds	r1, r4, #0
10010d5a:	1c30      	adds	r0, r6, #0
10010d5c:	4c93      	ldr	r4, [pc, #588]	; (10010fac <internal_at_ble_service_define+0x374>)
10010d5e:	9a07      	ldr	r2, [sp, #28]
10010d60:	47a0      	blx	r4
10010d62:	1e04      	subs	r4, r0, #0
10010d64:	d000      	beq.n	10010d68 <internal_at_ble_service_define+0x130>
10010d66:	e142      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010d68:	22c0      	movs	r2, #192	; 0xc0
10010d6a:	882b      	ldrh	r3, [r5, #0]
10010d6c:	0052      	lsls	r2, r2, #1
10010d6e:	4213      	tst	r3, r2
10010d70:	d104      	bne.n	10010d7c <internal_at_ble_service_define+0x144>
10010d72:	8aab      	ldrh	r3, [r5, #20]
10010d74:	9304      	str	r3, [sp, #16]
10010d76:	2b00      	cmp	r3, #0
10010d78:	d116      	bne.n	10010da8 <internal_at_ble_service_define+0x170>
10010d7a:	e03a      	b.n	10010df2 <internal_at_ble_service_define+0x1ba>
10010d7c:	2201      	movs	r2, #1
10010d7e:	09d9      	lsrs	r1, r3, #7
10010d80:	4011      	ands	r1, r2
10010d82:	05db      	lsls	r3, r3, #23
10010d84:	d501      	bpl.n	10010d8a <internal_at_ble_service_define+0x152>
10010d86:	2302      	movs	r3, #2
10010d88:	4319      	orrs	r1, r3
10010d8a:	4b8b      	ldr	r3, [pc, #556]	; (10010fb8 <internal_at_ble_service_define+0x380>)
10010d8c:	aa06      	add	r2, sp, #24
10010d8e:	9300      	str	r3, [sp, #0]
10010d90:	230e      	movs	r3, #14
10010d92:	189b      	adds	r3, r3, r2
10010d94:	9301      	str	r3, [sp, #4]
10010d96:	4c85      	ldr	r4, [pc, #532]	; (10010fac <internal_at_ble_service_define+0x374>)
10010d98:	0209      	lsls	r1, r1, #8
10010d9a:	1c30      	adds	r0, r6, #0
10010d9c:	2201      	movs	r2, #1
10010d9e:	2302      	movs	r3, #2
10010da0:	47a0      	blx	r4
10010da2:	1e04      	subs	r4, r0, #0
10010da4:	d0e5      	beq.n	10010d72 <internal_at_ble_service_define+0x13a>
10010da6:	e122      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010da8:	2380      	movs	r3, #128	; 0x80
10010daa:	882a      	ldrh	r2, [r5, #0]
10010dac:	7f2c      	ldrb	r4, [r5, #28]
10010dae:	005b      	lsls	r3, r3, #1
10010db0:	401a      	ands	r2, r3
10010db2:	1c20      	adds	r0, r4, #0
10010db4:	2101      	movs	r1, #1
10010db6:	2a00      	cmp	r2, #0
10010db8:	d000      	beq.n	10010dbc <internal_at_ble_service_define+0x184>
10010dba:	1c0a      	adds	r2, r1, #0
10010dbc:	4b7f      	ldr	r3, [pc, #508]	; (10010fbc <internal_at_ble_service_define+0x384>)
10010dbe:	4798      	blx	r3
10010dc0:	2203      	movs	r2, #3
10010dc2:	4022      	ands	r2, r4
10010dc4:	3a03      	subs	r2, #3
10010dc6:	4251      	negs	r1, r2
10010dc8:	4151      	adcs	r1, r2
10010dca:	4b7d      	ldr	r3, [pc, #500]	; (10010fc0 <internal_at_ble_service_define+0x388>)
10010dcc:	1c0a      	adds	r2, r1, #0
10010dce:	9300      	str	r3, [sp, #0]
10010dd0:	1c2b      	adds	r3, r5, #0
10010dd2:	0764      	lsls	r4, r4, #29
10010dd4:	0fe4      	lsrs	r4, r4, #31
10010dd6:	4322      	orrs	r2, r4
10010dd8:	03d2      	lsls	r2, r2, #15
10010dda:	4310      	orrs	r0, r2
10010ddc:	3320      	adds	r3, #32
10010dde:	b282      	uxth	r2, r0
10010de0:	9301      	str	r3, [sp, #4]
10010de2:	4c72      	ldr	r4, [pc, #456]	; (10010fac <internal_at_ble_service_define+0x374>)
10010de4:	1c30      	adds	r0, r6, #0
10010de6:	9904      	ldr	r1, [sp, #16]
10010de8:	2302      	movs	r3, #2
10010dea:	47a0      	blx	r4
10010dec:	1e04      	subs	r4, r0, #0
10010dee:	d000      	beq.n	10010df2 <internal_at_ble_service_define+0x1ba>
10010df0:	e0fd      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010df2:	2101      	movs	r1, #1
10010df4:	882b      	ldrh	r3, [r5, #0]
10010df6:	420b      	tst	r3, r1
10010df8:	d011      	beq.n	10010e1e <internal_at_ble_service_define+0x1e6>
10010dfa:	7fa8      	ldrb	r0, [r5, #30]
10010dfc:	4b6f      	ldr	r3, [pc, #444]	; (10010fbc <internal_at_ble_service_define+0x384>)
10010dfe:	2200      	movs	r2, #0
10010e00:	4798      	blx	r3
10010e02:	4b70      	ldr	r3, [pc, #448]	; (10010fc4 <internal_at_ble_service_define+0x38c>)
10010e04:	1c02      	adds	r2, r0, #0
10010e06:	9300      	str	r3, [sp, #0]
10010e08:	1c2b      	adds	r3, r5, #0
10010e0a:	3324      	adds	r3, #36	; 0x24
10010e0c:	9301      	str	r3, [sp, #4]
10010e0e:	4c67      	ldr	r4, [pc, #412]	; (10010fac <internal_at_ble_service_define+0x374>)
10010e10:	1c30      	adds	r0, r6, #0
10010e12:	496d      	ldr	r1, [pc, #436]	; (10010fc8 <internal_at_ble_service_define+0x390>)
10010e14:	2302      	movs	r3, #2
10010e16:	47a0      	blx	r4
10010e18:	1e04      	subs	r4, r0, #0
10010e1a:	d000      	beq.n	10010e1e <internal_at_ble_service_define+0x1e6>
10010e1c:	e0e7      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010e1e:	2330      	movs	r3, #48	; 0x30
10010e20:	882a      	ldrh	r2, [r5, #0]
10010e22:	421a      	tst	r2, r3
10010e24:	d012      	beq.n	10010e4c <internal_at_ble_service_define+0x214>
10010e26:	2101      	movs	r1, #1
10010e28:	7f68      	ldrb	r0, [r5, #29]
10010e2a:	1c0a      	adds	r2, r1, #0
10010e2c:	4b63      	ldr	r3, [pc, #396]	; (10010fbc <internal_at_ble_service_define+0x384>)
10010e2e:	4798      	blx	r3
10010e30:	4b66      	ldr	r3, [pc, #408]	; (10010fcc <internal_at_ble_service_define+0x394>)
10010e32:	1c02      	adds	r2, r0, #0
10010e34:	9300      	str	r3, [sp, #0]
10010e36:	1c2b      	adds	r3, r5, #0
10010e38:	3322      	adds	r3, #34	; 0x22
10010e3a:	9301      	str	r3, [sp, #4]
10010e3c:	4c5b      	ldr	r4, [pc, #364]	; (10010fac <internal_at_ble_service_define+0x374>)
10010e3e:	1c30      	adds	r0, r6, #0
10010e40:	4961      	ldr	r1, [pc, #388]	; (10010fc8 <internal_at_ble_service_define+0x390>)
10010e42:	2302      	movs	r3, #2
10010e44:	47a0      	blx	r4
10010e46:	1e04      	subs	r4, r0, #0
10010e48:	d000      	beq.n	10010e4c <internal_at_ble_service_define+0x214>
10010e4a:	e0d0      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010e4c:	69ab      	ldr	r3, [r5, #24]
10010e4e:	2b00      	cmp	r3, #0
10010e50:	d00e      	beq.n	10010e70 <internal_at_ble_service_define+0x238>
10010e52:	4b5f      	ldr	r3, [pc, #380]	; (10010fd0 <internal_at_ble_service_define+0x398>)
10010e54:	aa06      	add	r2, sp, #24
10010e56:	9300      	str	r3, [sp, #0]
10010e58:	230e      	movs	r3, #14
10010e5a:	189b      	adds	r3, r3, r2
10010e5c:	9301      	str	r3, [sp, #4]
10010e5e:	4c53      	ldr	r4, [pc, #332]	; (10010fac <internal_at_ble_service_define+0x374>)
10010e60:	1c30      	adds	r0, r6, #0
10010e62:	2107      	movs	r1, #7
10010e64:	2201      	movs	r2, #1
10010e66:	2302      	movs	r3, #2
10010e68:	47a0      	blx	r4
10010e6a:	1e04      	subs	r4, r0, #0
10010e6c:	d000      	beq.n	10010e70 <internal_at_ble_service_define+0x238>
10010e6e:	e0be      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010e70:	9b02      	ldr	r3, [sp, #8]
10010e72:	353c      	adds	r5, #60	; 0x3c
10010e74:	3301      	adds	r3, #1
10010e76:	9302      	str	r3, [sp, #8]
10010e78:	e73a      	b.n	10010cf0 <internal_at_ble_service_define+0xb8>
10010e7a:	1c30      	adds	r0, r6, #0
10010e7c:	4b55      	ldr	r3, [pc, #340]	; (10010fd4 <internal_at_ble_service_define+0x39c>)
10010e7e:	4798      	blx	r3
10010e80:	1e04      	subs	r4, r0, #0
10010e82:	d000      	beq.n	10010e86 <internal_at_ble_service_define+0x24e>
10010e84:	e0b3      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010e86:	8833      	ldrh	r3, [r6, #0]
10010e88:	9a05      	ldr	r2, [sp, #20]
10010e8a:	8013      	strh	r3, [r2, #0]
10010e8c:	8836      	ldrh	r6, [r6, #0]
10010e8e:	9b06      	ldr	r3, [sp, #24]
10010e90:	9a03      	ldr	r2, [sp, #12]
10010e92:	18f6      	adds	r6, r6, r3
10010e94:	b2b3      	uxth	r3, r6
10010e96:	9302      	str	r3, [sp, #8]
10010e98:	233c      	movs	r3, #60	; 0x3c
10010e9a:	4353      	muls	r3, r2
10010e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010e9e:	3314      	adds	r3, #20
10010ea0:	18d3      	adds	r3, r2, r3
10010ea2:	9304      	str	r3, [sp, #16]
10010ea4:	9b04      	ldr	r3, [sp, #16]
10010ea6:	429f      	cmp	r7, r3
10010ea8:	d100      	bne.n	10010eac <internal_at_ble_service_define+0x274>
10010eaa:	e0a0      	b.n	10010fee <internal_at_ble_service_define+0x3b6>
10010eac:	9b02      	ldr	r3, [sp, #8]
10010eae:	1c9d      	adds	r5, r3, #2
10010eb0:	1c3b      	adds	r3, r7, #0
10010eb2:	b2ad      	uxth	r5, r5
10010eb4:	3b14      	subs	r3, #20
10010eb6:	801d      	strh	r5, [r3, #0]
10010eb8:	9303      	str	r3, [sp, #12]
10010eba:	893b      	ldrh	r3, [r7, #8]
10010ebc:	2b00      	cmp	r3, #0
10010ebe:	d108      	bne.n	10010ed2 <internal_at_ble_service_define+0x29a>
10010ec0:	23c0      	movs	r3, #192	; 0xc0
10010ec2:	883a      	ldrh	r2, [r7, #0]
10010ec4:	005b      	lsls	r3, r3, #1
10010ec6:	421a      	tst	r2, r3
10010ec8:	d026      	beq.n	10010f18 <internal_at_ble_service_define+0x2e0>
10010eca:	9e02      	ldr	r6, [sp, #8]
10010ecc:	3603      	adds	r6, #3
10010ece:	b2b5      	uxth	r5, r6
10010ed0:	e022      	b.n	10010f18 <internal_at_ble_service_define+0x2e0>
10010ed2:	2103      	movs	r1, #3
10010ed4:	7b3b      	ldrb	r3, [r7, #12]
10010ed6:	4019      	ands	r1, r3
10010ed8:	3903      	subs	r1, #3
10010eda:	424a      	negs	r2, r1
10010edc:	414a      	adcs	r2, r1
10010ede:	0759      	lsls	r1, r3, #29
10010ee0:	0fc9      	lsrs	r1, r1, #31
10010ee2:	4311      	orrs	r1, r2
10010ee4:	03c9      	lsls	r1, r1, #15
10010ee6:	897a      	ldrh	r2, [r7, #10]
10010ee8:	2900      	cmp	r1, #0
10010eea:	d007      	beq.n	10010efc <internal_at_ble_service_define+0x2c4>
10010eec:	6879      	ldr	r1, [r7, #4]
10010eee:	2900      	cmp	r1, #0
10010ef0:	d100      	bne.n	10010ef4 <internal_at_ble_service_define+0x2bc>
10010ef2:	4939      	ldr	r1, [pc, #228]	; (10010fd8 <internal_at_ble_service_define+0x3a0>)
10010ef4:	1c28      	adds	r0, r5, #0
10010ef6:	4e39      	ldr	r6, [pc, #228]	; (10010fdc <internal_at_ble_service_define+0x3a4>)
10010ef8:	47b0      	blx	r6
10010efa:	e00a      	b.n	10010f12 <internal_at_ble_service_define+0x2da>
10010efc:	1c28      	adds	r0, r5, #0
10010efe:	4e37      	ldr	r6, [pc, #220]	; (10010fdc <internal_at_ble_service_define+0x3a4>)
10010f00:	47b0      	blx	r6
10010f02:	2800      	cmp	r0, #0
10010f04:	d172      	bne.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f06:	9b03      	ldr	r3, [sp, #12]
10010f08:	8939      	ldrh	r1, [r7, #8]
10010f0a:	8818      	ldrh	r0, [r3, #0]
10010f0c:	687a      	ldr	r2, [r7, #4]
10010f0e:	4b34      	ldr	r3, [pc, #208]	; (10010fe0 <internal_at_ble_service_define+0x3a8>)
10010f10:	4798      	blx	r3
10010f12:	2800      	cmp	r0, #0
10010f14:	d0d4      	beq.n	10010ec0 <internal_at_ble_service_define+0x288>
10010f16:	e069      	b.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f18:	8abb      	ldrh	r3, [r7, #20]
10010f1a:	2b00      	cmp	r3, #0
10010f1c:	d00a      	beq.n	10010f34 <internal_at_ble_service_define+0x2fc>
10010f1e:	3501      	adds	r5, #1
10010f20:	b2ad      	uxth	r5, r5
10010f22:	843d      	strh	r5, [r7, #32]
10010f24:	7f39      	ldrb	r1, [r7, #28]
10010f26:	8afb      	ldrh	r3, [r7, #22]
10010f28:	1c28      	adds	r0, r5, #0
10010f2a:	693a      	ldr	r2, [r7, #16]
10010f2c:	4e2d      	ldr	r6, [pc, #180]	; (10010fe4 <internal_at_ble_service_define+0x3ac>)
10010f2e:	47b0      	blx	r6
10010f30:	2800      	cmp	r0, #0
10010f32:	d15b      	bne.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f34:	883b      	ldrh	r3, [r7, #0]
10010f36:	07db      	lsls	r3, r3, #31
10010f38:	d50d      	bpl.n	10010f56 <internal_at_ble_service_define+0x31e>
10010f3a:	2200      	movs	r2, #0
10010f3c:	3501      	adds	r5, #1
10010f3e:	b2ad      	uxth	r5, r5
10010f40:	a909      	add	r1, sp, #36	; 0x24
10010f42:	84bd      	strh	r5, [r7, #36]	; 0x24
10010f44:	7fbb      	ldrb	r3, [r7, #30]
10010f46:	1c28      	adds	r0, r5, #0
10010f48:	700a      	strb	r2, [r1, #0]
10010f4a:	704a      	strb	r2, [r1, #1]
10010f4c:	4e23      	ldr	r6, [pc, #140]	; (10010fdc <internal_at_ble_service_define+0x3a4>)
10010f4e:	3202      	adds	r2, #2
10010f50:	47b0      	blx	r6
10010f52:	2800      	cmp	r0, #0
10010f54:	d14a      	bne.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f56:	2330      	movs	r3, #48	; 0x30
10010f58:	883a      	ldrh	r2, [r7, #0]
10010f5a:	421a      	tst	r2, r3
10010f5c:	d00d      	beq.n	10010f7a <internal_at_ble_service_define+0x342>
10010f5e:	2200      	movs	r2, #0
10010f60:	3501      	adds	r5, #1
10010f62:	b2ad      	uxth	r5, r5
10010f64:	a909      	add	r1, sp, #36	; 0x24
10010f66:	847d      	strh	r5, [r7, #34]	; 0x22
10010f68:	7f7b      	ldrb	r3, [r7, #29]
10010f6a:	1c28      	adds	r0, r5, #0
10010f6c:	700a      	strb	r2, [r1, #0]
10010f6e:	704a      	strb	r2, [r1, #1]
10010f70:	4e1a      	ldr	r6, [pc, #104]	; (10010fdc <internal_at_ble_service_define+0x3a4>)
10010f72:	3202      	adds	r2, #2
10010f74:	47b0      	blx	r6
10010f76:	2800      	cmp	r0, #0
10010f78:	d138      	bne.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f7a:	69b9      	ldr	r1, [r7, #24]
10010f7c:	2900      	cmp	r1, #0
10010f7e:	d006      	beq.n	10010f8e <internal_at_ble_service_define+0x356>
10010f80:	3501      	adds	r5, #1
10010f82:	b2ad      	uxth	r5, r5
10010f84:	1c28      	adds	r0, r5, #0
10010f86:	4b18      	ldr	r3, [pc, #96]	; (10010fe8 <internal_at_ble_service_define+0x3b0>)
10010f88:	4798      	blx	r3
10010f8a:	2800      	cmp	r0, #0
10010f8c:	d12e      	bne.n	10010fec <internal_at_ble_service_define+0x3b4>
10010f8e:	373c      	adds	r7, #60	; 0x3c
10010f90:	9502      	str	r5, [sp, #8]
10010f92:	e787      	b.n	10010ea4 <internal_at_ble_service_define+0x26c>
10010f94:	10019f24 	.word	0x10019f24
10010f98:	1001ae14 	.word	0x1001ae14
10010f9c:	100150e9 	.word	0x100150e9
10010fa0:	1001096d 	.word	0x1001096d
10010fa4:	100150d7 	.word	0x100150d7
10010fa8:	1001827b 	.word	0x1001827b
10010fac:	10012df9 	.word	0x10012df9
10010fb0:	1001827d 	.word	0x1001827d
10010fb4:	10010a39 	.word	0x10010a39
10010fb8:	10018279 	.word	0x10018279
10010fbc:	100109e1 	.word	0x100109e1
10010fc0:	10018275 	.word	0x10018275
10010fc4:	10018277 	.word	0x10018277
10010fc8:	00008002 	.word	0x00008002
10010fcc:	10018271 	.word	0x10018271
10010fd0:	10018273 	.word	0x10018273
10010fd4:	10012ced 	.word	0x10012ced
10010fd8:	10019f10 	.word	0x10019f10
10010fdc:	10010b01 	.word	0x10010b01
10010fe0:	10012e69 	.word	0x10012e69
10010fe4:	10010bb9 	.word	0x10010bb9
10010fe8:	10010ad5 	.word	0x10010ad5
10010fec:	1c04      	adds	r4, r0, #0
10010fee:	1c20      	adds	r0, r4, #0
10010ff0:	b00b      	add	sp, #44	; 0x2c
10010ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010ff4 <initi_gatt_server_module>:
10010ff4:	2300      	movs	r3, #0
10010ff6:	4a07      	ldr	r2, [pc, #28]	; (10011014 <initi_gatt_server_module+0x20>)
10010ff8:	7013      	strb	r3, [r2, #0]
10010ffa:	4a07      	ldr	r2, [pc, #28]	; (10011018 <initi_gatt_server_module+0x24>)
10010ffc:	6013      	str	r3, [r2, #0]
10010ffe:	4a07      	ldr	r2, [pc, #28]	; (1001101c <initi_gatt_server_module+0x28>)
10011000:	6013      	str	r3, [r2, #0]
10011002:	4a07      	ldr	r2, [pc, #28]	; (10011020 <initi_gatt_server_module+0x2c>)
10011004:	6013      	str	r3, [r2, #0]
10011006:	4a07      	ldr	r2, [pc, #28]	; (10011024 <initi_gatt_server_module+0x30>)
10011008:	6013      	str	r3, [r2, #0]
1001100a:	4a07      	ldr	r2, [pc, #28]	; (10011028 <initi_gatt_server_module+0x34>)
1001100c:	6013      	str	r3, [r2, #0]
1001100e:	4a07      	ldr	r2, [pc, #28]	; (1001102c <initi_gatt_server_module+0x38>)
10011010:	6013      	str	r3, [r2, #0]
10011012:	4770      	bx	lr
10011014:	10019f10 	.word	0x10019f10
10011018:	10019f20 	.word	0x10019f20
1001101c:	10019f1c 	.word	0x10019f1c
10011020:	10019f0c 	.word	0x10019f0c
10011024:	10019f18 	.word	0x10019f18
10011028:	10019f14 	.word	0x10019f14
1001102c:	10019f24 	.word	0x10019f24

10011030 <db_init>:
10011030:	4b0a      	ldr	r3, [pc, #40]	; (1001105c <db_init+0x2c>)
10011032:	4a0b      	ldr	r2, [pc, #44]	; (10011060 <db_init+0x30>)
10011034:	6018      	str	r0, [r3, #0]
10011036:	084b      	lsrs	r3, r1, #1
10011038:	6013      	str	r3, [r2, #0]
1001103a:	4a0a      	ldr	r2, [pc, #40]	; (10011064 <db_init+0x34>)
1001103c:	18c3      	adds	r3, r0, r3
1001103e:	6013      	str	r3, [r2, #0]
10011040:	4a09      	ldr	r2, [pc, #36]	; (10011068 <db_init+0x38>)
10011042:	1841      	adds	r1, r0, r1
10011044:	6013      	str	r3, [r2, #0]
10011046:	2303      	movs	r3, #3
10011048:	2200      	movs	r2, #0
1001104a:	3103      	adds	r1, #3
1001104c:	4399      	bics	r1, r3
1001104e:	4b07      	ldr	r3, [pc, #28]	; (1001106c <db_init+0x3c>)
10011050:	3904      	subs	r1, #4
10011052:	6019      	str	r1, [r3, #0]
10011054:	4b06      	ldr	r3, [pc, #24]	; (10011070 <db_init+0x40>)
10011056:	601a      	str	r2, [r3, #0]
10011058:	4770      	bx	lr
1001105a:	46c0      	nop			; (mov r8, r8)
1001105c:	10019f24 	.word	0x10019f24
10011060:	10019f20 	.word	0x10019f20
10011064:	10019f0c 	.word	0x10019f0c
10011068:	10019f18 	.word	0x10019f18
1001106c:	10019f14 	.word	0x10019f14
10011070:	10019f1c 	.word	0x10019f1c

10011074 <at_ble_primary_service_define>:
10011074:	b530      	push	{r4, r5, lr}
10011076:	b085      	sub	sp, #20
10011078:	ac08      	add	r4, sp, #32
1001107a:	cc20      	ldmia	r4!, {r5}
1001107c:	8824      	ldrh	r4, [r4, #0]
1001107e:	9500      	str	r5, [sp, #0]
10011080:	9401      	str	r4, [sp, #4]
10011082:	2401      	movs	r4, #1
10011084:	9402      	str	r4, [sp, #8]
10011086:	4c02      	ldr	r4, [pc, #8]	; (10011090 <at_ble_primary_service_define+0x1c>)
10011088:	47a0      	blx	r4
1001108a:	b005      	add	sp, #20
1001108c:	bd30      	pop	{r4, r5, pc}
1001108e:	46c0      	nop			; (mov r8, r8)
10011090:	10010c39 	.word	0x10010c39

10011094 <at_ble_characteristic_value_set>:
10011094:	b570      	push	{r4, r5, r6, lr}
10011096:	4b0b      	ldr	r3, [pc, #44]	; (100110c4 <at_ble_characteristic_value_set+0x30>)
10011098:	1c06      	adds	r6, r0, #0
1001109a:	1c0c      	adds	r4, r1, #0
1001109c:	1c15      	adds	r5, r2, #0
1001109e:	4798      	blx	r3
100110a0:	2800      	cmp	r0, #0
100110a2:	d008      	beq.n	100110b6 <at_ble_characteristic_value_set+0x22>
100110a4:	6880      	ldr	r0, [r0, #8]
100110a6:	2800      	cmp	r0, #0
100110a8:	d005      	beq.n	100110b6 <at_ble_characteristic_value_set+0x22>
100110aa:	1c21      	adds	r1, r4, #0
100110ac:	1c2a      	adds	r2, r5, #0
100110ae:	4b06      	ldr	r3, [pc, #24]	; (100110c8 <at_ble_characteristic_value_set+0x34>)
100110b0:	4798      	blx	r3
100110b2:	2000      	movs	r0, #0
100110b4:	e004      	b.n	100110c0 <at_ble_characteristic_value_set+0x2c>
100110b6:	1c30      	adds	r0, r6, #0
100110b8:	1c29      	adds	r1, r5, #0
100110ba:	1c22      	adds	r2, r4, #0
100110bc:	4b03      	ldr	r3, [pc, #12]	; (100110cc <at_ble_characteristic_value_set+0x38>)
100110be:	4798      	blx	r3
100110c0:	bd70      	pop	{r4, r5, r6, pc}
100110c2:	46c0      	nop			; (mov r8, r8)
100110c4:	100109a1 	.word	0x100109a1
100110c8:	100150d7 	.word	0x100150d7
100110cc:	10012e69 	.word	0x10012e69

100110d0 <at_ble_characteristic_value_get>:
100110d0:	b570      	push	{r4, r5, r6, lr}
100110d2:	4b0c      	ldr	r3, [pc, #48]	; (10011104 <at_ble_characteristic_value_get+0x34>)
100110d4:	1c06      	adds	r6, r0, #0
100110d6:	1c0c      	adds	r4, r1, #0
100110d8:	1c15      	adds	r5, r2, #0
100110da:	4798      	blx	r3
100110dc:	2800      	cmp	r0, #0
100110de:	d00b      	beq.n	100110f8 <at_ble_characteristic_value_get+0x28>
100110e0:	6883      	ldr	r3, [r0, #8]
100110e2:	2b00      	cmp	r3, #0
100110e4:	d008      	beq.n	100110f8 <at_ble_characteristic_value_get+0x28>
100110e6:	8883      	ldrh	r3, [r0, #4]
100110e8:	802b      	strh	r3, [r5, #0]
100110ea:	8882      	ldrh	r2, [r0, #4]
100110ec:	6881      	ldr	r1, [r0, #8]
100110ee:	4b06      	ldr	r3, [pc, #24]	; (10011108 <at_ble_characteristic_value_get+0x38>)
100110f0:	1c20      	adds	r0, r4, #0
100110f2:	4798      	blx	r3
100110f4:	2000      	movs	r0, #0
100110f6:	e004      	b.n	10011102 <at_ble_characteristic_value_get+0x32>
100110f8:	1c30      	adds	r0, r6, #0
100110fa:	1c29      	adds	r1, r5, #0
100110fc:	1c22      	adds	r2, r4, #0
100110fe:	4b03      	ldr	r3, [pc, #12]	; (1001110c <at_ble_characteristic_value_get+0x3c>)
10011100:	4798      	blx	r3
10011102:	bd70      	pop	{r4, r5, r6, pc}
10011104:	100109a1 	.word	0x100109a1
10011108:	100150d7 	.word	0x100150d7
1001110c:	10012ef5 	.word	0x10012ef5

10011110 <at_ble_write_authorize_reply>:
10011110:	b5f0      	push	{r4, r5, r6, r7, lr}
10011112:	b085      	sub	sp, #20
10011114:	1c04      	adds	r4, r0, #0
10011116:	9101      	str	r1, [sp, #4]
10011118:	2900      	cmp	r1, #0
1001111a:	d128      	bne.n	1001116e <at_ble_write_authorize_reply+0x5e>
1001111c:	8843      	ldrh	r3, [r0, #2]
1001111e:	1c27      	adds	r7, r4, #0
10011120:	9300      	str	r3, [sp, #0]
10011122:	1c18      	adds	r0, r3, #0
10011124:	4b16      	ldr	r3, [pc, #88]	; (10011180 <at_ble_write_authorize_reply+0x70>)
10011126:	4798      	blx	r3
10011128:	3708      	adds	r7, #8
1001112a:	2800      	cmp	r0, #0
1001112c:	d009      	beq.n	10011142 <at_ble_write_authorize_reply+0x32>
1001112e:	6880      	ldr	r0, [r0, #8]
10011130:	2800      	cmp	r0, #0
10011132:	d006      	beq.n	10011142 <at_ble_write_authorize_reply+0x32>
10011134:	88a3      	ldrh	r3, [r4, #4]
10011136:	88e2      	ldrh	r2, [r4, #6]
10011138:	18c0      	adds	r0, r0, r3
1001113a:	1c39      	adds	r1, r7, #0
1001113c:	4b11      	ldr	r3, [pc, #68]	; (10011184 <at_ble_write_authorize_reply+0x74>)
1001113e:	4798      	blx	r3
10011140:	e015      	b.n	1001116e <at_ble_write_authorize_reply+0x5e>
10011142:	ab02      	add	r3, sp, #8
10011144:	1d9e      	adds	r6, r3, #6
10011146:	2300      	movs	r3, #0
10011148:	4d0f      	ldr	r5, [pc, #60]	; (10011188 <at_ble_write_authorize_reply+0x78>)
1001114a:	8033      	strh	r3, [r6, #0]
1001114c:	6829      	ldr	r1, [r5, #0]
1001114e:	1c32      	adds	r2, r6, #0
10011150:	4b0e      	ldr	r3, [pc, #56]	; (1001118c <at_ble_write_authorize_reply+0x7c>)
10011152:	9800      	ldr	r0, [sp, #0]
10011154:	4798      	blx	r3
10011156:	682b      	ldr	r3, [r5, #0]
10011158:	88a0      	ldrh	r0, [r4, #4]
1001115a:	88e2      	ldrh	r2, [r4, #6]
1001115c:	1818      	adds	r0, r3, r0
1001115e:	1c39      	adds	r1, r7, #0
10011160:	4b08      	ldr	r3, [pc, #32]	; (10011184 <at_ble_write_authorize_reply+0x74>)
10011162:	4798      	blx	r3
10011164:	8860      	ldrh	r0, [r4, #2]
10011166:	8832      	ldrh	r2, [r6, #0]
10011168:	6829      	ldr	r1, [r5, #0]
1001116a:	4b09      	ldr	r3, [pc, #36]	; (10011190 <at_ble_write_authorize_reply+0x80>)
1001116c:	4798      	blx	r3
1001116e:	8860      	ldrh	r0, [r4, #2]
10011170:	8821      	ldrh	r1, [r4, #0]
10011172:	9a01      	ldr	r2, [sp, #4]
10011174:	4b07      	ldr	r3, [pc, #28]	; (10011194 <at_ble_write_authorize_reply+0x84>)
10011176:	4798      	blx	r3
10011178:	2000      	movs	r0, #0
1001117a:	b005      	add	sp, #20
1001117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001117e:	46c0      	nop			; (mov r8, r8)
10011180:	100109a1 	.word	0x100109a1
10011184:	100150d7 	.word	0x100150d7
10011188:	10018480 	.word	0x10018480
1001118c:	100110d1 	.word	0x100110d1
10011190:	10011095 	.word	0x10011095
10011194:	1001296d 	.word	0x1001296d

10011198 <gatts_handle_read_req>:
10011198:	b538      	push	{r3, r4, r5, lr}
1001119a:	1c0c      	adds	r4, r1, #0
1001119c:	4b07      	ldr	r3, [pc, #28]	; (100111bc <gatts_handle_read_req+0x24>)
1001119e:	4798      	blx	r3
100111a0:	8865      	ldrh	r5, [r4, #2]
100111a2:	4b07      	ldr	r3, [pc, #28]	; (100111c0 <gatts_handle_read_req+0x28>)
100111a4:	1c28      	adds	r0, r5, #0
100111a6:	4798      	blx	r3
100111a8:	7883      	ldrb	r3, [r0, #2]
100111aa:	2026      	movs	r0, #38	; 0x26
100111ac:	07db      	lsls	r3, r3, #31
100111ae:	d404      	bmi.n	100111ba <gatts_handle_read_req+0x22>
100111b0:	8820      	ldrh	r0, [r4, #0]
100111b2:	1c29      	adds	r1, r5, #0
100111b4:	4b03      	ldr	r3, [pc, #12]	; (100111c4 <gatts_handle_read_req+0x2c>)
100111b6:	4798      	blx	r3
100111b8:	203b      	movs	r0, #59	; 0x3b
100111ba:	bd38      	pop	{r3, r4, r5, pc}
100111bc:	100128b1 	.word	0x100128b1
100111c0:	100109a1 	.word	0x100109a1
100111c4:	10010c09 	.word	0x10010c09

100111c8 <gatts_handle_att_info_req>:
100111c8:	b538      	push	{r3, r4, r5, lr}
100111ca:	1c0d      	adds	r5, r1, #0
100111cc:	4b0a      	ldr	r3, [pc, #40]	; (100111f8 <gatts_handle_att_info_req+0x30>)
100111ce:	1c14      	adds	r4, r2, #0
100111d0:	4798      	blx	r3
100111d2:	882d      	ldrh	r5, [r5, #0]
100111d4:	4b09      	ldr	r3, [pc, #36]	; (100111fc <gatts_handle_att_info_req+0x34>)
100111d6:	1c28      	adds	r0, r5, #0
100111d8:	4798      	blx	r3
100111da:	0a22      	lsrs	r2, r4, #8
100111dc:	1c03      	adds	r3, r0, #0
100111de:	4c08      	ldr	r4, [pc, #32]	; (10011200 <gatts_handle_att_info_req+0x38>)
100111e0:	b291      	uxth	r1, r2
100111e2:	2800      	cmp	r0, #0
100111e4:	d003      	beq.n	100111ee <gatts_handle_att_info_req+0x26>
100111e6:	8882      	ldrh	r2, [r0, #4]
100111e8:	2300      	movs	r3, #0
100111ea:	1c28      	adds	r0, r5, #0
100111ec:	e001      	b.n	100111f2 <gatts_handle_att_info_req+0x2a>
100111ee:	1c28      	adds	r0, r5, #0
100111f0:	2201      	movs	r2, #1
100111f2:	47a0      	blx	r4
100111f4:	203b      	movs	r0, #59	; 0x3b
100111f6:	bd38      	pop	{r3, r4, r5, pc}
100111f8:	100128f5 	.word	0x100128f5
100111fc:	100109a1 	.word	0x100109a1
10011200:	100129b1 	.word	0x100129b1

10011204 <gatts_handle_write_req>:
10011204:	b510      	push	{r4, lr}
10011206:	1c14      	adds	r4, r2, #0
10011208:	4b07      	ldr	r3, [pc, #28]	; (10011228 <gatts_handle_write_req+0x24>)
1001120a:	4798      	blx	r3
1001120c:	4b07      	ldr	r3, [pc, #28]	; (1001122c <gatts_handle_write_req+0x28>)
1001120e:	8860      	ldrh	r0, [r4, #2]
10011210:	4798      	blx	r3
10011212:	2302      	movs	r3, #2
10011214:	7881      	ldrb	r1, [r0, #2]
10011216:	2022      	movs	r0, #34	; 0x22
10011218:	4019      	ands	r1, r3
1001121a:	d103      	bne.n	10011224 <gatts_handle_write_req+0x20>
1001121c:	1c20      	adds	r0, r4, #0
1001121e:	4b04      	ldr	r3, [pc, #16]	; (10011230 <gatts_handle_write_req+0x2c>)
10011220:	4798      	blx	r3
10011222:	201f      	movs	r0, #31
10011224:	bd10      	pop	{r4, pc}
10011226:	46c0      	nop			; (mov r8, r8)
10011228:	100128bd 	.word	0x100128bd
1001122c:	100109a1 	.word	0x100109a1
10011230:	10011111 	.word	0x10011111

10011234 <at_ble_indication_send>:
10011234:	b5f0      	push	{r4, r5, r6, r7, lr}
10011236:	4d17      	ldr	r5, [pc, #92]	; (10011294 <at_ble_indication_send+0x60>)
10011238:	4c17      	ldr	r4, [pc, #92]	; (10011298 <at_ble_indication_send+0x64>)
1001123a:	682a      	ldr	r2, [r5, #0]
1001123c:	44a5      	add	sp, r4
1001123e:	23d2      	movs	r3, #210	; 0xd2
10011240:	2a04      	cmp	r2, #4
10011242:	d822      	bhi.n	1001128a <at_ble_indication_send+0x56>
10011244:	1c06      	adds	r6, r0, #0
10011246:	4b15      	ldr	r3, [pc, #84]	; (1001129c <at_ble_indication_send+0x68>)
10011248:	1c08      	adds	r0, r1, #0
1001124a:	1c0c      	adds	r4, r1, #0
1001124c:	4798      	blx	r3
1001124e:	2800      	cmp	r0, #0
10011250:	d008      	beq.n	10011264 <at_ble_indication_send+0x30>
10011252:	6883      	ldr	r3, [r0, #8]
10011254:	2b00      	cmp	r3, #0
10011256:	d005      	beq.n	10011264 <at_ble_indication_send+0x30>
10011258:	8882      	ldrh	r2, [r0, #4]
1001125a:	1c21      	adds	r1, r4, #0
1001125c:	9200      	str	r2, [sp, #0]
1001125e:	2013      	movs	r0, #19
10011260:	1c32      	adds	r2, r6, #0
10011262:	e00c      	b.n	1001127e <at_ble_indication_send+0x4a>
10011264:	270e      	movs	r7, #14
10011266:	446f      	add	r7, sp
10011268:	1c39      	adds	r1, r7, #0
1001126a:	aa04      	add	r2, sp, #16
1001126c:	4b0c      	ldr	r3, [pc, #48]	; (100112a0 <at_ble_indication_send+0x6c>)
1001126e:	1c20      	adds	r0, r4, #0
10011270:	4798      	blx	r3
10011272:	2013      	movs	r0, #19
10011274:	1c21      	adds	r1, r4, #0
10011276:	1c32      	adds	r2, r6, #0
10011278:	883b      	ldrh	r3, [r7, #0]
1001127a:	9300      	str	r3, [sp, #0]
1001127c:	ab04      	add	r3, sp, #16
1001127e:	4c09      	ldr	r4, [pc, #36]	; (100112a4 <at_ble_indication_send+0x70>)
10011280:	47a0      	blx	r4
10011282:	682b      	ldr	r3, [r5, #0]
10011284:	3301      	adds	r3, #1
10011286:	602b      	str	r3, [r5, #0]
10011288:	2300      	movs	r3, #0
1001128a:	1c18      	adds	r0, r3, #0
1001128c:	2385      	movs	r3, #133	; 0x85
1001128e:	009b      	lsls	r3, r3, #2
10011290:	449d      	add	sp, r3
10011292:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011294:	10019fb0 	.word	0x10019fb0
10011298:	fffffdec 	.word	0xfffffdec
1001129c:	100109a1 	.word	0x100109a1
100112a0:	10012ef5 	.word	0x10012ef5
100112a4:	100129f9 	.word	0x100129f9

100112a8 <init_l2cc_task_module>:
100112a8:	220a      	movs	r2, #10
100112aa:	4b01      	ldr	r3, [pc, #4]	; (100112b0 <init_l2cc_task_module+0x8>)
100112ac:	701a      	strb	r2, [r3, #0]
100112ae:	4770      	bx	lr
100112b0:	1001847c 	.word	0x1001847c

100112b4 <l2cc_data_send_rsp_handler>:
100112b4:	b510      	push	{r4, lr}
100112b6:	7802      	ldrb	r2, [r0, #0]
100112b8:	700a      	strb	r2, [r1, #0]
100112ba:	7883      	ldrb	r3, [r0, #2]
100112bc:	7844      	ldrb	r4, [r0, #1]
100112be:	021b      	lsls	r3, r3, #8
100112c0:	4323      	orrs	r3, r4
100112c2:	804b      	strh	r3, [r1, #2]
100112c4:	7903      	ldrb	r3, [r0, #4]
100112c6:	78c0      	ldrb	r0, [r0, #3]
100112c8:	021b      	lsls	r3, r3, #8
100112ca:	4303      	orrs	r3, r0
100112cc:	808b      	strh	r3, [r1, #4]
100112ce:	2a00      	cmp	r2, #0
100112d0:	d103      	bne.n	100112da <l2cc_data_send_rsp_handler+0x26>
100112d2:	4a02      	ldr	r2, [pc, #8]	; (100112dc <l2cc_data_send_rsp_handler+0x28>)
100112d4:	7813      	ldrb	r3, [r2, #0]
100112d6:	3301      	adds	r3, #1
100112d8:	7013      	strb	r3, [r2, #0]
100112da:	bd10      	pop	{r4, pc}
100112dc:	1001847c 	.word	0x1001847c

100112e0 <l2cc_data_received_handler>:
100112e0:	b508      	push	{r3, lr}
100112e2:	1c03      	adds	r3, r0, #0
100112e4:	7842      	ldrb	r2, [r0, #1]
100112e6:	7800      	ldrb	r0, [r0, #0]
100112e8:	0212      	lsls	r2, r2, #8
100112ea:	4302      	orrs	r2, r0
100112ec:	800a      	strh	r2, [r1, #0]
100112ee:	78da      	ldrb	r2, [r3, #3]
100112f0:	7898      	ldrb	r0, [r3, #2]
100112f2:	0212      	lsls	r2, r2, #8
100112f4:	4302      	orrs	r2, r0
100112f6:	804a      	strh	r2, [r1, #2]
100112f8:	795a      	ldrb	r2, [r3, #5]
100112fa:	7918      	ldrb	r0, [r3, #4]
100112fc:	0212      	lsls	r2, r2, #8
100112fe:	4302      	orrs	r2, r0
10011300:	808a      	strh	r2, [r1, #4]
10011302:	1d88      	adds	r0, r1, #6
10011304:	1d99      	adds	r1, r3, #6
10011306:	4b01      	ldr	r3, [pc, #4]	; (1001130c <l2cc_data_received_handler+0x2c>)
10011308:	4798      	blx	r3
1001130a:	bd08      	pop	{r3, pc}
1001130c:	100150d7 	.word	0x100150d7

10011310 <at_ble_authenticate>:
10011310:	b5f0      	push	{r4, r5, r6, r7, lr}
10011312:	1c0c      	adds	r4, r1, #0
10011314:	211f      	movs	r1, #31
10011316:	b08b      	sub	sp, #44	; 0x2c
10011318:	9307      	str	r3, [sp, #28]
1001131a:	ab02      	add	r3, sp, #8
1001131c:	18c9      	adds	r1, r1, r3
1001131e:	230f      	movs	r3, #15
10011320:	700b      	strb	r3, [r1, #0]
10011322:	4b40      	ldr	r3, [pc, #256]	; (10011424 <at_ble_authenticate+0x114>)
10011324:	1c05      	adds	r5, r0, #0
10011326:	1c16      	adds	r6, r2, #0
10011328:	4798      	blx	r3
1001132a:	1c07      	adds	r7, r0, #0
1001132c:	2001      	movs	r0, #1
1001132e:	2f07      	cmp	r7, #7
10011330:	d875      	bhi.n	1001141e <at_ble_authenticate+0x10e>
10011332:	2c00      	cmp	r4, #0
10011334:	d113      	bne.n	1001135e <at_ble_authenticate+0x4e>
10011336:	2312      	movs	r3, #18
10011338:	435f      	muls	r7, r3
1001133a:	4b3b      	ldr	r3, [pc, #236]	; (10011428 <at_ble_authenticate+0x118>)
1001133c:	5cfb      	ldrb	r3, [r7, r3]
1001133e:	4283      	cmp	r3, r0
10011340:	d001      	beq.n	10011346 <at_ble_authenticate+0x36>
10011342:	20cf      	movs	r0, #207	; 0xcf
10011344:	e06b      	b.n	1001141e <at_ble_authenticate+0x10e>
10011346:	9504      	str	r5, [sp, #16]
10011348:	9400      	str	r4, [sp, #0]
1001134a:	9401      	str	r4, [sp, #4]
1001134c:	9402      	str	r4, [sp, #8]
1001134e:	9403      	str	r4, [sp, #12]
10011350:	1c20      	adds	r0, r4, #0
10011352:	1c21      	adds	r1, r4, #0
10011354:	1c22      	adds	r2, r4, #0
10011356:	1c23      	adds	r3, r4, #0
10011358:	4d34      	ldr	r5, [pc, #208]	; (1001142c <at_ble_authenticate+0x11c>)
1001135a:	47a8      	blx	r5
1001135c:	e05e      	b.n	1001141c <at_ble_authenticate+0x10c>
1001135e:	7922      	ldrb	r2, [r4, #4]
10011360:	2a06      	cmp	r2, #6
10011362:	d9ee      	bls.n	10011342 <at_ble_authenticate+0x32>
10011364:	7963      	ldrb	r3, [r4, #5]
10011366:	2b10      	cmp	r3, #16
10011368:	d8eb      	bhi.n	10011342 <at_ble_authenticate+0x32>
1001136a:	429a      	cmp	r2, r3
1001136c:	d8e9      	bhi.n	10011342 <at_ble_authenticate+0x32>
1001136e:	7a23      	ldrb	r3, [r4, #8]
10011370:	2b04      	cmp	r3, #4
10011372:	d8e6      	bhi.n	10011342 <at_ble_authenticate+0x32>
10011374:	79a3      	ldrb	r3, [r4, #6]
10011376:	2b07      	cmp	r3, #7
10011378:	d8e3      	bhi.n	10011342 <at_ble_authenticate+0x32>
1001137a:	79e3      	ldrb	r3, [r4, #7]
1001137c:	2b07      	cmp	r3, #7
1001137e:	d8e0      	bhi.n	10011342 <at_ble_authenticate+0x32>
10011380:	78a3      	ldrb	r3, [r4, #2]
10011382:	2b00      	cmp	r3, #0
10011384:	d006      	beq.n	10011394 <at_ble_authenticate+0x84>
10011386:	2e00      	cmp	r6, #0
10011388:	d0db      	beq.n	10011342 <at_ble_authenticate+0x32>
1001138a:	4829      	ldr	r0, [pc, #164]	; (10011430 <at_ble_authenticate+0x120>)
1001138c:	1c31      	adds	r1, r6, #0
1001138e:	221c      	movs	r2, #28
10011390:	4b28      	ldr	r3, [pc, #160]	; (10011434 <at_ble_authenticate+0x124>)
10011392:	4798      	blx	r3
10011394:	9b07      	ldr	r3, [sp, #28]
10011396:	2b00      	cmp	r3, #0
10011398:	d005      	beq.n	100113a6 <at_ble_authenticate+0x96>
1001139a:	4827      	ldr	r0, [pc, #156]	; (10011438 <at_ble_authenticate+0x128>)
1001139c:	1c19      	adds	r1, r3, #0
1001139e:	309a      	adds	r0, #154	; 0x9a
100113a0:	2210      	movs	r2, #16
100113a2:	4b24      	ldr	r3, [pc, #144]	; (10011434 <at_ble_authenticate+0x124>)
100113a4:	4798      	blx	r3
100113a6:	7863      	ldrb	r3, [r4, #1]
100113a8:	78a2      	ldrb	r2, [r4, #2]
100113aa:	009b      	lsls	r3, r3, #2
100113ac:	4313      	orrs	r3, r2
100113ae:	2212      	movs	r2, #18
100113b0:	4357      	muls	r7, r2
100113b2:	4a1d      	ldr	r2, [pc, #116]	; (10011428 <at_ble_authenticate+0x118>)
100113b4:	b2db      	uxtb	r3, r3
100113b6:	5cba      	ldrb	r2, [r7, r2]
100113b8:	2a00      	cmp	r2, #0
100113ba:	d116      	bne.n	100113ea <at_ble_authenticate+0xda>
100113bc:	79a0      	ldrb	r0, [r4, #6]
100113be:	0742      	lsls	r2, r0, #29
100113c0:	d502      	bpl.n	100113c8 <at_ble_authenticate+0xb8>
100113c2:	9a07      	ldr	r2, [sp, #28]
100113c4:	2a00      	cmp	r2, #0
100113c6:	d0bc      	beq.n	10011342 <at_ble_authenticate+0x32>
100113c8:	07c2      	lsls	r2, r0, #31
100113ca:	d501      	bpl.n	100113d0 <at_ble_authenticate+0xc0>
100113cc:	2e00      	cmp	r6, #0
100113ce:	d0b8      	beq.n	10011342 <at_ble_authenticate+0x32>
100113d0:	7966      	ldrb	r6, [r4, #5]
100113d2:	7821      	ldrb	r1, [r4, #0]
100113d4:	78e2      	ldrb	r2, [r4, #3]
100113d6:	9600      	str	r6, [sp, #0]
100113d8:	9001      	str	r0, [sp, #4]
100113da:	79e0      	ldrb	r0, [r4, #7]
100113dc:	9002      	str	r0, [sp, #8]
100113de:	7a20      	ldrb	r0, [r4, #8]
100113e0:	4c16      	ldr	r4, [pc, #88]	; (1001143c <at_ble_authenticate+0x12c>)
100113e2:	9003      	str	r0, [sp, #12]
100113e4:	1c28      	adds	r0, r5, #0
100113e6:	47a0      	blx	r4
100113e8:	e018      	b.n	1001141c <at_ble_authenticate+0x10c>
100113ea:	2a01      	cmp	r2, #1
100113ec:	d1a9      	bne.n	10011342 <at_ble_authenticate+0x32>
100113ee:	79e0      	ldrb	r0, [r4, #7]
100113f0:	0742      	lsls	r2, r0, #29
100113f2:	d502      	bpl.n	100113fa <at_ble_authenticate+0xea>
100113f4:	9a07      	ldr	r2, [sp, #28]
100113f6:	2a00      	cmp	r2, #0
100113f8:	d0a3      	beq.n	10011342 <at_ble_authenticate+0x32>
100113fa:	07c2      	lsls	r2, r0, #31
100113fc:	d501      	bpl.n	10011402 <at_ble_authenticate+0xf2>
100113fe:	2e00      	cmp	r6, #0
10011400:	d09f      	beq.n	10011342 <at_ble_authenticate+0x32>
10011402:	7966      	ldrb	r6, [r4, #5]
10011404:	7821      	ldrb	r1, [r4, #0]
10011406:	78e2      	ldrb	r2, [r4, #3]
10011408:	9600      	str	r6, [sp, #0]
1001140a:	79a6      	ldrb	r6, [r4, #6]
1001140c:	9002      	str	r0, [sp, #8]
1001140e:	9601      	str	r6, [sp, #4]
10011410:	7a20      	ldrb	r0, [r4, #8]
10011412:	9504      	str	r5, [sp, #16]
10011414:	9003      	str	r0, [sp, #12]
10011416:	4c05      	ldr	r4, [pc, #20]	; (1001142c <at_ble_authenticate+0x11c>)
10011418:	2001      	movs	r0, #1
1001141a:	47a0      	blx	r4
1001141c:	2000      	movs	r0, #0
1001141e:	b00b      	add	sp, #44	; 0x2c
10011420:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011422:	46c0      	nop			; (mov r8, r8)
10011424:	10011811 	.word	0x10011811
10011428:	1001ae16 	.word	0x1001ae16
1001142c:	10011d81 	.word	0x10011d81
10011430:	1001af24 	.word	0x1001af24
10011434:	100150d7 	.word	0x100150d7
10011438:	1001aea6 	.word	0x1001aea6
1001143c:	10011b61 	.word	0x10011b61

10011440 <at_ble_pair_key_reply>:
10011440:	b5f0      	push	{r4, r5, r6, r7, lr}
10011442:	b085      	sub	sp, #20
10011444:	1c05      	adds	r5, r0, #0
10011446:	1c0c      	adds	r4, r1, #0
10011448:	1c16      	adds	r6, r2, #0
1001144a:	2100      	movs	r1, #0
1001144c:	4668      	mov	r0, sp
1001144e:	2210      	movs	r2, #16
10011450:	4b18      	ldr	r3, [pc, #96]	; (100114b4 <at_ble_pair_key_reply+0x74>)
10011452:	4798      	blx	r3
10011454:	2101      	movs	r1, #1
10011456:	2e00      	cmp	r6, #0
10011458:	d101      	bne.n	1001145e <at_ble_pair_key_reply+0x1e>
1001145a:	1c31      	adds	r1, r6, #0
1001145c:	466e      	mov	r6, sp
1001145e:	2c00      	cmp	r4, #0
10011460:	d116      	bne.n	10011490 <at_ble_pair_key_reply+0x50>
10011462:	2701      	movs	r7, #1
10011464:	1c23      	adds	r3, r4, #0
10011466:	1d70      	adds	r0, r6, #5
10011468:	3e01      	subs	r6, #1
1001146a:	7802      	ldrb	r2, [r0, #0]
1001146c:	3801      	subs	r0, #1
1001146e:	3a30      	subs	r2, #48	; 0x30
10011470:	437a      	muls	r2, r7
10011472:	189b      	adds	r3, r3, r2
10011474:	220a      	movs	r2, #10
10011476:	4357      	muls	r7, r2
10011478:	42b0      	cmp	r0, r6
1001147a:	d1f6      	bne.n	1001146a <at_ble_pair_key_reply+0x2a>
1001147c:	466a      	mov	r2, sp
1001147e:	4668      	mov	r0, sp
10011480:	7013      	strb	r3, [r2, #0]
10011482:	0a1a      	lsrs	r2, r3, #8
10011484:	7042      	strb	r2, [r0, #1]
10011486:	0c1a      	lsrs	r2, r3, #16
10011488:	0e1b      	lsrs	r3, r3, #24
1001148a:	7082      	strb	r2, [r0, #2]
1001148c:	70c3      	strb	r3, [r0, #3]
1001148e:	e009      	b.n	100114a4 <at_ble_pair_key_reply+0x64>
10011490:	20cf      	movs	r0, #207	; 0xcf
10011492:	2c01      	cmp	r4, #1
10011494:	d10c      	bne.n	100114b0 <at_ble_pair_key_reply+0x70>
10011496:	2300      	movs	r3, #0
10011498:	4668      	mov	r0, sp
1001149a:	5cf2      	ldrb	r2, [r6, r3]
1001149c:	54c2      	strb	r2, [r0, r3]
1001149e:	3301      	adds	r3, #1
100114a0:	2b10      	cmp	r3, #16
100114a2:	d1f9      	bne.n	10011498 <at_ble_pair_key_reply+0x58>
100114a4:	2004      	movs	r0, #4
100114a6:	466a      	mov	r2, sp
100114a8:	1c2b      	adds	r3, r5, #0
100114aa:	4c03      	ldr	r4, [pc, #12]	; (100114b8 <at_ble_pair_key_reply+0x78>)
100114ac:	47a0      	blx	r4
100114ae:	2000      	movs	r0, #0
100114b0:	b005      	add	sp, #20
100114b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114b4:	100150e9 	.word	0x100150e9
100114b8:	10011dfd 	.word	0x10011dfd

100114bc <at_ble_send_slave_sec_request>:
100114bc:	b570      	push	{r4, r5, r6, lr}
100114be:	4b0c      	ldr	r3, [pc, #48]	; (100114f0 <at_ble_send_slave_sec_request+0x34>)
100114c0:	1c0e      	adds	r6, r1, #0
100114c2:	2100      	movs	r1, #0
100114c4:	1c05      	adds	r5, r0, #0
100114c6:	1c14      	adds	r4, r2, #0
100114c8:	4798      	blx	r3
100114ca:	2301      	movs	r3, #1
100114cc:	2807      	cmp	r0, #7
100114ce:	d80d      	bhi.n	100114ec <at_ble_send_slave_sec_request+0x30>
100114d0:	3311      	adds	r3, #17
100114d2:	4358      	muls	r0, r3
100114d4:	4b07      	ldr	r3, [pc, #28]	; (100114f4 <at_ble_send_slave_sec_request+0x38>)
100114d6:	5cc2      	ldrb	r2, [r0, r3]
100114d8:	23e0      	movs	r3, #224	; 0xe0
100114da:	2a01      	cmp	r2, #1
100114dc:	d106      	bne.n	100114ec <at_ble_send_slave_sec_request+0x30>
100114de:	00b1      	lsls	r1, r6, #2
100114e0:	430c      	orrs	r4, r1
100114e2:	4b05      	ldr	r3, [pc, #20]	; (100114f8 <at_ble_send_slave_sec_request+0x3c>)
100114e4:	b2e1      	uxtb	r1, r4
100114e6:	1c28      	adds	r0, r5, #0
100114e8:	4798      	blx	r3
100114ea:	2300      	movs	r3, #0
100114ec:	1c18      	adds	r0, r3, #0
100114ee:	bd70      	pop	{r4, r5, r6, pc}
100114f0:	10011811 	.word	0x10011811
100114f4:	1001ae16 	.word	0x1001ae16
100114f8:	10011e4d 	.word	0x10011e4d

100114fc <at_ble_encryption_start>:
100114fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100114fe:	23cf      	movs	r3, #207	; 0xcf
10011500:	2900      	cmp	r1, #0
10011502:	d02b      	beq.n	1001155c <at_ble_encryption_start+0x60>
10011504:	2a05      	cmp	r2, #5
10011506:	d829      	bhi.n	1001155c <at_ble_encryption_start+0x60>
10011508:	2701      	movs	r7, #1
1001150a:	1c3d      	adds	r5, r7, #0
1001150c:	2433      	movs	r4, #51	; 0x33
1001150e:	4095      	lsls	r5, r2
10011510:	4225      	tst	r5, r4
10011512:	d023      	beq.n	1001155c <at_ble_encryption_start+0x60>
10011514:	7e8c      	ldrb	r4, [r1, #26]
10011516:	3c07      	subs	r4, #7
10011518:	2c09      	cmp	r4, #9
1001151a:	d81f      	bhi.n	1001155c <at_ble_encryption_start+0x60>
1001151c:	4b10      	ldr	r3, [pc, #64]	; (10011560 <at_ble_encryption_start+0x64>)
1001151e:	1c0c      	adds	r4, r1, #0
10011520:	2100      	movs	r1, #0
10011522:	1c15      	adds	r5, r2, #0
10011524:	1c06      	adds	r6, r0, #0
10011526:	4798      	blx	r3
10011528:	1c3b      	adds	r3, r7, #0
1001152a:	2807      	cmp	r0, #7
1001152c:	d816      	bhi.n	1001155c <at_ble_encryption_start+0x60>
1001152e:	2312      	movs	r3, #18
10011530:	4358      	muls	r0, r3
10011532:	4b0c      	ldr	r3, [pc, #48]	; (10011564 <at_ble_encryption_start+0x68>)
10011534:	5cc7      	ldrb	r7, [r0, r3]
10011536:	23e0      	movs	r3, #224	; 0xe0
10011538:	2f00      	cmp	r7, #0
1001153a:	d10f      	bne.n	1001155c <at_ble_encryption_start+0x60>
1001153c:	1c21      	adds	r1, r4, #0
1001153e:	221c      	movs	r2, #28
10011540:	4b09      	ldr	r3, [pc, #36]	; (10011568 <at_ble_encryption_start+0x6c>)
10011542:	480a      	ldr	r0, [pc, #40]	; (1001156c <at_ble_encryption_start+0x70>)
10011544:	4798      	blx	r3
10011546:	1c23      	adds	r3, r4, #0
10011548:	7ea1      	ldrb	r1, [r4, #26]
1001154a:	8a22      	ldrh	r2, [r4, #16]
1001154c:	3312      	adds	r3, #18
1001154e:	9100      	str	r1, [sp, #0]
10011550:	9501      	str	r5, [sp, #4]
10011552:	1c21      	adds	r1, r4, #0
10011554:	1c30      	adds	r0, r6, #0
10011556:	4c06      	ldr	r4, [pc, #24]	; (10011570 <at_ble_encryption_start+0x74>)
10011558:	47a0      	blx	r4
1001155a:	1c3b      	adds	r3, r7, #0
1001155c:	1c18      	adds	r0, r3, #0
1001155e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011560:	10011811 	.word	0x10011811
10011564:	1001ae16 	.word	0x1001ae16
10011568:	100150d7 	.word	0x100150d7
1001156c:	1001af24 	.word	0x1001af24
10011570:	10011e8d 	.word	0x10011e8d

10011574 <at_ble_encryption_request_reply>:
10011574:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011576:	24cf      	movs	r4, #207	; 0xcf
10011578:	2b00      	cmp	r3, #0
1001157a:	d011      	beq.n	100115a0 <at_ble_encryption_request_reply+0x2c>
1001157c:	2a00      	cmp	r2, #0
1001157e:	d00a      	beq.n	10011596 <at_ble_encryption_request_reply+0x22>
10011580:	2905      	cmp	r1, #5
10011582:	d80d      	bhi.n	100115a0 <at_ble_encryption_request_reply+0x2c>
10011584:	2501      	movs	r5, #1
10011586:	2633      	movs	r6, #51	; 0x33
10011588:	408d      	lsls	r5, r1
1001158a:	4235      	tst	r5, r6
1001158c:	d008      	beq.n	100115a0 <at_ble_encryption_request_reply+0x2c>
1001158e:	7e9d      	ldrb	r5, [r3, #26]
10011590:	3d07      	subs	r5, #7
10011592:	2d09      	cmp	r5, #9
10011594:	d804      	bhi.n	100115a0 <at_ble_encryption_request_reply+0x2c>
10011596:	7e9c      	ldrb	r4, [r3, #26]
10011598:	9400      	str	r4, [sp, #0]
1001159a:	4c02      	ldr	r4, [pc, #8]	; (100115a4 <at_ble_encryption_request_reply+0x30>)
1001159c:	47a0      	blx	r4
1001159e:	2400      	movs	r4, #0
100115a0:	1c20      	adds	r0, r4, #0
100115a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100115a4:	10011f49 	.word	0x10011f49

100115a8 <rx_callback>:
100115a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115aa:	8883      	ldrh	r3, [r0, #4]
100115ac:	1c01      	adds	r1, r0, #0
100115ae:	9301      	str	r3, [sp, #4]
100115b0:	88c5      	ldrh	r5, [r0, #6]
100115b2:	8806      	ldrh	r6, [r0, #0]
100115b4:	2d00      	cmp	r5, #0
100115b6:	d10f      	bne.n	100115d8 <rx_callback+0x30>
100115b8:	1c19      	adds	r1, r3, #0
100115ba:	1c30      	adds	r0, r6, #0
100115bc:	4b19      	ldr	r3, [pc, #100]	; (10011624 <rx_callback+0x7c>)
100115be:	1c2a      	adds	r2, r5, #0
100115c0:	4798      	blx	r3
100115c2:	1e03      	subs	r3, r0, #0
100115c4:	d105      	bne.n	100115d2 <rx_callback+0x2a>
100115c6:	1c30      	adds	r0, r6, #0
100115c8:	9901      	ldr	r1, [sp, #4]
100115ca:	1c1a      	adds	r2, r3, #0
100115cc:	4c16      	ldr	r4, [pc, #88]	; (10011628 <rx_callback+0x80>)
100115ce:	47a0      	blx	r4
100115d0:	e027      	b.n	10011622 <rx_callback+0x7a>
100115d2:	4b16      	ldr	r3, [pc, #88]	; (1001162c <rx_callback+0x84>)
100115d4:	4798      	blx	r3
100115d6:	e024      	b.n	10011622 <rx_callback+0x7a>
100115d8:	4c15      	ldr	r4, [pc, #84]	; (10011630 <rx_callback+0x88>)
100115da:	4a16      	ldr	r2, [pc, #88]	; (10011634 <rx_callback+0x8c>)
100115dc:	6823      	ldr	r3, [r4, #0]
100115de:	6812      	ldr	r2, [r2, #0]
100115e0:	18eb      	adds	r3, r5, r3
100115e2:	4293      	cmp	r3, r2
100115e4:	d901      	bls.n	100115ea <rx_callback+0x42>
100115e6:	2300      	movs	r3, #0
100115e8:	6023      	str	r3, [r4, #0]
100115ea:	4f13      	ldr	r7, [pc, #76]	; (10011638 <rx_callback+0x90>)
100115ec:	6822      	ldr	r2, [r4, #0]
100115ee:	683b      	ldr	r3, [r7, #0]
100115f0:	3108      	adds	r1, #8
100115f2:	1898      	adds	r0, r3, r2
100115f4:	1c2a      	adds	r2, r5, #0
100115f6:	4b11      	ldr	r3, [pc, #68]	; (1001163c <rx_callback+0x94>)
100115f8:	4798      	blx	r3
100115fa:	683b      	ldr	r3, [r7, #0]
100115fc:	6822      	ldr	r2, [r4, #0]
100115fe:	1c30      	adds	r0, r6, #0
10011600:	189a      	adds	r2, r3, r2
10011602:	9901      	ldr	r1, [sp, #4]
10011604:	4b07      	ldr	r3, [pc, #28]	; (10011624 <rx_callback+0x7c>)
10011606:	4798      	blx	r3
10011608:	2800      	cmp	r0, #0
1001160a:	d1e2      	bne.n	100115d2 <rx_callback+0x2a>
1001160c:	6823      	ldr	r3, [r4, #0]
1001160e:	683a      	ldr	r2, [r7, #0]
10011610:	1c30      	adds	r0, r6, #0
10011612:	18d2      	adds	r2, r2, r3
10011614:	9901      	ldr	r1, [sp, #4]
10011616:	1c2b      	adds	r3, r5, #0
10011618:	4e03      	ldr	r6, [pc, #12]	; (10011628 <rx_callback+0x80>)
1001161a:	47b0      	blx	r6
1001161c:	6823      	ldr	r3, [r4, #0]
1001161e:	18ed      	adds	r5, r5, r3
10011620:	6025      	str	r5, [r4, #0]
10011622:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011624:	1000fc3d 	.word	0x1000fc3d
10011628:	1000fbb5 	.word	0x1000fbb5
1001162c:	1000f55d 	.word	0x1000f55d
10011630:	1001af80 	.word	0x1001af80
10011634:	10019f2c 	.word	0x10019f2c
10011638:	10019f28 	.word	0x10019f28
1001163c:	100150d7 	.word	0x100150d7

10011640 <interface_send>:
10011640:	b508      	push	{r3, lr}
10011642:	4b02      	ldr	r3, [pc, #8]	; (1001164c <interface_send+0xc>)
10011644:	4798      	blx	r3
10011646:	2000      	movs	r0, #0
10011648:	bd08      	pop	{r3, pc}
1001164a:	46c0      	nop			; (mov r8, r8)
1001164c:	1000f255 	.word	0x1000f255

10011650 <interface_init>:
10011650:	2280      	movs	r2, #128	; 0x80
10011652:	b510      	push	{r4, lr}
10011654:	2100      	movs	r1, #0
10011656:	1c04      	adds	r4, r0, #0
10011658:	0092      	lsls	r2, r2, #2
1001165a:	4b08      	ldr	r3, [pc, #32]	; (1001167c <interface_init+0x2c>)
1001165c:	4808      	ldr	r0, [pc, #32]	; (10011680 <interface_init+0x30>)
1001165e:	4798      	blx	r3
10011660:	2200      	movs	r2, #0
10011662:	4b08      	ldr	r3, [pc, #32]	; (10011684 <interface_init+0x34>)
10011664:	601a      	str	r2, [r3, #0]
10011666:	4a08      	ldr	r2, [pc, #32]	; (10011688 <interface_init+0x38>)
10011668:	4b08      	ldr	r3, [pc, #32]	; (1001168c <interface_init+0x3c>)
1001166a:	601a      	str	r2, [r3, #0]
1001166c:	4b08      	ldr	r3, [pc, #32]	; (10011690 <interface_init+0x40>)
1001166e:	6922      	ldr	r2, [r4, #16]
10011670:	601a      	str	r2, [r3, #0]
10011672:	6962      	ldr	r2, [r4, #20]
10011674:	4b07      	ldr	r3, [pc, #28]	; (10011694 <interface_init+0x44>)
10011676:	601a      	str	r2, [r3, #0]
10011678:	bd10      	pop	{r4, pc}
1001167a:	46c0      	nop			; (mov r8, r8)
1001167c:	100150e9 	.word	0x100150e9
10011680:	1001b184 	.word	0x1001b184
10011684:	1001af80 	.word	0x1001af80
10011688:	1001af84 	.word	0x1001af84
1001168c:	10018480 	.word	0x10018480
10011690:	10019f28 	.word	0x10019f28
10011694:	10019f2c 	.word	0x10019f2c

10011698 <platform_cmd_cmpl_signal>:
10011698:	2201      	movs	r2, #1
1001169a:	4b01      	ldr	r3, [pc, #4]	; (100116a0 <platform_cmd_cmpl_signal+0x8>)
1001169c:	601a      	str	r2, [r3, #0]
1001169e:	4770      	bx	lr
100116a0:	10019f30 	.word	0x10019f30

100116a4 <platform_cmd_cmpl_wait>:
100116a4:	b510      	push	{r4, lr}
100116a6:	1c04      	adds	r4, r0, #0
100116a8:	4b07      	ldr	r3, [pc, #28]	; (100116c8 <platform_cmd_cmpl_wait+0x24>)
100116aa:	681a      	ldr	r2, [r3, #0]
100116ac:	2a01      	cmp	r2, #1
100116ae:	d003      	beq.n	100116b8 <platform_cmd_cmpl_wait+0x14>
100116b0:	4b06      	ldr	r3, [pc, #24]	; (100116cc <platform_cmd_cmpl_wait+0x28>)
100116b2:	2000      	movs	r0, #0
100116b4:	4798      	blx	r3
100116b6:	e7f7      	b.n	100116a8 <platform_cmd_cmpl_wait+0x4>
100116b8:	6819      	ldr	r1, [r3, #0]
100116ba:	2901      	cmp	r1, #1
100116bc:	d102      	bne.n	100116c4 <platform_cmd_cmpl_wait+0x20>
100116be:	2200      	movs	r2, #0
100116c0:	601a      	str	r2, [r3, #0]
100116c2:	e000      	b.n	100116c6 <platform_cmd_cmpl_wait+0x22>
100116c4:	7022      	strb	r2, [r4, #0]
100116c6:	bd10      	pop	{r4, pc}
100116c8:	10019f30 	.word	0x10019f30
100116cc:	1000f2e5 	.word	0x1000f2e5

100116d0 <start_timer>:
100116d0:	4770      	bx	lr

100116d2 <stop_timer>:
100116d2:	4770      	bx	lr

100116d4 <dbg_le_set_bd_addr_req_handler>:
100116d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100116d6:	466b      	mov	r3, sp
100116d8:	1dde      	adds	r6, r3, #7
100116da:	2300      	movs	r3, #0
100116dc:	7033      	strb	r3, [r6, #0]
100116de:	230f      	movs	r3, #15
100116e0:	4c13      	ldr	r4, [pc, #76]	; (10011730 <dbg_le_set_bd_addr_req_handler+0x5c>)
100116e2:	2703      	movs	r7, #3
100116e4:	7023      	strb	r3, [r4, #0]
100116e6:	2300      	movs	r3, #0
100116e8:	70e3      	strb	r3, [r4, #3]
100116ea:	4b12      	ldr	r3, [pc, #72]	; (10011734 <dbg_le_set_bd_addr_req_handler+0x60>)
100116ec:	1c01      	adds	r1, r0, #0
100116ee:	881a      	ldrh	r2, [r3, #0]
100116f0:	881b      	ldrh	r3, [r3, #0]
100116f2:	7122      	strb	r2, [r4, #4]
100116f4:	0a1b      	lsrs	r3, r3, #8
100116f6:	2206      	movs	r2, #6
100116f8:	7163      	strb	r3, [r4, #5]
100116fa:	480f      	ldr	r0, [pc, #60]	; (10011738 <dbg_le_set_bd_addr_req_handler+0x64>)
100116fc:	4b0f      	ldr	r3, [pc, #60]	; (1001173c <dbg_le_set_bd_addr_req_handler+0x68>)
100116fe:	7067      	strb	r7, [r4, #1]
10011700:	70a7      	strb	r7, [r4, #2]
10011702:	4798      	blx	r3
10011704:	4d0e      	ldr	r5, [pc, #56]	; (10011740 <dbg_le_set_bd_addr_req_handler+0x6c>)
10011706:	4b0f      	ldr	r3, [pc, #60]	; (10011744 <dbg_le_set_bd_addr_req_handler+0x70>)
10011708:	210e      	movs	r1, #14
1001170a:	802b      	strh	r3, [r5, #0]
1001170c:	2306      	movs	r3, #6
1001170e:	71a3      	strb	r3, [r4, #6]
10011710:	2300      	movs	r3, #0
10011712:	1c20      	adds	r0, r4, #0
10011714:	71e3      	strb	r3, [r4, #7]
10011716:	4b0c      	ldr	r3, [pc, #48]	; (10011748 <dbg_le_set_bd_addr_req_handler+0x74>)
10011718:	80af      	strh	r7, [r5, #4]
1001171a:	4798      	blx	r3
1001171c:	1c30      	adds	r0, r6, #0
1001171e:	4b0b      	ldr	r3, [pc, #44]	; (1001174c <dbg_le_set_bd_addr_req_handler+0x78>)
10011720:	4798      	blx	r3
10011722:	7833      	ldrb	r3, [r6, #0]
10011724:	20e2      	movs	r0, #226	; 0xe2
10011726:	2b00      	cmp	r3, #0
10011728:	d101      	bne.n	1001172e <dbg_le_set_bd_addr_req_handler+0x5a>
1001172a:	68ab      	ldr	r3, [r5, #8]
1001172c:	7818      	ldrb	r0, [r3, #0]
1001172e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011730:	1001b184 	.word	0x1001b184
10011734:	1001ae14 	.word	0x1001ae14
10011738:	1001b18c 	.word	0x1001b18c
1001173c:	100150d7 	.word	0x100150d7
10011740:	1001ae08 	.word	0x1001ae08
10011744:	00000329 	.word	0x00000329
10011748:	10011641 	.word	0x10011641
1001174c:	100116a5 	.word	0x100116a5

10011750 <gapc_get_dev_info_cfm.constprop.1>:
10011750:	b538      	push	{r3, r4, r5, lr}
10011752:	230b      	movs	r3, #11
10011754:	4c27      	ldr	r4, [pc, #156]	; (100117f4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10011756:	7023      	strb	r3, [r4, #0]
10011758:	3303      	adds	r3, #3
1001175a:	7063      	strb	r3, [r4, #1]
1001175c:	3329      	adds	r3, #41	; 0x29
1001175e:	70a3      	strb	r3, [r4, #2]
10011760:	4b25      	ldr	r3, [pc, #148]	; (100117f8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10011762:	70e1      	strb	r1, [r4, #3]
10011764:	881a      	ldrh	r2, [r3, #0]
10011766:	881b      	ldrh	r3, [r3, #0]
10011768:	7122      	strb	r2, [r4, #4]
1001176a:	0a1b      	lsrs	r3, r3, #8
1001176c:	7163      	strb	r3, [r4, #5]
1001176e:	2300      	movs	r3, #0
10011770:	7220      	strb	r0, [r4, #8]
10011772:	7263      	strb	r3, [r4, #9]
10011774:	2801      	cmp	r0, #1
10011776:	d02b      	beq.n	100117d0 <gapc_get_dev_info_cfm.constprop.1+0x80>
10011778:	4298      	cmp	r0, r3
1001177a:	d01b      	beq.n	100117b4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1001177c:	2802      	cmp	r0, #2
1001177e:	d12f      	bne.n	100117e0 <gapc_get_dev_info_cfm.constprop.1+0x90>
10011780:	4b1e      	ldr	r3, [pc, #120]	; (100117fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
10011782:	2112      	movs	r1, #18
10011784:	1c1a      	adds	r2, r3, #0
10011786:	32ce      	adds	r2, #206	; 0xce
10011788:	8812      	ldrh	r2, [r2, #0]
1001178a:	72a2      	strb	r2, [r4, #10]
1001178c:	0a12      	lsrs	r2, r2, #8
1001178e:	72e2      	strb	r2, [r4, #11]
10011790:	1c1a      	adds	r2, r3, #0
10011792:	32d0      	adds	r2, #208	; 0xd0
10011794:	8812      	ldrh	r2, [r2, #0]
10011796:	7322      	strb	r2, [r4, #12]
10011798:	0a12      	lsrs	r2, r2, #8
1001179a:	7362      	strb	r2, [r4, #13]
1001179c:	1c1a      	adds	r2, r3, #0
1001179e:	32d2      	adds	r2, #210	; 0xd2
100117a0:	8812      	ldrh	r2, [r2, #0]
100117a2:	33d4      	adds	r3, #212	; 0xd4
100117a4:	73a2      	strb	r2, [r4, #14]
100117a6:	0a12      	lsrs	r2, r2, #8
100117a8:	73e2      	strb	r2, [r4, #15]
100117aa:	881b      	ldrh	r3, [r3, #0]
100117ac:	7423      	strb	r3, [r4, #16]
100117ae:	0a1b      	lsrs	r3, r3, #8
100117b0:	7463      	strb	r3, [r4, #17]
100117b2:	e016      	b.n	100117e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
100117b4:	4b11      	ldr	r3, [pc, #68]	; (100117fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
100117b6:	4912      	ldr	r1, [pc, #72]	; (10011800 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100117b8:	33aa      	adds	r3, #170	; 0xaa
100117ba:	881d      	ldrh	r5, [r3, #0]
100117bc:	4811      	ldr	r0, [pc, #68]	; (10011804 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
100117be:	0a2b      	lsrs	r3, r5, #8
100117c0:	72a5      	strb	r5, [r4, #10]
100117c2:	72e3      	strb	r3, [r4, #11]
100117c4:	1c2a      	adds	r2, r5, #0
100117c6:	4b10      	ldr	r3, [pc, #64]	; (10011808 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100117c8:	350c      	adds	r5, #12
100117ca:	4798      	blx	r3
100117cc:	b2a9      	uxth	r1, r5
100117ce:	e008      	b.n	100117e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
100117d0:	4b0a      	ldr	r3, [pc, #40]	; (100117fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
100117d2:	210c      	movs	r1, #12
100117d4:	33cc      	adds	r3, #204	; 0xcc
100117d6:	881b      	ldrh	r3, [r3, #0]
100117d8:	72a3      	strb	r3, [r4, #10]
100117da:	0a1b      	lsrs	r3, r3, #8
100117dc:	72e3      	strb	r3, [r4, #11]
100117de:	e000      	b.n	100117e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
100117e0:	210a      	movs	r1, #10
100117e2:	1c0b      	adds	r3, r1, #0
100117e4:	3b08      	subs	r3, #8
100117e6:	71a3      	strb	r3, [r4, #6]
100117e8:	121b      	asrs	r3, r3, #8
100117ea:	71e3      	strb	r3, [r4, #7]
100117ec:	1c20      	adds	r0, r4, #0
100117ee:	4b07      	ldr	r3, [pc, #28]	; (1001180c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
100117f0:	4798      	blx	r3
100117f2:	bd38      	pop	{r3, r4, r5, pc}
100117f4:	1001b184 	.word	0x1001b184
100117f8:	1001ae14 	.word	0x1001ae14
100117fc:	1001aea6 	.word	0x1001aea6
10011800:	1001af52 	.word	0x1001af52
10011804:	1001b190 	.word	0x1001b190
10011808:	100150d7 	.word	0x100150d7
1001180c:	10011641 	.word	0x10011641

10011810 <check_ConnData_idx_role>:
10011810:	4b0c      	ldr	r3, [pc, #48]	; (10011844 <check_ConnData_idx_role+0x34>)
10011812:	b570      	push	{r4, r5, r6, lr}
10011814:	1c04      	adds	r4, r0, #0
10011816:	2008      	movs	r0, #8
10011818:	429c      	cmp	r4, r3
1001181a:	d011      	beq.n	10011840 <check_ConnData_idx_role+0x30>
1001181c:	2300      	movs	r3, #0
1001181e:	2212      	movs	r2, #18
10011820:	435a      	muls	r2, r3
10011822:	4d09      	ldr	r5, [pc, #36]	; (10011848 <check_ConnData_idx_role+0x38>)
10011824:	b2d8      	uxtb	r0, r3
10011826:	1956      	adds	r6, r2, r5
10011828:	8976      	ldrh	r6, [r6, #10]
1001182a:	42a6      	cmp	r6, r4
1001182c:	d104      	bne.n	10011838 <check_ConnData_idx_role+0x28>
1001182e:	2900      	cmp	r1, #0
10011830:	d006      	beq.n	10011840 <check_ConnData_idx_role+0x30>
10011832:	5d53      	ldrb	r3, [r2, r5]
10011834:	700b      	strb	r3, [r1, #0]
10011836:	e003      	b.n	10011840 <check_ConnData_idx_role+0x30>
10011838:	3301      	adds	r3, #1
1001183a:	2b08      	cmp	r3, #8
1001183c:	d1ef      	bne.n	1001181e <check_ConnData_idx_role+0xe>
1001183e:	1c18      	adds	r0, r3, #0
10011840:	bd70      	pop	{r4, r5, r6, pc}
10011842:	46c0      	nop			; (mov r8, r8)
10011844:	0000ffff 	.word	0x0000ffff
10011848:	1001ae16 	.word	0x1001ae16

1001184c <check_ConnData_emptyEntry>:
1001184c:	2300      	movs	r3, #0
1001184e:	2212      	movs	r2, #18
10011850:	435a      	muls	r2, r3
10011852:	4906      	ldr	r1, [pc, #24]	; (1001186c <check_ConnData_emptyEntry+0x20>)
10011854:	b2d8      	uxtb	r0, r3
10011856:	1852      	adds	r2, r2, r1
10011858:	8951      	ldrh	r1, [r2, #10]
1001185a:	4a05      	ldr	r2, [pc, #20]	; (10011870 <check_ConnData_emptyEntry+0x24>)
1001185c:	4291      	cmp	r1, r2
1001185e:	d003      	beq.n	10011868 <check_ConnData_emptyEntry+0x1c>
10011860:	3301      	adds	r3, #1
10011862:	2b08      	cmp	r3, #8
10011864:	d1f3      	bne.n	1001184e <check_ConnData_emptyEntry+0x2>
10011866:	1c18      	adds	r0, r3, #0
10011868:	4770      	bx	lr
1001186a:	46c0      	nop			; (mov r8, r8)
1001186c:	1001ae16 	.word	0x1001ae16
10011870:	0000ffff 	.word	0x0000ffff

10011874 <gapc_cmp_evt>:
10011874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011876:	780b      	ldrb	r3, [r1, #0]
10011878:	1c05      	adds	r5, r0, #0
1001187a:	1e58      	subs	r0, r3, #1
1001187c:	784e      	ldrb	r6, [r1, #1]
1001187e:	280f      	cmp	r0, #15
10011880:	d85a      	bhi.n	10011938 <gapc_cmp_evt+0xc4>
10011882:	1c14      	adds	r4, r2, #0
10011884:	f001 fba4 	bl	10012fd0 <__gnu_thumb1_case_uqi>
10011888:	5858440a 	.word	0x5858440a
1001188c:	4b584444 	.word	0x4b584444
10011890:	0825122d 	.word	0x0825122d
10011894:	3e395858 	.word	0x3e395858
10011898:	203b      	movs	r0, #59	; 0x3b
1001189a:	e04e      	b.n	1001193a <gapc_cmp_evt+0xc6>
1001189c:	203b      	movs	r0, #59	; 0x3b
1001189e:	2e00      	cmp	r6, #0
100118a0:	d04b      	beq.n	1001193a <gapc_cmp_evt+0xc6>
100118a2:	0a2d      	lsrs	r5, r5, #8
100118a4:	8015      	strh	r5, [r2, #0]
100118a6:	7096      	strb	r6, [r2, #2]
100118a8:	3835      	subs	r0, #53	; 0x35
100118aa:	e046      	b.n	1001193a <gapc_cmp_evt+0xc6>
100118ac:	466b      	mov	r3, sp
100118ae:	1ddf      	adds	r7, r3, #7
100118b0:	2301      	movs	r3, #1
100118b2:	0a2d      	lsrs	r5, r5, #8
100118b4:	703b      	strb	r3, [r7, #0]
100118b6:	1c28      	adds	r0, r5, #0
100118b8:	1c39      	adds	r1, r7, #0
100118ba:	4b20      	ldr	r3, [pc, #128]	; (1001193c <gapc_cmp_evt+0xc8>)
100118bc:	4798      	blx	r3
100118be:	2807      	cmp	r0, #7
100118c0:	d803      	bhi.n	100118ca <gapc_cmp_evt+0x56>
100118c2:	783b      	ldrb	r3, [r7, #0]
100118c4:	203b      	movs	r0, #59	; 0x3b
100118c6:	2b00      	cmp	r3, #0
100118c8:	d037      	beq.n	1001193a <gapc_cmp_evt+0xc6>
100118ca:	8065      	strh	r5, [r4, #2]
100118cc:	7126      	strb	r6, [r4, #4]
100118ce:	2009      	movs	r0, #9
100118d0:	e033      	b.n	1001193a <gapc_cmp_evt+0xc6>
100118d2:	203b      	movs	r0, #59	; 0x3b
100118d4:	2e00      	cmp	r6, #0
100118d6:	d030      	beq.n	1001193a <gapc_cmp_evt+0xc6>
100118d8:	0a2d      	lsrs	r5, r5, #8
100118da:	8015      	strh	r5, [r2, #0]
100118dc:	7096      	strb	r6, [r2, #2]
100118de:	382d      	subs	r0, #45	; 0x2d
100118e0:	e02b      	b.n	1001193a <gapc_cmp_evt+0xc6>
100118e2:	203b      	movs	r0, #59	; 0x3b
100118e4:	2e00      	cmp	r6, #0
100118e6:	d028      	beq.n	1001193a <gapc_cmp_evt+0xc6>
100118e8:	2300      	movs	r3, #0
100118ea:	0a2d      	lsrs	r5, r5, #8
100118ec:	8015      	strh	r5, [r2, #0]
100118ee:	7096      	strb	r6, [r2, #2]
100118f0:	8093      	strh	r3, [r2, #4]
100118f2:	80d3      	strh	r3, [r2, #6]
100118f4:	8113      	strh	r3, [r2, #8]
100118f6:	3834      	subs	r0, #52	; 0x34
100118f8:	e01f      	b.n	1001193a <gapc_cmp_evt+0xc6>
100118fa:	203b      	movs	r0, #59	; 0x3b
100118fc:	2e00      	cmp	r6, #0
100118fe:	d01c      	beq.n	1001193a <gapc_cmp_evt+0xc6>
10011900:	7216      	strb	r6, [r2, #8]
10011902:	e003      	b.n	1001190c <gapc_cmp_evt+0x98>
10011904:	203b      	movs	r0, #59	; 0x3b
10011906:	2e00      	cmp	r6, #0
10011908:	d017      	beq.n	1001193a <gapc_cmp_evt+0xc6>
1001190a:	7116      	strb	r6, [r2, #4]
1001190c:	3812      	subs	r0, #18
1001190e:	e014      	b.n	1001193a <gapc_cmp_evt+0xc6>
10011910:	203b      	movs	r0, #59	; 0x3b
10011912:	2e00      	cmp	r6, #0
10011914:	d011      	beq.n	1001193a <gapc_cmp_evt+0xc6>
10011916:	7093      	strb	r3, [r2, #2]
10011918:	70d6      	strb	r6, [r2, #3]
1001191a:	382a      	subs	r0, #42	; 0x2a
1001191c:	e00d      	b.n	1001193a <gapc_cmp_evt+0xc6>
1001191e:	203b      	movs	r0, #59	; 0x3b
10011920:	2e00      	cmp	r6, #0
10011922:	d00a      	beq.n	1001193a <gapc_cmp_evt+0xc6>
10011924:	0a2d      	lsrs	r5, r5, #8
10011926:	7016      	strb	r6, [r2, #0]
10011928:	8055      	strh	r5, [r2, #2]
1001192a:	1d10      	adds	r0, r2, #4
1001192c:	2100      	movs	r1, #0
1001192e:	2205      	movs	r2, #5
10011930:	4b03      	ldr	r3, [pc, #12]	; (10011940 <gapc_cmp_evt+0xcc>)
10011932:	4798      	blx	r3
10011934:	2012      	movs	r0, #18
10011936:	e000      	b.n	1001193a <gapc_cmp_evt+0xc6>
10011938:	2000      	movs	r0, #0
1001193a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001193c:	10011811 	.word	0x10011811
10011940:	100150e9 	.word	0x100150e9

10011944 <gapc_connection_cfm_handler>:
10011944:	b5f0      	push	{r4, r5, r6, r7, lr}
10011946:	b085      	sub	sp, #20
10011948:	1c1d      	adds	r5, r3, #0
1001194a:	ab0a      	add	r3, sp, #40	; 0x28
1001194c:	781b      	ldrb	r3, [r3, #0]
1001194e:	9201      	str	r2, [sp, #4]
10011950:	9302      	str	r3, [sp, #8]
10011952:	ab0b      	add	r3, sp, #44	; 0x2c
10011954:	781b      	ldrb	r3, [r3, #0]
10011956:	1c07      	adds	r7, r0, #0
10011958:	9303      	str	r3, [sp, #12]
1001195a:	ab0c      	add	r3, sp, #48	; 0x30
1001195c:	881a      	ldrh	r2, [r3, #0]
1001195e:	2302      	movs	r3, #2
10011960:	1c0e      	adds	r6, r1, #0
10011962:	4c23      	ldr	r4, [pc, #140]	; (100119f0 <gapc_connection_cfm_handler+0xac>)
10011964:	1c39      	adds	r1, r7, #0
10011966:	7023      	strb	r3, [r4, #0]
10011968:	330c      	adds	r3, #12
1001196a:	7063      	strb	r3, [r4, #1]
1001196c:	70a3      	strb	r3, [r4, #2]
1001196e:	4b21      	ldr	r3, [pc, #132]	; (100119f4 <gapc_connection_cfm_handler+0xb0>)
10011970:	70e2      	strb	r2, [r4, #3]
10011972:	881a      	ldrh	r2, [r3, #0]
10011974:	881b      	ldrh	r3, [r3, #0]
10011976:	7122      	strb	r2, [r4, #4]
10011978:	0a1b      	lsrs	r3, r3, #8
1001197a:	4f1f      	ldr	r7, [pc, #124]	; (100119f8 <gapc_connection_cfm_handler+0xb4>)
1001197c:	2210      	movs	r2, #16
1001197e:	481f      	ldr	r0, [pc, #124]	; (100119fc <gapc_connection_cfm_handler+0xb8>)
10011980:	7163      	strb	r3, [r4, #5]
10011982:	47b8      	blx	r7
10011984:	0a33      	lsrs	r3, r6, #8
10011986:	7626      	strb	r6, [r4, #24]
10011988:	7663      	strb	r3, [r4, #25]
1001198a:	9901      	ldr	r1, [sp, #4]
1001198c:	0c33      	lsrs	r3, r6, #16
1001198e:	2210      	movs	r2, #16
10011990:	0e36      	lsrs	r6, r6, #24
10011992:	481b      	ldr	r0, [pc, #108]	; (10011a00 <gapc_connection_cfm_handler+0xbc>)
10011994:	76a3      	strb	r3, [r4, #26]
10011996:	76e6      	strb	r6, [r4, #27]
10011998:	47b8      	blx	r7
1001199a:	1c23      	adds	r3, r4, #0
1001199c:	332c      	adds	r3, #44	; 0x2c
1001199e:	701d      	strb	r5, [r3, #0]
100119a0:	1c23      	adds	r3, r4, #0
100119a2:	0a2a      	lsrs	r2, r5, #8
100119a4:	332d      	adds	r3, #45	; 0x2d
100119a6:	701a      	strb	r2, [r3, #0]
100119a8:	1c23      	adds	r3, r4, #0
100119aa:	0c2a      	lsrs	r2, r5, #16
100119ac:	332e      	adds	r3, #46	; 0x2e
100119ae:	701a      	strb	r2, [r3, #0]
100119b0:	1c23      	adds	r3, r4, #0
100119b2:	0e2d      	lsrs	r5, r5, #24
100119b4:	332f      	adds	r3, #47	; 0x2f
100119b6:	466a      	mov	r2, sp
100119b8:	701d      	strb	r5, [r3, #0]
100119ba:	1c23      	adds	r3, r4, #0
100119bc:	7a12      	ldrb	r2, [r2, #8]
100119be:	3330      	adds	r3, #48	; 0x30
100119c0:	701a      	strb	r2, [r3, #0]
100119c2:	1c23      	adds	r3, r4, #0
100119c4:	2500      	movs	r5, #0
100119c6:	3331      	adds	r3, #49	; 0x31
100119c8:	466a      	mov	r2, sp
100119ca:	701d      	strb	r5, [r3, #0]
100119cc:	1c23      	adds	r3, r4, #0
100119ce:	7b12      	ldrb	r2, [r2, #12]
100119d0:	3332      	adds	r3, #50	; 0x32
100119d2:	701a      	strb	r2, [r3, #0]
100119d4:	1c23      	adds	r3, r4, #0
100119d6:	3333      	adds	r3, #51	; 0x33
100119d8:	701d      	strb	r5, [r3, #0]
100119da:	232c      	movs	r3, #44	; 0x2c
100119dc:	1c20      	adds	r0, r4, #0
100119de:	71a3      	strb	r3, [r4, #6]
100119e0:	2134      	movs	r1, #52	; 0x34
100119e2:	4b08      	ldr	r3, [pc, #32]	; (10011a04 <gapc_connection_cfm_handler+0xc0>)
100119e4:	71e5      	strb	r5, [r4, #7]
100119e6:	4798      	blx	r3
100119e8:	1c28      	adds	r0, r5, #0
100119ea:	b005      	add	sp, #20
100119ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100119ee:	46c0      	nop			; (mov r8, r8)
100119f0:	1001b184 	.word	0x1001b184
100119f4:	1001ae14 	.word	0x1001ae14
100119f8:	100150d7 	.word	0x100150d7
100119fc:	1001b18c 	.word	0x1001b18c
10011a00:	1001b1a0 	.word	0x1001b1a0
10011a04:	10011641 	.word	0x10011641

10011a08 <gapc_con_req_ind>:
10011a08:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a0a:	7845      	ldrb	r5, [r0, #1]
10011a0c:	7803      	ldrb	r3, [r0, #0]
10011a0e:	4c30      	ldr	r4, [pc, #192]	; (10011ad0 <gapc_con_req_ind+0xc8>)
10011a10:	022d      	lsls	r5, r5, #8
10011a12:	431d      	orrs	r5, r3
10011a14:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011a16:	78c3      	ldrb	r3, [r0, #3]
10011a18:	7882      	ldrb	r2, [r0, #2]
10011a1a:	b08b      	sub	sp, #44	; 0x2c
10011a1c:	021b      	lsls	r3, r3, #8
10011a1e:	431a      	orrs	r2, r3
10011a20:	466b      	mov	r3, sp
10011a22:	9205      	str	r2, [sp, #20]
10011a24:	8a9b      	ldrh	r3, [r3, #20]
10011a26:	2120      	movs	r1, #32
10011a28:	85e3      	strh	r3, [r4, #46]	; 0x2e
10011a2a:	7943      	ldrb	r3, [r0, #5]
10011a2c:	7902      	ldrb	r2, [r0, #4]
10011a2e:	021b      	lsls	r3, r3, #8
10011a30:	431a      	orrs	r2, r3
10011a32:	466b      	mov	r3, sp
10011a34:	9206      	str	r2, [sp, #24]
10011a36:	8b1b      	ldrh	r3, [r3, #24]
10011a38:	1c06      	adds	r6, r0, #0
10011a3a:	8623      	strh	r3, [r4, #48]	; 0x30
10011a3c:	79c3      	ldrb	r3, [r0, #7]
10011a3e:	7982      	ldrb	r2, [r0, #6]
10011a40:	021b      	lsls	r3, r3, #8
10011a42:	431a      	orrs	r2, r3
10011a44:	466b      	mov	r3, sp
10011a46:	9207      	str	r2, [sp, #28]
10011a48:	466a      	mov	r2, sp
10011a4a:	8b9b      	ldrh	r3, [r3, #28]
10011a4c:	1852      	adds	r2, r2, r1
10011a4e:	8663      	strh	r3, [r4, #50]	; 0x32
10011a50:	7a43      	ldrb	r3, [r0, #9]
10011a52:	1c01      	adds	r1, r0, #0
10011a54:	9308      	str	r3, [sp, #32]
10011a56:	1c23      	adds	r3, r4, #0
10011a58:	7812      	ldrb	r2, [r2, #0]
10011a5a:	3377      	adds	r3, #119	; 0x77
10011a5c:	3478      	adds	r4, #120	; 0x78
10011a5e:	701a      	strb	r2, [r3, #0]
10011a60:	310a      	adds	r1, #10
10011a62:	2206      	movs	r2, #6
10011a64:	4b1b      	ldr	r3, [pc, #108]	; (10011ad4 <gapc_con_req_ind+0xcc>)
10011a66:	1c20      	adds	r0, r4, #0
10011a68:	4798      	blx	r3
10011a6a:	7c33      	ldrb	r3, [r6, #16]
10011a6c:	9309      	str	r3, [sp, #36]	; 0x24
10011a6e:	4b1a      	ldr	r3, [pc, #104]	; (10011ad8 <gapc_con_req_ind+0xd0>)
10011a70:	4798      	blx	r3
10011a72:	4e1a      	ldr	r6, [pc, #104]	; (10011adc <gapc_con_req_ind+0xd4>)
10011a74:	1e07      	subs	r7, r0, #0
10011a76:	2f07      	cmp	r7, #7
10011a78:	d81b      	bhi.n	10011ab2 <gapc_con_req_ind+0xaa>
10011a7a:	2312      	movs	r3, #18
10011a7c:	4343      	muls	r3, r0
10011a7e:	18f0      	adds	r0, r6, r3
10011a80:	8145      	strh	r5, [r0, #10]
10011a82:	4669      	mov	r1, sp
10011a84:	2524      	movs	r5, #36	; 0x24
10011a86:	1949      	adds	r1, r1, r5
10011a88:	7809      	ldrb	r1, [r1, #0]
10011a8a:	2206      	movs	r2, #6
10011a8c:	54f1      	strb	r1, [r6, r3]
10011a8e:	2120      	movs	r1, #32
10011a90:	466b      	mov	r3, sp
10011a92:	185b      	adds	r3, r3, r1
10011a94:	781b      	ldrb	r3, [r3, #0]
10011a96:	1c21      	adds	r1, r4, #0
10011a98:	7043      	strb	r3, [r0, #1]
10011a9a:	466b      	mov	r3, sp
10011a9c:	8a9b      	ldrh	r3, [r3, #20]
10011a9e:	3002      	adds	r0, #2
10011aa0:	8143      	strh	r3, [r0, #10]
10011aa2:	466b      	mov	r3, sp
10011aa4:	8b1b      	ldrh	r3, [r3, #24]
10011aa6:	8183      	strh	r3, [r0, #12]
10011aa8:	466b      	mov	r3, sp
10011aaa:	8b9b      	ldrh	r3, [r3, #28]
10011aac:	81c3      	strh	r3, [r0, #14]
10011aae:	4b09      	ldr	r3, [pc, #36]	; (10011ad4 <gapc_con_req_ind+0xcc>)
10011ab0:	4798      	blx	r3
10011ab2:	2112      	movs	r1, #18
10011ab4:	2300      	movs	r3, #0
10011ab6:	434f      	muls	r7, r1
10011ab8:	9300      	str	r3, [sp, #0]
10011aba:	9301      	str	r3, [sp, #4]
10011abc:	19f6      	adds	r6, r6, r7
10011abe:	8971      	ldrh	r1, [r6, #10]
10011ac0:	4a07      	ldr	r2, [pc, #28]	; (10011ae0 <gapc_con_req_ind+0xd8>)
10011ac2:	9102      	str	r1, [sp, #8]
10011ac4:	1c10      	adds	r0, r2, #0
10011ac6:	1c19      	adds	r1, r3, #0
10011ac8:	4c06      	ldr	r4, [pc, #24]	; (10011ae4 <gapc_con_req_ind+0xdc>)
10011aca:	47a0      	blx	r4
10011acc:	b00b      	add	sp, #44	; 0x2c
10011ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ad0:	1001aea6 	.word	0x1001aea6
10011ad4:	100150d7 	.word	0x100150d7
10011ad8:	1001184d 	.word	0x1001184d
10011adc:	1001ae16 	.word	0x1001ae16
10011ae0:	10019f34 	.word	0x10019f34
10011ae4:	10011945 	.word	0x10011945

10011ae8 <gapc_disconnect_cmd_handler>:
10011ae8:	2204      	movs	r2, #4
10011aea:	b510      	push	{r4, lr}
10011aec:	4b0c      	ldr	r3, [pc, #48]	; (10011b20 <gapc_disconnect_cmd_handler+0x38>)
10011aee:	2400      	movs	r4, #0
10011af0:	701a      	strb	r2, [r3, #0]
10011af2:	320a      	adds	r2, #10
10011af4:	705a      	strb	r2, [r3, #1]
10011af6:	709a      	strb	r2, [r3, #2]
10011af8:	4a0a      	ldr	r2, [pc, #40]	; (10011b24 <gapc_disconnect_cmd_handler+0x3c>)
10011afa:	70d9      	strb	r1, [r3, #3]
10011afc:	8811      	ldrh	r1, [r2, #0]
10011afe:	8812      	ldrh	r2, [r2, #0]
10011b00:	7119      	strb	r1, [r3, #4]
10011b02:	0a12      	lsrs	r2, r2, #8
10011b04:	715a      	strb	r2, [r3, #5]
10011b06:	2201      	movs	r2, #1
10011b08:	721a      	strb	r2, [r3, #8]
10011b0a:	1892      	adds	r2, r2, r2
10011b0c:	7258      	strb	r0, [r3, #9]
10011b0e:	719a      	strb	r2, [r3, #6]
10011b10:	71dc      	strb	r4, [r3, #7]
10011b12:	1c18      	adds	r0, r3, #0
10011b14:	210a      	movs	r1, #10
10011b16:	4b04      	ldr	r3, [pc, #16]	; (10011b28 <gapc_disconnect_cmd_handler+0x40>)
10011b18:	4798      	blx	r3
10011b1a:	1c20      	adds	r0, r4, #0
10011b1c:	bd10      	pop	{r4, pc}
10011b1e:	46c0      	nop			; (mov r8, r8)
10011b20:	1001b184 	.word	0x1001b184
10011b24:	1001ae14 	.word	0x1001ae14
10011b28:	10011641 	.word	0x10011641

10011b2c <gapc_disconnect_ind>:
10011b2c:	1c02      	adds	r2, r0, #0
10011b2e:	b508      	push	{r3, lr}
10011b30:	7843      	ldrb	r3, [r0, #1]
10011b32:	7800      	ldrb	r0, [r0, #0]
10011b34:	021b      	lsls	r3, r3, #8
10011b36:	4318      	orrs	r0, r3
10011b38:	8008      	strh	r0, [r1, #0]
10011b3a:	7893      	ldrb	r3, [r2, #2]
10011b3c:	708b      	strb	r3, [r1, #2]
10011b3e:	2100      	movs	r1, #0
10011b40:	4b05      	ldr	r3, [pc, #20]	; (10011b58 <gapc_disconnect_ind+0x2c>)
10011b42:	4798      	blx	r3
10011b44:	2807      	cmp	r0, #7
10011b46:	d806      	bhi.n	10011b56 <gapc_disconnect_ind+0x2a>
10011b48:	2312      	movs	r3, #18
10011b4a:	4358      	muls	r0, r3
10011b4c:	4b03      	ldr	r3, [pc, #12]	; (10011b5c <gapc_disconnect_ind+0x30>)
10011b4e:	1818      	adds	r0, r3, r0
10011b50:	2301      	movs	r3, #1
10011b52:	425b      	negs	r3, r3
10011b54:	8143      	strh	r3, [r0, #10]
10011b56:	bd08      	pop	{r3, pc}
10011b58:	10011811 	.word	0x10011811
10011b5c:	1001ae16 	.word	0x1001ae16

10011b60 <gapc_bond_cmd_handler>:
10011b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011b62:	9300      	str	r3, [sp, #0]
10011b64:	2312      	movs	r3, #18
10011b66:	1c04      	adds	r4, r0, #0
10011b68:	a808      	add	r0, sp, #32
10011b6a:	7807      	ldrb	r7, [r0, #0]
10011b6c:	a809      	add	r0, sp, #36	; 0x24
10011b6e:	7806      	ldrb	r6, [r0, #0]
10011b70:	a80a      	add	r0, sp, #40	; 0x28
10011b72:	7805      	ldrb	r5, [r0, #0]
10011b74:	a80b      	add	r0, sp, #44	; 0x2c
10011b76:	7800      	ldrb	r0, [r0, #0]
10011b78:	9001      	str	r0, [sp, #4]
10011b7a:	4810      	ldr	r0, [pc, #64]	; (10011bbc <gapc_bond_cmd_handler+0x5c>)
10011b7c:	7003      	strb	r3, [r0, #0]
10011b7e:	230e      	movs	r3, #14
10011b80:	70c4      	strb	r4, [r0, #3]
10011b82:	4c0f      	ldr	r4, [pc, #60]	; (10011bc0 <gapc_bond_cmd_handler+0x60>)
10011b84:	7043      	strb	r3, [r0, #1]
10011b86:	7083      	strb	r3, [r0, #2]
10011b88:	8823      	ldrh	r3, [r4, #0]
10011b8a:	8824      	ldrh	r4, [r4, #0]
10011b8c:	7103      	strb	r3, [r0, #4]
10011b8e:	466b      	mov	r3, sp
10011b90:	781b      	ldrb	r3, [r3, #0]
10011b92:	0a24      	lsrs	r4, r4, #8
10011b94:	72c3      	strb	r3, [r0, #11]
10011b96:	466b      	mov	r3, sp
10011b98:	791b      	ldrb	r3, [r3, #4]
10011b9a:	7144      	strb	r4, [r0, #5]
10011b9c:	73c3      	strb	r3, [r0, #15]
10011b9e:	2308      	movs	r3, #8
10011ba0:	7183      	strb	r3, [r0, #6]
10011ba2:	2300      	movs	r3, #0
10011ba4:	240a      	movs	r4, #10
10011ba6:	7241      	strb	r1, [r0, #9]
10011ba8:	71c3      	strb	r3, [r0, #7]
10011baa:	2110      	movs	r1, #16
10011bac:	4b05      	ldr	r3, [pc, #20]	; (10011bc4 <gapc_bond_cmd_handler+0x64>)
10011bae:	7307      	strb	r7, [r0, #12]
10011bb0:	7346      	strb	r6, [r0, #13]
10011bb2:	7385      	strb	r5, [r0, #14]
10011bb4:	7204      	strb	r4, [r0, #8]
10011bb6:	7282      	strb	r2, [r0, #10]
10011bb8:	4798      	blx	r3
10011bba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011bbc:	1001b184 	.word	0x1001b184
10011bc0:	1001ae14 	.word	0x1001ae14
10011bc4:	10011641 	.word	0x10011641

10011bc8 <gapc_bond_ind>:
10011bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011bca:	780e      	ldrb	r6, [r1, #0]
10011bcc:	1c03      	adds	r3, r0, #0
10011bce:	1eb0      	subs	r0, r6, #2
10011bd0:	2805      	cmp	r0, #5
10011bd2:	d85d      	bhi.n	10011c90 <gapc_bond_ind+0xc8>
10011bd4:	1c15      	adds	r5, r2, #0
10011bd6:	1c0c      	adds	r4, r1, #0
10011bd8:	f001 f9fa 	bl	10012fd0 <__gnu_thumb1_case_uqi>
10011bdc:	2f5a030d 	.word	0x2f5a030d
10011be0:	4740      	.short	0x4740
10011be2:	2009      	movs	r0, #9
10011be4:	2a00      	cmp	r2, #0
10011be6:	d054      	beq.n	10011c92 <gapc_bond_ind+0xca>
10011be8:	0a1b      	lsrs	r3, r3, #8
10011bea:	8053      	strh	r3, [r2, #2]
10011bec:	788b      	ldrb	r3, [r1, #2]
10011bee:	4829      	ldr	r0, [pc, #164]	; (10011c94 <gapc_bond_ind+0xcc>)
10011bf0:	7113      	strb	r3, [r2, #4]
10011bf2:	2100      	movs	r1, #0
10011bf4:	e01c      	b.n	10011c30 <gapc_bond_ind+0x68>
10011bf6:	2009      	movs	r0, #9
10011bf8:	2a00      	cmp	r2, #0
10011bfa:	d04a      	beq.n	10011c92 <gapc_bond_ind+0xca>
10011bfc:	4c25      	ldr	r4, [pc, #148]	; (10011c94 <gapc_bond_ind+0xcc>)
10011bfe:	0a1b      	lsrs	r3, r3, #8
10011c00:	8053      	strh	r3, [r2, #2]
10011c02:	788b      	ldrb	r3, [r1, #2]
10011c04:	2700      	movs	r7, #0
10011c06:	1c10      	adds	r0, r2, #0
10011c08:	1c21      	adds	r1, r4, #0
10011c0a:	7013      	strb	r3, [r2, #0]
10011c0c:	4e22      	ldr	r6, [pc, #136]	; (10011c98 <gapc_bond_ind+0xd0>)
10011c0e:	7117      	strb	r7, [r2, #4]
10011c10:	312e      	adds	r1, #46	; 0x2e
10011c12:	2217      	movs	r2, #23
10011c14:	3032      	adds	r0, #50	; 0x32
10011c16:	47b0      	blx	r6
10011c18:	1c28      	adds	r0, r5, #0
10011c1a:	1c21      	adds	r1, r4, #0
10011c1c:	2210      	movs	r2, #16
10011c1e:	311e      	adds	r1, #30
10011c20:	3022      	adds	r0, #34	; 0x22
10011c22:	47b0      	blx	r6
10011c24:	1ca1      	adds	r1, r4, #2
10011c26:	1da8      	adds	r0, r5, #6
10011c28:	221c      	movs	r2, #28
10011c2a:	47b0      	blx	r6
10011c2c:	1c20      	adds	r0, r4, #0
10011c2e:	1c39      	adds	r1, r7, #0
10011c30:	2246      	movs	r2, #70	; 0x46
10011c32:	4b1a      	ldr	r3, [pc, #104]	; (10011c9c <gapc_bond_ind+0xd4>)
10011c34:	4798      	blx	r3
10011c36:	2009      	movs	r0, #9
10011c38:	e02b      	b.n	10011c92 <gapc_bond_ind+0xca>
10011c3a:	4d16      	ldr	r5, [pc, #88]	; (10011c94 <gapc_bond_ind+0xcc>)
10011c3c:	3102      	adds	r1, #2
10011c3e:	1c28      	adds	r0, r5, #0
10011c40:	2210      	movs	r2, #16
10011c42:	4e15      	ldr	r6, [pc, #84]	; (10011c98 <gapc_bond_ind+0xd0>)
10011c44:	302e      	adds	r0, #46	; 0x2e
10011c46:	47b0      	blx	r6
10011c48:	1c28      	adds	r0, r5, #0
10011c4a:	1c21      	adds	r1, r4, #0
10011c4c:	303f      	adds	r0, #63	; 0x3f
10011c4e:	3112      	adds	r1, #18
10011c50:	2206      	movs	r2, #6
10011c52:	47b0      	blx	r6
10011c54:	7e23      	ldrb	r3, [r4, #24]
10011c56:	353e      	adds	r5, #62	; 0x3e
10011c58:	702b      	strb	r3, [r5, #0]
10011c5a:	e019      	b.n	10011c90 <gapc_bond_ind+0xc8>
10011c5c:	480d      	ldr	r0, [pc, #52]	; (10011c94 <gapc_bond_ind+0xcc>)
10011c5e:	3102      	adds	r1, #2
10011c60:	2210      	movs	r2, #16
10011c62:	4b0d      	ldr	r3, [pc, #52]	; (10011c98 <gapc_bond_ind+0xd0>)
10011c64:	301e      	adds	r0, #30
10011c66:	4798      	blx	r3
10011c68:	e012      	b.n	10011c90 <gapc_bond_ind+0xc8>
10011c6a:	4d0a      	ldr	r5, [pc, #40]	; (10011c94 <gapc_bond_ind+0xcc>)
10011c6c:	3102      	adds	r1, #2
10011c6e:	2210      	movs	r2, #16
10011c70:	4e09      	ldr	r6, [pc, #36]	; (10011c98 <gapc_bond_ind+0xd0>)
10011c72:	1ca8      	adds	r0, r5, #2
10011c74:	47b0      	blx	r6
10011c76:	1c28      	adds	r0, r5, #0
10011c78:	1c21      	adds	r1, r4, #0
10011c7a:	7ce3      	ldrb	r3, [r4, #19]
10011c7c:	7ca2      	ldrb	r2, [r4, #18]
10011c7e:	021b      	lsls	r3, r3, #8
10011c80:	4313      	orrs	r3, r2
10011c82:	3014      	adds	r0, #20
10011c84:	3114      	adds	r1, #20
10011c86:	2208      	movs	r2, #8
10011c88:	826b      	strh	r3, [r5, #18]
10011c8a:	47b0      	blx	r6
10011c8c:	7f23      	ldrb	r3, [r4, #28]
10011c8e:	772b      	strb	r3, [r5, #28]
10011c90:	2000      	movs	r0, #0
10011c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011c94:	10019f64 	.word	0x10019f64
10011c98:	100150d7 	.word	0x100150d7
10011c9c:	100150e9 	.word	0x100150e9

10011ca0 <gapc_bond_req_ind>:
10011ca0:	b570      	push	{r4, r5, r6, lr}
10011ca2:	780c      	ldrb	r4, [r1, #0]
10011ca4:	1c03      	adds	r3, r0, #0
10011ca6:	7849      	ldrb	r1, [r1, #1]
10011ca8:	2c07      	cmp	r4, #7
10011caa:	d85c      	bhi.n	10011d66 <gapc_bond_req_ind+0xc6>
10011cac:	1c20      	adds	r0, r4, #0
10011cae:	f001 f98f 	bl	10012fd0 <__gnu_thumb1_case_uqi>
10011cb2:	5a04      	.short	0x5a04
10011cb4:	5a0b5a5a 	.word	0x5a0b5a5a
10011cb8:	1f1f      	.short	0x1f1f
10011cba:	200a      	movs	r0, #10
10011cbc:	2a00      	cmp	r2, #0
10011cbe:	d053      	beq.n	10011d68 <gapc_bond_req_ind+0xc8>
10011cc0:	0a1b      	lsrs	r3, r3, #8
10011cc2:	8013      	strh	r3, [r2, #0]
10011cc4:	7091      	strb	r1, [r2, #2]
10011cc6:	e04f      	b.n	10011d68 <gapc_bond_req_ind+0xc8>
10011cc8:	2a00      	cmp	r2, #0
10011cca:	d00b      	beq.n	10011ce4 <gapc_bond_req_ind+0x44>
10011ccc:	0a1b      	lsrs	r3, r3, #8
10011cce:	8013      	strh	r3, [r2, #0]
10011cd0:	2900      	cmp	r1, #0
10011cd2:	d102      	bne.n	10011cda <gapc_bond_req_ind+0x3a>
10011cd4:	2301      	movs	r3, #1
10011cd6:	7093      	strb	r3, [r2, #2]
10011cd8:	e004      	b.n	10011ce4 <gapc_bond_req_ind+0x44>
10011cda:	2300      	movs	r3, #0
10011cdc:	7093      	strb	r3, [r2, #2]
10011cde:	2902      	cmp	r1, #2
10011ce0:	d102      	bne.n	10011ce8 <gapc_bond_req_ind+0x48>
10011ce2:	70d3      	strb	r3, [r2, #3]
10011ce4:	200c      	movs	r0, #12
10011ce6:	e03f      	b.n	10011d68 <gapc_bond_req_ind+0xc8>
10011ce8:	2901      	cmp	r1, #1
10011cea:	d1fb      	bne.n	10011ce4 <gapc_bond_req_ind+0x44>
10011cec:	70d1      	strb	r1, [r2, #3]
10011cee:	e7f9      	b.n	10011ce4 <gapc_bond_req_ind+0x44>
10011cf0:	2214      	movs	r2, #20
10011cf2:	481e      	ldr	r0, [pc, #120]	; (10011d6c <gapc_bond_req_ind+0xcc>)
10011cf4:	0a1b      	lsrs	r3, r3, #8
10011cf6:	70c3      	strb	r3, [r0, #3]
10011cf8:	4b1d      	ldr	r3, [pc, #116]	; (10011d70 <gapc_bond_req_ind+0xd0>)
10011cfa:	7002      	strb	r2, [r0, #0]
10011cfc:	3a06      	subs	r2, #6
10011cfe:	7042      	strb	r2, [r0, #1]
10011d00:	7082      	strb	r2, [r0, #2]
10011d02:	881a      	ldrh	r2, [r3, #0]
10011d04:	881b      	ldrh	r3, [r3, #0]
10011d06:	4e1b      	ldr	r6, [pc, #108]	; (10011d74 <gapc_bond_req_ind+0xd4>)
10011d08:	0a1b      	lsrs	r3, r3, #8
10011d0a:	7143      	strb	r3, [r0, #5]
10011d0c:	2301      	movs	r3, #1
10011d0e:	7102      	strb	r2, [r0, #4]
10011d10:	7204      	strb	r4, [r0, #8]
10011d12:	7243      	strb	r3, [r0, #9]
10011d14:	1c05      	adds	r5, r0, #0
10011d16:	1c31      	adds	r1, r6, #0
10011d18:	300a      	adds	r0, #10
10011d1a:	2c07      	cmp	r4, #7
10011d1c:	d116      	bne.n	10011d4c <gapc_bond_req_ind+0xac>
10011d1e:	317e      	adds	r1, #126	; 0x7e
10011d20:	2210      	movs	r2, #16
10011d22:	4c15      	ldr	r4, [pc, #84]	; (10011d78 <gapc_bond_req_ind+0xd8>)
10011d24:	47a0      	blx	r4
10011d26:	1c33      	adds	r3, r6, #0
10011d28:	1c31      	adds	r1, r6, #0
10011d2a:	1c28      	adds	r0, r5, #0
10011d2c:	338e      	adds	r3, #142	; 0x8e
10011d2e:	881b      	ldrh	r3, [r3, #0]
10011d30:	3190      	adds	r1, #144	; 0x90
10011d32:	76ab      	strb	r3, [r5, #26]
10011d34:	2208      	movs	r2, #8
10011d36:	0a1b      	lsrs	r3, r3, #8
10011d38:	301c      	adds	r0, #28
10011d3a:	76eb      	strb	r3, [r5, #27]
10011d3c:	47a0      	blx	r4
10011d3e:	1c31      	adds	r1, r6, #0
10011d40:	3198      	adds	r1, #152	; 0x98
10011d42:	780a      	ldrb	r2, [r1, #0]
10011d44:	1d6b      	adds	r3, r5, #5
10011d46:	77da      	strb	r2, [r3, #31]
10011d48:	2125      	movs	r1, #37	; 0x25
10011d4a:	e004      	b.n	10011d56 <gapc_bond_req_ind+0xb6>
10011d4c:	319a      	adds	r1, #154	; 0x9a
10011d4e:	2210      	movs	r2, #16
10011d50:	4b09      	ldr	r3, [pc, #36]	; (10011d78 <gapc_bond_req_ind+0xd8>)
10011d52:	4798      	blx	r3
10011d54:	211a      	movs	r1, #26
10011d56:	1c0b      	adds	r3, r1, #0
10011d58:	2400      	movs	r4, #0
10011d5a:	3b08      	subs	r3, #8
10011d5c:	71ab      	strb	r3, [r5, #6]
10011d5e:	1c28      	adds	r0, r5, #0
10011d60:	4b06      	ldr	r3, [pc, #24]	; (10011d7c <gapc_bond_req_ind+0xdc>)
10011d62:	71ec      	strb	r4, [r5, #7]
10011d64:	4798      	blx	r3
10011d66:	2000      	movs	r0, #0
10011d68:	bd70      	pop	{r4, r5, r6, pc}
10011d6a:	46c0      	nop			; (mov r8, r8)
10011d6c:	1001b184 	.word	0x1001b184
10011d70:	1001ae14 	.word	0x1001ae14
10011d74:	1001aea6 	.word	0x1001aea6
10011d78:	100150d7 	.word	0x100150d7
10011d7c:	10011641 	.word	0x10011641

10011d80 <gapc_bond_cfm_handler_pair_resp>:
10011d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d82:	b085      	sub	sp, #20
10011d84:	1c07      	adds	r7, r0, #0
10011d86:	a80a      	add	r0, sp, #40	; 0x28
10011d88:	7806      	ldrb	r6, [r0, #0]
10011d8a:	a80b      	add	r0, sp, #44	; 0x2c
10011d8c:	7805      	ldrb	r5, [r0, #0]
10011d8e:	a80c      	add	r0, sp, #48	; 0x30
10011d90:	7800      	ldrb	r0, [r0, #0]
10011d92:	2414      	movs	r4, #20
10011d94:	9002      	str	r0, [sp, #8]
10011d96:	a80d      	add	r0, sp, #52	; 0x34
10011d98:	7800      	ldrb	r0, [r0, #0]
10011d9a:	9301      	str	r3, [sp, #4]
10011d9c:	9003      	str	r0, [sp, #12]
10011d9e:	a80e      	add	r0, sp, #56	; 0x38
10011da0:	8800      	ldrh	r0, [r0, #0]
10011da2:	4684      	mov	ip, r0
10011da4:	4812      	ldr	r0, [pc, #72]	; (10011df0 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011da6:	7004      	strb	r4, [r0, #0]
10011da8:	3c06      	subs	r4, #6
10011daa:	7044      	strb	r4, [r0, #1]
10011dac:	7084      	strb	r4, [r0, #2]
10011dae:	4664      	mov	r4, ip
10011db0:	70c4      	strb	r4, [r0, #3]
10011db2:	4c10      	ldr	r4, [pc, #64]	; (10011df4 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011db4:	7247      	strb	r7, [r0, #9]
10011db6:	8823      	ldrh	r3, [r4, #0]
10011db8:	8824      	ldrh	r4, [r4, #0]
10011dba:	7103      	strb	r3, [r0, #4]
10011dbc:	466b      	mov	r3, sp
10011dbe:	791b      	ldrb	r3, [r3, #4]
10011dc0:	0a24      	lsrs	r4, r4, #8
10011dc2:	7303      	strb	r3, [r0, #12]
10011dc4:	466b      	mov	r3, sp
10011dc6:	7a1b      	ldrb	r3, [r3, #8]
10011dc8:	7144      	strb	r4, [r0, #5]
10011dca:	73c3      	strb	r3, [r0, #15]
10011dcc:	466b      	mov	r3, sp
10011dce:	7b1b      	ldrb	r3, [r3, #12]
10011dd0:	2401      	movs	r4, #1
10011dd2:	7403      	strb	r3, [r0, #16]
10011dd4:	2309      	movs	r3, #9
10011dd6:	7183      	strb	r3, [r0, #6]
10011dd8:	2300      	movs	r3, #0
10011dda:	7204      	strb	r4, [r0, #8]
10011ddc:	7281      	strb	r1, [r0, #10]
10011dde:	72c2      	strb	r2, [r0, #11]
10011de0:	7346      	strb	r6, [r0, #13]
10011de2:	7385      	strb	r5, [r0, #14]
10011de4:	71c3      	strb	r3, [r0, #7]
10011de6:	2111      	movs	r1, #17
10011de8:	4b03      	ldr	r3, [pc, #12]	; (10011df8 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011dea:	4798      	blx	r3
10011dec:	b005      	add	sp, #20
10011dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011df0:	1001b184 	.word	0x1001b184
10011df4:	1001ae14 	.word	0x1001ae14
10011df8:	10011641 	.word	0x10011641

10011dfc <gapc_bond_cfm_handler_key_exch>:
10011dfc:	b538      	push	{r3, r4, r5, lr}
10011dfe:	2514      	movs	r5, #20
10011e00:	4c0d      	ldr	r4, [pc, #52]	; (10011e38 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011e02:	70e3      	strb	r3, [r4, #3]
10011e04:	4b0d      	ldr	r3, [pc, #52]	; (10011e3c <gapc_bond_cfm_handler_key_exch+0x40>)
10011e06:	7025      	strb	r5, [r4, #0]
10011e08:	3d06      	subs	r5, #6
10011e0a:	7065      	strb	r5, [r4, #1]
10011e0c:	70a5      	strb	r5, [r4, #2]
10011e0e:	881d      	ldrh	r5, [r3, #0]
10011e10:	881b      	ldrh	r3, [r3, #0]
10011e12:	7220      	strb	r0, [r4, #8]
10011e14:	0a1b      	lsrs	r3, r3, #8
10011e16:	7163      	strb	r3, [r4, #5]
10011e18:	7261      	strb	r1, [r4, #9]
10011e1a:	4b09      	ldr	r3, [pc, #36]	; (10011e40 <gapc_bond_cfm_handler_key_exch+0x44>)
10011e1c:	1c11      	adds	r1, r2, #0
10011e1e:	4809      	ldr	r0, [pc, #36]	; (10011e44 <gapc_bond_cfm_handler_key_exch+0x48>)
10011e20:	2210      	movs	r2, #16
10011e22:	7125      	strb	r5, [r4, #4]
10011e24:	4798      	blx	r3
10011e26:	2312      	movs	r3, #18
10011e28:	71a3      	strb	r3, [r4, #6]
10011e2a:	2300      	movs	r3, #0
10011e2c:	1c20      	adds	r0, r4, #0
10011e2e:	71e3      	strb	r3, [r4, #7]
10011e30:	211a      	movs	r1, #26
10011e32:	4b05      	ldr	r3, [pc, #20]	; (10011e48 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011e34:	4798      	blx	r3
10011e36:	bd38      	pop	{r3, r4, r5, pc}
10011e38:	1001b184 	.word	0x1001b184
10011e3c:	1001ae14 	.word	0x1001ae14
10011e40:	100150d7 	.word	0x100150d7
10011e44:	1001b18e 	.word	0x1001b18e
10011e48:	10011641 	.word	0x10011641

10011e4c <gapc_security_cmd_handler>:
10011e4c:	221a      	movs	r2, #26
10011e4e:	b508      	push	{r3, lr}
10011e50:	4b0b      	ldr	r3, [pc, #44]	; (10011e80 <gapc_security_cmd_handler+0x34>)
10011e52:	701a      	strb	r2, [r3, #0]
10011e54:	3a0c      	subs	r2, #12
10011e56:	705a      	strb	r2, [r3, #1]
10011e58:	709a      	strb	r2, [r3, #2]
10011e5a:	4a0a      	ldr	r2, [pc, #40]	; (10011e84 <gapc_security_cmd_handler+0x38>)
10011e5c:	70d8      	strb	r0, [r3, #3]
10011e5e:	8810      	ldrh	r0, [r2, #0]
10011e60:	8812      	ldrh	r2, [r2, #0]
10011e62:	7118      	strb	r0, [r3, #4]
10011e64:	0a12      	lsrs	r2, r2, #8
10011e66:	715a      	strb	r2, [r3, #5]
10011e68:	220c      	movs	r2, #12
10011e6a:	721a      	strb	r2, [r3, #8]
10011e6c:	3a0a      	subs	r2, #10
10011e6e:	719a      	strb	r2, [r3, #6]
10011e70:	2200      	movs	r2, #0
10011e72:	7259      	strb	r1, [r3, #9]
10011e74:	71da      	strb	r2, [r3, #7]
10011e76:	1c18      	adds	r0, r3, #0
10011e78:	210a      	movs	r1, #10
10011e7a:	4b03      	ldr	r3, [pc, #12]	; (10011e88 <gapc_security_cmd_handler+0x3c>)
10011e7c:	4798      	blx	r3
10011e7e:	bd08      	pop	{r3, pc}
10011e80:	1001b184 	.word	0x1001b184
10011e84:	1001ae14 	.word	0x1001ae14
10011e88:	10011641 	.word	0x10011641

10011e8c <gapc_encrypt_cmd_handler>:
10011e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e8e:	2500      	movs	r5, #0
10011e90:	b089      	sub	sp, #36	; 0x24
10011e92:	9306      	str	r3, [sp, #24]
10011e94:	ab0e      	add	r3, sp, #56	; 0x38
10011e96:	781b      	ldrb	r3, [r3, #0]
10011e98:	1c17      	adds	r7, r2, #0
10011e9a:	9307      	str	r3, [sp, #28]
10011e9c:	ab0f      	add	r3, sp, #60	; 0x3c
10011e9e:	781b      	ldrb	r3, [r3, #0]
10011ea0:	4a19      	ldr	r2, [pc, #100]	; (10011f08 <gapc_encrypt_cmd_handler+0x7c>)
10011ea2:	1c06      	adds	r6, r0, #0
10011ea4:	9105      	str	r1, [sp, #20]
10011ea6:	9300      	str	r3, [sp, #0]
10011ea8:	9002      	str	r0, [sp, #8]
10011eaa:	1c29      	adds	r1, r5, #0
10011eac:	1c2b      	adds	r3, r5, #0
10011eae:	9501      	str	r5, [sp, #4]
10011eb0:	1c10      	adds	r0, r2, #0
10011eb2:	4c16      	ldr	r4, [pc, #88]	; (10011f0c <gapc_encrypt_cmd_handler+0x80>)
10011eb4:	47a0      	blx	r4
10011eb6:	2316      	movs	r3, #22
10011eb8:	4c15      	ldr	r4, [pc, #84]	; (10011f10 <gapc_encrypt_cmd_handler+0x84>)
10011eba:	9905      	ldr	r1, [sp, #20]
10011ebc:	7023      	strb	r3, [r4, #0]
10011ebe:	3b08      	subs	r3, #8
10011ec0:	7063      	strb	r3, [r4, #1]
10011ec2:	70a3      	strb	r3, [r4, #2]
10011ec4:	4b13      	ldr	r3, [pc, #76]	; (10011f14 <gapc_encrypt_cmd_handler+0x88>)
10011ec6:	70e6      	strb	r6, [r4, #3]
10011ec8:	881a      	ldrh	r2, [r3, #0]
10011eca:	881b      	ldrh	r3, [r3, #0]
10011ecc:	7122      	strb	r2, [r4, #4]
10011ece:	0a1b      	lsrs	r3, r3, #8
10011ed0:	7163      	strb	r3, [r4, #5]
10011ed2:	230b      	movs	r3, #11
10011ed4:	4e10      	ldr	r6, [pc, #64]	; (10011f18 <gapc_encrypt_cmd_handler+0x8c>)
10011ed6:	2210      	movs	r2, #16
10011ed8:	4810      	ldr	r0, [pc, #64]	; (10011f1c <gapc_encrypt_cmd_handler+0x90>)
10011eda:	7223      	strb	r3, [r4, #8]
10011edc:	7265      	strb	r5, [r4, #9]
10011ede:	47b0      	blx	r6
10011ee0:	0a3b      	lsrs	r3, r7, #8
10011ee2:	9906      	ldr	r1, [sp, #24]
10011ee4:	2208      	movs	r2, #8
10011ee6:	480e      	ldr	r0, [pc, #56]	; (10011f20 <gapc_encrypt_cmd_handler+0x94>)
10011ee8:	76e3      	strb	r3, [r4, #27]
10011eea:	76a7      	strb	r7, [r4, #26]
10011eec:	47b0      	blx	r6
10011eee:	466a      	mov	r2, sp
10011ef0:	7f12      	ldrb	r2, [r2, #28]
10011ef2:	1d63      	adds	r3, r4, #5
10011ef4:	77da      	strb	r2, [r3, #31]
10011ef6:	231d      	movs	r3, #29
10011ef8:	1c20      	adds	r0, r4, #0
10011efa:	71a3      	strb	r3, [r4, #6]
10011efc:	2125      	movs	r1, #37	; 0x25
10011efe:	4b09      	ldr	r3, [pc, #36]	; (10011f24 <gapc_encrypt_cmd_handler+0x98>)
10011f00:	71e5      	strb	r5, [r4, #7]
10011f02:	4798      	blx	r3
10011f04:	b009      	add	sp, #36	; 0x24
10011f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f08:	10019f44 	.word	0x10019f44
10011f0c:	10011945 	.word	0x10011945
10011f10:	1001b184 	.word	0x1001b184
10011f14:	1001ae14 	.word	0x1001ae14
10011f18:	100150d7 	.word	0x100150d7
10011f1c:	1001b18e 	.word	0x1001b18e
10011f20:	1001b1a0 	.word	0x1001b1a0
10011f24:	10011641 	.word	0x10011641

10011f28 <gapc_encrypt_req_ind>:
10011f28:	b508      	push	{r3, lr}
10011f2a:	0a00      	lsrs	r0, r0, #8
10011f2c:	8010      	strh	r0, [r2, #0]
10011f2e:	784b      	ldrb	r3, [r1, #1]
10011f30:	7808      	ldrb	r0, [r1, #0]
10011f32:	021b      	lsls	r3, r3, #8
10011f34:	4303      	orrs	r3, r0
10011f36:	8053      	strh	r3, [r2, #2]
10011f38:	1d10      	adds	r0, r2, #4
10011f3a:	3102      	adds	r1, #2
10011f3c:	2208      	movs	r2, #8
10011f3e:	4b01      	ldr	r3, [pc, #4]	; (10011f44 <gapc_encrypt_req_ind+0x1c>)
10011f40:	4798      	blx	r3
10011f42:	bd08      	pop	{r3, pc}
10011f44:	100150d7 	.word	0x100150d7

10011f48 <gapc_encrypt_cfm_handler>:
10011f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f4a:	2500      	movs	r5, #0
10011f4c:	b087      	sub	sp, #28
10011f4e:	9304      	str	r3, [sp, #16]
10011f50:	ab0c      	add	r3, sp, #48	; 0x30
10011f52:	781b      	ldrb	r3, [r3, #0]
10011f54:	1c17      	adds	r7, r2, #0
10011f56:	4a15      	ldr	r2, [pc, #84]	; (10011fac <gapc_encrypt_cfm_handler+0x64>)
10011f58:	1c06      	adds	r6, r0, #0
10011f5a:	9305      	str	r3, [sp, #20]
10011f5c:	9100      	str	r1, [sp, #0]
10011f5e:	9002      	str	r0, [sp, #8]
10011f60:	1c29      	adds	r1, r5, #0
10011f62:	1c2b      	adds	r3, r5, #0
10011f64:	9501      	str	r5, [sp, #4]
10011f66:	1c10      	adds	r0, r2, #0
10011f68:	4c11      	ldr	r4, [pc, #68]	; (10011fb0 <gapc_encrypt_cfm_handler+0x68>)
10011f6a:	47a0      	blx	r4
10011f6c:	2318      	movs	r3, #24
10011f6e:	4c11      	ldr	r4, [pc, #68]	; (10011fb4 <gapc_encrypt_cfm_handler+0x6c>)
10011f70:	9904      	ldr	r1, [sp, #16]
10011f72:	7023      	strb	r3, [r4, #0]
10011f74:	3b0a      	subs	r3, #10
10011f76:	7063      	strb	r3, [r4, #1]
10011f78:	70a3      	strb	r3, [r4, #2]
10011f7a:	4b0f      	ldr	r3, [pc, #60]	; (10011fb8 <gapc_encrypt_cfm_handler+0x70>)
10011f7c:	480f      	ldr	r0, [pc, #60]	; (10011fbc <gapc_encrypt_cfm_handler+0x74>)
10011f7e:	881a      	ldrh	r2, [r3, #0]
10011f80:	881b      	ldrh	r3, [r3, #0]
10011f82:	7122      	strb	r2, [r4, #4]
10011f84:	0a1b      	lsrs	r3, r3, #8
10011f86:	7163      	strb	r3, [r4, #5]
10011f88:	2210      	movs	r2, #16
10011f8a:	4b0d      	ldr	r3, [pc, #52]	; (10011fc0 <gapc_encrypt_cfm_handler+0x78>)
10011f8c:	70e6      	strb	r6, [r4, #3]
10011f8e:	7227      	strb	r7, [r4, #8]
10011f90:	4798      	blx	r3
10011f92:	466b      	mov	r3, sp
10011f94:	7d1b      	ldrb	r3, [r3, #20]
10011f96:	1c20      	adds	r0, r4, #0
10011f98:	7663      	strb	r3, [r4, #25]
10011f9a:	2312      	movs	r3, #18
10011f9c:	211a      	movs	r1, #26
10011f9e:	71a3      	strb	r3, [r4, #6]
10011fa0:	4b08      	ldr	r3, [pc, #32]	; (10011fc4 <gapc_encrypt_cfm_handler+0x7c>)
10011fa2:	71e5      	strb	r5, [r4, #7]
10011fa4:	4798      	blx	r3
10011fa6:	b007      	add	sp, #28
10011fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011faa:	46c0      	nop			; (mov r8, r8)
10011fac:	10019f54 	.word	0x10019f54
10011fb0:	10011945 	.word	0x10011945
10011fb4:	1001b184 	.word	0x1001b184
10011fb8:	1001ae14 	.word	0x1001ae14
10011fbc:	1001b18d 	.word	0x1001b18d
10011fc0:	100150d7 	.word	0x100150d7
10011fc4:	10011641 	.word	0x10011641

10011fc8 <gapc_encrypt_ind>:
10011fc8:	780b      	ldrb	r3, [r1, #0]
10011fca:	0a00      	lsrs	r0, r0, #8
10011fcc:	70d3      	strb	r3, [r2, #3]
10011fce:	2300      	movs	r3, #0
10011fd0:	8010      	strh	r0, [r2, #0]
10011fd2:	7093      	strb	r3, [r2, #2]
10011fd4:	4770      	bx	lr
	...

10011fd8 <gapc_param_update_cfm_handler>:
10011fd8:	b538      	push	{r3, r4, r5, lr}
10011fda:	2410      	movs	r4, #16
10011fdc:	1c05      	adds	r5, r0, #0
10011fde:	480e      	ldr	r0, [pc, #56]	; (10012018 <gapc_param_update_cfm_handler+0x40>)
10011fe0:	7004      	strb	r4, [r0, #0]
10011fe2:	3c02      	subs	r4, #2
10011fe4:	7044      	strb	r4, [r0, #1]
10011fe6:	7084      	strb	r4, [r0, #2]
10011fe8:	4c0c      	ldr	r4, [pc, #48]	; (1001201c <gapc_param_update_cfm_handler+0x44>)
10011fea:	70c5      	strb	r5, [r0, #3]
10011fec:	8825      	ldrh	r5, [r4, #0]
10011fee:	8824      	ldrh	r4, [r4, #0]
10011ff0:	72c3      	strb	r3, [r0, #11]
10011ff2:	0a1b      	lsrs	r3, r3, #8
10011ff4:	0a24      	lsrs	r4, r4, #8
10011ff6:	7303      	strb	r3, [r0, #12]
10011ff8:	2305      	movs	r3, #5
10011ffa:	7144      	strb	r4, [r0, #5]
10011ffc:	2400      	movs	r4, #0
10011ffe:	7201      	strb	r1, [r0, #8]
10012000:	7242      	strb	r2, [r0, #9]
10012002:	7183      	strb	r3, [r0, #6]
10012004:	0a12      	lsrs	r2, r2, #8
10012006:	210d      	movs	r1, #13
10012008:	4b05      	ldr	r3, [pc, #20]	; (10012020 <gapc_param_update_cfm_handler+0x48>)
1001200a:	7105      	strb	r5, [r0, #4]
1001200c:	7282      	strb	r2, [r0, #10]
1001200e:	71c4      	strb	r4, [r0, #7]
10012010:	4798      	blx	r3
10012012:	1c20      	adds	r0, r4, #0
10012014:	bd38      	pop	{r3, r4, r5, pc}
10012016:	46c0      	nop			; (mov r8, r8)
10012018:	1001b184 	.word	0x1001b184
1001201c:	1001ae14 	.word	0x1001ae14
10012020:	10011641 	.word	0x10011641

10012024 <gapc_param_updated_ind>:
10012024:	2300      	movs	r3, #0
10012026:	0a00      	lsrs	r0, r0, #8
10012028:	8010      	strh	r0, [r2, #0]
1001202a:	7093      	strb	r3, [r2, #2]
1001202c:	784b      	ldrb	r3, [r1, #1]
1001202e:	7808      	ldrb	r0, [r1, #0]
10012030:	021b      	lsls	r3, r3, #8
10012032:	4303      	orrs	r3, r0
10012034:	8093      	strh	r3, [r2, #4]
10012036:	78cb      	ldrb	r3, [r1, #3]
10012038:	7888      	ldrb	r0, [r1, #2]
1001203a:	021b      	lsls	r3, r3, #8
1001203c:	4303      	orrs	r3, r0
1001203e:	80d3      	strh	r3, [r2, #6]
10012040:	794b      	ldrb	r3, [r1, #5]
10012042:	7909      	ldrb	r1, [r1, #4]
10012044:	021b      	lsls	r3, r3, #8
10012046:	430b      	orrs	r3, r1
10012048:	2007      	movs	r0, #7
1001204a:	8113      	strh	r3, [r2, #8]
1001204c:	4770      	bx	lr

1001204e <gapc_param_updated_req_ind>:
1001204e:	0a00      	lsrs	r0, r0, #8
10012050:	8010      	strh	r0, [r2, #0]
10012052:	784b      	ldrb	r3, [r1, #1]
10012054:	7808      	ldrb	r0, [r1, #0]
10012056:	021b      	lsls	r3, r3, #8
10012058:	4303      	orrs	r3, r0
1001205a:	8053      	strh	r3, [r2, #2]
1001205c:	78cb      	ldrb	r3, [r1, #3]
1001205e:	7888      	ldrb	r0, [r1, #2]
10012060:	021b      	lsls	r3, r3, #8
10012062:	4303      	orrs	r3, r0
10012064:	8093      	strh	r3, [r2, #4]
10012066:	794b      	ldrb	r3, [r1, #5]
10012068:	7908      	ldrb	r0, [r1, #4]
1001206a:	021b      	lsls	r3, r3, #8
1001206c:	4303      	orrs	r3, r0
1001206e:	80d3      	strh	r3, [r2, #6]
10012070:	79cb      	ldrb	r3, [r1, #7]
10012072:	7989      	ldrb	r1, [r1, #6]
10012074:	021b      	lsls	r3, r3, #8
10012076:	430b      	orrs	r3, r1
10012078:	2008      	movs	r0, #8
1001207a:	8113      	strh	r3, [r2, #8]
1001207c:	4770      	bx	lr
	...

10012080 <gapc_dev_info_req_ind_handler>:
10012080:	b508      	push	{r3, lr}
10012082:	1c0b      	adds	r3, r1, #0
10012084:	0a01      	lsrs	r1, r0, #8
10012086:	8011      	strh	r1, [r2, #0]
10012088:	7818      	ldrb	r0, [r3, #0]
1001208a:	7090      	strb	r0, [r2, #2]
1001208c:	2800      	cmp	r0, #0
1001208e:	d104      	bne.n	1001209a <gapc_dev_info_req_ind_handler+0x1a>
10012090:	4b03      	ldr	r3, [pc, #12]	; (100120a0 <gapc_dev_info_req_ind_handler+0x20>)
10012092:	33aa      	adds	r3, #170	; 0xaa
10012094:	881b      	ldrh	r3, [r3, #0]
10012096:	2b00      	cmp	r3, #0
10012098:	d001      	beq.n	1001209e <gapc_dev_info_req_ind_handler+0x1e>
1001209a:	4b02      	ldr	r3, [pc, #8]	; (100120a4 <gapc_dev_info_req_ind_handler+0x24>)
1001209c:	4798      	blx	r3
1001209e:	bd08      	pop	{r3, pc}
100120a0:	1001aea6 	.word	0x1001aea6
100120a4:	10011751 	.word	0x10011751

100120a8 <gapc_sec_req_ind>:
100120a8:	0a00      	lsrs	r0, r0, #8
100120aa:	8010      	strh	r0, [r2, #0]
100120ac:	7809      	ldrb	r1, [r1, #0]
100120ae:	2301      	movs	r3, #1
100120b0:	1c08      	adds	r0, r1, #0
100120b2:	0889      	lsrs	r1, r1, #2
100120b4:	4018      	ands	r0, r3
100120b6:	400b      	ands	r3, r1
100120b8:	70d0      	strb	r0, [r2, #3]
100120ba:	7113      	strb	r3, [r2, #4]
100120bc:	4770      	bx	lr

100120be <gapc_sign_counter_ind_handler>:
100120be:	0a00      	lsrs	r0, r0, #8
100120c0:	8010      	strh	r0, [r2, #0]
100120c2:	784b      	ldrb	r3, [r1, #1]
100120c4:	0218      	lsls	r0, r3, #8
100120c6:	788b      	ldrb	r3, [r1, #2]
100120c8:	041b      	lsls	r3, r3, #16
100120ca:	4303      	orrs	r3, r0
100120cc:	7808      	ldrb	r0, [r1, #0]
100120ce:	4303      	orrs	r3, r0
100120d0:	78c8      	ldrb	r0, [r1, #3]
100120d2:	0600      	lsls	r0, r0, #24
100120d4:	4303      	orrs	r3, r0
100120d6:	6053      	str	r3, [r2, #4]
100120d8:	794b      	ldrb	r3, [r1, #5]
100120da:	0218      	lsls	r0, r3, #8
100120dc:	798b      	ldrb	r3, [r1, #6]
100120de:	041b      	lsls	r3, r3, #16
100120e0:	4303      	orrs	r3, r0
100120e2:	7908      	ldrb	r0, [r1, #4]
100120e4:	79c9      	ldrb	r1, [r1, #7]
100120e6:	4303      	orrs	r3, r0
100120e8:	0609      	lsls	r1, r1, #24
100120ea:	430b      	orrs	r3, r1
100120ec:	2000      	movs	r0, #0
100120ee:	6093      	str	r3, [r2, #8]
100120f0:	4770      	bx	lr
	...

100120f4 <gapc_peer_att_info_ind_handler>:
100120f4:	b510      	push	{r4, lr}
100120f6:	0a00      	lsrs	r0, r0, #8
100120f8:	8010      	strh	r0, [r2, #0]
100120fa:	7808      	ldrb	r0, [r1, #0]
100120fc:	7090      	strb	r0, [r2, #2]
100120fe:	788b      	ldrb	r3, [r1, #2]
10012100:	784c      	ldrb	r4, [r1, #1]
10012102:	021b      	lsls	r3, r3, #8
10012104:	4323      	orrs	r3, r4
10012106:	8093      	strh	r3, [r2, #4]
10012108:	2801      	cmp	r0, #1
1001210a:	d027      	beq.n	1001215c <gapc_peer_att_info_ind_handler+0x68>
1001210c:	2800      	cmp	r0, #0
1001210e:	d017      	beq.n	10012140 <gapc_peer_att_info_ind_handler+0x4c>
10012110:	2802      	cmp	r0, #2
10012112:	d12a      	bne.n	1001216a <gapc_peer_att_info_ind_handler+0x76>
10012114:	790b      	ldrb	r3, [r1, #4]
10012116:	78c8      	ldrb	r0, [r1, #3]
10012118:	021b      	lsls	r3, r3, #8
1001211a:	4303      	orrs	r3, r0
1001211c:	8113      	strh	r3, [r2, #8]
1001211e:	798b      	ldrb	r3, [r1, #6]
10012120:	7948      	ldrb	r0, [r1, #5]
10012122:	021b      	lsls	r3, r3, #8
10012124:	4303      	orrs	r3, r0
10012126:	80d3      	strh	r3, [r2, #6]
10012128:	7a0b      	ldrb	r3, [r1, #8]
1001212a:	79c8      	ldrb	r0, [r1, #7]
1001212c:	021b      	lsls	r3, r3, #8
1001212e:	4303      	orrs	r3, r0
10012130:	8193      	strh	r3, [r2, #12]
10012132:	7a8b      	ldrb	r3, [r1, #10]
10012134:	7a49      	ldrb	r1, [r1, #9]
10012136:	021b      	lsls	r3, r3, #8
10012138:	430b      	orrs	r3, r1
1001213a:	8153      	strh	r3, [r2, #10]
1001213c:	2306      	movs	r3, #6
1001213e:	e013      	b.n	10012168 <gapc_peer_att_info_ind_handler+0x74>
10012140:	1c14      	adds	r4, r2, #0
10012142:	1c20      	adds	r0, r4, #0
10012144:	790a      	ldrb	r2, [r1, #4]
10012146:	78cb      	ldrb	r3, [r1, #3]
10012148:	0212      	lsls	r2, r2, #8
1001214a:	431a      	orrs	r2, r3
1001214c:	80e2      	strh	r2, [r4, #6]
1001214e:	4b07      	ldr	r3, [pc, #28]	; (1001216c <gapc_peer_att_info_ind_handler+0x78>)
10012150:	3008      	adds	r0, #8
10012152:	3105      	adds	r1, #5
10012154:	4798      	blx	r3
10012156:	2302      	movs	r3, #2
10012158:	70a3      	strb	r3, [r4, #2]
1001215a:	e006      	b.n	1001216a <gapc_peer_att_info_ind_handler+0x76>
1001215c:	790b      	ldrb	r3, [r1, #4]
1001215e:	78c9      	ldrb	r1, [r1, #3]
10012160:	021b      	lsls	r3, r3, #8
10012162:	430b      	orrs	r3, r1
10012164:	80d3      	strh	r3, [r2, #6]
10012166:	2305      	movs	r3, #5
10012168:	7093      	strb	r3, [r2, #2]
1001216a:	bd10      	pop	{r4, pc}
1001216c:	100150d7 	.word	0x100150d7

10012170 <gapc_con_channel_map_ind_handler>:
10012170:	b508      	push	{r3, lr}
10012172:	2300      	movs	r3, #0
10012174:	0a00      	lsrs	r0, r0, #8
10012176:	7013      	strb	r3, [r2, #0]
10012178:	8050      	strh	r0, [r2, #2]
1001217a:	4b02      	ldr	r3, [pc, #8]	; (10012184 <gapc_con_channel_map_ind_handler+0x14>)
1001217c:	1d10      	adds	r0, r2, #4
1001217e:	2205      	movs	r2, #5
10012180:	4798      	blx	r3
10012182:	bd08      	pop	{r3, pc}
10012184:	100150d7 	.word	0x100150d7

10012188 <gapc_lecb_connected>:
10012188:	7843      	ldrb	r3, [r0, #1]
1001218a:	7802      	ldrb	r2, [r0, #0]
1001218c:	021b      	lsls	r3, r3, #8
1001218e:	4313      	orrs	r3, r2
10012190:	800b      	strh	r3, [r1, #0]
10012192:	78c3      	ldrb	r3, [r0, #3]
10012194:	7882      	ldrb	r2, [r0, #2]
10012196:	021b      	lsls	r3, r3, #8
10012198:	4313      	orrs	r3, r2
1001219a:	804b      	strh	r3, [r1, #2]
1001219c:	7943      	ldrb	r3, [r0, #5]
1001219e:	7902      	ldrb	r2, [r0, #4]
100121a0:	021b      	lsls	r3, r3, #8
100121a2:	4313      	orrs	r3, r2
100121a4:	808b      	strh	r3, [r1, #4]
100121a6:	79c3      	ldrb	r3, [r0, #7]
100121a8:	7982      	ldrb	r2, [r0, #6]
100121aa:	021b      	lsls	r3, r3, #8
100121ac:	4313      	orrs	r3, r2
100121ae:	80cb      	strh	r3, [r1, #6]
100121b0:	2300      	movs	r3, #0
100121b2:	720b      	strb	r3, [r1, #8]
100121b4:	4770      	bx	lr

100121b6 <gapc_lecb_disconnected>:
100121b6:	7843      	ldrb	r3, [r0, #1]
100121b8:	7802      	ldrb	r2, [r0, #0]
100121ba:	021b      	lsls	r3, r3, #8
100121bc:	4313      	orrs	r3, r2
100121be:	800b      	strh	r3, [r1, #0]
100121c0:	78c3      	ldrb	r3, [r0, #3]
100121c2:	7882      	ldrb	r2, [r0, #2]
100121c4:	021b      	lsls	r3, r3, #8
100121c6:	4313      	orrs	r3, r2
100121c8:	804b      	strh	r3, [r1, #2]
100121ca:	4770      	bx	lr

100121cc <gapc_lecb_connect_req_ind>:
100121cc:	7843      	ldrb	r3, [r0, #1]
100121ce:	7802      	ldrb	r2, [r0, #0]
100121d0:	021b      	lsls	r3, r3, #8
100121d2:	4313      	orrs	r3, r2
100121d4:	800b      	strh	r3, [r1, #0]
100121d6:	78c3      	ldrb	r3, [r0, #3]
100121d8:	7882      	ldrb	r2, [r0, #2]
100121da:	021b      	lsls	r3, r3, #8
100121dc:	4313      	orrs	r3, r2
100121de:	804b      	strh	r3, [r1, #2]
100121e0:	7943      	ldrb	r3, [r0, #5]
100121e2:	7902      	ldrb	r2, [r0, #4]
100121e4:	021b      	lsls	r3, r3, #8
100121e6:	4313      	orrs	r3, r2
100121e8:	808b      	strh	r3, [r1, #4]
100121ea:	79c3      	ldrb	r3, [r0, #7]
100121ec:	7982      	ldrb	r2, [r0, #6]
100121ee:	021b      	lsls	r3, r3, #8
100121f0:	4313      	orrs	r3, r2
100121f2:	80cb      	strh	r3, [r1, #6]
100121f4:	4770      	bx	lr

100121f6 <gapc_lecb_add_credit_resp_handler>:
100121f6:	7843      	ldrb	r3, [r0, #1]
100121f8:	7802      	ldrb	r2, [r0, #0]
100121fa:	021b      	lsls	r3, r3, #8
100121fc:	4313      	orrs	r3, r2
100121fe:	800b      	strh	r3, [r1, #0]
10012200:	78c3      	ldrb	r3, [r0, #3]
10012202:	7882      	ldrb	r2, [r0, #2]
10012204:	021b      	lsls	r3, r3, #8
10012206:	4313      	orrs	r3, r2
10012208:	804b      	strh	r3, [r1, #2]
1001220a:	7943      	ldrb	r3, [r0, #5]
1001220c:	7902      	ldrb	r2, [r0, #4]
1001220e:	021b      	lsls	r3, r3, #8
10012210:	4313      	orrs	r3, r2
10012212:	808b      	strh	r3, [r1, #4]
10012214:	4770      	bx	lr
	...

10012218 <gapm_reset_req_handler>:
10012218:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001221a:	466b      	mov	r3, sp
1001221c:	4915      	ldr	r1, [pc, #84]	; (10012274 <gapm_reset_req_handler+0x5c>)
1001221e:	4816      	ldr	r0, [pc, #88]	; (10012278 <gapm_reset_req_handler+0x60>)
10012220:	880c      	ldrh	r4, [r1, #0]
10012222:	8809      	ldrh	r1, [r1, #0]
10012224:	1ddd      	adds	r5, r3, #7
10012226:	0a09      	lsrs	r1, r1, #8
10012228:	2300      	movs	r3, #0
1001222a:	2202      	movs	r2, #2
1001222c:	7141      	strb	r1, [r0, #5]
1001222e:	26d0      	movs	r6, #208	; 0xd0
10012230:	2101      	movs	r1, #1
10012232:	7104      	strb	r4, [r0, #4]
10012234:	4c11      	ldr	r4, [pc, #68]	; (1001227c <gapm_reset_req_handler+0x64>)
10012236:	702b      	strb	r3, [r5, #0]
10012238:	7002      	strb	r2, [r0, #0]
1001223a:	70c3      	strb	r3, [r0, #3]
1001223c:	320b      	adds	r2, #11
1001223e:	7201      	strb	r1, [r0, #8]
10012240:	7181      	strb	r1, [r0, #6]
10012242:	71c3      	strb	r3, [r0, #7]
10012244:	3108      	adds	r1, #8
10012246:	4b0e      	ldr	r3, [pc, #56]	; (10012280 <gapm_reset_req_handler+0x68>)
10012248:	0136      	lsls	r6, r6, #4
1001224a:	7042      	strb	r2, [r0, #1]
1001224c:	7082      	strb	r2, [r0, #2]
1001224e:	80a2      	strh	r2, [r4, #4]
10012250:	8026      	strh	r6, [r4, #0]
10012252:	4798      	blx	r3
10012254:	1c28      	adds	r0, r5, #0
10012256:	4b0b      	ldr	r3, [pc, #44]	; (10012284 <gapm_reset_req_handler+0x6c>)
10012258:	4798      	blx	r3
1001225a:	782b      	ldrb	r3, [r5, #0]
1001225c:	20e2      	movs	r0, #226	; 0xe2
1001225e:	2b00      	cmp	r3, #0
10012260:	d106      	bne.n	10012270 <gapm_reset_req_handler+0x58>
10012262:	68a3      	ldr	r3, [r4, #8]
10012264:	20e2      	movs	r0, #226	; 0xe2
10012266:	781a      	ldrb	r2, [r3, #0]
10012268:	785b      	ldrb	r3, [r3, #1]
1001226a:	2a01      	cmp	r2, #1
1001226c:	d100      	bne.n	10012270 <gapm_reset_req_handler+0x58>
1001226e:	1c18      	adds	r0, r3, #0
10012270:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10012272:	46c0      	nop			; (mov r8, r8)
10012274:	1001ae14 	.word	0x1001ae14
10012278:	1001b184 	.word	0x1001b184
1001227c:	1001ae08 	.word	0x1001ae08
10012280:	10011641 	.word	0x10011641
10012284:	100116a5 	.word	0x100116a5

10012288 <gapm_set_dev_config_cmd_handler>:
10012288:	b5f0      	push	{r4, r5, r6, r7, lr}
1001228a:	b089      	sub	sp, #36	; 0x24
1001228c:	9303      	str	r3, [sp, #12]
1001228e:	ab0e      	add	r3, sp, #56	; 0x38
10012290:	781b      	ldrb	r3, [r3, #0]
10012292:	4c37      	ldr	r4, [pc, #220]	; (10012370 <gapm_set_dev_config_cmd_handler+0xe8>)
10012294:	9304      	str	r3, [sp, #16]
10012296:	ab0f      	add	r3, sp, #60	; 0x3c
10012298:	781b      	ldrb	r3, [r3, #0]
1001229a:	270d      	movs	r7, #13
1001229c:	9305      	str	r3, [sp, #20]
1001229e:	ab10      	add	r3, sp, #64	; 0x40
100122a0:	881b      	ldrh	r3, [r3, #0]
100122a2:	72a1      	strb	r1, [r4, #10]
100122a4:	9300      	str	r3, [sp, #0]
100122a6:	ab11      	add	r3, sp, #68	; 0x44
100122a8:	881b      	ldrh	r3, [r3, #0]
100122aa:	0a09      	lsrs	r1, r1, #8
100122ac:	9301      	str	r3, [sp, #4]
100122ae:	ab12      	add	r3, sp, #72	; 0x48
100122b0:	881b      	ldrh	r3, [r3, #0]
100122b2:	7260      	strb	r0, [r4, #9]
100122b4:	9302      	str	r3, [sp, #8]
100122b6:	ab06      	add	r3, sp, #24
100122b8:	1dde      	adds	r6, r3, #7
100122ba:	2300      	movs	r3, #0
100122bc:	7033      	strb	r3, [r6, #0]
100122be:	2304      	movs	r3, #4
100122c0:	7023      	strb	r3, [r4, #0]
100122c2:	2300      	movs	r3, #0
100122c4:	70e3      	strb	r3, [r4, #3]
100122c6:	4b2b      	ldr	r3, [pc, #172]	; (10012374 <gapm_set_dev_config_cmd_handler+0xec>)
100122c8:	72e1      	strb	r1, [r4, #11]
100122ca:	881d      	ldrh	r5, [r3, #0]
100122cc:	881b      	ldrh	r3, [r3, #0]
100122ce:	1c11      	adds	r1, r2, #0
100122d0:	0a1b      	lsrs	r3, r3, #8
100122d2:	7163      	strb	r3, [r4, #5]
100122d4:	2303      	movs	r3, #3
100122d6:	7125      	strb	r5, [r4, #4]
100122d8:	2206      	movs	r2, #6
100122da:	4d27      	ldr	r5, [pc, #156]	; (10012378 <gapm_set_dev_config_cmd_handler+0xf0>)
100122dc:	4827      	ldr	r0, [pc, #156]	; (1001237c <gapm_set_dev_config_cmd_handler+0xf4>)
100122de:	7223      	strb	r3, [r4, #8]
100122e0:	7067      	strb	r7, [r4, #1]
100122e2:	70a7      	strb	r7, [r4, #2]
100122e4:	47a8      	blx	r5
100122e6:	9903      	ldr	r1, [sp, #12]
100122e8:	2210      	movs	r2, #16
100122ea:	4825      	ldr	r0, [pc, #148]	; (10012380 <gapm_set_dev_config_cmd_handler+0xf8>)
100122ec:	47a8      	blx	r5
100122ee:	466a      	mov	r2, sp
100122f0:	7c12      	ldrb	r2, [r2, #16]
100122f2:	1ce3      	adds	r3, r4, #3
100122f4:	77da      	strb	r2, [r3, #31]
100122f6:	466a      	mov	r2, sp
100122f8:	7d12      	ldrb	r2, [r2, #20]
100122fa:	1d23      	adds	r3, r4, #4
100122fc:	77da      	strb	r2, [r3, #31]
100122fe:	466a      	mov	r2, sp
10012300:	7812      	ldrb	r2, [r2, #0]
10012302:	1d63      	adds	r3, r4, #5
10012304:	77da      	strb	r2, [r3, #31]
10012306:	9b00      	ldr	r3, [sp, #0]
10012308:	1da2      	adds	r2, r4, #6
1001230a:	0a1b      	lsrs	r3, r3, #8
1001230c:	77d3      	strb	r3, [r2, #31]
1001230e:	466a      	mov	r2, sp
10012310:	7912      	ldrb	r2, [r2, #4]
10012312:	1de3      	adds	r3, r4, #7
10012314:	77da      	strb	r2, [r3, #31]
10012316:	1c22      	adds	r2, r4, #0
10012318:	9b01      	ldr	r3, [sp, #4]
1001231a:	3208      	adds	r2, #8
1001231c:	0a1b      	lsrs	r3, r3, #8
1001231e:	77d3      	strb	r3, [r2, #31]
10012320:	466a      	mov	r2, sp
10012322:	1c23      	adds	r3, r4, #0
10012324:	7a12      	ldrb	r2, [r2, #8]
10012326:	3328      	adds	r3, #40	; 0x28
10012328:	701a      	strb	r2, [r3, #0]
1001232a:	1c22      	adds	r2, r4, #0
1001232c:	9b02      	ldr	r3, [sp, #8]
1001232e:	3229      	adds	r2, #41	; 0x29
10012330:	0a1b      	lsrs	r3, r3, #8
10012332:	7013      	strb	r3, [r2, #0]
10012334:	23d0      	movs	r3, #208	; 0xd0
10012336:	4d13      	ldr	r5, [pc, #76]	; (10012384 <gapm_set_dev_config_cmd_handler+0xfc>)
10012338:	011b      	lsls	r3, r3, #4
1001233a:	802b      	strh	r3, [r5, #0]
1001233c:	2322      	movs	r3, #34	; 0x22
1001233e:	71a3      	strb	r3, [r4, #6]
10012340:	2300      	movs	r3, #0
10012342:	212a      	movs	r1, #42	; 0x2a
10012344:	71e3      	strb	r3, [r4, #7]
10012346:	1c20      	adds	r0, r4, #0
10012348:	4b0f      	ldr	r3, [pc, #60]	; (10012388 <gapm_set_dev_config_cmd_handler+0x100>)
1001234a:	80af      	strh	r7, [r5, #4]
1001234c:	4798      	blx	r3
1001234e:	1c30      	adds	r0, r6, #0
10012350:	4b0e      	ldr	r3, [pc, #56]	; (1001238c <gapm_set_dev_config_cmd_handler+0x104>)
10012352:	4798      	blx	r3
10012354:	7833      	ldrb	r3, [r6, #0]
10012356:	20e2      	movs	r0, #226	; 0xe2
10012358:	2b00      	cmp	r3, #0
1001235a:	d106      	bne.n	1001236a <gapm_set_dev_config_cmd_handler+0xe2>
1001235c:	68ab      	ldr	r3, [r5, #8]
1001235e:	20e2      	movs	r0, #226	; 0xe2
10012360:	781a      	ldrb	r2, [r3, #0]
10012362:	785b      	ldrb	r3, [r3, #1]
10012364:	2a03      	cmp	r2, #3
10012366:	d100      	bne.n	1001236a <gapm_set_dev_config_cmd_handler+0xe2>
10012368:	1c18      	adds	r0, r3, #0
1001236a:	b009      	add	sp, #36	; 0x24
1001236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001236e:	46c0      	nop			; (mov r8, r8)
10012370:	1001b184 	.word	0x1001b184
10012374:	1001ae14 	.word	0x1001ae14
10012378:	100150d7 	.word	0x100150d7
1001237c:	1001b190 	.word	0x1001b190
10012380:	1001b196 	.word	0x1001b196
10012384:	1001ae08 	.word	0x1001ae08
10012388:	10011641 	.word	0x10011641
1001238c:	100116a5 	.word	0x100116a5

10012390 <gapm_get_dev_config_cmd_handler>:
10012390:	4684      	mov	ip, r0
10012392:	4663      	mov	r3, ip
10012394:	b5f0      	push	{r4, r5, r6, r7, lr}
10012396:	b085      	sub	sp, #20
10012398:	9100      	str	r1, [sp, #0]
1001239a:	20cf      	movs	r0, #207	; 0xcf
1001239c:	2b01      	cmp	r3, #1
1001239e:	d854      	bhi.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
100123a0:	2900      	cmp	r1, #0
100123a2:	d052      	beq.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
100123a4:	2200      	movs	r2, #0
100123a6:	492a      	ldr	r1, [pc, #168]	; (10012450 <gapm_get_dev_config_cmd_handler+0xc0>)
100123a8:	ab02      	add	r3, sp, #8
100123aa:	880c      	ldrh	r4, [r1, #0]
100123ac:	8809      	ldrh	r1, [r1, #0]
100123ae:	1d9f      	adds	r7, r3, #6
100123b0:	719a      	strb	r2, [r3, #6]
100123b2:	4b28      	ldr	r3, [pc, #160]	; (10012454 <gapm_get_dev_config_cmd_handler+0xc4>)
100123b4:	0a09      	lsrs	r1, r1, #8
100123b6:	250d      	movs	r5, #13
100123b8:	2606      	movs	r6, #6
100123ba:	7159      	strb	r1, [r3, #5]
100123bc:	4661      	mov	r1, ip
100123be:	701e      	strb	r6, [r3, #0]
100123c0:	705d      	strb	r5, [r3, #1]
100123c2:	709d      	strb	r5, [r3, #2]
100123c4:	70da      	strb	r2, [r3, #3]
100123c6:	711c      	strb	r4, [r3, #4]
100123c8:	2901      	cmp	r1, #1
100123ca:	d13e      	bne.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
100123cc:	21d0      	movs	r1, #208	; 0xd0
100123ce:	4c22      	ldr	r4, [pc, #136]	; (10012458 <gapm_get_dev_config_cmd_handler+0xc8>)
100123d0:	0109      	lsls	r1, r1, #4
100123d2:	8061      	strh	r1, [r4, #2]
100123d4:	4921      	ldr	r1, [pc, #132]	; (1001245c <gapm_get_dev_config_cmd_handler+0xcc>)
100123d6:	71da      	strb	r2, [r3, #7]
100123d8:	8021      	strh	r1, [r4, #0]
100123da:	4661      	mov	r1, ip
100123dc:	721e      	strb	r6, [r3, #8]
100123de:	7199      	strb	r1, [r3, #6]
100123e0:	1c18      	adds	r0, r3, #0
100123e2:	2109      	movs	r1, #9
100123e4:	4b1e      	ldr	r3, [pc, #120]	; (10012460 <gapm_get_dev_config_cmd_handler+0xd0>)
100123e6:	80a5      	strh	r5, [r4, #4]
100123e8:	4798      	blx	r3
100123ea:	1c38      	adds	r0, r7, #0
100123ec:	4b1d      	ldr	r3, [pc, #116]	; (10012464 <gapm_get_dev_config_cmd_handler+0xd4>)
100123ee:	4798      	blx	r3
100123f0:	783b      	ldrb	r3, [r7, #0]
100123f2:	20e2      	movs	r0, #226	; 0xe2
100123f4:	9301      	str	r3, [sp, #4]
100123f6:	2b00      	cmp	r3, #0
100123f8:	d127      	bne.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
100123fa:	8821      	ldrh	r1, [r4, #0]
100123fc:	4a1a      	ldr	r2, [pc, #104]	; (10012468 <gapm_get_dev_config_cmd_handler+0xd8>)
100123fe:	68a7      	ldr	r7, [r4, #8]
10012400:	3b01      	subs	r3, #1
10012402:	4291      	cmp	r1, r2
10012404:	d001      	beq.n	1001240a <gapm_get_dev_config_cmd_handler+0x7a>
10012406:	8023      	strh	r3, [r4, #0]
10012408:	e01a      	b.n	10012440 <gapm_get_dev_config_cmd_handler+0xb0>
1001240a:	8063      	strh	r3, [r4, #2]
1001240c:	9b00      	ldr	r3, [sp, #0]
1001240e:	1c39      	adds	r1, r7, #0
10012410:	1c58      	adds	r0, r3, #1
10012412:	1c32      	adds	r2, r6, #0
10012414:	4b15      	ldr	r3, [pc, #84]	; (1001246c <gapm_get_dev_config_cmd_handler+0xdc>)
10012416:	4798      	blx	r3
10012418:	79bb      	ldrb	r3, [r7, #6]
1001241a:	9a00      	ldr	r2, [sp, #0]
1001241c:	7013      	strb	r3, [r2, #0]
1001241e:	23d0      	movs	r3, #208	; 0xd0
10012420:	011b      	lsls	r3, r3, #4
10012422:	8023      	strh	r3, [r4, #0]
10012424:	ab02      	add	r3, sp, #8
10012426:	80a5      	strh	r5, [r4, #4]
10012428:	1ddd      	adds	r5, r3, #7
1001242a:	466b      	mov	r3, sp
1001242c:	791b      	ldrb	r3, [r3, #4]
1001242e:	1c28      	adds	r0, r5, #0
10012430:	702b      	strb	r3, [r5, #0]
10012432:	4b0c      	ldr	r3, [pc, #48]	; (10012464 <gapm_get_dev_config_cmd_handler+0xd4>)
10012434:	4798      	blx	r3
10012436:	782b      	ldrb	r3, [r5, #0]
10012438:	20d0      	movs	r0, #208	; 0xd0
1001243a:	2b00      	cmp	r3, #0
1001243c:	d105      	bne.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
1001243e:	68a7      	ldr	r7, [r4, #8]
10012440:	783b      	ldrb	r3, [r7, #0]
10012442:	7878      	ldrb	r0, [r7, #1]
10012444:	2b06      	cmp	r3, #6
10012446:	d000      	beq.n	1001244a <gapm_get_dev_config_cmd_handler+0xba>
10012448:	20e2      	movs	r0, #226	; 0xe2
1001244a:	b005      	add	sp, #20
1001244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001244e:	46c0      	nop			; (mov r8, r8)
10012450:	1001ae14 	.word	0x1001ae14
10012454:	1001b184 	.word	0x1001b184
10012458:	1001ae08 	.word	0x1001ae08
1001245c:	00000d08 	.word	0x00000d08
10012460:	10011641 	.word	0x10011641
10012464:	100116a5 	.word	0x100116a5
10012468:	0000ffff 	.word	0x0000ffff
1001246c:	100150d7 	.word	0x100150d7

10012470 <gapm_cancel_cmd_handler>:
10012470:	b537      	push	{r0, r1, r2, r4, r5, lr}
10012472:	4916      	ldr	r1, [pc, #88]	; (100124cc <gapm_cancel_cmd_handler+0x5c>)
10012474:	4816      	ldr	r0, [pc, #88]	; (100124d0 <gapm_cancel_cmd_handler+0x60>)
10012476:	880c      	ldrh	r4, [r1, #0]
10012478:	8809      	ldrh	r1, [r1, #0]
1001247a:	466b      	mov	r3, sp
1001247c:	0a09      	lsrs	r1, r1, #8
1001247e:	7141      	strb	r1, [r0, #5]
10012480:	2102      	movs	r1, #2
10012482:	2203      	movs	r2, #3
10012484:	7201      	strb	r1, [r0, #8]
10012486:	21d0      	movs	r1, #208	; 0xd0
10012488:	1ddd      	adds	r5, r3, #7
1001248a:	2300      	movs	r3, #0
1001248c:	7104      	strb	r4, [r0, #4]
1001248e:	4c11      	ldr	r4, [pc, #68]	; (100124d4 <gapm_cancel_cmd_handler+0x64>)
10012490:	7002      	strb	r2, [r0, #0]
10012492:	0109      	lsls	r1, r1, #4
10012494:	320a      	adds	r2, #10
10012496:	702b      	strb	r3, [r5, #0]
10012498:	7042      	strb	r2, [r0, #1]
1001249a:	7082      	strb	r2, [r0, #2]
1001249c:	70c3      	strb	r3, [r0, #3]
1001249e:	8021      	strh	r1, [r4, #0]
100124a0:	80a2      	strh	r2, [r4, #4]
100124a2:	71c3      	strb	r3, [r0, #7]
100124a4:	3a0c      	subs	r2, #12
100124a6:	2109      	movs	r1, #9
100124a8:	4b0b      	ldr	r3, [pc, #44]	; (100124d8 <gapm_cancel_cmd_handler+0x68>)
100124aa:	7182      	strb	r2, [r0, #6]
100124ac:	4798      	blx	r3
100124ae:	1c28      	adds	r0, r5, #0
100124b0:	4b0a      	ldr	r3, [pc, #40]	; (100124dc <gapm_cancel_cmd_handler+0x6c>)
100124b2:	4798      	blx	r3
100124b4:	7828      	ldrb	r0, [r5, #0]
100124b6:	2800      	cmp	r0, #0
100124b8:	d001      	beq.n	100124be <gapm_cancel_cmd_handler+0x4e>
100124ba:	20e2      	movs	r0, #226	; 0xe2
100124bc:	e004      	b.n	100124c8 <gapm_cancel_cmd_handler+0x58>
100124be:	68a3      	ldr	r3, [r4, #8]
100124c0:	785b      	ldrb	r3, [r3, #1]
100124c2:	2b44      	cmp	r3, #68	; 0x44
100124c4:	d000      	beq.n	100124c8 <gapm_cancel_cmd_handler+0x58>
100124c6:	1c18      	adds	r0, r3, #0
100124c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100124ca:	46c0      	nop			; (mov r8, r8)
100124cc:	1001ae14 	.word	0x1001ae14
100124d0:	1001b184 	.word	0x1001b184
100124d4:	1001ae08 	.word	0x1001ae08
100124d8:	10011641 	.word	0x10011641
100124dc:	100116a5 	.word	0x100116a5

100124e0 <gapm_dev_bdaddr_ind_handler>:
100124e0:	b538      	push	{r3, r4, r5, lr}
100124e2:	1c05      	adds	r5, r0, #0
100124e4:	1c0c      	adds	r4, r1, #0
100124e6:	1c48      	adds	r0, r1, #1
100124e8:	2206      	movs	r2, #6
100124ea:	1c29      	adds	r1, r5, #0
100124ec:	4b02      	ldr	r3, [pc, #8]	; (100124f8 <gapm_dev_bdaddr_ind_handler+0x18>)
100124ee:	4798      	blx	r3
100124f0:	79ab      	ldrb	r3, [r5, #6]
100124f2:	2000      	movs	r0, #0
100124f4:	7023      	strb	r3, [r4, #0]
100124f6:	bd38      	pop	{r3, r4, r5, pc}
100124f8:	100150d7 	.word	0x100150d7

100124fc <gapm_cmp_evt>:
100124fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124fe:	7803      	ldrb	r3, [r0, #0]
10012500:	7845      	ldrb	r5, [r0, #1]
10012502:	3b0c      	subs	r3, #12
10012504:	1e18      	subs	r0, r3, #0
10012506:	280b      	cmp	r0, #11
10012508:	d900      	bls.n	1001250c <gapm_cmp_evt+0x10>
1001250a:	e08d      	b.n	10012628 <gapm_cmp_evt+0x12c>
1001250c:	1c0c      	adds	r4, r1, #0
1001250e:	f000 fd5f 	bl	10012fd0 <__gnu_thumb1_case_uqi>
10012512:	1952      	.short	0x1952
10012514:	068b1919 	.word	0x068b1919
10012518:	8b595906 	.word	0x8b595906
1001251c:	0d8b      	.short	0x0d8b
1001251e:	2300      	movs	r3, #0
10012520:	2d45      	cmp	r5, #69	; 0x45
10012522:	d000      	beq.n	10012526 <gapm_cmp_evt+0x2a>
10012524:	1c2b      	adds	r3, r5, #0
10012526:	7023      	strb	r3, [r4, #0]
10012528:	2002      	movs	r0, #2
1001252a:	e07e      	b.n	1001262a <gapm_cmp_evt+0x12e>
1001252c:	203b      	movs	r0, #59	; 0x3b
1001252e:	2d00      	cmp	r5, #0
10012530:	d100      	bne.n	10012534 <gapm_cmp_evt+0x38>
10012532:	e07a      	b.n	1001262a <gapm_cmp_evt+0x12e>
10012534:	700d      	strb	r5, [r1, #0]
10012536:	1c48      	adds	r0, r1, #1
10012538:	2210      	movs	r2, #16
1001253a:	2100      	movs	r1, #0
1001253c:	4b3b      	ldr	r3, [pc, #236]	; (1001262c <gapm_cmp_evt+0x130>)
1001253e:	4798      	blx	r3
10012540:	200f      	movs	r0, #15
10012542:	e072      	b.n	1001262a <gapm_cmp_evt+0x12e>
10012544:	2d00      	cmp	r5, #0
10012546:	d134      	bne.n	100125b2 <gapm_cmp_evt+0xb6>
10012548:	4b39      	ldr	r3, [pc, #228]	; (10012630 <gapm_cmp_evt+0x134>)
1001254a:	4798      	blx	r3
1001254c:	1e43      	subs	r3, r0, #1
1001254e:	b2db      	uxtb	r3, r3
10012550:	1c28      	adds	r0, r5, #0
10012552:	2b06      	cmp	r3, #6
10012554:	d869      	bhi.n	1001262a <gapm_cmp_evt+0x12e>
10012556:	466b      	mov	r3, sp
10012558:	4e36      	ldr	r6, [pc, #216]	; (10012634 <gapm_cmp_evt+0x138>)
1001255a:	1dd9      	adds	r1, r3, #7
1001255c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001255e:	4b36      	ldr	r3, [pc, #216]	; (10012638 <gapm_cmp_evt+0x13c>)
10012560:	4798      	blx	r3
10012562:	2312      	movs	r3, #18
10012564:	4358      	muls	r0, r3
10012566:	4935      	ldr	r1, [pc, #212]	; (1001263c <gapm_cmp_evt+0x140>)
10012568:	1809      	adds	r1, r1, r0
1001256a:	1c0b      	adds	r3, r1, #0
1001256c:	894a      	ldrh	r2, [r1, #10]
1001256e:	3308      	adds	r3, #8
10012570:	8122      	strh	r2, [r4, #8]
10012572:	784f      	ldrb	r7, [r1, #1]
10012574:	72a5      	strb	r5, [r4, #10]
10012576:	7027      	strb	r7, [r4, #0]
10012578:	898a      	ldrh	r2, [r1, #12]
1001257a:	1c60      	adds	r0, r4, #1
1001257c:	81a2      	strh	r2, [r4, #12]
1001257e:	88db      	ldrh	r3, [r3, #6]
10012580:	3102      	adds	r1, #2
10012582:	81e3      	strh	r3, [r4, #14]
10012584:	89cb      	ldrh	r3, [r1, #14]
10012586:	2206      	movs	r2, #6
10012588:	8223      	strh	r3, [r4, #16]
1001258a:	4b2d      	ldr	r3, [pc, #180]	; (10012640 <gapm_cmp_evt+0x144>)
1001258c:	4798      	blx	r3
1001258e:	2f00      	cmp	r7, #0
10012590:	d00a      	beq.n	100125a8 <gapm_cmp_evt+0xac>
10012592:	79a3      	ldrb	r3, [r4, #6]
10012594:	223f      	movs	r2, #63	; 0x3f
10012596:	1c19      	adds	r1, r3, #0
10012598:	3501      	adds	r5, #1
1001259a:	4391      	bics	r1, r2
1001259c:	29c0      	cmp	r1, #192	; 0xc0
1001259e:	d003      	beq.n	100125a8 <gapm_cmp_evt+0xac>
100125a0:	065b      	lsls	r3, r3, #25
100125a2:	0fdb      	lsrs	r3, r3, #31
100125a4:	3502      	adds	r5, #2
100125a6:	1aed      	subs	r5, r5, r3
100125a8:	2301      	movs	r3, #1
100125aa:	425b      	negs	r3, r3
100125ac:	7025      	strb	r5, [r4, #0]
100125ae:	85b3      	strh	r3, [r6, #44]	; 0x2c
100125b0:	e038      	b.n	10012624 <gapm_cmp_evt+0x128>
100125b2:	700d      	strb	r5, [r1, #0]
100125b4:	e004      	b.n	100125c0 <gapm_cmp_evt+0xc4>
100125b6:	2300      	movs	r3, #0
100125b8:	2d45      	cmp	r5, #69	; 0x45
100125ba:	d000      	beq.n	100125be <gapm_cmp_evt+0xc2>
100125bc:	1c2b      	adds	r3, r5, #0
100125be:	7023      	strb	r3, [r4, #0]
100125c0:	2003      	movs	r0, #3
100125c2:	e032      	b.n	1001262a <gapm_cmp_evt+0x12e>
100125c4:	4e1b      	ldr	r6, [pc, #108]	; (10012634 <gapm_cmp_evt+0x138>)
100125c6:	2100      	movs	r1, #0
100125c8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100125ca:	4b1b      	ldr	r3, [pc, #108]	; (10012638 <gapm_cmp_evt+0x13c>)
100125cc:	4798      	blx	r3
100125ce:	2807      	cmp	r0, #7
100125d0:	d818      	bhi.n	10012604 <gapm_cmp_evt+0x108>
100125d2:	2301      	movs	r3, #1
100125d4:	425b      	negs	r3, r3
100125d6:	85b3      	strh	r3, [r6, #44]	; 0x2c
100125d8:	3313      	adds	r3, #19
100125da:	4358      	muls	r0, r3
100125dc:	4917      	ldr	r1, [pc, #92]	; (1001263c <gapm_cmp_evt+0x140>)
100125de:	1809      	adds	r1, r1, r0
100125e0:	1c0b      	adds	r3, r1, #0
100125e2:	894a      	ldrh	r2, [r1, #10]
100125e4:	3308      	adds	r3, #8
100125e6:	8122      	strh	r2, [r4, #8]
100125e8:	784a      	ldrb	r2, [r1, #1]
100125ea:	72a5      	strb	r5, [r4, #10]
100125ec:	7022      	strb	r2, [r4, #0]
100125ee:	898a      	ldrh	r2, [r1, #12]
100125f0:	1c60      	adds	r0, r4, #1
100125f2:	81a2      	strh	r2, [r4, #12]
100125f4:	88db      	ldrh	r3, [r3, #6]
100125f6:	3102      	adds	r1, #2
100125f8:	81e3      	strh	r3, [r4, #14]
100125fa:	89cb      	ldrh	r3, [r1, #14]
100125fc:	2206      	movs	r2, #6
100125fe:	8223      	strh	r3, [r4, #16]
10012600:	4b0f      	ldr	r3, [pc, #60]	; (10012640 <gapm_cmp_evt+0x144>)
10012602:	4798      	blx	r3
10012604:	2200      	movs	r2, #0
10012606:	7823      	ldrb	r3, [r4, #0]
10012608:	4293      	cmp	r3, r2
1001260a:	d00a      	beq.n	10012622 <gapm_cmp_evt+0x126>
1001260c:	79a3      	ldrb	r3, [r4, #6]
1001260e:	323f      	adds	r2, #63	; 0x3f
10012610:	1c19      	adds	r1, r3, #0
10012612:	4391      	bics	r1, r2
10012614:	3a3e      	subs	r2, #62	; 0x3e
10012616:	29c0      	cmp	r1, #192	; 0xc0
10012618:	d003      	beq.n	10012622 <gapm_cmp_evt+0x126>
1001261a:	065b      	lsls	r3, r3, #25
1001261c:	0fdb      	lsrs	r3, r3, #31
1001261e:	3202      	adds	r2, #2
10012620:	1ad2      	subs	r2, r2, r3
10012622:	7022      	strb	r2, [r4, #0]
10012624:	2005      	movs	r0, #5
10012626:	e000      	b.n	1001262a <gapm_cmp_evt+0x12e>
10012628:	2000      	movs	r0, #0
1001262a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001262c:	100150e9 	.word	0x100150e9
10012630:	1001184d 	.word	0x1001184d
10012634:	1001aea6 	.word	0x1001aea6
10012638:	10011811 	.word	0x10011811
1001263c:	1001ae16 	.word	0x1001ae16
10012640:	100150d7 	.word	0x100150d7

10012644 <gapm_start_adv_cmd_handler>:
10012644:	b5f0      	push	{r4, r5, r6, r7, lr}
10012646:	b089      	sub	sp, #36	; 0x24
10012648:	9303      	str	r3, [sp, #12]
1001264a:	ab0e      	add	r3, sp, #56	; 0x38
1001264c:	9102      	str	r1, [sp, #8]
1001264e:	cb02      	ldmia	r3!, {r1}
10012650:	aa08      	add	r2, sp, #32
10012652:	881b      	ldrh	r3, [r3, #0]
10012654:	4e3c      	ldr	r6, [pc, #240]	; (10012748 <gapm_start_adv_cmd_handler+0x104>)
10012656:	9300      	str	r3, [sp, #0]
10012658:	ab10      	add	r3, sp, #64	; 0x40
1001265a:	881b      	ldrh	r3, [r3, #0]
1001265c:	240d      	movs	r4, #13
1001265e:	469c      	mov	ip, r3
10012660:	ab11      	add	r3, sp, #68	; 0x44
10012662:	781b      	ldrb	r3, [r3, #0]
10012664:	9304      	str	r3, [sp, #16]
10012666:	ab12      	add	r3, sp, #72	; 0x48
10012668:	781b      	ldrb	r3, [r3, #0]
1001266a:	9305      	str	r3, [sp, #20]
1001266c:	ab13      	add	r3, sp, #76	; 0x4c
1001266e:	781b      	ldrb	r3, [r3, #0]
10012670:	9306      	str	r3, [sp, #24]
10012672:	ab14      	add	r3, sp, #80	; 0x50
10012674:	781b      	ldrb	r3, [r3, #0]
10012676:	9301      	str	r3, [sp, #4]
10012678:	2319      	movs	r3, #25
1001267a:	189b      	adds	r3, r3, r2
1001267c:	7fdd      	ldrb	r5, [r3, #31]
1001267e:	ab18      	add	r3, sp, #96	; 0x60
10012680:	881f      	ldrh	r7, [r3, #0]
10012682:	ab19      	add	r3, sp, #100	; 0x64
10012684:	781b      	ldrb	r3, [r3, #0]
10012686:	8832      	ldrh	r2, [r6, #0]
10012688:	9307      	str	r3, [sp, #28]
1001268a:	4b30      	ldr	r3, [pc, #192]	; (1001274c <gapm_start_adv_cmd_handler+0x108>)
1001268c:	8836      	ldrh	r6, [r6, #0]
1001268e:	711a      	strb	r2, [r3, #4]
10012690:	466a      	mov	r2, sp
10012692:	7a12      	ldrb	r2, [r2, #8]
10012694:	701c      	strb	r4, [r3, #0]
10012696:	705c      	strb	r4, [r3, #1]
10012698:	709c      	strb	r4, [r3, #2]
1001269a:	725a      	strb	r2, [r3, #9]
1001269c:	2400      	movs	r4, #0
1001269e:	466a      	mov	r2, sp
100126a0:	0a36      	lsrs	r6, r6, #8
100126a2:	70dc      	strb	r4, [r3, #3]
100126a4:	7218      	strb	r0, [r3, #8]
100126a6:	729c      	strb	r4, [r3, #10]
100126a8:	715e      	strb	r6, [r3, #5]
100126aa:	72dc      	strb	r4, [r3, #11]
100126ac:	7812      	ldrb	r2, [r2, #0]
100126ae:	380e      	subs	r0, #14
100126b0:	731a      	strb	r2, [r3, #12]
100126b2:	9a00      	ldr	r2, [sp, #0]
100126b4:	0a14      	lsrs	r4, r2, #8
100126b6:	4662      	mov	r2, ip
100126b8:	739a      	strb	r2, [r3, #14]
100126ba:	4662      	mov	r2, ip
100126bc:	735c      	strb	r4, [r3, #13]
100126be:	0a14      	lsrs	r4, r2, #8
100126c0:	466a      	mov	r2, sp
100126c2:	7c12      	ldrb	r2, [r2, #16]
100126c4:	73dc      	strb	r4, [r3, #15]
100126c6:	741a      	strb	r2, [r3, #16]
100126c8:	1c1c      	adds	r4, r3, #0
100126ca:	2801      	cmp	r0, #1
100126cc:	d809      	bhi.n	100126e2 <gapm_start_adv_cmd_handler+0x9e>
100126ce:	2900      	cmp	r1, #0
100126d0:	d003      	beq.n	100126da <gapm_start_adv_cmd_handler+0x96>
100126d2:	481f      	ldr	r0, [pc, #124]	; (10012750 <gapm_start_adv_cmd_handler+0x10c>)
100126d4:	2206      	movs	r2, #6
100126d6:	4b1f      	ldr	r3, [pc, #124]	; (10012754 <gapm_start_adv_cmd_handler+0x110>)
100126d8:	4798      	blx	r3
100126da:	466b      	mov	r3, sp
100126dc:	7b1b      	ldrb	r3, [r3, #12]
100126de:	75e3      	strb	r3, [r4, #23]
100126e0:	e014      	b.n	1001270c <gapm_start_adv_cmd_handler+0xc8>
100126e2:	466b      	mov	r3, sp
100126e4:	7d1b      	ldrb	r3, [r3, #20]
100126e6:	9915      	ldr	r1, [sp, #84]	; 0x54
100126e8:	7463      	strb	r3, [r4, #17]
100126ea:	466b      	mov	r3, sp
100126ec:	7e1b      	ldrb	r3, [r3, #24]
100126ee:	9a01      	ldr	r2, [sp, #4]
100126f0:	74a3      	strb	r3, [r4, #18]
100126f2:	466b      	mov	r3, sp
100126f4:	791b      	ldrb	r3, [r3, #4]
100126f6:	4818      	ldr	r0, [pc, #96]	; (10012758 <gapm_start_adv_cmd_handler+0x114>)
100126f8:	4e16      	ldr	r6, [pc, #88]	; (10012754 <gapm_start_adv_cmd_handler+0x110>)
100126fa:	74e3      	strb	r3, [r4, #19]
100126fc:	47b0      	blx	r6
100126fe:	1c23      	adds	r3, r4, #0
10012700:	4816      	ldr	r0, [pc, #88]	; (1001275c <gapm_start_adv_cmd_handler+0x118>)
10012702:	3330      	adds	r3, #48	; 0x30
10012704:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012706:	1c2a      	adds	r2, r5, #0
10012708:	701d      	strb	r5, [r3, #0]
1001270a:	47b0      	blx	r6
1001270c:	1c22      	adds	r2, r4, #0
1001270e:	23a5      	movs	r3, #165	; 0xa5
10012710:	3250      	adds	r2, #80	; 0x50
10012712:	7013      	strb	r3, [r2, #0]
10012714:	1c22      	adds	r2, r4, #0
10012716:	3251      	adds	r2, #81	; 0x51
10012718:	7013      	strb	r3, [r2, #0]
1001271a:	1c23      	adds	r3, r4, #0
1001271c:	1c22      	adds	r2, r4, #0
1001271e:	3352      	adds	r3, #82	; 0x52
10012720:	701f      	strb	r7, [r3, #0]
10012722:	3253      	adds	r2, #83	; 0x53
10012724:	0a3b      	lsrs	r3, r7, #8
10012726:	7013      	strb	r3, [r2, #0]
10012728:	466a      	mov	r2, sp
1001272a:	1c23      	adds	r3, r4, #0
1001272c:	7f12      	ldrb	r2, [r2, #28]
1001272e:	3354      	adds	r3, #84	; 0x54
10012730:	701a      	strb	r2, [r3, #0]
10012732:	234d      	movs	r3, #77	; 0x4d
10012734:	2500      	movs	r5, #0
10012736:	71a3      	strb	r3, [r4, #6]
10012738:	1c20      	adds	r0, r4, #0
1001273a:	2155      	movs	r1, #85	; 0x55
1001273c:	4b08      	ldr	r3, [pc, #32]	; (10012760 <gapm_start_adv_cmd_handler+0x11c>)
1001273e:	71e5      	strb	r5, [r4, #7]
10012740:	4798      	blx	r3
10012742:	1c28      	adds	r0, r5, #0
10012744:	b009      	add	sp, #36	; 0x24
10012746:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012748:	1001ae14 	.word	0x1001ae14
1001274c:	1001b184 	.word	0x1001b184
10012750:	1001b195 	.word	0x1001b195
10012754:	100150d7 	.word	0x100150d7
10012758:	1001b198 	.word	0x1001b198
1001275c:	1001b1b5 	.word	0x1001b1b5
10012760:	10011641 	.word	0x10011641

10012764 <get_gap_local_addr_type>:
10012764:	4b04      	ldr	r3, [pc, #16]	; (10012778 <get_gap_local_addr_type+0x14>)
10012766:	2001      	movs	r0, #1
10012768:	791b      	ldrb	r3, [r3, #4]
1001276a:	2b02      	cmp	r3, #2
1001276c:	d003      	beq.n	10012776 <get_gap_local_addr_type+0x12>
1001276e:	3b03      	subs	r3, #3
10012770:	4258      	negs	r0, r3
10012772:	4158      	adcs	r0, r3
10012774:	0040      	lsls	r0, r0, #1
10012776:	4770      	bx	lr
10012778:	1001aea6 	.word	0x1001aea6

1001277c <gapm_adv_report_evt_handler>:
1001277c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001277e:	7843      	ldrb	r3, [r0, #1]
10012780:	1c05      	adds	r5, r0, #0
10012782:	9301      	str	r3, [sp, #4]
10012784:	466b      	mov	r3, sp
10012786:	1c0c      	adds	r4, r1, #0
10012788:	791b      	ldrb	r3, [r3, #4]
1001278a:	7806      	ldrb	r6, [r0, #0]
1001278c:	2206      	movs	r2, #6
1001278e:	704b      	strb	r3, [r1, #1]
10012790:	1c88      	adds	r0, r1, #2
10012792:	4f1b      	ldr	r7, [pc, #108]	; (10012800 <gapm_adv_report_evt_handler+0x84>)
10012794:	1ca9      	adds	r1, r5, #2
10012796:	47b8      	blx	r7
10012798:	1c20      	adds	r0, r4, #0
1001279a:	1c29      	adds	r1, r5, #0
1001279c:	7a2a      	ldrb	r2, [r5, #8]
1001279e:	3008      	adds	r0, #8
100127a0:	77c2      	strb	r2, [r0, #31]
100127a2:	3109      	adds	r1, #9
100127a4:	3528      	adds	r5, #40	; 0x28
100127a6:	47b8      	blx	r7
100127a8:	782b      	ldrb	r3, [r5, #0]
100127aa:	b25a      	sxtb	r2, r3
100127ac:	2a00      	cmp	r2, #0
100127ae:	da01      	bge.n	100127b4 <gapm_adv_report_evt_handler+0x38>
100127b0:	3301      	adds	r3, #1
100127b2:	b2db      	uxtb	r3, r3
100127b4:	1c22      	adds	r2, r4, #0
100127b6:	3228      	adds	r2, #40	; 0x28
100127b8:	7013      	strb	r3, [r2, #0]
100127ba:	2200      	movs	r2, #0
100127bc:	9b01      	ldr	r3, [sp, #4]
100127be:	4293      	cmp	r3, r2
100127c0:	d00a      	beq.n	100127d8 <gapm_adv_report_evt_handler+0x5c>
100127c2:	79e3      	ldrb	r3, [r4, #7]
100127c4:	323f      	adds	r2, #63	; 0x3f
100127c6:	1c19      	adds	r1, r3, #0
100127c8:	4391      	bics	r1, r2
100127ca:	3a3e      	subs	r2, #62	; 0x3e
100127cc:	29c0      	cmp	r1, #192	; 0xc0
100127ce:	d003      	beq.n	100127d8 <gapm_adv_report_evt_handler+0x5c>
100127d0:	065b      	lsls	r3, r3, #25
100127d2:	0fdb      	lsrs	r3, r3, #31
100127d4:	3202      	adds	r2, #2
100127d6:	1ad2      	subs	r2, r2, r3
100127d8:	7062      	strb	r2, [r4, #1]
100127da:	2e04      	cmp	r6, #4
100127dc:	d80f      	bhi.n	100127fe <gapm_adv_report_evt_handler+0x82>
100127de:	1c30      	adds	r0, r6, #0
100127e0:	f000 fbf6 	bl	10012fd0 <__gnu_thumb1_case_uqi>
100127e4:	09070503 	.word	0x09070503
100127e8:	0b          	.byte	0x0b
100127e9:	00          	.byte	0x00
100127ea:	2300      	movs	r3, #0
100127ec:	e006      	b.n	100127fc <gapm_adv_report_evt_handler+0x80>
100127ee:	2301      	movs	r3, #1
100127f0:	e004      	b.n	100127fc <gapm_adv_report_evt_handler+0x80>
100127f2:	2302      	movs	r3, #2
100127f4:	e002      	b.n	100127fc <gapm_adv_report_evt_handler+0x80>
100127f6:	2303      	movs	r3, #3
100127f8:	e000      	b.n	100127fc <gapm_adv_report_evt_handler+0x80>
100127fa:	2305      	movs	r3, #5
100127fc:	7023      	strb	r3, [r4, #0]
100127fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012800:	100150d7 	.word	0x100150d7

10012804 <gapm_resolv_addr_cmd_handler>:
10012804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012806:	2314      	movs	r3, #20
10012808:	4c12      	ldr	r4, [pc, #72]	; (10012854 <gapm_resolv_addr_cmd_handler+0x50>)
1001280a:	1c17      	adds	r7, r2, #0
1001280c:	7023      	strb	r3, [r4, #0]
1001280e:	3b07      	subs	r3, #7
10012810:	7063      	strb	r3, [r4, #1]
10012812:	70a3      	strb	r3, [r4, #2]
10012814:	2300      	movs	r3, #0
10012816:	70e3      	strb	r3, [r4, #3]
10012818:	4b0f      	ldr	r3, [pc, #60]	; (10012858 <gapm_resolv_addr_cmd_handler+0x54>)
1001281a:	1c05      	adds	r5, r0, #0
1001281c:	881a      	ldrh	r2, [r3, #0]
1001281e:	881b      	ldrh	r3, [r3, #0]
10012820:	4e0e      	ldr	r6, [pc, #56]	; (1001285c <gapm_resolv_addr_cmd_handler+0x58>)
10012822:	0a1b      	lsrs	r3, r3, #8
10012824:	7163      	strb	r3, [r4, #5]
10012826:	2317      	movs	r3, #23
10012828:	012d      	lsls	r5, r5, #4
1001282a:	7122      	strb	r2, [r4, #4]
1001282c:	7260      	strb	r0, [r4, #9]
1001282e:	2206      	movs	r2, #6
10012830:	480b      	ldr	r0, [pc, #44]	; (10012860 <gapm_resolv_addr_cmd_handler+0x5c>)
10012832:	7223      	strb	r3, [r4, #8]
10012834:	47b0      	blx	r6
10012836:	1c39      	adds	r1, r7, #0
10012838:	1c2a      	adds	r2, r5, #0
1001283a:	480a      	ldr	r0, [pc, #40]	; (10012864 <gapm_resolv_addr_cmd_handler+0x60>)
1001283c:	47b0      	blx	r6
1001283e:	1c29      	adds	r1, r5, #0
10012840:	3110      	adds	r1, #16
10012842:	1c0b      	adds	r3, r1, #0
10012844:	3b08      	subs	r3, #8
10012846:	71a3      	strb	r3, [r4, #6]
10012848:	121b      	asrs	r3, r3, #8
1001284a:	71e3      	strb	r3, [r4, #7]
1001284c:	1c20      	adds	r0, r4, #0
1001284e:	4b06      	ldr	r3, [pc, #24]	; (10012868 <gapm_resolv_addr_cmd_handler+0x64>)
10012850:	4798      	blx	r3
10012852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012854:	1001b184 	.word	0x1001b184
10012858:	1001ae14 	.word	0x1001ae14
1001285c:	100150d7 	.word	0x100150d7
10012860:	1001b18e 	.word	0x1001b18e
10012864:	1001b194 	.word	0x1001b194
10012868:	10011641 	.word	0x10011641

1001286c <gapm_addr_solved_ind_handler>:
1001286c:	b570      	push	{r4, r5, r6, lr}
1001286e:	1c04      	adds	r4, r0, #0
10012870:	1c08      	adds	r0, r1, #0
10012872:	1c0d      	adds	r5, r1, #0
10012874:	4e05      	ldr	r6, [pc, #20]	; (1001288c <gapm_addr_solved_ind_handler+0x20>)
10012876:	1c21      	adds	r1, r4, #0
10012878:	2206      	movs	r2, #6
1001287a:	3011      	adds	r0, #17
1001287c:	47b0      	blx	r6
1001287e:	1c68      	adds	r0, r5, #1
10012880:	1da1      	adds	r1, r4, #6
10012882:	2210      	movs	r2, #16
10012884:	47b0      	blx	r6
10012886:	2300      	movs	r3, #0
10012888:	702b      	strb	r3, [r5, #0]
1001288a:	bd70      	pop	{r4, r5, r6, pc}
1001288c:	100150d7 	.word	0x100150d7

10012890 <gapm_profile_added_ind_handler>:
10012890:	b510      	push	{r4, lr}
10012892:	7843      	ldrb	r3, [r0, #1]
10012894:	7902      	ldrb	r2, [r0, #4]
10012896:	7944      	ldrb	r4, [r0, #5]
10012898:	7800      	ldrb	r0, [r0, #0]
1001289a:	021b      	lsls	r3, r3, #8
1001289c:	4303      	orrs	r3, r0
1001289e:	2b1b      	cmp	r3, #27
100128a0:	d104      	bne.n	100128ac <gapm_profile_added_ind_handler+0x1c>
100128a2:	2300      	movs	r3, #0
100128a4:	700b      	strb	r3, [r1, #0]
100128a6:	0223      	lsls	r3, r4, #8
100128a8:	4313      	orrs	r3, r2
100128aa:	804b      	strh	r3, [r1, #2]
100128ac:	203b      	movs	r0, #59	; 0x3b
100128ae:	bd10      	pop	{r4, pc}

100128b0 <gattc_read_req_ind_parser>:
100128b0:	7843      	ldrb	r3, [r0, #1]
100128b2:	7802      	ldrb	r2, [r0, #0]
100128b4:	021b      	lsls	r3, r3, #8
100128b6:	4313      	orrs	r3, r2
100128b8:	804b      	strh	r3, [r1, #2]
100128ba:	4770      	bx	lr

100128bc <gattc_write_req_ind_parser>:
100128bc:	b508      	push	{r3, lr}
100128be:	1c13      	adds	r3, r2, #0
100128c0:	0a00      	lsrs	r0, r0, #8
100128c2:	8010      	strh	r0, [r2, #0]
100128c4:	784a      	ldrb	r2, [r1, #1]
100128c6:	7808      	ldrb	r0, [r1, #0]
100128c8:	0212      	lsls	r2, r2, #8
100128ca:	4302      	orrs	r2, r0
100128cc:	805a      	strh	r2, [r3, #2]
100128ce:	78ca      	ldrb	r2, [r1, #3]
100128d0:	7888      	ldrb	r0, [r1, #2]
100128d2:	0212      	lsls	r2, r2, #8
100128d4:	4302      	orrs	r2, r0
100128d6:	809a      	strh	r2, [r3, #4]
100128d8:	794a      	ldrb	r2, [r1, #5]
100128da:	7908      	ldrb	r0, [r1, #4]
100128dc:	0212      	lsls	r2, r2, #8
100128de:	4302      	orrs	r2, r0
100128e0:	80da      	strh	r2, [r3, #6]
100128e2:	3308      	adds	r3, #8
100128e4:	1c18      	adds	r0, r3, #0
100128e6:	3106      	adds	r1, #6
100128e8:	4b01      	ldr	r3, [pc, #4]	; (100128f0 <gattc_write_req_ind_parser+0x34>)
100128ea:	4798      	blx	r3
100128ec:	bd08      	pop	{r3, pc}
100128ee:	46c0      	nop			; (mov r8, r8)
100128f0:	100150d7 	.word	0x100150d7

100128f4 <gattc_att_info_req_parser>:
100128f4:	7843      	ldrb	r3, [r0, #1]
100128f6:	7802      	ldrb	r2, [r0, #0]
100128f8:	021b      	lsls	r3, r3, #8
100128fa:	4313      	orrs	r3, r2
100128fc:	800b      	strh	r3, [r1, #0]
100128fe:	4770      	bx	lr

10012900 <gattc_read_cfm>:
10012900:	b538      	push	{r3, r4, r5, lr}
10012902:	2514      	movs	r5, #20
10012904:	1c1c      	adds	r4, r3, #0
10012906:	4b14      	ldr	r3, [pc, #80]	; (10012958 <gattc_read_cfm+0x58>)
10012908:	70d9      	strb	r1, [r3, #3]
1001290a:	4914      	ldr	r1, [pc, #80]	; (1001295c <gattc_read_cfm+0x5c>)
1001290c:	701d      	strb	r5, [r3, #0]
1001290e:	3d08      	subs	r5, #8
10012910:	705d      	strb	r5, [r3, #1]
10012912:	709d      	strb	r5, [r3, #2]
10012914:	880d      	ldrh	r5, [r1, #0]
10012916:	8809      	ldrh	r1, [r1, #0]
10012918:	7218      	strb	r0, [r3, #8]
1001291a:	0a09      	lsrs	r1, r1, #8
1001291c:	7159      	strb	r1, [r3, #5]
1001291e:	0a00      	lsrs	r0, r0, #8
10012920:	0a21      	lsrs	r1, r4, #8
10012922:	711d      	strb	r5, [r3, #4]
10012924:	7258      	strb	r0, [r3, #9]
10012926:	729c      	strb	r4, [r3, #10]
10012928:	72d9      	strb	r1, [r3, #11]
1001292a:	731a      	strb	r2, [r3, #12]
1001292c:	1c1d      	adds	r5, r3, #0
1001292e:	2c00      	cmp	r4, #0
10012930:	d007      	beq.n	10012942 <gattc_read_cfm+0x42>
10012932:	9904      	ldr	r1, [sp, #16]
10012934:	1c22      	adds	r2, r4, #0
10012936:	480a      	ldr	r0, [pc, #40]	; (10012960 <gattc_read_cfm+0x60>)
10012938:	4b0a      	ldr	r3, [pc, #40]	; (10012964 <gattc_read_cfm+0x64>)
1001293a:	340d      	adds	r4, #13
1001293c:	4798      	blx	r3
1001293e:	b2a1      	uxth	r1, r4
10012940:	e001      	b.n	10012946 <gattc_read_cfm+0x46>
10012942:	210e      	movs	r1, #14
10012944:	735c      	strb	r4, [r3, #13]
10012946:	1c0b      	adds	r3, r1, #0
10012948:	3b08      	subs	r3, #8
1001294a:	71ab      	strb	r3, [r5, #6]
1001294c:	121b      	asrs	r3, r3, #8
1001294e:	71eb      	strb	r3, [r5, #7]
10012950:	1c28      	adds	r0, r5, #0
10012952:	4b05      	ldr	r3, [pc, #20]	; (10012968 <gattc_read_cfm+0x68>)
10012954:	4798      	blx	r3
10012956:	bd38      	pop	{r3, r4, r5, pc}
10012958:	1001b184 	.word	0x1001b184
1001295c:	1001ae14 	.word	0x1001ae14
10012960:	1001b191 	.word	0x1001b191
10012964:	100150d7 	.word	0x100150d7
10012968:	10011641 	.word	0x10011641

1001296c <gattc_write_cfm>:
1001296c:	4b0d      	ldr	r3, [pc, #52]	; (100129a4 <gattc_write_cfm+0x38>)
1001296e:	b510      	push	{r4, lr}
10012970:	729a      	strb	r2, [r3, #10]
10012972:	2203      	movs	r2, #3
10012974:	2416      	movs	r4, #22
10012976:	719a      	strb	r2, [r3, #6]
10012978:	2200      	movs	r2, #0
1001297a:	70d9      	strb	r1, [r3, #3]
1001297c:	490a      	ldr	r1, [pc, #40]	; (100129a8 <gattc_write_cfm+0x3c>)
1001297e:	701c      	strb	r4, [r3, #0]
10012980:	3c0a      	subs	r4, #10
10012982:	705c      	strb	r4, [r3, #1]
10012984:	709c      	strb	r4, [r3, #2]
10012986:	880c      	ldrh	r4, [r1, #0]
10012988:	8809      	ldrh	r1, [r1, #0]
1001298a:	7218      	strb	r0, [r3, #8]
1001298c:	0a09      	lsrs	r1, r1, #8
1001298e:	0a00      	lsrs	r0, r0, #8
10012990:	711c      	strb	r4, [r3, #4]
10012992:	7159      	strb	r1, [r3, #5]
10012994:	7258      	strb	r0, [r3, #9]
10012996:	71da      	strb	r2, [r3, #7]
10012998:	1c18      	adds	r0, r3, #0
1001299a:	210b      	movs	r1, #11
1001299c:	4b03      	ldr	r3, [pc, #12]	; (100129ac <gattc_write_cfm+0x40>)
1001299e:	4798      	blx	r3
100129a0:	bd10      	pop	{r4, pc}
100129a2:	46c0      	nop			; (mov r8, r8)
100129a4:	1001b184 	.word	0x1001b184
100129a8:	1001ae14 	.word	0x1001ae14
100129ac:	10011641 	.word	0x10011641

100129b0 <gattc_att_info_cfm>:
100129b0:	b538      	push	{r3, r4, r5, lr}
100129b2:	4c0e      	ldr	r4, [pc, #56]	; (100129ec <gattc_att_info_cfm+0x3c>)
100129b4:	2518      	movs	r5, #24
100129b6:	7323      	strb	r3, [r4, #12]
100129b8:	2305      	movs	r3, #5
100129ba:	71a3      	strb	r3, [r4, #6]
100129bc:	2300      	movs	r3, #0
100129be:	70e1      	strb	r1, [r4, #3]
100129c0:	490b      	ldr	r1, [pc, #44]	; (100129f0 <gattc_att_info_cfm+0x40>)
100129c2:	7025      	strb	r5, [r4, #0]
100129c4:	3d0c      	subs	r5, #12
100129c6:	7065      	strb	r5, [r4, #1]
100129c8:	70a5      	strb	r5, [r4, #2]
100129ca:	880d      	ldrh	r5, [r1, #0]
100129cc:	8809      	ldrh	r1, [r1, #0]
100129ce:	7220      	strb	r0, [r4, #8]
100129d0:	0a09      	lsrs	r1, r1, #8
100129d2:	0a00      	lsrs	r0, r0, #8
100129d4:	7161      	strb	r1, [r4, #5]
100129d6:	7260      	strb	r0, [r4, #9]
100129d8:	72a2      	strb	r2, [r4, #10]
100129da:	71e3      	strb	r3, [r4, #7]
100129dc:	0a12      	lsrs	r2, r2, #8
100129de:	1c20      	adds	r0, r4, #0
100129e0:	210d      	movs	r1, #13
100129e2:	4b04      	ldr	r3, [pc, #16]	; (100129f4 <gattc_att_info_cfm+0x44>)
100129e4:	7125      	strb	r5, [r4, #4]
100129e6:	72e2      	strb	r2, [r4, #11]
100129e8:	4798      	blx	r3
100129ea:	bd38      	pop	{r3, r4, r5, pc}
100129ec:	1001b184 	.word	0x1001b184
100129f0:	1001ae14 	.word	0x1001ae14
100129f4:	10011641 	.word	0x10011641

100129f8 <gattc_send_evt_cmd_handler>:
100129f8:	b570      	push	{r4, r5, r6, lr}
100129fa:	2610      	movs	r6, #16
100129fc:	ac04      	add	r4, sp, #16
100129fe:	8825      	ldrh	r5, [r4, #0]
10012a00:	4c15      	ldr	r4, [pc, #84]	; (10012a58 <gattc_send_evt_cmd_handler+0x60>)
10012a02:	70e2      	strb	r2, [r4, #3]
10012a04:	4a15      	ldr	r2, [pc, #84]	; (10012a5c <gattc_send_evt_cmd_handler+0x64>)
10012a06:	7026      	strb	r6, [r4, #0]
10012a08:	3e04      	subs	r6, #4
10012a0a:	7066      	strb	r6, [r4, #1]
10012a0c:	70a6      	strb	r6, [r4, #2]
10012a0e:	8816      	ldrh	r6, [r2, #0]
10012a10:	8812      	ldrh	r2, [r2, #0]
10012a12:	7220      	strb	r0, [r4, #8]
10012a14:	0a12      	lsrs	r2, r2, #8
10012a16:	7162      	strb	r2, [r4, #5]
10012a18:	4a11      	ldr	r2, [pc, #68]	; (10012a60 <gattc_send_evt_cmd_handler+0x68>)
10012a1a:	7321      	strb	r1, [r4, #12]
10012a1c:	8812      	ldrh	r2, [r2, #0]
10012a1e:	73a5      	strb	r5, [r4, #14]
10012a20:	3201      	adds	r2, #1
10012a22:	7262      	strb	r2, [r4, #9]
10012a24:	1212      	asrs	r2, r2, #8
10012a26:	72a2      	strb	r2, [r4, #10]
10012a28:	2200      	movs	r2, #0
10012a2a:	72e2      	strb	r2, [r4, #11]
10012a2c:	0a0a      	lsrs	r2, r1, #8
10012a2e:	7362      	strb	r2, [r4, #13]
10012a30:	0a2a      	lsrs	r2, r5, #8
10012a32:	73e2      	strb	r2, [r4, #15]
10012a34:	1c19      	adds	r1, r3, #0
10012a36:	1c2a      	adds	r2, r5, #0
10012a38:	4b0a      	ldr	r3, [pc, #40]	; (10012a64 <gattc_send_evt_cmd_handler+0x6c>)
10012a3a:	3510      	adds	r5, #16
10012a3c:	480a      	ldr	r0, [pc, #40]	; (10012a68 <gattc_send_evt_cmd_handler+0x70>)
10012a3e:	7126      	strb	r6, [r4, #4]
10012a40:	4798      	blx	r3
10012a42:	b2a9      	uxth	r1, r5
10012a44:	1c0b      	adds	r3, r1, #0
10012a46:	3b08      	subs	r3, #8
10012a48:	71a3      	strb	r3, [r4, #6]
10012a4a:	121b      	asrs	r3, r3, #8
10012a4c:	71e3      	strb	r3, [r4, #7]
10012a4e:	1c20      	adds	r0, r4, #0
10012a50:	4b06      	ldr	r3, [pc, #24]	; (10012a6c <gattc_send_evt_cmd_handler+0x74>)
10012a52:	4798      	blx	r3
10012a54:	bd70      	pop	{r4, r5, r6, pc}
10012a56:	46c0      	nop			; (mov r8, r8)
10012a58:	1001b184 	.word	0x1001b184
10012a5c:	1001ae14 	.word	0x1001ae14
10012a60:	10019fac 	.word	0x10019fac
10012a64:	100150d7 	.word	0x100150d7
10012a68:	1001b194 	.word	0x1001b194
10012a6c:	10011641 	.word	0x10011641

10012a70 <gattc_event_cfm_handler>:
10012a70:	220e      	movs	r2, #14
10012a72:	b508      	push	{r3, lr}
10012a74:	4b0b      	ldr	r3, [pc, #44]	; (10012aa4 <gattc_event_cfm_handler+0x34>)
10012a76:	701a      	strb	r2, [r3, #0]
10012a78:	3a02      	subs	r2, #2
10012a7a:	705a      	strb	r2, [r3, #1]
10012a7c:	709a      	strb	r2, [r3, #2]
10012a7e:	4a0a      	ldr	r2, [pc, #40]	; (10012aa8 <gattc_event_cfm_handler+0x38>)
10012a80:	70d8      	strb	r0, [r3, #3]
10012a82:	8810      	ldrh	r0, [r2, #0]
10012a84:	8812      	ldrh	r2, [r2, #0]
10012a86:	7219      	strb	r1, [r3, #8]
10012a88:	0a12      	lsrs	r2, r2, #8
10012a8a:	715a      	strb	r2, [r3, #5]
10012a8c:	2202      	movs	r2, #2
10012a8e:	719a      	strb	r2, [r3, #6]
10012a90:	2200      	movs	r2, #0
10012a92:	0a09      	lsrs	r1, r1, #8
10012a94:	7118      	strb	r0, [r3, #4]
10012a96:	7259      	strb	r1, [r3, #9]
10012a98:	71da      	strb	r2, [r3, #7]
10012a9a:	1c18      	adds	r0, r3, #0
10012a9c:	210a      	movs	r1, #10
10012a9e:	4b03      	ldr	r3, [pc, #12]	; (10012aac <gattc_event_cfm_handler+0x3c>)
10012aa0:	4798      	blx	r3
10012aa2:	bd08      	pop	{r3, pc}
10012aa4:	1001b184 	.word	0x1001b184
10012aa8:	1001ae14 	.word	0x1001ae14
10012aac:	10011641 	.word	0x10011641

10012ab0 <gattc_disc_svc_ind_parser>:
10012ab0:	b570      	push	{r4, r5, r6, lr}
10012ab2:	1c15      	adds	r5, r2, #0
10012ab4:	0a00      	lsrs	r0, r0, #8
10012ab6:	8010      	strh	r0, [r2, #0]
10012ab8:	784b      	ldrb	r3, [r1, #1]
10012aba:	780a      	ldrb	r2, [r1, #0]
10012abc:	021b      	lsls	r3, r3, #8
10012abe:	4313      	orrs	r3, r2
10012ac0:	806b      	strh	r3, [r5, #2]
10012ac2:	78cb      	ldrb	r3, [r1, #3]
10012ac4:	788a      	ldrb	r2, [r1, #2]
10012ac6:	021b      	lsls	r3, r3, #8
10012ac8:	4313      	orrs	r3, r2
10012aca:	80ab      	strh	r3, [r5, #4]
10012acc:	790e      	ldrb	r6, [r1, #4]
10012ace:	4b05      	ldr	r3, [pc, #20]	; (10012ae4 <gattc_disc_svc_ind_parser+0x34>)
10012ad0:	1c30      	adds	r0, r6, #0
10012ad2:	1c0c      	adds	r4, r1, #0
10012ad4:	4798      	blx	r3
10012ad6:	1c32      	adds	r2, r6, #0
10012ad8:	71a8      	strb	r0, [r5, #6]
10012ada:	1d61      	adds	r1, r4, #5
10012adc:	1de8      	adds	r0, r5, #7
10012ade:	4b02      	ldr	r3, [pc, #8]	; (10012ae8 <gattc_disc_svc_ind_parser+0x38>)
10012ae0:	4798      	blx	r3
10012ae2:	bd70      	pop	{r4, r5, r6, pc}
10012ae4:	10010981 	.word	0x10010981
10012ae8:	100150d7 	.word	0x100150d7

10012aec <gattc_disc_svc_incl_ind_parser>:
10012aec:	b570      	push	{r4, r5, r6, lr}
10012aee:	1c15      	adds	r5, r2, #0
10012af0:	0a00      	lsrs	r0, r0, #8
10012af2:	8010      	strh	r0, [r2, #0]
10012af4:	784b      	ldrb	r3, [r1, #1]
10012af6:	780a      	ldrb	r2, [r1, #0]
10012af8:	021b      	lsls	r3, r3, #8
10012afa:	4313      	orrs	r3, r2
10012afc:	806b      	strh	r3, [r5, #2]
10012afe:	78cb      	ldrb	r3, [r1, #3]
10012b00:	788a      	ldrb	r2, [r1, #2]
10012b02:	021b      	lsls	r3, r3, #8
10012b04:	4313      	orrs	r3, r2
10012b06:	80ab      	strh	r3, [r5, #4]
10012b08:	794b      	ldrb	r3, [r1, #5]
10012b0a:	790a      	ldrb	r2, [r1, #4]
10012b0c:	021b      	lsls	r3, r3, #8
10012b0e:	4313      	orrs	r3, r2
10012b10:	80eb      	strh	r3, [r5, #6]
10012b12:	798e      	ldrb	r6, [r1, #6]
10012b14:	4b05      	ldr	r3, [pc, #20]	; (10012b2c <gattc_disc_svc_incl_ind_parser+0x40>)
10012b16:	1c30      	adds	r0, r6, #0
10012b18:	1c0c      	adds	r4, r1, #0
10012b1a:	4798      	blx	r3
10012b1c:	7228      	strb	r0, [r5, #8]
10012b1e:	1c28      	adds	r0, r5, #0
10012b20:	1c32      	adds	r2, r6, #0
10012b22:	1de1      	adds	r1, r4, #7
10012b24:	4b02      	ldr	r3, [pc, #8]	; (10012b30 <gattc_disc_svc_incl_ind_parser+0x44>)
10012b26:	3009      	adds	r0, #9
10012b28:	4798      	blx	r3
10012b2a:	bd70      	pop	{r4, r5, r6, pc}
10012b2c:	10010981 	.word	0x10010981
10012b30:	100150d7 	.word	0x100150d7

10012b34 <gattc_disc_char_ind_parser>:
10012b34:	b570      	push	{r4, r5, r6, lr}
10012b36:	1c15      	adds	r5, r2, #0
10012b38:	0a00      	lsrs	r0, r0, #8
10012b3a:	8010      	strh	r0, [r2, #0]
10012b3c:	784b      	ldrb	r3, [r1, #1]
10012b3e:	780a      	ldrb	r2, [r1, #0]
10012b40:	021b      	lsls	r3, r3, #8
10012b42:	4313      	orrs	r3, r2
10012b44:	806b      	strh	r3, [r5, #2]
10012b46:	78cb      	ldrb	r3, [r1, #3]
10012b48:	788a      	ldrb	r2, [r1, #2]
10012b4a:	021b      	lsls	r3, r3, #8
10012b4c:	4313      	orrs	r3, r2
10012b4e:	80ab      	strh	r3, [r5, #4]
10012b50:	790b      	ldrb	r3, [r1, #4]
10012b52:	1c0c      	adds	r4, r1, #0
10012b54:	71ab      	strb	r3, [r5, #6]
10012b56:	794e      	ldrb	r6, [r1, #5]
10012b58:	4b05      	ldr	r3, [pc, #20]	; (10012b70 <gattc_disc_char_ind_parser+0x3c>)
10012b5a:	1c30      	adds	r0, r6, #0
10012b5c:	4798      	blx	r3
10012b5e:	71e8      	strb	r0, [r5, #7]
10012b60:	1c28      	adds	r0, r5, #0
10012b62:	1c32      	adds	r2, r6, #0
10012b64:	1da1      	adds	r1, r4, #6
10012b66:	4b03      	ldr	r3, [pc, #12]	; (10012b74 <gattc_disc_char_ind_parser+0x40>)
10012b68:	3008      	adds	r0, #8
10012b6a:	4798      	blx	r3
10012b6c:	bd70      	pop	{r4, r5, r6, pc}
10012b6e:	46c0      	nop			; (mov r8, r8)
10012b70:	10010981 	.word	0x10010981
10012b74:	100150d7 	.word	0x100150d7

10012b78 <gattc_disc_char_desc_ind_parser>:
10012b78:	b570      	push	{r4, r5, r6, lr}
10012b7a:	1c15      	adds	r5, r2, #0
10012b7c:	0a00      	lsrs	r0, r0, #8
10012b7e:	8010      	strh	r0, [r2, #0]
10012b80:	784b      	ldrb	r3, [r1, #1]
10012b82:	780a      	ldrb	r2, [r1, #0]
10012b84:	021b      	lsls	r3, r3, #8
10012b86:	4313      	orrs	r3, r2
10012b88:	806b      	strh	r3, [r5, #2]
10012b8a:	788e      	ldrb	r6, [r1, #2]
10012b8c:	4b05      	ldr	r3, [pc, #20]	; (10012ba4 <gattc_disc_char_desc_ind_parser+0x2c>)
10012b8e:	1c30      	adds	r0, r6, #0
10012b90:	1c0c      	adds	r4, r1, #0
10012b92:	4798      	blx	r3
10012b94:	1c32      	adds	r2, r6, #0
10012b96:	7128      	strb	r0, [r5, #4]
10012b98:	1ce1      	adds	r1, r4, #3
10012b9a:	1d68      	adds	r0, r5, #5
10012b9c:	4b02      	ldr	r3, [pc, #8]	; (10012ba8 <gattc_disc_char_desc_ind_parser+0x30>)
10012b9e:	4798      	blx	r3
10012ba0:	bd70      	pop	{r4, r5, r6, pc}
10012ba2:	46c0      	nop			; (mov r8, r8)
10012ba4:	10010981 	.word	0x10010981
10012ba8:	100150d7 	.word	0x100150d7

10012bac <gattc_event_ind_and_notification_parser>:
10012bac:	b510      	push	{r4, lr}
10012bae:	780c      	ldrb	r4, [r1, #0]
10012bb0:	1c13      	adds	r3, r2, #0
10012bb2:	2c12      	cmp	r4, #18
10012bb4:	d10e      	bne.n	10012bd4 <gattc_event_ind_and_notification_parser+0x28>
10012bb6:	0a00      	lsrs	r0, r0, #8
10012bb8:	8010      	strh	r0, [r2, #0]
10012bba:	788a      	ldrb	r2, [r1, #2]
10012bbc:	709a      	strb	r2, [r3, #2]
10012bbe:	7948      	ldrb	r0, [r1, #5]
10012bc0:	790c      	ldrb	r4, [r1, #4]
10012bc2:	0200      	lsls	r0, r0, #8
10012bc4:	4320      	orrs	r0, r4
10012bc6:	8098      	strh	r0, [r3, #4]
10012bc8:	3106      	adds	r1, #6
10012bca:	1d98      	adds	r0, r3, #6
10012bcc:	4b0b      	ldr	r3, [pc, #44]	; (10012bfc <gattc_event_ind_and_notification_parser+0x50>)
10012bce:	4798      	blx	r3
10012bd0:	221b      	movs	r2, #27
10012bd2:	e010      	b.n	10012bf6 <gattc_event_ind_and_notification_parser+0x4a>
10012bd4:	2200      	movs	r2, #0
10012bd6:	2c13      	cmp	r4, #19
10012bd8:	d10d      	bne.n	10012bf6 <gattc_event_ind_and_notification_parser+0x4a>
10012bda:	0a00      	lsrs	r0, r0, #8
10012bdc:	8018      	strh	r0, [r3, #0]
10012bde:	788a      	ldrb	r2, [r1, #2]
10012be0:	709a      	strb	r2, [r3, #2]
10012be2:	7908      	ldrb	r0, [r1, #4]
10012be4:	78cc      	ldrb	r4, [r1, #3]
10012be6:	0200      	lsls	r0, r0, #8
10012be8:	4320      	orrs	r0, r4
10012bea:	8098      	strh	r0, [r3, #4]
10012bec:	3106      	adds	r1, #6
10012bee:	1d98      	adds	r0, r3, #6
10012bf0:	4b02      	ldr	r3, [pc, #8]	; (10012bfc <gattc_event_ind_and_notification_parser+0x50>)
10012bf2:	4798      	blx	r3
10012bf4:	221c      	movs	r2, #28
10012bf6:	1c10      	adds	r0, r2, #0
10012bf8:	bd10      	pop	{r4, pc}
10012bfa:	46c0      	nop			; (mov r8, r8)
10012bfc:	100150d7 	.word	0x100150d7

10012c00 <gattc_complete_evt_handler>:
10012c00:	b500      	push	{lr}
10012c02:	0a00      	lsrs	r0, r0, #8
10012c04:	8010      	strh	r0, [r2, #0]
10012c06:	7808      	ldrb	r0, [r1, #0]
10012c08:	7090      	strb	r0, [r2, #2]
10012c0a:	784b      	ldrb	r3, [r1, #1]
10012c0c:	3801      	subs	r0, #1
10012c0e:	70d3      	strb	r3, [r2, #3]
10012c10:	2813      	cmp	r0, #19
10012c12:	d82c      	bhi.n	10012c6e <gattc_complete_evt_handler+0x6e>
10012c14:	f000 f9dc 	bl	10012fd0 <__gnu_thumb1_case_uqi>
10012c18:	0a0a0a0c 	.word	0x0a0a0a0c
10012c1c:	210a0a0a 	.word	0x210a0a0a
10012c20:	111f2121 	.word	0x111f2121
10012c24:	2b111111 	.word	0x2b111111
10012c28:	2919132b 	.word	0x2919132b
10012c2c:	2017      	movs	r0, #23
10012c2e:	e01f      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c30:	2024      	movs	r0, #36	; 0x24
10012c32:	2b00      	cmp	r3, #0
10012c34:	d11c      	bne.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c36:	3017      	adds	r0, #23
10012c38:	e01a      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c3a:	2025      	movs	r0, #37	; 0x25
10012c3c:	e018      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c3e:	4a0d      	ldr	r2, [pc, #52]	; (10012c74 <gattc_complete_evt_handler+0x74>)
10012c40:	201d      	movs	r0, #29
10012c42:	6813      	ldr	r3, [r2, #0]
10012c44:	3b01      	subs	r3, #1
10012c46:	6013      	str	r3, [r2, #0]
10012c48:	e012      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c4a:	4a0a      	ldr	r2, [pc, #40]	; (10012c74 <gattc_complete_evt_handler+0x74>)
10012c4c:	201e      	movs	r0, #30
10012c4e:	6813      	ldr	r3, [r2, #0]
10012c50:	3b01      	subs	r3, #1
10012c52:	6013      	str	r3, [r2, #0]
10012c54:	e00c      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c56:	2019      	movs	r0, #25
10012c58:	e00a      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c5a:	203b      	movs	r0, #59	; 0x3b
10012c5c:	2b00      	cmp	r3, #0
10012c5e:	d007      	beq.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c60:	2182      	movs	r1, #130	; 0x82
10012c62:	0089      	lsls	r1, r1, #2
10012c64:	5453      	strb	r3, [r2, r1]
10012c66:	3823      	subs	r0, #35	; 0x23
10012c68:	e002      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c6a:	2021      	movs	r0, #33	; 0x21
10012c6c:	e000      	b.n	10012c70 <gattc_complete_evt_handler+0x70>
10012c6e:	2000      	movs	r0, #0
10012c70:	bd00      	pop	{pc}
10012c72:	46c0      	nop			; (mov r8, r8)
10012c74:	10019fb0 	.word	0x10019fb0

10012c78 <gattc_event_mtu_changed_ind_parser>:
10012c78:	0a00      	lsrs	r0, r0, #8
10012c7a:	8010      	strh	r0, [r2, #0]
10012c7c:	784b      	ldrb	r3, [r1, #1]
10012c7e:	7809      	ldrb	r1, [r1, #0]
10012c80:	021b      	lsls	r3, r3, #8
10012c82:	430b      	orrs	r3, r1
10012c84:	8053      	strh	r3, [r2, #2]
10012c86:	4770      	bx	lr

10012c88 <gattc_read_ind_parser>:
10012c88:	0a00      	lsrs	r0, r0, #8
10012c8a:	b508      	push	{r3, lr}
10012c8c:	8010      	strh	r0, [r2, #0]
10012c8e:	1c13      	adds	r3, r2, #0
10012c90:	2282      	movs	r2, #130	; 0x82
10012c92:	2000      	movs	r0, #0
10012c94:	0092      	lsls	r2, r2, #2
10012c96:	5498      	strb	r0, [r3, r2]
10012c98:	784a      	ldrb	r2, [r1, #1]
10012c9a:	7808      	ldrb	r0, [r1, #0]
10012c9c:	0212      	lsls	r2, r2, #8
10012c9e:	4302      	orrs	r2, r0
10012ca0:	805a      	strh	r2, [r3, #2]
10012ca2:	78ca      	ldrb	r2, [r1, #3]
10012ca4:	7888      	ldrb	r0, [r1, #2]
10012ca6:	0212      	lsls	r2, r2, #8
10012ca8:	4302      	orrs	r2, r0
10012caa:	80da      	strh	r2, [r3, #6]
10012cac:	794a      	ldrb	r2, [r1, #5]
10012cae:	7908      	ldrb	r0, [r1, #4]
10012cb0:	0212      	lsls	r2, r2, #8
10012cb2:	4302      	orrs	r2, r0
10012cb4:	809a      	strh	r2, [r3, #4]
10012cb6:	3308      	adds	r3, #8
10012cb8:	1c18      	adds	r0, r3, #0
10012cba:	3106      	adds	r1, #6
10012cbc:	4b01      	ldr	r3, [pc, #4]	; (10012cc4 <gattc_read_ind_parser+0x3c>)
10012cbe:	4798      	blx	r3
10012cc0:	bd08      	pop	{r3, pc}
10012cc2:	46c0      	nop			; (mov r8, r8)
10012cc4:	100150d7 	.word	0x100150d7

10012cc8 <gattc_svc_changed_cfg_ind_parser>:
10012cc8:	0a00      	lsrs	r0, r0, #8
10012cca:	8010      	strh	r0, [r2, #0]
10012ccc:	784b      	ldrb	r3, [r1, #1]
10012cce:	7809      	ldrb	r1, [r1, #0]
10012cd0:	021b      	lsls	r3, r3, #8
10012cd2:	430b      	orrs	r3, r1
10012cd4:	8053      	strh	r3, [r2, #2]
10012cd6:	4770      	bx	lr

10012cd8 <init_gattc_task_module>:
10012cd8:	2300      	movs	r3, #0
10012cda:	4a02      	ldr	r2, [pc, #8]	; (10012ce4 <init_gattc_task_module+0xc>)
10012cdc:	8013      	strh	r3, [r2, #0]
10012cde:	4a02      	ldr	r2, [pc, #8]	; (10012ce8 <init_gattc_task_module+0x10>)
10012ce0:	8013      	strh	r3, [r2, #0]
10012ce2:	4770      	bx	lr
10012ce4:	10019faa 	.word	0x10019faa
10012ce8:	10019fac 	.word	0x10019fac

10012cec <gattm_add_svc_req_handler>:
10012cec:	2200      	movs	r2, #0
10012cee:	210b      	movs	r1, #11
10012cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012cf2:	1c04      	adds	r4, r0, #0
10012cf4:	7943      	ldrb	r3, [r0, #5]
10012cf6:	b085      	sub	sp, #20
10012cf8:	9301      	str	r3, [sp, #4]
10012cfa:	ab02      	add	r3, sp, #8
10012cfc:	71da      	strb	r2, [r3, #7]
10012cfe:	4b37      	ldr	r3, [pc, #220]	; (10012ddc <gattm_add_svc_req_handler+0xf0>)
10012d00:	7059      	strb	r1, [r3, #1]
10012d02:	7099      	strb	r1, [r3, #2]
10012d04:	4936      	ldr	r1, [pc, #216]	; (10012de0 <gattm_add_svc_req_handler+0xf4>)
10012d06:	701a      	strb	r2, [r3, #0]
10012d08:	8808      	ldrh	r0, [r1, #0]
10012d0a:	8809      	ldrh	r1, [r1, #0]
10012d0c:	70da      	strb	r2, [r3, #3]
10012d0e:	0a09      	lsrs	r1, r1, #8
10012d10:	7118      	strb	r0, [r3, #4]
10012d12:	7159      	strb	r1, [r3, #5]
10012d14:	8821      	ldrh	r1, [r4, #0]
10012d16:	7219      	strb	r1, [r3, #8]
10012d18:	8821      	ldrh	r1, [r4, #0]
10012d1a:	0a09      	lsrs	r1, r1, #8
10012d1c:	7259      	strb	r1, [r3, #9]
10012d1e:	8861      	ldrh	r1, [r4, #2]
10012d20:	7299      	strb	r1, [r3, #10]
10012d22:	8861      	ldrh	r1, [r4, #2]
10012d24:	0a09      	lsrs	r1, r1, #8
10012d26:	72d9      	strb	r1, [r3, #11]
10012d28:	7921      	ldrb	r1, [r4, #4]
10012d2a:	7319      	strb	r1, [r3, #12]
10012d2c:	4669      	mov	r1, sp
10012d2e:	7909      	ldrb	r1, [r1, #4]
10012d30:	7359      	strb	r1, [r3, #13]
10012d32:	18a1      	adds	r1, r4, r2
10012d34:	7988      	ldrb	r0, [r1, #6]
10012d36:	1899      	adds	r1, r3, r2
10012d38:	3201      	adds	r2, #1
10012d3a:	7388      	strb	r0, [r1, #14]
10012d3c:	2a10      	cmp	r2, #16
10012d3e:	d1f8      	bne.n	10012d32 <gattm_add_svc_req_handler+0x46>
10012d40:	1c27      	adds	r7, r4, #0
10012d42:	2300      	movs	r3, #0
10012d44:	251e      	movs	r5, #30
10012d46:	3716      	adds	r7, #22
10012d48:	9300      	str	r3, [sp, #0]
10012d4a:	9b00      	ldr	r3, [sp, #0]
10012d4c:	9a01      	ldr	r2, [sp, #4]
10012d4e:	4e23      	ldr	r6, [pc, #140]	; (10012ddc <gattm_add_svc_req_handler+0xf0>)
10012d50:	4293      	cmp	r3, r2
10012d52:	da21      	bge.n	10012d98 <gattm_add_svc_req_handler+0xac>
10012d54:	1c39      	adds	r1, r7, #0
10012d56:	1970      	adds	r0, r6, r5
10012d58:	2210      	movs	r2, #16
10012d5a:	4b22      	ldr	r3, [pc, #136]	; (10012de4 <gattm_add_svc_req_handler+0xf8>)
10012d5c:	4798      	blx	r3
10012d5e:	1c2b      	adds	r3, r5, #0
10012d60:	8a3a      	ldrh	r2, [r7, #16]
10012d62:	3310      	adds	r3, #16
10012d64:	b29b      	uxth	r3, r3
10012d66:	54f2      	strb	r2, [r6, r3]
10012d68:	1c2b      	adds	r3, r5, #0
10012d6a:	8a3a      	ldrh	r2, [r7, #16]
10012d6c:	3311      	adds	r3, #17
10012d6e:	b29b      	uxth	r3, r3
10012d70:	0a12      	lsrs	r2, r2, #8
10012d72:	54f2      	strb	r2, [r6, r3]
10012d74:	1c2a      	adds	r2, r5, #0
10012d76:	1c2b      	adds	r3, r5, #0
10012d78:	8a79      	ldrh	r1, [r7, #18]
10012d7a:	3212      	adds	r2, #18
10012d7c:	b292      	uxth	r2, r2
10012d7e:	54b1      	strb	r1, [r6, r2]
10012d80:	8a7a      	ldrh	r2, [r7, #18]
10012d82:	3313      	adds	r3, #19
10012d84:	b29b      	uxth	r3, r3
10012d86:	0a12      	lsrs	r2, r2, #8
10012d88:	54f2      	strb	r2, [r6, r3]
10012d8a:	9b00      	ldr	r3, [sp, #0]
10012d8c:	3514      	adds	r5, #20
10012d8e:	3301      	adds	r3, #1
10012d90:	b2ad      	uxth	r5, r5
10012d92:	9300      	str	r3, [sp, #0]
10012d94:	3714      	adds	r7, #20
10012d96:	e7d8      	b.n	10012d4a <gattm_add_svc_req_handler+0x5e>
10012d98:	2114      	movs	r1, #20
10012d9a:	4d13      	ldr	r5, [pc, #76]	; (10012de8 <gattm_add_svc_req_handler+0xfc>)
10012d9c:	4b13      	ldr	r3, [pc, #76]	; (10012dec <gattm_add_svc_req_handler+0x100>)
10012d9e:	4351      	muls	r1, r2
10012da0:	802b      	strh	r3, [r5, #0]
10012da2:	230b      	movs	r3, #11
10012da4:	311e      	adds	r1, #30
10012da6:	80ab      	strh	r3, [r5, #4]
10012da8:	1c0b      	adds	r3, r1, #0
10012daa:	3b08      	subs	r3, #8
10012dac:	71b3      	strb	r3, [r6, #6]
10012dae:	121b      	asrs	r3, r3, #8
10012db0:	71f3      	strb	r3, [r6, #7]
10012db2:	1c30      	adds	r0, r6, #0
10012db4:	4b0e      	ldr	r3, [pc, #56]	; (10012df0 <gattm_add_svc_req_handler+0x104>)
10012db6:	4798      	blx	r3
10012db8:	ab02      	add	r3, sp, #8
10012dba:	1dde      	adds	r6, r3, #7
10012dbc:	1c30      	adds	r0, r6, #0
10012dbe:	4b0d      	ldr	r3, [pc, #52]	; (10012df4 <gattm_add_svc_req_handler+0x108>)
10012dc0:	4798      	blx	r3
10012dc2:	7833      	ldrb	r3, [r6, #0]
10012dc4:	20e2      	movs	r0, #226	; 0xe2
10012dc6:	2b00      	cmp	r3, #0
10012dc8:	d106      	bne.n	10012dd8 <gattm_add_svc_req_handler+0xec>
10012dca:	68aa      	ldr	r2, [r5, #8]
10012dcc:	7853      	ldrb	r3, [r2, #1]
10012dce:	7811      	ldrb	r1, [r2, #0]
10012dd0:	021b      	lsls	r3, r3, #8
10012dd2:	430b      	orrs	r3, r1
10012dd4:	8023      	strh	r3, [r4, #0]
10012dd6:	7890      	ldrb	r0, [r2, #2]
10012dd8:	b005      	add	sp, #20
10012dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012ddc:	1001b184 	.word	0x1001b184
10012de0:	1001ae14 	.word	0x1001ae14
10012de4:	100150d7 	.word	0x100150d7
10012de8:	1001ae08 	.word	0x1001ae08
10012dec:	00000b01 	.word	0x00000b01
10012df0:	10011641 	.word	0x10011641
10012df4:	100116a5 	.word	0x100116a5

10012df8 <gattm_add_attribute_req_handler>:
10012df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012dfa:	1c1f      	adds	r7, r3, #0
10012dfc:	4b16      	ldr	r3, [pc, #88]	; (10012e58 <gattm_add_attribute_req_handler+0x60>)
10012dfe:	9100      	str	r1, [sp, #0]
10012e00:	9201      	str	r2, [sp, #4]
10012e02:	1c05      	adds	r5, r0, #0
10012e04:	7946      	ldrb	r6, [r0, #5]
10012e06:	6818      	ldr	r0, [r3, #0]
10012e08:	2114      	movs	r1, #20
10012e0a:	4b14      	ldr	r3, [pc, #80]	; (10012e5c <gattm_add_attribute_req_handler+0x64>)
10012e0c:	382a      	subs	r0, #42	; 0x2a
10012e0e:	4798      	blx	r3
10012e10:	2311      	movs	r3, #17
10012e12:	4286      	cmp	r6, r0
10012e14:	d21e      	bcs.n	10012e54 <gattm_add_attribute_req_handler+0x5c>
10012e16:	2414      	movs	r4, #20
10012e18:	4366      	muls	r6, r4
10012e1a:	19a8      	adds	r0, r5, r6
10012e1c:	2100      	movs	r1, #0
10012e1e:	2210      	movs	r2, #16
10012e20:	4b0f      	ldr	r3, [pc, #60]	; (10012e60 <gattm_add_attribute_req_handler+0x68>)
10012e22:	3016      	adds	r0, #22
10012e24:	4798      	blx	r3
10012e26:	7968      	ldrb	r0, [r5, #5]
10012e28:	1c3a      	adds	r2, r7, #0
10012e2a:	4360      	muls	r0, r4
10012e2c:	1828      	adds	r0, r5, r0
10012e2e:	4b0d      	ldr	r3, [pc, #52]	; (10012e64 <gattm_add_attribute_req_handler+0x6c>)
10012e30:	3016      	adds	r0, #22
10012e32:	9908      	ldr	r1, [sp, #32]
10012e34:	4798      	blx	r3
10012e36:	466a      	mov	r2, sp
10012e38:	796b      	ldrb	r3, [r5, #5]
10012e3a:	8812      	ldrh	r2, [r2, #0]
10012e3c:	435c      	muls	r4, r3
10012e3e:	192c      	adds	r4, r5, r4
10012e40:	8522      	strh	r2, [r4, #40]	; 0x28
10012e42:	466a      	mov	r2, sp
10012e44:	8892      	ldrh	r2, [r2, #4]
10012e46:	84e2      	strh	r2, [r4, #38]	; 0x26
10012e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012e4a:	8013      	strh	r3, [r2, #0]
10012e4c:	796b      	ldrb	r3, [r5, #5]
10012e4e:	3301      	adds	r3, #1
10012e50:	716b      	strb	r3, [r5, #5]
10012e52:	2300      	movs	r3, #0
10012e54:	1c18      	adds	r0, r3, #0
10012e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012e58:	10019f20 	.word	0x10019f20
10012e5c:	10012fe5 	.word	0x10012fe5
10012e60:	100150e9 	.word	0x100150e9
10012e64:	100150d7 	.word	0x100150d7

10012e68 <gattm_att_set_value_req_handler>:
10012e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012e6a:	466b      	mov	r3, sp
10012e6c:	1dde      	adds	r6, r3, #7
10012e6e:	2300      	movs	r3, #0
10012e70:	1c0d      	adds	r5, r1, #0
10012e72:	210c      	movs	r1, #12
10012e74:	270b      	movs	r7, #11
10012e76:	4c17      	ldr	r4, [pc, #92]	; (10012ed4 <gattm_att_set_value_req_handler+0x6c>)
10012e78:	7033      	strb	r3, [r6, #0]
10012e7a:	70e3      	strb	r3, [r4, #3]
10012e7c:	4b16      	ldr	r3, [pc, #88]	; (10012ed8 <gattm_att_set_value_req_handler+0x70>)
10012e7e:	7021      	strb	r1, [r4, #0]
10012e80:	8819      	ldrh	r1, [r3, #0]
10012e82:	881b      	ldrh	r3, [r3, #0]
10012e84:	7220      	strb	r0, [r4, #8]
10012e86:	0a1b      	lsrs	r3, r3, #8
10012e88:	7163      	strb	r3, [r4, #5]
10012e8a:	0a00      	lsrs	r0, r0, #8
10012e8c:	0a2b      	lsrs	r3, r5, #8
10012e8e:	7121      	strb	r1, [r4, #4]
10012e90:	7260      	strb	r0, [r4, #9]
10012e92:	1c11      	adds	r1, r2, #0
10012e94:	72a5      	strb	r5, [r4, #10]
10012e96:	1c2a      	adds	r2, r5, #0
10012e98:	72e3      	strb	r3, [r4, #11]
10012e9a:	350c      	adds	r5, #12
10012e9c:	4b0f      	ldr	r3, [pc, #60]	; (10012edc <gattm_att_set_value_req_handler+0x74>)
10012e9e:	4810      	ldr	r0, [pc, #64]	; (10012ee0 <gattm_att_set_value_req_handler+0x78>)
10012ea0:	7067      	strb	r7, [r4, #1]
10012ea2:	70a7      	strb	r7, [r4, #2]
10012ea4:	4798      	blx	r3
10012ea6:	b2a9      	uxth	r1, r5
10012ea8:	4b0e      	ldr	r3, [pc, #56]	; (10012ee4 <gattm_att_set_value_req_handler+0x7c>)
10012eaa:	4d0f      	ldr	r5, [pc, #60]	; (10012ee8 <gattm_att_set_value_req_handler+0x80>)
10012eac:	1c20      	adds	r0, r4, #0
10012eae:	802b      	strh	r3, [r5, #0]
10012eb0:	1c0b      	adds	r3, r1, #0
10012eb2:	3b08      	subs	r3, #8
10012eb4:	71a3      	strb	r3, [r4, #6]
10012eb6:	121b      	asrs	r3, r3, #8
10012eb8:	71e3      	strb	r3, [r4, #7]
10012eba:	4b0c      	ldr	r3, [pc, #48]	; (10012eec <gattm_att_set_value_req_handler+0x84>)
10012ebc:	80af      	strh	r7, [r5, #4]
10012ebe:	4798      	blx	r3
10012ec0:	1c30      	adds	r0, r6, #0
10012ec2:	4b0b      	ldr	r3, [pc, #44]	; (10012ef0 <gattm_att_set_value_req_handler+0x88>)
10012ec4:	4798      	blx	r3
10012ec6:	7833      	ldrb	r3, [r6, #0]
10012ec8:	20e2      	movs	r0, #226	; 0xe2
10012eca:	2b00      	cmp	r3, #0
10012ecc:	d101      	bne.n	10012ed2 <gattm_att_set_value_req_handler+0x6a>
10012ece:	68ab      	ldr	r3, [r5, #8]
10012ed0:	7898      	ldrb	r0, [r3, #2]
10012ed2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012ed4:	1001b184 	.word	0x1001b184
10012ed8:	1001ae14 	.word	0x1001ae14
10012edc:	100150d7 	.word	0x100150d7
10012ee0:	1001b190 	.word	0x1001b190
10012ee4:	00000b0d 	.word	0x00000b0d
10012ee8:	1001ae08 	.word	0x1001ae08
10012eec:	10011641 	.word	0x10011641
10012ef0:	100116a5 	.word	0x100116a5

10012ef4 <gattm_att_get_value_req_handler>:
10012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ef6:	b085      	sub	sp, #20
10012ef8:	9201      	str	r2, [sp, #4]
10012efa:	220a      	movs	r2, #10
10012efc:	1c04      	adds	r4, r0, #0
10012efe:	481d      	ldr	r0, [pc, #116]	; (10012f74 <gattm_att_get_value_req_handler+0x80>)
10012f00:	ab02      	add	r3, sp, #8
10012f02:	1dde      	adds	r6, r3, #7
10012f04:	7002      	strb	r2, [r0, #0]
10012f06:	2300      	movs	r3, #0
10012f08:	220b      	movs	r2, #11
10012f0a:	4d1b      	ldr	r5, [pc, #108]	; (10012f78 <gattm_att_get_value_req_handler+0x84>)
10012f0c:	1c0f      	adds	r7, r1, #0
10012f0e:	8829      	ldrh	r1, [r5, #0]
10012f10:	882d      	ldrh	r5, [r5, #0]
10012f12:	7101      	strb	r1, [r0, #4]
10012f14:	0a2d      	lsrs	r5, r5, #8
10012f16:	7145      	strb	r5, [r0, #5]
10012f18:	0a25      	lsrs	r5, r4, #8
10012f1a:	7245      	strb	r5, [r0, #9]
10012f1c:	4917      	ldr	r1, [pc, #92]	; (10012f7c <gattm_att_get_value_req_handler+0x88>)
10012f1e:	4d18      	ldr	r5, [pc, #96]	; (10012f80 <gattm_att_get_value_req_handler+0x8c>)
10012f20:	7033      	strb	r3, [r6, #0]
10012f22:	7042      	strb	r2, [r0, #1]
10012f24:	7082      	strb	r2, [r0, #2]
10012f26:	70c3      	strb	r3, [r0, #3]
10012f28:	8029      	strh	r1, [r5, #0]
10012f2a:	80aa      	strh	r2, [r5, #4]
10012f2c:	71c3      	strb	r3, [r0, #7]
10012f2e:	3a09      	subs	r2, #9
10012f30:	210a      	movs	r1, #10
10012f32:	4b14      	ldr	r3, [pc, #80]	; (10012f84 <gattm_att_get_value_req_handler+0x90>)
10012f34:	7182      	strb	r2, [r0, #6]
10012f36:	7204      	strb	r4, [r0, #8]
10012f38:	4798      	blx	r3
10012f3a:	1c30      	adds	r0, r6, #0
10012f3c:	4b12      	ldr	r3, [pc, #72]	; (10012f88 <gattm_att_get_value_req_handler+0x94>)
10012f3e:	4798      	blx	r3
10012f40:	7833      	ldrb	r3, [r6, #0]
10012f42:	20e2      	movs	r0, #226	; 0xe2
10012f44:	2b00      	cmp	r3, #0
10012f46:	d112      	bne.n	10012f6e <gattm_att_get_value_req_handler+0x7a>
10012f48:	68a9      	ldr	r1, [r5, #8]
10012f4a:	9801      	ldr	r0, [sp, #4]
10012f4c:	784d      	ldrb	r5, [r1, #1]
10012f4e:	780b      	ldrb	r3, [r1, #0]
10012f50:	78ca      	ldrb	r2, [r1, #3]
10012f52:	022d      	lsls	r5, r5, #8
10012f54:	431d      	orrs	r5, r3
10012f56:	788b      	ldrb	r3, [r1, #2]
10012f58:	0212      	lsls	r2, r2, #8
10012f5a:	431a      	orrs	r2, r3
10012f5c:	803a      	strh	r2, [r7, #0]
10012f5e:	790e      	ldrb	r6, [r1, #4]
10012f60:	4b0a      	ldr	r3, [pc, #40]	; (10012f8c <gattm_att_get_value_req_handler+0x98>)
10012f62:	3105      	adds	r1, #5
10012f64:	4798      	blx	r3
10012f66:	20e2      	movs	r0, #226	; 0xe2
10012f68:	42ac      	cmp	r4, r5
10012f6a:	d100      	bne.n	10012f6e <gattm_att_get_value_req_handler+0x7a>
10012f6c:	1c30      	adds	r0, r6, #0
10012f6e:	b005      	add	sp, #20
10012f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f72:	46c0      	nop			; (mov r8, r8)
10012f74:	1001b184 	.word	0x1001b184
10012f78:	1001ae14 	.word	0x1001ae14
10012f7c:	00000b0b 	.word	0x00000b0b
10012f80:	1001ae08 	.word	0x1001ae08
10012f84:	10011641 	.word	0x10011641
10012f88:	100116a5 	.word	0x100116a5
10012f8c:	100150d7 	.word	0x100150d7

10012f90 <htpt_enable_rsp_handler>:
10012f90:	780b      	ldrb	r3, [r1, #0]
10012f92:	7013      	strb	r3, [r2, #0]
10012f94:	784b      	ldrb	r3, [r1, #1]
10012f96:	7053      	strb	r3, [r2, #1]
10012f98:	4770      	bx	lr

10012f9a <htpt_temp_send_rsp_handler>:
10012f9a:	780b      	ldrb	r3, [r1, #0]
10012f9c:	7013      	strb	r3, [r2, #0]
10012f9e:	4770      	bx	lr

10012fa0 <htpt_meas_intv_upd_rsp_handler>:
10012fa0:	780b      	ldrb	r3, [r1, #0]
10012fa2:	7013      	strb	r3, [r2, #0]
10012fa4:	4770      	bx	lr

10012fa6 <htpt_meas_intv_chg_req_ind_handler>:
10012fa6:	78cb      	ldrb	r3, [r1, #3]
10012fa8:	7889      	ldrb	r1, [r1, #2]
10012faa:	021b      	lsls	r3, r3, #8
10012fac:	430b      	orrs	r3, r1
10012fae:	8013      	strh	r3, [r2, #0]
10012fb0:	4770      	bx	lr

10012fb2 <htpt_cfg_indntf_ind_handler>:
10012fb2:	780b      	ldrb	r3, [r1, #0]
10012fb4:	7013      	strb	r3, [r2, #0]
10012fb6:	784b      	ldrb	r3, [r1, #1]
10012fb8:	7053      	strb	r3, [r2, #1]
10012fba:	4770      	bx	lr

10012fbc <__gnu_thumb1_case_sqi>:
10012fbc:	b402      	push	{r1}
10012fbe:	4671      	mov	r1, lr
10012fc0:	0849      	lsrs	r1, r1, #1
10012fc2:	0049      	lsls	r1, r1, #1
10012fc4:	5609      	ldrsb	r1, [r1, r0]
10012fc6:	0049      	lsls	r1, r1, #1
10012fc8:	448e      	add	lr, r1
10012fca:	bc02      	pop	{r1}
10012fcc:	4770      	bx	lr
10012fce:	46c0      	nop			; (mov r8, r8)

10012fd0 <__gnu_thumb1_case_uqi>:
10012fd0:	b402      	push	{r1}
10012fd2:	4671      	mov	r1, lr
10012fd4:	0849      	lsrs	r1, r1, #1
10012fd6:	0049      	lsls	r1, r1, #1
10012fd8:	5c09      	ldrb	r1, [r1, r0]
10012fda:	0049      	lsls	r1, r1, #1
10012fdc:	448e      	add	lr, r1
10012fde:	bc02      	pop	{r1}
10012fe0:	4770      	bx	lr
10012fe2:	46c0      	nop			; (mov r8, r8)

10012fe4 <__aeabi_uidiv>:
10012fe4:	2200      	movs	r2, #0
10012fe6:	0843      	lsrs	r3, r0, #1
10012fe8:	428b      	cmp	r3, r1
10012fea:	d374      	bcc.n	100130d6 <__aeabi_uidiv+0xf2>
10012fec:	0903      	lsrs	r3, r0, #4
10012fee:	428b      	cmp	r3, r1
10012ff0:	d35f      	bcc.n	100130b2 <__aeabi_uidiv+0xce>
10012ff2:	0a03      	lsrs	r3, r0, #8
10012ff4:	428b      	cmp	r3, r1
10012ff6:	d344      	bcc.n	10013082 <__aeabi_uidiv+0x9e>
10012ff8:	0b03      	lsrs	r3, r0, #12
10012ffa:	428b      	cmp	r3, r1
10012ffc:	d328      	bcc.n	10013050 <__aeabi_uidiv+0x6c>
10012ffe:	0c03      	lsrs	r3, r0, #16
10013000:	428b      	cmp	r3, r1
10013002:	d30d      	bcc.n	10013020 <__aeabi_uidiv+0x3c>
10013004:	22ff      	movs	r2, #255	; 0xff
10013006:	0209      	lsls	r1, r1, #8
10013008:	ba12      	rev	r2, r2
1001300a:	0c03      	lsrs	r3, r0, #16
1001300c:	428b      	cmp	r3, r1
1001300e:	d302      	bcc.n	10013016 <__aeabi_uidiv+0x32>
10013010:	1212      	asrs	r2, r2, #8
10013012:	0209      	lsls	r1, r1, #8
10013014:	d065      	beq.n	100130e2 <__aeabi_uidiv+0xfe>
10013016:	0b03      	lsrs	r3, r0, #12
10013018:	428b      	cmp	r3, r1
1001301a:	d319      	bcc.n	10013050 <__aeabi_uidiv+0x6c>
1001301c:	e000      	b.n	10013020 <__aeabi_uidiv+0x3c>
1001301e:	0a09      	lsrs	r1, r1, #8
10013020:	0bc3      	lsrs	r3, r0, #15
10013022:	428b      	cmp	r3, r1
10013024:	d301      	bcc.n	1001302a <__aeabi_uidiv+0x46>
10013026:	03cb      	lsls	r3, r1, #15
10013028:	1ac0      	subs	r0, r0, r3
1001302a:	4152      	adcs	r2, r2
1001302c:	0b83      	lsrs	r3, r0, #14
1001302e:	428b      	cmp	r3, r1
10013030:	d301      	bcc.n	10013036 <__aeabi_uidiv+0x52>
10013032:	038b      	lsls	r3, r1, #14
10013034:	1ac0      	subs	r0, r0, r3
10013036:	4152      	adcs	r2, r2
10013038:	0b43      	lsrs	r3, r0, #13
1001303a:	428b      	cmp	r3, r1
1001303c:	d301      	bcc.n	10013042 <__aeabi_uidiv+0x5e>
1001303e:	034b      	lsls	r3, r1, #13
10013040:	1ac0      	subs	r0, r0, r3
10013042:	4152      	adcs	r2, r2
10013044:	0b03      	lsrs	r3, r0, #12
10013046:	428b      	cmp	r3, r1
10013048:	d301      	bcc.n	1001304e <__aeabi_uidiv+0x6a>
1001304a:	030b      	lsls	r3, r1, #12
1001304c:	1ac0      	subs	r0, r0, r3
1001304e:	4152      	adcs	r2, r2
10013050:	0ac3      	lsrs	r3, r0, #11
10013052:	428b      	cmp	r3, r1
10013054:	d301      	bcc.n	1001305a <__aeabi_uidiv+0x76>
10013056:	02cb      	lsls	r3, r1, #11
10013058:	1ac0      	subs	r0, r0, r3
1001305a:	4152      	adcs	r2, r2
1001305c:	0a83      	lsrs	r3, r0, #10
1001305e:	428b      	cmp	r3, r1
10013060:	d301      	bcc.n	10013066 <__aeabi_uidiv+0x82>
10013062:	028b      	lsls	r3, r1, #10
10013064:	1ac0      	subs	r0, r0, r3
10013066:	4152      	adcs	r2, r2
10013068:	0a43      	lsrs	r3, r0, #9
1001306a:	428b      	cmp	r3, r1
1001306c:	d301      	bcc.n	10013072 <__aeabi_uidiv+0x8e>
1001306e:	024b      	lsls	r3, r1, #9
10013070:	1ac0      	subs	r0, r0, r3
10013072:	4152      	adcs	r2, r2
10013074:	0a03      	lsrs	r3, r0, #8
10013076:	428b      	cmp	r3, r1
10013078:	d301      	bcc.n	1001307e <__aeabi_uidiv+0x9a>
1001307a:	020b      	lsls	r3, r1, #8
1001307c:	1ac0      	subs	r0, r0, r3
1001307e:	4152      	adcs	r2, r2
10013080:	d2cd      	bcs.n	1001301e <__aeabi_uidiv+0x3a>
10013082:	09c3      	lsrs	r3, r0, #7
10013084:	428b      	cmp	r3, r1
10013086:	d301      	bcc.n	1001308c <__aeabi_uidiv+0xa8>
10013088:	01cb      	lsls	r3, r1, #7
1001308a:	1ac0      	subs	r0, r0, r3
1001308c:	4152      	adcs	r2, r2
1001308e:	0983      	lsrs	r3, r0, #6
10013090:	428b      	cmp	r3, r1
10013092:	d301      	bcc.n	10013098 <__aeabi_uidiv+0xb4>
10013094:	018b      	lsls	r3, r1, #6
10013096:	1ac0      	subs	r0, r0, r3
10013098:	4152      	adcs	r2, r2
1001309a:	0943      	lsrs	r3, r0, #5
1001309c:	428b      	cmp	r3, r1
1001309e:	d301      	bcc.n	100130a4 <__aeabi_uidiv+0xc0>
100130a0:	014b      	lsls	r3, r1, #5
100130a2:	1ac0      	subs	r0, r0, r3
100130a4:	4152      	adcs	r2, r2
100130a6:	0903      	lsrs	r3, r0, #4
100130a8:	428b      	cmp	r3, r1
100130aa:	d301      	bcc.n	100130b0 <__aeabi_uidiv+0xcc>
100130ac:	010b      	lsls	r3, r1, #4
100130ae:	1ac0      	subs	r0, r0, r3
100130b0:	4152      	adcs	r2, r2
100130b2:	08c3      	lsrs	r3, r0, #3
100130b4:	428b      	cmp	r3, r1
100130b6:	d301      	bcc.n	100130bc <__aeabi_uidiv+0xd8>
100130b8:	00cb      	lsls	r3, r1, #3
100130ba:	1ac0      	subs	r0, r0, r3
100130bc:	4152      	adcs	r2, r2
100130be:	0883      	lsrs	r3, r0, #2
100130c0:	428b      	cmp	r3, r1
100130c2:	d301      	bcc.n	100130c8 <__aeabi_uidiv+0xe4>
100130c4:	008b      	lsls	r3, r1, #2
100130c6:	1ac0      	subs	r0, r0, r3
100130c8:	4152      	adcs	r2, r2
100130ca:	0843      	lsrs	r3, r0, #1
100130cc:	428b      	cmp	r3, r1
100130ce:	d301      	bcc.n	100130d4 <__aeabi_uidiv+0xf0>
100130d0:	004b      	lsls	r3, r1, #1
100130d2:	1ac0      	subs	r0, r0, r3
100130d4:	4152      	adcs	r2, r2
100130d6:	1a41      	subs	r1, r0, r1
100130d8:	d200      	bcs.n	100130dc <__aeabi_uidiv+0xf8>
100130da:	4601      	mov	r1, r0
100130dc:	4152      	adcs	r2, r2
100130de:	4610      	mov	r0, r2
100130e0:	4770      	bx	lr
100130e2:	e7ff      	b.n	100130e4 <__aeabi_uidiv+0x100>
100130e4:	b501      	push	{r0, lr}
100130e6:	2000      	movs	r0, #0
100130e8:	f000 f8f0 	bl	100132cc <__aeabi_idiv0>
100130ec:	bd02      	pop	{r1, pc}
100130ee:	46c0      	nop			; (mov r8, r8)

100130f0 <__aeabi_uidivmod>:
100130f0:	2900      	cmp	r1, #0
100130f2:	d0f7      	beq.n	100130e4 <__aeabi_uidiv+0x100>
100130f4:	e776      	b.n	10012fe4 <__aeabi_uidiv>
100130f6:	4770      	bx	lr

100130f8 <__aeabi_idiv>:
100130f8:	4603      	mov	r3, r0
100130fa:	430b      	orrs	r3, r1
100130fc:	d47f      	bmi.n	100131fe <__aeabi_idiv+0x106>
100130fe:	2200      	movs	r2, #0
10013100:	0843      	lsrs	r3, r0, #1
10013102:	428b      	cmp	r3, r1
10013104:	d374      	bcc.n	100131f0 <__aeabi_idiv+0xf8>
10013106:	0903      	lsrs	r3, r0, #4
10013108:	428b      	cmp	r3, r1
1001310a:	d35f      	bcc.n	100131cc <__aeabi_idiv+0xd4>
1001310c:	0a03      	lsrs	r3, r0, #8
1001310e:	428b      	cmp	r3, r1
10013110:	d344      	bcc.n	1001319c <__aeabi_idiv+0xa4>
10013112:	0b03      	lsrs	r3, r0, #12
10013114:	428b      	cmp	r3, r1
10013116:	d328      	bcc.n	1001316a <__aeabi_idiv+0x72>
10013118:	0c03      	lsrs	r3, r0, #16
1001311a:	428b      	cmp	r3, r1
1001311c:	d30d      	bcc.n	1001313a <__aeabi_idiv+0x42>
1001311e:	22ff      	movs	r2, #255	; 0xff
10013120:	0209      	lsls	r1, r1, #8
10013122:	ba12      	rev	r2, r2
10013124:	0c03      	lsrs	r3, r0, #16
10013126:	428b      	cmp	r3, r1
10013128:	d302      	bcc.n	10013130 <__aeabi_idiv+0x38>
1001312a:	1212      	asrs	r2, r2, #8
1001312c:	0209      	lsls	r1, r1, #8
1001312e:	d065      	beq.n	100131fc <__aeabi_idiv+0x104>
10013130:	0b03      	lsrs	r3, r0, #12
10013132:	428b      	cmp	r3, r1
10013134:	d319      	bcc.n	1001316a <__aeabi_idiv+0x72>
10013136:	e000      	b.n	1001313a <__aeabi_idiv+0x42>
10013138:	0a09      	lsrs	r1, r1, #8
1001313a:	0bc3      	lsrs	r3, r0, #15
1001313c:	428b      	cmp	r3, r1
1001313e:	d301      	bcc.n	10013144 <__aeabi_idiv+0x4c>
10013140:	03cb      	lsls	r3, r1, #15
10013142:	1ac0      	subs	r0, r0, r3
10013144:	4152      	adcs	r2, r2
10013146:	0b83      	lsrs	r3, r0, #14
10013148:	428b      	cmp	r3, r1
1001314a:	d301      	bcc.n	10013150 <__aeabi_idiv+0x58>
1001314c:	038b      	lsls	r3, r1, #14
1001314e:	1ac0      	subs	r0, r0, r3
10013150:	4152      	adcs	r2, r2
10013152:	0b43      	lsrs	r3, r0, #13
10013154:	428b      	cmp	r3, r1
10013156:	d301      	bcc.n	1001315c <__aeabi_idiv+0x64>
10013158:	034b      	lsls	r3, r1, #13
1001315a:	1ac0      	subs	r0, r0, r3
1001315c:	4152      	adcs	r2, r2
1001315e:	0b03      	lsrs	r3, r0, #12
10013160:	428b      	cmp	r3, r1
10013162:	d301      	bcc.n	10013168 <__aeabi_idiv+0x70>
10013164:	030b      	lsls	r3, r1, #12
10013166:	1ac0      	subs	r0, r0, r3
10013168:	4152      	adcs	r2, r2
1001316a:	0ac3      	lsrs	r3, r0, #11
1001316c:	428b      	cmp	r3, r1
1001316e:	d301      	bcc.n	10013174 <__aeabi_idiv+0x7c>
10013170:	02cb      	lsls	r3, r1, #11
10013172:	1ac0      	subs	r0, r0, r3
10013174:	4152      	adcs	r2, r2
10013176:	0a83      	lsrs	r3, r0, #10
10013178:	428b      	cmp	r3, r1
1001317a:	d301      	bcc.n	10013180 <__aeabi_idiv+0x88>
1001317c:	028b      	lsls	r3, r1, #10
1001317e:	1ac0      	subs	r0, r0, r3
10013180:	4152      	adcs	r2, r2
10013182:	0a43      	lsrs	r3, r0, #9
10013184:	428b      	cmp	r3, r1
10013186:	d301      	bcc.n	1001318c <__aeabi_idiv+0x94>
10013188:	024b      	lsls	r3, r1, #9
1001318a:	1ac0      	subs	r0, r0, r3
1001318c:	4152      	adcs	r2, r2
1001318e:	0a03      	lsrs	r3, r0, #8
10013190:	428b      	cmp	r3, r1
10013192:	d301      	bcc.n	10013198 <__aeabi_idiv+0xa0>
10013194:	020b      	lsls	r3, r1, #8
10013196:	1ac0      	subs	r0, r0, r3
10013198:	4152      	adcs	r2, r2
1001319a:	d2cd      	bcs.n	10013138 <__aeabi_idiv+0x40>
1001319c:	09c3      	lsrs	r3, r0, #7
1001319e:	428b      	cmp	r3, r1
100131a0:	d301      	bcc.n	100131a6 <__aeabi_idiv+0xae>
100131a2:	01cb      	lsls	r3, r1, #7
100131a4:	1ac0      	subs	r0, r0, r3
100131a6:	4152      	adcs	r2, r2
100131a8:	0983      	lsrs	r3, r0, #6
100131aa:	428b      	cmp	r3, r1
100131ac:	d301      	bcc.n	100131b2 <__aeabi_idiv+0xba>
100131ae:	018b      	lsls	r3, r1, #6
100131b0:	1ac0      	subs	r0, r0, r3
100131b2:	4152      	adcs	r2, r2
100131b4:	0943      	lsrs	r3, r0, #5
100131b6:	428b      	cmp	r3, r1
100131b8:	d301      	bcc.n	100131be <__aeabi_idiv+0xc6>
100131ba:	014b      	lsls	r3, r1, #5
100131bc:	1ac0      	subs	r0, r0, r3
100131be:	4152      	adcs	r2, r2
100131c0:	0903      	lsrs	r3, r0, #4
100131c2:	428b      	cmp	r3, r1
100131c4:	d301      	bcc.n	100131ca <__aeabi_idiv+0xd2>
100131c6:	010b      	lsls	r3, r1, #4
100131c8:	1ac0      	subs	r0, r0, r3
100131ca:	4152      	adcs	r2, r2
100131cc:	08c3      	lsrs	r3, r0, #3
100131ce:	428b      	cmp	r3, r1
100131d0:	d301      	bcc.n	100131d6 <__aeabi_idiv+0xde>
100131d2:	00cb      	lsls	r3, r1, #3
100131d4:	1ac0      	subs	r0, r0, r3
100131d6:	4152      	adcs	r2, r2
100131d8:	0883      	lsrs	r3, r0, #2
100131da:	428b      	cmp	r3, r1
100131dc:	d301      	bcc.n	100131e2 <__aeabi_idiv+0xea>
100131de:	008b      	lsls	r3, r1, #2
100131e0:	1ac0      	subs	r0, r0, r3
100131e2:	4152      	adcs	r2, r2
100131e4:	0843      	lsrs	r3, r0, #1
100131e6:	428b      	cmp	r3, r1
100131e8:	d301      	bcc.n	100131ee <__aeabi_idiv+0xf6>
100131ea:	004b      	lsls	r3, r1, #1
100131ec:	1ac0      	subs	r0, r0, r3
100131ee:	4152      	adcs	r2, r2
100131f0:	1a41      	subs	r1, r0, r1
100131f2:	d200      	bcs.n	100131f6 <__aeabi_idiv+0xfe>
100131f4:	4601      	mov	r1, r0
100131f6:	4152      	adcs	r2, r2
100131f8:	4610      	mov	r0, r2
100131fa:	4770      	bx	lr
100131fc:	e05d      	b.n	100132ba <__aeabi_idiv+0x1c2>
100131fe:	0fca      	lsrs	r2, r1, #31
10013200:	d000      	beq.n	10013204 <__aeabi_idiv+0x10c>
10013202:	4249      	negs	r1, r1
10013204:	1003      	asrs	r3, r0, #32
10013206:	d300      	bcc.n	1001320a <__aeabi_idiv+0x112>
10013208:	4240      	negs	r0, r0
1001320a:	4053      	eors	r3, r2
1001320c:	2200      	movs	r2, #0
1001320e:	469c      	mov	ip, r3
10013210:	0903      	lsrs	r3, r0, #4
10013212:	428b      	cmp	r3, r1
10013214:	d32d      	bcc.n	10013272 <__aeabi_idiv+0x17a>
10013216:	0a03      	lsrs	r3, r0, #8
10013218:	428b      	cmp	r3, r1
1001321a:	d312      	bcc.n	10013242 <__aeabi_idiv+0x14a>
1001321c:	22fc      	movs	r2, #252	; 0xfc
1001321e:	0189      	lsls	r1, r1, #6
10013220:	ba12      	rev	r2, r2
10013222:	0a03      	lsrs	r3, r0, #8
10013224:	428b      	cmp	r3, r1
10013226:	d30c      	bcc.n	10013242 <__aeabi_idiv+0x14a>
10013228:	0189      	lsls	r1, r1, #6
1001322a:	1192      	asrs	r2, r2, #6
1001322c:	428b      	cmp	r3, r1
1001322e:	d308      	bcc.n	10013242 <__aeabi_idiv+0x14a>
10013230:	0189      	lsls	r1, r1, #6
10013232:	1192      	asrs	r2, r2, #6
10013234:	428b      	cmp	r3, r1
10013236:	d304      	bcc.n	10013242 <__aeabi_idiv+0x14a>
10013238:	0189      	lsls	r1, r1, #6
1001323a:	d03a      	beq.n	100132b2 <__aeabi_idiv+0x1ba>
1001323c:	1192      	asrs	r2, r2, #6
1001323e:	e000      	b.n	10013242 <__aeabi_idiv+0x14a>
10013240:	0989      	lsrs	r1, r1, #6
10013242:	09c3      	lsrs	r3, r0, #7
10013244:	428b      	cmp	r3, r1
10013246:	d301      	bcc.n	1001324c <__aeabi_idiv+0x154>
10013248:	01cb      	lsls	r3, r1, #7
1001324a:	1ac0      	subs	r0, r0, r3
1001324c:	4152      	adcs	r2, r2
1001324e:	0983      	lsrs	r3, r0, #6
10013250:	428b      	cmp	r3, r1
10013252:	d301      	bcc.n	10013258 <__aeabi_idiv+0x160>
10013254:	018b      	lsls	r3, r1, #6
10013256:	1ac0      	subs	r0, r0, r3
10013258:	4152      	adcs	r2, r2
1001325a:	0943      	lsrs	r3, r0, #5
1001325c:	428b      	cmp	r3, r1
1001325e:	d301      	bcc.n	10013264 <__aeabi_idiv+0x16c>
10013260:	014b      	lsls	r3, r1, #5
10013262:	1ac0      	subs	r0, r0, r3
10013264:	4152      	adcs	r2, r2
10013266:	0903      	lsrs	r3, r0, #4
10013268:	428b      	cmp	r3, r1
1001326a:	d301      	bcc.n	10013270 <__aeabi_idiv+0x178>
1001326c:	010b      	lsls	r3, r1, #4
1001326e:	1ac0      	subs	r0, r0, r3
10013270:	4152      	adcs	r2, r2
10013272:	08c3      	lsrs	r3, r0, #3
10013274:	428b      	cmp	r3, r1
10013276:	d301      	bcc.n	1001327c <__aeabi_idiv+0x184>
10013278:	00cb      	lsls	r3, r1, #3
1001327a:	1ac0      	subs	r0, r0, r3
1001327c:	4152      	adcs	r2, r2
1001327e:	0883      	lsrs	r3, r0, #2
10013280:	428b      	cmp	r3, r1
10013282:	d301      	bcc.n	10013288 <__aeabi_idiv+0x190>
10013284:	008b      	lsls	r3, r1, #2
10013286:	1ac0      	subs	r0, r0, r3
10013288:	4152      	adcs	r2, r2
1001328a:	d2d9      	bcs.n	10013240 <__aeabi_idiv+0x148>
1001328c:	0843      	lsrs	r3, r0, #1
1001328e:	428b      	cmp	r3, r1
10013290:	d301      	bcc.n	10013296 <__aeabi_idiv+0x19e>
10013292:	004b      	lsls	r3, r1, #1
10013294:	1ac0      	subs	r0, r0, r3
10013296:	4152      	adcs	r2, r2
10013298:	1a41      	subs	r1, r0, r1
1001329a:	d200      	bcs.n	1001329e <__aeabi_idiv+0x1a6>
1001329c:	4601      	mov	r1, r0
1001329e:	4663      	mov	r3, ip
100132a0:	4152      	adcs	r2, r2
100132a2:	105b      	asrs	r3, r3, #1
100132a4:	4610      	mov	r0, r2
100132a6:	d301      	bcc.n	100132ac <__aeabi_idiv+0x1b4>
100132a8:	4240      	negs	r0, r0
100132aa:	2b00      	cmp	r3, #0
100132ac:	d500      	bpl.n	100132b0 <__aeabi_idiv+0x1b8>
100132ae:	4249      	negs	r1, r1
100132b0:	4770      	bx	lr
100132b2:	4663      	mov	r3, ip
100132b4:	105b      	asrs	r3, r3, #1
100132b6:	d300      	bcc.n	100132ba <__aeabi_idiv+0x1c2>
100132b8:	4240      	negs	r0, r0
100132ba:	b501      	push	{r0, lr}
100132bc:	2000      	movs	r0, #0
100132be:	f000 f805 	bl	100132cc <__aeabi_idiv0>
100132c2:	bd02      	pop	{r1, pc}

100132c4 <__aeabi_idivmod>:
100132c4:	2900      	cmp	r1, #0
100132c6:	d0f8      	beq.n	100132ba <__aeabi_idiv+0x1c2>
100132c8:	e716      	b.n	100130f8 <__aeabi_idiv>
100132ca:	4770      	bx	lr

100132cc <__aeabi_idiv0>:
100132cc:	4770      	bx	lr
100132ce:	46c0      	nop			; (mov r8, r8)

100132d0 <__aeabi_cdrcmple>:
100132d0:	4684      	mov	ip, r0
100132d2:	1c10      	adds	r0, r2, #0
100132d4:	4662      	mov	r2, ip
100132d6:	468c      	mov	ip, r1
100132d8:	1c19      	adds	r1, r3, #0
100132da:	4663      	mov	r3, ip
100132dc:	e000      	b.n	100132e0 <__aeabi_cdcmpeq>
100132de:	46c0      	nop			; (mov r8, r8)

100132e0 <__aeabi_cdcmpeq>:
100132e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100132e2:	f000 fff5 	bl	100142d0 <__ledf2>
100132e6:	2800      	cmp	r0, #0
100132e8:	d401      	bmi.n	100132ee <__aeabi_cdcmpeq+0xe>
100132ea:	2100      	movs	r1, #0
100132ec:	42c8      	cmn	r0, r1
100132ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100132f0 <__aeabi_dcmpeq>:
100132f0:	b510      	push	{r4, lr}
100132f2:	f000 ff49 	bl	10014188 <__eqdf2>
100132f6:	4240      	negs	r0, r0
100132f8:	3001      	adds	r0, #1
100132fa:	bd10      	pop	{r4, pc}

100132fc <__aeabi_dcmplt>:
100132fc:	b510      	push	{r4, lr}
100132fe:	f000 ffe7 	bl	100142d0 <__ledf2>
10013302:	2800      	cmp	r0, #0
10013304:	db01      	blt.n	1001330a <__aeabi_dcmplt+0xe>
10013306:	2000      	movs	r0, #0
10013308:	bd10      	pop	{r4, pc}
1001330a:	2001      	movs	r0, #1
1001330c:	bd10      	pop	{r4, pc}
1001330e:	46c0      	nop			; (mov r8, r8)

10013310 <__aeabi_dcmple>:
10013310:	b510      	push	{r4, lr}
10013312:	f000 ffdd 	bl	100142d0 <__ledf2>
10013316:	2800      	cmp	r0, #0
10013318:	dd01      	ble.n	1001331e <__aeabi_dcmple+0xe>
1001331a:	2000      	movs	r0, #0
1001331c:	bd10      	pop	{r4, pc}
1001331e:	2001      	movs	r0, #1
10013320:	bd10      	pop	{r4, pc}
10013322:	46c0      	nop			; (mov r8, r8)

10013324 <__aeabi_dcmpgt>:
10013324:	b510      	push	{r4, lr}
10013326:	f000 ff6f 	bl	10014208 <__gedf2>
1001332a:	2800      	cmp	r0, #0
1001332c:	dc01      	bgt.n	10013332 <__aeabi_dcmpgt+0xe>
1001332e:	2000      	movs	r0, #0
10013330:	bd10      	pop	{r4, pc}
10013332:	2001      	movs	r0, #1
10013334:	bd10      	pop	{r4, pc}
10013336:	46c0      	nop			; (mov r8, r8)

10013338 <__aeabi_dcmpge>:
10013338:	b510      	push	{r4, lr}
1001333a:	f000 ff65 	bl	10014208 <__gedf2>
1001333e:	2800      	cmp	r0, #0
10013340:	da01      	bge.n	10013346 <__aeabi_dcmpge+0xe>
10013342:	2000      	movs	r0, #0
10013344:	bd10      	pop	{r4, pc}
10013346:	2001      	movs	r0, #1
10013348:	bd10      	pop	{r4, pc}
1001334a:	46c0      	nop			; (mov r8, r8)

1001334c <__aeabi_cfrcmple>:
1001334c:	4684      	mov	ip, r0
1001334e:	1c08      	adds	r0, r1, #0
10013350:	4661      	mov	r1, ip
10013352:	e7ff      	b.n	10013354 <__aeabi_cfcmpeq>

10013354 <__aeabi_cfcmpeq>:
10013354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013356:	f000 fb91 	bl	10013a7c <__lesf2>
1001335a:	2800      	cmp	r0, #0
1001335c:	d401      	bmi.n	10013362 <__aeabi_cfcmpeq+0xe>
1001335e:	2100      	movs	r1, #0
10013360:	42c8      	cmn	r0, r1
10013362:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013364 <__aeabi_fcmpeq>:
10013364:	b510      	push	{r4, lr}
10013366:	f000 fb1d 	bl	100139a4 <__eqsf2>
1001336a:	4240      	negs	r0, r0
1001336c:	3001      	adds	r0, #1
1001336e:	bd10      	pop	{r4, pc}

10013370 <__aeabi_fcmplt>:
10013370:	b510      	push	{r4, lr}
10013372:	f000 fb83 	bl	10013a7c <__lesf2>
10013376:	2800      	cmp	r0, #0
10013378:	db01      	blt.n	1001337e <__aeabi_fcmplt+0xe>
1001337a:	2000      	movs	r0, #0
1001337c:	bd10      	pop	{r4, pc}
1001337e:	2001      	movs	r0, #1
10013380:	bd10      	pop	{r4, pc}
10013382:	46c0      	nop			; (mov r8, r8)

10013384 <__aeabi_fcmple>:
10013384:	b510      	push	{r4, lr}
10013386:	f000 fb79 	bl	10013a7c <__lesf2>
1001338a:	2800      	cmp	r0, #0
1001338c:	dd01      	ble.n	10013392 <__aeabi_fcmple+0xe>
1001338e:	2000      	movs	r0, #0
10013390:	bd10      	pop	{r4, pc}
10013392:	2001      	movs	r0, #1
10013394:	bd10      	pop	{r4, pc}
10013396:	46c0      	nop			; (mov r8, r8)

10013398 <__aeabi_fcmpgt>:
10013398:	b510      	push	{r4, lr}
1001339a:	f000 fb2b 	bl	100139f4 <__gesf2>
1001339e:	2800      	cmp	r0, #0
100133a0:	dc01      	bgt.n	100133a6 <__aeabi_fcmpgt+0xe>
100133a2:	2000      	movs	r0, #0
100133a4:	bd10      	pop	{r4, pc}
100133a6:	2001      	movs	r0, #1
100133a8:	bd10      	pop	{r4, pc}
100133aa:	46c0      	nop			; (mov r8, r8)

100133ac <__aeabi_fcmpge>:
100133ac:	b510      	push	{r4, lr}
100133ae:	f000 fb21 	bl	100139f4 <__gesf2>
100133b2:	2800      	cmp	r0, #0
100133b4:	da01      	bge.n	100133ba <__aeabi_fcmpge+0xe>
100133b6:	2000      	movs	r0, #0
100133b8:	bd10      	pop	{r4, pc}
100133ba:	2001      	movs	r0, #1
100133bc:	bd10      	pop	{r4, pc}
100133be:	46c0      	nop			; (mov r8, r8)

100133c0 <__aeabi_lmul>:
100133c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100133c2:	464f      	mov	r7, r9
100133c4:	4646      	mov	r6, r8
100133c6:	b4c0      	push	{r6, r7}
100133c8:	0416      	lsls	r6, r2, #16
100133ca:	0c36      	lsrs	r6, r6, #16
100133cc:	4699      	mov	r9, r3
100133ce:	0033      	movs	r3, r6
100133d0:	0405      	lsls	r5, r0, #16
100133d2:	0c2c      	lsrs	r4, r5, #16
100133d4:	0c07      	lsrs	r7, r0, #16
100133d6:	0c15      	lsrs	r5, r2, #16
100133d8:	4363      	muls	r3, r4
100133da:	437e      	muls	r6, r7
100133dc:	436f      	muls	r7, r5
100133de:	4365      	muls	r5, r4
100133e0:	0c1c      	lsrs	r4, r3, #16
100133e2:	19ad      	adds	r5, r5, r6
100133e4:	1964      	adds	r4, r4, r5
100133e6:	469c      	mov	ip, r3
100133e8:	42a6      	cmp	r6, r4
100133ea:	d903      	bls.n	100133f4 <__aeabi_lmul+0x34>
100133ec:	2380      	movs	r3, #128	; 0x80
100133ee:	025b      	lsls	r3, r3, #9
100133f0:	4698      	mov	r8, r3
100133f2:	4447      	add	r7, r8
100133f4:	4663      	mov	r3, ip
100133f6:	0c25      	lsrs	r5, r4, #16
100133f8:	19ef      	adds	r7, r5, r7
100133fa:	041d      	lsls	r5, r3, #16
100133fc:	464b      	mov	r3, r9
100133fe:	434a      	muls	r2, r1
10013400:	4343      	muls	r3, r0
10013402:	0c2d      	lsrs	r5, r5, #16
10013404:	0424      	lsls	r4, r4, #16
10013406:	1964      	adds	r4, r4, r5
10013408:	1899      	adds	r1, r3, r2
1001340a:	19c9      	adds	r1, r1, r7
1001340c:	0020      	movs	r0, r4
1001340e:	bc0c      	pop	{r2, r3}
10013410:	4690      	mov	r8, r2
10013412:	4699      	mov	r9, r3
10013414:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013416:	46c0      	nop			; (mov r8, r8)

10013418 <__aeabi_f2uiz>:
10013418:	219e      	movs	r1, #158	; 0x9e
1001341a:	b510      	push	{r4, lr}
1001341c:	05c9      	lsls	r1, r1, #23
1001341e:	1c04      	adds	r4, r0, #0
10013420:	f7ff ffc4 	bl	100133ac <__aeabi_fcmpge>
10013424:	2800      	cmp	r0, #0
10013426:	d103      	bne.n	10013430 <__aeabi_f2uiz+0x18>
10013428:	1c20      	adds	r0, r4, #0
1001342a:	f000 fe05 	bl	10014038 <__aeabi_f2iz>
1001342e:	bd10      	pop	{r4, pc}
10013430:	219e      	movs	r1, #158	; 0x9e
10013432:	1c20      	adds	r0, r4, #0
10013434:	05c9      	lsls	r1, r1, #23
10013436:	f000 fc79 	bl	10013d2c <__aeabi_fsub>
1001343a:	f000 fdfd 	bl	10014038 <__aeabi_f2iz>
1001343e:	2380      	movs	r3, #128	; 0x80
10013440:	061b      	lsls	r3, r3, #24
10013442:	469c      	mov	ip, r3
10013444:	4460      	add	r0, ip
10013446:	e7f2      	b.n	1001342e <__aeabi_f2uiz+0x16>

10013448 <__aeabi_d2uiz>:
10013448:	b570      	push	{r4, r5, r6, lr}
1001344a:	2200      	movs	r2, #0
1001344c:	4b0c      	ldr	r3, [pc, #48]	; (10013480 <__aeabi_d2uiz+0x38>)
1001344e:	0004      	movs	r4, r0
10013450:	000d      	movs	r5, r1
10013452:	f7ff ff71 	bl	10013338 <__aeabi_dcmpge>
10013456:	2800      	cmp	r0, #0
10013458:	d104      	bne.n	10013464 <__aeabi_d2uiz+0x1c>
1001345a:	0020      	movs	r0, r4
1001345c:	0029      	movs	r1, r5
1001345e:	f001 fd6f 	bl	10014f40 <__aeabi_d2iz>
10013462:	bd70      	pop	{r4, r5, r6, pc}
10013464:	4b06      	ldr	r3, [pc, #24]	; (10013480 <__aeabi_d2uiz+0x38>)
10013466:	2200      	movs	r2, #0
10013468:	0020      	movs	r0, r4
1001346a:	0029      	movs	r1, r5
1001346c:	f001 fa14 	bl	10014898 <__aeabi_dsub>
10013470:	f001 fd66 	bl	10014f40 <__aeabi_d2iz>
10013474:	2380      	movs	r3, #128	; 0x80
10013476:	061b      	lsls	r3, r3, #24
10013478:	469c      	mov	ip, r3
1001347a:	4460      	add	r0, ip
1001347c:	e7f1      	b.n	10013462 <__aeabi_d2uiz+0x1a>
1001347e:	46c0      	nop			; (mov r8, r8)
10013480:	41e00000 	.word	0x41e00000

10013484 <__aeabi_fadd>:
10013484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013486:	024a      	lsls	r2, r1, #9
10013488:	0243      	lsls	r3, r0, #9
1001348a:	0044      	lsls	r4, r0, #1
1001348c:	004e      	lsls	r6, r1, #1
1001348e:	0fc5      	lsrs	r5, r0, #31
10013490:	0e24      	lsrs	r4, r4, #24
10013492:	0028      	movs	r0, r5
10013494:	099b      	lsrs	r3, r3, #6
10013496:	0e36      	lsrs	r6, r6, #24
10013498:	0fc9      	lsrs	r1, r1, #31
1001349a:	0992      	lsrs	r2, r2, #6
1001349c:	428d      	cmp	r5, r1
1001349e:	d059      	beq.n	10013554 <__aeabi_fadd+0xd0>
100134a0:	1ba0      	subs	r0, r4, r6
100134a2:	2800      	cmp	r0, #0
100134a4:	dc00      	bgt.n	100134a8 <__aeabi_fadd+0x24>
100134a6:	e08d      	b.n	100135c4 <__aeabi_fadd+0x140>
100134a8:	2e00      	cmp	r6, #0
100134aa:	d11a      	bne.n	100134e2 <__aeabi_fadd+0x5e>
100134ac:	2a00      	cmp	r2, #0
100134ae:	d000      	beq.n	100134b2 <__aeabi_fadd+0x2e>
100134b0:	e079      	b.n	100135a6 <__aeabi_fadd+0x122>
100134b2:	075a      	lsls	r2, r3, #29
100134b4:	d004      	beq.n	100134c0 <__aeabi_fadd+0x3c>
100134b6:	220f      	movs	r2, #15
100134b8:	401a      	ands	r2, r3
100134ba:	2a04      	cmp	r2, #4
100134bc:	d000      	beq.n	100134c0 <__aeabi_fadd+0x3c>
100134be:	3304      	adds	r3, #4
100134c0:	015a      	lsls	r2, r3, #5
100134c2:	d538      	bpl.n	10013536 <__aeabi_fadd+0xb2>
100134c4:	3401      	adds	r4, #1
100134c6:	2cff      	cmp	r4, #255	; 0xff
100134c8:	d100      	bne.n	100134cc <__aeabi_fadd+0x48>
100134ca:	e089      	b.n	100135e0 <__aeabi_fadd+0x15c>
100134cc:	0028      	movs	r0, r5
100134ce:	019b      	lsls	r3, r3, #6
100134d0:	0a5b      	lsrs	r3, r3, #9
100134d2:	b2e4      	uxtb	r4, r4
100134d4:	025b      	lsls	r3, r3, #9
100134d6:	05e4      	lsls	r4, r4, #23
100134d8:	0a5b      	lsrs	r3, r3, #9
100134da:	4323      	orrs	r3, r4
100134dc:	07c0      	lsls	r0, r0, #31
100134de:	4318      	orrs	r0, r3
100134e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100134e2:	2cff      	cmp	r4, #255	; 0xff
100134e4:	d0e5      	beq.n	100134b2 <__aeabi_fadd+0x2e>
100134e6:	2180      	movs	r1, #128	; 0x80
100134e8:	04c9      	lsls	r1, r1, #19
100134ea:	430a      	orrs	r2, r1
100134ec:	281b      	cmp	r0, #27
100134ee:	dd00      	ble.n	100134f2 <__aeabi_fadd+0x6e>
100134f0:	e089      	b.n	10013606 <__aeabi_fadd+0x182>
100134f2:	0016      	movs	r6, r2
100134f4:	2120      	movs	r1, #32
100134f6:	40c6      	lsrs	r6, r0
100134f8:	1a08      	subs	r0, r1, r0
100134fa:	4082      	lsls	r2, r0
100134fc:	1e51      	subs	r1, r2, #1
100134fe:	418a      	sbcs	r2, r1
10013500:	4332      	orrs	r2, r6
10013502:	1a9b      	subs	r3, r3, r2
10013504:	015a      	lsls	r2, r3, #5
10013506:	d514      	bpl.n	10013532 <__aeabi_fadd+0xae>
10013508:	019b      	lsls	r3, r3, #6
1001350a:	099e      	lsrs	r6, r3, #6
1001350c:	0030      	movs	r0, r6
1001350e:	f001 fd85 	bl	1001501c <__clzsi2>
10013512:	3805      	subs	r0, #5
10013514:	4086      	lsls	r6, r0
10013516:	4284      	cmp	r4, r0
10013518:	dc65      	bgt.n	100135e6 <__aeabi_fadd+0x162>
1001351a:	1b04      	subs	r4, r0, r4
1001351c:	0033      	movs	r3, r6
1001351e:	2020      	movs	r0, #32
10013520:	3401      	adds	r4, #1
10013522:	40e3      	lsrs	r3, r4
10013524:	1b04      	subs	r4, r0, r4
10013526:	40a6      	lsls	r6, r4
10013528:	1e72      	subs	r2, r6, #1
1001352a:	4196      	sbcs	r6, r2
1001352c:	2400      	movs	r4, #0
1001352e:	4333      	orrs	r3, r6
10013530:	e7bf      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013532:	075a      	lsls	r2, r3, #29
10013534:	d1bf      	bne.n	100134b6 <__aeabi_fadd+0x32>
10013536:	08df      	lsrs	r7, r3, #3
10013538:	0028      	movs	r0, r5
1001353a:	2cff      	cmp	r4, #255	; 0xff
1001353c:	d12f      	bne.n	1001359e <__aeabi_fadd+0x11a>
1001353e:	2f00      	cmp	r7, #0
10013540:	d100      	bne.n	10013544 <__aeabi_fadd+0xc0>
10013542:	e087      	b.n	10013654 <__aeabi_fadd+0x1d0>
10013544:	2280      	movs	r2, #128	; 0x80
10013546:	03d2      	lsls	r2, r2, #15
10013548:	0013      	movs	r3, r2
1001354a:	433b      	orrs	r3, r7
1001354c:	025b      	lsls	r3, r3, #9
1001354e:	0a5b      	lsrs	r3, r3, #9
10013550:	24ff      	movs	r4, #255	; 0xff
10013552:	e7bf      	b.n	100134d4 <__aeabi_fadd+0x50>
10013554:	1ba1      	subs	r1, r4, r6
10013556:	2900      	cmp	r1, #0
10013558:	dd49      	ble.n	100135ee <__aeabi_fadd+0x16a>
1001355a:	2e00      	cmp	r6, #0
1001355c:	d029      	beq.n	100135b2 <__aeabi_fadd+0x12e>
1001355e:	2cff      	cmp	r4, #255	; 0xff
10013560:	d0a7      	beq.n	100134b2 <__aeabi_fadd+0x2e>
10013562:	2680      	movs	r6, #128	; 0x80
10013564:	04f6      	lsls	r6, r6, #19
10013566:	4332      	orrs	r2, r6
10013568:	291b      	cmp	r1, #27
1001356a:	dd00      	ble.n	1001356e <__aeabi_fadd+0xea>
1001356c:	e08d      	b.n	1001368a <__aeabi_fadd+0x206>
1001356e:	0017      	movs	r7, r2
10013570:	2620      	movs	r6, #32
10013572:	40cf      	lsrs	r7, r1
10013574:	1a71      	subs	r1, r6, r1
10013576:	408a      	lsls	r2, r1
10013578:	1e51      	subs	r1, r2, #1
1001357a:	418a      	sbcs	r2, r1
1001357c:	433a      	orrs	r2, r7
1001357e:	189b      	adds	r3, r3, r2
10013580:	015a      	lsls	r2, r3, #5
10013582:	d5d6      	bpl.n	10013532 <__aeabi_fadd+0xae>
10013584:	3401      	adds	r4, #1
10013586:	2cff      	cmp	r4, #255	; 0xff
10013588:	d064      	beq.n	10013654 <__aeabi_fadd+0x1d0>
1001358a:	2201      	movs	r2, #1
1001358c:	4976      	ldr	r1, [pc, #472]	; (10013768 <__aeabi_fadd+0x2e4>)
1001358e:	401a      	ands	r2, r3
10013590:	085b      	lsrs	r3, r3, #1
10013592:	400b      	ands	r3, r1
10013594:	4313      	orrs	r3, r2
10013596:	e78c      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013598:	1e03      	subs	r3, r0, #0
1001359a:	d1ca      	bne.n	10013532 <__aeabi_fadd+0xae>
1001359c:	2000      	movs	r0, #0
1001359e:	027b      	lsls	r3, r7, #9
100135a0:	0a5b      	lsrs	r3, r3, #9
100135a2:	b2e4      	uxtb	r4, r4
100135a4:	e796      	b.n	100134d4 <__aeabi_fadd+0x50>
100135a6:	3801      	subs	r0, #1
100135a8:	2800      	cmp	r0, #0
100135aa:	d0aa      	beq.n	10013502 <__aeabi_fadd+0x7e>
100135ac:	2cff      	cmp	r4, #255	; 0xff
100135ae:	d19d      	bne.n	100134ec <__aeabi_fadd+0x68>
100135b0:	e77f      	b.n	100134b2 <__aeabi_fadd+0x2e>
100135b2:	2a00      	cmp	r2, #0
100135b4:	d100      	bne.n	100135b8 <__aeabi_fadd+0x134>
100135b6:	e77c      	b.n	100134b2 <__aeabi_fadd+0x2e>
100135b8:	3901      	subs	r1, #1
100135ba:	2900      	cmp	r1, #0
100135bc:	d0df      	beq.n	1001357e <__aeabi_fadd+0xfa>
100135be:	2cff      	cmp	r4, #255	; 0xff
100135c0:	d1d2      	bne.n	10013568 <__aeabi_fadd+0xe4>
100135c2:	e776      	b.n	100134b2 <__aeabi_fadd+0x2e>
100135c4:	2800      	cmp	r0, #0
100135c6:	d120      	bne.n	1001360a <__aeabi_fadd+0x186>
100135c8:	1c60      	adds	r0, r4, #1
100135ca:	b2c0      	uxtb	r0, r0
100135cc:	2801      	cmp	r0, #1
100135ce:	dd53      	ble.n	10013678 <__aeabi_fadd+0x1f4>
100135d0:	2780      	movs	r7, #128	; 0x80
100135d2:	1a9e      	subs	r6, r3, r2
100135d4:	04ff      	lsls	r7, r7, #19
100135d6:	4037      	ands	r7, r6
100135d8:	d02f      	beq.n	1001363a <__aeabi_fadd+0x1b6>
100135da:	1ad6      	subs	r6, r2, r3
100135dc:	000d      	movs	r5, r1
100135de:	e795      	b.n	1001350c <__aeabi_fadd+0x88>
100135e0:	0028      	movs	r0, r5
100135e2:	2300      	movs	r3, #0
100135e4:	e776      	b.n	100134d4 <__aeabi_fadd+0x50>
100135e6:	4b61      	ldr	r3, [pc, #388]	; (1001376c <__aeabi_fadd+0x2e8>)
100135e8:	1a24      	subs	r4, r4, r0
100135ea:	4033      	ands	r3, r6
100135ec:	e761      	b.n	100134b2 <__aeabi_fadd+0x2e>
100135ee:	2900      	cmp	r1, #0
100135f0:	d14d      	bne.n	1001368e <__aeabi_fadd+0x20a>
100135f2:	1c61      	adds	r1, r4, #1
100135f4:	b2ce      	uxtb	r6, r1
100135f6:	2e01      	cmp	r6, #1
100135f8:	dd2f      	ble.n	1001365a <__aeabi_fadd+0x1d6>
100135fa:	29ff      	cmp	r1, #255	; 0xff
100135fc:	d02a      	beq.n	10013654 <__aeabi_fadd+0x1d0>
100135fe:	189b      	adds	r3, r3, r2
10013600:	085b      	lsrs	r3, r3, #1
10013602:	000c      	movs	r4, r1
10013604:	e755      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013606:	2201      	movs	r2, #1
10013608:	e77b      	b.n	10013502 <__aeabi_fadd+0x7e>
1001360a:	2c00      	cmp	r4, #0
1001360c:	d11b      	bne.n	10013646 <__aeabi_fadd+0x1c2>
1001360e:	2b00      	cmp	r3, #0
10013610:	d05b      	beq.n	100136ca <__aeabi_fadd+0x246>
10013612:	43c0      	mvns	r0, r0
10013614:	2800      	cmp	r0, #0
10013616:	d00c      	beq.n	10013632 <__aeabi_fadd+0x1ae>
10013618:	2eff      	cmp	r6, #255	; 0xff
1001361a:	d07e      	beq.n	1001371a <__aeabi_fadd+0x296>
1001361c:	281b      	cmp	r0, #27
1001361e:	dd00      	ble.n	10013622 <__aeabi_fadd+0x19e>
10013620:	e092      	b.n	10013748 <__aeabi_fadd+0x2c4>
10013622:	001d      	movs	r5, r3
10013624:	2420      	movs	r4, #32
10013626:	40c5      	lsrs	r5, r0
10013628:	1a20      	subs	r0, r4, r0
1001362a:	4083      	lsls	r3, r0
1001362c:	1e58      	subs	r0, r3, #1
1001362e:	4183      	sbcs	r3, r0
10013630:	432b      	orrs	r3, r5
10013632:	1ad3      	subs	r3, r2, r3
10013634:	0034      	movs	r4, r6
10013636:	000d      	movs	r5, r1
10013638:	e764      	b.n	10013504 <__aeabi_fadd+0x80>
1001363a:	2e00      	cmp	r6, #0
1001363c:	d000      	beq.n	10013640 <__aeabi_fadd+0x1bc>
1001363e:	e765      	b.n	1001350c <__aeabi_fadd+0x88>
10013640:	2000      	movs	r0, #0
10013642:	2400      	movs	r4, #0
10013644:	e7ab      	b.n	1001359e <__aeabi_fadd+0x11a>
10013646:	2eff      	cmp	r6, #255	; 0xff
10013648:	d067      	beq.n	1001371a <__aeabi_fadd+0x296>
1001364a:	2480      	movs	r4, #128	; 0x80
1001364c:	04e4      	lsls	r4, r4, #19
1001364e:	4240      	negs	r0, r0
10013650:	4323      	orrs	r3, r4
10013652:	e7e3      	b.n	1001361c <__aeabi_fadd+0x198>
10013654:	24ff      	movs	r4, #255	; 0xff
10013656:	2300      	movs	r3, #0
10013658:	e73c      	b.n	100134d4 <__aeabi_fadd+0x50>
1001365a:	2c00      	cmp	r4, #0
1001365c:	d161      	bne.n	10013722 <__aeabi_fadd+0x29e>
1001365e:	2b00      	cmp	r3, #0
10013660:	d07e      	beq.n	10013760 <__aeabi_fadd+0x2dc>
10013662:	2a00      	cmp	r2, #0
10013664:	d100      	bne.n	10013668 <__aeabi_fadd+0x1e4>
10013666:	e724      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013668:	189b      	adds	r3, r3, r2
1001366a:	015a      	lsls	r2, r3, #5
1001366c:	d400      	bmi.n	10013670 <__aeabi_fadd+0x1ec>
1001366e:	e760      	b.n	10013532 <__aeabi_fadd+0xae>
10013670:	4a3e      	ldr	r2, [pc, #248]	; (1001376c <__aeabi_fadd+0x2e8>)
10013672:	000c      	movs	r4, r1
10013674:	4013      	ands	r3, r2
10013676:	e71c      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013678:	2c00      	cmp	r4, #0
1001367a:	d11e      	bne.n	100136ba <__aeabi_fadd+0x236>
1001367c:	2b00      	cmp	r3, #0
1001367e:	d12f      	bne.n	100136e0 <__aeabi_fadd+0x25c>
10013680:	2a00      	cmp	r2, #0
10013682:	d066      	beq.n	10013752 <__aeabi_fadd+0x2ce>
10013684:	0013      	movs	r3, r2
10013686:	000d      	movs	r5, r1
10013688:	e713      	b.n	100134b2 <__aeabi_fadd+0x2e>
1001368a:	2201      	movs	r2, #1
1001368c:	e777      	b.n	1001357e <__aeabi_fadd+0xfa>
1001368e:	2c00      	cmp	r4, #0
10013690:	d11f      	bne.n	100136d2 <__aeabi_fadd+0x24e>
10013692:	2b00      	cmp	r3, #0
10013694:	d05a      	beq.n	1001374c <__aeabi_fadd+0x2c8>
10013696:	43c9      	mvns	r1, r1
10013698:	2900      	cmp	r1, #0
1001369a:	d00b      	beq.n	100136b4 <__aeabi_fadd+0x230>
1001369c:	2eff      	cmp	r6, #255	; 0xff
1001369e:	d050      	beq.n	10013742 <__aeabi_fadd+0x2be>
100136a0:	291b      	cmp	r1, #27
100136a2:	dc5f      	bgt.n	10013764 <__aeabi_fadd+0x2e0>
100136a4:	001f      	movs	r7, r3
100136a6:	2420      	movs	r4, #32
100136a8:	40cf      	lsrs	r7, r1
100136aa:	1a61      	subs	r1, r4, r1
100136ac:	408b      	lsls	r3, r1
100136ae:	1e59      	subs	r1, r3, #1
100136b0:	418b      	sbcs	r3, r1
100136b2:	433b      	orrs	r3, r7
100136b4:	189b      	adds	r3, r3, r2
100136b6:	0034      	movs	r4, r6
100136b8:	e762      	b.n	10013580 <__aeabi_fadd+0xfc>
100136ba:	2b00      	cmp	r3, #0
100136bc:	d11c      	bne.n	100136f8 <__aeabi_fadd+0x274>
100136be:	2a00      	cmp	r2, #0
100136c0:	d04a      	beq.n	10013758 <__aeabi_fadd+0x2d4>
100136c2:	0013      	movs	r3, r2
100136c4:	000d      	movs	r5, r1
100136c6:	24ff      	movs	r4, #255	; 0xff
100136c8:	e6f3      	b.n	100134b2 <__aeabi_fadd+0x2e>
100136ca:	0013      	movs	r3, r2
100136cc:	0034      	movs	r4, r6
100136ce:	000d      	movs	r5, r1
100136d0:	e6ef      	b.n	100134b2 <__aeabi_fadd+0x2e>
100136d2:	2eff      	cmp	r6, #255	; 0xff
100136d4:	d035      	beq.n	10013742 <__aeabi_fadd+0x2be>
100136d6:	2480      	movs	r4, #128	; 0x80
100136d8:	04e4      	lsls	r4, r4, #19
100136da:	4249      	negs	r1, r1
100136dc:	4323      	orrs	r3, r4
100136de:	e7df      	b.n	100136a0 <__aeabi_fadd+0x21c>
100136e0:	2a00      	cmp	r2, #0
100136e2:	d100      	bne.n	100136e6 <__aeabi_fadd+0x262>
100136e4:	e6e5      	b.n	100134b2 <__aeabi_fadd+0x2e>
100136e6:	2780      	movs	r7, #128	; 0x80
100136e8:	1a98      	subs	r0, r3, r2
100136ea:	04ff      	lsls	r7, r7, #19
100136ec:	4007      	ands	r7, r0
100136ee:	d100      	bne.n	100136f2 <__aeabi_fadd+0x26e>
100136f0:	e752      	b.n	10013598 <__aeabi_fadd+0x114>
100136f2:	1ad3      	subs	r3, r2, r3
100136f4:	000d      	movs	r5, r1
100136f6:	e6dc      	b.n	100134b2 <__aeabi_fadd+0x2e>
100136f8:	24ff      	movs	r4, #255	; 0xff
100136fa:	2a00      	cmp	r2, #0
100136fc:	d100      	bne.n	10013700 <__aeabi_fadd+0x27c>
100136fe:	e6d8      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013700:	2080      	movs	r0, #128	; 0x80
10013702:	08db      	lsrs	r3, r3, #3
10013704:	03c0      	lsls	r0, r0, #15
10013706:	4203      	tst	r3, r0
10013708:	d004      	beq.n	10013714 <__aeabi_fadd+0x290>
1001370a:	08d2      	lsrs	r2, r2, #3
1001370c:	4202      	tst	r2, r0
1001370e:	d101      	bne.n	10013714 <__aeabi_fadd+0x290>
10013710:	0013      	movs	r3, r2
10013712:	000d      	movs	r5, r1
10013714:	00db      	lsls	r3, r3, #3
10013716:	24ff      	movs	r4, #255	; 0xff
10013718:	e6cb      	b.n	100134b2 <__aeabi_fadd+0x2e>
1001371a:	0013      	movs	r3, r2
1001371c:	24ff      	movs	r4, #255	; 0xff
1001371e:	000d      	movs	r5, r1
10013720:	e6c7      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013722:	2b00      	cmp	r3, #0
10013724:	d00d      	beq.n	10013742 <__aeabi_fadd+0x2be>
10013726:	24ff      	movs	r4, #255	; 0xff
10013728:	2a00      	cmp	r2, #0
1001372a:	d100      	bne.n	1001372e <__aeabi_fadd+0x2aa>
1001372c:	e6c1      	b.n	100134b2 <__aeabi_fadd+0x2e>
1001372e:	2180      	movs	r1, #128	; 0x80
10013730:	08db      	lsrs	r3, r3, #3
10013732:	03c9      	lsls	r1, r1, #15
10013734:	420b      	tst	r3, r1
10013736:	d0ed      	beq.n	10013714 <__aeabi_fadd+0x290>
10013738:	08d2      	lsrs	r2, r2, #3
1001373a:	420a      	tst	r2, r1
1001373c:	d1ea      	bne.n	10013714 <__aeabi_fadd+0x290>
1001373e:	0013      	movs	r3, r2
10013740:	e7e8      	b.n	10013714 <__aeabi_fadd+0x290>
10013742:	0013      	movs	r3, r2
10013744:	24ff      	movs	r4, #255	; 0xff
10013746:	e6b4      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013748:	2301      	movs	r3, #1
1001374a:	e772      	b.n	10013632 <__aeabi_fadd+0x1ae>
1001374c:	0013      	movs	r3, r2
1001374e:	0034      	movs	r4, r6
10013750:	e6af      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013752:	2700      	movs	r7, #0
10013754:	2000      	movs	r0, #0
10013756:	e722      	b.n	1001359e <__aeabi_fadd+0x11a>
10013758:	2780      	movs	r7, #128	; 0x80
1001375a:	2000      	movs	r0, #0
1001375c:	03ff      	lsls	r7, r7, #15
1001375e:	e6f1      	b.n	10013544 <__aeabi_fadd+0xc0>
10013760:	0013      	movs	r3, r2
10013762:	e6a6      	b.n	100134b2 <__aeabi_fadd+0x2e>
10013764:	2301      	movs	r3, #1
10013766:	e7a5      	b.n	100136b4 <__aeabi_fadd+0x230>
10013768:	7dffffff 	.word	0x7dffffff
1001376c:	fbffffff 	.word	0xfbffffff

10013770 <__aeabi_fdiv>:
10013770:	b5f0      	push	{r4, r5, r6, r7, lr}
10013772:	4656      	mov	r6, sl
10013774:	4644      	mov	r4, r8
10013776:	465f      	mov	r7, fp
10013778:	464d      	mov	r5, r9
1001377a:	b4f0      	push	{r4, r5, r6, r7}
1001377c:	0244      	lsls	r4, r0, #9
1001377e:	0046      	lsls	r6, r0, #1
10013780:	0fc7      	lsrs	r7, r0, #31
10013782:	b083      	sub	sp, #12
10013784:	4688      	mov	r8, r1
10013786:	0a65      	lsrs	r5, r4, #9
10013788:	0e36      	lsrs	r6, r6, #24
1001378a:	46ba      	mov	sl, r7
1001378c:	d03d      	beq.n	1001380a <__aeabi_fdiv+0x9a>
1001378e:	2eff      	cmp	r6, #255	; 0xff
10013790:	d022      	beq.n	100137d8 <__aeabi_fdiv+0x68>
10013792:	2300      	movs	r3, #0
10013794:	00ec      	lsls	r4, r5, #3
10013796:	2580      	movs	r5, #128	; 0x80
10013798:	4699      	mov	r9, r3
1001379a:	469b      	mov	fp, r3
1001379c:	04ed      	lsls	r5, r5, #19
1001379e:	4325      	orrs	r5, r4
100137a0:	3e7f      	subs	r6, #127	; 0x7f
100137a2:	4643      	mov	r3, r8
100137a4:	025c      	lsls	r4, r3, #9
100137a6:	0058      	lsls	r0, r3, #1
100137a8:	0fdb      	lsrs	r3, r3, #31
100137aa:	0a64      	lsrs	r4, r4, #9
100137ac:	0e00      	lsrs	r0, r0, #24
100137ae:	4698      	mov	r8, r3
100137b0:	d036      	beq.n	10013820 <__aeabi_fdiv+0xb0>
100137b2:	28ff      	cmp	r0, #255	; 0xff
100137b4:	d030      	beq.n	10013818 <__aeabi_fdiv+0xa8>
100137b6:	2380      	movs	r3, #128	; 0x80
100137b8:	2100      	movs	r1, #0
100137ba:	00e4      	lsls	r4, r4, #3
100137bc:	04db      	lsls	r3, r3, #19
100137be:	431c      	orrs	r4, r3
100137c0:	387f      	subs	r0, #127	; 0x7f
100137c2:	1a30      	subs	r0, r6, r0
100137c4:	9001      	str	r0, [sp, #4]
100137c6:	4648      	mov	r0, r9
100137c8:	4642      	mov	r2, r8
100137ca:	4308      	orrs	r0, r1
100137cc:	4e72      	ldr	r6, [pc, #456]	; (10013998 <__aeabi_fdiv+0x228>)
100137ce:	0080      	lsls	r0, r0, #2
100137d0:	5830      	ldr	r0, [r6, r0]
100137d2:	407a      	eors	r2, r7
100137d4:	0013      	movs	r3, r2
100137d6:	4687      	mov	pc, r0
100137d8:	2d00      	cmp	r5, #0
100137da:	d144      	bne.n	10013866 <__aeabi_fdiv+0xf6>
100137dc:	2308      	movs	r3, #8
100137de:	4699      	mov	r9, r3
100137e0:	3b06      	subs	r3, #6
100137e2:	469b      	mov	fp, r3
100137e4:	e7dd      	b.n	100137a2 <__aeabi_fdiv+0x32>
100137e6:	2201      	movs	r2, #1
100137e8:	20ff      	movs	r0, #255	; 0xff
100137ea:	2400      	movs	r4, #0
100137ec:	401a      	ands	r2, r3
100137ee:	0264      	lsls	r4, r4, #9
100137f0:	05c3      	lsls	r3, r0, #23
100137f2:	0a64      	lsrs	r4, r4, #9
100137f4:	07d2      	lsls	r2, r2, #31
100137f6:	431c      	orrs	r4, r3
100137f8:	4314      	orrs	r4, r2
100137fa:	0020      	movs	r0, r4
100137fc:	b003      	add	sp, #12
100137fe:	bc3c      	pop	{r2, r3, r4, r5}
10013800:	4690      	mov	r8, r2
10013802:	4699      	mov	r9, r3
10013804:	46a2      	mov	sl, r4
10013806:	46ab      	mov	fp, r5
10013808:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001380a:	2d00      	cmp	r5, #0
1001380c:	d120      	bne.n	10013850 <__aeabi_fdiv+0xe0>
1001380e:	2304      	movs	r3, #4
10013810:	4699      	mov	r9, r3
10013812:	3b03      	subs	r3, #3
10013814:	469b      	mov	fp, r3
10013816:	e7c4      	b.n	100137a2 <__aeabi_fdiv+0x32>
10013818:	2c00      	cmp	r4, #0
1001381a:	d117      	bne.n	1001384c <__aeabi_fdiv+0xdc>
1001381c:	2102      	movs	r1, #2
1001381e:	e002      	b.n	10013826 <__aeabi_fdiv+0xb6>
10013820:	2c00      	cmp	r4, #0
10013822:	d10a      	bne.n	1001383a <__aeabi_fdiv+0xca>
10013824:	2101      	movs	r1, #1
10013826:	1a32      	subs	r2, r6, r0
10013828:	9201      	str	r2, [sp, #4]
1001382a:	464a      	mov	r2, r9
1001382c:	4643      	mov	r3, r8
1001382e:	430a      	orrs	r2, r1
10013830:	485a      	ldr	r0, [pc, #360]	; (1001399c <__aeabi_fdiv+0x22c>)
10013832:	0092      	lsls	r2, r2, #2
10013834:	5882      	ldr	r2, [r0, r2]
10013836:	407b      	eors	r3, r7
10013838:	4697      	mov	pc, r2
1001383a:	0020      	movs	r0, r4
1001383c:	f001 fbee 	bl	1001501c <__clzsi2>
10013840:	1f43      	subs	r3, r0, #5
10013842:	3076      	adds	r0, #118	; 0x76
10013844:	409c      	lsls	r4, r3
10013846:	4240      	negs	r0, r0
10013848:	2100      	movs	r1, #0
1001384a:	e7ba      	b.n	100137c2 <__aeabi_fdiv+0x52>
1001384c:	2103      	movs	r1, #3
1001384e:	e7b8      	b.n	100137c2 <__aeabi_fdiv+0x52>
10013850:	0028      	movs	r0, r5
10013852:	f001 fbe3 	bl	1001501c <__clzsi2>
10013856:	1f43      	subs	r3, r0, #5
10013858:	409d      	lsls	r5, r3
1001385a:	2300      	movs	r3, #0
1001385c:	3076      	adds	r0, #118	; 0x76
1001385e:	4246      	negs	r6, r0
10013860:	4699      	mov	r9, r3
10013862:	469b      	mov	fp, r3
10013864:	e79d      	b.n	100137a2 <__aeabi_fdiv+0x32>
10013866:	230c      	movs	r3, #12
10013868:	4699      	mov	r9, r3
1001386a:	3b09      	subs	r3, #9
1001386c:	469b      	mov	fp, r3
1001386e:	e798      	b.n	100137a2 <__aeabi_fdiv+0x32>
10013870:	2480      	movs	r4, #128	; 0x80
10013872:	2200      	movs	r2, #0
10013874:	03e4      	lsls	r4, r4, #15
10013876:	20ff      	movs	r0, #255	; 0xff
10013878:	e7b9      	b.n	100137ee <__aeabi_fdiv+0x7e>
1001387a:	2400      	movs	r4, #0
1001387c:	46c2      	mov	sl, r8
1001387e:	468b      	mov	fp, r1
10013880:	465a      	mov	r2, fp
10013882:	4653      	mov	r3, sl
10013884:	2a02      	cmp	r2, #2
10013886:	d0ae      	beq.n	100137e6 <__aeabi_fdiv+0x76>
10013888:	2a03      	cmp	r2, #3
1001388a:	d07d      	beq.n	10013988 <__aeabi_fdiv+0x218>
1001388c:	2a01      	cmp	r2, #1
1001388e:	d131      	bne.n	100138f4 <__aeabi_fdiv+0x184>
10013890:	2201      	movs	r2, #1
10013892:	2000      	movs	r0, #0
10013894:	401a      	ands	r2, r3
10013896:	2400      	movs	r4, #0
10013898:	e7a9      	b.n	100137ee <__aeabi_fdiv+0x7e>
1001389a:	2201      	movs	r2, #1
1001389c:	1a10      	subs	r0, r2, r0
1001389e:	281b      	cmp	r0, #27
100138a0:	dd56      	ble.n	10013950 <__aeabi_fdiv+0x1e0>
100138a2:	401a      	ands	r2, r3
100138a4:	2000      	movs	r0, #0
100138a6:	2400      	movs	r4, #0
100138a8:	e7a1      	b.n	100137ee <__aeabi_fdiv+0x7e>
100138aa:	2380      	movs	r3, #128	; 0x80
100138ac:	03db      	lsls	r3, r3, #15
100138ae:	421d      	tst	r5, r3
100138b0:	d14b      	bne.n	1001394a <__aeabi_fdiv+0x1da>
100138b2:	2380      	movs	r3, #128	; 0x80
100138b4:	03db      	lsls	r3, r3, #15
100138b6:	432b      	orrs	r3, r5
100138b8:	025c      	lsls	r4, r3, #9
100138ba:	0a64      	lsrs	r4, r4, #9
100138bc:	003a      	movs	r2, r7
100138be:	20ff      	movs	r0, #255	; 0xff
100138c0:	e795      	b.n	100137ee <__aeabi_fdiv+0x7e>
100138c2:	016d      	lsls	r5, r5, #5
100138c4:	0160      	lsls	r0, r4, #5
100138c6:	4285      	cmp	r5, r0
100138c8:	d230      	bcs.n	1001392c <__aeabi_fdiv+0x1bc>
100138ca:	9a01      	ldr	r2, [sp, #4]
100138cc:	2400      	movs	r4, #0
100138ce:	3a01      	subs	r2, #1
100138d0:	9201      	str	r2, [sp, #4]
100138d2:	221b      	movs	r2, #27
100138d4:	2701      	movs	r7, #1
100138d6:	0029      	movs	r1, r5
100138d8:	0064      	lsls	r4, r4, #1
100138da:	006d      	lsls	r5, r5, #1
100138dc:	2900      	cmp	r1, #0
100138de:	db01      	blt.n	100138e4 <__aeabi_fdiv+0x174>
100138e0:	42a8      	cmp	r0, r5
100138e2:	d801      	bhi.n	100138e8 <__aeabi_fdiv+0x178>
100138e4:	1a2d      	subs	r5, r5, r0
100138e6:	433c      	orrs	r4, r7
100138e8:	3a01      	subs	r2, #1
100138ea:	2a00      	cmp	r2, #0
100138ec:	d1f3      	bne.n	100138d6 <__aeabi_fdiv+0x166>
100138ee:	1e6a      	subs	r2, r5, #1
100138f0:	4195      	sbcs	r5, r2
100138f2:	432c      	orrs	r4, r5
100138f4:	9801      	ldr	r0, [sp, #4]
100138f6:	307f      	adds	r0, #127	; 0x7f
100138f8:	2800      	cmp	r0, #0
100138fa:	ddce      	ble.n	1001389a <__aeabi_fdiv+0x12a>
100138fc:	0762      	lsls	r2, r4, #29
100138fe:	d004      	beq.n	1001390a <__aeabi_fdiv+0x19a>
10013900:	220f      	movs	r2, #15
10013902:	4022      	ands	r2, r4
10013904:	2a04      	cmp	r2, #4
10013906:	d000      	beq.n	1001390a <__aeabi_fdiv+0x19a>
10013908:	3404      	adds	r4, #4
1001390a:	0122      	lsls	r2, r4, #4
1001390c:	d503      	bpl.n	10013916 <__aeabi_fdiv+0x1a6>
1001390e:	4a24      	ldr	r2, [pc, #144]	; (100139a0 <__aeabi_fdiv+0x230>)
10013910:	9801      	ldr	r0, [sp, #4]
10013912:	4014      	ands	r4, r2
10013914:	3080      	adds	r0, #128	; 0x80
10013916:	28fe      	cmp	r0, #254	; 0xfe
10013918:	dd00      	ble.n	1001391c <__aeabi_fdiv+0x1ac>
1001391a:	e764      	b.n	100137e6 <__aeabi_fdiv+0x76>
1001391c:	2201      	movs	r2, #1
1001391e:	01a4      	lsls	r4, r4, #6
10013920:	0a64      	lsrs	r4, r4, #9
10013922:	b2c0      	uxtb	r0, r0
10013924:	401a      	ands	r2, r3
10013926:	e762      	b.n	100137ee <__aeabi_fdiv+0x7e>
10013928:	002c      	movs	r4, r5
1001392a:	e7a9      	b.n	10013880 <__aeabi_fdiv+0x110>
1001392c:	1a2d      	subs	r5, r5, r0
1001392e:	221a      	movs	r2, #26
10013930:	2401      	movs	r4, #1
10013932:	e7cf      	b.n	100138d4 <__aeabi_fdiv+0x164>
10013934:	026b      	lsls	r3, r5, #9
10013936:	d5bc      	bpl.n	100138b2 <__aeabi_fdiv+0x142>
10013938:	2400      	movs	r4, #0
1001393a:	2380      	movs	r3, #128	; 0x80
1001393c:	03db      	lsls	r3, r3, #15
1001393e:	431c      	orrs	r4, r3
10013940:	0264      	lsls	r4, r4, #9
10013942:	0a64      	lsrs	r4, r4, #9
10013944:	4642      	mov	r2, r8
10013946:	20ff      	movs	r0, #255	; 0xff
10013948:	e751      	b.n	100137ee <__aeabi_fdiv+0x7e>
1001394a:	421c      	tst	r4, r3
1001394c:	d1b3      	bne.n	100138b6 <__aeabi_fdiv+0x146>
1001394e:	e7f4      	b.n	1001393a <__aeabi_fdiv+0x1ca>
10013950:	0021      	movs	r1, r4
10013952:	2220      	movs	r2, #32
10013954:	40c1      	lsrs	r1, r0
10013956:	1a10      	subs	r0, r2, r0
10013958:	4084      	lsls	r4, r0
1001395a:	1e62      	subs	r2, r4, #1
1001395c:	4194      	sbcs	r4, r2
1001395e:	430c      	orrs	r4, r1
10013960:	0762      	lsls	r2, r4, #29
10013962:	d004      	beq.n	1001396e <__aeabi_fdiv+0x1fe>
10013964:	220f      	movs	r2, #15
10013966:	4022      	ands	r2, r4
10013968:	2a04      	cmp	r2, #4
1001396a:	d000      	beq.n	1001396e <__aeabi_fdiv+0x1fe>
1001396c:	3404      	adds	r4, #4
1001396e:	0162      	lsls	r2, r4, #5
10013970:	d504      	bpl.n	1001397c <__aeabi_fdiv+0x20c>
10013972:	2201      	movs	r2, #1
10013974:	2001      	movs	r0, #1
10013976:	401a      	ands	r2, r3
10013978:	2400      	movs	r4, #0
1001397a:	e738      	b.n	100137ee <__aeabi_fdiv+0x7e>
1001397c:	2201      	movs	r2, #1
1001397e:	01a4      	lsls	r4, r4, #6
10013980:	0a64      	lsrs	r4, r4, #9
10013982:	401a      	ands	r2, r3
10013984:	2000      	movs	r0, #0
10013986:	e732      	b.n	100137ee <__aeabi_fdiv+0x7e>
10013988:	2380      	movs	r3, #128	; 0x80
1001398a:	03db      	lsls	r3, r3, #15
1001398c:	431c      	orrs	r4, r3
1001398e:	0264      	lsls	r4, r4, #9
10013990:	0a64      	lsrs	r4, r4, #9
10013992:	4652      	mov	r2, sl
10013994:	20ff      	movs	r0, #255	; 0xff
10013996:	e72a      	b.n	100137ee <__aeabi_fdiv+0x7e>
10013998:	10018280 	.word	0x10018280
1001399c:	100182c0 	.word	0x100182c0
100139a0:	f7ffffff 	.word	0xf7ffffff

100139a4 <__eqsf2>:
100139a4:	0243      	lsls	r3, r0, #9
100139a6:	b570      	push	{r4, r5, r6, lr}
100139a8:	0042      	lsls	r2, r0, #1
100139aa:	004c      	lsls	r4, r1, #1
100139ac:	0a5d      	lsrs	r5, r3, #9
100139ae:	0fc3      	lsrs	r3, r0, #31
100139b0:	0248      	lsls	r0, r1, #9
100139b2:	0e12      	lsrs	r2, r2, #24
100139b4:	0a46      	lsrs	r6, r0, #9
100139b6:	0e24      	lsrs	r4, r4, #24
100139b8:	0fc9      	lsrs	r1, r1, #31
100139ba:	2aff      	cmp	r2, #255	; 0xff
100139bc:	d00f      	beq.n	100139de <__eqsf2+0x3a>
100139be:	2cff      	cmp	r4, #255	; 0xff
100139c0:	d011      	beq.n	100139e6 <__eqsf2+0x42>
100139c2:	2001      	movs	r0, #1
100139c4:	42a2      	cmp	r2, r4
100139c6:	d000      	beq.n	100139ca <__eqsf2+0x26>
100139c8:	bd70      	pop	{r4, r5, r6, pc}
100139ca:	42b5      	cmp	r5, r6
100139cc:	d1fc      	bne.n	100139c8 <__eqsf2+0x24>
100139ce:	428b      	cmp	r3, r1
100139d0:	d00d      	beq.n	100139ee <__eqsf2+0x4a>
100139d2:	2a00      	cmp	r2, #0
100139d4:	d1f8      	bne.n	100139c8 <__eqsf2+0x24>
100139d6:	0028      	movs	r0, r5
100139d8:	1e43      	subs	r3, r0, #1
100139da:	4198      	sbcs	r0, r3
100139dc:	e7f4      	b.n	100139c8 <__eqsf2+0x24>
100139de:	2001      	movs	r0, #1
100139e0:	2d00      	cmp	r5, #0
100139e2:	d1f1      	bne.n	100139c8 <__eqsf2+0x24>
100139e4:	e7eb      	b.n	100139be <__eqsf2+0x1a>
100139e6:	2001      	movs	r0, #1
100139e8:	2e00      	cmp	r6, #0
100139ea:	d1ed      	bne.n	100139c8 <__eqsf2+0x24>
100139ec:	e7e9      	b.n	100139c2 <__eqsf2+0x1e>
100139ee:	2000      	movs	r0, #0
100139f0:	e7ea      	b.n	100139c8 <__eqsf2+0x24>
100139f2:	46c0      	nop			; (mov r8, r8)

100139f4 <__gesf2>:
100139f4:	0243      	lsls	r3, r0, #9
100139f6:	b5f0      	push	{r4, r5, r6, r7, lr}
100139f8:	0042      	lsls	r2, r0, #1
100139fa:	0a5d      	lsrs	r5, r3, #9
100139fc:	0fc3      	lsrs	r3, r0, #31
100139fe:	0248      	lsls	r0, r1, #9
10013a00:	0a44      	lsrs	r4, r0, #9
10013a02:	0048      	lsls	r0, r1, #1
10013a04:	0e12      	lsrs	r2, r2, #24
10013a06:	0e00      	lsrs	r0, r0, #24
10013a08:	0fc9      	lsrs	r1, r1, #31
10013a0a:	2aff      	cmp	r2, #255	; 0xff
10013a0c:	d01f      	beq.n	10013a4e <__gesf2+0x5a>
10013a0e:	28ff      	cmp	r0, #255	; 0xff
10013a10:	d022      	beq.n	10013a58 <__gesf2+0x64>
10013a12:	2a00      	cmp	r2, #0
10013a14:	d109      	bne.n	10013a2a <__gesf2+0x36>
10013a16:	426e      	negs	r6, r5
10013a18:	416e      	adcs	r6, r5
10013a1a:	2800      	cmp	r0, #0
10013a1c:	d10f      	bne.n	10013a3e <__gesf2+0x4a>
10013a1e:	2c00      	cmp	r4, #0
10013a20:	d10d      	bne.n	10013a3e <__gesf2+0x4a>
10013a22:	2000      	movs	r0, #0
10013a24:	2d00      	cmp	r5, #0
10013a26:	d009      	beq.n	10013a3c <__gesf2+0x48>
10013a28:	e005      	b.n	10013a36 <__gesf2+0x42>
10013a2a:	2800      	cmp	r0, #0
10013a2c:	d101      	bne.n	10013a32 <__gesf2+0x3e>
10013a2e:	2c00      	cmp	r4, #0
10013a30:	d001      	beq.n	10013a36 <__gesf2+0x42>
10013a32:	428b      	cmp	r3, r1
10013a34:	d013      	beq.n	10013a5e <__gesf2+0x6a>
10013a36:	4258      	negs	r0, r3
10013a38:	2301      	movs	r3, #1
10013a3a:	4318      	orrs	r0, r3
10013a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a3e:	2e00      	cmp	r6, #0
10013a40:	d0f7      	beq.n	10013a32 <__gesf2+0x3e>
10013a42:	4248      	negs	r0, r1
10013a44:	4141      	adcs	r1, r0
10013a46:	2001      	movs	r0, #1
10013a48:	4249      	negs	r1, r1
10013a4a:	4308      	orrs	r0, r1
10013a4c:	e7f6      	b.n	10013a3c <__gesf2+0x48>
10013a4e:	2d00      	cmp	r5, #0
10013a50:	d0dd      	beq.n	10013a0e <__gesf2+0x1a>
10013a52:	2002      	movs	r0, #2
10013a54:	4240      	negs	r0, r0
10013a56:	e7f1      	b.n	10013a3c <__gesf2+0x48>
10013a58:	2c00      	cmp	r4, #0
10013a5a:	d0da      	beq.n	10013a12 <__gesf2+0x1e>
10013a5c:	e7f9      	b.n	10013a52 <__gesf2+0x5e>
10013a5e:	4282      	cmp	r2, r0
10013a60:	dce9      	bgt.n	10013a36 <__gesf2+0x42>
10013a62:	db04      	blt.n	10013a6e <__gesf2+0x7a>
10013a64:	42a5      	cmp	r5, r4
10013a66:	d8e6      	bhi.n	10013a36 <__gesf2+0x42>
10013a68:	2000      	movs	r0, #0
10013a6a:	42a5      	cmp	r5, r4
10013a6c:	d2e6      	bcs.n	10013a3c <__gesf2+0x48>
10013a6e:	4258      	negs	r0, r3
10013a70:	4143      	adcs	r3, r0
10013a72:	2001      	movs	r0, #1
10013a74:	425b      	negs	r3, r3
10013a76:	4318      	orrs	r0, r3
10013a78:	e7e0      	b.n	10013a3c <__gesf2+0x48>
10013a7a:	46c0      	nop			; (mov r8, r8)

10013a7c <__lesf2>:
10013a7c:	0243      	lsls	r3, r0, #9
10013a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
10013a80:	0042      	lsls	r2, r0, #1
10013a82:	004c      	lsls	r4, r1, #1
10013a84:	0a5e      	lsrs	r6, r3, #9
10013a86:	0fc3      	lsrs	r3, r0, #31
10013a88:	0248      	lsls	r0, r1, #9
10013a8a:	0e12      	lsrs	r2, r2, #24
10013a8c:	0a45      	lsrs	r5, r0, #9
10013a8e:	0e24      	lsrs	r4, r4, #24
10013a90:	0fc9      	lsrs	r1, r1, #31
10013a92:	2aff      	cmp	r2, #255	; 0xff
10013a94:	d017      	beq.n	10013ac6 <__lesf2+0x4a>
10013a96:	2cff      	cmp	r4, #255	; 0xff
10013a98:	d019      	beq.n	10013ace <__lesf2+0x52>
10013a9a:	2a00      	cmp	r2, #0
10013a9c:	d10b      	bne.n	10013ab6 <__lesf2+0x3a>
10013a9e:	4270      	negs	r0, r6
10013aa0:	4170      	adcs	r0, r6
10013aa2:	2c00      	cmp	r4, #0
10013aa4:	d017      	beq.n	10013ad6 <__lesf2+0x5a>
10013aa6:	2800      	cmp	r0, #0
10013aa8:	d007      	beq.n	10013aba <__lesf2+0x3e>
10013aaa:	4248      	negs	r0, r1
10013aac:	4141      	adcs	r1, r0
10013aae:	2001      	movs	r0, #1
10013ab0:	4249      	negs	r1, r1
10013ab2:	4308      	orrs	r0, r1
10013ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013ab6:	2c00      	cmp	r4, #0
10013ab8:	d013      	beq.n	10013ae2 <__lesf2+0x66>
10013aba:	428b      	cmp	r3, r1
10013abc:	d014      	beq.n	10013ae8 <__lesf2+0x6c>
10013abe:	4258      	negs	r0, r3
10013ac0:	2301      	movs	r3, #1
10013ac2:	4318      	orrs	r0, r3
10013ac4:	e7f6      	b.n	10013ab4 <__lesf2+0x38>
10013ac6:	2002      	movs	r0, #2
10013ac8:	2e00      	cmp	r6, #0
10013aca:	d1f3      	bne.n	10013ab4 <__lesf2+0x38>
10013acc:	e7e3      	b.n	10013a96 <__lesf2+0x1a>
10013ace:	2002      	movs	r0, #2
10013ad0:	2d00      	cmp	r5, #0
10013ad2:	d1ef      	bne.n	10013ab4 <__lesf2+0x38>
10013ad4:	e7e1      	b.n	10013a9a <__lesf2+0x1e>
10013ad6:	2d00      	cmp	r5, #0
10013ad8:	d1e5      	bne.n	10013aa6 <__lesf2+0x2a>
10013ada:	2000      	movs	r0, #0
10013adc:	2e00      	cmp	r6, #0
10013ade:	d0e9      	beq.n	10013ab4 <__lesf2+0x38>
10013ae0:	e7ed      	b.n	10013abe <__lesf2+0x42>
10013ae2:	2d00      	cmp	r5, #0
10013ae4:	d1e9      	bne.n	10013aba <__lesf2+0x3e>
10013ae6:	e7ea      	b.n	10013abe <__lesf2+0x42>
10013ae8:	42a2      	cmp	r2, r4
10013aea:	dce8      	bgt.n	10013abe <__lesf2+0x42>
10013aec:	db04      	blt.n	10013af8 <__lesf2+0x7c>
10013aee:	42ae      	cmp	r6, r5
10013af0:	d8e5      	bhi.n	10013abe <__lesf2+0x42>
10013af2:	2000      	movs	r0, #0
10013af4:	42ae      	cmp	r6, r5
10013af6:	d2dd      	bcs.n	10013ab4 <__lesf2+0x38>
10013af8:	4258      	negs	r0, r3
10013afa:	4143      	adcs	r3, r0
10013afc:	2001      	movs	r0, #1
10013afe:	425b      	negs	r3, r3
10013b00:	4318      	orrs	r0, r3
10013b02:	e7d7      	b.n	10013ab4 <__lesf2+0x38>

10013b04 <__aeabi_fmul>:
10013b04:	b5f0      	push	{r4, r5, r6, r7, lr}
10013b06:	4657      	mov	r7, sl
10013b08:	464e      	mov	r6, r9
10013b0a:	4645      	mov	r5, r8
10013b0c:	0043      	lsls	r3, r0, #1
10013b0e:	b4e0      	push	{r5, r6, r7}
10013b10:	0246      	lsls	r6, r0, #9
10013b12:	4688      	mov	r8, r1
10013b14:	0a76      	lsrs	r6, r6, #9
10013b16:	0e1f      	lsrs	r7, r3, #24
10013b18:	0fc4      	lsrs	r4, r0, #31
10013b1a:	2f00      	cmp	r7, #0
10013b1c:	d047      	beq.n	10013bae <__aeabi_fmul+0xaa>
10013b1e:	2fff      	cmp	r7, #255	; 0xff
10013b20:	d025      	beq.n	10013b6e <__aeabi_fmul+0x6a>
10013b22:	2300      	movs	r3, #0
10013b24:	2580      	movs	r5, #128	; 0x80
10013b26:	469a      	mov	sl, r3
10013b28:	4699      	mov	r9, r3
10013b2a:	00f6      	lsls	r6, r6, #3
10013b2c:	04ed      	lsls	r5, r5, #19
10013b2e:	432e      	orrs	r6, r5
10013b30:	3f7f      	subs	r7, #127	; 0x7f
10013b32:	4643      	mov	r3, r8
10013b34:	4642      	mov	r2, r8
10013b36:	025d      	lsls	r5, r3, #9
10013b38:	0fd2      	lsrs	r2, r2, #31
10013b3a:	005b      	lsls	r3, r3, #1
10013b3c:	0a6d      	lsrs	r5, r5, #9
10013b3e:	0e1b      	lsrs	r3, r3, #24
10013b40:	4690      	mov	r8, r2
10013b42:	d040      	beq.n	10013bc6 <__aeabi_fmul+0xc2>
10013b44:	2bff      	cmp	r3, #255	; 0xff
10013b46:	d039      	beq.n	10013bbc <__aeabi_fmul+0xb8>
10013b48:	2280      	movs	r2, #128	; 0x80
10013b4a:	2000      	movs	r0, #0
10013b4c:	00ed      	lsls	r5, r5, #3
10013b4e:	04d2      	lsls	r2, r2, #19
10013b50:	4315      	orrs	r5, r2
10013b52:	3b7f      	subs	r3, #127	; 0x7f
10013b54:	18fb      	adds	r3, r7, r3
10013b56:	4642      	mov	r2, r8
10013b58:	4657      	mov	r7, sl
10013b5a:	1c59      	adds	r1, r3, #1
10013b5c:	4062      	eors	r2, r4
10013b5e:	468c      	mov	ip, r1
10013b60:	4307      	orrs	r7, r0
10013b62:	2f0f      	cmp	r7, #15
10013b64:	d85c      	bhi.n	10013c20 <__aeabi_fmul+0x11c>
10013b66:	496f      	ldr	r1, [pc, #444]	; (10013d24 <__aeabi_fmul+0x220>)
10013b68:	00bf      	lsls	r7, r7, #2
10013b6a:	59c9      	ldr	r1, [r1, r7]
10013b6c:	468f      	mov	pc, r1
10013b6e:	2e00      	cmp	r6, #0
10013b70:	d145      	bne.n	10013bfe <__aeabi_fmul+0xfa>
10013b72:	2308      	movs	r3, #8
10013b74:	469a      	mov	sl, r3
10013b76:	3b06      	subs	r3, #6
10013b78:	4699      	mov	r9, r3
10013b7a:	e7da      	b.n	10013b32 <__aeabi_fmul+0x2e>
10013b7c:	4642      	mov	r2, r8
10013b7e:	2802      	cmp	r0, #2
10013b80:	d02d      	beq.n	10013bde <__aeabi_fmul+0xda>
10013b82:	2803      	cmp	r0, #3
10013b84:	d100      	bne.n	10013b88 <__aeabi_fmul+0x84>
10013b86:	e0c3      	b.n	10013d10 <__aeabi_fmul+0x20c>
10013b88:	2801      	cmp	r0, #1
10013b8a:	d000      	beq.n	10013b8e <__aeabi_fmul+0x8a>
10013b8c:	e0a2      	b.n	10013cd4 <__aeabi_fmul+0x1d0>
10013b8e:	2500      	movs	r5, #0
10013b90:	2600      	movs	r6, #0
10013b92:	4002      	ands	r2, r0
10013b94:	b2d4      	uxtb	r4, r2
10013b96:	0276      	lsls	r6, r6, #9
10013b98:	05ed      	lsls	r5, r5, #23
10013b9a:	0a76      	lsrs	r6, r6, #9
10013b9c:	432e      	orrs	r6, r5
10013b9e:	07e4      	lsls	r4, r4, #31
10013ba0:	4326      	orrs	r6, r4
10013ba2:	0030      	movs	r0, r6
10013ba4:	bc1c      	pop	{r2, r3, r4}
10013ba6:	4690      	mov	r8, r2
10013ba8:	4699      	mov	r9, r3
10013baa:	46a2      	mov	sl, r4
10013bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013bae:	2e00      	cmp	r6, #0
10013bb0:	d11a      	bne.n	10013be8 <__aeabi_fmul+0xe4>
10013bb2:	2304      	movs	r3, #4
10013bb4:	469a      	mov	sl, r3
10013bb6:	3b03      	subs	r3, #3
10013bb8:	4699      	mov	r9, r3
10013bba:	e7ba      	b.n	10013b32 <__aeabi_fmul+0x2e>
10013bbc:	002a      	movs	r2, r5
10013bbe:	1e51      	subs	r1, r2, #1
10013bc0:	418a      	sbcs	r2, r1
10013bc2:	1c90      	adds	r0, r2, #2
10013bc4:	e7c6      	b.n	10013b54 <__aeabi_fmul+0x50>
10013bc6:	2001      	movs	r0, #1
10013bc8:	2d00      	cmp	r5, #0
10013bca:	d0c3      	beq.n	10013b54 <__aeabi_fmul+0x50>
10013bcc:	0028      	movs	r0, r5
10013bce:	f001 fa25 	bl	1001501c <__clzsi2>
10013bd2:	1f43      	subs	r3, r0, #5
10013bd4:	3076      	adds	r0, #118	; 0x76
10013bd6:	409d      	lsls	r5, r3
10013bd8:	4243      	negs	r3, r0
10013bda:	2000      	movs	r0, #0
10013bdc:	e7ba      	b.n	10013b54 <__aeabi_fmul+0x50>
10013bde:	2401      	movs	r4, #1
10013be0:	25ff      	movs	r5, #255	; 0xff
10013be2:	4014      	ands	r4, r2
10013be4:	2600      	movs	r6, #0
10013be6:	e7d6      	b.n	10013b96 <__aeabi_fmul+0x92>
10013be8:	0030      	movs	r0, r6
10013bea:	f001 fa17 	bl	1001501c <__clzsi2>
10013bee:	1f43      	subs	r3, r0, #5
10013bf0:	409e      	lsls	r6, r3
10013bf2:	2300      	movs	r3, #0
10013bf4:	3076      	adds	r0, #118	; 0x76
10013bf6:	4247      	negs	r7, r0
10013bf8:	469a      	mov	sl, r3
10013bfa:	4699      	mov	r9, r3
10013bfc:	e799      	b.n	10013b32 <__aeabi_fmul+0x2e>
10013bfe:	230c      	movs	r3, #12
10013c00:	469a      	mov	sl, r3
10013c02:	3b09      	subs	r3, #9
10013c04:	4699      	mov	r9, r3
10013c06:	e794      	b.n	10013b32 <__aeabi_fmul+0x2e>
10013c08:	2680      	movs	r6, #128	; 0x80
10013c0a:	2400      	movs	r4, #0
10013c0c:	03f6      	lsls	r6, r6, #15
10013c0e:	25ff      	movs	r5, #255	; 0xff
10013c10:	e7c1      	b.n	10013b96 <__aeabi_fmul+0x92>
10013c12:	0035      	movs	r5, r6
10013c14:	4648      	mov	r0, r9
10013c16:	e7b2      	b.n	10013b7e <__aeabi_fmul+0x7a>
10013c18:	0035      	movs	r5, r6
10013c1a:	0022      	movs	r2, r4
10013c1c:	4648      	mov	r0, r9
10013c1e:	e7ae      	b.n	10013b7e <__aeabi_fmul+0x7a>
10013c20:	0429      	lsls	r1, r5, #16
10013c22:	0c09      	lsrs	r1, r1, #16
10013c24:	0008      	movs	r0, r1
10013c26:	0c37      	lsrs	r7, r6, #16
10013c28:	0436      	lsls	r6, r6, #16
10013c2a:	0c36      	lsrs	r6, r6, #16
10013c2c:	0c2c      	lsrs	r4, r5, #16
10013c2e:	4379      	muls	r1, r7
10013c30:	4370      	muls	r0, r6
10013c32:	4367      	muls	r7, r4
10013c34:	4374      	muls	r4, r6
10013c36:	0c06      	lsrs	r6, r0, #16
10013c38:	1864      	adds	r4, r4, r1
10013c3a:	1936      	adds	r6, r6, r4
10013c3c:	42b1      	cmp	r1, r6
10013c3e:	d903      	bls.n	10013c48 <__aeabi_fmul+0x144>
10013c40:	2180      	movs	r1, #128	; 0x80
10013c42:	0249      	lsls	r1, r1, #9
10013c44:	4688      	mov	r8, r1
10013c46:	4447      	add	r7, r8
10013c48:	0400      	lsls	r0, r0, #16
10013c4a:	0c00      	lsrs	r0, r0, #16
10013c4c:	0431      	lsls	r1, r6, #16
10013c4e:	1809      	adds	r1, r1, r0
10013c50:	018d      	lsls	r5, r1, #6
10013c52:	1e68      	subs	r0, r5, #1
10013c54:	4185      	sbcs	r5, r0
10013c56:	0e89      	lsrs	r1, r1, #26
10013c58:	4329      	orrs	r1, r5
10013c5a:	0c35      	lsrs	r5, r6, #16
10013c5c:	19ed      	adds	r5, r5, r7
10013c5e:	01ad      	lsls	r5, r5, #6
10013c60:	430d      	orrs	r5, r1
10013c62:	0129      	lsls	r1, r5, #4
10013c64:	d504      	bpl.n	10013c70 <__aeabi_fmul+0x16c>
10013c66:	2301      	movs	r3, #1
10013c68:	0869      	lsrs	r1, r5, #1
10013c6a:	401d      	ands	r5, r3
10013c6c:	4663      	mov	r3, ip
10013c6e:	430d      	orrs	r5, r1
10013c70:	0019      	movs	r1, r3
10013c72:	317f      	adds	r1, #127	; 0x7f
10013c74:	2900      	cmp	r1, #0
10013c76:	dd25      	ble.n	10013cc4 <__aeabi_fmul+0x1c0>
10013c78:	0768      	lsls	r0, r5, #29
10013c7a:	d004      	beq.n	10013c86 <__aeabi_fmul+0x182>
10013c7c:	200f      	movs	r0, #15
10013c7e:	4028      	ands	r0, r5
10013c80:	2804      	cmp	r0, #4
10013c82:	d000      	beq.n	10013c86 <__aeabi_fmul+0x182>
10013c84:	3504      	adds	r5, #4
10013c86:	0128      	lsls	r0, r5, #4
10013c88:	d503      	bpl.n	10013c92 <__aeabi_fmul+0x18e>
10013c8a:	4927      	ldr	r1, [pc, #156]	; (10013d28 <__aeabi_fmul+0x224>)
10013c8c:	3380      	adds	r3, #128	; 0x80
10013c8e:	400d      	ands	r5, r1
10013c90:	0019      	movs	r1, r3
10013c92:	29fe      	cmp	r1, #254	; 0xfe
10013c94:	dca3      	bgt.n	10013bde <__aeabi_fmul+0xda>
10013c96:	2401      	movs	r4, #1
10013c98:	01ad      	lsls	r5, r5, #6
10013c9a:	0a6e      	lsrs	r6, r5, #9
10013c9c:	4014      	ands	r4, r2
10013c9e:	b2cd      	uxtb	r5, r1
10013ca0:	e779      	b.n	10013b96 <__aeabi_fmul+0x92>
10013ca2:	2080      	movs	r0, #128	; 0x80
10013ca4:	03c0      	lsls	r0, r0, #15
10013ca6:	4206      	tst	r6, r0
10013ca8:	d007      	beq.n	10013cba <__aeabi_fmul+0x1b6>
10013caa:	4205      	tst	r5, r0
10013cac:	d105      	bne.n	10013cba <__aeabi_fmul+0x1b6>
10013cae:	4328      	orrs	r0, r5
10013cb0:	0246      	lsls	r6, r0, #9
10013cb2:	0a76      	lsrs	r6, r6, #9
10013cb4:	4644      	mov	r4, r8
10013cb6:	25ff      	movs	r5, #255	; 0xff
10013cb8:	e76d      	b.n	10013b96 <__aeabi_fmul+0x92>
10013cba:	4306      	orrs	r6, r0
10013cbc:	0276      	lsls	r6, r6, #9
10013cbe:	0a76      	lsrs	r6, r6, #9
10013cc0:	25ff      	movs	r5, #255	; 0xff
10013cc2:	e768      	b.n	10013b96 <__aeabi_fmul+0x92>
10013cc4:	2401      	movs	r4, #1
10013cc6:	1a61      	subs	r1, r4, r1
10013cc8:	291b      	cmp	r1, #27
10013cca:	dd05      	ble.n	10013cd8 <__aeabi_fmul+0x1d4>
10013ccc:	4014      	ands	r4, r2
10013cce:	2500      	movs	r5, #0
10013cd0:	2600      	movs	r6, #0
10013cd2:	e760      	b.n	10013b96 <__aeabi_fmul+0x92>
10013cd4:	4663      	mov	r3, ip
10013cd6:	e7cb      	b.n	10013c70 <__aeabi_fmul+0x16c>
10013cd8:	002e      	movs	r6, r5
10013cda:	2320      	movs	r3, #32
10013cdc:	40ce      	lsrs	r6, r1
10013cde:	1a59      	subs	r1, r3, r1
10013ce0:	408d      	lsls	r5, r1
10013ce2:	1e6b      	subs	r3, r5, #1
10013ce4:	419d      	sbcs	r5, r3
10013ce6:	432e      	orrs	r6, r5
10013ce8:	0773      	lsls	r3, r6, #29
10013cea:	d004      	beq.n	10013cf6 <__aeabi_fmul+0x1f2>
10013cec:	230f      	movs	r3, #15
10013cee:	4033      	ands	r3, r6
10013cf0:	2b04      	cmp	r3, #4
10013cf2:	d000      	beq.n	10013cf6 <__aeabi_fmul+0x1f2>
10013cf4:	3604      	adds	r6, #4
10013cf6:	0173      	lsls	r3, r6, #5
10013cf8:	d504      	bpl.n	10013d04 <__aeabi_fmul+0x200>
10013cfa:	2401      	movs	r4, #1
10013cfc:	2501      	movs	r5, #1
10013cfe:	4014      	ands	r4, r2
10013d00:	2600      	movs	r6, #0
10013d02:	e748      	b.n	10013b96 <__aeabi_fmul+0x92>
10013d04:	2401      	movs	r4, #1
10013d06:	01b6      	lsls	r6, r6, #6
10013d08:	0a76      	lsrs	r6, r6, #9
10013d0a:	4014      	ands	r4, r2
10013d0c:	2500      	movs	r5, #0
10013d0e:	e742      	b.n	10013b96 <__aeabi_fmul+0x92>
10013d10:	2680      	movs	r6, #128	; 0x80
10013d12:	2401      	movs	r4, #1
10013d14:	03f6      	lsls	r6, r6, #15
10013d16:	432e      	orrs	r6, r5
10013d18:	0276      	lsls	r6, r6, #9
10013d1a:	0a76      	lsrs	r6, r6, #9
10013d1c:	4014      	ands	r4, r2
10013d1e:	25ff      	movs	r5, #255	; 0xff
10013d20:	e739      	b.n	10013b96 <__aeabi_fmul+0x92>
10013d22:	46c0      	nop			; (mov r8, r8)
10013d24:	10018300 	.word	0x10018300
10013d28:	f7ffffff 	.word	0xf7ffffff

10013d2c <__aeabi_fsub>:
10013d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013d2e:	024a      	lsls	r2, r1, #9
10013d30:	004e      	lsls	r6, r1, #1
10013d32:	0243      	lsls	r3, r0, #9
10013d34:	0044      	lsls	r4, r0, #1
10013d36:	0e24      	lsrs	r4, r4, #24
10013d38:	0fc5      	lsrs	r5, r0, #31
10013d3a:	099b      	lsrs	r3, r3, #6
10013d3c:	0e36      	lsrs	r6, r6, #24
10013d3e:	0fc9      	lsrs	r1, r1, #31
10013d40:	0992      	lsrs	r2, r2, #6
10013d42:	2eff      	cmp	r6, #255	; 0xff
10013d44:	d100      	bne.n	10013d48 <__aeabi_fsub+0x1c>
10013d46:	e083      	b.n	10013e50 <__aeabi_fsub+0x124>
10013d48:	2001      	movs	r0, #1
10013d4a:	4041      	eors	r1, r0
10013d4c:	1ba0      	subs	r0, r4, r6
10013d4e:	42a9      	cmp	r1, r5
10013d50:	d05c      	beq.n	10013e0c <__aeabi_fsub+0xe0>
10013d52:	2800      	cmp	r0, #0
10013d54:	dc00      	bgt.n	10013d58 <__aeabi_fsub+0x2c>
10013d56:	e095      	b.n	10013e84 <__aeabi_fsub+0x158>
10013d58:	2e00      	cmp	r6, #0
10013d5a:	d11c      	bne.n	10013d96 <__aeabi_fsub+0x6a>
10013d5c:	2a00      	cmp	r2, #0
10013d5e:	d000      	beq.n	10013d62 <__aeabi_fsub+0x36>
10013d60:	e081      	b.n	10013e66 <__aeabi_fsub+0x13a>
10013d62:	075a      	lsls	r2, r3, #29
10013d64:	d004      	beq.n	10013d70 <__aeabi_fsub+0x44>
10013d66:	220f      	movs	r2, #15
10013d68:	401a      	ands	r2, r3
10013d6a:	2a04      	cmp	r2, #4
10013d6c:	d000      	beq.n	10013d70 <__aeabi_fsub+0x44>
10013d6e:	3304      	adds	r3, #4
10013d70:	015a      	lsls	r2, r3, #5
10013d72:	d53b      	bpl.n	10013dec <__aeabi_fsub+0xc0>
10013d74:	3401      	adds	r4, #1
10013d76:	2cff      	cmp	r4, #255	; 0xff
10013d78:	d100      	bne.n	10013d7c <__aeabi_fsub+0x50>
10013d7a:	e091      	b.n	10013ea0 <__aeabi_fsub+0x174>
10013d7c:	2001      	movs	r0, #1
10013d7e:	019b      	lsls	r3, r3, #6
10013d80:	0a5b      	lsrs	r3, r3, #9
10013d82:	b2e4      	uxtb	r4, r4
10013d84:	4005      	ands	r5, r0
10013d86:	025b      	lsls	r3, r3, #9
10013d88:	05e4      	lsls	r4, r4, #23
10013d8a:	0a5b      	lsrs	r3, r3, #9
10013d8c:	07ed      	lsls	r5, r5, #31
10013d8e:	4323      	orrs	r3, r4
10013d90:	432b      	orrs	r3, r5
10013d92:	0018      	movs	r0, r3
10013d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013d96:	2cff      	cmp	r4, #255	; 0xff
10013d98:	d0e3      	beq.n	10013d62 <__aeabi_fsub+0x36>
10013d9a:	2180      	movs	r1, #128	; 0x80
10013d9c:	04c9      	lsls	r1, r1, #19
10013d9e:	430a      	orrs	r2, r1
10013da0:	281b      	cmp	r0, #27
10013da2:	dd00      	ble.n	10013da6 <__aeabi_fsub+0x7a>
10013da4:	e090      	b.n	10013ec8 <__aeabi_fsub+0x19c>
10013da6:	0016      	movs	r6, r2
10013da8:	2120      	movs	r1, #32
10013daa:	40c6      	lsrs	r6, r0
10013dac:	1a08      	subs	r0, r1, r0
10013dae:	4082      	lsls	r2, r0
10013db0:	1e51      	subs	r1, r2, #1
10013db2:	418a      	sbcs	r2, r1
10013db4:	4332      	orrs	r2, r6
10013db6:	1a9b      	subs	r3, r3, r2
10013db8:	015a      	lsls	r2, r3, #5
10013dba:	d515      	bpl.n	10013de8 <__aeabi_fsub+0xbc>
10013dbc:	019b      	lsls	r3, r3, #6
10013dbe:	099e      	lsrs	r6, r3, #6
10013dc0:	0030      	movs	r0, r6
10013dc2:	f001 f92b 	bl	1001501c <__clzsi2>
10013dc6:	3805      	subs	r0, #5
10013dc8:	4086      	lsls	r6, r0
10013dca:	4284      	cmp	r4, r0
10013dcc:	dc6c      	bgt.n	10013ea8 <__aeabi_fsub+0x17c>
10013dce:	1b04      	subs	r4, r0, r4
10013dd0:	0033      	movs	r3, r6
10013dd2:	2020      	movs	r0, #32
10013dd4:	3401      	adds	r4, #1
10013dd6:	40e3      	lsrs	r3, r4
10013dd8:	1b04      	subs	r4, r0, r4
10013dda:	40a6      	lsls	r6, r4
10013ddc:	1e72      	subs	r2, r6, #1
10013dde:	4196      	sbcs	r6, r2
10013de0:	2400      	movs	r4, #0
10013de2:	4333      	orrs	r3, r6
10013de4:	e7bd      	b.n	10013d62 <__aeabi_fsub+0x36>
10013de6:	000d      	movs	r5, r1
10013de8:	075a      	lsls	r2, r3, #29
10013dea:	d1bc      	bne.n	10013d66 <__aeabi_fsub+0x3a>
10013dec:	08df      	lsrs	r7, r3, #3
10013dee:	2301      	movs	r3, #1
10013df0:	401d      	ands	r5, r3
10013df2:	2cff      	cmp	r4, #255	; 0xff
10013df4:	d133      	bne.n	10013e5e <__aeabi_fsub+0x132>
10013df6:	2f00      	cmp	r7, #0
10013df8:	d100      	bne.n	10013dfc <__aeabi_fsub+0xd0>
10013dfa:	e090      	b.n	10013f1e <__aeabi_fsub+0x1f2>
10013dfc:	2280      	movs	r2, #128	; 0x80
10013dfe:	03d2      	lsls	r2, r2, #15
10013e00:	0013      	movs	r3, r2
10013e02:	433b      	orrs	r3, r7
10013e04:	025b      	lsls	r3, r3, #9
10013e06:	0a5b      	lsrs	r3, r3, #9
10013e08:	24ff      	movs	r4, #255	; 0xff
10013e0a:	e7bc      	b.n	10013d86 <__aeabi_fsub+0x5a>
10013e0c:	2800      	cmp	r0, #0
10013e0e:	dd4f      	ble.n	10013eb0 <__aeabi_fsub+0x184>
10013e10:	2e00      	cmp	r6, #0
10013e12:	d02e      	beq.n	10013e72 <__aeabi_fsub+0x146>
10013e14:	2cff      	cmp	r4, #255	; 0xff
10013e16:	d0a4      	beq.n	10013d62 <__aeabi_fsub+0x36>
10013e18:	2580      	movs	r5, #128	; 0x80
10013e1a:	04ed      	lsls	r5, r5, #19
10013e1c:	432a      	orrs	r2, r5
10013e1e:	281b      	cmp	r0, #27
10013e20:	dd00      	ble.n	10013e24 <__aeabi_fsub+0xf8>
10013e22:	e097      	b.n	10013f54 <__aeabi_fsub+0x228>
10013e24:	0016      	movs	r6, r2
10013e26:	2520      	movs	r5, #32
10013e28:	40c6      	lsrs	r6, r0
10013e2a:	1a28      	subs	r0, r5, r0
10013e2c:	4082      	lsls	r2, r0
10013e2e:	1e50      	subs	r0, r2, #1
10013e30:	4182      	sbcs	r2, r0
10013e32:	4332      	orrs	r2, r6
10013e34:	189b      	adds	r3, r3, r2
10013e36:	015a      	lsls	r2, r3, #5
10013e38:	d5d5      	bpl.n	10013de6 <__aeabi_fsub+0xba>
10013e3a:	3401      	adds	r4, #1
10013e3c:	2cff      	cmp	r4, #255	; 0xff
10013e3e:	d06d      	beq.n	10013f1c <__aeabi_fsub+0x1f0>
10013e40:	2201      	movs	r2, #1
10013e42:	487b      	ldr	r0, [pc, #492]	; (10014030 <__aeabi_fsub+0x304>)
10013e44:	401a      	ands	r2, r3
10013e46:	085b      	lsrs	r3, r3, #1
10013e48:	4003      	ands	r3, r0
10013e4a:	4313      	orrs	r3, r2
10013e4c:	000d      	movs	r5, r1
10013e4e:	e788      	b.n	10013d62 <__aeabi_fsub+0x36>
10013e50:	2a00      	cmp	r2, #0
10013e52:	d000      	beq.n	10013e56 <__aeabi_fsub+0x12a>
10013e54:	e77a      	b.n	10013d4c <__aeabi_fsub+0x20>
10013e56:	e777      	b.n	10013d48 <__aeabi_fsub+0x1c>
10013e58:	1e03      	subs	r3, r0, #0
10013e5a:	d1c5      	bne.n	10013de8 <__aeabi_fsub+0xbc>
10013e5c:	2500      	movs	r5, #0
10013e5e:	027b      	lsls	r3, r7, #9
10013e60:	0a5b      	lsrs	r3, r3, #9
10013e62:	b2e4      	uxtb	r4, r4
10013e64:	e78f      	b.n	10013d86 <__aeabi_fsub+0x5a>
10013e66:	3801      	subs	r0, #1
10013e68:	2800      	cmp	r0, #0
10013e6a:	d0a4      	beq.n	10013db6 <__aeabi_fsub+0x8a>
10013e6c:	2cff      	cmp	r4, #255	; 0xff
10013e6e:	d197      	bne.n	10013da0 <__aeabi_fsub+0x74>
10013e70:	e777      	b.n	10013d62 <__aeabi_fsub+0x36>
10013e72:	2a00      	cmp	r2, #0
10013e74:	d100      	bne.n	10013e78 <__aeabi_fsub+0x14c>
10013e76:	e774      	b.n	10013d62 <__aeabi_fsub+0x36>
10013e78:	3801      	subs	r0, #1
10013e7a:	2800      	cmp	r0, #0
10013e7c:	d0da      	beq.n	10013e34 <__aeabi_fsub+0x108>
10013e7e:	2cff      	cmp	r4, #255	; 0xff
10013e80:	d1cd      	bne.n	10013e1e <__aeabi_fsub+0xf2>
10013e82:	e76e      	b.n	10013d62 <__aeabi_fsub+0x36>
10013e84:	2800      	cmp	r0, #0
10013e86:	d121      	bne.n	10013ecc <__aeabi_fsub+0x1a0>
10013e88:	1c60      	adds	r0, r4, #1
10013e8a:	b2c0      	uxtb	r0, r0
10013e8c:	2801      	cmp	r0, #1
10013e8e:	dd58      	ble.n	10013f42 <__aeabi_fsub+0x216>
10013e90:	2780      	movs	r7, #128	; 0x80
10013e92:	1a9e      	subs	r6, r3, r2
10013e94:	04ff      	lsls	r7, r7, #19
10013e96:	4037      	ands	r7, r6
10013e98:	d02f      	beq.n	10013efa <__aeabi_fsub+0x1ce>
10013e9a:	1ad6      	subs	r6, r2, r3
10013e9c:	000d      	movs	r5, r1
10013e9e:	e78f      	b.n	10013dc0 <__aeabi_fsub+0x94>
10013ea0:	2301      	movs	r3, #1
10013ea2:	401d      	ands	r5, r3
10013ea4:	2300      	movs	r3, #0
10013ea6:	e76e      	b.n	10013d86 <__aeabi_fsub+0x5a>
10013ea8:	4b62      	ldr	r3, [pc, #392]	; (10014034 <__aeabi_fsub+0x308>)
10013eaa:	1a24      	subs	r4, r4, r0
10013eac:	4033      	ands	r3, r6
10013eae:	e758      	b.n	10013d62 <__aeabi_fsub+0x36>
10013eb0:	2800      	cmp	r0, #0
10013eb2:	d151      	bne.n	10013f58 <__aeabi_fsub+0x22c>
10013eb4:	1c60      	adds	r0, r4, #1
10013eb6:	b2c6      	uxtb	r6, r0
10013eb8:	2e01      	cmp	r6, #1
10013eba:	dd33      	ble.n	10013f24 <__aeabi_fsub+0x1f8>
10013ebc:	28ff      	cmp	r0, #255	; 0xff
10013ebe:	d02d      	beq.n	10013f1c <__aeabi_fsub+0x1f0>
10013ec0:	189b      	adds	r3, r3, r2
10013ec2:	085b      	lsrs	r3, r3, #1
10013ec4:	0004      	movs	r4, r0
10013ec6:	e74c      	b.n	10013d62 <__aeabi_fsub+0x36>
10013ec8:	2201      	movs	r2, #1
10013eca:	e774      	b.n	10013db6 <__aeabi_fsub+0x8a>
10013ecc:	2c00      	cmp	r4, #0
10013ece:	d01a      	beq.n	10013f06 <__aeabi_fsub+0x1da>
10013ed0:	2eff      	cmp	r6, #255	; 0xff
10013ed2:	d01f      	beq.n	10013f14 <__aeabi_fsub+0x1e8>
10013ed4:	2480      	movs	r4, #128	; 0x80
10013ed6:	04e4      	lsls	r4, r4, #19
10013ed8:	4240      	negs	r0, r0
10013eda:	4323      	orrs	r3, r4
10013edc:	281b      	cmp	r0, #27
10013ede:	dd00      	ble.n	10013ee2 <__aeabi_fsub+0x1b6>
10013ee0:	e096      	b.n	10014010 <__aeabi_fsub+0x2e4>
10013ee2:	001d      	movs	r5, r3
10013ee4:	2420      	movs	r4, #32
10013ee6:	40c5      	lsrs	r5, r0
10013ee8:	1a20      	subs	r0, r4, r0
10013eea:	4083      	lsls	r3, r0
10013eec:	1e58      	subs	r0, r3, #1
10013eee:	4183      	sbcs	r3, r0
10013ef0:	432b      	orrs	r3, r5
10013ef2:	1ad3      	subs	r3, r2, r3
10013ef4:	0034      	movs	r4, r6
10013ef6:	000d      	movs	r5, r1
10013ef8:	e75e      	b.n	10013db8 <__aeabi_fsub+0x8c>
10013efa:	2e00      	cmp	r6, #0
10013efc:	d000      	beq.n	10013f00 <__aeabi_fsub+0x1d4>
10013efe:	e75f      	b.n	10013dc0 <__aeabi_fsub+0x94>
10013f00:	2500      	movs	r5, #0
10013f02:	2400      	movs	r4, #0
10013f04:	e7ab      	b.n	10013e5e <__aeabi_fsub+0x132>
10013f06:	2b00      	cmp	r3, #0
10013f08:	d044      	beq.n	10013f94 <__aeabi_fsub+0x268>
10013f0a:	43c0      	mvns	r0, r0
10013f0c:	2800      	cmp	r0, #0
10013f0e:	d0f0      	beq.n	10013ef2 <__aeabi_fsub+0x1c6>
10013f10:	2eff      	cmp	r6, #255	; 0xff
10013f12:	d1e3      	bne.n	10013edc <__aeabi_fsub+0x1b0>
10013f14:	0013      	movs	r3, r2
10013f16:	24ff      	movs	r4, #255	; 0xff
10013f18:	000d      	movs	r5, r1
10013f1a:	e722      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f1c:	000d      	movs	r5, r1
10013f1e:	24ff      	movs	r4, #255	; 0xff
10013f20:	2300      	movs	r3, #0
10013f22:	e730      	b.n	10013d86 <__aeabi_fsub+0x5a>
10013f24:	2c00      	cmp	r4, #0
10013f26:	d15d      	bne.n	10013fe4 <__aeabi_fsub+0x2b8>
10013f28:	2b00      	cmp	r3, #0
10013f2a:	d07d      	beq.n	10014028 <__aeabi_fsub+0x2fc>
10013f2c:	2a00      	cmp	r2, #0
10013f2e:	d100      	bne.n	10013f32 <__aeabi_fsub+0x206>
10013f30:	e717      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f32:	189b      	adds	r3, r3, r2
10013f34:	015a      	lsls	r2, r3, #5
10013f36:	d400      	bmi.n	10013f3a <__aeabi_fsub+0x20e>
10013f38:	e756      	b.n	10013de8 <__aeabi_fsub+0xbc>
10013f3a:	4a3e      	ldr	r2, [pc, #248]	; (10014034 <__aeabi_fsub+0x308>)
10013f3c:	0004      	movs	r4, r0
10013f3e:	4013      	ands	r3, r2
10013f40:	e70f      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f42:	2c00      	cmp	r4, #0
10013f44:	d11e      	bne.n	10013f84 <__aeabi_fsub+0x258>
10013f46:	2b00      	cmp	r3, #0
10013f48:	d12f      	bne.n	10013faa <__aeabi_fsub+0x27e>
10013f4a:	2a00      	cmp	r2, #0
10013f4c:	d065      	beq.n	1001401a <__aeabi_fsub+0x2ee>
10013f4e:	0013      	movs	r3, r2
10013f50:	000d      	movs	r5, r1
10013f52:	e706      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f54:	2201      	movs	r2, #1
10013f56:	e76d      	b.n	10013e34 <__aeabi_fsub+0x108>
10013f58:	2c00      	cmp	r4, #0
10013f5a:	d11f      	bne.n	10013f9c <__aeabi_fsub+0x270>
10013f5c:	2b00      	cmp	r3, #0
10013f5e:	d059      	beq.n	10014014 <__aeabi_fsub+0x2e8>
10013f60:	43c0      	mvns	r0, r0
10013f62:	2800      	cmp	r0, #0
10013f64:	d00b      	beq.n	10013f7e <__aeabi_fsub+0x252>
10013f66:	2eff      	cmp	r6, #255	; 0xff
10013f68:	d04f      	beq.n	1001400a <__aeabi_fsub+0x2de>
10013f6a:	281b      	cmp	r0, #27
10013f6c:	dc5e      	bgt.n	1001402c <__aeabi_fsub+0x300>
10013f6e:	001d      	movs	r5, r3
10013f70:	2420      	movs	r4, #32
10013f72:	40c5      	lsrs	r5, r0
10013f74:	1a20      	subs	r0, r4, r0
10013f76:	4083      	lsls	r3, r0
10013f78:	1e58      	subs	r0, r3, #1
10013f7a:	4183      	sbcs	r3, r0
10013f7c:	432b      	orrs	r3, r5
10013f7e:	189b      	adds	r3, r3, r2
10013f80:	0034      	movs	r4, r6
10013f82:	e758      	b.n	10013e36 <__aeabi_fsub+0x10a>
10013f84:	2b00      	cmp	r3, #0
10013f86:	d11c      	bne.n	10013fc2 <__aeabi_fsub+0x296>
10013f88:	2a00      	cmp	r2, #0
10013f8a:	d049      	beq.n	10014020 <__aeabi_fsub+0x2f4>
10013f8c:	0013      	movs	r3, r2
10013f8e:	000d      	movs	r5, r1
10013f90:	24ff      	movs	r4, #255	; 0xff
10013f92:	e6e6      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f94:	0013      	movs	r3, r2
10013f96:	0034      	movs	r4, r6
10013f98:	000d      	movs	r5, r1
10013f9a:	e6e2      	b.n	10013d62 <__aeabi_fsub+0x36>
10013f9c:	2eff      	cmp	r6, #255	; 0xff
10013f9e:	d034      	beq.n	1001400a <__aeabi_fsub+0x2de>
10013fa0:	2480      	movs	r4, #128	; 0x80
10013fa2:	04e4      	lsls	r4, r4, #19
10013fa4:	4240      	negs	r0, r0
10013fa6:	4323      	orrs	r3, r4
10013fa8:	e7df      	b.n	10013f6a <__aeabi_fsub+0x23e>
10013faa:	2a00      	cmp	r2, #0
10013fac:	d100      	bne.n	10013fb0 <__aeabi_fsub+0x284>
10013fae:	e6d8      	b.n	10013d62 <__aeabi_fsub+0x36>
10013fb0:	2780      	movs	r7, #128	; 0x80
10013fb2:	1a98      	subs	r0, r3, r2
10013fb4:	04ff      	lsls	r7, r7, #19
10013fb6:	4007      	ands	r7, r0
10013fb8:	d100      	bne.n	10013fbc <__aeabi_fsub+0x290>
10013fba:	e74d      	b.n	10013e58 <__aeabi_fsub+0x12c>
10013fbc:	1ad3      	subs	r3, r2, r3
10013fbe:	000d      	movs	r5, r1
10013fc0:	e6cf      	b.n	10013d62 <__aeabi_fsub+0x36>
10013fc2:	24ff      	movs	r4, #255	; 0xff
10013fc4:	2a00      	cmp	r2, #0
10013fc6:	d100      	bne.n	10013fca <__aeabi_fsub+0x29e>
10013fc8:	e6cb      	b.n	10013d62 <__aeabi_fsub+0x36>
10013fca:	2080      	movs	r0, #128	; 0x80
10013fcc:	08db      	lsrs	r3, r3, #3
10013fce:	03c0      	lsls	r0, r0, #15
10013fd0:	4203      	tst	r3, r0
10013fd2:	d004      	beq.n	10013fde <__aeabi_fsub+0x2b2>
10013fd4:	08d2      	lsrs	r2, r2, #3
10013fd6:	4202      	tst	r2, r0
10013fd8:	d101      	bne.n	10013fde <__aeabi_fsub+0x2b2>
10013fda:	0013      	movs	r3, r2
10013fdc:	000d      	movs	r5, r1
10013fde:	00db      	lsls	r3, r3, #3
10013fe0:	24ff      	movs	r4, #255	; 0xff
10013fe2:	e6be      	b.n	10013d62 <__aeabi_fsub+0x36>
10013fe4:	2b00      	cmp	r3, #0
10013fe6:	d010      	beq.n	1001400a <__aeabi_fsub+0x2de>
10013fe8:	24ff      	movs	r4, #255	; 0xff
10013fea:	2a00      	cmp	r2, #0
10013fec:	d100      	bne.n	10013ff0 <__aeabi_fsub+0x2c4>
10013fee:	e6b8      	b.n	10013d62 <__aeabi_fsub+0x36>
10013ff0:	2080      	movs	r0, #128	; 0x80
10013ff2:	08db      	lsrs	r3, r3, #3
10013ff4:	03c0      	lsls	r0, r0, #15
10013ff6:	4203      	tst	r3, r0
10013ff8:	d003      	beq.n	10014002 <__aeabi_fsub+0x2d6>
10013ffa:	08d2      	lsrs	r2, r2, #3
10013ffc:	4202      	tst	r2, r0
10013ffe:	d100      	bne.n	10014002 <__aeabi_fsub+0x2d6>
10014000:	0013      	movs	r3, r2
10014002:	00db      	lsls	r3, r3, #3
10014004:	000d      	movs	r5, r1
10014006:	24ff      	movs	r4, #255	; 0xff
10014008:	e6ab      	b.n	10013d62 <__aeabi_fsub+0x36>
1001400a:	0013      	movs	r3, r2
1001400c:	24ff      	movs	r4, #255	; 0xff
1001400e:	e6a8      	b.n	10013d62 <__aeabi_fsub+0x36>
10014010:	2301      	movs	r3, #1
10014012:	e76e      	b.n	10013ef2 <__aeabi_fsub+0x1c6>
10014014:	0013      	movs	r3, r2
10014016:	0034      	movs	r4, r6
10014018:	e6a3      	b.n	10013d62 <__aeabi_fsub+0x36>
1001401a:	2700      	movs	r7, #0
1001401c:	2500      	movs	r5, #0
1001401e:	e71e      	b.n	10013e5e <__aeabi_fsub+0x132>
10014020:	2780      	movs	r7, #128	; 0x80
10014022:	2500      	movs	r5, #0
10014024:	03ff      	lsls	r7, r7, #15
10014026:	e6e9      	b.n	10013dfc <__aeabi_fsub+0xd0>
10014028:	0013      	movs	r3, r2
1001402a:	e69a      	b.n	10013d62 <__aeabi_fsub+0x36>
1001402c:	2301      	movs	r3, #1
1001402e:	e7a6      	b.n	10013f7e <__aeabi_fsub+0x252>
10014030:	7dffffff 	.word	0x7dffffff
10014034:	fbffffff 	.word	0xfbffffff

10014038 <__aeabi_f2iz>:
10014038:	0243      	lsls	r3, r0, #9
1001403a:	0a59      	lsrs	r1, r3, #9
1001403c:	0043      	lsls	r3, r0, #1
1001403e:	0fc2      	lsrs	r2, r0, #31
10014040:	0e1b      	lsrs	r3, r3, #24
10014042:	2000      	movs	r0, #0
10014044:	2b7e      	cmp	r3, #126	; 0x7e
10014046:	dd0e      	ble.n	10014066 <__aeabi_f2iz+0x2e>
10014048:	2b9d      	cmp	r3, #157	; 0x9d
1001404a:	dc0d      	bgt.n	10014068 <__aeabi_f2iz+0x30>
1001404c:	2080      	movs	r0, #128	; 0x80
1001404e:	0400      	lsls	r0, r0, #16
10014050:	4301      	orrs	r1, r0
10014052:	2b95      	cmp	r3, #149	; 0x95
10014054:	dc0b      	bgt.n	1001406e <__aeabi_f2iz+0x36>
10014056:	2096      	movs	r0, #150	; 0x96
10014058:	1ac3      	subs	r3, r0, r3
1001405a:	40d9      	lsrs	r1, r3
1001405c:	000b      	movs	r3, r1
1001405e:	4258      	negs	r0, r3
10014060:	2a00      	cmp	r2, #0
10014062:	d100      	bne.n	10014066 <__aeabi_f2iz+0x2e>
10014064:	0018      	movs	r0, r3
10014066:	4770      	bx	lr
10014068:	4b03      	ldr	r3, [pc, #12]	; (10014078 <__aeabi_f2iz+0x40>)
1001406a:	18d0      	adds	r0, r2, r3
1001406c:	e7fb      	b.n	10014066 <__aeabi_f2iz+0x2e>
1001406e:	3b96      	subs	r3, #150	; 0x96
10014070:	4099      	lsls	r1, r3
10014072:	000b      	movs	r3, r1
10014074:	e7f3      	b.n	1001405e <__aeabi_f2iz+0x26>
10014076:	46c0      	nop			; (mov r8, r8)
10014078:	7fffffff 	.word	0x7fffffff

1001407c <__aeabi_i2f>:
1001407c:	b570      	push	{r4, r5, r6, lr}
1001407e:	2800      	cmp	r0, #0
10014080:	d030      	beq.n	100140e4 <__aeabi_i2f+0x68>
10014082:	17c3      	asrs	r3, r0, #31
10014084:	18c5      	adds	r5, r0, r3
10014086:	405d      	eors	r5, r3
10014088:	0fc4      	lsrs	r4, r0, #31
1001408a:	0028      	movs	r0, r5
1001408c:	f000 ffc6 	bl	1001501c <__clzsi2>
10014090:	239e      	movs	r3, #158	; 0x9e
10014092:	1a1b      	subs	r3, r3, r0
10014094:	2b96      	cmp	r3, #150	; 0x96
10014096:	dc0d      	bgt.n	100140b4 <__aeabi_i2f+0x38>
10014098:	2296      	movs	r2, #150	; 0x96
1001409a:	1ad2      	subs	r2, r2, r3
1001409c:	4095      	lsls	r5, r2
1001409e:	026a      	lsls	r2, r5, #9
100140a0:	0a52      	lsrs	r2, r2, #9
100140a2:	b2d8      	uxtb	r0, r3
100140a4:	0252      	lsls	r2, r2, #9
100140a6:	05c0      	lsls	r0, r0, #23
100140a8:	0a52      	lsrs	r2, r2, #9
100140aa:	07e4      	lsls	r4, r4, #31
100140ac:	4302      	orrs	r2, r0
100140ae:	4322      	orrs	r2, r4
100140b0:	0010      	movs	r0, r2
100140b2:	bd70      	pop	{r4, r5, r6, pc}
100140b4:	2b99      	cmp	r3, #153	; 0x99
100140b6:	dc19      	bgt.n	100140ec <__aeabi_i2f+0x70>
100140b8:	2299      	movs	r2, #153	; 0x99
100140ba:	1ad2      	subs	r2, r2, r3
100140bc:	4095      	lsls	r5, r2
100140be:	4a12      	ldr	r2, [pc, #72]	; (10014108 <__aeabi_i2f+0x8c>)
100140c0:	402a      	ands	r2, r5
100140c2:	0769      	lsls	r1, r5, #29
100140c4:	d004      	beq.n	100140d0 <__aeabi_i2f+0x54>
100140c6:	210f      	movs	r1, #15
100140c8:	400d      	ands	r5, r1
100140ca:	2d04      	cmp	r5, #4
100140cc:	d000      	beq.n	100140d0 <__aeabi_i2f+0x54>
100140ce:	3204      	adds	r2, #4
100140d0:	0151      	lsls	r1, r2, #5
100140d2:	d503      	bpl.n	100140dc <__aeabi_i2f+0x60>
100140d4:	4b0c      	ldr	r3, [pc, #48]	; (10014108 <__aeabi_i2f+0x8c>)
100140d6:	401a      	ands	r2, r3
100140d8:	239f      	movs	r3, #159	; 0x9f
100140da:	1a1b      	subs	r3, r3, r0
100140dc:	0192      	lsls	r2, r2, #6
100140de:	0a52      	lsrs	r2, r2, #9
100140e0:	b2d8      	uxtb	r0, r3
100140e2:	e7df      	b.n	100140a4 <__aeabi_i2f+0x28>
100140e4:	2400      	movs	r4, #0
100140e6:	2000      	movs	r0, #0
100140e8:	2200      	movs	r2, #0
100140ea:	e7db      	b.n	100140a4 <__aeabi_i2f+0x28>
100140ec:	2205      	movs	r2, #5
100140ee:	002e      	movs	r6, r5
100140f0:	1a12      	subs	r2, r2, r0
100140f2:	21b9      	movs	r1, #185	; 0xb9
100140f4:	40d6      	lsrs	r6, r2
100140f6:	002a      	movs	r2, r5
100140f8:	1ac9      	subs	r1, r1, r3
100140fa:	408a      	lsls	r2, r1
100140fc:	1e55      	subs	r5, r2, #1
100140fe:	41aa      	sbcs	r2, r5
10014100:	0035      	movs	r5, r6
10014102:	4315      	orrs	r5, r2
10014104:	e7db      	b.n	100140be <__aeabi_i2f+0x42>
10014106:	46c0      	nop			; (mov r8, r8)
10014108:	fbffffff 	.word	0xfbffffff

1001410c <__aeabi_ui2f>:
1001410c:	b570      	push	{r4, r5, r6, lr}
1001410e:	1e04      	subs	r4, r0, #0
10014110:	d028      	beq.n	10014164 <__aeabi_ui2f+0x58>
10014112:	f000 ff83 	bl	1001501c <__clzsi2>
10014116:	239e      	movs	r3, #158	; 0x9e
10014118:	1a1b      	subs	r3, r3, r0
1001411a:	2b96      	cmp	r3, #150	; 0x96
1001411c:	dc0a      	bgt.n	10014134 <__aeabi_ui2f+0x28>
1001411e:	2296      	movs	r2, #150	; 0x96
10014120:	1ad2      	subs	r2, r2, r3
10014122:	4094      	lsls	r4, r2
10014124:	0262      	lsls	r2, r4, #9
10014126:	0a52      	lsrs	r2, r2, #9
10014128:	b2d8      	uxtb	r0, r3
1001412a:	0252      	lsls	r2, r2, #9
1001412c:	0a52      	lsrs	r2, r2, #9
1001412e:	05c0      	lsls	r0, r0, #23
10014130:	4310      	orrs	r0, r2
10014132:	bd70      	pop	{r4, r5, r6, pc}
10014134:	2b99      	cmp	r3, #153	; 0x99
10014136:	dc18      	bgt.n	1001416a <__aeabi_ui2f+0x5e>
10014138:	2299      	movs	r2, #153	; 0x99
1001413a:	1ad2      	subs	r2, r2, r3
1001413c:	4094      	lsls	r4, r2
1001413e:	4a11      	ldr	r2, [pc, #68]	; (10014184 <__aeabi_ui2f+0x78>)
10014140:	4022      	ands	r2, r4
10014142:	0761      	lsls	r1, r4, #29
10014144:	d004      	beq.n	10014150 <__aeabi_ui2f+0x44>
10014146:	210f      	movs	r1, #15
10014148:	400c      	ands	r4, r1
1001414a:	2c04      	cmp	r4, #4
1001414c:	d000      	beq.n	10014150 <__aeabi_ui2f+0x44>
1001414e:	3204      	adds	r2, #4
10014150:	0151      	lsls	r1, r2, #5
10014152:	d503      	bpl.n	1001415c <__aeabi_ui2f+0x50>
10014154:	4b0b      	ldr	r3, [pc, #44]	; (10014184 <__aeabi_ui2f+0x78>)
10014156:	401a      	ands	r2, r3
10014158:	239f      	movs	r3, #159	; 0x9f
1001415a:	1a1b      	subs	r3, r3, r0
1001415c:	0192      	lsls	r2, r2, #6
1001415e:	0a52      	lsrs	r2, r2, #9
10014160:	b2d8      	uxtb	r0, r3
10014162:	e7e2      	b.n	1001412a <__aeabi_ui2f+0x1e>
10014164:	2000      	movs	r0, #0
10014166:	2200      	movs	r2, #0
10014168:	e7df      	b.n	1001412a <__aeabi_ui2f+0x1e>
1001416a:	2205      	movs	r2, #5
1001416c:	0025      	movs	r5, r4
1001416e:	1a12      	subs	r2, r2, r0
10014170:	21b9      	movs	r1, #185	; 0xb9
10014172:	40d5      	lsrs	r5, r2
10014174:	0022      	movs	r2, r4
10014176:	1ac9      	subs	r1, r1, r3
10014178:	408a      	lsls	r2, r1
1001417a:	1e54      	subs	r4, r2, #1
1001417c:	41a2      	sbcs	r2, r4
1001417e:	002c      	movs	r4, r5
10014180:	4314      	orrs	r4, r2
10014182:	e7dc      	b.n	1001413e <__aeabi_ui2f+0x32>
10014184:	fbffffff 	.word	0xfbffffff

10014188 <__eqdf2>:
10014188:	b5f0      	push	{r4, r5, r6, r7, lr}
1001418a:	465f      	mov	r7, fp
1001418c:	4656      	mov	r6, sl
1001418e:	464d      	mov	r5, r9
10014190:	4644      	mov	r4, r8
10014192:	b4f0      	push	{r4, r5, r6, r7}
10014194:	031f      	lsls	r7, r3, #12
10014196:	005c      	lsls	r4, r3, #1
10014198:	0fdb      	lsrs	r3, r3, #31
1001419a:	469a      	mov	sl, r3
1001419c:	4b19      	ldr	r3, [pc, #100]	; (10014204 <__eqdf2+0x7c>)
1001419e:	030e      	lsls	r6, r1, #12
100141a0:	004d      	lsls	r5, r1, #1
100141a2:	0fc9      	lsrs	r1, r1, #31
100141a4:	4680      	mov	r8, r0
100141a6:	0b36      	lsrs	r6, r6, #12
100141a8:	0d6d      	lsrs	r5, r5, #21
100141aa:	468b      	mov	fp, r1
100141ac:	4691      	mov	r9, r2
100141ae:	0b3f      	lsrs	r7, r7, #12
100141b0:	0d64      	lsrs	r4, r4, #21
100141b2:	429d      	cmp	r5, r3
100141b4:	d019      	beq.n	100141ea <__eqdf2+0x62>
100141b6:	4b13      	ldr	r3, [pc, #76]	; (10014204 <__eqdf2+0x7c>)
100141b8:	429c      	cmp	r4, r3
100141ba:	d01b      	beq.n	100141f4 <__eqdf2+0x6c>
100141bc:	2301      	movs	r3, #1
100141be:	42a5      	cmp	r5, r4
100141c0:	d006      	beq.n	100141d0 <__eqdf2+0x48>
100141c2:	0018      	movs	r0, r3
100141c4:	bc3c      	pop	{r2, r3, r4, r5}
100141c6:	4690      	mov	r8, r2
100141c8:	4699      	mov	r9, r3
100141ca:	46a2      	mov	sl, r4
100141cc:	46ab      	mov	fp, r5
100141ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100141d0:	42be      	cmp	r6, r7
100141d2:	d1f6      	bne.n	100141c2 <__eqdf2+0x3a>
100141d4:	45c8      	cmp	r8, r9
100141d6:	d1f4      	bne.n	100141c2 <__eqdf2+0x3a>
100141d8:	45d3      	cmp	fp, sl
100141da:	d010      	beq.n	100141fe <__eqdf2+0x76>
100141dc:	2d00      	cmp	r5, #0
100141de:	d1f0      	bne.n	100141c2 <__eqdf2+0x3a>
100141e0:	4330      	orrs	r0, r6
100141e2:	0003      	movs	r3, r0
100141e4:	1e5a      	subs	r2, r3, #1
100141e6:	4193      	sbcs	r3, r2
100141e8:	e7eb      	b.n	100141c2 <__eqdf2+0x3a>
100141ea:	0031      	movs	r1, r6
100141ec:	2301      	movs	r3, #1
100141ee:	4301      	orrs	r1, r0
100141f0:	d1e7      	bne.n	100141c2 <__eqdf2+0x3a>
100141f2:	e7e0      	b.n	100141b6 <__eqdf2+0x2e>
100141f4:	433a      	orrs	r2, r7
100141f6:	2301      	movs	r3, #1
100141f8:	2a00      	cmp	r2, #0
100141fa:	d1e2      	bne.n	100141c2 <__eqdf2+0x3a>
100141fc:	e7de      	b.n	100141bc <__eqdf2+0x34>
100141fe:	2300      	movs	r3, #0
10014200:	e7df      	b.n	100141c2 <__eqdf2+0x3a>
10014202:	46c0      	nop			; (mov r8, r8)
10014204:	000007ff 	.word	0x000007ff

10014208 <__gedf2>:
10014208:	b5f0      	push	{r4, r5, r6, r7, lr}
1001420a:	465f      	mov	r7, fp
1001420c:	4644      	mov	r4, r8
1001420e:	4656      	mov	r6, sl
10014210:	464d      	mov	r5, r9
10014212:	b4f0      	push	{r4, r5, r6, r7}
10014214:	031f      	lsls	r7, r3, #12
10014216:	0b3c      	lsrs	r4, r7, #12
10014218:	4f2c      	ldr	r7, [pc, #176]	; (100142cc <__gedf2+0xc4>)
1001421a:	030e      	lsls	r6, r1, #12
1001421c:	004d      	lsls	r5, r1, #1
1001421e:	46a3      	mov	fp, r4
10014220:	005c      	lsls	r4, r3, #1
10014222:	4684      	mov	ip, r0
10014224:	0b36      	lsrs	r6, r6, #12
10014226:	0d6d      	lsrs	r5, r5, #21
10014228:	0fc9      	lsrs	r1, r1, #31
1001422a:	4690      	mov	r8, r2
1001422c:	0d64      	lsrs	r4, r4, #21
1001422e:	0fdb      	lsrs	r3, r3, #31
10014230:	42bd      	cmp	r5, r7
10014232:	d02b      	beq.n	1001428c <__gedf2+0x84>
10014234:	4f25      	ldr	r7, [pc, #148]	; (100142cc <__gedf2+0xc4>)
10014236:	42bc      	cmp	r4, r7
10014238:	d02e      	beq.n	10014298 <__gedf2+0x90>
1001423a:	2d00      	cmp	r5, #0
1001423c:	d10e      	bne.n	1001425c <__gedf2+0x54>
1001423e:	4330      	orrs	r0, r6
10014240:	0007      	movs	r7, r0
10014242:	4681      	mov	r9, r0
10014244:	4278      	negs	r0, r7
10014246:	4178      	adcs	r0, r7
10014248:	2c00      	cmp	r4, #0
1001424a:	d117      	bne.n	1001427c <__gedf2+0x74>
1001424c:	465f      	mov	r7, fp
1001424e:	433a      	orrs	r2, r7
10014250:	d114      	bne.n	1001427c <__gedf2+0x74>
10014252:	464b      	mov	r3, r9
10014254:	2000      	movs	r0, #0
10014256:	2b00      	cmp	r3, #0
10014258:	d00a      	beq.n	10014270 <__gedf2+0x68>
1001425a:	e006      	b.n	1001426a <__gedf2+0x62>
1001425c:	2c00      	cmp	r4, #0
1001425e:	d102      	bne.n	10014266 <__gedf2+0x5e>
10014260:	4658      	mov	r0, fp
10014262:	4302      	orrs	r2, r0
10014264:	d001      	beq.n	1001426a <__gedf2+0x62>
10014266:	4299      	cmp	r1, r3
10014268:	d01a      	beq.n	100142a0 <__gedf2+0x98>
1001426a:	2301      	movs	r3, #1
1001426c:	4248      	negs	r0, r1
1001426e:	4318      	orrs	r0, r3
10014270:	bc3c      	pop	{r2, r3, r4, r5}
10014272:	4690      	mov	r8, r2
10014274:	4699      	mov	r9, r3
10014276:	46a2      	mov	sl, r4
10014278:	46ab      	mov	fp, r5
1001427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001427c:	2800      	cmp	r0, #0
1001427e:	d0f2      	beq.n	10014266 <__gedf2+0x5e>
10014280:	4258      	negs	r0, r3
10014282:	4158      	adcs	r0, r3
10014284:	2201      	movs	r2, #1
10014286:	4240      	negs	r0, r0
10014288:	4310      	orrs	r0, r2
1001428a:	e7f1      	b.n	10014270 <__gedf2+0x68>
1001428c:	0037      	movs	r7, r6
1001428e:	4307      	orrs	r7, r0
10014290:	d0d0      	beq.n	10014234 <__gedf2+0x2c>
10014292:	2002      	movs	r0, #2
10014294:	4240      	negs	r0, r0
10014296:	e7eb      	b.n	10014270 <__gedf2+0x68>
10014298:	465f      	mov	r7, fp
1001429a:	4317      	orrs	r7, r2
1001429c:	d0cd      	beq.n	1001423a <__gedf2+0x32>
1001429e:	e7f8      	b.n	10014292 <__gedf2+0x8a>
100142a0:	42a5      	cmp	r5, r4
100142a2:	dce2      	bgt.n	1001426a <__gedf2+0x62>
100142a4:	db05      	blt.n	100142b2 <__gedf2+0xaa>
100142a6:	455e      	cmp	r6, fp
100142a8:	d8df      	bhi.n	1001426a <__gedf2+0x62>
100142aa:	d008      	beq.n	100142be <__gedf2+0xb6>
100142ac:	2000      	movs	r0, #0
100142ae:	455e      	cmp	r6, fp
100142b0:	d2de      	bcs.n	10014270 <__gedf2+0x68>
100142b2:	4248      	negs	r0, r1
100142b4:	4148      	adcs	r0, r1
100142b6:	2301      	movs	r3, #1
100142b8:	4240      	negs	r0, r0
100142ba:	4318      	orrs	r0, r3
100142bc:	e7d8      	b.n	10014270 <__gedf2+0x68>
100142be:	45c4      	cmp	ip, r8
100142c0:	d8d3      	bhi.n	1001426a <__gedf2+0x62>
100142c2:	2000      	movs	r0, #0
100142c4:	45c4      	cmp	ip, r8
100142c6:	d3f4      	bcc.n	100142b2 <__gedf2+0xaa>
100142c8:	e7d2      	b.n	10014270 <__gedf2+0x68>
100142ca:	46c0      	nop			; (mov r8, r8)
100142cc:	000007ff 	.word	0x000007ff

100142d0 <__ledf2>:
100142d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100142d2:	465f      	mov	r7, fp
100142d4:	464d      	mov	r5, r9
100142d6:	4644      	mov	r4, r8
100142d8:	4656      	mov	r6, sl
100142da:	b4f0      	push	{r4, r5, r6, r7}
100142dc:	031c      	lsls	r4, r3, #12
100142de:	0b24      	lsrs	r4, r4, #12
100142e0:	46a4      	mov	ip, r4
100142e2:	4c2f      	ldr	r4, [pc, #188]	; (100143a0 <__ledf2+0xd0>)
100142e4:	030f      	lsls	r7, r1, #12
100142e6:	004d      	lsls	r5, r1, #1
100142e8:	005e      	lsls	r6, r3, #1
100142ea:	0fc9      	lsrs	r1, r1, #31
100142ec:	4680      	mov	r8, r0
100142ee:	0b3f      	lsrs	r7, r7, #12
100142f0:	0d6d      	lsrs	r5, r5, #21
100142f2:	468b      	mov	fp, r1
100142f4:	4691      	mov	r9, r2
100142f6:	0d76      	lsrs	r6, r6, #21
100142f8:	0fdb      	lsrs	r3, r3, #31
100142fa:	42a5      	cmp	r5, r4
100142fc:	d020      	beq.n	10014340 <__ledf2+0x70>
100142fe:	4c28      	ldr	r4, [pc, #160]	; (100143a0 <__ledf2+0xd0>)
10014300:	42a6      	cmp	r6, r4
10014302:	d022      	beq.n	1001434a <__ledf2+0x7a>
10014304:	2d00      	cmp	r5, #0
10014306:	d112      	bne.n	1001432e <__ledf2+0x5e>
10014308:	4338      	orrs	r0, r7
1001430a:	4244      	negs	r4, r0
1001430c:	4144      	adcs	r4, r0
1001430e:	2e00      	cmp	r6, #0
10014310:	d020      	beq.n	10014354 <__ledf2+0x84>
10014312:	2c00      	cmp	r4, #0
10014314:	d00d      	beq.n	10014332 <__ledf2+0x62>
10014316:	425c      	negs	r4, r3
10014318:	4163      	adcs	r3, r4
1001431a:	2401      	movs	r4, #1
1001431c:	425b      	negs	r3, r3
1001431e:	431c      	orrs	r4, r3
10014320:	0020      	movs	r0, r4
10014322:	bc3c      	pop	{r2, r3, r4, r5}
10014324:	4690      	mov	r8, r2
10014326:	4699      	mov	r9, r3
10014328:	46a2      	mov	sl, r4
1001432a:	46ab      	mov	fp, r5
1001432c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001432e:	2e00      	cmp	r6, #0
10014330:	d017      	beq.n	10014362 <__ledf2+0x92>
10014332:	455b      	cmp	r3, fp
10014334:	d019      	beq.n	1001436a <__ledf2+0x9a>
10014336:	465b      	mov	r3, fp
10014338:	425c      	negs	r4, r3
1001433a:	2301      	movs	r3, #1
1001433c:	431c      	orrs	r4, r3
1001433e:	e7ef      	b.n	10014320 <__ledf2+0x50>
10014340:	0039      	movs	r1, r7
10014342:	2402      	movs	r4, #2
10014344:	4301      	orrs	r1, r0
10014346:	d1eb      	bne.n	10014320 <__ledf2+0x50>
10014348:	e7d9      	b.n	100142fe <__ledf2+0x2e>
1001434a:	4661      	mov	r1, ip
1001434c:	2402      	movs	r4, #2
1001434e:	4311      	orrs	r1, r2
10014350:	d1e6      	bne.n	10014320 <__ledf2+0x50>
10014352:	e7d7      	b.n	10014304 <__ledf2+0x34>
10014354:	4661      	mov	r1, ip
10014356:	430a      	orrs	r2, r1
10014358:	d1db      	bne.n	10014312 <__ledf2+0x42>
1001435a:	2400      	movs	r4, #0
1001435c:	2800      	cmp	r0, #0
1001435e:	d0df      	beq.n	10014320 <__ledf2+0x50>
10014360:	e7e9      	b.n	10014336 <__ledf2+0x66>
10014362:	4661      	mov	r1, ip
10014364:	430a      	orrs	r2, r1
10014366:	d1e4      	bne.n	10014332 <__ledf2+0x62>
10014368:	e7e5      	b.n	10014336 <__ledf2+0x66>
1001436a:	42b5      	cmp	r5, r6
1001436c:	dd03      	ble.n	10014376 <__ledf2+0xa6>
1001436e:	2201      	movs	r2, #1
10014370:	425c      	negs	r4, r3
10014372:	4314      	orrs	r4, r2
10014374:	e7d4      	b.n	10014320 <__ledf2+0x50>
10014376:	42b5      	cmp	r5, r6
10014378:	dbcd      	blt.n	10014316 <__ledf2+0x46>
1001437a:	4567      	cmp	r7, ip
1001437c:	d8db      	bhi.n	10014336 <__ledf2+0x66>
1001437e:	d009      	beq.n	10014394 <__ledf2+0xc4>
10014380:	2400      	movs	r4, #0
10014382:	4567      	cmp	r7, ip
10014384:	d2cc      	bcs.n	10014320 <__ledf2+0x50>
10014386:	4659      	mov	r1, fp
10014388:	424c      	negs	r4, r1
1001438a:	4161      	adcs	r1, r4
1001438c:	2401      	movs	r4, #1
1001438e:	4249      	negs	r1, r1
10014390:	430c      	orrs	r4, r1
10014392:	e7c5      	b.n	10014320 <__ledf2+0x50>
10014394:	45c8      	cmp	r8, r9
10014396:	d8ce      	bhi.n	10014336 <__ledf2+0x66>
10014398:	2400      	movs	r4, #0
1001439a:	45c8      	cmp	r8, r9
1001439c:	d3f3      	bcc.n	10014386 <__ledf2+0xb6>
1001439e:	e7bf      	b.n	10014320 <__ledf2+0x50>
100143a0:	000007ff 	.word	0x000007ff

100143a4 <__aeabi_dmul>:
100143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100143a6:	465f      	mov	r7, fp
100143a8:	4656      	mov	r6, sl
100143aa:	464d      	mov	r5, r9
100143ac:	4644      	mov	r4, r8
100143ae:	b4f0      	push	{r4, r5, r6, r7}
100143b0:	030d      	lsls	r5, r1, #12
100143b2:	4699      	mov	r9, r3
100143b4:	004e      	lsls	r6, r1, #1
100143b6:	0b2b      	lsrs	r3, r5, #12
100143b8:	b087      	sub	sp, #28
100143ba:	0007      	movs	r7, r0
100143bc:	4692      	mov	sl, r2
100143be:	4680      	mov	r8, r0
100143c0:	469b      	mov	fp, r3
100143c2:	0d76      	lsrs	r6, r6, #21
100143c4:	0fcc      	lsrs	r4, r1, #31
100143c6:	2e00      	cmp	r6, #0
100143c8:	d069      	beq.n	1001449e <__aeabi_dmul+0xfa>
100143ca:	4b6d      	ldr	r3, [pc, #436]	; (10014580 <__aeabi_dmul+0x1dc>)
100143cc:	429e      	cmp	r6, r3
100143ce:	d035      	beq.n	1001443c <__aeabi_dmul+0x98>
100143d0:	465b      	mov	r3, fp
100143d2:	2280      	movs	r2, #128	; 0x80
100143d4:	00dd      	lsls	r5, r3, #3
100143d6:	0412      	lsls	r2, r2, #16
100143d8:	0f43      	lsrs	r3, r0, #29
100143da:	4313      	orrs	r3, r2
100143dc:	432b      	orrs	r3, r5
100143de:	469b      	mov	fp, r3
100143e0:	00c3      	lsls	r3, r0, #3
100143e2:	4698      	mov	r8, r3
100143e4:	4b67      	ldr	r3, [pc, #412]	; (10014584 <__aeabi_dmul+0x1e0>)
100143e6:	2700      	movs	r7, #0
100143e8:	469c      	mov	ip, r3
100143ea:	2300      	movs	r3, #0
100143ec:	4466      	add	r6, ip
100143ee:	9301      	str	r3, [sp, #4]
100143f0:	464a      	mov	r2, r9
100143f2:	0315      	lsls	r5, r2, #12
100143f4:	0050      	lsls	r0, r2, #1
100143f6:	0fd2      	lsrs	r2, r2, #31
100143f8:	4653      	mov	r3, sl
100143fa:	0b2d      	lsrs	r5, r5, #12
100143fc:	0d40      	lsrs	r0, r0, #21
100143fe:	4691      	mov	r9, r2
10014400:	d100      	bne.n	10014404 <__aeabi_dmul+0x60>
10014402:	e076      	b.n	100144f2 <__aeabi_dmul+0x14e>
10014404:	4a5e      	ldr	r2, [pc, #376]	; (10014580 <__aeabi_dmul+0x1dc>)
10014406:	4290      	cmp	r0, r2
10014408:	d06c      	beq.n	100144e4 <__aeabi_dmul+0x140>
1001440a:	2280      	movs	r2, #128	; 0x80
1001440c:	0f5b      	lsrs	r3, r3, #29
1001440e:	0412      	lsls	r2, r2, #16
10014410:	4313      	orrs	r3, r2
10014412:	4a5c      	ldr	r2, [pc, #368]	; (10014584 <__aeabi_dmul+0x1e0>)
10014414:	00ed      	lsls	r5, r5, #3
10014416:	4694      	mov	ip, r2
10014418:	431d      	orrs	r5, r3
1001441a:	4653      	mov	r3, sl
1001441c:	2200      	movs	r2, #0
1001441e:	00db      	lsls	r3, r3, #3
10014420:	4460      	add	r0, ip
10014422:	4649      	mov	r1, r9
10014424:	1836      	adds	r6, r6, r0
10014426:	1c70      	adds	r0, r6, #1
10014428:	4061      	eors	r1, r4
1001442a:	9002      	str	r0, [sp, #8]
1001442c:	4317      	orrs	r7, r2
1001442e:	2f0f      	cmp	r7, #15
10014430:	d900      	bls.n	10014434 <__aeabi_dmul+0x90>
10014432:	e0af      	b.n	10014594 <__aeabi_dmul+0x1f0>
10014434:	4854      	ldr	r0, [pc, #336]	; (10014588 <__aeabi_dmul+0x1e4>)
10014436:	00bf      	lsls	r7, r7, #2
10014438:	59c7      	ldr	r7, [r0, r7]
1001443a:	46bf      	mov	pc, r7
1001443c:	465b      	mov	r3, fp
1001443e:	431f      	orrs	r7, r3
10014440:	d000      	beq.n	10014444 <__aeabi_dmul+0xa0>
10014442:	e088      	b.n	10014556 <__aeabi_dmul+0x1b2>
10014444:	2300      	movs	r3, #0
10014446:	469b      	mov	fp, r3
10014448:	4698      	mov	r8, r3
1001444a:	3302      	adds	r3, #2
1001444c:	2708      	movs	r7, #8
1001444e:	9301      	str	r3, [sp, #4]
10014450:	e7ce      	b.n	100143f0 <__aeabi_dmul+0x4c>
10014452:	4649      	mov	r1, r9
10014454:	2a02      	cmp	r2, #2
10014456:	d06a      	beq.n	1001452e <__aeabi_dmul+0x18a>
10014458:	2a03      	cmp	r2, #3
1001445a:	d100      	bne.n	1001445e <__aeabi_dmul+0xba>
1001445c:	e209      	b.n	10014872 <__aeabi_dmul+0x4ce>
1001445e:	2a01      	cmp	r2, #1
10014460:	d000      	beq.n	10014464 <__aeabi_dmul+0xc0>
10014462:	e1bb      	b.n	100147dc <__aeabi_dmul+0x438>
10014464:	4011      	ands	r1, r2
10014466:	2200      	movs	r2, #0
10014468:	2300      	movs	r3, #0
1001446a:	2500      	movs	r5, #0
1001446c:	4690      	mov	r8, r2
1001446e:	b2cc      	uxtb	r4, r1
10014470:	2100      	movs	r1, #0
10014472:	032d      	lsls	r5, r5, #12
10014474:	0d0a      	lsrs	r2, r1, #20
10014476:	0512      	lsls	r2, r2, #20
10014478:	0b2d      	lsrs	r5, r5, #12
1001447a:	4315      	orrs	r5, r2
1001447c:	4a43      	ldr	r2, [pc, #268]	; (1001458c <__aeabi_dmul+0x1e8>)
1001447e:	051b      	lsls	r3, r3, #20
10014480:	4015      	ands	r5, r2
10014482:	431d      	orrs	r5, r3
10014484:	006d      	lsls	r5, r5, #1
10014486:	07e4      	lsls	r4, r4, #31
10014488:	086d      	lsrs	r5, r5, #1
1001448a:	4325      	orrs	r5, r4
1001448c:	4640      	mov	r0, r8
1001448e:	0029      	movs	r1, r5
10014490:	b007      	add	sp, #28
10014492:	bc3c      	pop	{r2, r3, r4, r5}
10014494:	4690      	mov	r8, r2
10014496:	4699      	mov	r9, r3
10014498:	46a2      	mov	sl, r4
1001449a:	46ab      	mov	fp, r5
1001449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001449e:	4303      	orrs	r3, r0
100144a0:	d052      	beq.n	10014548 <__aeabi_dmul+0x1a4>
100144a2:	465b      	mov	r3, fp
100144a4:	2b00      	cmp	r3, #0
100144a6:	d100      	bne.n	100144aa <__aeabi_dmul+0x106>
100144a8:	e18a      	b.n	100147c0 <__aeabi_dmul+0x41c>
100144aa:	4658      	mov	r0, fp
100144ac:	f000 fdb6 	bl	1001501c <__clzsi2>
100144b0:	0003      	movs	r3, r0
100144b2:	3b0b      	subs	r3, #11
100144b4:	2b1c      	cmp	r3, #28
100144b6:	dd00      	ble.n	100144ba <__aeabi_dmul+0x116>
100144b8:	e17b      	b.n	100147b2 <__aeabi_dmul+0x40e>
100144ba:	221d      	movs	r2, #29
100144bc:	1ad3      	subs	r3, r2, r3
100144be:	003a      	movs	r2, r7
100144c0:	0001      	movs	r1, r0
100144c2:	465d      	mov	r5, fp
100144c4:	40da      	lsrs	r2, r3
100144c6:	3908      	subs	r1, #8
100144c8:	408d      	lsls	r5, r1
100144ca:	0013      	movs	r3, r2
100144cc:	408f      	lsls	r7, r1
100144ce:	432b      	orrs	r3, r5
100144d0:	469b      	mov	fp, r3
100144d2:	46b8      	mov	r8, r7
100144d4:	4b2e      	ldr	r3, [pc, #184]	; (10014590 <__aeabi_dmul+0x1ec>)
100144d6:	2700      	movs	r7, #0
100144d8:	469c      	mov	ip, r3
100144da:	2300      	movs	r3, #0
100144dc:	4460      	add	r0, ip
100144de:	4246      	negs	r6, r0
100144e0:	9301      	str	r3, [sp, #4]
100144e2:	e785      	b.n	100143f0 <__aeabi_dmul+0x4c>
100144e4:	4652      	mov	r2, sl
100144e6:	432a      	orrs	r2, r5
100144e8:	d12c      	bne.n	10014544 <__aeabi_dmul+0x1a0>
100144ea:	2500      	movs	r5, #0
100144ec:	2300      	movs	r3, #0
100144ee:	2202      	movs	r2, #2
100144f0:	e797      	b.n	10014422 <__aeabi_dmul+0x7e>
100144f2:	4652      	mov	r2, sl
100144f4:	432a      	orrs	r2, r5
100144f6:	d021      	beq.n	1001453c <__aeabi_dmul+0x198>
100144f8:	2d00      	cmp	r5, #0
100144fa:	d100      	bne.n	100144fe <__aeabi_dmul+0x15a>
100144fc:	e154      	b.n	100147a8 <__aeabi_dmul+0x404>
100144fe:	0028      	movs	r0, r5
10014500:	f000 fd8c 	bl	1001501c <__clzsi2>
10014504:	0003      	movs	r3, r0
10014506:	3b0b      	subs	r3, #11
10014508:	2b1c      	cmp	r3, #28
1001450a:	dd00      	ble.n	1001450e <__aeabi_dmul+0x16a>
1001450c:	e146      	b.n	1001479c <__aeabi_dmul+0x3f8>
1001450e:	211d      	movs	r1, #29
10014510:	1acb      	subs	r3, r1, r3
10014512:	4651      	mov	r1, sl
10014514:	0002      	movs	r2, r0
10014516:	40d9      	lsrs	r1, r3
10014518:	4653      	mov	r3, sl
1001451a:	3a08      	subs	r2, #8
1001451c:	4095      	lsls	r5, r2
1001451e:	4093      	lsls	r3, r2
10014520:	430d      	orrs	r5, r1
10014522:	4a1b      	ldr	r2, [pc, #108]	; (10014590 <__aeabi_dmul+0x1ec>)
10014524:	4694      	mov	ip, r2
10014526:	4460      	add	r0, ip
10014528:	4240      	negs	r0, r0
1001452a:	2200      	movs	r2, #0
1001452c:	e779      	b.n	10014422 <__aeabi_dmul+0x7e>
1001452e:	2401      	movs	r4, #1
10014530:	2200      	movs	r2, #0
10014532:	400c      	ands	r4, r1
10014534:	4b12      	ldr	r3, [pc, #72]	; (10014580 <__aeabi_dmul+0x1dc>)
10014536:	2500      	movs	r5, #0
10014538:	4690      	mov	r8, r2
1001453a:	e799      	b.n	10014470 <__aeabi_dmul+0xcc>
1001453c:	2500      	movs	r5, #0
1001453e:	2300      	movs	r3, #0
10014540:	2201      	movs	r2, #1
10014542:	e76e      	b.n	10014422 <__aeabi_dmul+0x7e>
10014544:	2203      	movs	r2, #3
10014546:	e76c      	b.n	10014422 <__aeabi_dmul+0x7e>
10014548:	2300      	movs	r3, #0
1001454a:	469b      	mov	fp, r3
1001454c:	4698      	mov	r8, r3
1001454e:	3301      	adds	r3, #1
10014550:	2704      	movs	r7, #4
10014552:	9301      	str	r3, [sp, #4]
10014554:	e74c      	b.n	100143f0 <__aeabi_dmul+0x4c>
10014556:	2303      	movs	r3, #3
10014558:	270c      	movs	r7, #12
1001455a:	9301      	str	r3, [sp, #4]
1001455c:	e748      	b.n	100143f0 <__aeabi_dmul+0x4c>
1001455e:	2300      	movs	r3, #0
10014560:	2580      	movs	r5, #128	; 0x80
10014562:	4698      	mov	r8, r3
10014564:	2400      	movs	r4, #0
10014566:	032d      	lsls	r5, r5, #12
10014568:	4b05      	ldr	r3, [pc, #20]	; (10014580 <__aeabi_dmul+0x1dc>)
1001456a:	e781      	b.n	10014470 <__aeabi_dmul+0xcc>
1001456c:	465d      	mov	r5, fp
1001456e:	4643      	mov	r3, r8
10014570:	9a01      	ldr	r2, [sp, #4]
10014572:	e76f      	b.n	10014454 <__aeabi_dmul+0xb0>
10014574:	465d      	mov	r5, fp
10014576:	4643      	mov	r3, r8
10014578:	0021      	movs	r1, r4
1001457a:	9a01      	ldr	r2, [sp, #4]
1001457c:	e76a      	b.n	10014454 <__aeabi_dmul+0xb0>
1001457e:	46c0      	nop			; (mov r8, r8)
10014580:	000007ff 	.word	0x000007ff
10014584:	fffffc01 	.word	0xfffffc01
10014588:	10018340 	.word	0x10018340
1001458c:	800fffff 	.word	0x800fffff
10014590:	000003f3 	.word	0x000003f3
10014594:	4642      	mov	r2, r8
10014596:	0c12      	lsrs	r2, r2, #16
10014598:	4691      	mov	r9, r2
1001459a:	0c1a      	lsrs	r2, r3, #16
1001459c:	4694      	mov	ip, r2
1001459e:	4642      	mov	r2, r8
100145a0:	0417      	lsls	r7, r2, #16
100145a2:	464a      	mov	r2, r9
100145a4:	041b      	lsls	r3, r3, #16
100145a6:	0c1b      	lsrs	r3, r3, #16
100145a8:	435a      	muls	r2, r3
100145aa:	4660      	mov	r0, ip
100145ac:	4690      	mov	r8, r2
100145ae:	464a      	mov	r2, r9
100145b0:	4342      	muls	r2, r0
100145b2:	0010      	movs	r0, r2
100145b4:	9203      	str	r2, [sp, #12]
100145b6:	4662      	mov	r2, ip
100145b8:	001c      	movs	r4, r3
100145ba:	0c3f      	lsrs	r7, r7, #16
100145bc:	437a      	muls	r2, r7
100145be:	437c      	muls	r4, r7
100145c0:	4442      	add	r2, r8
100145c2:	9201      	str	r2, [sp, #4]
100145c4:	0c22      	lsrs	r2, r4, #16
100145c6:	4692      	mov	sl, r2
100145c8:	9a01      	ldr	r2, [sp, #4]
100145ca:	4452      	add	r2, sl
100145cc:	4590      	cmp	r8, r2
100145ce:	d906      	bls.n	100145de <__aeabi_dmul+0x23a>
100145d0:	4682      	mov	sl, r0
100145d2:	2080      	movs	r0, #128	; 0x80
100145d4:	0240      	lsls	r0, r0, #9
100145d6:	4680      	mov	r8, r0
100145d8:	44c2      	add	sl, r8
100145da:	4650      	mov	r0, sl
100145dc:	9003      	str	r0, [sp, #12]
100145de:	0c10      	lsrs	r0, r2, #16
100145e0:	9004      	str	r0, [sp, #16]
100145e2:	4648      	mov	r0, r9
100145e4:	0424      	lsls	r4, r4, #16
100145e6:	0c24      	lsrs	r4, r4, #16
100145e8:	0412      	lsls	r2, r2, #16
100145ea:	1912      	adds	r2, r2, r4
100145ec:	9205      	str	r2, [sp, #20]
100145ee:	0c2a      	lsrs	r2, r5, #16
100145f0:	042d      	lsls	r5, r5, #16
100145f2:	0c2d      	lsrs	r5, r5, #16
100145f4:	4368      	muls	r0, r5
100145f6:	002c      	movs	r4, r5
100145f8:	4682      	mov	sl, r0
100145fa:	4648      	mov	r0, r9
100145fc:	437c      	muls	r4, r7
100145fe:	4350      	muls	r0, r2
10014600:	4681      	mov	r9, r0
10014602:	0c20      	lsrs	r0, r4, #16
10014604:	4680      	mov	r8, r0
10014606:	4357      	muls	r7, r2
10014608:	4457      	add	r7, sl
1001460a:	4447      	add	r7, r8
1001460c:	45ba      	cmp	sl, r7
1001460e:	d903      	bls.n	10014618 <__aeabi_dmul+0x274>
10014610:	2080      	movs	r0, #128	; 0x80
10014612:	0240      	lsls	r0, r0, #9
10014614:	4680      	mov	r8, r0
10014616:	44c1      	add	r9, r8
10014618:	0c38      	lsrs	r0, r7, #16
1001461a:	043f      	lsls	r7, r7, #16
1001461c:	46b8      	mov	r8, r7
1001461e:	4448      	add	r0, r9
10014620:	0424      	lsls	r4, r4, #16
10014622:	0c24      	lsrs	r4, r4, #16
10014624:	9001      	str	r0, [sp, #4]
10014626:	9804      	ldr	r0, [sp, #16]
10014628:	44a0      	add	r8, r4
1001462a:	4440      	add	r0, r8
1001462c:	9004      	str	r0, [sp, #16]
1001462e:	4658      	mov	r0, fp
10014630:	0c00      	lsrs	r0, r0, #16
10014632:	4681      	mov	r9, r0
10014634:	4658      	mov	r0, fp
10014636:	0404      	lsls	r4, r0, #16
10014638:	0c20      	lsrs	r0, r4, #16
1001463a:	4682      	mov	sl, r0
1001463c:	0007      	movs	r7, r0
1001463e:	4648      	mov	r0, r9
10014640:	435f      	muls	r7, r3
10014642:	464c      	mov	r4, r9
10014644:	4343      	muls	r3, r0
10014646:	4660      	mov	r0, ip
10014648:	4360      	muls	r0, r4
1001464a:	4664      	mov	r4, ip
1001464c:	4683      	mov	fp, r0
1001464e:	4650      	mov	r0, sl
10014650:	4344      	muls	r4, r0
10014652:	0c38      	lsrs	r0, r7, #16
10014654:	4684      	mov	ip, r0
10014656:	18e4      	adds	r4, r4, r3
10014658:	4464      	add	r4, ip
1001465a:	42a3      	cmp	r3, r4
1001465c:	d903      	bls.n	10014666 <__aeabi_dmul+0x2c2>
1001465e:	2380      	movs	r3, #128	; 0x80
10014660:	025b      	lsls	r3, r3, #9
10014662:	469c      	mov	ip, r3
10014664:	44e3      	add	fp, ip
10014666:	4648      	mov	r0, r9
10014668:	043f      	lsls	r7, r7, #16
1001466a:	0c23      	lsrs	r3, r4, #16
1001466c:	0c3f      	lsrs	r7, r7, #16
1001466e:	0424      	lsls	r4, r4, #16
10014670:	19e4      	adds	r4, r4, r7
10014672:	4657      	mov	r7, sl
10014674:	4368      	muls	r0, r5
10014676:	436f      	muls	r7, r5
10014678:	4684      	mov	ip, r0
1001467a:	464d      	mov	r5, r9
1001467c:	4650      	mov	r0, sl
1001467e:	4355      	muls	r5, r2
10014680:	4342      	muls	r2, r0
10014682:	0c38      	lsrs	r0, r7, #16
10014684:	4681      	mov	r9, r0
10014686:	4462      	add	r2, ip
10014688:	444a      	add	r2, r9
1001468a:	445b      	add	r3, fp
1001468c:	4594      	cmp	ip, r2
1001468e:	d903      	bls.n	10014698 <__aeabi_dmul+0x2f4>
10014690:	2080      	movs	r0, #128	; 0x80
10014692:	0240      	lsls	r0, r0, #9
10014694:	4684      	mov	ip, r0
10014696:	4465      	add	r5, ip
10014698:	9803      	ldr	r0, [sp, #12]
1001469a:	043f      	lsls	r7, r7, #16
1001469c:	4683      	mov	fp, r0
1001469e:	9804      	ldr	r0, [sp, #16]
100146a0:	0c3f      	lsrs	r7, r7, #16
100146a2:	4684      	mov	ip, r0
100146a4:	44e3      	add	fp, ip
100146a6:	45c3      	cmp	fp, r8
100146a8:	4180      	sbcs	r0, r0
100146aa:	4240      	negs	r0, r0
100146ac:	4682      	mov	sl, r0
100146ae:	0410      	lsls	r0, r2, #16
100146b0:	4684      	mov	ip, r0
100146b2:	9801      	ldr	r0, [sp, #4]
100146b4:	4467      	add	r7, ip
100146b6:	4684      	mov	ip, r0
100146b8:	4467      	add	r7, ip
100146ba:	44a3      	add	fp, r4
100146bc:	46bc      	mov	ip, r7
100146be:	45a3      	cmp	fp, r4
100146c0:	41a4      	sbcs	r4, r4
100146c2:	4699      	mov	r9, r3
100146c4:	44d4      	add	ip, sl
100146c6:	4264      	negs	r4, r4
100146c8:	4287      	cmp	r7, r0
100146ca:	41bf      	sbcs	r7, r7
100146cc:	45d4      	cmp	ip, sl
100146ce:	4180      	sbcs	r0, r0
100146d0:	44e1      	add	r9, ip
100146d2:	46a0      	mov	r8, r4
100146d4:	4599      	cmp	r9, r3
100146d6:	419b      	sbcs	r3, r3
100146d8:	427f      	negs	r7, r7
100146da:	4240      	negs	r0, r0
100146dc:	44c8      	add	r8, r9
100146de:	4307      	orrs	r7, r0
100146e0:	0c12      	lsrs	r2, r2, #16
100146e2:	18ba      	adds	r2, r7, r2
100146e4:	45a0      	cmp	r8, r4
100146e6:	41a4      	sbcs	r4, r4
100146e8:	425f      	negs	r7, r3
100146ea:	003b      	movs	r3, r7
100146ec:	4264      	negs	r4, r4
100146ee:	4323      	orrs	r3, r4
100146f0:	18d7      	adds	r7, r2, r3
100146f2:	4643      	mov	r3, r8
100146f4:	197d      	adds	r5, r7, r5
100146f6:	0ddb      	lsrs	r3, r3, #23
100146f8:	026d      	lsls	r5, r5, #9
100146fa:	431d      	orrs	r5, r3
100146fc:	465b      	mov	r3, fp
100146fe:	025a      	lsls	r2, r3, #9
10014700:	9b05      	ldr	r3, [sp, #20]
10014702:	431a      	orrs	r2, r3
10014704:	1e53      	subs	r3, r2, #1
10014706:	419a      	sbcs	r2, r3
10014708:	465b      	mov	r3, fp
1001470a:	0ddb      	lsrs	r3, r3, #23
1001470c:	431a      	orrs	r2, r3
1001470e:	4643      	mov	r3, r8
10014710:	025b      	lsls	r3, r3, #9
10014712:	4313      	orrs	r3, r2
10014714:	01ea      	lsls	r2, r5, #7
10014716:	d507      	bpl.n	10014728 <__aeabi_dmul+0x384>
10014718:	2201      	movs	r2, #1
1001471a:	085c      	lsrs	r4, r3, #1
1001471c:	4013      	ands	r3, r2
1001471e:	4323      	orrs	r3, r4
10014720:	07ea      	lsls	r2, r5, #31
10014722:	9e02      	ldr	r6, [sp, #8]
10014724:	4313      	orrs	r3, r2
10014726:	086d      	lsrs	r5, r5, #1
10014728:	4a57      	ldr	r2, [pc, #348]	; (10014888 <__aeabi_dmul+0x4e4>)
1001472a:	18b2      	adds	r2, r6, r2
1001472c:	2a00      	cmp	r2, #0
1001472e:	dd4b      	ble.n	100147c8 <__aeabi_dmul+0x424>
10014730:	0758      	lsls	r0, r3, #29
10014732:	d009      	beq.n	10014748 <__aeabi_dmul+0x3a4>
10014734:	200f      	movs	r0, #15
10014736:	4018      	ands	r0, r3
10014738:	2804      	cmp	r0, #4
1001473a:	d005      	beq.n	10014748 <__aeabi_dmul+0x3a4>
1001473c:	1d18      	adds	r0, r3, #4
1001473e:	4298      	cmp	r0, r3
10014740:	419b      	sbcs	r3, r3
10014742:	425b      	negs	r3, r3
10014744:	18ed      	adds	r5, r5, r3
10014746:	0003      	movs	r3, r0
10014748:	01e8      	lsls	r0, r5, #7
1001474a:	d504      	bpl.n	10014756 <__aeabi_dmul+0x3b2>
1001474c:	4a4f      	ldr	r2, [pc, #316]	; (1001488c <__aeabi_dmul+0x4e8>)
1001474e:	4015      	ands	r5, r2
10014750:	2280      	movs	r2, #128	; 0x80
10014752:	00d2      	lsls	r2, r2, #3
10014754:	18b2      	adds	r2, r6, r2
10014756:	484e      	ldr	r0, [pc, #312]	; (10014890 <__aeabi_dmul+0x4ec>)
10014758:	4282      	cmp	r2, r0
1001475a:	dd00      	ble.n	1001475e <__aeabi_dmul+0x3ba>
1001475c:	e6e7      	b.n	1001452e <__aeabi_dmul+0x18a>
1001475e:	2401      	movs	r4, #1
10014760:	08db      	lsrs	r3, r3, #3
10014762:	0768      	lsls	r0, r5, #29
10014764:	4318      	orrs	r0, r3
10014766:	026d      	lsls	r5, r5, #9
10014768:	0553      	lsls	r3, r2, #21
1001476a:	4680      	mov	r8, r0
1001476c:	0b2d      	lsrs	r5, r5, #12
1001476e:	0d5b      	lsrs	r3, r3, #21
10014770:	400c      	ands	r4, r1
10014772:	e67d      	b.n	10014470 <__aeabi_dmul+0xcc>
10014774:	2280      	movs	r2, #128	; 0x80
10014776:	4659      	mov	r1, fp
10014778:	0312      	lsls	r2, r2, #12
1001477a:	4211      	tst	r1, r2
1001477c:	d008      	beq.n	10014790 <__aeabi_dmul+0x3ec>
1001477e:	4215      	tst	r5, r2
10014780:	d106      	bne.n	10014790 <__aeabi_dmul+0x3ec>
10014782:	4315      	orrs	r5, r2
10014784:	032d      	lsls	r5, r5, #12
10014786:	4698      	mov	r8, r3
10014788:	0b2d      	lsrs	r5, r5, #12
1001478a:	464c      	mov	r4, r9
1001478c:	4b41      	ldr	r3, [pc, #260]	; (10014894 <__aeabi_dmul+0x4f0>)
1001478e:	e66f      	b.n	10014470 <__aeabi_dmul+0xcc>
10014790:	465d      	mov	r5, fp
10014792:	4315      	orrs	r5, r2
10014794:	032d      	lsls	r5, r5, #12
10014796:	0b2d      	lsrs	r5, r5, #12
10014798:	4b3e      	ldr	r3, [pc, #248]	; (10014894 <__aeabi_dmul+0x4f0>)
1001479a:	e669      	b.n	10014470 <__aeabi_dmul+0xcc>
1001479c:	0003      	movs	r3, r0
1001479e:	4655      	mov	r5, sl
100147a0:	3b28      	subs	r3, #40	; 0x28
100147a2:	409d      	lsls	r5, r3
100147a4:	2300      	movs	r3, #0
100147a6:	e6bc      	b.n	10014522 <__aeabi_dmul+0x17e>
100147a8:	4650      	mov	r0, sl
100147aa:	f000 fc37 	bl	1001501c <__clzsi2>
100147ae:	3020      	adds	r0, #32
100147b0:	e6a8      	b.n	10014504 <__aeabi_dmul+0x160>
100147b2:	0003      	movs	r3, r0
100147b4:	3b28      	subs	r3, #40	; 0x28
100147b6:	409f      	lsls	r7, r3
100147b8:	2300      	movs	r3, #0
100147ba:	46bb      	mov	fp, r7
100147bc:	4698      	mov	r8, r3
100147be:	e689      	b.n	100144d4 <__aeabi_dmul+0x130>
100147c0:	f000 fc2c 	bl	1001501c <__clzsi2>
100147c4:	3020      	adds	r0, #32
100147c6:	e673      	b.n	100144b0 <__aeabi_dmul+0x10c>
100147c8:	2401      	movs	r4, #1
100147ca:	1aa6      	subs	r6, r4, r2
100147cc:	2e38      	cmp	r6, #56	; 0x38
100147ce:	dd07      	ble.n	100147e0 <__aeabi_dmul+0x43c>
100147d0:	2200      	movs	r2, #0
100147d2:	400c      	ands	r4, r1
100147d4:	2300      	movs	r3, #0
100147d6:	2500      	movs	r5, #0
100147d8:	4690      	mov	r8, r2
100147da:	e649      	b.n	10014470 <__aeabi_dmul+0xcc>
100147dc:	9e02      	ldr	r6, [sp, #8]
100147de:	e7a3      	b.n	10014728 <__aeabi_dmul+0x384>
100147e0:	2e1f      	cmp	r6, #31
100147e2:	dc20      	bgt.n	10014826 <__aeabi_dmul+0x482>
100147e4:	2220      	movs	r2, #32
100147e6:	002c      	movs	r4, r5
100147e8:	0018      	movs	r0, r3
100147ea:	1b92      	subs	r2, r2, r6
100147ec:	40f0      	lsrs	r0, r6
100147ee:	4094      	lsls	r4, r2
100147f0:	4093      	lsls	r3, r2
100147f2:	4304      	orrs	r4, r0
100147f4:	1e58      	subs	r0, r3, #1
100147f6:	4183      	sbcs	r3, r0
100147f8:	431c      	orrs	r4, r3
100147fa:	40f5      	lsrs	r5, r6
100147fc:	0763      	lsls	r3, r4, #29
100147fe:	d009      	beq.n	10014814 <__aeabi_dmul+0x470>
10014800:	230f      	movs	r3, #15
10014802:	4023      	ands	r3, r4
10014804:	2b04      	cmp	r3, #4
10014806:	d005      	beq.n	10014814 <__aeabi_dmul+0x470>
10014808:	0023      	movs	r3, r4
1001480a:	1d1c      	adds	r4, r3, #4
1001480c:	429c      	cmp	r4, r3
1001480e:	4192      	sbcs	r2, r2
10014810:	4252      	negs	r2, r2
10014812:	18ad      	adds	r5, r5, r2
10014814:	022b      	lsls	r3, r5, #8
10014816:	d51f      	bpl.n	10014858 <__aeabi_dmul+0x4b4>
10014818:	2401      	movs	r4, #1
1001481a:	2200      	movs	r2, #0
1001481c:	400c      	ands	r4, r1
1001481e:	2301      	movs	r3, #1
10014820:	2500      	movs	r5, #0
10014822:	4690      	mov	r8, r2
10014824:	e624      	b.n	10014470 <__aeabi_dmul+0xcc>
10014826:	201f      	movs	r0, #31
10014828:	002c      	movs	r4, r5
1001482a:	4240      	negs	r0, r0
1001482c:	1a82      	subs	r2, r0, r2
1001482e:	40d4      	lsrs	r4, r2
10014830:	2e20      	cmp	r6, #32
10014832:	d01c      	beq.n	1001486e <__aeabi_dmul+0x4ca>
10014834:	2240      	movs	r2, #64	; 0x40
10014836:	1b96      	subs	r6, r2, r6
10014838:	40b5      	lsls	r5, r6
1001483a:	432b      	orrs	r3, r5
1001483c:	1e58      	subs	r0, r3, #1
1001483e:	4183      	sbcs	r3, r0
10014840:	2007      	movs	r0, #7
10014842:	4323      	orrs	r3, r4
10014844:	4018      	ands	r0, r3
10014846:	2500      	movs	r5, #0
10014848:	2800      	cmp	r0, #0
1001484a:	d009      	beq.n	10014860 <__aeabi_dmul+0x4bc>
1001484c:	220f      	movs	r2, #15
1001484e:	2500      	movs	r5, #0
10014850:	401a      	ands	r2, r3
10014852:	001c      	movs	r4, r3
10014854:	2a04      	cmp	r2, #4
10014856:	d1d8      	bne.n	1001480a <__aeabi_dmul+0x466>
10014858:	0023      	movs	r3, r4
1001485a:	0768      	lsls	r0, r5, #29
1001485c:	026d      	lsls	r5, r5, #9
1001485e:	0b2d      	lsrs	r5, r5, #12
10014860:	2401      	movs	r4, #1
10014862:	08db      	lsrs	r3, r3, #3
10014864:	4303      	orrs	r3, r0
10014866:	4698      	mov	r8, r3
10014868:	400c      	ands	r4, r1
1001486a:	2300      	movs	r3, #0
1001486c:	e600      	b.n	10014470 <__aeabi_dmul+0xcc>
1001486e:	2500      	movs	r5, #0
10014870:	e7e3      	b.n	1001483a <__aeabi_dmul+0x496>
10014872:	2280      	movs	r2, #128	; 0x80
10014874:	2401      	movs	r4, #1
10014876:	0312      	lsls	r2, r2, #12
10014878:	4315      	orrs	r5, r2
1001487a:	032d      	lsls	r5, r5, #12
1001487c:	4698      	mov	r8, r3
1001487e:	0b2d      	lsrs	r5, r5, #12
10014880:	400c      	ands	r4, r1
10014882:	4b04      	ldr	r3, [pc, #16]	; (10014894 <__aeabi_dmul+0x4f0>)
10014884:	e5f4      	b.n	10014470 <__aeabi_dmul+0xcc>
10014886:	46c0      	nop			; (mov r8, r8)
10014888:	000003ff 	.word	0x000003ff
1001488c:	feffffff 	.word	0xfeffffff
10014890:	000007fe 	.word	0x000007fe
10014894:	000007ff 	.word	0x000007ff

10014898 <__aeabi_dsub>:
10014898:	b5f0      	push	{r4, r5, r6, r7, lr}
1001489a:	4657      	mov	r7, sl
1001489c:	464e      	mov	r6, r9
1001489e:	4645      	mov	r5, r8
100148a0:	b4e0      	push	{r5, r6, r7}
100148a2:	000e      	movs	r6, r1
100148a4:	0011      	movs	r1, r2
100148a6:	0ff2      	lsrs	r2, r6, #31
100148a8:	4692      	mov	sl, r2
100148aa:	00c5      	lsls	r5, r0, #3
100148ac:	0f42      	lsrs	r2, r0, #29
100148ae:	0318      	lsls	r0, r3, #12
100148b0:	0337      	lsls	r7, r6, #12
100148b2:	0074      	lsls	r4, r6, #1
100148b4:	0a40      	lsrs	r0, r0, #9
100148b6:	0f4e      	lsrs	r6, r1, #29
100148b8:	0a7f      	lsrs	r7, r7, #9
100148ba:	4330      	orrs	r0, r6
100148bc:	4ecf      	ldr	r6, [pc, #828]	; (10014bfc <__aeabi_dsub+0x364>)
100148be:	4317      	orrs	r7, r2
100148c0:	005a      	lsls	r2, r3, #1
100148c2:	0d64      	lsrs	r4, r4, #21
100148c4:	0d52      	lsrs	r2, r2, #21
100148c6:	0fdb      	lsrs	r3, r3, #31
100148c8:	00c9      	lsls	r1, r1, #3
100148ca:	42b2      	cmp	r2, r6
100148cc:	d100      	bne.n	100148d0 <__aeabi_dsub+0x38>
100148ce:	e0e5      	b.n	10014a9c <__aeabi_dsub+0x204>
100148d0:	2601      	movs	r6, #1
100148d2:	4073      	eors	r3, r6
100148d4:	1aa6      	subs	r6, r4, r2
100148d6:	46b4      	mov	ip, r6
100148d8:	4553      	cmp	r3, sl
100148da:	d100      	bne.n	100148de <__aeabi_dsub+0x46>
100148dc:	e0af      	b.n	10014a3e <__aeabi_dsub+0x1a6>
100148de:	2e00      	cmp	r6, #0
100148e0:	dc00      	bgt.n	100148e4 <__aeabi_dsub+0x4c>
100148e2:	e10d      	b.n	10014b00 <__aeabi_dsub+0x268>
100148e4:	2a00      	cmp	r2, #0
100148e6:	d13a      	bne.n	1001495e <__aeabi_dsub+0xc6>
100148e8:	0003      	movs	r3, r0
100148ea:	430b      	orrs	r3, r1
100148ec:	d000      	beq.n	100148f0 <__aeabi_dsub+0x58>
100148ee:	e0e4      	b.n	10014aba <__aeabi_dsub+0x222>
100148f0:	076b      	lsls	r3, r5, #29
100148f2:	d009      	beq.n	10014908 <__aeabi_dsub+0x70>
100148f4:	230f      	movs	r3, #15
100148f6:	402b      	ands	r3, r5
100148f8:	2b04      	cmp	r3, #4
100148fa:	d005      	beq.n	10014908 <__aeabi_dsub+0x70>
100148fc:	1d2b      	adds	r3, r5, #4
100148fe:	42ab      	cmp	r3, r5
10014900:	41ad      	sbcs	r5, r5
10014902:	426d      	negs	r5, r5
10014904:	197f      	adds	r7, r7, r5
10014906:	001d      	movs	r5, r3
10014908:	023b      	lsls	r3, r7, #8
1001490a:	d400      	bmi.n	1001490e <__aeabi_dsub+0x76>
1001490c:	e088      	b.n	10014a20 <__aeabi_dsub+0x188>
1001490e:	4bbb      	ldr	r3, [pc, #748]	; (10014bfc <__aeabi_dsub+0x364>)
10014910:	3401      	adds	r4, #1
10014912:	429c      	cmp	r4, r3
10014914:	d100      	bne.n	10014918 <__aeabi_dsub+0x80>
10014916:	e110      	b.n	10014b3a <__aeabi_dsub+0x2a2>
10014918:	003a      	movs	r2, r7
1001491a:	4bb9      	ldr	r3, [pc, #740]	; (10014c00 <__aeabi_dsub+0x368>)
1001491c:	4651      	mov	r1, sl
1001491e:	401a      	ands	r2, r3
10014920:	2301      	movs	r3, #1
10014922:	0750      	lsls	r0, r2, #29
10014924:	08ed      	lsrs	r5, r5, #3
10014926:	0252      	lsls	r2, r2, #9
10014928:	0564      	lsls	r4, r4, #21
1001492a:	4305      	orrs	r5, r0
1001492c:	0b12      	lsrs	r2, r2, #12
1001492e:	0d64      	lsrs	r4, r4, #21
10014930:	400b      	ands	r3, r1
10014932:	2100      	movs	r1, #0
10014934:	0028      	movs	r0, r5
10014936:	0312      	lsls	r2, r2, #12
10014938:	0d0d      	lsrs	r5, r1, #20
1001493a:	0b12      	lsrs	r2, r2, #12
1001493c:	0564      	lsls	r4, r4, #21
1001493e:	052d      	lsls	r5, r5, #20
10014940:	4315      	orrs	r5, r2
10014942:	0862      	lsrs	r2, r4, #1
10014944:	4caf      	ldr	r4, [pc, #700]	; (10014c04 <__aeabi_dsub+0x36c>)
10014946:	07db      	lsls	r3, r3, #31
10014948:	402c      	ands	r4, r5
1001494a:	4314      	orrs	r4, r2
1001494c:	0064      	lsls	r4, r4, #1
1001494e:	0864      	lsrs	r4, r4, #1
10014950:	431c      	orrs	r4, r3
10014952:	0021      	movs	r1, r4
10014954:	bc1c      	pop	{r2, r3, r4}
10014956:	4690      	mov	r8, r2
10014958:	4699      	mov	r9, r3
1001495a:	46a2      	mov	sl, r4
1001495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001495e:	4ba7      	ldr	r3, [pc, #668]	; (10014bfc <__aeabi_dsub+0x364>)
10014960:	429c      	cmp	r4, r3
10014962:	d0c5      	beq.n	100148f0 <__aeabi_dsub+0x58>
10014964:	2380      	movs	r3, #128	; 0x80
10014966:	041b      	lsls	r3, r3, #16
10014968:	4318      	orrs	r0, r3
1001496a:	4663      	mov	r3, ip
1001496c:	2b38      	cmp	r3, #56	; 0x38
1001496e:	dd00      	ble.n	10014972 <__aeabi_dsub+0xda>
10014970:	e0fd      	b.n	10014b6e <__aeabi_dsub+0x2d6>
10014972:	2b1f      	cmp	r3, #31
10014974:	dd00      	ble.n	10014978 <__aeabi_dsub+0xe0>
10014976:	e130      	b.n	10014bda <__aeabi_dsub+0x342>
10014978:	4662      	mov	r2, ip
1001497a:	2320      	movs	r3, #32
1001497c:	1a9b      	subs	r3, r3, r2
1001497e:	0002      	movs	r2, r0
10014980:	409a      	lsls	r2, r3
10014982:	4666      	mov	r6, ip
10014984:	4690      	mov	r8, r2
10014986:	000a      	movs	r2, r1
10014988:	4099      	lsls	r1, r3
1001498a:	40f2      	lsrs	r2, r6
1001498c:	4646      	mov	r6, r8
1001498e:	1e4b      	subs	r3, r1, #1
10014990:	4199      	sbcs	r1, r3
10014992:	4332      	orrs	r2, r6
10014994:	4311      	orrs	r1, r2
10014996:	4663      	mov	r3, ip
10014998:	0002      	movs	r2, r0
1001499a:	40da      	lsrs	r2, r3
1001499c:	1a69      	subs	r1, r5, r1
1001499e:	428d      	cmp	r5, r1
100149a0:	419b      	sbcs	r3, r3
100149a2:	000d      	movs	r5, r1
100149a4:	1aba      	subs	r2, r7, r2
100149a6:	425b      	negs	r3, r3
100149a8:	1ad7      	subs	r7, r2, r3
100149aa:	023b      	lsls	r3, r7, #8
100149ac:	d535      	bpl.n	10014a1a <__aeabi_dsub+0x182>
100149ae:	027a      	lsls	r2, r7, #9
100149b0:	0a53      	lsrs	r3, r2, #9
100149b2:	4698      	mov	r8, r3
100149b4:	4643      	mov	r3, r8
100149b6:	2b00      	cmp	r3, #0
100149b8:	d100      	bne.n	100149bc <__aeabi_dsub+0x124>
100149ba:	e0c4      	b.n	10014b46 <__aeabi_dsub+0x2ae>
100149bc:	4640      	mov	r0, r8
100149be:	f000 fb2d 	bl	1001501c <__clzsi2>
100149c2:	0003      	movs	r3, r0
100149c4:	3b08      	subs	r3, #8
100149c6:	2b1f      	cmp	r3, #31
100149c8:	dd00      	ble.n	100149cc <__aeabi_dsub+0x134>
100149ca:	e0c5      	b.n	10014b58 <__aeabi_dsub+0x2c0>
100149cc:	2220      	movs	r2, #32
100149ce:	0029      	movs	r1, r5
100149d0:	1ad2      	subs	r2, r2, r3
100149d2:	4647      	mov	r7, r8
100149d4:	40d1      	lsrs	r1, r2
100149d6:	409f      	lsls	r7, r3
100149d8:	000a      	movs	r2, r1
100149da:	409d      	lsls	r5, r3
100149dc:	433a      	orrs	r2, r7
100149de:	429c      	cmp	r4, r3
100149e0:	dd00      	ble.n	100149e4 <__aeabi_dsub+0x14c>
100149e2:	e0c0      	b.n	10014b66 <__aeabi_dsub+0x2ce>
100149e4:	1b1c      	subs	r4, r3, r4
100149e6:	1c63      	adds	r3, r4, #1
100149e8:	2b1f      	cmp	r3, #31
100149ea:	dd00      	ble.n	100149ee <__aeabi_dsub+0x156>
100149ec:	e0e4      	b.n	10014bb8 <__aeabi_dsub+0x320>
100149ee:	2120      	movs	r1, #32
100149f0:	0014      	movs	r4, r2
100149f2:	0028      	movs	r0, r5
100149f4:	1ac9      	subs	r1, r1, r3
100149f6:	40d8      	lsrs	r0, r3
100149f8:	408c      	lsls	r4, r1
100149fa:	408d      	lsls	r5, r1
100149fc:	4304      	orrs	r4, r0
100149fe:	40da      	lsrs	r2, r3
10014a00:	1e68      	subs	r0, r5, #1
10014a02:	4185      	sbcs	r5, r0
10014a04:	0017      	movs	r7, r2
10014a06:	4325      	orrs	r5, r4
10014a08:	2400      	movs	r4, #0
10014a0a:	e771      	b.n	100148f0 <__aeabi_dsub+0x58>
10014a0c:	4642      	mov	r2, r8
10014a0e:	4663      	mov	r3, ip
10014a10:	431a      	orrs	r2, r3
10014a12:	d100      	bne.n	10014a16 <__aeabi_dsub+0x17e>
10014a14:	e24c      	b.n	10014eb0 <__aeabi_dsub+0x618>
10014a16:	4667      	mov	r7, ip
10014a18:	4645      	mov	r5, r8
10014a1a:	076b      	lsls	r3, r5, #29
10014a1c:	d000      	beq.n	10014a20 <__aeabi_dsub+0x188>
10014a1e:	e769      	b.n	100148f4 <__aeabi_dsub+0x5c>
10014a20:	2301      	movs	r3, #1
10014a22:	4651      	mov	r1, sl
10014a24:	0778      	lsls	r0, r7, #29
10014a26:	08ed      	lsrs	r5, r5, #3
10014a28:	08fa      	lsrs	r2, r7, #3
10014a2a:	400b      	ands	r3, r1
10014a2c:	4305      	orrs	r5, r0
10014a2e:	4973      	ldr	r1, [pc, #460]	; (10014bfc <__aeabi_dsub+0x364>)
10014a30:	428c      	cmp	r4, r1
10014a32:	d038      	beq.n	10014aa6 <__aeabi_dsub+0x20e>
10014a34:	0312      	lsls	r2, r2, #12
10014a36:	0564      	lsls	r4, r4, #21
10014a38:	0b12      	lsrs	r2, r2, #12
10014a3a:	0d64      	lsrs	r4, r4, #21
10014a3c:	e779      	b.n	10014932 <__aeabi_dsub+0x9a>
10014a3e:	2e00      	cmp	r6, #0
10014a40:	dc00      	bgt.n	10014a44 <__aeabi_dsub+0x1ac>
10014a42:	e09a      	b.n	10014b7a <__aeabi_dsub+0x2e2>
10014a44:	2a00      	cmp	r2, #0
10014a46:	d047      	beq.n	10014ad8 <__aeabi_dsub+0x240>
10014a48:	4a6c      	ldr	r2, [pc, #432]	; (10014bfc <__aeabi_dsub+0x364>)
10014a4a:	4294      	cmp	r4, r2
10014a4c:	d100      	bne.n	10014a50 <__aeabi_dsub+0x1b8>
10014a4e:	e74f      	b.n	100148f0 <__aeabi_dsub+0x58>
10014a50:	2280      	movs	r2, #128	; 0x80
10014a52:	0412      	lsls	r2, r2, #16
10014a54:	4310      	orrs	r0, r2
10014a56:	4662      	mov	r2, ip
10014a58:	2a38      	cmp	r2, #56	; 0x38
10014a5a:	dc00      	bgt.n	10014a5e <__aeabi_dsub+0x1c6>
10014a5c:	e108      	b.n	10014c70 <__aeabi_dsub+0x3d8>
10014a5e:	4301      	orrs	r1, r0
10014a60:	1e48      	subs	r0, r1, #1
10014a62:	4181      	sbcs	r1, r0
10014a64:	2200      	movs	r2, #0
10014a66:	b2c9      	uxtb	r1, r1
10014a68:	1949      	adds	r1, r1, r5
10014a6a:	19d2      	adds	r2, r2, r7
10014a6c:	42a9      	cmp	r1, r5
10014a6e:	41bf      	sbcs	r7, r7
10014a70:	000d      	movs	r5, r1
10014a72:	427f      	negs	r7, r7
10014a74:	18bf      	adds	r7, r7, r2
10014a76:	023a      	lsls	r2, r7, #8
10014a78:	d400      	bmi.n	10014a7c <__aeabi_dsub+0x1e4>
10014a7a:	e142      	b.n	10014d02 <__aeabi_dsub+0x46a>
10014a7c:	4a5f      	ldr	r2, [pc, #380]	; (10014bfc <__aeabi_dsub+0x364>)
10014a7e:	3401      	adds	r4, #1
10014a80:	4294      	cmp	r4, r2
10014a82:	d100      	bne.n	10014a86 <__aeabi_dsub+0x1ee>
10014a84:	e14e      	b.n	10014d24 <__aeabi_dsub+0x48c>
10014a86:	2001      	movs	r0, #1
10014a88:	4a5d      	ldr	r2, [pc, #372]	; (10014c00 <__aeabi_dsub+0x368>)
10014a8a:	0869      	lsrs	r1, r5, #1
10014a8c:	403a      	ands	r2, r7
10014a8e:	4028      	ands	r0, r5
10014a90:	4308      	orrs	r0, r1
10014a92:	07d5      	lsls	r5, r2, #31
10014a94:	4305      	orrs	r5, r0
10014a96:	0857      	lsrs	r7, r2, #1
10014a98:	469a      	mov	sl, r3
10014a9a:	e729      	b.n	100148f0 <__aeabi_dsub+0x58>
10014a9c:	0006      	movs	r6, r0
10014a9e:	430e      	orrs	r6, r1
10014aa0:	d000      	beq.n	10014aa4 <__aeabi_dsub+0x20c>
10014aa2:	e717      	b.n	100148d4 <__aeabi_dsub+0x3c>
10014aa4:	e714      	b.n	100148d0 <__aeabi_dsub+0x38>
10014aa6:	0029      	movs	r1, r5
10014aa8:	4311      	orrs	r1, r2
10014aaa:	d100      	bne.n	10014aae <__aeabi_dsub+0x216>
10014aac:	e1f9      	b.n	10014ea2 <__aeabi_dsub+0x60a>
10014aae:	2180      	movs	r1, #128	; 0x80
10014ab0:	0309      	lsls	r1, r1, #12
10014ab2:	430a      	orrs	r2, r1
10014ab4:	0312      	lsls	r2, r2, #12
10014ab6:	0b12      	lsrs	r2, r2, #12
10014ab8:	e73b      	b.n	10014932 <__aeabi_dsub+0x9a>
10014aba:	2301      	movs	r3, #1
10014abc:	425b      	negs	r3, r3
10014abe:	4698      	mov	r8, r3
10014ac0:	44c4      	add	ip, r8
10014ac2:	4663      	mov	r3, ip
10014ac4:	2b00      	cmp	r3, #0
10014ac6:	d172      	bne.n	10014bae <__aeabi_dsub+0x316>
10014ac8:	1a69      	subs	r1, r5, r1
10014aca:	428d      	cmp	r5, r1
10014acc:	419b      	sbcs	r3, r3
10014ace:	1a3f      	subs	r7, r7, r0
10014ad0:	425b      	negs	r3, r3
10014ad2:	1aff      	subs	r7, r7, r3
10014ad4:	000d      	movs	r5, r1
10014ad6:	e768      	b.n	100149aa <__aeabi_dsub+0x112>
10014ad8:	0002      	movs	r2, r0
10014ada:	430a      	orrs	r2, r1
10014adc:	d100      	bne.n	10014ae0 <__aeabi_dsub+0x248>
10014ade:	e707      	b.n	100148f0 <__aeabi_dsub+0x58>
10014ae0:	2201      	movs	r2, #1
10014ae2:	4252      	negs	r2, r2
10014ae4:	4690      	mov	r8, r2
10014ae6:	44c4      	add	ip, r8
10014ae8:	4662      	mov	r2, ip
10014aea:	2a00      	cmp	r2, #0
10014aec:	d000      	beq.n	10014af0 <__aeabi_dsub+0x258>
10014aee:	e0e6      	b.n	10014cbe <__aeabi_dsub+0x426>
10014af0:	1869      	adds	r1, r5, r1
10014af2:	42a9      	cmp	r1, r5
10014af4:	41b6      	sbcs	r6, r6
10014af6:	183f      	adds	r7, r7, r0
10014af8:	4276      	negs	r6, r6
10014afa:	19f7      	adds	r7, r6, r7
10014afc:	000d      	movs	r5, r1
10014afe:	e7ba      	b.n	10014a76 <__aeabi_dsub+0x1de>
10014b00:	2e00      	cmp	r6, #0
10014b02:	d000      	beq.n	10014b06 <__aeabi_dsub+0x26e>
10014b04:	e080      	b.n	10014c08 <__aeabi_dsub+0x370>
10014b06:	1c62      	adds	r2, r4, #1
10014b08:	0552      	lsls	r2, r2, #21
10014b0a:	0d52      	lsrs	r2, r2, #21
10014b0c:	2a01      	cmp	r2, #1
10014b0e:	dc00      	bgt.n	10014b12 <__aeabi_dsub+0x27a>
10014b10:	e0f9      	b.n	10014d06 <__aeabi_dsub+0x46e>
10014b12:	1a6a      	subs	r2, r5, r1
10014b14:	4691      	mov	r9, r2
10014b16:	454d      	cmp	r5, r9
10014b18:	41b6      	sbcs	r6, r6
10014b1a:	1a3a      	subs	r2, r7, r0
10014b1c:	4276      	negs	r6, r6
10014b1e:	1b92      	subs	r2, r2, r6
10014b20:	4690      	mov	r8, r2
10014b22:	0212      	lsls	r2, r2, #8
10014b24:	d400      	bmi.n	10014b28 <__aeabi_dsub+0x290>
10014b26:	e099      	b.n	10014c5c <__aeabi_dsub+0x3c4>
10014b28:	1b4d      	subs	r5, r1, r5
10014b2a:	42a9      	cmp	r1, r5
10014b2c:	4189      	sbcs	r1, r1
10014b2e:	1bc7      	subs	r7, r0, r7
10014b30:	4249      	negs	r1, r1
10014b32:	1a7a      	subs	r2, r7, r1
10014b34:	4690      	mov	r8, r2
10014b36:	469a      	mov	sl, r3
10014b38:	e73c      	b.n	100149b4 <__aeabi_dsub+0x11c>
10014b3a:	4652      	mov	r2, sl
10014b3c:	2301      	movs	r3, #1
10014b3e:	2500      	movs	r5, #0
10014b40:	4013      	ands	r3, r2
10014b42:	2200      	movs	r2, #0
10014b44:	e6f5      	b.n	10014932 <__aeabi_dsub+0x9a>
10014b46:	0028      	movs	r0, r5
10014b48:	f000 fa68 	bl	1001501c <__clzsi2>
10014b4c:	3020      	adds	r0, #32
10014b4e:	0003      	movs	r3, r0
10014b50:	3b08      	subs	r3, #8
10014b52:	2b1f      	cmp	r3, #31
10014b54:	dc00      	bgt.n	10014b58 <__aeabi_dsub+0x2c0>
10014b56:	e739      	b.n	100149cc <__aeabi_dsub+0x134>
10014b58:	002a      	movs	r2, r5
10014b5a:	3828      	subs	r0, #40	; 0x28
10014b5c:	4082      	lsls	r2, r0
10014b5e:	2500      	movs	r5, #0
10014b60:	429c      	cmp	r4, r3
10014b62:	dc00      	bgt.n	10014b66 <__aeabi_dsub+0x2ce>
10014b64:	e73e      	b.n	100149e4 <__aeabi_dsub+0x14c>
10014b66:	4f26      	ldr	r7, [pc, #152]	; (10014c00 <__aeabi_dsub+0x368>)
10014b68:	1ae4      	subs	r4, r4, r3
10014b6a:	4017      	ands	r7, r2
10014b6c:	e6c0      	b.n	100148f0 <__aeabi_dsub+0x58>
10014b6e:	4301      	orrs	r1, r0
10014b70:	1e48      	subs	r0, r1, #1
10014b72:	4181      	sbcs	r1, r0
10014b74:	2200      	movs	r2, #0
10014b76:	b2c9      	uxtb	r1, r1
10014b78:	e710      	b.n	1001499c <__aeabi_dsub+0x104>
10014b7a:	2e00      	cmp	r6, #0
10014b7c:	d000      	beq.n	10014b80 <__aeabi_dsub+0x2e8>
10014b7e:	e0f1      	b.n	10014d64 <__aeabi_dsub+0x4cc>
10014b80:	1c62      	adds	r2, r4, #1
10014b82:	4694      	mov	ip, r2
10014b84:	0552      	lsls	r2, r2, #21
10014b86:	0d52      	lsrs	r2, r2, #21
10014b88:	2a01      	cmp	r2, #1
10014b8a:	dc00      	bgt.n	10014b8e <__aeabi_dsub+0x2f6>
10014b8c:	e0a0      	b.n	10014cd0 <__aeabi_dsub+0x438>
10014b8e:	4a1b      	ldr	r2, [pc, #108]	; (10014bfc <__aeabi_dsub+0x364>)
10014b90:	4594      	cmp	ip, r2
10014b92:	d100      	bne.n	10014b96 <__aeabi_dsub+0x2fe>
10014b94:	e0c5      	b.n	10014d22 <__aeabi_dsub+0x48a>
10014b96:	1869      	adds	r1, r5, r1
10014b98:	42a9      	cmp	r1, r5
10014b9a:	4192      	sbcs	r2, r2
10014b9c:	183f      	adds	r7, r7, r0
10014b9e:	4252      	negs	r2, r2
10014ba0:	19d2      	adds	r2, r2, r7
10014ba2:	0849      	lsrs	r1, r1, #1
10014ba4:	07d5      	lsls	r5, r2, #31
10014ba6:	430d      	orrs	r5, r1
10014ba8:	0857      	lsrs	r7, r2, #1
10014baa:	4664      	mov	r4, ip
10014bac:	e6a0      	b.n	100148f0 <__aeabi_dsub+0x58>
10014bae:	4b13      	ldr	r3, [pc, #76]	; (10014bfc <__aeabi_dsub+0x364>)
10014bb0:	429c      	cmp	r4, r3
10014bb2:	d000      	beq.n	10014bb6 <__aeabi_dsub+0x31e>
10014bb4:	e6d9      	b.n	1001496a <__aeabi_dsub+0xd2>
10014bb6:	e69b      	b.n	100148f0 <__aeabi_dsub+0x58>
10014bb8:	0011      	movs	r1, r2
10014bba:	3c1f      	subs	r4, #31
10014bbc:	40e1      	lsrs	r1, r4
10014bbe:	000c      	movs	r4, r1
10014bc0:	2b20      	cmp	r3, #32
10014bc2:	d100      	bne.n	10014bc6 <__aeabi_dsub+0x32e>
10014bc4:	e080      	b.n	10014cc8 <__aeabi_dsub+0x430>
10014bc6:	2140      	movs	r1, #64	; 0x40
10014bc8:	1acb      	subs	r3, r1, r3
10014bca:	409a      	lsls	r2, r3
10014bcc:	4315      	orrs	r5, r2
10014bce:	1e6a      	subs	r2, r5, #1
10014bd0:	4195      	sbcs	r5, r2
10014bd2:	2700      	movs	r7, #0
10014bd4:	4325      	orrs	r5, r4
10014bd6:	2400      	movs	r4, #0
10014bd8:	e71f      	b.n	10014a1a <__aeabi_dsub+0x182>
10014bda:	4663      	mov	r3, ip
10014bdc:	0002      	movs	r2, r0
10014bde:	3b20      	subs	r3, #32
10014be0:	40da      	lsrs	r2, r3
10014be2:	4663      	mov	r3, ip
10014be4:	2b20      	cmp	r3, #32
10014be6:	d071      	beq.n	10014ccc <__aeabi_dsub+0x434>
10014be8:	2340      	movs	r3, #64	; 0x40
10014bea:	4666      	mov	r6, ip
10014bec:	1b9b      	subs	r3, r3, r6
10014bee:	4098      	lsls	r0, r3
10014bf0:	4301      	orrs	r1, r0
10014bf2:	1e48      	subs	r0, r1, #1
10014bf4:	4181      	sbcs	r1, r0
10014bf6:	4311      	orrs	r1, r2
10014bf8:	2200      	movs	r2, #0
10014bfa:	e6cf      	b.n	1001499c <__aeabi_dsub+0x104>
10014bfc:	000007ff 	.word	0x000007ff
10014c00:	ff7fffff 	.word	0xff7fffff
10014c04:	800fffff 	.word	0x800fffff
10014c08:	2c00      	cmp	r4, #0
10014c0a:	d048      	beq.n	10014c9e <__aeabi_dsub+0x406>
10014c0c:	4cca      	ldr	r4, [pc, #808]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014c0e:	42a2      	cmp	r2, r4
10014c10:	d100      	bne.n	10014c14 <__aeabi_dsub+0x37c>
10014c12:	e0a2      	b.n	10014d5a <__aeabi_dsub+0x4c2>
10014c14:	4274      	negs	r4, r6
10014c16:	46a1      	mov	r9, r4
10014c18:	2480      	movs	r4, #128	; 0x80
10014c1a:	0424      	lsls	r4, r4, #16
10014c1c:	4327      	orrs	r7, r4
10014c1e:	464c      	mov	r4, r9
10014c20:	2c38      	cmp	r4, #56	; 0x38
10014c22:	dd00      	ble.n	10014c26 <__aeabi_dsub+0x38e>
10014c24:	e0db      	b.n	10014dde <__aeabi_dsub+0x546>
10014c26:	2c1f      	cmp	r4, #31
10014c28:	dd00      	ble.n	10014c2c <__aeabi_dsub+0x394>
10014c2a:	e144      	b.n	10014eb6 <__aeabi_dsub+0x61e>
10014c2c:	464e      	mov	r6, r9
10014c2e:	2420      	movs	r4, #32
10014c30:	1ba4      	subs	r4, r4, r6
10014c32:	003e      	movs	r6, r7
10014c34:	40a6      	lsls	r6, r4
10014c36:	46a2      	mov	sl, r4
10014c38:	46b0      	mov	r8, r6
10014c3a:	464c      	mov	r4, r9
10014c3c:	002e      	movs	r6, r5
10014c3e:	40e6      	lsrs	r6, r4
10014c40:	46b4      	mov	ip, r6
10014c42:	4646      	mov	r6, r8
10014c44:	4664      	mov	r4, ip
10014c46:	4326      	orrs	r6, r4
10014c48:	4654      	mov	r4, sl
10014c4a:	40a5      	lsls	r5, r4
10014c4c:	1e6c      	subs	r4, r5, #1
10014c4e:	41a5      	sbcs	r5, r4
10014c50:	0034      	movs	r4, r6
10014c52:	432c      	orrs	r4, r5
10014c54:	464d      	mov	r5, r9
10014c56:	40ef      	lsrs	r7, r5
10014c58:	1b0d      	subs	r5, r1, r4
10014c5a:	e028      	b.n	10014cae <__aeabi_dsub+0x416>
10014c5c:	464a      	mov	r2, r9
10014c5e:	4643      	mov	r3, r8
10014c60:	464d      	mov	r5, r9
10014c62:	431a      	orrs	r2, r3
10014c64:	d000      	beq.n	10014c68 <__aeabi_dsub+0x3d0>
10014c66:	e6a5      	b.n	100149b4 <__aeabi_dsub+0x11c>
10014c68:	2300      	movs	r3, #0
10014c6a:	2400      	movs	r4, #0
10014c6c:	2500      	movs	r5, #0
10014c6e:	e6de      	b.n	10014a2e <__aeabi_dsub+0x196>
10014c70:	2a1f      	cmp	r2, #31
10014c72:	dc5a      	bgt.n	10014d2a <__aeabi_dsub+0x492>
10014c74:	4666      	mov	r6, ip
10014c76:	2220      	movs	r2, #32
10014c78:	1b92      	subs	r2, r2, r6
10014c7a:	0006      	movs	r6, r0
10014c7c:	4096      	lsls	r6, r2
10014c7e:	4691      	mov	r9, r2
10014c80:	46b0      	mov	r8, r6
10014c82:	4662      	mov	r2, ip
10014c84:	000e      	movs	r6, r1
10014c86:	40d6      	lsrs	r6, r2
10014c88:	4642      	mov	r2, r8
10014c8a:	4316      	orrs	r6, r2
10014c8c:	464a      	mov	r2, r9
10014c8e:	4091      	lsls	r1, r2
10014c90:	1e4a      	subs	r2, r1, #1
10014c92:	4191      	sbcs	r1, r2
10014c94:	0002      	movs	r2, r0
10014c96:	4660      	mov	r0, ip
10014c98:	4331      	orrs	r1, r6
10014c9a:	40c2      	lsrs	r2, r0
10014c9c:	e6e4      	b.n	10014a68 <__aeabi_dsub+0x1d0>
10014c9e:	003c      	movs	r4, r7
10014ca0:	432c      	orrs	r4, r5
10014ca2:	d05a      	beq.n	10014d5a <__aeabi_dsub+0x4c2>
10014ca4:	43f4      	mvns	r4, r6
10014ca6:	46a1      	mov	r9, r4
10014ca8:	2c00      	cmp	r4, #0
10014caa:	d152      	bne.n	10014d52 <__aeabi_dsub+0x4ba>
10014cac:	1b4d      	subs	r5, r1, r5
10014cae:	42a9      	cmp	r1, r5
10014cb0:	4189      	sbcs	r1, r1
10014cb2:	1bc7      	subs	r7, r0, r7
10014cb4:	4249      	negs	r1, r1
10014cb6:	1a7f      	subs	r7, r7, r1
10014cb8:	0014      	movs	r4, r2
10014cba:	469a      	mov	sl, r3
10014cbc:	e675      	b.n	100149aa <__aeabi_dsub+0x112>
10014cbe:	4a9e      	ldr	r2, [pc, #632]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014cc0:	4294      	cmp	r4, r2
10014cc2:	d000      	beq.n	10014cc6 <__aeabi_dsub+0x42e>
10014cc4:	e6c7      	b.n	10014a56 <__aeabi_dsub+0x1be>
10014cc6:	e613      	b.n	100148f0 <__aeabi_dsub+0x58>
10014cc8:	2200      	movs	r2, #0
10014cca:	e77f      	b.n	10014bcc <__aeabi_dsub+0x334>
10014ccc:	2000      	movs	r0, #0
10014cce:	e78f      	b.n	10014bf0 <__aeabi_dsub+0x358>
10014cd0:	2c00      	cmp	r4, #0
10014cd2:	d000      	beq.n	10014cd6 <__aeabi_dsub+0x43e>
10014cd4:	e0c8      	b.n	10014e68 <__aeabi_dsub+0x5d0>
10014cd6:	003b      	movs	r3, r7
10014cd8:	432b      	orrs	r3, r5
10014cda:	d100      	bne.n	10014cde <__aeabi_dsub+0x446>
10014cdc:	e10f      	b.n	10014efe <__aeabi_dsub+0x666>
10014cde:	0003      	movs	r3, r0
10014ce0:	430b      	orrs	r3, r1
10014ce2:	d100      	bne.n	10014ce6 <__aeabi_dsub+0x44e>
10014ce4:	e604      	b.n	100148f0 <__aeabi_dsub+0x58>
10014ce6:	1869      	adds	r1, r5, r1
10014ce8:	42a9      	cmp	r1, r5
10014cea:	419b      	sbcs	r3, r3
10014cec:	183f      	adds	r7, r7, r0
10014cee:	425b      	negs	r3, r3
10014cf0:	19df      	adds	r7, r3, r7
10014cf2:	023b      	lsls	r3, r7, #8
10014cf4:	d400      	bmi.n	10014cf8 <__aeabi_dsub+0x460>
10014cf6:	e11a      	b.n	10014f2e <__aeabi_dsub+0x696>
10014cf8:	4b90      	ldr	r3, [pc, #576]	; (10014f3c <__aeabi_dsub+0x6a4>)
10014cfa:	000d      	movs	r5, r1
10014cfc:	401f      	ands	r7, r3
10014cfe:	4664      	mov	r4, ip
10014d00:	e5f6      	b.n	100148f0 <__aeabi_dsub+0x58>
10014d02:	469a      	mov	sl, r3
10014d04:	e689      	b.n	10014a1a <__aeabi_dsub+0x182>
10014d06:	003a      	movs	r2, r7
10014d08:	432a      	orrs	r2, r5
10014d0a:	2c00      	cmp	r4, #0
10014d0c:	d15c      	bne.n	10014dc8 <__aeabi_dsub+0x530>
10014d0e:	2a00      	cmp	r2, #0
10014d10:	d175      	bne.n	10014dfe <__aeabi_dsub+0x566>
10014d12:	0002      	movs	r2, r0
10014d14:	430a      	orrs	r2, r1
10014d16:	d100      	bne.n	10014d1a <__aeabi_dsub+0x482>
10014d18:	e0ca      	b.n	10014eb0 <__aeabi_dsub+0x618>
10014d1a:	0007      	movs	r7, r0
10014d1c:	000d      	movs	r5, r1
10014d1e:	469a      	mov	sl, r3
10014d20:	e5e6      	b.n	100148f0 <__aeabi_dsub+0x58>
10014d22:	4664      	mov	r4, ip
10014d24:	2200      	movs	r2, #0
10014d26:	2500      	movs	r5, #0
10014d28:	e681      	b.n	10014a2e <__aeabi_dsub+0x196>
10014d2a:	4662      	mov	r2, ip
10014d2c:	0006      	movs	r6, r0
10014d2e:	3a20      	subs	r2, #32
10014d30:	40d6      	lsrs	r6, r2
10014d32:	4662      	mov	r2, ip
10014d34:	46b0      	mov	r8, r6
10014d36:	2a20      	cmp	r2, #32
10014d38:	d100      	bne.n	10014d3c <__aeabi_dsub+0x4a4>
10014d3a:	e0b7      	b.n	10014eac <__aeabi_dsub+0x614>
10014d3c:	2240      	movs	r2, #64	; 0x40
10014d3e:	4666      	mov	r6, ip
10014d40:	1b92      	subs	r2, r2, r6
10014d42:	4090      	lsls	r0, r2
10014d44:	4301      	orrs	r1, r0
10014d46:	4642      	mov	r2, r8
10014d48:	1e48      	subs	r0, r1, #1
10014d4a:	4181      	sbcs	r1, r0
10014d4c:	4311      	orrs	r1, r2
10014d4e:	2200      	movs	r2, #0
10014d50:	e68a      	b.n	10014a68 <__aeabi_dsub+0x1d0>
10014d52:	4c79      	ldr	r4, [pc, #484]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014d54:	42a2      	cmp	r2, r4
10014d56:	d000      	beq.n	10014d5a <__aeabi_dsub+0x4c2>
10014d58:	e761      	b.n	10014c1e <__aeabi_dsub+0x386>
10014d5a:	0007      	movs	r7, r0
10014d5c:	000d      	movs	r5, r1
10014d5e:	0014      	movs	r4, r2
10014d60:	469a      	mov	sl, r3
10014d62:	e5c5      	b.n	100148f0 <__aeabi_dsub+0x58>
10014d64:	2c00      	cmp	r4, #0
10014d66:	d141      	bne.n	10014dec <__aeabi_dsub+0x554>
10014d68:	003c      	movs	r4, r7
10014d6a:	432c      	orrs	r4, r5
10014d6c:	d078      	beq.n	10014e60 <__aeabi_dsub+0x5c8>
10014d6e:	43f4      	mvns	r4, r6
10014d70:	46a1      	mov	r9, r4
10014d72:	2c00      	cmp	r4, #0
10014d74:	d020      	beq.n	10014db8 <__aeabi_dsub+0x520>
10014d76:	4c70      	ldr	r4, [pc, #448]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014d78:	42a2      	cmp	r2, r4
10014d7a:	d071      	beq.n	10014e60 <__aeabi_dsub+0x5c8>
10014d7c:	464c      	mov	r4, r9
10014d7e:	2c38      	cmp	r4, #56	; 0x38
10014d80:	dd00      	ble.n	10014d84 <__aeabi_dsub+0x4ec>
10014d82:	e0b2      	b.n	10014eea <__aeabi_dsub+0x652>
10014d84:	2c1f      	cmp	r4, #31
10014d86:	dd00      	ble.n	10014d8a <__aeabi_dsub+0x4f2>
10014d88:	e0bc      	b.n	10014f04 <__aeabi_dsub+0x66c>
10014d8a:	2620      	movs	r6, #32
10014d8c:	1b34      	subs	r4, r6, r4
10014d8e:	46a2      	mov	sl, r4
10014d90:	003c      	movs	r4, r7
10014d92:	4656      	mov	r6, sl
10014d94:	40b4      	lsls	r4, r6
10014d96:	464e      	mov	r6, r9
10014d98:	46a0      	mov	r8, r4
10014d9a:	002c      	movs	r4, r5
10014d9c:	40f4      	lsrs	r4, r6
10014d9e:	46a4      	mov	ip, r4
10014da0:	4644      	mov	r4, r8
10014da2:	4666      	mov	r6, ip
10014da4:	4334      	orrs	r4, r6
10014da6:	46a4      	mov	ip, r4
10014da8:	4654      	mov	r4, sl
10014daa:	40a5      	lsls	r5, r4
10014dac:	4664      	mov	r4, ip
10014dae:	1e6e      	subs	r6, r5, #1
10014db0:	41b5      	sbcs	r5, r6
10014db2:	4325      	orrs	r5, r4
10014db4:	464c      	mov	r4, r9
10014db6:	40e7      	lsrs	r7, r4
10014db8:	186d      	adds	r5, r5, r1
10014dba:	428d      	cmp	r5, r1
10014dbc:	4189      	sbcs	r1, r1
10014dbe:	183f      	adds	r7, r7, r0
10014dc0:	4249      	negs	r1, r1
10014dc2:	19cf      	adds	r7, r1, r7
10014dc4:	0014      	movs	r4, r2
10014dc6:	e656      	b.n	10014a76 <__aeabi_dsub+0x1de>
10014dc8:	2a00      	cmp	r2, #0
10014dca:	d12f      	bne.n	10014e2c <__aeabi_dsub+0x594>
10014dcc:	0002      	movs	r2, r0
10014dce:	430a      	orrs	r2, r1
10014dd0:	d100      	bne.n	10014dd4 <__aeabi_dsub+0x53c>
10014dd2:	e084      	b.n	10014ede <__aeabi_dsub+0x646>
10014dd4:	0007      	movs	r7, r0
10014dd6:	000d      	movs	r5, r1
10014dd8:	469a      	mov	sl, r3
10014dda:	4c57      	ldr	r4, [pc, #348]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014ddc:	e588      	b.n	100148f0 <__aeabi_dsub+0x58>
10014dde:	433d      	orrs	r5, r7
10014de0:	1e6f      	subs	r7, r5, #1
10014de2:	41bd      	sbcs	r5, r7
10014de4:	b2ec      	uxtb	r4, r5
10014de6:	2700      	movs	r7, #0
10014de8:	1b0d      	subs	r5, r1, r4
10014dea:	e760      	b.n	10014cae <__aeabi_dsub+0x416>
10014dec:	4c52      	ldr	r4, [pc, #328]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014dee:	42a2      	cmp	r2, r4
10014df0:	d036      	beq.n	10014e60 <__aeabi_dsub+0x5c8>
10014df2:	4274      	negs	r4, r6
10014df4:	2680      	movs	r6, #128	; 0x80
10014df6:	0436      	lsls	r6, r6, #16
10014df8:	46a1      	mov	r9, r4
10014dfa:	4337      	orrs	r7, r6
10014dfc:	e7be      	b.n	10014d7c <__aeabi_dsub+0x4e4>
10014dfe:	0002      	movs	r2, r0
10014e00:	430a      	orrs	r2, r1
10014e02:	d100      	bne.n	10014e06 <__aeabi_dsub+0x56e>
10014e04:	e574      	b.n	100148f0 <__aeabi_dsub+0x58>
10014e06:	1a6a      	subs	r2, r5, r1
10014e08:	4690      	mov	r8, r2
10014e0a:	4545      	cmp	r5, r8
10014e0c:	41b6      	sbcs	r6, r6
10014e0e:	1a3a      	subs	r2, r7, r0
10014e10:	4276      	negs	r6, r6
10014e12:	1b92      	subs	r2, r2, r6
10014e14:	4694      	mov	ip, r2
10014e16:	0212      	lsls	r2, r2, #8
10014e18:	d400      	bmi.n	10014e1c <__aeabi_dsub+0x584>
10014e1a:	e5f7      	b.n	10014a0c <__aeabi_dsub+0x174>
10014e1c:	1b4d      	subs	r5, r1, r5
10014e1e:	42a9      	cmp	r1, r5
10014e20:	4189      	sbcs	r1, r1
10014e22:	1bc7      	subs	r7, r0, r7
10014e24:	4249      	negs	r1, r1
10014e26:	1a7f      	subs	r7, r7, r1
10014e28:	469a      	mov	sl, r3
10014e2a:	e561      	b.n	100148f0 <__aeabi_dsub+0x58>
10014e2c:	0002      	movs	r2, r0
10014e2e:	430a      	orrs	r2, r1
10014e30:	d03a      	beq.n	10014ea8 <__aeabi_dsub+0x610>
10014e32:	08ed      	lsrs	r5, r5, #3
10014e34:	077c      	lsls	r4, r7, #29
10014e36:	432c      	orrs	r4, r5
10014e38:	2580      	movs	r5, #128	; 0x80
10014e3a:	08fa      	lsrs	r2, r7, #3
10014e3c:	032d      	lsls	r5, r5, #12
10014e3e:	422a      	tst	r2, r5
10014e40:	d008      	beq.n	10014e54 <__aeabi_dsub+0x5bc>
10014e42:	08c7      	lsrs	r7, r0, #3
10014e44:	422f      	tst	r7, r5
10014e46:	d105      	bne.n	10014e54 <__aeabi_dsub+0x5bc>
10014e48:	0745      	lsls	r5, r0, #29
10014e4a:	002c      	movs	r4, r5
10014e4c:	003a      	movs	r2, r7
10014e4e:	469a      	mov	sl, r3
10014e50:	08c9      	lsrs	r1, r1, #3
10014e52:	430c      	orrs	r4, r1
10014e54:	0f67      	lsrs	r7, r4, #29
10014e56:	00d2      	lsls	r2, r2, #3
10014e58:	00e5      	lsls	r5, r4, #3
10014e5a:	4317      	orrs	r7, r2
10014e5c:	4c36      	ldr	r4, [pc, #216]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014e5e:	e547      	b.n	100148f0 <__aeabi_dsub+0x58>
10014e60:	0007      	movs	r7, r0
10014e62:	000d      	movs	r5, r1
10014e64:	0014      	movs	r4, r2
10014e66:	e543      	b.n	100148f0 <__aeabi_dsub+0x58>
10014e68:	003a      	movs	r2, r7
10014e6a:	432a      	orrs	r2, r5
10014e6c:	d043      	beq.n	10014ef6 <__aeabi_dsub+0x65e>
10014e6e:	0002      	movs	r2, r0
10014e70:	430a      	orrs	r2, r1
10014e72:	d019      	beq.n	10014ea8 <__aeabi_dsub+0x610>
10014e74:	08ed      	lsrs	r5, r5, #3
10014e76:	077c      	lsls	r4, r7, #29
10014e78:	432c      	orrs	r4, r5
10014e7a:	2580      	movs	r5, #128	; 0x80
10014e7c:	08fa      	lsrs	r2, r7, #3
10014e7e:	032d      	lsls	r5, r5, #12
10014e80:	422a      	tst	r2, r5
10014e82:	d007      	beq.n	10014e94 <__aeabi_dsub+0x5fc>
10014e84:	08c6      	lsrs	r6, r0, #3
10014e86:	422e      	tst	r6, r5
10014e88:	d104      	bne.n	10014e94 <__aeabi_dsub+0x5fc>
10014e8a:	0747      	lsls	r7, r0, #29
10014e8c:	003c      	movs	r4, r7
10014e8e:	0032      	movs	r2, r6
10014e90:	08c9      	lsrs	r1, r1, #3
10014e92:	430c      	orrs	r4, r1
10014e94:	00d7      	lsls	r7, r2, #3
10014e96:	0f62      	lsrs	r2, r4, #29
10014e98:	00e5      	lsls	r5, r4, #3
10014e9a:	4317      	orrs	r7, r2
10014e9c:	469a      	mov	sl, r3
10014e9e:	4c26      	ldr	r4, [pc, #152]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014ea0:	e526      	b.n	100148f0 <__aeabi_dsub+0x58>
10014ea2:	2200      	movs	r2, #0
10014ea4:	2500      	movs	r5, #0
10014ea6:	e544      	b.n	10014932 <__aeabi_dsub+0x9a>
10014ea8:	4c23      	ldr	r4, [pc, #140]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014eaa:	e521      	b.n	100148f0 <__aeabi_dsub+0x58>
10014eac:	2000      	movs	r0, #0
10014eae:	e749      	b.n	10014d44 <__aeabi_dsub+0x4ac>
10014eb0:	2300      	movs	r3, #0
10014eb2:	2500      	movs	r5, #0
10014eb4:	e5bb      	b.n	10014a2e <__aeabi_dsub+0x196>
10014eb6:	464c      	mov	r4, r9
10014eb8:	003e      	movs	r6, r7
10014eba:	3c20      	subs	r4, #32
10014ebc:	40e6      	lsrs	r6, r4
10014ebe:	464c      	mov	r4, r9
10014ec0:	46b4      	mov	ip, r6
10014ec2:	2c20      	cmp	r4, #32
10014ec4:	d031      	beq.n	10014f2a <__aeabi_dsub+0x692>
10014ec6:	2440      	movs	r4, #64	; 0x40
10014ec8:	464e      	mov	r6, r9
10014eca:	1ba6      	subs	r6, r4, r6
10014ecc:	40b7      	lsls	r7, r6
10014ece:	433d      	orrs	r5, r7
10014ed0:	1e6c      	subs	r4, r5, #1
10014ed2:	41a5      	sbcs	r5, r4
10014ed4:	4664      	mov	r4, ip
10014ed6:	432c      	orrs	r4, r5
10014ed8:	2700      	movs	r7, #0
10014eda:	1b0d      	subs	r5, r1, r4
10014edc:	e6e7      	b.n	10014cae <__aeabi_dsub+0x416>
10014ede:	2280      	movs	r2, #128	; 0x80
10014ee0:	2300      	movs	r3, #0
10014ee2:	0312      	lsls	r2, r2, #12
10014ee4:	4c14      	ldr	r4, [pc, #80]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014ee6:	2500      	movs	r5, #0
10014ee8:	e5a1      	b.n	10014a2e <__aeabi_dsub+0x196>
10014eea:	433d      	orrs	r5, r7
10014eec:	1e6f      	subs	r7, r5, #1
10014eee:	41bd      	sbcs	r5, r7
10014ef0:	2700      	movs	r7, #0
10014ef2:	b2ed      	uxtb	r5, r5
10014ef4:	e760      	b.n	10014db8 <__aeabi_dsub+0x520>
10014ef6:	0007      	movs	r7, r0
10014ef8:	000d      	movs	r5, r1
10014efa:	4c0f      	ldr	r4, [pc, #60]	; (10014f38 <__aeabi_dsub+0x6a0>)
10014efc:	e4f8      	b.n	100148f0 <__aeabi_dsub+0x58>
10014efe:	0007      	movs	r7, r0
10014f00:	000d      	movs	r5, r1
10014f02:	e4f5      	b.n	100148f0 <__aeabi_dsub+0x58>
10014f04:	464e      	mov	r6, r9
10014f06:	003c      	movs	r4, r7
10014f08:	3e20      	subs	r6, #32
10014f0a:	40f4      	lsrs	r4, r6
10014f0c:	46a0      	mov	r8, r4
10014f0e:	464c      	mov	r4, r9
10014f10:	2c20      	cmp	r4, #32
10014f12:	d00e      	beq.n	10014f32 <__aeabi_dsub+0x69a>
10014f14:	2440      	movs	r4, #64	; 0x40
10014f16:	464e      	mov	r6, r9
10014f18:	1ba4      	subs	r4, r4, r6
10014f1a:	40a7      	lsls	r7, r4
10014f1c:	433d      	orrs	r5, r7
10014f1e:	1e6f      	subs	r7, r5, #1
10014f20:	41bd      	sbcs	r5, r7
10014f22:	4644      	mov	r4, r8
10014f24:	2700      	movs	r7, #0
10014f26:	4325      	orrs	r5, r4
10014f28:	e746      	b.n	10014db8 <__aeabi_dsub+0x520>
10014f2a:	2700      	movs	r7, #0
10014f2c:	e7cf      	b.n	10014ece <__aeabi_dsub+0x636>
10014f2e:	000d      	movs	r5, r1
10014f30:	e573      	b.n	10014a1a <__aeabi_dsub+0x182>
10014f32:	2700      	movs	r7, #0
10014f34:	e7f2      	b.n	10014f1c <__aeabi_dsub+0x684>
10014f36:	46c0      	nop			; (mov r8, r8)
10014f38:	000007ff 	.word	0x000007ff
10014f3c:	ff7fffff 	.word	0xff7fffff

10014f40 <__aeabi_d2iz>:
10014f40:	030b      	lsls	r3, r1, #12
10014f42:	b530      	push	{r4, r5, lr}
10014f44:	4d13      	ldr	r5, [pc, #76]	; (10014f94 <__aeabi_d2iz+0x54>)
10014f46:	0b1a      	lsrs	r2, r3, #12
10014f48:	004b      	lsls	r3, r1, #1
10014f4a:	0d5b      	lsrs	r3, r3, #21
10014f4c:	0fc9      	lsrs	r1, r1, #31
10014f4e:	2400      	movs	r4, #0
10014f50:	42ab      	cmp	r3, r5
10014f52:	dd11      	ble.n	10014f78 <__aeabi_d2iz+0x38>
10014f54:	4c10      	ldr	r4, [pc, #64]	; (10014f98 <__aeabi_d2iz+0x58>)
10014f56:	42a3      	cmp	r3, r4
10014f58:	dc10      	bgt.n	10014f7c <__aeabi_d2iz+0x3c>
10014f5a:	2480      	movs	r4, #128	; 0x80
10014f5c:	0364      	lsls	r4, r4, #13
10014f5e:	4322      	orrs	r2, r4
10014f60:	4c0e      	ldr	r4, [pc, #56]	; (10014f9c <__aeabi_d2iz+0x5c>)
10014f62:	1ae4      	subs	r4, r4, r3
10014f64:	2c1f      	cmp	r4, #31
10014f66:	dd0c      	ble.n	10014f82 <__aeabi_d2iz+0x42>
10014f68:	480d      	ldr	r0, [pc, #52]	; (10014fa0 <__aeabi_d2iz+0x60>)
10014f6a:	1ac3      	subs	r3, r0, r3
10014f6c:	40da      	lsrs	r2, r3
10014f6e:	0013      	movs	r3, r2
10014f70:	425c      	negs	r4, r3
10014f72:	2900      	cmp	r1, #0
10014f74:	d100      	bne.n	10014f78 <__aeabi_d2iz+0x38>
10014f76:	001c      	movs	r4, r3
10014f78:	0020      	movs	r0, r4
10014f7a:	bd30      	pop	{r4, r5, pc}
10014f7c:	4b09      	ldr	r3, [pc, #36]	; (10014fa4 <__aeabi_d2iz+0x64>)
10014f7e:	18cc      	adds	r4, r1, r3
10014f80:	e7fa      	b.n	10014f78 <__aeabi_d2iz+0x38>
10014f82:	40e0      	lsrs	r0, r4
10014f84:	4c08      	ldr	r4, [pc, #32]	; (10014fa8 <__aeabi_d2iz+0x68>)
10014f86:	46a4      	mov	ip, r4
10014f88:	4463      	add	r3, ip
10014f8a:	409a      	lsls	r2, r3
10014f8c:	0013      	movs	r3, r2
10014f8e:	4303      	orrs	r3, r0
10014f90:	e7ee      	b.n	10014f70 <__aeabi_d2iz+0x30>
10014f92:	46c0      	nop			; (mov r8, r8)
10014f94:	000003fe 	.word	0x000003fe
10014f98:	0000041d 	.word	0x0000041d
10014f9c:	00000433 	.word	0x00000433
10014fa0:	00000413 	.word	0x00000413
10014fa4:	7fffffff 	.word	0x7fffffff
10014fa8:	fffffbed 	.word	0xfffffbed

10014fac <__aeabi_ui2d>:
10014fac:	b570      	push	{r4, r5, r6, lr}
10014fae:	1e05      	subs	r5, r0, #0
10014fb0:	d028      	beq.n	10015004 <__aeabi_ui2d+0x58>
10014fb2:	f000 f833 	bl	1001501c <__clzsi2>
10014fb6:	4b15      	ldr	r3, [pc, #84]	; (1001500c <__aeabi_ui2d+0x60>)
10014fb8:	4a15      	ldr	r2, [pc, #84]	; (10015010 <__aeabi_ui2d+0x64>)
10014fba:	1a1b      	subs	r3, r3, r0
10014fbc:	1ad2      	subs	r2, r2, r3
10014fbe:	2a1f      	cmp	r2, #31
10014fc0:	dd16      	ble.n	10014ff0 <__aeabi_ui2d+0x44>
10014fc2:	002c      	movs	r4, r5
10014fc4:	4a13      	ldr	r2, [pc, #76]	; (10015014 <__aeabi_ui2d+0x68>)
10014fc6:	2500      	movs	r5, #0
10014fc8:	1ad2      	subs	r2, r2, r3
10014fca:	4094      	lsls	r4, r2
10014fcc:	055a      	lsls	r2, r3, #21
10014fce:	0324      	lsls	r4, r4, #12
10014fd0:	0b24      	lsrs	r4, r4, #12
10014fd2:	0d52      	lsrs	r2, r2, #21
10014fd4:	2100      	movs	r1, #0
10014fd6:	0324      	lsls	r4, r4, #12
10014fd8:	0d0b      	lsrs	r3, r1, #20
10014fda:	0b24      	lsrs	r4, r4, #12
10014fdc:	051b      	lsls	r3, r3, #20
10014fde:	4323      	orrs	r3, r4
10014fe0:	4c0d      	ldr	r4, [pc, #52]	; (10015018 <__aeabi_ui2d+0x6c>)
10014fe2:	0512      	lsls	r2, r2, #20
10014fe4:	4023      	ands	r3, r4
10014fe6:	4313      	orrs	r3, r2
10014fe8:	005b      	lsls	r3, r3, #1
10014fea:	0028      	movs	r0, r5
10014fec:	0859      	lsrs	r1, r3, #1
10014fee:	bd70      	pop	{r4, r5, r6, pc}
10014ff0:	210b      	movs	r1, #11
10014ff2:	002c      	movs	r4, r5
10014ff4:	1a08      	subs	r0, r1, r0
10014ff6:	40c4      	lsrs	r4, r0
10014ff8:	4095      	lsls	r5, r2
10014ffa:	0324      	lsls	r4, r4, #12
10014ffc:	055a      	lsls	r2, r3, #21
10014ffe:	0b24      	lsrs	r4, r4, #12
10015000:	0d52      	lsrs	r2, r2, #21
10015002:	e7e7      	b.n	10014fd4 <__aeabi_ui2d+0x28>
10015004:	2200      	movs	r2, #0
10015006:	2400      	movs	r4, #0
10015008:	e7e4      	b.n	10014fd4 <__aeabi_ui2d+0x28>
1001500a:	46c0      	nop			; (mov r8, r8)
1001500c:	0000041e 	.word	0x0000041e
10015010:	00000433 	.word	0x00000433
10015014:	00000413 	.word	0x00000413
10015018:	800fffff 	.word	0x800fffff

1001501c <__clzsi2>:
1001501c:	211c      	movs	r1, #28
1001501e:	2301      	movs	r3, #1
10015020:	041b      	lsls	r3, r3, #16
10015022:	4298      	cmp	r0, r3
10015024:	d301      	bcc.n	1001502a <__clzsi2+0xe>
10015026:	0c00      	lsrs	r0, r0, #16
10015028:	3910      	subs	r1, #16
1001502a:	0a1b      	lsrs	r3, r3, #8
1001502c:	4298      	cmp	r0, r3
1001502e:	d301      	bcc.n	10015034 <__clzsi2+0x18>
10015030:	0a00      	lsrs	r0, r0, #8
10015032:	3908      	subs	r1, #8
10015034:	091b      	lsrs	r3, r3, #4
10015036:	4298      	cmp	r0, r3
10015038:	d301      	bcc.n	1001503e <__clzsi2+0x22>
1001503a:	0900      	lsrs	r0, r0, #4
1001503c:	3904      	subs	r1, #4
1001503e:	a202      	add	r2, pc, #8	; (adr r2, 10015048 <__clzsi2+0x2c>)
10015040:	5c10      	ldrb	r0, [r2, r0]
10015042:	1840      	adds	r0, r0, r1
10015044:	4770      	bx	lr
10015046:	46c0      	nop			; (mov r8, r8)
10015048:	02020304 	.word	0x02020304
1001504c:	01010101 	.word	0x01010101
	...

10015058 <__libc_init_array>:
10015058:	4b0e      	ldr	r3, [pc, #56]	; (10015094 <__libc_init_array+0x3c>)
1001505a:	b570      	push	{r4, r5, r6, lr}
1001505c:	2500      	movs	r5, #0
1001505e:	001e      	movs	r6, r3
10015060:	4c0d      	ldr	r4, [pc, #52]	; (10015098 <__libc_init_array+0x40>)
10015062:	1ae4      	subs	r4, r4, r3
10015064:	10a4      	asrs	r4, r4, #2
10015066:	42a5      	cmp	r5, r4
10015068:	d004      	beq.n	10015074 <__libc_init_array+0x1c>
1001506a:	00ab      	lsls	r3, r5, #2
1001506c:	58f3      	ldr	r3, [r6, r3]
1001506e:	4798      	blx	r3
10015070:	3501      	adds	r5, #1
10015072:	e7f8      	b.n	10015066 <__libc_init_array+0xe>
10015074:	f003 f9d2 	bl	1001841c <_init>
10015078:	4b08      	ldr	r3, [pc, #32]	; (1001509c <__libc_init_array+0x44>)
1001507a:	2500      	movs	r5, #0
1001507c:	001e      	movs	r6, r3
1001507e:	4c08      	ldr	r4, [pc, #32]	; (100150a0 <__libc_init_array+0x48>)
10015080:	1ae4      	subs	r4, r4, r3
10015082:	10a4      	asrs	r4, r4, #2
10015084:	42a5      	cmp	r5, r4
10015086:	d004      	beq.n	10015092 <__libc_init_array+0x3a>
10015088:	00ab      	lsls	r3, r5, #2
1001508a:	58f3      	ldr	r3, [r6, r3]
1001508c:	4798      	blx	r3
1001508e:	3501      	adds	r5, #1
10015090:	e7f8      	b.n	10015084 <__libc_init_array+0x2c>
10015092:	bd70      	pop	{r4, r5, r6, pc}
10015094:	10018428 	.word	0x10018428
10015098:	10018428 	.word	0x10018428
1001509c:	10018428 	.word	0x10018428
100150a0:	1001842c 	.word	0x1001842c

100150a4 <malloc>:
100150a4:	b510      	push	{r4, lr}
100150a6:	4b03      	ldr	r3, [pc, #12]	; (100150b4 <malloc+0x10>)
100150a8:	0001      	movs	r1, r0
100150aa:	6818      	ldr	r0, [r3, #0]
100150ac:	f000 f86a 	bl	10015184 <_malloc_r>
100150b0:	bd10      	pop	{r4, pc}
100150b2:	46c0      	nop			; (mov r8, r8)
100150b4:	100184e4 	.word	0x100184e4

100150b8 <memcmp>:
100150b8:	b530      	push	{r4, r5, lr}
100150ba:	2400      	movs	r4, #0
100150bc:	42a2      	cmp	r2, r4
100150be:	d008      	beq.n	100150d2 <memcmp+0x1a>
100150c0:	5d03      	ldrb	r3, [r0, r4]
100150c2:	1c65      	adds	r5, r4, #1
100150c4:	5d0c      	ldrb	r4, [r1, r4]
100150c6:	42a3      	cmp	r3, r4
100150c8:	d001      	beq.n	100150ce <memcmp+0x16>
100150ca:	1b18      	subs	r0, r3, r4
100150cc:	e002      	b.n	100150d4 <memcmp+0x1c>
100150ce:	002c      	movs	r4, r5
100150d0:	e7f4      	b.n	100150bc <memcmp+0x4>
100150d2:	2000      	movs	r0, #0
100150d4:	bd30      	pop	{r4, r5, pc}

100150d6 <memcpy>:
100150d6:	2300      	movs	r3, #0
100150d8:	b510      	push	{r4, lr}
100150da:	429a      	cmp	r2, r3
100150dc:	d003      	beq.n	100150e6 <memcpy+0x10>
100150de:	5ccc      	ldrb	r4, [r1, r3]
100150e0:	54c4      	strb	r4, [r0, r3]
100150e2:	3301      	adds	r3, #1
100150e4:	e7f9      	b.n	100150da <memcpy+0x4>
100150e6:	bd10      	pop	{r4, pc}

100150e8 <memset>:
100150e8:	0003      	movs	r3, r0
100150ea:	1882      	adds	r2, r0, r2
100150ec:	4293      	cmp	r3, r2
100150ee:	d002      	beq.n	100150f6 <memset+0xe>
100150f0:	7019      	strb	r1, [r3, #0]
100150f2:	3301      	adds	r3, #1
100150f4:	e7fa      	b.n	100150ec <memset+0x4>
100150f6:	4770      	bx	lr

100150f8 <_free_r>:
100150f8:	b530      	push	{r4, r5, lr}
100150fa:	2900      	cmp	r1, #0
100150fc:	d03e      	beq.n	1001517c <_free_r+0x84>
100150fe:	3904      	subs	r1, #4
10015100:	680b      	ldr	r3, [r1, #0]
10015102:	2b00      	cmp	r3, #0
10015104:	da00      	bge.n	10015108 <_free_r+0x10>
10015106:	18c9      	adds	r1, r1, r3
10015108:	4a1d      	ldr	r2, [pc, #116]	; (10015180 <_free_r+0x88>)
1001510a:	6813      	ldr	r3, [r2, #0]
1001510c:	0014      	movs	r4, r2
1001510e:	2b00      	cmp	r3, #0
10015110:	d102      	bne.n	10015118 <_free_r+0x20>
10015112:	604b      	str	r3, [r1, #4]
10015114:	6011      	str	r1, [r2, #0]
10015116:	e031      	b.n	1001517c <_free_r+0x84>
10015118:	428b      	cmp	r3, r1
1001511a:	d90d      	bls.n	10015138 <_free_r+0x40>
1001511c:	680a      	ldr	r2, [r1, #0]
1001511e:	1888      	adds	r0, r1, r2
10015120:	4283      	cmp	r3, r0
10015122:	d103      	bne.n	1001512c <_free_r+0x34>
10015124:	6818      	ldr	r0, [r3, #0]
10015126:	685b      	ldr	r3, [r3, #4]
10015128:	1882      	adds	r2, r0, r2
1001512a:	600a      	str	r2, [r1, #0]
1001512c:	604b      	str	r3, [r1, #4]
1001512e:	6021      	str	r1, [r4, #0]
10015130:	e024      	b.n	1001517c <_free_r+0x84>
10015132:	428a      	cmp	r2, r1
10015134:	d803      	bhi.n	1001513e <_free_r+0x46>
10015136:	0013      	movs	r3, r2
10015138:	685a      	ldr	r2, [r3, #4]
1001513a:	2a00      	cmp	r2, #0
1001513c:	d1f9      	bne.n	10015132 <_free_r+0x3a>
1001513e:	681d      	ldr	r5, [r3, #0]
10015140:	195c      	adds	r4, r3, r5
10015142:	428c      	cmp	r4, r1
10015144:	d10b      	bne.n	1001515e <_free_r+0x66>
10015146:	6809      	ldr	r1, [r1, #0]
10015148:	1869      	adds	r1, r5, r1
1001514a:	1858      	adds	r0, r3, r1
1001514c:	6019      	str	r1, [r3, #0]
1001514e:	4282      	cmp	r2, r0
10015150:	d114      	bne.n	1001517c <_free_r+0x84>
10015152:	6810      	ldr	r0, [r2, #0]
10015154:	6852      	ldr	r2, [r2, #4]
10015156:	1841      	adds	r1, r0, r1
10015158:	6019      	str	r1, [r3, #0]
1001515a:	605a      	str	r2, [r3, #4]
1001515c:	e00e      	b.n	1001517c <_free_r+0x84>
1001515e:	428c      	cmp	r4, r1
10015160:	d902      	bls.n	10015168 <_free_r+0x70>
10015162:	230c      	movs	r3, #12
10015164:	6003      	str	r3, [r0, #0]
10015166:	e009      	b.n	1001517c <_free_r+0x84>
10015168:	6808      	ldr	r0, [r1, #0]
1001516a:	180c      	adds	r4, r1, r0
1001516c:	42a2      	cmp	r2, r4
1001516e:	d103      	bne.n	10015178 <_free_r+0x80>
10015170:	6814      	ldr	r4, [r2, #0]
10015172:	6852      	ldr	r2, [r2, #4]
10015174:	1820      	adds	r0, r4, r0
10015176:	6008      	str	r0, [r1, #0]
10015178:	604a      	str	r2, [r1, #4]
1001517a:	6059      	str	r1, [r3, #4]
1001517c:	bd30      	pop	{r4, r5, pc}
1001517e:	46c0      	nop			; (mov r8, r8)
10015180:	10019fb8 	.word	0x10019fb8

10015184 <_malloc_r>:
10015184:	2303      	movs	r3, #3
10015186:	b570      	push	{r4, r5, r6, lr}
10015188:	1ccd      	adds	r5, r1, #3
1001518a:	439d      	bics	r5, r3
1001518c:	3508      	adds	r5, #8
1001518e:	0006      	movs	r6, r0
10015190:	2d0c      	cmp	r5, #12
10015192:	d201      	bcs.n	10015198 <_malloc_r+0x14>
10015194:	250c      	movs	r5, #12
10015196:	e005      	b.n	100151a4 <_malloc_r+0x20>
10015198:	2d00      	cmp	r5, #0
1001519a:	da03      	bge.n	100151a4 <_malloc_r+0x20>
1001519c:	230c      	movs	r3, #12
1001519e:	2000      	movs	r0, #0
100151a0:	6033      	str	r3, [r6, #0]
100151a2:	e040      	b.n	10015226 <_malloc_r+0xa2>
100151a4:	42a9      	cmp	r1, r5
100151a6:	d8f9      	bhi.n	1001519c <_malloc_r+0x18>
100151a8:	4b1f      	ldr	r3, [pc, #124]	; (10015228 <_malloc_r+0xa4>)
100151aa:	681c      	ldr	r4, [r3, #0]
100151ac:	001a      	movs	r2, r3
100151ae:	0021      	movs	r1, r4
100151b0:	2900      	cmp	r1, #0
100151b2:	d013      	beq.n	100151dc <_malloc_r+0x58>
100151b4:	680b      	ldr	r3, [r1, #0]
100151b6:	1b5b      	subs	r3, r3, r5
100151b8:	d40d      	bmi.n	100151d6 <_malloc_r+0x52>
100151ba:	2b0b      	cmp	r3, #11
100151bc:	d902      	bls.n	100151c4 <_malloc_r+0x40>
100151be:	600b      	str	r3, [r1, #0]
100151c0:	18cc      	adds	r4, r1, r3
100151c2:	e01e      	b.n	10015202 <_malloc_r+0x7e>
100151c4:	428c      	cmp	r4, r1
100151c6:	d102      	bne.n	100151ce <_malloc_r+0x4a>
100151c8:	6863      	ldr	r3, [r4, #4]
100151ca:	6013      	str	r3, [r2, #0]
100151cc:	e01a      	b.n	10015204 <_malloc_r+0x80>
100151ce:	684b      	ldr	r3, [r1, #4]
100151d0:	6063      	str	r3, [r4, #4]
100151d2:	000c      	movs	r4, r1
100151d4:	e016      	b.n	10015204 <_malloc_r+0x80>
100151d6:	000c      	movs	r4, r1
100151d8:	6849      	ldr	r1, [r1, #4]
100151da:	e7e9      	b.n	100151b0 <_malloc_r+0x2c>
100151dc:	4c13      	ldr	r4, [pc, #76]	; (1001522c <_malloc_r+0xa8>)
100151de:	6823      	ldr	r3, [r4, #0]
100151e0:	2b00      	cmp	r3, #0
100151e2:	d103      	bne.n	100151ec <_malloc_r+0x68>
100151e4:	0030      	movs	r0, r6
100151e6:	f000 f8f9 	bl	100153dc <_sbrk_r>
100151ea:	6020      	str	r0, [r4, #0]
100151ec:	0029      	movs	r1, r5
100151ee:	0030      	movs	r0, r6
100151f0:	f000 f8f4 	bl	100153dc <_sbrk_r>
100151f4:	1c43      	adds	r3, r0, #1
100151f6:	d0d1      	beq.n	1001519c <_malloc_r+0x18>
100151f8:	2303      	movs	r3, #3
100151fa:	1cc4      	adds	r4, r0, #3
100151fc:	439c      	bics	r4, r3
100151fe:	42a0      	cmp	r0, r4
10015200:	d10a      	bne.n	10015218 <_malloc_r+0x94>
10015202:	6025      	str	r5, [r4, #0]
10015204:	0020      	movs	r0, r4
10015206:	2207      	movs	r2, #7
10015208:	300b      	adds	r0, #11
1001520a:	1d23      	adds	r3, r4, #4
1001520c:	4390      	bics	r0, r2
1001520e:	1ac3      	subs	r3, r0, r3
10015210:	d009      	beq.n	10015226 <_malloc_r+0xa2>
10015212:	425a      	negs	r2, r3
10015214:	50e2      	str	r2, [r4, r3]
10015216:	e006      	b.n	10015226 <_malloc_r+0xa2>
10015218:	1a21      	subs	r1, r4, r0
1001521a:	0030      	movs	r0, r6
1001521c:	f000 f8de 	bl	100153dc <_sbrk_r>
10015220:	1c43      	adds	r3, r0, #1
10015222:	d1ee      	bne.n	10015202 <_malloc_r+0x7e>
10015224:	e7ba      	b.n	1001519c <_malloc_r+0x18>
10015226:	bd70      	pop	{r4, r5, r6, pc}
10015228:	10019fb8 	.word	0x10019fb8
1001522c:	10019fb4 	.word	0x10019fb4

10015230 <iprintf>:
10015230:	b40f      	push	{r0, r1, r2, r3}
10015232:	4b0b      	ldr	r3, [pc, #44]	; (10015260 <iprintf+0x30>)
10015234:	b513      	push	{r0, r1, r4, lr}
10015236:	681c      	ldr	r4, [r3, #0]
10015238:	2c00      	cmp	r4, #0
1001523a:	d005      	beq.n	10015248 <iprintf+0x18>
1001523c:	69a3      	ldr	r3, [r4, #24]
1001523e:	2b00      	cmp	r3, #0
10015240:	d102      	bne.n	10015248 <iprintf+0x18>
10015242:	0020      	movs	r0, r4
10015244:	f000 fb58 	bl	100158f8 <__sinit>
10015248:	ab05      	add	r3, sp, #20
1001524a:	9a04      	ldr	r2, [sp, #16]
1001524c:	68a1      	ldr	r1, [r4, #8]
1001524e:	0020      	movs	r0, r4
10015250:	9301      	str	r3, [sp, #4]
10015252:	f000 fc71 	bl	10015b38 <_vfiprintf_r>
10015256:	bc16      	pop	{r1, r2, r4}
10015258:	bc08      	pop	{r3}
1001525a:	b004      	add	sp, #16
1001525c:	4718      	bx	r3
1001525e:	46c0      	nop			; (mov r8, r8)
10015260:	100184e4 	.word	0x100184e4

10015264 <putchar>:
10015264:	4b08      	ldr	r3, [pc, #32]	; (10015288 <putchar+0x24>)
10015266:	b570      	push	{r4, r5, r6, lr}
10015268:	681c      	ldr	r4, [r3, #0]
1001526a:	0005      	movs	r5, r0
1001526c:	2c00      	cmp	r4, #0
1001526e:	d005      	beq.n	1001527c <putchar+0x18>
10015270:	69a3      	ldr	r3, [r4, #24]
10015272:	2b00      	cmp	r3, #0
10015274:	d102      	bne.n	1001527c <putchar+0x18>
10015276:	0020      	movs	r0, r4
10015278:	f000 fb3e 	bl	100158f8 <__sinit>
1001527c:	0029      	movs	r1, r5
1001527e:	68a2      	ldr	r2, [r4, #8]
10015280:	0020      	movs	r0, r4
10015282:	f000 ff05 	bl	10016090 <_putc_r>
10015286:	bd70      	pop	{r4, r5, r6, pc}
10015288:	100184e4 	.word	0x100184e4

1001528c <_puts_r>:
1001528c:	b570      	push	{r4, r5, r6, lr}
1001528e:	0005      	movs	r5, r0
10015290:	000e      	movs	r6, r1
10015292:	2800      	cmp	r0, #0
10015294:	d004      	beq.n	100152a0 <_puts_r+0x14>
10015296:	6983      	ldr	r3, [r0, #24]
10015298:	2b00      	cmp	r3, #0
1001529a:	d101      	bne.n	100152a0 <_puts_r+0x14>
1001529c:	f000 fb2c 	bl	100158f8 <__sinit>
100152a0:	69ab      	ldr	r3, [r5, #24]
100152a2:	68ac      	ldr	r4, [r5, #8]
100152a4:	2b00      	cmp	r3, #0
100152a6:	d102      	bne.n	100152ae <_puts_r+0x22>
100152a8:	0028      	movs	r0, r5
100152aa:	f000 fb25 	bl	100158f8 <__sinit>
100152ae:	4b25      	ldr	r3, [pc, #148]	; (10015344 <_puts_r+0xb8>)
100152b0:	429c      	cmp	r4, r3
100152b2:	d101      	bne.n	100152b8 <_puts_r+0x2c>
100152b4:	686c      	ldr	r4, [r5, #4]
100152b6:	e008      	b.n	100152ca <_puts_r+0x3e>
100152b8:	4b23      	ldr	r3, [pc, #140]	; (10015348 <_puts_r+0xbc>)
100152ba:	429c      	cmp	r4, r3
100152bc:	d101      	bne.n	100152c2 <_puts_r+0x36>
100152be:	68ac      	ldr	r4, [r5, #8]
100152c0:	e003      	b.n	100152ca <_puts_r+0x3e>
100152c2:	4b22      	ldr	r3, [pc, #136]	; (1001534c <_puts_r+0xc0>)
100152c4:	429c      	cmp	r4, r3
100152c6:	d100      	bne.n	100152ca <_puts_r+0x3e>
100152c8:	68ec      	ldr	r4, [r5, #12]
100152ca:	89a3      	ldrh	r3, [r4, #12]
100152cc:	071b      	lsls	r3, r3, #28
100152ce:	d502      	bpl.n	100152d6 <_puts_r+0x4a>
100152d0:	6923      	ldr	r3, [r4, #16]
100152d2:	2b00      	cmp	r3, #0
100152d4:	d111      	bne.n	100152fa <_puts_r+0x6e>
100152d6:	0021      	movs	r1, r4
100152d8:	0028      	movs	r0, r5
100152da:	f000 f9a3 	bl	10015624 <__swsetup_r>
100152de:	2800      	cmp	r0, #0
100152e0:	d00b      	beq.n	100152fa <_puts_r+0x6e>
100152e2:	2001      	movs	r0, #1
100152e4:	4240      	negs	r0, r0
100152e6:	e02b      	b.n	10015340 <_puts_r+0xb4>
100152e8:	3b01      	subs	r3, #1
100152ea:	3601      	adds	r6, #1
100152ec:	60a3      	str	r3, [r4, #8]
100152ee:	2b00      	cmp	r3, #0
100152f0:	db08      	blt.n	10015304 <_puts_r+0x78>
100152f2:	6823      	ldr	r3, [r4, #0]
100152f4:	1c5a      	adds	r2, r3, #1
100152f6:	6022      	str	r2, [r4, #0]
100152f8:	7019      	strb	r1, [r3, #0]
100152fa:	7831      	ldrb	r1, [r6, #0]
100152fc:	68a3      	ldr	r3, [r4, #8]
100152fe:	2900      	cmp	r1, #0
10015300:	d1f2      	bne.n	100152e8 <_puts_r+0x5c>
10015302:	e00b      	b.n	1001531c <_puts_r+0x90>
10015304:	69a2      	ldr	r2, [r4, #24]
10015306:	4293      	cmp	r3, r2
10015308:	db01      	blt.n	1001530e <_puts_r+0x82>
1001530a:	290a      	cmp	r1, #10
1001530c:	d1f1      	bne.n	100152f2 <_puts_r+0x66>
1001530e:	0022      	movs	r2, r4
10015310:	0028      	movs	r0, r5
10015312:	f000 f92f 	bl	10015574 <__swbuf_r>
10015316:	1c43      	adds	r3, r0, #1
10015318:	d1ef      	bne.n	100152fa <_puts_r+0x6e>
1001531a:	e7e2      	b.n	100152e2 <_puts_r+0x56>
1001531c:	3b01      	subs	r3, #1
1001531e:	60a3      	str	r3, [r4, #8]
10015320:	2b00      	cmp	r3, #0
10015322:	da08      	bge.n	10015336 <_puts_r+0xaa>
10015324:	0022      	movs	r2, r4
10015326:	310a      	adds	r1, #10
10015328:	0028      	movs	r0, r5
1001532a:	f000 f923 	bl	10015574 <__swbuf_r>
1001532e:	1c43      	adds	r3, r0, #1
10015330:	d0d7      	beq.n	100152e2 <_puts_r+0x56>
10015332:	200a      	movs	r0, #10
10015334:	e004      	b.n	10015340 <_puts_r+0xb4>
10015336:	200a      	movs	r0, #10
10015338:	6823      	ldr	r3, [r4, #0]
1001533a:	1c5a      	adds	r2, r3, #1
1001533c:	6022      	str	r2, [r4, #0]
1001533e:	7018      	strb	r0, [r3, #0]
10015340:	bd70      	pop	{r4, r5, r6, pc}
10015342:	46c0      	nop			; (mov r8, r8)
10015344:	10018388 	.word	0x10018388
10015348:	100183a8 	.word	0x100183a8
1001534c:	100183c8 	.word	0x100183c8

10015350 <puts>:
10015350:	b510      	push	{r4, lr}
10015352:	4b03      	ldr	r3, [pc, #12]	; (10015360 <puts+0x10>)
10015354:	0001      	movs	r1, r0
10015356:	6818      	ldr	r0, [r3, #0]
10015358:	f7ff ff98 	bl	1001528c <_puts_r>
1001535c:	bd10      	pop	{r4, pc}
1001535e:	46c0      	nop			; (mov r8, r8)
10015360:	100184e4 	.word	0x100184e4

10015364 <rand>:
10015364:	4b15      	ldr	r3, [pc, #84]	; (100153bc <rand+0x58>)
10015366:	b510      	push	{r4, lr}
10015368:	681c      	ldr	r4, [r3, #0]
1001536a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1001536c:	2b00      	cmp	r3, #0
1001536e:	d115      	bne.n	1001539c <rand+0x38>
10015370:	2018      	movs	r0, #24
10015372:	f7ff fe97 	bl	100150a4 <malloc>
10015376:	4b12      	ldr	r3, [pc, #72]	; (100153c0 <rand+0x5c>)
10015378:	63a0      	str	r0, [r4, #56]	; 0x38
1001537a:	8003      	strh	r3, [r0, #0]
1001537c:	4b11      	ldr	r3, [pc, #68]	; (100153c4 <rand+0x60>)
1001537e:	2201      	movs	r2, #1
10015380:	8043      	strh	r3, [r0, #2]
10015382:	4b11      	ldr	r3, [pc, #68]	; (100153c8 <rand+0x64>)
10015384:	8083      	strh	r3, [r0, #4]
10015386:	4b11      	ldr	r3, [pc, #68]	; (100153cc <rand+0x68>)
10015388:	80c3      	strh	r3, [r0, #6]
1001538a:	4b11      	ldr	r3, [pc, #68]	; (100153d0 <rand+0x6c>)
1001538c:	8103      	strh	r3, [r0, #8]
1001538e:	2305      	movs	r3, #5
10015390:	8143      	strh	r3, [r0, #10]
10015392:	3306      	adds	r3, #6
10015394:	8183      	strh	r3, [r0, #12]
10015396:	2300      	movs	r3, #0
10015398:	6102      	str	r2, [r0, #16]
1001539a:	6143      	str	r3, [r0, #20]
1001539c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001539e:	4a0d      	ldr	r2, [pc, #52]	; (100153d4 <rand+0x70>)
100153a0:	6920      	ldr	r0, [r4, #16]
100153a2:	6961      	ldr	r1, [r4, #20]
100153a4:	4b0c      	ldr	r3, [pc, #48]	; (100153d8 <rand+0x74>)
100153a6:	f7fe f80b 	bl	100133c0 <__aeabi_lmul>
100153aa:	2201      	movs	r2, #1
100153ac:	2300      	movs	r3, #0
100153ae:	1880      	adds	r0, r0, r2
100153b0:	4159      	adcs	r1, r3
100153b2:	6120      	str	r0, [r4, #16]
100153b4:	6161      	str	r1, [r4, #20]
100153b6:	0048      	lsls	r0, r1, #1
100153b8:	0840      	lsrs	r0, r0, #1
100153ba:	bd10      	pop	{r4, pc}
100153bc:	100184e4 	.word	0x100184e4
100153c0:	0000330e 	.word	0x0000330e
100153c4:	ffffabcd 	.word	0xffffabcd
100153c8:	00001234 	.word	0x00001234
100153cc:	ffffe66d 	.word	0xffffe66d
100153d0:	ffffdeec 	.word	0xffffdeec
100153d4:	4c957f2d 	.word	0x4c957f2d
100153d8:	5851f42d 	.word	0x5851f42d

100153dc <_sbrk_r>:
100153dc:	2300      	movs	r3, #0
100153de:	b570      	push	{r4, r5, r6, lr}
100153e0:	4c06      	ldr	r4, [pc, #24]	; (100153fc <_sbrk_r+0x20>)
100153e2:	0005      	movs	r5, r0
100153e4:	0008      	movs	r0, r1
100153e6:	6023      	str	r3, [r4, #0]
100153e8:	f7f8 f986 	bl	1000d6f8 <_sbrk>
100153ec:	1c43      	adds	r3, r0, #1
100153ee:	d103      	bne.n	100153f8 <_sbrk_r+0x1c>
100153f0:	6823      	ldr	r3, [r4, #0]
100153f2:	2b00      	cmp	r3, #0
100153f4:	d000      	beq.n	100153f8 <_sbrk_r+0x1c>
100153f6:	602b      	str	r3, [r5, #0]
100153f8:	bd70      	pop	{r4, r5, r6, pc}
100153fa:	46c0      	nop			; (mov r8, r8)
100153fc:	1001b384 	.word	0x1001b384

10015400 <setbuf>:
10015400:	424a      	negs	r2, r1
10015402:	414a      	adcs	r2, r1
10015404:	2380      	movs	r3, #128	; 0x80
10015406:	b510      	push	{r4, lr}
10015408:	0052      	lsls	r2, r2, #1
1001540a:	00db      	lsls	r3, r3, #3
1001540c:	f000 f802 	bl	10015414 <setvbuf>
10015410:	bd10      	pop	{r4, pc}
	...

10015414 <setvbuf>:
10015414:	b5f0      	push	{r4, r5, r6, r7, lr}
10015416:	001d      	movs	r5, r3
10015418:	4b51      	ldr	r3, [pc, #324]	; (10015560 <setvbuf+0x14c>)
1001541a:	b085      	sub	sp, #20
1001541c:	681e      	ldr	r6, [r3, #0]
1001541e:	0004      	movs	r4, r0
10015420:	000f      	movs	r7, r1
10015422:	9200      	str	r2, [sp, #0]
10015424:	2e00      	cmp	r6, #0
10015426:	d005      	beq.n	10015434 <setvbuf+0x20>
10015428:	69b3      	ldr	r3, [r6, #24]
1001542a:	2b00      	cmp	r3, #0
1001542c:	d102      	bne.n	10015434 <setvbuf+0x20>
1001542e:	0030      	movs	r0, r6
10015430:	f000 fa62 	bl	100158f8 <__sinit>
10015434:	4b4b      	ldr	r3, [pc, #300]	; (10015564 <setvbuf+0x150>)
10015436:	429c      	cmp	r4, r3
10015438:	d101      	bne.n	1001543e <setvbuf+0x2a>
1001543a:	6874      	ldr	r4, [r6, #4]
1001543c:	e008      	b.n	10015450 <setvbuf+0x3c>
1001543e:	4b4a      	ldr	r3, [pc, #296]	; (10015568 <setvbuf+0x154>)
10015440:	429c      	cmp	r4, r3
10015442:	d101      	bne.n	10015448 <setvbuf+0x34>
10015444:	68b4      	ldr	r4, [r6, #8]
10015446:	e003      	b.n	10015450 <setvbuf+0x3c>
10015448:	4b48      	ldr	r3, [pc, #288]	; (1001556c <setvbuf+0x158>)
1001544a:	429c      	cmp	r4, r3
1001544c:	d100      	bne.n	10015450 <setvbuf+0x3c>
1001544e:	68f4      	ldr	r4, [r6, #12]
10015450:	9b00      	ldr	r3, [sp, #0]
10015452:	2b02      	cmp	r3, #2
10015454:	d005      	beq.n	10015462 <setvbuf+0x4e>
10015456:	2b01      	cmp	r3, #1
10015458:	d900      	bls.n	1001545c <setvbuf+0x48>
1001545a:	e07c      	b.n	10015556 <setvbuf+0x142>
1001545c:	2d00      	cmp	r5, #0
1001545e:	da00      	bge.n	10015462 <setvbuf+0x4e>
10015460:	e079      	b.n	10015556 <setvbuf+0x142>
10015462:	0021      	movs	r1, r4
10015464:	0030      	movs	r0, r6
10015466:	f000 f9d9 	bl	1001581c <_fflush_r>
1001546a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001546c:	2900      	cmp	r1, #0
1001546e:	d008      	beq.n	10015482 <setvbuf+0x6e>
10015470:	0023      	movs	r3, r4
10015472:	3344      	adds	r3, #68	; 0x44
10015474:	4299      	cmp	r1, r3
10015476:	d002      	beq.n	1001547e <setvbuf+0x6a>
10015478:	0030      	movs	r0, r6
1001547a:	f7ff fe3d 	bl	100150f8 <_free_r>
1001547e:	2300      	movs	r3, #0
10015480:	6363      	str	r3, [r4, #52]	; 0x34
10015482:	2300      	movs	r3, #0
10015484:	61a3      	str	r3, [r4, #24]
10015486:	6063      	str	r3, [r4, #4]
10015488:	89a3      	ldrh	r3, [r4, #12]
1001548a:	061b      	lsls	r3, r3, #24
1001548c:	d503      	bpl.n	10015496 <setvbuf+0x82>
1001548e:	6921      	ldr	r1, [r4, #16]
10015490:	0030      	movs	r0, r6
10015492:	f7ff fe31 	bl	100150f8 <_free_r>
10015496:	89a2      	ldrh	r2, [r4, #12]
10015498:	4b35      	ldr	r3, [pc, #212]	; (10015570 <setvbuf+0x15c>)
1001549a:	4013      	ands	r3, r2
1001549c:	81a3      	strh	r3, [r4, #12]
1001549e:	9b00      	ldr	r3, [sp, #0]
100154a0:	2b02      	cmp	r3, #2
100154a2:	d021      	beq.n	100154e8 <setvbuf+0xd4>
100154a4:	ab03      	add	r3, sp, #12
100154a6:	aa02      	add	r2, sp, #8
100154a8:	0021      	movs	r1, r4
100154aa:	0030      	movs	r0, r6
100154ac:	f000 fab8 	bl	10015a20 <__swhatbuf_r>
100154b0:	89a3      	ldrh	r3, [r4, #12]
100154b2:	4318      	orrs	r0, r3
100154b4:	81a0      	strh	r0, [r4, #12]
100154b6:	2d00      	cmp	r5, #0
100154b8:	d101      	bne.n	100154be <setvbuf+0xaa>
100154ba:	9d02      	ldr	r5, [sp, #8]
100154bc:	e001      	b.n	100154c2 <setvbuf+0xae>
100154be:	2f00      	cmp	r7, #0
100154c0:	d125      	bne.n	1001550e <setvbuf+0xfa>
100154c2:	0028      	movs	r0, r5
100154c4:	f7ff fdee 	bl	100150a4 <malloc>
100154c8:	9501      	str	r5, [sp, #4]
100154ca:	1e07      	subs	r7, r0, #0
100154cc:	d11a      	bne.n	10015504 <setvbuf+0xf0>
100154ce:	9b02      	ldr	r3, [sp, #8]
100154d0:	9301      	str	r3, [sp, #4]
100154d2:	42ab      	cmp	r3, r5
100154d4:	d102      	bne.n	100154dc <setvbuf+0xc8>
100154d6:	2001      	movs	r0, #1
100154d8:	4240      	negs	r0, r0
100154da:	e006      	b.n	100154ea <setvbuf+0xd6>
100154dc:	9801      	ldr	r0, [sp, #4]
100154de:	f7ff fde1 	bl	100150a4 <malloc>
100154e2:	1e07      	subs	r7, r0, #0
100154e4:	d10e      	bne.n	10015504 <setvbuf+0xf0>
100154e6:	e7f6      	b.n	100154d6 <setvbuf+0xc2>
100154e8:	2000      	movs	r0, #0
100154ea:	2202      	movs	r2, #2
100154ec:	89a3      	ldrh	r3, [r4, #12]
100154ee:	4313      	orrs	r3, r2
100154f0:	81a3      	strh	r3, [r4, #12]
100154f2:	2300      	movs	r3, #0
100154f4:	60a3      	str	r3, [r4, #8]
100154f6:	0023      	movs	r3, r4
100154f8:	3347      	adds	r3, #71	; 0x47
100154fa:	6023      	str	r3, [r4, #0]
100154fc:	6123      	str	r3, [r4, #16]
100154fe:	2301      	movs	r3, #1
10015500:	6163      	str	r3, [r4, #20]
10015502:	e02a      	b.n	1001555a <setvbuf+0x146>
10015504:	2280      	movs	r2, #128	; 0x80
10015506:	89a3      	ldrh	r3, [r4, #12]
10015508:	9d01      	ldr	r5, [sp, #4]
1001550a:	4313      	orrs	r3, r2
1001550c:	81a3      	strh	r3, [r4, #12]
1001550e:	69b3      	ldr	r3, [r6, #24]
10015510:	2b00      	cmp	r3, #0
10015512:	d102      	bne.n	1001551a <setvbuf+0x106>
10015514:	0030      	movs	r0, r6
10015516:	f000 f9ef 	bl	100158f8 <__sinit>
1001551a:	9b00      	ldr	r3, [sp, #0]
1001551c:	2b01      	cmp	r3, #1
1001551e:	d103      	bne.n	10015528 <setvbuf+0x114>
10015520:	89a3      	ldrh	r3, [r4, #12]
10015522:	9a00      	ldr	r2, [sp, #0]
10015524:	431a      	orrs	r2, r3
10015526:	81a2      	strh	r2, [r4, #12]
10015528:	2308      	movs	r3, #8
1001552a:	89a2      	ldrh	r2, [r4, #12]
1001552c:	6027      	str	r7, [r4, #0]
1001552e:	4013      	ands	r3, r2
10015530:	6127      	str	r7, [r4, #16]
10015532:	6165      	str	r5, [r4, #20]
10015534:	1e18      	subs	r0, r3, #0
10015536:	d00c      	beq.n	10015552 <setvbuf+0x13e>
10015538:	2301      	movs	r3, #1
1001553a:	401a      	ands	r2, r3
1001553c:	2300      	movs	r3, #0
1001553e:	1e10      	subs	r0, r2, #0
10015540:	4298      	cmp	r0, r3
10015542:	d004      	beq.n	1001554e <setvbuf+0x13a>
10015544:	426d      	negs	r5, r5
10015546:	60a3      	str	r3, [r4, #8]
10015548:	61a5      	str	r5, [r4, #24]
1001554a:	0018      	movs	r0, r3
1001554c:	e005      	b.n	1001555a <setvbuf+0x146>
1001554e:	60a5      	str	r5, [r4, #8]
10015550:	e003      	b.n	1001555a <setvbuf+0x146>
10015552:	60a3      	str	r3, [r4, #8]
10015554:	e001      	b.n	1001555a <setvbuf+0x146>
10015556:	2001      	movs	r0, #1
10015558:	4240      	negs	r0, r0
1001555a:	b005      	add	sp, #20
1001555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001555e:	46c0      	nop			; (mov r8, r8)
10015560:	100184e4 	.word	0x100184e4
10015564:	10018388 	.word	0x10018388
10015568:	100183a8 	.word	0x100183a8
1001556c:	100183c8 	.word	0x100183c8
10015570:	fffff35c 	.word	0xfffff35c

10015574 <__swbuf_r>:
10015574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015576:	0005      	movs	r5, r0
10015578:	000f      	movs	r7, r1
1001557a:	0014      	movs	r4, r2
1001557c:	2800      	cmp	r0, #0
1001557e:	d004      	beq.n	1001558a <__swbuf_r+0x16>
10015580:	6983      	ldr	r3, [r0, #24]
10015582:	2b00      	cmp	r3, #0
10015584:	d101      	bne.n	1001558a <__swbuf_r+0x16>
10015586:	f000 f9b7 	bl	100158f8 <__sinit>
1001558a:	4b23      	ldr	r3, [pc, #140]	; (10015618 <__swbuf_r+0xa4>)
1001558c:	429c      	cmp	r4, r3
1001558e:	d101      	bne.n	10015594 <__swbuf_r+0x20>
10015590:	686c      	ldr	r4, [r5, #4]
10015592:	e008      	b.n	100155a6 <__swbuf_r+0x32>
10015594:	4b21      	ldr	r3, [pc, #132]	; (1001561c <__swbuf_r+0xa8>)
10015596:	429c      	cmp	r4, r3
10015598:	d101      	bne.n	1001559e <__swbuf_r+0x2a>
1001559a:	68ac      	ldr	r4, [r5, #8]
1001559c:	e003      	b.n	100155a6 <__swbuf_r+0x32>
1001559e:	4b20      	ldr	r3, [pc, #128]	; (10015620 <__swbuf_r+0xac>)
100155a0:	429c      	cmp	r4, r3
100155a2:	d100      	bne.n	100155a6 <__swbuf_r+0x32>
100155a4:	68ec      	ldr	r4, [r5, #12]
100155a6:	69a3      	ldr	r3, [r4, #24]
100155a8:	60a3      	str	r3, [r4, #8]
100155aa:	89a3      	ldrh	r3, [r4, #12]
100155ac:	071b      	lsls	r3, r3, #28
100155ae:	d50a      	bpl.n	100155c6 <__swbuf_r+0x52>
100155b0:	6923      	ldr	r3, [r4, #16]
100155b2:	2b00      	cmp	r3, #0
100155b4:	d007      	beq.n	100155c6 <__swbuf_r+0x52>
100155b6:	6823      	ldr	r3, [r4, #0]
100155b8:	6922      	ldr	r2, [r4, #16]
100155ba:	b2fe      	uxtb	r6, r7
100155bc:	1a98      	subs	r0, r3, r2
100155be:	6963      	ldr	r3, [r4, #20]
100155c0:	4298      	cmp	r0, r3
100155c2:	db0f      	blt.n	100155e4 <__swbuf_r+0x70>
100155c4:	e008      	b.n	100155d8 <__swbuf_r+0x64>
100155c6:	0021      	movs	r1, r4
100155c8:	0028      	movs	r0, r5
100155ca:	f000 f82b 	bl	10015624 <__swsetup_r>
100155ce:	2800      	cmp	r0, #0
100155d0:	d0f1      	beq.n	100155b6 <__swbuf_r+0x42>
100155d2:	2001      	movs	r0, #1
100155d4:	4240      	negs	r0, r0
100155d6:	e01d      	b.n	10015614 <__swbuf_r+0xa0>
100155d8:	0021      	movs	r1, r4
100155da:	0028      	movs	r0, r5
100155dc:	f000 f91e 	bl	1001581c <_fflush_r>
100155e0:	2800      	cmp	r0, #0
100155e2:	d1f6      	bne.n	100155d2 <__swbuf_r+0x5e>
100155e4:	68a3      	ldr	r3, [r4, #8]
100155e6:	3001      	adds	r0, #1
100155e8:	3b01      	subs	r3, #1
100155ea:	60a3      	str	r3, [r4, #8]
100155ec:	6823      	ldr	r3, [r4, #0]
100155ee:	1c5a      	adds	r2, r3, #1
100155f0:	6022      	str	r2, [r4, #0]
100155f2:	701f      	strb	r7, [r3, #0]
100155f4:	6963      	ldr	r3, [r4, #20]
100155f6:	4298      	cmp	r0, r3
100155f8:	d005      	beq.n	10015606 <__swbuf_r+0x92>
100155fa:	89a3      	ldrh	r3, [r4, #12]
100155fc:	0030      	movs	r0, r6
100155fe:	07db      	lsls	r3, r3, #31
10015600:	d508      	bpl.n	10015614 <__swbuf_r+0xa0>
10015602:	2e0a      	cmp	r6, #10
10015604:	d106      	bne.n	10015614 <__swbuf_r+0xa0>
10015606:	0021      	movs	r1, r4
10015608:	0028      	movs	r0, r5
1001560a:	f000 f907 	bl	1001581c <_fflush_r>
1001560e:	2800      	cmp	r0, #0
10015610:	d1df      	bne.n	100155d2 <__swbuf_r+0x5e>
10015612:	0030      	movs	r0, r6
10015614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015616:	46c0      	nop			; (mov r8, r8)
10015618:	10018388 	.word	0x10018388
1001561c:	100183a8 	.word	0x100183a8
10015620:	100183c8 	.word	0x100183c8

10015624 <__swsetup_r>:
10015624:	4b36      	ldr	r3, [pc, #216]	; (10015700 <__swsetup_r+0xdc>)
10015626:	b570      	push	{r4, r5, r6, lr}
10015628:	681d      	ldr	r5, [r3, #0]
1001562a:	0006      	movs	r6, r0
1001562c:	000c      	movs	r4, r1
1001562e:	2d00      	cmp	r5, #0
10015630:	d005      	beq.n	1001563e <__swsetup_r+0x1a>
10015632:	69ab      	ldr	r3, [r5, #24]
10015634:	2b00      	cmp	r3, #0
10015636:	d102      	bne.n	1001563e <__swsetup_r+0x1a>
10015638:	0028      	movs	r0, r5
1001563a:	f000 f95d 	bl	100158f8 <__sinit>
1001563e:	4b31      	ldr	r3, [pc, #196]	; (10015704 <__swsetup_r+0xe0>)
10015640:	429c      	cmp	r4, r3
10015642:	d101      	bne.n	10015648 <__swsetup_r+0x24>
10015644:	686c      	ldr	r4, [r5, #4]
10015646:	e008      	b.n	1001565a <__swsetup_r+0x36>
10015648:	4b2f      	ldr	r3, [pc, #188]	; (10015708 <__swsetup_r+0xe4>)
1001564a:	429c      	cmp	r4, r3
1001564c:	d101      	bne.n	10015652 <__swsetup_r+0x2e>
1001564e:	68ac      	ldr	r4, [r5, #8]
10015650:	e003      	b.n	1001565a <__swsetup_r+0x36>
10015652:	4b2e      	ldr	r3, [pc, #184]	; (1001570c <__swsetup_r+0xe8>)
10015654:	429c      	cmp	r4, r3
10015656:	d100      	bne.n	1001565a <__swsetup_r+0x36>
10015658:	68ec      	ldr	r4, [r5, #12]
1001565a:	220c      	movs	r2, #12
1001565c:	5ea3      	ldrsh	r3, [r4, r2]
1001565e:	b29a      	uxth	r2, r3
10015660:	0711      	lsls	r1, r2, #28
10015662:	d423      	bmi.n	100156ac <__swsetup_r+0x88>
10015664:	06d1      	lsls	r1, r2, #27
10015666:	d407      	bmi.n	10015678 <__swsetup_r+0x54>
10015668:	2209      	movs	r2, #9
1001566a:	2001      	movs	r0, #1
1001566c:	6032      	str	r2, [r6, #0]
1001566e:	3237      	adds	r2, #55	; 0x37
10015670:	4313      	orrs	r3, r2
10015672:	81a3      	strh	r3, [r4, #12]
10015674:	4240      	negs	r0, r0
10015676:	e042      	b.n	100156fe <__swsetup_r+0xda>
10015678:	0753      	lsls	r3, r2, #29
1001567a:	d513      	bpl.n	100156a4 <__swsetup_r+0x80>
1001567c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001567e:	2900      	cmp	r1, #0
10015680:	d008      	beq.n	10015694 <__swsetup_r+0x70>
10015682:	0023      	movs	r3, r4
10015684:	3344      	adds	r3, #68	; 0x44
10015686:	4299      	cmp	r1, r3
10015688:	d002      	beq.n	10015690 <__swsetup_r+0x6c>
1001568a:	0030      	movs	r0, r6
1001568c:	f7ff fd34 	bl	100150f8 <_free_r>
10015690:	2300      	movs	r3, #0
10015692:	6363      	str	r3, [r4, #52]	; 0x34
10015694:	2224      	movs	r2, #36	; 0x24
10015696:	89a3      	ldrh	r3, [r4, #12]
10015698:	4393      	bics	r3, r2
1001569a:	81a3      	strh	r3, [r4, #12]
1001569c:	2300      	movs	r3, #0
1001569e:	6063      	str	r3, [r4, #4]
100156a0:	6923      	ldr	r3, [r4, #16]
100156a2:	6023      	str	r3, [r4, #0]
100156a4:	2208      	movs	r2, #8
100156a6:	89a3      	ldrh	r3, [r4, #12]
100156a8:	4313      	orrs	r3, r2
100156aa:	81a3      	strh	r3, [r4, #12]
100156ac:	6923      	ldr	r3, [r4, #16]
100156ae:	2b00      	cmp	r3, #0
100156b0:	d10b      	bne.n	100156ca <__swsetup_r+0xa6>
100156b2:	23a0      	movs	r3, #160	; 0xa0
100156b4:	89a2      	ldrh	r2, [r4, #12]
100156b6:	009b      	lsls	r3, r3, #2
100156b8:	4013      	ands	r3, r2
100156ba:	2280      	movs	r2, #128	; 0x80
100156bc:	0092      	lsls	r2, r2, #2
100156be:	4293      	cmp	r3, r2
100156c0:	d003      	beq.n	100156ca <__swsetup_r+0xa6>
100156c2:	0021      	movs	r1, r4
100156c4:	0030      	movs	r0, r6
100156c6:	f000 f9d1 	bl	10015a6c <__smakebuf_r>
100156ca:	2301      	movs	r3, #1
100156cc:	89a2      	ldrh	r2, [r4, #12]
100156ce:	4013      	ands	r3, r2
100156d0:	d005      	beq.n	100156de <__swsetup_r+0xba>
100156d2:	2300      	movs	r3, #0
100156d4:	60a3      	str	r3, [r4, #8]
100156d6:	6963      	ldr	r3, [r4, #20]
100156d8:	425b      	negs	r3, r3
100156da:	61a3      	str	r3, [r4, #24]
100156dc:	e003      	b.n	100156e6 <__swsetup_r+0xc2>
100156de:	0792      	lsls	r2, r2, #30
100156e0:	d400      	bmi.n	100156e4 <__swsetup_r+0xc0>
100156e2:	6963      	ldr	r3, [r4, #20]
100156e4:	60a3      	str	r3, [r4, #8]
100156e6:	2000      	movs	r0, #0
100156e8:	6923      	ldr	r3, [r4, #16]
100156ea:	4283      	cmp	r3, r0
100156ec:	d107      	bne.n	100156fe <__swsetup_r+0xda>
100156ee:	220c      	movs	r2, #12
100156f0:	5ea3      	ldrsh	r3, [r4, r2]
100156f2:	061a      	lsls	r2, r3, #24
100156f4:	d503      	bpl.n	100156fe <__swsetup_r+0xda>
100156f6:	2240      	movs	r2, #64	; 0x40
100156f8:	4313      	orrs	r3, r2
100156fa:	81a3      	strh	r3, [r4, #12]
100156fc:	3801      	subs	r0, #1
100156fe:	bd70      	pop	{r4, r5, r6, pc}
10015700:	100184e4 	.word	0x100184e4
10015704:	10018388 	.word	0x10018388
10015708:	100183a8 	.word	0x100183a8
1001570c:	100183c8 	.word	0x100183c8

10015710 <__sflush_r>:
10015710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015712:	898a      	ldrh	r2, [r1, #12]
10015714:	0005      	movs	r5, r0
10015716:	000c      	movs	r4, r1
10015718:	0713      	lsls	r3, r2, #28
1001571a:	d45a      	bmi.n	100157d2 <__sflush_r+0xc2>
1001571c:	684b      	ldr	r3, [r1, #4]
1001571e:	2b00      	cmp	r3, #0
10015720:	dc02      	bgt.n	10015728 <__sflush_r+0x18>
10015722:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015724:	2b00      	cmp	r3, #0
10015726:	dd19      	ble.n	1001575c <__sflush_r+0x4c>
10015728:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001572a:	2f00      	cmp	r7, #0
1001572c:	d016      	beq.n	1001575c <__sflush_r+0x4c>
1001572e:	2300      	movs	r3, #0
10015730:	682e      	ldr	r6, [r5, #0]
10015732:	602b      	str	r3, [r5, #0]
10015734:	2380      	movs	r3, #128	; 0x80
10015736:	015b      	lsls	r3, r3, #5
10015738:	401a      	ands	r2, r3
1001573a:	d001      	beq.n	10015740 <__sflush_r+0x30>
1001573c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001573e:	e014      	b.n	1001576a <__sflush_r+0x5a>
10015740:	2301      	movs	r3, #1
10015742:	6a21      	ldr	r1, [r4, #32]
10015744:	0028      	movs	r0, r5
10015746:	47b8      	blx	r7
10015748:	1c43      	adds	r3, r0, #1
1001574a:	d10e      	bne.n	1001576a <__sflush_r+0x5a>
1001574c:	682b      	ldr	r3, [r5, #0]
1001574e:	2b00      	cmp	r3, #0
10015750:	d00b      	beq.n	1001576a <__sflush_r+0x5a>
10015752:	2b1d      	cmp	r3, #29
10015754:	d001      	beq.n	1001575a <__sflush_r+0x4a>
10015756:	2b16      	cmp	r3, #22
10015758:	d102      	bne.n	10015760 <__sflush_r+0x50>
1001575a:	602e      	str	r6, [r5, #0]
1001575c:	2000      	movs	r0, #0
1001575e:	e05a      	b.n	10015816 <__sflush_r+0x106>
10015760:	2240      	movs	r2, #64	; 0x40
10015762:	89a3      	ldrh	r3, [r4, #12]
10015764:	4313      	orrs	r3, r2
10015766:	81a3      	strh	r3, [r4, #12]
10015768:	e055      	b.n	10015816 <__sflush_r+0x106>
1001576a:	89a3      	ldrh	r3, [r4, #12]
1001576c:	075b      	lsls	r3, r3, #29
1001576e:	d506      	bpl.n	1001577e <__sflush_r+0x6e>
10015770:	6863      	ldr	r3, [r4, #4]
10015772:	1ac0      	subs	r0, r0, r3
10015774:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015776:	2b00      	cmp	r3, #0
10015778:	d001      	beq.n	1001577e <__sflush_r+0x6e>
1001577a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1001577c:	1ac0      	subs	r0, r0, r3
1001577e:	2300      	movs	r3, #0
10015780:	0002      	movs	r2, r0
10015782:	6a21      	ldr	r1, [r4, #32]
10015784:	0028      	movs	r0, r5
10015786:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015788:	47b8      	blx	r7
1001578a:	89a3      	ldrh	r3, [r4, #12]
1001578c:	1c42      	adds	r2, r0, #1
1001578e:	d106      	bne.n	1001579e <__sflush_r+0x8e>
10015790:	6829      	ldr	r1, [r5, #0]
10015792:	291d      	cmp	r1, #29
10015794:	d83a      	bhi.n	1001580c <__sflush_r+0xfc>
10015796:	4a20      	ldr	r2, [pc, #128]	; (10015818 <__sflush_r+0x108>)
10015798:	40ca      	lsrs	r2, r1
1001579a:	07d2      	lsls	r2, r2, #31
1001579c:	d536      	bpl.n	1001580c <__sflush_r+0xfc>
1001579e:	2200      	movs	r2, #0
100157a0:	6062      	str	r2, [r4, #4]
100157a2:	6922      	ldr	r2, [r4, #16]
100157a4:	6022      	str	r2, [r4, #0]
100157a6:	04db      	lsls	r3, r3, #19
100157a8:	d505      	bpl.n	100157b6 <__sflush_r+0xa6>
100157aa:	1c43      	adds	r3, r0, #1
100157ac:	d102      	bne.n	100157b4 <__sflush_r+0xa4>
100157ae:	682b      	ldr	r3, [r5, #0]
100157b0:	2b00      	cmp	r3, #0
100157b2:	d100      	bne.n	100157b6 <__sflush_r+0xa6>
100157b4:	6560      	str	r0, [r4, #84]	; 0x54
100157b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100157b8:	602e      	str	r6, [r5, #0]
100157ba:	2900      	cmp	r1, #0
100157bc:	d0ce      	beq.n	1001575c <__sflush_r+0x4c>
100157be:	0023      	movs	r3, r4
100157c0:	3344      	adds	r3, #68	; 0x44
100157c2:	4299      	cmp	r1, r3
100157c4:	d002      	beq.n	100157cc <__sflush_r+0xbc>
100157c6:	0028      	movs	r0, r5
100157c8:	f7ff fc96 	bl	100150f8 <_free_r>
100157cc:	2000      	movs	r0, #0
100157ce:	6360      	str	r0, [r4, #52]	; 0x34
100157d0:	e021      	b.n	10015816 <__sflush_r+0x106>
100157d2:	690f      	ldr	r7, [r1, #16]
100157d4:	2f00      	cmp	r7, #0
100157d6:	d0c1      	beq.n	1001575c <__sflush_r+0x4c>
100157d8:	680b      	ldr	r3, [r1, #0]
100157da:	600f      	str	r7, [r1, #0]
100157dc:	1bdb      	subs	r3, r3, r7
100157de:	9301      	str	r3, [sp, #4]
100157e0:	2300      	movs	r3, #0
100157e2:	0792      	lsls	r2, r2, #30
100157e4:	d100      	bne.n	100157e8 <__sflush_r+0xd8>
100157e6:	694b      	ldr	r3, [r1, #20]
100157e8:	60a3      	str	r3, [r4, #8]
100157ea:	e003      	b.n	100157f4 <__sflush_r+0xe4>
100157ec:	9b01      	ldr	r3, [sp, #4]
100157ee:	183f      	adds	r7, r7, r0
100157f0:	1a1b      	subs	r3, r3, r0
100157f2:	9301      	str	r3, [sp, #4]
100157f4:	9b01      	ldr	r3, [sp, #4]
100157f6:	2b00      	cmp	r3, #0
100157f8:	ddb0      	ble.n	1001575c <__sflush_r+0x4c>
100157fa:	9b01      	ldr	r3, [sp, #4]
100157fc:	003a      	movs	r2, r7
100157fe:	6a21      	ldr	r1, [r4, #32]
10015800:	0028      	movs	r0, r5
10015802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015804:	47b0      	blx	r6
10015806:	2800      	cmp	r0, #0
10015808:	dcf0      	bgt.n	100157ec <__sflush_r+0xdc>
1001580a:	89a3      	ldrh	r3, [r4, #12]
1001580c:	2240      	movs	r2, #64	; 0x40
1001580e:	2001      	movs	r0, #1
10015810:	4313      	orrs	r3, r2
10015812:	81a3      	strh	r3, [r4, #12]
10015814:	4240      	negs	r0, r0
10015816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015818:	20400001 	.word	0x20400001

1001581c <_fflush_r>:
1001581c:	690b      	ldr	r3, [r1, #16]
1001581e:	b570      	push	{r4, r5, r6, lr}
10015820:	0005      	movs	r5, r0
10015822:	000c      	movs	r4, r1
10015824:	2b00      	cmp	r3, #0
10015826:	d101      	bne.n	1001582c <_fflush_r+0x10>
10015828:	2000      	movs	r0, #0
1001582a:	e01c      	b.n	10015866 <_fflush_r+0x4a>
1001582c:	2800      	cmp	r0, #0
1001582e:	d004      	beq.n	1001583a <_fflush_r+0x1e>
10015830:	6983      	ldr	r3, [r0, #24]
10015832:	2b00      	cmp	r3, #0
10015834:	d101      	bne.n	1001583a <_fflush_r+0x1e>
10015836:	f000 f85f 	bl	100158f8 <__sinit>
1001583a:	4b0b      	ldr	r3, [pc, #44]	; (10015868 <_fflush_r+0x4c>)
1001583c:	429c      	cmp	r4, r3
1001583e:	d101      	bne.n	10015844 <_fflush_r+0x28>
10015840:	686c      	ldr	r4, [r5, #4]
10015842:	e008      	b.n	10015856 <_fflush_r+0x3a>
10015844:	4b09      	ldr	r3, [pc, #36]	; (1001586c <_fflush_r+0x50>)
10015846:	429c      	cmp	r4, r3
10015848:	d101      	bne.n	1001584e <_fflush_r+0x32>
1001584a:	68ac      	ldr	r4, [r5, #8]
1001584c:	e003      	b.n	10015856 <_fflush_r+0x3a>
1001584e:	4b08      	ldr	r3, [pc, #32]	; (10015870 <_fflush_r+0x54>)
10015850:	429c      	cmp	r4, r3
10015852:	d100      	bne.n	10015856 <_fflush_r+0x3a>
10015854:	68ec      	ldr	r4, [r5, #12]
10015856:	220c      	movs	r2, #12
10015858:	5ea3      	ldrsh	r3, [r4, r2]
1001585a:	2b00      	cmp	r3, #0
1001585c:	d0e4      	beq.n	10015828 <_fflush_r+0xc>
1001585e:	0021      	movs	r1, r4
10015860:	0028      	movs	r0, r5
10015862:	f7ff ff55 	bl	10015710 <__sflush_r>
10015866:	bd70      	pop	{r4, r5, r6, pc}
10015868:	10018388 	.word	0x10018388
1001586c:	100183a8 	.word	0x100183a8
10015870:	100183c8 	.word	0x100183c8

10015874 <_cleanup_r>:
10015874:	b510      	push	{r4, lr}
10015876:	4902      	ldr	r1, [pc, #8]	; (10015880 <_cleanup_r+0xc>)
10015878:	f000 f8b0 	bl	100159dc <_fwalk_reent>
1001587c:	bd10      	pop	{r4, pc}
1001587e:	46c0      	nop			; (mov r8, r8)
10015880:	1001581d 	.word	0x1001581d

10015884 <std.isra.0>:
10015884:	2300      	movs	r3, #0
10015886:	b510      	push	{r4, lr}
10015888:	0004      	movs	r4, r0
1001588a:	6003      	str	r3, [r0, #0]
1001588c:	6043      	str	r3, [r0, #4]
1001588e:	6083      	str	r3, [r0, #8]
10015890:	8181      	strh	r1, [r0, #12]
10015892:	6643      	str	r3, [r0, #100]	; 0x64
10015894:	81c2      	strh	r2, [r0, #14]
10015896:	6103      	str	r3, [r0, #16]
10015898:	6143      	str	r3, [r0, #20]
1001589a:	6183      	str	r3, [r0, #24]
1001589c:	0019      	movs	r1, r3
1001589e:	2208      	movs	r2, #8
100158a0:	305c      	adds	r0, #92	; 0x5c
100158a2:	f7ff fc21 	bl	100150e8 <memset>
100158a6:	4b05      	ldr	r3, [pc, #20]	; (100158bc <std.isra.0+0x38>)
100158a8:	6224      	str	r4, [r4, #32]
100158aa:	6263      	str	r3, [r4, #36]	; 0x24
100158ac:	4b04      	ldr	r3, [pc, #16]	; (100158c0 <std.isra.0+0x3c>)
100158ae:	62a3      	str	r3, [r4, #40]	; 0x28
100158b0:	4b04      	ldr	r3, [pc, #16]	; (100158c4 <std.isra.0+0x40>)
100158b2:	62e3      	str	r3, [r4, #44]	; 0x2c
100158b4:	4b04      	ldr	r3, [pc, #16]	; (100158c8 <std.isra.0+0x44>)
100158b6:	6323      	str	r3, [r4, #48]	; 0x30
100158b8:	bd10      	pop	{r4, pc}
100158ba:	46c0      	nop			; (mov r8, r8)
100158bc:	100160fd 	.word	0x100160fd
100158c0:	10016125 	.word	0x10016125
100158c4:	1001615d 	.word	0x1001615d
100158c8:	10016189 	.word	0x10016189

100158cc <__sfmoreglue>:
100158cc:	b570      	push	{r4, r5, r6, lr}
100158ce:	2568      	movs	r5, #104	; 0x68
100158d0:	1e4b      	subs	r3, r1, #1
100158d2:	435d      	muls	r5, r3
100158d4:	000e      	movs	r6, r1
100158d6:	0029      	movs	r1, r5
100158d8:	3174      	adds	r1, #116	; 0x74
100158da:	f7ff fc53 	bl	10015184 <_malloc_r>
100158de:	1e04      	subs	r4, r0, #0
100158e0:	d008      	beq.n	100158f4 <__sfmoreglue+0x28>
100158e2:	2100      	movs	r1, #0
100158e4:	002a      	movs	r2, r5
100158e6:	6001      	str	r1, [r0, #0]
100158e8:	6046      	str	r6, [r0, #4]
100158ea:	300c      	adds	r0, #12
100158ec:	60a0      	str	r0, [r4, #8]
100158ee:	3268      	adds	r2, #104	; 0x68
100158f0:	f7ff fbfa 	bl	100150e8 <memset>
100158f4:	0020      	movs	r0, r4
100158f6:	bd70      	pop	{r4, r5, r6, pc}

100158f8 <__sinit>:
100158f8:	6983      	ldr	r3, [r0, #24]
100158fa:	b513      	push	{r0, r1, r4, lr}
100158fc:	0004      	movs	r4, r0
100158fe:	2b00      	cmp	r3, #0
10015900:	d128      	bne.n	10015954 <__sinit+0x5c>
10015902:	6483      	str	r3, [r0, #72]	; 0x48
10015904:	64c3      	str	r3, [r0, #76]	; 0x4c
10015906:	6503      	str	r3, [r0, #80]	; 0x50
10015908:	4b13      	ldr	r3, [pc, #76]	; (10015958 <__sinit+0x60>)
1001590a:	4a14      	ldr	r2, [pc, #80]	; (1001595c <__sinit+0x64>)
1001590c:	681b      	ldr	r3, [r3, #0]
1001590e:	6282      	str	r2, [r0, #40]	; 0x28
10015910:	9301      	str	r3, [sp, #4]
10015912:	4298      	cmp	r0, r3
10015914:	d101      	bne.n	1001591a <__sinit+0x22>
10015916:	2301      	movs	r3, #1
10015918:	6183      	str	r3, [r0, #24]
1001591a:	0020      	movs	r0, r4
1001591c:	f000 f820 	bl	10015960 <__sfp>
10015920:	6060      	str	r0, [r4, #4]
10015922:	0020      	movs	r0, r4
10015924:	f000 f81c 	bl	10015960 <__sfp>
10015928:	60a0      	str	r0, [r4, #8]
1001592a:	0020      	movs	r0, r4
1001592c:	f000 f818 	bl	10015960 <__sfp>
10015930:	2200      	movs	r2, #0
10015932:	60e0      	str	r0, [r4, #12]
10015934:	2104      	movs	r1, #4
10015936:	6860      	ldr	r0, [r4, #4]
10015938:	f7ff ffa4 	bl	10015884 <std.isra.0>
1001593c:	2201      	movs	r2, #1
1001593e:	2109      	movs	r1, #9
10015940:	68a0      	ldr	r0, [r4, #8]
10015942:	f7ff ff9f 	bl	10015884 <std.isra.0>
10015946:	2202      	movs	r2, #2
10015948:	2112      	movs	r1, #18
1001594a:	68e0      	ldr	r0, [r4, #12]
1001594c:	f7ff ff9a 	bl	10015884 <std.isra.0>
10015950:	2301      	movs	r3, #1
10015952:	61a3      	str	r3, [r4, #24]
10015954:	bd13      	pop	{r0, r1, r4, pc}
10015956:	46c0      	nop			; (mov r8, r8)
10015958:	10018384 	.word	0x10018384
1001595c:	10015875 	.word	0x10015875

10015960 <__sfp>:
10015960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015962:	4b1d      	ldr	r3, [pc, #116]	; (100159d8 <__sfp+0x78>)
10015964:	0006      	movs	r6, r0
10015966:	681d      	ldr	r5, [r3, #0]
10015968:	69ab      	ldr	r3, [r5, #24]
1001596a:	2b00      	cmp	r3, #0
1001596c:	d102      	bne.n	10015974 <__sfp+0x14>
1001596e:	0028      	movs	r0, r5
10015970:	f7ff ffc2 	bl	100158f8 <__sinit>
10015974:	3548      	adds	r5, #72	; 0x48
10015976:	68ac      	ldr	r4, [r5, #8]
10015978:	686b      	ldr	r3, [r5, #4]
1001597a:	3b01      	subs	r3, #1
1001597c:	d405      	bmi.n	1001598a <__sfp+0x2a>
1001597e:	220c      	movs	r2, #12
10015980:	5ea7      	ldrsh	r7, [r4, r2]
10015982:	2f00      	cmp	r7, #0
10015984:	d010      	beq.n	100159a8 <__sfp+0x48>
10015986:	3468      	adds	r4, #104	; 0x68
10015988:	e7f7      	b.n	1001597a <__sfp+0x1a>
1001598a:	682b      	ldr	r3, [r5, #0]
1001598c:	2b00      	cmp	r3, #0
1001598e:	d001      	beq.n	10015994 <__sfp+0x34>
10015990:	682d      	ldr	r5, [r5, #0]
10015992:	e7f0      	b.n	10015976 <__sfp+0x16>
10015994:	2104      	movs	r1, #4
10015996:	0030      	movs	r0, r6
10015998:	f7ff ff98 	bl	100158cc <__sfmoreglue>
1001599c:	6028      	str	r0, [r5, #0]
1001599e:	2800      	cmp	r0, #0
100159a0:	d1f6      	bne.n	10015990 <__sfp+0x30>
100159a2:	230c      	movs	r3, #12
100159a4:	6033      	str	r3, [r6, #0]
100159a6:	e016      	b.n	100159d6 <__sfp+0x76>
100159a8:	2301      	movs	r3, #1
100159aa:	0020      	movs	r0, r4
100159ac:	425b      	negs	r3, r3
100159ae:	81e3      	strh	r3, [r4, #14]
100159b0:	3302      	adds	r3, #2
100159b2:	81a3      	strh	r3, [r4, #12]
100159b4:	6667      	str	r7, [r4, #100]	; 0x64
100159b6:	6027      	str	r7, [r4, #0]
100159b8:	60a7      	str	r7, [r4, #8]
100159ba:	6067      	str	r7, [r4, #4]
100159bc:	6127      	str	r7, [r4, #16]
100159be:	6167      	str	r7, [r4, #20]
100159c0:	61a7      	str	r7, [r4, #24]
100159c2:	305c      	adds	r0, #92	; 0x5c
100159c4:	2208      	movs	r2, #8
100159c6:	0039      	movs	r1, r7
100159c8:	f7ff fb8e 	bl	100150e8 <memset>
100159cc:	0020      	movs	r0, r4
100159ce:	6367      	str	r7, [r4, #52]	; 0x34
100159d0:	63a7      	str	r7, [r4, #56]	; 0x38
100159d2:	64a7      	str	r7, [r4, #72]	; 0x48
100159d4:	64e7      	str	r7, [r4, #76]	; 0x4c
100159d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100159d8:	10018384 	.word	0x10018384

100159dc <_fwalk_reent>:
100159dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100159de:	0004      	movs	r4, r0
100159e0:	0007      	movs	r7, r0
100159e2:	2600      	movs	r6, #0
100159e4:	9101      	str	r1, [sp, #4]
100159e6:	3448      	adds	r4, #72	; 0x48
100159e8:	2c00      	cmp	r4, #0
100159ea:	d016      	beq.n	10015a1a <_fwalk_reent+0x3e>
100159ec:	6863      	ldr	r3, [r4, #4]
100159ee:	68a5      	ldr	r5, [r4, #8]
100159f0:	9300      	str	r3, [sp, #0]
100159f2:	9b00      	ldr	r3, [sp, #0]
100159f4:	3b01      	subs	r3, #1
100159f6:	9300      	str	r3, [sp, #0]
100159f8:	d40d      	bmi.n	10015a16 <_fwalk_reent+0x3a>
100159fa:	89ab      	ldrh	r3, [r5, #12]
100159fc:	2b01      	cmp	r3, #1
100159fe:	d908      	bls.n	10015a12 <_fwalk_reent+0x36>
10015a00:	220e      	movs	r2, #14
10015a02:	5eab      	ldrsh	r3, [r5, r2]
10015a04:	3301      	adds	r3, #1
10015a06:	d004      	beq.n	10015a12 <_fwalk_reent+0x36>
10015a08:	0029      	movs	r1, r5
10015a0a:	0038      	movs	r0, r7
10015a0c:	9b01      	ldr	r3, [sp, #4]
10015a0e:	4798      	blx	r3
10015a10:	4306      	orrs	r6, r0
10015a12:	3568      	adds	r5, #104	; 0x68
10015a14:	e7ed      	b.n	100159f2 <_fwalk_reent+0x16>
10015a16:	6824      	ldr	r4, [r4, #0]
10015a18:	e7e6      	b.n	100159e8 <_fwalk_reent+0xc>
10015a1a:	0030      	movs	r0, r6
10015a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015a20 <__swhatbuf_r>:
10015a20:	b570      	push	{r4, r5, r6, lr}
10015a22:	000e      	movs	r6, r1
10015a24:	001d      	movs	r5, r3
10015a26:	230e      	movs	r3, #14
10015a28:	5ec9      	ldrsh	r1, [r1, r3]
10015a2a:	b090      	sub	sp, #64	; 0x40
10015a2c:	0014      	movs	r4, r2
10015a2e:	2900      	cmp	r1, #0
10015a30:	da06      	bge.n	10015a40 <__swhatbuf_r+0x20>
10015a32:	2300      	movs	r3, #0
10015a34:	602b      	str	r3, [r5, #0]
10015a36:	89b3      	ldrh	r3, [r6, #12]
10015a38:	061b      	lsls	r3, r3, #24
10015a3a:	d50f      	bpl.n	10015a5c <__swhatbuf_r+0x3c>
10015a3c:	2340      	movs	r3, #64	; 0x40
10015a3e:	e00f      	b.n	10015a60 <__swhatbuf_r+0x40>
10015a40:	aa01      	add	r2, sp, #4
10015a42:	f000 fbcd 	bl	100161e0 <_fstat_r>
10015a46:	2800      	cmp	r0, #0
10015a48:	dbf3      	blt.n	10015a32 <__swhatbuf_r+0x12>
10015a4a:	23f0      	movs	r3, #240	; 0xf0
10015a4c:	9a02      	ldr	r2, [sp, #8]
10015a4e:	021b      	lsls	r3, r3, #8
10015a50:	4013      	ands	r3, r2
10015a52:	4a05      	ldr	r2, [pc, #20]	; (10015a68 <__swhatbuf_r+0x48>)
10015a54:	189b      	adds	r3, r3, r2
10015a56:	425a      	negs	r2, r3
10015a58:	4153      	adcs	r3, r2
10015a5a:	602b      	str	r3, [r5, #0]
10015a5c:	2380      	movs	r3, #128	; 0x80
10015a5e:	00db      	lsls	r3, r3, #3
10015a60:	2000      	movs	r0, #0
10015a62:	6023      	str	r3, [r4, #0]
10015a64:	b010      	add	sp, #64	; 0x40
10015a66:	bd70      	pop	{r4, r5, r6, pc}
10015a68:	ffffe000 	.word	0xffffe000

10015a6c <__smakebuf_r>:
10015a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015a6e:	2602      	movs	r6, #2
10015a70:	898b      	ldrh	r3, [r1, #12]
10015a72:	0005      	movs	r5, r0
10015a74:	000c      	movs	r4, r1
10015a76:	4233      	tst	r3, r6
10015a78:	d110      	bne.n	10015a9c <__smakebuf_r+0x30>
10015a7a:	ab01      	add	r3, sp, #4
10015a7c:	466a      	mov	r2, sp
10015a7e:	f7ff ffcf 	bl	10015a20 <__swhatbuf_r>
10015a82:	9900      	ldr	r1, [sp, #0]
10015a84:	0007      	movs	r7, r0
10015a86:	0028      	movs	r0, r5
10015a88:	f7ff fb7c 	bl	10015184 <_malloc_r>
10015a8c:	2800      	cmp	r0, #0
10015a8e:	d10c      	bne.n	10015aaa <__smakebuf_r+0x3e>
10015a90:	220c      	movs	r2, #12
10015a92:	5ea3      	ldrsh	r3, [r4, r2]
10015a94:	059a      	lsls	r2, r3, #22
10015a96:	d423      	bmi.n	10015ae0 <__smakebuf_r+0x74>
10015a98:	4333      	orrs	r3, r6
10015a9a:	81a3      	strh	r3, [r4, #12]
10015a9c:	0023      	movs	r3, r4
10015a9e:	3347      	adds	r3, #71	; 0x47
10015aa0:	6023      	str	r3, [r4, #0]
10015aa2:	6123      	str	r3, [r4, #16]
10015aa4:	2301      	movs	r3, #1
10015aa6:	6163      	str	r3, [r4, #20]
10015aa8:	e01a      	b.n	10015ae0 <__smakebuf_r+0x74>
10015aaa:	2280      	movs	r2, #128	; 0x80
10015aac:	4b0d      	ldr	r3, [pc, #52]	; (10015ae4 <__smakebuf_r+0x78>)
10015aae:	62ab      	str	r3, [r5, #40]	; 0x28
10015ab0:	89a3      	ldrh	r3, [r4, #12]
10015ab2:	6020      	str	r0, [r4, #0]
10015ab4:	4313      	orrs	r3, r2
10015ab6:	81a3      	strh	r3, [r4, #12]
10015ab8:	9b00      	ldr	r3, [sp, #0]
10015aba:	6120      	str	r0, [r4, #16]
10015abc:	6163      	str	r3, [r4, #20]
10015abe:	9b01      	ldr	r3, [sp, #4]
10015ac0:	2b00      	cmp	r3, #0
10015ac2:	d00a      	beq.n	10015ada <__smakebuf_r+0x6e>
10015ac4:	230e      	movs	r3, #14
10015ac6:	5ee1      	ldrsh	r1, [r4, r3]
10015ac8:	0028      	movs	r0, r5
10015aca:	f000 fb9b 	bl	10016204 <_isatty_r>
10015ace:	2800      	cmp	r0, #0
10015ad0:	d003      	beq.n	10015ada <__smakebuf_r+0x6e>
10015ad2:	2201      	movs	r2, #1
10015ad4:	89a3      	ldrh	r3, [r4, #12]
10015ad6:	4313      	orrs	r3, r2
10015ad8:	81a3      	strh	r3, [r4, #12]
10015ada:	89a3      	ldrh	r3, [r4, #12]
10015adc:	431f      	orrs	r7, r3
10015ade:	81a7      	strh	r7, [r4, #12]
10015ae0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015ae2:	46c0      	nop			; (mov r8, r8)
10015ae4:	10015875 	.word	0x10015875

10015ae8 <__sfputc_r>:
10015ae8:	6893      	ldr	r3, [r2, #8]
10015aea:	b510      	push	{r4, lr}
10015aec:	3b01      	subs	r3, #1
10015aee:	6093      	str	r3, [r2, #8]
10015af0:	2b00      	cmp	r3, #0
10015af2:	da05      	bge.n	10015b00 <__sfputc_r+0x18>
10015af4:	6994      	ldr	r4, [r2, #24]
10015af6:	42a3      	cmp	r3, r4
10015af8:	db08      	blt.n	10015b0c <__sfputc_r+0x24>
10015afa:	b2cb      	uxtb	r3, r1
10015afc:	2b0a      	cmp	r3, #10
10015afe:	d005      	beq.n	10015b0c <__sfputc_r+0x24>
10015b00:	6813      	ldr	r3, [r2, #0]
10015b02:	1c58      	adds	r0, r3, #1
10015b04:	6010      	str	r0, [r2, #0]
10015b06:	7019      	strb	r1, [r3, #0]
10015b08:	b2c8      	uxtb	r0, r1
10015b0a:	e001      	b.n	10015b10 <__sfputc_r+0x28>
10015b0c:	f7ff fd32 	bl	10015574 <__swbuf_r>
10015b10:	bd10      	pop	{r4, pc}

10015b12 <__sfputs_r>:
10015b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015b14:	0006      	movs	r6, r0
10015b16:	000f      	movs	r7, r1
10015b18:	0014      	movs	r4, r2
10015b1a:	18d5      	adds	r5, r2, r3
10015b1c:	42ac      	cmp	r4, r5
10015b1e:	d008      	beq.n	10015b32 <__sfputs_r+0x20>
10015b20:	7821      	ldrb	r1, [r4, #0]
10015b22:	003a      	movs	r2, r7
10015b24:	0030      	movs	r0, r6
10015b26:	f7ff ffdf 	bl	10015ae8 <__sfputc_r>
10015b2a:	3401      	adds	r4, #1
10015b2c:	1c43      	adds	r3, r0, #1
10015b2e:	d1f5      	bne.n	10015b1c <__sfputs_r+0xa>
10015b30:	e000      	b.n	10015b34 <__sfputs_r+0x22>
10015b32:	2000      	movs	r0, #0
10015b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015b38 <_vfiprintf_r>:
10015b38:	b5f0      	push	{r4, r5, r6, r7, lr}
10015b3a:	b09f      	sub	sp, #124	; 0x7c
10015b3c:	0006      	movs	r6, r0
10015b3e:	000f      	movs	r7, r1
10015b40:	9202      	str	r2, [sp, #8]
10015b42:	9305      	str	r3, [sp, #20]
10015b44:	2800      	cmp	r0, #0
10015b46:	d004      	beq.n	10015b52 <_vfiprintf_r+0x1a>
10015b48:	6983      	ldr	r3, [r0, #24]
10015b4a:	2b00      	cmp	r3, #0
10015b4c:	d101      	bne.n	10015b52 <_vfiprintf_r+0x1a>
10015b4e:	f7ff fed3 	bl	100158f8 <__sinit>
10015b52:	4b7f      	ldr	r3, [pc, #508]	; (10015d50 <_vfiprintf_r+0x218>)
10015b54:	429f      	cmp	r7, r3
10015b56:	d101      	bne.n	10015b5c <_vfiprintf_r+0x24>
10015b58:	6877      	ldr	r7, [r6, #4]
10015b5a:	e008      	b.n	10015b6e <_vfiprintf_r+0x36>
10015b5c:	4b7d      	ldr	r3, [pc, #500]	; (10015d54 <_vfiprintf_r+0x21c>)
10015b5e:	429f      	cmp	r7, r3
10015b60:	d101      	bne.n	10015b66 <_vfiprintf_r+0x2e>
10015b62:	68b7      	ldr	r7, [r6, #8]
10015b64:	e003      	b.n	10015b6e <_vfiprintf_r+0x36>
10015b66:	4b7c      	ldr	r3, [pc, #496]	; (10015d58 <_vfiprintf_r+0x220>)
10015b68:	429f      	cmp	r7, r3
10015b6a:	d100      	bne.n	10015b6e <_vfiprintf_r+0x36>
10015b6c:	68f7      	ldr	r7, [r6, #12]
10015b6e:	89bb      	ldrh	r3, [r7, #12]
10015b70:	071b      	lsls	r3, r3, #28
10015b72:	d50a      	bpl.n	10015b8a <_vfiprintf_r+0x52>
10015b74:	693b      	ldr	r3, [r7, #16]
10015b76:	2b00      	cmp	r3, #0
10015b78:	d007      	beq.n	10015b8a <_vfiprintf_r+0x52>
10015b7a:	2300      	movs	r3, #0
10015b7c:	ad06      	add	r5, sp, #24
10015b7e:	616b      	str	r3, [r5, #20]
10015b80:	3320      	adds	r3, #32
10015b82:	766b      	strb	r3, [r5, #25]
10015b84:	3310      	adds	r3, #16
10015b86:	76ab      	strb	r3, [r5, #26]
10015b88:	e03d      	b.n	10015c06 <_vfiprintf_r+0xce>
10015b8a:	0039      	movs	r1, r7
10015b8c:	0030      	movs	r0, r6
10015b8e:	f7ff fd49 	bl	10015624 <__swsetup_r>
10015b92:	2800      	cmp	r0, #0
10015b94:	d0f1      	beq.n	10015b7a <_vfiprintf_r+0x42>
10015b96:	2001      	movs	r0, #1
10015b98:	4240      	negs	r0, r0
10015b9a:	e0d6      	b.n	10015d4a <_vfiprintf_r+0x212>
10015b9c:	9a05      	ldr	r2, [sp, #20]
10015b9e:	1d11      	adds	r1, r2, #4
10015ba0:	6812      	ldr	r2, [r2, #0]
10015ba2:	9105      	str	r1, [sp, #20]
10015ba4:	2a00      	cmp	r2, #0
10015ba6:	da00      	bge.n	10015baa <_vfiprintf_r+0x72>
10015ba8:	e07f      	b.n	10015caa <_vfiprintf_r+0x172>
10015baa:	9209      	str	r2, [sp, #36]	; 0x24
10015bac:	3401      	adds	r4, #1
10015bae:	7823      	ldrb	r3, [r4, #0]
10015bb0:	2b2e      	cmp	r3, #46	; 0x2e
10015bb2:	d100      	bne.n	10015bb6 <_vfiprintf_r+0x7e>
10015bb4:	e08d      	b.n	10015cd2 <_vfiprintf_r+0x19a>
10015bb6:	7821      	ldrb	r1, [r4, #0]
10015bb8:	2203      	movs	r2, #3
10015bba:	4868      	ldr	r0, [pc, #416]	; (10015d5c <_vfiprintf_r+0x224>)
10015bbc:	f000 fb48 	bl	10016250 <memchr>
10015bc0:	2800      	cmp	r0, #0
10015bc2:	d007      	beq.n	10015bd4 <_vfiprintf_r+0x9c>
10015bc4:	4b65      	ldr	r3, [pc, #404]	; (10015d5c <_vfiprintf_r+0x224>)
10015bc6:	682a      	ldr	r2, [r5, #0]
10015bc8:	1ac0      	subs	r0, r0, r3
10015bca:	2340      	movs	r3, #64	; 0x40
10015bcc:	4083      	lsls	r3, r0
10015bce:	4313      	orrs	r3, r2
10015bd0:	602b      	str	r3, [r5, #0]
10015bd2:	3401      	adds	r4, #1
10015bd4:	7821      	ldrb	r1, [r4, #0]
10015bd6:	1c63      	adds	r3, r4, #1
10015bd8:	2206      	movs	r2, #6
10015bda:	4861      	ldr	r0, [pc, #388]	; (10015d60 <_vfiprintf_r+0x228>)
10015bdc:	9302      	str	r3, [sp, #8]
10015bde:	7629      	strb	r1, [r5, #24]
10015be0:	f000 fb36 	bl	10016250 <memchr>
10015be4:	2800      	cmp	r0, #0
10015be6:	d100      	bne.n	10015bea <_vfiprintf_r+0xb2>
10015be8:	e09d      	b.n	10015d26 <_vfiprintf_r+0x1ee>
10015bea:	4b5e      	ldr	r3, [pc, #376]	; (10015d64 <_vfiprintf_r+0x22c>)
10015bec:	2b00      	cmp	r3, #0
10015bee:	d000      	beq.n	10015bf2 <_vfiprintf_r+0xba>
10015bf0:	e090      	b.n	10015d14 <_vfiprintf_r+0x1dc>
10015bf2:	2207      	movs	r2, #7
10015bf4:	9b05      	ldr	r3, [sp, #20]
10015bf6:	3307      	adds	r3, #7
10015bf8:	4393      	bics	r3, r2
10015bfa:	3308      	adds	r3, #8
10015bfc:	9305      	str	r3, [sp, #20]
10015bfe:	696b      	ldr	r3, [r5, #20]
10015c00:	9a03      	ldr	r2, [sp, #12]
10015c02:	189b      	adds	r3, r3, r2
10015c04:	616b      	str	r3, [r5, #20]
10015c06:	9c02      	ldr	r4, [sp, #8]
10015c08:	7823      	ldrb	r3, [r4, #0]
10015c0a:	2b00      	cmp	r3, #0
10015c0c:	d104      	bne.n	10015c18 <_vfiprintf_r+0xe0>
10015c0e:	9b02      	ldr	r3, [sp, #8]
10015c10:	1ae3      	subs	r3, r4, r3
10015c12:	9304      	str	r3, [sp, #16]
10015c14:	d012      	beq.n	10015c3c <_vfiprintf_r+0x104>
10015c16:	e003      	b.n	10015c20 <_vfiprintf_r+0xe8>
10015c18:	2b25      	cmp	r3, #37	; 0x25
10015c1a:	d0f8      	beq.n	10015c0e <_vfiprintf_r+0xd6>
10015c1c:	3401      	adds	r4, #1
10015c1e:	e7f3      	b.n	10015c08 <_vfiprintf_r+0xd0>
10015c20:	9b04      	ldr	r3, [sp, #16]
10015c22:	9a02      	ldr	r2, [sp, #8]
10015c24:	0039      	movs	r1, r7
10015c26:	0030      	movs	r0, r6
10015c28:	f7ff ff73 	bl	10015b12 <__sfputs_r>
10015c2c:	1c43      	adds	r3, r0, #1
10015c2e:	d100      	bne.n	10015c32 <_vfiprintf_r+0xfa>
10015c30:	e086      	b.n	10015d40 <_vfiprintf_r+0x208>
10015c32:	696a      	ldr	r2, [r5, #20]
10015c34:	9b04      	ldr	r3, [sp, #16]
10015c36:	4694      	mov	ip, r2
10015c38:	4463      	add	r3, ip
10015c3a:	616b      	str	r3, [r5, #20]
10015c3c:	7823      	ldrb	r3, [r4, #0]
10015c3e:	2b00      	cmp	r3, #0
10015c40:	d07e      	beq.n	10015d40 <_vfiprintf_r+0x208>
10015c42:	2201      	movs	r2, #1
10015c44:	2300      	movs	r3, #0
10015c46:	4252      	negs	r2, r2
10015c48:	606a      	str	r2, [r5, #4]
10015c4a:	a902      	add	r1, sp, #8
10015c4c:	3254      	adds	r2, #84	; 0x54
10015c4e:	1852      	adds	r2, r2, r1
10015c50:	3401      	adds	r4, #1
10015c52:	602b      	str	r3, [r5, #0]
10015c54:	60eb      	str	r3, [r5, #12]
10015c56:	60ab      	str	r3, [r5, #8]
10015c58:	7013      	strb	r3, [r2, #0]
10015c5a:	65ab      	str	r3, [r5, #88]	; 0x58
10015c5c:	7821      	ldrb	r1, [r4, #0]
10015c5e:	2205      	movs	r2, #5
10015c60:	4841      	ldr	r0, [pc, #260]	; (10015d68 <_vfiprintf_r+0x230>)
10015c62:	f000 faf5 	bl	10016250 <memchr>
10015c66:	2800      	cmp	r0, #0
10015c68:	d008      	beq.n	10015c7c <_vfiprintf_r+0x144>
10015c6a:	4b3f      	ldr	r3, [pc, #252]	; (10015d68 <_vfiprintf_r+0x230>)
10015c6c:	682a      	ldr	r2, [r5, #0]
10015c6e:	1ac0      	subs	r0, r0, r3
10015c70:	2301      	movs	r3, #1
10015c72:	4083      	lsls	r3, r0
10015c74:	4313      	orrs	r3, r2
10015c76:	602b      	str	r3, [r5, #0]
10015c78:	3401      	adds	r4, #1
10015c7a:	e7ef      	b.n	10015c5c <_vfiprintf_r+0x124>
10015c7c:	682b      	ldr	r3, [r5, #0]
10015c7e:	06da      	lsls	r2, r3, #27
10015c80:	d504      	bpl.n	10015c8c <_vfiprintf_r+0x154>
10015c82:	2253      	movs	r2, #83	; 0x53
10015c84:	2120      	movs	r1, #32
10015c86:	a802      	add	r0, sp, #8
10015c88:	1812      	adds	r2, r2, r0
10015c8a:	7011      	strb	r1, [r2, #0]
10015c8c:	071a      	lsls	r2, r3, #28
10015c8e:	d504      	bpl.n	10015c9a <_vfiprintf_r+0x162>
10015c90:	2253      	movs	r2, #83	; 0x53
10015c92:	212b      	movs	r1, #43	; 0x2b
10015c94:	a802      	add	r0, sp, #8
10015c96:	1812      	adds	r2, r2, r0
10015c98:	7011      	strb	r1, [r2, #0]
10015c9a:	7822      	ldrb	r2, [r4, #0]
10015c9c:	2a2a      	cmp	r2, #42	; 0x2a
10015c9e:	d100      	bne.n	10015ca2 <_vfiprintf_r+0x16a>
10015ca0:	e77c      	b.n	10015b9c <_vfiprintf_r+0x64>
10015ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015ca4:	2000      	movs	r0, #0
10015ca6:	210a      	movs	r1, #10
10015ca8:	e005      	b.n	10015cb6 <_vfiprintf_r+0x17e>
10015caa:	4252      	negs	r2, r2
10015cac:	60ea      	str	r2, [r5, #12]
10015cae:	2202      	movs	r2, #2
10015cb0:	4313      	orrs	r3, r2
10015cb2:	602b      	str	r3, [r5, #0]
10015cb4:	e77a      	b.n	10015bac <_vfiprintf_r+0x74>
10015cb6:	7822      	ldrb	r2, [r4, #0]
10015cb8:	3a30      	subs	r2, #48	; 0x30
10015cba:	2a09      	cmp	r2, #9
10015cbc:	d804      	bhi.n	10015cc8 <_vfiprintf_r+0x190>
10015cbe:	434b      	muls	r3, r1
10015cc0:	3401      	adds	r4, #1
10015cc2:	189b      	adds	r3, r3, r2
10015cc4:	2001      	movs	r0, #1
10015cc6:	e7f6      	b.n	10015cb6 <_vfiprintf_r+0x17e>
10015cc8:	2800      	cmp	r0, #0
10015cca:	d100      	bne.n	10015cce <_vfiprintf_r+0x196>
10015ccc:	e76f      	b.n	10015bae <_vfiprintf_r+0x76>
10015cce:	9309      	str	r3, [sp, #36]	; 0x24
10015cd0:	e76d      	b.n	10015bae <_vfiprintf_r+0x76>
10015cd2:	7863      	ldrb	r3, [r4, #1]
10015cd4:	2b2a      	cmp	r3, #42	; 0x2a
10015cd6:	d10a      	bne.n	10015cee <_vfiprintf_r+0x1b6>
10015cd8:	9b05      	ldr	r3, [sp, #20]
10015cda:	3402      	adds	r4, #2
10015cdc:	1d1a      	adds	r2, r3, #4
10015cde:	681b      	ldr	r3, [r3, #0]
10015ce0:	9205      	str	r2, [sp, #20]
10015ce2:	2b00      	cmp	r3, #0
10015ce4:	da01      	bge.n	10015cea <_vfiprintf_r+0x1b2>
10015ce6:	2301      	movs	r3, #1
10015ce8:	425b      	negs	r3, r3
10015cea:	9307      	str	r3, [sp, #28]
10015cec:	e763      	b.n	10015bb6 <_vfiprintf_r+0x7e>
10015cee:	2300      	movs	r3, #0
10015cf0:	200a      	movs	r0, #10
10015cf2:	001a      	movs	r2, r3
10015cf4:	3401      	adds	r4, #1
10015cf6:	606b      	str	r3, [r5, #4]
10015cf8:	7821      	ldrb	r1, [r4, #0]
10015cfa:	3930      	subs	r1, #48	; 0x30
10015cfc:	2909      	cmp	r1, #9
10015cfe:	d804      	bhi.n	10015d0a <_vfiprintf_r+0x1d2>
10015d00:	4342      	muls	r2, r0
10015d02:	3401      	adds	r4, #1
10015d04:	1852      	adds	r2, r2, r1
10015d06:	2301      	movs	r3, #1
10015d08:	e7f6      	b.n	10015cf8 <_vfiprintf_r+0x1c0>
10015d0a:	2b00      	cmp	r3, #0
10015d0c:	d100      	bne.n	10015d10 <_vfiprintf_r+0x1d8>
10015d0e:	e752      	b.n	10015bb6 <_vfiprintf_r+0x7e>
10015d10:	9207      	str	r2, [sp, #28]
10015d12:	e750      	b.n	10015bb6 <_vfiprintf_r+0x7e>
10015d14:	ab05      	add	r3, sp, #20
10015d16:	9300      	str	r3, [sp, #0]
10015d18:	003a      	movs	r2, r7
10015d1a:	4b14      	ldr	r3, [pc, #80]	; (10015d6c <_vfiprintf_r+0x234>)
10015d1c:	0029      	movs	r1, r5
10015d1e:	0030      	movs	r0, r6
10015d20:	e000      	b.n	10015d24 <_vfiprintf_r+0x1ec>
10015d22:	bf00      	nop
10015d24:	e007      	b.n	10015d36 <_vfiprintf_r+0x1fe>
10015d26:	ab05      	add	r3, sp, #20
10015d28:	9300      	str	r3, [sp, #0]
10015d2a:	003a      	movs	r2, r7
10015d2c:	4b0f      	ldr	r3, [pc, #60]	; (10015d6c <_vfiprintf_r+0x234>)
10015d2e:	0029      	movs	r1, r5
10015d30:	0030      	movs	r0, r6
10015d32:	f000 f88b 	bl	10015e4c <_printf_i>
10015d36:	9003      	str	r0, [sp, #12]
10015d38:	9b03      	ldr	r3, [sp, #12]
10015d3a:	3301      	adds	r3, #1
10015d3c:	d000      	beq.n	10015d40 <_vfiprintf_r+0x208>
10015d3e:	e75e      	b.n	10015bfe <_vfiprintf_r+0xc6>
10015d40:	89bb      	ldrh	r3, [r7, #12]
10015d42:	065b      	lsls	r3, r3, #25
10015d44:	d500      	bpl.n	10015d48 <_vfiprintf_r+0x210>
10015d46:	e726      	b.n	10015b96 <_vfiprintf_r+0x5e>
10015d48:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015d4a:	b01f      	add	sp, #124	; 0x7c
10015d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015d4e:	46c0      	nop			; (mov r8, r8)
10015d50:	10018388 	.word	0x10018388
10015d54:	100183a8 	.word	0x100183a8
10015d58:	100183c8 	.word	0x100183c8
10015d5c:	100183ee 	.word	0x100183ee
10015d60:	100183f2 	.word	0x100183f2
10015d64:	00000000 	.word	0x00000000
10015d68:	100183e8 	.word	0x100183e8
10015d6c:	10015b13 	.word	0x10015b13

10015d70 <_printf_common>:
10015d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015d72:	0017      	movs	r7, r2
10015d74:	9301      	str	r3, [sp, #4]
10015d76:	688a      	ldr	r2, [r1, #8]
10015d78:	690b      	ldr	r3, [r1, #16]
10015d7a:	9000      	str	r0, [sp, #0]
10015d7c:	000c      	movs	r4, r1
10015d7e:	4293      	cmp	r3, r2
10015d80:	da00      	bge.n	10015d84 <_printf_common+0x14>
10015d82:	0013      	movs	r3, r2
10015d84:	0022      	movs	r2, r4
10015d86:	603b      	str	r3, [r7, #0]
10015d88:	3243      	adds	r2, #67	; 0x43
10015d8a:	7812      	ldrb	r2, [r2, #0]
10015d8c:	2a00      	cmp	r2, #0
10015d8e:	d001      	beq.n	10015d94 <_printf_common+0x24>
10015d90:	3301      	adds	r3, #1
10015d92:	603b      	str	r3, [r7, #0]
10015d94:	6823      	ldr	r3, [r4, #0]
10015d96:	069b      	lsls	r3, r3, #26
10015d98:	d502      	bpl.n	10015da0 <_printf_common+0x30>
10015d9a:	683b      	ldr	r3, [r7, #0]
10015d9c:	3302      	adds	r3, #2
10015d9e:	603b      	str	r3, [r7, #0]
10015da0:	2506      	movs	r5, #6
10015da2:	6823      	ldr	r3, [r4, #0]
10015da4:	401d      	ands	r5, r3
10015da6:	d01e      	beq.n	10015de6 <_printf_common+0x76>
10015da8:	0023      	movs	r3, r4
10015daa:	3343      	adds	r3, #67	; 0x43
10015dac:	781b      	ldrb	r3, [r3, #0]
10015dae:	1e5a      	subs	r2, r3, #1
10015db0:	4193      	sbcs	r3, r2
10015db2:	6822      	ldr	r2, [r4, #0]
10015db4:	0692      	lsls	r2, r2, #26
10015db6:	d51c      	bpl.n	10015df2 <_printf_common+0x82>
10015db8:	2030      	movs	r0, #48	; 0x30
10015dba:	18e1      	adds	r1, r4, r3
10015dbc:	3143      	adds	r1, #67	; 0x43
10015dbe:	7008      	strb	r0, [r1, #0]
10015dc0:	0021      	movs	r1, r4
10015dc2:	1c5a      	adds	r2, r3, #1
10015dc4:	3145      	adds	r1, #69	; 0x45
10015dc6:	7809      	ldrb	r1, [r1, #0]
10015dc8:	18a2      	adds	r2, r4, r2
10015dca:	3243      	adds	r2, #67	; 0x43
10015dcc:	3302      	adds	r3, #2
10015dce:	7011      	strb	r1, [r2, #0]
10015dd0:	e00f      	b.n	10015df2 <_printf_common+0x82>
10015dd2:	0022      	movs	r2, r4
10015dd4:	2301      	movs	r3, #1
10015dd6:	3219      	adds	r2, #25
10015dd8:	9901      	ldr	r1, [sp, #4]
10015dda:	9800      	ldr	r0, [sp, #0]
10015ddc:	9e08      	ldr	r6, [sp, #32]
10015dde:	47b0      	blx	r6
10015de0:	1c43      	adds	r3, r0, #1
10015de2:	d00e      	beq.n	10015e02 <_printf_common+0x92>
10015de4:	3501      	adds	r5, #1
10015de6:	68e3      	ldr	r3, [r4, #12]
10015de8:	683a      	ldr	r2, [r7, #0]
10015dea:	1a9b      	subs	r3, r3, r2
10015dec:	429d      	cmp	r5, r3
10015dee:	dbf0      	blt.n	10015dd2 <_printf_common+0x62>
10015df0:	e7da      	b.n	10015da8 <_printf_common+0x38>
10015df2:	0022      	movs	r2, r4
10015df4:	9901      	ldr	r1, [sp, #4]
10015df6:	3243      	adds	r2, #67	; 0x43
10015df8:	9800      	ldr	r0, [sp, #0]
10015dfa:	9d08      	ldr	r5, [sp, #32]
10015dfc:	47a8      	blx	r5
10015dfe:	1c43      	adds	r3, r0, #1
10015e00:	d102      	bne.n	10015e08 <_printf_common+0x98>
10015e02:	2001      	movs	r0, #1
10015e04:	4240      	negs	r0, r0
10015e06:	e020      	b.n	10015e4a <_printf_common+0xda>
10015e08:	2306      	movs	r3, #6
10015e0a:	6820      	ldr	r0, [r4, #0]
10015e0c:	68e1      	ldr	r1, [r4, #12]
10015e0e:	683a      	ldr	r2, [r7, #0]
10015e10:	4003      	ands	r3, r0
10015e12:	2500      	movs	r5, #0
10015e14:	2b04      	cmp	r3, #4
10015e16:	d103      	bne.n	10015e20 <_printf_common+0xb0>
10015e18:	1a8d      	subs	r5, r1, r2
10015e1a:	43eb      	mvns	r3, r5
10015e1c:	17db      	asrs	r3, r3, #31
10015e1e:	401d      	ands	r5, r3
10015e20:	68a3      	ldr	r3, [r4, #8]
10015e22:	6922      	ldr	r2, [r4, #16]
10015e24:	4293      	cmp	r3, r2
10015e26:	dd01      	ble.n	10015e2c <_printf_common+0xbc>
10015e28:	1a9b      	subs	r3, r3, r2
10015e2a:	18ed      	adds	r5, r5, r3
10015e2c:	2700      	movs	r7, #0
10015e2e:	42bd      	cmp	r5, r7
10015e30:	d00a      	beq.n	10015e48 <_printf_common+0xd8>
10015e32:	0022      	movs	r2, r4
10015e34:	2301      	movs	r3, #1
10015e36:	321a      	adds	r2, #26
10015e38:	9901      	ldr	r1, [sp, #4]
10015e3a:	9800      	ldr	r0, [sp, #0]
10015e3c:	9e08      	ldr	r6, [sp, #32]
10015e3e:	47b0      	blx	r6
10015e40:	1c43      	adds	r3, r0, #1
10015e42:	d0de      	beq.n	10015e02 <_printf_common+0x92>
10015e44:	3701      	adds	r7, #1
10015e46:	e7f2      	b.n	10015e2e <_printf_common+0xbe>
10015e48:	2000      	movs	r0, #0
10015e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015e4c <_printf_i>:
10015e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10015e4e:	b08b      	sub	sp, #44	; 0x2c
10015e50:	9206      	str	r2, [sp, #24]
10015e52:	000a      	movs	r2, r1
10015e54:	3243      	adds	r2, #67	; 0x43
10015e56:	9307      	str	r3, [sp, #28]
10015e58:	9005      	str	r0, [sp, #20]
10015e5a:	9204      	str	r2, [sp, #16]
10015e5c:	7e0a      	ldrb	r2, [r1, #24]
10015e5e:	000c      	movs	r4, r1
10015e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015e62:	2a6e      	cmp	r2, #110	; 0x6e
10015e64:	d100      	bne.n	10015e68 <_printf_i+0x1c>
10015e66:	e0ab      	b.n	10015fc0 <_printf_i+0x174>
10015e68:	d811      	bhi.n	10015e8e <_printf_i+0x42>
10015e6a:	2a63      	cmp	r2, #99	; 0x63
10015e6c:	d022      	beq.n	10015eb4 <_printf_i+0x68>
10015e6e:	d809      	bhi.n	10015e84 <_printf_i+0x38>
10015e70:	2a00      	cmp	r2, #0
10015e72:	d100      	bne.n	10015e76 <_printf_i+0x2a>
10015e74:	e0b5      	b.n	10015fe2 <_printf_i+0x196>
10015e76:	2a58      	cmp	r2, #88	; 0x58
10015e78:	d000      	beq.n	10015e7c <_printf_i+0x30>
10015e7a:	e0c5      	b.n	10016008 <_printf_i+0x1bc>
10015e7c:	3145      	adds	r1, #69	; 0x45
10015e7e:	700a      	strb	r2, [r1, #0]
10015e80:	4a81      	ldr	r2, [pc, #516]	; (10016088 <_printf_i+0x23c>)
10015e82:	e04f      	b.n	10015f24 <_printf_i+0xd8>
10015e84:	2a64      	cmp	r2, #100	; 0x64
10015e86:	d01d      	beq.n	10015ec4 <_printf_i+0x78>
10015e88:	2a69      	cmp	r2, #105	; 0x69
10015e8a:	d01b      	beq.n	10015ec4 <_printf_i+0x78>
10015e8c:	e0bc      	b.n	10016008 <_printf_i+0x1bc>
10015e8e:	2a73      	cmp	r2, #115	; 0x73
10015e90:	d100      	bne.n	10015e94 <_printf_i+0x48>
10015e92:	e0aa      	b.n	10015fea <_printf_i+0x19e>
10015e94:	d809      	bhi.n	10015eaa <_printf_i+0x5e>
10015e96:	2a6f      	cmp	r2, #111	; 0x6f
10015e98:	d029      	beq.n	10015eee <_printf_i+0xa2>
10015e9a:	2a70      	cmp	r2, #112	; 0x70
10015e9c:	d000      	beq.n	10015ea0 <_printf_i+0x54>
10015e9e:	e0b3      	b.n	10016008 <_printf_i+0x1bc>
10015ea0:	2220      	movs	r2, #32
10015ea2:	6809      	ldr	r1, [r1, #0]
10015ea4:	430a      	orrs	r2, r1
10015ea6:	6022      	str	r2, [r4, #0]
10015ea8:	e037      	b.n	10015f1a <_printf_i+0xce>
10015eaa:	2a75      	cmp	r2, #117	; 0x75
10015eac:	d01f      	beq.n	10015eee <_printf_i+0xa2>
10015eae:	2a78      	cmp	r2, #120	; 0x78
10015eb0:	d033      	beq.n	10015f1a <_printf_i+0xce>
10015eb2:	e0a9      	b.n	10016008 <_printf_i+0x1bc>
10015eb4:	000e      	movs	r6, r1
10015eb6:	681a      	ldr	r2, [r3, #0]
10015eb8:	3642      	adds	r6, #66	; 0x42
10015eba:	1d11      	adds	r1, r2, #4
10015ebc:	6019      	str	r1, [r3, #0]
10015ebe:	6813      	ldr	r3, [r2, #0]
10015ec0:	7033      	strb	r3, [r6, #0]
10015ec2:	e0a4      	b.n	1001600e <_printf_i+0x1c2>
10015ec4:	6821      	ldr	r1, [r4, #0]
10015ec6:	681a      	ldr	r2, [r3, #0]
10015ec8:	0608      	lsls	r0, r1, #24
10015eca:	d406      	bmi.n	10015eda <_printf_i+0x8e>
10015ecc:	0649      	lsls	r1, r1, #25
10015ece:	d504      	bpl.n	10015eda <_printf_i+0x8e>
10015ed0:	1d11      	adds	r1, r2, #4
10015ed2:	6019      	str	r1, [r3, #0]
10015ed4:	2300      	movs	r3, #0
10015ed6:	5ed5      	ldrsh	r5, [r2, r3]
10015ed8:	e002      	b.n	10015ee0 <_printf_i+0x94>
10015eda:	1d11      	adds	r1, r2, #4
10015edc:	6019      	str	r1, [r3, #0]
10015ede:	6815      	ldr	r5, [r2, #0]
10015ee0:	2d00      	cmp	r5, #0
10015ee2:	da3b      	bge.n	10015f5c <_printf_i+0x110>
10015ee4:	232d      	movs	r3, #45	; 0x2d
10015ee6:	9a04      	ldr	r2, [sp, #16]
10015ee8:	426d      	negs	r5, r5
10015eea:	7013      	strb	r3, [r2, #0]
10015eec:	e036      	b.n	10015f5c <_printf_i+0x110>
10015eee:	6821      	ldr	r1, [r4, #0]
10015ef0:	681a      	ldr	r2, [r3, #0]
10015ef2:	0608      	lsls	r0, r1, #24
10015ef4:	d406      	bmi.n	10015f04 <_printf_i+0xb8>
10015ef6:	0649      	lsls	r1, r1, #25
10015ef8:	d504      	bpl.n	10015f04 <_printf_i+0xb8>
10015efa:	6815      	ldr	r5, [r2, #0]
10015efc:	1d11      	adds	r1, r2, #4
10015efe:	6019      	str	r1, [r3, #0]
10015f00:	b2ad      	uxth	r5, r5
10015f02:	e002      	b.n	10015f0a <_printf_i+0xbe>
10015f04:	1d11      	adds	r1, r2, #4
10015f06:	6019      	str	r1, [r3, #0]
10015f08:	6815      	ldr	r5, [r2, #0]
10015f0a:	4b5f      	ldr	r3, [pc, #380]	; (10016088 <_printf_i+0x23c>)
10015f0c:	7e22      	ldrb	r2, [r4, #24]
10015f0e:	9303      	str	r3, [sp, #12]
10015f10:	2708      	movs	r7, #8
10015f12:	2a6f      	cmp	r2, #111	; 0x6f
10015f14:	d01d      	beq.n	10015f52 <_printf_i+0x106>
10015f16:	270a      	movs	r7, #10
10015f18:	e01b      	b.n	10015f52 <_printf_i+0x106>
10015f1a:	0022      	movs	r2, r4
10015f1c:	2178      	movs	r1, #120	; 0x78
10015f1e:	3245      	adds	r2, #69	; 0x45
10015f20:	7011      	strb	r1, [r2, #0]
10015f22:	4a5a      	ldr	r2, [pc, #360]	; (1001608c <_printf_i+0x240>)
10015f24:	6819      	ldr	r1, [r3, #0]
10015f26:	9203      	str	r2, [sp, #12]
10015f28:	1d08      	adds	r0, r1, #4
10015f2a:	6822      	ldr	r2, [r4, #0]
10015f2c:	6018      	str	r0, [r3, #0]
10015f2e:	680d      	ldr	r5, [r1, #0]
10015f30:	0610      	lsls	r0, r2, #24
10015f32:	d402      	bmi.n	10015f3a <_printf_i+0xee>
10015f34:	0650      	lsls	r0, r2, #25
10015f36:	d500      	bpl.n	10015f3a <_printf_i+0xee>
10015f38:	b2ad      	uxth	r5, r5
10015f3a:	07d3      	lsls	r3, r2, #31
10015f3c:	d502      	bpl.n	10015f44 <_printf_i+0xf8>
10015f3e:	2320      	movs	r3, #32
10015f40:	431a      	orrs	r2, r3
10015f42:	6022      	str	r2, [r4, #0]
10015f44:	2710      	movs	r7, #16
10015f46:	2d00      	cmp	r5, #0
10015f48:	d103      	bne.n	10015f52 <_printf_i+0x106>
10015f4a:	2320      	movs	r3, #32
10015f4c:	6822      	ldr	r2, [r4, #0]
10015f4e:	439a      	bics	r2, r3
10015f50:	6022      	str	r2, [r4, #0]
10015f52:	0023      	movs	r3, r4
10015f54:	2200      	movs	r2, #0
10015f56:	3343      	adds	r3, #67	; 0x43
10015f58:	701a      	strb	r2, [r3, #0]
10015f5a:	e002      	b.n	10015f62 <_printf_i+0x116>
10015f5c:	270a      	movs	r7, #10
10015f5e:	4b4a      	ldr	r3, [pc, #296]	; (10016088 <_printf_i+0x23c>)
10015f60:	9303      	str	r3, [sp, #12]
10015f62:	6863      	ldr	r3, [r4, #4]
10015f64:	60a3      	str	r3, [r4, #8]
10015f66:	2b00      	cmp	r3, #0
10015f68:	db09      	blt.n	10015f7e <_printf_i+0x132>
10015f6a:	2204      	movs	r2, #4
10015f6c:	6821      	ldr	r1, [r4, #0]
10015f6e:	4391      	bics	r1, r2
10015f70:	6021      	str	r1, [r4, #0]
10015f72:	2d00      	cmp	r5, #0
10015f74:	d105      	bne.n	10015f82 <_printf_i+0x136>
10015f76:	9e04      	ldr	r6, [sp, #16]
10015f78:	2b00      	cmp	r3, #0
10015f7a:	d011      	beq.n	10015fa0 <_printf_i+0x154>
10015f7c:	e07b      	b.n	10016076 <_printf_i+0x22a>
10015f7e:	2d00      	cmp	r5, #0
10015f80:	d079      	beq.n	10016076 <_printf_i+0x22a>
10015f82:	9e04      	ldr	r6, [sp, #16]
10015f84:	0028      	movs	r0, r5
10015f86:	0039      	movs	r1, r7
10015f88:	f7fd f8b2 	bl	100130f0 <__aeabi_uidivmod>
10015f8c:	9b03      	ldr	r3, [sp, #12]
10015f8e:	3e01      	subs	r6, #1
10015f90:	5c5b      	ldrb	r3, [r3, r1]
10015f92:	0028      	movs	r0, r5
10015f94:	7033      	strb	r3, [r6, #0]
10015f96:	0039      	movs	r1, r7
10015f98:	f7fd f824 	bl	10012fe4 <__aeabi_uidiv>
10015f9c:	1e05      	subs	r5, r0, #0
10015f9e:	d1f1      	bne.n	10015f84 <_printf_i+0x138>
10015fa0:	2f08      	cmp	r7, #8
10015fa2:	d109      	bne.n	10015fb8 <_printf_i+0x16c>
10015fa4:	6823      	ldr	r3, [r4, #0]
10015fa6:	07db      	lsls	r3, r3, #31
10015fa8:	d506      	bpl.n	10015fb8 <_printf_i+0x16c>
10015faa:	6863      	ldr	r3, [r4, #4]
10015fac:	6922      	ldr	r2, [r4, #16]
10015fae:	4293      	cmp	r3, r2
10015fb0:	dc02      	bgt.n	10015fb8 <_printf_i+0x16c>
10015fb2:	2330      	movs	r3, #48	; 0x30
10015fb4:	3e01      	subs	r6, #1
10015fb6:	7033      	strb	r3, [r6, #0]
10015fb8:	9b04      	ldr	r3, [sp, #16]
10015fba:	1b9b      	subs	r3, r3, r6
10015fbc:	6123      	str	r3, [r4, #16]
10015fbe:	e02b      	b.n	10016018 <_printf_i+0x1cc>
10015fc0:	6809      	ldr	r1, [r1, #0]
10015fc2:	681a      	ldr	r2, [r3, #0]
10015fc4:	0608      	lsls	r0, r1, #24
10015fc6:	d407      	bmi.n	10015fd8 <_printf_i+0x18c>
10015fc8:	0649      	lsls	r1, r1, #25
10015fca:	d505      	bpl.n	10015fd8 <_printf_i+0x18c>
10015fcc:	1d11      	adds	r1, r2, #4
10015fce:	6019      	str	r1, [r3, #0]
10015fd0:	6813      	ldr	r3, [r2, #0]
10015fd2:	8aa2      	ldrh	r2, [r4, #20]
10015fd4:	801a      	strh	r2, [r3, #0]
10015fd6:	e004      	b.n	10015fe2 <_printf_i+0x196>
10015fd8:	1d11      	adds	r1, r2, #4
10015fda:	6019      	str	r1, [r3, #0]
10015fdc:	6813      	ldr	r3, [r2, #0]
10015fde:	6962      	ldr	r2, [r4, #20]
10015fe0:	601a      	str	r2, [r3, #0]
10015fe2:	2300      	movs	r3, #0
10015fe4:	9e04      	ldr	r6, [sp, #16]
10015fe6:	6123      	str	r3, [r4, #16]
10015fe8:	e016      	b.n	10016018 <_printf_i+0x1cc>
10015fea:	681a      	ldr	r2, [r3, #0]
10015fec:	1d11      	adds	r1, r2, #4
10015fee:	6019      	str	r1, [r3, #0]
10015ff0:	6816      	ldr	r6, [r2, #0]
10015ff2:	2100      	movs	r1, #0
10015ff4:	6862      	ldr	r2, [r4, #4]
10015ff6:	0030      	movs	r0, r6
10015ff8:	f000 f92a 	bl	10016250 <memchr>
10015ffc:	2800      	cmp	r0, #0
10015ffe:	d001      	beq.n	10016004 <_printf_i+0x1b8>
10016000:	1b80      	subs	r0, r0, r6
10016002:	6060      	str	r0, [r4, #4]
10016004:	6863      	ldr	r3, [r4, #4]
10016006:	e003      	b.n	10016010 <_printf_i+0x1c4>
10016008:	0026      	movs	r6, r4
1001600a:	3642      	adds	r6, #66	; 0x42
1001600c:	7032      	strb	r2, [r6, #0]
1001600e:	2301      	movs	r3, #1
10016010:	6123      	str	r3, [r4, #16]
10016012:	2300      	movs	r3, #0
10016014:	9a04      	ldr	r2, [sp, #16]
10016016:	7013      	strb	r3, [r2, #0]
10016018:	9b07      	ldr	r3, [sp, #28]
1001601a:	aa09      	add	r2, sp, #36	; 0x24
1001601c:	9300      	str	r3, [sp, #0]
1001601e:	0021      	movs	r1, r4
10016020:	9b06      	ldr	r3, [sp, #24]
10016022:	9805      	ldr	r0, [sp, #20]
10016024:	f7ff fea4 	bl	10015d70 <_printf_common>
10016028:	1c43      	adds	r3, r0, #1
1001602a:	d102      	bne.n	10016032 <_printf_i+0x1e6>
1001602c:	2001      	movs	r0, #1
1001602e:	4240      	negs	r0, r0
10016030:	e027      	b.n	10016082 <_printf_i+0x236>
10016032:	6923      	ldr	r3, [r4, #16]
10016034:	0032      	movs	r2, r6
10016036:	9906      	ldr	r1, [sp, #24]
10016038:	9805      	ldr	r0, [sp, #20]
1001603a:	9d07      	ldr	r5, [sp, #28]
1001603c:	47a8      	blx	r5
1001603e:	1c43      	adds	r3, r0, #1
10016040:	d0f4      	beq.n	1001602c <_printf_i+0x1e0>
10016042:	6823      	ldr	r3, [r4, #0]
10016044:	2500      	movs	r5, #0
10016046:	079b      	lsls	r3, r3, #30
10016048:	d40f      	bmi.n	1001606a <_printf_i+0x21e>
1001604a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001604c:	68e0      	ldr	r0, [r4, #12]
1001604e:	4298      	cmp	r0, r3
10016050:	da17      	bge.n	10016082 <_printf_i+0x236>
10016052:	0018      	movs	r0, r3
10016054:	e015      	b.n	10016082 <_printf_i+0x236>
10016056:	0022      	movs	r2, r4
10016058:	2301      	movs	r3, #1
1001605a:	3219      	adds	r2, #25
1001605c:	9906      	ldr	r1, [sp, #24]
1001605e:	9805      	ldr	r0, [sp, #20]
10016060:	9e07      	ldr	r6, [sp, #28]
10016062:	47b0      	blx	r6
10016064:	1c43      	adds	r3, r0, #1
10016066:	d0e1      	beq.n	1001602c <_printf_i+0x1e0>
10016068:	3501      	adds	r5, #1
1001606a:	68e3      	ldr	r3, [r4, #12]
1001606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001606e:	1a9b      	subs	r3, r3, r2
10016070:	429d      	cmp	r5, r3
10016072:	dbf0      	blt.n	10016056 <_printf_i+0x20a>
10016074:	e7e9      	b.n	1001604a <_printf_i+0x1fe>
10016076:	0026      	movs	r6, r4
10016078:	9b03      	ldr	r3, [sp, #12]
1001607a:	3642      	adds	r6, #66	; 0x42
1001607c:	781b      	ldrb	r3, [r3, #0]
1001607e:	7033      	strb	r3, [r6, #0]
10016080:	e78e      	b.n	10015fa0 <_printf_i+0x154>
10016082:	b00b      	add	sp, #44	; 0x2c
10016084:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016086:	46c0      	nop			; (mov r8, r8)
10016088:	100183f9 	.word	0x100183f9
1001608c:	1001840a 	.word	0x1001840a

10016090 <_putc_r>:
10016090:	b570      	push	{r4, r5, r6, lr}
10016092:	0006      	movs	r6, r0
10016094:	000d      	movs	r5, r1
10016096:	0014      	movs	r4, r2
10016098:	2800      	cmp	r0, #0
1001609a:	d004      	beq.n	100160a6 <_putc_r+0x16>
1001609c:	6983      	ldr	r3, [r0, #24]
1001609e:	2b00      	cmp	r3, #0
100160a0:	d101      	bne.n	100160a6 <_putc_r+0x16>
100160a2:	f7ff fc29 	bl	100158f8 <__sinit>
100160a6:	4b12      	ldr	r3, [pc, #72]	; (100160f0 <_putc_r+0x60>)
100160a8:	429c      	cmp	r4, r3
100160aa:	d101      	bne.n	100160b0 <_putc_r+0x20>
100160ac:	6874      	ldr	r4, [r6, #4]
100160ae:	e008      	b.n	100160c2 <_putc_r+0x32>
100160b0:	4b10      	ldr	r3, [pc, #64]	; (100160f4 <_putc_r+0x64>)
100160b2:	429c      	cmp	r4, r3
100160b4:	d101      	bne.n	100160ba <_putc_r+0x2a>
100160b6:	68b4      	ldr	r4, [r6, #8]
100160b8:	e003      	b.n	100160c2 <_putc_r+0x32>
100160ba:	4b0f      	ldr	r3, [pc, #60]	; (100160f8 <_putc_r+0x68>)
100160bc:	429c      	cmp	r4, r3
100160be:	d100      	bne.n	100160c2 <_putc_r+0x32>
100160c0:	68f4      	ldr	r4, [r6, #12]
100160c2:	68a3      	ldr	r3, [r4, #8]
100160c4:	3b01      	subs	r3, #1
100160c6:	60a3      	str	r3, [r4, #8]
100160c8:	2b00      	cmp	r3, #0
100160ca:	da05      	bge.n	100160d8 <_putc_r+0x48>
100160cc:	69a2      	ldr	r2, [r4, #24]
100160ce:	4293      	cmp	r3, r2
100160d0:	db08      	blt.n	100160e4 <_putc_r+0x54>
100160d2:	b2eb      	uxtb	r3, r5
100160d4:	2b0a      	cmp	r3, #10
100160d6:	d005      	beq.n	100160e4 <_putc_r+0x54>
100160d8:	6823      	ldr	r3, [r4, #0]
100160da:	b2e8      	uxtb	r0, r5
100160dc:	1c5a      	adds	r2, r3, #1
100160de:	6022      	str	r2, [r4, #0]
100160e0:	701d      	strb	r5, [r3, #0]
100160e2:	e004      	b.n	100160ee <_putc_r+0x5e>
100160e4:	0022      	movs	r2, r4
100160e6:	0029      	movs	r1, r5
100160e8:	0030      	movs	r0, r6
100160ea:	f7ff fa43 	bl	10015574 <__swbuf_r>
100160ee:	bd70      	pop	{r4, r5, r6, pc}
100160f0:	10018388 	.word	0x10018388
100160f4:	100183a8 	.word	0x100183a8
100160f8:	100183c8 	.word	0x100183c8

100160fc <__sread>:
100160fc:	b570      	push	{r4, r5, r6, lr}
100160fe:	000c      	movs	r4, r1
10016100:	250e      	movs	r5, #14
10016102:	5f49      	ldrsh	r1, [r1, r5]
10016104:	f000 f8b0 	bl	10016268 <_read_r>
10016108:	2800      	cmp	r0, #0
1001610a:	db03      	blt.n	10016114 <__sread+0x18>
1001610c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001610e:	181b      	adds	r3, r3, r0
10016110:	6563      	str	r3, [r4, #84]	; 0x54
10016112:	e003      	b.n	1001611c <__sread+0x20>
10016114:	89a2      	ldrh	r2, [r4, #12]
10016116:	4b02      	ldr	r3, [pc, #8]	; (10016120 <__sread+0x24>)
10016118:	4013      	ands	r3, r2
1001611a:	81a3      	strh	r3, [r4, #12]
1001611c:	bd70      	pop	{r4, r5, r6, pc}
1001611e:	46c0      	nop			; (mov r8, r8)
10016120:	ffffefff 	.word	0xffffefff

10016124 <__swrite>:
10016124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016126:	001f      	movs	r7, r3
10016128:	898b      	ldrh	r3, [r1, #12]
1001612a:	0005      	movs	r5, r0
1001612c:	000c      	movs	r4, r1
1001612e:	0016      	movs	r6, r2
10016130:	05db      	lsls	r3, r3, #23
10016132:	d505      	bpl.n	10016140 <__swrite+0x1c>
10016134:	230e      	movs	r3, #14
10016136:	5ec9      	ldrsh	r1, [r1, r3]
10016138:	2200      	movs	r2, #0
1001613a:	2302      	movs	r3, #2
1001613c:	f000 f874 	bl	10016228 <_lseek_r>
10016140:	89a2      	ldrh	r2, [r4, #12]
10016142:	4b05      	ldr	r3, [pc, #20]	; (10016158 <__swrite+0x34>)
10016144:	0028      	movs	r0, r5
10016146:	4013      	ands	r3, r2
10016148:	81a3      	strh	r3, [r4, #12]
1001614a:	0032      	movs	r2, r6
1001614c:	230e      	movs	r3, #14
1001614e:	5ee1      	ldrsh	r1, [r4, r3]
10016150:	003b      	movs	r3, r7
10016152:	f000 f81f 	bl	10016194 <_write_r>
10016156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016158:	ffffefff 	.word	0xffffefff

1001615c <__sseek>:
1001615c:	b570      	push	{r4, r5, r6, lr}
1001615e:	000c      	movs	r4, r1
10016160:	250e      	movs	r5, #14
10016162:	5f49      	ldrsh	r1, [r1, r5]
10016164:	f000 f860 	bl	10016228 <_lseek_r>
10016168:	89a3      	ldrh	r3, [r4, #12]
1001616a:	1c42      	adds	r2, r0, #1
1001616c:	d103      	bne.n	10016176 <__sseek+0x1a>
1001616e:	4a05      	ldr	r2, [pc, #20]	; (10016184 <__sseek+0x28>)
10016170:	4013      	ands	r3, r2
10016172:	81a3      	strh	r3, [r4, #12]
10016174:	e004      	b.n	10016180 <__sseek+0x24>
10016176:	2280      	movs	r2, #128	; 0x80
10016178:	0152      	lsls	r2, r2, #5
1001617a:	4313      	orrs	r3, r2
1001617c:	81a3      	strh	r3, [r4, #12]
1001617e:	6560      	str	r0, [r4, #84]	; 0x54
10016180:	bd70      	pop	{r4, r5, r6, pc}
10016182:	46c0      	nop			; (mov r8, r8)
10016184:	ffffefff 	.word	0xffffefff

10016188 <__sclose>:
10016188:	b510      	push	{r4, lr}
1001618a:	230e      	movs	r3, #14
1001618c:	5ec9      	ldrsh	r1, [r1, r3]
1001618e:	f000 f815 	bl	100161bc <_close_r>
10016192:	bd10      	pop	{r4, pc}

10016194 <_write_r>:
10016194:	b570      	push	{r4, r5, r6, lr}
10016196:	0005      	movs	r5, r0
10016198:	0008      	movs	r0, r1
1001619a:	0011      	movs	r1, r2
1001619c:	2200      	movs	r2, #0
1001619e:	4c06      	ldr	r4, [pc, #24]	; (100161b8 <_write_r+0x24>)
100161a0:	6022      	str	r2, [r4, #0]
100161a2:	001a      	movs	r2, r3
100161a4:	f7f7 fa80 	bl	1000d6a8 <_write>
100161a8:	1c43      	adds	r3, r0, #1
100161aa:	d103      	bne.n	100161b4 <_write_r+0x20>
100161ac:	6823      	ldr	r3, [r4, #0]
100161ae:	2b00      	cmp	r3, #0
100161b0:	d000      	beq.n	100161b4 <_write_r+0x20>
100161b2:	602b      	str	r3, [r5, #0]
100161b4:	bd70      	pop	{r4, r5, r6, pc}
100161b6:	46c0      	nop			; (mov r8, r8)
100161b8:	1001b384 	.word	0x1001b384

100161bc <_close_r>:
100161bc:	2300      	movs	r3, #0
100161be:	b570      	push	{r4, r5, r6, lr}
100161c0:	4c06      	ldr	r4, [pc, #24]	; (100161dc <_close_r+0x20>)
100161c2:	0005      	movs	r5, r0
100161c4:	0008      	movs	r0, r1
100161c6:	6023      	str	r3, [r4, #0]
100161c8:	f7f7 faa8 	bl	1000d71c <_close>
100161cc:	1c43      	adds	r3, r0, #1
100161ce:	d103      	bne.n	100161d8 <_close_r+0x1c>
100161d0:	6823      	ldr	r3, [r4, #0]
100161d2:	2b00      	cmp	r3, #0
100161d4:	d000      	beq.n	100161d8 <_close_r+0x1c>
100161d6:	602b      	str	r3, [r5, #0]
100161d8:	bd70      	pop	{r4, r5, r6, pc}
100161da:	46c0      	nop			; (mov r8, r8)
100161dc:	1001b384 	.word	0x1001b384

100161e0 <_fstat_r>:
100161e0:	2300      	movs	r3, #0
100161e2:	b570      	push	{r4, r5, r6, lr}
100161e4:	4c06      	ldr	r4, [pc, #24]	; (10016200 <_fstat_r+0x20>)
100161e6:	0005      	movs	r5, r0
100161e8:	0008      	movs	r0, r1
100161ea:	0011      	movs	r1, r2
100161ec:	6023      	str	r3, [r4, #0]
100161ee:	f7f7 fa99 	bl	1000d724 <_fstat>
100161f2:	1c43      	adds	r3, r0, #1
100161f4:	d103      	bne.n	100161fe <_fstat_r+0x1e>
100161f6:	6823      	ldr	r3, [r4, #0]
100161f8:	2b00      	cmp	r3, #0
100161fa:	d000      	beq.n	100161fe <_fstat_r+0x1e>
100161fc:	602b      	str	r3, [r5, #0]
100161fe:	bd70      	pop	{r4, r5, r6, pc}
10016200:	1001b384 	.word	0x1001b384

10016204 <_isatty_r>:
10016204:	2300      	movs	r3, #0
10016206:	b570      	push	{r4, r5, r6, lr}
10016208:	4c06      	ldr	r4, [pc, #24]	; (10016224 <_isatty_r+0x20>)
1001620a:	0005      	movs	r5, r0
1001620c:	0008      	movs	r0, r1
1001620e:	6023      	str	r3, [r4, #0]
10016210:	f7f7 fa8e 	bl	1000d730 <_isatty>
10016214:	1c43      	adds	r3, r0, #1
10016216:	d103      	bne.n	10016220 <_isatty_r+0x1c>
10016218:	6823      	ldr	r3, [r4, #0]
1001621a:	2b00      	cmp	r3, #0
1001621c:	d000      	beq.n	10016220 <_isatty_r+0x1c>
1001621e:	602b      	str	r3, [r5, #0]
10016220:	bd70      	pop	{r4, r5, r6, pc}
10016222:	46c0      	nop			; (mov r8, r8)
10016224:	1001b384 	.word	0x1001b384

10016228 <_lseek_r>:
10016228:	b570      	push	{r4, r5, r6, lr}
1001622a:	0005      	movs	r5, r0
1001622c:	0008      	movs	r0, r1
1001622e:	0011      	movs	r1, r2
10016230:	2200      	movs	r2, #0
10016232:	4c06      	ldr	r4, [pc, #24]	; (1001624c <_lseek_r+0x24>)
10016234:	6022      	str	r2, [r4, #0]
10016236:	001a      	movs	r2, r3
10016238:	f7f7 fa7c 	bl	1000d734 <_lseek>
1001623c:	1c43      	adds	r3, r0, #1
1001623e:	d103      	bne.n	10016248 <_lseek_r+0x20>
10016240:	6823      	ldr	r3, [r4, #0]
10016242:	2b00      	cmp	r3, #0
10016244:	d000      	beq.n	10016248 <_lseek_r+0x20>
10016246:	602b      	str	r3, [r5, #0]
10016248:	bd70      	pop	{r4, r5, r6, pc}
1001624a:	46c0      	nop			; (mov r8, r8)
1001624c:	1001b384 	.word	0x1001b384

10016250 <memchr>:
10016250:	b2c9      	uxtb	r1, r1
10016252:	1882      	adds	r2, r0, r2
10016254:	4290      	cmp	r0, r2
10016256:	d004      	beq.n	10016262 <memchr+0x12>
10016258:	7803      	ldrb	r3, [r0, #0]
1001625a:	428b      	cmp	r3, r1
1001625c:	d002      	beq.n	10016264 <memchr+0x14>
1001625e:	3001      	adds	r0, #1
10016260:	e7f8      	b.n	10016254 <memchr+0x4>
10016262:	2000      	movs	r0, #0
10016264:	4770      	bx	lr
	...

10016268 <_read_r>:
10016268:	b570      	push	{r4, r5, r6, lr}
1001626a:	0005      	movs	r5, r0
1001626c:	0008      	movs	r0, r1
1001626e:	0011      	movs	r1, r2
10016270:	2200      	movs	r2, #0
10016272:	4c06      	ldr	r4, [pc, #24]	; (1001628c <_read_r+0x24>)
10016274:	6022      	str	r2, [r4, #0]
10016276:	001a      	movs	r2, r3
10016278:	f7f7 f9f6 	bl	1000d668 <_read>
1001627c:	1c43      	adds	r3, r0, #1
1001627e:	d103      	bne.n	10016288 <_read_r+0x20>
10016280:	6823      	ldr	r3, [r4, #0]
10016282:	2b00      	cmp	r3, #0
10016284:	d000      	beq.n	10016288 <_read_r+0x20>
10016286:	602b      	str	r3, [r5, #0]
10016288:	bd70      	pop	{r4, r5, r6, pc}
1001628a:	46c0      	nop			; (mov r8, r8)
1001628c:	1001b384 	.word	0x1001b384
10016290:	000003e8 	.word	0x000003e8

10016294 <test>:
10016294:	00000083 00004000 00000200 00c800c8     .....@..........
100162a4:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100162b4:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100162c4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
100162d4:	5220706f 73646165 00000000 706d6153     op Reads....Samp
100162e4:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100162f4:	666f206c 74657366 74616420 57482061     l offset data HW
10016304:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10016314:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10016324:	6f727947 66666f20 20746573 61746164     Gyro offset data
10016334:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10016344:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10016354:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10016364:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10016374:	6e756f66 00002e64 72617453 676e6974     found...Starting
10016384:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10016394:	72746552 69766569 4220676e 65736169     Retrieving Biase
100163a4:	00000d73 72746552 69766569 4220676e     s...Retrieving B
100163b4:	65736169 72452073 20726f72 6f70202d     iases Error - po
100163c4:	62697373 4920656c 65204332 726f7272     ssible I2C error
100163d4:	00000000 72746552 69766569 5320676e     ....Retrieving S
100163e4:	69422054 73657361 00000000 72746552     T Biases....Retr
100163f4:	69766569 5320676e 69422054 73657361     ieving ST Biases
10016404:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10016414:	32492065 72652043 00726f72 64616552     e I2C error.Read
10016424:	20676e69 2050544f 69676552 72657473     ing OTP Register
10016434:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10016444:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10016454:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10016464:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10016474:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10016484:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10016494:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
100164a4:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
100164b4:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100164c4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100164d4:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100164e4:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100164f4:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10016504:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10016514:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10016524:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10016534:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10016544:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10016554:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10016564:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10016574:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10016584:	6c207361 20737365 6e616874 2e372520     as less than %7.
10016594:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
100165a4:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
100165b4:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100165c4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
100165d4:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
100165e4:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
100165f4:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10016604:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10016614:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10016624:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10016634:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10016644:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10016654:	253a7369 72672064 65746165 68742072     is:%d greater th
10016664:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10016674:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10016684:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10016694:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
100166a4:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
100166b4:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100166c4:	65542066 52207473 6c757365 203a7374     f Test Results: 
100166d4:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
100166e4:	73655420 65522074 746c7573 25203a73      Test Results: %
100166f4:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10016704:	00000000                                ....

10016708 <hw>:
10016708:	04000069 01410080 01000000 00001333     i.....A.....3...

10016718 <reg>:
10016718:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10016728:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10016738:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10016748:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10016758:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10016768:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10016778:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10016788:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
10016798:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
100167a8:	6150095d 6e697269 65722067 73657571     ].Pairing reques
100167b8:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
100167c8:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
100167d8:	20325420 00006425 656d6954 63203172      T2 %d..Timer1 c
100167e8:	65727275 6d20746e 3a65646f 00642520     urrent mode: %d.
100167f8:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016808:	5d6e776f 00000000 736d735b 656c625f     own]....[sms_ble
10016818:	776f705f 645f7265 5d6e776f 6f745309     _power_down].Sto
10016828:	6e697070 6f632067 6e616d6d 65722064     pping command re
10016838:	76696563 64206465 6e697275 64612067     ceived during ad
10016848:	74726576 6d657369 2e746e65 6f745320     vertisement. Sto
10016858:	6e697070 2e2e2e67 00000020 6c696166     pping... ...fail
10016868:	21216465 00000021 656e6f64 00000021     ed!!!...done!...
10016878:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
10016888:	5d6e776f 65440909 65636976 69617020     own]..Device pai
10016898:	2e646572 64202e2e 62617369 676e696c     red... disabling
100168a8:	746e6920 75727265 20737470 77732026      interrupts & sw
100168b8:	68637469 20676e69 6e776f64 6e657320     itching down sen
100168c8:	73726f73 00000000 736d735b 656c625f     sors....[sms_ble
100168d8:	776f705f 645f7265 5d6e776f 75430909     _power_down]..Cu
100168e8:	6e657272 20796c74 69646e69 69746163     rrently indicati
100168f8:	0000676e 736d735b 656c625f 776f705f     ng..[sms_ble_pow
10016908:	645f7265 5d6e776f 65440909 65636976     er_down]..Device
10016918:	6e6f6320 7463656e 2e2e6465 6964202e      connected... di
10016928:	6e6f6373 7463656e 00676e69 736d735b     sconnecting.[sms
10016938:	656c625f 7664615f 7065725f 5f74726f     _ble_adv_report_
10016948:	095d6e66 65766441 73697472 6e656d65     fn].Advertisemen
10016958:	69742074 756f656d 2e2e2e74 00000000     t timeout.......
10016968:	736d735b 656c625f 6e6f635f 7463656e     [sms_ble_connect
10016978:	665f6465 09095d6e 69766544 20736563     ed_fn]..Devices 
10016988:	6e6e6f63 65746365 2e2e2e64 00000000     connected.......
10016998:	736d735b 656c625f 6961705f 5f646572     [sms_ble_paired_
100169a8:	005d6e66 736d735b 656c625f 7664615f     fn].[sms_ble_adv
100169b8:	69747265 095d6573 65766441 73697472     ertise].Advertis
100169c8:	6e656d65 61642074 73206174 66207465     ement data set f
100169d8:	656c6961 00002164 736d735b 656c625f     ailed!..[sms_ble
100169e8:	7664615f 69747265 095d6573 454c4209     _advertise]..BLE
100169f8:	61745320 64657472 76644120 69747265      Started Adverti
10016a08:	656d6573 0000746e 736d735b 7265735f     sement..[sms_ser
10016a18:	65636976 7664615f 69747265 095d6573     vice_advertise].
10016a28:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10016a38:	74732074 20747261 6c696166 203a6465     t start failed: 
10016a48:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
10016a58:	656c625f 7369645f 6e6e6f63 65746365     _ble_disconnecte
10016a68:	6e665f64 6550095d 64207265 6f637369     d_fn].Peer disco
10016a78:	63656e6e 2e646574 42202e2e 2077656e     nnected... Bnew 
10016a88:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
10016a98:	25203154 54202c64 64252032 00000000     T1 %d, T2 %d....
10016aa8:	6e630a0d 25203a74 00000064              ..cnt: %d...

10016ab4 <sms_ble_gap_cb>:
	...
10016ac0:	1000a041 00000000 1000a075 1000a185     A.......u.......
	...
10016ad8:	1000a0bd 10009e3d 00000000 00000000     ....=...........
	...

10016b00 <sms_ble_gatt_server_cb>:
10016b00:	10009e89 10009ee5 00000000 00000000     ................
	...
10016b28:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016b38:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016b48:	656c6968 74657320 676e6974 20707520     hile setting up 
10016b58:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016b68:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016b78:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016b88:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016b98:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016ba8:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016bb8:	656c6968 74657320 676e6974 20707520     hile setting up 
10016bc8:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016bd8:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016be8:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10016bf8:	74747542 73206e6f 65746174 6425203a     Button state: %d
10016c08:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10016c18:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10016c28:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10016c38:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016c48:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016c58:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
10016c68:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10016c78:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10016c88:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10016c98:	6e697472 65732067 726f736e 42282073     rting sensors (B
10016ca8:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
10016cb8:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10016cc8:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10016cd8:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016ce8:	5d736563 72655309 65636976 65642073     ces].Services de
10016cf8:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016d08:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016d18:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016d28:	69767265 5d736563 72655309 65636976     ervices].Service
10016d38:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016d48:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10016d58:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10016d68:	65732065 6e697474 70672067 70206f69     e setting gpio p
10016d78:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10016d88:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10016d98:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10016da8:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10016db8:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
10016dc8:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016dd8:	6d656c62 69687720 7320656c 69747465     blem while setti
10016de8:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10016df8:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10016e08:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10016e18:	6d656c62 69687720 7320656c 69747465     blem while setti
10016e28:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
10016e38:	0000006e 74696e49 696c6169 676e697a     n...Initializing
10016e48:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
10016e58:	00000000 74746553 20676e69 4d207075     ....Setting up M
10016e68:	2e2e5550 0000002e 736d735b 64656c5f     PU......[sms_led
10016e78:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
10016e88:	206d656c 6c696877 65732065 6e697474     lem while settin
10016e98:	70752067 64656c20 00000030 736d735b     g up led0...[sms
10016ea8:	6572705f 72757373 6f635f65 6769666e     _pressure_config
10016eb8:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
10016ec8:	6877206d 20656c69 74746573 20676e69     m while setting 
10016ed8:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
10016ee8:	6572705f 72757373 74735f65 75747261     _pressure_startu
10016ef8:	09095d70 72617453 676e6974 65727020     p]..Starting pre
10016f08:	72757373 65732065 726f736e 00000000     ssure sensor....
10016f18:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10016f28:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
10016f38:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
10016f48:	65727020 72757373 203d2065 00646c25      pressure = %ld.
10016f58:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
10016f68:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
10016f78:	61642067 70206174 696c6c6f 0000676e     g data polling..
10016f88:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10016f98:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
10016fa8:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
10016fb8:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
10016fc8:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10016fd8:	65636976 53095d73 69767265 20736563     vices].Services 
10016fe8:	69666564 676e696e 69616620 2c64656c     defining failed,
10016ff8:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10017008:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10017018:	656e6966 7265735f 65636976 53095d73     fine_services].S
10017028:	69767265 20736563 69666564 2c64656e     ervices defined,
10017038:	534d5320 65727020 72757373 61682065      SMS pressure ha
10017048:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
10017058:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10017068:	6c696146 74206465 6e69206f 6d207469     Failed to init m
10017078:	20383573 69766564 00006563 736d735b     s58 device..[sms
10017088:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10017098:	6c696146 74206465 6e69206f 61697469     Failed to initia
100170a8:	657a696c 65727020 72757373 65732065     lize pressure se
100170b8:	726f736e 6f57202e 6e696b72 6f6d2067     nsor. Working mo
100170c8:	3d206564 54554220 5f4e4f54 4f4c4f53     de = BUTTON_SOLO
100170d8:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
100170e8:	5f317265 095d6e66 61745309 6e697472     er1_fn]..Startin
100170f8:	65732067 726f736e 4d282073 20383553     g sensors (MS58 
10017108:	65736572 2e2e2974 0000002e 736d735b     reset)......[sms
10017118:	6175645f 6d69746c 5f317265 005d6e66     _dualtimer1_fn].
10017128:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10017138:	095d6e66 61745309 6e697472 65732067     fn]..Starting se
10017148:	726f736e 73282073 74747568 20676e69     nsors (shutting 
10017158:	6e776f64 2e2e2e29 00000000 736d735b     down).......[sms
10017168:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10017178:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10017188:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10017198:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
100171a8:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
100171b8:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
100171c8:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
100171d8:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
100171e8:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
100171f8:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
10017208:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
10017218:	666f2067 2e2e2e66 00000000 1000c688     g off...........
10017228:	1000c696 1000c6a4 1000c6b2 1000c6c0     ................
10017238:	1000c6ce 1000c6dc 1000c6ec 1000c6fc     ................
10017248:	1000c70c 1000c71c 1000c72c 1000c73c     ........,...<...
10017258:	1000c74c 1000c75c 1000c76c 1000c77c     L...\...l...|...
10017268:	1000c78c 1000c79c 1000c7ac 1000c7bc     ................
10017278:	1000c7cc 1000c7dc 1000c7ec 1000c7fc     ................
10017288:	1000c80c 1000c81c 1000c82c 1000c83a     ........,...:...
10017298:	1000c848 1000c856 1000c864 1000c872     H...V...d...r...
100172a8:	1000c880 1000c88e 1000c89c 1000c8ac     ................
100172b8:	1000c8bc 1000c8cc 1000c8dc 1000c8ec     ................
100172c8:	1000c8fc 1000c90c 1000c91c 1000c92c     ............,...
100172d8:	1000c93c 1000c94c 1000c95c 1000c96c     <...L...\...l...
100172e8:	1000c97c 1000c98c 1000c99c 1000c9aa     |...............
100172f8:	1000c9b8 1000c9e4 1000c9f2 1000ca00     ................
10017308:	1000ca0e 1000ca1c 1000ca2a 1000ca38     ........*...8...
10017318:	1000ca46 1000ca54 1000ca62 1000ca70     F...T...b...p...
10017328:	1000ca7e 1000ca8c 1000ca9a 1000caa8     ~...............
10017338:	1000cab6 1000cac4 1000cad2 1000cae0     ................
10017348:	1000caee 1000cafc 1000cb0a 1000cb18     ................
10017358:	1000cb26 1000cb34 1000cb42 1000cb50     &...4...B...P...
10017368:	1000cb5e 1000cb6c 1000cb7a 1000cb88     ^...l...z.......
10017378:	1000cb96 1000cba4 1000cbb2 1000cbc0     ................
10017388:	1000cbce 1000cbdc 1000cbea 1000cbf8     ................
10017398:	1000cc06 1000cc14 1000cc22 1000cc30     ........"...0...
100173a8:	1000cc3e 1000cc4c 1000cc5a 1000cc68     >...L...Z...h...
100173b8:	1000cc76 1000cc84 1000cc92 1000cca0     v...............
100173c8:	1000ccae 1000ccbc 1000ccca 1000cd64     ............d...
100173d8:	1000cd8c 1000cdb4 1000cddc 1000d01c     ................
100173e8:	1000ce0c 1000ce24 1000ce9c 1000ceb4     ....$...........
100173f8:	1000ce3c 1000ce54 1000ce6c 1000ce84     <...T...l.......
10017408:	1000cecc 1000d190 1000d190 1000d190     ................
10017418:	1000d190 1000d190 1000d190 1000d190     ................
10017428:	1000d190 1000cf74 1000cf8c 1000cfa4     ....t...........
10017438:	1000d032 1000cefc 1000d190 1000d190     2...............
10017448:	1000d190 1000d190 1000d190 1000d190     ................
10017458:	1000cfbc 1000cfd4 1000cfec 1000d004     ................
10017468:	1000d190 1000d148 1000d160 1000d190     ....H...`.......
10017478:	1000d190 1000d05e 1000d074 1000d08a     ....^...t.......
10017488:	1000d0a0 1000d190 1000d190 1000d190     ................
10017498:	1000d190 1000d190 1000d190 1000d190     ................
100174a8:	1000d190 1000cd50 1000cd78 1000cda0     ....P...x.......
100174b8:	1000cdc8 1000cdf4 1000cee4 1000cf14     ................
100174c8:	1000cf2c 1000cf44 1000cf5c 1000d048     ,...D...\...H...
100174d8:	1000d0b6 1000d130 1000d178 1000d8b2     ....0...x.......
100174e8:	1000d8c4 1000d89a 1000d89a 1000d89a     ................
100174f8:	1000d8b2 1000d89a 1000d89a 1000e2b6     ................
10017508:	1000e32a 1000e29e 1000e330 1000e2a4     *.......0.......
10017518:	1000e2aa 1000e2b0 1000ea10 1000ea10     ................
10017528:	1000ea10 1000ea10 1000ea10 1000ea10     ................
10017538:	1000ea10 1000ea10 1000ea10 1000ea10     ................
10017548:	1000ea10 1000ea10 1000ea10 1000ea10     ................
10017558:	1000ea10 1000ea10 1000ea10 1000ea10     ................
10017568:	1000ea10 1000ea2e 1000ea2e 1000ea2e     ................
10017578:	1000ea2e 1000ea2e 1000ea2e 1000ea2e     ................
10017588:	1000ea2e 1000ea2e 1000ea2e 1000ea50     ............P...
10017598:	1000ea50 1000ea50 1000ea50 1000ea50     P...P...P...P...
100175a8:	1000ea50 1000ea50 1000ea50 1000ea50     P...P...P...P...
100175b8:	1000ea50 1000ea80 1000ea80 1000ea80     P...............
100175c8:	1000ea80 1000ea80 1000ea80 1000ea9a     ................
100175d8:	1000ea9a 1000ea9a 1000ea9a 1000ea9a     ................
100175e8:	1000ea9a 1000ea9a 1000ea9a 1000ea9a     ................
100175f8:	1000eab4 1000eab4 1000ead6 1000ead6     ................
10017608:	1000eaf0 1000ead6 34333231 00003635     ........123456..
10017618:	efcdab00 00efcdab                       ........

10017620 <ble_mgr_gatt_server_handle>:
	...
10017638:	1000d7ad 1000d7d5 1000d81d 00000000     ................
10017648:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10017658:	65636552 64657669 00000000 6e616353     Received....Scan
10017668:	676e696e 61662020 64656c69 00000000     ning  failed....
10017678:	65766441 73697472 20676e69 6c696166     Advertising fail
10017688:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10017698:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
100176a8:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
100176b8:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
100176c8:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
100176d8:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
100176e8:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
100176f8:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10017708:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10017718:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10017728:	00000064 72616843 69725720 43206574     d...Char Write C
10017738:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10017748:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10017758:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10017768:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10017778:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10017788:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017798:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
100177a8:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
100177b8:	00000000 69766544 64206563 6f637369     ....Device disco
100177c8:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
100177d8:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
100177e8:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
100177f8:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10017808:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017818:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017828:	6c706d6f 64657465 63757320 73736563     ompleted success
10017838:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017848:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017858:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017868:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017878:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017888:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017898:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
100178a8:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
100178b8:	206e6163 69766564 72206563 68636165     can device reach
100178c8:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
100178d8:	00006e61 6c696146 74206465 7473206f     an..Failed to st
100178e8:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
100178f8:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017908:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017918:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017928:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017938:	52207463 65757165 46207473 656c6961     ct Request Faile
10017948:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017958:	72756465 6f632065 656c706d 20646574     edure completed 
10017968:	63637573 66737365 796c6c75 00000000     successfully....
10017978:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017988:	646e756f 206f7420 726f7473 68742065     ound to store th
10017998:	61702065 6e697269 6e692067 00006f66     e pairing info..
100179a8:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
100179b8:	4e206e6f 7320746f 74726174 00006465     on Not started..
100179c8:	76616c53 65532065 69727563 52207974     Slave Security R
100179d8:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100179e8:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
100179f8:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017a08:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017a18:	20676e69 70736572 65736e6f 00000000     ing response....
10017a28:	72696150 71655220 74736575 41202d20     Pair Request - A
10017a38:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017a48:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017a58:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017a68:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017a78:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017a88:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017a98:	61656c50 45206573 7265746e 65687420     Please Enter the
10017aa8:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017ab8:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017ac8:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017ad8:	70657220 6620796c 656c6961 00000064      reply failed...
10017ae8:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017af8:	70707573 6574726f 00000064 65746e45     supported...Ente
10017b08:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017b18:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017b28:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017b38:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017b48:	76656420 20656369 76696465 00782520      device ediv %x.
10017b58:	72656570 76656420 20656369 76696465     peer device ediv
10017b68:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017b78:	00782520 20656854 65646e69 73692078      %x.The index is
10017b88:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017b98:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017ba8:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017bb8:	20726565 69766564 69206563 6f6e2073     eer device is no
10017bc8:	76612074 616c6961 2e656c62 00000000     t available.....
10017bd8:	61656c50 75206573 6961706e 68742072     Please unpair th
10017be8:	65642065 65636976 6f726620 6570206d     e device from pe
10017bf8:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017c08:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017c18:	20646e61 72617473 61702074 6e697269     and start pairin
10017c28:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017c38:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017c48:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017c58:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017c68:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017c78:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017c88:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017c98:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017ca8:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017cb8:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017cc8:	61656c50 63206573 6b636568 65687420     Please check the
10017cd8:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017ce8:	6f697463 202f206e 64726168 65726177     ction / hardware
10017cf8:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017d08:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017d18:	20656d61 20746573 6c696166 00006465     ame set failed..
10017d28:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017d38:	5d676966 44420909 64646120 73736572     fig]..BD address
10017d48:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017d58:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017d68:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017d78:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017d88:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017d98:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017da8:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017db8:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017dc8:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017dd8:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017de8:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017df8:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017e08:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017e18:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017e28:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017e38:	69727563 72207974 65757165 73207473     curity request s
10017e48:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017e58:	65732065 69727563 72207974 65757165     e security reque
10017e68:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017e78:	65746365 6f742064 65657020 65642072     ected to peer de
10017e88:	65636976 74697720 64612068 73657264     vice with addres
10017e98:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017ea8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017eb8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017ec8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017ed8:	61522067 6d6f646e 64646120 73736572     g Random address
10017ee8:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017ef8:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017f08:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017f18:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017f28:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017f38:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017f48:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017f58:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017f68:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017f78:	00000064 23232323 23232323 65442323     d...##########De
10017f88:	65636976 756f4620 0000646e 23232323     vice Found..####
10017f98:	23232323 65442323 65636976 746f4e20     ######Device Not
10017fa8:	756f4620 0000646e 69766544 69206563      Found..Device i
10017fb8:	253a7864 00000064 2d454c42 6e657645     dx:%d...BLE-Even
10017fc8:	64253a74 00000000 54544147 7265535f     t:%d....GATT_Ser
10017fd8:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017fe8:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017ff8:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10018008:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018018:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018028:	69666963 61642063 65206174 6c62616e     cific data enabl
10018038:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
10018048:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10018058:	61642074 73206174 66207465 656c6961     t data set faile
10018068:	00000064                                d...

1001806c <ble_mgr_gap_handle>:
1001806c:	1000d739 1000d9e9 1000d75d 1000d785     9.......].......
1001807c:	00000000 1000e665 1000d865 1000d901     ....e...e.......
1001808c:	1000dc45 1000da95 1000de45 1000dc5d     E.......E...]...
1001809c:	1000dfd1 1000e115 1000d925 1000e8b1     ........%.......
	...
100180b8:	1000f90a 1000f918 1000f960 1000f9a4     ........`.......
100180c8:	1000f9b6 1000fa20 1000fa38 6c756f43     .... ...8...Coul
100180d8:	6f6e2064 6e692074 61697469 657a696c     d not initialize
100180e8:	55504d20 00000021 69616d5b 09095d6e      MPU!...[main]..
100180f8:	61570909 676e696b 2e707520 00002e2e     ..Waking up.....
10018108:	6e6f6420 00002165 6d5b0a0d 5d6e6961      done!....[main]
10018118:	09090909 61736944 6e696c62 75622067     ....Disabling bu
10018128:	6e6f7474 746e6920 002e2e2e 4e2e2e2e     tton int.......N
10018138:	4f53204f 45435255 00002121 422e2e2e     O SOURCE!!.....B
10018148:	00304e54 69616d5b 09095d6e 72450909     TN0.[main]....Er
10018158:	20726f72 73206e69 625f736d 6f747475     ror in sms_butto
10018168:	6e665f6e 00212928 422e2e2e 00314e54     n_fn()!....BTN1.
10018178:	4d2e2e2e 445f5550 00594452 412e2e2e     ...MPU_DRDY....A
10018188:	545f4e4f 52454d49 00000000 69616d5b     ON_TIMER....[mai
10018198:	09095d6e 6f500909 6e696c6c 72702067     n]....Polling pr
100181a8:	75737365 64206572 2e617461 00002e2e     essure data.....
100181b8:	69616d5b 09095d6e 4f410909 6974204e     [main]....AON ti
100181c8:	2072656d 64616572 68772079 20656c69     mer ready while 
100181d8:	69646e69 69746163 2e2e676e 6b73202e     indicating... sk
100181e8:	69707069 0000676e 442e2e2e 544c4155     ipping.....DUALT
100181f8:	52454d49 00000031 442e2e2e 544c4155     IMER1......DUALT
10018208:	52454d49 00000032 3f2e2e2e 0000003f     IMER2......??...
10018218:	69616d5b 09095d6e 6e450909 696c6261     [main]....Enabli
10018228:	6220676e 6f747475 6e69206e 2e2e2e74     ng button int...
10018238:	00000000 69616d5b 09095d6e 4c550909     ....[main]....UL
10018248:	2e2e2e50 00000000 00212120 656d7441     P....... !!.Atme
10018258:	6f43206c 022e7072                                l Corp.

1001825f <CSWTCH.45>:
1001825f:	00100402                                         ...

10018262 <CSWTCH.47>:
10018262:	03010300 03030303 03030303 02020303              ...............

10018271 <client_conf_uuid>:
10018271:	29042902                                         .)

10018273 <presentation_format_uuid>:
10018273:	29012904                                         .)

10018275 <user_desc_uuid>:
10018275:	29032901                                         .)

10018277 <server_conf_uuid>:
10018277:	29002903                                         .)

10018279 <extended_props_uuid>:
10018279:	28022900                                         .)

1001827b <include_uuid>:
1001827b:	28032802                                         .(

1001827d <char_uuid>:
1001827d:	c2002803 e6100138 a4100137 7c100138     .(..8...7...8..|
1001828d:	a4100138 70100138 a4100138 7c100138     8...8..p8...8..|
1001829d:	e6100138 e6100137 70100137 7c100138     8...7...7..p8..|
100182ad:	28100138 28100139 28100139 aa100139     8..(9..(9..(9...
100182bd:	e6100138 e6100137 90100137 7a100138     8...7...7...8..z
100182cd:	90100138 70100138 90100138 7a100138     8...8..p8...8..z
100182dd:	e6100138 e6100137 70100137 7a100138     8...7...7..p8..z
100182ed:	28100138 28100139 28100139 34100139     8..(9..(9..(9..4
100182fd:	20100139 7e10013c 7e10013b 7c10013b     9.. <..~;..~;..|
1001830d:	1210013b 1210013c 0810013c 7c10013c     ;...<...<...<..|
1001831d:	1210013b 0810013c 1210013c 7c10013c     ;...<...<...<..|
1001832d:	1810013b 1810013c 1810013c a210013c     ;...<...<...<...
1001833d:	9410013c 54100145 54100144 52100144     <...E..TD..TD..R
1001834d:	6c100144 6c100145 5e100145 52100145     D..lE..lE..^E..R
1001835d:	6c100144 5e100145 6c100145 52100145     D..lE..^E..lE..R
1001836d:	74100144 74100145 74100145 74100145     D..tE..tE..tE..t
1001837d:	43100147 84000000                                G..C...

10018384 <_global_impure_ptr>:
10018384:	10018484                                ....

10018388 <__sf_fake_stdin>:
	...

100183a8 <__sf_fake_stdout>:
	...

100183c8 <__sf_fake_stderr>:
	...
100183e8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100183f8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018408:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018418:	00006665                                ef..

1001841c <_init>:
1001841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001841e:	46c0      	nop			; (mov r8, r8)
10018420:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018422:	bc08      	pop	{r3}
10018424:	469e      	mov	lr, r3
10018426:	4770      	bx	lr

10018428 <__init_array_start>:
10018428:	100080b1 	.word	0x100080b1

1001842c <_fini>:
1001842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001842e:	46c0      	nop			; (mov r8, r8)
10018430:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018432:	bc08      	pop	{r3}
10018434:	469e      	mov	lr, r3
10018436:	4770      	bx	lr

10018438 <__fini_array_start>:
10018438:	10008089 	.word	0x10008089
